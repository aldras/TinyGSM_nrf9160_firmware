
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00018200 <_vector_start>:
   18200:	20030898 	.word	0x20030898
   18204:	00021ed9 	.word	0x00021ed9
   18208:	000352bd 	.word	0x000352bd
   1820c:	00021f39 	.word	0x00021f39
   18210:	00021f39 	.word	0x00021f39
   18214:	00021f39 	.word	0x00021f39
   18218:	00021f39 	.word	0x00021f39
   1821c:	00021f39 	.word	0x00021f39
	...
   1822c:	00021bbd 	.word	0x00021bbd
   18230:	00021f39 	.word	0x00021f39
   18234:	00000000 	.word	0x00000000
   18238:	00021b0d 	.word	0x00021b0d
   1823c:	000351bb 	.word	0x000351bb

00018240 <_irq_vector_table>:
   18240:	00021e99 00021e99 00021e99 00021e99     ................
   18250:	00021e99 00021e99 00021e99 00021e99     ................
   18260:	00021e99 00021e99 00021e99 00021e99     ................
   18270:	00021e99 00021e99 00021e99 00021e99     ................
   18280:	00021e99 00021e99 00021e99 00021e99     ................
   18290:	00021e99 00021e99 00021e99 00021e99     ................
   182a0:	00021e99 00021e99 00021e99 00021e99     ................
   182b0:	000257bd 00035f13 00021e99 00021e99     .W..._..........
   182c0:	00021e99 00021e99 00021e99 00021e99     ................
   182d0:	00021e99 00021e99 00021e99 00021e99     ................
   182e0:	00021e99 00021e99 00035f31 00021e99     ........1_......
   182f0:	00021e99 00021e99 00021e99 00021e99     ................
   18300:	00021e99 00021e99 00021e99 00021e99     ................
   18310:	00021e99 00021e99 00021e99 00021e99     ................
   18320:	00021e99 00021e99 00021e99 00021e99     ................
   18330:	00021e99 00021e99 00021e99 00021e99     ................
   18340:	00021e99                                ....

00018344 <_vector_end>:
	...

00018400 <m_firmware_info>:
   18400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   18410:	000252d8 00000001 00018200 00018200     .R..............
   18420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00018440 <__aeabi_drsub>:
   18440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   18444:	e002      	b.n	1844c <__adddf3>
   18446:	bf00      	nop

00018448 <__aeabi_dsub>:
   18448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001844c <__adddf3>:
   1844c:	b530      	push	{r4, r5, lr}
   1844e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   18452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   18456:	ea94 0f05 	teq	r4, r5
   1845a:	bf08      	it	eq
   1845c:	ea90 0f02 	teqeq	r0, r2
   18460:	bf1f      	itttt	ne
   18462:	ea54 0c00 	orrsne.w	ip, r4, r0
   18466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1846a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1846e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18472:	f000 80e2 	beq.w	1863a <__adddf3+0x1ee>
   18476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1847a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1847e:	bfb8      	it	lt
   18480:	426d      	neglt	r5, r5
   18482:	dd0c      	ble.n	1849e <__adddf3+0x52>
   18484:	442c      	add	r4, r5
   18486:	ea80 0202 	eor.w	r2, r0, r2
   1848a:	ea81 0303 	eor.w	r3, r1, r3
   1848e:	ea82 0000 	eor.w	r0, r2, r0
   18492:	ea83 0101 	eor.w	r1, r3, r1
   18496:	ea80 0202 	eor.w	r2, r0, r2
   1849a:	ea81 0303 	eor.w	r3, r1, r3
   1849e:	2d36      	cmp	r5, #54	; 0x36
   184a0:	bf88      	it	hi
   184a2:	bd30      	pophi	{r4, r5, pc}
   184a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   184a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   184ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   184b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   184b4:	d002      	beq.n	184bc <__adddf3+0x70>
   184b6:	4240      	negs	r0, r0
   184b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   184bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   184c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   184c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   184c8:	d002      	beq.n	184d0 <__adddf3+0x84>
   184ca:	4252      	negs	r2, r2
   184cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   184d0:	ea94 0f05 	teq	r4, r5
   184d4:	f000 80a7 	beq.w	18626 <__adddf3+0x1da>
   184d8:	f1a4 0401 	sub.w	r4, r4, #1
   184dc:	f1d5 0e20 	rsbs	lr, r5, #32
   184e0:	db0d      	blt.n	184fe <__adddf3+0xb2>
   184e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   184e6:	fa22 f205 	lsr.w	r2, r2, r5
   184ea:	1880      	adds	r0, r0, r2
   184ec:	f141 0100 	adc.w	r1, r1, #0
   184f0:	fa03 f20e 	lsl.w	r2, r3, lr
   184f4:	1880      	adds	r0, r0, r2
   184f6:	fa43 f305 	asr.w	r3, r3, r5
   184fa:	4159      	adcs	r1, r3
   184fc:	e00e      	b.n	1851c <__adddf3+0xd0>
   184fe:	f1a5 0520 	sub.w	r5, r5, #32
   18502:	f10e 0e20 	add.w	lr, lr, #32
   18506:	2a01      	cmp	r2, #1
   18508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1850c:	bf28      	it	cs
   1850e:	f04c 0c02 	orrcs.w	ip, ip, #2
   18512:	fa43 f305 	asr.w	r3, r3, r5
   18516:	18c0      	adds	r0, r0, r3
   18518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1851c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18520:	d507      	bpl.n	18532 <__adddf3+0xe6>
   18522:	f04f 0e00 	mov.w	lr, #0
   18526:	f1dc 0c00 	rsbs	ip, ip, #0
   1852a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1852e:	eb6e 0101 	sbc.w	r1, lr, r1
   18532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   18536:	d31b      	bcc.n	18570 <__adddf3+0x124>
   18538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1853c:	d30c      	bcc.n	18558 <__adddf3+0x10c>
   1853e:	0849      	lsrs	r1, r1, #1
   18540:	ea5f 0030 	movs.w	r0, r0, rrx
   18544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   18548:	f104 0401 	add.w	r4, r4, #1
   1854c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   18550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   18554:	f080 809a 	bcs.w	1868c <__adddf3+0x240>
   18558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1855c:	bf08      	it	eq
   1855e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18562:	f150 0000 	adcs.w	r0, r0, #0
   18566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1856a:	ea41 0105 	orr.w	r1, r1, r5
   1856e:	bd30      	pop	{r4, r5, pc}
   18570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   18574:	4140      	adcs	r0, r0
   18576:	eb41 0101 	adc.w	r1, r1, r1
   1857a:	3c01      	subs	r4, #1
   1857c:	bf28      	it	cs
   1857e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   18582:	d2e9      	bcs.n	18558 <__adddf3+0x10c>
   18584:	f091 0f00 	teq	r1, #0
   18588:	bf04      	itt	eq
   1858a:	4601      	moveq	r1, r0
   1858c:	2000      	moveq	r0, #0
   1858e:	fab1 f381 	clz	r3, r1
   18592:	bf08      	it	eq
   18594:	3320      	addeq	r3, #32
   18596:	f1a3 030b 	sub.w	r3, r3, #11
   1859a:	f1b3 0220 	subs.w	r2, r3, #32
   1859e:	da0c      	bge.n	185ba <__adddf3+0x16e>
   185a0:	320c      	adds	r2, #12
   185a2:	dd08      	ble.n	185b6 <__adddf3+0x16a>
   185a4:	f102 0c14 	add.w	ip, r2, #20
   185a8:	f1c2 020c 	rsb	r2, r2, #12
   185ac:	fa01 f00c 	lsl.w	r0, r1, ip
   185b0:	fa21 f102 	lsr.w	r1, r1, r2
   185b4:	e00c      	b.n	185d0 <__adddf3+0x184>
   185b6:	f102 0214 	add.w	r2, r2, #20
   185ba:	bfd8      	it	le
   185bc:	f1c2 0c20 	rsble	ip, r2, #32
   185c0:	fa01 f102 	lsl.w	r1, r1, r2
   185c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   185c8:	bfdc      	itt	le
   185ca:	ea41 010c 	orrle.w	r1, r1, ip
   185ce:	4090      	lslle	r0, r2
   185d0:	1ae4      	subs	r4, r4, r3
   185d2:	bfa2      	ittt	ge
   185d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   185d8:	4329      	orrge	r1, r5
   185da:	bd30      	popge	{r4, r5, pc}
   185dc:	ea6f 0404 	mvn.w	r4, r4
   185e0:	3c1f      	subs	r4, #31
   185e2:	da1c      	bge.n	1861e <__adddf3+0x1d2>
   185e4:	340c      	adds	r4, #12
   185e6:	dc0e      	bgt.n	18606 <__adddf3+0x1ba>
   185e8:	f104 0414 	add.w	r4, r4, #20
   185ec:	f1c4 0220 	rsb	r2, r4, #32
   185f0:	fa20 f004 	lsr.w	r0, r0, r4
   185f4:	fa01 f302 	lsl.w	r3, r1, r2
   185f8:	ea40 0003 	orr.w	r0, r0, r3
   185fc:	fa21 f304 	lsr.w	r3, r1, r4
   18600:	ea45 0103 	orr.w	r1, r5, r3
   18604:	bd30      	pop	{r4, r5, pc}
   18606:	f1c4 040c 	rsb	r4, r4, #12
   1860a:	f1c4 0220 	rsb	r2, r4, #32
   1860e:	fa20 f002 	lsr.w	r0, r0, r2
   18612:	fa01 f304 	lsl.w	r3, r1, r4
   18616:	ea40 0003 	orr.w	r0, r0, r3
   1861a:	4629      	mov	r1, r5
   1861c:	bd30      	pop	{r4, r5, pc}
   1861e:	fa21 f004 	lsr.w	r0, r1, r4
   18622:	4629      	mov	r1, r5
   18624:	bd30      	pop	{r4, r5, pc}
   18626:	f094 0f00 	teq	r4, #0
   1862a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1862e:	bf06      	itte	eq
   18630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   18634:	3401      	addeq	r4, #1
   18636:	3d01      	subne	r5, #1
   18638:	e74e      	b.n	184d8 <__adddf3+0x8c>
   1863a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1863e:	bf18      	it	ne
   18640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18644:	d029      	beq.n	1869a <__adddf3+0x24e>
   18646:	ea94 0f05 	teq	r4, r5
   1864a:	bf08      	it	eq
   1864c:	ea90 0f02 	teqeq	r0, r2
   18650:	d005      	beq.n	1865e <__adddf3+0x212>
   18652:	ea54 0c00 	orrs.w	ip, r4, r0
   18656:	bf04      	itt	eq
   18658:	4619      	moveq	r1, r3
   1865a:	4610      	moveq	r0, r2
   1865c:	bd30      	pop	{r4, r5, pc}
   1865e:	ea91 0f03 	teq	r1, r3
   18662:	bf1e      	ittt	ne
   18664:	2100      	movne	r1, #0
   18666:	2000      	movne	r0, #0
   18668:	bd30      	popne	{r4, r5, pc}
   1866a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1866e:	d105      	bne.n	1867c <__adddf3+0x230>
   18670:	0040      	lsls	r0, r0, #1
   18672:	4149      	adcs	r1, r1
   18674:	bf28      	it	cs
   18676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1867a:	bd30      	pop	{r4, r5, pc}
   1867c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   18680:	bf3c      	itt	cc
   18682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   18686:	bd30      	popcc	{r4, r5, pc}
   18688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1868c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18694:	f04f 0000 	mov.w	r0, #0
   18698:	bd30      	pop	{r4, r5, pc}
   1869a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1869e:	bf1a      	itte	ne
   186a0:	4619      	movne	r1, r3
   186a2:	4610      	movne	r0, r2
   186a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   186a8:	bf1c      	itt	ne
   186aa:	460b      	movne	r3, r1
   186ac:	4602      	movne	r2, r0
   186ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   186b2:	bf06      	itte	eq
   186b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   186b8:	ea91 0f03 	teqeq	r1, r3
   186bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   186c0:	bd30      	pop	{r4, r5, pc}
   186c2:	bf00      	nop

000186c4 <__aeabi_ui2d>:
   186c4:	f090 0f00 	teq	r0, #0
   186c8:	bf04      	itt	eq
   186ca:	2100      	moveq	r1, #0
   186cc:	4770      	bxeq	lr
   186ce:	b530      	push	{r4, r5, lr}
   186d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186d8:	f04f 0500 	mov.w	r5, #0
   186dc:	f04f 0100 	mov.w	r1, #0
   186e0:	e750      	b.n	18584 <__adddf3+0x138>
   186e2:	bf00      	nop

000186e4 <__aeabi_i2d>:
   186e4:	f090 0f00 	teq	r0, #0
   186e8:	bf04      	itt	eq
   186ea:	2100      	moveq	r1, #0
   186ec:	4770      	bxeq	lr
   186ee:	b530      	push	{r4, r5, lr}
   186f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   186fc:	bf48      	it	mi
   186fe:	4240      	negmi	r0, r0
   18700:	f04f 0100 	mov.w	r1, #0
   18704:	e73e      	b.n	18584 <__adddf3+0x138>
   18706:	bf00      	nop

00018708 <__aeabi_f2d>:
   18708:	0042      	lsls	r2, r0, #1
   1870a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1870e:	ea4f 0131 	mov.w	r1, r1, rrx
   18712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   18716:	bf1f      	itttt	ne
   18718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1871c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18724:	4770      	bxne	lr
   18726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1872a:	bf08      	it	eq
   1872c:	4770      	bxeq	lr
   1872e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   18732:	bf04      	itt	eq
   18734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   18738:	4770      	bxeq	lr
   1873a:	b530      	push	{r4, r5, lr}
   1873c:	f44f 7460 	mov.w	r4, #896	; 0x380
   18740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18748:	e71c      	b.n	18584 <__adddf3+0x138>
   1874a:	bf00      	nop

0001874c <__aeabi_ul2d>:
   1874c:	ea50 0201 	orrs.w	r2, r0, r1
   18750:	bf08      	it	eq
   18752:	4770      	bxeq	lr
   18754:	b530      	push	{r4, r5, lr}
   18756:	f04f 0500 	mov.w	r5, #0
   1875a:	e00a      	b.n	18772 <__aeabi_l2d+0x16>

0001875c <__aeabi_l2d>:
   1875c:	ea50 0201 	orrs.w	r2, r0, r1
   18760:	bf08      	it	eq
   18762:	4770      	bxeq	lr
   18764:	b530      	push	{r4, r5, lr}
   18766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1876a:	d502      	bpl.n	18772 <__aeabi_l2d+0x16>
   1876c:	4240      	negs	r0, r0
   1876e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1877a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1877e:	f43f aed8 	beq.w	18532 <__adddf3+0xe6>
   18782:	f04f 0203 	mov.w	r2, #3
   18786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1878a:	bf18      	it	ne
   1878c:	3203      	addne	r2, #3
   1878e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18792:	bf18      	it	ne
   18794:	3203      	addne	r2, #3
   18796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1879a:	f1c2 0320 	rsb	r3, r2, #32
   1879e:	fa00 fc03 	lsl.w	ip, r0, r3
   187a2:	fa20 f002 	lsr.w	r0, r0, r2
   187a6:	fa01 fe03 	lsl.w	lr, r1, r3
   187aa:	ea40 000e 	orr.w	r0, r0, lr
   187ae:	fa21 f102 	lsr.w	r1, r1, r2
   187b2:	4414      	add	r4, r2
   187b4:	e6bd      	b.n	18532 <__adddf3+0xe6>
   187b6:	bf00      	nop

000187b8 <__aeabi_uldivmod>:
   187b8:	b953      	cbnz	r3, 187d0 <__aeabi_uldivmod+0x18>
   187ba:	b94a      	cbnz	r2, 187d0 <__aeabi_uldivmod+0x18>
   187bc:	2900      	cmp	r1, #0
   187be:	bf08      	it	eq
   187c0:	2800      	cmpeq	r0, #0
   187c2:	bf1c      	itt	ne
   187c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   187c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   187cc:	f000 b96c 	b.w	18aa8 <__aeabi_idiv0>
   187d0:	f1ad 0c08 	sub.w	ip, sp, #8
   187d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   187d8:	f000 f806 	bl	187e8 <__udivmoddi4>
   187dc:	f8dd e004 	ldr.w	lr, [sp, #4]
   187e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   187e4:	b004      	add	sp, #16
   187e6:	4770      	bx	lr

000187e8 <__udivmoddi4>:
   187e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   187ec:	9d08      	ldr	r5, [sp, #32]
   187ee:	4604      	mov	r4, r0
   187f0:	4688      	mov	r8, r1
   187f2:	2b00      	cmp	r3, #0
   187f4:	d17d      	bne.n	188f2 <__udivmoddi4+0x10a>
   187f6:	428a      	cmp	r2, r1
   187f8:	4617      	mov	r7, r2
   187fa:	d93f      	bls.n	1887c <__udivmoddi4+0x94>
   187fc:	fab2 f282 	clz	r2, r2
   18800:	b142      	cbz	r2, 18814 <__udivmoddi4+0x2c>
   18802:	f1c2 0020 	rsb	r0, r2, #32
   18806:	4091      	lsls	r1, r2
   18808:	4097      	lsls	r7, r2
   1880a:	fa24 f000 	lsr.w	r0, r4, r0
   1880e:	4094      	lsls	r4, r2
   18810:	ea40 0801 	orr.w	r8, r0, r1
   18814:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   18818:	0c23      	lsrs	r3, r4, #16
   1881a:	fa1f fe87 	uxth.w	lr, r7
   1881e:	fbb8 f6fc 	udiv	r6, r8, ip
   18822:	fb0c 8116 	mls	r1, ip, r6, r8
   18826:	fb06 f00e 	mul.w	r0, r6, lr
   1882a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1882e:	4298      	cmp	r0, r3
   18830:	d905      	bls.n	1883e <__udivmoddi4+0x56>
   18832:	18fb      	adds	r3, r7, r3
   18834:	d202      	bcs.n	1883c <__udivmoddi4+0x54>
   18836:	4298      	cmp	r0, r3
   18838:	f200 8124 	bhi.w	18a84 <__udivmoddi4+0x29c>
   1883c:	3e01      	subs	r6, #1
   1883e:	1a19      	subs	r1, r3, r0
   18840:	b2a3      	uxth	r3, r4
   18842:	fbb1 f0fc 	udiv	r0, r1, ip
   18846:	fb0c 1110 	mls	r1, ip, r0, r1
   1884a:	fb00 fe0e 	mul.w	lr, r0, lr
   1884e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   18852:	45a6      	cmp	lr, r4
   18854:	d905      	bls.n	18862 <__udivmoddi4+0x7a>
   18856:	193c      	adds	r4, r7, r4
   18858:	d202      	bcs.n	18860 <__udivmoddi4+0x78>
   1885a:	45a6      	cmp	lr, r4
   1885c:	f200 810f 	bhi.w	18a7e <__udivmoddi4+0x296>
   18860:	3801      	subs	r0, #1
   18862:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   18866:	eba4 040e 	sub.w	r4, r4, lr
   1886a:	2600      	movs	r6, #0
   1886c:	b11d      	cbz	r5, 18876 <__udivmoddi4+0x8e>
   1886e:	40d4      	lsrs	r4, r2
   18870:	2300      	movs	r3, #0
   18872:	e9c5 4300 	strd	r4, r3, [r5]
   18876:	4631      	mov	r1, r6
   18878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1887c:	b902      	cbnz	r2, 18880 <__udivmoddi4+0x98>
   1887e:	deff      	udf	#255	; 0xff
   18880:	fab2 f282 	clz	r2, r2
   18884:	2a00      	cmp	r2, #0
   18886:	d150      	bne.n	1892a <__udivmoddi4+0x142>
   18888:	1bcb      	subs	r3, r1, r7
   1888a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1888e:	fa1f f887 	uxth.w	r8, r7
   18892:	2601      	movs	r6, #1
   18894:	0c21      	lsrs	r1, r4, #16
   18896:	fbb3 fcfe 	udiv	ip, r3, lr
   1889a:	fb0e 301c 	mls	r0, lr, ip, r3
   1889e:	460b      	mov	r3, r1
   188a0:	fb08 f90c 	mul.w	r9, r8, ip
   188a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   188a8:	4589      	cmp	r9, r1
   188aa:	d90a      	bls.n	188c2 <__udivmoddi4+0xda>
   188ac:	1879      	adds	r1, r7, r1
   188ae:	bf2c      	ite	cs
   188b0:	2301      	movcs	r3, #1
   188b2:	2300      	movcc	r3, #0
   188b4:	4589      	cmp	r9, r1
   188b6:	d902      	bls.n	188be <__udivmoddi4+0xd6>
   188b8:	2b00      	cmp	r3, #0
   188ba:	f000 80d9 	beq.w	18a70 <__udivmoddi4+0x288>
   188be:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   188c2:	eba1 0109 	sub.w	r1, r1, r9
   188c6:	b2a3      	uxth	r3, r4
   188c8:	fbb1 f0fe 	udiv	r0, r1, lr
   188cc:	fb0e 1110 	mls	r1, lr, r0, r1
   188d0:	fb08 f800 	mul.w	r8, r8, r0
   188d4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   188d8:	45a0      	cmp	r8, r4
   188da:	d905      	bls.n	188e8 <__udivmoddi4+0x100>
   188dc:	193c      	adds	r4, r7, r4
   188de:	d202      	bcs.n	188e6 <__udivmoddi4+0xfe>
   188e0:	45a0      	cmp	r8, r4
   188e2:	f200 80c9 	bhi.w	18a78 <__udivmoddi4+0x290>
   188e6:	3801      	subs	r0, #1
   188e8:	eba4 0408 	sub.w	r4, r4, r8
   188ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   188f0:	e7bc      	b.n	1886c <__udivmoddi4+0x84>
   188f2:	428b      	cmp	r3, r1
   188f4:	d909      	bls.n	1890a <__udivmoddi4+0x122>
   188f6:	2d00      	cmp	r5, #0
   188f8:	f000 80b1 	beq.w	18a5e <__udivmoddi4+0x276>
   188fc:	2600      	movs	r6, #0
   188fe:	e9c5 0100 	strd	r0, r1, [r5]
   18902:	4630      	mov	r0, r6
   18904:	4631      	mov	r1, r6
   18906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1890a:	fab3 f683 	clz	r6, r3
   1890e:	2e00      	cmp	r6, #0
   18910:	d146      	bne.n	189a0 <__udivmoddi4+0x1b8>
   18912:	428b      	cmp	r3, r1
   18914:	f0c0 80a6 	bcc.w	18a64 <__udivmoddi4+0x27c>
   18918:	4282      	cmp	r2, r0
   1891a:	f240 80a3 	bls.w	18a64 <__udivmoddi4+0x27c>
   1891e:	4630      	mov	r0, r6
   18920:	2d00      	cmp	r5, #0
   18922:	d0a8      	beq.n	18876 <__udivmoddi4+0x8e>
   18924:	e9c5 4800 	strd	r4, r8, [r5]
   18928:	e7a5      	b.n	18876 <__udivmoddi4+0x8e>
   1892a:	4097      	lsls	r7, r2
   1892c:	f1c2 0320 	rsb	r3, r2, #32
   18930:	fa01 f002 	lsl.w	r0, r1, r2
   18934:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   18938:	40d9      	lsrs	r1, r3
   1893a:	fa24 f303 	lsr.w	r3, r4, r3
   1893e:	fa1f f887 	uxth.w	r8, r7
   18942:	4094      	lsls	r4, r2
   18944:	4303      	orrs	r3, r0
   18946:	fbb1 f0fe 	udiv	r0, r1, lr
   1894a:	0c1e      	lsrs	r6, r3, #16
   1894c:	fb0e 1110 	mls	r1, lr, r0, r1
   18950:	fb00 fc08 	mul.w	ip, r0, r8
   18954:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   18958:	458c      	cmp	ip, r1
   1895a:	d909      	bls.n	18970 <__udivmoddi4+0x188>
   1895c:	1879      	adds	r1, r7, r1
   1895e:	bf2c      	ite	cs
   18960:	2601      	movcs	r6, #1
   18962:	2600      	movcc	r6, #0
   18964:	458c      	cmp	ip, r1
   18966:	d902      	bls.n	1896e <__udivmoddi4+0x186>
   18968:	2e00      	cmp	r6, #0
   1896a:	f000 8093 	beq.w	18a94 <__udivmoddi4+0x2ac>
   1896e:	3801      	subs	r0, #1
   18970:	eba1 010c 	sub.w	r1, r1, ip
   18974:	b29b      	uxth	r3, r3
   18976:	fbb1 f6fe 	udiv	r6, r1, lr
   1897a:	fb0e 1116 	mls	r1, lr, r6, r1
   1897e:	fb06 fc08 	mul.w	ip, r6, r8
   18982:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   18986:	458c      	cmp	ip, r1
   18988:	d905      	bls.n	18996 <__udivmoddi4+0x1ae>
   1898a:	1879      	adds	r1, r7, r1
   1898c:	d202      	bcs.n	18994 <__udivmoddi4+0x1ac>
   1898e:	458c      	cmp	ip, r1
   18990:	f200 8087 	bhi.w	18aa2 <__udivmoddi4+0x2ba>
   18994:	3e01      	subs	r6, #1
   18996:	eba1 030c 	sub.w	r3, r1, ip
   1899a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   1899e:	e779      	b.n	18894 <__udivmoddi4+0xac>
   189a0:	f1c6 0720 	rsb	r7, r6, #32
   189a4:	fa03 f406 	lsl.w	r4, r3, r6
   189a8:	fa02 fc06 	lsl.w	ip, r2, r6
   189ac:	fa01 fe06 	lsl.w	lr, r1, r6
   189b0:	40fa      	lsrs	r2, r7
   189b2:	fa20 f807 	lsr.w	r8, r0, r7
   189b6:	40f9      	lsrs	r1, r7
   189b8:	fa00 f306 	lsl.w	r3, r0, r6
   189bc:	4322      	orrs	r2, r4
   189be:	ea48 040e 	orr.w	r4, r8, lr
   189c2:	ea4f 4812 	mov.w	r8, r2, lsr #16
   189c6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   189ca:	fa1f f982 	uxth.w	r9, r2
   189ce:	fbb1 faf8 	udiv	sl, r1, r8
   189d2:	fb08 111a 	mls	r1, r8, sl, r1
   189d6:	fb0a f009 	mul.w	r0, sl, r9
   189da:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   189de:	4570      	cmp	r0, lr
   189e0:	d90a      	bls.n	189f8 <__udivmoddi4+0x210>
   189e2:	eb12 0e0e 	adds.w	lr, r2, lr
   189e6:	bf2c      	ite	cs
   189e8:	2101      	movcs	r1, #1
   189ea:	2100      	movcc	r1, #0
   189ec:	4570      	cmp	r0, lr
   189ee:	d901      	bls.n	189f4 <__udivmoddi4+0x20c>
   189f0:	2900      	cmp	r1, #0
   189f2:	d052      	beq.n	18a9a <__udivmoddi4+0x2b2>
   189f4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   189f8:	ebae 0e00 	sub.w	lr, lr, r0
   189fc:	b2a4      	uxth	r4, r4
   189fe:	fbbe f0f8 	udiv	r0, lr, r8
   18a02:	fb08 ee10 	mls	lr, r8, r0, lr
   18a06:	fb00 f909 	mul.w	r9, r0, r9
   18a0a:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   18a0e:	45f1      	cmp	r9, lr
   18a10:	d905      	bls.n	18a1e <__udivmoddi4+0x236>
   18a12:	eb12 0e0e 	adds.w	lr, r2, lr
   18a16:	d201      	bcs.n	18a1c <__udivmoddi4+0x234>
   18a18:	45f1      	cmp	r9, lr
   18a1a:	d838      	bhi.n	18a8e <__udivmoddi4+0x2a6>
   18a1c:	3801      	subs	r0, #1
   18a1e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   18a22:	ebae 0e09 	sub.w	lr, lr, r9
   18a26:	fba0 890c 	umull	r8, r9, r0, ip
   18a2a:	45ce      	cmp	lr, r9
   18a2c:	4641      	mov	r1, r8
   18a2e:	464c      	mov	r4, r9
   18a30:	d302      	bcc.n	18a38 <__udivmoddi4+0x250>
   18a32:	d106      	bne.n	18a42 <__udivmoddi4+0x25a>
   18a34:	4543      	cmp	r3, r8
   18a36:	d204      	bcs.n	18a42 <__udivmoddi4+0x25a>
   18a38:	3801      	subs	r0, #1
   18a3a:	ebb8 010c 	subs.w	r1, r8, ip
   18a3e:	eb69 0402 	sbc.w	r4, r9, r2
   18a42:	b315      	cbz	r5, 18a8a <__udivmoddi4+0x2a2>
   18a44:	1a5a      	subs	r2, r3, r1
   18a46:	eb6e 0e04 	sbc.w	lr, lr, r4
   18a4a:	40f2      	lsrs	r2, r6
   18a4c:	fa0e f707 	lsl.w	r7, lr, r7
   18a50:	fa2e f306 	lsr.w	r3, lr, r6
   18a54:	2600      	movs	r6, #0
   18a56:	4317      	orrs	r7, r2
   18a58:	e9c5 7300 	strd	r7, r3, [r5]
   18a5c:	e70b      	b.n	18876 <__udivmoddi4+0x8e>
   18a5e:	462e      	mov	r6, r5
   18a60:	4628      	mov	r0, r5
   18a62:	e708      	b.n	18876 <__udivmoddi4+0x8e>
   18a64:	1a84      	subs	r4, r0, r2
   18a66:	eb61 0103 	sbc.w	r1, r1, r3
   18a6a:	2001      	movs	r0, #1
   18a6c:	4688      	mov	r8, r1
   18a6e:	e757      	b.n	18920 <__udivmoddi4+0x138>
   18a70:	f1ac 0c02 	sub.w	ip, ip, #2
   18a74:	4439      	add	r1, r7
   18a76:	e724      	b.n	188c2 <__udivmoddi4+0xda>
   18a78:	3802      	subs	r0, #2
   18a7a:	443c      	add	r4, r7
   18a7c:	e734      	b.n	188e8 <__udivmoddi4+0x100>
   18a7e:	3802      	subs	r0, #2
   18a80:	443c      	add	r4, r7
   18a82:	e6ee      	b.n	18862 <__udivmoddi4+0x7a>
   18a84:	3e02      	subs	r6, #2
   18a86:	443b      	add	r3, r7
   18a88:	e6d9      	b.n	1883e <__udivmoddi4+0x56>
   18a8a:	462e      	mov	r6, r5
   18a8c:	e6f3      	b.n	18876 <__udivmoddi4+0x8e>
   18a8e:	3802      	subs	r0, #2
   18a90:	4496      	add	lr, r2
   18a92:	e7c4      	b.n	18a1e <__udivmoddi4+0x236>
   18a94:	3802      	subs	r0, #2
   18a96:	4439      	add	r1, r7
   18a98:	e76a      	b.n	18970 <__udivmoddi4+0x188>
   18a9a:	f1aa 0a02 	sub.w	sl, sl, #2
   18a9e:	4496      	add	lr, r2
   18aa0:	e7aa      	b.n	189f8 <__udivmoddi4+0x210>
   18aa2:	3e02      	subs	r6, #2
   18aa4:	4439      	add	r1, r7
   18aa6:	e776      	b.n	18996 <__udivmoddi4+0x1ae>

00018aa8 <__aeabi_idiv0>:
   18aa8:	4770      	bx	lr
   18aaa:	bf00      	nop

00018aac <__aeabi_dmul>:
   18aac:	b570      	push	{r4, r5, r6, lr}
   18aae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18ab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18ab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18aba:	bf1d      	ittte	ne
   18abc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18ac0:	ea94 0f0c 	teqne	r4, ip
   18ac4:	ea95 0f0c 	teqne	r5, ip
   18ac8:	f000 f8de 	bleq	18c88 <__aeabi_dmul+0x1dc>
   18acc:	442c      	add	r4, r5
   18ace:	ea81 0603 	eor.w	r6, r1, r3
   18ad2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   18ad6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   18ada:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   18ade:	bf18      	it	ne
   18ae0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   18ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18aec:	d038      	beq.n	18b60 <__aeabi_dmul+0xb4>
   18aee:	fba0 ce02 	umull	ip, lr, r0, r2
   18af2:	f04f 0500 	mov.w	r5, #0
   18af6:	fbe1 e502 	umlal	lr, r5, r1, r2
   18afa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   18afe:	fbe0 e503 	umlal	lr, r5, r0, r3
   18b02:	f04f 0600 	mov.w	r6, #0
   18b06:	fbe1 5603 	umlal	r5, r6, r1, r3
   18b0a:	f09c 0f00 	teq	ip, #0
   18b0e:	bf18      	it	ne
   18b10:	f04e 0e01 	orrne.w	lr, lr, #1
   18b14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18b18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18b1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   18b20:	d204      	bcs.n	18b2c <__aeabi_dmul+0x80>
   18b22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   18b26:	416d      	adcs	r5, r5
   18b28:	eb46 0606 	adc.w	r6, r6, r6
   18b2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   18b30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   18b34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   18b38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   18b3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   18b40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18b44:	bf88      	it	hi
   18b46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18b4a:	d81e      	bhi.n	18b8a <__aeabi_dmul+0xde>
   18b4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   18b50:	bf08      	it	eq
   18b52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   18b56:	f150 0000 	adcs.w	r0, r0, #0
   18b5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18b5e:	bd70      	pop	{r4, r5, r6, pc}
   18b60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   18b64:	ea46 0101 	orr.w	r1, r6, r1
   18b68:	ea40 0002 	orr.w	r0, r0, r2
   18b6c:	ea81 0103 	eor.w	r1, r1, r3
   18b70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   18b74:	bfc2      	ittt	gt
   18b76:	ebd4 050c 	rsbsgt	r5, r4, ip
   18b7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18b7e:	bd70      	popgt	{r4, r5, r6, pc}
   18b80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18b84:	f04f 0e00 	mov.w	lr, #0
   18b88:	3c01      	subs	r4, #1
   18b8a:	f300 80ab 	bgt.w	18ce4 <__aeabi_dmul+0x238>
   18b8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   18b92:	bfde      	ittt	le
   18b94:	2000      	movle	r0, #0
   18b96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18b9a:	bd70      	pople	{r4, r5, r6, pc}
   18b9c:	f1c4 0400 	rsb	r4, r4, #0
   18ba0:	3c20      	subs	r4, #32
   18ba2:	da35      	bge.n	18c10 <__aeabi_dmul+0x164>
   18ba4:	340c      	adds	r4, #12
   18ba6:	dc1b      	bgt.n	18be0 <__aeabi_dmul+0x134>
   18ba8:	f104 0414 	add.w	r4, r4, #20
   18bac:	f1c4 0520 	rsb	r5, r4, #32
   18bb0:	fa00 f305 	lsl.w	r3, r0, r5
   18bb4:	fa20 f004 	lsr.w	r0, r0, r4
   18bb8:	fa01 f205 	lsl.w	r2, r1, r5
   18bbc:	ea40 0002 	orr.w	r0, r0, r2
   18bc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   18bc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18bc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18bcc:	fa21 f604 	lsr.w	r6, r1, r4
   18bd0:	eb42 0106 	adc.w	r1, r2, r6
   18bd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18bd8:	bf08      	it	eq
   18bda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18bde:	bd70      	pop	{r4, r5, r6, pc}
   18be0:	f1c4 040c 	rsb	r4, r4, #12
   18be4:	f1c4 0520 	rsb	r5, r4, #32
   18be8:	fa00 f304 	lsl.w	r3, r0, r4
   18bec:	fa20 f005 	lsr.w	r0, r0, r5
   18bf0:	fa01 f204 	lsl.w	r2, r1, r4
   18bf4:	ea40 0002 	orr.w	r0, r0, r2
   18bf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18bfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18c00:	f141 0100 	adc.w	r1, r1, #0
   18c04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18c08:	bf08      	it	eq
   18c0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18c0e:	bd70      	pop	{r4, r5, r6, pc}
   18c10:	f1c4 0520 	rsb	r5, r4, #32
   18c14:	fa00 f205 	lsl.w	r2, r0, r5
   18c18:	ea4e 0e02 	orr.w	lr, lr, r2
   18c1c:	fa20 f304 	lsr.w	r3, r0, r4
   18c20:	fa01 f205 	lsl.w	r2, r1, r5
   18c24:	ea43 0302 	orr.w	r3, r3, r2
   18c28:	fa21 f004 	lsr.w	r0, r1, r4
   18c2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18c30:	fa21 f204 	lsr.w	r2, r1, r4
   18c34:	ea20 0002 	bic.w	r0, r0, r2
   18c38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   18c3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18c40:	bf08      	it	eq
   18c42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18c46:	bd70      	pop	{r4, r5, r6, pc}
   18c48:	f094 0f00 	teq	r4, #0
   18c4c:	d10f      	bne.n	18c6e <__aeabi_dmul+0x1c2>
   18c4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   18c52:	0040      	lsls	r0, r0, #1
   18c54:	eb41 0101 	adc.w	r1, r1, r1
   18c58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18c5c:	bf08      	it	eq
   18c5e:	3c01      	subeq	r4, #1
   18c60:	d0f7      	beq.n	18c52 <__aeabi_dmul+0x1a6>
   18c62:	ea41 0106 	orr.w	r1, r1, r6
   18c66:	f095 0f00 	teq	r5, #0
   18c6a:	bf18      	it	ne
   18c6c:	4770      	bxne	lr
   18c6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   18c72:	0052      	lsls	r2, r2, #1
   18c74:	eb43 0303 	adc.w	r3, r3, r3
   18c78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   18c7c:	bf08      	it	eq
   18c7e:	3d01      	subeq	r5, #1
   18c80:	d0f7      	beq.n	18c72 <__aeabi_dmul+0x1c6>
   18c82:	ea43 0306 	orr.w	r3, r3, r6
   18c86:	4770      	bx	lr
   18c88:	ea94 0f0c 	teq	r4, ip
   18c8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18c90:	bf18      	it	ne
   18c92:	ea95 0f0c 	teqne	r5, ip
   18c96:	d00c      	beq.n	18cb2 <__aeabi_dmul+0x206>
   18c98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18c9c:	bf18      	it	ne
   18c9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18ca2:	d1d1      	bne.n	18c48 <__aeabi_dmul+0x19c>
   18ca4:	ea81 0103 	eor.w	r1, r1, r3
   18ca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18cac:	f04f 0000 	mov.w	r0, #0
   18cb0:	bd70      	pop	{r4, r5, r6, pc}
   18cb2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18cb6:	bf06      	itte	eq
   18cb8:	4610      	moveq	r0, r2
   18cba:	4619      	moveq	r1, r3
   18cbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18cc0:	d019      	beq.n	18cf6 <__aeabi_dmul+0x24a>
   18cc2:	ea94 0f0c 	teq	r4, ip
   18cc6:	d102      	bne.n	18cce <__aeabi_dmul+0x222>
   18cc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18ccc:	d113      	bne.n	18cf6 <__aeabi_dmul+0x24a>
   18cce:	ea95 0f0c 	teq	r5, ip
   18cd2:	d105      	bne.n	18ce0 <__aeabi_dmul+0x234>
   18cd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18cd8:	bf1c      	itt	ne
   18cda:	4610      	movne	r0, r2
   18cdc:	4619      	movne	r1, r3
   18cde:	d10a      	bne.n	18cf6 <__aeabi_dmul+0x24a>
   18ce0:	ea81 0103 	eor.w	r1, r1, r3
   18ce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18ce8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18cec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18cf0:	f04f 0000 	mov.w	r0, #0
   18cf4:	bd70      	pop	{r4, r5, r6, pc}
   18cf6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18cfa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   18cfe:	bd70      	pop	{r4, r5, r6, pc}

00018d00 <__aeabi_ddiv>:
   18d00:	b570      	push	{r4, r5, r6, lr}
   18d02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18d06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18d0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18d0e:	bf1d      	ittte	ne
   18d10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18d14:	ea94 0f0c 	teqne	r4, ip
   18d18:	ea95 0f0c 	teqne	r5, ip
   18d1c:	f000 f8a7 	bleq	18e6e <__aeabi_ddiv+0x16e>
   18d20:	eba4 0405 	sub.w	r4, r4, r5
   18d24:	ea81 0e03 	eor.w	lr, r1, r3
   18d28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18d2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18d30:	f000 8088 	beq.w	18e44 <__aeabi_ddiv+0x144>
   18d34:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18d38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   18d3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18d40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   18d44:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18d48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   18d4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18d50:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18d54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   18d58:	429d      	cmp	r5, r3
   18d5a:	bf08      	it	eq
   18d5c:	4296      	cmpeq	r6, r2
   18d5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   18d62:	f504 7440 	add.w	r4, r4, #768	; 0x300
   18d66:	d202      	bcs.n	18d6e <__aeabi_ddiv+0x6e>
   18d68:	085b      	lsrs	r3, r3, #1
   18d6a:	ea4f 0232 	mov.w	r2, r2, rrx
   18d6e:	1ab6      	subs	r6, r6, r2
   18d70:	eb65 0503 	sbc.w	r5, r5, r3
   18d74:	085b      	lsrs	r3, r3, #1
   18d76:	ea4f 0232 	mov.w	r2, r2, rrx
   18d7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18d7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   18d82:	ebb6 0e02 	subs.w	lr, r6, r2
   18d86:	eb75 0e03 	sbcs.w	lr, r5, r3
   18d8a:	bf22      	ittt	cs
   18d8c:	1ab6      	subcs	r6, r6, r2
   18d8e:	4675      	movcs	r5, lr
   18d90:	ea40 000c 	orrcs.w	r0, r0, ip
   18d94:	085b      	lsrs	r3, r3, #1
   18d96:	ea4f 0232 	mov.w	r2, r2, rrx
   18d9a:	ebb6 0e02 	subs.w	lr, r6, r2
   18d9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   18da2:	bf22      	ittt	cs
   18da4:	1ab6      	subcs	r6, r6, r2
   18da6:	4675      	movcs	r5, lr
   18da8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18dac:	085b      	lsrs	r3, r3, #1
   18dae:	ea4f 0232 	mov.w	r2, r2, rrx
   18db2:	ebb6 0e02 	subs.w	lr, r6, r2
   18db6:	eb75 0e03 	sbcs.w	lr, r5, r3
   18dba:	bf22      	ittt	cs
   18dbc:	1ab6      	subcs	r6, r6, r2
   18dbe:	4675      	movcs	r5, lr
   18dc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18dc4:	085b      	lsrs	r3, r3, #1
   18dc6:	ea4f 0232 	mov.w	r2, r2, rrx
   18dca:	ebb6 0e02 	subs.w	lr, r6, r2
   18dce:	eb75 0e03 	sbcs.w	lr, r5, r3
   18dd2:	bf22      	ittt	cs
   18dd4:	1ab6      	subcs	r6, r6, r2
   18dd6:	4675      	movcs	r5, lr
   18dd8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18ddc:	ea55 0e06 	orrs.w	lr, r5, r6
   18de0:	d018      	beq.n	18e14 <__aeabi_ddiv+0x114>
   18de2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18de6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18dea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18dee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   18df2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18df6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18dfa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18dfe:	d1c0      	bne.n	18d82 <__aeabi_ddiv+0x82>
   18e00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18e04:	d10b      	bne.n	18e1e <__aeabi_ddiv+0x11e>
   18e06:	ea41 0100 	orr.w	r1, r1, r0
   18e0a:	f04f 0000 	mov.w	r0, #0
   18e0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   18e12:	e7b6      	b.n	18d82 <__aeabi_ddiv+0x82>
   18e14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18e18:	bf04      	itt	eq
   18e1a:	4301      	orreq	r1, r0
   18e1c:	2000      	moveq	r0, #0
   18e1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18e22:	bf88      	it	hi
   18e24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18e28:	f63f aeaf 	bhi.w	18b8a <__aeabi_dmul+0xde>
   18e2c:	ebb5 0c03 	subs.w	ip, r5, r3
   18e30:	bf04      	itt	eq
   18e32:	ebb6 0c02 	subseq.w	ip, r6, r2
   18e36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18e3a:	f150 0000 	adcs.w	r0, r0, #0
   18e3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18e42:	bd70      	pop	{r4, r5, r6, pc}
   18e44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18e48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18e4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18e50:	bfc2      	ittt	gt
   18e52:	ebd4 050c 	rsbsgt	r5, r4, ip
   18e56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18e5a:	bd70      	popgt	{r4, r5, r6, pc}
   18e5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18e60:	f04f 0e00 	mov.w	lr, #0
   18e64:	3c01      	subs	r4, #1
   18e66:	e690      	b.n	18b8a <__aeabi_dmul+0xde>
   18e68:	ea45 0e06 	orr.w	lr, r5, r6
   18e6c:	e68d      	b.n	18b8a <__aeabi_dmul+0xde>
   18e6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18e72:	ea94 0f0c 	teq	r4, ip
   18e76:	bf08      	it	eq
   18e78:	ea95 0f0c 	teqeq	r5, ip
   18e7c:	f43f af3b 	beq.w	18cf6 <__aeabi_dmul+0x24a>
   18e80:	ea94 0f0c 	teq	r4, ip
   18e84:	d10a      	bne.n	18e9c <__aeabi_ddiv+0x19c>
   18e86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18e8a:	f47f af34 	bne.w	18cf6 <__aeabi_dmul+0x24a>
   18e8e:	ea95 0f0c 	teq	r5, ip
   18e92:	f47f af25 	bne.w	18ce0 <__aeabi_dmul+0x234>
   18e96:	4610      	mov	r0, r2
   18e98:	4619      	mov	r1, r3
   18e9a:	e72c      	b.n	18cf6 <__aeabi_dmul+0x24a>
   18e9c:	ea95 0f0c 	teq	r5, ip
   18ea0:	d106      	bne.n	18eb0 <__aeabi_ddiv+0x1b0>
   18ea2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18ea6:	f43f aefd 	beq.w	18ca4 <__aeabi_dmul+0x1f8>
   18eaa:	4610      	mov	r0, r2
   18eac:	4619      	mov	r1, r3
   18eae:	e722      	b.n	18cf6 <__aeabi_dmul+0x24a>
   18eb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18eb4:	bf18      	it	ne
   18eb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18eba:	f47f aec5 	bne.w	18c48 <__aeabi_dmul+0x19c>
   18ebe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18ec2:	f47f af0d 	bne.w	18ce0 <__aeabi_dmul+0x234>
   18ec6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18eca:	f47f aeeb 	bne.w	18ca4 <__aeabi_dmul+0x1f8>
   18ece:	e712      	b.n	18cf6 <__aeabi_dmul+0x24a>

00018ed0 <__gedf2>:
   18ed0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   18ed4:	e006      	b.n	18ee4 <__cmpdf2+0x4>
   18ed6:	bf00      	nop

00018ed8 <__ledf2>:
   18ed8:	f04f 0c01 	mov.w	ip, #1
   18edc:	e002      	b.n	18ee4 <__cmpdf2+0x4>
   18ede:	bf00      	nop

00018ee0 <__cmpdf2>:
   18ee0:	f04f 0c01 	mov.w	ip, #1
   18ee4:	f84d cd04 	str.w	ip, [sp, #-4]!
   18ee8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18eec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18ef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18ef4:	bf18      	it	ne
   18ef6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18efa:	d01b      	beq.n	18f34 <__cmpdf2+0x54>
   18efc:	b001      	add	sp, #4
   18efe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18f02:	bf0c      	ite	eq
   18f04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18f08:	ea91 0f03 	teqne	r1, r3
   18f0c:	bf02      	ittt	eq
   18f0e:	ea90 0f02 	teqeq	r0, r2
   18f12:	2000      	moveq	r0, #0
   18f14:	4770      	bxeq	lr
   18f16:	f110 0f00 	cmn.w	r0, #0
   18f1a:	ea91 0f03 	teq	r1, r3
   18f1e:	bf58      	it	pl
   18f20:	4299      	cmppl	r1, r3
   18f22:	bf08      	it	eq
   18f24:	4290      	cmpeq	r0, r2
   18f26:	bf2c      	ite	cs
   18f28:	17d8      	asrcs	r0, r3, #31
   18f2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18f2e:	f040 0001 	orr.w	r0, r0, #1
   18f32:	4770      	bx	lr
   18f34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18f38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18f3c:	d102      	bne.n	18f44 <__cmpdf2+0x64>
   18f3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18f42:	d107      	bne.n	18f54 <__cmpdf2+0x74>
   18f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18f4c:	d1d6      	bne.n	18efc <__cmpdf2+0x1c>
   18f4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18f52:	d0d3      	beq.n	18efc <__cmpdf2+0x1c>
   18f54:	f85d 0b04 	ldr.w	r0, [sp], #4
   18f58:	4770      	bx	lr
   18f5a:	bf00      	nop

00018f5c <__aeabi_cdrcmple>:
   18f5c:	4684      	mov	ip, r0
   18f5e:	4610      	mov	r0, r2
   18f60:	4662      	mov	r2, ip
   18f62:	468c      	mov	ip, r1
   18f64:	4619      	mov	r1, r3
   18f66:	4663      	mov	r3, ip
   18f68:	e000      	b.n	18f6c <__aeabi_cdcmpeq>
   18f6a:	bf00      	nop

00018f6c <__aeabi_cdcmpeq>:
   18f6c:	b501      	push	{r0, lr}
   18f6e:	f7ff ffb7 	bl	18ee0 <__cmpdf2>
   18f72:	2800      	cmp	r0, #0
   18f74:	bf48      	it	mi
   18f76:	f110 0f00 	cmnmi.w	r0, #0
   18f7a:	bd01      	pop	{r0, pc}

00018f7c <__aeabi_dcmpeq>:
   18f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18f80:	f7ff fff4 	bl	18f6c <__aeabi_cdcmpeq>
   18f84:	bf0c      	ite	eq
   18f86:	2001      	moveq	r0, #1
   18f88:	2000      	movne	r0, #0
   18f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   18f8e:	bf00      	nop

00018f90 <__aeabi_dcmplt>:
   18f90:	f84d ed08 	str.w	lr, [sp, #-8]!
   18f94:	f7ff ffea 	bl	18f6c <__aeabi_cdcmpeq>
   18f98:	bf34      	ite	cc
   18f9a:	2001      	movcc	r0, #1
   18f9c:	2000      	movcs	r0, #0
   18f9e:	f85d fb08 	ldr.w	pc, [sp], #8
   18fa2:	bf00      	nop

00018fa4 <__aeabi_dcmple>:
   18fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   18fa8:	f7ff ffe0 	bl	18f6c <__aeabi_cdcmpeq>
   18fac:	bf94      	ite	ls
   18fae:	2001      	movls	r0, #1
   18fb0:	2000      	movhi	r0, #0
   18fb2:	f85d fb08 	ldr.w	pc, [sp], #8
   18fb6:	bf00      	nop

00018fb8 <__aeabi_dcmpge>:
   18fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   18fbc:	f7ff ffce 	bl	18f5c <__aeabi_cdrcmple>
   18fc0:	bf94      	ite	ls
   18fc2:	2001      	movls	r0, #1
   18fc4:	2000      	movhi	r0, #0
   18fc6:	f85d fb08 	ldr.w	pc, [sp], #8
   18fca:	bf00      	nop

00018fcc <__aeabi_dcmpgt>:
   18fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   18fd0:	f7ff ffc4 	bl	18f5c <__aeabi_cdrcmple>
   18fd4:	bf34      	ite	cc
   18fd6:	2001      	movcc	r0, #1
   18fd8:	2000      	movcs	r0, #0
   18fda:	f85d fb08 	ldr.w	pc, [sp], #8
   18fde:	bf00      	nop

00018fe0 <__aeabi_dcmpun>:
   18fe0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18fe4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18fe8:	d102      	bne.n	18ff0 <__aeabi_dcmpun+0x10>
   18fea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18fee:	d10a      	bne.n	19006 <__aeabi_dcmpun+0x26>
   18ff0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18ff4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18ff8:	d102      	bne.n	19000 <__aeabi_dcmpun+0x20>
   18ffa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18ffe:	d102      	bne.n	19006 <__aeabi_dcmpun+0x26>
   19000:	f04f 0000 	mov.w	r0, #0
   19004:	4770      	bx	lr
   19006:	f04f 0001 	mov.w	r0, #1
   1900a:	4770      	bx	lr

0001900c <__aeabi_d2iz>:
   1900c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   19010:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   19014:	d215      	bcs.n	19042 <__aeabi_d2iz+0x36>
   19016:	d511      	bpl.n	1903c <__aeabi_d2iz+0x30>
   19018:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1901c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   19020:	d912      	bls.n	19048 <__aeabi_d2iz+0x3c>
   19022:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   19026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1902a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1902e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   19032:	fa23 f002 	lsr.w	r0, r3, r2
   19036:	bf18      	it	ne
   19038:	4240      	negne	r0, r0
   1903a:	4770      	bx	lr
   1903c:	f04f 0000 	mov.w	r0, #0
   19040:	4770      	bx	lr
   19042:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   19046:	d105      	bne.n	19054 <__aeabi_d2iz+0x48>
   19048:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1904c:	bf08      	it	eq
   1904e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   19052:	4770      	bx	lr
   19054:	f04f 0000 	mov.w	r0, #0
   19058:	4770      	bx	lr
   1905a:	bf00      	nop

0001905c <strcmp>:
   1905c:	f810 2b01 	ldrb.w	r2, [r0], #1
   19060:	f811 3b01 	ldrb.w	r3, [r1], #1
   19064:	2a01      	cmp	r2, #1
   19066:	bf28      	it	cs
   19068:	429a      	cmpcs	r2, r3
   1906a:	d0f7      	beq.n	1905c <strcmp>
   1906c:	1ad0      	subs	r0, r2, r3
   1906e:	4770      	bx	lr

00019070 <strlen>:
   19070:	4603      	mov	r3, r0
   19072:	f813 2b01 	ldrb.w	r2, [r3], #1
   19076:	2a00      	cmp	r2, #0
   19078:	d1fb      	bne.n	19072 <strlen+0x2>
   1907a:	1a18      	subs	r0, r3, r0
   1907c:	3801      	subs	r0, #1
   1907e:	4770      	bx	lr

00019080 <_dtoa_r>:
   19080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19084:	6a45      	ldr	r5, [r0, #36]	; 0x24
   19086:	4604      	mov	r4, r0
   19088:	ed2d 8b02 	vpush	{d8}
   1908c:	b095      	sub	sp, #84	; 0x54
   1908e:	ec57 6b10 	vmov	r6, r7, d0
   19092:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   19096:	9105      	str	r1, [sp, #20]
   19098:	9209      	str	r2, [sp, #36]	; 0x24
   1909a:	930f      	str	r3, [sp, #60]	; 0x3c
   1909c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   190a0:	b93d      	cbnz	r5, 190b2 <_dtoa_r+0x32>
   190a2:	2010      	movs	r0, #16
   190a4:	f01a fa92 	bl	335cc <malloc>
   190a8:	6260      	str	r0, [r4, #36]	; 0x24
   190aa:	6005      	str	r5, [r0, #0]
   190ac:	60c5      	str	r5, [r0, #12]
   190ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
   190b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   190b4:	6819      	ldr	r1, [r3, #0]
   190b6:	b151      	cbz	r1, 190ce <_dtoa_r+0x4e>
   190b8:	685a      	ldr	r2, [r3, #4]
   190ba:	2301      	movs	r3, #1
   190bc:	4620      	mov	r0, r4
   190be:	4093      	lsls	r3, r2
   190c0:	604a      	str	r2, [r1, #4]
   190c2:	608b      	str	r3, [r1, #8]
   190c4:	f01e fc56 	bl	37974 <_Bfree>
   190c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   190ca:	2200      	movs	r2, #0
   190cc:	601a      	str	r2, [r3, #0]
   190ce:	1e3b      	subs	r3, r7, #0
   190d0:	bfb7      	itett	lt
   190d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   190d6:	2300      	movge	r3, #0
   190d8:	2201      	movlt	r2, #1
   190da:	9303      	strlt	r3, [sp, #12]
   190dc:	bfa8      	it	ge
   190de:	f8c8 3000 	strge.w	r3, [r8]
   190e2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   190e6:	4bb6      	ldr	r3, [pc, #728]	; (193c0 <_dtoa_r+0x340>)
   190e8:	bfb8      	it	lt
   190ea:	f8c8 2000 	strlt.w	r2, [r8]
   190ee:	ea33 0309 	bics.w	r3, r3, r9
   190f2:	d11b      	bne.n	1912c <_dtoa_r+0xac>
   190f4:	f242 730f 	movw	r3, #9999	; 0x270f
   190f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   190fa:	6013      	str	r3, [r2, #0]
   190fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
   19100:	4333      	orrs	r3, r6
   19102:	f000 8572 	beq.w	19bea <_dtoa_r+0xb6a>
   19106:	9b21      	ldr	r3, [sp, #132]	; 0x84
   19108:	b963      	cbnz	r3, 19124 <_dtoa_r+0xa4>
   1910a:	4bae      	ldr	r3, [pc, #696]	; (193c4 <_dtoa_r+0x344>)
   1910c:	e025      	b.n	1915a <_dtoa_r+0xda>
   1910e:	4bae      	ldr	r3, [pc, #696]	; (193c8 <_dtoa_r+0x348>)
   19110:	9300      	str	r3, [sp, #0]
   19112:	3308      	adds	r3, #8
   19114:	9a21      	ldr	r2, [sp, #132]	; 0x84
   19116:	6013      	str	r3, [r2, #0]
   19118:	9800      	ldr	r0, [sp, #0]
   1911a:	b015      	add	sp, #84	; 0x54
   1911c:	ecbd 8b02 	vpop	{d8}
   19120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19124:	4ba7      	ldr	r3, [pc, #668]	; (193c4 <_dtoa_r+0x344>)
   19126:	9300      	str	r3, [sp, #0]
   19128:	3303      	adds	r3, #3
   1912a:	e7f3      	b.n	19114 <_dtoa_r+0x94>
   1912c:	ed9d 7b02 	vldr	d7, [sp, #8]
   19130:	2200      	movs	r2, #0
   19132:	2300      	movs	r3, #0
   19134:	ec51 0b17 	vmov	r0, r1, d7
   19138:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1913c:	f7ff ff1e 	bl	18f7c <__aeabi_dcmpeq>
   19140:	4680      	mov	r8, r0
   19142:	b160      	cbz	r0, 1915e <_dtoa_r+0xde>
   19144:	2301      	movs	r3, #1
   19146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   19148:	6013      	str	r3, [r2, #0]
   1914a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1914c:	2b00      	cmp	r3, #0
   1914e:	f000 8549 	beq.w	19be4 <_dtoa_r+0xb64>
   19152:	4b9e      	ldr	r3, [pc, #632]	; (193cc <_dtoa_r+0x34c>)
   19154:	9a21      	ldr	r2, [sp, #132]	; 0x84
   19156:	6013      	str	r3, [r2, #0]
   19158:	3b01      	subs	r3, #1
   1915a:	9300      	str	r3, [sp, #0]
   1915c:	e7dc      	b.n	19118 <_dtoa_r+0x98>
   1915e:	f3c9 550a 	ubfx	r5, r9, #20, #11
   19162:	aa12      	add	r2, sp, #72	; 0x48
   19164:	a913      	add	r1, sp, #76	; 0x4c
   19166:	4620      	mov	r0, r4
   19168:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1916c:	f01e fe44 	bl	37df8 <__d2b>
   19170:	4682      	mov	sl, r0
   19172:	2d00      	cmp	r5, #0
   19174:	d07c      	beq.n	19270 <_dtoa_r+0x1f0>
   19176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19178:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1917c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   19180:	f3c3 0313 	ubfx	r3, r3, #0, #20
   19184:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   19188:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1918c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   19190:	2200      	movs	r2, #0
   19192:	4b8f      	ldr	r3, [pc, #572]	; (193d0 <_dtoa_r+0x350>)
   19194:	4630      	mov	r0, r6
   19196:	4639      	mov	r1, r7
   19198:	f7ff f956 	bl	18448 <__aeabi_dsub>
   1919c:	a382      	add	r3, pc, #520	; (adr r3, 193a8 <_dtoa_r+0x328>)
   1919e:	e9d3 2300 	ldrd	r2, r3, [r3]
   191a2:	f7ff fc83 	bl	18aac <__aeabi_dmul>
   191a6:	a382      	add	r3, pc, #520	; (adr r3, 193b0 <_dtoa_r+0x330>)
   191a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   191ac:	f7ff f94e 	bl	1844c <__adddf3>
   191b0:	4606      	mov	r6, r0
   191b2:	460f      	mov	r7, r1
   191b4:	4628      	mov	r0, r5
   191b6:	f7ff fa95 	bl	186e4 <__aeabi_i2d>
   191ba:	a37f      	add	r3, pc, #508	; (adr r3, 193b8 <_dtoa_r+0x338>)
   191bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   191c0:	f7ff fc74 	bl	18aac <__aeabi_dmul>
   191c4:	4602      	mov	r2, r0
   191c6:	460b      	mov	r3, r1
   191c8:	4630      	mov	r0, r6
   191ca:	4639      	mov	r1, r7
   191cc:	f7ff f93e 	bl	1844c <__adddf3>
   191d0:	4606      	mov	r6, r0
   191d2:	460f      	mov	r7, r1
   191d4:	f7ff ff1a 	bl	1900c <__aeabi_d2iz>
   191d8:	2200      	movs	r2, #0
   191da:	4681      	mov	r9, r0
   191dc:	2300      	movs	r3, #0
   191de:	4630      	mov	r0, r6
   191e0:	4639      	mov	r1, r7
   191e2:	f7ff fed5 	bl	18f90 <__aeabi_dcmplt>
   191e6:	b148      	cbz	r0, 191fc <_dtoa_r+0x17c>
   191e8:	4648      	mov	r0, r9
   191ea:	f7ff fa7b 	bl	186e4 <__aeabi_i2d>
   191ee:	4632      	mov	r2, r6
   191f0:	463b      	mov	r3, r7
   191f2:	f7ff fec3 	bl	18f7c <__aeabi_dcmpeq>
   191f6:	b908      	cbnz	r0, 191fc <_dtoa_r+0x17c>
   191f8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   191fc:	f1b9 0f16 	cmp.w	r9, #22
   19200:	d855      	bhi.n	192ae <_dtoa_r+0x22e>
   19202:	4b74      	ldr	r3, [pc, #464]	; (193d4 <_dtoa_r+0x354>)
   19204:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   19208:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1920c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19210:	f7ff febe 	bl	18f90 <__aeabi_dcmplt>
   19214:	2800      	cmp	r0, #0
   19216:	d04c      	beq.n	192b2 <_dtoa_r+0x232>
   19218:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1921c:	2300      	movs	r3, #0
   1921e:	930e      	str	r3, [sp, #56]	; 0x38
   19220:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19222:	1b5d      	subs	r5, r3, r5
   19224:	1e6b      	subs	r3, r5, #1
   19226:	9304      	str	r3, [sp, #16]
   19228:	bf45      	ittet	mi
   1922a:	2300      	movmi	r3, #0
   1922c:	f1c5 0801 	rsbmi	r8, r5, #1
   19230:	f04f 0800 	movpl.w	r8, #0
   19234:	9304      	strmi	r3, [sp, #16]
   19236:	f1b9 0f00 	cmp.w	r9, #0
   1923a:	db3c      	blt.n	192b6 <_dtoa_r+0x236>
   1923c:	9b04      	ldr	r3, [sp, #16]
   1923e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   19242:	444b      	add	r3, r9
   19244:	9304      	str	r3, [sp, #16]
   19246:	2300      	movs	r3, #0
   19248:	9306      	str	r3, [sp, #24]
   1924a:	9b05      	ldr	r3, [sp, #20]
   1924c:	2b09      	cmp	r3, #9
   1924e:	f200 8099 	bhi.w	19384 <_dtoa_r+0x304>
   19252:	2b05      	cmp	r3, #5
   19254:	bfc5      	ittet	gt
   19256:	3b04      	subgt	r3, #4
   19258:	2500      	movgt	r5, #0
   1925a:	2501      	movle	r5, #1
   1925c:	9305      	strgt	r3, [sp, #20]
   1925e:	9b05      	ldr	r3, [sp, #20]
   19260:	3b02      	subs	r3, #2
   19262:	2b03      	cmp	r3, #3
   19264:	f200 809a 	bhi.w	1939c <_dtoa_r+0x31c>
   19268:	e8df f003 	tbb	[pc, r3]
   1926c:	8a7c7e2d 	.word	0x8a7c7e2d
   19270:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
   19274:	441d      	add	r5, r3
   19276:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1927a:	2b20      	cmp	r3, #32
   1927c:	bfc6      	itte	gt
   1927e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   19282:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   19286:	f1c3 0320 	rsble	r3, r3, #32
   1928a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1928e:	bfc5      	ittet	gt
   19290:	fa09 f303 	lslgt.w	r3, r9, r3
   19294:	fa26 f000 	lsrgt.w	r0, r6, r0
   19298:	fa06 f003 	lslle.w	r0, r6, r3
   1929c:	4318      	orrgt	r0, r3
   1929e:	f7ff fa11 	bl	186c4 <__aeabi_ui2d>
   192a2:	2301      	movs	r3, #1
   192a4:	4606      	mov	r6, r0
   192a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   192aa:	9310      	str	r3, [sp, #64]	; 0x40
   192ac:	e770      	b.n	19190 <_dtoa_r+0x110>
   192ae:	2301      	movs	r3, #1
   192b0:	e7b5      	b.n	1921e <_dtoa_r+0x19e>
   192b2:	900e      	str	r0, [sp, #56]	; 0x38
   192b4:	e7b4      	b.n	19220 <_dtoa_r+0x1a0>
   192b6:	f1c9 0300 	rsb	r3, r9, #0
   192ba:	eba8 0809 	sub.w	r8, r8, r9
   192be:	9306      	str	r3, [sp, #24]
   192c0:	2300      	movs	r3, #0
   192c2:	930d      	str	r3, [sp, #52]	; 0x34
   192c4:	e7c1      	b.n	1924a <_dtoa_r+0x1ca>
   192c6:	2300      	movs	r3, #0
   192c8:	9308      	str	r3, [sp, #32]
   192ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   192cc:	2b00      	cmp	r3, #0
   192ce:	f300 8085 	bgt.w	193dc <_dtoa_r+0x35c>
   192d2:	f04f 0b01 	mov.w	fp, #1
   192d6:	465b      	mov	r3, fp
   192d8:	f8cd b004 	str.w	fp, [sp, #4]
   192dc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   192e0:	2200      	movs	r2, #0
   192e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   192e4:	6072      	str	r2, [r6, #4]
   192e6:	2204      	movs	r2, #4
   192e8:	f102 0014 	add.w	r0, r2, #20
   192ec:	6871      	ldr	r1, [r6, #4]
   192ee:	4298      	cmp	r0, r3
   192f0:	d97a      	bls.n	193e8 <_dtoa_r+0x368>
   192f2:	4620      	mov	r0, r4
   192f4:	f01e fb0a 	bl	3790c <_Balloc>
   192f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   192fa:	6030      	str	r0, [r6, #0]
   192fc:	681b      	ldr	r3, [r3, #0]
   192fe:	9300      	str	r3, [sp, #0]
   19300:	9b01      	ldr	r3, [sp, #4]
   19302:	2b0e      	cmp	r3, #14
   19304:	f200 80f5 	bhi.w	194f2 <_dtoa_r+0x472>
   19308:	2d00      	cmp	r5, #0
   1930a:	f000 80f2 	beq.w	194f2 <_dtoa_r+0x472>
   1930e:	f1b9 0f00 	cmp.w	r9, #0
   19312:	dd7d      	ble.n	19410 <_dtoa_r+0x390>
   19314:	f009 030f 	and.w	r3, r9, #15
   19318:	4a2e      	ldr	r2, [pc, #184]	; (193d4 <_dtoa_r+0x354>)
   1931a:	f419 7f80 	tst.w	r9, #256	; 0x100
   1931e:	ea4f 1729 	mov.w	r7, r9, asr #4
   19322:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19326:	ed93 7b00 	vldr	d7, [r3]
   1932a:	eeb0 8a47 	vmov.f32	s16, s14
   1932e:	eef0 8a67 	vmov.f32	s17, s15
   19332:	d05d      	beq.n	193f0 <_dtoa_r+0x370>
   19334:	4b28      	ldr	r3, [pc, #160]	; (193d8 <_dtoa_r+0x358>)
   19336:	f007 070f 	and.w	r7, r7, #15
   1933a:	2503      	movs	r5, #3
   1933c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   19340:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   19344:	f7ff fcdc 	bl	18d00 <__aeabi_ddiv>
   19348:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1934c:	4e22      	ldr	r6, [pc, #136]	; (193d8 <_dtoa_r+0x358>)
   1934e:	2f00      	cmp	r7, #0
   19350:	d150      	bne.n	193f4 <_dtoa_r+0x374>
   19352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   19356:	ec53 2b18 	vmov	r2, r3, d8
   1935a:	f7ff fcd1 	bl	18d00 <__aeabi_ddiv>
   1935e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19362:	e06f      	b.n	19444 <_dtoa_r+0x3c4>
   19364:	2301      	movs	r3, #1
   19366:	e7af      	b.n	192c8 <_dtoa_r+0x248>
   19368:	2300      	movs	r3, #0
   1936a:	9308      	str	r3, [sp, #32]
   1936c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1936e:	eb09 0b03 	add.w	fp, r9, r3
   19372:	f10b 0301 	add.w	r3, fp, #1
   19376:	2b01      	cmp	r3, #1
   19378:	9301      	str	r3, [sp, #4]
   1937a:	bfb8      	it	lt
   1937c:	2301      	movlt	r3, #1
   1937e:	e7af      	b.n	192e0 <_dtoa_r+0x260>
   19380:	2301      	movs	r3, #1
   19382:	e7f2      	b.n	1936a <_dtoa_r+0x2ea>
   19384:	2501      	movs	r5, #1
   19386:	2300      	movs	r3, #0
   19388:	9508      	str	r5, [sp, #32]
   1938a:	9305      	str	r3, [sp, #20]
   1938c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   19390:	2200      	movs	r2, #0
   19392:	2312      	movs	r3, #18
   19394:	f8cd b004 	str.w	fp, [sp, #4]
   19398:	9209      	str	r2, [sp, #36]	; 0x24
   1939a:	e7a1      	b.n	192e0 <_dtoa_r+0x260>
   1939c:	2301      	movs	r3, #1
   1939e:	9308      	str	r3, [sp, #32]
   193a0:	e7f4      	b.n	1938c <_dtoa_r+0x30c>
   193a2:	bf00      	nop
   193a4:	f3af 8000 	nop.w
   193a8:	636f4361 	.word	0x636f4361
   193ac:	3fd287a7 	.word	0x3fd287a7
   193b0:	8b60c8b3 	.word	0x8b60c8b3
   193b4:	3fc68a28 	.word	0x3fc68a28
   193b8:	509f79fb 	.word	0x509f79fb
   193bc:	3fd34413 	.word	0x3fd34413
   193c0:	7ff00000 	.word	0x7ff00000
   193c4:	0003cbbb 	.word	0x0003cbbb
   193c8:	0003cbb2 	.word	0x0003cbb2
   193cc:	000397b6 	.word	0x000397b6
   193d0:	3ff80000 	.word	0x3ff80000
   193d4:	000384c0 	.word	0x000384c0
   193d8:	00038498 	.word	0x00038498
   193dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   193e0:	465b      	mov	r3, fp
   193e2:	f8cd b004 	str.w	fp, [sp, #4]
   193e6:	e77b      	b.n	192e0 <_dtoa_r+0x260>
   193e8:	3101      	adds	r1, #1
   193ea:	0052      	lsls	r2, r2, #1
   193ec:	6071      	str	r1, [r6, #4]
   193ee:	e77b      	b.n	192e8 <_dtoa_r+0x268>
   193f0:	2502      	movs	r5, #2
   193f2:	e7ab      	b.n	1934c <_dtoa_r+0x2cc>
   193f4:	07f9      	lsls	r1, r7, #31
   193f6:	d508      	bpl.n	1940a <_dtoa_r+0x38a>
   193f8:	3501      	adds	r5, #1
   193fa:	ec51 0b18 	vmov	r0, r1, d8
   193fe:	e9d6 2300 	ldrd	r2, r3, [r6]
   19402:	f7ff fb53 	bl	18aac <__aeabi_dmul>
   19406:	ec41 0b18 	vmov	d8, r0, r1
   1940a:	107f      	asrs	r7, r7, #1
   1940c:	3608      	adds	r6, #8
   1940e:	e79e      	b.n	1934e <_dtoa_r+0x2ce>
   19410:	f000 80ab 	beq.w	1956a <_dtoa_r+0x4ea>
   19414:	f1c9 0600 	rsb	r6, r9, #0
   19418:	4baa      	ldr	r3, [pc, #680]	; (196c4 <_dtoa_r+0x644>)
   1941a:	4fab      	ldr	r7, [pc, #684]	; (196c8 <_dtoa_r+0x648>)
   1941c:	2502      	movs	r5, #2
   1941e:	f006 020f 	and.w	r2, r6, #15
   19422:	1136      	asrs	r6, r6, #4
   19424:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   19428:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1942c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19430:	f7ff fb3c 	bl	18aac <__aeabi_dmul>
   19434:	2300      	movs	r3, #0
   19436:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1943a:	2e00      	cmp	r6, #0
   1943c:	f040 808a 	bne.w	19554 <_dtoa_r+0x4d4>
   19440:	2b00      	cmp	r3, #0
   19442:	d18c      	bne.n	1935e <_dtoa_r+0x2de>
   19444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19446:	2b00      	cmp	r3, #0
   19448:	f000 8091 	beq.w	1956e <_dtoa_r+0x4ee>
   1944c:	2200      	movs	r2, #0
   1944e:	4b9f      	ldr	r3, [pc, #636]	; (196cc <_dtoa_r+0x64c>)
   19450:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   19454:	4630      	mov	r0, r6
   19456:	4639      	mov	r1, r7
   19458:	f7ff fd9a 	bl	18f90 <__aeabi_dcmplt>
   1945c:	2800      	cmp	r0, #0
   1945e:	f000 8086 	beq.w	1956e <_dtoa_r+0x4ee>
   19462:	9b01      	ldr	r3, [sp, #4]
   19464:	2b00      	cmp	r3, #0
   19466:	f000 8082 	beq.w	1956e <_dtoa_r+0x4ee>
   1946a:	f1bb 0f00 	cmp.w	fp, #0
   1946e:	dd3c      	ble.n	194ea <_dtoa_r+0x46a>
   19470:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   19474:	3501      	adds	r5, #1
   19476:	2200      	movs	r2, #0
   19478:	4630      	mov	r0, r6
   1947a:	9307      	str	r3, [sp, #28]
   1947c:	4639      	mov	r1, r7
   1947e:	4b94      	ldr	r3, [pc, #592]	; (196d0 <_dtoa_r+0x650>)
   19480:	f7ff fb14 	bl	18aac <__aeabi_dmul>
   19484:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   19488:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1948c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   19490:	4628      	mov	r0, r5
   19492:	f7ff f927 	bl	186e4 <__aeabi_i2d>
   19496:	4632      	mov	r2, r6
   19498:	463b      	mov	r3, r7
   1949a:	f7ff fb07 	bl	18aac <__aeabi_dmul>
   1949e:	4b8d      	ldr	r3, [pc, #564]	; (196d4 <_dtoa_r+0x654>)
   194a0:	2200      	movs	r2, #0
   194a2:	f7fe ffd3 	bl	1844c <__adddf3>
   194a6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   194aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   194ae:	9303      	str	r3, [sp, #12]
   194b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   194b2:	2b00      	cmp	r3, #0
   194b4:	d160      	bne.n	19578 <_dtoa_r+0x4f8>
   194b6:	2200      	movs	r2, #0
   194b8:	4b87      	ldr	r3, [pc, #540]	; (196d8 <_dtoa_r+0x658>)
   194ba:	4630      	mov	r0, r6
   194bc:	4639      	mov	r1, r7
   194be:	f7fe ffc3 	bl	18448 <__aeabi_dsub>
   194c2:	4606      	mov	r6, r0
   194c4:	460f      	mov	r7, r1
   194c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   194ca:	f7ff fd7f 	bl	18fcc <__aeabi_dcmpgt>
   194ce:	2800      	cmp	r0, #0
   194d0:	f040 8297 	bne.w	19a02 <_dtoa_r+0x982>
   194d4:	4630      	mov	r0, r6
   194d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   194da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   194de:	4639      	mov	r1, r7
   194e0:	f7ff fd56 	bl	18f90 <__aeabi_dcmplt>
   194e4:	2800      	cmp	r0, #0
   194e6:	f040 8289 	bne.w	199fc <_dtoa_r+0x97c>
   194ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   194ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
   194f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   194f4:	2b00      	cmp	r3, #0
   194f6:	f2c0 815b 	blt.w	197b0 <_dtoa_r+0x730>
   194fa:	f1b9 0f0e 	cmp.w	r9, #14
   194fe:	f300 8157 	bgt.w	197b0 <_dtoa_r+0x730>
   19502:	4b70      	ldr	r3, [pc, #448]	; (196c4 <_dtoa_r+0x644>)
   19504:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   19508:	ed93 7b00 	vldr	d7, [r3]
   1950c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1950e:	2b00      	cmp	r3, #0
   19510:	eeb0 8a47 	vmov.f32	s16, s14
   19514:	eef0 8a67 	vmov.f32	s17, s15
   19518:	f280 80e2 	bge.w	196e0 <_dtoa_r+0x660>
   1951c:	9b01      	ldr	r3, [sp, #4]
   1951e:	2b00      	cmp	r3, #0
   19520:	f300 80de 	bgt.w	196e0 <_dtoa_r+0x660>
   19524:	f040 826a 	bne.w	199fc <_dtoa_r+0x97c>
   19528:	2200      	movs	r2, #0
   1952a:	4b6b      	ldr	r3, [pc, #428]	; (196d8 <_dtoa_r+0x658>)
   1952c:	ec51 0b17 	vmov	r0, r1, d7
   19530:	f7ff fabc 	bl	18aac <__aeabi_dmul>
   19534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19538:	f7ff fd3e 	bl	18fb8 <__aeabi_dcmpge>
   1953c:	9e01      	ldr	r6, [sp, #4]
   1953e:	4637      	mov	r7, r6
   19540:	2800      	cmp	r0, #0
   19542:	f040 8240 	bne.w	199c6 <_dtoa_r+0x946>
   19546:	9d00      	ldr	r5, [sp, #0]
   19548:	2331      	movs	r3, #49	; 0x31
   1954a:	f109 0901 	add.w	r9, r9, #1
   1954e:	f805 3b01 	strb.w	r3, [r5], #1
   19552:	e23c      	b.n	199ce <_dtoa_r+0x94e>
   19554:	07f2      	lsls	r2, r6, #31
   19556:	d505      	bpl.n	19564 <_dtoa_r+0x4e4>
   19558:	3501      	adds	r5, #1
   1955a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1955e:	f7ff faa5 	bl	18aac <__aeabi_dmul>
   19562:	2301      	movs	r3, #1
   19564:	1076      	asrs	r6, r6, #1
   19566:	3708      	adds	r7, #8
   19568:	e767      	b.n	1943a <_dtoa_r+0x3ba>
   1956a:	2502      	movs	r5, #2
   1956c:	e76a      	b.n	19444 <_dtoa_r+0x3c4>
   1956e:	9b01      	ldr	r3, [sp, #4]
   19570:	f8cd 901c 	str.w	r9, [sp, #28]
   19574:	930c      	str	r3, [sp, #48]	; 0x30
   19576:	e789      	b.n	1948c <_dtoa_r+0x40c>
   19578:	9900      	ldr	r1, [sp, #0]
   1957a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1957c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1957e:	4401      	add	r1, r0
   19580:	4b50      	ldr	r3, [pc, #320]	; (196c4 <_dtoa_r+0x644>)
   19582:	ed9d 7b02 	vldr	d7, [sp, #8]
   19586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1958a:	9102      	str	r1, [sp, #8]
   1958c:	9908      	ldr	r1, [sp, #32]
   1958e:	eeb0 8a47 	vmov.f32	s16, s14
   19592:	eef0 8a67 	vmov.f32	s17, s15
   19596:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1959a:	2900      	cmp	r1, #0
   1959c:	d045      	beq.n	1962a <_dtoa_r+0x5aa>
   1959e:	2000      	movs	r0, #0
   195a0:	494e      	ldr	r1, [pc, #312]	; (196dc <_dtoa_r+0x65c>)
   195a2:	f7ff fbad 	bl	18d00 <__aeabi_ddiv>
   195a6:	ec53 2b18 	vmov	r2, r3, d8
   195aa:	f7fe ff4d 	bl	18448 <__aeabi_dsub>
   195ae:	9d00      	ldr	r5, [sp, #0]
   195b0:	ec41 0b18 	vmov	d8, r0, r1
   195b4:	4639      	mov	r1, r7
   195b6:	4630      	mov	r0, r6
   195b8:	f7ff fd28 	bl	1900c <__aeabi_d2iz>
   195bc:	900c      	str	r0, [sp, #48]	; 0x30
   195be:	f7ff f891 	bl	186e4 <__aeabi_i2d>
   195c2:	4602      	mov	r2, r0
   195c4:	460b      	mov	r3, r1
   195c6:	4630      	mov	r0, r6
   195c8:	4639      	mov	r1, r7
   195ca:	f7fe ff3d 	bl	18448 <__aeabi_dsub>
   195ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   195d0:	4606      	mov	r6, r0
   195d2:	460f      	mov	r7, r1
   195d4:	3330      	adds	r3, #48	; 0x30
   195d6:	f805 3b01 	strb.w	r3, [r5], #1
   195da:	ec53 2b18 	vmov	r2, r3, d8
   195de:	f7ff fcd7 	bl	18f90 <__aeabi_dcmplt>
   195e2:	2800      	cmp	r0, #0
   195e4:	d164      	bne.n	196b0 <_dtoa_r+0x630>
   195e6:	4632      	mov	r2, r6
   195e8:	463b      	mov	r3, r7
   195ea:	2000      	movs	r0, #0
   195ec:	4937      	ldr	r1, [pc, #220]	; (196cc <_dtoa_r+0x64c>)
   195ee:	f7fe ff2b 	bl	18448 <__aeabi_dsub>
   195f2:	ec53 2b18 	vmov	r2, r3, d8
   195f6:	f7ff fccb 	bl	18f90 <__aeabi_dcmplt>
   195fa:	2800      	cmp	r0, #0
   195fc:	f040 80b8 	bne.w	19770 <_dtoa_r+0x6f0>
   19600:	9b02      	ldr	r3, [sp, #8]
   19602:	429d      	cmp	r5, r3
   19604:	f43f af71 	beq.w	194ea <_dtoa_r+0x46a>
   19608:	2200      	movs	r2, #0
   1960a:	4b31      	ldr	r3, [pc, #196]	; (196d0 <_dtoa_r+0x650>)
   1960c:	ec51 0b18 	vmov	r0, r1, d8
   19610:	f7ff fa4c 	bl	18aac <__aeabi_dmul>
   19614:	2200      	movs	r2, #0
   19616:	4b2e      	ldr	r3, [pc, #184]	; (196d0 <_dtoa_r+0x650>)
   19618:	ec41 0b18 	vmov	d8, r0, r1
   1961c:	4630      	mov	r0, r6
   1961e:	4639      	mov	r1, r7
   19620:	f7ff fa44 	bl	18aac <__aeabi_dmul>
   19624:	4606      	mov	r6, r0
   19626:	460f      	mov	r7, r1
   19628:	e7c4      	b.n	195b4 <_dtoa_r+0x534>
   1962a:	ec51 0b17 	vmov	r0, r1, d7
   1962e:	f7ff fa3d 	bl	18aac <__aeabi_dmul>
   19632:	9b02      	ldr	r3, [sp, #8]
   19634:	9d00      	ldr	r5, [sp, #0]
   19636:	930c      	str	r3, [sp, #48]	; 0x30
   19638:	ec41 0b18 	vmov	d8, r0, r1
   1963c:	4639      	mov	r1, r7
   1963e:	4630      	mov	r0, r6
   19640:	f7ff fce4 	bl	1900c <__aeabi_d2iz>
   19644:	9011      	str	r0, [sp, #68]	; 0x44
   19646:	f7ff f84d 	bl	186e4 <__aeabi_i2d>
   1964a:	4602      	mov	r2, r0
   1964c:	460b      	mov	r3, r1
   1964e:	4630      	mov	r0, r6
   19650:	4639      	mov	r1, r7
   19652:	f7fe fef9 	bl	18448 <__aeabi_dsub>
   19656:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19658:	4606      	mov	r6, r0
   1965a:	460f      	mov	r7, r1
   1965c:	3330      	adds	r3, #48	; 0x30
   1965e:	2200      	movs	r2, #0
   19660:	f805 3b01 	strb.w	r3, [r5], #1
   19664:	9b02      	ldr	r3, [sp, #8]
   19666:	429d      	cmp	r5, r3
   19668:	d125      	bne.n	196b6 <_dtoa_r+0x636>
   1966a:	4b1c      	ldr	r3, [pc, #112]	; (196dc <_dtoa_r+0x65c>)
   1966c:	ec51 0b18 	vmov	r0, r1, d8
   19670:	f7fe feec 	bl	1844c <__adddf3>
   19674:	4602      	mov	r2, r0
   19676:	460b      	mov	r3, r1
   19678:	4630      	mov	r0, r6
   1967a:	4639      	mov	r1, r7
   1967c:	f7ff fca6 	bl	18fcc <__aeabi_dcmpgt>
   19680:	2800      	cmp	r0, #0
   19682:	d175      	bne.n	19770 <_dtoa_r+0x6f0>
   19684:	2000      	movs	r0, #0
   19686:	4915      	ldr	r1, [pc, #84]	; (196dc <_dtoa_r+0x65c>)
   19688:	ec53 2b18 	vmov	r2, r3, d8
   1968c:	f7fe fedc 	bl	18448 <__aeabi_dsub>
   19690:	4602      	mov	r2, r0
   19692:	460b      	mov	r3, r1
   19694:	4630      	mov	r0, r6
   19696:	4639      	mov	r1, r7
   19698:	f7ff fc7a 	bl	18f90 <__aeabi_dcmplt>
   1969c:	2800      	cmp	r0, #0
   1969e:	f43f af24 	beq.w	194ea <_dtoa_r+0x46a>
   196a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   196a4:	1e6b      	subs	r3, r5, #1
   196a6:	930c      	str	r3, [sp, #48]	; 0x30
   196a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   196ac:	2b30      	cmp	r3, #48	; 0x30
   196ae:	d0f8      	beq.n	196a2 <_dtoa_r+0x622>
   196b0:	f8dd 901c 	ldr.w	r9, [sp, #28]
   196b4:	e04a      	b.n	1974c <_dtoa_r+0x6cc>
   196b6:	4b06      	ldr	r3, [pc, #24]	; (196d0 <_dtoa_r+0x650>)
   196b8:	f7ff f9f8 	bl	18aac <__aeabi_dmul>
   196bc:	4606      	mov	r6, r0
   196be:	460f      	mov	r7, r1
   196c0:	e7bc      	b.n	1963c <_dtoa_r+0x5bc>
   196c2:	bf00      	nop
   196c4:	000384c0 	.word	0x000384c0
   196c8:	00038498 	.word	0x00038498
   196cc:	3ff00000 	.word	0x3ff00000
   196d0:	40240000 	.word	0x40240000
   196d4:	401c0000 	.word	0x401c0000
   196d8:	40140000 	.word	0x40140000
   196dc:	3fe00000 	.word	0x3fe00000
   196e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   196e4:	9d00      	ldr	r5, [sp, #0]
   196e6:	4630      	mov	r0, r6
   196e8:	4639      	mov	r1, r7
   196ea:	ec53 2b18 	vmov	r2, r3, d8
   196ee:	f7ff fb07 	bl	18d00 <__aeabi_ddiv>
   196f2:	f7ff fc8b 	bl	1900c <__aeabi_d2iz>
   196f6:	4680      	mov	r8, r0
   196f8:	f7fe fff4 	bl	186e4 <__aeabi_i2d>
   196fc:	ec53 2b18 	vmov	r2, r3, d8
   19700:	f7ff f9d4 	bl	18aac <__aeabi_dmul>
   19704:	4602      	mov	r2, r0
   19706:	4630      	mov	r0, r6
   19708:	f108 0630 	add.w	r6, r8, #48	; 0x30
   1970c:	460b      	mov	r3, r1
   1970e:	4639      	mov	r1, r7
   19710:	f7fe fe9a 	bl	18448 <__aeabi_dsub>
   19714:	f805 6b01 	strb.w	r6, [r5], #1
   19718:	9e00      	ldr	r6, [sp, #0]
   1971a:	4602      	mov	r2, r0
   1971c:	9f01      	ldr	r7, [sp, #4]
   1971e:	460b      	mov	r3, r1
   19720:	1bae      	subs	r6, r5, r6
   19722:	42b7      	cmp	r7, r6
   19724:	d137      	bne.n	19796 <_dtoa_r+0x716>
   19726:	f7fe fe91 	bl	1844c <__adddf3>
   1972a:	4606      	mov	r6, r0
   1972c:	460f      	mov	r7, r1
   1972e:	ec53 2b18 	vmov	r2, r3, d8
   19732:	f7ff fc4b 	bl	18fcc <__aeabi_dcmpgt>
   19736:	b9c8      	cbnz	r0, 1976c <_dtoa_r+0x6ec>
   19738:	4630      	mov	r0, r6
   1973a:	4639      	mov	r1, r7
   1973c:	ec53 2b18 	vmov	r2, r3, d8
   19740:	f7ff fc1c 	bl	18f7c <__aeabi_dcmpeq>
   19744:	b110      	cbz	r0, 1974c <_dtoa_r+0x6cc>
   19746:	f018 0f01 	tst.w	r8, #1
   1974a:	d10f      	bne.n	1976c <_dtoa_r+0x6ec>
   1974c:	4620      	mov	r0, r4
   1974e:	4651      	mov	r1, sl
   19750:	f01e f910 	bl	37974 <_Bfree>
   19754:	2300      	movs	r3, #0
   19756:	f109 0001 	add.w	r0, r9, #1
   1975a:	702b      	strb	r3, [r5, #0]
   1975c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1975e:	6018      	str	r0, [r3, #0]
   19760:	9b21      	ldr	r3, [sp, #132]	; 0x84
   19762:	2b00      	cmp	r3, #0
   19764:	f43f acd8 	beq.w	19118 <_dtoa_r+0x98>
   19768:	601d      	str	r5, [r3, #0]
   1976a:	e4d5      	b.n	19118 <_dtoa_r+0x98>
   1976c:	f8cd 901c 	str.w	r9, [sp, #28]
   19770:	462b      	mov	r3, r5
   19772:	461d      	mov	r5, r3
   19774:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   19778:	2a39      	cmp	r2, #57	; 0x39
   1977a:	d108      	bne.n	1978e <_dtoa_r+0x70e>
   1977c:	9a00      	ldr	r2, [sp, #0]
   1977e:	429a      	cmp	r2, r3
   19780:	d1f7      	bne.n	19772 <_dtoa_r+0x6f2>
   19782:	9a07      	ldr	r2, [sp, #28]
   19784:	9900      	ldr	r1, [sp, #0]
   19786:	3201      	adds	r2, #1
   19788:	9207      	str	r2, [sp, #28]
   1978a:	2230      	movs	r2, #48	; 0x30
   1978c:	700a      	strb	r2, [r1, #0]
   1978e:	781a      	ldrb	r2, [r3, #0]
   19790:	3201      	adds	r2, #1
   19792:	701a      	strb	r2, [r3, #0]
   19794:	e78c      	b.n	196b0 <_dtoa_r+0x630>
   19796:	2200      	movs	r2, #0
   19798:	4b9c      	ldr	r3, [pc, #624]	; (19a0c <_dtoa_r+0x98c>)
   1979a:	f7ff f987 	bl	18aac <__aeabi_dmul>
   1979e:	2200      	movs	r2, #0
   197a0:	2300      	movs	r3, #0
   197a2:	4606      	mov	r6, r0
   197a4:	460f      	mov	r7, r1
   197a6:	f7ff fbe9 	bl	18f7c <__aeabi_dcmpeq>
   197aa:	2800      	cmp	r0, #0
   197ac:	d09b      	beq.n	196e6 <_dtoa_r+0x666>
   197ae:	e7cd      	b.n	1974c <_dtoa_r+0x6cc>
   197b0:	9a08      	ldr	r2, [sp, #32]
   197b2:	2a00      	cmp	r2, #0
   197b4:	f000 80c4 	beq.w	19940 <_dtoa_r+0x8c0>
   197b8:	9a05      	ldr	r2, [sp, #20]
   197ba:	2a01      	cmp	r2, #1
   197bc:	f300 80a9 	bgt.w	19912 <_dtoa_r+0x892>
   197c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   197c2:	2a00      	cmp	r2, #0
   197c4:	f000 80a1 	beq.w	1990a <_dtoa_r+0x88a>
   197c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
   197cc:	9e06      	ldr	r6, [sp, #24]
   197ce:	4645      	mov	r5, r8
   197d0:	9a04      	ldr	r2, [sp, #16]
   197d2:	2101      	movs	r1, #1
   197d4:	4620      	mov	r0, r4
   197d6:	4498      	add	r8, r3
   197d8:	441a      	add	r2, r3
   197da:	9204      	str	r2, [sp, #16]
   197dc:	f01e f970 	bl	37ac0 <__i2b>
   197e0:	4607      	mov	r7, r0
   197e2:	2d00      	cmp	r5, #0
   197e4:	dd0b      	ble.n	197fe <_dtoa_r+0x77e>
   197e6:	9b04      	ldr	r3, [sp, #16]
   197e8:	2b00      	cmp	r3, #0
   197ea:	dd08      	ble.n	197fe <_dtoa_r+0x77e>
   197ec:	42ab      	cmp	r3, r5
   197ee:	9a04      	ldr	r2, [sp, #16]
   197f0:	bfa8      	it	ge
   197f2:	462b      	movge	r3, r5
   197f4:	eba8 0803 	sub.w	r8, r8, r3
   197f8:	1aed      	subs	r5, r5, r3
   197fa:	1ad3      	subs	r3, r2, r3
   197fc:	9304      	str	r3, [sp, #16]
   197fe:	9b06      	ldr	r3, [sp, #24]
   19800:	b1fb      	cbz	r3, 19842 <_dtoa_r+0x7c2>
   19802:	9b08      	ldr	r3, [sp, #32]
   19804:	2b00      	cmp	r3, #0
   19806:	f000 809f 	beq.w	19948 <_dtoa_r+0x8c8>
   1980a:	2e00      	cmp	r6, #0
   1980c:	dd11      	ble.n	19832 <_dtoa_r+0x7b2>
   1980e:	4639      	mov	r1, r7
   19810:	4632      	mov	r2, r6
   19812:	4620      	mov	r0, r4
   19814:	f019 fee2 	bl	335dc <__pow5mult>
   19818:	4652      	mov	r2, sl
   1981a:	4601      	mov	r1, r0
   1981c:	4607      	mov	r7, r0
   1981e:	4620      	mov	r0, r4
   19820:	f01e f957 	bl	37ad2 <__multiply>
   19824:	4651      	mov	r1, sl
   19826:	9007      	str	r0, [sp, #28]
   19828:	4620      	mov	r0, r4
   1982a:	f01e f8a3 	bl	37974 <_Bfree>
   1982e:	9b07      	ldr	r3, [sp, #28]
   19830:	469a      	mov	sl, r3
   19832:	9b06      	ldr	r3, [sp, #24]
   19834:	1b9a      	subs	r2, r3, r6
   19836:	d004      	beq.n	19842 <_dtoa_r+0x7c2>
   19838:	4651      	mov	r1, sl
   1983a:	4620      	mov	r0, r4
   1983c:	f019 fece 	bl	335dc <__pow5mult>
   19840:	4682      	mov	sl, r0
   19842:	2101      	movs	r1, #1
   19844:	4620      	mov	r0, r4
   19846:	f01e f93b 	bl	37ac0 <__i2b>
   1984a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1984c:	4606      	mov	r6, r0
   1984e:	2b00      	cmp	r3, #0
   19850:	dd7c      	ble.n	1994c <_dtoa_r+0x8cc>
   19852:	461a      	mov	r2, r3
   19854:	4601      	mov	r1, r0
   19856:	4620      	mov	r0, r4
   19858:	f019 fec0 	bl	335dc <__pow5mult>
   1985c:	9b05      	ldr	r3, [sp, #20]
   1985e:	4606      	mov	r6, r0
   19860:	2b01      	cmp	r3, #1
   19862:	dd76      	ble.n	19952 <_dtoa_r+0x8d2>
   19864:	2300      	movs	r3, #0
   19866:	9306      	str	r3, [sp, #24]
   19868:	6933      	ldr	r3, [r6, #16]
   1986a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1986e:	6918      	ldr	r0, [r3, #16]
   19870:	f01e f8d6 	bl	37a20 <__hi0bits>
   19874:	f1c0 0020 	rsb	r0, r0, #32
   19878:	9b04      	ldr	r3, [sp, #16]
   1987a:	4418      	add	r0, r3
   1987c:	f010 001f 	ands.w	r0, r0, #31
   19880:	f000 8086 	beq.w	19990 <_dtoa_r+0x910>
   19884:	f1c0 0320 	rsb	r3, r0, #32
   19888:	2b04      	cmp	r3, #4
   1988a:	dd7f      	ble.n	1998c <_dtoa_r+0x90c>
   1988c:	f1c0 001c 	rsb	r0, r0, #28
   19890:	9b04      	ldr	r3, [sp, #16]
   19892:	4480      	add	r8, r0
   19894:	4405      	add	r5, r0
   19896:	4403      	add	r3, r0
   19898:	9304      	str	r3, [sp, #16]
   1989a:	f1b8 0f00 	cmp.w	r8, #0
   1989e:	dd05      	ble.n	198ac <_dtoa_r+0x82c>
   198a0:	4651      	mov	r1, sl
   198a2:	4642      	mov	r2, r8
   198a4:	4620      	mov	r0, r4
   198a6:	f01e f9af 	bl	37c08 <__lshift>
   198aa:	4682      	mov	sl, r0
   198ac:	9b04      	ldr	r3, [sp, #16]
   198ae:	2b00      	cmp	r3, #0
   198b0:	dd05      	ble.n	198be <_dtoa_r+0x83e>
   198b2:	4631      	mov	r1, r6
   198b4:	461a      	mov	r2, r3
   198b6:	4620      	mov	r0, r4
   198b8:	f01e f9a6 	bl	37c08 <__lshift>
   198bc:	4606      	mov	r6, r0
   198be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   198c0:	2b00      	cmp	r3, #0
   198c2:	d067      	beq.n	19994 <_dtoa_r+0x914>
   198c4:	4631      	mov	r1, r6
   198c6:	4650      	mov	r0, sl
   198c8:	f01e f9fd 	bl	37cc6 <__mcmp>
   198cc:	2800      	cmp	r0, #0
   198ce:	da61      	bge.n	19994 <_dtoa_r+0x914>
   198d0:	2300      	movs	r3, #0
   198d2:	4651      	mov	r1, sl
   198d4:	220a      	movs	r2, #10
   198d6:	4620      	mov	r0, r4
   198d8:	f01e f863 	bl	379a2 <__multadd>
   198dc:	9b08      	ldr	r3, [sp, #32]
   198de:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   198e2:	4682      	mov	sl, r0
   198e4:	2b00      	cmp	r3, #0
   198e6:	f000 8187 	beq.w	19bf8 <_dtoa_r+0xb78>
   198ea:	4639      	mov	r1, r7
   198ec:	2300      	movs	r3, #0
   198ee:	220a      	movs	r2, #10
   198f0:	4620      	mov	r0, r4
   198f2:	f01e f856 	bl	379a2 <__multadd>
   198f6:	f1bb 0f00 	cmp.w	fp, #0
   198fa:	4607      	mov	r7, r0
   198fc:	f300 808e 	bgt.w	19a1c <_dtoa_r+0x99c>
   19900:	9b05      	ldr	r3, [sp, #20]
   19902:	2b02      	cmp	r3, #2
   19904:	f340 808a 	ble.w	19a1c <_dtoa_r+0x99c>
   19908:	e04c      	b.n	199a4 <_dtoa_r+0x924>
   1990a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1990c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   19910:	e75c      	b.n	197cc <_dtoa_r+0x74c>
   19912:	9b01      	ldr	r3, [sp, #4]
   19914:	1e5e      	subs	r6, r3, #1
   19916:	9b06      	ldr	r3, [sp, #24]
   19918:	42b3      	cmp	r3, r6
   1991a:	bfb7      	itett	lt
   1991c:	9b06      	ldrlt	r3, [sp, #24]
   1991e:	1b9e      	subge	r6, r3, r6
   19920:	9606      	strlt	r6, [sp, #24]
   19922:	1af2      	sublt	r2, r6, r3
   19924:	bfbf      	itttt	lt
   19926:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
   19928:	2600      	movlt	r6, #0
   1992a:	189b      	addlt	r3, r3, r2
   1992c:	930d      	strlt	r3, [sp, #52]	; 0x34
   1992e:	9b01      	ldr	r3, [sp, #4]
   19930:	2b00      	cmp	r3, #0
   19932:	bfb5      	itete	lt
   19934:	eba8 0503 	sublt.w	r5, r8, r3
   19938:	4645      	movge	r5, r8
   1993a:	2300      	movlt	r3, #0
   1993c:	9b01      	ldrge	r3, [sp, #4]
   1993e:	e747      	b.n	197d0 <_dtoa_r+0x750>
   19940:	9e06      	ldr	r6, [sp, #24]
   19942:	4645      	mov	r5, r8
   19944:	9f08      	ldr	r7, [sp, #32]
   19946:	e74c      	b.n	197e2 <_dtoa_r+0x762>
   19948:	9a06      	ldr	r2, [sp, #24]
   1994a:	e775      	b.n	19838 <_dtoa_r+0x7b8>
   1994c:	9b05      	ldr	r3, [sp, #20]
   1994e:	2b01      	cmp	r3, #1
   19950:	dc18      	bgt.n	19984 <_dtoa_r+0x904>
   19952:	9b02      	ldr	r3, [sp, #8]
   19954:	b9b3      	cbnz	r3, 19984 <_dtoa_r+0x904>
   19956:	9b03      	ldr	r3, [sp, #12]
   19958:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1995c:	b9a3      	cbnz	r3, 19988 <_dtoa_r+0x908>
   1995e:	9b03      	ldr	r3, [sp, #12]
   19960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   19964:	0d1b      	lsrs	r3, r3, #20
   19966:	051b      	lsls	r3, r3, #20
   19968:	b12b      	cbz	r3, 19976 <_dtoa_r+0x8f6>
   1996a:	9b04      	ldr	r3, [sp, #16]
   1996c:	f108 0801 	add.w	r8, r8, #1
   19970:	3301      	adds	r3, #1
   19972:	9304      	str	r3, [sp, #16]
   19974:	2301      	movs	r3, #1
   19976:	9306      	str	r3, [sp, #24]
   19978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1997a:	2b00      	cmp	r3, #0
   1997c:	f47f af74 	bne.w	19868 <_dtoa_r+0x7e8>
   19980:	2001      	movs	r0, #1
   19982:	e779      	b.n	19878 <_dtoa_r+0x7f8>
   19984:	2300      	movs	r3, #0
   19986:	e7f6      	b.n	19976 <_dtoa_r+0x8f6>
   19988:	9b02      	ldr	r3, [sp, #8]
   1998a:	e7f4      	b.n	19976 <_dtoa_r+0x8f6>
   1998c:	d085      	beq.n	1989a <_dtoa_r+0x81a>
   1998e:	4618      	mov	r0, r3
   19990:	301c      	adds	r0, #28
   19992:	e77d      	b.n	19890 <_dtoa_r+0x810>
   19994:	9b01      	ldr	r3, [sp, #4]
   19996:	2b00      	cmp	r3, #0
   19998:	dc3a      	bgt.n	19a10 <_dtoa_r+0x990>
   1999a:	9b05      	ldr	r3, [sp, #20]
   1999c:	2b02      	cmp	r3, #2
   1999e:	dd37      	ble.n	19a10 <_dtoa_r+0x990>
   199a0:	f8dd b004 	ldr.w	fp, [sp, #4]
   199a4:	f1bb 0f00 	cmp.w	fp, #0
   199a8:	d10d      	bne.n	199c6 <_dtoa_r+0x946>
   199aa:	4631      	mov	r1, r6
   199ac:	465b      	mov	r3, fp
   199ae:	2205      	movs	r2, #5
   199b0:	4620      	mov	r0, r4
   199b2:	f01d fff6 	bl	379a2 <__multadd>
   199b6:	4601      	mov	r1, r0
   199b8:	4606      	mov	r6, r0
   199ba:	4650      	mov	r0, sl
   199bc:	f01e f983 	bl	37cc6 <__mcmp>
   199c0:	2800      	cmp	r0, #0
   199c2:	f73f adc0 	bgt.w	19546 <_dtoa_r+0x4c6>
   199c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   199c8:	9d00      	ldr	r5, [sp, #0]
   199ca:	ea6f 0903 	mvn.w	r9, r3
   199ce:	f04f 0800 	mov.w	r8, #0
   199d2:	4631      	mov	r1, r6
   199d4:	4620      	mov	r0, r4
   199d6:	f01d ffcd 	bl	37974 <_Bfree>
   199da:	2f00      	cmp	r7, #0
   199dc:	f43f aeb6 	beq.w	1974c <_dtoa_r+0x6cc>
   199e0:	f1b8 0f00 	cmp.w	r8, #0
   199e4:	d005      	beq.n	199f2 <_dtoa_r+0x972>
   199e6:	45b8      	cmp	r8, r7
   199e8:	d003      	beq.n	199f2 <_dtoa_r+0x972>
   199ea:	4641      	mov	r1, r8
   199ec:	4620      	mov	r0, r4
   199ee:	f01d ffc1 	bl	37974 <_Bfree>
   199f2:	4639      	mov	r1, r7
   199f4:	4620      	mov	r0, r4
   199f6:	f01d ffbd 	bl	37974 <_Bfree>
   199fa:	e6a7      	b.n	1974c <_dtoa_r+0x6cc>
   199fc:	2600      	movs	r6, #0
   199fe:	4637      	mov	r7, r6
   19a00:	e7e1      	b.n	199c6 <_dtoa_r+0x946>
   19a02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   19a04:	f8dd 901c 	ldr.w	r9, [sp, #28]
   19a08:	4637      	mov	r7, r6
   19a0a:	e59c      	b.n	19546 <_dtoa_r+0x4c6>
   19a0c:	40240000 	.word	0x40240000
   19a10:	9b08      	ldr	r3, [sp, #32]
   19a12:	f8dd b004 	ldr.w	fp, [sp, #4]
   19a16:	2b00      	cmp	r3, #0
   19a18:	f000 80f5 	beq.w	19c06 <_dtoa_r+0xb86>
   19a1c:	2d00      	cmp	r5, #0
   19a1e:	dd05      	ble.n	19a2c <_dtoa_r+0x9ac>
   19a20:	4639      	mov	r1, r7
   19a22:	462a      	mov	r2, r5
   19a24:	4620      	mov	r0, r4
   19a26:	f01e f8ef 	bl	37c08 <__lshift>
   19a2a:	4607      	mov	r7, r0
   19a2c:	9b06      	ldr	r3, [sp, #24]
   19a2e:	2b00      	cmp	r3, #0
   19a30:	d055      	beq.n	19ade <_dtoa_r+0xa5e>
   19a32:	6879      	ldr	r1, [r7, #4]
   19a34:	4620      	mov	r0, r4
   19a36:	f01d ff69 	bl	3790c <_Balloc>
   19a3a:	693a      	ldr	r2, [r7, #16]
   19a3c:	4605      	mov	r5, r0
   19a3e:	f107 010c 	add.w	r1, r7, #12
   19a42:	3202      	adds	r2, #2
   19a44:	300c      	adds	r0, #12
   19a46:	0092      	lsls	r2, r2, #2
   19a48:	f01d fcdb 	bl	37402 <memcpy>
   19a4c:	2201      	movs	r2, #1
   19a4e:	4629      	mov	r1, r5
   19a50:	4620      	mov	r0, r4
   19a52:	f01e f8d9 	bl	37c08 <__lshift>
   19a56:	9b00      	ldr	r3, [sp, #0]
   19a58:	46b8      	mov	r8, r7
   19a5a:	4607      	mov	r7, r0
   19a5c:	3301      	adds	r3, #1
   19a5e:	9301      	str	r3, [sp, #4]
   19a60:	9b00      	ldr	r3, [sp, #0]
   19a62:	445b      	add	r3, fp
   19a64:	9307      	str	r3, [sp, #28]
   19a66:	9b02      	ldr	r3, [sp, #8]
   19a68:	f003 0301 	and.w	r3, r3, #1
   19a6c:	9306      	str	r3, [sp, #24]
   19a6e:	9b01      	ldr	r3, [sp, #4]
   19a70:	4631      	mov	r1, r6
   19a72:	4650      	mov	r0, sl
   19a74:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
   19a78:	f01d feb9 	bl	377ee <quorem>
   19a7c:	4603      	mov	r3, r0
   19a7e:	4641      	mov	r1, r8
   19a80:	9002      	str	r0, [sp, #8]
   19a82:	4650      	mov	r0, sl
   19a84:	3330      	adds	r3, #48	; 0x30
   19a86:	9308      	str	r3, [sp, #32]
   19a88:	f01e f91d 	bl	37cc6 <__mcmp>
   19a8c:	463a      	mov	r2, r7
   19a8e:	9004      	str	r0, [sp, #16]
   19a90:	4631      	mov	r1, r6
   19a92:	4620      	mov	r0, r4
   19a94:	f01e f933 	bl	37cfe <__mdiff>
   19a98:	68c2      	ldr	r2, [r0, #12]
   19a9a:	4605      	mov	r5, r0
   19a9c:	9b08      	ldr	r3, [sp, #32]
   19a9e:	bb02      	cbnz	r2, 19ae2 <_dtoa_r+0xa62>
   19aa0:	4601      	mov	r1, r0
   19aa2:	4650      	mov	r0, sl
   19aa4:	f01e f90f 	bl	37cc6 <__mcmp>
   19aa8:	9b08      	ldr	r3, [sp, #32]
   19aaa:	4602      	mov	r2, r0
   19aac:	4629      	mov	r1, r5
   19aae:	4620      	mov	r0, r4
   19ab0:	e9cd 3208 	strd	r3, r2, [sp, #32]
   19ab4:	f01d ff5e 	bl	37974 <_Bfree>
   19ab8:	9b05      	ldr	r3, [sp, #20]
   19aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19abc:	9d01      	ldr	r5, [sp, #4]
   19abe:	ea43 0102 	orr.w	r1, r3, r2
   19ac2:	9b06      	ldr	r3, [sp, #24]
   19ac4:	430b      	orrs	r3, r1
   19ac6:	9b08      	ldr	r3, [sp, #32]
   19ac8:	d10d      	bne.n	19ae6 <_dtoa_r+0xa66>
   19aca:	2b39      	cmp	r3, #57	; 0x39
   19acc:	d027      	beq.n	19b1e <_dtoa_r+0xa9e>
   19ace:	9a04      	ldr	r2, [sp, #16]
   19ad0:	2a00      	cmp	r2, #0
   19ad2:	dd01      	ble.n	19ad8 <_dtoa_r+0xa58>
   19ad4:	9b02      	ldr	r3, [sp, #8]
   19ad6:	3331      	adds	r3, #49	; 0x31
   19ad8:	f88b 3000 	strb.w	r3, [fp]
   19adc:	e779      	b.n	199d2 <_dtoa_r+0x952>
   19ade:	4638      	mov	r0, r7
   19ae0:	e7b9      	b.n	19a56 <_dtoa_r+0x9d6>
   19ae2:	2201      	movs	r2, #1
   19ae4:	e7e2      	b.n	19aac <_dtoa_r+0xa2c>
   19ae6:	9904      	ldr	r1, [sp, #16]
   19ae8:	2900      	cmp	r1, #0
   19aea:	db04      	blt.n	19af6 <_dtoa_r+0xa76>
   19aec:	9805      	ldr	r0, [sp, #20]
   19aee:	4301      	orrs	r1, r0
   19af0:	9806      	ldr	r0, [sp, #24]
   19af2:	4301      	orrs	r1, r0
   19af4:	d120      	bne.n	19b38 <_dtoa_r+0xab8>
   19af6:	2a00      	cmp	r2, #0
   19af8:	ddee      	ble.n	19ad8 <_dtoa_r+0xa58>
   19afa:	4651      	mov	r1, sl
   19afc:	2201      	movs	r2, #1
   19afe:	4620      	mov	r0, r4
   19b00:	9301      	str	r3, [sp, #4]
   19b02:	f01e f881 	bl	37c08 <__lshift>
   19b06:	4631      	mov	r1, r6
   19b08:	4682      	mov	sl, r0
   19b0a:	f01e f8dc 	bl	37cc6 <__mcmp>
   19b0e:	2800      	cmp	r0, #0
   19b10:	9b01      	ldr	r3, [sp, #4]
   19b12:	dc02      	bgt.n	19b1a <_dtoa_r+0xa9a>
   19b14:	d1e0      	bne.n	19ad8 <_dtoa_r+0xa58>
   19b16:	07da      	lsls	r2, r3, #31
   19b18:	d5de      	bpl.n	19ad8 <_dtoa_r+0xa58>
   19b1a:	2b39      	cmp	r3, #57	; 0x39
   19b1c:	d1da      	bne.n	19ad4 <_dtoa_r+0xa54>
   19b1e:	2339      	movs	r3, #57	; 0x39
   19b20:	f88b 3000 	strb.w	r3, [fp]
   19b24:	462b      	mov	r3, r5
   19b26:	461d      	mov	r5, r3
   19b28:	3b01      	subs	r3, #1
   19b2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   19b2e:	2a39      	cmp	r2, #57	; 0x39
   19b30:	d050      	beq.n	19bd4 <_dtoa_r+0xb54>
   19b32:	3201      	adds	r2, #1
   19b34:	701a      	strb	r2, [r3, #0]
   19b36:	e74c      	b.n	199d2 <_dtoa_r+0x952>
   19b38:	2a00      	cmp	r2, #0
   19b3a:	dd03      	ble.n	19b44 <_dtoa_r+0xac4>
   19b3c:	2b39      	cmp	r3, #57	; 0x39
   19b3e:	d0ee      	beq.n	19b1e <_dtoa_r+0xa9e>
   19b40:	3301      	adds	r3, #1
   19b42:	e7c9      	b.n	19ad8 <_dtoa_r+0xa58>
   19b44:	9a01      	ldr	r2, [sp, #4]
   19b46:	9907      	ldr	r1, [sp, #28]
   19b48:	f802 3c01 	strb.w	r3, [r2, #-1]
   19b4c:	428a      	cmp	r2, r1
   19b4e:	d02a      	beq.n	19ba6 <_dtoa_r+0xb26>
   19b50:	4651      	mov	r1, sl
   19b52:	2300      	movs	r3, #0
   19b54:	220a      	movs	r2, #10
   19b56:	4620      	mov	r0, r4
   19b58:	f01d ff23 	bl	379a2 <__multadd>
   19b5c:	45b8      	cmp	r8, r7
   19b5e:	4682      	mov	sl, r0
   19b60:	f04f 0300 	mov.w	r3, #0
   19b64:	f04f 020a 	mov.w	r2, #10
   19b68:	4641      	mov	r1, r8
   19b6a:	4620      	mov	r0, r4
   19b6c:	d107      	bne.n	19b7e <_dtoa_r+0xafe>
   19b6e:	f01d ff18 	bl	379a2 <__multadd>
   19b72:	4680      	mov	r8, r0
   19b74:	4607      	mov	r7, r0
   19b76:	9b01      	ldr	r3, [sp, #4]
   19b78:	3301      	adds	r3, #1
   19b7a:	9301      	str	r3, [sp, #4]
   19b7c:	e777      	b.n	19a6e <_dtoa_r+0x9ee>
   19b7e:	f01d ff10 	bl	379a2 <__multadd>
   19b82:	4639      	mov	r1, r7
   19b84:	4680      	mov	r8, r0
   19b86:	2300      	movs	r3, #0
   19b88:	220a      	movs	r2, #10
   19b8a:	4620      	mov	r0, r4
   19b8c:	f01d ff09 	bl	379a2 <__multadd>
   19b90:	4607      	mov	r7, r0
   19b92:	e7f0      	b.n	19b76 <_dtoa_r+0xaf6>
   19b94:	f1bb 0f00 	cmp.w	fp, #0
   19b98:	9a00      	ldr	r2, [sp, #0]
   19b9a:	f04f 0800 	mov.w	r8, #0
   19b9e:	bfcc      	ite	gt
   19ba0:	465d      	movgt	r5, fp
   19ba2:	2501      	movle	r5, #1
   19ba4:	4415      	add	r5, r2
   19ba6:	4651      	mov	r1, sl
   19ba8:	2201      	movs	r2, #1
   19baa:	4620      	mov	r0, r4
   19bac:	9301      	str	r3, [sp, #4]
   19bae:	f01e f82b 	bl	37c08 <__lshift>
   19bb2:	4631      	mov	r1, r6
   19bb4:	4682      	mov	sl, r0
   19bb6:	f01e f886 	bl	37cc6 <__mcmp>
   19bba:	2800      	cmp	r0, #0
   19bbc:	dcb2      	bgt.n	19b24 <_dtoa_r+0xaa4>
   19bbe:	d102      	bne.n	19bc6 <_dtoa_r+0xb46>
   19bc0:	9b01      	ldr	r3, [sp, #4]
   19bc2:	07db      	lsls	r3, r3, #31
   19bc4:	d4ae      	bmi.n	19b24 <_dtoa_r+0xaa4>
   19bc6:	462b      	mov	r3, r5
   19bc8:	461d      	mov	r5, r3
   19bca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   19bce:	2a30      	cmp	r2, #48	; 0x30
   19bd0:	d0fa      	beq.n	19bc8 <_dtoa_r+0xb48>
   19bd2:	e6fe      	b.n	199d2 <_dtoa_r+0x952>
   19bd4:	9a00      	ldr	r2, [sp, #0]
   19bd6:	429a      	cmp	r2, r3
   19bd8:	d1a5      	bne.n	19b26 <_dtoa_r+0xaa6>
   19bda:	2331      	movs	r3, #49	; 0x31
   19bdc:	f109 0901 	add.w	r9, r9, #1
   19be0:	7013      	strb	r3, [r2, #0]
   19be2:	e6f6      	b.n	199d2 <_dtoa_r+0x952>
   19be4:	4b12      	ldr	r3, [pc, #72]	; (19c30 <_dtoa_r+0xbb0>)
   19be6:	f7ff bab8 	b.w	1915a <_dtoa_r+0xda>
   19bea:	9b21      	ldr	r3, [sp, #132]	; 0x84
   19bec:	2b00      	cmp	r3, #0
   19bee:	f47f aa8e 	bne.w	1910e <_dtoa_r+0x8e>
   19bf2:	4b10      	ldr	r3, [pc, #64]	; (19c34 <_dtoa_r+0xbb4>)
   19bf4:	f7ff bab1 	b.w	1915a <_dtoa_r+0xda>
   19bf8:	f1bb 0f00 	cmp.w	fp, #0
   19bfc:	dc03      	bgt.n	19c06 <_dtoa_r+0xb86>
   19bfe:	9b05      	ldr	r3, [sp, #20]
   19c00:	2b02      	cmp	r3, #2
   19c02:	f73f aecf 	bgt.w	199a4 <_dtoa_r+0x924>
   19c06:	9d00      	ldr	r5, [sp, #0]
   19c08:	4631      	mov	r1, r6
   19c0a:	4650      	mov	r0, sl
   19c0c:	f01d fdef 	bl	377ee <quorem>
   19c10:	9a00      	ldr	r2, [sp, #0]
   19c12:	f100 0330 	add.w	r3, r0, #48	; 0x30
   19c16:	f805 3b01 	strb.w	r3, [r5], #1
   19c1a:	1aaa      	subs	r2, r5, r2
   19c1c:	4593      	cmp	fp, r2
   19c1e:	ddb9      	ble.n	19b94 <_dtoa_r+0xb14>
   19c20:	4651      	mov	r1, sl
   19c22:	2300      	movs	r3, #0
   19c24:	220a      	movs	r2, #10
   19c26:	4620      	mov	r0, r4
   19c28:	f01d febb 	bl	379a2 <__multadd>
   19c2c:	4682      	mov	sl, r0
   19c2e:	e7eb      	b.n	19c08 <_dtoa_r+0xb88>
   19c30:	000397b5 	.word	0x000397b5
   19c34:	0003cbb2 	.word	0x0003cbb2

00019c38 <gpio_callback>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19c38:	4907      	ldr	r1, [pc, #28]	; (19c58 <gpio_callback+0x20>)
   19c3a:	e8d1 3fef 	ldaex	r3, [r1]
   19c3e:	f043 0201 	orr.w	r2, r3, #1
   19c42:	e8c1 2fe0 	stlex	r0, r2, [r1]
   19c46:	2800      	cmp	r0, #0
   19c48:	d1f7      	bne.n	19c3a <gpio_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   19c4a:	07db      	lsls	r3, r3, #31
   19c4c:	d403      	bmi.n	19c56 <gpio_callback+0x1e>
		k_queue_append(&work_q->queue, work);
   19c4e:	4803      	ldr	r0, [pc, #12]	; (19c5c <gpio_callback+0x24>)
   19c50:	3908      	subs	r1, #8
   19c52:	f01c bfec 	b.w	36c2e <k_queue_append>

static void gpio_callback(const struct device *dev,
		     struct gpio_callback *gpio_cb, uint32_t pins)
{
	k_work_submit_to_queue(&slm_work_q, &exit_idle_work);
}
   19c56:	4770      	bx	lr
   19c58:	20023440 	.word	0x20023440
   19c5c:	200211e8 	.word	0x200211e8

00019c60 <exit_idle>:
{
   19c60:	b538      	push	{r3, r4, r5, lr}
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   19c62:	4b14      	ldr	r3, [pc, #80]	; (19cb4 <exit_idle+0x54>)
   19c64:	4c14      	ldr	r4, [pc, #80]	; (19cb8 <exit_idle+0x58>)
	gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   19c66:	4d15      	ldr	r5, [pc, #84]	; (19cbc <exit_idle+0x5c>)
   19c68:	1ae4      	subs	r4, r4, r3
   19c6a:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Exit Idle");
   19c6c:	01a4      	lsls	r4, r4, #6
   19c6e:	4814      	ldr	r0, [pc, #80]	; (19cc0 <exit_idle+0x60>)
   19c70:	f044 0103 	orr.w	r1, r4, #3
   19c74:	f01a fc48 	bl	34508 <log_0>
	gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   19c78:	6828      	ldr	r0, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   19c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   19c7e:	f019 fec1 	bl	33a04 <z_impl_gpio_pin_interrupt_configure.constprop.0>
	gpio_remove_callback(gpio_dev, &gpio_cb);
   19c82:	6828      	ldr	r0, [r5, #0]
				       struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   19c84:	6883      	ldr	r3, [r0, #8]
   19c86:	69db      	ldr	r3, [r3, #28]
   19c88:	b113      	cbz	r3, 19c90 <exit_idle+0x30>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, false);
   19c8a:	2200      	movs	r2, #0
   19c8c:	490d      	ldr	r1, [pc, #52]	; (19cc4 <exit_idle+0x64>)
   19c8e:	4798      	blx	r3
	gpio_pin_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN, GPIO_INPUT);
   19c90:	f44f 7180 	mov.w	r1, #256	; 0x100
   19c94:	6828      	ldr	r0, [r5, #0]
   19c96:	f019 fec9 	bl	33a2c <gpio_pin_configure.constprop.0>
	err = slm_at_host_init();
   19c9a:	f000 faf1 	bl	1a280 <slm_at_host_init>
	if (err) {
   19c9e:	4601      	mov	r1, r0
   19ca0:	b130      	cbz	r0, 19cb0 <exit_idle+0x50>
		LOG_ERR("Failed to init at_host: %d", err);
   19ca2:	f044 0201 	orr.w	r2, r4, #1
   19ca6:	4808      	ldr	r0, [pc, #32]	; (19cc8 <exit_idle+0x68>)
}
   19ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Failed to init at_host: %d", err);
   19cac:	f01a bc3b 	b.w	34526 <log_1>
}
   19cb0:	bd38      	pop	{r3, r4, r5, pc}
   19cb2:	bf00      	nop
   19cb4:	0003831c 	.word	0x0003831c
   19cb8:	00038324 	.word	0x00038324
   19cbc:	20023450 	.word	0x20023450
   19cc0:	00038ec0 	.word	0x00038ec0
   19cc4:	20023444 	.word	0x20023444
   19cc8:	00038eca 	.word	0x00038eca

00019ccc <bsd_recoverable_error_handler>:
   19ccc:	4a05      	ldr	r2, [pc, #20]	; (19ce4 <bsd_recoverable_error_handler+0x18>)
   19cce:	4b06      	ldr	r3, [pc, #24]	; (19ce8 <bsd_recoverable_error_handler+0x1c>)
{
   19cd0:	4601      	mov	r1, r0
   19cd2:	1ad2      	subs	r2, r2, r3
   19cd4:	08d2      	lsrs	r2, r2, #3
	LOG_ERR("bsdlib recoverable error: %u", err);
   19cd6:	0192      	lsls	r2, r2, #6
   19cd8:	4804      	ldr	r0, [pc, #16]	; (19cec <bsd_recoverable_error_handler+0x20>)
   19cda:	f042 0201 	orr.w	r2, r2, #1
   19cde:	f01a bc22 	b.w	34526 <log_1>
   19ce2:	bf00      	nop
   19ce4:	00038324 	.word	0x00038324
   19ce8:	0003831c 	.word	0x0003831c
   19cec:	00038ee5 	.word	0x00038ee5

00019cf0 <enter_idle>:

void enter_idle(void)
{
   19cf0:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   19cf2:	4827      	ldr	r0, [pc, #156]	; (19d90 <enter_idle+0xa0>)
   19cf4:	f017 fbac 	bl	31450 <z_impl_device_get_binding>
	int err;

	gpio_dev = device_get_binding(DT_LABEL(DT_NODELABEL(gpio0)));
   19cf8:	4c26      	ldr	r4, [pc, #152]	; (19d94 <enter_idle+0xa4>)
   19cfa:	6020      	str	r0, [r4, #0]
	if (gpio_dev == NULL) {
   19cfc:	b958      	cbnz	r0, 19d16 <enter_idle+0x26>
	err = gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
					   GPIO_INT_LEVEL_LOW);
	if (err) {
		LOG_ERR("GPIO_0 enable callback error: %d", err);
	}
}
   19cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19d02:	4925      	ldr	r1, [pc, #148]	; (19d98 <enter_idle+0xa8>)
   19d04:	4b25      	ldr	r3, [pc, #148]	; (19d9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 bind error");
   19d06:	4826      	ldr	r0, [pc, #152]	; (19da0 <enter_idle+0xb0>)
   19d08:	1ac9      	subs	r1, r1, r3
   19d0a:	08c9      	lsrs	r1, r1, #3
   19d0c:	0189      	lsls	r1, r1, #6
   19d0e:	f041 0101 	orr.w	r1, r1, #1
   19d12:	f01a bbf9 	b.w	34508 <log_0>
	err = gpio_pin_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   19d16:	f44f 7188 	mov.w	r1, #272	; 0x110
   19d1a:	f019 fe87 	bl	33a2c <gpio_pin_configure.constprop.0>
	if (err) {
   19d1e:	4601      	mov	r1, r0
   19d20:	b158      	cbz	r0, 19d3a <enter_idle+0x4a>
   19d22:	4a1d      	ldr	r2, [pc, #116]	; (19d98 <enter_idle+0xa8>)
   19d24:	4b1d      	ldr	r3, [pc, #116]	; (19d9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 config error: %d", err);
   19d26:	481f      	ldr	r0, [pc, #124]	; (19da4 <enter_idle+0xb4>)
   19d28:	1ad2      	subs	r2, r2, r3
   19d2a:	08d2      	lsrs	r2, r2, #3
   19d2c:	0192      	lsls	r2, r2, #6
   19d2e:	f042 0201 	orr.w	r2, r2, #1
}
   19d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("GPIO_0 enable callback error: %d", err);
   19d36:	f01a bbf6 	b.w	34526 <log_1>
	callback->handler = handler;
   19d3a:	491b      	ldr	r1, [pc, #108]	; (19da8 <enter_idle+0xb8>)
   19d3c:	4b1b      	ldr	r3, [pc, #108]	; (19dac <enter_idle+0xbc>)
	err = gpio_add_callback(gpio_dev, &gpio_cb);
   19d3e:	6820      	ldr	r0, [r4, #0]
   19d40:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   19d42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   19d46:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   19d48:	6883      	ldr	r3, [r0, #8]
   19d4a:	69db      	ldr	r3, [r3, #28]
   19d4c:	b163      	cbz	r3, 19d68 <enter_idle+0x78>
	return api->manage_callback(port, callback, true);
   19d4e:	2201      	movs	r2, #1
   19d50:	4798      	blx	r3
	if (err) {
   19d52:	4601      	mov	r1, r0
   19d54:	b158      	cbz	r0, 19d6e <enter_idle+0x7e>
   19d56:	4a10      	ldr	r2, [pc, #64]	; (19d98 <enter_idle+0xa8>)
   19d58:	4b10      	ldr	r3, [pc, #64]	; (19d9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 add callback error: %d", err);
   19d5a:	4815      	ldr	r0, [pc, #84]	; (19db0 <enter_idle+0xc0>)
   19d5c:	1ad2      	subs	r2, r2, r3
   19d5e:	08d2      	lsrs	r2, r2, #3
   19d60:	0192      	lsls	r2, r2, #6
   19d62:	f042 0201 	orr.w	r2, r2, #1
   19d66:	e7e4      	b.n	19d32 <enter_idle+0x42>
		return -ENOTSUP;
   19d68:	f06f 0185 	mvn.w	r1, #133	; 0x85
   19d6c:	e7f3      	b.n	19d56 <enter_idle+0x66>
	err = gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   19d6e:	6820      	ldr	r0, [r4, #0]
   19d70:	f44f 3110 	mov.w	r1, #147456	; 0x24000
   19d74:	f019 fe46 	bl	33a04 <z_impl_gpio_pin_interrupt_configure.constprop.0>
	if (err) {
   19d78:	4601      	mov	r1, r0
   19d7a:	b140      	cbz	r0, 19d8e <enter_idle+0x9e>
   19d7c:	4a06      	ldr	r2, [pc, #24]	; (19d98 <enter_idle+0xa8>)
   19d7e:	4b07      	ldr	r3, [pc, #28]	; (19d9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 enable callback error: %d", err);
   19d80:	480c      	ldr	r0, [pc, #48]	; (19db4 <enter_idle+0xc4>)
   19d82:	1ad2      	subs	r2, r2, r3
   19d84:	08d2      	lsrs	r2, r2, #3
   19d86:	0192      	lsls	r2, r2, #6
   19d88:	f042 0201 	orr.w	r2, r2, #1
   19d8c:	e7d1      	b.n	19d32 <enter_idle+0x42>
}
   19d8e:	bd10      	pop	{r4, pc}
   19d90:	00038f02 	.word	0x00038f02
   19d94:	20023450 	.word	0x20023450
   19d98:	00038324 	.word	0x00038324
   19d9c:	0003831c 	.word	0x0003831c
   19da0:	00038f09 	.word	0x00038f09
   19da4:	00038f1b 	.word	0x00038f1b
   19da8:	20023444 	.word	0x20023444
   19dac:	00019c39 	.word	0x00019c39
   19db0:	00038f33 	.word	0x00038f33
   19db4:	00038f51 	.word	0x00038f51

00019db8 <handle_bsdlib_init_ret>:
	}
#endif	/* CONFIG_SLM_GPIO_WAKEUP */
}

void handle_bsdlib_init_ret(void)
{
   19db8:	b508      	push	{r3, lr}
	int ret = bsdlib_get_init_ret();
   19dba:	f00b fcd9 	bl	25770 <bsdlib_get_init_ret>

	/* Handle return values relating to modem firmware update */
	switch (ret) {
   19dbe:	4b19      	ldr	r3, [pc, #100]	; (19e24 <handle_bsdlib_init_ret+0x6c>)
	int ret = bsdlib_get_init_ret();
   19dc0:	4601      	mov	r1, r0
	switch (ret) {
   19dc2:	4298      	cmp	r0, r3
   19dc4:	dc08      	bgt.n	19dd8 <handle_bsdlib_init_ret+0x20>
   19dc6:	3b02      	subs	r3, #2
   19dc8:	4298      	cmp	r0, r3
   19dca:	dc17      	bgt.n	19dfc <handle_bsdlib_init_ret+0x44>
   19dcc:	f1a0 6388 	sub.w	r3, r0, #71303168	; 0x4400000
   19dd0:	3b01      	subs	r3, #1
   19dd2:	2b01      	cmp	r3, #1
   19dd4:	d91d      	bls.n	19e12 <handle_bsdlib_init_ret+0x5a>
		sys_reboot(SYS_REBOOT_COLD);
		break;
	default:
		break;
	}
}
   19dd6:	bd08      	pop	{r3, pc}
	switch (ret) {
   19dd8:	4b13      	ldr	r3, [pc, #76]	; (19e28 <handle_bsdlib_init_ret+0x70>)
   19dda:	4298      	cmp	r0, r3
   19ddc:	d1fb      	bne.n	19dd6 <handle_bsdlib_init_ret+0x1e>
   19dde:	4913      	ldr	r1, [pc, #76]	; (19e2c <handle_bsdlib_init_ret+0x74>)
   19de0:	4b13      	ldr	r3, [pc, #76]	; (19e30 <handle_bsdlib_init_ret+0x78>)
		LOG_INF("MODEM UPDATE OK. Will run new firmware");
   19de2:	4814      	ldr	r0, [pc, #80]	; (19e34 <handle_bsdlib_init_ret+0x7c>)
   19de4:	1ac9      	subs	r1, r1, r3
   19de6:	08c9      	lsrs	r1, r1, #3
   19de8:	0189      	lsls	r1, r1, #6
   19dea:	f041 0103 	orr.w	r1, r1, #3
   19dee:	f01a fb8b 	bl	34508 <log_0>
}
   19df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_reboot(SYS_REBOOT_COLD);
   19df6:	2001      	movs	r0, #1
   19df8:	f007 bad2 	b.w	213a0 <sys_reboot>
   19dfc:	4a0b      	ldr	r2, [pc, #44]	; (19e2c <handle_bsdlib_init_ret+0x74>)
   19dfe:	4b0c      	ldr	r3, [pc, #48]	; (19e30 <handle_bsdlib_init_ret+0x78>)
		LOG_ERR("MODEM UPDATE ERROR %d. Will run old firmware", ret);
   19e00:	480d      	ldr	r0, [pc, #52]	; (19e38 <handle_bsdlib_init_ret+0x80>)
   19e02:	1ad2      	subs	r2, r2, r3
   19e04:	08d2      	lsrs	r2, r2, #3
   19e06:	0192      	lsls	r2, r2, #6
   19e08:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("MODEM UPDATE FATAL ERROR %d. Modem failiure", ret);
   19e0c:	f01a fb8b 	bl	34526 <log_1>
   19e10:	e7ef      	b.n	19df2 <handle_bsdlib_init_ret+0x3a>
   19e12:	4a06      	ldr	r2, [pc, #24]	; (19e2c <handle_bsdlib_init_ret+0x74>)
   19e14:	4b06      	ldr	r3, [pc, #24]	; (19e30 <handle_bsdlib_init_ret+0x78>)
   19e16:	4809      	ldr	r0, [pc, #36]	; (19e3c <handle_bsdlib_init_ret+0x84>)
   19e18:	1ad2      	subs	r2, r2, r3
   19e1a:	08d2      	lsrs	r2, r2, #3
   19e1c:	0192      	lsls	r2, r2, #6
   19e1e:	f042 0201 	orr.w	r2, r2, #1
   19e22:	e7f3      	b.n	19e0c <handle_bsdlib_init_ret+0x54>
   19e24:	04400004 	.word	0x04400004
   19e28:	05500001 	.word	0x05500001
   19e2c:	00038324 	.word	0x00038324
   19e30:	0003831c 	.word	0x0003831c
   19e34:	00038f72 	.word	0x00038f72
   19e38:	00038f99 	.word	0x00038f99
   19e3c:	00038fc6 	.word	0x00038fc6

00019e40 <start_execute>:

void start_execute(void)
{
   19e40:	b530      	push	{r4, r5, lr}
   19e42:	b085      	sub	sp, #20
	int err;
	struct onoff_manager *clk_mgr;
	struct onoff_client cli = {};
   19e44:	2210      	movs	r2, #16
   19e46:	2100      	movs	r1, #0
   19e48:	4668      	mov	r0, sp
   19e4a:	f01d fafa 	bl	37442 <memset>
   19e4e:	4c26      	ldr	r4, [pc, #152]	; (19ee8 <start_execute+0xa8>)
   19e50:	4b26      	ldr	r3, [pc, #152]	; (19eec <start_execute+0xac>)

	LOG_INF("Serial LTE Modem");
   19e52:	4827      	ldr	r0, [pc, #156]	; (19ef0 <start_execute+0xb0>)
   19e54:	1ae4      	subs	r4, r4, r3
   19e56:	08e4      	lsrs	r4, r4, #3
   19e58:	01a4      	lsls	r4, r4, #6
   19e5a:	f044 0103 	orr.w	r1, r4, #3
   19e5e:	f01a fb53 	bl	34508 <log_0>

	/* request external XTAL for UART */
	clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   19e62:	2000      	movs	r0, #0
   19e64:	f007 fc02 	bl	2166c <z_nrf_clock_control_get_onoff>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   19e68:	2300      	movs	r3, #0
   19e6a:	9301      	str	r3, [sp, #4]
   19e6c:	9303      	str	r3, [sp, #12]
   19e6e:	2301      	movs	r3, #1
	sys_notify_init_spinwait(&cli.notify);
	err = onoff_request(clk_mgr, &cli);
   19e70:	4669      	mov	r1, sp
   19e72:	9302      	str	r3, [sp, #8]
   19e74:	f019 ff53 	bl	33d1e <onoff_request>
	if (err) {
   19e78:	4601      	mov	r1, r0
   19e7a:	b130      	cbz	r0, 19e8a <start_execute+0x4a>
		LOG_ERR("Clock request failed: %d", err);
   19e7c:	481d      	ldr	r0, [pc, #116]	; (19ef4 <start_execute+0xb4>)
   19e7e:	f044 0201 	orr.w	r2, r4, #1
		return;
	}

	err = slm_at_host_init();
	if (err) {
		LOG_ERR("Failed to init at_host: %d", err);
   19e82:	f01a fb50 	bl	34526 <log_1>

	/* All initializations were successful mark image as working so that we
	 * will not revert upon reboot.
	 */
	boot_write_img_confirmed();
}
   19e86:	b005      	add	sp, #20
   19e88:	bd30      	pop	{r4, r5, pc}
	handle_bsdlib_init_ret();
   19e8a:	f7ff ff95 	bl	19db8 <handle_bsdlib_init_ret>
	err = modem_info_init();
   19e8e:	f00d f8c7 	bl	27020 <modem_info_init>
	if (err) {
   19e92:	4601      	mov	r1, r0
   19e94:	b118      	cbz	r0, 19e9e <start_execute+0x5e>
		LOG_ERR("Modem info could not be established: %d", err);
   19e96:	4818      	ldr	r0, [pc, #96]	; (19ef8 <start_execute+0xb8>)
   19e98:	f044 0201 	orr.w	r2, r4, #1
   19e9c:	e7f1      	b.n	19e82 <start_execute+0x42>
	modem_info_params_init(&modem_param);
   19e9e:	4817      	ldr	r0, [pc, #92]	; (19efc <start_execute+0xbc>)
   19ea0:	f00d f902 	bl	270a8 <modem_info_params_init>
	err = at_params_list_init(&at_param_list, CONFIG_SLM_AT_MAX_PARAM);
   19ea4:	2109      	movs	r1, #9
   19ea6:	4816      	ldr	r0, [pc, #88]	; (19f00 <start_execute+0xc0>)
   19ea8:	f01c fc06 	bl	366b8 <at_params_list_init>
	if (err) {
   19eac:	4601      	mov	r1, r0
   19eae:	b118      	cbz	r0, 19eb8 <start_execute+0x78>
		LOG_ERR("Failed to init AT Parser: %d", err);
   19eb0:	4814      	ldr	r0, [pc, #80]	; (19f04 <start_execute+0xc4>)
   19eb2:	f044 0201 	orr.w	r2, r4, #1
   19eb6:	e7e4      	b.n	19e82 <start_execute+0x42>
	err = slm_at_host_init();
   19eb8:	f000 f9e2 	bl	1a280 <slm_at_host_init>
	if (err) {
   19ebc:	4605      	mov	r5, r0
   19ebe:	b120      	cbz	r0, 19eca <start_execute+0x8a>
		LOG_ERR("Failed to init at_host: %d", err);
   19ec0:	4601      	mov	r1, r0
   19ec2:	f044 0201 	orr.w	r2, r4, #1
   19ec6:	4810      	ldr	r0, [pc, #64]	; (19f08 <start_execute+0xc8>)
   19ec8:	e7db      	b.n	19e82 <start_execute+0x42>
	k_work_q_start(&slm_work_q, slm_wq_stack_area,
   19eca:	230e      	movs	r3, #14
   19ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19ed0:	490e      	ldr	r1, [pc, #56]	; (19f0c <start_execute+0xcc>)
   19ed2:	480f      	ldr	r0, [pc, #60]	; (19f10 <start_execute+0xd0>)
   19ed4:	f018 fb86 	bl	325e4 <k_work_q_start>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   19ed8:	4b0e      	ldr	r3, [pc, #56]	; (19f14 <start_execute+0xd4>)
   19eda:	4a0f      	ldr	r2, [pc, #60]	; (19f18 <start_execute+0xd8>)
   19edc:	601d      	str	r5, [r3, #0]
   19ede:	e9c3 2501 	strd	r2, r5, [r3, #4]
	boot_write_img_confirmed();
   19ee2:	f01a fea4 	bl	34c2e <boot_write_img_confirmed>
   19ee6:	e7ce      	b.n	19e86 <start_execute+0x46>
   19ee8:	00038324 	.word	0x00038324
   19eec:	0003831c 	.word	0x0003831c
   19ef0:	00038ff2 	.word	0x00038ff2
   19ef4:	00039003 	.word	0x00039003
   19ef8:	0003901c 	.word	0x0003901c
   19efc:	20020900 	.word	0x20020900
   19f00:	20023430 	.word	0x20023430
   19f04:	00039044 	.word	0x00039044
   19f08:	00038eca 	.word	0x00038eca
   19f0c:	2002cd18 	.word	0x2002cd18
   19f10:	200211e8 	.word	0x200211e8
   19f14:	20023438 	.word	0x20023438
   19f18:	00019c61 	.word	0x00019c61

00019f1c <slm_util_cmd_casecmp>:

/**
 * @brief Compare name of AT command ignoring case
 */
bool slm_util_cmd_casecmp(const char *cmd, const char *slm_cmd)
{
   19f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19f1e:	4606      	mov	r6, r0
	int i;
	int slm_cmd_len = strlen(slm_cmd);
   19f20:	4608      	mov	r0, r1
{
   19f22:	460f      	mov	r7, r1
	int slm_cmd_len = strlen(slm_cmd);
   19f24:	f7ff f8a4 	bl	19070 <strlen>
   19f28:	4604      	mov	r4, r0

	if (strlen(cmd) < slm_cmd_len) {
   19f2a:	4630      	mov	r0, r6
   19f2c:	f7ff f8a0 	bl	19070 <strlen>
   19f30:	4284      	cmp	r4, r0
   19f32:	d823      	bhi.n	19f7c <slm_util_cmd_casecmp+0x60>
		return false;
	}

	for (i = 0; i < slm_cmd_len; i++) {
   19f34:	2500      	movs	r5, #0
		if (toupper((int)*(cmd + i)) != toupper((int)*(slm_cmd + i))) {
   19f36:	4813      	ldr	r0, [pc, #76]	; (19f84 <slm_util_cmd_casecmp+0x68>)
	for (i = 0; i < slm_cmd_len; i++) {
   19f38:	42a5      	cmp	r5, r4
   19f3a:	db0d      	blt.n	19f58 <slm_util_cmd_casecmp+0x3c>
			return false;
		}
	}
#if defined(CONFIG_SLM_CR_LF_TERMINATION)
	if (strlen(cmd) > (slm_cmd_len + 2)) {
   19f3c:	4630      	mov	r0, r6
   19f3e:	f7ff f897 	bl	19070 <strlen>
   19f42:	3402      	adds	r4, #2
   19f44:	42a0      	cmp	r0, r4
   19f46:	d91b      	bls.n	19f80 <slm_util_cmd_casecmp+0x64>
#else
	if (strlen(cmd) > (slm_cmd_len + 1)) {
#endif
		char ch = *(cmd + i);
		/* With parameter, SET TEST, "="; READ, "?" */
		return ((ch == '=') || (ch == '?'));
   19f48:	5d70      	ldrb	r0, [r6, r5]
   19f4a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
   19f4e:	f1a0 033d 	sub.w	r3, r0, #61	; 0x3d
   19f52:	4258      	negs	r0, r3
   19f54:	4158      	adcs	r0, r3
	}

	return true;
}
   19f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (toupper((int)*(cmd + i)) != toupper((int)*(slm_cmd + i))) {
   19f58:	5d72      	ldrb	r2, [r6, r5]
   19f5a:	5c13      	ldrb	r3, [r2, r0]
   19f5c:	f003 0303 	and.w	r3, r3, #3
   19f60:	2b02      	cmp	r3, #2
   19f62:	5d7b      	ldrb	r3, [r7, r5]
   19f64:	bf08      	it	eq
   19f66:	3a20      	subeq	r2, #32
   19f68:	5cc1      	ldrb	r1, [r0, r3]
   19f6a:	f001 0103 	and.w	r1, r1, #3
   19f6e:	2902      	cmp	r1, #2
   19f70:	bf08      	it	eq
   19f72:	3b20      	subeq	r3, #32
   19f74:	429a      	cmp	r2, r3
   19f76:	d101      	bne.n	19f7c <slm_util_cmd_casecmp+0x60>
	for (i = 0; i < slm_cmd_len; i++) {
   19f78:	3501      	adds	r5, #1
   19f7a:	e7dd      	b.n	19f38 <slm_util_cmd_casecmp+0x1c>
		return false;
   19f7c:	2000      	movs	r0, #0
   19f7e:	e7ea      	b.n	19f56 <slm_util_cmd_casecmp+0x3a>
	return true;
   19f80:	2001      	movs	r0, #1
   19f82:	e7e8      	b.n	19f56 <slm_util_cmd_casecmp+0x3a>
   19f84:	0003ca84 	.word	0x0003ca84

00019f88 <slm_util_htoa>:
/**
 * @brief Encode hex array to hexdecimal string (ASCII text)
 */
int slm_util_htoa(const uint8_t *hex, uint16_t hex_len,
		char *ascii, uint16_t ascii_len)
{
   19f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19f8c:	460d      	mov	r5, r1
   19f8e:	4690      	mov	r8, r2
	if (hex == NULL || ascii == NULL) {
   19f90:	4607      	mov	r7, r0
   19f92:	b1a8      	cbz	r0, 19fc0 <slm_util_htoa+0x38>
   19f94:	b1a2      	cbz	r2, 19fc0 <slm_util_htoa+0x38>
		return -EINVAL;
	}
	if (ascii_len < (hex_len * 2)) {
   19f96:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
   19f9a:	ea4f 0641 	mov.w	r6, r1, lsl #1
   19f9e:	db0f      	blt.n	19fc0 <slm_util_htoa+0x38>
		return -EINVAL;
	}

	for (int i = 0; i < hex_len; i++) {
   19fa0:	2400      	movs	r4, #0
		sprintf(ascii + (i * 2), "%02X", *(hex + i));
   19fa2:	f8df 9024 	ldr.w	r9, [pc, #36]	; 19fc8 <slm_util_htoa+0x40>
	for (int i = 0; i < hex_len; i++) {
   19fa6:	42a5      	cmp	r5, r4
   19fa8:	dc02      	bgt.n	19fb0 <slm_util_htoa+0x28>
	}

	return (hex_len * 2);
}
   19faa:	4630      	mov	r0, r6
   19fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sprintf(ascii + (i * 2), "%02X", *(hex + i));
   19fb0:	5d3a      	ldrb	r2, [r7, r4]
   19fb2:	eb08 0044 	add.w	r0, r8, r4, lsl #1
   19fb6:	4649      	mov	r1, r9
   19fb8:	f019 f98e 	bl	332d8 <siprintf>
	for (int i = 0; i < hex_len; i++) {
   19fbc:	3401      	adds	r4, #1
   19fbe:	e7f2      	b.n	19fa6 <slm_util_htoa+0x1e>
		return -EINVAL;
   19fc0:	f06f 0615 	mvn.w	r6, #21
   19fc4:	e7f1      	b.n	19faa <slm_util_htoa+0x22>
   19fc6:	bf00      	nop
   19fc8:	00039065 	.word	0x00039065

00019fcc <uart_callback>:
	cmd_len = 0;
}

static void uart_callback(const struct device *dev, struct uart_event *evt,
			  void *user_data)
{
   19fcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fd0:	780b      	ldrb	r3, [r1, #0]
   19fd2:	460e      	mov	r6, r1
   19fd4:	2b06      	cmp	r3, #6
   19fd6:	d837      	bhi.n	1a048 <uart_callback+0x7c>
   19fd8:	e8df f013 	tbh	[pc, r3, lsl #1]
   19fdc:	00100007 	.word	0x00100007
   19fe0:	00b40023 	.word	0x00b40023
   19fe4:	003600d0 	.word	0x003600d0
   19fe8:	00d4      	.short	0x00d4

	ARG_UNUSED(user_data);

	switch (evt->type) {
	case UART_TX_DONE:
		k_free(uart_tx_buf);
   19fea:	4b6b      	ldr	r3, [pc, #428]	; (1a198 <uart_callback+0x1cc>)
   19fec:	6818      	ldr	r0, [r3, #0]
   19fee:	f01d f9cb 	bl	37388 <k_free>
		LOG_DBG("RX_DISABLED");
		break;
	default:
		break;
	}
}
   19ff2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   19ff6:	4869      	ldr	r0, [pc, #420]	; (1a19c <uart_callback+0x1d0>)
   19ff8:	f018 b9a4 	b.w	32344 <z_impl_k_sem_give>
		k_free(uart_tx_buf);
   19ffc:	4b66      	ldr	r3, [pc, #408]	; (1a198 <uart_callback+0x1cc>)
   19ffe:	6818      	ldr	r0, [r3, #0]
   1a000:	f01d f9c2 	bl	37388 <k_free>
   1a004:	4865      	ldr	r0, [pc, #404]	; (1a19c <uart_callback+0x1d0>)
   1a006:	f018 f99d 	bl	32344 <z_impl_k_sem_give>
   1a00a:	4b65      	ldr	r3, [pc, #404]	; (1a1a0 <uart_callback+0x1d4>)
   1a00c:	4965      	ldr	r1, [pc, #404]	; (1a1a4 <uart_callback+0x1d8>)
		LOG_INF("TX_ABORTED");
   1a00e:	4866      	ldr	r0, [pc, #408]	; (1a1a8 <uart_callback+0x1dc>)
   1a010:	1ac9      	subs	r1, r1, r3
   1a012:	08c9      	lsrs	r1, r1, #3
   1a014:	0189      	lsls	r1, r1, #6
   1a016:	f041 0103 	orr.w	r1, r1, #3
}
   1a01a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LOG_INF("TX_ABORTED");
   1a01e:	f01a ba73 	b.w	34508 <log_0>
   1a022:	4b5f      	ldr	r3, [pc, #380]	; (1a1a0 <uart_callback+0x1d4>)
   1a024:	4f5f      	ldr	r7, [pc, #380]	; (1a1a4 <uart_callback+0x1d8>)
	cmd_len += 1;
   1a026:	4c61      	ldr	r4, [pc, #388]	; (1a1ac <uart_callback+0x1e0>)
   1a028:	1aff      	subs	r7, r7, r3
		for (int i = pos; i < (pos + evt->data.rx.len); i++) {
   1a02a:	4b61      	ldr	r3, [pc, #388]	; (1a1b0 <uart_callback+0x1e4>)
	if (inside_quotes) {
   1a02c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 1a1e4 <uart_callback+0x218>
   1a030:	4698      	mov	r8, r3
   1a032:	f8b3 9000 	ldrh.w	r9, [r3]
   1a036:	08ff      	lsrs	r7, r7, #3
		for (int i = pos; i < (pos + evt->data.rx.len); i++) {
   1a038:	f8b8 3000 	ldrh.w	r3, [r8]
   1a03c:	68f2      	ldr	r2, [r6, #12]
   1a03e:	4413      	add	r3, r2
   1a040:	454b      	cmp	r3, r9
   1a042:	d803      	bhi.n	1a04c <uart_callback+0x80>
		pos += evt->data.rx.len;
   1a044:	f8a8 3000 	strh.w	r3, [r8]
}
   1a048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uart_rx_handler(evt->data.rx.buf[i]);
   1a04c:	6873      	ldr	r3, [r6, #4]
	cmd_len += 1;
   1a04e:	6822      	ldr	r2, [r4, #0]
			uart_rx_handler(evt->data.rx.buf[i]);
   1a050:	f813 3009 	ldrb.w	r3, [r3, r9]
	cmd_len += 1;
   1a054:	1c55      	adds	r5, r2, #1
	switch (character) {
   1a056:	2b22      	cmp	r3, #34	; 0x22
	cmd_len += 1;
   1a058:	6025      	str	r5, [r4, #0]
	switch (character) {
   1a05a:	d018      	beq.n	1a08e <uart_callback+0xc2>
   1a05c:	2b7f      	cmp	r3, #127	; 0x7f
   1a05e:	d001      	beq.n	1a064 <uart_callback+0x98>
   1a060:	2b08      	cmp	r3, #8
   1a062:	d11a      	bne.n	1a09a <uart_callback+0xce>
		pos = pos ? pos - 1 : 0;
   1a064:	b102      	cbz	r2, 1a068 <uart_callback+0x9c>
   1a066:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   1a068:	2d02      	cmp	r5, #2
   1a06a:	bf38      	it	cc
   1a06c:	2502      	movcc	r5, #2
		at_buf[pos] = 0;
   1a06e:	2000      	movs	r0, #0
   1a070:	4950      	ldr	r1, [pc, #320]	; (1a1b4 <uart_callback+0x1e8>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   1a072:	3d02      	subs	r5, #2
		at_buf[pos] = 0;
   1a074:	5488      	strb	r0, [r1, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   1a076:	6025      	str	r5, [r4, #0]
	if (inside_quotes) {
   1a078:	f89a 1000 	ldrb.w	r1, [sl]
   1a07c:	b9d1      	cbnz	r1, 1a0b4 <uart_callback+0xe8>
	switch (term_mode) {
   1a07e:	494e      	ldr	r1, [pc, #312]	; (1a1b8 <uart_callback+0x1ec>)
   1a080:	7809      	ldrb	r1, [r1, #0]
   1a082:	2903      	cmp	r1, #3
   1a084:	d857      	bhi.n	1a136 <uart_callback+0x16a>
   1a086:	e8df f001 	tbb	[pc, r1]
   1a08a:	252a      	.short	0x252a
   1a08c:	4b43      	.short	0x4b43
		inside_quotes = !inside_quotes;
   1a08e:	f89a 1000 	ldrb.w	r1, [sl]
   1a092:	f081 0101 	eor.w	r1, r1, #1
   1a096:	f88a 1000 	strb.w	r1, [sl]
		if (cmd_len > AT_MAX_CMD_LEN) {
   1a09a:	f640 2b8c 	movw	fp, #2700	; 0xa8c
   1a09e:	455d      	cmp	r5, fp
   1a0a0:	d90b      	bls.n	1a0ba <uart_callback+0xee>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   1a0a2:	01ba      	lsls	r2, r7, #6
   1a0a4:	4619      	mov	r1, r3
   1a0a6:	4845      	ldr	r0, [pc, #276]	; (1a1bc <uart_callback+0x1f0>)
   1a0a8:	f042 0201 	orr.w	r2, r2, #1
   1a0ac:	f01a fa3b 	bl	34526 <log_1>
			cmd_len = AT_MAX_CMD_LEN;
   1a0b0:	f8c4 b000 	str.w	fp, [r4]
		for (int i = pos; i < (pos + evt->data.rx.len); i++) {
   1a0b4:	f109 0901 	add.w	r9, r9, #1
   1a0b8:	e7be      	b.n	1a038 <uart_callback+0x6c>
		} else if (cmd_len < 1) {
   1a0ba:	b945      	cbnz	r5, 1a0ce <uart_callback+0x102>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
   1a0bc:	01ba      	lsls	r2, r7, #6
   1a0be:	4629      	mov	r1, r5
   1a0c0:	483f      	ldr	r0, [pc, #252]	; (1a1c0 <uart_callback+0x1f4>)
   1a0c2:	f042 0201 	orr.w	r2, r2, #1
   1a0c6:	f01a fa2e 	bl	34526 <log_1>
			cmd_len = 0;
   1a0ca:	6025      	str	r5, [r4, #0]
			return;
   1a0cc:	e7f2      	b.n	1a0b4 <uart_callback+0xe8>
		at_buf[pos] = character;
   1a0ce:	4939      	ldr	r1, [pc, #228]	; (1a1b4 <uart_callback+0x1e8>)
   1a0d0:	548b      	strb	r3, [r1, r2]
		break;
   1a0d2:	e7d1      	b.n	1a078 <uart_callback+0xac>
		if (character == termination[term_mode]) {
   1a0d4:	2b0d      	cmp	r3, #13
   1a0d6:	d1ed      	bne.n	1a0b4 <uart_callback+0xe8>
			cmd_len--;
   1a0d8:	6823      	ldr	r3, [r4, #0]
   1a0da:	3b01      	subs	r3, #1
			cmd_len -= 2;
   1a0dc:	6023      	str	r3, [r4, #0]
	uart_rx_disable(uart_dev);
   1a0de:	4b39      	ldr	r3, [pc, #228]	; (1a1c4 <uart_callback+0x1f8>)
   1a0e0:	6818      	ldr	r0, [r3, #0]
   1a0e2:	f019 fd02 	bl	33aea <uart_rx_disable>
   1a0e6:	4938      	ldr	r1, [pc, #224]	; (1a1c8 <uart_callback+0x1fc>)
   1a0e8:	e8d1 3fef 	ldaex	r3, [r1]
   1a0ec:	f043 0201 	orr.w	r2, r3, #1
   1a0f0:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1a0f4:	2800      	cmp	r0, #0
   1a0f6:	d1f7      	bne.n	1a0e8 <uart_callback+0x11c>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1a0f8:	07db      	lsls	r3, r3, #31
   1a0fa:	d403      	bmi.n	1a104 <uart_callback+0x138>
		k_queue_append(&work_q->queue, work);
   1a0fc:	4833      	ldr	r0, [pc, #204]	; (1a1cc <uart_callback+0x200>)
   1a0fe:	3908      	subs	r1, #8
   1a100:	f01c fd95 	bl	36c2e <k_queue_append>
	at_buf_len = cmd_len;
   1a104:	6822      	ldr	r2, [r4, #0]
   1a106:	4b32      	ldr	r3, [pc, #200]	; (1a1d0 <uart_callback+0x204>)
   1a108:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
   1a10a:	2300      	movs	r3, #0
   1a10c:	6023      	str	r3, [r4, #0]
   1a10e:	e7d1      	b.n	1a0b4 <uart_callback+0xe8>
		if ((at_buf[pos - 1]) &&
   1a110:	4928      	ldr	r1, [pc, #160]	; (1a1b4 <uart_callback+0x1e8>)
   1a112:	440a      	add	r2, r1
   1a114:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1a118:	2a00      	cmp	r2, #0
   1a11a:	d0cb      	beq.n	1a0b4 <uart_callback+0xe8>
   1a11c:	2b0a      	cmp	r3, #10
   1a11e:	e7da      	b.n	1a0d6 <uart_callback+0x10a>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
   1a120:	4924      	ldr	r1, [pc, #144]	; (1a1b4 <uart_callback+0x1e8>)
   1a122:	440a      	add	r2, r1
   1a124:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1a128:	2a0d      	cmp	r2, #13
   1a12a:	d1c3      	bne.n	1a0b4 <uart_callback+0xe8>
   1a12c:	2b0a      	cmp	r3, #10
   1a12e:	d1c1      	bne.n	1a0b4 <uart_callback+0xe8>
			cmd_len -= 2;
   1a130:	6823      	ldr	r3, [r4, #0]
   1a132:	3b02      	subs	r3, #2
   1a134:	e7d2      	b.n	1a0dc <uart_callback+0x110>
		LOG_ERR("Invalid termination mode: %d", term_mode);
   1a136:	01ba      	lsls	r2, r7, #6
   1a138:	4826      	ldr	r0, [pc, #152]	; (1a1d4 <uart_callback+0x208>)
   1a13a:	f042 0201 	orr.w	r2, r2, #1
   1a13e:	f01a f9f2 	bl	34526 <log_1>
   1a142:	e7b7      	b.n	1a0b4 <uart_callback+0xe8>
		pos = 0;
   1a144:	2200      	movs	r2, #0
   1a146:	4b1a      	ldr	r3, [pc, #104]	; (1a1b0 <uart_callback+0x1e4>)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
   1a148:	4923      	ldr	r1, [pc, #140]	; (1a1d8 <uart_callback+0x20c>)
   1a14a:	801a      	strh	r2, [r3, #0]
		err = uart_rx_buf_rsp(uart_dev, next_buf,
   1a14c:	4b1d      	ldr	r3, [pc, #116]	; (1a1c4 <uart_callback+0x1f8>)
   1a14e:	6809      	ldr	r1, [r1, #0]
   1a150:	6818      	ldr	r0, [r3, #0]
   1a152:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a156:	6883      	ldr	r3, [r0, #8]
   1a158:	691b      	ldr	r3, [r3, #16]
   1a15a:	4798      	blx	r3
		if (err) {
   1a15c:	4601      	mov	r1, r0
   1a15e:	2800      	cmp	r0, #0
   1a160:	f43f af72 	beq.w	1a048 <uart_callback+0x7c>
   1a164:	4a0f      	ldr	r2, [pc, #60]	; (1a1a4 <uart_callback+0x1d8>)
   1a166:	4b0e      	ldr	r3, [pc, #56]	; (1a1a0 <uart_callback+0x1d4>)
			LOG_WRN("UART RX buf rsp: %d", err);
   1a168:	481c      	ldr	r0, [pc, #112]	; (1a1dc <uart_callback+0x210>)
   1a16a:	1ad2      	subs	r2, r2, r3
   1a16c:	08d2      	lsrs	r2, r2, #3
   1a16e:	0192      	lsls	r2, r2, #6
   1a170:	f042 0202 	orr.w	r2, r2, #2
}
   1a174:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LOG_WRN("RX_STOPPED (%d)", evt->data.rx_stop.reason);
   1a178:	f01a b9d5 	b.w	34526 <log_1>
		next_buf = evt->data.rx_buf.buf;
   1a17c:	684a      	ldr	r2, [r1, #4]
   1a17e:	4b16      	ldr	r3, [pc, #88]	; (1a1d8 <uart_callback+0x20c>)
   1a180:	601a      	str	r2, [r3, #0]
		break;
   1a182:	e761      	b.n	1a048 <uart_callback+0x7c>
   1a184:	4a07      	ldr	r2, [pc, #28]	; (1a1a4 <uart_callback+0x1d8>)
   1a186:	4b06      	ldr	r3, [pc, #24]	; (1a1a0 <uart_callback+0x1d4>)
		LOG_WRN("RX_STOPPED (%d)", evt->data.rx_stop.reason);
   1a188:	7909      	ldrb	r1, [r1, #4]
   1a18a:	1ad2      	subs	r2, r2, r3
   1a18c:	08d2      	lsrs	r2, r2, #3
   1a18e:	0192      	lsls	r2, r2, #6
   1a190:	4813      	ldr	r0, [pc, #76]	; (1a1e0 <uart_callback+0x214>)
   1a192:	f042 0202 	orr.w	r2, r2, #2
   1a196:	e7ed      	b.n	1a174 <uart_callback+0x1a8>
   1a198:	2002346c 	.word	0x2002346c
   1a19c:	200208c4 	.word	0x200208c4
   1a1a0:	0003831c 	.word	0x0003831c
   1a1a4:	00038334 	.word	0x00038334
   1a1a8:	0003906a 	.word	0x0003906a
   1a1ac:	20023458 	.word	0x20023458
   1a1b0:	20028924 	.word	0x20028924
   1a1b4:	200293dc 	.word	0x200293dc
   1a1b8:	2002a8f5 	.word	0x2002a8f5
   1a1bc:	00039075 	.word	0x00039075
   1a1c0:	00039095 	.word	0x00039095
   1a1c4:	20023468 	.word	0x20023468
   1a1c8:	20023464 	.word	0x20023464
   1a1cc:	20023348 	.word	0x20023348
   1a1d0:	20023454 	.word	0x20023454
   1a1d4:	000390b3 	.word	0x000390b3
   1a1d8:	200200c0 	.word	0x200200c0
   1a1dc:	000390d0 	.word	0x000390d0
   1a1e0:	000390e4 	.word	0x000390e4
   1a1e4:	2002a8f4 	.word	0x2002a8f4

0001a1e8 <rsp_send>:
{
   1a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1ea:	4607      	mov	r7, r0
   1a1ec:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   1a1ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a1f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a1f6:	481b      	ldr	r0, [pc, #108]	; (1a264 <rsp_send+0x7c>)
   1a1f8:	f018 f8ca 	bl	32390 <z_impl_k_sem_take>
	uart_tx_buf = k_malloc(len);
   1a1fc:	4628      	mov	r0, r5
   1a1fe:	f018 fcbb 	bl	32b78 <k_malloc>
   1a202:	4e19      	ldr	r6, [pc, #100]	; (1a268 <rsp_send+0x80>)
   1a204:	4604      	mov	r4, r0
   1a206:	6030      	str	r0, [r6, #0]
	if (uart_tx_buf == NULL) {
   1a208:	b970      	cbnz	r0, 1a228 <rsp_send+0x40>
   1a20a:	4918      	ldr	r1, [pc, #96]	; (1a26c <rsp_send+0x84>)
   1a20c:	4b18      	ldr	r3, [pc, #96]	; (1a270 <rsp_send+0x88>)
		LOG_WRN("No ram buffer");
   1a20e:	4819      	ldr	r0, [pc, #100]	; (1a274 <rsp_send+0x8c>)
   1a210:	1ac9      	subs	r1, r1, r3
   1a212:	08c9      	lsrs	r1, r1, #3
   1a214:	0189      	lsls	r1, r1, #6
   1a216:	f041 0102 	orr.w	r1, r1, #2
   1a21a:	f01a f975 	bl	34508 <log_0>
}
   1a21e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1a222:	4810      	ldr	r0, [pc, #64]	; (1a264 <rsp_send+0x7c>)
   1a224:	f018 b88e 	b.w	32344 <z_impl_k_sem_give>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a228:	462a      	mov	r2, r5
   1a22a:	4639      	mov	r1, r7
   1a22c:	f01d f8e9 	bl	37402 <memcpy>
	ret = uart_tx(uart_dev, uart_tx_buf, len, SYS_FOREVER_MS);
   1a230:	4b11      	ldr	r3, [pc, #68]	; (1a278 <rsp_send+0x90>)
   1a232:	6818      	ldr	r0, [r3, #0]
	return api->tx(dev, buf, len, timeout);
   1a234:	6883      	ldr	r3, [r0, #8]
   1a236:	4621      	mov	r1, r4
   1a238:	685f      	ldr	r7, [r3, #4]
   1a23a:	462a      	mov	r2, r5
   1a23c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a240:	47b8      	blx	r7
	if (ret) {
   1a242:	4601      	mov	r1, r0
   1a244:	b168      	cbz	r0, 1a262 <rsp_send+0x7a>
   1a246:	4b0a      	ldr	r3, [pc, #40]	; (1a270 <rsp_send+0x88>)
   1a248:	4a08      	ldr	r2, [pc, #32]	; (1a26c <rsp_send+0x84>)
		LOG_WRN("uart_tx failed: %d", ret);
   1a24a:	480c      	ldr	r0, [pc, #48]	; (1a27c <rsp_send+0x94>)
   1a24c:	1ad2      	subs	r2, r2, r3
   1a24e:	08d2      	lsrs	r2, r2, #3
   1a250:	0192      	lsls	r2, r2, #6
   1a252:	f042 0202 	orr.w	r2, r2, #2
   1a256:	f01a f966 	bl	34526 <log_1>
		k_free(uart_tx_buf);
   1a25a:	6830      	ldr	r0, [r6, #0]
   1a25c:	f01d f894 	bl	37388 <k_free>
   1a260:	e7dd      	b.n	1a21e <rsp_send+0x36>
}
   1a262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a264:	200208c4 	.word	0x200208c4
   1a268:	2002346c 	.word	0x2002346c
   1a26c:	00038334 	.word	0x00038334
   1a270:	0003831c 	.word	0x0003831c
   1a274:	000390f4 	.word	0x000390f4
   1a278:	20023468 	.word	0x20023468
   1a27c:	00039102 	.word	0x00039102

0001a280 <slm_at_host_init>:

int slm_at_host_init(void)
{
   1a280:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   1a284:	4872      	ldr	r0, [pc, #456]	; (1a450 <slm_at_host_init+0x1d0>)
   1a286:	f017 f8e3 	bl	31450 <z_impl_device_get_binding>

	/* Initialize the UART module */
#if defined(CONFIG_SLM_CONNECT_UART_0)
	uart_dev = device_get_binding(DT_LABEL(DT_NODELABEL(uart0)));
#elif defined(CONFIG_SLM_CONNECT_UART_2)
	uart_dev = device_get_binding(DT_LABEL(DT_NODELABEL(uart2)));
   1a28a:	4c72      	ldr	r4, [pc, #456]	; (1a454 <slm_at_host_init+0x1d4>)
   1a28c:	6020      	str	r0, [r4, #0]
#else
	LOG_ERR("Unsupported UART instance");
	return -EINVAL;
#endif
	if (uart_dev == NULL) {
   1a28e:	b970      	cbnz	r0, 1a2ae <slm_at_host_init+0x2e>
   1a290:	4b71      	ldr	r3, [pc, #452]	; (1a458 <slm_at_host_init+0x1d8>)
   1a292:	4972      	ldr	r1, [pc, #456]	; (1a45c <slm_at_host_init+0x1dc>)
		LOG_ERR("Cannot bind UART device\n");
   1a294:	4872      	ldr	r0, [pc, #456]	; (1a460 <slm_at_host_init+0x1e0>)
   1a296:	1ac9      	subs	r1, r1, r3
   1a298:	08c9      	lsrs	r1, r1, #3
   1a29a:	0189      	lsls	r1, r1, #6
   1a29c:	f041 0101 	orr.w	r1, r1, #1
   1a2a0:	f01a f932 	bl	34508 <log_0>
		return -EINVAL;
   1a2a4:	f06f 0415 	mvn.w	r4, #21
	k_sem_give(&tx_done);
	rsp_send(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);

	LOG_DBG("at_host init done");
	return err;
}
   1a2a8:	4620      	mov	r0, r4
   1a2aa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	return z_impl_k_uptime_ticks();
   1a2ae:	f01c fea8 	bl	37002 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1a2b2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1a2b6:	460b      	mov	r3, r1
   1a2b8:	fba0 0106 	umull	r0, r1, r0, r6
   1a2bc:	fb06 1103 	mla	r1, r6, r3, r1
   1a2c0:	0bc7      	lsrs	r7, r0, #15
   1a2c2:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
		err = uart_err_check(uart_dev);
   1a2c6:	6820      	ldr	r0, [r4, #0]
static inline int z_impl_uart_err_check(const struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->err_check != NULL) {
   1a2c8:	6883      	ldr	r3, [r0, #8]
   1a2ca:	6a1b      	ldr	r3, [r3, #32]
   1a2cc:	2b00      	cmp	r3, #0
   1a2ce:	f000 80a8 	beq.w	1a422 <slm_at_host_init+0x1a2>
		return api->err_check(dev);
   1a2d2:	4798      	blx	r3
		if (err) {
   1a2d4:	4605      	mov	r5, r0
   1a2d6:	2800      	cmp	r0, #0
   1a2d8:	f000 80a3 	beq.w	1a422 <slm_at_host_init+0x1a2>
   1a2dc:	f01c fe91 	bl	37002 <z_impl_k_uptime_ticks>
   1a2e0:	fba0 bc06 	umull	fp, ip, r0, r6
   1a2e4:	fb06 cc01 	mla	ip, r6, r1, ip
   1a2e8:	ea4f 32db 	mov.w	r2, fp, lsr #15
   1a2ec:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
			if (k_uptime_get_32() - start_time > 500) {
   1a2f0:	1bd2      	subs	r2, r2, r7
   1a2f2:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1a2f6:	d9e6      	bls.n	1a2c6 <slm_at_host_init+0x46>
   1a2f8:	4b57      	ldr	r3, [pc, #348]	; (1a458 <slm_at_host_init+0x1d8>)
   1a2fa:	4a58      	ldr	r2, [pc, #352]	; (1a45c <slm_at_host_init+0x1dc>)
				LOG_ERR("UART check failed: %d. "
   1a2fc:	4629      	mov	r1, r5
   1a2fe:	1ad2      	subs	r2, r2, r3
   1a300:	08d2      	lsrs	r2, r2, #3
   1a302:	0192      	lsls	r2, r2, #6
   1a304:	4857      	ldr	r0, [pc, #348]	; (1a464 <slm_at_host_init+0x1e4>)
   1a306:	f042 0201 	orr.w	r2, r2, #1
   1a30a:	f01a f90c 	bl	34526 <log_1>
				return -EIO;
   1a30e:	f06f 0404 	mvn.w	r4, #4
   1a312:	e7c9      	b.n	1a2a8 <slm_at_host_init+0x28>
	device_set_power_state(uart_dev, DEVICE_PM_ACTIVE_STATE,
   1a314:	2101      	movs	r1, #1
   1a316:	6820      	ldr	r0, [r4, #0]
   1a318:	f019 fbea 	bl	33af0 <device_set_power_state.constprop.0>
	term_mode = CONFIG_SLM_AT_HOST_TERMINATION;
   1a31c:	2203      	movs	r2, #3
   1a31e:	4b52      	ldr	r3, [pc, #328]	; (1a468 <slm_at_host_init+0x1e8>)
	err = uart_rx_enable(uart_dev, uart_rx_buf[0],
   1a320:	6820      	ldr	r0, [r4, #0]
	term_mode = CONFIG_SLM_AT_HOST_TERMINATION;
   1a322:	701a      	strb	r2, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
   1a324:	6883      	ldr	r3, [r0, #8]
   1a326:	4951      	ldr	r1, [pc, #324]	; (1a46c <slm_at_host_init+0x1ec>)
   1a328:	68dc      	ldr	r4, [r3, #12]
   1a32a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a32e:	2301      	movs	r3, #1
   1a330:	47a0      	blx	r4
	if (err) {
   1a332:	4601      	mov	r1, r0
   1a334:	b140      	cbz	r0, 1a348 <slm_at_host_init+0xc8>
   1a336:	4a49      	ldr	r2, [pc, #292]	; (1a45c <slm_at_host_init+0x1dc>)
   1a338:	4b47      	ldr	r3, [pc, #284]	; (1a458 <slm_at_host_init+0x1d8>)
		LOG_ERR("Cannot enable rx: %d", err);
   1a33a:	484d      	ldr	r0, [pc, #308]	; (1a470 <slm_at_host_init+0x1f0>)
   1a33c:	1ad2      	subs	r2, r2, r3
   1a33e:	08d2      	lsrs	r2, r2, #3
   1a340:	0192      	lsls	r2, r2, #6
   1a342:	f042 0201 	orr.w	r2, r2, #1
   1a346:	e07e      	b.n	1a446 <slm_at_host_init+0x1c6>
	err = at_notif_register_handler(NULL, response_handler);
   1a348:	494a      	ldr	r1, [pc, #296]	; (1a474 <slm_at_host_init+0x1f4>)
   1a34a:	f00c fa47 	bl	267dc <at_notif_register_handler>
	if (err) {
   1a34e:	4604      	mov	r4, r0
   1a350:	b158      	cbz	r0, 1a36a <slm_at_host_init+0xea>
   1a352:	4b41      	ldr	r3, [pc, #260]	; (1a458 <slm_at_host_init+0x1d8>)
   1a354:	4a41      	ldr	r2, [pc, #260]	; (1a45c <slm_at_host_init+0x1dc>)
		LOG_ERR("Can't register handler err=%d", err);
   1a356:	4601      	mov	r1, r0
   1a358:	1ad2      	subs	r2, r2, r3
   1a35a:	08d2      	lsrs	r2, r2, #3
   1a35c:	0192      	lsls	r2, r2, #6
   1a35e:	4846      	ldr	r0, [pc, #280]	; (1a478 <slm_at_host_init+0x1f8>)
   1a360:	f042 0201 	orr.w	r2, r2, #1
   1a364:	f01a f8df 	bl	34526 <log_1>
		return err;
   1a368:	e79e      	b.n	1a2a8 <slm_at_host_init+0x28>
	err = slm_at_tcp_proxy_init();
   1a36a:	f001 ff61 	bl	1c230 <slm_at_tcp_proxy_init>
	if (err) {
   1a36e:	4601      	mov	r1, r0
   1a370:	b140      	cbz	r0, 1a384 <slm_at_host_init+0x104>
   1a372:	4a3a      	ldr	r2, [pc, #232]	; (1a45c <slm_at_host_init+0x1dc>)
   1a374:	4b38      	ldr	r3, [pc, #224]	; (1a458 <slm_at_host_init+0x1d8>)
		LOG_ERR("TCP Server could not be initialized: %d", err);
   1a376:	4841      	ldr	r0, [pc, #260]	; (1a47c <slm_at_host_init+0x1fc>)
   1a378:	1ad2      	subs	r2, r2, r3
   1a37a:	08d2      	lsrs	r2, r2, #3
   1a37c:	0192      	lsls	r2, r2, #6
   1a37e:	f042 0201 	orr.w	r2, r2, #1
   1a382:	e060      	b.n	1a446 <slm_at_host_init+0x1c6>
	err = slm_at_udp_proxy_init();
   1a384:	f002 ff0c 	bl	1d1a0 <slm_at_udp_proxy_init>
	if (err) {
   1a388:	4601      	mov	r1, r0
   1a38a:	b140      	cbz	r0, 1a39e <slm_at_host_init+0x11e>
   1a38c:	4a33      	ldr	r2, [pc, #204]	; (1a45c <slm_at_host_init+0x1dc>)
   1a38e:	4b32      	ldr	r3, [pc, #200]	; (1a458 <slm_at_host_init+0x1d8>)
		LOG_ERR("UDP Server could not be initialized: %d", err);
   1a390:	483b      	ldr	r0, [pc, #236]	; (1a480 <slm_at_host_init+0x200>)
   1a392:	1ad2      	subs	r2, r2, r3
   1a394:	08d2      	lsrs	r2, r2, #3
   1a396:	0192      	lsls	r2, r2, #6
   1a398:	f042 0201 	orr.w	r2, r2, #1
   1a39c:	e053      	b.n	1a446 <slm_at_host_init+0x1c6>
	err = slm_at_tcpip_init();
   1a39e:	f000 fde7 	bl	1af70 <slm_at_tcpip_init>
	if (err) {
   1a3a2:	4601      	mov	r1, r0
   1a3a4:	b140      	cbz	r0, 1a3b8 <slm_at_host_init+0x138>
   1a3a6:	4a2d      	ldr	r2, [pc, #180]	; (1a45c <slm_at_host_init+0x1dc>)
   1a3a8:	4b2b      	ldr	r3, [pc, #172]	; (1a458 <slm_at_host_init+0x1d8>)
		LOG_ERR("TCPIP could not be initialized: %d", err);
   1a3aa:	4836      	ldr	r0, [pc, #216]	; (1a484 <slm_at_host_init+0x204>)
   1a3ac:	1ad2      	subs	r2, r2, r3
   1a3ae:	08d2      	lsrs	r2, r2, #3
   1a3b0:	0192      	lsls	r2, r2, #6
   1a3b2:	f042 0201 	orr.w	r2, r2, #1
   1a3b6:	e046      	b.n	1a446 <slm_at_host_init+0x1c6>
	err = slm_at_icmp_init();
   1a3b8:	f003 ff02 	bl	1e1c0 <slm_at_icmp_init>
	if (err) {
   1a3bc:	4601      	mov	r1, r0
   1a3be:	b140      	cbz	r0, 1a3d2 <slm_at_host_init+0x152>
   1a3c0:	4a26      	ldr	r2, [pc, #152]	; (1a45c <slm_at_host_init+0x1dc>)
   1a3c2:	4b25      	ldr	r3, [pc, #148]	; (1a458 <slm_at_host_init+0x1d8>)
		LOG_ERR("ICMP could not be initialized: %d", err);
   1a3c4:	4830      	ldr	r0, [pc, #192]	; (1a488 <slm_at_host_init+0x208>)
   1a3c6:	1ad2      	subs	r2, r2, r3
   1a3c8:	08d2      	lsrs	r2, r2, #3
   1a3ca:	0192      	lsls	r2, r2, #6
   1a3cc:	f042 0201 	orr.w	r2, r2, #1
   1a3d0:	e039      	b.n	1a446 <slm_at_host_init+0x1c6>
	err = slm_at_fota_init();
   1a3d2:	f004 f907 	bl	1e5e4 <slm_at_fota_init>
	if (err) {
   1a3d6:	4601      	mov	r1, r0
   1a3d8:	b140      	cbz	r0, 1a3ec <slm_at_host_init+0x16c>
   1a3da:	4a20      	ldr	r2, [pc, #128]	; (1a45c <slm_at_host_init+0x1dc>)
   1a3dc:	4b1e      	ldr	r3, [pc, #120]	; (1a458 <slm_at_host_init+0x1d8>)
		LOG_ERR("FOTA could not be initialized: %d", err);
   1a3de:	482b      	ldr	r0, [pc, #172]	; (1a48c <slm_at_host_init+0x20c>)
   1a3e0:	1ad2      	subs	r2, r2, r3
   1a3e2:	08d2      	lsrs	r2, r2, #3
   1a3e4:	0192      	lsls	r2, r2, #6
   1a3e6:	f042 0201 	orr.w	r2, r2, #1
   1a3ea:	e02c      	b.n	1a446 <slm_at_host_init+0x1c6>
	err = slm_at_httpc_init();
   1a3ec:	f004 fe8c 	bl	1f108 <slm_at_httpc_init>
	if (err) {
   1a3f0:	4604      	mov	r4, r0
   1a3f2:	b148      	cbz	r0, 1a408 <slm_at_host_init+0x188>
   1a3f4:	4a19      	ldr	r2, [pc, #100]	; (1a45c <slm_at_host_init+0x1dc>)
   1a3f6:	4b18      	ldr	r3, [pc, #96]	; (1a458 <slm_at_host_init+0x1d8>)
		LOG_ERR("HTTP could not be initialized: %d", err);
   1a3f8:	4601      	mov	r1, r0
   1a3fa:	1ad2      	subs	r2, r2, r3
   1a3fc:	08d2      	lsrs	r2, r2, #3
   1a3fe:	0192      	lsls	r2, r2, #6
   1a400:	4823      	ldr	r0, [pc, #140]	; (1a490 <slm_at_host_init+0x210>)
   1a402:	f042 0201 	orr.w	r2, r2, #1
   1a406:	e01e      	b.n	1a446 <slm_at_host_init+0x1c6>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1a408:	4b22      	ldr	r3, [pc, #136]	; (1a494 <slm_at_host_init+0x214>)
   1a40a:	4a23      	ldr	r2, [pc, #140]	; (1a498 <slm_at_host_init+0x218>)
   1a40c:	6018      	str	r0, [r3, #0]
   1a40e:	e9c3 2001 	strd	r2, r0, [r3, #4]
	z_impl_k_sem_give(sem);
   1a412:	4822      	ldr	r0, [pc, #136]	; (1a49c <slm_at_host_init+0x21c>)
   1a414:	f017 ff96 	bl	32344 <z_impl_k_sem_give>
	rsp_send(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
   1a418:	2107      	movs	r1, #7
   1a41a:	4821      	ldr	r0, [pc, #132]	; (1a4a0 <slm_at_host_init+0x220>)
   1a41c:	f7ff fee4 	bl	1a1e8 <rsp_send>
	return err;
   1a420:	e742      	b.n	1a2a8 <slm_at_host_init+0x28>
	err = uart_callback_set(uart_dev, uart_callback, NULL);
   1a422:	6820      	ldr	r0, [r4, #0]
	return api->callback_set(dev, callback, user_data);
   1a424:	491f      	ldr	r1, [pc, #124]	; (1a4a4 <slm_at_host_init+0x224>)
   1a426:	6883      	ldr	r3, [r0, #8]
   1a428:	2200      	movs	r2, #0
   1a42a:	681b      	ldr	r3, [r3, #0]
   1a42c:	4798      	blx	r3
	if (err) {
   1a42e:	4601      	mov	r1, r0
   1a430:	2800      	cmp	r0, #0
   1a432:	f43f af6f 	beq.w	1a314 <slm_at_host_init+0x94>
   1a436:	4a09      	ldr	r2, [pc, #36]	; (1a45c <slm_at_host_init+0x1dc>)
   1a438:	4b07      	ldr	r3, [pc, #28]	; (1a458 <slm_at_host_init+0x1d8>)
		LOG_ERR("Cannot set callback: %d", err);
   1a43a:	481b      	ldr	r0, [pc, #108]	; (1a4a8 <slm_at_host_init+0x228>)
   1a43c:	1ad2      	subs	r2, r2, r3
   1a43e:	08d2      	lsrs	r2, r2, #3
   1a440:	0192      	lsls	r2, r2, #6
   1a442:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("HTTP could not be initialized: %d", err);
   1a446:	f01a f86e 	bl	34526 <log_1>
		return -EFAULT;
   1a44a:	f06f 040d 	mvn.w	r4, #13
   1a44e:	e72b      	b.n	1a2a8 <slm_at_host_init+0x28>
   1a450:	00039115 	.word	0x00039115
   1a454:	20023468 	.word	0x20023468
   1a458:	0003831c 	.word	0x0003831c
   1a45c:	00038334 	.word	0x00038334
   1a460:	0003911c 	.word	0x0003911c
   1a464:	00039135 	.word	0x00039135
   1a468:	2002a8f5 	.word	0x2002a8f5
   1a46c:	2002a8f6 	.word	0x2002a8f6
   1a470:	00039183 	.word	0x00039183
   1a474:	00033b15 	.word	0x00033b15
   1a478:	00039198 	.word	0x00039198
   1a47c:	000391b6 	.word	0x000391b6
   1a480:	000391de 	.word	0x000391de
   1a484:	00039206 	.word	0x00039206
   1a488:	00039229 	.word	0x00039229
   1a48c:	0003924b 	.word	0x0003924b
   1a490:	0003926d 	.word	0x0003926d
   1a494:	2002345c 	.word	0x2002345c
   1a498:	0001a5e1 	.word	0x0001a5e1
   1a49c:	200208c4 	.word	0x200208c4
   1a4a0:	0003928f 	.word	0x0003928f
   1a4a4:	00019fcd 	.word	0x00019fcd
   1a4a8:	0003916b 	.word	0x0003916b

0001a4ac <slm_at_host_uninit>:

void slm_at_host_uninit(void)
{
   1a4ac:	b510      	push	{r4, lr}
	int err;

	err = slm_at_tcp_proxy_uninit();
   1a4ae:	f002 fd41 	bl	1cf34 <slm_at_tcp_proxy_uninit>
	if (err) {
   1a4b2:	4601      	mov	r1, r0
   1a4b4:	b148      	cbz	r0, 1a4ca <slm_at_host_uninit+0x1e>
   1a4b6:	4a3e      	ldr	r2, [pc, #248]	; (1a5b0 <slm_at_host_uninit+0x104>)
   1a4b8:	4b3e      	ldr	r3, [pc, #248]	; (1a5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("TCP Server could not be uninitialized: %d", err);
   1a4ba:	483f      	ldr	r0, [pc, #252]	; (1a5b8 <slm_at_host_uninit+0x10c>)
   1a4bc:	1ad2      	subs	r2, r2, r3
   1a4be:	08d2      	lsrs	r2, r2, #3
   1a4c0:	0192      	lsls	r2, r2, #6
   1a4c2:	f042 0202 	orr.w	r2, r2, #2
   1a4c6:	f01a f82e 	bl	34526 <log_1>
	}
	err = slm_at_udp_proxy_uninit();
   1a4ca:	f003 fb29 	bl	1db20 <slm_at_udp_proxy_uninit>
	if (err) {
   1a4ce:	4601      	mov	r1, r0
   1a4d0:	b148      	cbz	r0, 1a4e6 <slm_at_host_uninit+0x3a>
   1a4d2:	4a37      	ldr	r2, [pc, #220]	; (1a5b0 <slm_at_host_uninit+0x104>)
   1a4d4:	4b37      	ldr	r3, [pc, #220]	; (1a5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("UDP Server could not be uninitialized: %d", err);
   1a4d6:	4839      	ldr	r0, [pc, #228]	; (1a5bc <slm_at_host_uninit+0x110>)
   1a4d8:	1ad2      	subs	r2, r2, r3
   1a4da:	08d2      	lsrs	r2, r2, #3
   1a4dc:	0192      	lsls	r2, r2, #6
   1a4de:	f042 0202 	orr.w	r2, r2, #2
   1a4e2:	f01a f820 	bl	34526 <log_1>
	}
	err = slm_at_tcpip_uninit();
   1a4e6:	f019 fb22 	bl	33b2e <slm_at_tcpip_uninit>
	if (err) {
   1a4ea:	4601      	mov	r1, r0
   1a4ec:	b148      	cbz	r0, 1a502 <slm_at_host_uninit+0x56>
   1a4ee:	4a30      	ldr	r2, [pc, #192]	; (1a5b0 <slm_at_host_uninit+0x104>)
   1a4f0:	4b30      	ldr	r3, [pc, #192]	; (1a5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("TCPIP could not be uninitialized: %d", err);
   1a4f2:	4833      	ldr	r0, [pc, #204]	; (1a5c0 <slm_at_host_uninit+0x114>)
   1a4f4:	1ad2      	subs	r2, r2, r3
   1a4f6:	08d2      	lsrs	r2, r2, #3
   1a4f8:	0192      	lsls	r2, r2, #6
   1a4fa:	f042 0202 	orr.w	r2, r2, #2
   1a4fe:	f01a f812 	bl	34526 <log_1>
	err = slm_at_cmng_uninit();
	if (err) {
		LOG_WRN("TLS could not be uninitialized: %d", err);
	}
#endif
	err = slm_at_icmp_uninit();
   1a502:	f019 fb49 	bl	33b98 <slm_at_icmp_uninit>
	if (err) {
   1a506:	4601      	mov	r1, r0
   1a508:	b148      	cbz	r0, 1a51e <slm_at_host_uninit+0x72>
   1a50a:	4a29      	ldr	r2, [pc, #164]	; (1a5b0 <slm_at_host_uninit+0x104>)
   1a50c:	4b29      	ldr	r3, [pc, #164]	; (1a5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("ICMP could not be uninitialized: %d", err);
   1a50e:	482d      	ldr	r0, [pc, #180]	; (1a5c4 <slm_at_host_uninit+0x118>)
   1a510:	1ad2      	subs	r2, r2, r3
   1a512:	08d2      	lsrs	r2, r2, #3
   1a514:	0192      	lsls	r2, r2, #6
   1a516:	f042 0202 	orr.w	r2, r2, #2
   1a51a:	f01a f804 	bl	34526 <log_1>
	}
	err = slm_at_fota_uninit();
   1a51e:	f019 fb3d 	bl	33b9c <slm_at_fota_uninit>
	if (err) {
   1a522:	4601      	mov	r1, r0
   1a524:	b148      	cbz	r0, 1a53a <slm_at_host_uninit+0x8e>
   1a526:	4a22      	ldr	r2, [pc, #136]	; (1a5b0 <slm_at_host_uninit+0x104>)
   1a528:	4b22      	ldr	r3, [pc, #136]	; (1a5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("FOTA could not be uninitialized: %d", err);
   1a52a:	4827      	ldr	r0, [pc, #156]	; (1a5c8 <slm_at_host_uninit+0x11c>)
   1a52c:	1ad2      	subs	r2, r2, r3
   1a52e:	08d2      	lsrs	r2, r2, #3
   1a530:	0192      	lsls	r2, r2, #6
   1a532:	f042 0202 	orr.w	r2, r2, #2
   1a536:	f019 fff6 	bl	34526 <log_1>
	if (err) {
		LOG_WRN("MQTT could not be uninitialized: %d", err);
	}
#endif
#if defined(CONFIG_SLM_HTTPC)
	err = slm_at_httpc_uninit();
   1a53a:	f004 fded 	bl	1f118 <slm_at_httpc_uninit>
	if (err) {
   1a53e:	4601      	mov	r1, r0
   1a540:	b148      	cbz	r0, 1a556 <slm_at_host_uninit+0xaa>
   1a542:	4a1b      	ldr	r2, [pc, #108]	; (1a5b0 <slm_at_host_uninit+0x104>)
   1a544:	4b1b      	ldr	r3, [pc, #108]	; (1a5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("HTTP could not be uninitialized: %d", err);
   1a546:	4821      	ldr	r0, [pc, #132]	; (1a5cc <slm_at_host_uninit+0x120>)
   1a548:	1ad2      	subs	r2, r2, r3
   1a54a:	08d2      	lsrs	r2, r2, #3
   1a54c:	0192      	lsls	r2, r2, #6
   1a54e:	f042 0202 	orr.w	r2, r2, #2
   1a552:	f019 ffe8 	bl	34526 <log_1>
	}

	err = at_notif_deregister_handler(NULL, response_handler);
   1a556:	491e      	ldr	r1, [pc, #120]	; (1a5d0 <slm_at_host_uninit+0x124>)
   1a558:	2000      	movs	r0, #0
   1a55a:	f00c f989 	bl	26870 <at_notif_deregister_handler>
	if (err) {
   1a55e:	4601      	mov	r1, r0
   1a560:	b148      	cbz	r0, 1a576 <slm_at_host_uninit+0xca>
   1a562:	4a13      	ldr	r2, [pc, #76]	; (1a5b0 <slm_at_host_uninit+0x104>)
   1a564:	4b13      	ldr	r3, [pc, #76]	; (1a5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("Can't deregister handler: %d", err);
   1a566:	481b      	ldr	r0, [pc, #108]	; (1a5d4 <slm_at_host_uninit+0x128>)
   1a568:	1ad2      	subs	r2, r2, r3
   1a56a:	08d2      	lsrs	r2, r2, #3
   1a56c:	0192      	lsls	r2, r2, #6
   1a56e:	f042 0202 	orr.w	r2, r2, #2
   1a572:	f019 ffd8 	bl	34526 <log_1>
	}
#endif
	/* Power off UART module */
	uart_rx_disable(uart_dev);
   1a576:	4c18      	ldr	r4, [pc, #96]	; (1a5d8 <slm_at_host_uninit+0x12c>)
   1a578:	6820      	ldr	r0, [r4, #0]
   1a57a:	f019 fab6 	bl	33aea <uart_rx_disable>
	return z_impl_k_sleep(timeout);
   1a57e:	2100      	movs	r1, #0
   1a580:	f640 40cd 	movw	r0, #3277	; 0xccd
   1a584:	f017 feb8 	bl	322f8 <z_impl_k_sleep>
	k_sleep(K_MSEC(100));
	err = device_set_power_state(uart_dev, DEVICE_PM_OFF_STATE,
   1a588:	2105      	movs	r1, #5
   1a58a:	6820      	ldr	r0, [r4, #0]
   1a58c:	f019 fab0 	bl	33af0 <device_set_power_state.constprop.0>
				NULL, NULL);
	if (err) {
   1a590:	4601      	mov	r1, r0
   1a592:	b158      	cbz	r0, 1a5ac <slm_at_host_uninit+0x100>
		LOG_WRN("Can't power off uart: %d", err);
	}

	LOG_DBG("at_host uninit done");
}
   1a594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a598:	4a05      	ldr	r2, [pc, #20]	; (1a5b0 <slm_at_host_uninit+0x104>)
   1a59a:	4b06      	ldr	r3, [pc, #24]	; (1a5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("Can't power off uart: %d", err);
   1a59c:	480f      	ldr	r0, [pc, #60]	; (1a5dc <slm_at_host_uninit+0x130>)
   1a59e:	1ad2      	subs	r2, r2, r3
   1a5a0:	08d2      	lsrs	r2, r2, #3
   1a5a2:	0192      	lsls	r2, r2, #6
   1a5a4:	f042 0202 	orr.w	r2, r2, #2
   1a5a8:	f019 bfbd 	b.w	34526 <log_1>
}
   1a5ac:	bd10      	pop	{r4, pc}
   1a5ae:	bf00      	nop
   1a5b0:	00038334 	.word	0x00038334
   1a5b4:	0003831c 	.word	0x0003831c
   1a5b8:	00039297 	.word	0x00039297
   1a5bc:	000392c1 	.word	0x000392c1
   1a5c0:	000392eb 	.word	0x000392eb
   1a5c4:	00039310 	.word	0x00039310
   1a5c8:	00039334 	.word	0x00039334
   1a5cc:	00039358 	.word	0x00039358
   1a5d0:	00033b15 	.word	0x00033b15
   1a5d4:	0003937c 	.word	0x0003937c
   1a5d8:	20023468 	.word	0x20023468
   1a5dc:	00039399 	.word	0x00039399

0001a5e0 <cmd_send>:
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1a5e0:	f640 228b 	movw	r2, #2699	; 0xa8b
{
   1a5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1a5e6:	4db1      	ldr	r5, [pc, #708]	; (1a8ac <cmd_send+0x2cc>)
   1a5e8:	4cb1      	ldr	r4, [pc, #708]	; (1a8b0 <cmd_send+0x2d0>)
   1a5ea:	682b      	ldr	r3, [r5, #0]
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMVER)) {
   1a5ec:	4620      	mov	r0, r4
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1a5ee:	4293      	cmp	r3, r2
   1a5f0:	bf28      	it	cs
   1a5f2:	4613      	movcs	r3, r2
   1a5f4:	2200      	movs	r2, #0
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMVER)) {
   1a5f6:	49af      	ldr	r1, [pc, #700]	; (1a8b4 <cmd_send+0x2d4>)
{
   1a5f8:	b09f      	sub	sp, #124	; 0x7c
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1a5fa:	54e2      	strb	r2, [r4, r3]
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMVER)) {
   1a5fc:	f7ff fc8e 	bl	19f1c <slm_util_cmd_casecmp>
   1a600:	4607      	mov	r7, r0
   1a602:	b120      	cbz	r0, 1a60e <cmd_send+0x2e>
		rsp_send(SLM_VERSION, sizeof(SLM_VERSION) - 1);
   1a604:	210f      	movs	r1, #15
   1a606:	48ac      	ldr	r0, [pc, #688]	; (1a8b8 <cmd_send+0x2d8>)
		rsp_send(buf, strlen(buf));
   1a608:	f7ff fdee 	bl	1a1e8 <rsp_send>
   1a60c:	e149      	b.n	1a8a2 <cmd_send+0x2c2>
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMUART)) {
   1a60e:	4620      	mov	r0, r4
   1a610:	49aa      	ldr	r1, [pc, #680]	; (1a8bc <cmd_send+0x2dc>)
   1a612:	f7ff fc83 	bl	19f1c <slm_util_cmd_casecmp>
   1a616:	4606      	mov	r6, r0
   1a618:	2800      	cmp	r0, #0
   1a61a:	f000 80f1 	beq.w	1a800 <cmd_send+0x220>
	ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
   1a61e:	4639      	mov	r1, r7
   1a620:	4620      	mov	r0, r4
   1a622:	4aa7      	ldr	r2, [pc, #668]	; (1a8c0 <cmd_send+0x2e0>)
   1a624:	f01b fff7 	bl	36616 <at_parser_params_from_str>
	if (ret < 0) {
   1a628:	1e06      	subs	r6, r0, #0
   1a62a:	da0b      	bge.n	1a644 <cmd_send+0x64>
		LOG_ERR("Failed to parse AT command %d", ret);
   1a62c:	4631      	mov	r1, r6
   1a62e:	4aa5      	ldr	r2, [pc, #660]	; (1a8c4 <cmd_send+0x2e4>)
   1a630:	4ba5      	ldr	r3, [pc, #660]	; (1a8c8 <cmd_send+0x2e8>)
   1a632:	1ad2      	subs	r2, r2, r3
   1a634:	08d2      	lsrs	r2, r2, #3
   1a636:	0192      	lsls	r2, r2, #6
   1a638:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to parse AT command %d", ret);
   1a63c:	48a3      	ldr	r0, [pc, #652]	; (1a8cc <cmd_send+0x2ec>)
   1a63e:	f019 ff72 	bl	34526 <log_1>
		if (err) {
   1a642:	e037      	b.n	1a6b4 <cmd_send+0xd4>
	type = at_parser_cmd_type_get(at_cmd);
   1a644:	4620      	mov	r0, r4
   1a646:	f01b ffe9 	bl	3661c <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1a64a:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
   1a64c:	4604      	mov	r4, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1a64e:	4da0      	ldr	r5, [pc, #640]	; (1a8d0 <cmd_send+0x2f0>)
   1a650:	d14c      	bne.n	1a6ec <cmd_send+0x10c>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1a652:	489b      	ldr	r0, [pc, #620]	; (1a8c0 <cmd_send+0x2e0>)
   1a654:	f01c f927 	bl	368a6 <at_params_valid_count_get>
   1a658:	2801      	cmp	r0, #1
   1a65a:	d90f      	bls.n	1a67c <cmd_send+0x9c>
			ret = at_params_int_get(&at_param_list, 1,
   1a65c:	4621      	mov	r1, r4
   1a65e:	4898      	ldr	r0, [pc, #608]	; (1a8c0 <cmd_send+0x2e0>)
   1a660:	aa02      	add	r2, sp, #8
   1a662:	f01c f8ea 	bl	3683a <at_params_int_get>
			if (ret < 0) {
   1a666:	2800      	cmp	r0, #0
   1a668:	da08      	bge.n	1a67c <cmd_send+0x9c>
   1a66a:	4996      	ldr	r1, [pc, #600]	; (1a8c4 <cmd_send+0x2e4>)
   1a66c:	4b96      	ldr	r3, [pc, #600]	; (1a8c8 <cmd_send+0x2e8>)
			LOG_ERR("AT parameter error");
   1a66e:	4899      	ldr	r0, [pc, #612]	; (1a8d4 <cmd_send+0x2f4>)
   1a670:	1ac9      	subs	r1, r1, r3
   1a672:	08c9      	lsrs	r1, r1, #3
   1a674:	0189      	lsls	r1, r1, #6
   1a676:	f041 0101 	orr.w	r1, r1, #1
   1a67a:	e019      	b.n	1a6b0 <cmd_send+0xd0>
		switch (*baudrate) {
   1a67c:	9b02      	ldr	r3, [sp, #8]
   1a67e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1a682:	d058      	beq.n	1a736 <cmd_send+0x156>
   1a684:	d81f      	bhi.n	1a6c6 <cmd_send+0xe6>
   1a686:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1a68a:	d054      	beq.n	1a736 <cmd_send+0x156>
   1a68c:	d815      	bhi.n	1a6ba <cmd_send+0xda>
   1a68e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1a692:	d050      	beq.n	1a736 <cmd_send+0x156>
   1a694:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1a698:	d04d      	beq.n	1a736 <cmd_send+0x156>
   1a69a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1a69e:	d04a      	beq.n	1a736 <cmd_send+0x156>
   1a6a0:	4988      	ldr	r1, [pc, #544]	; (1a8c4 <cmd_send+0x2e4>)
   1a6a2:	4b89      	ldr	r3, [pc, #548]	; (1a8c8 <cmd_send+0x2e8>)
			LOG_ERR("Invalid uart baud rate provided.");
   1a6a4:	488c      	ldr	r0, [pc, #560]	; (1a8d8 <cmd_send+0x2f8>)
   1a6a6:	1ac9      	subs	r1, r1, r3
   1a6a8:	08c9      	lsrs	r1, r1, #3
   1a6aa:	0189      	lsls	r1, r1, #6
   1a6ac:	f041 0101 	orr.w	r1, r1, #1
   1a6b0:	f019 ff2a 	bl	34508 <log_0>
		rsp_send(ERROR_STR, sizeof(ERROR_STR) - 1);
   1a6b4:	2107      	movs	r1, #7
   1a6b6:	4889      	ldr	r0, [pc, #548]	; (1a8dc <cmd_send+0x2fc>)
   1a6b8:	e0f5      	b.n	1a8a6 <cmd_send+0x2c6>
		switch (*baudrate) {
   1a6ba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1a6be:	d03a      	beq.n	1a736 <cmd_send+0x156>
   1a6c0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1a6c4:	e7eb      	b.n	1a69e <cmd_send+0xbe>
   1a6c6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1a6ca:	d034      	beq.n	1a736 <cmd_send+0x156>
   1a6cc:	d808      	bhi.n	1a6e0 <cmd_send+0x100>
   1a6ce:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1a6d2:	d030      	beq.n	1a736 <cmd_send+0x156>
   1a6d4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1a6d8:	d02d      	beq.n	1a736 <cmd_send+0x156>
   1a6da:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1a6de:	e7de      	b.n	1a69e <cmd_send+0xbe>
   1a6e0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1a6e4:	d027      	beq.n	1a736 <cmd_send+0x156>
   1a6e6:	4a7e      	ldr	r2, [pc, #504]	; (1a8e0 <cmd_send+0x300>)
   1a6e8:	4293      	cmp	r3, r2
   1a6ea:	e7d8      	b.n	1a69e <cmd_send+0xbe>
	if (type == AT_CMD_TYPE_READ_COMMAND) {
   1a6ec:	2802      	cmp	r0, #2
   1a6ee:	d161      	bne.n	1a7b4 <cmd_send+0x1d4>
	err = uart_config_get(uart_dev, &cfg);
   1a6f0:	6828      	ldr	r0, [r5, #0]
					 struct uart_config *cfg)
{
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	if (api->config_get != NULL) {
   1a6f2:	6883      	ldr	r3, [r0, #8]
   1a6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a6f6:	2b00      	cmp	r3, #0
   1a6f8:	d057      	beq.n	1a7aa <cmd_send+0x1ca>
		return api->config_get(dev, cfg);
   1a6fa:	a903      	add	r1, sp, #12
   1a6fc:	4798      	blx	r3
	if (err) {
   1a6fe:	4604      	mov	r4, r0
   1a700:	2800      	cmp	r0, #0
   1a702:	d055      	beq.n	1a7b0 <cmd_send+0x1d0>
   1a704:	4a6f      	ldr	r2, [pc, #444]	; (1a8c4 <cmd_send+0x2e4>)
   1a706:	4b70      	ldr	r3, [pc, #448]	; (1a8c8 <cmd_send+0x2e8>)
		LOG_ERR("uart_config_get: %d", err);
   1a708:	4621      	mov	r1, r4
   1a70a:	1ad2      	subs	r2, r2, r3
   1a70c:	08d2      	lsrs	r2, r2, #3
   1a70e:	0192      	lsls	r2, r2, #6
   1a710:	4874      	ldr	r0, [pc, #464]	; (1a8e4 <cmd_send+0x304>)
   1a712:	f042 0201 	orr.w	r2, r2, #1
   1a716:	f019 ff06 	bl	34526 <log_1>
		sprintf(buf, "#SLMUART: %d\r\n", get_uart_baudrate());
   1a71a:	2100      	movs	r1, #0
   1a71c:	2220      	movs	r2, #32
   1a71e:	4b72      	ldr	r3, [pc, #456]	; (1a8e8 <cmd_send+0x308>)
   1a720:	9400      	str	r4, [sp, #0]
   1a722:	a803      	add	r0, sp, #12
   1a724:	f01c ffa5 	bl	37672 <__sprintf_chk>
		rsp_send(buf, strlen(buf));
   1a728:	a803      	add	r0, sp, #12
   1a72a:	f7fe fca1 	bl	19070 <strlen>
   1a72e:	4601      	mov	r1, r0
		rsp_send(buf, sizeof(buf));
   1a730:	a803      	add	r0, sp, #12
   1a732:	f7ff fd59 	bl	1a1e8 <rsp_send>
			rsp_send(OK_STR, sizeof(OK_STR) - 1);
   1a736:	2104      	movs	r1, #4
   1a738:	486c      	ldr	r0, [pc, #432]	; (1a8ec <cmd_send+0x30c>)
   1a73a:	f7ff fd55 	bl	1a1e8 <rsp_send>
   1a73e:	2100      	movs	r1, #0
   1a740:	f240 6067 	movw	r0, #1639	; 0x667
   1a744:	f017 fdd8 	bl	322f8 <z_impl_k_sleep>
			set_uart_baudrate(baudrate);
   1a748:	9c02      	ldr	r4, [sp, #8]
	err = uart_config_get(uart_dev, &cfg);
   1a74a:	6828      	ldr	r0, [r5, #0]
	if (api->config_get != NULL) {
   1a74c:	6883      	ldr	r3, [r0, #8]
   1a74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a750:	2b00      	cmp	r3, #0
   1a752:	d03c      	beq.n	1a7ce <cmd_send+0x1ee>
		return api->config_get(dev, cfg);
   1a754:	a903      	add	r1, sp, #12
   1a756:	4798      	blx	r3
	if (err != 0) {
   1a758:	4601      	mov	r1, r0
   1a75a:	2800      	cmp	r0, #0
   1a75c:	d03a      	beq.n	1a7d4 <cmd_send+0x1f4>
   1a75e:	4a59      	ldr	r2, [pc, #356]	; (1a8c4 <cmd_send+0x2e4>)
   1a760:	4b59      	ldr	r3, [pc, #356]	; (1a8c8 <cmd_send+0x2e8>)
		LOG_ERR("uart_config_get: %d", err);
   1a762:	4860      	ldr	r0, [pc, #384]	; (1a8e4 <cmd_send+0x304>)
   1a764:	1ad2      	subs	r2, r2, r3
   1a766:	08d2      	lsrs	r2, r2, #3
   1a768:	0192      	lsls	r2, r2, #6
   1a76a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("uart_configure: %d", err);
   1a76e:	f019 feda 	bl	34526 <log_1>
	err = uart_rx_enable(uart_dev, uart_rx_buf[0],
   1a772:	4b57      	ldr	r3, [pc, #348]	; (1a8d0 <cmd_send+0x2f0>)
   1a774:	6818      	ldr	r0, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
   1a776:	6883      	ldr	r3, [r0, #8]
   1a778:	495d      	ldr	r1, [pc, #372]	; (1a8f0 <cmd_send+0x310>)
   1a77a:	68dc      	ldr	r4, [r3, #12]
   1a77c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a780:	2301      	movs	r3, #1
   1a782:	47a0      	blx	r4
	if (err) {
   1a784:	4601      	mov	r1, r0
   1a786:	2800      	cmp	r0, #0
   1a788:	f000 80f6 	beq.w	1a978 <cmd_send+0x398>
   1a78c:	4b4e      	ldr	r3, [pc, #312]	; (1a8c8 <cmd_send+0x2e8>)
   1a78e:	4a4d      	ldr	r2, [pc, #308]	; (1a8c4 <cmd_send+0x2e4>)
		LOG_ERR("UART RX failed: %d", err);
   1a790:	4858      	ldr	r0, [pc, #352]	; (1a8f4 <cmd_send+0x314>)
   1a792:	1ad2      	subs	r2, r2, r3
   1a794:	08d2      	lsrs	r2, r2, #3
   1a796:	0192      	lsls	r2, r2, #6
   1a798:	f042 0201 	orr.w	r2, r2, #1
   1a79c:	f019 fec3 	bl	34526 <log_1>
		rsp_send(FATAL_STR, sizeof(FATAL_STR) - 1);
   1a7a0:	210d      	movs	r1, #13
   1a7a2:	4855      	ldr	r0, [pc, #340]	; (1a8f8 <cmd_send+0x318>)
   1a7a4:	f7ff fd20 	bl	1a1e8 <rsp_send>
   1a7a8:	e0e6      	b.n	1a978 <cmd_send+0x398>
	}

	return -ENOTSUP;
   1a7aa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1a7ae:	e7a9      	b.n	1a704 <cmd_send+0x124>
	return (int)cfg.baudrate;
   1a7b0:	9c03      	ldr	r4, [sp, #12]
   1a7b2:	e7b2      	b.n	1a71a <cmd_send+0x13a>
	if (type == AT_CMD_TYPE_TEST_COMMAND) {
   1a7b4:	2803      	cmp	r0, #3
   1a7b6:	d106      	bne.n	1a7c6 <cmd_send+0x1e6>
		char buf[] = SLM_UART_BAUDRATE;
   1a7b8:	4950      	ldr	r1, [pc, #320]	; (1a8fc <cmd_send+0x31c>)
   1a7ba:	226b      	movs	r2, #107	; 0x6b
   1a7bc:	a803      	add	r0, sp, #12
   1a7be:	f01c fe20 	bl	37402 <memcpy>
		rsp_send(buf, sizeof(buf));
   1a7c2:	216b      	movs	r1, #107	; 0x6b
   1a7c4:	e7b4      	b.n	1a730 <cmd_send+0x150>
		if (err != 0) {
   1a7c6:	2e00      	cmp	r6, #0
   1a7c8:	f47f af74 	bne.w	1a6b4 <cmd_send+0xd4>
   1a7cc:	e7b3      	b.n	1a736 <cmd_send+0x156>
   1a7ce:	f06f 0185 	mvn.w	r1, #133	; 0x85
   1a7d2:	e7c4      	b.n	1a75e <cmd_send+0x17e>
	err = uart_configure(uart_dev, &cfg);
   1a7d4:	6828      	ldr	r0, [r5, #0]
	cfg.baudrate = baudrate;
   1a7d6:	9403      	str	r4, [sp, #12]
	if (api->configure != NULL) {
   1a7d8:	6883      	ldr	r3, [r0, #8]
   1a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a7dc:	b16b      	cbz	r3, 1a7fa <cmd_send+0x21a>
		return api->configure(dev, cfg);
   1a7de:	a903      	add	r1, sp, #12
   1a7e0:	4798      	blx	r3
	if (err != 0) {
   1a7e2:	4601      	mov	r1, r0
   1a7e4:	2800      	cmp	r0, #0
   1a7e6:	d0c4      	beq.n	1a772 <cmd_send+0x192>
   1a7e8:	4a36      	ldr	r2, [pc, #216]	; (1a8c4 <cmd_send+0x2e4>)
   1a7ea:	4b37      	ldr	r3, [pc, #220]	; (1a8c8 <cmd_send+0x2e8>)
		LOG_ERR("uart_configure: %d", err);
   1a7ec:	4844      	ldr	r0, [pc, #272]	; (1a900 <cmd_send+0x320>)
   1a7ee:	1ad2      	subs	r2, r2, r3
   1a7f0:	08d2      	lsrs	r2, r2, #3
   1a7f2:	0192      	lsls	r2, r2, #6
   1a7f4:	f042 0201 	orr.w	r2, r2, #1
   1a7f8:	e7b9      	b.n	1a76e <cmd_send+0x18e>
	return -ENOTSUP;
   1a7fa:	f06f 0185 	mvn.w	r1, #133	; 0x85
   1a7fe:	e7f3      	b.n	1a7e8 <cmd_send+0x208>
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_RESET)) {
   1a800:	4620      	mov	r0, r4
   1a802:	4940      	ldr	r1, [pc, #256]	; (1a904 <cmd_send+0x324>)
   1a804:	f7ff fb8a 	bl	19f1c <slm_util_cmd_casecmp>
   1a808:	b180      	cbz	r0, 1a82c <cmd_send+0x24c>
		rsp_send(OK_STR, sizeof(OK_STR) - 1);
   1a80a:	2104      	movs	r1, #4
   1a80c:	4837      	ldr	r0, [pc, #220]	; (1a8ec <cmd_send+0x30c>)
   1a80e:	f7ff fceb 	bl	1a1e8 <rsp_send>
   1a812:	2100      	movs	r1, #0
   1a814:	f240 6067 	movw	r0, #1639	; 0x667
   1a818:	f017 fd6e 	bl	322f8 <z_impl_k_sleep>
		slm_at_host_uninit();
   1a81c:	f7ff fe46 	bl	1a4ac <slm_at_host_uninit>
		enter_sleep(false);
   1a820:	4630      	mov	r0, r6
   1a822:	f019 f910 	bl	33a46 <enter_sleep>
		sys_reboot(SYS_REBOOT_COLD);
   1a826:	2001      	movs	r0, #1
   1a828:	f006 fdba 	bl	213a0 <sys_reboot>
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_CLAC)) {
   1a82c:	4936      	ldr	r1, [pc, #216]	; (1a908 <cmd_send+0x328>)
   1a82e:	4820      	ldr	r0, [pc, #128]	; (1a8b0 <cmd_send+0x2d0>)
   1a830:	f7ff fb74 	bl	19f1c <slm_util_cmd_casecmp>
   1a834:	4604      	mov	r4, r0
   1a836:	2800      	cmp	r0, #0
   1a838:	d06c      	beq.n	1a914 <cmd_send+0x334>
	rsp_send(AT_CMD_SLMVER, sizeof(AT_CMD_SLMVER) - 1);
   1a83a:	210a      	movs	r1, #10
   1a83c:	481d      	ldr	r0, [pc, #116]	; (1a8b4 <cmd_send+0x2d4>)
   1a83e:	f7ff fcd3 	bl	1a1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1a842:	2102      	movs	r1, #2
   1a844:	4831      	ldr	r0, [pc, #196]	; (1a90c <cmd_send+0x32c>)
   1a846:	f7ff fccf 	bl	1a1e8 <rsp_send>
	rsp_send(AT_CMD_SLMUART, sizeof(AT_CMD_SLMUART) - 1);
   1a84a:	210b      	movs	r1, #11
   1a84c:	481b      	ldr	r0, [pc, #108]	; (1a8bc <cmd_send+0x2dc>)
   1a84e:	f7ff fccb 	bl	1a1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1a852:	2102      	movs	r1, #2
   1a854:	482d      	ldr	r0, [pc, #180]	; (1a90c <cmd_send+0x32c>)
   1a856:	f7ff fcc7 	bl	1a1e8 <rsp_send>
	rsp_send(AT_CMD_SLEEP, sizeof(AT_CMD_SLEEP) - 1);
   1a85a:	2109      	movs	r1, #9
   1a85c:	482c      	ldr	r0, [pc, #176]	; (1a910 <cmd_send+0x330>)
   1a85e:	f7ff fcc3 	bl	1a1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1a862:	2102      	movs	r1, #2
   1a864:	4829      	ldr	r0, [pc, #164]	; (1a90c <cmd_send+0x32c>)
   1a866:	f7ff fcbf 	bl	1a1e8 <rsp_send>
	rsp_send(AT_CMD_RESET, sizeof(AT_CMD_RESET) - 1);
   1a86a:	2109      	movs	r1, #9
   1a86c:	4825      	ldr	r0, [pc, #148]	; (1a904 <cmd_send+0x324>)
   1a86e:	f7ff fcbb 	bl	1a1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1a872:	2102      	movs	r1, #2
   1a874:	4825      	ldr	r0, [pc, #148]	; (1a90c <cmd_send+0x32c>)
   1a876:	f7ff fcb7 	bl	1a1e8 <rsp_send>
	rsp_send(AT_CMD_CLAC, sizeof(AT_CMD_CLAC) - 1);
   1a87a:	2108      	movs	r1, #8
   1a87c:	4822      	ldr	r0, [pc, #136]	; (1a908 <cmd_send+0x328>)
   1a87e:	f7ff fcb3 	bl	1a1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1a882:	2102      	movs	r1, #2
   1a884:	4821      	ldr	r0, [pc, #132]	; (1a90c <cmd_send+0x32c>)
   1a886:	f7ff fcaf 	bl	1a1e8 <rsp_send>
	slm_at_tcp_proxy_clac();
   1a88a:	f001 fcaf 	bl	1c1ec <slm_at_tcp_proxy_clac>
	slm_at_udp_proxy_clac();
   1a88e:	f002 fc65 	bl	1d15c <slm_at_udp_proxy_clac>
	slm_at_tcpip_clac();
   1a892:	f000 fb4b 	bl	1af2c <slm_at_tcpip_clac>
	slm_at_icmp_clac();
   1a896:	f003 fc77 	bl	1e188 <slm_at_icmp_clac>
	slm_at_fota_clac();
   1a89a:	f003 fe87 	bl	1e5ac <slm_at_fota_clac>
	slm_at_httpc_clac();
   1a89e:	f004 fc5b 	bl	1f158 <slm_at_httpc_clac>
		rsp_send(OK_STR, sizeof(OK_STR) - 1);
   1a8a2:	2104      	movs	r1, #4
   1a8a4:	4811      	ldr	r0, [pc, #68]	; (1a8ec <cmd_send+0x30c>)
		rsp_send(str, ++chars);
   1a8a6:	f7ff fc9f 	bl	1a1e8 <rsp_send>
		break;
   1a8aa:	e762      	b.n	1a772 <cmd_send+0x192>
   1a8ac:	20023454 	.word	0x20023454
   1a8b0:	200293dc 	.word	0x200293dc
   1a8b4:	000393b2 	.word	0x000393b2
   1a8b8:	000393bd 	.word	0x000393bd
   1a8bc:	000393d2 	.word	0x000393d2
   1a8c0:	20023430 	.word	0x20023430
   1a8c4:	00038334 	.word	0x00038334
   1a8c8:	0003831c 	.word	0x0003831c
   1a8cc:	000393de 	.word	0x000393de
   1a8d0:	20023468 	.word	0x20023468
   1a8d4:	000393fc 	.word	0x000393fc
   1a8d8:	0003940f 	.word	0x0003940f
   1a8dc:	000394db 	.word	0x000394db
   1a8e0:	000f4240 	.word	0x000f4240
   1a8e4:	00039430 	.word	0x00039430
   1a8e8:	00039444 	.word	0x00039444
   1a8ec:	000393cd 	.word	0x000393cd
   1a8f0:	2002a8f6 	.word	0x2002a8f6
   1a8f4:	000394c2 	.word	0x000394c2
   1a8f8:	000394d5 	.word	0x000394d5
   1a8fc:	000394e3 	.word	0x000394e3
   1a900:	00039453 	.word	0x00039453
   1a904:	00039466 	.word	0x00039466
   1a908:	00039470 	.word	0x00039470
   1a90c:	0003c24e 	.word	0x0003c24e
   1a910:	00039479 	.word	0x00039479
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLEEP)) {
   1a914:	4964      	ldr	r1, [pc, #400]	; (1aaa8 <cmd_send+0x4c8>)
   1a916:	4865      	ldr	r0, [pc, #404]	; (1aaac <cmd_send+0x4cc>)
   1a918:	f7ff fb00 	bl	19f1c <slm_util_cmd_casecmp>
   1a91c:	2800      	cmp	r0, #0
   1a91e:	d04b      	beq.n	1a9b8 <cmd_send+0x3d8>
	ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
   1a920:	4621      	mov	r1, r4
   1a922:	4a63      	ldr	r2, [pc, #396]	; (1aab0 <cmd_send+0x4d0>)
   1a924:	4861      	ldr	r0, [pc, #388]	; (1aaac <cmd_send+0x4cc>)
   1a926:	f01b fe76 	bl	36616 <at_parser_params_from_str>
	if (ret < 0) {
   1a92a:	1e05      	subs	r5, r0, #0
   1a92c:	da08      	bge.n	1a940 <cmd_send+0x360>
   1a92e:	4a61      	ldr	r2, [pc, #388]	; (1aab4 <cmd_send+0x4d4>)
   1a930:	4b61      	ldr	r3, [pc, #388]	; (1aab8 <cmd_send+0x4d8>)
		LOG_ERR("Failed to parse AT command %d", ret);
   1a932:	4629      	mov	r1, r5
   1a934:	1ad2      	subs	r2, r2, r3
   1a936:	08d2      	lsrs	r2, r2, #3
   1a938:	0192      	lsls	r2, r2, #6
   1a93a:	f042 0201 	orr.w	r2, r2, #1
   1a93e:	e67d      	b.n	1a63c <cmd_send+0x5c>
	type = at_parser_cmd_type_get(at_cmd);
   1a940:	485a      	ldr	r0, [pc, #360]	; (1aaac <cmd_send+0x4cc>)
   1a942:	f01b fe6b 	bl	3661c <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1a946:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
   1a948:	4606      	mov	r6, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1a94a:	d120      	bne.n	1a98e <cmd_send+0x3ae>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1a94c:	4858      	ldr	r0, [pc, #352]	; (1aab0 <cmd_send+0x4d0>)
		shutdown_mode = SHUTDOWN_MODE_IDLE;
   1a94e:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1a952:	f01b ffa8 	bl	368a6 <at_params_valid_count_get>
   1a956:	2801      	cmp	r0, #1
   1a958:	d907      	bls.n	1a96a <cmd_send+0x38a>
			ret = at_params_short_get(&at_param_list, 1,
   1a95a:	4631      	mov	r1, r6
   1a95c:	4854      	ldr	r0, [pc, #336]	; (1aab0 <cmd_send+0x4d0>)
   1a95e:	aa03      	add	r2, sp, #12
   1a960:	f01b ff59 	bl	36816 <at_params_short_get>
			if (ret < 0) {
   1a964:	2800      	cmp	r0, #0
   1a966:	f6ff ae80 	blt.w	1a66a <cmd_send+0x8a>
		if (shutdown_mode == SHUTDOWN_MODE_IDLE) {
   1a96a:	f8bd 400c 	ldrh.w	r4, [sp, #12]
   1a96e:	b92c      	cbnz	r4, 1a97c <cmd_send+0x39c>
			slm_at_host_uninit();
   1a970:	f7ff fd9c 	bl	1a4ac <slm_at_host_uninit>
			enter_idle();
   1a974:	f7ff f9bc 	bl	19cf0 <enter_idle>
}
   1a978:	b01f      	add	sp, #124	; 0x7c
   1a97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (shutdown_mode == SHUTDOWN_MODE_SLEEP) {
   1a97c:	2c01      	cmp	r4, #1
   1a97e:	f47f ae74 	bne.w	1a66a <cmd_send+0x8a>
			slm_at_host_uninit();
   1a982:	f7ff fd93 	bl	1a4ac <slm_at_host_uninit>
			enter_sleep(true);
   1a986:	4620      	mov	r0, r4
   1a988:	f019 f85d 	bl	33a46 <enter_sleep>
		if (err) {
   1a98c:	e789      	b.n	1a8a2 <cmd_send+0x2c2>
	if (type == AT_CMD_TYPE_TEST_COMMAND) {
   1a98e:	2803      	cmp	r0, #3
   1a990:	d10e      	bne.n	1a9b0 <cmd_send+0x3d0>
		sprintf(buf, "#XSLEEP: (%d, %d)\r\n", SHUTDOWN_MODE_IDLE,
   1a992:	2301      	movs	r3, #1
   1a994:	4621      	mov	r1, r4
   1a996:	2240      	movs	r2, #64	; 0x40
   1a998:	e9cd 4300 	strd	r4, r3, [sp]
   1a99c:	a803      	add	r0, sp, #12
   1a99e:	4b47      	ldr	r3, [pc, #284]	; (1aabc <cmd_send+0x4dc>)
   1a9a0:	f01c fe67 	bl	37672 <__sprintf_chk>
		rsp_send(buf, strlen(buf));
   1a9a4:	a803      	add	r0, sp, #12
   1a9a6:	f7fe fb63 	bl	19070 <strlen>
   1a9aa:	4601      	mov	r1, r0
   1a9ac:	a803      	add	r0, sp, #12
   1a9ae:	e62b      	b.n	1a608 <cmd_send+0x28>
		if (err) {
   1a9b0:	2d00      	cmp	r5, #0
   1a9b2:	f43f af76 	beq.w	1a8a2 <cmd_send+0x2c2>
   1a9b6:	e67d      	b.n	1a6b4 <cmd_send+0xd4>
	err = slm_at_tcp_proxy_parse(at_buf, at_buf_len);
   1a9b8:	8829      	ldrh	r1, [r5, #0]
   1a9ba:	483c      	ldr	r0, [pc, #240]	; (1aaac <cmd_send+0x4cc>)
   1a9bc:	f001 fb7e 	bl	1c0bc <slm_at_tcp_proxy_parse>
	if (err > 0) {
   1a9c0:	2800      	cmp	r0, #0
   1a9c2:	f73f aed6 	bgt.w	1a772 <cmd_send+0x192>
	} else if (err == 0) {
   1a9c6:	f43f af6c 	beq.w	1a8a2 <cmd_send+0x2c2>
	} else if (err != -ENOENT) {
   1a9ca:	3002      	adds	r0, #2
   1a9cc:	f47f ae72 	bne.w	1a6b4 <cmd_send+0xd4>
	err = slm_at_udp_proxy_parse(at_buf, at_buf_len);
   1a9d0:	8829      	ldrh	r1, [r5, #0]
   1a9d2:	4836      	ldr	r0, [pc, #216]	; (1aaac <cmd_send+0x4cc>)
   1a9d4:	f002 fb44 	bl	1d060 <slm_at_udp_proxy_parse>
	if (err > 0) {
   1a9d8:	2800      	cmp	r0, #0
   1a9da:	f73f aeca 	bgt.w	1a772 <cmd_send+0x192>
	} else if (err == 0) {
   1a9de:	f43f af60 	beq.w	1a8a2 <cmd_send+0x2c2>
	} else if (err != -ENOENT) {
   1a9e2:	3002      	adds	r0, #2
   1a9e4:	f47f ae66 	bne.w	1a6b4 <cmd_send+0xd4>
	err = slm_at_tcpip_parse(at_buf);
   1a9e8:	4830      	ldr	r0, [pc, #192]	; (1aaac <cmd_send+0x4cc>)
   1a9ea:	f000 fa63 	bl	1aeb4 <slm_at_tcpip_parse>
	if (err == 0) {
   1a9ee:	2800      	cmp	r0, #0
   1a9f0:	f43f af57 	beq.w	1a8a2 <cmd_send+0x2c2>
	} else if (err != -ENOENT) {
   1a9f4:	3002      	adds	r0, #2
   1a9f6:	f47f ae5d 	bne.w	1a6b4 <cmd_send+0xd4>
	err = slm_at_icmp_parse(at_buf);
   1a9fa:	482c      	ldr	r0, [pc, #176]	; (1aaac <cmd_send+0x4cc>)
   1a9fc:	f003 fb96 	bl	1e12c <slm_at_icmp_parse>
	if (err == 0) {
   1aa00:	2800      	cmp	r0, #0
   1aa02:	f43f aeb6 	beq.w	1a772 <cmd_send+0x192>
	} else if (err != -ENOENT) {
   1aa06:	3002      	adds	r0, #2
   1aa08:	f47f ae54 	bne.w	1a6b4 <cmd_send+0xd4>
	err = slm_at_fota_parse(at_buf);
   1aa0c:	4827      	ldr	r0, [pc, #156]	; (1aaac <cmd_send+0x4cc>)
   1aa0e:	f003 fd9f 	bl	1e550 <slm_at_fota_parse>
	if (err == 0) {
   1aa12:	2800      	cmp	r0, #0
   1aa14:	f43f af45 	beq.w	1a8a2 <cmd_send+0x2c2>
	} else if (err != -ENOENT) {
   1aa18:	3002      	adds	r0, #2
   1aa1a:	f47f ae4b 	bne.w	1a6b4 <cmd_send+0xd4>
	err = slm_at_httpc_parse(at_buf, at_buf_len);
   1aa1e:	6829      	ldr	r1, [r5, #0]
   1aa20:	4822      	ldr	r0, [pc, #136]	; (1aaac <cmd_send+0x4cc>)
   1aa22:	f004 fb11 	bl	1f048 <slm_at_httpc_parse>
	if (err == 0) {
   1aa26:	2800      	cmp	r0, #0
   1aa28:	f43f af3b 	beq.w	1a8a2 <cmd_send+0x2c2>
	} else if (err != -ENOENT) {
   1aa2c:	3002      	adds	r0, #2
   1aa2e:	f47f ae41 	bne.w	1a6b4 <cmd_send+0xd4>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
   1aa32:	4923      	ldr	r1, [pc, #140]	; (1aac0 <cmd_send+0x4e0>)
   1aa34:	f640 228c 	movw	r2, #2700	; 0xa8c
   1aa38:	481c      	ldr	r0, [pc, #112]	; (1aaac <cmd_send+0x4cc>)
   1aa3a:	ab02      	add	r3, sp, #8
   1aa3c:	f00b fdc4 	bl	265c8 <at_cmd_write>
	if (err < 0) {
   1aa40:	1e01      	subs	r1, r0, #0
   1aa42:	da0d      	bge.n	1aa60 <cmd_send+0x480>
   1aa44:	4b1c      	ldr	r3, [pc, #112]	; (1aab8 <cmd_send+0x4d8>)
   1aa46:	4a1b      	ldr	r2, [pc, #108]	; (1aab4 <cmd_send+0x4d4>)
		LOG_ERR("AT command error: %d", err);
   1aa48:	481e      	ldr	r0, [pc, #120]	; (1aac4 <cmd_send+0x4e4>)
   1aa4a:	1ad2      	subs	r2, r2, r3
   1aa4c:	08d2      	lsrs	r2, r2, #3
   1aa4e:	0192      	lsls	r2, r2, #6
   1aa50:	f042 0201 	orr.w	r2, r2, #1
   1aa54:	f019 fd67 	bl	34526 <log_1>
		state = AT_CMD_ERROR;
   1aa58:	2301      	movs	r3, #1
   1aa5a:	f88d 3008 	strb.w	r3, [sp, #8]
	switch (state) {
   1aa5e:	e629      	b.n	1a6b4 <cmd_send+0xd4>
   1aa60:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1aa64:	2b03      	cmp	r3, #3
   1aa66:	f63f ae84 	bhi.w	1a772 <cmd_send+0x192>
   1aa6a:	a201      	add	r2, pc, #4	; (adr r2, 1aa70 <cmd_send+0x490>)
   1aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1aa70:	0001aa81 	.word	0x0001aa81
   1aa74:	0001a6b5 	.word	0x0001a6b5
   1aa78:	0001aa8d 	.word	0x0001aa8d
   1aa7c:	0001aaa1 	.word	0x0001aaa1
		rsp_send(buf, strlen(buf));
   1aa80:	480f      	ldr	r0, [pc, #60]	; (1aac0 <cmd_send+0x4e0>)
   1aa82:	f7fe faf5 	bl	19070 <strlen>
   1aa86:	4601      	mov	r1, r0
   1aa88:	480d      	ldr	r0, [pc, #52]	; (1aac0 <cmd_send+0x4e0>)
   1aa8a:	e5bd      	b.n	1a608 <cmd_send+0x28>
		chars = sprintf(str, "+CMS: %d\r\n", err);
   1aa8c:	4b0e      	ldr	r3, [pc, #56]	; (1aac8 <cmd_send+0x4e8>)
   1aa8e:	9100      	str	r1, [sp, #0]
		chars = sprintf(str, "+CME: %d\r\n", err);
   1aa90:	2100      	movs	r1, #0
   1aa92:	2218      	movs	r2, #24
   1aa94:	a803      	add	r0, sp, #12
   1aa96:	f01c fdec 	bl	37672 <__sprintf_chk>
		rsp_send(str, ++chars);
   1aa9a:	1c41      	adds	r1, r0, #1
   1aa9c:	a803      	add	r0, sp, #12
   1aa9e:	e702      	b.n	1a8a6 <cmd_send+0x2c6>
		chars = sprintf(str, "+CME: %d\r\n", err);
   1aaa0:	4b0a      	ldr	r3, [pc, #40]	; (1aacc <cmd_send+0x4ec>)
   1aaa2:	9100      	str	r1, [sp, #0]
   1aaa4:	e7f4      	b.n	1aa90 <cmd_send+0x4b0>
   1aaa6:	bf00      	nop
   1aaa8:	00039479 	.word	0x00039479
   1aaac:	200293dc 	.word	0x200293dc
   1aab0:	20023430 	.word	0x20023430
   1aab4:	00038334 	.word	0x00038334
   1aab8:	0003831c 	.word	0x0003831c
   1aabc:	00039483 	.word	0x00039483
   1aac0:	20029e68 	.word	0x20029e68
   1aac4:	00039497 	.word	0x00039497
   1aac8:	000394ac 	.word	0x000394ac
   1aacc:	000394b7 	.word	0x000394b7

0001aad0 <handle_at_bind.part.0>:
/**@brief handle AT#XRECVFROM commands
 *  AT#XRECVFROM[=<length>]
 *  AT#XRECVFROM? READ command not supported
 *  AT#XRECVFROM=? TEST command not supported
 */
static int handle_at_recvfrom(enum at_cmd_type cmd_type)
   1aad0:	b508      	push	{r3, lr}
   1aad2:	4906      	ldr	r1, [pc, #24]	; (1aaec <handle_at_bind.part.0+0x1c>)
   1aad4:	4b06      	ldr	r3, [pc, #24]	; (1aaf0 <handle_at_bind.part.0+0x20>)
{
	int err = -EINVAL;
	uint16_t length = NET_IPV4_MTU;

	if (client.sock < 0) {
		LOG_ERR("Socket not opened yet");
   1aad6:	4807      	ldr	r0, [pc, #28]	; (1aaf4 <handle_at_bind.part.0+0x24>)
   1aad8:	1ac9      	subs	r1, r1, r3
   1aada:	08c9      	lsrs	r1, r1, #3
   1aadc:	0189      	lsls	r1, r1, #6
   1aade:	f041 0101 	orr.w	r1, r1, #1
   1aae2:	f019 fd11 	bl	34508 <log_0>
	default:
		break;
	}

	return err;
}
   1aae6:	f06f 0015 	mvn.w	r0, #21
   1aaea:	bd08      	pop	{r3, pc}
   1aaec:	000383fc 	.word	0x000383fc
   1aaf0:	0003831c 	.word	0x0003831c
   1aaf4:	00039556 	.word	0x00039556

0001aaf8 <handle_at_getaddrinfo>:
 */
static int handle_at_getaddrinfo(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
   1aaf8:	2380      	movs	r3, #128	; 0x80
{
   1aafa:	b570      	push	{r4, r5, r6, lr}
   1aafc:	b0bc      	sub	sp, #240	; 0xf0
   1aafe:	4605      	mov	r5, r0
	struct addrinfo *result;
	struct addrinfo hints = {
   1ab00:	2250      	movs	r2, #80	; 0x50
   1ab02:	2100      	movs	r1, #0
   1ab04:	a808      	add	r0, sp, #32
	int size = TCPIP_MAX_URL;
   1ab06:	9302      	str	r3, [sp, #8]
	struct addrinfo hints = {
   1ab08:	f01c fc9b 	bl	37442 <memset>
   1ab0c:	2301      	movs	r3, #1
		.ai_family = AF_INET
	};
	struct sockaddr_in *host;
	char ipv4addr[NET_IPV4_ADDR_LEN];

	switch (cmd_type) {
   1ab0e:	429d      	cmp	r5, r3
	struct addrinfo hints = {
   1ab10:	930a      	str	r3, [sp, #40]	; 0x28
	switch (cmd_type) {
   1ab12:	d004      	beq.n	1ab1e <handle_at_getaddrinfo+0x26>
			return err;
		}
		url[size] = '\0';
		if (check_for_ipv4(url, strlen(url))) {
			LOG_ERR("already IPv4 address");
			return -EINVAL;
   1ab14:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
   1ab18:	4620      	mov	r0, r4
   1ab1a:	b03c      	add	sp, #240	; 0xf0
   1ab1c:	bd70      	pop	{r4, r5, r6, pc}
		if (at_params_valid_count_get(&at_param_list) < 2) {
   1ab1e:	4840      	ldr	r0, [pc, #256]	; (1ac20 <handle_at_getaddrinfo+0x128>)
   1ab20:	f01b fec1 	bl	368a6 <at_params_valid_count_get>
   1ab24:	2801      	cmp	r0, #1
   1ab26:	d9f5      	bls.n	1ab14 <handle_at_getaddrinfo+0x1c>
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1ab28:	4629      	mov	r1, r5
   1ab2a:	483d      	ldr	r0, [pc, #244]	; (1ac20 <handle_at_getaddrinfo+0x128>)
   1ab2c:	ab02      	add	r3, sp, #8
   1ab2e:	aa1c      	add	r2, sp, #112	; 0x70
   1ab30:	f01b fe96 	bl	36860 <at_params_string_get>
		if (err) {
   1ab34:	4604      	mov	r4, r0
   1ab36:	2800      	cmp	r0, #0
   1ab38:	d1ee      	bne.n	1ab18 <handle_at_getaddrinfo+0x20>
		url[size] = '\0';
   1ab3a:	9b02      	ldr	r3, [sp, #8]
   1ab3c:	aa3c      	add	r2, sp, #240	; 0xf0
   1ab3e:	4413      	add	r3, r2
   1ab40:	f803 0c80 	strb.w	r0, [r3, #-128]
		if (check_for_ipv4(url, strlen(url))) {
   1ab44:	a81c      	add	r0, sp, #112	; 0x70
   1ab46:	f7fe fa93 	bl	19070 <strlen>
   1ab4a:	b2c1      	uxtb	r1, r0
   1ab4c:	a81c      	add	r0, sp, #112	; 0x70
   1ab4e:	f018 ffbd 	bl	33acc <check_for_ipv4>
   1ab52:	4606      	mov	r6, r0
   1ab54:	b150      	cbz	r0, 1ab6c <handle_at_getaddrinfo+0x74>
   1ab56:	4b33      	ldr	r3, [pc, #204]	; (1ac24 <handle_at_getaddrinfo+0x12c>)
   1ab58:	4933      	ldr	r1, [pc, #204]	; (1ac28 <handle_at_getaddrinfo+0x130>)
			LOG_ERR("already IPv4 address");
   1ab5a:	4834      	ldr	r0, [pc, #208]	; (1ac2c <handle_at_getaddrinfo+0x134>)
   1ab5c:	1ac9      	subs	r1, r1, r3
   1ab5e:	08c9      	lsrs	r1, r1, #3
   1ab60:	0189      	lsls	r1, r1, #6
   1ab62:	f041 0101 	orr.w	r1, r1, #1
   1ab66:	f019 fccf 	bl	34508 <log_0>
   1ab6a:	e7d3      	b.n	1ab14 <handle_at_getaddrinfo+0x1c>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   1ab6c:	4621      	mov	r1, r4
   1ab6e:	ab03      	add	r3, sp, #12
   1ab70:	aa08      	add	r2, sp, #32
   1ab72:	a81c      	add	r0, sp, #112	; 0x70
   1ab74:	f01a f8b8 	bl	34ce8 <zsock_getaddrinfo>
		if (err) {
   1ab78:	4604      	mov	r4, r0
   1ab7a:	b1d8      	cbz	r0, 1abb4 <handle_at_getaddrinfo+0xbc>
   1ab7c:	4b29      	ldr	r3, [pc, #164]	; (1ac24 <handle_at_getaddrinfo+0x12c>)
   1ab7e:	4a2a      	ldr	r2, [pc, #168]	; (1ac28 <handle_at_getaddrinfo+0x130>)
			LOG_ERR("getaddrinfo() failed %d", err);
   1ab80:	4601      	mov	r1, r0
   1ab82:	1ad2      	subs	r2, r2, r3
   1ab84:	08d2      	lsrs	r2, r2, #3
   1ab86:	0192      	lsls	r2, r2, #6
   1ab88:	4829      	ldr	r0, [pc, #164]	; (1ac30 <handle_at_getaddrinfo+0x138>)
   1ab8a:	f042 0201 	orr.w	r2, r2, #1
   1ab8e:	f019 fcca 	bl	34526 <log_1>
			sprintf(rsp_buf, "#XGETADDRINFO: %d\r\n", -err);
   1ab92:	4263      	negs	r3, r4
   1ab94:	4631      	mov	r1, r6
   1ab96:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ab9a:	9300      	str	r3, [sp, #0]
   1ab9c:	4825      	ldr	r0, [pc, #148]	; (1ac34 <handle_at_getaddrinfo+0x13c>)
   1ab9e:	4b26      	ldr	r3, [pc, #152]	; (1ac38 <handle_at_getaddrinfo+0x140>)
   1aba0:	f01c fd67 	bl	37672 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1aba4:	4823      	ldr	r0, [pc, #140]	; (1ac34 <handle_at_getaddrinfo+0x13c>)
   1aba6:	f7fe fa63 	bl	19070 <strlen>
   1abaa:	4601      	mov	r1, r0
   1abac:	4821      	ldr	r0, [pc, #132]	; (1ac34 <handle_at_getaddrinfo+0x13c>)
   1abae:	f7ff fb1b 	bl	1a1e8 <rsp_send>
			return err;
   1abb2:	e7b1      	b.n	1ab18 <handle_at_getaddrinfo+0x20>
		} else if (result == NULL) {
   1abb4:	9b03      	ldr	r3, [sp, #12]
   1abb6:	b9bb      	cbnz	r3, 1abe8 <handle_at_getaddrinfo+0xf0>
   1abb8:	4b1a      	ldr	r3, [pc, #104]	; (1ac24 <handle_at_getaddrinfo+0x12c>)
   1abba:	491b      	ldr	r1, [pc, #108]	; (1ac28 <handle_at_getaddrinfo+0x130>)
			LOG_ERR("Address not found\n");
   1abbc:	481f      	ldr	r0, [pc, #124]	; (1ac3c <handle_at_getaddrinfo+0x144>)
   1abbe:	1ac9      	subs	r1, r1, r3
   1abc0:	08c9      	lsrs	r1, r1, #3
   1abc2:	0189      	lsls	r1, r1, #6
   1abc4:	f041 0101 	orr.w	r1, r1, #1
   1abc8:	f019 fc9e 	bl	34508 <log_0>
			sprintf(rsp_buf, "#XGETADDRINFO: not found\r\n");
   1abcc:	491c      	ldr	r1, [pc, #112]	; (1ac40 <handle_at_getaddrinfo+0x148>)
   1abce:	4819      	ldr	r0, [pc, #100]	; (1ac34 <handle_at_getaddrinfo+0x13c>)
   1abd0:	f01c fd76 	bl	376c0 <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1abd4:	4817      	ldr	r0, [pc, #92]	; (1ac34 <handle_at_getaddrinfo+0x13c>)
   1abd6:	f7fe fa4b 	bl	19070 <strlen>
   1abda:	4601      	mov	r1, r0
   1abdc:	4815      	ldr	r0, [pc, #84]	; (1ac34 <handle_at_getaddrinfo+0x13c>)
   1abde:	f7ff fb03 	bl	1a1e8 <rsp_send>
			return -ENOENT;
   1abe2:	f06f 0401 	mvn.w	r4, #1
   1abe6:	e797      	b.n	1ab18 <handle_at_getaddrinfo+0x20>
		inet_ntop(AF_INET, &(host->sin_addr.s_addr),
   1abe8:	6999      	ldr	r1, [r3, #24]
   1abea:	3104      	adds	r1, #4
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   1abec:	ae04      	add	r6, sp, #16
   1abee:	4632      	mov	r2, r6
   1abf0:	2310      	movs	r3, #16
   1abf2:	4628      	mov	r0, r5
   1abf4:	f007 fe9e 	bl	22934 <z_impl_net_addr_ntop>
		sprintf(rsp_buf, "#XGETADDRINFO: %s\r\n", ipv4addr);
   1abf8:	f640 228c 	movw	r2, #2700	; 0xa8c
   1abfc:	4621      	mov	r1, r4
   1abfe:	4b11      	ldr	r3, [pc, #68]	; (1ac44 <handle_at_getaddrinfo+0x14c>)
   1ac00:	9600      	str	r6, [sp, #0]
   1ac02:	480c      	ldr	r0, [pc, #48]	; (1ac34 <handle_at_getaddrinfo+0x13c>)
   1ac04:	f01c fd35 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ac08:	480a      	ldr	r0, [pc, #40]	; (1ac34 <handle_at_getaddrinfo+0x13c>)
   1ac0a:	f7fe fa31 	bl	19070 <strlen>
   1ac0e:	4601      	mov	r1, r0
   1ac10:	4808      	ldr	r0, [pc, #32]	; (1ac34 <handle_at_getaddrinfo+0x13c>)
   1ac12:	f7ff fae9 	bl	1a1e8 <rsp_send>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   1ac16:	9803      	ldr	r0, [sp, #12]
   1ac18:	f01a f868 	bl	34cec <zsock_freeaddrinfo>
}
   1ac1c:	e77c      	b.n	1ab18 <handle_at_getaddrinfo+0x20>
   1ac1e:	bf00      	nop
   1ac20:	20023430 	.word	0x20023430
   1ac24:	0003831c 	.word	0x0003831c
   1ac28:	000383fc 	.word	0x000383fc
   1ac2c:	0003956c 	.word	0x0003956c
   1ac30:	00039581 	.word	0x00039581
   1ac34:	20028950 	.word	0x20028950
   1ac38:	00039599 	.word	0x00039599
   1ac3c:	00039600 	.word	0x00039600
   1ac40:	000395ad 	.word	0x000395ad
   1ac44:	000395c8 	.word	0x000395c8

0001ac48 <parse_host_by_ipv4>:
{
   1ac48:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
   1ac4a:	2301      	movs	r3, #1
   1ac4c:	4a07      	ldr	r2, [pc, #28]	; (1ac6c <parse_host_by_ipv4+0x24>)
	address4->sin_port = htons(port);
   1ac4e:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
   1ac50:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
   1ac52:	8051      	strh	r1, [r2, #2]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
   1ac54:	4601      	mov	r1, r0
   1ac56:	3204      	adds	r2, #4
   1ac58:	4618      	mov	r0, r3
   1ac5a:	f01a f8ff 	bl	34e5c <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, ip, &address4->sin_addr) == 1) {
   1ac5e:	2801      	cmp	r0, #1
}
   1ac60:	bf14      	ite	ne
   1ac62:	f06f 0015 	mvnne.w	r0, #21
   1ac66:	2000      	moveq	r0, #0
   1ac68:	bd08      	pop	{r3, pc}
   1ac6a:	bf00      	nop
   1ac6c:	20023488 	.word	0x20023488

0001ac70 <parse_host_by_name>:
{
   1ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac72:	4604      	mov	r4, r0
   1ac74:	4617      	mov	r7, r2
	struct addrinfo hints = {
   1ac76:	2601      	movs	r6, #1
{
   1ac78:	b09b      	sub	sp, #108	; 0x6c
	struct addrinfo hints = {
   1ac7a:	2250      	movs	r2, #80	; 0x50
{
   1ac7c:	460d      	mov	r5, r1
	struct addrinfo hints = {
   1ac7e:	a806      	add	r0, sp, #24
   1ac80:	2100      	movs	r1, #0
   1ac82:	f01c fbde 	bl	37442 <memset>
	return zsock_getaddrinfo(host, service, hints, res);
   1ac86:	4620      	mov	r0, r4
   1ac88:	2100      	movs	r1, #0
   1ac8a:	ab01      	add	r3, sp, #4
   1ac8c:	aa06      	add	r2, sp, #24
   1ac8e:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1ac92:	f01a f829 	bl	34ce8 <zsock_getaddrinfo>
	if (err) {
   1ac96:	4604      	mov	r4, r0
   1ac98:	b160      	cbz	r0, 1acb4 <parse_host_by_name+0x44>
   1ac9a:	4a16      	ldr	r2, [pc, #88]	; (1acf4 <parse_host_by_name+0x84>)
   1ac9c:	4b16      	ldr	r3, [pc, #88]	; (1acf8 <parse_host_by_name+0x88>)
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
   1ac9e:	4601      	mov	r1, r0
   1aca0:	1ad2      	subs	r2, r2, r3
   1aca2:	08d2      	lsrs	r2, r2, #3
   1aca4:	0192      	lsls	r2, r2, #6
   1aca6:	4815      	ldr	r0, [pc, #84]	; (1acfc <parse_host_by_name+0x8c>)
   1aca8:	4332      	orrs	r2, r6
   1acaa:	f019 fc3c 	bl	34526 <log_1>
}
   1acae:	4620      	mov	r0, r4
   1acb0:	b01b      	add	sp, #108	; 0x6c
   1acb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (result == NULL) {
   1acb4:	9b01      	ldr	r3, [sp, #4]
   1acb6:	b963      	cbnz	r3, 1acd2 <parse_host_by_name+0x62>
   1acb8:	4b0f      	ldr	r3, [pc, #60]	; (1acf8 <parse_host_by_name+0x88>)
   1acba:	490e      	ldr	r1, [pc, #56]	; (1acf4 <parse_host_by_name+0x84>)
		LOG_ERR("ERROR: Address not found\n");
   1acbc:	4810      	ldr	r0, [pc, #64]	; (1ad00 <parse_host_by_name+0x90>)
   1acbe:	1ac9      	subs	r1, r1, r3
   1acc0:	08c9      	lsrs	r1, r1, #3
   1acc2:	0189      	lsls	r1, r1, #6
   1acc4:	f041 0101 	orr.w	r1, r1, #1
   1acc8:	f019 fc1e 	bl	34508 <log_0>
		return -ENOENT;
   1accc:	f06f 0401 	mvn.w	r4, #1
   1acd0:	e7ed      	b.n	1acae <parse_host_by_name+0x3e>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   1acd2:	699b      	ldr	r3, [r3, #24]
	server4->sin_addr.s_addr =
   1acd4:	490b      	ldr	r1, [pc, #44]	; (1ad04 <parse_host_by_name+0x94>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   1acd6:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
   1acd8:	ba6d      	rev16	r5, r5
	server4->sin_addr.s_addr =
   1acda:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
   1acdc:	800e      	strh	r6, [r1, #0]
	server4->sin_port = htons(port);
   1acde:	804d      	strh	r5, [r1, #2]
   1ace0:	2310      	movs	r3, #16
   1ace2:	4630      	mov	r0, r6
   1ace4:	aa02      	add	r2, sp, #8
   1ace6:	3104      	adds	r1, #4
   1ace8:	f007 fe24 	bl	22934 <z_impl_net_addr_ntop>
	zsock_freeaddrinfo(ai);
   1acec:	9801      	ldr	r0, [sp, #4]
   1acee:	f019 fffd 	bl	34cec <zsock_freeaddrinfo>
	return 0;
   1acf2:	e7dc      	b.n	1acae <parse_host_by_name+0x3e>
   1acf4:	000383fc 	.word	0x000383fc
   1acf8:	0003831c 	.word	0x0003831c
   1acfc:	000395dc 	.word	0x000395dc
   1ad00:	000395f9 	.word	0x000395f9
   1ad04:	20023488 	.word	0x20023488

0001ad08 <handle_at_socketopt>:
{
   1ad08:	b530      	push	{r4, r5, lr}
	switch (cmd_type) {
   1ad0a:	2801      	cmp	r0, #1
{
   1ad0c:	4604      	mov	r4, r0
   1ad0e:	b087      	sub	sp, #28
	switch (cmd_type) {
   1ad10:	d005      	beq.n	1ad1e <handle_at_socketopt+0x16>
   1ad12:	2803      	cmp	r0, #3
   1ad14:	f000 80a7 	beq.w	1ae66 <handle_at_socketopt+0x15e>
			return -EINVAL;
   1ad18:	f06f 0415 	mvn.w	r4, #21
   1ad1c:	e069      	b.n	1adf2 <handle_at_socketopt+0xea>
		if (client.sock < 0) {
   1ad1e:	4b58      	ldr	r3, [pc, #352]	; (1ae80 <handle_at_socketopt+0x178>)
   1ad20:	681a      	ldr	r2, [r3, #0]
   1ad22:	461d      	mov	r5, r3
   1ad24:	2a00      	cmp	r2, #0
   1ad26:	da0a      	bge.n	1ad3e <handle_at_socketopt+0x36>
   1ad28:	4956      	ldr	r1, [pc, #344]	; (1ae84 <handle_at_socketopt+0x17c>)
   1ad2a:	4b57      	ldr	r3, [pc, #348]	; (1ae88 <handle_at_socketopt+0x180>)
			LOG_ERR("Socket not opened yet");
   1ad2c:	4857      	ldr	r0, [pc, #348]	; (1ae8c <handle_at_socketopt+0x184>)
   1ad2e:	1ac9      	subs	r1, r1, r3
   1ad30:	08c9      	lsrs	r1, r1, #3
   1ad32:	0189      	lsls	r1, r1, #6
   1ad34:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Invalid role");
   1ad38:	f019 fbe6 	bl	34508 <log_0>
			return err;
   1ad3c:	e7ec      	b.n	1ad18 <handle_at_socketopt+0x10>
		if (client.role != AT_SOCKET_ROLE_CLIENT) {
   1ad3e:	689b      	ldr	r3, [r3, #8]
   1ad40:	b143      	cbz	r3, 1ad54 <handle_at_socketopt+0x4c>
   1ad42:	4950      	ldr	r1, [pc, #320]	; (1ae84 <handle_at_socketopt+0x17c>)
   1ad44:	4b50      	ldr	r3, [pc, #320]	; (1ae88 <handle_at_socketopt+0x180>)
			LOG_ERR("Invalid role");
   1ad46:	4852      	ldr	r0, [pc, #328]	; (1ae90 <handle_at_socketopt+0x188>)
   1ad48:	1ac9      	subs	r1, r1, r3
   1ad4a:	08c9      	lsrs	r1, r1, #3
   1ad4c:	0189      	lsls	r1, r1, #6
   1ad4e:	f041 0101 	orr.w	r1, r1, #1
   1ad52:	e7f1      	b.n	1ad38 <handle_at_socketopt+0x30>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1ad54:	484f      	ldr	r0, [pc, #316]	; (1ae94 <handle_at_socketopt+0x18c>)
   1ad56:	f01b fda6 	bl	368a6 <at_params_valid_count_get>
   1ad5a:	2802      	cmp	r0, #2
   1ad5c:	d9dc      	bls.n	1ad18 <handle_at_socketopt+0x10>
		err = at_params_short_get(&at_param_list, 1, &op);
   1ad5e:	4621      	mov	r1, r4
   1ad60:	484c      	ldr	r0, [pc, #304]	; (1ae94 <handle_at_socketopt+0x18c>)
   1ad62:	aa02      	add	r2, sp, #8
   1ad64:	f01b fd57 	bl	36816 <at_params_short_get>
		if (err) {
   1ad68:	4604      	mov	r4, r0
   1ad6a:	2800      	cmp	r0, #0
   1ad6c:	d141      	bne.n	1adf2 <handle_at_socketopt+0xea>
		err = at_params_short_get(&at_param_list, 2, &name);
   1ad6e:	2102      	movs	r1, #2
   1ad70:	4848      	ldr	r0, [pc, #288]	; (1ae94 <handle_at_socketopt+0x18c>)
   1ad72:	f10d 020a 	add.w	r2, sp, #10
   1ad76:	f01b fd4e 	bl	36816 <at_params_short_get>
		if (err) {
   1ad7a:	4604      	mov	r4, r0
   1ad7c:	2800      	cmp	r0, #0
   1ad7e:	d138      	bne.n	1adf2 <handle_at_socketopt+0xea>
		if (op == AT_SOCKETOPT_SET) {
   1ad80:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1ad84:	2b01      	cmp	r3, #1
   1ad86:	d137      	bne.n	1adf8 <handle_at_socketopt+0xf0>
			if (at_params_valid_count_get(&at_param_list) < 4) {
   1ad88:	4842      	ldr	r0, [pc, #264]	; (1ae94 <handle_at_socketopt+0x18c>)
   1ad8a:	f01b fd8c 	bl	368a6 <at_params_valid_count_get>
   1ad8e:	2803      	cmp	r0, #3
   1ad90:	d9c2      	bls.n	1ad18 <handle_at_socketopt+0x10>
			err = at_params_int_get(&at_param_list, 3, &value);
   1ad92:	2103      	movs	r1, #3
   1ad94:	483f      	ldr	r0, [pc, #252]	; (1ae94 <handle_at_socketopt+0x18c>)
   1ad96:	aa03      	add	r2, sp, #12
   1ad98:	f01b fd4f 	bl	3683a <at_params_int_get>
			if (err) {
   1ad9c:	4604      	mov	r4, r0
   1ad9e:	bb40      	cbnz	r0, 1adf2 <handle_at_socketopt+0xea>
			err = do_socketopt_set(name, value);
   1ada0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
	switch (name) {
   1ada4:	2a04      	cmp	r2, #4
   1ada6:	d003      	beq.n	1adb0 <handle_at_socketopt+0xa8>
   1ada8:	2a14      	cmp	r2, #20
   1adaa:	d006      	beq.n	1adba <handle_at_socketopt+0xb2>
   1adac:	2a02      	cmp	r2, #2
	switch (name) {
   1adae:	d158      	bne.n	1ae62 <handle_at_socketopt+0x15a>
		sprintf(rsp_buf, "#XSOCKETOPT: ignored\r\n");
   1adb0:	4939      	ldr	r1, [pc, #228]	; (1ae98 <handle_at_socketopt+0x190>)
		sprintf(rsp_buf, "#XSOCKETOPT: not supported\r\n");
   1adb2:	483a      	ldr	r0, [pc, #232]	; (1ae9c <handle_at_socketopt+0x194>)
   1adb4:	f01c fc84 	bl	376c0 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1adb8:	e04b      	b.n	1ae52 <handle_at_socketopt+0x14a>
		struct timeval tmo = { .tv_sec = value };
   1adba:	2300      	movs	r3, #0
   1adbc:	9305      	str	r3, [sp, #20]
   1adbe:	9b03      	ldr	r3, [sp, #12]
		ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
   1adc0:	6828      	ldr	r0, [r5, #0]
		struct timeval tmo = { .tv_sec = value };
   1adc2:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1adc4:	2308      	movs	r3, #8
   1adc6:	2101      	movs	r1, #1
   1adc8:	9300      	str	r3, [sp, #0]
   1adca:	ab04      	add	r3, sp, #16
   1adcc:	f01a f868 	bl	34ea0 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   1add0:	1e04      	subs	r4, r0, #0
   1add2:	da0e      	bge.n	1adf2 <handle_at_socketopt+0xea>
   1add4:	4a2c      	ldr	r2, [pc, #176]	; (1ae88 <handle_at_socketopt+0x180>)
   1add6:	4d2b      	ldr	r5, [pc, #172]	; (1ae84 <handle_at_socketopt+0x17c>)
   1add8:	1aad      	subs	r5, r5, r2
   1adda:	08ed      	lsrs	r5, r5, #3
			LOG_ERR("setsockopt() error: %d", -errno);
   1addc:	f01a fa9b 	bl	35316 <__errno>
   1ade0:	01ad      	lsls	r5, r5, #6
   1ade2:	f045 0501 	orr.w	r5, r5, #1
   1ade6:	462a      	mov	r2, r5
   1ade8:	6801      	ldr	r1, [r0, #0]
   1adea:	482d      	ldr	r0, [pc, #180]	; (1aea0 <handle_at_socketopt+0x198>)
   1adec:	4249      	negs	r1, r1
			LOG_ERR("getsockopt() error: %d", -errno);
   1adee:	f019 fb9a 	bl	34526 <log_1>
}
   1adf2:	4620      	mov	r0, r4
   1adf4:	b007      	add	sp, #28
   1adf6:	bd30      	pop	{r4, r5, pc}
		} else if (op == AT_SOCKETOPT_GET) {
   1adf8:	2b00      	cmp	r3, #0
   1adfa:	d1fa      	bne.n	1adf2 <handle_at_socketopt+0xea>
			err = do_socketopt_get(name);
   1adfc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
	switch (name) {
   1ae00:	2b04      	cmp	r3, #4
   1ae02:	d0d5      	beq.n	1adb0 <handle_at_socketopt+0xa8>
   1ae04:	2b14      	cmp	r3, #20
   1ae06:	d001      	beq.n	1ae0c <handle_at_socketopt+0x104>
   1ae08:	2b02      	cmp	r3, #2
   1ae0a:	e7d0      	b.n	1adae <handle_at_socketopt+0xa6>
		socklen_t len = sizeof(struct timeval);
   1ae0c:	2308      	movs	r3, #8
		ret = getsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
   1ae0e:	6828      	ldr	r0, [r5, #0]
		socklen_t len = sizeof(struct timeval);
   1ae10:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   1ae12:	ab03      	add	r3, sp, #12
   1ae14:	9300      	str	r3, [sp, #0]
   1ae16:	2214      	movs	r2, #20
   1ae18:	2101      	movs	r1, #1
   1ae1a:	ab04      	add	r3, sp, #16
   1ae1c:	f01a f825 	bl	34e6a <z_impl_zsock_getsockopt>
		if (ret) {
   1ae20:	4604      	mov	r4, r0
   1ae22:	b168      	cbz	r0, 1ae40 <handle_at_socketopt+0x138>
   1ae24:	4a18      	ldr	r2, [pc, #96]	; (1ae88 <handle_at_socketopt+0x180>)
   1ae26:	4d17      	ldr	r5, [pc, #92]	; (1ae84 <handle_at_socketopt+0x17c>)
   1ae28:	1aad      	subs	r5, r5, r2
			LOG_ERR("getsockopt() error: %d", -errno);
   1ae2a:	f01a fa74 	bl	35316 <__errno>
   1ae2e:	08ed      	lsrs	r5, r5, #3
   1ae30:	6801      	ldr	r1, [r0, #0]
   1ae32:	01ad      	lsls	r5, r5, #6
   1ae34:	f045 0501 	orr.w	r5, r5, #1
   1ae38:	462a      	mov	r2, r5
   1ae3a:	481a      	ldr	r0, [pc, #104]	; (1aea4 <handle_at_socketopt+0x19c>)
   1ae3c:	4249      	negs	r1, r1
   1ae3e:	e7d6      	b.n	1adee <handle_at_socketopt+0xe6>
			sprintf(rsp_buf, "#XSOCKETOPT: %d sec\r\n",
   1ae40:	9b04      	ldr	r3, [sp, #16]
   1ae42:	4601      	mov	r1, r0
   1ae44:	9300      	str	r3, [sp, #0]
   1ae46:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ae4a:	4b17      	ldr	r3, [pc, #92]	; (1aea8 <handle_at_socketopt+0x1a0>)
   1ae4c:	4813      	ldr	r0, [pc, #76]	; (1ae9c <handle_at_socketopt+0x194>)
   1ae4e:	f01c fc10 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ae52:	4812      	ldr	r0, [pc, #72]	; (1ae9c <handle_at_socketopt+0x194>)
   1ae54:	f7fe f90c 	bl	19070 <strlen>
   1ae58:	4601      	mov	r1, r0
   1ae5a:	4810      	ldr	r0, [pc, #64]	; (1ae9c <handle_at_socketopt+0x194>)
   1ae5c:	f7ff f9c4 	bl	1a1e8 <rsp_send>
		break;
   1ae60:	e7c7      	b.n	1adf2 <handle_at_socketopt+0xea>
		sprintf(rsp_buf, "#XSOCKETOPT: not supported\r\n");
   1ae62:	4912      	ldr	r1, [pc, #72]	; (1aeac <handle_at_socketopt+0x1a4>)
   1ae64:	e7a5      	b.n	1adb2 <handle_at_socketopt+0xaa>
		sprintf(rsp_buf, "#XSOCKETOPT: (%d, %d), <name>, <value>\r\n",
   1ae66:	2400      	movs	r4, #0
   1ae68:	2301      	movs	r3, #1
   1ae6a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ae6e:	e9cd 4300 	strd	r4, r3, [sp]
   1ae72:	4621      	mov	r1, r4
   1ae74:	4b0e      	ldr	r3, [pc, #56]	; (1aeb0 <handle_at_socketopt+0x1a8>)
   1ae76:	4809      	ldr	r0, [pc, #36]	; (1ae9c <handle_at_socketopt+0x194>)
   1ae78:	f01c fbfb 	bl	37672 <__sprintf_chk>
   1ae7c:	e7e9      	b.n	1ae52 <handle_at_socketopt+0x14a>
   1ae7e:	bf00      	nop
   1ae80:	20023470 	.word	0x20023470
   1ae84:	000383fc 	.word	0x000383fc
   1ae88:	0003831c 	.word	0x0003831c
   1ae8c:	00039556 	.word	0x00039556
   1ae90:	00039613 	.word	0x00039613
   1ae94:	20023430 	.word	0x20023430
   1ae98:	00039620 	.word	0x00039620
   1ae9c:	20028950 	.word	0x20028950
   1aea0:	00039637 	.word	0x00039637
   1aea4:	0003966b 	.word	0x0003966b
   1aea8:	00039682 	.word	0x00039682
   1aeac:	0003964e 	.word	0x0003964e
   1aeb0:	00039698 	.word	0x00039698

0001aeb4 <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const char *at_cmd)
{
   1aeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aeb8:	4e17      	ldr	r6, [pc, #92]	; (1af18 <slm_at_tcpip_parse+0x64>)
   1aeba:	4605      	mov	r5, r0
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1aebc:	2400      	movs	r4, #0
   1aebe:	4637      	mov	r7, r6
		if (slm_util_cmd_casecmp(at_cmd, tcpip_at_list[i].string)) {
   1aec0:	4628      	mov	r0, r5
   1aec2:	6871      	ldr	r1, [r6, #4]
   1aec4:	f7ff f82a 	bl	19f1c <slm_util_cmd_casecmp>
   1aec8:	b1f0      	cbz	r0, 1af08 <slm_at_tcpip_parse+0x54>
			ret = at_parser_params_from_str(at_cmd, NULL,
   1aeca:	2100      	movs	r1, #0
   1aecc:	4628      	mov	r0, r5
   1aece:	4a13      	ldr	r2, [pc, #76]	; (1af1c <slm_at_tcpip_parse+0x68>)
   1aed0:	f01b fba1 	bl	36616 <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
   1aed4:	4601      	mov	r1, r0
   1aed6:	b168      	cbz	r0, 1aef4 <slm_at_tcpip_parse+0x40>
   1aed8:	4b11      	ldr	r3, [pc, #68]	; (1af20 <slm_at_tcpip_parse+0x6c>)
   1aeda:	4a12      	ldr	r2, [pc, #72]	; (1af24 <slm_at_tcpip_parse+0x70>)
				LOG_ERR("Failed to parse AT command %d", ret);
   1aedc:	4812      	ldr	r0, [pc, #72]	; (1af28 <slm_at_tcpip_parse+0x74>)
   1aede:	1ad2      	subs	r2, r2, r3
   1aee0:	08d2      	lsrs	r2, r2, #3
   1aee2:	0192      	lsls	r2, r2, #6
   1aee4:	f042 0201 	orr.w	r2, r2, #1
   1aee8:	f019 fb1d 	bl	34526 <log_1>
				return -EINVAL;
   1aeec:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
   1aef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			type = at_parser_cmd_type_get(at_cmd);
   1aef4:	4628      	mov	r0, r5
   1aef6:	f01b fb91 	bl	3661c <at_parser_cmd_type_get>
			ret = tcpip_at_list[i].handler(type);
   1aefa:	230c      	movs	r3, #12
   1aefc:	fb03 7404 	mla	r4, r3, r4, r7
   1af00:	68a3      	ldr	r3, [r4, #8]
}
   1af02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			ret = tcpip_at_list[i].handler(type);
   1af06:	4718      	bx	r3
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1af08:	3401      	adds	r4, #1
   1af0a:	2c0b      	cmp	r4, #11
   1af0c:	f106 060c 	add.w	r6, r6, #12
   1af10:	d1d6      	bne.n	1aec0 <slm_at_tcpip_parse+0xc>
	int ret = -ENOENT;
   1af12:	f06f 0001 	mvn.w	r0, #1
   1af16:	e7eb      	b.n	1aef0 <slm_at_tcpip_parse+0x3c>
   1af18:	00038588 	.word	0x00038588
   1af1c:	20023430 	.word	0x20023430
   1af20:	0003831c 	.word	0x0003831c
   1af24:	000383fc 	.word	0x000383fc
   1af28:	000393de 	.word	0x000393de

0001af2c <slm_at_tcpip_clac>:

/**@brief API to list TCP/IP AT commands
 */
void slm_at_tcpip_clac(void)
{
   1af2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1af2e:	2400      	movs	r4, #0
   1af30:	4d0c      	ldr	r5, [pc, #48]	; (1af64 <slm_at_tcpip_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", tcpip_at_list[i].string);
   1af32:	4f0d      	ldr	r7, [pc, #52]	; (1af68 <slm_at_tcpip_clac+0x3c>)
   1af34:	4e0d      	ldr	r6, [pc, #52]	; (1af6c <slm_at_tcpip_clac+0x40>)
   1af36:	686b      	ldr	r3, [r5, #4]
   1af38:	f640 228c 	movw	r2, #2700	; 0xa8c
   1af3c:	2100      	movs	r1, #0
   1af3e:	9300      	str	r3, [sp, #0]
   1af40:	4630      	mov	r0, r6
   1af42:	463b      	mov	r3, r7
   1af44:	f01c fb95 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1af48:	4630      	mov	r0, r6
   1af4a:	f7fe f891 	bl	19070 <strlen>
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1af4e:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
   1af50:	4601      	mov	r1, r0
   1af52:	4630      	mov	r0, r6
   1af54:	f7ff f948 	bl	1a1e8 <rsp_send>
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1af58:	2c0b      	cmp	r4, #11
   1af5a:	f105 050c 	add.w	r5, r5, #12
   1af5e:	d1ea      	bne.n	1af36 <slm_at_tcpip_clac+0xa>
	}
}
   1af60:	b003      	add	sp, #12
   1af62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af64:	00038588 	.word	0x00038588
   1af68:	000395d7 	.word	0x000395d7
   1af6c:	20028950 	.word	0x20028950

0001af70 <slm_at_tcpip_init>:
 */
int slm_at_tcpip_init(void)
{
	client.sock = INVALID_SOCKET;
	client.sec_tag = INVALID_SEC_TAG;
	client.role = AT_SOCKET_ROLE_CLIENT;
   1af70:	2000      	movs	r0, #0
	client.sock = INVALID_SOCKET;
   1af72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1af76:	4b04      	ldr	r3, [pc, #16]	; (1af88 <slm_at_tcpip_init+0x18>)
	client.sec_tag = INVALID_SEC_TAG;
   1af78:	e9c3 2200 	strd	r2, r2, [r3]
	client.sock_peer = INVALID_SOCKET;
   1af7c:	e9c3 0202 	strd	r0, r2, [r3, #8]
	client.connected = false;
   1af80:	7518      	strb	r0, [r3, #20]
	client.ip_proto = IPPROTO_IP;
   1af82:	6118      	str	r0, [r3, #16]
	return 0;
}
   1af84:	4770      	bx	lr
   1af86:	bf00      	nop
   1af88:	20023470 	.word	0x20023470

0001af8c <do_socket_close>:
{
   1af8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (client.sock > 0) {
   1af8e:	4d1b      	ldr	r5, [pc, #108]	; (1affc <do_socket_close+0x70>)
{
   1af90:	4606      	mov	r6, r0
	if (client.sock > 0) {
   1af92:	6828      	ldr	r0, [r5, #0]
   1af94:	2800      	cmp	r0, #0
   1af96:	dd2f      	ble.n	1aff8 <do_socket_close+0x6c>
	return z_impl_zsock_close(sock);
   1af98:	f019 feb9 	bl	34d0e <z_impl_zsock_close>
		if (ret < 0) {
   1af9c:	1e04      	subs	r4, r0, #0
   1af9e:	da12      	bge.n	1afc6 <do_socket_close+0x3a>
   1afa0:	4a17      	ldr	r2, [pc, #92]	; (1b000 <do_socket_close+0x74>)
   1afa2:	4c18      	ldr	r4, [pc, #96]	; (1b004 <do_socket_close+0x78>)
   1afa4:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   1afa6:	f01a f9b6 	bl	35316 <__errno>
   1afaa:	08e4      	lsrs	r4, r4, #3
   1afac:	6801      	ldr	r1, [r0, #0]
   1afae:	01a4      	lsls	r4, r4, #6
   1afb0:	f044 0402 	orr.w	r4, r4, #2
   1afb4:	4622      	mov	r2, r4
   1afb6:	4814      	ldr	r0, [pc, #80]	; (1b008 <do_socket_close+0x7c>)
   1afb8:	4249      	negs	r1, r1
   1afba:	f019 fab4 	bl	34526 <log_1>
			ret = -errno;
   1afbe:	f01a f9aa 	bl	35316 <__errno>
   1afc2:	6804      	ldr	r4, [r0, #0]
   1afc4:	4264      	negs	r4, r4
		if (client.sock_peer > 0) {
   1afc6:	68e8      	ldr	r0, [r5, #12]
   1afc8:	2800      	cmp	r0, #0
   1afca:	dd01      	ble.n	1afd0 <do_socket_close+0x44>
   1afcc:	f019 fe9f 	bl	34d0e <z_impl_zsock_close>
		slm_at_tcpip_init();
   1afd0:	f7ff ffce 	bl	1af70 <slm_at_tcpip_init>
		sprintf(rsp_buf, "#XSOCKET: %d, closed\r\n", error);
   1afd4:	2100      	movs	r1, #0
   1afd6:	f640 228c 	movw	r2, #2700	; 0xa8c
   1afda:	4b0c      	ldr	r3, [pc, #48]	; (1b00c <do_socket_close+0x80>)
   1afdc:	480c      	ldr	r0, [pc, #48]	; (1b010 <do_socket_close+0x84>)
   1afde:	9600      	str	r6, [sp, #0]
   1afe0:	f01c fb47 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1afe4:	480a      	ldr	r0, [pc, #40]	; (1b010 <do_socket_close+0x84>)
   1afe6:	f7fe f843 	bl	19070 <strlen>
   1afea:	4601      	mov	r1, r0
   1afec:	4808      	ldr	r0, [pc, #32]	; (1b010 <do_socket_close+0x84>)
   1afee:	f7ff f8fb 	bl	1a1e8 <rsp_send>
}
   1aff2:	4620      	mov	r0, r4
   1aff4:	b002      	add	sp, #8
   1aff6:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1aff8:	2400      	movs	r4, #0
	return ret;
   1affa:	e7fa      	b.n	1aff2 <do_socket_close+0x66>
   1affc:	20023470 	.word	0x20023470
   1b000:	0003831c 	.word	0x0003831c
   1b004:	000383fc 	.word	0x000383fc
   1b008:	000396c1 	.word	0x000396c1
   1b00c:	000396d4 	.word	0x000396d4
   1b010:	20028950 	.word	0x20028950

0001b014 <do_recvfrom>:
{
   1b014:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b016:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	ret = recvfrom(client.sock, data, length, 0, NULL, NULL);
   1b01a:	4b4f      	ldr	r3, [pc, #316]	; (1b158 <do_recvfrom+0x144>)
{
   1b01c:	4602      	mov	r2, r0
   1b01e:	af02      	add	r7, sp, #8
	ret = recvfrom(client.sock, data, length, 0, NULL, NULL);
   1b020:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1b022:	2600      	movs	r6, #0
   1b024:	f107 0108 	add.w	r1, r7, #8
   1b028:	4633      	mov	r3, r6
   1b02a:	e9cd 6600 	strd	r6, r6, [sp]
   1b02e:	f019 fef8 	bl	34e22 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   1b032:	1e04      	subs	r4, r0, #0
   1b034:	da3a      	bge.n	1b0ac <do_recvfrom+0x98>
   1b036:	4a49      	ldr	r2, [pc, #292]	; (1b15c <do_recvfrom+0x148>)
   1b038:	4c49      	ldr	r4, [pc, #292]	; (1b160 <do_recvfrom+0x14c>)
   1b03a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("recvfrom() error: %d", -errno);
   1b03c:	f01a f96b 	bl	35316 <__errno>
   1b040:	08e4      	lsrs	r4, r4, #3
   1b042:	6801      	ldr	r1, [r0, #0]
   1b044:	01a4      	lsls	r4, r4, #6
   1b046:	f044 0401 	orr.w	r4, r4, #1
   1b04a:	4622      	mov	r2, r4
   1b04c:	4845      	ldr	r0, [pc, #276]	; (1b164 <do_recvfrom+0x150>)
   1b04e:	4249      	negs	r1, r1
   1b050:	f019 fa69 	bl	34526 <log_1>
		if (errno != EAGAIN && errno != ETIMEDOUT) {
   1b054:	f01a f95f 	bl	35316 <__errno>
   1b058:	6803      	ldr	r3, [r0, #0]
   1b05a:	2b0b      	cmp	r3, #11
   1b05c:	d012      	beq.n	1b084 <do_recvfrom+0x70>
   1b05e:	f01a f95a 	bl	35316 <__errno>
   1b062:	6803      	ldr	r3, [r0, #0]
   1b064:	2b74      	cmp	r3, #116	; 0x74
   1b066:	d00d      	beq.n	1b084 <do_recvfrom+0x70>
			do_socket_close(-errno);
   1b068:	f01a f955 	bl	35316 <__errno>
   1b06c:	6800      	ldr	r0, [r0, #0]
   1b06e:	4240      	negs	r0, r0
   1b070:	f7ff ff8c 	bl	1af8c <do_socket_close>
		return -errno;
   1b074:	f01a f94f 	bl	35316 <__errno>
   1b078:	6800      	ldr	r0, [r0, #0]
   1b07a:	4240      	negs	r0, r0
}
   1b07c:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   1b080:	46bd      	mov	sp, r7
   1b082:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1b084:	f01a f947 	bl	35316 <__errno>
   1b088:	6803      	ldr	r3, [r0, #0]
   1b08a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b08e:	425b      	negs	r3, r3
   1b090:	2100      	movs	r1, #0
   1b092:	9300      	str	r3, [sp, #0]
   1b094:	4834      	ldr	r0, [pc, #208]	; (1b168 <do_recvfrom+0x154>)
   1b096:	4b35      	ldr	r3, [pc, #212]	; (1b16c <do_recvfrom+0x158>)
   1b098:	f01c faeb 	bl	37672 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1b09c:	4832      	ldr	r0, [pc, #200]	; (1b168 <do_recvfrom+0x154>)
   1b09e:	f7fd ffe7 	bl	19070 <strlen>
   1b0a2:	4601      	mov	r1, r0
   1b0a4:	4830      	ldr	r0, [pc, #192]	; (1b168 <do_recvfrom+0x154>)
   1b0a6:	f7ff f89f 	bl	1a1e8 <rsp_send>
   1b0aa:	e7e3      	b.n	1b074 <do_recvfrom+0x60>
	if (slm_util_hex_check(data, ret)) {
   1b0ac:	b2a1      	uxth	r1, r4
   1b0ae:	f107 0008 	add.w	r0, r7, #8
   1b0b2:	6079      	str	r1, [r7, #4]
   1b0b4:	f018 fcd3 	bl	33a5e <slm_util_hex_check>
   1b0b8:	4605      	mov	r5, r0
   1b0ba:	2800      	cmp	r0, #0
   1b0bc:	d033      	beq.n	1b126 <do_recvfrom+0x112>
		char data_hex[ret * 2];
   1b0be:	0063      	lsls	r3, r4, #1
   1b0c0:	1dda      	adds	r2, r3, #7
   1b0c2:	f022 0207 	bic.w	r2, r2, #7
	if (slm_util_hex_check(data, ret)) {
   1b0c6:	466d      	mov	r5, sp
		char data_hex[ret * 2];
   1b0c8:	ebad 0d02 	sub.w	sp, sp, r2
   1b0cc:	ac02      	add	r4, sp, #8
		ret = slm_util_htoa(data, ret, data_hex, size);
   1b0ce:	6879      	ldr	r1, [r7, #4]
   1b0d0:	4622      	mov	r2, r4
   1b0d2:	b29b      	uxth	r3, r3
   1b0d4:	f107 0008 	add.w	r0, r7, #8
   1b0d8:	f7fe ff56 	bl	19f88 <slm_util_htoa>
		if (ret > 0) {
   1b0dc:	1e01      	subs	r1, r0, #0
   1b0de:	dd17      	ble.n	1b110 <do_recvfrom+0xfc>
			rsp_send(data_hex, ret);
   1b0e0:	4620      	mov	r0, r4
   1b0e2:	6079      	str	r1, [r7, #4]
   1b0e4:	f7ff f880 	bl	1a1e8 <rsp_send>
			sprintf(rsp_buf, "\r\n#XRECVFROM: %d, %d\r\n",
   1b0e8:	6879      	ldr	r1, [r7, #4]
   1b0ea:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b0ee:	e9cd 6100 	strd	r6, r1, [sp]
   1b0f2:	4b1f      	ldr	r3, [pc, #124]	; (1b170 <do_recvfrom+0x15c>)
   1b0f4:	4631      	mov	r1, r6
   1b0f6:	481c      	ldr	r0, [pc, #112]	; (1b168 <do_recvfrom+0x154>)
   1b0f8:	f01c fabb 	bl	37672 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1b0fc:	481a      	ldr	r0, [pc, #104]	; (1b168 <do_recvfrom+0x154>)
   1b0fe:	f7fd ffb7 	bl	19070 <strlen>
   1b102:	4601      	mov	r1, r0
   1b104:	4818      	ldr	r0, [pc, #96]	; (1b168 <do_recvfrom+0x154>)
   1b106:	f7ff f86f 	bl	1a1e8 <rsp_send>
	return 0;
   1b10a:	2000      	movs	r0, #0
   1b10c:	46ad      	mov	sp, r5
   1b10e:	e7b5      	b.n	1b07c <do_recvfrom+0x68>
   1b110:	4b12      	ldr	r3, [pc, #72]	; (1b15c <do_recvfrom+0x148>)
   1b112:	4a13      	ldr	r2, [pc, #76]	; (1b160 <do_recvfrom+0x14c>)
			LOG_ERR("hex convert error: %d", ret);
   1b114:	4817      	ldr	r0, [pc, #92]	; (1b174 <do_recvfrom+0x160>)
   1b116:	1ad2      	subs	r2, r2, r3
   1b118:	08d2      	lsrs	r2, r2, #3
   1b11a:	0192      	lsls	r2, r2, #6
   1b11c:	f042 0201 	orr.w	r2, r2, #1
   1b120:	f019 fa01 	bl	34526 <log_1>
   1b124:	e7f1      	b.n	1b10a <do_recvfrom+0xf6>
		rsp_send(data, ret);
   1b126:	4621      	mov	r1, r4
   1b128:	f107 0008 	add.w	r0, r7, #8
   1b12c:	f7ff f85c 	bl	1a1e8 <rsp_send>
		sprintf(rsp_buf, "\r\n#XRECVFROM: %d, %d\r\n",
   1b130:	2301      	movs	r3, #1
   1b132:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b136:	4629      	mov	r1, r5
   1b138:	9300      	str	r3, [sp, #0]
   1b13a:	480b      	ldr	r0, [pc, #44]	; (1b168 <do_recvfrom+0x154>)
   1b13c:	4b0c      	ldr	r3, [pc, #48]	; (1b170 <do_recvfrom+0x15c>)
   1b13e:	9401      	str	r4, [sp, #4]
   1b140:	f01c fa97 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1b144:	4808      	ldr	r0, [pc, #32]	; (1b168 <do_recvfrom+0x154>)
   1b146:	f7fd ff93 	bl	19070 <strlen>
   1b14a:	4601      	mov	r1, r0
   1b14c:	4806      	ldr	r0, [pc, #24]	; (1b168 <do_recvfrom+0x154>)
   1b14e:	f7ff f84b 	bl	1a1e8 <rsp_send>
	return 0;
   1b152:	4628      	mov	r0, r5
   1b154:	e792      	b.n	1b07c <do_recvfrom+0x68>
   1b156:	bf00      	nop
   1b158:	20023470 	.word	0x20023470
   1b15c:	0003831c 	.word	0x0003831c
   1b160:	000383fc 	.word	0x000383fc
   1b164:	000396eb 	.word	0x000396eb
   1b168:	20028950 	.word	0x20028950
   1b16c:	00039700 	.word	0x00039700
   1b170:	0003970f 	.word	0x0003970f
   1b174:	00039726 	.word	0x00039726

0001b178 <handle_at_recvfrom>:
	uint16_t length = NET_IPV4_MTU;
   1b178:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1b17c:	b513      	push	{r0, r1, r4, lr}
	uint16_t length = NET_IPV4_MTU;
   1b17e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (client.sock < 0) {
   1b182:	4b18      	ldr	r3, [pc, #96]	; (1b1e4 <handle_at_recvfrom+0x6c>)
{
   1b184:	4604      	mov	r4, r0
	if (client.sock < 0) {
   1b186:	681a      	ldr	r2, [r3, #0]
   1b188:	2a00      	cmp	r2, #0
   1b18a:	da03      	bge.n	1b194 <handle_at_recvfrom+0x1c>
   1b18c:	f7ff fca0 	bl	1aad0 <handle_at_bind.part.0>
}
   1b190:	b002      	add	sp, #8
   1b192:	bd10      	pop	{r4, pc}
	if (client.ip_proto != IPPROTO_UDP &&
   1b194:	691b      	ldr	r3, [r3, #16]
   1b196:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1b19a:	2b11      	cmp	r3, #17
   1b19c:	d00c      	beq.n	1b1b8 <handle_at_recvfrom+0x40>
   1b19e:	4912      	ldr	r1, [pc, #72]	; (1b1e8 <handle_at_recvfrom+0x70>)
   1b1a0:	4b12      	ldr	r3, [pc, #72]	; (1b1ec <handle_at_recvfrom+0x74>)
		LOG_ERR("Invalid protocol");
   1b1a2:	4813      	ldr	r0, [pc, #76]	; (1b1f0 <handle_at_recvfrom+0x78>)
   1b1a4:	1ac9      	subs	r1, r1, r3
   1b1a6:	08c9      	lsrs	r1, r1, #3
   1b1a8:	0189      	lsls	r1, r1, #6
   1b1aa:	f041 0101 	orr.w	r1, r1, #1
   1b1ae:	f019 f9ab 	bl	34508 <log_0>
	int err = -EINVAL;
   1b1b2:	f06f 0015 	mvn.w	r0, #21
   1b1b6:	e7eb      	b.n	1b190 <handle_at_recvfrom+0x18>
	switch (cmd_type) {
   1b1b8:	2801      	cmp	r0, #1
   1b1ba:	d1fa      	bne.n	1b1b2 <handle_at_recvfrom+0x3a>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1b1bc:	480d      	ldr	r0, [pc, #52]	; (1b1f4 <handle_at_recvfrom+0x7c>)
   1b1be:	f01b fb72 	bl	368a6 <at_params_valid_count_get>
   1b1c2:	2801      	cmp	r0, #1
   1b1c4:	d804      	bhi.n	1b1d0 <handle_at_recvfrom+0x58>
		err = do_recvfrom(length);
   1b1c6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1b1ca:	f7ff ff23 	bl	1b014 <do_recvfrom>
		break;
   1b1ce:	e7df      	b.n	1b190 <handle_at_recvfrom+0x18>
			err = at_params_short_get(&at_param_list, 1, &length);
   1b1d0:	4621      	mov	r1, r4
   1b1d2:	4808      	ldr	r0, [pc, #32]	; (1b1f4 <handle_at_recvfrom+0x7c>)
   1b1d4:	f10d 0206 	add.w	r2, sp, #6
   1b1d8:	f01b fb1d 	bl	36816 <at_params_short_get>
			if (err) {
   1b1dc:	2800      	cmp	r0, #0
   1b1de:	d0f2      	beq.n	1b1c6 <handle_at_recvfrom+0x4e>
   1b1e0:	e7d6      	b.n	1b190 <handle_at_recvfrom+0x18>
   1b1e2:	bf00      	nop
   1b1e4:	20023470 	.word	0x20023470
   1b1e8:	000383fc 	.word	0x000383fc
   1b1ec:	0003831c 	.word	0x0003831c
   1b1f0:	0003973c 	.word	0x0003973c
   1b1f4:	20023430 	.word	0x20023430

0001b1f8 <do_sendto>:
{
   1b1f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1b1fc:	4604      	mov	r4, r0
   1b1fe:	460d      	mov	r5, r1
   1b200:	4617      	mov	r7, r2
   1b202:	461e      	mov	r6, r3
	if (check_for_ipv4(url, strlen(url))) {
   1b204:	f7fd ff34 	bl	19070 <strlen>
   1b208:	b2c1      	uxtb	r1, r0
   1b20a:	4620      	mov	r0, r4
   1b20c:	f018 fc5e 	bl	33acc <check_for_ipv4>
   1b210:	b1d0      	cbz	r0, 1b248 <do_sendto+0x50>
		ret = parse_host_by_ipv4(url, port);
   1b212:	4629      	mov	r1, r5
   1b214:	4620      	mov	r0, r4
   1b216:	f7ff fd17 	bl	1ac48 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
   1b21a:	4604      	mov	r4, r0
	if (ret) {
   1b21c:	b160      	cbz	r0, 1b238 <do_sendto+0x40>
   1b21e:	4a3a      	ldr	r2, [pc, #232]	; (1b308 <do_sendto+0x110>)
   1b220:	493a      	ldr	r1, [pc, #232]	; (1b30c <do_sendto+0x114>)
   1b222:	1a89      	subs	r1, r1, r2
   1b224:	08c9      	lsrs	r1, r1, #3
		LOG_ERR("Parse failed: %d", ret);
   1b226:	0189      	lsls	r1, r1, #6
   1b228:	f041 0201 	orr.w	r2, r1, #1
   1b22c:	4601      	mov	r1, r0
   1b22e:	4838      	ldr	r0, [pc, #224]	; (1b310 <do_sendto+0x118>)
   1b230:	f019 f979 	bl	34526 <log_1>
	if (ret < 0) {
   1b234:	2c00      	cmp	r4, #0
   1b236:	db63      	blt.n	1b300 <do_sendto+0x108>
{
   1b238:	2500      	movs	r5, #0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1b23a:	f04f 0908 	mov.w	r9, #8
		ret = sendto(client.sock, data + offset,
   1b23e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1b324 <do_sendto+0x12c>
   1b242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1b328 <do_sendto+0x130>
   1b246:	e01a      	b.n	1b27e <do_sendto+0x86>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
   1b248:	2202      	movs	r2, #2
   1b24a:	4629      	mov	r1, r5
   1b24c:	4620      	mov	r0, r4
   1b24e:	f7ff fd0f 	bl	1ac70 <parse_host_by_name>
   1b252:	e7e2      	b.n	1b21a <do_sendto+0x22>
				sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1b254:	f01a f85f 	bl	35316 <__errno>
   1b258:	6803      	ldr	r3, [r0, #0]
   1b25a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b25e:	425b      	negs	r3, r3
   1b260:	2100      	movs	r1, #0
   1b262:	9300      	str	r3, [sp, #0]
   1b264:	482b      	ldr	r0, [pc, #172]	; (1b314 <do_sendto+0x11c>)
   1b266:	4b2c      	ldr	r3, [pc, #176]	; (1b318 <do_sendto+0x120>)
   1b268:	f01c fa03 	bl	37672 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1b26c:	4829      	ldr	r0, [pc, #164]	; (1b314 <do_sendto+0x11c>)
   1b26e:	f7fd feff 	bl	19070 <strlen>
   1b272:	4601      	mov	r1, r0
   1b274:	4827      	ldr	r0, [pc, #156]	; (1b314 <do_sendto+0x11c>)
   1b276:	f7fe ffb7 	bl	1a1e8 <rsp_send>
   1b27a:	e02c      	b.n	1b2d6 <do_sendto+0xde>
		offset += ret;
   1b27c:	4425      	add	r5, r4
	while (offset < datalen) {
   1b27e:	42ae      	cmp	r6, r5
   1b280:	d92d      	bls.n	1b2de <do_sendto+0xe6>
		ret = sendto(client.sock, data + offset,
   1b282:	f8d8 0000 	ldr.w	r0, [r8]
   1b286:	2300      	movs	r3, #0
   1b288:	e9cd a900 	strd	sl, r9, [sp]
   1b28c:	1b72      	subs	r2, r6, r5
   1b28e:	1979      	adds	r1, r7, r5
   1b290:	f019 fdaa 	bl	34de8 <z_impl_zsock_sendto>
		if (ret <= 0) {
   1b294:	1e04      	subs	r4, r0, #0
   1b296:	dcf1      	bgt.n	1b27c <do_sendto+0x84>
   1b298:	4a1b      	ldr	r2, [pc, #108]	; (1b308 <do_sendto+0x110>)
   1b29a:	4c1c      	ldr	r4, [pc, #112]	; (1b30c <do_sendto+0x114>)
   1b29c:	1aa4      	subs	r4, r4, r2
			LOG_ERR("sendto() failed: %d", -errno);
   1b29e:	f01a f83a 	bl	35316 <__errno>
   1b2a2:	08e4      	lsrs	r4, r4, #3
   1b2a4:	6801      	ldr	r1, [r0, #0]
   1b2a6:	01a4      	lsls	r4, r4, #6
   1b2a8:	f044 0401 	orr.w	r4, r4, #1
   1b2ac:	4622      	mov	r2, r4
   1b2ae:	481b      	ldr	r0, [pc, #108]	; (1b31c <do_sendto+0x124>)
   1b2b0:	4249      	negs	r1, r1
   1b2b2:	f019 f938 	bl	34526 <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   1b2b6:	f01a f82e 	bl	35316 <__errno>
   1b2ba:	6803      	ldr	r3, [r0, #0]
   1b2bc:	2b0b      	cmp	r3, #11
   1b2be:	d0c9      	beq.n	1b254 <do_sendto+0x5c>
   1b2c0:	f01a f829 	bl	35316 <__errno>
   1b2c4:	6803      	ldr	r3, [r0, #0]
   1b2c6:	2b74      	cmp	r3, #116	; 0x74
   1b2c8:	d0c4      	beq.n	1b254 <do_sendto+0x5c>
				do_socket_close(-errno);
   1b2ca:	f01a f824 	bl	35316 <__errno>
   1b2ce:	6800      	ldr	r0, [r0, #0]
   1b2d0:	4240      	negs	r0, r0
   1b2d2:	f7ff fe5b 	bl	1af8c <do_socket_close>
			ret = -errno;
   1b2d6:	f01a f81e 	bl	35316 <__errno>
   1b2da:	6804      	ldr	r4, [r0, #0]
   1b2dc:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XSENDTO: %d\r\n", offset);
   1b2de:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b2e2:	2100      	movs	r1, #0
   1b2e4:	4b0e      	ldr	r3, [pc, #56]	; (1b320 <do_sendto+0x128>)
   1b2e6:	480b      	ldr	r0, [pc, #44]	; (1b314 <do_sendto+0x11c>)
   1b2e8:	9500      	str	r5, [sp, #0]
   1b2ea:	f01c f9c2 	bl	37672 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1b2ee:	4809      	ldr	r0, [pc, #36]	; (1b314 <do_sendto+0x11c>)
   1b2f0:	f7fd febe 	bl	19070 <strlen>
   1b2f4:	4601      	mov	r1, r0
   1b2f6:	4807      	ldr	r0, [pc, #28]	; (1b314 <do_sendto+0x11c>)
   1b2f8:	f7fe ff76 	bl	1a1e8 <rsp_send>
	if (ret >= 0) {
   1b2fc:	ea04 74e4 	and.w	r4, r4, r4, asr #31
}
   1b300:	4620      	mov	r0, r4
   1b302:	b002      	add	sp, #8
   1b304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b308:	0003831c 	.word	0x0003831c
   1b30c:	000383fc 	.word	0x000383fc
   1b310:	0003974d 	.word	0x0003974d
   1b314:	20028950 	.word	0x20028950
   1b318:	00039700 	.word	0x00039700
   1b31c:	0003975e 	.word	0x0003975e
   1b320:	00039772 	.word	0x00039772
   1b324:	20023470 	.word	0x20023470
   1b328:	20023488 	.word	0x20023488

0001b32c <handle_at_sendto>:
{
   1b32c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b32e:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
	if (client.sock < 0) {
   1b332:	4b3c      	ldr	r3, [pc, #240]	; (1b424 <handle_at_sendto+0xf8>)
{
   1b334:	4605      	mov	r5, r0
	if (client.sock < 0) {
   1b336:	681a      	ldr	r2, [r3, #0]
{
   1b338:	af00      	add	r7, sp, #0
	if (client.sock < 0) {
   1b33a:	2a00      	cmp	r2, #0
   1b33c:	da0f      	bge.n	1b35e <handle_at_sendto+0x32>
   1b33e:	493a      	ldr	r1, [pc, #232]	; (1b428 <handle_at_sendto+0xfc>)
   1b340:	4b3a      	ldr	r3, [pc, #232]	; (1b42c <handle_at_sendto+0x100>)
		LOG_ERR("Socket not opened yet");
   1b342:	483b      	ldr	r0, [pc, #236]	; (1b430 <handle_at_sendto+0x104>)
   1b344:	1ac9      	subs	r1, r1, r3
   1b346:	08c9      	lsrs	r1, r1, #3
   1b348:	0189      	lsls	r1, r1, #6
   1b34a:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid protocol");
   1b34e:	f019 f8db 	bl	34508 <log_0>
	int err = -EINVAL;
   1b352:	f06f 0015 	mvn.w	r0, #21
}
   1b356:	f507 7733 	add.w	r7, r7, #716	; 0x2cc
   1b35a:	46bd      	mov	sp, r7
   1b35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (client.ip_proto != IPPROTO_UDP &&
   1b35e:	691b      	ldr	r3, [r3, #16]
   1b360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1b364:	2b11      	cmp	r3, #17
   1b366:	d008      	beq.n	1b37a <handle_at_sendto+0x4e>
   1b368:	492f      	ldr	r1, [pc, #188]	; (1b428 <handle_at_sendto+0xfc>)
   1b36a:	4b30      	ldr	r3, [pc, #192]	; (1b42c <handle_at_sendto+0x100>)
		LOG_ERR("Invalid protocol");
   1b36c:	4831      	ldr	r0, [pc, #196]	; (1b434 <handle_at_sendto+0x108>)
   1b36e:	1ac9      	subs	r1, r1, r3
   1b370:	08c9      	lsrs	r1, r1, #3
   1b372:	0189      	lsls	r1, r1, #6
   1b374:	f041 0101 	orr.w	r1, r1, #1
   1b378:	e7e9      	b.n	1b34e <handle_at_sendto+0x22>
	switch (cmd_type) {
   1b37a:	2801      	cmp	r0, #1
   1b37c:	d1e9      	bne.n	1b352 <handle_at_sendto+0x26>
		if (at_params_valid_count_get(&at_param_list) < 5) {
   1b37e:	482e      	ldr	r0, [pc, #184]	; (1b438 <handle_at_sendto+0x10c>)
   1b380:	f01b fa91 	bl	368a6 <at_params_valid_count_get>
   1b384:	2804      	cmp	r0, #4
   1b386:	d9e4      	bls.n	1b352 <handle_at_sendto+0x26>
		size = TCPIP_MAX_URL;
   1b388:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1b38a:	f107 0408 	add.w	r4, r7, #8
		size = TCPIP_MAX_URL;
   1b38e:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1b390:	4622      	mov	r2, r4
   1b392:	4629      	mov	r1, r5
   1b394:	4828      	ldr	r0, [pc, #160]	; (1b438 <handle_at_sendto+0x10c>)
   1b396:	1d3b      	adds	r3, r7, #4
   1b398:	f01b fa62 	bl	36860 <at_params_string_get>
		if (err) {
   1b39c:	2800      	cmp	r0, #0
   1b39e:	d1da      	bne.n	1b356 <handle_at_sendto+0x2a>
		url[size] = '\0';
   1b3a0:	687b      	ldr	r3, [r7, #4]
		err = at_params_short_get(&at_param_list, 2, &port);
   1b3a2:	463a      	mov	r2, r7
		url[size] = '\0';
   1b3a4:	54e0      	strb	r0, [r4, r3]
		err = at_params_short_get(&at_param_list, 2, &port);
   1b3a6:	2102      	movs	r1, #2
   1b3a8:	4823      	ldr	r0, [pc, #140]	; (1b438 <handle_at_sendto+0x10c>)
   1b3aa:	f01b fa34 	bl	36816 <at_params_short_get>
		if (err) {
   1b3ae:	2800      	cmp	r0, #0
   1b3b0:	d1d1      	bne.n	1b356 <handle_at_sendto+0x2a>
		err = at_params_short_get(&at_param_list, 3, &datatype);
   1b3b2:	2103      	movs	r1, #3
   1b3b4:	4820      	ldr	r0, [pc, #128]	; (1b438 <handle_at_sendto+0x10c>)
   1b3b6:	1cba      	adds	r2, r7, #2
   1b3b8:	f01b fa2d 	bl	36816 <at_params_short_get>
		if (err) {
   1b3bc:	2800      	cmp	r0, #0
   1b3be:	d1ca      	bne.n	1b356 <handle_at_sendto+0x2a>
		size = NET_IPV4_MTU;
   1b3c0:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&at_param_list, 4, data, &size);
   1b3c4:	2104      	movs	r1, #4
		size = NET_IPV4_MTU;
   1b3c6:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&at_param_list, 4, data, &size);
   1b3c8:	481b      	ldr	r0, [pc, #108]	; (1b438 <handle_at_sendto+0x10c>)
   1b3ca:	1d3b      	adds	r3, r7, #4
   1b3cc:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1b3d0:	f01b fa46 	bl	36860 <at_params_string_get>
		if (err) {
   1b3d4:	2800      	cmp	r0, #0
   1b3d6:	d1be      	bne.n	1b356 <handle_at_sendto+0x2a>
		if (datatype == DATATYPE_HEXADECIMAL) {
   1b3d8:	887b      	ldrh	r3, [r7, #2]
   1b3da:	6879      	ldr	r1, [r7, #4]
   1b3dc:	b9d3      	cbnz	r3, 1b414 <handle_at_sendto+0xe8>
			uint8_t data_hex[size / 2];
   1b3de:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   1b3e2:	105b      	asrs	r3, r3, #1
   1b3e4:	1dda      	adds	r2, r3, #7
   1b3e6:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   1b3ea:	466d      	mov	r5, sp
			uint8_t data_hex[size / 2];
   1b3ec:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   1b3f0:	466a      	mov	r2, sp
   1b3f2:	b29b      	uxth	r3, r3
   1b3f4:	b289      	uxth	r1, r1
   1b3f6:	f107 0088 	add.w	r0, r7, #136	; 0x88
   1b3fa:	f018 fb43 	bl	33a84 <slm_util_atoh>
			if (err > 0) {
   1b3fe:	2800      	cmp	r0, #0
			uint8_t data_hex[size / 2];
   1b400:	466e      	mov	r6, sp
			if (err > 0) {
   1b402:	dd05      	ble.n	1b410 <handle_at_sendto+0xe4>
				err = do_sendto(url, port, data_hex, err);
   1b404:	4603      	mov	r3, r0
   1b406:	4632      	mov	r2, r6
   1b408:	4620      	mov	r0, r4
   1b40a:	8839      	ldrh	r1, [r7, #0]
   1b40c:	f7ff fef4 	bl	1b1f8 <do_sendto>
   1b410:	46ad      	mov	sp, r5
   1b412:	e7a0      	b.n	1b356 <handle_at_sendto+0x2a>
			err = do_sendto(url, port, data, size);
   1b414:	460b      	mov	r3, r1
   1b416:	4620      	mov	r0, r4
   1b418:	8839      	ldrh	r1, [r7, #0]
   1b41a:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1b41e:	f7ff feeb 	bl	1b1f8 <do_sendto>
   1b422:	e798      	b.n	1b356 <handle_at_sendto+0x2a>
   1b424:	20023470 	.word	0x20023470
   1b428:	000383fc 	.word	0x000383fc
   1b42c:	0003831c 	.word	0x0003831c
   1b430:	00039556 	.word	0x00039556
   1b434:	0003973c 	.word	0x0003973c
   1b438:	20023430 	.word	0x20023430

0001b43c <do_recv>:
{
   1b43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b440:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
	int sock = client.sock;
   1b444:	4b65      	ldr	r3, [pc, #404]	; (1b5dc <do_recv+0x1a0>)
{
   1b446:	4602      	mov	r2, r0
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1b448:	6899      	ldr	r1, [r3, #8]
	int sock = client.sock;
   1b44a:	6818      	ldr	r0, [r3, #0]
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1b44c:	2901      	cmp	r1, #1
{
   1b44e:	af02      	add	r7, sp, #8
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1b450:	d114      	bne.n	1b47c <do_recv+0x40>
		if (client.sock_peer != INVALID_SOCKET) {
   1b452:	68d8      	ldr	r0, [r3, #12]
   1b454:	1c43      	adds	r3, r0, #1
   1b456:	d111      	bne.n	1b47c <do_recv+0x40>
   1b458:	4b61      	ldr	r3, [pc, #388]	; (1b5e0 <do_recv+0x1a4>)
   1b45a:	4962      	ldr	r1, [pc, #392]	; (1b5e4 <do_recv+0x1a8>)
			LOG_ERR("No remote connection");
   1b45c:	4862      	ldr	r0, [pc, #392]	; (1b5e8 <do_recv+0x1ac>)
   1b45e:	1ac9      	subs	r1, r1, r3
   1b460:	08c9      	lsrs	r1, r1, #3
   1b462:	0189      	lsls	r1, r1, #6
   1b464:	f041 0101 	orr.w	r1, r1, #1
   1b468:	f019 f84e 	bl	34508 <log_0>
			return -EINVAL;
   1b46c:	f06f 0415 	mvn.w	r4, #21
}
   1b470:	4620      	mov	r0, r4
   1b472:	f507 7712 	add.w	r7, r7, #584	; 0x248
   1b476:	46bd      	mov	sp, r7
   1b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1b47c:	2300      	movs	r3, #0
   1b47e:	f107 0108 	add.w	r1, r7, #8
   1b482:	e9cd 3300 	strd	r3, r3, [sp]
   1b486:	f019 fccc 	bl	34e22 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   1b48a:	1e05      	subs	r5, r0, #0
   1b48c:	da37      	bge.n	1b4fe <do_recv+0xc2>
   1b48e:	4a54      	ldr	r2, [pc, #336]	; (1b5e0 <do_recv+0x1a4>)
   1b490:	4c54      	ldr	r4, [pc, #336]	; (1b5e4 <do_recv+0x1a8>)
   1b492:	1aa4      	subs	r4, r4, r2
		LOG_WRN("recv() error: %d", -errno);
   1b494:	f019 ff3f 	bl	35316 <__errno>
   1b498:	08e4      	lsrs	r4, r4, #3
   1b49a:	6801      	ldr	r1, [r0, #0]
   1b49c:	01a4      	lsls	r4, r4, #6
   1b49e:	f044 0402 	orr.w	r4, r4, #2
   1b4a2:	4622      	mov	r2, r4
   1b4a4:	4851      	ldr	r0, [pc, #324]	; (1b5ec <do_recv+0x1b0>)
   1b4a6:	4249      	negs	r1, r1
   1b4a8:	f019 f83d 	bl	34526 <log_1>
		if (errno != EAGAIN && errno != ETIMEDOUT) {
   1b4ac:	f019 ff33 	bl	35316 <__errno>
   1b4b0:	6803      	ldr	r3, [r0, #0]
   1b4b2:	2b0b      	cmp	r3, #11
   1b4b4:	d00f      	beq.n	1b4d6 <do_recv+0x9a>
   1b4b6:	f019 ff2e 	bl	35316 <__errno>
   1b4ba:	6803      	ldr	r3, [r0, #0]
   1b4bc:	2b74      	cmp	r3, #116	; 0x74
   1b4be:	d00a      	beq.n	1b4d6 <do_recv+0x9a>
			do_socket_close(-errno);
   1b4c0:	f019 ff29 	bl	35316 <__errno>
   1b4c4:	6800      	ldr	r0, [r0, #0]
   1b4c6:	4240      	negs	r0, r0
   1b4c8:	f7ff fd60 	bl	1af8c <do_socket_close>
		return -errno;
   1b4cc:	f019 ff23 	bl	35316 <__errno>
   1b4d0:	6804      	ldr	r4, [r0, #0]
   1b4d2:	4264      	negs	r4, r4
   1b4d4:	e7cc      	b.n	1b470 <do_recv+0x34>
			sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1b4d6:	f019 ff1e 	bl	35316 <__errno>
   1b4da:	6803      	ldr	r3, [r0, #0]
   1b4dc:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b4e0:	425b      	negs	r3, r3
   1b4e2:	2100      	movs	r1, #0
   1b4e4:	9300      	str	r3, [sp, #0]
   1b4e6:	4842      	ldr	r0, [pc, #264]	; (1b5f0 <do_recv+0x1b4>)
   1b4e8:	4b42      	ldr	r3, [pc, #264]	; (1b5f4 <do_recv+0x1b8>)
   1b4ea:	f01c f8c2 	bl	37672 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1b4ee:	4840      	ldr	r0, [pc, #256]	; (1b5f0 <do_recv+0x1b4>)
   1b4f0:	f7fd fdbe 	bl	19070 <strlen>
   1b4f4:	4601      	mov	r1, r0
   1b4f6:	483e      	ldr	r0, [pc, #248]	; (1b5f0 <do_recv+0x1b4>)
   1b4f8:	f7fe fe76 	bl	1a1e8 <rsp_send>
   1b4fc:	e7e6      	b.n	1b4cc <do_recv+0x90>
	if (ret == 0) {
   1b4fe:	d109      	bne.n	1b514 <do_recv+0xd8>
   1b500:	4938      	ldr	r1, [pc, #224]	; (1b5e4 <do_recv+0x1a8>)
   1b502:	4b37      	ldr	r3, [pc, #220]	; (1b5e0 <do_recv+0x1a4>)
		LOG_WRN("recv() return 0");
   1b504:	483c      	ldr	r0, [pc, #240]	; (1b5f8 <do_recv+0x1bc>)
   1b506:	1ac9      	subs	r1, r1, r3
   1b508:	08c9      	lsrs	r1, r1, #3
   1b50a:	0189      	lsls	r1, r1, #6
   1b50c:	f041 0102 	orr.w	r1, r1, #2
   1b510:	f018 fffa 	bl	34508 <log_0>
	if (slm_util_hex_check(data, ret)) {
   1b514:	b2a9      	uxth	r1, r5
   1b516:	f107 0008 	add.w	r0, r7, #8
   1b51a:	6079      	str	r1, [r7, #4]
   1b51c:	f018 fa9f 	bl	33a5e <slm_util_hex_check>
   1b520:	4604      	mov	r4, r0
   1b522:	2800      	cmp	r0, #0
   1b524:	d03c      	beq.n	1b5a0 <do_recv+0x164>
		char data_hex[ret * 2];
   1b526:	006b      	lsls	r3, r5, #1
   1b528:	1dda      	adds	r2, r3, #7
   1b52a:	f022 0207 	bic.w	r2, r2, #7
	if (slm_util_hex_check(data, ret)) {
   1b52e:	466e      	mov	r6, sp
		char data_hex[ret * 2];
   1b530:	ebad 0d02 	sub.w	sp, sp, r2
   1b534:	f10d 0808 	add.w	r8, sp, #8
		ret = slm_util_htoa(data, ret, data_hex, size);
   1b538:	4642      	mov	r2, r8
   1b53a:	6879      	ldr	r1, [r7, #4]
   1b53c:	b29b      	uxth	r3, r3
   1b53e:	f107 0008 	add.w	r0, r7, #8
   1b542:	f7fe fd21 	bl	19f88 <slm_util_htoa>
		if (ret > 0) {
   1b546:	1e04      	subs	r4, r0, #0
   1b548:	dd1e      	ble.n	1b588 <do_recv+0x14c>
			sprintf(rsp_buf, "#XRECV: %d, %d\r\n",
   1b54a:	2500      	movs	r5, #0
   1b54c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b550:	4b2a      	ldr	r3, [pc, #168]	; (1b5fc <do_recv+0x1c0>)
   1b552:	4629      	mov	r1, r5
   1b554:	9401      	str	r4, [sp, #4]
   1b556:	4826      	ldr	r0, [pc, #152]	; (1b5f0 <do_recv+0x1b4>)
   1b558:	9500      	str	r5, [sp, #0]
   1b55a:	f01c f88a 	bl	37672 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1b55e:	4824      	ldr	r0, [pc, #144]	; (1b5f0 <do_recv+0x1b4>)
   1b560:	f7fd fd86 	bl	19070 <strlen>
   1b564:	4601      	mov	r1, r0
   1b566:	4822      	ldr	r0, [pc, #136]	; (1b5f0 <do_recv+0x1b4>)
   1b568:	f7fe fe3e 	bl	1a1e8 <rsp_send>
			rsp_send(data_hex, ret);
   1b56c:	4621      	mov	r1, r4
   1b56e:	4640      	mov	r0, r8
   1b570:	f7fe fe3a 	bl	1a1e8 <rsp_send>
			rsp_send("\r\n", strlen("\r\n"));
   1b574:	4822      	ldr	r0, [pc, #136]	; (1b600 <do_recv+0x1c4>)
   1b576:	f7fd fd7b 	bl	19070 <strlen>
   1b57a:	4601      	mov	r1, r0
   1b57c:	4820      	ldr	r0, [pc, #128]	; (1b600 <do_recv+0x1c4>)
   1b57e:	f7fe fe33 	bl	1a1e8 <rsp_send>
			ret = 0;
   1b582:	462c      	mov	r4, r5
			LOG_ERR("hex convert error: %d", ret);
   1b584:	46b5      	mov	sp, r6
   1b586:	e773      	b.n	1b470 <do_recv+0x34>
   1b588:	4b15      	ldr	r3, [pc, #84]	; (1b5e0 <do_recv+0x1a4>)
   1b58a:	4a16      	ldr	r2, [pc, #88]	; (1b5e4 <do_recv+0x1a8>)
   1b58c:	4621      	mov	r1, r4
   1b58e:	1ad2      	subs	r2, r2, r3
   1b590:	08d2      	lsrs	r2, r2, #3
   1b592:	0192      	lsls	r2, r2, #6
   1b594:	481b      	ldr	r0, [pc, #108]	; (1b604 <do_recv+0x1c8>)
   1b596:	f042 0201 	orr.w	r2, r2, #1
   1b59a:	f018 ffc4 	bl	34526 <log_1>
   1b59e:	e7f1      	b.n	1b584 <do_recv+0x148>
		sprintf(rsp_buf, "#XRECV: %d, %d\r\n",
   1b5a0:	2301      	movs	r3, #1
   1b5a2:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b5a6:	4601      	mov	r1, r0
   1b5a8:	9300      	str	r3, [sp, #0]
   1b5aa:	9501      	str	r5, [sp, #4]
   1b5ac:	4b13      	ldr	r3, [pc, #76]	; (1b5fc <do_recv+0x1c0>)
   1b5ae:	4810      	ldr	r0, [pc, #64]	; (1b5f0 <do_recv+0x1b4>)
   1b5b0:	f01c f85f 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1b5b4:	480e      	ldr	r0, [pc, #56]	; (1b5f0 <do_recv+0x1b4>)
   1b5b6:	f7fd fd5b 	bl	19070 <strlen>
   1b5ba:	4601      	mov	r1, r0
   1b5bc:	480c      	ldr	r0, [pc, #48]	; (1b5f0 <do_recv+0x1b4>)
   1b5be:	f7fe fe13 	bl	1a1e8 <rsp_send>
		rsp_send(data, ret);
   1b5c2:	4629      	mov	r1, r5
   1b5c4:	f107 0008 	add.w	r0, r7, #8
   1b5c8:	f7fe fe0e 	bl	1a1e8 <rsp_send>
		rsp_send("\r\n", strlen("\r\n"));
   1b5cc:	480c      	ldr	r0, [pc, #48]	; (1b600 <do_recv+0x1c4>)
   1b5ce:	f7fd fd4f 	bl	19070 <strlen>
   1b5d2:	4601      	mov	r1, r0
   1b5d4:	480a      	ldr	r0, [pc, #40]	; (1b600 <do_recv+0x1c4>)
   1b5d6:	f7fe fe07 	bl	1a1e8 <rsp_send>
		ret = 0;
   1b5da:	e749      	b.n	1b470 <do_recv+0x34>
   1b5dc:	20023470 	.word	0x20023470
   1b5e0:	0003831c 	.word	0x0003831c
   1b5e4:	000383fc 	.word	0x000383fc
   1b5e8:	00039781 	.word	0x00039781
   1b5ec:	00039796 	.word	0x00039796
   1b5f0:	20028950 	.word	0x20028950
   1b5f4:	00039700 	.word	0x00039700
   1b5f8:	000397a7 	.word	0x000397a7
   1b5fc:	000397b7 	.word	0x000397b7
   1b600:	0003c24e 	.word	0x0003c24e
   1b604:	00039726 	.word	0x00039726

0001b608 <handle_at_recv>:
	uint16_t length = NET_IPV4_MTU;
   1b608:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1b60c:	b513      	push	{r0, r1, r4, lr}
	uint16_t length = NET_IPV4_MTU;
   1b60e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!client.connected) {
   1b612:	4b13      	ldr	r3, [pc, #76]	; (1b660 <handle_at_recv+0x58>)
{
   1b614:	4604      	mov	r4, r0
	if (!client.connected) {
   1b616:	7d1b      	ldrb	r3, [r3, #20]
   1b618:	b963      	cbnz	r3, 1b634 <handle_at_recv+0x2c>
   1b61a:	4912      	ldr	r1, [pc, #72]	; (1b664 <handle_at_recv+0x5c>)
   1b61c:	4b12      	ldr	r3, [pc, #72]	; (1b668 <handle_at_recv+0x60>)
		LOG_ERR("Not connected yet");
   1b61e:	4813      	ldr	r0, [pc, #76]	; (1b66c <handle_at_recv+0x64>)
   1b620:	1ac9      	subs	r1, r1, r3
   1b622:	08c9      	lsrs	r1, r1, #3
   1b624:	0189      	lsls	r1, r1, #6
   1b626:	f041 0101 	orr.w	r1, r1, #1
   1b62a:	f018 ff6d 	bl	34508 <log_0>
	int err = -EINVAL;
   1b62e:	f06f 0015 	mvn.w	r0, #21
   1b632:	e00a      	b.n	1b64a <handle_at_recv+0x42>
	switch (cmd_type) {
   1b634:	2801      	cmp	r0, #1
   1b636:	d1fa      	bne.n	1b62e <handle_at_recv+0x26>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1b638:	480d      	ldr	r0, [pc, #52]	; (1b670 <handle_at_recv+0x68>)
   1b63a:	f01b f934 	bl	368a6 <at_params_valid_count_get>
   1b63e:	2801      	cmp	r0, #1
   1b640:	d805      	bhi.n	1b64e <handle_at_recv+0x46>
		err = do_recv(length);
   1b642:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1b646:	f7ff fef9 	bl	1b43c <do_recv>
}
   1b64a:	b002      	add	sp, #8
   1b64c:	bd10      	pop	{r4, pc}
			err = at_params_short_get(&at_param_list, 1, &length);
   1b64e:	4621      	mov	r1, r4
   1b650:	4807      	ldr	r0, [pc, #28]	; (1b670 <handle_at_recv+0x68>)
   1b652:	f10d 0206 	add.w	r2, sp, #6
   1b656:	f01b f8de 	bl	36816 <at_params_short_get>
			if (err) {
   1b65a:	2800      	cmp	r0, #0
   1b65c:	d0f1      	beq.n	1b642 <handle_at_recv+0x3a>
   1b65e:	e7f4      	b.n	1b64a <handle_at_recv+0x42>
   1b660:	20023470 	.word	0x20023470
   1b664:	000383fc 	.word	0x000383fc
   1b668:	0003831c 	.word	0x0003831c
   1b66c:	000397c8 	.word	0x000397c8
   1b670:	20023430 	.word	0x20023430

0001b674 <do_send>:
	int sock = client.sock;
   1b674:	4b3a      	ldr	r3, [pc, #232]	; (1b760 <do_send+0xec>)
{
   1b676:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1b67a:	689a      	ldr	r2, [r3, #8]
{
   1b67c:	4680      	mov	r8, r0
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1b67e:	2a01      	cmp	r2, #1
{
   1b680:	460e      	mov	r6, r1
	int sock = client.sock;
   1b682:	681f      	ldr	r7, [r3, #0]
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1b684:	d168      	bne.n	1b758 <do_send+0xe4>
		if (client.sock_peer != INVALID_SOCKET) {
   1b686:	68df      	ldr	r7, [r3, #12]
   1b688:	1c7b      	adds	r3, r7, #1
   1b68a:	d165      	bne.n	1b758 <do_send+0xe4>
   1b68c:	4b35      	ldr	r3, [pc, #212]	; (1b764 <do_send+0xf0>)
   1b68e:	4936      	ldr	r1, [pc, #216]	; (1b768 <do_send+0xf4>)
			LOG_ERR("No remote connection");
   1b690:	4836      	ldr	r0, [pc, #216]	; (1b76c <do_send+0xf8>)
   1b692:	1ac9      	subs	r1, r1, r3
   1b694:	08c9      	lsrs	r1, r1, #3
   1b696:	0189      	lsls	r1, r1, #6
   1b698:	f041 0101 	orr.w	r1, r1, #1
   1b69c:	f018 ff34 	bl	34508 <log_0>
			return -EINVAL;
   1b6a0:	f06f 0015 	mvn.w	r0, #21
}
   1b6a4:	b003      	add	sp, #12
   1b6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1b6aa:	f019 fe34 	bl	35316 <__errno>
   1b6ae:	6803      	ldr	r3, [r0, #0]
   1b6b0:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b6b4:	425b      	negs	r3, r3
   1b6b6:	2100      	movs	r1, #0
   1b6b8:	9300      	str	r3, [sp, #0]
   1b6ba:	482d      	ldr	r0, [pc, #180]	; (1b770 <do_send+0xfc>)
   1b6bc:	4b2d      	ldr	r3, [pc, #180]	; (1b774 <do_send+0x100>)
   1b6be:	f01b ffd8 	bl	37672 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1b6c2:	482b      	ldr	r0, [pc, #172]	; (1b770 <do_send+0xfc>)
   1b6c4:	f7fd fcd4 	bl	19070 <strlen>
   1b6c8:	4601      	mov	r1, r0
   1b6ca:	4829      	ldr	r0, [pc, #164]	; (1b770 <do_send+0xfc>)
   1b6cc:	f7fe fd8c 	bl	1a1e8 <rsp_send>
   1b6d0:	e02c      	b.n	1b72c <do_send+0xb8>
		offset += ret;
   1b6d2:	4425      	add	r5, r4
	while (offset < datalen) {
   1b6d4:	42ae      	cmp	r6, r5
   1b6d6:	d92d      	bls.n	1b734 <do_send+0xc0>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1b6d8:	2300      	movs	r3, #0
   1b6da:	4638      	mov	r0, r7
   1b6dc:	e9cd 9900 	strd	r9, r9, [sp]
   1b6e0:	1b72      	subs	r2, r6, r5
   1b6e2:	eb08 0105 	add.w	r1, r8, r5
   1b6e6:	f019 fb7f 	bl	34de8 <z_impl_zsock_sendto>
		if (ret < 0) {
   1b6ea:	1e04      	subs	r4, r0, #0
   1b6ec:	daf1      	bge.n	1b6d2 <do_send+0x5e>
   1b6ee:	4a1d      	ldr	r2, [pc, #116]	; (1b764 <do_send+0xf0>)
   1b6f0:	4c1d      	ldr	r4, [pc, #116]	; (1b768 <do_send+0xf4>)
   1b6f2:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send() failed: %d", -errno);
   1b6f4:	f019 fe0f 	bl	35316 <__errno>
   1b6f8:	08e4      	lsrs	r4, r4, #3
   1b6fa:	6801      	ldr	r1, [r0, #0]
   1b6fc:	01a4      	lsls	r4, r4, #6
   1b6fe:	f044 0401 	orr.w	r4, r4, #1
   1b702:	4622      	mov	r2, r4
   1b704:	481c      	ldr	r0, [pc, #112]	; (1b778 <do_send+0x104>)
   1b706:	4249      	negs	r1, r1
   1b708:	f018 ff0d 	bl	34526 <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   1b70c:	f019 fe03 	bl	35316 <__errno>
   1b710:	6803      	ldr	r3, [r0, #0]
   1b712:	2b0b      	cmp	r3, #11
   1b714:	d0c9      	beq.n	1b6aa <do_send+0x36>
   1b716:	f019 fdfe 	bl	35316 <__errno>
   1b71a:	6803      	ldr	r3, [r0, #0]
   1b71c:	2b74      	cmp	r3, #116	; 0x74
   1b71e:	d0c4      	beq.n	1b6aa <do_send+0x36>
				do_socket_close(-errno);
   1b720:	f019 fdf9 	bl	35316 <__errno>
   1b724:	6800      	ldr	r0, [r0, #0]
   1b726:	4240      	negs	r0, r0
   1b728:	f7ff fc30 	bl	1af8c <do_socket_close>
			ret = -errno;
   1b72c:	f019 fdf3 	bl	35316 <__errno>
   1b730:	6804      	ldr	r4, [r0, #0]
   1b732:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XSEND: %d\r\n", offset);
   1b734:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b738:	2100      	movs	r1, #0
   1b73a:	4b10      	ldr	r3, [pc, #64]	; (1b77c <do_send+0x108>)
   1b73c:	480c      	ldr	r0, [pc, #48]	; (1b770 <do_send+0xfc>)
   1b73e:	9500      	str	r5, [sp, #0]
   1b740:	f01b ff97 	bl	37672 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1b744:	480a      	ldr	r0, [pc, #40]	; (1b770 <do_send+0xfc>)
   1b746:	f7fd fc93 	bl	19070 <strlen>
   1b74a:	4601      	mov	r1, r0
   1b74c:	4808      	ldr	r0, [pc, #32]	; (1b770 <do_send+0xfc>)
   1b74e:	f7fe fd4b 	bl	1a1e8 <rsp_send>
	if (ret >= 0) {
   1b752:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1b756:	e7a5      	b.n	1b6a4 <do_send+0x30>
{
   1b758:	2400      	movs	r4, #0
   1b75a:	4625      	mov	r5, r4
   1b75c:	46a1      	mov	r9, r4
   1b75e:	e7b9      	b.n	1b6d4 <do_send+0x60>
   1b760:	20023470 	.word	0x20023470
   1b764:	0003831c 	.word	0x0003831c
   1b768:	000383fc 	.word	0x000383fc
   1b76c:	00039781 	.word	0x00039781
   1b770:	20028950 	.word	0x20028950
   1b774:	00039700 	.word	0x00039700
   1b778:	000397da 	.word	0x000397da
   1b77c:	000397ec 	.word	0x000397ec

0001b780 <handle_at_send>:
{
   1b780:	b590      	push	{r4, r7, lr}
	int size = NET_IPV4_MTU;
   1b782:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1b786:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   1b78a:	af00      	add	r7, sp, #0
	int size = NET_IPV4_MTU;
   1b78c:	607b      	str	r3, [r7, #4]
	if (!client.connected) {
   1b78e:	4b25      	ldr	r3, [pc, #148]	; (1b824 <handle_at_send+0xa4>)
{
   1b790:	4604      	mov	r4, r0
	if (!client.connected) {
   1b792:	7d1b      	ldrb	r3, [r3, #20]
   1b794:	b97b      	cbnz	r3, 1b7b6 <handle_at_send+0x36>
   1b796:	4924      	ldr	r1, [pc, #144]	; (1b828 <handle_at_send+0xa8>)
   1b798:	4b24      	ldr	r3, [pc, #144]	; (1b82c <handle_at_send+0xac>)
		LOG_ERR("Not connected yet");
   1b79a:	4825      	ldr	r0, [pc, #148]	; (1b830 <handle_at_send+0xb0>)
   1b79c:	1ac9      	subs	r1, r1, r3
   1b79e:	08c9      	lsrs	r1, r1, #3
   1b7a0:	0189      	lsls	r1, r1, #6
   1b7a2:	f041 0101 	orr.w	r1, r1, #1
   1b7a6:	f018 feaf 	bl	34508 <log_0>
	int err = -EINVAL;
   1b7aa:	f06f 0015 	mvn.w	r0, #21
}
   1b7ae:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   1b7b2:	46bd      	mov	sp, r7
   1b7b4:	bd90      	pop	{r4, r7, pc}
	switch (cmd_type) {
   1b7b6:	2801      	cmp	r0, #1
   1b7b8:	d1f7      	bne.n	1b7aa <handle_at_send+0x2a>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1b7ba:	481e      	ldr	r0, [pc, #120]	; (1b834 <handle_at_send+0xb4>)
   1b7bc:	f01b f873 	bl	368a6 <at_params_valid_count_get>
   1b7c0:	2802      	cmp	r0, #2
   1b7c2:	d9f2      	bls.n	1b7aa <handle_at_send+0x2a>
		err = at_params_short_get(&at_param_list, 1, &datatype);
   1b7c4:	4621      	mov	r1, r4
   1b7c6:	481b      	ldr	r0, [pc, #108]	; (1b834 <handle_at_send+0xb4>)
   1b7c8:	1cba      	adds	r2, r7, #2
   1b7ca:	f01b f824 	bl	36816 <at_params_short_get>
		if (err) {
   1b7ce:	2800      	cmp	r0, #0
   1b7d0:	d1ed      	bne.n	1b7ae <handle_at_send+0x2e>
		err = at_params_string_get(&at_param_list, 2, data, &size);
   1b7d2:	2102      	movs	r1, #2
   1b7d4:	4817      	ldr	r0, [pc, #92]	; (1b834 <handle_at_send+0xb4>)
   1b7d6:	1d3b      	adds	r3, r7, #4
   1b7d8:	f107 0208 	add.w	r2, r7, #8
   1b7dc:	f01b f840 	bl	36860 <at_params_string_get>
		if (err) {
   1b7e0:	2800      	cmp	r0, #0
   1b7e2:	d1e4      	bne.n	1b7ae <handle_at_send+0x2e>
		if (datatype == DATATYPE_HEXADECIMAL) {
   1b7e4:	887b      	ldrh	r3, [r7, #2]
   1b7e6:	6879      	ldr	r1, [r7, #4]
   1b7e8:	b9bb      	cbnz	r3, 1b81a <handle_at_send+0x9a>
			uint8_t data_hex[size / 2];
   1b7ea:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   1b7ee:	105b      	asrs	r3, r3, #1
   1b7f0:	1dda      	adds	r2, r3, #7
   1b7f2:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   1b7f6:	466c      	mov	r4, sp
			uint8_t data_hex[size / 2];
   1b7f8:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   1b7fc:	466a      	mov	r2, sp
   1b7fe:	b29b      	uxth	r3, r3
   1b800:	b289      	uxth	r1, r1
   1b802:	f107 0008 	add.w	r0, r7, #8
   1b806:	f018 f93d 	bl	33a84 <slm_util_atoh>
			if (err > 0) {
   1b80a:	2800      	cmp	r0, #0
   1b80c:	dd03      	ble.n	1b816 <handle_at_send+0x96>
				err = do_send(data_hex, err);
   1b80e:	4601      	mov	r1, r0
   1b810:	4668      	mov	r0, sp
   1b812:	f7ff ff2f 	bl	1b674 <do_send>
   1b816:	46a5      	mov	sp, r4
   1b818:	e7c9      	b.n	1b7ae <handle_at_send+0x2e>
			err = do_send(data, size);
   1b81a:	f107 0008 	add.w	r0, r7, #8
   1b81e:	f7ff ff29 	bl	1b674 <do_send>
   1b822:	e7c4      	b.n	1b7ae <handle_at_send+0x2e>
   1b824:	20023470 	.word	0x20023470
   1b828:	000383fc 	.word	0x000383fc
   1b82c:	0003831c 	.word	0x0003831c
   1b830:	000397c8 	.word	0x000397c8
   1b834:	20023430 	.word	0x20023430

0001b838 <handle_at_accept>:
{
   1b838:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (client.sock < 0) {
   1b83a:	4b4e      	ldr	r3, [pc, #312]	; (1b974 <handle_at_accept+0x13c>)
{
   1b83c:	4604      	mov	r4, r0
	if (client.sock < 0) {
   1b83e:	6818      	ldr	r0, [r3, #0]
   1b840:	461e      	mov	r6, r3
   1b842:	2800      	cmp	r0, #0
{
   1b844:	b089      	sub	sp, #36	; 0x24
	if (client.sock < 0) {
   1b846:	da0c      	bge.n	1b862 <handle_at_accept+0x2a>
   1b848:	494b      	ldr	r1, [pc, #300]	; (1b978 <handle_at_accept+0x140>)
   1b84a:	4b4c      	ldr	r3, [pc, #304]	; (1b97c <handle_at_accept+0x144>)
		LOG_ERR("Socket not opened yet");
   1b84c:	484c      	ldr	r0, [pc, #304]	; (1b980 <handle_at_accept+0x148>)
   1b84e:	1ac9      	subs	r1, r1, r3
   1b850:	08c9      	lsrs	r1, r1, #3
   1b852:	0189      	lsls	r1, r1, #6
   1b854:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
   1b858:	f018 fe56 	bl	34508 <log_0>
		return -EINVAL;
   1b85c:	f06f 0015 	mvn.w	r0, #21
   1b860:	e046      	b.n	1b8f0 <handle_at_accept+0xb8>
	if (client.role != AT_SOCKET_ROLE_SERVER) {
   1b862:	689a      	ldr	r2, [r3, #8]
   1b864:	2a01      	cmp	r2, #1
   1b866:	d008      	beq.n	1b87a <handle_at_accept+0x42>
   1b868:	4943      	ldr	r1, [pc, #268]	; (1b978 <handle_at_accept+0x140>)
   1b86a:	4b44      	ldr	r3, [pc, #272]	; (1b97c <handle_at_accept+0x144>)
		LOG_ERR("Invalid role");
   1b86c:	4845      	ldr	r0, [pc, #276]	; (1b984 <handle_at_accept+0x14c>)
   1b86e:	1ac9      	subs	r1, r1, r3
   1b870:	08c9      	lsrs	r1, r1, #3
   1b872:	0189      	lsls	r1, r1, #6
   1b874:	f041 0101 	orr.w	r1, r1, #1
   1b878:	e7ee      	b.n	1b858 <handle_at_accept+0x20>
	if (client.ip_proto != IPPROTO_TCP &&
   1b87a:	691b      	ldr	r3, [r3, #16]
   1b87c:	2b06      	cmp	r3, #6
   1b87e:	d00b      	beq.n	1b898 <handle_at_accept+0x60>
   1b880:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1b884:	d008      	beq.n	1b898 <handle_at_accept+0x60>
   1b886:	493c      	ldr	r1, [pc, #240]	; (1b978 <handle_at_accept+0x140>)
   1b888:	4b3c      	ldr	r3, [pc, #240]	; (1b97c <handle_at_accept+0x144>)
		LOG_ERR("Invalid protocol");
   1b88a:	483f      	ldr	r0, [pc, #252]	; (1b988 <handle_at_accept+0x150>)
   1b88c:	1ac9      	subs	r1, r1, r3
   1b88e:	08c9      	lsrs	r1, r1, #3
   1b890:	0189      	lsls	r1, r1, #6
   1b892:	f041 0101 	orr.w	r1, r1, #1
   1b896:	e7df      	b.n	1b858 <handle_at_accept+0x20>
	switch (cmd_type) {
   1b898:	2c01      	cmp	r4, #1
   1b89a:	d007      	beq.n	1b8ac <handle_at_accept+0x74>
   1b89c:	2c02      	cmp	r4, #2
   1b89e:	d1dd      	bne.n	1b85c <handle_at_accept+0x24>
		if (client.sock_peer != INVALID_SOCKET) {
   1b8a0:	68f3      	ldr	r3, [r6, #12]
   1b8a2:	1c5a      	adds	r2, r3, #1
   1b8a4:	d060      	beq.n	1b968 <handle_at_accept+0x130>
			sprintf(rsp_buf, "#XTCPACCEPT: %d\r\n",
   1b8a6:	9300      	str	r3, [sp, #0]
   1b8a8:	4b38      	ldr	r3, [pc, #224]	; (1b98c <handle_at_accept+0x154>)
   1b8aa:	e04e      	b.n	1b94a <handle_at_accept+0x112>
	socklen_t len = sizeof(struct sockaddr_in);
   1b8ac:	2308      	movs	r3, #8
   1b8ae:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_accept(sock, addr, addrlen);
   1b8b0:	4937      	ldr	r1, [pc, #220]	; (1b990 <handle_at_accept+0x158>)
   1b8b2:	aa03      	add	r2, sp, #12
   1b8b4:	f019 fa82 	bl	34dbc <z_impl_zsock_accept>
	if (ret < 0) {
   1b8b8:	1e05      	subs	r5, r0, #0
   1b8ba:	da1b      	bge.n	1b8f4 <handle_at_accept+0xbc>
   1b8bc:	4b2f      	ldr	r3, [pc, #188]	; (1b97c <handle_at_accept+0x144>)
   1b8be:	4c2e      	ldr	r4, [pc, #184]	; (1b978 <handle_at_accept+0x140>)
   1b8c0:	1ae4      	subs	r4, r4, r3
		LOG_ERR("accept() failed: %d/%d", -errno, ret);
   1b8c2:	f019 fd28 	bl	35316 <__errno>
   1b8c6:	08e4      	lsrs	r4, r4, #3
   1b8c8:	6801      	ldr	r1, [r0, #0]
   1b8ca:	01a4      	lsls	r4, r4, #6
   1b8cc:	f044 0401 	orr.w	r4, r4, #1
   1b8d0:	4623      	mov	r3, r4
   1b8d2:	462a      	mov	r2, r5
   1b8d4:	4249      	negs	r1, r1
   1b8d6:	482f      	ldr	r0, [pc, #188]	; (1b994 <handle_at_accept+0x15c>)
   1b8d8:	f018 fe3c 	bl	34554 <log_2>
		do_socket_close(-errno);
   1b8dc:	f019 fd1b 	bl	35316 <__errno>
   1b8e0:	6800      	ldr	r0, [r0, #0]
   1b8e2:	4240      	negs	r0, r0
   1b8e4:	f7ff fb52 	bl	1af8c <do_socket_close>
		return -errno;
   1b8e8:	f019 fd15 	bl	35316 <__errno>
   1b8ec:	6800      	ldr	r0, [r0, #0]
   1b8ee:	4240      	negs	r0, r0
}
   1b8f0:	b009      	add	sp, #36	; 0x24
   1b8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b8f4:	af04      	add	r7, sp, #16
   1b8f6:	2310      	movs	r3, #16
   1b8f8:	463a      	mov	r2, r7
   1b8fa:	4620      	mov	r0, r4
   1b8fc:	4926      	ldr	r1, [pc, #152]	; (1b998 <handle_at_accept+0x160>)
   1b8fe:	f007 f819 	bl	22934 <z_impl_net_addr_ntop>
	if (inet_ntop(AF_INET, &remote.sin_addr, peer_addr, INET_ADDRSTRLEN)
   1b902:	b978      	cbnz	r0, 1b924 <handle_at_accept+0xec>
   1b904:	4a1d      	ldr	r2, [pc, #116]	; (1b97c <handle_at_accept+0x144>)
   1b906:	4c1c      	ldr	r4, [pc, #112]	; (1b978 <handle_at_accept+0x140>)
   1b908:	1aa4      	subs	r4, r4, r2
		LOG_WRN("Parse peer IP address failed: %d", -errno);
   1b90a:	f019 fd04 	bl	35316 <__errno>
   1b90e:	08e4      	lsrs	r4, r4, #3
   1b910:	6801      	ldr	r1, [r0, #0]
   1b912:	01a4      	lsls	r4, r4, #6
   1b914:	f044 0402 	orr.w	r4, r4, #2
   1b918:	4622      	mov	r2, r4
   1b91a:	4820      	ldr	r0, [pc, #128]	; (1b99c <handle_at_accept+0x164>)
   1b91c:	4249      	negs	r1, r1
   1b91e:	f018 fe02 	bl	34526 <log_1>
   1b922:	e79b      	b.n	1b85c <handle_at_accept+0x24>
	sprintf(rsp_buf, "#XACCEPT: connected with %s\r\n",
   1b924:	4b1e      	ldr	r3, [pc, #120]	; (1b9a0 <handle_at_accept+0x168>)
   1b926:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b92a:	2100      	movs	r1, #0
   1b92c:	481d      	ldr	r0, [pc, #116]	; (1b9a4 <handle_at_accept+0x16c>)
   1b92e:	9700      	str	r7, [sp, #0]
   1b930:	f01b fe9f 	bl	37672 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1b934:	481b      	ldr	r0, [pc, #108]	; (1b9a4 <handle_at_accept+0x16c>)
   1b936:	f7fd fb9b 	bl	19070 <strlen>
   1b93a:	4601      	mov	r1, r0
   1b93c:	4819      	ldr	r0, [pc, #100]	; (1b9a4 <handle_at_accept+0x16c>)
   1b93e:	f7fe fc53 	bl	1a1e8 <rsp_send>
	sprintf(rsp_buf, "#XACCEPT: %d\r\n", client.sock_peer);
   1b942:	4b19      	ldr	r3, [pc, #100]	; (1b9a8 <handle_at_accept+0x170>)
	client.sock_peer = ret;
   1b944:	60f5      	str	r5, [r6, #12]
	client.connected = true;
   1b946:	7534      	strb	r4, [r6, #20]
	sprintf(rsp_buf, "#XACCEPT: %d\r\n", client.sock_peer);
   1b948:	9500      	str	r5, [sp, #0]
			sprintf(rsp_buf, "#XTCPACCEPT: %d\r\n",
   1b94a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1b94e:	2100      	movs	r1, #0
   1b950:	4814      	ldr	r0, [pc, #80]	; (1b9a4 <handle_at_accept+0x16c>)
   1b952:	f01b fe8e 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1b956:	4813      	ldr	r0, [pc, #76]	; (1b9a4 <handle_at_accept+0x16c>)
   1b958:	f7fd fb8a 	bl	19070 <strlen>
   1b95c:	4601      	mov	r1, r0
   1b95e:	4811      	ldr	r0, [pc, #68]	; (1b9a4 <handle_at_accept+0x16c>)
   1b960:	f7fe fc42 	bl	1a1e8 <rsp_send>
		err = 0;
   1b964:	2000      	movs	r0, #0
		break;
   1b966:	e7c3      	b.n	1b8f0 <handle_at_accept+0xb8>
			sprintf(rsp_buf, "#XTCPACCEPT: 0\r\n");
   1b968:	4910      	ldr	r1, [pc, #64]	; (1b9ac <handle_at_accept+0x174>)
   1b96a:	480e      	ldr	r0, [pc, #56]	; (1b9a4 <handle_at_accept+0x16c>)
   1b96c:	f01b fea8 	bl	376c0 <strcpy>
   1b970:	e7f1      	b.n	1b956 <handle_at_accept+0x11e>
   1b972:	bf00      	nop
   1b974:	20023470 	.word	0x20023470
   1b978:	000383fc 	.word	0x000383fc
   1b97c:	0003831c 	.word	0x0003831c
   1b980:	00039556 	.word	0x00039556
   1b984:	00039613 	.word	0x00039613
   1b988:	0003973c 	.word	0x0003973c
   1b98c:	0003985e 	.word	0x0003985e
   1b990:	20023488 	.word	0x20023488
   1b994:	000397f9 	.word	0x000397f9
   1b998:	2002348c 	.word	0x2002348c
   1b99c:	00039810 	.word	0x00039810
   1b9a0:	00039831 	.word	0x00039831
   1b9a4:	20028950 	.word	0x20028950
   1b9a8:	0003984f 	.word	0x0003984f
   1b9ac:	00039870 	.word	0x00039870

0001b9b0 <handle_at_listen>:
	if (client.sock < 0) {
   1b9b0:	4b29      	ldr	r3, [pc, #164]	; (1ba58 <handle_at_listen+0xa8>)
{
   1b9b2:	4601      	mov	r1, r0
	if (client.sock < 0) {
   1b9b4:	6818      	ldr	r0, [r3, #0]
{
   1b9b6:	b510      	push	{r4, lr}
	if (client.sock < 0) {
   1b9b8:	2800      	cmp	r0, #0
   1b9ba:	461c      	mov	r4, r3
   1b9bc:	da0c      	bge.n	1b9d8 <handle_at_listen+0x28>
   1b9be:	4927      	ldr	r1, [pc, #156]	; (1ba5c <handle_at_listen+0xac>)
   1b9c0:	4b27      	ldr	r3, [pc, #156]	; (1ba60 <handle_at_listen+0xb0>)
		LOG_ERR("Socket not opened yet");
   1b9c2:	4828      	ldr	r0, [pc, #160]	; (1ba64 <handle_at_listen+0xb4>)
   1b9c4:	1ac9      	subs	r1, r1, r3
   1b9c6:	08c9      	lsrs	r1, r1, #3
   1b9c8:	0189      	lsls	r1, r1, #6
   1b9ca:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
   1b9ce:	f018 fd9b 	bl	34508 <log_0>
	int err = -EINVAL;
   1b9d2:	f06f 0015 	mvn.w	r0, #21
   1b9d6:	e039      	b.n	1ba4c <handle_at_listen+0x9c>
	if (client.role != AT_SOCKET_ROLE_SERVER) {
   1b9d8:	689a      	ldr	r2, [r3, #8]
   1b9da:	2a01      	cmp	r2, #1
   1b9dc:	d008      	beq.n	1b9f0 <handle_at_listen+0x40>
   1b9de:	491f      	ldr	r1, [pc, #124]	; (1ba5c <handle_at_listen+0xac>)
   1b9e0:	4b1f      	ldr	r3, [pc, #124]	; (1ba60 <handle_at_listen+0xb0>)
		LOG_ERR("Invalid role");
   1b9e2:	4821      	ldr	r0, [pc, #132]	; (1ba68 <handle_at_listen+0xb8>)
   1b9e4:	1ac9      	subs	r1, r1, r3
   1b9e6:	08c9      	lsrs	r1, r1, #3
   1b9e8:	0189      	lsls	r1, r1, #6
   1b9ea:	f041 0101 	orr.w	r1, r1, #1
   1b9ee:	e7ee      	b.n	1b9ce <handle_at_listen+0x1e>
	if (client.ip_proto != IPPROTO_TCP &&
   1b9f0:	691b      	ldr	r3, [r3, #16]
   1b9f2:	2b06      	cmp	r3, #6
   1b9f4:	d00b      	beq.n	1ba0e <handle_at_listen+0x5e>
   1b9f6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1b9fa:	d008      	beq.n	1ba0e <handle_at_listen+0x5e>
   1b9fc:	4917      	ldr	r1, [pc, #92]	; (1ba5c <handle_at_listen+0xac>)
   1b9fe:	4b18      	ldr	r3, [pc, #96]	; (1ba60 <handle_at_listen+0xb0>)
		LOG_ERR("Invalid protocol");
   1ba00:	481a      	ldr	r0, [pc, #104]	; (1ba6c <handle_at_listen+0xbc>)
   1ba02:	1ac9      	subs	r1, r1, r3
   1ba04:	08c9      	lsrs	r1, r1, #3
   1ba06:	0189      	lsls	r1, r1, #6
   1ba08:	f041 0101 	orr.w	r1, r1, #1
   1ba0c:	e7df      	b.n	1b9ce <handle_at_listen+0x1e>
	switch (cmd_type) {
   1ba0e:	2901      	cmp	r1, #1
   1ba10:	d1df      	bne.n	1b9d2 <handle_at_listen+0x22>
	return z_impl_zsock_listen(sock, backlog);
   1ba12:	f019 f9bf 	bl	34d94 <z_impl_zsock_listen>
	if (ret < 0) {
   1ba16:	2800      	cmp	r0, #0
   1ba18:	da19      	bge.n	1ba4e <handle_at_listen+0x9e>
   1ba1a:	4a11      	ldr	r2, [pc, #68]	; (1ba60 <handle_at_listen+0xb0>)
   1ba1c:	4c0f      	ldr	r4, [pc, #60]	; (1ba5c <handle_at_listen+0xac>)
   1ba1e:	1aa4      	subs	r4, r4, r2
		LOG_ERR("listen() failed: %d", -errno);
   1ba20:	f019 fc79 	bl	35316 <__errno>
   1ba24:	08e4      	lsrs	r4, r4, #3
   1ba26:	6801      	ldr	r1, [r0, #0]
   1ba28:	01a4      	lsls	r4, r4, #6
   1ba2a:	f044 0401 	orr.w	r4, r4, #1
   1ba2e:	4622      	mov	r2, r4
   1ba30:	4249      	negs	r1, r1
   1ba32:	480f      	ldr	r0, [pc, #60]	; (1ba70 <handle_at_listen+0xc0>)
   1ba34:	f018 fd77 	bl	34526 <log_1>
		do_socket_close(-errno);
   1ba38:	f019 fc6d 	bl	35316 <__errno>
   1ba3c:	6800      	ldr	r0, [r0, #0]
   1ba3e:	4240      	negs	r0, r0
   1ba40:	f7ff faa4 	bl	1af8c <do_socket_close>
		return -errno;
   1ba44:	f019 fc67 	bl	35316 <__errno>
   1ba48:	6800      	ldr	r0, [r0, #0]
   1ba4a:	4240      	negs	r0, r0
}
   1ba4c:	bd10      	pop	{r4, pc}
	client.sock_peer = INVALID_SOCKET;
   1ba4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return 0;
   1ba52:	2000      	movs	r0, #0
	client.sock_peer = INVALID_SOCKET;
   1ba54:	60e3      	str	r3, [r4, #12]
	return 0;
   1ba56:	e7f9      	b.n	1ba4c <handle_at_listen+0x9c>
   1ba58:	20023470 	.word	0x20023470
   1ba5c:	000383fc 	.word	0x000383fc
   1ba60:	0003831c 	.word	0x0003831c
   1ba64:	00039556 	.word	0x00039556
   1ba68:	00039613 	.word	0x00039613
   1ba6c:	0003973c 	.word	0x0003973c
   1ba70:	00039881 	.word	0x00039881

0001ba74 <handle_at_connect>:
	int size = TCPIP_MAX_URL;
   1ba74:	2380      	movs	r3, #128	; 0x80
{
   1ba76:	b570      	push	{r4, r5, r6, lr}
   1ba78:	b0a4      	sub	sp, #144	; 0x90
	int size = TCPIP_MAX_URL;
   1ba7a:	9303      	str	r3, [sp, #12]
	if (client.sock < 0) {
   1ba7c:	4b56      	ldr	r3, [pc, #344]	; (1bbd8 <handle_at_connect+0x164>)
{
   1ba7e:	4605      	mov	r5, r0
	if (client.sock < 0) {
   1ba80:	681a      	ldr	r2, [r3, #0]
   1ba82:	461e      	mov	r6, r3
   1ba84:	2a00      	cmp	r2, #0
   1ba86:	da0c      	bge.n	1baa2 <handle_at_connect+0x2e>
   1ba88:	4954      	ldr	r1, [pc, #336]	; (1bbdc <handle_at_connect+0x168>)
   1ba8a:	4b55      	ldr	r3, [pc, #340]	; (1bbe0 <handle_at_connect+0x16c>)
		LOG_ERR("Socket not opened yet");
   1ba8c:	4855      	ldr	r0, [pc, #340]	; (1bbe4 <handle_at_connect+0x170>)
   1ba8e:	1ac9      	subs	r1, r1, r3
   1ba90:	08c9      	lsrs	r1, r1, #3
   1ba92:	0189      	lsls	r1, r1, #6
   1ba94:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
   1ba98:	f018 fd36 	bl	34508 <log_0>
			return -EINVAL;
   1ba9c:	f06f 0415 	mvn.w	r4, #21
   1baa0:	e049      	b.n	1bb36 <handle_at_connect+0xc2>
	if (client.role != AT_SOCKET_ROLE_CLIENT) {
   1baa2:	689c      	ldr	r4, [r3, #8]
   1baa4:	b144      	cbz	r4, 1bab8 <handle_at_connect+0x44>
   1baa6:	494d      	ldr	r1, [pc, #308]	; (1bbdc <handle_at_connect+0x168>)
   1baa8:	4b4d      	ldr	r3, [pc, #308]	; (1bbe0 <handle_at_connect+0x16c>)
		LOG_ERR("Invalid role");
   1baaa:	484f      	ldr	r0, [pc, #316]	; (1bbe8 <handle_at_connect+0x174>)
   1baac:	1ac9      	subs	r1, r1, r3
   1baae:	08c9      	lsrs	r1, r1, #3
   1bab0:	0189      	lsls	r1, r1, #6
   1bab2:	f041 0101 	orr.w	r1, r1, #1
   1bab6:	e7ef      	b.n	1ba98 <handle_at_connect+0x24>
	switch (cmd_type) {
   1bab8:	2801      	cmp	r0, #1
   1baba:	d007      	beq.n	1bacc <handle_at_connect+0x58>
   1babc:	2802      	cmp	r0, #2
   1babe:	d1ed      	bne.n	1ba9c <handle_at_connect+0x28>
		if (client.connected) {
   1bac0:	7d1b      	ldrb	r3, [r3, #20]
   1bac2:	2b00      	cmp	r3, #0
   1bac4:	f000 8085 	beq.w	1bbd2 <handle_at_connect+0x15e>
			sprintf(rsp_buf, "+XCONNECT: 1\r\n");
   1bac8:	4948      	ldr	r1, [pc, #288]	; (1bbec <handle_at_connect+0x178>)
   1baca:	e077      	b.n	1bbbc <handle_at_connect+0x148>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1bacc:	4848      	ldr	r0, [pc, #288]	; (1bbf0 <handle_at_connect+0x17c>)
   1bace:	f01a feea 	bl	368a6 <at_params_valid_count_get>
   1bad2:	2802      	cmp	r0, #2
   1bad4:	d9e2      	bls.n	1ba9c <handle_at_connect+0x28>
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1bad6:	4629      	mov	r1, r5
   1bad8:	4845      	ldr	r0, [pc, #276]	; (1bbf0 <handle_at_connect+0x17c>)
   1bada:	ab03      	add	r3, sp, #12
   1badc:	aa04      	add	r2, sp, #16
   1bade:	f01a febf 	bl	36860 <at_params_string_get>
		if (err) {
   1bae2:	4604      	mov	r4, r0
   1bae4:	bb38      	cbnz	r0, 1bb36 <handle_at_connect+0xc2>
		url[size] = '\0';
   1bae6:	9b03      	ldr	r3, [sp, #12]
   1bae8:	aa24      	add	r2, sp, #144	; 0x90
   1baea:	4413      	add	r3, r2
   1baec:	f803 0c80 	strb.w	r0, [r3, #-128]
		err = at_params_short_get(&at_param_list, 2, &port);
   1baf0:	2102      	movs	r1, #2
   1baf2:	483f      	ldr	r0, [pc, #252]	; (1bbf0 <handle_at_connect+0x17c>)
   1baf4:	f10d 020a 	add.w	r2, sp, #10
   1baf8:	f01a fe8d 	bl	36816 <at_params_short_get>
		if (err) {
   1bafc:	4604      	mov	r4, r0
   1bafe:	b9d0      	cbnz	r0, 1bb36 <handle_at_connect+0xc2>
	if (check_for_ipv4(url, strlen(url))) {
   1bb00:	a804      	add	r0, sp, #16
		err = do_connect(url, port);
   1bb02:	f8bd 400a 	ldrh.w	r4, [sp, #10]
	if (check_for_ipv4(url, strlen(url))) {
   1bb06:	f7fd fab3 	bl	19070 <strlen>
   1bb0a:	b2c1      	uxtb	r1, r0
   1bb0c:	a804      	add	r0, sp, #16
   1bb0e:	f017 ffdd 	bl	33acc <check_for_ipv4>
   1bb12:	b198      	cbz	r0, 1bb3c <handle_at_connect+0xc8>
		ret = parse_host_by_ipv4(url, port);
   1bb14:	4621      	mov	r1, r4
   1bb16:	a804      	add	r0, sp, #16
   1bb18:	f7ff f896 	bl	1ac48 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
   1bb1c:	4604      	mov	r4, r0
	if (ret) {
   1bb1e:	b198      	cbz	r0, 1bb48 <handle_at_connect+0xd4>
   1bb20:	4a2e      	ldr	r2, [pc, #184]	; (1bbdc <handle_at_connect+0x168>)
   1bb22:	4b2f      	ldr	r3, [pc, #188]	; (1bbe0 <handle_at_connect+0x16c>)
		LOG_ERR("Parse failed: %d", ret);
   1bb24:	4601      	mov	r1, r0
   1bb26:	1ad2      	subs	r2, r2, r3
   1bb28:	08d2      	lsrs	r2, r2, #3
   1bb2a:	0192      	lsls	r2, r2, #6
   1bb2c:	4831      	ldr	r0, [pc, #196]	; (1bbf4 <handle_at_connect+0x180>)
   1bb2e:	f042 0201 	orr.w	r2, r2, #1
   1bb32:	f018 fcf8 	bl	34526 <log_1>
}
   1bb36:	4620      	mov	r0, r4
   1bb38:	b024      	add	sp, #144	; 0x90
   1bb3a:	bd70      	pop	{r4, r5, r6, pc}
		ret = parse_host_by_name(url, port, SOCK_STREAM);
   1bb3c:	462a      	mov	r2, r5
   1bb3e:	4621      	mov	r1, r4
   1bb40:	a804      	add	r0, sp, #16
   1bb42:	f7ff f895 	bl	1ac70 <parse_host_by_name>
   1bb46:	e7e9      	b.n	1bb1c <handle_at_connect+0xa8>
	if (client.sec_tag != INVALID_SEC_TAG) {
   1bb48:	6873      	ldr	r3, [r6, #4]
   1bb4a:	3301      	adds	r3, #1
   1bb4c:	d012      	beq.n	1bb74 <handle_at_connect+0x100>
		ret = setsockopt(client.sock, SOL_TLS,
   1bb4e:	a804      	add	r0, sp, #16
   1bb50:	6835      	ldr	r5, [r6, #0]
   1bb52:	f7fd fa8d 	bl	19070 <strlen>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1bb56:	2202      	movs	r2, #2
   1bb58:	9000      	str	r0, [sp, #0]
   1bb5a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1bb5e:	4628      	mov	r0, r5
   1bb60:	ab04      	add	r3, sp, #16
   1bb62:	f019 f99d 	bl	34ea0 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   1bb66:	2800      	cmp	r0, #0
   1bb68:	da04      	bge.n	1bb74 <handle_at_connect+0x100>
			printk("Failed to set TLS_HOSTNAME\n");
   1bb6a:	4823      	ldr	r0, [pc, #140]	; (1bbf8 <handle_at_connect+0x184>)
   1bb6c:	f018 f85a 	bl	33c24 <printk>
			ret = -errno;
   1bb70:	f019 fbd1 	bl	35316 <__errno>
	ret = connect(client.sock, (struct sockaddr *)&remote,
   1bb74:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   1bb76:	2208      	movs	r2, #8
   1bb78:	4920      	ldr	r1, [pc, #128]	; (1bbfc <handle_at_connect+0x188>)
   1bb7a:	f019 f8f5 	bl	34d68 <z_impl_zsock_connect>
	if (ret < 0) {
   1bb7e:	2800      	cmp	r0, #0
   1bb80:	da19      	bge.n	1bbb6 <handle_at_connect+0x142>
   1bb82:	4a17      	ldr	r2, [pc, #92]	; (1bbe0 <handle_at_connect+0x16c>)
   1bb84:	4c15      	ldr	r4, [pc, #84]	; (1bbdc <handle_at_connect+0x168>)
   1bb86:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect() failed: %d", -errno);
   1bb88:	f019 fbc5 	bl	35316 <__errno>
   1bb8c:	08e4      	lsrs	r4, r4, #3
   1bb8e:	6801      	ldr	r1, [r0, #0]
   1bb90:	01a4      	lsls	r4, r4, #6
   1bb92:	f044 0401 	orr.w	r4, r4, #1
   1bb96:	4622      	mov	r2, r4
   1bb98:	4249      	negs	r1, r1
   1bb9a:	4819      	ldr	r0, [pc, #100]	; (1bc00 <handle_at_connect+0x18c>)
   1bb9c:	f018 fcc3 	bl	34526 <log_1>
		do_socket_close(-errno);
   1bba0:	f019 fbb9 	bl	35316 <__errno>
   1bba4:	6800      	ldr	r0, [r0, #0]
   1bba6:	4240      	negs	r0, r0
   1bba8:	f7ff f9f0 	bl	1af8c <do_socket_close>
		return -errno;
   1bbac:	f019 fbb3 	bl	35316 <__errno>
   1bbb0:	6804      	ldr	r4, [r0, #0]
   1bbb2:	4264      	negs	r4, r4
   1bbb4:	e7bf      	b.n	1bb36 <handle_at_connect+0xc2>
	client.connected = true;
   1bbb6:	2301      	movs	r3, #1
	sprintf(rsp_buf, "#XCONNECT: 1\r\n");
   1bbb8:	4912      	ldr	r1, [pc, #72]	; (1bc04 <handle_at_connect+0x190>)
	client.connected = true;
   1bbba:	7533      	strb	r3, [r6, #20]
			sprintf(rsp_buf, "+XCONNECT: 0\r\n");
   1bbbc:	4812      	ldr	r0, [pc, #72]	; (1bc08 <handle_at_connect+0x194>)
   1bbbe:	f01b fd7f 	bl	376c0 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1bbc2:	4811      	ldr	r0, [pc, #68]	; (1bc08 <handle_at_connect+0x194>)
   1bbc4:	f7fd fa54 	bl	19070 <strlen>
   1bbc8:	4601      	mov	r1, r0
   1bbca:	480f      	ldr	r0, [pc, #60]	; (1bc08 <handle_at_connect+0x194>)
   1bbcc:	f7fe fb0c 	bl	1a1e8 <rsp_send>
		break;
   1bbd0:	e7b1      	b.n	1bb36 <handle_at_connect+0xc2>
			sprintf(rsp_buf, "+XCONNECT: 0\r\n");
   1bbd2:	490e      	ldr	r1, [pc, #56]	; (1bc0c <handle_at_connect+0x198>)
   1bbd4:	e7f2      	b.n	1bbbc <handle_at_connect+0x148>
   1bbd6:	bf00      	nop
   1bbd8:	20023470 	.word	0x20023470
   1bbdc:	000383fc 	.word	0x000383fc
   1bbe0:	0003831c 	.word	0x0003831c
   1bbe4:	00039556 	.word	0x00039556
   1bbe8:	00039613 	.word	0x00039613
   1bbec:	000398d5 	.word	0x000398d5
   1bbf0:	20023430 	.word	0x20023430
   1bbf4:	0003974d 	.word	0x0003974d
   1bbf8:	00039895 	.word	0x00039895
   1bbfc:	20023488 	.word	0x20023488
   1bc00:	000398b1 	.word	0x000398b1
   1bc04:	000398c6 	.word	0x000398c6
   1bc08:	20028950 	.word	0x20028950
   1bc0c:	000398e4 	.word	0x000398e4

0001bc10 <handle_at_bind>:
{
   1bc10:	b530      	push	{r4, r5, lr}
	if (client.sock < 0) {
   1bc12:	4d46      	ldr	r5, [pc, #280]	; (1bd2c <handle_at_bind+0x11c>)
{
   1bc14:	4604      	mov	r4, r0
	if (client.sock < 0) {
   1bc16:	682b      	ldr	r3, [r5, #0]
{
   1bc18:	b085      	sub	sp, #20
	if (client.sock < 0) {
   1bc1a:	2b00      	cmp	r3, #0
   1bc1c:	da03      	bge.n	1bc26 <handle_at_bind+0x16>
   1bc1e:	f7fe ff57 	bl	1aad0 <handle_at_bind.part.0>
}
   1bc22:	b005      	add	sp, #20
   1bc24:	bd30      	pop	{r4, r5, pc}
	switch (cmd_type) {
   1bc26:	2801      	cmp	r0, #1
   1bc28:	d002      	beq.n	1bc30 <handle_at_bind+0x20>
		return -EINVAL;
   1bc2a:	f06f 0015 	mvn.w	r0, #21
   1bc2e:	e7f8      	b.n	1bc22 <handle_at_bind+0x12>
		if (at_params_valid_count_get(&at_param_list) < 2) {
   1bc30:	483f      	ldr	r0, [pc, #252]	; (1bd30 <handle_at_bind+0x120>)
   1bc32:	f01a fe38 	bl	368a6 <at_params_valid_count_get>
   1bc36:	2801      	cmp	r0, #1
   1bc38:	d9f7      	bls.n	1bc2a <handle_at_bind+0x1a>
		err = at_params_short_get(&at_param_list, 1, &port);
   1bc3a:	4621      	mov	r1, r4
   1bc3c:	483c      	ldr	r0, [pc, #240]	; (1bd30 <handle_at_bind+0x120>)
   1bc3e:	f10d 0206 	add.w	r2, sp, #6
   1bc42:	f01a fde8 	bl	36816 <at_params_short_get>
		if (err < 0) {
   1bc46:	2800      	cmp	r0, #0
   1bc48:	dbeb      	blt.n	1bc22 <handle_at_bind+0x12>
		err = do_bind(port);
   1bc4a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	ret = modem_info_params_get(&modem_param);
   1bc4e:	4839      	ldr	r0, [pc, #228]	; (1bd34 <handle_at_bind+0x124>)
	local.sin_port = htons(port);
   1bc50:	0213      	lsls	r3, r2, #8
   1bc52:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	local.sin_family = AF_INET;
   1bc56:	f8ad 4008 	strh.w	r4, [sp, #8]
	local.sin_port = htons(port);
   1bc5a:	f8ad 300a 	strh.w	r3, [sp, #10]
	ret = modem_info_params_get(&modem_param);
   1bc5e:	f00b fa75 	bl	2714c <modem_info_params_get>
	if (ret) {
   1bc62:	4601      	mov	r1, r0
   1bc64:	b160      	cbz	r0, 1bc80 <handle_at_bind+0x70>
   1bc66:	4a34      	ldr	r2, [pc, #208]	; (1bd38 <handle_at_bind+0x128>)
   1bc68:	4b34      	ldr	r3, [pc, #208]	; (1bd3c <handle_at_bind+0x12c>)
		LOG_ERR("Unable to obtain modem parameters (%d)", ret);
   1bc6a:	4835      	ldr	r0, [pc, #212]	; (1bd40 <handle_at_bind+0x130>)
   1bc6c:	1ad2      	subs	r2, r2, r3
   1bc6e:	08d2      	lsrs	r2, r2, #3
   1bc70:	0192      	lsls	r2, r2, #6
   1bc72:	f042 0201 	orr.w	r2, r2, #1
   1bc76:	f018 fc56 	bl	34526 <log_1>
		return -1;
   1bc7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bc7e:	e7d0      	b.n	1bc22 <handle_at_bind+0x12>
	addr_len = strlen(modem_param.network.ip_address.value_string);
   1bc80:	4830      	ldr	r0, [pc, #192]	; (1bd44 <handle_at_bind+0x134>)
   1bc82:	f7fd f9f5 	bl	19070 <strlen>
	if (addr_len == 0) {
   1bc86:	b950      	cbnz	r0, 1bc9e <handle_at_bind+0x8e>
   1bc88:	492b      	ldr	r1, [pc, #172]	; (1bd38 <handle_at_bind+0x128>)
   1bc8a:	4b2c      	ldr	r3, [pc, #176]	; (1bd3c <handle_at_bind+0x12c>)
		LOG_ERR("LTE not connected yet");
   1bc8c:	482e      	ldr	r0, [pc, #184]	; (1bd48 <handle_at_bind+0x138>)
   1bc8e:	1ac9      	subs	r1, r1, r3
   1bc90:	08c9      	lsrs	r1, r1, #3
   1bc92:	0189      	lsls	r1, r1, #6
   1bc94:	f041 0101 	orr.w	r1, r1, #1
   1bc98:	f018 fc36 	bl	34508 <log_0>
   1bc9c:	e7ed      	b.n	1bc7a <handle_at_bind+0x6a>
	if (!check_for_ipv4(modem_param.network.ip_address.value_string,
   1bc9e:	b2c1      	uxtb	r1, r0
   1bca0:	4828      	ldr	r0, [pc, #160]	; (1bd44 <handle_at_bind+0x134>)
   1bca2:	f017 ff13 	bl	33acc <check_for_ipv4>
   1bca6:	b940      	cbnz	r0, 1bcba <handle_at_bind+0xaa>
   1bca8:	4923      	ldr	r1, [pc, #140]	; (1bd38 <handle_at_bind+0x128>)
   1bcaa:	4b24      	ldr	r3, [pc, #144]	; (1bd3c <handle_at_bind+0x12c>)
		LOG_ERR("Invalid local address");
   1bcac:	4827      	ldr	r0, [pc, #156]	; (1bd4c <handle_at_bind+0x13c>)
   1bcae:	1ac9      	subs	r1, r1, r3
   1bcb0:	08c9      	lsrs	r1, r1, #3
   1bcb2:	0189      	lsls	r1, r1, #6
   1bcb4:	f041 0101 	orr.w	r1, r1, #1
   1bcb8:	e7ee      	b.n	1bc98 <handle_at_bind+0x88>
	return z_impl_zsock_inet_pton(family, src, dst);
   1bcba:	4922      	ldr	r1, [pc, #136]	; (1bd44 <handle_at_bind+0x134>)
   1bcbc:	4620      	mov	r0, r4
   1bcbe:	aa03      	add	r2, sp, #12
   1bcc0:	f019 f8cc 	bl	34e5c <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, modem_param.network.ip_address.value_string,
   1bcc4:	2801      	cmp	r0, #1
   1bcc6:	d00f      	beq.n	1bce8 <handle_at_bind+0xd8>
   1bcc8:	4a1c      	ldr	r2, [pc, #112]	; (1bd3c <handle_at_bind+0x12c>)
   1bcca:	4c1b      	ldr	r4, [pc, #108]	; (1bd38 <handle_at_bind+0x128>)
   1bccc:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Parse local IP address failed: %d", -errno);
   1bcce:	f019 fb22 	bl	35316 <__errno>
   1bcd2:	08e4      	lsrs	r4, r4, #3
   1bcd4:	6801      	ldr	r1, [r0, #0]
   1bcd6:	01a4      	lsls	r4, r4, #6
   1bcd8:	f044 0401 	orr.w	r4, r4, #1
   1bcdc:	4622      	mov	r2, r4
   1bcde:	481c      	ldr	r0, [pc, #112]	; (1bd50 <handle_at_bind+0x140>)
   1bce0:	4249      	negs	r1, r1
   1bce2:	f018 fc20 	bl	34526 <log_1>
   1bce6:	e7a0      	b.n	1bc2a <handle_at_bind+0x1a>
	ret = bind(client.sock, (struct sockaddr *)&local,
   1bce8:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_bind(sock, addr, addrlen);
   1bcea:	2208      	movs	r2, #8
   1bcec:	eb0d 0102 	add.w	r1, sp, r2
   1bcf0:	f019 f824 	bl	34d3c <z_impl_zsock_bind>
	if (ret) {
   1bcf4:	2800      	cmp	r0, #0
   1bcf6:	d094      	beq.n	1bc22 <handle_at_bind+0x12>
   1bcf8:	4a10      	ldr	r2, [pc, #64]	; (1bd3c <handle_at_bind+0x12c>)
   1bcfa:	4c0f      	ldr	r4, [pc, #60]	; (1bd38 <handle_at_bind+0x128>)
   1bcfc:	1aa4      	subs	r4, r4, r2
		LOG_ERR("bind() failed: %d", -errno);
   1bcfe:	f019 fb0a 	bl	35316 <__errno>
   1bd02:	08e4      	lsrs	r4, r4, #3
   1bd04:	6801      	ldr	r1, [r0, #0]
   1bd06:	01a4      	lsls	r4, r4, #6
   1bd08:	f044 0401 	orr.w	r4, r4, #1
   1bd0c:	4622      	mov	r2, r4
   1bd0e:	4249      	negs	r1, r1
   1bd10:	4810      	ldr	r0, [pc, #64]	; (1bd54 <handle_at_bind+0x144>)
   1bd12:	f018 fc08 	bl	34526 <log_1>
		do_socket_close(-errno);
   1bd16:	f019 fafe 	bl	35316 <__errno>
   1bd1a:	6800      	ldr	r0, [r0, #0]
   1bd1c:	4240      	negs	r0, r0
   1bd1e:	f7ff f935 	bl	1af8c <do_socket_close>
		return -errno;
   1bd22:	f019 faf8 	bl	35316 <__errno>
   1bd26:	6800      	ldr	r0, [r0, #0]
   1bd28:	4240      	negs	r0, r0
		break;
   1bd2a:	e77a      	b.n	1bc22 <handle_at_bind+0x12>
   1bd2c:	20023470 	.word	0x20023470
   1bd30:	20023430 	.word	0x20023430
   1bd34:	20020900 	.word	0x20020900
   1bd38:	000383fc 	.word	0x000383fc
   1bd3c:	0003831c 	.word	0x0003831c
   1bd40:	000398f3 	.word	0x000398f3
   1bd44:	20020c12 	.word	0x20020c12
   1bd48:	0003991a 	.word	0x0003991a
   1bd4c:	00039930 	.word	0x00039930
   1bd50:	00039946 	.word	0x00039946
   1bd54:	00039968 	.word	0x00039968

0001bd58 <handle_at_socket>:
{
   1bd58:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cmd_type) {
   1bd5a:	2802      	cmp	r0, #2
{
   1bd5c:	4604      	mov	r4, r0
   1bd5e:	b08b      	sub	sp, #44	; 0x2c
	switch (cmd_type) {
   1bd60:	f000 8101 	beq.w	1bf66 <handle_at_socket+0x20e>
   1bd64:	2803      	cmp	r0, #3
   1bd66:	f000 811c 	beq.w	1bfa2 <handle_at_socket+0x24a>
   1bd6a:	2801      	cmp	r0, #1
   1bd6c:	d144      	bne.n	1bdf8 <handle_at_socket+0xa0>
		if (at_params_valid_count_get(&at_param_list) < 2) {
   1bd6e:	489b      	ldr	r0, [pc, #620]	; (1bfdc <handle_at_socket+0x284>)
   1bd70:	f01a fd99 	bl	368a6 <at_params_valid_count_get>
   1bd74:	2801      	cmp	r0, #1
   1bd76:	d93f      	bls.n	1bdf8 <handle_at_socket+0xa0>
		err = at_params_short_get(&at_param_list, 1, &op);
   1bd78:	4621      	mov	r1, r4
   1bd7a:	4898      	ldr	r0, [pc, #608]	; (1bfdc <handle_at_socket+0x284>)
   1bd7c:	f10d 021a 	add.w	r2, sp, #26
   1bd80:	f01a fd49 	bl	36816 <at_params_short_get>
		if (err) {
   1bd84:	4604      	mov	r4, r0
   1bd86:	2800      	cmp	r0, #0
   1bd88:	f040 808f 	bne.w	1beaa <handle_at_socket+0x152>
		if (op == AT_SOCKET_OPEN) {
   1bd8c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1bd90:	2b01      	cmp	r3, #1
   1bd92:	f040 80d5 	bne.w	1bf40 <handle_at_socket+0x1e8>
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   1bd96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (at_params_valid_count_get(&at_param_list) < 4) {
   1bd9a:	4890      	ldr	r0, [pc, #576]	; (1bfdc <handle_at_socket+0x284>)
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   1bd9c:	9308      	str	r3, [sp, #32]
			if (at_params_valid_count_get(&at_param_list) < 4) {
   1bd9e:	f01a fd82 	bl	368a6 <at_params_valid_count_get>
   1bda2:	2803      	cmp	r0, #3
   1bda4:	d928      	bls.n	1bdf8 <handle_at_socket+0xa0>
			err = at_params_short_get(&at_param_list, 2, &type);
   1bda6:	2102      	movs	r1, #2
   1bda8:	488c      	ldr	r0, [pc, #560]	; (1bfdc <handle_at_socket+0x284>)
   1bdaa:	f10d 021e 	add.w	r2, sp, #30
   1bdae:	f01a fd32 	bl	36816 <at_params_short_get>
			if (err) {
   1bdb2:	4604      	mov	r4, r0
   1bdb4:	2800      	cmp	r0, #0
   1bdb6:	d178      	bne.n	1beaa <handle_at_socket+0x152>
			err = at_params_short_get(&at_param_list, 3, &role);
   1bdb8:	2103      	movs	r1, #3
   1bdba:	4888      	ldr	r0, [pc, #544]	; (1bfdc <handle_at_socket+0x284>)
   1bdbc:	aa07      	add	r2, sp, #28
   1bdbe:	f01a fd2a 	bl	36816 <at_params_short_get>
			if (err) {
   1bdc2:	4604      	mov	r4, r0
   1bdc4:	2800      	cmp	r0, #0
   1bdc6:	d170      	bne.n	1beaa <handle_at_socket+0x152>
			if (at_params_valid_count_get(&at_param_list) > 4) {
   1bdc8:	4884      	ldr	r0, [pc, #528]	; (1bfdc <handle_at_socket+0x284>)
   1bdca:	f01a fd6c 	bl	368a6 <at_params_valid_count_get>
   1bdce:	2804      	cmp	r0, #4
   1bdd0:	d904      	bls.n	1bddc <handle_at_socket+0x84>
				at_params_int_get(&at_param_list, 4, &sec_tag);
   1bdd2:	2104      	movs	r1, #4
   1bdd4:	4881      	ldr	r0, [pc, #516]	; (1bfdc <handle_at_socket+0x284>)
   1bdd6:	aa08      	add	r2, sp, #32
   1bdd8:	f01a fd2f 	bl	3683a <at_params_int_get>
			if (client.sock > 0) {
   1bddc:	4d80      	ldr	r5, [pc, #512]	; (1bfe0 <handle_at_socket+0x288>)
   1bdde:	682b      	ldr	r3, [r5, #0]
   1bde0:	2b00      	cmp	r3, #0
   1bde2:	dd0c      	ble.n	1bdfe <handle_at_socket+0xa6>
   1bde4:	497f      	ldr	r1, [pc, #508]	; (1bfe4 <handle_at_socket+0x28c>)
   1bde6:	4b80      	ldr	r3, [pc, #512]	; (1bfe8 <handle_at_socket+0x290>)
				LOG_WRN("Socket is already opened");
   1bde8:	4880      	ldr	r0, [pc, #512]	; (1bfec <handle_at_socket+0x294>)
   1bdea:	1ac9      	subs	r1, r1, r3
   1bdec:	08c9      	lsrs	r1, r1, #3
   1bdee:	0189      	lsls	r1, r1, #6
   1bdf0:	f041 0102 	orr.w	r1, r1, #2
				LOG_WRN("Socket is not opened yet");
   1bdf4:	f018 fb88 	bl	34508 <log_0>
			return -EINVAL;
   1bdf8:	f06f 0415 	mvn.w	r4, #21
   1bdfc:	e055      	b.n	1beaa <handle_at_socket+0x152>
				err = do_socket_open(type, role, sec_tag);
   1bdfe:	f89d 601e 	ldrb.w	r6, [sp, #30]
   1be02:	9b08      	ldr	r3, [sp, #32]
	if (type == SOCK_STREAM) {
   1be04:	2e01      	cmp	r6, #1
				err = do_socket_open(type, role, sec_tag);
   1be06:	f89d 701c 	ldrb.w	r7, [sp, #28]
	client.sec_tag = sec_tag;
   1be0a:	606b      	str	r3, [r5, #4]
	if (type == SOCK_STREAM) {
   1be0c:	d12a      	bne.n	1be64 <handle_at_socket+0x10c>
		if (sec_tag == INVALID_SEC_TAG) {
   1be0e:	3301      	adds	r3, #1
   1be10:	d11e      	bne.n	1be50 <handle_at_socket+0xf8>
	return z_impl_zsock_socket(family, type, proto);
   1be12:	2206      	movs	r2, #6
   1be14:	4631      	mov	r1, r6
   1be16:	4630      	mov	r0, r6
   1be18:	f004 ffce 	bl	20db8 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_TCP;
   1be1c:	2306      	movs	r3, #6
			client.sock = socket(AF_INET, SOCK_STREAM,
   1be1e:	6028      	str	r0, [r5, #0]
	if (client.sock < 0) {
   1be20:	6828      	ldr	r0, [r5, #0]
			client.ip_proto = IPPROTO_DTLS_1_2;
   1be22:	612b      	str	r3, [r5, #16]
	if (client.sock < 0) {
   1be24:	2800      	cmp	r0, #0
   1be26:	da43      	bge.n	1beb0 <handle_at_socket+0x158>
   1be28:	4a6f      	ldr	r2, [pc, #444]	; (1bfe8 <handle_at_socket+0x290>)
   1be2a:	4c6e      	ldr	r4, [pc, #440]	; (1bfe4 <handle_at_socket+0x28c>)
   1be2c:	1aa4      	subs	r4, r4, r2
   1be2e:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("socket() failed: %d", -errno);
   1be30:	f019 fa71 	bl	35316 <__errno>
   1be34:	01a4      	lsls	r4, r4, #6
   1be36:	f044 0401 	orr.w	r4, r4, #1
   1be3a:	4622      	mov	r2, r4
   1be3c:	6801      	ldr	r1, [r0, #0]
   1be3e:	486c      	ldr	r0, [pc, #432]	; (1bff0 <handle_at_socket+0x298>)
   1be40:	4249      	negs	r1, r1
			LOG_ERR("set (d)tls tag list failed: %d", -errno);
   1be42:	f018 fb70 	bl	34526 <log_1>
			ret = -errno;
   1be46:	f019 fa66 	bl	35316 <__errno>
   1be4a:	6804      	ldr	r4, [r0, #0]
   1be4c:	4264      	negs	r4, r4
			goto error_exit;
   1be4e:	e042      	b.n	1bed6 <handle_at_socket+0x17e>
   1be50:	f44f 7281 	mov.w	r2, #258	; 0x102
   1be54:	4631      	mov	r1, r6
   1be56:	4630      	mov	r0, r6
   1be58:	f004 ffae 	bl	20db8 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_TLS_1_2;
   1be5c:	f44f 7381 	mov.w	r3, #258	; 0x102
			client.sock = socket(AF_INET, SOCK_STREAM,
   1be60:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_TLS_1_2;
   1be62:	e7dd      	b.n	1be20 <handle_at_socket+0xc8>
	} else if (type == SOCK_DGRAM) {
   1be64:	2e02      	cmp	r6, #2
   1be66:	d113      	bne.n	1be90 <handle_at_socket+0x138>
		if (sec_tag == INVALID_SEC_TAG) {
   1be68:	3301      	adds	r3, #1
   1be6a:	d107      	bne.n	1be7c <handle_at_socket+0x124>
   1be6c:	2211      	movs	r2, #17
   1be6e:	4631      	mov	r1, r6
   1be70:	2001      	movs	r0, #1
   1be72:	f004 ffa1 	bl	20db8 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_UDP;
   1be76:	2311      	movs	r3, #17
			client.sock = socket(AF_INET, SOCK_DGRAM,
   1be78:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_UDP;
   1be7a:	e7d1      	b.n	1be20 <handle_at_socket+0xc8>
   1be7c:	f240 1211 	movw	r2, #273	; 0x111
   1be80:	4631      	mov	r1, r6
   1be82:	2001      	movs	r0, #1
   1be84:	f004 ff98 	bl	20db8 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_DTLS_1_2;
   1be88:	f240 1311 	movw	r3, #273	; 0x111
			client.sock = socket(AF_INET, SOCK_DGRAM,
   1be8c:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_DTLS_1_2;
   1be8e:	e7c7      	b.n	1be20 <handle_at_socket+0xc8>
   1be90:	4b55      	ldr	r3, [pc, #340]	; (1bfe8 <handle_at_socket+0x290>)
   1be92:	4a54      	ldr	r2, [pc, #336]	; (1bfe4 <handle_at_socket+0x28c>)
		LOG_ERR("socket type %d not supported", type);
   1be94:	4631      	mov	r1, r6
   1be96:	1ad2      	subs	r2, r2, r3
   1be98:	08d2      	lsrs	r2, r2, #3
   1be9a:	0192      	lsls	r2, r2, #6
   1be9c:	4855      	ldr	r0, [pc, #340]	; (1bff4 <handle_at_socket+0x29c>)
   1be9e:	f042 0201 	orr.w	r2, r2, #1
   1bea2:	f018 fb40 	bl	34526 <log_1>
		return -ENOTSUP;
   1bea6:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   1beaa:	4620      	mov	r0, r4
   1beac:	b00b      	add	sp, #44	; 0x2c
   1beae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (client.sec_tag != INVALID_SEC_TAG) {
   1beb0:	686b      	ldr	r3, [r5, #4]
   1beb2:	1c5a      	adds	r2, r3, #1
   1beb4:	d02e      	beq.n	1bf14 <handle_at_socket+0x1bc>
		if (role == AT_SOCKET_ROLE_SERVER) {
   1beb6:	2f01      	cmp	r7, #1
		sec_tag_t sec_tag_list[1] = { client.sec_tag };
   1beb8:	9309      	str	r3, [sp, #36]	; 0x24
		if (role == AT_SOCKET_ROLE_SERVER) {
   1beba:	d114      	bne.n	1bee6 <handle_at_socket+0x18e>
			sprintf(rsp_buf,
   1bebc:	494e      	ldr	r1, [pc, #312]	; (1bff8 <handle_at_socket+0x2a0>)
   1bebe:	484f      	ldr	r0, [pc, #316]	; (1bffc <handle_at_socket+0x2a4>)
   1bec0:	f01b fbfe 	bl	376c0 <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1bec4:	484d      	ldr	r0, [pc, #308]	; (1bffc <handle_at_socket+0x2a4>)
   1bec6:	f7fd f8d3 	bl	19070 <strlen>
   1beca:	4601      	mov	r1, r0
   1becc:	484b      	ldr	r0, [pc, #300]	; (1bffc <handle_at_socket+0x2a4>)
   1bece:	f7fe f98b 	bl	1a1e8 <rsp_send>
			ret = -ENOTSUP;
   1bed2:	f06f 0485 	mvn.w	r4, #133	; 0x85
	if (client.sock >= 0) {
   1bed6:	6828      	ldr	r0, [r5, #0]
   1bed8:	2800      	cmp	r0, #0
   1beda:	db01      	blt.n	1bee0 <handle_at_socket+0x188>
	return z_impl_zsock_close(sock);
   1bedc:	f018 ff17 	bl	34d0e <z_impl_zsock_close>
	slm_at_tcpip_init();
   1bee0:	f7ff f846 	bl	1af70 <slm_at_tcpip_init>
	return ret;
   1bee4:	e7e1      	b.n	1beaa <handle_at_socket+0x152>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1bee6:	2304      	movs	r3, #4
   1bee8:	2201      	movs	r2, #1
   1beea:	9300      	str	r3, [sp, #0]
   1beec:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1bef0:	ab09      	add	r3, sp, #36	; 0x24
   1bef2:	f018 ffd5 	bl	34ea0 <z_impl_zsock_setsockopt>
		if (ret) {
   1bef6:	b168      	cbz	r0, 1bf14 <handle_at_socket+0x1bc>
   1bef8:	4a3b      	ldr	r2, [pc, #236]	; (1bfe8 <handle_at_socket+0x290>)
   1befa:	4c3a      	ldr	r4, [pc, #232]	; (1bfe4 <handle_at_socket+0x28c>)
   1befc:	1aa4      	subs	r4, r4, r2
			LOG_ERR("set (d)tls tag list failed: %d", -errno);
   1befe:	f019 fa0a 	bl	35316 <__errno>
   1bf02:	08e4      	lsrs	r4, r4, #3
   1bf04:	6801      	ldr	r1, [r0, #0]
   1bf06:	01a4      	lsls	r4, r4, #6
   1bf08:	f044 0401 	orr.w	r4, r4, #1
   1bf0c:	4622      	mov	r2, r4
   1bf0e:	483c      	ldr	r0, [pc, #240]	; (1c000 <handle_at_socket+0x2a8>)
   1bf10:	4249      	negs	r1, r1
   1bf12:	e796      	b.n	1be42 <handle_at_socket+0xea>
	sprintf(rsp_buf, "#XSOCKET: %d, %d, %d, %d\r\n", client.sock,
   1bf14:	692b      	ldr	r3, [r5, #16]
   1bf16:	f640 228c 	movw	r2, #2700	; 0xa8c
   1bf1a:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1bf1e:	682b      	ldr	r3, [r5, #0]
   1bf20:	2100      	movs	r1, #0
   1bf22:	9300      	str	r3, [sp, #0]
   1bf24:	4835      	ldr	r0, [pc, #212]	; (1bffc <handle_at_socket+0x2a4>)
   1bf26:	4b37      	ldr	r3, [pc, #220]	; (1c004 <handle_at_socket+0x2ac>)
   1bf28:	9601      	str	r6, [sp, #4]
	client.role = role;
   1bf2a:	60af      	str	r7, [r5, #8]
	sprintf(rsp_buf, "#XSOCKET: %d, %d, %d, %d\r\n", client.sock,
   1bf2c:	f01b fba1 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1bf30:	4832      	ldr	r0, [pc, #200]	; (1bffc <handle_at_socket+0x2a4>)
   1bf32:	f7fd f89d 	bl	19070 <strlen>
   1bf36:	4601      	mov	r1, r0
   1bf38:	4830      	ldr	r0, [pc, #192]	; (1bffc <handle_at_socket+0x2a4>)
   1bf3a:	f7fe f955 	bl	1a1e8 <rsp_send>
		break;
   1bf3e:	e7b4      	b.n	1beaa <handle_at_socket+0x152>
		} else if (op == AT_SOCKET_CLOSE) {
   1bf40:	2b00      	cmp	r3, #0
   1bf42:	d1b2      	bne.n	1beaa <handle_at_socket+0x152>
			if (client.sock < 0) {
   1bf44:	4b26      	ldr	r3, [pc, #152]	; (1bfe0 <handle_at_socket+0x288>)
   1bf46:	681b      	ldr	r3, [r3, #0]
   1bf48:	2b00      	cmp	r3, #0
   1bf4a:	da08      	bge.n	1bf5e <handle_at_socket+0x206>
   1bf4c:	4925      	ldr	r1, [pc, #148]	; (1bfe4 <handle_at_socket+0x28c>)
   1bf4e:	4b26      	ldr	r3, [pc, #152]	; (1bfe8 <handle_at_socket+0x290>)
				LOG_WRN("Socket is not opened yet");
   1bf50:	482d      	ldr	r0, [pc, #180]	; (1c008 <handle_at_socket+0x2b0>)
   1bf52:	1ac9      	subs	r1, r1, r3
   1bf54:	08c9      	lsrs	r1, r1, #3
   1bf56:	0189      	lsls	r1, r1, #6
   1bf58:	f041 0102 	orr.w	r1, r1, #2
   1bf5c:	e74a      	b.n	1bdf4 <handle_at_socket+0x9c>
				err = do_socket_close(0);
   1bf5e:	f7ff f815 	bl	1af8c <do_socket_close>
   1bf62:	4604      	mov	r4, r0
   1bf64:	e7a1      	b.n	1beaa <handle_at_socket+0x152>
		if (client.sock != INVALID_SOCKET) {
   1bf66:	4b1e      	ldr	r3, [pc, #120]	; (1bfe0 <handle_at_socket+0x288>)
   1bf68:	681a      	ldr	r2, [r3, #0]
   1bf6a:	1c51      	adds	r1, r2, #1
   1bf6c:	d014      	beq.n	1bf98 <handle_at_socket+0x240>
			sprintf(rsp_buf, "#XSOCKET: %d, %d, %d\r\n",
   1bf6e:	6899      	ldr	r1, [r3, #8]
   1bf70:	4822      	ldr	r0, [pc, #136]	; (1bffc <handle_at_socket+0x2a4>)
   1bf72:	9102      	str	r1, [sp, #8]
   1bf74:	691b      	ldr	r3, [r3, #16]
   1bf76:	2100      	movs	r1, #0
   1bf78:	e9cd 2300 	strd	r2, r3, [sp]
   1bf7c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1bf80:	4b22      	ldr	r3, [pc, #136]	; (1c00c <handle_at_socket+0x2b4>)
   1bf82:	f01b fb76 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1bf86:	481d      	ldr	r0, [pc, #116]	; (1bffc <handle_at_socket+0x2a4>)
   1bf88:	f7fd f872 	bl	19070 <strlen>
   1bf8c:	4601      	mov	r1, r0
   1bf8e:	481b      	ldr	r0, [pc, #108]	; (1bffc <handle_at_socket+0x2a4>)
   1bf90:	f7fe f92a 	bl	1a1e8 <rsp_send>
		err = 0;
   1bf94:	2400      	movs	r4, #0
		break;
   1bf96:	e788      	b.n	1beaa <handle_at_socket+0x152>
			sprintf(rsp_buf, "#XSOCKET: 0\r\n");
   1bf98:	491d      	ldr	r1, [pc, #116]	; (1c010 <handle_at_socket+0x2b8>)
   1bf9a:	4818      	ldr	r0, [pc, #96]	; (1bffc <handle_at_socket+0x2a4>)
   1bf9c:	f01b fb90 	bl	376c0 <strcpy>
   1bfa0:	e7f1      	b.n	1bf86 <handle_at_socket+0x22e>
		sprintf(rsp_buf, "#XSOCKET: (%d, %d), (%d, %d), (%d, %d)",
   1bfa2:	2400      	movs	r4, #0
   1bfa4:	2301      	movs	r3, #1
   1bfa6:	2202      	movs	r2, #2
   1bfa8:	4621      	mov	r1, r4
   1bfaa:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1bfae:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1bfb2:	f640 228c 	movw	r2, #2700	; 0xa8c
   1bfb6:	e9cd 4300 	strd	r4, r3, [sp]
   1bfba:	4810      	ldr	r0, [pc, #64]	; (1bffc <handle_at_socket+0x2a4>)
   1bfbc:	4b15      	ldr	r3, [pc, #84]	; (1c014 <handle_at_socket+0x2bc>)
   1bfbe:	f01b fb58 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1bfc2:	480e      	ldr	r0, [pc, #56]	; (1bffc <handle_at_socket+0x2a4>)
   1bfc4:	f7fd f854 	bl	19070 <strlen>
   1bfc8:	4601      	mov	r1, r0
   1bfca:	480c      	ldr	r0, [pc, #48]	; (1bffc <handle_at_socket+0x2a4>)
   1bfcc:	f7fe f90c 	bl	1a1e8 <rsp_send>
		sprintf(rsp_buf, ", <sec-tag>\r\n");
   1bfd0:	4911      	ldr	r1, [pc, #68]	; (1c018 <handle_at_socket+0x2c0>)
   1bfd2:	480a      	ldr	r0, [pc, #40]	; (1bffc <handle_at_socket+0x2a4>)
   1bfd4:	f01b fb74 	bl	376c0 <strcpy>
   1bfd8:	e7aa      	b.n	1bf30 <handle_at_socket+0x1d8>
   1bfda:	bf00      	nop
   1bfdc:	20023430 	.word	0x20023430
   1bfe0:	20023470 	.word	0x20023470
   1bfe4:	000383fc 	.word	0x000383fc
   1bfe8:	0003831c 	.word	0x0003831c
   1bfec:	0003997a 	.word	0x0003997a
   1bff0:	000399b0 	.word	0x000399b0
   1bff4:	00039993 	.word	0x00039993
   1bff8:	000399c4 	.word	0x000399c4
   1bffc:	20028950 	.word	0x20028950
   1c000:	000399ec 	.word	0x000399ec
   1c004:	00039a0b 	.word	0x00039a0b
   1c008:	00039a26 	.word	0x00039a26
   1c00c:	00039a3f 	.word	0x00039a3f
   1c010:	00039a56 	.word	0x00039a56
   1c014:	00039a64 	.word	0x00039a64
   1c018:	00039a8b 	.word	0x00039a8b

0001c01c <handle_at_tcp_recv>:
 *  AT#XTCPRECV[=<length>]
 *  AT#XTCPRECV? READ command not supported
 *  AT#XTCPRECV=? TEST command not supported
 */
static int handle_at_tcp_recv(enum at_cmd_type cmd_type)
{
   1c01c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err = -EINVAL;
	uint16_t length = 0;
   1c01e:	2300      	movs	r3, #0

	switch (cmd_type) {
   1c020:	2801      	cmp	r0, #1
{
   1c022:	4604      	mov	r4, r0
	uint16_t length = 0;
   1c024:	f8ad 300e 	strh.w	r3, [sp, #14]
	switch (cmd_type) {
   1c028:	d13a      	bne.n	1c0a0 <handle_at_tcp_recv+0x84>
	case AT_CMD_TYPE_SET_COMMAND:
	{
		uint32_t sz_send = 0;

		if (at_params_valid_count_get(&at_param_list) > 1) {
   1c02a:	481f      	ldr	r0, [pc, #124]	; (1c0a8 <handle_at_tcp_recv+0x8c>)
   1c02c:	f01a fc3b 	bl	368a6 <at_params_valid_count_get>
   1c030:	2801      	cmp	r0, #1
   1c032:	d816      	bhi.n	1c062 <handle_at_tcp_recv+0x46>
 *
 * @return 1 if the ring buffer is empty, or 0 if not.
 */
static inline int ring_buf_is_empty(struct ring_buf *buf)
{
	return (buf->head == buf->tail);
   1c034:	481d      	ldr	r0, [pc, #116]	; (1c0ac <handle_at_tcp_recv+0x90>)
			err = at_params_short_get(&at_param_list, 1, &length);
			if (err) {
				return err;
			}
		}
		if (ring_buf_is_empty(&data_buf) == 0) {
   1c036:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c03a:	429a      	cmp	r2, r3
   1c03c:	d11b      	bne.n	1c076 <handle_at_tcp_recv+0x5a>
		uint32_t sz_send = 0;
   1c03e:	2400      	movs	r4, #0
				sz_send = length;
			}
			rsp_send(rsp_buf, sz_send);
			rsp_send("\r\n", 2);
		}
		sprintf(rsp_buf, "#XTCPRECV: %d\r\n", sz_send);
   1c040:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c044:	2100      	movs	r1, #0
   1c046:	4b1a      	ldr	r3, [pc, #104]	; (1c0b0 <handle_at_tcp_recv+0x94>)
   1c048:	481a      	ldr	r0, [pc, #104]	; (1c0b4 <handle_at_tcp_recv+0x98>)
   1c04a:	9400      	str	r4, [sp, #0]
   1c04c:	f01b fb11 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1c050:	4818      	ldr	r0, [pc, #96]	; (1c0b4 <handle_at_tcp_recv+0x98>)
   1c052:	f7fd f80d 	bl	19070 <strlen>
   1c056:	4601      	mov	r1, r0
   1c058:	4816      	ldr	r0, [pc, #88]	; (1c0b4 <handle_at_tcp_recv+0x98>)
   1c05a:	f7fe f8c5 	bl	1a1e8 <rsp_send>
		err = 0;
   1c05e:	2000      	movs	r0, #0
	} break;
   1c060:	e007      	b.n	1c072 <handle_at_tcp_recv+0x56>
			err = at_params_short_get(&at_param_list, 1, &length);
   1c062:	4621      	mov	r1, r4
   1c064:	4810      	ldr	r0, [pc, #64]	; (1c0a8 <handle_at_tcp_recv+0x8c>)
   1c066:	f10d 020e 	add.w	r2, sp, #14
   1c06a:	f01a fbd4 	bl	36816 <at_params_short_get>
			if (err) {
   1c06e:	2800      	cmp	r0, #0
   1c070:	d0e0      	beq.n	1c034 <handle_at_tcp_recv+0x18>
	default:
		break;
	}

	return err;
}
   1c072:	b004      	add	sp, #16
   1c074:	bd10      	pop	{r4, pc}
			sz_send = ring_buf_get(&data_buf, rsp_buf,
   1c076:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c07a:	490e      	ldr	r1, [pc, #56]	; (1c0b4 <handle_at_tcp_recv+0x98>)
   1c07c:	f018 f9ff 	bl	3447e <ring_buf_get>
			if (length > 0 && sz_send > length) {
   1c080:	f8bd 300e 	ldrh.w	r3, [sp, #14]
			sz_send = ring_buf_get(&data_buf, rsp_buf,
   1c084:	4604      	mov	r4, r0
			if (length > 0 && sz_send > length) {
   1c086:	b113      	cbz	r3, 1c08e <handle_at_tcp_recv+0x72>
   1c088:	4298      	cmp	r0, r3
   1c08a:	bf28      	it	cs
   1c08c:	461c      	movcs	r4, r3
			rsp_send(rsp_buf, sz_send);
   1c08e:	4621      	mov	r1, r4
   1c090:	4808      	ldr	r0, [pc, #32]	; (1c0b4 <handle_at_tcp_recv+0x98>)
   1c092:	f7fe f8a9 	bl	1a1e8 <rsp_send>
			rsp_send("\r\n", 2);
   1c096:	2102      	movs	r1, #2
   1c098:	4807      	ldr	r0, [pc, #28]	; (1c0b8 <handle_at_tcp_recv+0x9c>)
   1c09a:	f7fe f8a5 	bl	1a1e8 <rsp_send>
   1c09e:	e7cf      	b.n	1c040 <handle_at_tcp_recv+0x24>
	int err = -EINVAL;
   1c0a0:	f06f 0015 	mvn.w	r0, #21
   1c0a4:	e7e5      	b.n	1c072 <handle_at_tcp_recv+0x56>
   1c0a6:	bf00      	nop
   1c0a8:	20023430 	.word	0x20023430
   1c0ac:	200200c4 	.word	0x200200c4
   1c0b0:	00039b1d 	.word	0x00039b1d
   1c0b4:	20028950 	.word	0x20028950
   1c0b8:	0003c24e 	.word	0x0003c24e

0001c0bc <slm_at_tcp_proxy_parse>:

/**@brief API to handle TCP proxy AT commands
 */
int slm_at_tcp_proxy_parse(const char *at_cmd, uint16_t length)
{
   1c0bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c0c0:	4e41      	ldr	r6, [pc, #260]	; (1c1c8 <slm_at_tcp_proxy_parse+0x10c>)
   1c0c2:	4605      	mov	r5, r0
   1c0c4:	460f      	mov	r7, r1
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   1c0c6:	2400      	movs	r4, #0
   1c0c8:	46b0      	mov	r8, r6
		if (slm_util_cmd_casecmp(at_cmd,
   1c0ca:	4628      	mov	r0, r5
   1c0cc:	6871      	ldr	r1, [r6, #4]
   1c0ce:	f7fd ff25 	bl	19f1c <slm_util_cmd_casecmp>
   1c0d2:	2800      	cmp	r0, #0
   1c0d4:	d035      	beq.n	1c142 <slm_at_tcp_proxy_parse+0x86>
			tcp_proxy_at_list[i].string)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
   1c0d6:	2100      	movs	r1, #0
   1c0d8:	4628      	mov	r0, r5
   1c0da:	4a3c      	ldr	r2, [pc, #240]	; (1c1cc <slm_at_tcp_proxy_parse+0x110>)
   1c0dc:	f01a fa9b 	bl	36616 <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
   1c0e0:	4601      	mov	r1, r0
   1c0e2:	b170      	cbz	r0, 1c102 <slm_at_tcp_proxy_parse+0x46>
   1c0e4:	4a3a      	ldr	r2, [pc, #232]	; (1c1d0 <slm_at_tcp_proxy_parse+0x114>)
   1c0e6:	4b3b      	ldr	r3, [pc, #236]	; (1c1d4 <slm_at_tcp_proxy_parse+0x118>)
				LOG_ERR("Failed to parse AT command %d", ret);
   1c0e8:	483b      	ldr	r0, [pc, #236]	; (1c1d8 <slm_at_tcp_proxy_parse+0x11c>)
   1c0ea:	1ad2      	subs	r2, r2, r3
   1c0ec:	08d2      	lsrs	r2, r2, #3
   1c0ee:	0192      	lsls	r2, r2, #6
   1c0f0:	f042 0201 	orr.w	r2, r2, #1
   1c0f4:	f018 fa17 	bl	34526 <log_1>
		return -EINVAL;
   1c0f8:	f06f 0015 	mvn.w	r0, #21
	if (ret == -ENOENT && proxy.datamode) {
		ret = do_tcp_send_datamode(at_cmd, length);
	}

	return ret;
}
   1c0fc:	b003      	add	sp, #12
   1c0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			type = at_parser_cmd_type_get(at_cmd);
   1c102:	4628      	mov	r0, r5
   1c104:	f01a fa8a 	bl	3661c <at_parser_cmd_type_get>
			ret = tcp_proxy_at_list[i].handler(type);
   1c108:	230c      	movs	r3, #12
   1c10a:	fb03 8404 	mla	r4, r3, r4, r8
   1c10e:	68a3      	ldr	r3, [r4, #8]
   1c110:	4798      	blx	r3
	if (ret == -ENOENT && proxy.datamode) {
   1c112:	1c83      	adds	r3, r0, #2
   1c114:	d1f2      	bne.n	1c0fc <slm_at_tcp_proxy_parse+0x40>
   1c116:	4e31      	ldr	r6, [pc, #196]	; (1c1dc <slm_at_tcp_proxy_parse+0x120>)
   1c118:	7c33      	ldrb	r3, [r6, #16]
   1c11a:	2b00      	cmp	r3, #0
   1c11c:	d051      	beq.n	1c1c2 <slm_at_tcp_proxy_parse+0x106>
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   1c11e:	68f3      	ldr	r3, [r6, #12]
   1c120:	b9ab      	cbnz	r3, 1c14e <slm_at_tcp_proxy_parse+0x92>
	    proxy.sock != INVALID_SOCKET) {
   1c122:	f8d6 8000 	ldr.w	r8, [r6]
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   1c126:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1c12a:	d11a      	bne.n	1c162 <slm_at_tcp_proxy_parse+0xa6>
   1c12c:	4b29      	ldr	r3, [pc, #164]	; (1c1d4 <slm_at_tcp_proxy_parse+0x118>)
   1c12e:	4928      	ldr	r1, [pc, #160]	; (1c1d0 <slm_at_tcp_proxy_parse+0x114>)
		LOG_ERR("Not connected yet");
   1c130:	482b      	ldr	r0, [pc, #172]	; (1c1e0 <slm_at_tcp_proxy_parse+0x124>)
   1c132:	1ac9      	subs	r1, r1, r3
   1c134:	08c9      	lsrs	r1, r1, #3
   1c136:	0189      	lsls	r1, r1, #6
   1c138:	f041 0101 	orr.w	r1, r1, #1
   1c13c:	f018 f9e4 	bl	34508 <log_0>
   1c140:	e7da      	b.n	1c0f8 <slm_at_tcp_proxy_parse+0x3c>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   1c142:	3401      	adds	r4, #1
   1c144:	2c04      	cmp	r4, #4
   1c146:	f106 060c 	add.w	r6, r6, #12
   1c14a:	d1be      	bne.n	1c0ca <slm_at_tcp_proxy_parse+0xe>
   1c14c:	e7e3      	b.n	1c116 <slm_at_tcp_proxy_parse+0x5a>
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   1c14e:	2b01      	cmp	r3, #1
   1c150:	d1ec      	bne.n	1c12c <slm_at_tcp_proxy_parse+0x70>
		   proxy.sock_peer != INVALID_SOCKET) {
   1c152:	f8d6 8008 	ldr.w	r8, [r6, #8]
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   1c156:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1c15a:	d0e7      	beq.n	1c12c <slm_at_tcp_proxy_parse+0x70>
	z_impl_k_timer_stop(timer);
   1c15c:	4821      	ldr	r0, [pc, #132]	; (1c1e4 <slm_at_tcp_proxy_parse+0x128>)
   1c15e:	f01a ff87 	bl	37070 <z_impl_k_timer_stop>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   1c162:	2400      	movs	r4, #0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1c164:	46a1      	mov	r9, r4
   1c166:	e000      	b.n	1c16a <slm_at_tcp_proxy_parse+0xae>
		offset += ret;
   1c168:	4404      	add	r4, r0
	while (offset < datalen) {
   1c16a:	42bc      	cmp	r4, r7
   1c16c:	d21a      	bcs.n	1c1a4 <slm_at_tcp_proxy_parse+0xe8>
   1c16e:	2300      	movs	r3, #0
   1c170:	4640      	mov	r0, r8
   1c172:	e9cd 9900 	strd	r9, r9, [sp]
   1c176:	1b3a      	subs	r2, r7, r4
   1c178:	1929      	adds	r1, r5, r4
   1c17a:	f018 fe35 	bl	34de8 <z_impl_zsock_sendto>
		if (ret < 0) {
   1c17e:	2800      	cmp	r0, #0
   1c180:	daf2      	bge.n	1c168 <slm_at_tcp_proxy_parse+0xac>
   1c182:	4a14      	ldr	r2, [pc, #80]	; (1c1d4 <slm_at_tcp_proxy_parse+0x118>)
   1c184:	4d12      	ldr	r5, [pc, #72]	; (1c1d0 <slm_at_tcp_proxy_parse+0x114>)
   1c186:	1aad      	subs	r5, r5, r2
			LOG_ERR("send() failed: %d", -errno);
   1c188:	f019 f8c5 	bl	35316 <__errno>
   1c18c:	08ed      	lsrs	r5, r5, #3
   1c18e:	6801      	ldr	r1, [r0, #0]
   1c190:	01ad      	lsls	r5, r5, #6
   1c192:	f045 0501 	orr.w	r5, r5, #1
   1c196:	462a      	mov	r2, r5
   1c198:	4813      	ldr	r0, [pc, #76]	; (1c1e8 <slm_at_tcp_proxy_parse+0x12c>)
   1c19a:	4249      	negs	r1, r1
   1c19c:	f018 f9c3 	bl	34526 <log_1>
			ret = -errno;
   1c1a0:	f019 f8b9 	bl	35316 <__errno>
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   1c1a4:	68f3      	ldr	r3, [r6, #12]
   1c1a6:	2b01      	cmp	r3, #1
   1c1a8:	d109      	bne.n	1c1be <slm_at_tcp_proxy_parse+0x102>
	z_impl_k_timer_start(timer, duration, period);
   1c1aa:	2200      	movs	r2, #0
   1c1ac:	2300      	movs	r3, #0
   1c1ae:	480d      	ldr	r0, [pc, #52]	; (1c1e4 <slm_at_tcp_proxy_parse+0x128>)
   1c1b0:	e9cd 2300 	strd	r2, r3, [sp]
   1c1b4:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1c1b8:	2300      	movs	r3, #0
   1c1ba:	f016 fbfd 	bl	329b8 <z_impl_k_timer_start>
	return offset;
   1c1be:	4620      	mov	r0, r4
   1c1c0:	e79c      	b.n	1c0fc <slm_at_tcp_proxy_parse+0x40>
   1c1c2:	f06f 0001 	mvn.w	r0, #1
   1c1c6:	e799      	b.n	1c0fc <slm_at_tcp_proxy_parse+0x40>
   1c1c8:	0003860c 	.word	0x0003860c
   1c1cc:	20023430 	.word	0x20023430
   1c1d0:	000383f4 	.word	0x000383f4
   1c1d4:	0003831c 	.word	0x0003831c
   1c1d8:	000393de 	.word	0x000393de
   1c1dc:	20023490 	.word	0x20023490
   1c1e0:	000397c8 	.word	0x000397c8
   1c1e4:	20020750 	.word	0x20020750
   1c1e8:	000397da 	.word	0x000397da

0001c1ec <slm_at_tcp_proxy_clac>:

/**@brief API to list TCP proxy AT commands
 */
void slm_at_tcp_proxy_clac(void)
{
   1c1ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   1c1ee:	2400      	movs	r4, #0
   1c1f0:	4d0c      	ldr	r5, [pc, #48]	; (1c224 <slm_at_tcp_proxy_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", tcp_proxy_at_list[i].string);
   1c1f2:	4f0d      	ldr	r7, [pc, #52]	; (1c228 <slm_at_tcp_proxy_clac+0x3c>)
   1c1f4:	4e0d      	ldr	r6, [pc, #52]	; (1c22c <slm_at_tcp_proxy_clac+0x40>)
   1c1f6:	686b      	ldr	r3, [r5, #4]
   1c1f8:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c1fc:	2100      	movs	r1, #0
   1c1fe:	9300      	str	r3, [sp, #0]
   1c200:	4630      	mov	r0, r6
   1c202:	463b      	mov	r3, r7
   1c204:	f01b fa35 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1c208:	4630      	mov	r0, r6
   1c20a:	f7fc ff31 	bl	19070 <strlen>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   1c20e:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
   1c210:	4601      	mov	r1, r0
   1c212:	4630      	mov	r0, r6
   1c214:	f7fd ffe8 	bl	1a1e8 <rsp_send>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   1c218:	2c04      	cmp	r4, #4
   1c21a:	f105 050c 	add.w	r5, r5, #12
   1c21e:	d1ea      	bne.n	1c1f6 <slm_at_tcp_proxy_clac+0xa>
	}
}
   1c220:	b003      	add	sp, #12
   1c222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c224:	0003860c 	.word	0x0003860c
   1c228:	000395d7 	.word	0x000395d7
   1c22c:	20028950 	.word	0x20028950

0001c230 <slm_at_tcp_proxy_init>:

/**@brief API to initialize TCP proxy AT commands handler
 */
int slm_at_tcp_proxy_init(void)
{
	proxy.sock = INVALID_SOCKET;
   1c230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	proxy.sock_peer = INVALID_SOCKET;
	proxy.role = INVALID_ROLE;
	proxy.datamode = false;
   1c234:	2000      	movs	r0, #0
	proxy.sock = INVALID_SOCKET;
   1c236:	4b03      	ldr	r3, [pc, #12]	; (1c244 <slm_at_tcp_proxy_init+0x14>)
	proxy.role = INVALID_ROLE;
   1c238:	e9c3 2202 	strd	r2, r2, [r3, #8]
	proxy.sock = INVALID_SOCKET;
   1c23c:	601a      	str	r2, [r3, #0]
	proxy.datamode = false;
   1c23e:	7418      	strb	r0, [r3, #16]

	return 0;
}
   1c240:	4770      	bx	lr
   1c242:	bf00      	nop
   1c244:	20023490 	.word	0x20023490

0001c248 <do_tcp_client_disconnect>:
{
   1c248:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (proxy.sock > 0) {
   1c24a:	4c1e      	ldr	r4, [pc, #120]	; (1c2c4 <do_tcp_client_disconnect+0x7c>)
{
   1c24c:	4605      	mov	r5, r0
	if (proxy.sock > 0) {
   1c24e:	6823      	ldr	r3, [r4, #0]
   1c250:	2b00      	cmp	r3, #0
   1c252:	dd35      	ble.n	1c2c0 <do_tcp_client_disconnect+0x78>
		k_thread_abort(tcp_thread_id);
   1c254:	4b1c      	ldr	r3, [pc, #112]	; (1c2c8 <do_tcp_client_disconnect+0x80>)
   1c256:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   1c258:	f006 f8fc 	bl	22454 <z_impl_k_thread_abort>
		ret = close(proxy.sock);
   1c25c:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   1c25e:	f018 fd56 	bl	34d0e <z_impl_zsock_close>
		if (ret < 0) {
   1c262:	1e04      	subs	r4, r0, #0
   1c264:	da12      	bge.n	1c28c <do_tcp_client_disconnect+0x44>
   1c266:	4a19      	ldr	r2, [pc, #100]	; (1c2cc <do_tcp_client_disconnect+0x84>)
   1c268:	4c19      	ldr	r4, [pc, #100]	; (1c2d0 <do_tcp_client_disconnect+0x88>)
   1c26a:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   1c26c:	f019 f853 	bl	35316 <__errno>
   1c270:	08e4      	lsrs	r4, r4, #3
   1c272:	6801      	ldr	r1, [r0, #0]
   1c274:	01a4      	lsls	r4, r4, #6
   1c276:	f044 0402 	orr.w	r4, r4, #2
   1c27a:	4622      	mov	r2, r4
   1c27c:	4815      	ldr	r0, [pc, #84]	; (1c2d4 <do_tcp_client_disconnect+0x8c>)
   1c27e:	4249      	negs	r1, r1
   1c280:	f018 f951 	bl	34526 <log_1>
			ret = -errno;
   1c284:	f019 f847 	bl	35316 <__errno>
   1c288:	6804      	ldr	r4, [r0, #0]
   1c28a:	4264      	negs	r4, r4
		(void)slm_at_tcp_proxy_init();
   1c28c:	f7ff ffd0 	bl	1c230 <slm_at_tcp_proxy_init>
		if (error) {
   1c290:	b18d      	cbz	r5, 1c2b6 <do_tcp_client_disconnect+0x6e>
			sprintf(rsp_buf, "#XTCPCLI: %d disconnected\r\n",
   1c292:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c296:	2100      	movs	r1, #0
   1c298:	4b0f      	ldr	r3, [pc, #60]	; (1c2d8 <do_tcp_client_disconnect+0x90>)
   1c29a:	4810      	ldr	r0, [pc, #64]	; (1c2dc <do_tcp_client_disconnect+0x94>)
   1c29c:	9500      	str	r5, [sp, #0]
   1c29e:	f01b f9e8 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1c2a2:	480e      	ldr	r0, [pc, #56]	; (1c2dc <do_tcp_client_disconnect+0x94>)
   1c2a4:	f7fc fee4 	bl	19070 <strlen>
   1c2a8:	4601      	mov	r1, r0
   1c2aa:	480c      	ldr	r0, [pc, #48]	; (1c2dc <do_tcp_client_disconnect+0x94>)
   1c2ac:	f7fd ff9c 	bl	1a1e8 <rsp_send>
}
   1c2b0:	4620      	mov	r0, r4
   1c2b2:	b003      	add	sp, #12
   1c2b4:	bd30      	pop	{r4, r5, pc}
			sprintf(rsp_buf, "#XTCPCLI: disconnected\r\n");
   1c2b6:	490a      	ldr	r1, [pc, #40]	; (1c2e0 <do_tcp_client_disconnect+0x98>)
   1c2b8:	4808      	ldr	r0, [pc, #32]	; (1c2dc <do_tcp_client_disconnect+0x94>)
   1c2ba:	f01b fa01 	bl	376c0 <strcpy>
   1c2be:	e7f0      	b.n	1c2a2 <do_tcp_client_disconnect+0x5a>
	int ret = 0;
   1c2c0:	2400      	movs	r4, #0
	return ret;
   1c2c2:	e7f5      	b.n	1c2b0 <do_tcp_client_disconnect+0x68>
   1c2c4:	20023490 	.word	0x20023490
   1c2c8:	200234ac 	.word	0x200234ac
   1c2cc:	0003831c 	.word	0x0003831c
   1c2d0:	000383f4 	.word	0x000383f4
   1c2d4:	000396c1 	.word	0x000396c1
   1c2d8:	00039b2d 	.word	0x00039b2d
   1c2dc:	20028950 	.word	0x20028950
   1c2e0:	00039b49 	.word	0x00039b49

0001c2e4 <handle_at_tcp_client>:
{
   1c2e4:	b570      	push	{r4, r5, r6, lr}
   1c2e6:	4604      	mov	r4, r0
   1c2e8:	b0c2      	sub	sp, #264	; 0x108
	int param_count = at_params_valid_count_get(&at_param_list);
   1c2ea:	48ab      	ldr	r0, [pc, #684]	; (1c598 <handle_at_tcp_client+0x2b4>)
   1c2ec:	f01a fadb 	bl	368a6 <at_params_valid_count_get>
	switch (cmd_type) {
   1c2f0:	2c02      	cmp	r4, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   1c2f2:	4606      	mov	r6, r0
	switch (cmd_type) {
   1c2f4:	f000 8174 	beq.w	1c5e0 <handle_at_tcp_client+0x2fc>
   1c2f8:	2c03      	cmp	r4, #3
   1c2fa:	f000 8194 	beq.w	1c626 <handle_at_tcp_client+0x342>
   1c2fe:	2c01      	cmp	r4, #1
   1c300:	f040 80cf 	bne.w	1c4a2 <handle_at_tcp_client+0x1be>
		if (param_count < 2) {
   1c304:	2801      	cmp	r0, #1
   1c306:	f340 80cc 	ble.w	1c4a2 <handle_at_tcp_client+0x1be>
		err = at_params_short_get(&at_param_list, 1, &op);
   1c30a:	4621      	mov	r1, r4
   1c30c:	48a2      	ldr	r0, [pc, #648]	; (1c598 <handle_at_tcp_client+0x2b4>)
   1c30e:	aa0b      	add	r2, sp, #44	; 0x2c
   1c310:	f01a fa81 	bl	36816 <at_params_short_get>
		if (err) {
   1c314:	4604      	mov	r4, r0
   1c316:	2800      	cmp	r0, #0
   1c318:	d16a      	bne.n	1c3f0 <handle_at_tcp_client+0x10c>
		if (op == AT_CLIENT_CONNECT ||
   1c31a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1c31e:	1e5a      	subs	r2, r3, #1
   1c320:	2a01      	cmp	r2, #1
   1c322:	f200 8123 	bhi.w	1c56c <handle_at_tcp_client+0x288>
			int size = TCPIP_MAX_URL;
   1c326:	2380      	movs	r3, #128	; 0x80
   1c328:	930c      	str	r3, [sp, #48]	; 0x30
			proxy.sec_tag = INVALID_SEC_TAG;
   1c32a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c32e:	4d9b      	ldr	r5, [pc, #620]	; (1c59c <handle_at_tcp_client+0x2b8>)
			if (param_count < 4) {
   1c330:	2e03      	cmp	r6, #3
			proxy.sec_tag = INVALID_SEC_TAG;
   1c332:	606b      	str	r3, [r5, #4]
			if (param_count < 4) {
   1c334:	f340 80b5 	ble.w	1c4a2 <handle_at_tcp_client+0x1be>
			err = at_params_string_get(&at_param_list,
   1c338:	2102      	movs	r1, #2
   1c33a:	4897      	ldr	r0, [pc, #604]	; (1c598 <handle_at_tcp_client+0x2b4>)
   1c33c:	ab0c      	add	r3, sp, #48	; 0x30
   1c33e:	aa22      	add	r2, sp, #136	; 0x88
   1c340:	f01a fa8e 	bl	36860 <at_params_string_get>
			if (err) {
   1c344:	4604      	mov	r4, r0
   1c346:	2800      	cmp	r0, #0
   1c348:	d152      	bne.n	1c3f0 <handle_at_tcp_client+0x10c>
			url[size] = '\0';
   1c34a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c34c:	aa42      	add	r2, sp, #264	; 0x108
   1c34e:	4413      	add	r3, r2
   1c350:	f803 0c80 	strb.w	r0, [r3, #-128]
			err = at_params_short_get(&at_param_list, 3, &port);
   1c354:	2103      	movs	r1, #3
   1c356:	4890      	ldr	r0, [pc, #576]	; (1c598 <handle_at_tcp_client+0x2b4>)
   1c358:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
   1c35c:	f01a fa5b 	bl	36816 <at_params_short_get>
			if (err) {
   1c360:	4604      	mov	r4, r0
   1c362:	2800      	cmp	r0, #0
   1c364:	d144      	bne.n	1c3f0 <handle_at_tcp_client+0x10c>
			if (param_count > 4) {
   1c366:	2e04      	cmp	r6, #4
   1c368:	d004      	beq.n	1c374 <handle_at_tcp_client+0x90>
				at_params_int_get(&at_param_list,
   1c36a:	2104      	movs	r1, #4
   1c36c:	488a      	ldr	r0, [pc, #552]	; (1c598 <handle_at_tcp_client+0x2b4>)
   1c36e:	1d2a      	adds	r2, r5, #4
   1c370:	f01a fa63 	bl	3683a <at_params_int_get>
			err = do_tcp_client_connect(url, port, proxy.sec_tag);
   1c374:	686e      	ldr	r6, [r5, #4]
   1c376:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
	if (sec_tag == INVALID_SEC_TAG) {
   1c37a:	1c72      	adds	r2, r6, #1
	return z_impl_zsock_socket(family, type, proto);
   1c37c:	f04f 0101 	mov.w	r1, #1
   1c380:	bf0c      	ite	eq
   1c382:	2206      	moveq	r2, #6
   1c384:	f44f 7281 	movne.w	r2, #258	; 0x102
   1c388:	4608      	mov	r0, r1
   1c38a:	f004 fd15 	bl	20db8 <z_impl_zsock_socket>
		proxy.sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);
   1c38e:	6028      	str	r0, [r5, #0]
	if (proxy.sock < 0) {
   1c390:	6828      	ldr	r0, [r5, #0]
   1c392:	2800      	cmp	r0, #0
   1c394:	da2f      	bge.n	1c3f6 <handle_at_tcp_client+0x112>
   1c396:	4a82      	ldr	r2, [pc, #520]	; (1c5a0 <handle_at_tcp_client+0x2bc>)
   1c398:	4c82      	ldr	r4, [pc, #520]	; (1c5a4 <handle_at_tcp_client+0x2c0>)
   1c39a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
   1c39c:	f018 ffbb 	bl	35316 <__errno>
   1c3a0:	08e4      	lsrs	r4, r4, #3
   1c3a2:	6801      	ldr	r1, [r0, #0]
   1c3a4:	01a4      	lsls	r4, r4, #6
   1c3a6:	f044 0401 	orr.w	r4, r4, #1
   1c3aa:	4622      	mov	r2, r4
   1c3ac:	4249      	negs	r1, r1
   1c3ae:	487e      	ldr	r0, [pc, #504]	; (1c5a8 <handle_at_tcp_client+0x2c4>)
   1c3b0:	f018 f8b9 	bl	34526 <log_1>
		sprintf(rsp_buf, "#XTCPCLI: %d\r\n", -errno);
   1c3b4:	f018 ffaf 	bl	35316 <__errno>
   1c3b8:	6803      	ldr	r3, [r0, #0]
   1c3ba:	2100      	movs	r1, #0
   1c3bc:	425b      	negs	r3, r3
   1c3be:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c3c2:	9300      	str	r3, [sp, #0]
   1c3c4:	4879      	ldr	r0, [pc, #484]	; (1c5ac <handle_at_tcp_client+0x2c8>)
   1c3c6:	4b7a      	ldr	r3, [pc, #488]	; (1c5b0 <handle_at_tcp_client+0x2cc>)
   1c3c8:	f01b f953 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1c3cc:	4877      	ldr	r0, [pc, #476]	; (1c5ac <handle_at_tcp_client+0x2c8>)
   1c3ce:	f7fc fe4f 	bl	19070 <strlen>
   1c3d2:	4601      	mov	r1, r0
   1c3d4:	4875      	ldr	r0, [pc, #468]	; (1c5ac <handle_at_tcp_client+0x2c8>)
   1c3d6:	f7fd ff07 	bl	1a1e8 <rsp_send>
		return -errno;
   1c3da:	f018 ff9c 	bl	35316 <__errno>
   1c3de:	6804      	ldr	r4, [r0, #0]
   1c3e0:	4264      	negs	r4, r4
			if (err == 0 &&
   1c3e2:	b92c      	cbnz	r4, 1c3f0 <handle_at_tcp_client+0x10c>
   1c3e4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1c3e8:	2b02      	cmp	r3, #2
   1c3ea:	d101      	bne.n	1c3f0 <handle_at_tcp_client+0x10c>
				proxy.datamode = true;
   1c3ec:	2301      	movs	r3, #1
   1c3ee:	742b      	strb	r3, [r5, #16]
}
   1c3f0:	4620      	mov	r0, r4
   1c3f2:	b042      	add	sp, #264	; 0x108
   1c3f4:	bd70      	pop	{r4, r5, r6, pc}
	if (sec_tag != INVALID_SEC_TAG) {
   1c3f6:	1c73      	adds	r3, r6, #1
   1c3f8:	d02f      	beq.n	1c45a <handle_at_tcp_client+0x176>
		sec_tag_t sec_tag_list[1] = { sec_tag };
   1c3fa:	960e      	str	r6, [sp, #56]	; 0x38
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1c3fc:	2304      	movs	r3, #4
   1c3fe:	2201      	movs	r2, #1
   1c400:	9300      	str	r3, [sp, #0]
   1c402:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1c406:	ab0e      	add	r3, sp, #56	; 0x38
   1c408:	f018 fd4a 	bl	34ea0 <z_impl_zsock_setsockopt>
		if (ret) {
   1c40c:	b328      	cbz	r0, 1c45a <handle_at_tcp_client+0x176>
   1c40e:	4a64      	ldr	r2, [pc, #400]	; (1c5a0 <handle_at_tcp_client+0x2bc>)
   1c410:	4c64      	ldr	r4, [pc, #400]	; (1c5a4 <handle_at_tcp_client+0x2c0>)
   1c412:	1aa4      	subs	r4, r4, r2
   1c414:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set tag list failed: %d", -errno);
   1c416:	f018 ff7e 	bl	35316 <__errno>
   1c41a:	01a4      	lsls	r4, r4, #6
   1c41c:	f044 0401 	orr.w	r4, r4, #1
   1c420:	4622      	mov	r2, r4
   1c422:	6801      	ldr	r1, [r0, #0]
   1c424:	4863      	ldr	r0, [pc, #396]	; (1c5b4 <handle_at_tcp_client+0x2d0>)
   1c426:	4249      	negs	r1, r1
		LOG_ERR("connect() failed: %d", -errno);
   1c428:	f018 f87d 	bl	34526 <log_1>
		sprintf(rsp_buf, "#XTCPCLI: %d\r\n", -errno);
   1c42c:	f018 ff73 	bl	35316 <__errno>
   1c430:	6803      	ldr	r3, [r0, #0]
   1c432:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c436:	425b      	negs	r3, r3
   1c438:	2100      	movs	r1, #0
   1c43a:	9300      	str	r3, [sp, #0]
   1c43c:	485b      	ldr	r0, [pc, #364]	; (1c5ac <handle_at_tcp_client+0x2c8>)
   1c43e:	4b5c      	ldr	r3, [pc, #368]	; (1c5b0 <handle_at_tcp_client+0x2cc>)
   1c440:	f01b f917 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1c444:	4859      	ldr	r0, [pc, #356]	; (1c5ac <handle_at_tcp_client+0x2c8>)
   1c446:	f7fc fe13 	bl	19070 <strlen>
   1c44a:	4601      	mov	r1, r0
   1c44c:	4857      	ldr	r0, [pc, #348]	; (1c5ac <handle_at_tcp_client+0x2c8>)
   1c44e:	f7fd fecb 	bl	1a1e8 <rsp_send>
		close(proxy.sock);
   1c452:	6828      	ldr	r0, [r5, #0]
   1c454:	f017 fb6e 	bl	33b34 <close>
   1c458:	e7bf      	b.n	1c3da <handle_at_tcp_client+0xf6>
	if (check_for_ipv4(url, strlen(url))) {
   1c45a:	a822      	add	r0, sp, #136	; 0x88
   1c45c:	f7fc fe08 	bl	19070 <strlen>
   1c460:	b2c1      	uxtb	r1, r0
   1c462:	a822      	add	r0, sp, #136	; 0x88
   1c464:	f017 fb32 	bl	33acc <check_for_ipv4>
   1c468:	4601      	mov	r1, r0
   1c46a:	b1e8      	cbz	r0, 1c4a8 <handle_at_tcp_client+0x1c4>
		remote.sin_family = AF_INET;
   1c46c:	2001      	movs	r0, #1
   1c46e:	4a52      	ldr	r2, [pc, #328]	; (1c5b8 <handle_at_tcp_client+0x2d4>)
		remote.sin_port = htons(port);
   1c470:	0223      	lsls	r3, r4, #8
   1c472:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
		remote.sin_family = AF_INET;
   1c476:	8010      	strh	r0, [r2, #0]
		remote.sin_port = htons(port);
   1c478:	8054      	strh	r4, [r2, #2]
	return z_impl_zsock_inet_pton(family, src, dst);
   1c47a:	a922      	add	r1, sp, #136	; 0x88
   1c47c:	3204      	adds	r2, #4
   1c47e:	f018 fced 	bl	34e5c <z_impl_zsock_inet_pton>
		if (ret != 1) {
   1c482:	2801      	cmp	r0, #1
   1c484:	4601      	mov	r1, r0
   1c486:	d035      	beq.n	1c4f4 <handle_at_tcp_client+0x210>
   1c488:	4a46      	ldr	r2, [pc, #280]	; (1c5a4 <handle_at_tcp_client+0x2c0>)
   1c48a:	4b45      	ldr	r3, [pc, #276]	; (1c5a0 <handle_at_tcp_client+0x2bc>)
			LOG_ERR("inet_pton() failed: %d", ret);
   1c48c:	484b      	ldr	r0, [pc, #300]	; (1c5bc <handle_at_tcp_client+0x2d8>)
   1c48e:	1ad2      	subs	r2, r2, r3
   1c490:	08d2      	lsrs	r2, r2, #3
   1c492:	0192      	lsls	r2, r2, #6
   1c494:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("getaddrinfo() failed: %d", ret);
   1c498:	f018 f845 	bl	34526 <log_1>
			close(proxy.sock);
   1c49c:	6828      	ldr	r0, [r5, #0]
   1c49e:	f017 fb49 	bl	33b34 <close>
			return -EINVAL;
   1c4a2:	f06f 0415 	mvn.w	r4, #21
   1c4a6:	e7a3      	b.n	1c3f0 <handle_at_tcp_client+0x10c>
		struct addrinfo hints = {
   1c4a8:	2601      	movs	r6, #1
   1c4aa:	2250      	movs	r2, #80	; 0x50
   1c4ac:	9009      	str	r0, [sp, #36]	; 0x24
   1c4ae:	a80e      	add	r0, sp, #56	; 0x38
   1c4b0:	f01a ffc7 	bl	37442 <memset>
	return zsock_getaddrinfo(host, service, hints, res);
   1c4b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c4b6:	ab0d      	add	r3, sp, #52	; 0x34
   1c4b8:	aa0e      	add	r2, sp, #56	; 0x38
   1c4ba:	a822      	add	r0, sp, #136	; 0x88
   1c4bc:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
   1c4c0:	f018 fc12 	bl	34ce8 <zsock_getaddrinfo>
		if (ret || result == NULL) {
   1c4c4:	4601      	mov	r1, r0
   1c4c6:	b908      	cbnz	r0, 1c4cc <handle_at_tcp_client+0x1e8>
   1c4c8:	980d      	ldr	r0, [sp, #52]	; 0x34
   1c4ca:	b940      	cbnz	r0, 1c4de <handle_at_tcp_client+0x1fa>
   1c4cc:	4a35      	ldr	r2, [pc, #212]	; (1c5a4 <handle_at_tcp_client+0x2c0>)
   1c4ce:	4b34      	ldr	r3, [pc, #208]	; (1c5a0 <handle_at_tcp_client+0x2bc>)
			LOG_ERR("getaddrinfo() failed: %d", ret);
   1c4d0:	483b      	ldr	r0, [pc, #236]	; (1c5c0 <handle_at_tcp_client+0x2dc>)
   1c4d2:	1ad2      	subs	r2, r2, r3
   1c4d4:	08d2      	lsrs	r2, r2, #3
   1c4d6:	0192      	lsls	r2, r2, #6
   1c4d8:	f042 0201 	orr.w	r2, r2, #1
   1c4dc:	e7dc      	b.n	1c498 <handle_at_tcp_client+0x1b4>
		remote.sin_port = htons(port);
   1c4de:	0222      	lsls	r2, r4, #8
   1c4e0:	ea42 2414 	orr.w	r4, r2, r4, lsr #8
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   1c4e4:	6982      	ldr	r2, [r0, #24]
		remote.sin_family = AF_INET;
   1c4e6:	4b34      	ldr	r3, [pc, #208]	; (1c5b8 <handle_at_tcp_client+0x2d4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   1c4e8:	6852      	ldr	r2, [r2, #4]
		remote.sin_family = AF_INET;
   1c4ea:	801e      	strh	r6, [r3, #0]
		remote.sin_port = htons(port);
   1c4ec:	805c      	strh	r4, [r3, #2]
		remote.sin_addr.s_addr =
   1c4ee:	605a      	str	r2, [r3, #4]
	zsock_freeaddrinfo(ai);
   1c4f0:	f018 fbfc 	bl	34cec <zsock_freeaddrinfo>
	ret = connect(proxy.sock, (struct sockaddr *)&remote,
   1c4f4:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   1c4f6:	2208      	movs	r2, #8
   1c4f8:	492f      	ldr	r1, [pc, #188]	; (1c5b8 <handle_at_tcp_client+0x2d4>)
   1c4fa:	f018 fc35 	bl	34d68 <z_impl_zsock_connect>
	if (ret < 0) {
   1c4fe:	1e04      	subs	r4, r0, #0
   1c500:	da0d      	bge.n	1c51e <handle_at_tcp_client+0x23a>
   1c502:	4a27      	ldr	r2, [pc, #156]	; (1c5a0 <handle_at_tcp_client+0x2bc>)
   1c504:	4c27      	ldr	r4, [pc, #156]	; (1c5a4 <handle_at_tcp_client+0x2c0>)
   1c506:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect() failed: %d", -errno);
   1c508:	f018 ff05 	bl	35316 <__errno>
   1c50c:	08e4      	lsrs	r4, r4, #3
   1c50e:	6801      	ldr	r1, [r0, #0]
   1c510:	01a4      	lsls	r4, r4, #6
   1c512:	f044 0401 	orr.w	r4, r4, #1
   1c516:	4622      	mov	r2, r4
   1c518:	482a      	ldr	r0, [pc, #168]	; (1c5c4 <handle_at_tcp_client+0x2e0>)
   1c51a:	4249      	negs	r1, r1
   1c51c:	e784      	b.n	1c428 <handle_at_tcp_client+0x144>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1c51e:	2200      	movs	r2, #0
   1c520:	2300      	movs	r3, #0
   1c522:	2600      	movs	r6, #0
   1c524:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c528:	2004      	movs	r0, #4
   1c52a:	230e      	movs	r3, #14
   1c52c:	f44f 6264 	mov.w	r2, #3648	; 0xe40
   1c530:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1c534:	e9cd 6601 	strd	r6, r6, [sp, #4]
   1c538:	4b23      	ldr	r3, [pc, #140]	; (1c5c8 <handle_at_tcp_client+0x2e4>)
   1c53a:	4924      	ldr	r1, [pc, #144]	; (1c5cc <handle_at_tcp_client+0x2e8>)
   1c53c:	9600      	str	r6, [sp, #0]
   1c53e:	4824      	ldr	r0, [pc, #144]	; (1c5d0 <handle_at_tcp_client+0x2ec>)
   1c540:	f015 ffb0 	bl	324a4 <z_impl_k_thread_create>
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   1c544:	4b23      	ldr	r3, [pc, #140]	; (1c5d4 <handle_at_tcp_client+0x2f0>)
	sprintf(rsp_buf, "#XTCPCLI: %d connected\r\n", proxy.sock);
   1c546:	4631      	mov	r1, r6
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   1c548:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XTCPCLI: %d connected\r\n", proxy.sock);
   1c54a:	682b      	ldr	r3, [r5, #0]
   1c54c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c550:	9300      	str	r3, [sp, #0]
   1c552:	4816      	ldr	r0, [pc, #88]	; (1c5ac <handle_at_tcp_client+0x2c8>)
   1c554:	4b20      	ldr	r3, [pc, #128]	; (1c5d8 <handle_at_tcp_client+0x2f4>)
	proxy.role = AT_TCP_ROLE_CLIENT;
   1c556:	60ee      	str	r6, [r5, #12]
	sprintf(rsp_buf, "#XTCPCLI: %d connected\r\n", proxy.sock);
   1c558:	f01b f88b 	bl	37672 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1c55c:	4813      	ldr	r0, [pc, #76]	; (1c5ac <handle_at_tcp_client+0x2c8>)
   1c55e:	f7fc fd87 	bl	19070 <strlen>
   1c562:	4601      	mov	r1, r0
   1c564:	4811      	ldr	r0, [pc, #68]	; (1c5ac <handle_at_tcp_client+0x2c8>)
   1c566:	f7fd fe3f 	bl	1a1e8 <rsp_send>
	return ret;
   1c56a:	e73a      	b.n	1c3e2 <handle_at_tcp_client+0xfe>
		} else if (op == AT_CLIENT_DISCONNECT) {
   1c56c:	2b00      	cmp	r3, #0
   1c56e:	f47f af3f 	bne.w	1c3f0 <handle_at_tcp_client+0x10c>
			if (proxy.sock < 0) {
   1c572:	4b0a      	ldr	r3, [pc, #40]	; (1c59c <handle_at_tcp_client+0x2b8>)
   1c574:	681b      	ldr	r3, [r3, #0]
   1c576:	2b00      	cmp	r3, #0
   1c578:	da0a      	bge.n	1c590 <handle_at_tcp_client+0x2ac>
   1c57a:	4b09      	ldr	r3, [pc, #36]	; (1c5a0 <handle_at_tcp_client+0x2bc>)
   1c57c:	4909      	ldr	r1, [pc, #36]	; (1c5a4 <handle_at_tcp_client+0x2c0>)
				LOG_WRN("Client is not connected");
   1c57e:	4817      	ldr	r0, [pc, #92]	; (1c5dc <handle_at_tcp_client+0x2f8>)
   1c580:	1ac9      	subs	r1, r1, r3
   1c582:	08c9      	lsrs	r1, r1, #3
   1c584:	0189      	lsls	r1, r1, #6
   1c586:	f041 0102 	orr.w	r1, r1, #2
   1c58a:	f017 ffbd 	bl	34508 <log_0>
				return -EINVAL;
   1c58e:	e788      	b.n	1c4a2 <handle_at_tcp_client+0x1be>
			err = do_tcp_client_disconnect(0);
   1c590:	f7ff fe5a 	bl	1c248 <do_tcp_client_disconnect>
   1c594:	4604      	mov	r4, r0
   1c596:	e72b      	b.n	1c3f0 <handle_at_tcp_client+0x10c>
   1c598:	20023430 	.word	0x20023430
   1c59c:	20023490 	.word	0x20023490
   1c5a0:	0003831c 	.word	0x0003831c
   1c5a4:	000383f4 	.word	0x000383f4
   1c5a8:	000399b0 	.word	0x000399b0
   1c5ac:	20028950 	.word	0x20028950
   1c5b0:	00039b62 	.word	0x00039b62
   1c5b4:	00039b71 	.word	0x00039b71
   1c5b8:	200234a4 	.word	0x200234a4
   1c5bc:	00039b89 	.word	0x00039b89
   1c5c0:	00039ba0 	.word	0x00039ba0
   1c5c4:	000398b1 	.word	0x000398b1
   1c5c8:	0001c8ed 	.word	0x0001c8ed
   1c5cc:	2002d518 	.word	0x2002d518
   1c5d0:	200212c8 	.word	0x200212c8
   1c5d4:	200234ac 	.word	0x200234ac
   1c5d8:	00039bb9 	.word	0x00039bb9
   1c5dc:	00039bd2 	.word	0x00039bd2
		if (proxy.sock != INVALID_SOCKET &&
   1c5e0:	4b1b      	ldr	r3, [pc, #108]	; (1c650 <handle_at_tcp_client+0x36c>)
   1c5e2:	681a      	ldr	r2, [r3, #0]
   1c5e4:	1c51      	adds	r1, r2, #1
   1c5e6:	d013      	beq.n	1c610 <handle_at_tcp_client+0x32c>
   1c5e8:	68d9      	ldr	r1, [r3, #12]
   1c5ea:	b989      	cbnz	r1, 1c610 <handle_at_tcp_client+0x32c>
			sprintf(rsp_buf, "#XTCPCLI: %d, %d\r\n",
   1c5ec:	7c1b      	ldrb	r3, [r3, #16]
   1c5ee:	4819      	ldr	r0, [pc, #100]	; (1c654 <handle_at_tcp_client+0x370>)
   1c5f0:	e9cd 2300 	strd	r2, r3, [sp]
   1c5f4:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c5f8:	4b17      	ldr	r3, [pc, #92]	; (1c658 <handle_at_tcp_client+0x374>)
   1c5fa:	f01b f83a 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1c5fe:	4815      	ldr	r0, [pc, #84]	; (1c654 <handle_at_tcp_client+0x370>)
   1c600:	f7fc fd36 	bl	19070 <strlen>
   1c604:	4601      	mov	r1, r0
   1c606:	4813      	ldr	r0, [pc, #76]	; (1c654 <handle_at_tcp_client+0x370>)
   1c608:	f7fd fdee 	bl	1a1e8 <rsp_send>
		err = 0;
   1c60c:	2400      	movs	r4, #0
		break;
   1c60e:	e6ef      	b.n	1c3f0 <handle_at_tcp_client+0x10c>
			sprintf(rsp_buf, "#XTCPCLI: %d\r\n", INVALID_SOCKET);
   1c610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c614:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c618:	9300      	str	r3, [sp, #0]
   1c61a:	2100      	movs	r1, #0
   1c61c:	4b0f      	ldr	r3, [pc, #60]	; (1c65c <handle_at_tcp_client+0x378>)
   1c61e:	480d      	ldr	r0, [pc, #52]	; (1c654 <handle_at_tcp_client+0x370>)
   1c620:	f01b f827 	bl	37672 <__sprintf_chk>
   1c624:	e7eb      	b.n	1c5fe <handle_at_tcp_client+0x31a>
		sprintf(rsp_buf,
   1c626:	2400      	movs	r4, #0
   1c628:	2301      	movs	r3, #1
   1c62a:	2202      	movs	r2, #2
   1c62c:	4621      	mov	r1, r4
   1c62e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1c632:	9400      	str	r4, [sp, #0]
   1c634:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c638:	4b09      	ldr	r3, [pc, #36]	; (1c660 <handle_at_tcp_client+0x37c>)
   1c63a:	4806      	ldr	r0, [pc, #24]	; (1c654 <handle_at_tcp_client+0x370>)
   1c63c:	f01b f819 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1c640:	4804      	ldr	r0, [pc, #16]	; (1c654 <handle_at_tcp_client+0x370>)
   1c642:	f7fc fd15 	bl	19070 <strlen>
   1c646:	4601      	mov	r1, r0
   1c648:	4802      	ldr	r0, [pc, #8]	; (1c654 <handle_at_tcp_client+0x370>)
   1c64a:	f7fd fdcd 	bl	1a1e8 <rsp_send>
		break;
   1c64e:	e6cf      	b.n	1c3f0 <handle_at_tcp_client+0x10c>
   1c650:	20023490 	.word	0x20023490
   1c654:	20028950 	.word	0x20028950
   1c658:	00039bea 	.word	0x00039bea
   1c65c:	00039b62 	.word	0x00039b62
   1c660:	00039bfd 	.word	0x00039bfd

0001c664 <do_tcp_server_stop>:
{
   1c664:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (proxy.sock > 0) {
   1c666:	4c22      	ldr	r4, [pc, #136]	; (1c6f0 <do_tcp_server_stop+0x8c>)
{
   1c668:	4605      	mov	r5, r0
	if (proxy.sock > 0) {
   1c66a:	6823      	ldr	r3, [r4, #0]
   1c66c:	2b00      	cmp	r3, #0
   1c66e:	dd3d      	ble.n	1c6ec <do_tcp_server_stop+0x88>
	z_impl_k_timer_stop(timer);
   1c670:	4820      	ldr	r0, [pc, #128]	; (1c6f4 <do_tcp_server_stop+0x90>)
   1c672:	f01a fcfd 	bl	37070 <z_impl_k_timer_stop>
		k_thread_abort(tcp_thread_id);
   1c676:	4b20      	ldr	r3, [pc, #128]	; (1c6f8 <do_tcp_server_stop+0x94>)
   1c678:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   1c67a:	f005 feeb 	bl	22454 <z_impl_k_thread_abort>
		if (proxy.sock_peer != INVALID_SOCKET) {
   1c67e:	68a0      	ldr	r0, [r4, #8]
   1c680:	1c43      	adds	r3, r0, #1
   1c682:	d001      	beq.n	1c688 <do_tcp_server_stop+0x24>
			close(proxy.sock_peer);
   1c684:	f017 fa56 	bl	33b34 <close>
		ret = close(proxy.sock);
   1c688:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   1c68a:	f018 fb40 	bl	34d0e <z_impl_zsock_close>
		if (ret < 0) {
   1c68e:	1e04      	subs	r4, r0, #0
   1c690:	da12      	bge.n	1c6b8 <do_tcp_server_stop+0x54>
   1c692:	4a1a      	ldr	r2, [pc, #104]	; (1c6fc <do_tcp_server_stop+0x98>)
   1c694:	4c1a      	ldr	r4, [pc, #104]	; (1c700 <do_tcp_server_stop+0x9c>)
   1c696:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   1c698:	f018 fe3d 	bl	35316 <__errno>
   1c69c:	08e4      	lsrs	r4, r4, #3
   1c69e:	6801      	ldr	r1, [r0, #0]
   1c6a0:	01a4      	lsls	r4, r4, #6
   1c6a2:	f044 0402 	orr.w	r4, r4, #2
   1c6a6:	4622      	mov	r2, r4
   1c6a8:	4816      	ldr	r0, [pc, #88]	; (1c704 <do_tcp_server_stop+0xa0>)
   1c6aa:	4249      	negs	r1, r1
   1c6ac:	f017 ff3b 	bl	34526 <log_1>
			ret = -errno;
   1c6b0:	f018 fe31 	bl	35316 <__errno>
   1c6b4:	6804      	ldr	r4, [r0, #0]
   1c6b6:	4264      	negs	r4, r4
		(void)slm_at_tcp_proxy_init();
   1c6b8:	f7ff fdba 	bl	1c230 <slm_at_tcp_proxy_init>
		if (error) {
   1c6bc:	b18d      	cbz	r5, 1c6e2 <do_tcp_server_stop+0x7e>
			sprintf(rsp_buf, "#XTCPSVR: %d stopped\r\n", error);
   1c6be:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c6c2:	2100      	movs	r1, #0
   1c6c4:	4b10      	ldr	r3, [pc, #64]	; (1c708 <do_tcp_server_stop+0xa4>)
   1c6c6:	4811      	ldr	r0, [pc, #68]	; (1c70c <do_tcp_server_stop+0xa8>)
   1c6c8:	9500      	str	r5, [sp, #0]
   1c6ca:	f01a ffd2 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1c6ce:	480f      	ldr	r0, [pc, #60]	; (1c70c <do_tcp_server_stop+0xa8>)
   1c6d0:	f7fc fcce 	bl	19070 <strlen>
   1c6d4:	4601      	mov	r1, r0
   1c6d6:	480d      	ldr	r0, [pc, #52]	; (1c70c <do_tcp_server_stop+0xa8>)
   1c6d8:	f7fd fd86 	bl	1a1e8 <rsp_send>
}
   1c6dc:	4620      	mov	r0, r4
   1c6de:	b003      	add	sp, #12
   1c6e0:	bd30      	pop	{r4, r5, pc}
			sprintf(rsp_buf, "#XTCPSVR: stopped\r\n");
   1c6e2:	490b      	ldr	r1, [pc, #44]	; (1c710 <do_tcp_server_stop+0xac>)
   1c6e4:	4809      	ldr	r0, [pc, #36]	; (1c70c <do_tcp_server_stop+0xa8>)
   1c6e6:	f01a ffeb 	bl	376c0 <strcpy>
   1c6ea:	e7f0      	b.n	1c6ce <do_tcp_server_stop+0x6a>
	int ret = 0;
   1c6ec:	2400      	movs	r4, #0
	return ret;
   1c6ee:	e7f5      	b.n	1c6dc <do_tcp_server_stop+0x78>
   1c6f0:	20023490 	.word	0x20023490
   1c6f4:	20020750 	.word	0x20020750
   1c6f8:	200234ac 	.word	0x200234ac
   1c6fc:	0003831c 	.word	0x0003831c
   1c700:	000383f4 	.word	0x000383f4
   1c704:	000396c1 	.word	0x000396c1
   1c708:	00039c2d 	.word	0x00039c2d
   1c70c:	20028950 	.word	0x20028950
   1c710:	00039c44 	.word	0x00039c44

0001c714 <do_tcp_send>:
{
   1c714:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   1c718:	4e48      	ldr	r6, [pc, #288]	; (1c83c <do_tcp_send+0x128>)
{
   1c71a:	4682      	mov	sl, r0
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   1c71c:	68f3      	ldr	r3, [r6, #12]
{
   1c71e:	4689      	mov	r9, r1
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   1c720:	b98b      	cbnz	r3, 1c746 <do_tcp_send+0x32>
	    proxy.sock != INVALID_SOCKET) {
   1c722:	6837      	ldr	r7, [r6, #0]
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   1c724:	1c7a      	adds	r2, r7, #1
   1c726:	d116      	bne.n	1c756 <do_tcp_send+0x42>
   1c728:	4b45      	ldr	r3, [pc, #276]	; (1c840 <do_tcp_send+0x12c>)
   1c72a:	4946      	ldr	r1, [pc, #280]	; (1c844 <do_tcp_send+0x130>)
		LOG_ERR("Not connected yet");
   1c72c:	4846      	ldr	r0, [pc, #280]	; (1c848 <do_tcp_send+0x134>)
   1c72e:	1ac9      	subs	r1, r1, r3
   1c730:	08c9      	lsrs	r1, r1, #3
   1c732:	0189      	lsls	r1, r1, #6
   1c734:	f041 0101 	orr.w	r1, r1, #1
   1c738:	f017 fee6 	bl	34508 <log_0>
		return -EINVAL;
   1c73c:	f06f 0015 	mvn.w	r0, #21
}
   1c740:	b002      	add	sp, #8
   1c742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   1c746:	2b01      	cmp	r3, #1
   1c748:	d1ee      	bne.n	1c728 <do_tcp_send+0x14>
		   proxy.sock_peer != INVALID_SOCKET) {
   1c74a:	68b7      	ldr	r7, [r6, #8]
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   1c74c:	1c7b      	adds	r3, r7, #1
   1c74e:	d0eb      	beq.n	1c728 <do_tcp_send+0x14>
	z_impl_k_timer_stop(timer);
   1c750:	483e      	ldr	r0, [pc, #248]	; (1c84c <do_tcp_send+0x138>)
   1c752:	f01a fc8d 	bl	37070 <z_impl_k_timer_stop>
{
   1c756:	2500      	movs	r5, #0
   1c758:	462c      	mov	r4, r5
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1c75a:	46a8      	mov	r8, r5
   1c75c:	e01b      	b.n	1c796 <do_tcp_send+0x82>
					do_tcp_server_stop(-errno);
   1c75e:	f018 fdda 	bl	35316 <__errno>
   1c762:	6800      	ldr	r0, [r0, #0]
   1c764:	4240      	negs	r0, r0
   1c766:	f7ff ff7d 	bl	1c664 <do_tcp_server_stop>
   1c76a:	e044      	b.n	1c7f6 <do_tcp_send+0xe2>
				sprintf(rsp_buf, "#XTCPSEND: %d\r\n", -errno);
   1c76c:	f018 fdd3 	bl	35316 <__errno>
   1c770:	6803      	ldr	r3, [r0, #0]
   1c772:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c776:	425b      	negs	r3, r3
   1c778:	2100      	movs	r1, #0
   1c77a:	9300      	str	r3, [sp, #0]
   1c77c:	4834      	ldr	r0, [pc, #208]	; (1c850 <do_tcp_send+0x13c>)
   1c77e:	4b35      	ldr	r3, [pc, #212]	; (1c854 <do_tcp_send+0x140>)
   1c780:	f01a ff77 	bl	37672 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1c784:	4832      	ldr	r0, [pc, #200]	; (1c850 <do_tcp_send+0x13c>)
   1c786:	f7fc fc73 	bl	19070 <strlen>
   1c78a:	4601      	mov	r1, r0
   1c78c:	4830      	ldr	r0, [pc, #192]	; (1c850 <do_tcp_send+0x13c>)
   1c78e:	f7fd fd2b 	bl	1a1e8 <rsp_send>
   1c792:	e030      	b.n	1c7f6 <do_tcp_send+0xe2>
		offset += ret;
   1c794:	4425      	add	r5, r4
	while (offset < datalen) {
   1c796:	454d      	cmp	r5, r9
   1c798:	d231      	bcs.n	1c7fe <do_tcp_send+0xea>
   1c79a:	2300      	movs	r3, #0
   1c79c:	4638      	mov	r0, r7
   1c79e:	e9cd 8800 	strd	r8, r8, [sp]
   1c7a2:	eba9 0205 	sub.w	r2, r9, r5
   1c7a6:	eb0a 0105 	add.w	r1, sl, r5
   1c7aa:	f018 fb1d 	bl	34de8 <z_impl_zsock_sendto>
		if (ret < 0) {
   1c7ae:	1e04      	subs	r4, r0, #0
   1c7b0:	daf0      	bge.n	1c794 <do_tcp_send+0x80>
   1c7b2:	4a23      	ldr	r2, [pc, #140]	; (1c840 <do_tcp_send+0x12c>)
   1c7b4:	4c23      	ldr	r4, [pc, #140]	; (1c844 <do_tcp_send+0x130>)
   1c7b6:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send() failed: %d", -errno);
   1c7b8:	f018 fdad 	bl	35316 <__errno>
   1c7bc:	08e4      	lsrs	r4, r4, #3
   1c7be:	6801      	ldr	r1, [r0, #0]
   1c7c0:	01a4      	lsls	r4, r4, #6
   1c7c2:	f044 0401 	orr.w	r4, r4, #1
   1c7c6:	4622      	mov	r2, r4
   1c7c8:	4823      	ldr	r0, [pc, #140]	; (1c858 <do_tcp_send+0x144>)
   1c7ca:	4249      	negs	r1, r1
   1c7cc:	f017 feab 	bl	34526 <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   1c7d0:	f018 fda1 	bl	35316 <__errno>
   1c7d4:	6803      	ldr	r3, [r0, #0]
   1c7d6:	2b0b      	cmp	r3, #11
   1c7d8:	d0c8      	beq.n	1c76c <do_tcp_send+0x58>
   1c7da:	f018 fd9c 	bl	35316 <__errno>
   1c7de:	6803      	ldr	r3, [r0, #0]
   1c7e0:	2b74      	cmp	r3, #116	; 0x74
   1c7e2:	d0c3      	beq.n	1c76c <do_tcp_send+0x58>
				if (proxy.role == AT_TCP_ROLE_CLIENT) {
   1c7e4:	68f3      	ldr	r3, [r6, #12]
   1c7e6:	2b00      	cmp	r3, #0
   1c7e8:	d1b9      	bne.n	1c75e <do_tcp_send+0x4a>
					do_tcp_client_disconnect(-errno);
   1c7ea:	f018 fd94 	bl	35316 <__errno>
   1c7ee:	6800      	ldr	r0, [r0, #0]
   1c7f0:	4240      	negs	r0, r0
   1c7f2:	f7ff fd29 	bl	1c248 <do_tcp_client_disconnect>
			ret = -errno;
   1c7f6:	f018 fd8e 	bl	35316 <__errno>
   1c7fa:	6804      	ldr	r4, [r0, #0]
   1c7fc:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XTCPSEND: %d\r\n", offset);
   1c7fe:	4b15      	ldr	r3, [pc, #84]	; (1c854 <do_tcp_send+0x140>)
   1c800:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c804:	2100      	movs	r1, #0
   1c806:	4812      	ldr	r0, [pc, #72]	; (1c850 <do_tcp_send+0x13c>)
   1c808:	9500      	str	r5, [sp, #0]
   1c80a:	f01a ff32 	bl	37672 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1c80e:	4810      	ldr	r0, [pc, #64]	; (1c850 <do_tcp_send+0x13c>)
   1c810:	f7fc fc2e 	bl	19070 <strlen>
   1c814:	4601      	mov	r1, r0
   1c816:	480e      	ldr	r0, [pc, #56]	; (1c850 <do_tcp_send+0x13c>)
   1c818:	f7fd fce6 	bl	1a1e8 <rsp_send>
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   1c81c:	68f3      	ldr	r3, [r6, #12]
   1c81e:	2b01      	cmp	r3, #1
   1c820:	d109      	bne.n	1c836 <do_tcp_send+0x122>
	z_impl_k_timer_start(timer, duration, period);
   1c822:	2200      	movs	r2, #0
   1c824:	2300      	movs	r3, #0
   1c826:	4809      	ldr	r0, [pc, #36]	; (1c84c <do_tcp_send+0x138>)
   1c828:	e9cd 2300 	strd	r2, r3, [sp]
   1c82c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1c830:	2300      	movs	r3, #0
   1c832:	f016 f8c1 	bl	329b8 <z_impl_k_timer_start>
	if (ret >= 0) {
   1c836:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1c83a:	e781      	b.n	1c740 <do_tcp_send+0x2c>
   1c83c:	20023490 	.word	0x20023490
   1c840:	0003831c 	.word	0x0003831c
   1c844:	000383f4 	.word	0x000383f4
   1c848:	000397c8 	.word	0x000397c8
   1c84c:	20020750 	.word	0x20020750
   1c850:	20028950 	.word	0x20028950
   1c854:	00039c58 	.word	0x00039c58
   1c858:	000397da 	.word	0x000397da

0001c85c <handle_at_tcp_send>:
	int size = NET_IPV4_MTU;
   1c85c:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1c860:	b590      	push	{r4, r7, lr}
   1c862:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	switch (cmd_type) {
   1c866:	2801      	cmp	r0, #1
{
   1c868:	af00      	add	r7, sp, #0
   1c86a:	4604      	mov	r4, r0
	int size = NET_IPV4_MTU;
   1c86c:	607b      	str	r3, [r7, #4]
	switch (cmd_type) {
   1c86e:	d005      	beq.n	1c87c <handle_at_tcp_send+0x20>
	int err = -EINVAL;
   1c870:	f06f 0015 	mvn.w	r0, #21
}
   1c874:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   1c878:	46bd      	mov	sp, r7
   1c87a:	bd90      	pop	{r4, r7, pc}
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1c87c:	481a      	ldr	r0, [pc, #104]	; (1c8e8 <handle_at_tcp_send+0x8c>)
   1c87e:	f01a f812 	bl	368a6 <at_params_valid_count_get>
   1c882:	2802      	cmp	r0, #2
   1c884:	d9f4      	bls.n	1c870 <handle_at_tcp_send+0x14>
		err = at_params_short_get(&at_param_list, 1, &datatype);
   1c886:	4621      	mov	r1, r4
   1c888:	4817      	ldr	r0, [pc, #92]	; (1c8e8 <handle_at_tcp_send+0x8c>)
   1c88a:	1cba      	adds	r2, r7, #2
   1c88c:	f019 ffc3 	bl	36816 <at_params_short_get>
		if (err) {
   1c890:	2800      	cmp	r0, #0
   1c892:	d1ef      	bne.n	1c874 <handle_at_tcp_send+0x18>
		err = at_params_string_get(&at_param_list, 2, data, &size);
   1c894:	2102      	movs	r1, #2
   1c896:	4814      	ldr	r0, [pc, #80]	; (1c8e8 <handle_at_tcp_send+0x8c>)
   1c898:	1d3b      	adds	r3, r7, #4
   1c89a:	f107 0208 	add.w	r2, r7, #8
   1c89e:	f019 ffdf 	bl	36860 <at_params_string_get>
		if (err) {
   1c8a2:	2800      	cmp	r0, #0
   1c8a4:	d1e6      	bne.n	1c874 <handle_at_tcp_send+0x18>
		if (datatype == DATATYPE_HEXADECIMAL) {
   1c8a6:	887b      	ldrh	r3, [r7, #2]
   1c8a8:	6879      	ldr	r1, [r7, #4]
   1c8aa:	b9bb      	cbnz	r3, 1c8dc <handle_at_tcp_send+0x80>
			uint8_t data_hex[size / 2];
   1c8ac:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   1c8b0:	105b      	asrs	r3, r3, #1
   1c8b2:	1dda      	adds	r2, r3, #7
   1c8b4:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   1c8b8:	466c      	mov	r4, sp
			uint8_t data_hex[size / 2];
   1c8ba:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   1c8be:	466a      	mov	r2, sp
   1c8c0:	b29b      	uxth	r3, r3
   1c8c2:	b289      	uxth	r1, r1
   1c8c4:	f107 0008 	add.w	r0, r7, #8
   1c8c8:	f017 f8dc 	bl	33a84 <slm_util_atoh>
			if (err > 0) {
   1c8cc:	2800      	cmp	r0, #0
   1c8ce:	dd03      	ble.n	1c8d8 <handle_at_tcp_send+0x7c>
				err = do_tcp_send(data_hex, err);
   1c8d0:	4601      	mov	r1, r0
   1c8d2:	4668      	mov	r0, sp
   1c8d4:	f7ff ff1e 	bl	1c714 <do_tcp_send>
   1c8d8:	46a5      	mov	sp, r4
   1c8da:	e7cb      	b.n	1c874 <handle_at_tcp_send+0x18>
			err = do_tcp_send(data, size);
   1c8dc:	f107 0008 	add.w	r0, r7, #8
   1c8e0:	f7ff ff18 	bl	1c714 <do_tcp_send>
   1c8e4:	e7c6      	b.n	1c874 <handle_at_tcp_send+0x18>
   1c8e6:	bf00      	nop
   1c8e8:	20023430 	.word	0x20023430

0001c8ec <tcp_thread_func>:
{
   1c8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   1c8f0:	f8df 8284 	ldr.w	r8, [pc, #644]	; 1cb78 <tcp_thread_func+0x28c>
   1c8f4:	4c8f      	ldr	r4, [pc, #572]	; (1cb34 <tcp_thread_func+0x248>)
   1c8f6:	4646      	mov	r6, r8
   1c8f8:	4a8f      	ldr	r2, [pc, #572]	; (1cb38 <tcp_thread_func+0x24c>)
{
   1c8fa:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   1c8fe:	1aa4      	subs	r4, r4, r2
   1c900:	08e4      	lsrs	r4, r4, #3
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   1c902:	f8d8 700c 	ldr.w	r7, [r8, #12]
   1c906:	2f01      	cmp	r7, #1
   1c908:	d178      	bne.n	1c9fc <tcp_thread_func+0x110>
		socklen_t len = sizeof(struct sockaddr_in);
   1c90a:	2308      	movs	r3, #8
   1c90c:	9307      	str	r3, [sp, #28]
		proxy.sock_peer = INVALID_SOCKET;
   1c90e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c912:	f8d8 0000 	ldr.w	r0, [r8]
   1c916:	f8c8 3008 	str.w	r3, [r8, #8]
	return z_impl_zsock_accept(sock, addr, addrlen);
   1c91a:	4988      	ldr	r1, [pc, #544]	; (1cb3c <tcp_thread_func+0x250>)
   1c91c:	aa07      	add	r2, sp, #28
   1c91e:	f018 fa4d 	bl	34dbc <z_impl_zsock_accept>
		if (ret < 0) {
   1c922:	f1b0 0900 	subs.w	r9, r0, #0
   1c926:	da14      	bge.n	1c952 <tcp_thread_func+0x66>
			LOG_ERR("accept() failed: %d", -errno);
   1c928:	f018 fcf5 	bl	35316 <__errno>
   1c92c:	01a4      	lsls	r4, r4, #6
   1c92e:	6801      	ldr	r1, [r0, #0]
   1c930:	f044 0401 	orr.w	r4, r4, #1
   1c934:	4622      	mov	r2, r4
   1c936:	4249      	negs	r1, r1
   1c938:	4881      	ldr	r0, [pc, #516]	; (1cb40 <tcp_thread_func+0x254>)
   1c93a:	f017 fdf4 	bl	34526 <log_1>
			do_tcp_server_stop(-errno);
   1c93e:	f018 fcea 	bl	35316 <__errno>
   1c942:	6800      	ldr	r0, [r0, #0]
   1c944:	4240      	negs	r0, r0
   1c946:	f7ff fe8d 	bl	1c664 <do_tcp_server_stop>
}
   1c94a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   1c94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c952:	ad0a      	add	r5, sp, #40	; 0x28
   1c954:	2310      	movs	r3, #16
   1c956:	462a      	mov	r2, r5
   1c958:	4638      	mov	r0, r7
   1c95a:	497a      	ldr	r1, [pc, #488]	; (1cb44 <tcp_thread_func+0x258>)
   1c95c:	f005 ffea 	bl	22934 <z_impl_net_addr_ntop>
		if (inet_ntop(AF_INET, &remote.sin_addr, peer_addr,
   1c960:	b170      	cbz	r0, 1c980 <tcp_thread_func+0x94>
			sprintf(rsp_buf, "#XTCPSVR: %s connected\r\n",
   1c962:	2100      	movs	r1, #0
   1c964:	f640 228c 	movw	r2, #2700	; 0xa8c
   1c968:	4b77      	ldr	r3, [pc, #476]	; (1cb48 <tcp_thread_func+0x25c>)
   1c96a:	4878      	ldr	r0, [pc, #480]	; (1cb4c <tcp_thread_func+0x260>)
   1c96c:	9500      	str	r5, [sp, #0]
   1c96e:	f01a fe80 	bl	37672 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1c972:	4876      	ldr	r0, [pc, #472]	; (1cb4c <tcp_thread_func+0x260>)
   1c974:	f7fc fb7c 	bl	19070 <strlen>
   1c978:	4601      	mov	r1, r0
   1c97a:	4874      	ldr	r0, [pc, #464]	; (1cb4c <tcp_thread_func+0x260>)
   1c97c:	f7fd fc34 	bl	1a1e8 <rsp_send>
		proxy.sock_peer = ret;
   1c980:	f8c6 9008 	str.w	r9, [r6, #8]
   1c984:	2200      	movs	r2, #0
   1c986:	2300      	movs	r3, #0
   1c988:	4871      	ldr	r0, [pc, #452]	; (1cb50 <tcp_thread_func+0x264>)
   1c98a:	e9cd 2300 	strd	r2, r3, [sp]
   1c98e:	2300      	movs	r3, #0
   1c990:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1c994:	f016 f810 	bl	329b8 <z_impl_k_timer_start>
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   1c998:	68f3      	ldr	r3, [r6, #12]
   1c99a:	2b01      	cmp	r3, #1
   1c99c:	d12e      	bne.n	1c9fc <tcp_thread_func+0x110>
		sock = proxy.sock_peer;
   1c99e:	68b3      	ldr	r3, [r6, #8]
		sock = proxy.sock;
   1c9a0:	9303      	str	r3, [sp, #12]
	fds.fd = sock;
   1c9a2:	9b03      	ldr	r3, [sp, #12]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
   1c9a4:	4d6b      	ldr	r5, [pc, #428]	; (1cb54 <tcp_thread_func+0x268>)
   1c9a6:	9308      	str	r3, [sp, #32]
	fds.events = POLLIN;
   1c9a8:	2301      	movs	r3, #1
   1c9aa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   1c9ae:	2300      	movs	r3, #0
	buf->tail = 0;
   1c9b0:	e9c5 3300 	strd	r3, r3, [r5]
	memset(&buf->misc, 0, sizeof(buf->misc));
   1c9b4:	e9c5 3302 	strd	r3, r3, [r5, #8]
	return z_impl_k_timer_status_get(timer);
   1c9b8:	f8df a194 	ldr.w	sl, [pc, #404]	; 1cb50 <tcp_thread_func+0x264>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1c9bc:	4f63      	ldr	r7, [pc, #396]	; (1cb4c <tcp_thread_func+0x260>)
		if (proxy.role == AT_TCP_ROLE_SERVER &&
   1c9be:	68f3      	ldr	r3, [r6, #12]
   1c9c0:	2b01      	cmp	r3, #1
   1c9c2:	d11d      	bne.n	1ca00 <tcp_thread_func+0x114>
   1c9c4:	4650      	mov	r0, sl
   1c9c6:	f01a fb75 	bl	370b4 <z_impl_k_timer_status_get>
   1c9ca:	b1c8      	cbz	r0, 1ca00 <tcp_thread_func+0x114>
	z_impl_k_timer_stop(timer);
   1c9cc:	4860      	ldr	r0, [pc, #384]	; (1cb50 <tcp_thread_func+0x264>)
   1c9ce:	f01a fb4f 	bl	37070 <z_impl_k_timer_stop>
			LOG_INF("Connecion timeout");
   1c9d2:	01a1      	lsls	r1, r4, #6
   1c9d4:	4860      	ldr	r0, [pc, #384]	; (1cb58 <tcp_thread_func+0x26c>)
   1c9d6:	f041 0103 	orr.w	r1, r1, #3
   1c9da:	f017 fd95 	bl	34508 <log_0>
			sprintf(rsp_buf, "#XTCPSVR: timeout\r\n");
   1c9de:	495f      	ldr	r1, [pc, #380]	; (1cb5c <tcp_thread_func+0x270>)
   1c9e0:	485a      	ldr	r0, [pc, #360]	; (1cb4c <tcp_thread_func+0x260>)
   1c9e2:	f01a fe6d 	bl	376c0 <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1c9e6:	4859      	ldr	r0, [pc, #356]	; (1cb4c <tcp_thread_func+0x260>)
   1c9e8:	f7fc fb42 	bl	19070 <strlen>
   1c9ec:	4601      	mov	r1, r0
   1c9ee:	4857      	ldr	r0, [pc, #348]	; (1cb4c <tcp_thread_func+0x260>)
   1c9f0:	f7fd fbfa 	bl	1a1e8 <rsp_send>
			close(proxy.sock_peer);
   1c9f4:	68b0      	ldr	r0, [r6, #8]
   1c9f6:	f017 f89d 	bl	33b34 <close>
			goto thread_entry;
   1c9fa:	e782      	b.n	1c902 <tcp_thread_func+0x16>
		sock = proxy.sock;
   1c9fc:	6833      	ldr	r3, [r6, #0]
   1c9fe:	e7cf      	b.n	1c9a0 <tcp_thread_func+0xb4>
	return z_impl_zsock_poll(fds, nfds, timeout);
   1ca00:	2101      	movs	r1, #1
   1ca02:	f242 7210 	movw	r2, #10000	; 0x2710
   1ca06:	a808      	add	r0, sp, #32
   1ca08:	f004 f9fc 	bl	20e04 <z_impl_zsock_poll>
		if (ret < 0) {  /* IO error */
   1ca0c:	1e01      	subs	r1, r0, #0
   1ca0e:	da06      	bge.n	1ca1e <tcp_thread_func+0x132>
			LOG_WRN("poll() error: %d", ret);
   1ca10:	01a2      	lsls	r2, r4, #6
   1ca12:	4853      	ldr	r0, [pc, #332]	; (1cb60 <tcp_thread_func+0x274>)
   1ca14:	f042 0202 	orr.w	r2, r2, #2
					LOG_ERR("hex convert error: %d", ret);
   1ca18:	f017 fd85 	bl	34526 <log_1>
					continue;
   1ca1c:	e7cf      	b.n	1c9be <tcp_thread_func+0xd2>
		if (ret == 0) {  /* timeout */
   1ca1e:	d0ce      	beq.n	1c9be <tcp_thread_func+0xd2>
		if ((fds.revents & POLLIN) == POLLIN) {
   1ca20:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1ca24:	07db      	lsls	r3, r3, #31
   1ca26:	d5ca      	bpl.n	1c9be <tcp_thread_func+0xd2>
			if (proxy.role == AT_TCP_ROLE_SERVER) {
   1ca28:	68f3      	ldr	r3, [r6, #12]
   1ca2a:	2b01      	cmp	r3, #1
   1ca2c:	d102      	bne.n	1ca34 <tcp_thread_func+0x148>
   1ca2e:	4650      	mov	r0, sl
   1ca30:	f01a fb1e 	bl	37070 <z_impl_k_timer_stop>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1ca34:	2300      	movs	r3, #0
   1ca36:	f44f 7210 	mov.w	r2, #576	; 0x240
   1ca3a:	e9cd 3300 	strd	r3, r3, [sp]
   1ca3e:	9803      	ldr	r0, [sp, #12]
   1ca40:	a90a      	add	r1, sp, #40	; 0x28
   1ca42:	f018 f9ee 	bl	34e22 <z_impl_zsock_recvfrom>
			if (ret < 0) {
   1ca46:	1e02      	subs	r2, r0, #0
   1ca48:	da0a      	bge.n	1ca60 <tcp_thread_func+0x174>
				LOG_WRN("recv() error: %d", -errno);
   1ca4a:	f018 fc64 	bl	35316 <__errno>
   1ca4e:	ea4f 1984 	mov.w	r9, r4, lsl #6
   1ca52:	6801      	ldr	r1, [r0, #0]
   1ca54:	f049 0902 	orr.w	r9, r9, #2
   1ca58:	464a      	mov	r2, r9
   1ca5a:	4842      	ldr	r0, [pc, #264]	; (1cb64 <tcp_thread_func+0x278>)
   1ca5c:	4249      	negs	r1, r1
   1ca5e:	e7db      	b.n	1ca18 <tcp_thread_func+0x12c>
			if (ret == 0) {
   1ca60:	d0ad      	beq.n	1c9be <tcp_thread_func+0xd2>
			if (proxy.datamode) {
   1ca62:	f896 b010 	ldrb.w	fp, [r6, #16]
   1ca66:	f1bb 0f00 	cmp.w	fp, #0
   1ca6a:	d011      	beq.n	1ca90 <tcp_thread_func+0x1a4>
				rsp_send(data, ret);
   1ca6c:	4611      	mov	r1, r2
   1ca6e:	a80a      	add	r0, sp, #40	; 0x28
				rsp_send(rsp_buf, strlen(rsp_buf));
   1ca70:	f7fd fbba 	bl	1a1e8 <rsp_send>
			if (proxy.role == AT_TCP_ROLE_SERVER) {
   1ca74:	68f3      	ldr	r3, [r6, #12]
   1ca76:	2b01      	cmp	r3, #1
   1ca78:	d1a1      	bne.n	1c9be <tcp_thread_func+0xd2>
	z_impl_k_timer_start(timer, duration, period);
   1ca7a:	2200      	movs	r2, #0
   1ca7c:	2300      	movs	r3, #0
   1ca7e:	4650      	mov	r0, sl
   1ca80:	e9cd 2300 	strd	r2, r3, [sp]
   1ca84:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1ca88:	2300      	movs	r3, #0
   1ca8a:	f015 ff95 	bl	329b8 <z_impl_k_timer_start>
   1ca8e:	e796      	b.n	1c9be <tcp_thread_func+0xd2>
			} else if (slm_util_hex_check(data, ret)) {
   1ca90:	b291      	uxth	r1, r2
   1ca92:	a80a      	add	r0, sp, #40	; 0x28
   1ca94:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1ca98:	f016 ffe1 	bl	33a5e <slm_util_hex_check>
   1ca9c:	9a05      	ldr	r2, [sp, #20]
   1ca9e:	4681      	mov	r9, r0
   1caa0:	b388      	cbz	r0, 1cb06 <tcp_thread_func+0x21a>
				ret = slm_util_htoa(data, ret, data_hex,
   1caa2:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1caa6:	4a30      	ldr	r2, [pc, #192]	; (1cb68 <tcp_thread_func+0x27c>)
   1caa8:	9904      	ldr	r1, [sp, #16]
   1caaa:	a80a      	add	r0, sp, #40	; 0x28
   1caac:	f7fd fa6c 	bl	19f88 <slm_util_htoa>
				if (ret < 0) {
   1cab0:	f1b0 0900 	subs.w	r9, r0, #0
   1cab4:	da05      	bge.n	1cac2 <tcp_thread_func+0x1d6>
					LOG_ERR("hex convert error: %d", ret);
   1cab6:	01a2      	lsls	r2, r4, #6
   1cab8:	4649      	mov	r1, r9
   1caba:	482c      	ldr	r0, [pc, #176]	; (1cb6c <tcp_thread_func+0x280>)
   1cabc:	f042 0201 	orr.w	r2, r2, #1
   1cac0:	e7aa      	b.n	1ca18 <tcp_thread_func+0x12c>
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->tail - buf->head);
   1cac2:	682a      	ldr	r2, [r5, #0]
   1cac4:	692b      	ldr	r3, [r5, #16]
   1cac6:	4413      	add	r3, r2
   1cac8:	686a      	ldr	r2, [r5, #4]
   1caca:	1a9b      	subs	r3, r3, r2
	if (ring_buf_space_get(&data_buf) < length) {
   1cacc:	4599      	cmp	r9, r3
   1cace:	d909      	bls.n	1cae4 <tcp_thread_func+0x1f8>
					sprintf(rsp_buf,
   1cad0:	4638      	mov	r0, r7
   1cad2:	4927      	ldr	r1, [pc, #156]	; (1cb70 <tcp_thread_func+0x284>)
   1cad4:	f01a fdf4 	bl	376c0 <strcpy>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1cad8:	4638      	mov	r0, r7
   1cada:	f7fc fac9 	bl	19070 <strlen>
   1cade:	4601      	mov	r1, r0
   1cae0:	4638      	mov	r0, r7
   1cae2:	e7c5      	b.n	1ca70 <tcp_thread_func+0x184>
	return ring_buf_put(&data_buf, data, length);
   1cae4:	464a      	mov	r2, r9
   1cae6:	4920      	ldr	r1, [pc, #128]	; (1cb68 <tcp_thread_func+0x27c>)
   1cae8:	481a      	ldr	r0, [pc, #104]	; (1cb54 <tcp_thread_func+0x268>)
   1caea:	f017 fc5f 	bl	343ac <ring_buf_put>
				if (tcp_data_save(data_hex, ret) < 0) {
   1caee:	2800      	cmp	r0, #0
   1caf0:	dbee      	blt.n	1cad0 <tcp_thread_func+0x1e4>
					sprintf(rsp_buf,
   1caf2:	f640 228c 	movw	r2, #2700	; 0xa8c
   1caf6:	4659      	mov	r1, fp
   1caf8:	e9cd b900 	strd	fp, r9, [sp]
   1cafc:	4b1d      	ldr	r3, [pc, #116]	; (1cb74 <tcp_thread_func+0x288>)
					sprintf(rsp_buf,
   1cafe:	4638      	mov	r0, r7
   1cb00:	f01a fdb7 	bl	37672 <__sprintf_chk>
   1cb04:	e7e8      	b.n	1cad8 <tcp_thread_func+0x1ec>
   1cb06:	6829      	ldr	r1, [r5, #0]
   1cb08:	692b      	ldr	r3, [r5, #16]
   1cb0a:	440b      	add	r3, r1
   1cb0c:	6869      	ldr	r1, [r5, #4]
   1cb0e:	1a5b      	subs	r3, r3, r1
	if (ring_buf_space_get(&data_buf) < length) {
   1cb10:	429a      	cmp	r2, r3
   1cb12:	d8dd      	bhi.n	1cad0 <tcp_thread_func+0x1e4>
	return ring_buf_put(&data_buf, data, length);
   1cb14:	480f      	ldr	r0, [pc, #60]	; (1cb54 <tcp_thread_func+0x268>)
   1cb16:	a90a      	add	r1, sp, #40	; 0x28
   1cb18:	9204      	str	r2, [sp, #16]
   1cb1a:	f017 fc47 	bl	343ac <ring_buf_put>
				if (tcp_data_save(data, ret) < 0) {
   1cb1e:	2800      	cmp	r0, #0
   1cb20:	dbd6      	blt.n	1cad0 <tcp_thread_func+0x1e4>
					sprintf(rsp_buf,
   1cb22:	2301      	movs	r3, #1
   1cb24:	9a04      	ldr	r2, [sp, #16]
   1cb26:	9300      	str	r3, [sp, #0]
   1cb28:	9201      	str	r2, [sp, #4]
   1cb2a:	4649      	mov	r1, r9
   1cb2c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1cb30:	4b10      	ldr	r3, [pc, #64]	; (1cb74 <tcp_thread_func+0x288>)
   1cb32:	e7e4      	b.n	1cafe <tcp_thread_func+0x212>
   1cb34:	000383f4 	.word	0x000383f4
   1cb38:	0003831c 	.word	0x0003831c
   1cb3c:	200234a4 	.word	0x200234a4
   1cb40:	00039c68 	.word	0x00039c68
   1cb44:	200234a8 	.word	0x200234a8
   1cb48:	00039c7c 	.word	0x00039c7c
   1cb4c:	20028950 	.word	0x20028950
   1cb50:	20020750 	.word	0x20020750
   1cb54:	200200c4 	.word	0x200200c4
   1cb58:	00039c95 	.word	0x00039c95
   1cb5c:	00039ca7 	.word	0x00039ca7
   1cb60:	00039cbb 	.word	0x00039cbb
   1cb64:	00039796 	.word	0x00039796
   1cb68:	2002b03c 	.word	0x2002b03c
   1cb6c:	00039726 	.word	0x00039726
   1cb70:	00039ccc 	.word	0x00039ccc
   1cb74:	00039ce1 	.word	0x00039ce1
   1cb78:	20023490 	.word	0x20023490

0001cb7c <handle_at_tcp_server>:
{
   1cb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb7e:	4604      	mov	r4, r0
   1cb80:	b08d      	sub	sp, #52	; 0x34
	int param_count = at_params_valid_count_get(&at_param_list);
   1cb82:	48b2      	ldr	r0, [pc, #712]	; (1ce4c <handle_at_tcp_server+0x2d0>)
   1cb84:	f019 fe8f 	bl	368a6 <at_params_valid_count_get>
	switch (cmd_type) {
   1cb88:	2c02      	cmp	r4, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   1cb8a:	4606      	mov	r6, r0
	switch (cmd_type) {
   1cb8c:	f000 818a 	beq.w	1cea4 <handle_at_tcp_server+0x328>
   1cb90:	2c03      	cmp	r4, #3
   1cb92:	f000 81af 	beq.w	1cef4 <handle_at_tcp_server+0x378>
   1cb96:	2c01      	cmp	r4, #1
   1cb98:	f040 80ca 	bne.w	1cd30 <handle_at_tcp_server+0x1b4>
		if (param_count < 2) {
   1cb9c:	2801      	cmp	r0, #1
   1cb9e:	f340 80c7 	ble.w	1cd30 <handle_at_tcp_server+0x1b4>
		err = at_params_short_get(&at_param_list, 1, &op);
   1cba2:	4621      	mov	r1, r4
   1cba4:	48a9      	ldr	r0, [pc, #676]	; (1ce4c <handle_at_tcp_server+0x2d0>)
   1cba6:	aa09      	add	r2, sp, #36	; 0x24
   1cba8:	f019 fe35 	bl	36816 <at_params_short_get>
		if (err) {
   1cbac:	4604      	mov	r4, r0
   1cbae:	2800      	cmp	r0, #0
   1cbb0:	f040 80aa 	bne.w	1cd08 <handle_at_tcp_server+0x18c>
		if (op == AT_SERVER_START ||
   1cbb4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1cbb8:	1e5a      	subs	r2, r3, #1
   1cbba:	2a01      	cmp	r2, #1
   1cbbc:	f200 8130 	bhi.w	1ce20 <handle_at_tcp_server+0x2a4>
			proxy.sec_tag = INVALID_SEC_TAG;
   1cbc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cbc4:	4da2      	ldr	r5, [pc, #648]	; (1ce50 <handle_at_tcp_server+0x2d4>)
			if (param_count < 3) {
   1cbc6:	2e02      	cmp	r6, #2
			proxy.sec_tag = INVALID_SEC_TAG;
   1cbc8:	606b      	str	r3, [r5, #4]
			if (param_count < 3) {
   1cbca:	f000 80b1 	beq.w	1cd30 <handle_at_tcp_server+0x1b4>
			err = at_params_short_get(&at_param_list, 2, &port);
   1cbce:	2102      	movs	r1, #2
   1cbd0:	489e      	ldr	r0, [pc, #632]	; (1ce4c <handle_at_tcp_server+0x2d0>)
   1cbd2:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   1cbd6:	f019 fe1e 	bl	36816 <at_params_short_get>
			if (err) {
   1cbda:	4604      	mov	r4, r0
   1cbdc:	2800      	cmp	r0, #0
   1cbde:	f040 8093 	bne.w	1cd08 <handle_at_tcp_server+0x18c>
			if (param_count > 3) {
   1cbe2:	2e03      	cmp	r6, #3
   1cbe4:	d004      	beq.n	1cbf0 <handle_at_tcp_server+0x74>
				at_params_int_get(&at_param_list, 3,
   1cbe6:	2103      	movs	r1, #3
   1cbe8:	4898      	ldr	r0, [pc, #608]	; (1ce4c <handle_at_tcp_server+0x2d0>)
   1cbea:	1d2a      	adds	r2, r5, #4
   1cbec:	f019 fe25 	bl	3683a <at_params_int_get>
			err = do_tcp_server_start(port, proxy.sec_tag);
   1cbf0:	686c      	ldr	r4, [r5, #4]
   1cbf2:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26
	if (sec_tag == INVALID_SEC_TAG) {
   1cbf6:	1c63      	adds	r3, r4, #1
	return z_impl_zsock_socket(family, type, proto);
   1cbf8:	f04f 0101 	mov.w	r1, #1
   1cbfc:	bf0c      	ite	eq
   1cbfe:	2206      	moveq	r2, #6
   1cc00:	f44f 7281 	movne.w	r2, #258	; 0x102
   1cc04:	4608      	mov	r0, r1
   1cc06:	f004 f8d7 	bl	20db8 <z_impl_zsock_socket>
		proxy.sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);
   1cc0a:	6028      	str	r0, [r5, #0]
	if (proxy.sock < 0) {
   1cc0c:	6828      	ldr	r0, [r5, #0]
   1cc0e:	2800      	cmp	r0, #0
   1cc10:	da2e      	bge.n	1cc70 <handle_at_tcp_server+0xf4>
   1cc12:	4a90      	ldr	r2, [pc, #576]	; (1ce54 <handle_at_tcp_server+0x2d8>)
   1cc14:	4c90      	ldr	r4, [pc, #576]	; (1ce58 <handle_at_tcp_server+0x2dc>)
   1cc16:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
   1cc18:	f018 fb7d 	bl	35316 <__errno>
   1cc1c:	08e4      	lsrs	r4, r4, #3
   1cc1e:	6801      	ldr	r1, [r0, #0]
   1cc20:	01a4      	lsls	r4, r4, #6
   1cc22:	f044 0401 	orr.w	r4, r4, #1
   1cc26:	4622      	mov	r2, r4
   1cc28:	4249      	negs	r1, r1
   1cc2a:	488c      	ldr	r0, [pc, #560]	; (1ce5c <handle_at_tcp_server+0x2e0>)
   1cc2c:	f017 fc7b 	bl	34526 <log_1>
		sprintf(rsp_buf, "#XTCPSVR: %d\r\n", -errno);
   1cc30:	f018 fb71 	bl	35316 <__errno>
   1cc34:	6803      	ldr	r3, [r0, #0]
   1cc36:	2100      	movs	r1, #0
   1cc38:	425b      	negs	r3, r3
   1cc3a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1cc3e:	9300      	str	r3, [sp, #0]
   1cc40:	4887      	ldr	r0, [pc, #540]	; (1ce60 <handle_at_tcp_server+0x2e4>)
   1cc42:	4b88      	ldr	r3, [pc, #544]	; (1ce64 <handle_at_tcp_server+0x2e8>)
   1cc44:	f01a fd15 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1cc48:	4885      	ldr	r0, [pc, #532]	; (1ce60 <handle_at_tcp_server+0x2e4>)
   1cc4a:	f7fc fa11 	bl	19070 <strlen>
   1cc4e:	4601      	mov	r1, r0
   1cc50:	4883      	ldr	r0, [pc, #524]	; (1ce60 <handle_at_tcp_server+0x2e4>)
   1cc52:	f7fd fac9 	bl	1a1e8 <rsp_send>
			return -errno;
   1cc56:	f018 fb5e 	bl	35316 <__errno>
   1cc5a:	6804      	ldr	r4, [r0, #0]
   1cc5c:	4264      	negs	r4, r4
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   1cc5e:	2c00      	cmp	r4, #0
   1cc60:	d152      	bne.n	1cd08 <handle_at_tcp_server+0x18c>
   1cc62:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1cc66:	2b02      	cmp	r3, #2
   1cc68:	d14e      	bne.n	1cd08 <handle_at_tcp_server+0x18c>
				proxy.datamode = true;
   1cc6a:	2301      	movs	r3, #1
   1cc6c:	742b      	strb	r3, [r5, #16]
   1cc6e:	e04b      	b.n	1cd08 <handle_at_tcp_server+0x18c>
	if (sec_tag != INVALID_SEC_TAG) {
   1cc70:	1c66      	adds	r6, r4, #1
   1cc72:	d02f      	beq.n	1ccd4 <handle_at_tcp_server+0x158>
		sec_tag_t sec_tag_list[1] = { sec_tag };
   1cc74:	940a      	str	r4, [sp, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1cc76:	2304      	movs	r3, #4
   1cc78:	2201      	movs	r2, #1
   1cc7a:	9300      	str	r3, [sp, #0]
   1cc7c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1cc80:	ab0a      	add	r3, sp, #40	; 0x28
   1cc82:	f018 f90d 	bl	34ea0 <z_impl_zsock_setsockopt>
		if (ret) {
   1cc86:	b328      	cbz	r0, 1ccd4 <handle_at_tcp_server+0x158>
   1cc88:	4a72      	ldr	r2, [pc, #456]	; (1ce54 <handle_at_tcp_server+0x2d8>)
   1cc8a:	4c73      	ldr	r4, [pc, #460]	; (1ce58 <handle_at_tcp_server+0x2dc>)
   1cc8c:	1aa4      	subs	r4, r4, r2
   1cc8e:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set tag list failed: %d", -errno);
   1cc90:	f018 fb41 	bl	35316 <__errno>
   1cc94:	01a4      	lsls	r4, r4, #6
   1cc96:	f044 0401 	orr.w	r4, r4, #1
   1cc9a:	4622      	mov	r2, r4
   1cc9c:	6801      	ldr	r1, [r0, #0]
   1cc9e:	4872      	ldr	r0, [pc, #456]	; (1ce68 <handle_at_tcp_server+0x2ec>)
   1cca0:	4249      	negs	r1, r1
   1cca2:	f017 fc40 	bl	34526 <log_1>
			sprintf(rsp_buf, "#XTCPSVR: %d\r\n", -errno);
   1cca6:	f018 fb36 	bl	35316 <__errno>
   1ccaa:	6803      	ldr	r3, [r0, #0]
   1ccac:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ccb0:	425b      	negs	r3, r3
   1ccb2:	2100      	movs	r1, #0
   1ccb4:	9300      	str	r3, [sp, #0]
   1ccb6:	486a      	ldr	r0, [pc, #424]	; (1ce60 <handle_at_tcp_server+0x2e4>)
   1ccb8:	4b6a      	ldr	r3, [pc, #424]	; (1ce64 <handle_at_tcp_server+0x2e8>)
   1ccba:	f01a fcda 	bl	37672 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1ccbe:	4868      	ldr	r0, [pc, #416]	; (1ce60 <handle_at_tcp_server+0x2e4>)
   1ccc0:	f7fc f9d6 	bl	19070 <strlen>
   1ccc4:	4601      	mov	r1, r0
   1ccc6:	4866      	ldr	r0, [pc, #408]	; (1ce60 <handle_at_tcp_server+0x2e4>)
   1ccc8:	f7fd fa8e 	bl	1a1e8 <rsp_send>
			close(proxy.sock);
   1cccc:	6828      	ldr	r0, [r5, #0]
   1ccce:	f016 ff31 	bl	33b34 <close>
   1ccd2:	e7c0      	b.n	1cc56 <handle_at_tcp_server+0xda>
	local.sin_family = AF_INET;
   1ccd4:	2601      	movs	r6, #1
	local.sin_port = htons(port);
   1ccd6:	023b      	lsls	r3, r7, #8
   1ccd8:	ea43 2317 	orr.w	r3, r3, r7, lsr #8
	ret = modem_info_params_get(&modem_param);
   1ccdc:	4863      	ldr	r0, [pc, #396]	; (1ce6c <handle_at_tcp_server+0x2f0>)
	local.sin_family = AF_INET;
   1ccde:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
	local.sin_port = htons(port);
   1cce2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	ret = modem_info_params_get(&modem_param);
   1cce6:	f00a fa31 	bl	2714c <modem_info_params_get>
	if (ret) {
   1ccea:	4604      	mov	r4, r0
   1ccec:	b178      	cbz	r0, 1cd0e <handle_at_tcp_server+0x192>
   1ccee:	4b59      	ldr	r3, [pc, #356]	; (1ce54 <handle_at_tcp_server+0x2d8>)
   1ccf0:	4a59      	ldr	r2, [pc, #356]	; (1ce58 <handle_at_tcp_server+0x2dc>)
		LOG_ERR("Unable to obtain modem parameters (%d)", ret);
   1ccf2:	4601      	mov	r1, r0
   1ccf4:	1ad2      	subs	r2, r2, r3
   1ccf6:	08d2      	lsrs	r2, r2, #3
   1ccf8:	0192      	lsls	r2, r2, #6
   1ccfa:	485d      	ldr	r0, [pc, #372]	; (1ce70 <handle_at_tcp_server+0x2f4>)
   1ccfc:	4332      	orrs	r2, r6
   1ccfe:	f017 fc12 	bl	34526 <log_1>
		close(proxy.sock);
   1cd02:	6828      	ldr	r0, [r5, #0]
   1cd04:	f016 ff16 	bl	33b34 <close>
}
   1cd08:	4620      	mov	r0, r4
   1cd0a:	b00d      	add	sp, #52	; 0x34
   1cd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	addr_len = strlen(modem_param.network.ip_address.value_string);
   1cd0e:	4859      	ldr	r0, [pc, #356]	; (1ce74 <handle_at_tcp_server+0x2f8>)
   1cd10:	f7fc f9ae 	bl	19070 <strlen>
	if (addr_len == 0) {
   1cd14:	b978      	cbnz	r0, 1cd36 <handle_at_tcp_server+0x1ba>
   1cd16:	4950      	ldr	r1, [pc, #320]	; (1ce58 <handle_at_tcp_server+0x2dc>)
   1cd18:	4b4e      	ldr	r3, [pc, #312]	; (1ce54 <handle_at_tcp_server+0x2d8>)
		LOG_ERR("LTE not connected yet");
   1cd1a:	4857      	ldr	r0, [pc, #348]	; (1ce78 <handle_at_tcp_server+0x2fc>)
   1cd1c:	1ac9      	subs	r1, r1, r3
   1cd1e:	08c9      	lsrs	r1, r1, #3
   1cd20:	0189      	lsls	r1, r1, #6
   1cd22:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid local address");
   1cd26:	f017 fbef 	bl	34508 <log_0>
		close(proxy.sock);
   1cd2a:	6828      	ldr	r0, [r5, #0]
   1cd2c:	f016 ff02 	bl	33b34 <close>
			return -EINVAL;
   1cd30:	f06f 0415 	mvn.w	r4, #21
   1cd34:	e7e8      	b.n	1cd08 <handle_at_tcp_server+0x18c>
	if (!check_for_ipv4(modem_param.network.ip_address.value_string,
   1cd36:	b2c1      	uxtb	r1, r0
   1cd38:	484e      	ldr	r0, [pc, #312]	; (1ce74 <handle_at_tcp_server+0x2f8>)
   1cd3a:	f016 fec7 	bl	33acc <check_for_ipv4>
   1cd3e:	b940      	cbnz	r0, 1cd52 <handle_at_tcp_server+0x1d6>
   1cd40:	4945      	ldr	r1, [pc, #276]	; (1ce58 <handle_at_tcp_server+0x2dc>)
   1cd42:	4b44      	ldr	r3, [pc, #272]	; (1ce54 <handle_at_tcp_server+0x2d8>)
		LOG_ERR("Invalid local address");
   1cd44:	484d      	ldr	r0, [pc, #308]	; (1ce7c <handle_at_tcp_server+0x300>)
   1cd46:	1ac9      	subs	r1, r1, r3
   1cd48:	08c9      	lsrs	r1, r1, #3
   1cd4a:	0189      	lsls	r1, r1, #6
   1cd4c:	f041 0101 	orr.w	r1, r1, #1
   1cd50:	e7e9      	b.n	1cd26 <handle_at_tcp_server+0x1aa>
	return z_impl_zsock_inet_pton(family, src, dst);
   1cd52:	4948      	ldr	r1, [pc, #288]	; (1ce74 <handle_at_tcp_server+0x2f8>)
   1cd54:	4630      	mov	r0, r6
   1cd56:	aa0b      	add	r2, sp, #44	; 0x2c
   1cd58:	f018 f880 	bl	34e5c <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, modem_param.network.ip_address.value_string,
   1cd5c:	2801      	cmp	r0, #1
   1cd5e:	4607      	mov	r7, r0
   1cd60:	d00f      	beq.n	1cd82 <handle_at_tcp_server+0x206>
   1cd62:	4a3c      	ldr	r2, [pc, #240]	; (1ce54 <handle_at_tcp_server+0x2d8>)
   1cd64:	4c3c      	ldr	r4, [pc, #240]	; (1ce58 <handle_at_tcp_server+0x2dc>)
   1cd66:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Parse local IP address failed: %d", -errno);
   1cd68:	f018 fad5 	bl	35316 <__errno>
   1cd6c:	08e4      	lsrs	r4, r4, #3
   1cd6e:	6801      	ldr	r1, [r0, #0]
   1cd70:	01a4      	lsls	r4, r4, #6
   1cd72:	f044 0401 	orr.w	r4, r4, #1
   1cd76:	4622      	mov	r2, r4
   1cd78:	4841      	ldr	r0, [pc, #260]	; (1ce80 <handle_at_tcp_server+0x304>)
   1cd7a:	4249      	negs	r1, r1
   1cd7c:	f017 fbd3 	bl	34526 <log_1>
		close(proxy.sock);
   1cd80:	e7d3      	b.n	1cd2a <handle_at_tcp_server+0x1ae>
	ret = bind(proxy.sock, (struct sockaddr *)&local,
   1cd82:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_bind(sock, addr, addrlen);
   1cd84:	2208      	movs	r2, #8
   1cd86:	a90a      	add	r1, sp, #40	; 0x28
   1cd88:	f017 ffd8 	bl	34d3c <z_impl_zsock_bind>
	if (ret) {
   1cd8c:	4606      	mov	r6, r0
   1cd8e:	b168      	cbz	r0, 1cdac <handle_at_tcp_server+0x230>
   1cd90:	4a30      	ldr	r2, [pc, #192]	; (1ce54 <handle_at_tcp_server+0x2d8>)
   1cd92:	4e31      	ldr	r6, [pc, #196]	; (1ce58 <handle_at_tcp_server+0x2dc>)
   1cd94:	1ab6      	subs	r6, r6, r2
		LOG_ERR("bind() failed: %d", -errno);
   1cd96:	f018 fabe 	bl	35316 <__errno>
   1cd9a:	08f6      	lsrs	r6, r6, #3
   1cd9c:	6801      	ldr	r1, [r0, #0]
   1cd9e:	01b6      	lsls	r6, r6, #6
   1cda0:	f046 0601 	orr.w	r6, r6, #1
   1cda4:	4632      	mov	r2, r6
   1cda6:	4837      	ldr	r0, [pc, #220]	; (1ce84 <handle_at_tcp_server+0x308>)
   1cda8:	4249      	negs	r1, r1
   1cdaa:	e77a      	b.n	1cca2 <handle_at_tcp_server+0x126>
	ret = listen(proxy.sock, 1);
   1cdac:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_listen(sock, backlog);
   1cdae:	4639      	mov	r1, r7
   1cdb0:	f017 fff0 	bl	34d94 <z_impl_zsock_listen>
	if (ret < 0) {
   1cdb4:	1e04      	subs	r4, r0, #0
   1cdb6:	da0d      	bge.n	1cdd4 <handle_at_tcp_server+0x258>
   1cdb8:	4a26      	ldr	r2, [pc, #152]	; (1ce54 <handle_at_tcp_server+0x2d8>)
   1cdba:	4c27      	ldr	r4, [pc, #156]	; (1ce58 <handle_at_tcp_server+0x2dc>)
   1cdbc:	1aa4      	subs	r4, r4, r2
		LOG_ERR("listen() failed: %d", -errno);
   1cdbe:	f018 faaa 	bl	35316 <__errno>
   1cdc2:	08e4      	lsrs	r4, r4, #3
   1cdc4:	6801      	ldr	r1, [r0, #0]
   1cdc6:	01a4      	lsls	r4, r4, #6
   1cdc8:	f044 0401 	orr.w	r4, r4, #1
   1cdcc:	4622      	mov	r2, r4
   1cdce:	482e      	ldr	r0, [pc, #184]	; (1ce88 <handle_at_tcp_server+0x30c>)
   1cdd0:	4249      	negs	r1, r1
   1cdd2:	e766      	b.n	1cca2 <handle_at_tcp_server+0x126>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1cdd4:	2200      	movs	r2, #0
   1cdd6:	2300      	movs	r3, #0
   1cdd8:	2004      	movs	r0, #4
   1cdda:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1cdde:	230e      	movs	r3, #14
   1cde0:	f44f 6264 	mov.w	r2, #3648	; 0xe40
   1cde4:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1cde8:	e9cd 6601 	strd	r6, r6, [sp, #4]
   1cdec:	4b27      	ldr	r3, [pc, #156]	; (1ce8c <handle_at_tcp_server+0x310>)
   1cdee:	4928      	ldr	r1, [pc, #160]	; (1ce90 <handle_at_tcp_server+0x314>)
   1cdf0:	9600      	str	r6, [sp, #0]
   1cdf2:	4828      	ldr	r0, [pc, #160]	; (1ce94 <handle_at_tcp_server+0x318>)
   1cdf4:	f015 fb56 	bl	324a4 <z_impl_k_thread_create>
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   1cdf8:	4b27      	ldr	r3, [pc, #156]	; (1ce98 <handle_at_tcp_server+0x31c>)
	sprintf(rsp_buf, "#XTCPSVR: %d started\r\n", proxy.sock);
   1cdfa:	4631      	mov	r1, r6
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   1cdfc:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XTCPSVR: %d started\r\n", proxy.sock);
   1cdfe:	682b      	ldr	r3, [r5, #0]
   1ce00:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ce04:	9300      	str	r3, [sp, #0]
   1ce06:	4816      	ldr	r0, [pc, #88]	; (1ce60 <handle_at_tcp_server+0x2e4>)
   1ce08:	4b24      	ldr	r3, [pc, #144]	; (1ce9c <handle_at_tcp_server+0x320>)
	proxy.role = AT_TCP_ROLE_SERVER;
   1ce0a:	60ef      	str	r7, [r5, #12]
	sprintf(rsp_buf, "#XTCPSVR: %d started\r\n", proxy.sock);
   1ce0c:	f01a fc31 	bl	37672 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1ce10:	4813      	ldr	r0, [pc, #76]	; (1ce60 <handle_at_tcp_server+0x2e4>)
   1ce12:	f7fc f92d 	bl	19070 <strlen>
   1ce16:	4601      	mov	r1, r0
   1ce18:	4811      	ldr	r0, [pc, #68]	; (1ce60 <handle_at_tcp_server+0x2e4>)
   1ce1a:	f7fd f9e5 	bl	1a1e8 <rsp_send>
	return ret;
   1ce1e:	e71e      	b.n	1cc5e <handle_at_tcp_server+0xe2>
		} else if (op == AT_SERVER_STOP) {
   1ce20:	2b00      	cmp	r3, #0
   1ce22:	f47f af71 	bne.w	1cd08 <handle_at_tcp_server+0x18c>
			if (proxy.sock < 0) {
   1ce26:	4b0a      	ldr	r3, [pc, #40]	; (1ce50 <handle_at_tcp_server+0x2d4>)
   1ce28:	681b      	ldr	r3, [r3, #0]
   1ce2a:	2b00      	cmp	r3, #0
   1ce2c:	da0a      	bge.n	1ce44 <handle_at_tcp_server+0x2c8>
   1ce2e:	4b09      	ldr	r3, [pc, #36]	; (1ce54 <handle_at_tcp_server+0x2d8>)
   1ce30:	4909      	ldr	r1, [pc, #36]	; (1ce58 <handle_at_tcp_server+0x2dc>)
				LOG_WRN("Server is not running");
   1ce32:	481b      	ldr	r0, [pc, #108]	; (1cea0 <handle_at_tcp_server+0x324>)
   1ce34:	1ac9      	subs	r1, r1, r3
   1ce36:	08c9      	lsrs	r1, r1, #3
   1ce38:	0189      	lsls	r1, r1, #6
   1ce3a:	f041 0102 	orr.w	r1, r1, #2
   1ce3e:	f017 fb63 	bl	34508 <log_0>
				return -EINVAL;
   1ce42:	e775      	b.n	1cd30 <handle_at_tcp_server+0x1b4>
			err = do_tcp_server_stop(0);
   1ce44:	f7ff fc0e 	bl	1c664 <do_tcp_server_stop>
   1ce48:	4604      	mov	r4, r0
   1ce4a:	e75d      	b.n	1cd08 <handle_at_tcp_server+0x18c>
   1ce4c:	20023430 	.word	0x20023430
   1ce50:	20023490 	.word	0x20023490
   1ce54:	0003831c 	.word	0x0003831c
   1ce58:	000383f4 	.word	0x000383f4
   1ce5c:	000399b0 	.word	0x000399b0
   1ce60:	20028950 	.word	0x20028950
   1ce64:	00039cf5 	.word	0x00039cf5
   1ce68:	00039b71 	.word	0x00039b71
   1ce6c:	20020900 	.word	0x20020900
   1ce70:	000398f3 	.word	0x000398f3
   1ce74:	20020c12 	.word	0x20020c12
   1ce78:	0003991a 	.word	0x0003991a
   1ce7c:	00039930 	.word	0x00039930
   1ce80:	00039946 	.word	0x00039946
   1ce84:	00039968 	.word	0x00039968
   1ce88:	00039881 	.word	0x00039881
   1ce8c:	0001c8ed 	.word	0x0001c8ed
   1ce90:	2002d518 	.word	0x2002d518
   1ce94:	200212c8 	.word	0x200212c8
   1ce98:	200234ac 	.word	0x200234ac
   1ce9c:	00039d04 	.word	0x00039d04
   1cea0:	00039d1b 	.word	0x00039d1b
		if (proxy.sock != INVALID_SOCKET &&
   1cea4:	4b1e      	ldr	r3, [pc, #120]	; (1cf20 <handle_at_tcp_server+0x3a4>)
   1cea6:	681a      	ldr	r2, [r3, #0]
   1cea8:	1c51      	adds	r1, r2, #1
   1ceaa:	d017      	beq.n	1cedc <handle_at_tcp_server+0x360>
   1ceac:	68d9      	ldr	r1, [r3, #12]
   1ceae:	2901      	cmp	r1, #1
   1ceb0:	d114      	bne.n	1cedc <handle_at_tcp_server+0x360>
			sprintf(rsp_buf, "#XTCPSVR: %d, %d, %d\r\n",
   1ceb2:	7c19      	ldrb	r1, [r3, #16]
   1ceb4:	481b      	ldr	r0, [pc, #108]	; (1cf24 <handle_at_tcp_server+0x3a8>)
   1ceb6:	9102      	str	r1, [sp, #8]
   1ceb8:	689b      	ldr	r3, [r3, #8]
   1ceba:	2100      	movs	r1, #0
   1cebc:	e9cd 2300 	strd	r2, r3, [sp]
   1cec0:	f640 228c 	movw	r2, #2700	; 0xa8c
   1cec4:	4b18      	ldr	r3, [pc, #96]	; (1cf28 <handle_at_tcp_server+0x3ac>)
   1cec6:	f01a fbd4 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ceca:	4816      	ldr	r0, [pc, #88]	; (1cf24 <handle_at_tcp_server+0x3a8>)
   1cecc:	f7fc f8d0 	bl	19070 <strlen>
   1ced0:	4601      	mov	r1, r0
   1ced2:	4814      	ldr	r0, [pc, #80]	; (1cf24 <handle_at_tcp_server+0x3a8>)
   1ced4:	f7fd f988 	bl	1a1e8 <rsp_send>
		err = 0;
   1ced8:	2400      	movs	r4, #0
		break;
   1ceda:	e715      	b.n	1cd08 <handle_at_tcp_server+0x18c>
			sprintf(rsp_buf, "#XTCPSVR: %d, %d\r\n",
   1cedc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cee0:	f640 228c 	movw	r2, #2700	; 0xa8c
   1cee4:	e9cd 3300 	strd	r3, r3, [sp]
   1cee8:	2100      	movs	r1, #0
   1ceea:	4b10      	ldr	r3, [pc, #64]	; (1cf2c <handle_at_tcp_server+0x3b0>)
   1ceec:	480d      	ldr	r0, [pc, #52]	; (1cf24 <handle_at_tcp_server+0x3a8>)
   1ceee:	f01a fbc0 	bl	37672 <__sprintf_chk>
   1cef2:	e7ea      	b.n	1ceca <handle_at_tcp_server+0x34e>
		sprintf(rsp_buf, "#XTCPSVR: (%d, %d, %d),<port>,<sec_tag>\r\n",
   1cef4:	2400      	movs	r4, #0
   1cef6:	2301      	movs	r3, #1
   1cef8:	2202      	movs	r2, #2
   1cefa:	4621      	mov	r1, r4
   1cefc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1cf00:	9400      	str	r4, [sp, #0]
   1cf02:	f640 228c 	movw	r2, #2700	; 0xa8c
   1cf06:	4b0a      	ldr	r3, [pc, #40]	; (1cf30 <handle_at_tcp_server+0x3b4>)
   1cf08:	4806      	ldr	r0, [pc, #24]	; (1cf24 <handle_at_tcp_server+0x3a8>)
   1cf0a:	f01a fbb2 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1cf0e:	4805      	ldr	r0, [pc, #20]	; (1cf24 <handle_at_tcp_server+0x3a8>)
   1cf10:	f7fc f8ae 	bl	19070 <strlen>
   1cf14:	4601      	mov	r1, r0
   1cf16:	4803      	ldr	r0, [pc, #12]	; (1cf24 <handle_at_tcp_server+0x3a8>)
   1cf18:	f7fd f966 	bl	1a1e8 <rsp_send>
		break;
   1cf1c:	e6f4      	b.n	1cd08 <handle_at_tcp_server+0x18c>
   1cf1e:	bf00      	nop
   1cf20:	20023490 	.word	0x20023490
   1cf24:	20028950 	.word	0x20028950
   1cf28:	00039d31 	.word	0x00039d31
   1cf2c:	00039d48 	.word	0x00039d48
   1cf30:	00039d5b 	.word	0x00039d5b

0001cf34 <slm_at_tcp_proxy_uninit>:

/**@brief API to uninitialize TCP proxy AT commands handler
 */
int slm_at_tcp_proxy_uninit(void)
{
	if (proxy.role == AT_TCP_ROLE_CLIENT) {
   1cf34:	4b05      	ldr	r3, [pc, #20]	; (1cf4c <slm_at_tcp_proxy_uninit+0x18>)
   1cf36:	68d8      	ldr	r0, [r3, #12]
   1cf38:	b908      	cbnz	r0, 1cf3e <slm_at_tcp_proxy_uninit+0xa>
		return do_tcp_client_disconnect(0);
   1cf3a:	f7ff b985 	b.w	1c248 <do_tcp_client_disconnect>
	}
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   1cf3e:	2801      	cmp	r0, #1
		return do_tcp_server_stop(0);
   1cf40:	f04f 0000 	mov.w	r0, #0
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   1cf44:	d101      	bne.n	1cf4a <slm_at_tcp_proxy_uninit+0x16>
		return do_tcp_server_stop(0);
   1cf46:	f7ff bb8d 	b.w	1c664 <do_tcp_server_stop>
	}

	return 0;
}
   1cf4a:	4770      	bx	lr
   1cf4c:	20023490 	.word	0x20023490

0001cf50 <udp_thread_func>:
}

static void udp_thread_func(void *p1, void *p2, void *p3)
{
	int ret;
	int size = sizeof(struct sockaddr_in);
   1cf50:	2308      	movs	r3, #8
{
   1cf52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cf56:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
   1cf5a:	4d36      	ldr	r5, [pc, #216]	; (1d034 <udp_thread_func+0xe4>)
	int size = sizeof(struct sockaddr_in);
   1cf5c:	9305      	str	r3, [sp, #20]
   1cf5e:	4b36      	ldr	r3, [pc, #216]	; (1d038 <udp_thread_func+0xe8>)
	ARG_UNUSED(p1);
	ARG_UNUSED(p2);
	ARG_UNUSED(p3);

	do {
		ret = recvfrom(udp_sock, data, NET_IPV4_MTU, 0,
   1cf60:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 1d054 <udp_thread_func+0x104>
   1cf64:	1aed      	subs	r5, r5, r3
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1cf66:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 1d058 <udp_thread_func+0x108>
			continue;
		}
		if (ret == 0) {
			continue;
		}
		if (udp_datamode) {
   1cf6a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1d05c <udp_thread_func+0x10c>
	int size = sizeof(struct sockaddr_in);
   1cf6e:	af05      	add	r7, sp, #20
   1cf70:	08ed      	lsrs	r5, r5, #3
		ret = recvfrom(udp_sock, data, NET_IPV4_MTU, 0,
   1cf72:	f8d8 0000 	ldr.w	r0, [r8]
   1cf76:	2300      	movs	r3, #0
   1cf78:	f44f 7210 	mov.w	r2, #576	; 0x240
   1cf7c:	e9cd 9700 	strd	r9, r7, [sp]
   1cf80:	a906      	add	r1, sp, #24
   1cf82:	f017 ff4e 	bl	34e22 <z_impl_zsock_recvfrom>
		if (ret < 0) {
   1cf86:	1e04      	subs	r4, r0, #0
   1cf88:	da0b      	bge.n	1cfa2 <udp_thread_func+0x52>
			LOG_WRN("recv() error: %d", -errno);
   1cf8a:	f018 f9c4 	bl	35316 <__errno>
   1cf8e:	01ac      	lsls	r4, r5, #6
   1cf90:	f044 0402 	orr.w	r4, r4, #2
   1cf94:	4622      	mov	r2, r4
   1cf96:	6801      	ldr	r1, [r0, #0]
   1cf98:	4828      	ldr	r0, [pc, #160]	; (1d03c <udp_thread_func+0xec>)
   1cf9a:	4249      	negs	r1, r1
					DATATYPE_HEXADECIMAL, ret);
				rsp_send(rsp_buf, strlen(rsp_buf));
				rsp_send(data_hex, ret);
				rsp_send("\r\n", 2);
			} else {
				LOG_WRN("hex convert error: %d", ret);
   1cf9c:	f017 fac3 	bl	34526 <log_1>
   1cfa0:	e7e7      	b.n	1cf72 <udp_thread_func+0x22>
		if (ret == 0) {
   1cfa2:	d0e6      	beq.n	1cf72 <udp_thread_func+0x22>
		if (udp_datamode) {
   1cfa4:	f89a 6000 	ldrb.w	r6, [sl]
   1cfa8:	b126      	cbz	r6, 1cfb4 <udp_thread_func+0x64>
			rsp_send(data, ret);
   1cfaa:	4621      	mov	r1, r4
   1cfac:	a806      	add	r0, sp, #24
		} else {
			sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
				DATATYPE_PLAINTEXT, ret);
			rsp_send(rsp_buf, strlen(rsp_buf));
			rsp_send(data, ret);
			rsp_send("\r\n", 2);
   1cfae:	f7fd f91b 	bl	1a1e8 <rsp_send>
   1cfb2:	e7de      	b.n	1cf72 <udp_thread_func+0x22>
		} else if (slm_util_hex_check(data, ret)) {
   1cfb4:	b2a1      	uxth	r1, r4
   1cfb6:	a806      	add	r0, sp, #24
   1cfb8:	9103      	str	r1, [sp, #12]
   1cfba:	f016 fd50 	bl	33a5e <slm_util_hex_check>
   1cfbe:	b328      	cbz	r0, 1d00c <udp_thread_func+0xbc>
			ret = slm_util_htoa(data, ret, data_hex,
   1cfc0:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1cfc4:	4a1e      	ldr	r2, [pc, #120]	; (1d040 <udp_thread_func+0xf0>)
   1cfc6:	9903      	ldr	r1, [sp, #12]
   1cfc8:	a806      	add	r0, sp, #24
   1cfca:	f7fc ffdd 	bl	19f88 <slm_util_htoa>
			if (ret > 0) {
   1cfce:	1e04      	subs	r4, r0, #0
   1cfd0:	dd16      	ble.n	1d000 <udp_thread_func+0xb0>
				sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
   1cfd2:	f640 228c 	movw	r2, #2700	; 0xa8c
   1cfd6:	4631      	mov	r1, r6
   1cfd8:	4b1a      	ldr	r3, [pc, #104]	; (1d044 <udp_thread_func+0xf4>)
   1cfda:	e9cd 6400 	strd	r6, r4, [sp]
   1cfde:	481a      	ldr	r0, [pc, #104]	; (1d048 <udp_thread_func+0xf8>)
   1cfe0:	f01a fb47 	bl	37672 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1cfe4:	4818      	ldr	r0, [pc, #96]	; (1d048 <udp_thread_func+0xf8>)
   1cfe6:	f7fc f843 	bl	19070 <strlen>
   1cfea:	4601      	mov	r1, r0
   1cfec:	4816      	ldr	r0, [pc, #88]	; (1d048 <udp_thread_func+0xf8>)
   1cfee:	f7fd f8fb 	bl	1a1e8 <rsp_send>
				rsp_send(data_hex, ret);
   1cff2:	4621      	mov	r1, r4
   1cff4:	4812      	ldr	r0, [pc, #72]	; (1d040 <udp_thread_func+0xf0>)
			rsp_send(data, ret);
   1cff6:	f7fd f8f7 	bl	1a1e8 <rsp_send>
			rsp_send("\r\n", 2);
   1cffa:	2102      	movs	r1, #2
   1cffc:	4813      	ldr	r0, [pc, #76]	; (1d04c <udp_thread_func+0xfc>)
   1cffe:	e7d6      	b.n	1cfae <udp_thread_func+0x5e>
				LOG_WRN("hex convert error: %d", ret);
   1d000:	01aa      	lsls	r2, r5, #6
   1d002:	4621      	mov	r1, r4
   1d004:	4812      	ldr	r0, [pc, #72]	; (1d050 <udp_thread_func+0x100>)
   1d006:	f042 0202 	orr.w	r2, r2, #2
   1d00a:	e7c7      	b.n	1cf9c <udp_thread_func+0x4c>
			sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
   1d00c:	2301      	movs	r3, #1
   1d00e:	4601      	mov	r1, r0
   1d010:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d014:	9300      	str	r3, [sp, #0]
   1d016:	480c      	ldr	r0, [pc, #48]	; (1d048 <udp_thread_func+0xf8>)
   1d018:	4b0a      	ldr	r3, [pc, #40]	; (1d044 <udp_thread_func+0xf4>)
   1d01a:	9401      	str	r4, [sp, #4]
   1d01c:	f01a fb29 	bl	37672 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1d020:	4809      	ldr	r0, [pc, #36]	; (1d048 <udp_thread_func+0xf8>)
   1d022:	f7fc f825 	bl	19070 <strlen>
   1d026:	4601      	mov	r1, r0
   1d028:	4807      	ldr	r0, [pc, #28]	; (1d048 <udp_thread_func+0xf8>)
   1d02a:	f7fd f8dd 	bl	1a1e8 <rsp_send>
			rsp_send(data, ret);
   1d02e:	4621      	mov	r1, r4
   1d030:	a806      	add	r0, sp, #24
   1d032:	e7e0      	b.n	1cff6 <udp_thread_func+0xa6>
   1d034:	0003840c 	.word	0x0003840c
   1d038:	0003831c 	.word	0x0003831c
   1d03c:	00039796 	.word	0x00039796
   1d040:	2002b4bc 	.word	0x2002b4bc
   1d044:	00039dbd 	.word	0x00039dbd
   1d048:	20028950 	.word	0x20028950
   1d04c:	0003c24e 	.word	0x0003c24e
   1d050:	00039726 	.word	0x00039726
   1d054:	200234b8 	.word	0x200234b8
   1d058:	200234b0 	.word	0x200234b0
   1d05c:	2002b93c 	.word	0x2002b93c

0001d060 <slm_at_udp_proxy_parse>:
}

/**@brief API to handle UDP Proxy AT commands
 */
int slm_at_udp_proxy_parse(const char *at_cmd, uint16_t length)
{
   1d060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d064:	460e      	mov	r6, r1
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
		if (slm_util_cmd_casecmp(at_cmd,
   1d066:	4931      	ldr	r1, [pc, #196]	; (1d12c <slm_at_udp_proxy_parse+0xcc>)
{
   1d068:	4605      	mov	r5, r0
		if (slm_util_cmd_casecmp(at_cmd,
   1d06a:	f7fc ff57 	bl	19f1c <slm_util_cmd_casecmp>
   1d06e:	bb00      	cbnz	r0, 1d0b2 <slm_at_udp_proxy_parse+0x52>
   1d070:	4628      	mov	r0, r5
   1d072:	492f      	ldr	r1, [pc, #188]	; (1d130 <slm_at_udp_proxy_parse+0xd0>)
   1d074:	f7fc ff52 	bl	19f1c <slm_util_cmd_casecmp>
   1d078:	b9e8      	cbnz	r0, 1d0b6 <slm_at_udp_proxy_parse+0x56>
   1d07a:	4628      	mov	r0, r5
   1d07c:	492d      	ldr	r1, [pc, #180]	; (1d134 <slm_at_udp_proxy_parse+0xd4>)
   1d07e:	f7fc ff4d 	bl	19f1c <slm_util_cmd_casecmp>
   1d082:	b328      	cbz	r0, 1d0d0 <slm_at_udp_proxy_parse+0x70>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   1d084:	2402      	movs	r4, #2
					udp_proxy_at_list[i].string)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
   1d086:	2100      	movs	r1, #0
   1d088:	4628      	mov	r0, r5
   1d08a:	4a2b      	ldr	r2, [pc, #172]	; (1d138 <slm_at_udp_proxy_parse+0xd8>)
   1d08c:	f019 fac3 	bl	36616 <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
   1d090:	4601      	mov	r1, r0
   1d092:	b190      	cbz	r0, 1d0ba <slm_at_udp_proxy_parse+0x5a>
   1d094:	4b29      	ldr	r3, [pc, #164]	; (1d13c <slm_at_udp_proxy_parse+0xdc>)
   1d096:	4a2a      	ldr	r2, [pc, #168]	; (1d140 <slm_at_udp_proxy_parse+0xe0>)
				LOG_ERR("Failed to parse AT command %d", ret);
   1d098:	482a      	ldr	r0, [pc, #168]	; (1d144 <slm_at_udp_proxy_parse+0xe4>)
   1d09a:	1ad2      	subs	r2, r2, r3
   1d09c:	08d2      	lsrs	r2, r2, #3
   1d09e:	0192      	lsls	r2, r2, #6
   1d0a0:	f042 0201 	orr.w	r2, r2, #1
   1d0a4:	f017 fa3f 	bl	34526 <log_1>
				return -EINVAL;
   1d0a8:	f06f 0015 	mvn.w	r0, #21
	if (ret == -ENOENT && udp_datamode) {
		ret = do_udp_send_datamode(at_cmd, length);
	}

	return ret;
}
   1d0ac:	b003      	add	sp, #12
   1d0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   1d0b2:	2400      	movs	r4, #0
   1d0b4:	e7e7      	b.n	1d086 <slm_at_udp_proxy_parse+0x26>
   1d0b6:	2401      	movs	r4, #1
   1d0b8:	e7e5      	b.n	1d086 <slm_at_udp_proxy_parse+0x26>
			type = at_parser_cmd_type_get(at_cmd);
   1d0ba:	4628      	mov	r0, r5
   1d0bc:	f019 faae 	bl	3661c <at_parser_cmd_type_get>
			ret = udp_proxy_at_list[i].handler(type);
   1d0c0:	220c      	movs	r2, #12
   1d0c2:	4b21      	ldr	r3, [pc, #132]	; (1d148 <slm_at_udp_proxy_parse+0xe8>)
   1d0c4:	fb02 3404 	mla	r4, r2, r4, r3
   1d0c8:	68a3      	ldr	r3, [r4, #8]
   1d0ca:	4798      	blx	r3
	if (ret == -ENOENT && udp_datamode) {
   1d0cc:	1c83      	adds	r3, r0, #2
   1d0ce:	d1ed      	bne.n	1d0ac <slm_at_udp_proxy_parse+0x4c>
   1d0d0:	4b1e      	ldr	r3, [pc, #120]	; (1d14c <slm_at_udp_proxy_parse+0xec>)
   1d0d2:	781b      	ldrb	r3, [r3, #0]
   1d0d4:	bb13      	cbnz	r3, 1d11c <slm_at_udp_proxy_parse+0xbc>
   1d0d6:	f06f 0001 	mvn.w	r0, #1
   1d0da:	e7e7      	b.n	1d0ac <slm_at_udp_proxy_parse+0x4c>
		offset += ret;
   1d0dc:	4404      	add	r4, r0
	while (offset < datalen) {
   1d0de:	42b4      	cmp	r4, r6
   1d0e0:	d21a      	bcs.n	1d118 <slm_at_udp_proxy_parse+0xb8>
		ret = sendto(udp_sock, data + offset, datalen - offset, 0,
   1d0e2:	6838      	ldr	r0, [r7, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1d0e4:	2300      	movs	r3, #0
   1d0e6:	e9cd 9800 	strd	r9, r8, [sp]
   1d0ea:	1b32      	subs	r2, r6, r4
   1d0ec:	1929      	adds	r1, r5, r4
   1d0ee:	f017 fe7b 	bl	34de8 <z_impl_zsock_sendto>
		if (ret < 0) {
   1d0f2:	2800      	cmp	r0, #0
   1d0f4:	daf2      	bge.n	1d0dc <slm_at_udp_proxy_parse+0x7c>
   1d0f6:	4a11      	ldr	r2, [pc, #68]	; (1d13c <slm_at_udp_proxy_parse+0xdc>)
   1d0f8:	4d11      	ldr	r5, [pc, #68]	; (1d140 <slm_at_udp_proxy_parse+0xe0>)
   1d0fa:	1aad      	subs	r5, r5, r2
			LOG_ERR("send() failed: %d", -errno);
   1d0fc:	f018 f90b 	bl	35316 <__errno>
   1d100:	08ed      	lsrs	r5, r5, #3
   1d102:	6801      	ldr	r1, [r0, #0]
   1d104:	01ad      	lsls	r5, r5, #6
   1d106:	f045 0501 	orr.w	r5, r5, #1
   1d10a:	462a      	mov	r2, r5
   1d10c:	4810      	ldr	r0, [pc, #64]	; (1d150 <slm_at_udp_proxy_parse+0xf0>)
   1d10e:	4249      	negs	r1, r1
   1d110:	f017 fa09 	bl	34526 <log_1>
			ret = -errno;
   1d114:	f018 f8ff 	bl	35316 <__errno>
	return offset;
   1d118:	4620      	mov	r0, r4
   1d11a:	e7c7      	b.n	1d0ac <slm_at_udp_proxy_parse+0x4c>
	uint32_t offset = 0;
   1d11c:	2400      	movs	r4, #0
   1d11e:	f04f 0808 	mov.w	r8, #8
		ret = sendto(udp_sock, data + offset, datalen - offset, 0,
   1d122:	4f0c      	ldr	r7, [pc, #48]	; (1d154 <slm_at_udp_proxy_parse+0xf4>)
   1d124:	f8df 9030 	ldr.w	r9, [pc, #48]	; 1d158 <slm_at_udp_proxy_parse+0xf8>
   1d128:	e7d9      	b.n	1d0de <slm_at_udp_proxy_parse+0x7e>
   1d12a:	bf00      	nop
   1d12c:	00039dd1 	.word	0x00039dd1
   1d130:	00039ddc 	.word	0x00039ddc
   1d134:	00039de7 	.word	0x00039de7
   1d138:	20023430 	.word	0x20023430
   1d13c:	0003831c 	.word	0x0003831c
   1d140:	0003840c 	.word	0x0003840c
   1d144:	000393de 	.word	0x000393de
   1d148:	0003863c 	.word	0x0003863c
   1d14c:	2002b93c 	.word	0x2002b93c
   1d150:	000397da 	.word	0x000397da
   1d154:	200234b8 	.word	0x200234b8
   1d158:	200234b0 	.word	0x200234b0

0001d15c <slm_at_udp_proxy_clac>:

/**@brief API to list UDP Proxy AT commands
 */
void slm_at_udp_proxy_clac(void)
{
   1d15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   1d15e:	2400      	movs	r4, #0
   1d160:	4d0c      	ldr	r5, [pc, #48]	; (1d194 <slm_at_udp_proxy_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", udp_proxy_at_list[i].string);
   1d162:	4f0d      	ldr	r7, [pc, #52]	; (1d198 <slm_at_udp_proxy_clac+0x3c>)
   1d164:	4e0d      	ldr	r6, [pc, #52]	; (1d19c <slm_at_udp_proxy_clac+0x40>)
   1d166:	686b      	ldr	r3, [r5, #4]
   1d168:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d16c:	2100      	movs	r1, #0
   1d16e:	9300      	str	r3, [sp, #0]
   1d170:	4630      	mov	r0, r6
   1d172:	463b      	mov	r3, r7
   1d174:	f01a fa7d 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1d178:	4630      	mov	r0, r6
   1d17a:	f7fb ff79 	bl	19070 <strlen>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   1d17e:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
   1d180:	4601      	mov	r1, r0
   1d182:	4630      	mov	r0, r6
   1d184:	f7fd f830 	bl	1a1e8 <rsp_send>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   1d188:	2c03      	cmp	r4, #3
   1d18a:	f105 050c 	add.w	r5, r5, #12
   1d18e:	d1ea      	bne.n	1d166 <slm_at_udp_proxy_clac+0xa>
	}
}
   1d190:	b003      	add	sp, #12
   1d192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d194:	0003863c 	.word	0x0003863c
   1d198:	000395d7 	.word	0x000395d7
   1d19c:	20028950 	.word	0x20028950

0001d1a0 <slm_at_udp_proxy_init>:

/**@brief API to initialize UDP Proxy AT commands handler
 */
int slm_at_udp_proxy_init(void)
{
	udp_sock = INVALID_SOCKET;
   1d1a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	udp_datamode = false;
   1d1a4:	2000      	movs	r0, #0
	udp_sock = INVALID_SOCKET;
   1d1a6:	4b04      	ldr	r3, [pc, #16]	; (1d1b8 <slm_at_udp_proxy_init+0x18>)
   1d1a8:	601a      	str	r2, [r3, #0]
	udp_datamode = false;
   1d1aa:	4b04      	ldr	r3, [pc, #16]	; (1d1bc <slm_at_udp_proxy_init+0x1c>)
	remote.sin_family = AF_UNSPEC;
   1d1ac:	4a04      	ldr	r2, [pc, #16]	; (1d1c0 <slm_at_udp_proxy_init+0x20>)
	udp_datamode = false;
   1d1ae:	7018      	strb	r0, [r3, #0]
	remote.sin_family = AF_UNSPEC;
   1d1b0:	4b04      	ldr	r3, [pc, #16]	; (1d1c4 <slm_at_udp_proxy_init+0x24>)
   1d1b2:	601a      	str	r2, [r3, #0]
	remote.sin_port = INVALID_PORT;

	return 0;
}
   1d1b4:	4770      	bx	lr
   1d1b6:	bf00      	nop
   1d1b8:	200234b8 	.word	0x200234b8
   1d1bc:	2002b93c 	.word	0x2002b93c
   1d1c0:	ffff0000 	.word	0xffff0000
   1d1c4:	200234b0 	.word	0x200234b0

0001d1c8 <do_udp_server_stop.part.0>:
		k_thread_abort(udp_thread_id);
   1d1c8:	4b1c      	ldr	r3, [pc, #112]	; (1d23c <do_udp_server_stop.part.0+0x74>)
static int do_udp_server_stop(int error)
   1d1ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d1cc:	4605      	mov	r5, r0
		k_thread_abort(udp_thread_id);
   1d1ce:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   1d1d0:	f005 f940 	bl	22454 <z_impl_k_thread_abort>
		ret = close(udp_sock);
   1d1d4:	4b1a      	ldr	r3, [pc, #104]	; (1d240 <do_udp_server_stop.part.0+0x78>)
   1d1d6:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_close(sock);
   1d1d8:	f017 fd99 	bl	34d0e <z_impl_zsock_close>
		if (ret < 0) {
   1d1dc:	1e04      	subs	r4, r0, #0
   1d1de:	da12      	bge.n	1d206 <do_udp_server_stop.part.0+0x3e>
   1d1e0:	4a18      	ldr	r2, [pc, #96]	; (1d244 <do_udp_server_stop.part.0+0x7c>)
   1d1e2:	4c19      	ldr	r4, [pc, #100]	; (1d248 <do_udp_server_stop.part.0+0x80>)
   1d1e4:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   1d1e6:	f018 f896 	bl	35316 <__errno>
   1d1ea:	08e4      	lsrs	r4, r4, #3
   1d1ec:	6801      	ldr	r1, [r0, #0]
   1d1ee:	01a4      	lsls	r4, r4, #6
   1d1f0:	f044 0402 	orr.w	r4, r4, #2
   1d1f4:	4622      	mov	r2, r4
   1d1f6:	4815      	ldr	r0, [pc, #84]	; (1d24c <do_udp_server_stop.part.0+0x84>)
   1d1f8:	4249      	negs	r1, r1
   1d1fa:	f017 f994 	bl	34526 <log_1>
			ret = -errno;
   1d1fe:	f018 f88a 	bl	35316 <__errno>
   1d202:	6804      	ldr	r4, [r0, #0]
   1d204:	4264      	negs	r4, r4
		(void)slm_at_udp_proxy_init();
   1d206:	f7ff ffcb 	bl	1d1a0 <slm_at_udp_proxy_init>
		if (error) {
   1d20a:	b18d      	cbz	r5, 1d230 <do_udp_server_stop.part.0+0x68>
			sprintf(rsp_buf, "#XUDPSVR: %d stopped\r\n", error);
   1d20c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d210:	2100      	movs	r1, #0
   1d212:	4b0f      	ldr	r3, [pc, #60]	; (1d250 <do_udp_server_stop.part.0+0x88>)
   1d214:	480f      	ldr	r0, [pc, #60]	; (1d254 <do_udp_server_stop.part.0+0x8c>)
   1d216:	9500      	str	r5, [sp, #0]
   1d218:	f01a fa2b 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1d21c:	480d      	ldr	r0, [pc, #52]	; (1d254 <do_udp_server_stop.part.0+0x8c>)
   1d21e:	f7fb ff27 	bl	19070 <strlen>
   1d222:	4601      	mov	r1, r0
   1d224:	480b      	ldr	r0, [pc, #44]	; (1d254 <do_udp_server_stop.part.0+0x8c>)
   1d226:	f7fc ffdf 	bl	1a1e8 <rsp_send>
}
   1d22a:	4620      	mov	r0, r4
   1d22c:	b003      	add	sp, #12
   1d22e:	bd30      	pop	{r4, r5, pc}
			sprintf(rsp_buf, "#XUDPSVR: stopped\r\n");
   1d230:	4909      	ldr	r1, [pc, #36]	; (1d258 <do_udp_server_stop.part.0+0x90>)
   1d232:	4808      	ldr	r0, [pc, #32]	; (1d254 <do_udp_server_stop.part.0+0x8c>)
   1d234:	f01a fa44 	bl	376c0 <strcpy>
   1d238:	e7f0      	b.n	1d21c <do_udp_server_stop.part.0+0x54>
   1d23a:	bf00      	nop
   1d23c:	200234bc 	.word	0x200234bc
   1d240:	200234b8 	.word	0x200234b8
   1d244:	0003831c 	.word	0x0003831c
   1d248:	0003840c 	.word	0x0003840c
   1d24c:	000396c1 	.word	0x000396c1
   1d250:	00039df3 	.word	0x00039df3
   1d254:	20028950 	.word	0x20028950
   1d258:	00039e0a 	.word	0x00039e0a

0001d25c <handle_at_udp_server>:
{
   1d25c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d25e:	4606      	mov	r6, r0
   1d260:	b08d      	sub	sp, #52	; 0x34
	int param_count = at_params_valid_count_get(&at_param_list);
   1d262:	48b5      	ldr	r0, [pc, #724]	; (1d538 <handle_at_udp_server+0x2dc>)
   1d264:	f019 fb1f 	bl	368a6 <at_params_valid_count_get>
	switch (cmd_type) {
   1d268:	2e02      	cmp	r6, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   1d26a:	4605      	mov	r5, r0
	switch (cmd_type) {
   1d26c:	f000 812e 	beq.w	1d4cc <handle_at_udp_server+0x270>
   1d270:	2e03      	cmp	r6, #3
   1d272:	f000 814c 	beq.w	1d50e <handle_at_udp_server+0x2b2>
   1d276:	2e01      	cmp	r6, #1
   1d278:	f040 8096 	bne.w	1d3a8 <handle_at_udp_server+0x14c>
		if (param_count < 2) {
   1d27c:	2801      	cmp	r0, #1
   1d27e:	f340 8093 	ble.w	1d3a8 <handle_at_udp_server+0x14c>
		err = at_params_short_get(&at_param_list, 1, &op);
   1d282:	4631      	mov	r1, r6
   1d284:	48ac      	ldr	r0, [pc, #688]	; (1d538 <handle_at_udp_server+0x2dc>)
   1d286:	aa09      	add	r2, sp, #36	; 0x24
   1d288:	f019 fac5 	bl	36816 <at_params_short_get>
		if (err) {
   1d28c:	4604      	mov	r4, r0
   1d28e:	2800      	cmp	r0, #0
   1d290:	d176      	bne.n	1d380 <handle_at_udp_server+0x124>
		if (op == AT_SERVER_START ||
   1d292:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1d296:	1e5a      	subs	r2, r3, #1
   1d298:	2a01      	cmp	r2, #1
   1d29a:	f200 8101 	bhi.w	1d4a0 <handle_at_udp_server+0x244>
			if (param_count < 3) {
   1d29e:	2d02      	cmp	r5, #2
   1d2a0:	f000 8082 	beq.w	1d3a8 <handle_at_udp_server+0x14c>
			err = at_params_short_get(&at_param_list, 2, &port);
   1d2a4:	2102      	movs	r1, #2
   1d2a6:	48a4      	ldr	r0, [pc, #656]	; (1d538 <handle_at_udp_server+0x2dc>)
   1d2a8:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   1d2ac:	f019 fab3 	bl	36816 <at_params_short_get>
			if (err) {
   1d2b0:	4604      	mov	r4, r0
   1d2b2:	2800      	cmp	r0, #0
   1d2b4:	d164      	bne.n	1d380 <handle_at_udp_server+0x124>
			if (udp_sock > 0) {
   1d2b6:	4da1      	ldr	r5, [pc, #644]	; (1d53c <handle_at_udp_server+0x2e0>)
   1d2b8:	682b      	ldr	r3, [r5, #0]
   1d2ba:	2b00      	cmp	r3, #0
   1d2bc:	dd0a      	ble.n	1d2d4 <handle_at_udp_server+0x78>
   1d2be:	49a0      	ldr	r1, [pc, #640]	; (1d540 <handle_at_udp_server+0x2e4>)
   1d2c0:	4ba0      	ldr	r3, [pc, #640]	; (1d544 <handle_at_udp_server+0x2e8>)
				LOG_WRN("Server is running");
   1d2c2:	48a1      	ldr	r0, [pc, #644]	; (1d548 <handle_at_udp_server+0x2ec>)
   1d2c4:	1ac9      	subs	r1, r1, r3
   1d2c6:	08c9      	lsrs	r1, r1, #3
   1d2c8:	0189      	lsls	r1, r1, #6
   1d2ca:	f041 0102 	orr.w	r1, r1, #2
				LOG_WRN("Server is not running");
   1d2ce:	f017 f91b 	bl	34508 <log_0>
				return -EINVAL;
   1d2d2:	e069      	b.n	1d3a8 <handle_at_udp_server+0x14c>
			err = do_udp_server_start(port);
   1d2d4:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26
	return z_impl_zsock_socket(family, type, proto);
   1d2d8:	2211      	movs	r2, #17
   1d2da:	2102      	movs	r1, #2
   1d2dc:	4630      	mov	r0, r6
   1d2de:	f003 fd6b 	bl	20db8 <z_impl_zsock_socket>
	if (udp_sock < 0) {
   1d2e2:	2800      	cmp	r0, #0
	udp_sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   1d2e4:	6028      	str	r0, [r5, #0]
	if (udp_sock < 0) {
   1d2e6:	da30      	bge.n	1d34a <handle_at_udp_server+0xee>
   1d2e8:	4a96      	ldr	r2, [pc, #600]	; (1d544 <handle_at_udp_server+0x2e8>)
   1d2ea:	4d95      	ldr	r5, [pc, #596]	; (1d540 <handle_at_udp_server+0x2e4>)
   1d2ec:	1aad      	subs	r5, r5, r2
		LOG_ERR("socket() failed: %d", -errno);
   1d2ee:	f018 f812 	bl	35316 <__errno>
   1d2f2:	08ed      	lsrs	r5, r5, #3
   1d2f4:	6801      	ldr	r1, [r0, #0]
   1d2f6:	01ad      	lsls	r5, r5, #6
   1d2f8:	f045 0501 	orr.w	r5, r5, #1
   1d2fc:	462a      	mov	r2, r5
   1d2fe:	4249      	negs	r1, r1
   1d300:	4892      	ldr	r0, [pc, #584]	; (1d54c <handle_at_udp_server+0x2f0>)
   1d302:	f017 f910 	bl	34526 <log_1>
		sprintf(rsp_buf, "#XUDPSVR: %d\r\n", -errno);
   1d306:	f018 f806 	bl	35316 <__errno>
   1d30a:	6803      	ldr	r3, [r0, #0]
   1d30c:	2100      	movs	r1, #0
   1d30e:	425b      	negs	r3, r3
   1d310:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d314:	9300      	str	r3, [sp, #0]
   1d316:	488e      	ldr	r0, [pc, #568]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d318:	4b8e      	ldr	r3, [pc, #568]	; (1d554 <handle_at_udp_server+0x2f8>)
   1d31a:	f01a f9aa 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1d31e:	488c      	ldr	r0, [pc, #560]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d320:	f7fb fea6 	bl	19070 <strlen>
   1d324:	4601      	mov	r1, r0
   1d326:	488a      	ldr	r0, [pc, #552]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d328:	f7fc ff5e 	bl	1a1e8 <rsp_send>
		return -errno;
   1d32c:	f017 fff3 	bl	35316 <__errno>
   1d330:	6803      	ldr	r3, [r0, #0]
   1d332:	425b      	negs	r3, r3
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   1d334:	2b00      	cmp	r3, #0
   1d336:	f040 80b1 	bne.w	1d49c <handle_at_udp_server+0x240>
   1d33a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1d33e:	2b02      	cmp	r3, #2
   1d340:	d11e      	bne.n	1d380 <handle_at_udp_server+0x124>
				udp_datamode = true;
   1d342:	2201      	movs	r2, #1
   1d344:	4b84      	ldr	r3, [pc, #528]	; (1d558 <handle_at_udp_server+0x2fc>)
   1d346:	701a      	strb	r2, [r3, #0]
   1d348:	e01a      	b.n	1d380 <handle_at_udp_server+0x124>
	local.sin_family = AF_INET;
   1d34a:	2601      	movs	r6, #1
	local.sin_port = htons(port);
   1d34c:	023b      	lsls	r3, r7, #8
   1d34e:	ea43 2317 	orr.w	r3, r3, r7, lsr #8
	ret = modem_info_params_get(&modem_param);
   1d352:	4882      	ldr	r0, [pc, #520]	; (1d55c <handle_at_udp_server+0x300>)
	local.sin_family = AF_INET;
   1d354:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
	local.sin_port = htons(port);
   1d358:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	ret = modem_info_params_get(&modem_param);
   1d35c:	f009 fef6 	bl	2714c <modem_info_params_get>
	if (ret) {
   1d360:	4607      	mov	r7, r0
   1d362:	b180      	cbz	r0, 1d386 <handle_at_udp_server+0x12a>
   1d364:	4b77      	ldr	r3, [pc, #476]	; (1d544 <handle_at_udp_server+0x2e8>)
   1d366:	4a76      	ldr	r2, [pc, #472]	; (1d540 <handle_at_udp_server+0x2e4>)
		LOG_ERR("Unable to obtain modem parameters (%d)", ret);
   1d368:	4601      	mov	r1, r0
   1d36a:	1ad2      	subs	r2, r2, r3
   1d36c:	08d2      	lsrs	r2, r2, #3
   1d36e:	0192      	lsls	r2, r2, #6
   1d370:	487b      	ldr	r0, [pc, #492]	; (1d560 <handle_at_udp_server+0x304>)
   1d372:	4332      	orrs	r2, r6
   1d374:	f017 f8d7 	bl	34526 <log_1>
		close(udp_sock);
   1d378:	6828      	ldr	r0, [r5, #0]
   1d37a:	f016 fbdd 	bl	33b38 <close>
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   1d37e:	463c      	mov	r4, r7
}
   1d380:	4620      	mov	r0, r4
   1d382:	b00d      	add	sp, #52	; 0x34
   1d384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	addr_len = strlen(modem_param.network.ip_address.value_string);
   1d386:	4877      	ldr	r0, [pc, #476]	; (1d564 <handle_at_udp_server+0x308>)
   1d388:	f7fb fe72 	bl	19070 <strlen>
	if (addr_len == 0) {
   1d38c:	b978      	cbnz	r0, 1d3ae <handle_at_udp_server+0x152>
   1d38e:	496c      	ldr	r1, [pc, #432]	; (1d540 <handle_at_udp_server+0x2e4>)
   1d390:	4b6c      	ldr	r3, [pc, #432]	; (1d544 <handle_at_udp_server+0x2e8>)
		LOG_ERR("LTE not connected yet");
   1d392:	4875      	ldr	r0, [pc, #468]	; (1d568 <handle_at_udp_server+0x30c>)
   1d394:	1ac9      	subs	r1, r1, r3
   1d396:	08c9      	lsrs	r1, r1, #3
   1d398:	0189      	lsls	r1, r1, #6
   1d39a:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid local address");
   1d39e:	f017 f8b3 	bl	34508 <log_0>
		close(udp_sock);
   1d3a2:	6828      	ldr	r0, [r5, #0]
   1d3a4:	f016 fbc8 	bl	33b38 <close>
			return -EINVAL;
   1d3a8:	f06f 0415 	mvn.w	r4, #21
   1d3ac:	e7e8      	b.n	1d380 <handle_at_udp_server+0x124>
	if (!check_for_ipv4(modem_param.network.ip_address.value_string,
   1d3ae:	b2c1      	uxtb	r1, r0
   1d3b0:	486c      	ldr	r0, [pc, #432]	; (1d564 <handle_at_udp_server+0x308>)
   1d3b2:	f016 fb8b 	bl	33acc <check_for_ipv4>
   1d3b6:	b940      	cbnz	r0, 1d3ca <handle_at_udp_server+0x16e>
   1d3b8:	4961      	ldr	r1, [pc, #388]	; (1d540 <handle_at_udp_server+0x2e4>)
   1d3ba:	4b62      	ldr	r3, [pc, #392]	; (1d544 <handle_at_udp_server+0x2e8>)
		LOG_ERR("Invalid local address");
   1d3bc:	486b      	ldr	r0, [pc, #428]	; (1d56c <handle_at_udp_server+0x310>)
   1d3be:	1ac9      	subs	r1, r1, r3
   1d3c0:	08c9      	lsrs	r1, r1, #3
   1d3c2:	0189      	lsls	r1, r1, #6
   1d3c4:	f041 0101 	orr.w	r1, r1, #1
   1d3c8:	e7e9      	b.n	1d39e <handle_at_udp_server+0x142>
	return z_impl_zsock_inet_pton(family, src, dst);
   1d3ca:	4966      	ldr	r1, [pc, #408]	; (1d564 <handle_at_udp_server+0x308>)
   1d3cc:	4630      	mov	r0, r6
   1d3ce:	aa0b      	add	r2, sp, #44	; 0x2c
   1d3d0:	f017 fd44 	bl	34e5c <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, modem_param.network.ip_address.value_string,
   1d3d4:	2801      	cmp	r0, #1
   1d3d6:	d00f      	beq.n	1d3f8 <handle_at_udp_server+0x19c>
   1d3d8:	4a5a      	ldr	r2, [pc, #360]	; (1d544 <handle_at_udp_server+0x2e8>)
   1d3da:	4c59      	ldr	r4, [pc, #356]	; (1d540 <handle_at_udp_server+0x2e4>)
   1d3dc:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Parse local IP address failed: %d", -errno);
   1d3de:	f017 ff9a 	bl	35316 <__errno>
   1d3e2:	08e4      	lsrs	r4, r4, #3
   1d3e4:	6801      	ldr	r1, [r0, #0]
   1d3e6:	01a4      	lsls	r4, r4, #6
   1d3e8:	f044 0401 	orr.w	r4, r4, #1
   1d3ec:	4622      	mov	r2, r4
   1d3ee:	4860      	ldr	r0, [pc, #384]	; (1d570 <handle_at_udp_server+0x314>)
   1d3f0:	4249      	negs	r1, r1
   1d3f2:	f017 f898 	bl	34526 <log_1>
		close(udp_sock);
   1d3f6:	e7d4      	b.n	1d3a2 <handle_at_udp_server+0x146>
	ret = bind(udp_sock, (struct sockaddr *)&local,
   1d3f8:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_bind(sock, addr, addrlen);
   1d3fa:	2208      	movs	r2, #8
   1d3fc:	a90a      	add	r1, sp, #40	; 0x28
   1d3fe:	f017 fc9d 	bl	34d3c <z_impl_zsock_bind>
	if (ret) {
   1d402:	4606      	mov	r6, r0
   1d404:	b328      	cbz	r0, 1d452 <handle_at_udp_server+0x1f6>
   1d406:	4a4f      	ldr	r2, [pc, #316]	; (1d544 <handle_at_udp_server+0x2e8>)
   1d408:	4e4d      	ldr	r6, [pc, #308]	; (1d540 <handle_at_udp_server+0x2e4>)
   1d40a:	1ab6      	subs	r6, r6, r2
		LOG_ERR("bind() failed: %d", -errno);
   1d40c:	f017 ff83 	bl	35316 <__errno>
   1d410:	08f6      	lsrs	r6, r6, #3
   1d412:	6801      	ldr	r1, [r0, #0]
   1d414:	01b6      	lsls	r6, r6, #6
   1d416:	f046 0601 	orr.w	r6, r6, #1
   1d41a:	4632      	mov	r2, r6
   1d41c:	4249      	negs	r1, r1
   1d41e:	4855      	ldr	r0, [pc, #340]	; (1d574 <handle_at_udp_server+0x318>)
   1d420:	f017 f881 	bl	34526 <log_1>
		sprintf(rsp_buf, "#XUDPSVR: %d\r\n", -errno);
   1d424:	f017 ff77 	bl	35316 <__errno>
   1d428:	6803      	ldr	r3, [r0, #0]
   1d42a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d42e:	425b      	negs	r3, r3
   1d430:	4639      	mov	r1, r7
   1d432:	9300      	str	r3, [sp, #0]
   1d434:	4846      	ldr	r0, [pc, #280]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d436:	4b47      	ldr	r3, [pc, #284]	; (1d554 <handle_at_udp_server+0x2f8>)
   1d438:	f01a f91b 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1d43c:	4844      	ldr	r0, [pc, #272]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d43e:	f7fb fe17 	bl	19070 <strlen>
   1d442:	4601      	mov	r1, r0
   1d444:	4842      	ldr	r0, [pc, #264]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d446:	f7fc fecf 	bl	1a1e8 <rsp_send>
		close(udp_sock);
   1d44a:	6828      	ldr	r0, [r5, #0]
   1d44c:	f016 fb74 	bl	33b38 <close>
   1d450:	e76c      	b.n	1d32c <handle_at_udp_server+0xd0>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d452:	2200      	movs	r2, #0
   1d454:	2300      	movs	r3, #0
   1d456:	2004      	movs	r0, #4
   1d458:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1d45c:	230e      	movs	r3, #14
   1d45e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
   1d462:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1d466:	e9cd 6601 	strd	r6, r6, [sp, #4]
   1d46a:	4b43      	ldr	r3, [pc, #268]	; (1d578 <handle_at_udp_server+0x31c>)
   1d46c:	4943      	ldr	r1, [pc, #268]	; (1d57c <handle_at_udp_server+0x320>)
   1d46e:	9600      	str	r6, [sp, #0]
   1d470:	4843      	ldr	r0, [pc, #268]	; (1d580 <handle_at_udp_server+0x324>)
   1d472:	f015 f817 	bl	324a4 <z_impl_k_thread_create>
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   1d476:	4b43      	ldr	r3, [pc, #268]	; (1d584 <handle_at_udp_server+0x328>)
	sprintf(rsp_buf, "#XUDPSVR: %d started\r\n", udp_sock);
   1d478:	4631      	mov	r1, r6
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   1d47a:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XUDPSVR: %d started\r\n", udp_sock);
   1d47c:	682b      	ldr	r3, [r5, #0]
   1d47e:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d482:	9300      	str	r3, [sp, #0]
   1d484:	4832      	ldr	r0, [pc, #200]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d486:	4b40      	ldr	r3, [pc, #256]	; (1d588 <handle_at_udp_server+0x32c>)
   1d488:	f01a f8f3 	bl	37672 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1d48c:	4830      	ldr	r0, [pc, #192]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d48e:	f7fb fdef 	bl	19070 <strlen>
   1d492:	4601      	mov	r1, r0
   1d494:	482e      	ldr	r0, [pc, #184]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d496:	f7fc fea7 	bl	1a1e8 <rsp_send>
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   1d49a:	e74e      	b.n	1d33a <handle_at_udp_server+0xde>
   1d49c:	461c      	mov	r4, r3
   1d49e:	e76f      	b.n	1d380 <handle_at_udp_server+0x124>
		} else if (op == AT_SERVER_STOP) {
   1d4a0:	2b00      	cmp	r3, #0
   1d4a2:	f47f af6d 	bne.w	1d380 <handle_at_udp_server+0x124>
			if (udp_sock < 0) {
   1d4a6:	4b25      	ldr	r3, [pc, #148]	; (1d53c <handle_at_udp_server+0x2e0>)
   1d4a8:	681c      	ldr	r4, [r3, #0]
   1d4aa:	2c00      	cmp	r4, #0
   1d4ac:	da08      	bge.n	1d4c0 <handle_at_udp_server+0x264>
   1d4ae:	4924      	ldr	r1, [pc, #144]	; (1d540 <handle_at_udp_server+0x2e4>)
   1d4b0:	4b24      	ldr	r3, [pc, #144]	; (1d544 <handle_at_udp_server+0x2e8>)
				LOG_WRN("Server is not running");
   1d4b2:	4836      	ldr	r0, [pc, #216]	; (1d58c <handle_at_udp_server+0x330>)
   1d4b4:	1ac9      	subs	r1, r1, r3
   1d4b6:	08c9      	lsrs	r1, r1, #3
   1d4b8:	0189      	lsls	r1, r1, #6
   1d4ba:	f041 0102 	orr.w	r1, r1, #2
   1d4be:	e706      	b.n	1d2ce <handle_at_udp_server+0x72>
	if (udp_sock > 0) {
   1d4c0:	f43f af5e 	beq.w	1d380 <handle_at_udp_server+0x124>
   1d4c4:	f7ff fe80 	bl	1d1c8 <do_udp_server_stop.part.0>
   1d4c8:	4604      	mov	r4, r0
   1d4ca:	e759      	b.n	1d380 <handle_at_udp_server+0x124>
		if (udp_sock != INVALID_SOCKET) {
   1d4cc:	4b1b      	ldr	r3, [pc, #108]	; (1d53c <handle_at_udp_server+0x2e0>)
   1d4ce:	681b      	ldr	r3, [r3, #0]
   1d4d0:	1c59      	adds	r1, r3, #1
   1d4d2:	d013      	beq.n	1d4fc <handle_at_udp_server+0x2a0>
			sprintf(rsp_buf, "#XUDPSVR: %d, %d\r\n",
   1d4d4:	4a20      	ldr	r2, [pc, #128]	; (1d558 <handle_at_udp_server+0x2fc>)
   1d4d6:	2100      	movs	r1, #0
   1d4d8:	7812      	ldrb	r2, [r2, #0]
   1d4da:	481d      	ldr	r0, [pc, #116]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d4dc:	e9cd 3200 	strd	r3, r2, [sp]
   1d4e0:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d4e4:	4b2a      	ldr	r3, [pc, #168]	; (1d590 <handle_at_udp_server+0x334>)
   1d4e6:	f01a f8c4 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1d4ea:	4819      	ldr	r0, [pc, #100]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d4ec:	f7fb fdc0 	bl	19070 <strlen>
   1d4f0:	4601      	mov	r1, r0
   1d4f2:	4817      	ldr	r0, [pc, #92]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d4f4:	f7fc fe78 	bl	1a1e8 <rsp_send>
		err = 0;
   1d4f8:	2400      	movs	r4, #0
		break;
   1d4fa:	e741      	b.n	1d380 <handle_at_udp_server+0x124>
			sprintf(rsp_buf, "#XUDPSVR: %d\r\n",
   1d4fc:	9300      	str	r3, [sp, #0]
   1d4fe:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d502:	2100      	movs	r1, #0
   1d504:	4b13      	ldr	r3, [pc, #76]	; (1d554 <handle_at_udp_server+0x2f8>)
   1d506:	4812      	ldr	r0, [pc, #72]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d508:	f01a f8b3 	bl	37672 <__sprintf_chk>
   1d50c:	e7ed      	b.n	1d4ea <handle_at_udp_server+0x28e>
		sprintf(rsp_buf, "#XUDPSVR: (%d, %d, %d),<port>,<sec_tag>\r\n",
   1d50e:	2400      	movs	r4, #0
   1d510:	2301      	movs	r3, #1
   1d512:	2202      	movs	r2, #2
   1d514:	4621      	mov	r1, r4
   1d516:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1d51a:	9400      	str	r4, [sp, #0]
   1d51c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d520:	4b1c      	ldr	r3, [pc, #112]	; (1d594 <handle_at_udp_server+0x338>)
   1d522:	480b      	ldr	r0, [pc, #44]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d524:	f01a f8a5 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1d528:	4809      	ldr	r0, [pc, #36]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d52a:	f7fb fda1 	bl	19070 <strlen>
   1d52e:	4601      	mov	r1, r0
   1d530:	4807      	ldr	r0, [pc, #28]	; (1d550 <handle_at_udp_server+0x2f4>)
   1d532:	f7fc fe59 	bl	1a1e8 <rsp_send>
		break;
   1d536:	e723      	b.n	1d380 <handle_at_udp_server+0x124>
   1d538:	20023430 	.word	0x20023430
   1d53c:	200234b8 	.word	0x200234b8
   1d540:	0003840c 	.word	0x0003840c
   1d544:	0003831c 	.word	0x0003831c
   1d548:	00039e1e 	.word	0x00039e1e
   1d54c:	000399b0 	.word	0x000399b0
   1d550:	20028950 	.word	0x20028950
   1d554:	00039e30 	.word	0x00039e30
   1d558:	2002b93c 	.word	0x2002b93c
   1d55c:	20020900 	.word	0x20020900
   1d560:	000398f3 	.word	0x000398f3
   1d564:	20020c12 	.word	0x20020c12
   1d568:	0003991a 	.word	0x0003991a
   1d56c:	00039930 	.word	0x00039930
   1d570:	00039946 	.word	0x00039946
   1d574:	00039968 	.word	0x00039968
   1d578:	0001cf51 	.word	0x0001cf51
   1d57c:	2002e358 	.word	0x2002e358
   1d580:	20021390 	.word	0x20021390
   1d584:	200234bc 	.word	0x200234bc
   1d588:	00039e3f 	.word	0x00039e3f
   1d58c:	00039d1b 	.word	0x00039d1b
   1d590:	00039e56 	.word	0x00039e56
   1d594:	00039e69 	.word	0x00039e69

0001d598 <do_udp_send>:
{
   1d598:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (udp_sock == INVALID_SOCKET) {
   1d59c:	4e3a      	ldr	r6, [pc, #232]	; (1d688 <do_udp_send+0xf0>)
{
   1d59e:	4680      	mov	r8, r0
	if (udp_sock == INVALID_SOCKET) {
   1d5a0:	6833      	ldr	r3, [r6, #0]
{
   1d5a2:	460f      	mov	r7, r1
	if (udp_sock == INVALID_SOCKET) {
   1d5a4:	3301      	adds	r3, #1
   1d5a6:	d168      	bne.n	1d67a <do_udp_send+0xe2>
   1d5a8:	4b38      	ldr	r3, [pc, #224]	; (1d68c <do_udp_send+0xf4>)
   1d5aa:	4939      	ldr	r1, [pc, #228]	; (1d690 <do_udp_send+0xf8>)
		LOG_ERR("Not connected yet");
   1d5ac:	4839      	ldr	r0, [pc, #228]	; (1d694 <do_udp_send+0xfc>)
   1d5ae:	1ac9      	subs	r1, r1, r3
   1d5b0:	08c9      	lsrs	r1, r1, #3
   1d5b2:	0189      	lsls	r1, r1, #6
   1d5b4:	f041 0101 	orr.w	r1, r1, #1
   1d5b8:	f016 ffa6 	bl	34508 <log_0>
		return -EINVAL;
   1d5bc:	f06f 0015 	mvn.w	r0, #21
}
   1d5c0:	b002      	add	sp, #8
   1d5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sprintf(rsp_buf, "#XUDPSEND: %d\r\n", -errno);
   1d5c6:	f017 fea6 	bl	35316 <__errno>
   1d5ca:	6803      	ldr	r3, [r0, #0]
   1d5cc:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d5d0:	425b      	negs	r3, r3
   1d5d2:	2100      	movs	r1, #0
   1d5d4:	9300      	str	r3, [sp, #0]
   1d5d6:	4830      	ldr	r0, [pc, #192]	; (1d698 <do_udp_send+0x100>)
   1d5d8:	4b30      	ldr	r3, [pc, #192]	; (1d69c <do_udp_send+0x104>)
   1d5da:	f01a f84a 	bl	37672 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1d5de:	482e      	ldr	r0, [pc, #184]	; (1d698 <do_udp_send+0x100>)
   1d5e0:	f7fb fd46 	bl	19070 <strlen>
   1d5e4:	4601      	mov	r1, r0
   1d5e6:	482c      	ldr	r0, [pc, #176]	; (1d698 <do_udp_send+0x100>)
   1d5e8:	f7fc fdfe 	bl	1a1e8 <rsp_send>
   1d5ec:	e02f      	b.n	1d64e <do_udp_send+0xb6>
		offset += ret;
   1d5ee:	4425      	add	r5, r4
	while (offset < datalen) {
   1d5f0:	42bd      	cmp	r5, r7
   1d5f2:	d230      	bcs.n	1d656 <do_udp_send+0xbe>
		ret = sendto(udp_sock, data + offset, datalen - offset, 0,
   1d5f4:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1d5f6:	2300      	movs	r3, #0
   1d5f8:	e9cd a900 	strd	sl, r9, [sp]
   1d5fc:	1b7a      	subs	r2, r7, r5
   1d5fe:	eb08 0105 	add.w	r1, r8, r5
   1d602:	f017 fbf1 	bl	34de8 <z_impl_zsock_sendto>
		if (ret < 0) {
   1d606:	1e04      	subs	r4, r0, #0
   1d608:	daf1      	bge.n	1d5ee <do_udp_send+0x56>
   1d60a:	4a20      	ldr	r2, [pc, #128]	; (1d68c <do_udp_send+0xf4>)
   1d60c:	4c20      	ldr	r4, [pc, #128]	; (1d690 <do_udp_send+0xf8>)
   1d60e:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send() failed: %d", -errno);
   1d610:	f017 fe81 	bl	35316 <__errno>
   1d614:	08e4      	lsrs	r4, r4, #3
   1d616:	6801      	ldr	r1, [r0, #0]
   1d618:	01a4      	lsls	r4, r4, #6
   1d61a:	f044 0401 	orr.w	r4, r4, #1
   1d61e:	4622      	mov	r2, r4
   1d620:	481f      	ldr	r0, [pc, #124]	; (1d6a0 <do_udp_send+0x108>)
   1d622:	4249      	negs	r1, r1
   1d624:	f016 ff7f 	bl	34526 <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   1d628:	f017 fe75 	bl	35316 <__errno>
   1d62c:	6803      	ldr	r3, [r0, #0]
   1d62e:	2b0b      	cmp	r3, #11
   1d630:	d0c9      	beq.n	1d5c6 <do_udp_send+0x2e>
   1d632:	f017 fe70 	bl	35316 <__errno>
   1d636:	6803      	ldr	r3, [r0, #0]
   1d638:	2b74      	cmp	r3, #116	; 0x74
   1d63a:	d0c4      	beq.n	1d5c6 <do_udp_send+0x2e>
				do_udp_server_stop(-errno);
   1d63c:	f017 fe6b 	bl	35316 <__errno>
	if (udp_sock > 0) {
   1d640:	6833      	ldr	r3, [r6, #0]
   1d642:	2b00      	cmp	r3, #0
   1d644:	dd03      	ble.n	1d64e <do_udp_send+0xb6>
				do_udp_server_stop(-errno);
   1d646:	6800      	ldr	r0, [r0, #0]
   1d648:	4240      	negs	r0, r0
   1d64a:	f7ff fdbd 	bl	1d1c8 <do_udp_server_stop.part.0>
			ret = -errno;
   1d64e:	f017 fe62 	bl	35316 <__errno>
   1d652:	6804      	ldr	r4, [r0, #0]
   1d654:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XUDPSEND: %d\r\n", offset);
   1d656:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d65a:	2100      	movs	r1, #0
   1d65c:	4b0f      	ldr	r3, [pc, #60]	; (1d69c <do_udp_send+0x104>)
   1d65e:	480e      	ldr	r0, [pc, #56]	; (1d698 <do_udp_send+0x100>)
   1d660:	9500      	str	r5, [sp, #0]
   1d662:	f01a f806 	bl	37672 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1d666:	480c      	ldr	r0, [pc, #48]	; (1d698 <do_udp_send+0x100>)
   1d668:	f7fb fd02 	bl	19070 <strlen>
   1d66c:	4601      	mov	r1, r0
   1d66e:	480a      	ldr	r0, [pc, #40]	; (1d698 <do_udp_send+0x100>)
   1d670:	f7fc fdba 	bl	1a1e8 <rsp_send>
	if (ret >= 0) {
   1d674:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1d678:	e7a2      	b.n	1d5c0 <do_udp_send+0x28>
	uint32_t offset = 0;
   1d67a:	2500      	movs	r5, #0
   1d67c:	f04f 0908 	mov.w	r9, #8
	int ret = 0;
   1d680:	462c      	mov	r4, r5
   1d682:	f8df a020 	ldr.w	sl, [pc, #32]	; 1d6a4 <do_udp_send+0x10c>
   1d686:	e7b3      	b.n	1d5f0 <do_udp_send+0x58>
   1d688:	200234b8 	.word	0x200234b8
   1d68c:	0003831c 	.word	0x0003831c
   1d690:	0003840c 	.word	0x0003840c
   1d694:	000397c8 	.word	0x000397c8
   1d698:	20028950 	.word	0x20028950
   1d69c:	00039e93 	.word	0x00039e93
   1d6a0:	000397da 	.word	0x000397da
   1d6a4:	200234b0 	.word	0x200234b0

0001d6a8 <handle_at_udp_send>:
{
   1d6a8:	b590      	push	{r4, r7, lr}
	int size = NET_IPV4_MTU;
   1d6aa:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1d6ae:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   1d6b2:	af00      	add	r7, sp, #0
	int size = NET_IPV4_MTU;
   1d6b4:	607b      	str	r3, [r7, #4]
	if (remote.sin_family == AF_UNSPEC || remote.sin_port == INVALID_PORT) {
   1d6b6:	4b20      	ldr	r3, [pc, #128]	; (1d738 <handle_at_udp_send+0x90>)
{
   1d6b8:	4604      	mov	r4, r0
	if (remote.sin_family == AF_UNSPEC || remote.sin_port == INVALID_PORT) {
   1d6ba:	881b      	ldrh	r3, [r3, #0]
   1d6bc:	b92b      	cbnz	r3, 1d6ca <handle_at_udp_send+0x22>
		return err;
   1d6be:	f06f 0015 	mvn.w	r0, #21
}
   1d6c2:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   1d6c6:	46bd      	mov	sp, r7
   1d6c8:	bd90      	pop	{r4, r7, pc}
	switch (cmd_type) {
   1d6ca:	2801      	cmp	r0, #1
   1d6cc:	d1f7      	bne.n	1d6be <handle_at_udp_send+0x16>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1d6ce:	481b      	ldr	r0, [pc, #108]	; (1d73c <handle_at_udp_send+0x94>)
   1d6d0:	f019 f8e9 	bl	368a6 <at_params_valid_count_get>
   1d6d4:	2802      	cmp	r0, #2
   1d6d6:	d9f2      	bls.n	1d6be <handle_at_udp_send+0x16>
		err = at_params_short_get(&at_param_list, 1, &datatype);
   1d6d8:	4621      	mov	r1, r4
   1d6da:	4818      	ldr	r0, [pc, #96]	; (1d73c <handle_at_udp_send+0x94>)
   1d6dc:	1cba      	adds	r2, r7, #2
   1d6de:	f019 f89a 	bl	36816 <at_params_short_get>
		if (err) {
   1d6e2:	2800      	cmp	r0, #0
   1d6e4:	d1ed      	bne.n	1d6c2 <handle_at_udp_send+0x1a>
		err = at_params_string_get(&at_param_list, 2, data, &size);
   1d6e6:	2102      	movs	r1, #2
   1d6e8:	4814      	ldr	r0, [pc, #80]	; (1d73c <handle_at_udp_send+0x94>)
   1d6ea:	1d3b      	adds	r3, r7, #4
   1d6ec:	f107 0208 	add.w	r2, r7, #8
   1d6f0:	f019 f8b6 	bl	36860 <at_params_string_get>
		if (err) {
   1d6f4:	2800      	cmp	r0, #0
   1d6f6:	d1e4      	bne.n	1d6c2 <handle_at_udp_send+0x1a>
		if (datatype == DATATYPE_HEXADECIMAL) {
   1d6f8:	887b      	ldrh	r3, [r7, #2]
   1d6fa:	6879      	ldr	r1, [r7, #4]
   1d6fc:	b9bb      	cbnz	r3, 1d72e <handle_at_udp_send+0x86>
			uint8_t data_hex[size / 2];
   1d6fe:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   1d702:	105b      	asrs	r3, r3, #1
   1d704:	1dda      	adds	r2, r3, #7
   1d706:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   1d70a:	466c      	mov	r4, sp
			uint8_t data_hex[size / 2];
   1d70c:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   1d710:	466a      	mov	r2, sp
   1d712:	b29b      	uxth	r3, r3
   1d714:	b289      	uxth	r1, r1
   1d716:	f107 0008 	add.w	r0, r7, #8
   1d71a:	f016 f9b3 	bl	33a84 <slm_util_atoh>
			if (err > 0) {
   1d71e:	2800      	cmp	r0, #0
   1d720:	dd03      	ble.n	1d72a <handle_at_udp_send+0x82>
				err = do_udp_send(data_hex, err);
   1d722:	4601      	mov	r1, r0
   1d724:	4668      	mov	r0, sp
   1d726:	f7ff ff37 	bl	1d598 <do_udp_send>
   1d72a:	46a5      	mov	sp, r4
   1d72c:	e7c9      	b.n	1d6c2 <handle_at_udp_send+0x1a>
			err = do_udp_send(data, size);
   1d72e:	f107 0008 	add.w	r0, r7, #8
   1d732:	f7ff ff31 	bl	1d598 <do_udp_send>
   1d736:	e7c4      	b.n	1d6c2 <handle_at_udp_send+0x1a>
   1d738:	200234b0 	.word	0x200234b0
   1d73c:	20023430 	.word	0x20023430

0001d740 <handle_at_udp_client>:
{
   1d740:	b570      	push	{r4, r5, r6, lr}
   1d742:	4604      	mov	r4, r0
   1d744:	b0c2      	sub	sp, #264	; 0x108
	int param_count = at_params_valid_count_get(&at_param_list);
   1d746:	48aa      	ldr	r0, [pc, #680]	; (1d9f0 <handle_at_udp_client+0x2b0>)
   1d748:	f019 f8ad 	bl	368a6 <at_params_valid_count_get>
	switch (cmd_type) {
   1d74c:	2c02      	cmp	r4, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   1d74e:	4605      	mov	r5, r0
	switch (cmd_type) {
   1d750:	f000 81a0 	beq.w	1da94 <handle_at_udp_client+0x354>
   1d754:	2c03      	cmp	r4, #3
   1d756:	f000 81be 	beq.w	1dad6 <handle_at_udp_client+0x396>
   1d75a:	2c01      	cmp	r4, #1
   1d75c:	f040 80d0 	bne.w	1d900 <handle_at_udp_client+0x1c0>
		if (param_count < 2) {
   1d760:	2801      	cmp	r0, #1
   1d762:	f340 80cd 	ble.w	1d900 <handle_at_udp_client+0x1c0>
		err = at_params_short_get(&at_param_list, 1, &op);
   1d766:	4621      	mov	r1, r4
   1d768:	48a1      	ldr	r0, [pc, #644]	; (1d9f0 <handle_at_udp_client+0x2b0>)
   1d76a:	aa0a      	add	r2, sp, #40	; 0x28
   1d76c:	f019 f853 	bl	36816 <at_params_short_get>
		if (err) {
   1d770:	4604      	mov	r4, r0
   1d772:	2800      	cmp	r0, #0
   1d774:	d16b      	bne.n	1d84e <handle_at_udp_client+0x10e>
		if (op == AT_CLIENT_CONNECT ||
   1d776:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1d77a:	1e5a      	subs	r2, r3, #1
   1d77c:	2a01      	cmp	r2, #1
   1d77e:	f200 8124 	bhi.w	1d9ca <handle_at_udp_client+0x28a>
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   1d782:	2180      	movs	r1, #128	; 0x80
   1d784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (param_count < 4) {
   1d788:	2d03      	cmp	r5, #3
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   1d78a:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
			if (param_count < 4) {
   1d78e:	f340 80b7 	ble.w	1d900 <handle_at_udp_client+0x1c0>
			err = at_params_string_get(&at_param_list,
   1d792:	2102      	movs	r1, #2
   1d794:	4896      	ldr	r0, [pc, #600]	; (1d9f0 <handle_at_udp_client+0x2b0>)
   1d796:	ab0b      	add	r3, sp, #44	; 0x2c
   1d798:	aa22      	add	r2, sp, #136	; 0x88
   1d79a:	f019 f861 	bl	36860 <at_params_string_get>
			if (err) {
   1d79e:	4604      	mov	r4, r0
   1d7a0:	2800      	cmp	r0, #0
   1d7a2:	d154      	bne.n	1d84e <handle_at_udp_client+0x10e>
			url[size] = '\0';
   1d7a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d7a6:	aa42      	add	r2, sp, #264	; 0x108
   1d7a8:	4413      	add	r3, r2
   1d7aa:	f803 0c80 	strb.w	r0, [r3, #-128]
			err = at_params_short_get(&at_param_list, 3, &port);
   1d7ae:	2103      	movs	r1, #3
   1d7b0:	488f      	ldr	r0, [pc, #572]	; (1d9f0 <handle_at_udp_client+0x2b0>)
   1d7b2:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   1d7b6:	f019 f82e 	bl	36816 <at_params_short_get>
			if (err) {
   1d7ba:	4604      	mov	r4, r0
   1d7bc:	2800      	cmp	r0, #0
   1d7be:	d146      	bne.n	1d84e <handle_at_udp_client+0x10e>
			if (param_count > 4) {
   1d7c0:	2d04      	cmp	r5, #4
   1d7c2:	d004      	beq.n	1d7ce <handle_at_udp_client+0x8e>
				at_params_int_get(&at_param_list, 4, &sec_tag);
   1d7c4:	2104      	movs	r1, #4
   1d7c6:	488a      	ldr	r0, [pc, #552]	; (1d9f0 <handle_at_udp_client+0x2b0>)
   1d7c8:	aa0c      	add	r2, sp, #48	; 0x30
   1d7ca:	f019 f836 	bl	3683a <at_params_int_get>
			err = do_udp_client_connect(url, port, sec_tag);
   1d7ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1d7d0:	f8bd 402a 	ldrh.w	r4, [sp, #42]	; 0x2a
	if (sec_tag == INVALID_SEC_TAG) {
   1d7d4:	4d87      	ldr	r5, [pc, #540]	; (1d9f4 <handle_at_udp_client+0x2b4>)
   1d7d6:	1c72      	adds	r2, r6, #1
	return z_impl_zsock_socket(family, type, proto);
   1d7d8:	f04f 0102 	mov.w	r1, #2
   1d7dc:	bf0c      	ite	eq
   1d7de:	2211      	moveq	r2, #17
   1d7e0:	f240 1211 	movwne	r2, #273	; 0x111
   1d7e4:	2001      	movs	r0, #1
   1d7e6:	f003 fae7 	bl	20db8 <z_impl_zsock_socket>
		udp_sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_DTLS_1_2);
   1d7ea:	6028      	str	r0, [r5, #0]
	if (udp_sock < 0) {
   1d7ec:	6828      	ldr	r0, [r5, #0]
   1d7ee:	2800      	cmp	r0, #0
   1d7f0:	da30      	bge.n	1d854 <handle_at_udp_client+0x114>
   1d7f2:	4a81      	ldr	r2, [pc, #516]	; (1d9f8 <handle_at_udp_client+0x2b8>)
   1d7f4:	4c81      	ldr	r4, [pc, #516]	; (1d9fc <handle_at_udp_client+0x2bc>)
   1d7f6:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
   1d7f8:	f017 fd8d 	bl	35316 <__errno>
   1d7fc:	08e4      	lsrs	r4, r4, #3
   1d7fe:	6801      	ldr	r1, [r0, #0]
   1d800:	01a4      	lsls	r4, r4, #6
   1d802:	f044 0401 	orr.w	r4, r4, #1
   1d806:	4622      	mov	r2, r4
   1d808:	4249      	negs	r1, r1
   1d80a:	487d      	ldr	r0, [pc, #500]	; (1da00 <handle_at_udp_client+0x2c0>)
   1d80c:	f016 fe8b 	bl	34526 <log_1>
		sprintf(rsp_buf, "#XUDPCLI: %d\r\n", -errno);
   1d810:	f017 fd81 	bl	35316 <__errno>
   1d814:	6803      	ldr	r3, [r0, #0]
   1d816:	2100      	movs	r1, #0
   1d818:	425b      	negs	r3, r3
   1d81a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d81e:	9300      	str	r3, [sp, #0]
   1d820:	4878      	ldr	r0, [pc, #480]	; (1da04 <handle_at_udp_client+0x2c4>)
   1d822:	4b79      	ldr	r3, [pc, #484]	; (1da08 <handle_at_udp_client+0x2c8>)
   1d824:	f019 ff25 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1d828:	4876      	ldr	r0, [pc, #472]	; (1da04 <handle_at_udp_client+0x2c4>)
   1d82a:	f7fb fc21 	bl	19070 <strlen>
   1d82e:	4601      	mov	r1, r0
   1d830:	4874      	ldr	r0, [pc, #464]	; (1da04 <handle_at_udp_client+0x2c4>)
   1d832:	f7fc fcd9 	bl	1a1e8 <rsp_send>
		return -errno;
   1d836:	f017 fd6e 	bl	35316 <__errno>
   1d83a:	6804      	ldr	r4, [r0, #0]
   1d83c:	4264      	negs	r4, r4
			if (err == 0 &&
   1d83e:	b934      	cbnz	r4, 1d84e <handle_at_udp_client+0x10e>
   1d840:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1d844:	2b02      	cmp	r3, #2
   1d846:	d102      	bne.n	1d84e <handle_at_udp_client+0x10e>
				udp_datamode = true;
   1d848:	2201      	movs	r2, #1
   1d84a:	4b70      	ldr	r3, [pc, #448]	; (1da0c <handle_at_udp_client+0x2cc>)
   1d84c:	701a      	strb	r2, [r3, #0]
}
   1d84e:	4620      	mov	r0, r4
   1d850:	b042      	add	sp, #264	; 0x108
   1d852:	bd70      	pop	{r4, r5, r6, pc}
	if (sec_tag != INVALID_SEC_TAG) {
   1d854:	1c73      	adds	r3, r6, #1
   1d856:	d02f      	beq.n	1d8b8 <handle_at_udp_client+0x178>
		sec_tag_t sec_tag_list[1] = { sec_tag };
   1d858:	960e      	str	r6, [sp, #56]	; 0x38
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1d85a:	2304      	movs	r3, #4
   1d85c:	2201      	movs	r2, #1
   1d85e:	9300      	str	r3, [sp, #0]
   1d860:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1d864:	ab0e      	add	r3, sp, #56	; 0x38
   1d866:	f017 fb1b 	bl	34ea0 <z_impl_zsock_setsockopt>
		if (ret) {
   1d86a:	b328      	cbz	r0, 1d8b8 <handle_at_udp_client+0x178>
   1d86c:	4a62      	ldr	r2, [pc, #392]	; (1d9f8 <handle_at_udp_client+0x2b8>)
   1d86e:	4c63      	ldr	r4, [pc, #396]	; (1d9fc <handle_at_udp_client+0x2bc>)
   1d870:	1aa4      	subs	r4, r4, r2
   1d872:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set tag list failed: %d", -errno);
   1d874:	f017 fd4f 	bl	35316 <__errno>
   1d878:	01a4      	lsls	r4, r4, #6
   1d87a:	f044 0401 	orr.w	r4, r4, #1
   1d87e:	4622      	mov	r2, r4
   1d880:	6801      	ldr	r1, [r0, #0]
   1d882:	4863      	ldr	r0, [pc, #396]	; (1da10 <handle_at_udp_client+0x2d0>)
   1d884:	4249      	negs	r1, r1
		LOG_ERR("connect() failed: %d", -errno);
   1d886:	f016 fe4e 	bl	34526 <log_1>
		sprintf(rsp_buf, "#XUDPCLI: %d\r\n", -errno);
   1d88a:	f017 fd44 	bl	35316 <__errno>
   1d88e:	6803      	ldr	r3, [r0, #0]
   1d890:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d894:	425b      	negs	r3, r3
   1d896:	2100      	movs	r1, #0
   1d898:	9300      	str	r3, [sp, #0]
   1d89a:	485a      	ldr	r0, [pc, #360]	; (1da04 <handle_at_udp_client+0x2c4>)
   1d89c:	4b5a      	ldr	r3, [pc, #360]	; (1da08 <handle_at_udp_client+0x2c8>)
   1d89e:	f019 fee8 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1d8a2:	4858      	ldr	r0, [pc, #352]	; (1da04 <handle_at_udp_client+0x2c4>)
   1d8a4:	f7fb fbe4 	bl	19070 <strlen>
   1d8a8:	4601      	mov	r1, r0
   1d8aa:	4856      	ldr	r0, [pc, #344]	; (1da04 <handle_at_udp_client+0x2c4>)
   1d8ac:	f7fc fc9c 	bl	1a1e8 <rsp_send>
		close(udp_sock);
   1d8b0:	6828      	ldr	r0, [r5, #0]
   1d8b2:	f016 f941 	bl	33b38 <close>
   1d8b6:	e7be      	b.n	1d836 <handle_at_udp_client+0xf6>
	if (check_for_ipv4(url, strlen(url))) {
   1d8b8:	a822      	add	r0, sp, #136	; 0x88
   1d8ba:	f7fb fbd9 	bl	19070 <strlen>
   1d8be:	b2c1      	uxtb	r1, r0
   1d8c0:	a822      	add	r0, sp, #136	; 0x88
   1d8c2:	f016 f903 	bl	33acc <check_for_ipv4>
   1d8c6:	4601      	mov	r1, r0
   1d8c8:	b1e8      	cbz	r0, 1d906 <handle_at_udp_client+0x1c6>
		remote.sin_family = AF_INET;
   1d8ca:	2001      	movs	r0, #1
   1d8cc:	4a51      	ldr	r2, [pc, #324]	; (1da14 <handle_at_udp_client+0x2d4>)
		remote.sin_port = htons(port);
   1d8ce:	0223      	lsls	r3, r4, #8
   1d8d0:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
		remote.sin_family = AF_INET;
   1d8d4:	8010      	strh	r0, [r2, #0]
		remote.sin_port = htons(port);
   1d8d6:	8054      	strh	r4, [r2, #2]
	return z_impl_zsock_inet_pton(family, src, dst);
   1d8d8:	a922      	add	r1, sp, #136	; 0x88
   1d8da:	3204      	adds	r2, #4
   1d8dc:	f017 fabe 	bl	34e5c <z_impl_zsock_inet_pton>
		if (ret != 1) {
   1d8e0:	2801      	cmp	r0, #1
   1d8e2:	4601      	mov	r1, r0
   1d8e4:	d036      	beq.n	1d954 <handle_at_udp_client+0x214>
   1d8e6:	4a45      	ldr	r2, [pc, #276]	; (1d9fc <handle_at_udp_client+0x2bc>)
   1d8e8:	4b43      	ldr	r3, [pc, #268]	; (1d9f8 <handle_at_udp_client+0x2b8>)
			LOG_ERR("inet_pton() failed: %d", ret);
   1d8ea:	484b      	ldr	r0, [pc, #300]	; (1da18 <handle_at_udp_client+0x2d8>)
   1d8ec:	1ad2      	subs	r2, r2, r3
   1d8ee:	08d2      	lsrs	r2, r2, #3
   1d8f0:	0192      	lsls	r2, r2, #6
   1d8f2:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("getaddrinfo() failed: %d", ret);
   1d8f6:	f016 fe16 	bl	34526 <log_1>
			close(udp_sock);
   1d8fa:	6828      	ldr	r0, [r5, #0]
   1d8fc:	f016 f91c 	bl	33b38 <close>
			return -EINVAL;
   1d900:	f06f 0415 	mvn.w	r4, #21
   1d904:	e7a3      	b.n	1d84e <handle_at_udp_client+0x10e>
		struct addrinfo hints = {
   1d906:	2250      	movs	r2, #80	; 0x50
   1d908:	9009      	str	r0, [sp, #36]	; 0x24
   1d90a:	a80e      	add	r0, sp, #56	; 0x38
   1d90c:	f019 fd99 	bl	37442 <memset>
   1d910:	2601      	movs	r6, #1
   1d912:	2302      	movs	r3, #2
	return zsock_getaddrinfo(host, service, hints, res);
   1d914:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d916:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
   1d91a:	aa0e      	add	r2, sp, #56	; 0x38
   1d91c:	ab0d      	add	r3, sp, #52	; 0x34
   1d91e:	a822      	add	r0, sp, #136	; 0x88
   1d920:	f017 f9e2 	bl	34ce8 <zsock_getaddrinfo>
		if (ret || result == NULL) {
   1d924:	4601      	mov	r1, r0
   1d926:	b908      	cbnz	r0, 1d92c <handle_at_udp_client+0x1ec>
   1d928:	980d      	ldr	r0, [sp, #52]	; 0x34
   1d92a:	b940      	cbnz	r0, 1d93e <handle_at_udp_client+0x1fe>
   1d92c:	4a33      	ldr	r2, [pc, #204]	; (1d9fc <handle_at_udp_client+0x2bc>)
   1d92e:	4b32      	ldr	r3, [pc, #200]	; (1d9f8 <handle_at_udp_client+0x2b8>)
			LOG_ERR("getaddrinfo() failed: %d", ret);
   1d930:	483a      	ldr	r0, [pc, #232]	; (1da1c <handle_at_udp_client+0x2dc>)
   1d932:	1ad2      	subs	r2, r2, r3
   1d934:	08d2      	lsrs	r2, r2, #3
   1d936:	0192      	lsls	r2, r2, #6
   1d938:	f042 0201 	orr.w	r2, r2, #1
   1d93c:	e7db      	b.n	1d8f6 <handle_at_udp_client+0x1b6>
		remote.sin_port = htons(port);
   1d93e:	0222      	lsls	r2, r4, #8
   1d940:	ea42 2414 	orr.w	r4, r2, r4, lsr #8
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   1d944:	6982      	ldr	r2, [r0, #24]
		remote.sin_family = AF_INET;
   1d946:	4b33      	ldr	r3, [pc, #204]	; (1da14 <handle_at_udp_client+0x2d4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   1d948:	6852      	ldr	r2, [r2, #4]
		remote.sin_family = AF_INET;
   1d94a:	801e      	strh	r6, [r3, #0]
		remote.sin_port = htons(port);
   1d94c:	805c      	strh	r4, [r3, #2]
		remote.sin_addr.s_addr =
   1d94e:	605a      	str	r2, [r3, #4]
	zsock_freeaddrinfo(ai);
   1d950:	f017 f9cc 	bl	34cec <zsock_freeaddrinfo>
	ret = connect(udp_sock, (struct sockaddr *)&remote,
   1d954:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   1d956:	2208      	movs	r2, #8
   1d958:	492e      	ldr	r1, [pc, #184]	; (1da14 <handle_at_udp_client+0x2d4>)
   1d95a:	f017 fa05 	bl	34d68 <z_impl_zsock_connect>
	if (ret < 0) {
   1d95e:	1e04      	subs	r4, r0, #0
   1d960:	da0d      	bge.n	1d97e <handle_at_udp_client+0x23e>
   1d962:	4a25      	ldr	r2, [pc, #148]	; (1d9f8 <handle_at_udp_client+0x2b8>)
   1d964:	4c25      	ldr	r4, [pc, #148]	; (1d9fc <handle_at_udp_client+0x2bc>)
   1d966:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect() failed: %d", -errno);
   1d968:	f017 fcd5 	bl	35316 <__errno>
   1d96c:	08e4      	lsrs	r4, r4, #3
   1d96e:	6801      	ldr	r1, [r0, #0]
   1d970:	01a4      	lsls	r4, r4, #6
   1d972:	f044 0401 	orr.w	r4, r4, #1
   1d976:	4622      	mov	r2, r4
   1d978:	4829      	ldr	r0, [pc, #164]	; (1da20 <handle_at_udp_client+0x2e0>)
   1d97a:	4249      	negs	r1, r1
   1d97c:	e783      	b.n	1d886 <handle_at_udp_client+0x146>
   1d97e:	2200      	movs	r2, #0
   1d980:	2300      	movs	r3, #0
   1d982:	2600      	movs	r6, #0
   1d984:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1d988:	2004      	movs	r0, #4
   1d98a:	230e      	movs	r3, #14
   1d98c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
   1d990:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1d994:	e9cd 6601 	strd	r6, r6, [sp, #4]
   1d998:	4b22      	ldr	r3, [pc, #136]	; (1da24 <handle_at_udp_client+0x2e4>)
   1d99a:	4923      	ldr	r1, [pc, #140]	; (1da28 <handle_at_udp_client+0x2e8>)
   1d99c:	9600      	str	r6, [sp, #0]
   1d99e:	4823      	ldr	r0, [pc, #140]	; (1da2c <handle_at_udp_client+0x2ec>)
   1d9a0:	f014 fd80 	bl	324a4 <z_impl_k_thread_create>
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   1d9a4:	4b22      	ldr	r3, [pc, #136]	; (1da30 <handle_at_udp_client+0x2f0>)
	sprintf(rsp_buf, "#XUDPCLI: %d connected\r\n", udp_sock);
   1d9a6:	4631      	mov	r1, r6
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   1d9a8:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XUDPCLI: %d connected\r\n", udp_sock);
   1d9aa:	682b      	ldr	r3, [r5, #0]
   1d9ac:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d9b0:	9300      	str	r3, [sp, #0]
   1d9b2:	4814      	ldr	r0, [pc, #80]	; (1da04 <handle_at_udp_client+0x2c4>)
   1d9b4:	4b1f      	ldr	r3, [pc, #124]	; (1da34 <handle_at_udp_client+0x2f4>)
   1d9b6:	f019 fe5c 	bl	37672 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1d9ba:	4812      	ldr	r0, [pc, #72]	; (1da04 <handle_at_udp_client+0x2c4>)
   1d9bc:	f7fb fb58 	bl	19070 <strlen>
   1d9c0:	4601      	mov	r1, r0
   1d9c2:	4810      	ldr	r0, [pc, #64]	; (1da04 <handle_at_udp_client+0x2c4>)
   1d9c4:	f7fc fc10 	bl	1a1e8 <rsp_send>
	return ret;
   1d9c8:	e739      	b.n	1d83e <handle_at_udp_client+0xfe>
		} else if (op == AT_CLIENT_DISCONNECT) {
   1d9ca:	2b00      	cmp	r3, #0
   1d9cc:	f47f af3f 	bne.w	1d84e <handle_at_udp_client+0x10e>
			if (udp_sock < 0) {
   1d9d0:	4d08      	ldr	r5, [pc, #32]	; (1d9f4 <handle_at_udp_client+0x2b4>)
   1d9d2:	682c      	ldr	r4, [r5, #0]
   1d9d4:	2c00      	cmp	r4, #0
   1d9d6:	da31      	bge.n	1da3c <handle_at_udp_client+0x2fc>
   1d9d8:	4b07      	ldr	r3, [pc, #28]	; (1d9f8 <handle_at_udp_client+0x2b8>)
   1d9da:	4908      	ldr	r1, [pc, #32]	; (1d9fc <handle_at_udp_client+0x2bc>)
				LOG_WRN("Client is not connected");
   1d9dc:	4816      	ldr	r0, [pc, #88]	; (1da38 <handle_at_udp_client+0x2f8>)
   1d9de:	1ac9      	subs	r1, r1, r3
   1d9e0:	08c9      	lsrs	r1, r1, #3
   1d9e2:	0189      	lsls	r1, r1, #6
   1d9e4:	f041 0102 	orr.w	r1, r1, #2
   1d9e8:	f016 fd8e 	bl	34508 <log_0>
				return -EINVAL;
   1d9ec:	e788      	b.n	1d900 <handle_at_udp_client+0x1c0>
   1d9ee:	bf00      	nop
   1d9f0:	20023430 	.word	0x20023430
   1d9f4:	200234b8 	.word	0x200234b8
   1d9f8:	0003831c 	.word	0x0003831c
   1d9fc:	0003840c 	.word	0x0003840c
   1da00:	000399b0 	.word	0x000399b0
   1da04:	20028950 	.word	0x20028950
   1da08:	00039ea3 	.word	0x00039ea3
   1da0c:	2002b93c 	.word	0x2002b93c
   1da10:	00039b71 	.word	0x00039b71
   1da14:	200234b0 	.word	0x200234b0
   1da18:	00039b89 	.word	0x00039b89
   1da1c:	00039ba0 	.word	0x00039ba0
   1da20:	000398b1 	.word	0x000398b1
   1da24:	0001cf51 	.word	0x0001cf51
   1da28:	2002e358 	.word	0x2002e358
   1da2c:	20021390 	.word	0x20021390
   1da30:	200234bc 	.word	0x200234bc
   1da34:	00039eb2 	.word	0x00039eb2
   1da38:	00039bd2 	.word	0x00039bd2
	if (udp_sock > 0) {
   1da3c:	f43f af07 	beq.w	1d84e <handle_at_udp_client+0x10e>
		k_thread_abort(udp_thread_id);
   1da40:	4b2c      	ldr	r3, [pc, #176]	; (1daf4 <handle_at_udp_client+0x3b4>)
   1da42:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   1da44:	f004 fd06 	bl	22454 <z_impl_k_thread_abort>
		ret = close(udp_sock);
   1da48:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   1da4a:	f017 f960 	bl	34d0e <z_impl_zsock_close>
		if (ret < 0) {
   1da4e:	1e04      	subs	r4, r0, #0
   1da50:	da12      	bge.n	1da78 <handle_at_udp_client+0x338>
   1da52:	4a29      	ldr	r2, [pc, #164]	; (1daf8 <handle_at_udp_client+0x3b8>)
   1da54:	4c29      	ldr	r4, [pc, #164]	; (1dafc <handle_at_udp_client+0x3bc>)
   1da56:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   1da58:	f017 fc5d 	bl	35316 <__errno>
   1da5c:	08e4      	lsrs	r4, r4, #3
   1da5e:	6801      	ldr	r1, [r0, #0]
   1da60:	01a4      	lsls	r4, r4, #6
   1da62:	f044 0402 	orr.w	r4, r4, #2
   1da66:	4622      	mov	r2, r4
   1da68:	4825      	ldr	r0, [pc, #148]	; (1db00 <handle_at_udp_client+0x3c0>)
   1da6a:	4249      	negs	r1, r1
   1da6c:	f016 fd5b 	bl	34526 <log_1>
			ret = -errno;
   1da70:	f017 fc51 	bl	35316 <__errno>
   1da74:	6804      	ldr	r4, [r0, #0]
   1da76:	4264      	negs	r4, r4
		(void)slm_at_udp_proxy_init();
   1da78:	f7ff fb92 	bl	1d1a0 <slm_at_udp_proxy_init>
		sprintf(rsp_buf, "#XUDPCLI: disconnected\r\n");
   1da7c:	4921      	ldr	r1, [pc, #132]	; (1db04 <handle_at_udp_client+0x3c4>)
   1da7e:	4822      	ldr	r0, [pc, #136]	; (1db08 <handle_at_udp_client+0x3c8>)
   1da80:	f019 fe1e 	bl	376c0 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1da84:	4820      	ldr	r0, [pc, #128]	; (1db08 <handle_at_udp_client+0x3c8>)
   1da86:	f7fb faf3 	bl	19070 <strlen>
   1da8a:	4601      	mov	r1, r0
   1da8c:	481e      	ldr	r0, [pc, #120]	; (1db08 <handle_at_udp_client+0x3c8>)
   1da8e:	f7fc fbab 	bl	1a1e8 <rsp_send>
		break;
   1da92:	e6dc      	b.n	1d84e <handle_at_udp_client+0x10e>
		if (udp_sock != INVALID_SOCKET) {
   1da94:	4b1d      	ldr	r3, [pc, #116]	; (1db0c <handle_at_udp_client+0x3cc>)
   1da96:	681b      	ldr	r3, [r3, #0]
   1da98:	1c59      	adds	r1, r3, #1
   1da9a:	d013      	beq.n	1dac4 <handle_at_udp_client+0x384>
			sprintf(rsp_buf, "#XUDPCLI: %d, %d\r\n",
   1da9c:	4a1c      	ldr	r2, [pc, #112]	; (1db10 <handle_at_udp_client+0x3d0>)
   1da9e:	2100      	movs	r1, #0
   1daa0:	7812      	ldrb	r2, [r2, #0]
   1daa2:	4819      	ldr	r0, [pc, #100]	; (1db08 <handle_at_udp_client+0x3c8>)
   1daa4:	e9cd 3200 	strd	r3, r2, [sp]
   1daa8:	f640 228c 	movw	r2, #2700	; 0xa8c
   1daac:	4b19      	ldr	r3, [pc, #100]	; (1db14 <handle_at_udp_client+0x3d4>)
   1daae:	f019 fde0 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1dab2:	4815      	ldr	r0, [pc, #84]	; (1db08 <handle_at_udp_client+0x3c8>)
   1dab4:	f7fb fadc 	bl	19070 <strlen>
   1dab8:	4601      	mov	r1, r0
   1daba:	4813      	ldr	r0, [pc, #76]	; (1db08 <handle_at_udp_client+0x3c8>)
   1dabc:	f7fc fb94 	bl	1a1e8 <rsp_send>
		err = 0;
   1dac0:	2400      	movs	r4, #0
		break;
   1dac2:	e6c4      	b.n	1d84e <handle_at_udp_client+0x10e>
			sprintf(rsp_buf, "#XUDPCLI: %d\r\n",
   1dac4:	9300      	str	r3, [sp, #0]
   1dac6:	f640 228c 	movw	r2, #2700	; 0xa8c
   1daca:	2100      	movs	r1, #0
   1dacc:	4b12      	ldr	r3, [pc, #72]	; (1db18 <handle_at_udp_client+0x3d8>)
   1dace:	480e      	ldr	r0, [pc, #56]	; (1db08 <handle_at_udp_client+0x3c8>)
   1dad0:	f019 fdcf 	bl	37672 <__sprintf_chk>
   1dad4:	e7ed      	b.n	1dab2 <handle_at_udp_client+0x372>
		sprintf(rsp_buf,
   1dad6:	2400      	movs	r4, #0
   1dad8:	2301      	movs	r3, #1
   1dada:	2202      	movs	r2, #2
   1dadc:	4621      	mov	r1, r4
   1dade:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1dae2:	9400      	str	r4, [sp, #0]
   1dae4:	f640 228c 	movw	r2, #2700	; 0xa8c
   1dae8:	4b0c      	ldr	r3, [pc, #48]	; (1db1c <handle_at_udp_client+0x3dc>)
   1daea:	4807      	ldr	r0, [pc, #28]	; (1db08 <handle_at_udp_client+0x3c8>)
   1daec:	f019 fdc1 	bl	37672 <__sprintf_chk>
   1daf0:	e7c8      	b.n	1da84 <handle_at_udp_client+0x344>
   1daf2:	bf00      	nop
   1daf4:	200234bc 	.word	0x200234bc
   1daf8:	0003831c 	.word	0x0003831c
   1dafc:	0003840c 	.word	0x0003840c
   1db00:	000396c1 	.word	0x000396c1
   1db04:	00039ecb 	.word	0x00039ecb
   1db08:	20028950 	.word	0x20028950
   1db0c:	200234b8 	.word	0x200234b8
   1db10:	2002b93c 	.word	0x2002b93c
   1db14:	00039ee4 	.word	0x00039ee4
   1db18:	00039ea3 	.word	0x00039ea3
   1db1c:	00039ef7 	.word	0x00039ef7

0001db20 <slm_at_udp_proxy_uninit>:

/**@brief API to uninitialize UDP Proxy AT commands handler
 */
int slm_at_udp_proxy_uninit(void)
{
   1db20:	b538      	push	{r3, r4, r5, lr}
	int ret;

	if (udp_sock > 0) {
   1db22:	4d11      	ldr	r5, [pc, #68]	; (1db68 <slm_at_udp_proxy_uninit+0x48>)
   1db24:	682b      	ldr	r3, [r5, #0]
   1db26:	2b00      	cmp	r3, #0
   1db28:	dd1c      	ble.n	1db64 <slm_at_udp_proxy_uninit+0x44>
		k_thread_abort(udp_thread_id);
   1db2a:	4b10      	ldr	r3, [pc, #64]	; (1db6c <slm_at_udp_proxy_uninit+0x4c>)
   1db2c:	6818      	ldr	r0, [r3, #0]
   1db2e:	f004 fc91 	bl	22454 <z_impl_k_thread_abort>
		ret = close(udp_sock);
   1db32:	6828      	ldr	r0, [r5, #0]
   1db34:	f017 f8eb 	bl	34d0e <z_impl_zsock_close>
		if (ret < 0) {
   1db38:	2800      	cmp	r0, #0
   1db3a:	da10      	bge.n	1db5e <slm_at_udp_proxy_uninit+0x3e>
   1db3c:	4a0c      	ldr	r2, [pc, #48]	; (1db70 <slm_at_udp_proxy_uninit+0x50>)
   1db3e:	4c0d      	ldr	r4, [pc, #52]	; (1db74 <slm_at_udp_proxy_uninit+0x54>)
   1db40:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   1db42:	f017 fbe8 	bl	35316 <__errno>
   1db46:	08e4      	lsrs	r4, r4, #3
   1db48:	6801      	ldr	r1, [r0, #0]
   1db4a:	01a4      	lsls	r4, r4, #6
   1db4c:	f044 0402 	orr.w	r4, r4, #2
   1db50:	4622      	mov	r2, r4
   1db52:	4809      	ldr	r0, [pc, #36]	; (1db78 <slm_at_udp_proxy_uninit+0x58>)
   1db54:	4249      	negs	r1, r1
   1db56:	f016 fce6 	bl	34526 <log_1>
			ret = -errno;
   1db5a:	f017 fbdc 	bl	35316 <__errno>
		}
		udp_sock = INVALID_SOCKET;
   1db5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1db62:	602b      	str	r3, [r5, #0]
	}

	return 0;
}
   1db64:	2000      	movs	r0, #0
   1db66:	bd38      	pop	{r3, r4, r5, pc}
   1db68:	200234b8 	.word	0x200234b8
   1db6c:	200234bc 	.word	0x200234bc
   1db70:	0003831c 	.word	0x0003831c
   1db74:	0003840c 	.word	0x0003840c
   1db78:	000396c1 	.word	0x000396c1

0001db7c <handle_at_icmp_ping>:
 */
static int handle_at_icmp_ping(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[ICMP_MAX_URL];
	int size = ICMP_MAX_URL;
   1db7c:	2380      	movs	r3, #128	; 0x80
{
   1db7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t length, timeout, count, interval;

	switch (cmd_type) {
   1db82:	2801      	cmp	r0, #1
{
   1db84:	b0a5      	sub	sp, #148	; 0x94
   1db86:	4604      	mov	r4, r0
	int size = ICMP_MAX_URL;
   1db88:	9302      	str	r3, [sp, #8]
	switch (cmd_type) {
   1db8a:	d005      	beq.n	1db98 <handle_at_icmp_ping+0x1c>
	int err = -EINVAL;
   1db8c:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
   1db90:	4620      	mov	r0, r4
   1db92:	b025      	add	sp, #148	; 0x94
   1db94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (at_params_valid_count_get(&at_param_list) < 4) {
   1db98:	4874      	ldr	r0, [pc, #464]	; (1dd6c <handle_at_icmp_ping+0x1f0>)
   1db9a:	f018 fe84 	bl	368a6 <at_params_valid_count_get>
   1db9e:	2803      	cmp	r0, #3
   1dba0:	d9f4      	bls.n	1db8c <handle_at_icmp_ping+0x10>
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1dba2:	4621      	mov	r1, r4
   1dba4:	4871      	ldr	r0, [pc, #452]	; (1dd6c <handle_at_icmp_ping+0x1f0>)
   1dba6:	ab02      	add	r3, sp, #8
   1dba8:	aa04      	add	r2, sp, #16
   1dbaa:	f018 fe59 	bl	36860 <at_params_string_get>
		if (err < 0) {
   1dbae:	1e04      	subs	r4, r0, #0
   1dbb0:	dbee      	blt.n	1db90 <handle_at_icmp_ping+0x14>
		url[size] = '\0';
   1dbb2:	2500      	movs	r5, #0
   1dbb4:	9b02      	ldr	r3, [sp, #8]
   1dbb6:	aa24      	add	r2, sp, #144	; 0x90
   1dbb8:	4413      	add	r3, r2
		err = at_params_short_get(&at_param_list, 2, &length);
   1dbba:	2102      	movs	r1, #2
   1dbbc:	466a      	mov	r2, sp
   1dbbe:	486b      	ldr	r0, [pc, #428]	; (1dd6c <handle_at_icmp_ping+0x1f0>)
		url[size] = '\0';
   1dbc0:	f803 5c80 	strb.w	r5, [r3, #-128]
		err = at_params_short_get(&at_param_list, 2, &length);
   1dbc4:	f018 fe27 	bl	36816 <at_params_short_get>
		if (err < 0) {
   1dbc8:	1e04      	subs	r4, r0, #0
   1dbca:	dbe1      	blt.n	1db90 <handle_at_icmp_ping+0x14>
		err = at_params_short_get(&at_param_list, 3, &timeout);
   1dbcc:	2103      	movs	r1, #3
   1dbce:	4867      	ldr	r0, [pc, #412]	; (1dd6c <handle_at_icmp_ping+0x1f0>)
   1dbd0:	f10d 0202 	add.w	r2, sp, #2
   1dbd4:	f018 fe1f 	bl	36816 <at_params_short_get>
		if (err < 0) {
   1dbd8:	1e04      	subs	r4, r0, #0
   1dbda:	dbd9      	blt.n	1db90 <handle_at_icmp_ping+0x14>
		if (at_params_valid_count_get(&at_param_list) > 4) {
   1dbdc:	4863      	ldr	r0, [pc, #396]	; (1dd6c <handle_at_icmp_ping+0x1f0>)
   1dbde:	f018 fe62 	bl	368a6 <at_params_valid_count_get>
   1dbe2:	2804      	cmp	r0, #4
   1dbe4:	d929      	bls.n	1dc3a <handle_at_icmp_ping+0xbe>
			err = at_params_short_get(&at_param_list, 4, &count);
   1dbe6:	2104      	movs	r1, #4
   1dbe8:	4860      	ldr	r0, [pc, #384]	; (1dd6c <handle_at_icmp_ping+0x1f0>)
   1dbea:	aa01      	add	r2, sp, #4
   1dbec:	f018 fe13 	bl	36816 <at_params_short_get>
			if (err < 0) {
   1dbf0:	1e04      	subs	r4, r0, #0
   1dbf2:	dbcd      	blt.n	1db90 <handle_at_icmp_ping+0x14>
		if (at_params_valid_count_get(&at_param_list) > 5) {
   1dbf4:	485d      	ldr	r0, [pc, #372]	; (1dd6c <handle_at_icmp_ping+0x1f0>)
   1dbf6:	f018 fe56 	bl	368a6 <at_params_valid_count_get>
   1dbfa:	2805      	cmp	r0, #5
   1dbfc:	d920      	bls.n	1dc40 <handle_at_icmp_ping+0xc4>
			err = at_params_short_get(&at_param_list, 5, &interval);
   1dbfe:	2105      	movs	r1, #5
   1dc00:	485a      	ldr	r0, [pc, #360]	; (1dd6c <handle_at_icmp_ping+0x1f0>)
   1dc02:	f10d 0206 	add.w	r2, sp, #6
   1dc06:	f018 fe06 	bl	36816 <at_params_short_get>
			if (err < 0) {
   1dc0a:	1e04      	subs	r4, r0, #0
   1dc0c:	dbc0      	blt.n	1db90 <handle_at_icmp_ping+0x14>
		err = ping_test_handler(url, length, timeout, count, interval);
   1dc0e:	f8bd 8000 	ldrh.w	r8, [sp]
   1dc12:	f8bd 9002 	ldrh.w	r9, [sp, #2]
	if (length > ICMP_MAX_LEN) {
   1dc16:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
		err = ping_test_handler(url, length, timeout, count, interval);
   1dc1a:	f8bd 6004 	ldrh.w	r6, [sp, #4]
   1dc1e:	f8bd 7006 	ldrh.w	r7, [sp, #6]
	if (length > ICMP_MAX_LEN) {
   1dc22:	dd11      	ble.n	1dc48 <handle_at_icmp_ping+0xcc>
   1dc24:	4952      	ldr	r1, [pc, #328]	; (1dd70 <handle_at_icmp_ping+0x1f4>)
   1dc26:	4b53      	ldr	r3, [pc, #332]	; (1dd74 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("Payload size exceeds limit");
   1dc28:	4853      	ldr	r0, [pc, #332]	; (1dd78 <handle_at_icmp_ping+0x1fc>)
   1dc2a:	1ac9      	subs	r1, r1, r3
   1dc2c:	08c9      	lsrs	r1, r1, #3
   1dc2e:	0189      	lsls	r1, r1, #6
   1dc30:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("LTE not connected yet");
   1dc34:	f016 fc68 	bl	34508 <log_0>
		return -1;
   1dc38:	e015      	b.n	1dc66 <handle_at_icmp_ping+0xea>
			count = 0;
   1dc3a:	f8ad 5004 	strh.w	r5, [sp, #4]
   1dc3e:	e7d9      	b.n	1dbf4 <handle_at_icmp_ping+0x78>
			interval = 0;
   1dc40:	2300      	movs	r3, #0
   1dc42:	f8ad 3006 	strh.w	r3, [sp, #6]
   1dc46:	e7e2      	b.n	1dc0e <handle_at_icmp_ping+0x92>
	st = modem_info_params_get(&modem_param);
   1dc48:	484c      	ldr	r0, [pc, #304]	; (1dd7c <handle_at_icmp_ping+0x200>)
   1dc4a:	f009 fa7f 	bl	2714c <modem_info_params_get>
	if (st < 0) {
   1dc4e:	1e01      	subs	r1, r0, #0
   1dc50:	da0c      	bge.n	1dc6c <handle_at_icmp_ping+0xf0>
   1dc52:	4a47      	ldr	r2, [pc, #284]	; (1dd70 <handle_at_icmp_ping+0x1f4>)
   1dc54:	4b47      	ldr	r3, [pc, #284]	; (1dd74 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("Unable to obtain modem parameters (%d)", st);
   1dc56:	484a      	ldr	r0, [pc, #296]	; (1dd80 <handle_at_icmp_ping+0x204>)
   1dc58:	1ad2      	subs	r2, r2, r3
   1dc5a:	08d2      	lsrs	r2, r2, #3
   1dc5c:	0192      	lsls	r2, r2, #6
   1dc5e:	f042 0201 	orr.w	r2, r2, #1
   1dc62:	f016 fc60 	bl	34526 <log_1>
		return -1;
   1dc66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1dc6a:	e791      	b.n	1db90 <handle_at_icmp_ping+0x14>
	addr_len = strlen(modem_param.network.ip_address.value_string);
   1dc6c:	4845      	ldr	r0, [pc, #276]	; (1dd84 <handle_at_icmp_ping+0x208>)
   1dc6e:	f7fb f9ff 	bl	19070 <strlen>
	if (addr_len == 0) {
   1dc72:	b940      	cbnz	r0, 1dc86 <handle_at_icmp_ping+0x10a>
   1dc74:	493e      	ldr	r1, [pc, #248]	; (1dd70 <handle_at_icmp_ping+0x1f4>)
   1dc76:	4b3f      	ldr	r3, [pc, #252]	; (1dd74 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("LTE not connected yet");
   1dc78:	4843      	ldr	r0, [pc, #268]	; (1dd88 <handle_at_icmp_ping+0x20c>)
   1dc7a:	1ac9      	subs	r1, r1, r3
   1dc7c:	08c9      	lsrs	r1, r1, #3
   1dc7e:	0189      	lsls	r1, r1, #6
   1dc80:	f041 0101 	orr.w	r1, r1, #1
   1dc84:	e7d6      	b.n	1dc34 <handle_at_icmp_ping+0xb8>
	return zsock_getaddrinfo(host, service, hints, res);
   1dc86:	2200      	movs	r2, #0
   1dc88:	483e      	ldr	r0, [pc, #248]	; (1dd84 <handle_at_icmp_ping+0x208>)
   1dc8a:	4611      	mov	r1, r2
   1dc8c:	ab03      	add	r3, sp, #12
   1dc8e:	f017 f82b 	bl	34ce8 <zsock_getaddrinfo>
	if (st != 0) {
   1dc92:	4604      	mov	r4, r0
   1dc94:	b160      	cbz	r0, 1dcb0 <handle_at_icmp_ping+0x134>
   1dc96:	4a36      	ldr	r2, [pc, #216]	; (1dd70 <handle_at_icmp_ping+0x1f4>)
   1dc98:	4b36      	ldr	r3, [pc, #216]	; (1dd74 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("getaddrinfo(src) error: %d", st);
   1dc9a:	4601      	mov	r1, r0
   1dc9c:	1ad2      	subs	r2, r2, r3
   1dc9e:	08d2      	lsrs	r2, r2, #3
   1dca0:	0192      	lsls	r2, r2, #6
   1dca2:	483a      	ldr	r0, [pc, #232]	; (1dd8c <handle_at_icmp_ping+0x210>)
   1dca4:	f042 0201 	orr.w	r2, r2, #1
   1dca8:	f016 fc3d 	bl	34526 <log_1>
		return -st;
   1dcac:	4264      	negs	r4, r4
   1dcae:	e76f      	b.n	1db90 <handle_at_icmp_ping+0x14>
	ping_argv.src = res;
   1dcb0:	9b03      	ldr	r3, [sp, #12]
   1dcb2:	4d37      	ldr	r5, [pc, #220]	; (1dd90 <handle_at_icmp_ping+0x214>)
   1dcb4:	4602      	mov	r2, r0
   1dcb6:	4601      	mov	r1, r0
   1dcb8:	602b      	str	r3, [r5, #0]
	res = NULL;
   1dcba:	9003      	str	r0, [sp, #12]
   1dcbc:	ab03      	add	r3, sp, #12
   1dcbe:	a804      	add	r0, sp, #16
   1dcc0:	f017 f812 	bl	34ce8 <zsock_getaddrinfo>
	if (st != 0) {
   1dcc4:	4604      	mov	r4, r0
   1dcc6:	b1c8      	cbz	r0, 1dcfc <handle_at_icmp_ping+0x180>
   1dcc8:	4b2a      	ldr	r3, [pc, #168]	; (1dd74 <handle_at_icmp_ping+0x1f8>)
   1dcca:	4a29      	ldr	r2, [pc, #164]	; (1dd70 <handle_at_icmp_ping+0x1f4>)
		LOG_ERR("getaddrinfo(dest) error: %d", st);
   1dccc:	4601      	mov	r1, r0
   1dcce:	1ad2      	subs	r2, r2, r3
   1dcd0:	08d2      	lsrs	r2, r2, #3
   1dcd2:	0192      	lsls	r2, r2, #6
   1dcd4:	f042 0201 	orr.w	r2, r2, #1
   1dcd8:	482e      	ldr	r0, [pc, #184]	; (1dd94 <handle_at_icmp_ping+0x218>)
   1dcda:	f016 fc24 	bl	34526 <log_1>
		sprintf(rsp_buf, "Cannot resolve remote host\r\n");
   1dcde:	492e      	ldr	r1, [pc, #184]	; (1dd98 <handle_at_icmp_ping+0x21c>)
   1dce0:	482e      	ldr	r0, [pc, #184]	; (1dd9c <handle_at_icmp_ping+0x220>)
   1dce2:	f019 fced 	bl	376c0 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1dce6:	482d      	ldr	r0, [pc, #180]	; (1dd9c <handle_at_icmp_ping+0x220>)
   1dce8:	f7fb f9c2 	bl	19070 <strlen>
   1dcec:	4601      	mov	r1, r0
   1dcee:	482b      	ldr	r0, [pc, #172]	; (1dd9c <handle_at_icmp_ping+0x220>)
   1dcf0:	f7fc fa7a 	bl	1a1e8 <rsp_send>
	zsock_freeaddrinfo(ai);
   1dcf4:	6828      	ldr	r0, [r5, #0]
   1dcf6:	f016 fff9 	bl	34cec <zsock_freeaddrinfo>
   1dcfa:	e7d7      	b.n	1dcac <handle_at_icmp_ping+0x130>
	ping_argv.dest = res;
   1dcfc:	9b03      	ldr	r3, [sp, #12]
	if (ping_argv.src->ai_family != ping_argv.dest->ai_family) {
   1dcfe:	682a      	ldr	r2, [r5, #0]
	ping_argv.dest = res;
   1dd00:	606b      	str	r3, [r5, #4]
	if (ping_argv.src->ai_family != ping_argv.dest->ai_family) {
   1dd02:	6892      	ldr	r2, [r2, #8]
   1dd04:	689b      	ldr	r3, [r3, #8]
   1dd06:	429a      	cmp	r2, r3
   1dd08:	d010      	beq.n	1dd2c <handle_at_icmp_ping+0x1b0>
   1dd0a:	4b1a      	ldr	r3, [pc, #104]	; (1dd74 <handle_at_icmp_ping+0x1f8>)
   1dd0c:	4918      	ldr	r1, [pc, #96]	; (1dd70 <handle_at_icmp_ping+0x1f4>)
		LOG_ERR("Source/Destination address family error");
   1dd0e:	4824      	ldr	r0, [pc, #144]	; (1dda0 <handle_at_icmp_ping+0x224>)
   1dd10:	1ac9      	subs	r1, r1, r3
   1dd12:	08c9      	lsrs	r1, r1, #3
   1dd14:	0189      	lsls	r1, r1, #6
   1dd16:	f041 0101 	orr.w	r1, r1, #1
   1dd1a:	f016 fbf5 	bl	34508 <log_0>
   1dd1e:	6868      	ldr	r0, [r5, #4]
   1dd20:	f016 ffe4 	bl	34cec <zsock_freeaddrinfo>
   1dd24:	6828      	ldr	r0, [r5, #0]
   1dd26:	f016 ffe1 	bl	34cec <zsock_freeaddrinfo>
		return -1;
   1dd2a:	e79c      	b.n	1dc66 <handle_at_icmp_ping+0xea>
		ping_argv.count = count;
   1dd2c:	2e00      	cmp	r6, #0
   1dd2e:	bf08      	it	eq
   1dd30:	2601      	moveq	r6, #1
		ping_argv.interval = interval;
   1dd32:	2f00      	cmp	r7, #0
	ping_argv.interval = 1000;	/* default 1s */
   1dd34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		ping_argv.interval = interval;
   1dd38:	bf18      	it	ne
   1dd3a:	463b      	movne	r3, r7
		err = ping_test_handler(url, length, timeout, count, interval);
   1dd3c:	e9c5 8902 	strd	r8, r9, [r5, #8]
   1dd40:	4918      	ldr	r1, [pc, #96]	; (1dda4 <handle_at_icmp_ping+0x228>)
		ping_argv.count = count;
   1dd42:	612e      	str	r6, [r5, #16]
		ping_argv.interval = interval;
   1dd44:	616b      	str	r3, [r5, #20]
   1dd46:	e8d1 3fef 	ldaex	r3, [r1]
   1dd4a:	f043 0201 	orr.w	r2, r3, #1
   1dd4e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1dd52:	2800      	cmp	r0, #0
   1dd54:	d1f7      	bne.n	1dd46 <handle_at_icmp_ping+0x1ca>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1dd56:	f013 0501 	ands.w	r5, r3, #1
   1dd5a:	f47f af19 	bne.w	1db90 <handle_at_icmp_ping+0x14>
		k_queue_append(&work_q->queue, work);
   1dd5e:	4812      	ldr	r0, [pc, #72]	; (1dda8 <handle_at_icmp_ping+0x22c>)
   1dd60:	3908      	subs	r1, #8
   1dd62:	f018 ff64 	bl	36c2e <k_queue_append>
	return 0;
   1dd66:	462c      	mov	r4, r5
		break;
   1dd68:	e712      	b.n	1db90 <handle_at_icmp_ping+0x14>
   1dd6a:	bf00      	nop
   1dd6c:	20023430 	.word	0x20023430
   1dd70:	000383a4 	.word	0x000383a4
   1dd74:	0003831c 	.word	0x0003831c
   1dd78:	00039f31 	.word	0x00039f31
   1dd7c:	20020900 	.word	0x20020900
   1dd80:	000398f3 	.word	0x000398f3
   1dd84:	20020c12 	.word	0x20020c12
   1dd88:	0003991a 	.word	0x0003991a
   1dd8c:	00039f4c 	.word	0x00039f4c
   1dd90:	200234cc 	.word	0x200234cc
   1dd94:	00039f67 	.word	0x00039f67
   1dd98:	00039f83 	.word	0x00039f83
   1dd9c:	20028950 	.word	0x20028950
   1dda0:	00039fa0 	.word	0x00039fa0
   1dda4:	200234c8 	.word	0x200234c8
   1dda8:	200211e8 	.word	0x200211e8

0001ddac <send_ping_wait_reply>:
{
   1ddac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	total_length = ping_argv.len + header_len + icmp_hdr_len;
   1ddb0:	4d9e      	ldr	r5, [pc, #632]	; (1e02c <send_ping_wait_reply+0x280>)
{
   1ddb2:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
	total_length = ping_argv.len + header_len + icmp_hdr_len;
   1ddb6:	68ab      	ldr	r3, [r5, #8]
	memset(ip_buf, 0x00, header_len);
   1ddb8:	2400      	movs	r4, #0
	total_length = ping_argv.len + header_len + icmp_hdr_len;
   1ddba:	331c      	adds	r3, #28
   1ddbc:	fa1f fb83 	uxth.w	fp, r3
	ip_buf[2] = total_length >> 8;           /* Total length */
   1ddc0:	ba5b      	rev16	r3, r3
   1ddc2:	f8ad 301a 	strh.w	r3, [sp, #26]
	ip_buf[8] = 64;                          /* TTL */
   1ddc6:	f44f 73a0 	mov.w	r3, #320	; 0x140
	ip_buf[0] = (4 << 4) + (header_len / 4); /* Version & header length */
   1ddca:	2245      	movs	r2, #69	; 0x45
	memset(ip_buf, 0x00, header_len);
   1ddcc:	e9cd 4408 	strd	r4, r4, [sp, #32]
	ip_buf[8] = 64;                          /* TTL */
   1ddd0:	f8ad 3020 	strh.w	r3, [sp, #32]
	sa = (struct sockaddr_in *)ping_argv.src->ai_addr;
   1ddd4:	682b      	ldr	r3, [r5, #0]
	memset(ip_buf, 0x00, header_len);
   1ddd6:	940a      	str	r4, [sp, #40]	; 0x28
	ip_buf[1] = 0x00;                        /* Type of service */
   1ddd8:	699b      	ldr	r3, [r3, #24]
	ip_buf[4] = 0x00;                        /* Identification */
   1ddda:	9407      	str	r4, [sp, #28]
   1dddc:	685b      	ldr	r3, [r3, #4]
	hcs = check_ics(buffer, len);
   1ddde:	2114      	movs	r1, #20
	buffer[0] = ipaddr & 0xFF;
   1dde0:	9309      	str	r3, [sp, #36]	; 0x24
	sa = (struct sockaddr_in *)ping_argv.dest->ai_addr;
   1dde2:	686b      	ldr	r3, [r5, #4]
	hcs = check_ics(buffer, len);
   1dde4:	a806      	add	r0, sp, #24
   1dde6:	699b      	ldr	r3, [r3, #24]
	ip_buf[0] = (4 << 4) + (header_len / 4); /* Version & header length */
   1dde8:	f8ad 2018 	strh.w	r2, [sp, #24]
	setip(ip_buf+16, sa->sin_addr.s_addr);     /* Destination */
   1ddec:	685b      	ldr	r3, [r3, #4]
	*ptr_hcs = 0;   /* Clear checksum before calculation */
   1ddee:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
	buffer[0] = ipaddr & 0xFF;
   1ddf2:	930a      	str	r3, [sp, #40]	; 0x28
	hcs = check_ics(buffer, len);
   1ddf4:	f015 fea2 	bl	33b3c <check_ics>
	data[0] = ICMP_ECHO_REQ;                 /* Type (echo req) */
   1ddf8:	2308      	movs	r3, #8
		data[i] = (i + seqnr) % 10 + '0';
   1ddfa:	260a      	movs	r6, #10
	data[6] = seqnr >> 8;                   /* seqnr */
   1ddfc:	498c      	ldr	r1, [pc, #560]	; (1e030 <send_ping_wait_reply+0x284>)
	data[4] = 0x00;                         /* Identifier */
   1ddfe:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
	data[6] = seqnr >> 8;                   /* seqnr */
   1de02:	780a      	ldrb	r2, [r1, #0]
   1de04:	4689      	mov	r9, r1
	data[7] = ++seqnr;                      /* seqr */
   1de06:	3201      	adds	r2, #1
   1de08:	b2d2      	uxtb	r2, r2
	data[6] = seqnr >> 8;                   /* seqnr */
   1de0a:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
	data[7] = ++seqnr;                      /* seqr */
   1de0e:	700a      	strb	r2, [r1, #0]
	*ptr_hcs = hcs;
   1de10:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
	data[0] = ICMP_ECHO_REQ;                 /* Type (echo req) */
   1de14:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	data[7] = ++seqnr;                      /* seqr */
   1de18:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	for (int i = 8; i < total_length - header_len; i++) {
   1de1c:	ac0d      	add	r4, sp, #52	; 0x34
   1de1e:	9503      	str	r5, [sp, #12]
   1de20:	f1ab 0114 	sub.w	r1, fp, #20
   1de24:	4299      	cmp	r1, r3
   1de26:	dc40      	bgt.n	1deaa <send_ping_wait_reply+0xfe>
	*ptr_hcs = 0;   /* Clear checksum before calculation */
   1de28:	f04f 0a00 	mov.w	sl, #0
	hcs = check_ics(buffer, len);
   1de2c:	a80b      	add	r0, sp, #44	; 0x2c
	*ptr_hcs = 0;   /* Clear checksum before calculation */
   1de2e:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
	hcs = check_ics(buffer, len);
   1de32:	f015 fe83 	bl	33b3c <check_ics>
	*ptr_hcs = hcs;
   1de36:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
	errno = 0;
   1de3a:	f017 fa6c 	bl	35316 <__errno>
	delta_t = 0;
   1de3e:	2200      	movs	r2, #0
   1de40:	2300      	movs	r3, #0
   1de42:	4d7c      	ldr	r5, [pc, #496]	; (1e034 <send_ping_wait_reply+0x288>)
	errno = 0;
   1de44:	f8c0 a000 	str.w	sl, [r0]
	delta_t = 0;
   1de48:	e9c5 2300 	strd	r2, r3, [r5]
	return z_impl_k_uptime_ticks();
   1de4c:	f019 f8d9 	bl	37002 <z_impl_k_uptime_ticks>
   1de50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1de54:	460a      	mov	r2, r1
   1de56:	fba0 0103 	umull	r0, r1, r0, r3
   1de5a:	fb03 1102 	mla	r1, r3, r2, r1
	start_t = k_uptime_get();
   1de5e:	4e76      	ldr	r6, [pc, #472]	; (1e038 <send_ping_wait_reply+0x28c>)
   1de60:	0bc3      	lsrs	r3, r0, #15
   1de62:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1de66:	0bca      	lsrs	r2, r1, #15
   1de68:	e9c6 3200 	strd	r3, r2, [r6]
	fd = nrf_socket(NRF_AF_PACKET, NRF_SOCK_RAW, 0);
   1de6c:	2103      	movs	r1, #3
   1de6e:	4652      	mov	r2, sl
   1de70:	2005      	movs	r0, #5
   1de72:	f011 fa33 	bl	2f2dc <nrf_socket>
	if (fd < 0) {
   1de76:	4c71      	ldr	r4, [pc, #452]	; (1e03c <send_ping_wait_reply+0x290>)
   1de78:	4b71      	ldr	r3, [pc, #452]	; (1e040 <send_ping_wait_reply+0x294>)
   1de7a:	f1b0 0800 	subs.w	r8, r0, #0
   1de7e:	eba4 0403 	sub.w	r4, r4, r3
   1de82:	462f      	mov	r7, r5
   1de84:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1de88:	da19      	bge.n	1debe <send_ping_wait_reply+0x112>
		LOG_ERR("socket() failed: (%d)", -errno);
   1de8a:	f017 fa44 	bl	35316 <__errno>
   1de8e:	01a4      	lsls	r4, r4, #6
   1de90:	6801      	ldr	r1, [r0, #0]
   1de92:	f044 0401 	orr.w	r4, r4, #1
   1de96:	486b      	ldr	r0, [pc, #428]	; (1e044 <send_ping_wait_reply+0x298>)
   1de98:	4622      	mov	r2, r4
   1de9a:	4249      	negs	r1, r1
   1de9c:	f016 fb43 	bl	34526 <log_1>
		return (uint32_t)delta_t;
   1dea0:	6828      	ldr	r0, [r5, #0]
}
   1dea2:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   1dea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		data[i] = (i + seqnr) % 10 + '0';
   1deaa:	18d7      	adds	r7, r2, r3
   1deac:	fbb7 f0f6 	udiv	r0, r7, r6
   1deb0:	fb06 7010 	mls	r0, r6, r0, r7
   1deb4:	3030      	adds	r0, #48	; 0x30
   1deb6:	f804 0b01 	strb.w	r0, [r4], #1
	for (int i = 8; i < total_length - header_len; i++) {
   1deba:	3301      	adds	r3, #1
   1debc:	e7b2      	b.n	1de24 <send_ping_wait_reply+0x78>
	ret = nrf_send(fd, ip_buf, total_length, 0);
   1debe:	4653      	mov	r3, sl
   1dec0:	465a      	mov	r2, fp
   1dec2:	a906      	add	r1, sp, #24
   1dec4:	f011 fa46 	bl	2f354 <nrf_send>
	if (ret <= 0) {
   1dec8:	2800      	cmp	r0, #0
   1deca:	dc0f      	bgt.n	1deec <send_ping_wait_reply+0x140>
		LOG_ERR("nrf_send() failed: (%d)", -errno);
   1decc:	f017 fa23 	bl	35316 <__errno>
   1ded0:	01a4      	lsls	r4, r4, #6
   1ded2:	6801      	ldr	r1, [r0, #0]
   1ded4:	f044 0401 	orr.w	r4, r4, #1
   1ded8:	4622      	mov	r2, r4
   1deda:	485b      	ldr	r0, [pc, #364]	; (1e048 <send_ping_wait_reply+0x29c>)
   1dedc:	4249      	negs	r1, r1
   1dede:	f016 fb22 	bl	34526 <log_1>
	(void)nrf_close(fd);
   1dee2:	4640      	mov	r0, r8
   1dee4:	f011 fa0c 	bl	2f300 <nrf_close>
	return (uint32_t)delta_t;
   1dee8:	6838      	ldr	r0, [r7, #0]
   1deea:	e7da      	b.n	1dea2 <send_ping_wait_reply+0xf6>
	fds[0].events = NRF_POLLIN;
   1deec:	2101      	movs	r1, #1
	ret = nrf_poll(fds, 1, ping_argv.waitms);
   1deee:	9b03      	ldr	r3, [sp, #12]
   1def0:	a804      	add	r0, sp, #16
   1def2:	68da      	ldr	r2, [r3, #12]
	fds[0].fd = fd;
   1def4:	f8cd 8010 	str.w	r8, [sp, #16]
	fds[0].events = NRF_POLLIN;
   1def8:	f8ad 1014 	strh.w	r1, [sp, #20]
	ret = nrf_poll(fds, 1, ping_argv.waitms);
   1defc:	f011 fb00 	bl	2f500 <nrf_poll>
	if (ret <= 0) {
   1df00:	1e02      	subs	r2, r0, #0
   1df02:	dd1b      	ble.n	1df3c <send_ping_wait_reply+0x190>
			LOG_INF("nrf_recv() wrong data (%d)", len);
   1df04:	ea4f 1a84 	mov.w	sl, r4, lsl #6
   1df08:	f8df b160 	ldr.w	fp, [pc, #352]	; 1e06c <send_ping_wait_reply+0x2c0>
   1df0c:	f04a 0a03 	orr.w	sl, sl, #3
		len = nrf_recv(fd, ip_buf, NET_IPV4_MTU, 0);
   1df10:	2300      	movs	r3, #0
   1df12:	f44f 7210 	mov.w	r2, #576	; 0x240
   1df16:	4640      	mov	r0, r8
   1df18:	a906      	add	r1, sp, #24
   1df1a:	f011 fa51 	bl	2f3c0 <nrf_recv>
		if (len <= 0) {
   1df1e:	1e05      	subs	r5, r0, #0
   1df20:	dc25      	bgt.n	1df6e <send_ping_wait_reply+0x1c2>
			LOG_ERR("nrf_recv() failed: (%d) (%d)", -errno, len);
   1df22:	f017 f9f8 	bl	35316 <__errno>
   1df26:	01a4      	lsls	r4, r4, #6
   1df28:	6801      	ldr	r1, [r0, #0]
   1df2a:	f044 0401 	orr.w	r4, r4, #1
   1df2e:	4623      	mov	r3, r4
   1df30:	462a      	mov	r2, r5
   1df32:	4846      	ldr	r0, [pc, #280]	; (1e04c <send_ping_wait_reply+0x2a0>)
   1df34:	4249      	negs	r1, r1
   1df36:	f016 fb0d 	bl	34554 <log_2>
			goto close_end;
   1df3a:	e7d2      	b.n	1dee2 <send_ping_wait_reply+0x136>
   1df3c:	9203      	str	r2, [sp, #12]
		LOG_ERR("nrf_poll() failed: (%d) (%d)", -errno, ret);
   1df3e:	f017 f9ea 	bl	35316 <__errno>
   1df42:	01a4      	lsls	r4, r4, #6
   1df44:	6801      	ldr	r1, [r0, #0]
   1df46:	f044 0401 	orr.w	r4, r4, #1
   1df4a:	4841      	ldr	r0, [pc, #260]	; (1e050 <send_ping_wait_reply+0x2a4>)
   1df4c:	4249      	negs	r1, r1
   1df4e:	4623      	mov	r3, r4
   1df50:	9a03      	ldr	r2, [sp, #12]
   1df52:	f016 faff 	bl	34554 <log_2>
		sprintf(rsp_buf, "#XPING: timeout\r\n");
   1df56:	493f      	ldr	r1, [pc, #252]	; (1e054 <send_ping_wait_reply+0x2a8>)
   1df58:	483f      	ldr	r0, [pc, #252]	; (1e058 <send_ping_wait_reply+0x2ac>)
   1df5a:	f019 fbb1 	bl	376c0 <strcpy>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1df5e:	483e      	ldr	r0, [pc, #248]	; (1e058 <send_ping_wait_reply+0x2ac>)
   1df60:	f7fb f886 	bl	19070 <strlen>
   1df64:	4601      	mov	r1, r0
   1df66:	483c      	ldr	r0, [pc, #240]	; (1e058 <send_ping_wait_reply+0x2ac>)
   1df68:	f7fc f93e 	bl	1a1e8 <rsp_send>
   1df6c:	e7b9      	b.n	1dee2 <send_ping_wait_reply+0x136>
		if (len < header_len) {
   1df6e:	2d13      	cmp	r5, #19
   1df70:	dc05      	bgt.n	1df7e <send_ping_wait_reply+0x1d2>
			LOG_INF("nrf_recv() wrong data (%d)", len);
   1df72:	4652      	mov	r2, sl
   1df74:	4629      	mov	r1, r5
   1df76:	4658      	mov	r0, fp
   1df78:	f016 fad5 	bl	34526 <log_1>
			continue;
   1df7c:	e7c8      	b.n	1df10 <send_ping_wait_reply+0x164>
		if (ip_buf[IP_PROTOCOL_POS] != ICMP) {
   1df7e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1df82:	2b01      	cmp	r3, #1
   1df84:	d1c4      	bne.n	1df10 <send_ping_wait_reply+0x164>
   1df86:	f019 f83c 	bl	37002 <z_impl_k_uptime_ticks>
   1df8a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   1df8e:	460b      	mov	r3, r1
   1df90:	fba0 010a 	umull	r0, r1, r0, sl
   1df94:	fb0a 1103 	mla	r1, sl, r3, r1
   1df98:	0bc2      	lsrs	r2, r0, #15
   1df9a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   1df9e:	0bcb      	lsrs	r3, r1, #15
	delta = uptime - *reftime;
   1dfa0:	e9d6 0100 	ldrd	r0, r1, [r6]
   1dfa4:	ebb2 0b00 	subs.w	fp, r2, r0
   1dfa8:	eb63 0101 	sbc.w	r1, r3, r1
	delta_t = k_uptime_delta(&start_t);
   1dfac:	e9c7 b100 	strd	fp, r1, [r7]
	hcs = check_ics(data, len - header_len);
   1dfb0:	a80b      	add	r0, sp, #44	; 0x2c
   1dfb2:	f1a5 0114 	sub.w	r1, r5, #20
	*reftime = uptime;
   1dfb6:	e9c6 2300 	strd	r2, r3, [r6]
   1dfba:	f015 fdbf 	bl	33b3c <check_ics>
	if (hcs != 0) {
   1dfbe:	4601      	mov	r1, r0
   1dfc0:	b150      	cbz	r0, 1dfd8 <send_ping_wait_reply+0x22c>
		LOG_WRN("HCS error %d", hcs);
   1dfc2:	01a2      	lsls	r2, r4, #6
   1dfc4:	4825      	ldr	r0, [pc, #148]	; (1e05c <send_ping_wait_reply+0x2b0>)
   1dfc6:	f042 0202 	orr.w	r2, r2, #2
   1dfca:	f016 faac 	bl	34526 <log_1>
		delta_t = 0;
   1dfce:	2200      	movs	r2, #0
   1dfd0:	2300      	movs	r3, #0
   1dfd2:	e9c7 2300 	strd	r2, r3, [r7]
		goto close_end;
   1dfd6:	e784      	b.n	1dee2 <send_ping_wait_reply+0x136>
	plseqnr = data[7];
   1dfd8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
	if (plseqnr != seqnr) {
   1dfdc:	f899 2000 	ldrb.w	r2, [r9]
   1dfe0:	4290      	cmp	r0, r2
   1dfe2:	d007      	beq.n	1dff4 <send_ping_wait_reply+0x248>
		LOG_WRN("error sequence numbers %d %d", plseqnr, seqnr);
   1dfe4:	4601      	mov	r1, r0
   1dfe6:	01a3      	lsls	r3, r4, #6
   1dfe8:	481d      	ldr	r0, [pc, #116]	; (1e060 <send_ping_wait_reply+0x2b4>)
   1dfea:	f043 0302 	orr.w	r3, r3, #2
		LOG_WRN("error length %d %d", pllen, len);
   1dfee:	f016 fab1 	bl	34554 <log_2>
   1dff2:	e7ec      	b.n	1dfce <send_ping_wait_reply+0x222>
	pllen = (ip_buf[2] << 8) + ip_buf[3];
   1dff4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1dff8:	f89d 601b 	ldrb.w	r6, [sp, #27]
   1dffc:	eb06 2603 	add.w	r6, r6, r3, lsl #8
	if (pllen != len) {
   1e000:	42ae      	cmp	r6, r5
   1e002:	d006      	beq.n	1e012 <send_ping_wait_reply+0x266>
		LOG_WRN("error length %d %d", pllen, len);
   1e004:	01a3      	lsls	r3, r4, #6
   1e006:	462a      	mov	r2, r5
   1e008:	4631      	mov	r1, r6
   1e00a:	4816      	ldr	r0, [pc, #88]	; (1e064 <send_ping_wait_reply+0x2b8>)
   1e00c:	f043 0302 	orr.w	r3, r3, #2
   1e010:	e7ed      	b.n	1dfee <send_ping_wait_reply+0x242>
	sprintf(rsp_buf, "#XPING: %d.%03d\r\n",
   1e012:	fbbb f2fa 	udiv	r2, fp, sl
   1e016:	fb0a b312 	mls	r3, sl, r2, fp
   1e01a:	480f      	ldr	r0, [pc, #60]	; (1e058 <send_ping_wait_reply+0x2ac>)
   1e01c:	e9cd 2300 	strd	r2, r3, [sp]
   1e020:	f640 228c 	movw	r2, #2700	; 0xa8c
   1e024:	4b10      	ldr	r3, [pc, #64]	; (1e068 <send_ping_wait_reply+0x2bc>)
   1e026:	f019 fb24 	bl	37672 <__sprintf_chk>
   1e02a:	e798      	b.n	1df5e <send_ping_wait_reply+0x1b2>
   1e02c:	200234cc 	.word	0x200234cc
   1e030:	2002b93d 	.word	0x2002b93d
   1e034:	20021458 	.word	0x20021458
   1e038:	20021460 	.word	0x20021460
   1e03c:	000383a4 	.word	0x000383a4
   1e040:	0003831c 	.word	0x0003831c
   1e044:	00039fc8 	.word	0x00039fc8
   1e048:	00039fde 	.word	0x00039fde
   1e04c:	0003a025 	.word	0x0003a025
   1e050:	00039ff6 	.word	0x00039ff6
   1e054:	0003a013 	.word	0x0003a013
   1e058:	20028950 	.word	0x20028950
   1e05c:	0003a05d 	.word	0x0003a05d
   1e060:	0003a06a 	.word	0x0003a06a
   1e064:	0003a087 	.word	0x0003a087
   1e068:	0003a09a 	.word	0x0003a09a
   1e06c:	0003a042 	.word	0x0003a042

0001e070 <ping_task>:
{
   1e070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < ping_argv.count; i++) {
   1e074:	2700      	movs	r7, #0
   1e076:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
	uint32_t count = 0;
   1e07a:	463e      	mov	r6, r7
	uint32_t sum = 0;
   1e07c:	463c      	mov	r4, r7
	struct addrinfo *si = ping_argv.src;
   1e07e:	4d27      	ldr	r5, [pc, #156]	; (1e11c <ping_task+0xac>)
	struct addrinfo *di = ping_argv.dest;
   1e080:	e9d5 9800 	ldrd	r9, r8, [r5]
	for (int i = 0; i < ping_argv.count; i++) {
   1e084:	692b      	ldr	r3, [r5, #16]
   1e086:	42bb      	cmp	r3, r7
   1e088:	dc2f      	bgt.n	1e0ea <ping_task+0x7a>
	if (count > 1) {
   1e08a:	2e01      	cmp	r6, #1
   1e08c:	d919      	bls.n	1e0c2 <ping_task+0x52>
		uint32_t avg = (sum + count/2) / count;
   1e08e:	eb04 0456 	add.w	r4, r4, r6, lsr #1
   1e092:	fbb4 f6f6 	udiv	r6, r4, r6
		int avg_f = avg % 1000;
   1e096:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e09a:	fbb6 f3f4 	udiv	r3, r6, r4
   1e09e:	fb04 6613 	mls	r6, r4, r3, r6
		sprintf(rsp_buf, "#XPING: average %d.%03d\r\n", avg_s, avg_f);
   1e0a2:	2100      	movs	r1, #0
   1e0a4:	f640 228c 	movw	r2, #2700	; 0xa8c
   1e0a8:	e9cd 3600 	strd	r3, r6, [sp]
   1e0ac:	481c      	ldr	r0, [pc, #112]	; (1e120 <ping_task+0xb0>)
   1e0ae:	4b1d      	ldr	r3, [pc, #116]	; (1e124 <ping_task+0xb4>)
   1e0b0:	f019 fadf 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1e0b4:	481a      	ldr	r0, [pc, #104]	; (1e120 <ping_task+0xb0>)
   1e0b6:	f7fa ffdb 	bl	19070 <strlen>
   1e0ba:	4601      	mov	r1, r0
   1e0bc:	4818      	ldr	r0, [pc, #96]	; (1e120 <ping_task+0xb0>)
   1e0be:	f7fc f893 	bl	1a1e8 <rsp_send>
   1e0c2:	4648      	mov	r0, r9
   1e0c4:	f016 fe12 	bl	34cec <zsock_freeaddrinfo>
   1e0c8:	4640      	mov	r0, r8
   1e0ca:	f016 fe0f 	bl	34cec <zsock_freeaddrinfo>
	sprintf(rsp_buf, "OK\r\n");
   1e0ce:	4916      	ldr	r1, [pc, #88]	; (1e128 <ping_task+0xb8>)
   1e0d0:	4813      	ldr	r0, [pc, #76]	; (1e120 <ping_task+0xb0>)
   1e0d2:	f019 faf5 	bl	376c0 <strcpy>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1e0d6:	4812      	ldr	r0, [pc, #72]	; (1e120 <ping_task+0xb0>)
   1e0d8:	f7fa ffca 	bl	19070 <strlen>
   1e0dc:	4601      	mov	r1, r0
   1e0de:	4810      	ldr	r0, [pc, #64]	; (1e120 <ping_task+0xb0>)
}
   1e0e0:	b003      	add	sp, #12
   1e0e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rsp_send(rsp_buf, strlen(rsp_buf));
   1e0e6:	f7fc b87f 	b.w	1a1e8 <rsp_send>
		uint32_t ping_t = send_ping_wait_reply();
   1e0ea:	f7ff fe5f 	bl	1ddac <send_ping_wait_reply>
		if (ping_t > 0)  {
   1e0ee:	b108      	cbz	r0, 1e0f4 <ping_task+0x84>
			count++;
   1e0f0:	3601      	adds	r6, #1
			sum += ping_t;
   1e0f2:	4404      	add	r4, r0
   1e0f4:	f240 3be7 	movw	fp, #999	; 0x3e7
   1e0f8:	f04f 0c00 	mov.w	ip, #0
		k_sleep(K_MSEC(ping_argv.interval));
   1e0fc:	696b      	ldr	r3, [r5, #20]
   1e0fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e102:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1e106:	fbca bc01 	smlal	fp, ip, sl, r1
   1e10a:	2300      	movs	r3, #0
   1e10c:	4658      	mov	r0, fp
   1e10e:	4661      	mov	r1, ip
   1e110:	f7fa fb52 	bl	187b8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1e114:	f014 f8f0 	bl	322f8 <z_impl_k_sleep>
	for (int i = 0; i < ping_argv.count; i++) {
   1e118:	3701      	adds	r7, #1
   1e11a:	e7b3      	b.n	1e084 <ping_task+0x14>
   1e11c:	200234cc 	.word	0x200234cc
   1e120:	20028950 	.word	0x20028950
   1e124:	0003a0ac 	.word	0x0003a0ac
   1e128:	000393cd 	.word	0x000393cd

0001e12c <slm_at_icmp_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_icmp_parse(const char *at_cmd)
{
   1e12c:	b510      	push	{r4, lr}
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_ICMP_MAX; i++) {
		if (slm_util_cmd_casecmp(at_cmd, icmp_at_list[i].string)) {
   1e12e:	4911      	ldr	r1, [pc, #68]	; (1e174 <slm_at_icmp_parse+0x48>)
{
   1e130:	4604      	mov	r4, r0
		if (slm_util_cmd_casecmp(at_cmd, icmp_at_list[i].string)) {
   1e132:	f7fb fef3 	bl	19f1c <slm_util_cmd_casecmp>
   1e136:	b1d0      	cbz	r0, 1e16e <slm_at_icmp_parse+0x42>
			ret = at_parser_params_from_str(at_cmd, NULL,
   1e138:	2100      	movs	r1, #0
   1e13a:	4620      	mov	r0, r4
   1e13c:	4a0e      	ldr	r2, [pc, #56]	; (1e178 <slm_at_icmp_parse+0x4c>)
   1e13e:	f018 fa6a 	bl	36616 <at_parser_params_from_str>
						&at_param_list);
			if (ret < 0) {
   1e142:	1e01      	subs	r1, r0, #0
   1e144:	da0c      	bge.n	1e160 <slm_at_icmp_parse+0x34>
   1e146:	4b0d      	ldr	r3, [pc, #52]	; (1e17c <slm_at_icmp_parse+0x50>)
   1e148:	4a0d      	ldr	r2, [pc, #52]	; (1e180 <slm_at_icmp_parse+0x54>)
				LOG_ERR("Failed to parse AT command %d", ret);
   1e14a:	480e      	ldr	r0, [pc, #56]	; (1e184 <slm_at_icmp_parse+0x58>)
   1e14c:	1ad2      	subs	r2, r2, r3
   1e14e:	08d2      	lsrs	r2, r2, #3
   1e150:	0192      	lsls	r2, r2, #6
   1e152:	f042 0201 	orr.w	r2, r2, #1
   1e156:	f016 f9e6 	bl	34526 <log_1>
				return -EINVAL;
   1e15a:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
   1e15e:	bd10      	pop	{r4, pc}
			type = at_parser_cmd_type_get(at_cmd);
   1e160:	4620      	mov	r0, r4
   1e162:	f018 fa5b 	bl	3661c <at_parser_cmd_type_get>
}
   1e166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			ret = icmp_at_list[i].handler(type);
   1e16a:	f7ff bd07 	b.w	1db7c <handle_at_icmp_ping>
	int ret = -ENOENT;
   1e16e:	f06f 0001 	mvn.w	r0, #1
   1e172:	e7f4      	b.n	1e15e <slm_at_icmp_parse+0x32>
   1e174:	0003a0c6 	.word	0x0003a0c6
   1e178:	20023430 	.word	0x20023430
   1e17c:	0003831c 	.word	0x0003831c
   1e180:	000383a4 	.word	0x000383a4
   1e184:	000393de 	.word	0x000393de

0001e188 <slm_at_icmp_clac>:

/**@brief API to list ICMP AT commands
 */
void slm_at_icmp_clac(void)
{
   1e188:	b513      	push	{r0, r1, r4, lr}
	for (int i = 0; i < AT_ICMP_MAX; i++) {
		sprintf(rsp_buf, "%s\r\n", icmp_at_list[i].string);
   1e18a:	4b0a      	ldr	r3, [pc, #40]	; (1e1b4 <slm_at_icmp_clac+0x2c>)
   1e18c:	4c0a      	ldr	r4, [pc, #40]	; (1e1b8 <slm_at_icmp_clac+0x30>)
   1e18e:	f640 228c 	movw	r2, #2700	; 0xa8c
   1e192:	2100      	movs	r1, #0
   1e194:	9300      	str	r3, [sp, #0]
   1e196:	4620      	mov	r0, r4
   1e198:	4b08      	ldr	r3, [pc, #32]	; (1e1bc <slm_at_icmp_clac+0x34>)
   1e19a:	f019 fa6a 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1e19e:	4620      	mov	r0, r4
   1e1a0:	f7fa ff66 	bl	19070 <strlen>
   1e1a4:	4601      	mov	r1, r0
   1e1a6:	4620      	mov	r0, r4
	}
}
   1e1a8:	b002      	add	sp, #8
   1e1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rsp_send(rsp_buf, strlen(rsp_buf));
   1e1ae:	f7fc b81b 	b.w	1a1e8 <rsp_send>
   1e1b2:	bf00      	nop
   1e1b4:	0003a0c6 	.word	0x0003a0c6
   1e1b8:	20028950 	.word	0x20028950
   1e1bc:	000395d7 	.word	0x000395d7

0001e1c0 <slm_at_icmp_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1e1c0:	2000      	movs	r0, #0
   1e1c2:	4b03      	ldr	r3, [pc, #12]	; (1e1d0 <slm_at_icmp_init+0x10>)
   1e1c4:	4a03      	ldr	r2, [pc, #12]	; (1e1d4 <slm_at_icmp_init+0x14>)
   1e1c6:	6018      	str	r0, [r3, #0]
   1e1c8:	e9c3 2001 	strd	r2, r0, [r3, #4]
 */
int slm_at_icmp_init(void)
{
	k_work_init(&my_work, ping_task);
	return 0;
}
   1e1cc:	4770      	bx	lr
   1e1ce:	bf00      	nop
   1e1d0:	200234c0 	.word	0x200234c0
   1e1d4:	0001e071 	.word	0x0001e071

0001e1d8 <fota_dl_handler>:
	return ret;
}
#endif

static void fota_dl_handler(const struct fota_download_evt *evt)
{
   1e1d8:	b507      	push	{r0, r1, r2, lr}
   1e1da:	7803      	ldrb	r3, [r0, #0]
   1e1dc:	2b04      	cmp	r3, #4
   1e1de:	d834      	bhi.n	1e24a <fota_dl_handler+0x72>
   1e1e0:	e8df f003 	tbb	[pc, r3]
   1e1e4:	281b1603 	.word	0x281b1603
   1e1e8:	31          	.byte	0x31
   1e1e9:	00          	.byte	0x00
	switch (evt->id) {
	case FOTA_DOWNLOAD_EVT_PROGRESS:
		sprintf(rsp_buf, "#XFOTA: %d%% downloaded\r\n",
   1e1ea:	6843      	ldr	r3, [r0, #4]
   1e1ec:	f640 228c 	movw	r2, #2700	; 0xa8c
   1e1f0:	9300      	str	r3, [sp, #0]
   1e1f2:	2100      	movs	r1, #0
   1e1f4:	4b16      	ldr	r3, [pc, #88]	; (1e250 <fota_dl_handler+0x78>)
   1e1f6:	4817      	ldr	r0, [pc, #92]	; (1e254 <fota_dl_handler+0x7c>)
   1e1f8:	f019 fa3b 	bl	37672 <__sprintf_chk>
	case FOTA_DOWNLOAD_EVT_ERASE_DONE:
		LOG_INF("FOTA_DOWNLOAD_EVT_ERASE_DONE");
		break;
	case FOTA_DOWNLOAD_EVT_ERROR:
		sprintf(rsp_buf, "#XFOTA: download error.\r\n");
		rsp_send(rsp_buf, strlen(rsp_buf));
   1e1fc:	4815      	ldr	r0, [pc, #84]	; (1e254 <fota_dl_handler+0x7c>)
   1e1fe:	f7fa ff37 	bl	19070 <strlen>
   1e202:	4601      	mov	r1, r0
   1e204:	4813      	ldr	r0, [pc, #76]	; (1e254 <fota_dl_handler+0x7c>)
		break;

	default:
		break;
	}
}
   1e206:	b003      	add	sp, #12
   1e208:	f85d eb04 	ldr.w	lr, [sp], #4
		rsp_send(rsp_buf, strlen(rsp_buf));
   1e20c:	f7fb bfec 	b.w	1a1e8 <rsp_send>
		sprintf(rsp_buf, "#XFOTA: downloaded, reset to apply.\r\n");
   1e210:	4911      	ldr	r1, [pc, #68]	; (1e258 <fota_dl_handler+0x80>)
		sprintf(rsp_buf, "#XFOTA: download error.\r\n");
   1e212:	4810      	ldr	r0, [pc, #64]	; (1e254 <fota_dl_handler+0x7c>)
   1e214:	f019 fa54 	bl	376c0 <strcpy>
   1e218:	e7f0      	b.n	1e1fc <fota_dl_handler+0x24>
   1e21a:	4910      	ldr	r1, [pc, #64]	; (1e25c <fota_dl_handler+0x84>)
   1e21c:	4b10      	ldr	r3, [pc, #64]	; (1e260 <fota_dl_handler+0x88>)
		LOG_INF("FOTA_DOWNLOAD_EVT_ERASE_PENDING");
   1e21e:	4811      	ldr	r0, [pc, #68]	; (1e264 <fota_dl_handler+0x8c>)
   1e220:	1ac9      	subs	r1, r1, r3
   1e222:	08c9      	lsrs	r1, r1, #3
   1e224:	0189      	lsls	r1, r1, #6
   1e226:	f041 0103 	orr.w	r1, r1, #3
}
   1e22a:	b003      	add	sp, #12
   1e22c:	f85d eb04 	ldr.w	lr, [sp], #4
		LOG_INF("FOTA_DOWNLOAD_EVT_ERASE_DONE");
   1e230:	f016 b96a 	b.w	34508 <log_0>
   1e234:	4909      	ldr	r1, [pc, #36]	; (1e25c <fota_dl_handler+0x84>)
   1e236:	4b0a      	ldr	r3, [pc, #40]	; (1e260 <fota_dl_handler+0x88>)
   1e238:	480b      	ldr	r0, [pc, #44]	; (1e268 <fota_dl_handler+0x90>)
   1e23a:	1ac9      	subs	r1, r1, r3
   1e23c:	08c9      	lsrs	r1, r1, #3
   1e23e:	0189      	lsls	r1, r1, #6
   1e240:	f041 0103 	orr.w	r1, r1, #3
   1e244:	e7f1      	b.n	1e22a <fota_dl_handler+0x52>
		sprintf(rsp_buf, "#XFOTA: download error.\r\n");
   1e246:	4909      	ldr	r1, [pc, #36]	; (1e26c <fota_dl_handler+0x94>)
   1e248:	e7e3      	b.n	1e212 <fota_dl_handler+0x3a>
}
   1e24a:	b003      	add	sp, #12
   1e24c:	f85d fb04 	ldr.w	pc, [sp], #4
   1e250:	0003a0d4 	.word	0x0003a0d4
   1e254:	20028950 	.word	0x20028950
   1e258:	0003a0ee 	.word	0x0003a0ee
   1e25c:	0003838c 	.word	0x0003838c
   1e260:	0003831c 	.word	0x0003831c
   1e264:	0003a114 	.word	0x0003a114
   1e268:	0003a134 	.word	0x0003a134
   1e26c:	0003a151 	.word	0x0003a151

0001e270 <do_fota_start.isra.0>:
static int do_fota_start(int op, const char *file_uri, int sec_tag,
   1e270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e274:	4605      	mov	r5, r0
   1e276:	b0bc      	sub	sp, #240	; 0xf0
	http_parser_url_init(&parser);
   1e278:	a804      	add	r0, sp, #16
static int do_fota_start(int op, const char *file_uri, int sec_tag,
   1e27a:	460e      	mov	r6, r1
   1e27c:	4690      	mov	r8, r2
	http_parser_url_init(&parser);
   1e27e:	f017 fa16 	bl	356ae <http_parser_url_init>
	ret = http_parser_parse_url(file_uri, strlen(file_uri), 0, &parser);
   1e282:	4628      	mov	r0, r5
   1e284:	f7fa fef4 	bl	19070 <strlen>
   1e288:	2200      	movs	r2, #0
   1e28a:	4601      	mov	r1, r0
   1e28c:	ab04      	add	r3, sp, #16
   1e28e:	4628      	mov	r0, r5
   1e290:	f005 fe9c 	bl	23fcc <http_parser_parse_url>
	if (ret) {
   1e294:	4604      	mov	r4, r0
   1e296:	b178      	cbz	r0, 1e2b8 <do_fota_start.isra.0+0x48>
   1e298:	493a      	ldr	r1, [pc, #232]	; (1e384 <do_fota_start.isra.0+0x114>)
   1e29a:	4b3b      	ldr	r3, [pc, #236]	; (1e388 <do_fota_start.isra.0+0x118>)
		LOG_ERR("Parse URL error");
   1e29c:	483b      	ldr	r0, [pc, #236]	; (1e38c <do_fota_start.isra.0+0x11c>)
   1e29e:	1ac9      	subs	r1, r1, r3
   1e2a0:	08c9      	lsrs	r1, r1, #3
   1e2a2:	0189      	lsls	r1, r1, #6
   1e2a4:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Parse schema error");
   1e2a8:	f016 f92e 	bl	34508 <log_0>
		return -EINVAL;
   1e2ac:	f06f 0415 	mvn.w	r4, #21
}
   1e2b0:	4620      	mov	r0, r4
   1e2b2:	b03c      	add	sp, #240	; 0xf0
   1e2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (parser.field_set & (1 << UF_SCHEMA)) {
   1e2b8:	f8bd 7010 	ldrh.w	r7, [sp, #16]
	memset(schema, 0x00, 8);
   1e2bc:	e9cd 0002 	strd	r0, r0, [sp, #8]
	if (parser.field_set & (1 << UF_SCHEMA)) {
   1e2c0:	07f9      	lsls	r1, r7, #31
   1e2c2:	d519      	bpl.n	1e2f8 <do_fota_start.isra.0+0x88>
		strncpy(schema,
   1e2c4:	2308      	movs	r3, #8
   1e2c6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1e2ca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e2ce:	4429      	add	r1, r5
   1e2d0:	eb0d 0003 	add.w	r0, sp, r3
   1e2d4:	f019 fa21 	bl	3771a <__strncpy_chk>
	memset(path, 0x00, URI_PATH_MAX);
   1e2d8:	2280      	movs	r2, #128	; 0x80
   1e2da:	4621      	mov	r1, r4
   1e2dc:	a81c      	add	r0, sp, #112	; 0x70
   1e2de:	f019 f8b0 	bl	37442 <memset>
	if (parser.field_set & (1 << UF_PATH)) {
   1e2e2:	073a      	lsls	r2, r7, #28
   1e2e4:	d411      	bmi.n	1e30a <do_fota_start.isra.0+0x9a>
   1e2e6:	4927      	ldr	r1, [pc, #156]	; (1e384 <do_fota_start.isra.0+0x114>)
   1e2e8:	4b27      	ldr	r3, [pc, #156]	; (1e388 <do_fota_start.isra.0+0x118>)
		LOG_ERR("Parse path error");
   1e2ea:	4829      	ldr	r0, [pc, #164]	; (1e390 <do_fota_start.isra.0+0x120>)
   1e2ec:	1ac9      	subs	r1, r1, r3
   1e2ee:	08c9      	lsrs	r1, r1, #3
   1e2f0:	0189      	lsls	r1, r1, #6
   1e2f2:	f041 0101 	orr.w	r1, r1, #1
   1e2f6:	e7d7      	b.n	1e2a8 <do_fota_start.isra.0+0x38>
   1e2f8:	4922      	ldr	r1, [pc, #136]	; (1e384 <do_fota_start.isra.0+0x114>)
   1e2fa:	4b23      	ldr	r3, [pc, #140]	; (1e388 <do_fota_start.isra.0+0x118>)
		LOG_ERR("Parse schema error");
   1e2fc:	4825      	ldr	r0, [pc, #148]	; (1e394 <do_fota_start.isra.0+0x124>)
   1e2fe:	1ac9      	subs	r1, r1, r3
   1e300:	08c9      	lsrs	r1, r1, #3
   1e302:	0189      	lsls	r1, r1, #6
   1e304:	f041 0101 	orr.w	r1, r1, #1
   1e308:	e7ce      	b.n	1e2a8 <do_fota_start.isra.0+0x38>
		strncpy(path,
   1e30a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1e30e:	2380      	movs	r3, #128	; 0x80
   1e310:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1e314:	4429      	add	r1, r5
   1e316:	a81c      	add	r0, sp, #112	; 0x70
   1e318:	f019 f9ff 	bl	3771a <__strncpy_chk>
	memset(hostname, 0x00, URI_HOST_MAX);
   1e31c:	2240      	movs	r2, #64	; 0x40
   1e31e:	4621      	mov	r1, r4
   1e320:	a80c      	add	r0, sp, #48	; 0x30
   1e322:	f019 f88e 	bl	37442 <memset>
	strncpy(hostname, file_uri,
   1e326:	4628      	mov	r0, r5
   1e328:	f7fa fea2 	bl	19070 <strlen>
   1e32c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1e330:	4629      	mov	r1, r5
   1e332:	1a82      	subs	r2, r0, r2
   1e334:	2340      	movs	r3, #64	; 0x40
   1e336:	a80c      	add	r0, sp, #48	; 0x30
   1e338:	f019 f9ef 	bl	3771a <__strncpy_chk>
	if (slm_util_cmd_casecmp(schema, SCHEMA_HTTPS)) {
   1e33c:	4916      	ldr	r1, [pc, #88]	; (1e398 <do_fota_start.isra.0+0x128>)
   1e33e:	a802      	add	r0, sp, #8
   1e340:	f7fb fdec 	bl	19f1c <slm_util_cmd_casecmp>
   1e344:	b950      	cbnz	r0, 1e35c <do_fota_start.isra.0+0xec>
	} else if (slm_util_cmd_casecmp(schema, SCHEMA_HTTP)) {
   1e346:	4915      	ldr	r1, [pc, #84]	; (1e39c <do_fota_start.isra.0+0x12c>)
   1e348:	a802      	add	r0, sp, #8
   1e34a:	f7fb fde7 	bl	19f1c <slm_util_cmd_casecmp>
   1e34e:	2800      	cmp	r0, #0
   1e350:	d0ae      	beq.n	1e2b0 <do_fota_start.isra.0+0x40>
		ret = fota_download_start(hostname, path, -1, apn, 0);
   1e352:	4643      	mov	r3, r8
   1e354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e358:	9400      	str	r4, [sp, #0]
   1e35a:	e00d      	b.n	1e378 <do_fota_start.isra.0+0x108>
		if (sec_tag == INVALID_SEC_TAG) {
   1e35c:	1c73      	adds	r3, r6, #1
   1e35e:	d108      	bne.n	1e372 <do_fota_start.isra.0+0x102>
   1e360:	4908      	ldr	r1, [pc, #32]	; (1e384 <do_fota_start.isra.0+0x114>)
   1e362:	4b09      	ldr	r3, [pc, #36]	; (1e388 <do_fota_start.isra.0+0x118>)
			LOG_ERR("Missing sec_tag");
   1e364:	480e      	ldr	r0, [pc, #56]	; (1e3a0 <do_fota_start.isra.0+0x130>)
   1e366:	1ac9      	subs	r1, r1, r3
   1e368:	08c9      	lsrs	r1, r1, #3
   1e36a:	0189      	lsls	r1, r1, #6
   1e36c:	f041 0101 	orr.w	r1, r1, #1
   1e370:	e79a      	b.n	1e2a8 <do_fota_start.isra.0+0x38>
		ret = fota_download_start(hostname, path, sec_tag, apn, 0);
   1e372:	4643      	mov	r3, r8
   1e374:	4632      	mov	r2, r6
   1e376:	9400      	str	r4, [sp, #0]
		ret = fota_download_start(hostname, path, -1, apn, 0);
   1e378:	a91c      	add	r1, sp, #112	; 0x70
   1e37a:	a80c      	add	r0, sp, #48	; 0x30
   1e37c:	f009 fecc 	bl	28118 <fota_download_start>
   1e380:	4604      	mov	r4, r0
   1e382:	e795      	b.n	1e2b0 <do_fota_start.isra.0+0x40>
   1e384:	0003838c 	.word	0x0003838c
   1e388:	0003831c 	.word	0x0003831c
   1e38c:	0003a16b 	.word	0x0003a16b
   1e390:	0003a194 	.word	0x0003a194
   1e394:	0003a17b 	.word	0x0003a17b
   1e398:	0003a18e 	.word	0x0003a18e
   1e39c:	0003a1b5 	.word	0x0003a1b5
   1e3a0:	0003a1a5 	.word	0x0003a1a5

0001e3a4 <handle_at_fota>:
 *  AT#XFOTA=<op>,<file_uri>[,<sec_tag>[,<apn>]]
 *  AT#XFOTA? TEST command not supported
 *  AT#XFOTA=?
 */
static int handle_at_fota(enum at_cmd_type cmd_type)
{
   1e3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t op;
#if FOTA_FUTURE_FEATURE
	static bool paused;
#endif

	switch (cmd_type) {
   1e3a8:	2801      	cmp	r0, #1
{
   1e3aa:	4606      	mov	r6, r0
   1e3ac:	b0ce      	sub	sp, #312	; 0x138
	switch (cmd_type) {
   1e3ae:	d005      	beq.n	1e3bc <handle_at_fota+0x18>
   1e3b0:	2803      	cmp	r0, #3
   1e3b2:	f000 80a8 	beq.w	1e506 <handle_at_fota+0x162>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&at_param_list) <= 1) {
			return -EINVAL;
   1e3b6:	f06f 0415 	mvn.w	r4, #21
   1e3ba:	e033      	b.n	1e424 <handle_at_fota+0x80>
		if (at_params_valid_count_get(&at_param_list) <= 1) {
   1e3bc:	485b      	ldr	r0, [pc, #364]	; (1e52c <handle_at_fota+0x188>)
   1e3be:	f018 fa72 	bl	368a6 <at_params_valid_count_get>
   1e3c2:	2801      	cmp	r0, #1
   1e3c4:	d9f7      	bls.n	1e3b6 <handle_at_fota+0x12>
		}
		err = at_params_short_get(&at_param_list, 1, &op);
   1e3c6:	4631      	mov	r1, r6
   1e3c8:	4858      	ldr	r0, [pc, #352]	; (1e52c <handle_at_fota+0x188>)
   1e3ca:	f10d 020e 	add.w	r2, sp, #14
   1e3ce:	f018 fa22 	bl	36816 <at_params_short_get>
		if (err < 0) {
   1e3d2:	1e04      	subs	r4, r0, #0
   1e3d4:	db26      	blt.n	1e424 <handle_at_fota+0x80>
			return err;
		}
		if (op == AT_FOTA_ERASE) {
   1e3d6:	f8bd 800e 	ldrh.w	r8, [sp, #14]
   1e3da:	f1b8 0f00 	cmp.w	r8, #0
   1e3de:	d155      	bne.n	1e48c <handle_at_fota+0xe8>
	nrf_socklen_t len = sizeof(offset);
   1e3e0:	2304      	movs	r3, #4
   1e3e2:	4a53      	ldr	r2, [pc, #332]	; (1e530 <handle_at_fota+0x18c>)
   1e3e4:	4d53      	ldr	r5, [pc, #332]	; (1e534 <handle_at_fota+0x190>)
	LOG_INF("Erasing scratch");
   1e3e6:	4854      	ldr	r0, [pc, #336]	; (1e538 <handle_at_fota+0x194>)
   1e3e8:	1aad      	subs	r5, r5, r2
   1e3ea:	08ed      	lsrs	r5, r5, #3
   1e3ec:	01ad      	lsls	r5, r5, #6
   1e3ee:	f045 0103 	orr.w	r1, r5, #3
	nrf_socklen_t len = sizeof(offset);
   1e3f2:	930e      	str	r3, [sp, #56]	; 0x38
	LOG_INF("Erasing scratch");
   1e3f4:	f016 f888 	bl	34508 <log_0>
	fd = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_STREAM, NRF_PROTO_DFU);
   1e3f8:	4631      	mov	r1, r6
   1e3fa:	4630      	mov	r0, r6
   1e3fc:	f240 2203 	movw	r2, #515	; 0x203
   1e400:	f010 ff6c 	bl	2f2dc <nrf_socket>
	if (fd < 0) {
   1e404:	1e06      	subs	r6, r0, #0
	nrf_socklen_t len = sizeof(offset);
   1e406:	af0e      	add	r7, sp, #56	; 0x38
	if (fd < 0) {
   1e408:	da10      	bge.n	1e42c <handle_at_fota+0x88>
		LOG_ERR("nrf_socket error: %d", errno);
   1e40a:	f016 ff84 	bl	35316 <__errno>
   1e40e:	f045 0501 	orr.w	r5, r5, #1
   1e412:	6801      	ldr	r1, [r0, #0]
   1e414:	462a      	mov	r2, r5
   1e416:	4849      	ldr	r0, [pc, #292]	; (1e53c <handle_at_fota+0x198>)
   1e418:	f016 f885 	bl	34526 <log_1>
		return -errno;
   1e41c:	f016 ff7b 	bl	35316 <__errno>
   1e420:	6804      	ldr	r4, [r0, #0]
   1e422:	4264      	negs	r4, r4
	default:
		break;
	}

	return err;
}
   1e424:	4620      	mov	r0, r4
   1e426:	b04e      	add	sp, #312	; 0x138
   1e428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = nrf_setsockopt(fd, NRF_SOL_DFU, NRF_SO_DFU_BACKUP_DELETE,
   1e42c:	4643      	mov	r3, r8
   1e42e:	2206      	movs	r2, #6
   1e430:	f240 2103 	movw	r1, #515	; 0x203
   1e434:	f8cd 8000 	str.w	r8, [sp]
   1e438:	f011 f826 	bl	2f488 <nrf_setsockopt>
	if (err) {
   1e43c:	4604      	mov	r4, r0
   1e43e:	b160      	cbz	r0, 1e45a <handle_at_fota+0xb6>
		LOG_ERR("nrf_setsockopt error: %d", errno);
   1e440:	f016 ff69 	bl	35316 <__errno>
   1e444:	f045 0501 	orr.w	r5, r5, #1
   1e448:	6801      	ldr	r1, [r0, #0]
   1e44a:	462a      	mov	r2, r5
   1e44c:	483c      	ldr	r0, [pc, #240]	; (1e540 <handle_at_fota+0x19c>)
   1e44e:	f016 f86a 	bl	34526 <log_1>
		nrf_close(fd);
   1e452:	4630      	mov	r0, r6
   1e454:	f010 ff54 	bl	2f300 <nrf_close>
   1e458:	e7e0      	b.n	1e41c <handle_at_fota+0x78>
		err = nrf_getsockopt(fd, NRF_SOL_DFU, NRF_SO_DFU_OFFSET,
   1e45a:	2207      	movs	r2, #7
   1e45c:	f240 2103 	movw	r1, #515	; 0x203
   1e460:	4630      	mov	r0, r6
   1e462:	9700      	str	r7, [sp, #0]
   1e464:	ab06      	add	r3, sp, #24
   1e466:	f011 f82b 	bl	2f4c0 <nrf_getsockopt>
		if (err < 0) {
   1e46a:	2800      	cmp	r0, #0
   1e46c:	da05      	bge.n	1e47a <handle_at_fota+0xd6>
   1e46e:	2100      	movs	r1, #0
   1e470:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1e474:	f013 ff40 	bl	322f8 <z_impl_k_sleep>
		err = nrf_getsockopt(fd, NRF_SOL_DFU, NRF_SO_DFU_OFFSET,
   1e478:	e7ef      	b.n	1e45a <handle_at_fota+0xb6>
			LOG_INF("Erase completed");
   1e47a:	4832      	ldr	r0, [pc, #200]	; (1e544 <handle_at_fota+0x1a0>)
   1e47c:	f045 0103 	orr.w	r1, r5, #3
   1e480:	f016 f842 	bl	34508 <log_0>
	nrf_close(fd);
   1e484:	4630      	mov	r0, r6
   1e486:	f010 ff3b 	bl	2f300 <nrf_close>
	return 0;
   1e48a:	e7cb      	b.n	1e424 <handle_at_fota+0x80>
		} else if (op == AT_FOTA_START) {
   1e48c:	f1b8 0f01 	cmp.w	r8, #1
   1e490:	d1c8      	bne.n	1e424 <handle_at_fota+0x80>
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   1e492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (at_params_valid_count_get(&at_param_list) <= 2) {
   1e496:	4825      	ldr	r0, [pc, #148]	; (1e52c <handle_at_fota+0x188>)
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   1e498:	9305      	str	r3, [sp, #20]
			if (at_params_valid_count_get(&at_param_list) <= 2) {
   1e49a:	f018 fa04 	bl	368a6 <at_params_valid_count_get>
   1e49e:	2802      	cmp	r0, #2
   1e4a0:	d989      	bls.n	1e3b6 <handle_at_fota+0x12>
			size = FILE_URI_MAX;
   1e4a2:	f44f 7380 	mov.w	r3, #256	; 0x100
			err = at_params_string_get(&at_param_list, 2, uri,
   1e4a6:	ad0e      	add	r5, sp, #56	; 0x38
			size = FILE_URI_MAX;
   1e4a8:	9304      	str	r3, [sp, #16]
			err = at_params_string_get(&at_param_list, 2, uri,
   1e4aa:	462a      	mov	r2, r5
   1e4ac:	2102      	movs	r1, #2
   1e4ae:	481f      	ldr	r0, [pc, #124]	; (1e52c <handle_at_fota+0x188>)
   1e4b0:	ab04      	add	r3, sp, #16
   1e4b2:	f018 f9d5 	bl	36860 <at_params_string_get>
			if (err) {
   1e4b6:	4604      	mov	r4, r0
   1e4b8:	2800      	cmp	r0, #0
   1e4ba:	d1b3      	bne.n	1e424 <handle_at_fota+0x80>
			uri[size] = '\0';
   1e4bc:	9b04      	ldr	r3, [sp, #16]
   1e4be:	54e8      	strb	r0, [r5, r3]
			if (at_params_valid_count_get(&at_param_list) > 3) {
   1e4c0:	481a      	ldr	r0, [pc, #104]	; (1e52c <handle_at_fota+0x188>)
   1e4c2:	f018 f9f0 	bl	368a6 <at_params_valid_count_get>
   1e4c6:	2803      	cmp	r0, #3
   1e4c8:	d904      	bls.n	1e4d4 <handle_at_fota+0x130>
				at_params_int_get(&at_param_list, 3, &sec_tag);
   1e4ca:	2103      	movs	r1, #3
   1e4cc:	4817      	ldr	r0, [pc, #92]	; (1e52c <handle_at_fota+0x188>)
   1e4ce:	aa05      	add	r2, sp, #20
   1e4d0:	f018 f9b3 	bl	3683a <at_params_int_get>
			if (at_params_valid_count_get(&at_param_list) > 4) {
   1e4d4:	4815      	ldr	r0, [pc, #84]	; (1e52c <handle_at_fota+0x188>)
   1e4d6:	f018 f9e6 	bl	368a6 <at_params_valid_count_get>
   1e4da:	2804      	cmp	r0, #4
   1e4dc:	d911      	bls.n	1e502 <handle_at_fota+0x15e>
				size = APN_MAX;
   1e4de:	2320      	movs	r3, #32
				at_params_string_get(&at_param_list, 4, apn,
   1e4e0:	2104      	movs	r1, #4
				size = APN_MAX;
   1e4e2:	9304      	str	r3, [sp, #16]
				at_params_string_get(&at_param_list, 4, apn,
   1e4e4:	aa06      	add	r2, sp, #24
   1e4e6:	ab04      	add	r3, sp, #16
   1e4e8:	4810      	ldr	r0, [pc, #64]	; (1e52c <handle_at_fota+0x188>)
   1e4ea:	f018 f9b9 	bl	36860 <at_params_string_get>
				apn[size] = '\0';
   1e4ee:	2100      	movs	r1, #0
   1e4f0:	9b04      	ldr	r3, [sp, #16]
   1e4f2:	aa06      	add	r2, sp, #24
   1e4f4:	54d1      	strb	r1, [r2, r3]
				err = do_fota_start(op, uri, sec_tag, NULL);
   1e4f6:	4628      	mov	r0, r5
   1e4f8:	9905      	ldr	r1, [sp, #20]
   1e4fa:	f7ff feb9 	bl	1e270 <do_fota_start.isra.0>
   1e4fe:	4604      	mov	r4, r0
   1e500:	e790      	b.n	1e424 <handle_at_fota+0x80>
   1e502:	2200      	movs	r2, #0
   1e504:	e7f7      	b.n	1e4f6 <handle_at_fota+0x152>
		sprintf(rsp_buf,
   1e506:	2400      	movs	r4, #0
   1e508:	2301      	movs	r3, #1
   1e50a:	4621      	mov	r1, r4
   1e50c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1e510:	e9cd 4300 	strd	r4, r3, [sp]
   1e514:	480c      	ldr	r0, [pc, #48]	; (1e548 <handle_at_fota+0x1a4>)
   1e516:	4b0d      	ldr	r3, [pc, #52]	; (1e54c <handle_at_fota+0x1a8>)
   1e518:	f019 f8ab 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1e51c:	480a      	ldr	r0, [pc, #40]	; (1e548 <handle_at_fota+0x1a4>)
   1e51e:	f7fa fda7 	bl	19070 <strlen>
   1e522:	4601      	mov	r1, r0
   1e524:	4808      	ldr	r0, [pc, #32]	; (1e548 <handle_at_fota+0x1a4>)
   1e526:	f7fb fe5f 	bl	1a1e8 <rsp_send>
		break;
   1e52a:	e77b      	b.n	1e424 <handle_at_fota+0x80>
   1e52c:	20023430 	.word	0x20023430
   1e530:	0003831c 	.word	0x0003831c
   1e534:	0003838c 	.word	0x0003838c
   1e538:	0003a1ba 	.word	0x0003a1ba
   1e53c:	0003a1ca 	.word	0x0003a1ca
   1e540:	0003a1df 	.word	0x0003a1df
   1e544:	0003a1f8 	.word	0x0003a1f8
   1e548:	20028950 	.word	0x20028950
   1e54c:	0003a208 	.word	0x0003a208

0001e550 <slm_at_fota_parse>:

/**@brief API to handle FOTA AT commands
 */
int slm_at_fota_parse(const char *at_cmd)
{
   1e550:	b510      	push	{r4, lr}
	int ret = -ENOENT;

	if (slm_util_cmd_casecmp(at_cmd, AT_FOTA)) {
   1e552:	4911      	ldr	r1, [pc, #68]	; (1e598 <slm_at_fota_parse+0x48>)
{
   1e554:	4604      	mov	r4, r0
	if (slm_util_cmd_casecmp(at_cmd, AT_FOTA)) {
   1e556:	f7fb fce1 	bl	19f1c <slm_util_cmd_casecmp>
   1e55a:	b1d0      	cbz	r0, 1e592 <slm_at_fota_parse+0x42>
		ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
   1e55c:	2100      	movs	r1, #0
   1e55e:	4620      	mov	r0, r4
   1e560:	4a0e      	ldr	r2, [pc, #56]	; (1e59c <slm_at_fota_parse+0x4c>)
   1e562:	f018 f858 	bl	36616 <at_parser_params_from_str>
		if (ret < 0) {
   1e566:	1e01      	subs	r1, r0, #0
   1e568:	da0c      	bge.n	1e584 <slm_at_fota_parse+0x34>
   1e56a:	4b0d      	ldr	r3, [pc, #52]	; (1e5a0 <slm_at_fota_parse+0x50>)
   1e56c:	4a0d      	ldr	r2, [pc, #52]	; (1e5a4 <slm_at_fota_parse+0x54>)
			LOG_ERR("Failed to parse AT command %d", ret);
   1e56e:	480e      	ldr	r0, [pc, #56]	; (1e5a8 <slm_at_fota_parse+0x58>)
   1e570:	1ad2      	subs	r2, r2, r3
   1e572:	08d2      	lsrs	r2, r2, #3
   1e574:	0192      	lsls	r2, r2, #6
   1e576:	f042 0201 	orr.w	r2, r2, #1
   1e57a:	f015 ffd4 	bl	34526 <log_1>
			return -EINVAL;
   1e57e:	f06f 0015 	mvn.w	r0, #21
		}
		ret = handle_at_fota(at_parser_cmd_type_get(at_cmd));
	}

	return ret;
}
   1e582:	bd10      	pop	{r4, pc}
		ret = handle_at_fota(at_parser_cmd_type_get(at_cmd));
   1e584:	4620      	mov	r0, r4
   1e586:	f018 f849 	bl	3661c <at_parser_cmd_type_get>
}
   1e58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = handle_at_fota(at_parser_cmd_type_get(at_cmd));
   1e58e:	f7ff bf09 	b.w	1e3a4 <handle_at_fota>
	int ret = -ENOENT;
   1e592:	f06f 0001 	mvn.w	r0, #1
   1e596:	e7f4      	b.n	1e582 <slm_at_fota_parse+0x32>
   1e598:	0003a236 	.word	0x0003a236
   1e59c:	20023430 	.word	0x20023430
   1e5a0:	0003831c 	.word	0x0003831c
   1e5a4:	0003838c 	.word	0x0003838c
   1e5a8:	000393de 	.word	0x000393de

0001e5ac <slm_at_fota_clac>:

/**@brief API to list FOTA AT commands
 */
void slm_at_fota_clac(void)
{
   1e5ac:	b513      	push	{r0, r1, r4, lr}
	sprintf(rsp_buf, "%s\r\n", AT_FOTA);
   1e5ae:	4b0a      	ldr	r3, [pc, #40]	; (1e5d8 <slm_at_fota_clac+0x2c>)
   1e5b0:	4c0a      	ldr	r4, [pc, #40]	; (1e5dc <slm_at_fota_clac+0x30>)
   1e5b2:	f640 228c 	movw	r2, #2700	; 0xa8c
   1e5b6:	2100      	movs	r1, #0
   1e5b8:	9300      	str	r3, [sp, #0]
   1e5ba:	4620      	mov	r0, r4
   1e5bc:	4b08      	ldr	r3, [pc, #32]	; (1e5e0 <slm_at_fota_clac+0x34>)
   1e5be:	f019 f858 	bl	37672 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1e5c2:	4620      	mov	r0, r4
   1e5c4:	f7fa fd54 	bl	19070 <strlen>
   1e5c8:	4601      	mov	r1, r0
   1e5ca:	4620      	mov	r0, r4
}
   1e5cc:	b002      	add	sp, #8
   1e5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rsp_send(rsp_buf, strlen(rsp_buf));
   1e5d2:	f7fb be09 	b.w	1a1e8 <rsp_send>
   1e5d6:	bf00      	nop
   1e5d8:	0003a236 	.word	0x0003a236
   1e5dc:	20028950 	.word	0x20028950
   1e5e0:	000395d7 	.word	0x000395d7

0001e5e4 <slm_at_fota_init>:

/**@brief API to initialize FOTA AT commands handler
 */
int slm_at_fota_init(void)
{
	return fota_download_init(fota_dl_handler);
   1e5e4:	4801      	ldr	r0, [pc, #4]	; (1e5ec <slm_at_fota_init+0x8>)
   1e5e6:	f009 bdc3 	b.w	28170 <fota_download_init>
   1e5ea:	bf00      	nop
   1e5ec:	0001e1d9 	.word	0x0001e1d9

0001e5f0 <handle_AT_HTTPC_REQUEST>:
 *  AT#XHTTPCREQ=<method>,<resource>,<header>[,<payload_length>]
 *  AT#XHTTPCREQ? READ command not supported
 *  AT#XHTTPCREQ=?
 */
static int handle_AT_HTTPC_REQUEST(enum at_cmd_type cmd_type)
{
   1e5f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int err = -EINVAL;
	int param_count;
	size_t method_sz = HTTPC_METHOD_LEN;
	size_t resource_sz = HTTPC_RES_LEN;
   1e5f4:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e5f8:	2214      	movs	r2, #20
   1e5fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
	size_t headers_sz = HTTPC_HEADER_LEN;
   1e5fe:	f44f 7300 	mov.w	r3, #512	; 0x200
	size_t offset;

	if (httpc.fd == INVALID_SOCKET) {
   1e602:	4f44      	ldr	r7, [pc, #272]	; (1e714 <handle_AT_HTTPC_REQUEST+0x124>)
	size_t headers_sz = HTTPC_HEADER_LEN;
   1e604:	9303      	str	r3, [sp, #12]
	if (httpc.fd == INVALID_SOCKET) {
   1e606:	683b      	ldr	r3, [r7, #0]
{
   1e608:	4604      	mov	r4, r0
	if (httpc.fd == INVALID_SOCKET) {
   1e60a:	3301      	adds	r3, #1
   1e60c:	d10f      	bne.n	1e62e <handle_AT_HTTPC_REQUEST+0x3e>
   1e60e:	4942      	ldr	r1, [pc, #264]	; (1e718 <handle_AT_HTTPC_REQUEST+0x128>)
   1e610:	4b42      	ldr	r3, [pc, #264]	; (1e71c <handle_AT_HTTPC_REQUEST+0x12c>)
		LOG_ERR("Remote host is not connected.");
   1e612:	4843      	ldr	r0, [pc, #268]	; (1e720 <handle_AT_HTTPC_REQUEST+0x130>)
   1e614:	1ac9      	subs	r1, r1, r3
   1e616:	08c9      	lsrs	r1, r1, #3
   1e618:	0189      	lsls	r1, r1, #6
   1e61a:	f041 0101 	orr.w	r1, r1, #1
		return err;
	}

	if (httpc.pl_len > 0) {
		LOG_ERR("Another request is not finished.");
   1e61e:	f015 ff73 	bl	34508 <log_0>
		return err;
   1e622:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
   1e626:	4620      	mov	r0, r4
   1e628:	b004      	add	sp, #16
   1e62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (httpc.pl_len > 0) {
   1e62e:	f8d7 9064 	ldr.w	r9, [r7, #100]	; 0x64
   1e632:	f1b9 0f00 	cmp.w	r9, #0
   1e636:	d008      	beq.n	1e64a <handle_AT_HTTPC_REQUEST+0x5a>
   1e638:	4937      	ldr	r1, [pc, #220]	; (1e718 <handle_AT_HTTPC_REQUEST+0x128>)
   1e63a:	4b38      	ldr	r3, [pc, #224]	; (1e71c <handle_AT_HTTPC_REQUEST+0x12c>)
		LOG_ERR("Another request is not finished.");
   1e63c:	4839      	ldr	r0, [pc, #228]	; (1e724 <handle_AT_HTTPC_REQUEST+0x134>)
   1e63e:	1ac9      	subs	r1, r1, r3
   1e640:	08c9      	lsrs	r1, r1, #3
   1e642:	0189      	lsls	r1, r1, #6
   1e644:	f041 0101 	orr.w	r1, r1, #1
   1e648:	e7e9      	b.n	1e61e <handle_AT_HTTPC_REQUEST+0x2e>
	switch (cmd_type) {
   1e64a:	2801      	cmp	r0, #1
   1e64c:	d1e9      	bne.n	1e622 <handle_AT_HTTPC_REQUEST+0x32>
		param_count = at_params_valid_count_get(&at_param_list);
   1e64e:	4836      	ldr	r0, [pc, #216]	; (1e728 <handle_AT_HTTPC_REQUEST+0x138>)
   1e650:	f018 f929 	bl	368a6 <at_params_valid_count_get>
		if (param_count < 3) {
   1e654:	2802      	cmp	r0, #2
		param_count = at_params_valid_count_get(&at_param_list);
   1e656:	4680      	mov	r8, r0
		if (param_count < 3) {
   1e658:	dde3      	ble.n	1e622 <handle_AT_HTTPC_REQUEST+0x32>
		err = at_params_string_get(&at_param_list, 1,
   1e65a:	4d34      	ldr	r5, [pc, #208]	; (1e72c <handle_AT_HTTPC_REQUEST+0x13c>)
   1e65c:	4621      	mov	r1, r4
   1e65e:	462a      	mov	r2, r5
   1e660:	4831      	ldr	r0, [pc, #196]	; (1e728 <handle_AT_HTTPC_REQUEST+0x138>)
   1e662:	ab01      	add	r3, sp, #4
   1e664:	f018 f8fc 	bl	36860 <at_params_string_get>
		if (err < 0) {
   1e668:	1e04      	subs	r4, r0, #0
   1e66a:	da0b      	bge.n	1e684 <handle_AT_HTTPC_REQUEST+0x94>
			LOG_ERR("Fail to get method string: %d", err);
   1e66c:	4621      	mov	r1, r4
   1e66e:	4a2a      	ldr	r2, [pc, #168]	; (1e718 <handle_AT_HTTPC_REQUEST+0x128>)
   1e670:	4b2a      	ldr	r3, [pc, #168]	; (1e71c <handle_AT_HTTPC_REQUEST+0x12c>)
   1e672:	482f      	ldr	r0, [pc, #188]	; (1e730 <handle_AT_HTTPC_REQUEST+0x140>)
   1e674:	1ad2      	subs	r2, r2, r3
   1e676:	08d2      	lsrs	r2, r2, #3
   1e678:	0192      	lsls	r2, r2, #6
   1e67a:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Fail to get option string: %d", err);
   1e67e:	f015 ff52 	bl	34526 <log_1>
			return err;
   1e682:	e7d0      	b.n	1e626 <handle_AT_HTTPC_REQUEST+0x36>
		data_buf[method_sz] = '\0';
   1e684:	9e01      	ldr	r6, [sp, #4]
		err = at_params_string_get(&at_param_list, 2,
   1e686:	2102      	movs	r1, #2
		data_buf[method_sz] = '\0';
   1e688:	f805 9006 	strb.w	r9, [r5, r6]
		offset = method_sz + 1;
   1e68c:	3601      	adds	r6, #1
		err = at_params_string_get(&at_param_list, 2,
   1e68e:	eb05 0a06 	add.w	sl, r5, r6
   1e692:	4652      	mov	r2, sl
   1e694:	4824      	ldr	r0, [pc, #144]	; (1e728 <handle_AT_HTTPC_REQUEST+0x138>)
   1e696:	ab02      	add	r3, sp, #8
		httpc.method_str = data_buf;
   1e698:	657d      	str	r5, [r7, #84]	; 0x54
		err = at_params_string_get(&at_param_list, 2,
   1e69a:	f018 f8e1 	bl	36860 <at_params_string_get>
		if (err < 0) {
   1e69e:	1e04      	subs	r4, r0, #0
   1e6a0:	da09      	bge.n	1e6b6 <handle_AT_HTTPC_REQUEST+0xc6>
   1e6a2:	4a1d      	ldr	r2, [pc, #116]	; (1e718 <handle_AT_HTTPC_REQUEST+0x128>)
   1e6a4:	4b1d      	ldr	r3, [pc, #116]	; (1e71c <handle_AT_HTTPC_REQUEST+0x12c>)
			LOG_ERR("Fail to get resource string: %d", err);
   1e6a6:	4621      	mov	r1, r4
   1e6a8:	1ad2      	subs	r2, r2, r3
   1e6aa:	08d2      	lsrs	r2, r2, #3
   1e6ac:	0192      	lsls	r2, r2, #6
   1e6ae:	4821      	ldr	r0, [pc, #132]	; (1e734 <handle_AT_HTTPC_REQUEST+0x144>)
   1e6b0:	f042 0201 	orr.w	r2, r2, #1
   1e6b4:	e7e3      	b.n	1e67e <handle_AT_HTTPC_REQUEST+0x8e>
		data_buf[offset + resource_sz] = '\0';
   1e6b6:	9a02      	ldr	r2, [sp, #8]
		err = at_params_string_get(&at_param_list, 3,
   1e6b8:	2103      	movs	r1, #3
		data_buf[offset + resource_sz] = '\0';
   1e6ba:	4416      	add	r6, r2
   1e6bc:	f805 9006 	strb.w	r9, [r5, r6]
		offset = offset + resource_sz + 1;
   1e6c0:	3601      	adds	r6, #1
		err = at_params_string_get(&at_param_list, 3,
   1e6c2:	4435      	add	r5, r6
   1e6c4:	462a      	mov	r2, r5
   1e6c6:	4818      	ldr	r0, [pc, #96]	; (1e728 <handle_AT_HTTPC_REQUEST+0x138>)
   1e6c8:	ab03      	add	r3, sp, #12
		httpc.resource = data_buf + offset;
   1e6ca:	f8c7 a058 	str.w	sl, [r7, #88]	; 0x58
		err = at_params_string_get(&at_param_list, 3,
   1e6ce:	f018 f8c7 	bl	36860 <at_params_string_get>
		if (err < 0) {
   1e6d2:	1e04      	subs	r4, r0, #0
   1e6d4:	da09      	bge.n	1e6ea <handle_AT_HTTPC_REQUEST+0xfa>
   1e6d6:	4a10      	ldr	r2, [pc, #64]	; (1e718 <handle_AT_HTTPC_REQUEST+0x128>)
   1e6d8:	4b10      	ldr	r3, [pc, #64]	; (1e71c <handle_AT_HTTPC_REQUEST+0x12c>)
			LOG_ERR("Fail to get option string: %d", err);
   1e6da:	4621      	mov	r1, r4
   1e6dc:	1ad2      	subs	r2, r2, r3
   1e6de:	08d2      	lsrs	r2, r2, #3
   1e6e0:	0192      	lsls	r2, r2, #6
   1e6e2:	4815      	ldr	r0, [pc, #84]	; (1e738 <handle_AT_HTTPC_REQUEST+0x148>)
   1e6e4:	f042 0201 	orr.w	r2, r2, #1
   1e6e8:	e7c9      	b.n	1e67e <handle_AT_HTTPC_REQUEST+0x8e>
		data_buf[offset + headers_sz] = '\0';
   1e6ea:	9b03      	ldr	r3, [sp, #12]
		if (param_count >= 5) {
   1e6ec:	f1b8 0f04 	cmp.w	r8, #4
		data_buf[offset + headers_sz] = '\0';
   1e6f0:	f805 9003 	strb.w	r9, [r5, r3]
		httpc.headers = data_buf + offset;
   1e6f4:	65fd      	str	r5, [r7, #92]	; 0x5c
		if (param_count >= 5) {
   1e6f6:	dd08      	ble.n	1e70a <handle_AT_HTTPC_REQUEST+0x11a>
			err = at_params_int_get(&at_param_list, 4,
   1e6f8:	2104      	movs	r1, #4
   1e6fa:	480b      	ldr	r0, [pc, #44]	; (1e728 <handle_AT_HTTPC_REQUEST+0x138>)
   1e6fc:	f107 0264 	add.w	r2, r7, #100	; 0x64
   1e700:	f018 f89b 	bl	3683a <at_params_int_get>
			if (err != 0) {
   1e704:	4604      	mov	r4, r0
   1e706:	2800      	cmp	r0, #0
   1e708:	d18d      	bne.n	1e626 <handle_AT_HTTPC_REQUEST+0x36>
	z_impl_k_sem_give(sem);
   1e70a:	480c      	ldr	r0, [pc, #48]	; (1e73c <handle_AT_HTTPC_REQUEST+0x14c>)
   1e70c:	f013 fe1a 	bl	32344 <z_impl_k_sem_give>
}
   1e710:	e789      	b.n	1e626 <handle_AT_HTTPC_REQUEST+0x36>
   1e712:	bf00      	nop
   1e714:	200234e8 	.word	0x200234e8
   1e718:	0003839c 	.word	0x0003839c
   1e71c:	0003831c 	.word	0x0003831c
   1e720:	0003a244 	.word	0x0003a244
   1e724:	0003a262 	.word	0x0003a262
   1e728:	20023430 	.word	0x20023430
   1e72c:	2002b93e 	.word	0x2002b93e
   1e730:	0003a283 	.word	0x0003a283
   1e734:	0003a2a1 	.word	0x0003a2a1
   1e738:	0003a2c1 	.word	0x0003a2c1
   1e73c:	20020894 	.word	0x20020894

0001e740 <do_http_request>:
{
   1e740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (httpc.fd == INVALID_SOCKET) {
   1e744:	4d3b      	ldr	r5, [pc, #236]	; (1e834 <do_http_request+0xf4>)
{
   1e746:	b0c6      	sub	sp, #280	; 0x118
	if (httpc.fd == INVALID_SOCKET) {
   1e748:	682b      	ldr	r3, [r5, #0]
   1e74a:	3301      	adds	r3, #1
   1e74c:	d10c      	bne.n	1e768 <do_http_request+0x28>
   1e74e:	493a      	ldr	r1, [pc, #232]	; (1e838 <do_http_request+0xf8>)
   1e750:	4b3a      	ldr	r3, [pc, #232]	; (1e83c <do_http_request+0xfc>)
		LOG_ERR("Remote host is not connected.");
   1e752:	483b      	ldr	r0, [pc, #236]	; (1e840 <do_http_request+0x100>)
   1e754:	1ac9      	subs	r1, r1, r3
   1e756:	08c9      	lsrs	r1, r1, #3
   1e758:	0189      	lsls	r1, r1, #6
   1e75a:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Request method is not allowed.");
   1e75e:	f015 fed3 	bl	34508 <log_0>
		return -EINVAL;
   1e762:	f06f 0415 	mvn.w	r4, #21
   1e766:	e060      	b.n	1e82a <do_http_request+0xea>
	for (int i = HTTP_DELETE; i <= HTTP_UNLINK; i++) {
   1e768:	2600      	movs	r6, #0
	method = http_method_str_enum(httpc.method_str);
   1e76a:	f8d5 8054 	ldr.w	r8, [r5, #84]	; 0x54
	for (int i = HTTP_DELETE; i <= HTTP_UNLINK; i++) {
   1e76e:	4f35      	ldr	r7, [pc, #212]	; (1e844 <do_http_request+0x104>)
		if (!strncmp(method_str, method_strings[i],
   1e770:	2214      	movs	r2, #20
   1e772:	4640      	mov	r0, r8
   1e774:	f857 1b04 	ldr.w	r1, [r7], #4
   1e778:	f018 ffaa 	bl	376d0 <strncmp>
   1e77c:	4604      	mov	r4, r0
   1e77e:	b310      	cbz	r0, 1e7c6 <do_http_request+0x86>
	for (int i = HTTP_DELETE; i <= HTTP_UNLINK; i++) {
   1e780:	3601      	adds	r6, #1
   1e782:	2e21      	cmp	r6, #33	; 0x21
   1e784:	d1f4      	bne.n	1e770 <do_http_request+0x30>
   1e786:	492c      	ldr	r1, [pc, #176]	; (1e838 <do_http_request+0xf8>)
   1e788:	4b2c      	ldr	r3, [pc, #176]	; (1e83c <do_http_request+0xfc>)
		LOG_ERR("Request method is not allowed.");
   1e78a:	482f      	ldr	r0, [pc, #188]	; (1e848 <do_http_request+0x108>)
   1e78c:	1ac9      	subs	r1, r1, r3
   1e78e:	08c9      	lsrs	r1, r1, #3
   1e790:	0189      	lsls	r1, r1, #6
   1e792:	f041 0101 	orr.w	r1, r1, #1
   1e796:	e7e2      	b.n	1e75e <do_http_request+0x1e>
	} else if (httpc.rsp_completed == false) {
   1e798:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   1e79c:	2b00      	cmp	r3, #0
   1e79e:	d144      	bne.n	1e82a <do_http_request+0xea>
		sprintf(rsp_buf, "#XHTTPCRSP:0,%d\r\n", err);
   1e7a0:	f06f 0567 	mvn.w	r5, #103	; 0x67
   1e7a4:	4621      	mov	r1, r4
   1e7a6:	f640 228c 	movw	r2, #2700	; 0xa8c
   1e7aa:	4b28      	ldr	r3, [pc, #160]	; (1e84c <do_http_request+0x10c>)
   1e7ac:	4828      	ldr	r0, [pc, #160]	; (1e850 <do_http_request+0x110>)
   1e7ae:	9500      	str	r5, [sp, #0]
   1e7b0:	f018 ff5f 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1e7b4:	4826      	ldr	r0, [pc, #152]	; (1e850 <do_http_request+0x110>)
   1e7b6:	f7fa fc5b 	bl	19070 <strlen>
   1e7ba:	4601      	mov	r1, r0
   1e7bc:	4824      	ldr	r0, [pc, #144]	; (1e850 <do_http_request+0x110>)
   1e7be:	f7fb fd13 	bl	1a1e8 <rsp_send>
		err = -ECONNRESET;
   1e7c2:	462c      	mov	r4, r5
   1e7c4:	e031      	b.n	1e82a <do_http_request+0xea>
	memset(&req, 0, sizeof(req));
   1e7c6:	4601      	mov	r1, r0
   1e7c8:	f44f 7288 	mov.w	r2, #272	; 0x110
   1e7cc:	a802      	add	r0, sp, #8
   1e7ce:	f018 fe38 	bl	37442 <memset>
	req.url = httpc.resource;
   1e7d2:	6dab      	ldr	r3, [r5, #88]	; 0x58
	err = http_client_req(httpc.fd, &req, timeout, "");
   1e7d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	req.url = httpc.resource;
   1e7d8:	933b      	str	r3, [sp, #236]	; 0xec
	req.host = httpc.host;
   1e7da:	4b1e      	ldr	r3, [pc, #120]	; (1e854 <do_http_request+0x114>)
	err = http_client_req(httpc.fd, &req, timeout, "");
   1e7dc:	6828      	ldr	r0, [r5, #0]
	req.host = httpc.host;
   1e7de:	933f      	str	r3, [sp, #252]	; 0xfc
	req.protocol = "HTTP/1.1";
   1e7e0:	4b1d      	ldr	r3, [pc, #116]	; (1e858 <do_http_request+0x118>)
	err = http_client_req(httpc.fd, &req, timeout, "");
   1e7e2:	a902      	add	r1, sp, #8
	req.protocol = "HTTP/1.1";
   1e7e4:	933c      	str	r3, [sp, #240]	; 0xf0
	req.response = response_cb;
   1e7e6:	4b1d      	ldr	r3, [pc, #116]	; (1e85c <do_http_request+0x11c>)
	req.method = (enum http_method)method;
   1e7e8:	f88d 60d8 	strb.w	r6, [sp, #216]	; 0xd8
	req.response = response_cb;
   1e7ec:	9337      	str	r3, [sp, #220]	; 0xdc
	req.recv_buf = data_buf;
   1e7ee:	4b1c      	ldr	r3, [pc, #112]	; (1e860 <do_http_request+0x120>)
   1e7f0:	9339      	str	r3, [sp, #228]	; 0xe4
	req.recv_buf_len = HTTPC_FRAG_SIZE;
   1e7f2:	f44f 7310 	mov.w	r3, #576	; 0x240
   1e7f6:	933a      	str	r3, [sp, #232]	; 0xe8
	req.payload_cb =  payload_cb;
   1e7f8:	4b1a      	ldr	r3, [pc, #104]	; (1e864 <do_http_request+0x124>)
   1e7fa:	9341      	str	r3, [sp, #260]	; 0x104
	req.optional_headers_cb = headers_cb;
   1e7fc:	4b1a      	ldr	r3, [pc, #104]	; (1e868 <do_http_request+0x128>)
   1e7fe:	9344      	str	r3, [sp, #272]	; 0x110
	err = http_client_req(httpc.fd, &req, timeout, "");
   1e800:	4b1a      	ldr	r3, [pc, #104]	; (1e86c <do_http_request+0x12c>)
   1e802:	f005 fd5b 	bl	242bc <http_client_req>
	if (err < 0) {
   1e806:	1e06      	subs	r6, r0, #0
   1e808:	dac6      	bge.n	1e798 <do_http_request+0x58>
		sprintf(rsp_buf, "#XHTTPCREQ:%d\r\n", err);
   1e80a:	4621      	mov	r1, r4
   1e80c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1e810:	4b17      	ldr	r3, [pc, #92]	; (1e870 <do_http_request+0x130>)
   1e812:	480f      	ldr	r0, [pc, #60]	; (1e850 <do_http_request+0x110>)
   1e814:	9600      	str	r6, [sp, #0]
   1e816:	f018 ff2c 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1e81a:	480d      	ldr	r0, [pc, #52]	; (1e850 <do_http_request+0x110>)
   1e81c:	f7fa fc28 	bl	19070 <strlen>
   1e820:	4601      	mov	r1, r0
   1e822:	480b      	ldr	r0, [pc, #44]	; (1e850 <do_http_request+0x110>)
   1e824:	f7fb fce0 	bl	1a1e8 <rsp_send>
   1e828:	4634      	mov	r4, r6
}
   1e82a:	4620      	mov	r0, r4
   1e82c:	b046      	add	sp, #280	; 0x118
   1e82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e832:	bf00      	nop
   1e834:	200234e8 	.word	0x200234e8
   1e838:	0003839c 	.word	0x0003839c
   1e83c:	0003831c 	.word	0x0003831c
   1e840:	0003a244 	.word	0x0003a244
   1e844:	00038678 	.word	0x00038678
   1e848:	0003a301 	.word	0x0003a301
   1e84c:	0003a2ef 	.word	0x0003a2ef
   1e850:	20028950 	.word	0x20028950
   1e854:	200234f4 	.word	0x200234f4
   1e858:	0003a320 	.word	0x0003a320
   1e85c:	0001e875 	.word	0x0001e875
   1e860:	2002b93e 	.word	0x2002b93e
   1e864:	0001ec39 	.word	0x0001ec39
   1e868:	0001e905 	.word	0x0001e905
   1e86c:	0003c250 	.word	0x0003c250
   1e870:	0003a2df 	.word	0x0003a2df

0001e874 <response_cb>:
{
   1e874:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data_received += rsp->data_len;
   1e876:	4e1d      	ldr	r6, [pc, #116]	; (1e8ec <response_cb+0x78>)
   1e878:	6944      	ldr	r4, [r0, #20]
   1e87a:	6833      	ldr	r3, [r6, #0]
	if (final_data == HTTP_DATA_MORE) {
   1e87c:	460d      	mov	r5, r1
	data_received += rsp->data_len;
   1e87e:	441c      	add	r4, r3
   1e880:	6034      	str	r4, [r6, #0]
	if (final_data == HTTP_DATA_MORE) {
   1e882:	b9b9      	cbnz	r1, 1e8b4 <response_cb+0x40>
		if (data_received == HTTPC_FRAG_SIZE) {
   1e884:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
   1e888:	d112      	bne.n	1e8b0 <response_cb+0x3c>
			sprintf(rsp_buf, "#XHTTPCRSP:%d,1\r\n",
   1e88a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1e88e:	4b18      	ldr	r3, [pc, #96]	; (1e8f0 <response_cb+0x7c>)
   1e890:	4818      	ldr	r0, [pc, #96]	; (1e8f4 <response_cb+0x80>)
   1e892:	9400      	str	r4, [sp, #0]
   1e894:	f018 feed 	bl	37672 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1e898:	4816      	ldr	r0, [pc, #88]	; (1e8f4 <response_cb+0x80>)
   1e89a:	f7fa fbe9 	bl	19070 <strlen>
   1e89e:	4601      	mov	r1, r0
   1e8a0:	4814      	ldr	r0, [pc, #80]	; (1e8f4 <response_cb+0x80>)
   1e8a2:	f7fb fca1 	bl	1a1e8 <rsp_send>
			rsp_send(data_buf, HTTPC_FRAG_SIZE);
   1e8a6:	4621      	mov	r1, r4
   1e8a8:	4813      	ldr	r0, [pc, #76]	; (1e8f8 <response_cb+0x84>)
   1e8aa:	f7fb fc9d 	bl	1a1e8 <rsp_send>
			data_received = 0;
   1e8ae:	6035      	str	r5, [r6, #0]
}
   1e8b0:	b002      	add	sp, #8
   1e8b2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (final_data == HTTP_DATA_FINAL) {
   1e8b4:	2901      	cmp	r1, #1
   1e8b6:	d1fb      	bne.n	1e8b0 <response_cb+0x3c>
		sprintf(rsp_buf, "#XHTTPCRSP:%d,0\r\n", data_received);
   1e8b8:	4b10      	ldr	r3, [pc, #64]	; (1e8fc <response_cb+0x88>)
   1e8ba:	f640 228c 	movw	r2, #2700	; 0xa8c
   1e8be:	2100      	movs	r1, #0
   1e8c0:	480c      	ldr	r0, [pc, #48]	; (1e8f4 <response_cb+0x80>)
   1e8c2:	9400      	str	r4, [sp, #0]
   1e8c4:	f018 fed5 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1e8c8:	480a      	ldr	r0, [pc, #40]	; (1e8f4 <response_cb+0x80>)
   1e8ca:	f7fa fbd1 	bl	19070 <strlen>
   1e8ce:	4601      	mov	r1, r0
   1e8d0:	4808      	ldr	r0, [pc, #32]	; (1e8f4 <response_cb+0x80>)
   1e8d2:	f7fb fc89 	bl	1a1e8 <rsp_send>
		rsp_send(data_buf, data_received);
   1e8d6:	6831      	ldr	r1, [r6, #0]
   1e8d8:	4807      	ldr	r0, [pc, #28]	; (1e8f8 <response_cb+0x84>)
   1e8da:	f7fb fc85 	bl	1a1e8 <rsp_send>
		httpc.rsp_completed = true;
   1e8de:	4b08      	ldr	r3, [pc, #32]	; (1e900 <response_cb+0x8c>)
   1e8e0:	f883 5070 	strb.w	r5, [r3, #112]	; 0x70
		data_received = 0;
   1e8e4:	2300      	movs	r3, #0
   1e8e6:	6033      	str	r3, [r6, #0]
}
   1e8e8:	e7e2      	b.n	1e8b0 <response_cb+0x3c>
   1e8ea:	bf00      	nop
   1e8ec:	200234e4 	.word	0x200234e4
   1e8f0:	0003a329 	.word	0x0003a329
   1e8f4:	20028950 	.word	0x20028950
   1e8f8:	2002b93e 	.word	0x2002b93e
   1e8fc:	0003a33b 	.word	0x0003a33b
   1e900:	200234e8 	.word	0x200234e8

0001e904 <headers_cb>:
{
   1e904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	len = strlen(httpc.headers);
   1e908:	4e13      	ldr	r6, [pc, #76]	; (1e958 <headers_cb+0x54>)
{
   1e90a:	4607      	mov	r7, r0
	len = strlen(httpc.headers);
   1e90c:	6df0      	ldr	r0, [r6, #92]	; 0x5c
   1e90e:	f7fa fbaf 	bl	19070 <strlen>
	int ret = 0;
   1e912:	2400      	movs	r4, #0
	len = strlen(httpc.headers);
   1e914:	4605      	mov	r5, r0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1e916:	46a0      	mov	r8, r4
	while (len > 0) {
   1e918:	b90d      	cbnz	r5, 1e91e <headers_cb+0x1a>
	return len;
   1e91a:	462c      	mov	r4, r5
   1e91c:	e015      	b.n	1e94a <headers_cb+0x46>
		ret = send(sock, httpc.headers + ret, len, 0);
   1e91e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   1e920:	4421      	add	r1, r4
   1e922:	2300      	movs	r3, #0
   1e924:	462a      	mov	r2, r5
   1e926:	4638      	mov	r0, r7
   1e928:	e9cd 8800 	strd	r8, r8, [sp]
   1e92c:	f016 fa5c 	bl	34de8 <z_impl_zsock_sendto>
		if (ret < 0) {
   1e930:	1e04      	subs	r4, r0, #0
   1e932:	da0e      	bge.n	1e952 <headers_cb+0x4e>
   1e934:	4a09      	ldr	r2, [pc, #36]	; (1e95c <headers_cb+0x58>)
   1e936:	4b0a      	ldr	r3, [pc, #40]	; (1e960 <headers_cb+0x5c>)
			LOG_ERR("send header fail: %d", ret);
   1e938:	4621      	mov	r1, r4
   1e93a:	1ad2      	subs	r2, r2, r3
   1e93c:	08d2      	lsrs	r2, r2, #3
   1e93e:	0192      	lsls	r2, r2, #6
   1e940:	4808      	ldr	r0, [pc, #32]	; (1e964 <headers_cb+0x60>)
   1e942:	f042 0201 	orr.w	r2, r2, #1
   1e946:	f015 fdee 	bl	34526 <log_1>
}
   1e94a:	4620      	mov	r0, r4
   1e94c:	b002      	add	sp, #8
   1e94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len -= ret;
   1e952:	1b2d      	subs	r5, r5, r4
   1e954:	e7e0      	b.n	1e918 <headers_cb+0x14>
   1e956:	bf00      	nop
   1e958:	200234e8 	.word	0x200234e8
   1e95c:	0003839c 	.word	0x0003839c
   1e960:	0003831c 	.word	0x0003831c
   1e964:	0003a34d 	.word	0x0003a34d

0001e968 <resolve_and_connect.constprop.0>:
static int resolve_and_connect(int family, const char *host, int sec_tag)
   1e968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (httpc.sec_transport == false) {
   1e96c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 1eb64 <resolve_and_connect.constprop.0+0x1fc>
static int resolve_and_connect(int family, const char *host, int sec_tag)
   1e970:	b09a      	sub	sp, #104	; 0x68
	if (httpc.sec_transport == false) {
   1e972:	f89a 3004 	ldrb.w	r3, [sl, #4]
static int resolve_and_connect(int family, const char *host, int sec_tag)
   1e976:	4606      	mov	r6, r0
		proto = IPPROTO_TLS_1_2;
   1e978:	2b00      	cmp	r3, #0
	port = htons(httpc.port);
   1e97a:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
	struct addrinfo hints = {
   1e97e:	f04f 0250 	mov.w	r2, #80	; 0x50
	port = htons(httpc.port);
   1e982:	f3c3 2707 	ubfx	r7, r3, #8, #8
static int resolve_and_connect(int family, const char *host, int sec_tag)
   1e986:	4688      	mov	r8, r1
	struct addrinfo hints = {
   1e988:	a806      	add	r0, sp, #24
   1e98a:	f04f 0100 	mov.w	r1, #0
		proto = IPPROTO_TLS_1_2;
   1e98e:	bf0c      	ite	eq
   1e990:	f04f 0906 	moveq.w	r9, #6
   1e994:	f44f 7981 	movne.w	r9, #258	; 0x102
	port = htons(httpc.port);
   1e998:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	struct addrinfo hints = {
   1e99c:	f018 fd51 	bl	37442 <memset>
   1e9a0:	2301      	movs	r3, #1
	return zsock_getaddrinfo(host, service, hints, res);
   1e9a2:	2100      	movs	r1, #0
   1e9a4:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
   1e9a8:	aa06      	add	r2, sp, #24
   1e9aa:	ab03      	add	r3, sp, #12
   1e9ac:	f10a 000c 	add.w	r0, sl, #12
   1e9b0:	9608      	str	r6, [sp, #32]
   1e9b2:	f016 f999 	bl	34ce8 <zsock_getaddrinfo>
   1e9b6:	4c5e      	ldr	r4, [pc, #376]	; (1eb30 <resolve_and_connect.constprop.0+0x1c8>)
   1e9b8:	4b5e      	ldr	r3, [pc, #376]	; (1eb34 <resolve_and_connect.constprop.0+0x1cc>)
	if (err) {
   1e9ba:	4605      	mov	r5, r0
   1e9bc:	1ae4      	subs	r4, r4, r3
   1e9be:	08e4      	lsrs	r4, r4, #3
	port = htons(httpc.port);
   1e9c0:	b2bf      	uxth	r7, r7
	if (err) {
   1e9c2:	01a4      	lsls	r4, r4, #6
   1e9c4:	b1a8      	cbz	r0, 1e9f2 <resolve_and_connect.constprop.0+0x8a>
		LOG_ERR("Failed to resolve hostname %s on %s",
   1e9c6:	f10a 000c 	add.w	r0, sl, #12
   1e9ca:	f001 fd27 	bl	2041c <log_strdup>
   1e9ce:	4a5a      	ldr	r2, [pc, #360]	; (1eb38 <resolve_and_connect.constprop.0+0x1d0>)
   1e9d0:	4601      	mov	r1, r0
   1e9d2:	485a      	ldr	r0, [pc, #360]	; (1eb3c <resolve_and_connect.constprop.0+0x1d4>)
   1e9d4:	f044 0401 	orr.w	r4, r4, #1
   1e9d8:	2e01      	cmp	r6, #1
   1e9da:	bf08      	it	eq
   1e9dc:	4602      	moveq	r2, r0
   1e9de:	4623      	mov	r3, r4
   1e9e0:	4857      	ldr	r0, [pc, #348]	; (1eb40 <resolve_and_connect.constprop.0+0x1d8>)
   1e9e2:	f015 fdb7 	bl	34554 <log_2>
		fd = -1;
   1e9e6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
   1e9ea:	4630      	mov	r0, r6
   1e9ec:	b01a      	add	sp, #104	; 0x68
   1e9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_INF("Attempting to connect over %s",
   1e9f2:	2e01      	cmp	r6, #1
   1e9f4:	bf0c      	ite	eq
   1e9f6:	4851      	ldreq	r0, [pc, #324]	; (1eb3c <resolve_and_connect.constprop.0+0x1d4>)
   1e9f8:	484f      	ldrne	r0, [pc, #316]	; (1eb38 <resolve_and_connect.constprop.0+0x1d0>)
   1e9fa:	f001 fd0f 	bl	2041c <log_strdup>
   1e9fe:	f044 0a03 	orr.w	sl, r4, #3
   1ea02:	4601      	mov	r1, r0
   1ea04:	4652      	mov	r2, sl
   1ea06:	484f      	ldr	r0, [pc, #316]	; (1eb44 <resolve_and_connect.constprop.0+0x1dc>)
   1ea08:	f015 fd8d 	bl	34526 <log_1>
	return z_impl_zsock_socket(family, type, proto);
   1ea0c:	2101      	movs	r1, #1
   1ea0e:	4630      	mov	r0, r6
   1ea10:	464a      	mov	r2, r9
   1ea12:	f002 f9d1 	bl	20db8 <z_impl_zsock_socket>
	if (fd < 0) {
   1ea16:	1e06      	subs	r6, r0, #0
   1ea18:	da11      	bge.n	1ea3e <resolve_and_connect.constprop.0+0xd6>
		LOG_ERR("Failed to create socket, errno %d", errno);
   1ea1a:	f016 fc7c 	bl	35316 <__errno>
   1ea1e:	f044 0401 	orr.w	r4, r4, #1
   1ea22:	4622      	mov	r2, r4
   1ea24:	6801      	ldr	r1, [r0, #0]
   1ea26:	4848      	ldr	r0, [pc, #288]	; (1eb48 <resolve_and_connect.constprop.0+0x1e0>)
			LOG_ERR("Fail to set up TLS credentials: %d", err);
   1ea28:	f015 fd7d 	bl	34526 <log_1>
	zsock_freeaddrinfo(ai);
   1ea2c:	9803      	ldr	r0, [sp, #12]
   1ea2e:	f016 f95d 	bl	34cec <zsock_freeaddrinfo>
	if (err) {
   1ea32:	2d00      	cmp	r5, #0
   1ea34:	d0d9      	beq.n	1e9ea <resolve_and_connect.constprop.0+0x82>
	return z_impl_zsock_close(sock);
   1ea36:	4630      	mov	r0, r6
   1ea38:	f016 f969 	bl	34d0e <z_impl_zsock_close>
   1ea3c:	e7d3      	b.n	1e9e6 <resolve_and_connect.constprop.0+0x7e>
	if (proto == IPPROTO_TLS_1_2) {
   1ea3e:	f5b9 7f81 	cmp.w	r9, #258	; 0x102
   1ea42:	d150      	bne.n	1eae6 <resolve_and_connect.constprop.0+0x17e>
	verify = TLS_PEER_VERIFY_REQUIRED;
   1ea44:	2502      	movs	r5, #2
		LOG_INF("Setting up TLS credentials");
   1ea46:	4841      	ldr	r0, [pc, #260]	; (1eb4c <resolve_and_connect.constprop.0+0x1e4>)
   1ea48:	f044 0103 	orr.w	r1, r4, #3
   1ea4c:	f015 fd5c 	bl	34508 <log_0>
	sec_tag_t sec_tag_list[] = { sec_tag };
   1ea50:	f8cd 8014 	str.w	r8, [sp, #20]
	verify = TLS_PEER_VERIFY_REQUIRED;
   1ea54:	9504      	str	r5, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1ea56:	f04f 0804 	mov.w	r8, #4
   1ea5a:	2205      	movs	r2, #5
   1ea5c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1ea60:	4630      	mov	r0, r6
   1ea62:	f8cd 8000 	str.w	r8, [sp]
   1ea66:	ab04      	add	r3, sp, #16
   1ea68:	f016 fa1a 	bl	34ea0 <z_impl_zsock_setsockopt>
	if (err) {
   1ea6c:	b178      	cbz	r0, 1ea8e <resolve_and_connect.constprop.0+0x126>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   1ea6e:	f016 fc52 	bl	35316 <__errno>
   1ea72:	f044 0501 	orr.w	r5, r4, #1
   1ea76:	462a      	mov	r2, r5
   1ea78:	6801      	ldr	r1, [r0, #0]
   1ea7a:	4835      	ldr	r0, [pc, #212]	; (1eb50 <resolve_and_connect.constprop.0+0x1e8>)
		LOG_ERR("Failed to set socket security tag, errno %d", errno);
   1ea7c:	f015 fd53 	bl	34526 <log_1>
		return -1;
   1ea80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			LOG_ERR("Fail to set up TLS credentials: %d", err);
   1ea84:	4629      	mov	r1, r5
   1ea86:	4833      	ldr	r0, [pc, #204]	; (1eb54 <resolve_and_connect.constprop.0+0x1ec>)
   1ea88:	f044 0201 	orr.w	r2, r4, #1
   1ea8c:	e7cc      	b.n	1ea28 <resolve_and_connect.constprop.0+0xc0>
   1ea8e:	2201      	movs	r2, #1
   1ea90:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1ea94:	4630      	mov	r0, r6
   1ea96:	f8cd 8000 	str.w	r8, [sp]
   1ea9a:	ab05      	add	r3, sp, #20
   1ea9c:	f016 fa00 	bl	34ea0 <z_impl_zsock_setsockopt>
	if (err) {
   1eaa0:	b138      	cbz	r0, 1eab2 <resolve_and_connect.constprop.0+0x14a>
		LOG_ERR("Failed to set socket security tag, errno %d", errno);
   1eaa2:	f016 fc38 	bl	35316 <__errno>
   1eaa6:	f044 0501 	orr.w	r5, r4, #1
   1eaaa:	6801      	ldr	r1, [r0, #0]
   1eaac:	462a      	mov	r2, r5
   1eaae:	482a      	ldr	r0, [pc, #168]	; (1eb58 <resolve_and_connect.constprop.0+0x1f0>)
   1eab0:	e7e4      	b.n	1ea7c <resolve_and_connect.constprop.0+0x114>
   1eab2:	2341      	movs	r3, #65	; 0x41
   1eab4:	462a      	mov	r2, r5
   1eab6:	9300      	str	r3, [sp, #0]
   1eab8:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1eabc:	4630      	mov	r0, r6
   1eabe:	4b27      	ldr	r3, [pc, #156]	; (1eb5c <resolve_and_connect.constprop.0+0x1f4>)
   1eac0:	f016 f9ee 	bl	34ea0 <z_impl_zsock_setsockopt>
	if (err < 0) {
   1eac4:	2800      	cmp	r0, #0
   1eac6:	da0e      	bge.n	1eae6 <resolve_and_connect.constprop.0+0x17e>
		LOG_ERR("Failed to set TLS_HOSTNAME option: %d", errno);
   1eac8:	f016 fc25 	bl	35316 <__errno>
   1eacc:	f044 0501 	orr.w	r5, r4, #1
   1ead0:	462a      	mov	r2, r5
   1ead2:	6801      	ldr	r1, [r0, #0]
   1ead4:	4822      	ldr	r0, [pc, #136]	; (1eb60 <resolve_and_connect.constprop.0+0x1f8>)
   1ead6:	f015 fd26 	bl	34526 <log_1>
		return -errno;
   1eada:	f016 fc1c 	bl	35316 <__errno>
   1eade:	6803      	ldr	r3, [r0, #0]
   1eae0:	425d      	negs	r5, r3
		if (err) {
   1eae2:	2b00      	cmp	r3, #0
   1eae4:	d1ce      	bne.n	1ea84 <resolve_and_connect.constprop.0+0x11c>
	err = -1;
   1eae6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   1eaea:	f8dd 800c 	ldr.w	r8, [sp, #12]
			LOG_ERR("Unable to connect, errno %d", errno);
   1eaee:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1eb68 <resolve_and_connect.constprop.0+0x200>
   1eaf2:	f044 0401 	orr.w	r4, r4, #1
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   1eaf6:	f1b8 0f00 	cmp.w	r8, #0
   1eafa:	d097      	beq.n	1ea2c <resolve_and_connect.constprop.0+0xc4>
		struct sockaddr *const sa = addr->ai_addr;
   1eafc:	f8d8 1018 	ldr.w	r1, [r8, #24]
		switch (sa->sa_family) {
   1eb00:	880b      	ldrh	r3, [r1, #0]
   1eb02:	2b01      	cmp	r3, #1
   1eb04:	d001      	beq.n	1eb0a <resolve_and_connect.constprop.0+0x1a2>
   1eb06:	2b02      	cmp	r3, #2
   1eb08:	d100      	bne.n	1eb0c <resolve_and_connect.constprop.0+0x1a4>
			((struct sockaddr_in *)sa)->sin_port = port;
   1eb0a:	804f      	strh	r7, [r1, #2]
		err = connect(fd, sa, addr->ai_addrlen);
   1eb0c:	f8d8 2014 	ldr.w	r2, [r8, #20]
	return z_impl_zsock_connect(sock, addr, addrlen);
   1eb10:	4630      	mov	r0, r6
   1eb12:	f016 f929 	bl	34d68 <z_impl_zsock_connect>
		if (err) {
   1eb16:	4605      	mov	r5, r0
   1eb18:	2800      	cmp	r0, #0
   1eb1a:	d087      	beq.n	1ea2c <resolve_and_connect.constprop.0+0xc4>
			LOG_ERR("Unable to connect, errno %d", errno);
   1eb1c:	f016 fbfb 	bl	35316 <__errno>
   1eb20:	4622      	mov	r2, r4
   1eb22:	6801      	ldr	r1, [r0, #0]
   1eb24:	4648      	mov	r0, r9
   1eb26:	f015 fcfe 	bl	34526 <log_1>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   1eb2a:	f8d8 8000 	ldr.w	r8, [r8]
   1eb2e:	e7e2      	b.n	1eaf6 <resolve_and_connect.constprop.0+0x18e>
   1eb30:	0003839c 	.word	0x0003839c
   1eb34:	0003831c 	.word	0x0003831c
   1eb38:	0003a367 	.word	0x0003a367
   1eb3c:	0003a362 	.word	0x0003a362
   1eb40:	0003a36c 	.word	0x0003a36c
   1eb44:	0003a390 	.word	0x0003a390
   1eb48:	0003a3ae 	.word	0x0003a3ae
   1eb4c:	0003a3d0 	.word	0x0003a3d0
   1eb50:	0003a3eb 	.word	0x0003a3eb
   1eb54:	0003a469 	.word	0x0003a469
   1eb58:	0003a417 	.word	0x0003a417
   1eb5c:	200234f4 	.word	0x200234f4
   1eb60:	0003a443 	.word	0x0003a443
   1eb64:	200234e8 	.word	0x200234e8
   1eb68:	0003a48c 	.word	0x0003a48c

0001eb6c <do_http_disconnect>:
{
   1eb6c:	b510      	push	{r4, lr}
	if (httpc.fd != INVALID_SOCKET) {
   1eb6e:	4c15      	ldr	r4, [pc, #84]	; (1ebc4 <do_http_disconnect+0x58>)
   1eb70:	6820      	ldr	r0, [r4, #0]
   1eb72:	1c43      	adds	r3, r0, #1
   1eb74:	d022      	beq.n	1ebbc <do_http_disconnect+0x50>
	return z_impl_zsock_close(sock);
   1eb76:	f016 f8ca 	bl	34d0e <z_impl_zsock_close>
		httpc.fd = INVALID_SOCKET;
   1eb7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eb7e:	6023      	str	r3, [r4, #0]
	if (httpc.pl_len > 0) {
   1eb80:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1eb82:	b173      	cbz	r3, 1eba2 <do_http_disconnect+0x36>
   1eb84:	4b10      	ldr	r3, [pc, #64]	; (1ebc8 <do_http_disconnect+0x5c>)
   1eb86:	4911      	ldr	r1, [pc, #68]	; (1ebcc <do_http_disconnect+0x60>)
		LOG_ERR("Exit request");
   1eb88:	4811      	ldr	r0, [pc, #68]	; (1ebd0 <do_http_disconnect+0x64>)
   1eb8a:	1ac9      	subs	r1, r1, r3
   1eb8c:	08c9      	lsrs	r1, r1, #3
   1eb8e:	0189      	lsls	r1, r1, #6
   1eb90:	f041 0101 	orr.w	r1, r1, #1
   1eb94:	f015 fcb8 	bl	34508 <log_0>
		httpc.pl_len = 0;
   1eb98:	2300      	movs	r3, #0
   1eb9a:	6663      	str	r3, [r4, #100]	; 0x64
	z_impl_k_sem_give(sem);
   1eb9c:	480d      	ldr	r0, [pc, #52]	; (1ebd4 <do_http_disconnect+0x68>)
   1eb9e:	f013 fbd1 	bl	32344 <z_impl_k_sem_give>
	sprintf(rsp_buf, "#XHTTPCCON:0\r\n");
   1eba2:	490d      	ldr	r1, [pc, #52]	; (1ebd8 <do_http_disconnect+0x6c>)
   1eba4:	480d      	ldr	r0, [pc, #52]	; (1ebdc <do_http_disconnect+0x70>)
   1eba6:	f018 fd8b 	bl	376c0 <strcpy>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1ebaa:	480c      	ldr	r0, [pc, #48]	; (1ebdc <do_http_disconnect+0x70>)
   1ebac:	f7fa fa60 	bl	19070 <strlen>
   1ebb0:	4601      	mov	r1, r0
   1ebb2:	480a      	ldr	r0, [pc, #40]	; (1ebdc <do_http_disconnect+0x70>)
   1ebb4:	f7fb fb18 	bl	1a1e8 <rsp_send>
	return err;
   1ebb8:	2000      	movs	r0, #0
}
   1ebba:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
   1ebbc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ebc0:	e7fb      	b.n	1ebba <do_http_disconnect+0x4e>
   1ebc2:	bf00      	nop
   1ebc4:	200234e8 	.word	0x200234e8
   1ebc8:	0003831c 	.word	0x0003831c
   1ebcc:	0003839c 	.word	0x0003839c
   1ebd0:	0003a4a8 	.word	0x0003a4a8
   1ebd4:	20020894 	.word	0x20020894
   1ebd8:	0003a4b5 	.word	0x0003a4b5
   1ebdc:	20028950 	.word	0x20028950

0001ebe0 <httpc_thread_fn>:
	}
	return 0;
}

static void httpc_thread_fn(void *arg1, void *arg2, void *arg3)
{
   1ebe0:	b538      	push	{r3, r4, r5, lr}
   1ebe2:	4c10      	ldr	r4, [pc, #64]	; (1ec24 <httpc_thread_fn+0x44>)
   1ebe4:	4b10      	ldr	r3, [pc, #64]	; (1ec28 <httpc_thread_fn+0x48>)
	return z_impl_k_sem_take(sem, timeout);
   1ebe6:	4d11      	ldr	r5, [pc, #68]	; (1ec2c <httpc_thread_fn+0x4c>)
   1ebe8:	1ae4      	subs	r4, r4, r3
   1ebea:	08e4      	lsrs	r4, r4, #3
	while (1) {
		/* Don't go any further until sending HTTP request */
		k_sem_take(&http_req_sem, K_FOREVER);
		err = do_http_request();
		if (err < 0) {
			LOG_ERR("do_http_request fail:%d", err);
   1ebec:	01a4      	lsls	r4, r4, #6
   1ebee:	f044 0401 	orr.w	r4, r4, #1
   1ebf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ebf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ebfa:	4628      	mov	r0, r5
   1ebfc:	f013 fbc8 	bl	32390 <z_impl_k_sem_take>
		err = do_http_request();
   1ec00:	f7ff fd9e 	bl	1e740 <do_http_request>
		if (err < 0) {
   1ec04:	1e01      	subs	r1, r0, #0
   1ec06:	daf4      	bge.n	1ebf2 <httpc_thread_fn+0x12>
			LOG_ERR("do_http_request fail:%d", err);
   1ec08:	4622      	mov	r2, r4
   1ec0a:	4809      	ldr	r0, [pc, #36]	; (1ec30 <httpc_thread_fn+0x50>)
   1ec0c:	f015 fc8b 	bl	34526 <log_1>
			/* Disconnect from server */
			err = do_http_disconnect();
   1ec10:	f7ff ffac 	bl	1eb6c <do_http_disconnect>
			if (err) {
   1ec14:	4601      	mov	r1, r0
   1ec16:	2800      	cmp	r0, #0
   1ec18:	d0eb      	beq.n	1ebf2 <httpc_thread_fn+0x12>
				LOG_ERR("Fail to disconnect. Error: %d", err);
   1ec1a:	4622      	mov	r2, r4
   1ec1c:	4805      	ldr	r0, [pc, #20]	; (1ec34 <httpc_thread_fn+0x54>)
   1ec1e:	f015 fc82 	bl	34526 <log_1>
	while (1) {
   1ec22:	e7e6      	b.n	1ebf2 <httpc_thread_fn+0x12>
   1ec24:	0003839c 	.word	0x0003839c
   1ec28:	0003831c 	.word	0x0003831c
   1ec2c:	20020894 	.word	0x20020894
   1ec30:	0003a4c4 	.word	0x0003a4c4
   1ec34:	0003a4dc 	.word	0x0003a4dc

0001ec38 <payload_cb>:
{
   1ec38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (httpc.pl_len > 0) {
   1ec3c:	4c3e      	ldr	r4, [pc, #248]	; (1ed38 <payload_cb+0x100>)
{
   1ec3e:	4680      	mov	r8, r0
	if (httpc.pl_len > 0) {
   1ec40:	6e65      	ldr	r5, [r4, #100]	; 0x64
   1ec42:	2d00      	cmp	r5, #0
   1ec44:	d045      	beq.n	1ecd2 <payload_cb+0x9a>
		sprintf(rsp_buf, "#XHTTPCREQ:1\r\n");
   1ec46:	493d      	ldr	r1, [pc, #244]	; (1ed3c <payload_cb+0x104>)
   1ec48:	483d      	ldr	r0, [pc, #244]	; (1ed40 <payload_cb+0x108>)
   1ec4a:	f018 fd39 	bl	376c0 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ec4e:	483c      	ldr	r0, [pc, #240]	; (1ed40 <payload_cb+0x108>)
   1ec50:	f7fa fa0e 	bl	19070 <strlen>
	size_t total_sent = 0;
   1ec54:	2500      	movs	r5, #0
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ec56:	4601      	mov	r1, r0
   1ec58:	4839      	ldr	r0, [pc, #228]	; (1ed40 <payload_cb+0x108>)
   1ec5a:	f7fb fac5 	bl	1a1e8 <rsp_send>
   1ec5e:	4e39      	ldr	r6, [pc, #228]	; (1ed44 <payload_cb+0x10c>)
   1ec60:	4939      	ldr	r1, [pc, #228]	; (1ed48 <payload_cb+0x110>)
   1ec62:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 1ed60 <payload_cb+0x128>
   1ec66:	1a76      	subs	r6, r6, r1
   1ec68:	08f6      	lsrs	r6, r6, #3
				LOG_WRN("send unexpected payload");
   1ec6a:	ea4f 1986 	mov.w	r9, r6, lsl #6
   1ec6e:	f049 0902 	orr.w	r9, r9, #2
   1ec72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ec76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ec7a:	4650      	mov	r0, sl
   1ec7c:	f013 fb88 	bl	32390 <z_impl_k_sem_take>
			if (httpc.pl_len == 0) {
   1ec80:	6e67      	ldr	r7, [r4, #100]	; 0x64
   1ec82:	b95f      	cbnz	r7, 1ec9c <payload_cb+0x64>
				LOG_INF("abort sending payload");
   1ec84:	01b1      	lsls	r1, r6, #6
   1ec86:	4831      	ldr	r0, [pc, #196]	; (1ed4c <payload_cb+0x114>)
   1ec88:	f041 0103 	orr.w	r1, r1, #3
   1ec8c:	f015 fc3c 	bl	34508 <log_0>
				return -ECONNABORTED;
   1ec90:	f06f 0070 	mvn.w	r0, #112	; 0x70
				httpc.pl_sent = 0;
   1ec94:	66e7      	str	r7, [r4, #108]	; 0x6c
}
   1ec96:	b002      	add	sp, #8
   1ec98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (total_sent + httpc.pl_to_send > httpc.pl_len) {
   1ec9c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1ec9e:	442b      	add	r3, r5
   1eca0:	429f      	cmp	r7, r3
   1eca2:	d206      	bcs.n	1ecb2 <payload_cb+0x7a>
				LOG_WRN("send unexpected payload");
   1eca4:	4649      	mov	r1, r9
   1eca6:	482a      	ldr	r0, [pc, #168]	; (1ed50 <payload_cb+0x118>)
   1eca8:	f015 fc2e 	bl	34508 <log_0>
				httpc.pl_to_send = httpc.pl_len - total_sent;
   1ecac:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1ecae:	1b5b      	subs	r3, r3, r5
   1ecb0:	66a3      	str	r3, [r4, #104]	; 0x68
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1ecb2:	2700      	movs	r7, #0
			while (httpc.pl_sent < httpc.pl_to_send) {
   1ecb4:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   1ecb8:	4293      	cmp	r3, r2
   1ecba:	d317      	bcc.n	1ecec <payload_cb+0xb4>
			if (total_sent == httpc.pl_len) {
   1ecbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1ecbe:	429d      	cmp	r5, r3
				httpc.pl_len = 0;
   1ecc0:	bf04      	itt	eq
   1ecc2:	2300      	moveq	r3, #0
   1ecc4:	6663      	streq	r3, [r4, #100]	; 0x64
	z_impl_k_sem_give(sem);
   1ecc6:	4823      	ldr	r0, [pc, #140]	; (1ed54 <payload_cb+0x11c>)
   1ecc8:	f013 fb3c 	bl	32344 <z_impl_k_sem_give>
		} while (total_sent < httpc.pl_len);
   1eccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1ecce:	429d      	cmp	r5, r3
   1ecd0:	d3cf      	bcc.n	1ec72 <payload_cb+0x3a>
		sprintf(rsp_buf, "#XHTTPCREQ:0\r\n");
   1ecd2:	4921      	ldr	r1, [pc, #132]	; (1ed58 <payload_cb+0x120>)
   1ecd4:	481a      	ldr	r0, [pc, #104]	; (1ed40 <payload_cb+0x108>)
   1ecd6:	f018 fcf3 	bl	376c0 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ecda:	4819      	ldr	r0, [pc, #100]	; (1ed40 <payload_cb+0x108>)
   1ecdc:	f7fa f9c8 	bl	19070 <strlen>
   1ece0:	4601      	mov	r1, r0
   1ece2:	4817      	ldr	r0, [pc, #92]	; (1ed40 <payload_cb+0x108>)
   1ece4:	f7fb fa80 	bl	1a1e8 <rsp_send>
	return total_sent;
   1ece8:	4628      	mov	r0, r5
   1ecea:	e7d4      	b.n	1ec96 <payload_cb+0x5e>
				ret = send(sock, httpc.payload + httpc.pl_sent,
   1ecec:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1ecee:	4419      	add	r1, r3
					   MIN(httpc.pl_to_send - httpc.pl_sent,
   1ecf0:	1ad2      	subs	r2, r2, r3
   1ecf2:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
   1ecf6:	bf28      	it	cs
   1ecf8:	f44f 7210 	movcs.w	r2, #576	; 0x240
   1ecfc:	2300      	movs	r3, #0
   1ecfe:	4640      	mov	r0, r8
   1ed00:	e9cd 7700 	strd	r7, r7, [sp]
   1ed04:	f016 f870 	bl	34de8 <z_impl_zsock_sendto>
				if (ret < 0) {
   1ed08:	1e01      	subs	r1, r0, #0
   1ed0a:	da0f      	bge.n	1ed2c <payload_cb+0xf4>
					LOG_ERR("send fail: %d", ret);
   1ed0c:	01b2      	lsls	r2, r6, #6
   1ed0e:	4813      	ldr	r0, [pc, #76]	; (1ed5c <payload_cb+0x124>)
   1ed10:	f042 0201 	orr.w	r2, r2, #1
   1ed14:	f015 fc07 	bl	34526 <log_1>
					httpc.pl_len = 0;
   1ed18:	6667      	str	r7, [r4, #100]	; 0x64
					httpc.pl_sent = 0;
   1ed1a:	66e7      	str	r7, [r4, #108]	; 0x6c
   1ed1c:	480d      	ldr	r0, [pc, #52]	; (1ed54 <payload_cb+0x11c>)
   1ed1e:	f013 fb11 	bl	32344 <z_impl_k_sem_give>
					return -errno;
   1ed22:	f016 faf8 	bl	35316 <__errno>
   1ed26:	6800      	ldr	r0, [r0, #0]
   1ed28:	4240      	negs	r0, r0
   1ed2a:	e7b4      	b.n	1ec96 <payload_cb+0x5e>
				httpc.pl_sent += ret;
   1ed2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
				total_sent += ret;
   1ed2e:	440d      	add	r5, r1
				httpc.pl_sent += ret;
   1ed30:	440b      	add	r3, r1
   1ed32:	66e3      	str	r3, [r4, #108]	; 0x6c
				total_sent += ret;
   1ed34:	e7be      	b.n	1ecb4 <payload_cb+0x7c>
   1ed36:	bf00      	nop
   1ed38:	200234e8 	.word	0x200234e8
   1ed3c:	0003a4fa 	.word	0x0003a4fa
   1ed40:	20028950 	.word	0x20028950
   1ed44:	0003839c 	.word	0x0003839c
   1ed48:	0003831c 	.word	0x0003831c
   1ed4c:	0003a509 	.word	0x0003a509
   1ed50:	0003a51f 	.word	0x0003a51f
   1ed54:	2002087c 	.word	0x2002087c
   1ed58:	0003a545 	.word	0x0003a545
   1ed5c:	0003a537 	.word	0x0003a537
   1ed60:	20020894 	.word	0x20020894

0001ed64 <handle_AT_HTTPC_CONNECT>:
	size_t host_sz = HTTPC_HOST_LEN;
   1ed64:	2340      	movs	r3, #64	; 0x40
{
   1ed66:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cmd_type) {
   1ed68:	2802      	cmp	r0, #2
{
   1ed6a:	b08b      	sub	sp, #44	; 0x2c
   1ed6c:	4604      	mov	r4, r0
	size_t host_sz = HTTPC_HOST_LEN;
   1ed6e:	9307      	str	r3, [sp, #28]
	switch (cmd_type) {
   1ed70:	f000 80fc 	beq.w	1ef6c <handle_AT_HTTPC_CONNECT+0x208>
   1ed74:	2803      	cmp	r0, #3
   1ed76:	f000 8121 	beq.w	1efbc <handle_AT_HTTPC_CONNECT+0x258>
   1ed7a:	2801      	cmp	r0, #1
   1ed7c:	d103      	bne.n	1ed86 <handle_AT_HTTPC_CONNECT+0x22>
		if (at_params_valid_count_get(&at_param_list) == 0) {
   1ed7e:	489a      	ldr	r0, [pc, #616]	; (1efe8 <handle_AT_HTTPC_CONNECT+0x284>)
   1ed80:	f017 fd91 	bl	368a6 <at_params_valid_count_get>
   1ed84:	b910      	cbnz	r0, 1ed8c <handle_AT_HTTPC_CONNECT+0x28>
	switch (cmd_type) {
   1ed86:	f06f 0415 	mvn.w	r4, #21
   1ed8a:	e012      	b.n	1edb2 <handle_AT_HTTPC_CONNECT+0x4e>
		err = at_params_short_get(&at_param_list, 1, &op);
   1ed8c:	4621      	mov	r1, r4
   1ed8e:	4896      	ldr	r0, [pc, #600]	; (1efe8 <handle_AT_HTTPC_CONNECT+0x284>)
   1ed90:	f10d 021a 	add.w	r2, sp, #26
   1ed94:	f017 fd3f 	bl	36816 <at_params_short_get>
		if (err < 0) {
   1ed98:	1e04      	subs	r4, r0, #0
   1ed9a:	da0d      	bge.n	1edb8 <handle_AT_HTTPC_CONNECT+0x54>
			LOG_ERR("Fail to get op: %d", err);
   1ed9c:	4621      	mov	r1, r4
   1ed9e:	4a93      	ldr	r2, [pc, #588]	; (1efec <handle_AT_HTTPC_CONNECT+0x288>)
   1eda0:	4b93      	ldr	r3, [pc, #588]	; (1eff0 <handle_AT_HTTPC_CONNECT+0x28c>)
   1eda2:	4894      	ldr	r0, [pc, #592]	; (1eff4 <handle_AT_HTTPC_CONNECT+0x290>)
   1eda4:	1ad2      	subs	r2, r2, r3
   1eda6:	08d2      	lsrs	r2, r2, #3
   1eda8:	0192      	lsls	r2, r2, #6
   1edaa:	f042 0201 	orr.w	r2, r2, #1
				LOG_ERR("Fail to get host: %d", err);
   1edae:	f015 fbba 	bl	34526 <log_1>
}
   1edb2:	4620      	mov	r0, r4
   1edb4:	b00b      	add	sp, #44	; 0x2c
   1edb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (op == AT_HTTPCCON_CONNECT) {
   1edb8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1edbc:	2b01      	cmp	r3, #1
   1edbe:	f040 80c2 	bne.w	1ef46 <handle_AT_HTTPC_CONNECT+0x1e2>
			if (at_params_valid_count_get(&at_param_list) <= 3) {
   1edc2:	4889      	ldr	r0, [pc, #548]	; (1efe8 <handle_AT_HTTPC_CONNECT+0x284>)
   1edc4:	f017 fd6f 	bl	368a6 <at_params_valid_count_get>
   1edc8:	2803      	cmp	r0, #3
   1edca:	d9dc      	bls.n	1ed86 <handle_AT_HTTPC_CONNECT+0x22>
			if (httpc.fd != INVALID_SOCKET) {
   1edcc:	4a8a      	ldr	r2, [pc, #552]	; (1eff8 <handle_AT_HTTPC_CONNECT+0x294>)
   1edce:	6813      	ldr	r3, [r2, #0]
   1edd0:	4617      	mov	r7, r2
   1edd2:	3301      	adds	r3, #1
   1edd4:	f040 8105 	bne.w	1efe2 <handle_AT_HTTPC_CONNECT+0x27e>
			err = at_params_string_get(&at_param_list, 2,
   1edd8:	ab07      	add	r3, sp, #28
   1edda:	2102      	movs	r1, #2
   1eddc:	4882      	ldr	r0, [pc, #520]	; (1efe8 <handle_AT_HTTPC_CONNECT+0x284>)
   1edde:	320c      	adds	r2, #12
   1ede0:	f017 fd3e 	bl	36860 <at_params_string_get>
			if (err < 0) {
   1ede4:	4d81      	ldr	r5, [pc, #516]	; (1efec <handle_AT_HTTPC_CONNECT+0x288>)
   1ede6:	4b82      	ldr	r3, [pc, #520]	; (1eff0 <handle_AT_HTTPC_CONNECT+0x28c>)
   1ede8:	1e04      	subs	r4, r0, #0
   1edea:	eba5 0503 	sub.w	r5, r5, r3
   1edee:	ea4f 05d5 	mov.w	r5, r5, lsr #3
   1edf2:	ea4f 1585 	mov.w	r5, r5, lsl #6
   1edf6:	da04      	bge.n	1ee02 <handle_AT_HTTPC_CONNECT+0x9e>
				LOG_ERR("Fail to get host: %d", err);
   1edf8:	4621      	mov	r1, r4
   1edfa:	4880      	ldr	r0, [pc, #512]	; (1effc <handle_AT_HTTPC_CONNECT+0x298>)
   1edfc:	f045 0201 	orr.w	r2, r5, #1
   1ee00:	e7d5      	b.n	1edae <handle_AT_HTTPC_CONNECT+0x4a>
			httpc.host[host_sz] = '\0';
   1ee02:	2200      	movs	r2, #0
   1ee04:	9b07      	ldr	r3, [sp, #28]
			err = at_params_int_get(&at_param_list, 3, &httpc.port);
   1ee06:	2103      	movs	r1, #3
			httpc.host[host_sz] = '\0';
   1ee08:	443b      	add	r3, r7
   1ee0a:	731a      	strb	r2, [r3, #12]
			err = at_params_int_get(&at_param_list, 3, &httpc.port);
   1ee0c:	4876      	ldr	r0, [pc, #472]	; (1efe8 <handle_AT_HTTPC_CONNECT+0x284>)
   1ee0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1ee12:	f017 fd12 	bl	3683a <at_params_int_get>
			if (err < 0) {
   1ee16:	1e04      	subs	r4, r0, #0
   1ee18:	da04      	bge.n	1ee24 <handle_AT_HTTPC_CONNECT+0xc0>
				LOG_ERR("Fail to get port: %d", err);
   1ee1a:	4621      	mov	r1, r4
   1ee1c:	4878      	ldr	r0, [pc, #480]	; (1f000 <handle_AT_HTTPC_CONNECT+0x29c>)
   1ee1e:	f045 0201 	orr.w	r2, r5, #1
   1ee22:	e7c4      	b.n	1edae <handle_AT_HTTPC_CONNECT+0x4a>
			if (at_params_valid_count_get(&at_param_list) == 5) {
   1ee24:	4870      	ldr	r0, [pc, #448]	; (1efe8 <handle_AT_HTTPC_CONNECT+0x284>)
   1ee26:	f017 fd3e 	bl	368a6 <at_params_valid_count_get>
   1ee2a:	2805      	cmp	r0, #5
   1ee2c:	d10d      	bne.n	1ee4a <handle_AT_HTTPC_CONNECT+0xe6>
				err = at_params_int_get(&at_param_list, 4,
   1ee2e:	2104      	movs	r1, #4
   1ee30:	4a74      	ldr	r2, [pc, #464]	; (1f004 <handle_AT_HTTPC_CONNECT+0x2a0>)
   1ee32:	486d      	ldr	r0, [pc, #436]	; (1efe8 <handle_AT_HTTPC_CONNECT+0x284>)
   1ee34:	f017 fd01 	bl	3683a <at_params_int_get>
				if (err < 0) {
   1ee38:	1e04      	subs	r4, r0, #0
   1ee3a:	da04      	bge.n	1ee46 <handle_AT_HTTPC_CONNECT+0xe2>
					LOG_ERR("Fail to get sec_tag: %d", err);
   1ee3c:	4621      	mov	r1, r4
   1ee3e:	4872      	ldr	r0, [pc, #456]	; (1f008 <handle_AT_HTTPC_CONNECT+0x2a4>)
   1ee40:	f045 0201 	orr.w	r2, r5, #1
   1ee44:	e7b3      	b.n	1edae <handle_AT_HTTPC_CONNECT+0x4a>
				httpc.sec_transport = true;
   1ee46:	2301      	movs	r3, #1
   1ee48:	713b      	strb	r3, [r7, #4]
	if (httpc.fd == INVALID_SOCKET) {
   1ee4a:	683b      	ldr	r3, [r7, #0]
   1ee4c:	3301      	adds	r3, #1
   1ee4e:	d174      	bne.n	1ef3a <handle_AT_HTTPC_CONNECT+0x1d6>
	if ((httpc.sec_transport == true) && (sec_tag == -1)) {
   1ee50:	793b      	ldrb	r3, [r7, #4]
		httpc.fd = server_connect(httpc.host, httpc.sec_tag);
   1ee52:	68b9      	ldr	r1, [r7, #8]
	if ((httpc.sec_transport == true) && (sec_tag == -1)) {
   1ee54:	b313      	cbz	r3, 1ee9c <handle_AT_HTTPC_CONNECT+0x138>
   1ee56:	1c48      	adds	r0, r1, #1
   1ee58:	d120      	bne.n	1ee9c <handle_AT_HTTPC_CONNECT+0x138>
		LOG_ERR("Empty secure tag.");
   1ee5a:	486c      	ldr	r0, [pc, #432]	; (1f00c <handle_AT_HTTPC_CONNECT+0x2a8>)
   1ee5c:	f045 0101 	orr.w	r1, r5, #1
		LOG_ERR("Fail to resolve and connect");
   1ee60:	f015 fb52 	bl	34508 <log_0>
		httpc.fd = server_connect(httpc.host, httpc.sec_tag);
   1ee64:	f06f 0315 	mvn.w	r3, #21
   1ee68:	603b      	str	r3, [r7, #0]
			LOG_ERR("server_connect fail.");
   1ee6a:	f045 0101 	orr.w	r1, r5, #1
   1ee6e:	4868      	ldr	r0, [pc, #416]	; (1f010 <handle_AT_HTTPC_CONNECT+0x2ac>)
   1ee70:	f015 fb4a 	bl	34508 <log_0>
			httpc.fd = INVALID_SOCKET;
   1ee74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			sprintf(rsp_buf, "#XHTTPCCON:0\r\n");
   1ee78:	4966      	ldr	r1, [pc, #408]	; (1f014 <handle_AT_HTTPC_CONNECT+0x2b0>)
			httpc.fd = INVALID_SOCKET;
   1ee7a:	603b      	str	r3, [r7, #0]
			sprintf(rsp_buf, "#XHTTPCCON:1\r\n");
   1ee7c:	4866      	ldr	r0, [pc, #408]	; (1f018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   1ee7e:	f018 fc1f 	bl	376c0 <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1ee82:	4865      	ldr	r0, [pc, #404]	; (1f018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   1ee84:	f7fa f8f4 	bl	19070 <strlen>
   1ee88:	4601      	mov	r1, r0
   1ee8a:	4863      	ldr	r0, [pc, #396]	; (1f018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   1ee8c:	f7fb f9ac 	bl	1a1e8 <rsp_send>
			if (do_http_connect() >= 0) {
   1ee90:	683b      	ldr	r3, [r7, #0]
   1ee92:	2b00      	cmp	r3, #0
   1ee94:	f6ff af77 	blt.w	1ed86 <handle_AT_HTTPC_CONNECT+0x22>
				err = 0;
   1ee98:	2400      	movs	r4, #0
   1ee9a:	e78a      	b.n	1edb2 <handle_AT_HTTPC_CONNECT+0x4e>
	fd = resolve_and_connect(AF_INET6, host, sec_tag);
   1ee9c:	2002      	movs	r0, #2
   1ee9e:	9105      	str	r1, [sp, #20]
   1eea0:	f7ff fd62 	bl	1e968 <resolve_and_connect.constprop.0>
	if (fd < 0) {
   1eea4:	1e04      	subs	r4, r0, #0
   1eea6:	9905      	ldr	r1, [sp, #20]
   1eea8:	da08      	bge.n	1eebc <handle_AT_HTTPC_CONNECT+0x158>
		fd = resolve_and_connect(AF_INET, host, sec_tag);
   1eeaa:	2001      	movs	r0, #1
   1eeac:	f7ff fd5c 	bl	1e968 <resolve_and_connect.constprop.0>
	if (fd < 0) {
   1eeb0:	1e04      	subs	r4, r0, #0
   1eeb2:	da03      	bge.n	1eebc <handle_AT_HTTPC_CONNECT+0x158>
		LOG_ERR("Fail to resolve and connect");
   1eeb4:	4859      	ldr	r0, [pc, #356]	; (1f01c <handle_AT_HTTPC_CONNECT+0x2b8>)
   1eeb6:	f045 0101 	orr.w	r1, r5, #1
   1eeba:	e7d1      	b.n	1ee60 <handle_AT_HTTPC_CONNECT+0xfc>
	LOG_INF("Connected to %s", log_strdup(host));
   1eebc:	4858      	ldr	r0, [pc, #352]	; (1f020 <handle_AT_HTTPC_CONNECT+0x2bc>)
   1eebe:	f001 faad 	bl	2041c <log_strdup>
   1eec2:	f045 0603 	orr.w	r6, r5, #3
   1eec6:	4601      	mov	r1, r0
   1eec8:	4632      	mov	r2, r6
   1eeca:	4856      	ldr	r0, [pc, #344]	; (1f024 <handle_AT_HTTPC_CONNECT+0x2c0>)
   1eecc:	f015 fb2b 	bl	34526 <log_1>
	struct timeval timeo = {
   1eed0:	220a      	movs	r2, #10
   1eed2:	2300      	movs	r3, #0
   1eed4:	e9cd 2308 	strd	r2, r3, [sp, #32]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1eed8:	2608      	movs	r6, #8
   1eeda:	2215      	movs	r2, #21
   1eedc:	2101      	movs	r1, #1
   1eede:	4620      	mov	r0, r4
   1eee0:	9600      	str	r6, [sp, #0]
   1eee2:	ab08      	add	r3, sp, #32
   1eee4:	f015 ffdc 	bl	34ea0 <z_impl_zsock_setsockopt>
	if (err) {
   1eee8:	b1b0      	cbz	r0, 1ef18 <handle_AT_HTTPC_CONNECT+0x1b4>
		LOG_WRN("Failed to set socket TX timeout, errno %d", errno);
   1eeea:	f016 fa14 	bl	35316 <__errno>
   1eeee:	f045 0602 	orr.w	r6, r5, #2
   1eef2:	4632      	mov	r2, r6
   1eef4:	6801      	ldr	r1, [r0, #0]
   1eef6:	484c      	ldr	r0, [pc, #304]	; (1f028 <handle_AT_HTTPC_CONNECT+0x2c4>)
		LOG_WRN("Failed to set socket RX timeout, errno %d", errno);
   1eef8:	f015 fb15 	bl	34526 <log_1>
		return -errno;
   1eefc:	f016 fa0b 	bl	35316 <__errno>
   1ef00:	6806      	ldr	r6, [r0, #0]
   1ef02:	4276      	negs	r6, r6
	if (err) {
   1ef04:	b11e      	cbz	r6, 1ef0e <handle_AT_HTTPC_CONNECT+0x1aa>
		close(httpc.fd);
   1ef06:	6838      	ldr	r0, [r7, #0]
	return z_impl_zsock_close(sock);
   1ef08:	f015 ff01 	bl	34d0e <z_impl_zsock_close>
		return err;
   1ef0c:	4634      	mov	r4, r6
		if (httpc.fd < 0) {
   1ef0e:	2c00      	cmp	r4, #0
		httpc.fd = server_connect(httpc.host, httpc.sec_tag);
   1ef10:	603c      	str	r4, [r7, #0]
		if (httpc.fd < 0) {
   1ef12:	dbaa      	blt.n	1ee6a <handle_AT_HTTPC_CONNECT+0x106>
			sprintf(rsp_buf, "#XHTTPCCON:1\r\n");
   1ef14:	4945      	ldr	r1, [pc, #276]	; (1f02c <handle_AT_HTTPC_CONNECT+0x2c8>)
   1ef16:	e7b1      	b.n	1ee7c <handle_AT_HTTPC_CONNECT+0x118>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1ef18:	2214      	movs	r2, #20
   1ef1a:	2101      	movs	r1, #1
   1ef1c:	4620      	mov	r0, r4
   1ef1e:	9600      	str	r6, [sp, #0]
   1ef20:	ab08      	add	r3, sp, #32
   1ef22:	f015 ffbd 	bl	34ea0 <z_impl_zsock_setsockopt>
	if (err) {
   1ef26:	2800      	cmp	r0, #0
   1ef28:	d0f1      	beq.n	1ef0e <handle_AT_HTTPC_CONNECT+0x1aa>
		LOG_WRN("Failed to set socket RX timeout, errno %d", errno);
   1ef2a:	f016 f9f4 	bl	35316 <__errno>
   1ef2e:	f045 0602 	orr.w	r6, r5, #2
   1ef32:	6801      	ldr	r1, [r0, #0]
   1ef34:	4632      	mov	r2, r6
   1ef36:	483e      	ldr	r0, [pc, #248]	; (1f030 <handle_AT_HTTPC_CONNECT+0x2cc>)
   1ef38:	e7de      	b.n	1eef8 <handle_AT_HTTPC_CONNECT+0x194>
		LOG_ERR("Already connected to server.");
   1ef3a:	483e      	ldr	r0, [pc, #248]	; (1f034 <handle_AT_HTTPC_CONNECT+0x2d0>)
   1ef3c:	f045 0101 	orr.w	r1, r5, #1
   1ef40:	f015 fae2 	bl	34508 <log_0>
		return -EINVAL;
   1ef44:	e71f      	b.n	1ed86 <handle_AT_HTTPC_CONNECT+0x22>
		} else if (op == AT_HTTPCCON_DISCONNECT) {
   1ef46:	2b00      	cmp	r3, #0
   1ef48:	f47f af33 	bne.w	1edb2 <handle_AT_HTTPC_CONNECT+0x4e>
			err = do_http_disconnect();
   1ef4c:	f7ff fe0e 	bl	1eb6c <do_http_disconnect>
			if (err) {
   1ef50:	4604      	mov	r4, r0
   1ef52:	2800      	cmp	r0, #0
   1ef54:	f43f af2d 	beq.w	1edb2 <handle_AT_HTTPC_CONNECT+0x4e>
   1ef58:	4a24      	ldr	r2, [pc, #144]	; (1efec <handle_AT_HTTPC_CONNECT+0x288>)
   1ef5a:	4b25      	ldr	r3, [pc, #148]	; (1eff0 <handle_AT_HTTPC_CONNECT+0x28c>)
				LOG_ERR("Fail to disconnect. Error: %d", err);
   1ef5c:	4601      	mov	r1, r0
   1ef5e:	1ad2      	subs	r2, r2, r3
   1ef60:	08d2      	lsrs	r2, r2, #3
   1ef62:	0192      	lsls	r2, r2, #6
   1ef64:	4834      	ldr	r0, [pc, #208]	; (1f038 <handle_AT_HTTPC_CONNECT+0x2d4>)
   1ef66:	f042 0201 	orr.w	r2, r2, #1
   1ef6a:	e720      	b.n	1edae <handle_AT_HTTPC_CONNECT+0x4a>
		if (httpc.sec_transport) {
   1ef6c:	4b22      	ldr	r3, [pc, #136]	; (1eff8 <handle_AT_HTTPC_CONNECT+0x294>)
   1ef6e:	681a      	ldr	r2, [r3, #0]
   1ef70:	7919      	ldrb	r1, [r3, #4]
   1ef72:	3201      	adds	r2, #1
   1ef74:	bf18      	it	ne
   1ef76:	2201      	movne	r2, #1
   1ef78:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   1ef7a:	f103 000c 	add.w	r0, r3, #12
   1ef7e:	b199      	cbz	r1, 1efa8 <handle_AT_HTTPC_CONNECT+0x244>
			sprintf(rsp_buf, "#XHTTPCCON: %d,\"%s\",%d,%d\r\n",
   1ef80:	689b      	ldr	r3, [r3, #8]
   1ef82:	2100      	movs	r1, #0
   1ef84:	e9cd 2000 	strd	r2, r0, [sp]
   1ef88:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1ef8c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ef90:	4b2a      	ldr	r3, [pc, #168]	; (1f03c <handle_AT_HTTPC_CONNECT+0x2d8>)
   1ef92:	4821      	ldr	r0, [pc, #132]	; (1f018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   1ef94:	f018 fb6d 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ef98:	481f      	ldr	r0, [pc, #124]	; (1f018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   1ef9a:	f7fa f869 	bl	19070 <strlen>
   1ef9e:	4601      	mov	r1, r0
   1efa0:	481d      	ldr	r0, [pc, #116]	; (1f018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   1efa2:	f7fb f921 	bl	1a1e8 <rsp_send>
		break;
   1efa6:	e777      	b.n	1ee98 <handle_AT_HTTPC_CONNECT+0x134>
			sprintf(rsp_buf, "#XHTTPCCON: %d,\"%s\",%d\r\n",
   1efa8:	e9cd 0401 	strd	r0, r4, [sp, #4]
   1efac:	9200      	str	r2, [sp, #0]
   1efae:	4b24      	ldr	r3, [pc, #144]	; (1f040 <handle_AT_HTTPC_CONNECT+0x2dc>)
   1efb0:	f640 228c 	movw	r2, #2700	; 0xa8c
   1efb4:	4818      	ldr	r0, [pc, #96]	; (1f018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   1efb6:	f018 fb5c 	bl	37672 <__sprintf_chk>
   1efba:	e7ed      	b.n	1ef98 <handle_AT_HTTPC_CONNECT+0x234>
		sprintf(rsp_buf,
   1efbc:	2400      	movs	r4, #0
   1efbe:	2301      	movs	r3, #1
   1efc0:	4621      	mov	r1, r4
   1efc2:	f640 228c 	movw	r2, #2700	; 0xa8c
   1efc6:	e9cd 4300 	strd	r4, r3, [sp]
   1efca:	4813      	ldr	r0, [pc, #76]	; (1f018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   1efcc:	4b1d      	ldr	r3, [pc, #116]	; (1f044 <handle_AT_HTTPC_CONNECT+0x2e0>)
   1efce:	f018 fb50 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1efd2:	4811      	ldr	r0, [pc, #68]	; (1f018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   1efd4:	f7fa f84c 	bl	19070 <strlen>
   1efd8:	4601      	mov	r1, r0
   1efda:	480f      	ldr	r0, [pc, #60]	; (1f018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   1efdc:	f7fb f904 	bl	1a1e8 <rsp_send>
		break;
   1efe0:	e6e7      	b.n	1edb2 <handle_AT_HTTPC_CONNECT+0x4e>
				return -EINPROGRESS;
   1efe2:	f06f 0476 	mvn.w	r4, #118	; 0x76
   1efe6:	e6e4      	b.n	1edb2 <handle_AT_HTTPC_CONNECT+0x4e>
   1efe8:	20023430 	.word	0x20023430
   1efec:	0003839c 	.word	0x0003839c
   1eff0:	0003831c 	.word	0x0003831c
   1eff4:	0003a554 	.word	0x0003a554
   1eff8:	200234e8 	.word	0x200234e8
   1effc:	0003a567 	.word	0x0003a567
   1f000:	0003a57c 	.word	0x0003a57c
   1f004:	200234f0 	.word	0x200234f0
   1f008:	0003a591 	.word	0x0003a591
   1f00c:	0003a5a9 	.word	0x0003a5a9
   1f010:	0003a63b 	.word	0x0003a63b
   1f014:	0003a4b5 	.word	0x0003a4b5
   1f018:	20028950 	.word	0x20028950
   1f01c:	0003a5bb 	.word	0x0003a5bb
   1f020:	200234f4 	.word	0x200234f4
   1f024:	0003a5d7 	.word	0x0003a5d7
   1f028:	0003a5e7 	.word	0x0003a5e7
   1f02c:	0003a650 	.word	0x0003a650
   1f030:	0003a611 	.word	0x0003a611
   1f034:	0003a65f 	.word	0x0003a65f
   1f038:	0003a4dc 	.word	0x0003a4dc
   1f03c:	0003a67c 	.word	0x0003a67c
   1f040:	0003a698 	.word	0x0003a698
   1f044:	0003a6b1 	.word	0x0003a6b1

0001f048 <slm_at_httpc_parse>:
{
   1f048:	b570      	push	{r4, r5, r6, lr}
   1f04a:	460e      	mov	r6, r1
		if (slm_util_cmd_casecmp(at_cmd, http_at_list[i].string)) {
   1f04c:	4924      	ldr	r1, [pc, #144]	; (1f0e0 <slm_at_httpc_parse+0x98>)
{
   1f04e:	4604      	mov	r4, r0
		if (slm_util_cmd_casecmp(at_cmd, http_at_list[i].string)) {
   1f050:	f7fa ff64 	bl	19f1c <slm_util_cmd_casecmp>
   1f054:	b9e8      	cbnz	r0, 1f092 <slm_at_httpc_parse+0x4a>
   1f056:	4620      	mov	r0, r4
   1f058:	4922      	ldr	r1, [pc, #136]	; (1f0e4 <slm_at_httpc_parse+0x9c>)
   1f05a:	f7fa ff5f 	bl	19f1c <slm_util_cmd_casecmp>
   1f05e:	bb68      	cbnz	r0, 1f0bc <slm_at_httpc_parse+0x74>
	if (ret != -ENOENT || (httpc.pl_len == 0)) {
   1f060:	4d21      	ldr	r5, [pc, #132]	; (1f0e8 <slm_at_httpc_parse+0xa0>)
   1f062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1f064:	2b00      	cmp	r3, #0
   1f066:	d037      	beq.n	1f0d8 <slm_at_httpc_parse+0x90>
	httpc.pl_sent = 0;
   1f068:	2300      	movs	r3, #0
	httpc.payload = (char *)at_cmd;
   1f06a:	662c      	str	r4, [r5, #96]	; 0x60
	httpc.pl_to_send = length;
   1f06c:	66ae      	str	r6, [r5, #104]	; 0x68
	httpc.pl_sent = 0;
   1f06e:	66eb      	str	r3, [r5, #108]	; 0x6c
   1f070:	481e      	ldr	r0, [pc, #120]	; (1f0ec <slm_at_httpc_parse+0xa4>)
   1f072:	f013 f967 	bl	32344 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   1f076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f07a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f07e:	481c      	ldr	r0, [pc, #112]	; (1f0f0 <slm_at_httpc_parse+0xa8>)
   1f080:	f013 f986 	bl	32390 <z_impl_k_sem_take>
	if (httpc.pl_sent <= 0) {
   1f084:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
		return -EINVAL;
   1f086:	2b00      	cmp	r3, #0
   1f088:	bfcc      	ite	gt
   1f08a:	2000      	movgt	r0, #0
   1f08c:	f06f 0015 	mvnle.w	r0, #21
   1f090:	e013      	b.n	1f0ba <slm_at_httpc_parse+0x72>
	for (int i = 0; i < AT_HTTPC_MAX; i++) {
   1f092:	2500      	movs	r5, #0
			ret = at_parser_params_from_str(at_cmd, NULL,
   1f094:	2100      	movs	r1, #0
   1f096:	4620      	mov	r0, r4
   1f098:	4a16      	ldr	r2, [pc, #88]	; (1f0f4 <slm_at_httpc_parse+0xac>)
   1f09a:	f017 fabc 	bl	36616 <at_parser_params_from_str>
			if (ret) {
   1f09e:	4601      	mov	r1, r0
   1f0a0:	b170      	cbz	r0, 1f0c0 <slm_at_httpc_parse+0x78>
   1f0a2:	4b15      	ldr	r3, [pc, #84]	; (1f0f8 <slm_at_httpc_parse+0xb0>)
   1f0a4:	4a15      	ldr	r2, [pc, #84]	; (1f0fc <slm_at_httpc_parse+0xb4>)
				LOG_ERR("Failed to parse AT command %d", ret);
   1f0a6:	4816      	ldr	r0, [pc, #88]	; (1f100 <slm_at_httpc_parse+0xb8>)
   1f0a8:	1ad2      	subs	r2, r2, r3
   1f0aa:	08d2      	lsrs	r2, r2, #3
   1f0ac:	0192      	lsls	r2, r2, #6
   1f0ae:	f042 0201 	orr.w	r2, r2, #1
   1f0b2:	f015 fa38 	bl	34526 <log_1>
				return -EINVAL;
   1f0b6:	f06f 0015 	mvn.w	r0, #21
}
   1f0ba:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < AT_HTTPC_MAX; i++) {
   1f0bc:	2501      	movs	r5, #1
   1f0be:	e7e9      	b.n	1f094 <slm_at_httpc_parse+0x4c>
			type = at_parser_cmd_type_get(at_cmd);
   1f0c0:	4620      	mov	r0, r4
   1f0c2:	f017 faab 	bl	3661c <at_parser_cmd_type_get>
			ret = http_at_list[i].handler(type);
   1f0c6:	220c      	movs	r2, #12
   1f0c8:	4b0e      	ldr	r3, [pc, #56]	; (1f104 <slm_at_httpc_parse+0xbc>)
   1f0ca:	fb02 3505 	mla	r5, r2, r5, r3
   1f0ce:	68ab      	ldr	r3, [r5, #8]
   1f0d0:	4798      	blx	r3
	if (ret != -ENOENT || (httpc.pl_len == 0)) {
   1f0d2:	1c83      	adds	r3, r0, #2
   1f0d4:	d1f1      	bne.n	1f0ba <slm_at_httpc_parse+0x72>
   1f0d6:	e7c3      	b.n	1f060 <slm_at_httpc_parse+0x18>
   1f0d8:	f06f 0001 	mvn.w	r0, #1
   1f0dc:	e7ed      	b.n	1f0ba <slm_at_httpc_parse+0x72>
   1f0de:	bf00      	nop
   1f0e0:	0003a6e0 	.word	0x0003a6e0
   1f0e4:	0003a6ed 	.word	0x0003a6ed
   1f0e8:	200234e8 	.word	0x200234e8
   1f0ec:	20020894 	.word	0x20020894
   1f0f0:	2002087c 	.word	0x2002087c
   1f0f4:	20023430 	.word	0x20023430
   1f0f8:	0003831c 	.word	0x0003831c
   1f0fc:	0003839c 	.word	0x0003839c
   1f100:	000393de 	.word	0x000393de
   1f104:	00038660 	.word	0x00038660

0001f108 <slm_at_httpc_init>:
	}
}

int slm_at_httpc_init(void)
{
	httpc.fd = INVALID_SOCKET;
   1f108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f10c:	4b01      	ldr	r3, [pc, #4]	; (1f114 <slm_at_httpc_init+0xc>)

	return 0;
}
   1f10e:	2000      	movs	r0, #0
	httpc.fd = INVALID_SOCKET;
   1f110:	601a      	str	r2, [r3, #0]
}
   1f112:	4770      	bx	lr
   1f114:	200234e8 	.word	0x200234e8

0001f118 <slm_at_httpc_uninit>:

int slm_at_httpc_uninit(void)
{
	int err = 0;

	if (httpc.fd != INVALID_SOCKET) {
   1f118:	4b0b      	ldr	r3, [pc, #44]	; (1f148 <slm_at_httpc_uninit+0x30>)
{
   1f11a:	b510      	push	{r4, lr}
	if (httpc.fd != INVALID_SOCKET) {
   1f11c:	681b      	ldr	r3, [r3, #0]
   1f11e:	3301      	adds	r3, #1
   1f120:	d010      	beq.n	1f144 <slm_at_httpc_uninit+0x2c>
		err = do_http_disconnect();
   1f122:	f7ff fd23 	bl	1eb6c <do_http_disconnect>
		if (err != 0) {
   1f126:	4604      	mov	r4, r0
   1f128:	b150      	cbz	r0, 1f140 <slm_at_httpc_uninit+0x28>
   1f12a:	4a08      	ldr	r2, [pc, #32]	; (1f14c <slm_at_httpc_uninit+0x34>)
   1f12c:	4b08      	ldr	r3, [pc, #32]	; (1f150 <slm_at_httpc_uninit+0x38>)
			LOG_ERR("Fail to disconnect. Error: %d", err);
   1f12e:	4601      	mov	r1, r0
   1f130:	1ad2      	subs	r2, r2, r3
   1f132:	08d2      	lsrs	r2, r2, #3
   1f134:	0192      	lsls	r2, r2, #6
   1f136:	4807      	ldr	r0, [pc, #28]	; (1f154 <slm_at_httpc_uninit+0x3c>)
   1f138:	f042 0201 	orr.w	r2, r2, #1
   1f13c:	f015 f9f3 	bl	34526 <log_1>
		}
	}

	return err;
}
   1f140:	4620      	mov	r0, r4
   1f142:	bd10      	pop	{r4, pc}
	int err = 0;
   1f144:	2400      	movs	r4, #0
	return err;
   1f146:	e7fb      	b.n	1f140 <slm_at_httpc_uninit+0x28>
   1f148:	200234e8 	.word	0x200234e8
   1f14c:	0003839c 	.word	0x0003839c
   1f150:	0003831c 	.word	0x0003831c
   1f154:	0003a4dc 	.word	0x0003a4dc

0001f158 <slm_at_httpc_clac>:

/**@brief API to list HTTP AT commands
 */
void slm_at_httpc_clac(void)
{
   1f158:	b513      	push	{r0, r1, r4, lr}
	for (int i = 0; i < AT_HTTPC_MAX; i++) {
		sprintf(rsp_buf, "%s\r\n", http_at_list[i].string);
   1f15a:	4a12      	ldr	r2, [pc, #72]	; (1f1a4 <slm_at_httpc_clac+0x4c>)
   1f15c:	4c12      	ldr	r4, [pc, #72]	; (1f1a8 <slm_at_httpc_clac+0x50>)
   1f15e:	4b13      	ldr	r3, [pc, #76]	; (1f1ac <slm_at_httpc_clac+0x54>)
   1f160:	2100      	movs	r1, #0
   1f162:	9200      	str	r2, [sp, #0]
   1f164:	4620      	mov	r0, r4
   1f166:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f16a:	f018 fa82 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1f16e:	4620      	mov	r0, r4
   1f170:	f7f9 ff7e 	bl	19070 <strlen>
   1f174:	4601      	mov	r1, r0
   1f176:	4620      	mov	r0, r4
   1f178:	f7fb f836 	bl	1a1e8 <rsp_send>
		sprintf(rsp_buf, "%s\r\n", http_at_list[i].string);
   1f17c:	4a0c      	ldr	r2, [pc, #48]	; (1f1b0 <slm_at_httpc_clac+0x58>)
   1f17e:	2100      	movs	r1, #0
   1f180:	4b0a      	ldr	r3, [pc, #40]	; (1f1ac <slm_at_httpc_clac+0x54>)
   1f182:	9200      	str	r2, [sp, #0]
   1f184:	4620      	mov	r0, r4
   1f186:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f18a:	f018 fa72 	bl	37672 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1f18e:	4620      	mov	r0, r4
   1f190:	f7f9 ff6e 	bl	19070 <strlen>
   1f194:	4601      	mov	r1, r0
   1f196:	4620      	mov	r0, r4
	}
}
   1f198:	b002      	add	sp, #8
   1f19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rsp_send(rsp_buf, strlen(rsp_buf));
   1f19e:	f7fb b823 	b.w	1a1e8 <rsp_send>
   1f1a2:	bf00      	nop
   1f1a4:	0003a6e0 	.word	0x0003a6e0
   1f1a8:	20028950 	.word	0x20028950
   1f1ac:	000395d7 	.word	0x000395d7
   1f1b0:	0003a6ed 	.word	0x0003a6ed

0001f1b4 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   1f1b4:	2807      	cmp	r0, #7
{
   1f1b6:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   1f1b8:	d906      	bls.n	1f1c8 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   1f1ba:	f016 f8ac 	bl	35316 <__errno>
   1f1be:	2309      	movs	r3, #9
   1f1c0:	6003      	str	r3, [r0, #0]
   1f1c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   1f1c6:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f1c8:	220c      	movs	r2, #12
   1f1ca:	4b05      	ldr	r3, [pc, #20]	; (1f1e0 <_check_fd+0x2c>)
   1f1cc:	fb02 3000 	mla	r0, r2, r0, r3
   1f1d0:	3008      	adds	r0, #8
   1f1d2:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   1f1d6:	2b00      	cmp	r3, #0
   1f1d8:	d0ef      	beq.n	1f1ba <_check_fd+0x6>
	return 0;
   1f1da:	2000      	movs	r0, #0
   1f1dc:	e7f3      	b.n	1f1c6 <_check_fd+0x12>
   1f1de:	bf00      	nop
   1f1e0:	2002355c 	.word	0x2002355c

0001f1e4 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   1f1e4:	b570      	push	{r4, r5, r6, lr}
   1f1e6:	4604      	mov	r4, r0
   1f1e8:	460d      	mov	r5, r1
   1f1ea:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   1f1ec:	f7ff ffe2 	bl	1f1b4 <_check_fd>
   1f1f0:	2800      	cmp	r0, #0
   1f1f2:	db0a      	blt.n	1f20a <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   1f1f4:	4a08      	ldr	r2, [pc, #32]	; (1f218 <z_get_fd_obj+0x34>)
   1f1f6:	b155      	cbz	r5, 1f20e <z_get_fd_obj+0x2a>
   1f1f8:	230c      	movs	r3, #12
   1f1fa:	fb03 2304 	mla	r3, r3, r4, r2
   1f1fe:	685b      	ldr	r3, [r3, #4]
   1f200:	42ab      	cmp	r3, r5
   1f202:	d004      	beq.n	1f20e <z_get_fd_obj+0x2a>
		errno = err;
   1f204:	f016 f887 	bl	35316 <__errno>
   1f208:	6006      	str	r6, [r0, #0]
		return NULL;
   1f20a:	2000      	movs	r0, #0
   1f20c:	e002      	b.n	1f214 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   1f20e:	200c      	movs	r0, #12
   1f210:	4344      	muls	r4, r0
   1f212:	5910      	ldr	r0, [r2, r4]
}
   1f214:	bd70      	pop	{r4, r5, r6, pc}
   1f216:	bf00      	nop
   1f218:	2002355c 	.word	0x2002355c

0001f21c <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   1f21c:	b538      	push	{r3, r4, r5, lr}
   1f21e:	4605      	mov	r5, r0
   1f220:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   1f222:	f7ff ffc7 	bl	1f1b4 <_check_fd>
   1f226:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   1f228:	bfa3      	ittte	ge
   1f22a:	230c      	movge	r3, #12
   1f22c:	fb03 f005 	mulge.w	r0, r3, r5
   1f230:	4a03      	ldrge	r2, [pc, #12]	; (1f240 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   1f232:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   1f234:	bfa1      	itttt	ge
   1f236:	1813      	addge	r3, r2, r0
   1f238:	685b      	ldrge	r3, [r3, #4]
   1f23a:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
   1f23c:	5810      	ldrge	r0, [r2, r0]
}
   1f23e:	bd38      	pop	{r3, r4, r5, pc}
   1f240:	2002355c 	.word	0x2002355c

0001f244 <z_reserve_fd>:

int z_reserve_fd(void)
{
   1f244:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1f246:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   1f248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f24c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f250:	4812      	ldr	r0, [pc, #72]	; (1f29c <z_reserve_fd+0x58>)
   1f252:	f012 fbd5 	bl	31a00 <z_impl_k_mutex_lock>
   1f256:	4b12      	ldr	r3, [pc, #72]	; (1f2a0 <z_reserve_fd+0x5c>)
   1f258:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   1f25c:	b17a      	cbz	r2, 1f27e <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1f25e:	3401      	adds	r4, #1
   1f260:	2c08      	cmp	r4, #8
   1f262:	f103 030c 	add.w	r3, r3, #12
   1f266:	d1f7      	bne.n	1f258 <z_reserve_fd+0x14>
	errno = ENFILE;
   1f268:	f016 f855 	bl	35316 <__errno>
   1f26c:	2317      	movs	r3, #23
	return -1;
   1f26e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   1f272:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   1f274:	4809      	ldr	r0, [pc, #36]	; (1f29c <z_reserve_fd+0x58>)
   1f276:	f012 fc3b 	bl	31af0 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   1f27a:	4620      	mov	r0, r4
   1f27c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f27e:	e8d3 1fef 	ldaex	r1, [r3]
   1f282:	3101      	adds	r1, #1
   1f284:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1f288:	2800      	cmp	r0, #0
   1f28a:	d1f8      	bne.n	1f27e <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   1f28c:	230c      	movs	r3, #12
   1f28e:	4363      	muls	r3, r4
   1f290:	4904      	ldr	r1, [pc, #16]	; (1f2a4 <z_reserve_fd+0x60>)
   1f292:	18c8      	adds	r0, r1, r3
   1f294:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   1f296:	6042      	str	r2, [r0, #4]
   1f298:	e7ec      	b.n	1f274 <z_reserve_fd+0x30>
   1f29a:	bf00      	nop
   1f29c:	200207b0 	.word	0x200207b0
   1f2a0:	20023564 	.word	0x20023564
   1f2a4:	2002355c 	.word	0x2002355c

0001f2a8 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   1f2a8:	230c      	movs	r3, #12
{
   1f2aa:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   1f2ac:	4358      	muls	r0, r3
   1f2ae:	4c02      	ldr	r4, [pc, #8]	; (1f2b8 <z_finalize_fd+0x10>)
   1f2b0:	1823      	adds	r3, r4, r0
   1f2b2:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   1f2b4:	605a      	str	r2, [r3, #4]
}
   1f2b6:	bd10      	pop	{r4, pc}
   1f2b8:	2002355c 	.word	0x2002355c

0001f2bc <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   1f2bc:	230c      	movs	r3, #12
   1f2be:	4a0e      	ldr	r2, [pc, #56]	; (1f2f8 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   1f2c0:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   1f2c2:	fb03 2300 	mla	r3, r3, r0, r2
   1f2c6:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f2c8:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   1f2cc:	b191      	cbz	r1, 1f2f4 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   1f2ce:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f2d0:	e8d3 5fef 	ldaex	r5, [r3]
   1f2d4:	428d      	cmp	r5, r1
   1f2d6:	d104      	bne.n	1f2e2 <z_free_fd+0x26>
   1f2d8:	e8c3 4fec 	stlex	ip, r4, [r3]
   1f2dc:	f1bc 0f00 	cmp.w	ip, #0
   1f2e0:	d1f6      	bne.n	1f2d0 <z_free_fd+0x14>
   1f2e2:	d1f1      	bne.n	1f2c8 <z_free_fd+0xc>
	if (old_rc != 1) {
   1f2e4:	2901      	cmp	r1, #1
   1f2e6:	d105      	bne.n	1f2f4 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   1f2e8:	230c      	movs	r3, #12
   1f2ea:	4358      	muls	r0, r3
   1f2ec:	2300      	movs	r3, #0
   1f2ee:	1811      	adds	r1, r2, r0
   1f2f0:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   1f2f2:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   1f2f4:	bd30      	pop	{r4, r5, pc}
   1f2f6:	bf00      	nop
   1f2f8:	2002355c 	.word	0x2002355c

0001f2fc <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
   1f2fc:	4b01      	ldr	r3, [pc, #4]	; (1f304 <__printk_hook_install+0x8>)
   1f2fe:	6018      	str	r0, [r3, #0]
}
   1f300:	4770      	bx	lr
   1f302:	bf00      	nop
   1f304:	200200e0 	.word	0x200200e0

0001f308 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1f308:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   1f30a:	2500      	movs	r5, #0
{
   1f30c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   1f30e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   1f312:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   1f314:	a901      	add	r1, sp, #4
   1f316:	4805      	ldr	r0, [pc, #20]	; (1f32c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   1f318:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   1f31a:	f000 fac1 	bl	1f8a0 <cbvprintf>

	if (ctx.count < ctx.max) {
   1f31e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   1f322:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1f324:	bfb8      	it	lt
   1f326:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1f328:	b005      	add	sp, #20
   1f32a:	bd30      	pop	{r4, r5, pc}
   1f32c:	00033bff 	.word	0x00033bff

0001f330 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1f330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f334:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   1f338:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1f33a:	f019 0808 	ands.w	r8, r9, #8
{
   1f33e:	4693      	mov	fp, r2
	if (processing) {
   1f340:	d00e      	beq.n	1f360 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
   1f342:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1f344:	bf0c      	ite	eq
   1f346:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1f34a:	f049 0920 	orrne.w	r9, r9, #32
   1f34e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1f352:	f38b 8811 	msr	BASEPRI, fp
   1f356:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1f35a:	b003      	add	sp, #12
   1f35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
   1f360:	f8df a198 	ldr.w	sl, [pc, #408]	; 1f4fc <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f364:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1f368:	2902      	cmp	r1, #2
   1f36a:	d107      	bne.n	1f37c <process_event+0x4c>
			evt = process_recheck(mgr);
   1f36c:	4620      	mov	r0, r4
   1f36e:	f014 fc73 	bl	33c58 <process_recheck>
		if (evt == EVT_NOP) {
   1f372:	2800      	cmp	r0, #0
   1f374:	d0ed      	beq.n	1f352 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1f376:	2801      	cmp	r0, #1
   1f378:	8b23      	ldrh	r3, [r4, #24]
   1f37a:	d14d      	bne.n	1f418 <process_event+0xe8>
			res = mgr->last_res;
   1f37c:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f37e:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   1f380:	2f00      	cmp	r7, #0
   1f382:	da15      	bge.n	1f3b0 <process_event+0x80>
		*clients = mgr->clients;
   1f384:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f386:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   1f38a:	e9c4 8800 	strd	r8, r8, [r4]
   1f38e:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f392:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1f394:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1f396:	8b21      	ldrh	r1, [r4, #24]
   1f398:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1f39c:	454a      	cmp	r2, r9
   1f39e:	d002      	beq.n	1f3a6 <process_event+0x76>
		if (do_monitors
   1f3a0:	68a3      	ldr	r3, [r4, #8]
   1f3a2:	2b00      	cmp	r3, #0
   1f3a4:	d159      	bne.n	1f45a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   1f3a6:	b90d      	cbnz	r5, 1f3ac <process_event+0x7c>
		    || (transit != NULL)) {
   1f3a8:	2e00      	cmp	r6, #0
   1f3aa:	d071      	beq.n	1f490 <process_event+0x160>
   1f3ac:	2300      	movs	r3, #0
   1f3ae:	e055      	b.n	1f45c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f3b0:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1f3b4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1f3b6:	2a01      	cmp	r2, #1
   1f3b8:	d81f      	bhi.n	1f3fa <process_event+0xca>
		*clients = mgr->clients;
   1f3ba:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   1f3be:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1f3c0:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   1f3c2:	b289      	uxth	r1, r1
	list->tail = NULL;
   1f3c4:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1f3c8:	d10c      	bne.n	1f3e4 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1f3ca:	2d00      	cmp	r5, #0
   1f3cc:	462b      	mov	r3, r5
   1f3ce:	bf38      	it	cc
   1f3d0:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1f3d2:	b12b      	cbz	r3, 1f3e0 <process_event+0xb0>
				mgr->refs += 1U;
   1f3d4:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f3d6:	681b      	ldr	r3, [r3, #0]
   1f3d8:	3201      	adds	r2, #1
   1f3da:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1f3dc:	2b00      	cmp	r3, #0
   1f3de:	d1f8      	bne.n	1f3d2 <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f3e0:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   1f3e4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f3e6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1f3e8:	f014 fc36 	bl	33c58 <process_recheck>
   1f3ec:	2800      	cmp	r0, #0
   1f3ee:	d0d1      	beq.n	1f394 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1f3f0:	8b23      	ldrh	r3, [r4, #24]
   1f3f2:	f043 0320 	orr.w	r3, r3, #32
   1f3f6:	8323      	strh	r3, [r4, #24]
   1f3f8:	e7cc      	b.n	1f394 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1f3fa:	2b04      	cmp	r3, #4
   1f3fc:	d10a      	bne.n	1f414 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f3fe:	f021 0107 	bic.w	r1, r1, #7
   1f402:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   1f404:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f406:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1f408:	f014 fc26 	bl	33c58 <process_recheck>
   1f40c:	b110      	cbz	r0, 1f414 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1f40e:	f041 0120 	orr.w	r1, r1, #32
   1f412:	8321      	strh	r1, [r4, #24]
   1f414:	2500      	movs	r5, #0
   1f416:	e7bd      	b.n	1f394 <process_event+0x64>
		} else if (evt == EVT_START) {
   1f418:	2803      	cmp	r0, #3
   1f41a:	d109      	bne.n	1f430 <process_event+0x100>
			transit = mgr->transitions->start;
   1f41c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f41e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   1f422:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f424:	f043 0306 	orr.w	r3, r3, #6
}
   1f428:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f42a:	8323      	strh	r3, [r4, #24]
		res = 0;
   1f42c:	462f      	mov	r7, r5
   1f42e:	e7b2      	b.n	1f396 <process_event+0x66>
		} else if (evt == EVT_STOP) {
   1f430:	2804      	cmp	r0, #4
   1f432:	d106      	bne.n	1f442 <process_event+0x112>
			transit = mgr->transitions->stop;
   1f434:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f436:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   1f43a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f43c:	f043 0304 	orr.w	r3, r3, #4
   1f440:	e7f2      	b.n	1f428 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   1f442:	2805      	cmp	r0, #5
   1f444:	d106      	bne.n	1f454 <process_event+0x124>
			transit = mgr->transitions->reset;
   1f446:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f448:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   1f44c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f44e:	f043 0305 	orr.w	r3, r3, #5
   1f452:	e7e9      	b.n	1f428 <process_event+0xf8>
   1f454:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1f456:	462e      	mov	r6, r5
   1f458:	e7e8      	b.n	1f42c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   1f45a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1f45c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1f460:	8321      	strh	r1, [r4, #24]
   1f462:	f38b 8811 	msr	BASEPRI, fp
   1f466:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1f46a:	bb03      	cbnz	r3, 1f4ae <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   1f46c:	2d00      	cmp	r5, #0
   1f46e:	d134      	bne.n	1f4da <process_event+0x1aa>
			if (transit != NULL) {
   1f470:	b116      	cbz	r6, 1f478 <process_event+0x148>
				transit(mgr, transition_complete);
   1f472:	4651      	mov	r1, sl
   1f474:	4620      	mov	r0, r4
   1f476:	47b0      	blx	r6
	__asm__ volatile(
   1f478:	f04f 0320 	mov.w	r3, #32
   1f47c:	f3ef 8b11 	mrs	fp, BASEPRI
   1f480:	f383 8811 	msr	BASEPRI, r3
   1f484:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1f488:	8b23      	ldrh	r3, [r4, #24]
   1f48a:	f023 0308 	bic.w	r3, r3, #8
   1f48e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1f490:	8b23      	ldrh	r3, [r4, #24]
   1f492:	06da      	lsls	r2, r3, #27
   1f494:	d52a      	bpl.n	1f4ec <process_event+0x1bc>
			evt = EVT_COMPLETE;
   1f496:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1f498:	f023 0310 	bic.w	r3, r3, #16
   1f49c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   1f49e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   1f4a2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1f4a6:	2900      	cmp	r1, #0
   1f4a8:	f47f af5e 	bne.w	1f368 <process_event+0x38>
out:
   1f4ac:	e751      	b.n	1f352 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1f4ae:	68a1      	ldr	r1, [r4, #8]
   1f4b0:	2900      	cmp	r1, #0
   1f4b2:	d0db      	beq.n	1f46c <process_event+0x13c>
	return node->next;
   1f4b4:	680b      	ldr	r3, [r1, #0]
   1f4b6:	2b00      	cmp	r3, #0
   1f4b8:	bf38      	it	cc
   1f4ba:	2300      	movcc	r3, #0
   1f4bc:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   1f4be:	4620      	mov	r0, r4
   1f4c0:	463b      	mov	r3, r7
   1f4c2:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1f4c6:	9201      	str	r2, [sp, #4]
   1f4c8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1f4ca:	9a01      	ldr	r2, [sp, #4]
   1f4cc:	f1b9 0f00 	cmp.w	r9, #0
   1f4d0:	d0cc      	beq.n	1f46c <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f4d2:	4649      	mov	r1, r9
   1f4d4:	f8d9 3000 	ldr.w	r3, [r9]
   1f4d8:	e7ed      	b.n	1f4b6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f4da:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1f4dc:	463b      	mov	r3, r7
   1f4de:	4620      	mov	r0, r4
   1f4e0:	9201      	str	r2, [sp, #4]
   1f4e2:	682d      	ldr	r5, [r5, #0]
   1f4e4:	f014 fbd4 	bl	33c90 <notify_one>
	while (!sys_slist_is_empty(list)) {
   1f4e8:	9a01      	ldr	r2, [sp, #4]
   1f4ea:	e7bf      	b.n	1f46c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1f4ec:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1f4f0:	bf1e      	ittt	ne
   1f4f2:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   1f4f6:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1f4f8:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   1f4fa:	e7d0      	b.n	1f49e <process_event+0x16e>
   1f4fc:	00033cbd 	.word	0x00033cbd

0001f500 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   1f500:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f502:	4602      	mov	r2, r0
   1f504:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   1f506:	270a      	movs	r7, #10
	size_t val = 0;
   1f508:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   1f50a:	4e07      	ldr	r6, [pc, #28]	; (1f528 <extract_decimal+0x28>)
   1f50c:	460c      	mov	r4, r1
   1f50e:	7823      	ldrb	r3, [r4, #0]
   1f510:	3101      	adds	r1, #1
   1f512:	5d9d      	ldrb	r5, [r3, r6]
   1f514:	076d      	lsls	r5, r5, #29
   1f516:	d401      	bmi.n	1f51c <extract_decimal+0x1c>
	}
	*str = sp;
   1f518:	6014      	str	r4, [r2, #0]
	return val;
}
   1f51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   1f51c:	fb07 3300 	mla	r3, r7, r0, r3
   1f520:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f524:	e7f2      	b.n	1f50c <extract_decimal+0xc>
   1f526:	bf00      	nop
   1f528:	0003ca84 	.word	0x0003ca84

0001f52c <extract_conversion>:
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
	*conv = (struct conversion) {
   1f52c:	2300      	movs	r3, #0
{
   1f52e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	*conv = (struct conversion) {
   1f530:	e9c0 3300 	strd	r3, r3, [r0]
   1f534:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   1f536:	784b      	ldrb	r3, [r1, #1]
{
   1f538:	4604      	mov	r4, r0
	if (*sp == '%') {
   1f53a:	2b25      	cmp	r3, #37	; 0x25
   1f53c:	d040      	beq.n	1f5c0 <extract_conversion+0x94>
	++sp;
   1f53e:	3101      	adds	r1, #1
   1f540:	460d      	mov	r5, r1
		switch (*sp) {
   1f542:	f811 3b01 	ldrb.w	r3, [r1], #1
   1f546:	2b2b      	cmp	r3, #43	; 0x2b
   1f548:	d04b      	beq.n	1f5e2 <extract_conversion+0xb6>
   1f54a:	d83d      	bhi.n	1f5c8 <extract_conversion+0x9c>
   1f54c:	2b20      	cmp	r3, #32
   1f54e:	d04c      	beq.n	1f5ea <extract_conversion+0xbe>
   1f550:	2b23      	cmp	r3, #35	; 0x23
   1f552:	d04e      	beq.n	1f5f2 <extract_conversion+0xc6>
	if (conv->flag_zero && conv->flag_dash) {
   1f554:	7823      	ldrb	r3, [r4, #0]
   1f556:	f003 0244 	and.w	r2, r3, #68	; 0x44
   1f55a:	2a44      	cmp	r2, #68	; 0x44
   1f55c:	d102      	bne.n	1f564 <extract_conversion+0x38>
		conv->flag_zero = false;
   1f55e:	f36f 1386 	bfc	r3, #6, #1
   1f562:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
   1f564:	782b      	ldrb	r3, [r5, #0]
   1f566:	9501      	str	r5, [sp, #4]
   1f568:	2b2a      	cmp	r3, #42	; 0x2a
   1f56a:	d146      	bne.n	1f5fa <extract_conversion+0xce>
		conv->width_present = true;
   1f56c:	8823      	ldrh	r3, [r4, #0]
   1f56e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
   1f572:	8023      	strh	r3, [r4, #0]
		return ++sp;
   1f574:	1c6b      	adds	r3, r5, #1
		return sp;
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
	sp = extract_prec(conv, sp);
   1f576:	9301      	str	r3, [sp, #4]
	if (*sp != '.') {
   1f578:	781a      	ldrb	r2, [r3, #0]
   1f57a:	2a2e      	cmp	r2, #46	; 0x2e
   1f57c:	d10b      	bne.n	1f596 <extract_conversion+0x6a>
   1f57e:	1c5d      	adds	r5, r3, #1
	++sp;
   1f580:	9501      	str	r5, [sp, #4]
	if (*sp == '*') {
   1f582:	785a      	ldrb	r2, [r3, #1]
   1f584:	2a2a      	cmp	r2, #42	; 0x2a
   1f586:	d144      	bne.n	1f612 <extract_conversion+0xe6>
		conv->prec_present = true;
   1f588:	7862      	ldrb	r2, [r4, #1]
		return ++sp;
   1f58a:	3302      	adds	r3, #2
		conv->prec_present = true;
   1f58c:	f022 0206 	bic.w	r2, r2, #6
   1f590:	f042 0206 	orr.w	r2, r2, #6
   1f594:	7062      	strb	r2, [r4, #1]
	switch (*sp) {
   1f596:	4619      	mov	r1, r3
   1f598:	f811 0b01 	ldrb.w	r0, [r1], #1
   1f59c:	286c      	cmp	r0, #108	; 0x6c
   1f59e:	f000 8087 	beq.w	1f6b0 <extract_conversion+0x184>
   1f5a2:	d842      	bhi.n	1f62a <extract_conversion+0xfe>
   1f5a4:	2868      	cmp	r0, #104	; 0x68
   1f5a6:	d048      	beq.n	1f63a <extract_conversion+0x10e>
   1f5a8:	286a      	cmp	r0, #106	; 0x6a
   1f5aa:	f000 808a 	beq.w	1f6c2 <extract_conversion+0x196>
   1f5ae:	284c      	cmp	r0, #76	; 0x4c
   1f5b0:	f000 808d 	beq.w	1f6ce <extract_conversion+0x1a2>
		conv->length_mod = LENGTH_NONE;
   1f5b4:	7862      	ldrb	r2, [r4, #1]
		break;
   1f5b6:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   1f5b8:	f36f 02c6 	bfc	r2, #3, #4
   1f5bc:	7062      	strb	r2, [r4, #1]
		break;
   1f5be:	e045      	b.n	1f64c <extract_conversion+0x120>
		conv->specifier = *sp++;
   1f5c0:	1c88      	adds	r0, r1, #2
   1f5c2:	70e3      	strb	r3, [r4, #3]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   1f5c4:	b003      	add	sp, #12
   1f5c6:	bd30      	pop	{r4, r5, pc}
		switch (*sp) {
   1f5c8:	2b2d      	cmp	r3, #45	; 0x2d
   1f5ca:	d005      	beq.n	1f5d8 <extract_conversion+0xac>
   1f5cc:	2b30      	cmp	r3, #48	; 0x30
   1f5ce:	d1c1      	bne.n	1f554 <extract_conversion+0x28>
			conv->flag_zero = true;
   1f5d0:	7823      	ldrb	r3, [r4, #0]
   1f5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f5d6:	e002      	b.n	1f5de <extract_conversion+0xb2>
			conv->flag_dash = true;
   1f5d8:	7823      	ldrb	r3, [r4, #0]
   1f5da:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   1f5de:	7023      	strb	r3, [r4, #0]
			break;
   1f5e0:	e7ae      	b.n	1f540 <extract_conversion+0x14>
			conv->flag_plus = true;
   1f5e2:	7823      	ldrb	r3, [r4, #0]
   1f5e4:	f043 0308 	orr.w	r3, r3, #8
   1f5e8:	e7f9      	b.n	1f5de <extract_conversion+0xb2>
			conv->flag_space = true;
   1f5ea:	7823      	ldrb	r3, [r4, #0]
   1f5ec:	f043 0310 	orr.w	r3, r3, #16
   1f5f0:	e7f5      	b.n	1f5de <extract_conversion+0xb2>
			conv->flag_hash = true;
   1f5f2:	7823      	ldrb	r3, [r4, #0]
   1f5f4:	f043 0320 	orr.w	r3, r3, #32
   1f5f8:	e7f1      	b.n	1f5de <extract_conversion+0xb2>
	size_t width = extract_decimal(&sp);
   1f5fa:	a801      	add	r0, sp, #4
   1f5fc:	f7ff ff80 	bl	1f500 <extract_decimal>
	if (sp != wp) {
   1f600:	9b01      	ldr	r3, [sp, #4]
   1f602:	42ab      	cmp	r3, r5
		conv->width_present = true;
   1f604:	bf1f      	itttt	ne
   1f606:	7822      	ldrbne	r2, [r4, #0]
		conv->width_value = width;
   1f608:	6060      	strne	r0, [r4, #4]
		conv->width_present = true;
   1f60a:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
   1f60e:	7022      	strbne	r2, [r4, #0]
		if (width != conv->width_value) {
   1f610:	e7b1      	b.n	1f576 <extract_conversion+0x4a>
	size_t prec = extract_decimal(&sp);
   1f612:	a801      	add	r0, sp, #4
   1f614:	f7ff ff74 	bl	1f500 <extract_decimal>
	if (sp != wp) {
   1f618:	9b01      	ldr	r3, [sp, #4]
   1f61a:	429d      	cmp	r5, r3
		conv->prec_present = true;
   1f61c:	bf1f      	itttt	ne
   1f61e:	7862      	ldrbne	r2, [r4, #1]
		conv->prec_value = prec;
   1f620:	60a0      	strne	r0, [r4, #8]
		conv->prec_present = true;
   1f622:	f042 0202 	orrne.w	r2, r2, #2
   1f626:	7062      	strbne	r2, [r4, #1]
		if (prec != conv->prec_value) {
   1f628:	e7b5      	b.n	1f596 <extract_conversion+0x6a>
	switch (*sp) {
   1f62a:	2874      	cmp	r0, #116	; 0x74
   1f62c:	7862      	ldrb	r2, [r4, #1]
   1f62e:	d04b      	beq.n	1f6c8 <extract_conversion+0x19c>
   1f630:	287a      	cmp	r0, #122	; 0x7a
   1f632:	d1bf      	bne.n	1f5b4 <extract_conversion+0x88>
		conv->length_mod = LENGTH_Z;
   1f634:	4613      	mov	r3, r2
   1f636:	2206      	movs	r2, #6
   1f638:	e036      	b.n	1f6a8 <extract_conversion+0x17c>
		if (*++sp == 'h') {
   1f63a:	785a      	ldrb	r2, [r3, #1]
   1f63c:	2a68      	cmp	r2, #104	; 0x68
   1f63e:	7862      	ldrb	r2, [r4, #1]
   1f640:	d130      	bne.n	1f6a4 <extract_conversion+0x178>
			conv->length_mod = LENGTH_HH;
   1f642:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1f644:	f361 02c6 	bfi	r2, r1, #3, #4
   1f648:	7062      	strb	r2, [r4, #1]
			++sp;
   1f64a:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1f64c:	4608      	mov	r0, r1
   1f64e:	f810 2b01 	ldrb.w	r2, [r0], #1
	switch (conv->specifier) {
   1f652:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1f654:	70e2      	strb	r2, [r4, #3]
	switch (conv->specifier) {
   1f656:	f200 80b2 	bhi.w	1f7be <__kernel_ram_size+0xbe>
   1f65a:	2a57      	cmp	r2, #87	; 0x57
   1f65c:	d842      	bhi.n	1f6e4 <extract_conversion+0x1b8>
   1f65e:	2a41      	cmp	r2, #65	; 0x41
   1f660:	d004      	beq.n	1f66c <extract_conversion+0x140>
   1f662:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1f666:	2b02      	cmp	r3, #2
   1f668:	f200 80a9 	bhi.w	1f7be <__kernel_ram_size+0xbe>
		conv->specifier_cat = SPECIFIER_FP;
   1f66c:	2104      	movs	r1, #4
   1f66e:	78a3      	ldrb	r3, [r4, #2]
			|| (conv->specifier == 'A');
   1f670:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   1f674:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   1f678:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   1f67c:	424a      	negs	r2, r1
   1f67e:	414a      	adcs	r2, r1
		conv->specifier_a = (conv->specifier == 'a')
   1f680:	7861      	ldrb	r1, [r4, #1]
		conv->specifier_cat = SPECIFIER_FP;
   1f682:	70a3      	strb	r3, [r4, #2]
		conv->specifier_a = (conv->specifier == 'a')
   1f684:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   1f688:	060d      	lsls	r5, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   1f68a:	7061      	strb	r1, [r4, #1]
		if (conv->specifier_a
   1f68c:	b2cb      	uxtb	r3, r1
   1f68e:	f100 80b4 	bmi.w	1f7fa <__kernel_ram_size+0xfa>
		if (conv->length_mod == LENGTH_L) {
   1f692:	f003 0278 	and.w	r2, r3, #120	; 0x78
   1f696:	2a18      	cmp	r2, #24
   1f698:	f040 808e 	bne.w	1f7b8 <__kernel_ram_size+0xb8>
			conv->length_mod = LENGTH_NONE;
   1f69c:	f36f 03c6 	bfc	r3, #3, #4
   1f6a0:	7063      	strb	r3, [r4, #1]
   1f6a2:	e079      	b.n	1f798 <__kernel_ram_size+0x98>
			conv->length_mod = LENGTH_H;
   1f6a4:	4613      	mov	r3, r2
   1f6a6:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1f6a8:	f362 03c6 	bfi	r3, r2, #3, #4
   1f6ac:	7063      	strb	r3, [r4, #1]
   1f6ae:	e7cd      	b.n	1f64c <extract_conversion+0x120>
		if (*++sp == 'l') {
   1f6b0:	785a      	ldrb	r2, [r3, #1]
   1f6b2:	2a6c      	cmp	r2, #108	; 0x6c
   1f6b4:	7862      	ldrb	r2, [r4, #1]
   1f6b6:	d101      	bne.n	1f6bc <extract_conversion+0x190>
			conv->length_mod = LENGTH_LL;
   1f6b8:	2104      	movs	r1, #4
   1f6ba:	e7c3      	b.n	1f644 <extract_conversion+0x118>
			conv->length_mod = LENGTH_L;
   1f6bc:	4613      	mov	r3, r2
   1f6be:	2203      	movs	r2, #3
   1f6c0:	e7f2      	b.n	1f6a8 <extract_conversion+0x17c>
		conv->length_mod = LENGTH_J;
   1f6c2:	2205      	movs	r2, #5
   1f6c4:	7863      	ldrb	r3, [r4, #1]
   1f6c6:	e7ef      	b.n	1f6a8 <extract_conversion+0x17c>
		conv->length_mod = LENGTH_T;
   1f6c8:	4613      	mov	r3, r2
   1f6ca:	2207      	movs	r2, #7
   1f6cc:	e7ec      	b.n	1f6a8 <extract_conversion+0x17c>
		conv->unsupported = true;
   1f6ce:	8823      	ldrh	r3, [r4, #0]
   1f6d0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1f6d4:	f023 0302 	bic.w	r3, r3, #2
   1f6d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1f6dc:	f043 0302 	orr.w	r3, r3, #2
   1f6e0:	8023      	strh	r3, [r4, #0]
		break;
   1f6e2:	e7b3      	b.n	1f64c <extract_conversion+0x120>
   1f6e4:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1f6e8:	2b20      	cmp	r3, #32
   1f6ea:	d868      	bhi.n	1f7be <__kernel_ram_size+0xbe>
   1f6ec:	a101      	add	r1, pc, #4	; (adr r1, 1f6f4 <extract_conversion+0x1c8>)
   1f6ee:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1f6f2:	bf00      	nop
   1f6f4:	0001f79d 	.word	0x0001f79d
   1f6f8:	0001f7bf 	.word	0x0001f7bf
   1f6fc:	0001f7bf 	.word	0x0001f7bf
   1f700:	0001f7bf 	.word	0x0001f7bf
   1f704:	0001f7bf 	.word	0x0001f7bf
   1f708:	0001f7bf 	.word	0x0001f7bf
   1f70c:	0001f7bf 	.word	0x0001f7bf
   1f710:	0001f7bf 	.word	0x0001f7bf
   1f714:	0001f7bf 	.word	0x0001f7bf
   1f718:	0001f66d 	.word	0x0001f66d
   1f71c:	0001f7bf 	.word	0x0001f7bf
   1f720:	0001f79d 	.word	0x0001f79d
   1f724:	0001f779 	.word	0x0001f779
   1f728:	0001f66d 	.word	0x0001f66d
   1f72c:	0001f66d 	.word	0x0001f66d
   1f730:	0001f66d 	.word	0x0001f66d
   1f734:	0001f7bf 	.word	0x0001f7bf
   1f738:	0001f779 	.word	0x0001f779
   1f73c:	0001f7bf 	.word	0x0001f7bf
   1f740:	0001f7bf 	.word	0x0001f7bf
   1f744:	0001f7bf 	.word	0x0001f7bf
   1f748:	0001f7bf 	.word	0x0001f7bf
   1f74c:	0001f7c9 	.word	0x0001f7c9
   1f750:	0001f79d 	.word	0x0001f79d
   1f754:	0001f7e3 	.word	0x0001f7e3
   1f758:	0001f7bf 	.word	0x0001f7bf
   1f75c:	0001f7bf 	.word	0x0001f7bf
   1f760:	0001f7e3 	.word	0x0001f7e3
   1f764:	0001f7bf 	.word	0x0001f7bf
   1f768:	0001f79d 	.word	0x0001f79d
   1f76c:	0001f7bf 	.word	0x0001f7bf
   1f770:	0001f7bf 	.word	0x0001f7bf
   1f774:	0001f79d 	.word	0x0001f79d
		conv->specifier_cat = SPECIFIER_SINT;
   1f778:	2101      	movs	r1, #1
   1f77a:	78a3      	ldrb	r3, [r4, #2]
		conv->specifier_cat = SPECIFIER_UINT;
   1f77c:	f361 0302 	bfi	r3, r1, #0, #3
   1f780:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   1f782:	7863      	ldrb	r3, [r4, #1]
   1f784:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1f788:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   1f78a:	bf02      	ittt	eq
   1f78c:	7821      	ldrbeq	r1, [r4, #0]
   1f78e:	f041 0101 	orreq.w	r1, r1, #1
   1f792:	7021      	strbeq	r1, [r4, #0]
		if (conv->specifier == 'c') {
   1f794:	2a63      	cmp	r2, #99	; 0x63
   1f796:	d004      	beq.n	1f7a2 <__kernel_ram_size+0xa2>
	bool unsupported = false;
   1f798:	2300      	movs	r3, #0
   1f79a:	e005      	b.n	1f7a8 <__kernel_ram_size+0xa8>
		conv->specifier_cat = SPECIFIER_UINT;
   1f79c:	2102      	movs	r1, #2
   1f79e:	78a3      	ldrb	r3, [r4, #2]
   1f7a0:	e7ec      	b.n	1f77c <__kernel_ram_size+0x7c>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1f7a2:	3b00      	subs	r3, #0
   1f7a4:	bf18      	it	ne
   1f7a6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1f7a8:	7822      	ldrb	r2, [r4, #0]
   1f7aa:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1f7ae:	430b      	orrs	r3, r1
   1f7b0:	f363 0241 	bfi	r2, r3, #1, #1
   1f7b4:	7022      	strb	r2, [r4, #0]
	return sp;
   1f7b6:	e705      	b.n	1f5c4 <extract_conversion+0x98>
		} else if ((conv->length_mod != LENGTH_NONE)
   1f7b8:	f013 0f38 	tst.w	r3, #56	; 0x38
   1f7bc:	d0ec      	beq.n	1f798 <__kernel_ram_size+0x98>
			conv->invalid = true;
   1f7be:	7823      	ldrb	r3, [r4, #0]
   1f7c0:	f043 0301 	orr.w	r3, r3, #1
   1f7c4:	7023      	strb	r3, [r4, #0]
   1f7c6:	e7e7      	b.n	1f798 <__kernel_ram_size+0x98>
		conv->specifier_cat = SPECIFIER_PTR;
   1f7c8:	2203      	movs	r2, #3
   1f7ca:	78a3      	ldrb	r3, [r4, #2]
   1f7cc:	f362 0302 	bfi	r3, r2, #0, #3
   1f7d0:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   1f7d2:	7863      	ldrb	r3, [r4, #1]
   1f7d4:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1f7d8:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   1f7dc:	4253      	negs	r3, r2
   1f7de:	4153      	adcs	r3, r2
   1f7e0:	e7e2      	b.n	1f7a8 <__kernel_ram_size+0xa8>
		conv->specifier_cat = SPECIFIER_PTR;
   1f7e2:	2203      	movs	r2, #3
   1f7e4:	78a3      	ldrb	r3, [r4, #2]
   1f7e6:	f362 0302 	bfi	r3, r2, #0, #3
   1f7ea:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
   1f7ec:	7863      	ldrb	r3, [r4, #1]
   1f7ee:	f013 0f78 	tst.w	r3, #120	; 0x78
   1f7f2:	bf14      	ite	ne
   1f7f4:	2301      	movne	r3, #1
   1f7f6:	2300      	moveq	r3, #0
   1f7f8:	e7d6      	b.n	1f7a8 <__kernel_ram_size+0xa8>
			unsupported = true;
   1f7fa:	2301      	movs	r3, #1
   1f7fc:	e7d4      	b.n	1f7a8 <__kernel_ram_size+0xa8>
   1f7fe:	bf00      	nop

0001f800 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   1f800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f804:	4614      	mov	r4, r2
   1f806:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1f808:	78d3      	ldrb	r3, [r2, #3]
   1f80a:	4a24      	ldr	r2, [pc, #144]	; (1f89c <encode_uint+0x9c>)
	switch (specifier) {
   1f80c:	2b6f      	cmp	r3, #111	; 0x6f
   1f80e:	f813 a002 	ldrb.w	sl, [r3, r2]
{
   1f812:	4606      	mov	r6, r0
   1f814:	f00a 0203 	and.w	r2, sl, #3
   1f818:	460f      	mov	r7, r1
   1f81a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1f81c:	d02d      	beq.n	1f87a <encode_uint+0x7a>
   1f81e:	d828      	bhi.n	1f872 <encode_uint+0x72>
		return 16;
   1f820:	2b58      	cmp	r3, #88	; 0x58
   1f822:	bf14      	ite	ne
   1f824:	250a      	movne	r5, #10
   1f826:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   1f828:	46aa      	mov	sl, r5
   1f82a:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   1f82e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1f832:	4652      	mov	r2, sl
   1f834:	465b      	mov	r3, fp
   1f836:	4630      	mov	r0, r6
   1f838:	4639      	mov	r1, r7
   1f83a:	f7f8 ffbd 	bl	187b8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f83e:	2a09      	cmp	r2, #9
   1f840:	b2d3      	uxtb	r3, r2
   1f842:	d81f      	bhi.n	1f884 <encode_uint+0x84>
   1f844:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   1f846:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f848:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1f84a:	bf08      	it	eq
   1f84c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f84e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1f852:	d301      	bcc.n	1f858 <encode_uint+0x58>
   1f854:	45c8      	cmp	r8, r9
   1f856:	d812      	bhi.n	1f87e <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   1f858:	7823      	ldrb	r3, [r4, #0]
   1f85a:	069b      	lsls	r3, r3, #26
   1f85c:	d505      	bpl.n	1f86a <encode_uint+0x6a>
		if (radix == 8) {
   1f85e:	2d08      	cmp	r5, #8
   1f860:	d116      	bne.n	1f890 <encode_uint+0x90>
			conv->altform_0 = true;
   1f862:	78a3      	ldrb	r3, [r4, #2]
   1f864:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   1f868:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
   1f86a:	4640      	mov	r0, r8
   1f86c:	b003      	add	sp, #12
   1f86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1f872:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1f876:	2b70      	cmp	r3, #112	; 0x70
   1f878:	e7d3      	b.n	1f822 <encode_uint+0x22>
	switch (specifier) {
   1f87a:	2508      	movs	r5, #8
   1f87c:	e7d4      	b.n	1f828 <encode_uint+0x28>
		value /= radix;
   1f87e:	4606      	mov	r6, r0
   1f880:	460f      	mov	r7, r1
   1f882:	e7d6      	b.n	1f832 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f884:	9a01      	ldr	r2, [sp, #4]
   1f886:	2a01      	cmp	r2, #1
   1f888:	bf0c      	ite	eq
   1f88a:	3337      	addeq	r3, #55	; 0x37
   1f88c:	3357      	addne	r3, #87	; 0x57
   1f88e:	e7da      	b.n	1f846 <encode_uint+0x46>
		} else if (radix == 16) {
   1f890:	2d10      	cmp	r5, #16
   1f892:	d1ea      	bne.n	1f86a <encode_uint+0x6a>
			conv->altform_0c = true;
   1f894:	78a3      	ldrb	r3, [r4, #2]
   1f896:	f043 0310 	orr.w	r3, r3, #16
   1f89a:	e7e5      	b.n	1f868 <encode_uint+0x68>
   1f89c:	0003ca84 	.word	0x0003ca84

0001f8a0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1f8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8a4:	468a      	mov	sl, r1
   1f8a6:	4614      	mov	r4, r2
   1f8a8:	469b      	mov	fp, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1f8aa:	f04f 0900 	mov.w	r9, #0
{
   1f8ae:	b0a1      	sub	sp, #132	; 0x84
   1f8b0:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1f8b2:	7820      	ldrb	r0, [r4, #0]
   1f8b4:	b908      	cbnz	r0, 1f8ba <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1f8b6:	4648      	mov	r0, r9
   1f8b8:	e189      	b.n	1fbce <cbvprintf+0x32e>
		if (*fp != '%') {
   1f8ba:	2825      	cmp	r0, #37	; 0x25
   1f8bc:	d00a      	beq.n	1f8d4 <cbvprintf+0x34>
			OUTC(*fp++);
   1f8be:	4651      	mov	r1, sl
   1f8c0:	9b03      	ldr	r3, [sp, #12]
   1f8c2:	4798      	blx	r3
   1f8c4:	2800      	cmp	r0, #0
   1f8c6:	f2c0 8182 	blt.w	1fbce <cbvprintf+0x32e>
   1f8ca:	1c63      	adds	r3, r4, #1
   1f8cc:	930b      	str	r3, [sp, #44]	; 0x2c
			OUTC('%');
   1f8ce:	f109 0901 	add.w	r9, r9, #1
		if (bps == NULL) {
   1f8d2:	e067      	b.n	1f9a4 <cbvprintf+0x104>
		fp = extract_conversion(&conv, sp);
   1f8d4:	4621      	mov	r1, r4
   1f8d6:	a816      	add	r0, sp, #88	; 0x58
   1f8d8:	f7ff fe28 	bl	1f52c <extract_conversion>
		if (conv.width_star) {
   1f8dc:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
		fp = extract_conversion(&conv, sp);
   1f8e0:	900b      	str	r0, [sp, #44]	; 0x2c
		if (conv.width_star) {
   1f8e2:	07d8      	lsls	r0, r3, #31
   1f8e4:	d51c      	bpl.n	1f920 <cbvprintf+0x80>
			width = va_arg(ap, int);
   1f8e6:	f85b 2b04 	ldr.w	r2, [fp], #4
			if (width < 0) {
   1f8ea:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
   1f8ec:	920a      	str	r2, [sp, #40]	; 0x28
			if (width < 0) {
   1f8ee:	da08      	bge.n	1f902 <cbvprintf+0x62>
				conv.flag_dash = true;
   1f8f0:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   1f8f4:	f042 0204 	orr.w	r2, r2, #4
   1f8f8:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
				width = -width;
   1f8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f8fe:	4252      	negs	r2, r2
		int width = -1;
   1f900:	920a      	str	r2, [sp, #40]	; 0x28
		if (conv.prec_star) {
   1f902:	0759      	lsls	r1, r3, #29
   1f904:	d514      	bpl.n	1f930 <cbvprintf+0x90>
			int arg = va_arg(ap, int);
   1f906:	f85b 5b04 	ldr.w	r5, [fp], #4
			if (arg < 0) {
   1f90a:	2d00      	cmp	r5, #0
   1f90c:	da13      	bge.n	1f936 <cbvprintf+0x96>
				conv.prec_present = false;
   1f90e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   1f912:	f36f 0341 	bfc	r3, #1, #1
   1f916:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
   1f91a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f91e:	e00a      	b.n	1f936 <cbvprintf+0x96>
		} else if (conv.width_present) {
   1f920:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   1f924:	2a00      	cmp	r2, #0
		int width = -1;
   1f926:	bfac      	ite	ge
   1f928:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
			width = conv.width_value;
   1f92c:	9a17      	ldrlt	r2, [sp, #92]	; 0x5c
   1f92e:	e7e7      	b.n	1f900 <cbvprintf+0x60>
		} else if (conv.prec_present) {
   1f930:	079a      	lsls	r2, r3, #30
   1f932:	d5f2      	bpl.n	1f91a <cbvprintf+0x7a>
			precision = conv.prec_value;
   1f934:	9d18      	ldr	r5, [sp, #96]	; 0x60
		conv.pad0_value = 0;
   1f936:	2300      	movs	r3, #0
		conv.pad0_pre_exp = 0;
   1f938:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv.specifier_cat == SPECIFIER_FP)
   1f93c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   1f940:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   1f944:	f003 0307 	and.w	r3, r3, #7
   1f948:	2b04      	cmp	r3, #4
   1f94a:	d107      	bne.n	1f95c <cbvprintf+0xbc>
		    && !conv.prec_present) {
   1f94c:	0793      	lsls	r3, r2, #30
   1f94e:	d405      	bmi.n	1f95c <cbvprintf+0xbc>
			if (conv.specifier_a) {
   1f950:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
   1f954:	2b00      	cmp	r3, #0
   1f956:	bfb4      	ite	lt
   1f958:	250d      	movlt	r5, #13
   1f95a:	2506      	movge	r5, #6
			= (enum specifier_cat_enum)conv.specifier_cat;
   1f95c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		union argument_value value = (union argument_value){
   1f960:	2000      	movs	r0, #0
		enum specifier_cat_enum specifier_cat
   1f962:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1f966:	2b01      	cmp	r3, #1
		union argument_value value = (union argument_value){
   1f968:	f04f 0100 	mov.w	r1, #0
			= (enum length_mod_enum)conv.length_mod;
   1f96c:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1f970:	d126      	bne.n	1f9c0 <cbvprintf+0x120>
			switch (length_mod) {
   1f972:	1ed3      	subs	r3, r2, #3
   1f974:	2b04      	cmp	r3, #4
   1f976:	d817      	bhi.n	1f9a8 <cbvprintf+0x108>
   1f978:	e8df f003 	tbb	[pc, r3]
   1f97c:	16323203 	.word	0x16323203
   1f980:	16          	.byte	0x16
   1f981:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
   1f982:	f85b 0b04 	ldr.w	r0, [fp], #4
				value.sint = (short)value.sint;
   1f986:	17c1      	asrs	r1, r0, #31
		if (conv.invalid || conv.unsupported) {
   1f988:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
   1f98c:	07b7      	lsls	r7, r6, #30
   1f98e:	d047      	beq.n	1fa20 <cbvprintf+0x180>
			OUTS(sp, fp);
   1f990:	4622      	mov	r2, r4
   1f992:	4651      	mov	r1, sl
   1f994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f996:	9803      	ldr	r0, [sp, #12]
   1f998:	f014 fcc3 	bl	34322 <outs>
   1f99c:	2800      	cmp	r0, #0
   1f99e:	f2c0 8116 	blt.w	1fbce <cbvprintf+0x32e>
   1f9a2:	4481      	add	r9, r0
			continue;
   1f9a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f9a6:	e784      	b.n	1f8b2 <cbvprintf+0x12>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1f9a8:	f85b 0b04 	ldr.w	r0, [fp], #4
			if (length_mod == LENGTH_HH) {
   1f9ac:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1f9ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
			if (length_mod == LENGTH_HH) {
   1f9b2:	d101      	bne.n	1f9b8 <cbvprintf+0x118>
				value.uint = (unsigned char)value.uint;
   1f9b4:	b2c6      	uxtb	r6, r0
   1f9b6:	e00f      	b.n	1f9d8 <cbvprintf+0x138>
			} else if (length_mod == LENGTH_H) {
   1f9b8:	2a02      	cmp	r2, #2
   1f9ba:	d1e5      	bne.n	1f988 <cbvprintf+0xe8>
				value.sint = (short)value.sint;
   1f9bc:	b200      	sxth	r0, r0
   1f9be:	e7e2      	b.n	1f986 <cbvprintf+0xe6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1f9c0:	2b02      	cmp	r3, #2
   1f9c2:	d11f      	bne.n	1fa04 <cbvprintf+0x164>
			switch (length_mod) {
   1f9c4:	1ed3      	subs	r3, r2, #3
   1f9c6:	2b04      	cmp	r3, #4
   1f9c8:	d811      	bhi.n	1f9ee <cbvprintf+0x14e>
   1f9ca:	e8df f003 	tbb	[pc, r3]
   1f9ce:	0903      	.short	0x0903
   1f9d0:	1009      	.short	0x1009
   1f9d2:	10          	.byte	0x10
   1f9d3:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
   1f9d4:	f85b 6b04 	ldr.w	r6, [fp], #4
				value.uint = (unsigned short)value.uint;
   1f9d8:	2300      	movs	r3, #0
   1f9da:	4630      	mov	r0, r6
   1f9dc:	4619      	mov	r1, r3
   1f9de:	e7d3      	b.n	1f988 <cbvprintf+0xe8>
					(uint_value_type)va_arg(ap,
   1f9e0:	f10b 0b07 	add.w	fp, fp, #7
   1f9e4:	f02b 0b07 	bic.w	fp, fp, #7
				value.uint =
   1f9e8:	e8fb 0102 	ldrd	r0, r1, [fp], #8
				break;
   1f9ec:	e7cc      	b.n	1f988 <cbvprintf+0xe8>
				value.uint =
   1f9ee:	2300      	movs	r3, #0
   1f9f0:	f85b 6b04 	ldr.w	r6, [fp], #4
			if (length_mod == LENGTH_HH) {
   1f9f4:	2a01      	cmp	r2, #1
				value.uint =
   1f9f6:	4630      	mov	r0, r6
   1f9f8:	4619      	mov	r1, r3
			if (length_mod == LENGTH_HH) {
   1f9fa:	d0db      	beq.n	1f9b4 <cbvprintf+0x114>
			} else if (length_mod == LENGTH_H) {
   1f9fc:	2a02      	cmp	r2, #2
   1f9fe:	d1c3      	bne.n	1f988 <cbvprintf+0xe8>
				value.uint = (unsigned short)value.uint;
   1fa00:	b2b6      	uxth	r6, r6
   1fa02:	e7e9      	b.n	1f9d8 <cbvprintf+0x138>
		} else if (specifier_cat == SPECIFIER_FP) {
   1fa04:	2b04      	cmp	r3, #4
   1fa06:	d106      	bne.n	1fa16 <cbvprintf+0x176>
			if (length_mod == LENGTH_UPPER_L) {
   1fa08:	f10b 0b07 	add.w	fp, fp, #7
   1fa0c:	f02b 0b07 	bic.w	fp, fp, #7
   1fa10:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   1fa14:	e7b8      	b.n	1f988 <cbvprintf+0xe8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1fa16:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
   1fa18:	bf08      	it	eq
   1fa1a:	f85b 0b04 	ldreq.w	r0, [fp], #4
   1fa1e:	e7b3      	b.n	1f988 <cbvprintf+0xe8>
		switch (conv.specifier) {
   1fa20:	f89d 705b 	ldrb.w	r7, [sp, #91]	; 0x5b
   1fa24:	2f78      	cmp	r7, #120	; 0x78
   1fa26:	d8bd      	bhi.n	1f9a4 <cbvprintf+0x104>
   1fa28:	2f57      	cmp	r7, #87	; 0x57
   1fa2a:	d87f      	bhi.n	1fb2c <cbvprintf+0x28c>
   1fa2c:	2f25      	cmp	r7, #37	; 0x25
   1fa2e:	f000 80c7 	beq.w	1fbc0 <cbvprintf+0x320>
   1fa32:	2f24      	cmp	r7, #36	; 0x24
   1fa34:	d9b6      	bls.n	1f9a4 <cbvprintf+0x104>
   1fa36:	2f41      	cmp	r7, #65	; 0x41
   1fa38:	d003      	beq.n	1fa42 <cbvprintf+0x1a2>
   1fa3a:	f1a7 0345 	sub.w	r3, r7, #69	; 0x45
   1fa3e:	2b02      	cmp	r3, #2
   1fa40:	d8b0      	bhi.n	1f9a4 <cbvprintf+0x104>
	if ((u.u64 & SIGN_MASK) != 0U) {
   1fa42:	2800      	cmp	r0, #0
   1fa44:	f171 0300 	sbcs.w	r3, r1, #0
   1fa48:	f2c0 815c 	blt.w	1fd04 <cbvprintf+0x464>
	} else if (conv->flag_plus) {
   1fa4c:	0732      	lsls	r2, r6, #28
   1fa4e:	f100 815b 	bmi.w	1fd08 <cbvprintf+0x468>
		*sign = ' ';
   1fa52:	f016 0610 	ands.w	r6, r6, #16
   1fa56:	bf18      	it	ne
   1fa58:	2620      	movne	r6, #32
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   1fa5a:	f3c1 0313 	ubfx	r3, r1, #0, #20
   1fa5e:	9006      	str	r0, [sp, #24]
   1fa60:	9307      	str	r3, [sp, #28]
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1fa62:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   1fa66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1fa6a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (exp == 0) && (fract != 0);
   1fa6e:	2c00      	cmp	r4, #0
   1fa70:	f040 814c 	bne.w	1fd0c <cbvprintf+0x46c>
   1fa74:	4603      	mov	r3, r0
   1fa76:	9a07      	ldr	r2, [sp, #28]
   1fa78:	4313      	orrs	r3, r2
   1fa7a:	bf14      	ite	ne
   1fa7c:	f04f 0c01 	movne.w	ip, #1
   1fa80:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
   1fa84:	9907      	ldr	r1, [sp, #28]
		c = 'f';
   1fa86:	2f46      	cmp	r7, #70	; 0x46
	fract <<= EXPONENT_BITS;
   1fa88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1fa8c:	9906      	ldr	r1, [sp, #24]
		c = 'f';
   1fa8e:	bf08      	it	eq
   1fa90:	2766      	moveq	r7, #102	; 0x66
	fract <<= EXPONENT_BITS;
   1fa92:	02ca      	lsls	r2, r1, #11
   1fa94:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
   1fa98:	ea44 0102 	orr.w	r1, r4, r2
   1fa9c:	910c      	str	r1, [sp, #48]	; 0x30
   1fa9e:	17e1      	asrs	r1, r4, #31
   1faa0:	4319      	orrs	r1, r3
   1faa2:	910d      	str	r1, [sp, #52]	; 0x34
   1faa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1faa8:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
   1faaa:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((exp | fract) != 0) {
   1faae:	f000 81d1 	beq.w	1fe54 <cbvprintf+0x5b4>
		if (is_subnormal) {
   1fab2:	f1bc 0f00 	cmp.w	ip, #0
   1fab6:	f040 815f 	bne.w	1fd78 <cbvprintf+0x4d8>
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   1faba:	f2a4 38fe 	subw	r8, r4, #1022	; 0x3fe
		fract |= BIT_63;
   1fabe:	2400      	movs	r4, #0
   1fac0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1fac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1fac6:	9313      	str	r3, [sp, #76]	; 0x4c
	while (exp <= -3) {
   1fac8:	f118 0f02 	cmn.w	r8, #2
   1facc:	f2c0 8160 	blt.w	1fd90 <cbvprintf+0x4f0>
	while (exp > 0) {
   1fad0:	f1b8 0f00 	cmp.w	r8, #0
   1fad4:	f300 8198 	bgt.w	1fe08 <cbvprintf+0x568>
		_rlrshift(&fract);
   1fad8:	a812      	add	r0, sp, #72	; 0x48
		exp++;
   1fada:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   1fade:	f014 fbd7 	bl	34290 <_rlrshift>
	while (exp < (0 + 4)) {
   1fae2:	f1b8 0f04 	cmp.w	r8, #4
   1fae6:	d1f7      	bne.n	1fad8 <cbvprintf+0x238>
	if ((c == 'g') || (c == 'G')) {
   1fae8:	f007 03df 	and.w	r3, r7, #223	; 0xdf
   1faec:	2b47      	cmp	r3, #71	; 0x47
   1faee:	f040 81b7 	bne.w	1fe60 <cbvprintf+0x5c0>
		if (decexp < (-4 + 1) || decexp > precision) {
   1faf2:	1ce3      	adds	r3, r4, #3
   1faf4:	db02      	blt.n	1fafc <cbvprintf+0x25c>
   1faf6:	42ac      	cmp	r4, r5
   1faf8:	f340 81af 	ble.w	1fe5a <cbvprintf+0x5ba>
			c += 'e' - 'g';  /* e or E */
   1fafc:	3f02      	subs	r7, #2
			if (precision > 0) {
   1fafe:	2d00      	cmp	r5, #0
			c += 'e' - 'g';  /* e or E */
   1fb00:	b2ff      	uxtb	r7, r7
			if (precision > 0) {
   1fb02:	dd00      	ble.n	1fb06 <cbvprintf+0x266>
				precision--;
   1fb04:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
   1fb06:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   1fb0a:	0698      	lsls	r0, r3, #26
   1fb0c:	f100 81a8 	bmi.w	1fe60 <cbvprintf+0x5c0>
   1fb10:	2d00      	cmp	r5, #0
   1fb12:	bfd4      	ite	le
   1fb14:	2300      	movle	r3, #0
   1fb16:	2301      	movgt	r3, #1
	if (c == 'f') {
   1fb18:	2f66      	cmp	r7, #102	; 0x66
	bool prune_zero = false;
   1fb1a:	9304      	str	r3, [sp, #16]
	if (c == 'f') {
   1fb1c:	f040 81a2 	bne.w	1fe64 <cbvprintf+0x5c4>
		if (exp < 0) {
   1fb20:	1961      	adds	r1, r4, r5
   1fb22:	f140 81a0 	bpl.w	1fe66 <cbvprintf+0x5c6>
			exp = 0;
   1fb26:	f04f 0800 	mov.w	r8, #0
   1fb2a:	e1a0      	b.n	1fe6e <cbvprintf+0x5ce>
   1fb2c:	f1a7 0358 	sub.w	r3, r7, #88	; 0x58
   1fb30:	2b20      	cmp	r3, #32
   1fb32:	f63f af37 	bhi.w	1f9a4 <cbvprintf+0x104>
   1fb36:	a401      	add	r4, pc, #4	; (adr r4, 1fb3c <cbvprintf+0x29c>)
   1fb38:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
   1fb3c:	0001fca3 	.word	0x0001fca3
   1fb40:	0001f9a5 	.word	0x0001f9a5
   1fb44:	0001f9a5 	.word	0x0001f9a5
   1fb48:	0001f9a5 	.word	0x0001f9a5
   1fb4c:	0001f9a5 	.word	0x0001f9a5
   1fb50:	0001f9a5 	.word	0x0001f9a5
   1fb54:	0001f9a5 	.word	0x0001f9a5
   1fb58:	0001f9a5 	.word	0x0001f9a5
   1fb5c:	0001f9a5 	.word	0x0001f9a5
   1fb60:	0001fa43 	.word	0x0001fa43
   1fb64:	0001f9a5 	.word	0x0001f9a5
   1fb68:	0001fbef 	.word	0x0001fbef
   1fb6c:	0001fc51 	.word	0x0001fc51
   1fb70:	0001fa43 	.word	0x0001fa43
   1fb74:	0001fa43 	.word	0x0001fa43
   1fb78:	0001fa43 	.word	0x0001fa43
   1fb7c:	0001f9a5 	.word	0x0001f9a5
   1fb80:	0001fc51 	.word	0x0001fc51
   1fb84:	0001f9a5 	.word	0x0001f9a5
   1fb88:	0001f9a5 	.word	0x0001f9a5
   1fb8c:	0001f9a5 	.word	0x0001f9a5
   1fb90:	0001f9a5 	.word	0x0001f9a5
   1fb94:	0001fcd7 	.word	0x0001fcd7
   1fb98:	0001fca3 	.word	0x0001fca3
   1fb9c:	0001fca7 	.word	0x0001fca7
   1fba0:	0001f9a5 	.word	0x0001f9a5
   1fba4:	0001f9a5 	.word	0x0001f9a5
   1fba8:	0001fbd5 	.word	0x0001fbd5
   1fbac:	0001f9a5 	.word	0x0001f9a5
   1fbb0:	0001fca3 	.word	0x0001fca3
   1fbb4:	0001f9a5 	.word	0x0001f9a5
   1fbb8:	0001f9a5 	.word	0x0001f9a5
   1fbbc:	0001fca3 	.word	0x0001fca3
			OUTC('%');
   1fbc0:	4651      	mov	r1, sl
   1fbc2:	4638      	mov	r0, r7
   1fbc4:	9b03      	ldr	r3, [sp, #12]
   1fbc6:	4798      	blx	r3
   1fbc8:	2800      	cmp	r0, #0
   1fbca:	f6bf ae80 	bge.w	1f8ce <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
   1fbce:	b021      	add	sp, #132	; 0x84
   1fbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bps = (const char *)value.ptr;
   1fbd4:	4604      	mov	r4, r0
			size_t len = strlen(bps);
   1fbd6:	f7f9 fa4b 	bl	19070 <strlen>
			if ((precision >= 0)
   1fbda:	2d00      	cmp	r5, #0
   1fbdc:	db02      	blt.n	1fbe4 <cbvprintf+0x344>
   1fbde:	42a8      	cmp	r0, r5
   1fbe0:	bf28      	it	cs
   1fbe2:	4628      	movcs	r0, r5
		char sign = 0;
   1fbe4:	2600      	movs	r6, #0
			bpe = bps + len;
   1fbe6:	eb04 0800 	add.w	r8, r4, r0
		if (bps == NULL) {
   1fbea:	b934      	cbnz	r4, 1fbfa <cbvprintf+0x35a>
   1fbec:	e6da      	b.n	1f9a4 <cbvprintf+0x104>
		char sign = 0;
   1fbee:	2600      	movs	r6, #0
			buf[0] = value.uint;
   1fbf0:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
			bpe = buf + 1;
   1fbf4:	f10d 0865 	add.w	r8, sp, #101	; 0x65
				bps = encode_float(value.dbl, &conv, precision,
   1fbf8:	ac19      	add	r4, sp, #100	; 0x64
		size_t nj_len = (bpe - bps);
   1fbfa:	eba8 0704 	sub.w	r7, r8, r4
		if (sign != 0) {
   1fbfe:	b106      	cbz	r6, 1fc02 <cbvprintf+0x362>
			nj_len += 1U;
   1fc00:	3701      	adds	r7, #1
		if (conv.altform_0c) {
   1fc02:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   1fc06:	06cb      	lsls	r3, r1, #27
   1fc08:	f140 820a 	bpl.w	20020 <cbvprintf+0x780>
			nj_len += 2U;
   1fc0c:	3702      	adds	r7, #2
		nj_len += conv.pad0_value;
   1fc0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
		if (conv.pad_fp) {
   1fc10:	0648      	lsls	r0, r1, #25
		nj_len += conv.pad0_value;
   1fc12:	4417      	add	r7, r2
		if (width > 0) {
   1fc14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			nj_len += conv.pad0_pre_exp;
   1fc16:	bf44      	itt	mi
   1fc18:	9a18      	ldrmi	r2, [sp, #96]	; 0x60
   1fc1a:	18bf      	addmi	r7, r7, r2
		if (width > 0) {
   1fc1c:	2b00      	cmp	r3, #0
   1fc1e:	f340 8212 	ble.w	20046 <cbvprintf+0x7a6>
			if (!conv.flag_dash) {
   1fc22:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
			width -= (int)nj_len;
   1fc26:	1bdf      	subs	r7, r3, r7
			if (!conv.flag_dash) {
   1fc28:	0751      	lsls	r1, r2, #29
   1fc2a:	f3c2 0580 	ubfx	r5, r2, #2, #1
   1fc2e:	f100 8249 	bmi.w	200c4 <cbvprintf+0x824>
				if (conv.flag_zero) {
   1fc32:	0653      	lsls	r3, r2, #25
   1fc34:	f140 8242 	bpl.w	200bc <cbvprintf+0x81c>
					if (sign != 0) {
   1fc38:	b146      	cbz	r6, 1fc4c <cbvprintf+0x3ac>
						OUTC(sign);
   1fc3a:	4651      	mov	r1, sl
   1fc3c:	4630      	mov	r0, r6
   1fc3e:	9b03      	ldr	r3, [sp, #12]
   1fc40:	4798      	blx	r3
   1fc42:	2800      	cmp	r0, #0
   1fc44:	dbc3      	blt.n	1fbce <cbvprintf+0x32e>
						sign = 0;
   1fc46:	462e      	mov	r6, r5
						OUTC(sign);
   1fc48:	f109 0901 	add.w	r9, r9, #1
					pad = '0';
   1fc4c:	2530      	movs	r5, #48	; 0x30
   1fc4e:	e236      	b.n	200be <cbvprintf+0x81e>
			if (conv.flag_plus) {
   1fc50:	0734      	lsls	r4, r6, #28
   1fc52:	d424      	bmi.n	1fc9e <cbvprintf+0x3fe>
				sign = ' ';
   1fc54:	f016 0610 	ands.w	r6, r6, #16
   1fc58:	bf18      	it	ne
   1fc5a:	2620      	movne	r6, #32
			if (value.sint < 0) {
   1fc5c:	2800      	cmp	r0, #0
   1fc5e:	f171 0300 	sbcs.w	r3, r1, #0
   1fc62:	da03      	bge.n	1fc6c <cbvprintf+0x3cc>
				sign = '-';
   1fc64:	262d      	movs	r6, #45	; 0x2d
				value.uint = -value.sint;
   1fc66:	4240      	negs	r0, r0
   1fc68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
			bps = encode_uint(value.uint, &conv, buf, bpe);
   1fc6c:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   1fc70:	9300      	str	r3, [sp, #0]
   1fc72:	aa16      	add	r2, sp, #88	; 0x58
   1fc74:	ab19      	add	r3, sp, #100	; 0x64
   1fc76:	f7ff fdc3 	bl	1f800 <encode_uint>
   1fc7a:	4604      	mov	r4, r0
			if (precision >= 0) {
   1fc7c:	2d00      	cmp	r5, #0
   1fc7e:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   1fc82:	db0a      	blt.n	1fc9a <cbvprintf+0x3fa>
				conv.flag_zero = false;
   1fc84:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
   1fc88:	1b1a      	subs	r2, r3, r4
				conv.flag_zero = false;
   1fc8a:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   1fc8e:	4295      	cmp	r5, r2
				conv.flag_zero = false;
   1fc90:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
   1fc94:	d901      	bls.n	1fc9a <cbvprintf+0x3fa>
					conv.pad0_value = precision - (int)len;
   1fc96:	1aad      	subs	r5, r5, r2
   1fc98:	9517      	str	r5, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
   1fc9a:	4698      	mov	r8, r3
   1fc9c:	e7a5      	b.n	1fbea <cbvprintf+0x34a>
				sign = '+';
   1fc9e:	262b      	movs	r6, #43	; 0x2b
   1fca0:	e7dc      	b.n	1fc5c <cbvprintf+0x3bc>
		switch (conv.specifier) {
   1fca2:	2600      	movs	r6, #0
   1fca4:	e7e2      	b.n	1fc6c <cbvprintf+0x3cc>
			if (value.ptr != NULL) {
   1fca6:	2800      	cmp	r0, #0
   1fca8:	f000 81b4 	beq.w	20014 <cbvprintf+0x774>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   1fcac:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   1fcb0:	9300      	str	r3, [sp, #0]
   1fcb2:	2100      	movs	r1, #0
   1fcb4:	ab19      	add	r3, sp, #100	; 0x64
   1fcb6:	aa16      	add	r2, sp, #88	; 0x58
   1fcb8:	f7ff fda2 	bl	1f800 <encode_uint>
				conv.altform_0c = true;
   1fcbc:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   1fcc0:	4604      	mov	r4, r0
				conv.altform_0c = true;
   1fcc2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1fcc6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1fcca:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1fcce:	2600      	movs	r6, #0
				conv.altform_0c = true;
   1fcd0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
				goto prec_int_pad0;
   1fcd4:	e7d2      	b.n	1fc7c <cbvprintf+0x3dc>
	switch ((enum length_mod_enum)conv->length_mod) {
   1fcd6:	2a07      	cmp	r2, #7
   1fcd8:	f63f ae64 	bhi.w	1f9a4 <cbvprintf+0x104>
   1fcdc:	e8df f002 	tbb	[pc, r2]
   1fce0:	0f07040f 	.word	0x0f07040f
   1fce4:	0f0f0a0a 	.word	0x0f0f0a0a
		*(signed char *)dp = (signed char)count;
   1fce8:	f880 9000 	strb.w	r9, [r0]
		break;
   1fcec:	e65a      	b.n	1f9a4 <cbvprintf+0x104>
		*(short *)dp = (short)count;
   1fcee:	f8a0 9000 	strh.w	r9, [r0]
		break;
   1fcf2:	e657      	b.n	1f9a4 <cbvprintf+0x104>
		*(intmax_t *)dp = (intmax_t)count;
   1fcf4:	464a      	mov	r2, r9
   1fcf6:	17d3      	asrs	r3, r2, #31
   1fcf8:	e9c0 2300 	strd	r2, r3, [r0]
		break;
   1fcfc:	e652      	b.n	1f9a4 <cbvprintf+0x104>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1fcfe:	f8c0 9000 	str.w	r9, [r0]
		break;
   1fd02:	e64f      	b.n	1f9a4 <cbvprintf+0x104>
		*sign = '-';
   1fd04:	262d      	movs	r6, #45	; 0x2d
   1fd06:	e6a8      	b.n	1fa5a <cbvprintf+0x1ba>
		*sign = '+';
   1fd08:	262b      	movs	r6, #43	; 0x2b
   1fd0a:	e6a6      	b.n	1fa5a <cbvprintf+0x1ba>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
   1fd0c:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1fd10:	429c      	cmp	r4, r3
   1fd12:	d12d      	bne.n	1fd70 <cbvprintf+0x4d0>
		if (fract == 0) {
   1fd14:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   1fd18:	4bbd      	ldr	r3, [pc, #756]	; (20010 <cbvprintf+0x770>)
   1fd1a:	430a      	orrs	r2, r1
   1fd1c:	5cfb      	ldrb	r3, [r7, r3]
   1fd1e:	f003 0303 	and.w	r3, r3, #3
   1fd22:	d117      	bne.n	1fd54 <cbvprintf+0x4b4>
			if (isupper((int)c)) {
   1fd24:	2b01      	cmp	r3, #1
				*buf++ = 'I';
   1fd26:	bf0b      	itete	eq
   1fd28:	f644 6349 	movweq	r3, #20041	; 0x4e49
				*buf++ = 'i';
   1fd2c:	f646 6369 	movwne	r3, #28265	; 0x6e69
				*buf++ = 'I';
   1fd30:	f8ad 3064 	strheq.w	r3, [sp, #100]	; 0x64
				*buf++ = 'i';
   1fd34:	f8ad 3064 	strhne.w	r3, [sp, #100]	; 0x64
				*buf++ = 'F';
   1fd38:	bf0c      	ite	eq
   1fd3a:	2346      	moveq	r3, #70	; 0x46
				*buf++ = 'f';
   1fd3c:	2366      	movne	r3, #102	; 0x66
				*buf++ = 'n';
   1fd3e:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
		conv->flag_zero = false;
   1fd42:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
   1fd46:	f10d 0867 	add.w	r8, sp, #103	; 0x67
		conv->flag_zero = false;
   1fd4a:	f36f 1386 	bfc	r3, #6, #1
   1fd4e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		return bps;
   1fd52:	e751      	b.n	1fbf8 <cbvprintf+0x358>
			if (isupper((int)c)) {
   1fd54:	2b01      	cmp	r3, #1
				*buf++ = 'N';
   1fd56:	bf0b      	itete	eq
   1fd58:	f244 134e 	movweq	r3, #16718	; 0x414e
				*buf++ = 'n';
   1fd5c:	f246 136e 	movwne	r3, #24942	; 0x616e
				*buf++ = 'N';
   1fd60:	f8ad 3064 	strheq.w	r3, [sp, #100]	; 0x64
				*buf++ = 'n';
   1fd64:	f8ad 3064 	strhne.w	r3, [sp, #100]	; 0x64
				*buf++ = 'N';
   1fd68:	bf0c      	ite	eq
   1fd6a:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'n';
   1fd6c:	236e      	movne	r3, #110	; 0x6e
   1fd6e:	e7e6      	b.n	1fd3e <cbvprintf+0x49e>
	bool is_subnormal = (exp == 0) && (fract != 0);
   1fd70:	f04f 0c00 	mov.w	ip, #0
   1fd74:	e686      	b.n	1fa84 <cbvprintf+0x1e4>
				exp--;
   1fd76:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   1fd78:	1892      	adds	r2, r2, r2
   1fd7a:	415b      	adcs	r3, r3
   1fd7c:	2a00      	cmp	r2, #0
   1fd7e:	f173 0100 	sbcs.w	r1, r3, #0
   1fd82:	daf8      	bge.n	1fd76 <cbvprintf+0x4d6>
   1fd84:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   1fd88:	e697      	b.n	1faba <cbvprintf+0x21a>
			_rlrshift(&fract);
   1fd8a:	a812      	add	r0, sp, #72	; 0x48
   1fd8c:	f014 fa80 	bl	34290 <_rlrshift>
		while ((fract >> 32) >= (MAX_FP1 / 5)) {
   1fd90:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
   1fd94:	2300      	movs	r3, #0
   1fd96:	f8cd c020 	str.w	ip, [sp, #32]
   1fd9a:	9309      	str	r3, [sp, #36]	; 0x24
   1fd9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1fda0:	2900      	cmp	r1, #0
   1fda2:	bf08      	it	eq
   1fda4:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
   1fda8:	f108 0801 	add.w	r8, r8, #1
   1fdac:	d2ed      	bcs.n	1fd8a <cbvprintf+0x4ea>
		fract *= 5U;
   1fdae:	2005      	movs	r0, #5
   1fdb0:	fba2 2300 	umull	r2, r3, r2, r0
   1fdb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1fdb8:	9b05      	ldr	r3, [sp, #20]
		decexp--;
   1fdba:	3c01      	subs	r4, #1
		fract *= 5U;
   1fdbc:	fb00 330c 	mla	r3, r0, ip, r3
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   1fdc0:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   1fdc4:	9305      	str	r3, [sp, #20]
   1fdc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fdca:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   1fdce:	2100      	movs	r1, #0
   1fdd0:	2300      	movs	r3, #0
   1fdd2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1fdd6:	9805      	ldr	r0, [sp, #20]
   1fdd8:	428b      	cmp	r3, r1
   1fdda:	bf08      	it	eq
   1fddc:	4282      	cmpeq	r2, r0
   1fdde:	d208      	bcs.n	1fdf2 <cbvprintf+0x552>
   1fde0:	f1bc 0f00 	cmp.w	ip, #0
   1fde4:	f43f ae70 	beq.w	1fac8 <cbvprintf+0x228>
   1fde8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fdec:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   1fdf0:	e66a      	b.n	1fac8 <cbvprintf+0x228>
			fract <<= 1;
   1fdf2:	9b04      	ldr	r3, [sp, #16]
			exp--;
   1fdf4:	f04f 0c01 	mov.w	ip, #1
			fract <<= 1;
   1fdf8:	18db      	adds	r3, r3, r3
   1fdfa:	9304      	str	r3, [sp, #16]
   1fdfc:	9b05      	ldr	r3, [sp, #20]
			exp--;
   1fdfe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
   1fe02:	415b      	adcs	r3, r3
   1fe04:	9305      	str	r3, [sp, #20]
			exp--;
   1fe06:	e7e2      	b.n	1fdce <cbvprintf+0x52e>
		_ldiv5(&fract);
   1fe08:	a812      	add	r0, sp, #72	; 0x48
   1fe0a:	f014 fa52 	bl	342b2 <_ldiv5>
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   1fe0e:	f04f 0c00 	mov.w	ip, #0
   1fe12:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1fe14:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
		exp--;
   1fe18:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   1fe1c:	3401      	adds	r4, #1
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   1fe1e:	9304      	str	r3, [sp, #16]
   1fe20:	2300      	movs	r3, #0
   1fe22:	2100      	movs	r1, #0
   1fe24:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1fe28:	4299      	cmp	r1, r3
   1fe2a:	bf08      	it	eq
   1fe2c:	4570      	cmpeq	r0, lr
   1fe2e:	d207      	bcs.n	1fe40 <cbvprintf+0x5a0>
   1fe30:	f1bc 0f00 	cmp.w	ip, #0
   1fe34:	f43f ae4c 	beq.w	1fad0 <cbvprintf+0x230>
   1fe38:	9b04      	ldr	r3, [sp, #16]
   1fe3a:	e9cd 3e12 	strd	r3, lr, [sp, #72]	; 0x48
   1fe3e:	e647      	b.n	1fad0 <cbvprintf+0x230>
			fract <<= 1;
   1fe40:	9b04      	ldr	r3, [sp, #16]
			exp--;
   1fe42:	f04f 0c01 	mov.w	ip, #1
			fract <<= 1;
   1fe46:	18db      	adds	r3, r3, r3
   1fe48:	9304      	str	r3, [sp, #16]
   1fe4a:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
   1fe4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1fe52:	e7e5      	b.n	1fe20 <cbvprintf+0x580>
   1fe54:	2400      	movs	r4, #0
   1fe56:	46a0      	mov	r8, r4
   1fe58:	e63e      	b.n	1fad8 <cbvprintf+0x238>
			c = 'f';
   1fe5a:	2766      	movs	r7, #102	; 0x66
			precision -= decexp;
   1fe5c:	1b2d      	subs	r5, r5, r4
   1fe5e:	e652      	b.n	1fb06 <cbvprintf+0x266>
	bool prune_zero = false;
   1fe60:	2300      	movs	r3, #0
   1fe62:	e659      	b.n	1fb18 <cbvprintf+0x278>
		exp = precision + 1;
   1fe64:	1c69      	adds	r1, r5, #1
	if (exp > 16) {
   1fe66:	2910      	cmp	r1, #16
   1fe68:	bfa8      	it	ge
   1fe6a:	2110      	movge	r1, #16
   1fe6c:	4688      	mov	r8, r1
   1fe6e:	2310      	movs	r3, #16
	uint64_t ltemp = BIT64(59);
   1fe70:	2200      	movs	r2, #0
   1fe72:	9311      	str	r3, [sp, #68]	; 0x44
   1fe74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1fe78:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
   1fe7c:	f1b8 0801 	subs.w	r8, r8, #1
   1fe80:	d222      	bcs.n	1fec8 <cbvprintf+0x628>
	fract += ltemp;
   1fe82:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1fe84:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fe86:	9915      	ldr	r1, [sp, #84]	; 0x54
   1fe88:	189b      	adds	r3, r3, r2
   1fe8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1fe8c:	eb41 0202 	adc.w	r2, r1, r2
   1fe90:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & (0x0FU << 28)) {
   1fe94:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
   1fe98:	930e      	str	r3, [sp, #56]	; 0x38
   1fe9a:	2300      	movs	r3, #0
   1fe9c:	930f      	str	r3, [sp, #60]	; 0x3c
   1fe9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1fea2:	4313      	orrs	r3, r2
   1fea4:	d006      	beq.n	1feb4 <cbvprintf+0x614>
		_ldiv5(&fract);
   1fea6:	a812      	add	r0, sp, #72	; 0x48
   1fea8:	f014 fa03 	bl	342b2 <_ldiv5>
		_rlrshift(&fract);
   1feac:	a812      	add	r0, sp, #72	; 0x48
   1feae:	f014 f9ef 	bl	34290 <_rlrshift>
		decexp++;
   1feb2:	3401      	adds	r4, #1
	if (c == 'f') {
   1feb4:	2f66      	cmp	r7, #102	; 0x66
   1feb6:	d17d      	bne.n	1ffb4 <cbvprintf+0x714>
		if (decexp > 0) {
   1feb8:	2c00      	cmp	r4, #0
   1feba:	dc0c      	bgt.n	1fed6 <cbvprintf+0x636>
			*buf++ = '0';
   1febc:	2330      	movs	r3, #48	; 0x30
   1febe:	f10d 0865 	add.w	r8, sp, #101	; 0x65
   1fec2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
   1fec6:	e015      	b.n	1fef4 <cbvprintf+0x654>
		_ldiv5(&ltemp);
   1fec8:	a814      	add	r0, sp, #80	; 0x50
   1feca:	f014 f9f2 	bl	342b2 <_ldiv5>
		_rlrshift(&ltemp);
   1fece:	a814      	add	r0, sp, #80	; 0x50
   1fed0:	f014 f9de 	bl	34290 <_rlrshift>
   1fed4:	e7d2      	b.n	1fe7c <cbvprintf+0x5dc>
	char *buf = bps;
   1fed6:	f10d 0864 	add.w	r8, sp, #100	; 0x64
			while (decexp > 0 && digit_count > 0) {
   1feda:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1fedc:	2a00      	cmp	r2, #0
   1fede:	dd07      	ble.n	1fef0 <cbvprintf+0x650>
				*buf++ = _get_digit(&fract, &digit_count);
   1fee0:	a911      	add	r1, sp, #68	; 0x44
   1fee2:	a812      	add	r0, sp, #72	; 0x48
   1fee4:	f014 fa06 	bl	342f4 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   1fee8:	3c01      	subs	r4, #1
				*buf++ = _get_digit(&fract, &digit_count);
   1feea:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   1feee:	d1f4      	bne.n	1feda <cbvprintf+0x63a>
			conv->pad0_value = decexp;
   1fef0:	9417      	str	r4, [sp, #92]	; 0x5c
			decexp = 0;
   1fef2:	2400      	movs	r4, #0
		if (conv->flag_hash || (precision > 0)) {
   1fef4:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   1fef8:	0691      	lsls	r1, r2, #26
   1fefa:	d401      	bmi.n	1ff00 <cbvprintf+0x660>
   1fefc:	2d00      	cmp	r5, #0
   1fefe:	dd1b      	ble.n	1ff38 <cbvprintf+0x698>
			*buf++ = '.';
   1ff00:	222e      	movs	r2, #46	; 0x2e
   1ff02:	f808 2b01 	strb.w	r2, [r8], #1
		if (decexp < 0 && precision > 0) {
   1ff06:	b194      	cbz	r4, 1ff2e <cbvprintf+0x68e>
   1ff08:	2d00      	cmp	r5, #0
   1ff0a:	dd15      	ble.n	1ff38 <cbvprintf+0x698>
			conv->pad0_value = -decexp;
   1ff0c:	4262      	negs	r2, r4
   1ff0e:	42aa      	cmp	r2, r5
   1ff10:	bfa8      	it	ge
   1ff12:	462a      	movge	r2, r5
			conv->pad_postdp = (conv->pad0_value > 0);
   1ff14:	2a00      	cmp	r2, #0
			conv->pad0_value = -decexp;
   1ff16:	9217      	str	r2, [sp, #92]	; 0x5c
			precision -= conv->pad0_value;
   1ff18:	eba5 0502 	sub.w	r5, r5, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   1ff1c:	bfd4      	ite	le
   1ff1e:	2200      	movle	r2, #0
   1ff20:	2201      	movgt	r2, #1
   1ff22:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   1ff26:	f362 1145 	bfi	r1, r2, #5, #1
   1ff2a:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	while (precision > 0 && digit_count > 0) {
   1ff2e:	2d00      	cmp	r5, #0
   1ff30:	dd02      	ble.n	1ff38 <cbvprintf+0x698>
   1ff32:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1ff34:	2a00      	cmp	r2, #0
   1ff36:	dc53      	bgt.n	1ffe0 <cbvprintf+0x740>
	if (prune_zero) {
   1ff38:	9b04      	ldr	r3, [sp, #16]
   1ff3a:	2b00      	cmp	r3, #0
   1ff3c:	d15b      	bne.n	1fff6 <cbvprintf+0x756>
	conv->pad0_pre_exp = precision;
   1ff3e:	9518      	str	r5, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
   1ff40:	f007 02df 	and.w	r2, r7, #223	; 0xdf
   1ff44:	2a45      	cmp	r2, #69	; 0x45
   1ff46:	d123      	bne.n	1ff90 <cbvprintf+0x6f0>
		if (decexp < 0) {
   1ff48:	2c00      	cmp	r4, #0
			*buf++ = '-';
   1ff4a:	bfb4      	ite	lt
   1ff4c:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   1ff4e:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
   1ff50:	4641      	mov	r1, r8
			decexp = -decexp;
   1ff52:	bfb8      	it	lt
   1ff54:	4264      	neglt	r4, r4
		if (decexp >= 100) {
   1ff56:	2c63      	cmp	r4, #99	; 0x63
		*buf++ = c;
   1ff58:	f801 7b02 	strb.w	r7, [r1], #2
			*buf++ = '-';
   1ff5c:	f888 2001 	strb.w	r2, [r8, #1]
		if (decexp >= 100) {
   1ff60:	dd0a      	ble.n	1ff78 <cbvprintf+0x6d8>
			*buf++ = (decexp / 100) + '0';
   1ff62:	2064      	movs	r0, #100	; 0x64
   1ff64:	fb94 f2f0 	sdiv	r2, r4, r0
			decexp %= 100;
   1ff68:	fb00 4412 	mls	r4, r0, r2, r4
			*buf++ = (decexp / 100) + '0';
   1ff6c:	f102 0530 	add.w	r5, r2, #48	; 0x30
   1ff70:	f108 0103 	add.w	r1, r8, #3
   1ff74:	f888 5002 	strb.w	r5, [r8, #2]
		*buf++ = (decexp / 10) + '0';
   1ff78:	200a      	movs	r0, #10
   1ff7a:	fb94 f2f0 	sdiv	r2, r4, r0
   1ff7e:	4688      	mov	r8, r1
		*buf++ = (decexp % 10) + '0';
   1ff80:	fb00 4412 	mls	r4, r0, r2, r4
		*buf++ = (decexp / 10) + '0';
   1ff84:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   1ff88:	3430      	adds	r4, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   1ff8a:	f808 5b02 	strb.w	r5, [r8], #2
		*buf++ = (decexp % 10) + '0';
   1ff8e:	704c      	strb	r4, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
   1ff90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1ff92:	2a00      	cmp	r2, #0
   1ff94:	dc3a      	bgt.n	2000c <cbvprintf+0x76c>
   1ff96:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1ff98:	2a00      	cmp	r2, #0
   1ff9a:	bfd4      	ite	le
   1ff9c:	2200      	movle	r2, #0
   1ff9e:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
   1ffa0:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   1ffa4:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
   1ffa8:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
   1ffaa:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
   1ffae:	f888 2000 	strb.w	r2, [r8]
	return bps;
   1ffb2:	e621      	b.n	1fbf8 <cbvprintf+0x358>
		*buf = _get_digit(&fract, &digit_count);
   1ffb4:	a911      	add	r1, sp, #68	; 0x44
   1ffb6:	a812      	add	r0, sp, #72	; 0x48
   1ffb8:	f014 f99c 	bl	342f4 <_get_digit>
		if (conv->flag_hash || (precision > 0)) {
   1ffbc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		if (*buf++ != '0') {
   1ffc0:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   1ffc2:	bf18      	it	ne
   1ffc4:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
   1ffc8:	069a      	lsls	r2, r3, #26
		*buf = _get_digit(&fract, &digit_count);
   1ffca:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
		if (conv->flag_hash || (precision > 0)) {
   1ffce:	d401      	bmi.n	1ffd4 <cbvprintf+0x734>
   1ffd0:	2d00      	cmp	r5, #0
   1ffd2:	dd0d      	ble.n	1fff0 <cbvprintf+0x750>
			*buf++ = '.';
   1ffd4:	232e      	movs	r3, #46	; 0x2e
   1ffd6:	f10d 0866 	add.w	r8, sp, #102	; 0x66
   1ffda:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
   1ffde:	e7a6      	b.n	1ff2e <cbvprintf+0x68e>
		*buf++ = _get_digit(&fract, &digit_count);
   1ffe0:	a911      	add	r1, sp, #68	; 0x44
   1ffe2:	a812      	add	r0, sp, #72	; 0x48
   1ffe4:	f014 f986 	bl	342f4 <_get_digit>
		precision--;
   1ffe8:	3d01      	subs	r5, #1
		*buf++ = _get_digit(&fract, &digit_count);
   1ffea:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   1ffee:	e79e      	b.n	1ff2e <cbvprintf+0x68e>
		if (*buf++ != '0') {
   1fff0:	f10d 0865 	add.w	r8, sp, #101	; 0x65
   1fff4:	e7a0      	b.n	1ff38 <cbvprintf+0x698>
		conv->pad0_pre_exp = 0;
   1fff6:	2200      	movs	r2, #0
   1fff8:	9218      	str	r2, [sp, #96]	; 0x60
		while (*--buf == '0') {
   1fffa:	4641      	mov	r1, r8
   1fffc:	f818 2d01 	ldrb.w	r2, [r8, #-1]!
   20000:	2a30      	cmp	r2, #48	; 0x30
   20002:	d0fa      	beq.n	1fffa <cbvprintf+0x75a>
		if (*buf != '.') {
   20004:	2a2e      	cmp	r2, #46	; 0x2e
   20006:	bf18      	it	ne
   20008:	4688      	movne	r8, r1
   2000a:	e799      	b.n	1ff40 <cbvprintf+0x6a0>
		|| (conv->pad0_pre_exp > 0);
   2000c:	2201      	movs	r2, #1
   2000e:	e7c7      	b.n	1ffa0 <cbvprintf+0x700>
   20010:	0003ca84 	.word	0x0003ca84
			bpe = bps + 5;
   20014:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 201f4 <cbvprintf+0x954>
		char sign = 0;
   20018:	4606      	mov	r6, r0
			bps = "(nil)";
   2001a:	f1a8 0405 	sub.w	r4, r8, #5
   2001e:	e5ec      	b.n	1fbfa <cbvprintf+0x35a>
		} else if (conv.altform_0) {
   20020:	070d      	lsls	r5, r1, #28
			nj_len += 1U;
   20022:	bf48      	it	mi
   20024:	3701      	addmi	r7, #1
   20026:	e5f2      	b.n	1fc0e <cbvprintf+0x36e>
					OUTC(pad);
   20028:	4651      	mov	r1, sl
   2002a:	4628      	mov	r0, r5
   2002c:	9b03      	ldr	r3, [sp, #12]
   2002e:	4798      	blx	r3
   20030:	2800      	cmp	r0, #0
   20032:	f6ff adcc 	blt.w	1fbce <cbvprintf+0x32e>
   20036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20038:	eba7 0903 	sub.w	r9, r7, r3
				while (width-- > 0) {
   2003c:	2b00      	cmp	r3, #0
   2003e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   20042:	930a      	str	r3, [sp, #40]	; 0x28
   20044:	dcf0      	bgt.n	20028 <cbvprintf+0x788>
		if (sign != 0) {
   20046:	b146      	cbz	r6, 2005a <cbvprintf+0x7ba>
			OUTC(sign);
   20048:	4651      	mov	r1, sl
   2004a:	4630      	mov	r0, r6
   2004c:	9b03      	ldr	r3, [sp, #12]
   2004e:	4798      	blx	r3
   20050:	2800      	cmp	r0, #0
   20052:	f6ff adbc 	blt.w	1fbce <cbvprintf+0x32e>
   20056:	f109 0901 	add.w	r9, r9, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv.pad_fp) {
   2005a:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   2005e:	0650      	lsls	r0, r2, #25
   20060:	f140 8081 	bpl.w	20166 <cbvprintf+0x8c6>
			if (conv.specifier_a) {
   20064:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
   20068:	2a00      	cmp	r2, #0
   2006a:	db2d      	blt.n	200c8 <cbvprintf+0x828>
   2006c:	eba9 0904 	sub.w	r9, r9, r4
				while (isdigit((int)*cp)) {
   20070:	7820      	ldrb	r0, [r4, #0]
   20072:	4b5f      	ldr	r3, [pc, #380]	; (201f0 <cbvprintf+0x950>)
   20074:	4625      	mov	r5, r4
   20076:	5cc2      	ldrb	r2, [r0, r3]
   20078:	eb09 0604 	add.w	r6, r9, r4
   2007c:	0751      	lsls	r1, r2, #29
   2007e:	f104 0401 	add.w	r4, r4, #1
   20082:	d445      	bmi.n	20110 <cbvprintf+0x870>
				if (!conv.pad_postdp) {
   20084:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv.pad0_value;
   20088:	9c17      	ldr	r4, [sp, #92]	; 0x5c
				if (!conv.pad_postdp) {
   2008a:	0692      	lsls	r2, r2, #26
   2008c:	d406      	bmi.n	2009c <cbvprintf+0x7fc>
   2008e:	19a7      	adds	r7, r4, r6
					while (pad_len-- > 0) {
   20090:	2c00      	cmp	r4, #0
   20092:	eba7 0604 	sub.w	r6, r7, r4
   20096:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   2009a:	dc3f      	bgt.n	2011c <cbvprintf+0x87c>
				if (*cp == '.') {
   2009c:	7828      	ldrb	r0, [r5, #0]
   2009e:	282e      	cmp	r0, #46	; 0x2e
   200a0:	d10a      	bne.n	200b8 <cbvprintf+0x818>
					OUTC(*cp++);
   200a2:	4651      	mov	r1, sl
   200a4:	9b03      	ldr	r3, [sp, #12]
   200a6:	4798      	blx	r3
						OUTC('0');
   200a8:	2800      	cmp	r0, #0
   200aa:	f6ff ad90 	blt.w	1fbce <cbvprintf+0x32e>
					while (pad_len-- > 0) {
   200ae:	2c00      	cmp	r4, #0
						OUTC('0');
   200b0:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   200b4:	dc39      	bgt.n	2012a <cbvprintf+0x88a>
					OUTC(*cp++);
   200b6:	3501      	adds	r5, #1
   200b8:	1b76      	subs	r6, r6, r5
   200ba:	e042      	b.n	20142 <cbvprintf+0x8a2>
				char pad = ' ';
   200bc:	2520      	movs	r5, #32
					pad = '0';
   200be:	970a      	str	r7, [sp, #40]	; 0x28
   200c0:	444f      	add	r7, r9
   200c2:	e7b8      	b.n	20036 <cbvprintf+0x796>
			width -= (int)nj_len;
   200c4:	970a      	str	r7, [sp, #40]	; 0x28
   200c6:	e7be      	b.n	20046 <cbvprintf+0x7a6>
			if (conv.specifier_a) {
   200c8:	4625      	mov	r5, r4
   200ca:	eba9 0904 	sub.w	r9, r9, r4
   200ce:	462f      	mov	r7, r5
   200d0:	eb09 0405 	add.w	r4, r9, r5
				while (*cp != 'p') {
   200d4:	f815 0b01 	ldrb.w	r0, [r5], #1
   200d8:	2870      	cmp	r0, #112	; 0x70
   200da:	d113      	bne.n	20104 <cbvprintf+0x864>
			while (pad_len-- > 0) {
   200dc:	9d18      	ldr	r5, [sp, #96]	; 0x60
   200de:	4425      	add	r5, r4
   200e0:	1b2a      	subs	r2, r5, r4
   200e2:	2a00      	cmp	r2, #0
   200e4:	dc36      	bgt.n	20154 <cbvprintf+0x8b4>
			OUTS(cp, bpe);
   200e6:	4643      	mov	r3, r8
   200e8:	463a      	mov	r2, r7
   200ea:	4651      	mov	r1, sl
   200ec:	9803      	ldr	r0, [sp, #12]
   200ee:	f014 f918 	bl	34322 <outs>
   200f2:	2800      	cmp	r0, #0
   200f4:	f6ff ad6b 	blt.w	1fbce <cbvprintf+0x32e>
   200f8:	4420      	add	r0, r4
   200fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			while (pad_len-- > 0) {
   200fc:	4681      	mov	r9, r0
   200fe:	4403      	add	r3, r0
   20100:	461d      	mov	r5, r3
   20102:	e06f      	b.n	201e4 <cbvprintf+0x944>
					OUTC(*cp++);
   20104:	4651      	mov	r1, sl
   20106:	9b03      	ldr	r3, [sp, #12]
   20108:	4798      	blx	r3
   2010a:	2800      	cmp	r0, #0
   2010c:	dadf      	bge.n	200ce <cbvprintf+0x82e>
   2010e:	e55e      	b.n	1fbce <cbvprintf+0x32e>
					OUTC(*cp++);
   20110:	4651      	mov	r1, sl
   20112:	9b03      	ldr	r3, [sp, #12]
   20114:	4798      	blx	r3
   20116:	2800      	cmp	r0, #0
   20118:	daaa      	bge.n	20070 <cbvprintf+0x7d0>
   2011a:	e558      	b.n	1fbce <cbvprintf+0x32e>
						OUTC('0');
   2011c:	4651      	mov	r1, sl
   2011e:	2030      	movs	r0, #48	; 0x30
   20120:	9b03      	ldr	r3, [sp, #12]
   20122:	4798      	blx	r3
   20124:	2800      	cmp	r0, #0
   20126:	dab3      	bge.n	20090 <cbvprintf+0x7f0>
   20128:	e551      	b.n	1fbce <cbvprintf+0x32e>
						OUTC('0');
   2012a:	4651      	mov	r1, sl
   2012c:	2030      	movs	r0, #48	; 0x30
   2012e:	9b03      	ldr	r3, [sp, #12]
   20130:	4798      	blx	r3
   20132:	3c01      	subs	r4, #1
   20134:	e7b8      	b.n	200a8 <cbvprintf+0x808>
					OUTC(*cp++);
   20136:	4651      	mov	r1, sl
   20138:	9b03      	ldr	r3, [sp, #12]
   2013a:	4798      	blx	r3
   2013c:	2800      	cmp	r0, #0
   2013e:	f6ff ad46 	blt.w	1fbce <cbvprintf+0x32e>
				while (isdigit((int)*cp)) {
   20142:	4b2b      	ldr	r3, [pc, #172]	; (201f0 <cbvprintf+0x950>)
   20144:	462f      	mov	r7, r5
   20146:	1974      	adds	r4, r6, r5
   20148:	f815 0b01 	ldrb.w	r0, [r5], #1
   2014c:	5cc2      	ldrb	r2, [r0, r3]
   2014e:	0753      	lsls	r3, r2, #29
   20150:	d4f1      	bmi.n	20136 <cbvprintf+0x896>
   20152:	e7c3      	b.n	200dc <cbvprintf+0x83c>
				OUTC('0');
   20154:	4651      	mov	r1, sl
   20156:	2030      	movs	r0, #48	; 0x30
   20158:	9b03      	ldr	r3, [sp, #12]
   2015a:	4798      	blx	r3
   2015c:	2800      	cmp	r0, #0
   2015e:	f6ff ad36 	blt.w	1fbce <cbvprintf+0x32e>
   20162:	3401      	adds	r4, #1
   20164:	e7bc      	b.n	200e0 <cbvprintf+0x840>
			if (conv.altform_0c | conv.altform_0) {
   20166:	06d1      	lsls	r1, r2, #27
   20168:	d401      	bmi.n	2016e <cbvprintf+0x8ce>
   2016a:	0712      	lsls	r2, r2, #28
   2016c:	d508      	bpl.n	20180 <cbvprintf+0x8e0>
				OUTC('0');
   2016e:	4651      	mov	r1, sl
   20170:	2030      	movs	r0, #48	; 0x30
   20172:	9b03      	ldr	r3, [sp, #12]
   20174:	4798      	blx	r3
   20176:	2800      	cmp	r0, #0
   20178:	f6ff ad29 	blt.w	1fbce <cbvprintf+0x32e>
   2017c:	f109 0901 	add.w	r9, r9, #1
			if (conv.altform_0c) {
   20180:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   20184:	06d3      	lsls	r3, r2, #27
   20186:	d509      	bpl.n	2019c <cbvprintf+0x8fc>
				OUTC(conv.specifier);
   20188:	4651      	mov	r1, sl
   2018a:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
   2018e:	9b03      	ldr	r3, [sp, #12]
   20190:	4798      	blx	r3
   20192:	2800      	cmp	r0, #0
   20194:	f6ff ad1b 	blt.w	1fbce <cbvprintf+0x32e>
   20198:	f109 0901 	add.w	r9, r9, #1
			while (pad_len-- > 0) {
   2019c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   2019e:	444d      	add	r5, r9
   201a0:	eba5 0209 	sub.w	r2, r5, r9
   201a4:	2a00      	cmp	r2, #0
   201a6:	dc0a      	bgt.n	201be <cbvprintf+0x91e>
			OUTS(bps, bpe);
   201a8:	4643      	mov	r3, r8
   201aa:	4622      	mov	r2, r4
   201ac:	4651      	mov	r1, sl
   201ae:	9803      	ldr	r0, [sp, #12]
   201b0:	f014 f8b7 	bl	34322 <outs>
   201b4:	2800      	cmp	r0, #0
   201b6:	f6ff ad0a 	blt.w	1fbce <cbvprintf+0x32e>
   201ba:	4448      	add	r0, r9
   201bc:	e79d      	b.n	200fa <cbvprintf+0x85a>
				OUTC('0');
   201be:	4651      	mov	r1, sl
   201c0:	2030      	movs	r0, #48	; 0x30
   201c2:	9b03      	ldr	r3, [sp, #12]
   201c4:	4798      	blx	r3
   201c6:	2800      	cmp	r0, #0
   201c8:	f6ff ad01 	blt.w	1fbce <cbvprintf+0x32e>
   201cc:	f109 0901 	add.w	r9, r9, #1
   201d0:	e7e6      	b.n	201a0 <cbvprintf+0x900>
			OUTC(' ');
   201d2:	4651      	mov	r1, sl
   201d4:	2020      	movs	r0, #32
   201d6:	9b03      	ldr	r3, [sp, #12]
   201d8:	4798      	blx	r3
   201da:	2800      	cmp	r0, #0
   201dc:	f6ff acf7 	blt.w	1fbce <cbvprintf+0x32e>
   201e0:	f109 0901 	add.w	r9, r9, #1
		while (width > 0) {
   201e4:	eba5 0309 	sub.w	r3, r5, r9
   201e8:	2b00      	cmp	r3, #0
   201ea:	dcf2      	bgt.n	201d2 <cbvprintf+0x932>
   201ec:	f7ff bbda 	b.w	1f9a4 <cbvprintf+0x104>
   201f0:	0003ca84 	.word	0x0003ca84
   201f4:	0003a7ca 	.word	0x0003a7ca

000201f8 <nordicsemi_nrf91_init>:
   201f8:	f04f 0220 	mov.w	r2, #32
   201fc:	f3ef 8311 	mrs	r3, BASEPRI
   20200:	f382 8811 	msr	BASEPRI, r2
   20204:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   20208:	2101      	movs	r1, #1
   2020a:	4a04      	ldr	r2, [pc, #16]	; (2021c <nordicsemi_nrf91_init+0x24>)
   2020c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   20210:	f383 8811 	msr	BASEPRI, r3
   20214:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   20218:	2000      	movs	r0, #0
   2021a:	4770      	bx	lr
   2021c:	40039000 	.word	0x40039000

00020220 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   20220:	b120      	cbz	r0, 2022c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   20222:	4b03      	ldr	r3, [pc, #12]	; (20230 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   20224:	0180      	lsls	r0, r0, #6
   20226:	f043 0301 	orr.w	r3, r3, #1
   2022a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2022c:	4770      	bx	lr
   2022e:	bf00      	nop
   20230:	00038490 	.word	0x00038490

00020234 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   20234:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   20236:	2200      	movs	r2, #0
{
   20238:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   2023a:	490f      	ldr	r1, [pc, #60]	; (20278 <enable_logger+0x44>)
   2023c:	480f      	ldr	r0, [pc, #60]	; (2027c <enable_logger+0x48>)
   2023e:	f016 ff0b 	bl	37058 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20242:	2200      	movs	r2, #0
   20244:	2300      	movs	r3, #0
   20246:	2400      	movs	r4, #0
   20248:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2024c:	230e      	movs	r3, #14
   2024e:	4d0c      	ldr	r5, [pc, #48]	; (20280 <enable_logger+0x4c>)
   20250:	e9cd 3403 	strd	r3, r4, [sp, #12]
   20254:	f44f 7240 	mov.w	r2, #768	; 0x300
   20258:	4628      	mov	r0, r5
   2025a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2025e:	4b09      	ldr	r3, [pc, #36]	; (20284 <enable_logger+0x50>)
   20260:	4909      	ldr	r1, [pc, #36]	; (20288 <enable_logger+0x54>)
   20262:	9400      	str	r4, [sp, #0]
   20264:	f012 f91e 	bl	324a4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   20268:	4908      	ldr	r1, [pc, #32]	; (2028c <enable_logger+0x58>)
   2026a:	4628      	mov	r0, r5
   2026c:	f016 fe09 	bl	36e82 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   20270:	4620      	mov	r0, r4
   20272:	b009      	add	sp, #36	; 0x24
   20274:	bd30      	pop	{r4, r5, pc}
   20276:	bf00      	nop
   20278:	00020291 	.word	0x00020291
   2027c:	20021530 	.word	0x20021530
   20280:	20021568 	.word	0x20021568
   20284:	000206c5 	.word	0x000206c5
   20288:	2002f198 	.word	0x2002f198
   2028c:	0003a7cf 	.word	0x0003a7cf

00020290 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   20290:	4801      	ldr	r0, [pc, #4]	; (20298 <log_process_thread_timer_expiry_fn+0x8>)
   20292:	f012 b857 	b.w	32344 <z_impl_k_sem_give>
   20296:	bf00      	nop
   20298:	200208ac 	.word	0x200208ac

0002029c <z_log_get_s_mask>:
{
   2029c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2029e:	4605      	mov	r5, r0
	uint32_t mask = 0;
   202a0:	2000      	movs	r0, #0
				mask |= BIT(arg);
   202a2:	2701      	movs	r7, #1
	uint32_t arg = 0;
   202a4:	4603      	mov	r3, r0
	bool arm = false;
   202a6:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   202a8:	4e0d      	ldr	r6, [pc, #52]	; (202e0 <z_log_get_s_mask+0x44>)
	while ((curr = *str++) && arg < nargs) {
   202aa:	f815 4b01 	ldrb.w	r4, [r5], #1
   202ae:	b10c      	cbz	r4, 202b4 <z_log_get_s_mask+0x18>
   202b0:	428b      	cmp	r3, r1
   202b2:	d300      	bcc.n	202b6 <z_log_get_s_mask+0x1a>
}
   202b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   202b6:	2c25      	cmp	r4, #37	; 0x25
   202b8:	d102      	bne.n	202c0 <z_log_get_s_mask+0x24>
			arm = !arm;
   202ba:	f082 0201 	eor.w	r2, r2, #1
   202be:	e7f4      	b.n	202aa <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
   202c0:	2a00      	cmp	r2, #0
   202c2:	d0f2      	beq.n	202aa <z_log_get_s_mask+0xe>
   202c4:	f814 c006 	ldrb.w	ip, [r4, r6]
   202c8:	f01c 0f03 	tst.w	ip, #3
   202cc:	d0ed      	beq.n	202aa <z_log_get_s_mask+0xe>
			if (curr == 's') {
   202ce:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   202d0:	bf04      	itt	eq
   202d2:	fa07 f203 	lsleq.w	r2, r7, r3
   202d6:	4310      	orreq	r0, r2
			arg++;
   202d8:	3301      	adds	r3, #1
			arm = false;
   202da:	2200      	movs	r2, #0
   202dc:	e7e5      	b.n	202aa <z_log_get_s_mask+0xe>
   202de:	bf00      	nop
   202e0:	0003ca84 	.word	0x0003ca84

000202e4 <log_core_init>:
{
   202e4:	b508      	push	{r3, lr}
		log_msg_pool_init();
   202e6:	f000 fa4b 	bl	20780 <log_msg_pool_init>
		log_list_init(&list);
   202ea:	4809      	ldr	r0, [pc, #36]	; (20310 <log_core_init+0x2c>)
   202ec:	f014 f8e9 	bl	344c2 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   202f0:	2304      	movs	r3, #4
   202f2:	2234      	movs	r2, #52	; 0x34
   202f4:	4907      	ldr	r1, [pc, #28]	; (20314 <log_core_init+0x30>)
   202f6:	4808      	ldr	r0, [pc, #32]	; (20318 <log_core_init+0x34>)
   202f8:	f016 fbfa 	bl	36af0 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   202fc:	4b07      	ldr	r3, [pc, #28]	; (2031c <log_core_init+0x38>)
   202fe:	4a08      	ldr	r2, [pc, #32]	; (20320 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
   20300:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   20304:	601a      	str	r2, [r3, #0]
}
   20306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   2030a:	f000 bc85 	b.w	20c18 <log_output_timestamp_freq_set>
   2030e:	bf00      	nop
   20310:	200235c8 	.word	0x200235c8
   20314:	200331d8 	.word	0x200331d8
   20318:	200235d0 	.word	0x200235d0
   2031c:	200200e4 	.word	0x200200e4
   20320:	00034501 	.word	0x00034501

00020324 <dropped_notify>:
{
   20324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20326:	2500      	movs	r5, #0
   20328:	4b0c      	ldr	r3, [pc, #48]	; (2035c <dropped_notify+0x38>)
   2032a:	e8d3 7fef 	ldaex	r7, [r3]
   2032e:	e8c3 5fe2 	stlex	r2, r5, [r3]
   20332:	2a00      	cmp	r2, #0
   20334:	d1f9      	bne.n	2032a <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   20336:	4c0a      	ldr	r4, [pc, #40]	; (20360 <dropped_notify+0x3c>)
   20338:	4e0a      	ldr	r6, [pc, #40]	; (20364 <dropped_notify+0x40>)
   2033a:	1b36      	subs	r6, r6, r4
   2033c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   2033e:	42b5      	cmp	r5, r6
   20340:	db00      	blt.n	20344 <dropped_notify+0x20>
}
   20342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   20344:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   20346:	795b      	ldrb	r3, [r3, #5]
   20348:	b12b      	cbz	r3, 20356 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
   2034a:	6823      	ldr	r3, [r4, #0]
   2034c:	68db      	ldr	r3, [r3, #12]
   2034e:	b113      	cbz	r3, 20356 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
   20350:	4639      	mov	r1, r7
   20352:	4620      	mov	r0, r4
   20354:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   20356:	3501      	adds	r5, #1
   20358:	3410      	adds	r4, #16
   2035a:	e7f0      	b.n	2033e <dropped_notify+0x1a>
   2035c:	200235c0 	.word	0x200235c0
   20360:	00038414 	.word	0x00038414
   20364:	00038424 	.word	0x00038424

00020368 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20368:	4b04      	ldr	r3, [pc, #16]	; (2037c <log_dropped+0x14>)
   2036a:	e8d3 2fef 	ldaex	r2, [r3]
   2036e:	3201      	adds	r2, #1
   20370:	e8c3 2fe1 	stlex	r1, r2, [r3]
   20374:	2900      	cmp	r1, #0
   20376:	d1f8      	bne.n	2036a <log_dropped+0x2>
}
   20378:	4770      	bx	lr
   2037a:	bf00      	nop
   2037c:	200235c0 	.word	0x200235c0

00020380 <log_source_name_get>:
   20380:	4a04      	ldr	r2, [pc, #16]	; (20394 <log_source_name_get+0x14>)
   20382:	4b05      	ldr	r3, [pc, #20]	; (20398 <log_source_name_get+0x18>)
   20384:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   20386:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   2038a:	bf34      	ite	cc
   2038c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   20390:	2000      	movcs	r0, #0
}
   20392:	4770      	bx	lr
   20394:	0003831c 	.word	0x0003831c
   20398:	00038414 	.word	0x00038414

0002039c <log_backend_enable>:
	id += backend - log_backend_get(0);
   2039c:	4b09      	ldr	r3, [pc, #36]	; (203c4 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   2039e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   203a0:	1ac3      	subs	r3, r0, r3
   203a2:	111b      	asrs	r3, r3, #4
   203a4:	3301      	adds	r3, #1
{
   203a6:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   203a8:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
   203aa:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
   203ac:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
   203ae:	4c06      	ldr	r4, [pc, #24]	; (203c8 <log_backend_enable+0x2c>)
   203b0:	715a      	strb	r2, [r3, #5]
   203b2:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   203b4:	6019      	str	r1, [r3, #0]
   203b6:	b912      	cbnz	r2, 203be <log_backend_enable+0x22>
   203b8:	4804      	ldr	r0, [pc, #16]	; (203cc <log_backend_enable+0x30>)
   203ba:	f011 ffc3 	bl	32344 <z_impl_k_sem_give>
	backend_attached = true;
   203be:	2301      	movs	r3, #1
   203c0:	7023      	strb	r3, [r4, #0]
}
   203c2:	bd10      	pop	{r4, pc}
   203c4:	00038414 	.word	0x00038414
   203c8:	2002bc56 	.word	0x2002bc56
   203cc:	200208ac 	.word	0x200208ac

000203d0 <log_init>:
{
   203d0:	b570      	push	{r4, r5, r6, lr}
   203d2:	4b0f      	ldr	r3, [pc, #60]	; (20410 <log_init+0x40>)
   203d4:	e8d3 5fef 	ldaex	r5, [r3]
   203d8:	1c6a      	adds	r2, r5, #1
   203da:	e8c3 2fe1 	stlex	r1, r2, [r3]
   203de:	2900      	cmp	r1, #0
   203e0:	d1f8      	bne.n	203d4 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
   203e2:	b92d      	cbnz	r5, 203f0 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
   203e4:	4c0b      	ldr	r4, [pc, #44]	; (20414 <log_init+0x44>)
   203e6:	4e0c      	ldr	r6, [pc, #48]	; (20418 <log_init+0x48>)
   203e8:	1b36      	subs	r6, r6, r4
   203ea:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   203ec:	42b5      	cmp	r5, r6
   203ee:	db00      	blt.n	203f2 <log_init+0x22>
}
   203f0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   203f2:	7b23      	ldrb	r3, [r4, #12]
   203f4:	b143      	cbz	r3, 20408 <log_init+0x38>
			if (backend->api->init != NULL) {
   203f6:	6823      	ldr	r3, [r4, #0]
   203f8:	695b      	ldr	r3, [r3, #20]
   203fa:	b103      	cbz	r3, 203fe <log_init+0x2e>
				backend->api->init();
   203fc:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   203fe:	2204      	movs	r2, #4
   20400:	2100      	movs	r1, #0
   20402:	4620      	mov	r0, r4
   20404:	f7ff ffca 	bl	2039c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   20408:	3501      	adds	r5, #1
   2040a:	3410      	adds	r4, #16
   2040c:	e7ee      	b.n	203ec <log_init+0x1c>
   2040e:	bf00      	nop
   20410:	200235c4 	.word	0x200235c4
   20414:	00038414 	.word	0x00038414
   20418:	00038424 	.word	0x00038424

0002041c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   2041c:	4b15      	ldr	r3, [pc, #84]	; (20474 <log_strdup+0x58>)
{
   2041e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   20420:	4298      	cmp	r0, r3
{
   20422:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   20424:	d302      	bcc.n	2042c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   20426:	4b14      	ldr	r3, [pc, #80]	; (20478 <log_strdup+0x5c>)
   20428:	4298      	cmp	r0, r3
   2042a:	d31d      	bcc.n	20468 <log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   2042c:	2200      	movs	r2, #0
   2042e:	2300      	movs	r3, #0
   20430:	4812      	ldr	r0, [pc, #72]	; (2047c <log_strdup+0x60>)
   20432:	a901      	add	r1, sp, #4
   20434:	f011 f9d6 	bl	317e4 <k_mem_slab_alloc>
	if (err != 0) {
   20438:	4605      	mov	r5, r0
   2043a:	b9c0      	cbnz	r0, 2046e <log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2043c:	2201      	movs	r2, #1
   2043e:	9b01      	ldr	r3, [sp, #4]
   20440:	e8d3 1fef 	ldaex	r1, [r3]
   20444:	e8c3 2fe0 	stlex	r0, r2, [r3]
   20448:	2800      	cmp	r0, #0
   2044a:	d1f9      	bne.n	20440 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   2044c:	9e01      	ldr	r6, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2044e:	222d      	movs	r2, #45	; 0x2d
   20450:	1d33      	adds	r3, r6, #4
   20452:	4618      	mov	r0, r3
   20454:	4621      	mov	r1, r4
   20456:	f017 f94d 	bl	376f4 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   2045a:	227e      	movs	r2, #126	; 0x7e
   2045c:	4603      	mov	r3, r0
   2045e:	f886 2031 	strb.w	r2, [r6, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   20462:	f886 5032 	strb.w	r5, [r6, #50]	; 0x32
	return dup->buf;
   20466:	461c      	mov	r4, r3
}
   20468:	4620      	mov	r0, r4
   2046a:	b002      	add	sp, #8
   2046c:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   2046e:	4b04      	ldr	r3, [pc, #16]	; (20480 <log_strdup+0x64>)
   20470:	e7f9      	b.n	20466 <log_strdup+0x4a>
   20472:	bf00      	nop
   20474:	00038048 	.word	0x00038048
   20478:	0003cbdc 	.word	0x0003cbdc
   2047c:	200235d0 	.word	0x200235d0
   20480:	0003a7d7 	.word	0x0003a7d7

00020484 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   20484:	b148      	cbz	r0, 2049a <log_is_strdup+0x16>
   20486:	4b05      	ldr	r3, [pc, #20]	; (2049c <log_is_strdup+0x18>)
   20488:	4298      	cmp	r0, r3
   2048a:	d305      	bcc.n	20498 <log_is_strdup+0x14>
   2048c:	33d0      	adds	r3, #208	; 0xd0
   2048e:	4298      	cmp	r0, r3
   20490:	bf2c      	ite	cs
   20492:	2000      	movcs	r0, #0
   20494:	2001      	movcc	r0, #1
   20496:	4770      	bx	lr
   20498:	2000      	movs	r0, #0
}
   2049a:	4770      	bx	lr
   2049c:	200331d8 	.word	0x200331d8

000204a0 <z_impl_log_process>:
{
   204a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   204a4:	4b4a      	ldr	r3, [pc, #296]	; (205d0 <z_impl_log_process+0x130>)
{
   204a6:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   204a8:	781b      	ldrb	r3, [r3, #0]
{
   204aa:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
   204ac:	b903      	cbnz	r3, 204b0 <z_impl_log_process+0x10>
   204ae:	b340      	cbz	r0, 20502 <z_impl_log_process+0x62>
	__asm__ volatile(
   204b0:	f04f 0320 	mov.w	r3, #32
   204b4:	f3ef 8611 	mrs	r6, BASEPRI
   204b8:	f383 8811 	msr	BASEPRI, r3
   204bc:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   204c0:	4844      	ldr	r0, [pc, #272]	; (205d4 <z_impl_log_process+0x134>)
   204c2:	f014 f80e 	bl	344e2 <log_list_head_get>
   204c6:	4605      	mov	r5, r0
	__asm__ volatile(
   204c8:	f386 8811 	msr	BASEPRI, r6
   204cc:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   204d0:	b158      	cbz	r0, 204ea <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   204d2:	4b41      	ldr	r3, [pc, #260]	; (205d8 <z_impl_log_process+0x138>)
   204d4:	e8d3 2fef 	ldaex	r2, [r3]
   204d8:	3a01      	subs	r2, #1
   204da:	e8c3 2fe1 	stlex	r1, r2, [r3]
   204de:	2900      	cmp	r1, #0
   204e0:	d1f8      	bne.n	204d4 <z_impl_log_process+0x34>
	if (!bypass) {
   204e2:	b194      	cbz	r4, 2050a <z_impl_log_process+0x6a>
	log_msg_put(msg);
   204e4:	4628      	mov	r0, r5
   204e6:	f014 f911 	bl	3470c <log_msg_put>
	if (!bypass && dropped_cnt) {
   204ea:	b924      	cbnz	r4, 204f6 <z_impl_log_process+0x56>
   204ec:	4b3b      	ldr	r3, [pc, #236]	; (205dc <z_impl_log_process+0x13c>)
   204ee:	681b      	ldr	r3, [r3, #0]
   204f0:	b10b      	cbz	r3, 204f6 <z_impl_log_process+0x56>
		dropped_notify();
   204f2:	f7ff ff17 	bl	20324 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   204f6:	4837      	ldr	r0, [pc, #220]	; (205d4 <z_impl_log_process+0x134>)
   204f8:	f013 fff1 	bl	344de <log_list_head_peek>
   204fc:	1e04      	subs	r4, r0, #0
   204fe:	bf18      	it	ne
   20500:	2401      	movne	r4, #1
}
   20502:	4620      	mov	r0, r4
   20504:	b005      	add	sp, #20
   20506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   2050a:	4b35      	ldr	r3, [pc, #212]	; (205e0 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   2050c:	781b      	ldrb	r3, [r3, #0]
   2050e:	b9cb      	cbnz	r3, 20544 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   20510:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   20512:	07db      	lsls	r3, r3, #31
   20514:	d416      	bmi.n	20544 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
   20516:	f014 f908 	bl	3472a <log_msg_str_get>
   2051a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   2051c:	4628      	mov	r0, r5
   2051e:	f014 f8d3 	bl	346c8 <log_msg_nargs_get>
   20522:	4601      	mov	r1, r0
   20524:	4640      	mov	r0, r8
   20526:	f7ff feb9 	bl	2029c <z_log_get_s_mask>
   2052a:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   2052c:	4f2d      	ldr	r7, [pc, #180]	; (205e4 <z_impl_log_process+0x144>)
   2052e:	4b2e      	ldr	r3, [pc, #184]	; (205e8 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   20530:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 20604 <z_impl_log_process+0x164>
   20534:	1bdb      	subs	r3, r3, r7
   20536:	08db      	lsrs	r3, r3, #3
   20538:	9303      	str	r3, [sp, #12]
   2053a:	4b2c      	ldr	r3, [pc, #176]	; (205ec <z_impl_log_process+0x14c>)
   2053c:	1bdb      	subs	r3, r3, r7
   2053e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   20542:	b936      	cbnz	r6, 20552 <z_impl_log_process+0xb2>
   20544:	4e2a      	ldr	r6, [pc, #168]	; (205f0 <z_impl_log_process+0x150>)
   20546:	4f2b      	ldr	r7, [pc, #172]	; (205f4 <z_impl_log_process+0x154>)
   20548:	f04f 0800 	mov.w	r8, #0
   2054c:	1bbf      	subs	r7, r7, r6
   2054e:	113f      	asrs	r7, r7, #4
   20550:	e03a      	b.n	205c8 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
   20552:	fab6 f186 	clz	r1, r6
   20556:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   2055a:	4649      	mov	r1, r9
   2055c:	4628      	mov	r0, r5
   2055e:	f014 f8b6 	bl	346ce <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   20562:	4b25      	ldr	r3, [pc, #148]	; (205f8 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   20564:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   20566:	4298      	cmp	r0, r3
   20568:	d302      	bcc.n	20570 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   2056a:	4a24      	ldr	r2, [pc, #144]	; (205fc <z_impl_log_process+0x15c>)
   2056c:	4290      	cmp	r0, r2
   2056e:	d31a      	bcc.n	205a6 <z_impl_log_process+0x106>
   20570:	4608      	mov	r0, r1
   20572:	f7ff ff87 	bl	20484 <log_is_strdup>
   20576:	4602      	mov	r2, r0
   20578:	b9a8      	cbnz	r0, 205a6 <z_impl_log_process+0x106>
   2057a:	4b21      	ldr	r3, [pc, #132]	; (20600 <z_impl_log_process+0x160>)
   2057c:	4299      	cmp	r1, r3
   2057e:	d012      	beq.n	205a6 <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
   20580:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   20582:	9903      	ldr	r1, [sp, #12]
   20584:	f3c3 1389 	ubfx	r3, r3, #6, #10
   20588:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   2058a:	bf38      	it	cc
   2058c:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   20590:	ea4f 138a 	mov.w	r3, sl, lsl #6
   20594:	f043 0301 	orr.w	r3, r3, #1
   20598:	f8ad 3000 	strh.w	r3, [sp]
   2059c:	4649      	mov	r1, r9
   2059e:	4643      	mov	r3, r8
   205a0:	4658      	mov	r0, fp
   205a2:	f013 fff0 	bl	34586 <log_3>
		mask &= ~BIT(idx);
   205a6:	2301      	movs	r3, #1
   205a8:	fa03 f109 	lsl.w	r1, r3, r9
   205ac:	ea26 0601 	bic.w	r6, r6, r1
   205b0:	e7c7      	b.n	20542 <z_impl_log_process+0xa2>
	return backend->cb->active;
   205b2:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   205b4:	795b      	ldrb	r3, [r3, #5]
   205b6:	b123      	cbz	r3, 205c2 <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
   205b8:	6833      	ldr	r3, [r6, #0]
   205ba:	4629      	mov	r1, r5
   205bc:	4630      	mov	r0, r6
   205be:	681b      	ldr	r3, [r3, #0]
   205c0:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   205c2:	f108 0801 	add.w	r8, r8, #1
   205c6:	3610      	adds	r6, #16
   205c8:	45b8      	cmp	r8, r7
   205ca:	dbf2      	blt.n	205b2 <z_impl_log_process+0x112>
   205cc:	e78a      	b.n	204e4 <z_impl_log_process+0x44>
   205ce:	bf00      	nop
   205d0:	2002bc56 	.word	0x2002bc56
   205d4:	200235c8 	.word	0x200235c8
   205d8:	200235bc 	.word	0x200235bc
   205dc:	200235c0 	.word	0x200235c0
   205e0:	2002bc57 	.word	0x2002bc57
   205e4:	0003831c 	.word	0x0003831c
   205e8:	00038414 	.word	0x00038414
   205ec:	000383ac 	.word	0x000383ac
   205f0:	00038414 	.word	0x00038414
   205f4:	00038424 	.word	0x00038424
   205f8:	00038048 	.word	0x00038048
   205fc:	0003cbdc 	.word	0x0003cbdc
   20600:	0003a7d7 	.word	0x0003a7d7
   20604:	0003a7f1 	.word	0x0003a7f1

00020608 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   20608:	4b27      	ldr	r3, [pc, #156]	; (206a8 <msg_finalize+0xa0>)
{
   2060a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   2060c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   2060e:	8141      	strh	r1, [r0, #10]
{
   20610:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   20612:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20614:	4d25      	ldr	r5, [pc, #148]	; (206ac <msg_finalize+0xa4>)
   20616:	60e0      	str	r0, [r4, #12]
   20618:	e8d5 3fef 	ldaex	r3, [r5]
   2061c:	3301      	adds	r3, #1
   2061e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   20622:	2a00      	cmp	r2, #0
   20624:	d1f8      	bne.n	20618 <msg_finalize+0x10>
	__asm__ volatile(
   20626:	f04f 0320 	mov.w	r3, #32
   2062a:	f3ef 8611 	mrs	r6, BASEPRI
   2062e:	f383 8811 	msr	BASEPRI, r3
   20632:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   20636:	481e      	ldr	r0, [pc, #120]	; (206b0 <msg_finalize+0xa8>)
   20638:	4621      	mov	r1, r4
   2063a:	f013 ff46 	bl	344ca <log_list_add_tail>
	__asm__ volatile(
   2063e:	f386 8811 	msr	BASEPRI, r6
   20642:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   20646:	4b1b      	ldr	r3, [pc, #108]	; (206b4 <msg_finalize+0xac>)
   20648:	781b      	ldrb	r3, [r3, #0]
   2064a:	b183      	cbz	r3, 2066e <msg_finalize+0x66>
	__asm__ volatile(
   2064c:	f04f 0320 	mov.w	r3, #32
   20650:	f3ef 8411 	mrs	r4, BASEPRI
   20654:	f383 8811 	msr	BASEPRI, r3
   20658:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   2065c:	2000      	movs	r0, #0
   2065e:	f7ff ff1f 	bl	204a0 <z_impl_log_process>
	__asm__ volatile(
   20662:	f384 8811 	msr	BASEPRI, r4
   20666:	f3bf 8f6f 	isb	sy
}
   2066a:	b002      	add	sp, #8
   2066c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   2066e:	4a12      	ldr	r2, [pc, #72]	; (206b8 <msg_finalize+0xb0>)
   20670:	682b      	ldr	r3, [r5, #0]
   20672:	6812      	ldr	r2, [r2, #0]
   20674:	2a00      	cmp	r2, #0
   20676:	d0f8      	beq.n	2066a <msg_finalize+0x62>
   20678:	2b01      	cmp	r3, #1
   2067a:	d10a      	bne.n	20692 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   2067c:	2200      	movs	r2, #0
   2067e:	2300      	movs	r3, #0
   20680:	480e      	ldr	r0, [pc, #56]	; (206bc <msg_finalize+0xb4>)
   20682:	e9cd 2300 	strd	r2, r3, [sp]
   20686:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2068a:	2300      	movs	r3, #0
   2068c:	f012 f994 	bl	329b8 <z_impl_k_timer_start>
   20690:	e7eb      	b.n	2066a <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   20692:	2b0a      	cmp	r3, #10
   20694:	d1e9      	bne.n	2066a <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   20696:	4809      	ldr	r0, [pc, #36]	; (206bc <msg_finalize+0xb4>)
   20698:	f016 fcea 	bl	37070 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   2069c:	4808      	ldr	r0, [pc, #32]	; (206c0 <msg_finalize+0xb8>)
}
   2069e:	b002      	add	sp, #8
   206a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   206a4:	f011 be4e 	b.w	32344 <z_impl_k_sem_give>
   206a8:	200200e4 	.word	0x200200e4
   206ac:	200235bc 	.word	0x200235bc
   206b0:	200235c8 	.word	0x200235c8
   206b4:	2002bc57 	.word	0x2002bc57
   206b8:	200235ec 	.word	0x200235ec
   206bc:	20021530 	.word	0x20021530
   206c0:	200208ac 	.word	0x200208ac

000206c4 <log_process_thread_func>:
{
   206c4:	b510      	push	{r4, lr}
	log_init();
   206c6:	f7ff fe83 	bl	203d0 <log_init>
	return z_impl_k_current_get();
   206ca:	f011 fe35 	bl	32338 <z_impl_k_current_get>
	proc_tid = process_tid;
   206ce:	4b0c      	ldr	r3, [pc, #48]	; (20700 <log_process_thread_func+0x3c>)
   206d0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   206d2:	b130      	cbz	r0, 206e2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   206d4:	4b0b      	ldr	r3, [pc, #44]	; (20704 <log_process_thread_func+0x40>)
	    process_tid &&
   206d6:	681b      	ldr	r3, [r3, #0]
   206d8:	2b09      	cmp	r3, #9
   206da:	dd02      	ble.n	206e2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   206dc:	480a      	ldr	r0, [pc, #40]	; (20708 <log_process_thread_func+0x44>)
   206de:	f011 fe31 	bl	32344 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   206e2:	4c09      	ldr	r4, [pc, #36]	; (20708 <log_process_thread_func+0x44>)
   206e4:	2000      	movs	r0, #0
   206e6:	f7ff fedb 	bl	204a0 <z_impl_log_process>
		if (log_process(false) == false) {
   206ea:	2800      	cmp	r0, #0
   206ec:	d1fa      	bne.n	206e4 <log_process_thread_func+0x20>
   206ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   206f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   206f6:	4620      	mov	r0, r4
   206f8:	f011 fe4a 	bl	32390 <z_impl_k_sem_take>
   206fc:	e7f2      	b.n	206e4 <log_process_thread_func+0x20>
   206fe:	bf00      	nop
   20700:	200235ec 	.word	0x200235ec
   20704:	200235bc 	.word	0x200235bc
   20708:	200208ac 	.word	0x200208ac

0002070c <z_impl_log_panic>:
{
   2070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   2070e:	4f0e      	ldr	r7, [pc, #56]	; (20748 <z_impl_log_panic+0x3c>)
   20710:	783d      	ldrb	r5, [r7, #0]
   20712:	b975      	cbnz	r5, 20732 <z_impl_log_panic+0x26>
	log_init();
   20714:	f7ff fe5c 	bl	203d0 <log_init>
	return __log_backends_end - __log_backends_start;
   20718:	4c0c      	ldr	r4, [pc, #48]	; (2074c <z_impl_log_panic+0x40>)
   2071a:	4e0d      	ldr	r6, [pc, #52]	; (20750 <z_impl_log_panic+0x44>)
   2071c:	1b36      	subs	r6, r6, r4
   2071e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   20720:	42b5      	cmp	r5, r6
   20722:	db07      	blt.n	20734 <z_impl_log_panic+0x28>
   20724:	2000      	movs	r0, #0
   20726:	f7ff febb 	bl	204a0 <z_impl_log_process>
		while (log_process(false) == true) {
   2072a:	2800      	cmp	r0, #0
   2072c:	d1fa      	bne.n	20724 <z_impl_log_panic+0x18>
	panic_mode = true;
   2072e:	2301      	movs	r3, #1
   20730:	703b      	strb	r3, [r7, #0]
}
   20732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   20734:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   20736:	795b      	ldrb	r3, [r3, #5]
   20738:	b11b      	cbz	r3, 20742 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   2073a:	6823      	ldr	r3, [r4, #0]
   2073c:	4620      	mov	r0, r4
   2073e:	691b      	ldr	r3, [r3, #16]
   20740:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   20742:	3501      	adds	r5, #1
   20744:	3410      	adds	r4, #16
   20746:	e7eb      	b.n	20720 <z_impl_log_panic+0x14>
   20748:	2002bc57 	.word	0x2002bc57
   2074c:	00038414 	.word	0x00038414
   20750:	00038424 	.word	0x00038424

00020754 <log_free>:
{
   20754:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   20756:	3804      	subs	r0, #4
   20758:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2075a:	e8d0 3fef 	ldaex	r3, [r0]
   2075e:	1e5a      	subs	r2, r3, #1
   20760:	e8c0 2fe1 	stlex	r1, r2, [r0]
   20764:	2900      	cmp	r1, #0
   20766:	d1f8      	bne.n	2075a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   20768:	2b01      	cmp	r3, #1
   2076a:	d103      	bne.n	20774 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   2076c:	4803      	ldr	r0, [pc, #12]	; (2077c <log_free+0x28>)
   2076e:	a901      	add	r1, sp, #4
   20770:	f011 f86a 	bl	31848 <k_mem_slab_free>
}
   20774:	b003      	add	sp, #12
   20776:	f85d fb04 	ldr.w	pc, [sp], #4
   2077a:	bf00      	nop
   2077c:	200235d0 	.word	0x200235d0

00020780 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   20780:	2320      	movs	r3, #32
   20782:	4902      	ldr	r1, [pc, #8]	; (2078c <log_msg_pool_init+0xc>)
   20784:	461a      	mov	r2, r3
   20786:	4802      	ldr	r0, [pc, #8]	; (20790 <log_msg_pool_init+0x10>)
   20788:	f016 b9b2 	b.w	36af0 <k_mem_slab_init>
   2078c:	200332a8 	.word	0x200332a8
   20790:	200235f0 	.word	0x200235f0

00020794 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   20794:	2300      	movs	r3, #0
{
   20796:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   20798:	4d09      	ldr	r5, [pc, #36]	; (207c0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   2079a:	9301      	str	r3, [sp, #4]
   2079c:	2001      	movs	r0, #1
   2079e:	f7ff fe7f 	bl	204a0 <z_impl_log_process>
   207a2:	4604      	mov	r4, r0
			log_dropped();
   207a4:	f7ff fde0 	bl	20368 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   207a8:	2200      	movs	r2, #0
   207aa:	2300      	movs	r3, #0
   207ac:	4628      	mov	r0, r5
   207ae:	a901      	add	r1, sp, #4
   207b0:	f011 f818 	bl	317e4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   207b4:	b108      	cbz	r0, 207ba <log_msg_no_space_handle+0x26>
   207b6:	2c00      	cmp	r4, #0
   207b8:	d1f0      	bne.n	2079c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   207ba:	9801      	ldr	r0, [sp, #4]
   207bc:	b003      	add	sp, #12
   207be:	bd30      	pop	{r4, r5, pc}
   207c0:	200235f0 	.word	0x200235f0

000207c4 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   207c4:	2300      	movs	r3, #0
{
   207c6:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   207c8:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   207ca:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   207cc:	4806      	ldr	r0, [pc, #24]	; (207e8 <log_msg_chunk_alloc+0x24>)
   207ce:	2300      	movs	r3, #0
   207d0:	a901      	add	r1, sp, #4
   207d2:	f011 f807 	bl	317e4 <k_mem_slab_alloc>
	if (err != 0) {
   207d6:	b110      	cbz	r0, 207de <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   207d8:	f7ff ffdc 	bl	20794 <log_msg_no_space_handle>
   207dc:	9001      	str	r0, [sp, #4]
}
   207de:	9801      	ldr	r0, [sp, #4]
   207e0:	b003      	add	sp, #12
   207e2:	f85d fb04 	ldr.w	pc, [sp], #4
   207e6:	bf00      	nop
   207e8:	200235f0 	.word	0x200235f0

000207ec <msg_free>:
{
   207ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   207ee:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   207f0:	7a45      	ldrb	r5, [r0, #9]
{
   207f2:	b085      	sub	sp, #20
   207f4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   207f6:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   207f8:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   207fc:	d41c      	bmi.n	20838 <msg_free+0x4c>
   207fe:	b1dd      	cbz	r5, 20838 <msg_free+0x4c>
		uint32_t smask = 0;
   20800:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   20802:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   20804:	4631      	mov	r1, r6
   20806:	9801      	ldr	r0, [sp, #4]
   20808:	f013 ff61 	bl	346ce <log_msg_arg_get>
   2080c:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   2080e:	f7ff fe39 	bl	20484 <log_is_strdup>
   20812:	b170      	cbz	r0, 20832 <msg_free+0x46>
				if (smask == 0) {
   20814:	b934      	cbnz	r4, 20824 <msg_free+0x38>
					smask = z_log_get_s_mask(
   20816:	9b01      	ldr	r3, [sp, #4]
   20818:	4629      	mov	r1, r5
   2081a:	6918      	ldr	r0, [r3, #16]
   2081c:	f7ff fd3e 	bl	2029c <z_log_get_s_mask>
					if (smask == 0) {
   20820:	4604      	mov	r4, r0
   20822:	b148      	cbz	r0, 20838 <msg_free+0x4c>
				if (smask & BIT(i)) {
   20824:	fa24 f306 	lsr.w	r3, r4, r6
   20828:	07d9      	lsls	r1, r3, #31
   2082a:	d502      	bpl.n	20832 <msg_free+0x46>
					log_free(buf);
   2082c:	4638      	mov	r0, r7
   2082e:	f7ff ff91 	bl	20754 <log_free>
		for (i = 0; i < nargs; i++) {
   20832:	3601      	adds	r6, #1
   20834:	42ae      	cmp	r6, r5
   20836:	d3e5      	bcc.n	20804 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   20838:	9b01      	ldr	r3, [sp, #4]
   2083a:	7a1a      	ldrb	r2, [r3, #8]
   2083c:	0792      	lsls	r2, r2, #30
   2083e:	d504      	bpl.n	2084a <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   20840:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   20842:	4c08      	ldr	r4, [pc, #32]	; (20864 <msg_free+0x78>)
   20844:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   20846:	9b03      	ldr	r3, [sp, #12]
   20848:	b92b      	cbnz	r3, 20856 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   2084a:	4806      	ldr	r0, [pc, #24]	; (20864 <msg_free+0x78>)
   2084c:	a901      	add	r1, sp, #4
   2084e:	f010 fffb 	bl	31848 <k_mem_slab_free>
}
   20852:	b005      	add	sp, #20
   20854:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   20856:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   20858:	4620      	mov	r0, r4
   2085a:	a903      	add	r1, sp, #12
   2085c:	f010 fff4 	bl	31848 <k_mem_slab_free>
		cont = next;
   20860:	9503      	str	r5, [sp, #12]
   20862:	e7f0      	b.n	20846 <msg_free+0x5a>
   20864:	200235f0 	.word	0x200235f0

00020868 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   20868:	b40e      	push	{r1, r2, r3}
   2086a:	b503      	push	{r0, r1, lr}
   2086c:	ab03      	add	r3, sp, #12
   2086e:	f853 2b04 	ldr.w	r2, [r3], #4
   20872:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   20874:	4804      	ldr	r0, [pc, #16]	; (20888 <print_formatted+0x20>)
	va_start(args, fmt);
   20876:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   20878:	f7ff f812 	bl	1f8a0 <cbvprintf>
	va_end(args);

	return length;
}
   2087c:	b002      	add	sp, #8
   2087e:	f85d eb04 	ldr.w	lr, [sp], #4
   20882:	b003      	add	sp, #12
   20884:	4770      	bx	lr
   20886:	bf00      	nop
   20888:	00034b77 	.word	0x00034b77

0002088c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   2088c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   20890:	f011 0402 	ands.w	r4, r1, #2
{
   20894:	b085      	sub	sp, #20
   20896:	4606      	mov	r6, r0
   20898:	4690      	mov	r8, r2
   2089a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   2089e:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   208a2:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   208a6:	d007      	beq.n	208b8 <prefix_print+0x2c>
	if (!format) {
   208a8:	f011 0f44 	tst.w	r1, #68	; 0x44
   208ac:	d137      	bne.n	2091e <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   208ae:	461a      	mov	r2, r3
   208b0:	4932      	ldr	r1, [pc, #200]	; (2097c <prefix_print+0xf0>)
   208b2:	f7ff ffd9 	bl	20868 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   208b6:	4604      	mov	r4, r0
	if (color) {
   208b8:	f1b9 0f00 	cmp.w	r9, #0
   208bc:	d00a      	beq.n	208d4 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   208be:	4b30      	ldr	r3, [pc, #192]	; (20980 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   208c0:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   208c2:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   208c6:	4b2f      	ldr	r3, [pc, #188]	; (20984 <prefix_print+0xf8>)
   208c8:	492f      	ldr	r1, [pc, #188]	; (20988 <prefix_print+0xfc>)
   208ca:	2a00      	cmp	r2, #0
   208cc:	bf08      	it	eq
   208ce:	461a      	moveq	r2, r3
   208d0:	f7ff ffca 	bl	20868 <print_formatted>
	if (level_on) {
   208d4:	b13d      	cbz	r5, 208e6 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   208d6:	4b2d      	ldr	r3, [pc, #180]	; (2098c <prefix_print+0x100>)
   208d8:	4630      	mov	r0, r6
   208da:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   208de:	492c      	ldr	r1, [pc, #176]	; (20990 <prefix_print+0x104>)
   208e0:	f7ff ffc2 	bl	20868 <print_formatted>
   208e4:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   208e6:	f1b8 0f00 	cmp.w	r8, #0
   208ea:	d044      	beq.n	20976 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   208ec:	2301      	movs	r3, #1
   208ee:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   208f2:	4b28      	ldr	r3, [pc, #160]	; (20994 <prefix_print+0x108>)
   208f4:	f017 0f10 	tst.w	r7, #16
   208f8:	4f27      	ldr	r7, [pc, #156]	; (20998 <prefix_print+0x10c>)
   208fa:	bf18      	it	ne
   208fc:	461f      	movne	r7, r3
   208fe:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   20902:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   20906:	f7ff fd3b 	bl	20380 <log_source_name_get>
   2090a:	4639      	mov	r1, r7
   2090c:	4602      	mov	r2, r0
   2090e:	4630      	mov	r0, r6
   20910:	f7ff ffaa 	bl	20868 <print_formatted>
   20914:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   20916:	4420      	add	r0, r4
   20918:	b005      	add	sp, #20
   2091a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   2091e:	4a1f      	ldr	r2, [pc, #124]	; (2099c <prefix_print+0x110>)
   20920:	6811      	ldr	r1, [r2, #0]
   20922:	b331      	cbz	r1, 20972 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   20924:	4a1e      	ldr	r2, [pc, #120]	; (209a0 <prefix_print+0x114>)
   20926:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   2092a:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   2092c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   20930:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   20934:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   20938:	fbb4 f2fe 	udiv	r2, r4, lr
   2093c:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   20940:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   20944:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   20948:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   2094c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   20950:	fb01 441b 	mls	r4, r1, fp, r4
   20954:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   20958:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   2095c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   20960:	e9cd b101 	strd	fp, r1, [sp, #4]
   20964:	fb0a e113 	mls	r1, sl, r3, lr
   20968:	9100      	str	r1, [sp, #0]
   2096a:	490e      	ldr	r1, [pc, #56]	; (209a4 <prefix_print+0x118>)
   2096c:	f7ff ff7c 	bl	20868 <print_formatted>
   20970:	e7a1      	b.n	208b6 <prefix_print+0x2a>
		length = 0;
   20972:	4608      	mov	r0, r1
   20974:	e79f      	b.n	208b6 <prefix_print+0x2a>
	total += print_formatted(log_output,
   20976:	4f08      	ldr	r7, [pc, #32]	; (20998 <prefix_print+0x10c>)
   20978:	e7c1      	b.n	208fe <prefix_print+0x72>
   2097a:	bf00      	nop
   2097c:	0003a842 	.word	0x0003a842
   20980:	000386fc 	.word	0x000386fc
   20984:	0003a834 	.word	0x0003a834
   20988:	0003c048 	.word	0x0003c048
   2098c:	00038710 	.word	0x00038710
   20990:	0003a867 	.word	0x0003a867
   20994:	0003a83e 	.word	0x0003a83e
   20998:	0003a839 	.word	0x0003a839
   2099c:	2002360c 	.word	0x2002360c
   209a0:	20023610 	.word	0x20023610
   209a4:	0003a84b 	.word	0x0003a84b

000209a8 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   209a8:	b538      	push	{r3, r4, r5, lr}
   209aa:	460c      	mov	r4, r1
	if (color) {
   209ac:	07e1      	lsls	r1, r4, #31
{
   209ae:	4605      	mov	r5, r0
	if (color) {
   209b0:	d503      	bpl.n	209ba <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   209b2:	4a08      	ldr	r2, [pc, #32]	; (209d4 <postfix_print+0x2c>)
   209b4:	4908      	ldr	r1, [pc, #32]	; (209d8 <postfix_print+0x30>)
   209b6:	f7ff ff57 	bl	20868 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   209ba:	06e2      	lsls	r2, r4, #27
   209bc:	d408      	bmi.n	209d0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   209be:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   209c0:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   209c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   209c6:	bf4c      	ite	mi
   209c8:	4904      	ldrmi	r1, [pc, #16]	; (209dc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   209ca:	4905      	ldrpl	r1, [pc, #20]	; (209e0 <postfix_print+0x38>)
   209cc:	f7ff bf4c 	b.w	20868 <print_formatted>
}
   209d0:	bd38      	pop	{r3, r4, r5, pc}
   209d2:	bf00      	nop
   209d4:	0003a834 	.word	0x0003a834
   209d8:	0003c048 	.word	0x0003c048
   209dc:	0003c24f 	.word	0x0003c24f
   209e0:	0003c24e 	.word	0x0003c24e

000209e4 <hexdump_line_print>:
{
   209e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   209e8:	461d      	mov	r5, r3
   209ea:	9b08      	ldr	r3, [sp, #32]
   209ec:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   209ee:	06da      	lsls	r2, r3, #27
{
   209f0:	4604      	mov	r4, r0
   209f2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   209f4:	d405      	bmi.n	20a02 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   209f6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   209f8:	bf4c      	ite	mi
   209fa:	492b      	ldrmi	r1, [pc, #172]	; (20aa8 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   209fc:	492b      	ldrpl	r1, [pc, #172]	; (20aac <hexdump_line_print+0xc8>)
   209fe:	f7ff ff33 	bl	20868 <print_formatted>
{
   20a02:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   20a06:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 20ab4 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   20a0a:	45a8      	cmp	r8, r5
   20a0c:	db2d      	blt.n	20a6a <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20a0e:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   20a10:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 20ab8 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   20a14:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 20abc <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   20a18:	f8df a098 	ldr.w	sl, [pc, #152]	; 20ab4 <hexdump_line_print+0xd0>
		if (i < length) {
   20a1c:	42bd      	cmp	r5, r7
   20a1e:	d232      	bcs.n	20a86 <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   20a20:	4649      	mov	r1, r9
   20a22:	4620      	mov	r0, r4
   20a24:	5d72      	ldrb	r2, [r6, r5]
   20a26:	f7ff ff1f 	bl	20868 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20a2a:	3501      	adds	r5, #1
   20a2c:	2d10      	cmp	r5, #16
   20a2e:	d123      	bne.n	20a78 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   20a30:	4620      	mov	r0, r4
   20a32:	491f      	ldr	r1, [pc, #124]	; (20ab0 <hexdump_line_print+0xcc>)
   20a34:	f7ff ff18 	bl	20868 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20a38:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   20a3a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 20ab4 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   20a3e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 20ac0 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   20a42:	f8df a080 	ldr.w	sl, [pc, #128]	; 20ac4 <hexdump_line_print+0xe0>
		if (i < length) {
   20a46:	42af      	cmp	r7, r5
   20a48:	d929      	bls.n	20a9e <hexdump_line_print+0xba>
			char c = (char)data[i];
   20a4a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   20a4c:	4651      	mov	r1, sl
   20a4e:	f812 3009 	ldrb.w	r3, [r2, r9]
   20a52:	4620      	mov	r0, r4
   20a54:	f013 0f97 	tst.w	r3, #151	; 0x97
   20a58:	bf08      	it	eq
   20a5a:	222e      	moveq	r2, #46	; 0x2e
   20a5c:	f7ff ff04 	bl	20868 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20a60:	3501      	adds	r5, #1
   20a62:	2d10      	cmp	r5, #16
   20a64:	d114      	bne.n	20a90 <hexdump_line_print+0xac>
}
   20a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   20a6a:	4649      	mov	r1, r9
   20a6c:	4620      	mov	r0, r4
   20a6e:	f7ff fefb 	bl	20868 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   20a72:	f108 0801 	add.w	r8, r8, #1
   20a76:	e7c8      	b.n	20a0a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   20a78:	076a      	lsls	r2, r5, #29
   20a7a:	d1cf      	bne.n	20a1c <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   20a7c:	4651      	mov	r1, sl
   20a7e:	4620      	mov	r0, r4
   20a80:	f7ff fef2 	bl	20868 <print_formatted>
   20a84:	e7ca      	b.n	20a1c <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   20a86:	4641      	mov	r1, r8
   20a88:	4620      	mov	r0, r4
   20a8a:	f7ff feed 	bl	20868 <print_formatted>
   20a8e:	e7cc      	b.n	20a2a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   20a90:	076b      	lsls	r3, r5, #29
   20a92:	d1d8      	bne.n	20a46 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   20a94:	4641      	mov	r1, r8
   20a96:	4620      	mov	r0, r4
   20a98:	f7ff fee6 	bl	20868 <print_formatted>
   20a9c:	e7d3      	b.n	20a46 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   20a9e:	4641      	mov	r1, r8
   20aa0:	4620      	mov	r0, r4
   20aa2:	f7ff fee1 	bl	20868 <print_formatted>
   20aa6:	e7db      	b.n	20a60 <hexdump_line_print+0x7c>
   20aa8:	0003c24f 	.word	0x0003c24f
   20aac:	0003c24e 	.word	0x0003c24e
   20ab0:	0003a877 	.word	0x0003a877
   20ab4:	0003a875 	.word	0x0003a875
   20ab8:	0003a873 	.word	0x0003a873
   20abc:	0003a86d 	.word	0x0003a86d
   20ac0:	0003ca84 	.word	0x0003ca84
   20ac4:	0003a879 	.word	0x0003a879

00020ac8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   20ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   20acc:	7a8b      	ldrb	r3, [r1, #10]
   20ace:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   20ad0:	f013 0807 	ands.w	r8, r3, #7
{
   20ad4:	4605      	mov	r5, r0
   20ad6:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   20ad8:	7a0a      	ldrb	r2, [r1, #8]
   20ada:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   20adc:	d021      	beq.n	20b22 <log_output_msg_process+0x5a>
   20ade:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   20ae0:	8949      	ldrh	r1, [r1, #10]
   20ae2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   20ae6:	f3c1 1189 	ubfx	r1, r1, #6, #10
   20aea:	e9cd 8300 	strd	r8, r3, [sp]
   20aee:	9102      	str	r1, [sp, #8]
   20af0:	68f3      	ldr	r3, [r6, #12]
   20af2:	4639      	mov	r1, r7
   20af4:	f002 0201 	and.w	r2, r2, #1
   20af8:	f7ff fec8 	bl	2088c <prefix_print>
   20afc:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   20afe:	7a34      	ldrb	r4, [r6, #8]
   20b00:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   20b02:	f014 0401 	ands.w	r4, r4, #1
   20b06:	d00e      	beq.n	20b26 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
   20b08:	4629      	mov	r1, r5
   20b0a:	4630      	mov	r0, r6
   20b0c:	f013 fec9 	bl	348a2 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   20b10:	f1b8 0f00 	cmp.w	r8, #0
   20b14:	d02b      	beq.n	20b6e <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
   20b16:	4642      	mov	r2, r8
   20b18:	4639      	mov	r1, r7
   20b1a:	4628      	mov	r0, r5
   20b1c:	f7ff ff44 	bl	209a8 <postfix_print>
   20b20:	e025      	b.n	20b6e <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   20b22:	46c1      	mov	r9, r8
   20b24:	e7eb      	b.n	20afe <log_output_msg_process+0x36>
	} else if (raw_string) {
   20b26:	f1b8 0f00 	cmp.w	r8, #0
   20b2a:	d126      	bne.n	20b7a <log_output_msg_process+0xb2>
	size_t offset = 0;
   20b2c:	4627      	mov	r7, r4
		length = log_output->size;
   20b2e:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   20b30:	aa06      	add	r2, sp, #24
		length = log_output->size;
   20b32:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   20b34:	4630      	mov	r0, r6
   20b36:	463b      	mov	r3, r7
   20b38:	68a9      	ldr	r1, [r5, #8]
   20b3a:	f013 fe9e 	bl	3487a <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   20b3e:	9a06      	ldr	r2, [sp, #24]
   20b40:	686b      	ldr	r3, [r5, #4]
   20b42:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   20b44:	b13a      	cbz	r2, 20b56 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
   20b46:	68ab      	ldr	r3, [r5, #8]
   20b48:	4413      	add	r3, r2
   20b4a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   20b4e:	f1a4 030a 	sub.w	r3, r4, #10
   20b52:	425c      	negs	r4, r3
   20b54:	415c      	adcs	r4, r3
		log_output_flush(log_output);
   20b56:	4628      	mov	r0, r5
   20b58:	f014 f800 	bl	34b5c <log_output_flush>
		offset += length;
   20b5c:	9b06      	ldr	r3, [sp, #24]
   20b5e:	441f      	add	r7, r3
	} while (length > 0);
   20b60:	2b00      	cmp	r3, #0
   20b62:	d1e4      	bne.n	20b2e <log_output_msg_process+0x66>
	if (eol) {
   20b64:	b11c      	cbz	r4, 20b6e <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
   20b66:	4628      	mov	r0, r5
   20b68:	4913      	ldr	r1, [pc, #76]	; (20bb8 <log_output_msg_process+0xf0>)
   20b6a:	f7ff fe7d 	bl	20868 <print_formatted>
	}

	log_output_flush(log_output);
   20b6e:	4628      	mov	r0, r5
   20b70:	f013 fff4 	bl	34b5c <log_output_flush>
}
   20b74:	b00a      	add	sp, #40	; 0x28
   20b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   20b7a:	4630      	mov	r0, r6
   20b7c:	f013 fdd5 	bl	3472a <log_msg_str_get>
   20b80:	490e      	ldr	r1, [pc, #56]	; (20bbc <log_output_msg_process+0xf4>)
   20b82:	4602      	mov	r2, r0
   20b84:	4628      	mov	r0, r5
   20b86:	f7ff fe6f 	bl	20868 <print_formatted>
		length = sizeof(buf);
   20b8a:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   20b8e:	aa05      	add	r2, sp, #20
   20b90:	4623      	mov	r3, r4
   20b92:	4630      	mov	r0, r6
   20b94:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   20b96:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   20b9a:	f013 fe6e 	bl	3487a <log_msg_hexdump_data_get>
		if (length) {
   20b9e:	9a05      	ldr	r2, [sp, #20]
   20ba0:	2a00      	cmp	r2, #0
   20ba2:	d0b8      	beq.n	20b16 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
   20ba4:	464b      	mov	r3, r9
   20ba6:	4628      	mov	r0, r5
   20ba8:	9700      	str	r7, [sp, #0]
   20baa:	a906      	add	r1, sp, #24
   20bac:	f7ff ff1a 	bl	209e4 <hexdump_line_print>
			offset += length;
   20bb0:	9b05      	ldr	r3, [sp, #20]
   20bb2:	441c      	add	r4, r3
		length = sizeof(buf);
   20bb4:	e7eb      	b.n	20b8e <log_output_msg_process+0xc6>
   20bb6:	bf00      	nop
   20bb8:	0003a87c 	.word	0x0003a87c
   20bbc:	0003c048 	.word	0x0003c048

00020bc0 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   20bc0:	f242 730f 	movw	r3, #9999	; 0x270f
{
   20bc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   20bc6:	428b      	cmp	r3, r1
   20bc8:	bf28      	it	cs
   20bca:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   20bcc:	6805      	ldr	r5, [r0, #0]
{
   20bce:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   20bd0:	2105      	movs	r1, #5
   20bd2:	4668      	mov	r0, sp
   20bd4:	4a0d      	ldr	r2, [pc, #52]	; (20c0c <log_output_dropped_process+0x4c>)
   20bd6:	f013 f832 	bl	33c3e <snprintk>
   20bda:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   20bdc:	6863      	ldr	r3, [r4, #4]
   20bde:	4628      	mov	r0, r5
   20be0:	220b      	movs	r2, #11
   20be2:	685b      	ldr	r3, [r3, #4]
   20be4:	490a      	ldr	r1, [pc, #40]	; (20c10 <log_output_dropped_process+0x50>)
   20be6:	f013 fe4f 	bl	34888 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   20bea:	6863      	ldr	r3, [r4, #4]
   20bec:	4632      	mov	r2, r6
   20bee:	4669      	mov	r1, sp
   20bf0:	4628      	mov	r0, r5
   20bf2:	685b      	ldr	r3, [r3, #4]
   20bf4:	f013 fe48 	bl	34888 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   20bf8:	6863      	ldr	r3, [r4, #4]
   20bfa:	221b      	movs	r2, #27
   20bfc:	4628      	mov	r0, r5
   20bfe:	685b      	ldr	r3, [r3, #4]
   20c00:	4904      	ldr	r1, [pc, #16]	; (20c14 <log_output_dropped_process+0x54>)
   20c02:	f013 fe41 	bl	34888 <buffer_write>
		     log_output->control_block->ctx);
}
   20c06:	b002      	add	sp, #8
   20c08:	bd70      	pop	{r4, r5, r6, pc}
   20c0a:	bf00      	nop
   20c0c:	0003be98 	.word	0x0003be98
   20c10:	0003a8ba 	.word	0x0003a8ba
   20c14:	0003a89e 	.word	0x0003a89e

00020c18 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   20c18:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   20c1a:	2100      	movs	r1, #0
	timestamp_div = 1U;
   20c1c:	4a07      	ldr	r2, [pc, #28]	; (20c3c <log_output_timestamp_freq_set+0x24>)
{
   20c1e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   20c20:	4c07      	ldr	r4, [pc, #28]	; (20c40 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   20c22:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   20c24:	42a0      	cmp	r0, r4
   20c26:	d804      	bhi.n	20c32 <log_output_timestamp_freq_set+0x1a>
   20c28:	b101      	cbz	r1, 20c2c <log_output_timestamp_freq_set+0x14>
   20c2a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   20c2c:	4b05      	ldr	r3, [pc, #20]	; (20c44 <log_output_timestamp_freq_set+0x2c>)
   20c2e:	6018      	str	r0, [r3, #0]
}
   20c30:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   20c32:	2101      	movs	r1, #1
		frequency /= 2U;
   20c34:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   20c36:	005b      	lsls	r3, r3, #1
   20c38:	e7f4      	b.n	20c24 <log_output_timestamp_freq_set+0xc>
   20c3a:	bf00      	nop
   20c3c:	20023610 	.word	0x20023610
   20c40:	000f4240 	.word	0x000f4240
   20c44:	2002360c 	.word	0x2002360c

00020c48 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   20c48:	2201      	movs	r2, #1
   20c4a:	4b01      	ldr	r3, [pc, #4]	; (20c50 <log_backend_rtt_init+0x8>)
   20c4c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   20c4e:	4770      	bx	lr
   20c50:	2002bc68 	.word	0x2002bc68

00020c54 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   20c54:	2201      	movs	r2, #1
   20c56:	4b02      	ldr	r3, [pc, #8]	; (20c60 <panic+0xc>)
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   20c58:	4802      	ldr	r0, [pc, #8]	; (20c64 <panic+0x10>)
   20c5a:	701a      	strb	r2, [r3, #0]
   20c5c:	f013 bf7e 	b.w	34b5c <log_output_flush>
   20c60:	2002bc69 	.word	0x2002bc69
   20c64:	0003873c 	.word	0x0003873c

00020c68 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   20c68:	4801      	ldr	r0, [pc, #4]	; (20c70 <dropped+0x8>)
   20c6a:	f7ff bfa9 	b.w	20bc0 <log_output_dropped_process>
   20c6e:	bf00      	nop
   20c70:	0003873c 	.word	0x0003873c

00020c74 <put>:
{
   20c74:	b510      	push	{r4, lr}
   20c76:	460c      	mov	r4, r1
	log_msg_get(msg);
   20c78:	4608      	mov	r0, r1
   20c7a:	f013 fd1c 	bl	346b6 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   20c7e:	4621      	mov	r1, r4
   20c80:	4804      	ldr	r0, [pc, #16]	; (20c94 <put+0x20>)
   20c82:	220f      	movs	r2, #15
   20c84:	f7ff ff20 	bl	20ac8 <log_output_msg_process>
	log_msg_put(msg);
   20c88:	4620      	mov	r0, r4
}
   20c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20c8e:	f013 bd3d 	b.w	3470c <log_msg_put>
   20c92:	bf00      	nop
   20c94:	0003873c 	.word	0x0003873c

00020c98 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   20c98:	4b05      	ldr	r3, [pc, #20]	; (20cb0 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   20c9a:	781b      	ldrb	r3, [r3, #0]
   20c9c:	b11b      	cbz	r3, 20ca6 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   20c9e:	f241 3088 	movw	r0, #5000	; 0x1388
   20ca2:	f016 b8ea 	b.w	36e7a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   20ca6:	20a4      	movs	r0, #164	; 0xa4
   20ca8:	2100      	movs	r1, #0
   20caa:	f011 bb25 	b.w	322f8 <z_impl_k_sleep>
   20cae:	bf00      	nop
   20cb0:	2002bc69 	.word	0x2002bc69

00020cb4 <data_out_block_mode>:
{
   20cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   20cb8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 20d4c <data_out_block_mode+0x98>
{
   20cbc:	4607      	mov	r7, r0
   20cbe:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   20cc0:	2404      	movs	r4, #4
   20cc2:	46ca      	mov	sl, r9
	return z_impl_k_mutex_lock(mutex, timeout);
   20cc4:	f8df b088 	ldr.w	fp, [pc, #136]	; 20d50 <data_out_block_mode+0x9c>
		if (!is_sync_mode()) {
   20cc8:	f899 3000 	ldrb.w	r3, [r9]
   20ccc:	b933      	cbnz	r3, 20cdc <data_out_block_mode+0x28>
   20cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20cd6:	4658      	mov	r0, fp
   20cd8:	f010 fe92 	bl	31a00 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   20cdc:	4632      	mov	r2, r6
   20cde:	4639      	mov	r1, r7
   20ce0:	2000      	movs	r0, #0
   20ce2:	f000 fe6d 	bl	219c0 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
   20ce6:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   20cea:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
   20cec:	b913      	cbnz	r3, 20cf4 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
   20cee:	4658      	mov	r0, fp
   20cf0:	f010 fefe 	bl	31af0 <z_impl_k_mutex_unlock>
		if (ret) {
   20cf4:	4d14      	ldr	r5, [pc, #80]	; (20d48 <data_out_block_mode+0x94>)
   20cf6:	f1b8 0f00 	cmp.w	r8, #0
   20cfa:	d018      	beq.n	20d2e <data_out_block_mode+0x7a>
	host_present = true;
   20cfc:	2301      	movs	r3, #1
   20cfe:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   20d00:	f89a 3000 	ldrb.w	r3, [sl]
   20d04:	b933      	cbnz	r3, 20d14 <data_out_block_mode+0x60>
}
   20d06:	4630      	mov	r0, r6
   20d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
   20d0c:	b95c      	cbnz	r4, 20d26 <data_out_block_mode+0x72>
		host_present = false;
   20d0e:	702c      	strb	r4, [r5, #0]
   20d10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   20d14:	2000      	movs	r0, #0
   20d16:	f000 fed3 	bl	21ac0 <SEGGER_RTT_HasDataUp>
   20d1a:	2800      	cmp	r0, #0
   20d1c:	d0f3      	beq.n	20d06 <data_out_block_mode+0x52>
   20d1e:	782b      	ldrb	r3, [r5, #0]
   20d20:	2b00      	cmp	r3, #0
   20d22:	d1f3      	bne.n	20d0c <data_out_block_mode+0x58>
   20d24:	e7ef      	b.n	20d06 <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
   20d26:	3c01      	subs	r4, #1
   20d28:	f7ff ffb6 	bl	20c98 <on_failed_write.part.0>
   20d2c:	e7f2      	b.n	20d14 <data_out_block_mode+0x60>
		} else if (host_present) {
   20d2e:	782b      	ldrb	r3, [r5, #0]
   20d30:	b113      	cbz	r3, 20d38 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
   20d32:	3c01      	subs	r4, #1
   20d34:	d104      	bne.n	20d40 <data_out_block_mode+0x8c>
		host_present = false;
   20d36:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   20d38:	782b      	ldrb	r3, [r5, #0]
   20d3a:	2b00      	cmp	r3, #0
   20d3c:	d1c4      	bne.n	20cc8 <data_out_block_mode+0x14>
   20d3e:	e7e2      	b.n	20d06 <data_out_block_mode+0x52>
   20d40:	f7ff ffaa 	bl	20c98 <on_failed_write.part.0>
   20d44:	e7f8      	b.n	20d38 <data_out_block_mode+0x84>
   20d46:	bf00      	nop
   20d48:	2002bc68 	.word	0x2002bc68
   20d4c:	2002bc69 	.word	0x2002bc69
   20d50:	200207ec 	.word	0x200207ec

00020d54 <boot_request_upgrade>:
#endif
	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   20d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20d56:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   20d58:	a901      	add	r1, sp, #4
   20d5a:	2006      	movs	r0, #6
   20d5c:	f000 f97c 	bl	21058 <flash_area_open>
	if (rc) {
   20d60:	4604      	mov	r4, r0
   20d62:	bb10      	cbnz	r0, 20daa <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   20d64:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   20d66:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   20d68:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   20d6a:	4a12      	ldr	r2, [pc, #72]	; (20db4 <boot_request_upgrade+0x60>)
   20d6c:	3910      	subs	r1, #16
   20d6e:	f014 f8d5 	bl	34f1c <flash_area_write>
   20d72:	4604      	mov	r4, r0
	flash_area_close(fa);
   20d74:	9801      	ldr	r0, [sp, #4]
   20d76:	f014 f8b3 	bl	34ee0 <flash_area_close>
	uint8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   20d7a:	b9b4      	cbnz	r4, 20daa <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   20d7c:	b1c5      	cbz	r5, 20db0 <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   20d7e:	2006      	movs	r0, #6
   20d80:	f013 ff42 	bl	34c08 <boot_flag_write.constprop.0>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   20d84:	4604      	mov	r4, r0
   20d86:	b980      	cbnz	r0, 20daa <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   20d88:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   20d8a:	2006      	movs	r0, #6
   20d8c:	a901      	add	r1, sp, #4
   20d8e:	f000 f963 	bl	21058 <flash_area_open>
	if (rc) {
   20d92:	4604      	mov	r4, r0
   20d94:	b948      	cbnz	r0, 20daa <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   20d96:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   20d98:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   20d9a:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   20d9c:	3928      	subs	r1, #40	; 0x28
   20d9e:	f013 ff01 	bl	34ba4 <boot_write_trailer_byte>
   20da2:	4604      	mov	r4, r0
	flash_area_close(fa);
   20da4:	9801      	ldr	r0, [sp, #4]
   20da6:	f014 f89b 	bl	34ee0 <flash_area_close>
	return rc;
#else
	return 0;
#endif /* FLASH_AREA_IMAGE_SECONDARY */

}
   20daa:	4620      	mov	r0, r4
   20dac:	b003      	add	sp, #12
   20dae:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   20db0:	2502      	movs	r5, #2
   20db2:	e7ea      	b.n	20d8a <boot_request_upgrade+0x36>
   20db4:	0003874c 	.word	0x0003874c

00020db8 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   20db8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20dba:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   20dbc:	4c0f      	ldr	r4, [pc, #60]	; (20dfc <z_impl_zsock_socket+0x44>)
   20dbe:	4e10      	ldr	r6, [pc, #64]	; (20e00 <z_impl_zsock_socket+0x48>)
   20dc0:	42b4      	cmp	r4, r6
   20dc2:	d307      	bcc.n	20dd4 <z_impl_zsock_socket+0x1c>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   20dc4:	f014 faa7 	bl	35316 <__errno>
   20dc8:	236a      	movs	r3, #106	; 0x6a
   20dca:	6003      	str	r3, [r0, #0]
	return -1;
}
   20dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20dd0:	b002      	add	sp, #8
   20dd2:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
   20dd4:	6823      	ldr	r3, [r4, #0]
   20dd6:	42ab      	cmp	r3, r5
   20dd8:	d000      	beq.n	20ddc <z_impl_zsock_socket+0x24>
   20dda:	b96b      	cbnz	r3, 20df8 <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
   20ddc:	4628      	mov	r0, r5
   20dde:	6863      	ldr	r3, [r4, #4]
   20de0:	e9cd 1200 	strd	r1, r2, [sp]
   20de4:	4798      	blx	r3
   20de6:	e9dd 1200 	ldrd	r1, r2, [sp]
   20dea:	b128      	cbz	r0, 20df8 <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
   20dec:	4628      	mov	r0, r5
   20dee:	68a3      	ldr	r3, [r4, #8]
}
   20df0:	b002      	add	sp, #8
   20df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
   20df6:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   20df8:	340c      	adds	r4, #12
   20dfa:	e7e1      	b.n	20dc0 <z_impl_zsock_socket+0x8>
   20dfc:	00038310 	.word	0x00038310
   20e00:	0003831c 	.word	0x0003831c

00020e04 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   20e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   20e08:	1e14      	subs	r4, r2, #0
{
   20e0a:	b09b      	sub	sp, #108	; 0x6c
   20e0c:	4606      	mov	r6, r0
   20e0e:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
   20e10:	db30      	blt.n	20e74 <z_impl_zsock_poll+0x70>
   20e12:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   20e16:	f240 30e7 	movw	r0, #999	; 0x3e7
   20e1a:	2100      	movs	r1, #0
   20e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20e20:	2300      	movs	r3, #0
   20e22:	fbc5 0104 	smlal	r0, r1, r5, r4
   20e26:	f7f7 fcc7 	bl	187b8 <__aeabi_uldivmod>
   20e2a:	4682      	mov	sl, r0
   20e2c:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   20e2e:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   20e30:	4650      	mov	r0, sl
   20e32:	4659      	mov	r1, fp
   20e34:	f016 f8e7 	bl	37006 <z_timeout_end_calc>

	pev = poll_events;
   20e38:	ab0b      	add	r3, sp, #44	; 0x2c
   20e3a:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
   20e3c:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
   20e3e:	4633      	mov	r3, r6
	bool offload = false;
   20e40:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
   20e42:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
   20e46:	f8dd 900c 	ldr.w	r9, [sp, #12]
   20e4a:	f1b9 0f00 	cmp.w	r9, #0
   20e4e:	d118      	bne.n	20e82 <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   20e50:	f1b8 0f00 	cmp.w	r8, #0
   20e54:	d049      	beq.n	20eea <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   20e56:	9b03      	ldr	r3, [sp, #12]
   20e58:	9401      	str	r4, [sp, #4]
   20e5a:	9300      	str	r3, [sp, #0]
   20e5c:	f44f 7282 	mov.w	r2, #260	; 0x104
   20e60:	4633      	mov	r3, r6
   20e62:	4629      	mov	r1, r5
   20e64:	4638      	mov	r0, r7
   20e66:	f013 ff43 	bl	34cf0 <z_fdtable_call_ioctl>
   20e6a:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   20e6c:	4620      	mov	r0, r4
   20e6e:	b01b      	add	sp, #108	; 0x6c
   20e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   20e74:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   20e78:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
		poll_timeout = SYS_FOREVER_MS;
   20e7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20e80:	e7d5      	b.n	20e2e <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   20e82:	6818      	ldr	r0, [r3, #0]
   20e84:	2800      	cmp	r0, #0
   20e86:	db2c      	blt.n	20ee2 <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
   20e88:	a90a      	add	r1, sp, #40	; 0x28
   20e8a:	9306      	str	r3, [sp, #24]
   20e8c:	f7fe f9c6 	bl	1f21c <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   20e90:	9b06      	ldr	r3, [sp, #24]
   20e92:	4601      	mov	r1, r0
   20e94:	b328      	cbz	r0, 20ee2 <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
   20e96:	aa1a      	add	r2, sp, #104	; 0x68
   20e98:	9201      	str	r2, [sp, #4]
   20e9a:	aa09      	add	r2, sp, #36	; 0x24
   20e9c:	9200      	str	r2, [sp, #0]
   20e9e:	9006      	str	r0, [sp, #24]
   20ea0:	f44f 7281 	mov.w	r2, #258	; 0x102
   20ea4:	980a      	ldr	r0, [sp, #40]	; 0x28
   20ea6:	9307      	str	r3, [sp, #28]
   20ea8:	f013 ff22 	bl	34cf0 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   20eac:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   20eb0:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   20eb2:	9b07      	ldr	r3, [sp, #28]
   20eb4:	d011      	beq.n	20eda <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
   20eb6:	f110 0f12 	cmn.w	r0, #18
   20eba:	9906      	ldr	r1, [sp, #24]
   20ebc:	d105      	bne.n	20eca <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   20ebe:	b90f      	cbnz	r7, 20ec4 <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
   20ec0:	460d      	mov	r5, r1
   20ec2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
   20ec4:	f04f 0801 	mov.w	r8, #1
   20ec8:	e00b      	b.n	20ee2 <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
   20eca:	b150      	cbz	r0, 20ee2 <z_impl_zsock_poll+0xde>
   20ecc:	9203      	str	r2, [sp, #12]
				errno = -result;
   20ece:	f014 fa22 	bl	35316 <__errno>
   20ed2:	9a03      	ldr	r2, [sp, #12]
   20ed4:	4252      	negs	r2, r2
   20ed6:	6002      	str	r2, [r0, #0]
				return -1;
   20ed8:	e03e      	b.n	20f58 <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
   20eda:	f04f 0a00 	mov.w	sl, #0
   20ede:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   20ee2:	3308      	adds	r3, #8
   20ee4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   20ee8:	e7af      	b.n	20e4a <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   20eea:	ea5a 030b 	orrs.w	r3, sl, fp
   20eee:	d016      	beq.n	20f1e <z_impl_zsock_poll+0x11a>
   20ef0:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   20ef4:	bf08      	it	eq
   20ef6:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   20efa:	d010      	beq.n	20f1e <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
   20efc:	f011 fd1c 	bl	32938 <z_tick_get>
   20f00:	9b04      	ldr	r3, [sp, #16]
   20f02:	ebb3 0a00 	subs.w	sl, r3, r0
   20f06:	9b05      	ldr	r3, [sp, #20]
   20f08:	eb63 0b01 	sbc.w	fp, r3, r1
   20f0c:	f1ba 0f00 	cmp.w	sl, #0
   20f10:	f17b 0300 	sbcs.w	r3, fp, #0
   20f14:	bfbc      	itt	lt
   20f16:	f04f 0a00 	movlt.w	sl, #0
   20f1a:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   20f1e:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   20f22:	9909      	ldr	r1, [sp, #36]	; 0x24
   20f24:	ac0b      	add	r4, sp, #44	; 0x2c
   20f26:	4b34      	ldr	r3, [pc, #208]	; (20ff8 <z_impl_zsock_poll+0x1f4>)
   20f28:	1b09      	subs	r1, r1, r4
   20f2a:	1089      	asrs	r1, r1, #2
   20f2c:	4359      	muls	r1, r3
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   20f2e:	465b      	mov	r3, fp
   20f30:	4652      	mov	r2, sl
   20f32:	4620      	mov	r0, r4
   20f34:	f011 fd9c 	bl	32a70 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   20f38:	f100 030b 	add.w	r3, r0, #11
   20f3c:	2b0b      	cmp	r3, #11
   20f3e:	4607      	mov	r7, r0
   20f40:	d806      	bhi.n	20f50 <z_impl_zsock_poll+0x14c>
   20f42:	f640 0581 	movw	r5, #2177	; 0x881
   20f46:	40dd      	lsrs	r5, r3
   20f48:	43ed      	mvns	r5, r5
   20f4a:	f015 0501 	ands.w	r5, r5, #1
   20f4e:	d006      	beq.n	20f5e <z_impl_zsock_poll+0x15a>
			errno = -ret;
   20f50:	f014 f9e1 	bl	35316 <__errno>
   20f54:	427f      	negs	r7, r7
   20f56:	6007      	str	r7, [r0, #0]
			return -1;
   20f58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20f5c:	e786      	b.n	20e6c <z_impl_zsock_poll+0x68>
		pev = poll_events;
   20f5e:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   20f60:	46b0      	mov	r8, r6
		ret = 0;
   20f62:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   20f64:	9f03      	ldr	r7, [sp, #12]
   20f66:	b9ef      	cbnz	r7, 20fa4 <z_impl_zsock_poll+0x1a0>
		if (retry) {
   20f68:	2d00      	cmp	r5, #0
   20f6a:	f43f af7f 	beq.w	20e6c <z_impl_zsock_poll+0x68>
			if (ret > 0) {
   20f6e:	2c00      	cmp	r4, #0
   20f70:	f73f af7c 	bgt.w	20e6c <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20f74:	ea5a 030b 	orrs.w	r3, sl, fp
   20f78:	f43f af78 	beq.w	20e6c <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20f7c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   20f80:	bf08      	it	eq
   20f82:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   20f86:	d0cc      	beq.n	20f22 <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
   20f88:	f011 fcd6 	bl	32938 <z_tick_get>
   20f8c:	9b04      	ldr	r3, [sp, #16]
   20f8e:	ebb3 0a00 	subs.w	sl, r3, r0
   20f92:	9b05      	ldr	r3, [sp, #20]
   20f94:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   20f98:	f1ba 0f01 	cmp.w	sl, #1
   20f9c:	f17b 0300 	sbcs.w	r3, fp, #0
   20fa0:	dabf      	bge.n	20f22 <z_impl_zsock_poll+0x11e>
   20fa2:	e763      	b.n	20e6c <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
   20fa4:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
   20fa8:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
   20fac:	2800      	cmp	r0, #0
   20fae:	db1c      	blt.n	20fea <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
   20fb0:	a90a      	add	r1, sp, #40	; 0x28
   20fb2:	f7fe f933 	bl	1f21c <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   20fb6:	4601      	mov	r1, r0
   20fb8:	b920      	cbnz	r0, 20fc4 <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
   20fba:	2220      	movs	r2, #32
   20fbc:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
   20fc0:	3401      	adds	r4, #1
   20fc2:	e012      	b.n	20fea <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
   20fc4:	ab09      	add	r3, sp, #36	; 0x24
   20fc6:	f240 1203 	movw	r2, #259	; 0x103
   20fca:	9300      	str	r3, [sp, #0]
   20fcc:	980a      	ldr	r0, [sp, #40]	; 0x28
   20fce:	4643      	mov	r3, r8
   20fd0:	f013 fe8e 	bl	34cf0 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   20fd4:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   20fd8:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   20fda:	d00a      	beq.n	20ff2 <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
   20fdc:	2800      	cmp	r0, #0
   20fde:	f47f af75 	bne.w	20ecc <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
   20fe2:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   20fe6:	2a00      	cmp	r2, #0
   20fe8:	d1ea      	bne.n	20fc0 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   20fea:	f108 0808 	add.w	r8, r8, #8
   20fee:	3f01      	subs	r7, #1
   20ff0:	e7b9      	b.n	20f66 <z_impl_zsock_poll+0x162>
				retry = true;
   20ff2:	2501      	movs	r5, #1
   20ff4:	e7f9      	b.n	20fea <z_impl_zsock_poll+0x1e6>
   20ff6:	bf00      	nop
   20ff8:	cccccccd 	.word	0xcccccccd

00020ffc <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   20ffc:	4b01      	ldr	r3, [pc, #4]	; (21004 <socket_offload_dns_register+0x8>)
   20ffe:	6018      	str	r0, [r3, #0]
}
   21000:	4770      	bx	lr
   21002:	bf00      	nop
   21004:	20023628 	.word	0x20023628

00021008 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   21008:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   2100a:	4c03      	ldr	r4, [pc, #12]	; (21018 <socket_offload_getaddrinfo+0x10>)
   2100c:	6824      	ldr	r4, [r4, #0]
   2100e:	6824      	ldr	r4, [r4, #0]
   21010:	46a4      	mov	ip, r4
}
   21012:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
   21016:	4760      	bx	ip
   21018:	20023628 	.word	0x20023628

0002101c <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   2101c:	4b01      	ldr	r3, [pc, #4]	; (21024 <socket_offload_freeaddrinfo+0x8>)
   2101e:	681b      	ldr	r3, [r3, #0]
   21020:	685b      	ldr	r3, [r3, #4]
   21022:	4718      	bx	r3
   21024:	20023628 	.word	0x20023628

00021028 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   21028:	4b09      	ldr	r3, [pc, #36]	; (21050 <get_flash_area_from_id+0x28>)
{
   2102a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   2102c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   2102e:	4b09      	ldr	r3, [pc, #36]	; (21054 <get_flash_area_from_id+0x2c>)
   21030:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   21032:	2300      	movs	r3, #0
   21034:	429d      	cmp	r5, r3
   21036:	dc02      	bgt.n	2103e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   21038:	2100      	movs	r1, #0
}
   2103a:	4608      	mov	r0, r1
   2103c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   2103e:	011a      	lsls	r2, r3, #4
   21040:	5ca2      	ldrb	r2, [r4, r2]
   21042:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   21046:	4282      	cmp	r2, r0
   21048:	d0f7      	beq.n	2103a <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   2104a:	3301      	adds	r3, #1
   2104c:	e7f2      	b.n	21034 <get_flash_area_from_id+0xc>
   2104e:	bf00      	nop
   21050:	000387fc 	.word	0x000387fc
   21054:	200200e8 	.word	0x200200e8

00021058 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   21058:	4b08      	ldr	r3, [pc, #32]	; (2107c <flash_area_open+0x24>)
{
   2105a:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   2105c:	681b      	ldr	r3, [r3, #0]
{
   2105e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   21060:	b12b      	cbz	r3, 2106e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   21062:	f7ff ffe1 	bl	21028 <get_flash_area_from_id>
	if (area == NULL) {
   21066:	b128      	cbz	r0, 21074 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   21068:	6020      	str	r0, [r4, #0]
	return 0;
   2106a:	2000      	movs	r0, #0
}
   2106c:	bd10      	pop	{r4, pc}
		return -EACCES;
   2106e:	f06f 000c 	mvn.w	r0, #12
   21072:	e7fb      	b.n	2106c <flash_area_open+0x14>
		return -ENOENT;
   21074:	f06f 0001 	mvn.w	r0, #1
   21078:	e7f8      	b.n	2106c <flash_area_open+0x14>
   2107a:	bf00      	nop
   2107c:	200200e8 	.word	0x200200e8

00021080 <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   21080:	6842      	ldr	r2, [r0, #4]
   21082:	680b      	ldr	r3, [r1, #0]
{
   21084:	b510      	push	{r4, lr}
	if (ctx->buf_len > info->size) {
   21086:	4293      	cmp	r3, r2
{
   21088:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   2108a:	d90c      	bls.n	210a6 <find_flash_total_size+0x26>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   2108c:	4908      	ldr	r1, [pc, #32]	; (210b0 <find_flash_total_size+0x30>)
   2108e:	4b09      	ldr	r3, [pc, #36]	; (210b4 <find_flash_total_size+0x34>)
		LOG_ERR("Buffer size is bigger than page");
   21090:	4809      	ldr	r0, [pc, #36]	; (210b8 <find_flash_total_size+0x38>)
   21092:	1a5b      	subs	r3, r3, r1
   21094:	08db      	lsrs	r3, r3, #3
   21096:	019b      	lsls	r3, r3, #6
   21098:	f043 0101 	orr.w	r1, r3, #1
   2109c:	f013 fa34 	bl	34508 <log_0>
		ctx->total_size = 0;
   210a0:	2000      	movs	r0, #0
   210a2:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   210a4:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   210a6:	684b      	ldr	r3, [r1, #4]
	return true;
   210a8:	2001      	movs	r0, #1
	ctx->total_size += info->size;
   210aa:	4413      	add	r3, r2
   210ac:	604b      	str	r3, [r1, #4]
	return true;
   210ae:	e7f9      	b.n	210a4 <find_flash_total_size+0x24>
   210b0:	0003831c 	.word	0x0003831c
   210b4:	0003831c 	.word	0x0003831c
   210b8:	0003a8e9 	.word	0x0003a8e9

000210bc <stream_flash_erase_page>:
{
   210bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   210be:	4606      	mov	r6, r0
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   210c0:	68c0      	ldr	r0, [r0, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   210c2:	aa01      	add	r2, sp, #4
   210c4:	f014 fccd 	bl	35a62 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   210c8:	4604      	mov	r4, r0
   210ca:	b168      	cbz	r0, 210e8 <stream_flash_erase_page+0x2c>
   210cc:	4a19      	ldr	r2, [pc, #100]	; (21134 <stream_flash_erase_page+0x78>)
   210ce:	4b1a      	ldr	r3, [pc, #104]	; (21138 <stream_flash_erase_page+0x7c>)
		LOG_ERR("Error %d while getting page info", rc);
   210d0:	4601      	mov	r1, r0
   210d2:	1ad2      	subs	r2, r2, r3
   210d4:	08d2      	lsrs	r2, r2, #3
   210d6:	0192      	lsls	r2, r2, #6
   210d8:	4818      	ldr	r0, [pc, #96]	; (2113c <stream_flash_erase_page+0x80>)
   210da:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Error %d while erasing page", rc);
   210de:	f013 fa22 	bl	34526 <log_1>
}
   210e2:	4620      	mov	r0, r4
   210e4:	b004      	add	sp, #16
   210e6:	bd70      	pop	{r4, r5, r6, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   210e8:	9901      	ldr	r1, [sp, #4]
   210ea:	6a33      	ldr	r3, [r6, #32]
   210ec:	428b      	cmp	r3, r1
   210ee:	d0f8      	beq.n	210e2 <stream_flash_erase_page+0x26>
   210f0:	4b11      	ldr	r3, [pc, #68]	; (21138 <stream_flash_erase_page+0x7c>)
   210f2:	4d10      	ldr	r5, [pc, #64]	; (21134 <stream_flash_erase_page+0x78>)
	ctx->last_erased_page_start_offset = page.start_offset;
   210f4:	6231      	str	r1, [r6, #32]
   210f6:	1aed      	subs	r5, r5, r3
   210f8:	08ed      	lsrs	r5, r5, #3
	LOG_INF("Erasing page at offset 0x%08lx", (long)page.start_offset);
   210fa:	01ad      	lsls	r5, r5, #6
   210fc:	f045 0203 	orr.w	r2, r5, #3
   21100:	480f      	ldr	r0, [pc, #60]	; (21140 <stream_flash_erase_page+0x84>)
   21102:	f013 fa10 	bl	34526 <log_1>
	flash_write_protection_set(ctx->fdev, false);
   21106:	4621      	mov	r1, r4
   21108:	68f0      	ldr	r0, [r6, #12]
   2110a:	f013 ff45 	bl	34f98 <flash_write_protection_set>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   2110e:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
   21112:	68f0      	ldr	r0, [r6, #12]
				     size_t size)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->erase(dev, offset, size);
   21114:	6883      	ldr	r3, [r0, #8]
   21116:	689b      	ldr	r3, [r3, #8]
   21118:	4798      	blx	r3
   2111a:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   2111c:	2101      	movs	r1, #1
   2111e:	68f0      	ldr	r0, [r6, #12]
   21120:	f013 ff3a 	bl	34f98 <flash_write_protection_set>
	if (rc != 0) {
   21124:	2c00      	cmp	r4, #0
   21126:	d0dc      	beq.n	210e2 <stream_flash_erase_page+0x26>
		LOG_ERR("Error %d while erasing page", rc);
   21128:	4621      	mov	r1, r4
   2112a:	4806      	ldr	r0, [pc, #24]	; (21144 <stream_flash_erase_page+0x88>)
   2112c:	f045 0201 	orr.w	r2, r5, #1
   21130:	e7d5      	b.n	210de <stream_flash_erase_page+0x22>
   21132:	bf00      	nop
   21134:	0003831c 	.word	0x0003831c
   21138:	0003831c 	.word	0x0003831c
   2113c:	0003a909 	.word	0x0003a909
   21140:	0003a92a 	.word	0x0003a92a
   21144:	0003a949 	.word	0x0003a949

00021148 <flash_sync>:
{
   21148:	b570      	push	{r4, r5, r6, lr}
		if (ctx->buf_bytes == 0) {
   2114a:	6884      	ldr	r4, [r0, #8]
{
   2114c:	4605      	mov	r5, r0
		if (ctx->buf_bytes == 0) {
   2114e:	b1a4      	cbz	r4, 2117a <flash_sync+0x32>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   21150:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
   21154:	3c01      	subs	r4, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   21156:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   21158:	19a1      	adds	r1, r4, r6
   2115a:	f7ff ffaf 	bl	210bc <stream_flash_erase_page>
		if (rc < 0) {
   2115e:	1e04      	subs	r4, r0, #0
   21160:	da0d      	bge.n	2117e <flash_sync+0x36>
   21162:	4a31      	ldr	r2, [pc, #196]	; (21228 <flash_sync+0xe0>)
   21164:	4b31      	ldr	r3, [pc, #196]	; (2122c <flash_sync+0xe4>)
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   21166:	4621      	mov	r1, r4
   21168:	1a9b      	subs	r3, r3, r2
   2116a:	4632      	mov	r2, r6
   2116c:	08db      	lsrs	r3, r3, #3
   2116e:	019b      	lsls	r3, r3, #6
   21170:	482f      	ldr	r0, [pc, #188]	; (21230 <flash_sync+0xe8>)
   21172:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   21176:	f013 f9ed 	bl	34554 <log_2>
}
   2117a:	4620      	mov	r0, r4
   2117c:	bd70      	pop	{r4, r5, r6, pc}
	flash_write_protection_set(ctx->fdev, false);
   2117e:	2100      	movs	r1, #0
   21180:	68e8      	ldr	r0, [r5, #12]
   21182:	f013 ff09 	bl	34f98 <flash_write_protection_set>
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, ctx->buf_bytes);
   21186:	68e8      	ldr	r0, [r5, #12]
   21188:	682a      	ldr	r2, [r5, #0]
   2118a:	68ab      	ldr	r3, [r5, #8]
	return api->write(dev, offset, data, len);
   2118c:	6881      	ldr	r1, [r0, #8]
   2118e:	684c      	ldr	r4, [r1, #4]
   21190:	4631      	mov	r1, r6
   21192:	47a0      	blx	r4
   21194:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   21196:	2101      	movs	r1, #1
   21198:	68e8      	ldr	r0, [r5, #12]
   2119a:	f013 fefd 	bl	34f98 <flash_write_protection_set>
	if (rc != 0) {
   2119e:	b154      	cbz	r4, 211b6 <flash_sync+0x6e>
   211a0:	4a21      	ldr	r2, [pc, #132]	; (21228 <flash_sync+0xe0>)
   211a2:	4b22      	ldr	r3, [pc, #136]	; (2122c <flash_sync+0xe4>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   211a4:	4621      	mov	r1, r4
   211a6:	1a9b      	subs	r3, r3, r2
   211a8:	08db      	lsrs	r3, r3, #3
   211aa:	019b      	lsls	r3, r3, #6
   211ac:	4632      	mov	r2, r6
   211ae:	4821      	ldr	r0, [pc, #132]	; (21234 <flash_sync+0xec>)
   211b0:	f043 0301 	orr.w	r3, r3, #1
   211b4:	e7df      	b.n	21176 <flash_sync+0x2e>
	if (ctx->callback) {
   211b6:	69eb      	ldr	r3, [r5, #28]
   211b8:	b953      	cbnz	r3, 211d0 <flash_sync+0x88>
	ctx->bytes_written += ctx->buf_bytes;
   211ba:	692b      	ldr	r3, [r5, #16]
   211bc:	68aa      	ldr	r2, [r5, #8]
   211be:	4413      	add	r3, r2
   211c0:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
   211c2:	2300      	movs	r3, #0
   211c4:	60ab      	str	r3, [r5, #8]
	return rc;
   211c6:	e7d8      	b.n	2117a <flash_sync+0x32>
			ctx->buf[i] = ~ctx->buf[i];
   211c8:	5d13      	ldrb	r3, [r2, r4]
   211ca:	43db      	mvns	r3, r3
   211cc:	5513      	strb	r3, [r2, r4]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   211ce:	3401      	adds	r4, #1
   211d0:	68ab      	ldr	r3, [r5, #8]
   211d2:	682a      	ldr	r2, [r5, #0]
   211d4:	429c      	cmp	r4, r3
   211d6:	d3f7      	bcc.n	211c8 <flash_sync+0x80>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   211d8:	68e8      	ldr	r0, [r5, #12]
	return api->read(dev, offset, data, len);
   211da:	6881      	ldr	r1, [r0, #8]
   211dc:	680c      	ldr	r4, [r1, #0]
   211de:	4631      	mov	r1, r6
   211e0:	47a0      	blx	r4
		if (rc != 0) {
   211e2:	4604      	mov	r4, r0
   211e4:	b158      	cbz	r0, 211fe <flash_sync+0xb6>
   211e6:	4b10      	ldr	r3, [pc, #64]	; (21228 <flash_sync+0xe0>)
   211e8:	4a10      	ldr	r2, [pc, #64]	; (2122c <flash_sync+0xe4>)
			LOG_ERR("flash read failed: %d", rc);
   211ea:	4601      	mov	r1, r0
   211ec:	1ad2      	subs	r2, r2, r3
   211ee:	08d2      	lsrs	r2, r2, #3
   211f0:	0192      	lsls	r2, r2, #6
   211f2:	4811      	ldr	r0, [pc, #68]	; (21238 <flash_sync+0xf0>)
   211f4:	f042 0201 	orr.w	r2, r2, #1
   211f8:	f013 f995 	bl	34526 <log_1>
			return rc;
   211fc:	e7bd      	b.n	2117a <flash_sync+0x32>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   211fe:	4632      	mov	r2, r6
   21200:	69eb      	ldr	r3, [r5, #28]
   21202:	68a9      	ldr	r1, [r5, #8]
   21204:	6828      	ldr	r0, [r5, #0]
   21206:	4798      	blx	r3
		if (rc != 0) {
   21208:	4604      	mov	r4, r0
   2120a:	2800      	cmp	r0, #0
   2120c:	d0d5      	beq.n	211ba <flash_sync+0x72>
   2120e:	4b06      	ldr	r3, [pc, #24]	; (21228 <flash_sync+0xe0>)
   21210:	4a06      	ldr	r2, [pc, #24]	; (2122c <flash_sync+0xe4>)
			LOG_ERR("callback failed: %d", rc);
   21212:	4601      	mov	r1, r0
   21214:	1ad2      	subs	r2, r2, r3
   21216:	08d2      	lsrs	r2, r2, #3
   21218:	0192      	lsls	r2, r2, #6
   2121a:	4808      	ldr	r0, [pc, #32]	; (2123c <flash_sync+0xf4>)
   2121c:	f042 0201 	orr.w	r2, r2, #1
   21220:	f013 f981 	bl	34526 <log_1>
   21224:	e7c9      	b.n	211ba <flash_sync+0x72>
   21226:	bf00      	nop
   21228:	0003831c 	.word	0x0003831c
   2122c:	0003831c 	.word	0x0003831c
   21230:	0003a965 	.word	0x0003a965
   21234:	0003a993 	.word	0x0003a993
   21238:	0003a9b7 	.word	0x0003a9b7
   2123c:	0003a9cd 	.word	0x0003a9cd

00021240 <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   21240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21244:	460d      	mov	r5, r1
   21246:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   2124a:	4691      	mov	r9, r2
   2124c:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   2124e:	4604      	mov	r4, r0
   21250:	b920      	cbnz	r0, 2125c <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
   21252:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   21256:	b003      	add	sp, #12
   21258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   2125c:	2900      	cmp	r1, #0
   2125e:	d0f8      	beq.n	21252 <stream_flash_init+0x12>
   21260:	2a00      	cmp	r2, #0
   21262:	d0f6      	beq.n	21252 <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   21264:	9300      	str	r3, [sp, #0]
   21266:	2300      	movs	r3, #0
	if (buf_len % flash_get_write_block_size(fdev)) {
   21268:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   2126a:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   2126c:	f013 fe97 	bl	34f9e <flash_get_write_block_size>
   21270:	fbb7 f3f0 	udiv	r3, r7, r0
   21274:	fb03 7010 	mls	r0, r3, r0, r7
   21278:	b150      	cbz	r0, 21290 <stream_flash_init+0x50>
   2127a:	491e      	ldr	r1, [pc, #120]	; (212f4 <stream_flash_init+0xb4>)
   2127c:	4b1e      	ldr	r3, [pc, #120]	; (212f8 <stream_flash_init+0xb8>)
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   2127e:	481f      	ldr	r0, [pc, #124]	; (212fc <stream_flash_init+0xbc>)
   21280:	1ac9      	subs	r1, r1, r3
   21282:	08c9      	lsrs	r1, r1, #3
   21284:	0189      	lsls	r1, r1, #6
   21286:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Incorrect parameter");
   2128a:	f013 f93d 	bl	34508 <log_0>
   2128e:	e7e0      	b.n	21252 <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   21290:	466a      	mov	r2, sp
   21292:	4628      	mov	r0, r5
   21294:	491a      	ldr	r1, [pc, #104]	; (21300 <stream_flash_init+0xc0>)
   21296:	f014 fbe8 	bl	35a6a <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   2129a:	9b01      	ldr	r3, [sp, #4]
   2129c:	2b00      	cmp	r3, #0
   2129e:	d0d8      	beq.n	21252 <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   212a0:	eb08 0206 	add.w	r2, r8, r6
   212a4:	4293      	cmp	r3, r2
   212a6:	d208      	bcs.n	212ba <stream_flash_init+0x7a>
   212a8:	4912      	ldr	r1, [pc, #72]	; (212f4 <stream_flash_init+0xb4>)
   212aa:	4b13      	ldr	r3, [pc, #76]	; (212f8 <stream_flash_init+0xb8>)
		LOG_ERR("Incorrect parameter");
   212ac:	4815      	ldr	r0, [pc, #84]	; (21304 <stream_flash_init+0xc4>)
   212ae:	1ac9      	subs	r1, r1, r3
   212b0:	08c9      	lsrs	r1, r1, #3
   212b2:	0189      	lsls	r1, r1, #6
   212b4:	f041 0101 	orr.w	r1, r1, #1
   212b8:	e7e7      	b.n	2128a <stream_flash_init+0x4a>
	    offset % flash_get_write_block_size(fdev)) {
   212ba:	4628      	mov	r0, r5
   212bc:	f013 fe6f 	bl	34f9e <flash_get_write_block_size>
   212c0:	fbb8 f3f0 	udiv	r3, r8, r0
   212c4:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   212c8:	2800      	cmp	r0, #0
   212ca:	d1ed      	bne.n	212a8 <stream_flash_init+0x68>
	ctx->buf_len = buf_len;
   212cc:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   212d0:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   212d2:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   212d4:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   212d6:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   212da:	b916      	cbnz	r6, 212e2 <stream_flash_init+0xa2>
   212dc:	9e01      	ldr	r6, [sp, #4]
   212de:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   212e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
   212e4:	2000      	movs	r0, #0
	ctx->callback = cb;
   212e6:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   212e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   212ec:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   212ee:	6223      	str	r3, [r4, #32]
	return 0;
   212f0:	e7b1      	b.n	21256 <stream_flash_init+0x16>
   212f2:	bf00      	nop
   212f4:	0003831c 	.word	0x0003831c
   212f8:	0003831c 	.word	0x0003831c
   212fc:	0003a9e1 	.word	0x0003a9e1
   21300:	00021081 	.word	0x00021081
   21304:	0003aa18 	.word	0x0003aa18

00021308 <sys_pm_create_device_list>:
		++pmi;
	}
}

void sys_pm_create_device_list(void)
{
   21308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t count = z_device_get_all_static(&all_devices);
   2130c:	481f      	ldr	r0, [pc, #124]	; (2138c <sys_pm_create_device_list+0x84>)
   2130e:	f010 f877 	bl	31400 <z_device_get_all_static>

	__ASSERT_NO_MSG(count <= DEVICE_IDX_MAX);

	/* Reserve initial slots for core devices. */
	core_dev = 0;
	while (z_pm_core_devices[core_dev]) {
   21312:	2300      	movs	r3, #0
   21314:	4a1e      	ldr	r2, [pc, #120]	; (21390 <sys_pm_create_device_list+0x88>)
	size_t count = z_device_get_all_static(&all_devices);
   21316:	9000      	str	r0, [sp, #0]
	while (z_pm_core_devices[core_dev]) {
   21318:	fa1f f983 	uxth.w	r9, r3
   2131c:	f852 4029 	ldr.w	r4, [r2, r9, lsl #2]
   21320:	3301      	adds	r3, #1
   21322:	2c00      	cmp	r4, #0
   21324:	d1f8      	bne.n	21318 <sys_pm_create_device_list+0x10>
		core_dev++;
	}

	num_pm = core_dev;
   21326:	4e1b      	ldr	r6, [pc, #108]	; (21394 <sys_pm_create_device_list+0x8c>)
	__ASSERT_NO_MSG(num_pm <= CONFIG_PM_MAX_DEVICES);

	for (pmi = 0; pmi < count; pmi++) {
		device_idx_t cdi = 0;
		const struct device *dev = &all_devices[pmi];
   21328:	4b18      	ldr	r3, [pc, #96]	; (2138c <sys_pm_create_device_list+0x84>)
			++cdi;
		}

		/* Append the device if it doesn't have a reserved slot. */
		if (cdi == core_dev) {
			pm_devices[num_pm++] = pmi;
   2132a:	f8df a070 	ldr.w	sl, [pc, #112]	; 2139c <sys_pm_create_device_list+0x94>
	num_pm = core_dev;
   2132e:	f8a6 9000 	strh.w	r9, [r6]
	for (pmi = 0; pmi < count; pmi++) {
   21332:	9a00      	ldr	r2, [sp, #0]
   21334:	fa1f f884 	uxth.w	r8, r4
   21338:	4542      	cmp	r2, r8
   2133a:	4645      	mov	r5, r8
   2133c:	d802      	bhi.n	21344 <sys_pm_create_device_list+0x3c>
		}
	}
}
   2133e:	b003      	add	sp, #12
   21340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct device *dev = &all_devices[pmi];
   21344:	2118      	movs	r1, #24
   21346:	681a      	ldr	r2, [r3, #0]
   21348:	fb01 2505 	mla	r5, r1, r5, r2
		if ((dev->device_pm_control == NULL) ||
   2134c:	692a      	ldr	r2, [r5, #16]
   2134e:	b1da      	cbz	r2, 21388 <sys_pm_create_device_list+0x80>
   21350:	4911      	ldr	r1, [pc, #68]	; (21398 <sys_pm_create_device_list+0x90>)
   21352:	428a      	cmp	r2, r1
   21354:	d018      	beq.n	21388 <sys_pm_create_device_list+0x80>
   21356:	2700      	movs	r7, #0
		while (z_pm_core_devices[cdi]) {
   21358:	490d      	ldr	r1, [pc, #52]	; (21390 <sys_pm_create_device_list+0x88>)
   2135a:	b2ba      	uxth	r2, r7
   2135c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   21360:	4693      	mov	fp, r2
   21362:	b151      	cbz	r1, 2137a <sys_pm_create_device_list+0x72>
			if (strcmp(dev->name, z_pm_core_devices[cdi]) == 0) {
   21364:	6828      	ldr	r0, [r5, #0]
   21366:	9201      	str	r2, [sp, #4]
   21368:	f7f7 fe78 	bl	1905c <strcmp>
   2136c:	3701      	adds	r7, #1
   2136e:	9a01      	ldr	r2, [sp, #4]
   21370:	4b06      	ldr	r3, [pc, #24]	; (2138c <sys_pm_create_device_list+0x84>)
   21372:	2800      	cmp	r0, #0
   21374:	d1f0      	bne.n	21358 <sys_pm_create_device_list+0x50>
				pm_devices[cdi] = pmi;
   21376:	f82a 801b 	strh.w	r8, [sl, fp, lsl #1]
		if (cdi == core_dev) {
   2137a:	454a      	cmp	r2, r9
			pm_devices[num_pm++] = pmi;
   2137c:	bf01      	itttt	eq
   2137e:	8832      	ldrheq	r2, [r6, #0]
   21380:	1c51      	addeq	r1, r2, #1
   21382:	8031      	strheq	r1, [r6, #0]
   21384:	f82a 8012 	strheq.w	r8, [sl, r2, lsl #1]
	for (pmi = 0; pmi < count; pmi++) {
   21388:	3401      	adds	r4, #1
   2138a:	e7d2      	b.n	21332 <sys_pm_create_device_list+0x2a>
   2138c:	2002362c 	.word	0x2002362c
   21390:	00038800 	.word	0x00038800
   21394:	20028926 	.word	0x20028926
   21398:	000369dd 	.word	0x000369dd
   2139c:	20028928 	.word	0x20028928

000213a0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   213a0:	b507      	push	{r0, r1, r2, lr}
   213a2:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   213a4:	f04f 0220 	mov.w	r2, #32
   213a8:	f3ef 8311 	mrs	r3, BASEPRI
   213ac:	f382 8811 	msr	BASEPRI, r2
   213b0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   213b4:	f013 ff03 	bl	351be <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   213b8:	9801      	ldr	r0, [sp, #4]
   213ba:	f000 fff7 	bl	223ac <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   213be:	4803      	ldr	r0, [pc, #12]	; (213cc <sys_reboot+0x2c>)
   213c0:	f012 fc30 	bl	33c24 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   213c4:	f000 fcaa 	bl	21d1c <arch_cpu_idle>
   213c8:	e7fc      	b.n	213c4 <sys_reboot+0x24>
   213ca:	bf00      	nop
   213cc:	0003aa73 	.word	0x0003aa73

000213d0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   213d0:	b508      	push	{r3, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   213d2:	4804      	ldr	r0, [pc, #16]	; (213e4 <rtt_console_init+0x14>)
   213d4:	f7fd ff92 	bl	1f2fc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   213d8:	4802      	ldr	r0, [pc, #8]	; (213e4 <rtt_console_init+0x14>)
   213da:	f001 fa05 	bl	227e8 <__stdout_hook_install>

	return 0;
}
   213de:	2000      	movs	r0, #0
   213e0:	bd08      	pop	{r3, pc}
   213e2:	bf00      	nop
   213e4:	000213e9 	.word	0x000213e9

000213e8 <rtt_console_out>:
{
   213e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   213ec:	4604      	mov	r4, r0
	char c = (char)character;
   213ee:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
   213f0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 21450 <rtt_console_out+0x68>
   213f4:	4e15      	ldr	r6, [pc, #84]	; (2144c <rtt_console_out+0x64>)
   213f6:	f88d 0007 	strb.w	r0, [sp, #7]
   213fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   213fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21402:	4640      	mov	r0, r8
   21404:	f010 fafc 	bl	31a00 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   21408:	2201      	movs	r2, #1
   2140a:	f10d 0107 	add.w	r1, sp, #7
   2140e:	2000      	movs	r0, #0
   21410:	f000 fb22 	bl	21a58 <SEGGER_RTT_WriteNoLock>
   21414:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   21416:	4640      	mov	r0, r8
   21418:	f010 fb6a 	bl	31af0 <z_impl_k_mutex_unlock>
		if (cnt) {
   2141c:	b12f      	cbz	r7, 2142a <rtt_console_out+0x42>
			host_present = true;
   2141e:	2301      	movs	r3, #1
   21420:	7033      	strb	r3, [r6, #0]
}
   21422:	4620      	mov	r0, r4
   21424:	b002      	add	sp, #8
   21426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   2142a:	7833      	ldrb	r3, [r6, #0]
   2142c:	2b00      	cmp	r3, #0
   2142e:	d0f8      	beq.n	21422 <rtt_console_out+0x3a>
			if (max_cnt) {
   21430:	3d01      	subs	r5, #1
   21432:	d008      	beq.n	21446 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
   21434:	f015 fd1b 	bl	36e6e <k_is_in_isr>
   21438:	2800      	cmp	r0, #0
   2143a:	d1de      	bne.n	213fa <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   2143c:	2100      	movs	r1, #0
   2143e:	2042      	movs	r0, #66	; 0x42
   21440:	f010 ff5a 	bl	322f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   21444:	e7d9      	b.n	213fa <rtt_console_out+0x12>
				host_present = false;
   21446:	7035      	strb	r5, [r6, #0]
   21448:	e7eb      	b.n	21422 <rtt_console_out+0x3a>
   2144a:	bf00      	nop
   2144c:	2002bc6a 	.word	0x2002bc6a
   21450:	200207ec 	.word	0x200207ec

00021454 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   21454:	b570      	push	{r4, r5, r6, lr}
   21456:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
   21458:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   2145a:	480d      	ldr	r0, [pc, #52]	; (21490 <onoff_stop+0x3c>)
{
   2145c:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
   2145e:	1a23      	subs	r3, r4, r0
   21460:	109a      	asrs	r2, r3, #2
   21462:	4b0c      	ldr	r3, [pc, #48]	; (21494 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
   21464:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   21466:	4353      	muls	r3, r2
   21468:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   2146a:	435d      	muls	r5, r3
   2146c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   21470:	4418      	add	r0, r3
   21472:	f013 fe14 	bl	3509e <set_off_state>
	if (err < 0) {
   21476:	1e01      	subs	r1, r0, #0
   21478:	db04      	blt.n	21484 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   2147a:	4b07      	ldr	r3, [pc, #28]	; (21498 <onoff_stop+0x44>)
   2147c:	442b      	add	r3, r5
   2147e:	685b      	ldr	r3, [r3, #4]
   21480:	4798      	blx	r3
	return 0;
   21482:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   21484:	4620      	mov	r0, r4
   21486:	4633      	mov	r3, r6
}
   21488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2148c:	4718      	bx	r3
   2148e:	bf00      	nop
   21490:	20023640 	.word	0x20023640
   21494:	b6db6db7 	.word	0xb6db6db7
   21498:	00038824 	.word	0x00038824

0002149c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2149c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   214a0:	4c0f      	ldr	r4, [pc, #60]	; (214e0 <onoff_start+0x44>)
   214a2:	4d10      	ldr	r5, [pc, #64]	; (214e4 <onoff_start+0x48>)
   214a4:	1b03      	subs	r3, r0, r4
   214a6:	109b      	asrs	r3, r3, #2
   214a8:	435d      	muls	r5, r3
   214aa:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   214ac:	250c      	movs	r5, #12
   214ae:	435d      	muls	r5, r3
{
   214b0:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   214b2:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   214b6:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   214b8:	4420      	add	r0, r4
   214ba:	2140      	movs	r1, #64	; 0x40
   214bc:	f013 fe08 	bl	350d0 <set_starting_state>
	if (err < 0) {
   214c0:	1e01      	subs	r1, r0, #0
   214c2:	db08      	blt.n	214d6 <onoff_start+0x3a>
	subdata->cb = cb;
   214c4:	4b08      	ldr	r3, [pc, #32]	; (214e8 <onoff_start+0x4c>)
   214c6:	442c      	add	r4, r5
	subdata->user_data = user_data;
   214c8:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   214cc:	4b07      	ldr	r3, [pc, #28]	; (214ec <onoff_start+0x50>)
   214ce:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   214d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   214d4:	4718      	bx	r3
		notify(mgr, err);
   214d6:	4638      	mov	r0, r7
   214d8:	4633      	mov	r3, r6
}
   214da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   214de:	4718      	bx	r3
   214e0:	20023640 	.word	0x20023640
   214e4:	b6db6db7 	.word	0xb6db6db7
   214e8:	00035133 	.word	0x00035133
   214ec:	00038824 	.word	0x00038824

000214f0 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   214f0:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   214f2:	2200      	movs	r2, #0
   214f4:	2101      	movs	r1, #1
{
   214f6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   214f8:	2005      	movs	r0, #5
   214fa:	f000 fba1 	bl	21c40 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   214fe:	2005      	movs	r0, #5
   21500:	f000 fb6c 	bl	21bdc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   21504:	480f      	ldr	r0, [pc, #60]	; (21544 <clk_init+0x54>)
   21506:	f00f fdaf 	bl	31068 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2150a:	4b0f      	ldr	r3, [pc, #60]	; (21548 <clk_init+0x58>)
   2150c:	4298      	cmp	r0, r3
   2150e:	d115      	bne.n	2153c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   21510:	f015 fa41 	bl	36996 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   21514:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   21516:	490d      	ldr	r1, [pc, #52]	; (2154c <clk_init+0x5c>)
   21518:	4630      	mov	r0, r6
   2151a:	f012 fbed 	bl	33cf8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2151e:	2800      	cmp	r0, #0
   21520:	db0b      	blt.n	2153a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   21522:	2501      	movs	r5, #1
   21524:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   21526:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   21528:	4908      	ldr	r1, [pc, #32]	; (2154c <clk_init+0x5c>)
   2152a:	f104 001c 	add.w	r0, r4, #28
   2152e:	f012 fbe3 	bl	33cf8 <onoff_manager_init>
		if (err < 0) {
   21532:	2800      	cmp	r0, #0
   21534:	db01      	blt.n	2153a <clk_init+0x4a>
	}

	return 0;
   21536:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   21538:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   2153a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2153c:	f06f 0004 	mvn.w	r0, #4
   21540:	e7fb      	b.n	2153a <clk_init+0x4a>
   21542:	bf00      	nop
   21544:	0002158d 	.word	0x0002158d
   21548:	0bad0000 	.word	0x0bad0000
   2154c:	0003883c 	.word	0x0003883c

00021550 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   21550:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   21552:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   21554:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   21556:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   21558:	434b      	muls	r3, r1
   2155a:	480a      	ldr	r0, [pc, #40]	; (21584 <clkstarted_handle.constprop.0+0x34>)
   2155c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   2155e:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   21560:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   21564:	4418      	add	r0, r3
	sub_data->cb = NULL;
   21566:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
   21568:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   2156a:	f013 fdcf 	bl	3510c <set_on_state>
	if (callback) {
   2156e:	b135      	cbz	r5, 2157e <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   21570:	462b      	mov	r3, r5
   21572:	9a01      	ldr	r2, [sp, #4]
   21574:	4804      	ldr	r0, [pc, #16]	; (21588 <clkstarted_handle.constprop.0+0x38>)
}
   21576:	b002      	add	sp, #8
   21578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   2157c:	4718      	bx	r3
}
   2157e:	b002      	add	sp, #8
   21580:	bd70      	pop	{r4, r5, r6, pc}
   21582:	bf00      	nop
   21584:	20023640 	.word	0x20023640
   21588:	2002063c 	.word	0x2002063c

0002158c <clock_event_handler>:
	switch (event) {
   2158c:	b110      	cbz	r0, 21594 <clock_event_handler+0x8>
   2158e:	2801      	cmp	r0, #1
   21590:	d004      	beq.n	2159c <clock_event_handler+0x10>
   21592:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   21594:	4b03      	ldr	r3, [pc, #12]	; (215a4 <clock_event_handler+0x18>)
   21596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   21598:	075b      	lsls	r3, r3, #29
   2159a:	d101      	bne.n	215a0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2159c:	f7ff bfd8 	b.w	21550 <clkstarted_handle.constprop.0>
}
   215a0:	4770      	bx	lr
   215a2:	bf00      	nop
   215a4:	20023640 	.word	0x20023640

000215a8 <generic_hfclk_start>:
{
   215a8:	b508      	push	{r3, lr}
   215aa:	f04f 0320 	mov.w	r3, #32
   215ae:	f3ef 8111 	mrs	r1, BASEPRI
   215b2:	f383 8811 	msr	BASEPRI, r3
   215b6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   215ba:	4a11      	ldr	r2, [pc, #68]	; (21600 <generic_hfclk_start+0x58>)
   215bc:	6813      	ldr	r3, [r2, #0]
   215be:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   215c2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   215c6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   215c8:	d00b      	beq.n	215e2 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   215ca:	4a0e      	ldr	r2, [pc, #56]	; (21604 <generic_hfclk_start+0x5c>)
   215cc:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   215d0:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   215d4:	f013 0301 	ands.w	r3, r3, #1
   215d8:	d003      	beq.n	215e2 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   215da:	480b      	ldr	r0, [pc, #44]	; (21608 <generic_hfclk_start+0x60>)
   215dc:	f013 fd96 	bl	3510c <set_on_state>
			already_started = true;
   215e0:	2301      	movs	r3, #1
	__asm__ volatile(
   215e2:	f381 8811 	msr	BASEPRI, r1
   215e6:	f3bf 8f6f 	isb	sy
	if (already_started) {
   215ea:	b123      	cbz	r3, 215f6 <generic_hfclk_start+0x4e>
}
   215ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   215f0:	2000      	movs	r0, #0
   215f2:	f7ff bfad 	b.w	21550 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   215f6:	2001      	movs	r0, #1
}
   215f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   215fc:	f00f bd44 	b.w	31088 <nrfx_clock_start>
   21600:	20023690 	.word	0x20023690
   21604:	40005000 	.word	0x40005000
   21608:	20023680 	.word	0x20023680

0002160c <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2160c:	4b07      	ldr	r3, [pc, #28]	; (2162c <generic_hfclk_stop+0x20>)
   2160e:	e8d3 2fef 	ldaex	r2, [r3]
   21612:	f022 0102 	bic.w	r1, r2, #2
   21616:	e8c3 1fe0 	stlex	r0, r1, [r3]
   2161a:	2800      	cmp	r0, #0
   2161c:	d1f7      	bne.n	2160e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   2161e:	07d3      	lsls	r3, r2, #31
   21620:	d402      	bmi.n	21628 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   21622:	2001      	movs	r0, #1
   21624:	f00f bd62 	b.w	310ec <nrfx_clock_stop>
}
   21628:	4770      	bx	lr
   2162a:	bf00      	nop
   2162c:	20023690 	.word	0x20023690

00021630 <api_blocking_start>:
{
   21630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21632:	2200      	movs	r2, #0
   21634:	2301      	movs	r3, #1
   21636:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2163a:	ab04      	add	r3, sp, #16
   2163c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   21640:	4a09      	ldr	r2, [pc, #36]	; (21668 <api_blocking_start+0x38>)
   21642:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21644:	f8cd d000 	str.w	sp, [sp]
   21648:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2164c:	f013 fd98 	bl	35180 <api_start>
	if (err < 0) {
   21650:	2800      	cmp	r0, #0
   21652:	db05      	blt.n	21660 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   21654:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   21658:	2300      	movs	r3, #0
   2165a:	4668      	mov	r0, sp
   2165c:	f010 fe98 	bl	32390 <z_impl_k_sem_take>
}
   21660:	b007      	add	sp, #28
   21662:	f85d fb04 	ldr.w	pc, [sp], #4
   21666:	bf00      	nop
   21668:	00035147 	.word	0x00035147

0002166c <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
   2166c:	b2c3      	uxtb	r3, r0
}
   2166e:	201c      	movs	r0, #28
   21670:	4a01      	ldr	r2, [pc, #4]	; (21678 <z_nrf_clock_control_get_onoff+0xc>)
   21672:	fb03 2000 	mla	r0, r3, r0, r2
   21676:	4770      	bx	lr
   21678:	20023640 	.word	0x20023640

0002167c <z_nrf_clock_control_lf_on>:
{
   2167c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21680:	2201      	movs	r2, #1
   21682:	4607      	mov	r7, r0
   21684:	4936      	ldr	r1, [pc, #216]	; (21760 <z_nrf_clock_control_lf_on+0xe4>)
   21686:	e8d1 3fef 	ldaex	r3, [r1]
   2168a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   2168e:	2800      	cmp	r0, #0
   21690:	d1f9      	bne.n	21686 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   21692:	b933      	cbnz	r3, 216a2 <z_nrf_clock_control_lf_on+0x26>
   21694:	4933      	ldr	r1, [pc, #204]	; (21764 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
   21696:	4834      	ldr	r0, [pc, #208]	; (21768 <z_nrf_clock_control_lf_on+0xec>)
   21698:	604b      	str	r3, [r1, #4]
   2169a:	60cb      	str	r3, [r1, #12]
   2169c:	608a      	str	r2, [r1, #8]
   2169e:	f012 fb3e 	bl	33d1e <onoff_request>
	switch (start_mode) {
   216a2:	1e7b      	subs	r3, r7, #1
   216a4:	2b01      	cmp	r3, #1
   216a6:	d82e      	bhi.n	21706 <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   216a8:	2f01      	cmp	r7, #1
   216aa:	d106      	bne.n	216ba <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   216ac:	4b2f      	ldr	r3, [pc, #188]	; (2176c <z_nrf_clock_control_lf_on+0xf0>)
   216ae:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   216b2:	f003 0303 	and.w	r3, r3, #3
   216b6:	2b02      	cmp	r3, #2
   216b8:	d025      	beq.n	21706 <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   216ba:	f015 fbd8 	bl	36e6e <k_is_in_isr>
   216be:	4604      	mov	r4, r0
   216c0:	b918      	cbnz	r0, 216ca <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
   216c2:	4b2b      	ldr	r3, [pc, #172]	; (21770 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
   216c4:	781b      	ldrb	r3, [r3, #0]
   216c6:	2b00      	cmp	r3, #0
   216c8:	d144      	bne.n	21754 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
   216ca:	f04f 0320 	mov.w	r3, #32
   216ce:	f3ef 8611 	mrs	r6, BASEPRI
   216d2:	f383 8811 	msr	BASEPRI, r3
   216d6:	f3bf 8f6f 	isb	sy
   216da:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   216dc:	4d23      	ldr	r5, [pc, #140]	; (2176c <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   216de:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2177c <z_nrf_clock_control_lf_on+0x100>
   216e2:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   216e4:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   216e8:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   216ec:	03d2      	lsls	r2, r2, #15
   216ee:	d50c      	bpl.n	2170a <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   216f0:	f003 0303 	and.w	r3, r3, #3
   216f4:	2b02      	cmp	r3, #2
   216f6:	d001      	beq.n	216fc <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   216f8:	2f01      	cmp	r7, #1
   216fa:	d106      	bne.n	2170a <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
   216fc:	b334      	cbz	r4, 2174c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   216fe:	f386 8811 	msr	BASEPRI, r6
   21702:	f3bf 8f6f 	isb	sy
}
   21706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   2170a:	b1d4      	cbz	r4, 21742 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2170c:	4630      	mov	r0, r6
   2170e:	f000 fb13 	bl	21d38 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   21712:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   21716:	b2db      	uxtb	r3, r3
   21718:	2b01      	cmp	r3, #1
   2171a:	d1e3      	bne.n	216e4 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2171c:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   21720:	2a00      	cmp	r2, #0
   21722:	d0df      	beq.n	216e4 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21724:	2200      	movs	r2, #0
   21726:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2172a:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   2172e:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21730:	2120      	movs	r1, #32
   21732:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   21736:	4a0f      	ldr	r2, [pc, #60]	; (21774 <z_nrf_clock_control_lf_on+0xf8>)
   21738:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2173c:	4a0e      	ldr	r2, [pc, #56]	; (21778 <z_nrf_clock_control_lf_on+0xfc>)
   2173e:	6013      	str	r3, [r2, #0]
}
   21740:	e7d0      	b.n	216e4 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   21742:	2100      	movs	r1, #0
   21744:	2021      	movs	r0, #33	; 0x21
   21746:	f010 fdd7 	bl	322f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2174a:	e7e2      	b.n	21712 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
   2174c:	2302      	movs	r3, #2
   2174e:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   21752:	e7d8      	b.n	21706 <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
   21754:	2202      	movs	r2, #2
   21756:	4b05      	ldr	r3, [pc, #20]	; (2176c <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   21758:	4606      	mov	r6, r0
   2175a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2175e:	e7bd      	b.n	216dc <z_nrf_clock_control_lf_on+0x60>
   21760:	20023694 	.word	0x20023694
   21764:	20023630 	.word	0x20023630
   21768:	2002365c 	.word	0x2002365c
   2176c:	40005000 	.word	0x40005000
   21770:	2002cb9f 	.word	0x2002cb9f
   21774:	e000e100 	.word	0xe000e100
   21778:	40005008 	.word	0x40005008
   2177c:	40005104 	.word	0x40005104

00021780 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   21780:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   21782:	4b08      	ldr	r3, [pc, #32]	; (217a4 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   21784:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   21788:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   2178c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   21790:	4290      	cmp	r0, r2
   21792:	d100      	bne.n	21796 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   21794:	4770      	bx	lr
   21796:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   2179a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   2179c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   217a0:	e7f2      	b.n	21788 <handle_next_cycle_case+0x8>
   217a2:	bf00      	nop
   217a4:	40015000 	.word	0x40015000

000217a8 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   217a8:	2200      	movs	r2, #0
   217aa:	4b07      	ldr	r3, [pc, #28]	; (217c8 <rtc_nrf_isr+0x20>)
   217ac:	601a      	str	r2, [r3, #0]
   217ae:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   217b0:	4a06      	ldr	r2, [pc, #24]	; (217cc <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   217b2:	4b07      	ldr	r3, [pc, #28]	; (217d0 <rtc_nrf_isr+0x28>)
   217b4:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   217b8:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   217ba:	1ac0      	subs	r0, r0, r3
   217bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   217c0:	4403      	add	r3, r0
   217c2:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   217c4:	f011 b84e 	b.w	32864 <z_clock_announce>
   217c8:	40015140 	.word	0x40015140
   217cc:	20023698 	.word	0x20023698
   217d0:	40015000 	.word	0x40015000

000217d4 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   217d4:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   217d6:	2400      	movs	r4, #0
   217d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   217dc:	4d0e      	ldr	r5, [pc, #56]	; (21818 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   217de:	4b0f      	ldr	r3, [pc, #60]	; (2181c <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   217e0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   217e4:	601c      	str	r4, [r3, #0]
   217e6:	681b      	ldr	r3, [r3, #0]
   217e8:	4b0d      	ldr	r3, [pc, #52]	; (21820 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   217ea:	2101      	movs	r1, #1
   217ec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   217f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   217f4:	4622      	mov	r2, r4
   217f6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   217fa:	2015      	movs	r0, #21
   217fc:	f000 fa20 	bl	21c40 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   21800:	2015      	movs	r0, #21
   21802:	f000 f9eb 	bl	21bdc <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   21806:	2301      	movs	r3, #1
   21808:	4a06      	ldr	r2, [pc, #24]	; (21824 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   2180a:	2002      	movs	r0, #2
   2180c:	6013      	str	r3, [r2, #0]
   2180e:	602b      	str	r3, [r5, #0]
   21810:	f7ff ff34 	bl	2167c <z_nrf_clock_control_lf_on>

	return 0;
}
   21814:	4620      	mov	r0, r4
   21816:	bd38      	pop	{r3, r4, r5, pc}
   21818:	40015000 	.word	0x40015000
   2181c:	40015140 	.word	0x40015140
   21820:	e000e100 	.word	0xe000e100
   21824:	40015008 	.word	0x40015008

00021828 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   21828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2182a:	4b2e      	ldr	r3, [pc, #184]	; (218e4 <z_clock_set_timeout+0xbc>)
   2182c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21830:	bf08      	it	eq
   21832:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   21834:	3801      	subs	r0, #1
   21836:	2800      	cmp	r0, #0
   21838:	dd41      	ble.n	218be <z_clock_set_timeout+0x96>
   2183a:	4298      	cmp	r0, r3
   2183c:	bfa8      	it	ge
   2183e:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   21840:	4b29      	ldr	r3, [pc, #164]	; (218e8 <z_clock_set_timeout+0xc0>)

	uint32_t unannounced = counter_sub(counter(), last_count);
   21842:	492a      	ldr	r1, [pc, #168]	; (218ec <z_clock_set_timeout+0xc4>)
   21844:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   21848:	6809      	ldr	r1, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2184a:	2600      	movs	r6, #0
	return (a - b) & COUNTER_MAX;
   2184c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   2184e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   21852:	bf18      	it	ne
   21854:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   21856:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2185a:	3401      	adds	r4, #1
   2185c:	4420      	add	r0, r4
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   2185e:	4c21      	ldr	r4, [pc, #132]	; (218e4 <z_clock_set_timeout+0xbc>)
   21860:	4d23      	ldr	r5, [pc, #140]	; (218f0 <z_clock_set_timeout+0xc8>)
   21862:	42a0      	cmp	r0, r4
   21864:	bf94      	ite	ls
   21866:	180c      	addls	r4, r1, r0
   21868:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   2186a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   2186e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   21872:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   21876:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2187a:	602e      	str	r6, [r5, #0]
   2187c:	682f      	ldr	r7, [r5, #0]
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   2187e:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   21882:	f8c3 7540 	str.w	r7, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   21886:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	return (a - b) & COUNTER_MAX;
   2188a:	1a53      	subs	r3, r2, r1
   2188c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   21890:	2b01      	cmp	r3, #1
   21892:	d104      	bne.n	2189e <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
   21894:	200f      	movs	r0, #15
   21896:	f015 faf0 	bl	36e7a <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2189a:	602e      	str	r6, [r5, #0]
   2189c:	682b      	ldr	r3, [r5, #0]
   2189e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   218a2:	4b14      	ldr	r3, [pc, #80]	; (218f4 <z_clock_set_timeout+0xcc>)
   218a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   218a8:	4b0f      	ldr	r3, [pc, #60]	; (218e8 <z_clock_set_timeout+0xc0>)
   218aa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   218ae:	1a22      	subs	r2, r4, r0
   218b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   218b4:	2a01      	cmp	r2, #1
   218b6:	d104      	bne.n	218c2 <z_clock_set_timeout+0x9a>
		handle_next_cycle_case(t);
   218b8:	f7ff ff62 	bl	21780 <handle_next_cycle_case>
   218bc:	e00b      	b.n	218d6 <z_clock_set_timeout+0xae>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   218be:	2000      	movs	r0, #0
   218c0:	e7be      	b.n	21840 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   218c2:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   218c6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   218ca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   218ce:	1a24      	subs	r4, r4, r0
   218d0:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   218d2:	0223      	lsls	r3, r4, #8
   218d4:	d4f0      	bmi.n	218b8 <z_clock_set_timeout+0x90>
    p_reg->INTENSET = mask;
   218d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   218da:	4b03      	ldr	r3, [pc, #12]	; (218e8 <z_clock_set_timeout+0xc0>)
   218dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   218e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   218e2:	bf00      	nop
   218e4:	007fffff 	.word	0x007fffff
   218e8:	40015000 	.word	0x40015000
   218ec:	20023698 	.word	0x20023698
   218f0:	40015140 	.word	0x40015140
   218f4:	e000e100 	.word	0xe000e100

000218f8 <z_clock_elapsed>:
	__asm__ volatile(
   218f8:	f04f 0220 	mov.w	r2, #32
   218fc:	f3ef 8311 	mrs	r3, BASEPRI
   21900:	f382 8811 	msr	BASEPRI, r2
   21904:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   21908:	4a06      	ldr	r2, [pc, #24]	; (21924 <z_clock_elapsed+0x2c>)
   2190a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   2190e:	4a06      	ldr	r2, [pc, #24]	; (21928 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   21910:	6812      	ldr	r2, [r2, #0]
   21912:	1a80      	subs	r0, r0, r2
   21914:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   21918:	f383 8811 	msr	BASEPRI, r3
   2191c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   21920:	4770      	bx	lr
   21922:	bf00      	nop
   21924:	40015000 	.word	0x40015000
   21928:	20023698 	.word	0x20023698

0002192c <z_timer_cycle_get_32>:
	__asm__ volatile(
   2192c:	f04f 0320 	mov.w	r3, #32
   21930:	f3ef 8211 	mrs	r2, BASEPRI
   21934:	f383 8811 	msr	BASEPRI, r3
   21938:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   2193c:	4906      	ldr	r1, [pc, #24]	; (21958 <z_timer_cycle_get_32+0x2c>)
   2193e:	4b07      	ldr	r3, [pc, #28]	; (2195c <z_timer_cycle_get_32+0x30>)
   21940:	6808      	ldr	r0, [r1, #0]
   21942:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   21946:	f382 8811 	msr	BASEPRI, r2
   2194a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   2194e:	1a1b      	subs	r3, r3, r0
   21950:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   21954:	4418      	add	r0, r3
   21956:	4770      	bx	lr
   21958:	20023698 	.word	0x20023698
   2195c:	40015000 	.word	0x40015000

00021960 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   21960:	2303      	movs	r3, #3
static void _DoInit(void) {
   21962:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   21964:	4c10      	ldr	r4, [pc, #64]	; (219a8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   21966:	4a11      	ldr	r2, [pc, #68]	; (219ac <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   21968:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2196c:	4b10      	ldr	r3, [pc, #64]	; (219b0 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   2196e:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   21970:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   21972:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   21976:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   21978:	4a0e      	ldr	r2, [pc, #56]	; (219b4 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   2197a:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   2197c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   2197e:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   21980:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   21982:	490d      	ldr	r1, [pc, #52]	; (219b8 <_DoInit+0x58>)
   21984:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   21986:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   21988:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2198a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   2198c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   2198e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   21990:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   21992:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   21994:	f015 fe94 	bl	376c0 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   21998:	4620      	mov	r0, r4
   2199a:	4908      	ldr	r1, [pc, #32]	; (219bc <_DoInit+0x5c>)
   2199c:	f015 fe90 	bl	376c0 <strcpy>
  p->acID[6] = ' ';
   219a0:	2320      	movs	r3, #32
   219a2:	71a3      	strb	r3, [r4, #6]
}
   219a4:	bd10      	pop	{r4, pc}
   219a6:	bf00      	nop
   219a8:	2002369c 	.word	0x2002369c
   219ac:	0003aab6 	.word	0x0003aab6
   219b0:	2002bc7b 	.word	0x2002bc7b
   219b4:	2002bc6b 	.word	0x2002bc6b
   219b8:	0003aabf 	.word	0x0003aabf
   219bc:	0003aac3 	.word	0x0003aac3

000219c0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   219c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
   219c4:	f04f 0b18 	mov.w	fp, #24
   219c8:	4f22      	ldr	r7, [pc, #136]	; (21a54 <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   219ca:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   219cc:	fb0b 7200 	mla	r2, fp, r0, r7
   219d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   219d2:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   219d4:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   219d6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   219d8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   219da:	d834      	bhi.n	21a46 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   219dc:	f8d2 a020 	ldr.w	sl, [r2, #32]
   219e0:	ebaa 0905 	sub.w	r9, sl, r5
   219e4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   219e8:	4294      	cmp	r4, r2
   219ea:	d811      	bhi.n	21a10 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
   219ec:	f04f 0918 	mov.w	r9, #24
   219f0:	fb06 9309 	mla	r3, r6, r9, r9
   219f4:	443b      	add	r3, r7
   219f6:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   219f8:	4622      	mov	r2, r4
   219fa:	4641      	mov	r1, r8
   219fc:	4428      	add	r0, r5
   219fe:	f015 fd00 	bl	37402 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   21a02:	fb09 7606 	mla	r6, r9, r6, r7
   21a06:	442c      	add	r4, r5
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
      return 1;
   21a08:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   21a0a:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   21a0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   21a10:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   21a12:	429c      	cmp	r4, r3
   21a14:	d81b      	bhi.n	21a4e <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
   21a16:	fb00 bb0b 	mla	fp, r0, fp, fp
   21a1a:	44bb      	add	fp, r7
   21a1c:	f8db 0004 	ldr.w	r0, [fp, #4]
   21a20:	464a      	mov	r2, r9
   21a22:	4428      	add	r0, r5
   21a24:	442c      	add	r4, r5
   21a26:	f015 fcec 	bl	37402 <memcpy>
      if (NumBytes) {
   21a2a:	ebb4 040a 	subs.w	r4, r4, sl
   21a2e:	d006      	beq.n	21a3e <SEGGER_RTT_WriteSkipNoLock+0x7e>
   21a30:	4622      	mov	r2, r4
   21a32:	f8db 0004 	ldr.w	r0, [fp, #4]
   21a36:	eb08 0109 	add.w	r1, r8, r9
   21a3a:	f015 fce2 	bl	37402 <memcpy>
      pRing->WrOff = NumBytes;
   21a3e:	2018      	movs	r0, #24
   21a40:	fb00 7606 	mla	r6, r0, r6, r7
   21a44:	e7e0      	b.n	21a08 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   21a46:	3b01      	subs	r3, #1
   21a48:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   21a4a:	42a3      	cmp	r3, r4
   21a4c:	d2ce      	bcs.n	219ec <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   21a4e:	2000      	movs	r0, #0
   21a50:	e7dc      	b.n	21a0c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   21a52:	bf00      	nop
   21a54:	2002369c 	.word	0x2002369c

00021a58 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   21a5a:	2318      	movs	r3, #24
   21a5c:	4c17      	ldr	r4, [pc, #92]	; (21abc <SEGGER_RTT_WriteNoLock+0x64>)
   21a5e:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   21a62:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   21a66:	4425      	add	r5, r4
  switch (pRing->Flags) {
   21a68:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21a6a:	460f      	mov	r7, r1
  switch (pRing->Flags) {
   21a6c:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21a6e:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   21a70:	d00f      	beq.n	21a92 <SEGGER_RTT_WriteNoLock+0x3a>
   21a72:	2c02      	cmp	r4, #2
   21a74:	d01a      	beq.n	21aac <SEGGER_RTT_WriteNoLock+0x54>
   21a76:	b9f4      	cbnz	r4, 21ab6 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   21a78:	4628      	mov	r0, r5
   21a7a:	f013 fbb9 	bl	351f0 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   21a7e:	4286      	cmp	r6, r0
   21a80:	d805      	bhi.n	21a8e <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   21a82:	4632      	mov	r2, r6
   21a84:	4639      	mov	r1, r7
   21a86:	4628      	mov	r0, r5
   21a88:	f013 fbc0 	bl	3520c <_WriteNoCheck>
   21a8c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   21a8e:	4620      	mov	r0, r4
   21a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   21a92:	4628      	mov	r0, r5
   21a94:	f013 fbac 	bl	351f0 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   21a98:	4286      	cmp	r6, r0
   21a9a:	4634      	mov	r4, r6
   21a9c:	bf28      	it	cs
   21a9e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   21aa0:	4639      	mov	r1, r7
   21aa2:	4622      	mov	r2, r4
   21aa4:	4628      	mov	r0, r5
   21aa6:	f013 fbb1 	bl	3520c <_WriteNoCheck>
    break;
   21aaa:	e7f0      	b.n	21a8e <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   21aac:	4628      	mov	r0, r5
}
   21aae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   21ab2:	f013 bbc7 	b.w	35244 <_WriteBlocking>
  switch (pRing->Flags) {
   21ab6:	2400      	movs	r4, #0
  return Status;
   21ab8:	e7e9      	b.n	21a8e <SEGGER_RTT_WriteNoLock+0x36>
   21aba:	bf00      	nop
   21abc:	2002369c 	.word	0x2002369c

00021ac0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
   21ac0:	2218      	movs	r2, #24
   21ac2:	4b03      	ldr	r3, [pc, #12]	; (21ad0 <SEGGER_RTT_HasDataUp+0x10>)
   21ac4:	fb02 3000 	mla	r0, r2, r0, r3
   21ac8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  return pRing->WrOff - v;
   21aca:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   21acc:	1ac0      	subs	r0, r0, r3
   21ace:	4770      	bx	lr
   21ad0:	2002369c 	.word	0x2002369c

00021ad4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   21ad4:	4a0a      	ldr	r2, [pc, #40]	; (21b00 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   21ad6:	490b      	ldr	r1, [pc, #44]	; (21b04 <arch_swap+0x30>)
	_current->arch.basepri = key;
   21ad8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   21ada:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   21adc:	67d8      	str	r0, [r3, #124]	; 0x7c
	_current->arch.swap_return_value = _k_neg_eagain;
   21ade:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   21ae2:	4909      	ldr	r1, [pc, #36]	; (21b08 <arch_swap+0x34>)
   21ae4:	684b      	ldr	r3, [r1, #4]
   21ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   21aea:	604b      	str	r3, [r1, #4]
   21aec:	2300      	movs	r3, #0
   21aee:	f383 8811 	msr	BASEPRI, r3
   21af2:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   21af6:	6893      	ldr	r3, [r2, #8]
}
   21af8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   21afc:	4770      	bx	lr
   21afe:	bf00      	nop
   21b00:	20024098 	.word	0x20024098
   21b04:	00038e9c 	.word	0x00038e9c
   21b08:	e000ed00 	.word	0xe000ed00

00021b0c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   21b0c:	4929      	ldr	r1, [pc, #164]	; (21bb4 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   21b0e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   21b10:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   21b14:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   21b16:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   21b1a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   21b1e:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   21b22:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   21b26:	d004      	beq.n	21b32 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   21b28:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   21b2c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   21b30:	e007      	b.n	21b42 <out_fp_endif>

00021b32 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   21b32:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vstmia r0, {s16-s31}
   21b36:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   21b3a:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   21b3e:	f050 0004 	orrs.w	r0, r0, #4

00021b42 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   21b42:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   21b46:	2020      	movs	r0, #32
    msr BASEPRI, r0
   21b48:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   21b4c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   21b50:	4f19      	ldr	r7, [pc, #100]	; (21bb8 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   21b52:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   21b56:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   21b58:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   21b5a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   21b5c:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
   21b5e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   21b60:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   21b62:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   21b66:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   21b6a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   21b6e:	d105      	bne.n	21b7c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   21b70:	2300      	movs	r3, #0
    vmsr fpscr, r3
   21b72:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   21b76:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   21b7a:	e005      	b.n	21b88 <in_fp_endif>

00021b7c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   21b7c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   21b80:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vldmia r0, {s16-s31}
   21b84:	ec90 8a10 	vldmia	r0, {s16-s31}

00021b88 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   21b88:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   21b8c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   21b90:	f383 8814 	msr	CONTROL, r3
    isb
   21b94:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   21b98:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   21b9c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   21ba0:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   21ba4:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   21ba8:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   21baa:	f013 fb7f 	bl	352ac <configure_builtin_stack_guard>
    pop {r2, lr}
   21bae:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   21bb2:	4770      	bx	lr
    ldr r1, =_kernel
   21bb4:	20024098 	.word	0x20024098
    ldr v4, =_SCS_ICSR
   21bb8:	e000ed04 	.word	0xe000ed04

00021bbc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   21bbc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   21bc0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   21bc2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   21bc6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   21bca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   21bcc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   21bd0:	2902      	cmp	r1, #2
    beq _oops
   21bd2:	d0ff      	beq.n	21bd4 <_oops>

00021bd4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   21bd4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   21bd6:	f013 fb6d 	bl	352b4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   21bda:	bd01      	pop	{r0, pc}

00021bdc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   21bdc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   21bde:	2b00      	cmp	r3, #0
   21be0:	db08      	blt.n	21bf4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21be2:	2201      	movs	r2, #1
   21be4:	f000 001f 	and.w	r0, r0, #31
   21be8:	fa02 f000 	lsl.w	r0, r2, r0
   21bec:	4a02      	ldr	r2, [pc, #8]	; (21bf8 <arch_irq_enable+0x1c>)
   21bee:	095b      	lsrs	r3, r3, #5
   21bf0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   21bf4:	4770      	bx	lr
   21bf6:	bf00      	nop
   21bf8:	e000e100 	.word	0xe000e100

00021bfc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   21bfc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   21bfe:	2b00      	cmp	r3, #0
   21c00:	db0d      	blt.n	21c1e <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21c02:	2201      	movs	r2, #1
   21c04:	f000 001f 	and.w	r0, r0, #31
   21c08:	fa02 f000 	lsl.w	r0, r2, r0
   21c0c:	095b      	lsrs	r3, r3, #5
   21c0e:	4a04      	ldr	r2, [pc, #16]	; (21c20 <arch_irq_disable+0x24>)
   21c10:	3320      	adds	r3, #32
   21c12:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   21c16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21c1a:	f3bf 8f6f 	isb	sy
}
   21c1e:	4770      	bx	lr
   21c20:	e000e100 	.word	0xe000e100

00021c24 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   21c24:	4b05      	ldr	r3, [pc, #20]	; (21c3c <arch_irq_is_enabled+0x18>)
   21c26:	0942      	lsrs	r2, r0, #5
   21c28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   21c2c:	2301      	movs	r3, #1
   21c2e:	f000 001f 	and.w	r0, r0, #31
   21c32:	fa03 f000 	lsl.w	r0, r3, r0
}
   21c36:	4010      	ands	r0, r2
   21c38:	4770      	bx	lr
   21c3a:	bf00      	nop
   21c3c:	e000e100 	.word	0xe000e100

00021c40 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   21c40:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   21c42:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   21c44:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21c48:	bfac      	ite	ge
   21c4a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21c4e:	4b06      	ldrlt	r3, [pc, #24]	; (21c68 <z_arm_irq_priority_set+0x28>)
   21c50:	ea4f 1141 	mov.w	r1, r1, lsl #5
   21c54:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21c56:	bfab      	itete	ge
   21c58:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21c5c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21c60:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21c64:	5419      	strblt	r1, [r3, r0]
}
   21c66:	4770      	bx	lr
   21c68:	e000ed14 	.word	0xe000ed14

00021c6c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   21c6c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   21c6e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   21c70:	4b04      	ldr	r3, [pc, #16]	; (21c84 <_arch_isr_direct_pm+0x18>)
   21c72:	6a58      	ldr	r0, [r3, #36]	; 0x24
   21c74:	b118      	cbz	r0, 21c7e <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   21c76:	2200      	movs	r2, #0
   21c78:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
   21c7a:	f014 feb2 	bl	369e2 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   21c7e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   21c80:	bd08      	pop	{r3, pc}
   21c82:	bf00      	nop
   21c84:	20024098 	.word	0x20024098

00021c88 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   21c88:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   21c8c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   21c8e:	490c      	ldr	r1, [pc, #48]	; (21cc0 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   21c90:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   21c94:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   21c96:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   21c9a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   21c9e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   21ca0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   21ca4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   21ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   21cac:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   21cb0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   21cb2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   21cb4:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   21cb6:	67c3      	str	r3, [r0, #124]	; 0x7c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   21cb8:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   21cbc:	4770      	bx	lr
   21cbe:	bf00      	nop
   21cc0:	00033dd9 	.word	0x00033dd9

00021cc4 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   21cc4:	b508      	push	{r3, lr}
   21cc6:	4604      	mov	r4, r0
   21cc8:	460e      	mov	r6, r1
   21cca:	4615      	mov	r5, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   21ccc:	2300      	movs	r3, #0
   21cce:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   21cd2:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   21cd6:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   21cda:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   21cde:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   21ce2:	f000 fbd9 	bl	22498 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   21ce6:	4b09      	ldr	r3, [pc, #36]	; (21d0c <arch_switch_to_main_thread+0x48>)
   21ce8:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   21cea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   21cec:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   21cf0:	4628      	mov	r0, r5
   21cf2:	f386 8809 	msr	PSP, r6
   21cf6:	2100      	movs	r1, #0
   21cf8:	b663      	cpsie	if
   21cfa:	f381 8811 	msr	BASEPRI, r1
   21cfe:	f3bf 8f6f 	isb	sy
   21d02:	2200      	movs	r2, #0
   21d04:	2300      	movs	r3, #0
   21d06:	f012 f867 	bl	33dd8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   21d0a:	bf00      	nop
   21d0c:	20024098 	.word	0x20024098

00021d10 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   21d10:	4901      	ldr	r1, [pc, #4]	; (21d18 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   21d12:	2210      	movs	r2, #16
	str	r2, [r1]
   21d14:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   21d16:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   21d18:	e000ed10 	.word	0xe000ed10

00021d1c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   21d1c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   21d1e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   21d20:	f380 8811 	msr	BASEPRI, r0
	isb
   21d24:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   21d28:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   21d2c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   21d2e:	b662      	cpsie	i
	isb
   21d30:	f3bf 8f6f 	isb	sy

	bx	lr
   21d34:	4770      	bx	lr
   21d36:	bf00      	nop

00021d38 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   21d38:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   21d3a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   21d3c:	f381 8811 	msr	BASEPRI, r1

	wfe
   21d40:	bf20      	wfe

	msr	BASEPRI, r0
   21d42:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   21d46:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   21d48:	4770      	bx	lr
   21d4a:	bf00      	nop

00021d4c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21d50:	4606      	mov	r6, r0

	if (esf != NULL) {
   21d52:	460d      	mov	r5, r1
{
   21d54:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
   21d56:	2900      	cmp	r1, #0
   21d58:	d054      	beq.n	21e04 <z_arm_fatal_error+0xb8>
   21d5a:	4b2e      	ldr	r3, [pc, #184]	; (21e14 <z_arm_fatal_error+0xc8>)
   21d5c:	4c2e      	ldr	r4, [pc, #184]	; (21e18 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   21d5e:	482f      	ldr	r0, [pc, #188]	; (21e1c <z_arm_fatal_error+0xd0>)
   21d60:	1ae4      	subs	r4, r4, r3
   21d62:	08e4      	lsrs	r4, r4, #3
   21d64:	01a4      	lsls	r4, r4, #6
   21d66:	f044 0401 	orr.w	r4, r4, #1
   21d6a:	f8ad 4000 	strh.w	r4, [sp]
   21d6e:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   21d72:	6809      	ldr	r1, [r1, #0]
   21d74:	f012 fc07 	bl	34586 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   21d78:	f8ad 4000 	strh.w	r4, [sp]
   21d7c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   21d80:	68e9      	ldr	r1, [r5, #12]
   21d82:	4827      	ldr	r0, [pc, #156]	; (21e20 <z_arm_fatal_error+0xd4>)
   21d84:	f012 fbff 	bl	34586 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   21d88:	4622      	mov	r2, r4
   21d8a:	69e9      	ldr	r1, [r5, #28]
   21d8c:	4825      	ldr	r0, [pc, #148]	; (21e24 <z_arm_fatal_error+0xd8>)
   21d8e:	f012 fbca 	bl	34526 <log_1>
	for (int i = 0; i < 16; i += 4) {
   21d92:	46a8      	mov	r8, r5
   21d94:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   21d96:	f8df 9098 	ldr.w	r9, [pc, #152]	; 21e30 <z_arm_fatal_error+0xe4>
   21d9a:	edd8 7a08 	vldr	s15, [r8, #32]
   21d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   21da2:	edcd 7a03 	vstr	s15, [sp, #12]
   21da6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   21daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   21dae:	edcd 7a05 	vstr	s15, [sp, #20]
   21db2:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   21db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   21dba:	edcd 7a07 	vstr	s15, [sp, #28]
   21dbe:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   21dc2:	2208      	movs	r2, #8
   21dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   21dc8:	1c7b      	adds	r3, r7, #1
   21dca:	9304      	str	r3, [sp, #16]
   21dcc:	1cbb      	adds	r3, r7, #2
   21dce:	9306      	str	r3, [sp, #24]
   21dd0:	1cfb      	adds	r3, r7, #3
   21dd2:	9702      	str	r7, [sp, #8]
   21dd4:	9308      	str	r3, [sp, #32]
   21dd6:	4648      	mov	r0, r9
   21dd8:	4623      	mov	r3, r4
   21dda:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
   21dde:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   21de0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   21de4:	f012 fbee 	bl	345c4 <log_n>
	for (int i = 0; i < 16; i += 4) {
   21de8:	2f10      	cmp	r7, #16
   21dea:	f108 0810 	add.w	r8, r8, #16
   21dee:	d1d4      	bne.n	21d9a <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   21df0:	4622      	mov	r2, r4
   21df2:	6e29      	ldr	r1, [r5, #96]	; 0x60
   21df4:	480c      	ldr	r0, [pc, #48]	; (21e28 <z_arm_fatal_error+0xdc>)
   21df6:	f012 fb96 	bl	34526 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   21dfa:	4622      	mov	r2, r4
   21dfc:	69a9      	ldr	r1, [r5, #24]
   21dfe:	480b      	ldr	r0, [pc, #44]	; (21e2c <z_arm_fatal_error+0xe0>)
   21e00:	f012 fb91 	bl	34526 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   21e04:	4629      	mov	r1, r5
   21e06:	4630      	mov	r0, r6
   21e08:	f00f fb50 	bl	314ac <z_fatal_error>
}
   21e0c:	b00b      	add	sp, #44	; 0x2c
   21e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21e12:	bf00      	nop
   21e14:	0003831c 	.word	0x0003831c
   21e18:	000383dc 	.word	0x000383dc
   21e1c:	0003aaca 	.word	0x0003aaca
   21e20:	0003aaf9 	.word	0x0003aaf9
   21e24:	0003ab28 	.word	0x0003ab28
   21e28:	0003ab7a 	.word	0x0003ab7a
   21e2c:	0003ab89 	.word	0x0003ab89
   21e30:	0003ab37 	.word	0x0003ab37

00021e34 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   21e34:	bf30      	wfi
    b z_SysNmiOnReset
   21e36:	f7ff bffd 	b.w	21e34 <z_SysNmiOnReset>
   21e3a:	bf00      	nop

00021e3c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   21e3c:	4a14      	ldr	r2, [pc, #80]	; (21e90 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   21e3e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   21e40:	4b14      	ldr	r3, [pc, #80]	; (21e94 <z_arm_prep_c+0x58>)
   21e42:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   21e46:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   21e48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21e4c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   21e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   21e54:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   21e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   21e5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   21e60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   21e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   21e68:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   21e6c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   21e70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21e74:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   21e78:	2300      	movs	r3, #0
   21e7a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   21e7e:	f00f fbb3 	bl	315e8 <z_bss_zero>
	z_data_copy();
   21e82:	f00f fbbb 	bl	315fc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   21e86:	f000 fad9 	bl	2243c <z_arm_interrupt_init>
	z_cstart();
   21e8a:	f00f fbf5 	bl	31678 <z_cstart>
   21e8e:	bf00      	nop
   21e90:	00018200 	.word	0x00018200
   21e94:	e000ed00 	.word	0xe000ed00

00021e98 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   21e98:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   21e9a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   21e9c:	4a0b      	ldr	r2, [pc, #44]	; (21ecc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   21e9e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   21ea0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   21ea2:	bf1e      	ittt	ne
	movne	r1, #0
   21ea4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   21ea6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
   21ea8:	f014 fd9b 	blne	369e2 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   21eac:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   21eae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   21eb2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   21eb6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   21eba:	4905      	ldr	r1, [pc, #20]	; (21ed0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   21ebc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   21ebe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   21ec0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   21ec2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   21ec6:	4903      	ldr	r1, [pc, #12]	; (21ed4 <_isr_wrapper+0x3c>)
	bx r1
   21ec8:	4708      	bx	r1
   21eca:	0000      	.short	0x0000
	ldr r2, =_kernel
   21ecc:	20024098 	.word	0x20024098
	ldr r1, =_sw_isr_table
   21ed0:	00038108 	.word	0x00038108
	ldr r1, =z_arm_int_exit
   21ed4:	00022385 	.word	0x00022385

00021ed8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   21ed8:	2000      	movs	r0, #0
    msr CONTROL, r0
   21eda:	f380 8814 	msr	CONTROL, r0
    isb
   21ede:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   21ee2:	2000      	movs	r0, #0
    msr MSPLIM, r0
   21ee4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   21ee8:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   21eec:	f012 fae7 	bl	344be <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   21ef0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   21ef2:	490e      	ldr	r1, [pc, #56]	; (21f2c <__start+0x54>)
    str r0, [r1]
   21ef4:	6008      	str	r0, [r1, #0]
    dsb
   21ef6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   21efa:	480d      	ldr	r0, [pc, #52]	; (21f30 <__start+0x58>)
    msr msp, r0
   21efc:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   21f00:	f000 fa76 	bl	223f0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   21f04:	2020      	movs	r0, #32
    msr BASEPRI, r0
   21f06:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   21f0a:	480a      	ldr	r0, [pc, #40]	; (21f34 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   21f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   21f10:	1840      	adds	r0, r0, r1
    msr PSP, r0
   21f12:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   21f16:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   21f1a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   21f1c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   21f1e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   21f22:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   21f26:	f7ff ff89 	bl	21e3c <z_arm_prep_c>
   21f2a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   21f2c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   21f30:	20030898 	.word	0x20030898
    ldr r0, =z_interrupt_stacks
   21f34:	200309d8 	.word	0x200309d8

00021f38 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   21f38:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   21f3c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   21f40:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   21f42:	4672      	mov	r2, lr
	bl z_arm_fault
   21f44:	f000 f93e 	bl	221c4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   21f48:	bd01      	pop	{r0, pc}
   21f4a:	bf00      	nop

00021f4c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   21f4c:	b570      	push	{r4, r5, r6, lr}
   21f4e:	4b28      	ldr	r3, [pc, #160]	; (21ff0 <usage_fault.isra.0+0xa4>)
   21f50:	4c28      	ldr	r4, [pc, #160]	; (21ff4 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   21f52:	4d29      	ldr	r5, [pc, #164]	; (21ff8 <usage_fault.isra.0+0xac>)
   21f54:	1ae4      	subs	r4, r4, r3
   21f56:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   21f58:	01a4      	lsls	r4, r4, #6
   21f5a:	f044 0601 	orr.w	r6, r4, #1
   21f5e:	4631      	mov	r1, r6
   21f60:	4826      	ldr	r0, [pc, #152]	; (21ffc <usage_fault.isra.0+0xb0>)
   21f62:	f012 fad1 	bl	34508 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   21f66:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21f68:	0193      	lsls	r3, r2, #6
   21f6a:	d503      	bpl.n	21f74 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   21f6c:	4631      	mov	r1, r6
   21f6e:	4824      	ldr	r0, [pc, #144]	; (22000 <usage_fault.isra.0+0xb4>)
   21f70:	f012 faca 	bl	34508 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   21f74:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21f76:	01dd      	lsls	r5, r3, #7
   21f78:	d504      	bpl.n	21f84 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   21f7a:	4822      	ldr	r0, [pc, #136]	; (22004 <usage_fault.isra.0+0xb8>)
   21f7c:	f044 0101 	orr.w	r1, r4, #1
   21f80:	f012 fac2 	bl	34508 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   21f84:	4d1c      	ldr	r5, [pc, #112]	; (21ff8 <usage_fault.isra.0+0xac>)
   21f86:	6aae      	ldr	r6, [r5, #40]	; 0x28
   21f88:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   21f8c:	d005      	beq.n	21f9a <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   21f8e:	481e      	ldr	r0, [pc, #120]	; (22008 <usage_fault.isra.0+0xbc>)
   21f90:	f044 0101 	orr.w	r1, r4, #1
   21f94:	f012 fab8 	bl	34508 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   21f98:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   21f9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21f9c:	0318      	lsls	r0, r3, #12
   21f9e:	d504      	bpl.n	21faa <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   21fa0:	481a      	ldr	r0, [pc, #104]	; (2200c <usage_fault.isra.0+0xc0>)
   21fa2:	f044 0101 	orr.w	r1, r4, #1
   21fa6:	f012 faaf 	bl	34508 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   21faa:	4d13      	ldr	r5, [pc, #76]	; (21ff8 <usage_fault.isra.0+0xac>)
   21fac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21fae:	0351      	lsls	r1, r2, #13
   21fb0:	d504      	bpl.n	21fbc <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   21fb2:	4817      	ldr	r0, [pc, #92]	; (22010 <usage_fault.isra.0+0xc4>)
   21fb4:	f044 0101 	orr.w	r1, r4, #1
   21fb8:	f012 faa6 	bl	34508 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   21fbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21fbe:	039a      	lsls	r2, r3, #14
   21fc0:	d504      	bpl.n	21fcc <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   21fc2:	4814      	ldr	r0, [pc, #80]	; (22014 <usage_fault.isra.0+0xc8>)
   21fc4:	f044 0101 	orr.w	r1, r4, #1
   21fc8:	f012 fa9e 	bl	34508 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   21fcc:	4d0a      	ldr	r5, [pc, #40]	; (21ff8 <usage_fault.isra.0+0xac>)
   21fce:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21fd0:	03db      	lsls	r3, r3, #15
   21fd2:	d504      	bpl.n	21fde <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   21fd4:	4810      	ldr	r0, [pc, #64]	; (22018 <usage_fault.isra.0+0xcc>)
   21fd6:	f044 0101 	orr.w	r1, r4, #1
   21fda:	f012 fa95 	bl	34508 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   21fde:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   21fe0:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   21fe2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   21fe6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   21fea:	62ab      	str	r3, [r5, #40]	; 0x28
}
   21fec:	bd70      	pop	{r4, r5, r6, pc}
   21fee:	bf00      	nop
   21ff0:	0003831c 	.word	0x0003831c
   21ff4:	000383dc 	.word	0x000383dc
   21ff8:	e000ed00 	.word	0xe000ed00
   21ffc:	0003abb7 	.word	0x0003abb7
   22000:	0003abcf 	.word	0x0003abcf
   22004:	0003abe2 	.word	0x0003abe2
   22008:	0003abfc 	.word	0x0003abfc
   2200c:	0003ac26 	.word	0x0003ac26
   22010:	0003ac44 	.word	0x0003ac44
   22014:	0003ac69 	.word	0x0003ac69
   22018:	0003ac83 	.word	0x0003ac83

0002201c <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   2201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22020:	4b27      	ldr	r3, [pc, #156]	; (220c0 <mem_manage_fault.isra.0+0xa4>)
   22022:	4c28      	ldr	r4, [pc, #160]	; (220c4 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   22024:	4d28      	ldr	r5, [pc, #160]	; (220c8 <mem_manage_fault.isra.0+0xac>)
   22026:	1ae4      	subs	r4, r4, r3
   22028:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   2202a:	01a4      	lsls	r4, r4, #6
   2202c:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   22030:	4607      	mov	r7, r0
   22032:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   22034:	4825      	ldr	r0, [pc, #148]	; (220cc <mem_manage_fault.isra.0+0xb0>)
   22036:	4641      	mov	r1, r8
   22038:	f012 fa66 	bl	34508 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2203c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2203e:	06d1      	lsls	r1, r2, #27
   22040:	d503      	bpl.n	2204a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   22042:	4641      	mov	r1, r8
   22044:	4822      	ldr	r0, [pc, #136]	; (220d0 <mem_manage_fault.isra.0+0xb4>)
   22046:	f012 fa5f 	bl	34508 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2204a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2204c:	071a      	lsls	r2, r3, #28
   2204e:	d504      	bpl.n	2205a <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   22050:	4820      	ldr	r0, [pc, #128]	; (220d4 <mem_manage_fault.isra.0+0xb8>)
   22052:	f044 0101 	orr.w	r1, r4, #1
   22056:	f012 fa57 	bl	34508 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2205a:	4d1b      	ldr	r5, [pc, #108]	; (220c8 <mem_manage_fault.isra.0+0xac>)
   2205c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2205e:	079b      	lsls	r3, r3, #30
   22060:	d512      	bpl.n	22088 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   22062:	f044 0801 	orr.w	r8, r4, #1
   22066:	4641      	mov	r1, r8
   22068:	481b      	ldr	r0, [pc, #108]	; (220d8 <mem_manage_fault.isra.0+0xbc>)
   2206a:	f012 fa4d 	bl	34508 <log_0>
		mmfar = SCB->MMFAR;
   2206e:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   22070:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22072:	0618      	lsls	r0, r3, #24
   22074:	d508      	bpl.n	22088 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   22076:	4642      	mov	r2, r8
   22078:	4818      	ldr	r0, [pc, #96]	; (220dc <mem_manage_fault.isra.0+0xc0>)
   2207a:	f012 fa54 	bl	34526 <log_1>
			if (from_hard_fault) {
   2207e:	b11f      	cbz	r7, 22088 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   22080:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   22086:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   22088:	4d0f      	ldr	r5, [pc, #60]	; (220c8 <mem_manage_fault.isra.0+0xac>)
   2208a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2208c:	07d2      	lsls	r2, r2, #31
   2208e:	d504      	bpl.n	2209a <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   22090:	4813      	ldr	r0, [pc, #76]	; (220e0 <mem_manage_fault.isra.0+0xc4>)
   22092:	f044 0101 	orr.w	r1, r4, #1
   22096:	f012 fa37 	bl	34508 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2209a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2209c:	069b      	lsls	r3, r3, #26
   2209e:	d504      	bpl.n	220aa <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   220a0:	4810      	ldr	r0, [pc, #64]	; (220e4 <mem_manage_fault.isra.0+0xc8>)
   220a2:	f044 0101 	orr.w	r1, r4, #1
   220a6:	f012 fa2f 	bl	34508 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   220aa:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   220ac:	4b06      	ldr	r3, [pc, #24]	; (220c8 <mem_manage_fault.isra.0+0xac>)
   220ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   220b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   220b2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   220b6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   220b8:	7030      	strb	r0, [r6, #0]
}
   220ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   220be:	bf00      	nop
   220c0:	0003831c 	.word	0x0003831c
   220c4:	000383dc 	.word	0x000383dc
   220c8:	e000ed00 	.word	0xe000ed00
   220cc:	0003acae 	.word	0x0003acae
   220d0:	0003acc4 	.word	0x0003acc4
   220d4:	0003acf7 	.word	0x0003acf7
   220d8:	0003ad0a 	.word	0x0003ad0a
   220dc:	0003ad22 	.word	0x0003ad22
   220e0:	0003ad38 	.word	0x0003ad38
   220e4:	0003ad57 	.word	0x0003ad57

000220e8 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   220e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220ec:	4b2a      	ldr	r3, [pc, #168]	; (22198 <bus_fault.isra.0+0xb0>)
   220ee:	4c2b      	ldr	r4, [pc, #172]	; (2219c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   220f0:	4d2b      	ldr	r5, [pc, #172]	; (221a0 <bus_fault.isra.0+0xb8>)
   220f2:	1ae4      	subs	r4, r4, r3
   220f4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   220f6:	01a4      	lsls	r4, r4, #6
   220f8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   220fc:	4607      	mov	r7, r0
   220fe:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   22100:	4828      	ldr	r0, [pc, #160]	; (221a4 <bus_fault.isra.0+0xbc>)
   22102:	4641      	mov	r1, r8
   22104:	f012 fa00 	bl	34508 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   22108:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2210a:	04d1      	lsls	r1, r2, #19
   2210c:	d503      	bpl.n	22116 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   2210e:	4641      	mov	r1, r8
   22110:	4825      	ldr	r0, [pc, #148]	; (221a8 <bus_fault.isra.0+0xc0>)
   22112:	f012 f9f9 	bl	34508 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   22116:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22118:	051a      	lsls	r2, r3, #20
   2211a:	d504      	bpl.n	22126 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   2211c:	4823      	ldr	r0, [pc, #140]	; (221ac <bus_fault.isra.0+0xc4>)
   2211e:	f044 0101 	orr.w	r1, r4, #1
   22122:	f012 f9f1 	bl	34508 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   22126:	4d1e      	ldr	r5, [pc, #120]	; (221a0 <bus_fault.isra.0+0xb8>)
   22128:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2212a:	059b      	lsls	r3, r3, #22
   2212c:	d512      	bpl.n	22154 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   2212e:	f044 0801 	orr.w	r8, r4, #1
   22132:	4641      	mov	r1, r8
   22134:	481e      	ldr	r0, [pc, #120]	; (221b0 <bus_fault.isra.0+0xc8>)
   22136:	f012 f9e7 	bl	34508 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   2213a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2213c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2213e:	0418      	lsls	r0, r3, #16
   22140:	d508      	bpl.n	22154 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   22142:	4642      	mov	r2, r8
   22144:	481b      	ldr	r0, [pc, #108]	; (221b4 <bus_fault.isra.0+0xcc>)
   22146:	f012 f9ee 	bl	34526 <log_1>
			if (from_hard_fault) {
   2214a:	b11f      	cbz	r7, 22154 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2214c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2214e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   22152:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   22154:	4d12      	ldr	r5, [pc, #72]	; (221a0 <bus_fault.isra.0+0xb8>)
   22156:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22158:	0559      	lsls	r1, r3, #21
   2215a:	d504      	bpl.n	22166 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   2215c:	4816      	ldr	r0, [pc, #88]	; (221b8 <bus_fault.isra.0+0xd0>)
   2215e:	f044 0101 	orr.w	r1, r4, #1
   22162:	f012 f9d1 	bl	34508 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   22166:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22168:	05da      	lsls	r2, r3, #23
   2216a:	d50d      	bpl.n	22188 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   2216c:	4813      	ldr	r0, [pc, #76]	; (221bc <bus_fault.isra.0+0xd4>)
   2216e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   22172:	f012 f9c9 	bl	34508 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   22176:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   22178:	4a09      	ldr	r2, [pc, #36]	; (221a0 <bus_fault.isra.0+0xb8>)
   2217a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2217c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   22180:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   22182:	7030      	strb	r0, [r6, #0]
}
   22184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   22188:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2218a:	049b      	lsls	r3, r3, #18
   2218c:	d5f3      	bpl.n	22176 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   2218e:	480c      	ldr	r0, [pc, #48]	; (221c0 <bus_fault.isra.0+0xd8>)
   22190:	f044 0101 	orr.w	r1, r4, #1
   22194:	e7ed      	b.n	22172 <bus_fault.isra.0+0x8a>
   22196:	bf00      	nop
   22198:	0003831c 	.word	0x0003831c
   2219c:	000383dc 	.word	0x000383dc
   221a0:	e000ed00 	.word	0xe000ed00
   221a4:	0003ad86 	.word	0x0003ad86
   221a8:	0003ad9c 	.word	0x0003ad9c
   221ac:	0003acf7 	.word	0x0003acf7
   221b0:	0003adad 	.word	0x0003adad
   221b4:	0003adc6 	.word	0x0003adc6
   221b8:	0003addb 	.word	0x0003addb
   221bc:	0003adf6 	.word	0x0003adf6
   221c0:	0003ad57 	.word	0x0003ad57

000221c4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   221c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   221c8:	4b5a      	ldr	r3, [pc, #360]	; (22334 <z_arm_fault+0x170>)
{
   221ca:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   221cc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   221d0:	460f      	mov	r7, r1
   221d2:	4614      	mov	r4, r2
   221d4:	2500      	movs	r5, #0
   221d6:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   221d8:	f3c8 0608 	ubfx	r6, r8, #0, #9
   221dc:	f385 8811 	msr	BASEPRI, r5
   221e0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   221e4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   221e8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   221ec:	d123      	bne.n	22236 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   221ee:	07d0      	lsls	r0, r2, #31
   221f0:	d421      	bmi.n	22236 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   221f2:	0651      	lsls	r1, r2, #25
   221f4:	d403      	bmi.n	221fe <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   221f6:	0722      	lsls	r2, r4, #28
   221f8:	d40e      	bmi.n	22218 <z_arm_fault+0x54>
			*nested_exc = true;
   221fa:	2501      	movs	r5, #1
   221fc:	e00e      	b.n	2221c <z_arm_fault+0x58>
   221fe:	494e      	ldr	r1, [pc, #312]	; (22338 <z_arm_fault+0x174>)
   22200:	4b4e      	ldr	r3, [pc, #312]	; (2233c <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   22202:	484f      	ldr	r0, [pc, #316]	; (22340 <z_arm_fault+0x17c>)
   22204:	1a5b      	subs	r3, r3, r1
   22206:	08db      	lsrs	r3, r3, #3
   22208:	019b      	lsls	r3, r3, #6
   2220a:	f043 0101 	orr.w	r1, r3, #1
   2220e:	f012 f97b 	bl	34508 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   22212:	f014 0504 	ands.w	r5, r4, #4
   22216:	d001      	beq.n	2221c <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   22218:	46b9      	mov	r9, r7
	*nested_exc = false;
   2221a:	2500      	movs	r5, #0
	*recoverable = false;
   2221c:	2300      	movs	r3, #0
   2221e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   22222:	1ef3      	subs	r3, r6, #3
   22224:	2b09      	cmp	r3, #9
   22226:	d86c      	bhi.n	22302 <z_arm_fault+0x13e>
   22228:	e8df f003 	tbb	[pc, r3]
   2222c:	3e5e5a07 	.word	0x3e5e5a07
   22230:	6b6b6b6b 	.word	0x6b6b6b6b
   22234:	626b      	.short	0x626b
		return NULL;
   22236:	46a9      	mov	r9, r5
   22238:	e7f0      	b.n	2221c <z_arm_fault+0x58>
	*recoverable = false;
   2223a:	f04f 0800 	mov.w	r8, #0
   2223e:	4b3e      	ldr	r3, [pc, #248]	; (22338 <z_arm_fault+0x174>)
   22240:	4e3e      	ldr	r6, [pc, #248]	; (2233c <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   22242:	4840      	ldr	r0, [pc, #256]	; (22344 <z_arm_fault+0x180>)
   22244:	1af6      	subs	r6, r6, r3
   22246:	08f6      	lsrs	r6, r6, #3
   22248:	01b6      	lsls	r6, r6, #6
   2224a:	f046 0601 	orr.w	r6, r6, #1
   2224e:	4631      	mov	r1, r6
   22250:	f012 f95a 	bl	34508 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   22254:	4b37      	ldr	r3, [pc, #220]	; (22334 <z_arm_fault+0x170>)
	*recoverable = false;
   22256:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2225a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2225c:	f014 0402 	ands.w	r4, r4, #2
   22260:	d005      	beq.n	2226e <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   22262:	4631      	mov	r1, r6
   22264:	4838      	ldr	r0, [pc, #224]	; (22348 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   22266:	f012 f94f 	bl	34508 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2226a:	2400      	movs	r4, #0
}
   2226c:	e01f      	b.n	222ae <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22270:	005b      	lsls	r3, r3, #1
   22272:	d51c      	bpl.n	222ae <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   22274:	4631      	mov	r1, r6
   22276:	4835      	ldr	r0, [pc, #212]	; (2234c <z_arm_fault+0x188>)
   22278:	f012 f946 	bl	34508 <log_0>
		if (SCB_MMFSR != 0) {
   2227c:	4b34      	ldr	r3, [pc, #208]	; (22350 <z_arm_fault+0x18c>)
   2227e:	781b      	ldrb	r3, [r3, #0]
   22280:	b12b      	cbz	r3, 2228e <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   22282:	2001      	movs	r0, #1
   22284:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   22288:	f7ff fec8 	bl	2201c <mem_manage_fault.isra.0>
   2228c:	e00e      	b.n	222ac <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   2228e:	4b31      	ldr	r3, [pc, #196]	; (22354 <z_arm_fault+0x190>)
   22290:	781b      	ldrb	r3, [r3, #0]
   22292:	b12b      	cbz	r3, 222a0 <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   22294:	2001      	movs	r0, #1
   22296:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   2229a:	f7ff ff25 	bl	220e8 <bus_fault.isra.0>
   2229e:	e005      	b.n	222ac <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   222a0:	4b2d      	ldr	r3, [pc, #180]	; (22358 <z_arm_fault+0x194>)
   222a2:	881b      	ldrh	r3, [r3, #0]
   222a4:	b29b      	uxth	r3, r3
   222a6:	b113      	cbz	r3, 222ae <z_arm_fault+0xea>
			reason = usage_fault(esf);
   222a8:	f7ff fe50 	bl	21f4c <usage_fault.isra.0>
   222ac:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   222ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   222b2:	b993      	cbnz	r3, 222da <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   222b4:	2268      	movs	r2, #104	; 0x68
   222b6:	4649      	mov	r1, r9
   222b8:	a802      	add	r0, sp, #8
   222ba:	f015 f8a2 	bl	37402 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   222be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   222c0:	b39d      	cbz	r5, 2232a <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   222c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   222c6:	b922      	cbnz	r2, 222d2 <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   222c8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   222cc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   222d0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   222d2:	4620      	mov	r0, r4
   222d4:	a902      	add	r1, sp, #8
   222d6:	f7ff fd39 	bl	21d4c <z_arm_fatal_error>
}
   222da:	b01d      	add	sp, #116	; 0x74
   222dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   222e0:	2000      	movs	r0, #0
   222e2:	f10d 0107 	add.w	r1, sp, #7
   222e6:	e7cf      	b.n	22288 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   222e8:	2000      	movs	r0, #0
   222ea:	f10d 0107 	add.w	r1, sp, #7
   222ee:	e7d4      	b.n	2229a <z_arm_fault+0xd6>
   222f0:	4912      	ldr	r1, [pc, #72]	; (2233c <z_arm_fault+0x178>)
   222f2:	4b11      	ldr	r3, [pc, #68]	; (22338 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
   222f4:	4819      	ldr	r0, [pc, #100]	; (2235c <z_arm_fault+0x198>)
   222f6:	1ac9      	subs	r1, r1, r3
   222f8:	08c9      	lsrs	r1, r1, #3
   222fa:	0189      	lsls	r1, r1, #6
   222fc:	f041 0101 	orr.w	r1, r1, #1
   22300:	e7b1      	b.n	22266 <z_arm_fault+0xa2>
   22302:	4a0d      	ldr	r2, [pc, #52]	; (22338 <z_arm_fault+0x174>)
   22304:	4b0d      	ldr	r3, [pc, #52]	; (2233c <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
   22306:	4816      	ldr	r0, [pc, #88]	; (22360 <z_arm_fault+0x19c>)
   22308:	1a9b      	subs	r3, r3, r2
   2230a:	08db      	lsrs	r3, r3, #3
   2230c:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   22310:	ea4f 1383 	mov.w	r3, r3, lsl #6
   22314:	4913      	ldr	r1, [pc, #76]	; (22364 <z_arm_fault+0x1a0>)
   22316:	f043 0301 	orr.w	r3, r3, #1
   2231a:	bf18      	it	ne
   2231c:	4601      	movne	r1, r0
   2231e:	f1a6 0210 	sub.w	r2, r6, #16
   22322:	4811      	ldr	r0, [pc, #68]	; (22368 <z_arm_fault+0x1a4>)
   22324:	f012 f916 	bl	34554 <log_2>
   22328:	e79f      	b.n	2226a <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2232a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2232e:	f023 0301 	bic.w	r3, r3, #1
   22332:	e7cd      	b.n	222d0 <z_arm_fault+0x10c>
   22334:	e000ed00 	.word	0xe000ed00
   22338:	0003831c 	.word	0x0003831c
   2233c:	000383dc 	.word	0x000383dc
   22340:	0003ae0e 	.word	0x0003ae0e
   22344:	0003ae31 	.word	0x0003ae31
   22348:	0003ae48 	.word	0x0003ae48
   2234c:	0003ae69 	.word	0x0003ae69
   22350:	e000ed28 	.word	0xe000ed28
   22354:	e000ed29 	.word	0xe000ed29
   22358:	e000ed2a 	.word	0xe000ed2a
   2235c:	0003ae88 	.word	0x0003ae88
   22360:	0003aed3 	.word	0x0003aed3
   22364:	0003aebe 	.word	0x0003aebe
   22368:	0003aeec 	.word	0x0003aeec

0002236c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2236c:	4b04      	ldr	r3, [pc, #16]	; (22380 <z_arm_fault_init+0x14>)
   2236e:	695a      	ldr	r2, [r3, #20]
   22370:	f042 0210 	orr.w	r2, r2, #16
   22374:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   22376:	695a      	ldr	r2, [r3, #20]
   22378:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   2237c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2237e:	4770      	bx	lr
   22380:	e000ed00 	.word	0xe000ed00

00022384 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   22384:	4b07      	ldr	r3, [pc, #28]	; (223a4 <_EXIT_EXC+0xe>)

	ldr r1, [r3, #_kernel_offset_to_current]
   22386:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   22388:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   2238a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2238c:	d003      	beq.n	22396 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2238e:	4906      	ldr	r1, [pc, #24]	; (223a8 <_EXIT_EXC+0x12>)
	ldr r2, =_SCS_ICSR_PENDSV
   22390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   22394:	600a      	str	r2, [r1, #0]

00022396 <_EXIT_EXC>:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
	push {r0, lr}
   22396:	b501      	push	{r0, lr}
	bl z_check_stack_sentinel
   22398:	f010 f83c 	bl	32414 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r1}
	mov lr, r1
#else
	pop {r0, lr}
   2239c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   223a0:	4770      	bx	lr
   223a2:	0000      	.short	0x0000
	ldr r3, =_kernel
   223a4:	20024098 	.word	0x20024098
	ldr r1, =_SCS_ICSR
   223a8:	e000ed04 	.word	0xe000ed04

000223ac <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   223ac:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   223b0:	4905      	ldr	r1, [pc, #20]	; (223c8 <sys_arch_reboot+0x1c>)
   223b2:	4b06      	ldr	r3, [pc, #24]	; (223cc <sys_arch_reboot+0x20>)
   223b4:	68ca      	ldr	r2, [r1, #12]
   223b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   223ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   223bc:	60cb      	str	r3, [r1, #12]
   223be:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   223c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   223c4:	e7fd      	b.n	223c2 <sys_arch_reboot+0x16>
   223c6:	bf00      	nop
   223c8:	e000ed00 	.word	0xe000ed00
   223cc:	05fa0004 	.word	0x05fa0004

000223d0 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   223d0:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   223d2:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   223d4:	4a05      	ldr	r2, [pc, #20]	; (223ec <z_arm_clear_arm_mpu_config+0x1c>)
   223d6:	6811      	ldr	r1, [r2, #0]
	int num_regions =
   223d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
   223dc:	428b      	cmp	r3, r1
   223de:	d100      	bne.n	223e2 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   223e0:	4770      	bx	lr
  mpu->RNR = rnr;
   223e2:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   223e4:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   223e6:	3301      	adds	r3, #1
   223e8:	e7f8      	b.n	223dc <z_arm_clear_arm_mpu_config+0xc>
   223ea:	bf00      	nop
   223ec:	e000ed90 	.word	0xe000ed90

000223f0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   223f0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   223f2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   223f4:	2400      	movs	r4, #0
   223f6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   223fa:	f7ff ffe9 	bl	223d0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   223fe:	4a0e      	ldr	r2, [pc, #56]	; (22438 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
   22400:	4623      	mov	r3, r4
   22402:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
   22404:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22408:	f103 0020 	add.w	r0, r3, #32
   2240c:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   2240e:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   22410:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   22414:	d1f8      	bne.n	22408 <z_arm_init_arch_hw_at_boot+0x18>
   22416:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   22418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2241c:	f103 0260 	add.w	r2, r3, #96	; 0x60
   22420:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   22422:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   22424:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   22428:	d1f8      	bne.n	2241c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   2242a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   2242c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22430:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   22434:	bd10      	pop	{r4, pc}
   22436:	bf00      	nop
   22438:	e000e100 	.word	0xe000e100

0002243c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2243c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2243e:	2120      	movs	r1, #32
   22440:	4803      	ldr	r0, [pc, #12]	; (22450 <z_arm_interrupt_init+0x14>)
   22442:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   22444:	3301      	adds	r3, #1
   22446:	2b41      	cmp	r3, #65	; 0x41
   22448:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2244c:	d1f9      	bne.n	22442 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2244e:	4770      	bx	lr
   22450:	e000e100 	.word	0xe000e100

00022454 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   22454:	b508      	push	{r3, lr}
	if (_current == thread) {
   22456:	4b0e      	ldr	r3, [pc, #56]	; (22490 <z_impl_k_thread_abort+0x3c>)
   22458:	689b      	ldr	r3, [r3, #8]
   2245a:	4283      	cmp	r3, r0
   2245c:	d107      	bne.n	2246e <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2245e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   22462:	b193      	cbz	r3, 2248a <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22464:	4a0b      	ldr	r2, [pc, #44]	; (22494 <z_impl_k_thread_abort+0x40>)
   22466:	6853      	ldr	r3, [r2, #4]
   22468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2246c:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   2246e:	f00f fda1 	bl	31fb4 <z_thread_single_abort>
	__asm__ volatile(
   22472:	f04f 0320 	mov.w	r3, #32
   22476:	f3ef 8011 	mrs	r0, BASEPRI
   2247a:	f383 8811 	msr	BASEPRI, r3
   2247e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   22482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   22486:	f014 bc10 	b.w	36caa <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   2248a:	f010 f895 	bl	325b8 <z_self_abort>
   2248e:	bf00      	nop
   22490:	20024098 	.word	0x20024098
   22494:	e000ed00 	.word	0xe000ed00

00022498 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   22498:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   2249a:	4b0e      	ldr	r3, [pc, #56]	; (224d4 <z_arm_configure_static_mpu_regions+0x3c>)
{
   2249c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   2249e:	9302      	str	r3, [sp, #8]
   224a0:	4b0d      	ldr	r3, [pc, #52]	; (224d8 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   224a2:	4c0e      	ldr	r4, [pc, #56]	; (224dc <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   224a4:	9303      	str	r3, [sp, #12]
   224a6:	4b0e      	ldr	r3, [pc, #56]	; (224e0 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   224a8:	4a0e      	ldr	r2, [pc, #56]	; (224e4 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   224aa:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   224ac:	ab02      	add	r3, sp, #8
   224ae:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   224b0:	a801      	add	r0, sp, #4
   224b2:	4623      	mov	r3, r4
   224b4:	2101      	movs	r1, #1
   224b6:	f000 f937 	bl	22728 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   224ba:	2300      	movs	r3, #0
   224bc:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   224be:	4b0a      	ldr	r3, [pc, #40]	; (224e8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   224c0:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   224c2:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   224c4:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   224c6:	9305      	str	r3, [sp, #20]
   224c8:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   224ca:	f000 f937 	bl	2273c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   224ce:	b008      	add	sp, #32
   224d0:	bd10      	pop	{r4, pc}
   224d2:	bf00      	nop
   224d4:	20020000 	.word	0x20020000
   224d8:	00000000 	.word	0x00000000
   224dc:	20040000 	.word	0x20040000
   224e0:	00010006 	.word	0x00010006
   224e4:	20020000 	.word	0x20020000
   224e8:	20020900 	.word	0x20020900

000224ec <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   224ec:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   224ee:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   224f0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   224f2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   224f6:	f004 031f 	and.w	r3, r4, #31
   224fa:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   224fc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   224fe:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   22500:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   22504:	4904      	ldr	r1, [pc, #16]	; (22518 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   22506:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   2250a:	f043 0301 	orr.w	r3, r3, #1
   2250e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   22510:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   22512:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   22514:	bd10      	pop	{r4, pc}
   22516:	bf00      	nop
   22518:	e000ed90 	.word	0xe000ed90

0002251c <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   2251c:	280f      	cmp	r0, #15
{
   2251e:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   22520:	d90d      	bls.n	2253e <region_allocate_and_init+0x22>
   22522:	4b08      	ldr	r3, [pc, #32]	; (22544 <region_allocate_and_init+0x28>)
   22524:	4a08      	ldr	r2, [pc, #32]	; (22548 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   22526:	4601      	mov	r1, r0
   22528:	1ad2      	subs	r2, r2, r3
   2252a:	08d2      	lsrs	r2, r2, #3
   2252c:	0192      	lsls	r2, r2, #6
   2252e:	4807      	ldr	r0, [pc, #28]	; (2254c <region_allocate_and_init+0x30>)
   22530:	f042 0201 	orr.w	r2, r2, #1
   22534:	f011 fff7 	bl	34526 <log_1>
		return -EINVAL;
   22538:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   2253c:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   2253e:	f7ff ffd5 	bl	224ec <region_init>
	return index;
   22542:	e7fb      	b.n	2253c <region_allocate_and_init+0x20>
   22544:	0003831c 	.word	0x0003831c
   22548:	000383cc 	.word	0x000383cc
   2254c:	0003af03 	.word	0x0003af03

00022550 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   22550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22554:	4680      	mov	r8, r0
   22556:	4689      	mov	r9, r1
   22558:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2255a:	2700      	movs	r7, #0
	MPU->RNR = index;
   2255c:	4d51      	ldr	r5, [pc, #324]	; (226a4 <mpu_configure_regions_and_partition.constprop.0+0x154>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   2255e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   22560:	454f      	cmp	r7, r9
   22562:	da35      	bge.n	225d0 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   22564:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   22568:	f8d3 a004 	ldr.w	sl, [r3, #4]
   2256c:	f1ba 0f00 	cmp.w	sl, #0
   22570:	d04e      	beq.n	22610 <mpu_configure_regions_and_partition.constprop.0+0xc0>
		&&
   22572:	f1ba 0f1f 	cmp.w	sl, #31
   22576:	d91e      	bls.n	225b6 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   22578:	f01a 0f1f 	tst.w	sl, #31
   2257c:	d11b      	bne.n	225b6 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   2257e:	f8d3 b000 	ldr.w	fp, [r3]
		&&
   22582:	f01b 0f1f 	tst.w	fp, #31
   22586:	d116      	bne.n	225b6 <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   22588:	4658      	mov	r0, fp
   2258a:	f012 feb7 	bl	352fc <arm_cmse_mpu_region_get>
   2258e:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   22590:	eb0a 000b 	add.w	r0, sl, fp
   22594:	3801      	subs	r0, #1
   22596:	f012 feb1 	bl	352fc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   2259a:	4286      	cmp	r6, r0
   2259c:	d01c      	beq.n	225d8 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   2259e:	f06f 0615 	mvn.w	r6, #21
   225a2:	4a41      	ldr	r2, [pc, #260]	; (226a8 <mpu_configure_regions_and_partition.constprop.0+0x158>)
   225a4:	4b41      	ldr	r3, [pc, #260]	; (226ac <mpu_configure_regions_and_partition.constprop.0+0x15c>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   225a6:	4631      	mov	r1, r6
   225a8:	1ad2      	subs	r2, r2, r3
   225aa:	08d2      	lsrs	r2, r2, #3
   225ac:	0192      	lsls	r2, r2, #6
   225ae:	4840      	ldr	r0, [pc, #256]	; (226b0 <mpu_configure_regions_and_partition.constprop.0+0x160>)
   225b0:	f042 0201 	orr.w	r2, r2, #1
   225b4:	e008      	b.n	225c8 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   225b6:	4639      	mov	r1, r7
   225b8:	4a3b      	ldr	r2, [pc, #236]	; (226a8 <mpu_configure_regions_and_partition.constprop.0+0x158>)
   225ba:	4b3c      	ldr	r3, [pc, #240]	; (226ac <mpu_configure_regions_and_partition.constprop.0+0x15c>)
   225bc:	483d      	ldr	r0, [pc, #244]	; (226b4 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   225be:	1ad2      	subs	r2, r2, r3
   225c0:	08d2      	lsrs	r2, r2, #3
   225c2:	0192      	lsls	r2, r2, #6
   225c4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   225c8:	f011 ffad 	bl	34526 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   225cc:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   225d0:	4620      	mov	r0, r4
   225d2:	b005      	add	sp, #20
   225d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   225d8:	f116 0f16 	cmn.w	r6, #22
   225dc:	d0e1      	beq.n	225a2 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   225de:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   225e0:	42b3      	cmp	r3, r6
   225e2:	dbde      	blt.n	225a2 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   225e4:	60ae      	str	r6, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   225e6:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   225e8:	60ae      	str	r6, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   225ea:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   225ec:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   225f0:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   225f4:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   225f8:	e9d1 3200 	ldrd	r3, r2, [r1]
   225fc:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   225fe:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   22600:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   22604:	d116      	bne.n	22634 <mpu_configure_regions_and_partition.constprop.0+0xe4>
   22606:	45d3      	cmp	fp, sl
   22608:	d104      	bne.n	22614 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, regions[i]);
   2260a:	b2f0      	uxtb	r0, r6
   2260c:	f012 fe5d 	bl	352ca <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   22610:	3701      	adds	r7, #1
   22612:	e7a5      	b.n	22560 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   22614:	60ae      	str	r6, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   22616:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   22618:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2261c:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   22620:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   22622:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   22624:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   22626:	f012 fe50 	bl	352ca <mpu_configure_region>
			if (reg_index == -EINVAL) {
   2262a:	f110 0f16 	cmn.w	r0, #22
   2262e:	d0cd      	beq.n	225cc <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   22630:	1c44      	adds	r4, r0, #1
   22632:	e7ed      	b.n	22610 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RNR = index;
   22634:	60ae      	str	r6, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   22636:	692a      	ldr	r2, [r5, #16]
   22638:	3b01      	subs	r3, #1
   2263a:	f023 031f 	bic.w	r3, r3, #31
   2263e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   22642:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   22644:	45d3      	cmp	fp, sl
   22646:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   22648:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   2264a:	d0ec      	beq.n	22626 <mpu_configure_regions_and_partition.constprop.0+0xd6>
				mpu_configure_region(reg_index, regions[i]);
   2264c:	f012 fe3d 	bl	352ca <mpu_configure_region>
			if (reg_index == -EINVAL) {
   22650:	f110 0f16 	cmn.w	r0, #22
   22654:	d0ba      	beq.n	225cc <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   22656:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   22658:	68ea      	ldr	r2, [r5, #12]
   2265a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   2265e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   22662:	f362 0304 	bfi	r3, r2, #0, #5
   22666:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   2266a:	692b      	ldr	r3, [r5, #16]
   2266c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   22670:	085b      	lsrs	r3, r3, #1
   22672:	f363 1247 	bfi	r2, r3, #5, #3
   22676:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   2267a:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   2267e:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   22680:	e9d2 3200 	ldrd	r3, r2, [r2]
   22684:	4413      	add	r3, r2
   22686:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   22688:	f023 031f 	bic.w	r3, r3, #31
   2268c:	445b      	add	r3, fp
   2268e:	eba3 030a 	sub.w	r3, r3, sl
   22692:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   22696:	4669      	mov	r1, sp
   22698:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   2269a:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   2269c:	f7ff ff3e 	bl	2251c <region_allocate_and_init>
   226a0:	e7c3      	b.n	2262a <mpu_configure_regions_and_partition.constprop.0+0xda>
   226a2:	bf00      	nop
   226a4:	e000ed90 	.word	0xe000ed90
   226a8:	000383cc 	.word	0x000383cc
   226ac:	0003831c 	.word	0x0003831c
   226b0:	0003af4c 	.word	0x0003af4c
   226b4:	0003af29 	.word	0x0003af29

000226b8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   226b8:	2205      	movs	r2, #5
   226ba:	4b03      	ldr	r3, [pc, #12]	; (226c8 <arm_core_mpu_enable+0x10>)
   226bc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   226be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   226c2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   226c6:	4770      	bx	lr
   226c8:	e000ed90 	.word	0xe000ed90

000226cc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   226cc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   226d0:	2200      	movs	r2, #0
   226d2:	4b01      	ldr	r3, [pc, #4]	; (226d8 <arm_core_mpu_disable+0xc>)
   226d4:	605a      	str	r2, [r3, #4]
}
   226d6:	4770      	bx	lr
   226d8:	e000ed90 	.word	0xe000ed90

000226dc <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   226dc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   226de:	4c0e      	ldr	r4, [pc, #56]	; (22718 <arm_mpu_init+0x3c>)
   226e0:	6825      	ldr	r5, [r4, #0]
   226e2:	2d10      	cmp	r5, #16
   226e4:	d814      	bhi.n	22710 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   226e6:	f7ff fff1 	bl	226cc <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   226ea:	2000      	movs	r0, #0
	MPU->MAIR0 =
   226ec:	4b0b      	ldr	r3, [pc, #44]	; (2271c <arm_mpu_init+0x40>)
   226ee:	4a0c      	ldr	r2, [pc, #48]	; (22720 <arm_mpu_init+0x44>)
   226f0:	631a      	str	r2, [r3, #48]	; 0x30
   226f2:	4285      	cmp	r5, r0
   226f4:	d105      	bne.n	22702 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   226f6:	4b0b      	ldr	r3, [pc, #44]	; (22724 <arm_mpu_init+0x48>)
   226f8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   226fa:	f7ff ffdd 	bl	226b8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   226fe:	2000      	movs	r0, #0
}
   22700:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   22702:	6861      	ldr	r1, [r4, #4]
   22704:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   22708:	f7ff fef0 	bl	224ec <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2270c:	3001      	adds	r0, #1
   2270e:	e7f0      	b.n	226f2 <arm_mpu_init+0x16>
		return -1;
   22710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22714:	e7f4      	b.n	22700 <arm_mpu_init+0x24>
   22716:	bf00      	nop
   22718:	00038848 	.word	0x00038848
   2271c:	e000ed90 	.word	0xe000ed90
   22720:	0044ffaa 	.word	0x0044ffaa
   22724:	2002c07b 	.word	0x2002c07b

00022728 <arm_core_mpu_configure_static_mpu_regions>:
{
   22728:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2272a:	4c03      	ldr	r4, [pc, #12]	; (22738 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   2272c:	7822      	ldrb	r2, [r4, #0]
   2272e:	f7ff ff0f 	bl	22550 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   22732:	7020      	strb	r0, [r4, #0]
}
   22734:	bd10      	pop	{r4, pc}
   22736:	bf00      	nop
   22738:	2002c07b 	.word	0x2002c07b

0002273c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   2273c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22740:	4d26      	ldr	r5, [pc, #152]	; (227dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   22742:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   22744:	4606      	mov	r6, r0
   22746:	f04f 0800 	mov.w	r8, #0
   2274a:	46ab      	mov	fp, r5
	MPU->RNR = index;
   2274c:	4f24      	ldr	r7, [pc, #144]	; (227e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   2274e:	45d0      	cmp	r8, sl
   22750:	da1b      	bge.n	2278a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   22752:	f8d6 9004 	ldr.w	r9, [r6, #4]
   22756:	f1b9 0f00 	cmp.w	r9, #0
   2275a:	d039      	beq.n	227d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   2275c:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2275e:	4608      	mov	r0, r1
   22760:	9101      	str	r1, [sp, #4]
   22762:	f012 fdcb 	bl	352fc <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   22766:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   22768:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   2276a:	eb09 0001 	add.w	r0, r9, r1
   2276e:	3801      	subs	r0, #1
   22770:	f012 fdc4 	bl	352fc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   22774:	4284      	cmp	r4, r0
   22776:	f04f 0214 	mov.w	r2, #20
   2277a:	4b1a      	ldr	r3, [pc, #104]	; (227e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   2277c:	d008      	beq.n	22790 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   2277e:	f06f 0315 	mvn.w	r3, #21
   22782:	fb02 f808 	mul.w	r8, r2, r8
   22786:	f84b 3008 	str.w	r3, [fp, r8]
}
   2278a:	b003      	add	sp, #12
   2278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   22790:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   22794:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   22796:	d0f8      	beq.n	2278a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   22798:	7819      	ldrb	r1, [r3, #0]
   2279a:	42a1      	cmp	r1, r4
   2279c:	ddf5      	ble.n	2278a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   2279e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   227a2:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   227a4:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   227a6:	68fc      	ldr	r4, [r7, #12]
   227a8:	f100 0108 	add.w	r1, r0, #8
   227ac:	7b00      	ldrb	r0, [r0, #12]
   227ae:	f364 0004 	bfi	r0, r4, #0, #5
   227b2:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   227b4:	6938      	ldr	r0, [r7, #16]
   227b6:	790c      	ldrb	r4, [r1, #4]
   227b8:	0840      	lsrs	r0, r0, #1
   227ba:	f360 1447 	bfi	r4, r0, #5, #3
   227be:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   227c0:	68f9      	ldr	r1, [r7, #12]
   227c2:	f021 011f 	bic.w	r1, r1, #31
   227c6:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   227c8:	6939      	ldr	r1, [r7, #16]
   227ca:	f021 011f 	bic.w	r1, r1, #31
   227ce:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   227d0:	f108 0801 	add.w	r8, r8, #1
   227d4:	3514      	adds	r5, #20
   227d6:	360c      	adds	r6, #12
   227d8:	e7b9      	b.n	2274e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   227da:	bf00      	nop
   227dc:	20023744 	.word	0x20023744
   227e0:	e000ed90 	.word	0xe000ed90
   227e4:	2002c07b 	.word	0x2002c07b

000227e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   227e8:	4b01      	ldr	r3, [pc, #4]	; (227f0 <__stdout_hook_install+0x8>)
   227ea:	6018      	str	r0, [r3, #0]
}
   227ec:	4770      	bx	lr
   227ee:	bf00      	nop
   227f0:	2002019c 	.word	0x2002019c

000227f4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   227f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   227f6:	460d      	mov	r5, r1
   227f8:	4f09      	ldr	r7, [pc, #36]	; (22820 <z_impl_zephyr_write_stdout+0x2c>)
   227fa:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   227fc:	f1c0 0401 	rsb	r4, r0, #1
   22800:	19a3      	adds	r3, r4, r6
   22802:	429d      	cmp	r5, r3
   22804:	dc01      	bgt.n	2280a <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   22806:	4628      	mov	r0, r5
   22808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   2280a:	7873      	ldrb	r3, [r6, #1]
   2280c:	2b0a      	cmp	r3, #10
   2280e:	d102      	bne.n	22816 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   22810:	200d      	movs	r0, #13
   22812:	683b      	ldr	r3, [r7, #0]
   22814:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   22816:	683b      	ldr	r3, [r7, #0]
   22818:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   2281c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   2281e:	e7ef      	b.n	22800 <z_impl_zephyr_write_stdout+0xc>
   22820:	2002019c 	.word	0x2002019c

00022824 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   22824:	b510      	push	{r4, lr}
   22826:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   22828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2282c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22830:	480a      	ldr	r0, [pc, #40]	; (2285c <_sbrk+0x38>)
   22832:	f011 fac2 	bl	33dba <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   22836:	490a      	ldr	r1, [pc, #40]	; (22860 <_sbrk+0x3c>)
   22838:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   2283a:	18e0      	adds	r0, r4, r3
   2283c:	4c09      	ldr	r4, [pc, #36]	; (22864 <_sbrk+0x40>)
   2283e:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   22842:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   22846:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   22848:	bf2e      	itee	cs
   2284a:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   2284e:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   22850:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   22852:	4802      	ldr	r0, [pc, #8]	; (2285c <_sbrk+0x38>)
   22854:	f011 faac 	bl	33db0 <sys_sem_give>

	return ret;
}
   22858:	4620      	mov	r0, r4
   2285a:	bd10      	pop	{r4, pc}
   2285c:	20020864 	.word	0x20020864
   22860:	20023758 	.word	0x20023758
   22864:	200337f0 	.word	0x200337f0

00022868 <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   22868:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   2286a:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2286c:	4804      	ldr	r0, [pc, #16]	; (22880 <__chk_fail+0x18>)
   2286e:	f7ff ffc1 	bl	227f4 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   22872:	4040      	eors	r0, r0
   22874:	f380 8811 	msr	BASEPRI, r0
   22878:	f04f 0003 	mov.w	r0, #3
   2287c:	df02      	svc	2
	CODE_UNREACHABLE;
   2287e:	bf00      	nop
   22880:	0003af6f 	.word	0x0003af6f

00022884 <board_actinius_icarus_init>:
		LOG_INF("eSIM is selected");
	#endif
}

static int board_actinius_icarus_init(const struct device *dev)
{
   22884:	b538      	push	{r3, r4, r5, lr}
   22886:	4810      	ldr	r0, [pc, #64]	; (228c8 <board_actinius_icarus_init+0x44>)
   22888:	f00e fde2 	bl	31450 <z_impl_device_get_binding>
	if (!port) {
   2288c:	4c0f      	ldr	r4, [pc, #60]	; (228cc <board_actinius_icarus_init+0x48>)
   2288e:	4b10      	ldr	r3, [pc, #64]	; (228d0 <board_actinius_icarus_init+0x4c>)
   22890:	1ae4      	subs	r4, r4, r3
   22892:	08e4      	lsrs	r4, r4, #3
   22894:	01a4      	lsls	r4, r4, #6
   22896:	b930      	cbnz	r0, 228a6 <board_actinius_icarus_init+0x22>
		LOG_ERR("Could not get GPIO Device Binding");
   22898:	480e      	ldr	r0, [pc, #56]	; (228d4 <board_actinius_icarus_init+0x50>)
   2289a:	f044 0101 	orr.w	r1, r4, #1
		LOG_INF("External SIM is selected");
   2289e:	f011 fe33 	bl	34508 <log_0>
	ARG_UNUSED(dev);

	select_sim();

	return 0;
}
   228a2:	2000      	movs	r0, #0
   228a4:	bd38      	pop	{r3, r4, r5, pc}
	struct gpio_driver_data *data =
   228a6:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
   228a8:	6883      	ldr	r3, [r0, #8]
   228aa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   228ae:	2108      	movs	r1, #8
   228b0:	681b      	ldr	r3, [r3, #0]
   228b2:	4798      	blx	r3
	if (ret != 0) {
   228b4:	b918      	cbnz	r0, 228be <board_actinius_icarus_init+0x3a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   228b6:	682b      	ldr	r3, [r5, #0]
   228b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   228bc:	602b      	str	r3, [r5, #0]
		LOG_INF("External SIM is selected");
   228be:	4806      	ldr	r0, [pc, #24]	; (228d8 <board_actinius_icarus_init+0x54>)
   228c0:	f044 0103 	orr.w	r1, r4, #3
   228c4:	e7eb      	b.n	2289e <board_actinius_icarus_init+0x1a>
   228c6:	bf00      	nop
   228c8:	00038f02 	.word	0x00038f02
   228cc:	00038344 	.word	0x00038344
   228d0:	0003831c 	.word	0x0003831c
   228d4:	0003af9c 	.word	0x0003af9c
   228d8:	0003afbe 	.word	0x0003afbe

000228dc <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   228dc:	b538      	push	{r3, r4, r5, lr}
   228de:	4c08      	ldr	r4, [pc, #32]	; (22900 <net_if_init+0x24>)

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   228e0:	4d08      	ldr	r5, [pc, #32]	; (22904 <net_if_init+0x28>)
   228e2:	42ac      	cmp	r4, r5
   228e4:	4620      	mov	r0, r4
   228e6:	d300      	bcc.n	228ea <net_if_init+0xe>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   228e8:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   228ea:	6803      	ldr	r3, [r0, #0]
   228ec:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   228ee:	681b      	ldr	r3, [r3, #0]
   228f0:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   228f2:	2b00      	cmp	r3, #0
   228f4:	d0f5      	beq.n	228e2 <net_if_init+0x6>
   228f6:	681b      	ldr	r3, [r3, #0]
   228f8:	2b00      	cmp	r3, #0
   228fa:	d0f2      	beq.n	228e2 <net_if_init+0x6>
	api->init(iface);
   228fc:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   228fe:	e7f0      	b.n	228e2 <net_if_init+0x6>
   22900:	200208dc 	.word	0x200208dc
   22904:	200208e0 	.word	0x200208e0

00022908 <net_if_post_init>:

void net_if_post_init(void)
{
   22908:	b538      	push	{r3, r4, r5, lr}
   2290a:	4c08      	ldr	r4, [pc, #32]	; (2292c <net_if_post_init+0x24>)
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   2290c:	4d08      	ldr	r5, [pc, #32]	; (22930 <net_if_post_init+0x28>)
   2290e:	42ac      	cmp	r4, r5
   22910:	4620      	mov	r0, r4
   22912:	d300      	bcc.n	22916 <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   22914:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22916:	6803      	ldr	r3, [r0, #0]
   22918:	3404      	adds	r4, #4
   2291a:	330c      	adds	r3, #12
   2291c:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   22920:	071b      	lsls	r3, r3, #28
   22922:	d4f4      	bmi.n	2290e <net_if_post_init+0x6>
			net_if_up(iface);
   22924:	f012 fd12 	bl	3534c <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   22928:	e7f1      	b.n	2290e <net_if_post_init+0x6>
   2292a:	bf00      	nop
   2292c:	200208dc 	.word	0x200208dc
   22930:	200208e0 	.word	0x200208e0

00022934 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   22934:	2300      	movs	r3, #0
{
   22936:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   2293a:	2802      	cmp	r0, #2
{
   2293c:	b089      	sub	sp, #36	; 0x24
   2293e:	4607      	mov	r7, r0
   22940:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   22942:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   22946:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   22948:	d13e      	bne.n	229c8 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   2294a:	a806      	add	r0, sp, #24
   2294c:	9105      	str	r1, [sp, #20]
   2294e:	4601      	mov	r1, r0
{
   22950:	461a      	mov	r2, r3
   22952:	e006      	b.n	22962 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   22954:	780c      	ldrb	r4, [r1, #0]
   22956:	3201      	adds	r2, #1
   22958:	3401      	adds	r4, #1
   2295a:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   2295c:	b2d4      	uxtb	r4, r2
   2295e:	2c07      	cmp	r4, #7
   22960:	d804      	bhi.n	2296c <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   22962:	9c04      	ldr	r4, [sp, #16]
   22964:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   22968:	2c00      	cmp	r4, #0
   2296a:	d0f3      	beq.n	22954 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   2296c:	3301      	adds	r3, #1
   2296e:	2b08      	cmp	r3, #8
   22970:	f101 0101 	add.w	r1, r1, #1
   22974:	d1ec      	bne.n	22950 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   22976:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   2297a:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   2297e:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   22980:	f810 2b01 	ldrb.w	r2, [r0], #1
   22984:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   22986:	bf88      	it	hi
   22988:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   2298c:	f103 0301 	add.w	r3, r3, #1
   22990:	b2db      	uxtb	r3, r3
				pos = i;
   22992:	bf88      	it	hi
   22994:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   22996:	2b08      	cmp	r3, #8
   22998:	d1f2      	bne.n	22980 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   2299a:	469b      	mov	fp, r3
   2299c:	f1b9 0f01 	cmp.w	r9, #1
   229a0:	f04f 033a 	mov.w	r3, #58	; 0x3a
   229a4:	bf08      	it	eq
   229a6:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
   229aa:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   229ac:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   229ae:	4634      	mov	r4, r6
   229b0:	460d      	mov	r5, r1
   229b2:	455d      	cmp	r5, fp
   229b4:	db17      	blt.n	229e6 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   229b6:	42b4      	cmp	r4, r6
   229b8:	d008      	beq.n	229cc <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   229ba:	2300      	movs	r3, #0
   229bc:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   229be:	bf0c      	ite	eq
   229c0:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   229c4:	7023      	strbne	r3, [r4, #0]
   229c6:	e002      	b.n	229ce <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   229c8:	2801      	cmp	r0, #1
   229ca:	d004      	beq.n	229d6 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   229cc:	2600      	movs	r6, #0
	}

	return dst;
}
   229ce:	4630      	mov	r0, r6
   229d0:	b009      	add	sp, #36	; 0x24
   229d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   229d6:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   229d8:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   229dc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   229e0:	4681      	mov	r9, r0
		delim = '.';
   229e2:	9303      	str	r3, [sp, #12]
   229e4:	e7e2      	b.n	229ac <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   229e6:	f1bb 0f04 	cmp.w	fp, #4
   229ea:	d13b      	bne.n	22a64 <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   229ec:	9b04      	ldr	r3, [sp, #16]
   229ee:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   229f0:	b94a      	cbnz	r2, 22a06 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   229f2:	2330      	movs	r3, #48	; 0x30
   229f4:	4620      	mov	r0, r4
   229f6:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   229fa:	9b03      	ldr	r3, [sp, #12]
   229fc:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   229fe:	3501      	adds	r5, #1
   22a00:	4604      	mov	r4, r0
   22a02:	b2ed      	uxtb	r5, r5
   22a04:	e7d5      	b.n	229b2 <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   22a06:	f04f 0e09 	mov.w	lr, #9
   22a0a:	f04f 0a00 	mov.w	sl, #0
   22a0e:	e9cd 2401 	strd	r2, r4, [sp, #4]
   22a12:	483a      	ldr	r0, [pc, #232]	; (22afc <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   22a14:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   22a18:	45f2      	cmp	sl, lr
		value = value % divisor;
   22a1a:	fbbc f2f0 	udiv	r2, ip, r0
   22a1e:	fb00 c212 	mls	r2, r0, r2, ip
   22a22:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   22a24:	dc01      	bgt.n	22a2a <z_impl_net_addr_ntop+0xf6>
   22a26:	4584      	cmp	ip, r0
   22a28:	d308      	bcc.n	22a3c <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   22a2a:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   22a2e:	46f2      	mov	sl, lr
   22a30:	9b02      	ldr	r3, [sp, #8]
   22a32:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   22a36:	f803 cb01 	strb.w	ip, [r3], #1
   22a3a:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   22a3c:	220a      	movs	r2, #10
   22a3e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   22a42:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   22a46:	fbb0 f0f2 	udiv	r0, r0, r2
   22a4a:	d1e3      	bne.n	22a14 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   22a4c:	f04f 0200 	mov.w	r2, #0
   22a50:	9b02      	ldr	r3, [sp, #8]
   22a52:	701a      	strb	r2, [r3, #0]
	return buf - start;
   22a54:	1b1b      	subs	r3, r3, r4
			ptr += l;
   22a56:	b2da      	uxtb	r2, r3
   22a58:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   22a5c:	1c58      	adds	r0, r3, #1
   22a5e:	9b03      	ldr	r3, [sp, #12]
   22a60:	54a3      	strb	r3, [r4, r2]
			continue;
   22a62:	e7cc      	b.n	229fe <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   22a64:	45a8      	cmp	r8, r5
   22a66:	d110      	bne.n	22a8a <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   22a68:	b911      	cbnz	r1, 22a70 <z_impl_net_addr_ntop+0x13c>
   22a6a:	f1b8 0f00 	cmp.w	r8, #0
   22a6e:	d102      	bne.n	22a76 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   22a70:	233a      	movs	r3, #58	; 0x3a
   22a72:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   22a76:	233a      	movs	r3, #58	; 0x3a
   22a78:	4620      	mov	r0, r4
   22a7a:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   22a7e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   22a82:	441d      	add	r5, r3
			needcolon = false;
   22a84:	2100      	movs	r1, #0
			i += longest - 1U;
   22a86:	b2ed      	uxtb	r5, r5
			continue;
   22a88:	e7b9      	b.n	229fe <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   22a8a:	b111      	cbz	r1, 22a92 <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   22a8c:	233a      	movs	r3, #58	; 0x3a
   22a8e:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   22a92:	9b05      	ldr	r3, [sp, #20]
   22a94:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   22a98:	0219      	lsls	r1, r3, #8
   22a9a:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   22a9e:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   22aa2:	b20a      	sxth	r2, r1
		bh = value >> 8;
   22aa4:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   22aa8:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   22aac:	d016      	beq.n	22adc <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   22aae:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   22ab0:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   22ab2:	d90b      	bls.n	22acc <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   22ab4:	2300      	movs	r3, #0
   22ab6:	2261      	movs	r2, #97	; 0x61
   22ab8:	4620      	mov	r0, r4
   22aba:	f012 fc78 	bl	353ae <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   22abe:	2301      	movs	r3, #1
   22ac0:	2261      	movs	r2, #97	; 0x61
   22ac2:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   22ac4:	f012 fc73 	bl	353ae <net_byte_to_hex>
		needcolon = true;
   22ac8:	2101      	movs	r1, #1
   22aca:	e798      	b.n	229fe <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   22acc:	b25b      	sxtb	r3, r3
   22ace:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   22ad0:	bf94      	ite	ls
   22ad2:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   22ad4:	3357      	addhi	r3, #87	; 0x57
   22ad6:	1c60      	adds	r0, r4, #1
   22ad8:	7023      	strb	r3, [r4, #0]
   22ada:	e7f0      	b.n	22abe <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   22adc:	f1ba 0f0f 	cmp.w	sl, #15
   22ae0:	d903      	bls.n	22aea <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   22ae2:	2261      	movs	r2, #97	; 0x61
   22ae4:	4651      	mov	r1, sl
   22ae6:	4620      	mov	r0, r4
   22ae8:	e7ec      	b.n	22ac4 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   22aea:	b253      	sxtb	r3, r2
   22aec:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   22af0:	bf94      	ite	ls
   22af2:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   22af4:	3357      	addhi	r3, #87	; 0x57
   22af6:	1c60      	adds	r0, r4, #1
   22af8:	7023      	strb	r3, [r4, #0]
   22afa:	e7e5      	b.n	22ac8 <z_impl_net_addr_ntop+0x194>
   22afc:	3b9aca00 	.word	0x3b9aca00

00022b00 <http_parser_execute>:
}

size_t http_parser_execute(struct http_parser *parser,
			   const struct http_parser_settings *settings,
			   const char *data, size_t len)
{
   22b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b04:	b097      	sub	sp, #92	; 0x5c
   22b06:	930a      	str	r3, [sp, #40]	; 0x28
	const unsigned int lenient = parser->lenient_http_headers;
   22b08:	78c3      	ldrb	r3, [r0, #3]
{
   22b0a:	4690      	mov	r8, r2
	const unsigned int lenient = parser->lenient_http_headers;
   22b0c:	09db      	lsrs	r3, r3, #7
   22b0e:	930b      	str	r3, [sp, #44]	; 0x2c
	enum state p_state = (enum state) parser->state;
   22b10:	6803      	ldr	r3, [r0, #0]
{
   22b12:	4604      	mov	r4, r0
	enum state p_state = (enum state) parser->state;
   22b14:	f3c3 2286 	ubfx	r2, r3, #10, #7
   22b18:	4613      	mov	r3, r2
   22b1a:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
	const char *header_field_mark = 0;
   22b1e:	2200      	movs	r2, #0
	const char *header_value_mark = 0;
   22b20:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
	const char *body_mark = 0;
   22b24:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
	const char *status_mark = 0;
   22b28:	9215      	str	r2, [sp, #84]	; 0x54
	*parsed = 0;
   22b2a:	9210      	str	r2, [sp, #64]	; 0x40
	if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   22b2c:	7dc2      	ldrb	r2, [r0, #23]
{
   22b2e:	4689      	mov	r9, r1
	if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   22b30:	0652      	lsls	r2, r2, #25
   22b32:	d10a      	bne.n	22b4a <http_parser_execute+0x4a>
	if (len == 0) {
   22b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22b36:	b9fa      	cbnz	r2, 22b78 <http_parser_execute+0x78>
		switch (CURRENT_STATE()) {
   22b38:	2b12      	cmp	r3, #18
   22b3a:	d80a      	bhi.n	22b52 <http_parser_execute+0x52>
   22b3c:	b1b3      	cbz	r3, 22b6c <http_parser_execute+0x6c>
   22b3e:	2201      	movs	r2, #1
   22b40:	fa02 f303 	lsl.w	r3, r2, r3
   22b44:	4acf      	ldr	r2, [pc, #828]	; (22e84 <http_parser_execute+0x384>)
   22b46:	401a      	ands	r2, r3
   22b48:	b182      	cbz	r2, 22b6c <http_parser_execute+0x6c>
	size_t parsed;

	parser_execute(parser, settings, data, len, &parsed);
	return parsed;
   22b4a:	9810      	ldr	r0, [sp, #64]	; 0x40
}
   22b4c:	b017      	add	sp, #92	; 0x5c
   22b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (CURRENT_STATE()) {
   22b52:	2b3d      	cmp	r3, #61	; 0x3d
   22b54:	d10a      	bne.n	22b6c <http_parser_execute+0x6c>
			cb_notify(parser, &p_state,
   22b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22b58:	9301      	str	r3, [sp, #4]
   22b5a:	ab10      	add	r3, sp, #64	; 0x40
   22b5c:	9300      	str	r3, [sp, #0]
   22b5e:	69ca      	ldr	r2, [r1, #28]
   22b60:	2307      	movs	r3, #7
   22b62:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
   22b66:	f012 fcff 	bl	35568 <cb_notify>
			return 0;
   22b6a:	e7ee      	b.n	22b4a <http_parser_execute+0x4a>
			SET_ERRNO(HPE_INVALID_EOF_STATE);
   22b6c:	220b      	movs	r2, #11
   22b6e:	7de3      	ldrb	r3, [r4, #23]
   22b70:	f362 0306 	bfi	r3, r2, #0, #7
   22b74:	75e3      	strb	r3, [r4, #23]
			return 1;
   22b76:	e7e8      	b.n	22b4a <http_parser_execute+0x4a>
	if (CURRENT_STATE() == s_header_field) {
   22b78:	2b2b      	cmp	r3, #43	; 0x2b
   22b7a:	d103      	bne.n	22b84 <http_parser_execute+0x84>
		header_field_mark = data;
   22b7c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
	switch (CURRENT_STATE()) {
   22b80:	4646      	mov	r6, r8
   22b82:	e113      	b.n	22dac <http_parser_execute+0x2ac>
	if (CURRENT_STATE() == s_header_value) {
   22b84:	2b30      	cmp	r3, #48	; 0x30
   22b86:	d009      	beq.n	22b9c <http_parser_execute+0x9c>
	switch (CURRENT_STATE()) {
   22b88:	2b10      	cmp	r3, #16
   22b8a:	d00a      	beq.n	22ba2 <http_parser_execute+0xa2>
   22b8c:	336b      	adds	r3, #107	; 0x6b
   22b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22b92:	2b0a      	cmp	r3, #10
   22b94:	d8f4      	bhi.n	22b80 <http_parser_execute+0x80>
		url_mark = data;
   22b96:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
		break;
   22b9a:	e7f1      	b.n	22b80 <http_parser_execute+0x80>
		header_value_mark = data;
   22b9c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
	switch (CURRENT_STATE()) {
   22ba0:	e7ee      	b.n	22b80 <http_parser_execute+0x80>
		status_mark = data;
   22ba2:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
		break;
   22ba6:	e7eb      	b.n	22b80 <http_parser_execute+0x80>
		if (PARSING_HEADER(CURRENT_STATE())) {
   22ba8:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
		ch = *p;
   22bac:	7835      	ldrb	r5, [r6, #0]
		if (PARSING_HEADER(CURRENT_STATE())) {
   22bae:	2b38      	cmp	r3, #56	; 0x38
   22bb0:	d85b      	bhi.n	22c6a <http_parser_execute+0x16a>
	parser->nread += bytes;
   22bb2:	6863      	ldr	r3, [r4, #4]
   22bb4:	3301      	adds	r3, #1
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   22bb6:	f5b3 3fa0 	cmp.w	r3, #81920	; 0x14000
	parser->nread += bytes;
   22bba:	6063      	str	r3, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   22bbc:	d955      	bls.n	22c6a <http_parser_execute+0x16a>
		parser->http_errno = HPE_HEADER_OVERFLOW;
   22bbe:	220c      	movs	r2, #12
   22bc0:	7de3      	ldrb	r3, [r4, #23]
			SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
   22bc2:	f362 0306 	bfi	r3, r2, #0, #7
   22bc6:	75e3      	strb	r3, [r4, #23]
			goto error;
   22bc8:	e022      	b.n	22c10 <http_parser_execute+0x110>
   22bca:	4631      	mov	r1, r6
			parser->header_state = h_upgrade;
   22bcc:	f04f 0c0c 	mov.w	ip, #12
			parser->header_state = h_transfer_encoding;
   22bd0:	200b      	movs	r0, #11
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
   22bd2:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 22e8c <http_parser_execute+0x38c>
		if (cond1 || c != CONNECTION[parser->index]) {
   22bd6:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 22e90 <http_parser_execute+0x390>
			for (; p != data + len; p++) {
   22bda:	458b      	cmp	fp, r1
   22bdc:	460f      	mov	r7, r1
   22bde:	d009      	beq.n	22bf4 <http_parser_execute+0xf4>
				ch = *p;
   22be0:	f811 5b01 	ldrb.w	r5, [r1], #1
				c = TOKEN(ch);
   22be4:	2d20      	cmp	r5, #32
   22be6:	f000 83e1 	beq.w	233ac <http_parser_execute+0x8ac>
   22bea:	4ba7      	ldr	r3, [pc, #668]	; (22e88 <http_parser_execute+0x388>)
   22bec:	5d5b      	ldrb	r3, [r3, r5]
				if (!c) {
   22bee:	2b00      	cmp	r3, #0
   22bf0:	f040 83dd 	bne.w	233ae <http_parser_execute+0x8ae>
	parser->nread += bytes;
   22bf4:	6863      	ldr	r3, [r4, #4]
			rc = count_header_size(parser, p - start);
   22bf6:	1bbe      	subs	r6, r7, r6
	parser->nread += bytes;
   22bf8:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   22bfa:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   22bfe:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   22c00:	f240 8488 	bls.w	23514 <http_parser_execute+0xa14>
		parser->http_errno = HPE_HEADER_OVERFLOW;
   22c04:	220c      	movs	r2, #12
   22c06:	7de3      	ldrb	r3, [r4, #23]
			goto error;
   22c08:	463e      	mov	r6, r7
			SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   22c0a:	f362 0306 	bfi	r3, r2, #0, #7
   22c0e:	75e3      	strb	r3, [r4, #23]
	if (HTTP_PARSER_ERRNO(parser) == HPE_OK) {
   22c10:	7de3      	ldrb	r3, [r4, #23]
   22c12:	065a      	lsls	r2, r3, #25
   22c14:	f040 872a 	bne.w	23a6c <http_parser_execute+0xf6c>
		SET_ERRNO(HPE_UNKNOWN);
   22c18:	2220      	movs	r2, #32
   22c1a:	f000 bf3d 	b.w	23a98 <http_parser_execute+0xf98>
			if (LIKELY(ch == CR || ch == LF)) {
   22c1e:	2d0d      	cmp	r5, #13
   22c20:	f000 80c3 	beq.w	22daa <http_parser_execute+0x2aa>
   22c24:	2d0a      	cmp	r5, #10
   22c26:	f000 80c0 	beq.w	22daa <http_parser_execute+0x2aa>
			SET_ERRNO(HPE_CLOSED_CONNECTION);
   22c2a:	220d      	movs	r2, #13
   22c2c:	7de3      	ldrb	r3, [r4, #23]
   22c2e:	e7c8      	b.n	22bc2 <http_parser_execute+0xc2>
			if (ch == CR || ch == LF) {
   22c30:	2d0d      	cmp	r5, #13
   22c32:	f000 80ba 	beq.w	22daa <http_parser_execute+0x2aa>
   22c36:	2d0a      	cmp	r5, #10
   22c38:	f000 80b7 	beq.w	22daa <http_parser_execute+0x2aa>
			parser->flags = 0U;
   22c3c:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   22c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			parser->flags = 0U;
   22c42:	f36f 0389 	bfc	r3, #2, #8
   22c46:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   22c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (ch == 'H') {
   22c4c:	2d48      	cmp	r5, #72	; 0x48
			parser->content_length = ULLONG_MAX;
   22c4e:	e9c4 2302 	strd	r2, r3, [r4, #8]
			if (ch == 'H') {
   22c52:	d103      	bne.n	22c5c <http_parser_execute+0x15c>
				UPDATE_STATE(s_res_or_resp_H);
   22c54:	2303      	movs	r3, #3
			UPDATE_STATE(s_req_method);
   22c56:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
   22c5a:	e12c      	b.n	22eb6 <http_parser_execute+0x3b6>
				parser->type = HTTP_REQUEST;
   22c5c:	7823      	ldrb	r3, [r4, #0]
   22c5e:	f36f 0301 	bfc	r3, #0, #2
   22c62:	7023      	strb	r3, [r4, #0]
				UPDATE_STATE(s_start_req);
   22c64:	2312      	movs	r3, #18
				UPDATE_STATE(s_headers_almost_done);
   22c66:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		switch (CURRENT_STATE()) {
   22c6a:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
   22c6e:	1e43      	subs	r3, r0, #1
   22c70:	2b3d      	cmp	r3, #61	; 0x3d
   22c72:	f201 80b7 	bhi.w	23de4 <http_parser_execute+0x12e4>
   22c76:	a201      	add	r2, pc, #4	; (adr r2, 22c7c <http_parser_execute+0x17c>)
   22c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22c7c:	00022c1f 	.word	0x00022c1f
   22c80:	00022c31 	.word	0x00022c31
   22c84:	00022d75 	.word	0x00022d75
   22c88:	00022e95 	.word	0x00022e95
   22c8c:	00022d83 	.word	0x00022d83
   22c90:	00022ed9 	.word	0x00022ed9
   22c94:	00022edd 	.word	0x00022edd
   22c98:	00022ee1 	.word	0x00022ee1
   22c9c:	00022ee5 	.word	0x00022ee5
   22ca0:	00022ef9 	.word	0x00022ef9
   22ca4:	00022f03 	.word	0x00022f03
   22ca8:	00022f11 	.word	0x00022f11
   22cac:	00022f1b 	.word	0x00022f1b
   22cb0:	00022f37 	.word	0x00022f37
   22cb4:	00022f6d 	.word	0x00022f6d
   22cb8:	00022f8f 	.word	0x00022f8f
   22cbc:	00022f4b 	.word	0x00022f4b
   22cc0:	00022fd1 	.word	0x00022fd1
   22cc4:	000230a9 	.word	0x000230a9
   22cc8:	000231cb 	.word	0x000231cb
   22ccc:	000231f9 	.word	0x000231f9
   22cd0:	000231f9 	.word	0x000231f9
   22cd4:	000231f9 	.word	0x000231f9
   22cd8:	000231f9 	.word	0x000231f9
   22cdc:	00023215 	.word	0x00023215
   22ce0:	00023215 	.word	0x00023215
   22ce4:	00023215 	.word	0x00023215
   22ce8:	00023215 	.word	0x00023215
   22cec:	00023215 	.word	0x00023215
   22cf0:	00023215 	.word	0x00023215
   22cf4:	00023215 	.word	0x00023215
   22cf8:	0002325f 	.word	0x0002325f
   22cfc:	0002326f 	.word	0x0002326f
   22d00:	00023273 	.word	0x00023273
   22d04:	00023277 	.word	0x00023277
   22d08:	0002327b 	.word	0x0002327b
   22d0c:	0002327f 	.word	0x0002327f
   22d10:	00023291 	.word	0x00023291
   22d14:	000232bd 	.word	0x000232bd
   22d18:	000232cd 	.word	0x000232cd
   22d1c:	000232f7 	.word	0x000232f7
   22d20:	00023303 	.word	0x00023303
   22d24:	00022bcb 	.word	0x00022bcb
   22d28:	00023561 	.word	0x00023561
   22d2c:	00023579 	.word	0x00023579
   22d30:	0002397f 	.word	0x0002397f
   22d34:	0002357d 	.word	0x0002357d
   22d38:	00023629 	.word	0x00023629
   22d3c:	00023939 	.word	0x00023939
   22d40:	0002392d 	.word	0x0002392d
   22d44:	00023caf 	.word	0x00023caf
   22d48:	00023ccd 	.word	0x00023ccd
   22d4c:	00023d1d 	.word	0x00023d1d
   22d50:	00023d25 	.word	0x00023d25
   22d54:	000239f1 	.word	0x000239f1
   22d58:	00023ab9 	.word	0x00023ab9
   22d5c:	00023d59 	.word	0x00023d59
   22d60:	00023d9b 	.word	0x00023d9b
   22d64:	00023dc5 	.word	0x00023dc5
   22d68:	00023bed 	.word	0x00023bed
   22d6c:	00023c51 	.word	0x00023c51
   22d70:	00023c61 	.word	0x00023c61
			if (ch == 'T') {
   22d74:	2d54      	cmp	r5, #84	; 0x54
   22d76:	d106      	bne.n	22d86 <http_parser_execute+0x286>
				parser->type = HTTP_RESPONSE;
   22d78:	2201      	movs	r2, #1
   22d7a:	7823      	ldrb	r3, [r4, #0]
   22d7c:	f362 0301 	bfi	r3, r2, #0, #2
   22d80:	7023      	strb	r3, [r4, #0]
			UPDATE_STATE(s_res_HT);
   22d82:	2306      	movs	r3, #6
   22d84:	e00f      	b.n	22da6 <http_parser_execute+0x2a6>
				if (UNLIKELY(ch != 'E')) {
   22d86:	2d45      	cmp	r5, #69	; 0x45
   22d88:	d002      	beq.n	22d90 <http_parser_execute+0x290>
				SET_ERRNO(HPE_INVALID_CONSTANT);
   22d8a:	221c      	movs	r2, #28
   22d8c:	7de3      	ldrb	r3, [r4, #23]
   22d8e:	e718      	b.n	22bc2 <http_parser_execute+0xc2>
				parser->method = HTTP_HEAD;
   22d90:	2302      	movs	r3, #2
   22d92:	75a3      	strb	r3, [r4, #22]
				parser->type = HTTP_REQUEST;
   22d94:	6823      	ldr	r3, [r4, #0]
   22d96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
   22d9a:	f023 0303 	bic.w	r3, r3, #3
   22d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   22da2:	6023      	str	r3, [r4, #0]
				UPDATE_STATE(s_req_method);
   22da4:	2313      	movs	r3, #19
   22da6:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	for (p = data; p != data + len; p++) {
   22daa:	3601      	adds	r6, #1
   22dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22dae:	eb08 0b03 	add.w	fp, r8, r3
   22db2:	45b3      	cmp	fp, r6
   22db4:	f47f aef8 	bne.w	22ba8 <http_parser_execute+0xa8>
		     p - header_field_mark);
   22db8:	9b11      	ldr	r3, [sp, #68]	; 0x44
		     &p_state, parsed, p - data, &header_field_mark,
   22dba:	eba6 0708 	sub.w	r7, r6, r8
		     p - header_field_mark);
   22dbe:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_header_field, HPE_CB_header_field,
   22dc0:	9303      	str	r3, [sp, #12]
   22dc2:	ad10      	add	r5, sp, #64	; 0x40
   22dc4:	ab11      	add	r3, sp, #68	; 0x44
   22dc6:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22dca:	2203      	movs	r2, #3
   22dcc:	4620      	mov	r0, r4
   22dce:	f8d9 100c 	ldr.w	r1, [r9, #12]
   22dd2:	9500      	str	r5, [sp, #0]
   22dd4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   22dd8:	f012 fbe7 	bl	355aa <cb_data>
	if (rc != 0) {
   22ddc:	2800      	cmp	r0, #0
   22dde:	f47f aeb4 	bne.w	22b4a <http_parser_execute+0x4a>
		     p - header_value_mark);
   22de2:	9b12      	ldr	r3, [sp, #72]	; 0x48
	rc = cb_data(parser, settings->on_header_value, HPE_CB_header_value,
   22de4:	2204      	movs	r2, #4
		     p - header_value_mark);
   22de6:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_header_value, HPE_CB_header_value,
   22de8:	9303      	str	r3, [sp, #12]
   22dea:	ab12      	add	r3, sp, #72	; 0x48
   22dec:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22df0:	4620      	mov	r0, r4
   22df2:	f8d9 1010 	ldr.w	r1, [r9, #16]
   22df6:	9500      	str	r5, [sp, #0]
   22df8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   22dfc:	f012 fbd5 	bl	355aa <cb_data>
	if (rc != 0) {
   22e00:	2800      	cmp	r0, #0
   22e02:	f47f aea2 	bne.w	22b4a <http_parser_execute+0x4a>
		     p - data, &url_mark, p - url_mark);
   22e06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	rc = cb_data(parser, settings->on_url, HPE_CB_url, &p_state, parsed,
   22e08:	2202      	movs	r2, #2
		     p - data, &url_mark, p - url_mark);
   22e0a:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_url, HPE_CB_url, &p_state, parsed,
   22e0c:	9303      	str	r3, [sp, #12]
   22e0e:	ab13      	add	r3, sp, #76	; 0x4c
   22e10:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22e14:	4620      	mov	r0, r4
   22e16:	f8d9 1004 	ldr.w	r1, [r9, #4]
   22e1a:	9500      	str	r5, [sp, #0]
   22e1c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   22e20:	f012 fbc3 	bl	355aa <cb_data>
	if (rc != 0) {
   22e24:	2800      	cmp	r0, #0
   22e26:	f47f ae90 	bne.w	22b4a <http_parser_execute+0x4a>
		     p - data, &body_mark, p - body_mark);
   22e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
	rc = cb_data(parser, settings->on_body, HPE_CB_body, &p_state, parsed,
   22e2c:	2206      	movs	r2, #6
		     p - data, &body_mark, p - body_mark);
   22e2e:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_body, HPE_CB_body, &p_state, parsed,
   22e30:	9303      	str	r3, [sp, #12]
   22e32:	ab14      	add	r3, sp, #80	; 0x50
   22e34:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22e38:	4620      	mov	r0, r4
   22e3a:	f8d9 1018 	ldr.w	r1, [r9, #24]
   22e3e:	9500      	str	r5, [sp, #0]
   22e40:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   22e44:	f012 fbb1 	bl	355aa <cb_data>
	if (rc != 0) {
   22e48:	2800      	cmp	r0, #0
   22e4a:	f47f ae7e 	bne.w	22b4a <http_parser_execute+0x4a>
		     parsed, p - data, &status_mark, p - status_mark);
   22e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
	rc = cb_data(parser, settings->on_status, HPE_CB_status, &p_state,
   22e50:	2208      	movs	r2, #8
		     parsed, p - data, &status_mark, p - status_mark);
   22e52:	1af6      	subs	r6, r6, r3
	rc = cb_data(parser, settings->on_status, HPE_CB_status, &p_state,
   22e54:	ab15      	add	r3, sp, #84	; 0x54
   22e56:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22e5a:	4620      	mov	r0, r4
   22e5c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   22e60:	9603      	str	r6, [sp, #12]
   22e62:	9500      	str	r5, [sp, #0]
   22e64:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   22e68:	f012 fb9f 	bl	355aa <cb_data>
	if (rc != 0) {
   22e6c:	2800      	cmp	r0, #0
   22e6e:	f47f ae6c 	bne.w	22b4a <http_parser_execute+0x4a>
	parser->state = CURRENT_STATE();
   22e72:	6823      	ldr	r3, [r4, #0]
   22e74:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
   22e78:	f362 2390 	bfi	r3, r2, #10, #7
   22e7c:	6023      	str	r3, [r4, #0]
	*parsed = len;
   22e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22e80:	9310      	str	r3, [sp, #64]	; 0x40
	return 0;
   22e82:	e662      	b.n	22b4a <http_parser_execute+0x4a>
   22e84:	00040016 	.word	0x00040016
   22e88:	0003b670 	.word	0x0003b670
   22e8c:	0003afed 	.word	0x0003afed
   22e90:	0003978b 	.word	0x0003978b
			parser->flags = 0U;
   22e94:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   22e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			parser->flags = 0U;
   22e9a:	f36f 0389 	bfc	r3, #2, #8
   22e9e:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   22ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22ea4:	2d0d      	cmp	r5, #13
   22ea6:	e9c4 2302 	strd	r2, r3, [r4, #8]
			switch (ch) {
   22eaa:	d004      	beq.n	22eb6 <http_parser_execute+0x3b6>
   22eac:	2d48      	cmp	r5, #72	; 0x48
   22eae:	d011      	beq.n	22ed4 <http_parser_execute+0x3d4>
   22eb0:	2d0a      	cmp	r5, #10
   22eb2:	f47f af6a 	bne.w	22d8a <http_parser_execute+0x28a>
				       p - data + 1);
   22eb6:	eba6 0308 	sub.w	r3, r6, r8
   22eba:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   22ebc:	9301      	str	r3, [sp, #4]
   22ebe:	ab10      	add	r3, sp, #64	; 0x40
   22ec0:	9300      	str	r3, [sp, #0]
   22ec2:	2301      	movs	r3, #1
   22ec4:	f8d9 2000 	ldr.w	r2, [r9]
			rc = cb_notify(parser, &p_state,
   22ec8:	4620      	mov	r0, r4
   22eca:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
   22ece:	f012 fb4b 	bl	35568 <cb_notify>
   22ed2:	e074      	b.n	22fbe <http_parser_execute+0x4be>
				UPDATE_STATE(s_res_H);
   22ed4:	2305      	movs	r3, #5
   22ed6:	e6be      	b.n	22c56 <http_parser_execute+0x156>
			UPDATE_STATE(s_res_HTT);
   22ed8:	2307      	movs	r3, #7
   22eda:	e764      	b.n	22da6 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_res_HTTP);
   22edc:	2308      	movs	r3, #8
   22ede:	e762      	b.n	22da6 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_res_first_http_major);
   22ee0:	2309      	movs	r3, #9
   22ee2:	e760      	b.n	22da6 <http_parser_execute+0x2a6>
			if (UNLIKELY(ch < '0' || ch > '9')) {
   22ee4:	3d30      	subs	r5, #48	; 0x30
   22ee6:	b2eb      	uxtb	r3, r5
   22ee8:	2b09      	cmp	r3, #9
   22eea:	d902      	bls.n	22ef2 <http_parser_execute+0x3f2>
				SET_ERRNO(HPE_INVALID_VERSION);
   22eec:	220e      	movs	r2, #14
   22eee:	7de3      	ldrb	r3, [r4, #23]
   22ef0:	e667      	b.n	22bc2 <http_parser_execute+0xc2>
			UPDATE_STATE(s_res_http_major);
   22ef2:	230a      	movs	r3, #10
			parser->http_major = ch - '0';
   22ef4:	8225      	strh	r5, [r4, #16]
			UPDATE_STATE(s_res_http_major);
   22ef6:	e756      	b.n	22da6 <http_parser_execute+0x2a6>
			if (ch == '.') {
   22ef8:	2d2e      	cmp	r5, #46	; 0x2e
   22efa:	f040 81cd 	bne.w	23298 <http_parser_execute+0x798>
				UPDATE_STATE(s_res_first_http_minor);
   22efe:	230b      	movs	r3, #11
   22f00:	e751      	b.n	22da6 <http_parser_execute+0x2a6>
			if (UNLIKELY(!IS_NUM(ch))) {
   22f02:	3d30      	subs	r5, #48	; 0x30
   22f04:	b2eb      	uxtb	r3, r5
   22f06:	2b09      	cmp	r3, #9
   22f08:	d8f0      	bhi.n	22eec <http_parser_execute+0x3ec>
			UPDATE_STATE(s_res_http_minor);
   22f0a:	230c      	movs	r3, #12
			parser->http_minor = ch - '0';
   22f0c:	8265      	strh	r5, [r4, #18]
			UPDATE_STATE(s_res_http_minor);
   22f0e:	e74a      	b.n	22da6 <http_parser_execute+0x2a6>
			if (ch == ' ') {
   22f10:	2d20      	cmp	r5, #32
   22f12:	f040 81e2 	bne.w	232da <http_parser_execute+0x7da>
				UPDATE_STATE(s_res_first_status_code);
   22f16:	230d      	movs	r3, #13
   22f18:	e745      	b.n	22da6 <http_parser_execute+0x2a6>
			if (!IS_NUM(ch)) {
   22f1a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   22f1e:	b2da      	uxtb	r2, r3
   22f20:	2a09      	cmp	r2, #9
   22f22:	d905      	bls.n	22f30 <http_parser_execute+0x430>
				if (ch == ' ') {
   22f24:	2d20      	cmp	r5, #32
   22f26:	f43f af40 	beq.w	22daa <http_parser_execute+0x2aa>
				SET_ERRNO(HPE_INVALID_STATUS);
   22f2a:	220f      	movs	r2, #15
   22f2c:	7de3      	ldrb	r3, [r4, #23]
   22f2e:	e648      	b.n	22bc2 <http_parser_execute+0xc2>
			parser->status_code = ch - '0';
   22f30:	82a3      	strh	r3, [r4, #20]
			UPDATE_STATE(s_res_status_code);
   22f32:	230e      	movs	r3, #14
   22f34:	e737      	b.n	22da6 <http_parser_execute+0x2a6>
			if (!IS_NUM(ch)) {
   22f36:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   22f3a:	2b09      	cmp	r3, #9
   22f3c:	d909      	bls.n	22f52 <http_parser_execute+0x452>
				switch (ch) {
   22f3e:	2d0d      	cmp	r5, #13
   22f40:	d016      	beq.n	22f70 <http_parser_execute+0x470>
   22f42:	2d20      	cmp	r5, #32
   22f44:	d003      	beq.n	22f4e <http_parser_execute+0x44e>
   22f46:	2d0a      	cmp	r5, #10
   22f48:	d1ef      	bne.n	22f2a <http_parser_execute+0x42a>
			UPDATE_STATE(s_header_field_start);
   22f4a:	232a      	movs	r3, #42	; 0x2a
   22f4c:	e72b      	b.n	22da6 <http_parser_execute+0x2a6>
					UPDATE_STATE(s_res_status_start);
   22f4e:	230f      	movs	r3, #15
   22f50:	e729      	b.n	22da6 <http_parser_execute+0x2a6>
			parser->status_code *= 10U;
   22f52:	8aa3      	ldrh	r3, [r4, #20]
   22f54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->status_code += ch - '0';
   22f58:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   22f5c:	3d30      	subs	r5, #48	; 0x30
   22f5e:	b2ad      	uxth	r5, r5
			if (UNLIKELY(parser->status_code > 999)) {
   22f60:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
			parser->status_code += ch - '0';
   22f64:	82a5      	strh	r5, [r4, #20]
			if (UNLIKELY(parser->status_code > 999)) {
   22f66:	f4ff af20 	bcc.w	22daa <http_parser_execute+0x2aa>
   22f6a:	e7de      	b.n	22f2a <http_parser_execute+0x42a>
			if (ch == CR) {
   22f6c:	2d0d      	cmp	r5, #13
   22f6e:	d101      	bne.n	22f74 <http_parser_execute+0x474>
				UPDATE_STATE(s_res_line_almost_done);
   22f70:	2311      	movs	r3, #17
   22f72:	e718      	b.n	22da6 <http_parser_execute+0x2a6>
			if (ch == LF) {
   22f74:	2d0a      	cmp	r5, #10
   22f76:	d0e8      	beq.n	22f4a <http_parser_execute+0x44a>
			MARK(status);
   22f78:	9b15      	ldr	r3, [sp, #84]	; 0x54
   22f7a:	b903      	cbnz	r3, 22f7e <http_parser_execute+0x47e>
   22f7c:	9615      	str	r6, [sp, #84]	; 0x54
			UPDATE_STATE(s_res_status);
   22f7e:	2310      	movs	r3, #16
   22f80:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			parser->index = 0U;
   22f84:	78e3      	ldrb	r3, [r4, #3]
   22f86:	f36f 0306 	bfc	r3, #0, #7
			++parser->index;
   22f8a:	70e3      	strb	r3, [r4, #3]
			break;
   22f8c:	e70d      	b.n	22daa <http_parser_execute+0x2aa>
			if (ch == CR) {
   22f8e:	2d0d      	cmp	r5, #13
   22f90:	d119      	bne.n	22fc6 <http_parser_execute+0x4c6>
				UPDATE_STATE(s_res_line_almost_done);
   22f92:	2311      	movs	r3, #17
				rc = cb_data(parser, settings->on_status,
   22f94:	2208      	movs	r2, #8
				UPDATE_STATE(s_header_field_start);
   22f96:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
					     p - status_mark);
   22f9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
				rc = cb_data(parser, settings->on_status,
   22f9c:	f8d9 1008 	ldr.w	r1, [r9, #8]
					     p - status_mark);
   22fa0:	1af3      	subs	r3, r6, r3
				rc = cb_data(parser, settings->on_status,
   22fa2:	9303      	str	r3, [sp, #12]
   22fa4:	ab15      	add	r3, sp, #84	; 0x54
   22fa6:	9302      	str	r3, [sp, #8]
					     p - data + 1, &status_mark,
   22fa8:	eba6 0308 	sub.w	r3, r6, r8
   22fac:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_status,
   22fae:	9301      	str	r3, [sp, #4]
   22fb0:	ab10      	add	r3, sp, #64	; 0x40
   22fb2:	9300      	str	r3, [sp, #0]
   22fb4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   22fb8:	4620      	mov	r0, r4
   22fba:	f012 faf6 	bl	355aa <cb_data>
			if (rc != 0) {
   22fbe:	2800      	cmp	r0, #0
   22fc0:	f43f aef3 	beq.w	22daa <http_parser_execute+0x2aa>
   22fc4:	e5c1      	b.n	22b4a <http_parser_execute+0x4a>
			if (ch == LF) {
   22fc6:	2d0a      	cmp	r5, #10
   22fc8:	f47f aeef 	bne.w	22daa <http_parser_execute+0x2aa>
				UPDATE_STATE(s_header_field_start);
   22fcc:	232a      	movs	r3, #42	; 0x2a
   22fce:	e7e1      	b.n	22f94 <http_parser_execute+0x494>
			if (ch == CR || ch == LF) {
   22fd0:	2d0d      	cmp	r5, #13
   22fd2:	f43f aeea 	beq.w	22daa <http_parser_execute+0x2aa>
   22fd6:	2d0a      	cmp	r5, #10
   22fd8:	f43f aee7 	beq.w	22daa <http_parser_execute+0x2aa>
			parser->flags = 0U;
   22fdc:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   22fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			parser->flags = 0U;
   22fe2:	f36f 0389 	bfc	r3, #2, #8
   22fe6:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   22fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22fec:	e9c4 2302 	strd	r2, r3, [r4, #8]
			if (UNLIKELY(!IS_ALPHA(ch))) {
   22ff0:	f045 0320 	orr.w	r3, r5, #32
   22ff4:	3b61      	subs	r3, #97	; 0x61
   22ff6:	2b19      	cmp	r3, #25
   22ff8:	d902      	bls.n	23000 <http_parser_execute+0x500>
				SET_ERRNO(HPE_INVALID_METHOD);
   22ffa:	2210      	movs	r2, #16
   22ffc:	7de3      	ldrb	r3, [r4, #23]
   22ffe:	e5e0      	b.n	22bc2 <http_parser_execute+0xc2>
			parser->method = (enum http_method) 0;
   23000:	2300      	movs	r3, #0
   23002:	75a3      	strb	r3, [r4, #22]
			parser->index = 1U;
   23004:	2301      	movs	r3, #1
   23006:	78e2      	ldrb	r2, [r4, #3]
   23008:	3d41      	subs	r5, #65	; 0x41
   2300a:	f363 0206 	bfi	r2, r3, #0, #7
   2300e:	70e2      	strb	r2, [r4, #3]
			switch (ch) {
   23010:	2d14      	cmp	r5, #20
   23012:	d8f2      	bhi.n	22ffa <http_parser_execute+0x4fa>
   23014:	a201      	add	r2, pc, #4	; (adr r2, 2301c <http_parser_execute+0x51c>)
   23016:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
   2301a:	bf00      	nop
   2301c:	00023071 	.word	0x00023071
   23020:	00023079 	.word	0x00023079
   23024:	0002307d 	.word	0x0002307d
   23028:	00023075 	.word	0x00023075
   2302c:	00022ffb 	.word	0x00022ffb
   23030:	00022ffb 	.word	0x00022ffb
   23034:	00023073 	.word	0x00023073
   23038:	00023081 	.word	0x00023081
   2303c:	00022ffb 	.word	0x00022ffb
   23040:	00022ffb 	.word	0x00022ffb
   23044:	00022ffb 	.word	0x00022ffb
   23048:	00023085 	.word	0x00023085
   2304c:	00023089 	.word	0x00023089
   23050:	0002308d 	.word	0x0002308d
   23054:	00023091 	.word	0x00023091
   23058:	00023095 	.word	0x00023095
   2305c:	00022ffb 	.word	0x00022ffb
   23060:	00023099 	.word	0x00023099
   23064:	0002309d 	.word	0x0002309d
   23068:	000230a1 	.word	0x000230a1
   2306c:	000230a5 	.word	0x000230a5
				parser->method = HTTP_ACL;
   23070:	2313      	movs	r3, #19
				parser->method = HTTP_UNLOCK;
   23072:	75a3      	strb	r3, [r4, #22]
			UPDATE_STATE(s_req_method);
   23074:	2313      	movs	r3, #19
   23076:	e5ee      	b.n	22c56 <http_parser_execute+0x156>
				parser->method = HTTP_BIND;
   23078:	2310      	movs	r3, #16
   2307a:	e7fa      	b.n	23072 <http_parser_execute+0x572>
				parser->method = HTTP_CONNECT;
   2307c:	2305      	movs	r3, #5
   2307e:	e7f8      	b.n	23072 <http_parser_execute+0x572>
				parser->method = HTTP_HEAD;
   23080:	2302      	movs	r3, #2
   23082:	e7f6      	b.n	23072 <http_parser_execute+0x572>
				parser->method = HTTP_LOCK; /* or LINK */
   23084:	2309      	movs	r3, #9
   23086:	e7f4      	b.n	23072 <http_parser_execute+0x572>
				parser->method =
   23088:	230a      	movs	r3, #10
   2308a:	e7f2      	b.n	23072 <http_parser_execute+0x572>
				parser->method = HTTP_NOTIFY;
   2308c:	2319      	movs	r3, #25
   2308e:	e7f0      	b.n	23072 <http_parser_execute+0x572>
				parser->method = HTTP_OPTIONS;
   23090:	2306      	movs	r3, #6
   23092:	e7ee      	b.n	23072 <http_parser_execute+0x572>
				parser->method = HTTP_POST;
   23094:	2303      	movs	r3, #3
   23096:	e7ec      	b.n	23072 <http_parser_execute+0x572>
				parser->method = HTTP_REPORT; /* or REBIND */
   23098:	2314      	movs	r3, #20
   2309a:	e7ea      	b.n	23072 <http_parser_execute+0x572>
				parser->method = HTTP_SUBSCRIBE; /* or SEARCH */
   2309c:	231a      	movs	r3, #26
   2309e:	e7e8      	b.n	23072 <http_parser_execute+0x572>
				parser->method = HTTP_TRACE;
   230a0:	2307      	movs	r3, #7
   230a2:	e7e6      	b.n	23072 <http_parser_execute+0x572>
				parser->method = HTTP_UNLOCK;
   230a4:	230f      	movs	r3, #15
   230a6:	e7e4      	b.n	23072 <http_parser_execute+0x572>
			if (UNLIKELY(ch == '\0')) {
   230a8:	2d00      	cmp	r5, #0
   230aa:	d0a6      	beq.n	22ffa <http_parser_execute+0x4fa>
			matcher = method_strings[parser->method];
   230ac:	7da0      	ldrb	r0, [r4, #22]
   230ae:	4aae      	ldr	r2, [pc, #696]	; (23368 <http_parser_execute+0x868>)
   230b0:	78e3      	ldrb	r3, [r4, #3]
   230b2:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   230b6:	f003 017f 	and.w	r1, r3, #127	; 0x7f
			if (ch == ' ' && matcher[parser->index] == '\0') {
   230ba:	2d20      	cmp	r5, #32
   230bc:	5c52      	ldrb	r2, [r2, r1]
   230be:	d10a      	bne.n	230d6 <http_parser_execute+0x5d6>
   230c0:	2a00      	cmp	r2, #0
   230c2:	f040 869b 	bne.w	23dfc <http_parser_execute+0x12fc>
				UPDATE_STATE(s_req_spaces_before_url);
   230c6:	2314      	movs	r3, #20
   230c8:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			++parser->index;
   230cc:	78e3      	ldrb	r3, [r4, #3]
   230ce:	3101      	adds	r1, #1
   230d0:	f361 0306 	bfi	r3, r1, #0, #7
   230d4:	e759      	b.n	22f8a <http_parser_execute+0x48a>
			} else if (ch == matcher[parser->index]) {
   230d6:	4295      	cmp	r5, r2
   230d8:	d0f8      	beq.n	230cc <http_parser_execute+0x5cc>
			} else if (IS_ALPHA(ch)) {
   230da:	f045 0220 	orr.w	r2, r5, #32
   230de:	3a61      	subs	r2, #97	; 0x61
   230e0:	2a19      	cmp	r2, #25
   230e2:	d865      	bhi.n	231b0 <http_parser_execute+0x6b0>
						     parser->index << 8 | ch;
   230e4:	020b      	lsls	r3, r1, #8
				uint64_t sw_option = parser->method << 16 |
   230e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
						     parser->index << 8 | ch;
   230ea:	431d      	orrs	r5, r3
				switch (sw_option) {
   230ec:	4b9f      	ldr	r3, [pc, #636]	; (2336c <http_parser_execute+0x86c>)
   230ee:	429d      	cmp	r5, r3
   230f0:	d04e      	beq.n	23190 <http_parser_execute+0x690>
   230f2:	dc22      	bgt.n	2313a <http_parser_execute+0x63a>
   230f4:	4b9e      	ldr	r3, [pc, #632]	; (23370 <http_parser_execute+0x870>)
   230f6:	429d      	cmp	r5, r3
   230f8:	d048      	beq.n	2318c <http_parser_execute+0x68c>
   230fa:	dc12      	bgt.n	23122 <http_parser_execute+0x622>
   230fc:	4b9d      	ldr	r3, [pc, #628]	; (23374 <http_parser_execute+0x874>)
   230fe:	429d      	cmp	r5, r3
   23100:	d03f      	beq.n	23182 <http_parser_execute+0x682>
   23102:	dc08      	bgt.n	23116 <http_parser_execute+0x616>
   23104:	3b14      	subs	r3, #20
   23106:	429d      	cmp	r5, r3
   23108:	d03e      	beq.n	23188 <http_parser_execute+0x688>
   2310a:	3311      	adds	r3, #17
   2310c:	429d      	cmp	r5, r3
   2310e:	f47f af74 	bne.w	22ffa <http_parser_execute+0x4fa>
					parser->method = HTTP_PROPFIND;
   23112:	230c      	movs	r3, #12
   23114:	e036      	b.n	23184 <http_parser_execute+0x684>
   23116:	4b98      	ldr	r3, [pc, #608]	; (23378 <http_parser_execute+0x878>)
   23118:	429d      	cmp	r5, r3
   2311a:	f47f af6e 	bne.w	22ffa <http_parser_execute+0x4fa>
					parser->method = HTTP_PURGE;
   2311e:	231d      	movs	r3, #29
   23120:	e030      	b.n	23184 <http_parser_execute+0x684>
   23122:	4b96      	ldr	r3, [pc, #600]	; (2337c <http_parser_execute+0x87c>)
   23124:	429d      	cmp	r5, r3
   23126:	d03f      	beq.n	231a8 <http_parser_execute+0x6a8>
   23128:	4b95      	ldr	r3, [pc, #596]	; (23380 <http_parser_execute+0x880>)
   2312a:	429d      	cmp	r5, r3
   2312c:	d032      	beq.n	23194 <http_parser_execute+0x694>
   2312e:	4b95      	ldr	r3, [pc, #596]	; (23384 <http_parser_execute+0x884>)
   23130:	429d      	cmp	r5, r3
   23132:	f47f af62 	bne.w	22ffa <http_parser_execute+0x4fa>
					parser->method = HTTP_COPY;
   23136:	2308      	movs	r3, #8
   23138:	e024      	b.n	23184 <http_parser_execute+0x684>
   2313a:	4b93      	ldr	r3, [pc, #588]	; (23388 <http_parser_execute+0x888>)
   2313c:	429d      	cmp	r5, r3
   2313e:	d035      	beq.n	231ac <http_parser_execute+0x6ac>
   23140:	dc13      	bgt.n	2316a <http_parser_execute+0x66a>
   23142:	4b92      	ldr	r3, [pc, #584]	; (2338c <http_parser_execute+0x88c>)
   23144:	429d      	cmp	r5, r3
   23146:	d02d      	beq.n	231a4 <http_parser_execute+0x6a4>
   23148:	dc09      	bgt.n	2315e <http_parser_execute+0x65e>
   2314a:	4b91      	ldr	r3, [pc, #580]	; (23390 <http_parser_execute+0x890>)
   2314c:	429d      	cmp	r5, r3
   2314e:	d023      	beq.n	23198 <http_parser_execute+0x698>
   23150:	f503 7380 	add.w	r3, r3, #256	; 0x100
   23154:	429d      	cmp	r5, r3
   23156:	f47f af50 	bne.w	22ffa <http_parser_execute+0x4fa>
					parser->method = HTTP_MKCALENDAR;
   2315a:	231e      	movs	r3, #30
   2315c:	e012      	b.n	23184 <http_parser_execute+0x684>
   2315e:	4b8d      	ldr	r3, [pc, #564]	; (23394 <http_parser_execute+0x894>)
   23160:	429d      	cmp	r5, r3
   23162:	f47f af4a 	bne.w	22ffa <http_parser_execute+0x4fa>
					parser->method = HTTP_UNBIND;
   23166:	2312      	movs	r3, #18
   23168:	e00c      	b.n	23184 <http_parser_execute+0x684>
   2316a:	4b8b      	ldr	r3, [pc, #556]	; (23398 <http_parser_execute+0x898>)
   2316c:	429d      	cmp	r5, r3
   2316e:	d017      	beq.n	231a0 <http_parser_execute+0x6a0>
   23170:	4b8a      	ldr	r3, [pc, #552]	; (2339c <http_parser_execute+0x89c>)
   23172:	429d      	cmp	r5, r3
   23174:	d012      	beq.n	2319c <http_parser_execute+0x69c>
   23176:	4b8a      	ldr	r3, [pc, #552]	; (233a0 <http_parser_execute+0x8a0>)
   23178:	429d      	cmp	r5, r3
   2317a:	f47f af3e 	bne.w	22ffa <http_parser_execute+0x4fa>
					parser->method = HTTP_UNLINK;
   2317e:	2320      	movs	r3, #32
   23180:	e000      	b.n	23184 <http_parser_execute+0x684>
					parser->method = HTTP_PUT;
   23182:	2304      	movs	r3, #4
				parser->method = HTTP_MSEARCH;
   23184:	75a3      	strb	r3, [r4, #22]
   23186:	e7a1      	b.n	230cc <http_parser_execute+0x5cc>
					parser->method = HTTP_PATCH;
   23188:	231c      	movs	r3, #28
   2318a:	e7fb      	b.n	23184 <http_parser_execute+0x684>
					parser->method = HTTP_CHECKOUT;
   2318c:	2316      	movs	r3, #22
   2318e:	e7f9      	b.n	23184 <http_parser_execute+0x684>
					parser->method = HTTP_MOVE;
   23190:	230b      	movs	r3, #11
   23192:	e7f7      	b.n	23184 <http_parser_execute+0x684>
					parser->method = HTTP_MERGE;
   23194:	2317      	movs	r3, #23
   23196:	e7f5      	b.n	23184 <http_parser_execute+0x684>
					parser->method = HTTP_MKACTIVITY;
   23198:	2315      	movs	r3, #21
   2319a:	e7f3      	b.n	23184 <http_parser_execute+0x684>
					parser->method = HTTP_SEARCH;
   2319c:	230e      	movs	r3, #14
   2319e:	e7f1      	b.n	23184 <http_parser_execute+0x684>
					parser->method = HTTP_REBIND;
   231a0:	2311      	movs	r3, #17
   231a2:	e7ef      	b.n	23184 <http_parser_execute+0x684>
					parser->method = HTTP_PROPPATCH;
   231a4:	230d      	movs	r3, #13
   231a6:	e7ed      	b.n	23184 <http_parser_execute+0x684>
					parser->method = HTTP_LINK;
   231a8:	231f      	movs	r3, #31
   231aa:	e7eb      	b.n	23184 <http_parser_execute+0x684>
					parser->method = HTTP_UNSUBSCRIBE;
   231ac:	231b      	movs	r3, #27
   231ae:	e7e9      	b.n	23184 <http_parser_execute+0x684>
			} else if (ch == '-' &&
   231b0:	2d2d      	cmp	r5, #45	; 0x2d
   231b2:	f47f af22 	bne.w	22ffa <http_parser_execute+0x4fa>
   231b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   231ba:	2b01      	cmp	r3, #1
   231bc:	f47f af1d 	bne.w	22ffa <http_parser_execute+0x4fa>
					parser->index == 1U &&
   231c0:	280a      	cmp	r0, #10
   231c2:	f47f af1a 	bne.w	22ffa <http_parser_execute+0x4fa>
				parser->method = HTTP_MSEARCH;
   231c6:	2318      	movs	r3, #24
   231c8:	e7dc      	b.n	23184 <http_parser_execute+0x684>
			if (ch == ' ') {
   231ca:	2d20      	cmp	r5, #32
   231cc:	f43f aded 	beq.w	22daa <http_parser_execute+0x2aa>
			MARK(url);
   231d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   231d2:	b903      	cbnz	r3, 231d6 <http_parser_execute+0x6d6>
   231d4:	9613      	str	r6, [sp, #76]	; 0x4c
			if (parser->method == HTTP_CONNECT) {
   231d6:	7da3      	ldrb	r3, [r4, #22]
			UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));
   231d8:	4629      	mov	r1, r5
			if (parser->method == HTTP_CONNECT) {
   231da:	2b05      	cmp	r3, #5
				UPDATE_STATE(s_req_server_start);
   231dc:	bf04      	itt	eq
   231de:	2318      	moveq	r3, #24
   231e0:	f88d 303e 	strbeq.w	r3, [sp, #62]	; 0x3e
			UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));
   231e4:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
				UPDATE_STATE
   231e8:	f000 fe1c 	bl	23e24 <parse_url_char>
				if (UNLIKELY(CURRENT_STATE() == s_dead)) {
   231ec:	2801      	cmp	r0, #1
				UPDATE_STATE
   231ee:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
				if (UNLIKELY(CURRENT_STATE() == s_dead)) {
   231f2:	f47f adda 	bne.w	22daa <http_parser_execute+0x2aa>
   231f6:	e00a      	b.n	2320e <http_parser_execute+0x70e>
			switch (ch) {
   231f8:	f1a5 030a 	sub.w	r3, r5, #10
   231fc:	b2db      	uxtb	r3, r3
   231fe:	2b16      	cmp	r3, #22
   23200:	d82b      	bhi.n	2325a <http_parser_execute+0x75a>
   23202:	2201      	movs	r2, #1
   23204:	fa02 f303 	lsl.w	r3, r2, r3
   23208:	4a66      	ldr	r2, [pc, #408]	; (233a4 <http_parser_execute+0x8a4>)
   2320a:	401a      	ands	r2, r3
   2320c:	b32a      	cbz	r2, 2325a <http_parser_execute+0x75a>
					SET_ERRNO(HPE_INVALID_URL);
   2320e:	2211      	movs	r2, #17
   23210:	7de3      	ldrb	r3, [r4, #23]
   23212:	e4d6      	b.n	22bc2 <http_parser_execute+0xc2>
			switch (ch) {
   23214:	2d0d      	cmp	r5, #13
   23216:	d003      	beq.n	23220 <http_parser_execute+0x720>
   23218:	2d20      	cmp	r5, #32
   2321a:	d00b      	beq.n	23234 <http_parser_execute+0x734>
   2321c:	2d0a      	cmp	r5, #10
   2321e:	d11c      	bne.n	2325a <http_parser_execute+0x75a>
				parser->http_major = 0U;
   23220:	f44f 2310 	mov.w	r3, #589824	; 0x90000
				UPDATE_STATE((ch == CR) ?
   23224:	2d0d      	cmp	r5, #13
				parser->http_major = 0U;
   23226:	6123      	str	r3, [r4, #16]
				UPDATE_STATE((ch == CR) ?
   23228:	bf0c      	ite	eq
   2322a:	2329      	moveq	r3, #41	; 0x29
   2322c:	232a      	movne	r3, #42	; 0x2a
   2322e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
   23232:	e001      	b.n	23238 <http_parser_execute+0x738>
				UPDATE_STATE(s_req_http_start);
   23234:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
					     p - url_mark);
   23238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
				rc = cb_data(parser, settings->on_url,
   2323a:	2202      	movs	r2, #2
					     p - url_mark);
   2323c:	1af3      	subs	r3, r6, r3
				rc = cb_data(parser, settings->on_url,
   2323e:	9303      	str	r3, [sp, #12]
   23240:	ab13      	add	r3, sp, #76	; 0x4c
   23242:	9302      	str	r3, [sp, #8]
					     p - data + 1, &url_mark,
   23244:	eba6 0308 	sub.w	r3, r6, r8
   23248:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_url,
   2324a:	9301      	str	r3, [sp, #4]
   2324c:	ab10      	add	r3, sp, #64	; 0x40
   2324e:	9300      	str	r3, [sp, #0]
   23250:	f8d9 1004 	ldr.w	r1, [r9, #4]
   23254:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   23258:	e6ae      	b.n	22fb8 <http_parser_execute+0x4b8>
				UPDATE_STATE
   2325a:	4629      	mov	r1, r5
   2325c:	e7c4      	b.n	231e8 <http_parser_execute+0x6e8>
			switch (ch) {
   2325e:	2d20      	cmp	r5, #32
   23260:	f43f ada3 	beq.w	22daa <http_parser_execute+0x2aa>
   23264:	2d48      	cmp	r5, #72	; 0x48
   23266:	f47f ad90 	bne.w	22d8a <http_parser_execute+0x28a>
				UPDATE_STATE(s_req_http_H);
   2326a:	2321      	movs	r3, #33	; 0x21
   2326c:	e59b      	b.n	22da6 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_req_http_HT);
   2326e:	2322      	movs	r3, #34	; 0x22
   23270:	e599      	b.n	22da6 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_req_http_HTT);
   23272:	2323      	movs	r3, #35	; 0x23
   23274:	e597      	b.n	22da6 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_req_http_HTTP);
   23276:	2324      	movs	r3, #36	; 0x24
   23278:	e595      	b.n	22da6 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_req_first_http_major);
   2327a:	2325      	movs	r3, #37	; 0x25
   2327c:	e593      	b.n	22da6 <http_parser_execute+0x2a6>
			if (UNLIKELY(ch < '1' || ch > '9')) {
   2327e:	f1a5 0331 	sub.w	r3, r5, #49	; 0x31
   23282:	2b08      	cmp	r3, #8
   23284:	f63f ae32 	bhi.w	22eec <http_parser_execute+0x3ec>
			parser->http_major = ch - '0';
   23288:	3d30      	subs	r5, #48	; 0x30
			UPDATE_STATE(s_req_http_major);
   2328a:	2326      	movs	r3, #38	; 0x26
			parser->http_major = ch - '0';
   2328c:	8225      	strh	r5, [r4, #16]
			UPDATE_STATE(s_req_http_major);
   2328e:	e58a      	b.n	22da6 <http_parser_execute+0x2a6>
			if (ch == '.') {
   23290:	2d2e      	cmp	r5, #46	; 0x2e
   23292:	d101      	bne.n	23298 <http_parser_execute+0x798>
				UPDATE_STATE(s_req_first_http_minor);
   23294:	2327      	movs	r3, #39	; 0x27
   23296:	e586      	b.n	22da6 <http_parser_execute+0x2a6>
			if (UNLIKELY(!IS_NUM(ch))) {
   23298:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   2329c:	2b09      	cmp	r3, #9
   2329e:	f63f ae25 	bhi.w	22eec <http_parser_execute+0x3ec>
			parser->http_major *= 10U;
   232a2:	8a23      	ldrh	r3, [r4, #16]
   232a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->http_major += ch - '0';
   232a8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   232ac:	3d30      	subs	r5, #48	; 0x30
   232ae:	b2ad      	uxth	r5, r5
   232b0:	8225      	strh	r5, [r4, #16]
			if (UNLIKELY(parser->http_minor > 999)) {
   232b2:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   232b6:	f4ff ad78 	bcc.w	22daa <http_parser_execute+0x2aa>
   232ba:	e617      	b.n	22eec <http_parser_execute+0x3ec>
			if (UNLIKELY(!IS_NUM(ch))) {
   232bc:	3d30      	subs	r5, #48	; 0x30
   232be:	b2eb      	uxtb	r3, r5
   232c0:	2b09      	cmp	r3, #9
   232c2:	f63f ae13 	bhi.w	22eec <http_parser_execute+0x3ec>
			UPDATE_STATE(s_req_http_minor);
   232c6:	2328      	movs	r3, #40	; 0x28
			parser->http_minor = ch - '0';
   232c8:	8265      	strh	r5, [r4, #18]
			UPDATE_STATE(s_req_http_minor);
   232ca:	e56c      	b.n	22da6 <http_parser_execute+0x2a6>
			if (ch == CR) {
   232cc:	2d0d      	cmp	r5, #13
   232ce:	d101      	bne.n	232d4 <http_parser_execute+0x7d4>
				UPDATE_STATE(s_req_line_almost_done);
   232d0:	2329      	movs	r3, #41	; 0x29
   232d2:	e568      	b.n	22da6 <http_parser_execute+0x2a6>
			if (ch == LF) {
   232d4:	2d0a      	cmp	r5, #10
   232d6:	f43f ae38 	beq.w	22f4a <http_parser_execute+0x44a>
			if (UNLIKELY(!IS_NUM(ch))) {
   232da:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   232de:	2b09      	cmp	r3, #9
   232e0:	f63f ae04 	bhi.w	22eec <http_parser_execute+0x3ec>
			parser->http_minor *= 10U;
   232e4:	8a63      	ldrh	r3, [r4, #18]
   232e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->http_minor += ch - '0';
   232ea:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   232ee:	3d30      	subs	r5, #48	; 0x30
   232f0:	b2ad      	uxth	r5, r5
   232f2:	8265      	strh	r5, [r4, #18]
   232f4:	e7dd      	b.n	232b2 <http_parser_execute+0x7b2>
			if (UNLIKELY(ch != LF)) {
   232f6:	2d0a      	cmp	r5, #10
   232f8:	f43f ae27 	beq.w	22f4a <http_parser_execute+0x44a>
				SET_ERRNO(HPE_LF_EXPECTED);
   232fc:	2217      	movs	r2, #23
   232fe:	7de3      	ldrb	r3, [r4, #23]
   23300:	e45f      	b.n	22bc2 <http_parser_execute+0xc2>
			if (ch == CR) {
   23302:	2d0d      	cmp	r5, #13
   23304:	d101      	bne.n	2330a <http_parser_execute+0x80a>
				UPDATE_STATE(s_headers_almost_done);
   23306:	2337      	movs	r3, #55	; 0x37
   23308:	e54d      	b.n	22da6 <http_parser_execute+0x2a6>
			if (ch == LF) {
   2330a:	2d0a      	cmp	r5, #10
   2330c:	d101      	bne.n	23312 <http_parser_execute+0x812>
				UPDATE_STATE(s_headers_almost_done);
   2330e:	2337      	movs	r3, #55	; 0x37
   23310:	e4a9      	b.n	22c66 <http_parser_execute+0x166>
			c = TOKEN(ch);
   23312:	2d20      	cmp	r5, #32
   23314:	d005      	beq.n	23322 <http_parser_execute+0x822>
   23316:	4b24      	ldr	r3, [pc, #144]	; (233a8 <http_parser_execute+0x8a8>)
   23318:	5d5d      	ldrb	r5, [r3, r5]
			if (UNLIKELY(!c)) {
   2331a:	b915      	cbnz	r5, 23322 <http_parser_execute+0x822>
				SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   2331c:	2218      	movs	r2, #24
   2331e:	7de3      	ldrb	r3, [r4, #23]
   23320:	e44f      	b.n	22bc2 <http_parser_execute+0xc2>
			MARK(header_field);
   23322:	9b11      	ldr	r3, [sp, #68]	; 0x44
   23324:	b903      	cbnz	r3, 23328 <http_parser_execute+0x828>
   23326:	9611      	str	r6, [sp, #68]	; 0x44
			parser->index = 0U;
   23328:	78e3      	ldrb	r3, [r4, #3]
   2332a:	2d74      	cmp	r5, #116	; 0x74
   2332c:	f36f 0306 	bfc	r3, #0, #7
   23330:	70e3      	strb	r3, [r4, #3]
			UPDATE_STATE(s_header_field);
   23332:	f04f 032b 	mov.w	r3, #43	; 0x2b
   23336:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			switch (c) {
   2333a:	78a3      	ldrb	r3, [r4, #2]
   2333c:	d012      	beq.n	23364 <http_parser_execute+0x864>
   2333e:	d806      	bhi.n	2334e <http_parser_execute+0x84e>
   23340:	2d63      	cmp	r5, #99	; 0x63
   23342:	d008      	beq.n	23356 <http_parser_execute+0x856>
   23344:	2d70      	cmp	r5, #112	; 0x70
   23346:	d00b      	beq.n	23360 <http_parser_execute+0x860>
				parser->header_state = h_general;
   23348:	f36f 0347 	bfc	r3, #1, #7
   2334c:	e006      	b.n	2335c <http_parser_execute+0x85c>
   2334e:	2d75      	cmp	r5, #117	; 0x75
   23350:	d1fa      	bne.n	23348 <http_parser_execute+0x848>
				parser->header_state = h_matching_upgrade;
   23352:	2208      	movs	r2, #8
   23354:	e000      	b.n	23358 <http_parser_execute+0x858>
				parser->header_state = h_C;
   23356:	2201      	movs	r2, #1
					parser->header_state =
   23358:	f362 0347 	bfi	r3, r2, #1, #7
				parser->header_state = h_general;
   2335c:	70a3      	strb	r3, [r4, #2]
				break;
   2335e:	e524      	b.n	22daa <http_parser_execute+0x2aa>
				parser->header_state =
   23360:	2205      	movs	r2, #5
   23362:	e7f9      	b.n	23358 <http_parser_execute+0x858>
				parser->header_state =
   23364:	2207      	movs	r2, #7
   23366:	e7f7      	b.n	23358 <http_parser_execute+0x858>
   23368:	00038870 	.word	0x00038870
   2336c:	000a014f 	.word	0x000a014f
   23370:	00050148 	.word	0x00050148
   23374:	00030155 	.word	0x00030155
   23378:	00040252 	.word	0x00040252
   2337c:	00090149 	.word	0x00090149
   23380:	000a0145 	.word	0x000a0145
   23384:	00050250 	.word	0x00050250
   23388:	000f0253 	.word	0x000f0253
   2338c:	000c0450 	.word	0x000c0450
   23390:	000a0241 	.word	0x000a0241
   23394:	000f0242 	.word	0x000f0242
   23398:	00140242 	.word	0x00140242
   2339c:	001a0145 	.word	0x001a0145
   233a0:	000f0349 	.word	0x000f0349
   233a4:	00400009 	.word	0x00400009
   233a8:	0003b670 	.word	0x0003b670
				c = TOKEN(ch);
   233ac:	462b      	mov	r3, r5
	switch (parser->header_state) {
   233ae:	78a2      	ldrb	r2, [r4, #2]
   233b0:	0852      	lsrs	r2, r2, #1
   233b2:	3a01      	subs	r2, #1
   233b4:	2a0b      	cmp	r2, #11
   233b6:	f63f ac10 	bhi.w	22bda <http_parser_execute+0xda>
   233ba:	e8df f002 	tbb	[pc, r2]
   233be:	1706      	.short	0x1706
   233c0:	63513721 	.word	0x63513721
   233c4:	a7a79079 	.word	0xa7a79079
   233c8:	a7a7      	.short	0xa7a7
		parser->index++;
   233ca:	78e2      	ldrb	r2, [r4, #3]
		parser->header_state = (c == 'o' ? h_CO : h_general);
   233cc:	2b6f      	cmp	r3, #111	; 0x6f
		parser->index++;
   233ce:	f102 0701 	add.w	r7, r2, #1
   233d2:	f367 0206 	bfi	r2, r7, #0, #7
   233d6:	70e2      	strb	r2, [r4, #3]
		parser->header_state = (c == 'o' ? h_CO : h_general);
   233d8:	bf08      	it	eq
   233da:	2202      	moveq	r2, #2
		parser->header_state = (c == 'n' ? h_CON : h_general);
   233dc:	bf18      	it	ne
   233de:	2200      	movne	r2, #0
   233e0:	78a3      	ldrb	r3, [r4, #2]
   233e2:	f362 0347 	bfi	r3, r2, #1, #7
   233e6:	70a3      	strb	r3, [r4, #2]
		break;
   233e8:	f7ff bbf7 	b.w	22bda <http_parser_execute+0xda>
		parser->index++;
   233ec:	78e2      	ldrb	r2, [r4, #3]
		parser->header_state = (c == 'n' ? h_CON : h_general);
   233ee:	2b6e      	cmp	r3, #110	; 0x6e
		parser->index++;
   233f0:	f102 0701 	add.w	r7, r2, #1
   233f4:	f367 0206 	bfi	r2, r7, #0, #7
   233f8:	70e2      	strb	r2, [r4, #3]
		parser->header_state = (c == 'n' ? h_CON : h_general);
   233fa:	bf08      	it	eq
   233fc:	2203      	moveq	r2, #3
   233fe:	e7ed      	b.n	233dc <http_parser_execute+0x8dc>
		parser->index++;
   23400:	78e2      	ldrb	r2, [r4, #3]
   23402:	2b6e      	cmp	r3, #110	; 0x6e
   23404:	f102 0701 	add.w	r7, r2, #1
   23408:	f367 0206 	bfi	r2, r7, #0, #7
   2340c:	70e2      	strb	r2, [r4, #3]
		switch (c) {
   2340e:	78a2      	ldrb	r2, [r4, #2]
   23410:	d004      	beq.n	2341c <http_parser_execute+0x91c>
   23412:	2b74      	cmp	r3, #116	; 0x74
   23414:	d008      	beq.n	23428 <http_parser_execute+0x928>
			parser->header_state = h_general;
   23416:	f36f 0247 	bfc	r2, #1, #7
   2341a:	e002      	b.n	23422 <http_parser_execute+0x922>
			parser->header_state = h_matching_connection;
   2341c:	2304      	movs	r3, #4
			parser->header_state = h_matching_content_length;
   2341e:	f363 0247 	bfi	r2, r3, #1, #7
   23422:	70a2      	strb	r2, [r4, #2]
			break;
   23424:	f7ff bbd9 	b.w	22bda <http_parser_execute+0xda>
			parser->header_state = h_matching_content_length;
   23428:	2306      	movs	r3, #6
   2342a:	e7f8      	b.n	2341e <http_parser_execute+0x91e>
		parser->index++;
   2342c:	78e7      	ldrb	r7, [r4, #3]
   2342e:	1c7a      	adds	r2, r7, #1
   23430:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23434:	f362 0706 	bfi	r7, r2, #0, #7
		if (cond1 || c != CONNECTION[parser->index]) {
   23438:	2a0a      	cmp	r2, #10
		parser->index++;
   2343a:	70e7      	strb	r7, [r4, #3]
		if (cond1 || c != CONNECTION[parser->index]) {
   2343c:	d803      	bhi.n	23446 <http_parser_execute+0x946>
   2343e:	f81a 2002 	ldrb.w	r2, [sl, r2]
   23442:	429a      	cmp	r2, r3
   23444:	d003      	beq.n	2344e <http_parser_execute+0x94e>
			parser->header_state = h_general;
   23446:	78a3      	ldrb	r3, [r4, #2]
   23448:	f36f 0347 	bfc	r3, #1, #7
   2344c:	e7cb      	b.n	233e6 <http_parser_execute+0x8e6>
		} else if (parser->index == sizeof(CONNECTION) - 2) {
   2344e:	78e3      	ldrb	r3, [r4, #3]
   23450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23454:	2b09      	cmp	r3, #9
   23456:	f47f abc0 	bne.w	22bda <http_parser_execute+0xda>
			parser->header_state = h_connection;
   2345a:	2209      	movs	r2, #9
   2345c:	78a3      	ldrb	r3, [r4, #2]
   2345e:	e7c0      	b.n	233e2 <http_parser_execute+0x8e2>
		parser->index++;
   23460:	78e7      	ldrb	r7, [r4, #3]
   23462:	1c7a      	adds	r2, r7, #1
   23464:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23468:	f362 0706 	bfi	r7, r2, #0, #7
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
   2346c:	2a10      	cmp	r2, #16
		parser->index++;
   2346e:	70e7      	strb	r7, [r4, #3]
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
   23470:	d8e9      	bhi.n	23446 <http_parser_execute+0x946>
   23472:	f81e 2002 	ldrb.w	r2, [lr, r2]
   23476:	429a      	cmp	r2, r3
   23478:	d1e5      	bne.n	23446 <http_parser_execute+0x946>
		} else if (parser->index == sizeof(PROXY_CONNECTION) - 2) {
   2347a:	b2fb      	uxtb	r3, r7
   2347c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23480:	2b0f      	cmp	r3, #15
   23482:	e7e8      	b.n	23456 <http_parser_execute+0x956>
		parser->index++;
   23484:	78e7      	ldrb	r7, [r4, #3]
   23486:	1c7a      	adds	r2, r7, #1
   23488:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2348c:	f362 0706 	bfi	r7, r2, #0, #7
		if (cond1 || c != CONTENT_LENGTH[parser->index]) {
   23490:	2a0e      	cmp	r2, #14
		parser->index++;
   23492:	70e7      	strb	r7, [r4, #3]
		if (cond1 || c != CONTENT_LENGTH[parser->index]) {
   23494:	d8d7      	bhi.n	23446 <http_parser_execute+0x946>
   23496:	4fab      	ldr	r7, [pc, #684]	; (23744 <http_parser_execute+0xc44>)
   23498:	5cba      	ldrb	r2, [r7, r2]
   2349a:	429a      	cmp	r2, r3
   2349c:	d1d3      	bne.n	23446 <http_parser_execute+0x946>
		} else if (parser->index == sizeof(CONTENT_LENGTH) - 2) {
   2349e:	78e3      	ldrb	r3, [r4, #3]
   234a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   234a4:	2b0d      	cmp	r3, #13
   234a6:	f47f ab98 	bne.w	22bda <http_parser_execute+0xda>
			parser->header_state = h_content_length;
   234aa:	220a      	movs	r2, #10
   234ac:	78a3      	ldrb	r3, [r4, #2]
   234ae:	e798      	b.n	233e2 <http_parser_execute+0x8e2>
		parser->index++;
   234b0:	78e7      	ldrb	r7, [r4, #3]
   234b2:	1c7a      	adds	r2, r7, #1
   234b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   234b8:	f362 0706 	bfi	r7, r2, #0, #7
		if (cond1 || c != TRANSFER_ENCODING[parser->index]) {
   234bc:	2a11      	cmp	r2, #17
		parser->index++;
   234be:	70e7      	strb	r7, [r4, #3]
		if (cond1 || c != TRANSFER_ENCODING[parser->index]) {
   234c0:	d8c1      	bhi.n	23446 <http_parser_execute+0x946>
   234c2:	4fa1      	ldr	r7, [pc, #644]	; (23748 <http_parser_execute+0xc48>)
   234c4:	5cba      	ldrb	r2, [r7, r2]
   234c6:	429a      	cmp	r2, r3
   234c8:	d1bd      	bne.n	23446 <http_parser_execute+0x946>
		} else if (parser->index == sizeof(TRANSFER_ENCODING) - 2) {
   234ca:	78e3      	ldrb	r3, [r4, #3]
   234cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   234d0:	2b10      	cmp	r3, #16
   234d2:	f47f ab82 	bne.w	22bda <http_parser_execute+0xda>
			parser->header_state = h_transfer_encoding;
   234d6:	78a3      	ldrb	r3, [r4, #2]
   234d8:	f360 0347 	bfi	r3, r0, #1, #7
   234dc:	e783      	b.n	233e6 <http_parser_execute+0x8e6>
		parser->index++;
   234de:	78e7      	ldrb	r7, [r4, #3]
   234e0:	1c7a      	adds	r2, r7, #1
   234e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   234e6:	f362 0706 	bfi	r7, r2, #0, #7
		if (cond1 || c != UPGRADE[parser->index]) {
   234ea:	2a07      	cmp	r2, #7
		parser->index++;
   234ec:	70e7      	strb	r7, [r4, #3]
		if (cond1 || c != UPGRADE[parser->index]) {
   234ee:	d8aa      	bhi.n	23446 <http_parser_execute+0x946>
   234f0:	4f96      	ldr	r7, [pc, #600]	; (2374c <http_parser_execute+0xc4c>)
   234f2:	5cba      	ldrb	r2, [r7, r2]
   234f4:	429a      	cmp	r2, r3
   234f6:	d1a6      	bne.n	23446 <http_parser_execute+0x946>
		} else if (parser->index == sizeof(UPGRADE) - 2) {
   234f8:	78e3      	ldrb	r3, [r4, #3]
   234fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   234fe:	2b06      	cmp	r3, #6
   23500:	f47f ab6b 	bne.w	22bda <http_parser_execute+0xda>
			parser->header_state = h_upgrade;
   23504:	78a3      	ldrb	r3, [r4, #2]
   23506:	f36c 0347 	bfi	r3, ip, #1, #7
   2350a:	e76c      	b.n	233e6 <http_parser_execute+0x8e6>
		if (ch != ' ') {
   2350c:	2d20      	cmp	r5, #32
   2350e:	d19a      	bne.n	23446 <http_parser_execute+0x946>
   23510:	f7ff bb63 	b.w	22bda <http_parser_execute+0xda>
			if (p == data + len) {
   23514:	45bb      	cmp	fp, r7
   23516:	d102      	bne.n	2351e <http_parser_execute+0xa1e>
				--p;
   23518:	f10b 36ff 	add.w	r6, fp, #4294967295	; 0xffffffff
   2351c:	e445      	b.n	22daa <http_parser_execute+0x2aa>
			if (ch == ':') {
   2351e:	2d3a      	cmp	r5, #58	; 0x3a
   23520:	eba7 0308 	sub.w	r3, r7, r8
   23524:	d118      	bne.n	23558 <http_parser_execute+0xa58>
				UPDATE_STATE(s_header_value_discard_ws);
   23526:	222c      	movs	r2, #44	; 0x2c
   23528:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
					     p - header_field_mark);
   2352c:	9a11      	ldr	r2, [sp, #68]	; 0x44
					     parsed, p - data + 1,
   2352e:	3301      	adds	r3, #1
					     p - header_field_mark);
   23530:	1aba      	subs	r2, r7, r2
				rc = cb_data(parser, settings->on_header_field,
   23532:	9203      	str	r2, [sp, #12]
   23534:	9301      	str	r3, [sp, #4]
   23536:	aa11      	add	r2, sp, #68	; 0x44
   23538:	ab10      	add	r3, sp, #64	; 0x40
   2353a:	9202      	str	r2, [sp, #8]
   2353c:	9300      	str	r3, [sp, #0]
   2353e:	2203      	movs	r2, #3
   23540:	4620      	mov	r0, r4
   23542:	f8d9 100c 	ldr.w	r1, [r9, #12]
   23546:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   2354a:	f012 f82e 	bl	355aa <cb_data>
				if (rc != 0) {
   2354e:	2800      	cmp	r0, #0
   23550:	f47f aafb 	bne.w	22b4a <http_parser_execute+0x4a>
   23554:	463e      	mov	r6, r7
   23556:	e428      	b.n	22daa <http_parser_execute+0x2aa>
			SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   23558:	2218      	movs	r2, #24
   2355a:	7de3      	ldrb	r3, [r4, #23]
   2355c:	f7ff bb54 	b.w	22c08 <http_parser_execute+0x108>
			if (ch == ' ' || ch == '\t') {
   23560:	2d20      	cmp	r5, #32
   23562:	f43f ac22 	beq.w	22daa <http_parser_execute+0x2aa>
   23566:	2d09      	cmp	r5, #9
   23568:	f43f ac1f 	beq.w	22daa <http_parser_execute+0x2aa>
			if (ch == CR) {
   2356c:	2d0d      	cmp	r5, #13
   2356e:	d101      	bne.n	23574 <http_parser_execute+0xa74>
				UPDATE_STATE
   23570:	232d      	movs	r3, #45	; 0x2d
   23572:	e418      	b.n	22da6 <http_parser_execute+0x2a6>
			if (ch == LF) {
   23574:	2d0a      	cmp	r5, #10
   23576:	d101      	bne.n	2357c <http_parser_execute+0xa7c>
			UPDATE_STATE(s_header_value_discard_lws);
   23578:	232e      	movs	r3, #46	; 0x2e
   2357a:	e414      	b.n	22da6 <http_parser_execute+0x2a6>
			MARK(header_value);
   2357c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2357e:	b903      	cbnz	r3, 23582 <http_parser_execute+0xa82>
   23580:	9612      	str	r6, [sp, #72]	; 0x48
			UPDATE_STATE(s_header_value);
   23582:	2330      	movs	r3, #48	; 0x30
   23584:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			parser->index = 0U;
   23588:	78e3      	ldrb	r3, [r4, #3]
			c = LOWER(ch);
   2358a:	f045 0220 	orr.w	r2, r5, #32
			parser->index = 0U;
   2358e:	f36f 0306 	bfc	r3, #0, #7
   23592:	70e3      	strb	r3, [r4, #3]
			switch (parser->header_state) {
   23594:	78a3      	ldrb	r3, [r4, #2]
   23596:	085b      	lsrs	r3, r3, #1
   23598:	3b09      	subs	r3, #9
   2359a:	2b05      	cmp	r3, #5
   2359c:	d812      	bhi.n	235c4 <http_parser_execute+0xac4>
   2359e:	a101      	add	r1, pc, #4	; (adr r1, 235a4 <http_parser_execute+0xaa4>)
   235a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   235a4:	0002360d 	.word	0x0002360d
   235a8:	000235d5 	.word	0x000235d5
   235ac:	000235c9 	.word	0x000235c9
   235b0:	000235bd 	.word	0x000235bd
   235b4:	000235c5 	.word	0x000235c5
   235b8:	00022dab 	.word	0x00022dab
				parser->flags |= F_UPGRADE;
   235bc:	8823      	ldrh	r3, [r4, #0]
   235be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   235c2:	8023      	strh	r3, [r4, #0]
				parser->header_state = h_general;
   235c4:	78a3      	ldrb	r3, [r4, #2]
   235c6:	e6bf      	b.n	23348 <http_parser_execute+0x848>
				if ('c' == c) {
   235c8:	2a63      	cmp	r2, #99	; 0x63
   235ca:	78a3      	ldrb	r3, [r4, #2]
   235cc:	f47f aebc 	bne.w	23348 <http_parser_execute+0x848>
					parser->header_state =
   235d0:	220d      	movs	r2, #13
   235d2:	e6c1      	b.n	23358 <http_parser_execute+0x858>
				if (UNLIKELY(!IS_NUM(ch))) {
   235d4:	3d30      	subs	r5, #48	; 0x30
   235d6:	b2eb      	uxtb	r3, r5
   235d8:	2b09      	cmp	r3, #9
   235da:	d903      	bls.n	235e4 <http_parser_execute+0xae4>
				SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   235dc:	2219      	movs	r2, #25
   235de:	7de3      	ldrb	r3, [r4, #23]
   235e0:	f7ff baef 	b.w	22bc2 <http_parser_execute+0xc2>
				if (parser->flags & F_CONTENTLENGTH) {
   235e4:	8823      	ldrh	r3, [r4, #0]
   235e6:	059f      	lsls	r7, r3, #22
   235e8:	f3c3 0287 	ubfx	r2, r3, #2, #8
   235ec:	d503      	bpl.n	235f6 <http_parser_execute+0xaf6>
					SET_ERRNO
   235ee:	7de3      	ldrb	r3, [r4, #23]
				SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);
   235f0:	221a      	movs	r2, #26
   235f2:	f7ff bae6 	b.w	22bc2 <http_parser_execute+0xc2>
				parser->flags |= F_CONTENTLENGTH;
   235f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   235fa:	f362 0389 	bfi	r3, r2, #2, #8
				parser->content_length = ch - '0';
   235fe:	462a      	mov	r2, r5
				parser->flags |= F_CONTENTLENGTH;
   23600:	8023      	strh	r3, [r4, #0]
				parser->content_length = ch - '0';
   23602:	17eb      	asrs	r3, r5, #31
   23604:	e9c4 2302 	strd	r2, r3, [r4, #8]
				break;
   23608:	f7ff bbcf 	b.w	22daa <http_parser_execute+0x2aa>
				if (c == 'k') {
   2360c:	2a6b      	cmp	r2, #107	; 0x6b
   2360e:	78a3      	ldrb	r3, [r4, #2]
   23610:	d101      	bne.n	23616 <http_parser_execute+0xb16>
					parser->header_state =
   23612:	220f      	movs	r2, #15
   23614:	e6a0      	b.n	23358 <http_parser_execute+0x858>
				} else if (c == 'c') {
   23616:	2a63      	cmp	r2, #99	; 0x63
   23618:	d101      	bne.n	2361e <http_parser_execute+0xb1e>
					parser->header_state =
   2361a:	2210      	movs	r2, #16
   2361c:	e69c      	b.n	23358 <http_parser_execute+0x858>
				} else if (c == 'u') {
   2361e:	2a75      	cmp	r2, #117	; 0x75
					parser->header_state =
   23620:	bf0c      	ite	eq
   23622:	2211      	moveq	r2, #17
					parser->header_state =
   23624:	2212      	movne	r2, #18
   23626:	e697      	b.n	23358 <http_parser_execute+0x858>
			for (; p != data + len; p++) {
   23628:	46b2      	mov	sl, r6
				(enum header_states)parser->header_state;
   2362a:	78a7      	ldrb	r7, [r4, #2]
   2362c:	087f      	lsrs	r7, r7, #1
			for (; p != data + len; p++) {
   2362e:	45d3      	cmp	fp, sl
   23630:	d021      	beq.n	23676 <http_parser_execute+0xb76>
				ch = *p;
   23632:	f89a 5000 	ldrb.w	r5, [sl]
				if (ch == CR) {
   23636:	2d0d      	cmp	r5, #13
   23638:	d12d      	bne.n	23696 <http_parser_execute+0xb96>
					UPDATE_STATE(s_header_almost_done);
   2363a:	2332      	movs	r3, #50	; 0x32
   2363c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
					parser->header_state = h_state;
   23640:	78a3      	ldrb	r3, [r4, #2]
					rc = cb_data(parser,
   23642:	2204      	movs	r2, #4
					parser->header_state = h_state;
   23644:	f367 0347 	bfi	r3, r7, #1, #7
   23648:	70a3      	strb	r3, [r4, #2]
						     p - header_value_mark);
   2364a:	9b12      	ldr	r3, [sp, #72]	; 0x48
					rc = cb_data(parser,
   2364c:	4620      	mov	r0, r4
						     p - header_value_mark);
   2364e:	ebaa 0303 	sub.w	r3, sl, r3
					rc = cb_data(parser,
   23652:	9303      	str	r3, [sp, #12]
   23654:	ab12      	add	r3, sp, #72	; 0x48
   23656:	9302      	str	r3, [sp, #8]
						     p - data + 1,
   23658:	ebaa 0308 	sub.w	r3, sl, r8
   2365c:	3301      	adds	r3, #1
					rc = cb_data(parser,
   2365e:	9301      	str	r3, [sp, #4]
   23660:	ab10      	add	r3, sp, #64	; 0x40
   23662:	9300      	str	r3, [sp, #0]
   23664:	f8d9 1010 	ldr.w	r1, [r9, #16]
   23668:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   2366c:	f011 ff9d 	bl	355aa <cb_data>
					if (rc != 0) {
   23670:	2800      	cmp	r0, #0
   23672:	f47f aa6a 	bne.w	22b4a <http_parser_execute+0x4a>
			parser->header_state = h_state;
   23676:	78a3      	ldrb	r3, [r4, #2]
			rc = count_header_size(parser, p - start);
   23678:	ebaa 0606 	sub.w	r6, sl, r6
			parser->header_state = h_state;
   2367c:	f367 0347 	bfi	r3, r7, #1, #7
   23680:	70a3      	strb	r3, [r4, #2]
	parser->nread += bytes;
   23682:	6863      	ldr	r3, [r4, #4]
   23684:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   23686:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   2368a:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   2368c:	f240 8148 	bls.w	23920 <http_parser_execute+0xe20>
		parser->http_errno = HPE_HEADER_OVERFLOW;
   23690:	220c      	movs	r2, #12
   23692:	7de3      	ldrb	r3, [r4, #23]
   23694:	e033      	b.n	236fe <http_parser_execute+0xbfe>
				if (ch == LF) {
   23696:	2d0a      	cmp	r5, #10
   23698:	d127      	bne.n	236ea <http_parser_execute+0xbea>
					UPDATE_STATE(s_header_almost_done);
   2369a:	2332      	movs	r3, #50	; 0x32
   2369c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	parser->nread += bytes;
   236a0:	6863      	ldr	r3, [r4, #4]
					rc = count_header_size(parser,
   236a2:	ebaa 0606 	sub.w	r6, sl, r6
	parser->nread += bytes;
   236a6:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   236a8:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   236ac:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   236ae:	ebaa 0208 	sub.w	r2, sl, r8
   236b2:	d8ed      	bhi.n	23690 <http_parser_execute+0xb90>
					parser->header_state = h_state;
   236b4:	78a3      	ldrb	r3, [r4, #2]
					rc = cb_data(parser,
   236b6:	4620      	mov	r0, r4
					parser->header_state = h_state;
   236b8:	f367 0347 	bfi	r3, r7, #1, #7
   236bc:	70a3      	strb	r3, [r4, #2]
						     p - header_value_mark);
   236be:	9b12      	ldr	r3, [sp, #72]	; 0x48
					rc = cb_data(parser,
   236c0:	f8d9 1010 	ldr.w	r1, [r9, #16]
						     p - header_value_mark);
   236c4:	ebaa 0303 	sub.w	r3, sl, r3
					rc = cb_data(parser,
   236c8:	9303      	str	r3, [sp, #12]
   236ca:	ab12      	add	r3, sp, #72	; 0x48
   236cc:	e9cd 2301 	strd	r2, r3, [sp, #4]
   236d0:	ab10      	add	r3, sp, #64	; 0x40
   236d2:	9300      	str	r3, [sp, #0]
   236d4:	2204      	movs	r2, #4
   236d6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   236da:	f011 ff66 	bl	355aa <cb_data>
					if (rc != 0) {
   236de:	2800      	cmp	r0, #0
   236e0:	f47f aa33 	bne.w	22b4a <http_parser_execute+0x4a>
   236e4:	4656      	mov	r6, sl
   236e6:	f7ff bac0 	b.w	22c6a <http_parser_execute+0x16a>
				if (!lenient && !IS_HEADER_CHAR(ch)) {
   236ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   236ec:	b95b      	cbnz	r3, 23706 <http_parser_execute+0xc06>
   236ee:	2d09      	cmp	r5, #9
   236f0:	d009      	beq.n	23706 <http_parser_execute+0xc06>
   236f2:	2d1f      	cmp	r5, #31
   236f4:	d901      	bls.n	236fa <http_parser_execute+0xbfa>
   236f6:	2d7f      	cmp	r5, #127	; 0x7f
   236f8:	d105      	bne.n	23706 <http_parser_execute+0xc06>
					SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   236fa:	2218      	movs	r2, #24
   236fc:	7de3      	ldrb	r3, [r4, #23]
		parser->http_errno = HPE_HEADER_OVERFLOW;
   236fe:	f362 0306 	bfi	r3, r2, #0, #7
   23702:	75e3      	strb	r3, [r4, #23]
   23704:	e055      	b.n	237b2 <http_parser_execute+0xcb2>
				c = LOWER(ch);
   23706:	f045 0320 	orr.w	r3, r5, #32
	switch (h_state) {
   2370a:	2f16      	cmp	r7, #22
   2370c:	f200 8103 	bhi.w	23916 <http_parser_execute+0xe16>
   23710:	e8df f017 	tbh	[pc, r7, lsl #1]
   23714:	0101001e 	.word	0x0101001e
   23718:	01010101 	.word	0x01010101
   2371c:	01010101 	.word	0x01010101
   23720:	01010101 	.word	0x01010101
   23724:	00370101 	.word	0x00370101
   23728:	0037003f 	.word	0x0037003f
   2372c:	00740101 	.word	0x00740101
   23730:	009c008a 	.word	0x009c008a
   23734:	00c800b2 	.word	0x00c800b2
   23738:	00e700de 	.word	0x00e700de
   2373c:	00e900e9 	.word	0x00e900e9
   23740:	00e9      	.short	0x00e9
   23742:	bf00      	nop
   23744:	0003affe 	.word	0x0003affe
   23748:	0003b00d 	.word	0x0003b00d
   2374c:	0003b01f 	.word	0x0003b01f
		size_t limit = data + len - p;
   23750:	ebab 020a 	sub.w	r2, fp, sl
		limit = MIN(limit, HTTP_MAX_HEADER_SIZE);
   23754:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   23758:	bf28      	it	cs
   2375a:	f44f 32a0 	movcs.w	r2, #81920	; 0x14000
		p_cr = (const char *)memchr(p, CR, limit);
   2375e:	210d      	movs	r1, #13
   23760:	4650      	mov	r0, sl
   23762:	920c      	str	r2, [sp, #48]	; 0x30
   23764:	f013 fe31 	bl	373ca <memchr>
   23768:	4605      	mov	r5, r0
		p_lf = (const char *)memchr(p, LF, limit);
   2376a:	210a      	movs	r1, #10
   2376c:	4650      	mov	r0, sl
   2376e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23770:	f013 fe2b 	bl	373ca <memchr>
		if (p_cr != NULL) {
   23774:	b145      	cbz	r5, 23788 <http_parser_execute+0xc88>
			if (p_lf != NULL && p_cr >= p_lf) {
   23776:	b110      	cbz	r0, 2377e <http_parser_execute+0xc7e>
   23778:	4285      	cmp	r5, r0
   2377a:	bf28      	it	cs
   2377c:	4605      	movcs	r5, r0
		--p;
   2377e:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
			for (; p != data + len; p++) {
   23782:	f10a 0a01 	add.w	sl, sl, #1
   23786:	e752      	b.n	2362e <http_parser_execute+0xb2e>
		} else if (UNLIKELY(p_lf != NULL)) {
   23788:	2800      	cmp	r0, #0
   2378a:	bf14      	ite	ne
   2378c:	4605      	movne	r5, r0
   2378e:	465d      	moveq	r5, fp
   23790:	e7f5      	b.n	2377e <http_parser_execute+0xc7e>
		if (ch == ' ') {
   23792:	2d20      	cmp	r5, #32
   23794:	d0f5      	beq.n	23782 <http_parser_execute+0xc82>
		if (UNLIKELY(!IS_NUM(ch))) {
   23796:	3d30      	subs	r5, #48	; 0x30
   23798:	b2eb      	uxtb	r3, r5
   2379a:	2b09      	cmp	r3, #9
   2379c:	d90c      	bls.n	237b8 <http_parser_execute+0xcb8>
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   2379e:	2219      	movs	r2, #25
   237a0:	7de3      	ldrb	r3, [r4, #23]
   237a2:	f362 0306 	bfi	r3, r2, #0, #7
			parser->header_state = h_state;
   237a6:	220a      	movs	r2, #10
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   237a8:	75e3      	strb	r3, [r4, #23]
			parser->header_state = h_state;
   237aa:	78a3      	ldrb	r3, [r4, #2]
   237ac:	f362 0347 	bfi	r3, r2, #1, #7
			parser->header_state = h_state;
   237b0:	70a3      	strb	r3, [r4, #2]
		parser->http_errno = HPE_HEADER_OVERFLOW;
   237b2:	4656      	mov	r6, sl
   237b4:	f7ff ba2c 	b.w	22c10 <http_parser_execute+0x110>
		t *= 10U;
   237b8:	f04f 0c0a 	mov.w	ip, #10
		t = parser->content_length;
   237bc:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
		t *= 10U;
   237c0:	fba0 230c 	umull	r2, r3, r0, ip
   237c4:	fb0c 3301 	mla	r3, ip, r1, r3
		t += ch - '0';
   237c8:	1952      	adds	r2, r2, r5
   237ca:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   237ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (UNLIKELY(value < parser->content_length)) {
   237d2:	f04f 3299 	mov.w	r2, #2576980377	; 0x99999999
   237d6:	4bb2      	ldr	r3, [pc, #712]	; (23aa0 <http_parser_execute+0xfa0>)
   237d8:	4299      	cmp	r1, r3
   237da:	bf08      	it	eq
   237dc:	4290      	cmpeq	r0, r2
   237de:	d308      	bcc.n	237f2 <http_parser_execute+0xcf2>
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   237e0:	2219      	movs	r2, #25
   237e2:	7de3      	ldrb	r3, [r4, #23]
   237e4:	f362 0306 	bfi	r3, r2, #0, #7
   237e8:	75e3      	strb	r3, [r4, #23]
			parser->header_state = h_state;
   237ea:	78a3      	ldrb	r3, [r4, #2]
   237ec:	f36c 0347 	bfi	r3, ip, #1, #7
   237f0:	e7de      	b.n	237b0 <http_parser_execute+0xcb0>
		parser->content_length = t;
   237f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   237f6:	e9c4 2302 	strd	r2, r3, [r4, #8]
		break;
   237fa:	e7c2      	b.n	23782 <http_parser_execute+0xc82>
		parser->index++;
   237fc:	78e1      	ldrb	r1, [r4, #3]
   237fe:	1c4a      	adds	r2, r1, #1
   23800:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23804:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != CHUNKED[parser->index]) {
   23808:	2a07      	cmp	r2, #7
		parser->index++;
   2380a:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != CHUNKED[parser->index]) {
   2380c:	f200 8086 	bhi.w	2391c <http_parser_execute+0xe1c>
   23810:	49a4      	ldr	r1, [pc, #656]	; (23aa4 <http_parser_execute+0xfa4>)
   23812:	5c8a      	ldrb	r2, [r1, r2]
   23814:	429a      	cmp	r2, r3
   23816:	f040 8081 	bne.w	2391c <http_parser_execute+0xe1c>
		} else if (parser->index == sizeof(CHUNKED) - 2) {
   2381a:	78e3      	ldrb	r3, [r4, #3]
   2381c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_transfer_encoding_chunked;
   23820:	2b06      	cmp	r3, #6
   23822:	bf08      	it	eq
   23824:	2713      	moveq	r7, #19
   23826:	e7ac      	b.n	23782 <http_parser_execute+0xc82>
		if (c == 'k') {
   23828:	2b6b      	cmp	r3, #107	; 0x6b
   2382a:	f000 82df 	beq.w	23dec <http_parser_execute+0x12ec>
		} else if (c == 'c') {
   2382e:	2b63      	cmp	r3, #99	; 0x63
   23830:	f000 82de 	beq.w	23df0 <http_parser_execute+0x12f0>
		} else if (c == 'u') {
   23834:	2b75      	cmp	r3, #117	; 0x75
   23836:	f000 82dd 	beq.w	23df4 <http_parser_execute+0x12f4>
		} else if (STRICT_TOKEN(c)) {
   2383a:	4a9b      	ldr	r2, [pc, #620]	; (23aa8 <http_parser_execute+0xfa8>)
   2383c:	5cd2      	ldrb	r2, [r2, r3]
   2383e:	2a00      	cmp	r2, #0
   23840:	f040 82da 	bne.w	23df8 <http_parser_execute+0x12f8>
			h_state = h_general;
   23844:	2b20      	cmp	r3, #32
			h_state = h_general;
   23846:	bf18      	it	ne
   23848:	2700      	movne	r7, #0
   2384a:	e79a      	b.n	23782 <http_parser_execute+0xc82>
		parser->index++;
   2384c:	78e1      	ldrb	r1, [r4, #3]
   2384e:	1c4a      	adds	r2, r1, #1
   23850:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23854:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != KEEP_ALIVE[parser->index]) {
   23858:	2a0a      	cmp	r2, #10
		parser->index++;
   2385a:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != KEEP_ALIVE[parser->index]) {
   2385c:	f200 82cc 	bhi.w	23df8 <http_parser_execute+0x12f8>
   23860:	4992      	ldr	r1, [pc, #584]	; (23aac <http_parser_execute+0xfac>)
   23862:	5c8a      	ldrb	r2, [r1, r2]
   23864:	429a      	cmp	r2, r3
   23866:	f040 82c7 	bne.w	23df8 <http_parser_execute+0x12f8>
		} else if (parser->index == sizeof(KEEP_ALIVE) - 2) {
   2386a:	78e3      	ldrb	r3, [r4, #3]
   2386c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_keep_alive;
   23870:	2b09      	cmp	r3, #9
   23872:	bf08      	it	eq
   23874:	2714      	moveq	r7, #20
   23876:	e784      	b.n	23782 <http_parser_execute+0xc82>
		parser->index++;
   23878:	78e1      	ldrb	r1, [r4, #3]
   2387a:	1c4a      	adds	r2, r1, #1
   2387c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23880:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != CLOSE[parser->index]) {
   23884:	2a05      	cmp	r2, #5
		parser->index++;
   23886:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != CLOSE[parser->index]) {
   23888:	f200 82b6 	bhi.w	23df8 <http_parser_execute+0x12f8>
   2388c:	4988      	ldr	r1, [pc, #544]	; (23ab0 <http_parser_execute+0xfb0>)
   2388e:	5c8a      	ldrb	r2, [r1, r2]
   23890:	429a      	cmp	r2, r3
   23892:	f040 82b1 	bne.w	23df8 <http_parser_execute+0x12f8>
		} else if (parser->index == sizeof(CLOSE) - 2) {
   23896:	78e3      	ldrb	r3, [r4, #3]
   23898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_close;
   2389c:	2b04      	cmp	r3, #4
   2389e:	bf08      	it	eq
   238a0:	2715      	moveq	r7, #21
   238a2:	e76e      	b.n	23782 <http_parser_execute+0xc82>
		parser->index++;
   238a4:	78e1      	ldrb	r1, [r4, #3]
   238a6:	1c4a      	adds	r2, r1, #1
   238a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   238ac:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != UPGRADE[parser->index]) {
   238b0:	2a07      	cmp	r2, #7
		parser->index++;
   238b2:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != UPGRADE[parser->index]) {
   238b4:	f200 82a0 	bhi.w	23df8 <http_parser_execute+0x12f8>
   238b8:	497e      	ldr	r1, [pc, #504]	; (23ab4 <http_parser_execute+0xfb4>)
   238ba:	5c8a      	ldrb	r2, [r1, r2]
   238bc:	429a      	cmp	r2, r3
   238be:	f040 829b 	bne.w	23df8 <http_parser_execute+0x12f8>
		} else if (parser->index == sizeof(UPGRADE) - 2) {
   238c2:	78e3      	ldrb	r3, [r4, #3]
   238c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_upgrade;
   238c8:	2b06      	cmp	r3, #6
   238ca:	bf08      	it	eq
   238cc:	2716      	moveq	r7, #22
   238ce:	e758      	b.n	23782 <http_parser_execute+0xc82>
		if (ch == ',') {
   238d0:	2d2c      	cmp	r5, #44	; 0x2c
   238d2:	f47f af56 	bne.w	23782 <http_parser_execute+0xc82>
			parser->index = 0U;
   238d6:	78e3      	ldrb	r3, [r4, #3]
			h_state = h_matching_connection_token_start;
   238d8:	270e      	movs	r7, #14
			parser->index = 0U;
   238da:	f36f 0306 	bfc	r3, #0, #7
   238de:	70e3      	strb	r3, [r4, #3]
   238e0:	e74f      	b.n	23782 <http_parser_execute+0xc82>
			h_state = h_general;
   238e2:	2d20      	cmp	r5, #32
   238e4:	e7af      	b.n	23846 <http_parser_execute+0xd46>
		if (ch == ',') {
   238e6:	2d2c      	cmp	r5, #44	; 0x2c
   238e8:	d111      	bne.n	2390e <http_parser_execute+0xe0e>
			if (h_state == h_connection_keep_alive) {
   238ea:	8823      	ldrh	r3, [r4, #0]
   238ec:	2f14      	cmp	r7, #20
   238ee:	f3c3 0287 	ubfx	r2, r3, #2, #8
   238f2:	d105      	bne.n	23900 <http_parser_execute+0xe00>
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   238f4:	f042 0202 	orr.w	r2, r2, #2
				parser->flags |= F_CONNECTION_UPGRADE;
   238f8:	f362 0389 	bfi	r3, r2, #2, #8
   238fc:	8023      	strh	r3, [r4, #0]
   238fe:	e7ea      	b.n	238d6 <http_parser_execute+0xdd6>
			} else if (h_state == h_connection_close) {
   23900:	2f15      	cmp	r7, #21
				parser->flags |= F_CONNECTION_CLOSE;
   23902:	bf0c      	ite	eq
   23904:	f042 0204 	orreq.w	r2, r2, #4
				parser->flags |= F_CONNECTION_UPGRADE;
   23908:	f042 0208 	orrne.w	r2, r2, #8
   2390c:	e7f4      	b.n	238f8 <http_parser_execute+0xdf8>
			h_state = h_matching_connection_token;
   2390e:	2d20      	cmp	r5, #32
   23910:	bf18      	it	ne
   23912:	2712      	movne	r7, #18
   23914:	e735      	b.n	23782 <http_parser_execute+0xc82>
		*p_state = s_header_value;
   23916:	2330      	movs	r3, #48	; 0x30
   23918:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			h_state = h_general;
   2391c:	2700      	movs	r7, #0
   2391e:	e730      	b.n	23782 <http_parser_execute+0xc82>
			if (p == data + len) {
   23920:	45d3      	cmp	fp, sl
   23922:	f43f adf9 	beq.w	23518 <http_parser_execute+0xa18>
   23926:	4656      	mov	r6, sl
   23928:	f7ff ba3f 	b.w	22daa <http_parser_execute+0x2aa>
			if (UNLIKELY(ch != LF)) {
   2392c:	2d0a      	cmp	r5, #10
   2392e:	f47f ace5 	bne.w	232fc <http_parser_execute+0x7fc>
			UPDATE_STATE(s_header_value_lws);
   23932:	2331      	movs	r3, #49	; 0x31
   23934:	f7ff ba37 	b.w	22da6 <http_parser_execute+0x2a6>
			if (ch == ' ' || ch == '\t') {
   23938:	2d20      	cmp	r5, #32
   2393a:	d001      	beq.n	23940 <http_parser_execute+0xe40>
   2393c:	2d09      	cmp	r5, #9
   2393e:	d102      	bne.n	23946 <http_parser_execute+0xe46>
				UPDATE_STATE(s_header_value_start);
   23940:	232f      	movs	r3, #47	; 0x2f
   23942:	f7ff b990 	b.w	22c66 <http_parser_execute+0x166>
			switch (parser->header_state) {
   23946:	78a3      	ldrb	r3, [r4, #2]
   23948:	085b      	lsrs	r3, r3, #1
   2394a:	3b13      	subs	r3, #19
   2394c:	2b03      	cmp	r3, #3
   2394e:	d807      	bhi.n	23960 <http_parser_execute+0xe60>
   23950:	e8df f003 	tbb	[pc, r3]
   23954:	1109020d 	.word	0x1109020d
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   23958:	8823      	ldrh	r3, [r4, #0]
   2395a:	f043 0308 	orr.w	r3, r3, #8
				parser->flags |= F_CONNECTION_UPGRADE;
   2395e:	8023      	strh	r3, [r4, #0]
			UPDATE_STATE(s_header_field_start);
   23960:	232a      	movs	r3, #42	; 0x2a
   23962:	f7ff b980 	b.w	22c66 <http_parser_execute+0x166>
				parser->flags |= F_CONNECTION_CLOSE;
   23966:	8823      	ldrh	r3, [r4, #0]
   23968:	f043 0310 	orr.w	r3, r3, #16
   2396c:	e7f7      	b.n	2395e <http_parser_execute+0xe5e>
				parser->flags |= F_CHUNKED;
   2396e:	8823      	ldrh	r3, [r4, #0]
   23970:	f043 0304 	orr.w	r3, r3, #4
   23974:	e7f3      	b.n	2395e <http_parser_execute+0xe5e>
				parser->flags |= F_CONNECTION_UPGRADE;
   23976:	8823      	ldrh	r3, [r4, #0]
   23978:	f043 0320 	orr.w	r3, r3, #32
   2397c:	e7ef      	b.n	2395e <http_parser_execute+0xe5e>
			if (ch == ' ' || ch == '\t') {
   2397e:	2d20      	cmp	r5, #32
   23980:	d001      	beq.n	23986 <http_parser_execute+0xe86>
   23982:	2d09      	cmp	r5, #9
   23984:	d102      	bne.n	2398c <http_parser_execute+0xe8c>
				UPDATE_STATE(s_header_value_discard_ws);
   23986:	232c      	movs	r3, #44	; 0x2c
   23988:	f7ff ba0d 	b.w	22da6 <http_parser_execute+0x2a6>
			switch (parser->header_state) {
   2398c:	78a3      	ldrb	r3, [r4, #2]
   2398e:	085b      	lsrs	r3, r3, #1
   23990:	3b13      	subs	r3, #19
   23992:	2b03      	cmp	r3, #3
   23994:	d807      	bhi.n	239a6 <http_parser_execute+0xea6>
   23996:	e8df f003 	tbb	[pc, r3]
   2399a:	0227      	.short	0x0227
   2399c:	231f      	.short	0x231f
				parser->flags |=
   2399e:	8823      	ldrh	r3, [r4, #0]
   239a0:	f043 0308 	orr.w	r3, r3, #8
				parser->flags |= F_CHUNKED;
   239a4:	8023      	strh	r3, [r4, #0]
			MARK(header_value);
   239a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   239a8:	b903      	cbnz	r3, 239ac <http_parser_execute+0xeac>
   239aa:	9612      	str	r6, [sp, #72]	; 0x48
			UPDATE_STATE(s_header_field_start);
   239ac:	232a      	movs	r3, #42	; 0x2a
			rc = cb_data(parser, settings->on_header_value,
   239ae:	2204      	movs	r2, #4
			UPDATE_STATE(s_header_field_start);
   239b0:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
				     p - header_value_mark);
   239b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
			rc = cb_data(parser, settings->on_header_value,
   239b6:	f8d9 1010 	ldr.w	r1, [r9, #16]
				     p - header_value_mark);
   239ba:	1af3      	subs	r3, r6, r3
			rc = cb_data(parser, settings->on_header_value,
   239bc:	9303      	str	r3, [sp, #12]
   239be:	ab12      	add	r3, sp, #72	; 0x48
   239c0:	9302      	str	r3, [sp, #8]
				     p - data, &header_value_mark,
   239c2:	eba6 0308 	sub.w	r3, r6, r8
			rc = cb_data(parser, settings->on_header_value,
   239c6:	9301      	str	r3, [sp, #4]
   239c8:	ab10      	add	r3, sp, #64	; 0x40
   239ca:	9300      	str	r3, [sp, #0]
   239cc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
				rc = cb_data(parser, settings->on_body,
   239d0:	4620      	mov	r0, r4
   239d2:	f011 fdea 	bl	355aa <cb_data>
   239d6:	e021      	b.n	23a1c <http_parser_execute+0xf1c>
				parser->flags |= F_CONNECTION_CLOSE;
   239d8:	8823      	ldrh	r3, [r4, #0]
   239da:	f043 0310 	orr.w	r3, r3, #16
   239de:	e7e1      	b.n	239a4 <http_parser_execute+0xea4>
				parser->flags |= F_CONNECTION_UPGRADE;
   239e0:	8823      	ldrh	r3, [r4, #0]
   239e2:	f043 0320 	orr.w	r3, r3, #32
   239e6:	e7dd      	b.n	239a4 <http_parser_execute+0xea4>
				parser->flags |= F_CHUNKED;
   239e8:	8823      	ldrh	r3, [r4, #0]
   239ea:	f043 0304 	orr.w	r3, r3, #4
   239ee:	e7d9      	b.n	239a4 <http_parser_execute+0xea4>
			if (parser->flags & F_TRAILING) {
   239f0:	8823      	ldrh	r3, [r4, #0]
   239f2:	f3c3 0187 	ubfx	r1, r3, #2, #8
   239f6:	0658      	lsls	r0, r3, #25
   239f8:	460a      	mov	r2, r1
   239fa:	d514      	bpl.n	23a26 <http_parser_execute+0xf26>
				UPDATE_STATE(s_message_done);
   239fc:	233e      	movs	r3, #62	; 0x3e
   239fe:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
					       p - data);
   23a02:	eba6 0308 	sub.w	r3, r6, r8
				rc = cb_notify(parser, &p_state,
   23a06:	9301      	str	r3, [sp, #4]
   23a08:	ab10      	add	r3, sp, #64	; 0x40
   23a0a:	9300      	str	r3, [sp, #0]
   23a0c:	4620      	mov	r0, r4
   23a0e:	230a      	movs	r3, #10
   23a10:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
   23a14:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
   23a18:	f011 fda6 	bl	35568 <cb_notify>
				if (rc != 0) {
   23a1c:	2800      	cmp	r0, #0
   23a1e:	f43f a924 	beq.w	22c6a <http_parser_execute+0x16a>
   23a22:	f7ff b892 	b.w	22b4a <http_parser_execute+0x4a>
			if ((parser->flags & F_CHUNKED) &&
   23a26:	f011 0f01 	tst.w	r1, #1
   23a2a:	7de3      	ldrb	r3, [r4, #23]
   23a2c:	d002      	beq.n	23a34 <http_parser_execute+0xf34>
   23a2e:	0609      	lsls	r1, r1, #24
   23a30:	f53f adde 	bmi.w	235f0 <http_parser_execute+0xaf0>
			UPDATE_STATE(s_headers_done);
   23a34:	2138      	movs	r1, #56	; 0x38
				((parser->flags & flags) == flags ||
   23a36:	f002 0228 	and.w	r2, r2, #40	; 0x28
   23a3a:	2a28      	cmp	r2, #40	; 0x28
			UPDATE_STATE(s_headers_done);
   23a3c:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
				((parser->flags & flags) == flags ||
   23a40:	d01d      	beq.n	23a7e <http_parser_execute+0xf7e>
   23a42:	7da2      	ldrb	r2, [r4, #22]
   23a44:	1f57      	subs	r7, r2, #5
   23a46:	427a      	negs	r2, r7
   23a48:	417a      	adcs	r2, r7
			parser->upgrade =
   23a4a:	f362 13c7 	bfi	r3, r2, #7, #1
   23a4e:	75e3      	strb	r3, [r4, #23]
			if (settings->on_headers_complete) {
   23a50:	f8d9 3014 	ldr.w	r3, [r9, #20]
   23a54:	b133      	cbz	r3, 23a64 <http_parser_execute+0xf64>
				switch (settings->on_headers_complete(parser)) {
   23a56:	4620      	mov	r0, r4
   23a58:	4798      	blx	r3
   23a5a:	2801      	cmp	r0, #1
   23a5c:	d015      	beq.n	23a8a <http_parser_execute+0xf8a>
   23a5e:	2802      	cmp	r0, #2
   23a60:	d00f      	beq.n	23a82 <http_parser_execute+0xf82>
   23a62:	b9b8      	cbnz	r0, 23a94 <http_parser_execute+0xf94>
			if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   23a64:	7de3      	ldrb	r3, [r4, #23]
   23a66:	0658      	lsls	r0, r3, #25
   23a68:	f43f a8ff 	beq.w	22c6a <http_parser_execute+0x16a>
	parser->state = CURRENT_STATE();
   23a6c:	6823      	ldr	r3, [r4, #0]
   23a6e:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
	*parsed = p - data; /* Error */
   23a72:	eba6 0608 	sub.w	r6, r6, r8
	parser->state = CURRENT_STATE();
   23a76:	f362 2390 	bfi	r3, r2, #10, #7
   23a7a:	6023      	str	r3, [r4, #0]
	*parsed = p - data; /* Error */
   23a7c:	e063      	b.n	23b46 <http_parser_execute+0x1046>
				((parser->flags & flags) == flags ||
   23a7e:	2201      	movs	r2, #1
   23a80:	e7e3      	b.n	23a4a <http_parser_execute+0xf4a>
					parser->upgrade = 1U;
   23a82:	7de3      	ldrb	r3, [r4, #23]
   23a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23a88:	75e3      	strb	r3, [r4, #23]
					parser->flags |= F_SKIPBODY;
   23a8a:	8823      	ldrh	r3, [r4, #0]
   23a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23a90:	8023      	strh	r3, [r4, #0]
					break;
   23a92:	e7e7      	b.n	23a64 <http_parser_execute+0xf64>
					SET_ERRNO(HPE_CB_headers_complete);
   23a94:	2205      	movs	r2, #5
   23a96:	7de3      	ldrb	r3, [r4, #23]
		SET_ERRNO(HPE_UNKNOWN);
   23a98:	f362 0306 	bfi	r3, r2, #0, #7
   23a9c:	75e3      	strb	r3, [r4, #23]
   23a9e:	e7e5      	b.n	23a6c <http_parser_execute+0xf6c>
   23aa0:	19999999 	.word	0x19999999
   23aa4:	0003b027 	.word	0x0003b027
   23aa8:	0003b670 	.word	0x0003b670
   23aac:	0003b02f 	.word	0x0003b02f
   23ab0:	0003c314 	.word	0x0003c314
   23ab4:	0003b01f 	.word	0x0003b01f
			parser->nread = 0U;
   23ab8:	2300      	movs	r3, #0
   23aba:	6063      	str	r3, [r4, #4]
			hasBody = parser->flags & F_CHUNKED ||
   23abc:	8823      	ldrh	r3, [r4, #0]
   23abe:	0759      	lsls	r1, r3, #29
   23ac0:	f3c3 0287 	ubfx	r2, r3, #2, #8
   23ac4:	f3c3 0580 	ubfx	r5, r3, #2, #1
   23ac8:	d440      	bmi.n	23b4c <http_parser_execute+0x104c>
				  (parser->content_length > 0 &&
   23aca:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   23ace:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   23ad2:	9308      	str	r3, [sp, #32]
   23ad4:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
			hasBody = parser->flags & F_CHUNKED ||
   23ad8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23adc:	f06f 0002 	mvn.w	r0, #2
				  (parser->content_length > 0 &&
   23ae0:	9309      	str	r3, [sp, #36]	; 0x24
			hasBody = parser->flags & F_CHUNKED ||
   23ae2:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
   23ae6:	4559      	cmp	r1, fp
   23ae8:	bf08      	it	eq
   23aea:	4550      	cmpeq	r0, sl
   23aec:	bf2c      	ite	cs
   23aee:	2301      	movcs	r3, #1
   23af0:	2300      	movcc	r3, #0
			if (parser->upgrade &&
   23af2:	f994 1017 	ldrsb.w	r1, [r4, #23]
   23af6:	2900      	cmp	r1, #0
   23af8:	da2a      	bge.n	23b50 <http_parser_execute+0x1050>
   23afa:	7da1      	ldrb	r1, [r4, #22]
   23afc:	2905      	cmp	r1, #5
   23afe:	d003      	beq.n	23b08 <http_parser_execute+0x1008>
				(parser->method == HTTP_CONNECT ||
   23b00:	0652      	lsls	r2, r2, #25
   23b02:	d401      	bmi.n	23b08 <http_parser_execute+0x1008>
				 (parser->flags & F_SKIPBODY) || !hasBody)) {
   23b04:	2b00      	cmp	r3, #0
   23b06:	d138      	bne.n	23b7a <http_parser_execute+0x107a>
				UPDATE_STATE(NEW_MESSAGE());
   23b08:	7823      	ldrb	r3, [r4, #0]
					       p - data + 1);
   23b0a:	eba6 0608 	sub.w	r6, r6, r8
				UPDATE_STATE(NEW_MESSAGE());
   23b0e:	f013 0f03 	tst.w	r3, #3
   23b12:	bf0c      	ite	eq
   23b14:	2312      	moveq	r3, #18
   23b16:	2304      	movne	r3, #4
					       p - data + 1);
   23b18:	3601      	adds	r6, #1
				UPDATE_STATE(NEW_MESSAGE());
   23b1a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
				rc = cb_notify(parser, &p_state,
   23b1e:	ab10      	add	r3, sp, #64	; 0x40
   23b20:	9300      	str	r3, [sp, #0]
   23b22:	4620      	mov	r0, r4
   23b24:	2307      	movs	r3, #7
   23b26:	f8d9 201c 	ldr.w	r2, [r9, #28]
   23b2a:	9601      	str	r6, [sp, #4]
   23b2c:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
   23b30:	f011 fd1a 	bl	35568 <cb_notify>
				if (rc != 0) {
   23b34:	2800      	cmp	r0, #0
   23b36:	f47f a808 	bne.w	22b4a <http_parser_execute+0x4a>
				parser->state = CURRENT_STATE();
   23b3a:	6823      	ldr	r3, [r4, #0]
   23b3c:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
   23b40:	f362 2390 	bfi	r3, r2, #10, #7
   23b44:	6023      	str	r3, [r4, #0]
	*parsed = p - data; /* Error */
   23b46:	9610      	str	r6, [sp, #64]	; 0x40
	return -HTTP_PARSER_ERRNO(parser);
   23b48:	f7fe bfff 	b.w	22b4a <http_parser_execute+0x4a>
			hasBody = parser->flags & F_CHUNKED ||
   23b4c:	2301      	movs	r3, #1
   23b4e:	e7d0      	b.n	23af2 <http_parser_execute+0xff2>
			if (parser->flags & F_SKIPBODY) {
   23b50:	0657      	lsls	r7, r2, #25
   23b52:	d512      	bpl.n	23b7a <http_parser_execute+0x107a>
				UPDATE_STATE(NEW_MESSAGE());
   23b54:	7823      	ldrb	r3, [r4, #0]
				rc = cb_notify(parser, &p_state,
   23b56:	f8d9 201c 	ldr.w	r2, [r9, #28]
				UPDATE_STATE(NEW_MESSAGE());
   23b5a:	f013 0f03 	tst.w	r3, #3
   23b5e:	bf0c      	ite	eq
   23b60:	2312      	moveq	r3, #18
   23b62:	2304      	movne	r3, #4
   23b64:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
					       p - data + 1);
   23b68:	eba6 0308 	sub.w	r3, r6, r8
   23b6c:	3301      	adds	r3, #1
				rc = cb_notify(parser, &p_state,
   23b6e:	9301      	str	r3, [sp, #4]
   23b70:	ab10      	add	r3, sp, #64	; 0x40
   23b72:	9300      	str	r3, [sp, #0]
   23b74:	2307      	movs	r3, #7
   23b76:	f7ff b9a7 	b.w	22ec8 <http_parser_execute+0x3c8>
			} else if (parser->flags & F_CHUNKED) {
   23b7a:	b115      	cbz	r5, 23b82 <http_parser_execute+0x1082>
				UPDATE_STATE(s_chunk_size_start);
   23b7c:	2333      	movs	r3, #51	; 0x33
   23b7e:	f7ff b912 	b.w	22da6 <http_parser_execute+0x2a6>
	enum state p_state = *current_state;
   23b82:	2338      	movs	r3, #56	; 0x38
   23b84:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	if (parser->content_length == 0U) {
   23b88:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   23b8c:	ea52 0103 	orrs.w	r1, r2, r3
   23b90:	d11c      	bne.n	23bcc <http_parser_execute+0x10cc>
			UPDATE_STATE(NEW_MESSAGE());
   23b92:	7823      	ldrb	r3, [r4, #0]
			rc = cb_notify(parser, &p_state,
   23b94:	4620      	mov	r0, r4
			UPDATE_STATE(NEW_MESSAGE());
   23b96:	f013 0f03 	tst.w	r3, #3
   23b9a:	bf0c      	ite	eq
   23b9c:	2312      	moveq	r3, #18
   23b9e:	2304      	movne	r3, #4
   23ba0:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
				       p - data + 1);
   23ba4:	eba6 0308 	sub.w	r3, r6, r8
   23ba8:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   23baa:	9301      	str	r3, [sp, #4]
   23bac:	ab10      	add	r3, sp, #64	; 0x40
   23bae:	9300      	str	r3, [sp, #0]
   23bb0:	f8d9 201c 	ldr.w	r2, [r9, #28]
   23bb4:	2307      	movs	r3, #7
   23bb6:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   23bba:	f011 fcd5 	bl	35568 <cb_notify>
			if (rc != 0) {
   23bbe:	2800      	cmp	r0, #0
   23bc0:	f47e afc3 	bne.w	22b4a <http_parser_execute+0x4a>
	*current_state = p_state;
   23bc4:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   23bc8:	f7ff b8ed 	b.w	22da6 <http_parser_execute+0x2a6>
	} else if (parser->content_length != ULLONG_MAX) {
   23bcc:	3301      	adds	r3, #1
   23bce:	bf08      	it	eq
   23bd0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   23bd4:	d003      	beq.n	23bde <http_parser_execute+0x10de>
		UPDATE_STATE(s_body_identity);
   23bd6:	233c      	movs	r3, #60	; 0x3c
			UPDATE_STATE(s_body_identity_eof);
   23bd8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
   23bdc:	e7f2      	b.n	23bc4 <http_parser_execute+0x10c4>
		if (!http_message_needs_eof(parser)) {
   23bde:	4620      	mov	r0, r4
   23be0:	f011 fd13 	bl	3560a <http_message_needs_eof>
   23be4:	2800      	cmp	r0, #0
   23be6:	d0d4      	beq.n	23b92 <http_parser_execute+0x1092>
			UPDATE_STATE(s_body_identity_eof);
   23be8:	233d      	movs	r3, #61	; 0x3d
   23bea:	e7f5      	b.n	23bd8 <http_parser_execute+0x10d8>
			uint64_t to_read = MIN(parser->content_length,
   23bec:	ebab 0206 	sub.w	r2, fp, r6
   23bf0:	17d3      	asrs	r3, r2, #31
   23bf2:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
			MARK(body);
   23bf6:	9f14      	ldr	r7, [sp, #80]	; 0x50
			uint64_t to_read = MIN(parser->content_length,
   23bf8:	4299      	cmp	r1, r3
   23bfa:	bf08      	it	eq
   23bfc:	4290      	cmpeq	r0, r2
   23bfe:	bf3c      	itt	cc
   23c00:	4602      	movcc	r2, r0
   23c02:	460b      	movcc	r3, r1
			MARK(body);
   23c04:	b907      	cbnz	r7, 23c08 <http_parser_execute+0x1108>
   23c06:	9614      	str	r6, [sp, #80]	; 0x50
			parser->content_length -= to_read;
   23c08:	1a87      	subs	r7, r0, r2
   23c0a:	eb61 0103 	sbc.w	r1, r1, r3
			p += to_read - 1;
   23c0e:	3a01      	subs	r2, #1
			parser->content_length -= to_read;
   23c10:	9704      	str	r7, [sp, #16]
   23c12:	9105      	str	r1, [sp, #20]
   23c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
			p += to_read - 1;
   23c18:	4416      	add	r6, r2
			if (parser->content_length == 0U) {
   23c1a:	460b      	mov	r3, r1
   23c1c:	4602      	mov	r2, r0
   23c1e:	4313      	orrs	r3, r2
			parser->content_length -= to_read;
   23c20:	e9c4 0102 	strd	r0, r1, [r4, #8]
			if (parser->content_length == 0U) {
   23c24:	f47f a8c1 	bne.w	22daa <http_parser_execute+0x2aa>
				UPDATE_STATE(s_message_done);
   23c28:	233e      	movs	r3, #62	; 0x3e
   23c2a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
					     p - body_mark + 1);
   23c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
				rc = cb_data(parser, settings->on_body,
   23c30:	2206      	movs	r2, #6
					     p - body_mark + 1);
   23c32:	1af3      	subs	r3, r6, r3
   23c34:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_body,
   23c36:	9303      	str	r3, [sp, #12]
   23c38:	ab14      	add	r3, sp, #80	; 0x50
   23c3a:	9302      	str	r3, [sp, #8]
					     p - data, &body_mark,
   23c3c:	eba6 0308 	sub.w	r3, r6, r8
				rc = cb_data(parser, settings->on_body,
   23c40:	9301      	str	r3, [sp, #4]
   23c42:	ab10      	add	r3, sp, #64	; 0x40
   23c44:	9300      	str	r3, [sp, #0]
   23c46:	f8d9 1018 	ldr.w	r1, [r9, #24]
   23c4a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   23c4e:	e6bf      	b.n	239d0 <http_parser_execute+0xed0>
			MARK(body);
   23c50:	9b14      	ldr	r3, [sp, #80]	; 0x50
   23c52:	b903      	cbnz	r3, 23c56 <http_parser_execute+0x1156>
   23c54:	9614      	str	r6, [sp, #80]	; 0x50
			p = data + len - 1;
   23c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23c58:	1e5e      	subs	r6, r3, #1
   23c5a:	4446      	add	r6, r8
			break;
   23c5c:	f7ff b8a5 	b.w	22daa <http_parser_execute+0x2aa>
			UPDATE_STATE(NEW_MESSAGE());
   23c60:	7823      	ldrb	r3, [r4, #0]
				       p - data + 1);
   23c62:	eba6 0508 	sub.w	r5, r6, r8
			UPDATE_STATE(NEW_MESSAGE());
   23c66:	f013 0f03 	tst.w	r3, #3
   23c6a:	bf0c      	ite	eq
   23c6c:	2312      	moveq	r3, #18
   23c6e:	2304      	movne	r3, #4
				       p - data + 1);
   23c70:	3501      	adds	r5, #1
			UPDATE_STATE(NEW_MESSAGE());
   23c72:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			rc = cb_notify(parser, &p_state,
   23c76:	ab10      	add	r3, sp, #64	; 0x40
   23c78:	9300      	str	r3, [sp, #0]
   23c7a:	4620      	mov	r0, r4
   23c7c:	2307      	movs	r3, #7
   23c7e:	f8d9 201c 	ldr.w	r2, [r9, #28]
   23c82:	9501      	str	r5, [sp, #4]
   23c84:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
   23c88:	f011 fc6e 	bl	35568 <cb_notify>
			if (rc != 0) {
   23c8c:	2800      	cmp	r0, #0
   23c8e:	f47e af5c 	bne.w	22b4a <http_parser_execute+0x4a>
			if (parser->upgrade) {
   23c92:	f994 3017 	ldrsb.w	r3, [r4, #23]
   23c96:	2b00      	cmp	r3, #0
   23c98:	f6bf a887 	bge.w	22daa <http_parser_execute+0x2aa>
				parser->state = CURRENT_STATE();
   23c9c:	6823      	ldr	r3, [r4, #0]
   23c9e:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
				*parsed = p - data + 1;
   23ca2:	9510      	str	r5, [sp, #64]	; 0x40
				parser->state = CURRENT_STATE();
   23ca4:	f362 2390 	bfi	r3, r2, #10, #7
   23ca8:	6023      	str	r3, [r4, #0]
				return 0;
   23caa:	f7fe bf4e 	b.w	22b4a <http_parser_execute+0x4a>
			unhex_val = unhex[(unsigned char)ch];
   23cae:	4b56      	ldr	r3, [pc, #344]	; (23e08 <http_parser_execute+0x1308>)
   23cb0:	575a      	ldrsb	r2, [r3, r5]
			if (UNLIKELY(unhex_val == -1)) {
   23cb2:	1c50      	adds	r0, r2, #1
   23cb4:	d103      	bne.n	23cbe <http_parser_execute+0x11be>
				SET_ERRNO(HPE_INVALID_CHUNK_SIZE);
   23cb6:	221b      	movs	r2, #27
   23cb8:	7de3      	ldrb	r3, [r4, #23]
   23cba:	f7fe bf82 	b.w	22bc2 <http_parser_execute+0xc2>
			parser->content_length = unhex_val;
   23cbe:	b252      	sxtb	r2, r2
   23cc0:	17d3      	asrs	r3, r2, #31
   23cc2:	e9c4 2302 	strd	r2, r3, [r4, #8]
			UPDATE_STATE(s_chunk_size);
   23cc6:	2334      	movs	r3, #52	; 0x34
   23cc8:	f7ff b86d 	b.w	22da6 <http_parser_execute+0x2a6>
			if (ch == CR) {
   23ccc:	2d0d      	cmp	r5, #13
   23cce:	d102      	bne.n	23cd6 <http_parser_execute+0x11d6>
				UPDATE_STATE(s_chunk_size_almost_done);
   23cd0:	2336      	movs	r3, #54	; 0x36
   23cd2:	f7ff b868 	b.w	22da6 <http_parser_execute+0x2a6>
			unhex_val = unhex[(unsigned char)ch];
   23cd6:	4b4c      	ldr	r3, [pc, #304]	; (23e08 <http_parser_execute+0x1308>)
   23cd8:	575a      	ldrsb	r2, [r3, r5]
			if (unhex_val == -1) {
   23cda:	1c51      	adds	r1, r2, #1
   23cdc:	d106      	bne.n	23cec <http_parser_execute+0x11ec>
				if (ch == ';' || ch == ' ') {
   23cde:	2d3b      	cmp	r5, #59	; 0x3b
   23ce0:	d001      	beq.n	23ce6 <http_parser_execute+0x11e6>
   23ce2:	2d20      	cmp	r5, #32
   23ce4:	d1e7      	bne.n	23cb6 <http_parser_execute+0x11b6>
					UPDATE_STATE(s_chunk_parameters);
   23ce6:	2335      	movs	r3, #53	; 0x35
   23ce8:	f7ff b85d 	b.w	22da6 <http_parser_execute+0x2a6>
			t = parser->content_length;
   23cec:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
			t += unhex_val;
   23cf0:	b252      	sxtb	r2, r2
			t *= 16U;
   23cf2:	010f      	lsls	r7, r1, #4
   23cf4:	0105      	lsls	r5, r0, #4
			t += unhex_val;
   23cf6:	17d3      	asrs	r3, r2, #31
   23cf8:	1955      	adds	r5, r2, r5
			t *= 16U;
   23cfa:	ea47 7710 	orr.w	r7, r7, r0, lsr #28
			t += unhex_val;
   23cfe:	eb43 0707 	adc.w	r7, r3, r7
			if (UNLIKELY(ulong_value < parser->content_length)) {
   23d02:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
   23d06:	f06f 0201 	mvn.w	r2, #1
   23d0a:	428b      	cmp	r3, r1
   23d0c:	bf08      	it	eq
   23d0e:	4282      	cmpeq	r2, r0
   23d10:	f4ff ac64 	bcc.w	235dc <http_parser_execute+0xadc>
			parser->content_length = t;
   23d14:	e9c4 5702 	strd	r5, r7, [r4, #8]
			break;
   23d18:	f7ff b847 	b.w	22daa <http_parser_execute+0x2aa>
			if (ch == CR) {
   23d1c:	2d0d      	cmp	r5, #13
   23d1e:	f47f a844 	bne.w	22daa <http_parser_execute+0x2aa>
   23d22:	e7d5      	b.n	23cd0 <http_parser_execute+0x11d0>
			parser->nread = 0U;
   23d24:	2300      	movs	r3, #0
   23d26:	6063      	str	r3, [r4, #4]
			if (parser->content_length == 0U) {
   23d28:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   23d2c:	4313      	orrs	r3, r2
				parser->flags |= F_TRAILING;
   23d2e:	bf09      	itett	eq
   23d30:	8823      	ldrheq	r3, [r4, #0]
				UPDATE_STATE(s_chunk_data);
   23d32:	2339      	movne	r3, #57	; 0x39
				parser->flags |= F_TRAILING;
   23d34:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   23d38:	8023      	strheq	r3, [r4, #0]
				UPDATE_STATE(s_header_field_start);
   23d3a:	bf08      	it	eq
   23d3c:	232a      	moveq	r3, #42	; 0x2a
				UPDATE_STATE(s_chunk_data);
   23d3e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
				       p - data + 1);
   23d42:	eba6 0308 	sub.w	r3, r6, r8
   23d46:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   23d48:	9301      	str	r3, [sp, #4]
   23d4a:	ab10      	add	r3, sp, #64	; 0x40
   23d4c:	9300      	str	r3, [sp, #0]
   23d4e:	f8d9 2020 	ldr.w	r2, [r9, #32]
   23d52:	2309      	movs	r3, #9
   23d54:	f7ff b8b8 	b.w	22ec8 <http_parser_execute+0x3c8>
			uint64_t to_read = MIN(parser->content_length,
   23d58:	ebab 0206 	sub.w	r2, fp, r6
   23d5c:	17d3      	asrs	r3, r2, #31
   23d5e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
			MARK(body);
   23d62:	9d14      	ldr	r5, [sp, #80]	; 0x50
			uint64_t to_read = MIN(parser->content_length,
   23d64:	4299      	cmp	r1, r3
   23d66:	bf08      	it	eq
   23d68:	4290      	cmpeq	r0, r2
   23d6a:	bf3c      	itt	cc
   23d6c:	4602      	movcc	r2, r0
   23d6e:	460b      	movcc	r3, r1
			MARK(body);
   23d70:	b905      	cbnz	r5, 23d74 <http_parser_execute+0x1274>
   23d72:	9614      	str	r6, [sp, #80]	; 0x50
			parser->content_length -= to_read;
   23d74:	1a85      	subs	r5, r0, r2
   23d76:	eb61 0103 	sbc.w	r1, r1, r3
			p += to_read - 1;
   23d7a:	3a01      	subs	r2, #1
			parser->content_length -= to_read;
   23d7c:	9506      	str	r5, [sp, #24]
   23d7e:	9107      	str	r1, [sp, #28]
   23d80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
			p += to_read - 1;
   23d84:	4416      	add	r6, r2
			if (parser->content_length == 0U) {
   23d86:	460b      	mov	r3, r1
   23d88:	4602      	mov	r2, r0
   23d8a:	4313      	orrs	r3, r2
			parser->content_length -= to_read;
   23d8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
			if (parser->content_length == 0U) {
   23d90:	f47f a80b 	bne.w	22daa <http_parser_execute+0x2aa>
				UPDATE_STATE(s_chunk_data_almost_done);
   23d94:	233a      	movs	r3, #58	; 0x3a
   23d96:	f7ff b806 	b.w	22da6 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_chunk_data_done);
   23d9a:	233b      	movs	r3, #59	; 0x3b
   23d9c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
				     p - body_mark);
   23da0:	9b14      	ldr	r3, [sp, #80]	; 0x50
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   23da2:	2206      	movs	r2, #6
				     p - body_mark);
   23da4:	1af3      	subs	r3, r6, r3
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   23da6:	9303      	str	r3, [sp, #12]
   23da8:	ab14      	add	r3, sp, #80	; 0x50
   23daa:	9302      	str	r3, [sp, #8]
				     &p_state, parsed, p - data + 1, &body_mark,
   23dac:	eba6 0308 	sub.w	r3, r6, r8
   23db0:	3301      	adds	r3, #1
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   23db2:	9301      	str	r3, [sp, #4]
   23db4:	ab10      	add	r3, sp, #64	; 0x40
   23db6:	9300      	str	r3, [sp, #0]
   23db8:	f8d9 1018 	ldr.w	r1, [r9, #24]
   23dbc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   23dc0:	f7ff b8fa 	b.w	22fb8 <http_parser_execute+0x4b8>
			parser->nread = 0U;
   23dc4:	2300      	movs	r3, #0
   23dc6:	6063      	str	r3, [r4, #4]
			UPDATE_STATE(s_chunk_size_start);
   23dc8:	2333      	movs	r3, #51	; 0x33
   23dca:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
				       p - data + 1);
   23dce:	eba6 0308 	sub.w	r3, r6, r8
   23dd2:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   23dd4:	9301      	str	r3, [sp, #4]
   23dd6:	ab10      	add	r3, sp, #64	; 0x40
   23dd8:	9300      	str	r3, [sp, #0]
   23dda:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
   23dde:	230a      	movs	r3, #10
   23de0:	f7ff b872 	b.w	22ec8 <http_parser_execute+0x3c8>
			SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
   23de4:	221d      	movs	r2, #29
   23de6:	7de3      	ldrb	r3, [r4, #23]
   23de8:	f7fe beeb 	b.w	22bc2 <http_parser_execute+0xc2>
			h_state = h_matching_connection_keep_alive;
   23dec:	270f      	movs	r7, #15
   23dee:	e4c8      	b.n	23782 <http_parser_execute+0xc82>
			h_state = h_matching_connection_close;
   23df0:	2710      	movs	r7, #16
   23df2:	e4c6      	b.n	23782 <http_parser_execute+0xc82>
			h_state = h_matching_connection_upgrade;
   23df4:	2711      	movs	r7, #17
   23df6:	e4c4      	b.n	23782 <http_parser_execute+0xc82>
			h_state = h_matching_connection_token;
   23df8:	2712      	movs	r7, #18
   23dfa:	e4c2      	b.n	23782 <http_parser_execute+0xc82>
			} else if (ch == matcher[parser->index]) {
   23dfc:	2a20      	cmp	r2, #32
   23dfe:	f43f a965 	beq.w	230cc <http_parser_execute+0x5cc>
   23e02:	f7ff b8fa 	b.w	22ffa <http_parser_execute+0x4fa>
   23e06:	bf00      	nop
   23e08:	0003b770 	.word	0x0003b770

00023e0c <http_method_str>:
}


const char *http_method_str(enum http_method m)
{
	return ELEM_AT(method_strings, m, "<unknown>");
   23e0c:	2820      	cmp	r0, #32
   23e0e:	bf9a      	itte	ls
   23e10:	4b02      	ldrls	r3, [pc, #8]	; (23e1c <http_method_str+0x10>)
   23e12:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   23e16:	4802      	ldrhi	r0, [pc, #8]	; (23e20 <http_method_str+0x14>)
}
   23e18:	4770      	bx	lr
   23e1a:	bf00      	nop
   23e1c:	00038870 	.word	0x00038870
   23e20:	0003b03a 	.word	0x0003b03a

00023e24 <parse_url_char>:
 * assumed that the caller cares about (and can detect) the transition between
 * URL and non-URL states by looking for these.
 */
enum state parse_url_char(enum state s, const char ch)
{
	if (ch == ' ' || ch == '\r' || ch == '\n') {
   23e24:	f1a1 030a 	sub.w	r3, r1, #10
   23e28:	b2db      	uxtb	r3, r3
   23e2a:	2b16      	cmp	r3, #22
   23e2c:	d90a      	bls.n	23e44 <parse_url_char+0x20>
	if (ch == '\t' || ch == '\f') {
		return s_dead;
	}
#endif

	switch (s) {
   23e2e:	3814      	subs	r0, #20
   23e30:	280b      	cmp	r0, #11
   23e32:	d80d      	bhi.n	23e50 <parse_url_char+0x2c>
   23e34:	e8df f000 	tbb	[pc, r0]
   23e38:	2b261c0e 	.word	0x2b261c0e
   23e3c:	54303232 	.word	0x54303232
   23e40:	8a786666 	.word	0x8a786666
	if (ch == ' ' || ch == '\r' || ch == '\n') {
   23e44:	4a5e      	ldr	r2, [pc, #376]	; (23fc0 <parse_url_char+0x19c>)
   23e46:	fa22 f303 	lsr.w	r3, r2, r3
   23e4a:	07da      	lsls	r2, r3, #31
   23e4c:	f140 8099 	bpl.w	23f82 <parse_url_char+0x15e>
   23e50:	2001      	movs	r0, #1

	/* We should never fall out of the switch above unless there's
	 * an error
	 */
	return s_dead;
}
   23e52:	4770      	bx	lr
		if (ch == '/' || ch == '*') {
   23e54:	292f      	cmp	r1, #47	; 0x2f
   23e56:	f000 808e 	beq.w	23f76 <parse_url_char+0x152>
   23e5a:	292a      	cmp	r1, #42	; 0x2a
   23e5c:	f000 808b 	beq.w	23f76 <parse_url_char+0x152>
		if (IS_ALPHA(ch)) {
   23e60:	f041 0120 	orr.w	r1, r1, #32
   23e64:	3961      	subs	r1, #97	; 0x61
   23e66:	2919      	cmp	r1, #25
			return s_req_schema;
   23e68:	bf8c      	ite	hi
   23e6a:	2001      	movhi	r0, #1
   23e6c:	2015      	movls	r0, #21
   23e6e:	4770      	bx	lr
		if (IS_ALPHA(ch)) {
   23e70:	f041 0320 	orr.w	r3, r1, #32
   23e74:	3b61      	subs	r3, #97	; 0x61
   23e76:	2b19      	cmp	r3, #25
   23e78:	d977      	bls.n	23f6a <parse_url_char+0x146>
		if (ch == ':') {
   23e7a:	293a      	cmp	r1, #58	; 0x3a
			return s_req_schema_slash;
   23e7c:	bf14      	ite	ne
   23e7e:	2001      	movne	r0, #1
   23e80:	2016      	moveq	r0, #22
   23e82:	4770      	bx	lr
		if (ch == '/') {
   23e84:	292f      	cmp	r1, #47	; 0x2f
			return s_req_schema_slash_slash;
   23e86:	bf14      	ite	ne
   23e88:	2001      	movne	r0, #1
   23e8a:	2017      	moveq	r0, #23
   23e8c:	4770      	bx	lr
		if (ch == '/') {
   23e8e:	292f      	cmp	r1, #47	; 0x2f
			return s_req_server_start;
   23e90:	bf14      	ite	ne
   23e92:	2001      	movne	r0, #1
   23e94:	2018      	moveq	r0, #24
   23e96:	4770      	bx	lr
		if (ch == '@') {
   23e98:	2940      	cmp	r1, #64	; 0x40
   23e9a:	d0d9      	beq.n	23e50 <parse_url_char+0x2c>
		if (ch == '/') {
   23e9c:	292f      	cmp	r1, #47	; 0x2f
   23e9e:	d06a      	beq.n	23f76 <parse_url_char+0x152>
		if (ch == '?') {
   23ea0:	293f      	cmp	r1, #63	; 0x3f
   23ea2:	d064      	beq.n	23f6e <parse_url_char+0x14a>
		if (ch == '@') {
   23ea4:	2940      	cmp	r1, #64	; 0x40
   23ea6:	d064      	beq.n	23f72 <parse_url_char+0x14e>
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
   23ea8:	f041 0320 	orr.w	r3, r1, #32
   23eac:	3b61      	subs	r3, #97	; 0x61
   23eae:	2b19      	cmp	r3, #25
   23eb0:	d906      	bls.n	23ec0 <parse_url_char+0x9c>
   23eb2:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   23eb6:	b2db      	uxtb	r3, r3
   23eb8:	2b1c      	cmp	r3, #28
   23eba:	d903      	bls.n	23ec4 <parse_url_char+0xa0>
   23ebc:	297e      	cmp	r1, #126	; 0x7e
   23ebe:	d106      	bne.n	23ece <parse_url_char+0xaa>
			return s_req_server;
   23ec0:	2019      	movs	r0, #25
   23ec2:	4770      	bx	lr
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
   23ec4:	4a3f      	ldr	r2, [pc, #252]	; (23fc4 <parse_url_char+0x1a0>)
   23ec6:	fa22 f303 	lsr.w	r3, r2, r3
   23eca:	07db      	lsls	r3, r3, #31
   23ecc:	d4f8      	bmi.n	23ec0 <parse_url_char+0x9c>
   23ece:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
   23ed2:	2b5b      	cmp	r3, #91	; 0x5b
   23ed4:	d0f4      	beq.n	23ec0 <parse_url_char+0x9c>
   23ed6:	295d      	cmp	r1, #93	; 0x5d
			return s_req_server;
   23ed8:	bf14      	ite	ne
   23eda:	2001      	movne	r0, #1
   23edc:	2019      	moveq	r0, #25
   23ede:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   23ee0:	4a39      	ldr	r2, [pc, #228]	; (23fc8 <parse_url_char+0x1a4>)
   23ee2:	08cb      	lsrs	r3, r1, #3
   23ee4:	5cd2      	ldrb	r2, [r2, r3]
   23ee6:	2301      	movs	r3, #1
   23ee8:	f001 0007 	and.w	r0, r1, #7
   23eec:	4083      	lsls	r3, r0
   23eee:	421a      	tst	r2, r3
   23ef0:	d141      	bne.n	23f76 <parse_url_char+0x152>
   23ef2:	060a      	lsls	r2, r1, #24
   23ef4:	d43f      	bmi.n	23f76 <parse_url_char+0x152>
		switch (ch) {
   23ef6:	2923      	cmp	r1, #35	; 0x23
   23ef8:	d041      	beq.n	23f7e <parse_url_char+0x15a>
   23efa:	293f      	cmp	r1, #63	; 0x3f
			return s_req_query_string_start;
   23efc:	bf14      	ite	ne
   23efe:	2001      	movne	r0, #1
   23f00:	201c      	moveq	r0, #28
   23f02:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   23f04:	4a30      	ldr	r2, [pc, #192]	; (23fc8 <parse_url_char+0x1a4>)
   23f06:	08cb      	lsrs	r3, r1, #3
   23f08:	5cd2      	ldrb	r2, [r2, r3]
   23f0a:	2301      	movs	r3, #1
   23f0c:	f001 0007 	and.w	r0, r1, #7
   23f10:	4083      	lsls	r3, r0
   23f12:	421a      	tst	r2, r3
   23f14:	d131      	bne.n	23f7a <parse_url_char+0x156>
   23f16:	060b      	lsls	r3, r1, #24
   23f18:	d42f      	bmi.n	23f7a <parse_url_char+0x156>
		switch (ch) {
   23f1a:	2923      	cmp	r1, #35	; 0x23
   23f1c:	d02f      	beq.n	23f7e <parse_url_char+0x15a>
   23f1e:	293f      	cmp	r1, #63	; 0x3f
			return s_req_query_string;
   23f20:	bf14      	ite	ne
   23f22:	2001      	movne	r0, #1
   23f24:	201d      	moveq	r0, #29
   23f26:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   23f28:	4a27      	ldr	r2, [pc, #156]	; (23fc8 <parse_url_char+0x1a4>)
   23f2a:	08cb      	lsrs	r3, r1, #3
   23f2c:	5cd2      	ldrb	r2, [r2, r3]
   23f2e:	2301      	movs	r3, #1
   23f30:	f001 0007 	and.w	r0, r1, #7
   23f34:	4083      	lsls	r3, r0
   23f36:	421a      	tst	r2, r3
   23f38:	d115      	bne.n	23f66 <parse_url_char+0x142>
   23f3a:	060a      	lsls	r2, r1, #24
   23f3c:	d413      	bmi.n	23f66 <parse_url_char+0x142>
		switch (ch) {
   23f3e:	2923      	cmp	r1, #35	; 0x23
   23f40:	d01d      	beq.n	23f7e <parse_url_char+0x15a>
   23f42:	293f      	cmp	r1, #63	; 0x3f
			return s_req_fragment;
   23f44:	bf14      	ite	ne
   23f46:	2001      	movne	r0, #1
   23f48:	201f      	moveq	r0, #31
   23f4a:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   23f4c:	4a1e      	ldr	r2, [pc, #120]	; (23fc8 <parse_url_char+0x1a4>)
   23f4e:	08cb      	lsrs	r3, r1, #3
   23f50:	5cd2      	ldrb	r2, [r2, r3]
   23f52:	2301      	movs	r3, #1
   23f54:	f001 0007 	and.w	r0, r1, #7
   23f58:	4083      	lsls	r3, r0
   23f5a:	421a      	tst	r2, r3
   23f5c:	d103      	bne.n	23f66 <parse_url_char+0x142>
   23f5e:	060b      	lsls	r3, r1, #24
   23f60:	d401      	bmi.n	23f66 <parse_url_char+0x142>
		switch (ch) {
   23f62:	2923      	cmp	r1, #35	; 0x23
   23f64:	d1ed      	bne.n	23f42 <parse_url_char+0x11e>
			return s_req_fragment;
   23f66:	201f      	movs	r0, #31
   23f68:	4770      	bx	lr
			return s_req_schema;
   23f6a:	2015      	movs	r0, #21
   23f6c:	4770      	bx	lr
			return s_req_query_string_start;
   23f6e:	201c      	movs	r0, #28
   23f70:	4770      	bx	lr
			return s_req_server_with_at;
   23f72:	201a      	movs	r0, #26
   23f74:	4770      	bx	lr
			return s_req_path;
   23f76:	201b      	movs	r0, #27
   23f78:	4770      	bx	lr
			return s_req_query_string;
   23f7a:	201d      	movs	r0, #29
   23f7c:	4770      	bx	lr
			return s_req_fragment_start;
   23f7e:	201e      	movs	r0, #30
   23f80:	4770      	bx	lr
	switch (s) {
   23f82:	3814      	subs	r0, #20
   23f84:	280b      	cmp	r0, #11
   23f86:	f63f af63 	bhi.w	23e50 <parse_url_char+0x2c>
   23f8a:	a301      	add	r3, pc, #4	; (adr r3, 23f90 <parse_url_char+0x16c>)
   23f8c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   23f90:	00023e61 	.word	0x00023e61
   23f94:	00023e71 	.word	0x00023e71
   23f98:	00023e85 	.word	0x00023e85
   23f9c:	00023e8f 	.word	0x00023e8f
   23fa0:	00023e9d 	.word	0x00023e9d
   23fa4:	00023e9d 	.word	0x00023e9d
   23fa8:	00023e99 	.word	0x00023e99
   23fac:	00023ee1 	.word	0x00023ee1
   23fb0:	00023f05 	.word	0x00023f05
   23fb4:	00023f05 	.word	0x00023f05
   23fb8:	00023f29 	.word	0x00023f29
   23fbc:	00023f4d 	.word	0x00023f4d
   23fc0:	00400009 	.word	0x00400009
   23fc4:	17ffbff9 	.word	0x17ffbff9
   23fc8:	0003b870 	.word	0x0003b870

00023fcc <http_parser_parse_url>:
}

int
http_parser_parse_url(const char *buf, size_t buflen, int is_connect,
		      struct http_parser_url *u)
{
   23fcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fd0:	4605      	mov	r5, r0
	enum http_parser_url_fields uf;
	int found_at = 0;
	const char *p;
	enum state s;

	u->port = u->field_set = 0U;
   23fd2:	2700      	movs	r7, #0
	s = is_connect ? s_req_server_start : s_req_spaces_before_url;
   23fd4:	1e16      	subs	r6, r2, #0
{
   23fd6:	461c      	mov	r4, r3
	s = is_connect ? s_req_server_start : s_req_spaces_before_url;
   23fd8:	bf14      	ite	ne
   23fda:	2018      	movne	r0, #24
   23fdc:	2014      	moveq	r0, #20
   23fde:	46a8      	mov	r8, r5
		}

		u->field_data[uf].off = p - buf;
		u->field_data[uf].len = 1U;

		u->field_set |= (1 << uf);
   23fe0:	f04f 0b07 	mov.w	fp, #7
	u->port = u->field_set = 0U;
   23fe4:	801f      	strh	r7, [r3, #0]
   23fe6:	805f      	strh	r7, [r3, #2]
	for (p = buf; p < buf + buflen; p++) {
   23fe8:	eb05 0a01 	add.w	sl, r5, r1
   23fec:	45d0      	cmp	r8, sl
   23fee:	46c1      	mov	r9, r8
   23ff0:	d30a      	bcc.n	24008 <http_parser_parse_url+0x3c>
		old_uf = uf;
	}

	/* host must be present if there is a schema */
	/* parsing http:///toto will fail */
	if ((u->field_set & (1 << UF_SCHEMA)) &&
   23ff2:	8822      	ldrh	r2, [r4, #0]
   23ff4:	f002 0302 	and.w	r3, r2, #2
   23ff8:	07d2      	lsls	r2, r2, #31
   23ffa:	d54b      	bpl.n	24094 <http_parser_parse_url+0xc8>
   23ffc:	2b00      	cmp	r3, #0
   23ffe:	d14a      	bne.n	24096 <http_parser_parse_url+0xca>
			(u->field_set & (1 << UF_HOST)) == 0U) {
		return 1;
   24000:	2601      	movs	r6, #1

		u->port = (uint16_t) v;
	}

	return 0;
}
   24002:	4630      	mov	r0, r6
   24004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		s = parse_url_char(s, *p);
   24008:	f899 1000 	ldrb.w	r1, [r9]
   2400c:	f7ff ff0a 	bl	23e24 <parse_url_char>
		switch (s) {
   24010:	f1a0 0315 	sub.w	r3, r0, #21
   24014:	2201      	movs	r2, #1
   24016:	f108 0801 	add.w	r8, r8, #1
   2401a:	2b0a      	cmp	r3, #10
   2401c:	d8f0      	bhi.n	24000 <http_parser_parse_url+0x34>
   2401e:	a101      	add	r1, pc, #4	; (adr r1, 24024 <http_parser_parse_url+0x58>)
   24020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   24024:	00024071 	.word	0x00024071
   24028:	00023fed 	.word	0x00023fed
   2402c:	00023fed 	.word	0x00023fed
   24030:	00023fed 	.word	0x00023fed
   24034:	00024053 	.word	0x00024053
   24038:	00024051 	.word	0x00024051
   2403c:	00024065 	.word	0x00024065
   24040:	00023fed 	.word	0x00023fed
   24044:	00024069 	.word	0x00024069
   24048:	00023fed 	.word	0x00023fed
   2404c:	0002406d 	.word	0x0002406d
			found_at = 1;
   24050:	2701      	movs	r7, #1
			uf = UF_HOST;
   24052:	2301      	movs	r3, #1
		if (uf == old_uf) {
   24054:	459b      	cmp	fp, r3
   24056:	d10d      	bne.n	24074 <http_parser_parse_url+0xa8>
			u->field_data[uf].len++;
   24058:	eb04 018b 	add.w	r1, r4, fp, lsl #2
   2405c:	88cb      	ldrh	r3, [r1, #6]
   2405e:	3301      	adds	r3, #1
   24060:	80cb      	strh	r3, [r1, #6]
			continue;
   24062:	e7c3      	b.n	23fec <http_parser_parse_url+0x20>
			uf = UF_PATH;
   24064:	2303      	movs	r3, #3
			break;
   24066:	e7f5      	b.n	24054 <http_parser_parse_url+0x88>
			uf = UF_QUERY;
   24068:	2304      	movs	r3, #4
			break;
   2406a:	e7f3      	b.n	24054 <http_parser_parse_url+0x88>
			uf = UF_FRAGMENT;
   2406c:	2305      	movs	r3, #5
			break;
   2406e:	e7f1      	b.n	24054 <http_parser_parse_url+0x88>
		s = parse_url_char(s, *p);
   24070:	2300      	movs	r3, #0
   24072:	e7ef      	b.n	24054 <http_parser_parse_url+0x88>
		u->field_data[uf].off = p - buf;
   24074:	eb04 0183 	add.w	r1, r4, r3, lsl #2
   24078:	eba9 0905 	sub.w	r9, r9, r5
   2407c:	f8a1 9004 	strh.w	r9, [r1, #4]
		u->field_data[uf].len = 1U;
   24080:	80ca      	strh	r2, [r1, #6]
		u->field_set |= (1 << uf);
   24082:	f8b4 c000 	ldrh.w	ip, [r4]
   24086:	fa02 f103 	lsl.w	r1, r2, r3
   2408a:	ea41 010c 	orr.w	r1, r1, ip
   2408e:	469b      	mov	fp, r3
   24090:	8021      	strh	r1, [r4, #0]
	for (p = buf; p < buf + buflen; p++) {
   24092:	e7ab      	b.n	23fec <http_parser_parse_url+0x20>
	if (u->field_set & (1 << UF_HOST)) {
   24094:	b303      	cbz	r3, 240d8 <http_parser_parse_url+0x10c>
	u->field_data[UF_HOST].len = 0U;
   24096:	f04f 0e00 	mov.w	lr, #0
	s = found_at ? s_http_userinfo_start : s_http_host_start;
   2409a:	4577      	cmp	r7, lr
   2409c:	bf14      	ite	ne
   2409e:	2102      	movne	r1, #2
   240a0:	2104      	moveq	r1, #4
	buflen = u->field_data[UF_HOST].off + u->field_data[UF_HOST].len;
   240a2:	8922      	ldrh	r2, [r4, #8]
   240a4:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   240a8:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 24270 <http_parser_parse_url+0x2a4>
	buflen = u->field_data[UF_HOST].off + u->field_data[UF_HOST].len;
   240ac:	4494      	add	ip, r2
		if (IS_USERINFO_CHAR(ch)) {
   240ae:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 24274 <http_parser_parse_url+0x2a8>
	u->field_data[UF_HOST].len = 0U;
   240b2:	f8a4 e00a 	strh.w	lr, [r4, #10]
	for (p = buf + u->field_data[UF_HOST].off; p < buf + buflen; p++) {
   240b6:	442a      	add	r2, r5
   240b8:	44ac      	add	ip, r5
   240ba:	4562      	cmp	r2, ip
   240bc:	4610      	mov	r0, r2
   240be:	f1a1 0702 	sub.w	r7, r1, #2
   240c2:	d31b      	bcc.n	240fc <http_parser_parse_url+0x130>
	switch (s) {
   240c4:	b2ff      	uxtb	r7, r7
   240c6:	2f09      	cmp	r7, #9
   240c8:	d806      	bhi.n	240d8 <http_parser_parse_url+0x10c>
   240ca:	2301      	movs	r3, #1
   240cc:	fa03 f707 	lsl.w	r7, r3, r7
   240d0:	f240 33af 	movw	r3, #943	; 0x3af
   240d4:	421f      	tst	r7, r3
   240d6:	d193      	bne.n	24000 <http_parser_parse_url+0x34>
	if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {
   240d8:	8823      	ldrh	r3, [r4, #0]
   240da:	2e00      	cmp	r6, #0
   240dc:	f000 80ba 	beq.w	24254 <http_parser_parse_url+0x288>
   240e0:	2b06      	cmp	r3, #6
   240e2:	d18d      	bne.n	24000 <http_parser_parse_url+0x34>
		v = strtoul(buf + u->field_data[UF_PORT].off, NULL, 10);
   240e4:	89a0      	ldrh	r0, [r4, #12]
   240e6:	220a      	movs	r2, #10
   240e8:	2100      	movs	r1, #0
   240ea:	4428      	add	r0, r5
   240ec:	f00f fa32 	bl	33554 <strtoul>
		if (v > 0xffff) {
   240f0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   240f4:	d284      	bcs.n	24000 <http_parser_parse_url+0x34>
	return 0;
   240f6:	2600      	movs	r6, #0
		u->port = (uint16_t) v;
   240f8:	8060      	strh	r0, [r4, #2]
   240fa:	e782      	b.n	24002 <http_parser_parse_url+0x36>
		enum http_host_state new_s = http_parse_host_char(s, *p);
   240fc:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (s) {
   24100:	2f0a      	cmp	r7, #10
   24102:	f63f af7d 	bhi.w	24000 <http_parser_parse_url+0x34>
   24106:	e8df f007 	tbb	[pc, r7]
   2410a:	0606      	.short	0x0606
   2410c:	5a465c2d 	.word	0x5a465c2d
   24110:	8c727455 	.word	0x8c727455
   24114:	8c          	.byte	0x8c
   24115:	00          	.byte	0x00
		if (ch == '@') {
   24116:	2b40      	cmp	r3, #64	; 0x40
   24118:	f000 8096 	beq.w	24248 <http_parser_parse_url+0x27c>
		if (IS_USERINFO_CHAR(ch)) {
   2411c:	f043 0720 	orr.w	r7, r3, #32
   24120:	3f61      	subs	r7, #97	; 0x61
   24122:	2f19      	cmp	r7, #25
   24124:	d909      	bls.n	2413a <http_parser_parse_url+0x16e>
   24126:	2b5f      	cmp	r3, #95	; 0x5f
   24128:	d007      	beq.n	2413a <http_parser_parse_url+0x16e>
   2412a:	f1a3 0721 	sub.w	r7, r3, #33	; 0x21
   2412e:	b2ff      	uxtb	r7, r7
   24130:	2f1c      	cmp	r7, #28
   24132:	d911      	bls.n	24158 <http_parser_parse_url+0x18c>
   24134:	2b7e      	cmp	r3, #126	; 0x7e
   24136:	f47f af63 	bne.w	24000 <http_parser_parse_url+0x34>
			if (s != s_http_userinfo) {
   2413a:	2903      	cmp	r1, #3
   2413c:	d007      	beq.n	2414e <http_parser_parse_url+0x182>
				u->field_set |= (1 << UF_USERINFO);
   2413e:	8823      	ldrh	r3, [r4, #0]
				u->field_data[UF_USERINFO].off = p - buf;
   24140:	1b40      	subs	r0, r0, r5
				u->field_set |= (1 << UF_USERINFO);
   24142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
				u->field_data[UF_USERINFO].off = p - buf;
   24146:	83a0      	strh	r0, [r4, #28]
				u->field_data[UF_USERINFO].len = 0U;
   24148:	f8a4 e01e 	strh.w	lr, [r4, #30]
				u->field_set |= (1 << UF_USERINFO);
   2414c:	8023      	strh	r3, [r4, #0]
			u->field_data[UF_USERINFO].len++;
   2414e:	8be3      	ldrh	r3, [r4, #30]
			return s_http_userinfo;
   24150:	2103      	movs	r1, #3
			u->field_data[UF_USERINFO].len++;
   24152:	3301      	adds	r3, #1
   24154:	83e3      	strh	r3, [r4, #30]
			break;
   24156:	e7b0      	b.n	240ba <http_parser_parse_url+0xee>
		if (IS_USERINFO_CHAR(ch)) {
   24158:	fa29 f707 	lsr.w	r7, r9, r7
   2415c:	07ff      	lsls	r7, r7, #31
   2415e:	f57f af4f 	bpl.w	24000 <http_parser_parse_url+0x34>
   24162:	e7ea      	b.n	2413a <http_parser_parse_url+0x16e>
		if (ch == '[') {
   24164:	2b5b      	cmp	r3, #91	; 0x5b
   24166:	d071      	beq.n	2424c <http_parser_parse_url+0x280>
		if (IS_HOST_CHAR(ch)) {
   24168:	f043 0120 	orr.w	r1, r3, #32
   2416c:	3961      	subs	r1, #97	; 0x61
   2416e:	2919      	cmp	r1, #25
   24170:	d90a      	bls.n	24188 <http_parser_parse_url+0x1bc>
   24172:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   24176:	2909      	cmp	r1, #9
   24178:	d906      	bls.n	24188 <http_parser_parse_url+0x1bc>
   2417a:	f1a3 012d 	sub.w	r1, r3, #45	; 0x2d
   2417e:	2901      	cmp	r1, #1
   24180:	d902      	bls.n	24188 <http_parser_parse_url+0x1bc>
   24182:	2b5f      	cmp	r3, #95	; 0x5f
   24184:	f47f af3c 	bne.w	24000 <http_parser_parse_url+0x34>
				u->field_data[UF_HOST].off = p - buf;
   24188:	1b40      	subs	r0, r0, r5
   2418a:	8120      	strh	r0, [r4, #8]
			u->field_data[UF_HOST].len++;
   2418c:	8963      	ldrh	r3, [r4, #10]
			break;
   2418e:	2106      	movs	r1, #6
			u->field_data[UF_HOST].len++;
   24190:	3301      	adds	r3, #1
   24192:	8163      	strh	r3, [r4, #10]
			break;
   24194:	e791      	b.n	240ba <http_parser_parse_url+0xee>
		if (IS_HOST_CHAR(ch)) {
   24196:	f043 0120 	orr.w	r1, r3, #32
   2419a:	3961      	subs	r1, #97	; 0x61
   2419c:	2919      	cmp	r1, #25
   2419e:	d9f5      	bls.n	2418c <http_parser_parse_url+0x1c0>
   241a0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   241a4:	2909      	cmp	r1, #9
   241a6:	d9f1      	bls.n	2418c <http_parser_parse_url+0x1c0>
   241a8:	f1a3 012d 	sub.w	r1, r3, #45	; 0x2d
   241ac:	2901      	cmp	r1, #1
   241ae:	d9ed      	bls.n	2418c <http_parser_parse_url+0x1c0>
   241b0:	2b5f      	cmp	r3, #95	; 0x5f
   241b2:	d0eb      	beq.n	2418c <http_parser_parse_url+0x1c0>
		if (ch == ':') {
   241b4:	2b3a      	cmp	r3, #58	; 0x3a
   241b6:	f47f af23 	bne.w	24000 <http_parser_parse_url+0x34>
			return s_http_host_port_start;
   241ba:	210b      	movs	r1, #11
   241bc:	e77d      	b.n	240ba <http_parser_parse_url+0xee>
		if (ch == ']') {
   241be:	2b5d      	cmp	r3, #93	; 0x5d
   241c0:	d046      	beq.n	24250 <http_parser_parse_url+0x284>
		if (IS_HEX(ch) || ch == ':' || ch == '.') {
   241c2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
   241c6:	2f0a      	cmp	r7, #10
   241c8:	d948      	bls.n	2425c <http_parser_parse_url+0x290>
   241ca:	f043 0720 	orr.w	r7, r3, #32
   241ce:	3f61      	subs	r7, #97	; 0x61
   241d0:	2f05      	cmp	r7, #5
   241d2:	d943      	bls.n	2425c <http_parser_parse_url+0x290>
   241d4:	2b2e      	cmp	r3, #46	; 0x2e
   241d6:	d041      	beq.n	2425c <http_parser_parse_url+0x290>
		if (s == s_http_host_v6 && ch == '%') {
   241d8:	2907      	cmp	r1, #7
   241da:	f47f af11 	bne.w	24000 <http_parser_parse_url+0x34>
   241de:	2b25      	cmp	r3, #37	; 0x25
   241e0:	f47f af0e 	bne.w	24000 <http_parser_parse_url+0x34>
			return s_http_host_v6_zone_start;
   241e4:	2109      	movs	r1, #9
			u->field_data[UF_HOST].len++;
   241e6:	8963      	ldrh	r3, [r4, #10]
   241e8:	3301      	adds	r3, #1
   241ea:	8163      	strh	r3, [r4, #10]
			break;
   241ec:	e765      	b.n	240ba <http_parser_parse_url+0xee>
		if (ch == ']') {
   241ee:	2b5d      	cmp	r3, #93	; 0x5d
   241f0:	d02e      	beq.n	24250 <http_parser_parse_url+0x284>
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   241f2:	f043 0120 	orr.w	r1, r3, #32
   241f6:	3961      	subs	r1, #97	; 0x61
   241f8:	2919      	cmp	r1, #25
   241fa:	d906      	bls.n	2420a <http_parser_parse_url+0x23e>
   241fc:	f1a3 0125 	sub.w	r1, r3, #37	; 0x25
   24200:	b2c9      	uxtb	r1, r1
   24202:	2914      	cmp	r1, #20
   24204:	d903      	bls.n	2420e <http_parser_parse_url+0x242>
   24206:	2b5f      	cmp	r3, #95	; 0x5f
   24208:	d107      	bne.n	2421a <http_parser_parse_url+0x24e>
			return s_http_host_v6_zone;
   2420a:	210a      	movs	r1, #10
   2420c:	e7eb      	b.n	241e6 <http_parser_parse_url+0x21a>
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   2420e:	fa28 f101 	lsr.w	r1, r8, r1
   24212:	07c9      	lsls	r1, r1, #31
   24214:	f57f aef4 	bpl.w	24000 <http_parser_parse_url+0x34>
   24218:	e7f7      	b.n	2420a <http_parser_parse_url+0x23e>
				ch == '_' ||
   2421a:	2b7e      	cmp	r3, #126	; 0x7e
   2421c:	f47f aef0 	bne.w	24000 <http_parser_parse_url+0x34>
   24220:	e7f3      	b.n	2420a <http_parser_parse_url+0x23e>
		if (IS_NUM(ch)) {
   24222:	3b30      	subs	r3, #48	; 0x30
   24224:	2b09      	cmp	r3, #9
   24226:	f63f aeeb 	bhi.w	24000 <http_parser_parse_url+0x34>
			if (s != s_http_host_port) {
   2422a:	290c      	cmp	r1, #12
   2422c:	d007      	beq.n	2423e <http_parser_parse_url+0x272>
				u->field_set |= (1 << UF_PORT);
   2422e:	8823      	ldrh	r3, [r4, #0]
				u->field_data[UF_PORT].off = p - buf;
   24230:	1b40      	subs	r0, r0, r5
				u->field_set |= (1 << UF_PORT);
   24232:	f043 0304 	orr.w	r3, r3, #4
				u->field_data[UF_PORT].off = p - buf;
   24236:	81a0      	strh	r0, [r4, #12]
				u->field_data[UF_PORT].len = 0U;
   24238:	f8a4 e00e 	strh.w	lr, [r4, #14]
				u->field_set |= (1 << UF_PORT);
   2423c:	8023      	strh	r3, [r4, #0]
			u->field_data[UF_PORT].len++;
   2423e:	89e3      	ldrh	r3, [r4, #14]
			return s_http_host_port;
   24240:	210c      	movs	r1, #12
			u->field_data[UF_PORT].len++;
   24242:	3301      	adds	r3, #1
   24244:	81e3      	strh	r3, [r4, #14]
			break;
   24246:	e738      	b.n	240ba <http_parser_parse_url+0xee>
			return s_http_host_start;
   24248:	2104      	movs	r1, #4
   2424a:	e736      	b.n	240ba <http_parser_parse_url+0xee>
			return s_http_host_v6_start;
   2424c:	2105      	movs	r1, #5
   2424e:	e734      	b.n	240ba <http_parser_parse_url+0xee>
			return s_http_host_v6_end;
   24250:	2108      	movs	r1, #8
   24252:	e732      	b.n	240ba <http_parser_parse_url+0xee>
	if (u->field_set & (1 << UF_PORT)) {
   24254:	075b      	lsls	r3, r3, #29
   24256:	f57f aed4 	bpl.w	24002 <http_parser_parse_url+0x36>
   2425a:	e743      	b.n	240e4 <http_parser_parse_url+0x118>
			if (s != s_http_host_v6) {
   2425c:	2907      	cmp	r1, #7
   2425e:	d001      	beq.n	24264 <http_parser_parse_url+0x298>
				u->field_data[UF_HOST].off = p - buf;
   24260:	1b40      	subs	r0, r0, r5
   24262:	8120      	strh	r0, [r4, #8]
			u->field_data[UF_HOST].len++;
   24264:	8963      	ldrh	r3, [r4, #10]
			break;
   24266:	2107      	movs	r1, #7
			u->field_data[UF_HOST].len++;
   24268:	3301      	adds	r3, #1
   2426a:	8163      	strh	r3, [r4, #10]
			break;
   2426c:	e725      	b.n	240ba <http_parser_parse_url+0xee>
   2426e:	bf00      	nop
   24270:	001ffb01 	.word	0x001ffb01
   24274:	17ffbff9 	.word	0x17ffbff9

00024278 <on_header_field>:
	return 0;
}

static int on_header_field(struct http_parser *parser, const char *at,
			   size_t length)
{
   24278:	b570      	push	{r4, r5, r6, lr}
   2427a:	4604      	mov	r4, r0
						struct http_request,
						internal.parser);
	const char *content_len = "Content-Length";
	uint16_t len;

	len = strlen(content_len);
   2427c:	480e      	ldr	r0, [pc, #56]	; (242b8 <on_header_field+0x40>)
{
   2427e:	4616      	mov	r6, r2
   24280:	460d      	mov	r5, r1
	len = strlen(content_len);
   24282:	f7f4 fef5 	bl	19070 <strlen>
	if (length >= len && strncasecmp(at, content_len, len) == 0) {
   24286:	b282      	uxth	r2, r0
   24288:	42b2      	cmp	r2, r6
   2428a:	d80a      	bhi.n	242a2 <on_header_field+0x2a>
   2428c:	4628      	mov	r0, r5
   2428e:	490a      	ldr	r1, [pc, #40]	; (242b8 <on_header_field+0x40>)
   24290:	f00f f842 	bl	33318 <strncasecmp>
   24294:	b928      	cbnz	r0, 242a2 <on_header_field+0x2a>
		req->internal.response.cl_present = true;
   24296:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   2429a:	f043 0301 	orr.w	r3, r3, #1
   2429e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	}

	print_header_field(length, at);

	if (req->internal.response.http_cb &&
   242a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   242a4:	b12b      	cbz	r3, 242b2 <on_header_field+0x3a>
	    req->internal.response.http_cb->on_header_field) {
   242a6:	68db      	ldr	r3, [r3, #12]
	if (req->internal.response.http_cb &&
   242a8:	b11b      	cbz	r3, 242b2 <on_header_field+0x3a>
		req->internal.response.http_cb->on_header_field(parser, at,
   242aa:	4632      	mov	r2, r6
   242ac:	4629      	mov	r1, r5
   242ae:	4620      	mov	r0, r4
   242b0:	4798      	blx	r3
								length);
	}

	return 0;
}
   242b2:	2000      	movs	r0, #0
   242b4:	bd70      	pop	{r4, r5, r6, pc}
   242b6:	bf00      	nop
   242b8:	0003b890 	.word	0x0003b890

000242bc <http_client_req>:
	(void)close(data->sock);
}

int http_client_req(int sock, struct http_request *req,
		    int32_t timeout, void *user_data)
{
   242bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242c0:	460d      	mov	r5, r1
	/* Utilize the network usage by sending data in bigger blocks */
	char send_buf[MAX_SEND_BUF_LEN];
	const size_t send_buf_max_len = sizeof(send_buf);
	size_t send_buf_pos = 0;
   242c2:	2100      	movs	r1, #0
{
   242c4:	b0c1      	sub	sp, #260	; 0x104
	int total_sent = 0;
	int ret, total_recv, i;
	const char *method;

	if (sock < 0 || req == NULL || req->response == NULL ||
   242c6:	1e06      	subs	r6, r0, #0
{
   242c8:	4614      	mov	r4, r2
   242ca:	469a      	mov	sl, r3
	size_t send_buf_pos = 0;
   242cc:	910d      	str	r1, [sp, #52]	; 0x34
	if (sock < 0 || req == NULL || req->response == NULL ||
   242ce:	f2c0 81ec 	blt.w	246aa <http_client_req+0x3ee>
   242d2:	2d00      	cmp	r5, #0
   242d4:	f000 81e9 	beq.w	246aa <http_client_req+0x3ee>
   242d8:	f8d5 90d4 	ldr.w	r9, [r5, #212]	; 0xd4
   242dc:	f1b9 0f00 	cmp.w	r9, #0
   242e0:	f000 81e3 	beq.w	246aa <http_client_req+0x3ee>
	    req->recv_buf == NULL || req->recv_buf_len == 0) {
   242e4:	f8d5 80dc 	ldr.w	r8, [r5, #220]	; 0xdc
	if (sock < 0 || req == NULL || req->response == NULL ||
   242e8:	f1b8 0f00 	cmp.w	r8, #0
   242ec:	f000 81dd 	beq.w	246aa <http_client_req+0x3ee>
	    req->recv_buf == NULL || req->recv_buf_len == 0) {
   242f0:	f8d5 70e0 	ldr.w	r7, [r5, #224]	; 0xe0
   242f4:	2f00      	cmp	r7, #0
   242f6:	f000 81d8 	beq.w	246aa <http_client_req+0x3ee>
__ssp_bos_icheck3(memset, void *, int)
   242fa:	223c      	movs	r2, #60	; 0x3c
   242fc:	f105 0080 	add.w	r0, r5, #128	; 0x80
   24300:	f013 f89f 	bl	37442 <memset>
		return -EINVAL;
	}

	memset(&req->internal.response, 0, sizeof(req->internal.response));

	req->internal.response.http_cb = req->http_cb;
   24304:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	req->internal.response.cb = req->response;
	req->internal.response.recv_buf = req->recv_buf;
	req->internal.response.recv_buf_len = req->recv_buf_len;
	req->internal.user_data = user_data;
	req->internal.sock = sock;
	req->internal.timeout = SYS_TIMEOUT_MS(timeout);
   24308:	1c62      	adds	r2, r4, #1
	req->internal.response.cb = req->response;
   2430a:	e9c5 391e 	strd	r3, r9, [r5, #120]	; 0x78
	req->internal.response.recv_buf_len = req->recv_buf_len;
   2430e:	e9c5 8721 	strd	r8, r7, [r5, #132]	; 0x84
	req->internal.sock = sock;
   24312:	e9c5 a62f 	strd	sl, r6, [r5, #188]	; 0xbc
	req->internal.timeout = SYS_TIMEOUT_MS(timeout);
   24316:	f000 8096 	beq.w	24446 <http_client_req+0x18a>
   2431a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2431e:	f240 30e7 	movw	r0, #999	; 0x3e7
   24322:	2100      	movs	r1, #0
   24324:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   24328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2432c:	2300      	movs	r3, #0
   2432e:	fbc7 0104 	smlal	r0, r1, r7, r4
   24332:	f7f4 fa41 	bl	187b8 <__aeabi_uldivmod>
   24336:	e9c5 0132 	strd	r0, r1, [r5, #200]	; 0xc8

	method = http_method_str(req->method);
   2433a:	f895 00d0 	ldrb.w	r0, [r5, #208]	; 0xd0
   2433e:	f7ff fd65 	bl	23e0c <http_method_str>

	ret = http_send_data(sock, send_buf, send_buf_max_len, &send_buf_pos,
   24342:	2400      	movs	r4, #0
   24344:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
   24348:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
   2434c:	9304      	str	r3, [sp, #16]
   2434e:	f8df 8320 	ldr.w	r8, [pc, #800]	; 24670 <http_client_req+0x3b4>
   24352:	4bb5      	ldr	r3, [pc, #724]	; (24628 <http_client_req+0x36c>)
   24354:	9000      	str	r0, [sp, #0]
   24356:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2435a:	9303      	str	r3, [sp, #12]
   2435c:	22c0      	movs	r2, #192	; 0xc0
   2435e:	4630      	mov	r0, r6
   24360:	9406      	str	r4, [sp, #24]
   24362:	f8cd 8014 	str.w	r8, [sp, #20]
   24366:	ab0d      	add	r3, sp, #52	; 0x34
   24368:	a910      	add	r1, sp, #64	; 0x40
   2436a:	f011 fa91 	bl	35890 <http_send_data.constprop.0>
			     method, " ", req->url, " ", req->protocol,
			     HTTP_CRLF, NULL);
	if (ret < 0) {
   2436e:	1e07      	subs	r7, r0, #0
   24370:	f2c0 819e 	blt.w	246b0 <http_client_req+0x3f4>
		goto out;
	}

	total_sent += ret;

	if (req->port) {
   24374:	e9d5 233d 	ldrd	r2, r3, [r5, #244]	; 0xf4
   24378:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 24674 <http_client_req+0x3b8>
   2437c:	2b00      	cmp	r3, #0
   2437e:	d066      	beq.n	2444e <http_client_req+0x192>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   24380:	9304      	str	r3, [sp, #16]
   24382:	4baa      	ldr	r3, [pc, #680]	; (2462c <http_client_req+0x370>)
   24384:	4630      	mov	r0, r6
   24386:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2438a:	4ba9      	ldr	r3, [pc, #676]	; (24630 <http_client_req+0x374>)
   2438c:	22c0      	movs	r2, #192	; 0xc0
   2438e:	9300      	str	r3, [sp, #0]
   24390:	e9cd 8405 	strd	r8, r4, [sp, #20]
   24394:	f8cd b004 	str.w	fp, [sp, #4]
   24398:	ab0d      	add	r3, sp, #52	; 0x34
   2439a:	a910      	add	r1, sp, #64	; 0x40
   2439c:	f011 fa78 	bl	35890 <http_send_data.constprop.0>
	} else {
		ret = http_send_data(sock, send_buf, send_buf_max_len,
				     &send_buf_pos, "Host", ": ", req->host,
				     HTTP_CRLF, NULL);

		if (ret < 0) {
   243a0:	1e04      	subs	r4, r0, #0
   243a2:	db4c      	blt.n	2443e <http_client_req+0x182>
		}

		total_sent += ret;
	}

	if (req->optional_headers_cb) {
   243a4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
		total_sent += ret;
   243a8:	4427      	add	r7, r4
	if (req->optional_headers_cb) {
   243aa:	2b00      	cmp	r3, #0
   243ac:	d073      	beq.n	24496 <http_client_req+0x1da>
	return sendall(sock, send_buf, send_buf_len);
   243ae:	4630      	mov	r0, r6
   243b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   243b2:	a910      	add	r1, sp, #64	; 0x40
   243b4:	f011 fa51 	bl	3585a <sendall>
		ret = http_flush_data(sock, send_buf, send_buf_pos);
		if (ret < 0) {
   243b8:	1e04      	subs	r4, r0, #0
   243ba:	db40      	blt.n	2443e <http_client_req+0x182>
			goto out;
		}

		send_buf_pos = 0;
   243bc:	2300      	movs	r3, #0
		total_sent += ret;

		ret = req->optional_headers_cb(sock, req, user_data);
   243be:	4652      	mov	r2, sl
		send_buf_pos = 0;
   243c0:	930d      	str	r3, [sp, #52]	; 0x34
		ret = req->optional_headers_cb(sock, req, user_data);
   243c2:	4629      	mov	r1, r5
   243c4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   243c8:	4630      	mov	r0, r6
   243ca:	4798      	blx	r3
		if (ret < 0) {
   243cc:	1e03      	subs	r3, r0, #0
   243ce:	f2c0 8171 	blt.w	246b4 <http_client_req+0x3f8>
		total_sent += ret;
   243d2:	1938      	adds	r0, r7, r4
			goto out;
		}

		total_sent += ret;
   243d4:	18c7      	adds	r7, r0, r3
   243d6:	f04f 0900 	mov.w	r9, #0

			total_sent += ret;
		}
	}

	for (i = 0; req->header_fields && req->header_fields[i]; i++) {
   243da:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   243de:	b11b      	cbz	r3, 243e8 <http_client_req+0x12c>
   243e0:	f853 3009 	ldr.w	r3, [r3, r9]
   243e4:	2b00      	cmp	r3, #0
   243e6:	d158      	bne.n	2449a <http_client_req+0x1de>
		}

		total_sent += ret;
	}

	if (req->content_type_value) {
   243e8:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   243ec:	b17b      	cbz	r3, 2440e <http_client_req+0x152>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   243ee:	2200      	movs	r2, #0
   243f0:	e9cd b301 	strd	fp, r3, [sp, #4]
   243f4:	4b8f      	ldr	r3, [pc, #572]	; (24634 <http_client_req+0x378>)
   243f6:	e9cd 8203 	strd	r8, r2, [sp, #12]
   243fa:	9300      	str	r3, [sp, #0]
   243fc:	22c0      	movs	r2, #192	; 0xc0
   243fe:	4630      	mov	r0, r6
   24400:	ab0d      	add	r3, sp, #52	; 0x34
   24402:	a910      	add	r1, sp, #64	; 0x40
   24404:	f011 fa44 	bl	35890 <http_send_data.constprop.0>
				     &send_buf_pos, "Content-Type", ": ",
				     req->content_type_value, HTTP_CRLF, NULL);
		if (ret < 0) {
   24408:	1e04      	subs	r4, r0, #0
   2440a:	db18      	blt.n	2443e <http_client_req+0x182>
			goto out;
		}

		total_sent += ret;
   2440c:	4427      	add	r7, r4
	}

	if (req->payload || req->payload_cb) {
   2440e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   24412:	b923      	cbnz	r3, 2441e <http_client_req+0x162>
   24414:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
   24418:	2b00      	cmp	r3, #0
   2441a:	f000 80f8 	beq.w	2460e <http_client_req+0x352>
		if (req->payload_len) {
   2441e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   24422:	2b00      	cmp	r3, #0
   24424:	f000 80d4 	beq.w	245d0 <http_client_req+0x314>
			char content_len_str[HTTP_CONTENT_LEN_SIZE];

			ret = snprintk(content_len_str, HTTP_CONTENT_LEN_SIZE,
   24428:	ac0e      	add	r4, sp, #56	; 0x38
   2442a:	2106      	movs	r1, #6
   2442c:	4620      	mov	r0, r4
   2442e:	4a82      	ldr	r2, [pc, #520]	; (24638 <http_client_req+0x37c>)
   24430:	f00f fc05 	bl	33c3e <snprintk>
				       "%zd", req->payload_len);
			if (ret <= 0 || ret >= HTTP_CONTENT_LEN_SIZE) {
   24434:	3801      	subs	r0, #1
   24436:	2804      	cmp	r0, #4
   24438:	d93e      	bls.n	244b8 <http_client_req+0x1fc>
				ret = -ENOMEM;
   2443a:	f06f 040b 	mvn.w	r4, #11

	return total_sent;

out:
	return ret;
}
   2443e:	4620      	mov	r0, r4
   24440:	b041      	add	sp, #260	; 0x104
   24442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	req->internal.timeout = SYS_TIMEOUT_MS(timeout);
   24446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2444a:	4601      	mov	r1, r0
   2444c:	e773      	b.n	24336 <http_client_req+0x7a>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   2444e:	e9cd 8303 	strd	r8, r3, [sp, #12]
   24452:	4b77      	ldr	r3, [pc, #476]	; (24630 <http_client_req+0x374>)
   24454:	e9cd b201 	strd	fp, r2, [sp, #4]
   24458:	9300      	str	r3, [sp, #0]
   2445a:	22c0      	movs	r2, #192	; 0xc0
   2445c:	4630      	mov	r0, r6
   2445e:	ab0d      	add	r3, sp, #52	; 0x34
   24460:	a910      	add	r1, sp, #64	; 0x40
   24462:	f011 fa15 	bl	35890 <http_send_data.constprop.0>
   24466:	e79b      	b.n	243a0 <http_client_req+0xe4>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   24468:	2200      	movs	r2, #0
   2446a:	4630      	mov	r0, r6
   2446c:	e9cd 3200 	strd	r3, r2, [sp]
   24470:	a910      	add	r1, sp, #64	; 0x40
   24472:	22c0      	movs	r2, #192	; 0xc0
   24474:	ab0d      	add	r3, sp, #52	; 0x34
   24476:	f011 fa0b 	bl	35890 <http_send_data.constprop.0>
			if (ret < 0) {
   2447a:	1e04      	subs	r4, r0, #0
   2447c:	f109 0904 	add.w	r9, r9, #4
   24480:	dbdd      	blt.n	2443e <http_client_req+0x182>
			total_sent += ret;
   24482:	4427      	add	r7, r4
		for (i = 0; req->optional_headers && req->optional_headers[i];
   24484:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   24488:	2b00      	cmp	r3, #0
   2448a:	d0a4      	beq.n	243d6 <http_client_req+0x11a>
   2448c:	f853 3009 	ldr.w	r3, [r3, r9]
   24490:	2b00      	cmp	r3, #0
   24492:	d1e9      	bne.n	24468 <http_client_req+0x1ac>
   24494:	e79f      	b.n	243d6 <http_client_req+0x11a>
   24496:	4699      	mov	r9, r3
   24498:	e7f4      	b.n	24484 <http_client_req+0x1c8>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   2449a:	2200      	movs	r2, #0
   2449c:	4630      	mov	r0, r6
   2449e:	e9cd 3200 	strd	r3, r2, [sp]
   244a2:	a910      	add	r1, sp, #64	; 0x40
   244a4:	22c0      	movs	r2, #192	; 0xc0
   244a6:	ab0d      	add	r3, sp, #52	; 0x34
   244a8:	f011 f9f2 	bl	35890 <http_send_data.constprop.0>
		if (ret < 0) {
   244ac:	1e04      	subs	r4, r0, #0
   244ae:	f109 0904 	add.w	r9, r9, #4
   244b2:	dbc4      	blt.n	2443e <http_client_req+0x182>
		total_sent += ret;
   244b4:	4427      	add	r7, r4
	for (i = 0; req->header_fields && req->header_fields[i]; i++) {
   244b6:	e790      	b.n	243da <http_client_req+0x11e>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   244b8:	2300      	movs	r3, #0
   244ba:	e9cd 8304 	strd	r8, r3, [sp, #16]
   244be:	4b5f      	ldr	r3, [pc, #380]	; (2463c <http_client_req+0x380>)
   244c0:	22c0      	movs	r2, #192	; 0xc0
   244c2:	9300      	str	r3, [sp, #0]
   244c4:	4630      	mov	r0, r6
   244c6:	e9cd 4802 	strd	r4, r8, [sp, #8]
   244ca:	f8cd b004 	str.w	fp, [sp, #4]
   244ce:	ab0d      	add	r3, sp, #52	; 0x34
   244d0:	a910      	add	r1, sp, #64	; 0x40
   244d2:	f011 f9dd 	bl	35890 <http_send_data.constprop.0>
		if (ret < 0) {
   244d6:	2800      	cmp	r0, #0
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   244d8:	4604      	mov	r4, r0
		if (ret < 0) {
   244da:	dbb0      	blt.n	2443e <http_client_req+0x182>
	return sendall(sock, send_buf, send_buf_len);
   244dc:	4630      	mov	r0, r6
   244de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   244e0:	a910      	add	r1, sp, #64	; 0x40
   244e2:	f011 f9ba 	bl	3585a <sendall>
		if (ret < 0) {
   244e6:	1e03      	subs	r3, r0, #0
   244e8:	f2c0 80e4 	blt.w	246b4 <http_client_req+0x3f8>
		send_buf_pos = 0;
   244ec:	2200      	movs	r2, #0
		total_sent += ret;
   244ee:	19e0      	adds	r0, r4, r7
		total_sent += ret;
   244f0:	18c7      	adds	r7, r0, r3
		if (req->payload_cb) {
   244f2:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
		send_buf_pos = 0;
   244f6:	920d      	str	r2, [sp, #52]	; 0x34
		if (req->payload_cb) {
   244f8:	2b00      	cmp	r3, #0
   244fa:	d072      	beq.n	245e2 <http_client_req+0x326>
			ret = req->payload_cb(sock, req, user_data);
   244fc:	4652      	mov	r2, sl
   244fe:	4629      	mov	r1, r5
   24500:	4630      	mov	r0, r6
   24502:	4798      	blx	r3
			if (ret < 0) {
   24504:	1e04      	subs	r4, r0, #0
   24506:	db9a      	blt.n	2443e <http_client_req+0x182>
			total_sent += ret;
   24508:	443c      	add	r4, r7
	if (send_buf_pos > 0) {
   2450a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2450c:	b13a      	cbz	r2, 2451e <http_client_req+0x262>
	return sendall(sock, send_buf, send_buf_len);
   2450e:	4630      	mov	r0, r6
   24510:	a910      	add	r1, sp, #64	; 0x40
   24512:	f011 f9a2 	bl	3585a <sendall>
		if (ret < 0) {
   24516:	2800      	cmp	r0, #0
   24518:	f2c0 80ce 	blt.w	246b8 <http_client_req+0x3fc>
		total_sent += ret;
   2451c:	4404      	add	r4, r0
	http_client_init_parser(&req->internal.parser,
   2451e:	f105 0830 	add.w	r8, r5, #48	; 0x30
	http_parser_init(parser, HTTP_RESPONSE);
   24522:	2101      	movs	r1, #1
   24524:	4640      	mov	r0, r8
   24526:	f011 f8a4 	bl	35672 <http_parser_init>
	settings->on_body = on_body;
   2452a:	4b45      	ldr	r3, [pc, #276]	; (24640 <http_client_req+0x384>)
	http_client_init_parser(&req->internal.parser,
   2452c:	f105 0950 	add.w	r9, r5, #80	; 0x50
	settings->on_body = on_body;
   24530:	66ab      	str	r3, [r5, #104]	; 0x68
	settings->on_chunk_complete = on_chunk_complete;
   24532:	4b44      	ldr	r3, [pc, #272]	; (24644 <http_client_req+0x388>)
   24534:	676b      	str	r3, [r5, #116]	; 0x74
	settings->on_chunk_header = on_chunk_header;
   24536:	4b44      	ldr	r3, [pc, #272]	; (24648 <http_client_req+0x38c>)
   24538:	672b      	str	r3, [r5, #112]	; 0x70
	settings->on_headers_complete = on_headers_complete;
   2453a:	4b44      	ldr	r3, [pc, #272]	; (2464c <http_client_req+0x390>)
   2453c:	666b      	str	r3, [r5, #100]	; 0x64
	settings->on_header_field = on_header_field;
   2453e:	4b44      	ldr	r3, [pc, #272]	; (24650 <http_client_req+0x394>)
   24540:	65eb      	str	r3, [r5, #92]	; 0x5c
	settings->on_header_value = on_header_value;
   24542:	4b44      	ldr	r3, [pc, #272]	; (24654 <http_client_req+0x398>)
   24544:	662b      	str	r3, [r5, #96]	; 0x60
	settings->on_message_begin = on_message_begin;
   24546:	4b44      	ldr	r3, [pc, #272]	; (24658 <http_client_req+0x39c>)
   24548:	652b      	str	r3, [r5, #80]	; 0x50
	settings->on_message_complete = on_message_complete;
   2454a:	4b44      	ldr	r3, [pc, #272]	; (2465c <http_client_req+0x3a0>)
   2454c:	66eb      	str	r3, [r5, #108]	; 0x6c
	settings->on_status = on_status;
   2454e:	4b44      	ldr	r3, [pc, #272]	; (24660 <http_client_req+0x3a4>)
   24550:	65ab      	str	r3, [r5, #88]	; 0x58
	settings->on_url = on_url;
   24552:	4b44      	ldr	r3, [pc, #272]	; (24664 <http_client_req+0x3a8>)
   24554:	656b      	str	r3, [r5, #84]	; 0x54
	if (!K_TIMEOUT_EQ(req->internal.timeout, K_FOREVER) &&
   24556:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	; 0xc8
   2455a:	3301      	adds	r3, #1
   2455c:	9308      	str	r3, [sp, #32]
   2455e:	f142 0300 	adc.w	r3, r2, #0
   24562:	9309      	str	r3, [sp, #36]	; 0x24
   24564:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   24568:	2b00      	cmp	r3, #0
   2456a:	bf08      	it	eq
   2456c:	2a02      	cmpeq	r2, #2
   2456e:	d309      	bcc.n	24584 <http_client_req+0x2c8>
		k_delayed_work_init(&req->internal.work, http_timeout);
   24570:	4628      	mov	r0, r5
   24572:	493d      	ldr	r1, [pc, #244]	; (24668 <http_client_req+0x3ac>)
   24574:	f012 fce3 	bl	36f3e <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   24578:	e9d5 2332 	ldrd	r2, r3, [r5, #200]	; 0xc8
   2457c:	4629      	mov	r1, r5
   2457e:	483b      	ldr	r0, [pc, #236]	; (2466c <http_client_req+0x3b0>)
   24580:	f00e f858 	bl	32634 <k_delayed_work_submit_to_queue>
   24584:	2700      	movs	r7, #0
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   24586:	46ba      	mov	sl, r7
		received = recv(sock, req->internal.response.recv_buf + offset,
   24588:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
   2458c:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
   24590:	4439      	add	r1, r7
   24592:	1bd2      	subs	r2, r2, r7
   24594:	2300      	movs	r3, #0
   24596:	4630      	mov	r0, r6
   24598:	e9cd aa00 	strd	sl, sl, [sp]
   2459c:	f010 fc41 	bl	34e22 <z_impl_zsock_recvfrom>
		if (received == 0) {
   245a0:	f1b0 0b00 	subs.w	fp, r0, #0
   245a4:	d002      	beq.n	245ac <http_client_req+0x2f0>
		} else if (received < 0) {
   245a6:	da67      	bge.n	24678 <http_client_req+0x3bc>
			ret = -errno;
   245a8:	f010 feb5 	bl	35316 <__errno>
	if (!K_TIMEOUT_EQ(req->internal.timeout, K_FOREVER) &&
   245ac:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	; 0xc8
   245b0:	3301      	adds	r3, #1
   245b2:	930a      	str	r3, [sp, #40]	; 0x28
   245b4:	f142 0300 	adc.w	r3, r2, #0
   245b8:	930b      	str	r3, [sp, #44]	; 0x2c
   245ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   245be:	2b00      	cmp	r3, #0
   245c0:	bf08      	it	eq
   245c2:	2a02      	cmpeq	r2, #2
   245c4:	f4ff af3b 	bcc.w	2443e <http_client_req+0x182>
		(void)k_delayed_work_cancel(&req->internal.work);
   245c8:	4628      	mov	r0, r5
   245ca:	f012 fcc0 	bl	36f4e <k_delayed_work_cancel>
   245ce:	e736      	b.n	2443e <http_client_req+0x182>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   245d0:	e9cd 8300 	strd	r8, r3, [sp]
   245d4:	22c0      	movs	r2, #192	; 0xc0
   245d6:	4630      	mov	r0, r6
   245d8:	ab0d      	add	r3, sp, #52	; 0x34
   245da:	a910      	add	r1, sp, #64	; 0x40
   245dc:	f011 f958 	bl	35890 <http_send_data.constprop.0>
   245e0:	e779      	b.n	244d6 <http_client_req+0x21a>
			if (req->payload_len == 0) {
   245e2:	f8d5 8104 	ldr.w	r8, [r5, #260]	; 0x104
   245e6:	f1b8 0f00 	cmp.w	r8, #0
   245ea:	d104      	bne.n	245f6 <http_client_req+0x33a>
				length = strlen(req->payload);
   245ec:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   245f0:	f7f4 fd3e 	bl	19070 <strlen>
   245f4:	4680      	mov	r8, r0
			ret = sendall(sock, req->payload, length);
   245f6:	4642      	mov	r2, r8
   245f8:	4630      	mov	r0, r6
   245fa:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   245fe:	f011 f92c 	bl	3585a <sendall>
			if (ret < 0) {
   24602:	1e04      	subs	r4, r0, #0
   24604:	f6ff af1b 	blt.w	2443e <http_client_req+0x182>
			total_sent += length;
   24608:	eb07 0408 	add.w	r4, r7, r8
   2460c:	e77d      	b.n	2450a <http_client_req+0x24e>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   2460e:	e9cd 8300 	strd	r8, r3, [sp]
   24612:	22c0      	movs	r2, #192	; 0xc0
   24614:	4630      	mov	r0, r6
   24616:	ab0d      	add	r3, sp, #52	; 0x34
   24618:	a910      	add	r1, sp, #64	; 0x40
   2461a:	f011 f939 	bl	35890 <http_send_data.constprop.0>
		if (ret < 0) {
   2461e:	1e04      	subs	r4, r0, #0
   24620:	f6ff af0d 	blt.w	2443e <http_client_req+0x182>
   24624:	463c      	mov	r4, r7
   24626:	e770      	b.n	2450a <http_client_req+0x24e>
   24628:	0003a875 	.word	0x0003a875
   2462c:	0003bbba 	.word	0x0003bbba
   24630:	0003b89f 	.word	0x0003b89f
   24634:	0003b8a4 	.word	0x0003b8a4
   24638:	0003b8b1 	.word	0x0003b8b1
   2463c:	0003b890 	.word	0x0003b890
   24640:	000357ff 	.word	0x000357ff
   24644:	00035715 	.word	0x00035715
   24648:	00035705 	.word	0x00035705
   2464c:	00035793 	.word	0x00035793
   24650:	00024279 	.word	0x00024279
   24654:	0003572d 	.word	0x0003572d
   24658:	000356c7 	.word	0x000356c7
   2465c:	000356d7 	.word	0x000356d7
   24660:	000357cb 	.word	0x000357cb
   24664:	000356b7 	.word	0x000356b7
   24668:	00035725 	.word	0x00035725
   2466c:	20023348 	.word	0x20023348
   24670:	0003c24e 	.word	0x0003c24e
   24674:	0003a83b 	.word	0x0003a83b
			req->internal.response.data_len += received;
   24678:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
				req->internal.response.recv_buf + offset,
   2467c:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
			req->internal.response.data_len += received;
   24680:	445b      	add	r3, fp
   24682:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
			(void)http_parser_execute(
   24686:	443a      	add	r2, r7
   24688:	465b      	mov	r3, fp
   2468a:	4649      	mov	r1, r9
   2468c:	4640      	mov	r0, r8
   2468e:	f7fe fa37 	bl	22b00 <http_parser_execute>
		if (offset >= req->internal.response.recv_buf_len) {
   24692:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
		offset += received;
   24696:	445f      	add	r7, fp
			offset = 0;
   24698:	429f      	cmp	r7, r3
   2469a:	bf28      	it	cs
   2469c:	2700      	movcs	r7, #0
		if (req->internal.response.message_complete) {
   2469e:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
   246a2:	075b      	lsls	r3, r3, #29
   246a4:	f57f af70 	bpl.w	24588 <http_client_req+0x2cc>
   246a8:	e780      	b.n	245ac <http_client_req+0x2f0>
		return -EINVAL;
   246aa:	f06f 0415 	mvn.w	r4, #21
   246ae:	e6c6      	b.n	2443e <http_client_req+0x182>
   246b0:	463c      	mov	r4, r7
   246b2:	e6c4      	b.n	2443e <http_client_req+0x182>
   246b4:	461c      	mov	r4, r3
   246b6:	e6c2      	b.n	2443e <http_client_req+0x182>
   246b8:	4604      	mov	r4, r0
   246ba:	e6c0      	b.n	2443e <http_client_req+0x182>

000246bc <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   246bc:	4a06      	ldr	r2, [pc, #24]	; (246d8 <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   246be:	f000 001f 	and.w	r0, r0, #31
   246c2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   246c6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   246ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   246ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   246d2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   246d6:	4770      	bx	lr
   246d8:	40842500 	.word	0x40842500

000246dc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   246dc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   246de:	4b09      	ldr	r3, [pc, #36]	; (24704 <gpio_nrfx_init+0x28>)
   246e0:	781a      	ldrb	r2, [r3, #0]
   246e2:	b96a      	cbnz	r2, 24700 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   246e4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   246e6:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   246e8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   246ea:	2105      	movs	r1, #5
   246ec:	f7fd faa8 	bl	21c40 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   246f0:	2031      	movs	r0, #49	; 0x31
   246f2:	f7fd fa73 	bl	21bdc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   246f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   246fa:	4b03      	ldr	r3, [pc, #12]	; (24708 <gpio_nrfx_init+0x2c>)
   246fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   24700:	2000      	movs	r0, #0
   24702:	bd08      	pop	{r3, pc}
   24704:	2002c07c 	.word	0x2002c07c
   24708:	40031000 	.word	0x40031000

0002470c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2470c:	4b28      	ldr	r3, [pc, #160]	; (247b0 <gpio_nrfx_config+0xa4>)
{
   2470e:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24710:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   24712:	4828      	ldr	r0, [pc, #160]	; (247b4 <gpio_nrfx_config+0xa8>)
   24714:	4013      	ands	r3, r2
   24716:	4283      	cmp	r3, r0
   24718:	d03b      	beq.n	24792 <gpio_nrfx_config+0x86>
   2471a:	d80d      	bhi.n	24738 <gpio_nrfx_config+0x2c>
   2471c:	2b06      	cmp	r3, #6
   2471e:	d015      	beq.n	2474c <gpio_nrfx_config+0x40>
   24720:	d805      	bhi.n	2472e <gpio_nrfx_config+0x22>
   24722:	b19b      	cbz	r3, 2474c <gpio_nrfx_config+0x40>
   24724:	2b02      	cmp	r3, #2
   24726:	d036      	beq.n	24796 <gpio_nrfx_config+0x8a>
   24728:	f06f 0015 	mvn.w	r0, #21
   2472c:	e030      	b.n	24790 <gpio_nrfx_config+0x84>
   2472e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   24732:	d1f9      	bne.n	24728 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   24734:	2301      	movs	r3, #1
   24736:	e009      	b.n	2474c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   24738:	481f      	ldr	r0, [pc, #124]	; (247b8 <gpio_nrfx_config+0xac>)
   2473a:	4283      	cmp	r3, r0
   2473c:	d02d      	beq.n	2479a <gpio_nrfx_config+0x8e>
   2473e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   24742:	d02c      	beq.n	2479e <gpio_nrfx_config+0x92>
   24744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   24748:	d1ee      	bne.n	24728 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   2474a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   2474c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   2474e:	bf4c      	ite	mi
   24750:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   24752:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   24756:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   2475a:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   2475e:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   24762:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   24766:	d006      	beq.n	24776 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   24768:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2476c:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2476e:	d018      	beq.n	247a2 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
   24770:	2201      	movs	r2, #1
   24772:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   24774:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   24776:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   2477a:	2000      	movs	r0, #0
   2477c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
   24780:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   24784:	4a0d      	ldr	r2, [pc, #52]	; (247bc <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   24786:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2478a:	3180      	adds	r1, #128	; 0x80
   2478c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   24790:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   24792:	2307      	movs	r3, #7
   24794:	e7da      	b.n	2474c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   24796:	2304      	movs	r3, #4
   24798:	e7d8      	b.n	2474c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   2479a:	2305      	movs	r3, #5
   2479c:	e7d6      	b.n	2474c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   2479e:	2303      	movs	r3, #3
   247a0:	e7d4      	b.n	2474c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   247a2:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   247a4:	bf42      	ittt	mi
   247a6:	2201      	movmi	r2, #1
   247a8:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   247aa:	60f2      	strmi	r2, [r6, #12]
}
   247ac:	e7e3      	b.n	24776 <gpio_nrfx_config+0x6a>
   247ae:	bf00      	nop
   247b0:	00f00006 	.word	0x00f00006
   247b4:	00100006 	.word	0x00100006
   247b8:	00400002 	.word	0x00400002
   247bc:	40842500 	.word	0x40842500

000247c0 <gpio_nrfx_pin_interrupt_configure>:
{
   247c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   247c4:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   247c6:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   247c8:	f8d0 800c 	ldr.w	r8, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   247cc:	7a08      	ldrb	r0, [r1, #8]
   247ce:	f005 071f 	and.w	r7, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   247d2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   247d6:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   247da:	d10a      	bne.n	247f2 <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   247dc:	486e      	ldr	r0, [pc, #440]	; (24998 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
    *p_pin = pin_number & 0x1F;
   247de:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   247e2:	3180      	adds	r1, #128	; 0x80
   247e4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   247e8:	07c8      	lsls	r0, r1, #31
   247ea:	d508      	bpl.n	247fe <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   247ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   247f0:	e0c2      	b.n	24978 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   247f2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   247f6:	f8d8 100c 	ldr.w	r1, [r8, #12]
   247fa:	f000 80ae 	beq.w	2495a <gpio_nrfx_pin_interrupt_configure+0x19a>
   247fe:	2101      	movs	r1, #1
   24800:	f8d8 000c 	ldr.w	r0, [r8, #12]
   24804:	40a9      	lsls	r1, r5
   24806:	4301      	orrs	r1, r0
   24808:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   2480c:	2101      	movs	r1, #1
   2480e:	f8d8 0014 	ldr.w	r0, [r8, #20]
   24812:	40a9      	lsls	r1, r5
   24814:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   24818:	f8d8 2018 	ldr.w	r2, [r8, #24]
   2481c:	bf0c      	ite	eq
   2481e:	4308      	orreq	r0, r1
   24820:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   24822:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   24826:	bf0c      	ite	eq
   24828:	430a      	orreq	r2, r1
   2482a:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   2482c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   24830:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   24834:	f8c8 2018 	str.w	r2, [r8, #24]
   24838:	f8d8 2010 	ldr.w	r2, [r8, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   2483c:	4e57      	ldr	r6, [pc, #348]	; (2499c <gpio_nrfx_pin_interrupt_configure+0x1dc>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   2483e:	bf0c      	ite	eq
   24840:	4311      	orreq	r1, r2
   24842:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   24846:	f8c8 0014 	str.w	r0, [r8, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   2484a:	f8c8 1010 	str.w	r1, [r8, #16]
   2484e:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   24852:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   24854:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   24858:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   2485c:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   24860:	428f      	cmp	r7, r1
   24862:	d17f      	bne.n	24964 <gpio_nrfx_pin_interrupt_configure+0x1a4>
		    && (intenset & BIT(i))) {
   24864:	fa22 f103 	lsr.w	r1, r2, r3
   24868:	07c9      	lsls	r1, r1, #31
   2486a:	d57b      	bpl.n	24964 <gpio_nrfx_pin_interrupt_configure+0x1a4>
			(void)atomic_and(mask, ~BIT(i));
   2486c:	2201      	movs	r2, #1
   2486e:	409a      	lsls	r2, r3
   24870:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24872:	494b      	ldr	r1, [pc, #300]	; (249a0 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   24874:	e8d1 4fef 	ldaex	r4, [r1]
   24878:	4004      	ands	r4, r0
   2487a:	e8c1 4fec 	stlex	ip, r4, [r1]
   2487e:	f1bc 0f00 	cmp.w	ip, #0
   24882:	d1f7      	bne.n	24874 <gpio_nrfx_pin_interrupt_configure+0xb4>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   24884:	009b      	lsls	r3, r3, #2
   24886:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2488a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   2488e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   24892:	f021 0101 	bic.w	r1, r1, #1
   24896:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   2489a:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2489e:	2100      	movs	r1, #0
   248a0:	4638      	mov	r0, r7
   248a2:	f7ff ff0b 	bl	246bc <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   248a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   248aa:	40eb      	lsrs	r3, r5
   248ac:	f013 0301 	ands.w	r3, r3, #1
   248b0:	d051      	beq.n	24956 <gpio_nrfx_pin_interrupt_configure+0x196>
		if (data->trig_edge & BIT(pin)) {
   248b2:	f8d8 3014 	ldr.w	r3, [r8, #20]
   248b6:	40eb      	lsrs	r3, r5
   248b8:	f013 0401 	ands.w	r4, r3, #1
   248bc:	d05e      	beq.n	2497c <gpio_nrfx_pin_interrupt_configure+0x1bc>
			if (data->double_edge & BIT(pin)) {
   248be:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   248c2:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   248c4:	40eb      	lsrs	r3, r5
   248c6:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   248c8:	bf48      	it	mi
   248ca:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   248cc:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   248d0:	bf5f      	itttt	pl
   248d2:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   248d6:	fa21 f505 	lsrpl.w	r5, r1, r5
   248da:	f005 0501 	andpl.w	r5, r5, #1
   248de:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   248e2:	492f      	ldr	r1, [pc, #188]	; (249a0 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   248e4:	bf58      	it	pl
   248e6:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   248e8:	fa0c f402 	lsl.w	r4, ip, r2
   248ec:	e8d1 0fef 	ldaex	r0, [r1]
   248f0:	ea40 0304 	orr.w	r3, r0, r4
   248f4:	e8c1 3fee 	stlex	lr, r3, [r1]
   248f8:	f1be 0f00 	cmp.w	lr, #0
   248fc:	d1f6      	bne.n	248ec <gpio_nrfx_pin_interrupt_configure+0x12c>
		if ((prev & BIT(channel)) == 0) {
   248fe:	40d0      	lsrs	r0, r2
   24900:	f010 0301 	ands.w	r3, r0, #1
   24904:	d133      	bne.n	2496e <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   24906:	0091      	lsls	r1, r2, #2
   24908:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   2490c:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   24910:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   24914:	3240      	adds	r2, #64	; 0x40
   24916:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   2491a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   2491e:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24922:	023f      	lsls	r7, r7, #8
   24924:	0092      	lsls	r2, r2, #2
   24926:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   2492a:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   2492e:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24930:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   24934:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   24938:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2493c:	4307      	orrs	r7, r0
   2493e:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24942:	6013      	str	r3, [r2, #0]
   24944:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   24946:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   2494a:	f042 0201 	orr.w	r2, r2, #1
   2494e:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   24952:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   24956:	4618      	mov	r0, r3
   24958:	e00e      	b.n	24978 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2495a:	2001      	movs	r0, #1
   2495c:	40a8      	lsls	r0, r5
   2495e:	ea21 0100 	bic.w	r1, r1, r0
   24962:	e751      	b.n	24808 <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   24964:	3301      	adds	r3, #1
   24966:	2b08      	cmp	r3, #8
   24968:	f47f af74 	bne.w	24854 <gpio_nrfx_pin_interrupt_configure+0x94>
   2496c:	e797      	b.n	2489e <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   2496e:	3201      	adds	r2, #1
   24970:	2a08      	cmp	r2, #8
   24972:	d1b9      	bne.n	248e8 <gpio_nrfx_pin_interrupt_configure+0x128>
	return -ENODEV;
   24974:	f06f 0012 	mvn.w	r0, #18
}
   24978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2497c:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   24980:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24982:	40e9      	lsrs	r1, r5
   24984:	f001 0101 	and.w	r1, r1, #1
   24988:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2498c:	b2c9      	uxtb	r1, r1
   2498e:	f7ff fe95 	bl	246bc <nrf_gpio_cfg_sense_set>
	int res = 0;
   24992:	4620      	mov	r0, r4
   24994:	e7f0      	b.n	24978 <gpio_nrfx_pin_interrupt_configure+0x1b8>
   24996:	bf00      	nop
   24998:	40842500 	.word	0x40842500
   2499c:	40031000 	.word	0x40031000
   249a0:	20023778 	.word	0x20023778

000249a4 <gpiote_event_handler>:
{
   249a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   249a8:	4f3f      	ldr	r7, [pc, #252]	; (24aa8 <gpiote_event_handler+0x104>)
   249aa:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   249ac:	2e00      	cmp	r6, #0
   249ae:	d04f      	beq.n	24a50 <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
   249b0:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   249b4:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   249b8:	4b3c      	ldr	r3, [pc, #240]	; (24aac <gpiote_event_handler+0x108>)
   249ba:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   249bc:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   249c0:	430a      	orrs	r2, r1
   249c2:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   249c6:	4a3a      	ldr	r2, [pc, #232]	; (24ab0 <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   249c8:	691b      	ldr	r3, [r3, #16]
   249ca:	6914      	ldr	r4, [r2, #16]
   249cc:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   249ce:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   249d2:	bb75      	cbnz	r5, 24a32 <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   249d4:	603d      	str	r5, [r7, #0]
   249d6:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   249d8:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   249da:	2501      	movs	r5, #1
   249dc:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   249de:	4835      	ldr	r0, [pc, #212]	; (24ab4 <gpiote_event_handler+0x110>)
   249e0:	4935      	ldr	r1, [pc, #212]	; (24ab8 <gpiote_event_handler+0x114>)
   249e2:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   249e6:	fa05 fc03 	lsl.w	ip, r5, r3
   249ea:	ea1c 0f02 	tst.w	ip, r2
   249ee:	d00f      	beq.n	24a10 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   249f0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   249f4:	b162      	cbz	r2, 24a10 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   249f6:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   249fa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   249fe:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   24a02:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   24a06:	fa05 f202 	lsl.w	r2, r5, r2
   24a0a:	4314      	orrs	r4, r2
   24a0c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   24a10:	3301      	adds	r3, #1
   24a12:	2b08      	cmp	r3, #8
   24a14:	d1e5      	bne.n	249e2 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   24a16:	b9ec      	cbnz	r4, 24a54 <gpiote_event_handler+0xb0>
	if (port_event) {
   24a18:	b14e      	cbz	r6, 24a2e <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
   24a1a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   24a1c:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   24a1e:	4d23      	ldr	r5, [pc, #140]	; (24aac <gpiote_event_handler+0x108>)
   24a20:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   24a22:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   24a26:	430a      	orrs	r2, r1
   24a28:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   24a2c:	bb54      	cbnz	r4, 24a84 <gpiote_event_handler+0xe0>
}
   24a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   24a32:	ea15 0f08 	tst.w	r5, r8
   24a36:	d006      	beq.n	24a46 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   24a38:	2100      	movs	r1, #0
   24a3a:	f009 001f 	and.w	r0, r9, #31
   24a3e:	f7ff fe3d 	bl	246bc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   24a42:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   24a46:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   24a4a:	ea4f 0848 	mov.w	r8, r8, lsl #1
   24a4e:	e7c0      	b.n	249d2 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   24a50:	4634      	mov	r4, r6
   24a52:	e7c1      	b.n	249d8 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24a54:	4b15      	ldr	r3, [pc, #84]	; (24aac <gpiote_event_handler+0x108>)
   24a56:	6859      	ldr	r1, [r3, #4]
   24a58:	2900      	cmp	r1, #0
   24a5a:	d0dd      	beq.n	24a18 <gpiote_event_handler+0x74>
	return node->next;
   24a5c:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   24a5e:	4f17      	ldr	r7, [pc, #92]	; (24abc <gpiote_event_handler+0x118>)
   24a60:	2d00      	cmp	r5, #0
   24a62:	bf38      	it	cc
   24a64:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   24a66:	688a      	ldr	r2, [r1, #8]
   24a68:	4022      	ands	r2, r4
   24a6a:	d002      	beq.n	24a72 <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
   24a6c:	4638      	mov	r0, r7
   24a6e:	684b      	ldr	r3, [r1, #4]
   24a70:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24a72:	2d00      	cmp	r5, #0
   24a74:	d0d0      	beq.n	24a18 <gpiote_event_handler+0x74>
   24a76:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24a78:	4629      	mov	r1, r5
   24a7a:	2b00      	cmp	r3, #0
   24a7c:	bf38      	it	cc
   24a7e:	2300      	movcc	r3, #0
   24a80:	461d      	mov	r5, r3
   24a82:	e7f0      	b.n	24a66 <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
   24a84:	4226      	tst	r6, r4
   24a86:	d00c      	beq.n	24aa2 <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24a88:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   24a8a:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24a8e:	40f9      	lsrs	r1, r7
   24a90:	f001 0101 	and.w	r1, r1, #1
   24a94:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   24a98:	b2c9      	uxtb	r1, r1
   24a9a:	f7ff fe0f 	bl	246bc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   24a9e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   24aa2:	3701      	adds	r7, #1
		bit <<= 1;
   24aa4:	0076      	lsls	r6, r6, #1
   24aa6:	e7c1      	b.n	24a2c <gpiote_event_handler+0x88>
   24aa8:	4003117c 	.word	0x4003117c
   24aac:	2002375c 	.word	0x2002375c
   24ab0:	40842500 	.word	0x40842500
   24ab4:	40031000 	.word	0x40031000
   24ab8:	40031100 	.word	0x40031100
   24abc:	200206cc 	.word	0x200206cc

00024ac0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   24ac0:	4b02      	ldr	r3, [pc, #8]	; (24acc <flash_nrf_pages_layout+0xc>)
   24ac2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   24ac4:	2301      	movs	r3, #1
   24ac6:	6013      	str	r3, [r2, #0]
}
   24ac8:	4770      	bx	lr
   24aca:	bf00      	nop
   24acc:	2002377c 	.word	0x2002377c

00024ad0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   24ad0:	4800      	ldr	r0, [pc, #0]	; (24ad4 <flash_nrf_get_parameters+0x4>)
   24ad2:	4770      	bx	lr
   24ad4:	0003893c 	.word	0x0003893c

00024ad8 <flash_nrf_read>:
{
   24ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24ada:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   24adc:	4619      	mov	r1, r3
   24ade:	4620      	mov	r0, r4
{
   24ae0:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   24ae2:	9301      	str	r3, [sp, #4]
   24ae4:	f010 ff6a 	bl	359bc <is_regular_addr_valid>
   24ae8:	9a01      	ldr	r2, [sp, #4]
   24aea:	b970      	cbnz	r0, 24b0a <flash_nrf_read+0x32>
   24aec:	490f      	ldr	r1, [pc, #60]	; (24b2c <flash_nrf_read+0x54>)
   24aee:	4b10      	ldr	r3, [pc, #64]	; (24b30 <flash_nrf_read+0x58>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24af0:	4810      	ldr	r0, [pc, #64]	; (24b34 <flash_nrf_read+0x5c>)
   24af2:	1a5b      	subs	r3, r3, r1
   24af4:	08db      	lsrs	r3, r3, #3
   24af6:	019b      	lsls	r3, r3, #6
   24af8:	4621      	mov	r1, r4
   24afa:	f043 0301 	orr.w	r3, r3, #1
   24afe:	f00f fd29 	bl	34554 <log_2>
		return -EINVAL;
   24b02:	f06f 0015 	mvn.w	r0, #21
}
   24b06:	b003      	add	sp, #12
   24b08:	bd30      	pop	{r4, r5, pc}
	if (!len) {
   24b0a:	b16a      	cbz	r2, 24b28 <flash_nrf_read+0x50>
	if (addr < PM_APP_ADDRESS) {
   24b0c:	f5b4 3fc1 	cmp.w	r4, #98816	; 0x18200
		return spm_request_read(data, addr, len);
   24b10:	4621      	mov	r1, r4
   24b12:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   24b14:	da04      	bge.n	24b20 <flash_nrf_read+0x48>
}
   24b16:	b003      	add	sp, #12
   24b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return spm_request_read(data, addr, len);
   24b1c:	f010 bb5c 	b.w	351d8 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24b20:	f012 fc6f 	bl	37402 <memcpy>
	return 0;
   24b24:	2000      	movs	r0, #0
   24b26:	e7ee      	b.n	24b06 <flash_nrf_read+0x2e>
		return 0;
   24b28:	4610      	mov	r0, r2
   24b2a:	e7ec      	b.n	24b06 <flash_nrf_read+0x2e>
   24b2c:	0003831c 	.word	0x0003831c
   24b30:	00038384 	.word	0x00038384
   24b34:	0003b8b5 	.word	0x0003b8b5

00024b38 <flash_nrf_erase>:
{
   24b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b3a:	460d      	mov	r5, r1
   24b3c:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24b3e:	f011 ff38 	bl	369b2 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   24b42:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24b44:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   24b46:	4628      	mov	r0, r5
   24b48:	f010 ff38 	bl	359bc <is_regular_addr_valid>
   24b4c:	462f      	mov	r7, r5
   24b4e:	b378      	cbz	r0, 24bb0 <flash_nrf_erase+0x78>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   24b50:	fbb5 f3f6 	udiv	r3, r5, r6
   24b54:	fb06 5313 	mls	r3, r6, r3, r5
   24b58:	b923      	cbnz	r3, 24b64 <flash_nrf_erase+0x2c>
   24b5a:	fbb4 f2f6 	udiv	r2, r4, r6
   24b5e:	fb06 4012 	mls	r0, r6, r2, r4
   24b62:	b170      	cbz	r0, 24b82 <flash_nrf_erase+0x4a>
   24b64:	4a18      	ldr	r2, [pc, #96]	; (24bc8 <flash_nrf_erase+0x90>)
   24b66:	4b19      	ldr	r3, [pc, #100]	; (24bcc <flash_nrf_erase+0x94>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   24b68:	4629      	mov	r1, r5
   24b6a:	1a9b      	subs	r3, r3, r2
   24b6c:	4622      	mov	r2, r4
   24b6e:	08db      	lsrs	r3, r3, #3
   24b70:	019b      	lsls	r3, r3, #6
   24b72:	4817      	ldr	r0, [pc, #92]	; (24bd0 <flash_nrf_erase+0x98>)
   24b74:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24b78:	f00f fcec 	bl	34554 <log_2>
		return -EINVAL;
   24b7c:	f06f 0015 	mvn.w	r0, #21
   24b80:	e015      	b.n	24bae <flash_nrf_erase+0x76>
		if (!n_pages) {
   24b82:	42a6      	cmp	r6, r4
   24b84:	d813      	bhi.n	24bae <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   24b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24b8e:	4811      	ldr	r0, [pc, #68]	; (24bd4 <flash_nrf_erase+0x9c>)
   24b90:	f00d fbfe 	bl	32390 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24b94:	f011 ff0d 	bl	369b2 <nrfx_nvmc_flash_page_size_get>
   24b98:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   24b9a:	4638      	mov	r0, r7
   24b9c:	f00c fb50 	bl	31240 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   24ba0:	1b64      	subs	r4, r4, r5
   24ba2:	442f      	add	r7, r5
   24ba4:	d1f9      	bne.n	24b9a <flash_nrf_erase+0x62>
	z_impl_k_sem_give(sem);
   24ba6:	480b      	ldr	r0, [pc, #44]	; (24bd4 <flash_nrf_erase+0x9c>)
   24ba8:	f00d fbcc 	bl	32344 <z_impl_k_sem_give>
	return ret;
   24bac:	4620      	mov	r0, r4
}
   24bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24bb0:	4a05      	ldr	r2, [pc, #20]	; (24bc8 <flash_nrf_erase+0x90>)
   24bb2:	4b06      	ldr	r3, [pc, #24]	; (24bcc <flash_nrf_erase+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24bb4:	4629      	mov	r1, r5
   24bb6:	1a9b      	subs	r3, r3, r2
   24bb8:	08db      	lsrs	r3, r3, #3
   24bba:	019b      	lsls	r3, r3, #6
   24bbc:	4622      	mov	r2, r4
   24bbe:	4806      	ldr	r0, [pc, #24]	; (24bd8 <flash_nrf_erase+0xa0>)
   24bc0:	f043 0301 	orr.w	r3, r3, #1
   24bc4:	e7d8      	b.n	24b78 <flash_nrf_erase+0x40>
   24bc6:	bf00      	nop
   24bc8:	0003831c 	.word	0x0003831c
   24bcc:	00038384 	.word	0x00038384
   24bd0:	0003b8d2 	.word	0x0003b8d2
   24bd4:	20023784 	.word	0x20023784
   24bd8:	0003b8b5 	.word	0x0003b8b5

00024bdc <nrf_flash_init>:
{
   24bdc:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   24bde:	2201      	movs	r2, #1
   24be0:	4806      	ldr	r0, [pc, #24]	; (24bfc <nrf_flash_init+0x20>)
   24be2:	4611      	mov	r1, r2
   24be4:	f012 f933 	bl	36e4e <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   24be8:	f011 fee6 	bl	369b8 <nrfx_nvmc_flash_page_count_get>
   24bec:	4c04      	ldr	r4, [pc, #16]	; (24c00 <nrf_flash_init+0x24>)
   24bee:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   24bf0:	f011 fedf 	bl	369b2 <nrfx_nvmc_flash_page_size_get>
   24bf4:	6060      	str	r0, [r4, #4]
}
   24bf6:	2000      	movs	r0, #0
   24bf8:	bd10      	pop	{r4, pc}
   24bfa:	bf00      	nop
   24bfc:	20023784 	.word	0x20023784
   24c00:	2002377c 	.word	0x2002377c

00024c04 <flash_nrf_write>:
{
   24c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c06:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   24c08:	4619      	mov	r1, r3
   24c0a:	4630      	mov	r0, r6
{
   24c0c:	4617      	mov	r7, r2
   24c0e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   24c10:	f010 fed4 	bl	359bc <is_regular_addr_valid>
   24c14:	b970      	cbnz	r0, 24c34 <flash_nrf_write+0x30>
   24c16:	4a1f      	ldr	r2, [pc, #124]	; (24c94 <flash_nrf_write+0x90>)
   24c18:	4b1f      	ldr	r3, [pc, #124]	; (24c98 <flash_nrf_write+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24c1a:	4631      	mov	r1, r6
   24c1c:	1a9b      	subs	r3, r3, r2
   24c1e:	4622      	mov	r2, r4
   24c20:	08db      	lsrs	r3, r3, #3
   24c22:	019b      	lsls	r3, r3, #6
   24c24:	481d      	ldr	r0, [pc, #116]	; (24c9c <flash_nrf_write+0x98>)
   24c26:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   24c2a:	f00f fc93 	bl	34554 <log_2>
		return -EINVAL;
   24c2e:	f06f 0015 	mvn.w	r0, #21
}
   24c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   24c34:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   24c38:	f015 0503 	ands.w	r5, r5, #3
   24c3c:	d00a      	beq.n	24c54 <flash_nrf_write+0x50>
   24c3e:	4a15      	ldr	r2, [pc, #84]	; (24c94 <flash_nrf_write+0x90>)
   24c40:	4b15      	ldr	r3, [pc, #84]	; (24c98 <flash_nrf_write+0x94>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   24c42:	4631      	mov	r1, r6
   24c44:	1a9b      	subs	r3, r3, r2
   24c46:	08db      	lsrs	r3, r3, #3
   24c48:	019b      	lsls	r3, r3, #6
   24c4a:	4622      	mov	r2, r4
   24c4c:	4814      	ldr	r0, [pc, #80]	; (24ca0 <flash_nrf_write+0x9c>)
   24c4e:	f043 0301 	orr.w	r3, r3, #1
   24c52:	e7ea      	b.n	24c2a <flash_nrf_write+0x26>
	if (!len) {
   24c54:	b1dc      	cbz	r4, 24c8e <flash_nrf_write+0x8a>
	return z_impl_k_sem_take(sem, timeout);
   24c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24c5e:	4811      	ldr	r0, [pc, #68]	; (24ca4 <flash_nrf_write+0xa0>)
   24c60:	f00d fb96 	bl	32390 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   24c64:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   24c68:	42a5      	cmp	r5, r4
   24c6a:	eb05 0006 	add.w	r0, r5, r6
   24c6e:	d109      	bne.n	24c84 <flash_nrf_write+0x80>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   24c70:	4a0d      	ldr	r2, [pc, #52]	; (24ca8 <flash_nrf_write+0xa4>)
   24c72:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   24c76:	07db      	lsls	r3, r3, #31
   24c78:	d5fb      	bpl.n	24c72 <flash_nrf_write+0x6e>
	z_impl_k_sem_give(sem);
   24c7a:	480a      	ldr	r0, [pc, #40]	; (24ca4 <flash_nrf_write+0xa0>)
   24c7c:	f00d fb62 	bl	32344 <z_impl_k_sem_give>
	return ret;
   24c80:	2000      	movs	r0, #0
}
   24c82:	e7d6      	b.n	24c32 <flash_nrf_write+0x2e>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   24c84:	5979      	ldr	r1, [r7, r5]
   24c86:	f00c faf7 	bl	31278 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   24c8a:	3504      	adds	r5, #4
}
   24c8c:	e7ec      	b.n	24c68 <flash_nrf_write+0x64>
		return 0;
   24c8e:	4620      	mov	r0, r4
   24c90:	e7cf      	b.n	24c32 <flash_nrf_write+0x2e>
   24c92:	bf00      	nop
   24c94:	0003831c 	.word	0x0003831c
   24c98:	00038384 	.word	0x00038384
   24c9c:	0003b8b5 	.word	0x0003b8b5
   24ca0:	0003b8f1 	.word	0x0003b8f1
   24ca4:	20023784 	.word	0x20023784
   24ca8:	40039000 	.word	0x40039000

00024cac <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   24cac:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   24cae:	794b      	ldrb	r3, [r1, #5]
   24cb0:	2b01      	cmp	r3, #1
   24cb2:	d029      	beq.n	24d08 <uarte_nrfx_configure+0x5c>
   24cb4:	2b03      	cmp	r3, #3
   24cb6:	d124      	bne.n	24d02 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   24cb8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   24cba:	798b      	ldrb	r3, [r1, #6]
   24cbc:	2b03      	cmp	r3, #3
   24cbe:	d120      	bne.n	24d02 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   24cc0:	79cc      	ldrb	r4, [r1, #7]
   24cc2:	b124      	cbz	r4, 24cce <uarte_nrfx_configure+0x22>
   24cc4:	2c01      	cmp	r4, #1
   24cc6:	d11c      	bne.n	24d02 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   24cc8:	6843      	ldr	r3, [r0, #4]
   24cca:	791b      	ldrb	r3, [r3, #4]
   24ccc:	b1cb      	cbz	r3, 24d02 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   24cce:	790a      	ldrb	r2, [r1, #4]
   24cd0:	b112      	cbz	r2, 24cd8 <uarte_nrfx_configure+0x2c>
   24cd2:	2a02      	cmp	r2, #2
   24cd4:	d115      	bne.n	24d02 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   24cd6:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   24cd8:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   24cda:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   24cdc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   24ce0:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   24ce2:	d065      	beq.n	24db0 <uarte_nrfx_configure+0x104>
   24ce4:	d82d      	bhi.n	24d42 <uarte_nrfx_configure+0x96>
   24ce6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   24cea:	d064      	beq.n	24db6 <uarte_nrfx_configure+0x10a>
   24cec:	d816      	bhi.n	24d1c <uarte_nrfx_configure+0x70>
   24cee:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   24cf2:	d062      	beq.n	24dba <uarte_nrfx_configure+0x10e>
   24cf4:	d80a      	bhi.n	24d0c <uarte_nrfx_configure+0x60>
   24cf6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   24cfa:	d061      	beq.n	24dc0 <uarte_nrfx_configure+0x114>
   24cfc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   24d00:	d061      	beq.n	24dc6 <uarte_nrfx_configure+0x11a>
   24d02:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24d06:	e052      	b.n	24dae <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   24d08:	2600      	movs	r6, #0
   24d0a:	e7d6      	b.n	24cba <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   24d0c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   24d10:	d05c      	beq.n	24dcc <uarte_nrfx_configure+0x120>
   24d12:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   24d16:	d1f4      	bne.n	24d02 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   24d18:	4b37      	ldr	r3, [pc, #220]	; (24df8 <uarte_nrfx_configure+0x14c>)
   24d1a:	e03c      	b.n	24d96 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   24d1c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   24d20:	d057      	beq.n	24dd2 <uarte_nrfx_configure+0x126>
   24d22:	d807      	bhi.n	24d34 <uarte_nrfx_configure+0x88>
   24d24:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   24d28:	d055      	beq.n	24dd6 <uarte_nrfx_configure+0x12a>
   24d2a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   24d2e:	d1e8      	bne.n	24d02 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   24d30:	4b32      	ldr	r3, [pc, #200]	; (24dfc <uarte_nrfx_configure+0x150>)
   24d32:	e030      	b.n	24d96 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   24d34:	f647 2712 	movw	r7, #31250	; 0x7a12
   24d38:	42bb      	cmp	r3, r7
   24d3a:	d1e2      	bne.n	24d02 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   24d3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   24d40:	e029      	b.n	24d96 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   24d42:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   24d46:	d048      	beq.n	24dda <uarte_nrfx_configure+0x12e>
   24d48:	d813      	bhi.n	24d72 <uarte_nrfx_configure+0xc6>
   24d4a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   24d4e:	d047      	beq.n	24de0 <uarte_nrfx_configure+0x134>
   24d50:	d809      	bhi.n	24d66 <uarte_nrfx_configure+0xba>
   24d52:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   24d56:	42bb      	cmp	r3, r7
   24d58:	d044      	beq.n	24de4 <uarte_nrfx_configure+0x138>
   24d5a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   24d5e:	d1d0      	bne.n	24d02 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   24d60:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   24d64:	e017      	b.n	24d96 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   24d66:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   24d6a:	d1ca      	bne.n	24d02 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   24d6c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   24d70:	e011      	b.n	24d96 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   24d72:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   24d76:	d038      	beq.n	24dea <uarte_nrfx_configure+0x13e>
   24d78:	d808      	bhi.n	24d8c <uarte_nrfx_configure+0xe0>
   24d7a:	4f21      	ldr	r7, [pc, #132]	; (24e00 <uarte_nrfx_configure+0x154>)
   24d7c:	42bb      	cmp	r3, r7
   24d7e:	d037      	beq.n	24df0 <uarte_nrfx_configure+0x144>
   24d80:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   24d84:	d1bd      	bne.n	24d02 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   24d86:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   24d8a:	e004      	b.n	24d96 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   24d8c:	4f1d      	ldr	r7, [pc, #116]	; (24e04 <uarte_nrfx_configure+0x158>)
   24d8e:	42bb      	cmp	r3, r7
   24d90:	d1b7      	bne.n	24d02 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   24d92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   24d96:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   24d9a:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   24d9c:	4334      	orrs	r4, r6
   24d9e:	4322      	orrs	r2, r4
   24da0:	3304      	adds	r3, #4
   24da2:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   24da4:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   24da8:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   24dac:	2000      	movs	r0, #0
}
   24dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   24db0:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   24db4:	e7ef      	b.n	24d96 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   24db6:	4b14      	ldr	r3, [pc, #80]	; (24e08 <uarte_nrfx_configure+0x15c>)
   24db8:	e7ed      	b.n	24d96 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   24dba:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   24dbe:	e7ea      	b.n	24d96 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   24dc0:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   24dc4:	e7e7      	b.n	24d96 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   24dc6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   24dca:	e7e4      	b.n	24d96 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   24dcc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   24dd0:	e7e1      	b.n	24d96 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   24dd2:	4b0e      	ldr	r3, [pc, #56]	; (24e0c <uarte_nrfx_configure+0x160>)
   24dd4:	e7df      	b.n	24d96 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   24dd6:	4b0e      	ldr	r3, [pc, #56]	; (24e10 <uarte_nrfx_configure+0x164>)
   24dd8:	e7dd      	b.n	24d96 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   24dda:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   24dde:	e7da      	b.n	24d96 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   24de0:	4b0c      	ldr	r3, [pc, #48]	; (24e14 <uarte_nrfx_configure+0x168>)
   24de2:	e7d8      	b.n	24d96 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   24de4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   24de8:	e7d5      	b.n	24d96 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   24dea:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   24dee:	e7d2      	b.n	24d96 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   24df0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   24df4:	e7cf      	b.n	24d96 <uarte_nrfx_configure+0xea>
   24df6:	bf00      	nop
   24df8:	0013b000 	.word	0x0013b000
   24dfc:	004ea000 	.word	0x004ea000
   24e00:	0003d090 	.word	0x0003d090
   24e04:	000f4240 	.word	0x000f4240
   24e08:	00275000 	.word	0x00275000
   24e0c:	0075c000 	.word	0x0075c000
   24e10:	003af000 	.word	0x003af000
   24e14:	013a9000 	.word	0x013a9000

00024e18 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   24e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24e1c:	4606      	mov	r6, r0
   24e1e:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   24e20:	68c5      	ldr	r5, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   24e22:	f012 f824 	bl	36e6e <k_is_in_isr>
   24e26:	2800      	cmp	r0, #0
   24e28:	d138      	bne.n	24e9c <uarte_nrfx_poll_out+0x84>
	return !z_sys_post_kernel;
   24e2a:	4b31      	ldr	r3, [pc, #196]	; (24ef0 <uarte_nrfx_poll_out+0xd8>)
   24e2c:	781b      	ldrb	r3, [r3, #0]
   24e2e:	f083 0301 	eor.w	r3, r3, #1
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	int key;

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
   24e32:	692a      	ldr	r2, [r5, #16]
   24e34:	2a01      	cmp	r2, #1
   24e36:	d12f      	bne.n	24e98 <uarte_nrfx_poll_out+0x80>
	return config->uarte_regs;
   24e38:	6872      	ldr	r2, [r6, #4]
   24e3a:	6814      	ldr	r4, [r2, #0]
		return;
	}
#endif
	if (isr_mode) {
   24e3c:	b3ab      	cbz	r3, 24eaa <uarte_nrfx_poll_out+0x92>
   24e3e:	f04f 0320 	mov.w	r3, #32
   24e42:	f3ef 8811 	mrs	r8, BASEPRI
   24e46:	f383 8811 	msr	BASEPRI, r3
   24e4a:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   24e4e:	4630      	mov	r0, r6
			key = irq_lock();
   24e50:	4641      	mov	r1, r8
			if (is_tx_ready(dev)) {
   24e52:	f010 fe45 	bl	35ae0 <is_tx_ready>
   24e56:	b318      	cbz	r0, 24ea0 <uarte_nrfx_poll_out+0x88>
#if CONFIG_UART_ASYNC_API
				if (data->async->tx_size &&
   24e58:	68eb      	ldr	r3, [r5, #12]
   24e5a:	68da      	ldr	r2, [r3, #12]
   24e5c:	b13a      	cbz	r2, 24e6e <uarte_nrfx_poll_out+0x56>
					data->async->tx_amount < 0) {
   24e5e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
				if (data->async->tx_size &&
   24e62:	2a00      	cmp	r2, #0
   24e64:	da03      	bge.n	24e6e <uarte_nrfx_poll_out+0x56>
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
   24e66:	f8d4 254c 	ldr.w	r2, [r4, #1356]	; 0x54c
					data->async->tx_amount =
   24e6a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_reg->TXD.MAXCNT = length;
   24e6e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24e70:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   24e72:	f805 7f14 	strb.w	r7, [r5, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24e76:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24e7a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24e7e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   24e82:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   24e86:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   24e8a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24e8e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   24e90:	f381 8811 	msr	BASEPRI, r1
   24e94:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   24e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   24e9c:	2301      	movs	r3, #1
   24e9e:	e7c8      	b.n	24e32 <uarte_nrfx_poll_out+0x1a>
   24ea0:	f388 8811 	msr	BASEPRI, r8
   24ea4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   24ea8:	e7c9      	b.n	24e3e <uarte_nrfx_poll_out+0x26>
   24eaa:	f04f 0864 	mov.w	r8, #100	; 0x64
			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   24eae:	4630      	mov	r0, r6
   24eb0:	f010 fe16 	bl	35ae0 <is_tx_ready>
   24eb4:	b950      	cbnz	r0, 24ecc <uarte_nrfx_poll_out+0xb4>
   24eb6:	2001      	movs	r0, #1
   24eb8:	f011 fd6b 	bl	36992 <nrfx_busy_wait>
   24ebc:	f1b8 0801 	subs.w	r8, r8, #1
   24ec0:	d1f5      	bne.n	24eae <uarte_nrfx_poll_out+0x96>
	return z_impl_k_sleep(timeout);
   24ec2:	2100      	movs	r1, #0
   24ec4:	2021      	movs	r0, #33	; 0x21
   24ec6:	f00d fa17 	bl	322f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   24eca:	e7ee      	b.n	24eaa <uarte_nrfx_poll_out+0x92>
	__asm__ volatile(
   24ecc:	f04f 0320 	mov.w	r3, #32
   24ed0:	f3ef 8111 	mrs	r1, BASEPRI
   24ed4:	f383 8811 	msr	BASEPRI, r3
   24ed8:	f3bf 8f6f 	isb	sy
				if (is_tx_ready(dev)) {
   24edc:	4630      	mov	r0, r6
   24ede:	f010 fdff 	bl	35ae0 <is_tx_ready>
   24ee2:	2800      	cmp	r0, #0
   24ee4:	d1c3      	bne.n	24e6e <uarte_nrfx_poll_out+0x56>
	__asm__ volatile(
   24ee6:	f381 8811 	msr	BASEPRI, r1
   24eea:	f3bf 8f6f 	isb	sy
}
   24eee:	e7e8      	b.n	24ec2 <uarte_nrfx_poll_out+0xaa>
   24ef0:	2002cb9f 	.word	0x2002cb9f

00024ef4 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   24ef4:	6843      	ldr	r3, [r0, #4]
{
   24ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return config->uarte_regs;
   24efa:	681d      	ldr	r5, [r3, #0]
	if (!hw_rx_counting_enabled(data)
   24efc:	68c3      	ldr	r3, [r0, #12]
{
   24efe:	4604      	mov	r4, r0
	if (!hw_rx_counting_enabled(data)
   24f00:	68db      	ldr	r3, [r3, #12]
{
   24f02:	b088      	sub	sp, #32
	if (!hw_rx_counting_enabled(data)
   24f04:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   24f08:	b972      	cbnz	r2, 24f28 <uarte_nrfx_isr_async+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24f0a:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   24f0e:	b159      	cbz	r1, 24f28 <uarte_nrfx_isr_async+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24f10:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   24f14:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   24f18:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   24f1c:	3201      	adds	r2, #1
   24f1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
   24f22:	b008      	add	sp, #32
   24f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24f28:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   24f2c:	b31b      	cbz	r3, 24f76 <uarte_nrfx_isr_async+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24f2e:	2100      	movs	r1, #0
   24f30:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   24f34:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   24f38:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   24f3c:	2214      	movs	r2, #20
    p_reg->ERRORSRC = errsrc_mask;
   24f3e:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
   24f42:	a803      	add	r0, sp, #12
   24f44:	f012 fa7d 	bl	37442 <memset>
   24f48:	2306      	movs	r3, #6
   24f4a:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   24f4e:	07f3      	lsls	r3, r6, #31
   24f50:	f100 80f1 	bmi.w	25136 <uarte_nrfx_isr_async+0x242>
   24f54:	07b7      	lsls	r7, r6, #30
   24f56:	f100 80f0 	bmi.w	2513a <uarte_nrfx_isr_async+0x246>
   24f5a:	0770      	lsls	r0, r6, #29
   24f5c:	f100 80ef 	bmi.w	2513e <uarte_nrfx_isr_async+0x24a>
   24f60:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   24f64:	4620      	mov	r0, r4
   24f66:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   24f68:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   24f6c:	f010 fe24 	bl	35bb8 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   24f70:	4620      	mov	r0, r4
   24f72:	f010 ff1d 	bl	35db0 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24f76:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   24f7a:	b1eb      	cbz	r3, 24fb8 <uarte_nrfx_isr_async+0xc4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24f7c:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   24f7e:	68e6      	ldr	r6, [r4, #12]
   24f80:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   24f84:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (!data->async->rx_enabled) {
   24f88:	68f0      	ldr	r0, [r6, #12]
	return config->uarte_regs;
   24f8a:	6863      	ldr	r3, [r4, #4]
   24f8c:	f8d3 8000 	ldr.w	r8, [r3]
	if (!data->async->rx_enabled) {
   24f90:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
   24f94:	2b00      	cmp	r3, #0
   24f96:	f040 80d4 	bne.w	25142 <uarte_nrfx_isr_async+0x24e>
		if (data->async->rx_buf == NULL) {
   24f9a:	6d01      	ldr	r1, [r0, #80]	; 0x50
   24f9c:	2900      	cmp	r1, #0
   24f9e:	f040 80d0 	bne.w	25142 <uarte_nrfx_isr_async+0x24e>
			struct uart_event evt = {
   24fa2:	2214      	movs	r2, #20
   24fa4:	a803      	add	r0, sp, #12
   24fa6:	f012 fa4c 	bl	37442 <memset>
   24faa:	2305      	movs	r3, #5
			user_callback(dev, &evt);
   24fac:	4620      	mov	r0, r4
   24fae:	a903      	add	r1, sp, #12
			struct uart_event evt = {
   24fb0:	f88d 300c 	strb.w	r3, [sp, #12]
			user_callback(dev, &evt);
   24fb4:	f010 fe00 	bl	35bb8 <user_callback>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24fb8:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   24fbc:	b37b      	cbz	r3, 2501e <uarte_nrfx_isr_async+0x12a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24fbe:	2100      	movs	r1, #0
	struct uart_event evt = {
   24fc0:	2214      	movs	r2, #20
   24fc2:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
   24fc6:	a803      	add	r0, sp, #12
   24fc8:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   24fcc:	68e6      	ldr	r6, [r4, #12]
	struct uart_event evt = {
   24fce:	f012 fa38 	bl	37442 <memset>
   24fd2:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   24fd4:	a903      	add	r1, sp, #12
   24fd6:	4620      	mov	r0, r4
	struct uart_event evt = {
   24fd8:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   24fdc:	f010 fdec 	bl	35bb8 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_MS) {
   24fe0:	68f6      	ldr	r6, [r6, #12]
   24fe2:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   24fe4:	1c59      	adds	r1, r3, #1
   24fe6:	d01a      	beq.n	2501e <uarte_nrfx_isr_async+0x12a>
   24fe8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   24fec:	f240 38e7 	movw	r8, #999	; 0x3e7
   24ff0:	f04f 0900 	mov.w	r9, #0
		data->async->rx_timeout_left = data->async->rx_timeout;
   24ff4:	6773      	str	r3, [r6, #116]	; 0x74
			      K_MSEC(data->async->rx_timeout_slab),
   24ff6:	6f33      	ldr	r3, [r6, #112]	; 0x70
   24ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24ffc:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   25000:	fbc0 8901 	smlal	r8, r9, r0, r1
   25004:	2300      	movs	r3, #0
   25006:	4640      	mov	r0, r8
   25008:	4649      	mov	r1, r9
   2500a:	f7f3 fbd5 	bl	187b8 <__aeabi_uldivmod>
   2500e:	4602      	mov	r2, r0
   25010:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   25012:	e9cd 0100 	strd	r0, r1, [sp]
   25016:	f106 0078 	add.w	r0, r6, #120	; 0x78
   2501a:	f00d fccd 	bl	329b8 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2501e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO)) {
   25022:	b363      	cbz	r3, 2507e <uarte_nrfx_isr_async+0x18a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25024:	2600      	movs	r6, #0
	struct uart_event evt = {
   25026:	f04f 0804 	mov.w	r8, #4
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2502a:	68e7      	ldr	r7, [r4, #12]
	struct uart_event evt = {
   2502c:	2214      	movs	r2, #20
   2502e:	4631      	mov	r1, r6
   25030:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
   25034:	a803      	add	r0, sp, #12
   25036:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   2503a:	f012 fa02 	bl	37442 <memset>
   2503e:	f88d 800c 	strb.w	r8, [sp, #12]
		.data.rx_buf.buf = data->async->rx_buf,
   25042:	68fb      	ldr	r3, [r7, #12]
	user_callback(dev, &evt);
   25044:	4620      	mov	r0, r4
	struct uart_event evt = {
   25046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
	user_callback(dev, &evt);
   25048:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2504a:	9304      	str	r3, [sp, #16]
	user_callback(dev, &evt);
   2504c:	f010 fdb4 	bl	35bb8 <user_callback>
	data->async->rx_buf = NULL;
   25050:	68fb      	ldr	r3, [r7, #12]
   25052:	651e      	str	r6, [r3, #80]	; 0x50
	if (data->async->rx_next_buf) {
   25054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   25056:	b143      	cbz	r3, 2506a <uarte_nrfx_isr_async+0x176>
		user_callback(dev, &evt);
   25058:	4620      	mov	r0, r4
   2505a:	a903      	add	r1, sp, #12
		evt.data.rx_buf.buf = data->async->rx_next_buf;
   2505c:	9304      	str	r3, [sp, #16]
		evt.type = UART_RX_BUF_RELEASED;
   2505e:	f88d 800c 	strb.w	r8, [sp, #12]
		user_callback(dev, &evt);
   25062:	f010 fda9 	bl	35bb8 <user_callback>
		data->async->rx_next_buf = NULL;
   25066:	68fb      	ldr	r3, [r7, #12]
   25068:	65de      	str	r6, [r3, #92]	; 0x5c
	return config->uarte_regs;
   2506a:	6863      	ldr	r3, [r4, #4]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2506c:	4a86      	ldr	r2, [pc, #536]	; (25288 <uarte_nrfx_isr_async+0x394>)
   2506e:	681b      	ldr	r3, [r3, #0]
   25070:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   25074:	2205      	movs	r2, #5
   25076:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2507a:	2201      	movs	r2, #1
   2507c:	62da      	str	r2, [r3, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2507e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   25082:	b1db      	cbz	r3, 250bc <uarte_nrfx_isr_async+0x1c8>
    return p_reg->INTENSET & mask;
   25084:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   25088:	05da      	lsls	r2, r3, #23
   2508a:	d517      	bpl.n	250bc <uarte_nrfx_isr_async+0x1c8>
	return config->uarte_regs;
   2508c:	6863      	ldr	r3, [r4, #4]
   2508e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   25090:	f04f 0120 	mov.w	r1, #32
   25094:	f3ef 8211 	mrs	r2, BASEPRI
   25098:	f381 8811 	msr	BASEPRI, r1
   2509c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   250a0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   250a4:	b131      	cbz	r1, 250b4 <uarte_nrfx_isr_async+0x1c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   250a6:	2100      	movs	r1, #0
   250a8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   250ac:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   250b0:	2101      	movs	r1, #1
   250b2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   250b4:	f382 8811 	msr	BASEPRI, r2
   250b8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   250bc:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   250c0:	2b00      	cmp	r3, #0
   250c2:	f43f af2e 	beq.w	24f22 <uarte_nrfx_isr_async+0x2e>
    return p_reg->INTENSET & mask;
   250c6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   250ca:	025b      	lsls	r3, r3, #9
   250cc:	f57f af29 	bpl.w	24f22 <uarte_nrfx_isr_async+0x2e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   250d0:	68e7      	ldr	r7, [r4, #12]
	return config->uarte_regs;
   250d2:	6863      	ldr	r3, [r4, #4]
	if (!data->async->tx_buf) {
   250d4:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
   250d6:	681d      	ldr	r5, [r3, #0]
	if (!data->async->tx_buf) {
   250d8:	6882      	ldr	r2, [r0, #8]
   250da:	2a00      	cmp	r2, #0
   250dc:	f040 80a1 	bne.w	25222 <uarte_nrfx_isr_async+0x32e>
		if (data->async->pend_tx_buf) {
   250e0:	6903      	ldr	r3, [r0, #16]
   250e2:	2b00      	cmp	r3, #0
   250e4:	f43f af1d 	beq.w	24f22 <uarte_nrfx_isr_async+0x2e>
	__asm__ volatile(
   250e8:	f04f 0320 	mov.w	r3, #32
   250ec:	f3ef 8011 	mrs	r0, BASEPRI
   250f0:	f383 8811 	msr	BASEPRI, r3
   250f4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   250f8:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
			if (nrf_uarte_event_check(uarte,
   250fc:	b1b3      	cbz	r3, 2512c <uarte_nrfx_isr_async+0x238>
				data->async->tx_amount = -1;
   250fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
				data->async->tx_buf = data->async->pend_tx_buf;
   25102:	68fb      	ldr	r3, [r7, #12]
   25104:	6919      	ldr	r1, [r3, #16]
				data->async->tx_amount = -1;
   25106:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
				data->async->tx_buf = data->async->pend_tx_buf;
   2510a:	6099      	str	r1, [r3, #8]
				data->async->pend_tx_buf = NULL;
   2510c:	611a      	str	r2, [r3, #16]
				tx_start(uarte, data->async->tx_buf,
   2510e:	68db      	ldr	r3, [r3, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25110:	f8c5 1544 	str.w	r1, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   25114:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25118:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   2511c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   25120:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   25124:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25128:	2301      	movs	r3, #1
   2512a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   2512c:	f380 8811 	msr	BASEPRI, r0
   25130:	f3bf 8f6f 	isb	sy
}
   25134:	e6f5      	b.n	24f22 <uarte_nrfx_isr_async+0x2e>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   25136:	2601      	movs	r6, #1
   25138:	e714      	b.n	24f64 <uarte_nrfx_isr_async+0x70>
   2513a:	2602      	movs	r6, #2
   2513c:	e712      	b.n	24f64 <uarte_nrfx_isr_async+0x70>
   2513e:	2604      	movs	r6, #4
   25140:	e710      	b.n	24f64 <uarte_nrfx_isr_async+0x70>
	data->async->is_in_irq = true;
   25142:	2301      	movs	r3, #1
   25144:	f880 30ba 	strb.w	r3, [r0, #186]	; 0xba
	z_impl_k_timer_stop(timer);
   25148:	3078      	adds	r0, #120	; 0x78
   2514a:	f011 ff91 	bl	37070 <z_impl_k_timer_stop>
	int rx_len = rx_amount - data->async->rx_offset;
   2514e:	68f7      	ldr	r7, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   25150:	f8d8 353c 	ldr.w	r3, [r8, #1340]	; 0x53c
   25154:	f8d7 9058 	ldr.w	r9, [r7, #88]	; 0x58
	data->async->rx_total_user_byte_cnt += rx_len;
   25158:	6eba      	ldr	r2, [r7, #104]	; 0x68
	int rx_len = rx_amount - data->async->rx_offset;
   2515a:	eba3 0309 	sub.w	r3, r3, r9
	data->async->rx_total_user_byte_cnt += rx_len;
   2515e:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
	if (!hw_rx_counting_enabled(data)) {
   25162:	f897 10b9 	ldrb.w	r1, [r7, #185]	; 0xb9
	data->async->rx_total_user_byte_cnt += rx_len;
   25166:	4452      	add	r2, sl
   25168:	66ba      	str	r2, [r7, #104]	; 0x68
	if (!hw_rx_counting_enabled(data)) {
   2516a:	b909      	cbnz	r1, 25170 <uarte_nrfx_isr_async+0x27c>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2516c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
	if (rx_len > 0) {
   25170:	2b00      	cmp	r3, #0
   25172:	dd10      	ble.n	25196 <uarte_nrfx_isr_async+0x2a2>
		struct uart_event evt = {
   25174:	2100      	movs	r1, #0
   25176:	2214      	movs	r2, #20
   25178:	a803      	add	r0, sp, #12
   2517a:	f012 f962 	bl	37442 <memset>
   2517e:	2302      	movs	r3, #2
   25180:	f88d 300c 	strb.w	r3, [sp, #12]
   25184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
		user_callback(dev, &evt);
   25186:	4620      	mov	r0, r4
   25188:	a903      	add	r1, sp, #12
		struct uart_event evt = {
   2518a:	e9cd 3904 	strd	r3, r9, [sp, #16]
   2518e:	f8cd a018 	str.w	sl, [sp, #24]
		user_callback(dev, &evt);
   25192:	f010 fd11 	bl	35bb8 <user_callback>
	if (!data->async->rx_enabled) {
   25196:	68f7      	ldr	r7, [r6, #12]
   25198:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
   2519c:	b913      	cbnz	r3, 251a4 <uarte_nrfx_isr_async+0x2b0>
		data->async->is_in_irq = false;
   2519e:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
		return;
   251a2:	e709      	b.n	24fb8 <uarte_nrfx_isr_async+0xc4>
	struct uart_event evt = {
   251a4:	2214      	movs	r2, #20
   251a6:	2100      	movs	r1, #0
   251a8:	a803      	add	r0, sp, #12
   251aa:	f012 f94a 	bl	37442 <memset>
   251ae:	2304      	movs	r3, #4
   251b0:	f88d 300c 	strb.w	r3, [sp, #12]
   251b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	user_callback(dev, &evt);
   251b6:	4620      	mov	r0, r4
   251b8:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   251ba:	9304      	str	r3, [sp, #16]
	user_callback(dev, &evt);
   251bc:	f010 fcfc 	bl	35bb8 <user_callback>
	__asm__ volatile(
   251c0:	f04f 0320 	mov.w	r3, #32
   251c4:	f3ef 8111 	mrs	r1, BASEPRI
   251c8:	f383 8811 	msr	BASEPRI, r3
   251cc:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   251d0:	68f3      	ldr	r3, [r6, #12]
   251d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
		data->async->rx_buf = data->async->rx_next_buf;
   251d4:	651a      	str	r2, [r3, #80]	; 0x50
	if (data->async->rx_next_buf) {
   251d6:	b18a      	cbz	r2, 251fc <uarte_nrfx_isr_async+0x308>
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   251d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   251da:	655a      	str	r2, [r3, #84]	; 0x54
		data->async->rx_next_buf = NULL;
   251dc:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   251de:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
		data->async->rx_offset = 0;
   251e2:	659a      	str	r2, [r3, #88]	; 0x58
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   251e4:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   251e8:	b913      	cbnz	r3, 251f0 <uarte_nrfx_isr_async+0x2fc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   251ea:	2301      	movs	r3, #1
   251ec:	f8c8 3000 	str.w	r3, [r8]
    p_reg->SHORTS &= ~(mask);
   251f0:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
   251f4:	f023 0320 	bic.w	r3, r3, #32
   251f8:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	__asm__ volatile(
   251fc:	f381 8811 	msr	BASEPRI, r1
   25200:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   25204:	68f3      	ldr	r3, [r6, #12]
   25206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   25208:	b933      	cbnz	r3, 25218 <uarte_nrfx_isr_async+0x324>
		evt.type = UART_RX_DISABLED;
   2520a:	2305      	movs	r3, #5
		user_callback(dev, &evt);
   2520c:	4620      	mov	r0, r4
   2520e:	a903      	add	r1, sp, #12
		evt.type = UART_RX_DISABLED;
   25210:	f88d 300c 	strb.w	r3, [sp, #12]
		user_callback(dev, &evt);
   25214:	f010 fcd0 	bl	35bb8 <user_callback>
	data->async->is_in_irq = false;
   25218:	2200      	movs	r2, #0
   2521a:	68f3      	ldr	r3, [r6, #12]
   2521c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
   25220:	e6ca      	b.n	24fb8 <uarte_nrfx_isr_async+0xc4>
   25222:	3018      	adds	r0, #24
   25224:	f011 ff24 	bl	37070 <z_impl_k_timer_stop>
	__asm__ volatile(
   25228:	f04f 0320 	mov.w	r3, #32
   2522c:	f3ef 8211 	mrs	r2, BASEPRI
   25230:	f383 8811 	msr	BASEPRI, r3
   25234:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   25238:	68fb      	ldr	r3, [r7, #12]
   2523a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   2523e:	2900      	cmp	r1, #0
   25240:	bfac      	ite	ge
   25242:	f8d3 60b4 	ldrge.w	r6, [r3, #180]	; 0xb4
    return p_reg->TXD.AMOUNT;
   25246:	f8d5 654c 	ldrlt.w	r6, [r5, #1356]	; 0x54c
	__asm__ volatile(
   2524a:	f382 8811 	msr	BASEPRI, r2
   2524e:	f3bf 8f6f 	isb	sy
	struct uart_event evt = {
   25252:	2214      	movs	r2, #20
   25254:	2100      	movs	r1, #0
   25256:	a803      	add	r0, sp, #12
   25258:	f012 f8f3 	bl	37442 <memset>
		.data.tx.buf = data->async->tx_buf,
   2525c:	68fb      	ldr	r3, [r7, #12]
	user_callback(dev, &evt);
   2525e:	4620      	mov	r0, r4
	struct uart_event evt = {
   25260:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   25262:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   25264:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   25268:	68da      	ldr	r2, [r3, #12]
   2526a:	1ab6      	subs	r6, r6, r2
   2526c:	bf18      	it	ne
   2526e:	2601      	movne	r6, #1
    p_reg->INTENCLR = mask;
   25270:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   25274:	f88d 600c 	strb.w	r6, [sp, #12]
   25278:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	data->async->tx_buf = NULL;
   2527c:	2200      	movs	r2, #0
   2527e:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   25280:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   25282:	f010 fc99 	bl	35bb8 <user_callback>
   25286:	e64c      	b.n	24f22 <uarte_nrfx_isr_async+0x2e>
   25288:	2002c07d 	.word	0x2002c07d

0002528c <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   2528c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   25290:	2700      	movs	r7, #0
	return config->uarte_regs;
   25292:	6843      	ldr	r3, [r0, #4]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   25294:	f8d0 800c 	ldr.w	r8, [r0, #12]
	return config->uarte_regs;
   25298:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   2529a:	460d      	mov	r5, r1
   2529c:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
   252a0:	4606      	mov	r6, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   252a2:	f8c8 0000 	str.w	r0, [r8]

	nrf_gpio_pin_write(config->pseltxd, 1);
   252a6:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   252a8:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
   252aa:	4b90      	ldr	r3, [pc, #576]	; (254ec <_flash_used+0x214>)
    *p_pin = pin_number & 0x1F;
   252ac:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   252b0:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   252b2:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   252b4:	2103      	movs	r1, #3
   252b6:	3280      	adds	r2, #128	; 0x80
   252b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   252bc:	686a      	ldr	r2, [r5, #4]
   252be:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   252c0:	bf1e      	ittt	ne
   252c2:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   252c6:	3180      	addne	r1, #128	; 0x80
   252c8:	f843 7021 	strne.w	r7, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   252cc:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
   252ce:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   252d2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   252d6:	1c4a      	adds	r2, r1, #1
   252d8:	bf1f      	itttt	ne
   252da:	2000      	movne	r0, #0
    *p_pin = pin_number & 0x1F;
   252dc:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   252e0:	3280      	addne	r2, #128	; 0x80
   252e2:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   252e6:	68e8      	ldr	r0, [r5, #12]
   252e8:	1c47      	adds	r7, r0, #1
   252ea:	d008      	beq.n	252fe <_flash_used+0x26>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   252ec:	2701      	movs	r7, #1
    *p_pin = pin_number & 0x1F;
   252ee:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   252f2:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
   252f4:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   252f6:	2703      	movs	r7, #3
   252f8:	3280      	adds	r2, #128	; 0x80
   252fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   252fe:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   25302:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   25306:	68f1      	ldr	r1, [r6, #12]
   25308:	4630      	mov	r0, r6
   2530a:	3104      	adds	r1, #4
   2530c:	f7ff fcce 	bl	24cac <uarte_nrfx_configure>
	if (err) {
   25310:	4681      	mov	r9, r0
   25312:	2800      	cmp	r0, #0
   25314:	f040 80c7 	bne.w	254a6 <_flash_used+0x1ce>
		return err;
	}

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
   25318:	2701      	movs	r7, #1
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   2531a:	6873      	ldr	r3, [r6, #4]
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
   2531c:	f8c8 7010 	str.w	r7, [r8, #16]
	if (get_dev_config(dev)->ppi_endtx) {
   25320:	799b      	ldrb	r3, [r3, #6]
   25322:	b303      	cbz	r3, 25366 <_flash_used+0x8e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   25324:	f108 0016 	add.w	r0, r8, #22
   25328:	f00b ff54 	bl	311d4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   2532c:	4b70      	ldr	r3, [pc, #448]	; (254f0 <_flash_used+0x218>)
   2532e:	4298      	cmp	r0, r3
   25330:	d00b      	beq.n	2534a <_flash_used+0x72>
   25332:	4970      	ldr	r1, [pc, #448]	; (254f4 <_flash_used+0x21c>)
   25334:	4b70      	ldr	r3, [pc, #448]	; (254f8 <_flash_used+0x220>)
		LOG_ERR("Failed to allocate PPI Channel");
   25336:	4871      	ldr	r0, [pc, #452]	; (254fc <_flash_used+0x224>)
   25338:	1ac9      	subs	r1, r1, r3
   2533a:	08c9      	lsrs	r1, r1, #3
   2533c:	0189      	lsls	r1, r1, #6
   2533e:	4339      	orrs	r1, r7
   25340:	f00f f8e2 	bl	34508 <log_0>
		err = endtx_stoptx_ppi_init(uarte, data);
		if (err < 0) {
   25344:	f06f 0904 	mvn.w	r9, #4
   25348:	e0ad      	b.n	254a6 <_flash_used+0x1ce>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   2534a:	f898 3016 	ldrb.w	r3, [r8, #22]
   2534e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   25352:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   25356:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   2535a:	f898 3016 	ldrb.w	r3, [r8, #22]
   2535e:	409f      	lsls	r7, r3
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   25360:	4b67      	ldr	r3, [pc, #412]	; (25500 <_flash_used+0x228>)
   25362:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
   25366:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2536a:	2b00      	cmp	r3, #0
   2536c:	f000 80aa 	beq.w	254c4 <_flash_used+0x1ec>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   25370:	68f7      	ldr	r7, [r6, #12]
   25372:	f8d6 a004 	ldr.w	sl, [r6, #4]
		return data->async->hw_rx_counting;
   25376:	68fb      	ldr	r3, [r7, #12]
	return config->uarte_regs;
   25378:	f8da 5000 	ldr.w	r5, [sl]
	if (hw_rx_counting_enabled(data)) {
   2537c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   25380:	b1eb      	cbz	r3, 253be <_flash_used+0xe6>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   25382:	2300      	movs	r3, #0
   25384:	4a5f      	ldr	r2, [pc, #380]	; (25504 <_flash_used+0x22c>)
		ret = nrfx_timer_init(&cfg->timer,
   25386:	f10a 0b08 	add.w	fp, sl, #8
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   2538a:	e9cd 2300 	strd	r2, r3, [sp]
		ret = nrfx_timer_init(&cfg->timer,
   2538e:	4669      	mov	r1, sp
   25390:	4a5d      	ldr	r2, [pc, #372]	; (25508 <_flash_used+0x230>)
   25392:	4658      	mov	r0, fp
   25394:	f00b ff82 	bl	3129c <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   25398:	4a55      	ldr	r2, [pc, #340]	; (254f0 <_flash_used+0x218>)
   2539a:	4290      	cmp	r0, r2
   2539c:	f000 8087 	beq.w	254ae <_flash_used+0x1d6>
   253a0:	4b55      	ldr	r3, [pc, #340]	; (254f8 <_flash_used+0x220>)
   253a2:	4954      	ldr	r1, [pc, #336]	; (254f4 <_flash_used+0x21c>)
			LOG_ERR("Timer already initialized, "
   253a4:	4859      	ldr	r0, [pc, #356]	; (2550c <_flash_used+0x234>)
   253a6:	1ac9      	subs	r1, r1, r3
   253a8:	08c9      	lsrs	r1, r1, #3
   253aa:	0189      	lsls	r1, r1, #6
   253ac:	f041 0101 	orr.w	r1, r1, #1
   253b0:	f00f f8aa 	bl	34508 <log_0>
			data->async->hw_rx_counting = false;
   253b4:	f04f 0200 	mov.w	r2, #0
   253b8:	68fb      	ldr	r3, [r7, #12]
   253ba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	if (hw_rx_counting_enabled(data)) {
   253be:	68f8      	ldr	r0, [r7, #12]
   253c0:	f890 30b9 	ldrb.w	r3, [r0, #185]	; 0xb9
   253c4:	b1bb      	cbz	r3, 253f6 <_flash_used+0x11e>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   253c6:	30b0      	adds	r0, #176	; 0xb0
   253c8:	f00b ff04 	bl	311d4 <nrfx_dppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   253cc:	4b48      	ldr	r3, [pc, #288]	; (254f0 <_flash_used+0x218>)
   253ce:	4298      	cmp	r0, r3
   253d0:	d011      	beq.n	253f6 <_flash_used+0x11e>
   253d2:	4b49      	ldr	r3, [pc, #292]	; (254f8 <_flash_used+0x220>)
   253d4:	4947      	ldr	r1, [pc, #284]	; (254f4 <_flash_used+0x21c>)
			LOG_ERR("Failed to allocate PPI Channel, "
   253d6:	484e      	ldr	r0, [pc, #312]	; (25510 <_flash_used+0x238>)
   253d8:	1ac9      	subs	r1, r1, r3
   253da:	08c9      	lsrs	r1, r1, #3
   253dc:	0189      	lsls	r1, r1, #6
   253de:	f041 0101 	orr.w	r1, r1, #1
   253e2:	f00f f891 	bl	34508 <log_0>
			data->async->hw_rx_counting = false;
   253e6:	2200      	movs	r2, #0
   253e8:	68fb      	ldr	r3, [r7, #12]
			nrfx_timer_uninit(&cfg->timer);
   253ea:	f10a 0008 	add.w	r0, sl, #8
			data->async->hw_rx_counting = false;
   253ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			nrfx_timer_uninit(&cfg->timer);
   253f2:	f00b ffbb 	bl	3136c <nrfx_timer_uninit>
	if (hw_rx_counting_enabled(data)) {
   253f6:	68fb      	ldr	r3, [r7, #12]
   253f8:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   253fc:	2a00      	cmp	r2, #0
   253fe:	d05d      	beq.n	254bc <_flash_used+0x1e4>
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   25400:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   25404:	f8da 1008 	ldr.w	r1, [sl, #8]
   25408:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   2540c:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   25410:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
   25414:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   25418:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   2541c:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   25420:	f00b fef6 	bl	31210 <nrfx_dppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   25424:	4b32      	ldr	r3, [pc, #200]	; (254f0 <_flash_used+0x218>)
   25426:	4298      	cmp	r0, r3
   25428:	d18c      	bne.n	25344 <_flash_used+0x6c>
    p_reg->INTENSET = mask;
   2542a:	4b3a      	ldr	r3, [pc, #232]	; (25514 <_flash_used+0x23c>)
   2542c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   25430:	2308      	movs	r3, #8
   25432:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25436:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2543a:	b193      	cbz	r3, 25462 <_flash_used+0x18a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2543c:	2301      	movs	r3, #1
   2543e:	606b      	str	r3, [r5, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25440:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO)) {
   25444:	2b00      	cmp	r3, #0
   25446:	d0fb      	beq.n	25440 <_flash_used+0x168>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25448:	2300      	movs	r3, #0
   2544a:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
   2544e:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
   25452:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   25456:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   2545a:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   2545e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   25462:	68f8      	ldr	r0, [r7, #12]
   25464:	2200      	movs	r2, #0
   25466:	492c      	ldr	r1, [pc, #176]	; (25518 <_flash_used+0x240>)
   25468:	3078      	adds	r0, #120	; 0x78
   2546a:	f011 fdf5 	bl	37058 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   2546e:	68fb      	ldr	r3, [r7, #12]
	timer->user_data = user_data;
   25470:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   25474:	68f8      	ldr	r0, [r7, #12]
   25476:	2200      	movs	r2, #0
   25478:	4928      	ldr	r1, [pc, #160]	; (2551c <_flash_used+0x244>)
   2547a:	3018      	adds	r0, #24
   2547c:	f011 fdec 	bl	37058 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   25480:	68fb      	ldr	r3, [r7, #12]
   25482:	64df      	str	r7, [r3, #76]	; 0x4c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!get_dev_config(dev)->ppi_endtx) {
   25484:	6873      	ldr	r3, [r6, #4]
   25486:	799b      	ldrb	r3, [r3, #6]
   25488:	b91b      	cbnz	r3, 25492 <_flash_used+0x1ba>
    p_reg->INTENSET = mask;
   2548a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2548e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   25492:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25496:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2549a:	2300      	movs	r3, #0
   2549c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   254a0:	2301      	movs	r3, #1
   254a2:	60a3      	str	r3, [r4, #8]
   254a4:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   254a6:	4648      	mov	r0, r9
   254a8:	b003      	add	sp, #12
   254aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nrfx_timer_enable(&cfg->timer);
   254ae:	4658      	mov	r0, fp
   254b0:	f00b ff42 	bl	31338 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   254b4:	4658      	mov	r0, fp
   254b6:	f011 fa82 	bl	369be <nrfx_timer_clear>
   254ba:	e780      	b.n	253be <_flash_used+0xe6>
    p_reg->INTENSET = mask;
   254bc:	2304      	movs	r3, #4
   254be:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	if (ret != 0) {
   254c2:	e7b2      	b.n	2542a <_flash_used+0x152>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   254c4:	2208      	movs	r2, #8
   254c6:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   254ca:	686a      	ldr	r2, [r5, #4]
   254cc:	3201      	adds	r2, #1
   254ce:	d0d9      	beq.n	25484 <_flash_used+0x1ac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   254d0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   254d4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   254d8:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   254dc:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   254e0:	2301      	movs	r3, #1
   254e2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   254e6:	6023      	str	r3, [r4, #0]
}
   254e8:	e7cc      	b.n	25484 <_flash_used+0x1ac>
   254ea:	bf00      	nop
   254ec:	40842500 	.word	0x40842500
   254f0:	0bad0000 	.word	0x0bad0000
   254f4:	00038404 	.word	0x00038404
   254f8:	0003831c 	.word	0x0003831c
   254fc:	0003b919 	.word	0x0003b919
   25500:	40017000 	.word	0x40017000
   25504:	07030100 	.word	0x07030100
   25508:	00035aff 	.word	0x00035aff
   2550c:	0003b938 	.word	0x0003b938
   25510:	0003b978 	.word	0x0003b978
   25514:	000a0210 	.word	0x000a0210
   25518:	00035cc7 	.word	0x00035cc7
   2551c:	00035da9 	.word	0x00035da9

00025520 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   25520:	b530      	push	{r4, r5, lr}
   25522:	b085      	sub	sp, #20
   25524:	466c      	mov	r4, sp
   25526:	4605      	mov	r5, r0
   25528:	4b08      	ldr	r3, [pc, #32]	; (2554c <uarte_0_init+0x2c>)
   2552a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2552c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   25530:	2200      	movs	r2, #0
   25532:	2101      	movs	r1, #1
   25534:	2008      	movs	r0, #8
   25536:	f7fc fb83 	bl	21c40 <z_arm_irq_priority_set>
   2553a:	2008      	movs	r0, #8
   2553c:	f7fc fb4e 	bl	21bdc <arch_irq_enable>
   25540:	4621      	mov	r1, r4
   25542:	4628      	mov	r0, r5
   25544:	f7ff fea2 	bl	2528c <uarte_instance_init.isra.0>
   25548:	b005      	add	sp, #20
   2554a:	bd30      	pop	{r4, r5, pc}
   2554c:	00038430 	.word	0x00038430

00025550 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   25550:	b530      	push	{r4, r5, lr}
   25552:	b085      	sub	sp, #20
   25554:	466c      	mov	r4, sp
   25556:	4605      	mov	r5, r0
   25558:	4b08      	ldr	r3, [pc, #32]	; (2557c <uarte_1_init+0x2c>)
   2555a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2555c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   25560:	2200      	movs	r2, #0
   25562:	2101      	movs	r1, #1
   25564:	2009      	movs	r0, #9
   25566:	f7fc fb6b 	bl	21c40 <z_arm_irq_priority_set>
   2556a:	2009      	movs	r0, #9
   2556c:	f7fc fb36 	bl	21bdc <arch_irq_enable>
   25570:	4621      	mov	r1, r4
   25572:	4628      	mov	r0, r5
   25574:	f7ff fe8a 	bl	2528c <uarte_instance_init.isra.0>
   25578:	b005      	add	sp, #20
   2557a:	bd30      	pop	{r4, r5, pc}
   2557c:	00038440 	.word	0x00038440

00025580 <uarte_2_init>:
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   25580:	b530      	push	{r4, r5, lr}
   25582:	b085      	sub	sp, #20
   25584:	466c      	mov	r4, sp
   25586:	4605      	mov	r5, r0
   25588:	4b08      	ldr	r3, [pc, #32]	; (255ac <uarte_2_init+0x2c>)
   2558a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2558c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   25590:	2200      	movs	r2, #0
   25592:	2101      	movs	r1, #1
   25594:	200a      	movs	r0, #10
   25596:	f7fc fb53 	bl	21c40 <z_arm_irq_priority_set>
   2559a:	200a      	movs	r0, #10
   2559c:	f7fc fb1e 	bl	21bdc <arch_irq_enable>
   255a0:	4621      	mov	r1, r4
   255a2:	4628      	mov	r0, r5
   255a4:	f7ff fe72 	bl	2528c <uarte_instance_init.isra.0>
   255a8:	b005      	add	sp, #20
   255aa:	bd30      	pop	{r4, r5, pc}
   255ac:	00038450 	.word	0x00038450

000255b0 <uarte_nrfx_pins_enable>:
{
   255b0:	b570      	push	{r4, r5, r6, lr}
	if (!get_dev_config(dev)->gpio_mgmt) {
   255b2:	6846      	ldr	r6, [r0, #4]
   255b4:	7973      	ldrb	r3, [r6, #5]
   255b6:	b37b      	cbz	r3, 25618 <uarte_nrfx_pins_enable+0x68>
	return config->uarte_regs;
   255b8:	6830      	ldr	r0, [r6, #0]
    return p_reg->PSEL.TXD;
   255ba:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
    return p_reg->PSEL.RXD;
   255be:	f8d0 3514 	ldr.w	r3, [r0, #1300]	; 0x514
    return p_reg->PSEL.CTS;
   255c2:	f002 021f 	and.w	r2, r2, #31
   255c6:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
    return p_reg->PSEL.RTS;
   255ca:	f8d0 5508 	ldr.w	r5, [r0, #1288]	; 0x508
	if (enable) {
   255ce:	4820      	ldr	r0, [pc, #128]	; (25650 <uarte_nrfx_pins_enable+0xa0>)
   255d0:	b319      	cbz	r1, 2561a <uarte_nrfx_pins_enable+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   255d2:	2101      	movs	r1, #1
   255d4:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   255d6:	6081      	str	r1, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   255d8:	2103      	movs	r1, #3
   255da:	3280      	adds	r2, #128	; 0x80
   255dc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   255e0:	1c5a      	adds	r2, r3, #1
   255e2:	bf1f      	itttt	ne
   255e4:	2200      	movne	r2, #0
    *p_pin = pin_number & 0x1F;
   255e6:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   255ea:	3380      	addne	r3, #128	; 0x80
   255ec:	f840 2023 	strne.w	r2, [r0, r3, lsl #2]
		if (IS_RTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   255f0:	7931      	ldrb	r1, [r6, #4]
   255f2:	074e      	lsls	r6, r1, #29
   255f4:	d508      	bpl.n	25608 <uarte_nrfx_pins_enable+0x58>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   255f6:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
   255f8:	f005 021f 	and.w	r2, r5, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   255fc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   255fe:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   25600:	2303      	movs	r3, #3
   25602:	3280      	adds	r2, #128	; 0x80
   25604:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		if (IS_CTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   25608:	0789      	lsls	r1, r1, #30
   2560a:	d505      	bpl.n	25618 <uarte_nrfx_pins_enable+0x68>
   2560c:	2200      	movs	r2, #0
    *p_pin = pin_number & 0x1F;
   2560e:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   25612:	3380      	adds	r3, #128	; 0x80
   25614:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   25618:	bd70      	pop	{r4, r5, r6, pc}
   2561a:	2102      	movs	r1, #2
   2561c:	3280      	adds	r2, #128	; 0x80
   2561e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   25622:	1c5a      	adds	r2, r3, #1
    *p_pin = pin_number & 0x1F;
   25624:	bf1e      	ittt	ne
   25626:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2562a:	3380      	addne	r3, #128	; 0x80
   2562c:	f840 1023 	strne.w	r1, [r0, r3, lsl #2]
		if (IS_RTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   25630:	7933      	ldrb	r3, [r6, #4]
   25632:	075a      	lsls	r2, r3, #29
   25634:	bf41      	itttt	mi
   25636:	2102      	movmi	r1, #2
    *p_pin = pin_number & 0x1F;
   25638:	f005 021f 	andmi.w	r2, r5, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2563c:	3280      	addmi	r2, #128	; 0x80
   2563e:	f840 1022 	strmi.w	r1, [r0, r2, lsl #2]
		if (IS_CTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   25642:	079b      	lsls	r3, r3, #30
   25644:	d5e8      	bpl.n	25618 <uarte_nrfx_pins_enable+0x68>
    *p_pin = pin_number & 0x1F;
   25646:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2564a:	2202      	movs	r2, #2
   2564c:	3380      	adds	r3, #128	; 0x80
   2564e:	e7e1      	b.n	25614 <uarte_nrfx_pins_enable+0x64>
   25650:	40842500 	.word	0x40842500

00025654 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   25654:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   25656:	4d1c      	ldr	r5, [pc, #112]	; (256c8 <_bsdlib_init+0x74>)
   25658:	4c1c      	ldr	r4, [pc, #112]	; (256cc <_bsdlib_init+0x78>)
   2565a:	782b      	ldrb	r3, [r5, #0]
{
   2565c:	b085      	sub	sp, #20
	if (!first_time_init) {
   2565e:	b933      	cbnz	r3, 2566e <_bsdlib_init+0x1a>
	list->tail = NULL;
   25660:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   25664:	481a      	ldr	r0, [pc, #104]	; (256d0 <_bsdlib_init+0x7c>)
   25666:	f011 fa5e 	bl	36b26 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   2566a:	2301      	movs	r3, #1
   2566c:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2566e:	2200      	movs	r2, #0
   25670:	202a      	movs	r0, #42	; 0x2a
   25672:	4611      	mov	r1, r2
   25674:	f7fc fae4 	bl	21c40 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   25678:	4a16      	ldr	r2, [pc, #88]	; (256d4 <_bsdlib_init+0x80>)
   2567a:	ab01      	add	r3, sp, #4
   2567c:	ca07      	ldmia	r2, {r0, r1, r2}
   2567e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   25682:	4618      	mov	r0, r3
   25684:	f009 fc14 	bl	2eeb0 <bsd_init>
   25688:	4b13      	ldr	r3, [pc, #76]	; (256d8 <_bsdlib_init+0x84>)
   2568a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   2568c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25694:	480e      	ldr	r0, [pc, #56]	; (256d0 <_bsdlib_init+0x7c>)
   25696:	f00c f9b3 	bl	31a00 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   2569a:	6820      	ldr	r0, [r4, #0]
   2569c:	b170      	cbz	r0, 256bc <_bsdlib_init+0x68>
	return node->next;
   2569e:	6804      	ldr	r4, [r0, #0]
   256a0:	2c00      	cmp	r4, #0
   256a2:	bf38      	it	cc
   256a4:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   256a6:	3004      	adds	r0, #4
   256a8:	f00c fe4c 	bl	32344 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   256ac:	b134      	cbz	r4, 256bc <_bsdlib_init+0x68>
   256ae:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   256b0:	4620      	mov	r0, r4
   256b2:	2b00      	cmp	r3, #0
   256b4:	bf38      	it	cc
   256b6:	2300      	movcc	r3, #0
   256b8:	461c      	mov	r4, r3
   256ba:	e7f4      	b.n	256a6 <_bsdlib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   256bc:	4804      	ldr	r0, [pc, #16]	; (256d0 <_bsdlib_init+0x7c>)
   256be:	f00c fa17 	bl	31af0 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   256c2:	2000      	movs	r0, #0
   256c4:	b005      	add	sp, #20
   256c6:	bd30      	pop	{r4, r5, pc}
   256c8:	2002c082 	.word	0x2002c082
   256cc:	200237a0 	.word	0x200237a0
   256d0:	200237a8 	.word	0x200237a8
   256d4:	00038460 	.word	0x00038460
   256d8:	2002379c 	.word	0x2002379c

000256dc <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   256dc:	b530      	push	{r4, r5, lr}
   256de:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   256e0:	2201      	movs	r2, #1
   256e2:	2100      	movs	r1, #0
   256e4:	a802      	add	r0, sp, #8
   256e6:	f011 fbb2 	bl	36e4e <z_impl_k_sem_init>
   256ea:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   256ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   256f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   256f4:	481c      	ldr	r0, [pc, #112]	; (25768 <bsdlib_shutdown_wait+0x8c>)
   256f6:	f00c f983 	bl	31a00 <z_impl_k_mutex_lock>
	parent->next = child;
   256fa:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   256fc:	4c1b      	ldr	r4, [pc, #108]	; (2576c <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   256fe:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   25700:	6863      	ldr	r3, [r4, #4]
   25702:	bb2b      	cbnz	r3, 25750 <bsdlib_shutdown_wait+0x74>
	list->head = node;
   25704:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   25708:	4817      	ldr	r0, [pc, #92]	; (25768 <bsdlib_shutdown_wait+0x8c>)
   2570a:	f00c f9f1 	bl	31af0 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   2570e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25716:	a802      	add	r0, sp, #8
   25718:	f00c fe3a 	bl	32390 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   2571c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25724:	4810      	ldr	r0, [pc, #64]	; (25768 <bsdlib_shutdown_wait+0x8c>)
   25726:	f00c f96b 	bl	31a00 <z_impl_k_mutex_lock>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2572a:	2200      	movs	r2, #0
   2572c:	6823      	ldr	r3, [r4, #0]
   2572e:	b153      	cbz	r3, 25746 <bsdlib_shutdown_wait+0x6a>
   25730:	42ab      	cmp	r3, r5
   25732:	d116      	bne.n	25762 <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   25734:	9901      	ldr	r1, [sp, #4]
   25736:	b972      	cbnz	r2, 25756 <bsdlib_shutdown_wait+0x7a>
   25738:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2573a:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2573c:	429a      	cmp	r2, r3
   2573e:	d100      	bne.n	25742 <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   25740:	6061      	str	r1, [r4, #4]
	parent->next = child;
   25742:	2300      	movs	r3, #0
   25744:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   25746:	4808      	ldr	r0, [pc, #32]	; (25768 <bsdlib_shutdown_wait+0x8c>)
   25748:	f00c f9d2 	bl	31af0 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   2574c:	b009      	add	sp, #36	; 0x24
   2574e:	bd30      	pop	{r4, r5, pc}
   25750:	601d      	str	r5, [r3, #0]
	list->tail = node;
   25752:	6065      	str	r5, [r4, #4]
}
   25754:	e7d8      	b.n	25708 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   25756:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25758:	6861      	ldr	r1, [r4, #4]
   2575a:	4299      	cmp	r1, r3
	list->tail = node;
   2575c:	bf08      	it	eq
   2575e:	6062      	streq	r2, [r4, #4]
}
   25760:	e7ef      	b.n	25742 <bsdlib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25762:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25764:	681b      	ldr	r3, [r3, #0]
   25766:	e7e2      	b.n	2572e <bsdlib_shutdown_wait+0x52>
   25768:	200237a8 	.word	0x200237a8
   2576c:	200237a0 	.word	0x200237a0

00025770 <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   25770:	4b01      	ldr	r3, [pc, #4]	; (25778 <bsdlib_get_init_ret+0x8>)
   25772:	6818      	ldr	r0, [r3, #0]
   25774:	4770      	bx	lr
   25776:	bf00      	nop
   25778:	2002379c 	.word	0x2002379c

0002577c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   2577c:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   2577e:	4c0d      	ldr	r4, [pc, #52]	; (257b4 <thread_monitor_entry_get+0x38>)
{
   25780:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   25782:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   25784:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   25786:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   25788:	4b0b      	ldr	r3, [pc, #44]	; (257b8 <thread_monitor_entry_get+0x3c>)
   2578a:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   2578c:	6801      	ldr	r1, [r0, #0]
   2578e:	4291      	cmp	r1, r2
   25790:	d00e      	beq.n	257b0 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   25792:	b151      	cbz	r1, 257aa <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   25794:	6841      	ldr	r1, [r0, #4]
   25796:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   25798:	42b1      	cmp	r1, r6
   2579a:	bfc4      	itt	gt
   2579c:	4604      	movgt	r4, r0
   2579e:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   257a0:	3d01      	subs	r5, #1
   257a2:	f100 0008 	add.w	r0, r0, #8
   257a6:	d1f1      	bne.n	2578c <thread_monitor_entry_get+0x10>
   257a8:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   257aa:	3b01      	subs	r3, #1
	new_entry->id = id;
   257ac:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   257ae:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   257b0:	bd70      	pop	{r4, r5, r6, pc}
   257b2:	bf00      	nop
   257b4:	200237c8 	.word	0x200237c8
   257b8:	200237bc 	.word	0x200237bc

000257bc <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   257bc:	4668      	mov	r0, sp
   257be:	f020 0107 	bic.w	r1, r0, #7
   257c2:	468d      	mov	sp, r1
   257c4:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   257c6:	4b0f      	ldr	r3, [pc, #60]	; (25804 <rpc_proxy_irq_handler+0x48>)
   257c8:	e8d3 2fef 	ldaex	r2, [r3]
   257cc:	3201      	adds	r2, #1
   257ce:	e8c3 2fe1 	stlex	r1, r2, [r3]
   257d2:	2900      	cmp	r1, #0
   257d4:	d1f8      	bne.n	257c8 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   257d6:	f003 ffcd 	bl	29774 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   257da:	4b0b      	ldr	r3, [pc, #44]	; (25808 <rpc_proxy_irq_handler+0x4c>)
   257dc:	681c      	ldr	r4, [r3, #0]
   257de:	2c00      	cmp	r4, #0
   257e0:	bf38      	it	cc
   257e2:	2400      	movcc	r4, #0
   257e4:	b12c      	cbz	r4, 257f2 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   257e6:	1d20      	adds	r0, r4, #4
   257e8:	f00c fdac 	bl	32344 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   257ec:	6824      	ldr	r4, [r4, #0]
   257ee:	2c00      	cmp	r4, #0
   257f0:	d1f8      	bne.n	257e4 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   257f2:	f7fc fa3b 	bl	21c6c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   257f6:	f7fc fdc5 	bl	22384 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   257fa:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   257fe:	4685      	mov	sp, r0
   25800:	4770      	bx	lr
   25802:	bf00      	nop
   25804:	200237bc 	.word	0x200237bc
   25808:	200237c0 	.word	0x200237c0

0002580c <bsd_os_timedwait>:
{
   2580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25810:	460c      	mov	r4, r1
   25812:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   25814:	f011 fbf5 	bl	37002 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   25818:	6823      	ldr	r3, [r4, #0]
   2581a:	4680      	mov	r8, r0
   2581c:	2b00      	cmp	r3, #0
   2581e:	468a      	mov	sl, r1
   25820:	d103      	bne.n	2582a <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   25822:	f00c fd1b 	bl	3225c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   25826:	203c      	movs	r0, #60	; 0x3c
   25828:	e091      	b.n	2594e <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   2582a:	bfbc      	itt	lt
   2582c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   25830:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25832:	2201      	movs	r2, #1
   25834:	2100      	movs	r1, #0
   25836:	a802      	add	r0, sp, #8
   25838:	f011 fb09 	bl	36e4e <z_impl_k_sem_init>
   2583c:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   2583e:	f04f 0320 	mov.w	r3, #32
   25842:	f3ef 8b11 	mrs	fp, BASEPRI
   25846:	f383 8811 	msr	BASEPRI, r3
   2584a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2584e:	f00c fd73 	bl	32338 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   25852:	f7ff ff93 	bl	2577c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   25856:	4947      	ldr	r1, [pc, #284]	; (25974 <bsd_os_timedwait+0x168>)
   25858:	6843      	ldr	r3, [r0, #4]
   2585a:	680a      	ldr	r2, [r1, #0]
   2585c:	4689      	mov	r9, r1
   2585e:	4293      	cmp	r3, r2
   25860:	f04f 0300 	mov.w	r3, #0
   25864:	d108      	bne.n	25878 <bsd_os_timedwait+0x6c>
	parent->next = child;
   25866:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   25868:	4b43      	ldr	r3, [pc, #268]	; (25978 <bsd_os_timedwait+0x16c>)
   2586a:	685a      	ldr	r2, [r3, #4]
   2586c:	2a00      	cmp	r2, #0
   2586e:	d171      	bne.n	25954 <bsd_os_timedwait+0x148>
	list->head = node;
   25870:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   25874:	2301      	movs	r3, #1
}
   25876:	e000      	b.n	2587a <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   25878:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   2587a:	f38b 8811 	msr	BASEPRI, fp
   2587e:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   25882:	2b00      	cmp	r3, #0
   25884:	d062      	beq.n	2594c <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   25886:	6823      	ldr	r3, [r4, #0]
   25888:	1c5a      	adds	r2, r3, #1
   2588a:	d066      	beq.n	2595a <bsd_os_timedwait+0x14e>
   2588c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   25890:	f240 30e7 	movw	r0, #999	; 0x3e7
   25894:	2100      	movs	r1, #0
   25896:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   2589a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2589e:	2300      	movs	r3, #0
   258a0:	fbce 010c 	smlal	r0, r1, lr, ip
   258a4:	f7f2 ff88 	bl	187b8 <__aeabi_uldivmod>
   258a8:	4602      	mov	r2, r0
   258aa:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   258ac:	a802      	add	r0, sp, #8
   258ae:	f00c fd6f 	bl	32390 <z_impl_k_sem_take>
	__asm__ volatile(
   258b2:	f04f 0320 	mov.w	r3, #32
   258b6:	f3ef 8b11 	mrs	fp, BASEPRI
   258ba:	f383 8811 	msr	BASEPRI, r3
   258be:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   258c2:	2000      	movs	r0, #0
   258c4:	4b2c      	ldr	r3, [pc, #176]	; (25978 <bsd_os_timedwait+0x16c>)
   258c6:	681a      	ldr	r2, [r3, #0]
   258c8:	b15a      	cbz	r2, 258e2 <bsd_os_timedwait+0xd6>
   258ca:	42aa      	cmp	r2, r5
   258cc:	d14f      	bne.n	2596e <bsd_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   258ce:	9d01      	ldr	r5, [sp, #4]
   258d0:	2800      	cmp	r0, #0
   258d2:	d146      	bne.n	25962 <bsd_os_timedwait+0x156>
   258d4:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   258d6:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   258d8:	4291      	cmp	r1, r2
   258da:	d100      	bne.n	258de <bsd_os_timedwait+0xd2>
	list->tail = node;
   258dc:	605d      	str	r5, [r3, #4]
	parent->next = child;
   258de:	2300      	movs	r3, #0
   258e0:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   258e2:	f00c fd29 	bl	32338 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   258e6:	f7ff ff49 	bl	2577c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   258ea:	f8d9 3000 	ldr.w	r3, [r9]
   258ee:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   258f0:	f38b 8811 	msr	BASEPRI, fp
   258f4:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   258f8:	6825      	ldr	r5, [r4, #0]
   258fa:	1c6b      	adds	r3, r5, #1
   258fc:	d026      	beq.n	2594c <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   258fe:	f011 fb80 	bl	37002 <z_impl_k_uptime_ticks>
   25902:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   25906:	468e      	mov	lr, r1
   25908:	fba8 890c 	umull	r8, r9, r8, ip
   2590c:	fba0 010c 	umull	r0, r1, r0, ip
   25910:	fb0c 990a 	mla	r9, ip, sl, r9
   25914:	fb0c 110e 	mla	r1, ip, lr, r1
   25918:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   2591c:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   25920:	1952      	adds	r2, r2, r5
   25922:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   25926:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   2592a:	0bc5      	lsrs	r5, r0, #15
   2592c:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   25930:	1b56      	subs	r6, r2, r5
   25932:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   25936:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   2593a:	2e00      	cmp	r6, #0
   2593c:	f177 0300 	sbcs.w	r3, r7, #0
   25940:	bfb8      	it	lt
   25942:	2600      	movlt	r6, #0
   25944:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   25946:	2e00      	cmp	r6, #0
   25948:	f43f af6d 	beq.w	25826 <bsd_os_timedwait+0x1a>
	return 0;
   2594c:	2000      	movs	r0, #0
}
   2594e:	b009      	add	sp, #36	; 0x24
   25950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25954:	6015      	str	r5, [r2, #0]
	list->tail = node;
   25956:	605d      	str	r5, [r3, #4]
   25958:	e78c      	b.n	25874 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   2595a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2595e:	4613      	mov	r3, r2
   25960:	e7a4      	b.n	258ac <bsd_os_timedwait+0xa0>
	parent->next = child;
   25962:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   25964:	6859      	ldr	r1, [r3, #4]
   25966:	4291      	cmp	r1, r2
	list->tail = node;
   25968:	bf08      	it	eq
   2596a:	6058      	streq	r0, [r3, #4]
}
   2596c:	e7b7      	b.n	258de <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2596e:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25970:	6812      	ldr	r2, [r2, #0]
   25972:	e7a9      	b.n	258c8 <bsd_os_timedwait+0xbc>
   25974:	200237bc 	.word	0x200237bc
   25978:	200237c0 	.word	0x200237c0

0002597c <bsd_os_errno_set>:
	switch (err_code) {
   2597c:	283c      	cmp	r0, #60	; 0x3c
{
   2597e:	4601      	mov	r1, r0
   25980:	b508      	push	{r3, lr}
	switch (err_code) {
   25982:	f300 808f 	bgt.w	25aa4 <bsd_os_errno_set+0x128>
   25986:	2800      	cmp	r0, #0
   25988:	dc0d      	bgt.n	259a6 <bsd_os_errno_set+0x2a>
   2598a:	4bb2      	ldr	r3, [pc, #712]	; (25c54 <bsd_os_errno_set+0x2d8>)
   2598c:	4ab2      	ldr	r2, [pc, #712]	; (25c58 <bsd_os_errno_set+0x2dc>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   2598e:	48b3      	ldr	r0, [pc, #716]	; (25c5c <bsd_os_errno_set+0x2e0>)
   25990:	1ad2      	subs	r2, r2, r3
   25992:	08d2      	lsrs	r2, r2, #3
   25994:	0192      	lsls	r2, r2, #6
   25996:	f042 0201 	orr.w	r2, r2, #1
   2599a:	f00e fdc4 	bl	34526 <log_1>
		errno = 0xBAADBAAD;
   2599e:	f00f fcba 	bl	35316 <__errno>
   259a2:	4baf      	ldr	r3, [pc, #700]	; (25c60 <bsd_os_errno_set+0x2e4>)
   259a4:	e0bf      	b.n	25b26 <bsd_os_errno_set+0x1aa>
   259a6:	1e43      	subs	r3, r0, #1
   259a8:	2b3b      	cmp	r3, #59	; 0x3b
   259aa:	d8ee      	bhi.n	2598a <bsd_os_errno_set+0xe>
   259ac:	a201      	add	r2, pc, #4	; (adr r2, 259b4 <bsd_os_errno_set+0x38>)
   259ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   259b2:	bf00      	nop
   259b4:	00025b21 	.word	0x00025b21
   259b8:	00025b2b 	.word	0x00025b2b
   259bc:	0002598b 	.word	0x0002598b
   259c0:	0002598b 	.word	0x0002598b
   259c4:	00025b33 	.word	0x00025b33
   259c8:	0002598b 	.word	0x0002598b
   259cc:	0002598b 	.word	0x0002598b
   259d0:	00025b3b 	.word	0x00025b3b
   259d4:	00025b43 	.word	0x00025b43
   259d8:	0002598b 	.word	0x0002598b
   259dc:	0002598b 	.word	0x0002598b
   259e0:	00025b4b 	.word	0x00025b4b
   259e4:	00025b53 	.word	0x00025b53
   259e8:	00025b5b 	.word	0x00025b5b
   259ec:	0002598b 	.word	0x0002598b
   259f0:	0002598b 	.word	0x0002598b
   259f4:	0002598b 	.word	0x0002598b
   259f8:	0002598b 	.word	0x0002598b
   259fc:	0002598b 	.word	0x0002598b
   25a00:	0002598b 	.word	0x0002598b
   25a04:	0002598b 	.word	0x0002598b
   25a08:	00025b63 	.word	0x00025b63
   25a0c:	0002598b 	.word	0x0002598b
   25a10:	00025b6b 	.word	0x00025b6b
   25a14:	0002598b 	.word	0x0002598b
   25a18:	0002598b 	.word	0x0002598b
   25a1c:	0002598b 	.word	0x0002598b
   25a20:	0002598b 	.word	0x0002598b
   25a24:	0002598b 	.word	0x0002598b
   25a28:	0002598b 	.word	0x0002598b
   25a2c:	0002598b 	.word	0x0002598b
   25a30:	0002598b 	.word	0x0002598b
   25a34:	0002598b 	.word	0x0002598b
   25a38:	0002598b 	.word	0x0002598b
   25a3c:	00025b73 	.word	0x00025b73
   25a40:	0002598b 	.word	0x0002598b
   25a44:	00025b7b 	.word	0x00025b7b
   25a48:	0002598b 	.word	0x0002598b
   25a4c:	0002598b 	.word	0x0002598b
   25a50:	00025c43 	.word	0x00025c43
   25a54:	00025b83 	.word	0x00025b83
   25a58:	00025b8b 	.word	0x00025b8b
   25a5c:	00025b93 	.word	0x00025b93
   25a60:	00025b9b 	.word	0x00025b9b
   25a64:	00025ba3 	.word	0x00025ba3
   25a68:	0002598b 	.word	0x0002598b
   25a6c:	00025bab 	.word	0x00025bab
   25a70:	00025bb3 	.word	0x00025bb3
   25a74:	0002598b 	.word	0x0002598b
   25a78:	00025bbb 	.word	0x00025bbb
   25a7c:	00025bc3 	.word	0x00025bc3
   25a80:	00025bcb 	.word	0x00025bcb
   25a84:	00025c4b 	.word	0x00025c4b
   25a88:	00025bd3 	.word	0x00025bd3
   25a8c:	0002598b 	.word	0x0002598b
   25a90:	00025bdb 	.word	0x00025bdb
   25a94:	00025be3 	.word	0x00025be3
   25a98:	0002598b 	.word	0x0002598b
   25a9c:	0002598b 	.word	0x0002598b
   25aa0:	00025beb 	.word	0x00025beb
	switch (err_code) {
   25aa4:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   25aa8:	2b18      	cmp	r3, #24
   25aaa:	f63f af6e 	bhi.w	2598a <bsd_os_errno_set+0xe>
   25aae:	2b18      	cmp	r3, #24
   25ab0:	f63f af6b 	bhi.w	2598a <bsd_os_errno_set+0xe>
   25ab4:	a201      	add	r2, pc, #4	; (adr r2, 25abc <bsd_os_errno_set+0x140>)
   25ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   25aba:	bf00      	nop
   25abc:	00025bf3 	.word	0x00025bf3
   25ac0:	0002598b 	.word	0x0002598b
   25ac4:	0002598b 	.word	0x0002598b
   25ac8:	0002598b 	.word	0x0002598b
   25acc:	0002598b 	.word	0x0002598b
   25ad0:	0002598b 	.word	0x0002598b
   25ad4:	0002598b 	.word	0x0002598b
   25ad8:	00025bfb 	.word	0x00025bfb
   25adc:	0002598b 	.word	0x0002598b
   25ae0:	00025c0b 	.word	0x00025c0b
   25ae4:	00025c03 	.word	0x00025c03
   25ae8:	0002598b 	.word	0x0002598b
   25aec:	0002598b 	.word	0x0002598b
   25af0:	0002598b 	.word	0x0002598b
   25af4:	0002598b 	.word	0x0002598b
   25af8:	0002598b 	.word	0x0002598b
   25afc:	0002598b 	.word	0x0002598b
   25b00:	0002598b 	.word	0x0002598b
   25b04:	0002598b 	.word	0x0002598b
   25b08:	0002598b 	.word	0x0002598b
   25b0c:	00025c13 	.word	0x00025c13
   25b10:	00025c1b 	.word	0x00025c1b
   25b14:	00025c25 	.word	0x00025c25
   25b18:	00025c2f 	.word	0x00025c2f
   25b1c:	00025c39 	.word	0x00025c39
		errno = EPERM;
   25b20:	f00f fbf9 	bl	35316 <__errno>
   25b24:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   25b26:	6003      	str	r3, [r0, #0]
}
   25b28:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   25b2a:	f00f fbf4 	bl	35316 <__errno>
   25b2e:	2302      	movs	r3, #2
   25b30:	e7f9      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EIO;
   25b32:	f00f fbf0 	bl	35316 <__errno>
   25b36:	2305      	movs	r3, #5
   25b38:	e7f5      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ENOEXEC;
   25b3a:	f00f fbec 	bl	35316 <__errno>
   25b3e:	2308      	movs	r3, #8
   25b40:	e7f1      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EBADF;
   25b42:	f00f fbe8 	bl	35316 <__errno>
   25b46:	2309      	movs	r3, #9
   25b48:	e7ed      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ENOMEM;
   25b4a:	f00f fbe4 	bl	35316 <__errno>
   25b4e:	230c      	movs	r3, #12
   25b50:	e7e9      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EACCES;
   25b52:	f00f fbe0 	bl	35316 <__errno>
   25b56:	230d      	movs	r3, #13
   25b58:	e7e5      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EFAULT;
   25b5a:	f00f fbdc 	bl	35316 <__errno>
   25b5e:	230e      	movs	r3, #14
   25b60:	e7e1      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EINVAL;
   25b62:	f00f fbd8 	bl	35316 <__errno>
   25b66:	2316      	movs	r3, #22
   25b68:	e7dd      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EMFILE;
   25b6a:	f00f fbd4 	bl	35316 <__errno>
   25b6e:	2318      	movs	r3, #24
   25b70:	e7d9      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EAGAIN;
   25b72:	f00f fbd0 	bl	35316 <__errno>
   25b76:	230b      	movs	r3, #11
   25b78:	e7d5      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EDOM;
   25b7a:	f00f fbcc 	bl	35316 <__errno>
   25b7e:	2321      	movs	r3, #33	; 0x21
   25b80:	e7d1      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EPROTOTYPE;
   25b82:	f00f fbc8 	bl	35316 <__errno>
   25b86:	236b      	movs	r3, #107	; 0x6b
   25b88:	e7cd      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ENOPROTOOPT;
   25b8a:	f00f fbc4 	bl	35316 <__errno>
   25b8e:	236d      	movs	r3, #109	; 0x6d
   25b90:	e7c9      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EPROTONOSUPPORT;
   25b92:	f00f fbc0 	bl	35316 <__errno>
   25b96:	237b      	movs	r3, #123	; 0x7b
   25b98:	e7c5      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ESOCKTNOSUPPORT;
   25b9a:	f00f fbbc 	bl	35316 <__errno>
   25b9e:	237c      	movs	r3, #124	; 0x7c
   25ba0:	e7c1      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EOPNOTSUPP;
   25ba2:	f00f fbb8 	bl	35316 <__errno>
   25ba6:	235f      	movs	r3, #95	; 0x5f
   25ba8:	e7bd      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EAFNOSUPPORT;
   25baa:	f00f fbb4 	bl	35316 <__errno>
   25bae:	236a      	movs	r3, #106	; 0x6a
   25bb0:	e7b9      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EADDRINUSE;
   25bb2:	f00f fbb0 	bl	35316 <__errno>
   25bb6:	2370      	movs	r3, #112	; 0x70
   25bb8:	e7b5      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ENETDOWN;
   25bba:	f00f fbac 	bl	35316 <__errno>
   25bbe:	2373      	movs	r3, #115	; 0x73
   25bc0:	e7b1      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ENETUNREACH;
   25bc2:	f00f fba8 	bl	35316 <__errno>
   25bc6:	2372      	movs	r3, #114	; 0x72
   25bc8:	e7ad      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ENETRESET;
   25bca:	f00f fba4 	bl	35316 <__errno>
   25bce:	237e      	movs	r3, #126	; 0x7e
   25bd0:	e7a9      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ECONNRESET;
   25bd2:	f00f fba0 	bl	35316 <__errno>
   25bd6:	2368      	movs	r3, #104	; 0x68
   25bd8:	e7a5      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EISCONN;
   25bda:	f00f fb9c 	bl	35316 <__errno>
   25bde:	237f      	movs	r3, #127	; 0x7f
   25be0:	e7a1      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ENOTCONN;
   25be2:	f00f fb98 	bl	35316 <__errno>
   25be6:	2380      	movs	r3, #128	; 0x80
   25be8:	e79d      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ETIMEDOUT;
   25bea:	f00f fb94 	bl	35316 <__errno>
   25bee:	2374      	movs	r3, #116	; 0x74
   25bf0:	e799      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ENOBUFS;
   25bf2:	f00f fb90 	bl	35316 <__errno>
   25bf6:	2369      	movs	r3, #105	; 0x69
   25bf8:	e795      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EHOSTDOWN;
   25bfa:	f00f fb8c 	bl	35316 <__errno>
   25bfe:	2375      	movs	r3, #117	; 0x75
   25c00:	e791      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EINPROGRESS;
   25c02:	f00f fb88 	bl	35316 <__errno>
   25c06:	2377      	movs	r3, #119	; 0x77
   25c08:	e78d      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EALREADY;
   25c0a:	f00f fb84 	bl	35316 <__errno>
   25c0e:	2378      	movs	r3, #120	; 0x78
   25c10:	e789      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ECANCELED;
   25c12:	f00f fb80 	bl	35316 <__errno>
   25c16:	238c      	movs	r3, #140	; 0x8c
   25c18:	e785      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ENOKEY;
   25c1a:	f00f fb7c 	bl	35316 <__errno>
   25c1e:	f240 73d1 	movw	r3, #2001	; 0x7d1
   25c22:	e780      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EKEYEXPIRED;
   25c24:	f00f fb77 	bl	35316 <__errno>
   25c28:	f240 73d2 	movw	r3, #2002	; 0x7d2
   25c2c:	e77b      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EKEYREVOKED;
   25c2e:	f00f fb72 	bl	35316 <__errno>
   25c32:	f240 73d3 	movw	r3, #2003	; 0x7d3
   25c36:	e776      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EKEYREJECTED;
   25c38:	f00f fb6d 	bl	35316 <__errno>
   25c3c:	f240 73d4 	movw	r3, #2004	; 0x7d4
   25c40:	e771      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = EMSGSIZE;
   25c42:	f00f fb68 	bl	35316 <__errno>
   25c46:	237a      	movs	r3, #122	; 0x7a
   25c48:	e76d      	b.n	25b26 <bsd_os_errno_set+0x1aa>
		errno = ECONNABORTED;
   25c4a:	f00f fb64 	bl	35316 <__errno>
   25c4e:	2371      	movs	r3, #113	; 0x71
   25c50:	e769      	b.n	25b26 <bsd_os_errno_set+0x1aa>
   25c52:	bf00      	nop
   25c54:	0003831c 	.word	0x0003831c
   25c58:	0003834c 	.word	0x0003834c
   25c5c:	0003b9e2 	.word	0x0003b9e2
   25c60:	baadbaad 	.word	0xbaadbaad

00025c64 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25c68:	4b01      	ldr	r3, [pc, #4]	; (25c70 <bsd_os_application_irq_set+0xc>)
   25c6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   25c6e:	4770      	bx	lr
   25c70:	e000e100 	.word	0xe000e100

00025c74 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25c78:	4b01      	ldr	r3, [pc, #4]	; (25c80 <bsd_os_application_irq_clear+0xc>)
   25c7a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   25c7e:	4770      	bx	lr
   25c80:	e000e100 	.word	0xe000e100

00025c84 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25c84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   25c88:	4b01      	ldr	r3, [pc, #4]	; (25c90 <bsd_os_trace_irq_set+0xc>)
   25c8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   25c8e:	4770      	bx	lr
   25c90:	e000e100 	.word	0xe000e100

00025c94 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25c94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   25c98:	4b01      	ldr	r3, [pc, #4]	; (25ca0 <bsd_os_trace_irq_clear+0xc>)
   25c9a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   25c9e:	4770      	bx	lr
   25ca0:	e000e100 	.word	0xe000e100

00025ca4 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   25ca4:	b508      	push	{r3, lr}
	list->head = NULL;
   25ca6:	2300      	movs	r3, #0
   25ca8:	4a07      	ldr	r2, [pc, #28]	; (25cc8 <bsd_os_init+0x24>)
	list->tail = NULL;
   25caa:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25cae:	4a07      	ldr	r2, [pc, #28]	; (25ccc <bsd_os_init+0x28>)
   25cb0:	e8d2 1fef 	ldaex	r1, [r2]
   25cb4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   25cb8:	2800      	cmp	r0, #0
   25cba:	d1f9      	bne.n	25cb0 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   25cbc:	f010 f952 	bl	35f64 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   25cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   25cc4:	f010 b943 	b.w	35f4e <trace_task_create>
   25cc8:	200237c0 	.word	0x200237c0
   25ccc:	200237bc 	.word	0x200237bc

00025cd0 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   25cd0:	f240 2302 	movw	r3, #514	; 0x202
   25cd4:	4298      	cmp	r0, r3
   25cd6:	f000 8093 	beq.w	25e00 <z_to_nrf_optname+0x130>
   25cda:	dc07      	bgt.n	25cec <z_to_nrf_optname+0x1c>
   25cdc:	2801      	cmp	r0, #1
   25cde:	d04d      	beq.n	25d7c <z_to_nrf_optname+0xac>
   25ce0:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   25ce4:	d034      	beq.n	25d50 <z_to_nrf_optname+0x80>
   25ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		retval = -1;
		break;
	}

	return retval;
}
   25cea:	4770      	bx	lr
	switch (z_in_level) {
   25cec:	f240 2303 	movw	r3, #515	; 0x203
   25cf0:	4298      	cmp	r0, r3
   25cf2:	d1f8      	bne.n	25ce6 <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   25cf4:	3901      	subs	r1, #1
   25cf6:	2913      	cmp	r1, #19
   25cf8:	d8f5      	bhi.n	25ce6 <z_to_nrf_optname+0x16>
   25cfa:	a301      	add	r3, pc, #4	; (adr r3, 25d00 <z_to_nrf_optname+0x30>)
   25cfc:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   25d00:	00025e0f 	.word	0x00025e0f
   25d04:	00025de9 	.word	0x00025de9
   25d08:	00025ded 	.word	0x00025ded
   25d0c:	00025d8d 	.word	0x00025d8d
   25d10:	00025df1 	.word	0x00025df1
   25d14:	00025df5 	.word	0x00025df5
   25d18:	00025df9 	.word	0x00025df9
   25d1c:	00025ce7 	.word	0x00025ce7
   25d20:	00025ce7 	.word	0x00025ce7
   25d24:	00025ce7 	.word	0x00025ce7
   25d28:	00025ce7 	.word	0x00025ce7
   25d2c:	00025ce7 	.word	0x00025ce7
   25d30:	00025ce7 	.word	0x00025ce7
   25d34:	00025ce7 	.word	0x00025ce7
   25d38:	00025ce7 	.word	0x00025ce7
   25d3c:	00025ce7 	.word	0x00025ce7
   25d40:	00025ce7 	.word	0x00025ce7
   25d44:	00025ce7 	.word	0x00025ce7
   25d48:	00025ce7 	.word	0x00025ce7
   25d4c:	00025dfd 	.word	0x00025dfd
		switch (z_in_optname) {
   25d50:	3901      	subs	r1, #1
   25d52:	2907      	cmp	r1, #7
   25d54:	d8c7      	bhi.n	25ce6 <z_to_nrf_optname+0x16>
   25d56:	a301      	add	r3, pc, #4	; (adr r3, 25d5c <z_to_nrf_optname+0x8c>)
   25d58:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   25d5c:	00025de9 	.word	0x00025de9
   25d60:	00025df1 	.word	0x00025df1
   25d64:	00025df5 	.word	0x00025df5
   25d68:	00025df9 	.word	0x00025df9
   25d6c:	00025d8d 	.word	0x00025d8d
   25d70:	00025e0f 	.word	0x00025e0f
   25d74:	00025ce7 	.word	0x00025ce7
   25d78:	00025ded 	.word	0x00025ded
		switch (z_in_optname) {
   25d7c:	2920      	cmp	r1, #32
   25d7e:	dcb2      	bgt.n	25ce6 <z_to_nrf_optname+0x16>
   25d80:	2913      	cmp	r1, #19
   25d82:	dc05      	bgt.n	25d90 <z_to_nrf_optname+0xc0>
   25d84:	2902      	cmp	r1, #2
   25d86:	d027      	beq.n	25dd8 <z_to_nrf_optname+0x108>
   25d88:	2904      	cmp	r1, #4
   25d8a:	d1ac      	bne.n	25ce6 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   25d8c:	2304      	movs	r3, #4
   25d8e:	e03f      	b.n	25e10 <z_to_nrf_optname+0x140>
   25d90:	3914      	subs	r1, #20
   25d92:	290c      	cmp	r1, #12
   25d94:	d8a7      	bhi.n	25ce6 <z_to_nrf_optname+0x16>
   25d96:	a301      	add	r3, pc, #4	; (adr r3, 25d9c <z_to_nrf_optname+0xcc>)
   25d98:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   25d9c:	00025dfd 	.word	0x00025dfd
   25da0:	00025dd1 	.word	0x00025dd1
   25da4:	00025ce7 	.word	0x00025ce7
   25da8:	00025ce7 	.word	0x00025ce7
   25dac:	00025ce7 	.word	0x00025ce7
   25db0:	00025dd5 	.word	0x00025dd5
   25db4:	00025ce7 	.word	0x00025ce7
   25db8:	00025ce7 	.word	0x00025ce7
   25dbc:	00025ce7 	.word	0x00025ce7
   25dc0:	00025ce7 	.word	0x00025ce7
   25dc4:	00025ddd 	.word	0x00025ddd
   25dc8:	00025de1 	.word	0x00025de1
   25dcc:	00025de5 	.word	0x00025de5
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   25dd0:	2315      	movs	r3, #21
   25dd2:	e01d      	b.n	25e10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   25dd4:	2319      	movs	r3, #25
   25dd6:	e01b      	b.n	25e10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   25dd8:	2328      	movs	r3, #40	; 0x28
   25dda:	e019      	b.n	25e10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   25ddc:	231e      	movs	r3, #30
   25dde:	e017      	b.n	25e10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   25de0:	231f      	movs	r3, #31
   25de2:	e015      	b.n	25e10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   25de4:	2320      	movs	r3, #32
   25de6:	e013      	b.n	25e10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   25de8:	2302      	movs	r3, #2
   25dea:	e011      	b.n	25e10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   25dec:	2303      	movs	r3, #3
   25dee:	e00f      	b.n	25e10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   25df0:	2305      	movs	r3, #5
   25df2:	e00d      	b.n	25e10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   25df4:	2306      	movs	r3, #6
   25df6:	e00b      	b.n	25e10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   25df8:	2307      	movs	r3, #7
   25dfa:	e009      	b.n	25e10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   25dfc:	2314      	movs	r3, #20
   25dfe:	e007      	b.n	25e10 <z_to_nrf_optname+0x140>
		switch (z_in_optname) {
   25e00:	2902      	cmp	r1, #2
   25e02:	d0f1      	beq.n	25de8 <z_to_nrf_optname+0x118>
   25e04:	2903      	cmp	r1, #3
   25e06:	d0f1      	beq.n	25dec <z_to_nrf_optname+0x11c>
   25e08:	2901      	cmp	r1, #1
   25e0a:	f47f af6c 	bne.w	25ce6 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   25e0e:	2301      	movs	r3, #1
	int retval = 0;
   25e10:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   25e12:	6013      	str	r3, [r2, #0]
			break;
   25e14:	4770      	bx	lr
   25e16:	bf00      	nop

00025e18 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   25e18:	f240 1303 	movw	r3, #259	; 0x103
{
   25e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   25e20:	4299      	cmp	r1, r3
{
   25e22:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   25e24:	f000 8097 	beq.w	25f56 <nrf91_socket_offload_ioctl+0x13e>
   25e28:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   25e2c:	d005      	beq.n	25e3a <nrf91_socket_offload_ioctl+0x22>
   25e2e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   25e32:	d171      	bne.n	25f18 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   25e34:	f06f 0411 	mvn.w	r4, #17
   25e38:	e01d      	b.n	25e76 <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   25e3a:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   25e3e:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   25e42:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   25e44:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   25e48:	4668      	mov	r0, sp
   25e4a:	2240      	movs	r2, #64	; 0x40
   25e4c:	f011 faf9 	bl	37442 <memset>
	for (int i = 0; i < nfds; i++) {
   25e50:	466e      	mov	r6, sp
   25e52:	4655      	mov	r5, sl
   25e54:	4657      	mov	r7, sl
	int retval = 0;
   25e56:	4644      	mov	r4, r8
		tmp[i].events = 0;
   25e58:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   25e5a:	4940      	ldr	r1, [pc, #256]	; (25f5c <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   25e5c:	45c1      	cmp	r9, r8
   25e5e:	dc0e      	bgt.n	25e7e <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   25e60:	2c00      	cmp	r4, #0
   25e62:	dc08      	bgt.n	25e76 <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   25e64:	465a      	mov	r2, fp
   25e66:	4649      	mov	r1, r9
   25e68:	4668      	mov	r0, sp
   25e6a:	f009 fb49 	bl	2f500 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   25e6e:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   25e70:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   25e72:	4599      	cmp	r9, r3
   25e74:	dc28      	bgt.n	25ec8 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   25e76:	4620      	mov	r0, r4
   25e78:	b011      	add	sp, #68	; 0x44
   25e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   25e7e:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   25e80:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   25e82:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   25e84:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   25e86:	da05      	bge.n	25e94 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   25e88:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   25e8a:	f108 0801 	add.w	r8, r8, #1
   25e8e:	3608      	adds	r6, #8
   25e90:	3708      	adds	r7, #8
   25e92:	e7e3      	b.n	25e5c <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   25e94:	2286      	movs	r2, #134	; 0x86
   25e96:	f7f9 f9a5 	bl	1f1e4 <z_get_fd_obj>
			if (obj != NULL) {
   25e9a:	2300      	movs	r3, #0
   25e9c:	492f      	ldr	r1, [pc, #188]	; (25f5c <nrf91_socket_offload_ioctl+0x144>)
   25e9e:	b178      	cbz	r0, 25ec0 <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   25ea0:	3801      	subs	r0, #1
   25ea2:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   25ea4:	88b8      	ldrh	r0, [r7, #4]
   25ea6:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   25ea8:	bf42      	ittt	mi
   25eaa:	88b2      	ldrhmi	r2, [r6, #4]
   25eac:	f042 0201 	orrmi.w	r2, r2, #1
   25eb0:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   25eb2:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   25eb4:	bf42      	ittt	mi
   25eb6:	88b2      	ldrhmi	r2, [r6, #4]
   25eb8:	f042 0202 	orrmi.w	r2, r2, #2
   25ebc:	80b2      	strhmi	r2, [r6, #4]
   25ebe:	e7e4      	b.n	25e8a <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   25ec0:	2220      	movs	r2, #32
				retval++;
   25ec2:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   25ec4:	80fa      	strh	r2, [r7, #6]
				retval++;
   25ec6:	e7ed      	b.n	25ea4 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   25ec8:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   25ecc:	2a00      	cmp	r2, #0
   25ece:	db20      	blt.n	25f12 <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   25ed0:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   25ed4:	88d2      	ldrh	r2, [r2, #6]
   25ed6:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   25ed8:	bf42      	ittt	mi
   25eda:	88e9      	ldrhmi	r1, [r5, #6]
   25edc:	f041 0101 	orrmi.w	r1, r1, #1
   25ee0:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   25ee2:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   25ee4:	bf42      	ittt	mi
   25ee6:	88e9      	ldrhmi	r1, [r5, #6]
   25ee8:	f041 0104 	orrmi.w	r1, r1, #4
   25eec:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   25eee:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   25ef0:	bf42      	ittt	mi
   25ef2:	88e9      	ldrhmi	r1, [r5, #6]
   25ef4:	f041 0108 	orrmi.w	r1, r1, #8
   25ef8:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   25efa:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   25efc:	bf42      	ittt	mi
   25efe:	88e9      	ldrhmi	r1, [r5, #6]
   25f00:	f041 0120 	orrmi.w	r1, r1, #32
   25f04:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   25f06:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   25f08:	bf42      	ittt	mi
   25f0a:	88ea      	ldrhmi	r2, [r5, #6]
   25f0c:	f042 0210 	orrmi.w	r2, r2, #16
   25f10:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   25f12:	3301      	adds	r3, #1
   25f14:	3508      	adds	r5, #8
   25f16:	e7ac      	b.n	25e72 <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   25f18:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   25f1a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
	switch (cmd) {
   25f1e:	d00b      	beq.n	25f38 <nrf91_socket_offload_ioctl+0x120>
   25f20:	2904      	cmp	r1, #4
   25f22:	d111      	bne.n	25f48 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   25f24:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   25f26:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   25f2a:	d10d      	bne.n	25f48 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   25f2c:	2101      	movs	r1, #1
   25f2e:	1392      	asrs	r2, r2, #14
   25f30:	f009 fae8 	bl	2f504 <nrf_fcntl>
   25f34:	4604      	mov	r4, r0
		break;
   25f36:	e79e      	b.n	25e76 <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   25f38:	2200      	movs	r2, #0
   25f3a:	2102      	movs	r1, #2
   25f3c:	f009 fae2 	bl	2f504 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   25f40:	0380      	lsls	r0, r0, #14
   25f42:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   25f46:	e796      	b.n	25e76 <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   25f48:	f00f f9e5 	bl	35316 <__errno>
   25f4c:	2316      	movs	r3, #22
	return retval;
   25f4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   25f52:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   25f54:	e78f      	b.n	25e76 <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   25f56:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   25f5a:	e78c      	b.n	25e76 <nrf91_socket_offload_ioctl+0x5e>
   25f5c:	000389b0 	.word	0x000389b0

00025f60 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   25f60:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   25f62:	4b03      	ldr	r3, [pc, #12]	; (25f70 <nrf91_socket_iface_init+0x10>)
   25f64:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   25f66:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   25f68:	4802      	ldr	r0, [pc, #8]	; (25f74 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   25f6a:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   25f6c:	f7fb b846 	b.w	20ffc <socket_offload_dns_register>
   25f70:	20023818 	.word	0x20023818
   25f74:	000389a8 	.word	0x000389a8

00025f78 <nrf91_socket_offload_accept>:
{
   25f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25f7c:	b08a      	sub	sp, #40	; 0x28
   25f7e:	4607      	mov	r7, r0
   25f80:	460c      	mov	r4, r1
   25f82:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   25f84:	f7f9 f95e 	bl	1f244 <z_reserve_fd>
   25f88:	4606      	mov	r6, r0
	if (fd < 0) {
   25f8a:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   25f8c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
	if (fd < 0) {
   25f90:	da05      	bge.n	25f9e <nrf91_socket_offload_accept+0x26>
	return -1;
   25f92:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
   25f96:	4630      	mov	r0, r6
   25f98:	b00a      	add	sp, #40	; 0x28
   25f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   25f9e:	b31c      	cbz	r4, 25fe8 <nrf91_socket_offload_accept+0x70>
   25fa0:	b32d      	cbz	r5, 25fee <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   25fa2:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   25fa4:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   25fa6:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   25fa8:	bf0c      	ite	eq
   25faa:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   25fac:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   25fae:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   25fb0:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   25fb2:	4639      	mov	r1, r7
   25fb4:	f009 fa40 	bl	2f438 <nrf_accept>
	if (new_sd < 0) {
   25fb8:	f1b0 0800 	subs.w	r8, r0, #0
   25fbc:	dbe9      	blt.n	25f92 <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   25fbe:	b164      	cbz	r4, 25fda <nrf91_socket_offload_accept+0x62>
   25fc0:	b15d      	cbz	r5, 25fda <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   25fc2:	687b      	ldr	r3, [r7, #4]
   25fc4:	2b02      	cmp	r3, #2
   25fc6:	d115      	bne.n	25ff4 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   25fc8:	2308      	movs	r3, #8
   25fca:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   25fcc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   25fd0:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   25fd2:	2301      	movs	r3, #1
   25fd4:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25fd6:	9b04      	ldr	r3, [sp, #16]
   25fd8:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   25fda:	4630      	mov	r0, r6
   25fdc:	4a0c      	ldr	r2, [pc, #48]	; (26010 <nrf91_socket_offload_accept+0x98>)
   25fde:	f108 0101 	add.w	r1, r8, #1
   25fe2:	f7f9 f961 	bl	1f2a8 <z_finalize_fd>
	return fd;
   25fe6:	e7d6      	b.n	25f96 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   25fe8:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   25fea:	4627      	mov	r7, r4
   25fec:	e7e1      	b.n	25fb2 <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   25fee:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   25ff0:	462f      	mov	r7, r5
   25ff2:	e7de      	b.n	25fb2 <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   25ff4:	2b0a      	cmp	r3, #10
   25ff6:	d106      	bne.n	26006 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   25ff8:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   25ffa:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   25ffc:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   25ffe:	a901      	add	r1, sp, #4
   26000:	f010 f8b2 	bl	36168 <nrf_to_z_ipv6>
   26004:	e7e9      	b.n	25fda <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   26006:	4630      	mov	r0, r6
   26008:	f7f9 f958 	bl	1f2bc <z_free_fd>
   2600c:	e7c1      	b.n	25f92 <nrf91_socket_offload_accept+0x1a>
   2600e:	bf00      	nop
   26010:	000389b0 	.word	0x000389b0

00026014 <nrf91_socket_offload_sendmsg>:
{
   26014:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   26018:	4680      	mov	r8, r0
   2601a:	4691      	mov	r9, r2
	if (msg == NULL) {
   2601c:	460c      	mov	r4, r1
   2601e:	b1f9      	cbz	r1, 26060 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   26020:	2300      	movs	r3, #0
	ssize_t len = 0;
   26022:	461a      	mov	r2, r3
   26024:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   26026:	4283      	cmp	r3, r0
   26028:	d124      	bne.n	26074 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   2602a:	2a80      	cmp	r2, #128	; 0x80
   2602c:	d86d      	bhi.n	2610a <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   2602e:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   26030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26038:	4836      	ldr	r0, [pc, #216]	; (26114 <nrf91_socket_offload_sendmsg+0x100>)
   2603a:	f00b fce1 	bl	31a00 <z_impl_k_mutex_lock>
		len = 0;
   2603e:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   26040:	4e35      	ldr	r6, [pc, #212]	; (26118 <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   26042:	68e3      	ldr	r3, [r4, #12]
   26044:	429d      	cmp	r5, r3
   26046:	d31c      	bcc.n	26082 <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   26048:	2600      	movs	r6, #0
		ret = 0;
   2604a:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   2604c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 26118 <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   26050:	42b7      	cmp	r7, r6
   26052:	dd01      	ble.n	26058 <nrf91_socket_offload_sendmsg+0x44>
   26054:	2d00      	cmp	r5, #0
   26056:	da25      	bge.n	260a4 <nrf91_socket_offload_sendmsg+0x90>
	return z_impl_k_mutex_unlock(mutex);
   26058:	482e      	ldr	r0, [pc, #184]	; (26114 <nrf91_socket_offload_sendmsg+0x100>)
   2605a:	f00b fd49 	bl	31af0 <z_impl_k_mutex_unlock>
		return ret;
   2605e:	e005      	b.n	2606c <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   26060:	f00f f959 	bl	35316 <__errno>
   26064:	2316      	movs	r3, #22
		return -1;
   26066:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		errno = EINVAL;
   2606a:	6003      	str	r3, [r0, #0]
}
   2606c:	4628      	mov	r0, r5
   2606e:	b002      	add	sp, #8
   26070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   26074:	68a1      	ldr	r1, [r4, #8]
   26076:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2607a:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   2607c:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   2607e:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   26080:	e7d1      	b.n	26026 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   26082:	68a1      	ldr	r1, [r4, #8]
   26084:	19f0      	adds	r0, r6, r7
   26086:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   2608a:	685a      	ldr	r2, [r3, #4]
   2608c:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   26090:	f011 f9b7 	bl	37402 <memcpy>
			len += msg->msg_iov[i].iov_len;
   26094:	68a3      	ldr	r3, [r4, #8]
   26096:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   2609a:	4453      	add	r3, sl
   2609c:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   2609e:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   260a0:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   260a2:	e7ce      	b.n	26042 <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   260a4:	6863      	ldr	r3, [r4, #4]
   260a6:	1bba      	subs	r2, r7, r6
   260a8:	9301      	str	r3, [sp, #4]
   260aa:	6823      	ldr	r3, [r4, #0]
   260ac:	eb0a 0106 	add.w	r1, sl, r6
   260b0:	9300      	str	r3, [sp, #0]
   260b2:	4640      	mov	r0, r8
   260b4:	464b      	mov	r3, r9
   260b6:	f010 f9b5 	bl	36424 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   260ba:	1e05      	subs	r5, r0, #0
				offset += ret;
   260bc:	bfc8      	it	gt
   260be:	1976      	addgt	r6, r6, r5
   260c0:	e7c6      	b.n	26050 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   260c2:	68a3      	ldr	r3, [r4, #8]
   260c4:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   260c8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   260cc:	685b      	ldr	r3, [r3, #4]
   260ce:	b133      	cbz	r3, 260de <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   260d0:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   260d2:	68a3      	ldr	r3, [r4, #8]
   260d4:	eb03 020a 	add.w	r2, r3, sl
   260d8:	6852      	ldr	r2, [r2, #4]
   260da:	4297      	cmp	r7, r2
   260dc:	d304      	bcc.n	260e8 <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   260de:	3601      	adds	r6, #1
   260e0:	68e3      	ldr	r3, [r4, #12]
   260e2:	429e      	cmp	r6, r3
   260e4:	d3ed      	bcc.n	260c2 <nrf91_socket_offload_sendmsg+0xae>
   260e6:	e7c1      	b.n	2606c <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   260e8:	f853 100a 	ldr.w	r1, [r3, sl]
   260ec:	6863      	ldr	r3, [r4, #4]
   260ee:	4640      	mov	r0, r8
   260f0:	9301      	str	r3, [sp, #4]
   260f2:	6823      	ldr	r3, [r4, #0]
   260f4:	1bd2      	subs	r2, r2, r7
   260f6:	9300      	str	r3, [sp, #0]
   260f8:	4439      	add	r1, r7
   260fa:	464b      	mov	r3, r9
   260fc:	f010 f992 	bl	36424 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   26100:	1e03      	subs	r3, r0, #0
   26102:	db05      	blt.n	26110 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   26104:	441f      	add	r7, r3
			len += ret;
   26106:	441d      	add	r5, r3
   26108:	e7e3      	b.n	260d2 <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   2610a:	2600      	movs	r6, #0
	len = 0;
   2610c:	4635      	mov	r5, r6
   2610e:	e7e7      	b.n	260e0 <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   26110:	461d      	mov	r5, r3
   26112:	e7ab      	b.n	2606c <nrf91_socket_offload_sendmsg+0x58>
   26114:	20020800 	.word	0x20020800
   26118:	2002c083 	.word	0x2002c083

0002611c <nrf91_socket_create>:
{
   2611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2611e:	4606      	mov	r6, r0
   26120:	460d      	mov	r5, r1
   26122:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   26124:	f7f9 f88e 	bl	1f244 <z_reserve_fd>
	if (fd < 0) {
   26128:	1e04      	subs	r4, r0, #0
   2612a:	db0d      	blt.n	26148 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   2612c:	b2b0      	uxth	r0, r6
   2612e:	f00f ff38 	bl	35fa2 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   26132:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   26136:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   26138:	d109      	bne.n	2614e <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   2613a:	f00f f8ec 	bl	35316 <__errno>
   2613e:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   26140:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   26142:	4620      	mov	r0, r4
   26144:	f7f9 f8ba 	bl	1f2bc <z_free_fd>
		return -1;
   26148:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2614c:	e01b      	b.n	26186 <nrf91_socket_create+0x6a>
	switch (socktype) {
   2614e:	2d03      	cmp	r5, #3
   26150:	d003      	beq.n	2615a <nrf91_socket_create+0x3e>
   26152:	2d04      	cmp	r5, #4
   26154:	bf08      	it	eq
   26156:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   2615a:	4638      	mov	r0, r7
   2615c:	f00f ff3d 	bl	35fda <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   26160:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   26164:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   26166:	d103      	bne.n	26170 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   26168:	f00f f8d5 	bl	35316 <__errno>
   2616c:	237b      	movs	r3, #123	; 0x7b
   2616e:	e7e7      	b.n	26140 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   26170:	4629      	mov	r1, r5
   26172:	4630      	mov	r0, r6
   26174:	f009 f8b2 	bl	2f2dc <nrf_socket>
	if (sd < 0) {
   26178:	1e01      	subs	r1, r0, #0
   2617a:	dbe2      	blt.n	26142 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   2617c:	4620      	mov	r0, r4
   2617e:	4a03      	ldr	r2, [pc, #12]	; (2618c <nrf91_socket_create+0x70>)
   26180:	3101      	adds	r1, #1
   26182:	f7f9 f891 	bl	1f2a8 <z_finalize_fd>
}
   26186:	4620      	mov	r0, r4
   26188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2618a:	bf00      	nop
   2618c:	000389b0 	.word	0x000389b0

00026190 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   26190:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   26192:	f240 2201 	movw	r2, #513	; 0x201
   26196:	2102      	movs	r1, #2
   26198:	2066      	movs	r0, #102	; 0x66
   2619a:	f7fa fe0d 	bl	20db8 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   2619e:	4b05      	ldr	r3, [pc, #20]	; (261b4 <open_socket+0x24>)
   261a0:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   261a2:	3001      	adds	r0, #1
   261a4:	d104      	bne.n	261b0 <open_socket+0x20>
		return -errno;
   261a6:	f00f f8b6 	bl	35316 <__errno>
   261aa:	6800      	ldr	r0, [r0, #0]
   261ac:	4240      	negs	r0, r0
	}

	return 0;
}
   261ae:	bd08      	pop	{r3, pc}
	return 0;
   261b0:	2000      	movs	r0, #0
   261b2:	e7fc      	b.n	261ae <open_socket+0x1e>
   261b4:	20023820 	.word	0x20023820

000261b8 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   261b8:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   261ba:	4d17      	ldr	r5, [pc, #92]	; (26218 <at_cmd_driver_init+0x60>)
{
   261bc:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   261be:	782b      	ldrb	r3, [r5, #0]
   261c0:	bb43      	cbnz	r3, 26214 <at_cmd_driver_init+0x5c>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   261c2:	f7ff ffe5 	bl	26190 <open_socket>
	if (err) {
   261c6:	4604      	mov	r4, r0
   261c8:	b168      	cbz	r0, 261e6 <at_cmd_driver_init+0x2e>
   261ca:	4a14      	ldr	r2, [pc, #80]	; (2621c <at_cmd_driver_init+0x64>)
   261cc:	4b14      	ldr	r3, [pc, #80]	; (26220 <at_cmd_driver_init+0x68>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   261ce:	4601      	mov	r1, r0
   261d0:	1ad2      	subs	r2, r2, r3
   261d2:	08d2      	lsrs	r2, r2, #3
   261d4:	0192      	lsls	r2, r2, #6
   261d6:	4813      	ldr	r0, [pc, #76]	; (26224 <at_cmd_driver_init+0x6c>)
   261d8:	f042 0201 	orr.w	r2, r2, #1
   261dc:	f00e f9a3 	bl	34526 <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   261e0:	4620      	mov	r0, r4
   261e2:	b009      	add	sp, #36	; 0x24
   261e4:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   261e6:	2200      	movs	r2, #0
   261e8:	2300      	movs	r3, #0
   261ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
   261ee:	230a      	movs	r3, #10
   261f0:	e9cd 0000 	strd	r0, r0, [sp]
   261f4:	e9cd 0302 	strd	r0, r3, [sp, #8]
   261f8:	9004      	str	r0, [sp, #16]
   261fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   261fe:	4b0a      	ldr	r3, [pc, #40]	; (26228 <at_cmd_driver_init+0x70>)
   26200:	490a      	ldr	r1, [pc, #40]	; (2622c <at_cmd_driver_init+0x74>)
   26202:	480b      	ldr	r0, [pc, #44]	; (26230 <at_cmd_driver_init+0x78>)
   26204:	f00c f94e 	bl	324a4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   26208:	490a      	ldr	r1, [pc, #40]	; (26234 <at_cmd_driver_init+0x7c>)
   2620a:	f010 fe3a 	bl	36e82 <z_impl_k_thread_name_set>
	initialized = true;
   2620e:	2301      	movs	r3, #1
   26210:	702b      	strb	r3, [r5, #0]
	return 0;
   26212:	e7e5      	b.n	261e0 <at_cmd_driver_init+0x28>
		return 0;
   26214:	2400      	movs	r4, #0
   26216:	e7e3      	b.n	261e0 <at_cmd_driver_init+0x28>
   26218:	2002cb8f 	.word	0x2002cb8f
   2621c:	0003832c 	.word	0x0003832c
   26220:	0003831c 	.word	0x0003831c
   26224:	0003ba1b 	.word	0x0003ba1b
   26228:	00026359 	.word	0x00026359
   2622c:	2002f498 	.word	0x2002f498
   26230:	200217b0 	.word	0x200217b0
   26234:	0003ba3d 	.word	0x0003ba3d

00026238 <complete_cmd>:
{
   26238:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2623a:	4c08      	ldr	r4, [pc, #32]	; (2625c <complete_cmd+0x24>)
   2623c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26244:	4620      	mov	r0, r4
   26246:	f00b fbdb 	bl	31a00 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   2624a:	2200      	movs	r2, #0
   2624c:	4b04      	ldr	r3, [pc, #16]	; (26260 <complete_cmd+0x28>)
   2624e:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   26250:	4620      	mov	r0, r4
}
   26252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26256:	f00b bc4b 	b.w	31af0 <z_impl_k_mutex_unlock>
   2625a:	bf00      	nop
   2625c:	2002079c 	.word	0x2002079c
   26260:	20023824 	.word	0x20023824

00026264 <load_cmd_and_write>:
{
   26264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26268:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   2626a:	4e32      	ldr	r6, [pc, #200]	; (26334 <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2626c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26270:	4637      	mov	r7, r6
   26272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26276:	4830      	ldr	r0, [pc, #192]	; (26338 <load_cmd_and_write+0xd4>)
   26278:	f00b fbc2 	bl	31a00 <z_impl_k_mutex_lock>
   2627c:	4d2f      	ldr	r5, [pc, #188]	; (2633c <load_cmd_and_write+0xd8>)
   2627e:	4b30      	ldr	r3, [pc, #192]	; (26340 <load_cmd_and_write+0xdc>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   26280:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 26354 <load_cmd_and_write+0xf0>
   26284:	1aed      	subs	r5, r5, r3
   26286:	08ed      	lsrs	r5, r5, #3
   26288:	6833      	ldr	r3, [r6, #0]
   2628a:	2b00      	cmp	r3, #0
   2628c:	d14b      	bne.n	26326 <load_cmd_and_write+0xc2>
   2628e:	2200      	movs	r2, #0
   26290:	2300      	movs	r3, #0
   26292:	4631      	mov	r1, r6
   26294:	4640      	mov	r0, r8
   26296:	f00b fb55 	bl	31944 <z_impl_k_msgq_get>
   2629a:	4604      	mov	r4, r0
   2629c:	2800      	cmp	r0, #0
   2629e:	d142      	bne.n	26326 <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   262a0:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   262a2:	4608      	mov	r0, r1
   262a4:	9103      	str	r1, [sp, #12]
   262a6:	f7f2 fee3 	bl	19070 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   262aa:	4b26      	ldr	r3, [pc, #152]	; (26344 <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   262ac:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   262ae:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   262b0:	9903      	ldr	r1, [sp, #12]
   262b2:	4623      	mov	r3, r4
   262b4:	e9cd 4400 	strd	r4, r4, [sp]
   262b8:	9202      	str	r2, [sp, #8]
   262ba:	f00e fd95 	bl	34de8 <z_impl_zsock_sendto>
   262be:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   262c0:	1c48      	adds	r0, r1, #1
   262c2:	9a02      	ldr	r2, [sp, #8]
   262c4:	d126      	bne.n	26314 <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   262c6:	f00f f826 	bl	35316 <__errno>
   262ca:	01ac      	lsls	r4, r5, #6
   262cc:	f044 0401 	orr.w	r4, r4, #1
   262d0:	4622      	mov	r2, r4
   262d2:	6801      	ldr	r1, [r0, #0]
   262d4:	481c      	ldr	r0, [pc, #112]	; (26348 <load_cmd_and_write+0xe4>)
   262d6:	f00e f926 	bl	34526 <log_1>
		return -errno;
   262da:	f00f f81c 	bl	35316 <__errno>
   262de:	6804      	ldr	r4, [r0, #0]
   262e0:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   262e2:	7c3b      	ldrb	r3, [r7, #16]
   262e4:	07da      	lsls	r2, r3, #31
   262e6:	d502      	bpl.n	262ee <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   262e8:	6838      	ldr	r0, [r7, #0]
   262ea:	f011 f84d 	bl	37388 <k_free>
		if (ret != 0) {
   262ee:	b1d4      	cbz	r4, 26326 <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   262f0:	2305      	movs	r3, #5
   262f2:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   262f6:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   262f8:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   262fa:	079b      	lsls	r3, r3, #30
   262fc:	d507      	bpl.n	2630e <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   262fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26306:	4811      	ldr	r0, [pc, #68]	; (2634c <load_cmd_and_write+0xe8>)
   26308:	a904      	add	r1, sp, #16
   2630a:	f00b fac7 	bl	3189c <z_impl_k_msgq_put>
			complete_cmd();
   2630e:	f7ff ff93 	bl	26238 <complete_cmd>
	} while (ret != 0);
   26312:	e7b9      	b.n	26288 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   26314:	428a      	cmp	r2, r1
   26316:	d0e4      	beq.n	262e2 <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   26318:	01ab      	lsls	r3, r5, #6
   2631a:	480d      	ldr	r0, [pc, #52]	; (26350 <load_cmd_and_write+0xec>)
   2631c:	f043 0302 	orr.w	r3, r3, #2
   26320:	f00e f918 	bl	34554 <log_2>
   26324:	e7dd      	b.n	262e2 <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   26326:	4804      	ldr	r0, [pc, #16]	; (26338 <load_cmd_and_write+0xd4>)
   26328:	f00b fbe2 	bl	31af0 <z_impl_k_mutex_unlock>
}
   2632c:	b006      	add	sp, #24
   2632e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26332:	bf00      	nop
   26334:	20023824 	.word	0x20023824
   26338:	2002079c 	.word	0x2002079c
   2633c:	0003832c 	.word	0x0003832c
   26340:	0003831c 	.word	0x0003831c
   26344:	20023820 	.word	0x20023820
   26348:	0003ba52 	.word	0x0003ba52
   2634c:	2002083c 	.word	0x2002083c
   26350:	0003ba75 	.word	0x0003ba75
   26354:	20020814 	.word	0x20020814

00026358 <socket_thread_fn>:
{
   26358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2635c:	f8df 9260 	ldr.w	r9, [pc, #608]	; 265c0 <socket_thread_fn+0x268>
   26360:	4f83      	ldr	r7, [pc, #524]	; (26570 <socket_thread_fn+0x218>)
   26362:	46ca      	mov	sl, r9
   26364:	4b83      	ldr	r3, [pc, #524]	; (26574 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   26366:	4e84      	ldr	r6, [pc, #528]	; (26578 <socket_thread_fn+0x220>)
   26368:	1aff      	subs	r7, r7, r3
   2636a:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   2636c:	f7ff ff7a 	bl	26264 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   26370:	f8d9 0000 	ldr.w	r0, [r9]
   26374:	2500      	movs	r5, #0
   26376:	f640 228c 	movw	r2, #2700	; 0xa8c
   2637a:	462b      	mov	r3, r5
   2637c:	e9cd 5500 	strd	r5, r5, [sp]
   26380:	497d      	ldr	r1, [pc, #500]	; (26578 <socket_thread_fn+0x220>)
   26382:	f00e fd4e 	bl	34e22 <z_impl_zsock_recvfrom>
		ret.code  = 0;
   26386:	4c7d      	ldr	r4, [pc, #500]	; (2657c <socket_thread_fn+0x224>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   26388:	f8df b238 	ldr.w	fp, [pc, #568]	; 265c4 <socket_thread_fn+0x26c>
		if (bytes_read < 0) {
   2638c:	42a8      	cmp	r0, r5
   2638e:	4680      	mov	r8, r0
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   26390:	f8cb 0000 	str.w	r0, [fp]
		ret.code  = 0;
   26394:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   26396:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   26398:	da6a      	bge.n	26470 <socket_thread_fn+0x118>
			if (errno == EHOSTDOWN) {
   2639a:	f00e ffbc 	bl	35316 <__errno>
   2639e:	6803      	ldr	r3, [r0, #0]
   263a0:	2b75      	cmp	r3, #117	; 0x75
   263a2:	d122      	bne.n	263ea <socket_thread_fn+0x92>
   263a4:	2301      	movs	r3, #1
   263a6:	4c76      	ldr	r4, [pc, #472]	; (26580 <socket_thread_fn+0x228>)
   263a8:	e8d4 2fef 	ldaex	r2, [r4]
   263ac:	e8c4 3fe1 	stlex	r1, r3, [r4]
   263b0:	2900      	cmp	r1, #0
   263b2:	d1f9      	bne.n	263a8 <socket_thread_fn+0x50>
				close(common_socket_fd);
   263b4:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   263b8:	f00e fca9 	bl	34d0e <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   263bc:	f7ff f98e 	bl	256dc <bsdlib_shutdown_wait>
   263c0:	e8d4 3fef 	ldaex	r3, [r4]
   263c4:	e8c4 5fe2 	stlex	r2, r5, [r4]
   263c8:	2a00      	cmp	r2, #0
   263ca:	d1f9      	bne.n	263c0 <socket_thread_fn+0x68>
				if (open_socket() != 0) {
   263cc:	f7ff fee0 	bl	26190 <open_socket>
   263d0:	2800      	cmp	r0, #0
   263d2:	d0cb      	beq.n	2636c <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   263d4:	f00e ff9f 	bl	35316 <__errno>
   263d8:	01bc      	lsls	r4, r7, #6
   263da:	f044 0401 	orr.w	r4, r4, #1
   263de:	6801      	ldr	r1, [r0, #0]
   263e0:	4622      	mov	r2, r4
   263e2:	4868      	ldr	r0, [pc, #416]	; (26584 <socket_thread_fn+0x22c>)
   263e4:	f00e f89f 	bl	34526 <log_1>
   263e8:	e7c0      	b.n	2636c <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   263ea:	01bd      	lsls	r5, r7, #6
   263ec:	f8db 1000 	ldr.w	r1, [fp]
   263f0:	4865      	ldr	r0, [pc, #404]	; (26588 <socket_thread_fn+0x230>)
   263f2:	f045 0201 	orr.w	r2, r5, #1
   263f6:	f00e f896 	bl	34526 <log_1>
			if ((close(common_socket_fd) == 0) &&
   263fa:	f8d9 0000 	ldr.w	r0, [r9]
   263fe:	f00e fc86 	bl	34d0e <z_impl_zsock_close>
   26402:	bb28      	cbnz	r0, 26450 <socket_thread_fn+0xf8>
			    (open_socket() == 0)) {
   26404:	f7ff fec4 	bl	26190 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   26408:	bb10      	cbnz	r0, 26450 <socket_thread_fn+0xf8>
				LOG_INF("AT socket recovered");
   2640a:	4860      	ldr	r0, [pc, #384]	; (2658c <socket_thread_fn+0x234>)
   2640c:	f045 0103 	orr.w	r1, r5, #3
   26410:	f00e f87a 	bl	34508 <log_0>
				ret.state = AT_CMD_ERROR_READ;
   26414:	2306      	movs	r3, #6
   26416:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   26418:	f00e ff7d 	bl	35316 <__errno>
   2641c:	6803      	ldr	r3, [r0, #0]
   2641e:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   26420:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   26422:	4b5b      	ldr	r3, [pc, #364]	; (26590 <socket_thread_fn+0x238>)
   26424:	681a      	ldr	r2, [r3, #0]
   26426:	b16a      	cbz	r2, 26444 <socket_thread_fn+0xec>
   26428:	7c1b      	ldrb	r3, [r3, #16]
   2642a:	079b      	lsls	r3, r3, #30
   2642c:	d50a      	bpl.n	26444 <socket_thread_fn+0xec>
		    current_cmd.flags & AT_CMD_SYNC &&
   2642e:	7923      	ldrb	r3, [r4, #4]
   26430:	2b07      	cmp	r3, #7
   26432:	d09b      	beq.n	2636c <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   26434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2643c:	494f      	ldr	r1, [pc, #316]	; (2657c <socket_thread_fn+0x224>)
   2643e:	4855      	ldr	r0, [pc, #340]	; (26594 <socket_thread_fn+0x23c>)
   26440:	f00b fa2c 	bl	3189c <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   26444:	7923      	ldrb	r3, [r4, #4]
   26446:	2b07      	cmp	r3, #7
   26448:	d090      	beq.n	2636c <socket_thread_fn+0x14>
			complete_cmd();
   2644a:	f7ff fef5 	bl	26238 <complete_cmd>
   2644e:	e78d      	b.n	2636c <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   26450:	f00e ff61 	bl	35316 <__errno>
   26454:	f045 0501 	orr.w	r5, r5, #1
   26458:	6801      	ldr	r1, [r0, #0]
   2645a:	462a      	mov	r2, r5
   2645c:	484e      	ldr	r0, [pc, #312]	; (26598 <socket_thread_fn+0x240>)
   2645e:	f00e f862 	bl	34526 <log_1>
			close(common_socket_fd);
   26462:	f8da 0000 	ldr.w	r0, [sl]
}
   26466:	b003      	add	sp, #12
   26468:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2646c:	f00e bc4f 	b.w	34d0e <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   26470:	d10a      	bne.n	26488 <socket_thread_fn+0x130>
			LOG_ERR("AT message empty");
   26472:	01b9      	lsls	r1, r7, #6
   26474:	4849      	ldr	r0, [pc, #292]	; (2659c <socket_thread_fn+0x244>)
   26476:	f041 0101 	orr.w	r1, r1, #1
   2647a:	f00e f845 	bl	34508 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   2647e:	2306      	movs	r3, #6
   26480:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   26482:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   26486:	e7cb      	b.n	26420 <socket_thread_fn+0xc8>
		} else if (buf[bytes_read - 1] != '\0') {
   26488:	1833      	adds	r3, r6, r0
   2648a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2648e:	b153      	cbz	r3, 264a6 <socket_thread_fn+0x14e>
			LOG_ERR("AT message too large for reception buffer or "
   26490:	01b9      	lsls	r1, r7, #6
   26492:	4843      	ldr	r0, [pc, #268]	; (265a0 <socket_thread_fn+0x248>)
   26494:	f041 0101 	orr.w	r1, r1, #1
   26498:	f00e f836 	bl	34508 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   2649c:	2306      	movs	r3, #6
   2649e:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   264a0:	f06f 0368 	mvn.w	r3, #104	; 0x68
   264a4:	e7bc      	b.n	26420 <socket_thread_fn+0xc8>
	ret->state = AT_CMD_NOTIFICATION;
   264a6:	2307      	movs	r3, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   264a8:	1f45      	subs	r5, r0, #5
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   264aa:	483e      	ldr	r0, [pc, #248]	; (265a4 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   264ac:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   264ae:	f7f2 fddf 	bl	19070 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   264b2:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   264b4:	4602      	mov	r2, r0
   264b6:	493b      	ldr	r1, [pc, #236]	; (265a4 <socket_thread_fn+0x24c>)
   264b8:	4628      	mov	r0, r5
   264ba:	f011 f909 	bl	376d0 <strncmp>
		if (match) {
   264be:	b9c0      	cbnz	r0, 264f2 <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   264c0:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   264c2:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   264c4:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   264c6:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   264c8:	3201      	adds	r2, #1
   264ca:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   264cc:	4d30      	ldr	r5, [pc, #192]	; (26590 <socket_thread_fn+0x238>)
   264ce:	682b      	ldr	r3, [r5, #0]
   264d0:	2b00      	cmp	r3, #0
   264d2:	d043      	beq.n	2655c <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   264d4:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   264d6:	2800      	cmp	r0, #0
   264d8:	d040      	beq.n	2655c <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   264da:	7923      	ldrb	r3, [r4, #4]
   264dc:	2b07      	cmp	r3, #7
   264de:	d12e      	bne.n	2653e <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   264e0:	4b31      	ldr	r3, [pc, #196]	; (265a8 <socket_thread_fn+0x250>)
   264e2:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   264e4:	b913      	cbnz	r3, 264ec <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   264e6:	68ab      	ldr	r3, [r5, #8]
   264e8:	2b00      	cmp	r3, #0
   264ea:	d09a      	beq.n	26422 <socket_thread_fn+0xca>
			current_cmd.callback(buf);
   264ec:	4630      	mov	r0, r6
   264ee:	4798      	blx	r3
   264f0:	e797      	b.n	26422 <socket_thread_fn+0xca>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   264f2:	4630      	mov	r0, r6
   264f4:	492d      	ldr	r1, [pc, #180]	; (265ac <socket_thread_fn+0x254>)
   264f6:	f011 f937 	bl	37768 <strstr>
		if (tmpstr) {
   264fa:	4605      	mov	r5, r0
   264fc:	b128      	cbz	r0, 2650a <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   264fe:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   26500:	482b      	ldr	r0, [pc, #172]	; (265b0 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   26502:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   26504:	f010 ff5d 	bl	373c2 <atoi>
   26508:	e7db      	b.n	264c2 <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2650a:	4630      	mov	r0, r6
   2650c:	4929      	ldr	r1, [pc, #164]	; (265b4 <socket_thread_fn+0x25c>)
   2650e:	f011 f92b 	bl	37768 <strstr>
		if (tmpstr) {
   26512:	4605      	mov	r5, r0
   26514:	b108      	cbz	r0, 2651a <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   26516:	2303      	movs	r3, #3
   26518:	e7f2      	b.n	26500 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2651a:	4827      	ldr	r0, [pc, #156]	; (265b8 <socket_thread_fn+0x260>)
   2651c:	f7f2 fda8 	bl	19070 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   26520:	f1a8 0508 	sub.w	r5, r8, #8
   26524:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   26526:	4602      	mov	r2, r0
   26528:	4923      	ldr	r1, [pc, #140]	; (265b8 <socket_thread_fn+0x260>)
   2652a:	4628      	mov	r0, r5
   2652c:	f011 f8d0 	bl	376d0 <strncmp>
		if (match) {
   26530:	b9c0      	cbnz	r0, 26564 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   26532:	2301      	movs	r3, #1
   26534:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   26536:	f06f 0307 	mvn.w	r3, #7
   2653a:	6023      	str	r3, [r4, #0]
			break;
   2653c:	e7c2      	b.n	264c4 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   2653e:	68eb      	ldr	r3, [r5, #12]
   26540:	429a      	cmp	r2, r3
   26542:	d908      	bls.n	26556 <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   26544:	01b9      	lsls	r1, r7, #6
   26546:	481d      	ldr	r0, [pc, #116]	; (265bc <socket_thread_fn+0x264>)
   26548:	f041 0101 	orr.w	r1, r1, #1
   2654c:	f00d ffdc 	bl	34508 <log_0>
				ret.code  = -EMSGSIZE;
   26550:	f06f 0379 	mvn.w	r3, #121	; 0x79
   26554:	e764      	b.n	26420 <socket_thread_fn+0xc8>
   26556:	4631      	mov	r1, r6
   26558:	f010 ff53 	bl	37402 <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   2655c:	7923      	ldrb	r3, [r4, #4]
   2655e:	2b07      	cmp	r3, #7
   26560:	d1c1      	bne.n	264e6 <socket_thread_fn+0x18e>
   26562:	e7bd      	b.n	264e0 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   26564:	4630      	mov	r0, r6
   26566:	f7f2 fd83 	bl	19070 <strlen>
   2656a:	1c42      	adds	r2, r0, #1
   2656c:	e7ae      	b.n	264cc <socket_thread_fn+0x174>
   2656e:	bf00      	nop
   26570:	0003832c 	.word	0x0003832c
   26574:	0003831c 	.word	0x0003831c
   26578:	2002c103 	.word	0x2002c103
   2657c:	2002383c 	.word	0x2002383c
   26580:	20023844 	.word	0x20023844
   26584:	0003baa7 	.word	0x0003baa7
   26588:	0003badb 	.word	0x0003badb
   2658c:	0003bafd 	.word	0x0003bafd
   26590:	20023824 	.word	0x20023824
   26594:	2002083c 	.word	0x2002083c
   26598:	0003bb11 	.word	0x0003bb11
   2659c:	0003bb48 	.word	0x0003bb48
   265a0:	0003bb59 	.word	0x0003bb59
   265a4:	000393cd 	.word	0x000393cd
   265a8:	20023838 	.word	0x20023838
   265ac:	0003bba4 	.word	0x0003bba4
   265b0:	2002c10e 	.word	0x2002c10e
   265b4:	0003bbb0 	.word	0x0003bbb0
   265b8:	000394db 	.word	0x000394db
   265bc:	0003bbbc 	.word	0x0003bbbc
   265c0:	20023820 	.word	0x20023820
   265c4:	2002381c 	.word	0x2002381c

000265c8 <at_cmd_write>:
{
   265c8:	b530      	push	{r4, r5, lr}
   265ca:	461c      	mov	r4, r3
   265cc:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   265ce:	4b32      	ldr	r3, [pc, #200]	; (26698 <at_cmd_write+0xd0>)
   265d0:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   265d4:	2b01      	cmp	r3, #1
   265d6:	d05c      	beq.n	26692 <at_cmd_write+0xca>
	if (cmd == NULL) {
   265d8:	b160      	cbz	r0, 265f4 <at_cmd_write+0x2c>
   265da:	1e45      	subs	r5, r0, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   265dc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   265e0:	b9d3      	cbnz	r3, 26618 <at_cmd_write+0x50>
   265e2:	492e      	ldr	r1, [pc, #184]	; (2669c <at_cmd_write+0xd4>)
   265e4:	4b2e      	ldr	r3, [pc, #184]	; (266a0 <at_cmd_write+0xd8>)
		LOG_ERR("Invalid command");
   265e6:	482f      	ldr	r0, [pc, #188]	; (266a4 <at_cmd_write+0xdc>)
   265e8:	1ac9      	subs	r1, r1, r3
   265ea:	08c9      	lsrs	r1, r1, #3
   265ec:	0189      	lsls	r1, r1, #6
   265ee:	f041 0101 	orr.w	r1, r1, #1
   265f2:	e007      	b.n	26604 <at_cmd_write+0x3c>
   265f4:	4929      	ldr	r1, [pc, #164]	; (2669c <at_cmd_write+0xd4>)
   265f6:	4b2a      	ldr	r3, [pc, #168]	; (266a0 <at_cmd_write+0xd8>)
		LOG_ERR("cmd is NULL");
   265f8:	482b      	ldr	r0, [pc, #172]	; (266a8 <at_cmd_write+0xe0>)
   265fa:	1ac9      	subs	r1, r1, r3
   265fc:	08c9      	lsrs	r1, r1, #3
   265fe:	0189      	lsls	r1, r1, #6
   26600:	f041 0101 	orr.w	r1, r1, #1
   26604:	f00d ff80 	bl	34508 <log_0>
		if (state) {
   26608:	b91c      	cbnz	r4, 26612 <at_cmd_write+0x4a>
		return -EINVAL;
   2660a:	f06f 0015 	mvn.w	r0, #21
}
   2660e:	b009      	add	sp, #36	; 0x24
   26610:	bd30      	pop	{r4, r5, pc}
			*state = AT_CMD_ERROR_QUEUE;
   26612:	2304      	movs	r3, #4
   26614:	7023      	strb	r3, [r4, #0]
   26616:	e7f8      	b.n	2660a <at_cmd_write+0x42>
		if (*c > ' ') {
   26618:	2b20      	cmp	r3, #32
   2661a:	d9df      	bls.n	265dc <at_cmd_write+0x14>
	command.callback = NULL;
   2661c:	2300      	movs	r3, #0
   2661e:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   26620:	2302      	movs	r3, #2
	command.resp = buf;
   26622:	e9cd 0103 	strd	r0, r1, [sp, #12]
	command.resp_size = buf_len;
   26626:	9206      	str	r2, [sp, #24]
	command.flags = AT_CMD_SYNC;
   26628:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   2662c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26634:	481d      	ldr	r0, [pc, #116]	; (266ac <at_cmd_write+0xe4>)
   26636:	f00b f9e3 	bl	31a00 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2663a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2663e:	a903      	add	r1, sp, #12
   26640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26644:	481a      	ldr	r0, [pc, #104]	; (266b0 <at_cmd_write+0xe8>)
   26646:	f00b f929 	bl	3189c <z_impl_k_msgq_put>
   2664a:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   2664c:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   2664e:	b170      	cbz	r0, 2666e <at_cmd_write+0xa6>
   26650:	4a12      	ldr	r2, [pc, #72]	; (2669c <at_cmd_write+0xd4>)
   26652:	4b13      	ldr	r3, [pc, #76]	; (266a0 <at_cmd_write+0xd8>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   26654:	4817      	ldr	r0, [pc, #92]	; (266b4 <at_cmd_write+0xec>)
   26656:	1ad2      	subs	r2, r2, r3
   26658:	08d2      	lsrs	r2, r2, #3
   2665a:	0192      	lsls	r2, r2, #6
   2665c:	f042 0201 	orr.w	r2, r2, #1
   26660:	f00d ff61 	bl	34526 <log_1>
		if (state) {
   26664:	b10c      	cbz	r4, 2666a <at_cmd_write+0xa2>
			*state = AT_CMD_ERROR_QUEUE;
   26666:	2304      	movs	r3, #4
		*state = ret.state;
   26668:	7023      	strb	r3, [r4, #0]
	return ret.code;
   2666a:	9801      	ldr	r0, [sp, #4]
   2666c:	e7cf      	b.n	2660e <at_cmd_write+0x46>
	load_cmd_and_write();
   2666e:	f7ff fdf9 	bl	26264 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   26672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2667a:	a901      	add	r1, sp, #4
   2667c:	480e      	ldr	r0, [pc, #56]	; (266b8 <at_cmd_write+0xf0>)
   2667e:	f00b f961 	bl	31944 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   26682:	480a      	ldr	r0, [pc, #40]	; (266ac <at_cmd_write+0xe4>)
   26684:	f00b fa34 	bl	31af0 <z_impl_k_mutex_unlock>
	if (state) {
   26688:	2c00      	cmp	r4, #0
   2668a:	d0ee      	beq.n	2666a <at_cmd_write+0xa2>
		*state = ret.state;
   2668c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   26690:	e7ea      	b.n	26668 <at_cmd_write+0xa0>
		return -EHOSTDOWN;
   26692:	f06f 0074 	mvn.w	r0, #116	; 0x74
   26696:	e7ba      	b.n	2660e <at_cmd_write+0x46>
   26698:	20023844 	.word	0x20023844
   2669c:	0003832c 	.word	0x0003832c
   266a0:	0003831c 	.word	0x0003831c
   266a4:	0003bbe9 	.word	0x0003bbe9
   266a8:	0003bbdd 	.word	0x0003bbdd
   266ac:	200207d8 	.word	0x200207d8
   266b0:	20020814 	.word	0x20020814
   266b4:	0003bbf9 	.word	0x0003bbf9
   266b8:	2002083c 	.word	0x2002083c

000266bc <at_cmd_set_notification_handler>:
{
   266bc:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   266be:	4c09      	ldr	r4, [pc, #36]	; (266e4 <at_cmd_set_notification_handler+0x28>)
{
   266c0:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   266c2:	6821      	ldr	r1, [r4, #0]
   266c4:	b159      	cbz	r1, 266de <at_cmd_set_notification_handler+0x22>
   266c6:	4281      	cmp	r1, r0
   266c8:	d009      	beq.n	266de <at_cmd_set_notification_handler+0x22>
   266ca:	4a07      	ldr	r2, [pc, #28]	; (266e8 <at_cmd_set_notification_handler+0x2c>)
   266cc:	4b07      	ldr	r3, [pc, #28]	; (266ec <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   266ce:	4808      	ldr	r0, [pc, #32]	; (266f0 <at_cmd_set_notification_handler+0x34>)
   266d0:	1ad2      	subs	r2, r2, r3
   266d2:	08d2      	lsrs	r2, r2, #3
   266d4:	0192      	lsls	r2, r2, #6
   266d6:	f042 0202 	orr.w	r2, r2, #2
   266da:	f00d ff24 	bl	34526 <log_1>
	notification_handler = handler;
   266de:	6025      	str	r5, [r4, #0]
}
   266e0:	bd38      	pop	{r3, r4, r5, pc}
   266e2:	bf00      	nop
   266e4:	20023838 	.word	0x20023838
   266e8:	0003832c 	.word	0x0003832c
   266ec:	0003831c 	.word	0x0003831c
   266f0:	0003bc19 	.word	0x0003bc19

000266f4 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   266f4:	4b0f      	ldr	r3, [pc, #60]	; (26734 <find_node+0x40>)
{
   266f6:	b570      	push	{r4, r5, r6, lr}
   266f8:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   266fa:	6818      	ldr	r0, [r3, #0]
   266fc:	b170      	cbz	r0, 2671c <find_node+0x28>
	return node->next;
   266fe:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26700:	4603      	mov	r3, r0
   26702:	2d00      	cmp	r5, #0
   26704:	4628      	mov	r0, r5
   26706:	bf38      	it	cc
   26708:	2000      	movcc	r0, #0
   2670a:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   2670c:	685e      	ldr	r6, [r3, #4]
   2670e:	428e      	cmp	r6, r1
   26710:	d105      	bne.n	2671e <find_node+0x2a>
   26712:	689e      	ldr	r6, [r3, #8]
   26714:	4296      	cmp	r6, r2
   26716:	d102      	bne.n	2671e <find_node+0x2a>
			*prev_out = prev;
			return curr;
   26718:	4618      	mov	r0, r3
			*prev_out = prev;
   2671a:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   2671c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2671e:	2800      	cmp	r0, #0
   26720:	d0fc      	beq.n	2671c <find_node+0x28>
	return node->next;
   26722:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26724:	461d      	mov	r5, r3
   26726:	2e00      	cmp	r6, #0
   26728:	4603      	mov	r3, r0
   2672a:	4630      	mov	r0, r6
   2672c:	bf38      	it	cc
   2672e:	2000      	movcc	r0, #0
   26730:	e7ec      	b.n	2670c <find_node+0x18>
   26732:	bf00      	nop
   26734:	20023848 	.word	0x20023848

00026738 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   26738:	4a0c      	ldr	r2, [pc, #48]	; (2676c <module_init+0x34>)
{
   2673a:	b508      	push	{r3, lr}
	if (initialized) {
   2673c:	7813      	ldrb	r3, [r2, #0]
   2673e:	b15b      	cbz	r3, 26758 <module_init+0x20>
   26740:	490b      	ldr	r1, [pc, #44]	; (26770 <module_init+0x38>)
   26742:	4b0c      	ldr	r3, [pc, #48]	; (26774 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   26744:	480c      	ldr	r0, [pc, #48]	; (26778 <module_init+0x40>)
   26746:	1ac9      	subs	r1, r1, r3
   26748:	08c9      	lsrs	r1, r1, #3
   2674a:	0189      	lsls	r1, r1, #6
   2674c:	f041 0102 	orr.w	r1, r1, #2
   26750:	f00d feda 	bl	34508 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   26754:	2000      	movs	r0, #0
   26756:	bd08      	pop	{r3, pc}
	initialized = true;
   26758:	2101      	movs	r1, #1
   2675a:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   2675c:	4a07      	ldr	r2, [pc, #28]	; (2677c <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   2675e:	4808      	ldr	r0, [pc, #32]	; (26780 <module_init+0x48>)
	list->tail = NULL;
   26760:	e9c2 3300 	strd	r3, r3, [r2]
   26764:	f7ff ffaa 	bl	266bc <at_cmd_set_notification_handler>
	return 0;
   26768:	e7f4      	b.n	26754 <module_init+0x1c>
   2676a:	bf00      	nop
   2676c:	2002cb90 	.word	0x2002cb90
   26770:	0003833c 	.word	0x0003833c
   26774:	0003831c 	.word	0x0003831c
   26778:	0003bc49 	.word	0x0003bc49
   2677c:	20023848 	.word	0x20023848
   26780:	00026791 	.word	0x00026791

00026784 <k_mutex_unlock.constprop.0>:
   26784:	4801      	ldr	r0, [pc, #4]	; (2678c <k_mutex_unlock.constprop.0+0x8>)
   26786:	f00b b9b3 	b.w	31af0 <z_impl_k_mutex_unlock>
   2678a:	bf00      	nop
   2678c:	200207c4 	.word	0x200207c4

00026790 <notif_dispatch>:
{
   26790:	b538      	push	{r3, r4, r5, lr}
   26792:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   26794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2679c:	480d      	ldr	r0, [pc, #52]	; (267d4 <notif_dispatch+0x44>)
   2679e:	f00b f92f 	bl	31a00 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   267a2:	4b0d      	ldr	r3, [pc, #52]	; (267d8 <notif_dispatch+0x48>)
   267a4:	681b      	ldr	r3, [r3, #0]
   267a6:	b91b      	cbnz	r3, 267b0 <notif_dispatch+0x20>
}
   267a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   267ac:	f7ff bfea 	b.w	26784 <k_mutex_unlock.constprop.0>
	return node->next;
   267b0:	681c      	ldr	r4, [r3, #0]
   267b2:	2c00      	cmp	r4, #0
   267b4:	bf38      	it	cc
   267b6:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   267b8:	4629      	mov	r1, r5
   267ba:	689a      	ldr	r2, [r3, #8]
   267bc:	6858      	ldr	r0, [r3, #4]
   267be:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   267c0:	2c00      	cmp	r4, #0
   267c2:	d0f1      	beq.n	267a8 <notif_dispatch+0x18>
   267c4:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   267c6:	4623      	mov	r3, r4
   267c8:	2a00      	cmp	r2, #0
   267ca:	bf38      	it	cc
   267cc:	2200      	movcc	r2, #0
   267ce:	4614      	mov	r4, r2
   267d0:	e7f2      	b.n	267b8 <notif_dispatch+0x28>
   267d2:	bf00      	nop
   267d4:	200207c4 	.word	0x200207c4
   267d8:	20023848 	.word	0x20023848

000267dc <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   267dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   267de:	4606      	mov	r6, r0
	if (handler == NULL) {
   267e0:	460d      	mov	r5, r1
   267e2:	b979      	cbnz	r1, 26804 <at_notif_register_handler+0x28>
   267e4:	4a1d      	ldr	r2, [pc, #116]	; (2685c <at_notif_register_handler+0x80>)
   267e6:	4b1e      	ldr	r3, [pc, #120]	; (26860 <at_notif_register_handler+0x84>)
   267e8:	1a9b      	subs	r3, r3, r2
   267ea:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   267ec:	019b      	lsls	r3, r3, #6
   267ee:	460a      	mov	r2, r1
   267f0:	f043 0301 	orr.w	r3, r3, #1
   267f4:	4601      	mov	r1, r0
   267f6:	481b      	ldr	r0, [pc, #108]	; (26864 <at_notif_register_handler+0x88>)
   267f8:	f00d feac 	bl	34554 <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   267fc:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   26800:	b002      	add	sp, #8
   26802:	bd70      	pop	{r4, r5, r6, pc}
   26804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2680c:	4816      	ldr	r0, [pc, #88]	; (26868 <at_notif_register_handler+0x8c>)
   2680e:	f00b f8f7 	bl	31a00 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   26812:	462a      	mov	r2, r5
   26814:	4631      	mov	r1, r6
   26816:	a801      	add	r0, sp, #4
   26818:	f7ff ff6c 	bl	266f4 <find_node>
   2681c:	4604      	mov	r4, r0
   2681e:	b118      	cbz	r0, 26828 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   26820:	f7ff ffb0 	bl	26784 <k_mutex_unlock.constprop.0>
		return 0;
   26824:	2000      	movs	r0, #0
   26826:	e7eb      	b.n	26800 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   26828:	200c      	movs	r0, #12
   2682a:	f00c f9a5 	bl	32b78 <k_malloc>
   2682e:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   26830:	b920      	cbnz	r0, 2683c <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   26832:	f7ff ffa7 	bl	26784 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   26836:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2683a:	e7e1      	b.n	26800 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   2683c:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   2683e:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   26840:	4a0a      	ldr	r2, [pc, #40]	; (2686c <at_notif_register_handler+0x90>)
   26842:	6044      	str	r4, [r0, #4]
   26844:	6084      	str	r4, [r0, #8]
	parent->next = child;
   26846:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   26848:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   2684a:	e9c3 6501 	strd	r6, r5, [r3, #4]
   2684e:	b911      	cbnz	r1, 26856 <at_notif_register_handler+0x7a>
	list->head = node;
   26850:	e9c2 3300 	strd	r3, r3, [r2]
}
   26854:	e7e4      	b.n	26820 <at_notif_register_handler+0x44>
	parent->next = child;
   26856:	600b      	str	r3, [r1, #0]
	list->tail = node;
   26858:	6053      	str	r3, [r2, #4]
}
   2685a:	e7e1      	b.n	26820 <at_notif_register_handler+0x44>
   2685c:	0003831c 	.word	0x0003831c
   26860:	0003833c 	.word	0x0003833c
   26864:	0003bc6c 	.word	0x0003bc6c
   26868:	200207c4 	.word	0x200207c4
   2686c:	20023848 	.word	0x20023848

00026870 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   26870:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26872:	4605      	mov	r5, r0
	if (handler == NULL) {
   26874:	460c      	mov	r4, r1
   26876:	b979      	cbnz	r1, 26898 <at_notif_deregister_handler+0x28>
   26878:	4a20      	ldr	r2, [pc, #128]	; (268fc <at_notif_deregister_handler+0x8c>)
   2687a:	4b21      	ldr	r3, [pc, #132]	; (26900 <at_notif_deregister_handler+0x90>)
   2687c:	1a9b      	subs	r3, r3, r2
   2687e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   26880:	019b      	lsls	r3, r3, #6
   26882:	460a      	mov	r2, r1
   26884:	f043 0301 	orr.w	r3, r3, #1
   26888:	4601      	mov	r1, r0
   2688a:	481e      	ldr	r0, [pc, #120]	; (26904 <at_notif_deregister_handler+0x94>)
   2688c:	f00d fe62 	bl	34554 <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   26890:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   26894:	b003      	add	sp, #12
   26896:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   26898:	2300      	movs	r3, #0
   2689a:	9301      	str	r3, [sp, #4]
   2689c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   268a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   268a4:	4818      	ldr	r0, [pc, #96]	; (26908 <at_notif_deregister_handler+0x98>)
   268a6:	f00b f8ab 	bl	31a00 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   268aa:	4622      	mov	r2, r4
   268ac:	4629      	mov	r1, r5
   268ae:	a801      	add	r0, sp, #4
   268b0:	f7ff ff20 	bl	266f4 <find_node>
	if (curr == NULL) {
   268b4:	b968      	cbnz	r0, 268d2 <at_notif_deregister_handler+0x62>
   268b6:	4912      	ldr	r1, [pc, #72]	; (26900 <at_notif_deregister_handler+0x90>)
   268b8:	4b10      	ldr	r3, [pc, #64]	; (268fc <at_notif_deregister_handler+0x8c>)
		LOG_WRN("Handler not registered. Nothing to do");
   268ba:	4814      	ldr	r0, [pc, #80]	; (2690c <at_notif_deregister_handler+0x9c>)
   268bc:	1ac9      	subs	r1, r1, r3
   268be:	08c9      	lsrs	r1, r1, #3
   268c0:	0189      	lsls	r1, r1, #6
   268c2:	f041 0102 	orr.w	r1, r1, #2
   268c6:	f00d fe1f 	bl	34508 <log_0>
	k_mutex_unlock(&list_mtx);
   268ca:	f7ff ff5b 	bl	26784 <k_mutex_unlock.constprop.0>
	return remove_notif_handler(context, handler);
   268ce:	2000      	movs	r0, #0
   268d0:	e7e0      	b.n	26894 <at_notif_deregister_handler+0x24>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   268d2:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   268d4:	6801      	ldr	r1, [r0, #0]
   268d6:	4b0e      	ldr	r3, [pc, #56]	; (26910 <at_notif_deregister_handler+0xa0>)
   268d8:	b94a      	cbnz	r2, 268ee <at_notif_deregister_handler+0x7e>
   268da:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   268dc:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   268de:	4290      	cmp	r0, r2
   268e0:	d100      	bne.n	268e4 <at_notif_deregister_handler+0x74>
	list->tail = node;
   268e2:	6059      	str	r1, [r3, #4]
	parent->next = child;
   268e4:	2300      	movs	r3, #0
   268e6:	6003      	str	r3, [r0, #0]
	k_free(curr);
   268e8:	f010 fd4e 	bl	37388 <k_free>
   268ec:	e7ed      	b.n	268ca <at_notif_deregister_handler+0x5a>
   268ee:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   268f0:	6859      	ldr	r1, [r3, #4]
   268f2:	4288      	cmp	r0, r1
	list->tail = node;
   268f4:	bf08      	it	eq
   268f6:	605a      	streq	r2, [r3, #4]
}
   268f8:	e7f4      	b.n	268e4 <at_notif_deregister_handler+0x74>
   268fa:	bf00      	nop
   268fc:	0003831c 	.word	0x0003831c
   26900:	0003833c 	.word	0x0003833c
   26904:	0003bc6c 	.word	0x0003bc6c
   26908:	200207c4 	.word	0x200207c4
   2690c:	0003bc9d 	.word	0x0003bc9d
   26910:	20023848 	.word	0x20023848

00026914 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   26914:	4b06      	ldr	r3, [pc, #24]	; (26930 <is_valid_notification_char+0x1c>)
   26916:	5cc3      	ldrb	r3, [r0, r3]
   26918:	f003 0303 	and.w	r3, r3, #3
   2691c:	2b02      	cmp	r3, #2
   2691e:	bf08      	it	eq
   26920:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   26922:	3841      	subs	r0, #65	; 0x41
   26924:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   26926:	2819      	cmp	r0, #25
   26928:	bf8c      	ite	hi
   2692a:	2000      	movhi	r0, #0
   2692c:	2001      	movls	r0, #1
   2692e:	4770      	bx	lr
   26930:	0003ca84 	.word	0x0003ca84

00026934 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   26934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   26938:	6805      	ldr	r5, [r0, #0]
{
   2693a:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   2693c:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2693e:	782b      	ldrb	r3, [r5, #0]
{
   26940:	4680      	mov	r8, r0
   26942:	460f      	mov	r7, r1
   26944:	4616      	mov	r6, r2
   26946:	2b00      	cmp	r3, #0
   26948:	f000 80c8 	beq.w	26adc <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   2694c:	4b65      	ldr	r3, [pc, #404]	; (26ae4 <at_parse_process_element+0x1b0>)
   2694e:	781c      	ldrb	r4, [r3, #0]
   26950:	2c06      	cmp	r4, #6
   26952:	d110      	bne.n	26976 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   26954:	1c6b      	adds	r3, r5, #1
   26956:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   26958:	9a00      	ldr	r2, [sp, #0]
   2695a:	7810      	ldrb	r0, [r2, #0]
   2695c:	f7ff ffda 	bl	26914 <is_valid_notification_char>
   26960:	b930      	cbnz	r0, 26970 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   26962:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   26964:	462a      	mov	r2, r5
   26966:	4639      	mov	r1, r7
   26968:	4630      	mov	r0, r6
   2696a:	f00f ff0e 	bl	3678a <at_params_string_put>
   2696e:	e01b      	b.n	269a8 <at_parse_process_element+0x74>
			tmpstr++;
   26970:	3201      	adds	r2, #1
   26972:	9200      	str	r2, [sp, #0]
   26974:	e7f0      	b.n	26958 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   26976:	2c07      	cmp	r4, #7
   26978:	d124      	bne.n	269c4 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   2697a:	4668      	mov	r0, sp
   2697c:	f00f fe3d 	bl	365fa <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   26980:	9a00      	ldr	r2, [sp, #0]
   26982:	7810      	ldrb	r0, [r2, #0]
   26984:	f7ff ffc6 	bl	26914 <is_valid_notification_char>
   26988:	b9a8      	cbnz	r0, 269b6 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   2698a:	1b53      	subs	r3, r2, r5
   2698c:	4639      	mov	r1, r7
   2698e:	462a      	mov	r2, r5
   26990:	4630      	mov	r0, r6
   26992:	f00f fefa 	bl	3678a <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   26996:	9b00      	ldr	r3, [sp, #0]
   26998:	781a      	ldrb	r2, [r3, #0]
   2699a:	2a3d      	cmp	r2, #61	; 0x3d
   2699c:	d10e      	bne.n	269bc <at_parse_process_element+0x88>
   2699e:	785a      	ldrb	r2, [r3, #1]
   269a0:	2a3f      	cmp	r2, #63	; 0x3f
   269a2:	d101      	bne.n	269a8 <at_parse_process_element+0x74>
			tmpstr += 2;
   269a4:	3302      	adds	r3, #2
			tmpstr++;
   269a6:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   269a8:	2000      	movs	r0, #0
	*str = tmpstr;
   269aa:	9b00      	ldr	r3, [sp, #0]
   269ac:	f8c8 3000 	str.w	r3, [r8]
}
   269b0:	b023      	add	sp, #140	; 0x8c
   269b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   269b6:	3201      	adds	r2, #1
   269b8:	9200      	str	r2, [sp, #0]
   269ba:	e7e1      	b.n	26980 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   269bc:	2a3f      	cmp	r2, #63	; 0x3f
   269be:	d1f3      	bne.n	269a8 <at_parse_process_element+0x74>
			tmpstr++;
   269c0:	3301      	adds	r3, #1
   269c2:	e7f0      	b.n	269a6 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   269c4:	2c08      	cmp	r4, #8
   269c6:	d103      	bne.n	269d0 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   269c8:	4610      	mov	r0, r2
   269ca:	f00f feb9 	bl	36740 <at_params_empty_put>
   269ce:	e7eb      	b.n	269a8 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   269d0:	2c02      	cmp	r4, #2
   269d2:	d111      	bne.n	269f8 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   269d4:	9a00      	ldr	r2, [sp, #0]
   269d6:	7811      	ldrb	r1, [r2, #0]
   269d8:	4608      	mov	r0, r1
   269da:	f00f fe05 	bl	365e8 <is_lfcr>
   269de:	b918      	cbnz	r0, 269e8 <at_parse_process_element+0xb4>
   269e0:	b111      	cbz	r1, 269e8 <at_parse_process_element+0xb4>
			tmpstr++;
   269e2:	3201      	adds	r2, #1
   269e4:	9200      	str	r2, [sp, #0]
   269e6:	e7f5      	b.n	269d4 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   269e8:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   269ea:	462a      	mov	r2, r5
   269ec:	4639      	mov	r1, r7
   269ee:	4630      	mov	r0, r6
   269f0:	f00f fecb 	bl	3678a <at_params_string_put>
		tmpstr++;
   269f4:	9b00      	ldr	r3, [sp, #0]
   269f6:	e7e3      	b.n	269c0 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   269f8:	2c03      	cmp	r4, #3
   269fa:	d109      	bne.n	26a10 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   269fc:	9b00      	ldr	r3, [sp, #0]
   269fe:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   26a00:	2a22      	cmp	r2, #34	; 0x22
   26a02:	d003      	beq.n	26a0c <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26a04:	b112      	cbz	r2, 26a0c <at_parse_process_element+0xd8>
			tmpstr++;
   26a06:	3301      	adds	r3, #1
   26a08:	9300      	str	r3, [sp, #0]
   26a0a:	e7f7      	b.n	269fc <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   26a0c:	1b5b      	subs	r3, r3, r5
   26a0e:	e7ec      	b.n	269ea <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   26a10:	2c01      	cmp	r4, #1
   26a12:	d13c      	bne.n	26a8e <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   26a14:	4628      	mov	r0, r5
   26a16:	220a      	movs	r2, #10
   26a18:	a901      	add	r1, sp, #4
   26a1a:	f00c fd9b 	bl	33554 <strtoul>
		tmpstr = next;
   26a1e:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26a20:	4d31      	ldr	r5, [pc, #196]	; (26ae8 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   26a22:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   26a24:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   26a26:	9800      	ldr	r0, [sp, #0]
   26a28:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   26a2a:	2b29      	cmp	r3, #41	; 0x29
   26a2c:	d028      	beq.n	26a80 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26a2e:	b33b      	cbz	r3, 26a80 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26a30:	3b2c      	subs	r3, #44	; 0x2c
   26a32:	b2db      	uxtb	r3, r3
   26a34:	3001      	adds	r0, #1
   26a36:	2b11      	cmp	r3, #17
				tmparray[i++] =
   26a38:	9000      	str	r0, [sp, #0]
   26a3a:	d803      	bhi.n	26a44 <at_parse_process_element+0x110>
   26a3c:	fa25 f303 	lsr.w	r3, r5, r3
   26a40:	07db      	lsls	r3, r3, #31
   26a42:	d408      	bmi.n	26a56 <at_parse_process_element+0x122>
				tmpstr++;
   26a44:	46a1      	mov	r9, r4
   26a46:	e004      	b.n	26a52 <at_parse_process_element+0x11e>
					tmpstr = next;
   26a48:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   26a4a:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   26a4e:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   26a50:	d015      	beq.n	26a7e <at_parse_process_element+0x14a>
				tmpstr++;
   26a52:	464c      	mov	r4, r9
   26a54:	e7e7      	b.n	26a26 <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   26a56:	220a      	movs	r2, #10
   26a58:	a901      	add	r1, sp, #4
   26a5a:	f00c fd7b 	bl	33554 <strtoul>
				tmparray[i++] =
   26a5e:	ab22      	add	r3, sp, #136	; 0x88
   26a60:	f104 0901 	add.w	r9, r4, #1
   26a64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   26a68:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   26a6c:	9800      	ldr	r0, [sp, #0]
   26a6e:	f7f2 faff 	bl	19070 <strlen>
   26a72:	4604      	mov	r4, r0
   26a74:	9801      	ldr	r0, [sp, #4]
   26a76:	f7f2 fafb 	bl	19070 <strlen>
   26a7a:	4284      	cmp	r4, r0
   26a7c:	d1e4      	bne.n	26a48 <at_parse_process_element+0x114>
   26a7e:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   26a80:	4639      	mov	r1, r7
   26a82:	4630      	mov	r0, r6
   26a84:	00a3      	lsls	r3, r4, #2
   26a86:	aa02      	add	r2, sp, #8
   26a88:	f00f fea2 	bl	367d0 <at_params_array_put>
   26a8c:	e7b2      	b.n	269f4 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   26a8e:	2c04      	cmp	r4, #4
   26a90:	d115      	bne.n	26abe <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   26a92:	220a      	movs	r2, #10
   26a94:	4628      	mov	r0, r5
   26a96:	a902      	add	r1, sp, #8
   26a98:	f00c fd5c 	bl	33554 <strtoul>
		tmpstr = next;
   26a9c:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   26a9e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   26aa2:	4602      	mov	r2, r0
		tmpstr = next;
   26aa4:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   26aa6:	da05      	bge.n	26ab4 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   26aa8:	b282      	uxth	r2, r0
   26aaa:	4639      	mov	r1, r7
   26aac:	4630      	mov	r0, r6
   26aae:	f00f fe34 	bl	3671a <at_params_short_put>
   26ab2:	e779      	b.n	269a8 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   26ab4:	4639      	mov	r1, r7
   26ab6:	4630      	mov	r0, r6
   26ab8:	f00f fe54 	bl	36764 <at_params_int_put>
   26abc:	e774      	b.n	269a8 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   26abe:	2c05      	cmp	r4, #5
   26ac0:	f47f af72 	bne.w	269a8 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   26ac4:	4909      	ldr	r1, [pc, #36]	; (26aec <at_parse_process_element+0x1b8>)
   26ac6:	9b00      	ldr	r3, [sp, #0]
   26ac8:	781a      	ldrb	r2, [r3, #0]
   26aca:	5c52      	ldrb	r2, [r2, r1]
   26acc:	f012 0f44 	tst.w	r2, #68	; 0x44
   26ad0:	d101      	bne.n	26ad6 <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   26ad2:	1b5b      	subs	r3, r3, r5
   26ad4:	e746      	b.n	26964 <at_parse_process_element+0x30>
			tmpstr++;
   26ad6:	3301      	adds	r3, #1
   26ad8:	9300      	str	r3, [sp, #0]
   26ada:	e7f4      	b.n	26ac6 <at_parse_process_element+0x192>
		return -1;
   26adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26ae0:	e766      	b.n	269b0 <at_parse_process_element+0x7c>
   26ae2:	bf00      	nop
   26ae4:	2002cb91 	.word	0x2002cb91
   26ae8:	00024001 	.word	0x00024001
   26aec:	0003ca84 	.word	0x0003ca84

00026af0 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   26af0:	b510      	push	{r4, lr}
   26af2:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   26af4:	f7f2 fabc 	bl	19070 <strlen>
   26af8:	2801      	cmp	r0, #1
   26afa:	d922      	bls.n	26b42 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   26afc:	7821      	ldrb	r1, [r4, #0]
   26afe:	4b13      	ldr	r3, [pc, #76]	; (26b4c <is_command+0x5c>)
   26b00:	5cca      	ldrb	r2, [r1, r3]
   26b02:	f002 0203 	and.w	r2, r2, #3
   26b06:	2a02      	cmp	r2, #2
   26b08:	bf08      	it	eq
   26b0a:	3920      	subeq	r1, #32
   26b0c:	2941      	cmp	r1, #65	; 0x41
   26b0e:	461a      	mov	r2, r3
   26b10:	d117      	bne.n	26b42 <is_command+0x52>
   26b12:	7863      	ldrb	r3, [r4, #1]
   26b14:	5cd2      	ldrb	r2, [r2, r3]
   26b16:	f002 0203 	and.w	r2, r2, #3
   26b1a:	2a02      	cmp	r2, #2
   26b1c:	bf08      	it	eq
   26b1e:	3b20      	subeq	r3, #32
   26b20:	2b54      	cmp	r3, #84	; 0x54
   26b22:	d10e      	bne.n	26b42 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26b24:	78a2      	ldrb	r2, [r4, #2]
   26b26:	2a25      	cmp	r2, #37	; 0x25
   26b28:	d00d      	beq.n	26b46 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   26b2a:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   26b2e:	2b23      	cmp	r3, #35	; 0x23
   26b30:	d009      	beq.n	26b46 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   26b32:	4610      	mov	r0, r2
   26b34:	f00f fd58 	bl	365e8 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   26b38:	b910      	cbnz	r0, 26b40 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26b3a:	fab2 f082 	clz	r0, r2
   26b3e:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   26b40:	bd10      	pop	{r4, pc}
		return false;
   26b42:	2000      	movs	r0, #0
   26b44:	e7fc      	b.n	26b40 <is_command+0x50>
		return true;
   26b46:	2001      	movs	r0, #1
   26b48:	e7fa      	b.n	26b40 <is_command+0x50>
   26b4a:	bf00      	nop
   26b4c:	0003ca84 	.word	0x0003ca84

00026b50 <at_parse_detect_type>:
{
   26b50:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   26b52:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   26b54:	2900      	cmp	r1, #0
{
   26b56:	4605      	mov	r5, r0
   26b58:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   26b5a:	d141      	bne.n	26be0 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26b5c:	2a2b      	cmp	r2, #43	; 0x2b
   26b5e:	4e29      	ldr	r6, [pc, #164]	; (26c04 <at_parse_detect_type+0xb4>)
   26b60:	d001      	beq.n	26b66 <at_parse_detect_type+0x16>
   26b62:	2a25      	cmp	r2, #37	; 0x25
   26b64:	d104      	bne.n	26b70 <at_parse_detect_type+0x20>
	state = new_state;
   26b66:	2306      	movs	r3, #6
   26b68:	7033      	strb	r3, [r6, #0]
	return 0;
   26b6a:	2000      	movs	r0, #0
	*str = tmpstr;
   26b6c:	602c      	str	r4, [r5, #0]
}
   26b6e:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   26b70:	4620      	mov	r0, r4
   26b72:	f7ff ffbd 	bl	26af0 <is_command>
   26b76:	b388      	cbz	r0, 26bdc <at_parse_detect_type+0x8c>
	state = new_state;
   26b78:	2307      	movs	r3, #7
   26b7a:	e7f5      	b.n	26b68 <at_parse_detect_type+0x18>
	if (chr == '"') {
   26b7c:	2a22      	cmp	r2, #34	; 0x22
   26b7e:	d006      	beq.n	26b8e <at_parse_detect_type+0x3e>
	if (chr == '(') {
   26b80:	2a28      	cmp	r2, #40	; 0x28
   26b82:	d109      	bne.n	26b98 <at_parse_detect_type+0x48>
   26b84:	2201      	movs	r2, #1
   26b86:	4b1f      	ldr	r3, [pc, #124]	; (26c04 <at_parse_detect_type+0xb4>)
		tmpstr++;
   26b88:	4414      	add	r4, r2
	state = new_state;
   26b8a:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   26b8c:	e7ed      	b.n	26b6a <at_parse_detect_type+0x1a>
	state = new_state;
   26b8e:	2203      	movs	r2, #3
   26b90:	4b1c      	ldr	r3, [pc, #112]	; (26c04 <at_parse_detect_type+0xb4>)
		tmpstr++;
   26b92:	3401      	adds	r4, #1
	state = new_state;
   26b94:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   26b96:	e7e8      	b.n	26b6a <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   26b98:	4610      	mov	r0, r2
   26b9a:	f00f fd25 	bl	365e8 <is_lfcr>
   26b9e:	b170      	cbz	r0, 26bbe <at_parse_detect_type+0x6e>
   26ba0:	4918      	ldr	r1, [pc, #96]	; (26c04 <at_parse_detect_type+0xb4>)
   26ba2:	7808      	ldrb	r0, [r1, #0]
   26ba4:	2804      	cmp	r0, #4
   26ba6:	d108      	bne.n	26bba <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   26ba8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   26bac:	f00f fd1c 	bl	365e8 <is_lfcr>
   26bb0:	2800      	cmp	r0, #0
   26bb2:	d1f9      	bne.n	26ba8 <at_parse_detect_type+0x58>
	state = new_state;
   26bb4:	2305      	movs	r3, #5
   26bb6:	700b      	strb	r3, [r1, #0]
}
   26bb8:	e7d7      	b.n	26b6a <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   26bba:	2808      	cmp	r0, #8
   26bbc:	d0d5      	beq.n	26b6a <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26bbe:	3a2c      	subs	r2, #44	; 0x2c
   26bc0:	b2d2      	uxtb	r2, r2
   26bc2:	2a11      	cmp	r2, #17
   26bc4:	d807      	bhi.n	26bd6 <at_parse_detect_type+0x86>
   26bc6:	4b10      	ldr	r3, [pc, #64]	; (26c08 <at_parse_detect_type+0xb8>)
   26bc8:	fa23 f202 	lsr.w	r2, r3, r2
   26bcc:	07d3      	lsls	r3, r2, #31
   26bce:	d502      	bpl.n	26bd6 <at_parse_detect_type+0x86>
	state = new_state;
   26bd0:	2208      	movs	r2, #8
   26bd2:	4b0c      	ldr	r3, [pc, #48]	; (26c04 <at_parse_detect_type+0xb4>)
   26bd4:	e013      	b.n	26bfe <at_parse_detect_type+0xae>
		return -1;
   26bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26bda:	e7c8      	b.n	26b6e <at_parse_detect_type+0x1e>
	state = new_state;
   26bdc:	2302      	movs	r3, #2
   26bde:	e7c3      	b.n	26b68 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   26be0:	dd03      	ble.n	26bea <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26be2:	2a2b      	cmp	r2, #43	; 0x2b
   26be4:	d0f7      	beq.n	26bd6 <at_parse_detect_type+0x86>
   26be6:	2a25      	cmp	r2, #37	; 0x25
   26be8:	d0f5      	beq.n	26bd6 <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   26bea:	4b08      	ldr	r3, [pc, #32]	; (26c0c <at_parse_detect_type+0xbc>)
   26bec:	5cd3      	ldrb	r3, [r2, r3]
   26bee:	0759      	lsls	r1, r3, #29
   26bf0:	d403      	bmi.n	26bfa <at_parse_detect_type+0xaa>
   26bf2:	2a2d      	cmp	r2, #45	; 0x2d
   26bf4:	d001      	beq.n	26bfa <at_parse_detect_type+0xaa>
   26bf6:	2a2b      	cmp	r2, #43	; 0x2b
   26bf8:	d1c0      	bne.n	26b7c <at_parse_detect_type+0x2c>
	state = new_state;
   26bfa:	2204      	movs	r2, #4
   26bfc:	4b01      	ldr	r3, [pc, #4]	; (26c04 <at_parse_detect_type+0xb4>)
   26bfe:	701a      	strb	r2, [r3, #0]
}
   26c00:	e7b3      	b.n	26b6a <at_parse_detect_type+0x1a>
   26c02:	bf00      	nop
   26c04:	2002cb91 	.word	0x2002cb91
   26c08:	00024001 	.word	0x00024001
   26c0c:	0003ca84 	.word	0x0003ca84

00026c10 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   26c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c14:	4688      	mov	r8, r1
   26c16:	4616      	mov	r6, r2
   26c18:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   26c1a:	4604      	mov	r4, r0
   26c1c:	2800      	cmp	r0, #0
   26c1e:	d07e      	beq.n	26d1e <at_parser_max_params_from_str+0x10e>
   26c20:	2a00      	cmp	r2, #0
   26c22:	d07c      	beq.n	26d1e <at_parser_max_params_from_str+0x10e>
   26c24:	6853      	ldr	r3, [r2, #4]
   26c26:	2b00      	cmp	r3, #0
   26c28:	d079      	beq.n	26d1e <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   26c2a:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   26c2c:	4610      	mov	r0, r2
   26c2e:	f00f fd56 	bl	366de <at_params_list_clear>
	const char *str = *at_params_str;
   26c32:	9401      	str	r4, [sp, #4]
	int index = 0;
   26c34:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   26c36:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   26c38:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 26d28 <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   26c3c:	429f      	cmp	r7, r3
   26c3e:	bf28      	it	cs
   26c40:	461f      	movcs	r7, r3
	state = IDLE;
   26c42:	4b38      	ldr	r3, [pc, #224]	; (26d24 <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26c44:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 26d2c <at_parser_max_params_from_str+0x11c>
   26c48:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   26c4a:	9b01      	ldr	r3, [sp, #4]
   26c4c:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26c4e:	2a00      	cmp	r2, #0
   26c50:	d04b      	beq.n	26cea <at_parser_max_params_from_str+0xda>
   26c52:	42a7      	cmp	r7, r4
   26c54:	d949      	bls.n	26cea <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   26c56:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   26c5a:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   26c5c:	0711      	lsls	r1, r2, #28
			str++;
   26c5e:	bf48      	it	mi
   26c60:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   26c62:	4621      	mov	r1, r4
			str++;
   26c64:	bf48      	it	mi
   26c66:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   26c68:	f7ff ff72 	bl	26b50 <at_parse_detect_type>
   26c6c:	1c42      	adds	r2, r0, #1
   26c6e:	d03c      	beq.n	26cea <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   26c70:	4632      	mov	r2, r6
   26c72:	4621      	mov	r1, r4
   26c74:	a801      	add	r0, sp, #4
   26c76:	f7ff fe5d 	bl	26934 <at_parse_process_element>
   26c7a:	1c43      	adds	r3, r0, #1
   26c7c:	d035      	beq.n	26cea <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   26c7e:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26c80:	781a      	ldrb	r2, [r3, #0]
   26c82:	3a2c      	subs	r2, #44	; 0x2c
   26c84:	b2d2      	uxtb	r2, r2
   26c86:	2a11      	cmp	r2, #17
   26c88:	d81a      	bhi.n	26cc0 <at_parser_max_params_from_str+0xb0>
   26c8a:	fa2a f202 	lsr.w	r2, sl, r2
   26c8e:	07d1      	lsls	r1, r2, #31
   26c90:	d516      	bpl.n	26cc0 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   26c92:	7858      	ldrb	r0, [r3, #1]
   26c94:	f00f fca8 	bl	365e8 <is_lfcr>
   26c98:	b178      	cbz	r0, 26cba <at_parser_max_params_from_str+0xaa>
				index++;
   26c9a:	3401      	adds	r4, #1
				if (index == max_params) {
   26c9c:	42bc      	cmp	r4, r7
   26c9e:	d039      	beq.n	26d14 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   26ca0:	4621      	mov	r1, r4
   26ca2:	a801      	add	r0, sp, #4
   26ca4:	f7ff ff54 	bl	26b50 <at_parse_detect_type>
   26ca8:	1c42      	adds	r2, r0, #1
   26caa:	d01e      	beq.n	26cea <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   26cac:	4632      	mov	r2, r6
   26cae:	4621      	mov	r1, r4
   26cb0:	a801      	add	r0, sp, #4
   26cb2:	f7ff fe3f 	bl	26934 <at_parse_process_element>
   26cb6:	1c43      	adds	r3, r0, #1
   26cb8:	d017      	beq.n	26cea <at_parser_max_params_from_str+0xda>
			str++;
   26cba:	9b01      	ldr	r3, [sp, #4]
   26cbc:	3301      	adds	r3, #1
   26cbe:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   26cc0:	9a01      	ldr	r2, [sp, #4]
   26cc2:	7810      	ldrb	r0, [r2, #0]
   26cc4:	f00f fc90 	bl	365e8 <is_lfcr>
   26cc8:	b1f8      	cbz	r0, 26d0a <at_parser_max_params_from_str+0xfa>
   26cca:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   26ccc:	7811      	ldrb	r1, [r2, #0]
   26cce:	4693      	mov	fp, r2
   26cd0:	4608      	mov	r0, r1
   26cd2:	3201      	adds	r2, #1
   26cd4:	f00f fc88 	bl	365e8 <is_lfcr>
   26cd8:	2800      	cmp	r0, #0
   26cda:	d1f7      	bne.n	26ccc <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26cdc:	b119      	cbz	r1, 26ce6 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26cde:	292b      	cmp	r1, #43	; 0x2b
   26ce0:	d001      	beq.n	26ce6 <at_parser_max_params_from_str+0xd6>
   26ce2:	2925      	cmp	r1, #37	; 0x25
   26ce4:	d111      	bne.n	26d0a <at_parser_max_params_from_str+0xfa>
				str += i;
   26ce6:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   26cea:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   26cec:	b9a5      	cbnz	r5, 26d18 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26cee:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   26cf0:	2a00      	cmp	r2, #0
   26cf2:	bf0c      	ite	eq
   26cf4:	2000      	moveq	r0, #0
   26cf6:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   26cfa:	f1b8 0f00 	cmp.w	r8, #0
   26cfe:	d001      	beq.n	26d04 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   26d00:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   26d04:	b003      	add	sp, #12
   26d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   26d0a:	3401      	adds	r4, #1
			oversized = true;
   26d0c:	42bc      	cmp	r4, r7
   26d0e:	bf08      	it	eq
   26d10:	2501      	moveq	r5, #1
   26d12:	e79a      	b.n	26c4a <at_parser_max_params_from_str+0x3a>
					oversized = true;
   26d14:	4605      	mov	r5, r0
   26d16:	e7e8      	b.n	26cea <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   26d18:	f06f 0006 	mvn.w	r0, #6
   26d1c:	e7ed      	b.n	26cfa <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   26d1e:	f06f 0015 	mvn.w	r0, #21
   26d22:	e7ef      	b.n	26d04 <at_parser_max_params_from_str+0xf4>
   26d24:	2002cb91 	.word	0x2002cb91
   26d28:	0003ca84 	.word	0x0003ca84
   26d2c:	00024001 	.word	0x00024001

00026d30 <lte_lc_power_off>:

	return 0;
}

int lte_lc_power_off(void)
{
   26d30:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   26d32:	2300      	movs	r3, #0
   26d34:	4804      	ldr	r0, [pc, #16]	; (26d48 <lte_lc_power_off+0x18>)
   26d36:	461a      	mov	r2, r3
   26d38:	4619      	mov	r1, r3
   26d3a:	f7ff fc45 	bl	265c8 <at_cmd_write>
   26d3e:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   26d40:	bf18      	it	ne
   26d42:	f06f 0004 	mvnne.w	r0, #4
   26d46:	bd08      	pop	{r3, pc}
   26d48:	0003bd0a 	.word	0x0003bd0a

00026d4c <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   26d4c:	b510      	push	{r4, lr}
   26d4e:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   26d50:	4a09      	ldr	r2, [pc, #36]	; (26d78 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   26d52:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   26d54:	7823      	ldrb	r3, [r4, #0]
   26d56:	2100      	movs	r1, #0
   26d58:	f7ff ff5a 	bl	26c10 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   26d5c:	f110 0f0b 	cmn.w	r0, #11
   26d60:	d000      	beq.n	26d64 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   26d62:	b940      	cbnz	r0, 26d76 <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   26d64:	4804      	ldr	r0, [pc, #16]	; (26d78 <modem_info_parse.isra.0+0x2c>)
   26d66:	f00f fd9e 	bl	368a6 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   26d6a:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   26d6c:	4298      	cmp	r0, r3
   26d6e:	bf94      	ite	ls
   26d70:	2000      	movls	r0, #0
   26d72:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   26d76:	bd10      	pop	{r4, pc}
   26d78:	20023850 	.word	0x20023850

00026d7c <modem_info_type_get>:

enum at_param_type modem_info_type_get(enum modem_info info_type)
{
	if (info_type >= MODEM_INFO_COUNT) {
   26d7c:	2815      	cmp	r0, #21
		return -EINVAL;
	}

	return modem_data[info_type]->data_type;
   26d7e:	bf9d      	ittte	ls
   26d80:	4b02      	ldrls	r3, [pc, #8]	; (26d8c <modem_info_type_get+0x10>)
   26d82:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   26d86:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   26d88:	20ea      	movhi	r0, #234	; 0xea
}
   26d8a:	4770      	bx	lr
   26d8c:	00038ab4 	.word	0x00038ab4

00026d90 <modem_info_short_get>:
}

int modem_info_short_get(enum modem_info info, uint16_t *buf)
{
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   26d90:	2300      	movs	r3, #0
{
   26d92:	b530      	push	{r4, r5, lr}
   26d94:	460d      	mov	r5, r1
   26d96:	b0a1      	sub	sp, #132	; 0x84
   26d98:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   26d9a:	227c      	movs	r2, #124	; 0x7c
   26d9c:	4619      	mov	r1, r3
   26d9e:	a801      	add	r0, sp, #4
   26da0:	9300      	str	r3, [sp, #0]
   26da2:	f010 fb4e 	bl	37442 <memset>
	int cmd_length = 0;

	if (buf == NULL) {
   26da6:	b1e5      	cbz	r5, 26de2 <modem_info_short_get+0x52>
		return -EINVAL;
	}

	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   26da8:	4a11      	ldr	r2, [pc, #68]	; (26df0 <modem_info_short_get+0x60>)
   26daa:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   26dae:	7aa2      	ldrb	r2, [r4, #10]
   26db0:	2a03      	cmp	r2, #3
   26db2:	d016      	beq.n	26de2 <modem_info_short_get+0x52>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   26db4:	2300      	movs	r3, #0
   26db6:	2280      	movs	r2, #128	; 0x80
   26db8:	4669      	mov	r1, sp
   26dba:	6820      	ldr	r0, [r4, #0]
   26dbc:	f7ff fc04 	bl	265c8 <at_cmd_write>
			   recv_buf,
			   CONFIG_MODEM_INFO_BUFFER_SIZE,
			   NULL);

	if (err != 0) {
   26dc0:	b990      	cbnz	r0, 26de8 <modem_info_short_get+0x58>
		return -EIO;
	}

	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   26dc2:	4669      	mov	r1, sp
   26dc4:	f104 0009 	add.w	r0, r4, #9
   26dc8:	f7ff ffc0 	bl	26d4c <modem_info_parse.isra.0>

	if (err) {
   26dcc:	b938      	cbnz	r0, 26dde <modem_info_short_get+0x4e>
		return err;
	}

	err = at_params_short_get(&m_param_list,
   26dce:	462a      	mov	r2, r5
   26dd0:	7a21      	ldrb	r1, [r4, #8]
   26dd2:	4808      	ldr	r0, [pc, #32]	; (26df4 <modem_info_short_get+0x64>)
   26dd4:	f00f fd1f 	bl	36816 <at_params_short_get>

	if (err) {
		return err;
	}

	return sizeof(uint16_t);
   26dd8:	2800      	cmp	r0, #0
   26dda:	bf08      	it	eq
   26ddc:	2002      	moveq	r0, #2
}
   26dde:	b021      	add	sp, #132	; 0x84
   26de0:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   26de2:	f06f 0015 	mvn.w	r0, #21
   26de6:	e7fa      	b.n	26dde <modem_info_short_get+0x4e>
		return -EIO;
   26de8:	f06f 0004 	mvn.w	r0, #4
   26dec:	e7f7      	b.n	26dde <modem_info_short_get+0x4e>
   26dee:	bf00      	nop
   26df0:	00038ab4 	.word	0x00038ab4
   26df4:	20023850 	.word	0x20023850

00026df8 <modem_info_string_get>:

int modem_info_string_get(enum modem_info info, char *buf,
				  const size_t buf_size)
{
   26df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   26dfc:	2500      	movs	r5, #0
{
   26dfe:	460e      	mov	r6, r1
   26e00:	b0a5      	sub	sp, #148	; 0x94
   26e02:	4680      	mov	r8, r0
   26e04:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   26e06:	4629      	mov	r1, r5
   26e08:	227c      	movs	r2, #124	; 0x7c
   26e0a:	a805      	add	r0, sp, #20
   26e0c:	9504      	str	r5, [sp, #16]
   26e0e:	f010 fb18 	bl	37442 <memset>
	/* length of each parsed IP address line */
	size_t ip_str_len = 0;
	/* tracks length of buf when parsing multiple IP addresses */
	size_t out_buf_len = 0;
	/* return value indicating length of the string written to buf */
	size_t len = 0;
   26e12:	9503      	str	r5, [sp, #12]

	if ((buf == NULL) || (buf_size == 0)) {
   26e14:	2e00      	cmp	r6, #0
   26e16:	f000 80e5 	beq.w	26fe4 <modem_info_string_get+0x1ec>
   26e1a:	f1b9 0f00 	cmp.w	r9, #0
   26e1e:	f000 80e1 	beq.w	26fe4 <modem_info_string_get+0x1ec>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   26e22:	4b75      	ldr	r3, [pc, #468]	; (26ff8 <modem_info_string_get+0x200>)
   26e24:	2280      	movs	r2, #128	; 0x80
   26e26:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   26e2a:	a904      	add	r1, sp, #16
   26e2c:	462b      	mov	r3, r5
   26e2e:	f8da 0000 	ldr.w	r0, [sl]
   26e32:	f7ff fbc9 	bl	265c8 <at_cmd_write>
			  NULL);

	/* modem_info does not yet support array objects, so here we handle
	 * the supported bands independently as a string
	 */
	if (info == MODEM_INFO_SUP_BAND) {
   26e36:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   26e3a:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   26e3c:	d10c      	bne.n	26e58 <modem_info_string_get+0x60>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   26e3e:	f10d 0119 	add.w	r1, sp, #25
   26e42:	4630      	mov	r0, r6
   26e44:	f010 fc3c 	bl	376c0 <strcpy>
		strcpy(buf, recv_buf + sizeof("%XCBAND: ") - 1);
		return strlen(buf);
   26e48:	4630      	mov	r0, r6
   26e4a:	f7f2 f911 	bl	19070 <strlen>
   26e4e:	4601      	mov	r1, r0
			len = out_buf_len;
		}
	}

	return len <= 0 ? -ENOTSUP : len;
}
   26e50:	4608      	mov	r0, r1
   26e52:	b025      	add	sp, #148	; 0x94
   26e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   26e58:	f1b8 0f09 	cmp.w	r8, #9
   26e5c:	d038      	beq.n	26ed0 <modem_info_string_get+0xd8>
	if (err != 0) {
   26e5e:	2c00      	cmp	r4, #0
   26e60:	f040 80c3 	bne.w	26fea <modem_info_string_get+0x1f2>
	size_t ip_str_len = 0;
   26e64:	4627      	mov	r7, r4
		err = at_params_string_get(&m_param_list,
   26e66:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 2701c <modem_info_string_get+0x224>
	size_t cmd_rsp_idx = 0;
   26e6a:	9400      	str	r4, [sp, #0]
	if (info == MODEM_INFO_IP_ADDRESS) {
   26e6c:	9a00      	ldr	r2, [sp, #0]
   26e6e:	ab04      	add	r3, sp, #16
   26e70:	f1b8 0f09 	cmp.w	r8, #9
   26e74:	4413      	add	r3, r2
   26e76:	d10f      	bne.n	26e98 <modem_info_string_get+0xa0>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   26e78:	4618      	mov	r0, r3
   26e7a:	4960      	ldr	r1, [pc, #384]	; (26ffc <modem_info_string_get+0x204>)
   26e7c:	9301      	str	r3, [sp, #4]
   26e7e:	f010 fc73 	bl	37768 <strstr>
		if (ip_str_end == NULL) {
   26e82:	2800      	cmp	r0, #0
   26e84:	f000 80b4 	beq.w	26ff0 <modem_info_string_get+0x1f8>
		recv_buf[++ip_str_len] = 0;
   26e88:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   26e8a:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   26e8c:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   26e8e:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   26e90:	1c47      	adds	r7, r0, #1
   26e92:	443a      	add	r2, r7
   26e94:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   26e98:	4619      	mov	r1, r3
   26e9a:	f10a 0009 	add.w	r0, sl, #9
   26e9e:	f7ff ff55 	bl	26d4c <modem_info_parse.isra.0>
	if (err) {
   26ea2:	4601      	mov	r1, r0
   26ea4:	b1b8      	cbz	r0, 26ed6 <modem_info_string_get+0xde>
   26ea6:	4a56      	ldr	r2, [pc, #344]	; (27000 <modem_info_string_get+0x208>)
   26ea8:	4b56      	ldr	r3, [pc, #344]	; (27004 <modem_info_string_get+0x20c>)
		LOG_ERR("Unable to parse data: %d", err);
   26eaa:	9000      	str	r0, [sp, #0]
   26eac:	1ad2      	subs	r2, r2, r3
   26eae:	08d2      	lsrs	r2, r2, #3
   26eb0:	0192      	lsls	r2, r2, #6
   26eb2:	4855      	ldr	r0, [pc, #340]	; (27008 <modem_info_string_get+0x210>)
   26eb4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Unable to obtain short: %d", err);
   26eb8:	f00d fb35 	bl	34526 <log_1>
			return err;
   26ebc:	9900      	ldr	r1, [sp, #0]
   26ebe:	e7c7      	b.n	26e50 <modem_info_string_get+0x58>
			++ip_str_end;
   26ec0:	3001      	adds	r0, #1
			++ip_cnt;
   26ec2:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   26ec4:	4639      	mov	r1, r7
   26ec6:	f010 fc4f 	bl	37768 <strstr>
   26eca:	2800      	cmp	r0, #0
   26ecc:	d1f8      	bne.n	26ec0 <modem_info_string_get+0xc8>
   26ece:	e7c6      	b.n	26e5e <modem_info_string_get+0x66>
   26ed0:	4f4a      	ldr	r7, [pc, #296]	; (26ffc <modem_info_string_get+0x204>)
	char *ip_str_end = recv_buf;
   26ed2:	a804      	add	r0, sp, #16
   26ed4:	e7f6      	b.n	26ec4 <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   26ed6:	f89a 300a 	ldrb.w	r3, [sl, #10]
   26eda:	2b01      	cmp	r3, #1
   26edc:	d11f      	bne.n	26f1e <modem_info_string_get+0x126>
		err = at_params_short_get(&m_param_list,
   26ede:	f89a 1008 	ldrb.w	r1, [sl, #8]
   26ee2:	4658      	mov	r0, fp
   26ee4:	f10d 020a 	add.w	r2, sp, #10
   26ee8:	f00f fc95 	bl	36816 <at_params_short_get>
		if (err) {
   26eec:	4601      	mov	r1, r0
   26eee:	b148      	cbz	r0, 26f04 <modem_info_string_get+0x10c>
   26ef0:	4a43      	ldr	r2, [pc, #268]	; (27000 <modem_info_string_get+0x208>)
   26ef2:	4b44      	ldr	r3, [pc, #272]	; (27004 <modem_info_string_get+0x20c>)
			LOG_ERR("Unable to obtain short: %d", err);
   26ef4:	9000      	str	r0, [sp, #0]
   26ef6:	1ad2      	subs	r2, r2, r3
   26ef8:	08d2      	lsrs	r2, r2, #3
   26efa:	0192      	lsls	r2, r2, #6
   26efc:	4843      	ldr	r0, [pc, #268]	; (2700c <modem_info_string_get+0x214>)
   26efe:	f042 0201 	orr.w	r2, r2, #1
   26f02:	e7d9      	b.n	26eb8 <modem_info_string_get+0xc0>
		len = snprintf(buf, buf_size, "%d", param_value);
   26f04:	4649      	mov	r1, r9
   26f06:	4630      	mov	r0, r6
   26f08:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   26f0c:	4a40      	ldr	r2, [pc, #256]	; (27010 <modem_info_string_get+0x218>)
   26f0e:	f00c f9af 	bl	33270 <sniprintf>
		if ((len <= 0) || (len > buf_size)) {
   26f12:	4548      	cmp	r0, r9
		len = snprintf(buf, buf_size, "%d", param_value);
   26f14:	9003      	str	r0, [sp, #12]
		if ((len <= 0) || (len > buf_size)) {
   26f16:	d915      	bls.n	26f44 <modem_info_string_get+0x14c>
			return -EMSGSIZE;
   26f18:	f06f 0179 	mvn.w	r1, #121	; 0x79
   26f1c:	e798      	b.n	26e50 <modem_info_string_get+0x58>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   26f1e:	2b03      	cmp	r3, #3
   26f20:	d110      	bne.n	26f44 <modem_info_string_get+0x14c>
		len = buf_size - out_buf_len;
   26f22:	eba9 0304 	sub.w	r3, r9, r4
		err = at_params_string_get(&m_param_list,
   26f26:	f89a 1008 	ldrb.w	r1, [sl, #8]
		len = buf_size - out_buf_len;
   26f2a:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   26f2c:	4658      	mov	r0, fp
   26f2e:	ab03      	add	r3, sp, #12
   26f30:	1932      	adds	r2, r6, r4
   26f32:	f00f fc95 	bl	36860 <at_params_string_get>
		if (err != 0) {
   26f36:	4601      	mov	r1, r0
   26f38:	2800      	cmp	r0, #0
   26f3a:	d189      	bne.n	26e50 <modem_info_string_get+0x58>
		} else if (len >= buf_size) {
   26f3c:	9b03      	ldr	r3, [sp, #12]
   26f3e:	454b      	cmp	r3, r9
   26f40:	d2ea      	bcs.n	26f18 <modem_info_string_get+0x120>
		buf[len] = 0;
   26f42:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   26f44:	f1b8 0f0e 	cmp.w	r8, #14
   26f48:	d121      	bne.n	26f8e <modem_info_string_get+0x196>
   26f4a:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   26f4c:	4630      	mov	r0, r6
   26f4e:	f7f2 f88f 	bl	19070 <strlen>
   26f52:	1ca3      	adds	r3, r4, #2
   26f54:	1ba4      	subs	r4, r4, r6
   26f56:	42a0      	cmp	r0, r4
   26f58:	d80f      	bhi.n	26f7a <modem_info_string_get+0x182>
		if ((len == ICCID_LEN) &&
   26f5a:	9b03      	ldr	r3, [sp, #12]
   26f5c:	2b14      	cmp	r3, #20
   26f5e:	d106      	bne.n	26f6e <modem_info_string_get+0x176>
   26f60:	7cf3      	ldrb	r3, [r6, #19]
   26f62:	2b46      	cmp	r3, #70	; 0x46
   26f64:	d103      	bne.n	26f6e <modem_info_string_get+0x176>
			buf[len - 1] = '\0';
   26f66:	2300      	movs	r3, #0
   26f68:	74f3      	strb	r3, [r6, #19]
			--len;
   26f6a:	2313      	movs	r3, #19
   26f6c:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   26f6e:	9903      	ldr	r1, [sp, #12]
   26f70:	2900      	cmp	r1, #0
   26f72:	bf08      	it	eq
   26f74:	f06f 0185 	mvneq.w	r1, #133	; 0x85
   26f78:	e76a      	b.n	26e50 <modem_info_string_get+0x58>
		current_char = buf[i];
   26f7a:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   26f7e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   26f82:	461c      	mov	r4, r3
		buf[i] = next_char;
   26f84:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   26f88:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   26f8c:	e7de      	b.n	26f4c <modem_info_string_get+0x154>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   26f8e:	f1b8 0f09 	cmp.w	r8, #9
   26f92:	d1ec      	bne.n	26f6e <modem_info_string_get+0x176>
   26f94:	2d00      	cmp	r5, #0
   26f96:	ddea      	ble.n	26f6e <modem_info_string_get+0x176>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   26f98:	1933      	adds	r3, r6, r4
   26f9a:	4618      	mov	r0, r3
   26f9c:	491d      	ldr	r1, [pc, #116]	; (27014 <modem_info_string_get+0x21c>)
   26f9e:	9301      	str	r3, [sp, #4]
   26fa0:	f010 fbe2 	bl	37768 <strstr>
		if (ip_v6_str) {
   26fa4:	b130      	cbz	r0, 26fb4 <modem_info_string_get+0x1bc>
			*ip_v6_str = 0;
   26fa6:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   26fa8:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   26faa:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   26fac:	4618      	mov	r0, r3
   26fae:	f7f2 f85f 	bl	19070 <strlen>
   26fb2:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   26fb4:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   26fb6:	2d01      	cmp	r5, #1
		out_buf_len += len;
   26fb8:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   26fba:	d00e      	beq.n	26fda <modem_info_string_get+0x1e2>
			err = snprintf(&buf[out_buf_len],
   26fbc:	eba9 0104 	sub.w	r1, r9, r4
   26fc0:	4a15      	ldr	r2, [pc, #84]	; (27018 <modem_info_string_get+0x220>)
   26fc2:	1930      	adds	r0, r6, r4
   26fc4:	9100      	str	r1, [sp, #0]
   26fc6:	f00c f953 	bl	33270 <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   26fca:	2800      	cmp	r0, #0
   26fcc:	dda4      	ble.n	26f18 <modem_info_string_get+0x120>
   26fce:	9900      	ldr	r1, [sp, #0]
   26fd0:	4281      	cmp	r1, r0
   26fd2:	d3a1      	bcc.n	26f18 <modem_info_string_get+0x120>
			cmd_rsp_idx = ip_str_len + 1;
   26fd4:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   26fd6:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   26fd8:	9300      	str	r3, [sp, #0]
		if (--ip_cnt) {
   26fda:	3d01      	subs	r5, #1
   26fdc:	f47f af46 	bne.w	26e6c <modem_info_string_get+0x74>
			len = out_buf_len;
   26fe0:	9403      	str	r4, [sp, #12]
   26fe2:	e7c4      	b.n	26f6e <modem_info_string_get+0x176>
		return -EINVAL;
   26fe4:	f06f 0115 	mvn.w	r1, #21
   26fe8:	e732      	b.n	26e50 <modem_info_string_get+0x58>
		return -EIO;
   26fea:	f06f 0104 	mvn.w	r1, #4
   26fee:	e72f      	b.n	26e50 <modem_info_string_get+0x58>
			return -EFAULT;
   26ff0:	f06f 010d 	mvn.w	r1, #13
   26ff4:	e72c      	b.n	26e50 <modem_info_string_get+0x58>
   26ff6:	bf00      	nop
   26ff8:	00038ab4 	.word	0x00038ab4
   26ffc:	0003c24e 	.word	0x0003c24e
   27000:	000383bc 	.word	0x000383bc
   27004:	0003831c 	.word	0x0003831c
   27008:	0003be82 	.word	0x0003be82
   2700c:	0003be9b 	.word	0x0003be9b
   27010:	0003be98 	.word	0x0003be98
   27014:	0003a875 	.word	0x0003a875
   27018:	0003beb6 	.word	0x0003beb6
   2701c:	20023850 	.word	0x20023850

00027020 <modem_info_init>:
}

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   27020:	210a      	movs	r1, #10
   27022:	4801      	ldr	r0, [pc, #4]	; (27028 <modem_info_init+0x8>)
   27024:	f00f bb48 	b.w	366b8 <at_params_list_init>
   27028:	20023850 	.word	0x20023850

0002702c <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   2702c:	b538      	push	{r3, r4, r5, lr}
   2702e:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   27030:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   27034:	f7ff fea2 	bl	26d7c <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   27038:	2803      	cmp	r0, #3
   2703a:	d118      	bne.n	2706e <modem_data_get+0x42>
		ret = modem_info_string_get(param->type,
   2703c:	2264      	movs	r2, #100	; 0x64
   2703e:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   27042:	1ca9      	adds	r1, r5, #2
   27044:	f7ff fed8 	bl	26df8 <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   27048:	1e04      	subs	r4, r0, #0
   2704a:	db02      	blt.n	27052 <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   2704c:	2400      	movs	r4, #0
}
   2704e:	4620      	mov	r0, r4
   27050:	bd38      	pop	{r3, r4, r5, pc}
   27052:	4a11      	ldr	r2, [pc, #68]	; (27098 <modem_data_get+0x6c>)
   27054:	4b11      	ldr	r3, [pc, #68]	; (2709c <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   27056:	f895 106c 	ldrb.w	r1, [r5, #108]	; 0x6c
   2705a:	1a9b      	subs	r3, r3, r2
   2705c:	08db      	lsrs	r3, r3, #3
   2705e:	019b      	lsls	r3, r3, #6
   27060:	4622      	mov	r2, r4
   27062:	480f      	ldr	r0, [pc, #60]	; (270a0 <modem_data_get+0x74>)
   27064:	f043 0301 	orr.w	r3, r3, #1
   27068:	f00d fa74 	bl	34554 <log_2>
			return ret;
   2706c:	e7ef      	b.n	2704e <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2706e:	2801      	cmp	r0, #1
   27070:	d1ec      	bne.n	2704c <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   27072:	4629      	mov	r1, r5
   27074:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   27078:	f7ff fe8a 	bl	26d90 <modem_info_short_get>
		if (ret < 0) {
   2707c:	1e04      	subs	r4, r0, #0
   2707e:	dae5      	bge.n	2704c <modem_data_get+0x20>
   27080:	4b05      	ldr	r3, [pc, #20]	; (27098 <modem_data_get+0x6c>)
   27082:	4a06      	ldr	r2, [pc, #24]	; (2709c <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d", ret);
   27084:	4621      	mov	r1, r4
   27086:	1ad2      	subs	r2, r2, r3
   27088:	08d2      	lsrs	r2, r2, #3
   2708a:	0192      	lsls	r2, r2, #6
   2708c:	4805      	ldr	r0, [pc, #20]	; (270a4 <modem_data_get+0x78>)
   2708e:	f042 0201 	orr.w	r2, r2, #1
   27092:	f00d fa48 	bl	34526 <log_1>
			return ret;
   27096:	e7da      	b.n	2704e <modem_data_get+0x22>
   27098:	0003831c 	.word	0x0003831c
   2709c:	000383c4 	.word	0x000383c4
   270a0:	0003beb9 	.word	0x0003beb9
   270a4:	0003bed7 	.word	0x0003bed7

000270a8 <modem_info_params_init>:
	if (modem == NULL) {
   270a8:	2800      	cmp	r0, #0
   270aa:	d046      	beq.n	2713a <modem_info_params_init+0x92>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   270ac:	2301      	movs	r3, #1
   270ae:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   270b2:	2302      	movs	r3, #2
   270b4:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   270b8:	2303      	movs	r3, #3
   270ba:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   270be:	2305      	movs	r3, #5
   270c0:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   270c4:	2306      	movs	r3, #6
   270c6:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   270ca:	2307      	movs	r3, #7
   270cc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   270d0:	2308      	movs	r3, #8
   270d2:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   270d6:	2309      	movs	r3, #9
   270d8:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   270dc:	2304      	movs	r3, #4
   270de:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   270e2:	230f      	movs	r3, #15
   270e4:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   270e8:	2310      	movs	r3, #16
   270ea:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   270ee:	2311      	movs	r3, #17
   270f0:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   270f4:	2314      	movs	r3, #20
   270f6:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   270fa:	2315      	movs	r3, #21
   270fc:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   27100:	230a      	movs	r3, #10
   27102:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   27106:	230e      	movs	r3, #14
   27108:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   2710c:	2312      	movs	r3, #18
   2710e:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   27112:	230d      	movs	r3, #13
   27114:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   27118:	230b      	movs	r3, #11
   2711a:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.imei.type			= MODEM_INFO_IMEI;
   2711e:	2313      	movs	r3, #19
   27120:	f880 38d4 	strb.w	r3, [r0, #2260]	; 0x8d4
	modem->device.board			= CONFIG_BOARD;
   27124:	4b06      	ldr	r3, [pc, #24]	; (27140 <modem_info_params_init+0x98>)
   27126:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   2712a:	4b06      	ldr	r3, [pc, #24]	; (27144 <modem_info_params_init+0x9c>)
   2712c:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   27130:	4b05      	ldr	r3, [pc, #20]	; (27148 <modem_info_params_init+0xa0>)
   27132:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0
	return 0;
   27136:	2000      	movs	r0, #0
   27138:	4770      	bx	lr
		return -EINVAL;
   2713a:	f06f 0015 	mvn.w	r0, #21
}
   2713e:	4770      	bx	lr
   27140:	0003bef2 	.word	0x0003bef2
   27144:	0003bf02 	.word	0x0003bf02
   27148:	0003bf0f 	.word	0x0003bf0f

0002714c <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   2714c:	e92d 4477 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, sl, lr}
	int ret;

	if (modem == NULL) {
   27150:	4604      	mov	r4, r0
   27152:	2800      	cmp	r0, #0
   27154:	f000 80ce 	beq.w	272f4 <modem_info_params_get+0x1a8>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   27158:	f7ff ff68 	bl	2702c <modem_data_get>
   2715c:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   2715e:	f104 0070 	add.w	r0, r4, #112	; 0x70
   27162:	f7ff ff63 	bl	2702c <modem_data_get>
   27166:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   27168:	f504 7044 	add.w	r0, r4, #784	; 0x310
   2716c:	f7ff ff5e 	bl	2702c <modem_data_get>
   27170:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   27172:	f504 7060 	add.w	r0, r4, #896	; 0x380
   27176:	f7ff ff59 	bl	2702c <modem_data_get>
		ret += modem_data_get(&modem->network.current_operator);
   2717a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		ret += modem_data_get(&modem->network.ue_mode);
   2717e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   27180:	4618      	mov	r0, r3
   27182:	9301      	str	r3, [sp, #4]
   27184:	f7ff ff52 	bl	2702c <modem_data_get>
   27188:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   2718a:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   2718e:	f7ff ff4d 	bl	2702c <modem_data_get>
		ret += modem_data_get(&modem->network.area_code);
   27192:	f104 0ae0 	add.w	sl, r4, #224	; 0xe0
		ret += modem_data_get(&modem->network.cellid_hex);
   27196:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   27198:	4650      	mov	r0, sl
   2719a:	f7ff ff47 	bl	2702c <modem_data_get>
   2719e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   271a0:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   271a4:	f7ff ff42 	bl	2702c <modem_data_get>
   271a8:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   271aa:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   271ae:	f7ff ff3d 	bl	2702c <modem_data_get>
   271b2:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   271b4:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   271b8:	f7ff ff38 	bl	2702c <modem_data_get>
   271bc:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   271be:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   271c2:	f7ff ff33 	bl	2702c <modem_data_get>
   271c6:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   271c8:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   271cc:	f7ff ff2e 	bl	2702c <modem_data_get>
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   271d0:	9b01      	ldr	r3, [sp, #4]
			ret += modem_data_get(&modem->network.date_time);
   271d2:	4405      	add	r5, r0
		}

		ret += mcc_mnc_parse(&modem->network.current_operator,
   271d4:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
   271d8:	f504 720c 	add.w	r2, r4, #560	; 0x230
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   271dc:	2b00      	cmp	r3, #0
   271de:	d050      	beq.n	27282 <modem_info_params_get+0x136>
   271e0:	2900      	cmp	r1, #0
   271e2:	d04e      	beq.n	27282 <modem_info_params_get+0x136>
   271e4:	2a00      	cmp	r2, #0
   271e6:	d04c      	beq.n	27282 <modem_info_params_get+0x136>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   271e8:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
	memcpy(mcc->value_string, current_operator->value_string, 3);
   271ec:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   271f0:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   271f4:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   271f8:	220a      	movs	r2, #10
   271fa:	7083      	strb	r3, [r0, #2]
   271fc:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   27200:	2100      	movs	r1, #0
   27202:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   27206:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   2720a:	f204 2632 	addw	r6, r4, #562	; 0x232
   2720e:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   27212:	f00c f91b 	bl	3344c <strtol>
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   27216:	2100      	movs	r1, #0
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   27218:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2721c:	220a      	movs	r2, #10
   2721e:	4630      	mov	r0, r6
   27220:	f00c f914 	bl	3344c <strtol>
	return 0;
   27224:	2100      	movs	r1, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   27226:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2722a:	2210      	movs	r2, #16
		ret += mcc_mnc_parse(&modem->network.current_operator,
   2722c:	440d      	add	r5, r1
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2722e:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   27232:	2100      	movs	r1, #0
   27234:	f00c f90a 	bl	3344c <strtol>
   27238:	f7f1 fa54 	bl	186e4 <__aeabi_i2d>
   2723c:	f504 66c4 	add.w	r6, r4, #1568	; 0x620
   27240:	e9c6 0100 	strd	r0, r1, [r6]
	if (area_code == NULL) {
   27244:	f1ba 0f00 	cmp.w	sl, #0
   27248:	d01e      	beq.n	27288 <modem_info_params_get+0x13c>
	area_code->value_string[4] = '\0';
   2724a:	2600      	movs	r6, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2724c:	2210      	movs	r2, #16
   2724e:	4631      	mov	r1, r6
	area_code->value_string[4] = '\0';
   27250:	f884 60e6 	strb.w	r6, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   27254:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   27258:	f00c f8f8 	bl	3344c <strtol>
   2725c:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   27260:	19a9      	adds	r1, r5, r6
   27262:	d014      	beq.n	2728e <modem_info_params_get+0x142>
   27264:	4a25      	ldr	r2, [pc, #148]	; (272fc <modem_info_params_get+0x1b0>)
   27266:	4b26      	ldr	r3, [pc, #152]	; (27300 <modem_info_params_get+0x1b4>)
			LOG_ERR("Network data not obtained: %d", ret);
   27268:	4826      	ldr	r0, [pc, #152]	; (27304 <modem_info_params_get+0x1b8>)
   2726a:	1ad2      	subs	r2, r2, r3
   2726c:	08d2      	lsrs	r2, r2, #3
   2726e:	0192      	lsls	r2, r2, #6
   27270:	f042 0201 	orr.w	r2, r2, #1
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   27274:	f00d f957 	bl	34526 <log_1>
			return -EAGAIN;
   27278:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   2727c:	b003      	add	sp, #12
   2727e:	e8bd 8470 	ldmia.w	sp!, {r4, r5, r6, sl, pc}
		return -EINVAL;
   27282:	f06f 0115 	mvn.w	r1, #21
   27286:	e7d0      	b.n	2722a <modem_info_params_get+0xde>
		return -EINVAL;
   27288:	f06f 0615 	mvn.w	r6, #21
   2728c:	e7e8      	b.n	27260 <modem_info_params_get+0x114>
		ret = modem_data_get(&modem->sim.uicc);
   2728e:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   27292:	f7ff fecb 	bl	2702c <modem_data_get>
   27296:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   27298:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   2729c:	f7ff fec6 	bl	2702c <modem_data_get>
   272a0:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   272a2:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   272a6:	f7ff fec1 	bl	2702c <modem_data_get>
		if (ret) {
   272aa:	1829      	adds	r1, r5, r0
   272ac:	d008      	beq.n	272c0 <modem_info_params_get+0x174>
   272ae:	4a13      	ldr	r2, [pc, #76]	; (272fc <modem_info_params_get+0x1b0>)
   272b0:	4b13      	ldr	r3, [pc, #76]	; (27300 <modem_info_params_get+0x1b4>)
			LOG_ERR("Sim data not obtained: %d", ret);
   272b2:	4815      	ldr	r0, [pc, #84]	; (27308 <modem_info_params_get+0x1bc>)
   272b4:	1ad2      	subs	r2, r2, r3
   272b6:	08d2      	lsrs	r2, r2, #3
   272b8:	0192      	lsls	r2, r2, #6
   272ba:	f042 0201 	orr.w	r2, r2, #1
   272be:	e7d9      	b.n	27274 <modem_info_params_get+0x128>
		ret = modem_data_get(&modem->device.modem_fw);
   272c0:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   272c4:	f7ff feb2 	bl	2702c <modem_data_get>
   272c8:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   272ca:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   272ce:	f7ff fead 	bl	2702c <modem_data_get>
   272d2:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   272d4:	f604 0068 	addw	r0, r4, #2152	; 0x868
   272d8:	f7ff fea8 	bl	2702c <modem_data_get>
		if (ret) {
   272dc:	1828      	adds	r0, r5, r0
   272de:	d0cd      	beq.n	2727c <modem_info_params_get+0x130>
   272e0:	4a06      	ldr	r2, [pc, #24]	; (272fc <modem_info_params_get+0x1b0>)
   272e2:	4b07      	ldr	r3, [pc, #28]	; (27300 <modem_info_params_get+0x1b4>)
			LOG_ERR("Device data not obtained: %d", ret);
   272e4:	4601      	mov	r1, r0
   272e6:	1ad2      	subs	r2, r2, r3
   272e8:	08d2      	lsrs	r2, r2, #3
   272ea:	0192      	lsls	r2, r2, #6
   272ec:	4807      	ldr	r0, [pc, #28]	; (2730c <modem_info_params_get+0x1c0>)
   272ee:	f042 0201 	orr.w	r2, r2, #1
   272f2:	e7bf      	b.n	27274 <modem_info_params_get+0x128>
		return -EINVAL;
   272f4:	f06f 0015 	mvn.w	r0, #21
   272f8:	e7c0      	b.n	2727c <modem_info_params_get+0x130>
   272fa:	bf00      	nop
   272fc:	000383c4 	.word	0x000383c4
   27300:	0003831c 	.word	0x0003831c
   27304:	0003bf1c 	.word	0x0003bf1c
   27308:	0003bf3a 	.word	0x0003bf3a
   2730c:	0003bf54 	.word	0x0003bf54

00027310 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   27310:	b508      	push	{r3, lr}
	z_impl_log_panic();
   27312:	f7f9 f9fb 	bl	2070c <z_impl_log_panic>
   27316:	4b06      	ldr	r3, [pc, #24]	; (27330 <k_sys_fatal_error_handler+0x20>)
   27318:	4906      	ldr	r1, [pc, #24]	; (27334 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   2731a:	4807      	ldr	r0, [pc, #28]	; (27338 <k_sys_fatal_error_handler+0x28>)
   2731c:	1ac9      	subs	r1, r1, r3
   2731e:	08c9      	lsrs	r1, r1, #3
   27320:	0189      	lsls	r1, r1, #6
   27322:	f041 0101 	orr.w	r1, r1, #1
   27326:	f00d f8ef 	bl	34508 <log_0>
	sys_arch_reboot(0);
   2732a:	2000      	movs	r0, #0
   2732c:	f7fb f83e 	bl	223ac <sys_arch_reboot>

	CODE_UNREACHABLE;
   27330:	0003831c 	.word	0x0003831c
   27334:	0003837c 	.word	0x0003837c
   27338:	0003bf83 	.word	0x0003bf83

0002733c <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   2733c:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   2733e:	4604      	mov	r4, r0
{
   27340:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   27342:	b1f8      	cbz	r0, 27384 <download_client_init+0x48>
   27344:	b1f1      	cbz	r1, 27384 <download_client_init+0x48>
		return -EINVAL;
	}

	client->fd = -1;
   27346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2734a:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   2734c:	f641 1308 	movw	r3, #6408	; 0x1908
   27350:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   27352:	2200      	movs	r2, #0
   27354:	2300      	movs	r3, #0
   27356:	2500      	movs	r5, #0
   27358:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2735c:	230e      	movs	r3, #14
   2735e:	9000      	str	r0, [sp, #0]
   27360:	e9cd 3503 	strd	r3, r5, [sp, #12]
   27364:	f600 1108 	addw	r1, r0, #2312	; 0x908
   27368:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2736c:	e9cd 5501 	strd	r5, r5, [sp, #4]
   27370:	4b06      	ldr	r3, [pc, #24]	; (2738c <download_client_init+0x50>)
   27372:	f500 6004 	add.w	r0, r0, #2112	; 0x840
   27376:	f00b f895 	bl	324a4 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   2737a:	f8c4 0838 	str.w	r0, [r4, #2104]	; 0x838
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   2737e:	4628      	mov	r0, r5
}
   27380:	b009      	add	sp, #36	; 0x24
   27382:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   27384:	f06f 0015 	mvn.w	r0, #21
   27388:	e7fa      	b.n	27380 <download_client_init+0x44>
   2738a:	bf00      	nop
   2738c:	000277e9 	.word	0x000277e9

00027390 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   27390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27394:	4688      	mov	r8, r1
   27396:	4616      	mov	r6, r2
	int err;
	struct sockaddr sa;

	if (client == NULL || host == NULL || config == NULL) {
   27398:	4604      	mov	r4, r0
{
   2739a:	b0c5      	sub	sp, #276	; 0x114
	if (client == NULL || host == NULL || config == NULL) {
   2739c:	2800      	cmp	r0, #0
   2739e:	f000 81cd 	beq.w	2773c <download_client_connect+0x3ac>
   273a2:	2900      	cmp	r1, #0
   273a4:	f000 81ca 	beq.w	2773c <download_client_connect+0x3ac>
   273a8:	2a00      	cmp	r2, #0
   273aa:	f000 81c7 	beq.w	2773c <download_client_connect+0x3ac>
		return -EINVAL;
	}

	if (client->fd != -1) {
   273ae:	6803      	ldr	r3, [r0, #0]
   273b0:	3301      	adds	r3, #1
   273b2:	f040 81c6 	bne.w	27742 <download_client_connect+0x3b2>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   273b6:	6893      	ldr	r3, [r2, #8]
   273b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   273bc:	d90f      	bls.n	273de <download_client_connect+0x4e>
   273be:	4bbb      	ldr	r3, [pc, #748]	; (276ac <download_client_connect+0x31c>)
   273c0:	49bb      	ldr	r1, [pc, #748]	; (276b0 <download_client_connect+0x320>)
		LOG_ERR("The configured fragment size is larger than buffer");
   273c2:	48bc      	ldr	r0, [pc, #752]	; (276b4 <download_client_connect+0x324>)
   273c4:	1ac9      	subs	r1, r1, r3
   273c6:	08c9      	lsrs	r1, r1, #3
   273c8:	0189      	lsls	r1, r1, #6
   273ca:	f041 0101 	orr.w	r1, r1, #1
   273ce:	f00d f89b 	bl	34508 <log_0>
		return -E2BIG;
   273d2:	f06f 0506 	mvn.w	r5, #6
	if (client->fd < 0) {
		return err;
	}

	return 0;
}
   273d6:	4628      	mov	r0, r5
   273d8:	b045      	add	sp, #276	; 0x114
   273da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = host_lookup(host, AF_INET, config->apn, &sa);
   273de:	6855      	ldr	r5, [r2, #4]
	struct addrinfo hints = {
   273e0:	2100      	movs	r1, #0
   273e2:	2250      	movs	r2, #80	; 0x50
   273e4:	a81c      	add	r0, sp, #112	; 0x70
   273e6:	f010 f82c 	bl	37442 <memset>
			} : NULL,
   273ea:	b16d      	cbz	r5, 27408 <download_client_connect+0x78>
			&(struct addrinfo) {
   273ec:	2250      	movs	r2, #80	; 0x50
   273ee:	2100      	movs	r1, #0
   273f0:	a830      	add	r0, sp, #192	; 0xc0
   273f2:	f010 f826 	bl	37442 <memset>
   273f6:	2304      	movs	r3, #4
   273f8:	2266      	movs	r2, #102	; 0x66
   273fa:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
   273fe:	f240 2302 	movw	r3, #514	; 0x202
   27402:	9537      	str	r5, [sp, #220]	; 0xdc
   27404:	9334      	str	r3, [sp, #208]	; 0xd0
			} : NULL,
   27406:	ad30      	add	r5, sp, #192	; 0xc0
	struct addrinfo hints = {
   27408:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   2740a:	2240      	movs	r2, #64	; 0x40
   2740c:	4640      	mov	r0, r8
   2740e:	a90c      	add	r1, sp, #48	; 0x30
	struct addrinfo hints = {
   27410:	951c      	str	r5, [sp, #112]	; 0x70
   27412:	931e      	str	r3, [sp, #120]	; 0x78
	err = url_parse_host(host, hostname, sizeof(hostname));
   27414:	f000 fb54 	bl	27ac0 <url_parse_host>
	if (err) {
   27418:	4605      	mov	r5, r0
   2741a:	2800      	cmp	r0, #0
   2741c:	d1db      	bne.n	273d6 <download_client_connect+0x46>
	return zsock_getaddrinfo(host, service, hints, res);
   2741e:	4601      	mov	r1, r0
   27420:	ab05      	add	r3, sp, #20
   27422:	aa1c      	add	r2, sp, #112	; 0x70
   27424:	a80c      	add	r0, sp, #48	; 0x30
   27426:	f00d fc5f 	bl	34ce8 <zsock_getaddrinfo>
	if (err) {
   2742a:	4605      	mov	r5, r0
   2742c:	b190      	cbz	r0, 27454 <download_client_connect+0xc4>
   2742e:	4b9f      	ldr	r3, [pc, #636]	; (276ac <download_client_connect+0x31c>)
   27430:	4c9f      	ldr	r4, [pc, #636]	; (276b0 <download_client_connect+0x320>)
		LOG_WRN("Failed to resolve hostname %s on %s",
   27432:	a80c      	add	r0, sp, #48	; 0x30
   27434:	1ae4      	subs	r4, r4, r3
   27436:	f7f8 fff1 	bl	2041c <log_strdup>
   2743a:	08e4      	lsrs	r4, r4, #3
   2743c:	01a4      	lsls	r4, r4, #6
   2743e:	f044 0402 	orr.w	r4, r4, #2
   27442:	4601      	mov	r1, r0
   27444:	4623      	mov	r3, r4
   27446:	4a9c      	ldr	r2, [pc, #624]	; (276b8 <download_client_connect+0x328>)
   27448:	489c      	ldr	r0, [pc, #624]	; (276bc <download_client_connect+0x32c>)
   2744a:	f00d f883 	bl	34554 <log_2>
		return -EHOSTUNREACH;
   2744e:	f06f 0575 	mvn.w	r5, #117	; 0x75
   27452:	e7c0      	b.n	273d6 <download_client_connect+0x46>
	*sa = *(ai->ai_addr);
   27454:	f8dd c014 	ldr.w	ip, [sp, #20]
   27458:	aa06      	add	r2, sp, #24
   2745a:	f8dc 3018 	ldr.w	r3, [ip, #24]
   2745e:	f103 0e18 	add.w	lr, r3, #24
   27462:	4617      	mov	r7, r2
   27464:	6818      	ldr	r0, [r3, #0]
   27466:	6859      	ldr	r1, [r3, #4]
   27468:	3308      	adds	r3, #8
   2746a:	c703      	stmia	r7!, {r0, r1}
   2746c:	4573      	cmp	r3, lr
   2746e:	463a      	mov	r2, r7
   27470:	d1f7      	bne.n	27462 <download_client_connect+0xd2>
	zsock_freeaddrinfo(ai);
   27472:	4660      	mov	r0, ip
   27474:	f00d fc3a 	bl	34cec <zsock_freeaddrinfo>
	client->config = *config;
   27478:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2747c:	f604 0318 	addw	r3, r4, #2072	; 0x818
   27480:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = url_parse_proto(host, &dl->proto, &type);
   27484:	4640      	mov	r0, r8
	client->host = host;
   27486:	f8c4 8810 	str.w	r8, [r4, #2064]	; 0x810
	err = url_parse_proto(host, &dl->proto, &type);
   2748a:	aa0c      	add	r2, sp, #48	; 0x30
   2748c:	f604 0124 	addw	r1, r4, #2084	; 0x824
   27490:	f000 fae0 	bl	27a54 <url_parse_proto>
	if (err) {
   27494:	b150      	cbz	r0, 274ac <download_client_connect+0x11c>
		type = SOCK_STREAM;
   27496:	2301      	movs	r3, #1
   27498:	930c      	str	r3, [sp, #48]	; 0x30
		if (dl->config.sec_tag != -1) {
   2749a:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   2749e:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   274a0:	bf14      	ite	ne
   274a2:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   274a6:	2306      	moveq	r3, #6
   274a8:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   274ac:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   274b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   274b4:	2a11      	cmp	r2, #17
   274b6:	f000 813b 	beq.w	27730 <download_client_connect+0x3a0>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   274ba:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   274be:	d115      	bne.n	274ec <download_client_connect+0x15c>
		if (dl->config.sec_tag == -1) {
   274c0:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   274c4:	3301      	adds	r3, #1
   274c6:	d111      	bne.n	274ec <download_client_connect+0x15c>
   274c8:	4b78      	ldr	r3, [pc, #480]	; (276ac <download_client_connect+0x31c>)
   274ca:	4979      	ldr	r1, [pc, #484]	; (276b0 <download_client_connect+0x320>)
			LOG_WRN("No security tag provided for TLS/DTLS");
   274cc:	487c      	ldr	r0, [pc, #496]	; (276c0 <download_client_connect+0x330>)
   274ce:	1ac9      	subs	r1, r1, r3
   274d0:	08c9      	lsrs	r1, r1, #3
   274d2:	0189      	lsls	r1, r1, #6
   274d4:	f041 0102 	orr.w	r1, r1, #2
   274d8:	f00d f816 	bl	34508 <log_0>
			return -EINVAL;
   274dc:	f06f 0715 	mvn.w	r7, #21
	if (client->fd < 0) {
   274e0:	6823      	ldr	r3, [r4, #0]
		return err;
   274e2:	ea35 0523 	bics.w	r5, r5, r3, asr #32
   274e6:	bf28      	it	cs
   274e8:	463d      	movcs	r5, r7
   274ea:	e774      	b.n	273d6 <download_client_connect+0x46>
	err = url_parse_port(host, &port);
   274ec:	4640      	mov	r0, r8
   274ee:	a905      	add	r1, sp, #20
   274f0:	f000 fb10 	bl	27b14 <url_parse_port>
	if (err) {
   274f4:	b148      	cbz	r0, 2750a <download_client_connect+0x17a>
		switch (dl->proto) {
   274f6:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   274fa:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   274fe:	d03a      	beq.n	27576 <download_client_connect+0x1e6>
   27500:	dc32      	bgt.n	27568 <download_client_connect+0x1d8>
   27502:	2b06      	cmp	r3, #6
   27504:	d03c      	beq.n	27580 <download_client_connect+0x1f0>
   27506:	2b11      	cmp	r3, #17
   27508:	d03c      	beq.n	27584 <download_client_connect+0x1f4>
	switch (sa->sa_family) {
   2750a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   2750e:	2801      	cmp	r0, #1
   27510:	d03b      	beq.n	2758a <download_client_connect+0x1fa>
   27512:	2802      	cmp	r0, #2
   27514:	f040 810f 	bne.w	27736 <download_client_connect+0x3a6>
		addrlen = sizeof(struct sockaddr_in6);
   27518:	f04f 0b18 	mov.w	fp, #24
		SIN6(sa)->sin6_port = htons(port);
   2751c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   27520:	0213      	lsls	r3, r2, #8
   27522:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   27526:	f8ad 301a 	strh.w	r3, [sp, #26]
	*fd = socket(sa->sa_family, type, dl->proto);
   2752a:	990c      	ldr	r1, [sp, #48]	; 0x30
   2752c:	f8d4 2824 	ldr.w	r2, [r4, #2084]	; 0x824
	return z_impl_zsock_socket(family, type, proto);
   27530:	f7f9 fc42 	bl	20db8 <z_impl_zsock_socket>
   27534:	4f5e      	ldr	r7, [pc, #376]	; (276b0 <download_client_connect+0x320>)
   27536:	4a5d      	ldr	r2, [pc, #372]	; (276ac <download_client_connect+0x31c>)
	if (*fd < 0) {
   27538:	2800      	cmp	r0, #0
   2753a:	eba7 0702 	sub.w	r7, r7, r2
   2753e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
	*fd = socket(sa->sa_family, type, dl->proto);
   27542:	6020      	str	r0, [r4, #0]
	if (*fd < 0) {
   27544:	9302      	str	r3, [sp, #8]
   27546:	ea4f 1683 	mov.w	r6, r3, lsl #6
   2754a:	da28      	bge.n	2759e <download_client_connect+0x20e>
		LOG_ERR("Failed to create socket, err %d", errno);
   2754c:	f00d fee3 	bl	35316 <__errno>
   27550:	f046 0601 	orr.w	r6, r6, #1
   27554:	6801      	ldr	r1, [r0, #0]
   27556:	4632      	mov	r2, r6
   27558:	485a      	ldr	r0, [pc, #360]	; (276c4 <download_client_connect+0x334>)
   2755a:	f00c ffe4 	bl	34526 <log_1>
		return -errno;
   2755e:	f00d feda 	bl	35316 <__errno>
   27562:	6807      	ldr	r7, [r0, #0]
   27564:	427f      	negs	r7, r7
   27566:	e7bb      	b.n	274e0 <download_client_connect+0x150>
		switch (dl->proto) {
   27568:	f240 1211 	movw	r2, #273	; 0x111
   2756c:	4293      	cmp	r3, r2
   2756e:	d1cc      	bne.n	2750a <download_client_connect+0x17a>
			port = 5684;
   27570:	f241 6334 	movw	r3, #5684	; 0x1634
   27574:	e001      	b.n	2757a <download_client_connect+0x1ea>
			port = 443;
   27576:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   2757a:	f8ad 3014 	strh.w	r3, [sp, #20]
			break;
   2757e:	e7c4      	b.n	2750a <download_client_connect+0x17a>
			port = 80;
   27580:	2350      	movs	r3, #80	; 0x50
   27582:	e7fa      	b.n	2757a <download_client_connect+0x1ea>
			port = 5683;
   27584:	f241 6333 	movw	r3, #5683	; 0x1633
   27588:	e7f7      	b.n	2757a <download_client_connect+0x1ea>
		SIN(sa)->sin_port = htons(port);
   2758a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
		addrlen = sizeof(struct sockaddr_in);
   2758e:	f04f 0b08 	mov.w	fp, #8
		SIN(sa)->sin_port = htons(port);
   27592:	0213      	lsls	r3, r2, #8
   27594:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   27598:	f8ad 301a 	strh.w	r3, [sp, #26]
		break;
   2759c:	e7c5      	b.n	2752a <download_client_connect+0x19a>
	if (dl->config.apn != NULL && strlen(dl->config.apn)) {
   2759e:	f8d4 081c 	ldr.w	r0, [r4, #2076]	; 0x81c
   275a2:	2800      	cmp	r0, #0
   275a4:	d040      	beq.n	27628 <download_client_connect+0x298>
   275a6:	f7f1 fd63 	bl	19070 <strlen>
   275aa:	2800      	cmp	r0, #0
   275ac:	d03c      	beq.n	27628 <download_client_connect+0x298>
		err = socket_apn_set(*fd, dl->config.apn);
   275ae:	f8d4 781c 	ldr.w	r7, [r4, #2076]	; 0x81c
   275b2:	f8d4 9000 	ldr.w	r9, [r4]
	len = strlen(apn);
   275b6:	4638      	mov	r0, r7
   275b8:	f7f1 fd5a 	bl	19070 <strlen>
	if (len >= IFNAMSIZ) {
   275bc:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   275be:	4682      	mov	sl, r0
	if (len >= IFNAMSIZ) {
   275c0:	d90d      	bls.n	275de <download_client_connect+0x24e>
		LOG_ERR("Access point name is too long.");
   275c2:	4841      	ldr	r0, [pc, #260]	; (276c8 <download_client_connect+0x338>)
   275c4:	f046 0101 	orr.w	r1, r6, #1
   275c8:	f00c ff9e 	bl	34508 <log_0>
		return -EINVAL;
   275cc:	f06f 0715 	mvn.w	r7, #21
		close(*fd);
   275d0:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   275d2:	f00d fb9c 	bl	34d0e <z_impl_zsock_close>
		*fd = -1;
   275d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   275da:	6023      	str	r3, [r4, #0]
   275dc:	e780      	b.n	274e0 <download_client_connect+0x150>
	LOG_INF("Setting up APN: %s", log_strdup(apn));
   275de:	f046 0203 	orr.w	r2, r6, #3
   275e2:	4638      	mov	r0, r7
   275e4:	9203      	str	r2, [sp, #12]
   275e6:	f7f8 ff19 	bl	2041c <log_strdup>
   275ea:	9a03      	ldr	r2, [sp, #12]
   275ec:	4601      	mov	r1, r0
   275ee:	4837      	ldr	r0, [pc, #220]	; (276cc <download_client_connect+0x33c>)
   275f0:	f00c ff99 	bl	34526 <log_1>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   275f4:	2219      	movs	r2, #25
   275f6:	463b      	mov	r3, r7
   275f8:	2101      	movs	r1, #1
   275fa:	4648      	mov	r0, r9
   275fc:	f8cd a000 	str.w	sl, [sp]
   27600:	f00d fc4e 	bl	34ea0 <z_impl_zsock_setsockopt>
	if (err) {
   27604:	b180      	cbz	r0, 27628 <download_client_connect+0x298>
		LOG_ERR("Failed to bind socket to network \"%s\", err %d",
   27606:	4638      	mov	r0, r7
   27608:	f7f8 ff08 	bl	2041c <log_strdup>
   2760c:	9002      	str	r0, [sp, #8]
   2760e:	f00d fe82 	bl	35316 <__errno>
   27612:	f046 0601 	orr.w	r6, r6, #1
   27616:	6802      	ldr	r2, [r0, #0]
   27618:	4633      	mov	r3, r6
   2761a:	9902      	ldr	r1, [sp, #8]
   2761c:	482c      	ldr	r0, [pc, #176]	; (276d0 <download_client_connect+0x340>)
   2761e:	f00c ff99 	bl	34554 <log_2>
		return -ENETUNREACH;
   27622:	f06f 0771 	mvn.w	r7, #113	; 0x71
   27626:	e7d3      	b.n	275d0 <download_client_connect+0x240>
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   27628:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   2762c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   27630:	d003      	beq.n	2763a <download_client_connect+0x2aa>
   27632:	f240 1211 	movw	r2, #273	; 0x111
   27636:	4293      	cmp	r3, r2
   27638:	d126      	bne.n	27688 <download_client_connect+0x2f8>
	     && (dl->config.sec_tag != -1)) {
   2763a:	f8d4 9818 	ldr.w	r9, [r4, #2072]	; 0x818
   2763e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   27642:	d021      	beq.n	27688 <download_client_connect+0x2f8>
	verify = REQUIRED;
   27644:	2302      	movs	r3, #2
		err = socket_sectag_set(*fd, dl->config.sec_tag);
   27646:	f8d4 a000 	ldr.w	sl, [r4]
	sec_tag_t sec_tag_list[] = { sec_tag };
   2764a:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
	verify = REQUIRED;
   2764e:	931c      	str	r3, [sp, #112]	; 0x70
   27650:	2304      	movs	r3, #4
   27652:	2205      	movs	r2, #5
   27654:	9300      	str	r3, [sp, #0]
   27656:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2765a:	ab1c      	add	r3, sp, #112	; 0x70
   2765c:	4650      	mov	r0, sl
   2765e:	f00d fc1f 	bl	34ea0 <z_impl_zsock_setsockopt>
	if (err) {
   27662:	9b02      	ldr	r3, [sp, #8]
   27664:	019f      	lsls	r7, r3, #6
   27666:	2800      	cmp	r0, #0
   27668:	d038      	beq.n	276dc <download_client_connect+0x34c>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   2766a:	f00d fe54 	bl	35316 <__errno>
   2766e:	f047 0701 	orr.w	r7, r7, #1
   27672:	463a      	mov	r2, r7
   27674:	6801      	ldr	r1, [r0, #0]
   27676:	4817      	ldr	r0, [pc, #92]	; (276d4 <download_client_connect+0x344>)
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   27678:	f00c ff55 	bl	34526 <log_1>
		return -errno;
   2767c:	f00d fe4b 	bl	35316 <__errno>
   27680:	6807      	ldr	r7, [r0, #0]
   27682:	427f      	negs	r7, r7
		if (err) {
   27684:	2f00      	cmp	r7, #0
   27686:	d1a3      	bne.n	275d0 <download_client_connect+0x240>
	LOG_INF("Connecting to %s", log_strdup(host));
   27688:	4640      	mov	r0, r8
   2768a:	f7f8 fec7 	bl	2041c <log_strdup>
   2768e:	f046 0703 	orr.w	r7, r6, #3
   27692:	4601      	mov	r1, r0
   27694:	463a      	mov	r2, r7
   27696:	4810      	ldr	r0, [pc, #64]	; (276d8 <download_client_connect+0x348>)
   27698:	f00c ff45 	bl	34526 <log_1>
	err = connect(*fd, sa, addrlen);
   2769c:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   2769e:	465a      	mov	r2, fp
   276a0:	a906      	add	r1, sp, #24
   276a2:	f00d fb61 	bl	34d68 <z_impl_zsock_connect>
	if (err) {
   276a6:	bb90      	cbnz	r0, 2770e <download_client_connect+0x37e>
			return -EINVAL;
   276a8:	2700      	movs	r7, #0
   276aa:	e719      	b.n	274e0 <download_client_connect+0x150>
   276ac:	0003831c 	.word	0x0003831c
   276b0:	00038374 	.word	0x00038374
   276b4:	0003bfa0 	.word	0x0003bfa0
   276b8:	0003a362 	.word	0x0003a362
   276bc:	0003a36c 	.word	0x0003a36c
   276c0:	0003bfd3 	.word	0x0003bfd3
   276c4:	0003bff9 	.word	0x0003bff9
   276c8:	0003c019 	.word	0x0003c019
   276cc:	0003c038 	.word	0x0003c038
   276d0:	0003c04b 	.word	0x0003c04b
   276d4:	0003a3eb 	.word	0x0003a3eb
   276d8:	0003c0ca 	.word	0x0003c0ca
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   276dc:	4649      	mov	r1, r9
   276de:	481a      	ldr	r0, [pc, #104]	; (27748 <download_client_connect+0x3b8>)
   276e0:	f047 0203 	orr.w	r2, r7, #3
   276e4:	f00c ff1f 	bl	34526 <log_1>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   276e8:	2304      	movs	r3, #4
   276ea:	2201      	movs	r2, #1
   276ec:	9300      	str	r3, [sp, #0]
   276ee:	f44f 718d 	mov.w	r1, #282	; 0x11a
   276f2:	4650      	mov	r0, sl
   276f4:	ab30      	add	r3, sp, #192	; 0xc0
   276f6:	f00d fbd3 	bl	34ea0 <z_impl_zsock_setsockopt>
	if (err) {
   276fa:	2800      	cmp	r0, #0
   276fc:	d0c4      	beq.n	27688 <download_client_connect+0x2f8>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   276fe:	f00d fe0a 	bl	35316 <__errno>
   27702:	f047 0701 	orr.w	r7, r7, #1
   27706:	6801      	ldr	r1, [r0, #0]
   27708:	463a      	mov	r2, r7
   2770a:	4810      	ldr	r0, [pc, #64]	; (2774c <download_client_connect+0x3bc>)
   2770c:	e7b4      	b.n	27678 <download_client_connect+0x2e8>
		LOG_ERR("Unable to connect, errno %d", errno);
   2770e:	f00d fe02 	bl	35316 <__errno>
   27712:	f046 0601 	orr.w	r6, r6, #1
   27716:	6801      	ldr	r1, [r0, #0]
   27718:	4632      	mov	r2, r6
   2771a:	480d      	ldr	r0, [pc, #52]	; (27750 <download_client_connect+0x3c0>)
   2771c:	f00c ff03 	bl	34526 <log_1>
		err = -errno;
   27720:	f00d fdf9 	bl	35316 <__errno>
   27724:	6803      	ldr	r3, [r0, #0]
   27726:	425f      	negs	r7, r3
	if (err) {
   27728:	2b00      	cmp	r3, #0
   2772a:	f47f af51 	bne.w	275d0 <download_client_connect+0x240>
   2772e:	e7bb      	b.n	276a8 <download_client_connect+0x318>
			return -EPROTONOSUPPORT;
   27730:	f06f 077a 	mvn.w	r7, #122	; 0x7a
   27734:	e6d4      	b.n	274e0 <download_client_connect+0x150>
	switch (sa->sa_family) {
   27736:	f06f 0769 	mvn.w	r7, #105	; 0x69
   2773a:	e6d1      	b.n	274e0 <download_client_connect+0x150>
		return -EINVAL;
   2773c:	f06f 0515 	mvn.w	r5, #21
   27740:	e649      	b.n	273d6 <download_client_connect+0x46>
		return 0;
   27742:	2500      	movs	r5, #0
   27744:	e647      	b.n	273d6 <download_client_connect+0x46>
   27746:	bf00      	nop
   27748:	0003c079 	.word	0x0003c079
   2774c:	0003c09c 	.word	0x0003c09c
   27750:	0003a48c 	.word	0x0003a48c

00027754 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   27754:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   27756:	4604      	mov	r4, r0
   27758:	b1e0      	cbz	r0, 27794 <download_client_disconnect+0x40>
   2775a:	6800      	ldr	r0, [r0, #0]
   2775c:	2800      	cmp	r0, #0
   2775e:	db19      	blt.n	27794 <download_client_disconnect+0x40>
	return z_impl_zsock_close(sock);
   27760:	f00d fad5 	bl	34d0e <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   27764:	b190      	cbz	r0, 2778c <download_client_disconnect+0x38>
   27766:	4a0d      	ldr	r2, [pc, #52]	; (2779c <download_client_disconnect+0x48>)
   27768:	4c0d      	ldr	r4, [pc, #52]	; (277a0 <download_client_disconnect+0x4c>)
   2776a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Failed to close socket, errno %d", errno);
   2776c:	f00d fdd3 	bl	35316 <__errno>
   27770:	08e4      	lsrs	r4, r4, #3
   27772:	01a4      	lsls	r4, r4, #6
   27774:	f044 0401 	orr.w	r4, r4, #1
   27778:	6801      	ldr	r1, [r0, #0]
   2777a:	4622      	mov	r2, r4
   2777c:	4809      	ldr	r0, [pc, #36]	; (277a4 <download_client_disconnect+0x50>)
   2777e:	f00c fed2 	bl	34526 <log_1>
		return -errno;
   27782:	f00d fdc8 	bl	35316 <__errno>
   27786:	6800      	ldr	r0, [r0, #0]
   27788:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   2778a:	bd10      	pop	{r4, pc}
	client->fd = -1;
   2778c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27790:	6023      	str	r3, [r4, #0]
	return 0;
   27792:	e7fa      	b.n	2778a <download_client_disconnect+0x36>
		return -EINVAL;
   27794:	f06f 0015 	mvn.w	r0, #21
   27798:	e7f7      	b.n	2778a <download_client_disconnect+0x36>
   2779a:	bf00      	nop
   2779c:	0003831c 	.word	0x0003831c
   277a0:	00038374 	.word	0x00038374
   277a4:	0003c0db 	.word	0x0003c0db

000277a8 <reconnect>:
{
   277a8:	b510      	push	{r4, lr}
   277aa:	4604      	mov	r4, r0
   277ac:	4b0b      	ldr	r3, [pc, #44]	; (277dc <reconnect+0x34>)
   277ae:	490c      	ldr	r1, [pc, #48]	; (277e0 <reconnect+0x38>)
	LOG_INF("Reconnecting..");
   277b0:	480c      	ldr	r0, [pc, #48]	; (277e4 <reconnect+0x3c>)
   277b2:	1ac9      	subs	r1, r1, r3
   277b4:	08c9      	lsrs	r1, r1, #3
   277b6:	0189      	lsls	r1, r1, #6
   277b8:	f041 0103 	orr.w	r1, r1, #3
   277bc:	f00c fea4 	bl	34508 <log_0>
	err = download_client_disconnect(dl);
   277c0:	4620      	mov	r0, r4
   277c2:	f7ff ffc7 	bl	27754 <download_client_disconnect>
	if (err) {
   277c6:	b940      	cbnz	r0, 277da <reconnect+0x32>
	err = download_client_connect(dl, dl->host, &dl->config);
   277c8:	4620      	mov	r0, r4
   277ca:	f8d4 1810 	ldr.w	r1, [r4, #2064]	; 0x810
   277ce:	f604 0218 	addw	r2, r4, #2072	; 0x818
}
   277d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   277d6:	f7ff bddb 	b.w	27390 <download_client_connect>
}
   277da:	bd10      	pop	{r4, pc}
   277dc:	0003831c 	.word	0x0003831c
   277e0:	00038374 	.word	0x00038374
   277e4:	0003c0fc 	.word	0x0003c0fc

000277e8 <download_thread>:
{
   277e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   277ec:	4605      	mov	r5, r0
	int rc = 0;
   277ee:	2400      	movs	r4, #0
   277f0:	4e72      	ldr	r6, [pc, #456]	; (279bc <download_thread+0x1d4>)
   277f2:	4b73      	ldr	r3, [pc, #460]	; (279c0 <download_thread+0x1d8>)
				rc = error_evt_send(dl, ECONNRESET);
   277f4:	f500 57c8 	add.w	r7, r0, #6400	; 0x1900
   277f8:	1af6      	subs	r6, r6, r3
{
   277fa:	b086      	sub	sp, #24
   277fc:	08f6      	lsrs	r6, r6, #3
				rc = error_evt_send(dl, ECONNRESET);
   277fe:	3708      	adds	r7, #8
	k_thread_suspend(dl->tid);
   27800:	f8d5 0838 	ldr.w	r0, [r5, #2104]	; 0x838
	z_impl_k_thread_suspend(thread);
   27804:	f00a fba2 	bl	31f4c <z_impl_k_thread_suspend>
		if (sizeof(dl->buf) - dl->offset == 0) {
   27808:	f8d5 1804 	ldr.w	r1, [r5, #2052]	; 0x804
   2780c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   27810:	d10a      	bne.n	27828 <download_thread+0x40>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   27812:	01b2      	lsls	r2, r6, #6
   27814:	486b      	ldr	r0, [pc, #428]	; (279c4 <download_thread+0x1dc>)
   27816:	f042 0201 	orr.w	r2, r2, #1
   2781a:	f00c fe84 	bl	34526 <log_1>
			error_evt_send(dl, E2BIG);
   2781e:	2107      	movs	r1, #7
				error_evt_send(dl, EHOSTDOWN);
   27820:	6838      	ldr	r0, [r7, #0]
   27822:	f00f f860 	bl	368e6 <error_evt_send.isra.0>
				break;
   27826:	e7eb      	b.n	27800 <download_thread+0x18>
		len = recv(dl->fd, dl->buf + dl->offset,
   27828:	46a9      	mov	r9, r5
   2782a:	f859 0b04 	ldr.w	r0, [r9], #4
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2782e:	f04f 0a00 	mov.w	sl, #0
   27832:	f5c1 6200 	rsb	r2, r1, #2048	; 0x800
   27836:	4653      	mov	r3, sl
   27838:	e9cd aa00 	strd	sl, sl, [sp]
   2783c:	4449      	add	r1, r9
   2783e:	f00d faf0 	bl	34e22 <z_impl_zsock_recvfrom>
		if ((len == 0) || (len == -1)) {
   27842:	1e43      	subs	r3, r0, #1
   27844:	3303      	adds	r3, #3
   27846:	4680      	mov	r8, r0
   27848:	d93d      	bls.n	278c6 <download_thread+0xde>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   2784a:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   2784e:	b193      	cbz	r3, 27876 <download_thread+0x8e>
   27850:	f895 2828 	ldrb.w	r2, [r5, #2088]	; 0x828
   27854:	b17a      	cbz	r2, 27876 <download_thread+0x8e>
	const struct download_client_evt evt = {
   27856:	e9cd 9304 	strd	r9, r3, [sp, #16]
   2785a:	f88d a00c 	strb.w	sl, [sp, #12]
	return client->callback(&evt);
   2785e:	683b      	ldr	r3, [r7, #0]
   27860:	a803      	add	r0, sp, #12
   27862:	4798      	blx	r3
				if (rc) {
   27864:	4604      	mov	r4, r0
   27866:	b130      	cbz	r0, 27876 <download_thread+0x8e>
					LOG_INF("Fragment refused, download stopped.");
   27868:	01b1      	lsls	r1, r6, #6
   2786a:	f041 0103 	orr.w	r1, r1, #3
			LOG_INF("Fragment refused, download stopped.");
   2786e:	4856      	ldr	r0, [pc, #344]	; (279c8 <download_thread+0x1e0>)
   27870:	f00c fe4a 	bl	34508 <log_0>
   27874:	e7c4      	b.n	27800 <download_thread+0x18>
			if (len == -1) {
   27876:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2787a:	d11d      	bne.n	278b8 <download_thread+0xd0>
				if (errno == ETIMEDOUT) {
   2787c:	f00d fd4b 	bl	35316 <__errno>
   27880:	6803      	ldr	r3, [r0, #0]
   27882:	2b74      	cmp	r3, #116	; 0x74
   27884:	d07d      	beq.n	27982 <download_thread+0x19a>
				LOG_ERR("Error in recv(), errno %d", errno);
   27886:	f00d fd46 	bl	35316 <__errno>
   2788a:	01b4      	lsls	r4, r6, #6
   2788c:	f044 0401 	orr.w	r4, r4, #1
   27890:	6801      	ldr	r1, [r0, #0]
   27892:	4622      	mov	r2, r4
   27894:	484d      	ldr	r0, [pc, #308]	; (279cc <download_thread+0x1e4>)
   27896:	f00c fe46 	bl	34526 <log_1>
			rc = error_evt_send(dl, ECONNRESET);
   2789a:	2168      	movs	r1, #104	; 0x68
   2789c:	6838      	ldr	r0, [r7, #0]
   2789e:	f00f f822 	bl	368e6 <error_evt_send.isra.0>
			if (rc) {
   278a2:	4604      	mov	r4, r0
   278a4:	2800      	cmp	r0, #0
   278a6:	d1ab      	bne.n	27800 <download_thread+0x18>
			rc = reconnect(dl);
   278a8:	4628      	mov	r0, r5
   278aa:	f7ff ff7d 	bl	277a8 <reconnect>
			if (rc) {
   278ae:	4604      	mov	r4, r0
   278b0:	2800      	cmp	r0, #0
   278b2:	d066      	beq.n	27982 <download_thread+0x19a>
				error_evt_send(dl, EHOSTDOWN);
   278b4:	2175      	movs	r1, #117	; 0x75
   278b6:	e7b3      	b.n	27820 <download_thread+0x38>
				LOG_WRN("Peer closed connection!");
   278b8:	01b1      	lsls	r1, r6, #6
   278ba:	4845      	ldr	r0, [pc, #276]	; (279d0 <download_thread+0x1e8>)
   278bc:	f041 0102 	orr.w	r1, r1, #2
   278c0:	f00c fe22 	bl	34508 <log_0>
   278c4:	e7e9      	b.n	2789a <download_thread+0xb2>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   278c6:	f8d5 3824 	ldr.w	r3, [r5, #2084]	; 0x824
   278ca:	2b06      	cmp	r3, #6
   278cc:	d002      	beq.n	278d4 <download_thread+0xec>
   278ce:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   278d2:	d105      	bne.n	278e0 <download_thread+0xf8>
			rc = http_parse(client, len);
   278d4:	4641      	mov	r1, r8
   278d6:	4628      	mov	r0, r5
   278d8:	f000 f9d4 	bl	27c84 <http_parse>
			if (rc > 0) {
   278dc:	1e04      	subs	r4, r0, #0
   278de:	dc93      	bgt.n	27808 <download_thread+0x20>
		if (rc < 0) {
   278e0:	f505 58c8 	add.w	r8, r5, #6400	; 0x1900
   278e4:	2c00      	cmp	r4, #0
   278e6:	f108 0808 	add.w	r8, r8, #8
   278ea:	da03      	bge.n	278f4 <download_thread+0x10c>
			error_evt_send(dl, EBADMSG);
   278ec:	214d      	movs	r1, #77	; 0x4d
   278ee:	f8d8 0000 	ldr.w	r0, [r8]
   278f2:	e796      	b.n	27822 <download_thread+0x3a>
		if (dl->file_size) {
   278f4:	f8d5 2808 	ldr.w	r2, [r5, #2056]	; 0x808
   278f8:	f8d5 180c 	ldr.w	r1, [r5, #2060]	; 0x80c
   278fc:	ea4f 1a86 	mov.w	sl, r6, lsl #6
   27900:	b1da      	cbz	r2, 2793a <download_thread+0x152>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   27902:	2364      	movs	r3, #100	; 0x64
   27904:	434b      	muls	r3, r1
   27906:	f04a 0003 	orr.w	r0, sl, #3
   2790a:	f8ad 0000 	strh.w	r0, [sp]
   2790e:	fbb3 f3f2 	udiv	r3, r3, r2
   27912:	4830      	ldr	r0, [pc, #192]	; (279d4 <download_thread+0x1ec>)
   27914:	f00c fe37 	bl	34586 <log_3>
	const struct download_client_evt evt = {
   27918:	2300      	movs	r3, #0
   2791a:	f88d 300c 	strb.w	r3, [sp, #12]
   2791e:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   27922:	f8cd 9010 	str.w	r9, [sp, #16]
   27926:	9305      	str	r3, [sp, #20]
	return client->callback(&evt);
   27928:	a803      	add	r0, sp, #12
   2792a:	f8d8 3000 	ldr.w	r3, [r8]
   2792e:	4798      	blx	r3
		if (rc) {
   27930:	4604      	mov	r4, r0
   27932:	b140      	cbz	r0, 27946 <download_thread+0x15e>
			LOG_INF("Fragment refused, download stopped.");
   27934:	f04a 0103 	orr.w	r1, sl, #3
   27938:	e799      	b.n	2786e <download_thread+0x86>
			LOG_INF("Downloaded %u bytes", dl->progress);
   2793a:	4827      	ldr	r0, [pc, #156]	; (279d8 <download_thread+0x1f0>)
   2793c:	f04a 0203 	orr.w	r2, sl, #3
   27940:	f00c fdf1 	bl	34526 <log_1>
   27944:	e7e8      	b.n	27918 <download_thread+0x130>
		if (dl->progress == dl->file_size) {
   27946:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   2794a:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   2794e:	429a      	cmp	r2, r3
   27950:	d10f      	bne.n	27972 <download_thread+0x18a>
			LOG_INF("Download complete");
   27952:	4822      	ldr	r0, [pc, #136]	; (279dc <download_thread+0x1f4>)
   27954:	f04a 0103 	orr.w	r1, sl, #3
   27958:	f00c fdd6 	bl	34508 <log_0>
			const struct download_client_evt evt = {
   2795c:	2302      	movs	r3, #2
   2795e:	e9cd 4403 	strd	r4, r4, [sp, #12]
   27962:	9405      	str	r4, [sp, #20]
   27964:	f88d 300c 	strb.w	r3, [sp, #12]
			dl->callback(&evt);
   27968:	a803      	add	r0, sp, #12
   2796a:	f8d8 3000 	ldr.w	r3, [r8]
   2796e:	4798      	blx	r3
			break;
   27970:	e746      	b.n	27800 <download_thread+0x18>
		if (dl->http.connection_close) {
   27972:	f895 3829 	ldrb.w	r3, [r5, #2089]	; 0x829
   27976:	b123      	cbz	r3, 27982 <download_thread+0x19a>
			dl->http.connection_close = false;
   27978:	f885 0829 	strb.w	r0, [r5, #2089]	; 0x829
			reconnect(dl);
   2797c:	4628      	mov	r0, r5
   2797e:	f7ff ff13 	bl	277a8 <reconnect>
		dl->offset = 0;
   27982:	f04f 0800 	mov.w	r8, #0
			rc = request_send(dl);
   27986:	4628      	mov	r0, r5
		dl->offset = 0;
   27988:	f8c5 8804 	str.w	r8, [r5, #2052]	; 0x804
			dl->http.has_header = false;
   2798c:	f885 8828 	strb.w	r8, [r5, #2088]	; 0x828
			rc = request_send(dl);
   27990:	f00e ff9e 	bl	368d0 <request_send>
			if (rc) {
   27994:	4604      	mov	r4, r0
   27996:	2800      	cmp	r0, #0
   27998:	f43f af36 	beq.w	27808 <download_thread+0x20>
				rc = error_evt_send(dl, ECONNRESET);
   2799c:	2168      	movs	r1, #104	; 0x68
   2799e:	6838      	ldr	r0, [r7, #0]
   279a0:	f00e ffa1 	bl	368e6 <error_evt_send.isra.0>
				if (rc) {
   279a4:	4604      	mov	r4, r0
   279a6:	2800      	cmp	r0, #0
   279a8:	f47f af2a 	bne.w	27800 <download_thread+0x18>
				rc = reconnect(dl);
   279ac:	4628      	mov	r0, r5
   279ae:	f7ff fefb 	bl	277a8 <reconnect>
				if (rc) {
   279b2:	4604      	mov	r4, r0
   279b4:	2800      	cmp	r0, #0
   279b6:	d0e6      	beq.n	27986 <download_thread+0x19e>
   279b8:	e77c      	b.n	278b4 <download_thread+0xcc>
   279ba:	bf00      	nop
   279bc:	00038374 	.word	0x00038374
   279c0:	0003831c 	.word	0x0003831c
   279c4:	0003c10b 	.word	0x0003c10b
   279c8:	0003c138 	.word	0x0003c138
   279cc:	0003c15c 	.word	0x0003c15c
   279d0:	0003c176 	.word	0x0003c176
   279d4:	0003c18e 	.word	0x0003c18e
   279d8:	0003c1ac 	.word	0x0003c1ac
   279dc:	0003c1c0 	.word	0x0003c1c0

000279e0 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   279e0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL) {
   279e2:	4604      	mov	r4, r0
   279e4:	b348      	cbz	r0, 27a3a <download_client_start+0x5a>
		return -EINVAL;
	}

	if (client->fd < 0) {
   279e6:	6803      	ldr	r3, [r0, #0]
   279e8:	2b00      	cmp	r3, #0
   279ea:	db29      	blt.n	27a40 <download_client_start+0x60>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   279ec:	2300      	movs	r3, #0
	client->file = file;
   279ee:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
	client->file_size = 0;
   279f2:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
	client->progress = from;
   279f6:	f8c0 280c 	str.w	r2, [r0, #2060]	; 0x80c

	client->offset = 0;
   279fa:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
	client->http.has_header = false;
   279fe:	f880 3828 	strb.w	r3, [r0, #2088]	; 0x828
		if (err) {
			return err;
		}
	}

	err = request_send(client);
   27a02:	f00e ff65 	bl	368d0 <request_send>
	if (err) {
   27a06:	4606      	mov	r6, r0
   27a08:	b9a8      	cbnz	r0, 27a36 <download_client_start+0x56>
   27a0a:	4b0f      	ldr	r3, [pc, #60]	; (27a48 <download_client_start+0x68>)
   27a0c:	4d0f      	ldr	r5, [pc, #60]	; (27a4c <download_client_start+0x6c>)
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   27a0e:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   27a12:	1aed      	subs	r5, r5, r3
   27a14:	f7f8 fd02 	bl	2041c <log_strdup>
   27a18:	08ed      	lsrs	r5, r5, #3
   27a1a:	01ad      	lsls	r5, r5, #6
   27a1c:	f045 0503 	orr.w	r5, r5, #3
   27a20:	4601      	mov	r1, r0
   27a22:	462b      	mov	r3, r5
   27a24:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   27a28:	4809      	ldr	r0, [pc, #36]	; (27a50 <download_client_start+0x70>)
   27a2a:	f00c fd93 	bl	34554 <log_2>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   27a2e:	f8d4 0838 	ldr.w	r0, [r4, #2104]	; 0x838
	z_impl_k_thread_resume(thread);
   27a32:	f00a f9f1 	bl	31e18 <z_impl_k_thread_resume>

	return 0;
}
   27a36:	4630      	mov	r0, r6
   27a38:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   27a3a:	f06f 0615 	mvn.w	r6, #21
   27a3e:	e7fa      	b.n	27a36 <download_client_start+0x56>
		return -ENOTCONN;
   27a40:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   27a44:	e7f7      	b.n	27a36 <download_client_start+0x56>
   27a46:	bf00      	nop
   27a48:	0003831c 	.word	0x0003831c
   27a4c:	00038374 	.word	0x00038374
   27a50:	0003c1d2 	.word	0x0003c1d2

00027a54 <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   27a54:	b570      	push	{r4, r5, r6, lr}
   27a56:	460d      	mov	r5, r1
   27a58:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   27a5a:	4915      	ldr	r1, [pc, #84]	; (27ab0 <url_parse_proto+0x5c>)
   27a5c:	2205      	movs	r2, #5
{
   27a5e:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   27a60:	f00f fe36 	bl	376d0 <strncmp>
   27a64:	b928      	cbnz	r0, 27a72 <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   27a66:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   27a6a:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   27a6c:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   27a6e:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   27a70:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   27a72:	2204      	movs	r2, #4
   27a74:	4630      	mov	r0, r6
   27a76:	490f      	ldr	r1, [pc, #60]	; (27ab4 <url_parse_proto+0x60>)
   27a78:	f00f fe2a 	bl	376d0 <strncmp>
   27a7c:	b908      	cbnz	r0, 27a82 <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   27a7e:	2306      	movs	r3, #6
   27a80:	e7f3      	b.n	27a6a <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   27a82:	2205      	movs	r2, #5
   27a84:	4630      	mov	r0, r6
   27a86:	490c      	ldr	r1, [pc, #48]	; (27ab8 <url_parse_proto+0x64>)
   27a88:	f00f fe22 	bl	376d0 <strncmp>
   27a8c:	b920      	cbnz	r0, 27a98 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   27a8e:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   27a92:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   27a94:	2302      	movs	r3, #2
   27a96:	e7ea      	b.n	27a6e <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   27a98:	2204      	movs	r2, #4
   27a9a:	4630      	mov	r0, r6
   27a9c:	4907      	ldr	r1, [pc, #28]	; (27abc <url_parse_proto+0x68>)
   27a9e:	f00f fe17 	bl	376d0 <strncmp>
   27aa2:	b908      	cbnz	r0, 27aa8 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   27aa4:	2311      	movs	r3, #17
   27aa6:	e7f4      	b.n	27a92 <url_parse_proto+0x3e>
		return -EINVAL;
   27aa8:	f06f 0015 	mvn.w	r0, #21
   27aac:	e7e0      	b.n	27a70 <url_parse_proto+0x1c>
   27aae:	bf00      	nop
   27ab0:	0003a18e 	.word	0x0003a18e
   27ab4:	0003a1b5 	.word	0x0003a1b5
   27ab8:	0003c1f7 	.word	0x0003c1f7
   27abc:	0003c1fd 	.word	0x0003c1fd

00027ac0 <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   27ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27ac2:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   27ac4:	9001      	str	r0, [sp, #4]
{
   27ac6:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   27ac8:	a801      	add	r0, sp, #4
   27aca:	4911      	ldr	r1, [pc, #68]	; (27b10 <url_parse_host+0x50>)
{
   27acc:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   27ace:	f00e ff43 	bl	36958 <swallow>

	end = strchr(cur, ':');
   27ad2:	213a      	movs	r1, #58	; 0x3a
   27ad4:	9801      	ldr	r0, [sp, #4]
   27ad6:	f00f fde6 	bl	376a6 <strchr>
	if (!end) {
   27ada:	b948      	cbnz	r0, 27af0 <url_parse_host+0x30>
		end = strchr(cur, '/');
   27adc:	212f      	movs	r1, #47	; 0x2f
   27ade:	9801      	ldr	r0, [sp, #4]
   27ae0:	f00f fde1 	bl	376a6 <strchr>
		if (!end) {
   27ae4:	b920      	cbnz	r0, 27af0 <url_parse_host+0x30>
			end = url + strlen(url) + 1;
   27ae6:	4620      	mov	r0, r4
   27ae8:	f7f1 fac2 	bl	19070 <strlen>
   27aec:	1c43      	adds	r3, r0, #1
   27aee:	18e0      	adds	r0, r4, r3
		}
	}

	if (end - cur + 1 > len) {
   27af0:	9901      	ldr	r1, [sp, #4]
   27af2:	1a44      	subs	r4, r0, r1
   27af4:	1c63      	adds	r3, r4, #1
   27af6:	42b3      	cmp	r3, r6
   27af8:	d807      	bhi.n	27b0a <url_parse_host+0x4a>
   27afa:	4622      	mov	r2, r4
   27afc:	4628      	mov	r0, r5
   27afe:	f00f fc80 	bl	37402 <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   27b02:	2000      	movs	r0, #0
   27b04:	5528      	strb	r0, [r5, r4]

	return 0;
}
   27b06:	b002      	add	sp, #8
   27b08:	bd70      	pop	{r4, r5, r6, pc}
		return -E2BIG;
   27b0a:	f06f 0006 	mvn.w	r0, #6
   27b0e:	e7fa      	b.n	27b06 <url_parse_host+0x46>
   27b10:	0003c202 	.word	0x0003c202

00027b14 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   27b14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   27b16:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   27b18:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   27b1a:	4917      	ldr	r1, [pc, #92]	; (27b78 <url_parse_port+0x64>)
   27b1c:	a801      	add	r0, sp, #4
   27b1e:	f00e ff1b 	bl	36958 <swallow>

	err = swallow(&cur, ":");
   27b22:	4916      	ldr	r1, [pc, #88]	; (27b7c <url_parse_port+0x68>)
   27b24:	a801      	add	r0, sp, #4
   27b26:	f00e ff17 	bl	36958 <swallow>
	if (err) {
   27b2a:	4605      	mov	r5, r0
   27b2c:	bb08      	cbnz	r0, 27b72 <url_parse_port+0x5e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   27b2e:	212f      	movs	r1, #47	; 0x2f
   27b30:	9801      	ldr	r0, [sp, #4]
   27b32:	f00f fdb8 	bl	376a6 <strchr>
	if (!end) {
   27b36:	4604      	mov	r4, r0
		len = strlen(cur);
   27b38:	9801      	ldr	r0, [sp, #4]
	if (!end) {
   27b3a:	b9c4      	cbnz	r4, 27b6e <url_parse_port+0x5a>
		len = strlen(cur);
   27b3c:	f7f1 fa98 	bl	19070 <strlen>
   27b40:	4604      	mov	r4, r0
	} else {
		len = end - cur;
	}

	len = MAX(len, sizeof(aport) - 1);
   27b42:	2c07      	cmp	r4, #7
   27b44:	bf38      	it	cc
   27b46:	2407      	movcc	r4, #7

	memcpy(aport, cur, len);
   27b48:	2308      	movs	r3, #8
   27b4a:	4622      	mov	r2, r4
   27b4c:	9901      	ldr	r1, [sp, #4]
   27b4e:	eb0d 0003 	add.w	r0, sp, r3
   27b52:	f00f fc63 	bl	3741c <__memcpy_chk>
	aport[len] = '\0';
   27b56:	ab04      	add	r3, sp, #16
   27b58:	441c      	add	r4, r3
   27b5a:	2300      	movs	r3, #0

	*port = atoi(aport);
   27b5c:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   27b5e:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   27b62:	f00f fc2e 	bl	373c2 <atoi>
   27b66:	8030      	strh	r0, [r6, #0]

	return 0;
}
   27b68:	4628      	mov	r0, r5
   27b6a:	b004      	add	sp, #16
   27b6c:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   27b6e:	1a24      	subs	r4, r4, r0
   27b70:	e7e7      	b.n	27b42 <url_parse_port+0x2e>
		return -EINVAL;
   27b72:	f06f 0515 	mvn.w	r5, #21
   27b76:	e7f7      	b.n	27b68 <url_parse_port+0x54>
   27b78:	0003c202 	.word	0x0003c202
   27b7c:	0003bbba 	.word	0x0003bbba

00027b80 <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   27b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27b82:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   27b84:	4915      	ldr	r1, [pc, #84]	; (27bdc <url_parse_file+0x5c>)
{
   27b86:	4614      	mov	r4, r2
	cur = url;
   27b88:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   27b8a:	f00f fded 	bl	37768 <strstr>
   27b8e:	b940      	cbnz	r0, 27ba2 <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   27b90:	9801      	ldr	r0, [sp, #4]
   27b92:	f7f1 fa6d 	bl	19070 <strlen>
   27b96:	3001      	adds	r0, #1
   27b98:	42a0      	cmp	r0, r4
   27b9a:	d912      	bls.n	27bc2 <url_parse_file+0x42>
		return -E2BIG;
   27b9c:	f06f 0006 	mvn.w	r0, #6
   27ba0:	e006      	b.n	27bb0 <url_parse_file+0x30>
		err = swallow(&cur, "://");
   27ba2:	490f      	ldr	r1, [pc, #60]	; (27be0 <url_parse_file+0x60>)
   27ba4:	a801      	add	r0, sp, #4
   27ba6:	f00e fed7 	bl	36958 <swallow>
		if (err) {
   27baa:	b118      	cbz	r0, 27bb4 <url_parse_file+0x34>
			return -EINVAL;
   27bac:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   27bb0:	b003      	add	sp, #12
   27bb2:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   27bb4:	490b      	ldr	r1, [pc, #44]	; (27be4 <url_parse_file+0x64>)
   27bb6:	a801      	add	r0, sp, #4
   27bb8:	f00e fece 	bl	36958 <swallow>
		if (err) {
   27bbc:	2800      	cmp	r0, #0
   27bbe:	d0e7      	beq.n	27b90 <url_parse_file+0x10>
   27bc0:	e7f4      	b.n	27bac <url_parse_file+0x2c>
	len = strlen(cur);
   27bc2:	9801      	ldr	r0, [sp, #4]
   27bc4:	f7f1 fa54 	bl	19070 <strlen>
   27bc8:	9901      	ldr	r1, [sp, #4]
   27bca:	4604      	mov	r4, r0
   27bcc:	4602      	mov	r2, r0
   27bce:	4628      	mov	r0, r5
   27bd0:	f00f fc17 	bl	37402 <memcpy>
	file[len] = '\0';
   27bd4:	2300      	movs	r3, #0
	return 0;
   27bd6:	4618      	mov	r0, r3
	file[len] = '\0';
   27bd8:	552b      	strb	r3, [r5, r4]
	return 0;
   27bda:	e7e9      	b.n	27bb0 <url_parse_file+0x30>
   27bdc:	0003c203 	.word	0x0003c203
   27be0:	0003c202 	.word	0x0003c202
   27be4:	0003c204 	.word	0x0003c204

00027be8 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len);

int http_get_request_send(struct download_client *client)
{
   27be8:	b570      	push	{r4, r5, r6, lr}
   27bea:	b0c4      	sub	sp, #272	; 0x110
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
	__ASSERT_NO_MSG(client->file);

	err = url_parse_host(client->host, host, sizeof(host));
   27bec:	ae04      	add	r6, sp, #16
{
   27bee:	4605      	mov	r5, r0
	err = url_parse_host(client->host, host, sizeof(host));
   27bf0:	2240      	movs	r2, #64	; 0x40
   27bf2:	4631      	mov	r1, r6
   27bf4:	f8d0 0810 	ldr.w	r0, [r0, #2064]	; 0x810
   27bf8:	f7ff ff62 	bl	27ac0 <url_parse_host>
	if (err) {
   27bfc:	4604      	mov	r4, r0
   27bfe:	bb90      	cbnz	r0, 27c66 <http_get_request_send+0x7e>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   27c00:	22c0      	movs	r2, #192	; 0xc0
   27c02:	f8d5 0814 	ldr.w	r0, [r5, #2068]	; 0x814
   27c06:	a914      	add	r1, sp, #80	; 0x50
   27c08:	f7ff ffba 	bl	27b80 <url_parse_file>
	if (err) {
   27c0c:	4604      	mov	r4, r0
   27c0e:	bb50      	cbnz	r0, 27c66 <http_get_request_send+0x7e>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   27c10:	f8d5 3820 	ldr.w	r3, [r5, #2080]	; 0x820
   27c14:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   27c18:	b343      	cbz	r3, 27c6c <http_get_request_send+0x84>
		off = client->progress + client->config.frag_size_override - 1;
   27c1a:	4413      	add	r3, r2
   27c1c:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   27c1e:	f8d5 1808 	ldr.w	r1, [r5, #2056]	; 0x808
   27c22:	b111      	cbz	r1, 27c2a <http_get_request_send+0x42>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size);
   27c24:	428b      	cmp	r3, r1
   27c26:	bf28      	it	cs
   27c28:	460b      	movcs	r3, r1
	 * When using HTTP, we request the whole resource to minimize
	 * network usage (only one request/response are sent).
	 */
	if (client->proto == IPPROTO_TLS_1_2
	   || IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS)) {
		len = snprintf(client->buf,
   27c2a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   27c2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   27c32:	4a10      	ldr	r2, [pc, #64]	; (27c74 <http_get_request_send+0x8c>)
   27c34:	ab14      	add	r3, sp, #80	; 0x50
   27c36:	9600      	str	r6, [sp, #0]
   27c38:	1d28      	adds	r0, r5, #4
   27c3a:	f00b fb19 	bl	33270 <sniprintf>
   27c3e:	4601      	mov	r1, r0

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len);
   27c40:	4628      	mov	r0, r5
   27c42:	f00e fe5f 	bl	36904 <socket_send>
	if (err) {
   27c46:	4604      	mov	r4, r0
   27c48:	b168      	cbz	r0, 27c66 <http_get_request_send+0x7e>
   27c4a:	4a0b      	ldr	r2, [pc, #44]	; (27c78 <http_get_request_send+0x90>)
   27c4c:	4d0b      	ldr	r5, [pc, #44]	; (27c7c <http_get_request_send+0x94>)
   27c4e:	1aad      	subs	r5, r5, r2
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   27c50:	f00d fb61 	bl	35316 <__errno>
   27c54:	08ed      	lsrs	r5, r5, #3
   27c56:	01ad      	lsls	r5, r5, #6
   27c58:	f045 0501 	orr.w	r5, r5, #1
   27c5c:	6801      	ldr	r1, [r0, #0]
   27c5e:	462a      	mov	r2, r5
   27c60:	4807      	ldr	r0, [pc, #28]	; (27c80 <http_get_request_send+0x98>)
   27c62:	f00c fc60 	bl	34526 <log_1>
		return err;
	}

	return 0;
}
   27c66:	4620      	mov	r0, r4
   27c68:	b044      	add	sp, #272	; 0x110
   27c6a:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   27c6c:	f202 73ff 	addw	r3, r2, #2047	; 0x7ff
   27c70:	e7d5      	b.n	27c1e <http_get_request_send+0x36>
   27c72:	bf00      	nop
   27c74:	0003c206 	.word	0x0003c206
   27c78:	0003831c 	.word	0x0003831c
   27c7c:	00038374 	.word	0x00038374
   27c80:	0003c251 	.word	0x0003c251

00027c84 <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   27c84:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   27c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	client->offset += len;
   27c8c:	440b      	add	r3, r1
   27c8e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

	if (!client->http.has_header) {
   27c92:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
{
   27c96:	4604      	mov	r4, r0
   27c98:	460f      	mov	r7, r1
	if (!client->http.has_header) {
   27c9a:	2b00      	cmp	r3, #0
   27c9c:	d17d      	bne.n	27d9a <http_parse+0x116>
	p = strstr(client->buf, "\r\n\r\n");
   27c9e:	1d06      	adds	r6, r0, #4
   27ca0:	4630      	mov	r0, r6
   27ca2:	494d      	ldr	r1, [pc, #308]	; (27dd8 <http_parse+0x154>)
   27ca4:	f00f fd60 	bl	37768 <strstr>
	if (!p) {
   27ca8:	4605      	mov	r5, r0
   27caa:	2800      	cmp	r0, #0
   27cac:	f000 8090 	beq.w	27dd0 <http_parse+0x14c>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   27cb0:	4849      	ldr	r0, [pc, #292]	; (27dd8 <http_parse+0x154>)
   27cb2:	f7f1 f9dd 	bl	19070 <strlen>
   27cb6:	4405      	add	r5, r0
   27cb8:	4633      	mov	r3, r6
   27cba:	4628      	mov	r0, r5
		client->buf[i] = tolower(client->buf[i]);
   27cbc:	f8df c144 	ldr.w	ip, [pc, #324]	; 27e04 <http_parse+0x180>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   27cc0:	eba5 0806 	sub.w	r8, r5, r6
	for (size_t i = 0; i < *hdr_len; i++) {
   27cc4:	4298      	cmp	r0, r3
   27cc6:	d112      	bne.n	27cee <http_parse+0x6a>
	p = strstr(client->buf, "http/1.1 206");
   27cc8:	4630      	mov	r0, r6
   27cca:	4944      	ldr	r1, [pc, #272]	; (27ddc <http_parse+0x158>)
   27ccc:	f00f fd4c 	bl	37768 <strstr>
	if (!p) {
   27cd0:	b9c0      	cbnz	r0, 27d04 <http_parse+0x80>
   27cd2:	4943      	ldr	r1, [pc, #268]	; (27de0 <http_parse+0x15c>)
   27cd4:	4b43      	ldr	r3, [pc, #268]	; (27de4 <http_parse+0x160>)
			LOG_ERR("Server did not honor partial content request");
   27cd6:	4844      	ldr	r0, [pc, #272]	; (27de8 <http_parse+0x164>)
   27cd8:	1ac9      	subs	r1, r1, r3
   27cda:	08c9      	lsrs	r1, r1, #3
   27cdc:	0189      	lsls	r1, r1, #6
   27cde:	f041 0101 	orr.w	r1, r1, #1
				LOG_ERR("Server did not send "
   27ce2:	f00c fc11 	bl	34508 <log_0>
			/* Wait for header */
			return 1;
		}
		if (rc < 0) {
			/* Something is wrong with the header */
			return -1;
   27ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
}
   27cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		client->buf[i] = tolower(client->buf[i]);
   27cee:	781a      	ldrb	r2, [r3, #0]
   27cf0:	f812 100c 	ldrb.w	r1, [r2, ip]
   27cf4:	f001 0103 	and.w	r1, r1, #3
   27cf8:	2901      	cmp	r1, #1
   27cfa:	bf08      	it	eq
   27cfc:	3220      	addeq	r2, #32
   27cfe:	f803 2b01 	strb.w	r2, [r3], #1
	for (size_t i = 0; i < *hdr_len; i++) {
   27d02:	e7df      	b.n	27cc4 <http_parse+0x40>
	if (client->file_size == 0) {
   27d04:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   27d08:	bb13      	cbnz	r3, 27d50 <http_parse+0xcc>
			p = strstr(client->buf, "content-range");
   27d0a:	4630      	mov	r0, r6
   27d0c:	4937      	ldr	r1, [pc, #220]	; (27dec <http_parse+0x168>)
   27d0e:	f00f fd2b 	bl	37768 <strstr>
			if (!p) {
   27d12:	b940      	cbnz	r0, 27d26 <http_parse+0xa2>
   27d14:	4932      	ldr	r1, [pc, #200]	; (27de0 <http_parse+0x15c>)
   27d16:	4b33      	ldr	r3, [pc, #204]	; (27de4 <http_parse+0x160>)
				LOG_ERR("Server did not send "
   27d18:	4835      	ldr	r0, [pc, #212]	; (27df0 <http_parse+0x16c>)
   27d1a:	1ac9      	subs	r1, r1, r3
   27d1c:	08c9      	lsrs	r1, r1, #3
   27d1e:	0189      	lsls	r1, r1, #6
   27d20:	f041 0101 	orr.w	r1, r1, #1
   27d24:	e7dd      	b.n	27ce2 <http_parse+0x5e>
			p = strstr(p, "/");
   27d26:	4933      	ldr	r1, [pc, #204]	; (27df4 <http_parse+0x170>)
   27d28:	f00f fd1e 	bl	37768 <strstr>
			if (!p) {
   27d2c:	b940      	cbnz	r0, 27d40 <http_parse+0xbc>
   27d2e:	492c      	ldr	r1, [pc, #176]	; (27de0 <http_parse+0x15c>)
   27d30:	4b2c      	ldr	r3, [pc, #176]	; (27de4 <http_parse+0x160>)
				LOG_ERR("No file size in response");
   27d32:	4831      	ldr	r0, [pc, #196]	; (27df8 <http_parse+0x174>)
   27d34:	1ac9      	subs	r1, r1, r3
   27d36:	08c9      	lsrs	r1, r1, #3
   27d38:	0189      	lsls	r1, r1, #6
   27d3a:	f041 0101 	orr.w	r1, r1, #1
   27d3e:	e7d0      	b.n	27ce2 <http_parse+0x5e>
		client->file_size += atoi(p + 1);
   27d40:	3001      	adds	r0, #1
   27d42:	f00f fb3e 	bl	373c2 <atoi>
   27d46:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   27d4a:	4418      	add	r0, r3
   27d4c:	f8c4 0808 	str.w	r0, [r4, #2056]	; 0x808
	p = strstr(client->buf, "connection: close");
   27d50:	4630      	mov	r0, r6
   27d52:	492a      	ldr	r1, [pc, #168]	; (27dfc <http_parse+0x178>)
   27d54:	f00f fd08 	bl	37768 <strstr>
	if (p) {
   27d58:	b160      	cbz	r0, 27d74 <http_parse+0xf0>
   27d5a:	4922      	ldr	r1, [pc, #136]	; (27de4 <http_parse+0x160>)
   27d5c:	4b20      	ldr	r3, [pc, #128]	; (27de0 <http_parse+0x15c>)
		LOG_WRN("Peer closed connection, will re-connect");
   27d5e:	4828      	ldr	r0, [pc, #160]	; (27e00 <http_parse+0x17c>)
   27d60:	1a5b      	subs	r3, r3, r1
   27d62:	08db      	lsrs	r3, r3, #3
   27d64:	019b      	lsls	r3, r3, #6
   27d66:	f043 0102 	orr.w	r1, r3, #2
   27d6a:	f00c fbcd 	bl	34508 <log_0>
		client->http.connection_close = true;
   27d6e:	2301      	movs	r3, #1
   27d70:	f884 3829 	strb.w	r3, [r4, #2089]	; 0x829
	client->http.has_header = true;
   27d74:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   27d76:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
	client->http.has_header = true;
   27d7a:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
		if (client->offset != hdr_len) {
   27d7e:	4542      	cmp	r2, r8
   27d80:	d024      	beq.n	27dcc <http_parse+0x148>
   27d82:	4629      	mov	r1, r5
   27d84:	4630      	mov	r0, r6
   27d86:	eba2 0208 	sub.w	r2, r2, r8
   27d8a:	f00f fb3a 	bl	37402 <memcpy>
			client->offset -= hdr_len;
   27d8e:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   27d92:	eba3 0308 	sub.w	r3, r3, r8
			client->offset = 0;
   27d96:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
	client->progress += MIN(client->offset, len);
   27d9a:	f8d4 180c 	ldr.w	r1, [r4, #2060]	; 0x80c
   27d9e:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
	if (client->progress != client->file_size &&
   27da2:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
	client->progress += MIN(client->offset, len);
   27da6:	429f      	cmp	r7, r3
   27da8:	bf94      	ite	ls
   27daa:	19cf      	addls	r7, r1, r7
   27dac:	18cf      	addhi	r7, r1, r3
	if (client->progress != client->file_size &&
   27dae:	4297      	cmp	r7, r2
	client->progress += MIN(client->offset, len);
   27db0:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
	if (client->progress != client->file_size &&
   27db4:	d00e      	beq.n	27dd4 <http_parse+0x150>
	    client->offset < (client->config.frag_size_override != 0 ?
   27db6:	f8d4 0820 	ldr.w	r0, [r4, #2080]	; 0x820
			      client->config.frag_size_override :
   27dba:	2800      	cmp	r0, #0
   27dbc:	bf08      	it	eq
   27dbe:	f44f 6000 	moveq.w	r0, #2048	; 0x800
	if (client->progress != client->file_size &&
   27dc2:	4298      	cmp	r0, r3
   27dc4:	bf94      	ite	ls
   27dc6:	2000      	movls	r0, #0
   27dc8:	2001      	movhi	r0, #1
   27dca:	e78e      	b.n	27cea <http_parse+0x66>
			client->offset = 0;
   27dcc:	2300      	movs	r3, #0
   27dce:	e7e2      	b.n	27d96 <http_parse+0x112>
			return 1;
   27dd0:	2001      	movs	r0, #1
   27dd2:	e78a      	b.n	27cea <http_parse+0x66>
	return 0;
   27dd4:	2000      	movs	r0, #0
   27dd6:	e788      	b.n	27cea <http_parse+0x66>
   27dd8:	0003c24c 	.word	0x0003c24c
   27ddc:	0003c277 	.word	0x0003c277
   27de0:	00038374 	.word	0x00038374
   27de4:	0003831c 	.word	0x0003831c
   27de8:	0003c284 	.word	0x0003c284
   27dec:	0003c2b1 	.word	0x0003c2b1
   27df0:	0003c2bf 	.word	0x0003c2bf
   27df4:	0003c204 	.word	0x0003c204
   27df8:	0003c2ef 	.word	0x0003c2ef
   27dfc:	0003c308 	.word	0x0003c308
   27e00:	0003c31a 	.word	0x0003c31a
   27e04:	0003ca84 	.word	0x0003ca84

00027e08 <send_evt>:

static void send_evt(enum fota_download_evt_id id)
{
	__ASSERT(id != FOTA_DOWNLOAD_EVT_PROGRESS, "use send_progress");
	__ASSERT(id != FOTA_DOWNLOAD_EVT_ERROR, "use send_error_evt");
	const struct fota_download_evt evt = {
   27e08:	2300      	movs	r3, #0
{
   27e0a:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   27e0c:	e9cd 3300 	strd	r3, r3, [sp]
		.id = id
	};
	callback(&evt);
   27e10:	4b04      	ldr	r3, [pc, #16]	; (27e24 <send_evt+0x1c>)
	const struct fota_download_evt evt = {
   27e12:	f88d 0000 	strb.w	r0, [sp]
	callback(&evt);
   27e16:	681b      	ldr	r3, [r3, #0]
   27e18:	4668      	mov	r0, sp
   27e1a:	4798      	blx	r3
}
   27e1c:	b003      	add	sp, #12
   27e1e:	f85d fb04 	ldr.w	pc, [sp], #4
   27e22:	bf00      	nop
   27e24:	20023858 	.word	0x20023858

00027e28 <send_error_evt>:

static void send_error_evt(enum fota_download_error_cause cause)
{
	__ASSERT(cause != FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR, "use a valid error cause");
	const struct fota_download_evt evt = {
   27e28:	2300      	movs	r3, #0
{
   27e2a:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   27e2c:	e9cd 3300 	strd	r3, r3, [sp]
   27e30:	2304      	movs	r3, #4
   27e32:	f88d 3000 	strb.w	r3, [sp]
		.id = FOTA_DOWNLOAD_EVT_ERROR,
		.cause = cause
	};
	callback(&evt);
   27e36:	4b04      	ldr	r3, [pc, #16]	; (27e48 <send_error_evt+0x20>)
	const struct fota_download_evt evt = {
   27e38:	f88d 0004 	strb.w	r0, [sp, #4]
	callback(&evt);
   27e3c:	681b      	ldr	r3, [r3, #0]
   27e3e:	4668      	mov	r0, sp
   27e40:	4798      	blx	r3
}
   27e42:	b003      	add	sp, #12
   27e44:	f85d fb04 	ldr.w	pc, [sp], #4
   27e48:	20023858 	.word	0x20023858

00027e4c <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   27e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   27e4e:	a801      	add	r0, sp, #4
   27e50:	f000 fa02 	bl	28258 <dfu_target_offset_get>
	if (err != 0) {
   27e54:	4c18      	ldr	r4, [pc, #96]	; (27eb8 <download_with_offset+0x6c>)
   27e56:	4b19      	ldr	r3, [pc, #100]	; (27ebc <download_with_offset+0x70>)
   27e58:	4602      	mov	r2, r0
   27e5a:	1ae4      	subs	r4, r4, r3
   27e5c:	08e4      	lsrs	r4, r4, #3
   27e5e:	01a4      	lsls	r4, r4, #6
   27e60:	b138      	cbz	r0, 27e72 <download_with_offset+0x26>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   27e62:	4917      	ldr	r1, [pc, #92]	; (27ec0 <download_with_offset+0x74>)
   27e64:	4817      	ldr	r0, [pc, #92]	; (27ec4 <download_with_offset+0x78>)
   27e66:	f044 0301 	orr.w	r3, r4, #1
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   27e6a:	f00c fb73 	bl	34554 <log_2>
			err);
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	return;
}
   27e6e:	b003      	add	sp, #12
   27e70:	bd30      	pop	{r4, r5, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   27e72:	4d15      	ldr	r5, [pc, #84]	; (27ec8 <download_with_offset+0x7c>)
   27e74:	f605 0218 	addw	r2, r5, #2072	; 0x818
   27e78:	4628      	mov	r0, r5
   27e7a:	f8d5 1810 	ldr.w	r1, [r5, #2064]	; 0x810
   27e7e:	f7ff fa87 	bl	27390 <download_client_connect>
	if (err != 0) {
   27e82:	4602      	mov	r2, r0
   27e84:	b120      	cbz	r0, 27e90 <download_with_offset+0x44>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   27e86:	490e      	ldr	r1, [pc, #56]	; (27ec0 <download_with_offset+0x74>)
   27e88:	4810      	ldr	r0, [pc, #64]	; (27ecc <download_with_offset+0x80>)
   27e8a:	f044 0301 	orr.w	r3, r4, #1
   27e8e:	e7ec      	b.n	27e6a <download_with_offset+0x1e>
	err = download_client_start(&dlc, dlc.file, offset);
   27e90:	9a01      	ldr	r2, [sp, #4]
   27e92:	4628      	mov	r0, r5
   27e94:	f8d5 1814 	ldr.w	r1, [r5, #2068]	; 0x814
   27e98:	f7ff fda2 	bl	279e0 <download_client_start>
	if (err != 0) {
   27e9c:	4602      	mov	r2, r0
   27e9e:	b120      	cbz	r0, 27eaa <download_with_offset+0x5e>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   27ea0:	4907      	ldr	r1, [pc, #28]	; (27ec0 <download_with_offset+0x74>)
   27ea2:	480b      	ldr	r0, [pc, #44]	; (27ed0 <download_with_offset+0x84>)
   27ea4:	f044 0301 	orr.w	r3, r4, #1
   27ea8:	e7df      	b.n	27e6a <download_with_offset+0x1e>
	LOG_INF("Downloading from offset: 0x%x", offset);
   27eaa:	9901      	ldr	r1, [sp, #4]
   27eac:	4809      	ldr	r0, [pc, #36]	; (27ed4 <download_with_offset+0x88>)
   27eae:	f044 0203 	orr.w	r2, r4, #3
   27eb2:	f00c fb38 	bl	34526 <log_1>
   27eb6:	e7da      	b.n	27e6e <download_with_offset+0x22>
   27eb8:	00038394 	.word	0x00038394
   27ebc:	0003831c 	.word	0x0003831c
   27ec0:	0003c507 	.word	0x0003c507
   27ec4:	0003c342 	.word	0x0003c342
   27ec8:	20021878 	.word	0x20021878
   27ecc:	0003c368 	.word	0x0003c368
   27ed0:	0003c38b 	.word	0x0003c38b
   27ed4:	0003c3b6 	.word	0x0003c3b6

00027ed8 <download_client_callback>:
{
   27ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (event == NULL) {
   27eda:	4605      	mov	r5, r0
{
   27edc:	b085      	sub	sp, #20
	if (event == NULL) {
   27ede:	2800      	cmp	r0, #0
   27ee0:	f000 80f1 	beq.w	280c6 <download_client_callback+0x1ee>
	switch (event->id) {
   27ee4:	7803      	ldrb	r3, [r0, #0]
   27ee6:	2b01      	cmp	r3, #1
   27ee8:	f000 80b7 	beq.w	2805a <download_client_callback+0x182>
   27eec:	2b02      	cmp	r3, #2
   27eee:	f000 8096 	beq.w	2801e <download_client_callback+0x146>
   27ef2:	2b00      	cmp	r3, #0
   27ef4:	f040 80c7 	bne.w	28086 <download_client_callback+0x1ae>
		if (first_fragment) {
   27ef8:	4e74      	ldr	r6, [pc, #464]	; (280cc <download_client_callback+0x1f4>)
   27efa:	7833      	ldrb	r3, [r6, #0]
   27efc:	2b00      	cmp	r3, #0
   27efe:	d051      	beq.n	27fa4 <download_client_callback+0xcc>
			err = download_client_file_size_get(&dlc, &file_size);
   27f00:	4f73      	ldr	r7, [pc, #460]	; (280d0 <download_client_callback+0x1f8>)
   27f02:	4874      	ldr	r0, [pc, #464]	; (280d4 <download_client_callback+0x1fc>)
   27f04:	4639      	mov	r1, r7
   27f06:	f00e fd1d 	bl	36944 <download_client_file_size_get>
			if (err != 0) {
   27f0a:	4604      	mov	r4, r0
   27f0c:	b108      	cbz	r0, 27f12 <download_client_callback+0x3a>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   27f0e:	2001      	movs	r0, #1
   27f10:	e068      	b.n	27fe4 <download_client_callback+0x10c>
			first_fragment = false;
   27f12:	7030      	strb	r0, [r6, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   27f14:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   27f18:	f000 f946 	bl	281a8 <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size,
   27f1c:	4a6e      	ldr	r2, [pc, #440]	; (280d8 <download_client_callback+0x200>)
   27f1e:	6839      	ldr	r1, [r7, #0]
   27f20:	f000 f968 	bl	281f4 <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   27f24:	1e04      	subs	r4, r0, #0
   27f26:	da1d      	bge.n	27f64 <download_client_callback+0x8c>
   27f28:	f114 0f10 	cmn.w	r4, #16
   27f2c:	d01a      	beq.n	27f64 <download_client_callback+0x8c>
   27f2e:	4b6b      	ldr	r3, [pc, #428]	; (280dc <download_client_callback+0x204>)
   27f30:	4d6b      	ldr	r5, [pc, #428]	; (280e0 <download_client_callback+0x208>)
				LOG_ERR("dfu_target_init error %d", err);
   27f32:	4621      	mov	r1, r4
   27f34:	1aed      	subs	r5, r5, r3
   27f36:	08ed      	lsrs	r5, r5, #3
   27f38:	01ad      	lsls	r5, r5, #6
   27f3a:	f045 0501 	orr.w	r5, r5, #1
   27f3e:	462a      	mov	r2, r5
   27f40:	4868      	ldr	r0, [pc, #416]	; (280e4 <download_client_callback+0x20c>)
   27f42:	f00c faf0 	bl	34526 <log_1>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   27f46:	2001      	movs	r0, #1
   27f48:	f7ff ff6e 	bl	27e28 <send_error_evt>
				int res = dfu_target_reset();
   27f4c:	f000 f9be 	bl	282cc <dfu_target_reset>
				if (res != 0) {
   27f50:	b118      	cbz	r0, 27f5a <download_client_callback+0x82>
					LOG_ERR("Unable to reset DFU target");
   27f52:	4629      	mov	r1, r5
   27f54:	4864      	ldr	r0, [pc, #400]	; (280e8 <download_client_callback+0x210>)
   27f56:	f00c fad7 	bl	34508 <log_0>
				first_fragment = true;
   27f5a:	2301      	movs	r3, #1
   27f5c:	7033      	strb	r3, [r6, #0]
}
   27f5e:	4620      	mov	r0, r4
   27f60:	b005      	add	sp, #20
   27f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = dfu_target_offset_get(&offset);
   27f64:	a801      	add	r0, sp, #4
   27f66:	f000 f977 	bl	28258 <dfu_target_offset_get>
			if (err != 0) {
   27f6a:	b110      	cbz	r0, 27f72 <download_client_callback+0x9a>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   27f6c:	2001      	movs	r0, #1
   27f6e:	f7ff ff5b 	bl	27e28 <send_error_evt>
			if (offset != 0) {
   27f72:	9b01      	ldr	r3, [sp, #4]
   27f74:	b1b3      	cbz	r3, 27fa4 <download_client_callback+0xcc>
				(void)download_client_disconnect(&dlc);
   27f76:	4857      	ldr	r0, [pc, #348]	; (280d4 <download_client_callback+0x1fc>)
   27f78:	f7ff fbec 	bl	27754 <download_client_disconnect>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   27f7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   27f80:	2300      	movs	r3, #0
   27f82:	495a      	ldr	r1, [pc, #360]	; (280ec <download_client_callback+0x214>)
   27f84:	485a      	ldr	r0, [pc, #360]	; (280f0 <download_client_callback+0x218>)
   27f86:	f00a fb55 	bl	32634 <k_delayed_work_submit_to_queue>
   27f8a:	4b54      	ldr	r3, [pc, #336]	; (280dc <download_client_callback+0x204>)
   27f8c:	4954      	ldr	r1, [pc, #336]	; (280e0 <download_client_callback+0x208>)
				LOG_INF("Refuse fragment, restart with offset");
   27f8e:	4859      	ldr	r0, [pc, #356]	; (280f4 <download_client_callback+0x21c>)
   27f90:	1ac9      	subs	r1, r1, r3
   27f92:	08c9      	lsrs	r1, r1, #3
   27f94:	0189      	lsls	r1, r1, #6
   27f96:	f041 0103 	orr.w	r1, r1, #3
   27f9a:	f00c fab5 	bl	34508 <log_0>
				return -1;
   27f9e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27fa2:	e7dc      	b.n	27f5e <download_client_callback+0x86>
		err = dfu_target_write(event->fragment.buf,
   27fa4:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   27fa8:	f000 f960 	bl	2826c <dfu_target_write>
		if (err != 0) {
   27fac:	4604      	mov	r4, r0
   27fae:	b1e0      	cbz	r0, 27fea <download_client_callback+0x112>
   27fb0:	4b4a      	ldr	r3, [pc, #296]	; (280dc <download_client_callback+0x204>)
   27fb2:	4d4b      	ldr	r5, [pc, #300]	; (280e0 <download_client_callback+0x208>)
			LOG_ERR("dfu_target_write error %d", err);
   27fb4:	4601      	mov	r1, r0
   27fb6:	1aed      	subs	r5, r5, r3
   27fb8:	08ed      	lsrs	r5, r5, #3
   27fba:	01ad      	lsls	r5, r5, #6
   27fbc:	f045 0501 	orr.w	r5, r5, #1
   27fc0:	484d      	ldr	r0, [pc, #308]	; (280f8 <download_client_callback+0x220>)
   27fc2:	462a      	mov	r2, r5
   27fc4:	f00c faaf 	bl	34526 <log_1>
			int res = dfu_target_done(false);
   27fc8:	2000      	movs	r0, #0
   27fca:	f000 f95b 	bl	28284 <dfu_target_done>
			if (res != 0) {
   27fce:	b118      	cbz	r0, 27fd8 <download_client_callback+0x100>
				LOG_ERR("Unable to free DFU target resources");
   27fd0:	4629      	mov	r1, r5
   27fd2:	484a      	ldr	r0, [pc, #296]	; (280fc <download_client_callback+0x224>)
   27fd4:	f00c fa98 	bl	34508 <log_0>
			first_fragment = true;
   27fd8:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   27fda:	483e      	ldr	r0, [pc, #248]	; (280d4 <download_client_callback+0x1fc>)
			first_fragment = true;
   27fdc:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   27fde:	f7ff fbb9 	bl	27754 <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   27fe2:	2002      	movs	r0, #2
   27fe4:	f7ff ff20 	bl	27e28 <send_error_evt>
			return err;
   27fe8:	e7b9      	b.n	27f5e <download_client_callback+0x86>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   27fea:	7833      	ldrb	r3, [r6, #0]
   27fec:	2b00      	cmp	r3, #0
   27fee:	d1b6      	bne.n	27f5e <download_client_callback+0x86>
			err = dfu_target_offset_get(&offset);
   27ff0:	a801      	add	r0, sp, #4
   27ff2:	f000 f931 	bl	28258 <dfu_target_offset_get>
			if (err != 0) {
   27ff6:	4604      	mov	r4, r0
   27ff8:	2800      	cmp	r0, #0
   27ffa:	d188      	bne.n	27f0e <download_client_callback+0x36>
			if (file_size == 0) {
   27ffc:	4b34      	ldr	r3, [pc, #208]	; (280d0 <download_client_callback+0x1f8>)
   27ffe:	681a      	ldr	r2, [r3, #0]
   28000:	2a00      	cmp	r2, #0
   28002:	d084      	beq.n	27f0e <download_client_callback+0x36>
			send_progress((offset * 100) / file_size);
   28004:	2364      	movs	r3, #100	; 0x64
   28006:	9901      	ldr	r1, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   28008:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   2800c:	434b      	muls	r3, r1
   2800e:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   28012:	9303      	str	r3, [sp, #12]
	callback(&evt);
   28014:	4b3a      	ldr	r3, [pc, #232]	; (28100 <download_client_callback+0x228>)
   28016:	a802      	add	r0, sp, #8
   28018:	681b      	ldr	r3, [r3, #0]
   2801a:	4798      	blx	r3
}
   2801c:	e79f      	b.n	27f5e <download_client_callback+0x86>
		err = dfu_target_done(true);
   2801e:	2001      	movs	r0, #1
   28020:	f000 f930 	bl	28284 <dfu_target_done>
		if (err != 0) {
   28024:	4604      	mov	r4, r0
   28026:	b158      	cbz	r0, 28040 <download_client_callback+0x168>
   28028:	4b2c      	ldr	r3, [pc, #176]	; (280dc <download_client_callback+0x204>)
   2802a:	4a2d      	ldr	r2, [pc, #180]	; (280e0 <download_client_callback+0x208>)
			LOG_ERR("dfu_target_done error: %d", err);
   2802c:	4601      	mov	r1, r0
   2802e:	1ad2      	subs	r2, r2, r3
   28030:	08d2      	lsrs	r2, r2, #3
   28032:	0192      	lsls	r2, r2, #6
   28034:	4833      	ldr	r0, [pc, #204]	; (28104 <download_client_callback+0x22c>)
   28036:	f042 0201 	orr.w	r2, r2, #1
   2803a:	f00c fa74 	bl	34526 <log_1>
   2803e:	e766      	b.n	27f0e <download_client_callback+0x36>
		err = download_client_disconnect(&dlc);
   28040:	4824      	ldr	r0, [pc, #144]	; (280d4 <download_client_callback+0x1fc>)
   28042:	f7ff fb87 	bl	27754 <download_client_disconnect>
		if (err != 0) {
   28046:	4604      	mov	r4, r0
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   28048:	2001      	movs	r0, #1
		if (err != 0) {
   2804a:	2c00      	cmp	r4, #0
   2804c:	d1ca      	bne.n	27fe4 <download_client_callback+0x10c>
		send_evt(FOTA_DOWNLOAD_EVT_FINISHED);
   2804e:	f7ff fedb 	bl	27e08 <send_evt>
		first_fragment = true;
   28052:	2201      	movs	r2, #1
   28054:	4b1d      	ldr	r3, [pc, #116]	; (280cc <download_client_callback+0x1f4>)
   28056:	701a      	strb	r2, [r3, #0]
		break;
   28058:	e781      	b.n	27f5e <download_client_callback+0x86>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   2805a:	4e2b      	ldr	r6, [pc, #172]	; (28108 <download_client_callback+0x230>)
   2805c:	4c20      	ldr	r4, [pc, #128]	; (280e0 <download_client_callback+0x208>)
   2805e:	6831      	ldr	r1, [r6, #0]
   28060:	4f1e      	ldr	r7, [pc, #120]	; (280dc <download_client_callback+0x204>)
   28062:	b191      	cbz	r1, 2808a <download_client_callback+0x1b2>
   28064:	6843      	ldr	r3, [r0, #4]
   28066:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2806a:	d001      	beq.n	28070 <download_client_callback+0x198>
   2806c:	3368      	adds	r3, #104	; 0x68
   2806e:	d10c      	bne.n	2808a <download_client_callback+0x1b2>
   28070:	1be2      	subs	r2, r4, r7
   28072:	08d2      	lsrs	r2, r2, #3
			LOG_WRN("Download socket error. %d retries left...",
   28074:	0192      	lsls	r2, r2, #6
   28076:	4825      	ldr	r0, [pc, #148]	; (2810c <download_client_callback+0x234>)
   28078:	f042 0202 	orr.w	r2, r2, #2
   2807c:	f00c fa53 	bl	34526 <log_1>
			socket_retries_left--;
   28080:	6833      	ldr	r3, [r6, #0]
   28082:	3b01      	subs	r3, #1
   28084:	6033      	str	r3, [r6, #0]
	switch (event->id) {
   28086:	2400      	movs	r4, #0
   28088:	e769      	b.n	27f5e <download_client_callback+0x86>
   2808a:	1be4      	subs	r4, r4, r7
   2808c:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("Download client error");
   2808e:	01a4      	lsls	r4, r4, #6
			download_client_disconnect(&dlc);
   28090:	4810      	ldr	r0, [pc, #64]	; (280d4 <download_client_callback+0x1fc>)
			LOG_ERR("Download client error");
   28092:	f044 0401 	orr.w	r4, r4, #1
			download_client_disconnect(&dlc);
   28096:	f7ff fb5d 	bl	27754 <download_client_disconnect>
			LOG_ERR("Download client error");
   2809a:	4621      	mov	r1, r4
   2809c:	481c      	ldr	r0, [pc, #112]	; (28110 <download_client_callback+0x238>)
   2809e:	f00c fa33 	bl	34508 <log_0>
			err = dfu_target_done(false);
   280a2:	2000      	movs	r0, #0
   280a4:	f000 f8ee 	bl	28284 <dfu_target_done>
			if (err == -EACCES) {
   280a8:	f110 0f0d 	cmn.w	r0, #13
   280ac:	d004      	beq.n	280b8 <download_client_callback+0x1e0>
			} else if (err != 0) {
   280ae:	b118      	cbz	r0, 280b8 <download_client_callback+0x1e0>
				LOG_ERR("Unable to deinitialze resources "
   280b0:	4621      	mov	r1, r4
   280b2:	4818      	ldr	r0, [pc, #96]	; (28114 <download_client_callback+0x23c>)
   280b4:	f00c fa28 	bl	34508 <log_0>
			first_fragment = true;
   280b8:	2001      	movs	r0, #1
   280ba:	4b04      	ldr	r3, [pc, #16]	; (280cc <download_client_callback+0x1f4>)
   280bc:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   280be:	f7ff feb3 	bl	27e28 <send_error_evt>
			return event->error;
   280c2:	686c      	ldr	r4, [r5, #4]
   280c4:	e74b      	b.n	27f5e <download_client_callback+0x86>
		return -EINVAL;
   280c6:	f06f 0415 	mvn.w	r4, #21
   280ca:	e748      	b.n	27f5e <download_client_callback+0x86>
   280cc:	20020638 	.word	0x20020638
   280d0:	2002385c 	.word	0x2002385c
   280d4:	20021878 	.word	0x20021878
   280d8:	0003697b 	.word	0x0003697b
   280dc:	0003831c 	.word	0x0003831c
   280e0:	00038394 	.word	0x00038394
   280e4:	0003c3d4 	.word	0x0003c3d4
   280e8:	0003c3ed 	.word	0x0003c3ed
   280ec:	20023188 	.word	0x20023188
   280f0:	20023348 	.word	0x20023348
   280f4:	0003c408 	.word	0x0003c408
   280f8:	0003c42d 	.word	0x0003c42d
   280fc:	0003c447 	.word	0x0003c447
   28100:	20023858 	.word	0x20023858
   28104:	0003c46b 	.word	0x0003c46b
   28108:	20023860 	.word	0x20023860
   2810c:	0003c485 	.word	0x0003c485
   28110:	0003c4af 	.word	0x0003c4af
   28114:	0003c4c5 	.word	0x0003c4c5

00028118 <fota_download_start>:

int fota_download_start(const char *host, const char *file, int sec_tag,
			const char *apn, size_t fragment_size)
{
   28118:	b530      	push	{r4, r5, lr}
   2811a:	b085      	sub	sp, #20
	int err = -1;

	struct download_client_cfg config = {
   2811c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28120:	9b08      	ldr	r3, [sp, #32]
{
   28122:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   28124:	9303      	str	r3, [sp, #12]
		.sec_tag = sec_tag,
		.apn = apn,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   28126:	4601      	mov	r1, r0
   28128:	b1c8      	cbz	r0, 2815e <fota_download_start+0x46>
   2812a:	b1c5      	cbz	r5, 2815e <fota_download_start+0x46>
   2812c:	4b0d      	ldr	r3, [pc, #52]	; (28164 <fota_download_start+0x4c>)
   2812e:	681b      	ldr	r3, [r3, #0]
   28130:	b1ab      	cbz	r3, 2815e <fota_download_start+0x46>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   28132:	2202      	movs	r2, #2
   28134:	4b0c      	ldr	r3, [pc, #48]	; (28168 <fota_download_start+0x50>)
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   28136:	480d      	ldr	r0, [pc, #52]	; (2816c <fota_download_start+0x54>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   28138:	601a      	str	r2, [r3, #0]
	err = download_client_connect(&dlc, host, &config);
   2813a:	aa01      	add	r2, sp, #4
   2813c:	f7ff f928 	bl	27390 <download_client_connect>
	if (err != 0) {
   28140:	4604      	mov	r4, r0
   28142:	b948      	cbnz	r0, 28158 <fota_download_start+0x40>
		return err;
	}

	err = download_client_start(&dlc, file, 0);
   28144:	4602      	mov	r2, r0
   28146:	4629      	mov	r1, r5
   28148:	4808      	ldr	r0, [pc, #32]	; (2816c <fota_download_start+0x54>)
   2814a:	f7ff fc49 	bl	279e0 <download_client_start>
	if (err != 0) {
   2814e:	4604      	mov	r4, r0
   28150:	b110      	cbz	r0, 28158 <fota_download_start+0x40>
		download_client_disconnect(&dlc);
   28152:	4806      	ldr	r0, [pc, #24]	; (2816c <fota_download_start+0x54>)
   28154:	f7ff fafe 	bl	27754 <download_client_disconnect>
		return err;
	}

	return 0;
}
   28158:	4620      	mov	r0, r4
   2815a:	b005      	add	sp, #20
   2815c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2815e:	f06f 0415 	mvn.w	r4, #21
   28162:	e7f9      	b.n	28158 <fota_download_start+0x40>
   28164:	20023858 	.word	0x20023858
   28168:	20023860 	.word	0x20023860
   2816c:	20021878 	.word	0x20021878

00028170 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   28170:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   28172:	b158      	cbz	r0, 2818c <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   28174:	4b07      	ldr	r3, [pc, #28]	; (28194 <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   28176:	4908      	ldr	r1, [pc, #32]	; (28198 <fota_download_init+0x28>)
	callback = client_callback;
   28178:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   2817a:	4808      	ldr	r0, [pc, #32]	; (2819c <fota_download_init+0x2c>)
   2817c:	f00e fedf 	bl	36f3e <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   28180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   28184:	4906      	ldr	r1, [pc, #24]	; (281a0 <fota_download_init+0x30>)
   28186:	4807      	ldr	r0, [pc, #28]	; (281a4 <fota_download_init+0x34>)
   28188:	f7ff b8d8 	b.w	2733c <download_client_init>
}
   2818c:	f06f 0015 	mvn.w	r0, #21
   28190:	bd08      	pop	{r3, pc}
   28192:	bf00      	nop
   28194:	20023858 	.word	0x20023858
   28198:	00027e4d 	.word	0x00027e4d
   2819c:	20023188 	.word	0x20023188
   281a0:	00027ed9 	.word	0x00027ed9
   281a4:	20021878 	.word	0x20021878

000281a8 <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   281a8:	b538      	push	{r3, r4, r5, lr}
   281aa:	4605      	mov	r5, r0
   281ac:	460c      	mov	r4, r1
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   281ae:	f000 faf7 	bl	287a0 <dfu_target_mcuboot_identify>
   281b2:	b990      	cbnz	r0, 281da <dfu_target_img_type+0x32>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (dfu_target_modem_identify(buf)) {
   281b4:	4628      	mov	r0, r5
   281b6:	f000 f947 	bl	28448 <dfu_target_modem_identify>
   281ba:	b980      	cbnz	r0, 281de <dfu_target_img_type+0x36>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}
#endif
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   281bc:	2c1f      	cmp	r4, #31
   281be:	d910      	bls.n	281e2 <dfu_target_img_type+0x3a>
   281c0:	4b09      	ldr	r3, [pc, #36]	; (281e8 <dfu_target_img_type+0x40>)
   281c2:	490a      	ldr	r1, [pc, #40]	; (281ec <dfu_target_img_type+0x44>)
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   281c4:	480a      	ldr	r0, [pc, #40]	; (281f0 <dfu_target_img_type+0x48>)
   281c6:	1ac9      	subs	r1, r1, r3
   281c8:	08c9      	lsrs	r1, r1, #3
   281ca:	0189      	lsls	r1, r1, #6
   281cc:	f041 0101 	orr.w	r1, r1, #1
   281d0:	f00c f99a 	bl	34508 <log_0>
	return -ENOTSUP;
   281d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   281d8:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   281da:	2001      	movs	r0, #1
   281dc:	e7fc      	b.n	281d8 <dfu_target_img_type+0x30>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   281de:	2002      	movs	r0, #2
   281e0:	e7fa      	b.n	281d8 <dfu_target_img_type+0x30>
		return -EAGAIN;
   281e2:	f06f 000a 	mvn.w	r0, #10
   281e6:	e7f7      	b.n	281d8 <dfu_target_img_type+0x30>
   281e8:	0003831c 	.word	0x0003831c
   281ec:	0003835c 	.word	0x0003835c
   281f0:	0003c51c 	.word	0x0003c51c

000281f4 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
   281f4:	4603      	mov	r3, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   281f6:	2b01      	cmp	r3, #1
{
   281f8:	4608      	mov	r0, r1
   281fa:	b570      	push	{r4, r5, r6, lr}
   281fc:	4611      	mov	r1, r2
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   281fe:	d00e      	beq.n	2821e <dfu_target_init+0x2a>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   28200:	2b02      	cmp	r3, #2
   28202:	d018      	beq.n	28236 <dfu_target_init+0x42>
   28204:	4b0e      	ldr	r3, [pc, #56]	; (28240 <dfu_target_init+0x4c>)
   28206:	490f      	ldr	r1, [pc, #60]	; (28244 <dfu_target_init+0x50>)
		new_target = &dfu_target_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   28208:	480f      	ldr	r0, [pc, #60]	; (28248 <dfu_target_init+0x54>)
   2820a:	1ac9      	subs	r1, r1, r3
   2820c:	08c9      	lsrs	r1, r1, #3
   2820e:	0189      	lsls	r1, r1, #6
   28210:	f041 0101 	orr.w	r1, r1, #1
   28214:	f00c f978 	bl	34508 <log_0>
		return -ENOTSUP;
   28218:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size, cb);
}
   2821c:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   2821e:	4c0b      	ldr	r4, [pc, #44]	; (2824c <dfu_target_init+0x58>)
	if (new_target == current_target
   28220:	4d0b      	ldr	r5, [pc, #44]	; (28250 <dfu_target_init+0x5c>)
   28222:	682a      	ldr	r2, [r5, #0]
   28224:	42a2      	cmp	r2, r4
   28226:	d101      	bne.n	2822c <dfu_target_init+0x38>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   28228:	2b02      	cmp	r3, #2
   2822a:	d106      	bne.n	2823a <dfu_target_init+0x46>
	return current_target->init(file_size, cb);
   2822c:	6823      	ldr	r3, [r4, #0]
	current_target = new_target;
   2822e:	602c      	str	r4, [r5, #0]
}
   28230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, cb);
   28234:	4718      	bx	r3
		new_target = &dfu_target_modem;
   28236:	4c07      	ldr	r4, [pc, #28]	; (28254 <dfu_target_init+0x60>)
   28238:	e7f2      	b.n	28220 <dfu_target_init+0x2c>
		return 0;
   2823a:	2000      	movs	r0, #0
   2823c:	e7ee      	b.n	2821c <dfu_target_init+0x28>
   2823e:	bf00      	nop
   28240:	0003831c 	.word	0x0003831c
   28244:	0003835c 	.word	0x0003835c
   28248:	0003c53a 	.word	0x0003c53a
   2824c:	00038b48 	.word	0x00038b48
   28250:	20023864 	.word	0x20023864
   28254:	00038b58 	.word	0x00038b58

00028258 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   28258:	4b03      	ldr	r3, [pc, #12]	; (28268 <dfu_target_offset_get+0x10>)
   2825a:	681b      	ldr	r3, [r3, #0]
   2825c:	b10b      	cbz	r3, 28262 <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   2825e:	685b      	ldr	r3, [r3, #4]
   28260:	4718      	bx	r3
}
   28262:	f06f 000c 	mvn.w	r0, #12
   28266:	4770      	bx	lr
   28268:	20023864 	.word	0x20023864

0002826c <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   2826c:	4a04      	ldr	r2, [pc, #16]	; (28280 <dfu_target_write+0x14>)
   2826e:	6812      	ldr	r2, [r2, #0]
   28270:	b112      	cbz	r2, 28278 <dfu_target_write+0xc>
   28272:	b108      	cbz	r0, 28278 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   28274:	6893      	ldr	r3, [r2, #8]
   28276:	4718      	bx	r3
}
   28278:	f06f 000c 	mvn.w	r0, #12
   2827c:	4770      	bx	lr
   2827e:	bf00      	nop
   28280:	20023864 	.word	0x20023864

00028284 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   28284:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   28286:	4e0d      	ldr	r6, [pc, #52]	; (282bc <dfu_target_done+0x38>)
{
   28288:	4605      	mov	r5, r0
	if (current_target == NULL) {
   2828a:	6833      	ldr	r3, [r6, #0]
   2828c:	b19b      	cbz	r3, 282b6 <dfu_target_done+0x32>
		return -EACCES;
	}

	err = current_target->done(successful);
   2828e:	68db      	ldr	r3, [r3, #12]
   28290:	4798      	blx	r3
	if (err != 0) {
   28292:	4604      	mov	r4, r0
   28294:	b158      	cbz	r0, 282ae <dfu_target_done+0x2a>
   28296:	490a      	ldr	r1, [pc, #40]	; (282c0 <dfu_target_done+0x3c>)
   28298:	4b0a      	ldr	r3, [pc, #40]	; (282c4 <dfu_target_done+0x40>)
		LOG_ERR("Unable to clean up dfu_target");
   2829a:	480b      	ldr	r0, [pc, #44]	; (282c8 <dfu_target_done+0x44>)
   2829c:	1ac9      	subs	r1, r1, r3
   2829e:	08c9      	lsrs	r1, r1, #3
   282a0:	0189      	lsls	r1, r1, #6
   282a2:	f041 0101 	orr.w	r1, r1, #1
   282a6:	f00c f92f 	bl	34508 <log_0>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   282aa:	4620      	mov	r0, r4
   282ac:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   282ae:	2d00      	cmp	r5, #0
   282b0:	d0fb      	beq.n	282aa <dfu_target_done+0x26>
		current_target = NULL;
   282b2:	6030      	str	r0, [r6, #0]
   282b4:	e7f9      	b.n	282aa <dfu_target_done+0x26>
		return -EACCES;
   282b6:	f06f 040c 	mvn.w	r4, #12
   282ba:	e7f6      	b.n	282aa <dfu_target_done+0x26>
   282bc:	20023864 	.word	0x20023864
   282c0:	0003835c 	.word	0x0003835c
   282c4:	0003831c 	.word	0x0003831c
   282c8:	0003c54d 	.word	0x0003c54d

000282cc <dfu_target_reset>:

int dfu_target_reset(void)
{
   282cc:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   282ce:	4d0b      	ldr	r5, [pc, #44]	; (282fc <dfu_target_reset+0x30>)
   282d0:	682a      	ldr	r2, [r5, #0]
   282d2:	b182      	cbz	r2, 282f6 <dfu_target_reset+0x2a>
		int err = current_target->done(false);
   282d4:	2000      	movs	r0, #0
   282d6:	68d3      	ldr	r3, [r2, #12]
   282d8:	4798      	blx	r3

		if (err != 0) {
   282da:	4604      	mov	r4, r0
   282dc:	b158      	cbz	r0, 282f6 <dfu_target_reset+0x2a>
   282de:	4908      	ldr	r1, [pc, #32]	; (28300 <dfu_target_reset+0x34>)
   282e0:	4b08      	ldr	r3, [pc, #32]	; (28304 <dfu_target_reset+0x38>)
			LOG_ERR("Unable to clean up dfu_target");
   282e2:	4809      	ldr	r0, [pc, #36]	; (28308 <dfu_target_reset+0x3c>)
   282e4:	1ac9      	subs	r1, r1, r3
   282e6:	08c9      	lsrs	r1, r1, #3
   282e8:	0189      	lsls	r1, r1, #6
   282ea:	f041 0101 	orr.w	r1, r1, #1
   282ee:	f00c f90b 	bl	34508 <log_0>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   282f2:	4620      	mov	r0, r4
   282f4:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   282f6:	2400      	movs	r4, #0
   282f8:	602c      	str	r4, [r5, #0]
	return 0;
   282fa:	e7fa      	b.n	282f2 <dfu_target_reset+0x26>
   282fc:	20023864 	.word	0x20023864
   28300:	0003835c 	.word	0x0003835c
   28304:	0003831c 	.word	0x0003831c
   28308:	0003c54d 	.word	0x0003c54d

0002830c <get_modem_error>:
static int  fd;
static int  offset;
static dfu_target_callback_t callback;

static int get_modem_error(void)
{
   2830c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   2830e:	2200      	movs	r2, #0
   28310:	2304      	movs	r3, #4
   28312:	e9cd 2302 	strd	r2, r3, [sp, #8]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   28316:	4b0e      	ldr	r3, [pc, #56]	; (28350 <get_modem_error+0x44>)
   28318:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   2831a:	ab03      	add	r3, sp, #12
   2831c:	9300      	str	r3, [sp, #0]
   2831e:	2214      	movs	r2, #20
   28320:	f240 2103 	movw	r1, #515	; 0x203
   28324:	ab02      	add	r3, sp, #8
   28326:	f00c fda0 	bl	34e6a <z_impl_zsock_getsockopt>
	if (rc) {
   2832a:	b168      	cbz	r0, 28348 <get_modem_error+0x3c>
   2832c:	4a09      	ldr	r2, [pc, #36]	; (28354 <get_modem_error+0x48>)
   2832e:	4c0a      	ldr	r4, [pc, #40]	; (28358 <get_modem_error+0x4c>)
   28330:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   28332:	f00c fff0 	bl	35316 <__errno>
   28336:	08e4      	lsrs	r4, r4, #3
   28338:	01a4      	lsls	r4, r4, #6
   2833a:	f044 0401 	orr.w	r4, r4, #1
   2833e:	6801      	ldr	r1, [r0, #0]
   28340:	4622      	mov	r2, r4
   28342:	4806      	ldr	r0, [pc, #24]	; (2835c <get_modem_error+0x50>)
   28344:	f00c f8ef 	bl	34526 <log_1>
	}

	return err;
}
   28348:	9802      	ldr	r0, [sp, #8]
   2834a:	b004      	add	sp, #16
   2834c:	bd10      	pop	{r4, pc}
   2834e:	bf00      	nop
   28350:	2002386c 	.word	0x2002386c
   28354:	0003831c 	.word	0x0003831c
   28358:	0003836c 	.word	0x0003836c
   2835c:	0003c56b 	.word	0x0003c56b

00028360 <delete_banked_modem_fw>:
}
#define SLEEP_TIME 1
static int delete_banked_modem_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   28360:	2304      	movs	r3, #4
{
   28362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28366:	4a2f      	ldr	r2, [pc, #188]	; (28424 <delete_banked_modem_fw+0xc4>)
   28368:	4c2f      	ldr	r4, [pc, #188]	; (28428 <delete_banked_modem_fw+0xc8>)
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   2836a:	4e30      	ldr	r6, [pc, #192]	; (2842c <delete_banked_modem_fw+0xcc>)
   2836c:	1aa4      	subs	r4, r4, r2
   2836e:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Deleting firmware image, this can take several minutes");
   28370:	01a4      	lsls	r4, r4, #6
{
   28372:	b085      	sub	sp, #20
	LOG_INF("Deleting firmware image, this can take several minutes");
   28374:	482e      	ldr	r0, [pc, #184]	; (28430 <delete_banked_modem_fw+0xd0>)
   28376:	f044 0103 	orr.w	r1, r4, #3
	socklen_t len = sizeof(offset);
   2837a:	9303      	str	r3, [sp, #12]
	LOG_INF("Deleting firmware image, this can take several minutes");
   2837c:	f00c f8c4 	bl	34508 <log_0>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   28380:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   28382:	2300      	movs	r3, #0
   28384:	2206      	movs	r2, #6
   28386:	f240 2103 	movw	r1, #515	; 0x203
   2838a:	9300      	str	r3, [sp, #0]
   2838c:	f00c fd88 	bl	34ea0 <z_impl_zsock_setsockopt>
	if (err < 0) {
   28390:	2800      	cmp	r0, #0
   28392:	da0d      	bge.n	283b0 <delete_banked_modem_fw+0x50>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   28394:	f00c ffbf 	bl	35316 <__errno>
   28398:	f044 0401 	orr.w	r4, r4, #1
   2839c:	6801      	ldr	r1, [r0, #0]
   2839e:	4622      	mov	r2, r4
   283a0:	4824      	ldr	r0, [pc, #144]	; (28434 <delete_banked_modem_fw+0xd4>)
   283a2:	f00c f8c0 	bl	34526 <log_1>
		return -EFAULT;
   283a6:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   283aa:	b005      	add	sp, #20
   283ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   283b0:	253c      	movs	r5, #60	; 0x3c
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   283b2:	4f21      	ldr	r7, [pc, #132]	; (28438 <delete_banked_modem_fw+0xd8>)
				callback(DFU_TARGET_EVT_TIMEOUT);
   283b4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2843c <delete_banked_modem_fw+0xdc>
					LOG_ERR("DFU error: %d", err);
   283b8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 28444 <delete_banked_modem_fw+0xe4>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   283bc:	6830      	ldr	r0, [r6, #0]
   283be:	ab03      	add	r3, sp, #12
   283c0:	9300      	str	r3, [sp, #0]
   283c2:	2207      	movs	r2, #7
   283c4:	463b      	mov	r3, r7
   283c6:	f240 2103 	movw	r1, #515	; 0x203
   283ca:	f00c fd4e 	bl	34e6a <z_impl_zsock_getsockopt>
		if (err < 0) {
   283ce:	2800      	cmp	r0, #0
   283d0:	da1d      	bge.n	2840e <delete_banked_modem_fw+0xae>
			if (timeout < 0) {
   283d2:	2d00      	cmp	r5, #0
   283d4:	da04      	bge.n	283e0 <delete_banked_modem_fw+0x80>
				callback(DFU_TARGET_EVT_TIMEOUT);
   283d6:	2000      	movs	r0, #0
   283d8:	f8d8 3000 	ldr.w	r3, [r8]
   283dc:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   283de:	253c      	movs	r5, #60	; 0x3c
			if (errno == ENOEXEC) {
   283e0:	f00c ff99 	bl	35316 <__errno>
   283e4:	6803      	ldr	r3, [r0, #0]
   283e6:	2b08      	cmp	r3, #8
   283e8:	d10f      	bne.n	2840a <delete_banked_modem_fw+0xaa>
				err = get_modem_error();
   283ea:	f7ff ff8f 	bl	2830c <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   283ee:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   283f2:	4601      	mov	r1, r0
				if (err != DFU_ERASE_PENDING) {
   283f4:	d004      	beq.n	28400 <delete_banked_modem_fw+0xa0>
					LOG_ERR("DFU error: %d", err);
   283f6:	4648      	mov	r0, r9
   283f8:	f044 0201 	orr.w	r2, r4, #1
   283fc:	f00c f893 	bl	34526 <log_1>
	return z_impl_k_sleep(timeout);
   28400:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   28404:	2100      	movs	r1, #0
   28406:	f009 ff77 	bl	322f8 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   2840a:	3d01      	subs	r5, #1
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2840c:	e7d6      	b.n	283bc <delete_banked_modem_fw+0x5c>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   2840e:	4b0b      	ldr	r3, [pc, #44]	; (2843c <delete_banked_modem_fw+0xdc>)
   28410:	2001      	movs	r0, #1
   28412:	681b      	ldr	r3, [r3, #0]
   28414:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   28416:	480a      	ldr	r0, [pc, #40]	; (28440 <delete_banked_modem_fw+0xe0>)
   28418:	f044 0103 	orr.w	r1, r4, #3
   2841c:	f00c f874 	bl	34508 <log_0>
	return 0;
   28420:	2000      	movs	r0, #0
   28422:	e7c2      	b.n	283aa <delete_banked_modem_fw+0x4a>
   28424:	0003831c 	.word	0x0003831c
   28428:	0003836c 	.word	0x0003836c
   2842c:	2002386c 	.word	0x2002386c
   28430:	0003c591 	.word	0x0003c591
   28434:	0003c5c8 	.word	0x0003c5c8
   28438:	20023870 	.word	0x20023870
   2843c:	20023868 	.word	0x20023868
   28440:	0003c5f8 	.word	0x0003c5f8
   28444:	0003c5ea 	.word	0x0003c5ea

00028448 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   28448:	6840      	ldr	r0, [r0, #4]

}
   2844a:	4b02      	ldr	r3, [pc, #8]	; (28454 <dfu_target_modem_identify+0xc>)
   2844c:	1ac3      	subs	r3, r0, r3
   2844e:	4258      	negs	r0, r3
   28450:	4158      	adcs	r0, r3
   28452:	4770      	bx	lr
   28454:	7544656d 	.word	0x7544656d

00028458 <dfu_target_modem_init>:

int dfu_target_modem_init(size_t file_size, dfu_target_callback_t cb)
{
	int err;
	size_t scratch_space;
	socklen_t len = sizeof(offset);
   28458:	2304      	movs	r3, #4
{
   2845a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2845e:	b099      	sub	sp, #100	; 0x64
	socklen_t len = sizeof(offset);
   28460:	9303      	str	r3, [sp, #12]

	callback = cb;
   28462:	4b5e      	ldr	r3, [pc, #376]	; (285dc <dfu_target_modem_init+0x184>)
{
   28464:	4606      	mov	r6, r0
	callback = cb;
   28466:	6019      	str	r1, [r3, #0]
	return z_impl_zsock_socket(family, type, proto);
   28468:	f240 2203 	movw	r2, #515	; 0x203
   2846c:	2101      	movs	r1, #1
   2846e:	2006      	movs	r0, #6
   28470:	f7f8 fca2 	bl	20db8 <z_impl_zsock_socket>
   28474:	4c5a      	ldr	r4, [pc, #360]	; (285e0 <dfu_target_modem_init+0x188>)
   28476:	4a5b      	ldr	r2, [pc, #364]	; (285e4 <dfu_target_modem_init+0x18c>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   28478:	4f5b      	ldr	r7, [pc, #364]	; (285e8 <dfu_target_modem_init+0x190>)
   2847a:	1aa4      	subs	r4, r4, r2
   2847c:	08e4      	lsrs	r4, r4, #3
	if (fd < 0) {
   2847e:	2800      	cmp	r0, #0
   28480:	463d      	mov	r5, r7
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   28482:	6038      	str	r0, [r7, #0]
	if (fd < 0) {
   28484:	ea4f 1484 	mov.w	r4, r4, lsl #6
   28488:	da2c      	bge.n	284e4 <dfu_target_modem_init+0x8c>
		LOG_ERR("Failed to open Modem DFU socket.");
   2848a:	4858      	ldr	r0, [pc, #352]	; (285ec <dfu_target_modem_init+0x194>)
   2848c:	f044 0101 	orr.w	r1, r4, #1
   28490:	f00c f83a 	bl	34508 <log_0>
		return fd;
   28494:	6838      	ldr	r0, [r7, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   28496:	2800      	cmp	r0, #0
   28498:	db45      	blt.n	28526 <dfu_target_modem_init+0xce>
		return err;
	}

	err = getsockopt(fd, SOL_DFU, SO_DFU_RESOURCES, &scratch_space, &len);
   2849a:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   2849c:	af03      	add	r7, sp, #12
   2849e:	2202      	movs	r2, #2
   284a0:	f240 2103 	movw	r1, #515	; 0x203
   284a4:	9700      	str	r7, [sp, #0]
   284a6:	ab0e      	add	r3, sp, #56	; 0x38
   284a8:	f00c fcdf 	bl	34e6a <z_impl_zsock_getsockopt>
	if (err < 0) {
   284ac:	2800      	cmp	r0, #0
   284ae:	da0d      	bge.n	284cc <dfu_target_modem_init+0x74>
		if (errno == ENOEXEC) {
   284b0:	f00c ff31 	bl	35316 <__errno>
   284b4:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   284b6:	f044 0801 	orr.w	r8, r4, #1
		if (errno == ENOEXEC) {
   284ba:	2b08      	cmp	r3, #8
   284bc:	d146      	bne.n	2854c <dfu_target_modem_init+0xf4>
			LOG_ERR("Modem error: %d", get_modem_error());
   284be:	f7ff ff25 	bl	2830c <get_modem_error>
   284c2:	4642      	mov	r2, r8
   284c4:	4601      	mov	r1, r0
   284c6:	484a      	ldr	r0, [pc, #296]	; (285f0 <dfu_target_modem_init+0x198>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   284c8:	f00c f82d 	bl	34526 <log_1>
		}
	}

	if (file_size > scratch_space) {
   284cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   284ce:	42b2      	cmp	r2, r6
   284d0:	d242      	bcs.n	28558 <dfu_target_modem_init+0x100>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   284d2:	4848      	ldr	r0, [pc, #288]	; (285f4 <dfu_target_modem_init+0x19c>)
   284d4:	4631      	mov	r1, r6
   284d6:	f044 0301 	orr.w	r3, r4, #1
   284da:	f00c f83b 	bl	34554 <log_2>
			file_size, scratch_space);
		return -EFBIG;
   284de:	f06f 001a 	mvn.w	r0, #26
   284e2:	e020      	b.n	28526 <dfu_target_modem_init+0xce>
	len = sizeof(version);
   284e4:	f04f 0924 	mov.w	r9, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   284e8:	f044 0803 	orr.w	r8, r4, #3
   284ec:	4641      	mov	r1, r8
   284ee:	4842      	ldr	r0, [pc, #264]	; (285f8 <dfu_target_modem_init+0x1a0>)
   284f0:	f00c f80a 	bl	34508 <log_0>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   284f4:	6838      	ldr	r0, [r7, #0]
	len = sizeof(version);
   284f6:	f8cd 9010 	str.w	r9, [sp, #16]
   284fa:	ab04      	add	r3, sp, #16
   284fc:	af05      	add	r7, sp, #20
   284fe:	9300      	str	r3, [sp, #0]
   28500:	2201      	movs	r2, #1
   28502:	463b      	mov	r3, r7
   28504:	f240 2103 	movw	r1, #515	; 0x203
   28508:	f00c fcaf 	bl	34e6a <z_impl_zsock_getsockopt>
	if (err < 0) {
   2850c:	2800      	cmp	r0, #0
   2850e:	da0d      	bge.n	2852c <dfu_target_modem_init+0xd4>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   28510:	f00c ff01 	bl	35316 <__errno>
   28514:	f044 0401 	orr.w	r4, r4, #1
   28518:	6801      	ldr	r1, [r0, #0]
   2851a:	4622      	mov	r2, r4
   2851c:	4837      	ldr	r0, [pc, #220]	; (285fc <dfu_target_modem_init+0x1a4>)
   2851e:	f00c f802 	bl	34526 <log_1>
		return -1;
   28522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
}
   28526:	b019      	add	sp, #100	; 0x64
   28528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   2852c:	464b      	mov	r3, r9
   2852e:	2125      	movs	r1, #37	; 0x25
   28530:	4a33      	ldr	r2, [pc, #204]	; (28600 <dfu_target_modem_init+0x1a8>)
   28532:	9700      	str	r7, [sp, #0]
   28534:	a80e      	add	r0, sp, #56	; 0x38
   28536:	f00a fe9b 	bl	33270 <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   2853a:	a80e      	add	r0, sp, #56	; 0x38
   2853c:	f7f7 ff6e 	bl	2041c <log_strdup>
   28540:	4642      	mov	r2, r8
   28542:	4601      	mov	r1, r0
   28544:	482f      	ldr	r0, [pc, #188]	; (28604 <dfu_target_modem_init+0x1ac>)
   28546:	f00b ffee 	bl	34526 <log_1>
	if (err < 0) {
   2854a:	e7a6      	b.n	2849a <dfu_target_modem_init+0x42>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2854c:	f00c fee3 	bl	35316 <__errno>
   28550:	4642      	mov	r2, r8
   28552:	6801      	ldr	r1, [r0, #0]
   28554:	482c      	ldr	r0, [pc, #176]	; (28608 <dfu_target_modem_init+0x1b0>)
   28556:	e7b7      	b.n	284c8 <dfu_target_modem_init+0x70>
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   28558:	6828      	ldr	r0, [r5, #0]
   2855a:	2207      	movs	r2, #7
   2855c:	f240 2103 	movw	r1, #515	; 0x203
   28560:	4b2a      	ldr	r3, [pc, #168]	; (2860c <dfu_target_modem_init+0x1b4>)
   28562:	9700      	str	r7, [sp, #0]
   28564:	f00c fc81 	bl	34e6a <z_impl_zsock_getsockopt>
	if (err < 0) {
   28568:	2800      	cmp	r0, #0
   2856a:	da0d      	bge.n	28588 <dfu_target_modem_init+0x130>
		if (errno == ENOEXEC) {
   2856c:	f00c fed3 	bl	35316 <__errno>
   28570:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   28572:	f044 0601 	orr.w	r6, r4, #1
		if (errno == ENOEXEC) {
   28576:	2b08      	cmp	r3, #8
   28578:	d10f      	bne.n	2859a <dfu_target_modem_init+0x142>
			LOG_ERR("Modem error: %d", get_modem_error());
   2857a:	f7ff fec7 	bl	2830c <get_modem_error>
   2857e:	4632      	mov	r2, r6
   28580:	4601      	mov	r1, r0
   28582:	481b      	ldr	r0, [pc, #108]	; (285f0 <dfu_target_modem_init+0x198>)
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   28584:	f00b ffcf 	bl	34526 <log_1>
	if (offset == DIRTY_IMAGE) {
   28588:	4e20      	ldr	r6, [pc, #128]	; (2860c <dfu_target_modem_init+0x1b4>)
   2858a:	6831      	ldr	r1, [r6, #0]
   2858c:	f5b1 1f20 	cmp.w	r1, #2621440	; 0x280000
   28590:	d109      	bne.n	285a6 <dfu_target_modem_init+0x14e>
		delete_banked_modem_fw();
   28592:	f7ff fee5 	bl	28360 <delete_banked_modem_fw>
	return 0;
   28596:	2000      	movs	r0, #0
   28598:	e7c5      	b.n	28526 <dfu_target_modem_init+0xce>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2859a:	f00c febc 	bl	35316 <__errno>
   2859e:	4632      	mov	r2, r6
   285a0:	6801      	ldr	r1, [r0, #0]
   285a2:	4819      	ldr	r0, [pc, #100]	; (28608 <dfu_target_modem_init+0x1b0>)
   285a4:	e7ee      	b.n	28584 <dfu_target_modem_init+0x12c>
	} else if (offset != 0) {
   285a6:	2900      	cmp	r1, #0
   285a8:	d0f5      	beq.n	28596 <dfu_target_modem_init+0x13e>
		LOG_INF("Setting offset to 0x%x", offset);
   285aa:	f044 0403 	orr.w	r4, r4, #3
   285ae:	4622      	mov	r2, r4
   285b0:	4817      	ldr	r0, [pc, #92]	; (28610 <dfu_target_modem_init+0x1b8>)
   285b2:	f00b ffb8 	bl	34526 <log_1>
		len = sizeof(offset);
   285b6:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   285b8:	6828      	ldr	r0, [r5, #0]
		len = sizeof(offset);
   285ba:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   285bc:	2207      	movs	r2, #7
   285be:	9300      	str	r3, [sp, #0]
   285c0:	f240 2103 	movw	r1, #515	; 0x203
   285c4:	4633      	mov	r3, r6
   285c6:	f00c fc6b 	bl	34ea0 <z_impl_zsock_setsockopt>
		if (err != 0) {
   285ca:	2800      	cmp	r0, #0
   285cc:	d0e3      	beq.n	28596 <dfu_target_modem_init+0x13e>
			LOG_INF("Error while setting offset: %d", offset);
   285ce:	4622      	mov	r2, r4
   285d0:	6831      	ldr	r1, [r6, #0]
   285d2:	4810      	ldr	r0, [pc, #64]	; (28614 <dfu_target_modem_init+0x1bc>)
   285d4:	f00b ffa7 	bl	34526 <log_1>
   285d8:	e7dd      	b.n	28596 <dfu_target_modem_init+0x13e>
   285da:	bf00      	nop
   285dc:	20023868 	.word	0x20023868
   285e0:	0003836c 	.word	0x0003836c
   285e4:	0003831c 	.word	0x0003831c
   285e8:	2002386c 	.word	0x2002386c
   285ec:	0003c611 	.word	0x0003c611
   285f0:	0003c695 	.word	0x0003c695
   285f4:	0003c6c2 	.word	0x0003c6c2
   285f8:	0003c632 	.word	0x0003c632
   285fc:	0003c64b 	.word	0x0003c64b
   28600:	0003c675 	.word	0x0003c675
   28604:	0003c67a 	.word	0x0003c67a
   28608:	0003c6a5 	.word	0x0003c6a5
   2860c:	20023870 	.word	0x20023870
   28610:	0003c6f1 	.word	0x0003c6f1
   28614:	0003c708 	.word	0x0003c708

00028618 <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   28618:	4b02      	ldr	r3, [pc, #8]	; (28624 <dfu_target_modem_offset_get+0xc>)
   2861a:	681b      	ldr	r3, [r3, #0]
   2861c:	6003      	str	r3, [r0, #0]
	return 0;
}
   2861e:	2000      	movs	r0, #0
   28620:	4770      	bx	lr
   28622:	bf00      	nop
   28624:	20023870 	.word	0x20023870

00028628 <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   28628:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int err = 0;
	int sent = 0;
   2862c:	2400      	movs	r4, #0
{
   2862e:	4607      	mov	r7, r0
   28630:	460d      	mov	r5, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   28632:	4626      	mov	r6, r4
	int modem_error = 0;
	int send_result = 0;

	while (send_result >= 0) {
		send_result = send(fd, (((uint8_t *)buf) + sent),
   28634:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 286d8 <dfu_target_modem_write+0xb0>
   28638:	f8d8 0000 	ldr.w	r0, [r8]
   2863c:	2300      	movs	r3, #0
   2863e:	e9cd 6600 	strd	r6, r6, [sp]
   28642:	1b2a      	subs	r2, r5, r4
   28644:	1939      	adds	r1, r7, r4
   28646:	f00c fbcf 	bl	34de8 <z_impl_zsock_sendto>
				   (len - sent), 0);
		if (send_result > 0) {
   2864a:	2800      	cmp	r0, #0
   2864c:	dd0a      	ble.n	28664 <dfu_target_modem_write+0x3c>
			sent += send_result;
   2864e:	4404      	add	r4, r0
			if (sent >= len) {
   28650:	42ac      	cmp	r4, r5
   28652:	d3f1      	bcc.n	28638 <dfu_target_modem_write+0x10>
				offset += len;
				return 0;
   28654:	2000      	movs	r0, #0
				offset += len;
   28656:	4b1c      	ldr	r3, [pc, #112]	; (286c8 <dfu_target_modem_write+0xa0>)
   28658:	6819      	ldr	r1, [r3, #0]
   2865a:	4429      	add	r1, r5
   2865c:	6019      	str	r1, [r3, #0]
			return 0;
		}
	default:
		return -EFAULT;
	}
}
   2865e:	b002      	add	sp, #8
   28660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (send_result >= 0) {
   28664:	d0e8      	beq.n	28638 <dfu_target_modem_write+0x10>
	if (errno != ENOEXEC) {
   28666:	f00c fe56 	bl	35316 <__errno>
   2866a:	6803      	ldr	r3, [r0, #0]
   2866c:	2b08      	cmp	r3, #8
   2866e:	d128      	bne.n	286c2 <dfu_target_modem_write+0x9a>
	modem_error = get_modem_error();
   28670:	f7ff fe4c 	bl	2830c <get_modem_error>
   28674:	4c15      	ldr	r4, [pc, #84]	; (286cc <dfu_target_modem_write+0xa4>)
   28676:	4b16      	ldr	r3, [pc, #88]	; (286d0 <dfu_target_modem_write+0xa8>)
   28678:	4606      	mov	r6, r0
   2867a:	1ae4      	subs	r4, r4, r3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2867c:	f00c fe4b 	bl	35316 <__errno>
   28680:	08e4      	lsrs	r4, r4, #3
   28682:	01a4      	lsls	r4, r4, #6
   28684:	f044 0401 	orr.w	r4, r4, #1
   28688:	6801      	ldr	r1, [r0, #0]
   2868a:	4623      	mov	r3, r4
   2868c:	4632      	mov	r2, r6
   2868e:	4811      	ldr	r0, [pc, #68]	; (286d4 <dfu_target_modem_write+0xac>)
   28690:	f00b ff60 	bl	34554 <log_2>
	switch (modem_error) {
   28694:	f116 0f0b 	cmn.w	r6, #11
   28698:	d004      	beq.n	286a4 <dfu_target_modem_write+0x7c>
   2869a:	f116 0f09 	cmn.w	r6, #9
   2869e:	d00d      	beq.n	286bc <dfu_target_modem_write+0x94>
   286a0:	360e      	adds	r6, #14
   286a2:	d10e      	bne.n	286c2 <dfu_target_modem_write+0x9a>
		delete_banked_modem_fw();
   286a4:	f7ff fe5c 	bl	28360 <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   286a8:	4629      	mov	r1, r5
   286aa:	4638      	mov	r0, r7
   286ac:	f7ff ffbc 	bl	28628 <dfu_target_modem_write>
			return 0;
   286b0:	2800      	cmp	r0, #0
   286b2:	bfb4      	ite	lt
   286b4:	f06f 0015 	mvnlt.w	r0, #21
   286b8:	2000      	movge	r0, #0
   286ba:	e7d0      	b.n	2865e <dfu_target_modem_write+0x36>
		return -EINVAL;
   286bc:	f06f 0015 	mvn.w	r0, #21
   286c0:	e7cd      	b.n	2865e <dfu_target_modem_write+0x36>
	switch (modem_error) {
   286c2:	f06f 000d 	mvn.w	r0, #13
   286c6:	e7ca      	b.n	2865e <dfu_target_modem_write+0x36>
   286c8:	20023870 	.word	0x20023870
   286cc:	0003836c 	.word	0x0003836c
   286d0:	0003831c 	.word	0x0003831c
   286d4:	0003c727 	.word	0x0003c727
   286d8:	2002386c 	.word	0x2002386c

000286dc <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   286dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   286de:	4c1c      	ldr	r4, [pc, #112]	; (28750 <dfu_target_modem_done+0x74>)
   286e0:	4b1c      	ldr	r3, [pc, #112]	; (28754 <dfu_target_modem_done+0x78>)
   286e2:	4d1d      	ldr	r5, [pc, #116]	; (28758 <dfu_target_modem_done+0x7c>)
   286e4:	1ae4      	subs	r4, r4, r3
   286e6:	08e4      	lsrs	r4, r4, #3
   286e8:	01a4      	lsls	r4, r4, #6
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   286ea:	f044 0103 	orr.w	r1, r4, #3
	int err = 0;

	if (successful) {
   286ee:	b348      	cbz	r0, 28744 <dfu_target_modem_done+0x68>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   286f0:	481a      	ldr	r0, [pc, #104]	; (2875c <dfu_target_modem_done+0x80>)
   286f2:	f00b ff09 	bl	34508 <log_0>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   286f6:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   286f8:	2300      	movs	r3, #0
   286fa:	f240 2103 	movw	r1, #515	; 0x203
   286fe:	2204      	movs	r2, #4
   28700:	9300      	str	r3, [sp, #0]
   28702:	f00c fbcd 	bl	34ea0 <z_impl_zsock_setsockopt>
	if (err < 0) {
   28706:	1e01      	subs	r1, r0, #0
   28708:	da0f      	bge.n	2872a <dfu_target_modem_done+0x4e>
   2870a:	9103      	str	r1, [sp, #12]
		if (errno == ENOEXEC) {
   2870c:	f00c fe03 	bl	35316 <__errno>
   28710:	6803      	ldr	r3, [r0, #0]
   28712:	9903      	ldr	r1, [sp, #12]
   28714:	2b08      	cmp	r3, #8
   28716:	f044 0601 	orr.w	r6, r4, #1
   2871a:	d102      	bne.n	28722 <dfu_target_modem_done+0x46>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   2871c:	f7ff fdf6 	bl	2830c <get_modem_error>
   28720:	4601      	mov	r1, r0
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   28722:	4632      	mov	r2, r6
   28724:	480e      	ldr	r0, [pc, #56]	; (28760 <dfu_target_modem_done+0x84>)
   28726:	f00b fefe 	bl	34526 <log_1>
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   2872a:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   2872c:	f00c faef 	bl	34d0e <z_impl_zsock_close>
	if (err < 0) {
   28730:	1e05      	subs	r5, r0, #0
   28732:	da0b      	bge.n	2874c <dfu_target_modem_done+0x70>
		LOG_ERR("Failed to close modem DFU socket.");
   28734:	480b      	ldr	r0, [pc, #44]	; (28764 <dfu_target_modem_done+0x88>)
   28736:	f044 0101 	orr.w	r1, r4, #1
   2873a:	f00b fee5 	bl	34508 <log_0>
		return err;
	}

	return 0;
}
   2873e:	4628      	mov	r0, r5
   28740:	b004      	add	sp, #16
   28742:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Modem upgrade aborted.");
   28744:	4808      	ldr	r0, [pc, #32]	; (28768 <dfu_target_modem_done+0x8c>)
   28746:	f00b fedf 	bl	34508 <log_0>
   2874a:	e7ee      	b.n	2872a <dfu_target_modem_done+0x4e>
	return 0;
   2874c:	2500      	movs	r5, #0
   2874e:	e7f6      	b.n	2873e <dfu_target_modem_done+0x62>
   28750:	0003836c 	.word	0x0003836c
   28754:	0003831c 	.word	0x0003831c
   28758:	2002386c 	.word	0x2002386c
   2875c:	0003c74f 	.word	0x0003c74f
   28760:	0003c77e 	.word	0x0003c77e
   28764:	0003c7b9 	.word	0x0003c7b9
   28768:	0003c7a2 	.word	0x0003c7a2

0002876c <reset_flash_context>:

	return 0;
}

static void reset_flash_context(void)
{
   2876c:	b508      	push	{r3, lr}
	/* Need to set bytes_written to 0 */
	int err = flash_img_init(&flash_img);
   2876e:	4808      	ldr	r0, [pc, #32]	; (28790 <reset_flash_context+0x24>)
   28770:	f00c fab7 	bl	34ce2 <flash_img_init>

	if (err) {
   28774:	b158      	cbz	r0, 2878e <reset_flash_context+0x22>
   28776:	4b07      	ldr	r3, [pc, #28]	; (28794 <reset_flash_context+0x28>)
   28778:	4907      	ldr	r1, [pc, #28]	; (28798 <reset_flash_context+0x2c>)
		LOG_ERR("Unable to re-initialize flash_img");
   2877a:	4808      	ldr	r0, [pc, #32]	; (2879c <reset_flash_context+0x30>)
   2877c:	1ac9      	subs	r1, r1, r3
   2877e:	08c9      	lsrs	r1, r1, #3
   28780:	0189      	lsls	r1, r1, #6
   28782:	f041 0101 	orr.w	r1, r1, #1
	}
	err = store_flash_img_context();
	if (err != 0) {
		LOG_ERR("Unable to reset write progress: %d", err);
	}
}
   28786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Unable to re-initialize flash_img");
   2878a:	f00b bebd 	b.w	34508 <log_0>
}
   2878e:	bd08      	pop	{r3, pc}
   28790:	20023874 	.word	0x20023874
   28794:	0003831c 	.word	0x0003831c
   28798:	00038364 	.word	0x00038364
   2879c:	0003c7ec 	.word	0x0003c7ec

000287a0 <dfu_target_mcuboot_identify>:
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   287a0:	6800      	ldr	r0, [r0, #0]
}
   287a2:	4b02      	ldr	r3, [pc, #8]	; (287ac <dfu_target_mcuboot_identify+0xc>)
   287a4:	1ac3      	subs	r3, r0, r3
   287a6:	4258      	negs	r0, r3
   287a8:	4158      	adcs	r0, r3
   287aa:	4770      	bx	lr
   287ac:	96f3b83d 	.word	0x96f3b83d

000287b0 <dfu_target_mcuboot_init>:
{
   287b0:	b538      	push	{r3, r4, r5, lr}
   287b2:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   287b4:	4812      	ldr	r0, [pc, #72]	; (28800 <dfu_target_mcuboot_init+0x50>)
   287b6:	f00c fa94 	bl	34ce2 <flash_img_init>
	if (err != 0) {
   287ba:	4604      	mov	r4, r0
   287bc:	b160      	cbz	r0, 287d8 <dfu_target_mcuboot_init+0x28>
   287be:	4a11      	ldr	r2, [pc, #68]	; (28804 <dfu_target_mcuboot_init+0x54>)
   287c0:	4b11      	ldr	r3, [pc, #68]	; (28808 <dfu_target_mcuboot_init+0x58>)
		LOG_ERR("flash_img_init error %d", err);
   287c2:	4601      	mov	r1, r0
   287c4:	1ad2      	subs	r2, r2, r3
   287c6:	08d2      	lsrs	r2, r2, #3
   287c8:	0192      	lsls	r2, r2, #6
   287ca:	4810      	ldr	r0, [pc, #64]	; (2880c <dfu_target_mcuboot_init+0x5c>)
   287cc:	f042 0201 	orr.w	r2, r2, #1
   287d0:	f00b fea9 	bl	34526 <log_1>
}
   287d4:	4620      	mov	r0, r4
   287d6:	bd38      	pop	{r3, r4, r5, pc}
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   287d8:	f5b5 2fd2 	cmp.w	r5, #430080	; 0x69000
   287dc:	d9fa      	bls.n	287d4 <dfu_target_mcuboot_init+0x24>
   287de:	4a0a      	ldr	r2, [pc, #40]	; (28808 <dfu_target_mcuboot_init+0x58>)
   287e0:	4b08      	ldr	r3, [pc, #32]	; (28804 <dfu_target_mcuboot_init+0x54>)
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   287e2:	4629      	mov	r1, r5
   287e4:	1a9b      	subs	r3, r3, r2
   287e6:	08db      	lsrs	r3, r3, #3
   287e8:	019b      	lsls	r3, r3, #6
   287ea:	f44f 22d2 	mov.w	r2, #430080	; 0x69000
   287ee:	4808      	ldr	r0, [pc, #32]	; (28810 <dfu_target_mcuboot_init+0x60>)
   287f0:	f043 0301 	orr.w	r3, r3, #1
   287f4:	f00b feae 	bl	34554 <log_2>
		return -EFBIG;
   287f8:	f06f 041a 	mvn.w	r4, #26
   287fc:	e7ea      	b.n	287d4 <dfu_target_mcuboot_init+0x24>
   287fe:	bf00      	nop
   28800:	20023874 	.word	0x20023874
   28804:	00038364 	.word	0x00038364
   28808:	0003831c 	.word	0x0003831c
   2880c:	0003c80e 	.word	0x0003c80e
   28810:	0003c826 	.word	0x0003c826

00028814 <dfu_target_mcuboot_offset_get>:
{
   28814:	b510      	push	{r4, lr}
   28816:	4604      	mov	r4, r0
	*out = flash_img_bytes_written(&flash_img);
   28818:	4802      	ldr	r0, [pc, #8]	; (28824 <dfu_target_mcuboot_offset_get+0x10>)
   2881a:	f00c fa3d 	bl	34c98 <flash_img_bytes_written>
   2881e:	6020      	str	r0, [r4, #0]
}
   28820:	2000      	movs	r0, #0
   28822:	bd10      	pop	{r4, pc}
   28824:	20023874 	.word	0x20023874

00028828 <dfu_target_mcuboot_write>:
{
   28828:	460a      	mov	r2, r1
   2882a:	b510      	push	{r4, lr}
	int err = flash_img_buffered_write(&flash_img, (uint8_t *)buf, len, false);
   2882c:	4601      	mov	r1, r0
   2882e:	2300      	movs	r3, #0
   28830:	4808      	ldr	r0, [pc, #32]	; (28854 <dfu_target_mcuboot_write+0x2c>)
   28832:	f00c fa14 	bl	34c5e <flash_img_buffered_write>
	if (err != 0) {
   28836:	4604      	mov	r4, r0
   28838:	b150      	cbz	r0, 28850 <dfu_target_mcuboot_write+0x28>
   2883a:	4a07      	ldr	r2, [pc, #28]	; (28858 <dfu_target_mcuboot_write+0x30>)
   2883c:	4b07      	ldr	r3, [pc, #28]	; (2885c <dfu_target_mcuboot_write+0x34>)
		LOG_ERR("flash_img_buffered_write error %d", err);
   2883e:	4601      	mov	r1, r0
   28840:	1ad2      	subs	r2, r2, r3
   28842:	08d2      	lsrs	r2, r2, #3
   28844:	0192      	lsls	r2, r2, #6
   28846:	4806      	ldr	r0, [pc, #24]	; (28860 <dfu_target_mcuboot_write+0x38>)
   28848:	f042 0201 	orr.w	r2, r2, #1
   2884c:	f00b fe6b 	bl	34526 <log_1>
}
   28850:	4620      	mov	r0, r4
   28852:	bd10      	pop	{r4, pc}
   28854:	20023874 	.word	0x20023874
   28858:	00038364 	.word	0x00038364
   2885c:	0003831c 	.word	0x0003831c
   28860:	0003c858 	.word	0x0003c858

00028864 <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   28864:	b538      	push	{r3, r4, r5, lr}
   28866:	4d17      	ldr	r5, [pc, #92]	; (288c4 <dfu_target_mcuboot_done+0x60>)
   28868:	4b17      	ldr	r3, [pc, #92]	; (288c8 <dfu_target_mcuboot_done+0x64>)
   2886a:	1aed      	subs	r5, r5, r3
   2886c:	08ed      	lsrs	r5, r5, #3
   2886e:	01ad      	lsls	r5, r5, #6
	int err = 0;

	if (successful) {
   28870:	b318      	cbz	r0, 288ba <dfu_target_mcuboot_done+0x56>
		err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   28872:	2200      	movs	r2, #0
   28874:	2301      	movs	r3, #1
   28876:	4611      	mov	r1, r2
   28878:	4814      	ldr	r0, [pc, #80]	; (288cc <dfu_target_mcuboot_done+0x68>)
   2887a:	f00c f9f0 	bl	34c5e <flash_img_buffered_write>
		if (err != 0) {
   2887e:	4604      	mov	r4, r0
   28880:	b148      	cbz	r0, 28896 <dfu_target_mcuboot_done+0x32>
			LOG_ERR("flash_img_buffered_write error %d", err);
   28882:	4601      	mov	r1, r0
   28884:	4812      	ldr	r0, [pc, #72]	; (288d0 <dfu_target_mcuboot_done+0x6c>)
   28886:	f045 0201 	orr.w	r2, r5, #1
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   2888a:	f00b fe4c 	bl	34526 <log_1>
			reset_flash_context();
   2888e:	f7ff ff6d 	bl	2876c <reset_flash_context>
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	reset_flash_context();
	return err;
}
   28892:	4620      	mov	r0, r4
   28894:	bd38      	pop	{r3, r4, r5, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   28896:	f7f8 fa5d 	bl	20d54 <boot_request_upgrade>
		if (err != 0) {
   2889a:	4604      	mov	r4, r0
   2889c:	b120      	cbz	r0, 288a8 <dfu_target_mcuboot_done+0x44>
			LOG_ERR("boot_request_upgrade error %d", err);
   2889e:	4601      	mov	r1, r0
   288a0:	f045 0201 	orr.w	r2, r5, #1
   288a4:	480b      	ldr	r0, [pc, #44]	; (288d4 <dfu_target_mcuboot_done+0x70>)
   288a6:	e7f0      	b.n	2888a <dfu_target_mcuboot_done+0x26>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   288a8:	480b      	ldr	r0, [pc, #44]	; (288d8 <dfu_target_mcuboot_done+0x74>)
   288aa:	f045 0103 	orr.w	r1, r5, #3
		LOG_INF("MCUBoot image upgrade aborted.");
   288ae:	f00b fe2b 	bl	34508 <log_0>
	return err;
   288b2:	2400      	movs	r4, #0
	reset_flash_context();
   288b4:	f7ff ff5a 	bl	2876c <reset_flash_context>
	return err;
   288b8:	e7eb      	b.n	28892 <dfu_target_mcuboot_done+0x2e>
		LOG_INF("MCUBoot image upgrade aborted.");
   288ba:	4808      	ldr	r0, [pc, #32]	; (288dc <dfu_target_mcuboot_done+0x78>)
   288bc:	f045 0103 	orr.w	r1, r5, #3
   288c0:	e7f5      	b.n	288ae <dfu_target_mcuboot_done+0x4a>
   288c2:	bf00      	nop
   288c4:	00038364 	.word	0x00038364
   288c8:	0003831c 	.word	0x0003831c
   288cc:	20023874 	.word	0x20023874
   288d0:	0003c858 	.word	0x0003c858
   288d4:	0003c87a 	.word	0x0003c87a
   288d8:	0003c898 	.word	0x0003c898
   288dc:	0003c8d3 	.word	0x0003c8d3

000288e0 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   288e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   288e4:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   288e6:	4c21      	ldr	r4, [pc, #132]	; (2896c <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   288e8:	4e21      	ldr	r6, [pc, #132]	; (28970 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   288ea:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   288ee:	f8df 9088 	ldr.w	r9, [pc, #136]	; 28978 <check_ext_api_requests+0x98>
{
   288f2:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   288f4:	45a8      	cmp	r8, r5
   288f6:	d803      	bhi.n	28900 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   288f8:	2000      	movs	r0, #0
   288fa:	b005      	add	sp, #20
   288fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   28900:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28902:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   28906:	681f      	ldr	r7, [r3, #0]
   28908:	ab01      	add	r3, sp, #4
   2890a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   2890e:	220c      	movs	r2, #12
   28910:	4619      	mov	r1, r3
   28912:	4638      	mov	r0, r7
   28914:	f00e fd67 	bl	373e6 <memcmp>
   28918:	b990      	cbnz	r0, 28940 <check_ext_api_requests+0x60>
   2891a:	b18f      	cbz	r7, 28940 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2891c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   2891e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   28920:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   28922:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   28924:	4291      	cmp	r1, r2
   28926:	d10b      	bne.n	28940 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   28928:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   2892a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   2892c:	4291      	cmp	r1, r2
   2892e:	d807      	bhi.n	28940 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   28930:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   28932:	4291      	cmp	r1, r2
   28934:	d904      	bls.n	28940 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   28936:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   28938:	695b      	ldr	r3, [r3, #20]
   2893a:	ea32 0303 	bics.w	r3, r2, r3
   2893e:	d00a      	beq.n	28956 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   28940:	6a27      	ldr	r7, [r4, #32]
   28942:	b167      	cbz	r7, 2895e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   28944:	480b      	ldr	r0, [pc, #44]	; (28974 <check_ext_api_requests+0x94>)
   28946:	f00b f96d 	bl	33c24 <printk>
			k_panic();
   2894a:	4040      	eors	r0, r0
   2894c:	f380 8811 	msr	BASEPRI, r0
   28950:	f04f 0004 	mov.w	r0, #4
   28954:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   28956:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   28958:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   2895a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2895c:	e7ca      	b.n	288f4 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   2895e:	4648      	mov	r0, r9
   28960:	f00b f960 	bl	33c24 <printk>
			*ext_api_req->ext_api = NULL;
   28964:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28966:	601f      	str	r7, [r3, #0]
   28968:	e7f5      	b.n	28956 <check_ext_api_requests+0x76>
   2896a:	bf00      	nop
   2896c:	0001843c 	.word	0x0001843c
   28970:	0003846c 	.word	0x0003846c
   28974:	0003c905 	.word	0x0003c905
   28978:	0003c92e 	.word	0x0003c92e

0002897c <packet_free_cb>:
   2897c:	b510      	push	{r4, lr}
   2897e:	4604      	mov	r4, r0
   28980:	6800      	ldr	r0, [r0, #0]
   28982:	f004 fef7 	bl	2d774 <rpc_logobj_client_data_free>
   28986:	68a0      	ldr	r0, [r4, #8]
   28988:	b118      	cbz	r0, 28992 <packet_free_cb+0x16>
   2898a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2898e:	f007 bd21 	b.w	303d4 <nrf_free>
   28992:	bd10      	pop	{r4, pc}

00028994 <logobj_event_handler>:
   28994:	b530      	push	{r4, r5, lr}
   28996:	4b3b      	ldr	r3, [pc, #236]	; (28a84 <logobj_event_handler+0xf0>)
   28998:	b085      	sub	sp, #20
   2899a:	681d      	ldr	r5, [r3, #0]
   2899c:	2d00      	cmp	r5, #0
   2899e:	d04c      	beq.n	28a3a <logobj_event_handler+0xa6>
   289a0:	f248 0302 	movw	r3, #32770	; 0x8002
   289a4:	4299      	cmp	r1, r3
   289a6:	d053      	beq.n	28a50 <logobj_event_handler+0xbc>
   289a8:	d91c      	bls.n	289e4 <logobj_event_handler+0x50>
   289aa:	f248 0303 	movw	r3, #32771	; 0x8003
   289ae:	4299      	cmp	r1, r3
   289b0:	d05a      	beq.n	28a68 <logobj_event_handler+0xd4>
   289b2:	f249 0301 	movw	r3, #36865	; 0x9001
   289b6:	4299      	cmp	r1, r3
   289b8:	d147      	bne.n	28a4a <logobj_event_handler+0xb6>
   289ba:	2400      	movs	r4, #0
   289bc:	6843      	ldr	r3, [r0, #4]
   289be:	6802      	ldr	r2, [r0, #0]
   289c0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   289c4:	e9cd 2300 	strd	r2, r3, [sp]
   289c8:	69e8      	ldr	r0, [r5, #28]
   289ca:	4669      	mov	r1, sp
   289cc:	6803      	ldr	r3, [r0, #0]
   289ce:	685b      	ldr	r3, [r3, #4]
   289d0:	4798      	blx	r3
   289d2:	3001      	adds	r0, #1
   289d4:	d04e      	beq.n	28a74 <logobj_event_handler+0xe0>
   289d6:	4620      	mov	r0, r4
   289d8:	682b      	ldr	r3, [r5, #0]
   289da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   289de:	602b      	str	r3, [r5, #0]
   289e0:	b005      	add	sp, #20
   289e2:	bd30      	pop	{r4, r5, pc}
   289e4:	f248 0301 	movw	r3, #32769	; 0x8001
   289e8:	4299      	cmp	r1, r3
   289ea:	d12e      	bne.n	28a4a <logobj_event_handler+0xb6>
   289ec:	68c3      	ldr	r3, [r0, #12]
   289ee:	2b00      	cmp	r3, #0
   289f0:	d135      	bne.n	28a5e <logobj_event_handler+0xca>
   289f2:	6828      	ldr	r0, [r5, #0]
   289f4:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   289f8:	d03e      	beq.n	28a78 <logobj_event_handler+0xe4>
   289fa:	682b      	ldr	r3, [r5, #0]
   289fc:	b29b      	uxth	r3, r3
   289fe:	2b01      	cmp	r3, #1
   28a00:	d105      	bne.n	28a0e <logobj_event_handler+0x7a>
   28a02:	682b      	ldr	r3, [r5, #0]
   28a04:	0c1b      	lsrs	r3, r3, #16
   28a06:	041b      	lsls	r3, r3, #16
   28a08:	f043 0302 	orr.w	r3, r3, #2
   28a0c:	602b      	str	r3, [r5, #0]
   28a0e:	4b1e      	ldr	r3, [pc, #120]	; (28a88 <logobj_event_handler+0xf4>)
   28a10:	781a      	ldrb	r2, [r3, #0]
   28a12:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   28a16:	2a00      	cmp	r2, #0
   28a18:	d031      	beq.n	28a7e <logobj_event_handler+0xea>
   28a1a:	4a1c      	ldr	r2, [pc, #112]	; (28a8c <logobj_event_handler+0xf8>)
   28a1c:	7811      	ldrb	r1, [r2, #0]
   28a1e:	b909      	cbnz	r1, 28a24 <logobj_event_handler+0x90>
   28a20:	2101      	movs	r1, #1
   28a22:	7011      	strb	r1, [r2, #0]
   28a24:	2000      	movs	r0, #0
   28a26:	7018      	strb	r0, [r3, #0]
   28a28:	682b      	ldr	r3, [r5, #0]
   28a2a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   28a2e:	602b      	str	r3, [r5, #0]
   28a30:	682b      	ldr	r3, [r5, #0]
   28a32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   28a36:	602b      	str	r3, [r5, #0]
   28a38:	e7d2      	b.n	289e0 <logobj_event_handler+0x4c>
   28a3a:	6800      	ldr	r0, [r0, #0]
   28a3c:	2800      	cmp	r0, #0
   28a3e:	d0cf      	beq.n	289e0 <logobj_event_handler+0x4c>
   28a40:	f004 fe98 	bl	2d774 <rpc_logobj_client_data_free>
   28a44:	4628      	mov	r0, r5
   28a46:	b005      	add	sp, #20
   28a48:	bd30      	pop	{r4, r5, pc}
   28a4a:	2000      	movs	r0, #0
   28a4c:	b005      	add	sp, #20
   28a4e:	bd30      	pop	{r4, r5, pc}
   28a50:	682b      	ldr	r3, [r5, #0]
   28a52:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   28a56:	d00b      	beq.n	28a70 <logobj_event_handler+0xdc>
   28a58:	68c0      	ldr	r0, [r0, #12]
   28a5a:	2800      	cmp	r0, #0
   28a5c:	d0e4      	beq.n	28a28 <logobj_event_handler+0x94>
   28a5e:	230e      	movs	r3, #14
   28a60:	2000      	movs	r0, #0
   28a62:	606b      	str	r3, [r5, #4]
   28a64:	b005      	add	sp, #20
   28a66:	bd30      	pop	{r4, r5, pc}
   28a68:	68c3      	ldr	r3, [r0, #12]
   28a6a:	2b01      	cmp	r3, #1
   28a6c:	d1a5      	bne.n	289ba <logobj_event_handler+0x26>
   28a6e:	e7f6      	b.n	28a5e <logobj_event_handler+0xca>
   28a70:	4618      	mov	r0, r3
   28a72:	e7b5      	b.n	289e0 <logobj_event_handler+0x4c>
   28a74:	2002      	movs	r0, #2
   28a76:	e7b3      	b.n	289e0 <logobj_event_handler+0x4c>
   28a78:	230e      	movs	r3, #14
   28a7a:	606b      	str	r3, [r5, #4]
   28a7c:	e7b0      	b.n	289e0 <logobj_event_handler+0x4c>
   28a7e:	4a03      	ldr	r2, [pc, #12]	; (28a8c <logobj_event_handler+0xf8>)
   28a80:	7011      	strb	r1, [r2, #0]
   28a82:	e7cf      	b.n	28a24 <logobj_event_handler+0x90>
   28a84:	20023aa0 	.word	0x20023aa0
   28a88:	2002cb92 	.word	0x2002cb92
   28a8c:	2002cb93 	.word	0x2002cb93

00028a90 <logobj_interface_init>:
   28a90:	2300      	movs	r3, #0
   28a92:	b510      	push	{r4, lr}
   28a94:	4808      	ldr	r0, [pc, #32]	; (28ab8 <logobj_interface_init+0x28>)
   28a96:	4c09      	ldr	r4, [pc, #36]	; (28abc <logobj_interface_init+0x2c>)
   28a98:	4909      	ldr	r1, [pc, #36]	; (28ac0 <logobj_interface_init+0x30>)
   28a9a:	4a0a      	ldr	r2, [pc, #40]	; (28ac4 <logobj_interface_init+0x34>)
   28a9c:	7023      	strb	r3, [r4, #0]
   28a9e:	6003      	str	r3, [r0, #0]
   28aa0:	700b      	strb	r3, [r1, #0]
   28aa2:	6013      	str	r3, [r2, #0]
   28aa4:	f004 fe2a 	bl	2d6fc <rpc_logobj_client_init>
   28aa8:	b918      	cbnz	r0, 28ab2 <logobj_interface_init+0x22>
   28aaa:	2201      	movs	r2, #1
   28aac:	4b06      	ldr	r3, [pc, #24]	; (28ac8 <logobj_interface_init+0x38>)
   28aae:	701a      	strb	r2, [r3, #0]
   28ab0:	bd10      	pop	{r4, pc}
   28ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28ab6:	bd10      	pop	{r4, pc}
   28ab8:	20023aa0 	.word	0x20023aa0
   28abc:	2002cb93 	.word	0x2002cb93
   28ac0:	2002cb92 	.word	0x2002cb92
   28ac4:	20023a9c 	.word	0x20023a9c
   28ac8:	2002cb94 	.word	0x2002cb94

00028acc <logobj_interface_open>:
   28acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28ad0:	2400      	movs	r4, #0
   28ad2:	4b5b      	ldr	r3, [pc, #364]	; (28c40 <logobj_interface_open+0x174>)
   28ad4:	b084      	sub	sp, #16
   28ad6:	781b      	ldrb	r3, [r3, #0]
   28ad8:	9401      	str	r4, [sp, #4]
   28ada:	2b00      	cmp	r3, #0
   28adc:	f000 809f 	beq.w	28c1e <logobj_interface_open+0x152>
   28ae0:	2866      	cmp	r0, #102	; 0x66
   28ae2:	4680      	mov	r8, r0
   28ae4:	f040 808f 	bne.w	28c06 <logobj_interface_open+0x13a>
   28ae8:	2902      	cmp	r1, #2
   28aea:	4689      	mov	r9, r1
   28aec:	f040 808b 	bne.w	28c06 <logobj_interface_open+0x13a>
   28af0:	f240 2305 	movw	r3, #517	; 0x205
   28af4:	429a      	cmp	r2, r3
   28af6:	4692      	mov	sl, r2
   28af8:	f040 8085 	bne.w	28c06 <logobj_interface_open+0x13a>
   28afc:	4f51      	ldr	r7, [pc, #324]	; (28c44 <logobj_interface_open+0x178>)
   28afe:	683d      	ldr	r5, [r7, #0]
   28b00:	2d00      	cmp	r5, #0
   28b02:	f040 8086 	bne.w	28c12 <logobj_interface_open+0x146>
   28b06:	4a50      	ldr	r2, [pc, #320]	; (28c48 <logobj_interface_open+0x17c>)
   28b08:	a801      	add	r0, sp, #4
   28b0a:	f008 f83b 	bl	30b84 <interface_socket_allocate>
   28b0e:	9b01      	ldr	r3, [sp, #4]
   28b10:	4606      	mov	r6, r0
   28b12:	2b00      	cmp	r3, #0
   28b14:	f000 808d 	beq.w	28c32 <logobj_interface_open+0x166>
   28b18:	4629      	mov	r1, r5
   28b1a:	2204      	movs	r2, #4
   28b1c:	484b      	ldr	r0, [pc, #300]	; (28c4c <logobj_interface_open+0x180>)
   28b1e:	603b      	str	r3, [r7, #0]
   28b20:	f00e fc8f 	bl	37442 <memset>
   28b24:	9c01      	ldr	r4, [sp, #4]
   28b26:	4629      	mov	r1, r5
   28b28:	e9c4 8903 	strd	r8, r9, [r4, #12]
   28b2c:	f8c4 a014 	str.w	sl, [r4, #20]
   28b30:	a802      	add	r0, sp, #8
   28b32:	f004 fde9 	bl	2d708 <rpc_logobj_client_request_alloc>
   28b36:	2800      	cmp	r0, #0
   28b38:	d142      	bne.n	28bc0 <logobj_interface_open+0xf4>
   28b3a:	2201      	movs	r2, #1
   28b3c:	2104      	movs	r1, #4
   28b3e:	9b02      	ldr	r3, [sp, #8]
   28b40:	4d43      	ldr	r5, [pc, #268]	; (28c50 <logobj_interface_open+0x184>)
   28b42:	7358      	strb	r0, [r3, #13]
   28b44:	7398      	strb	r0, [r3, #14]
   28b46:	73d8      	strb	r0, [r3, #15]
   28b48:	7258      	strb	r0, [r3, #9]
   28b4a:	7298      	strb	r0, [r3, #10]
   28b4c:	72d8      	strb	r0, [r3, #11]
   28b4e:	7219      	strb	r1, [r3, #8]
   28b50:	702a      	strb	r2, [r5, #0]
   28b52:	731a      	strb	r2, [r3, #12]
   28b54:	6822      	ldr	r2, [r4, #0]
   28b56:	4618      	mov	r0, r3
   28b58:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   28b5c:	6022      	str	r2, [r4, #0]
   28b5e:	f247 0101 	movw	r1, #28673	; 0x7001
   28b62:	f004 fde9 	bl	2d738 <rpc_logobj_client_request_send>
   28b66:	bb68      	cbnz	r0, 28bc4 <logobj_interface_open+0xf8>
   28b68:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28b6a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   28b6e:	2900      	cmp	r1, #0
   28b70:	bf08      	it	eq
   28b72:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   28b76:	ab04      	add	r3, sp, #16
   28b78:	f843 1d04 	str.w	r1, [r3, #-4]!
   28b7c:	4630      	mov	r0, r6
   28b7e:	4611      	mov	r1, r2
   28b80:	f008 f8b2 	bl	30ce8 <interface_socket_wait>
   28b84:	4604      	mov	r4, r0
   28b86:	b310      	cbz	r0, 28bce <logobj_interface_open+0x102>
   28b88:	9a01      	ldr	r2, [sp, #4]
   28b8a:	2e00      	cmp	r6, #0
   28b8c:	6813      	ldr	r3, [r2, #0]
   28b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   28b92:	6013      	str	r3, [r2, #0]
   28b94:	9a01      	ldr	r2, [sp, #4]
   28b96:	6813      	ldr	r3, [r2, #0]
   28b98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   28b9c:	6013      	str	r3, [r2, #0]
   28b9e:	9a01      	ldr	r2, [sp, #4]
   28ba0:	6813      	ldr	r3, [r2, #0]
   28ba2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   28ba6:	6013      	str	r3, [r2, #0]
   28ba8:	da3f      	bge.n	28c2a <logobj_interface_open+0x15e>
   28baa:	2300      	movs	r3, #0
   28bac:	4620      	mov	r0, r4
   28bae:	603b      	str	r3, [r7, #0]
   28bb0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   28bb4:	f7fc fee2 	bl	2597c <bsd_os_errno_set>
   28bb8:	4630      	mov	r0, r6
   28bba:	b004      	add	sp, #16
   28bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28bc0:	240c      	movs	r4, #12
   28bc2:	e7e1      	b.n	28b88 <logobj_interface_open+0xbc>
   28bc4:	9802      	ldr	r0, [sp, #8]
   28bc6:	f004 fdcd 	bl	2d764 <rpc_logobj_client_message_free>
   28bca:	2405      	movs	r4, #5
   28bcc:	e7dc      	b.n	28b88 <logobj_interface_open+0xbc>
   28bce:	4630      	mov	r0, r6
   28bd0:	f008 f8fe 	bl	30dd0 <interface_socket_from_handle_get>
   28bd4:	b120      	cbz	r0, 28be0 <logobj_interface_open+0x114>
   28bd6:	6844      	ldr	r4, [r0, #4]
   28bd8:	b114      	cbz	r4, 28be0 <logobj_interface_open+0x114>
   28bda:	2300      	movs	r3, #0
   28bdc:	6043      	str	r3, [r0, #4]
   28bde:	e7d3      	b.n	28b88 <logobj_interface_open+0xbc>
   28be0:	4630      	mov	r0, r6
   28be2:	9a01      	ldr	r2, [sp, #4]
   28be4:	6813      	ldr	r3, [r2, #0]
   28be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   28bea:	6013      	str	r3, [r2, #0]
   28bec:	9a01      	ldr	r2, [sp, #4]
   28bee:	6813      	ldr	r3, [r2, #0]
   28bf0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   28bf4:	6013      	str	r3, [r2, #0]
   28bf6:	9a01      	ldr	r2, [sp, #4]
   28bf8:	6813      	ldr	r3, [r2, #0]
   28bfa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   28bfe:	6013      	str	r3, [r2, #0]
   28c00:	b004      	add	sp, #16
   28c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28c06:	2016      	movs	r0, #22
   28c08:	f7fc feb8 	bl	2597c <bsd_os_errno_set>
   28c0c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   28c10:	e7d2      	b.n	28bb8 <logobj_interface_open+0xec>
   28c12:	2001      	movs	r0, #1
   28c14:	f7fc feb2 	bl	2597c <bsd_os_errno_set>
   28c18:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   28c1c:	e7cc      	b.n	28bb8 <logobj_interface_open+0xec>
   28c1e:	2070      	movs	r0, #112	; 0x70
   28c20:	f7fc feac 	bl	2597c <bsd_os_errno_set>
   28c24:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   28c28:	e7c6      	b.n	28bb8 <logobj_interface_open+0xec>
   28c2a:	4630      	mov	r0, r6
   28c2c:	f008 f80e 	bl	30c4c <interface_socket_free>
   28c30:	e7bb      	b.n	28baa <logobj_interface_open+0xde>
   28c32:	2018      	movs	r0, #24
   28c34:	f7fc fea2 	bl	2597c <bsd_os_errno_set>
   28c38:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   28c3c:	e7bc      	b.n	28bb8 <logobj_interface_open+0xec>
   28c3e:	bf00      	nop
   28c40:	2002cb94 	.word	0x2002cb94
   28c44:	20023aa0 	.word	0x20023aa0
   28c48:	0002897d 	.word	0x0002897d
   28c4c:	20023a9c 	.word	0x20023a9c
   28c50:	2002cb92 	.word	0x2002cb92

00028c54 <logobj_interface_read>:
   28c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28c58:	b087      	sub	sp, #28
   28c5a:	2900      	cmp	r1, #0
   28c5c:	d06b      	beq.n	28d36 <logobj_interface_read+0xe2>
   28c5e:	2a00      	cmp	r2, #0
   28c60:	4617      	mov	r7, r2
   28c62:	dd68      	ble.n	28d36 <logobj_interface_read+0xe2>
   28c64:	461d      	mov	r5, r3
   28c66:	4680      	mov	r8, r0
   28c68:	460e      	mov	r6, r1
   28c6a:	f008 f8b1 	bl	30dd0 <interface_socket_from_handle_get>
   28c6e:	4604      	mov	r4, r0
   28c70:	2800      	cmp	r0, #0
   28c72:	d066      	beq.n	28d42 <logobj_interface_read+0xee>
   28c74:	bb4d      	cbnz	r5, 28cca <logobj_interface_read+0x76>
   28c76:	69e0      	ldr	r0, [r4, #28]
   28c78:	07aa      	lsls	r2, r5, #30
   28c7a:	6803      	ldr	r3, [r0, #0]
   28c7c:	68db      	ldr	r3, [r3, #12]
   28c7e:	d52d      	bpl.n	28cdc <logobj_interface_read+0x88>
   28c80:	4798      	blx	r3
   28c82:	3001      	adds	r0, #1
   28c84:	d047      	beq.n	28d16 <logobj_interface_read+0xc2>
   28c86:	6823      	ldr	r3, [r4, #0]
   28c88:	69e0      	ldr	r0, [r4, #28]
   28c8a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   28c8e:	d044      	beq.n	28d1a <logobj_interface_read+0xc6>
   28c90:	2100      	movs	r1, #0
   28c92:	6823      	ldr	r3, [r4, #0]
   28c94:	462a      	mov	r2, r5
   28c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   28c9a:	6023      	str	r3, [r4, #0]
   28c9c:	e9cd 1104 	strd	r1, r1, [sp, #16]
   28ca0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   28ca4:	6803      	ldr	r3, [r0, #0]
   28ca6:	a902      	add	r1, sp, #8
   28ca8:	689b      	ldr	r3, [r3, #8]
   28caa:	4798      	blx	r3
   28cac:	4605      	mov	r5, r0
   28cae:	69e0      	ldr	r0, [r4, #28]
   28cb0:	6803      	ldr	r3, [r0, #0]
   28cb2:	68db      	ldr	r3, [r3, #12]
   28cb4:	4798      	blx	r3
   28cb6:	3001      	adds	r0, #1
   28cb8:	d003      	beq.n	28cc2 <logobj_interface_read+0x6e>
   28cba:	6823      	ldr	r3, [r4, #0]
   28cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   28cc0:	6023      	str	r3, [r4, #0]
   28cc2:	4628      	mov	r0, r5
   28cc4:	b007      	add	sp, #28
   28cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28cca:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   28cce:	d1d2      	bne.n	28c76 <logobj_interface_read+0x22>
   28cd0:	202d      	movs	r0, #45	; 0x2d
   28cd2:	f7fc fe53 	bl	2597c <bsd_os_errno_set>
   28cd6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   28cda:	e7f2      	b.n	28cc2 <logobj_interface_read+0x6e>
   28cdc:	6822      	ldr	r2, [r4, #0]
   28cde:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   28ce2:	d1cd      	bne.n	28c80 <logobj_interface_read+0x2c>
   28ce4:	4798      	blx	r3
   28ce6:	1c43      	adds	r3, r0, #1
   28ce8:	d1cd      	bne.n	28c86 <logobj_interface_read+0x32>
   28cea:	6a22      	ldr	r2, [r4, #32]
   28cec:	ab06      	add	r3, sp, #24
   28cee:	2a00      	cmp	r2, #0
   28cf0:	bf18      	it	ne
   28cf2:	4610      	movne	r0, r2
   28cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   28cf8:	f843 0d14 	str.w	r0, [r3, #-20]!
   28cfc:	4611      	mov	r1, r2
   28cfe:	4640      	mov	r0, r8
   28d00:	f007 fff2 	bl	30ce8 <interface_socket_wait>
   28d04:	b158      	cbz	r0, 28d1e <logobj_interface_read+0xca>
   28d06:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   28d0a:	f7fc fe37 	bl	2597c <bsd_os_errno_set>
   28d0e:	4628      	mov	r0, r5
   28d10:	b007      	add	sp, #28
   28d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28d16:	2023      	movs	r0, #35	; 0x23
   28d18:	e7f5      	b.n	28d06 <logobj_interface_read+0xb2>
   28d1a:	461d      	mov	r5, r3
   28d1c:	e7c8      	b.n	28cb0 <logobj_interface_read+0x5c>
   28d1e:	4640      	mov	r0, r8
   28d20:	f008 f856 	bl	30dd0 <interface_socket_from_handle_get>
   28d24:	4603      	mov	r3, r0
   28d26:	2800      	cmp	r0, #0
   28d28:	d0ad      	beq.n	28c86 <logobj_interface_read+0x32>
   28d2a:	6840      	ldr	r0, [r0, #4]
   28d2c:	2800      	cmp	r0, #0
   28d2e:	d0aa      	beq.n	28c86 <logobj_interface_read+0x32>
   28d30:	f8c3 9004 	str.w	r9, [r3, #4]
   28d34:	e7e7      	b.n	28d06 <logobj_interface_read+0xb2>
   28d36:	2016      	movs	r0, #22
   28d38:	f7fc fe20 	bl	2597c <bsd_os_errno_set>
   28d3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   28d40:	e7bf      	b.n	28cc2 <logobj_interface_read+0x6e>
   28d42:	2009      	movs	r0, #9
   28d44:	f7fc fe1a 	bl	2597c <bsd_os_errno_set>
   28d48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   28d4c:	e7b9      	b.n	28cc2 <logobj_interface_read+0x6e>
   28d4e:	bf00      	nop

00028d50 <logobj_interface_write>:
   28d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28d54:	b082      	sub	sp, #8
   28d56:	2900      	cmp	r1, #0
   28d58:	d06b      	beq.n	28e32 <logobj_interface_write+0xe2>
   28d5a:	2a04      	cmp	r2, #4
   28d5c:	d169      	bne.n	28e32 <logobj_interface_write+0xe2>
   28d5e:	461f      	mov	r7, r3
   28d60:	4606      	mov	r6, r0
   28d62:	460d      	mov	r5, r1
   28d64:	f008 f834 	bl	30dd0 <interface_socket_from_handle_get>
   28d68:	4604      	mov	r4, r0
   28d6a:	2800      	cmp	r0, #0
   28d6c:	d074      	beq.n	28e58 <logobj_interface_write+0x108>
   28d6e:	b1e7      	cbz	r7, 28daa <logobj_interface_write+0x5a>
   28d70:	07b8      	lsls	r0, r7, #30
   28d72:	d56b      	bpl.n	28e4c <logobj_interface_write+0xfc>
   28d74:	6823      	ldr	r3, [r4, #0]
   28d76:	039b      	lsls	r3, r3, #14
   28d78:	d564      	bpl.n	28e44 <logobj_interface_write+0xf4>
   28d7a:	2700      	movs	r7, #0
   28d7c:	6823      	ldr	r3, [r4, #0]
   28d7e:	2100      	movs	r1, #0
   28d80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   28d84:	6023      	str	r3, [r4, #0]
   28d86:	4668      	mov	r0, sp
   28d88:	f8d5 8000 	ldr.w	r8, [r5]
   28d8c:	f004 fcbc 	bl	2d708 <rpc_logobj_client_request_alloc>
   28d90:	b198      	cbz	r0, 28dba <logobj_interface_write+0x6a>
   28d92:	200c      	movs	r0, #12
   28d94:	6823      	ldr	r3, [r4, #0]
   28d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   28d9a:	6023      	str	r3, [r4, #0]
   28d9c:	f7fc fdee 	bl	2597c <bsd_os_errno_set>
   28da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28da4:	b002      	add	sp, #8
   28da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28daa:	6803      	ldr	r3, [r0, #0]
   28dac:	00d9      	lsls	r1, r3, #3
   28dae:	d4e1      	bmi.n	28d74 <logobj_interface_write+0x24>
   28db0:	6803      	ldr	r3, [r0, #0]
   28db2:	039a      	lsls	r2, r3, #14
   28db4:	d548      	bpl.n	28e48 <logobj_interface_write+0xf8>
   28db6:	2701      	movs	r7, #1
   28db8:	e7e0      	b.n	28d7c <logobj_interface_write+0x2c>
   28dba:	2504      	movs	r5, #4
   28dbc:	9b00      	ldr	r3, [sp, #0]
   28dbe:	f247 0103 	movw	r1, #28675	; 0x7003
   28dc2:	f8c3 800c 	str.w	r8, [r3, #12]
   28dc6:	7258      	strb	r0, [r3, #9]
   28dc8:	7298      	strb	r0, [r3, #10]
   28dca:	72d8      	strb	r0, [r3, #11]
   28dcc:	721d      	strb	r5, [r3, #8]
   28dce:	4618      	mov	r0, r3
   28dd0:	f004 fcb2 	bl	2d738 <rpc_logobj_client_request_send>
   28dd4:	4680      	mov	r8, r0
   28dd6:	bb18      	cbnz	r0, 28e20 <logobj_interface_write+0xd0>
   28dd8:	b1d7      	cbz	r7, 28e10 <logobj_interface_write+0xc0>
   28dda:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28ddc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   28de0:	2900      	cmp	r1, #0
   28de2:	bf08      	it	eq
   28de4:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   28de8:	ab02      	add	r3, sp, #8
   28dea:	f843 1d04 	str.w	r1, [r3, #-4]!
   28dee:	4630      	mov	r0, r6
   28df0:	4611      	mov	r1, r2
   28df2:	f007 ff79 	bl	30ce8 <interface_socket_wait>
   28df6:	b120      	cbz	r0, 28e02 <logobj_interface_write+0xb2>
   28df8:	6823      	ldr	r3, [r4, #0]
   28dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   28dfe:	6023      	str	r3, [r4, #0]
   28e00:	e7cc      	b.n	28d9c <logobj_interface_write+0x4c>
   28e02:	4630      	mov	r0, r6
   28e04:	f007 ffe4 	bl	30dd0 <interface_socket_from_handle_get>
   28e08:	4603      	mov	r3, r0
   28e0a:	b108      	cbz	r0, 28e10 <logobj_interface_write+0xc0>
   28e0c:	6840      	ldr	r0, [r0, #4]
   28e0e:	b9b0      	cbnz	r0, 28e3e <logobj_interface_write+0xee>
   28e10:	4628      	mov	r0, r5
   28e12:	6823      	ldr	r3, [r4, #0]
   28e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   28e18:	6023      	str	r3, [r4, #0]
   28e1a:	b002      	add	sp, #8
   28e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28e20:	9800      	ldr	r0, [sp, #0]
   28e22:	f004 fc9f 	bl	2d764 <rpc_logobj_client_message_free>
   28e26:	6823      	ldr	r3, [r4, #0]
   28e28:	2005      	movs	r0, #5
   28e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   28e2e:	6023      	str	r3, [r4, #0]
   28e30:	e7b4      	b.n	28d9c <logobj_interface_write+0x4c>
   28e32:	2016      	movs	r0, #22
   28e34:	f7fc fda2 	bl	2597c <bsd_os_errno_set>
   28e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28e3c:	e7b2      	b.n	28da4 <logobj_interface_write+0x54>
   28e3e:	f8c3 8004 	str.w	r8, [r3, #4]
   28e42:	e7d9      	b.n	28df8 <logobj_interface_write+0xa8>
   28e44:	2073      	movs	r0, #115	; 0x73
   28e46:	e7a9      	b.n	28d9c <logobj_interface_write+0x4c>
   28e48:	2009      	movs	r0, #9
   28e4a:	e7a7      	b.n	28d9c <logobj_interface_write+0x4c>
   28e4c:	202d      	movs	r0, #45	; 0x2d
   28e4e:	f7fc fd95 	bl	2597c <bsd_os_errno_set>
   28e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28e56:	e7a5      	b.n	28da4 <logobj_interface_write+0x54>
   28e58:	2009      	movs	r0, #9
   28e5a:	f7fc fd8f 	bl	2597c <bsd_os_errno_set>
   28e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28e62:	e79f      	b.n	28da4 <logobj_interface_write+0x54>

00028e64 <logobj_interface_setopt>:
   28e64:	b5f0      	push	{r4, r5, r6, r7, lr}
   28e66:	2901      	cmp	r1, #1
   28e68:	b085      	sub	sp, #20
   28e6a:	d06d      	beq.n	28f48 <logobj_interface_setopt+0xe4>
   28e6c:	461e      	mov	r6, r3
   28e6e:	f240 2305 	movw	r3, #517	; 0x205
   28e72:	4299      	cmp	r1, r3
   28e74:	f040 80a0 	bne.w	28fb8 <logobj_interface_setopt+0x154>
   28e78:	4607      	mov	r7, r0
   28e7a:	4615      	mov	r5, r2
   28e7c:	f007 ffa8 	bl	30dd0 <interface_socket_from_handle_get>
   28e80:	4604      	mov	r4, r0
   28e82:	2800      	cmp	r0, #0
   28e84:	f000 80c3 	beq.w	2900e <logobj_interface_setopt+0x1aa>
   28e88:	2d01      	cmp	r5, #1
   28e8a:	d019      	beq.n	28ec0 <logobj_interface_setopt+0x5c>
   28e8c:	2d02      	cmp	r5, #2
   28e8e:	d010      	beq.n	28eb2 <logobj_interface_setopt+0x4e>
   28e90:	252a      	movs	r5, #42	; 0x2a
   28e92:	6803      	ldr	r3, [r0, #0]
   28e94:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   28e98:	6023      	str	r3, [r4, #0]
   28e9a:	6823      	ldr	r3, [r4, #0]
   28e9c:	4628      	mov	r0, r5
   28e9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   28ea2:	6023      	str	r3, [r4, #0]
   28ea4:	f7fc fd6a 	bl	2597c <bsd_os_errno_set>
   28ea8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   28eac:	4628      	mov	r0, r5
   28eae:	b005      	add	sp, #20
   28eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28eb2:	b116      	cbz	r6, 28eba <logobj_interface_setopt+0x56>
   28eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28eb6:	2b01      	cmp	r3, #1
   28eb8:	d04e      	beq.n	28f58 <logobj_interface_setopt+0xf4>
   28eba:	6823      	ldr	r3, [r4, #0]
   28ebc:	2516      	movs	r5, #22
   28ebe:	e7e9      	b.n	28e94 <logobj_interface_setopt+0x30>
   28ec0:	2e00      	cmp	r6, #0
   28ec2:	d0fa      	beq.n	28eba <logobj_interface_setopt+0x56>
   28ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28ec6:	2b04      	cmp	r3, #4
   28ec8:	d1f7      	bne.n	28eba <logobj_interface_setopt+0x56>
   28eca:	2100      	movs	r1, #0
   28ecc:	a803      	add	r0, sp, #12
   28ece:	f004 fc1b 	bl	2d708 <rpc_logobj_client_request_alloc>
   28ed2:	4605      	mov	r5, r0
   28ed4:	2800      	cmp	r0, #0
   28ed6:	d175      	bne.n	28fc4 <logobj_interface_setopt+0x160>
   28ed8:	9803      	ldr	r0, [sp, #12]
   28eda:	2208      	movs	r2, #8
   28edc:	4629      	mov	r1, r5
   28ede:	300c      	adds	r0, #12
   28ee0:	f00e faaf 	bl	37442 <memset>
   28ee4:	9803      	ldr	r0, [sp, #12]
   28ee6:	4631      	mov	r1, r6
   28ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   28eea:	300c      	adds	r0, #12
   28eec:	f00e fa89 	bl	37402 <memcpy>
   28ef0:	2308      	movs	r3, #8
   28ef2:	9803      	ldr	r0, [sp, #12]
   28ef4:	f247 0102 	movw	r1, #28674	; 0x7002
   28ef8:	7203      	strb	r3, [r0, #8]
   28efa:	7245      	strb	r5, [r0, #9]
   28efc:	7285      	strb	r5, [r0, #10]
   28efe:	72c5      	strb	r5, [r0, #11]
   28f00:	6823      	ldr	r3, [r4, #0]
   28f02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   28f06:	6023      	str	r3, [r4, #0]
   28f08:	f004 fc16 	bl	2d738 <rpc_logobj_client_request_send>
   28f0c:	2800      	cmp	r0, #0
   28f0e:	d178      	bne.n	29002 <logobj_interface_setopt+0x19e>
   28f10:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28f12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   28f16:	2900      	cmp	r1, #0
   28f18:	bf08      	it	eq
   28f1a:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   28f1e:	ab04      	add	r3, sp, #16
   28f20:	f843 1d08 	str.w	r1, [r3, #-8]!
   28f24:	4638      	mov	r0, r7
   28f26:	4611      	mov	r1, r2
   28f28:	f007 fede 	bl	30ce8 <interface_socket_wait>
   28f2c:	4605      	mov	r5, r0
   28f2e:	2800      	cmp	r0, #0
   28f30:	d140      	bne.n	28fb4 <logobj_interface_setopt+0x150>
   28f32:	4638      	mov	r0, r7
   28f34:	f007 ff4c 	bl	30dd0 <interface_socket_from_handle_get>
   28f38:	2800      	cmp	r0, #0
   28f3a:	d04e      	beq.n	28fda <logobj_interface_setopt+0x176>
   28f3c:	6843      	ldr	r3, [r0, #4]
   28f3e:	2b00      	cmp	r3, #0
   28f40:	d04b      	beq.n	28fda <logobj_interface_setopt+0x176>
   28f42:	6045      	str	r5, [r0, #4]
   28f44:	461d      	mov	r5, r3
   28f46:	e035      	b.n	28fb4 <logobj_interface_setopt+0x150>
   28f48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   28f4a:	9400      	str	r4, [sp, #0]
   28f4c:	f007 ff68 	bl	30e20 <interface_socket_setopt>
   28f50:	4605      	mov	r5, r0
   28f52:	4628      	mov	r0, r5
   28f54:	b005      	add	sp, #20
   28f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28f58:	2100      	movs	r1, #0
   28f5a:	a802      	add	r0, sp, #8
   28f5c:	7835      	ldrb	r5, [r6, #0]
   28f5e:	f004 fbd3 	bl	2d708 <rpc_logobj_client_request_alloc>
   28f62:	bb78      	cbnz	r0, 28fc4 <logobj_interface_setopt+0x160>
   28f64:	2d01      	cmp	r5, #1
   28f66:	bf08      	it	eq
   28f68:	4b2c      	ldreq	r3, [pc, #176]	; (2901c <logobj_interface_setopt+0x1b8>)
   28f6a:	f04f 0204 	mov.w	r2, #4
   28f6e:	bf08      	it	eq
   28f70:	701d      	strbeq	r5, [r3, #0]
   28f72:	2300      	movs	r3, #0
   28f74:	9802      	ldr	r0, [sp, #8]
   28f76:	f247 0101 	movw	r1, #28673	; 0x7001
   28f7a:	7243      	strb	r3, [r0, #9]
   28f7c:	60c5      	str	r5, [r0, #12]
   28f7e:	7283      	strb	r3, [r0, #10]
   28f80:	72c3      	strb	r3, [r0, #11]
   28f82:	7202      	strb	r2, [r0, #8]
   28f84:	6823      	ldr	r3, [r4, #0]
   28f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   28f8a:	6023      	str	r3, [r4, #0]
   28f8c:	f004 fbd4 	bl	2d738 <rpc_logobj_client_request_send>
   28f90:	4606      	mov	r6, r0
   28f92:	bb80      	cbnz	r0, 28ff6 <logobj_interface_setopt+0x192>
   28f94:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28f96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   28f9a:	2900      	cmp	r1, #0
   28f9c:	bf08      	it	eq
   28f9e:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   28fa2:	ab04      	add	r3, sp, #16
   28fa4:	f843 1d04 	str.w	r1, [r3, #-4]!
   28fa8:	4638      	mov	r0, r7
   28faa:	4611      	mov	r1, r2
   28fac:	f007 fe9c 	bl	30ce8 <interface_socket_wait>
   28fb0:	4605      	mov	r5, r0
   28fb2:	b150      	cbz	r0, 28fca <logobj_interface_setopt+0x166>
   28fb4:	6823      	ldr	r3, [r4, #0]
   28fb6:	e76d      	b.n	28e94 <logobj_interface_setopt+0x30>
   28fb8:	202a      	movs	r0, #42	; 0x2a
   28fba:	f7fc fcdf 	bl	2597c <bsd_os_errno_set>
   28fbe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   28fc2:	e773      	b.n	28eac <logobj_interface_setopt+0x48>
   28fc4:	6823      	ldr	r3, [r4, #0]
   28fc6:	250c      	movs	r5, #12
   28fc8:	e764      	b.n	28e94 <logobj_interface_setopt+0x30>
   28fca:	4638      	mov	r0, r7
   28fcc:	f007 ff00 	bl	30dd0 <interface_socket_from_handle_get>
   28fd0:	b140      	cbz	r0, 28fe4 <logobj_interface_setopt+0x180>
   28fd2:	6845      	ldr	r5, [r0, #4]
   28fd4:	b135      	cbz	r5, 28fe4 <logobj_interface_setopt+0x180>
   28fd6:	6046      	str	r6, [r0, #4]
   28fd8:	e7ec      	b.n	28fb4 <logobj_interface_setopt+0x150>
   28fda:	4631      	mov	r1, r6
   28fdc:	2204      	movs	r2, #4
   28fde:	4810      	ldr	r0, [pc, #64]	; (29020 <logobj_interface_setopt+0x1bc>)
   28fe0:	f00e fa0f 	bl	37402 <memcpy>
   28fe4:	6823      	ldr	r3, [r4, #0]
   28fe6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   28fea:	6023      	str	r3, [r4, #0]
   28fec:	6823      	ldr	r3, [r4, #0]
   28fee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   28ff2:	6023      	str	r3, [r4, #0]
   28ff4:	e75a      	b.n	28eac <logobj_interface_setopt+0x48>
   28ff6:	9802      	ldr	r0, [sp, #8]
   28ff8:	f004 fbb4 	bl	2d764 <rpc_logobj_client_message_free>
   28ffc:	2505      	movs	r5, #5
   28ffe:	6823      	ldr	r3, [r4, #0]
   29000:	e748      	b.n	28e94 <logobj_interface_setopt+0x30>
   29002:	9803      	ldr	r0, [sp, #12]
   29004:	f004 fbae 	bl	2d764 <rpc_logobj_client_message_free>
   29008:	2505      	movs	r5, #5
   2900a:	6823      	ldr	r3, [r4, #0]
   2900c:	e742      	b.n	28e94 <logobj_interface_setopt+0x30>
   2900e:	2009      	movs	r0, #9
   29010:	f7fc fcb4 	bl	2597c <bsd_os_errno_set>
   29014:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   29018:	e748      	b.n	28eac <logobj_interface_setopt+0x48>
   2901a:	bf00      	nop
   2901c:	2002cb92 	.word	0x2002cb92
   29020:	20023a9c 	.word	0x20023a9c

00029024 <logobj_interface_getopt>:
   29024:	b5f0      	push	{r4, r5, r6, r7, lr}
   29026:	2901      	cmp	r1, #1
   29028:	b083      	sub	sp, #12
   2902a:	9e08      	ldr	r6, [sp, #32]
   2902c:	d030      	beq.n	29090 <logobj_interface_getopt+0x6c>
   2902e:	461f      	mov	r7, r3
   29030:	f240 2305 	movw	r3, #517	; 0x205
   29034:	4299      	cmp	r1, r3
   29036:	d134      	bne.n	290a2 <logobj_interface_getopt+0x7e>
   29038:	4615      	mov	r5, r2
   2903a:	f007 fec9 	bl	30dd0 <interface_socket_from_handle_get>
   2903e:	2800      	cmp	r0, #0
   29040:	d037      	beq.n	290b2 <logobj_interface_getopt+0x8e>
   29042:	2d01      	cmp	r5, #1
   29044:	d015      	beq.n	29072 <logobj_interface_getopt+0x4e>
   29046:	2d02      	cmp	r5, #2
   29048:	d10b      	bne.n	29062 <logobj_interface_getopt+0x3e>
   2904a:	b387      	cbz	r7, 290ae <logobj_interface_getopt+0x8a>
   2904c:	6833      	ldr	r3, [r6, #0]
   2904e:	b373      	cbz	r3, 290ae <logobj_interface_getopt+0x8a>
   29050:	2300      	movs	r3, #0
   29052:	2201      	movs	r2, #1
   29054:	4618      	mov	r0, r3
   29056:	491a      	ldr	r1, [pc, #104]	; (290c0 <logobj_interface_getopt+0x9c>)
   29058:	7809      	ldrb	r1, [r1, #0]
   2905a:	7039      	strb	r1, [r7, #0]
   2905c:	6032      	str	r2, [r6, #0]
   2905e:	b003      	add	sp, #12
   29060:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29062:	2009      	movs	r0, #9
   29064:	f7fc fc8a 	bl	2597c <bsd_os_errno_set>
   29068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2906c:	4618      	mov	r0, r3
   2906e:	b003      	add	sp, #12
   29070:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29072:	b1e7      	cbz	r7, 290ae <logobj_interface_getopt+0x8a>
   29074:	6833      	ldr	r3, [r6, #0]
   29076:	2b03      	cmp	r3, #3
   29078:	d919      	bls.n	290ae <logobj_interface_getopt+0x8a>
   2907a:	4638      	mov	r0, r7
   2907c:	2204      	movs	r2, #4
   2907e:	4911      	ldr	r1, [pc, #68]	; (290c4 <logobj_interface_getopt+0xa0>)
   29080:	f00e f9bf 	bl	37402 <memcpy>
   29084:	2300      	movs	r3, #0
   29086:	2204      	movs	r2, #4
   29088:	4618      	mov	r0, r3
   2908a:	6032      	str	r2, [r6, #0]
   2908c:	b003      	add	sp, #12
   2908e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29090:	9600      	str	r6, [sp, #0]
   29092:	f007 ff0b 	bl	30eac <interface_socket_getopt>
   29096:	4603      	mov	r3, r0
   29098:	2800      	cmp	r0, #0
   2909a:	d1e3      	bne.n	29064 <logobj_interface_getopt+0x40>
   2909c:	4618      	mov	r0, r3
   2909e:	b003      	add	sp, #12
   290a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   290a2:	202a      	movs	r0, #42	; 0x2a
   290a4:	f7fc fc6a 	bl	2597c <bsd_os_errno_set>
   290a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   290ac:	e7de      	b.n	2906c <logobj_interface_getopt+0x48>
   290ae:	2016      	movs	r0, #22
   290b0:	e7d8      	b.n	29064 <logobj_interface_getopt+0x40>
   290b2:	2009      	movs	r0, #9
   290b4:	f7fc fc62 	bl	2597c <bsd_os_errno_set>
   290b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   290bc:	e7d6      	b.n	2906c <logobj_interface_getopt+0x48>
   290be:	bf00      	nop
   290c0:	2002cb93 	.word	0x2002cb93
   290c4:	20023a9c 	.word	0x20023a9c

000290c8 <logobj_interface_close>:
   290c8:	b510      	push	{r4, lr}
   290ca:	4604      	mov	r4, r0
   290cc:	f007 fe80 	bl	30dd0 <interface_socket_from_handle_get>
   290d0:	b138      	cbz	r0, 290e2 <logobj_interface_close+0x1a>
   290d2:	4620      	mov	r0, r4
   290d4:	f007 fdba 	bl	30c4c <interface_socket_free>
   290d8:	2300      	movs	r3, #0
   290da:	4a05      	ldr	r2, [pc, #20]	; (290f0 <logobj_interface_close+0x28>)
   290dc:	4618      	mov	r0, r3
   290de:	6013      	str	r3, [r2, #0]
   290e0:	bd10      	pop	{r4, pc}
   290e2:	2009      	movs	r0, #9
   290e4:	f7fc fc4a 	bl	2597c <bsd_os_errno_set>
   290e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   290ec:	bd10      	pop	{r4, pc}
   290ee:	bf00      	nop
   290f0:	20023aa0 	.word	0x20023aa0

000290f4 <rpc_transport_send>:
   290f4:	f000 bed8 	b.w	29ea8 <rpc_transport_ipc_send>

000290f8 <rpc_transport_rpc_alloc>:
   290f8:	f000 bf58 	b.w	29fac <rpc_transport_ipc_tx_rpc_data_alloc>

000290fc <rpc_transport_data_alloc>:
   290fc:	f000 bfbe 	b.w	2a07c <rpc_transport_ipc_tx_data_alloc>

00029100 <rpc_transport_rpc_free>:
   29100:	f000 bdb6 	b.w	29c70 <rpc_transport_ipc_msg_free>

00029104 <rpc_transport_data_free>:
   29104:	f000 ba64 	b.w	295d0 <rpc_transport_ipc_data_free>

00029108 <ipc_trace_init>:
   29108:	4b01      	ldr	r3, [pc, #4]	; (29110 <ipc_trace_init+0x8>)
   2910a:	6018      	str	r0, [r3, #0]
   2910c:	4770      	bx	lr
   2910e:	bf00      	nop
   29110:	20023ab0 	.word	0x20023ab0

00029114 <bsd_os_trace_irq_handler>:
   29114:	b5f0      	push	{r4, r5, r6, r7, lr}
   29116:	4b6e      	ldr	r3, [pc, #440]	; (292d0 <bsd_os_trace_irq_handler+0x1bc>)
   29118:	b083      	sub	sp, #12
   2911a:	781b      	ldrb	r3, [r3, #0]
   2911c:	2b00      	cmp	r3, #0
   2911e:	f000 80d3 	beq.w	292c8 <bsd_os_trace_irq_handler+0x1b4>
   29122:	4b6c      	ldr	r3, [pc, #432]	; (292d4 <bsd_os_trace_irq_handler+0x1c0>)
   29124:	681c      	ldr	r4, [r3, #0]
   29126:	b124      	cbz	r4, 29132 <bsd_os_trace_irq_handler+0x1e>
   29128:	68a3      	ldr	r3, [r4, #8]
   2912a:	6862      	ldr	r2, [r4, #4]
   2912c:	4293      	cmp	r3, r2
   2912e:	f040 808c 	bne.w	2924a <bsd_os_trace_irq_handler+0x136>
   29132:	4b69      	ldr	r3, [pc, #420]	; (292d8 <bsd_os_trace_irq_handler+0x1c4>)
   29134:	681c      	ldr	r4, [r3, #0]
   29136:	b11c      	cbz	r4, 29140 <bsd_os_trace_irq_handler+0x2c>
   29138:	68a3      	ldr	r3, [r4, #8]
   2913a:	6862      	ldr	r2, [r4, #4]
   2913c:	4293      	cmp	r3, r2
   2913e:	d146      	bne.n	291ce <bsd_os_trace_irq_handler+0xba>
   29140:	4b66      	ldr	r3, [pc, #408]	; (292dc <bsd_os_trace_irq_handler+0x1c8>)
   29142:	681c      	ldr	r4, [r3, #0]
   29144:	b11c      	cbz	r4, 2914e <bsd_os_trace_irq_handler+0x3a>
   29146:	68a3      	ldr	r3, [r4, #8]
   29148:	6862      	ldr	r2, [r4, #4]
   2914a:	4293      	cmp	r3, r2
   2914c:	d101      	bne.n	29152 <bsd_os_trace_irq_handler+0x3e>
   2914e:	b003      	add	sp, #12
   29150:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29152:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   29156:	f8ad 2000 	strh.w	r2, [sp]
   2915a:	7822      	ldrb	r2, [r4, #0]
   2915c:	466e      	mov	r6, sp
   2915e:	f88d 2004 	strb.w	r2, [sp, #4]
   29162:	6862      	ldr	r2, [r4, #4]
   29164:	2105      	movs	r1, #5
   29166:	4293      	cmp	r3, r2
   29168:	bf2a      	itet	cs
   2916a:	6927      	ldrcs	r7, [r4, #16]
   2916c:	1ad7      	subcc	r7, r2, r3
   2916e:	1aff      	subcs	r7, r7, r3
   29170:	4293      	cmp	r3, r2
   29172:	bf94      	ite	ls
   29174:	2500      	movls	r5, #0
   29176:	68e5      	ldrhi	r5, [r4, #12]
   29178:	b2bf      	uxth	r7, r7
   2917a:	bf88      	it	hi
   2917c:	1b52      	subhi	r2, r2, r5
   2917e:	4630      	mov	r0, r6
   29180:	bf88      	it	hi
   29182:	b295      	uxthhi	r5, r2
   29184:	f8ad 7002 	strh.w	r7, [sp, #2]
   29188:	f00c fef7 	bl	35f7a <bsd_os_trace_put>
   2918c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   29190:	68a0      	ldr	r0, [r4, #8]
   29192:	f00c fef2 	bl	35f7a <bsd_os_trace_put>
   29196:	68a3      	ldr	r3, [r4, #8]
   29198:	6922      	ldr	r2, [r4, #16]
   2919a:	441f      	add	r7, r3
   2919c:	4297      	cmp	r7, r2
   2919e:	bf08      	it	eq
   291a0:	68e3      	ldreq	r3, [r4, #12]
   291a2:	60a7      	str	r7, [r4, #8]
   291a4:	bf08      	it	eq
   291a6:	60a3      	streq	r3, [r4, #8]
   291a8:	2d00      	cmp	r5, #0
   291aa:	d0d0      	beq.n	2914e <bsd_os_trace_irq_handler+0x3a>
   291ac:	2105      	movs	r1, #5
   291ae:	4630      	mov	r0, r6
   291b0:	f8ad 5002 	strh.w	r5, [sp, #2]
   291b4:	f00c fee1 	bl	35f7a <bsd_os_trace_put>
   291b8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   291bc:	68e0      	ldr	r0, [r4, #12]
   291be:	f00c fedc 	bl	35f7a <bsd_os_trace_put>
   291c2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   291c6:	68e3      	ldr	r3, [r4, #12]
   291c8:	4413      	add	r3, r2
   291ca:	60a3      	str	r3, [r4, #8]
   291cc:	e7bf      	b.n	2914e <bsd_os_trace_irq_handler+0x3a>
   291ce:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   291d2:	f8ad 2000 	strh.w	r2, [sp]
   291d6:	7822      	ldrb	r2, [r4, #0]
   291d8:	466e      	mov	r6, sp
   291da:	f88d 2004 	strb.w	r2, [sp, #4]
   291de:	6862      	ldr	r2, [r4, #4]
   291e0:	2105      	movs	r1, #5
   291e2:	4293      	cmp	r3, r2
   291e4:	bf2a      	itet	cs
   291e6:	6927      	ldrcs	r7, [r4, #16]
   291e8:	1ad7      	subcc	r7, r2, r3
   291ea:	1aff      	subcs	r7, r7, r3
   291ec:	4293      	cmp	r3, r2
   291ee:	bf94      	ite	ls
   291f0:	2500      	movls	r5, #0
   291f2:	68e5      	ldrhi	r5, [r4, #12]
   291f4:	b2bf      	uxth	r7, r7
   291f6:	bf88      	it	hi
   291f8:	1b52      	subhi	r2, r2, r5
   291fa:	4630      	mov	r0, r6
   291fc:	bf88      	it	hi
   291fe:	b295      	uxthhi	r5, r2
   29200:	f8ad 7002 	strh.w	r7, [sp, #2]
   29204:	f00c feb9 	bl	35f7a <bsd_os_trace_put>
   29208:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2920c:	68a0      	ldr	r0, [r4, #8]
   2920e:	f00c feb4 	bl	35f7a <bsd_os_trace_put>
   29212:	68a3      	ldr	r3, [r4, #8]
   29214:	6922      	ldr	r2, [r4, #16]
   29216:	441f      	add	r7, r3
   29218:	4297      	cmp	r7, r2
   2921a:	bf08      	it	eq
   2921c:	68e3      	ldreq	r3, [r4, #12]
   2921e:	60a7      	str	r7, [r4, #8]
   29220:	bf08      	it	eq
   29222:	60a3      	streq	r3, [r4, #8]
   29224:	2d00      	cmp	r5, #0
   29226:	d08b      	beq.n	29140 <bsd_os_trace_irq_handler+0x2c>
   29228:	2105      	movs	r1, #5
   2922a:	4630      	mov	r0, r6
   2922c:	f8ad 5002 	strh.w	r5, [sp, #2]
   29230:	f00c fea3 	bl	35f7a <bsd_os_trace_put>
   29234:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   29238:	68e0      	ldr	r0, [r4, #12]
   2923a:	f00c fe9e 	bl	35f7a <bsd_os_trace_put>
   2923e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   29242:	68e3      	ldr	r3, [r4, #12]
   29244:	4413      	add	r3, r2
   29246:	60a3      	str	r3, [r4, #8]
   29248:	e77a      	b.n	29140 <bsd_os_trace_irq_handler+0x2c>
   2924a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2924e:	f8ad 2000 	strh.w	r2, [sp]
   29252:	7822      	ldrb	r2, [r4, #0]
   29254:	466e      	mov	r6, sp
   29256:	f88d 2004 	strb.w	r2, [sp, #4]
   2925a:	6862      	ldr	r2, [r4, #4]
   2925c:	2105      	movs	r1, #5
   2925e:	4293      	cmp	r3, r2
   29260:	bf2a      	itet	cs
   29262:	6927      	ldrcs	r7, [r4, #16]
   29264:	1ad7      	subcc	r7, r2, r3
   29266:	1aff      	subcs	r7, r7, r3
   29268:	4293      	cmp	r3, r2
   2926a:	bf94      	ite	ls
   2926c:	2500      	movls	r5, #0
   2926e:	68e5      	ldrhi	r5, [r4, #12]
   29270:	b2bf      	uxth	r7, r7
   29272:	bf88      	it	hi
   29274:	1b52      	subhi	r2, r2, r5
   29276:	4630      	mov	r0, r6
   29278:	bf88      	it	hi
   2927a:	b295      	uxthhi	r5, r2
   2927c:	f8ad 7002 	strh.w	r7, [sp, #2]
   29280:	f00c fe7b 	bl	35f7a <bsd_os_trace_put>
   29284:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   29288:	68a0      	ldr	r0, [r4, #8]
   2928a:	f00c fe76 	bl	35f7a <bsd_os_trace_put>
   2928e:	68a3      	ldr	r3, [r4, #8]
   29290:	6922      	ldr	r2, [r4, #16]
   29292:	441f      	add	r7, r3
   29294:	4297      	cmp	r7, r2
   29296:	bf08      	it	eq
   29298:	68e3      	ldreq	r3, [r4, #12]
   2929a:	60a7      	str	r7, [r4, #8]
   2929c:	bf08      	it	eq
   2929e:	60a3      	streq	r3, [r4, #8]
   292a0:	2d00      	cmp	r5, #0
   292a2:	f43f af46 	beq.w	29132 <bsd_os_trace_irq_handler+0x1e>
   292a6:	2105      	movs	r1, #5
   292a8:	4630      	mov	r0, r6
   292aa:	f8ad 5002 	strh.w	r5, [sp, #2]
   292ae:	f00c fe64 	bl	35f7a <bsd_os_trace_put>
   292b2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   292b6:	68e0      	ldr	r0, [r4, #12]
   292b8:	f00c fe5f 	bl	35f7a <bsd_os_trace_put>
   292bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   292c0:	68e3      	ldr	r3, [r4, #12]
   292c2:	4413      	add	r3, r2
   292c4:	60a3      	str	r3, [r4, #8]
   292c6:	e734      	b.n	29132 <bsd_os_trace_irq_handler+0x1e>
   292c8:	f7fc fce4 	bl	25c94 <bsd_os_trace_irq_clear>
   292cc:	e729      	b.n	29122 <bsd_os_trace_irq_handler+0xe>
   292ce:	bf00      	nop
   292d0:	2002cb95 	.word	0x2002cb95
   292d4:	20023aac 	.word	0x20023aac
   292d8:	20023aa4 	.word	0x20023aa4
   292dc:	20023aa8 	.word	0x20023aa8

000292e0 <ipc_trace_handle>:
   292e0:	2200      	movs	r2, #0
   292e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292e6:	4bb2      	ldr	r3, [pc, #712]	; (295b0 <ipc_trace_handle+0x2d0>)
   292e8:	b083      	sub	sp, #12
   292ea:	681b      	ldr	r3, [r3, #0]
   292ec:	6919      	ldr	r1, [r3, #16]
   292ee:	695c      	ldr	r4, [r3, #20]
   292f0:	7c18      	ldrb	r0, [r3, #16]
   292f2:	741a      	strb	r2, [r3, #16]
   292f4:	7c58      	ldrb	r0, [r3, #17]
   292f6:	745a      	strb	r2, [r3, #17]
   292f8:	7c98      	ldrb	r0, [r3, #18]
   292fa:	749a      	strb	r2, [r3, #18]
   292fc:	7cd8      	ldrb	r0, [r3, #19]
   292fe:	74da      	strb	r2, [r3, #19]
   29300:	7d18      	ldrb	r0, [r3, #20]
   29302:	751a      	strb	r2, [r3, #20]
   29304:	7d58      	ldrb	r0, [r3, #21]
   29306:	755a      	strb	r2, [r3, #21]
   29308:	7d98      	ldrb	r0, [r3, #22]
   2930a:	759a      	strb	r2, [r3, #22]
   2930c:	7dd8      	ldrb	r0, [r3, #23]
   2930e:	75da      	strb	r2, [r3, #23]
   29310:	b1a9      	cbz	r1, 2933e <ipc_trace_handle+0x5e>
   29312:	3901      	subs	r1, #1
   29314:	2903      	cmp	r1, #3
   29316:	d812      	bhi.n	2933e <ipc_trace_handle+0x5e>
   29318:	e8df f001 	tbb	[pc, r1]
   2931c:	1402a97c 	.word	0x1402a97c
   29320:	2501      	movs	r5, #1
   29322:	2003      	movs	r0, #3
   29324:	2200      	movs	r2, #0
   29326:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   2932a:	4ca2      	ldr	r4, [pc, #648]	; (295b4 <ipc_trace_handle+0x2d4>)
   2932c:	7025      	strb	r5, [r4, #0]
   2932e:	7a1c      	ldrb	r4, [r3, #8]
   29330:	7218      	strb	r0, [r3, #8]
   29332:	7a58      	ldrb	r0, [r3, #9]
   29334:	725a      	strb	r2, [r3, #9]
   29336:	7a98      	ldrb	r0, [r3, #10]
   29338:	729a      	strb	r2, [r3, #10]
   2933a:	7ada      	ldrb	r2, [r3, #11]
   2933c:	72d9      	strb	r1, [r3, #11]
   2933e:	b003      	add	sp, #12
   29340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29344:	2104      	movs	r1, #4
   29346:	2200      	movs	r2, #0
   29348:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2934c:	7a1c      	ldrb	r4, [r3, #8]
   2934e:	7219      	strb	r1, [r3, #8]
   29350:	7a59      	ldrb	r1, [r3, #9]
   29352:	725a      	strb	r2, [r3, #9]
   29354:	4997      	ldr	r1, [pc, #604]	; (295b4 <ipc_trace_handle+0x2d4>)
   29356:	7a9c      	ldrb	r4, [r3, #10]
   29358:	729a      	strb	r2, [r3, #10]
   2935a:	7adc      	ldrb	r4, [r3, #11]
   2935c:	72d8      	strb	r0, [r3, #11]
   2935e:	700a      	strb	r2, [r1, #0]
   29360:	780b      	ldrb	r3, [r1, #0]
   29362:	2b00      	cmp	r3, #0
   29364:	f000 809f 	beq.w	294a6 <ipc_trace_handle+0x1c6>
   29368:	4b93      	ldr	r3, [pc, #588]	; (295b8 <ipc_trace_handle+0x2d8>)
   2936a:	681c      	ldr	r4, [r3, #0]
   2936c:	b124      	cbz	r4, 29378 <ipc_trace_handle+0x98>
   2936e:	68a3      	ldr	r3, [r4, #8]
   29370:	6862      	ldr	r2, [r4, #4]
   29372:	4293      	cmp	r3, r2
   29374:	f040 80d9 	bne.w	2952a <ipc_trace_handle+0x24a>
   29378:	4b90      	ldr	r3, [pc, #576]	; (295bc <ipc_trace_handle+0x2dc>)
   2937a:	681c      	ldr	r4, [r3, #0]
   2937c:	b124      	cbz	r4, 29388 <ipc_trace_handle+0xa8>
   2937e:	68a3      	ldr	r3, [r4, #8]
   29380:	6862      	ldr	r2, [r4, #4]
   29382:	4293      	cmp	r3, r2
   29384:	f040 8092 	bne.w	294ac <ipc_trace_handle+0x1cc>
   29388:	4b8d      	ldr	r3, [pc, #564]	; (295c0 <ipc_trace_handle+0x2e0>)
   2938a:	681c      	ldr	r4, [r3, #0]
   2938c:	2c00      	cmp	r4, #0
   2938e:	d0d6      	beq.n	2933e <ipc_trace_handle+0x5e>
   29390:	68a3      	ldr	r3, [r4, #8]
   29392:	6862      	ldr	r2, [r4, #4]
   29394:	4293      	cmp	r3, r2
   29396:	d0d2      	beq.n	2933e <ipc_trace_handle+0x5e>
   29398:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2939c:	f8ad 2000 	strh.w	r2, [sp]
   293a0:	7822      	ldrb	r2, [r4, #0]
   293a2:	466e      	mov	r6, sp
   293a4:	f88d 2004 	strb.w	r2, [sp, #4]
   293a8:	6862      	ldr	r2, [r4, #4]
   293aa:	2105      	movs	r1, #5
   293ac:	4293      	cmp	r3, r2
   293ae:	bf2a      	itet	cs
   293b0:	6927      	ldrcs	r7, [r4, #16]
   293b2:	1ad7      	subcc	r7, r2, r3
   293b4:	1aff      	subcs	r7, r7, r3
   293b6:	4293      	cmp	r3, r2
   293b8:	bf94      	ite	ls
   293ba:	2500      	movls	r5, #0
   293bc:	68e5      	ldrhi	r5, [r4, #12]
   293be:	b2bf      	uxth	r7, r7
   293c0:	bf88      	it	hi
   293c2:	1b52      	subhi	r2, r2, r5
   293c4:	4630      	mov	r0, r6
   293c6:	bf88      	it	hi
   293c8:	b295      	uxthhi	r5, r2
   293ca:	f8ad 7002 	strh.w	r7, [sp, #2]
   293ce:	f00c fdd4 	bl	35f7a <bsd_os_trace_put>
   293d2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   293d6:	68a0      	ldr	r0, [r4, #8]
   293d8:	f00c fdcf 	bl	35f7a <bsd_os_trace_put>
   293dc:	68a3      	ldr	r3, [r4, #8]
   293de:	6922      	ldr	r2, [r4, #16]
   293e0:	441f      	add	r7, r3
   293e2:	4297      	cmp	r7, r2
   293e4:	bf08      	it	eq
   293e6:	68e3      	ldreq	r3, [r4, #12]
   293e8:	60a7      	str	r7, [r4, #8]
   293ea:	bf08      	it	eq
   293ec:	60a3      	streq	r3, [r4, #8]
   293ee:	2d00      	cmp	r5, #0
   293f0:	d0a5      	beq.n	2933e <ipc_trace_handle+0x5e>
   293f2:	2105      	movs	r1, #5
   293f4:	4630      	mov	r0, r6
   293f6:	f8ad 5002 	strh.w	r5, [sp, #2]
   293fa:	f00c fdbe 	bl	35f7a <bsd_os_trace_put>
   293fe:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   29402:	68e0      	ldr	r0, [r4, #12]
   29404:	f00c fdb9 	bl	35f7a <bsd_os_trace_put>
   29408:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2940c:	68e3      	ldr	r3, [r4, #12]
   2940e:	4413      	add	r3, r2
   29410:	60a3      	str	r3, [r4, #8]
   29412:	e794      	b.n	2933e <ipc_trace_handle+0x5e>
   29414:	4a67      	ldr	r2, [pc, #412]	; (295b4 <ipc_trace_handle+0x2d4>)
   29416:	7811      	ldrb	r1, [r2, #0]
   29418:	b109      	cbz	r1, 2941e <ipc_trace_handle+0x13e>
   2941a:	2100      	movs	r1, #0
   2941c:	7011      	strb	r1, [r2, #0]
   2941e:	68a5      	ldr	r5, [r4, #8]
   29420:	2d00      	cmp	r5, #0
   29422:	d03b      	beq.n	2949c <ipc_trace_handle+0x1bc>
   29424:	f04f 0c00 	mov.w	ip, #0
   29428:	f8df a190 	ldr.w	sl, [pc, #400]	; 295bc <ipc_trace_handle+0x2dc>
   2942c:	f8df b188 	ldr.w	fp, [pc, #392]	; 295b8 <ipc_trace_handle+0x2d8>
   29430:	4963      	ldr	r1, [pc, #396]	; (295c0 <ipc_trace_handle+0x2e0>)
   29432:	46e1      	mov	r9, ip
   29434:	4666      	mov	r6, ip
   29436:	4662      	mov	r2, ip
   29438:	f8d1 e000 	ldr.w	lr, [r1]
   2943c:	f8da 8000 	ldr.w	r8, [sl]
   29440:	f8db 7000 	ldr.w	r7, [fp]
   29444:	e008      	b.n	29458 <ipc_trace_handle+0x178>
   29446:	2963      	cmp	r1, #99	; 0x63
   29448:	d016      	beq.n	29478 <ipc_trace_handle+0x198>
   2944a:	2961      	cmp	r1, #97	; 0x61
   2944c:	bf04      	itt	eq
   2944e:	4607      	moveq	r7, r0
   29450:	2601      	moveq	r6, #1
   29452:	3201      	adds	r2, #1
   29454:	42aa      	cmp	r2, r5
   29456:	d013      	beq.n	29480 <ipc_trace_handle+0x1a0>
   29458:	1c91      	adds	r1, r2, #2
   2945a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   2945e:	6848      	ldr	r0, [r1, #4]
   29460:	7801      	ldrb	r1, [r0, #0]
   29462:	2962      	cmp	r1, #98	; 0x62
   29464:	d1ef      	bne.n	29446 <ipc_trace_handle+0x166>
   29466:	4680      	mov	r8, r0
   29468:	f04f 0901 	mov.w	r9, #1
   2946c:	e7f1      	b.n	29452 <ipc_trace_handle+0x172>
   2946e:	f7fc fc09 	bl	25c84 <bsd_os_trace_irq_set>
   29472:	b003      	add	sp, #12
   29474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29478:	4686      	mov	lr, r0
   2947a:	f04f 0c01 	mov.w	ip, #1
   2947e:	e7e8      	b.n	29452 <ipc_trace_handle+0x172>
   29480:	2e00      	cmp	r6, #0
   29482:	f040 8091 	bne.w	295a8 <ipc_trace_handle+0x2c8>
   29486:	f1b9 0f00 	cmp.w	r9, #0
   2948a:	d001      	beq.n	29490 <ipc_trace_handle+0x1b0>
   2948c:	f8ca 8000 	str.w	r8, [sl]
   29490:	f1bc 0f00 	cmp.w	ip, #0
   29494:	d002      	beq.n	2949c <ipc_trace_handle+0x1bc>
   29496:	4a4a      	ldr	r2, [pc, #296]	; (295c0 <ipc_trace_handle+0x2e0>)
   29498:	f8c2 e000 	str.w	lr, [r2]
   2949c:	2001      	movs	r0, #1
   2949e:	2200      	movs	r2, #0
   294a0:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   294a4:	e743      	b.n	2932e <ipc_trace_handle+0x4e>
   294a6:	f7fc fbf5 	bl	25c94 <bsd_os_trace_irq_clear>
   294aa:	e75d      	b.n	29368 <ipc_trace_handle+0x88>
   294ac:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   294b0:	f8ad 2000 	strh.w	r2, [sp]
   294b4:	7822      	ldrb	r2, [r4, #0]
   294b6:	466e      	mov	r6, sp
   294b8:	f88d 2004 	strb.w	r2, [sp, #4]
   294bc:	6862      	ldr	r2, [r4, #4]
   294be:	2105      	movs	r1, #5
   294c0:	4293      	cmp	r3, r2
   294c2:	bf2a      	itet	cs
   294c4:	6927      	ldrcs	r7, [r4, #16]
   294c6:	1ad7      	subcc	r7, r2, r3
   294c8:	1aff      	subcs	r7, r7, r3
   294ca:	4293      	cmp	r3, r2
   294cc:	bf94      	ite	ls
   294ce:	2500      	movls	r5, #0
   294d0:	68e5      	ldrhi	r5, [r4, #12]
   294d2:	b2bf      	uxth	r7, r7
   294d4:	bf88      	it	hi
   294d6:	1b52      	subhi	r2, r2, r5
   294d8:	4630      	mov	r0, r6
   294da:	bf88      	it	hi
   294dc:	b295      	uxthhi	r5, r2
   294de:	f8ad 7002 	strh.w	r7, [sp, #2]
   294e2:	f00c fd4a 	bl	35f7a <bsd_os_trace_put>
   294e6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   294ea:	68a0      	ldr	r0, [r4, #8]
   294ec:	f00c fd45 	bl	35f7a <bsd_os_trace_put>
   294f0:	68a3      	ldr	r3, [r4, #8]
   294f2:	6922      	ldr	r2, [r4, #16]
   294f4:	441f      	add	r7, r3
   294f6:	4297      	cmp	r7, r2
   294f8:	bf08      	it	eq
   294fa:	68e3      	ldreq	r3, [r4, #12]
   294fc:	60a7      	str	r7, [r4, #8]
   294fe:	bf08      	it	eq
   29500:	60a3      	streq	r3, [r4, #8]
   29502:	2d00      	cmp	r5, #0
   29504:	f43f af40 	beq.w	29388 <ipc_trace_handle+0xa8>
   29508:	2105      	movs	r1, #5
   2950a:	4630      	mov	r0, r6
   2950c:	f8ad 5002 	strh.w	r5, [sp, #2]
   29510:	f00c fd33 	bl	35f7a <bsd_os_trace_put>
   29514:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   29518:	68e0      	ldr	r0, [r4, #12]
   2951a:	f00c fd2e 	bl	35f7a <bsd_os_trace_put>
   2951e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   29522:	68e3      	ldr	r3, [r4, #12]
   29524:	4413      	add	r3, r2
   29526:	60a3      	str	r3, [r4, #8]
   29528:	e72e      	b.n	29388 <ipc_trace_handle+0xa8>
   2952a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2952e:	f8ad 2000 	strh.w	r2, [sp]
   29532:	7822      	ldrb	r2, [r4, #0]
   29534:	466e      	mov	r6, sp
   29536:	f88d 2004 	strb.w	r2, [sp, #4]
   2953a:	6862      	ldr	r2, [r4, #4]
   2953c:	2105      	movs	r1, #5
   2953e:	4293      	cmp	r3, r2
   29540:	bf2a      	itet	cs
   29542:	6927      	ldrcs	r7, [r4, #16]
   29544:	1ad7      	subcc	r7, r2, r3
   29546:	1aff      	subcs	r7, r7, r3
   29548:	4293      	cmp	r3, r2
   2954a:	bf94      	ite	ls
   2954c:	2500      	movls	r5, #0
   2954e:	68e5      	ldrhi	r5, [r4, #12]
   29550:	b2bf      	uxth	r7, r7
   29552:	bf88      	it	hi
   29554:	1b52      	subhi	r2, r2, r5
   29556:	4630      	mov	r0, r6
   29558:	bf88      	it	hi
   2955a:	b295      	uxthhi	r5, r2
   2955c:	f8ad 7002 	strh.w	r7, [sp, #2]
   29560:	f00c fd0b 	bl	35f7a <bsd_os_trace_put>
   29564:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   29568:	68a0      	ldr	r0, [r4, #8]
   2956a:	f00c fd06 	bl	35f7a <bsd_os_trace_put>
   2956e:	68a3      	ldr	r3, [r4, #8]
   29570:	6922      	ldr	r2, [r4, #16]
   29572:	441f      	add	r7, r3
   29574:	4297      	cmp	r7, r2
   29576:	bf08      	it	eq
   29578:	68e3      	ldreq	r3, [r4, #12]
   2957a:	60a7      	str	r7, [r4, #8]
   2957c:	bf08      	it	eq
   2957e:	60a3      	streq	r3, [r4, #8]
   29580:	2d00      	cmp	r5, #0
   29582:	f43f aef9 	beq.w	29378 <ipc_trace_handle+0x98>
   29586:	2105      	movs	r1, #5
   29588:	4630      	mov	r0, r6
   2958a:	f8ad 5002 	strh.w	r5, [sp, #2]
   2958e:	f00c fcf4 	bl	35f7a <bsd_os_trace_put>
   29592:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   29596:	68e0      	ldr	r0, [r4, #12]
   29598:	f00c fcef 	bl	35f7a <bsd_os_trace_put>
   2959c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   295a0:	68e3      	ldr	r3, [r4, #12]
   295a2:	4413      	add	r3, r2
   295a4:	60a3      	str	r3, [r4, #8]
   295a6:	e6e7      	b.n	29378 <ipc_trace_handle+0x98>
   295a8:	f8cb 7000 	str.w	r7, [fp]
   295ac:	e76b      	b.n	29486 <ipc_trace_handle+0x1a6>
   295ae:	bf00      	nop
   295b0:	20023ab0 	.word	0x20023ab0
   295b4:	2002cb95 	.word	0x2002cb95
   295b8:	20023aac 	.word	0x20023aac
   295bc:	20023aa4 	.word	0x20023aa4
   295c0:	20023aa8 	.word	0x20023aa8

000295c4 <rpc_trace_coredump_in_progress>:
   295c4:	4b01      	ldr	r3, [pc, #4]	; (295cc <rpc_trace_coredump_in_progress+0x8>)
   295c6:	7818      	ldrb	r0, [r3, #0]
   295c8:	4770      	bx	lr
   295ca:	bf00      	nop
   295cc:	2002cb95 	.word	0x2002cb95

000295d0 <rpc_transport_ipc_data_free>:
   295d0:	b510      	push	{r4, lr}
   295d2:	4b0e      	ldr	r3, [pc, #56]	; (2960c <rpc_transport_ipc_data_free+0x3c>)
   295d4:	4604      	mov	r4, r0
   295d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   295da:	4413      	add	r3, r2
   295dc:	4298      	cmp	r0, r3
   295de:	d20d      	bcs.n	295fc <rpc_transport_ipc_data_free+0x2c>
   295e0:	4282      	cmp	r2, r0
   295e2:	d80b      	bhi.n	295fc <rpc_transport_ipc_data_free+0x2c>
   295e4:	f000 fd1a 	bl	2a01c <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   295e8:	b158      	cbz	r0, 29602 <rpc_transport_ipc_data_free+0x32>
   295ea:	4a09      	ldr	r2, [pc, #36]	; (29610 <rpc_transport_ipc_data_free+0x40>)
   295ec:	6084      	str	r4, [r0, #8]
   295ee:	6002      	str	r2, [r0, #0]
   295f0:	f7ff fd80 	bl	290f4 <rpc_transport_send>
   295f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   295f8:	f7fc bb34 	b.w	25c64 <bsd_os_application_irq_set>
   295fc:	4620      	mov	r0, r4
   295fe:	f006 ffaf 	bl	30560 <nrf_shared_free>
   29602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29606:	f7fc bb2d 	b.w	25c64 <bsd_os_application_irq_set>
   2960a:	bf00      	nop
   2960c:	20023ab4 	.word	0x20023ab4
   29610:	00020001 	.word	0x00020001

00029614 <rpc_transport_ipc_init>:
   29614:	b188      	cbz	r0, 2963a <rpc_transport_ipc_init+0x26>
   29616:	b510      	push	{r4, lr}
   29618:	b082      	sub	sp, #8
   2961a:	aa01      	add	r2, sp, #4
   2961c:	4669      	mov	r1, sp
   2961e:	4604      	mov	r4, r0
   29620:	f000 fb58 	bl	29cd4 <rpc_transport_ipc_tx_init>
   29624:	4602      	mov	r2, r0
   29626:	b148      	cbz	r0, 2963c <rpc_transport_ipc_init+0x28>
   29628:	4b12      	ldr	r3, [pc, #72]	; (29674 <rpc_transport_ipc_init+0x60>)
   2962a:	3428      	adds	r4, #40	; 0x28
   2962c:	e894 0003 	ldmia.w	r4, {r0, r1}
   29630:	e883 0003 	stmia.w	r3, {r0, r1}
   29634:	4610      	mov	r0, r2
   29636:	b002      	add	sp, #8
   29638:	bd10      	pop	{r4, pc}
   2963a:	e7fe      	b.n	2963a <rpc_transport_ipc_init+0x26>
   2963c:	e9dd 1200 	ldrd	r1, r2, [sp]
   29640:	4620      	mov	r0, r4
   29642:	f000 f9ef 	bl	29a24 <rpc_transport_ipc_rx_init>
   29646:	4602      	mov	r2, r0
   29648:	4b0a      	ldr	r3, [pc, #40]	; (29674 <rpc_transport_ipc_init+0x60>)
   2964a:	f104 0128 	add.w	r1, r4, #40	; 0x28
   2964e:	c903      	ldmia	r1, {r0, r1}
   29650:	e883 0003 	stmia.w	r3, {r0, r1}
   29654:	2a00      	cmp	r2, #0
   29656:	d1ed      	bne.n	29634 <rpc_transport_ipc_init+0x20>
   29658:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2965c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2965e:	4906      	ldr	r1, [pc, #24]	; (29678 <rpc_transport_ipc_init+0x64>)
   29660:	015b      	lsls	r3, r3, #5
   29662:	b2db      	uxtb	r3, r3
   29664:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   29668:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   2966c:	6048      	str	r0, [r1, #4]
   2966e:	4610      	mov	r0, r2
   29670:	b002      	add	sp, #8
   29672:	bd10      	pop	{r4, pc}
   29674:	20023ab4 	.word	0x20023ab4
   29678:	e000e100 	.word	0xe000e100

0002967c <rpc_transport_ipc_shutdown>:
   2967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29680:	b08c      	sub	sp, #48	; 0x30
   29682:	f000 fd05 	bl	2a090 <rpc_transport_ipc_tx_suspend>
   29686:	2200      	movs	r2, #0
   29688:	2010      	movs	r0, #16
   2968a:	4b31      	ldr	r3, [pc, #196]	; (29750 <rpc_transport_ipc_shutdown+0xd4>)
   2968c:	f04f 0c01 	mov.w	ip, #1
   29690:	4c30      	ldr	r4, [pc, #192]	; (29754 <rpc_transport_ipc_shutdown+0xd8>)
   29692:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   29696:	6821      	ldr	r1, [r4, #0]
   29698:	2704      	movs	r7, #4
   2969a:	910a      	str	r1, [sp, #40]	; 0x28
   2969c:	492e      	ldr	r1, [pc, #184]	; (29758 <rpc_transport_ipc_shutdown+0xdc>)
   2969e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   296a0:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   296a4:	680d      	ldr	r5, [r1, #0]
   296a6:	950b      	str	r5, [sp, #44]	; 0x2c
   296a8:	4d2c      	ldr	r5, [pc, #176]	; (2975c <rpc_transport_ipc_shutdown+0xe0>)
   296aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   296ac:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   296b0:	682d      	ldr	r5, [r5, #0]
   296b2:	2640      	movs	r6, #64	; 0x40
   296b4:	9509      	str	r5, [sp, #36]	; 0x24
   296b6:	4d2a      	ldr	r5, [pc, #168]	; (29760 <rpc_transport_ipc_shutdown+0xe4>)
   296b8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   296bc:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   296c0:	f8d5 e000 	ldr.w	lr, [r5]
   296c4:	2580      	movs	r5, #128	; 0x80
   296c6:	f8cd e020 	str.w	lr, [sp, #32]
   296ca:	f8dd e020 	ldr.w	lr, [sp, #32]
   296ce:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   296d2:	f8d4 e000 	ldr.w	lr, [r4]
   296d6:	2405      	movs	r4, #5
   296d8:	f8cd e01c 	str.w	lr, [sp, #28]
   296dc:	f8df e08c 	ldr.w	lr, [pc, #140]	; 2976c <rpc_transport_ipc_shutdown+0xf0>
   296e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
   296e4:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   296e8:	f8de e000 	ldr.w	lr, [lr]
   296ec:	f8cd e018 	str.w	lr, [sp, #24]
   296f0:	f8df e07c 	ldr.w	lr, [pc, #124]	; 29770 <rpc_transport_ipc_shutdown+0xf4>
   296f4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   296f8:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   296fc:	f8de e000 	ldr.w	lr, [lr]
   29700:	f8cd e014 	str.w	lr, [sp, #20]
   29704:	f8dd e014 	ldr.w	lr, [sp, #20]
   29708:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   2970c:	f8d1 c000 	ldr.w	ip, [r1]
   29710:	f8cd c010 	str.w	ip, [sp, #16]
   29714:	f8dd c010 	ldr.w	ip, [sp, #16]
   29718:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   2971c:	680f      	ldr	r7, [r1, #0]
   2971e:	9703      	str	r7, [sp, #12]
   29720:	9f03      	ldr	r7, [sp, #12]
   29722:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   29726:	6808      	ldr	r0, [r1, #0]
   29728:	9002      	str	r0, [sp, #8]
   2972a:	9802      	ldr	r0, [sp, #8]
   2972c:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   29730:	680e      	ldr	r6, [r1, #0]
   29732:	480c      	ldr	r0, [pc, #48]	; (29764 <rpc_transport_ipc_shutdown+0xe8>)
   29734:	9601      	str	r6, [sp, #4]
   29736:	9e01      	ldr	r6, [sp, #4]
   29738:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   2973c:	6809      	ldr	r1, [r1, #0]
   2973e:	4b0a      	ldr	r3, [pc, #40]	; (29768 <rpc_transport_ipc_shutdown+0xec>)
   29740:	9100      	str	r1, [sp, #0]
   29742:	9900      	ldr	r1, [sp, #0]
   29744:	8002      	strh	r2, [r0, #0]
   29746:	601c      	str	r4, [r3, #0]
   29748:	b00c      	add	sp, #48	; 0x30
   2974a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2974e:	bf00      	nop
   29750:	4002a000 	.word	0x4002a000
   29754:	4002a5a0 	.word	0x4002a5a0
   29758:	4002a308 	.word	0x4002a308
   2975c:	4002a590 	.word	0x4002a590
   29760:	4002a598 	.word	0x4002a598
   29764:	20028946 	.word	0x20028946
   29768:	20023acc 	.word	0x20023acc
   2976c:	4002a5a8 	.word	0x4002a5a8
   29770:	4002a5ac 	.word	0x4002a5ac

00029774 <bsd_os_application_irq_handler>:
   29774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29778:	f7fc fa7c 	bl	25c74 <bsd_os_application_irq_clear>
   2977c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 29854 <bsd_os_application_irq_handler+0xe0>
   29780:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 29858 <bsd_os_application_irq_handler+0xe4>
   29784:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 2985c <bsd_os_application_irq_handler+0xe8>
   29788:	f108 0908 	add.w	r9, r8, #8
   2978c:	f858 7b04 	ldr.w	r7, [r8], #4
   29790:	6839      	ldr	r1, [r7, #0]
   29792:	b361      	cbz	r1, 297ee <bsd_os_application_irq_handler+0x7a>
   29794:	2400      	movs	r4, #0
   29796:	e002      	b.n	2979e <bsd_os_application_irq_handler+0x2a>
   29798:	3401      	adds	r4, #1
   2979a:	428c      	cmp	r4, r1
   2979c:	d227      	bcs.n	297ee <bsd_os_application_irq_handler+0x7a>
   2979e:	00e6      	lsls	r6, r4, #3
   297a0:	19bd      	adds	r5, r7, r6
   297a2:	68aa      	ldr	r2, [r5, #8]
   297a4:	2a00      	cmp	r2, #0
   297a6:	d0f7      	beq.n	29798 <bsd_os_application_irq_handler+0x24>
   297a8:	686a      	ldr	r2, [r5, #4]
   297aa:	b2d2      	uxtb	r2, r2
   297ac:	2a01      	cmp	r2, #1
   297ae:	d1f3      	bne.n	29798 <bsd_os_application_irq_handler+0x24>
   297b0:	6868      	ldr	r0, [r5, #4]
   297b2:	f8bb 2000 	ldrh.w	r2, [fp]
   297b6:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   297ba:	d1ed      	bne.n	29798 <bsd_os_application_irq_handler+0x24>
   297bc:	68a8      	ldr	r0, [r5, #8]
   297be:	6841      	ldr	r1, [r0, #4]
   297c0:	b2c9      	uxtb	r1, r1
   297c2:	2902      	cmp	r1, #2
   297c4:	d02c      	beq.n	29820 <bsd_os_application_irq_handler+0xac>
   297c6:	2901      	cmp	r1, #1
   297c8:	d015      	beq.n	297f6 <bsd_os_application_irq_handler+0x82>
   297ca:	3604      	adds	r6, #4
   297cc:	59b9      	ldr	r1, [r7, r6]
   297ce:	3201      	adds	r2, #1
   297d0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   297d4:	f041 0103 	orr.w	r1, r1, #3
   297d8:	51b9      	str	r1, [r7, r6]
   297da:	f8ab 2000 	strh.w	r2, [fp]
   297de:	f7fc fa41 	bl	25c64 <bsd_os_application_irq_set>
   297e2:	f858 7c04 	ldr.w	r7, [r8, #-4]
   297e6:	3401      	adds	r4, #1
   297e8:	6839      	ldr	r1, [r7, #0]
   297ea:	428c      	cmp	r4, r1
   297ec:	d3d7      	bcc.n	2979e <bsd_os_application_irq_handler+0x2a>
   297ee:	45c1      	cmp	r9, r8
   297f0:	d1cc      	bne.n	2978c <bsd_os_application_irq_handler+0x18>
   297f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   297f6:	6801      	ldr	r1, [r0, #0]
   297f8:	0c09      	lsrs	r1, r1, #16
   297fa:	f002 ff45 	bl	2c688 <rpc_handle_ctrl_message>
   297fe:	2801      	cmp	r0, #1
   29800:	d014      	beq.n	2982c <bsd_os_application_irq_handler+0xb8>
   29802:	d310      	bcc.n	29826 <bsd_os_application_irq_handler+0xb2>
   29804:	2802      	cmp	r0, #2
   29806:	d007      	beq.n	29818 <bsd_os_application_irq_handler+0xa4>
   29808:	2203      	movs	r2, #3
   2980a:	4b11      	ldr	r3, [pc, #68]	; (29850 <bsd_os_application_irq_handler+0xdc>)
   2980c:	4610      	mov	r0, r2
   2980e:	f8ca 2000 	str.w	r2, [sl]
   29812:	601a      	str	r2, [r3, #0]
   29814:	f005 fb6c 	bl	2eef0 <rpc_transport_ipc_fault_handler>
   29818:	f858 7c04 	ldr.w	r7, [r8, #-4]
   2981c:	6839      	ldr	r1, [r7, #0]
   2981e:	e7bb      	b.n	29798 <bsd_os_application_irq_handler+0x24>
   29820:	f002 ff4a 	bl	2c6b8 <rpc_handle_data_message>
   29824:	e7eb      	b.n	297fe <bsd_os_application_irq_handler+0x8a>
   29826:	f8bb 2000 	ldrh.w	r2, [fp]
   2982a:	e7ce      	b.n	297ca <bsd_os_application_irq_handler+0x56>
   2982c:	686a      	ldr	r2, [r5, #4]
   2982e:	f8bb 1000 	ldrh.w	r1, [fp]
   29832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   29836:	f042 0202 	orr.w	r2, r2, #2
   2983a:	606a      	str	r2, [r5, #4]
   2983c:	1c4a      	adds	r2, r1, #1
   2983e:	f8ab 2000 	strh.w	r2, [fp]
   29842:	f7fc fa0f 	bl	25c64 <bsd_os_application_irq_set>
   29846:	f858 7c04 	ldr.w	r7, [r8, #-4]
   2984a:	6839      	ldr	r1, [r7, #0]
   2984c:	e7a4      	b.n	29798 <bsd_os_application_irq_handler+0x24>
   2984e:	bf00      	nop
   29850:	20023abc 	.word	0x20023abc
   29854:	20023ac4 	.word	0x20023ac4
   29858:	20028946 	.word	0x20028946
   2985c:	20023acc 	.word	0x20023acc

00029860 <IPC_IRQHandler>:
   29860:	b570      	push	{r4, r5, r6, lr}
   29862:	f44f 6680 	mov.w	r6, #1024	; 0x400
   29866:	4d62      	ldr	r5, [pc, #392]	; (299f0 <IPC_IRQHandler+0x190>)
   29868:	4c62      	ldr	r4, [pc, #392]	; (299f4 <IPC_IRQHandler+0x194>)
   2986a:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   2986e:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   29872:	b086      	sub	sp, #24
   29874:	061b      	lsls	r3, r3, #24
   29876:	d50b      	bpl.n	29890 <IPC_IRQHandler+0x30>
   29878:	f7ff fd32 	bl	292e0 <ipc_trace_handle>
   2987c:	f7ff fea2 	bl	295c4 <rpc_trace_coredump_in_progress>
   29880:	2800      	cmp	r0, #0
   29882:	d151      	bne.n	29928 <IPC_IRQHandler+0xc8>
   29884:	4b5c      	ldr	r3, [pc, #368]	; (299f8 <IPC_IRQHandler+0x198>)
   29886:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   2988a:	681b      	ldr	r3, [r3, #0]
   2988c:	9301      	str	r3, [sp, #4]
   2988e:	9b01      	ldr	r3, [sp, #4]
   29890:	4b58      	ldr	r3, [pc, #352]	; (299f4 <IPC_IRQHandler+0x194>)
   29892:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   29896:	f012 0201 	ands.w	r2, r2, #1
   2989a:	d11c      	bne.n	298d6 <IPC_IRQHandler+0x76>
   2989c:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   298a0:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   298a4:	d145      	bne.n	29932 <IPC_IRQHandler+0xd2>
   298a6:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   298aa:	0750      	lsls	r0, r2, #29
   298ac:	d50c      	bpl.n	298c8 <IPC_IRQHandler+0x68>
   298ae:	4a53      	ldr	r2, [pc, #332]	; (299fc <IPC_IRQHandler+0x19c>)
   298b0:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   298b4:	6812      	ldr	r2, [r2, #0]
   298b6:	4b52      	ldr	r3, [pc, #328]	; (29a00 <IPC_IRQHandler+0x1a0>)
   298b8:	9204      	str	r2, [sp, #16]
   298ba:	9a04      	ldr	r2, [sp, #16]
   298bc:	681a      	ldr	r2, [r3, #0]
   298be:	2a02      	cmp	r2, #2
   298c0:	d079      	beq.n	299b6 <IPC_IRQHandler+0x156>
   298c2:	681a      	ldr	r2, [r3, #0]
   298c4:	2a01      	cmp	r2, #1
   298c6:	d05b      	beq.n	29980 <IPC_IRQHandler+0x120>
   298c8:	4b4a      	ldr	r3, [pc, #296]	; (299f4 <IPC_IRQHandler+0x194>)
   298ca:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   298ce:	06d2      	lsls	r2, r2, #27
   298d0:	d41e      	bmi.n	29910 <IPC_IRQHandler+0xb0>
   298d2:	b006      	add	sp, #24
   298d4:	bd70      	pop	{r4, r5, r6, pc}
   298d6:	2000      	movs	r0, #0
   298d8:	f248 0202 	movw	r2, #32770	; 0x8002
   298dc:	4949      	ldr	r1, [pc, #292]	; (29a04 <IPC_IRQHandler+0x1a4>)
   298de:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   298e2:	6809      	ldr	r1, [r1, #0]
   298e4:	9102      	str	r1, [sp, #8]
   298e6:	9902      	ldr	r1, [sp, #8]
   298e8:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   298ec:	4293      	cmp	r3, r2
   298ee:	d06b      	beq.n	299c8 <IPC_IRQHandler+0x168>
   298f0:	d82a      	bhi.n	29948 <IPC_IRQHandler+0xe8>
   298f2:	2b00      	cmp	r3, #0
   298f4:	d062      	beq.n	299bc <IPC_IRQHandler+0x15c>
   298f6:	2b02      	cmp	r3, #2
   298f8:	d937      	bls.n	2996a <IPC_IRQHandler+0x10a>
   298fa:	f248 0201 	movw	r2, #32769	; 0x8001
   298fe:	4293      	cmp	r3, r2
   29900:	d15c      	bne.n	299bc <IPC_IRQHandler+0x15c>
   29902:	2003      	movs	r0, #3
   29904:	2207      	movs	r2, #7
   29906:	493e      	ldr	r1, [pc, #248]	; (29a00 <IPC_IRQHandler+0x1a0>)
   29908:	4b3f      	ldr	r3, [pc, #252]	; (29a08 <IPC_IRQHandler+0x1a8>)
   2990a:	6008      	str	r0, [r1, #0]
   2990c:	601a      	str	r2, [r3, #0]
   2990e:	e7e0      	b.n	298d2 <IPC_IRQHandler+0x72>
   29910:	2100      	movs	r1, #0
   29912:	4a3e      	ldr	r2, [pc, #248]	; (29a0c <IPC_IRQHandler+0x1ac>)
   29914:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   29918:	6813      	ldr	r3, [r2, #0]
   2991a:	9305      	str	r3, [sp, #20]
   2991c:	9b05      	ldr	r3, [sp, #20]
   2991e:	b006      	add	sp, #24
   29920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29924:	f7fc b99e 	b.w	25c64 <bsd_os_application_irq_set>
   29928:	23e0      	movs	r3, #224	; 0xe0
   2992a:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   2992e:	606e      	str	r6, [r5, #4]
   29930:	e7cf      	b.n	298d2 <IPC_IRQHandler+0x72>
   29932:	4937      	ldr	r1, [pc, #220]	; (29a10 <IPC_IRQHandler+0x1b0>)
   29934:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   29938:	680b      	ldr	r3, [r1, #0]
   2993a:	9303      	str	r3, [sp, #12]
   2993c:	9b03      	ldr	r3, [sp, #12]
   2993e:	b006      	add	sp, #24
   29940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29944:	f7ff be9a 	b.w	2967c <rpc_transport_ipc_shutdown>
   29948:	4a32      	ldr	r2, [pc, #200]	; (29a14 <IPC_IRQHandler+0x1b4>)
   2994a:	4293      	cmp	r3, r2
   2994c:	d82a      	bhi.n	299a4 <IPC_IRQHandler+0x144>
   2994e:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   29952:	d82a      	bhi.n	299aa <IPC_IRQHandler+0x14a>
   29954:	f248 0203 	movw	r2, #32771	; 0x8003
   29958:	4293      	cmp	r3, r2
   2995a:	d12f      	bne.n	299bc <IPC_IRQHandler+0x15c>
   2995c:	2003      	movs	r0, #3
   2995e:	2204      	movs	r2, #4
   29960:	4927      	ldr	r1, [pc, #156]	; (29a00 <IPC_IRQHandler+0x1a0>)
   29962:	4b29      	ldr	r3, [pc, #164]	; (29a08 <IPC_IRQHandler+0x1a8>)
   29964:	6008      	str	r0, [r1, #0]
   29966:	601a      	str	r2, [r3, #0]
   29968:	e7b3      	b.n	298d2 <IPC_IRQHandler+0x72>
   2996a:	2303      	movs	r3, #3
   2996c:	4618      	mov	r0, r3
   2996e:	4924      	ldr	r1, [pc, #144]	; (29a00 <IPC_IRQHandler+0x1a0>)
   29970:	4a25      	ldr	r2, [pc, #148]	; (29a08 <IPC_IRQHandler+0x1a8>)
   29972:	600b      	str	r3, [r1, #0]
   29974:	6013      	str	r3, [r2, #0]
   29976:	b006      	add	sp, #24
   29978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2997c:	f005 bab8 	b.w	2eef0 <rpc_transport_ipc_fault_handler>
   29980:	4a25      	ldr	r2, [pc, #148]	; (29a18 <IPC_IRQHandler+0x1b8>)
   29982:	4826      	ldr	r0, [pc, #152]	; (29a1c <IPC_IRQHandler+0x1bc>)
   29984:	6811      	ldr	r1, [r2, #0]
   29986:	688a      	ldr	r2, [r1, #8]
   29988:	6002      	str	r2, [r0, #0]
   2998a:	6849      	ldr	r1, [r1, #4]
   2998c:	6041      	str	r1, [r0, #4]
   2998e:	b312      	cbz	r2, 299d6 <IPC_IRQHandler+0x176>
   29990:	b309      	cbz	r1, 299d6 <IPC_IRQHandler+0x176>
   29992:	6812      	ldr	r2, [r2, #0]
   29994:	2a10      	cmp	r2, #16
   29996:	d824      	bhi.n	299e2 <IPC_IRQHandler+0x182>
   29998:	680a      	ldr	r2, [r1, #0]
   2999a:	2a10      	cmp	r2, #16
   2999c:	d821      	bhi.n	299e2 <IPC_IRQHandler+0x182>
   2999e:	2202      	movs	r2, #2
   299a0:	601a      	str	r2, [r3, #0]
   299a2:	e791      	b.n	298c8 <IPC_IRQHandler+0x68>
   299a4:	4a1e      	ldr	r2, [pc, #120]	; (29a20 <IPC_IRQHandler+0x1c0>)
   299a6:	4293      	cmp	r3, r2
   299a8:	d108      	bne.n	299bc <IPC_IRQHandler+0x15c>
   299aa:	2003      	movs	r0, #3
   299ac:	4914      	ldr	r1, [pc, #80]	; (29a00 <IPC_IRQHandler+0x1a0>)
   299ae:	4a16      	ldr	r2, [pc, #88]	; (29a08 <IPC_IRQHandler+0x1a8>)
   299b0:	6008      	str	r0, [r1, #0]
   299b2:	6013      	str	r3, [r2, #0]
   299b4:	e78d      	b.n	298d2 <IPC_IRQHandler+0x72>
   299b6:	f7fc f955 	bl	25c64 <bsd_os_application_irq_set>
   299ba:	e785      	b.n	298c8 <IPC_IRQHandler+0x68>
   299bc:	2303      	movs	r3, #3
   299be:	4910      	ldr	r1, [pc, #64]	; (29a00 <IPC_IRQHandler+0x1a0>)
   299c0:	4a11      	ldr	r2, [pc, #68]	; (29a08 <IPC_IRQHandler+0x1a8>)
   299c2:	600b      	str	r3, [r1, #0]
   299c4:	6013      	str	r3, [r2, #0]
   299c6:	e784      	b.n	298d2 <IPC_IRQHandler+0x72>
   299c8:	2003      	movs	r0, #3
   299ca:	2206      	movs	r2, #6
   299cc:	490c      	ldr	r1, [pc, #48]	; (29a00 <IPC_IRQHandler+0x1a0>)
   299ce:	4b0e      	ldr	r3, [pc, #56]	; (29a08 <IPC_IRQHandler+0x1a8>)
   299d0:	6008      	str	r0, [r1, #0]
   299d2:	601a      	str	r2, [r3, #0]
   299d4:	e77d      	b.n	298d2 <IPC_IRQHandler+0x72>
   299d6:	2003      	movs	r0, #3
   299d8:	2110      	movs	r1, #16
   299da:	4a0b      	ldr	r2, [pc, #44]	; (29a08 <IPC_IRQHandler+0x1a8>)
   299dc:	6018      	str	r0, [r3, #0]
   299de:	6011      	str	r1, [r2, #0]
   299e0:	e772      	b.n	298c8 <IPC_IRQHandler+0x68>
   299e2:	2003      	movs	r0, #3
   299e4:	f24c 0106 	movw	r1, #49158	; 0xc006
   299e8:	4a07      	ldr	r2, [pc, #28]	; (29a08 <IPC_IRQHandler+0x1a8>)
   299ea:	6018      	str	r0, [r3, #0]
   299ec:	6011      	str	r1, [r2, #0]
   299ee:	e76b      	b.n	298c8 <IPC_IRQHandler+0x68>
   299f0:	e000e100 	.word	0xe000e100
   299f4:	4002a000 	.word	0x4002a000
   299f8:	4002a11c 	.word	0x4002a11c
   299fc:	4002a108 	.word	0x4002a108
   29a00:	20023acc 	.word	0x20023acc
   29a04:	4002a100 	.word	0x4002a100
   29a08:	20023abc 	.word	0x20023abc
   29a0c:	4002a110 	.word	0x4002a110
   29a10:	4002a118 	.word	0x4002a118
   29a14:	04400004 	.word	0x04400004
   29a18:	20023ad0 	.word	0x20023ad0
   29a1c:	20023ac4 	.word	0x20023ac4
   29a20:	05500001 	.word	0x05500001

00029a24 <rpc_transport_ipc_rx_init>:
   29a24:	2800      	cmp	r0, #0
   29a26:	f000 8109 	beq.w	29c3c <rpc_transport_ipc_rx_init+0x218>
   29a2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29a2e:	6805      	ldr	r5, [r0, #0]
   29a30:	b097      	sub	sp, #92	; 0x5c
   29a32:	2d00      	cmp	r5, #0
   29a34:	f000 80f8 	beq.w	29c28 <rpc_transport_ipc_rx_init+0x204>
   29a38:	6883      	ldr	r3, [r0, #8]
   29a3a:	2b00      	cmp	r3, #0
   29a3c:	f000 80f4 	beq.w	29c28 <rpc_transport_ipc_rx_init+0x204>
   29a40:	6906      	ldr	r6, [r0, #16]
   29a42:	2e00      	cmp	r6, #0
   29a44:	f000 80f0 	beq.w	29c28 <rpc_transport_ipc_rx_init+0x204>
   29a48:	6a84      	ldr	r4, [r0, #40]	; 0x28
   29a4a:	2c00      	cmp	r4, #0
   29a4c:	f000 80ec 	beq.w	29c28 <rpc_transport_ipc_rx_init+0x204>
   29a50:	6844      	ldr	r4, [r0, #4]
   29a52:	2c1b      	cmp	r4, #27
   29a54:	f240 80ed 	bls.w	29c32 <rpc_transport_ipc_rx_init+0x20e>
   29a58:	68c4      	ldr	r4, [r0, #12]
   29a5a:	2c0b      	cmp	r4, #11
   29a5c:	f240 80e9 	bls.w	29c32 <rpc_transport_ipc_rx_init+0x20e>
   29a60:	f8d0 e014 	ldr.w	lr, [r0, #20]
   29a64:	f1be 0f17 	cmp.w	lr, #23
   29a68:	f240 80e3 	bls.w	29c32 <rpc_transport_ipc_rx_init+0x20e>
   29a6c:	4604      	mov	r4, r0
   29a6e:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 29c64 <rpc_transport_ipc_rx_init+0x240>
   29a72:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   29a74:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 29c68 <rpc_transport_ipc_rx_init+0x244>
   29a78:	4690      	mov	r8, r2
   29a7a:	9101      	str	r1, [sp, #4]
   29a7c:	4672      	mov	r2, lr
   29a7e:	2100      	movs	r1, #0
   29a80:	4630      	mov	r0, r6
   29a82:	f8ca 7000 	str.w	r7, [sl]
   29a86:	f8cb 3000 	str.w	r3, [fp]
   29a8a:	f00d fcda 	bl	37442 <memset>
   29a8e:	69e3      	ldr	r3, [r4, #28]
   29a90:	4630      	mov	r0, r6
   29a92:	6033      	str	r3, [r6, #0]
   29a94:	69a3      	ldr	r3, [r4, #24]
   29a96:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 29c6c <rpc_transport_ipc_rx_init+0x248>
   29a9a:	6073      	str	r3, [r6, #4]
   29a9c:	f7ff fb34 	bl	29108 <ipc_trace_init>
   29aa0:	2200      	movs	r2, #0
   29aa2:	2001      	movs	r0, #1
   29aa4:	4b67      	ldr	r3, [pc, #412]	; (29c44 <rpc_transport_ipc_rx_init+0x220>)
   29aa6:	4968      	ldr	r1, [pc, #416]	; (29c48 <rpc_transport_ipc_rx_init+0x224>)
   29aa8:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   29aac:	6809      	ldr	r1, [r1, #0]
   29aae:	f04f 0c80 	mov.w	ip, #128	; 0x80
   29ab2:	9106      	str	r1, [sp, #24]
   29ab4:	4965      	ldr	r1, [pc, #404]	; (29c4c <rpc_transport_ipc_rx_init+0x228>)
   29ab6:	f8dd e018 	ldr.w	lr, [sp, #24]
   29aba:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   29abe:	6809      	ldr	r1, [r1, #0]
   29ac0:	702a      	strb	r2, [r5, #0]
   29ac2:	9105      	str	r1, [sp, #20]
   29ac4:	706a      	strb	r2, [r5, #1]
   29ac6:	70ea      	strb	r2, [r5, #3]
   29ac8:	70a8      	strb	r0, [r5, #2]
   29aca:	9905      	ldr	r1, [sp, #20]
   29acc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   29ace:	f8db e000 	ldr.w	lr, [fp]
   29ad2:	6069      	str	r1, [r5, #4]
   29ad4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   29ad6:	61ae      	str	r6, [r5, #24]
   29ad8:	60a9      	str	r1, [r5, #8]
   29ada:	9901      	ldr	r1, [sp, #4]
   29adc:	f8c5 e014 	str.w	lr, [r5, #20]
   29ae0:	6129      	str	r1, [r5, #16]
   29ae2:	495b      	ldr	r1, [pc, #364]	; (29c50 <rpc_transport_ipc_rx_init+0x22c>)
   29ae4:	f8c5 800c 	str.w	r8, [r5, #12]
   29ae8:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   29aec:	680c      	ldr	r4, [r1, #0]
   29aee:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   29af2:	9407      	str	r4, [sp, #28]
   29af4:	9c07      	ldr	r4, [sp, #28]
   29af6:	2404      	movs	r4, #4
   29af8:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   29afc:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   29b00:	4f54      	ldr	r7, [pc, #336]	; (29c54 <rpc_transport_ipc_rx_init+0x230>)
   29b02:	9408      	str	r4, [sp, #32]
   29b04:	9c08      	ldr	r4, [sp, #32]
   29b06:	2410      	movs	r4, #16
   29b08:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   29b0c:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   29b10:	9409      	str	r4, [sp, #36]	; 0x24
   29b12:	9c09      	ldr	r4, [sp, #36]	; 0x24
   29b14:	2440      	movs	r4, #64	; 0x40
   29b16:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   29b1a:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   29b1e:	940a      	str	r4, [sp, #40]	; 0x28
   29b20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   29b22:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   29b26:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   29b2a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   29b2e:	940b      	str	r4, [sp, #44]	; 0x2c
   29b30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   29b32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   29b36:	680c      	ldr	r4, [r1, #0]
   29b38:	940c      	str	r4, [sp, #48]	; 0x30
   29b3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   29b3c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   29b40:	688c      	ldr	r4, [r1, #8]
   29b42:	940d      	str	r4, [sp, #52]	; 0x34
   29b44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   29b46:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   29b4a:	690c      	ldr	r4, [r1, #16]
   29b4c:	940e      	str	r4, [sp, #56]	; 0x38
   29b4e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   29b50:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   29b54:	698c      	ldr	r4, [r1, #24]
   29b56:	940f      	str	r4, [sp, #60]	; 0x3c
   29b58:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   29b5a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   29b5e:	69cc      	ldr	r4, [r1, #28]
   29b60:	f501 7101 	add.w	r1, r1, #516	; 0x204
   29b64:	9410      	str	r4, [sp, #64]	; 0x40
   29b66:	9c10      	ldr	r4, [sp, #64]	; 0x40
   29b68:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   29b6c:	4304      	orrs	r4, r0
   29b6e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   29b72:	680d      	ldr	r5, [r1, #0]
   29b74:	4c38      	ldr	r4, [pc, #224]	; (29c58 <rpc_transport_ipc_rx_init+0x234>)
   29b76:	9511      	str	r5, [sp, #68]	; 0x44
   29b78:	9d11      	ldr	r5, [sp, #68]	; 0x44
   29b7a:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   29b7e:	4d37      	ldr	r5, [pc, #220]	; (29c5c <rpc_transport_ipc_rx_init+0x238>)
   29b80:	f046 0604 	orr.w	r6, r6, #4
   29b84:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   29b88:	680e      	ldr	r6, [r1, #0]
   29b8a:	9612      	str	r6, [sp, #72]	; 0x48
   29b8c:	9e12      	ldr	r6, [sp, #72]	; 0x48
   29b8e:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   29b92:	f046 0610 	orr.w	r6, r6, #16
   29b96:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   29b9a:	680e      	ldr	r6, [r1, #0]
   29b9c:	9613      	str	r6, [sp, #76]	; 0x4c
   29b9e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   29ba0:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   29ba4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   29ba8:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   29bac:	680e      	ldr	r6, [r1, #0]
   29bae:	9614      	str	r6, [sp, #80]	; 0x50
   29bb0:	9e14      	ldr	r6, [sp, #80]	; 0x50
   29bb2:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   29bb6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   29bba:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   29bbe:	f8da 3000 	ldr.w	r3, [sl]
   29bc2:	6809      	ldr	r1, [r1, #0]
   29bc4:	015b      	lsls	r3, r3, #5
   29bc6:	9115      	str	r1, [sp, #84]	; 0x54
   29bc8:	b2db      	uxtb	r3, r3
   29bca:	9915      	ldr	r1, [sp, #84]	; 0x54
   29bcc:	6022      	str	r2, [r4, #0]
   29bce:	f8c9 0000 	str.w	r0, [r9]
   29bd2:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   29bd6:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   29bda:	f8c5 c004 	str.w	ip, [r5, #4]
   29bde:	9204      	str	r2, [sp, #16]
   29be0:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   29be4:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   29be8:	9304      	str	r3, [sp, #16]
   29bea:	9b04      	ldr	r3, [sp, #16]
   29bec:	f8d9 3000 	ldr.w	r3, [r9]
   29bf0:	4283      	cmp	r3, r0
   29bf2:	d10f      	bne.n	29c14 <rpc_transport_ipc_rx_init+0x1f0>
   29bf4:	2614      	movs	r6, #20
   29bf6:	4d1a      	ldr	r5, [pc, #104]	; (29c60 <rpc_transport_ipc_rx_init+0x23c>)
   29bf8:	e000      	b.n	29bfc <rpc_transport_ipc_rx_init+0x1d8>
   29bfa:	b15d      	cbz	r5, 29c14 <rpc_transport_ipc_rx_init+0x1f0>
   29bfc:	a903      	add	r1, sp, #12
   29bfe:	2000      	movs	r0, #0
   29c00:	9603      	str	r6, [sp, #12]
   29c02:	f7fb fe03 	bl	2580c <bsd_os_timedwait>
   29c06:	9b03      	ldr	r3, [sp, #12]
   29c08:	f8d9 2000 	ldr.w	r2, [r9]
   29c0c:	3b14      	subs	r3, #20
   29c0e:	2a01      	cmp	r2, #1
   29c10:	441d      	add	r5, r3
   29c12:	d0f2      	beq.n	29bfa <rpc_transport_ipc_rx_init+0x1d6>
   29c14:	f8d9 3000 	ldr.w	r3, [r9]
   29c18:	2b01      	cmp	r3, #1
   29c1a:	bf0a      	itet	eq
   29c1c:	200d      	moveq	r0, #13
   29c1e:	6820      	ldrne	r0, [r4, #0]
   29c20:	6020      	streq	r0, [r4, #0]
   29c22:	b017      	add	sp, #92	; 0x5c
   29c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c28:	f24c 000e 	movw	r0, #49166	; 0xc00e
   29c2c:	b017      	add	sp, #92	; 0x5c
   29c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c32:	f24c 0009 	movw	r0, #49161	; 0xc009
   29c36:	b017      	add	sp, #92	; 0x5c
   29c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c3c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   29c40:	4770      	bx	lr
   29c42:	bf00      	nop
   29c44:	4002a000 	.word	0x4002a000
   29c48:	4002a610 	.word	0x4002a610
   29c4c:	4002a614 	.word	0x4002a614
   29c50:	4002a590 	.word	0x4002a590
   29c54:	40005000 	.word	0x40005000
   29c58:	20023abc 	.word	0x20023abc
   29c5c:	e000e100 	.word	0xe000e100
   29c60:	000249f0 	.word	0x000249f0
   29c64:	20023ac0 	.word	0x20023ac0
   29c68:	20023ad0 	.word	0x20023ad0
   29c6c:	20023acc 	.word	0x20023acc

00029c70 <rpc_transport_ipc_msg_free>:
   29c70:	b470      	push	{r4, r5, r6}
   29c72:	4e17      	ldr	r6, [pc, #92]	; (29cd0 <rpc_transport_ipc_msg_free+0x60>)
   29c74:	6831      	ldr	r1, [r6, #0]
   29c76:	680d      	ldr	r5, [r1, #0]
   29c78:	b1ad      	cbz	r5, 29ca6 <rpc_transport_ipc_msg_free+0x36>
   29c7a:	688b      	ldr	r3, [r1, #8]
   29c7c:	4283      	cmp	r3, r0
   29c7e:	d024      	beq.n	29cca <rpc_transport_ipc_msg_free+0x5a>
   29c80:	2300      	movs	r3, #0
   29c82:	3301      	adds	r3, #1
   29c84:	00da      	lsls	r2, r3, #3
   29c86:	429d      	cmp	r5, r3
   29c88:	eb01 0402 	add.w	r4, r1, r2
   29c8c:	d00b      	beq.n	29ca6 <rpc_transport_ipc_msg_free+0x36>
   29c8e:	68a4      	ldr	r4, [r4, #8]
   29c90:	42a0      	cmp	r0, r4
   29c92:	d1f6      	bne.n	29c82 <rpc_transport_ipc_msg_free+0x12>
   29c94:	3204      	adds	r2, #4
   29c96:	588b      	ldr	r3, [r1, r2]
   29c98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   29c9c:	f043 0303 	orr.w	r3, r3, #3
   29ca0:	508b      	str	r3, [r1, r2]
   29ca2:	bc70      	pop	{r4, r5, r6}
   29ca4:	4770      	bx	lr
   29ca6:	6871      	ldr	r1, [r6, #4]
   29ca8:	680d      	ldr	r5, [r1, #0]
   29caa:	2d00      	cmp	r5, #0
   29cac:	d0f9      	beq.n	29ca2 <rpc_transport_ipc_msg_free+0x32>
   29cae:	688b      	ldr	r3, [r1, #8]
   29cb0:	4283      	cmp	r3, r0
   29cb2:	d00a      	beq.n	29cca <rpc_transport_ipc_msg_free+0x5a>
   29cb4:	2300      	movs	r3, #0
   29cb6:	3301      	adds	r3, #1
   29cb8:	00da      	lsls	r2, r3, #3
   29cba:	429d      	cmp	r5, r3
   29cbc:	eb01 0402 	add.w	r4, r1, r2
   29cc0:	d0ef      	beq.n	29ca2 <rpc_transport_ipc_msg_free+0x32>
   29cc2:	68a4      	ldr	r4, [r4, #8]
   29cc4:	42a0      	cmp	r0, r4
   29cc6:	d1f6      	bne.n	29cb6 <rpc_transport_ipc_msg_free+0x46>
   29cc8:	e7e4      	b.n	29c94 <rpc_transport_ipc_msg_free+0x24>
   29cca:	2204      	movs	r2, #4
   29ccc:	e7e3      	b.n	29c96 <rpc_transport_ipc_msg_free+0x26>
   29cce:	bf00      	nop
   29cd0:	20023ac4 	.word	0x20023ac4

00029cd4 <rpc_transport_ipc_tx_init>:
   29cd4:	2800      	cmp	r0, #0
   29cd6:	f000 80b8 	beq.w	29e4a <rpc_transport_ipc_tx_init+0x176>
   29cda:	2900      	cmp	r1, #0
   29cdc:	f000 80b5 	beq.w	29e4a <rpc_transport_ipc_tx_init+0x176>
   29ce0:	2a00      	cmp	r2, #0
   29ce2:	f000 80b2 	beq.w	29e4a <rpc_transport_ipc_tx_init+0x176>
   29ce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29cea:	6a04      	ldr	r4, [r0, #32]
   29cec:	b085      	sub	sp, #20
   29cee:	2c00      	cmp	r4, #0
   29cf0:	f000 80a6 	beq.w	29e40 <rpc_transport_ipc_tx_init+0x16c>
   29cf4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   29cf6:	2800      	cmp	r0, #0
   29cf8:	f000 80a2 	beq.w	29e40 <rpc_transport_ipc_tx_init+0x16c>
   29cfc:	f642 4587 	movw	r5, #11399	; 0x2c87
   29d00:	f04f 0a00 	mov.w	sl, #0
   29d04:	4e55      	ldr	r6, [pc, #340]	; (29e5c <rpc_transport_ipc_tx_init+0x188>)
   29d06:	42a8      	cmp	r0, r5
   29d08:	f886 a000 	strb.w	sl, [r6]
   29d0c:	f240 80a0 	bls.w	29e50 <rpc_transport_ipc_tx_init+0x17c>
   29d10:	2708      	movs	r7, #8
   29d12:	f8df 9180 	ldr.w	r9, [pc, #384]	; 29e94 <rpc_transport_ipc_tx_init+0x1c0>
   29d16:	4620      	mov	r0, r4
   29d18:	4616      	mov	r6, r2
   29d1a:	460d      	mov	r5, r1
   29d1c:	2244      	movs	r2, #68	; 0x44
   29d1e:	4651      	mov	r1, sl
   29d20:	f8c9 4000 	str.w	r4, [r9]
   29d24:	f00d fb8d 	bl	37442 <memset>
   29d28:	f8d9 2000 	ldr.w	r2, [r9]
   29d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29d30:	f8df 8164 	ldr.w	r8, [pc, #356]	; 29e98 <rpc_transport_ipc_tx_init+0x1c4>
   29d34:	f882 a001 	strb.w	sl, [r2, #1]
   29d38:	f882 a002 	strb.w	sl, [r2, #2]
   29d3c:	f882 a003 	strb.w	sl, [r2, #3]
   29d40:	7017      	strb	r7, [r2, #0]
   29d42:	4618      	mov	r0, r3
   29d44:	2244      	movs	r2, #68	; 0x44
   29d46:	4651      	mov	r1, sl
   29d48:	f8c8 3000 	str.w	r3, [r8]
   29d4c:	f00d fb79 	bl	37442 <memset>
   29d50:	f8d8 2000 	ldr.w	r2, [r8]
   29d54:	f104 0388 	add.w	r3, r4, #136	; 0x88
   29d58:	f8df b140 	ldr.w	fp, [pc, #320]	; 29e9c <rpc_transport_ipc_tx_init+0x1c8>
   29d5c:	7017      	strb	r7, [r2, #0]
   29d5e:	f882 a001 	strb.w	sl, [r2, #1]
   29d62:	f882 a002 	strb.w	sl, [r2, #2]
   29d66:	f882 a003 	strb.w	sl, [r2, #3]
   29d6a:	4618      	mov	r0, r3
   29d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
   29d70:	4651      	mov	r1, sl
   29d72:	f8cb 3000 	str.w	r3, [fp]
   29d76:	f00d fb64 	bl	37442 <memset>
   29d7a:	4b39      	ldr	r3, [pc, #228]	; (29e60 <rpc_transport_ipc_tx_init+0x18c>)
   29d7c:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   29d80:	f8c3 c000 	str.w	ip, [r3]
   29d84:	4651      	mov	r1, sl
   29d86:	4660      	mov	r0, ip
   29d88:	f44f 7200 	mov.w	r2, #512	; 0x200
   29d8c:	f00d fb59 	bl	37442 <memset>
   29d90:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   29d94:	2106      	movs	r1, #6
   29d96:	f04f 0e01 	mov.w	lr, #1
   29d9a:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   29d9e:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   29da2:	4b30      	ldr	r3, [pc, #192]	; (29e64 <rpc_transport_ipc_tx_init+0x190>)
   29da4:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   29da8:	605c      	str	r4, [r3, #4]
   29daa:	4c2f      	ldr	r4, [pc, #188]	; (29e68 <rpc_transport_ipc_tx_init+0x194>)
   29dac:	f8c3 c008 	str.w	ip, [r3, #8]
   29db0:	8199      	strh	r1, [r3, #12]
   29db2:	f8a3 e000 	strh.w	lr, [r3]
   29db6:	4619      	mov	r1, r3
   29db8:	611c      	str	r4, [r3, #16]
   29dba:	4b2c      	ldr	r3, [pc, #176]	; (29e6c <rpc_transport_ipc_tx_init+0x198>)
   29dbc:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 29ea0 <rpc_transport_ipc_tx_init+0x1cc>
   29dc0:	6120      	str	r0, [r4, #16]
   29dc2:	482b      	ldr	r0, [pc, #172]	; (29e70 <rpc_transport_ipc_tx_init+0x19c>)
   29dc4:	6063      	str	r3, [r4, #4]
   29dc6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   29dca:	60a0      	str	r0, [r4, #8]
   29dcc:	f8c4 c000 	str.w	ip, [r4]
   29dd0:	4828      	ldr	r0, [pc, #160]	; (29e74 <rpc_transport_ipc_tx_init+0x1a0>)
   29dd2:	60e3      	str	r3, [r4, #12]
   29dd4:	6162      	str	r2, [r4, #20]
   29dd6:	f006 f9d9 	bl	3018c <nrf_mem_register>
   29dda:	2800      	cmp	r0, #0
   29ddc:	d132      	bne.n	29e44 <rpc_transport_ipc_tx_init+0x170>
   29dde:	f04f 0c02 	mov.w	ip, #2
   29de2:	2420      	movs	r4, #32
   29de4:	f8d9 1000 	ldr.w	r1, [r9]
   29de8:	f8db 2000 	ldr.w	r2, [fp]
   29dec:	6029      	str	r1, [r5, #0]
   29dee:	4b1c      	ldr	r3, [pc, #112]	; (29e60 <rpc_transport_ipc_tx_init+0x18c>)
   29df0:	f8d8 1000 	ldr.w	r1, [r8]
   29df4:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 29ea4 <rpc_transport_ipc_tx_init+0x1d0>
   29df8:	4d1f      	ldr	r5, [pc, #124]	; (29e78 <rpc_transport_ipc_tx_init+0x1a4>)
   29dfa:	6031      	str	r1, [r6, #0]
   29dfc:	f8ce 2000 	str.w	r2, [lr]
   29e00:	681b      	ldr	r3, [r3, #0]
   29e02:	491e      	ldr	r1, [pc, #120]	; (29e7c <rpc_transport_ipc_tx_init+0x1a8>)
   29e04:	f502 7200 	add.w	r2, r2, #512	; 0x200
   29e08:	602a      	str	r2, [r5, #0]
   29e0a:	4e1d      	ldr	r6, [pc, #116]	; (29e80 <rpc_transport_ipc_tx_init+0x1ac>)
   29e0c:	4a1d      	ldr	r2, [pc, #116]	; (29e84 <rpc_transport_ipc_tx_init+0x1b0>)
   29e0e:	4d1e      	ldr	r5, [pc, #120]	; (29e88 <rpc_transport_ipc_tx_init+0x1b4>)
   29e10:	600b      	str	r3, [r1, #0]
   29e12:	f503 7300 	add.w	r3, r3, #512	; 0x200
   29e16:	491d      	ldr	r1, [pc, #116]	; (29e8c <rpc_transport_ipc_tx_init+0x1b8>)
   29e18:	6033      	str	r3, [r6, #0]
   29e1a:	8028      	strh	r0, [r5, #0]
   29e1c:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   29e20:	6809      	ldr	r1, [r1, #0]
   29e22:	4b1b      	ldr	r3, [pc, #108]	; (29e90 <rpc_transport_ipc_tx_init+0x1bc>)
   29e24:	9103      	str	r1, [sp, #12]
   29e26:	9903      	ldr	r1, [sp, #12]
   29e28:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   29e2c:	6819      	ldr	r1, [r3, #0]
   29e2e:	443b      	add	r3, r7
   29e30:	9102      	str	r1, [sp, #8]
   29e32:	9902      	ldr	r1, [sp, #8]
   29e34:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   29e38:	681b      	ldr	r3, [r3, #0]
   29e3a:	9301      	str	r3, [sp, #4]
   29e3c:	9b01      	ldr	r3, [sp, #4]
   29e3e:	e001      	b.n	29e44 <rpc_transport_ipc_tx_init+0x170>
   29e40:	f24c 0007 	movw	r0, #49159	; 0xc007
   29e44:	b005      	add	sp, #20
   29e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e4a:	f24c 000e 	movw	r0, #49166	; 0xc00e
   29e4e:	4770      	bx	lr
   29e50:	f24c 0004 	movw	r0, #49156	; 0xc004
   29e54:	b005      	add	sp, #20
   29e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e5a:	bf00      	nop
   29e5c:	2002cb96 	.word	0x2002cb96
   29e60:	20023afc 	.word	0x20023afc
   29e64:	20023ae8 	.word	0x20023ae8
   29e68:	20023b0c 	.word	0x20023b0c
   29e6c:	00040080 	.word	0x00040080
   29e70:	00040100 	.word	0x00040100
   29e74:	20023ad4 	.word	0x20023ad4
   29e78:	20023ae0 	.word	0x20023ae0
   29e7c:	20023adc 	.word	0x20023adc
   29e80:	20023ad8 	.word	0x20023ad8
   29e84:	4002a000 	.word	0x4002a000
   29e88:	20028948 	.word	0x20028948
   29e8c:	4002a514 	.word	0x4002a514
   29e90:	4002a51c 	.word	0x4002a51c
   29e94:	20023b08 	.word	0x20023b08
   29e98:	20023b00 	.word	0x20023b00
   29e9c:	20023b04 	.word	0x20023b04
   29ea0:	00080040 	.word	0x00080040
   29ea4:	20023ae4 	.word	0x20023ae4

00029ea8 <rpc_transport_ipc_send>:
   29ea8:	2800      	cmp	r0, #0
   29eaa:	d061      	beq.n	29f70 <rpc_transport_ipc_send+0xc8>
   29eac:	b4f0      	push	{r4, r5, r6, r7}
   29eae:	4b34      	ldr	r3, [pc, #208]	; (29f80 <rpc_transport_ipc_send+0xd8>)
   29eb0:	b082      	sub	sp, #8
   29eb2:	681a      	ldr	r2, [r3, #0]
   29eb4:	4b33      	ldr	r3, [pc, #204]	; (29f84 <rpc_transport_ipc_send+0xdc>)
   29eb6:	4282      	cmp	r2, r0
   29eb8:	d81e      	bhi.n	29ef8 <rpc_transport_ipc_send+0x50>
   29eba:	681b      	ldr	r3, [r3, #0]
   29ebc:	4932      	ldr	r1, [pc, #200]	; (29f88 <rpc_transport_ipc_send+0xe0>)
   29ebe:	4283      	cmp	r3, r0
   29ec0:	6809      	ldr	r1, [r1, #0]
   29ec2:	d803      	bhi.n	29ecc <rpc_transport_ipc_send+0x24>
   29ec4:	4c31      	ldr	r4, [pc, #196]	; (29f8c <rpc_transport_ipc_send+0xe4>)
   29ec6:	6824      	ldr	r4, [r4, #0]
   29ec8:	4284      	cmp	r4, r0
   29eca:	d849      	bhi.n	29f60 <rpc_transport_ipc_send+0xb8>
   29ecc:	4281      	cmp	r1, r0
   29ece:	d90e      	bls.n	29eee <rpc_transport_ipc_send+0x46>
   29ed0:	4b2f      	ldr	r3, [pc, #188]	; (29f90 <rpc_transport_ipc_send+0xe8>)
   29ed2:	781b      	ldrb	r3, [r3, #0]
   29ed4:	2b00      	cmp	r3, #0
   29ed6:	d14e      	bne.n	29f76 <rpc_transport_ipc_send+0xce>
   29ed8:	1a83      	subs	r3, r0, r2
   29eda:	492e      	ldr	r1, [pc, #184]	; (29f94 <rpc_transport_ipc_send+0xec>)
   29edc:	099f      	lsrs	r7, r3, #6
   29ede:	069b      	lsls	r3, r3, #26
   29ee0:	680a      	ldr	r2, [r1, #0]
   29ee2:	4d2d      	ldr	r5, [pc, #180]	; (29f98 <rpc_transport_ipc_send+0xf0>)
   29ee4:	f04f 0403 	mov.w	r4, #3
   29ee8:	f04f 0602 	mov.w	r6, #2
   29eec:	d014      	beq.n	29f18 <rpc_transport_ipc_send+0x70>
   29eee:	f24c 0010 	movw	r0, #49168	; 0xc010
   29ef2:	b002      	add	sp, #8
   29ef4:	bcf0      	pop	{r4, r5, r6, r7}
   29ef6:	4770      	bx	lr
   29ef8:	681b      	ldr	r3, [r3, #0]
   29efa:	4298      	cmp	r0, r3
   29efc:	d3f7      	bcc.n	29eee <rpc_transport_ipc_send+0x46>
   29efe:	4a23      	ldr	r2, [pc, #140]	; (29f8c <rpc_transport_ipc_send+0xe4>)
   29f00:	6812      	ldr	r2, [r2, #0]
   29f02:	4290      	cmp	r0, r2
   29f04:	d2f3      	bcs.n	29eee <rpc_transport_ipc_send+0x46>
   29f06:	2401      	movs	r4, #1
   29f08:	1ac3      	subs	r3, r0, r3
   29f0a:	4a24      	ldr	r2, [pc, #144]	; (29f9c <rpc_transport_ipc_send+0xf4>)
   29f0c:	099f      	lsrs	r7, r3, #6
   29f0e:	069b      	lsls	r3, r3, #26
   29f10:	4626      	mov	r6, r4
   29f12:	6812      	ldr	r2, [r2, #0]
   29f14:	4d22      	ldr	r5, [pc, #136]	; (29fa0 <rpc_transport_ipc_send+0xf8>)
   29f16:	d1ea      	bne.n	29eee <rpc_transport_ipc_send+0x46>
   29f18:	6841      	ldr	r1, [r0, #4]
   29f1a:	b2c9      	uxtb	r1, r1
   29f1c:	428e      	cmp	r6, r1
   29f1e:	d122      	bne.n	29f66 <rpc_transport_ipc_send+0xbe>
   29f20:	2020      	movs	r0, #32
   29f22:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   29f26:	491f      	ldr	r1, [pc, #124]	; (29fa4 <rpc_transport_ipc_send+0xfc>)
   29f28:	685a      	ldr	r2, [r3, #4]
   29f2a:	880e      	ldrh	r6, [r1, #0]
   29f2c:	b292      	uxth	r2, r2
   29f2e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   29f32:	605a      	str	r2, [r3, #4]
   29f34:	685a      	ldr	r2, [r3, #4]
   29f36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   29f3a:	f042 0201 	orr.w	r2, r2, #1
   29f3e:	605a      	str	r2, [r3, #4]
   29f40:	bf00      	nop
   29f42:	3801      	subs	r0, #1
   29f44:	d1fc      	bne.n	29f40 <rpc_transport_ipc_send+0x98>
   29f46:	2201      	movs	r2, #1
   29f48:	4b17      	ldr	r3, [pc, #92]	; (29fa8 <rpc_transport_ipc_send+0x100>)
   29f4a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   29f4e:	682a      	ldr	r2, [r5, #0]
   29f50:	880b      	ldrh	r3, [r1, #0]
   29f52:	9201      	str	r2, [sp, #4]
   29f54:	9a01      	ldr	r2, [sp, #4]
   29f56:	3301      	adds	r3, #1
   29f58:	800b      	strh	r3, [r1, #0]
   29f5a:	b002      	add	sp, #8
   29f5c:	bcf0      	pop	{r4, r5, r6, r7}
   29f5e:	4770      	bx	lr
   29f60:	4281      	cmp	r1, r0
   29f62:	d9d0      	bls.n	29f06 <rpc_transport_ipc_send+0x5e>
   29f64:	e7b4      	b.n	29ed0 <rpc_transport_ipc_send+0x28>
   29f66:	f24c 0007 	movw	r0, #49159	; 0xc007
   29f6a:	b002      	add	sp, #8
   29f6c:	bcf0      	pop	{r4, r5, r6, r7}
   29f6e:	4770      	bx	lr
   29f70:	f24c 000e 	movw	r0, #49166	; 0xc00e
   29f74:	4770      	bx	lr
   29f76:	f24c 000f 	movw	r0, #49167	; 0xc00f
   29f7a:	b002      	add	sp, #8
   29f7c:	bcf0      	pop	{r4, r5, r6, r7}
   29f7e:	4770      	bx	lr
   29f80:	20023ae4 	.word	0x20023ae4
   29f84:	20023adc 	.word	0x20023adc
   29f88:	20023ae0 	.word	0x20023ae0
   29f8c:	20023ad8 	.word	0x20023ad8
   29f90:	2002cb96 	.word	0x2002cb96
   29f94:	20023b08 	.word	0x20023b08
   29f98:	4002a00c 	.word	0x4002a00c
   29f9c:	20023b00 	.word	0x20023b00
   29fa0:	4002a004 	.word	0x4002a004
   29fa4:	20028948 	.word	0x20028948
   29fa8:	4002a000 	.word	0x4002a000

00029fac <rpc_transport_ipc_tx_rpc_data_alloc>:
   29fac:	4b18      	ldr	r3, [pc, #96]	; (2a010 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   29fae:	781b      	ldrb	r3, [r3, #0]
   29fb0:	bb63      	cbnz	r3, 2a00c <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   29fb2:	b4f0      	push	{r4, r5, r6, r7}
   29fb4:	4a17      	ldr	r2, [pc, #92]	; (2a014 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   29fb6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   29fba:	6814      	ldr	r4, [r2, #0]
   29fbc:	4b16      	ldr	r3, [pc, #88]	; (2a018 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   29fbe:	6825      	ldr	r5, [r4, #0]
   29fc0:	681e      	ldr	r6, [r3, #0]
   29fc2:	b1a5      	cbz	r5, 29fee <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   29fc4:	4607      	mov	r7, r0
   29fc6:	00c1      	lsls	r1, r0, #3
   29fc8:	1863      	adds	r3, r4, r1
   29fca:	685a      	ldr	r2, [r3, #4]
   29fcc:	b2d2      	uxtb	r2, r2
   29fce:	2a03      	cmp	r2, #3
   29fd0:	d104      	bne.n	29fdc <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   29fd2:	609f      	str	r7, [r3, #8]
   29fd4:	685a      	ldr	r2, [r3, #4]
   29fd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   29fda:	605a      	str	r2, [r3, #4]
   29fdc:	685a      	ldr	r2, [r3, #4]
   29fde:	f012 0fff 	tst.w	r2, #255	; 0xff
   29fe2:	d101      	bne.n	29fe8 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   29fe4:	689b      	ldr	r3, [r3, #8]
   29fe6:	b12b      	cbz	r3, 29ff4 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   29fe8:	3001      	adds	r0, #1
   29fea:	42a8      	cmp	r0, r5
   29fec:	d1eb      	bne.n	29fc6 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   29fee:	2000      	movs	r0, #0
   29ff0:	bcf0      	pop	{r4, r5, r6, r7}
   29ff2:	4770      	bx	lr
   29ff4:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   29ff8:	4421      	add	r1, r4
   29ffa:	6088      	str	r0, [r1, #8]
   29ffc:	6843      	ldr	r3, [r0, #4]
   29ffe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2a002:	f043 0302 	orr.w	r3, r3, #2
   2a006:	6043      	str	r3, [r0, #4]
   2a008:	bcf0      	pop	{r4, r5, r6, r7}
   2a00a:	4770      	bx	lr
   2a00c:	2000      	movs	r0, #0
   2a00e:	4770      	bx	lr
   2a010:	2002cb96 	.word	0x2002cb96
   2a014:	20023b08 	.word	0x20023b08
   2a018:	20023b04 	.word	0x20023b04

0002a01c <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   2a01c:	b4f0      	push	{r4, r5, r6, r7}
   2a01e:	4a15      	ldr	r2, [pc, #84]	; (2a074 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   2a020:	4b15      	ldr	r3, [pc, #84]	; (2a078 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   2a022:	6814      	ldr	r4, [r2, #0]
   2a024:	681e      	ldr	r6, [r3, #0]
   2a026:	6825      	ldr	r5, [r4, #0]
   2a028:	b1ad      	cbz	r5, 2a056 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   2a02a:	2000      	movs	r0, #0
   2a02c:	4607      	mov	r7, r0
   2a02e:	00c1      	lsls	r1, r0, #3
   2a030:	1863      	adds	r3, r4, r1
   2a032:	685a      	ldr	r2, [r3, #4]
   2a034:	b2d2      	uxtb	r2, r2
   2a036:	2a03      	cmp	r2, #3
   2a038:	d104      	bne.n	2a044 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   2a03a:	609f      	str	r7, [r3, #8]
   2a03c:	685a      	ldr	r2, [r3, #4]
   2a03e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2a042:	605a      	str	r2, [r3, #4]
   2a044:	685a      	ldr	r2, [r3, #4]
   2a046:	f012 0fff 	tst.w	r2, #255	; 0xff
   2a04a:	d101      	bne.n	2a050 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   2a04c:	689b      	ldr	r3, [r3, #8]
   2a04e:	b12b      	cbz	r3, 2a05c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   2a050:	3001      	adds	r0, #1
   2a052:	4285      	cmp	r5, r0
   2a054:	d1eb      	bne.n	2a02e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   2a056:	2000      	movs	r0, #0
   2a058:	bcf0      	pop	{r4, r5, r6, r7}
   2a05a:	4770      	bx	lr
   2a05c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   2a060:	4421      	add	r1, r4
   2a062:	6088      	str	r0, [r1, #8]
   2a064:	6843      	ldr	r3, [r0, #4]
   2a066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2a06a:	f043 0301 	orr.w	r3, r3, #1
   2a06e:	6043      	str	r3, [r0, #4]
   2a070:	bcf0      	pop	{r4, r5, r6, r7}
   2a072:	4770      	bx	lr
   2a074:	20023b00 	.word	0x20023b00
   2a078:	20023afc 	.word	0x20023afc

0002a07c <rpc_transport_ipc_tx_data_alloc>:
   2a07c:	4b03      	ldr	r3, [pc, #12]	; (2a08c <rpc_transport_ipc_tx_data_alloc+0x10>)
   2a07e:	781b      	ldrb	r3, [r3, #0]
   2a080:	b90b      	cbnz	r3, 2a086 <rpc_transport_ipc_tx_data_alloc+0xa>
   2a082:	f006 ba63 	b.w	3054c <nrf_shared_malloc>
   2a086:	2000      	movs	r0, #0
   2a088:	4770      	bx	lr
   2a08a:	bf00      	nop
   2a08c:	2002cb96 	.word	0x2002cb96

0002a090 <rpc_transport_ipc_tx_suspend>:
   2a090:	2201      	movs	r2, #1
   2a092:	4b01      	ldr	r3, [pc, #4]	; (2a098 <rpc_transport_ipc_tx_suspend+0x8>)
   2a094:	701a      	strb	r2, [r3, #0]
   2a096:	4770      	bx	lr
   2a098:	2002cb96 	.word	0x2002cb96

0002a09c <secure_client_socket>:
   2a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a0a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2a0a4:	460c      	mov	r4, r1
   2a0a6:	680b      	ldr	r3, [r1, #0]
   2a0a8:	4f45      	ldr	r7, [pc, #276]	; (2a1c0 <secure_client_socket+0x124>)
   2a0aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2a0ae:	600b      	str	r3, [r1, #0]
   2a0b0:	680b      	ldr	r3, [r1, #0]
   2a0b2:	00c6      	lsls	r6, r0, #3
   2a0b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2a0b8:	600b      	str	r3, [r1, #0]
   2a0ba:	eb07 0a06 	add.w	sl, r7, r6
   2a0be:	b084      	sub	sp, #16
   2a0c0:	f8da 3004 	ldr.w	r3, [sl, #4]
   2a0c4:	6989      	ldr	r1, [r1, #24]
   2a0c6:	f247 0281 	movw	r2, #28801	; 0x7081
   2a0ca:	4605      	mov	r5, r0
   2a0cc:	f8d4 8000 	ldr.w	r8, [r4]
   2a0d0:	e9cd cc02 	strd	ip, ip, [sp, #8]
   2a0d4:	f000 fd76 	bl	2abc4 <ip_interface_request_create>
   2a0d8:	2800      	cmp	r0, #0
   2a0da:	d06c      	beq.n	2a1b6 <secure_client_socket+0x11a>
   2a0dc:	f8da 2004 	ldr.w	r2, [sl, #4]
   2a0e0:	4681      	mov	r9, r0
   2a0e2:	2a00      	cmp	r2, #0
   2a0e4:	d15c      	bne.n	2a1a0 <secure_client_socket+0x104>
   2a0e6:	4b37      	ldr	r3, [pc, #220]	; (2a1c4 <secure_client_socket+0x128>)
   2a0e8:	1971      	adds	r1, r6, r5
   2a0ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2a0ee:	2224      	movs	r2, #36	; 0x24
   2a0f0:	f109 0014 	add.w	r0, r9, #20
   2a0f4:	f00d f985 	bl	37402 <memcpy>
   2a0f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2a0fc:	4649      	mov	r1, r9
   2a0fe:	3324      	adds	r3, #36	; 0x24
   2a100:	f8c9 3008 	str.w	r3, [r9, #8]
   2a104:	6822      	ldr	r2, [r4, #0]
   2a106:	4643      	mov	r3, r8
   2a108:	0c12      	lsrs	r2, r2, #16
   2a10a:	0412      	lsls	r2, r2, #16
   2a10c:	f042 020a 	orr.w	r2, r2, #10
   2a110:	6022      	str	r2, [r4, #0]
   2a112:	4620      	mov	r0, r4
   2a114:	f247 0281 	movw	r2, #28801	; 0x7081
   2a118:	f000 fd74 	bl	2ac04 <ip_interface_request_send>
   2a11c:	4603      	mov	r3, r0
   2a11e:	b968      	cbnz	r0, 2a13c <secure_client_socket+0xa0>
   2a120:	6823      	ldr	r3, [r4, #0]
   2a122:	00db      	lsls	r3, r3, #3
   2a124:	d40e      	bmi.n	2a144 <secure_client_socket+0xa8>
   2a126:	ab03      	add	r3, sp, #12
   2a128:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2a12c:	210b      	movs	r1, #11
   2a12e:	4628      	mov	r0, r5
   2a130:	f000 fd7c 	bl	2ac2c <ip_interface_wait>
   2a134:	4603      	mov	r3, r0
   2a136:	b150      	cbz	r0, 2a14e <secure_client_socket+0xb2>
   2a138:	f8c4 8000 	str.w	r8, [r4]
   2a13c:	4618      	mov	r0, r3
   2a13e:	b004      	add	sp, #16
   2a140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a144:	2373      	movs	r3, #115	; 0x73
   2a146:	4618      	mov	r0, r3
   2a148:	b004      	add	sp, #16
   2a14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a14e:	220c      	movs	r2, #12
   2a150:	ab02      	add	r3, sp, #8
   2a152:	4611      	mov	r1, r2
   2a154:	4628      	mov	r0, r5
   2a156:	f000 fd69 	bl	2ac2c <ip_interface_wait>
   2a15a:	4603      	mov	r3, r0
   2a15c:	bb30      	cbnz	r0, 2a1ac <secure_client_socket+0x110>
   2a15e:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   2a162:	b138      	cbz	r0, 2a174 <secure_client_socket+0xd8>
   2a164:	9301      	str	r3, [sp, #4]
   2a166:	f006 f935 	bl	303d4 <nrf_free>
   2a16a:	9b01      	ldr	r3, [sp, #4]
   2a16c:	443e      	add	r6, r7
   2a16e:	6073      	str	r3, [r6, #4]
   2a170:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   2a174:	4618      	mov	r0, r3
   2a176:	6822      	ldr	r2, [r4, #0]
   2a178:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   2a17c:	6022      	str	r2, [r4, #0]
   2a17e:	6822      	ldr	r2, [r4, #0]
   2a180:	0c12      	lsrs	r2, r2, #16
   2a182:	0412      	lsls	r2, r2, #16
   2a184:	f042 020c 	orr.w	r2, r2, #12
   2a188:	6022      	str	r2, [r4, #0]
   2a18a:	6822      	ldr	r2, [r4, #0]
   2a18c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   2a190:	6022      	str	r2, [r4, #0]
   2a192:	6822      	ldr	r2, [r4, #0]
   2a194:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2a198:	6022      	str	r2, [r4, #0]
   2a19a:	b004      	add	sp, #16
   2a19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a1a0:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   2a1a4:	6800      	ldr	r0, [r0, #0]
   2a1a6:	f00d f92c 	bl	37402 <memcpy>
   2a1aa:	e79c      	b.n	2a0e6 <secure_client_socket+0x4a>
   2a1ac:	2b73      	cmp	r3, #115	; 0x73
   2a1ae:	d0c5      	beq.n	2a13c <secure_client_socket+0xa0>
   2a1b0:	f8c4 8000 	str.w	r8, [r4]
   2a1b4:	e7c2      	b.n	2a13c <secure_client_socket+0xa0>
   2a1b6:	230c      	movs	r3, #12
   2a1b8:	4618      	mov	r0, r3
   2a1ba:	b004      	add	sp, #16
   2a1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a1c0:	20023c68 	.word	0x20023c68
   2a1c4:	20023b24 	.word	0x20023b24

0002a1c8 <tls_interface_init>:
   2a1c8:	2201      	movs	r2, #1
   2a1ca:	4b02      	ldr	r3, [pc, #8]	; (2a1d4 <tls_interface_init+0xc>)
   2a1cc:	2000      	movs	r0, #0
   2a1ce:	701a      	strb	r2, [r3, #0]
   2a1d0:	4770      	bx	lr
   2a1d2:	bf00      	nop
   2a1d4:	2002cb97 	.word	0x2002cb97

0002a1d8 <tls_interface_open>:
   2a1d8:	b538      	push	{r3, r4, r5, lr}
   2a1da:	4b23      	ldr	r3, [pc, #140]	; (2a268 <tls_interface_open+0x90>)
   2a1dc:	781b      	ldrb	r3, [r3, #0]
   2a1de:	2b00      	cmp	r3, #0
   2a1e0:	d03c      	beq.n	2a25c <tls_interface_open+0x84>
   2a1e2:	1e4b      	subs	r3, r1, #1
   2a1e4:	2b01      	cmp	r3, #1
   2a1e6:	d808      	bhi.n	2a1fa <tls_interface_open+0x22>
   2a1e8:	4614      	mov	r4, r2
   2a1ea:	b162      	cbz	r2, 2a206 <tls_interface_open+0x2e>
   2a1ec:	2901      	cmp	r1, #1
   2a1ee:	d02d      	beq.n	2a24c <tls_interface_open+0x74>
   2a1f0:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2a1f4:	bf08      	it	eq
   2a1f6:	2202      	moveq	r2, #2
   2a1f8:	d00d      	beq.n	2a216 <tls_interface_open+0x3e>
   2a1fa:	2029      	movs	r0, #41	; 0x29
   2a1fc:	f7fb fbbe 	bl	2597c <bsd_os_errno_set>
   2a200:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a204:	e020      	b.n	2a248 <tls_interface_open+0x70>
   2a206:	2901      	cmp	r1, #1
   2a208:	bf0b      	itete	eq
   2a20a:	2201      	moveq	r2, #1
   2a20c:	2202      	movne	r2, #2
   2a20e:	f44f 7482 	moveq.w	r4, #260	; 0x104
   2a212:	f44f 7487 	movne.w	r4, #270	; 0x10e
   2a216:	f000 fd3b 	bl	2ac90 <ip_interface_open>
   2a21a:	1e05      	subs	r5, r0, #0
   2a21c:	db1b      	blt.n	2a256 <tls_interface_open+0x7e>
   2a21e:	4b13      	ldr	r3, [pc, #76]	; (2a26c <tls_interface_open+0x94>)
   2a220:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   2a224:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2a228:	2224      	movs	r2, #36	; 0x24
   2a22a:	4911      	ldr	r1, [pc, #68]	; (2a270 <tls_interface_open+0x98>)
   2a22c:	f00d f8e9 	bl	37402 <memcpy>
   2a230:	4628      	mov	r0, r5
   2a232:	f006 fdcd 	bl	30dd0 <interface_socket_from_handle_get>
   2a236:	6803      	ldr	r3, [r0, #0]
   2a238:	6144      	str	r4, [r0, #20]
   2a23a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2a23e:	6003      	str	r3, [r0, #0]
   2a240:	6803      	ldr	r3, [r0, #0]
   2a242:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2a246:	6003      	str	r3, [r0, #0]
   2a248:	4628      	mov	r0, r5
   2a24a:	bd38      	pop	{r3, r4, r5, pc}
   2a24c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2a250:	d1d3      	bne.n	2a1fa <tls_interface_open+0x22>
   2a252:	460a      	mov	r2, r1
   2a254:	e7df      	b.n	2a216 <tls_interface_open+0x3e>
   2a256:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a25a:	e7f5      	b.n	2a248 <tls_interface_open+0x70>
   2a25c:	2070      	movs	r0, #112	; 0x70
   2a25e:	f7fb fb8d 	bl	2597c <bsd_os_errno_set>
   2a262:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a266:	e7ef      	b.n	2a248 <tls_interface_open+0x70>
   2a268:	2002cb97 	.word	0x2002cb97
   2a26c:	20023b24 	.word	0x20023b24
   2a270:	00038b68 	.word	0x00038b68

0002a274 <tls_interface_close>:
   2a274:	b538      	push	{r3, r4, r5, lr}
   2a276:	4604      	mov	r4, r0
   2a278:	f006 fdaa 	bl	30dd0 <interface_socket_from_handle_get>
   2a27c:	b180      	cbz	r0, 2a2a0 <tls_interface_close+0x2c>
   2a27e:	4d0b      	ldr	r5, [pc, #44]	; (2a2ac <tls_interface_close+0x38>)
   2a280:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   2a284:	b138      	cbz	r0, 2a296 <tls_interface_close+0x22>
   2a286:	f006 f8a5 	bl	303d4 <nrf_free>
   2a28a:	2300      	movs	r3, #0
   2a28c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   2a290:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   2a294:	6053      	str	r3, [r2, #4]
   2a296:	4620      	mov	r0, r4
   2a298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2a29c:	f000 bdbe 	b.w	2ae1c <ip_interface_close>
   2a2a0:	2009      	movs	r0, #9
   2a2a2:	f7fb fb6b 	bl	2597c <bsd_os_errno_set>
   2a2a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a2aa:	bd38      	pop	{r3, r4, r5, pc}
   2a2ac:	20023c68 	.word	0x20023c68

0002a2b0 <tls_interface_sendto>:
   2a2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a2b4:	b087      	sub	sp, #28
   2a2b6:	9103      	str	r1, [sp, #12]
   2a2b8:	4616      	mov	r6, r2
   2a2ba:	469b      	mov	fp, r3
   2a2bc:	4682      	mov	sl, r0
   2a2be:	f006 fd87 	bl	30dd0 <interface_socket_from_handle_get>
   2a2c2:	2800      	cmp	r0, #0
   2a2c4:	f000 8082 	beq.w	2a3cc <tls_interface_sendto+0x11c>
   2a2c8:	2400      	movs	r4, #0
   2a2ca:	f01b 0f02 	tst.w	fp, #2
   2a2ce:	bf08      	it	eq
   2a2d0:	6807      	ldreq	r7, [r0, #0]
   2a2d2:	4a40      	ldr	r2, [pc, #256]	; (2a3d4 <tls_interface_sendto+0x124>)
   2a2d4:	bf08      	it	eq
   2a2d6:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   2a2da:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   2a2de:	4605      	mov	r5, r0
   2a2e0:	bf0c      	ite	eq
   2a2e2:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   2a2e6:	2700      	movne	r7, #0
   2a2e8:	46a0      	mov	r8, r4
   2a2ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a2ee:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   2a2f2:	e00f      	b.n	2a314 <tls_interface_sendto+0x64>
   2a2f4:	f899 2000 	ldrb.w	r2, [r9]
   2a2f8:	2a02      	cmp	r2, #2
   2a2fa:	d061      	beq.n	2a3c0 <tls_interface_sendto+0x110>
   2a2fc:	692a      	ldr	r2, [r5, #16]
   2a2fe:	2a01      	cmp	r2, #1
   2a300:	d061      	beq.n	2a3c6 <tls_interface_sendto+0x116>
   2a302:	2b00      	cmp	r3, #0
   2a304:	db30      	blt.n	2a368 <tls_interface_sendto+0xb8>
   2a306:	f1b8 0f00 	cmp.w	r8, #0
   2a30a:	dc18      	bgt.n	2a33e <tls_interface_sendto+0x8e>
   2a30c:	441c      	add	r4, r3
   2a30e:	b1df      	cbz	r7, 2a348 <tls_interface_sendto+0x98>
   2a310:	42a6      	cmp	r6, r4
   2a312:	dd19      	ble.n	2a348 <tls_interface_sendto+0x98>
   2a314:	6829      	ldr	r1, [r5, #0]
   2a316:	1b32      	subs	r2, r6, r4
   2a318:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2a31c:	b289      	uxth	r1, r1
   2a31e:	bfa8      	it	ge
   2a320:	f44f 6200 	movge.w	r2, #2048	; 0x800
   2a324:	290c      	cmp	r1, #12
   2a326:	d013      	beq.n	2a350 <tls_interface_sendto+0xa0>
   2a328:	6829      	ldr	r1, [r5, #0]
   2a32a:	b289      	uxth	r1, r1
   2a32c:	290b      	cmp	r1, #11
   2a32e:	d0e1      	beq.n	2a2f4 <tls_interface_sendto+0x44>
   2a330:	6929      	ldr	r1, [r5, #16]
   2a332:	2901      	cmp	r1, #1
   2a334:	d024      	beq.n	2a380 <tls_interface_sendto+0xd0>
   2a336:	2902      	cmp	r1, #2
   2a338:	d01a      	beq.n	2a370 <tls_interface_sendto+0xc0>
   2a33a:	f04f 0839 	mov.w	r8, #57	; 0x39
   2a33e:	4640      	mov	r0, r8
   2a340:	f7fb fb1c 	bl	2597c <bsd_os_errno_set>
   2a344:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2a348:	4620      	mov	r0, r4
   2a34a:	b007      	add	sp, #28
   2a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a350:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2a352:	9903      	ldr	r1, [sp, #12]
   2a354:	9301      	str	r3, [sp, #4]
   2a356:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2a358:	4421      	add	r1, r4
   2a35a:	9300      	str	r3, [sp, #0]
   2a35c:	4650      	mov	r0, sl
   2a35e:	465b      	mov	r3, fp
   2a360:	f000 fdce 	bl	2af00 <ip_interface_sendto>
   2a364:	1e03      	subs	r3, r0, #0
   2a366:	dad1      	bge.n	2a30c <tls_interface_sendto+0x5c>
   2a368:	f1b8 0f00 	cmp.w	r8, #0
   2a36c:	ddea      	ble.n	2a344 <tls_interface_sendto+0x94>
   2a36e:	e7e6      	b.n	2a33e <tls_interface_sendto+0x8e>
   2a370:	6829      	ldr	r1, [r5, #0]
   2a372:	b289      	uxth	r1, r1
   2a374:	2902      	cmp	r1, #2
   2a376:	d007      	beq.n	2a388 <tls_interface_sendto+0xd8>
   2a378:	6829      	ldr	r1, [r5, #0]
   2a37a:	b289      	uxth	r1, r1
   2a37c:	2904      	cmp	r1, #4
   2a37e:	d003      	beq.n	2a388 <tls_interface_sendto+0xd8>
   2a380:	6829      	ldr	r1, [r5, #0]
   2a382:	b289      	uxth	r1, r1
   2a384:	2905      	cmp	r1, #5
   2a386:	d1d8      	bne.n	2a33a <tls_interface_sendto+0x8a>
   2a388:	f899 1000 	ldrb.w	r1, [r9]
   2a38c:	2902      	cmp	r1, #2
   2a38e:	d1b8      	bne.n	2a302 <tls_interface_sendto+0x52>
   2a390:	4629      	mov	r1, r5
   2a392:	4650      	mov	r0, sl
   2a394:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2a398:	f7ff fe80 	bl	2a09c <secure_client_socket>
   2a39c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2a3a0:	4680      	mov	r8, r0
   2a3a2:	2800      	cmp	r0, #0
   2a3a4:	d1ad      	bne.n	2a302 <tls_interface_sendto+0x52>
   2a3a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2a3a8:	9903      	ldr	r1, [sp, #12]
   2a3aa:	9301      	str	r3, [sp, #4]
   2a3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2a3ae:	4421      	add	r1, r4
   2a3b0:	9300      	str	r3, [sp, #0]
   2a3b2:	4650      	mov	r0, sl
   2a3b4:	465b      	mov	r3, fp
   2a3b6:	f000 fda3 	bl	2af00 <ip_interface_sendto>
   2a3ba:	1e03      	subs	r3, r0, #0
   2a3bc:	daa6      	bge.n	2a30c <tls_interface_sendto+0x5c>
   2a3be:	e7c1      	b.n	2a344 <tls_interface_sendto+0x94>
   2a3c0:	f04f 0823 	mov.w	r8, #35	; 0x23
   2a3c4:	e7bb      	b.n	2a33e <tls_interface_sendto+0x8e>
   2a3c6:	f04f 082a 	mov.w	r8, #42	; 0x2a
   2a3ca:	e7b8      	b.n	2a33e <tls_interface_sendto+0x8e>
   2a3cc:	f04f 0809 	mov.w	r8, #9
   2a3d0:	e7b5      	b.n	2a33e <tls_interface_sendto+0x8e>
   2a3d2:	bf00      	nop
   2a3d4:	20023b24 	.word	0x20023b24

0002a3d8 <tls_interface_recvfrom>:
   2a3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a3dc:	460d      	mov	r5, r1
   2a3de:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2a3e2:	4616      	mov	r6, r2
   2a3e4:	461f      	mov	r7, r3
   2a3e6:	4604      	mov	r4, r0
   2a3e8:	f006 fcf2 	bl	30dd0 <interface_socket_from_handle_get>
   2a3ec:	2800      	cmp	r0, #0
   2a3ee:	d038      	beq.n	2a462 <tls_interface_recvfrom+0x8a>
   2a3f0:	6803      	ldr	r3, [r0, #0]
   2a3f2:	b29b      	uxth	r3, r3
   2a3f4:	2b0c      	cmp	r3, #12
   2a3f6:	d00f      	beq.n	2a418 <tls_interface_recvfrom+0x40>
   2a3f8:	6803      	ldr	r3, [r0, #0]
   2a3fa:	b29b      	uxth	r3, r3
   2a3fc:	2b0d      	cmp	r3, #13
   2a3fe:	d00b      	beq.n	2a418 <tls_interface_recvfrom+0x40>
   2a400:	6903      	ldr	r3, [r0, #16]
   2a402:	2b01      	cmp	r3, #1
   2a404:	d01a      	beq.n	2a43c <tls_interface_recvfrom+0x64>
   2a406:	2b02      	cmp	r3, #2
   2a408:	d010      	beq.n	2a42c <tls_interface_recvfrom+0x54>
   2a40a:	2023      	movs	r0, #35	; 0x23
   2a40c:	f7fb fab6 	bl	2597c <bsd_os_errno_set>
   2a410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a418:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2a41c:	463b      	mov	r3, r7
   2a41e:	4632      	mov	r2, r6
   2a420:	4629      	mov	r1, r5
   2a422:	4620      	mov	r0, r4
   2a424:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a428:	f000 bee6 	b.w	2b1f8 <ip_interface_recvfrom>
   2a42c:	6803      	ldr	r3, [r0, #0]
   2a42e:	b29b      	uxth	r3, r3
   2a430:	2b02      	cmp	r3, #2
   2a432:	d007      	beq.n	2a444 <tls_interface_recvfrom+0x6c>
   2a434:	6803      	ldr	r3, [r0, #0]
   2a436:	b29b      	uxth	r3, r3
   2a438:	2b04      	cmp	r3, #4
   2a43a:	d003      	beq.n	2a444 <tls_interface_recvfrom+0x6c>
   2a43c:	6803      	ldr	r3, [r0, #0]
   2a43e:	b29b      	uxth	r3, r3
   2a440:	2b05      	cmp	r3, #5
   2a442:	d1e2      	bne.n	2a40a <tls_interface_recvfrom+0x32>
   2a444:	4b08      	ldr	r3, [pc, #32]	; (2a468 <tls_interface_recvfrom+0x90>)
   2a446:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2a44a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2a44e:	2b02      	cmp	r3, #2
   2a450:	d1db      	bne.n	2a40a <tls_interface_recvfrom+0x32>
   2a452:	4601      	mov	r1, r0
   2a454:	4620      	mov	r0, r4
   2a456:	f7ff fe21 	bl	2a09c <secure_client_socket>
   2a45a:	2800      	cmp	r0, #0
   2a45c:	d0dc      	beq.n	2a418 <tls_interface_recvfrom+0x40>
   2a45e:	dcd5      	bgt.n	2a40c <tls_interface_recvfrom+0x34>
   2a460:	e7d6      	b.n	2a410 <tls_interface_recvfrom+0x38>
   2a462:	2009      	movs	r0, #9
   2a464:	e7d2      	b.n	2a40c <tls_interface_recvfrom+0x34>
   2a466:	bf00      	nop
   2a468:	20023b24 	.word	0x20023b24

0002a46c <tls_interface_bind>:
   2a46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a470:	b082      	sub	sp, #8
   2a472:	460e      	mov	r6, r1
   2a474:	4617      	mov	r7, r2
   2a476:	4605      	mov	r5, r0
   2a478:	f006 fcaa 	bl	30dd0 <interface_socket_from_handle_get>
   2a47c:	2800      	cmp	r0, #0
   2a47e:	d069      	beq.n	2a554 <tls_interface_bind+0xe8>
   2a480:	6803      	ldr	r3, [r0, #0]
   2a482:	4604      	mov	r4, r0
   2a484:	b29b      	uxth	r3, r3
   2a486:	2b02      	cmp	r3, #2
   2a488:	d158      	bne.n	2a53c <tls_interface_bind+0xd0>
   2a48a:	463a      	mov	r2, r7
   2a48c:	4631      	mov	r1, r6
   2a48e:	4628      	mov	r0, r5
   2a490:	f001 f9c2 	bl	2b818 <ip_interface_bind>
   2a494:	2800      	cmp	r0, #0
   2a496:	d148      	bne.n	2a52a <tls_interface_bind+0xbe>
   2a498:	00ee      	lsls	r6, r5, #3
   2a49a:	4f2f      	ldr	r7, [pc, #188]	; (2a558 <tls_interface_bind+0xec>)
   2a49c:	1973      	adds	r3, r6, r5
   2a49e:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   2a4a2:	2b01      	cmp	r3, #1
   2a4a4:	d002      	beq.n	2a4ac <tls_interface_bind+0x40>
   2a4a6:	b002      	add	sp, #8
   2a4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a4ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2a4b0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2a55c <tls_interface_bind+0xf0>
   2a4b4:	f247 0281 	movw	r2, #28801	; 0x7081
   2a4b8:	eb0a 0906 	add.w	r9, sl, r6
   2a4bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2a4c0:	69a1      	ldr	r1, [r4, #24]
   2a4c2:	4628      	mov	r0, r5
   2a4c4:	f8cd c004 	str.w	ip, [sp, #4]
   2a4c8:	f000 fb7c 	bl	2abc4 <ip_interface_request_create>
   2a4cc:	4680      	mov	r8, r0
   2a4ce:	2800      	cmp	r0, #0
   2a4d0:	d03e      	beq.n	2a550 <tls_interface_bind+0xe4>
   2a4d2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2a4d6:	bbaa      	cbnz	r2, 2a544 <tls_interface_bind+0xd8>
   2a4d8:	1971      	adds	r1, r6, r5
   2a4da:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   2a4de:	2224      	movs	r2, #36	; 0x24
   2a4e0:	f108 0014 	add.w	r0, r8, #20
   2a4e4:	f00c ff8d 	bl	37402 <memcpy>
   2a4e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2a4ec:	4641      	mov	r1, r8
   2a4ee:	3324      	adds	r3, #36	; 0x24
   2a4f0:	f8c8 3008 	str.w	r3, [r8, #8]
   2a4f4:	6822      	ldr	r2, [r4, #0]
   2a4f6:	2304      	movs	r3, #4
   2a4f8:	0c12      	lsrs	r2, r2, #16
   2a4fa:	0412      	lsls	r2, r2, #16
   2a4fc:	f042 020a 	orr.w	r2, r2, #10
   2a500:	6022      	str	r2, [r4, #0]
   2a502:	4620      	mov	r0, r4
   2a504:	f247 0281 	movw	r2, #28801	; 0x7081
   2a508:	f000 fb7c 	bl	2ac04 <ip_interface_request_send>
   2a50c:	b968      	cbnz	r0, 2a52a <tls_interface_bind+0xbe>
   2a50e:	6823      	ldr	r3, [r4, #0]
   2a510:	00db      	lsls	r3, r3, #3
   2a512:	d415      	bmi.n	2a540 <tls_interface_bind+0xd4>
   2a514:	4628      	mov	r0, r5
   2a516:	ab01      	add	r3, sp, #4
   2a518:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2a51c:	210b      	movs	r1, #11
   2a51e:	f000 fb85 	bl	2ac2c <ip_interface_wait>
   2a522:	2800      	cmp	r0, #0
   2a524:	d0bf      	beq.n	2a4a6 <tls_interface_bind+0x3a>
   2a526:	2304      	movs	r3, #4
   2a528:	6023      	str	r3, [r4, #0]
   2a52a:	2800      	cmp	r0, #0
   2a52c:	ddbb      	ble.n	2a4a6 <tls_interface_bind+0x3a>
   2a52e:	f7fb fa25 	bl	2597c <bsd_os_errno_set>
   2a532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a536:	b002      	add	sp, #8
   2a538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a53c:	202d      	movs	r0, #45	; 0x2d
   2a53e:	e7f6      	b.n	2a52e <tls_interface_bind+0xc2>
   2a540:	2073      	movs	r0, #115	; 0x73
   2a542:	e7f4      	b.n	2a52e <tls_interface_bind+0xc2>
   2a544:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   2a548:	6800      	ldr	r0, [r0, #0]
   2a54a:	f00c ff5a 	bl	37402 <memcpy>
   2a54e:	e7c3      	b.n	2a4d8 <tls_interface_bind+0x6c>
   2a550:	200c      	movs	r0, #12
   2a552:	e7ec      	b.n	2a52e <tls_interface_bind+0xc2>
   2a554:	2009      	movs	r0, #9
   2a556:	e7ea      	b.n	2a52e <tls_interface_bind+0xc2>
   2a558:	20023b24 	.word	0x20023b24
   2a55c:	20023c68 	.word	0x20023c68

0002a560 <tls_interface_connect>:
   2a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a562:	460e      	mov	r6, r1
   2a564:	4617      	mov	r7, r2
   2a566:	4604      	mov	r4, r0
   2a568:	f006 fc32 	bl	30dd0 <interface_socket_from_handle_get>
   2a56c:	b1e8      	cbz	r0, 2a5aa <tls_interface_connect+0x4a>
   2a56e:	4b13      	ldr	r3, [pc, #76]	; (2a5bc <tls_interface_connect+0x5c>)
   2a570:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2a574:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2a578:	2b02      	cmp	r3, #2
   2a57a:	d11c      	bne.n	2a5b6 <tls_interface_connect+0x56>
   2a57c:	6803      	ldr	r3, [r0, #0]
   2a57e:	4605      	mov	r5, r0
   2a580:	b29b      	uxth	r3, r3
   2a582:	2b02      	cmp	r3, #2
   2a584:	d003      	beq.n	2a58e <tls_interface_connect+0x2e>
   2a586:	6803      	ldr	r3, [r0, #0]
   2a588:	b29b      	uxth	r3, r3
   2a58a:	2b04      	cmp	r3, #4
   2a58c:	d113      	bne.n	2a5b6 <tls_interface_connect+0x56>
   2a58e:	463a      	mov	r2, r7
   2a590:	4631      	mov	r1, r6
   2a592:	4620      	mov	r0, r4
   2a594:	f000 ff58 	bl	2b448 <ip_interface_connect>
   2a598:	b110      	cbz	r0, 2a5a0 <tls_interface_connect+0x40>
   2a59a:	2800      	cmp	r0, #0
   2a59c:	dc06      	bgt.n	2a5ac <tls_interface_connect+0x4c>
   2a59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a5a0:	4629      	mov	r1, r5
   2a5a2:	4620      	mov	r0, r4
   2a5a4:	f7ff fd7a 	bl	2a09c <secure_client_socket>
   2a5a8:	e7f7      	b.n	2a59a <tls_interface_connect+0x3a>
   2a5aa:	2009      	movs	r0, #9
   2a5ac:	f7fb f9e6 	bl	2597c <bsd_os_errno_set>
   2a5b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a5b6:	202d      	movs	r0, #45	; 0x2d
   2a5b8:	e7f8      	b.n	2a5ac <tls_interface_connect+0x4c>
   2a5ba:	bf00      	nop
   2a5bc:	20023b24 	.word	0x20023b24

0002a5c0 <tls_interface_listen>:
   2a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a5c4:	b085      	sub	sp, #20
   2a5c6:	4689      	mov	r9, r1
   2a5c8:	4605      	mov	r5, r0
   2a5ca:	f006 fc01 	bl	30dd0 <interface_socket_from_handle_get>
   2a5ce:	2800      	cmp	r0, #0
   2a5d0:	f000 8084 	beq.w	2a6dc <tls_interface_listen+0x11c>
   2a5d4:	6803      	ldr	r3, [r0, #0]
   2a5d6:	4604      	mov	r4, r0
   2a5d8:	00da      	lsls	r2, r3, #3
   2a5da:	d47d      	bmi.n	2a6d8 <tls_interface_listen+0x118>
   2a5dc:	6903      	ldr	r3, [r0, #16]
   2a5de:	2b01      	cmp	r3, #1
   2a5e0:	d17a      	bne.n	2a6d8 <tls_interface_listen+0x118>
   2a5e2:	6803      	ldr	r3, [r0, #0]
   2a5e4:	b29b      	uxth	r3, r3
   2a5e6:	2b04      	cmp	r3, #4
   2a5e8:	d05d      	beq.n	2a6a6 <tls_interface_listen+0xe6>
   2a5ea:	6823      	ldr	r3, [r4, #0]
   2a5ec:	b29b      	uxth	r3, r3
   2a5ee:	2b0b      	cmp	r3, #11
   2a5f0:	d172      	bne.n	2a6d8 <tls_interface_listen+0x118>
   2a5f2:	4a3b      	ldr	r2, [pc, #236]	; (2a6e0 <tls_interface_listen+0x120>)
   2a5f4:	00ee      	lsls	r6, r5, #3
   2a5f6:	1973      	adds	r3, r6, r5
   2a5f8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   2a5fc:	9201      	str	r2, [sp, #4]
   2a5fe:	2b01      	cmp	r3, #1
   2a600:	d16a      	bne.n	2a6d8 <tls_interface_listen+0x118>
   2a602:	2201      	movs	r2, #1
   2a604:	9901      	ldr	r1, [sp, #4]
   2a606:	1973      	adds	r3, r6, r5
   2a608:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   2a60c:	6823      	ldr	r3, [r4, #0]
   2a60e:	2b0b      	cmp	r3, #11
   2a610:	d040      	beq.n	2a694 <tls_interface_listen+0xd4>
   2a612:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2a616:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 2a6e4 <tls_interface_listen+0x124>
   2a61a:	f247 0281 	movw	r2, #28801	; 0x7081
   2a61e:	eb0a 0806 	add.w	r8, sl, r6
   2a622:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2a626:	69a1      	ldr	r1, [r4, #24]
   2a628:	4628      	mov	r0, r5
   2a62a:	6827      	ldr	r7, [r4, #0]
   2a62c:	f8cd c00c 	str.w	ip, [sp, #12]
   2a630:	f000 fac8 	bl	2abc4 <ip_interface_request_create>
   2a634:	4683      	mov	fp, r0
   2a636:	2800      	cmp	r0, #0
   2a638:	d046      	beq.n	2a6c8 <tls_interface_listen+0x108>
   2a63a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2a63e:	2a00      	cmp	r2, #0
   2a640:	d144      	bne.n	2a6cc <tls_interface_listen+0x10c>
   2a642:	9b01      	ldr	r3, [sp, #4]
   2a644:	1971      	adds	r1, r6, r5
   2a646:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2a64a:	2224      	movs	r2, #36	; 0x24
   2a64c:	f10b 0014 	add.w	r0, fp, #20
   2a650:	f00c fed7 	bl	37402 <memcpy>
   2a654:	f8db 2008 	ldr.w	r2, [fp, #8]
   2a658:	4659      	mov	r1, fp
   2a65a:	3224      	adds	r2, #36	; 0x24
   2a65c:	f8cb 2008 	str.w	r2, [fp, #8]
   2a660:	6822      	ldr	r2, [r4, #0]
   2a662:	463b      	mov	r3, r7
   2a664:	0c12      	lsrs	r2, r2, #16
   2a666:	0412      	lsls	r2, r2, #16
   2a668:	f042 020a 	orr.w	r2, r2, #10
   2a66c:	6022      	str	r2, [r4, #0]
   2a66e:	4620      	mov	r0, r4
   2a670:	f247 0281 	movw	r2, #28801	; 0x7081
   2a674:	f000 fac6 	bl	2ac04 <ip_interface_request_send>
   2a678:	b980      	cbnz	r0, 2a69c <tls_interface_listen+0xdc>
   2a67a:	6823      	ldr	r3, [r4, #0]
   2a67c:	00db      	lsls	r3, r3, #3
   2a67e:	d41b      	bmi.n	2a6b8 <tls_interface_listen+0xf8>
   2a680:	ab03      	add	r3, sp, #12
   2a682:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2a686:	210b      	movs	r1, #11
   2a688:	4628      	mov	r0, r5
   2a68a:	f000 facf 	bl	2ac2c <ip_interface_wait>
   2a68e:	b108      	cbz	r0, 2a694 <tls_interface_listen+0xd4>
   2a690:	6027      	str	r7, [r4, #0]
   2a692:	e003      	b.n	2a69c <tls_interface_listen+0xdc>
   2a694:	4649      	mov	r1, r9
   2a696:	4628      	mov	r0, r5
   2a698:	f001 f960 	bl	2b95c <ip_interface_listen>
   2a69c:	2800      	cmp	r0, #0
   2a69e:	dc0c      	bgt.n	2a6ba <tls_interface_listen+0xfa>
   2a6a0:	b005      	add	sp, #20
   2a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a6a6:	4a0e      	ldr	r2, [pc, #56]	; (2a6e0 <tls_interface_listen+0x120>)
   2a6a8:	00ee      	lsls	r6, r5, #3
   2a6aa:	1973      	adds	r3, r6, r5
   2a6ac:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   2a6b0:	9201      	str	r2, [sp, #4]
   2a6b2:	2b02      	cmp	r3, #2
   2a6b4:	d199      	bne.n	2a5ea <tls_interface_listen+0x2a>
   2a6b6:	e7a4      	b.n	2a602 <tls_interface_listen+0x42>
   2a6b8:	2073      	movs	r0, #115	; 0x73
   2a6ba:	f7fb f95f 	bl	2597c <bsd_os_errno_set>
   2a6be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a6c2:	b005      	add	sp, #20
   2a6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a6c8:	200c      	movs	r0, #12
   2a6ca:	e7f6      	b.n	2a6ba <tls_interface_listen+0xfa>
   2a6cc:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   2a6d0:	6800      	ldr	r0, [r0, #0]
   2a6d2:	f00c fe96 	bl	37402 <memcpy>
   2a6d6:	e7b4      	b.n	2a642 <tls_interface_listen+0x82>
   2a6d8:	202d      	movs	r0, #45	; 0x2d
   2a6da:	e7ee      	b.n	2a6ba <tls_interface_listen+0xfa>
   2a6dc:	2009      	movs	r0, #9
   2a6de:	e7ec      	b.n	2a6ba <tls_interface_listen+0xfa>
   2a6e0:	20023b24 	.word	0x20023b24
   2a6e4:	20023c68 	.word	0x20023c68

0002a6e8 <tls_interface_accept>:
   2a6e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a6ec:	b083      	sub	sp, #12
   2a6ee:	460f      	mov	r7, r1
   2a6f0:	4690      	mov	r8, r2
   2a6f2:	4699      	mov	r9, r3
   2a6f4:	4606      	mov	r6, r0
   2a6f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2a6fa:	f006 fb69 	bl	30dd0 <interface_socket_from_handle_get>
   2a6fe:	9401      	str	r4, [sp, #4]
   2a700:	2800      	cmp	r0, #0
   2a702:	d048      	beq.n	2a796 <tls_interface_accept+0xae>
   2a704:	6805      	ldr	r5, [r0, #0]
   2a706:	b2ad      	uxth	r5, r5
   2a708:	2d07      	cmp	r5, #7
   2a70a:	d144      	bne.n	2a796 <tls_interface_accept+0xae>
   2a70c:	6803      	ldr	r3, [r0, #0]
   2a70e:	00db      	lsls	r3, r3, #3
   2a710:	d443      	bmi.n	2a79a <tls_interface_accept+0xb2>
   2a712:	464b      	mov	r3, r9
   2a714:	4642      	mov	r2, r8
   2a716:	4639      	mov	r1, r7
   2a718:	4630      	mov	r0, r6
   2a71a:	f001 f99b 	bl	2ba54 <ip_interface_accept>
   2a71e:	1e04      	subs	r4, r0, #0
   2a720:	da08      	bge.n	2a734 <tls_interface_accept+0x4c>
   2a722:	4620      	mov	r0, r4
   2a724:	f7fb f92a 	bl	2597c <bsd_os_errno_set>
   2a728:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2a72c:	4620      	mov	r0, r4
   2a72e:	b003      	add	sp, #12
   2a730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a734:	f006 fb4c 	bl	30dd0 <interface_socket_from_handle_get>
   2a738:	6803      	ldr	r3, [r0, #0]
   2a73a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 2a7a4 <tls_interface_accept+0xbc>
   2a73e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2a742:	6003      	str	r3, [r0, #0]
   2a744:	6803      	ldr	r3, [r0, #0]
   2a746:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   2a74a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2a74e:	00bf      	lsls	r7, r7, #2
   2a750:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2a754:	4605      	mov	r5, r0
   2a756:	6003      	str	r3, [r0, #0]
   2a758:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   2a75c:	2224      	movs	r2, #36	; 0x24
   2a75e:	eb08 0007 	add.w	r0, r8, r7
   2a762:	f00c fe4e 	bl	37402 <memcpy>
   2a766:	2302      	movs	r3, #2
   2a768:	f808 3007 	strb.w	r3, [r8, r7]
   2a76c:	682a      	ldr	r2, [r5, #0]
   2a76e:	ab01      	add	r3, sp, #4
   2a770:	0c12      	lsrs	r2, r2, #16
   2a772:	0412      	lsls	r2, r2, #16
   2a774:	f042 020b 	orr.w	r2, r2, #11
   2a778:	602a      	str	r2, [r5, #0]
   2a77a:	210c      	movs	r1, #12
   2a77c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2a780:	4620      	mov	r0, r4
   2a782:	f000 fa53 	bl	2ac2c <ip_interface_wait>
   2a786:	4605      	mov	r5, r0
   2a788:	2800      	cmp	r0, #0
   2a78a:	d0cf      	beq.n	2a72c <tls_interface_accept+0x44>
   2a78c:	4620      	mov	r0, r4
   2a78e:	f000 fb45 	bl	2ae1c <ip_interface_close>
   2a792:	462c      	mov	r4, r5
   2a794:	e7c5      	b.n	2a722 <tls_interface_accept+0x3a>
   2a796:	2409      	movs	r4, #9
   2a798:	e7c3      	b.n	2a722 <tls_interface_accept+0x3a>
   2a79a:	202d      	movs	r0, #45	; 0x2d
   2a79c:	f7fb f8ee 	bl	2597c <bsd_os_errno_set>
   2a7a0:	e7c4      	b.n	2a72c <tls_interface_accept+0x44>
   2a7a2:	bf00      	nop
   2a7a4:	20023b24 	.word	0x20023b24

0002a7a8 <tls_interface_setopt>:
   2a7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a7ac:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2a7b0:	b082      	sub	sp, #8
   2a7b2:	9e08      	ldr	r6, [sp, #32]
   2a7b4:	d120      	bne.n	2a7f8 <tls_interface_setopt+0x50>
   2a7b6:	4698      	mov	r8, r3
   2a7b8:	4617      	mov	r7, r2
   2a7ba:	4605      	mov	r5, r0
   2a7bc:	2b00      	cmp	r3, #0
   2a7be:	f000 80a0 	beq.w	2a902 <tls_interface_setopt+0x15a>
   2a7c2:	f006 fb05 	bl	30dd0 <interface_socket_from_handle_get>
   2a7c6:	2800      	cmp	r0, #0
   2a7c8:	f000 8097 	beq.w	2a8fa <tls_interface_setopt+0x152>
   2a7cc:	6804      	ldr	r4, [r0, #0]
   2a7ce:	b2a4      	uxth	r4, r4
   2a7d0:	2c02      	cmp	r4, #2
   2a7d2:	d008      	beq.n	2a7e6 <tls_interface_setopt+0x3e>
   2a7d4:	6803      	ldr	r3, [r0, #0]
   2a7d6:	b29b      	uxth	r3, r3
   2a7d8:	2b04      	cmp	r3, #4
   2a7da:	d004      	beq.n	2a7e6 <tls_interface_setopt+0x3e>
   2a7dc:	6803      	ldr	r3, [r0, #0]
   2a7de:	b29b      	uxth	r3, r3
   2a7e0:	2b05      	cmp	r3, #5
   2a7e2:	f040 808a 	bne.w	2a8fa <tls_interface_setopt+0x152>
   2a7e6:	1e7a      	subs	r2, r7, #1
   2a7e8:	2a05      	cmp	r2, #5
   2a7ea:	f200 8090 	bhi.w	2a90e <tls_interface_setopt+0x166>
   2a7ee:	e8df f002 	tbb	[pc, r2]
   2a7f2:	2718      	.short	0x2718
   2a7f4:	08594b3c 	.word	0x08594b3c
   2a7f8:	b002      	add	sp, #8
   2a7fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a7fe:	f001 ba6b 	b.w	2bcd8 <ip_interface_setopt>
   2a802:	4601      	mov	r1, r0
   2a804:	e9cd 8600 	strd	r8, r6, [sp]
   2a808:	4628      	mov	r0, r5
   2a80a:	f247 0301 	movw	r3, #28673	; 0x7001
   2a80e:	f44f 7280 	mov.w	r2, #256	; 0x100
   2a812:	f000 ff8b 	bl	2b72c <ip_interface_socketoption_send>
   2a816:	2800      	cmp	r0, #0
   2a818:	d161      	bne.n	2a8de <tls_interface_setopt+0x136>
   2a81a:	2000      	movs	r0, #0
   2a81c:	b002      	add	sp, #8
   2a81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a822:	2e04      	cmp	r6, #4
   2a824:	d15a      	bne.n	2a8dc <tls_interface_setopt+0x134>
   2a826:	f8d8 0000 	ldr.w	r0, [r8]
   2a82a:	2800      	cmp	r0, #0
   2a82c:	d05e      	beq.n	2a8ec <tls_interface_setopt+0x144>
   2a82e:	2801      	cmp	r0, #1
   2a830:	d154      	bne.n	2a8dc <tls_interface_setopt+0x134>
   2a832:	4b38      	ldr	r3, [pc, #224]	; (2a914 <tls_interface_setopt+0x16c>)
   2a834:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2a838:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   2a83c:	2000      	movs	r0, #0
   2a83e:	e7ed      	b.n	2a81c <tls_interface_setopt+0x74>
   2a840:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   2a844:	d04a      	beq.n	2a8dc <tls_interface_setopt+0x134>
   2a846:	f016 0703 	ands.w	r7, r6, #3
   2a84a:	d147      	bne.n	2a8dc <tls_interface_setopt+0x134>
   2a84c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2a850:	00a4      	lsls	r4, r4, #2
   2a852:	4b30      	ldr	r3, [pc, #192]	; (2a914 <tls_interface_setopt+0x16c>)
   2a854:	1d20      	adds	r0, r4, #4
   2a856:	4418      	add	r0, r3
   2a858:	4423      	add	r3, r4
   2a85a:	4632      	mov	r2, r6
   2a85c:	4641      	mov	r1, r8
   2a85e:	f883 c003 	strb.w	ip, [r3, #3]
   2a862:	f00c fdce 	bl	37402 <memcpy>
   2a866:	4638      	mov	r0, r7
   2a868:	e7d8      	b.n	2a81c <tls_interface_setopt+0x74>
   2a86a:	2e01      	cmp	r6, #1
   2a86c:	d136      	bne.n	2a8dc <tls_interface_setopt+0x134>
   2a86e:	f898 2000 	ldrb.w	r2, [r8]
   2a872:	4b28      	ldr	r3, [pc, #160]	; (2a914 <tls_interface_setopt+0x16c>)
   2a874:	3200      	adds	r2, #0
   2a876:	bf18      	it	ne
   2a878:	2201      	movne	r2, #1
   2a87a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2a87e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2a882:	7062      	strb	r2, [r4, #1]
   2a884:	2000      	movs	r0, #0
   2a886:	e7c9      	b.n	2a81c <tls_interface_setopt+0x74>
   2a888:	2e04      	cmp	r6, #4
   2a88a:	d127      	bne.n	2a8dc <tls_interface_setopt+0x134>
   2a88c:	f8d8 2000 	ldr.w	r2, [r8]
   2a890:	2a02      	cmp	r2, #2
   2a892:	d823      	bhi.n	2a8dc <tls_interface_setopt+0x134>
   2a894:	4b1f      	ldr	r3, [pc, #124]	; (2a914 <tls_interface_setopt+0x16c>)
   2a896:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2a89a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2a89e:	70a2      	strb	r2, [r4, #2]
   2a8a0:	2000      	movs	r0, #0
   2a8a2:	e7bb      	b.n	2a81c <tls_interface_setopt+0x74>
   2a8a4:	4c1c      	ldr	r4, [pc, #112]	; (2a918 <tls_interface_setopt+0x170>)
   2a8a6:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   2a8aa:	b138      	cbz	r0, 2a8bc <tls_interface_setopt+0x114>
   2a8ac:	f005 fd92 	bl	303d4 <nrf_free>
   2a8b0:	2200      	movs	r2, #0
   2a8b2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   2a8b6:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   2a8ba:	605a      	str	r2, [r3, #4]
   2a8bc:	2e00      	cmp	r6, #0
   2a8be:	d0ac      	beq.n	2a81a <tls_interface_setopt+0x72>
   2a8c0:	4630      	mov	r0, r6
   2a8c2:	f005 fd7d 	bl	303c0 <nrf_malloc>
   2a8c6:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   2a8ca:	b1c0      	cbz	r0, 2a8fe <tls_interface_setopt+0x156>
   2a8cc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2a8d0:	4632      	mov	r2, r6
   2a8d2:	4641      	mov	r1, r8
   2a8d4:	6066      	str	r6, [r4, #4]
   2a8d6:	f00c fd94 	bl	37402 <memcpy>
   2a8da:	e79e      	b.n	2a81a <tls_interface_setopt+0x72>
   2a8dc:	2016      	movs	r0, #22
   2a8de:	f7fb f84d 	bl	2597c <bsd_os_errno_set>
   2a8e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a8e6:	b002      	add	sp, #8
   2a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a8ec:	2202      	movs	r2, #2
   2a8ee:	4b09      	ldr	r3, [pc, #36]	; (2a914 <tls_interface_setopt+0x16c>)
   2a8f0:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2a8f4:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   2a8f8:	e790      	b.n	2a81c <tls_interface_setopt+0x74>
   2a8fa:	2009      	movs	r0, #9
   2a8fc:	e7ef      	b.n	2a8de <tls_interface_setopt+0x136>
   2a8fe:	200c      	movs	r0, #12
   2a900:	e7ed      	b.n	2a8de <tls_interface_setopt+0x136>
   2a902:	200e      	movs	r0, #14
   2a904:	f7fb f83a 	bl	2597c <bsd_os_errno_set>
   2a908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a90c:	e786      	b.n	2a81c <tls_interface_setopt+0x74>
   2a90e:	202a      	movs	r0, #42	; 0x2a
   2a910:	e7e5      	b.n	2a8de <tls_interface_setopt+0x136>
   2a912:	bf00      	nop
   2a914:	20023b24 	.word	0x20023b24
   2a918:	20023c68 	.word	0x20023c68

0002a91c <tls_interface_getopt>:
   2a91c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a91e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2a922:	b083      	sub	sp, #12
   2a924:	9f08      	ldr	r7, [sp, #32]
   2a926:	d112      	bne.n	2a94e <tls_interface_getopt+0x32>
   2a928:	461d      	mov	r5, r3
   2a92a:	b16b      	cbz	r3, 2a948 <tls_interface_getopt+0x2c>
   2a92c:	b167      	cbz	r7, 2a948 <tls_interface_getopt+0x2c>
   2a92e:	4606      	mov	r6, r0
   2a930:	4614      	mov	r4, r2
   2a932:	f006 fa4d 	bl	30dd0 <interface_socket_from_handle_get>
   2a936:	b178      	cbz	r0, 2a958 <tls_interface_getopt+0x3c>
   2a938:	3c01      	subs	r4, #1
   2a93a:	2c05      	cmp	r4, #5
   2a93c:	d859      	bhi.n	2a9f2 <tls_interface_getopt+0xd6>
   2a93e:	e8df f004 	tbb	[pc, r4]
   2a942:	2818      	.short	0x2818
   2a944:	0d584c40 	.word	0x0d584c40
   2a948:	200e      	movs	r0, #14
   2a94a:	b003      	add	sp, #12
   2a94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a94e:	b003      	add	sp, #12
   2a950:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2a954:	f001 ba62 	b.w	2be1c <ip_interface_getopt>
   2a958:	2009      	movs	r0, #9
   2a95a:	e7f6      	b.n	2a94a <tls_interface_getopt+0x2e>
   2a95c:	4601      	mov	r1, r0
   2a95e:	e9cd 5700 	strd	r5, r7, [sp]
   2a962:	4630      	mov	r0, r6
   2a964:	f247 0301 	movw	r3, #28673	; 0x7001
   2a968:	f44f 7280 	mov.w	r2, #256	; 0x100
   2a96c:	f000 fe2e 	bl	2b5cc <ip_interface_socketoption_get>
   2a970:	e7eb      	b.n	2a94a <tls_interface_getopt+0x2e>
   2a972:	683b      	ldr	r3, [r7, #0]
   2a974:	2b04      	cmp	r3, #4
   2a976:	d13e      	bne.n	2a9f6 <tls_interface_getopt+0xda>
   2a978:	4b22      	ldr	r3, [pc, #136]	; (2aa04 <tls_interface_getopt+0xe8>)
   2a97a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2a97e:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   2a982:	2000      	movs	r0, #0
   2a984:	f1a3 0301 	sub.w	r3, r3, #1
   2a988:	fab3 f383 	clz	r3, r3
   2a98c:	095b      	lsrs	r3, r3, #5
   2a98e:	602b      	str	r3, [r5, #0]
   2a990:	e7db      	b.n	2a94a <tls_interface_getopt+0x2e>
   2a992:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2a996:	491b      	ldr	r1, [pc, #108]	; (2aa04 <tls_interface_getopt+0xe8>)
   2a998:	683b      	ldr	r3, [r7, #0]
   2a99a:	00b6      	lsls	r6, r6, #2
   2a99c:	198a      	adds	r2, r1, r6
   2a99e:	f013 0403 	ands.w	r4, r3, #3
   2a9a2:	78d0      	ldrb	r0, [r2, #3]
   2a9a4:	d129      	bne.n	2a9fa <tls_interface_getopt+0xde>
   2a9a6:	089b      	lsrs	r3, r3, #2
   2a9a8:	4283      	cmp	r3, r0
   2a9aa:	bf28      	it	cs
   2a9ac:	4603      	movcs	r3, r0
   2a9ae:	009a      	lsls	r2, r3, #2
   2a9b0:	b31b      	cbz	r3, 2a9fa <tls_interface_getopt+0xde>
   2a9b2:	3604      	adds	r6, #4
   2a9b4:	4431      	add	r1, r6
   2a9b6:	603a      	str	r2, [r7, #0]
   2a9b8:	4628      	mov	r0, r5
   2a9ba:	f00c fd22 	bl	37402 <memcpy>
   2a9be:	4620      	mov	r0, r4
   2a9c0:	e7c3      	b.n	2a94a <tls_interface_getopt+0x2e>
   2a9c2:	683b      	ldr	r3, [r7, #0]
   2a9c4:	2b01      	cmp	r3, #1
   2a9c6:	d116      	bne.n	2a9f6 <tls_interface_getopt+0xda>
   2a9c8:	4b0e      	ldr	r3, [pc, #56]	; (2aa04 <tls_interface_getopt+0xe8>)
   2a9ca:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2a9ce:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2a9d2:	7873      	ldrb	r3, [r6, #1]
   2a9d4:	2000      	movs	r0, #0
   2a9d6:	702b      	strb	r3, [r5, #0]
   2a9d8:	e7b7      	b.n	2a94a <tls_interface_getopt+0x2e>
   2a9da:	683b      	ldr	r3, [r7, #0]
   2a9dc:	2b04      	cmp	r3, #4
   2a9de:	d10a      	bne.n	2a9f6 <tls_interface_getopt+0xda>
   2a9e0:	4b08      	ldr	r3, [pc, #32]	; (2aa04 <tls_interface_getopt+0xe8>)
   2a9e2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2a9e6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2a9ea:	78b3      	ldrb	r3, [r6, #2]
   2a9ec:	2000      	movs	r0, #0
   2a9ee:	602b      	str	r3, [r5, #0]
   2a9f0:	e7ab      	b.n	2a94a <tls_interface_getopt+0x2e>
   2a9f2:	202a      	movs	r0, #42	; 0x2a
   2a9f4:	e7a9      	b.n	2a94a <tls_interface_getopt+0x2e>
   2a9f6:	2016      	movs	r0, #22
   2a9f8:	e7a7      	b.n	2a94a <tls_interface_getopt+0x2e>
   2a9fa:	2800      	cmp	r0, #0
   2a9fc:	d1fb      	bne.n	2a9f6 <tls_interface_getopt+0xda>
   2a9fe:	6038      	str	r0, [r7, #0]
   2aa00:	e7a3      	b.n	2a94a <tls_interface_getopt+0x2e>
   2aa02:	bf00      	nop
   2aa04:	20023b24 	.word	0x20023b24

0002aa08 <tls_rpc_ip_event_handler>:
   2aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aa0a:	f248 0581 	movw	r5, #32897	; 0x8081
   2aa0e:	42ab      	cmp	r3, r5
   2aa10:	460c      	mov	r4, r1
   2aa12:	d044      	beq.n	2aa9e <tls_rpc_ip_event_handler+0x96>
   2aa14:	f249 0182 	movw	r1, #36994	; 0x9082
   2aa18:	428b      	cmp	r3, r1
   2aa1a:	4606      	mov	r6, r0
   2aa1c:	d02d      	beq.n	2aa7a <tls_rpc_ip_event_handler+0x72>
   2aa1e:	f248 0102 	movw	r1, #32770	; 0x8002
   2aa22:	428b      	cmp	r3, r1
   2aa24:	d001      	beq.n	2aa2a <tls_rpc_ip_event_handler+0x22>
   2aa26:	2001      	movs	r0, #1
   2aa28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2aa2a:	2c00      	cmp	r4, #0
   2aa2c:	d0fb      	beq.n	2aa26 <tls_rpc_ip_event_handler+0x1e>
   2aa2e:	6963      	ldr	r3, [r4, #20]
   2aa30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   2aa34:	d002      	beq.n	2aa3c <tls_rpc_ip_event_handler+0x34>
   2aa36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   2aa3a:	d1f4      	bne.n	2aa26 <tls_rpc_ip_event_handler+0x1e>
   2aa3c:	6823      	ldr	r3, [r4, #0]
   2aa3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   2aa42:	6023      	str	r3, [r4, #0]
   2aa44:	6955      	ldr	r5, [r2, #20]
   2aa46:	bb05      	cbnz	r5, 2aa8a <tls_rpc_ip_event_handler+0x82>
   2aa48:	6823      	ldr	r3, [r4, #0]
   2aa4a:	0c1b      	lsrs	r3, r3, #16
   2aa4c:	041b      	lsls	r3, r3, #16
   2aa4e:	f043 0305 	orr.w	r3, r3, #5
   2aa52:	6023      	str	r3, [r4, #0]
   2aa54:	6823      	ldr	r3, [r4, #0]
   2aa56:	00db      	lsls	r3, r3, #3
   2aa58:	d50d      	bpl.n	2aa76 <tls_rpc_ip_event_handler+0x6e>
   2aa5a:	4b2a      	ldr	r3, [pc, #168]	; (2ab04 <tls_rpc_ip_event_handler+0xfc>)
   2aa5c:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   2aa60:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2aa64:	2b02      	cmp	r3, #2
   2aa66:	d106      	bne.n	2aa76 <tls_rpc_ip_event_handler+0x6e>
   2aa68:	4630      	mov	r0, r6
   2aa6a:	4621      	mov	r1, r4
   2aa6c:	f7ff fb16 	bl	2a09c <secure_client_socket>
   2aa70:	b108      	cbz	r0, 2aa76 <tls_rpc_ip_event_handler+0x6e>
   2aa72:	2873      	cmp	r0, #115	; 0x73
   2aa74:	d10c      	bne.n	2aa90 <tls_rpc_ip_event_handler+0x88>
   2aa76:	2000      	movs	r0, #0
   2aa78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2aa7a:	2c00      	cmp	r4, #0
   2aa7c:	d0fb      	beq.n	2aa76 <tls_rpc_ip_event_handler+0x6e>
   2aa7e:	6823      	ldr	r3, [r4, #0]
   2aa80:	b29b      	uxth	r3, r3
   2aa82:	2b0b      	cmp	r3, #11
   2aa84:	d1f7      	bne.n	2aa76 <tls_rpc_ip_event_handler+0x6e>
   2aa86:	6915      	ldr	r5, [r2, #16]
   2aa88:	b1cd      	cbz	r5, 2aabe <tls_rpc_ip_event_handler+0xb6>
   2aa8a:	4628      	mov	r0, r5
   2aa8c:	f000 f890 	bl	2abb0 <rpc_error_to_nrf_bsd_error>
   2aa90:	6060      	str	r0, [r4, #4]
   2aa92:	6823      	ldr	r3, [r4, #0]
   2aa94:	2000      	movs	r0, #0
   2aa96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   2aa9a:	6023      	str	r3, [r4, #0]
   2aa9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2aa9e:	2900      	cmp	r1, #0
   2aaa0:	d0e9      	beq.n	2aa76 <tls_rpc_ip_event_handler+0x6e>
   2aaa2:	680b      	ldr	r3, [r1, #0]
   2aaa4:	b29b      	uxth	r3, r3
   2aaa6:	2b0a      	cmp	r3, #10
   2aaa8:	d1e5      	bne.n	2aa76 <tls_rpc_ip_event_handler+0x6e>
   2aaaa:	6950      	ldr	r0, [r2, #20]
   2aaac:	2800      	cmp	r0, #0
   2aaae:	d1ed      	bne.n	2aa8c <tls_rpc_ip_event_handler+0x84>
   2aab0:	680b      	ldr	r3, [r1, #0]
   2aab2:	0c1b      	lsrs	r3, r3, #16
   2aab4:	041b      	lsls	r3, r3, #16
   2aab6:	f043 030b 	orr.w	r3, r3, #11
   2aaba:	600b      	str	r3, [r1, #0]
   2aabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2aabe:	6823      	ldr	r3, [r4, #0]
   2aac0:	4f11      	ldr	r7, [pc, #68]	; (2ab08 <tls_rpc_ip_event_handler+0x100>)
   2aac2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   2aac6:	6023      	str	r3, [r4, #0]
   2aac8:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   2aacc:	b130      	cbz	r0, 2aadc <tls_rpc_ip_event_handler+0xd4>
   2aace:	f005 fc81 	bl	303d4 <nrf_free>
   2aad2:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   2aad6:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   2aada:	605d      	str	r5, [r3, #4]
   2aadc:	6823      	ldr	r3, [r4, #0]
   2aade:	2000      	movs	r0, #0
   2aae0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2aae4:	6023      	str	r3, [r4, #0]
   2aae6:	6823      	ldr	r3, [r4, #0]
   2aae8:	0c1b      	lsrs	r3, r3, #16
   2aaea:	041b      	lsls	r3, r3, #16
   2aaec:	f043 030c 	orr.w	r3, r3, #12
   2aaf0:	6023      	str	r3, [r4, #0]
   2aaf2:	6823      	ldr	r3, [r4, #0]
   2aaf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2aaf8:	6023      	str	r3, [r4, #0]
   2aafa:	6823      	ldr	r3, [r4, #0]
   2aafc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2ab00:	6023      	str	r3, [r4, #0]
   2ab02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ab04:	20023b24 	.word	0x20023b24
   2ab08:	20023c68 	.word	0x20023c68

0002ab0c <ip_client_event_handler>:
   2ab0c:	f850 1b08 	ldr.w	r1, [r0], #8
   2ab10:	0c09      	lsrs	r1, r1, #16
   2ab12:	f001 bb23 	b.w	2c15c <rpc_ip_event_handler>
   2ab16:	bf00      	nop

0002ab18 <rpc_ip_client_init>:
   2ab18:	4801      	ldr	r0, [pc, #4]	; (2ab20 <rpc_ip_client_init+0x8>)
   2ab1a:	f001 be21 	b.w	2c760 <rpc_client_register>
   2ab1e:	bf00      	nop
   2ab20:	00038b8c 	.word	0x00038b8c

0002ab24 <rpc_ip_client_request_alloc>:
   2ab24:	2300      	movs	r3, #0
   2ab26:	b510      	push	{r4, lr}
   2ab28:	b082      	sub	sp, #8
   2ab2a:	9301      	str	r3, [sp, #4]
   2ab2c:	b158      	cbz	r0, 2ab46 <rpc_ip_client_request_alloc+0x22>
   2ab2e:	4604      	mov	r4, r0
   2ab30:	aa01      	add	r2, sp, #4
   2ab32:	2004      	movs	r0, #4
   2ab34:	f001 fe8e 	bl	2c854 <rpc_message_alloc>
   2ab38:	b918      	cbnz	r0, 2ab42 <rpc_ip_client_request_alloc+0x1e>
   2ab3a:	9b01      	ldr	r3, [sp, #4]
   2ab3c:	b10b      	cbz	r3, 2ab42 <rpc_ip_client_request_alloc+0x1e>
   2ab3e:	3308      	adds	r3, #8
   2ab40:	6023      	str	r3, [r4, #0]
   2ab42:	b002      	add	sp, #8
   2ab44:	bd10      	pop	{r4, pc}
   2ab46:	2007      	movs	r0, #7
   2ab48:	b002      	add	sp, #8
   2ab4a:	bd10      	pop	{r4, pc}

0002ab4c <rpc_ip_client_request_send>:
   2ab4c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2ab50:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   2ab54:	d10b      	bne.n	2ab6e <rpc_ip_client_request_send+0x22>
   2ab56:	b160      	cbz	r0, 2ab72 <rpc_ip_client_request_send+0x26>
   2ab58:	4603      	mov	r3, r0
   2ab5a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2ab5e:	2004      	movs	r0, #4
   2ab60:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2ab64:	f843 1d08 	str.w	r1, [r3, #-8]!
   2ab68:	4619      	mov	r1, r3
   2ab6a:	f001 be63 	b.w	2c834 <rpc_message_send>
   2ab6e:	200f      	movs	r0, #15
   2ab70:	4770      	bx	lr
   2ab72:	2007      	movs	r0, #7
   2ab74:	4770      	bx	lr
   2ab76:	bf00      	nop

0002ab78 <rpc_ip_client_message_free>:
   2ab78:	b120      	cbz	r0, 2ab84 <rpc_ip_client_message_free+0xc>
   2ab7a:	f1a0 0108 	sub.w	r1, r0, #8
   2ab7e:	2004      	movs	r0, #4
   2ab80:	f001 be94 	b.w	2c8ac <rpc_message_free>
   2ab84:	2007      	movs	r0, #7
   2ab86:	4770      	bx	lr

0002ab88 <rpc_ip_client_data_free>:
   2ab88:	b118      	cbz	r0, 2ab92 <rpc_ip_client_data_free+0xa>
   2ab8a:	4601      	mov	r1, r0
   2ab8c:	2004      	movs	r0, #4
   2ab8e:	f001 be99 	b.w	2c8c4 <rpc_message_data_free>
   2ab92:	2007      	movs	r0, #7
   2ab94:	4770      	bx	lr
   2ab96:	bf00      	nop

0002ab98 <ip_recvd_packet_free_cb>:
   2ab98:	b510      	push	{r4, lr}
   2ab9a:	4604      	mov	r4, r0
   2ab9c:	6800      	ldr	r0, [r0, #0]
   2ab9e:	f7ff fff3 	bl	2ab88 <rpc_ip_client_data_free>
   2aba2:	68a0      	ldr	r0, [r4, #8]
   2aba4:	b118      	cbz	r0, 2abae <ip_recvd_packet_free_cb+0x16>
   2aba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2abaa:	f005 bc13 	b.w	303d4 <nrf_free>
   2abae:	bd10      	pop	{r4, pc}

0002abb0 <rpc_error_to_nrf_bsd_error>:
   2abb0:	2810      	cmp	r0, #16
   2abb2:	bf9a      	itte	ls
   2abb4:	4b02      	ldrls	r3, [pc, #8]	; (2abc0 <rpc_error_to_nrf_bsd_error+0x10>)
   2abb6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   2abba:	202d      	movhi	r0, #45	; 0x2d
   2abbc:	4770      	bx	lr
   2abbe:	bf00      	nop
   2abc0:	00038b9c 	.word	0x00038b9c

0002abc4 <ip_interface_request_create>:
   2abc4:	b570      	push	{r4, r5, r6, lr}
   2abc6:	2500      	movs	r5, #0
   2abc8:	b082      	sub	sp, #8
   2abca:	ac02      	add	r4, sp, #8
   2abcc:	f844 5d04 	str.w	r5, [r4, #-4]!
   2abd0:	4606      	mov	r6, r0
   2abd2:	460d      	mov	r5, r1
   2abd4:	4620      	mov	r0, r4
   2abd6:	4619      	mov	r1, r3
   2abd8:	4614      	mov	r4, r2
   2abda:	f7ff ffa3 	bl	2ab24 <rpc_ip_client_request_alloc>
   2abde:	b960      	cbnz	r0, 2abfa <ip_interface_request_create+0x36>
   2abe0:	9b01      	ldr	r3, [sp, #4]
   2abe2:	2208      	movs	r2, #8
   2abe4:	7258      	strb	r0, [r3, #9]
   2abe6:	7298      	strb	r0, [r3, #10]
   2abe8:	72d8      	strb	r0, [r3, #11]
   2abea:	4618      	mov	r0, r3
   2abec:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   2abf0:	60dc      	str	r4, [r3, #12]
   2abf2:	611d      	str	r5, [r3, #16]
   2abf4:	721a      	strb	r2, [r3, #8]
   2abf6:	b002      	add	sp, #8
   2abf8:	bd70      	pop	{r4, r5, r6, pc}
   2abfa:	9b01      	ldr	r3, [sp, #4]
   2abfc:	4618      	mov	r0, r3
   2abfe:	b002      	add	sp, #8
   2ac00:	bd70      	pop	{r4, r5, r6, pc}
   2ac02:	bf00      	nop

0002ac04 <ip_interface_request_send>:
   2ac04:	b570      	push	{r4, r5, r6, lr}
   2ac06:	460c      	mov	r4, r1
   2ac08:	4605      	mov	r5, r0
   2ac0a:	4611      	mov	r1, r2
   2ac0c:	4620      	mov	r0, r4
   2ac0e:	461e      	mov	r6, r3
   2ac10:	f7ff ff9c 	bl	2ab4c <rpc_ip_client_request_send>
   2ac14:	b900      	cbnz	r0, 2ac18 <ip_interface_request_send+0x14>
   2ac16:	bd70      	pop	{r4, r5, r6, pc}
   2ac18:	6820      	ldr	r0, [r4, #0]
   2ac1a:	b108      	cbz	r0, 2ac20 <ip_interface_request_send+0x1c>
   2ac1c:	f7ff ffb4 	bl	2ab88 <rpc_ip_client_data_free>
   2ac20:	4620      	mov	r0, r4
   2ac22:	f7ff ffa9 	bl	2ab78 <rpc_ip_client_message_free>
   2ac26:	602e      	str	r6, [r5, #0]
   2ac28:	2023      	movs	r0, #35	; 0x23
   2ac2a:	bd70      	pop	{r4, r5, r6, pc}

0002ac2c <ip_interface_wait>:
   2ac2c:	b538      	push	{r3, r4, r5, lr}
   2ac2e:	4605      	mov	r5, r0
   2ac30:	f006 f85a 	bl	30ce8 <interface_socket_wait>
   2ac34:	4604      	mov	r4, r0
   2ac36:	b108      	cbz	r0, 2ac3c <ip_interface_wait+0x10>
   2ac38:	4620      	mov	r0, r4
   2ac3a:	bd38      	pop	{r3, r4, r5, pc}
   2ac3c:	4628      	mov	r0, r5
   2ac3e:	f006 f8c7 	bl	30dd0 <interface_socket_from_handle_get>
   2ac42:	2800      	cmp	r0, #0
   2ac44:	d0f8      	beq.n	2ac38 <ip_interface_wait+0xc>
   2ac46:	6844      	ldr	r4, [r0, #4]
   2ac48:	2c00      	cmp	r4, #0
   2ac4a:	d0f5      	beq.n	2ac38 <ip_interface_wait+0xc>
   2ac4c:	2300      	movs	r3, #0
   2ac4e:	6043      	str	r3, [r0, #4]
   2ac50:	4620      	mov	r0, r4
   2ac52:	bd38      	pop	{r3, r4, r5, pc}

0002ac54 <ip_interface_init>:
   2ac54:	b538      	push	{r3, r4, r5, lr}
   2ac56:	2300      	movs	r3, #0
   2ac58:	4d09      	ldr	r5, [pc, #36]	; (2ac80 <ip_interface_init+0x2c>)
   2ac5a:	4c0a      	ldr	r4, [pc, #40]	; (2ac84 <ip_interface_init+0x30>)
   2ac5c:	4619      	mov	r1, r3
   2ac5e:	2224      	movs	r2, #36	; 0x24
   2ac60:	4809      	ldr	r0, [pc, #36]	; (2ac88 <ip_interface_init+0x34>)
   2ac62:	602b      	str	r3, [r5, #0]
   2ac64:	6023      	str	r3, [r4, #0]
   2ac66:	f00c fbec 	bl	37442 <memset>
   2ac6a:	f7ff ff55 	bl	2ab18 <rpc_ip_client_init>
   2ac6e:	b918      	cbnz	r0, 2ac78 <ip_interface_init+0x24>
   2ac70:	2201      	movs	r2, #1
   2ac72:	4b06      	ldr	r3, [pc, #24]	; (2ac8c <ip_interface_init+0x38>)
   2ac74:	701a      	strb	r2, [r3, #0]
   2ac76:	bd38      	pop	{r3, r4, r5, pc}
   2ac78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ac7c:	bd38      	pop	{r3, r4, r5, pc}
   2ac7e:	bf00      	nop
   2ac80:	20023cb8 	.word	0x20023cb8
   2ac84:	20023cb4 	.word	0x20023cb4
   2ac88:	20023cbc 	.word	0x20023cbc
   2ac8c:	2002cb98 	.word	0x2002cb98

0002ac90 <ip_interface_open>:
   2ac90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ac94:	2500      	movs	r5, #0
   2ac96:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2ac9a:	4c5e      	ldr	r4, [pc, #376]	; (2ae14 <ip_interface_open+0x184>)
   2ac9c:	4606      	mov	r6, r0
   2ac9e:	7820      	ldrb	r0, [r4, #0]
   2aca0:	b084      	sub	sp, #16
   2aca2:	e9cd 5701 	strd	r5, r7, [sp, #4]
   2aca6:	2800      	cmp	r0, #0
   2aca8:	f000 80b0 	beq.w	2ae0c <ip_interface_open+0x17c>
   2acac:	4690      	mov	r8, r2
   2acae:	f026 0208 	bic.w	r2, r6, #8
   2acb2:	2a02      	cmp	r2, #2
   2acb4:	460c      	mov	r4, r1
   2acb6:	d002      	beq.n	2acbe <ip_interface_open+0x2e>
   2acb8:	2e05      	cmp	r6, #5
   2acba:	f040 808d 	bne.w	2add8 <ip_interface_open+0x148>
   2acbe:	1e63      	subs	r3, r4, #1
   2acc0:	2b02      	cmp	r3, #2
   2acc2:	f200 809d 	bhi.w	2ae00 <ip_interface_open+0x170>
   2acc6:	f1b8 0f00 	cmp.w	r8, #0
   2acca:	d159      	bne.n	2ad80 <ip_interface_open+0xf0>
   2accc:	2c01      	cmp	r4, #1
   2acce:	d06f      	beq.n	2adb0 <ip_interface_open+0x120>
   2acd0:	2c03      	cmp	r4, #3
   2acd2:	bf18      	it	ne
   2acd4:	f04f 0802 	movne.w	r8, #2
   2acd8:	4a4f      	ldr	r2, [pc, #316]	; (2ae18 <ip_interface_open+0x188>)
   2acda:	4621      	mov	r1, r4
   2acdc:	a801      	add	r0, sp, #4
   2acde:	f005 ff51 	bl	30b84 <interface_socket_allocate>
   2ace2:	9b01      	ldr	r3, [sp, #4]
   2ace4:	4607      	mov	r7, r0
   2ace6:	2b00      	cmp	r3, #0
   2ace8:	d060      	beq.n	2adac <ip_interface_open+0x11c>
   2acea:	2100      	movs	r1, #0
   2acec:	a804      	add	r0, sp, #16
   2acee:	f840 1d04 	str.w	r1, [r0, #-4]!
   2acf2:	e9c3 6403 	strd	r6, r4, [r3, #12]
   2acf6:	f8c3 8014 	str.w	r8, [r3, #20]
   2acfa:	f7ff ff13 	bl	2ab24 <rpc_ip_client_request_alloc>
   2acfe:	2800      	cmp	r0, #0
   2ad00:	d151      	bne.n	2ada6 <ip_interface_open+0x116>
   2ad02:	f247 0201 	movw	r2, #28673	; 0x7001
   2ad06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ad0a:	2108      	movs	r1, #8
   2ad0c:	9d03      	ldr	r5, [sp, #12]
   2ad0e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   2ad12:	60ea      	str	r2, [r5, #12]
   2ad14:	7268      	strb	r0, [r5, #9]
   2ad16:	72a8      	strb	r0, [r5, #10]
   2ad18:	72e8      	strb	r0, [r5, #11]
   2ad1a:	7229      	strb	r1, [r5, #8]
   2ad1c:	742b      	strb	r3, [r5, #16]
   2ad1e:	746b      	strb	r3, [r5, #17]
   2ad20:	74ab      	strb	r3, [r5, #18]
   2ad22:	74eb      	strb	r3, [r5, #19]
   2ad24:	68ab      	ldr	r3, [r5, #8]
   2ad26:	2e05      	cmp	r6, #5
   2ad28:	f103 030c 	add.w	r3, r3, #12
   2ad2c:	60ab      	str	r3, [r5, #8]
   2ad2e:	d003      	beq.n	2ad38 <ip_interface_open+0xa8>
   2ad30:	2e0a      	cmp	r6, #10
   2ad32:	bf14      	ite	ne
   2ad34:	2601      	movne	r6, #1
   2ad36:	2602      	moveq	r6, #2
   2ad38:	616e      	str	r6, [r5, #20]
   2ad3a:	f8c5 801c 	str.w	r8, [r5, #28]
   2ad3e:	61ac      	str	r4, [r5, #24]
   2ad40:	f247 0101 	movw	r1, #28673	; 0x7001
   2ad44:	4628      	mov	r0, r5
   2ad46:	f8dd 8004 	ldr.w	r8, [sp, #4]
   2ad4a:	f7ff feff 	bl	2ab4c <rpc_ip_client_request_send>
   2ad4e:	4606      	mov	r6, r0
   2ad50:	b380      	cbz	r0, 2adb4 <ip_interface_open+0x124>
   2ad52:	6828      	ldr	r0, [r5, #0]
   2ad54:	b108      	cbz	r0, 2ad5a <ip_interface_open+0xca>
   2ad56:	f7ff ff17 	bl	2ab88 <rpc_ip_client_data_free>
   2ad5a:	4628      	mov	r0, r5
   2ad5c:	f7ff ff0c 	bl	2ab78 <rpc_ip_client_message_free>
   2ad60:	2301      	movs	r3, #1
   2ad62:	2523      	movs	r5, #35	; 0x23
   2ad64:	f8c8 3000 	str.w	r3, [r8]
   2ad68:	4638      	mov	r0, r7
   2ad6a:	f005 ff6f 	bl	30c4c <interface_socket_free>
   2ad6e:	4628      	mov	r0, r5
   2ad70:	f7fa fe04 	bl	2597c <bsd_os_errno_set>
   2ad74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2ad78:	4638      	mov	r0, r7
   2ad7a:	b004      	add	sp, #16
   2ad7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ad80:	2c01      	cmp	r4, #1
   2ad82:	d00a      	beq.n	2ad9a <ip_interface_open+0x10a>
   2ad84:	2c02      	cmp	r4, #2
   2ad86:	d10b      	bne.n	2ada0 <ip_interface_open+0x110>
   2ad88:	f1b8 0f02 	cmp.w	r8, #2
   2ad8c:	d0a4      	beq.n	2acd8 <ip_interface_open+0x48>
   2ad8e:	2029      	movs	r0, #41	; 0x29
   2ad90:	f7fa fdf4 	bl	2597c <bsd_os_errno_set>
   2ad94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2ad98:	e7ee      	b.n	2ad78 <ip_interface_open+0xe8>
   2ad9a:	f1b8 0f01 	cmp.w	r8, #1
   2ad9e:	d1f6      	bne.n	2ad8e <ip_interface_open+0xfe>
   2ada0:	f04f 0802 	mov.w	r8, #2
   2ada4:	e798      	b.n	2acd8 <ip_interface_open+0x48>
   2ada6:	9d03      	ldr	r5, [sp, #12]
   2ada8:	2d00      	cmp	r5, #0
   2adaa:	d1bb      	bne.n	2ad24 <ip_interface_open+0x94>
   2adac:	2569      	movs	r5, #105	; 0x69
   2adae:	e7db      	b.n	2ad68 <ip_interface_open+0xd8>
   2adb0:	46a0      	mov	r8, r4
   2adb2:	e791      	b.n	2acd8 <ip_interface_open+0x48>
   2adb4:	ab02      	add	r3, sp, #8
   2adb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2adba:	2102      	movs	r1, #2
   2adbc:	4638      	mov	r0, r7
   2adbe:	f005 ff93 	bl	30ce8 <interface_socket_wait>
   2adc2:	4605      	mov	r5, r0
   2adc4:	2800      	cmp	r0, #0
   2adc6:	d1cf      	bne.n	2ad68 <ip_interface_open+0xd8>
   2adc8:	4638      	mov	r0, r7
   2adca:	f006 f801 	bl	30dd0 <interface_socket_from_handle_get>
   2adce:	b138      	cbz	r0, 2ade0 <ip_interface_open+0x150>
   2add0:	6845      	ldr	r5, [r0, #4]
   2add2:	b12d      	cbz	r5, 2ade0 <ip_interface_open+0x150>
   2add4:	6046      	str	r6, [r0, #4]
   2add6:	e7c7      	b.n	2ad68 <ip_interface_open+0xd8>
   2add8:	202f      	movs	r0, #47	; 0x2f
   2adda:	f7fa fdcf 	bl	2597c <bsd_os_errno_set>
   2adde:	e7cb      	b.n	2ad78 <ip_interface_open+0xe8>
   2ade0:	3c02      	subs	r4, #2
   2ade2:	2c01      	cmp	r4, #1
   2ade4:	d8c8      	bhi.n	2ad78 <ip_interface_open+0xe8>
   2ade6:	4638      	mov	r0, r7
   2ade8:	9b01      	ldr	r3, [sp, #4]
   2adea:	681a      	ldr	r2, [r3, #0]
   2adec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   2adf0:	601a      	str	r2, [r3, #0]
   2adf2:	681a      	ldr	r2, [r3, #0]
   2adf4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2adf8:	601a      	str	r2, [r3, #0]
   2adfa:	b004      	add	sp, #16
   2adfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ae00:	2016      	movs	r0, #22
   2ae02:	f7fa fdbb 	bl	2597c <bsd_os_errno_set>
   2ae06:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2ae0a:	e7b5      	b.n	2ad78 <ip_interface_open+0xe8>
   2ae0c:	2070      	movs	r0, #112	; 0x70
   2ae0e:	f7fa fdb5 	bl	2597c <bsd_os_errno_set>
   2ae12:	e7b1      	b.n	2ad78 <ip_interface_open+0xe8>
   2ae14:	2002cb98 	.word	0x2002cb98
   2ae18:	0002ab99 	.word	0x0002ab99

0002ae1c <ip_interface_close>:
   2ae1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ae20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae24:	b082      	sub	sp, #8
   2ae26:	4606      	mov	r6, r0
   2ae28:	9300      	str	r3, [sp, #0]
   2ae2a:	f005 ffd1 	bl	30dd0 <interface_socket_from_handle_get>
   2ae2e:	2800      	cmp	r0, #0
   2ae30:	d062      	beq.n	2aef8 <ip_interface_close+0xdc>
   2ae32:	4604      	mov	r4, r0
   2ae34:	2100      	movs	r1, #0
   2ae36:	a802      	add	r0, sp, #8
   2ae38:	6827      	ldr	r7, [r4, #0]
   2ae3a:	f840 1d04 	str.w	r1, [r0, #-4]!
   2ae3e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2ae42:	f7ff fe6f 	bl	2ab24 <rpc_ip_client_request_alloc>
   2ae46:	2800      	cmp	r0, #0
   2ae48:	d139      	bne.n	2aebe <ip_interface_close+0xa2>
   2ae4a:	f247 0309 	movw	r3, #28681	; 0x7009
   2ae4e:	2208      	movs	r2, #8
   2ae50:	9d01      	ldr	r5, [sp, #4]
   2ae52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2ae56:	60eb      	str	r3, [r5, #12]
   2ae58:	f8c5 8010 	str.w	r8, [r5, #16]
   2ae5c:	7268      	strb	r0, [r5, #9]
   2ae5e:	72a8      	strb	r0, [r5, #10]
   2ae60:	72e8      	strb	r0, [r5, #11]
   2ae62:	722a      	strb	r2, [r5, #8]
   2ae64:	6823      	ldr	r3, [r4, #0]
   2ae66:	f247 0109 	movw	r1, #28681	; 0x7009
   2ae6a:	0c1b      	lsrs	r3, r3, #16
   2ae6c:	041b      	lsls	r3, r3, #16
   2ae6e:	f043 030d 	orr.w	r3, r3, #13
   2ae72:	6023      	str	r3, [r4, #0]
   2ae74:	6823      	ldr	r3, [r4, #0]
   2ae76:	4628      	mov	r0, r5
   2ae78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2ae7c:	6023      	str	r3, [r4, #0]
   2ae7e:	6823      	ldr	r3, [r4, #0]
   2ae80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2ae84:	6023      	str	r3, [r4, #0]
   2ae86:	f7ff fe61 	bl	2ab4c <rpc_ip_client_request_send>
   2ae8a:	bb38      	cbnz	r0, 2aedc <ip_interface_close+0xc0>
   2ae8c:	466b      	mov	r3, sp
   2ae8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2ae92:	210e      	movs	r1, #14
   2ae94:	4630      	mov	r0, r6
   2ae96:	f005 ff27 	bl	30ce8 <interface_socket_wait>
   2ae9a:	4604      	mov	r4, r0
   2ae9c:	b1a0      	cbz	r0, 2aec8 <ip_interface_close+0xac>
   2ae9e:	4c17      	ldr	r4, [pc, #92]	; (2aefc <ip_interface_close+0xe0>)
   2aea0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   2aea4:	b120      	cbz	r0, 2aeb0 <ip_interface_close+0x94>
   2aea6:	f7ff fe67 	bl	2ab78 <rpc_ip_client_message_free>
   2aeaa:	2300      	movs	r3, #0
   2aeac:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   2aeb0:	4630      	mov	r0, r6
   2aeb2:	f005 fecb 	bl	30c4c <interface_socket_free>
   2aeb6:	2000      	movs	r0, #0
   2aeb8:	b002      	add	sp, #8
   2aeba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2aebe:	9d01      	ldr	r5, [sp, #4]
   2aec0:	200c      	movs	r0, #12
   2aec2:	2d00      	cmp	r5, #0
   2aec4:	d1ce      	bne.n	2ae64 <ip_interface_close+0x48>
   2aec6:	e012      	b.n	2aeee <ip_interface_close+0xd2>
   2aec8:	4630      	mov	r0, r6
   2aeca:	f005 ff81 	bl	30dd0 <interface_socket_from_handle_get>
   2aece:	2800      	cmp	r0, #0
   2aed0:	d0e5      	beq.n	2ae9e <ip_interface_close+0x82>
   2aed2:	6843      	ldr	r3, [r0, #4]
   2aed4:	2b00      	cmp	r3, #0
   2aed6:	d0e2      	beq.n	2ae9e <ip_interface_close+0x82>
   2aed8:	6044      	str	r4, [r0, #4]
   2aeda:	e7e0      	b.n	2ae9e <ip_interface_close+0x82>
   2aedc:	6828      	ldr	r0, [r5, #0]
   2aede:	b108      	cbz	r0, 2aee4 <ip_interface_close+0xc8>
   2aee0:	f7ff fe52 	bl	2ab88 <rpc_ip_client_data_free>
   2aee4:	4628      	mov	r0, r5
   2aee6:	f7ff fe47 	bl	2ab78 <rpc_ip_client_message_free>
   2aeea:	2023      	movs	r0, #35	; 0x23
   2aeec:	6027      	str	r7, [r4, #0]
   2aeee:	f7fa fd45 	bl	2597c <bsd_os_errno_set>
   2aef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2aef6:	e7df      	b.n	2aeb8 <ip_interface_close+0x9c>
   2aef8:	2009      	movs	r0, #9
   2aefa:	e7f8      	b.n	2aeee <ip_interface_close+0xd2>
   2aefc:	20023cbc 	.word	0x20023cbc

0002af00 <ip_interface_sendto>:
   2af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af04:	2400      	movs	r4, #0
   2af06:	b08b      	sub	sp, #44	; 0x2c
   2af08:	9102      	str	r1, [sp, #8]
   2af0a:	4615      	mov	r5, r2
   2af0c:	4699      	mov	r9, r3
   2af0e:	9407      	str	r4, [sp, #28]
   2af10:	4607      	mov	r7, r0
   2af12:	9e14      	ldr	r6, [sp, #80]	; 0x50
   2af14:	f005 ff5c 	bl	30dd0 <interface_socket_from_handle_get>
   2af18:	2800      	cmp	r0, #0
   2af1a:	f000 8163 	beq.w	2b1e4 <ip_interface_sendto+0x2e4>
   2af1e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2af22:	f300 8150 	bgt.w	2b1c6 <ip_interface_sendto+0x2c6>
   2af26:	6903      	ldr	r3, [r0, #16]
   2af28:	4604      	mov	r4, r0
   2af2a:	2b01      	cmp	r3, #1
   2af2c:	f000 8109 	beq.w	2b142 <ip_interface_sendto+0x242>
   2af30:	6822      	ldr	r2, [r4, #0]
   2af32:	0391      	lsls	r1, r2, #14
   2af34:	d569      	bpl.n	2b00a <ip_interface_sendto+0x10a>
   2af36:	f1b9 0f00 	cmp.w	r9, #0
   2af3a:	f000 8112 	beq.w	2b162 <ip_interface_sendto+0x262>
   2af3e:	f019 0f02 	tst.w	r9, #2
   2af42:	f000 814a 	beq.w	2b1da <ip_interface_sendto+0x2da>
   2af46:	2300      	movs	r3, #0
   2af48:	9303      	str	r3, [sp, #12]
   2af4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2af4c:	f247 0806 	movw	r8, #28678	; 0x7006
   2af50:	2b00      	cmp	r3, #0
   2af52:	bf08      	it	eq
   2af54:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   2af58:	f04f 0b0c 	mov.w	fp, #12
   2af5c:	4aa5      	ldr	r2, [pc, #660]	; (2b1f4 <ip_interface_sendto+0x2f4>)
   2af5e:	9308      	str	r3, [sp, #32]
   2af60:	043b      	lsls	r3, r7, #16
   2af62:	9200      	str	r2, [sp, #0]
   2af64:	9304      	str	r3, [sp, #16]
   2af66:	4629      	mov	r1, r5
   2af68:	a807      	add	r0, sp, #28
   2af6a:	f7ff fddb 	bl	2ab24 <rpc_ip_client_request_alloc>
   2af6e:	2804      	cmp	r0, #4
   2af70:	d05e      	beq.n	2b030 <ip_interface_sendto+0x130>
   2af72:	2800      	cmp	r0, #0
   2af74:	f040 813b 	bne.w	2b1ee <ip_interface_sendto+0x2ee>
   2af78:	9b07      	ldr	r3, [sp, #28]
   2af7a:	f883 b008 	strb.w	fp, [r3, #8]
   2af7e:	7258      	strb	r0, [r3, #9]
   2af80:	7298      	strb	r0, [r3, #10]
   2af82:	72d8      	strb	r0, [r3, #11]
   2af84:	2e00      	cmp	r6, #0
   2af86:	d06b      	beq.n	2b060 <ip_interface_sendto+0x160>
   2af88:	68e2      	ldr	r2, [r4, #12]
   2af8a:	6871      	ldr	r1, [r6, #4]
   2af8c:	428a      	cmp	r2, r1
   2af8e:	f040 80a8 	bne.w	2b0e2 <ip_interface_sendto+0x1e2>
   2af92:	7831      	ldrb	r1, [r6, #0]
   2af94:	9815      	ldr	r0, [sp, #84]	; 0x54
   2af96:	4288      	cmp	r0, r1
   2af98:	d10a      	bne.n	2afb0 <ip_interface_sendto+0xb0>
   2af9a:	2a02      	cmp	r2, #2
   2af9c:	f103 001c 	add.w	r0, r3, #28
   2afa0:	f000 80ff 	beq.w	2b1a2 <ip_interface_sendto+0x2a2>
   2afa4:	2a0a      	cmp	r2, #10
   2afa6:	d103      	bne.n	2afb0 <ip_interface_sendto+0xb0>
   2afa8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2afaa:	2a24      	cmp	r2, #36	; 0x24
   2afac:	f000 80e6 	beq.w	2b17c <ip_interface_sendto+0x27c>
   2afb0:	f04f 0a16 	mov.w	sl, #22
   2afb4:	6818      	ldr	r0, [r3, #0]
   2afb6:	b110      	cbz	r0, 2afbe <ip_interface_sendto+0xbe>
   2afb8:	f7ff fde6 	bl	2ab88 <rpc_ip_client_data_free>
   2afbc:	9b07      	ldr	r3, [sp, #28]
   2afbe:	4618      	mov	r0, r3
   2afc0:	f7ff fdda 	bl	2ab78 <rpc_ip_client_message_free>
   2afc4:	6823      	ldr	r3, [r4, #0]
   2afc6:	0318      	lsls	r0, r3, #12
   2afc8:	d40b      	bmi.n	2afe2 <ip_interface_sendto+0xe2>
   2afca:	6823      	ldr	r3, [r4, #0]
   2afcc:	b29b      	uxth	r3, r3
   2afce:	2b0d      	cmp	r3, #13
   2afd0:	d007      	beq.n	2afe2 <ip_interface_sendto+0xe2>
   2afd2:	6823      	ldr	r3, [r4, #0]
   2afd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2afd8:	6023      	str	r3, [r4, #0]
   2afda:	6823      	ldr	r3, [r4, #0]
   2afdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2afe0:	6023      	str	r3, [r4, #0]
   2afe2:	f1ba 0f00 	cmp.w	sl, #0
   2afe6:	f040 80b3 	bne.w	2b150 <ip_interface_sendto+0x250>
   2afea:	6823      	ldr	r3, [r4, #0]
   2afec:	0119      	lsls	r1, r3, #4
   2afee:	d57b      	bpl.n	2b0e8 <ip_interface_sendto+0x1e8>
   2aff0:	6823      	ldr	r3, [r4, #0]
   2aff2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   2aff6:	6023      	str	r3, [r4, #0]
   2aff8:	9b00      	ldr	r3, [sp, #0]
   2affa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2affe:	2800      	cmp	r0, #0
   2b000:	d176      	bne.n	2b0f0 <ip_interface_sendto+0x1f0>
   2b002:	4628      	mov	r0, r5
   2b004:	b00b      	add	sp, #44	; 0x2c
   2b006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b00a:	6822      	ldr	r2, [r4, #0]
   2b00c:	0092      	lsls	r2, r2, #2
   2b00e:	d406      	bmi.n	2b01e <ip_interface_sendto+0x11e>
   2b010:	2b01      	cmp	r3, #1
   2b012:	f000 80ad 	beq.w	2b170 <ip_interface_sendto+0x270>
   2b016:	6823      	ldr	r3, [r4, #0]
   2b018:	031b      	lsls	r3, r3, #12
   2b01a:	f140 80cf 	bpl.w	2b1bc <ip_interface_sendto+0x2bc>
   2b01e:	6823      	ldr	r3, [r4, #0]
   2b020:	031e      	lsls	r6, r3, #12
   2b022:	f140 80d5 	bpl.w	2b1d0 <ip_interface_sendto+0x2d0>
   2b026:	4b73      	ldr	r3, [pc, #460]	; (2b1f4 <ip_interface_sendto+0x2f4>)
   2b028:	f8d4 a008 	ldr.w	sl, [r4, #8]
   2b02c:	9300      	str	r3, [sp, #0]
   2b02e:	e7d8      	b.n	2afe2 <ip_interface_sendto+0xe2>
   2b030:	9b03      	ldr	r3, [sp, #12]
   2b032:	2b00      	cmp	r3, #0
   2b034:	d052      	beq.n	2b0dc <ip_interface_sendto+0x1dc>
   2b036:	9b08      	ldr	r3, [sp, #32]
   2b038:	3301      	adds	r3, #1
   2b03a:	d094      	beq.n	2af66 <ip_interface_sendto+0x66>
   2b03c:	230a      	movs	r3, #10
   2b03e:	a90a      	add	r1, sp, #40	; 0x28
   2b040:	f841 3d04 	str.w	r3, [r1, #-4]!
   2b044:	2000      	movs	r0, #0
   2b046:	f7fa fbe1 	bl	2580c <bsd_os_timedwait>
   2b04a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2b04e:	f1c2 020a 	rsb	r2, r2, #10
   2b052:	1a9b      	subs	r3, r3, r2
   2b054:	2b00      	cmp	r3, #0
   2b056:	9308      	str	r3, [sp, #32]
   2b058:	dc85      	bgt.n	2af66 <ip_interface_sendto+0x66>
   2b05a:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   2b05e:	e7b1      	b.n	2afc4 <ip_interface_sendto+0xc4>
   2b060:	4642      	mov	r2, r8
   2b062:	f8c3 9014 	str.w	r9, [r3, #20]
   2b066:	69a1      	ldr	r1, [r4, #24]
   2b068:	9804      	ldr	r0, [sp, #16]
   2b06a:	6119      	str	r1, [r3, #16]
   2b06c:	9902      	ldr	r1, [sp, #8]
   2b06e:	4302      	orrs	r2, r0
   2b070:	60da      	str	r2, [r3, #12]
   2b072:	605d      	str	r5, [r3, #4]
   2b074:	b119      	cbz	r1, 2b07e <ip_interface_sendto+0x17e>
   2b076:	6818      	ldr	r0, [r3, #0]
   2b078:	462a      	mov	r2, r5
   2b07a:	f00c f9c2 	bl	37402 <memcpy>
   2b07e:	6823      	ldr	r3, [r4, #0]
   2b080:	4641      	mov	r1, r8
   2b082:	9305      	str	r3, [sp, #20]
   2b084:	6823      	ldr	r3, [r4, #0]
   2b086:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2b08a:	6023      	str	r3, [r4, #0]
   2b08c:	6823      	ldr	r3, [r4, #0]
   2b08e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2b092:	6023      	str	r3, [r4, #0]
   2b094:	9b07      	ldr	r3, [sp, #28]
   2b096:	4618      	mov	r0, r3
   2b098:	9301      	str	r3, [sp, #4]
   2b09a:	f7ff fd57 	bl	2ab4c <rpc_ip_client_request_send>
   2b09e:	9b01      	ldr	r3, [sp, #4]
   2b0a0:	4682      	mov	sl, r0
   2b0a2:	bb78      	cbnz	r0, 2b104 <ip_interface_sendto+0x204>
   2b0a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2b0a8:	ab08      	add	r3, sp, #32
   2b0aa:	4611      	mov	r1, r2
   2b0ac:	4638      	mov	r0, r7
   2b0ae:	f005 fe1b 	bl	30ce8 <interface_socket_wait>
   2b0b2:	4603      	mov	r3, r0
   2b0b4:	b398      	cbz	r0, 2b11e <ip_interface_sendto+0x21e>
   2b0b6:	6822      	ldr	r2, [r4, #0]
   2b0b8:	0312      	lsls	r2, r2, #12
   2b0ba:	d43f      	bmi.n	2b13c <ip_interface_sendto+0x23c>
   2b0bc:	2b3c      	cmp	r3, #60	; 0x3c
   2b0be:	d001      	beq.n	2b0c4 <ip_interface_sendto+0x1c4>
   2b0c0:	2b0c      	cmp	r3, #12
   2b0c2:	d001      	beq.n	2b0c8 <ip_interface_sendto+0x1c8>
   2b0c4:	469a      	mov	sl, r3
   2b0c6:	e77d      	b.n	2afc4 <ip_interface_sendto+0xc4>
   2b0c8:	9b00      	ldr	r3, [sp, #0]
   2b0ca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2b0ce:	b108      	cbz	r0, 2b0d4 <ip_interface_sendto+0x1d4>
   2b0d0:	f7ff fd52 	bl	2ab78 <rpc_ip_client_message_free>
   2b0d4:	9b03      	ldr	r3, [sp, #12]
   2b0d6:	2b00      	cmp	r3, #0
   2b0d8:	f47f af45 	bne.w	2af66 <ip_interface_sendto+0x66>
   2b0dc:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2b0e0:	e770      	b.n	2afc4 <ip_interface_sendto+0xc4>
   2b0e2:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   2b0e6:	e765      	b.n	2afb4 <ip_interface_sendto+0xb4>
   2b0e8:	9b00      	ldr	r3, [sp, #0]
   2b0ea:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2b0ee:	6985      	ldr	r5, [r0, #24]
   2b0f0:	f7ff fd42 	bl	2ab78 <rpc_ip_client_message_free>
   2b0f4:	2300      	movs	r3, #0
   2b0f6:	4628      	mov	r0, r5
   2b0f8:	9a00      	ldr	r2, [sp, #0]
   2b0fa:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   2b0fe:	b00b      	add	sp, #44	; 0x2c
   2b100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b104:	6818      	ldr	r0, [r3, #0]
   2b106:	469a      	mov	sl, r3
   2b108:	b108      	cbz	r0, 2b10e <ip_interface_sendto+0x20e>
   2b10a:	f7ff fd3d 	bl	2ab88 <rpc_ip_client_data_free>
   2b10e:	4650      	mov	r0, sl
   2b110:	f7ff fd32 	bl	2ab78 <rpc_ip_client_message_free>
   2b114:	9b05      	ldr	r3, [sp, #20]
   2b116:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2b11a:	6023      	str	r3, [r4, #0]
   2b11c:	e752      	b.n	2afc4 <ip_interface_sendto+0xc4>
   2b11e:	9001      	str	r0, [sp, #4]
   2b120:	4638      	mov	r0, r7
   2b122:	f005 fe55 	bl	30dd0 <interface_socket_from_handle_get>
   2b126:	9b01      	ldr	r3, [sp, #4]
   2b128:	2800      	cmp	r0, #0
   2b12a:	d0cb      	beq.n	2b0c4 <ip_interface_sendto+0x1c4>
   2b12c:	6843      	ldr	r3, [r0, #4]
   2b12e:	2b00      	cmp	r3, #0
   2b130:	d0c8      	beq.n	2b0c4 <ip_interface_sendto+0x1c4>
   2b132:	f8c0 a004 	str.w	sl, [r0, #4]
   2b136:	6822      	ldr	r2, [r4, #0]
   2b138:	0312      	lsls	r2, r2, #12
   2b13a:	d5bf      	bpl.n	2b0bc <ip_interface_sendto+0x1bc>
   2b13c:	f8d4 a008 	ldr.w	sl, [r4, #8]
   2b140:	e740      	b.n	2afc4 <ip_interface_sendto+0xc4>
   2b142:	2e00      	cmp	r6, #0
   2b144:	f43f aef4 	beq.w	2af30 <ip_interface_sendto+0x30>
   2b148:	f04f 0a38 	mov.w	sl, #56	; 0x38
   2b14c:	4b29      	ldr	r3, [pc, #164]	; (2b1f4 <ip_interface_sendto+0x2f4>)
   2b14e:	9300      	str	r3, [sp, #0]
   2b150:	4650      	mov	r0, sl
   2b152:	f7fa fc13 	bl	2597c <bsd_os_errno_set>
   2b156:	9b00      	ldr	r3, [sp, #0]
   2b158:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2b15c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2b160:	e74d      	b.n	2affe <ip_interface_sendto+0xfe>
   2b162:	6823      	ldr	r3, [r4, #0]
   2b164:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   2b168:	f3c3 7300 	ubfx	r3, r3, #28, #1
   2b16c:	9303      	str	r3, [sp, #12]
   2b16e:	e6ec      	b.n	2af4a <ip_interface_sendto+0x4a>
   2b170:	6823      	ldr	r3, [r4, #0]
   2b172:	b29b      	uxth	r3, r3
   2b174:	2b05      	cmp	r3, #5
   2b176:	f47f af52 	bne.w	2b01e <ip_interface_sendto+0x11e>
   2b17a:	e74c      	b.n	2b016 <ip_interface_sendto+0x116>
   2b17c:	2210      	movs	r2, #16
   2b17e:	8931      	ldrh	r1, [r6, #8]
   2b180:	835a      	strh	r2, [r3, #26]
   2b182:	8319      	strh	r1, [r3, #24]
   2b184:	18b1      	adds	r1, r6, r2
   2b186:	f00c f93c 	bl	37402 <memcpy>
   2b18a:	f247 0207 	movw	r2, #28679	; 0x7007
   2b18e:	9b07      	ldr	r3, [sp, #28]
   2b190:	4690      	mov	r8, r2
   2b192:	6899      	ldr	r1, [r3, #8]
   2b194:	8b58      	ldrh	r0, [r3, #26]
   2b196:	3104      	adds	r1, #4
   2b198:	4401      	add	r1, r0
   2b19a:	f8c3 9014 	str.w	r9, [r3, #20]
   2b19e:	6099      	str	r1, [r3, #8]
   2b1a0:	e761      	b.n	2b066 <ip_interface_sendto+0x166>
   2b1a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2b1a4:	2a10      	cmp	r2, #16
   2b1a6:	f47f af03 	bne.w	2afb0 <ip_interface_sendto+0xb0>
   2b1aa:	2204      	movs	r2, #4
   2b1ac:	8931      	ldrh	r1, [r6, #8]
   2b1ae:	835a      	strh	r2, [r3, #26]
   2b1b0:	8319      	strh	r1, [r3, #24]
   2b1b2:	f106 010c 	add.w	r1, r6, #12
   2b1b6:	f00c f924 	bl	37402 <memcpy>
   2b1ba:	e7e6      	b.n	2b18a <ip_interface_sendto+0x28a>
   2b1bc:	4b0d      	ldr	r3, [pc, #52]	; (2b1f4 <ip_interface_sendto+0x2f4>)
   2b1be:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2b1c2:	9300      	str	r3, [sp, #0]
   2b1c4:	e7c4      	b.n	2b150 <ip_interface_sendto+0x250>
   2b1c6:	4b0b      	ldr	r3, [pc, #44]	; (2b1f4 <ip_interface_sendto+0x2f4>)
   2b1c8:	f04f 0a28 	mov.w	sl, #40	; 0x28
   2b1cc:	9300      	str	r3, [sp, #0]
   2b1ce:	e7bf      	b.n	2b150 <ip_interface_sendto+0x250>
   2b1d0:	4b08      	ldr	r3, [pc, #32]	; (2b1f4 <ip_interface_sendto+0x2f4>)
   2b1d2:	f04f 0a39 	mov.w	sl, #57	; 0x39
   2b1d6:	9300      	str	r3, [sp, #0]
   2b1d8:	e7ba      	b.n	2b150 <ip_interface_sendto+0x250>
   2b1da:	4b06      	ldr	r3, [pc, #24]	; (2b1f4 <ip_interface_sendto+0x2f4>)
   2b1dc:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   2b1e0:	9300      	str	r3, [sp, #0]
   2b1e2:	e7b5      	b.n	2b150 <ip_interface_sendto+0x250>
   2b1e4:	4b03      	ldr	r3, [pc, #12]	; (2b1f4 <ip_interface_sendto+0x2f4>)
   2b1e6:	f04f 0a09 	mov.w	sl, #9
   2b1ea:	9300      	str	r3, [sp, #0]
   2b1ec:	e7b0      	b.n	2b150 <ip_interface_sendto+0x250>
   2b1ee:	f04f 0a0c 	mov.w	sl, #12
   2b1f2:	e6e7      	b.n	2afc4 <ip_interface_sendto+0xc4>
   2b1f4:	20023cbc 	.word	0x20023cbc

0002b1f8 <ip_interface_recvfrom>:
   2b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1fc:	b087      	sub	sp, #28
   2b1fe:	2a00      	cmp	r2, #0
   2b200:	f000 8112 	beq.w	2b428 <ip_interface_recvfrom+0x230>
   2b204:	4680      	mov	r8, r0
   2b206:	468b      	mov	fp, r1
   2b208:	469a      	mov	sl, r3
   2b20a:	4691      	mov	r9, r2
   2b20c:	b11b      	cbz	r3, 2b216 <ip_interface_recvfrom+0x1e>
   2b20e:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   2b212:	f000 8107 	beq.w	2b424 <ip_interface_recvfrom+0x22c>
   2b216:	4640      	mov	r0, r8
   2b218:	f005 fdda 	bl	30dd0 <interface_socket_from_handle_get>
   2b21c:	4604      	mov	r4, r0
   2b21e:	2800      	cmp	r0, #0
   2b220:	f000 8104 	beq.w	2b42c <ip_interface_recvfrom+0x234>
   2b224:	6803      	ldr	r3, [r0, #0]
   2b226:	02db      	lsls	r3, r3, #11
   2b228:	d562      	bpl.n	2b2f0 <ip_interface_recvfrom+0xf8>
   2b22a:	f01a 0f02 	tst.w	sl, #2
   2b22e:	bf18      	it	ne
   2b230:	2600      	movne	r6, #0
   2b232:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2b236:	bf08      	it	eq
   2b238:	6806      	ldreq	r6, [r0, #0]
   2b23a:	f00a 0310 	and.w	r3, sl, #16
   2b23e:	bf04      	itt	eq
   2b240:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   2b244:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   2b248:	9301      	str	r3, [sp, #4]
   2b24a:	6823      	ldr	r3, [r4, #0]
   2b24c:	03df      	lsls	r7, r3, #15
   2b24e:	d567      	bpl.n	2b320 <ip_interface_recvfrom+0x128>
   2b250:	6823      	ldr	r3, [r4, #0]
   2b252:	69e0      	ldr	r0, [r4, #28]
   2b254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2b258:	6023      	str	r3, [r4, #0]
   2b25a:	6803      	ldr	r3, [r0, #0]
   2b25c:	68db      	ldr	r3, [r3, #12]
   2b25e:	4798      	blx	r3
   2b260:	4605      	mov	r5, r0
   2b262:	3001      	adds	r0, #1
   2b264:	d07d      	beq.n	2b362 <ip_interface_recvfrom+0x16a>
   2b266:	45a9      	cmp	r9, r5
   2b268:	dd03      	ble.n	2b272 <ip_interface_recvfrom+0x7a>
   2b26a:	6923      	ldr	r3, [r4, #16]
   2b26c:	2b01      	cmp	r3, #1
   2b26e:	f000 80a3 	beq.w	2b3b8 <ip_interface_recvfrom+0x1c0>
   2b272:	f04f 0800 	mov.w	r8, #0
   2b276:	af02      	add	r7, sp, #8
   2b278:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b27a:	b103      	cbz	r3, 2b27e <ip_interface_recvfrom+0x86>
   2b27c:	681b      	ldr	r3, [r3, #0]
   2b27e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2b280:	e9cd b902 	strd	fp, r9, [sp, #8]
   2b284:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2b288:	69e0      	ldr	r0, [r4, #28]
   2b28a:	4639      	mov	r1, r7
   2b28c:	6803      	ldr	r3, [r0, #0]
   2b28e:	4652      	mov	r2, sl
   2b290:	689b      	ldr	r3, [r3, #8]
   2b292:	4798      	blx	r3
   2b294:	4605      	mov	r5, r0
   2b296:	69e0      	ldr	r0, [r4, #28]
   2b298:	1c6b      	adds	r3, r5, #1
   2b29a:	6803      	ldr	r3, [r0, #0]
   2b29c:	bf18      	it	ne
   2b29e:	2701      	movne	r7, #1
   2b2a0:	68db      	ldr	r3, [r3, #12]
   2b2a2:	bf0a      	itet	eq
   2b2a4:	2700      	moveq	r7, #0
   2b2a6:	2600      	movne	r6, #0
   2b2a8:	2623      	moveq	r6, #35	; 0x23
   2b2aa:	4798      	blx	r3
   2b2ac:	3001      	adds	r0, #1
   2b2ae:	d132      	bne.n	2b316 <ip_interface_recvfrom+0x11e>
   2b2b0:	f1b8 0f00 	cmp.w	r8, #0
   2b2b4:	f000 80b0 	beq.w	2b418 <ip_interface_recvfrom+0x220>
   2b2b8:	2f00      	cmp	r7, #0
   2b2ba:	f000 80a1 	beq.w	2b400 <ip_interface_recvfrom+0x208>
   2b2be:	6823      	ldr	r3, [r4, #0]
   2b2c0:	0318      	lsls	r0, r3, #12
   2b2c2:	d506      	bpl.n	2b2d2 <ip_interface_recvfrom+0xda>
   2b2c4:	6823      	ldr	r3, [r4, #0]
   2b2c6:	b29b      	uxth	r3, r3
   2b2c8:	2b0d      	cmp	r3, #13
   2b2ca:	d002      	beq.n	2b2d2 <ip_interface_recvfrom+0xda>
   2b2cc:	6923      	ldr	r3, [r4, #16]
   2b2ce:	2b01      	cmp	r3, #1
   2b2d0:	d021      	beq.n	2b316 <ip_interface_recvfrom+0x11e>
   2b2d2:	6823      	ldr	r3, [r4, #0]
   2b2d4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2b2d8:	6823      	ldr	r3, [r4, #0]
   2b2da:	f040 80a9 	bne.w	2b430 <ip_interface_recvfrom+0x238>
   2b2de:	0319      	lsls	r1, r3, #12
   2b2e0:	d473      	bmi.n	2b3ca <ip_interface_recvfrom+0x1d2>
   2b2e2:	2e00      	cmp	r6, #0
   2b2e4:	f040 8086 	bne.w	2b3f4 <ip_interface_recvfrom+0x1fc>
   2b2e8:	4628      	mov	r0, r5
   2b2ea:	b007      	add	sp, #28
   2b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b2f0:	6803      	ldr	r3, [r0, #0]
   2b2f2:	b29b      	uxth	r3, r3
   2b2f4:	2b06      	cmp	r3, #6
   2b2f6:	d071      	beq.n	2b3dc <ip_interface_recvfrom+0x1e4>
   2b2f8:	6803      	ldr	r3, [r0, #0]
   2b2fa:	b29b      	uxth	r3, r3
   2b2fc:	2b07      	cmp	r3, #7
   2b2fe:	bf0c      	ite	eq
   2b300:	2609      	moveq	r6, #9
   2b302:	2639      	movne	r6, #57	; 0x39
   2b304:	69e0      	ldr	r0, [r4, #28]
   2b306:	6803      	ldr	r3, [r0, #0]
   2b308:	68db      	ldr	r3, [r3, #12]
   2b30a:	4798      	blx	r3
   2b30c:	1c43      	adds	r3, r0, #1
   2b30e:	4605      	mov	r5, r0
   2b310:	d0df      	beq.n	2b2d2 <ip_interface_recvfrom+0xda>
   2b312:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2b316:	6823      	ldr	r3, [r4, #0]
   2b318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2b31c:	6023      	str	r3, [r4, #0]
   2b31e:	e7e0      	b.n	2b2e2 <ip_interface_recvfrom+0xea>
   2b320:	2e00      	cmp	r6, #0
   2b322:	d07d      	beq.n	2b420 <ip_interface_recvfrom+0x228>
   2b324:	6a26      	ldr	r6, [r4, #32]
   2b326:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2b32a:	2e00      	cmp	r6, #0
   2b32c:	bf08      	it	eq
   2b32e:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   2b332:	af02      	add	r7, sp, #8
   2b334:	463b      	mov	r3, r7
   2b336:	4611      	mov	r1, r2
   2b338:	4640      	mov	r0, r8
   2b33a:	9602      	str	r6, [sp, #8]
   2b33c:	f005 fcd4 	bl	30ce8 <interface_socket_wait>
   2b340:	4606      	mov	r6, r0
   2b342:	b350      	cbz	r0, 2b39a <ip_interface_recvfrom+0x1a2>
   2b344:	6823      	ldr	r3, [r4, #0]
   2b346:	031a      	lsls	r2, r3, #12
   2b348:	d532      	bpl.n	2b3b0 <ip_interface_recvfrom+0x1b8>
   2b34a:	6823      	ldr	r3, [r4, #0]
   2b34c:	b29b      	uxth	r3, r3
   2b34e:	2b0d      	cmp	r3, #13
   2b350:	d02e      	beq.n	2b3b0 <ip_interface_recvfrom+0x1b8>
   2b352:	6923      	ldr	r3, [r4, #16]
   2b354:	f1a3 0801 	sub.w	r8, r3, #1
   2b358:	fab8 f888 	clz	r8, r8
   2b35c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   2b360:	e78a      	b.n	2b278 <ip_interface_recvfrom+0x80>
   2b362:	6823      	ldr	r3, [r4, #0]
   2b364:	031a      	lsls	r2, r3, #12
   2b366:	d5db      	bpl.n	2b320 <ip_interface_recvfrom+0x128>
   2b368:	6823      	ldr	r3, [r4, #0]
   2b36a:	b29b      	uxth	r3, r3
   2b36c:	2b0d      	cmp	r3, #13
   2b36e:	d0d7      	beq.n	2b320 <ip_interface_recvfrom+0x128>
   2b370:	6923      	ldr	r3, [r4, #16]
   2b372:	69e0      	ldr	r0, [r4, #28]
   2b374:	2b01      	cmp	r3, #1
   2b376:	d033      	beq.n	2b3e0 <ip_interface_recvfrom+0x1e8>
   2b378:	2639      	movs	r6, #57	; 0x39
   2b37a:	6823      	ldr	r3, [r4, #0]
   2b37c:	0c1b      	lsrs	r3, r3, #16
   2b37e:	041b      	lsls	r3, r3, #16
   2b380:	f043 030d 	orr.w	r3, r3, #13
   2b384:	6023      	str	r3, [r4, #0]
   2b386:	6823      	ldr	r3, [r4, #0]
   2b388:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2b38c:	6023      	str	r3, [r4, #0]
   2b38e:	6803      	ldr	r3, [r0, #0]
   2b390:	68db      	ldr	r3, [r3, #12]
   2b392:	4798      	blx	r3
   2b394:	3001      	adds	r0, #1
   2b396:	d1be      	bne.n	2b316 <ip_interface_recvfrom+0x11e>
   2b398:	e79b      	b.n	2b2d2 <ip_interface_recvfrom+0xda>
   2b39a:	4640      	mov	r0, r8
   2b39c:	f005 fd18 	bl	30dd0 <interface_socket_from_handle_get>
   2b3a0:	b140      	cbz	r0, 2b3b4 <ip_interface_recvfrom+0x1bc>
   2b3a2:	6846      	ldr	r6, [r0, #4]
   2b3a4:	b136      	cbz	r6, 2b3b4 <ip_interface_recvfrom+0x1bc>
   2b3a6:	2300      	movs	r3, #0
   2b3a8:	6043      	str	r3, [r0, #4]
   2b3aa:	6823      	ldr	r3, [r4, #0]
   2b3ac:	031a      	lsls	r2, r3, #12
   2b3ae:	d4cc      	bmi.n	2b34a <ip_interface_recvfrom+0x152>
   2b3b0:	69e0      	ldr	r0, [r4, #28]
   2b3b2:	e7ec      	b.n	2b38e <ip_interface_recvfrom+0x196>
   2b3b4:	2601      	movs	r6, #1
   2b3b6:	e748      	b.n	2b24a <ip_interface_recvfrom+0x52>
   2b3b8:	9b01      	ldr	r3, [sp, #4]
   2b3ba:	b11b      	cbz	r3, 2b3c4 <ip_interface_recvfrom+0x1cc>
   2b3bc:	6823      	ldr	r3, [r4, #0]
   2b3be:	00d9      	lsls	r1, r3, #3
   2b3c0:	d5b0      	bpl.n	2b324 <ip_interface_recvfrom+0x12c>
   2b3c2:	e756      	b.n	2b272 <ip_interface_recvfrom+0x7a>
   2b3c4:	4698      	mov	r8, r3
   2b3c6:	af02      	add	r7, sp, #8
   2b3c8:	e756      	b.n	2b278 <ip_interface_recvfrom+0x80>
   2b3ca:	6823      	ldr	r3, [r4, #0]
   2b3cc:	b29b      	uxth	r3, r3
   2b3ce:	2b0d      	cmp	r3, #13
   2b3d0:	d187      	bne.n	2b2e2 <ip_interface_recvfrom+0xea>
   2b3d2:	68a3      	ldr	r3, [r4, #8]
   2b3d4:	2b00      	cmp	r3, #0
   2b3d6:	d084      	beq.n	2b2e2 <ip_interface_recvfrom+0xea>
   2b3d8:	68a6      	ldr	r6, [r4, #8]
   2b3da:	e782      	b.n	2b2e2 <ip_interface_recvfrom+0xea>
   2b3dc:	2609      	movs	r6, #9
   2b3de:	e791      	b.n	2b304 <ip_interface_recvfrom+0x10c>
   2b3e0:	6803      	ldr	r3, [r0, #0]
   2b3e2:	68db      	ldr	r3, [r3, #12]
   2b3e4:	4798      	blx	r3
   2b3e6:	3001      	adds	r0, #1
   2b3e8:	d00a      	beq.n	2b400 <ip_interface_recvfrom+0x208>
   2b3ea:	2623      	movs	r6, #35	; 0x23
   2b3ec:	6823      	ldr	r3, [r4, #0]
   2b3ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2b3f2:	6023      	str	r3, [r4, #0]
   2b3f4:	4630      	mov	r0, r6
   2b3f6:	f7fa fac1 	bl	2597c <bsd_os_errno_set>
   2b3fa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2b3fe:	e773      	b.n	2b2e8 <ip_interface_recvfrom+0xf0>
   2b400:	6823      	ldr	r3, [r4, #0]
   2b402:	2500      	movs	r5, #0
   2b404:	0c1b      	lsrs	r3, r3, #16
   2b406:	041b      	lsls	r3, r3, #16
   2b408:	f043 030d 	orr.w	r3, r3, #13
   2b40c:	6023      	str	r3, [r4, #0]
   2b40e:	6823      	ldr	r3, [r4, #0]
   2b410:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2b414:	6023      	str	r3, [r4, #0]
   2b416:	e767      	b.n	2b2e8 <ip_interface_recvfrom+0xf0>
   2b418:	2f00      	cmp	r7, #0
   2b41a:	f47f af50 	bne.w	2b2be <ip_interface_recvfrom+0xc6>
   2b41e:	e758      	b.n	2b2d2 <ip_interface_recvfrom+0xda>
   2b420:	2623      	movs	r6, #35	; 0x23
   2b422:	e7c5      	b.n	2b3b0 <ip_interface_recvfrom+0x1b8>
   2b424:	262d      	movs	r6, #45	; 0x2d
   2b426:	e7e5      	b.n	2b3f4 <ip_interface_recvfrom+0x1fc>
   2b428:	2616      	movs	r6, #22
   2b42a:	e7e3      	b.n	2b3f4 <ip_interface_recvfrom+0x1fc>
   2b42c:	2609      	movs	r6, #9
   2b42e:	e7e1      	b.n	2b3f4 <ip_interface_recvfrom+0x1fc>
   2b430:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   2b434:	6023      	str	r3, [r4, #0]
   2b436:	6823      	ldr	r3, [r4, #0]
   2b438:	2669      	movs	r6, #105	; 0x69
   2b43a:	0c1b      	lsrs	r3, r3, #16
   2b43c:	041b      	lsls	r3, r3, #16
   2b43e:	f043 030d 	orr.w	r3, r3, #13
   2b442:	6023      	str	r3, [r4, #0]
   2b444:	e7d6      	b.n	2b3f4 <ip_interface_recvfrom+0x1fc>
   2b446:	bf00      	nop

0002b448 <ip_interface_connect>:
   2b448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b44c:	b082      	sub	sp, #8
   2b44e:	2900      	cmp	r1, #0
   2b450:	d04b      	beq.n	2b4ea <ip_interface_connect+0xa2>
   2b452:	4617      	mov	r7, r2
   2b454:	2a00      	cmp	r2, #0
   2b456:	d048      	beq.n	2b4ea <ip_interface_connect+0xa2>
   2b458:	4680      	mov	r8, r0
   2b45a:	4689      	mov	r9, r1
   2b45c:	f005 fcb8 	bl	30dd0 <interface_socket_from_handle_get>
   2b460:	4605      	mov	r5, r0
   2b462:	2800      	cmp	r0, #0
   2b464:	f000 80af 	beq.w	2b5c6 <ip_interface_connect+0x17e>
   2b468:	6803      	ldr	r3, [r0, #0]
   2b46a:	b29b      	uxth	r3, r3
   2b46c:	2b02      	cmp	r3, #2
   2b46e:	d004      	beq.n	2b47a <ip_interface_connect+0x32>
   2b470:	6803      	ldr	r3, [r0, #0]
   2b472:	b29b      	uxth	r3, r3
   2b474:	2b04      	cmp	r3, #4
   2b476:	f040 809d 	bne.w	2b5b4 <ip_interface_connect+0x16c>
   2b47a:	6829      	ldr	r1, [r5, #0]
   2b47c:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   2b480:	f040 8089 	bne.w	2b596 <ip_interface_connect+0x14e>
   2b484:	ae02      	add	r6, sp, #8
   2b486:	f8d5 a018 	ldr.w	sl, [r5, #24]
   2b48a:	f846 1d04 	str.w	r1, [r6, #-4]!
   2b48e:	4630      	mov	r0, r6
   2b490:	f7ff fb48 	bl	2ab24 <rpc_ip_client_request_alloc>
   2b494:	bb98      	cbnz	r0, 2b4fe <ip_interface_connect+0xb6>
   2b496:	2108      	movs	r1, #8
   2b498:	ea4f 4208 	mov.w	r2, r8, lsl #16
   2b49c:	9c01      	ldr	r4, [sp, #4]
   2b49e:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   2b4a2:	f043 0302 	orr.w	r3, r3, #2
   2b4a6:	60e3      	str	r3, [r4, #12]
   2b4a8:	f8c4 a010 	str.w	sl, [r4, #16]
   2b4ac:	7260      	strb	r0, [r4, #9]
   2b4ae:	72a0      	strb	r0, [r4, #10]
   2b4b0:	72e0      	strb	r0, [r4, #11]
   2b4b2:	7221      	strb	r1, [r4, #8]
   2b4b4:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   2b4b8:	f042 0202 	orr.w	r2, r2, #2
   2b4bc:	60e2      	str	r2, [r4, #12]
   2b4be:	68a3      	ldr	r3, [r4, #8]
   2b4c0:	69aa      	ldr	r2, [r5, #24]
   2b4c2:	3304      	adds	r3, #4
   2b4c4:	6122      	str	r2, [r4, #16]
   2b4c6:	60a3      	str	r3, [r4, #8]
   2b4c8:	68eb      	ldr	r3, [r5, #12]
   2b4ca:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2b4ce:	4293      	cmp	r3, r2
   2b4d0:	d11b      	bne.n	2b50a <ip_interface_connect+0xc2>
   2b4d2:	f899 2000 	ldrb.w	r2, [r9]
   2b4d6:	4297      	cmp	r7, r2
   2b4d8:	d107      	bne.n	2b4ea <ip_interface_connect+0xa2>
   2b4da:	2b02      	cmp	r3, #2
   2b4dc:	f104 0018 	add.w	r0, r4, #24
   2b4e0:	d015      	beq.n	2b50e <ip_interface_connect+0xc6>
   2b4e2:	2b0a      	cmp	r3, #10
   2b4e4:	d101      	bne.n	2b4ea <ip_interface_connect+0xa2>
   2b4e6:	2f24      	cmp	r7, #36	; 0x24
   2b4e8:	d01d      	beq.n	2b526 <ip_interface_connect+0xde>
   2b4ea:	2416      	movs	r4, #22
   2b4ec:	4620      	mov	r0, r4
   2b4ee:	f7fa fa45 	bl	2597c <bsd_os_errno_set>
   2b4f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2b4f6:	4620      	mov	r0, r4
   2b4f8:	b002      	add	sp, #8
   2b4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b4fe:	9c01      	ldr	r4, [sp, #4]
   2b500:	2c00      	cmp	r4, #0
   2b502:	d05e      	beq.n	2b5c2 <ip_interface_connect+0x17a>
   2b504:	ea4f 4208 	mov.w	r2, r8, lsl #16
   2b508:	e7d4      	b.n	2b4b4 <ip_interface_connect+0x6c>
   2b50a:	242f      	movs	r4, #47	; 0x2f
   2b50c:	e7ee      	b.n	2b4ec <ip_interface_connect+0xa4>
   2b50e:	2f10      	cmp	r7, #16
   2b510:	d1eb      	bne.n	2b4ea <ip_interface_connect+0xa2>
   2b512:	2204      	movs	r2, #4
   2b514:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   2b518:	f109 010c 	add.w	r1, r9, #12
   2b51c:	82e2      	strh	r2, [r4, #22]
   2b51e:	82a3      	strh	r3, [r4, #20]
   2b520:	f00b ff6f 	bl	37402 <memcpy>
   2b524:	e008      	b.n	2b538 <ip_interface_connect+0xf0>
   2b526:	2210      	movs	r2, #16
   2b528:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   2b52c:	eb09 0102 	add.w	r1, r9, r2
   2b530:	82e2      	strh	r2, [r4, #22]
   2b532:	82a3      	strh	r3, [r4, #20]
   2b534:	f00b ff65 	bl	37402 <memcpy>
   2b538:	68a3      	ldr	r3, [r4, #8]
   2b53a:	8ae2      	ldrh	r2, [r4, #22]
   2b53c:	f247 0102 	movw	r1, #28674	; 0x7002
   2b540:	4413      	add	r3, r2
   2b542:	60a3      	str	r3, [r4, #8]
   2b544:	682f      	ldr	r7, [r5, #0]
   2b546:	682b      	ldr	r3, [r5, #0]
   2b548:	4620      	mov	r0, r4
   2b54a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   2b54e:	602b      	str	r3, [r5, #0]
   2b550:	f7ff fafc 	bl	2ab4c <rpc_ip_client_request_send>
   2b554:	b9a8      	cbnz	r0, 2b582 <ip_interface_connect+0x13a>
   2b556:	682b      	ldr	r3, [r5, #0]
   2b558:	00db      	lsls	r3, r3, #3
   2b55a:	d429      	bmi.n	2b5b0 <ip_interface_connect+0x168>
   2b55c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   2b55e:	4633      	mov	r3, r6
   2b560:	2c00      	cmp	r4, #0
   2b562:	bf08      	it	eq
   2b564:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   2b568:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b56c:	2105      	movs	r1, #5
   2b56e:	4640      	mov	r0, r8
   2b570:	9401      	str	r4, [sp, #4]
   2b572:	f005 fbb9 	bl	30ce8 <interface_socket_wait>
   2b576:	4604      	mov	r4, r0
   2b578:	b178      	cbz	r0, 2b59a <ip_interface_connect+0x152>
   2b57a:	2c73      	cmp	r4, #115	; 0x73
   2b57c:	d0b6      	beq.n	2b4ec <ip_interface_connect+0xa4>
   2b57e:	602f      	str	r7, [r5, #0]
   2b580:	e7b4      	b.n	2b4ec <ip_interface_connect+0xa4>
   2b582:	6820      	ldr	r0, [r4, #0]
   2b584:	b108      	cbz	r0, 2b58a <ip_interface_connect+0x142>
   2b586:	f7ff faff 	bl	2ab88 <rpc_ip_client_data_free>
   2b58a:	4620      	mov	r0, r4
   2b58c:	f7ff faf4 	bl	2ab78 <rpc_ip_client_message_free>
   2b590:	2423      	movs	r4, #35	; 0x23
   2b592:	602f      	str	r7, [r5, #0]
   2b594:	e7aa      	b.n	2b4ec <ip_interface_connect+0xa4>
   2b596:	2472      	movs	r4, #114	; 0x72
   2b598:	e7a8      	b.n	2b4ec <ip_interface_connect+0xa4>
   2b59a:	4640      	mov	r0, r8
   2b59c:	f005 fc18 	bl	30dd0 <interface_socket_from_handle_get>
   2b5a0:	2800      	cmp	r0, #0
   2b5a2:	d0a8      	beq.n	2b4f6 <ip_interface_connect+0xae>
   2b5a4:	6843      	ldr	r3, [r0, #4]
   2b5a6:	2b00      	cmp	r3, #0
   2b5a8:	d0a5      	beq.n	2b4f6 <ip_interface_connect+0xae>
   2b5aa:	6044      	str	r4, [r0, #4]
   2b5ac:	461c      	mov	r4, r3
   2b5ae:	e7e4      	b.n	2b57a <ip_interface_connect+0x132>
   2b5b0:	2473      	movs	r4, #115	; 0x73
   2b5b2:	e79b      	b.n	2b4ec <ip_interface_connect+0xa4>
   2b5b4:	6803      	ldr	r3, [r0, #0]
   2b5b6:	b29b      	uxth	r3, r3
   2b5b8:	2b05      	cmp	r3, #5
   2b5ba:	bf14      	ite	ne
   2b5bc:	2409      	movne	r4, #9
   2b5be:	2438      	moveq	r4, #56	; 0x38
   2b5c0:	e794      	b.n	2b4ec <ip_interface_connect+0xa4>
   2b5c2:	240c      	movs	r4, #12
   2b5c4:	e792      	b.n	2b4ec <ip_interface_connect+0xa4>
   2b5c6:	2409      	movs	r4, #9
   2b5c8:	e790      	b.n	2b4ec <ip_interface_connect+0xa4>
   2b5ca:	bf00      	nop

0002b5cc <ip_interface_socketoption_get>:
   2b5cc:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   2b5d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2b5d4:	b082      	sub	sp, #8
   2b5d6:	9400      	str	r4, [sp, #0]
   2b5d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2b5da:	2c00      	cmp	r4, #0
   2b5dc:	d05b      	beq.n	2b696 <ip_interface_socketoption_get+0xca>
   2b5de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2b5e0:	6824      	ldr	r4, [r4, #0]
   2b5e2:	2c00      	cmp	r4, #0
   2b5e4:	d057      	beq.n	2b696 <ip_interface_socketoption_get+0xca>
   2b5e6:	680c      	ldr	r4, [r1, #0]
   2b5e8:	0266      	lsls	r6, r4, #9
   2b5ea:	d44f      	bmi.n	2b68c <ip_interface_socketoption_get+0xc0>
   2b5ec:	680c      	ldr	r4, [r1, #0]
   2b5ee:	0225      	lsls	r5, r4, #8
   2b5f0:	d44c      	bmi.n	2b68c <ip_interface_socketoption_get+0xc0>
   2b5f2:	680c      	ldr	r4, [r1, #0]
   2b5f4:	01e4      	lsls	r4, r4, #7
   2b5f6:	d449      	bmi.n	2b68c <ip_interface_socketoption_get+0xc0>
   2b5f8:	680c      	ldr	r4, [r1, #0]
   2b5fa:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   2b5fe:	d145      	bne.n	2b68c <ip_interface_socketoption_get+0xc0>
   2b600:	460c      	mov	r4, r1
   2b602:	680e      	ldr	r6, [r1, #0]
   2b604:	461f      	mov	r7, r3
   2b606:	680b      	ldr	r3, [r1, #0]
   2b608:	4681      	mov	r9, r0
   2b60a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2b60e:	600b      	str	r3, [r1, #0]
   2b610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b612:	a802      	add	r0, sp, #8
   2b614:	f840 cd04 	str.w	ip, [r0, #-4]!
   2b618:	6819      	ldr	r1, [r3, #0]
   2b61a:	4615      	mov	r5, r2
   2b61c:	f8d4 b018 	ldr.w	fp, [r4, #24]
   2b620:	f7ff fa80 	bl	2ab24 <rpc_ip_client_request_alloc>
   2b624:	2800      	cmp	r0, #0
   2b626:	d146      	bne.n	2b6b6 <ip_interface_socketoption_get+0xea>
   2b628:	f247 0304 	movw	r3, #28676	; 0x7004
   2b62c:	2208      	movs	r2, #8
   2b62e:	f8dd a004 	ldr.w	sl, [sp, #4]
   2b632:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   2b636:	f8ca 300c 	str.w	r3, [sl, #12]
   2b63a:	f8ca b010 	str.w	fp, [sl, #16]
   2b63e:	f88a 0009 	strb.w	r0, [sl, #9]
   2b642:	f88a 000a 	strb.w	r0, [sl, #10]
   2b646:	f88a 000b 	strb.w	r0, [sl, #11]
   2b64a:	f88a 2008 	strb.w	r2, [sl, #8]
   2b64e:	f8da 3008 	ldr.w	r3, [sl, #8]
   2b652:	f8ca 7018 	str.w	r7, [sl, #24]
   2b656:	3308      	adds	r3, #8
   2b658:	f8ca 5014 	str.w	r5, [sl, #20]
   2b65c:	f8ca 3008 	str.w	r3, [sl, #8]
   2b660:	f247 0104 	movw	r1, #28676	; 0x7004
   2b664:	4650      	mov	r0, sl
   2b666:	f8da 7000 	ldr.w	r7, [sl]
   2b66a:	f7ff fa6f 	bl	2ab4c <rpc_ip_client_request_send>
   2b66e:	b9b8      	cbnz	r0, 2b6a0 <ip_interface_socketoption_get+0xd4>
   2b670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   2b674:	466b      	mov	r3, sp
   2b676:	4611      	mov	r1, r2
   2b678:	4648      	mov	r0, r9
   2b67a:	f005 fb35 	bl	30ce8 <interface_socket_wait>
   2b67e:	4605      	mov	r5, r0
   2b680:	b300      	cbz	r0, 2b6c4 <ip_interface_socketoption_get+0xf8>
   2b682:	4638      	mov	r0, r7
   2b684:	f7ff fa80 	bl	2ab88 <rpc_ip_client_data_free>
   2b688:	6026      	str	r6, [r4, #0]
   2b68a:	e000      	b.n	2b68e <ip_interface_socketoption_get+0xc2>
   2b68c:	2523      	movs	r5, #35	; 0x23
   2b68e:	4628      	mov	r0, r5
   2b690:	b002      	add	sp, #8
   2b692:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   2b696:	2516      	movs	r5, #22
   2b698:	4628      	mov	r0, r5
   2b69a:	b002      	add	sp, #8
   2b69c:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   2b6a0:	f8da 0000 	ldr.w	r0, [sl]
   2b6a4:	b108      	cbz	r0, 2b6aa <ip_interface_socketoption_get+0xde>
   2b6a6:	f7ff fa6f 	bl	2ab88 <rpc_ip_client_data_free>
   2b6aa:	4650      	mov	r0, sl
   2b6ac:	f7ff fa64 	bl	2ab78 <rpc_ip_client_message_free>
   2b6b0:	2523      	movs	r5, #35	; 0x23
   2b6b2:	6026      	str	r6, [r4, #0]
   2b6b4:	e7e5      	b.n	2b682 <ip_interface_socketoption_get+0xb6>
   2b6b6:	f8dd a004 	ldr.w	sl, [sp, #4]
   2b6ba:	f1ba 0f00 	cmp.w	sl, #0
   2b6be:	d1c6      	bne.n	2b64e <ip_interface_socketoption_get+0x82>
   2b6c0:	250c      	movs	r5, #12
   2b6c2:	e7e1      	b.n	2b688 <ip_interface_socketoption_get+0xbc>
   2b6c4:	4648      	mov	r0, r9
   2b6c6:	f005 fb83 	bl	30dd0 <interface_socket_from_handle_get>
   2b6ca:	b120      	cbz	r0, 2b6d6 <ip_interface_socketoption_get+0x10a>
   2b6cc:	6843      	ldr	r3, [r0, #4]
   2b6ce:	b113      	cbz	r3, 2b6d6 <ip_interface_socketoption_get+0x10a>
   2b6d0:	6045      	str	r5, [r0, #4]
   2b6d2:	461d      	mov	r5, r3
   2b6d4:	e7d5      	b.n	2b682 <ip_interface_socketoption_get+0xb6>
   2b6d6:	f8df b050 	ldr.w	fp, [pc, #80]	; 2b728 <ip_interface_socketoption_get+0x15c>
   2b6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b6dc:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   2b6e0:	681b      	ldr	r3, [r3, #0]
   2b6e2:	b1b0      	cbz	r0, 2b712 <ip_interface_socketoption_get+0x146>
   2b6e4:	6842      	ldr	r2, [r0, #4]
   2b6e6:	429a      	cmp	r2, r3
   2b6e8:	d811      	bhi.n	2b70e <ip_interface_socketoption_get+0x142>
   2b6ea:	6801      	ldr	r1, [r0, #0]
   2b6ec:	b179      	cbz	r1, 2b70e <ip_interface_socketoption_get+0x142>
   2b6ee:	980a      	ldr	r0, [sp, #40]	; 0x28
   2b6f0:	f00b fe87 	bl	37402 <memcpy>
   2b6f4:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   2b6f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2b6fa:	685b      	ldr	r3, [r3, #4]
   2b6fc:	6013      	str	r3, [r2, #0]
   2b6fe:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   2b702:	f7ff fa39 	bl	2ab78 <rpc_ip_client_message_free>
   2b706:	2300      	movs	r3, #0
   2b708:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   2b70c:	e7b9      	b.n	2b682 <ip_interface_socketoption_get+0xb6>
   2b70e:	2516      	movs	r5, #22
   2b710:	e7f7      	b.n	2b702 <ip_interface_socketoption_get+0x136>
   2b712:	461a      	mov	r2, r3
   2b714:	980a      	ldr	r0, [sp, #40]	; 0x28
   2b716:	4639      	mov	r1, r7
   2b718:	f00b fe73 	bl	37402 <memcpy>
   2b71c:	f8da 3004 	ldr.w	r3, [sl, #4]
   2b720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2b722:	6013      	str	r3, [r2, #0]
   2b724:	e7ad      	b.n	2b682 <ip_interface_socketoption_get+0xb6>
   2b726:	bf00      	nop
   2b728:	20023cbc 	.word	0x20023cbc

0002b72c <ip_interface_socketoption_send>:
   2b72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b730:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2b734:	680c      	ldr	r4, [r1, #0]
   2b736:	b082      	sub	sp, #8
   2b738:	0266      	lsls	r6, r4, #9
   2b73a:	9500      	str	r5, [sp, #0]
   2b73c:	d44d      	bmi.n	2b7da <ip_interface_socketoption_send+0xae>
   2b73e:	680c      	ldr	r4, [r1, #0]
   2b740:	0225      	lsls	r5, r4, #8
   2b742:	d44a      	bmi.n	2b7da <ip_interface_socketoption_send+0xae>
   2b744:	680c      	ldr	r4, [r1, #0]
   2b746:	01e4      	lsls	r4, r4, #7
   2b748:	d447      	bmi.n	2b7da <ip_interface_socketoption_send+0xae>
   2b74a:	680c      	ldr	r4, [r1, #0]
   2b74c:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   2b750:	d143      	bne.n	2b7da <ip_interface_socketoption_send+0xae>
   2b752:	4688      	mov	r8, r1
   2b754:	f8d1 9000 	ldr.w	r9, [r1]
   2b758:	461f      	mov	r7, r3
   2b75a:	680b      	ldr	r3, [r1, #0]
   2b75c:	4605      	mov	r5, r0
   2b75e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2b762:	a802      	add	r0, sp, #8
   2b764:	600b      	str	r3, [r1, #0]
   2b766:	f840 4d04 	str.w	r4, [r0, #-4]!
   2b76a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b76c:	4616      	mov	r6, r2
   2b76e:	f8d8 a018 	ldr.w	sl, [r8, #24]
   2b772:	f7ff f9d7 	bl	2ab24 <rpc_ip_client_request_alloc>
   2b776:	bba8      	cbnz	r0, 2b7e4 <ip_interface_socketoption_send+0xb8>
   2b778:	f247 0303 	movw	r3, #28675	; 0x7003
   2b77c:	2208      	movs	r2, #8
   2b77e:	9c01      	ldr	r4, [sp, #4]
   2b780:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   2b784:	60e3      	str	r3, [r4, #12]
   2b786:	f8c4 a010 	str.w	sl, [r4, #16]
   2b78a:	7260      	strb	r0, [r4, #9]
   2b78c:	72a0      	strb	r0, [r4, #10]
   2b78e:	72e0      	strb	r0, [r4, #11]
   2b790:	7222      	strb	r2, [r4, #8]
   2b792:	68a3      	ldr	r3, [r4, #8]
   2b794:	6166      	str	r6, [r4, #20]
   2b796:	3308      	adds	r3, #8
   2b798:	60a3      	str	r3, [r4, #8]
   2b79a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b79c:	61a7      	str	r7, [r4, #24]
   2b79e:	b133      	cbz	r3, 2b7ae <ip_interface_socketoption_send+0x82>
   2b7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b7a2:	b123      	cbz	r3, 2b7ae <ip_interface_socketoption_send+0x82>
   2b7a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2b7a6:	4619      	mov	r1, r3
   2b7a8:	6820      	ldr	r0, [r4, #0]
   2b7aa:	f00b fe2a 	bl	37402 <memcpy>
   2b7ae:	f247 0103 	movw	r1, #28675	; 0x7003
   2b7b2:	4620      	mov	r0, r4
   2b7b4:	f7ff f9ca 	bl	2ab4c <rpc_ip_client_request_send>
   2b7b8:	4606      	mov	r6, r0
   2b7ba:	b9c0      	cbnz	r0, 2b7ee <ip_interface_socketoption_send+0xc2>
   2b7bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2b7c0:	466b      	mov	r3, sp
   2b7c2:	4611      	mov	r1, r2
   2b7c4:	4628      	mov	r0, r5
   2b7c6:	f005 fa8f 	bl	30ce8 <interface_socket_wait>
   2b7ca:	4604      	mov	r4, r0
   2b7cc:	b1d0      	cbz	r0, 2b804 <ip_interface_socketoption_send+0xd8>
   2b7ce:	4620      	mov	r0, r4
   2b7d0:	f8c8 9000 	str.w	r9, [r8]
   2b7d4:	b002      	add	sp, #8
   2b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b7da:	2423      	movs	r4, #35	; 0x23
   2b7dc:	4620      	mov	r0, r4
   2b7de:	b002      	add	sp, #8
   2b7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b7e4:	9c01      	ldr	r4, [sp, #4]
   2b7e6:	2c00      	cmp	r4, #0
   2b7e8:	d1d3      	bne.n	2b792 <ip_interface_socketoption_send+0x66>
   2b7ea:	240c      	movs	r4, #12
   2b7ec:	e7ef      	b.n	2b7ce <ip_interface_socketoption_send+0xa2>
   2b7ee:	6820      	ldr	r0, [r4, #0]
   2b7f0:	b108      	cbz	r0, 2b7f6 <ip_interface_socketoption_send+0xca>
   2b7f2:	f7ff f9c9 	bl	2ab88 <rpc_ip_client_data_free>
   2b7f6:	4620      	mov	r0, r4
   2b7f8:	f7ff f9be 	bl	2ab78 <rpc_ip_client_message_free>
   2b7fc:	2423      	movs	r4, #35	; 0x23
   2b7fe:	f8c8 9000 	str.w	r9, [r8]
   2b802:	e7e4      	b.n	2b7ce <ip_interface_socketoption_send+0xa2>
   2b804:	4628      	mov	r0, r5
   2b806:	f005 fae3 	bl	30dd0 <interface_socket_from_handle_get>
   2b80a:	2800      	cmp	r0, #0
   2b80c:	d0df      	beq.n	2b7ce <ip_interface_socketoption_send+0xa2>
   2b80e:	6844      	ldr	r4, [r0, #4]
   2b810:	2c00      	cmp	r4, #0
   2b812:	d0dc      	beq.n	2b7ce <ip_interface_socketoption_send+0xa2>
   2b814:	6046      	str	r6, [r0, #4]
   2b816:	e7da      	b.n	2b7ce <ip_interface_socketoption_send+0xa2>

0002b818 <ip_interface_bind>:
   2b818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b81c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b820:	b083      	sub	sp, #12
   2b822:	9300      	str	r3, [sp, #0]
   2b824:	b3b1      	cbz	r1, 2b894 <ip_interface_bind+0x7c>
   2b826:	4616      	mov	r6, r2
   2b828:	b3a2      	cbz	r2, 2b894 <ip_interface_bind+0x7c>
   2b82a:	4607      	mov	r7, r0
   2b82c:	4688      	mov	r8, r1
   2b82e:	f005 facf 	bl	30dd0 <interface_socket_from_handle_get>
   2b832:	4605      	mov	r5, r0
   2b834:	2800      	cmp	r0, #0
   2b836:	d04a      	beq.n	2b8ce <ip_interface_bind+0xb6>
   2b838:	6803      	ldr	r3, [r0, #0]
   2b83a:	b29b      	uxth	r3, r3
   2b83c:	2b02      	cmp	r3, #2
   2b83e:	d146      	bne.n	2b8ce <ip_interface_bind+0xb6>
   2b840:	2100      	movs	r1, #0
   2b842:	a802      	add	r0, sp, #8
   2b844:	f840 1d04 	str.w	r1, [r0, #-4]!
   2b848:	f8d5 9018 	ldr.w	r9, [r5, #24]
   2b84c:	f7ff f96a 	bl	2ab24 <rpc_ip_client_request_alloc>
   2b850:	bb50      	cbnz	r0, 2b8a8 <ip_interface_bind+0x90>
   2b852:	f247 0305 	movw	r3, #28677	; 0x7005
   2b856:	2208      	movs	r2, #8
   2b858:	9c01      	ldr	r4, [sp, #4]
   2b85a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2b85e:	60e3      	str	r3, [r4, #12]
   2b860:	f8c4 9010 	str.w	r9, [r4, #16]
   2b864:	7260      	strb	r0, [r4, #9]
   2b866:	72a0      	strb	r0, [r4, #10]
   2b868:	72e0      	strb	r0, [r4, #11]
   2b86a:	7222      	strb	r2, [r4, #8]
   2b86c:	68a3      	ldr	r3, [r4, #8]
   2b86e:	3304      	adds	r3, #4
   2b870:	60a3      	str	r3, [r4, #8]
   2b872:	68eb      	ldr	r3, [r5, #12]
   2b874:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2b878:	4293      	cmp	r3, r2
   2b87a:	d11a      	bne.n	2b8b2 <ip_interface_bind+0x9a>
   2b87c:	f898 2000 	ldrb.w	r2, [r8]
   2b880:	4296      	cmp	r6, r2
   2b882:	d107      	bne.n	2b894 <ip_interface_bind+0x7c>
   2b884:	2b02      	cmp	r3, #2
   2b886:	f104 0018 	add.w	r0, r4, #24
   2b88a:	d014      	beq.n	2b8b6 <ip_interface_bind+0x9e>
   2b88c:	2b0a      	cmp	r3, #10
   2b88e:	d101      	bne.n	2b894 <ip_interface_bind+0x7c>
   2b890:	2e24      	cmp	r6, #36	; 0x24
   2b892:	d01e      	beq.n	2b8d2 <ip_interface_bind+0xba>
   2b894:	2416      	movs	r4, #22
   2b896:	4620      	mov	r0, r4
   2b898:	f7fa f870 	bl	2597c <bsd_os_errno_set>
   2b89c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2b8a0:	4620      	mov	r0, r4
   2b8a2:	b003      	add	sp, #12
   2b8a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b8a8:	9c01      	ldr	r4, [sp, #4]
   2b8aa:	2c00      	cmp	r4, #0
   2b8ac:	d1de      	bne.n	2b86c <ip_interface_bind+0x54>
   2b8ae:	240c      	movs	r4, #12
   2b8b0:	e7f1      	b.n	2b896 <ip_interface_bind+0x7e>
   2b8b2:	242f      	movs	r4, #47	; 0x2f
   2b8b4:	e7ef      	b.n	2b896 <ip_interface_bind+0x7e>
   2b8b6:	2e10      	cmp	r6, #16
   2b8b8:	d1ec      	bne.n	2b894 <ip_interface_bind+0x7c>
   2b8ba:	2204      	movs	r2, #4
   2b8bc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2b8c0:	f108 010c 	add.w	r1, r8, #12
   2b8c4:	82e2      	strh	r2, [r4, #22]
   2b8c6:	82a3      	strh	r3, [r4, #20]
   2b8c8:	f00b fd9b 	bl	37402 <memcpy>
   2b8cc:	e00a      	b.n	2b8e4 <ip_interface_bind+0xcc>
   2b8ce:	2409      	movs	r4, #9
   2b8d0:	e7e1      	b.n	2b896 <ip_interface_bind+0x7e>
   2b8d2:	2210      	movs	r2, #16
   2b8d4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2b8d8:	eb08 0102 	add.w	r1, r8, r2
   2b8dc:	82e2      	strh	r2, [r4, #22]
   2b8de:	82a3      	strh	r3, [r4, #20]
   2b8e0:	f00b fd8f 	bl	37402 <memcpy>
   2b8e4:	68a3      	ldr	r3, [r4, #8]
   2b8e6:	8ae2      	ldrh	r2, [r4, #22]
   2b8e8:	f247 0105 	movw	r1, #28677	; 0x7005
   2b8ec:	4413      	add	r3, r2
   2b8ee:	60a3      	str	r3, [r4, #8]
   2b8f0:	682b      	ldr	r3, [r5, #0]
   2b8f2:	4620      	mov	r0, r4
   2b8f4:	0c1b      	lsrs	r3, r3, #16
   2b8f6:	041b      	lsls	r3, r3, #16
   2b8f8:	f043 0303 	orr.w	r3, r3, #3
   2b8fc:	602b      	str	r3, [r5, #0]
   2b8fe:	682e      	ldr	r6, [r5, #0]
   2b900:	f7ff f924 	bl	2ab4c <rpc_ip_client_request_send>
   2b904:	4680      	mov	r8, r0
   2b906:	b978      	cbnz	r0, 2b928 <ip_interface_bind+0x110>
   2b908:	466b      	mov	r3, sp
   2b90a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b90e:	2104      	movs	r1, #4
   2b910:	4638      	mov	r0, r7
   2b912:	f005 f9e9 	bl	30ce8 <interface_socket_wait>
   2b916:	4604      	mov	r4, r0
   2b918:	b1a0      	cbz	r0, 2b944 <ip_interface_bind+0x12c>
   2b91a:	682b      	ldr	r3, [r5, #0]
   2b91c:	0c1b      	lsrs	r3, r3, #16
   2b91e:	041b      	lsls	r3, r3, #16
   2b920:	f043 0302 	orr.w	r3, r3, #2
   2b924:	602b      	str	r3, [r5, #0]
   2b926:	e7b6      	b.n	2b896 <ip_interface_bind+0x7e>
   2b928:	6820      	ldr	r0, [r4, #0]
   2b92a:	b108      	cbz	r0, 2b930 <ip_interface_bind+0x118>
   2b92c:	f7ff f92c 	bl	2ab88 <rpc_ip_client_data_free>
   2b930:	0c36      	lsrs	r6, r6, #16
   2b932:	0436      	lsls	r6, r6, #16
   2b934:	4620      	mov	r0, r4
   2b936:	f046 0602 	orr.w	r6, r6, #2
   2b93a:	f7ff f91d 	bl	2ab78 <rpc_ip_client_message_free>
   2b93e:	2423      	movs	r4, #35	; 0x23
   2b940:	602e      	str	r6, [r5, #0]
   2b942:	e7a8      	b.n	2b896 <ip_interface_bind+0x7e>
   2b944:	4638      	mov	r0, r7
   2b946:	f005 fa43 	bl	30dd0 <interface_socket_from_handle_get>
   2b94a:	2800      	cmp	r0, #0
   2b94c:	d0a8      	beq.n	2b8a0 <ip_interface_bind+0x88>
   2b94e:	6844      	ldr	r4, [r0, #4]
   2b950:	2c00      	cmp	r4, #0
   2b952:	d0a5      	beq.n	2b8a0 <ip_interface_bind+0x88>
   2b954:	f8c0 8004 	str.w	r8, [r0, #4]
   2b958:	e7df      	b.n	2b91a <ip_interface_bind+0x102>
   2b95a:	bf00      	nop

0002b95c <ip_interface_listen>:
   2b95c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b964:	b082      	sub	sp, #8
   2b966:	4606      	mov	r6, r0
   2b968:	9300      	str	r3, [sp, #0]
   2b96a:	f005 fa31 	bl	30dd0 <interface_socket_from_handle_get>
   2b96e:	2800      	cmp	r0, #0
   2b970:	d06c      	beq.n	2ba4c <ip_interface_listen+0xf0>
   2b972:	6803      	ldr	r3, [r0, #0]
   2b974:	4604      	mov	r4, r0
   2b976:	b29b      	uxth	r3, r3
   2b978:	2b04      	cmp	r3, #4
   2b97a:	d003      	beq.n	2b984 <ip_interface_listen+0x28>
   2b97c:	6803      	ldr	r3, [r0, #0]
   2b97e:	b29b      	uxth	r3, r3
   2b980:	2b0b      	cmp	r3, #11
   2b982:	d163      	bne.n	2ba4c <ip_interface_listen+0xf0>
   2b984:	2100      	movs	r1, #0
   2b986:	4a32      	ldr	r2, [pc, #200]	; (2ba50 <ip_interface_listen+0xf4>)
   2b988:	4630      	mov	r0, r6
   2b98a:	f005 f975 	bl	30c78 <interface_socket_packet_handler_update>
   2b98e:	4601      	mov	r1, r0
   2b990:	2800      	cmp	r0, #0
   2b992:	d159      	bne.n	2ba48 <ip_interface_listen+0xec>
   2b994:	a802      	add	r0, sp, #8
   2b996:	f840 1d04 	str.w	r1, [r0, #-4]!
   2b99a:	69a7      	ldr	r7, [r4, #24]
   2b99c:	f7ff f8c2 	bl	2ab24 <rpc_ip_client_request_alloc>
   2b9a0:	bba0      	cbnz	r0, 2ba0c <ip_interface_listen+0xb0>
   2b9a2:	f247 0308 	movw	r3, #28680	; 0x7008
   2b9a6:	2208      	movs	r2, #8
   2b9a8:	9d01      	ldr	r5, [sp, #4]
   2b9aa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2b9ae:	60eb      	str	r3, [r5, #12]
   2b9b0:	612f      	str	r7, [r5, #16]
   2b9b2:	7268      	strb	r0, [r5, #9]
   2b9b4:	72a8      	strb	r0, [r5, #10]
   2b9b6:	72e8      	strb	r0, [r5, #11]
   2b9b8:	722a      	strb	r2, [r5, #8]
   2b9ba:	68ab      	ldr	r3, [r5, #8]
   2b9bc:	f247 0108 	movw	r1, #28680	; 0x7008
   2b9c0:	3304      	adds	r3, #4
   2b9c2:	60ab      	str	r3, [r5, #8]
   2b9c4:	6823      	ldr	r3, [r4, #0]
   2b9c6:	4628      	mov	r0, r5
   2b9c8:	0c1b      	lsrs	r3, r3, #16
   2b9ca:	041b      	lsls	r3, r3, #16
   2b9cc:	f043 0306 	orr.w	r3, r3, #6
   2b9d0:	6023      	str	r3, [r4, #0]
   2b9d2:	6827      	ldr	r7, [r4, #0]
   2b9d4:	f7ff f8ba 	bl	2ab4c <rpc_ip_client_request_send>
   2b9d8:	4680      	mov	r8, r0
   2b9da:	b9e0      	cbnz	r0, 2ba16 <ip_interface_listen+0xba>
   2b9dc:	466b      	mov	r3, sp
   2b9de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b9e2:	2107      	movs	r1, #7
   2b9e4:	4630      	mov	r0, r6
   2b9e6:	f005 f97f 	bl	30ce8 <interface_socket_wait>
   2b9ea:	4605      	mov	r5, r0
   2b9ec:	b308      	cbz	r0, 2ba32 <ip_interface_listen+0xd6>
   2b9ee:	6823      	ldr	r3, [r4, #0]
   2b9f0:	0c1b      	lsrs	r3, r3, #16
   2b9f2:	041b      	lsls	r3, r3, #16
   2b9f4:	f043 0304 	orr.w	r3, r3, #4
   2b9f8:	6023      	str	r3, [r4, #0]
   2b9fa:	4628      	mov	r0, r5
   2b9fc:	f7f9 ffbe 	bl	2597c <bsd_os_errno_set>
   2ba00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ba04:	4628      	mov	r0, r5
   2ba06:	b002      	add	sp, #8
   2ba08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ba0c:	9d01      	ldr	r5, [sp, #4]
   2ba0e:	2d00      	cmp	r5, #0
   2ba10:	d1d3      	bne.n	2b9ba <ip_interface_listen+0x5e>
   2ba12:	250c      	movs	r5, #12
   2ba14:	e7f1      	b.n	2b9fa <ip_interface_listen+0x9e>
   2ba16:	6828      	ldr	r0, [r5, #0]
   2ba18:	b108      	cbz	r0, 2ba1e <ip_interface_listen+0xc2>
   2ba1a:	f7ff f8b5 	bl	2ab88 <rpc_ip_client_data_free>
   2ba1e:	0c3f      	lsrs	r7, r7, #16
   2ba20:	043f      	lsls	r7, r7, #16
   2ba22:	4628      	mov	r0, r5
   2ba24:	f047 0704 	orr.w	r7, r7, #4
   2ba28:	f7ff f8a6 	bl	2ab78 <rpc_ip_client_message_free>
   2ba2c:	2523      	movs	r5, #35	; 0x23
   2ba2e:	6027      	str	r7, [r4, #0]
   2ba30:	e7e3      	b.n	2b9fa <ip_interface_listen+0x9e>
   2ba32:	4630      	mov	r0, r6
   2ba34:	f005 f9cc 	bl	30dd0 <interface_socket_from_handle_get>
   2ba38:	2800      	cmp	r0, #0
   2ba3a:	d0e3      	beq.n	2ba04 <ip_interface_listen+0xa8>
   2ba3c:	6845      	ldr	r5, [r0, #4]
   2ba3e:	2d00      	cmp	r5, #0
   2ba40:	d0e0      	beq.n	2ba04 <ip_interface_listen+0xa8>
   2ba42:	f8c0 8004 	str.w	r8, [r0, #4]
   2ba46:	e7d2      	b.n	2b9ee <ip_interface_listen+0x92>
   2ba48:	2523      	movs	r5, #35	; 0x23
   2ba4a:	e7d6      	b.n	2b9fa <ip_interface_listen+0x9e>
   2ba4c:	2509      	movs	r5, #9
   2ba4e:	e7d4      	b.n	2b9fa <ip_interface_listen+0x9e>
   2ba50:	0002ab99 	.word	0x0002ab99

0002ba54 <ip_interface_accept>:
   2ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ba5c:	2500      	movs	r5, #0
   2ba5e:	b087      	sub	sp, #28
   2ba60:	460f      	mov	r7, r1
   2ba62:	4690      	mov	r8, r2
   2ba64:	e9cd 5303 	strd	r5, r3, [sp, #12]
   2ba68:	4606      	mov	r6, r0
   2ba6a:	f005 f9b1 	bl	30dd0 <interface_socket_from_handle_get>
   2ba6e:	4604      	mov	r4, r0
   2ba70:	2800      	cmp	r0, #0
   2ba72:	f000 8123 	beq.w	2bcbc <ip_interface_accept+0x268>
   2ba76:	6803      	ldr	r3, [r0, #0]
   2ba78:	b29b      	uxth	r3, r3
   2ba7a:	2b07      	cmp	r3, #7
   2ba7c:	d10a      	bne.n	2ba94 <ip_interface_accept+0x40>
   2ba7e:	6803      	ldr	r3, [r0, #0]
   2ba80:	6805      	ldr	r5, [r0, #0]
   2ba82:	00db      	lsls	r3, r3, #3
   2ba84:	d416      	bmi.n	2bab4 <ip_interface_accept+0x60>
   2ba86:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2ba8a:	d019      	beq.n	2bac0 <ip_interface_accept+0x6c>
   2ba8c:	6805      	ldr	r5, [r0, #0]
   2ba8e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2ba92:	d124      	bne.n	2bade <ip_interface_accept+0x8a>
   2ba94:	f04f 0909 	mov.w	r9, #9
   2ba98:	9b03      	ldr	r3, [sp, #12]
   2ba9a:	b113      	cbz	r3, 2baa2 <ip_interface_accept+0x4e>
   2ba9c:	4628      	mov	r0, r5
   2ba9e:	f005 f8d5 	bl	30c4c <interface_socket_free>
   2baa2:	4648      	mov	r0, r9
   2baa4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2baa8:	f7f9 ff68 	bl	2597c <bsd_os_errno_set>
   2baac:	4648      	mov	r0, r9
   2baae:	b007      	add	sp, #28
   2bab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bab4:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2bab8:	d170      	bne.n	2bb9c <ip_interface_accept+0x148>
   2baba:	f04f 0923 	mov.w	r9, #35	; 0x23
   2babe:	e7eb      	b.n	2ba98 <ip_interface_accept+0x44>
   2bac0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2bac4:	ab04      	add	r3, sp, #16
   2bac6:	4611      	mov	r1, r2
   2bac8:	4630      	mov	r0, r6
   2baca:	f005 f90d 	bl	30ce8 <interface_socket_wait>
   2bace:	4681      	mov	r9, r0
   2bad0:	2800      	cmp	r0, #0
   2bad2:	f000 8082 	beq.w	2bbda <ip_interface_accept+0x186>
   2bad6:	6825      	ldr	r5, [r4, #0]
   2bad8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2badc:	d0dc      	beq.n	2ba98 <ip_interface_accept+0x44>
   2bade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bae2:	2300      	movs	r3, #0
   2bae4:	e9cd 0300 	strd	r0, r3, [sp]
   2bae8:	4a78      	ldr	r2, [pc, #480]	; (2bccc <ip_interface_accept+0x278>)
   2baea:	6921      	ldr	r1, [r4, #16]
   2baec:	a803      	add	r0, sp, #12
   2baee:	f005 f849 	bl	30b84 <interface_socket_allocate>
   2baf2:	9b03      	ldr	r3, [sp, #12]
   2baf4:	4605      	mov	r5, r0
   2baf6:	2b00      	cmp	r3, #0
   2baf8:	f000 80e4 	beq.w	2bcc4 <ip_interface_accept+0x270>
   2bafc:	2100      	movs	r1, #0
   2bafe:	6962      	ldr	r2, [r4, #20]
   2bb00:	a806      	add	r0, sp, #24
   2bb02:	615a      	str	r2, [r3, #20]
   2bb04:	68e2      	ldr	r2, [r4, #12]
   2bb06:	f840 1d04 	str.w	r1, [r0, #-4]!
   2bb0a:	60da      	str	r2, [r3, #12]
   2bb0c:	6922      	ldr	r2, [r4, #16]
   2bb0e:	611a      	str	r2, [r3, #16]
   2bb10:	f8d4 9018 	ldr.w	r9, [r4, #24]
   2bb14:	f7ff f806 	bl	2ab24 <rpc_ip_client_request_alloc>
   2bb18:	2800      	cmp	r0, #0
   2bb1a:	d146      	bne.n	2bbaa <ip_interface_accept+0x156>
   2bb1c:	f247 030c 	movw	r3, #28684	; 0x700c
   2bb20:	2108      	movs	r1, #8
   2bb22:	f8dd b014 	ldr.w	fp, [sp, #20]
   2bb26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2bb2a:	f8cb 300c 	str.w	r3, [fp, #12]
   2bb2e:	f8cb 9010 	str.w	r9, [fp, #16]
   2bb32:	f88b 0009 	strb.w	r0, [fp, #9]
   2bb36:	f88b 000a 	strb.w	r0, [fp, #10]
   2bb3a:	f88b 000b 	strb.w	r0, [fp, #11]
   2bb3e:	f88b 1008 	strb.w	r1, [fp, #8]
   2bb42:	6823      	ldr	r3, [r4, #0]
   2bb44:	f247 010c 	movw	r1, #28684	; 0x700c
   2bb48:	0c1b      	lsrs	r3, r3, #16
   2bb4a:	041b      	lsls	r3, r3, #16
   2bb4c:	f043 0308 	orr.w	r3, r3, #8
   2bb50:	6023      	str	r3, [r4, #0]
   2bb52:	4658      	mov	r0, fp
   2bb54:	f8d4 9000 	ldr.w	r9, [r4]
   2bb58:	f7fe fff8 	bl	2ab4c <rpc_ip_client_request_send>
   2bb5c:	4682      	mov	sl, r0
   2bb5e:	bb60      	cbnz	r0, 2bbba <ip_interface_accept+0x166>
   2bb60:	6822      	ldr	r2, [r4, #0]
   2bb62:	9900      	ldr	r1, [sp, #0]
   2bb64:	ab04      	add	r3, sp, #16
   2bb66:	400a      	ands	r2, r1
   2bb68:	6022      	str	r2, [r4, #0]
   2bb6a:	2109      	movs	r1, #9
   2bb6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2bb70:	4630      	mov	r0, r6
   2bb72:	f005 f8b9 	bl	30ce8 <interface_socket_wait>
   2bb76:	4681      	mov	r9, r0
   2bb78:	2800      	cmp	r0, #0
   2bb7a:	f000 808d 	beq.w	2bc98 <ip_interface_accept+0x244>
   2bb7e:	6823      	ldr	r3, [r4, #0]
   2bb80:	9a01      	ldr	r2, [sp, #4]
   2bb82:	431a      	orrs	r2, r3
   2bb84:	6022      	str	r2, [r4, #0]
   2bb86:	6823      	ldr	r3, [r4, #0]
   2bb88:	0c1b      	lsrs	r3, r3, #16
   2bb8a:	041b      	lsls	r3, r3, #16
   2bb8c:	f043 0307 	orr.w	r3, r3, #7
   2bb90:	6023      	str	r3, [r4, #0]
   2bb92:	6823      	ldr	r3, [r4, #0]
   2bb94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2bb98:	6023      	str	r3, [r4, #0]
   2bb9a:	e77d      	b.n	2ba98 <ip_interface_accept+0x44>
   2bb9c:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   2bba0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2bba4:	e9cd 2300 	strd	r2, r3, [sp]
   2bba8:	e79e      	b.n	2bae8 <ip_interface_accept+0x94>
   2bbaa:	f8dd b014 	ldr.w	fp, [sp, #20]
   2bbae:	f04f 090c 	mov.w	r9, #12
   2bbb2:	f1bb 0f00 	cmp.w	fp, #0
   2bbb6:	d1c4      	bne.n	2bb42 <ip_interface_accept+0xee>
   2bbb8:	e76e      	b.n	2ba98 <ip_interface_accept+0x44>
   2bbba:	f8db 0000 	ldr.w	r0, [fp]
   2bbbe:	b108      	cbz	r0, 2bbc4 <ip_interface_accept+0x170>
   2bbc0:	f7fe ffe2 	bl	2ab88 <rpc_ip_client_data_free>
   2bbc4:	ea4f 4919 	mov.w	r9, r9, lsr #16
   2bbc8:	4658      	mov	r0, fp
   2bbca:	ea4f 4909 	mov.w	r9, r9, lsl #16
   2bbce:	f7fe ffd3 	bl	2ab78 <rpc_ip_client_message_free>
   2bbd2:	f049 0307 	orr.w	r3, r9, #7
   2bbd6:	6023      	str	r3, [r4, #0]
   2bbd8:	e76f      	b.n	2baba <ip_interface_accept+0x66>
   2bbda:	4630      	mov	r0, r6
   2bbdc:	f005 f8f8 	bl	30dd0 <interface_socket_from_handle_get>
   2bbe0:	b130      	cbz	r0, 2bbf0 <ip_interface_accept+0x19c>
   2bbe2:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2bbe6:	f1b9 0f00 	cmp.w	r9, #0
   2bbea:	d001      	beq.n	2bbf0 <ip_interface_accept+0x19c>
   2bbec:	6045      	str	r5, [r0, #4]
   2bbee:	e772      	b.n	2bad6 <ip_interface_accept+0x82>
   2bbf0:	6823      	ldr	r3, [r4, #0]
   2bbf2:	03d9      	lsls	r1, r3, #15
   2bbf4:	f53f af73 	bmi.w	2bade <ip_interface_accept+0x8a>
   2bbf8:	4d35      	ldr	r5, [pc, #212]	; (2bcd0 <ip_interface_accept+0x27c>)
   2bbfa:	9903      	ldr	r1, [sp, #12]
   2bbfc:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2bc00:	699b      	ldr	r3, [r3, #24]
   2bc02:	618b      	str	r3, [r1, #24]
   2bc04:	b147      	cbz	r7, 2bc18 <ip_interface_accept+0x1c4>
   2bc06:	68cb      	ldr	r3, [r1, #12]
   2bc08:	2b0a      	cmp	r3, #10
   2bc0a:	d028      	beq.n	2bc5e <ip_interface_accept+0x20a>
   2bc0c:	2b02      	cmp	r3, #2
   2bc0e:	d103      	bne.n	2bc18 <ip_interface_accept+0x1c4>
   2bc10:	f8d8 2000 	ldr.w	r2, [r8]
   2bc14:	2a10      	cmp	r2, #16
   2bc16:	d036      	beq.n	2bc86 <ip_interface_accept+0x232>
   2bc18:	680a      	ldr	r2, [r1, #0]
   2bc1a:	482e      	ldr	r0, [pc, #184]	; (2bcd4 <ip_interface_accept+0x280>)
   2bc1c:	4002      	ands	r2, r0
   2bc1e:	f042 0205 	orr.w	r2, r2, #5
   2bc22:	600a      	str	r2, [r1, #0]
   2bc24:	9a03      	ldr	r2, [sp, #12]
   2bc26:	6811      	ldr	r1, [r2, #0]
   2bc28:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   2bc2c:	6011      	str	r1, [r2, #0]
   2bc2e:	6811      	ldr	r1, [r2, #0]
   2bc30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   2bc34:	6011      	str	r1, [r2, #0]
   2bc36:	6823      	ldr	r3, [r4, #0]
   2bc38:	4003      	ands	r3, r0
   2bc3a:	f043 0307 	orr.w	r3, r3, #7
   2bc3e:	6023      	str	r3, [r4, #0]
   2bc40:	6823      	ldr	r3, [r4, #0]
   2bc42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2bc46:	6023      	str	r3, [r4, #0]
   2bc48:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   2bc4c:	f7fe ff94 	bl	2ab78 <rpc_ip_client_message_free>
   2bc50:	2300      	movs	r3, #0
   2bc52:	4648      	mov	r0, r9
   2bc54:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   2bc58:	b007      	add	sp, #28
   2bc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc5e:	f8d8 2000 	ldr.w	r2, [r8]
   2bc62:	2a24      	cmp	r2, #36	; 0x24
   2bc64:	d1d8      	bne.n	2bc18 <ip_interface_accept+0x1c4>
   2bc66:	703a      	strb	r2, [r7, #0]
   2bc68:	2210      	movs	r2, #16
   2bc6a:	607b      	str	r3, [r7, #4]
   2bc6c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2bc70:	f107 0010 	add.w	r0, r7, #16
   2bc74:	8b9b      	ldrh	r3, [r3, #28]
   2bc76:	813b      	strh	r3, [r7, #8]
   2bc78:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   2bc7c:	3120      	adds	r1, #32
   2bc7e:	f00b fbc0 	bl	37402 <memcpy>
   2bc82:	9903      	ldr	r1, [sp, #12]
   2bc84:	e7c8      	b.n	2bc18 <ip_interface_accept+0x1c4>
   2bc86:	703a      	strb	r2, [r7, #0]
   2bc88:	607b      	str	r3, [r7, #4]
   2bc8a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2bc8e:	f107 000c 	add.w	r0, r7, #12
   2bc92:	8b9b      	ldrh	r3, [r3, #28]
   2bc94:	2204      	movs	r2, #4
   2bc96:	e7ee      	b.n	2bc76 <ip_interface_accept+0x222>
   2bc98:	4630      	mov	r0, r6
   2bc9a:	f005 f899 	bl	30dd0 <interface_socket_from_handle_get>
   2bc9e:	b138      	cbz	r0, 2bcb0 <ip_interface_accept+0x25c>
   2bca0:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2bca4:	f1b9 0f00 	cmp.w	r9, #0
   2bca8:	d002      	beq.n	2bcb0 <ip_interface_accept+0x25c>
   2bcaa:	f8c0 a004 	str.w	sl, [r0, #4]
   2bcae:	e766      	b.n	2bb7e <ip_interface_accept+0x12a>
   2bcb0:	6823      	ldr	r3, [r4, #0]
   2bcb2:	9a01      	ldr	r2, [sp, #4]
   2bcb4:	46a9      	mov	r9, r5
   2bcb6:	4313      	orrs	r3, r2
   2bcb8:	6023      	str	r3, [r4, #0]
   2bcba:	e79d      	b.n	2bbf8 <ip_interface_accept+0x1a4>
   2bcbc:	4605      	mov	r5, r0
   2bcbe:	f04f 0909 	mov.w	r9, #9
   2bcc2:	e6e9      	b.n	2ba98 <ip_interface_accept+0x44>
   2bcc4:	f04f 090c 	mov.w	r9, #12
   2bcc8:	e6eb      	b.n	2baa2 <ip_interface_accept+0x4e>
   2bcca:	bf00      	nop
   2bccc:	0002ab99 	.word	0x0002ab99
   2bcd0:	20023cbc 	.word	0x20023cbc
   2bcd4:	ffff0000 	.word	0xffff0000

0002bcd8 <ip_interface_setopt>:
   2bcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bcdc:	2901      	cmp	r1, #1
   2bcde:	b084      	sub	sp, #16
   2bce0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2bce2:	f040 808a 	bne.w	2bdfa <ip_interface_setopt+0x122>
   2bce6:	4617      	mov	r7, r2
   2bce8:	461d      	mov	r5, r3
   2bcea:	4680      	mov	r8, r0
   2bcec:	f005 f870 	bl	30dd0 <interface_socket_from_handle_get>
   2bcf0:	4604      	mov	r4, r0
   2bcf2:	2800      	cmp	r0, #0
   2bcf4:	f000 808d 	beq.w	2be12 <ip_interface_setopt+0x13a>
   2bcf8:	f1a7 0119 	sub.w	r1, r7, #25
   2bcfc:	290f      	cmp	r1, #15
   2bcfe:	d872      	bhi.n	2bde6 <ip_interface_setopt+0x10e>
   2bd00:	e8df f001 	tbb	[pc, r1]
   2bd04:	7171711a 	.word	0x7171711a
   2bd08:	61514071 	.word	0x61514071
   2bd0c:	71717171 	.word	0x71717171
   2bd10:	08717171 	.word	0x08717171
   2bd14:	2e04      	cmp	r6, #4
   2bd16:	d176      	bne.n	2be06 <ip_interface_setopt+0x12e>
   2bd18:	2d00      	cmp	r5, #0
   2bd1a:	d074      	beq.n	2be06 <ip_interface_setopt+0x12e>
   2bd1c:	4601      	mov	r1, r0
   2bd1e:	e9cd 5600 	strd	r5, r6, [sp]
   2bd22:	4640      	mov	r0, r8
   2bd24:	f241 0304 	movw	r3, #4100	; 0x1004
   2bd28:	2208      	movs	r2, #8
   2bd2a:	f7ff fcff 	bl	2b72c <ip_interface_socketoption_send>
   2bd2e:	bb20      	cbnz	r0, 2bd7a <ip_interface_setopt+0xa2>
   2bd30:	2000      	movs	r0, #0
   2bd32:	b004      	add	sp, #16
   2bd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bd38:	2d00      	cmp	r5, #0
   2bd3a:	d06c      	beq.n	2be16 <ip_interface_setopt+0x13e>
   2bd3c:	4628      	mov	r0, r5
   2bd3e:	f7ed f997 	bl	19070 <strlen>
   2bd42:	42b0      	cmp	r0, r6
   2bd44:	d167      	bne.n	2be16 <ip_interface_setopt+0x13e>
   2bd46:	6823      	ldr	r3, [r4, #0]
   2bd48:	b29b      	uxth	r3, r3
   2bd4a:	2b02      	cmp	r3, #2
   2bd4c:	d161      	bne.n	2be12 <ip_interface_setopt+0x13a>
   2bd4e:	4629      	mov	r1, r5
   2bd50:	68e0      	ldr	r0, [r4, #12]
   2bd52:	f002 fdc1 	bl	2e8d8 <pdn_interface_pdn_id_get>
   2bd56:	9003      	str	r0, [sp, #12]
   2bd58:	3001      	adds	r0, #1
   2bd5a:	bf08      	it	eq
   2bd5c:	2016      	moveq	r0, #22
   2bd5e:	d00c      	beq.n	2bd7a <ip_interface_setopt+0xa2>
   2bd60:	2204      	movs	r2, #4
   2bd62:	ab03      	add	r3, sp, #12
   2bd64:	e9cd 3200 	strd	r3, r2, [sp]
   2bd68:	4621      	mov	r1, r4
   2bd6a:	4640      	mov	r0, r8
   2bd6c:	f243 0310 	movw	r3, #12304	; 0x3010
   2bd70:	2208      	movs	r2, #8
   2bd72:	f7ff fcdb 	bl	2b72c <ip_interface_socketoption_send>
   2bd76:	2800      	cmp	r0, #0
   2bd78:	d0da      	beq.n	2bd30 <ip_interface_setopt+0x58>
   2bd7a:	f7f9 fdff 	bl	2597c <bsd_os_errno_set>
   2bd7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bd82:	e7d6      	b.n	2bd32 <ip_interface_setopt+0x5a>
   2bd84:	2e04      	cmp	r6, #4
   2bd86:	d13e      	bne.n	2be06 <ip_interface_setopt+0x12e>
   2bd88:	2d00      	cmp	r5, #0
   2bd8a:	d03c      	beq.n	2be06 <ip_interface_setopt+0x12e>
   2bd8c:	4601      	mov	r1, r0
   2bd8e:	e9cd 5600 	strd	r5, r6, [sp]
   2bd92:	4640      	mov	r0, r8
   2bd94:	f248 0301 	movw	r3, #32769	; 0x8001
   2bd98:	f44f 7200 	mov.w	r2, #512	; 0x200
   2bd9c:	f7ff fcc6 	bl	2b72c <ip_interface_socketoption_send>
   2bda0:	2800      	cmp	r0, #0
   2bda2:	d0c5      	beq.n	2bd30 <ip_interface_setopt+0x58>
   2bda4:	e7e9      	b.n	2bd7a <ip_interface_setopt+0xa2>
   2bda6:	2e04      	cmp	r6, #4
   2bda8:	d12d      	bne.n	2be06 <ip_interface_setopt+0x12e>
   2bdaa:	b365      	cbz	r5, 2be06 <ip_interface_setopt+0x12e>
   2bdac:	4601      	mov	r1, r0
   2bdae:	e9cd 5600 	strd	r5, r6, [sp]
   2bdb2:	4640      	mov	r0, r8
   2bdb4:	f244 0310 	movw	r3, #16400	; 0x4010
   2bdb8:	f44f 7200 	mov.w	r2, #512	; 0x200
   2bdbc:	f7ff fcb6 	bl	2b72c <ip_interface_socketoption_send>
   2bdc0:	2800      	cmp	r0, #0
   2bdc2:	d0b5      	beq.n	2bd30 <ip_interface_setopt+0x58>
   2bdc4:	e7d9      	b.n	2bd7a <ip_interface_setopt+0xa2>
   2bdc6:	2e04      	cmp	r6, #4
   2bdc8:	d11d      	bne.n	2be06 <ip_interface_setopt+0x12e>
   2bdca:	b1e5      	cbz	r5, 2be06 <ip_interface_setopt+0x12e>
   2bdcc:	4601      	mov	r1, r0
   2bdce:	e9cd 5600 	strd	r5, r6, [sp]
   2bdd2:	4640      	mov	r0, r8
   2bdd4:	f246 0310 	movw	r3, #24592	; 0x6010
   2bdd8:	f44f 7200 	mov.w	r2, #512	; 0x200
   2bddc:	f7ff fca6 	bl	2b72c <ip_interface_socketoption_send>
   2bde0:	2800      	cmp	r0, #0
   2bde2:	d0a5      	beq.n	2bd30 <ip_interface_setopt+0x58>
   2bde4:	e7c9      	b.n	2bd7a <ip_interface_setopt+0xa2>
   2bde6:	9600      	str	r6, [sp, #0]
   2bde8:	462b      	mov	r3, r5
   2bdea:	463a      	mov	r2, r7
   2bdec:	4640      	mov	r0, r8
   2bdee:	2101      	movs	r1, #1
   2bdf0:	f005 f816 	bl	30e20 <interface_socket_setopt>
   2bdf4:	b004      	add	sp, #16
   2bdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bdfa:	202a      	movs	r0, #42	; 0x2a
   2bdfc:	f7f9 fdbe 	bl	2597c <bsd_os_errno_set>
   2be00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2be04:	e795      	b.n	2bd32 <ip_interface_setopt+0x5a>
   2be06:	2016      	movs	r0, #22
   2be08:	f7f9 fdb8 	bl	2597c <bsd_os_errno_set>
   2be0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2be10:	e78f      	b.n	2bd32 <ip_interface_setopt+0x5a>
   2be12:	2009      	movs	r0, #9
   2be14:	e7b1      	b.n	2bd7a <ip_interface_setopt+0xa2>
   2be16:	200e      	movs	r0, #14
   2be18:	e7af      	b.n	2bd7a <ip_interface_setopt+0xa2>
   2be1a:	bf00      	nop

0002be1c <ip_interface_getopt>:
   2be1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2be20:	2901      	cmp	r1, #1
   2be22:	b082      	sub	sp, #8
   2be24:	9c08      	ldr	r4, [sp, #32]
   2be26:	d173      	bne.n	2bf10 <ip_interface_getopt+0xf4>
   2be28:	4617      	mov	r7, r2
   2be2a:	461e      	mov	r6, r3
   2be2c:	4680      	mov	r8, r0
   2be2e:	f004 ffcf 	bl	30dd0 <interface_socket_from_handle_get>
   2be32:	2800      	cmp	r0, #0
   2be34:	d072      	beq.n	2bf1c <ip_interface_getopt+0x100>
   2be36:	f1a7 051e 	sub.w	r5, r7, #30
   2be3a:	2d0a      	cmp	r5, #10
   2be3c:	d858      	bhi.n	2bef0 <ip_interface_getopt+0xd4>
   2be3e:	e8df f005 	tbb	[pc, r5]
   2be42:	331b      	.short	0x331b
   2be44:	57575745 	.word	0x57575745
   2be48:	57575757 	.word	0x57575757
   2be4c:	06          	.byte	0x06
   2be4d:	00          	.byte	0x00
   2be4e:	2c00      	cmp	r4, #0
   2be50:	d058      	beq.n	2bf04 <ip_interface_getopt+0xe8>
   2be52:	6823      	ldr	r3, [r4, #0]
   2be54:	2b04      	cmp	r3, #4
   2be56:	d155      	bne.n	2bf04 <ip_interface_getopt+0xe8>
   2be58:	2e00      	cmp	r6, #0
   2be5a:	d053      	beq.n	2bf04 <ip_interface_getopt+0xe8>
   2be5c:	4601      	mov	r1, r0
   2be5e:	e9cd 6400 	strd	r6, r4, [sp]
   2be62:	4640      	mov	r0, r8
   2be64:	f241 0304 	movw	r3, #4100	; 0x1004
   2be68:	2208      	movs	r2, #8
   2be6a:	f7ff fbaf 	bl	2b5cc <ip_interface_socketoption_get>
   2be6e:	b9b0      	cbnz	r0, 2be9e <ip_interface_getopt+0x82>
   2be70:	2000      	movs	r0, #0
   2be72:	b002      	add	sp, #8
   2be74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2be78:	2c00      	cmp	r4, #0
   2be7a:	d043      	beq.n	2bf04 <ip_interface_getopt+0xe8>
   2be7c:	6823      	ldr	r3, [r4, #0]
   2be7e:	2b04      	cmp	r3, #4
   2be80:	d140      	bne.n	2bf04 <ip_interface_getopt+0xe8>
   2be82:	2e00      	cmp	r6, #0
   2be84:	d03e      	beq.n	2bf04 <ip_interface_getopt+0xe8>
   2be86:	4601      	mov	r1, r0
   2be88:	e9cd 6400 	strd	r6, r4, [sp]
   2be8c:	4640      	mov	r0, r8
   2be8e:	f248 0301 	movw	r3, #32769	; 0x8001
   2be92:	f44f 7200 	mov.w	r2, #512	; 0x200
   2be96:	f7ff fb99 	bl	2b5cc <ip_interface_socketoption_get>
   2be9a:	2800      	cmp	r0, #0
   2be9c:	d0e8      	beq.n	2be70 <ip_interface_getopt+0x54>
   2be9e:	f7f9 fd6d 	bl	2597c <bsd_os_errno_set>
   2bea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bea6:	e7e4      	b.n	2be72 <ip_interface_getopt+0x56>
   2bea8:	b364      	cbz	r4, 2bf04 <ip_interface_getopt+0xe8>
   2beaa:	6823      	ldr	r3, [r4, #0]
   2beac:	2b04      	cmp	r3, #4
   2beae:	d129      	bne.n	2bf04 <ip_interface_getopt+0xe8>
   2beb0:	b346      	cbz	r6, 2bf04 <ip_interface_getopt+0xe8>
   2beb2:	4601      	mov	r1, r0
   2beb4:	e9cd 6400 	strd	r6, r4, [sp]
   2beb8:	4640      	mov	r0, r8
   2beba:	f244 0310 	movw	r3, #16400	; 0x4010
   2bebe:	f44f 7200 	mov.w	r2, #512	; 0x200
   2bec2:	f7ff fb83 	bl	2b5cc <ip_interface_socketoption_get>
   2bec6:	2800      	cmp	r0, #0
   2bec8:	d0d2      	beq.n	2be70 <ip_interface_getopt+0x54>
   2beca:	e7e8      	b.n	2be9e <ip_interface_getopt+0x82>
   2becc:	b1d4      	cbz	r4, 2bf04 <ip_interface_getopt+0xe8>
   2bece:	6823      	ldr	r3, [r4, #0]
   2bed0:	2b04      	cmp	r3, #4
   2bed2:	d117      	bne.n	2bf04 <ip_interface_getopt+0xe8>
   2bed4:	b1b6      	cbz	r6, 2bf04 <ip_interface_getopt+0xe8>
   2bed6:	4601      	mov	r1, r0
   2bed8:	e9cd 6400 	strd	r6, r4, [sp]
   2bedc:	4640      	mov	r0, r8
   2bede:	f246 0310 	movw	r3, #24592	; 0x6010
   2bee2:	f44f 7200 	mov.w	r2, #512	; 0x200
   2bee6:	f7ff fb71 	bl	2b5cc <ip_interface_socketoption_get>
   2beea:	2800      	cmp	r0, #0
   2beec:	d0c0      	beq.n	2be70 <ip_interface_getopt+0x54>
   2beee:	e7d6      	b.n	2be9e <ip_interface_getopt+0x82>
   2bef0:	4633      	mov	r3, r6
   2bef2:	463a      	mov	r2, r7
   2bef4:	4640      	mov	r0, r8
   2bef6:	2101      	movs	r1, #1
   2bef8:	9408      	str	r4, [sp, #32]
   2befa:	b002      	add	sp, #8
   2befc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2bf00:	f004 bfd4 	b.w	30eac <interface_socket_getopt>
   2bf04:	2016      	movs	r0, #22
   2bf06:	f7f9 fd39 	bl	2597c <bsd_os_errno_set>
   2bf0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bf0e:	e7b0      	b.n	2be72 <ip_interface_getopt+0x56>
   2bf10:	202a      	movs	r0, #42	; 0x2a
   2bf12:	f7f9 fd33 	bl	2597c <bsd_os_errno_set>
   2bf16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bf1a:	e7aa      	b.n	2be72 <ip_interface_getopt+0x56>
   2bf1c:	2009      	movs	r0, #9
   2bf1e:	f7f9 fd2d 	bl	2597c <bsd_os_errno_set>
   2bf22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bf26:	e7a4      	b.n	2be72 <ip_interface_getopt+0x56>

0002bf28 <ip_interface_getaddrinfo>:
   2bf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bf2c:	f04f 0c00 	mov.w	ip, #0
   2bf30:	2401      	movs	r4, #1
   2bf32:	4e75      	ldr	r6, [pc, #468]	; (2c108 <ip_interface_getaddrinfo+0x1e0>)
   2bf34:	4d75      	ldr	r5, [pc, #468]	; (2c10c <ip_interface_getaddrinfo+0x1e4>)
   2bf36:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 2c11c <ip_interface_getaddrinfo+0x1f4>
   2bf3a:	4f75      	ldr	r7, [pc, #468]	; (2c110 <ip_interface_getaddrinfo+0x1e8>)
   2bf3c:	7836      	ldrb	r6, [r6, #0]
   2bf3e:	b085      	sub	sp, #20
   2bf40:	f8a5 c000 	strh.w	ip, [r5]
   2bf44:	f8c8 4000 	str.w	r4, [r8]
   2bf48:	603c      	str	r4, [r7, #0]
   2bf4a:	2e00      	cmp	r6, #0
   2bf4c:	d05b      	beq.n	2c006 <ip_interface_getaddrinfo+0xde>
   2bf4e:	9301      	str	r3, [sp, #4]
   2bf50:	4614      	mov	r4, r2
   2bf52:	460b      	mov	r3, r1
   2bf54:	4606      	mov	r6, r0
   2bf56:	b171      	cbz	r1, 2bf76 <ip_interface_getaddrinfo+0x4e>
   2bf58:	4618      	mov	r0, r3
   2bf5a:	220a      	movs	r2, #10
   2bf5c:	4661      	mov	r1, ip
   2bf5e:	f007 fa75 	bl	3344c <strtol>
   2bf62:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   2bf66:	1e42      	subs	r2, r0, #1
   2bf68:	429a      	cmp	r2, r3
   2bf6a:	f200 8097 	bhi.w	2c09c <ip_interface_getaddrinfo+0x174>
   2bf6e:	0203      	lsls	r3, r0, #8
   2bf70:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   2bf74:	8028      	strh	r0, [r5, #0]
   2bf76:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 2c120 <ip_interface_getaddrinfo+0x1f8>
   2bf7a:	f8da 3000 	ldr.w	r3, [sl]
   2bf7e:	2b00      	cmp	r3, #0
   2bf80:	d145      	bne.n	2c00e <ip_interface_getaddrinfo+0xe6>
   2bf82:	4a64      	ldr	r2, [pc, #400]	; (2c114 <ip_interface_getaddrinfo+0x1ec>)
   2bf84:	6013      	str	r3, [r2, #0]
   2bf86:	4a64      	ldr	r2, [pc, #400]	; (2c118 <ip_interface_getaddrinfo+0x1f0>)
   2bf88:	6013      	str	r3, [r2, #0]
   2bf8a:	2e00      	cmp	r6, #0
   2bf8c:	d07a      	beq.n	2c084 <ip_interface_getaddrinfo+0x15c>
   2bf8e:	4630      	mov	r0, r6
   2bf90:	f7ed f86e 	bl	19070 <strlen>
   2bf94:	4683      	mov	fp, r0
   2bf96:	b144      	cbz	r4, 2bfaa <ip_interface_getaddrinfo+0x82>
   2bf98:	69e2      	ldr	r2, [r4, #28]
   2bf9a:	b132      	cbz	r2, 2bfaa <ip_interface_getaddrinfo+0x82>
   2bf9c:	6851      	ldr	r1, [r2, #4]
   2bf9e:	2966      	cmp	r1, #102	; 0x66
   2bfa0:	d103      	bne.n	2bfaa <ip_interface_getaddrinfo+0x82>
   2bfa2:	6891      	ldr	r1, [r2, #8]
   2bfa4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2bfa8:	d07e      	beq.n	2c0a8 <ip_interface_getaddrinfo+0x180>
   2bfaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bfae:	2100      	movs	r1, #0
   2bfb0:	f10d 0910 	add.w	r9, sp, #16
   2bfb4:	f849 1d04 	str.w	r1, [r9, #-4]!
   2bfb8:	4648      	mov	r0, r9
   2bfba:	4659      	mov	r1, fp
   2bfbc:	9200      	str	r2, [sp, #0]
   2bfbe:	f7fe fdb1 	bl	2ab24 <rpc_ip_client_request_alloc>
   2bfc2:	9a00      	ldr	r2, [sp, #0]
   2bfc4:	2800      	cmp	r0, #0
   2bfc6:	d15f      	bne.n	2c088 <ip_interface_getaddrinfo+0x160>
   2bfc8:	f247 010d 	movw	r1, #28685	; 0x700d
   2bfcc:	f04f 0c08 	mov.w	ip, #8
   2bfd0:	9d03      	ldr	r5, [sp, #12]
   2bfd2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   2bfd6:	60e9      	str	r1, [r5, #12]
   2bfd8:	612a      	str	r2, [r5, #16]
   2bfda:	7268      	strb	r0, [r5, #9]
   2bfdc:	72a8      	strb	r0, [r5, #10]
   2bfde:	72e8      	strb	r0, [r5, #11]
   2bfe0:	f885 c008 	strb.w	ip, [r5, #8]
   2bfe4:	2c00      	cmp	r4, #0
   2bfe6:	d076      	beq.n	2c0d6 <ip_interface_getaddrinfo+0x1ae>
   2bfe8:	6862      	ldr	r2, [r4, #4]
   2bfea:	f022 0108 	bic.w	r1, r2, #8
   2bfee:	2902      	cmp	r1, #2
   2bff0:	d011      	beq.n	2c016 <ip_interface_getaddrinfo+0xee>
   2bff2:	2a05      	cmp	r2, #5
   2bff4:	d176      	bne.n	2c0e4 <ip_interface_getaddrinfo+0x1bc>
   2bff6:	68a1      	ldr	r1, [r4, #8]
   2bff8:	2902      	cmp	r1, #2
   2bffa:	6039      	str	r1, [r7, #0]
   2bffc:	d115      	bne.n	2c02a <ip_interface_getaddrinfo+0x102>
   2bffe:	2102      	movs	r1, #2
   2c000:	f8c8 1000 	str.w	r1, [r8]
   2c004:	e00b      	b.n	2c01e <ip_interface_getaddrinfo+0xf6>
   2c006:	2070      	movs	r0, #112	; 0x70
   2c008:	b005      	add	sp, #20
   2c00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c00e:	2073      	movs	r0, #115	; 0x73
   2c010:	b005      	add	sp, #20
   2c012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c016:	68a1      	ldr	r1, [r4, #8]
   2c018:	2902      	cmp	r1, #2
   2c01a:	6039      	str	r1, [r7, #0]
   2c01c:	d0ef      	beq.n	2bffe <ip_interface_getaddrinfo+0xd6>
   2c01e:	2a05      	cmp	r2, #5
   2c020:	d003      	beq.n	2c02a <ip_interface_getaddrinfo+0x102>
   2c022:	2a0a      	cmp	r2, #10
   2c024:	bf14      	ite	ne
   2c026:	2201      	movne	r2, #1
   2c028:	2202      	moveq	r2, #2
   2c02a:	61aa      	str	r2, [r5, #24]
   2c02c:	68e2      	ldr	r2, [r4, #12]
   2c02e:	622a      	str	r2, [r5, #32]
   2c030:	68a2      	ldr	r2, [r4, #8]
   2c032:	61ea      	str	r2, [r5, #28]
   2c034:	6822      	ldr	r2, [r4, #0]
   2c036:	616a      	str	r2, [r5, #20]
   2c038:	68aa      	ldr	r2, [r5, #8]
   2c03a:	3210      	adds	r2, #16
   2c03c:	60aa      	str	r2, [r5, #8]
   2c03e:	b12e      	cbz	r6, 2c04c <ip_interface_getaddrinfo+0x124>
   2c040:	6828      	ldr	r0, [r5, #0]
   2c042:	b118      	cbz	r0, 2c04c <ip_interface_getaddrinfo+0x124>
   2c044:	465a      	mov	r2, fp
   2c046:	4631      	mov	r1, r6
   2c048:	f00b f9db 	bl	37402 <memcpy>
   2c04c:	2301      	movs	r3, #1
   2c04e:	f247 010d 	movw	r1, #28685	; 0x700d
   2c052:	4628      	mov	r0, r5
   2c054:	f8ca 3000 	str.w	r3, [sl]
   2c058:	f7fe fd78 	bl	2ab4c <rpc_ip_client_request_send>
   2c05c:	bb10      	cbnz	r0, 2c0a4 <ip_interface_getaddrinfo+0x17c>
   2c05e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c062:	9303      	str	r3, [sp, #12]
   2c064:	4649      	mov	r1, r9
   2c066:	4628      	mov	r0, r5
   2c068:	f7f9 fbd0 	bl	2580c <bsd_os_timedwait>
   2c06c:	f8da 3000 	ldr.w	r3, [sl]
   2c070:	2b01      	cmp	r3, #1
   2c072:	d0f7      	beq.n	2c064 <ip_interface_getaddrinfo+0x13c>
   2c074:	4b28      	ldr	r3, [pc, #160]	; (2c118 <ip_interface_getaddrinfo+0x1f0>)
   2c076:	6818      	ldr	r0, [r3, #0]
   2c078:	bb40      	cbnz	r0, 2c0cc <ip_interface_getaddrinfo+0x1a4>
   2c07a:	4b26      	ldr	r3, [pc, #152]	; (2c114 <ip_interface_getaddrinfo+0x1ec>)
   2c07c:	9a01      	ldr	r2, [sp, #4]
   2c07e:	681b      	ldr	r3, [r3, #0]
   2c080:	6013      	str	r3, [r2, #0]
   2c082:	e7c1      	b.n	2c008 <ip_interface_getaddrinfo+0xe0>
   2c084:	46b3      	mov	fp, r6
   2c086:	e786      	b.n	2bf96 <ip_interface_getaddrinfo+0x6e>
   2c088:	9d03      	ldr	r5, [sp, #12]
   2c08a:	2d00      	cmp	r5, #0
   2c08c:	d1aa      	bne.n	2bfe4 <ip_interface_getaddrinfo+0xbc>
   2c08e:	200c      	movs	r0, #12
   2c090:	2300      	movs	r3, #0
   2c092:	f8ca 3000 	str.w	r3, [sl]
   2c096:	b005      	add	sp, #20
   2c098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c09c:	2016      	movs	r0, #22
   2c09e:	b005      	add	sp, #20
   2c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c0a4:	2023      	movs	r0, #35	; 0x23
   2c0a6:	e7f3      	b.n	2c090 <ip_interface_getaddrinfo+0x168>
   2c0a8:	f240 2002 	movw	r0, #514	; 0x202
   2c0ac:	68d1      	ldr	r1, [r2, #12]
   2c0ae:	4281      	cmp	r1, r0
   2c0b0:	f47f af7b 	bne.w	2bfaa <ip_interface_getaddrinfo+0x82>
   2c0b4:	6991      	ldr	r1, [r2, #24]
   2c0b6:	2900      	cmp	r1, #0
   2c0b8:	f43f af77 	beq.w	2bfaa <ip_interface_getaddrinfo+0x82>
   2c0bc:	6860      	ldr	r0, [r4, #4]
   2c0be:	f002 fc0b 	bl	2e8d8 <pdn_interface_pdn_id_get>
   2c0c2:	1c43      	adds	r3, r0, #1
   2c0c4:	f43f af71 	beq.w	2bfaa <ip_interface_getaddrinfo+0x82>
   2c0c8:	4602      	mov	r2, r0
   2c0ca:	e770      	b.n	2bfae <ip_interface_getaddrinfo+0x86>
   2c0cc:	4b12      	ldr	r3, [pc, #72]	; (2c118 <ip_interface_getaddrinfo+0x1f0>)
   2c0ce:	6818      	ldr	r0, [r3, #0]
   2c0d0:	2800      	cmp	r0, #0
   2c0d2:	d099      	beq.n	2c008 <ip_interface_getaddrinfo+0xe0>
   2c0d4:	e7dc      	b.n	2c090 <ip_interface_getaddrinfo+0x168>
   2c0d6:	4621      	mov	r1, r4
   2c0d8:	2210      	movs	r2, #16
   2c0da:	f105 0014 	add.w	r0, r5, #20
   2c0de:	f00b f9b0 	bl	37442 <memset>
   2c0e2:	e7a9      	b.n	2c038 <ip_interface_getaddrinfo+0x110>
   2c0e4:	202f      	movs	r0, #47	; 0x2f
   2c0e6:	f7f9 fc49 	bl	2597c <bsd_os_errno_set>
   2c0ea:	68aa      	ldr	r2, [r5, #8]
   2c0ec:	3210      	adds	r2, #16
   2c0ee:	60aa      	str	r2, [r5, #8]
   2c0f0:	b916      	cbnz	r6, 2c0f8 <ip_interface_getaddrinfo+0x1d0>
   2c0f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c0f6:	e7cb      	b.n	2c090 <ip_interface_getaddrinfo+0x168>
   2c0f8:	6828      	ldr	r0, [r5, #0]
   2c0fa:	2800      	cmp	r0, #0
   2c0fc:	d0f9      	beq.n	2c0f2 <ip_interface_getaddrinfo+0x1ca>
   2c0fe:	465a      	mov	r2, fp
   2c100:	4631      	mov	r1, r6
   2c102:	f00b f97e 	bl	37402 <memcpy>
   2c106:	e7f4      	b.n	2c0f2 <ip_interface_getaddrinfo+0x1ca>
   2c108:	2002cb98 	.word	0x2002cb98
   2c10c:	2002894a 	.word	0x2002894a
   2c110:	20023cac 	.word	0x20023cac
   2c114:	20023cb8 	.word	0x20023cb8
   2c118:	20023cb0 	.word	0x20023cb0
   2c11c:	20023ca8 	.word	0x20023ca8
   2c120:	20023cb4 	.word	0x20023cb4

0002c124 <ip_interface_freeaddrinfo>:
   2c124:	b538      	push	{r3, r4, r5, lr}
   2c126:	4d0b      	ldr	r5, [pc, #44]	; (2c154 <ip_interface_freeaddrinfo+0x30>)
   2c128:	682b      	ldr	r3, [r5, #0]
   2c12a:	2b02      	cmp	r3, #2
   2c12c:	d000      	beq.n	2c130 <ip_interface_freeaddrinfo+0xc>
   2c12e:	bd38      	pop	{r3, r4, r5, pc}
   2c130:	b150      	cbz	r0, 2c148 <ip_interface_freeaddrinfo+0x24>
   2c132:	4604      	mov	r4, r0
   2c134:	6940      	ldr	r0, [r0, #20]
   2c136:	f004 f94d 	bl	303d4 <nrf_free>
   2c13a:	69a0      	ldr	r0, [r4, #24]
   2c13c:	b108      	cbz	r0, 2c142 <ip_interface_freeaddrinfo+0x1e>
   2c13e:	f004 f949 	bl	303d4 <nrf_free>
   2c142:	4620      	mov	r0, r4
   2c144:	f004 f946 	bl	303d4 <nrf_free>
   2c148:	2300      	movs	r3, #0
   2c14a:	4a03      	ldr	r2, [pc, #12]	; (2c158 <ip_interface_freeaddrinfo+0x34>)
   2c14c:	602b      	str	r3, [r5, #0]
   2c14e:	6013      	str	r3, [r2, #0]
   2c150:	bd38      	pop	{r3, r4, r5, pc}
   2c152:	bf00      	nop
   2c154:	20023cb4 	.word	0x20023cb4
   2c158:	20023cb0 	.word	0x20023cb0

0002c15c <rpc_ip_event_handler>:
   2c15c:	f248 030d 	movw	r3, #32781	; 0x800d
   2c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c164:	4299      	cmp	r1, r3
   2c166:	b089      	sub	sp, #36	; 0x24
   2c168:	4604      	mov	r4, r0
   2c16a:	d05c      	beq.n	2c226 <rpc_ip_event_handler+0xca>
   2c16c:	f248 030f 	movw	r3, #32783	; 0x800f
   2c170:	4299      	cmp	r1, r3
   2c172:	460d      	mov	r5, r1
   2c174:	d045      	beq.n	2c202 <rpc_ip_event_handler+0xa6>
   2c176:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   2c17a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   2c17e:	68c0      	ldr	r0, [r0, #12]
   2c180:	d075      	beq.n	2c26e <rpc_ip_event_handler+0x112>
   2c182:	0c06      	lsrs	r6, r0, #16
   2c184:	4630      	mov	r0, r6
   2c186:	f004 fe23 	bl	30dd0 <interface_socket_from_handle_get>
   2c18a:	4607      	mov	r7, r0
   2c18c:	2800      	cmp	r0, #0
   2c18e:	d059      	beq.n	2c244 <rpc_ip_event_handler+0xe8>
   2c190:	4601      	mov	r1, r0
   2c192:	462b      	mov	r3, r5
   2c194:	4622      	mov	r2, r4
   2c196:	4630      	mov	r0, r6
   2c198:	f7fe fc36 	bl	2aa08 <tls_rpc_ip_event_handler>
   2c19c:	2800      	cmp	r0, #0
   2c19e:	d04d      	beq.n	2c23c <rpc_ip_event_handler+0xe0>
   2c1a0:	f248 0307 	movw	r3, #32775	; 0x8007
   2c1a4:	429d      	cmp	r5, r3
   2c1a6:	d866      	bhi.n	2c276 <rpc_ip_event_handler+0x11a>
   2c1a8:	f248 0306 	movw	r3, #32774	; 0x8006
   2c1ac:	429d      	cmp	r5, r3
   2c1ae:	f080 81e7 	bcs.w	2c580 <rpc_ip_event_handler+0x424>
   2c1b2:	f248 0303 	movw	r3, #32771	; 0x8003
   2c1b6:	429d      	cmp	r5, r3
   2c1b8:	f000 81c5 	beq.w	2c546 <rpc_ip_event_handler+0x3ea>
   2c1bc:	f200 811b 	bhi.w	2c3f6 <rpc_ip_event_handler+0x29a>
   2c1c0:	f248 0301 	movw	r3, #32769	; 0x8001
   2c1c4:	429d      	cmp	r5, r3
   2c1c6:	f000 8154 	beq.w	2c472 <rpc_ip_event_handler+0x316>
   2c1ca:	f248 0302 	movw	r3, #32770	; 0x8002
   2c1ce:	429d      	cmp	r5, r3
   2c1d0:	d138      	bne.n	2c244 <rpc_ip_event_handler+0xe8>
   2c1d2:	683b      	ldr	r3, [r7, #0]
   2c1d4:	0098      	lsls	r0, r3, #2
   2c1d6:	d531      	bpl.n	2c23c <rpc_ip_event_handler+0xe0>
   2c1d8:	683b      	ldr	r3, [r7, #0]
   2c1da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   2c1de:	603b      	str	r3, [r7, #0]
   2c1e0:	6963      	ldr	r3, [r4, #20]
   2c1e2:	2b00      	cmp	r3, #0
   2c1e4:	f000 81ea 	beq.w	2c5bc <rpc_ip_event_handler+0x460>
   2c1e8:	2b10      	cmp	r3, #16
   2c1ea:	bf8e      	itee	hi
   2c1ec:	232d      	movhi	r3, #45	; 0x2d
   2c1ee:	4ab9      	ldrls	r2, [pc, #740]	; (2c4d4 <rpc_ip_event_handler+0x378>)
   2c1f0:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   2c1f4:	607b      	str	r3, [r7, #4]
   2c1f6:	683b      	ldr	r3, [r7, #0]
   2c1f8:	2000      	movs	r0, #0
   2c1fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   2c1fe:	603b      	str	r3, [r7, #0]
   2c200:	e00e      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c202:	6943      	ldr	r3, [r0, #20]
   2c204:	2001      	movs	r0, #1
   2c206:	2b10      	cmp	r3, #16
   2c208:	49b3      	ldr	r1, [pc, #716]	; (2c4d8 <rpc_ip_event_handler+0x37c>)
   2c20a:	bf88      	it	hi
   2c20c:	222d      	movhi	r2, #45	; 0x2d
   2c20e:	7008      	strb	r0, [r1, #0]
   2c210:	f04f 0000 	mov.w	r0, #0
   2c214:	bf9c      	itt	ls
   2c216:	4aaf      	ldrls	r2, [pc, #700]	; (2c4d4 <rpc_ip_event_handler+0x378>)
   2c218:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   2c21c:	4baf      	ldr	r3, [pc, #700]	; (2c4dc <rpc_ip_event_handler+0x380>)
   2c21e:	601a      	str	r2, [r3, #0]
   2c220:	b009      	add	sp, #36	; 0x24
   2c222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c226:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 2c4f0 <rpc_ip_event_handler+0x394>
   2c22a:	6807      	ldr	r7, [r0, #0]
   2c22c:	f8da 2000 	ldr.w	r2, [sl]
   2c230:	2a01      	cmp	r2, #1
   2c232:	d00b      	beq.n	2c24c <rpc_ip_event_handler+0xf0>
   2c234:	b117      	cbz	r7, 2c23c <rpc_ip_event_handler+0xe0>
   2c236:	4638      	mov	r0, r7
   2c238:	f7fe fca6 	bl	2ab88 <rpc_ip_client_data_free>
   2c23c:	2000      	movs	r0, #0
   2c23e:	b009      	add	sp, #36	; 0x24
   2c240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c244:	6820      	ldr	r0, [r4, #0]
   2c246:	2800      	cmp	r0, #0
   2c248:	d1f6      	bne.n	2c238 <rpc_ip_event_handler+0xdc>
   2c24a:	e7f7      	b.n	2c23c <rpc_ip_event_handler+0xe0>
   2c24c:	6942      	ldr	r2, [r0, #20]
   2c24e:	2a00      	cmp	r2, #0
   2c250:	d045      	beq.n	2c2de <rpc_ip_event_handler+0x182>
   2c252:	2a10      	cmp	r2, #16
   2c254:	bf8e      	itee	hi
   2c256:	222d      	movhi	r2, #45	; 0x2d
   2c258:	499e      	ldrls	r1, [pc, #632]	; (2c4d4 <rpc_ip_event_handler+0x378>)
   2c25a:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   2c25e:	49a0      	ldr	r1, [pc, #640]	; (2c4e0 <rpc_ip_event_handler+0x384>)
   2c260:	600a      	str	r2, [r1, #0]
   2c262:	2202      	movs	r2, #2
   2c264:	f8ca 2000 	str.w	r2, [sl]
   2c268:	2f00      	cmp	r7, #0
   2c26a:	d1e4      	bne.n	2c236 <rpc_ip_event_handler+0xda>
   2c26c:	e7e6      	b.n	2c23c <rpc_ip_event_handler+0xe0>
   2c26e:	f004 fd5d 	bl	30d2c <interface_from_internal_id_search>
   2c272:	4606      	mov	r6, r0
   2c274:	e786      	b.n	2c184 <rpc_ip_event_handler+0x28>
   2c276:	f248 030c 	movw	r3, #32780	; 0x800c
   2c27a:	429d      	cmp	r5, r3
   2c27c:	f000 813c 	beq.w	2c4f8 <rpc_ip_event_handler+0x39c>
   2c280:	f240 80d5 	bls.w	2c42e <rpc_ip_event_handler+0x2d2>
   2c284:	f249 0302 	movw	r3, #36866	; 0x9002
   2c288:	429d      	cmp	r5, r3
   2c28a:	f000 811d 	beq.w	2c4c8 <rpc_ip_event_handler+0x36c>
   2c28e:	f249 0303 	movw	r3, #36867	; 0x9003
   2c292:	429d      	cmp	r5, r3
   2c294:	f000 80f9 	beq.w	2c48a <rpc_ip_event_handler+0x32e>
   2c298:	f249 0301 	movw	r3, #36865	; 0x9001
   2c29c:	429d      	cmp	r5, r3
   2c29e:	d1d1      	bne.n	2c244 <rpc_ip_event_handler+0xe8>
   2c2a0:	683d      	ldr	r5, [r7, #0]
   2c2a2:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   2c2a6:	f000 8184 	beq.w	2c5b2 <rpc_ip_event_handler+0x456>
   2c2aa:	68a3      	ldr	r3, [r4, #8]
   2c2ac:	2b04      	cmp	r3, #4
   2c2ae:	f200 81af 	bhi.w	2c610 <rpc_ip_event_handler+0x4b4>
   2c2b2:	2500      	movs	r5, #0
   2c2b4:	462e      	mov	r6, r5
   2c2b6:	6821      	ldr	r1, [r4, #0]
   2c2b8:	6862      	ldr	r2, [r4, #4]
   2c2ba:	e9cd 6506 	strd	r6, r5, [sp, #24]
   2c2be:	e9cd 1204 	strd	r1, r2, [sp, #16]
   2c2c2:	69f8      	ldr	r0, [r7, #28]
   2c2c4:	a904      	add	r1, sp, #16
   2c2c6:	6803      	ldr	r3, [r0, #0]
   2c2c8:	685b      	ldr	r3, [r3, #4]
   2c2ca:	4798      	blx	r3
   2c2cc:	3001      	adds	r0, #1
   2c2ce:	f000 818e 	beq.w	2c5ee <rpc_ip_event_handler+0x492>
   2c2d2:	683b      	ldr	r3, [r7, #0]
   2c2d4:	2000      	movs	r0, #0
   2c2d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2c2da:	603b      	str	r3, [r7, #0]
   2c2dc:	e7a0      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c2de:	6985      	ldr	r5, [r0, #24]
   2c2e0:	016b      	lsls	r3, r5, #5
   2c2e2:	4618      	mov	r0, r3
   2c2e4:	9303      	str	r3, [sp, #12]
   2c2e6:	f004 f86b 	bl	303c0 <nrf_malloc>
   2c2ea:	9002      	str	r0, [sp, #8]
   2c2ec:	2800      	cmp	r0, #0
   2c2ee:	d078      	beq.n	2c3e2 <rpc_ip_event_handler+0x286>
   2c2f0:	00ee      	lsls	r6, r5, #3
   2c2f2:	1970      	adds	r0, r6, r5
   2c2f4:	0080      	lsls	r0, r0, #2
   2c2f6:	f004 f863 	bl	303c0 <nrf_malloc>
   2c2fa:	2800      	cmp	r0, #0
   2c2fc:	d073      	beq.n	2c3e6 <rpc_ip_event_handler+0x28a>
   2c2fe:	2d00      	cmp	r5, #0
   2c300:	d074      	beq.n	2c3ec <rpc_ip_event_handler+0x290>
   2c302:	3610      	adds	r6, #16
   2c304:	1983      	adds	r3, r0, r6
   2c306:	9301      	str	r3, [sp, #4]
   2c308:	9b02      	ldr	r3, [sp, #8]
   2c30a:	2204      	movs	r2, #4
   2c30c:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 2c4f4 <rpc_ip_event_handler+0x398>
   2c310:	f100 0810 	add.w	r8, r0, #16
   2c314:	f103 0520 	add.w	r5, r3, #32
   2c318:	e013      	b.n	2c342 <rpc_ip_event_handler+0x1e6>
   2c31a:	464a      	mov	r2, r9
   2c31c:	f00b f871 	bl	37402 <memcpy>
   2c320:	2100      	movs	r1, #0
   2c322:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2c326:	f108 0808 	add.w	r8, r8, #8
   2c32a:	eb09 0206 	add.w	r2, r9, r6
   2c32e:	f803 1009 	strb.w	r1, [r3, r9]
   2c332:	9b01      	ldr	r3, [sp, #4]
   2c334:	f845 5c04 	str.w	r5, [r5, #-4]
   2c338:	4598      	cmp	r8, r3
   2c33a:	f105 0520 	add.w	r5, r5, #32
   2c33e:	f000 8090 	beq.w	2c462 <rpc_ip_event_handler+0x306>
   2c342:	58bb      	ldr	r3, [r7, r2]
   2c344:	18b9      	adds	r1, r7, r2
   2c346:	f845 3c20 	str.w	r3, [r5, #-32]
   2c34a:	684b      	ldr	r3, [r1, #4]
   2c34c:	f8db 0000 	ldr.w	r0, [fp]
   2c350:	2b02      	cmp	r3, #2
   2c352:	bf14      	ite	ne
   2c354:	2602      	movne	r6, #2
   2c356:	260a      	moveq	r6, #10
   2c358:	4b62      	ldr	r3, [pc, #392]	; (2c4e4 <rpc_ip_event_handler+0x388>)
   2c35a:	e945 6007 	strd	r6, r0, [r5, #-28]
   2c35e:	681b      	ldr	r3, [r3, #0]
   2c360:	f102 0614 	add.w	r6, r2, #20
   2c364:	f845 3c14 	str.w	r3, [r5, #-20]
   2c368:	8a08      	ldrh	r0, [r1, #16]
   2c36a:	f1a8 0310 	sub.w	r3, r8, #16
   2c36e:	f845 0c10 	str.w	r0, [r5, #-16]
   2c372:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   2c376:	f845 3c0c 	str.w	r3, [r5, #-12]
   2c37a:	4b5b      	ldr	r3, [pc, #364]	; (2c4e8 <rpc_ip_event_handler+0x38c>)
   2c37c:	2804      	cmp	r0, #4
   2c37e:	eb07 0106 	add.w	r1, r7, r6
   2c382:	881b      	ldrh	r3, [r3, #0]
   2c384:	d01e      	beq.n	2c3c4 <rpc_ip_event_handler+0x268>
   2c386:	220a      	movs	r2, #10
   2c388:	f848 2c0c 	str.w	r2, [r8, #-12]
   2c38c:	f04f 0224 	mov.w	r2, #36	; 0x24
   2c390:	f828 3c08 	strh.w	r3, [r8, #-8]
   2c394:	f808 2c10 	strb.w	r2, [r8, #-16]
   2c398:	f855 2c10 	ldr.w	r2, [r5, #-16]
   2c39c:	4640      	mov	r0, r8
   2c39e:	f00b f830 	bl	37402 <memcpy>
   2c3a2:	f855 3c10 	ldr.w	r3, [r5, #-16]
   2c3a6:	f109 0001 	add.w	r0, r9, #1
   2c3aa:	441e      	add	r6, r3
   2c3ac:	f004 f808 	bl	303c0 <nrf_malloc>
   2c3b0:	19b9      	adds	r1, r7, r6
   2c3b2:	eb09 0206 	add.w	r2, r9, r6
   2c3b6:	f845 0c08 	str.w	r0, [r5, #-8]
   2c3ba:	2800      	cmp	r0, #0
   2c3bc:	d1ad      	bne.n	2c31a <rpc_ip_event_handler+0x1be>
   2c3be:	f108 0808 	add.w	r8, r8, #8
   2c3c2:	e7b6      	b.n	2c332 <rpc_ip_event_handler+0x1d6>
   2c3c4:	2210      	movs	r2, #16
   2c3c6:	2002      	movs	r0, #2
   2c3c8:	f828 3c08 	strh.w	r3, [r8, #-8]
   2c3cc:	f848 0c0c 	str.w	r0, [r8, #-12]
   2c3d0:	f808 2c10 	strb.w	r2, [r8, #-16]
   2c3d4:	f855 2c10 	ldr.w	r2, [r5, #-16]
   2c3d8:	f1a8 0004 	sub.w	r0, r8, #4
   2c3dc:	f00b f811 	bl	37402 <memcpy>
   2c3e0:	e7df      	b.n	2c3a2 <rpc_ip_event_handler+0x246>
   2c3e2:	f003 fff7 	bl	303d4 <nrf_free>
   2c3e6:	210c      	movs	r1, #12
   2c3e8:	4a3d      	ldr	r2, [pc, #244]	; (2c4e0 <rpc_ip_event_handler+0x384>)
   2c3ea:	6011      	str	r1, [r2, #0]
   2c3ec:	9b02      	ldr	r3, [sp, #8]
   2c3ee:	4a3f      	ldr	r2, [pc, #252]	; (2c4ec <rpc_ip_event_handler+0x390>)
   2c3f0:	6827      	ldr	r7, [r4, #0]
   2c3f2:	6013      	str	r3, [r2, #0]
   2c3f4:	e735      	b.n	2c262 <rpc_ip_event_handler+0x106>
   2c3f6:	f248 0304 	movw	r3, #32772	; 0x8004
   2c3fa:	429d      	cmp	r5, r3
   2c3fc:	f000 808f 	beq.w	2c51e <rpc_ip_event_handler+0x3c2>
   2c400:	f248 0305 	movw	r3, #32773	; 0x8005
   2c404:	429d      	cmp	r5, r3
   2c406:	f47f af1d 	bne.w	2c244 <rpc_ip_event_handler+0xe8>
   2c40a:	683b      	ldr	r3, [r7, #0]
   2c40c:	b29b      	uxth	r3, r3
   2c40e:	2b03      	cmp	r3, #3
   2c410:	f47f af14 	bne.w	2c23c <rpc_ip_event_handler+0xe0>
   2c414:	6963      	ldr	r3, [r4, #20]
   2c416:	2b00      	cmp	r3, #0
   2c418:	f000 80eb 	beq.w	2c5f2 <rpc_ip_event_handler+0x496>
   2c41c:	2b10      	cmp	r3, #16
   2c41e:	f200 80bd 	bhi.w	2c59c <rpc_ip_event_handler+0x440>
   2c422:	4a2c      	ldr	r2, [pc, #176]	; (2c4d4 <rpc_ip_event_handler+0x378>)
   2c424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2c428:	607b      	str	r3, [r7, #4]
   2c42a:	2000      	movs	r0, #0
   2c42c:	e6f8      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c42e:	f248 0308 	movw	r3, #32776	; 0x8008
   2c432:	429d      	cmp	r5, r3
   2c434:	f000 8094 	beq.w	2c560 <rpc_ip_event_handler+0x404>
   2c438:	f248 0309 	movw	r3, #32777	; 0x8009
   2c43c:	429d      	cmp	r5, r3
   2c43e:	f47f af01 	bne.w	2c244 <rpc_ip_event_handler+0xe8>
   2c442:	683b      	ldr	r3, [r7, #0]
   2c444:	b29b      	uxth	r3, r3
   2c446:	2b0d      	cmp	r3, #13
   2c448:	f47f aef8 	bne.w	2c23c <rpc_ip_event_handler+0xe0>
   2c44c:	6960      	ldr	r0, [r4, #20]
   2c44e:	2800      	cmp	r0, #0
   2c450:	f000 80d7 	beq.w	2c602 <rpc_ip_event_handler+0x4a6>
   2c454:	2810      	cmp	r0, #16
   2c456:	f200 80a1 	bhi.w	2c59c <rpc_ip_event_handler+0x440>
   2c45a:	4b1e      	ldr	r3, [pc, #120]	; (2c4d4 <rpc_ip_event_handler+0x378>)
   2c45c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2c460:	e7e2      	b.n	2c428 <rpc_ip_event_handler+0x2cc>
   2c462:	2100      	movs	r1, #0
   2c464:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   2c468:	4403      	add	r3, r0
   2c46a:	f843 1c04 	str.w	r1, [r3, #-4]
   2c46e:	4603      	mov	r3, r0
   2c470:	e7bd      	b.n	2c3ee <rpc_ip_event_handler+0x292>
   2c472:	683b      	ldr	r3, [r7, #0]
   2c474:	2b01      	cmp	r3, #1
   2c476:	f47f aee1 	bne.w	2c23c <rpc_ip_event_handler+0xe0>
   2c47a:	6960      	ldr	r0, [r4, #20]
   2c47c:	2800      	cmp	r0, #0
   2c47e:	d1e9      	bne.n	2c454 <rpc_ip_event_handler+0x2f8>
   2c480:	2302      	movs	r3, #2
   2c482:	603b      	str	r3, [r7, #0]
   2c484:	69a3      	ldr	r3, [r4, #24]
   2c486:	61bb      	str	r3, [r7, #24]
   2c488:	e6ca      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c48a:	683b      	ldr	r3, [r7, #0]
   2c48c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2c490:	603b      	str	r3, [r7, #0]
   2c492:	683b      	ldr	r3, [r7, #0]
   2c494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2c498:	603b      	str	r3, [r7, #0]
   2c49a:	683b      	ldr	r3, [r7, #0]
   2c49c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2c4a0:	603b      	str	r3, [r7, #0]
   2c4a2:	683b      	ldr	r3, [r7, #0]
   2c4a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2c4a8:	603b      	str	r3, [r7, #0]
   2c4aa:	6923      	ldr	r3, [r4, #16]
   2c4ac:	2b6c      	cmp	r3, #108	; 0x6c
   2c4ae:	d077      	beq.n	2c5a0 <rpc_ip_event_handler+0x444>
   2c4b0:	2b10      	cmp	r3, #16
   2c4b2:	bf8c      	ite	hi
   2c4b4:	232d      	movhi	r3, #45	; 0x2d
   2c4b6:	4a07      	ldrls	r2, [pc, #28]	; (2c4d4 <rpc_ip_event_handler+0x378>)
   2c4b8:	f04f 0000 	mov.w	r0, #0
   2c4bc:	bf98      	it	ls
   2c4be:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   2c4c2:	607b      	str	r3, [r7, #4]
   2c4c4:	60bb      	str	r3, [r7, #8]
   2c4c6:	e6ab      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c4c8:	683b      	ldr	r3, [r7, #0]
   2c4ca:	b29b      	uxth	r3, r3
   2c4cc:	2b07      	cmp	r3, #7
   2c4ce:	f47f aeb5 	bne.w	2c23c <rpc_ip_event_handler+0xe0>
   2c4d2:	e6fe      	b.n	2c2d2 <rpc_ip_event_handler+0x176>
   2c4d4:	00038b9c 	.word	0x00038b9c
   2c4d8:	2002cb99 	.word	0x2002cb99
   2c4dc:	20023ce0 	.word	0x20023ce0
   2c4e0:	20023cb0 	.word	0x20023cb0
   2c4e4:	20023ca8 	.word	0x20023ca8
   2c4e8:	2002894a 	.word	0x2002894a
   2c4ec:	20023cb8 	.word	0x20023cb8
   2c4f0:	20023cb4 	.word	0x20023cb4
   2c4f4:	20023cac 	.word	0x20023cac
   2c4f8:	683b      	ldr	r3, [r7, #0]
   2c4fa:	b29b      	uxth	r3, r3
   2c4fc:	2b08      	cmp	r3, #8
   2c4fe:	f47f ae9d 	bne.w	2c23c <rpc_ip_event_handler+0xe0>
   2c502:	6963      	ldr	r3, [r4, #20]
   2c504:	2b00      	cmp	r3, #0
   2c506:	d189      	bne.n	2c41c <rpc_ip_event_handler+0x2c0>
   2c508:	4b5e      	ldr	r3, [pc, #376]	; (2c684 <rpc_ip_event_handler+0x528>)
   2c50a:	2001      	movs	r0, #1
   2c50c:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   2c510:	683b      	ldr	r3, [r7, #0]
   2c512:	0c1b      	lsrs	r3, r3, #16
   2c514:	041b      	lsls	r3, r3, #16
   2c516:	f043 0309 	orr.w	r3, r3, #9
   2c51a:	603b      	str	r3, [r7, #0]
   2c51c:	e680      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c51e:	683b      	ldr	r3, [r7, #0]
   2c520:	01db      	lsls	r3, r3, #7
   2c522:	f57f ae8b 	bpl.w	2c23c <rpc_ip_event_handler+0xe0>
   2c526:	6963      	ldr	r3, [r4, #20]
   2c528:	2b00      	cmp	r3, #0
   2c52a:	f47f af77 	bne.w	2c41c <rpc_ip_event_handler+0x2c0>
   2c52e:	6823      	ldr	r3, [r4, #0]
   2c530:	2b00      	cmp	r3, #0
   2c532:	d071      	beq.n	2c618 <rpc_ip_event_handler+0x4bc>
   2c534:	2001      	movs	r0, #1
   2c536:	4b53      	ldr	r3, [pc, #332]	; (2c684 <rpc_ip_event_handler+0x528>)
   2c538:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   2c53c:	683b      	ldr	r3, [r7, #0]
   2c53e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   2c542:	603b      	str	r3, [r7, #0]
   2c544:	e66c      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c546:	683b      	ldr	r3, [r7, #0]
   2c548:	025a      	lsls	r2, r3, #9
   2c54a:	f57f ae77 	bpl.w	2c23c <rpc_ip_event_handler+0xe0>
   2c54e:	6960      	ldr	r0, [r4, #20]
   2c550:	2800      	cmp	r0, #0
   2c552:	f47f af7f 	bne.w	2c454 <rpc_ip_event_handler+0x2f8>
   2c556:	683b      	ldr	r3, [r7, #0]
   2c558:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2c55c:	603b      	str	r3, [r7, #0]
   2c55e:	e65f      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c560:	683b      	ldr	r3, [r7, #0]
   2c562:	b29b      	uxth	r3, r3
   2c564:	2b06      	cmp	r3, #6
   2c566:	f47f ae69 	bne.w	2c23c <rpc_ip_event_handler+0xe0>
   2c56a:	6960      	ldr	r0, [r4, #20]
   2c56c:	2800      	cmp	r0, #0
   2c56e:	f47f af71 	bne.w	2c454 <rpc_ip_event_handler+0x2f8>
   2c572:	683b      	ldr	r3, [r7, #0]
   2c574:	0c1b      	lsrs	r3, r3, #16
   2c576:	041b      	lsls	r3, r3, #16
   2c578:	f043 0307 	orr.w	r3, r3, #7
   2c57c:	603b      	str	r3, [r7, #0]
   2c57e:	e64f      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c580:	683b      	ldr	r3, [r7, #0]
   2c582:	0299      	lsls	r1, r3, #10
   2c584:	f57f ae5a 	bpl.w	2c23c <rpc_ip_event_handler+0xe0>
   2c588:	6963      	ldr	r3, [r4, #20]
   2c58a:	b33b      	cbz	r3, 2c5dc <rpc_ip_event_handler+0x480>
   2c58c:	2b6b      	cmp	r3, #107	; 0x6b
   2c58e:	f47f ae2b 	bne.w	2c1e8 <rpc_ip_event_handler+0x8c>
   2c592:	693b      	ldr	r3, [r7, #16]
   2c594:	2b01      	cmp	r3, #1
   2c596:	d041      	beq.n	2c61c <rpc_ip_event_handler+0x4c0>
   2c598:	230c      	movs	r3, #12
   2c59a:	e62b      	b.n	2c1f4 <rpc_ip_event_handler+0x98>
   2c59c:	232d      	movs	r3, #45	; 0x2d
   2c59e:	e743      	b.n	2c428 <rpc_ip_event_handler+0x2cc>
   2c5a0:	2239      	movs	r2, #57	; 0x39
   2c5a2:	683b      	ldr	r3, [r7, #0]
   2c5a4:	2000      	movs	r0, #0
   2c5a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   2c5aa:	603b      	str	r3, [r7, #0]
   2c5ac:	607a      	str	r2, [r7, #4]
   2c5ae:	60ba      	str	r2, [r7, #8]
   2c5b0:	e636      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c5b2:	6820      	ldr	r0, [r4, #0]
   2c5b4:	f7fe fae8 	bl	2ab88 <rpc_ip_client_data_free>
   2c5b8:	4628      	mov	r0, r5
   2c5ba:	e631      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c5bc:	683b      	ldr	r3, [r7, #0]
   2c5be:	2000      	movs	r0, #0
   2c5c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2c5c4:	603b      	str	r3, [r7, #0]
   2c5c6:	683b      	ldr	r3, [r7, #0]
   2c5c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2c5cc:	603b      	str	r3, [r7, #0]
   2c5ce:	683b      	ldr	r3, [r7, #0]
   2c5d0:	0c1b      	lsrs	r3, r3, #16
   2c5d2:	041b      	lsls	r3, r3, #16
   2c5d4:	f043 0305 	orr.w	r3, r3, #5
   2c5d8:	603b      	str	r3, [r7, #0]
   2c5da:	e621      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c5dc:	683b      	ldr	r3, [r7, #0]
   2c5de:	4a29      	ldr	r2, [pc, #164]	; (2c684 <rpc_ip_event_handler+0x528>)
   2c5e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2c5e4:	603b      	str	r3, [r7, #0]
   2c5e6:	2001      	movs	r0, #1
   2c5e8:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   2c5ec:	e618      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c5ee:	2002      	movs	r0, #2
   2c5f0:	e616      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c5f2:	683b      	ldr	r3, [r7, #0]
   2c5f4:	2000      	movs	r0, #0
   2c5f6:	0c1b      	lsrs	r3, r3, #16
   2c5f8:	041b      	lsls	r3, r3, #16
   2c5fa:	f043 0304 	orr.w	r3, r3, #4
   2c5fe:	603b      	str	r3, [r7, #0]
   2c600:	e60e      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c602:	683b      	ldr	r3, [r7, #0]
   2c604:	0c1b      	lsrs	r3, r3, #16
   2c606:	041b      	lsls	r3, r3, #16
   2c608:	f043 030e 	orr.w	r3, r3, #14
   2c60c:	603b      	str	r3, [r7, #0]
   2c60e:	e607      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c610:	8a65      	ldrh	r5, [r4, #18]
   2c612:	b95d      	cbnz	r5, 2c62c <rpc_ip_event_handler+0x4d0>
   2c614:	462e      	mov	r6, r5
   2c616:	e64e      	b.n	2c2b6 <rpc_ip_event_handler+0x15a>
   2c618:	2000      	movs	r0, #0
   2c61a:	e78f      	b.n	2c53c <rpc_ip_event_handler+0x3e0>
   2c61c:	220c      	movs	r2, #12
   2c61e:	683b      	ldr	r3, [r7, #0]
   2c620:	2000      	movs	r0, #0
   2c622:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   2c626:	603b      	str	r3, [r7, #0]
   2c628:	607a      	str	r2, [r7, #4]
   2c62a:	e5f9      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c62c:	2024      	movs	r0, #36	; 0x24
   2c62e:	f003 fec7 	bl	303c0 <nrf_malloc>
   2c632:	4606      	mov	r6, r0
   2c634:	2800      	cmp	r0, #0
   2c636:	d0da      	beq.n	2c5ee <rpc_ip_event_handler+0x492>
   2c638:	8a62      	ldrh	r2, [r4, #18]
   2c63a:	2a10      	cmp	r2, #16
   2c63c:	d009      	beq.n	2c652 <rpc_ip_event_handler+0x4f6>
   2c63e:	2a04      	cmp	r2, #4
   2c640:	d013      	beq.n	2c66a <rpc_ip_event_handler+0x50e>
   2c642:	6820      	ldr	r0, [r4, #0]
   2c644:	f7fe faa0 	bl	2ab88 <rpc_ip_client_data_free>
   2c648:	4630      	mov	r0, r6
   2c64a:	f003 fec3 	bl	303d4 <nrf_free>
   2c64e:	2000      	movs	r0, #0
   2c650:	e5e6      	b.n	2c220 <rpc_ip_event_handler+0xc4>
   2c652:	230a      	movs	r3, #10
   2c654:	2524      	movs	r5, #36	; 0x24
   2c656:	6043      	str	r3, [r0, #4]
   2c658:	7005      	strb	r5, [r0, #0]
   2c65a:	8a23      	ldrh	r3, [r4, #16]
   2c65c:	f104 0114 	add.w	r1, r4, #20
   2c660:	8103      	strh	r3, [r0, #8]
   2c662:	3010      	adds	r0, #16
   2c664:	f00a fecd 	bl	37402 <memcpy>
   2c668:	e625      	b.n	2c2b6 <rpc_ip_event_handler+0x15a>
   2c66a:	2302      	movs	r3, #2
   2c66c:	2510      	movs	r5, #16
   2c66e:	6043      	str	r3, [r0, #4]
   2c670:	7005      	strb	r5, [r0, #0]
   2c672:	8a23      	ldrh	r3, [r4, #16]
   2c674:	f104 0114 	add.w	r1, r4, #20
   2c678:	8103      	strh	r3, [r0, #8]
   2c67a:	300c      	adds	r0, #12
   2c67c:	f00a fec1 	bl	37402 <memcpy>
   2c680:	e619      	b.n	2c2b6 <rpc_ip_event_handler+0x15a>
   2c682:	bf00      	nop
   2c684:	20023cbc 	.word	0x20023cbc

0002c688 <rpc_handle_ctrl_message>:
   2c688:	2902      	cmp	r1, #2
   2c68a:	b510      	push	{r4, lr}
   2c68c:	4604      	mov	r4, r0
   2c68e:	d00c      	beq.n	2c6aa <rpc_handle_ctrl_message+0x22>
   2c690:	2904      	cmp	r1, #4
   2c692:	d008      	beq.n	2c6a6 <rpc_handle_ctrl_message+0x1e>
   2c694:	2901      	cmp	r1, #1
   2c696:	d006      	beq.n	2c6a6 <rpc_handle_ctrl_message+0x1e>
   2c698:	6880      	ldr	r0, [r0, #8]
   2c69a:	b108      	cbz	r0, 2c6a0 <rpc_handle_ctrl_message+0x18>
   2c69c:	f7fc fd32 	bl	29104 <rpc_transport_data_free>
   2c6a0:	4620      	mov	r0, r4
   2c6a2:	f7fc fd2d 	bl	29100 <rpc_transport_rpc_free>
   2c6a6:	2000      	movs	r0, #0
   2c6a8:	bd10      	pop	{r4, pc}
   2c6aa:	6880      	ldr	r0, [r0, #8]
   2c6ac:	2800      	cmp	r0, #0
   2c6ae:	d0fa      	beq.n	2c6a6 <rpc_handle_ctrl_message+0x1e>
   2c6b0:	f7fc fd28 	bl	29104 <rpc_transport_data_free>
   2c6b4:	2000      	movs	r0, #0
   2c6b6:	bd10      	pop	{r4, pc}

0002c6b8 <rpc_handle_data_message>:
   2c6b8:	4b23      	ldr	r3, [pc, #140]	; (2c748 <rpc_handle_data_message+0x90>)
   2c6ba:	6802      	ldr	r2, [r0, #0]
   2c6bc:	8819      	ldrh	r1, [r3, #0]
   2c6be:	b292      	uxth	r2, r2
   2c6c0:	4291      	cmp	r1, r2
   2c6c2:	d027      	beq.n	2c714 <rpc_handle_data_message+0x5c>
   2c6c4:	8a19      	ldrh	r1, [r3, #16]
   2c6c6:	4291      	cmp	r1, r2
   2c6c8:	d02a      	beq.n	2c720 <rpc_handle_data_message+0x68>
   2c6ca:	8c19      	ldrh	r1, [r3, #32]
   2c6cc:	4291      	cmp	r1, r2
   2c6ce:	d02b      	beq.n	2c728 <rpc_handle_data_message+0x70>
   2c6d0:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   2c6d2:	4291      	cmp	r1, r2
   2c6d4:	d02a      	beq.n	2c72c <rpc_handle_data_message+0x74>
   2c6d6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   2c6da:	4291      	cmp	r1, r2
   2c6dc:	d028      	beq.n	2c730 <rpc_handle_data_message+0x78>
   2c6de:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   2c6e2:	4291      	cmp	r1, r2
   2c6e4:	d026      	beq.n	2c734 <rpc_handle_data_message+0x7c>
   2c6e6:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   2c6ea:	4291      	cmp	r1, r2
   2c6ec:	d026      	beq.n	2c73c <rpc_handle_data_message+0x84>
   2c6ee:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   2c6f2:	4291      	cmp	r1, r2
   2c6f4:	d024      	beq.n	2c740 <rpc_handle_data_message+0x88>
   2c6f6:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   2c6fa:	4291      	cmp	r1, r2
   2c6fc:	d01c      	beq.n	2c738 <rpc_handle_data_message+0x80>
   2c6fe:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   2c702:	4291      	cmp	r1, r2
   2c704:	d01e      	beq.n	2c744 <rpc_handle_data_message+0x8c>
   2c706:	6880      	ldr	r0, [r0, #8]
   2c708:	b160      	cbz	r0, 2c724 <rpc_handle_data_message+0x6c>
   2c70a:	b510      	push	{r4, lr}
   2c70c:	f7fc fcfa 	bl	29104 <rpc_transport_data_free>
   2c710:	2000      	movs	r0, #0
   2c712:	bd10      	pop	{r4, pc}
   2c714:	2200      	movs	r2, #0
   2c716:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2c71a:	685a      	ldr	r2, [r3, #4]
   2c71c:	68d9      	ldr	r1, [r3, #12]
   2c71e:	4710      	bx	r2
   2c720:	2201      	movs	r2, #1
   2c722:	e7f8      	b.n	2c716 <rpc_handle_data_message+0x5e>
   2c724:	2000      	movs	r0, #0
   2c726:	4770      	bx	lr
   2c728:	2202      	movs	r2, #2
   2c72a:	e7f4      	b.n	2c716 <rpc_handle_data_message+0x5e>
   2c72c:	2203      	movs	r2, #3
   2c72e:	e7f2      	b.n	2c716 <rpc_handle_data_message+0x5e>
   2c730:	2204      	movs	r2, #4
   2c732:	e7f0      	b.n	2c716 <rpc_handle_data_message+0x5e>
   2c734:	2205      	movs	r2, #5
   2c736:	e7ee      	b.n	2c716 <rpc_handle_data_message+0x5e>
   2c738:	2208      	movs	r2, #8
   2c73a:	e7ec      	b.n	2c716 <rpc_handle_data_message+0x5e>
   2c73c:	2206      	movs	r2, #6
   2c73e:	e7ea      	b.n	2c716 <rpc_handle_data_message+0x5e>
   2c740:	2207      	movs	r2, #7
   2c742:	e7e8      	b.n	2c716 <rpc_handle_data_message+0x5e>
   2c744:	2209      	movs	r2, #9
   2c746:	e7e6      	b.n	2c716 <rpc_handle_data_message+0x5e>
   2c748:	20023ce4 	.word	0x20023ce4

0002c74c <rpc_framework_init>:
   2c74c:	b508      	push	{r3, lr}
   2c74e:	22a0      	movs	r2, #160	; 0xa0
   2c750:	2100      	movs	r1, #0
   2c752:	4802      	ldr	r0, [pc, #8]	; (2c75c <rpc_framework_init+0x10>)
   2c754:	f00a fe75 	bl	37442 <memset>
   2c758:	2000      	movs	r0, #0
   2c75a:	bd08      	pop	{r3, pc}
   2c75c:	20023ce4 	.word	0x20023ce4

0002c760 <rpc_client_register>:
   2c760:	8803      	ldrh	r3, [r0, #0]
   2c762:	2b00      	cmp	r3, #0
   2c764:	d045      	beq.n	2c7f2 <rpc_client_register+0x92>
   2c766:	6842      	ldr	r2, [r0, #4]
   2c768:	4601      	mov	r1, r0
   2c76a:	2a00      	cmp	r2, #0
   2c76c:	d050      	beq.n	2c810 <rpc_client_register+0xb0>
   2c76e:	4a30      	ldr	r2, [pc, #192]	; (2c830 <rpc_client_register+0xd0>)
   2c770:	8810      	ldrh	r0, [r2, #0]
   2c772:	4283      	cmp	r3, r0
   2c774:	d03d      	beq.n	2c7f2 <rpc_client_register+0x92>
   2c776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c77a:	8a14      	ldrh	r4, [r2, #16]
   2c77c:	42a3      	cmp	r3, r4
   2c77e:	d035      	beq.n	2c7ec <rpc_client_register+0x8c>
   2c780:	8c15      	ldrh	r5, [r2, #32]
   2c782:	42ab      	cmp	r3, r5
   2c784:	d032      	beq.n	2c7ec <rpc_client_register+0x8c>
   2c786:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   2c788:	42b3      	cmp	r3, r6
   2c78a:	d02f      	beq.n	2c7ec <rpc_client_register+0x8c>
   2c78c:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   2c790:	42bb      	cmp	r3, r7
   2c792:	d02b      	beq.n	2c7ec <rpc_client_register+0x8c>
   2c794:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   2c798:	4563      	cmp	r3, ip
   2c79a:	d027      	beq.n	2c7ec <rpc_client_register+0x8c>
   2c79c:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   2c7a0:	4573      	cmp	r3, lr
   2c7a2:	d023      	beq.n	2c7ec <rpc_client_register+0x8c>
   2c7a4:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   2c7a8:	4543      	cmp	r3, r8
   2c7aa:	d01f      	beq.n	2c7ec <rpc_client_register+0x8c>
   2c7ac:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   2c7b0:	454b      	cmp	r3, r9
   2c7b2:	d01b      	beq.n	2c7ec <rpc_client_register+0x8c>
   2c7b4:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   2c7b8:	4553      	cmp	r3, sl
   2c7ba:	d017      	beq.n	2c7ec <rpc_client_register+0x8c>
   2c7bc:	b1e0      	cbz	r0, 2c7f8 <rpc_client_register+0x98>
   2c7be:	b35c      	cbz	r4, 2c818 <rpc_client_register+0xb8>
   2c7c0:	b365      	cbz	r5, 2c81c <rpc_client_register+0xbc>
   2c7c2:	b36e      	cbz	r6, 2c820 <rpc_client_register+0xc0>
   2c7c4:	b377      	cbz	r7, 2c824 <rpc_client_register+0xc4>
   2c7c6:	f1bc 0f00 	cmp.w	ip, #0
   2c7ca:	d02d      	beq.n	2c828 <rpc_client_register+0xc8>
   2c7cc:	f1be 0f00 	cmp.w	lr, #0
   2c7d0:	d020      	beq.n	2c814 <rpc_client_register+0xb4>
   2c7d2:	f1b8 0f00 	cmp.w	r8, #0
   2c7d6:	d029      	beq.n	2c82c <rpc_client_register+0xcc>
   2c7d8:	f1b9 0f00 	cmp.w	r9, #0
   2c7dc:	d00b      	beq.n	2c7f6 <rpc_client_register+0x96>
   2c7de:	2009      	movs	r0, #9
   2c7e0:	f1ba 0f00 	cmp.w	sl, #0
   2c7e4:	d008      	beq.n	2c7f8 <rpc_client_register+0x98>
   2c7e6:	2004      	movs	r0, #4
   2c7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c7ec:	2007      	movs	r0, #7
   2c7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c7f2:	2007      	movs	r0, #7
   2c7f4:	4770      	bx	lr
   2c7f6:	2008      	movs	r0, #8
   2c7f8:	0100      	lsls	r0, r0, #4
   2c7fa:	5213      	strh	r3, [r2, r0]
   2c7fc:	684b      	ldr	r3, [r1, #4]
   2c7fe:	4402      	add	r2, r0
   2c800:	6053      	str	r3, [r2, #4]
   2c802:	688b      	ldr	r3, [r1, #8]
   2c804:	2000      	movs	r0, #0
   2c806:	6093      	str	r3, [r2, #8]
   2c808:	68cb      	ldr	r3, [r1, #12]
   2c80a:	60d3      	str	r3, [r2, #12]
   2c80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c810:	200e      	movs	r0, #14
   2c812:	4770      	bx	lr
   2c814:	2006      	movs	r0, #6
   2c816:	e7ef      	b.n	2c7f8 <rpc_client_register+0x98>
   2c818:	2001      	movs	r0, #1
   2c81a:	e7ed      	b.n	2c7f8 <rpc_client_register+0x98>
   2c81c:	2002      	movs	r0, #2
   2c81e:	e7eb      	b.n	2c7f8 <rpc_client_register+0x98>
   2c820:	2003      	movs	r0, #3
   2c822:	e7e9      	b.n	2c7f8 <rpc_client_register+0x98>
   2c824:	2004      	movs	r0, #4
   2c826:	e7e7      	b.n	2c7f8 <rpc_client_register+0x98>
   2c828:	2005      	movs	r0, #5
   2c82a:	e7e5      	b.n	2c7f8 <rpc_client_register+0x98>
   2c82c:	2007      	movs	r0, #7
   2c82e:	e7e3      	b.n	2c7f8 <rpc_client_register+0x98>
   2c830:	20023ce4 	.word	0x20023ce4

0002c834 <rpc_message_send>:
   2c834:	b150      	cbz	r0, 2c84c <rpc_message_send+0x18>
   2c836:	b159      	cbz	r1, 2c850 <rpc_message_send+0x1c>
   2c838:	684b      	ldr	r3, [r1, #4]
   2c83a:	8008      	strh	r0, [r1, #0]
   2c83c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2c840:	f043 0302 	orr.w	r3, r3, #2
   2c844:	604b      	str	r3, [r1, #4]
   2c846:	4608      	mov	r0, r1
   2c848:	f7fc bc54 	b.w	290f4 <rpc_transport_send>
   2c84c:	2007      	movs	r0, #7
   2c84e:	4770      	bx	lr
   2c850:	200e      	movs	r0, #14
   2c852:	4770      	bx	lr

0002c854 <rpc_message_alloc>:
   2c854:	b342      	cbz	r2, 2c8a8 <rpc_message_alloc+0x54>
   2c856:	b328      	cbz	r0, 2c8a4 <rpc_message_alloc+0x50>
   2c858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c85a:	2300      	movs	r3, #0
   2c85c:	4616      	mov	r6, r2
   2c85e:	460c      	mov	r4, r1
   2c860:	4605      	mov	r5, r0
   2c862:	6013      	str	r3, [r2, #0]
   2c864:	b171      	cbz	r1, 2c884 <rpc_message_alloc+0x30>
   2c866:	4608      	mov	r0, r1
   2c868:	f7fc fc48 	bl	290fc <rpc_transport_data_alloc>
   2c86c:	4607      	mov	r7, r0
   2c86e:	b1b8      	cbz	r0, 2c8a0 <rpc_message_alloc+0x4c>
   2c870:	f7fc fc42 	bl	290f8 <rpc_transport_rpc_alloc>
   2c874:	4603      	mov	r3, r0
   2c876:	b180      	cbz	r0, 2c89a <rpc_message_alloc+0x46>
   2c878:	2000      	movs	r0, #0
   2c87a:	60dc      	str	r4, [r3, #12]
   2c87c:	609f      	str	r7, [r3, #8]
   2c87e:	801d      	strh	r5, [r3, #0]
   2c880:	6033      	str	r3, [r6, #0]
   2c882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c884:	f7fc fc38 	bl	290f8 <rpc_transport_rpc_alloc>
   2c888:	4603      	mov	r3, r0
   2c88a:	b148      	cbz	r0, 2c8a0 <rpc_message_alloc+0x4c>
   2c88c:	4627      	mov	r7, r4
   2c88e:	60dc      	str	r4, [r3, #12]
   2c890:	609f      	str	r7, [r3, #8]
   2c892:	801d      	strh	r5, [r3, #0]
   2c894:	2000      	movs	r0, #0
   2c896:	6033      	str	r3, [r6, #0]
   2c898:	e7f3      	b.n	2c882 <rpc_message_alloc+0x2e>
   2c89a:	4638      	mov	r0, r7
   2c89c:	f7fc fc32 	bl	29104 <rpc_transport_data_free>
   2c8a0:	2004      	movs	r0, #4
   2c8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c8a4:	2007      	movs	r0, #7
   2c8a6:	4770      	bx	lr
   2c8a8:	200e      	movs	r0, #14
   2c8aa:	4770      	bx	lr

0002c8ac <rpc_message_free>:
   2c8ac:	b130      	cbz	r0, 2c8bc <rpc_message_free+0x10>
   2c8ae:	b139      	cbz	r1, 2c8c0 <rpc_message_free+0x14>
   2c8b0:	b508      	push	{r3, lr}
   2c8b2:	4608      	mov	r0, r1
   2c8b4:	f7fc fc24 	bl	29100 <rpc_transport_rpc_free>
   2c8b8:	2000      	movs	r0, #0
   2c8ba:	bd08      	pop	{r3, pc}
   2c8bc:	2007      	movs	r0, #7
   2c8be:	4770      	bx	lr
   2c8c0:	200e      	movs	r0, #14
   2c8c2:	4770      	bx	lr

0002c8c4 <rpc_message_data_free>:
   2c8c4:	b130      	cbz	r0, 2c8d4 <rpc_message_data_free+0x10>
   2c8c6:	b139      	cbz	r1, 2c8d8 <rpc_message_data_free+0x14>
   2c8c8:	b508      	push	{r3, lr}
   2c8ca:	4608      	mov	r0, r1
   2c8cc:	f7fc fc1a 	bl	29104 <rpc_transport_data_free>
   2c8d0:	2000      	movs	r0, #0
   2c8d2:	bd08      	pop	{r3, pc}
   2c8d4:	2007      	movs	r0, #7
   2c8d6:	4770      	bx	lr
   2c8d8:	200e      	movs	r0, #14
   2c8da:	4770      	bx	lr

0002c8dc <packet_free_cb>:
   2c8dc:	b510      	push	{r4, lr}
   2c8de:	4604      	mov	r4, r0
   2c8e0:	b118      	cbz	r0, 2c8ea <packet_free_cb+0xe>
   2c8e2:	6800      	ldr	r0, [r0, #0]
   2c8e4:	b108      	cbz	r0, 2c8ea <packet_free_cb+0xe>
   2c8e6:	f002 ff87 	bl	2f7f8 <rpc_gnss_client_data_free>
   2c8ea:	68a0      	ldr	r0, [r4, #8]
   2c8ec:	b118      	cbz	r0, 2c8f6 <packet_free_cb+0x1a>
   2c8ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c8f2:	f003 bd6f 	b.w	303d4 <nrf_free>
   2c8f6:	bd10      	pop	{r4, pc}

0002c8f8 <rpc_gnss_event_handler>:
   2c8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c8fa:	4b64      	ldr	r3, [pc, #400]	; (2ca8c <rpc_gnss_event_handler+0x194>)
   2c8fc:	4606      	mov	r6, r0
   2c8fe:	6800      	ldr	r0, [r0, #0]
   2c900:	881b      	ldrh	r3, [r3, #0]
   2c902:	6802      	ldr	r2, [r0, #0]
   2c904:	b085      	sub	sp, #20
   2c906:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   2c90a:	460d      	mov	r5, r1
   2c90c:	d037      	beq.n	2c97e <rpc_gnss_event_handler+0x86>
   2c90e:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   2c912:	33ff      	adds	r3, #255	; 0xff
   2c914:	b29b      	uxth	r3, r3
   2c916:	2b02      	cmp	r3, #2
   2c918:	d811      	bhi.n	2c93e <rpc_gnss_event_handler+0x46>
   2c91a:	4c5d      	ldr	r4, [pc, #372]	; (2ca90 <rpc_gnss_event_handler+0x198>)
   2c91c:	6823      	ldr	r3, [r4, #0]
   2c91e:	075a      	lsls	r2, r3, #29
   2c920:	d410      	bmi.n	2c944 <rpc_gnss_event_handler+0x4c>
   2c922:	6823      	ldr	r3, [r4, #0]
   2c924:	079b      	lsls	r3, r3, #30
   2c926:	d503      	bpl.n	2c930 <rpc_gnss_event_handler+0x38>
   2c928:	f244 0303 	movw	r3, #16387	; 0x4003
   2c92c:	429d      	cmp	r5, r3
   2c92e:	d009      	beq.n	2c944 <rpc_gnss_event_handler+0x4c>
   2c930:	6830      	ldr	r0, [r6, #0]
   2c932:	b120      	cbz	r0, 2c93e <rpc_gnss_event_handler+0x46>
   2c934:	f002 ff60 	bl	2f7f8 <rpc_gnss_client_data_free>
   2c938:	2200      	movs	r2, #0
   2c93a:	4b56      	ldr	r3, [pc, #344]	; (2ca94 <rpc_gnss_event_handler+0x19c>)
   2c93c:	601a      	str	r2, [r3, #0]
   2c93e:	2000      	movs	r0, #0
   2c940:	b005      	add	sp, #20
   2c942:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c944:	2002      	movs	r0, #2
   2c946:	f003 fd3b 	bl	303c0 <nrf_malloc>
   2c94a:	4607      	mov	r7, r0
   2c94c:	2800      	cmp	r0, #0
   2c94e:	f000 8094 	beq.w	2ca7a <rpc_gnss_event_handler+0x182>
   2c952:	2302      	movs	r3, #2
   2c954:	8005      	strh	r5, [r0, #0]
   2c956:	6831      	ldr	r1, [r6, #0]
   2c958:	6872      	ldr	r2, [r6, #4]
   2c95a:	484f      	ldr	r0, [pc, #316]	; (2ca98 <rpc_gnss_event_handler+0x1a0>)
   2c95c:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   2c960:	6800      	ldr	r0, [r0, #0]
   2c962:	9303      	str	r3, [sp, #12]
   2c964:	6803      	ldr	r3, [r0, #0]
   2c966:	4669      	mov	r1, sp
   2c968:	685b      	ldr	r3, [r3, #4]
   2c96a:	4798      	blx	r3
   2c96c:	3001      	adds	r0, #1
   2c96e:	d071      	beq.n	2ca54 <rpc_gnss_event_handler+0x15c>
   2c970:	2000      	movs	r0, #0
   2c972:	6823      	ldr	r3, [r4, #0]
   2c974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2c978:	6023      	str	r3, [r4, #0]
   2c97a:	b005      	add	sp, #20
   2c97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c97e:	4c44      	ldr	r4, [pc, #272]	; (2ca90 <rpc_gnss_event_handler+0x198>)
   2c980:	4f44      	ldr	r7, [pc, #272]	; (2ca94 <rpc_gnss_event_handler+0x19c>)
   2c982:	6823      	ldr	r3, [r4, #0]
   2c984:	6038      	str	r0, [r7, #0]
   2c986:	01d9      	lsls	r1, r3, #7
   2c988:	d523      	bpl.n	2c9d2 <rpc_gnss_event_handler+0xda>
   2c98a:	f242 1302 	movw	r3, #8450	; 0x2102
   2c98e:	429d      	cmp	r5, r3
   2c990:	d11f      	bne.n	2c9d2 <rpc_gnss_event_handler+0xda>
   2c992:	6843      	ldr	r3, [r0, #4]
   2c994:	b91b      	cbnz	r3, 2c99e <rpc_gnss_event_handler+0xa6>
   2c996:	6823      	ldr	r3, [r4, #0]
   2c998:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   2c99c:	6023      	str	r3, [r4, #0]
   2c99e:	6823      	ldr	r3, [r4, #0]
   2c9a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2c9a4:	6023      	str	r3, [r4, #0]
   2c9a6:	6823      	ldr	r3, [r4, #0]
   2c9a8:	025a      	lsls	r2, r3, #9
   2c9aa:	d430      	bmi.n	2ca0e <rpc_gnss_event_handler+0x116>
   2c9ac:	f242 0305 	movw	r3, #8197	; 0x2005
   2c9b0:	429d      	cmp	r5, r3
   2c9b2:	d12c      	bne.n	2ca0e <rpc_gnss_event_handler+0x116>
   2c9b4:	6823      	ldr	r3, [r4, #0]
   2c9b6:	0299      	lsls	r1, r3, #10
   2c9b8:	d529      	bpl.n	2ca0e <rpc_gnss_event_handler+0x116>
   2c9ba:	6843      	ldr	r3, [r0, #4]
   2c9bc:	2b00      	cmp	r3, #0
   2c9be:	d157      	bne.n	2ca70 <rpc_gnss_event_handler+0x178>
   2c9c0:	6823      	ldr	r3, [r4, #0]
   2c9c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2c9c6:	6023      	str	r3, [r4, #0]
   2c9c8:	6823      	ldr	r3, [r4, #0]
   2c9ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2c9ce:	6023      	str	r3, [r4, #0]
   2c9d0:	e01d      	b.n	2ca0e <rpc_gnss_event_handler+0x116>
   2c9d2:	6823      	ldr	r3, [r4, #0]
   2c9d4:	025b      	lsls	r3, r3, #9
   2c9d6:	d50e      	bpl.n	2c9f6 <rpc_gnss_event_handler+0xfe>
   2c9d8:	f242 1303 	movw	r3, #8451	; 0x2103
   2c9dc:	429d      	cmp	r5, r3
   2c9de:	d10a      	bne.n	2c9f6 <rpc_gnss_event_handler+0xfe>
   2c9e0:	6843      	ldr	r3, [r0, #4]
   2c9e2:	b91b      	cbnz	r3, 2c9ec <rpc_gnss_event_handler+0xf4>
   2c9e4:	6823      	ldr	r3, [r4, #0]
   2c9e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2c9ea:	6023      	str	r3, [r4, #0]
   2c9ec:	6823      	ldr	r3, [r4, #0]
   2c9ee:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2c9f2:	6023      	str	r3, [r4, #0]
   2c9f4:	e00b      	b.n	2ca0e <rpc_gnss_event_handler+0x116>
   2c9f6:	f242 0301 	movw	r3, #8193	; 0x2001
   2c9fa:	429d      	cmp	r5, r3
   2c9fc:	d10c      	bne.n	2ca18 <rpc_gnss_event_handler+0x120>
   2c9fe:	6843      	ldr	r3, [r0, #4]
   2ca00:	b92b      	cbnz	r3, 2ca0e <rpc_gnss_event_handler+0x116>
   2ca02:	6823      	ldr	r3, [r4, #0]
   2ca04:	0c1b      	lsrs	r3, r3, #16
   2ca06:	041b      	lsls	r3, r3, #16
   2ca08:	f043 0302 	orr.w	r3, r3, #2
   2ca0c:	6023      	str	r3, [r4, #0]
   2ca0e:	f002 fef3 	bl	2f7f8 <rpc_gnss_client_data_free>
   2ca12:	2300      	movs	r3, #0
   2ca14:	603b      	str	r3, [r7, #0]
   2ca16:	e77a      	b.n	2c90e <rpc_gnss_event_handler+0x16>
   2ca18:	f242 0304 	movw	r3, #8196	; 0x2004
   2ca1c:	429d      	cmp	r5, r3
   2ca1e:	d1c5      	bne.n	2c9ac <rpc_gnss_event_handler+0xb4>
   2ca20:	6843      	ldr	r3, [r0, #4]
   2ca22:	b993      	cbnz	r3, 2ca4a <rpc_gnss_event_handler+0x152>
   2ca24:	6823      	ldr	r3, [r4, #0]
   2ca26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2ca2a:	6023      	str	r3, [r4, #0]
   2ca2c:	6823      	ldr	r3, [r4, #0]
   2ca2e:	b29b      	uxth	r3, r3
   2ca30:	2b03      	cmp	r3, #3
   2ca32:	6823      	ldr	r3, [r4, #0]
   2ca34:	d016      	beq.n	2ca64 <rpc_gnss_event_handler+0x16c>
   2ca36:	b29b      	uxth	r3, r3
   2ca38:	2b04      	cmp	r3, #4
   2ca3a:	d1d7      	bne.n	2c9ec <rpc_gnss_event_handler+0xf4>
   2ca3c:	6823      	ldr	r3, [r4, #0]
   2ca3e:	0c1b      	lsrs	r3, r3, #16
   2ca40:	041b      	lsls	r3, r3, #16
   2ca42:	f043 0302 	orr.w	r3, r3, #2
   2ca46:	6023      	str	r3, [r4, #0]
   2ca48:	e7d0      	b.n	2c9ec <rpc_gnss_event_handler+0xf4>
   2ca4a:	6823      	ldr	r3, [r4, #0]
   2ca4c:	b29b      	uxth	r3, r3
   2ca4e:	2b03      	cmp	r3, #3
   2ca50:	d1cc      	bne.n	2c9ec <rpc_gnss_event_handler+0xf4>
   2ca52:	e7f3      	b.n	2ca3c <rpc_gnss_event_handler+0x144>
   2ca54:	4638      	mov	r0, r7
   2ca56:	f003 fcbd 	bl	303d4 <nrf_free>
   2ca5a:	6830      	ldr	r0, [r6, #0]
   2ca5c:	2800      	cmp	r0, #0
   2ca5e:	f47f af69 	bne.w	2c934 <rpc_gnss_event_handler+0x3c>
   2ca62:	e76c      	b.n	2c93e <rpc_gnss_event_handler+0x46>
   2ca64:	0c1b      	lsrs	r3, r3, #16
   2ca66:	041b      	lsls	r3, r3, #16
   2ca68:	f043 0304 	orr.w	r3, r3, #4
   2ca6c:	6023      	str	r3, [r4, #0]
   2ca6e:	e7bd      	b.n	2c9ec <rpc_gnss_event_handler+0xf4>
   2ca70:	6823      	ldr	r3, [r4, #0]
   2ca72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2ca76:	6023      	str	r3, [r4, #0]
   2ca78:	e7c9      	b.n	2ca0e <rpc_gnss_event_handler+0x116>
   2ca7a:	6830      	ldr	r0, [r6, #0]
   2ca7c:	2800      	cmp	r0, #0
   2ca7e:	f43f af5e 	beq.w	2c93e <rpc_gnss_event_handler+0x46>
   2ca82:	f002 feb9 	bl	2f7f8 <rpc_gnss_client_data_free>
   2ca86:	4b03      	ldr	r3, [pc, #12]	; (2ca94 <rpc_gnss_event_handler+0x19c>)
   2ca88:	601f      	str	r7, [r3, #0]
   2ca8a:	e758      	b.n	2c93e <rpc_gnss_event_handler+0x46>
   2ca8c:	2002894c 	.word	0x2002894c
   2ca90:	20023d84 	.word	0x20023d84
   2ca94:	20023d88 	.word	0x20023d88
   2ca98:	20023d8c 	.word	0x20023d8c

0002ca9c <gnss_interface_write>:
   2ca9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2caa0:	4a74      	ldr	r2, [pc, #464]	; (2cc74 <gnss_interface_write+0x1d8>)
   2caa2:	b09f      	sub	sp, #124	; 0x7c
   2caa4:	4290      	cmp	r0, r2
   2caa6:	9d26      	ldr	r5, [sp, #152]	; 0x98
   2caa8:	f040 80d7 	bne.w	2cc5a <gnss_interface_write+0x1be>
   2caac:	2900      	cmp	r1, #0
   2caae:	f000 80c6 	beq.w	2cc3e <gnss_interface_write+0x1a2>
   2cab2:	2d00      	cmp	r5, #0
   2cab4:	f000 80c3 	beq.w	2cc3e <gnss_interface_write+0x1a2>
   2cab8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2caba:	2a02      	cmp	r2, #2
   2cabc:	f040 80bf 	bne.w	2cc3e <gnss_interface_write+0x1a2>
   2cac0:	4c6d      	ldr	r4, [pc, #436]	; (2cc78 <gnss_interface_write+0x1dc>)
   2cac2:	6822      	ldr	r2, [r4, #0]
   2cac4:	b292      	uxth	r2, r2
   2cac6:	2a02      	cmp	r2, #2
   2cac8:	d004      	beq.n	2cad4 <gnss_interface_write+0x38>
   2caca:	6822      	ldr	r2, [r4, #0]
   2cacc:	b292      	uxth	r2, r2
   2cace:	2a04      	cmp	r2, #4
   2cad0:	f040 80bd 	bne.w	2cc4e <gnss_interface_write+0x1b2>
   2cad4:	2b00      	cmp	r3, #0
   2cad6:	f040 80c6 	bne.w	2cc66 <gnss_interface_write+0x1ca>
   2cada:	6822      	ldr	r2, [r4, #0]
   2cadc:	0390      	lsls	r0, r2, #14
   2cade:	d512      	bpl.n	2cb06 <gnss_interface_write+0x6a>
   2cae0:	6822      	ldr	r2, [r4, #0]
   2cae2:	882b      	ldrh	r3, [r5, #0]
   2cae4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   2cae8:	6022      	str	r2, [r4, #0]
   2caea:	6822      	ldr	r2, [r4, #0]
   2caec:	3b01      	subs	r3, #1
   2caee:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   2caf2:	6022      	str	r2, [r4, #0]
   2caf4:	2b07      	cmp	r3, #7
   2caf6:	f200 80a2 	bhi.w	2cc3e <gnss_interface_write+0x1a2>
   2cafa:	e8df f003 	tbb	[pc, r3]
   2cafe:	7d82      	.short	0x7d82
   2cb00:	646e7378 	.word	0x646e7378
   2cb04:	0869      	.short	0x0869
   2cb06:	2000      	movs	r0, #0
   2cb08:	b01f      	add	sp, #124	; 0x7c
   2cb0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2cb0e:	4608      	mov	r0, r1
   2cb10:	a902      	add	r1, sp, #8
   2cb12:	f002 fe25 	bl	2f760 <rpc_gnss_serialize_integrity>
   2cb16:	2172      	movs	r1, #114	; 0x72
   2cb18:	4668      	mov	r0, sp
   2cb1a:	f002 fe3b 	bl	2f794 <rpc_gnss_client_request_alloc>
   2cb1e:	4605      	mov	r5, r0
   2cb20:	9800      	ldr	r0, [sp, #0]
   2cb22:	2d00      	cmp	r5, #0
   2cb24:	d172      	bne.n	2cc0c <gnss_interface_write+0x170>
   2cb26:	2800      	cmp	r0, #0
   2cb28:	d077      	beq.n	2cc1a <gnss_interface_write+0x17e>
   2cb2a:	f241 0605 	movw	r6, #4101	; 0x1005
   2cb2e:	f04f 0c49 	mov.w	ip, #73	; 0x49
   2cb32:	2272      	movs	r2, #114	; 0x72
   2cb34:	f04f 0e76 	mov.w	lr, #118	; 0x76
   2cb38:	f04f 0943 	mov.w	r9, #67	; 0x43
   2cb3c:	f04f 0854 	mov.w	r8, #84	; 0x54
   2cb40:	4f4e      	ldr	r7, [pc, #312]	; (2cc7c <gnss_interface_write+0x1e0>)
   2cb42:	a91e      	add	r1, sp, #120	; 0x78
   2cb44:	883b      	ldrh	r3, [r7, #0]
   2cb46:	f880 c00f 	strb.w	ip, [r0, #15]
   2cb4a:	3301      	adds	r3, #1
   2cb4c:	b29b      	uxth	r3, r3
   2cb4e:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   2cb52:	f841 cd74 	str.w	ip, [r1, #-116]!
   2cb56:	7145      	strb	r5, [r0, #5]
   2cb58:	7185      	strb	r5, [r0, #6]
   2cb5a:	71c5      	strb	r5, [r0, #7]
   2cb5c:	7205      	strb	r5, [r0, #8]
   2cb5e:	7245      	strb	r5, [r0, #9]
   2cb60:	7285      	strb	r5, [r0, #10]
   2cb62:	72c5      	strb	r5, [r0, #11]
   2cb64:	7102      	strb	r2, [r0, #4]
   2cb66:	f880 900c 	strb.w	r9, [r0, #12]
   2cb6a:	f880 800d 	strb.w	r8, [r0, #13]
   2cb6e:	f880 e00e 	strb.w	lr, [r0, #14]
   2cb72:	6800      	ldr	r0, [r0, #0]
   2cb74:	803b      	strh	r3, [r7, #0]
   2cb76:	f00a fc44 	bl	37402 <memcpy>
   2cb7a:	4b41      	ldr	r3, [pc, #260]	; (2cc80 <gnss_interface_write+0x1e4>)
   2cb7c:	4631      	mov	r1, r6
   2cb7e:	9800      	ldr	r0, [sp, #0]
   2cb80:	601d      	str	r5, [r3, #0]
   2cb82:	f002 fe1b 	bl	2f7bc <rpc_gnss_client_request_send>
   2cb86:	2800      	cmp	r0, #0
   2cb88:	d14e      	bne.n	2cc28 <gnss_interface_write+0x18c>
   2cb8a:	6823      	ldr	r3, [r4, #0]
   2cb8c:	0299      	lsls	r1, r3, #10
   2cb8e:	d50b      	bpl.n	2cba8 <gnss_interface_write+0x10c>
   2cb90:	4e3c      	ldr	r6, [pc, #240]	; (2cc84 <gnss_interface_write+0x1e8>)
   2cb92:	4d38      	ldr	r5, [pc, #224]	; (2cc74 <gnss_interface_write+0x1d8>)
   2cb94:	e000      	b.n	2cb98 <gnss_interface_write+0xfc>
   2cb96:	b978      	cbnz	r0, 2cbb8 <gnss_interface_write+0x11c>
   2cb98:	4631      	mov	r1, r6
   2cb9a:	4628      	mov	r0, r5
   2cb9c:	f7f8 fe36 	bl	2580c <bsd_os_timedwait>
   2cba0:	6823      	ldr	r3, [r4, #0]
   2cba2:	029a      	lsls	r2, r3, #10
   2cba4:	d4f7      	bmi.n	2cb96 <gnss_interface_write+0xfa>
   2cba6:	b938      	cbnz	r0, 2cbb8 <gnss_interface_write+0x11c>
   2cba8:	6823      	ldr	r3, [r4, #0]
   2cbaa:	039b      	lsls	r3, r3, #14
   2cbac:	d4ab      	bmi.n	2cb06 <gnss_interface_write+0x6a>
   2cbae:	2005      	movs	r0, #5
   2cbb0:	6823      	ldr	r3, [r4, #0]
   2cbb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2cbb6:	6023      	str	r3, [r4, #0]
   2cbb8:	f7f8 fee0 	bl	2597c <bsd_os_errno_set>
   2cbbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cbc0:	b01f      	add	sp, #124	; 0x7c
   2cbc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2cbc6:	4608      	mov	r0, r1
   2cbc8:	a902      	add	r1, sp, #8
   2cbca:	f002 fd81 	bl	2f6d0 <rpc_gnss_serialize_time_and_sv_tow>
   2cbce:	e7a2      	b.n	2cb16 <gnss_interface_write+0x7a>
   2cbd0:	4608      	mov	r0, r1
   2cbd2:	a902      	add	r1, sp, #8
   2cbd4:	f002 fda4 	bl	2f720 <rpc_gnss_serialize_location>
   2cbd8:	e79d      	b.n	2cb16 <gnss_interface_write+0x7a>
   2cbda:	4608      	mov	r0, r1
   2cbdc:	a902      	add	r1, sp, #8
   2cbde:	f002 fd5d 	bl	2f69c <rpc_gnss_serialize_nequick>
   2cbe2:	e798      	b.n	2cb16 <gnss_interface_write+0x7a>
   2cbe4:	4608      	mov	r0, r1
   2cbe6:	a902      	add	r1, sp, #8
   2cbe8:	f002 fd34 	bl	2f654 <rpc_gnss_serialize_klob>
   2cbec:	e793      	b.n	2cb16 <gnss_interface_write+0x7a>
   2cbee:	4608      	mov	r0, r1
   2cbf0:	a902      	add	r1, sp, #8
   2cbf2:	f002 fcfd 	bl	2f5f0 <rpc_gnss_serialize_alm>
   2cbf6:	e78e      	b.n	2cb16 <gnss_interface_write+0x7a>
   2cbf8:	4608      	mov	r0, r1
   2cbfa:	a902      	add	r1, sp, #8
   2cbfc:	f002 fca6 	bl	2f54c <rpc_gnss_serialize_ephe>
   2cc00:	e789      	b.n	2cb16 <gnss_interface_write+0x7a>
   2cc02:	4608      	mov	r0, r1
   2cc04:	a902      	add	r1, sp, #8
   2cc06:	f002 fc7f 	bl	2f508 <rpc_gnss_serialize_utc>
   2cc0a:	e784      	b.n	2cb16 <gnss_interface_write+0x7a>
   2cc0c:	b128      	cbz	r0, 2cc1a <gnss_interface_write+0x17e>
   2cc0e:	6803      	ldr	r3, [r0, #0]
   2cc10:	b11b      	cbz	r3, 2cc1a <gnss_interface_write+0x17e>
   2cc12:	4618      	mov	r0, r3
   2cc14:	f002 fdf0 	bl	2f7f8 <rpc_gnss_client_data_free>
   2cc18:	9800      	ldr	r0, [sp, #0]
   2cc1a:	f002 fde5 	bl	2f7e8 <rpc_gnss_client_message_free>
   2cc1e:	2023      	movs	r0, #35	; 0x23
   2cc20:	f7f8 feac 	bl	2597c <bsd_os_errno_set>
   2cc24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cc28:	6823      	ldr	r3, [r4, #0]
   2cc2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2cc2e:	6023      	str	r3, [r4, #0]
   2cc30:	6823      	ldr	r3, [r4, #0]
   2cc32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2cc36:	6023      	str	r3, [r4, #0]
   2cc38:	b01f      	add	sp, #124	; 0x7c
   2cc3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2cc3e:	2016      	movs	r0, #22
   2cc40:	f7f8 fe9c 	bl	2597c <bsd_os_errno_set>
   2cc44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cc48:	b01f      	add	sp, #124	; 0x7c
   2cc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2cc4e:	2039      	movs	r0, #57	; 0x39
   2cc50:	f7f8 fe94 	bl	2597c <bsd_os_errno_set>
   2cc54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cc58:	e756      	b.n	2cb08 <gnss_interface_write+0x6c>
   2cc5a:	2009      	movs	r0, #9
   2cc5c:	f7f8 fe8e 	bl	2597c <bsd_os_errno_set>
   2cc60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cc64:	e750      	b.n	2cb08 <gnss_interface_write+0x6c>
   2cc66:	202d      	movs	r0, #45	; 0x2d
   2cc68:	f7f8 fe88 	bl	2597c <bsd_os_errno_set>
   2cc6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cc70:	e74a      	b.n	2cb08 <gnss_interface_write+0x6c>
   2cc72:	bf00      	nop
   2cc74:	49765443 	.word	0x49765443
   2cc78:	20023d84 	.word	0x20023d84
   2cc7c:	2002894c 	.word	0x2002894c
   2cc80:	20023d88 	.word	0x20023d88
   2cc84:	20020454 	.word	0x20020454

0002cc88 <gnss_interface_read>:
   2cc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc8c:	4c55      	ldr	r4, [pc, #340]	; (2cde4 <gnss_interface_read+0x15c>)
   2cc8e:	b0b7      	sub	sp, #220	; 0xdc
   2cc90:	42a0      	cmp	r0, r4
   2cc92:	f040 81fa 	bne.w	2d08a <gnss_interface_read+0x402>
   2cc96:	460e      	mov	r6, r1
   2cc98:	2900      	cmp	r1, #0
   2cc9a:	f000 81f0 	beq.w	2d07e <gnss_interface_read+0x3f6>
   2cc9e:	2ad7      	cmp	r2, #215	; 0xd7
   2cca0:	f240 81ed 	bls.w	2d07e <gnss_interface_read+0x3f6>
   2cca4:	4d50      	ldr	r5, [pc, #320]	; (2cde8 <gnss_interface_read+0x160>)
   2cca6:	469a      	mov	sl, r3
   2cca8:	682b      	ldr	r3, [r5, #0]
   2ccaa:	b29b      	uxth	r3, r3
   2ccac:	2b04      	cmp	r3, #4
   2ccae:	d004      	beq.n	2ccba <gnss_interface_read+0x32>
   2ccb0:	682b      	ldr	r3, [r5, #0]
   2ccb2:	b29b      	uxth	r3, r3
   2ccb4:	2b02      	cmp	r3, #2
   2ccb6:	f040 81dc 	bne.w	2d072 <gnss_interface_read+0x3ea>
   2ccba:	f1ba 0f00 	cmp.w	sl, #0
   2ccbe:	d178      	bne.n	2cdb2 <gnss_interface_read+0x12a>
   2ccc0:	2102      	movs	r1, #2
   2ccc2:	20b6      	movs	r0, #182	; 0xb6
   2ccc4:	2400      	movs	r4, #0
   2ccc6:	682b      	ldr	r3, [r5, #0]
   2ccc8:	f10d 020e 	add.w	r2, sp, #14
   2cccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2ccd0:	602b      	str	r3, [r5, #0]
   2ccd2:	ab08      	add	r3, sp, #32
   2ccd4:	9304      	str	r3, [sp, #16]
   2ccd6:	f8df b118 	ldr.w	fp, [pc, #280]	; 2cdf0 <gnss_interface_read+0x168>
   2ccda:	ea0a 0301 	and.w	r3, sl, r1
   2ccde:	4f43      	ldr	r7, [pc, #268]	; (2cdec <gnss_interface_read+0x164>)
   2cce0:	f8df 9110 	ldr.w	r9, [pc, #272]	; 2cdf4 <gnss_interface_read+0x16c>
   2cce4:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 2cde4 <gnss_interface_read+0x15c>
   2cce8:	9005      	str	r0, [sp, #20]
   2ccea:	9107      	str	r1, [sp, #28]
   2ccec:	9206      	str	r2, [sp, #24]
   2ccee:	9301      	str	r3, [sp, #4]
   2ccf0:	f8db 0000 	ldr.w	r0, [fp]
   2ccf4:	4652      	mov	r2, sl
   2ccf6:	6803      	ldr	r3, [r0, #0]
   2ccf8:	a904      	add	r1, sp, #16
   2ccfa:	689b      	ldr	r3, [r3, #8]
   2ccfc:	4798      	blx	r3
   2ccfe:	2800      	cmp	r0, #0
   2cd00:	da2a      	bge.n	2cd58 <gnss_interface_read+0xd0>
   2cd02:	9b01      	ldr	r3, [sp, #4]
   2cd04:	b15b      	cbz	r3, 2cd1e <gnss_interface_read+0x96>
   2cd06:	1c42      	adds	r2, r0, #1
   2cd08:	4603      	mov	r3, r0
   2cd0a:	d125      	bne.n	2cd58 <gnss_interface_read+0xd0>
   2cd0c:	b9dc      	cbnz	r4, 2cd46 <gnss_interface_read+0xbe>
   2cd0e:	2023      	movs	r0, #35	; 0x23
   2cd10:	461c      	mov	r4, r3
   2cd12:	f7f8 fe33 	bl	2597c <bsd_os_errno_set>
   2cd16:	4620      	mov	r0, r4
   2cd18:	b037      	add	sp, #220	; 0xdc
   2cd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cd1e:	682a      	ldr	r2, [r5, #0]
   2cd20:	783b      	ldrb	r3, [r7, #0]
   2cd22:	03d1      	lsls	r1, r2, #15
   2cd24:	d40c      	bmi.n	2cd40 <gnss_interface_read+0xb8>
   2cd26:	b95c      	cbnz	r4, 2cd40 <gnss_interface_read+0xb8>
   2cd28:	b163      	cbz	r3, 2cd44 <gnss_interface_read+0xbc>
   2cd2a:	4649      	mov	r1, r9
   2cd2c:	4640      	mov	r0, r8
   2cd2e:	f7f8 fd6d 	bl	2580c <bsd_os_timedwait>
   2cd32:	682b      	ldr	r3, [r5, #0]
   2cd34:	03db      	lsls	r3, r3, #15
   2cd36:	d437      	bmi.n	2cda8 <gnss_interface_read+0x120>
   2cd38:	783b      	ldrb	r3, [r7, #0]
   2cd3a:	2800      	cmp	r0, #0
   2cd3c:	d0f4      	beq.n	2cd28 <gnss_interface_read+0xa0>
   2cd3e:	4604      	mov	r4, r0
   2cd40:	2b00      	cmp	r3, #0
   2cd42:	d1d5      	bne.n	2ccf0 <gnss_interface_read+0x68>
   2cd44:	2470      	movs	r4, #112	; 0x70
   2cd46:	4620      	mov	r0, r4
   2cd48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2cd4c:	f7f8 fe16 	bl	2597c <bsd_os_errno_set>
   2cd50:	4620      	mov	r0, r4
   2cd52:	b037      	add	sp, #220	; 0xdc
   2cd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cd58:	f244 0202 	movw	r2, #16386	; 0x4002
   2cd5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2cd60:	4293      	cmp	r3, r2
   2cd62:	d02f      	beq.n	2cdc4 <gnss_interface_read+0x13c>
   2cd64:	f244 0201 	movw	r2, #16385	; 0x4001
   2cd68:	4293      	cmp	r3, r2
   2cd6a:	d045      	beq.n	2cdf8 <gnss_interface_read+0x170>
   2cd6c:	f244 0203 	movw	r2, #16387	; 0x4003
   2cd70:	4293      	cmp	r3, r2
   2cd72:	f040 8184 	bne.w	2d07e <gnss_interface_read+0x3f6>
   2cd76:	2203      	movs	r2, #3
   2cd78:	2414      	movs	r4, #20
   2cd7a:	9b08      	ldr	r3, [sp, #32]
   2cd7c:	7032      	strb	r2, [r6, #0]
   2cd7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2cd80:	60b3      	str	r3, [r6, #8]
   2cd82:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2cd86:	e9c6 2303 	strd	r2, r3, [r6, #12]
   2cd8a:	f8db 0000 	ldr.w	r0, [fp]
   2cd8e:	6803      	ldr	r3, [r0, #0]
   2cd90:	68db      	ldr	r3, [r3, #12]
   2cd92:	4798      	blx	r3
   2cd94:	2800      	cmp	r0, #0
   2cd96:	ddbe      	ble.n	2cd16 <gnss_interface_read+0x8e>
   2cd98:	4620      	mov	r0, r4
   2cd9a:	682b      	ldr	r3, [r5, #0]
   2cd9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2cda0:	602b      	str	r3, [r5, #0]
   2cda2:	b037      	add	sp, #220	; 0xdc
   2cda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cda8:	783b      	ldrb	r3, [r7, #0]
   2cdaa:	4604      	mov	r4, r0
   2cdac:	2b00      	cmp	r3, #0
   2cdae:	d19f      	bne.n	2ccf0 <gnss_interface_read+0x68>
   2cdb0:	e7c8      	b.n	2cd44 <gnss_interface_read+0xbc>
   2cdb2:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   2cdb6:	d183      	bne.n	2ccc0 <gnss_interface_read+0x38>
   2cdb8:	202d      	movs	r0, #45	; 0x2d
   2cdba:	f7f8 fddf 	bl	2597c <bsd_os_errno_set>
   2cdbe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2cdc2:	e7a8      	b.n	2cd16 <gnss_interface_read+0x8e>
   2cdc4:	a808      	add	r0, sp, #32
   2cdc6:	f7ec f953 	bl	19070 <strlen>
   2cdca:	2302      	movs	r3, #2
   2cdcc:	1c44      	adds	r4, r0, #1
   2cdce:	b2a4      	uxth	r4, r4
   2cdd0:	f806 3b08 	strb.w	r3, [r6], #8
   2cdd4:	4622      	mov	r2, r4
   2cdd6:	a908      	add	r1, sp, #32
   2cdd8:	4630      	mov	r0, r6
   2cdda:	f00a fb12 	bl	37402 <memcpy>
   2cdde:	3408      	adds	r4, #8
   2cde0:	e7d3      	b.n	2cd8a <gnss_interface_read+0x102>
   2cde2:	bf00      	nop
   2cde4:	49765443 	.word	0x49765443
   2cde8:	20023d84 	.word	0x20023d84
   2cdec:	2002cb9a 	.word	0x2002cb9a
   2cdf0:	20023d8c 	.word	0x20023d8c
   2cdf4:	20020454 	.word	0x20020454
   2cdf8:	2401      	movs	r4, #1
   2cdfa:	a809      	add	r0, sp, #36	; 0x24
   2cdfc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   2cdfe:	e9c6 0102 	strd	r0, r1, [r6, #8]
   2ce02:	e9c6 2304 	strd	r2, r3, [r6, #16]
   2ce06:	990d      	ldr	r1, [sp, #52]	; 0x34
   2ce08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2ce0a:	7034      	strb	r4, [r6, #0]
   2ce0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2ce0e:	61b1      	str	r1, [r6, #24]
   2ce10:	9910      	ldr	r1, [sp, #64]	; 0x40
   2ce12:	61f2      	str	r2, [r6, #28]
   2ce14:	6233      	str	r3, [r6, #32]
   2ce16:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   2ce1a:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   2ce1e:	6271      	str	r1, [r6, #36]	; 0x24
   2ce20:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   2ce24:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   2ce28:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   2ce2c:	6373      	str	r3, [r6, #52]	; 0x34
   2ce2e:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   2ce32:	63b1      	str	r1, [r6, #56]	; 0x38
   2ce34:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2ce38:	63f2      	str	r2, [r6, #60]	; 0x3c
   2ce3a:	6433      	str	r3, [r6, #64]	; 0x40
   2ce3c:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   2ce40:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   2ce44:	8531      	strh	r1, [r6, #40]	; 0x28
   2ce46:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   2ce4a:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   2ce4e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   2ce52:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   2ce56:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2ce58:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   2ce5c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   2ce60:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   2ce64:	f3c3 210f 	ubfx	r1, r3, #8, #16
   2ce68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2ce6a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   2ce6e:	8630      	strh	r0, [r6, #48]	; 0x30
   2ce70:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   2ce74:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   2ce78:	f3c3 230f 	ubfx	r3, r3, #8, #16
   2ce7c:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   2ce80:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   2ce84:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   2ce88:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   2ce8c:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   2ce90:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   2ce94:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   2ce98:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   2ce9c:	64f3      	str	r3, [r6, #76]	; 0x4c
   2ce9e:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   2cea2:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   2cea6:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   2ceaa:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   2ceae:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   2ceb2:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   2ceb6:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   2ceba:	65b1      	str	r1, [r6, #88]	; 0x58
   2cebc:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   2cec0:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   2cec4:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   2cec8:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   2cecc:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   2ced0:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   2ced4:	6672      	str	r2, [r6, #100]	; 0x64
   2ced6:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   2ceda:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   2cede:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   2cee2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2cee4:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   2cee8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2ceec:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   2cef0:	f3c2 220f 	ubfx	r2, r2, #8, #16
   2cef4:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   2cef8:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   2cefc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   2cf00:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   2cf04:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   2cf08:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   2cf0c:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   2cf10:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   2cf14:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   2cf18:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   2cf1c:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   2cf20:	6733      	str	r3, [r6, #112]	; 0x70
   2cf22:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   2cf26:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   2cf2a:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   2cf2e:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   2cf32:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   2cf36:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   2cf3a:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   2cf3e:	67f1      	str	r1, [r6, #124]	; 0x7c
   2cf40:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   2cf44:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   2cf48:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   2cf4c:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   2cf50:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   2cf54:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   2cf58:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   2cf5c:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   2cf60:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   2cf64:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2cf66:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   2cf6a:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   2cf6e:	f3c3 210f 	ubfx	r1, r3, #8, #16
   2cf72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   2cf74:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   2cf78:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   2cf7c:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   2cf80:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   2cf84:	f3c3 230f 	ubfx	r3, r3, #8, #16
   2cf88:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   2cf8c:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   2cf90:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   2cf94:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   2cf98:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   2cf9c:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   2cfa0:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   2cfa4:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   2cfa8:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   2cfac:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   2cfb0:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   2cfb4:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   2cfb8:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   2cfbc:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   2cfc0:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   2cfc4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   2cfc8:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   2cfcc:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   2cfd0:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   2cfd4:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   2cfd8:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   2cfdc:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   2cfe0:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   2cfe4:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   2cfe8:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   2cfec:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   2cff0:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   2cff4:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   2cff8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   2cffa:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2cffe:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   2d002:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   2d006:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   2d00a:	f3c2 220f 	ubfx	r2, r2, #8, #16
   2d00e:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   2d012:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   2d016:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   2d01a:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   2d01e:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   2d022:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   2d026:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   2d02a:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   2d02e:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   2d032:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   2d036:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   2d03a:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   2d03e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   2d042:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   2d046:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   2d04a:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   2d04e:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   2d052:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   2d056:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   2d05a:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   2d05e:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   2d062:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   2d066:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   2d06a:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   2d06e:	24d8      	movs	r4, #216	; 0xd8
   2d070:	e68b      	b.n	2cd8a <gnss_interface_read+0x102>
   2d072:	2039      	movs	r0, #57	; 0x39
   2d074:	f7f8 fc82 	bl	2597c <bsd_os_errno_set>
   2d078:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d07c:	e64b      	b.n	2cd16 <gnss_interface_read+0x8e>
   2d07e:	2016      	movs	r0, #22
   2d080:	f7f8 fc7c 	bl	2597c <bsd_os_errno_set>
   2d084:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d088:	e645      	b.n	2cd16 <gnss_interface_read+0x8e>
   2d08a:	2009      	movs	r0, #9
   2d08c:	f7f8 fc76 	bl	2597c <bsd_os_errno_set>
   2d090:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d094:	e63f      	b.n	2cd16 <gnss_interface_read+0x8e>
   2d096:	bf00      	nop

0002d098 <gnss_interface_setopt>:
   2d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d09c:	4db9      	ldr	r5, [pc, #740]	; (2d384 <gnss_interface_setopt+0x2ec>)
   2d09e:	b087      	sub	sp, #28
   2d0a0:	682c      	ldr	r4, [r5, #0]
   2d0a2:	4690      	mov	r8, r2
   2d0a4:	b2a4      	uxth	r4, r4
   2d0a6:	2c02      	cmp	r4, #2
   2d0a8:	d00c      	beq.n	2d0c4 <gnss_interface_setopt+0x2c>
   2d0aa:	2a08      	cmp	r2, #8
   2d0ac:	d00a      	beq.n	2d0c4 <gnss_interface_setopt+0x2c>
   2d0ae:	3a0a      	subs	r2, #10
   2d0b0:	2a01      	cmp	r2, #1
   2d0b2:	d907      	bls.n	2d0c4 <gnss_interface_setopt+0x2c>
   2d0b4:	200e      	movs	r0, #14
   2d0b6:	f7f8 fc61 	bl	2597c <bsd_os_errno_set>
   2d0ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d0be:	b007      	add	sp, #28
   2d0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d0c4:	682a      	ldr	r2, [r5, #0]
   2d0c6:	0252      	lsls	r2, r2, #9
   2d0c8:	f100 8155 	bmi.w	2d376 <gnss_interface_setopt+0x2de>
   2d0cc:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2d0d0:	f040 8145 	bne.w	2d35e <gnss_interface_setopt+0x2c6>
   2d0d4:	4aac      	ldr	r2, [pc, #688]	; (2d388 <gnss_interface_setopt+0x2f0>)
   2d0d6:	4290      	cmp	r0, r2
   2d0d8:	f040 8147 	bne.w	2d36a <gnss_interface_setopt+0x2d2>
   2d0dc:	f1a8 020a 	sub.w	r2, r8, #10
   2d0e0:	2a01      	cmp	r2, #1
   2d0e2:	d902      	bls.n	2d0ea <gnss_interface_setopt+0x52>
   2d0e4:	2b00      	cmp	r3, #0
   2d0e6:	f000 811e 	beq.w	2d326 <gnss_interface_setopt+0x28e>
   2d0ea:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   2d0ee:	2a0a      	cmp	r2, #10
   2d0f0:	f200 8119 	bhi.w	2d326 <gnss_interface_setopt+0x28e>
   2d0f4:	e8df f012 	tbh	[pc, r2, lsl #1]
   2d0f8:	00950088 	.word	0x00950088
   2d0fc:	00ab00a1 	.word	0x00ab00a1
   2d100:	00c200b7 	.word	0x00c200b7
   2d104:	00e600ce 	.word	0x00e600ce
   2d108:	010800fc 	.word	0x010800fc
   2d10c:	000b      	.short	0x000b
   2d10e:	682b      	ldr	r3, [r5, #0]
   2d110:	b29b      	uxth	r3, r3
   2d112:	2b04      	cmp	r3, #4
   2d114:	d1ce      	bne.n	2d0b4 <gnss_interface_setopt+0x1c>
   2d116:	2203      	movs	r2, #3
   2d118:	f241 0604 	movw	r6, #4100	; 0x1004
   2d11c:	2300      	movs	r3, #0
   2d11e:	4637      	mov	r7, r6
   2d120:	f88d 2008 	strb.w	r2, [sp, #8]
   2d124:	f88d 3009 	strb.w	r3, [sp, #9]
   2d128:	f88d 300a 	strb.w	r3, [sp, #10]
   2d12c:	f88d 300b 	strb.w	r3, [sp, #11]
   2d130:	f88d 300c 	strb.w	r3, [sp, #12]
   2d134:	682b      	ldr	r3, [r5, #0]
   2d136:	2112      	movs	r1, #18
   2d138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2d13c:	4668      	mov	r0, sp
   2d13e:	602b      	str	r3, [r5, #0]
   2d140:	f002 fb28 	bl	2f794 <rpc_gnss_client_request_alloc>
   2d144:	4604      	mov	r4, r0
   2d146:	9800      	ldr	r0, [sp, #0]
   2d148:	2c00      	cmp	r4, #0
   2d14a:	f040 80f2 	bne.w	2d332 <gnss_interface_setopt+0x29a>
   2d14e:	2800      	cmp	r0, #0
   2d150:	f000 80f6 	beq.w	2d340 <gnss_interface_setopt+0x2a8>
   2d154:	2212      	movs	r2, #18
   2d156:	f04f 0976 	mov.w	r9, #118	; 0x76
   2d15a:	f04f 0e49 	mov.w	lr, #73	; 0x49
   2d15e:	f04f 0b43 	mov.w	fp, #67	; 0x43
   2d162:	f04f 0a54 	mov.w	sl, #84	; 0x54
   2d166:	f8df c22c 	ldr.w	ip, [pc, #556]	; 2d394 <gnss_interface_setopt+0x2fc>
   2d16a:	a906      	add	r1, sp, #24
   2d16c:	f8bc 3000 	ldrh.w	r3, [ip]
   2d170:	f880 900e 	strb.w	r9, [r0, #14]
   2d174:	3301      	adds	r3, #1
   2d176:	b29b      	uxth	r3, r3
   2d178:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   2d17c:	f841 6d14 	str.w	r6, [r1, #-20]!
   2d180:	7144      	strb	r4, [r0, #5]
   2d182:	7184      	strb	r4, [r0, #6]
   2d184:	71c4      	strb	r4, [r0, #7]
   2d186:	7204      	strb	r4, [r0, #8]
   2d188:	7244      	strb	r4, [r0, #9]
   2d18a:	7284      	strb	r4, [r0, #10]
   2d18c:	72c4      	strb	r4, [r0, #11]
   2d18e:	7102      	strb	r2, [r0, #4]
   2d190:	f880 b00c 	strb.w	fp, [r0, #12]
   2d194:	f880 a00d 	strb.w	sl, [r0, #13]
   2d198:	f880 e00f 	strb.w	lr, [r0, #15]
   2d19c:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 2d398 <gnss_interface_setopt+0x300>
   2d1a0:	6800      	ldr	r0, [r0, #0]
   2d1a2:	f8ac 3000 	strh.w	r3, [ip]
   2d1a6:	f00a f92c 	bl	37402 <memcpy>
   2d1aa:	4639      	mov	r1, r7
   2d1ac:	9800      	ldr	r0, [sp, #0]
   2d1ae:	f8c9 4000 	str.w	r4, [r9]
   2d1b2:	f002 fb03 	bl	2f7bc <rpc_gnss_client_request_send>
   2d1b6:	2800      	cmp	r0, #0
   2d1b8:	f040 80c7 	bne.w	2d34a <gnss_interface_setopt+0x2b2>
   2d1bc:	4f73      	ldr	r7, [pc, #460]	; (2d38c <gnss_interface_setopt+0x2f4>)
   2d1be:	4e72      	ldr	r6, [pc, #456]	; (2d388 <gnss_interface_setopt+0x2f0>)
   2d1c0:	4639      	mov	r1, r7
   2d1c2:	4630      	mov	r0, r6
   2d1c4:	f7f8 fb22 	bl	2580c <bsd_os_timedwait>
   2d1c8:	682c      	ldr	r4, [r5, #0]
   2d1ca:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   2d1ce:	d1f7      	bne.n	2d1c0 <gnss_interface_setopt+0x128>
   2d1d0:	f8d9 0000 	ldr.w	r0, [r9]
   2d1d4:	b118      	cbz	r0, 2d1de <gnss_interface_setopt+0x146>
   2d1d6:	f002 fb0f 	bl	2f7f8 <rpc_gnss_client_data_free>
   2d1da:	f8c9 4000 	str.w	r4, [r9]
   2d1de:	682b      	ldr	r3, [r5, #0]
   2d1e0:	021b      	lsls	r3, r3, #8
   2d1e2:	f140 8098 	bpl.w	2d316 <gnss_interface_setopt+0x27e>
   2d1e6:	f1b8 0f08 	cmp.w	r8, #8
   2d1ea:	f040 809a 	bne.w	2d322 <gnss_interface_setopt+0x28a>
   2d1ee:	4b68      	ldr	r3, [pc, #416]	; (2d390 <gnss_interface_setopt+0x2f8>)
   2d1f0:	6818      	ldr	r0, [r3, #0]
   2d1f2:	6803      	ldr	r3, [r0, #0]
   2d1f4:	691b      	ldr	r3, [r3, #16]
   2d1f6:	4798      	blx	r3
   2d1f8:	2000      	movs	r0, #0
   2d1fa:	682b      	ldr	r3, [r5, #0]
   2d1fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2d200:	602b      	str	r3, [r5, #0]
   2d202:	b007      	add	sp, #28
   2d204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d208:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2d20a:	2a02      	cmp	r2, #2
   2d20c:	f040 808b 	bne.w	2d326 <gnss_interface_setopt+0x28e>
   2d210:	2208      	movs	r2, #8
   2d212:	f241 1603 	movw	r6, #4355	; 0x1103
   2d216:	881b      	ldrh	r3, [r3, #0]
   2d218:	9202      	str	r2, [sp, #8]
   2d21a:	f8ad 300f 	strh.w	r3, [sp, #15]
   2d21e:	4637      	mov	r7, r6
   2d220:	e788      	b.n	2d134 <gnss_interface_setopt+0x9c>
   2d222:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2d224:	2a02      	cmp	r2, #2
   2d226:	d17e      	bne.n	2d326 <gnss_interface_setopt+0x28e>
   2d228:	2210      	movs	r2, #16
   2d22a:	f241 1603 	movw	r6, #4355	; 0x1103
   2d22e:	881b      	ldrh	r3, [r3, #0]
   2d230:	9202      	str	r2, [sp, #8]
   2d232:	f8ad 3011 	strh.w	r3, [sp, #17]
   2d236:	4637      	mov	r7, r6
   2d238:	e77c      	b.n	2d134 <gnss_interface_setopt+0x9c>
   2d23a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2d23c:	2a01      	cmp	r2, #1
   2d23e:	d172      	bne.n	2d326 <gnss_interface_setopt+0x28e>
   2d240:	781b      	ldrb	r3, [r3, #0]
   2d242:	2b01      	cmp	r3, #1
   2d244:	d16f      	bne.n	2d326 <gnss_interface_setopt+0x28e>
   2d246:	f241 1603 	movw	r6, #4355	; 0x1103
   2d24a:	4637      	mov	r7, r6
   2d24c:	e772      	b.n	2d134 <gnss_interface_setopt+0x9c>
   2d24e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2d250:	2a02      	cmp	r2, #2
   2d252:	d168      	bne.n	2d326 <gnss_interface_setopt+0x28e>
   2d254:	2220      	movs	r2, #32
   2d256:	f241 1603 	movw	r6, #4355	; 0x1103
   2d25a:	881b      	ldrh	r3, [r3, #0]
   2d25c:	9202      	str	r2, [sp, #8]
   2d25e:	f8ad 3013 	strh.w	r3, [sp, #19]
   2d262:	4637      	mov	r7, r6
   2d264:	e766      	b.n	2d134 <gnss_interface_setopt+0x9c>
   2d266:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2d268:	2a01      	cmp	r2, #1
   2d26a:	d15c      	bne.n	2d326 <gnss_interface_setopt+0x28e>
   2d26c:	f241 1603 	movw	r6, #4355	; 0x1103
   2d270:	781b      	ldrb	r3, [r3, #0]
   2d272:	9202      	str	r2, [sp, #8]
   2d274:	f88d 300c 	strb.w	r3, [sp, #12]
   2d278:	4637      	mov	r7, r6
   2d27a:	e75b      	b.n	2d134 <gnss_interface_setopt+0x9c>
   2d27c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2d27e:	2a01      	cmp	r2, #1
   2d280:	d151      	bne.n	2d326 <gnss_interface_setopt+0x28e>
   2d282:	2202      	movs	r2, #2
   2d284:	f241 1603 	movw	r6, #4355	; 0x1103
   2d288:	781b      	ldrb	r3, [r3, #0]
   2d28a:	9202      	str	r2, [sp, #8]
   2d28c:	f88d 300d 	strb.w	r3, [sp, #13]
   2d290:	4637      	mov	r7, r6
   2d292:	e74f      	b.n	2d134 <gnss_interface_setopt+0x9c>
   2d294:	682a      	ldr	r2, [r5, #0]
   2d296:	b292      	uxth	r2, r2
   2d298:	2a02      	cmp	r2, #2
   2d29a:	f47f af0b 	bne.w	2d0b4 <gnss_interface_setopt+0x1c>
   2d29e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2d2a0:	2a04      	cmp	r2, #4
   2d2a2:	d140      	bne.n	2d326 <gnss_interface_setopt+0x28e>
   2d2a4:	2101      	movs	r1, #1
   2d2a6:	f241 0604 	movw	r6, #4100	; 0x1004
   2d2aa:	682a      	ldr	r2, [r5, #0]
   2d2ac:	6818      	ldr	r0, [r3, #0]
   2d2ae:	0c13      	lsrs	r3, r2, #16
   2d2b0:	041b      	lsls	r3, r3, #16
   2d2b2:	f043 0303 	orr.w	r3, r3, #3
   2d2b6:	f8cd 0009 	str.w	r0, [sp, #9]
   2d2ba:	602b      	str	r3, [r5, #0]
   2d2bc:	f88d 1008 	strb.w	r1, [sp, #8]
   2d2c0:	4637      	mov	r7, r6
   2d2c2:	e737      	b.n	2d134 <gnss_interface_setopt+0x9c>
   2d2c4:	682a      	ldr	r2, [r5, #0]
   2d2c6:	b292      	uxth	r2, r2
   2d2c8:	2a04      	cmp	r2, #4
   2d2ca:	d004      	beq.n	2d2d6 <gnss_interface_setopt+0x23e>
   2d2cc:	682a      	ldr	r2, [r5, #0]
   2d2ce:	b292      	uxth	r2, r2
   2d2d0:	2a02      	cmp	r2, #2
   2d2d2:	f47f aeef 	bne.w	2d0b4 <gnss_interface_setopt+0x1c>
   2d2d6:	2200      	movs	r2, #0
   2d2d8:	f88d 2008 	strb.w	r2, [sp, #8]
   2d2dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2d2de:	2a04      	cmp	r2, #4
   2d2e0:	d121      	bne.n	2d326 <gnss_interface_setopt+0x28e>
   2d2e2:	f241 0604 	movw	r6, #4100	; 0x1004
   2d2e6:	681b      	ldr	r3, [r3, #0]
   2d2e8:	4637      	mov	r7, r6
   2d2ea:	f8cd 3009 	str.w	r3, [sp, #9]
   2d2ee:	e721      	b.n	2d134 <gnss_interface_setopt+0x9c>
   2d2f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2d2f2:	2a01      	cmp	r2, #1
   2d2f4:	d117      	bne.n	2d326 <gnss_interface_setopt+0x28e>
   2d2f6:	2240      	movs	r2, #64	; 0x40
   2d2f8:	f241 1603 	movw	r6, #4355	; 0x1103
   2d2fc:	781b      	ldrb	r3, [r3, #0]
   2d2fe:	9202      	str	r2, [sp, #8]
   2d300:	f88d 3015 	strb.w	r3, [sp, #21]
   2d304:	4637      	mov	r7, r6
   2d306:	e715      	b.n	2d134 <gnss_interface_setopt+0x9c>
   2d308:	682b      	ldr	r3, [r5, #0]
   2d30a:	b29b      	uxth	r3, r3
   2d30c:	2b04      	cmp	r3, #4
   2d30e:	f47f aed1 	bne.w	2d0b4 <gnss_interface_setopt+0x1c>
   2d312:	2202      	movs	r2, #2
   2d314:	e700      	b.n	2d118 <gnss_interface_setopt+0x80>
   2d316:	200e      	movs	r0, #14
   2d318:	f7f8 fb30 	bl	2597c <bsd_os_errno_set>
   2d31c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d320:	e76b      	b.n	2d1fa <gnss_interface_setopt+0x162>
   2d322:	2000      	movs	r0, #0
   2d324:	e769      	b.n	2d1fa <gnss_interface_setopt+0x162>
   2d326:	2016      	movs	r0, #22
   2d328:	f7f8 fb28 	bl	2597c <bsd_os_errno_set>
   2d32c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d330:	e6c5      	b.n	2d0be <gnss_interface_setopt+0x26>
   2d332:	b128      	cbz	r0, 2d340 <gnss_interface_setopt+0x2a8>
   2d334:	6803      	ldr	r3, [r0, #0]
   2d336:	b11b      	cbz	r3, 2d340 <gnss_interface_setopt+0x2a8>
   2d338:	4618      	mov	r0, r3
   2d33a:	f002 fa5d 	bl	2f7f8 <rpc_gnss_client_data_free>
   2d33e:	9800      	ldr	r0, [sp, #0]
   2d340:	f002 fa52 	bl	2f7e8 <rpc_gnss_client_message_free>
   2d344:	2023      	movs	r0, #35	; 0x23
   2d346:	f7f8 fb19 	bl	2597c <bsd_os_errno_set>
   2d34a:	682b      	ldr	r3, [r5, #0]
   2d34c:	200e      	movs	r0, #14
   2d34e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2d352:	602b      	str	r3, [r5, #0]
   2d354:	f7f8 fb12 	bl	2597c <bsd_os_errno_set>
   2d358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d35c:	e6af      	b.n	2d0be <gnss_interface_setopt+0x26>
   2d35e:	202a      	movs	r0, #42	; 0x2a
   2d360:	f7f8 fb0c 	bl	2597c <bsd_os_errno_set>
   2d364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d368:	e6a9      	b.n	2d0be <gnss_interface_setopt+0x26>
   2d36a:	2009      	movs	r0, #9
   2d36c:	f7f8 fb06 	bl	2597c <bsd_os_errno_set>
   2d370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d374:	e6a3      	b.n	2d0be <gnss_interface_setopt+0x26>
   2d376:	2073      	movs	r0, #115	; 0x73
   2d378:	f7f8 fb00 	bl	2597c <bsd_os_errno_set>
   2d37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d380:	e69d      	b.n	2d0be <gnss_interface_setopt+0x26>
   2d382:	bf00      	nop
   2d384:	20023d84 	.word	0x20023d84
   2d388:	49765443 	.word	0x49765443
   2d38c:	20020454 	.word	0x20020454
   2d390:	20023d8c 	.word	0x20023d8c
   2d394:	2002894c 	.word	0x2002894c
   2d398:	20023d88 	.word	0x20023d88

0002d39c <gnss_interface_getopt>:
   2d39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d3a0:	4c81      	ldr	r4, [pc, #516]	; (2d5a8 <gnss_interface_getopt+0x20c>)
   2d3a2:	b087      	sub	sp, #28
   2d3a4:	6825      	ldr	r5, [r4, #0]
   2d3a6:	4698      	mov	r8, r3
   2d3a8:	b2ad      	uxth	r5, r5
   2d3aa:	2d02      	cmp	r5, #2
   2d3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2d3ae:	f040 80dd 	bne.w	2d56c <gnss_interface_getopt+0x1d0>
   2d3b2:	6825      	ldr	r5, [r4, #0]
   2d3b4:	03ee      	lsls	r6, r5, #15
   2d3b6:	f100 80eb 	bmi.w	2d590 <gnss_interface_getopt+0x1f4>
   2d3ba:	6825      	ldr	r5, [r4, #0]
   2d3bc:	01ed      	lsls	r5, r5, #7
   2d3be:	f100 80ed 	bmi.w	2d59c <gnss_interface_getopt+0x200>
   2d3c2:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2d3c6:	f040 80d7 	bne.w	2d578 <gnss_interface_getopt+0x1dc>
   2d3ca:	4978      	ldr	r1, [pc, #480]	; (2d5ac <gnss_interface_getopt+0x210>)
   2d3cc:	4288      	cmp	r0, r1
   2d3ce:	f040 80d9 	bne.w	2d584 <gnss_interface_getopt+0x1e8>
   2d3d2:	f1b8 0f00 	cmp.w	r8, #0
   2d3d6:	d00b      	beq.n	2d3f0 <gnss_interface_getopt+0x54>
   2d3d8:	b153      	cbz	r3, 2d3f0 <gnss_interface_getopt+0x54>
   2d3da:	1e57      	subs	r7, r2, #1
   2d3dc:	2f05      	cmp	r7, #5
   2d3de:	d807      	bhi.n	2d3f0 <gnss_interface_getopt+0x54>
   2d3e0:	e8df f007 	tbb	[pc, r7]
   2d3e4:	0f030f0f 	.word	0x0f030f0f
   2d3e8:	0303      	.short	0x0303
   2d3ea:	681b      	ldr	r3, [r3, #0]
   2d3ec:	2b01      	cmp	r3, #1
   2d3ee:	d00b      	beq.n	2d408 <gnss_interface_getopt+0x6c>
   2d3f0:	2016      	movs	r0, #22
   2d3f2:	f7f8 fac3 	bl	2597c <bsd_os_errno_set>
   2d3f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2d3fa:	4628      	mov	r0, r5
   2d3fc:	b007      	add	sp, #28
   2d3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d402:	681b      	ldr	r3, [r3, #0]
   2d404:	2b02      	cmp	r3, #2
   2d406:	d1f3      	bne.n	2d3f0 <gnss_interface_getopt+0x54>
   2d408:	6823      	ldr	r3, [r4, #0]
   2d40a:	2212      	movs	r2, #18
   2d40c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2d410:	2100      	movs	r1, #0
   2d412:	a801      	add	r0, sp, #4
   2d414:	6023      	str	r3, [r4, #0]
   2d416:	f00a f814 	bl	37442 <memset>
   2d41a:	2112      	movs	r1, #18
   2d41c:	4668      	mov	r0, sp
   2d41e:	f002 f9b9 	bl	2f794 <rpc_gnss_client_request_alloc>
   2d422:	4605      	mov	r5, r0
   2d424:	9800      	ldr	r0, [sp, #0]
   2d426:	2d00      	cmp	r5, #0
   2d428:	f040 808a 	bne.w	2d540 <gnss_interface_getopt+0x1a4>
   2d42c:	2800      	cmp	r0, #0
   2d42e:	f000 808e 	beq.w	2d54e <gnss_interface_getopt+0x1b2>
   2d432:	f241 1602 	movw	r6, #4354	; 0x1102
   2d436:	f04f 0e49 	mov.w	lr, #73	; 0x49
   2d43a:	2212      	movs	r2, #18
   2d43c:	f04f 0976 	mov.w	r9, #118	; 0x76
   2d440:	f04f 0b43 	mov.w	fp, #67	; 0x43
   2d444:	f04f 0a54 	mov.w	sl, #84	; 0x54
   2d448:	f8df c168 	ldr.w	ip, [pc, #360]	; 2d5b4 <gnss_interface_getopt+0x218>
   2d44c:	f880 e00f 	strb.w	lr, [r0, #15]
   2d450:	f8bc 3000 	ldrh.w	r3, [ip]
   2d454:	f880 900e 	strb.w	r9, [r0, #14]
   2d458:	3301      	adds	r3, #1
   2d45a:	b29b      	uxth	r3, r3
   2d45c:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   2d460:	f8cd e004 	str.w	lr, [sp, #4]
   2d464:	7145      	strb	r5, [r0, #5]
   2d466:	7185      	strb	r5, [r0, #6]
   2d468:	71c5      	strb	r5, [r0, #7]
   2d46a:	7205      	strb	r5, [r0, #8]
   2d46c:	7245      	strb	r5, [r0, #9]
   2d46e:	7285      	strb	r5, [r0, #10]
   2d470:	72c5      	strb	r5, [r0, #11]
   2d472:	a901      	add	r1, sp, #4
   2d474:	7102      	strb	r2, [r0, #4]
   2d476:	f880 b00c 	strb.w	fp, [r0, #12]
   2d47a:	f880 a00d 	strb.w	sl, [r0, #13]
   2d47e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 2d5b8 <gnss_interface_getopt+0x21c>
   2d482:	6800      	ldr	r0, [r0, #0]
   2d484:	f8ac 3000 	strh.w	r3, [ip]
   2d488:	f009 ffbb 	bl	37402 <memcpy>
   2d48c:	4631      	mov	r1, r6
   2d48e:	9800      	ldr	r0, [sp, #0]
   2d490:	f8c9 5000 	str.w	r5, [r9]
   2d494:	f002 f992 	bl	2f7bc <rpc_gnss_client_request_send>
   2d498:	2800      	cmp	r0, #0
   2d49a:	d15d      	bne.n	2d558 <gnss_interface_getopt+0x1bc>
   2d49c:	4e44      	ldr	r6, [pc, #272]	; (2d5b0 <gnss_interface_getopt+0x214>)
   2d49e:	4d43      	ldr	r5, [pc, #268]	; (2d5ac <gnss_interface_getopt+0x210>)
   2d4a0:	4631      	mov	r1, r6
   2d4a2:	4628      	mov	r0, r5
   2d4a4:	f7f8 f9b2 	bl	2580c <bsd_os_timedwait>
   2d4a8:	6823      	ldr	r3, [r4, #0]
   2d4aa:	01db      	lsls	r3, r3, #7
   2d4ac:	d4f8      	bmi.n	2d4a0 <gnss_interface_getopt+0x104>
   2d4ae:	f8d9 0000 	ldr.w	r0, [r9]
   2d4b2:	b1d8      	cbz	r0, 2d4ec <gnss_interface_getopt+0x150>
   2d4b4:	6825      	ldr	r5, [r4, #0]
   2d4b6:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   2d4ba:	d00f      	beq.n	2d4dc <gnss_interface_getopt+0x140>
   2d4bc:	2f05      	cmp	r7, #5
   2d4be:	d837      	bhi.n	2d530 <gnss_interface_getopt+0x194>
   2d4c0:	e8df f007 	tbb	[pc, r7]
   2d4c4:	2b26201a 	.word	0x2b26201a
   2d4c8:	0331      	.short	0x0331
   2d4ca:	2500      	movs	r5, #0
   2d4cc:	7b43      	ldrb	r3, [r0, #13]
   2d4ce:	f888 3000 	strb.w	r3, [r8]
   2d4d2:	f002 f991 	bl	2f7f8 <rpc_gnss_client_data_free>
   2d4d6:	2300      	movs	r3, #0
   2d4d8:	f8c9 3000 	str.w	r3, [r9]
   2d4dc:	6823      	ldr	r3, [r4, #0]
   2d4de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2d4e2:	6023      	str	r3, [r4, #0]
   2d4e4:	4628      	mov	r0, r5
   2d4e6:	b007      	add	sp, #28
   2d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4ec:	6823      	ldr	r3, [r4, #0]
   2d4ee:	4605      	mov	r5, r0
   2d4f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2d4f4:	6023      	str	r3, [r4, #0]
   2d4f6:	e7f5      	b.n	2d4e4 <gnss_interface_getopt+0x148>
   2d4f8:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   2d4fc:	2500      	movs	r5, #0
   2d4fe:	f8a8 3000 	strh.w	r3, [r8]
   2d502:	e7e6      	b.n	2d4d2 <gnss_interface_getopt+0x136>
   2d504:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   2d508:	2500      	movs	r5, #0
   2d50a:	f8a8 3000 	strh.w	r3, [r8]
   2d50e:	e7e0      	b.n	2d4d2 <gnss_interface_getopt+0x136>
   2d510:	7b83      	ldrb	r3, [r0, #14]
   2d512:	2500      	movs	r5, #0
   2d514:	f888 3000 	strb.w	r3, [r8]
   2d518:	e7db      	b.n	2d4d2 <gnss_interface_getopt+0x136>
   2d51a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   2d51e:	2500      	movs	r5, #0
   2d520:	f8a8 3000 	strh.w	r3, [r8]
   2d524:	e7d5      	b.n	2d4d2 <gnss_interface_getopt+0x136>
   2d526:	7b03      	ldrb	r3, [r0, #12]
   2d528:	2500      	movs	r5, #0
   2d52a:	f888 3000 	strb.w	r3, [r8]
   2d52e:	e7d0      	b.n	2d4d2 <gnss_interface_getopt+0x136>
   2d530:	2016      	movs	r0, #22
   2d532:	f7f8 fa23 	bl	2597c <bsd_os_errno_set>
   2d536:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2d53a:	f8d9 0000 	ldr.w	r0, [r9]
   2d53e:	e7c8      	b.n	2d4d2 <gnss_interface_getopt+0x136>
   2d540:	b128      	cbz	r0, 2d54e <gnss_interface_getopt+0x1b2>
   2d542:	6803      	ldr	r3, [r0, #0]
   2d544:	b11b      	cbz	r3, 2d54e <gnss_interface_getopt+0x1b2>
   2d546:	4618      	mov	r0, r3
   2d548:	f002 f956 	bl	2f7f8 <rpc_gnss_client_data_free>
   2d54c:	9800      	ldr	r0, [sp, #0]
   2d54e:	f002 f94b 	bl	2f7e8 <rpc_gnss_client_message_free>
   2d552:	2023      	movs	r0, #35	; 0x23
   2d554:	f7f8 fa12 	bl	2597c <bsd_os_errno_set>
   2d558:	6823      	ldr	r3, [r4, #0]
   2d55a:	200e      	movs	r0, #14
   2d55c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2d560:	6023      	str	r3, [r4, #0]
   2d562:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2d566:	f7f8 fa09 	bl	2597c <bsd_os_errno_set>
   2d56a:	e746      	b.n	2d3fa <gnss_interface_getopt+0x5e>
   2d56c:	200e      	movs	r0, #14
   2d56e:	f7f8 fa05 	bl	2597c <bsd_os_errno_set>
   2d572:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2d576:	e740      	b.n	2d3fa <gnss_interface_getopt+0x5e>
   2d578:	202a      	movs	r0, #42	; 0x2a
   2d57a:	f7f8 f9ff 	bl	2597c <bsd_os_errno_set>
   2d57e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2d582:	e73a      	b.n	2d3fa <gnss_interface_getopt+0x5e>
   2d584:	2009      	movs	r0, #9
   2d586:	f7f8 f9f9 	bl	2597c <bsd_os_errno_set>
   2d58a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2d58e:	e734      	b.n	2d3fa <gnss_interface_getopt+0x5e>
   2d590:	2005      	movs	r0, #5
   2d592:	f7f8 f9f3 	bl	2597c <bsd_os_errno_set>
   2d596:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2d59a:	e72e      	b.n	2d3fa <gnss_interface_getopt+0x5e>
   2d59c:	2073      	movs	r0, #115	; 0x73
   2d59e:	f7f8 f9ed 	bl	2597c <bsd_os_errno_set>
   2d5a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2d5a6:	e728      	b.n	2d3fa <gnss_interface_getopt+0x5e>
   2d5a8:	20023d84 	.word	0x20023d84
   2d5ac:	49765443 	.word	0x49765443
   2d5b0:	20020454 	.word	0x20020454
   2d5b4:	2002894c 	.word	0x2002894c
   2d5b8:	20023d88 	.word	0x20023d88

0002d5bc <gnss_interface_init>:
   2d5bc:	2100      	movs	r1, #0
   2d5be:	b538      	push	{r3, r4, r5, lr}
   2d5c0:	4c0a      	ldr	r4, [pc, #40]	; (2d5ec <gnss_interface_init+0x30>)
   2d5c2:	4d0b      	ldr	r5, [pc, #44]	; (2d5f0 <gnss_interface_init+0x34>)
   2d5c4:	6822      	ldr	r2, [r4, #0]
   2d5c6:	480b      	ldr	r0, [pc, #44]	; (2d5f4 <gnss_interface_init+0x38>)
   2d5c8:	4b0b      	ldr	r3, [pc, #44]	; (2d5f8 <gnss_interface_init+0x3c>)
   2d5ca:	402a      	ands	r2, r5
   2d5cc:	6022      	str	r2, [r4, #0]
   2d5ce:	8001      	strh	r1, [r0, #0]
   2d5d0:	6019      	str	r1, [r3, #0]
   2d5d2:	f002 f8d9 	bl	2f788 <rpc_gnss_client_init>
   2d5d6:	b938      	cbnz	r0, 2d5e8 <gnss_interface_init+0x2c>
   2d5d8:	2101      	movs	r1, #1
   2d5da:	6823      	ldr	r3, [r4, #0]
   2d5dc:	4a07      	ldr	r2, [pc, #28]	; (2d5fc <gnss_interface_init+0x40>)
   2d5de:	402b      	ands	r3, r5
   2d5e0:	430b      	orrs	r3, r1
   2d5e2:	7011      	strb	r1, [r2, #0]
   2d5e4:	6023      	str	r3, [r4, #0]
   2d5e6:	bd38      	pop	{r3, r4, r5, pc}
   2d5e8:	2003      	movs	r0, #3
   2d5ea:	bd38      	pop	{r3, r4, r5, pc}
   2d5ec:	20023d84 	.word	0x20023d84
   2d5f0:	ffff0000 	.word	0xffff0000
   2d5f4:	2002894c 	.word	0x2002894c
   2d5f8:	20023d88 	.word	0x20023d88
   2d5fc:	2002cb9a 	.word	0x2002cb9a

0002d600 <gnss_interface_open>:
   2d600:	b510      	push	{r4, lr}
   2d602:	4b1c      	ldr	r3, [pc, #112]	; (2d674 <gnss_interface_open+0x74>)
   2d604:	781b      	ldrb	r3, [r3, #0]
   2d606:	b34b      	cbz	r3, 2d65c <gnss_interface_open+0x5c>
   2d608:	2902      	cmp	r1, #2
   2d60a:	d121      	bne.n	2d650 <gnss_interface_open+0x50>
   2d60c:	4c1a      	ldr	r4, [pc, #104]	; (2d678 <gnss_interface_open+0x78>)
   2d60e:	6823      	ldr	r3, [r4, #0]
   2d610:	b29b      	uxth	r3, r3
   2d612:	2b01      	cmp	r3, #1
   2d614:	d116      	bne.n	2d644 <gnss_interface_open+0x44>
   2d616:	6823      	ldr	r3, [r4, #0]
   2d618:	4608      	mov	r0, r1
   2d61a:	0c1b      	lsrs	r3, r3, #16
   2d61c:	041b      	lsls	r3, r3, #16
   2d61e:	f043 0302 	orr.w	r3, r3, #2
   2d622:	2200      	movs	r2, #0
   2d624:	4915      	ldr	r1, [pc, #84]	; (2d67c <gnss_interface_open+0x7c>)
   2d626:	6023      	str	r3, [r4, #0]
   2d628:	f002 f9d0 	bl	2f9cc <packet_handler_create>
   2d62c:	4a14      	ldr	r2, [pc, #80]	; (2d680 <gnss_interface_open+0x80>)
   2d62e:	6010      	str	r0, [r2, #0]
   2d630:	b1d0      	cbz	r0, 2d668 <gnss_interface_open+0x68>
   2d632:	6823      	ldr	r3, [r4, #0]
   2d634:	6802      	ldr	r2, [r0, #0]
   2d636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2d63a:	6812      	ldr	r2, [r2, #0]
   2d63c:	6023      	str	r3, [r4, #0]
   2d63e:	4790      	blx	r2
   2d640:	4810      	ldr	r0, [pc, #64]	; (2d684 <gnss_interface_open+0x84>)
   2d642:	bd10      	pop	{r4, pc}
   2d644:	2005      	movs	r0, #5
   2d646:	f7f8 f999 	bl	2597c <bsd_os_errno_set>
   2d64a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d64e:	bd10      	pop	{r4, pc}
   2d650:	2029      	movs	r0, #41	; 0x29
   2d652:	f7f8 f993 	bl	2597c <bsd_os_errno_set>
   2d656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d65a:	bd10      	pop	{r4, pc}
   2d65c:	2070      	movs	r0, #112	; 0x70
   2d65e:	f7f8 f98d 	bl	2597c <bsd_os_errno_set>
   2d662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d666:	bd10      	pop	{r4, pc}
   2d668:	200e      	movs	r0, #14
   2d66a:	f7f8 f987 	bl	2597c <bsd_os_errno_set>
   2d66e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d672:	bd10      	pop	{r4, pc}
   2d674:	2002cb9a 	.word	0x2002cb9a
   2d678:	20023d84 	.word	0x20023d84
   2d67c:	0002c8dd 	.word	0x0002c8dd
   2d680:	20023d8c 	.word	0x20023d8c
   2d684:	49765443 	.word	0x49765443

0002d688 <gnss_interface_close>:
   2d688:	b530      	push	{r4, r5, lr}
   2d68a:	4b15      	ldr	r3, [pc, #84]	; (2d6e0 <gnss_interface_close+0x58>)
   2d68c:	b085      	sub	sp, #20
   2d68e:	4298      	cmp	r0, r3
   2d690:	d11f      	bne.n	2d6d2 <gnss_interface_close+0x4a>
   2d692:	4c14      	ldr	r4, [pc, #80]	; (2d6e4 <gnss_interface_close+0x5c>)
   2d694:	6822      	ldr	r2, [r4, #0]
   2d696:	b292      	uxth	r2, r2
   2d698:	2a04      	cmp	r2, #4
   2d69a:	d00f      	beq.n	2d6bc <gnss_interface_close+0x34>
   2d69c:	4d12      	ldr	r5, [pc, #72]	; (2d6e8 <gnss_interface_close+0x60>)
   2d69e:	6828      	ldr	r0, [r5, #0]
   2d6a0:	b118      	cbz	r0, 2d6aa <gnss_interface_close+0x22>
   2d6a2:	f002 f9b3 	bl	2fa0c <packet_handler_delete>
   2d6a6:	2300      	movs	r3, #0
   2d6a8:	602b      	str	r3, [r5, #0]
   2d6aa:	2000      	movs	r0, #0
   2d6ac:	6823      	ldr	r3, [r4, #0]
   2d6ae:	0c1b      	lsrs	r3, r3, #16
   2d6b0:	041b      	lsls	r3, r3, #16
   2d6b2:	f043 0301 	orr.w	r3, r3, #1
   2d6b6:	6023      	str	r3, [r4, #0]
   2d6b8:	b005      	add	sp, #20
   2d6ba:	bd30      	pop	{r4, r5, pc}
   2d6bc:	2100      	movs	r1, #0
   2d6be:	ab04      	add	r3, sp, #16
   2d6c0:	f843 1d04 	str.w	r1, [r3, #-4]!
   2d6c4:	9200      	str	r2, [sp, #0]
   2d6c6:	f44f 7101 	mov.w	r1, #516	; 0x204
   2d6ca:	2208      	movs	r2, #8
   2d6cc:	f001 fedc 	bl	2f488 <nrf_setsockopt>
   2d6d0:	e7e4      	b.n	2d69c <gnss_interface_close+0x14>
   2d6d2:	2009      	movs	r0, #9
   2d6d4:	f7f8 f952 	bl	2597c <bsd_os_errno_set>
   2d6d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d6dc:	e7ec      	b.n	2d6b8 <gnss_interface_close+0x30>
   2d6de:	bf00      	nop
   2d6e0:	49765443 	.word	0x49765443
   2d6e4:	20023d84 	.word	0x20023d84
   2d6e8:	20023d8c 	.word	0x20023d8c

0002d6ec <rpc_logobj_client_evt_handler>:
   2d6ec:	b120      	cbz	r0, 2d6f8 <rpc_logobj_client_evt_handler+0xc>
   2d6ee:	f850 1b08 	ldr.w	r1, [r0], #8
   2d6f2:	0c09      	lsrs	r1, r1, #16
   2d6f4:	f7fb b94e 	b.w	28994 <logobj_event_handler>
   2d6f8:	4770      	bx	lr
   2d6fa:	bf00      	nop

0002d6fc <rpc_logobj_client_init>:
   2d6fc:	4801      	ldr	r0, [pc, #4]	; (2d704 <rpc_logobj_client_init+0x8>)
   2d6fe:	f7ff b82f 	b.w	2c760 <rpc_client_register>
   2d702:	bf00      	nop
   2d704:	00038be0 	.word	0x00038be0

0002d708 <rpc_logobj_client_request_alloc>:
   2d708:	2300      	movs	r3, #0
   2d70a:	b510      	push	{r4, lr}
   2d70c:	b082      	sub	sp, #8
   2d70e:	9301      	str	r3, [sp, #4]
   2d710:	b961      	cbnz	r1, 2d72c <rpc_logobj_client_request_alloc+0x24>
   2d712:	b170      	cbz	r0, 2d732 <rpc_logobj_client_request_alloc+0x2a>
   2d714:	4604      	mov	r4, r0
   2d716:	aa01      	add	r2, sp, #4
   2d718:	2009      	movs	r0, #9
   2d71a:	f7ff f89b 	bl	2c854 <rpc_message_alloc>
   2d71e:	b918      	cbnz	r0, 2d728 <rpc_logobj_client_request_alloc+0x20>
   2d720:	9b01      	ldr	r3, [sp, #4]
   2d722:	b10b      	cbz	r3, 2d728 <rpc_logobj_client_request_alloc+0x20>
   2d724:	3308      	adds	r3, #8
   2d726:	6023      	str	r3, [r4, #0]
   2d728:	b002      	add	sp, #8
   2d72a:	bd10      	pop	{r4, pc}
   2d72c:	200f      	movs	r0, #15
   2d72e:	b002      	add	sp, #8
   2d730:	bd10      	pop	{r4, pc}
   2d732:	200e      	movs	r0, #14
   2d734:	b002      	add	sp, #8
   2d736:	bd10      	pop	{r4, pc}

0002d738 <rpc_logobj_client_request_send>:
   2d738:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2d73c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   2d740:	d10b      	bne.n	2d75a <rpc_logobj_client_request_send+0x22>
   2d742:	b160      	cbz	r0, 2d75e <rpc_logobj_client_request_send+0x26>
   2d744:	4603      	mov	r3, r0
   2d746:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2d74a:	2009      	movs	r0, #9
   2d74c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2d750:	f843 1d08 	str.w	r1, [r3, #-8]!
   2d754:	4619      	mov	r1, r3
   2d756:	f7ff b86d 	b.w	2c834 <rpc_message_send>
   2d75a:	200f      	movs	r0, #15
   2d75c:	4770      	bx	lr
   2d75e:	200e      	movs	r0, #14
   2d760:	4770      	bx	lr
   2d762:	bf00      	nop

0002d764 <rpc_logobj_client_message_free>:
   2d764:	b120      	cbz	r0, 2d770 <rpc_logobj_client_message_free+0xc>
   2d766:	f1a0 0108 	sub.w	r1, r0, #8
   2d76a:	2009      	movs	r0, #9
   2d76c:	f7ff b89e 	b.w	2c8ac <rpc_message_free>
   2d770:	200e      	movs	r0, #14
   2d772:	4770      	bx	lr

0002d774 <rpc_logobj_client_data_free>:
   2d774:	b118      	cbz	r0, 2d77e <rpc_logobj_client_data_free+0xa>
   2d776:	4601      	mov	r1, r0
   2d778:	2009      	movs	r0, #9
   2d77a:	f7ff b8a3 	b.w	2c8c4 <rpc_message_data_free>
   2d77e:	200e      	movs	r0, #14
   2d780:	4770      	bx	lr
   2d782:	bf00      	nop

0002d784 <dfu_client_event_handler>:
   2d784:	f850 1b08 	ldr.w	r1, [r0], #8
   2d788:	0c09      	lsrs	r1, r1, #16
   2d78a:	f002 bef5 	b.w	30578 <rpc_dfu_event_handler>
   2d78e:	bf00      	nop

0002d790 <rpc_dfu_client_init>:
   2d790:	4801      	ldr	r0, [pc, #4]	; (2d798 <rpc_dfu_client_init+0x8>)
   2d792:	f7fe bfe5 	b.w	2c760 <rpc_client_register>
   2d796:	bf00      	nop
   2d798:	00038bf0 	.word	0x00038bf0

0002d79c <rpc_dfu_client_request_alloc>:
   2d79c:	2300      	movs	r3, #0
   2d79e:	b510      	push	{r4, lr}
   2d7a0:	b082      	sub	sp, #8
   2d7a2:	9301      	str	r3, [sp, #4]
   2d7a4:	b158      	cbz	r0, 2d7be <rpc_dfu_client_request_alloc+0x22>
   2d7a6:	4604      	mov	r4, r0
   2d7a8:	aa01      	add	r2, sp, #4
   2d7aa:	2006      	movs	r0, #6
   2d7ac:	f7ff f852 	bl	2c854 <rpc_message_alloc>
   2d7b0:	b918      	cbnz	r0, 2d7ba <rpc_dfu_client_request_alloc+0x1e>
   2d7b2:	9b01      	ldr	r3, [sp, #4]
   2d7b4:	b10b      	cbz	r3, 2d7ba <rpc_dfu_client_request_alloc+0x1e>
   2d7b6:	3308      	adds	r3, #8
   2d7b8:	6023      	str	r3, [r4, #0]
   2d7ba:	b002      	add	sp, #8
   2d7bc:	bd10      	pop	{r4, pc}
   2d7be:	2007      	movs	r0, #7
   2d7c0:	b002      	add	sp, #8
   2d7c2:	bd10      	pop	{r4, pc}

0002d7c4 <rpc_dfu_client_request_send>:
   2d7c4:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   2d7c8:	d10b      	bne.n	2d7e2 <rpc_dfu_client_request_send+0x1e>
   2d7ca:	b160      	cbz	r0, 2d7e6 <rpc_dfu_client_request_send+0x22>
   2d7cc:	4603      	mov	r3, r0
   2d7ce:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2d7d2:	2006      	movs	r0, #6
   2d7d4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2d7d8:	f843 1d08 	str.w	r1, [r3, #-8]!
   2d7dc:	4619      	mov	r1, r3
   2d7de:	f7ff b829 	b.w	2c834 <rpc_message_send>
   2d7e2:	200f      	movs	r0, #15
   2d7e4:	4770      	bx	lr
   2d7e6:	2007      	movs	r0, #7
   2d7e8:	4770      	bx	lr
   2d7ea:	bf00      	nop

0002d7ec <rpc_dfu_client_message_free>:
   2d7ec:	b120      	cbz	r0, 2d7f8 <rpc_dfu_client_message_free+0xc>
   2d7ee:	f1a0 0108 	sub.w	r1, r0, #8
   2d7f2:	2006      	movs	r0, #6
   2d7f4:	f7ff b85a 	b.w	2c8ac <rpc_message_free>
   2d7f8:	2007      	movs	r0, #7
   2d7fa:	4770      	bx	lr

0002d7fc <rpc_dfu_client_data_free>:
   2d7fc:	b118      	cbz	r0, 2d806 <rpc_dfu_client_data_free+0xa>
   2d7fe:	4601      	mov	r1, r0
   2d800:	2006      	movs	r0, #6
   2d802:	f7ff b85f 	b.w	2c8c4 <rpc_message_data_free>
   2d806:	2007      	movs	r0, #7
   2d808:	4770      	bx	lr
   2d80a:	bf00      	nop

0002d80c <packet_free_cb>:
   2d80c:	6800      	ldr	r0, [r0, #0]
   2d80e:	f003 bc0d 	b.w	3102c <rpc_at_client_data_free>
   2d812:	bf00      	nop

0002d814 <at_interface_write>:
   2d814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d818:	b083      	sub	sp, #12
   2d81a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2d81c:	2c00      	cmp	r4, #0
   2d81e:	d16c      	bne.n	2d8fa <at_interface_write+0xe6>
   2d820:	4688      	mov	r8, r1
   2d822:	4615      	mov	r5, r2
   2d824:	461e      	mov	r6, r3
   2d826:	4607      	mov	r7, r0
   2d828:	f003 fad2 	bl	30dd0 <interface_socket_from_handle_get>
   2d82c:	4604      	mov	r4, r0
   2d82e:	2e00      	cmp	r6, #0
   2d830:	d137      	bne.n	2d8a2 <at_interface_write+0x8e>
   2d832:	2800      	cmp	r0, #0
   2d834:	d067      	beq.n	2d906 <at_interface_write+0xf2>
   2d836:	6803      	ldr	r3, [r0, #0]
   2d838:	039b      	lsls	r3, r3, #14
   2d83a:	d564      	bpl.n	2d906 <at_interface_write+0xf2>
   2d83c:	6803      	ldr	r3, [r0, #0]
   2d83e:	4629      	mov	r1, r5
   2d840:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2d844:	6003      	str	r3, [r0, #0]
   2d846:	6803      	ldr	r3, [r0, #0]
   2d848:	4668      	mov	r0, sp
   2d84a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2d84e:	6023      	str	r3, [r4, #0]
   2d850:	f003 fbc2 	bl	30fd8 <rpc_at_client_request_alloc>
   2d854:	4606      	mov	r6, r0
   2d856:	4638      	mov	r0, r7
   2d858:	f003 faba 	bl	30dd0 <interface_socket_from_handle_get>
   2d85c:	4681      	mov	r9, r0
   2d85e:	bb56      	cbnz	r6, 2d8b6 <at_interface_write+0xa2>
   2d860:	2304      	movs	r3, #4
   2d862:	9800      	ldr	r0, [sp, #0]
   2d864:	7203      	strb	r3, [r0, #8]
   2d866:	7246      	strb	r6, [r0, #9]
   2d868:	7286      	strb	r6, [r0, #10]
   2d86a:	72c6      	strb	r6, [r0, #11]
   2d86c:	60c7      	str	r7, [r0, #12]
   2d86e:	bb25      	cbnz	r5, 2d8ba <at_interface_write+0xa6>
   2d870:	2101      	movs	r1, #1
   2d872:	f003 fbc5 	bl	31000 <rpc_at_client_request_send>
   2d876:	bb78      	cbnz	r0, 2d8d8 <at_interface_write+0xc4>
   2d878:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   2d87c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2d880:	2900      	cmp	r1, #0
   2d882:	bf08      	it	eq
   2d884:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2d888:	ab02      	add	r3, sp, #8
   2d88a:	f843 1d04 	str.w	r1, [r3, #-4]!
   2d88e:	4638      	mov	r0, r7
   2d890:	4611      	mov	r1, r2
   2d892:	f003 fa29 	bl	30ce8 <interface_socket_wait>
   2d896:	b320      	cbz	r0, 2d8e2 <at_interface_write+0xce>
   2d898:	6823      	ldr	r3, [r4, #0]
   2d89a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2d89e:	6023      	str	r3, [r4, #0]
   2d8a0:	e002      	b.n	2d8a8 <at_interface_write+0x94>
   2d8a2:	b390      	cbz	r0, 2d90a <at_interface_write+0xf6>
   2d8a4:	6803      	ldr	r3, [r0, #0]
   2d8a6:	202d      	movs	r0, #45	; 0x2d
   2d8a8:	f7f8 f868 	bl	2597c <bsd_os_errno_set>
   2d8ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d8b0:	b003      	add	sp, #12
   2d8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d8b6:	200c      	movs	r0, #12
   2d8b8:	e7ee      	b.n	2d898 <at_interface_write+0x84>
   2d8ba:	4641      	mov	r1, r8
   2d8bc:	6800      	ldr	r0, [r0, #0]
   2d8be:	462a      	mov	r2, r5
   2d8c0:	f009 fd9f 	bl	37402 <memcpy>
   2d8c4:	2101      	movs	r1, #1
   2d8c6:	9800      	ldr	r0, [sp, #0]
   2d8c8:	f003 fb9a 	bl	31000 <rpc_at_client_request_send>
   2d8cc:	2800      	cmp	r0, #0
   2d8ce:	d0d3      	beq.n	2d878 <at_interface_write+0x64>
   2d8d0:	9b00      	ldr	r3, [sp, #0]
   2d8d2:	6818      	ldr	r0, [r3, #0]
   2d8d4:	f003 fbaa 	bl	3102c <rpc_at_client_data_free>
   2d8d8:	9800      	ldr	r0, [sp, #0]
   2d8da:	f003 fb9f 	bl	3101c <rpc_at_client_message_free>
   2d8de:	2023      	movs	r0, #35	; 0x23
   2d8e0:	e7da      	b.n	2d898 <at_interface_write+0x84>
   2d8e2:	4638      	mov	r0, r7
   2d8e4:	f003 fa74 	bl	30dd0 <interface_socket_from_handle_get>
   2d8e8:	4603      	mov	r3, r0
   2d8ea:	b120      	cbz	r0, 2d8f6 <at_interface_write+0xe2>
   2d8ec:	6840      	ldr	r0, [r0, #4]
   2d8ee:	b110      	cbz	r0, 2d8f6 <at_interface_write+0xe2>
   2d8f0:	2200      	movs	r2, #0
   2d8f2:	605a      	str	r2, [r3, #4]
   2d8f4:	e7d0      	b.n	2d898 <at_interface_write+0x84>
   2d8f6:	4628      	mov	r0, r5
   2d8f8:	e7da      	b.n	2d8b0 <at_interface_write+0x9c>
   2d8fa:	2038      	movs	r0, #56	; 0x38
   2d8fc:	f7f8 f83e 	bl	2597c <bsd_os_errno_set>
   2d900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d904:	e7d4      	b.n	2d8b0 <at_interface_write+0x9c>
   2d906:	2016      	movs	r0, #22
   2d908:	e7ce      	b.n	2d8a8 <at_interface_write+0x94>
   2d90a:	202d      	movs	r0, #45	; 0x2d
   2d90c:	e7cc      	b.n	2d8a8 <at_interface_write+0x94>
   2d90e:	bf00      	nop

0002d910 <at_interface_init>:
   2d910:	b508      	push	{r3, lr}
   2d912:	f003 fb5b 	bl	30fcc <rpc_at_client_init>
   2d916:	b910      	cbnz	r0, 2d91e <at_interface_init+0xe>
   2d918:	2201      	movs	r2, #1
   2d91a:	4b01      	ldr	r3, [pc, #4]	; (2d920 <at_interface_init+0x10>)
   2d91c:	701a      	strb	r2, [r3, #0]
   2d91e:	bd08      	pop	{r3, pc}
   2d920:	2002cb9b 	.word	0x2002cb9b

0002d924 <at_interface_open>:
   2d924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d928:	2600      	movs	r6, #0
   2d92a:	4b34      	ldr	r3, [pc, #208]	; (2d9fc <at_interface_open+0xd8>)
   2d92c:	b084      	sub	sp, #16
   2d92e:	781b      	ldrb	r3, [r3, #0]
   2d930:	9601      	str	r6, [sp, #4]
   2d932:	2b00      	cmp	r3, #0
   2d934:	d05c      	beq.n	2d9f0 <at_interface_open+0xcc>
   2d936:	2902      	cmp	r1, #2
   2d938:	460d      	mov	r5, r1
   2d93a:	d153      	bne.n	2d9e4 <at_interface_open+0xc0>
   2d93c:	4680      	mov	r8, r0
   2d93e:	4617      	mov	r7, r2
   2d940:	a801      	add	r0, sp, #4
   2d942:	4a2f      	ldr	r2, [pc, #188]	; (2da00 <at_interface_open+0xdc>)
   2d944:	f003 f91e 	bl	30b84 <interface_socket_allocate>
   2d948:	9b01      	ldr	r3, [sp, #4]
   2d94a:	4604      	mov	r4, r0
   2d94c:	b3c3      	cbz	r3, 2d9c0 <at_interface_open+0x9c>
   2d94e:	615f      	str	r7, [r3, #20]
   2d950:	4631      	mov	r1, r6
   2d952:	e9c3 8503 	strd	r8, r5, [r3, #12]
   2d956:	a802      	add	r0, sp, #8
   2d958:	f003 fb3e 	bl	30fd8 <rpc_at_client_request_alloc>
   2d95c:	4606      	mov	r6, r0
   2d95e:	4620      	mov	r0, r4
   2d960:	f003 fa36 	bl	30dd0 <interface_socket_from_handle_get>
   2d964:	4607      	mov	r7, r0
   2d966:	bb16      	cbnz	r6, 2d9ae <at_interface_open+0x8a>
   2d968:	2304      	movs	r3, #4
   2d96a:	9802      	ldr	r0, [sp, #8]
   2d96c:	2105      	movs	r1, #5
   2d96e:	7246      	strb	r6, [r0, #9]
   2d970:	7286      	strb	r6, [r0, #10]
   2d972:	72c6      	strb	r6, [r0, #11]
   2d974:	7203      	strb	r3, [r0, #8]
   2d976:	60c4      	str	r4, [r0, #12]
   2d978:	f003 fb42 	bl	31000 <rpc_at_client_request_send>
   2d97c:	4606      	mov	r6, r0
   2d97e:	bb60      	cbnz	r0, 2d9da <at_interface_open+0xb6>
   2d980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d982:	ab04      	add	r3, sp, #16
   2d984:	2a00      	cmp	r2, #0
   2d986:	bf08      	it	eq
   2d988:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   2d98c:	4629      	mov	r1, r5
   2d98e:	f843 2d04 	str.w	r2, [r3, #-4]!
   2d992:	4620      	mov	r0, r4
   2d994:	462a      	mov	r2, r5
   2d996:	f003 f9a7 	bl	30ce8 <interface_socket_wait>
   2d99a:	4605      	mov	r5, r0
   2d99c:	b940      	cbnz	r0, 2d9b0 <at_interface_open+0x8c>
   2d99e:	4620      	mov	r0, r4
   2d9a0:	f003 fa16 	bl	30dd0 <interface_socket_from_handle_get>
   2d9a4:	b180      	cbz	r0, 2d9c8 <at_interface_open+0xa4>
   2d9a6:	6845      	ldr	r5, [r0, #4]
   2d9a8:	b175      	cbz	r5, 2d9c8 <at_interface_open+0xa4>
   2d9aa:	6046      	str	r6, [r0, #4]
   2d9ac:	e000      	b.n	2d9b0 <at_interface_open+0x8c>
   2d9ae:	250c      	movs	r5, #12
   2d9b0:	4620      	mov	r0, r4
   2d9b2:	f003 f94b 	bl	30c4c <interface_socket_free>
   2d9b6:	4628      	mov	r0, r5
   2d9b8:	f7f7 ffe0 	bl	2597c <bsd_os_errno_set>
   2d9bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d9c0:	4620      	mov	r0, r4
   2d9c2:	b004      	add	sp, #16
   2d9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d9c8:	4620      	mov	r0, r4
   2d9ca:	9a01      	ldr	r2, [sp, #4]
   2d9cc:	6813      	ldr	r3, [r2, #0]
   2d9ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2d9d2:	6013      	str	r3, [r2, #0]
   2d9d4:	b004      	add	sp, #16
   2d9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d9da:	9802      	ldr	r0, [sp, #8]
   2d9dc:	f003 fb1e 	bl	3101c <rpc_at_client_message_free>
   2d9e0:	2523      	movs	r5, #35	; 0x23
   2d9e2:	e7e5      	b.n	2d9b0 <at_interface_open+0x8c>
   2d9e4:	2029      	movs	r0, #41	; 0x29
   2d9e6:	f7f7 ffc9 	bl	2597c <bsd_os_errno_set>
   2d9ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d9ee:	e7e7      	b.n	2d9c0 <at_interface_open+0x9c>
   2d9f0:	2070      	movs	r0, #112	; 0x70
   2d9f2:	f7f7 ffc3 	bl	2597c <bsd_os_errno_set>
   2d9f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d9fa:	e7e1      	b.n	2d9c0 <at_interface_open+0x9c>
   2d9fc:	2002cb9b 	.word	0x2002cb9b
   2da00:	0002d80d 	.word	0x0002d80d

0002da04 <at_interface_close>:
   2da04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2da08:	b082      	sub	sp, #8
   2da0a:	4606      	mov	r6, r0
   2da0c:	f003 f9e0 	bl	30dd0 <interface_socket_from_handle_get>
   2da10:	2800      	cmp	r0, #0
   2da12:	d051      	beq.n	2dab8 <at_interface_close+0xb4>
   2da14:	230d      	movs	r3, #13
   2da16:	6807      	ldr	r7, [r0, #0]
   2da18:	6003      	str	r3, [r0, #0]
   2da1a:	6803      	ldr	r3, [r0, #0]
   2da1c:	4604      	mov	r4, r0
   2da1e:	039b      	lsls	r3, r3, #14
   2da20:	d42e      	bmi.n	2da80 <at_interface_close+0x7c>
   2da22:	2100      	movs	r1, #0
   2da24:	4668      	mov	r0, sp
   2da26:	f003 fad7 	bl	30fd8 <rpc_at_client_request_alloc>
   2da2a:	4605      	mov	r5, r0
   2da2c:	4630      	mov	r0, r6
   2da2e:	f003 f9cf 	bl	30dd0 <interface_socket_from_handle_get>
   2da32:	4680      	mov	r8, r0
   2da34:	bb75      	cbnz	r5, 2da94 <at_interface_close+0x90>
   2da36:	2304      	movs	r3, #4
   2da38:	9800      	ldr	r0, [sp, #0]
   2da3a:	2106      	movs	r1, #6
   2da3c:	7203      	strb	r3, [r0, #8]
   2da3e:	7245      	strb	r5, [r0, #9]
   2da40:	7285      	strb	r5, [r0, #10]
   2da42:	72c5      	strb	r5, [r0, #11]
   2da44:	60c6      	str	r6, [r0, #12]
   2da46:	f003 fadb 	bl	31000 <rpc_at_client_request_send>
   2da4a:	b9f0      	cbnz	r0, 2da8a <at_interface_close+0x86>
   2da4c:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   2da50:	220e      	movs	r2, #14
   2da52:	2900      	cmp	r1, #0
   2da54:	bf08      	it	eq
   2da56:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2da5a:	ab02      	add	r3, sp, #8
   2da5c:	f843 1d04 	str.w	r1, [r3, #-4]!
   2da60:	4630      	mov	r0, r6
   2da62:	4611      	mov	r1, r2
   2da64:	f003 f940 	bl	30ce8 <interface_socket_wait>
   2da68:	4605      	mov	r5, r0
   2da6a:	b1a8      	cbz	r0, 2da98 <at_interface_close+0x94>
   2da6c:	6027      	str	r7, [r4, #0]
   2da6e:	4628      	mov	r0, r5
   2da70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2da74:	f7f7 ff82 	bl	2597c <bsd_os_errno_set>
   2da78:	4628      	mov	r0, r5
   2da7a:	b002      	add	sp, #8
   2da7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2da80:	6803      	ldr	r3, [r0, #0]
   2da82:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2da86:	6003      	str	r3, [r0, #0]
   2da88:	e7cb      	b.n	2da22 <at_interface_close+0x1e>
   2da8a:	9800      	ldr	r0, [sp, #0]
   2da8c:	f003 fac6 	bl	3101c <rpc_at_client_message_free>
   2da90:	2523      	movs	r5, #35	; 0x23
   2da92:	e7eb      	b.n	2da6c <at_interface_close+0x68>
   2da94:	250c      	movs	r5, #12
   2da96:	e7e9      	b.n	2da6c <at_interface_close+0x68>
   2da98:	4630      	mov	r0, r6
   2da9a:	f003 f999 	bl	30dd0 <interface_socket_from_handle_get>
   2da9e:	b120      	cbz	r0, 2daaa <at_interface_close+0xa6>
   2daa0:	6843      	ldr	r3, [r0, #4]
   2daa2:	b113      	cbz	r3, 2daaa <at_interface_close+0xa6>
   2daa4:	6045      	str	r5, [r0, #4]
   2daa6:	461d      	mov	r5, r3
   2daa8:	e7e0      	b.n	2da6c <at_interface_close+0x68>
   2daaa:	4630      	mov	r0, r6
   2daac:	f003 f8ce 	bl	30c4c <interface_socket_free>
   2dab0:	4628      	mov	r0, r5
   2dab2:	b002      	add	sp, #8
   2dab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dab8:	2516      	movs	r5, #22
   2daba:	e7d8      	b.n	2da6e <at_interface_close+0x6a>

0002dabc <at_interface_read>:
   2dabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2dac0:	b087      	sub	sp, #28
   2dac2:	4688      	mov	r8, r1
   2dac4:	4615      	mov	r5, r2
   2dac6:	461e      	mov	r6, r3
   2dac8:	4607      	mov	r7, r0
   2daca:	f003 f981 	bl	30dd0 <interface_socket_from_handle_get>
   2dace:	2800      	cmp	r0, #0
   2dad0:	f000 8084 	beq.w	2dbdc <at_interface_read+0x120>
   2dad4:	2300      	movs	r3, #0
   2dad6:	4604      	mov	r4, r0
   2dad8:	e9cd 8502 	strd	r8, r5, [sp, #8]
   2dadc:	e9cd 3304 	strd	r3, r3, [sp, #16]
   2dae0:	2e00      	cmp	r6, #0
   2dae2:	d12d      	bne.n	2db40 <at_interface_read+0x84>
   2dae4:	f016 0502 	ands.w	r5, r6, #2
   2dae8:	d148      	bne.n	2db7c <at_interface_read+0xc0>
   2daea:	46a8      	mov	r8, r5
   2daec:	6823      	ldr	r3, [r4, #0]
   2daee:	69e0      	ldr	r0, [r4, #28]
   2daf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2daf4:	6023      	str	r3, [r4, #0]
   2daf6:	6803      	ldr	r3, [r0, #0]
   2daf8:	4632      	mov	r2, r6
   2dafa:	689b      	ldr	r3, [r3, #8]
   2dafc:	a902      	add	r1, sp, #8
   2dafe:	4798      	blx	r3
   2db00:	f1b0 0900 	subs.w	r9, r0, #0
   2db04:	da2a      	bge.n	2db5c <at_interface_read+0xa0>
   2db06:	2d00      	cmp	r5, #0
   2db08:	d15e      	bne.n	2dbc8 <at_interface_read+0x10c>
   2db0a:	6a25      	ldr	r5, [r4, #32]
   2db0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2db10:	2d00      	cmp	r5, #0
   2db12:	bf08      	it	eq
   2db14:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   2db18:	4611      	mov	r1, r2
   2db1a:	ab01      	add	r3, sp, #4
   2db1c:	4638      	mov	r0, r7
   2db1e:	9501      	str	r5, [sp, #4]
   2db20:	f003 f8e2 	bl	30ce8 <interface_socket_wait>
   2db24:	4605      	mov	r5, r0
   2db26:	2800      	cmp	r0, #0
   2db28:	d1e0      	bne.n	2daec <at_interface_read+0x30>
   2db2a:	4638      	mov	r0, r7
   2db2c:	f003 f950 	bl	30dd0 <interface_socket_from_handle_get>
   2db30:	2800      	cmp	r0, #0
   2db32:	d0db      	beq.n	2daec <at_interface_read+0x30>
   2db34:	6845      	ldr	r5, [r0, #4]
   2db36:	2d00      	cmp	r5, #0
   2db38:	d0d8      	beq.n	2daec <at_interface_read+0x30>
   2db3a:	f8c0 8004 	str.w	r8, [r0, #4]
   2db3e:	e7d5      	b.n	2daec <at_interface_read+0x30>
   2db40:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   2db44:	d1ce      	bne.n	2dae4 <at_interface_read+0x28>
   2db46:	252d      	movs	r5, #45	; 0x2d
   2db48:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2db4c:	4628      	mov	r0, r5
   2db4e:	f7f7 ff15 	bl	2597c <bsd_os_errno_set>
   2db52:	4648      	mov	r0, r9
   2db54:	b007      	add	sp, #28
   2db56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2db5a:	2500      	movs	r5, #0
   2db5c:	69e0      	ldr	r0, [r4, #28]
   2db5e:	6803      	ldr	r3, [r0, #0]
   2db60:	68db      	ldr	r3, [r3, #12]
   2db62:	4798      	blx	r3
   2db64:	3001      	adds	r0, #1
   2db66:	d003      	beq.n	2db70 <at_interface_read+0xb4>
   2db68:	6823      	ldr	r3, [r4, #0]
   2db6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2db6e:	6023      	str	r3, [r4, #0]
   2db70:	2d00      	cmp	r5, #0
   2db72:	d1eb      	bne.n	2db4c <at_interface_read+0x90>
   2db74:	4648      	mov	r0, r9
   2db76:	b007      	add	sp, #28
   2db78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2db7c:	6823      	ldr	r3, [r4, #0]
   2db7e:	69e0      	ldr	r0, [r4, #28]
   2db80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2db84:	6023      	str	r3, [r4, #0]
   2db86:	6803      	ldr	r3, [r0, #0]
   2db88:	4632      	mov	r2, r6
   2db8a:	689b      	ldr	r3, [r3, #8]
   2db8c:	a902      	add	r1, sp, #8
   2db8e:	4798      	blx	r3
   2db90:	f1b0 0900 	subs.w	r9, r0, #0
   2db94:	dae1      	bge.n	2db5a <at_interface_read+0x9e>
   2db96:	69e0      	ldr	r0, [r4, #28]
   2db98:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2db9c:	6803      	ldr	r3, [r0, #0]
   2db9e:	68db      	ldr	r3, [r3, #12]
   2dba0:	d10a      	bne.n	2dbb8 <at_interface_read+0xfc>
   2dba2:	2523      	movs	r5, #35	; 0x23
   2dba4:	4798      	blx	r3
   2dba6:	3001      	adds	r0, #1
   2dba8:	d0ce      	beq.n	2db48 <at_interface_read+0x8c>
   2dbaa:	6823      	ldr	r3, [r4, #0]
   2dbac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2dbb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2dbb4:	6023      	str	r3, [r4, #0]
   2dbb6:	e7db      	b.n	2db70 <at_interface_read+0xb4>
   2dbb8:	4798      	blx	r3
   2dbba:	3001      	adds	r0, #1
   2dbbc:	d0c9      	beq.n	2db52 <at_interface_read+0x96>
   2dbbe:	6823      	ldr	r3, [r4, #0]
   2dbc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2dbc4:	6023      	str	r3, [r4, #0]
   2dbc6:	e7c4      	b.n	2db52 <at_interface_read+0x96>
   2dbc8:	69e0      	ldr	r0, [r4, #28]
   2dbca:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2dbce:	6803      	ldr	r3, [r0, #0]
   2dbd0:	68db      	ldr	r3, [r3, #12]
   2dbd2:	d0e7      	beq.n	2dba4 <at_interface_read+0xe8>
   2dbd4:	4798      	blx	r3
   2dbd6:	3001      	adds	r0, #1
   2dbd8:	d1c6      	bne.n	2db68 <at_interface_read+0xac>
   2dbda:	e7b7      	b.n	2db4c <at_interface_read+0x90>
   2dbdc:	2516      	movs	r5, #22
   2dbde:	e7b3      	b.n	2db48 <at_interface_read+0x8c>

0002dbe0 <at_interface_getopt>:
   2dbe0:	f003 b964 	b.w	30eac <interface_socket_getopt>

0002dbe4 <at_interface_setopt>:
   2dbe4:	f003 b91c 	b.w	30e20 <interface_socket_setopt>

0002dbe8 <rpc_at_event_handler>:
   2dbe8:	b570      	push	{r4, r5, r6, lr}
   2dbea:	4606      	mov	r6, r0
   2dbec:	b084      	sub	sp, #16
   2dbee:	68c0      	ldr	r0, [r0, #12]
   2dbf0:	460d      	mov	r5, r1
   2dbf2:	f003 f8ed 	bl	30dd0 <interface_socket_from_handle_get>
   2dbf6:	4604      	mov	r4, r0
   2dbf8:	b348      	cbz	r0, 2dc4e <rpc_at_event_handler+0x66>
   2dbfa:	6803      	ldr	r3, [r0, #0]
   2dbfc:	b29b      	uxth	r3, r3
   2dbfe:	2b01      	cmp	r3, #1
   2dc00:	d01f      	beq.n	2dc42 <rpc_at_event_handler+0x5a>
   2dc02:	6803      	ldr	r3, [r0, #0]
   2dc04:	b29b      	uxth	r3, r3
   2dc06:	2b0d      	cmp	r3, #13
   2dc08:	d029      	beq.n	2dc5e <rpc_at_event_handler+0x76>
   2dc0a:	6803      	ldr	r3, [r0, #0]
   2dc0c:	b29b      	uxth	r3, r3
   2dc0e:	2b02      	cmp	r3, #2
   2dc10:	d02d      	beq.n	2dc6e <rpc_at_event_handler+0x86>
   2dc12:	3d03      	subs	r5, #3
   2dc14:	2d01      	cmp	r5, #1
   2dc16:	d817      	bhi.n	2dc48 <rpc_at_event_handler+0x60>
   2dc18:	2500      	movs	r5, #0
   2dc1a:	6873      	ldr	r3, [r6, #4]
   2dc1c:	6832      	ldr	r2, [r6, #0]
   2dc1e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   2dc22:	e9cd 2300 	strd	r2, r3, [sp]
   2dc26:	69e0      	ldr	r0, [r4, #28]
   2dc28:	4669      	mov	r1, sp
   2dc2a:	6803      	ldr	r3, [r0, #0]
   2dc2c:	685b      	ldr	r3, [r3, #4]
   2dc2e:	4798      	blx	r3
   2dc30:	3001      	adds	r0, #1
   2dc32:	d019      	beq.n	2dc68 <rpc_at_event_handler+0x80>
   2dc34:	4628      	mov	r0, r5
   2dc36:	6823      	ldr	r3, [r4, #0]
   2dc38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2dc3c:	6023      	str	r3, [r4, #0]
   2dc3e:	b004      	add	sp, #16
   2dc40:	bd70      	pop	{r4, r5, r6, pc}
   2dc42:	2d02      	cmp	r5, #2
   2dc44:	d1e5      	bne.n	2dc12 <rpc_at_event_handler+0x2a>
   2dc46:	6005      	str	r5, [r0, #0]
   2dc48:	2000      	movs	r0, #0
   2dc4a:	b004      	add	sp, #16
   2dc4c:	bd70      	pop	{r4, r5, r6, pc}
   2dc4e:	6830      	ldr	r0, [r6, #0]
   2dc50:	2800      	cmp	r0, #0
   2dc52:	d0f9      	beq.n	2dc48 <rpc_at_event_handler+0x60>
   2dc54:	f003 f9ea 	bl	3102c <rpc_at_client_data_free>
   2dc58:	4620      	mov	r0, r4
   2dc5a:	b004      	add	sp, #16
   2dc5c:	bd70      	pop	{r4, r5, r6, pc}
   2dc5e:	2d02      	cmp	r5, #2
   2dc60:	d1d7      	bne.n	2dc12 <rpc_at_event_handler+0x2a>
   2dc62:	230e      	movs	r3, #14
   2dc64:	6003      	str	r3, [r0, #0]
   2dc66:	e7ef      	b.n	2dc48 <rpc_at_event_handler+0x60>
   2dc68:	2002      	movs	r0, #2
   2dc6a:	b004      	add	sp, #16
   2dc6c:	bd70      	pop	{r4, r5, r6, pc}
   2dc6e:	6803      	ldr	r3, [r0, #0]
   2dc70:	029b      	lsls	r3, r3, #10
   2dc72:	d5ce      	bpl.n	2dc12 <rpc_at_event_handler+0x2a>
   2dc74:	2d02      	cmp	r5, #2
   2dc76:	d1cc      	bne.n	2dc12 <rpc_at_event_handler+0x2a>
   2dc78:	6803      	ldr	r3, [r0, #0]
   2dc7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2dc7e:	6003      	str	r3, [r0, #0]
   2dc80:	6803      	ldr	r3, [r0, #0]
   2dc82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2dc86:	6003      	str	r3, [r0, #0]
   2dc88:	e7de      	b.n	2dc48 <rpc_at_event_handler+0x60>
   2dc8a:	bf00      	nop

0002dc8c <ok_rsp_parser>:
   2dc8c:	2000      	movs	r0, #0
   2dc8e:	4770      	bx	lr

0002dc90 <pdn_state_get_parser>:
   2dc90:	2200      	movs	r2, #0
   2dc92:	b570      	push	{r4, r5, r6, lr}
   2dc94:	780b      	ldrb	r3, [r1, #0]
   2dc96:	b084      	sub	sp, #16
   2dc98:	460e      	mov	r6, r1
   2dc9a:	e9cd 2200 	strd	r2, r2, [sp]
   2dc9e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   2dca2:	b323      	cbz	r3, 2dcee <pdn_state_get_parser+0x5e>
   2dca4:	460c      	mov	r4, r1
   2dca6:	2b20      	cmp	r3, #32
   2dca8:	460d      	mov	r5, r1
   2dcaa:	d01b      	beq.n	2dce4 <pdn_state_get_parser+0x54>
   2dcac:	700b      	strb	r3, [r1, #0]
   2dcae:	3201      	adds	r2, #1
   2dcb0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2dcb4:	18b1      	adds	r1, r6, r2
   2dcb6:	460d      	mov	r5, r1
   2dcb8:	2b00      	cmp	r3, #0
   2dcba:	d1f4      	bne.n	2dca6 <pdn_state_get_parser+0x16>
   2dcbc:	2200      	movs	r2, #0
   2dcbe:	4b0d      	ldr	r3, [pc, #52]	; (2dcf4 <pdn_state_get_parser+0x64>)
   2dcc0:	702a      	strb	r2, [r5, #0]
   2dcc2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2dcc6:	4a0c      	ldr	r2, [pc, #48]	; (2dcf8 <pdn_state_get_parser+0x68>)
   2dcc8:	681b      	ldr	r3, [r3, #0]
   2dcca:	2110      	movs	r1, #16
   2dccc:	4668      	mov	r0, sp
   2dcce:	f005 facf 	bl	33270 <sniprintf>
   2dcd2:	4669      	mov	r1, sp
   2dcd4:	4630      	mov	r0, r6
   2dcd6:	f009 fd47 	bl	37768 <strstr>
   2dcda:	3000      	adds	r0, #0
   2dcdc:	bf18      	it	ne
   2dcde:	2001      	movne	r0, #1
   2dce0:	b004      	add	sp, #16
   2dce2:	bd70      	pop	{r4, r5, r6, pc}
   2dce4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2dce8:	2b00      	cmp	r3, #0
   2dcea:	d1dc      	bne.n	2dca6 <pdn_state_get_parser+0x16>
   2dcec:	e7e6      	b.n	2dcbc <pdn_state_get_parser+0x2c>
   2dcee:	460d      	mov	r5, r1
   2dcf0:	e7e4      	b.n	2dcbc <pdn_state_get_parser+0x2c>
   2dcf2:	bf00      	nop
   2dcf4:	20023e94 	.word	0x20023e94
   2dcf8:	00038cbc 	.word	0x00038cbc

0002dcfc <pdn_id_get_parser>:
   2dcfc:	b570      	push	{r4, r5, r6, lr}
   2dcfe:	780b      	ldrb	r3, [r1, #0]
   2dd00:	4606      	mov	r6, r0
   2dd02:	b313      	cbz	r3, 2dd4a <pdn_id_get_parser+0x4e>
   2dd04:	4608      	mov	r0, r1
   2dd06:	2400      	movs	r4, #0
   2dd08:	460a      	mov	r2, r1
   2dd0a:	2b20      	cmp	r3, #32
   2dd0c:	4615      	mov	r5, r2
   2dd0e:	d017      	beq.n	2dd40 <pdn_id_get_parser+0x44>
   2dd10:	7013      	strb	r3, [r2, #0]
   2dd12:	3401      	adds	r4, #1
   2dd14:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2dd18:	190a      	adds	r2, r1, r4
   2dd1a:	4615      	mov	r5, r2
   2dd1c:	2b00      	cmp	r3, #0
   2dd1e:	d1f4      	bne.n	2dd0a <pdn_id_get_parser+0xe>
   2dd20:	2300      	movs	r3, #0
   2dd22:	4608      	mov	r0, r1
   2dd24:	702b      	strb	r3, [r5, #0]
   2dd26:	213a      	movs	r1, #58	; 0x3a
   2dd28:	f009 fcbd 	bl	376a6 <strchr>
   2dd2c:	b130      	cbz	r0, 2dd3c <pdn_id_get_parser+0x40>
   2dd2e:	3001      	adds	r0, #1
   2dd30:	f009 fb47 	bl	373c2 <atoi>
   2dd34:	4b06      	ldr	r3, [pc, #24]	; (2dd50 <pdn_id_get_parser+0x54>)
   2dd36:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   2dd3a:	6058      	str	r0, [r3, #4]
   2dd3c:	2000      	movs	r0, #0
   2dd3e:	bd70      	pop	{r4, r5, r6, pc}
   2dd40:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2dd44:	2b00      	cmp	r3, #0
   2dd46:	d1e0      	bne.n	2dd0a <pdn_id_get_parser+0xe>
   2dd48:	e7ea      	b.n	2dd20 <pdn_id_get_parser+0x24>
   2dd4a:	460d      	mov	r5, r1
   2dd4c:	e7e8      	b.n	2dd20 <pdn_id_get_parser+0x24>
   2dd4e:	bf00      	nop
   2dd50:	20023e94 	.word	0x20023e94

0002dd54 <context_create_parser>:
   2dd54:	b570      	push	{r4, r5, r6, lr}
   2dd56:	780b      	ldrb	r3, [r1, #0]
   2dd58:	4606      	mov	r6, r0
   2dd5a:	b313      	cbz	r3, 2dda2 <context_create_parser+0x4e>
   2dd5c:	4608      	mov	r0, r1
   2dd5e:	2400      	movs	r4, #0
   2dd60:	460a      	mov	r2, r1
   2dd62:	2b20      	cmp	r3, #32
   2dd64:	4615      	mov	r5, r2
   2dd66:	d017      	beq.n	2dd98 <context_create_parser+0x44>
   2dd68:	7013      	strb	r3, [r2, #0]
   2dd6a:	3401      	adds	r4, #1
   2dd6c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2dd70:	190a      	adds	r2, r1, r4
   2dd72:	4615      	mov	r5, r2
   2dd74:	2b00      	cmp	r3, #0
   2dd76:	d1f4      	bne.n	2dd62 <context_create_parser+0xe>
   2dd78:	2300      	movs	r3, #0
   2dd7a:	4608      	mov	r0, r1
   2dd7c:	702b      	strb	r3, [r5, #0]
   2dd7e:	213a      	movs	r1, #58	; 0x3a
   2dd80:	f009 fc91 	bl	376a6 <strchr>
   2dd84:	b130      	cbz	r0, 2dd94 <context_create_parser+0x40>
   2dd86:	4b08      	ldr	r3, [pc, #32]	; (2dda8 <context_create_parser+0x54>)
   2dd88:	3001      	adds	r0, #1
   2dd8a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   2dd8e:	f009 fb18 	bl	373c2 <atoi>
   2dd92:	6020      	str	r0, [r4, #0]
   2dd94:	2000      	movs	r0, #0
   2dd96:	bd70      	pop	{r4, r5, r6, pc}
   2dd98:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2dd9c:	2b00      	cmp	r3, #0
   2dd9e:	d1e0      	bne.n	2dd62 <context_create_parser+0xe>
   2dda0:	e7ea      	b.n	2dd78 <context_create_parser+0x24>
   2dda2:	460d      	mov	r5, r1
   2dda4:	e7e8      	b.n	2dd78 <context_create_parser+0x24>
   2dda6:	bf00      	nop
   2dda8:	20023e94 	.word	0x20023e94

0002ddac <pdn_interface_init>:
   2ddac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ddb0:	b510      	push	{r4, lr}
   2ddb2:	4c0b      	ldr	r4, [pc, #44]	; (2dde0 <pdn_interface_init+0x34>)
   2ddb4:	2228      	movs	r2, #40	; 0x28
   2ddb6:	2100      	movs	r1, #0
   2ddb8:	480a      	ldr	r0, [pc, #40]	; (2dde4 <pdn_interface_init+0x38>)
   2ddba:	6023      	str	r3, [r4, #0]
   2ddbc:	f009 fb41 	bl	37442 <memset>
   2ddc0:	f240 2201 	movw	r2, #513	; 0x201
   2ddc4:	2102      	movs	r1, #2
   2ddc6:	2066      	movs	r0, #102	; 0x66
   2ddc8:	f7ff fdac 	bl	2d924 <at_interface_open>
   2ddcc:	2800      	cmp	r0, #0
   2ddce:	6020      	str	r0, [r4, #0]
   2ddd0:	db04      	blt.n	2dddc <pdn_interface_init+0x30>
   2ddd2:	2201      	movs	r2, #1
   2ddd4:	4b04      	ldr	r3, [pc, #16]	; (2dde8 <pdn_interface_init+0x3c>)
   2ddd6:	2000      	movs	r0, #0
   2ddd8:	701a      	strb	r2, [r3, #0]
   2ddda:	bd10      	pop	{r4, pc}
   2dddc:	2003      	movs	r0, #3
   2ddde:	bd10      	pop	{r4, pc}
   2dde0:	20023d90 	.word	0x20023d90
   2dde4:	20023e94 	.word	0x20023e94
   2dde8:	2002cb9c 	.word	0x2002cb9c

0002ddec <pdn_interface_open>:
   2ddec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ddf0:	4b68      	ldr	r3, [pc, #416]	; (2df94 <pdn_interface_open+0x1a8>)
   2ddf2:	b083      	sub	sp, #12
   2ddf4:	781b      	ldrb	r3, [r3, #0]
   2ddf6:	2b00      	cmp	r3, #0
   2ddf8:	f000 80c5 	beq.w	2df86 <pdn_interface_open+0x19a>
   2ddfc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2de00:	f040 80b0 	bne.w	2df64 <pdn_interface_open+0x178>
   2de04:	4c64      	ldr	r4, [pc, #400]	; (2df98 <pdn_interface_open+0x1ac>)
   2de06:	6825      	ldr	r5, [r4, #0]
   2de08:	b34d      	cbz	r5, 2de5e <pdn_interface_open+0x72>
   2de0a:	6863      	ldr	r3, [r4, #4]
   2de0c:	2b00      	cmp	r3, #0
   2de0e:	f000 809b 	beq.w	2df48 <pdn_interface_open+0x15c>
   2de12:	68a3      	ldr	r3, [r4, #8]
   2de14:	2b00      	cmp	r3, #0
   2de16:	f000 8099 	beq.w	2df4c <pdn_interface_open+0x160>
   2de1a:	68e3      	ldr	r3, [r4, #12]
   2de1c:	2b00      	cmp	r3, #0
   2de1e:	f000 8097 	beq.w	2df50 <pdn_interface_open+0x164>
   2de22:	6923      	ldr	r3, [r4, #16]
   2de24:	2b00      	cmp	r3, #0
   2de26:	f000 8095 	beq.w	2df54 <pdn_interface_open+0x168>
   2de2a:	6963      	ldr	r3, [r4, #20]
   2de2c:	2b00      	cmp	r3, #0
   2de2e:	f000 8093 	beq.w	2df58 <pdn_interface_open+0x16c>
   2de32:	69a3      	ldr	r3, [r4, #24]
   2de34:	2b00      	cmp	r3, #0
   2de36:	f000 8091 	beq.w	2df5c <pdn_interface_open+0x170>
   2de3a:	69e3      	ldr	r3, [r4, #28]
   2de3c:	2b00      	cmp	r3, #0
   2de3e:	f000 808f 	beq.w	2df60 <pdn_interface_open+0x174>
   2de42:	6a23      	ldr	r3, [r4, #32]
   2de44:	b153      	cbz	r3, 2de5c <pdn_interface_open+0x70>
   2de46:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2de48:	2509      	movs	r5, #9
   2de4a:	b143      	cbz	r3, 2de5e <pdn_interface_open+0x72>
   2de4c:	200c      	movs	r0, #12
   2de4e:	f7f7 fd95 	bl	2597c <bsd_os_errno_set>
   2de52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2de56:	b003      	add	sp, #12
   2de58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2de5c:	2508      	movs	r5, #8
   2de5e:	2020      	movs	r0, #32
   2de60:	f002 faae 	bl	303c0 <nrf_malloc>
   2de64:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   2de68:	2800      	cmp	r0, #0
   2de6a:	d0ef      	beq.n	2de4c <pdn_interface_open+0x60>
   2de6c:	2220      	movs	r2, #32
   2de6e:	2100      	movs	r1, #0
   2de70:	f009 fae7 	bl	37442 <memset>
   2de74:	2101      	movs	r1, #1
   2de76:	2003      	movs	r0, #3
   2de78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2de7c:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   2de80:	4b46      	ldr	r3, [pc, #280]	; (2df9c <pdn_interface_open+0x1b0>)
   2de82:	6091      	str	r1, [r2, #8]
   2de84:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
   2de88:	4a45      	ldr	r2, [pc, #276]	; (2dfa0 <pdn_interface_open+0x1b4>)
   2de8a:	60c8      	str	r0, [r1, #12]
   2de8c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   2de90:	f44f 7180 	mov.w	r1, #256	; 0x100
   2de94:	6047      	str	r7, [r0, #4]
   2de96:	f8df 8118 	ldr.w	r8, [pc, #280]	; 2dfb0 <pdn_interface_open+0x1c4>
   2de9a:	4842      	ldr	r0, [pc, #264]	; (2dfa4 <pdn_interface_open+0x1b8>)
   2de9c:	f005 f9e8 	bl	33270 <sniprintf>
   2dea0:	4840      	ldr	r0, [pc, #256]	; (2dfa4 <pdn_interface_open+0x1b8>)
   2dea2:	f8d8 9000 	ldr.w	r9, [r8]
   2dea6:	2600      	movs	r6, #0
   2dea8:	f7eb f8e2 	bl	19070 <strlen>
   2deac:	4633      	mov	r3, r6
   2deae:	4602      	mov	r2, r0
   2deb0:	493c      	ldr	r1, [pc, #240]	; (2dfa4 <pdn_interface_open+0x1b8>)
   2deb2:	4648      	mov	r0, r9
   2deb4:	9601      	str	r6, [sp, #4]
   2deb6:	9600      	str	r6, [sp, #0]
   2deb8:	f7ff fcac 	bl	2d814 <at_interface_write>
   2debc:	4681      	mov	r9, r0
   2debe:	4839      	ldr	r0, [pc, #228]	; (2dfa4 <pdn_interface_open+0x1b8>)
   2dec0:	f7eb f8d6 	bl	19070 <strlen>
   2dec4:	4548      	cmp	r0, r9
   2dec6:	d153      	bne.n	2df70 <pdn_interface_open+0x184>
   2dec8:	4633      	mov	r3, r6
   2deca:	e9cd 6600 	strd	r6, r6, [sp]
   2dece:	f44f 7280 	mov.w	r2, #256	; 0x100
   2ded2:	4934      	ldr	r1, [pc, #208]	; (2dfa4 <pdn_interface_open+0x1b8>)
   2ded4:	f8d8 0000 	ldr.w	r0, [r8]
   2ded8:	f7ff fdf0 	bl	2dabc <at_interface_read>
   2dedc:	4606      	mov	r6, r0
   2dede:	4832      	ldr	r0, [pc, #200]	; (2dfa8 <pdn_interface_open+0x1bc>)
   2dee0:	f7eb f8c6 	bl	19070 <strlen>
   2dee4:	4286      	cmp	r6, r0
   2dee6:	db15      	blt.n	2df14 <pdn_interface_open+0x128>
   2dee8:	4602      	mov	r2, r0
   2deea:	492e      	ldr	r1, [pc, #184]	; (2dfa4 <pdn_interface_open+0x1b8>)
   2deec:	482e      	ldr	r0, [pc, #184]	; (2dfa8 <pdn_interface_open+0x1bc>)
   2deee:	f009 fbef 	bl	376d0 <strncmp>
   2def2:	b978      	cbnz	r0, 2df14 <pdn_interface_open+0x128>
   2def4:	492b      	ldr	r1, [pc, #172]	; (2dfa4 <pdn_interface_open+0x1b8>)
   2def6:	4628      	mov	r0, r5
   2def8:	f7ff ff2c 	bl	2dd54 <context_create_parser>
   2defc:	b9b0      	cbnz	r0, 2df2c <pdn_interface_open+0x140>
   2defe:	2202      	movs	r2, #2
   2df00:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   2df04:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   2df08:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   2df0c:	609a      	str	r2, [r3, #8]
   2df0e:	b003      	add	sp, #12
   2df10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2df14:	4825      	ldr	r0, [pc, #148]	; (2dfac <pdn_interface_open+0x1c0>)
   2df16:	f7eb f8ab 	bl	19070 <strlen>
   2df1a:	4922      	ldr	r1, [pc, #136]	; (2dfa4 <pdn_interface_open+0x1b8>)
   2df1c:	4602      	mov	r2, r0
   2df1e:	4823      	ldr	r0, [pc, #140]	; (2dfac <pdn_interface_open+0x1c0>)
   2df20:	f009 fbd6 	bl	376d0 <strncmp>
   2df24:	b960      	cbnz	r0, 2df40 <pdn_interface_open+0x154>
   2df26:	2008      	movs	r0, #8
   2df28:	f7f7 fd28 	bl	2597c <bsd_os_errno_set>
   2df2c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   2df30:	f002 fa50 	bl	303d4 <nrf_free>
   2df34:	2300      	movs	r3, #0
   2df36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2df3a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   2df3e:	e78a      	b.n	2de56 <pdn_interface_open+0x6a>
   2df40:	2005      	movs	r0, #5
   2df42:	f7f7 fd1b 	bl	2597c <bsd_os_errno_set>
   2df46:	e7f1      	b.n	2df2c <pdn_interface_open+0x140>
   2df48:	2501      	movs	r5, #1
   2df4a:	e788      	b.n	2de5e <pdn_interface_open+0x72>
   2df4c:	2502      	movs	r5, #2
   2df4e:	e786      	b.n	2de5e <pdn_interface_open+0x72>
   2df50:	2503      	movs	r5, #3
   2df52:	e784      	b.n	2de5e <pdn_interface_open+0x72>
   2df54:	2504      	movs	r5, #4
   2df56:	e782      	b.n	2de5e <pdn_interface_open+0x72>
   2df58:	2505      	movs	r5, #5
   2df5a:	e780      	b.n	2de5e <pdn_interface_open+0x72>
   2df5c:	2506      	movs	r5, #6
   2df5e:	e77e      	b.n	2de5e <pdn_interface_open+0x72>
   2df60:	2507      	movs	r5, #7
   2df62:	e77c      	b.n	2de5e <pdn_interface_open+0x72>
   2df64:	2029      	movs	r0, #41	; 0x29
   2df66:	f7f7 fd09 	bl	2597c <bsd_os_errno_set>
   2df6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2df6e:	e772      	b.n	2de56 <pdn_interface_open+0x6a>
   2df70:	2005      	movs	r0, #5
   2df72:	f7f7 fd03 	bl	2597c <bsd_os_errno_set>
   2df76:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   2df7a:	f002 fa2b 	bl	303d4 <nrf_free>
   2df7e:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   2df82:	4638      	mov	r0, r7
   2df84:	e767      	b.n	2de56 <pdn_interface_open+0x6a>
   2df86:	2070      	movs	r0, #112	; 0x70
   2df88:	f7f7 fcf8 	bl	2597c <bsd_os_errno_set>
   2df8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2df90:	e761      	b.n	2de56 <pdn_interface_open+0x6a>
   2df92:	bf00      	nop
   2df94:	2002cb9c 	.word	0x2002cb9c
   2df98:	20023e94 	.word	0x20023e94
   2df9c:	00038c98 	.word	0x00038c98
   2dfa0:	00038ca4 	.word	0x00038ca4
   2dfa4:	20023d94 	.word	0x20023d94
   2dfa8:	00038ca8 	.word	0x00038ca8
   2dfac:	00038cb4 	.word	0x00038cb4
   2dfb0:	20023d90 	.word	0x20023d90

0002dfb4 <pdn_interface_connect>:
   2dfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dfb8:	b085      	sub	sp, #20
   2dfba:	2900      	cmp	r1, #0
   2dfbc:	f000 81f3 	beq.w	2e3a6 <pdn_interface_connect+0x3f2>
   2dfc0:	2a64      	cmp	r2, #100	; 0x64
   2dfc2:	4690      	mov	r8, r2
   2dfc4:	f200 81ef 	bhi.w	2e3a6 <pdn_interface_connect+0x3f2>
   2dfc8:	0c03      	lsrs	r3, r0, #16
   2dfca:	4ab1      	ldr	r2, [pc, #708]	; (2e290 <pdn_interface_connect+0x2dc>)
   2dfcc:	041b      	lsls	r3, r3, #16
   2dfce:	4293      	cmp	r3, r2
   2dfd0:	f040 8154 	bne.w	2e27c <pdn_interface_connect+0x2c8>
   2dfd4:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   2dfd8:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   2dfdc:	2c09      	cmp	r4, #9
   2dfde:	f300 814d 	bgt.w	2e27c <pdn_interface_connect+0x2c8>
   2dfe2:	4fac      	ldr	r7, [pc, #688]	; (2e294 <pdn_interface_connect+0x2e0>)
   2dfe4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2dfe8:	2b00      	cmp	r3, #0
   2dfea:	f000 8147 	beq.w	2e27c <pdn_interface_connect+0x2c8>
   2dfee:	689a      	ldr	r2, [r3, #8]
   2dff0:	2a00      	cmp	r2, #0
   2dff2:	f000 8143 	beq.w	2e27c <pdn_interface_connect+0x2c8>
   2dff6:	689b      	ldr	r3, [r3, #8]
   2dff8:	2b02      	cmp	r3, #2
   2dffa:	f040 813f 	bne.w	2e27c <pdn_interface_connect+0x2c8>
   2dffe:	4da6      	ldr	r5, [pc, #664]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e000:	4ba6      	ldr	r3, [pc, #664]	; (2e29c <pdn_interface_connect+0x2e8>)
   2e002:	4aa7      	ldr	r2, [pc, #668]	; (2e2a0 <pdn_interface_connect+0x2ec>)
   2e004:	4689      	mov	r9, r1
   2e006:	4628      	mov	r0, r5
   2e008:	f44f 7180 	mov.w	r1, #256	; 0x100
   2e00c:	f005 f930 	bl	33270 <sniprintf>
   2e010:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e014:	4606      	mov	r6, r0
   2e016:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2e01a:	681b      	ldr	r3, [r3, #0]
   2e01c:	4aa1      	ldr	r2, [pc, #644]	; (2e2a4 <pdn_interface_connect+0x2f0>)
   2e01e:	1828      	adds	r0, r5, r0
   2e020:	f005 f926 	bl	33270 <sniprintf>
   2e024:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e028:	4406      	add	r6, r0
   2e02a:	68db      	ldr	r3, [r3, #12]
   2e02c:	f003 0203 	and.w	r2, r3, #3
   2e030:	2a03      	cmp	r2, #3
   2e032:	f000 811a 	beq.w	2e26a <pdn_interface_connect+0x2b6>
   2e036:	079b      	lsls	r3, r3, #30
   2e038:	bf4c      	ite	mi
   2e03a:	4b9b      	ldrmi	r3, [pc, #620]	; (2e2a8 <pdn_interface_connect+0x2f4>)
   2e03c:	4b9b      	ldrpl	r3, [pc, #620]	; (2e2ac <pdn_interface_connect+0x2f8>)
   2e03e:	19a8      	adds	r0, r5, r6
   2e040:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   2e044:	4a9a      	ldr	r2, [pc, #616]	; (2e2b0 <pdn_interface_connect+0x2fc>)
   2e046:	f005 f913 	bl	33270 <sniprintf>
   2e04a:	1833      	adds	r3, r6, r0
   2e04c:	eb08 0203 	add.w	r2, r8, r3
   2e050:	2afd      	cmp	r2, #253	; 0xfd
   2e052:	f300 81a5 	bgt.w	2e3a0 <pdn_interface_connect+0x3ec>
   2e056:	2122      	movs	r1, #34	; 0x22
   2e058:	1c5e      	adds	r6, r3, #1
   2e05a:	54e9      	strb	r1, [r5, r3]
   2e05c:	4642      	mov	r2, r8
   2e05e:	19a8      	adds	r0, r5, r6
   2e060:	4649      	mov	r1, r9
   2e062:	f009 fb47 	bl	376f4 <strncpy>
   2e066:	eb08 0306 	add.w	r3, r8, r6
   2e06a:	18ea      	adds	r2, r5, r3
   2e06c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   2e070:	b902      	cbnz	r2, 2e074 <pdn_interface_connect+0xc0>
   2e072:	3b01      	subs	r3, #1
   2e074:	2600      	movs	r6, #0
   2e076:	2122      	movs	r1, #34	; 0x22
   2e078:	18ea      	adds	r2, r5, r3
   2e07a:	f8df a254 	ldr.w	sl, [pc, #596]	; 2e2d0 <pdn_interface_connect+0x31c>
   2e07e:	54e9      	strb	r1, [r5, r3]
   2e080:	4885      	ldr	r0, [pc, #532]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e082:	7056      	strb	r6, [r2, #1]
   2e084:	f8da b000 	ldr.w	fp, [sl]
   2e088:	f7ea fff2 	bl	19070 <strlen>
   2e08c:	4633      	mov	r3, r6
   2e08e:	4602      	mov	r2, r0
   2e090:	4981      	ldr	r1, [pc, #516]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e092:	4658      	mov	r0, fp
   2e094:	9601      	str	r6, [sp, #4]
   2e096:	9600      	str	r6, [sp, #0]
   2e098:	f7ff fbbc 	bl	2d814 <at_interface_write>
   2e09c:	4683      	mov	fp, r0
   2e09e:	487e      	ldr	r0, [pc, #504]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e0a0:	f7ea ffe6 	bl	19070 <strlen>
   2e0a4:	4558      	cmp	r0, fp
   2e0a6:	d008      	beq.n	2e0ba <pdn_interface_connect+0x106>
   2e0a8:	2005      	movs	r0, #5
   2e0aa:	f7f7 fc67 	bl	2597c <bsd_os_errno_set>
   2e0ae:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2e0b2:	4658      	mov	r0, fp
   2e0b4:	b005      	add	sp, #20
   2e0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e0ba:	4633      	mov	r3, r6
   2e0bc:	e9cd 6600 	strd	r6, r6, [sp]
   2e0c0:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e0c4:	4974      	ldr	r1, [pc, #464]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e0c6:	f8da 0000 	ldr.w	r0, [sl]
   2e0ca:	f7ff fcf7 	bl	2dabc <at_interface_read>
   2e0ce:	4606      	mov	r6, r0
   2e0d0:	4878      	ldr	r0, [pc, #480]	; (2e2b4 <pdn_interface_connect+0x300>)
   2e0d2:	f7ea ffcd 	bl	19070 <strlen>
   2e0d6:	4286      	cmp	r6, r0
   2e0d8:	da0f      	bge.n	2e0fa <pdn_interface_connect+0x146>
   2e0da:	4877      	ldr	r0, [pc, #476]	; (2e2b8 <pdn_interface_connect+0x304>)
   2e0dc:	f7ea ffc8 	bl	19070 <strlen>
   2e0e0:	496d      	ldr	r1, [pc, #436]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e0e2:	4602      	mov	r2, r0
   2e0e4:	4874      	ldr	r0, [pc, #464]	; (2e2b8 <pdn_interface_connect+0x304>)
   2e0e6:	f009 faf3 	bl	376d0 <strncmp>
   2e0ea:	2800      	cmp	r0, #0
   2e0ec:	d1dc      	bne.n	2e0a8 <pdn_interface_connect+0xf4>
   2e0ee:	2008      	movs	r0, #8
   2e0f0:	f7f7 fc44 	bl	2597c <bsd_os_errno_set>
   2e0f4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2e0f8:	e7db      	b.n	2e0b2 <pdn_interface_connect+0xfe>
   2e0fa:	4602      	mov	r2, r0
   2e0fc:	4966      	ldr	r1, [pc, #408]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e0fe:	486d      	ldr	r0, [pc, #436]	; (2e2b4 <pdn_interface_connect+0x300>)
   2e100:	f009 fae6 	bl	376d0 <strncmp>
   2e104:	2800      	cmp	r0, #0
   2e106:	d1e8      	bne.n	2e0da <pdn_interface_connect+0x126>
   2e108:	4963      	ldr	r1, [pc, #396]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e10a:	4620      	mov	r0, r4
   2e10c:	f7ff fdbe 	bl	2dc8c <ok_rsp_parser>
   2e110:	4683      	mov	fp, r0
   2e112:	2800      	cmp	r0, #0
   2e114:	d1cd      	bne.n	2e0b2 <pdn_interface_connect+0xfe>
   2e116:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e11a:	7c1b      	ldrb	r3, [r3, #16]
   2e11c:	2b00      	cmp	r3, #0
   2e11e:	f040 80d9 	bne.w	2e2d4 <pdn_interface_connect+0x320>
   2e122:	4b66      	ldr	r3, [pc, #408]	; (2e2bc <pdn_interface_connect+0x308>)
   2e124:	4a5e      	ldr	r2, [pc, #376]	; (2e2a0 <pdn_interface_connect+0x2ec>)
   2e126:	f44f 7180 	mov.w	r1, #256	; 0x100
   2e12a:	485b      	ldr	r0, [pc, #364]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e12c:	f005 f8a0 	bl	33270 <sniprintf>
   2e130:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e134:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2e138:	4a61      	ldr	r2, [pc, #388]	; (2e2c0 <pdn_interface_connect+0x30c>)
   2e13a:	681b      	ldr	r3, [r3, #0]
   2e13c:	4428      	add	r0, r5
   2e13e:	f005 f897 	bl	33270 <sniprintf>
   2e142:	f8da 3000 	ldr.w	r3, [sl]
   2e146:	4854      	ldr	r0, [pc, #336]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e148:	2600      	movs	r6, #0
   2e14a:	9303      	str	r3, [sp, #12]
   2e14c:	f7ea ff90 	bl	19070 <strlen>
   2e150:	9b03      	ldr	r3, [sp, #12]
   2e152:	4602      	mov	r2, r0
   2e154:	4950      	ldr	r1, [pc, #320]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e156:	4618      	mov	r0, r3
   2e158:	9601      	str	r6, [sp, #4]
   2e15a:	4633      	mov	r3, r6
   2e15c:	9600      	str	r6, [sp, #0]
   2e15e:	f7ff fb59 	bl	2d814 <at_interface_write>
   2e162:	9003      	str	r0, [sp, #12]
   2e164:	484c      	ldr	r0, [pc, #304]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e166:	f7ea ff83 	bl	19070 <strlen>
   2e16a:	9b03      	ldr	r3, [sp, #12]
   2e16c:	4298      	cmp	r0, r3
   2e16e:	d19b      	bne.n	2e0a8 <pdn_interface_connect+0xf4>
   2e170:	4633      	mov	r3, r6
   2e172:	e9cd 6600 	strd	r6, r6, [sp]
   2e176:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e17a:	4947      	ldr	r1, [pc, #284]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e17c:	f8da 0000 	ldr.w	r0, [sl]
   2e180:	f7ff fc9c 	bl	2dabc <at_interface_read>
   2e184:	4606      	mov	r6, r0
   2e186:	484b      	ldr	r0, [pc, #300]	; (2e2b4 <pdn_interface_connect+0x300>)
   2e188:	f7ea ff72 	bl	19070 <strlen>
   2e18c:	4286      	cmp	r6, r0
   2e18e:	dba4      	blt.n	2e0da <pdn_interface_connect+0x126>
   2e190:	4602      	mov	r2, r0
   2e192:	4941      	ldr	r1, [pc, #260]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e194:	4847      	ldr	r0, [pc, #284]	; (2e2b4 <pdn_interface_connect+0x300>)
   2e196:	f009 fa9b 	bl	376d0 <strncmp>
   2e19a:	4606      	mov	r6, r0
   2e19c:	2800      	cmp	r0, #0
   2e19e:	d19c      	bne.n	2e0da <pdn_interface_connect+0x126>
   2e1a0:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   2e1a4:	f108 0320 	add.w	r3, r8, #32
   2e1a8:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   2e1ac:	4413      	add	r3, r2
   2e1ae:	4419      	add	r1, r3
   2e1b0:	f002 f91c 	bl	303ec <nrf_realloc>
   2e1b4:	2800      	cmp	r0, #0
   2e1b6:	f000 80fc 	beq.w	2e3b2 <pdn_interface_connect+0x3fe>
   2e1ba:	2303      	movs	r3, #3
   2e1bc:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   2e1c0:	6083      	str	r3, [r0, #8]
   2e1c2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e1c6:	4649      	mov	r1, r9
   2e1c8:	f8c3 801c 	str.w	r8, [r3, #28]
   2e1cc:	f857 c024 	ldr.w	ip, [r7, r4, lsl #2]
   2e1d0:	4642      	mov	r2, r8
   2e1d2:	e9dc 0305 	ldrd	r0, r3, [ip, #20]
   2e1d6:	4418      	add	r0, r3
   2e1d8:	4603      	mov	r3, r0
   2e1da:	3320      	adds	r3, #32
   2e1dc:	eb0c 0003 	add.w	r0, ip, r3
   2e1e0:	f009 f90f 	bl	37402 <memcpy>
   2e1e4:	4b37      	ldr	r3, [pc, #220]	; (2e2c4 <pdn_interface_connect+0x310>)
   2e1e6:	4a2e      	ldr	r2, [pc, #184]	; (2e2a0 <pdn_interface_connect+0x2ec>)
   2e1e8:	f44f 7180 	mov.w	r1, #256	; 0x100
   2e1ec:	482a      	ldr	r0, [pc, #168]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e1ee:	f005 f83f 	bl	33270 <sniprintf>
   2e1f2:	4601      	mov	r1, r0
   2e1f4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e1f8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   2e1fc:	681b      	ldr	r3, [r3, #0]
   2e1fe:	4a30      	ldr	r2, [pc, #192]	; (2e2c0 <pdn_interface_connect+0x30c>)
   2e200:	1828      	adds	r0, r5, r0
   2e202:	f005 f835 	bl	33270 <sniprintf>
   2e206:	4824      	ldr	r0, [pc, #144]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e208:	f8da 5000 	ldr.w	r5, [sl]
   2e20c:	f7ea ff30 	bl	19070 <strlen>
   2e210:	4633      	mov	r3, r6
   2e212:	4602      	mov	r2, r0
   2e214:	4920      	ldr	r1, [pc, #128]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e216:	4628      	mov	r0, r5
   2e218:	9601      	str	r6, [sp, #4]
   2e21a:	9600      	str	r6, [sp, #0]
   2e21c:	f7ff fafa 	bl	2d814 <at_interface_write>
   2e220:	4605      	mov	r5, r0
   2e222:	481d      	ldr	r0, [pc, #116]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e224:	f7ea ff24 	bl	19070 <strlen>
   2e228:	42a8      	cmp	r0, r5
   2e22a:	f040 80d2 	bne.w	2e3d2 <pdn_interface_connect+0x41e>
   2e22e:	4633      	mov	r3, r6
   2e230:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e234:	4918      	ldr	r1, [pc, #96]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e236:	f8da 0000 	ldr.w	r0, [sl]
   2e23a:	e9cd 6600 	strd	r6, r6, [sp]
   2e23e:	f7ff fc3d 	bl	2dabc <at_interface_read>
   2e242:	4605      	mov	r5, r0
   2e244:	4820      	ldr	r0, [pc, #128]	; (2e2c8 <pdn_interface_connect+0x314>)
   2e246:	f7ea ff13 	bl	19070 <strlen>
   2e24a:	4285      	cmp	r5, r0
   2e24c:	f2c0 80b4 	blt.w	2e3b8 <pdn_interface_connect+0x404>
   2e250:	4602      	mov	r2, r0
   2e252:	4911      	ldr	r1, [pc, #68]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e254:	481c      	ldr	r0, [pc, #112]	; (2e2c8 <pdn_interface_connect+0x314>)
   2e256:	f009 fa3b 	bl	376d0 <strncmp>
   2e25a:	2800      	cmp	r0, #0
   2e25c:	f040 80ac 	bne.w	2e3b8 <pdn_interface_connect+0x404>
   2e260:	4620      	mov	r0, r4
   2e262:	490d      	ldr	r1, [pc, #52]	; (2e298 <pdn_interface_connect+0x2e4>)
   2e264:	f7ff fd4a 	bl	2dcfc <pdn_id_get_parser>
   2e268:	e723      	b.n	2e0b2 <pdn_interface_connect+0xfe>
   2e26a:	4b18      	ldr	r3, [pc, #96]	; (2e2cc <pdn_interface_connect+0x318>)
   2e26c:	4a10      	ldr	r2, [pc, #64]	; (2e2b0 <pdn_interface_connect+0x2fc>)
   2e26e:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   2e272:	19a8      	adds	r0, r5, r6
   2e274:	f004 fffc 	bl	33270 <sniprintf>
   2e278:	1833      	adds	r3, r6, r0
   2e27a:	e6e7      	b.n	2e04c <pdn_interface_connect+0x98>
   2e27c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2e280:	2009      	movs	r0, #9
   2e282:	f7f7 fb7b 	bl	2597c <bsd_os_errno_set>
   2e286:	4658      	mov	r0, fp
   2e288:	b005      	add	sp, #20
   2e28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e28e:	bf00      	nop
   2e290:	789a0000 	.word	0x789a0000
   2e294:	20023e94 	.word	0x20023e94
   2e298:	20023d94 	.word	0x20023d94
   2e29c:	00038c0c 	.word	0x00038c0c
   2e2a0:	00038ca4 	.word	0x00038ca4
   2e2a4:	00038c18 	.word	0x00038c18
   2e2a8:	00038c2c 	.word	0x00038c2c
   2e2ac:	00038c34 	.word	0x00038c34
   2e2b0:	00038c24 	.word	0x00038c24
   2e2b4:	00038c38 	.word	0x00038c38
   2e2b8:	00038cb4 	.word	0x00038cb4
   2e2bc:	00038c58 	.word	0x00038c58
   2e2c0:	00038c64 	.word	0x00038c64
   2e2c4:	00038c68 	.word	0x00038c68
   2e2c8:	00038c78 	.word	0x00038c78
   2e2cc:	00038c1c 	.word	0x00038c1c
   2e2d0:	20023d90 	.word	0x20023d90
   2e2d4:	4b41      	ldr	r3, [pc, #260]	; (2e3dc <pdn_interface_connect+0x428>)
   2e2d6:	4a42      	ldr	r2, [pc, #264]	; (2e3e0 <pdn_interface_connect+0x42c>)
   2e2d8:	f44f 7180 	mov.w	r1, #256	; 0x100
   2e2dc:	4841      	ldr	r0, [pc, #260]	; (2e3e4 <pdn_interface_connect+0x430>)
   2e2de:	f004 ffc7 	bl	33270 <sniprintf>
   2e2e2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e2e6:	4a40      	ldr	r2, [pc, #256]	; (2e3e8 <pdn_interface_connect+0x434>)
   2e2e8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2e2ec:	4606      	mov	r6, r0
   2e2ee:	681b      	ldr	r3, [r3, #0]
   2e2f0:	1828      	adds	r0, r5, r0
   2e2f2:	f004 ffbd 	bl	33270 <sniprintf>
   2e2f6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e2fa:	4406      	add	r6, r0
   2e2fc:	7c1b      	ldrb	r3, [r3, #16]
   2e2fe:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   2e302:	2b01      	cmp	r3, #1
   2e304:	bf0c      	ite	eq
   2e306:	4a39      	ldreq	r2, [pc, #228]	; (2e3ec <pdn_interface_connect+0x438>)
   2e308:	4a39      	ldrne	r2, [pc, #228]	; (2e3f0 <pdn_interface_connect+0x43c>)
   2e30a:	19a8      	adds	r0, r5, r6
   2e30c:	f004 ffb0 	bl	33270 <sniprintf>
   2e310:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e314:	4406      	add	r6, r0
   2e316:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   2e31a:	4a36      	ldr	r2, [pc, #216]	; (2e3f4 <pdn_interface_connect+0x440>)
   2e31c:	3320      	adds	r3, #32
   2e31e:	19a8      	adds	r0, r5, r6
   2e320:	f004 ffa6 	bl	33270 <sniprintf>
   2e324:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e328:	4430      	add	r0, r6
   2e32a:	695a      	ldr	r2, [r3, #20]
   2e32c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2e330:	3220      	adds	r2, #32
   2e332:	4413      	add	r3, r2
   2e334:	4428      	add	r0, r5
   2e336:	4a30      	ldr	r2, [pc, #192]	; (2e3f8 <pdn_interface_connect+0x444>)
   2e338:	f004 ff9a 	bl	33270 <sniprintf>
   2e33c:	f8da 3000 	ldr.w	r3, [sl]
   2e340:	4828      	ldr	r0, [pc, #160]	; (2e3e4 <pdn_interface_connect+0x430>)
   2e342:	2600      	movs	r6, #0
   2e344:	9303      	str	r3, [sp, #12]
   2e346:	f7ea fe93 	bl	19070 <strlen>
   2e34a:	9b03      	ldr	r3, [sp, #12]
   2e34c:	4602      	mov	r2, r0
   2e34e:	4925      	ldr	r1, [pc, #148]	; (2e3e4 <pdn_interface_connect+0x430>)
   2e350:	4618      	mov	r0, r3
   2e352:	9601      	str	r6, [sp, #4]
   2e354:	4633      	mov	r3, r6
   2e356:	9600      	str	r6, [sp, #0]
   2e358:	f7ff fa5c 	bl	2d814 <at_interface_write>
   2e35c:	9003      	str	r0, [sp, #12]
   2e35e:	4821      	ldr	r0, [pc, #132]	; (2e3e4 <pdn_interface_connect+0x430>)
   2e360:	f7ea fe86 	bl	19070 <strlen>
   2e364:	9b03      	ldr	r3, [sp, #12]
   2e366:	4298      	cmp	r0, r3
   2e368:	f47f ae9e 	bne.w	2e0a8 <pdn_interface_connect+0xf4>
   2e36c:	4633      	mov	r3, r6
   2e36e:	e9cd 6600 	strd	r6, r6, [sp]
   2e372:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e376:	491b      	ldr	r1, [pc, #108]	; (2e3e4 <pdn_interface_connect+0x430>)
   2e378:	f8da 0000 	ldr.w	r0, [sl]
   2e37c:	f7ff fb9e 	bl	2dabc <at_interface_read>
   2e380:	4606      	mov	r6, r0
   2e382:	481e      	ldr	r0, [pc, #120]	; (2e3fc <pdn_interface_connect+0x448>)
   2e384:	f7ea fe74 	bl	19070 <strlen>
   2e388:	4286      	cmp	r6, r0
   2e38a:	f6ff aea6 	blt.w	2e0da <pdn_interface_connect+0x126>
   2e38e:	4602      	mov	r2, r0
   2e390:	4914      	ldr	r1, [pc, #80]	; (2e3e4 <pdn_interface_connect+0x430>)
   2e392:	481a      	ldr	r0, [pc, #104]	; (2e3fc <pdn_interface_connect+0x448>)
   2e394:	f009 f99c 	bl	376d0 <strncmp>
   2e398:	2800      	cmp	r0, #0
   2e39a:	f43f aec2 	beq.w	2e122 <pdn_interface_connect+0x16e>
   2e39e:	e69c      	b.n	2e0da <pdn_interface_connect+0x126>
   2e3a0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2e3a4:	e685      	b.n	2e0b2 <pdn_interface_connect+0xfe>
   2e3a6:	2016      	movs	r0, #22
   2e3a8:	f7f7 fae8 	bl	2597c <bsd_os_errno_set>
   2e3ac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2e3b0:	e67f      	b.n	2e0b2 <pdn_interface_connect+0xfe>
   2e3b2:	f04f 0b0c 	mov.w	fp, #12
   2e3b6:	e67c      	b.n	2e0b2 <pdn_interface_connect+0xfe>
   2e3b8:	4811      	ldr	r0, [pc, #68]	; (2e400 <pdn_interface_connect+0x44c>)
   2e3ba:	f7ea fe59 	bl	19070 <strlen>
   2e3be:	4909      	ldr	r1, [pc, #36]	; (2e3e4 <pdn_interface_connect+0x430>)
   2e3c0:	4602      	mov	r2, r0
   2e3c2:	480f      	ldr	r0, [pc, #60]	; (2e400 <pdn_interface_connect+0x44c>)
   2e3c4:	f009 f984 	bl	376d0 <strncmp>
   2e3c8:	b918      	cbnz	r0, 2e3d2 <pdn_interface_connect+0x41e>
   2e3ca:	2008      	movs	r0, #8
   2e3cc:	f7f7 fad6 	bl	2597c <bsd_os_errno_set>
   2e3d0:	e66f      	b.n	2e0b2 <pdn_interface_connect+0xfe>
   2e3d2:	2005      	movs	r0, #5
   2e3d4:	f7f7 fad2 	bl	2597c <bsd_os_errno_set>
   2e3d8:	e66b      	b.n	2e0b2 <pdn_interface_connect+0xfe>
   2e3da:	bf00      	nop
   2e3dc:	00038c3c 	.word	0x00038c3c
   2e3e0:	00038ca4 	.word	0x00038ca4
   2e3e4:	20023d94 	.word	0x20023d94
   2e3e8:	00038c18 	.word	0x00038c18
   2e3ec:	00038c48 	.word	0x00038c48
   2e3f0:	00038c4c 	.word	0x00038c4c
   2e3f4:	00038c24 	.word	0x00038c24
   2e3f8:	00038c50 	.word	0x00038c50
   2e3fc:	00038c38 	.word	0x00038c38
   2e400:	00038cb4 	.word	0x00038cb4

0002e404 <pdn_interface_close>:
   2e404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e408:	4a6c      	ldr	r2, [pc, #432]	; (2e5bc <pdn_interface_close+0x1b8>)
   2e40a:	0c03      	lsrs	r3, r0, #16
   2e40c:	041b      	lsls	r3, r3, #16
   2e40e:	4293      	cmp	r3, r2
   2e410:	b083      	sub	sp, #12
   2e412:	f040 80ae 	bne.w	2e572 <pdn_interface_close+0x16e>
   2e416:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   2e41a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   2e41e:	2c09      	cmp	r4, #9
   2e420:	f300 80a7 	bgt.w	2e572 <pdn_interface_close+0x16e>
   2e424:	4d66      	ldr	r5, [pc, #408]	; (2e5c0 <pdn_interface_close+0x1bc>)
   2e426:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2e42a:	2800      	cmp	r0, #0
   2e42c:	f000 80a1 	beq.w	2e572 <pdn_interface_close+0x16e>
   2e430:	6883      	ldr	r3, [r0, #8]
   2e432:	2b00      	cmp	r3, #0
   2e434:	f000 809d 	beq.w	2e572 <pdn_interface_close+0x16e>
   2e438:	6883      	ldr	r3, [r0, #8]
   2e43a:	2b03      	cmp	r3, #3
   2e43c:	d00b      	beq.n	2e456 <pdn_interface_close+0x52>
   2e43e:	6883      	ldr	r3, [r0, #8]
   2e440:	2b02      	cmp	r3, #2
   2e442:	d056      	beq.n	2e4f2 <pdn_interface_close+0xee>
   2e444:	f001 ffc6 	bl	303d4 <nrf_free>
   2e448:	2300      	movs	r3, #0
   2e44a:	4618      	mov	r0, r3
   2e44c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   2e450:	b003      	add	sp, #12
   2e452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e456:	4e5b      	ldr	r6, [pc, #364]	; (2e5c4 <pdn_interface_close+0x1c0>)
   2e458:	4b5b      	ldr	r3, [pc, #364]	; (2e5c8 <pdn_interface_close+0x1c4>)
   2e45a:	4a5c      	ldr	r2, [pc, #368]	; (2e5cc <pdn_interface_close+0x1c8>)
   2e45c:	f44f 7180 	mov.w	r1, #256	; 0x100
   2e460:	4630      	mov	r0, r6
   2e462:	f004 ff05 	bl	33270 <sniprintf>
   2e466:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2e46a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2e46e:	681b      	ldr	r3, [r3, #0]
   2e470:	4a57      	ldr	r2, [pc, #348]	; (2e5d0 <pdn_interface_close+0x1cc>)
   2e472:	4430      	add	r0, r6
   2e474:	f8df 8168 	ldr.w	r8, [pc, #360]	; 2e5e0 <pdn_interface_close+0x1dc>
   2e478:	f004 fefa 	bl	33270 <sniprintf>
   2e47c:	4630      	mov	r0, r6
   2e47e:	f8d8 9000 	ldr.w	r9, [r8]
   2e482:	2700      	movs	r7, #0
   2e484:	f7ea fdf4 	bl	19070 <strlen>
   2e488:	4631      	mov	r1, r6
   2e48a:	4602      	mov	r2, r0
   2e48c:	463b      	mov	r3, r7
   2e48e:	4648      	mov	r0, r9
   2e490:	9701      	str	r7, [sp, #4]
   2e492:	9700      	str	r7, [sp, #0]
   2e494:	f7ff f9be 	bl	2d814 <at_interface_write>
   2e498:	4681      	mov	r9, r0
   2e49a:	4630      	mov	r0, r6
   2e49c:	f7ea fde8 	bl	19070 <strlen>
   2e4a0:	4548      	cmp	r0, r9
   2e4a2:	f040 8083 	bne.w	2e5ac <pdn_interface_close+0x1a8>
   2e4a6:	463b      	mov	r3, r7
   2e4a8:	e9cd 7700 	strd	r7, r7, [sp]
   2e4ac:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e4b0:	4631      	mov	r1, r6
   2e4b2:	f8d8 0000 	ldr.w	r0, [r8]
   2e4b6:	f7ff fb01 	bl	2dabc <at_interface_read>
   2e4ba:	4607      	mov	r7, r0
   2e4bc:	4845      	ldr	r0, [pc, #276]	; (2e5d4 <pdn_interface_close+0x1d0>)
   2e4be:	f7ea fdd7 	bl	19070 <strlen>
   2e4c2:	4287      	cmp	r7, r0
   2e4c4:	da5b      	bge.n	2e57e <pdn_interface_close+0x17a>
   2e4c6:	4844      	ldr	r0, [pc, #272]	; (2e5d8 <pdn_interface_close+0x1d4>)
   2e4c8:	f7ea fdd2 	bl	19070 <strlen>
   2e4cc:	493d      	ldr	r1, [pc, #244]	; (2e5c4 <pdn_interface_close+0x1c0>)
   2e4ce:	4602      	mov	r2, r0
   2e4d0:	4841      	ldr	r0, [pc, #260]	; (2e5d8 <pdn_interface_close+0x1d4>)
   2e4d2:	f009 f8fd 	bl	376d0 <strncmp>
   2e4d6:	2800      	cmp	r0, #0
   2e4d8:	d168      	bne.n	2e5ac <pdn_interface_close+0x1a8>
   2e4da:	2008      	movs	r0, #8
   2e4dc:	f7f7 fa4e 	bl	2597c <bsd_os_errno_set>
   2e4e0:	2202      	movs	r2, #2
   2e4e2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2e4e6:	609a      	str	r2, [r3, #8]
   2e4e8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2e4ec:	6883      	ldr	r3, [r0, #8]
   2e4ee:	2b02      	cmp	r3, #2
   2e4f0:	d1a8      	bne.n	2e444 <pdn_interface_close+0x40>
   2e4f2:	4e34      	ldr	r6, [pc, #208]	; (2e5c4 <pdn_interface_close+0x1c0>)
   2e4f4:	4b39      	ldr	r3, [pc, #228]	; (2e5dc <pdn_interface_close+0x1d8>)
   2e4f6:	4a35      	ldr	r2, [pc, #212]	; (2e5cc <pdn_interface_close+0x1c8>)
   2e4f8:	f44f 7180 	mov.w	r1, #256	; 0x100
   2e4fc:	4630      	mov	r0, r6
   2e4fe:	f004 feb7 	bl	33270 <sniprintf>
   2e502:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2e506:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2e50a:	681b      	ldr	r3, [r3, #0]
   2e50c:	4a30      	ldr	r2, [pc, #192]	; (2e5d0 <pdn_interface_close+0x1cc>)
   2e50e:	4430      	add	r0, r6
   2e510:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 2e5e0 <pdn_interface_close+0x1dc>
   2e514:	f004 feac 	bl	33270 <sniprintf>
   2e518:	4630      	mov	r0, r6
   2e51a:	f8d8 9000 	ldr.w	r9, [r8]
   2e51e:	2700      	movs	r7, #0
   2e520:	f7ea fda6 	bl	19070 <strlen>
   2e524:	4631      	mov	r1, r6
   2e526:	4602      	mov	r2, r0
   2e528:	463b      	mov	r3, r7
   2e52a:	4648      	mov	r0, r9
   2e52c:	9701      	str	r7, [sp, #4]
   2e52e:	9700      	str	r7, [sp, #0]
   2e530:	f7ff f970 	bl	2d814 <at_interface_write>
   2e534:	4681      	mov	r9, r0
   2e536:	4630      	mov	r0, r6
   2e538:	f7ea fd9a 	bl	19070 <strlen>
   2e53c:	4548      	cmp	r0, r9
   2e53e:	d139      	bne.n	2e5b4 <pdn_interface_close+0x1b0>
   2e540:	463b      	mov	r3, r7
   2e542:	e9cd 7700 	strd	r7, r7, [sp]
   2e546:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e54a:	4631      	mov	r1, r6
   2e54c:	f8d8 0000 	ldr.w	r0, [r8]
   2e550:	f7ff fab4 	bl	2dabc <at_interface_read>
   2e554:	4607      	mov	r7, r0
   2e556:	481f      	ldr	r0, [pc, #124]	; (2e5d4 <pdn_interface_close+0x1d0>)
   2e558:	f7ea fd8a 	bl	19070 <strlen>
   2e55c:	4287      	cmp	r7, r0
   2e55e:	db16      	blt.n	2e58e <pdn_interface_close+0x18a>
   2e560:	4602      	mov	r2, r0
   2e562:	4631      	mov	r1, r6
   2e564:	481b      	ldr	r0, [pc, #108]	; (2e5d4 <pdn_interface_close+0x1d0>)
   2e566:	f009 f8b3 	bl	376d0 <strncmp>
   2e56a:	b980      	cbnz	r0, 2e58e <pdn_interface_close+0x18a>
   2e56c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2e570:	e768      	b.n	2e444 <pdn_interface_close+0x40>
   2e572:	2009      	movs	r0, #9
   2e574:	f7f7 fa02 	bl	2597c <bsd_os_errno_set>
   2e578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e57c:	e768      	b.n	2e450 <pdn_interface_close+0x4c>
   2e57e:	4602      	mov	r2, r0
   2e580:	4631      	mov	r1, r6
   2e582:	4814      	ldr	r0, [pc, #80]	; (2e5d4 <pdn_interface_close+0x1d0>)
   2e584:	f009 f8a4 	bl	376d0 <strncmp>
   2e588:	2800      	cmp	r0, #0
   2e58a:	d0a9      	beq.n	2e4e0 <pdn_interface_close+0xdc>
   2e58c:	e79b      	b.n	2e4c6 <pdn_interface_close+0xc2>
   2e58e:	4812      	ldr	r0, [pc, #72]	; (2e5d8 <pdn_interface_close+0x1d4>)
   2e590:	f7ea fd6e 	bl	19070 <strlen>
   2e594:	490b      	ldr	r1, [pc, #44]	; (2e5c4 <pdn_interface_close+0x1c0>)
   2e596:	4602      	mov	r2, r0
   2e598:	480f      	ldr	r0, [pc, #60]	; (2e5d8 <pdn_interface_close+0x1d4>)
   2e59a:	f009 f899 	bl	376d0 <strncmp>
   2e59e:	b948      	cbnz	r0, 2e5b4 <pdn_interface_close+0x1b0>
   2e5a0:	2008      	movs	r0, #8
   2e5a2:	f7f7 f9eb 	bl	2597c <bsd_os_errno_set>
   2e5a6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2e5aa:	e74b      	b.n	2e444 <pdn_interface_close+0x40>
   2e5ac:	2005      	movs	r0, #5
   2e5ae:	f7f7 f9e5 	bl	2597c <bsd_os_errno_set>
   2e5b2:	e795      	b.n	2e4e0 <pdn_interface_close+0xdc>
   2e5b4:	2005      	movs	r0, #5
   2e5b6:	f7f7 f9e1 	bl	2597c <bsd_os_errno_set>
   2e5ba:	e7d7      	b.n	2e56c <pdn_interface_close+0x168>
   2e5bc:	789a0000 	.word	0x789a0000
   2e5c0:	20023e94 	.word	0x20023e94
   2e5c4:	20023d94 	.word	0x20023d94
   2e5c8:	00038c00 	.word	0x00038c00
   2e5cc:	00038ca4 	.word	0x00038ca4
   2e5d0:	00038c64 	.word	0x00038c64
   2e5d4:	00038c38 	.word	0x00038c38
   2e5d8:	00038cb4 	.word	0x00038cb4
   2e5dc:	00038c0c 	.word	0x00038c0c
   2e5e0:	20023d90 	.word	0x20023d90

0002e5e4 <pdn_interface_setopt>:
   2e5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e5e6:	f240 2402 	movw	r4, #514	; 0x202
   2e5ea:	42a1      	cmp	r1, r4
   2e5ec:	9e06      	ldr	r6, [sp, #24]
   2e5ee:	f040 8090 	bne.w	2e712 <pdn_interface_setopt+0x12e>
   2e5f2:	461d      	mov	r5, r3
   2e5f4:	2b00      	cmp	r3, #0
   2e5f6:	f000 808c 	beq.w	2e712 <pdn_interface_setopt+0x12e>
   2e5fa:	2e00      	cmp	r6, #0
   2e5fc:	f000 8089 	beq.w	2e712 <pdn_interface_setopt+0x12e>
   2e600:	0c03      	lsrs	r3, r0, #16
   2e602:	494d      	ldr	r1, [pc, #308]	; (2e738 <pdn_interface_setopt+0x154>)
   2e604:	041b      	lsls	r3, r3, #16
   2e606:	428b      	cmp	r3, r1
   2e608:	d005      	beq.n	2e616 <pdn_interface_setopt+0x32>
   2e60a:	2009      	movs	r0, #9
   2e60c:	f7f7 f9b6 	bl	2597c <bsd_os_errno_set>
   2e610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e616:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   2e61a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   2e61e:	2c09      	cmp	r4, #9
   2e620:	dcf3      	bgt.n	2e60a <pdn_interface_setopt+0x26>
   2e622:	4f46      	ldr	r7, [pc, #280]	; (2e73c <pdn_interface_setopt+0x158>)
   2e624:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e628:	2b00      	cmp	r3, #0
   2e62a:	d0ee      	beq.n	2e60a <pdn_interface_setopt+0x26>
   2e62c:	6899      	ldr	r1, [r3, #8]
   2e62e:	2900      	cmp	r1, #0
   2e630:	d0eb      	beq.n	2e60a <pdn_interface_setopt+0x26>
   2e632:	2a01      	cmp	r2, #1
   2e634:	d049      	beq.n	2e6ca <pdn_interface_setopt+0xe6>
   2e636:	2a04      	cmp	r2, #4
   2e638:	d145      	bne.n	2e6c6 <pdn_interface_setopt+0xe2>
   2e63a:	689a      	ldr	r2, [r3, #8]
   2e63c:	2a00      	cmp	r2, #0
   2e63e:	d04c      	beq.n	2e6da <pdn_interface_setopt+0xf6>
   2e640:	689a      	ldr	r2, [r3, #8]
   2e642:	2a03      	cmp	r2, #3
   2e644:	d049      	beq.n	2e6da <pdn_interface_setopt+0xf6>
   2e646:	689b      	ldr	r3, [r3, #8]
   2e648:	2b04      	cmp	r3, #4
   2e64a:	d046      	beq.n	2e6da <pdn_interface_setopt+0xf6>
   2e64c:	4628      	mov	r0, r5
   2e64e:	f7ea fd0f 	bl	19070 <strlen>
   2e652:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e656:	3001      	adds	r0, #1
   2e658:	f105 0664 	add.w	r6, r5, #100	; 0x64
   2e65c:	6158      	str	r0, [r3, #20]
   2e65e:	4630      	mov	r0, r6
   2e660:	f7ea fd06 	bl	19070 <strlen>
   2e664:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e668:	3001      	adds	r0, #1
   2e66a:	6198      	str	r0, [r3, #24]
   2e66c:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
   2e670:	3b01      	subs	r3, #1
   2e672:	2b01      	cmp	r3, #1
   2e674:	d84b      	bhi.n	2e70e <pdn_interface_setopt+0x12a>
   2e676:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   2e67a:	6943      	ldr	r3, [r0, #20]
   2e67c:	2b63      	cmp	r3, #99	; 0x63
   2e67e:	dc46      	bgt.n	2e70e <pdn_interface_setopt+0x12a>
   2e680:	6982      	ldr	r2, [r0, #24]
   2e682:	2a63      	cmp	r2, #99	; 0x63
   2e684:	dc43      	bgt.n	2e70e <pdn_interface_setopt+0x12a>
   2e686:	4413      	add	r3, r2
   2e688:	f103 0120 	add.w	r1, r3, #32
   2e68c:	f001 feae 	bl	303ec <nrf_realloc>
   2e690:	4603      	mov	r3, r0
   2e692:	2800      	cmp	r0, #0
   2e694:	d048      	beq.n	2e728 <pdn_interface_setopt+0x144>
   2e696:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   2e69a:	6941      	ldr	r1, [r0, #20]
   2e69c:	462b      	mov	r3, r5
   2e69e:	4a28      	ldr	r2, [pc, #160]	; (2e740 <pdn_interface_setopt+0x15c>)
   2e6a0:	3020      	adds	r0, #32
   2e6a2:	f004 fde5 	bl	33270 <sniprintf>
   2e6a6:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   2e6aa:	3021      	adds	r0, #33	; 0x21
   2e6ac:	4633      	mov	r3, r6
   2e6ae:	6991      	ldr	r1, [r2, #24]
   2e6b0:	4410      	add	r0, r2
   2e6b2:	4a23      	ldr	r2, [pc, #140]	; (2e740 <pdn_interface_setopt+0x15c>)
   2e6b4:	f004 fddc 	bl	33270 <sniprintf>
   2e6b8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e6bc:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   2e6c0:	2000      	movs	r0, #0
   2e6c2:	741a      	strb	r2, [r3, #16]
   2e6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e6c6:	202d      	movs	r0, #45	; 0x2d
   2e6c8:	e7a0      	b.n	2e60c <pdn_interface_setopt+0x28>
   2e6ca:	689a      	ldr	r2, [r3, #8]
   2e6cc:	b12a      	cbz	r2, 2e6da <pdn_interface_setopt+0xf6>
   2e6ce:	689a      	ldr	r2, [r3, #8]
   2e6d0:	2a03      	cmp	r2, #3
   2e6d2:	d002      	beq.n	2e6da <pdn_interface_setopt+0xf6>
   2e6d4:	689a      	ldr	r2, [r3, #8]
   2e6d6:	2a04      	cmp	r2, #4
   2e6d8:	d101      	bne.n	2e6de <pdn_interface_setopt+0xfa>
   2e6da:	200e      	movs	r0, #14
   2e6dc:	e796      	b.n	2e60c <pdn_interface_setopt+0x28>
   2e6de:	08b2      	lsrs	r2, r6, #2
   2e6e0:	1e51      	subs	r1, r2, #1
   2e6e2:	2901      	cmp	r1, #1
   2e6e4:	d813      	bhi.n	2e70e <pdn_interface_setopt+0x12a>
   2e6e6:	07b1      	lsls	r1, r6, #30
   2e6e8:	d111      	bne.n	2e70e <pdn_interface_setopt+0x12a>
   2e6ea:	6829      	ldr	r1, [r5, #0]
   2e6ec:	2902      	cmp	r1, #2
   2e6ee:	d016      	beq.n	2e71e <pdn_interface_setopt+0x13a>
   2e6f0:	290a      	cmp	r1, #10
   2e6f2:	d10c      	bne.n	2e70e <pdn_interface_setopt+0x12a>
   2e6f4:	2102      	movs	r1, #2
   2e6f6:	2a02      	cmp	r2, #2
   2e6f8:	d106      	bne.n	2e708 <pdn_interface_setopt+0x124>
   2e6fa:	686a      	ldr	r2, [r5, #4]
   2e6fc:	2a02      	cmp	r2, #2
   2e6fe:	d010      	beq.n	2e722 <pdn_interface_setopt+0x13e>
   2e700:	2a0a      	cmp	r2, #10
   2e702:	d104      	bne.n	2e70e <pdn_interface_setopt+0x12a>
   2e704:	f041 0102 	orr.w	r1, r1, #2
   2e708:	60d9      	str	r1, [r3, #12]
   2e70a:	2000      	movs	r0, #0
   2e70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e70e:	2016      	movs	r0, #22
   2e710:	e77c      	b.n	2e60c <pdn_interface_setopt+0x28>
   2e712:	2016      	movs	r0, #22
   2e714:	f7f7 f932 	bl	2597c <bsd_os_errno_set>
   2e718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e71e:	2101      	movs	r1, #1
   2e720:	e7e9      	b.n	2e6f6 <pdn_interface_setopt+0x112>
   2e722:	f041 0101 	orr.w	r1, r1, #1
   2e726:	e7ef      	b.n	2e708 <pdn_interface_setopt+0x124>
   2e728:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   2e72c:	200c      	movs	r0, #12
   2e72e:	6153      	str	r3, [r2, #20]
   2e730:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   2e734:	6193      	str	r3, [r2, #24]
   2e736:	e769      	b.n	2e60c <pdn_interface_setopt+0x28>
   2e738:	789a0000 	.word	0x789a0000
   2e73c:	20023e94 	.word	0x20023e94
   2e740:	00038ca4 	.word	0x00038ca4

0002e744 <pdn_interface_getopt>:
   2e744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e748:	f240 2402 	movw	r4, #514	; 0x202
   2e74c:	b083      	sub	sp, #12
   2e74e:	42a1      	cmp	r1, r4
   2e750:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2e752:	f040 808f 	bne.w	2e874 <pdn_interface_getopt+0x130>
   2e756:	461e      	mov	r6, r3
   2e758:	2b00      	cmp	r3, #0
   2e75a:	f000 808b 	beq.w	2e874 <pdn_interface_getopt+0x130>
   2e75e:	2d00      	cmp	r5, #0
   2e760:	f000 8088 	beq.w	2e874 <pdn_interface_getopt+0x130>
   2e764:	0c03      	lsrs	r3, r0, #16
   2e766:	4954      	ldr	r1, [pc, #336]	; (2e8b8 <pdn_interface_getopt+0x174>)
   2e768:	041b      	lsls	r3, r3, #16
   2e76a:	428b      	cmp	r3, r1
   2e76c:	f040 8084 	bne.w	2e878 <pdn_interface_getopt+0x134>
   2e770:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   2e774:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   2e778:	2c09      	cmp	r4, #9
   2e77a:	dc7d      	bgt.n	2e878 <pdn_interface_getopt+0x134>
   2e77c:	4b4f      	ldr	r3, [pc, #316]	; (2e8bc <pdn_interface_getopt+0x178>)
   2e77e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2e782:	2b00      	cmp	r3, #0
   2e784:	d078      	beq.n	2e878 <pdn_interface_getopt+0x134>
   2e786:	6899      	ldr	r1, [r3, #8]
   2e788:	2900      	cmp	r1, #0
   2e78a:	d075      	beq.n	2e878 <pdn_interface_getopt+0x134>
   2e78c:	2a02      	cmp	r2, #2
   2e78e:	d04e      	beq.n	2e82e <pdn_interface_getopt+0xea>
   2e790:	2a03      	cmp	r2, #3
   2e792:	d009      	beq.n	2e7a8 <pdn_interface_getopt+0x64>
   2e794:	2a01      	cmp	r2, #1
   2e796:	d054      	beq.n	2e842 <pdn_interface_getopt+0xfe>
   2e798:	202d      	movs	r0, #45	; 0x2d
   2e79a:	f7f7 f8ef 	bl	2597c <bsd_os_errno_set>
   2e79e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e7a2:	b003      	add	sp, #12
   2e7a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e7a8:	682b      	ldr	r3, [r5, #0]
   2e7aa:	2b00      	cmp	r3, #0
   2e7ac:	d062      	beq.n	2e874 <pdn_interface_getopt+0x130>
   2e7ae:	4b44      	ldr	r3, [pc, #272]	; (2e8c0 <pdn_interface_getopt+0x17c>)
   2e7b0:	4a44      	ldr	r2, [pc, #272]	; (2e8c4 <pdn_interface_getopt+0x180>)
   2e7b2:	f44f 7180 	mov.w	r1, #256	; 0x100
   2e7b6:	4844      	ldr	r0, [pc, #272]	; (2e8c8 <pdn_interface_getopt+0x184>)
   2e7b8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 2e8d4 <pdn_interface_getopt+0x190>
   2e7bc:	f004 fd58 	bl	33270 <sniprintf>
   2e7c0:	4841      	ldr	r0, [pc, #260]	; (2e8c8 <pdn_interface_getopt+0x184>)
   2e7c2:	f8d8 9000 	ldr.w	r9, [r8]
   2e7c6:	2700      	movs	r7, #0
   2e7c8:	f7ea fc52 	bl	19070 <strlen>
   2e7cc:	463b      	mov	r3, r7
   2e7ce:	4602      	mov	r2, r0
   2e7d0:	493d      	ldr	r1, [pc, #244]	; (2e8c8 <pdn_interface_getopt+0x184>)
   2e7d2:	4648      	mov	r0, r9
   2e7d4:	9701      	str	r7, [sp, #4]
   2e7d6:	9700      	str	r7, [sp, #0]
   2e7d8:	f7ff f81c 	bl	2d814 <at_interface_write>
   2e7dc:	4681      	mov	r9, r0
   2e7de:	483a      	ldr	r0, [pc, #232]	; (2e8c8 <pdn_interface_getopt+0x184>)
   2e7e0:	f7ea fc46 	bl	19070 <strlen>
   2e7e4:	4548      	cmp	r0, r9
   2e7e6:	d161      	bne.n	2e8ac <pdn_interface_getopt+0x168>
   2e7e8:	463b      	mov	r3, r7
   2e7ea:	e9cd 7700 	strd	r7, r7, [sp]
   2e7ee:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e7f2:	4935      	ldr	r1, [pc, #212]	; (2e8c8 <pdn_interface_getopt+0x184>)
   2e7f4:	f8d8 0000 	ldr.w	r0, [r8]
   2e7f8:	f7ff f960 	bl	2dabc <at_interface_read>
   2e7fc:	4607      	mov	r7, r0
   2e7fe:	4833      	ldr	r0, [pc, #204]	; (2e8cc <pdn_interface_getopt+0x188>)
   2e800:	f7ea fc36 	bl	19070 <strlen>
   2e804:	4287      	cmp	r7, r0
   2e806:	db3d      	blt.n	2e884 <pdn_interface_getopt+0x140>
   2e808:	4602      	mov	r2, r0
   2e80a:	492f      	ldr	r1, [pc, #188]	; (2e8c8 <pdn_interface_getopt+0x184>)
   2e80c:	482f      	ldr	r0, [pc, #188]	; (2e8cc <pdn_interface_getopt+0x188>)
   2e80e:	f008 ff5f 	bl	376d0 <strncmp>
   2e812:	4607      	mov	r7, r0
   2e814:	2800      	cmp	r0, #0
   2e816:	d135      	bne.n	2e884 <pdn_interface_getopt+0x140>
   2e818:	4620      	mov	r0, r4
   2e81a:	492b      	ldr	r1, [pc, #172]	; (2e8c8 <pdn_interface_getopt+0x184>)
   2e81c:	f7ff fa38 	bl	2dc90 <pdn_state_get_parser>
   2e820:	2800      	cmp	r0, #0
   2e822:	dbba      	blt.n	2e79a <pdn_interface_getopt+0x56>
   2e824:	2301      	movs	r3, #1
   2e826:	7030      	strb	r0, [r6, #0]
   2e828:	4638      	mov	r0, r7
   2e82a:	602b      	str	r3, [r5, #0]
   2e82c:	e7b9      	b.n	2e7a2 <pdn_interface_getopt+0x5e>
   2e82e:	682a      	ldr	r2, [r5, #0]
   2e830:	b302      	cbz	r2, 2e874 <pdn_interface_getopt+0x130>
   2e832:	2201      	movs	r2, #1
   2e834:	2000      	movs	r0, #0
   2e836:	681b      	ldr	r3, [r3, #0]
   2e838:	7033      	strb	r3, [r6, #0]
   2e83a:	602a      	str	r2, [r5, #0]
   2e83c:	b003      	add	sp, #12
   2e83e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e842:	689a      	ldr	r2, [r3, #8]
   2e844:	b1a2      	cbz	r2, 2e870 <pdn_interface_getopt+0x12c>
   2e846:	689a      	ldr	r2, [r3, #8]
   2e848:	2a04      	cmp	r2, #4
   2e84a:	d011      	beq.n	2e870 <pdn_interface_getopt+0x12c>
   2e84c:	682a      	ldr	r2, [r5, #0]
   2e84e:	2a07      	cmp	r2, #7
   2e850:	d910      	bls.n	2e874 <pdn_interface_getopt+0x130>
   2e852:	f012 0203 	ands.w	r2, r2, #3
   2e856:	d10d      	bne.n	2e874 <pdn_interface_getopt+0x130>
   2e858:	68db      	ldr	r3, [r3, #12]
   2e85a:	0799      	lsls	r1, r3, #30
   2e85c:	d421      	bmi.n	2e8a2 <pdn_interface_getopt+0x15e>
   2e85e:	2104      	movs	r1, #4
   2e860:	07db      	lsls	r3, r3, #31
   2e862:	d502      	bpl.n	2e86a <pdn_interface_getopt+0x126>
   2e864:	2302      	movs	r3, #2
   2e866:	50b3      	str	r3, [r6, r2]
   2e868:	460a      	mov	r2, r1
   2e86a:	602a      	str	r2, [r5, #0]
   2e86c:	2000      	movs	r0, #0
   2e86e:	e798      	b.n	2e7a2 <pdn_interface_getopt+0x5e>
   2e870:	200e      	movs	r0, #14
   2e872:	e792      	b.n	2e79a <pdn_interface_getopt+0x56>
   2e874:	2016      	movs	r0, #22
   2e876:	e790      	b.n	2e79a <pdn_interface_getopt+0x56>
   2e878:	2009      	movs	r0, #9
   2e87a:	f7f7 f87f 	bl	2597c <bsd_os_errno_set>
   2e87e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e882:	e78e      	b.n	2e7a2 <pdn_interface_getopt+0x5e>
   2e884:	4812      	ldr	r0, [pc, #72]	; (2e8d0 <pdn_interface_getopt+0x18c>)
   2e886:	f7ea fbf3 	bl	19070 <strlen>
   2e88a:	490f      	ldr	r1, [pc, #60]	; (2e8c8 <pdn_interface_getopt+0x184>)
   2e88c:	4602      	mov	r2, r0
   2e88e:	4810      	ldr	r0, [pc, #64]	; (2e8d0 <pdn_interface_getopt+0x18c>)
   2e890:	f008 ff1e 	bl	376d0 <strncmp>
   2e894:	b950      	cbnz	r0, 2e8ac <pdn_interface_getopt+0x168>
   2e896:	2008      	movs	r0, #8
   2e898:	f7f7 f870 	bl	2597c <bsd_os_errno_set>
   2e89c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e8a0:	e77b      	b.n	2e79a <pdn_interface_getopt+0x56>
   2e8a2:	220a      	movs	r2, #10
   2e8a4:	2108      	movs	r1, #8
   2e8a6:	6032      	str	r2, [r6, #0]
   2e8a8:	2204      	movs	r2, #4
   2e8aa:	e7d9      	b.n	2e860 <pdn_interface_getopt+0x11c>
   2e8ac:	2005      	movs	r0, #5
   2e8ae:	f7f7 f865 	bl	2597c <bsd_os_errno_set>
   2e8b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e8b6:	e770      	b.n	2e79a <pdn_interface_getopt+0x56>
   2e8b8:	789a0000 	.word	0x789a0000
   2e8bc:	20023e94 	.word	0x20023e94
   2e8c0:	00038c84 	.word	0x00038c84
   2e8c4:	00038ca4 	.word	0x00038ca4
   2e8c8:	20023d94 	.word	0x20023d94
   2e8cc:	00038c90 	.word	0x00038c90
   2e8d0:	00038cb4 	.word	0x00038cb4
   2e8d4:	20023d90 	.word	0x20023d90

0002e8d8 <pdn_interface_pdn_id_get>:
   2e8d8:	2900      	cmp	r1, #0
   2e8da:	f000 82ba 	beq.w	2ee52 <pdn_interface_pdn_id_get+0x57a>
   2e8de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e8e2:	2802      	cmp	r0, #2
   2e8e4:	b083      	sub	sp, #12
   2e8e6:	460e      	mov	r6, r1
   2e8e8:	d067      	beq.n	2e9ba <pdn_interface_pdn_id_get+0xe2>
   2e8ea:	280a      	cmp	r0, #10
   2e8ec:	d040      	beq.n	2e970 <pdn_interface_pdn_id_get+0x98>
   2e8ee:	4cae      	ldr	r4, [pc, #696]	; (2eba8 <pdn_interface_pdn_id_get+0x2d0>)
   2e8f0:	6823      	ldr	r3, [r4, #0]
   2e8f2:	b11b      	cbz	r3, 2e8fc <pdn_interface_pdn_id_get+0x24>
   2e8f4:	689b      	ldr	r3, [r3, #8]
   2e8f6:	2b03      	cmp	r3, #3
   2e8f8:	f000 80fc 	beq.w	2eaf4 <pdn_interface_pdn_id_get+0x21c>
   2e8fc:	6863      	ldr	r3, [r4, #4]
   2e8fe:	b11b      	cbz	r3, 2e908 <pdn_interface_pdn_id_get+0x30>
   2e900:	689b      	ldr	r3, [r3, #8]
   2e902:	2b03      	cmp	r3, #3
   2e904:	f000 80e4 	beq.w	2ead0 <pdn_interface_pdn_id_get+0x1f8>
   2e908:	68a3      	ldr	r3, [r4, #8]
   2e90a:	b11b      	cbz	r3, 2e914 <pdn_interface_pdn_id_get+0x3c>
   2e90c:	689b      	ldr	r3, [r3, #8]
   2e90e:	2b03      	cmp	r3, #3
   2e910:	f000 80cc 	beq.w	2eaac <pdn_interface_pdn_id_get+0x1d4>
   2e914:	68e3      	ldr	r3, [r4, #12]
   2e916:	b11b      	cbz	r3, 2e920 <pdn_interface_pdn_id_get+0x48>
   2e918:	689b      	ldr	r3, [r3, #8]
   2e91a:	2b03      	cmp	r3, #3
   2e91c:	f000 80b4 	beq.w	2ea88 <pdn_interface_pdn_id_get+0x1b0>
   2e920:	6923      	ldr	r3, [r4, #16]
   2e922:	b11b      	cbz	r3, 2e92c <pdn_interface_pdn_id_get+0x54>
   2e924:	689b      	ldr	r3, [r3, #8]
   2e926:	2b03      	cmp	r3, #3
   2e928:	f000 80f5 	beq.w	2eb16 <pdn_interface_pdn_id_get+0x23e>
   2e92c:	6963      	ldr	r3, [r4, #20]
   2e92e:	b11b      	cbz	r3, 2e938 <pdn_interface_pdn_id_get+0x60>
   2e930:	689b      	ldr	r3, [r3, #8]
   2e932:	2b03      	cmp	r3, #3
   2e934:	f000 813c 	beq.w	2ebb0 <pdn_interface_pdn_id_get+0x2d8>
   2e938:	69a3      	ldr	r3, [r4, #24]
   2e93a:	b11b      	cbz	r3, 2e944 <pdn_interface_pdn_id_get+0x6c>
   2e93c:	689b      	ldr	r3, [r3, #8]
   2e93e:	2b03      	cmp	r3, #3
   2e940:	f000 811f 	beq.w	2eb82 <pdn_interface_pdn_id_get+0x2aa>
   2e944:	69e3      	ldr	r3, [r4, #28]
   2e946:	b11b      	cbz	r3, 2e950 <pdn_interface_pdn_id_get+0x78>
   2e948:	689b      	ldr	r3, [r3, #8]
   2e94a:	2b03      	cmp	r3, #3
   2e94c:	f000 8107 	beq.w	2eb5e <pdn_interface_pdn_id_get+0x286>
   2e950:	6a23      	ldr	r3, [r4, #32]
   2e952:	b11b      	cbz	r3, 2e95c <pdn_interface_pdn_id_get+0x84>
   2e954:	689b      	ldr	r3, [r3, #8]
   2e956:	2b03      	cmp	r3, #3
   2e958:	f000 80ef 	beq.w	2eb3a <pdn_interface_pdn_id_get+0x262>
   2e95c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e95e:	b113      	cbz	r3, 2e966 <pdn_interface_pdn_id_get+0x8e>
   2e960:	689b      	ldr	r3, [r3, #8]
   2e962:	2b03      	cmp	r3, #3
   2e964:	d07e      	beq.n	2ea64 <pdn_interface_pdn_id_get+0x18c>
   2e966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e96a:	b003      	add	sp, #12
   2e96c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e970:	2500      	movs	r5, #0
   2e972:	4c8e      	ldr	r4, [pc, #568]	; (2ebac <pdn_interface_pdn_id_get+0x2d4>)
   2e974:	e002      	b.n	2e97c <pdn_interface_pdn_id_get+0xa4>
   2e976:	3501      	adds	r5, #1
   2e978:	2d0a      	cmp	r5, #10
   2e97a:	d0f4      	beq.n	2e966 <pdn_interface_pdn_id_get+0x8e>
   2e97c:	f854 3f04 	ldr.w	r3, [r4, #4]!
   2e980:	2b00      	cmp	r3, #0
   2e982:	d0f8      	beq.n	2e976 <pdn_interface_pdn_id_get+0x9e>
   2e984:	689b      	ldr	r3, [r3, #8]
   2e986:	2b03      	cmp	r3, #3
   2e988:	d1f5      	bne.n	2e976 <pdn_interface_pdn_id_get+0x9e>
   2e98a:	4630      	mov	r0, r6
   2e98c:	f7ea fb70 	bl	19070 <strlen>
   2e990:	6823      	ldr	r3, [r4, #0]
   2e992:	69da      	ldr	r2, [r3, #28]
   2e994:	4290      	cmp	r0, r2
   2e996:	d1ee      	bne.n	2e976 <pdn_interface_pdn_id_get+0x9e>
   2e998:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   2e99c:	4439      	add	r1, r7
   2e99e:	3120      	adds	r1, #32
   2e9a0:	4602      	mov	r2, r0
   2e9a2:	4419      	add	r1, r3
   2e9a4:	4630      	mov	r0, r6
   2e9a6:	f008 fe93 	bl	376d0 <strncmp>
   2e9aa:	2800      	cmp	r0, #0
   2e9ac:	d1e3      	bne.n	2e976 <pdn_interface_pdn_id_get+0x9e>
   2e9ae:	6823      	ldr	r3, [r4, #0]
   2e9b0:	68da      	ldr	r2, [r3, #12]
   2e9b2:	0792      	lsls	r2, r2, #30
   2e9b4:	f100 8128 	bmi.w	2ec08 <pdn_interface_pdn_id_get+0x330>
   2e9b8:	e7dd      	b.n	2e976 <pdn_interface_pdn_id_get+0x9e>
   2e9ba:	4c7b      	ldr	r4, [pc, #492]	; (2eba8 <pdn_interface_pdn_id_get+0x2d0>)
   2e9bc:	6823      	ldr	r3, [r4, #0]
   2e9be:	b11b      	cbz	r3, 2e9c8 <pdn_interface_pdn_id_get+0xf0>
   2e9c0:	689b      	ldr	r3, [r3, #8]
   2e9c2:	2b03      	cmp	r3, #3
   2e9c4:	f000 822a 	beq.w	2ee1c <pdn_interface_pdn_id_get+0x544>
   2e9c8:	6863      	ldr	r3, [r4, #4]
   2e9ca:	b11b      	cbz	r3, 2e9d4 <pdn_interface_pdn_id_get+0xfc>
   2e9cc:	689b      	ldr	r3, [r3, #8]
   2e9ce:	2b03      	cmp	r3, #3
   2e9d0:	f000 8209 	beq.w	2ede6 <pdn_interface_pdn_id_get+0x50e>
   2e9d4:	68a3      	ldr	r3, [r4, #8]
   2e9d6:	b11b      	cbz	r3, 2e9e0 <pdn_interface_pdn_id_get+0x108>
   2e9d8:	689b      	ldr	r3, [r3, #8]
   2e9da:	2b03      	cmp	r3, #3
   2e9dc:	f000 81b3 	beq.w	2ed46 <pdn_interface_pdn_id_get+0x46e>
   2e9e0:	68e3      	ldr	r3, [r4, #12]
   2e9e2:	b11b      	cbz	r3, 2e9ec <pdn_interface_pdn_id_get+0x114>
   2e9e4:	689d      	ldr	r5, [r3, #8]
   2e9e6:	2d03      	cmp	r5, #3
   2e9e8:	f000 81c8 	beq.w	2ed7c <pdn_interface_pdn_id_get+0x4a4>
   2e9ec:	6923      	ldr	r3, [r4, #16]
   2e9ee:	b11b      	cbz	r3, 2e9f8 <pdn_interface_pdn_id_get+0x120>
   2e9f0:	689b      	ldr	r3, [r3, #8]
   2e9f2:	2b03      	cmp	r3, #3
   2e9f4:	f000 80ee 	beq.w	2ebd4 <pdn_interface_pdn_id_get+0x2fc>
   2e9f8:	6963      	ldr	r3, [r4, #20]
   2e9fa:	b11b      	cbz	r3, 2ea04 <pdn_interface_pdn_id_get+0x12c>
   2e9fc:	689b      	ldr	r3, [r3, #8]
   2e9fe:	2b03      	cmp	r3, #3
   2ea00:	f000 8150 	beq.w	2eca4 <pdn_interface_pdn_id_get+0x3cc>
   2ea04:	69a3      	ldr	r3, [r4, #24]
   2ea06:	b11b      	cbz	r3, 2ea10 <pdn_interface_pdn_id_get+0x138>
   2ea08:	689b      	ldr	r3, [r3, #8]
   2ea0a:	2b03      	cmp	r3, #3
   2ea0c:	f000 8165 	beq.w	2ecda <pdn_interface_pdn_id_get+0x402>
   2ea10:	69e3      	ldr	r3, [r4, #28]
   2ea12:	b11b      	cbz	r3, 2ea1c <pdn_interface_pdn_id_get+0x144>
   2ea14:	689b      	ldr	r3, [r3, #8]
   2ea16:	2b03      	cmp	r3, #3
   2ea18:	f000 817a 	beq.w	2ed10 <pdn_interface_pdn_id_get+0x438>
   2ea1c:	6a23      	ldr	r3, [r4, #32]
   2ea1e:	b11b      	cbz	r3, 2ea28 <pdn_interface_pdn_id_get+0x150>
   2ea20:	689b      	ldr	r3, [r3, #8]
   2ea22:	2b03      	cmp	r3, #3
   2ea24:	f000 81c4 	beq.w	2edb0 <pdn_interface_pdn_id_get+0x4d8>
   2ea28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ea2a:	2b00      	cmp	r3, #0
   2ea2c:	d09b      	beq.n	2e966 <pdn_interface_pdn_id_get+0x8e>
   2ea2e:	689b      	ldr	r3, [r3, #8]
   2ea30:	2b03      	cmp	r3, #3
   2ea32:	d198      	bne.n	2e966 <pdn_interface_pdn_id_get+0x8e>
   2ea34:	4630      	mov	r0, r6
   2ea36:	f7ea fb1b 	bl	19070 <strlen>
   2ea3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ea3c:	69da      	ldr	r2, [r3, #28]
   2ea3e:	4290      	cmp	r0, r2
   2ea40:	d191      	bne.n	2e966 <pdn_interface_pdn_id_get+0x8e>
   2ea42:	e9d3 5105 	ldrd	r5, r1, [r3, #20]
   2ea46:	4429      	add	r1, r5
   2ea48:	3120      	adds	r1, #32
   2ea4a:	4602      	mov	r2, r0
   2ea4c:	4419      	add	r1, r3
   2ea4e:	4630      	mov	r0, r6
   2ea50:	f008 fe3e 	bl	376d0 <strncmp>
   2ea54:	2800      	cmp	r0, #0
   2ea56:	d186      	bne.n	2e966 <pdn_interface_pdn_id_get+0x8e>
   2ea58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ea5a:	68da      	ldr	r2, [r3, #12]
   2ea5c:	07d2      	lsls	r2, r2, #31
   2ea5e:	d582      	bpl.n	2e966 <pdn_interface_pdn_id_get+0x8e>
   2ea60:	2509      	movs	r5, #9
   2ea62:	e0d1      	b.n	2ec08 <pdn_interface_pdn_id_get+0x330>
   2ea64:	4630      	mov	r0, r6
   2ea66:	f7ea fb03 	bl	19070 <strlen>
   2ea6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ea6c:	69da      	ldr	r2, [r3, #28]
   2ea6e:	4290      	cmp	r0, r2
   2ea70:	f47f af79 	bne.w	2e966 <pdn_interface_pdn_id_get+0x8e>
   2ea74:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
   2ea78:	4421      	add	r1, r4
   2ea7a:	3120      	adds	r1, #32
   2ea7c:	4602      	mov	r2, r0
   2ea7e:	4419      	add	r1, r3
   2ea80:	4630      	mov	r0, r6
   2ea82:	f008 fe25 	bl	376d0 <strncmp>
   2ea86:	e76e      	b.n	2e966 <pdn_interface_pdn_id_get+0x8e>
   2ea88:	4630      	mov	r0, r6
   2ea8a:	f7ea faf1 	bl	19070 <strlen>
   2ea8e:	68e3      	ldr	r3, [r4, #12]
   2ea90:	69da      	ldr	r2, [r3, #28]
   2ea92:	4290      	cmp	r0, r2
   2ea94:	f47f af44 	bne.w	2e920 <pdn_interface_pdn_id_get+0x48>
   2ea98:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2ea9c:	4429      	add	r1, r5
   2ea9e:	3120      	adds	r1, #32
   2eaa0:	4602      	mov	r2, r0
   2eaa2:	4419      	add	r1, r3
   2eaa4:	4630      	mov	r0, r6
   2eaa6:	f008 fe13 	bl	376d0 <strncmp>
   2eaaa:	e739      	b.n	2e920 <pdn_interface_pdn_id_get+0x48>
   2eaac:	4630      	mov	r0, r6
   2eaae:	f7ea fadf 	bl	19070 <strlen>
   2eab2:	68a3      	ldr	r3, [r4, #8]
   2eab4:	69da      	ldr	r2, [r3, #28]
   2eab6:	4290      	cmp	r0, r2
   2eab8:	f47f af2c 	bne.w	2e914 <pdn_interface_pdn_id_get+0x3c>
   2eabc:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2eac0:	4429      	add	r1, r5
   2eac2:	3120      	adds	r1, #32
   2eac4:	4602      	mov	r2, r0
   2eac6:	4419      	add	r1, r3
   2eac8:	4630      	mov	r0, r6
   2eaca:	f008 fe01 	bl	376d0 <strncmp>
   2eace:	e721      	b.n	2e914 <pdn_interface_pdn_id_get+0x3c>
   2ead0:	4630      	mov	r0, r6
   2ead2:	f7ea facd 	bl	19070 <strlen>
   2ead6:	6863      	ldr	r3, [r4, #4]
   2ead8:	69da      	ldr	r2, [r3, #28]
   2eada:	4290      	cmp	r0, r2
   2eadc:	f47f af14 	bne.w	2e908 <pdn_interface_pdn_id_get+0x30>
   2eae0:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2eae4:	4429      	add	r1, r5
   2eae6:	3120      	adds	r1, #32
   2eae8:	4602      	mov	r2, r0
   2eaea:	4419      	add	r1, r3
   2eaec:	4630      	mov	r0, r6
   2eaee:	f008 fdef 	bl	376d0 <strncmp>
   2eaf2:	e709      	b.n	2e908 <pdn_interface_pdn_id_get+0x30>
   2eaf4:	4608      	mov	r0, r1
   2eaf6:	f7ea fabb 	bl	19070 <strlen>
   2eafa:	6823      	ldr	r3, [r4, #0]
   2eafc:	69da      	ldr	r2, [r3, #28]
   2eafe:	4282      	cmp	r2, r0
   2eb00:	f47f aefc 	bne.w	2e8fc <pdn_interface_pdn_id_get+0x24>
   2eb04:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   2eb08:	4401      	add	r1, r0
   2eb0a:	3120      	adds	r1, #32
   2eb0c:	4419      	add	r1, r3
   2eb0e:	4630      	mov	r0, r6
   2eb10:	f008 fdde 	bl	376d0 <strncmp>
   2eb14:	e6f2      	b.n	2e8fc <pdn_interface_pdn_id_get+0x24>
   2eb16:	4630      	mov	r0, r6
   2eb18:	f7ea faaa 	bl	19070 <strlen>
   2eb1c:	6923      	ldr	r3, [r4, #16]
   2eb1e:	69da      	ldr	r2, [r3, #28]
   2eb20:	4290      	cmp	r0, r2
   2eb22:	f47f af03 	bne.w	2e92c <pdn_interface_pdn_id_get+0x54>
   2eb26:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2eb2a:	4429      	add	r1, r5
   2eb2c:	3120      	adds	r1, #32
   2eb2e:	4602      	mov	r2, r0
   2eb30:	4419      	add	r1, r3
   2eb32:	4630      	mov	r0, r6
   2eb34:	f008 fdcc 	bl	376d0 <strncmp>
   2eb38:	e6f8      	b.n	2e92c <pdn_interface_pdn_id_get+0x54>
   2eb3a:	4630      	mov	r0, r6
   2eb3c:	f7ea fa98 	bl	19070 <strlen>
   2eb40:	6a23      	ldr	r3, [r4, #32]
   2eb42:	69da      	ldr	r2, [r3, #28]
   2eb44:	4290      	cmp	r0, r2
   2eb46:	f47f af09 	bne.w	2e95c <pdn_interface_pdn_id_get+0x84>
   2eb4a:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2eb4e:	4429      	add	r1, r5
   2eb50:	3120      	adds	r1, #32
   2eb52:	4602      	mov	r2, r0
   2eb54:	4419      	add	r1, r3
   2eb56:	4630      	mov	r0, r6
   2eb58:	f008 fdba 	bl	376d0 <strncmp>
   2eb5c:	e6fe      	b.n	2e95c <pdn_interface_pdn_id_get+0x84>
   2eb5e:	4630      	mov	r0, r6
   2eb60:	f7ea fa86 	bl	19070 <strlen>
   2eb64:	69e3      	ldr	r3, [r4, #28]
   2eb66:	69da      	ldr	r2, [r3, #28]
   2eb68:	4290      	cmp	r0, r2
   2eb6a:	f47f aef1 	bne.w	2e950 <pdn_interface_pdn_id_get+0x78>
   2eb6e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2eb72:	4429      	add	r1, r5
   2eb74:	3120      	adds	r1, #32
   2eb76:	4602      	mov	r2, r0
   2eb78:	4419      	add	r1, r3
   2eb7a:	4630      	mov	r0, r6
   2eb7c:	f008 fda8 	bl	376d0 <strncmp>
   2eb80:	e6e6      	b.n	2e950 <pdn_interface_pdn_id_get+0x78>
   2eb82:	4630      	mov	r0, r6
   2eb84:	f7ea fa74 	bl	19070 <strlen>
   2eb88:	69a3      	ldr	r3, [r4, #24]
   2eb8a:	69da      	ldr	r2, [r3, #28]
   2eb8c:	4290      	cmp	r0, r2
   2eb8e:	f47f aed9 	bne.w	2e944 <pdn_interface_pdn_id_get+0x6c>
   2eb92:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2eb96:	4429      	add	r1, r5
   2eb98:	3120      	adds	r1, #32
   2eb9a:	4602      	mov	r2, r0
   2eb9c:	4419      	add	r1, r3
   2eb9e:	4630      	mov	r0, r6
   2eba0:	f008 fd96 	bl	376d0 <strncmp>
   2eba4:	e6ce      	b.n	2e944 <pdn_interface_pdn_id_get+0x6c>
   2eba6:	bf00      	nop
   2eba8:	20023e94 	.word	0x20023e94
   2ebac:	20023e90 	.word	0x20023e90
   2ebb0:	4630      	mov	r0, r6
   2ebb2:	f7ea fa5d 	bl	19070 <strlen>
   2ebb6:	6963      	ldr	r3, [r4, #20]
   2ebb8:	69da      	ldr	r2, [r3, #28]
   2ebba:	4290      	cmp	r0, r2
   2ebbc:	f47f aebc 	bne.w	2e938 <pdn_interface_pdn_id_get+0x60>
   2ebc0:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2ebc4:	4429      	add	r1, r5
   2ebc6:	3120      	adds	r1, #32
   2ebc8:	4602      	mov	r2, r0
   2ebca:	4419      	add	r1, r3
   2ebcc:	4630      	mov	r0, r6
   2ebce:	f008 fd7f 	bl	376d0 <strncmp>
   2ebd2:	e6b1      	b.n	2e938 <pdn_interface_pdn_id_get+0x60>
   2ebd4:	4630      	mov	r0, r6
   2ebd6:	f7ea fa4b 	bl	19070 <strlen>
   2ebda:	6923      	ldr	r3, [r4, #16]
   2ebdc:	69da      	ldr	r2, [r3, #28]
   2ebde:	4290      	cmp	r0, r2
   2ebe0:	f47f af0a 	bne.w	2e9f8 <pdn_interface_pdn_id_get+0x120>
   2ebe4:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2ebe8:	4429      	add	r1, r5
   2ebea:	3120      	adds	r1, #32
   2ebec:	4602      	mov	r2, r0
   2ebee:	4419      	add	r1, r3
   2ebf0:	4630      	mov	r0, r6
   2ebf2:	f008 fd6d 	bl	376d0 <strncmp>
   2ebf6:	2800      	cmp	r0, #0
   2ebf8:	f47f aefe 	bne.w	2e9f8 <pdn_interface_pdn_id_get+0x120>
   2ebfc:	6923      	ldr	r3, [r4, #16]
   2ebfe:	68da      	ldr	r2, [r3, #12]
   2ec00:	07d2      	lsls	r2, r2, #31
   2ec02:	f57f aef9 	bpl.w	2e9f8 <pdn_interface_pdn_id_get+0x120>
   2ec06:	2504      	movs	r5, #4
   2ec08:	6858      	ldr	r0, [r3, #4]
   2ec0a:	1c43      	adds	r3, r0, #1
   2ec0c:	f47f aead 	bne.w	2e96a <pdn_interface_pdn_id_get+0x92>
   2ec10:	4e9d      	ldr	r6, [pc, #628]	; (2ee88 <pdn_interface_pdn_id_get+0x5b0>)
   2ec12:	4b9e      	ldr	r3, [pc, #632]	; (2ee8c <pdn_interface_pdn_id_get+0x5b4>)
   2ec14:	4a9e      	ldr	r2, [pc, #632]	; (2ee90 <pdn_interface_pdn_id_get+0x5b8>)
   2ec16:	f44f 7180 	mov.w	r1, #256	; 0x100
   2ec1a:	4630      	mov	r0, r6
   2ec1c:	f004 fb28 	bl	33270 <sniprintf>
   2ec20:	4c9c      	ldr	r4, [pc, #624]	; (2ee94 <pdn_interface_pdn_id_get+0x5bc>)
   2ec22:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2ec26:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   2ec2a:	4a9b      	ldr	r2, [pc, #620]	; (2ee98 <pdn_interface_pdn_id_get+0x5c0>)
   2ec2c:	681b      	ldr	r3, [r3, #0]
   2ec2e:	4430      	add	r0, r6
   2ec30:	f8df 8270 	ldr.w	r8, [pc, #624]	; 2eea4 <pdn_interface_pdn_id_get+0x5cc>
   2ec34:	f004 fb1c 	bl	33270 <sniprintf>
   2ec38:	4630      	mov	r0, r6
   2ec3a:	f8d8 9000 	ldr.w	r9, [r8]
   2ec3e:	2700      	movs	r7, #0
   2ec40:	f7ea fa16 	bl	19070 <strlen>
   2ec44:	4631      	mov	r1, r6
   2ec46:	4602      	mov	r2, r0
   2ec48:	463b      	mov	r3, r7
   2ec4a:	4648      	mov	r0, r9
   2ec4c:	9701      	str	r7, [sp, #4]
   2ec4e:	9700      	str	r7, [sp, #0]
   2ec50:	f7fe fde0 	bl	2d814 <at_interface_write>
   2ec54:	4681      	mov	r9, r0
   2ec56:	4630      	mov	r0, r6
   2ec58:	f7ea fa0a 	bl	19070 <strlen>
   2ec5c:	4548      	cmp	r0, r9
   2ec5e:	f040 810b 	bne.w	2ee78 <pdn_interface_pdn_id_get+0x5a0>
   2ec62:	463b      	mov	r3, r7
   2ec64:	f44f 7280 	mov.w	r2, #256	; 0x100
   2ec68:	e9cd 7700 	strd	r7, r7, [sp]
   2ec6c:	4631      	mov	r1, r6
   2ec6e:	f8d8 0000 	ldr.w	r0, [r8]
   2ec72:	f7fe ff23 	bl	2dabc <at_interface_read>
   2ec76:	4607      	mov	r7, r0
   2ec78:	4888      	ldr	r0, [pc, #544]	; (2ee9c <pdn_interface_pdn_id_get+0x5c4>)
   2ec7a:	f7ea f9f9 	bl	19070 <strlen>
   2ec7e:	4287      	cmp	r7, r0
   2ec80:	4602      	mov	r2, r0
   2ec82:	f2c0 80e9 	blt.w	2ee58 <pdn_interface_pdn_id_get+0x580>
   2ec86:	4631      	mov	r1, r6
   2ec88:	4884      	ldr	r0, [pc, #528]	; (2ee9c <pdn_interface_pdn_id_get+0x5c4>)
   2ec8a:	f008 fd21 	bl	376d0 <strncmp>
   2ec8e:	2800      	cmp	r0, #0
   2ec90:	f040 80e2 	bne.w	2ee58 <pdn_interface_pdn_id_get+0x580>
   2ec94:	4631      	mov	r1, r6
   2ec96:	4628      	mov	r0, r5
   2ec98:	f7ff f830 	bl	2dcfc <pdn_id_get_parser>
   2ec9c:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   2eca0:	6858      	ldr	r0, [r3, #4]
   2eca2:	e662      	b.n	2e96a <pdn_interface_pdn_id_get+0x92>
   2eca4:	4630      	mov	r0, r6
   2eca6:	f7ea f9e3 	bl	19070 <strlen>
   2ecaa:	6963      	ldr	r3, [r4, #20]
   2ecac:	69da      	ldr	r2, [r3, #28]
   2ecae:	4290      	cmp	r0, r2
   2ecb0:	f47f aea8 	bne.w	2ea04 <pdn_interface_pdn_id_get+0x12c>
   2ecb4:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2ecb8:	4429      	add	r1, r5
   2ecba:	3120      	adds	r1, #32
   2ecbc:	4602      	mov	r2, r0
   2ecbe:	4419      	add	r1, r3
   2ecc0:	4630      	mov	r0, r6
   2ecc2:	f008 fd05 	bl	376d0 <strncmp>
   2ecc6:	2800      	cmp	r0, #0
   2ecc8:	f47f ae9c 	bne.w	2ea04 <pdn_interface_pdn_id_get+0x12c>
   2eccc:	6963      	ldr	r3, [r4, #20]
   2ecce:	68da      	ldr	r2, [r3, #12]
   2ecd0:	07d7      	lsls	r7, r2, #31
   2ecd2:	f57f ae97 	bpl.w	2ea04 <pdn_interface_pdn_id_get+0x12c>
   2ecd6:	2505      	movs	r5, #5
   2ecd8:	e796      	b.n	2ec08 <pdn_interface_pdn_id_get+0x330>
   2ecda:	4630      	mov	r0, r6
   2ecdc:	f7ea f9c8 	bl	19070 <strlen>
   2ece0:	69a3      	ldr	r3, [r4, #24]
   2ece2:	69da      	ldr	r2, [r3, #28]
   2ece4:	4290      	cmp	r0, r2
   2ece6:	f47f ae93 	bne.w	2ea10 <pdn_interface_pdn_id_get+0x138>
   2ecea:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2ecee:	4429      	add	r1, r5
   2ecf0:	3120      	adds	r1, #32
   2ecf2:	4602      	mov	r2, r0
   2ecf4:	4419      	add	r1, r3
   2ecf6:	4630      	mov	r0, r6
   2ecf8:	f008 fcea 	bl	376d0 <strncmp>
   2ecfc:	2800      	cmp	r0, #0
   2ecfe:	f47f ae87 	bne.w	2ea10 <pdn_interface_pdn_id_get+0x138>
   2ed02:	69a3      	ldr	r3, [r4, #24]
   2ed04:	68da      	ldr	r2, [r3, #12]
   2ed06:	07d5      	lsls	r5, r2, #31
   2ed08:	f57f ae82 	bpl.w	2ea10 <pdn_interface_pdn_id_get+0x138>
   2ed0c:	2506      	movs	r5, #6
   2ed0e:	e77b      	b.n	2ec08 <pdn_interface_pdn_id_get+0x330>
   2ed10:	4630      	mov	r0, r6
   2ed12:	f7ea f9ad 	bl	19070 <strlen>
   2ed16:	69e3      	ldr	r3, [r4, #28]
   2ed18:	69da      	ldr	r2, [r3, #28]
   2ed1a:	4290      	cmp	r0, r2
   2ed1c:	f47f ae7e 	bne.w	2ea1c <pdn_interface_pdn_id_get+0x144>
   2ed20:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2ed24:	4429      	add	r1, r5
   2ed26:	3120      	adds	r1, #32
   2ed28:	4602      	mov	r2, r0
   2ed2a:	4419      	add	r1, r3
   2ed2c:	4630      	mov	r0, r6
   2ed2e:	f008 fccf 	bl	376d0 <strncmp>
   2ed32:	2800      	cmp	r0, #0
   2ed34:	f47f ae72 	bne.w	2ea1c <pdn_interface_pdn_id_get+0x144>
   2ed38:	69e3      	ldr	r3, [r4, #28]
   2ed3a:	68da      	ldr	r2, [r3, #12]
   2ed3c:	07d0      	lsls	r0, r2, #31
   2ed3e:	f57f ae6d 	bpl.w	2ea1c <pdn_interface_pdn_id_get+0x144>
   2ed42:	2507      	movs	r5, #7
   2ed44:	e760      	b.n	2ec08 <pdn_interface_pdn_id_get+0x330>
   2ed46:	4630      	mov	r0, r6
   2ed48:	f7ea f992 	bl	19070 <strlen>
   2ed4c:	68a3      	ldr	r3, [r4, #8]
   2ed4e:	69da      	ldr	r2, [r3, #28]
   2ed50:	4290      	cmp	r0, r2
   2ed52:	f47f ae45 	bne.w	2e9e0 <pdn_interface_pdn_id_get+0x108>
   2ed56:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2ed5a:	4429      	add	r1, r5
   2ed5c:	3120      	adds	r1, #32
   2ed5e:	4602      	mov	r2, r0
   2ed60:	4419      	add	r1, r3
   2ed62:	4630      	mov	r0, r6
   2ed64:	f008 fcb4 	bl	376d0 <strncmp>
   2ed68:	2800      	cmp	r0, #0
   2ed6a:	f47f ae39 	bne.w	2e9e0 <pdn_interface_pdn_id_get+0x108>
   2ed6e:	68a3      	ldr	r3, [r4, #8]
   2ed70:	68da      	ldr	r2, [r3, #12]
   2ed72:	07d0      	lsls	r0, r2, #31
   2ed74:	f57f ae34 	bpl.w	2e9e0 <pdn_interface_pdn_id_get+0x108>
   2ed78:	2502      	movs	r5, #2
   2ed7a:	e745      	b.n	2ec08 <pdn_interface_pdn_id_get+0x330>
   2ed7c:	4630      	mov	r0, r6
   2ed7e:	f7ea f977 	bl	19070 <strlen>
   2ed82:	68e3      	ldr	r3, [r4, #12]
   2ed84:	69da      	ldr	r2, [r3, #28]
   2ed86:	4290      	cmp	r0, r2
   2ed88:	f47f ae30 	bne.w	2e9ec <pdn_interface_pdn_id_get+0x114>
   2ed8c:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   2ed90:	4439      	add	r1, r7
   2ed92:	3120      	adds	r1, #32
   2ed94:	4602      	mov	r2, r0
   2ed96:	4419      	add	r1, r3
   2ed98:	4630      	mov	r0, r6
   2ed9a:	f008 fc99 	bl	376d0 <strncmp>
   2ed9e:	2800      	cmp	r0, #0
   2eda0:	f47f ae24 	bne.w	2e9ec <pdn_interface_pdn_id_get+0x114>
   2eda4:	68e3      	ldr	r3, [r4, #12]
   2eda6:	68da      	ldr	r2, [r3, #12]
   2eda8:	07d1      	lsls	r1, r2, #31
   2edaa:	f53f af2d 	bmi.w	2ec08 <pdn_interface_pdn_id_get+0x330>
   2edae:	e61d      	b.n	2e9ec <pdn_interface_pdn_id_get+0x114>
   2edb0:	4630      	mov	r0, r6
   2edb2:	f7ea f95d 	bl	19070 <strlen>
   2edb6:	6a23      	ldr	r3, [r4, #32]
   2edb8:	69da      	ldr	r2, [r3, #28]
   2edba:	4290      	cmp	r0, r2
   2edbc:	f47f ae34 	bne.w	2ea28 <pdn_interface_pdn_id_get+0x150>
   2edc0:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2edc4:	4429      	add	r1, r5
   2edc6:	3120      	adds	r1, #32
   2edc8:	4602      	mov	r2, r0
   2edca:	4419      	add	r1, r3
   2edcc:	4630      	mov	r0, r6
   2edce:	f008 fc7f 	bl	376d0 <strncmp>
   2edd2:	2800      	cmp	r0, #0
   2edd4:	f47f ae28 	bne.w	2ea28 <pdn_interface_pdn_id_get+0x150>
   2edd8:	6a23      	ldr	r3, [r4, #32]
   2edda:	68da      	ldr	r2, [r3, #12]
   2eddc:	07d1      	lsls	r1, r2, #31
   2edde:	f57f ae23 	bpl.w	2ea28 <pdn_interface_pdn_id_get+0x150>
   2ede2:	2508      	movs	r5, #8
   2ede4:	e710      	b.n	2ec08 <pdn_interface_pdn_id_get+0x330>
   2ede6:	4630      	mov	r0, r6
   2ede8:	f7ea f942 	bl	19070 <strlen>
   2edec:	6863      	ldr	r3, [r4, #4]
   2edee:	69da      	ldr	r2, [r3, #28]
   2edf0:	4290      	cmp	r0, r2
   2edf2:	f47f adef 	bne.w	2e9d4 <pdn_interface_pdn_id_get+0xfc>
   2edf6:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2edfa:	4429      	add	r1, r5
   2edfc:	3120      	adds	r1, #32
   2edfe:	4602      	mov	r2, r0
   2ee00:	4419      	add	r1, r3
   2ee02:	4630      	mov	r0, r6
   2ee04:	f008 fc64 	bl	376d0 <strncmp>
   2ee08:	2800      	cmp	r0, #0
   2ee0a:	f47f ade3 	bne.w	2e9d4 <pdn_interface_pdn_id_get+0xfc>
   2ee0e:	6863      	ldr	r3, [r4, #4]
   2ee10:	68da      	ldr	r2, [r3, #12]
   2ee12:	07d5      	lsls	r5, r2, #31
   2ee14:	f57f adde 	bpl.w	2e9d4 <pdn_interface_pdn_id_get+0xfc>
   2ee18:	2501      	movs	r5, #1
   2ee1a:	e6f5      	b.n	2ec08 <pdn_interface_pdn_id_get+0x330>
   2ee1c:	4608      	mov	r0, r1
   2ee1e:	f7ea f927 	bl	19070 <strlen>
   2ee22:	6823      	ldr	r3, [r4, #0]
   2ee24:	69da      	ldr	r2, [r3, #28]
   2ee26:	4290      	cmp	r0, r2
   2ee28:	f47f adce 	bne.w	2e9c8 <pdn_interface_pdn_id_get+0xf0>
   2ee2c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   2ee30:	4429      	add	r1, r5
   2ee32:	3120      	adds	r1, #32
   2ee34:	4602      	mov	r2, r0
   2ee36:	4419      	add	r1, r3
   2ee38:	4630      	mov	r0, r6
   2ee3a:	f008 fc49 	bl	376d0 <strncmp>
   2ee3e:	4605      	mov	r5, r0
   2ee40:	2800      	cmp	r0, #0
   2ee42:	f47f adc1 	bne.w	2e9c8 <pdn_interface_pdn_id_get+0xf0>
   2ee46:	6823      	ldr	r3, [r4, #0]
   2ee48:	68da      	ldr	r2, [r3, #12]
   2ee4a:	07d7      	lsls	r7, r2, #31
   2ee4c:	f53f aedc 	bmi.w	2ec08 <pdn_interface_pdn_id_get+0x330>
   2ee50:	e5ba      	b.n	2e9c8 <pdn_interface_pdn_id_get+0xf0>
   2ee52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ee56:	4770      	bx	lr
   2ee58:	4811      	ldr	r0, [pc, #68]	; (2eea0 <pdn_interface_pdn_id_get+0x5c8>)
   2ee5a:	f7ea f909 	bl	19070 <strlen>
   2ee5e:	490a      	ldr	r1, [pc, #40]	; (2ee88 <pdn_interface_pdn_id_get+0x5b0>)
   2ee60:	4602      	mov	r2, r0
   2ee62:	480f      	ldr	r0, [pc, #60]	; (2eea0 <pdn_interface_pdn_id_get+0x5c8>)
   2ee64:	f008 fc34 	bl	376d0 <strncmp>
   2ee68:	b930      	cbnz	r0, 2ee78 <pdn_interface_pdn_id_get+0x5a0>
   2ee6a:	2008      	movs	r0, #8
   2ee6c:	f7f6 fd86 	bl	2597c <bsd_os_errno_set>
   2ee70:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   2ee74:	6858      	ldr	r0, [r3, #4]
   2ee76:	e578      	b.n	2e96a <pdn_interface_pdn_id_get+0x92>
   2ee78:	2005      	movs	r0, #5
   2ee7a:	f7f6 fd7f 	bl	2597c <bsd_os_errno_set>
   2ee7e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   2ee82:	6858      	ldr	r0, [r3, #4]
   2ee84:	e571      	b.n	2e96a <pdn_interface_pdn_id_get+0x92>
   2ee86:	bf00      	nop
   2ee88:	20023d94 	.word	0x20023d94
   2ee8c:	00038c68 	.word	0x00038c68
   2ee90:	00038ca4 	.word	0x00038ca4
   2ee94:	20023e94 	.word	0x20023e94
   2ee98:	00038c64 	.word	0x00038c64
   2ee9c:	00038c78 	.word	0x00038c78
   2eea0:	00038cb4 	.word	0x00038cb4
   2eea4:	20023d90 	.word	0x20023d90

0002eea8 <bsd_platform_error_handler>:
   2eea8:	b508      	push	{r3, lr}
   2eeaa:	f7ea ff0f 	bl	19ccc <bsd_recoverable_error_handler>
   2eeae:	bd08      	pop	{r3, pc}

0002eeb0 <bsd_init>:
   2eeb0:	b160      	cbz	r0, 2eecc <bsd_init+0x1c>
   2eeb2:	b510      	push	{r4, lr}
   2eeb4:	4c07      	ldr	r4, [pc, #28]	; (2eed4 <bsd_init+0x24>)
   2eeb6:	7823      	ldrb	r3, [r4, #0]
   2eeb8:	b92b      	cbnz	r3, 2eec6 <bsd_init+0x16>
   2eeba:	f000 f81b 	bl	2eef4 <bsd_platform_init>
   2eebe:	b908      	cbnz	r0, 2eec4 <bsd_init+0x14>
   2eec0:	2301      	movs	r3, #1
   2eec2:	7023      	strb	r3, [r4, #0]
   2eec4:	bd10      	pop	{r4, pc}
   2eec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eeca:	bd10      	pop	{r4, pc}
   2eecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eed0:	4770      	bx	lr
   2eed2:	bf00      	nop
   2eed4:	2002cb9d 	.word	0x2002cb9d

0002eed8 <unimplemented_method>:
   2eed8:	b40f      	push	{r0, r1, r2, r3}
   2eeda:	b508      	push	{r3, lr}
   2eedc:	202d      	movs	r0, #45	; 0x2d
   2eede:	f7f6 fd4d 	bl	2597c <bsd_os_errno_set>
   2eee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2eee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eeea:	b004      	add	sp, #16
   2eeec:	4770      	bx	lr
   2eeee:	bf00      	nop

0002eef0 <rpc_transport_ipc_fault_handler>:
   2eef0:	f7ff bfda 	b.w	2eea8 <bsd_platform_error_handler>

0002eef4 <bsd_platform_init>:
   2eef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2eef6:	f04f 0c00 	mov.w	ip, #0
   2eefa:	f247 0660 	movw	r6, #28768	; 0x7060
   2eefe:	f24b 0260 	movw	r2, #45152	; 0xb060
   2ef02:	6843      	ldr	r3, [r0, #4]
   2ef04:	4d3a      	ldr	r5, [pc, #232]	; (2eff0 <bsd_platform_init+0xfc>)
   2ef06:	4607      	mov	r7, r0
   2ef08:	602b      	str	r3, [r5, #0]
   2ef0a:	7801      	ldrb	r1, [r0, #0]
   2ef0c:	2006      	movs	r0, #6
   2ef0e:	4561      	cmp	r1, ip
   2ef10:	bf08      	it	eq
   2ef12:	4632      	moveq	r2, r6
   2ef14:	4413      	add	r3, r2
   2ef16:	4c37      	ldr	r4, [pc, #220]	; (2eff4 <bsd_platform_init+0x100>)
   2ef18:	60ab      	str	r3, [r5, #8]
   2ef1a:	68b9      	ldr	r1, [r7, #8]
   2ef1c:	6063      	str	r3, [r4, #4]
   2ef1e:	4b36      	ldr	r3, [pc, #216]	; (2eff8 <bsd_platform_init+0x104>)
   2ef20:	b093      	sub	sp, #76	; 0x4c
   2ef22:	606a      	str	r2, [r5, #4]
   2ef24:	f8a4 c000 	strh.w	ip, [r4]
   2ef28:	1a8a      	subs	r2, r1, r2
   2ef2a:	60ea      	str	r2, [r5, #12]
   2ef2c:	60a2      	str	r2, [r4, #8]
   2ef2e:	81a0      	strh	r0, [r4, #12]
   2ef30:	6123      	str	r3, [r4, #16]
   2ef32:	f001 f8b7 	bl	300a4 <nrf_mem_init>
   2ef36:	2800      	cmp	r0, #0
   2ef38:	d156      	bne.n	2efe8 <bsd_platform_init+0xf4>
   2ef3a:	4621      	mov	r1, r4
   2ef3c:	a801      	add	r0, sp, #4
   2ef3e:	f001 f925 	bl	3018c <nrf_mem_register>
   2ef42:	2800      	cmp	r0, #0
   2ef44:	d150      	bne.n	2efe8 <bsd_platform_init+0xf4>
   2ef46:	f7f6 fead 	bl	25ca4 <bsd_os_init>
   2ef4a:	f7fd fbff 	bl	2c74c <rpc_framework_init>
   2ef4e:	2800      	cmp	r0, #0
   2ef50:	d14a      	bne.n	2efe8 <bsd_platform_init+0xf4>
   2ef52:	783a      	ldrb	r2, [r7, #0]
   2ef54:	682b      	ldr	r3, [r5, #0]
   2ef56:	bb32      	cbnz	r2, 2efa6 <bsd_platform_init+0xb2>
   2ef58:	4606      	mov	r6, r0
   2ef5a:	2220      	movs	r2, #32
   2ef5c:	2408      	movs	r4, #8
   2ef5e:	2500      	movs	r5, #0
   2ef60:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   2ef64:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   2ef68:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   2ef6c:	4411      	add	r1, r2
   2ef6e:	9302      	str	r3, [sp, #8]
   2ef70:	e9cd 6008 	strd	r6, r0, [sp, #32]
   2ef74:	910c      	str	r1, [sp, #48]	; 0x30
   2ef76:	9203      	str	r2, [sp, #12]
   2ef78:	f103 0140 	add.w	r1, r3, #64	; 0x40
   2ef7c:	9205      	str	r2, [sp, #20]
   2ef7e:	9207      	str	r2, [sp, #28]
   2ef80:	eb0d 0004 	add.w	r0, sp, r4
   2ef84:	189a      	adds	r2, r3, r2
   2ef86:	3360      	adds	r3, #96	; 0x60
   2ef88:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   2ef8c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   2ef90:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   2ef94:	940f      	str	r4, [sp, #60]	; 0x3c
   2ef96:	9104      	str	r1, [sp, #16]
   2ef98:	9206      	str	r2, [sp, #24]
   2ef9a:	930a      	str	r3, [sp, #40]	; 0x28
   2ef9c:	f7fa fb3a 	bl	29614 <rpc_transport_ipc_init>
   2efa0:	b128      	cbz	r0, 2efae <bsd_platform_init+0xba>
   2efa2:	b013      	add	sp, #76	; 0x4c
   2efa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2efa6:	441e      	add	r6, r3
   2efa8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   2efac:	e7d5      	b.n	2ef5a <bsd_platform_init+0x66>
   2efae:	f001 fddd 	bl	30b6c <interface_init>
   2efb2:	b9c8      	cbnz	r0, 2efe8 <bsd_platform_init+0xf4>
   2efb4:	f7fe fcac 	bl	2d910 <at_interface_init>
   2efb8:	b9b0      	cbnz	r0, 2efe8 <bsd_platform_init+0xf4>
   2efba:	f7fb fe4b 	bl	2ac54 <ip_interface_init>
   2efbe:	b998      	cbnz	r0, 2efe8 <bsd_platform_init+0xf4>
   2efc0:	f7fb f902 	bl	2a1c8 <tls_interface_init>
   2efc4:	b980      	cbnz	r0, 2efe8 <bsd_platform_init+0xf4>
   2efc6:	f001 faed 	bl	305a4 <mfu_interface_init>
   2efca:	b968      	cbnz	r0, 2efe8 <bsd_platform_init+0xf4>
   2efcc:	f7fe feee 	bl	2ddac <pdn_interface_init>
   2efd0:	b950      	cbnz	r0, 2efe8 <bsd_platform_init+0xf4>
   2efd2:	f7fe faf3 	bl	2d5bc <gnss_interface_init>
   2efd6:	b938      	cbnz	r0, 2efe8 <bsd_platform_init+0xf4>
   2efd8:	f7f9 fd5a 	bl	28a90 <logobj_interface_init>
   2efdc:	1b40      	subs	r0, r0, r5
   2efde:	bf18      	it	ne
   2efe0:	2001      	movne	r0, #1
   2efe2:	4240      	negs	r0, r0
   2efe4:	b013      	add	sp, #76	; 0x4c
   2efe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2efe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2efec:	b013      	add	sp, #76	; 0x4c
   2efee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2eff0:	20023ed0 	.word	0x20023ed0
   2eff4:	20023ebc 	.word	0x20023ebc
   2eff8:	00038e08 	.word	0x00038e08

0002effc <bsd_platform_af_method_table_get>:
   2effc:	2805      	cmp	r0, #5
   2effe:	d02a      	beq.n	2f056 <bsd_platform_af_method_table_get+0x5a>
   2f000:	b508      	push	{r3, lr}
   2f002:	d914      	bls.n	2f02e <bsd_platform_af_method_table_get+0x32>
   2f004:	280a      	cmp	r0, #10
   2f006:	d016      	beq.n	2f036 <bsd_platform_af_method_table_get+0x3a>
   2f008:	2866      	cmp	r0, #102	; 0x66
   2f00a:	d11f      	bne.n	2f04c <bsd_platform_af_method_table_get+0x50>
   2f00c:	f240 2302 	movw	r3, #514	; 0x202
   2f010:	429a      	cmp	r2, r3
   2f012:	d035      	beq.n	2f080 <bsd_platform_af_method_table_get+0x84>
   2f014:	f240 2305 	movw	r3, #517	; 0x205
   2f018:	429a      	cmp	r2, r3
   2f01a:	d035      	beq.n	2f088 <bsd_platform_af_method_table_get+0x8c>
   2f01c:	f240 2301 	movw	r3, #513	; 0x201
   2f020:	429a      	cmp	r2, r3
   2f022:	d02f      	beq.n	2f084 <bsd_platform_af_method_table_get+0x88>
   2f024:	202b      	movs	r0, #43	; 0x2b
   2f026:	f7f6 fca9 	bl	2597c <bsd_os_errno_set>
   2f02a:	2000      	movs	r0, #0
   2f02c:	bd08      	pop	{r3, pc}
   2f02e:	2801      	cmp	r0, #1
   2f030:	d016      	beq.n	2f060 <bsd_platform_af_method_table_get+0x64>
   2f032:	2802      	cmp	r0, #2
   2f034:	d10a      	bne.n	2f04c <bsd_platform_af_method_table_get+0x50>
   2f036:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   2f03a:	d21a      	bcs.n	2f072 <bsd_platform_af_method_table_get+0x76>
   2f03c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2f040:	d21a      	bcs.n	2f078 <bsd_platform_af_method_table_get+0x7c>
   2f042:	3a01      	subs	r2, #1
   2f044:	2a01      	cmp	r2, #1
   2f046:	d8ed      	bhi.n	2f024 <bsd_platform_af_method_table_get+0x28>
   2f048:	4810      	ldr	r0, [pc, #64]	; (2f08c <bsd_platform_af_method_table_get+0x90>)
   2f04a:	bd08      	pop	{r3, pc}
   2f04c:	2016      	movs	r0, #22
   2f04e:	f7f6 fc95 	bl	2597c <bsd_os_errno_set>
   2f052:	2000      	movs	r0, #0
   2f054:	bd08      	pop	{r3, pc}
   2f056:	2903      	cmp	r1, #3
   2f058:	480d      	ldr	r0, [pc, #52]	; (2f090 <bsd_platform_af_method_table_get+0x94>)
   2f05a:	bf18      	it	ne
   2f05c:	2000      	movne	r0, #0
   2f05e:	4770      	bx	lr
   2f060:	f240 2303 	movw	r3, #515	; 0x203
   2f064:	429a      	cmp	r2, r3
   2f066:	d009      	beq.n	2f07c <bsd_platform_af_method_table_get+0x80>
   2f068:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   2f06c:	d1da      	bne.n	2f024 <bsd_platform_af_method_table_get+0x28>
   2f06e:	4809      	ldr	r0, [pc, #36]	; (2f094 <bsd_platform_af_method_table_get+0x98>)
   2f070:	bd08      	pop	{r3, pc}
   2f072:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2f076:	d1d5      	bne.n	2f024 <bsd_platform_af_method_table_get+0x28>
   2f078:	4807      	ldr	r0, [pc, #28]	; (2f098 <bsd_platform_af_method_table_get+0x9c>)
   2f07a:	bd08      	pop	{r3, pc}
   2f07c:	4807      	ldr	r0, [pc, #28]	; (2f09c <bsd_platform_af_method_table_get+0xa0>)
   2f07e:	bd08      	pop	{r3, pc}
   2f080:	4807      	ldr	r0, [pc, #28]	; (2f0a0 <bsd_platform_af_method_table_get+0xa4>)
   2f082:	bd08      	pop	{r3, pc}
   2f084:	4807      	ldr	r0, [pc, #28]	; (2f0a4 <bsd_platform_af_method_table_get+0xa8>)
   2f086:	bd08      	pop	{r3, pc}
   2f088:	4807      	ldr	r0, [pc, #28]	; (2f0a8 <bsd_platform_af_method_table_get+0xac>)
   2f08a:	bd08      	pop	{r3, pc}
   2f08c:	00038cf0 	.word	0x00038cf0
   2f090:	00038de0 	.word	0x00038de0
   2f094:	00038d90 	.word	0x00038d90
   2f098:	00038d18 	.word	0x00038d18
   2f09c:	00038d40 	.word	0x00038d40
   2f0a0:	00038d68 	.word	0x00038d68
   2f0a4:	00038cc8 	.word	0x00038cc8
   2f0a8:	00038db8 	.word	0x00038db8

0002f0ac <bsd_platform_fd_method_table_get>:
   2f0ac:	b538      	push	{r3, r4, r5, lr}
   2f0ae:	4605      	mov	r5, r0
   2f0b0:	f001 fe8e 	bl	30dd0 <interface_socket_from_handle_get>
   2f0b4:	4604      	mov	r4, r0
   2f0b6:	b960      	cbnz	r0, 2f0d2 <bsd_platform_fd_method_table_get+0x26>
   2f0b8:	4b2c      	ldr	r3, [pc, #176]	; (2f16c <bsd_platform_fd_method_table_get+0xc0>)
   2f0ba:	429d      	cmp	r5, r3
   2f0bc:	d02f      	beq.n	2f11e <bsd_platform_fd_method_table_get+0x72>
   2f0be:	0c2b      	lsrs	r3, r5, #16
   2f0c0:	4a2b      	ldr	r2, [pc, #172]	; (2f170 <bsd_platform_fd_method_table_get+0xc4>)
   2f0c2:	041b      	lsls	r3, r3, #16
   2f0c4:	4293      	cmp	r3, r2
   2f0c6:	d03d      	beq.n	2f144 <bsd_platform_fd_method_table_get+0x98>
   2f0c8:	4b2a      	ldr	r3, [pc, #168]	; (2f174 <bsd_platform_fd_method_table_get+0xc8>)
   2f0ca:	429d      	cmp	r5, r3
   2f0cc:	d149      	bne.n	2f162 <bsd_platform_fd_method_table_get+0xb6>
   2f0ce:	482a      	ldr	r0, [pc, #168]	; (2f178 <bsd_platform_fd_method_table_get+0xcc>)
   2f0d0:	bd38      	pop	{r3, r4, r5, pc}
   2f0d2:	68c3      	ldr	r3, [r0, #12]
   2f0d4:	6942      	ldr	r2, [r0, #20]
   2f0d6:	2b05      	cmp	r3, #5
   2f0d8:	d036      	beq.n	2f148 <bsd_platform_fd_method_table_get+0x9c>
   2f0da:	d911      	bls.n	2f100 <bsd_platform_fd_method_table_get+0x54>
   2f0dc:	2b0a      	cmp	r3, #10
   2f0de:	d013      	beq.n	2f108 <bsd_platform_fd_method_table_get+0x5c>
   2f0e0:	2b66      	cmp	r3, #102	; 0x66
   2f0e2:	d11e      	bne.n	2f122 <bsd_platform_fd_method_table_get+0x76>
   2f0e4:	f240 2302 	movw	r3, #514	; 0x202
   2f0e8:	429a      	cmp	r2, r3
   2f0ea:	d02b      	beq.n	2f144 <bsd_platform_fd_method_table_get+0x98>
   2f0ec:	f240 2305 	movw	r3, #517	; 0x205
   2f0f0:	429a      	cmp	r2, r3
   2f0f2:	d02f      	beq.n	2f154 <bsd_platform_fd_method_table_get+0xa8>
   2f0f4:	f240 2301 	movw	r3, #513	; 0x201
   2f0f8:	429a      	cmp	r2, r3
   2f0fa:	d11e      	bne.n	2f13a <bsd_platform_fd_method_table_get+0x8e>
   2f0fc:	481f      	ldr	r0, [pc, #124]	; (2f17c <bsd_platform_fd_method_table_get+0xd0>)
   2f0fe:	bd38      	pop	{r3, r4, r5, pc}
   2f100:	2b01      	cmp	r3, #1
   2f102:	d013      	beq.n	2f12c <bsd_platform_fd_method_table_get+0x80>
   2f104:	2b02      	cmp	r3, #2
   2f106:	d10c      	bne.n	2f122 <bsd_platform_fd_method_table_get+0x76>
   2f108:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   2f10c:	d224      	bcs.n	2f158 <bsd_platform_fd_method_table_get+0xac>
   2f10e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2f112:	d224      	bcs.n	2f15e <bsd_platform_fd_method_table_get+0xb2>
   2f114:	3a01      	subs	r2, #1
   2f116:	2a01      	cmp	r2, #1
   2f118:	d80f      	bhi.n	2f13a <bsd_platform_fd_method_table_get+0x8e>
   2f11a:	4819      	ldr	r0, [pc, #100]	; (2f180 <bsd_platform_fd_method_table_get+0xd4>)
   2f11c:	bd38      	pop	{r3, r4, r5, pc}
   2f11e:	4819      	ldr	r0, [pc, #100]	; (2f184 <bsd_platform_fd_method_table_get+0xd8>)
   2f120:	bd38      	pop	{r3, r4, r5, pc}
   2f122:	2016      	movs	r0, #22
   2f124:	f7f6 fc2a 	bl	2597c <bsd_os_errno_set>
   2f128:	2000      	movs	r0, #0
   2f12a:	bd38      	pop	{r3, r4, r5, pc}
   2f12c:	f240 2303 	movw	r3, #515	; 0x203
   2f130:	429a      	cmp	r2, r3
   2f132:	d0f4      	beq.n	2f11e <bsd_platform_fd_method_table_get+0x72>
   2f134:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   2f138:	d0c9      	beq.n	2f0ce <bsd_platform_fd_method_table_get+0x22>
   2f13a:	202b      	movs	r0, #43	; 0x2b
   2f13c:	f7f6 fc1e 	bl	2597c <bsd_os_errno_set>
   2f140:	2000      	movs	r0, #0
   2f142:	bd38      	pop	{r3, r4, r5, pc}
   2f144:	4810      	ldr	r0, [pc, #64]	; (2f188 <bsd_platform_fd_method_table_get+0xdc>)
   2f146:	bd38      	pop	{r3, r4, r5, pc}
   2f148:	6903      	ldr	r3, [r0, #16]
   2f14a:	4810      	ldr	r0, [pc, #64]	; (2f18c <bsd_platform_fd_method_table_get+0xe0>)
   2f14c:	2b03      	cmp	r3, #3
   2f14e:	bf18      	it	ne
   2f150:	2000      	movne	r0, #0
   2f152:	bd38      	pop	{r3, r4, r5, pc}
   2f154:	480e      	ldr	r0, [pc, #56]	; (2f190 <bsd_platform_fd_method_table_get+0xe4>)
   2f156:	bd38      	pop	{r3, r4, r5, pc}
   2f158:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2f15c:	d1ed      	bne.n	2f13a <bsd_platform_fd_method_table_get+0x8e>
   2f15e:	480d      	ldr	r0, [pc, #52]	; (2f194 <bsd_platform_fd_method_table_get+0xe8>)
   2f160:	bd38      	pop	{r3, r4, r5, pc}
   2f162:	2009      	movs	r0, #9
   2f164:	f7f6 fc0a 	bl	2597c <bsd_os_errno_set>
   2f168:	4620      	mov	r0, r4
   2f16a:	bd38      	pop	{r3, r4, r5, pc}
   2f16c:	49765432 	.word	0x49765432
   2f170:	789a0000 	.word	0x789a0000
   2f174:	49765443 	.word	0x49765443
   2f178:	00038d90 	.word	0x00038d90
   2f17c:	00038cc8 	.word	0x00038cc8
   2f180:	00038cf0 	.word	0x00038cf0
   2f184:	00038d40 	.word	0x00038d40
   2f188:	00038d68 	.word	0x00038d68
   2f18c:	00038de0 	.word	0x00038de0
   2f190:	00038db8 	.word	0x00038db8
   2f194:	00038d18 	.word	0x00038d18

0002f198 <bsd_platform_getaddrinfo>:
   2f198:	f7fc bec6 	b.w	2bf28 <ip_interface_getaddrinfo>

0002f19c <bsd_platform_freeaddrinfo>:
   2f19c:	f7fc bfc2 	b.w	2c124 <ip_interface_freeaddrinfo>

0002f1a0 <bsd_platform_poll>:
   2f1a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f1a4:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   2f1a8:	b083      	sub	sp, #12
   2f1aa:	9200      	str	r2, [sp, #0]
   2f1ac:	2800      	cmp	r0, #0
   2f1ae:	d048      	beq.n	2f242 <bsd_platform_poll+0xa2>
   2f1b0:	1e4b      	subs	r3, r1, #1
   2f1b2:	2b08      	cmp	r3, #8
   2f1b4:	d845      	bhi.n	2f242 <bsd_platform_poll+0xa2>
   2f1b6:	4680      	mov	r8, r0
   2f1b8:	4605      	mov	r5, r0
   2f1ba:	2400      	movs	r4, #0
   2f1bc:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   2f1c0:	88ab      	ldrh	r3, [r5, #4]
   2f1c2:	6828      	ldr	r0, [r5, #0]
   2f1c4:	f003 0303 	and.w	r3, r3, #3
   2f1c8:	a901      	add	r1, sp, #4
   2f1ca:	f043 061c 	orr.w	r6, r3, #28
   2f1ce:	f001 fe0d 	bl	30dec <interface_socket_event_get>
   2f1d2:	9b01      	ldr	r3, [sp, #4]
   2f1d4:	3508      	adds	r5, #8
   2f1d6:	4033      	ands	r3, r6
   2f1d8:	f825 3c02 	strh.w	r3, [r5, #-2]
   2f1dc:	b103      	cbz	r3, 2f1e0 <bsd_platform_poll+0x40>
   2f1de:	3401      	adds	r4, #1
   2f1e0:	42af      	cmp	r7, r5
   2f1e2:	d1ed      	bne.n	2f1c0 <bsd_platform_poll+0x20>
   2f1e4:	bb9c      	cbnz	r4, 2f24e <bsd_platform_poll+0xae>
   2f1e6:	4669      	mov	r1, sp
   2f1e8:	4640      	mov	r0, r8
   2f1ea:	f7f6 fb0f 	bl	2580c <bsd_os_timedwait>
   2f1ee:	4607      	mov	r7, r0
   2f1f0:	b108      	cbz	r0, 2f1f6 <bsd_platform_poll+0x56>
   2f1f2:	283c      	cmp	r0, #60	; 0x3c
   2f1f4:	d11d      	bne.n	2f232 <bsd_platform_poll+0x92>
   2f1f6:	46c1      	mov	r9, r8
   2f1f8:	2600      	movs	r6, #0
   2f1fa:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   2f1fe:	f8d9 0000 	ldr.w	r0, [r9]
   2f202:	f003 0303 	and.w	r3, r3, #3
   2f206:	a901      	add	r1, sp, #4
   2f208:	f043 041c 	orr.w	r4, r3, #28
   2f20c:	f001 fdee 	bl	30dec <interface_socket_event_get>
   2f210:	9b01      	ldr	r3, [sp, #4]
   2f212:	f109 0908 	add.w	r9, r9, #8
   2f216:	4023      	ands	r3, r4
   2f218:	f829 3c02 	strh.w	r3, [r9, #-2]
   2f21c:	b103      	cbz	r3, 2f220 <bsd_platform_poll+0x80>
   2f21e:	3601      	adds	r6, #1
   2f220:	454d      	cmp	r5, r9
   2f222:	d1ea      	bne.n	2f1fa <bsd_platform_poll+0x5a>
   2f224:	b90e      	cbnz	r6, 2f22a <bsd_platform_poll+0x8a>
   2f226:	2f00      	cmp	r7, #0
   2f228:	d0dd      	beq.n	2f1e6 <bsd_platform_poll+0x46>
   2f22a:	4630      	mov	r0, r6
   2f22c:	b003      	add	sp, #12
   2f22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f232:	2023      	movs	r0, #35	; 0x23
   2f234:	f7f6 fba2 	bl	2597c <bsd_os_errno_set>
   2f238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f23c:	b003      	add	sp, #12
   2f23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f242:	2016      	movs	r0, #22
   2f244:	f7f6 fb9a 	bl	2597c <bsd_os_errno_set>
   2f248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f24c:	e7ee      	b.n	2f22c <bsd_platform_poll+0x8c>
   2f24e:	4620      	mov	r0, r4
   2f250:	e7ec      	b.n	2f22c <bsd_platform_poll+0x8c>
   2f252:	bf00      	nop

0002f254 <bsd_platform_fcntl>:
   2f254:	b508      	push	{r3, lr}
   2f256:	4b06      	ldr	r3, [pc, #24]	; (2f270 <bsd_platform_fcntl+0x1c>)
   2f258:	4298      	cmp	r0, r3
   2f25a:	d003      	beq.n	2f264 <bsd_platform_fcntl+0x10>
   2f25c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2f260:	f001 be6e 	b.w	30f40 <interface_socket_fcntl>
   2f264:	202d      	movs	r0, #45	; 0x2d
   2f266:	f7f6 fb89 	bl	2597c <bsd_os_errno_set>
   2f26a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f26e:	bd08      	pop	{r3, pc}
   2f270:	49765432 	.word	0x49765432

0002f274 <linked_list_init>:
   2f274:	b128      	cbz	r0, 2f282 <linked_list_init+0xe>
   2f276:	2300      	movs	r3, #0
   2f278:	6003      	str	r3, [r0, #0]
   2f27a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   2f27e:	4618      	mov	r0, r3
   2f280:	4770      	bx	lr
   2f282:	2007      	movs	r0, #7
   2f284:	4770      	bx	lr
   2f286:	bf00      	nop

0002f288 <linked_list_push>:
   2f288:	6802      	ldr	r2, [r0, #0]
   2f28a:	4603      	mov	r3, r0
   2f28c:	3201      	adds	r2, #1
   2f28e:	d00e      	beq.n	2f2ae <linked_list_push+0x26>
   2f290:	2200      	movs	r2, #0
   2f292:	600a      	str	r2, [r1, #0]
   2f294:	6802      	ldr	r2, [r0, #0]
   2f296:	b13a      	cbz	r2, 2f2a8 <linked_list_push+0x20>
   2f298:	6882      	ldr	r2, [r0, #8]
   2f29a:	6011      	str	r1, [r2, #0]
   2f29c:	6081      	str	r1, [r0, #8]
   2f29e:	681a      	ldr	r2, [r3, #0]
   2f2a0:	2000      	movs	r0, #0
   2f2a2:	3201      	adds	r2, #1
   2f2a4:	601a      	str	r2, [r3, #0]
   2f2a6:	4770      	bx	lr
   2f2a8:	e9c0 1101 	strd	r1, r1, [r0, #4]
   2f2ac:	e7f7      	b.n	2f29e <linked_list_push+0x16>
   2f2ae:	2004      	movs	r0, #4
   2f2b0:	4770      	bx	lr
   2f2b2:	bf00      	nop

0002f2b4 <linked_list_pop>:
   2f2b4:	4603      	mov	r3, r0
   2f2b6:	6800      	ldr	r0, [r0, #0]
   2f2b8:	b128      	cbz	r0, 2f2c6 <linked_list_pop+0x12>
   2f2ba:	6858      	ldr	r0, [r3, #4]
   2f2bc:	681a      	ldr	r2, [r3, #0]
   2f2be:	6801      	ldr	r1, [r0, #0]
   2f2c0:	3a01      	subs	r2, #1
   2f2c2:	6059      	str	r1, [r3, #4]
   2f2c4:	601a      	str	r2, [r3, #0]
   2f2c6:	4770      	bx	lr

0002f2c8 <linked_list_peek>:
   2f2c8:	6803      	ldr	r3, [r0, #0]
   2f2ca:	b10b      	cbz	r3, 2f2d0 <linked_list_peek+0x8>
   2f2cc:	6840      	ldr	r0, [r0, #4]
   2f2ce:	4770      	bx	lr
   2f2d0:	4618      	mov	r0, r3
   2f2d2:	4770      	bx	lr

0002f2d4 <linked_list_size_get>:
   2f2d4:	6800      	ldr	r0, [r0, #0]
   2f2d6:	4770      	bx	lr

0002f2d8 <linked_list_get_next>:
   2f2d8:	6800      	ldr	r0, [r0, #0]
   2f2da:	4770      	bx	lr

0002f2dc <nrf_socket>:
   2f2dc:	b570      	push	{r4, r5, r6, lr}
   2f2de:	4604      	mov	r4, r0
   2f2e0:	460d      	mov	r5, r1
   2f2e2:	4616      	mov	r6, r2
   2f2e4:	f7ff fe8a 	bl	2effc <bsd_platform_af_method_table_get>
   2f2e8:	b130      	cbz	r0, 2f2f8 <nrf_socket+0x1c>
   2f2ea:	6803      	ldr	r3, [r0, #0]
   2f2ec:	4632      	mov	r2, r6
   2f2ee:	4629      	mov	r1, r5
   2f2f0:	4620      	mov	r0, r4
   2f2f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2f2f6:	4718      	bx	r3
   2f2f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f2fc:	bd70      	pop	{r4, r5, r6, pc}
   2f2fe:	bf00      	nop

0002f300 <nrf_close>:
   2f300:	b510      	push	{r4, lr}
   2f302:	4604      	mov	r4, r0
   2f304:	f7ff fed2 	bl	2f0ac <bsd_platform_fd_method_table_get>
   2f308:	b120      	cbz	r0, 2f314 <nrf_close+0x14>
   2f30a:	6843      	ldr	r3, [r0, #4]
   2f30c:	4620      	mov	r0, r4
   2f30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f312:	4718      	bx	r3
   2f314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f318:	bd10      	pop	{r4, pc}
   2f31a:	bf00      	nop

0002f31c <nrf_sendto>:
   2f31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f320:	460d      	mov	r5, r1
   2f322:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2f326:	4616      	mov	r6, r2
   2f328:	461f      	mov	r7, r3
   2f32a:	4604      	mov	r4, r0
   2f32c:	f7ff febe 	bl	2f0ac <bsd_platform_fd_method_table_get>
   2f330:	b158      	cbz	r0, 2f34a <nrf_sendto+0x2e>
   2f332:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2f336:	f8d0 e008 	ldr.w	lr, [r0, #8]
   2f33a:	463b      	mov	r3, r7
   2f33c:	4632      	mov	r2, r6
   2f33e:	4629      	mov	r1, r5
   2f340:	4620      	mov	r0, r4
   2f342:	46f4      	mov	ip, lr
   2f344:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f348:	4760      	bx	ip
   2f34a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f352:	bf00      	nop

0002f354 <nrf_send>:
   2f354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f358:	b082      	sub	sp, #8
   2f35a:	460e      	mov	r6, r1
   2f35c:	4617      	mov	r7, r2
   2f35e:	4698      	mov	r8, r3
   2f360:	4605      	mov	r5, r0
   2f362:	f7ff fea3 	bl	2f0ac <bsd_platform_fd_method_table_get>
   2f366:	b160      	cbz	r0, 2f382 <nrf_send+0x2e>
   2f368:	4604      	mov	r4, r0
   2f36a:	2000      	movs	r0, #0
   2f36c:	e9cd 0000 	strd	r0, r0, [sp]
   2f370:	4643      	mov	r3, r8
   2f372:	463a      	mov	r2, r7
   2f374:	4631      	mov	r1, r6
   2f376:	4628      	mov	r0, r5
   2f378:	68a4      	ldr	r4, [r4, #8]
   2f37a:	47a0      	blx	r4
   2f37c:	b002      	add	sp, #8
   2f37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f386:	e7f9      	b.n	2f37c <nrf_send+0x28>

0002f388 <nrf_recvfrom>:
   2f388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f38c:	460d      	mov	r5, r1
   2f38e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2f392:	4616      	mov	r6, r2
   2f394:	461f      	mov	r7, r3
   2f396:	4604      	mov	r4, r0
   2f398:	f7ff fe88 	bl	2f0ac <bsd_platform_fd_method_table_get>
   2f39c:	b158      	cbz	r0, 2f3b6 <nrf_recvfrom+0x2e>
   2f39e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2f3a2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2f3a6:	463b      	mov	r3, r7
   2f3a8:	4632      	mov	r2, r6
   2f3aa:	4629      	mov	r1, r5
   2f3ac:	4620      	mov	r0, r4
   2f3ae:	46f4      	mov	ip, lr
   2f3b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f3b4:	4760      	bx	ip
   2f3b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f3be:	bf00      	nop

0002f3c0 <nrf_recv>:
   2f3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f3c4:	b082      	sub	sp, #8
   2f3c6:	460e      	mov	r6, r1
   2f3c8:	4617      	mov	r7, r2
   2f3ca:	4698      	mov	r8, r3
   2f3cc:	4605      	mov	r5, r0
   2f3ce:	f7ff fe6d 	bl	2f0ac <bsd_platform_fd_method_table_get>
   2f3d2:	b160      	cbz	r0, 2f3ee <nrf_recv+0x2e>
   2f3d4:	4604      	mov	r4, r0
   2f3d6:	2000      	movs	r0, #0
   2f3d8:	e9cd 0000 	strd	r0, r0, [sp]
   2f3dc:	4643      	mov	r3, r8
   2f3de:	463a      	mov	r2, r7
   2f3e0:	4631      	mov	r1, r6
   2f3e2:	4628      	mov	r0, r5
   2f3e4:	68e4      	ldr	r4, [r4, #12]
   2f3e6:	47a0      	blx	r4
   2f3e8:	b002      	add	sp, #8
   2f3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f3ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f3f2:	e7f9      	b.n	2f3e8 <nrf_recv+0x28>

0002f3f4 <nrf_connect>:
   2f3f4:	b570      	push	{r4, r5, r6, lr}
   2f3f6:	460d      	mov	r5, r1
   2f3f8:	4616      	mov	r6, r2
   2f3fa:	4604      	mov	r4, r0
   2f3fc:	f7ff fe56 	bl	2f0ac <bsd_platform_fd_method_table_get>
   2f400:	b130      	cbz	r0, 2f410 <nrf_connect+0x1c>
   2f402:	6943      	ldr	r3, [r0, #20]
   2f404:	4632      	mov	r2, r6
   2f406:	4629      	mov	r1, r5
   2f408:	4620      	mov	r0, r4
   2f40a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2f40e:	4718      	bx	r3
   2f410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f414:	bd70      	pop	{r4, r5, r6, pc}
   2f416:	bf00      	nop

0002f418 <nrf_listen>:
   2f418:	b570      	push	{r4, r5, r6, lr}
   2f41a:	460d      	mov	r5, r1
   2f41c:	4604      	mov	r4, r0
   2f41e:	f7ff fe45 	bl	2f0ac <bsd_platform_fd_method_table_get>
   2f422:	b128      	cbz	r0, 2f430 <nrf_listen+0x18>
   2f424:	6983      	ldr	r3, [r0, #24]
   2f426:	4629      	mov	r1, r5
   2f428:	4620      	mov	r0, r4
   2f42a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2f42e:	4718      	bx	r3
   2f430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f434:	bd70      	pop	{r4, r5, r6, pc}
   2f436:	bf00      	nop

0002f438 <nrf_accept>:
   2f438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f43c:	460d      	mov	r5, r1
   2f43e:	4616      	mov	r6, r2
   2f440:	4604      	mov	r4, r0
   2f442:	f7ff fe33 	bl	2f0ac <bsd_platform_fd_method_table_get>
   2f446:	b140      	cbz	r0, 2f45a <nrf_accept+0x22>
   2f448:	69c7      	ldr	r7, [r0, #28]
   2f44a:	4632      	mov	r2, r6
   2f44c:	4629      	mov	r1, r5
   2f44e:	4620      	mov	r0, r4
   2f450:	46bc      	mov	ip, r7
   2f452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2f456:	2300      	movs	r3, #0
   2f458:	4760      	bx	ip
   2f45a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f462:	bf00      	nop

0002f464 <nrf_bind>:
   2f464:	b570      	push	{r4, r5, r6, lr}
   2f466:	460d      	mov	r5, r1
   2f468:	4616      	mov	r6, r2
   2f46a:	4604      	mov	r4, r0
   2f46c:	f7ff fe1e 	bl	2f0ac <bsd_platform_fd_method_table_get>
   2f470:	b130      	cbz	r0, 2f480 <nrf_bind+0x1c>
   2f472:	6903      	ldr	r3, [r0, #16]
   2f474:	4632      	mov	r2, r6
   2f476:	4629      	mov	r1, r5
   2f478:	4620      	mov	r0, r4
   2f47a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2f47e:	4718      	bx	r3
   2f480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f484:	bd70      	pop	{r4, r5, r6, pc}
   2f486:	bf00      	nop

0002f488 <nrf_setsockopt>:
   2f488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f48c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2f490:	460d      	mov	r5, r1
   2f492:	4616      	mov	r6, r2
   2f494:	461f      	mov	r7, r3
   2f496:	4604      	mov	r4, r0
   2f498:	f7ff fe08 	bl	2f0ac <bsd_platform_fd_method_table_get>
   2f49c:	b158      	cbz	r0, 2f4b6 <nrf_setsockopt+0x2e>
   2f49e:	f8cd 8018 	str.w	r8, [sp, #24]
   2f4a2:	f8d0 e020 	ldr.w	lr, [r0, #32]
   2f4a6:	463b      	mov	r3, r7
   2f4a8:	4632      	mov	r2, r6
   2f4aa:	4629      	mov	r1, r5
   2f4ac:	4620      	mov	r0, r4
   2f4ae:	46f4      	mov	ip, lr
   2f4b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2f4b4:	4760      	bx	ip
   2f4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f4be:	bf00      	nop

0002f4c0 <nrf_getsockopt>:
   2f4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f4c4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2f4c8:	460d      	mov	r5, r1
   2f4ca:	4616      	mov	r6, r2
   2f4cc:	461f      	mov	r7, r3
   2f4ce:	4604      	mov	r4, r0
   2f4d0:	f7ff fdec 	bl	2f0ac <bsd_platform_fd_method_table_get>
   2f4d4:	b158      	cbz	r0, 2f4ee <nrf_getsockopt+0x2e>
   2f4d6:	f8cd 8018 	str.w	r8, [sp, #24]
   2f4da:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   2f4de:	463b      	mov	r3, r7
   2f4e0:	4632      	mov	r2, r6
   2f4e2:	4629      	mov	r1, r5
   2f4e4:	4620      	mov	r0, r4
   2f4e6:	46f4      	mov	ip, lr
   2f4e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2f4ec:	4760      	bx	ip
   2f4ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f4f6:	bf00      	nop

0002f4f8 <nrf_getaddrinfo>:
   2f4f8:	f7ff be4e 	b.w	2f198 <bsd_platform_getaddrinfo>

0002f4fc <nrf_freeaddrinfo>:
   2f4fc:	f7ff be4e 	b.w	2f19c <bsd_platform_freeaddrinfo>

0002f500 <nrf_poll>:
   2f500:	f7ff be4e 	b.w	2f1a0 <bsd_platform_poll>

0002f504 <nrf_fcntl>:
   2f504:	f7ff bea6 	b.w	2f254 <bsd_platform_fcntl>

0002f508 <rpc_gnss_serialize_utc>:
   2f508:	4603      	mov	r3, r0
   2f50a:	b1d8      	cbz	r0, 2f544 <rpc_gnss_serialize_utc+0x3c>
   2f50c:	b1d1      	cbz	r1, 2f544 <rpc_gnss_serialize_utc+0x3c>
   2f50e:	2000      	movs	r0, #0
   2f510:	2201      	movs	r2, #1
   2f512:	7048      	strb	r0, [r1, #1]
   2f514:	700a      	strb	r2, [r1, #0]
   2f516:	685a      	ldr	r2, [r3, #4]
   2f518:	2010      	movs	r0, #16
   2f51a:	f8c1 2006 	str.w	r2, [r1, #6]
   2f51e:	681a      	ldr	r2, [r3, #0]
   2f520:	f8c1 2002 	str.w	r2, [r1, #2]
   2f524:	f993 200a 	ldrsb.w	r2, [r3, #10]
   2f528:	730a      	strb	r2, [r1, #12]
   2f52a:	f993 200d 	ldrsb.w	r2, [r3, #13]
   2f52e:	73ca      	strb	r2, [r1, #15]
   2f530:	f993 200c 	ldrsb.w	r2, [r3, #12]
   2f534:	738a      	strb	r2, [r1, #14]
   2f536:	7a1a      	ldrb	r2, [r3, #8]
   2f538:	728a      	strb	r2, [r1, #10]
   2f53a:	7ada      	ldrb	r2, [r3, #11]
   2f53c:	734a      	strb	r2, [r1, #13]
   2f53e:	7a5b      	ldrb	r3, [r3, #9]
   2f540:	72cb      	strb	r3, [r1, #11]
   2f542:	4770      	bx	lr
   2f544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f548:	4770      	bx	lr
   2f54a:	bf00      	nop

0002f54c <rpc_gnss_serialize_ephe>:
   2f54c:	4603      	mov	r3, r0
   2f54e:	2800      	cmp	r0, #0
   2f550:	d04b      	beq.n	2f5ea <rpc_gnss_serialize_ephe+0x9e>
   2f552:	2900      	cmp	r1, #0
   2f554:	d049      	beq.n	2f5ea <rpc_gnss_serialize_ephe+0x9e>
   2f556:	2000      	movs	r0, #0
   2f558:	2202      	movs	r2, #2
   2f55a:	7048      	strb	r0, [r1, #1]
   2f55c:	700a      	strb	r2, [r1, #0]
   2f55e:	68da      	ldr	r2, [r3, #12]
   2f560:	2040      	movs	r0, #64	; 0x40
   2f562:	f8c1 200b 	str.w	r2, [r1, #11]
   2f566:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   2f56a:	f8a1 2009 	strh.w	r2, [r1, #9]
   2f56e:	f993 2006 	ldrsb.w	r2, [r3, #6]
   2f572:	720a      	strb	r2, [r1, #8]
   2f574:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   2f578:	878a      	strh	r2, [r1, #60]	; 0x3c
   2f57a:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   2f57e:	86ca      	strh	r2, [r1, #54]	; 0x36
   2f580:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   2f584:	874a      	strh	r2, [r1, #58]	; 0x3a
   2f586:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   2f58a:	868a      	strh	r2, [r1, #52]	; 0x34
   2f58c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   2f590:	87ca      	strh	r2, [r1, #62]	; 0x3e
   2f592:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   2f596:	870a      	strh	r2, [r1, #56]	; 0x38
   2f598:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   2f59c:	830a      	strh	r2, [r1, #24]
   2f59e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2f5a0:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   2f5a4:	7c9a      	ldrb	r2, [r3, #18]
   2f5a6:	744a      	strb	r2, [r1, #17]
   2f5a8:	785a      	ldrb	r2, [r3, #1]
   2f5aa:	70ca      	strb	r2, [r1, #3]
   2f5ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2f5ae:	62ca      	str	r2, [r1, #44]	; 0x2c
   2f5b0:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   2f5b4:	84ca      	strh	r2, [r1, #38]	; 0x26
   2f5b6:	885a      	ldrh	r2, [r3, #2]
   2f5b8:	808a      	strh	r2, [r1, #4]
   2f5ba:	6a1a      	ldr	r2, [r3, #32]
   2f5bc:	f8c1 201a 	str.w	r2, [r1, #26]
   2f5c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2f5c2:	630a      	str	r2, [r1, #48]	; 0x30
   2f5c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2f5c6:	f8c1 201e 	str.w	r2, [r1, #30]
   2f5ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2f5cc:	628a      	str	r2, [r1, #40]	; 0x28
   2f5ce:	781a      	ldrb	r2, [r3, #0]
   2f5d0:	708a      	strb	r2, [r1, #2]
   2f5d2:	f993 2010 	ldrsb.w	r2, [r3, #16]
   2f5d6:	73ca      	strb	r2, [r1, #15]
   2f5d8:	889a      	ldrh	r2, [r3, #4]
   2f5da:	80ca      	strh	r2, [r1, #6]
   2f5dc:	8a9a      	ldrh	r2, [r3, #20]
   2f5de:	824a      	strh	r2, [r1, #18]
   2f5e0:	7c5a      	ldrb	r2, [r3, #17]
   2f5e2:	740a      	strb	r2, [r1, #16]
   2f5e4:	699b      	ldr	r3, [r3, #24]
   2f5e6:	614b      	str	r3, [r1, #20]
   2f5e8:	4770      	bx	lr
   2f5ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f5ee:	4770      	bx	lr

0002f5f0 <rpc_gnss_serialize_alm>:
   2f5f0:	4603      	mov	r3, r0
   2f5f2:	b360      	cbz	r0, 2f64e <rpc_gnss_serialize_alm+0x5e>
   2f5f4:	b359      	cbz	r1, 2f64e <rpc_gnss_serialize_alm+0x5e>
   2f5f6:	2000      	movs	r0, #0
   2f5f8:	2203      	movs	r2, #3
   2f5fa:	7048      	strb	r0, [r1, #1]
   2f5fc:	700a      	strb	r2, [r1, #0]
   2f5fe:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   2f602:	2021      	movs	r0, #33	; 0x21
   2f604:	f8a1 201d 	strh.w	r2, [r1, #29]
   2f608:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   2f60c:	f8a1 201f 	strh.w	r2, [r1, #31]
   2f610:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   2f614:	810a      	strh	r2, [r1, #8]
   2f616:	889a      	ldrh	r2, [r3, #4]
   2f618:	80ca      	strh	r2, [r1, #6]
   2f61a:	78da      	ldrb	r2, [r3, #3]
   2f61c:	714a      	strb	r2, [r1, #5]
   2f61e:	699a      	ldr	r2, [r3, #24]
   2f620:	f8c1 2019 	str.w	r2, [r1, #25]
   2f624:	691a      	ldr	r2, [r3, #16]
   2f626:	f8c1 2011 	str.w	r2, [r1, #17]
   2f62a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   2f62e:	814a      	strh	r2, [r1, #10]
   2f630:	68da      	ldr	r2, [r3, #12]
   2f632:	f8c1 200d 	str.w	r2, [r1, #13]
   2f636:	7a9a      	ldrb	r2, [r3, #10]
   2f638:	730a      	strb	r2, [r1, #12]
   2f63a:	781a      	ldrb	r2, [r3, #0]
   2f63c:	708a      	strb	r2, [r1, #2]
   2f63e:	789a      	ldrb	r2, [r3, #2]
   2f640:	710a      	strb	r2, [r1, #4]
   2f642:	695a      	ldr	r2, [r3, #20]
   2f644:	f8c1 2015 	str.w	r2, [r1, #21]
   2f648:	785b      	ldrb	r3, [r3, #1]
   2f64a:	70cb      	strb	r3, [r1, #3]
   2f64c:	4770      	bx	lr
   2f64e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f652:	4770      	bx	lr

0002f654 <rpc_gnss_serialize_klob>:
   2f654:	4603      	mov	r3, r0
   2f656:	b1f0      	cbz	r0, 2f696 <rpc_gnss_serialize_klob+0x42>
   2f658:	b1e9      	cbz	r1, 2f696 <rpc_gnss_serialize_klob+0x42>
   2f65a:	2000      	movs	r0, #0
   2f65c:	2204      	movs	r2, #4
   2f65e:	7048      	strb	r0, [r1, #1]
   2f660:	700a      	strb	r2, [r1, #0]
   2f662:	f993 2000 	ldrsb.w	r2, [r3]
   2f666:	200a      	movs	r0, #10
   2f668:	708a      	strb	r2, [r1, #2]
   2f66a:	f993 2001 	ldrsb.w	r2, [r3, #1]
   2f66e:	70ca      	strb	r2, [r1, #3]
   2f670:	f993 2002 	ldrsb.w	r2, [r3, #2]
   2f674:	710a      	strb	r2, [r1, #4]
   2f676:	f993 2003 	ldrsb.w	r2, [r3, #3]
   2f67a:	714a      	strb	r2, [r1, #5]
   2f67c:	f993 2004 	ldrsb.w	r2, [r3, #4]
   2f680:	718a      	strb	r2, [r1, #6]
   2f682:	f993 2005 	ldrsb.w	r2, [r3, #5]
   2f686:	71ca      	strb	r2, [r1, #7]
   2f688:	f993 2006 	ldrsb.w	r2, [r3, #6]
   2f68c:	720a      	strb	r2, [r1, #8]
   2f68e:	f993 3007 	ldrsb.w	r3, [r3, #7]
   2f692:	724b      	strb	r3, [r1, #9]
   2f694:	4770      	bx	lr
   2f696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f69a:	4770      	bx	lr

0002f69c <rpc_gnss_serialize_nequick>:
   2f69c:	4603      	mov	r3, r0
   2f69e:	b198      	cbz	r0, 2f6c8 <rpc_gnss_serialize_nequick+0x2c>
   2f6a0:	b191      	cbz	r1, 2f6c8 <rpc_gnss_serialize_nequick+0x2c>
   2f6a2:	2000      	movs	r0, #0
   2f6a4:	2205      	movs	r2, #5
   2f6a6:	7048      	strb	r0, [r1, #1]
   2f6a8:	700a      	strb	r2, [r1, #0]
   2f6aa:	f9b3 2000 	ldrsh.w	r2, [r3]
   2f6ae:	200a      	movs	r0, #10
   2f6b0:	804a      	strh	r2, [r1, #2]
   2f6b2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   2f6b6:	808a      	strh	r2, [r1, #4]
   2f6b8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   2f6bc:	80ca      	strh	r2, [r1, #6]
   2f6be:	799a      	ldrb	r2, [r3, #6]
   2f6c0:	720a      	strb	r2, [r1, #8]
   2f6c2:	79db      	ldrb	r3, [r3, #7]
   2f6c4:	724b      	strb	r3, [r1, #9]
   2f6c6:	4770      	bx	lr
   2f6c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f6cc:	4770      	bx	lr
   2f6ce:	bf00      	nop

0002f6d0 <rpc_gnss_serialize_time_and_sv_tow>:
   2f6d0:	b310      	cbz	r0, 2f718 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   2f6d2:	b309      	cbz	r1, 2f718 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   2f6d4:	b470      	push	{r4, r5, r6}
   2f6d6:	2500      	movs	r5, #0
   2f6d8:	2606      	movs	r6, #6
   2f6da:	460c      	mov	r4, r1
   2f6dc:	704d      	strb	r5, [r1, #1]
   2f6de:	700e      	strb	r6, [r1, #0]
   2f6e0:	462b      	mov	r3, r5
   2f6e2:	8805      	ldrh	r5, [r0, #0]
   2f6e4:	4602      	mov	r2, r0
   2f6e6:	804d      	strh	r5, [r1, #2]
   2f6e8:	68c5      	ldr	r5, [r0, #12]
   2f6ea:	f8c1 500a 	str.w	r5, [r1, #10]
   2f6ee:	8905      	ldrh	r5, [r0, #8]
   2f6f0:	810d      	strh	r5, [r1, #8]
   2f6f2:	6840      	ldr	r0, [r0, #4]
   2f6f4:	6048      	str	r0, [r1, #4]
   2f6f6:	8a15      	ldrh	r5, [r2, #16]
   2f6f8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   2f6fc:	4408      	add	r0, r1
   2f6fe:	81c5      	strh	r5, [r0, #14]
   2f700:	7c90      	ldrb	r0, [r2, #18]
   2f702:	3301      	adds	r3, #1
   2f704:	2b20      	cmp	r3, #32
   2f706:	7420      	strb	r0, [r4, #16]
   2f708:	f102 0204 	add.w	r2, r2, #4
   2f70c:	f104 0403 	add.w	r4, r4, #3
   2f710:	d1f1      	bne.n	2f6f6 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   2f712:	206e      	movs	r0, #110	; 0x6e
   2f714:	bc70      	pop	{r4, r5, r6}
   2f716:	4770      	bx	lr
   2f718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f71c:	4770      	bx	lr
   2f71e:	bf00      	nop

0002f720 <rpc_gnss_serialize_location>:
   2f720:	4603      	mov	r3, r0
   2f722:	b1c8      	cbz	r0, 2f758 <rpc_gnss_serialize_location+0x38>
   2f724:	b1c1      	cbz	r1, 2f758 <rpc_gnss_serialize_location+0x38>
   2f726:	2000      	movs	r0, #0
   2f728:	2207      	movs	r2, #7
   2f72a:	7048      	strb	r0, [r1, #1]
   2f72c:	700a      	strb	r2, [r1, #0]
   2f72e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   2f732:	2011      	movs	r0, #17
   2f734:	814a      	strh	r2, [r1, #10]
   2f736:	7b9a      	ldrb	r2, [r3, #14]
   2f738:	740a      	strb	r2, [r1, #16]
   2f73a:	681a      	ldr	r2, [r3, #0]
   2f73c:	f8c1 2002 	str.w	r2, [r1, #2]
   2f740:	685a      	ldr	r2, [r3, #4]
   2f742:	f8c1 2006 	str.w	r2, [r1, #6]
   2f746:	7b1a      	ldrb	r2, [r3, #12]
   2f748:	738a      	strb	r2, [r1, #14]
   2f74a:	7b5a      	ldrb	r2, [r3, #13]
   2f74c:	73ca      	strb	r2, [r1, #15]
   2f74e:	7a9a      	ldrb	r2, [r3, #10]
   2f750:	730a      	strb	r2, [r1, #12]
   2f752:	7adb      	ldrb	r3, [r3, #11]
   2f754:	734b      	strb	r3, [r1, #13]
   2f756:	4770      	bx	lr
   2f758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f75c:	4770      	bx	lr
   2f75e:	bf00      	nop

0002f760 <rpc_gnss_serialize_integrity>:
   2f760:	b148      	cbz	r0, 2f776 <rpc_gnss_serialize_integrity+0x16>
   2f762:	b141      	cbz	r1, 2f776 <rpc_gnss_serialize_integrity+0x16>
   2f764:	2200      	movs	r2, #0
   2f766:	2308      	movs	r3, #8
   2f768:	704a      	strb	r2, [r1, #1]
   2f76a:	700b      	strb	r3, [r1, #0]
   2f76c:	6803      	ldr	r3, [r0, #0]
   2f76e:	2006      	movs	r0, #6
   2f770:	f8c1 3002 	str.w	r3, [r1, #2]
   2f774:	4770      	bx	lr
   2f776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f77a:	4770      	bx	lr

0002f77c <gnss_client_event_handler>:
   2f77c:	f850 1b08 	ldr.w	r1, [r0], #8
   2f780:	0c09      	lsrs	r1, r1, #16
   2f782:	f7fd b8b9 	b.w	2c8f8 <rpc_gnss_event_handler>
   2f786:	bf00      	nop

0002f788 <rpc_gnss_client_init>:
   2f788:	4801      	ldr	r0, [pc, #4]	; (2f790 <rpc_gnss_client_init+0x8>)
   2f78a:	f7fc bfe9 	b.w	2c760 <rpc_client_register>
   2f78e:	bf00      	nop
   2f790:	00038e20 	.word	0x00038e20

0002f794 <rpc_gnss_client_request_alloc>:
   2f794:	2300      	movs	r3, #0
   2f796:	b510      	push	{r4, lr}
   2f798:	b082      	sub	sp, #8
   2f79a:	9301      	str	r3, [sp, #4]
   2f79c:	b158      	cbz	r0, 2f7b6 <rpc_gnss_client_request_alloc+0x22>
   2f79e:	4604      	mov	r4, r0
   2f7a0:	aa01      	add	r2, sp, #4
   2f7a2:	2007      	movs	r0, #7
   2f7a4:	f7fd f856 	bl	2c854 <rpc_message_alloc>
   2f7a8:	b918      	cbnz	r0, 2f7b2 <rpc_gnss_client_request_alloc+0x1e>
   2f7aa:	9b01      	ldr	r3, [sp, #4]
   2f7ac:	b10b      	cbz	r3, 2f7b2 <rpc_gnss_client_request_alloc+0x1e>
   2f7ae:	3308      	adds	r3, #8
   2f7b0:	6023      	str	r3, [r4, #0]
   2f7b2:	b002      	add	sp, #8
   2f7b4:	bd10      	pop	{r4, pc}
   2f7b6:	2007      	movs	r0, #7
   2f7b8:	b002      	add	sp, #8
   2f7ba:	bd10      	pop	{r4, pc}

0002f7bc <rpc_gnss_client_request_send>:
   2f7bc:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2f7c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2f7c4:	d10b      	bne.n	2f7de <rpc_gnss_client_request_send+0x22>
   2f7c6:	b160      	cbz	r0, 2f7e2 <rpc_gnss_client_request_send+0x26>
   2f7c8:	4603      	mov	r3, r0
   2f7ca:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2f7ce:	2007      	movs	r0, #7
   2f7d0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2f7d4:	f843 1d08 	str.w	r1, [r3, #-8]!
   2f7d8:	4619      	mov	r1, r3
   2f7da:	f7fd b82b 	b.w	2c834 <rpc_message_send>
   2f7de:	200f      	movs	r0, #15
   2f7e0:	4770      	bx	lr
   2f7e2:	2007      	movs	r0, #7
   2f7e4:	4770      	bx	lr
   2f7e6:	bf00      	nop

0002f7e8 <rpc_gnss_client_message_free>:
   2f7e8:	b120      	cbz	r0, 2f7f4 <rpc_gnss_client_message_free+0xc>
   2f7ea:	f1a0 0108 	sub.w	r1, r0, #8
   2f7ee:	2007      	movs	r0, #7
   2f7f0:	f7fd b85c 	b.w	2c8ac <rpc_message_free>
   2f7f4:	2007      	movs	r0, #7
   2f7f6:	4770      	bx	lr

0002f7f8 <rpc_gnss_client_data_free>:
   2f7f8:	b118      	cbz	r0, 2f802 <rpc_gnss_client_data_free+0xa>
   2f7fa:	4601      	mov	r1, r0
   2f7fc:	2007      	movs	r0, #7
   2f7fe:	f7fd b861 	b.w	2c8c4 <rpc_message_data_free>
   2f802:	2007      	movs	r0, #7
   2f804:	4770      	bx	lr
   2f806:	bf00      	nop

0002f808 <datagram_handler_init>:
   2f808:	b510      	push	{r4, lr}
   2f80a:	4604      	mov	r4, r0
   2f80c:	200c      	movs	r0, #12
   2f80e:	f000 fdd7 	bl	303c0 <nrf_malloc>
   2f812:	60e0      	str	r0, [r4, #12]
   2f814:	b118      	cbz	r0, 2f81e <datagram_handler_init+0x16>
   2f816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f81a:	f7ff bd2b 	b.w	2f274 <linked_list_init>
   2f81e:	2004      	movs	r0, #4
   2f820:	bd10      	pop	{r4, pc}
   2f822:	bf00      	nop

0002f824 <datagram_handler_put>:
   2f824:	b570      	push	{r4, r5, r6, lr}
   2f826:	4606      	mov	r6, r0
   2f828:	2014      	movs	r0, #20
   2f82a:	460d      	mov	r5, r1
   2f82c:	f000 fdc8 	bl	303c0 <nrf_malloc>
   2f830:	b178      	cbz	r0, 2f852 <datagram_handler_put+0x2e>
   2f832:	682b      	ldr	r3, [r5, #0]
   2f834:	4604      	mov	r4, r0
   2f836:	6043      	str	r3, [r0, #4]
   2f838:	686b      	ldr	r3, [r5, #4]
   2f83a:	4601      	mov	r1, r0
   2f83c:	6083      	str	r3, [r0, #8]
   2f83e:	68eb      	ldr	r3, [r5, #12]
   2f840:	60c3      	str	r3, [r0, #12]
   2f842:	68ab      	ldr	r3, [r5, #8]
   2f844:	6103      	str	r3, [r0, #16]
   2f846:	68f0      	ldr	r0, [r6, #12]
   2f848:	f7ff fd1e 	bl	2f288 <linked_list_push>
   2f84c:	b920      	cbnz	r0, 2f858 <datagram_handler_put+0x34>
   2f84e:	6868      	ldr	r0, [r5, #4]
   2f850:	bd70      	pop	{r4, r5, r6, pc}
   2f852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f856:	bd70      	pop	{r4, r5, r6, pc}
   2f858:	4620      	mov	r0, r4
   2f85a:	f000 fdbb 	bl	303d4 <nrf_free>
   2f85e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f862:	bd70      	pop	{r4, r5, r6, pc}

0002f864 <datagram_handler_get>:
   2f864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f868:	4607      	mov	r7, r0
   2f86a:	b084      	sub	sp, #16
   2f86c:	68c0      	ldr	r0, [r0, #12]
   2f86e:	460c      	mov	r4, r1
   2f870:	4616      	mov	r6, r2
   2f872:	f7ff fd29 	bl	2f2c8 <linked_list_peek>
   2f876:	2800      	cmp	r0, #0
   2f878:	d03b      	beq.n	2f8f2 <datagram_handler_get+0x8e>
   2f87a:	6882      	ldr	r2, [r0, #8]
   2f87c:	4605      	mov	r5, r0
   2f87e:	e9d4 0300 	ldrd	r0, r3, [r4]
   2f882:	429a      	cmp	r2, r3
   2f884:	bf28      	it	cs
   2f886:	461a      	movcs	r2, r3
   2f888:	6062      	str	r2, [r4, #4]
   2f88a:	b110      	cbz	r0, 2f892 <datagram_handler_get+0x2e>
   2f88c:	6869      	ldr	r1, [r5, #4]
   2f88e:	f007 fdb8 	bl	37402 <memcpy>
   2f892:	68a0      	ldr	r0, [r4, #8]
   2f894:	b118      	cbz	r0, 2f89e <datagram_handler_get+0x3a>
   2f896:	692b      	ldr	r3, [r5, #16]
   2f898:	b10b      	cbz	r3, 2f89e <datagram_handler_get+0x3a>
   2f89a:	68ea      	ldr	r2, [r5, #12]
   2f89c:	bb02      	cbnz	r2, 2f8e0 <datagram_handler_get+0x7c>
   2f89e:	2300      	movs	r3, #0
   2f8a0:	60e3      	str	r3, [r4, #12]
   2f8a2:	0732      	lsls	r2, r6, #28
   2f8a4:	d506      	bpl.n	2f8b4 <datagram_handler_get+0x50>
   2f8a6:	06b3      	lsls	r3, r6, #26
   2f8a8:	bf4c      	ite	mi
   2f8aa:	68a8      	ldrmi	r0, [r5, #8]
   2f8ac:	6860      	ldrpl	r0, [r4, #4]
   2f8ae:	b004      	add	sp, #16
   2f8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f8b4:	68f8      	ldr	r0, [r7, #12]
   2f8b6:	f7ff fcfd 	bl	2f2b4 <linked_list_pop>
   2f8ba:	4680      	mov	r8, r0
   2f8bc:	2800      	cmp	r0, #0
   2f8be:	d0f2      	beq.n	2f8a6 <datagram_handler_get+0x42>
   2f8c0:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   2f8c4:	6902      	ldr	r2, [r0, #16]
   2f8c6:	9300      	str	r3, [sp, #0]
   2f8c8:	68c3      	ldr	r3, [r0, #12]
   2f8ca:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2f8ce:	9303      	str	r3, [sp, #12]
   2f8d0:	4668      	mov	r0, sp
   2f8d2:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   2f8d6:	4798      	blx	r3
   2f8d8:	4640      	mov	r0, r8
   2f8da:	f000 fd7b 	bl	303d4 <nrf_free>
   2f8de:	e7e2      	b.n	2f8a6 <datagram_handler_get+0x42>
   2f8e0:	68e3      	ldr	r3, [r4, #12]
   2f8e2:	429a      	cmp	r2, r3
   2f8e4:	bf28      	it	cs
   2f8e6:	461a      	movcs	r2, r3
   2f8e8:	60e2      	str	r2, [r4, #12]
   2f8ea:	6929      	ldr	r1, [r5, #16]
   2f8ec:	f007 fd89 	bl	37402 <memcpy>
   2f8f0:	e7d7      	b.n	2f8a2 <datagram_handler_get+0x3e>
   2f8f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f8f6:	e7da      	b.n	2f8ae <datagram_handler_get+0x4a>

0002f8f8 <datagram_handler_available>:
   2f8f8:	b508      	push	{r3, lr}
   2f8fa:	68c0      	ldr	r0, [r0, #12]
   2f8fc:	f7ff fce4 	bl	2f2c8 <linked_list_peek>
   2f900:	b108      	cbz	r0, 2f906 <datagram_handler_available+0xe>
   2f902:	6880      	ldr	r0, [r0, #8]
   2f904:	bd08      	pop	{r3, pc}
   2f906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f90a:	bd08      	pop	{r3, pc}

0002f90c <datagram_handler_flush>:
   2f90c:	b530      	push	{r4, r5, lr}
   2f90e:	4605      	mov	r5, r0
   2f910:	68c0      	ldr	r0, [r0, #12]
   2f912:	b085      	sub	sp, #20
   2f914:	b9a8      	cbnz	r0, 2f942 <datagram_handler_flush+0x36>
   2f916:	e01a      	b.n	2f94e <datagram_handler_flush+0x42>
   2f918:	68e8      	ldr	r0, [r5, #12]
   2f91a:	f7ff fccb 	bl	2f2b4 <linked_list_pop>
   2f91e:	4604      	mov	r4, r0
   2f920:	b170      	cbz	r0, 2f940 <datagram_handler_flush+0x34>
   2f922:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2f926:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   2f92a:	e9cd 0100 	strd	r0, r1, [sp]
   2f92e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2f932:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2f936:	4668      	mov	r0, sp
   2f938:	4798      	blx	r3
   2f93a:	4620      	mov	r0, r4
   2f93c:	f000 fd4a 	bl	303d4 <nrf_free>
   2f940:	68e8      	ldr	r0, [r5, #12]
   2f942:	f7ff fcc7 	bl	2f2d4 <linked_list_size_get>
   2f946:	2800      	cmp	r0, #0
   2f948:	d1e6      	bne.n	2f918 <datagram_handler_flush+0xc>
   2f94a:	b005      	add	sp, #20
   2f94c:	bd30      	pop	{r4, r5, pc}
   2f94e:	2008      	movs	r0, #8
   2f950:	b005      	add	sp, #20
   2f952:	bd30      	pop	{r4, r5, pc}

0002f954 <datagram_handler_free>:
   2f954:	b530      	push	{r4, r5, lr}
   2f956:	4605      	mov	r5, r0
   2f958:	68c0      	ldr	r0, [r0, #12]
   2f95a:	b085      	sub	sp, #20
   2f95c:	b9a0      	cbnz	r0, 2f988 <datagram_handler_free+0x34>
   2f95e:	e01c      	b.n	2f99a <datagram_handler_free+0x46>
   2f960:	f7ff fca8 	bl	2f2b4 <linked_list_pop>
   2f964:	4604      	mov	r4, r0
   2f966:	b170      	cbz	r0, 2f986 <datagram_handler_free+0x32>
   2f968:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2f96c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   2f970:	e9cd 0100 	strd	r0, r1, [sp]
   2f974:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2f978:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2f97c:	4668      	mov	r0, sp
   2f97e:	4798      	blx	r3
   2f980:	4620      	mov	r0, r4
   2f982:	f000 fd27 	bl	303d4 <nrf_free>
   2f986:	68e8      	ldr	r0, [r5, #12]
   2f988:	f7ff fca4 	bl	2f2d4 <linked_list_size_get>
   2f98c:	4604      	mov	r4, r0
   2f98e:	68e8      	ldr	r0, [r5, #12]
   2f990:	2c00      	cmp	r4, #0
   2f992:	d1e5      	bne.n	2f960 <datagram_handler_free+0xc>
   2f994:	f000 fd1e 	bl	303d4 <nrf_free>
   2f998:	60ec      	str	r4, [r5, #12]
   2f99a:	b005      	add	sp, #20
   2f99c:	bd30      	pop	{r4, r5, pc}
   2f99e:	bf00      	nop

0002f9a0 <null_handler_init>:
   2f9a0:	2000      	movs	r0, #0
   2f9a2:	4770      	bx	lr

0002f9a4 <null_handler_put>:
   2f9a4:	b510      	push	{r4, lr}
   2f9a6:	460c      	mov	r4, r1
   2f9a8:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   2f9ac:	4620      	mov	r0, r4
   2f9ae:	4798      	blx	r3
   2f9b0:	6860      	ldr	r0, [r4, #4]
   2f9b2:	bd10      	pop	{r4, pc}

0002f9b4 <null_handler_get>:
   2f9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f9b8:	4770      	bx	lr
   2f9ba:	bf00      	nop

0002f9bc <null_handler_available>:
   2f9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f9c0:	4770      	bx	lr
   2f9c2:	bf00      	nop

0002f9c4 <null_handler_flush>:
   2f9c4:	2000      	movs	r0, #0
   2f9c6:	4770      	bx	lr

0002f9c8 <null_handler_free>:
   2f9c8:	4770      	bx	lr
   2f9ca:	bf00      	nop

0002f9cc <packet_handler_create>:
   2f9cc:	2801      	cmp	r0, #1
   2f9ce:	b538      	push	{r3, r4, r5, lr}
   2f9d0:	460d      	mov	r5, r1
   2f9d2:	4614      	mov	r4, r2
   2f9d4:	d00d      	beq.n	2f9f2 <packet_handler_create+0x26>
   2f9d6:	db11      	blt.n	2f9fc <packet_handler_create+0x30>
   2f9d8:	2803      	cmp	r0, #3
   2f9da:	dc0f      	bgt.n	2f9fc <packet_handler_create+0x30>
   2f9dc:	2010      	movs	r0, #16
   2f9de:	f000 fcef 	bl	303c0 <nrf_malloc>
   2f9e2:	2218      	movs	r2, #24
   2f9e4:	b120      	cbz	r0, 2f9f0 <packet_handler_create+0x24>
   2f9e6:	4b08      	ldr	r3, [pc, #32]	; (2fa08 <packet_handler_create+0x3c>)
   2f9e8:	6045      	str	r5, [r0, #4]
   2f9ea:	4413      	add	r3, r2
   2f9ec:	6084      	str	r4, [r0, #8]
   2f9ee:	6003      	str	r3, [r0, #0]
   2f9f0:	bd38      	pop	{r3, r4, r5, pc}
   2f9f2:	2014      	movs	r0, #20
   2f9f4:	f000 fce4 	bl	303c0 <nrf_malloc>
   2f9f8:	2230      	movs	r2, #48	; 0x30
   2f9fa:	e7f3      	b.n	2f9e4 <packet_handler_create+0x18>
   2f9fc:	200c      	movs	r0, #12
   2f9fe:	f000 fcdf 	bl	303c0 <nrf_malloc>
   2fa02:	2200      	movs	r2, #0
   2fa04:	e7ee      	b.n	2f9e4 <packet_handler_create+0x18>
   2fa06:	bf00      	nop
   2fa08:	00038e30 	.word	0x00038e30

0002fa0c <packet_handler_delete>:
   2fa0c:	b510      	push	{r4, lr}
   2fa0e:	4604      	mov	r4, r0
   2fa10:	6803      	ldr	r3, [r0, #0]
   2fa12:	691b      	ldr	r3, [r3, #16]
   2fa14:	4798      	blx	r3
   2fa16:	6823      	ldr	r3, [r4, #0]
   2fa18:	4620      	mov	r0, r4
   2fa1a:	695b      	ldr	r3, [r3, #20]
   2fa1c:	4798      	blx	r3
   2fa1e:	4620      	mov	r0, r4
   2fa20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fa24:	f000 bcd6 	b.w	303d4 <nrf_free>

0002fa28 <stream_handler_init>:
   2fa28:	b510      	push	{r4, lr}
   2fa2a:	4604      	mov	r4, r0
   2fa2c:	200c      	movs	r0, #12
   2fa2e:	f000 fcc7 	bl	303c0 <nrf_malloc>
   2fa32:	60e0      	str	r0, [r4, #12]
   2fa34:	b128      	cbz	r0, 2fa42 <stream_handler_init+0x1a>
   2fa36:	2300      	movs	r3, #0
   2fa38:	6123      	str	r3, [r4, #16]
   2fa3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fa3e:	f7ff bc19 	b.w	2f274 <linked_list_init>
   2fa42:	2004      	movs	r0, #4
   2fa44:	bd10      	pop	{r4, pc}
   2fa46:	bf00      	nop

0002fa48 <stream_handler_put>:
   2fa48:	b570      	push	{r4, r5, r6, lr}
   2fa4a:	4606      	mov	r6, r0
   2fa4c:	2014      	movs	r0, #20
   2fa4e:	460d      	mov	r5, r1
   2fa50:	f000 fcb6 	bl	303c0 <nrf_malloc>
   2fa54:	b178      	cbz	r0, 2fa76 <stream_handler_put+0x2e>
   2fa56:	682b      	ldr	r3, [r5, #0]
   2fa58:	4604      	mov	r4, r0
   2fa5a:	6043      	str	r3, [r0, #4]
   2fa5c:	686b      	ldr	r3, [r5, #4]
   2fa5e:	4601      	mov	r1, r0
   2fa60:	6083      	str	r3, [r0, #8]
   2fa62:	68eb      	ldr	r3, [r5, #12]
   2fa64:	60c3      	str	r3, [r0, #12]
   2fa66:	68ab      	ldr	r3, [r5, #8]
   2fa68:	6103      	str	r3, [r0, #16]
   2fa6a:	68f0      	ldr	r0, [r6, #12]
   2fa6c:	f7ff fc0c 	bl	2f288 <linked_list_push>
   2fa70:	b920      	cbnz	r0, 2fa7c <stream_handler_put+0x34>
   2fa72:	6868      	ldr	r0, [r5, #4]
   2fa74:	bd70      	pop	{r4, r5, r6, pc}
   2fa76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fa7a:	bd70      	pop	{r4, r5, r6, pc}
   2fa7c:	4620      	mov	r0, r4
   2fa7e:	f000 fca9 	bl	303d4 <nrf_free>
   2fa82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fa86:	bd70      	pop	{r4, r5, r6, pc}

0002fa88 <stream_handler_get>:
   2fa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fa8c:	4682      	mov	sl, r0
   2fa8e:	b089      	sub	sp, #36	; 0x24
   2fa90:	68c0      	ldr	r0, [r0, #12]
   2fa92:	4689      	mov	r9, r1
   2fa94:	4693      	mov	fp, r2
   2fa96:	f7ff fc17 	bl	2f2c8 <linked_list_peek>
   2fa9a:	2800      	cmp	r0, #0
   2fa9c:	d071      	beq.n	2fb82 <stream_handler_get+0xfa>
   2fa9e:	4605      	mov	r5, r0
   2faa0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   2faa4:	b120      	cbz	r0, 2fab0 <stream_handler_get+0x28>
   2faa6:	692b      	ldr	r3, [r5, #16]
   2faa8:	b113      	cbz	r3, 2fab0 <stream_handler_get+0x28>
   2faaa:	68ea      	ldr	r2, [r5, #12]
   2faac:	2a00      	cmp	r2, #0
   2faae:	d15d      	bne.n	2fb6c <stream_handler_get+0xe4>
   2fab0:	2300      	movs	r3, #0
   2fab2:	f8c9 300c 	str.w	r3, [r9, #12]
   2fab6:	f8d9 2000 	ldr.w	r2, [r9]
   2faba:	f8d9 8004 	ldr.w	r8, [r9, #4]
   2fabe:	f8da 1010 	ldr.w	r1, [sl, #16]
   2fac2:	9203      	str	r2, [sp, #12]
   2fac4:	f1b8 0f00 	cmp.w	r8, #0
   2fac8:	d030      	beq.n	2fb2c <stream_handler_get+0xa4>
   2faca:	2400      	movs	r4, #0
   2facc:	f00b 0320 	and.w	r3, fp, #32
   2fad0:	9301      	str	r3, [sp, #4]
   2fad2:	f00b 0b08 	and.w	fp, fp, #8
   2fad6:	68ae      	ldr	r6, [r5, #8]
   2fad8:	eba8 0304 	sub.w	r3, r8, r4
   2fadc:	1a76      	subs	r6, r6, r1
   2fade:	429e      	cmp	r6, r3
   2fae0:	4637      	mov	r7, r6
   2fae2:	bf28      	it	cs
   2fae4:	461f      	movcs	r7, r3
   2fae6:	b10a      	cbz	r2, 2faec <stream_handler_get+0x64>
   2fae8:	9a01      	ldr	r2, [sp, #4]
   2faea:	b1aa      	cbz	r2, 2fb18 <stream_handler_get+0x90>
   2faec:	f1bb 0f00 	cmp.w	fp, #0
   2faf0:	d106      	bne.n	2fb00 <stream_handler_get+0x78>
   2faf2:	429e      	cmp	r6, r3
   2faf4:	d921      	bls.n	2fb3a <stream_handler_get+0xb2>
   2faf6:	f8da 3010 	ldr.w	r3, [sl, #16]
   2fafa:	443b      	add	r3, r7
   2fafc:	f8ca 3010 	str.w	r3, [sl, #16]
   2fb00:	4628      	mov	r0, r5
   2fb02:	f7ff fbe9 	bl	2f2d8 <linked_list_get_next>
   2fb06:	443c      	add	r4, r7
   2fb08:	4605      	mov	r5, r0
   2fb0a:	b180      	cbz	r0, 2fb2e <stream_handler_get+0xa6>
   2fb0c:	45a0      	cmp	r8, r4
   2fb0e:	d90e      	bls.n	2fb2e <stream_handler_get+0xa6>
   2fb10:	f8d9 2000 	ldr.w	r2, [r9]
   2fb14:	2100      	movs	r1, #0
   2fb16:	e7de      	b.n	2fad6 <stream_handler_get+0x4e>
   2fb18:	6868      	ldr	r0, [r5, #4]
   2fb1a:	9302      	str	r3, [sp, #8]
   2fb1c:	9b03      	ldr	r3, [sp, #12]
   2fb1e:	4401      	add	r1, r0
   2fb20:	463a      	mov	r2, r7
   2fb22:	1918      	adds	r0, r3, r4
   2fb24:	f007 fc6d 	bl	37402 <memcpy>
   2fb28:	9b02      	ldr	r3, [sp, #8]
   2fb2a:	e7df      	b.n	2faec <stream_handler_get+0x64>
   2fb2c:	4644      	mov	r4, r8
   2fb2e:	4620      	mov	r0, r4
   2fb30:	f8c9 4004 	str.w	r4, [r9, #4]
   2fb34:	b009      	add	sp, #36	; 0x24
   2fb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fb3a:	f8da 000c 	ldr.w	r0, [sl, #12]
   2fb3e:	f7ff fbb9 	bl	2f2b4 <linked_list_pop>
   2fb42:	4606      	mov	r6, r0
   2fb44:	b170      	cbz	r0, 2fb64 <stream_handler_get+0xdc>
   2fb46:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2fb4a:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   2fb4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2fb52:	e9cd 1006 	strd	r1, r0, [sp, #24]
   2fb56:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   2fb5a:	a804      	add	r0, sp, #16
   2fb5c:	4798      	blx	r3
   2fb5e:	4630      	mov	r0, r6
   2fb60:	f000 fc38 	bl	303d4 <nrf_free>
   2fb64:	2300      	movs	r3, #0
   2fb66:	f8ca 3010 	str.w	r3, [sl, #16]
   2fb6a:	e7c9      	b.n	2fb00 <stream_handler_get+0x78>
   2fb6c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2fb70:	429a      	cmp	r2, r3
   2fb72:	bf28      	it	cs
   2fb74:	461a      	movcs	r2, r3
   2fb76:	f8c9 200c 	str.w	r2, [r9, #12]
   2fb7a:	6929      	ldr	r1, [r5, #16]
   2fb7c:	f007 fc41 	bl	37402 <memcpy>
   2fb80:	e799      	b.n	2fab6 <stream_handler_get+0x2e>
   2fb82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fb86:	e7d5      	b.n	2fb34 <stream_handler_get+0xac>

0002fb88 <stream_handler_available>:
   2fb88:	b510      	push	{r4, lr}
   2fb8a:	4604      	mov	r4, r0
   2fb8c:	68c0      	ldr	r0, [r0, #12]
   2fb8e:	f7ff fb9b 	bl	2f2c8 <linked_list_peek>
   2fb92:	b150      	cbz	r0, 2fbaa <stream_handler_available+0x22>
   2fb94:	6924      	ldr	r4, [r4, #16]
   2fb96:	4264      	negs	r4, r4
   2fb98:	6883      	ldr	r3, [r0, #8]
   2fb9a:	441c      	add	r4, r3
   2fb9c:	f7ff fb9c 	bl	2f2d8 <linked_list_get_next>
   2fba0:	2800      	cmp	r0, #0
   2fba2:	d1f9      	bne.n	2fb98 <stream_handler_available+0x10>
   2fba4:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   2fba8:	bd10      	pop	{r4, pc}
   2fbaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fbae:	bd10      	pop	{r4, pc}

0002fbb0 <stream_handler_flush>:
   2fbb0:	b530      	push	{r4, r5, lr}
   2fbb2:	4605      	mov	r5, r0
   2fbb4:	68c0      	ldr	r0, [r0, #12]
   2fbb6:	b085      	sub	sp, #20
   2fbb8:	b9a8      	cbnz	r0, 2fbe6 <stream_handler_flush+0x36>
   2fbba:	e01a      	b.n	2fbf2 <stream_handler_flush+0x42>
   2fbbc:	68e8      	ldr	r0, [r5, #12]
   2fbbe:	f7ff fb79 	bl	2f2b4 <linked_list_pop>
   2fbc2:	4604      	mov	r4, r0
   2fbc4:	b170      	cbz	r0, 2fbe4 <stream_handler_flush+0x34>
   2fbc6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2fbca:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   2fbce:	e9cd 0100 	strd	r0, r1, [sp]
   2fbd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2fbd6:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2fbda:	4668      	mov	r0, sp
   2fbdc:	4798      	blx	r3
   2fbde:	4620      	mov	r0, r4
   2fbe0:	f000 fbf8 	bl	303d4 <nrf_free>
   2fbe4:	68e8      	ldr	r0, [r5, #12]
   2fbe6:	f7ff fb75 	bl	2f2d4 <linked_list_size_get>
   2fbea:	2800      	cmp	r0, #0
   2fbec:	d1e6      	bne.n	2fbbc <stream_handler_flush+0xc>
   2fbee:	b005      	add	sp, #20
   2fbf0:	bd30      	pop	{r4, r5, pc}
   2fbf2:	2008      	movs	r0, #8
   2fbf4:	b005      	add	sp, #20
   2fbf6:	bd30      	pop	{r4, r5, pc}

0002fbf8 <stream_handler_free>:
   2fbf8:	b530      	push	{r4, r5, lr}
   2fbfa:	4605      	mov	r5, r0
   2fbfc:	68c0      	ldr	r0, [r0, #12]
   2fbfe:	b085      	sub	sp, #20
   2fc00:	b9a0      	cbnz	r0, 2fc2c <stream_handler_free+0x34>
   2fc02:	e01c      	b.n	2fc3e <stream_handler_free+0x46>
   2fc04:	f7ff fb56 	bl	2f2b4 <linked_list_pop>
   2fc08:	4604      	mov	r4, r0
   2fc0a:	b170      	cbz	r0, 2fc2a <stream_handler_free+0x32>
   2fc0c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2fc10:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   2fc14:	e9cd 0100 	strd	r0, r1, [sp]
   2fc18:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2fc1c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2fc20:	4668      	mov	r0, sp
   2fc22:	4798      	blx	r3
   2fc24:	4620      	mov	r0, r4
   2fc26:	f000 fbd5 	bl	303d4 <nrf_free>
   2fc2a:	68e8      	ldr	r0, [r5, #12]
   2fc2c:	f7ff fb52 	bl	2f2d4 <linked_list_size_get>
   2fc30:	4604      	mov	r4, r0
   2fc32:	68e8      	ldr	r0, [r5, #12]
   2fc34:	2c00      	cmp	r4, #0
   2fc36:	d1e5      	bne.n	2fc04 <stream_handler_free+0xc>
   2fc38:	f000 fbcc 	bl	303d4 <nrf_free>
   2fc3c:	60ec      	str	r4, [r5, #12]
   2fc3e:	b005      	add	sp, #20
   2fc40:	bd30      	pop	{r4, r5, pc}
   2fc42:	bf00      	nop

0002fc44 <mem_free>:
   2fc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc48:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 2fd18 <mem_free+0xd4>
   2fc4c:	b083      	sub	sp, #12
   2fc4e:	9000      	str	r0, [sp, #0]
   2fc50:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   2fc54:	f8dc 3008 	ldr.w	r3, [ip, #8]
   2fc58:	b12b      	cbz	r3, 2fc66 <mem_free+0x22>
   2fc5a:	f8dc 2000 	ldr.w	r2, [ip]
   2fc5e:	9c00      	ldr	r4, [sp, #0]
   2fc60:	7810      	ldrb	r0, [r2, #0]
   2fc62:	42a0      	cmp	r0, r4
   2fc64:	d006      	beq.n	2fc74 <mem_free+0x30>
   2fc66:	f10c 0c0c 	add.w	ip, ip, #12
   2fc6a:	45e3      	cmp	fp, ip
   2fc6c:	d1f2      	bne.n	2fc54 <mem_free+0x10>
   2fc6e:	b003      	add	sp, #12
   2fc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc74:	f8dc a004 	ldr.w	sl, [ip, #4]
   2fc78:	eb03 080a 	add.w	r8, r3, sl
   2fc7c:	45c2      	cmp	sl, r8
   2fc7e:	d2f2      	bcs.n	2fc66 <mem_free+0x22>
   2fc80:	6853      	ldr	r3, [r2, #4]
   2fc82:	f8cd c004 	str.w	ip, [sp, #4]
   2fc86:	46d6      	mov	lr, sl
   2fc88:	469c      	mov	ip, r3
   2fc8a:	f8d2 9010 	ldr.w	r9, [r2, #16]
   2fc8e:	8997      	ldrh	r7, [r2, #12]
   2fc90:	ebae 000a 	sub.w	r0, lr, sl
   2fc94:	b3df      	cbz	r7, 2fd0e <mem_free+0xca>
   2fc96:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   2fc9a:	4290      	cmp	r0, r2
   2fc9c:	d31c      	bcc.n	2fcd8 <mem_free+0x94>
   2fc9e:	4665      	mov	r5, ip
   2fca0:	2400      	movs	r4, #0
   2fca2:	f109 0304 	add.w	r3, r9, #4
   2fca6:	e003      	b.n	2fcb0 <mem_free+0x6c>
   2fca8:	885a      	ldrh	r2, [r3, #2]
   2fcaa:	3304      	adds	r3, #4
   2fcac:	4282      	cmp	r2, r0
   2fcae:	d815      	bhi.n	2fcdc <mem_free+0x98>
   2fcb0:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   2fcb4:	3401      	adds	r4, #1
   2fcb6:	42a7      	cmp	r7, r4
   2fcb8:	fb02 5506 	mla	r5, r2, r6, r5
   2fcbc:	eba0 0002 	sub.w	r0, r0, r2
   2fcc0:	461e      	mov	r6, r3
   2fcc2:	d1f1      	bne.n	2fca8 <mem_free+0x64>
   2fcc4:	2000      	movs	r0, #0
   2fcc6:	4281      	cmp	r1, r0
   2fcc8:	d00d      	beq.n	2fce6 <mem_free+0xa2>
   2fcca:	f10e 0e01 	add.w	lr, lr, #1
   2fcce:	45f0      	cmp	r8, lr
   2fcd0:	d1de      	bne.n	2fc90 <mem_free+0x4c>
   2fcd2:	f8dd c004 	ldr.w	ip, [sp, #4]
   2fcd6:	e7c6      	b.n	2fc66 <mem_free+0x22>
   2fcd8:	4665      	mov	r5, ip
   2fcda:	464e      	mov	r6, r9
   2fcdc:	8833      	ldrh	r3, [r6, #0]
   2fcde:	fb00 5003 	mla	r0, r0, r3, r5
   2fce2:	4281      	cmp	r1, r0
   2fce4:	d1f1      	bne.n	2fcca <mem_free+0x86>
   2fce6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   2fcea:	f8dd c004 	ldr.w	ip, [sp, #4]
   2fcee:	d0ba      	beq.n	2fc66 <mem_free+0x22>
   2fcf0:	2301      	movs	r3, #1
   2fcf2:	4a08      	ldr	r2, [pc, #32]	; (2fd14 <mem_free+0xd0>)
   2fcf4:	ea4f 115e 	mov.w	r1, lr, lsr #5
   2fcf8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2fcfc:	f00e 0e1f 	and.w	lr, lr, #31
   2fd00:	fa03 fe0e 	lsl.w	lr, r3, lr
   2fd04:	ea4e 0000 	orr.w	r0, lr, r0
   2fd08:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   2fd0c:	e7af      	b.n	2fc6e <mem_free+0x2a>
   2fd0e:	4638      	mov	r0, r7
   2fd10:	e7d9      	b.n	2fcc6 <mem_free+0x82>
   2fd12:	bf00      	nop
   2fd14:	20023ee0 	.word	0x20023ee0
   2fd18:	20023f24 	.word	0x20023f24

0002fd1c <mem_alloc.constprop.5>:
   2fd1c:	2800      	cmp	r0, #0
   2fd1e:	d050      	beq.n	2fdc2 <mem_alloc.constprop.5+0xa6>
   2fd20:	4b6d      	ldr	r3, [pc, #436]	; (2fed8 <mem_alloc.constprop.5+0x1bc>)
   2fd22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2fd26:	4290      	cmp	r0, r2
   2fd28:	d84b      	bhi.n	2fdc2 <mem_alloc.constprop.5+0xa6>
   2fd2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd2e:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   2fd32:	b083      	sub	sp, #12
   2fd34:	f1bb 0f00 	cmp.w	fp, #0
   2fd38:	d054      	beq.n	2fde4 <mem_alloc.constprop.5+0xc8>
   2fd3a:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   2fd3e:	4691      	mov	r9, r2
   2fd40:	2600      	movs	r6, #0
   2fd42:	f04f 0812 	mov.w	r8, #18
   2fd46:	4f65      	ldr	r7, [pc, #404]	; (2fedc <mem_alloc.constprop.5+0x1c0>)
   2fd48:	9201      	str	r2, [sp, #4]
   2fd4a:	f10b 0e11 	add.w	lr, fp, #17
   2fd4e:	eb06 0209 	add.w	r2, r6, r9
   2fd52:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   2fd56:	3201      	adds	r2, #1
   2fd58:	0852      	lsrs	r2, r2, #1
   2fd5a:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   2fd5e:	f102 0112 	add.w	r1, r2, #18
   2fd62:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   2fd66:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   2fd6a:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   2fd6e:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   2fd72:	f8dc c004 	ldr.w	ip, [ip, #4]
   2fd76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2fd7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2fd7e:	f8da a010 	ldr.w	sl, [sl, #16]
   2fd82:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   2fd86:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   2fd8a:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   2fd8e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   2fd92:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   2fd96:	6849      	ldr	r1, [r1, #4]
   2fd98:	692d      	ldr	r5, [r5, #16]
   2fd9a:	6924      	ldr	r4, [r4, #16]
   2fd9c:	f8dc c004 	ldr.w	ip, [ip, #4]
   2fda0:	4550      	cmp	r0, sl
   2fda2:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   2fda6:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   2fdaa:	d915      	bls.n	2fdd8 <mem_alloc.constprop.5+0xbc>
   2fdac:	4288      	cmp	r0, r1
   2fdae:	d211      	bcs.n	2fdd4 <mem_alloc.constprop.5+0xb8>
   2fdb0:	42a8      	cmp	r0, r5
   2fdb2:	d908      	bls.n	2fdc6 <mem_alloc.constprop.5+0xaa>
   2fdb4:	1c56      	adds	r6, r2, #1
   2fdb6:	45b1      	cmp	r9, r6
   2fdb8:	f0c0 8087 	bcc.w	2feca <mem_alloc.constprop.5+0x1ae>
   2fdbc:	f102 0813 	add.w	r8, r2, #19
   2fdc0:	e7c5      	b.n	2fd4e <mem_alloc.constprop.5+0x32>
   2fdc2:	2000      	movs	r0, #0
   2fdc4:	4770      	bx	lr
   2fdc6:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   2fdca:	454e      	cmp	r6, r9
   2fdcc:	d87d      	bhi.n	2feca <mem_alloc.constprop.5+0x1ae>
   2fdce:	f102 0e11 	add.w	lr, r2, #17
   2fdd2:	e7bc      	b.n	2fd4e <mem_alloc.constprop.5+0x32>
   2fdd4:	f109 0601 	add.w	r6, r9, #1
   2fdd8:	45b3      	cmp	fp, r6
   2fdda:	d007      	beq.n	2fdec <mem_alloc.constprop.5+0xd0>
   2fddc:	2e10      	cmp	r6, #16
   2fdde:	d001      	beq.n	2fde4 <mem_alloc.constprop.5+0xc8>
   2fde0:	45b3      	cmp	fp, r6
   2fde2:	d808      	bhi.n	2fdf6 <mem_alloc.constprop.5+0xda>
   2fde4:	2000      	movs	r0, #0
   2fde6:	b003      	add	sp, #12
   2fde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fdec:	9a01      	ldr	r2, [sp, #4]
   2fdee:	2a10      	cmp	r2, #16
   2fdf0:	bf18      	it	ne
   2fdf2:	4616      	movne	r6, r2
   2fdf4:	d0f6      	beq.n	2fde4 <mem_alloc.constprop.5+0xc8>
   2fdf6:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 2fee0 <mem_alloc.constprop.5+0x1c4>
   2fdfa:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   2fdfe:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   2fe02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2fe06:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   2fe0a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   2fe0e:	f8d2 e004 	ldr.w	lr, [r2, #4]
   2fe12:	691d      	ldr	r5, [r3, #16]
   2fe14:	2c00      	cmp	r4, #0
   2fe16:	d056      	beq.n	2fec6 <mem_alloc.constprop.5+0x1aa>
   2fe18:	462a      	mov	r2, r5
   2fe1a:	4670      	mov	r0, lr
   2fe1c:	00a4      	lsls	r4, r4, #2
   2fe1e:	eb05 0904 	add.w	r9, r5, r4
   2fe22:	8851      	ldrh	r1, [r2, #2]
   2fe24:	3204      	adds	r2, #4
   2fe26:	4591      	cmp	r9, r2
   2fe28:	4408      	add	r0, r1
   2fe2a:	d1fa      	bne.n	2fe22 <mem_alloc.constprop.5+0x106>
   2fe2c:	1929      	adds	r1, r5, r4
   2fe2e:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   2fe32:	4482      	add	sl, r0
   2fe34:	4582      	cmp	sl, r0
   2fe36:	d918      	bls.n	2fe6a <mem_alloc.constprop.5+0x14e>
   2fe38:	0941      	lsrs	r1, r0, #5
   2fe3a:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   2fe3e:	f000 041f 	and.w	r4, r0, #31
   2fe42:	fa22 f904 	lsr.w	r9, r2, r4
   2fe46:	f019 0f01 	tst.w	r9, #1
   2fe4a:	d007      	beq.n	2fe5c <mem_alloc.constprop.5+0x140>
   2fe4c:	e013      	b.n	2fe76 <mem_alloc.constprop.5+0x15a>
   2fe4e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   2fe52:	fa22 f904 	lsr.w	r9, r2, r4
   2fe56:	f019 0f01 	tst.w	r9, #1
   2fe5a:	d10c      	bne.n	2fe76 <mem_alloc.constprop.5+0x15a>
   2fe5c:	3001      	adds	r0, #1
   2fe5e:	4582      	cmp	sl, r0
   2fe60:	ea4f 1150 	mov.w	r1, r0, lsr #5
   2fe64:	f000 041f 	and.w	r4, r0, #31
   2fe68:	d1f1      	bne.n	2fe4e <mem_alloc.constprop.5+0x132>
   2fe6a:	3601      	adds	r6, #1
   2fe6c:	455e      	cmp	r6, fp
   2fe6e:	f108 0808 	add.w	r8, r8, #8
   2fe72:	d3c4      	bcc.n	2fdfe <mem_alloc.constprop.5+0xe2>
   2fe74:	e7b6      	b.n	2fde4 <mem_alloc.constprop.5+0xc8>
   2fe76:	2601      	movs	r6, #1
   2fe78:	fa06 f404 	lsl.w	r4, r6, r4
   2fe7c:	899e      	ldrh	r6, [r3, #12]
   2fe7e:	ea22 0204 	bic.w	r2, r2, r4
   2fe82:	eba0 000e 	sub.w	r0, r0, lr
   2fe86:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   2fe8a:	685c      	ldr	r4, [r3, #4]
   2fe8c:	2e00      	cmp	r6, #0
   2fe8e:	d0a9      	beq.n	2fde4 <mem_alloc.constprop.5+0xc8>
   2fe90:	886a      	ldrh	r2, [r5, #2]
   2fe92:	4282      	cmp	r2, r0
   2fe94:	d811      	bhi.n	2feba <mem_alloc.constprop.5+0x19e>
   2fe96:	2100      	movs	r1, #0
   2fe98:	1d2b      	adds	r3, r5, #4
   2fe9a:	e003      	b.n	2fea4 <mem_alloc.constprop.5+0x188>
   2fe9c:	885a      	ldrh	r2, [r3, #2]
   2fe9e:	3304      	adds	r3, #4
   2fea0:	4282      	cmp	r2, r0
   2fea2:	d80a      	bhi.n	2feba <mem_alloc.constprop.5+0x19e>
   2fea4:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   2fea8:	3101      	adds	r1, #1
   2feaa:	428e      	cmp	r6, r1
   2feac:	fb02 4405 	mla	r4, r2, r5, r4
   2feb0:	eba0 0002 	sub.w	r0, r0, r2
   2feb4:	461d      	mov	r5, r3
   2feb6:	d1f1      	bne.n	2fe9c <mem_alloc.constprop.5+0x180>
   2feb8:	e794      	b.n	2fde4 <mem_alloc.constprop.5+0xc8>
   2feba:	882b      	ldrh	r3, [r5, #0]
   2febc:	fb00 4003 	mla	r0, r0, r3, r4
   2fec0:	b003      	add	sp, #12
   2fec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fec6:	4670      	mov	r0, lr
   2fec8:	e7b0      	b.n	2fe2c <mem_alloc.constprop.5+0x110>
   2feca:	f1bb 0f10 	cmp.w	fp, #16
   2fece:	bf08      	it	eq
   2fed0:	260f      	moveq	r6, #15
   2fed2:	d090      	beq.n	2fdf6 <mem_alloc.constprop.5+0xda>
   2fed4:	e786      	b.n	2fde4 <mem_alloc.constprop.5+0xc8>
   2fed6:	bf00      	nop
   2fed8:	20023f60 	.word	0x20023f60
   2fedc:	20023f24 	.word	0x20023f24
   2fee0:	20023ee0 	.word	0x20023ee0

0002fee4 <mem_alloc.constprop.4>:
   2fee4:	2800      	cmp	r0, #0
   2fee6:	d04c      	beq.n	2ff82 <mem_alloc.constprop.4+0x9e>
   2fee8:	4b6b      	ldr	r3, [pc, #428]	; (30098 <CONFIG_FLASH_LOAD_SIZE+0x98>)
   2feea:	681a      	ldr	r2, [r3, #0]
   2feec:	4290      	cmp	r0, r2
   2feee:	d848      	bhi.n	2ff82 <mem_alloc.constprop.4+0x9e>
   2fef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fef4:	685f      	ldr	r7, [r3, #4]
   2fef6:	b083      	sub	sp, #12
   2fef8:	9700      	str	r7, [sp, #0]
   2fefa:	2f00      	cmp	r7, #0
   2fefc:	d051      	beq.n	2ffa2 <mem_alloc.constprop.4+0xbe>
   2fefe:	1e7a      	subs	r2, r7, #1
   2ff00:	4696      	mov	lr, r2
   2ff02:	2100      	movs	r1, #0
   2ff04:	f04f 0c01 	mov.w	ip, #1
   2ff08:	4c64      	ldr	r4, [pc, #400]	; (3009c <CONFIG_FLASH_LOAD_SIZE+0x9c>)
   2ff0a:	9201      	str	r2, [sp, #4]
   2ff0c:	eb01 020e 	add.w	r2, r1, lr
   2ff10:	3201      	adds	r2, #1
   2ff12:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   2ff16:	0852      	lsrs	r2, r2, #1
   2ff18:	f102 0801 	add.w	r8, r2, #1
   2ff1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2ff20:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   2ff24:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   2ff28:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   2ff2c:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   2ff30:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   2ff34:	f8d9 9004 	ldr.w	r9, [r9, #4]
   2ff38:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   2ff3c:	f8da a010 	ldr.w	sl, [sl, #16]
   2ff40:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   2ff44:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   2ff48:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   2ff4c:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   2ff50:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   2ff54:	6936      	ldr	r6, [r6, #16]
   2ff56:	f8db b004 	ldr.w	fp, [fp, #4]
   2ff5a:	692d      	ldr	r5, [r5, #16]
   2ff5c:	f8d9 9004 	ldr.w	r9, [r9, #4]
   2ff60:	4550      	cmp	r0, sl
   2ff62:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   2ff66:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   2ff6a:	d913      	bls.n	2ff94 <mem_alloc.constprop.4+0xb0>
   2ff6c:	42a8      	cmp	r0, r5
   2ff6e:	d210      	bcs.n	2ff92 <mem_alloc.constprop.4+0xae>
   2ff70:	42b0      	cmp	r0, r6
   2ff72:	d908      	bls.n	2ff86 <mem_alloc.constprop.4+0xa2>
   2ff74:	45c6      	cmp	lr, r8
   2ff76:	4641      	mov	r1, r8
   2ff78:	f0c0 8087 	bcc.w	3008a <CONFIG_FLASH_LOAD_SIZE+0x8a>
   2ff7c:	f108 0c01 	add.w	ip, r8, #1
   2ff80:	e7c4      	b.n	2ff0c <mem_alloc.constprop.4+0x28>
   2ff82:	2000      	movs	r0, #0
   2ff84:	4770      	bx	lr
   2ff86:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   2ff8a:	4571      	cmp	r1, lr
   2ff8c:	d87d      	bhi.n	3008a <CONFIG_FLASH_LOAD_SIZE+0x8a>
   2ff8e:	4617      	mov	r7, r2
   2ff90:	e7bc      	b.n	2ff0c <mem_alloc.constprop.4+0x28>
   2ff92:	4639      	mov	r1, r7
   2ff94:	9a00      	ldr	r2, [sp, #0]
   2ff96:	428a      	cmp	r2, r1
   2ff98:	d007      	beq.n	2ffaa <mem_alloc.constprop.4+0xc6>
   2ff9a:	2910      	cmp	r1, #16
   2ff9c:	d001      	beq.n	2ffa2 <mem_alloc.constprop.4+0xbe>
   2ff9e:	428a      	cmp	r2, r1
   2ffa0:	d808      	bhi.n	2ffb4 <mem_alloc.constprop.4+0xd0>
   2ffa2:	2000      	movs	r0, #0
   2ffa4:	b003      	add	sp, #12
   2ffa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ffaa:	9a01      	ldr	r2, [sp, #4]
   2ffac:	2a10      	cmp	r2, #16
   2ffae:	bf18      	it	ne
   2ffb0:	4611      	movne	r1, r2
   2ffb2:	d0f6      	beq.n	2ffa2 <mem_alloc.constprop.4+0xbe>
   2ffb4:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 300a0 <CONFIG_FLASH_LOAD_SIZE+0xa0>
   2ffb8:	f8dd 9000 	ldr.w	r9, [sp]
   2ffbc:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   2ffc0:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   2ffc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2ffc8:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   2ffcc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   2ffd0:	f8d2 e004 	ldr.w	lr, [r2, #4]
   2ffd4:	691f      	ldr	r7, [r3, #16]
   2ffd6:	2e00      	cmp	r6, #0
   2ffd8:	d055      	beq.n	30086 <CONFIG_FLASH_LOAD_SIZE+0x86>
   2ffda:	463a      	mov	r2, r7
   2ffdc:	4670      	mov	r0, lr
   2ffde:	00b6      	lsls	r6, r6, #2
   2ffe0:	eb07 0a06 	add.w	sl, r7, r6
   2ffe4:	8855      	ldrh	r5, [r2, #2]
   2ffe6:	3204      	adds	r2, #4
   2ffe8:	4592      	cmp	sl, r2
   2ffea:	4428      	add	r0, r5
   2ffec:	d1fa      	bne.n	2ffe4 <mem_alloc.constprop.4+0x100>
   2ffee:	19bd      	adds	r5, r7, r6
   2fff0:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   2fff4:	4483      	add	fp, r0
   2fff6:	4583      	cmp	fp, r0
   2fff8:	d918      	bls.n	3002c <CONFIG_FLASH_LOAD_SIZE+0x2c>
   2fffa:	0945      	lsrs	r5, r0, #5
   2fffc:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   30000:	f000 061f 	and.w	r6, r0, #31
   30004:	fa22 fa06 	lsr.w	sl, r2, r6
   30008:	f01a 0f01 	tst.w	sl, #1
   3000c:	d007      	beq.n	3001e <CONFIG_FLASH_LOAD_SIZE+0x1e>
   3000e:	e013      	b.n	30038 <CONFIG_FLASH_LOAD_SIZE+0x38>
   30010:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   30014:	fa22 fa06 	lsr.w	sl, r2, r6
   30018:	f01a 0f01 	tst.w	sl, #1
   3001c:	d10c      	bne.n	30038 <CONFIG_FLASH_LOAD_SIZE+0x38>
   3001e:	3001      	adds	r0, #1
   30020:	4583      	cmp	fp, r0
   30022:	ea4f 1550 	mov.w	r5, r0, lsr #5
   30026:	f000 061f 	and.w	r6, r0, #31
   3002a:	d1f1      	bne.n	30010 <CONFIG_FLASH_LOAD_SIZE+0x10>
   3002c:	3101      	adds	r1, #1
   3002e:	4549      	cmp	r1, r9
   30030:	f108 0808 	add.w	r8, r8, #8
   30034:	d3c4      	bcc.n	2ffc0 <mem_alloc.constprop.4+0xdc>
   30036:	e7b4      	b.n	2ffa2 <mem_alloc.constprop.4+0xbe>
   30038:	2101      	movs	r1, #1
   3003a:	40b1      	lsls	r1, r6
   3003c:	899e      	ldrh	r6, [r3, #12]
   3003e:	ea22 0201 	bic.w	r2, r2, r1
   30042:	eba0 000e 	sub.w	r0, r0, lr
   30046:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   3004a:	685c      	ldr	r4, [r3, #4]
   3004c:	2e00      	cmp	r6, #0
   3004e:	d0a8      	beq.n	2ffa2 <mem_alloc.constprop.4+0xbe>
   30050:	887a      	ldrh	r2, [r7, #2]
   30052:	4282      	cmp	r2, r0
   30054:	d811      	bhi.n	3007a <CONFIG_FLASH_LOAD_SIZE+0x7a>
   30056:	2100      	movs	r1, #0
   30058:	1d3b      	adds	r3, r7, #4
   3005a:	e003      	b.n	30064 <CONFIG_FLASH_LOAD_SIZE+0x64>
   3005c:	885a      	ldrh	r2, [r3, #2]
   3005e:	3304      	adds	r3, #4
   30060:	4282      	cmp	r2, r0
   30062:	d80a      	bhi.n	3007a <CONFIG_FLASH_LOAD_SIZE+0x7a>
   30064:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   30068:	3101      	adds	r1, #1
   3006a:	428e      	cmp	r6, r1
   3006c:	eba0 0002 	sub.w	r0, r0, r2
   30070:	fb02 4405 	mla	r4, r2, r5, r4
   30074:	461f      	mov	r7, r3
   30076:	d1f1      	bne.n	3005c <CONFIG_FLASH_LOAD_SIZE+0x5c>
   30078:	e793      	b.n	2ffa2 <mem_alloc.constprop.4+0xbe>
   3007a:	883b      	ldrh	r3, [r7, #0]
   3007c:	fb00 4003 	mla	r0, r0, r3, r4
   30080:	b003      	add	sp, #12
   30082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30086:	4670      	mov	r0, lr
   30088:	e7b1      	b.n	2ffee <mem_alloc.constprop.4+0x10a>
   3008a:	9a00      	ldr	r2, [sp, #0]
   3008c:	2a10      	cmp	r2, #16
   3008e:	bf08      	it	eq
   30090:	210f      	moveq	r1, #15
   30092:	d08f      	beq.n	2ffb4 <mem_alloc.constprop.4+0xd0>
   30094:	e785      	b.n	2ffa2 <mem_alloc.constprop.4+0xbe>
   30096:	bf00      	nop
   30098:	20023f60 	.word	0x20023f60
   3009c:	20023f24 	.word	0x20023f24
   300a0:	20023ee0 	.word	0x20023ee0

000300a4 <nrf_mem_init>:
   300a4:	b570      	push	{r4, r5, r6, lr}
   300a6:	2200      	movs	r2, #0
   300a8:	2501      	movs	r5, #1
   300aa:	4833      	ldr	r0, [pc, #204]	; (30178 <nrf_mem_init+0xd4>)
   300ac:	0951      	lsrs	r1, r2, #5
   300ae:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   300b2:	f002 031f 	and.w	r3, r2, #31
   300b6:	fa05 f303 	lsl.w	r3, r5, r3
   300ba:	3201      	adds	r2, #1
   300bc:	4323      	orrs	r3, r4
   300be:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   300c2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   300c6:	d1f1      	bne.n	300ac <nrf_mem_init+0x8>
   300c8:	2400      	movs	r4, #0
   300ca:	4b2c      	ldr	r3, [pc, #176]	; (3017c <nrf_mem_init+0xd8>)
   300cc:	4621      	mov	r1, r4
   300ce:	223c      	movs	r2, #60	; 0x3c
   300d0:	482b      	ldr	r0, [pc, #172]	; (30180 <nrf_mem_init+0xdc>)
   300d2:	601c      	str	r4, [r3, #0]
   300d4:	f007 f9b5 	bl	37442 <memset>
   300d8:	2110      	movs	r1, #16
   300da:	2205      	movs	r2, #5
   300dc:	4b29      	ldr	r3, [pc, #164]	; (30184 <nrf_mem_init+0xe0>)
   300de:	4e2a      	ldr	r6, [pc, #168]	; (30188 <nrf_mem_init+0xe4>)
   300e0:	e9c3 4400 	strd	r4, r4, [r3]
   300e4:	60d9      	str	r1, [r3, #12]
   300e6:	6159      	str	r1, [r3, #20]
   300e8:	61d9      	str	r1, [r3, #28]
   300ea:	6259      	str	r1, [r3, #36]	; 0x24
   300ec:	62d9      	str	r1, [r3, #44]	; 0x2c
   300ee:	6359      	str	r1, [r3, #52]	; 0x34
   300f0:	63d9      	str	r1, [r3, #60]	; 0x3c
   300f2:	6459      	str	r1, [r3, #68]	; 0x44
   300f4:	64d9      	str	r1, [r3, #76]	; 0x4c
   300f6:	6559      	str	r1, [r3, #84]	; 0x54
   300f8:	65d9      	str	r1, [r3, #92]	; 0x5c
   300fa:	6659      	str	r1, [r3, #100]	; 0x64
   300fc:	66d9      	str	r1, [r3, #108]	; 0x6c
   300fe:	6759      	str	r1, [r3, #116]	; 0x74
   30100:	67d9      	str	r1, [r3, #124]	; 0x7c
   30102:	609a      	str	r2, [r3, #8]
   30104:	611a      	str	r2, [r3, #16]
   30106:	619a      	str	r2, [r3, #24]
   30108:	621a      	str	r2, [r3, #32]
   3010a:	629a      	str	r2, [r3, #40]	; 0x28
   3010c:	631a      	str	r2, [r3, #48]	; 0x30
   3010e:	639a      	str	r2, [r3, #56]	; 0x38
   30110:	641a      	str	r2, [r3, #64]	; 0x40
   30112:	649a      	str	r2, [r3, #72]	; 0x48
   30114:	651a      	str	r2, [r3, #80]	; 0x50
   30116:	659a      	str	r2, [r3, #88]	; 0x58
   30118:	661a      	str	r2, [r3, #96]	; 0x60
   3011a:	669a      	str	r2, [r3, #104]	; 0x68
   3011c:	671a      	str	r2, [r3, #112]	; 0x70
   3011e:	679a      	str	r2, [r3, #120]	; 0x78
   30120:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   30124:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   30128:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   3012c:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   30130:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   30134:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   30138:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   3013c:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   30140:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   30144:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   30148:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   3014c:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   30150:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   30154:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   30158:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   3015c:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   30160:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   30164:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   30168:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   3016c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   30170:	4620      	mov	r0, r4
   30172:	7035      	strb	r5, [r6, #0]
   30174:	bd70      	pop	{r4, r5, r6, pc}
   30176:	bf00      	nop
   30178:	20023ee0 	.word	0x20023ee0
   3017c:	20023f20 	.word	0x20023f20
   30180:	20023f24 	.word	0x20023f24
   30184:	20023f60 	.word	0x20023f60
   30188:	2002cb9e 	.word	0x2002cb9e

0003018c <nrf_mem_register>:
   3018c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30190:	4b87      	ldr	r3, [pc, #540]	; (303b0 <nrf_mem_register+0x224>)
   30192:	b087      	sub	sp, #28
   30194:	781b      	ldrb	r3, [r3, #0]
   30196:	2b00      	cmp	r3, #0
   30198:	f000 808c 	beq.w	302b4 <nrf_mem_register+0x128>
   3019c:	b328      	cbz	r0, 301ea <nrf_mem_register+0x5e>
   3019e:	b321      	cbz	r1, 301ea <nrf_mem_register+0x5e>
   301a0:	780b      	ldrb	r3, [r1, #0]
   301a2:	f8df 8218 	ldr.w	r8, [pc, #536]	; 303bc <nrf_mem_register+0x230>
   301a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   301aa:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   301ae:	685b      	ldr	r3, [r3, #4]
   301b0:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   301b4:	4463      	add	r3, ip
   301b6:	2b10      	cmp	r3, #16
   301b8:	d811      	bhi.n	301de <nrf_mem_register+0x52>
   301ba:	f04f 0a00 	mov.w	sl, #0
   301be:	4689      	mov	r9, r1
   301c0:	4b7c      	ldr	r3, [pc, #496]	; (303b4 <nrf_mem_register+0x228>)
   301c2:	4f7d      	ldr	r7, [pc, #500]	; (303b8 <nrf_mem_register+0x22c>)
   301c4:	681b      	ldr	r3, [r3, #0]
   301c6:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   301ca:	9300      	str	r3, [sp, #0]
   301cc:	68b9      	ldr	r1, [r7, #8]
   301ce:	b191      	cbz	r1, 301f6 <nrf_mem_register+0x6a>
   301d0:	f10a 0a01 	add.w	sl, sl, #1
   301d4:	f1ba 0f05 	cmp.w	sl, #5
   301d8:	f107 070c 	add.w	r7, r7, #12
   301dc:	d1f6      	bne.n	301cc <nrf_mem_register+0x40>
   301de:	f248 1b07 	movw	fp, #33031	; 0x8107
   301e2:	4658      	mov	r0, fp
   301e4:	b007      	add	sp, #28
   301e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   301ea:	f248 1b0e 	movw	fp, #33038	; 0x810e
   301ee:	4658      	mov	r0, fp
   301f0:	b007      	add	sp, #28
   301f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   301f6:	f1bc 0f00 	cmp.w	ip, #0
   301fa:	d061      	beq.n	302c0 <nrf_mem_register+0x134>
   301fc:	460d      	mov	r5, r1
   301fe:	460c      	mov	r4, r1
   30200:	f8d9 3010 	ldr.w	r3, [r9, #16]
   30204:	eb0e 0b03 	add.w	fp, lr, r3
   30208:	885a      	ldrh	r2, [r3, #2]
   3020a:	f833 6b04 	ldrh.w	r6, [r3], #4
   3020e:	4415      	add	r5, r2
   30210:	459b      	cmp	fp, r3
   30212:	fb02 4406 	mla	r4, r2, r6, r4
   30216:	d1f7      	bne.n	30208 <nrf_mem_register+0x7c>
   30218:	f8d9 3008 	ldr.w	r3, [r9, #8]
   3021c:	42a3      	cmp	r3, r4
   3021e:	d3d7      	bcc.n	301d0 <nrf_mem_register+0x44>
   30220:	9b00      	ldr	r3, [sp, #0]
   30222:	442b      	add	r3, r5
   30224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   30228:	d2d2      	bcs.n	301d0 <nrf_mem_register+0x44>
   3022a:	4c63      	ldr	r4, [pc, #396]	; (303b8 <nrf_mem_register+0x22c>)
   3022c:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   30230:	0092      	lsls	r2, r2, #2
   30232:	f8c0 a000 	str.w	sl, [r0]
   30236:	18a0      	adds	r0, r4, r2
   30238:	f844 9002 	str.w	r9, [r4, r2]
   3023c:	9a00      	ldr	r2, [sp, #0]
   3023e:	468b      	mov	fp, r1
   30240:	e9c0 2501 	strd	r2, r5, [r0, #4]
   30244:	f899 2001 	ldrb.w	r2, [r9, #1]
   30248:	485a      	ldr	r0, [pc, #360]	; (303b4 <nrf_mem_register+0x228>)
   3024a:	2a01      	cmp	r2, #1
   3024c:	6003      	str	r3, [r0, #0]
   3024e:	d0c8      	beq.n	301e2 <nrf_mem_register+0x56>
   30250:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   30254:	2b00      	cmp	r3, #0
   30256:	d0c4      	beq.n	301e2 <nrf_mem_register+0x56>
   30258:	2500      	movs	r5, #0
   3025a:	f8cd 9004 	str.w	r9, [sp, #4]
   3025e:	f8cd a00c 	str.w	sl, [sp, #12]
   30262:	f8cd b014 	str.w	fp, [sp, #20]
   30266:	9b01      	ldr	r3, [sp, #4]
   30268:	781f      	ldrb	r7, [r3, #0]
   3026a:	691a      	ldr	r2, [r3, #16]
   3026c:	013b      	lsls	r3, r7, #4
   3026e:	eb03 0907 	add.w	r9, r3, r7
   30272:	9300      	str	r3, [sp, #0]
   30274:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   30278:	6859      	ldr	r1, [r3, #4]
   3027a:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   3027e:	9102      	str	r1, [sp, #8]
   30280:	bb39      	cbnz	r1, 302d2 <nrf_mem_register+0x146>
   30282:	9a03      	ldr	r2, [sp, #12]
   30284:	60dd      	str	r5, [r3, #12]
   30286:	609a      	str	r2, [r3, #8]
   30288:	9b00      	ldr	r3, [sp, #0]
   3028a:	443b      	add	r3, r7
   3028c:	461f      	mov	r7, r3
   3028e:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   30292:	684b      	ldr	r3, [r1, #4]
   30294:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   30298:	3301      	adds	r3, #1
   3029a:	4294      	cmp	r4, r2
   3029c:	604b      	str	r3, [r1, #4]
   3029e:	d912      	bls.n	302c6 <nrf_mem_register+0x13a>
   302a0:	9b01      	ldr	r3, [sp, #4]
   302a2:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   302a6:	899b      	ldrh	r3, [r3, #12]
   302a8:	3501      	adds	r5, #1
   302aa:	429d      	cmp	r5, r3
   302ac:	d3db      	bcc.n	30266 <nrf_mem_register+0xda>
   302ae:	f8dd b014 	ldr.w	fp, [sp, #20]
   302b2:	e796      	b.n	301e2 <nrf_mem_register+0x56>
   302b4:	f248 1b08 	movw	fp, #33032	; 0x8108
   302b8:	4658      	mov	r0, fp
   302ba:	b007      	add	sp, #28
   302bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   302c0:	9b00      	ldr	r3, [sp, #0]
   302c2:	4665      	mov	r5, ip
   302c4:	e7ae      	b.n	30224 <nrf_mem_register+0x98>
   302c6:	9b01      	ldr	r3, [sp, #4]
   302c8:	3501      	adds	r5, #1
   302ca:	899b      	ldrh	r3, [r3, #12]
   302cc:	42ab      	cmp	r3, r5
   302ce:	d8ca      	bhi.n	30266 <nrf_mem_register+0xda>
   302d0:	e7ed      	b.n	302ae <nrf_mem_register+0x122>
   302d2:	2600      	movs	r6, #0
   302d4:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   302d8:	9504      	str	r5, [sp, #16]
   302da:	eb06 000a 	add.w	r0, r6, sl
   302de:	eb09 0206 	add.w	r2, r9, r6
   302e2:	3201      	adds	r2, #1
   302e4:	3001      	adds	r0, #1
   302e6:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   302ea:	0840      	lsrs	r0, r0, #1
   302ec:	4d32      	ldr	r5, [pc, #200]	; (303b8 <nrf_mem_register+0x22c>)
   302ee:	eb09 0100 	add.w	r1, r9, r0
   302f2:	eb09 030a 	add.w	r3, r9, sl
   302f6:	3101      	adds	r1, #1
   302f8:	3301      	adds	r3, #1
   302fa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   302fe:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   30302:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   30306:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   3030a:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   3030e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   30312:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   30316:	f8db b010 	ldr.w	fp, [fp, #16]
   3031a:	6852      	ldr	r2, [r2, #4]
   3031c:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   30320:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   30324:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   30328:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   3032c:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   30330:	f8de e010 	ldr.w	lr, [lr, #16]
   30334:	6849      	ldr	r1, [r1, #4]
   30336:	f8dc c010 	ldr.w	ip, [ip, #16]
   3033a:	685b      	ldr	r3, [r3, #4]
   3033c:	4294      	cmp	r4, r2
   3033e:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   30342:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   30346:	d92d      	bls.n	303a4 <nrf_mem_register+0x218>
   30348:	429c      	cmp	r4, r3
   3034a:	d22d      	bcs.n	303a8 <nrf_mem_register+0x21c>
   3034c:	428c      	cmp	r4, r1
   3034e:	d924      	bls.n	3039a <nrf_mem_register+0x20e>
   30350:	1c46      	adds	r6, r0, #1
   30352:	45b2      	cmp	sl, r6
   30354:	d2c1      	bcs.n	302da <nrf_mem_register+0x14e>
   30356:	2610      	movs	r6, #16
   30358:	9d04      	ldr	r5, [sp, #16]
   3035a:	9a02      	ldr	r2, [sp, #8]
   3035c:	42b2      	cmp	r2, r6
   3035e:	d911      	bls.n	30384 <nrf_mem_register+0x1f8>
   30360:	9b00      	ldr	r3, [sp, #0]
   30362:	443b      	add	r3, r7
   30364:	441a      	add	r2, r3
   30366:	4433      	add	r3, r6
   30368:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   3036c:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   30370:	2208      	movs	r2, #8
   30372:	4651      	mov	r1, sl
   30374:	eb0a 0002 	add.w	r0, sl, r2
   30378:	f1aa 0a08 	sub.w	sl, sl, #8
   3037c:	f007 f841 	bl	37402 <memcpy>
   30380:	45d1      	cmp	r9, sl
   30382:	d1f5      	bne.n	30370 <nrf_mem_register+0x1e4>
   30384:	9b00      	ldr	r3, [sp, #0]
   30386:	9903      	ldr	r1, [sp, #12]
   30388:	443b      	add	r3, r7
   3038a:	4433      	add	r3, r6
   3038c:	3301      	adds	r3, #1
   3038e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   30392:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   30396:	6055      	str	r5, [r2, #4]
   30398:	e776      	b.n	30288 <nrf_mem_register+0xfc>
   3039a:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   3039e:	4556      	cmp	r6, sl
   303a0:	d99b      	bls.n	302da <nrf_mem_register+0x14e>
   303a2:	e7d8      	b.n	30356 <nrf_mem_register+0x1ca>
   303a4:	9d04      	ldr	r5, [sp, #16]
   303a6:	e7d8      	b.n	3035a <nrf_mem_register+0x1ce>
   303a8:	9d04      	ldr	r5, [sp, #16]
   303aa:	f10a 0601 	add.w	r6, sl, #1
   303ae:	e7d4      	b.n	3035a <nrf_mem_register+0x1ce>
   303b0:	2002cb9e 	.word	0x2002cb9e
   303b4:	20023f20 	.word	0x20023f20
   303b8:	20023f24 	.word	0x20023f24
   303bc:	20023f60 	.word	0x20023f60

000303c0 <nrf_malloc>:
   303c0:	4b03      	ldr	r3, [pc, #12]	; (303d0 <nrf_malloc+0x10>)
   303c2:	781b      	ldrb	r3, [r3, #0]
   303c4:	b10b      	cbz	r3, 303ca <nrf_malloc+0xa>
   303c6:	f7ff bd8d 	b.w	2fee4 <mem_alloc.constprop.4>
   303ca:	4618      	mov	r0, r3
   303cc:	4770      	bx	lr
   303ce:	bf00      	nop
   303d0:	2002cb9e 	.word	0x2002cb9e

000303d4 <nrf_free>:
   303d4:	4b04      	ldr	r3, [pc, #16]	; (303e8 <nrf_free+0x14>)
   303d6:	781b      	ldrb	r3, [r3, #0]
   303d8:	b123      	cbz	r3, 303e4 <nrf_free+0x10>
   303da:	b118      	cbz	r0, 303e4 <nrf_free+0x10>
   303dc:	4601      	mov	r1, r0
   303de:	2000      	movs	r0, #0
   303e0:	f7ff bc30 	b.w	2fc44 <mem_free>
   303e4:	4770      	bx	lr
   303e6:	bf00      	nop
   303e8:	2002cb9e 	.word	0x2002cb9e

000303ec <nrf_realloc>:
   303ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   303f0:	4b52      	ldr	r3, [pc, #328]	; (3053c <nrf_realloc+0x150>)
   303f2:	b087      	sub	sp, #28
   303f4:	781b      	ldrb	r3, [r3, #0]
   303f6:	b173      	cbz	r3, 30416 <nrf_realloc+0x2a>
   303f8:	b168      	cbz	r0, 30416 <nrf_realloc+0x2a>
   303fa:	e9cd 0101 	strd	r0, r1, [sp, #4]
   303fe:	f8df a148 	ldr.w	sl, [pc, #328]	; 30548 <nrf_realloc+0x15c>
   30402:	f8da 3000 	ldr.w	r3, [sl]
   30406:	b10b      	cbz	r3, 3040c <nrf_realloc+0x20>
   30408:	781a      	ldrb	r2, [r3, #0]
   3040a:	b14a      	cbz	r2, 30420 <nrf_realloc+0x34>
   3040c:	4b4c      	ldr	r3, [pc, #304]	; (30540 <nrf_realloc+0x154>)
   3040e:	f10a 0a0c 	add.w	sl, sl, #12
   30412:	4553      	cmp	r3, sl
   30414:	d1f5      	bne.n	30402 <nrf_realloc+0x16>
   30416:	2400      	movs	r4, #0
   30418:	4620      	mov	r0, r4
   3041a:	b007      	add	sp, #28
   3041c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30420:	e9da 9201 	ldrd	r9, r2, [sl, #4]
   30424:	444a      	add	r2, r9
   30426:	4591      	cmp	r9, r2
   30428:	9200      	str	r2, [sp, #0]
   3042a:	d2ef      	bcs.n	3040c <nrf_realloc+0x20>
   3042c:	685a      	ldr	r2, [r3, #4]
   3042e:	f8cd a00c 	str.w	sl, [sp, #12]
   30432:	46cb      	mov	fp, r9
   30434:	4692      	mov	sl, r2
   30436:	f8d3 8010 	ldr.w	r8, [r3, #16]
   3043a:	899f      	ldrh	r7, [r3, #12]
   3043c:	ebab 0e09 	sub.w	lr, fp, r9
   30440:	b1d7      	cbz	r7, 30478 <nrf_realloc+0x8c>
   30442:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   30446:	45e6      	cmp	lr, ip
   30448:	4662      	mov	r2, ip
   3044a:	d31d      	bcc.n	30488 <nrf_realloc+0x9c>
   3044c:	4654      	mov	r4, sl
   3044e:	4671      	mov	r1, lr
   30450:	4665      	mov	r5, ip
   30452:	2000      	movs	r0, #0
   30454:	f108 0304 	add.w	r3, r8, #4
   30458:	e004      	b.n	30464 <nrf_realloc+0x78>
   3045a:	885a      	ldrh	r2, [r3, #2]
   3045c:	3304      	adds	r3, #4
   3045e:	428a      	cmp	r2, r1
   30460:	4615      	mov	r5, r2
   30462:	d814      	bhi.n	3048e <nrf_realloc+0xa2>
   30464:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   30468:	3001      	adds	r0, #1
   3046a:	4287      	cmp	r7, r0
   3046c:	fb02 4406 	mla	r4, r2, r6, r4
   30470:	eba1 0105 	sub.w	r1, r1, r5
   30474:	461e      	mov	r6, r3
   30476:	d1f0      	bne.n	3045a <nrf_realloc+0x6e>
   30478:	9b00      	ldr	r3, [sp, #0]
   3047a:	f10b 0b01 	add.w	fp, fp, #1
   3047e:	455b      	cmp	r3, fp
   30480:	d1dc      	bne.n	3043c <nrf_realloc+0x50>
   30482:	f8dd a00c 	ldr.w	sl, [sp, #12]
   30486:	e7c1      	b.n	3040c <nrf_realloc+0x20>
   30488:	4654      	mov	r4, sl
   3048a:	4671      	mov	r1, lr
   3048c:	4646      	mov	r6, r8
   3048e:	8833      	ldrh	r3, [r6, #0]
   30490:	fb01 4103 	mla	r1, r1, r3, r4
   30494:	9b01      	ldr	r3, [sp, #4]
   30496:	428b      	cmp	r3, r1
   30498:	d1ee      	bne.n	30478 <nrf_realloc+0x8c>
   3049a:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   3049e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   304a2:	d0b3      	beq.n	3040c <nrf_realloc+0x20>
   304a4:	45e6      	cmp	lr, ip
   304a6:	d334      	bcc.n	30512 <nrf_realloc+0x126>
   304a8:	2200      	movs	r2, #0
   304aa:	f108 0304 	add.w	r3, r8, #4
   304ae:	e006      	b.n	304be <nrf_realloc+0xd2>
   304b0:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   304b4:	4698      	mov	r8, r3
   304b6:	45f4      	cmp	ip, lr
   304b8:	f103 0304 	add.w	r3, r3, #4
   304bc:	d829      	bhi.n	30512 <nrf_realloc+0x126>
   304be:	3201      	adds	r2, #1
   304c0:	42ba      	cmp	r2, r7
   304c2:	ebae 0e0c 	sub.w	lr, lr, ip
   304c6:	d1f3      	bne.n	304b0 <nrf_realloc+0xc4>
   304c8:	2300      	movs	r3, #0
   304ca:	9a02      	ldr	r2, [sp, #8]
   304cc:	429a      	cmp	r2, r3
   304ce:	d923      	bls.n	30518 <nrf_realloc+0x12c>
   304d0:	4610      	mov	r0, r2
   304d2:	f7ff fd07 	bl	2fee4 <mem_alloc.constprop.4>
   304d6:	4604      	mov	r4, r0
   304d8:	2800      	cmp	r0, #0
   304da:	d097      	beq.n	3040c <nrf_realloc+0x20>
   304dc:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
   304e0:	462a      	mov	r2, r5
   304e2:	f006 ff8e 	bl	37402 <memcpy>
   304e6:	462b      	mov	r3, r5
   304e8:	2201      	movs	r2, #1
   304ea:	3303      	adds	r3, #3
   304ec:	4915      	ldr	r1, [pc, #84]	; (30544 <nrf_realloc+0x158>)
   304ee:	4423      	add	r3, r4
   304f0:	f023 0303 	bic.w	r3, r3, #3
   304f4:	ea4f 105b 	mov.w	r0, fp, lsr #5
   304f8:	681e      	ldr	r6, [r3, #0]
   304fa:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   304fe:	f00b 031f 	and.w	r3, fp, #31
   30502:	fa02 f303 	lsl.w	r3, r2, r3
   30506:	9605      	str	r6, [sp, #20]
   30508:	432b      	orrs	r3, r5
   3050a:	9a05      	ldr	r2, [sp, #20]
   3050c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   30510:	e782      	b.n	30418 <nrf_realloc+0x2c>
   30512:	f8b8 3000 	ldrh.w	r3, [r8]
   30516:	e7d8      	b.n	304ca <nrf_realloc+0xde>
   30518:	4615      	mov	r5, r2
   3051a:	b96a      	cbnz	r2, 30538 <nrf_realloc+0x14c>
   3051c:	2301      	movs	r3, #1
   3051e:	4a09      	ldr	r2, [pc, #36]	; (30544 <nrf_realloc+0x158>)
   30520:	ea4f 115b 	mov.w	r1, fp, lsr #5
   30524:	f00b 041f 	and.w	r4, fp, #31
   30528:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   3052c:	40a3      	lsls	r3, r4
   3052e:	4303      	orrs	r3, r0
   30530:	462c      	mov	r4, r5
   30532:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   30536:	e76f      	b.n	30418 <nrf_realloc+0x2c>
   30538:	9c01      	ldr	r4, [sp, #4]
   3053a:	e76d      	b.n	30418 <nrf_realloc+0x2c>
   3053c:	2002cb9e 	.word	0x2002cb9e
   30540:	20023f60 	.word	0x20023f60
   30544:	20023ee0 	.word	0x20023ee0
   30548:	20023f24 	.word	0x20023f24

0003054c <nrf_shared_malloc>:
   3054c:	4b03      	ldr	r3, [pc, #12]	; (3055c <nrf_shared_malloc+0x10>)
   3054e:	781b      	ldrb	r3, [r3, #0]
   30550:	b10b      	cbz	r3, 30556 <nrf_shared_malloc+0xa>
   30552:	f7ff bbe3 	b.w	2fd1c <mem_alloc.constprop.5>
   30556:	4618      	mov	r0, r3
   30558:	4770      	bx	lr
   3055a:	bf00      	nop
   3055c:	2002cb9e 	.word	0x2002cb9e

00030560 <nrf_shared_free>:
   30560:	4b04      	ldr	r3, [pc, #16]	; (30574 <nrf_shared_free+0x14>)
   30562:	781b      	ldrb	r3, [r3, #0]
   30564:	b123      	cbz	r3, 30570 <nrf_shared_free+0x10>
   30566:	b118      	cbz	r0, 30570 <nrf_shared_free+0x10>
   30568:	4601      	mov	r1, r0
   3056a:	2001      	movs	r0, #1
   3056c:	f7ff bb6a 	b.w	2fc44 <mem_free>
   30570:	4770      	bx	lr
   30572:	bf00      	nop
   30574:	2002cb9e 	.word	0x2002cb9e

00030578 <rpc_dfu_event_handler>:
   30578:	b508      	push	{r3, lr}
   3057a:	4a08      	ldr	r2, [pc, #32]	; (3059c <rpc_dfu_event_handler+0x24>)
   3057c:	68c1      	ldr	r1, [r0, #12]
   3057e:	8812      	ldrh	r2, [r2, #0]
   30580:	4603      	mov	r3, r0
   30582:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   30586:	d005      	beq.n	30594 <rpc_dfu_event_handler+0x1c>
   30588:	6800      	ldr	r0, [r0, #0]
   3058a:	b110      	cbz	r0, 30592 <rpc_dfu_event_handler+0x1a>
   3058c:	f7fd f936 	bl	2d7fc <rpc_dfu_client_data_free>
   30590:	2000      	movs	r0, #0
   30592:	bd08      	pop	{r3, pc}
   30594:	4a02      	ldr	r2, [pc, #8]	; (305a0 <rpc_dfu_event_handler+0x28>)
   30596:	2001      	movs	r0, #1
   30598:	6013      	str	r3, [r2, #0]
   3059a:	bd08      	pop	{r3, pc}
   3059c:	2002894e 	.word	0x2002894e
   305a0:	2002407c 	.word	0x2002407c

000305a4 <mfu_interface_init>:
   305a4:	2300      	movs	r3, #0
   305a6:	b510      	push	{r4, lr}
   305a8:	4808      	ldr	r0, [pc, #32]	; (305cc <mfu_interface_init+0x28>)
   305aa:	4909      	ldr	r1, [pc, #36]	; (305d0 <mfu_interface_init+0x2c>)
   305ac:	4a09      	ldr	r2, [pc, #36]	; (305d4 <mfu_interface_init+0x30>)
   305ae:	4c0a      	ldr	r4, [pc, #40]	; (305d8 <mfu_interface_init+0x34>)
   305b0:	8003      	strh	r3, [r0, #0]
   305b2:	600b      	str	r3, [r1, #0]
   305b4:	6013      	str	r3, [r2, #0]
   305b6:	6023      	str	r3, [r4, #0]
   305b8:	f7fd f8ea 	bl	2d790 <rpc_dfu_client_init>
   305bc:	b910      	cbnz	r0, 305c4 <mfu_interface_init+0x20>
   305be:	2301      	movs	r3, #1
   305c0:	6023      	str	r3, [r4, #0]
   305c2:	bd10      	pop	{r4, pc}
   305c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   305c8:	bd10      	pop	{r4, pc}
   305ca:	bf00      	nop
   305cc:	2002894e 	.word	0x2002894e
   305d0:	2002407c 	.word	0x2002407c
   305d4:	20024078 	.word	0x20024078
   305d8:	20024070 	.word	0x20024070

000305dc <mfu_interface_open>:
   305dc:	b508      	push	{r3, lr}
   305de:	4b07      	ldr	r3, [pc, #28]	; (305fc <mfu_interface_open+0x20>)
   305e0:	681a      	ldr	r2, [r3, #0]
   305e2:	2a01      	cmp	r2, #1
   305e4:	d103      	bne.n	305ee <mfu_interface_open+0x12>
   305e6:	2202      	movs	r2, #2
   305e8:	601a      	str	r2, [r3, #0]
   305ea:	4805      	ldr	r0, [pc, #20]	; (30600 <mfu_interface_open+0x24>)
   305ec:	bd08      	pop	{r3, pc}
   305ee:	2001      	movs	r0, #1
   305f0:	f7f5 f9c4 	bl	2597c <bsd_os_errno_set>
   305f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   305f8:	bd08      	pop	{r3, pc}
   305fa:	bf00      	nop
   305fc:	20024070 	.word	0x20024070
   30600:	49765432 	.word	0x49765432

00030604 <mfu_interface_close>:
   30604:	b5f0      	push	{r4, r5, r6, r7, lr}
   30606:	4c32      	ldr	r4, [pc, #200]	; (306d0 <mfu_interface_close+0xcc>)
   30608:	b083      	sub	sp, #12
   3060a:	6823      	ldr	r3, [r4, #0]
   3060c:	1e9a      	subs	r2, r3, #2
   3060e:	2a01      	cmp	r2, #1
   30610:	d857      	bhi.n	306c2 <mfu_interface_close+0xbe>
   30612:	2b03      	cmp	r3, #3
   30614:	d004      	beq.n	30620 <mfu_interface_close+0x1c>
   30616:	2301      	movs	r3, #1
   30618:	2000      	movs	r0, #0
   3061a:	6023      	str	r3, [r4, #0]
   3061c:	b003      	add	sp, #12
   3061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30620:	2100      	movs	r1, #0
   30622:	4668      	mov	r0, sp
   30624:	f7fd f8ba 	bl	2d79c <rpc_dfu_client_request_alloc>
   30628:	4603      	mov	r3, r0
   3062a:	2800      	cmp	r0, #0
   3062c:	d13d      	bne.n	306aa <mfu_interface_close+0xa6>
   3062e:	2104      	movs	r1, #4
   30630:	4e28      	ldr	r6, [pc, #160]	; (306d4 <mfu_interface_close+0xd0>)
   30632:	9800      	ldr	r0, [sp, #0]
   30634:	8832      	ldrh	r2, [r6, #0]
   30636:	7201      	strb	r1, [r0, #8]
   30638:	3201      	adds	r2, #1
   3063a:	b292      	uxth	r2, r2
   3063c:	0411      	lsls	r1, r2, #16
   3063e:	f041 0106 	orr.w	r1, r1, #6
   30642:	4d25      	ldr	r5, [pc, #148]	; (306d8 <mfu_interface_close+0xd4>)
   30644:	60c1      	str	r1, [r0, #12]
   30646:	7103      	strb	r3, [r0, #4]
   30648:	7143      	strb	r3, [r0, #5]
   3064a:	7183      	strb	r3, [r0, #6]
   3064c:	71c3      	strb	r3, [r0, #7]
   3064e:	7243      	strb	r3, [r0, #9]
   30650:	7283      	strb	r3, [r0, #10]
   30652:	72c3      	strb	r3, [r0, #11]
   30654:	2106      	movs	r1, #6
   30656:	8032      	strh	r2, [r6, #0]
   30658:	602b      	str	r3, [r5, #0]
   3065a:	f7fd f8b3 	bl	2d7c4 <rpc_dfu_client_request_send>
   3065e:	b9d8      	cbnz	r0, 30698 <mfu_interface_close+0x94>
   30660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30664:	ae02      	add	r6, sp, #8
   30666:	4627      	mov	r7, r4
   30668:	f846 3d04 	str.w	r3, [r6, #-4]!
   3066c:	e004      	b.n	30678 <mfu_interface_close+0x74>
   3066e:	4631      	mov	r1, r6
   30670:	4638      	mov	r0, r7
   30672:	f7f5 f8cb 	bl	2580c <bsd_os_timedwait>
   30676:	b9f0      	cbnz	r0, 306b6 <mfu_interface_close+0xb2>
   30678:	6828      	ldr	r0, [r5, #0]
   3067a:	2800      	cmp	r0, #0
   3067c:	d0f7      	beq.n	3066e <mfu_interface_close+0x6a>
   3067e:	6905      	ldr	r5, [r0, #16]
   30680:	f7fd f8b4 	bl	2d7ec <rpc_dfu_client_message_free>
   30684:	2d00      	cmp	r5, #0
   30686:	d0c6      	beq.n	30616 <mfu_interface_close+0x12>
   30688:	4b14      	ldr	r3, [pc, #80]	; (306dc <mfu_interface_close+0xd8>)
   3068a:	2008      	movs	r0, #8
   3068c:	601d      	str	r5, [r3, #0]
   3068e:	f7f5 f975 	bl	2597c <bsd_os_errno_set>
   30692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30696:	e7c1      	b.n	3061c <mfu_interface_close+0x18>
   30698:	9800      	ldr	r0, [sp, #0]
   3069a:	6803      	ldr	r3, [r0, #0]
   3069c:	b11b      	cbz	r3, 306a6 <mfu_interface_close+0xa2>
   3069e:	4618      	mov	r0, r3
   306a0:	f7fd f8ac 	bl	2d7fc <rpc_dfu_client_data_free>
   306a4:	9800      	ldr	r0, [sp, #0]
   306a6:	f7fd f8a1 	bl	2d7ec <rpc_dfu_client_message_free>
   306aa:	200c      	movs	r0, #12
   306ac:	f7f5 f966 	bl	2597c <bsd_os_errno_set>
   306b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   306b4:	e7b2      	b.n	3061c <mfu_interface_close+0x18>
   306b6:	203c      	movs	r0, #60	; 0x3c
   306b8:	f7f5 f960 	bl	2597c <bsd_os_errno_set>
   306bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   306c0:	e7ac      	b.n	3061c <mfu_interface_close+0x18>
   306c2:	2001      	movs	r0, #1
   306c4:	f7f5 f95a 	bl	2597c <bsd_os_errno_set>
   306c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   306cc:	e7a6      	b.n	3061c <mfu_interface_close+0x18>
   306ce:	bf00      	nop
   306d0:	20024070 	.word	0x20024070
   306d4:	2002894e 	.word	0x2002894e
   306d8:	2002407c 	.word	0x2002407c
   306dc:	20024074 	.word	0x20024074

000306e0 <mfu_interface_sendto>:
   306e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   306e4:	4e64      	ldr	r6, [pc, #400]	; (30878 <mfu_interface_sendto+0x198>)
   306e6:	460f      	mov	r7, r1
   306e8:	6831      	ldr	r1, [r6, #0]
   306ea:	4615      	mov	r5, r2
   306ec:	1e8a      	subs	r2, r1, #2
   306ee:	2a01      	cmp	r2, #1
   306f0:	b082      	sub	sp, #8
   306f2:	f200 80b4 	bhi.w	3085e <mfu_interface_sendto+0x17e>
   306f6:	2f00      	cmp	r7, #0
   306f8:	f000 80a5 	beq.w	30846 <mfu_interface_sendto+0x166>
   306fc:	2d00      	cmp	r5, #0
   306fe:	f000 80a2 	beq.w	30846 <mfu_interface_sendto+0x166>
   30702:	2b00      	cmp	r3, #0
   30704:	f040 80b1 	bne.w	3086a <mfu_interface_sendto+0x18a>
   30708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3070a:	2b00      	cmp	r3, #0
   3070c:	f040 80a1 	bne.w	30852 <mfu_interface_sendto+0x172>
   30710:	2902      	cmp	r1, #2
   30712:	d04f      	beq.n	307b4 <mfu_interface_sendto+0xd4>
   30714:	46e8      	mov	r8, sp
   30716:	4640      	mov	r0, r8
   30718:	4629      	mov	r1, r5
   3071a:	f7fd f83f 	bl	2d79c <rpc_dfu_client_request_alloc>
   3071e:	4606      	mov	r6, r0
   30720:	b140      	cbz	r0, 30734 <mfu_interface_sendto+0x54>
   30722:	200c      	movs	r0, #12
   30724:	f7f5 f92a 	bl	2597c <bsd_os_errno_set>
   30728:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3072c:	4628      	mov	r0, r5
   3072e:	b002      	add	sp, #8
   30730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30734:	9b00      	ldr	r3, [sp, #0]
   30736:	4639      	mov	r1, r7
   30738:	6818      	ldr	r0, [r3, #0]
   3073a:	462a      	mov	r2, r5
   3073c:	f006 fe61 	bl	37402 <memcpy>
   30740:	2104      	movs	r1, #4
   30742:	4c4e      	ldr	r4, [pc, #312]	; (3087c <mfu_interface_sendto+0x19c>)
   30744:	9800      	ldr	r0, [sp, #0]
   30746:	8823      	ldrh	r3, [r4, #0]
   30748:	6045      	str	r5, [r0, #4]
   3074a:	3301      	adds	r3, #1
   3074c:	b29b      	uxth	r3, r3
   3074e:	041a      	lsls	r2, r3, #16
   30750:	8023      	strh	r3, [r4, #0]
   30752:	430a      	orrs	r2, r1
   30754:	4c4a      	ldr	r4, [pc, #296]	; (30880 <mfu_interface_sendto+0x1a0>)
   30756:	60c2      	str	r2, [r0, #12]
   30758:	7246      	strb	r6, [r0, #9]
   3075a:	7286      	strb	r6, [r0, #10]
   3075c:	72c6      	strb	r6, [r0, #11]
   3075e:	7201      	strb	r1, [r0, #8]
   30760:	6026      	str	r6, [r4, #0]
   30762:	f7fd f82f 	bl	2d7c4 <rpc_dfu_client_request_send>
   30766:	2800      	cmp	r0, #0
   30768:	d163      	bne.n	30832 <mfu_interface_sendto+0x152>
   3076a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3076e:	ae02      	add	r6, sp, #8
   30770:	4f41      	ldr	r7, [pc, #260]	; (30878 <mfu_interface_sendto+0x198>)
   30772:	f846 3d04 	str.w	r3, [r6, #-4]!
   30776:	e004      	b.n	30782 <mfu_interface_sendto+0xa2>
   30778:	4631      	mov	r1, r6
   3077a:	4638      	mov	r0, r7
   3077c:	f7f5 f846 	bl	2580c <bsd_os_timedwait>
   30780:	b978      	cbnz	r0, 307a2 <mfu_interface_sendto+0xc2>
   30782:	6820      	ldr	r0, [r4, #0]
   30784:	2800      	cmp	r0, #0
   30786:	d0f7      	beq.n	30778 <mfu_interface_sendto+0x98>
   30788:	6904      	ldr	r4, [r0, #16]
   3078a:	f7fd f82f 	bl	2d7ec <rpc_dfu_client_message_free>
   3078e:	2c00      	cmp	r4, #0
   30790:	d0cc      	beq.n	3072c <mfu_interface_sendto+0x4c>
   30792:	4b3c      	ldr	r3, [pc, #240]	; (30884 <mfu_interface_sendto+0x1a4>)
   30794:	2008      	movs	r0, #8
   30796:	601c      	str	r4, [r3, #0]
   30798:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3079c:	f7f5 f8ee 	bl	2597c <bsd_os_errno_set>
   307a0:	e7c4      	b.n	3072c <mfu_interface_sendto+0x4c>
   307a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   307a6:	203c      	movs	r0, #60	; 0x3c
   307a8:	f7f5 f8e8 	bl	2597c <bsd_os_errno_set>
   307ac:	4628      	mov	r0, r5
   307ae:	b002      	add	sp, #8
   307b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   307b4:	46e8      	mov	r8, sp
   307b6:	4619      	mov	r1, r3
   307b8:	4640      	mov	r0, r8
   307ba:	f7fc ffef 	bl	2d79c <rpc_dfu_client_request_alloc>
   307be:	4602      	mov	r2, r0
   307c0:	2800      	cmp	r0, #0
   307c2:	d1ae      	bne.n	30722 <mfu_interface_sendto+0x42>
   307c4:	f04f 0c08 	mov.w	ip, #8
   307c8:	492c      	ldr	r1, [pc, #176]	; (3087c <mfu_interface_sendto+0x19c>)
   307ca:	482f      	ldr	r0, [pc, #188]	; (30888 <mfu_interface_sendto+0x1a8>)
   307cc:	880b      	ldrh	r3, [r1, #0]
   307ce:	6804      	ldr	r4, [r0, #0]
   307d0:	3301      	adds	r3, #1
   307d2:	9800      	ldr	r0, [sp, #0]
   307d4:	b29b      	uxth	r3, r3
   307d6:	800b      	strh	r3, [r1, #0]
   307d8:	041b      	lsls	r3, r3, #16
   307da:	f043 0303 	orr.w	r3, r3, #3
   307de:	6104      	str	r4, [r0, #16]
   307e0:	4c27      	ldr	r4, [pc, #156]	; (30880 <mfu_interface_sendto+0x1a0>)
   307e2:	60c3      	str	r3, [r0, #12]
   307e4:	7102      	strb	r2, [r0, #4]
   307e6:	7142      	strb	r2, [r0, #5]
   307e8:	7182      	strb	r2, [r0, #6]
   307ea:	71c2      	strb	r2, [r0, #7]
   307ec:	7242      	strb	r2, [r0, #9]
   307ee:	7282      	strb	r2, [r0, #10]
   307f0:	72c2      	strb	r2, [r0, #11]
   307f2:	f880 c008 	strb.w	ip, [r0, #8]
   307f6:	2103      	movs	r1, #3
   307f8:	6022      	str	r2, [r4, #0]
   307fa:	f7fc ffe3 	bl	2d7c4 <rpc_dfu_client_request_send>
   307fe:	b9c0      	cbnz	r0, 30832 <mfu_interface_sendto+0x152>
   30800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30804:	f10d 0908 	add.w	r9, sp, #8
   30808:	f849 3d04 	str.w	r3, [r9, #-4]!
   3080c:	46b2      	mov	sl, r6
   3080e:	e005      	b.n	3081c <mfu_interface_sendto+0x13c>
   30810:	4649      	mov	r1, r9
   30812:	4650      	mov	r0, sl
   30814:	f7f4 fffa 	bl	2580c <bsd_os_timedwait>
   30818:	2800      	cmp	r0, #0
   3081a:	d1c2      	bne.n	307a2 <mfu_interface_sendto+0xc2>
   3081c:	6820      	ldr	r0, [r4, #0]
   3081e:	2800      	cmp	r0, #0
   30820:	d0f6      	beq.n	30810 <mfu_interface_sendto+0x130>
   30822:	6904      	ldr	r4, [r0, #16]
   30824:	f7fc ffe2 	bl	2d7ec <rpc_dfu_client_message_free>
   30828:	2c00      	cmp	r4, #0
   3082a:	d1b2      	bne.n	30792 <mfu_interface_sendto+0xb2>
   3082c:	2303      	movs	r3, #3
   3082e:	6033      	str	r3, [r6, #0]
   30830:	e771      	b.n	30716 <mfu_interface_sendto+0x36>
   30832:	9800      	ldr	r0, [sp, #0]
   30834:	6803      	ldr	r3, [r0, #0]
   30836:	b11b      	cbz	r3, 30840 <mfu_interface_sendto+0x160>
   30838:	4618      	mov	r0, r3
   3083a:	f7fc ffdf 	bl	2d7fc <rpc_dfu_client_data_free>
   3083e:	9800      	ldr	r0, [sp, #0]
   30840:	f7fc ffd4 	bl	2d7ec <rpc_dfu_client_message_free>
   30844:	e76d      	b.n	30722 <mfu_interface_sendto+0x42>
   30846:	2016      	movs	r0, #22
   30848:	f7f5 f898 	bl	2597c <bsd_os_errno_set>
   3084c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   30850:	e76c      	b.n	3072c <mfu_interface_sendto+0x4c>
   30852:	2038      	movs	r0, #56	; 0x38
   30854:	f7f5 f892 	bl	2597c <bsd_os_errno_set>
   30858:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3085c:	e766      	b.n	3072c <mfu_interface_sendto+0x4c>
   3085e:	2001      	movs	r0, #1
   30860:	f7f5 f88c 	bl	2597c <bsd_os_errno_set>
   30864:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   30868:	e760      	b.n	3072c <mfu_interface_sendto+0x4c>
   3086a:	202d      	movs	r0, #45	; 0x2d
   3086c:	f7f5 f886 	bl	2597c <bsd_os_errno_set>
   30870:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   30874:	e75a      	b.n	3072c <mfu_interface_sendto+0x4c>
   30876:	bf00      	nop
   30878:	20024070 	.word	0x20024070
   3087c:	2002894e 	.word	0x2002894e
   30880:	2002407c 	.word	0x2002407c
   30884:	20024074 	.word	0x20024074
   30888:	20024078 	.word	0x20024078

0003088c <mfu_interface_setopt>:
   3088c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3088e:	4846      	ldr	r0, [pc, #280]	; (309a8 <mfu_interface_setopt+0x11c>)
   30890:	b083      	sub	sp, #12
   30892:	6800      	ldr	r0, [r0, #0]
   30894:	3802      	subs	r0, #2
   30896:	2801      	cmp	r0, #1
   30898:	d877      	bhi.n	3098a <mfu_interface_setopt+0xfe>
   3089a:	f240 2003 	movw	r0, #515	; 0x203
   3089e:	4281      	cmp	r1, r0
   308a0:	d16d      	bne.n	3097e <mfu_interface_setopt+0xf2>
   308a2:	3a04      	subs	r2, #4
   308a4:	2a03      	cmp	r2, #3
   308a6:	d85c      	bhi.n	30962 <mfu_interface_setopt+0xd6>
   308a8:	e8df f002 	tbb	[pc, r2]
   308ac:	514e024b 	.word	0x514e024b
   308b0:	2407      	movs	r4, #7
   308b2:	4625      	mov	r5, r4
   308b4:	2100      	movs	r1, #0
   308b6:	4668      	mov	r0, sp
   308b8:	f7fc ff70 	bl	2d79c <rpc_dfu_client_request_alloc>
   308bc:	4603      	mov	r3, r0
   308be:	2800      	cmp	r0, #0
   308c0:	d138      	bne.n	30934 <mfu_interface_setopt+0xa8>
   308c2:	2704      	movs	r7, #4
   308c4:	4e39      	ldr	r6, [pc, #228]	; (309ac <mfu_interface_setopt+0x120>)
   308c6:	9800      	ldr	r0, [sp, #0]
   308c8:	8832      	ldrh	r2, [r6, #0]
   308ca:	4629      	mov	r1, r5
   308cc:	3201      	adds	r2, #1
   308ce:	b292      	uxth	r2, r2
   308d0:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   308d4:	4c36      	ldr	r4, [pc, #216]	; (309b0 <mfu_interface_setopt+0x124>)
   308d6:	60c5      	str	r5, [r0, #12]
   308d8:	7103      	strb	r3, [r0, #4]
   308da:	7143      	strb	r3, [r0, #5]
   308dc:	7183      	strb	r3, [r0, #6]
   308de:	71c3      	strb	r3, [r0, #7]
   308e0:	7243      	strb	r3, [r0, #9]
   308e2:	7283      	strb	r3, [r0, #10]
   308e4:	72c3      	strb	r3, [r0, #11]
   308e6:	7207      	strb	r7, [r0, #8]
   308e8:	8032      	strh	r2, [r6, #0]
   308ea:	6023      	str	r3, [r4, #0]
   308ec:	f7fc ff6a 	bl	2d7c4 <rpc_dfu_client_request_send>
   308f0:	b9b8      	cbnz	r0, 30922 <mfu_interface_setopt+0x96>
   308f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   308f6:	ad02      	add	r5, sp, #8
   308f8:	4e2b      	ldr	r6, [pc, #172]	; (309a8 <mfu_interface_setopt+0x11c>)
   308fa:	f845 3d04 	str.w	r3, [r5, #-4]!
   308fe:	e005      	b.n	3090c <mfu_interface_setopt+0x80>
   30900:	4629      	mov	r1, r5
   30902:	4630      	mov	r0, r6
   30904:	f7f4 ff82 	bl	2580c <bsd_os_timedwait>
   30908:	2800      	cmp	r0, #0
   3090a:	d131      	bne.n	30970 <mfu_interface_setopt+0xe4>
   3090c:	6820      	ldr	r0, [r4, #0]
   3090e:	2800      	cmp	r0, #0
   30910:	d0f6      	beq.n	30900 <mfu_interface_setopt+0x74>
   30912:	6904      	ldr	r4, [r0, #16]
   30914:	f7fc ff6a 	bl	2d7ec <rpc_dfu_client_message_free>
   30918:	2c00      	cmp	r4, #0
   3091a:	d13c      	bne.n	30996 <mfu_interface_setopt+0x10a>
   3091c:	4620      	mov	r0, r4
   3091e:	b003      	add	sp, #12
   30920:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30922:	9800      	ldr	r0, [sp, #0]
   30924:	6803      	ldr	r3, [r0, #0]
   30926:	b11b      	cbz	r3, 30930 <mfu_interface_setopt+0xa4>
   30928:	4618      	mov	r0, r3
   3092a:	f7fc ff67 	bl	2d7fc <rpc_dfu_client_data_free>
   3092e:	9800      	ldr	r0, [sp, #0]
   30930:	f7fc ff5c 	bl	2d7ec <rpc_dfu_client_message_free>
   30934:	200c      	movs	r0, #12
   30936:	f7f5 f821 	bl	2597c <bsd_os_errno_set>
   3093a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3093e:	b003      	add	sp, #12
   30940:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30942:	2405      	movs	r4, #5
   30944:	4625      	mov	r5, r4
   30946:	e7b5      	b.n	308b4 <mfu_interface_setopt+0x28>
   30948:	2408      	movs	r4, #8
   3094a:	4625      	mov	r5, r4
   3094c:	e7b2      	b.n	308b4 <mfu_interface_setopt+0x28>
   3094e:	b1b3      	cbz	r3, 3097e <mfu_interface_setopt+0xf2>
   30950:	9a08      	ldr	r2, [sp, #32]
   30952:	2a04      	cmp	r2, #4
   30954:	d113      	bne.n	3097e <mfu_interface_setopt+0xf2>
   30956:	2000      	movs	r0, #0
   30958:	681a      	ldr	r2, [r3, #0]
   3095a:	4b16      	ldr	r3, [pc, #88]	; (309b4 <mfu_interface_setopt+0x128>)
   3095c:	601a      	str	r2, [r3, #0]
   3095e:	b003      	add	sp, #12
   30960:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30962:	202a      	movs	r0, #42	; 0x2a
   30964:	f7f5 f80a 	bl	2597c <bsd_os_errno_set>
   30968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3096c:	b003      	add	sp, #12
   3096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30970:	203c      	movs	r0, #60	; 0x3c
   30972:	f7f5 f803 	bl	2597c <bsd_os_errno_set>
   30976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3097a:	b003      	add	sp, #12
   3097c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3097e:	2016      	movs	r0, #22
   30980:	f7f4 fffc 	bl	2597c <bsd_os_errno_set>
   30984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30988:	e7c9      	b.n	3091e <mfu_interface_setopt+0x92>
   3098a:	2001      	movs	r0, #1
   3098c:	f7f4 fff6 	bl	2597c <bsd_os_errno_set>
   30990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30994:	e7c3      	b.n	3091e <mfu_interface_setopt+0x92>
   30996:	4b08      	ldr	r3, [pc, #32]	; (309b8 <mfu_interface_setopt+0x12c>)
   30998:	2008      	movs	r0, #8
   3099a:	601c      	str	r4, [r3, #0]
   3099c:	f7f4 ffee 	bl	2597c <bsd_os_errno_set>
   309a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   309a4:	e7bb      	b.n	3091e <mfu_interface_setopt+0x92>
   309a6:	bf00      	nop
   309a8:	20024070 	.word	0x20024070
   309ac:	2002894e 	.word	0x2002894e
   309b0:	2002407c 	.word	0x2002407c
   309b4:	20024078 	.word	0x20024078
   309b8:	20024074 	.word	0x20024074

000309bc <mfu_interface_getopt>:
   309bc:	f240 2003 	movw	r0, #515	; 0x203
   309c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   309c4:	4281      	cmp	r1, r0
   309c6:	b082      	sub	sp, #8
   309c8:	9e08      	ldr	r6, [sp, #32]
   309ca:	f040 80ae 	bne.w	30b2a <mfu_interface_getopt+0x16e>
   309ce:	461d      	mov	r5, r3
   309d0:	2b00      	cmp	r3, #0
   309d2:	f000 80aa 	beq.w	30b2a <mfu_interface_getopt+0x16e>
   309d6:	2e00      	cmp	r6, #0
   309d8:	f000 80a7 	beq.w	30b2a <mfu_interface_getopt+0x16e>
   309dc:	4b5e      	ldr	r3, [pc, #376]	; (30b58 <mfu_interface_getopt+0x19c>)
   309de:	681b      	ldr	r3, [r3, #0]
   309e0:	3b02      	subs	r3, #2
   309e2:	2b01      	cmp	r3, #1
   309e4:	f200 80a7 	bhi.w	30b36 <mfu_interface_getopt+0x17a>
   309e8:	3a01      	subs	r2, #1
   309ea:	2a13      	cmp	r2, #19
   309ec:	d879      	bhi.n	30ae2 <mfu_interface_getopt+0x126>
   309ee:	e8df f002 	tbb	[pc, r2]
   309f2:	5f17      	.short	0x5f17
   309f4:	78787878 	.word	0x78787878
   309f8:	78787872 	.word	0x78787872
   309fc:	78787878 	.word	0x78787878
   30a00:	78787878 	.word	0x78787878
   30a04:	0a78      	.short	0x0a78
   30a06:	6833      	ldr	r3, [r6, #0]
   30a08:	2b04      	cmp	r3, #4
   30a0a:	f040 808e 	bne.w	30b2a <mfu_interface_getopt+0x16e>
   30a0e:	2200      	movs	r2, #0
   30a10:	4610      	mov	r0, r2
   30a12:	4b52      	ldr	r3, [pc, #328]	; (30b5c <mfu_interface_getopt+0x1a0>)
   30a14:	6819      	ldr	r1, [r3, #0]
   30a16:	601a      	str	r2, [r3, #0]
   30a18:	6029      	str	r1, [r5, #0]
   30a1a:	b002      	add	sp, #8
   30a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30a20:	6833      	ldr	r3, [r6, #0]
   30a22:	2b24      	cmp	r3, #36	; 0x24
   30a24:	f040 8081 	bne.w	30b2a <mfu_interface_getopt+0x16e>
   30a28:	2401      	movs	r4, #1
   30a2a:	46a0      	mov	r8, r4
   30a2c:	2100      	movs	r1, #0
   30a2e:	4668      	mov	r0, sp
   30a30:	f7fc feb4 	bl	2d79c <rpc_dfu_client_request_alloc>
   30a34:	2800      	cmp	r0, #0
   30a36:	d146      	bne.n	30ac6 <mfu_interface_getopt+0x10a>
   30a38:	4949      	ldr	r1, [pc, #292]	; (30b60 <mfu_interface_getopt+0x1a4>)
   30a3a:	9b00      	ldr	r3, [sp, #0]
   30a3c:	880a      	ldrh	r2, [r1, #0]
   30a3e:	f1b8 0f03 	cmp.w	r8, #3
   30a42:	f102 0201 	add.w	r2, r2, #1
   30a46:	b292      	uxth	r2, r2
   30a48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   30a4c:	7118      	strb	r0, [r3, #4]
   30a4e:	800a      	strh	r2, [r1, #0]
   30a50:	60dc      	str	r4, [r3, #12]
   30a52:	7158      	strb	r0, [r3, #5]
   30a54:	7198      	strb	r0, [r3, #6]
   30a56:	71d8      	strb	r0, [r3, #7]
   30a58:	d04b      	beq.n	30af2 <mfu_interface_getopt+0x136>
   30a5a:	2104      	movs	r1, #4
   30a5c:	2200      	movs	r2, #0
   30a5e:	4f41      	ldr	r7, [pc, #260]	; (30b64 <mfu_interface_getopt+0x1a8>)
   30a60:	6099      	str	r1, [r3, #8]
   30a62:	4618      	mov	r0, r3
   30a64:	4641      	mov	r1, r8
   30a66:	603a      	str	r2, [r7, #0]
   30a68:	f7fc feac 	bl	2d7c4 <rpc_dfu_client_request_send>
   30a6c:	2800      	cmp	r0, #0
   30a6e:	d14d      	bne.n	30b0c <mfu_interface_getopt+0x150>
   30a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30a74:	ac02      	add	r4, sp, #8
   30a76:	f844 3d04 	str.w	r3, [r4, #-4]!
   30a7a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 30b58 <mfu_interface_getopt+0x19c>
   30a7e:	e005      	b.n	30a8c <mfu_interface_getopt+0xd0>
   30a80:	4621      	mov	r1, r4
   30a82:	4640      	mov	r0, r8
   30a84:	f7f4 fec2 	bl	2580c <bsd_os_timedwait>
   30a88:	2800      	cmp	r0, #0
   30a8a:	d137      	bne.n	30afc <mfu_interface_getopt+0x140>
   30a8c:	6839      	ldr	r1, [r7, #0]
   30a8e:	2900      	cmp	r1, #0
   30a90:	d0f6      	beq.n	30a80 <mfu_interface_getopt+0xc4>
   30a92:	690c      	ldr	r4, [r1, #16]
   30a94:	2c00      	cmp	r4, #0
   30a96:	d154      	bne.n	30b42 <mfu_interface_getopt+0x186>
   30a98:	6832      	ldr	r2, [r6, #0]
   30a9a:	3114      	adds	r1, #20
   30a9c:	4628      	mov	r0, r5
   30a9e:	f006 fcb0 	bl	37402 <memcpy>
   30aa2:	6838      	ldr	r0, [r7, #0]
   30aa4:	f7fc fea2 	bl	2d7ec <rpc_dfu_client_message_free>
   30aa8:	4620      	mov	r0, r4
   30aaa:	b002      	add	sp, #8
   30aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30ab0:	6833      	ldr	r3, [r6, #0]
   30ab2:	2b04      	cmp	r3, #4
   30ab4:	d139      	bne.n	30b2a <mfu_interface_getopt+0x16e>
   30ab6:	2402      	movs	r4, #2
   30ab8:	2100      	movs	r1, #0
   30aba:	4668      	mov	r0, sp
   30abc:	46a0      	mov	r8, r4
   30abe:	f7fc fe6d 	bl	2d79c <rpc_dfu_client_request_alloc>
   30ac2:	2800      	cmp	r0, #0
   30ac4:	d0b8      	beq.n	30a38 <mfu_interface_getopt+0x7c>
   30ac6:	200c      	movs	r0, #12
   30ac8:	f7f4 ff58 	bl	2597c <bsd_os_errno_set>
   30acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30ad0:	b002      	add	sp, #8
   30ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30ad6:	6833      	ldr	r3, [r6, #0]
   30ad8:	2b04      	cmp	r3, #4
   30ada:	d126      	bne.n	30b2a <mfu_interface_getopt+0x16e>
   30adc:	2409      	movs	r4, #9
   30ade:	46a0      	mov	r8, r4
   30ae0:	e7a4      	b.n	30a2c <mfu_interface_getopt+0x70>
   30ae2:	202a      	movs	r0, #42	; 0x2a
   30ae4:	f7f4 ff4a 	bl	2597c <bsd_os_errno_set>
   30ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30aec:	b002      	add	sp, #8
   30aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30af2:	4a1d      	ldr	r2, [pc, #116]	; (30b68 <mfu_interface_getopt+0x1ac>)
   30af4:	2108      	movs	r1, #8
   30af6:	6812      	ldr	r2, [r2, #0]
   30af8:	611a      	str	r2, [r3, #16]
   30afa:	e7af      	b.n	30a5c <mfu_interface_getopt+0xa0>
   30afc:	203c      	movs	r0, #60	; 0x3c
   30afe:	f7f4 ff3d 	bl	2597c <bsd_os_errno_set>
   30b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30b06:	b002      	add	sp, #8
   30b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30b0c:	9800      	ldr	r0, [sp, #0]
   30b0e:	6803      	ldr	r3, [r0, #0]
   30b10:	b11b      	cbz	r3, 30b1a <mfu_interface_getopt+0x15e>
   30b12:	4618      	mov	r0, r3
   30b14:	f7fc fe72 	bl	2d7fc <rpc_dfu_client_data_free>
   30b18:	9800      	ldr	r0, [sp, #0]
   30b1a:	f7fc fe67 	bl	2d7ec <rpc_dfu_client_message_free>
   30b1e:	200c      	movs	r0, #12
   30b20:	f7f4 ff2c 	bl	2597c <bsd_os_errno_set>
   30b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30b28:	e7d2      	b.n	30ad0 <mfu_interface_getopt+0x114>
   30b2a:	2016      	movs	r0, #22
   30b2c:	f7f4 ff26 	bl	2597c <bsd_os_errno_set>
   30b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30b34:	e771      	b.n	30a1a <mfu_interface_getopt+0x5e>
   30b36:	2001      	movs	r0, #1
   30b38:	f7f4 ff20 	bl	2597c <bsd_os_errno_set>
   30b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30b40:	e76b      	b.n	30a1a <mfu_interface_getopt+0x5e>
   30b42:	4b06      	ldr	r3, [pc, #24]	; (30b5c <mfu_interface_getopt+0x1a0>)
   30b44:	2008      	movs	r0, #8
   30b46:	601c      	str	r4, [r3, #0]
   30b48:	f7f4 ff18 	bl	2597c <bsd_os_errno_set>
   30b4c:	6838      	ldr	r0, [r7, #0]
   30b4e:	f7fc fe4d 	bl	2d7ec <rpc_dfu_client_message_free>
   30b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30b56:	e760      	b.n	30a1a <mfu_interface_getopt+0x5e>
   30b58:	20024070 	.word	0x20024070
   30b5c:	20024074 	.word	0x20024074
   30b60:	2002894e 	.word	0x2002894e
   30b64:	2002407c 	.word	0x2002407c
   30b68:	20024078 	.word	0x20024078

00030b6c <interface_init>:
   30b6c:	b508      	push	{r3, lr}
   30b6e:	f44f 72b4 	mov.w	r2, #360	; 0x168
   30b72:	2100      	movs	r1, #0
   30b74:	4802      	ldr	r0, [pc, #8]	; (30b80 <interface_init+0x14>)
   30b76:	f006 fc64 	bl	37442 <memset>
   30b7a:	2000      	movs	r0, #0
   30b7c:	bd08      	pop	{r3, pc}
   30b7e:	bf00      	nop
   30b80:	2002cba0 	.word	0x2002cba0

00030b84 <interface_socket_allocate>:
   30b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30b86:	4b30      	ldr	r3, [pc, #192]	; (30c48 <interface_socket_allocate+0xc4>)
   30b88:	4606      	mov	r6, r0
   30b8a:	681d      	ldr	r5, [r3, #0]
   30b8c:	4608      	mov	r0, r1
   30b8e:	b31d      	cbz	r5, 30bd8 <interface_socket_allocate+0x54>
   30b90:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   30b92:	2c00      	cmp	r4, #0
   30b94:	d04a      	beq.n	30c2c <interface_socket_allocate+0xa8>
   30b96:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   30b98:	2c00      	cmp	r4, #0
   30b9a:	d049      	beq.n	30c30 <interface_socket_allocate+0xac>
   30b9c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   30b9e:	2c00      	cmp	r4, #0
   30ba0:	d048      	beq.n	30c34 <interface_socket_allocate+0xb0>
   30ba2:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   30ba6:	2900      	cmp	r1, #0
   30ba8:	d046      	beq.n	30c38 <interface_socket_allocate+0xb4>
   30baa:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   30bae:	b191      	cbz	r1, 30bd6 <interface_socket_allocate+0x52>
   30bb0:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   30bb4:	2900      	cmp	r1, #0
   30bb6:	d043      	beq.n	30c40 <interface_socket_allocate+0xbc>
   30bb8:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   30bbc:	2900      	cmp	r1, #0
   30bbe:	d041      	beq.n	30c44 <interface_socket_allocate+0xc0>
   30bc0:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   30bc4:	2900      	cmp	r1, #0
   30bc6:	d039      	beq.n	30c3c <interface_socket_allocate+0xb8>
   30bc8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   30bcc:	2069      	movs	r0, #105	; 0x69
   30bce:	f7f4 fed5 	bl	2597c <bsd_os_errno_set>
   30bd2:	4628      	mov	r0, r5
   30bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30bd6:	2505      	movs	r5, #5
   30bd8:	f04f 0c01 	mov.w	ip, #1
   30bdc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   30be0:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   30be4:	00e4      	lsls	r4, r4, #3
   30be6:	f843 c004 	str.w	ip, [r3, r4]
   30bea:	441c      	add	r4, r3
   30bec:	4611      	mov	r1, r2
   30bee:	61a7      	str	r7, [r4, #24]
   30bf0:	4622      	mov	r2, r4
   30bf2:	f7fe feeb 	bl	2f9cc <packet_handler_create>
   30bf6:	4603      	mov	r3, r0
   30bf8:	61e0      	str	r0, [r4, #28]
   30bfa:	b158      	cbz	r0, 30c14 <interface_socket_allocate+0x90>
   30bfc:	681b      	ldr	r3, [r3, #0]
   30bfe:	681b      	ldr	r3, [r3, #0]
   30c00:	4798      	blx	r3
   30c02:	b910      	cbnz	r0, 30c0a <interface_socket_allocate+0x86>
   30c04:	6034      	str	r4, [r6, #0]
   30c06:	4628      	mov	r0, r5
   30c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30c0a:	69e0      	ldr	r0, [r4, #28]
   30c0c:	f7fe fefe 	bl	2fa0c <packet_handler_delete>
   30c10:	2300      	movs	r3, #0
   30c12:	61e3      	str	r3, [r4, #28]
   30c14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   30c18:	2228      	movs	r2, #40	; 0x28
   30c1a:	2100      	movs	r1, #0
   30c1c:	4620      	mov	r0, r4
   30c1e:	f006 fc10 	bl	37442 <memset>
   30c22:	200c      	movs	r0, #12
   30c24:	f7f4 feaa 	bl	2597c <bsd_os_errno_set>
   30c28:	4628      	mov	r0, r5
   30c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30c2c:	2501      	movs	r5, #1
   30c2e:	e7d3      	b.n	30bd8 <interface_socket_allocate+0x54>
   30c30:	2502      	movs	r5, #2
   30c32:	e7d1      	b.n	30bd8 <interface_socket_allocate+0x54>
   30c34:	2503      	movs	r5, #3
   30c36:	e7cf      	b.n	30bd8 <interface_socket_allocate+0x54>
   30c38:	2504      	movs	r5, #4
   30c3a:	e7cd      	b.n	30bd8 <interface_socket_allocate+0x54>
   30c3c:	2508      	movs	r5, #8
   30c3e:	e7cb      	b.n	30bd8 <interface_socket_allocate+0x54>
   30c40:	2506      	movs	r5, #6
   30c42:	e7c9      	b.n	30bd8 <interface_socket_allocate+0x54>
   30c44:	2507      	movs	r5, #7
   30c46:	e7c7      	b.n	30bd8 <interface_socket_allocate+0x54>
   30c48:	2002cba0 	.word	0x2002cba0

00030c4c <interface_socket_free>:
   30c4c:	2808      	cmp	r0, #8
   30c4e:	d900      	bls.n	30c52 <interface_socket_free+0x6>
   30c50:	4770      	bx	lr
   30c52:	b510      	push	{r4, lr}
   30c54:	4c07      	ldr	r4, [pc, #28]	; (30c74 <interface_socket_free+0x28>)
   30c56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   30c5a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   30c5e:	69e0      	ldr	r0, [r4, #28]
   30c60:	b108      	cbz	r0, 30c66 <interface_socket_free+0x1a>
   30c62:	f7fe fed3 	bl	2fa0c <packet_handler_delete>
   30c66:	4620      	mov	r0, r4
   30c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30c6c:	2228      	movs	r2, #40	; 0x28
   30c6e:	2100      	movs	r1, #0
   30c70:	f006 bbe7 	b.w	37442 <memset>
   30c74:	2002cba0 	.word	0x2002cba0

00030c78 <interface_socket_packet_handler_update>:
   30c78:	2808      	cmp	r0, #8
   30c7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30c7e:	d81e      	bhi.n	30cbe <interface_socket_packet_handler_update+0x46>
   30c80:	ea4f 0880 	mov.w	r8, r0, lsl #2
   30c84:	4e17      	ldr	r6, [pc, #92]	; (30ce4 <interface_socket_packet_handler_update+0x6c>)
   30c86:	eb08 0300 	add.w	r3, r8, r0
   30c8a:	00db      	lsls	r3, r3, #3
   30c8c:	58f4      	ldr	r4, [r6, r3]
   30c8e:	18f5      	adds	r5, r6, r3
   30c90:	b1ac      	cbz	r4, 30cbe <interface_socket_packet_handler_update+0x46>
   30c92:	460b      	mov	r3, r1
   30c94:	4604      	mov	r4, r0
   30c96:	4611      	mov	r1, r2
   30c98:	4618      	mov	r0, r3
   30c9a:	462a      	mov	r2, r5
   30c9c:	f8d5 901c 	ldr.w	r9, [r5, #28]
   30ca0:	f7fe fe94 	bl	2f9cc <packet_handler_create>
   30ca4:	61e8      	str	r0, [r5, #28]
   30ca6:	b1d0      	cbz	r0, 30cde <interface_socket_packet_handler_update+0x66>
   30ca8:	6803      	ldr	r3, [r0, #0]
   30caa:	681b      	ldr	r3, [r3, #0]
   30cac:	4798      	blx	r3
   30cae:	4607      	mov	r7, r0
   30cb0:	b948      	cbnz	r0, 30cc6 <interface_socket_packet_handler_update+0x4e>
   30cb2:	4648      	mov	r0, r9
   30cb4:	f7fe feaa 	bl	2fa0c <packet_handler_delete>
   30cb8:	4638      	mov	r0, r7
   30cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30cbe:	2705      	movs	r7, #5
   30cc0:	4638      	mov	r0, r7
   30cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30cc6:	69e8      	ldr	r0, [r5, #28]
   30cc8:	f7fe fea0 	bl	2fa0c <packet_handler_delete>
   30ccc:	eb08 0004 	add.w	r0, r8, r4
   30cd0:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   30cd4:	f8c6 901c 	str.w	r9, [r6, #28]
   30cd8:	4638      	mov	r0, r7
   30cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30cde:	2704      	movs	r7, #4
   30ce0:	e7f4      	b.n	30ccc <interface_socket_packet_handler_update+0x54>
   30ce2:	bf00      	nop
   30ce4:	2002cba0 	.word	0x2002cba0

00030ce8 <interface_socket_wait>:
   30ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30cec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   30cf0:	4c0d      	ldr	r4, [pc, #52]	; (30d28 <interface_socket_wait+0x40>)
   30cf2:	00c0      	lsls	r0, r0, #3
   30cf4:	5825      	ldr	r5, [r4, r0]
   30cf6:	4404      	add	r4, r0
   30cf8:	4015      	ands	r5, r2
   30cfa:	428d      	cmp	r5, r1
   30cfc:	d011      	beq.n	30d22 <interface_socket_wait+0x3a>
   30cfe:	6860      	ldr	r0, [r4, #4]
   30d00:	b978      	cbnz	r0, 30d22 <interface_socket_wait+0x3a>
   30d02:	4698      	mov	r8, r3
   30d04:	460f      	mov	r7, r1
   30d06:	4616      	mov	r6, r2
   30d08:	4625      	mov	r5, r4
   30d0a:	e006      	b.n	30d1a <interface_socket_wait+0x32>
   30d0c:	686b      	ldr	r3, [r5, #4]
   30d0e:	b943      	cbnz	r3, 30d22 <interface_socket_wait+0x3a>
   30d10:	4641      	mov	r1, r8
   30d12:	4620      	mov	r0, r4
   30d14:	f7f4 fd7a 	bl	2580c <bsd_os_timedwait>
   30d18:	b920      	cbnz	r0, 30d24 <interface_socket_wait+0x3c>
   30d1a:	6828      	ldr	r0, [r5, #0]
   30d1c:	4030      	ands	r0, r6
   30d1e:	42b8      	cmp	r0, r7
   30d20:	d1f4      	bne.n	30d0c <interface_socket_wait+0x24>
   30d22:	2000      	movs	r0, #0
   30d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30d28:	2002cba0 	.word	0x2002cba0

00030d2c <interface_from_internal_id_search>:
   30d2c:	4b27      	ldr	r3, [pc, #156]	; (30dcc <interface_from_internal_id_search+0xa0>)
   30d2e:	681a      	ldr	r2, [r3, #0]
   30d30:	b112      	cbz	r2, 30d38 <interface_from_internal_id_search+0xc>
   30d32:	699a      	ldr	r2, [r3, #24]
   30d34:	4282      	cmp	r2, r0
   30d36:	d039      	beq.n	30dac <interface_from_internal_id_search+0x80>
   30d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   30d3a:	b112      	cbz	r2, 30d42 <interface_from_internal_id_search+0x16>
   30d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   30d3e:	4282      	cmp	r2, r0
   30d40:	d036      	beq.n	30db0 <interface_from_internal_id_search+0x84>
   30d42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   30d44:	b112      	cbz	r2, 30d4c <interface_from_internal_id_search+0x20>
   30d46:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   30d48:	4282      	cmp	r2, r0
   30d4a:	d033      	beq.n	30db4 <interface_from_internal_id_search+0x88>
   30d4c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   30d4e:	b11a      	cbz	r2, 30d58 <interface_from_internal_id_search+0x2c>
   30d50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   30d54:	4282      	cmp	r2, r0
   30d56:	d02f      	beq.n	30db8 <interface_from_internal_id_search+0x8c>
   30d58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   30d5c:	b11a      	cbz	r2, 30d66 <interface_from_internal_id_search+0x3a>
   30d5e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   30d62:	4282      	cmp	r2, r0
   30d64:	d02a      	beq.n	30dbc <interface_from_internal_id_search+0x90>
   30d66:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   30d6a:	b11a      	cbz	r2, 30d74 <interface_from_internal_id_search+0x48>
   30d6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   30d70:	4282      	cmp	r2, r0
   30d72:	d025      	beq.n	30dc0 <interface_from_internal_id_search+0x94>
   30d74:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   30d78:	b11a      	cbz	r2, 30d82 <interface_from_internal_id_search+0x56>
   30d7a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   30d7e:	4282      	cmp	r2, r0
   30d80:	d020      	beq.n	30dc4 <interface_from_internal_id_search+0x98>
   30d82:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   30d86:	b11a      	cbz	r2, 30d90 <interface_from_internal_id_search+0x64>
   30d88:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   30d8c:	4282      	cmp	r2, r0
   30d8e:	d01b      	beq.n	30dc8 <interface_from_internal_id_search+0x9c>
   30d90:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   30d94:	b13a      	cbz	r2, 30da6 <interface_from_internal_id_search+0x7a>
   30d96:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   30d9a:	4283      	cmp	r3, r0
   30d9c:	bf14      	ite	ne
   30d9e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   30da2:	2008      	moveq	r0, #8
   30da4:	4770      	bx	lr
   30da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30daa:	4770      	bx	lr
   30dac:	2000      	movs	r0, #0
   30dae:	4770      	bx	lr
   30db0:	2001      	movs	r0, #1
   30db2:	4770      	bx	lr
   30db4:	2002      	movs	r0, #2
   30db6:	4770      	bx	lr
   30db8:	2003      	movs	r0, #3
   30dba:	4770      	bx	lr
   30dbc:	2004      	movs	r0, #4
   30dbe:	4770      	bx	lr
   30dc0:	2005      	movs	r0, #5
   30dc2:	4770      	bx	lr
   30dc4:	2006      	movs	r0, #6
   30dc6:	4770      	bx	lr
   30dc8:	2007      	movs	r0, #7
   30dca:	4770      	bx	lr
   30dcc:	2002cba0 	.word	0x2002cba0

00030dd0 <interface_socket_from_handle_get>:
   30dd0:	2808      	cmp	r0, #8
   30dd2:	d807      	bhi.n	30de4 <interface_socket_from_handle_get+0x14>
   30dd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   30dd8:	4b03      	ldr	r3, [pc, #12]	; (30de8 <interface_socket_from_handle_get+0x18>)
   30dda:	00c0      	lsls	r0, r0, #3
   30ddc:	581a      	ldr	r2, [r3, r0]
   30dde:	b10a      	cbz	r2, 30de4 <interface_socket_from_handle_get+0x14>
   30de0:	4418      	add	r0, r3
   30de2:	4770      	bx	lr
   30de4:	2000      	movs	r0, #0
   30de6:	4770      	bx	lr
   30de8:	2002cba0 	.word	0x2002cba0

00030dec <interface_socket_event_get>:
   30dec:	b119      	cbz	r1, 30df6 <interface_socket_event_get+0xa>
   30dee:	2808      	cmp	r0, #8
   30df0:	d902      	bls.n	30df8 <interface_socket_event_get+0xc>
   30df2:	2310      	movs	r3, #16
   30df4:	600b      	str	r3, [r1, #0]
   30df6:	4770      	bx	lr
   30df8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   30dfc:	4b07      	ldr	r3, [pc, #28]	; (30e1c <interface_socket_event_get+0x30>)
   30dfe:	00c0      	lsls	r0, r0, #3
   30e00:	581a      	ldr	r2, [r3, r0]
   30e02:	2a00      	cmp	r2, #0
   30e04:	d0f5      	beq.n	30df2 <interface_socket_event_get+0x6>
   30e06:	581b      	ldr	r3, [r3, r0]
   30e08:	0c1b      	lsrs	r3, r3, #16
   30e0a:	f003 020a 	and.w	r2, r3, #10
   30e0e:	2a0a      	cmp	r2, #10
   30e10:	bf14      	ite	ne
   30e12:	f003 030f 	andne.w	r3, r3, #15
   30e16:	f003 030d 	andeq.w	r3, r3, #13
   30e1a:	e7eb      	b.n	30df4 <interface_socket_event_get+0x8>
   30e1c:	2002cba0 	.word	0x2002cba0

00030e20 <interface_socket_setopt>:
   30e20:	2808      	cmp	r0, #8
   30e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30e24:	d82c      	bhi.n	30e80 <interface_socket_setopt+0x60>
   30e26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   30e2a:	4e1e      	ldr	r6, [pc, #120]	; (30ea4 <interface_socket_setopt+0x84>)
   30e2c:	00c0      	lsls	r0, r0, #3
   30e2e:	5834      	ldr	r4, [r6, r0]
   30e30:	b334      	cbz	r4, 30e80 <interface_socket_setopt+0x60>
   30e32:	2901      	cmp	r1, #1
   30e34:	d11e      	bne.n	30e74 <interface_socket_setopt+0x54>
   30e36:	f1a2 0114 	sub.w	r1, r2, #20
   30e3a:	2901      	cmp	r1, #1
   30e3c:	d81a      	bhi.n	30e74 <interface_socket_setopt+0x54>
   30e3e:	9906      	ldr	r1, [sp, #24]
   30e40:	2908      	cmp	r1, #8
   30e42:	d123      	bne.n	30e8c <interface_socket_setopt+0x6c>
   30e44:	b313      	cbz	r3, 30e8c <interface_socket_setopt+0x6c>
   30e46:	6859      	ldr	r1, [r3, #4]
   30e48:	4c17      	ldr	r4, [pc, #92]	; (30ea8 <interface_socket_setopt+0x88>)
   30e4a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   30e4e:	fba4 4101 	umull	r4, r1, r4, r1
   30e52:	0989      	lsrs	r1, r1, #6
   30e54:	460c      	mov	r4, r1
   30e56:	2500      	movs	r5, #0
   30e58:	681b      	ldr	r3, [r3, #0]
   30e5a:	fbe7 4503 	umlal	r4, r5, r7, r3
   30e5e:	2d01      	cmp	r5, #1
   30e60:	bf08      	it	eq
   30e62:	2c00      	cmpeq	r4, #0
   30e64:	d218      	bcs.n	30e98 <interface_socket_setopt+0x78>
   30e66:	4430      	add	r0, r6
   30e68:	2a14      	cmp	r2, #20
   30e6a:	bf0c      	ite	eq
   30e6c:	6204      	streq	r4, [r0, #32]
   30e6e:	6244      	strne	r4, [r0, #36]	; 0x24
   30e70:	2000      	movs	r0, #0
   30e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30e74:	202a      	movs	r0, #42	; 0x2a
   30e76:	f7f4 fd81 	bl	2597c <bsd_os_errno_set>
   30e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30e80:	2009      	movs	r0, #9
   30e82:	f7f4 fd7b 	bl	2597c <bsd_os_errno_set>
   30e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30e8c:	2016      	movs	r0, #22
   30e8e:	f7f4 fd75 	bl	2597c <bsd_os_errno_set>
   30e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30e98:	2025      	movs	r0, #37	; 0x25
   30e9a:	f7f4 fd6f 	bl	2597c <bsd_os_errno_set>
   30e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30ea4:	2002cba0 	.word	0x2002cba0
   30ea8:	10624dd3 	.word	0x10624dd3

00030eac <interface_socket_getopt>:
   30eac:	b570      	push	{r4, r5, r6, lr}
   30eae:	2808      	cmp	r0, #8
   30eb0:	9d04      	ldr	r5, [sp, #16]
   30eb2:	d835      	bhi.n	30f20 <interface_socket_getopt+0x74>
   30eb4:	4c20      	ldr	r4, [pc, #128]	; (30f38 <interface_socket_getopt+0x8c>)
   30eb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   30eba:	00c0      	lsls	r0, r0, #3
   30ebc:	5826      	ldr	r6, [r4, r0]
   30ebe:	4404      	add	r4, r0
   30ec0:	b376      	cbz	r6, 30f20 <interface_socket_getopt+0x74>
   30ec2:	2901      	cmp	r1, #1
   30ec4:	d132      	bne.n	30f2c <interface_socket_getopt+0x80>
   30ec6:	b32b      	cbz	r3, 30f14 <interface_socket_getopt+0x68>
   30ec8:	b325      	cbz	r5, 30f14 <interface_socket_getopt+0x68>
   30eca:	2a04      	cmp	r2, #4
   30ecc:	d019      	beq.n	30f02 <interface_socket_getopt+0x56>
   30ece:	f1a2 0114 	sub.w	r1, r2, #20
   30ed2:	2901      	cmp	r1, #1
   30ed4:	d82a      	bhi.n	30f2c <interface_socket_getopt+0x80>
   30ed6:	6829      	ldr	r1, [r5, #0]
   30ed8:	2908      	cmp	r1, #8
   30eda:	d11b      	bne.n	30f14 <interface_socket_getopt+0x68>
   30edc:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   30ee0:	2a14      	cmp	r2, #20
   30ee2:	bf18      	it	ne
   30ee4:	4601      	movne	r1, r0
   30ee6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   30eea:	4a14      	ldr	r2, [pc, #80]	; (30f3c <interface_socket_getopt+0x90>)
   30eec:	2000      	movs	r0, #0
   30eee:	fba2 5201 	umull	r5, r2, r2, r1
   30ef2:	0992      	lsrs	r2, r2, #6
   30ef4:	fb04 1112 	mls	r1, r4, r2, r1
   30ef8:	fb04 f101 	mul.w	r1, r4, r1
   30efc:	e9c3 2100 	strd	r2, r1, [r3]
   30f00:	bd70      	pop	{r4, r5, r6, pc}
   30f02:	682a      	ldr	r2, [r5, #0]
   30f04:	2a04      	cmp	r2, #4
   30f06:	d105      	bne.n	30f14 <interface_socket_getopt+0x68>
   30f08:	2200      	movs	r2, #0
   30f0a:	6861      	ldr	r1, [r4, #4]
   30f0c:	4610      	mov	r0, r2
   30f0e:	6019      	str	r1, [r3, #0]
   30f10:	6062      	str	r2, [r4, #4]
   30f12:	bd70      	pop	{r4, r5, r6, pc}
   30f14:	2016      	movs	r0, #22
   30f16:	f7f4 fd31 	bl	2597c <bsd_os_errno_set>
   30f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30f1e:	bd70      	pop	{r4, r5, r6, pc}
   30f20:	2009      	movs	r0, #9
   30f22:	f7f4 fd2b 	bl	2597c <bsd_os_errno_set>
   30f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30f2a:	bd70      	pop	{r4, r5, r6, pc}
   30f2c:	202a      	movs	r0, #42	; 0x2a
   30f2e:	f7f4 fd25 	bl	2597c <bsd_os_errno_set>
   30f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30f36:	bd70      	pop	{r4, r5, r6, pc}
   30f38:	2002cba0 	.word	0x2002cba0
   30f3c:	10624dd3 	.word	0x10624dd3

00030f40 <interface_socket_fcntl>:
   30f40:	2808      	cmp	r0, #8
   30f42:	b510      	push	{r4, lr}
   30f44:	d826      	bhi.n	30f94 <interface_socket_fcntl+0x54>
   30f46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   30f4a:	4c1b      	ldr	r4, [pc, #108]	; (30fb8 <interface_socket_fcntl+0x78>)
   30f4c:	00c3      	lsls	r3, r0, #3
   30f4e:	58e0      	ldr	r0, [r4, r3]
   30f50:	b300      	cbz	r0, 30f94 <interface_socket_fcntl+0x54>
   30f52:	2901      	cmp	r1, #1
   30f54:	d005      	beq.n	30f62 <interface_socket_fcntl+0x22>
   30f56:	2902      	cmp	r1, #2
   30f58:	d122      	bne.n	30fa0 <interface_socket_fcntl+0x60>
   30f5a:	58e0      	ldr	r0, [r4, r3]
   30f5c:	f3c0 7000 	ubfx	r0, r0, #28, #1
   30f60:	bd10      	pop	{r4, pc}
   30f62:	07d2      	lsls	r2, r2, #31
   30f64:	d410      	bmi.n	30f88 <interface_socket_fcntl+0x48>
   30f66:	58e0      	ldr	r0, [r4, r3]
   30f68:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   30f6c:	d11e      	bne.n	30fac <interface_socket_fcntl+0x6c>
   30f6e:	58e2      	ldr	r2, [r4, r3]
   30f70:	b292      	uxth	r2, r2
   30f72:	2a0a      	cmp	r2, #10
   30f74:	d01a      	beq.n	30fac <interface_socket_fcntl+0x6c>
   30f76:	58e2      	ldr	r2, [r4, r3]
   30f78:	b292      	uxth	r2, r2
   30f7a:	2a0b      	cmp	r2, #11
   30f7c:	d016      	beq.n	30fac <interface_socket_fcntl+0x6c>
   30f7e:	58e2      	ldr	r2, [r4, r3]
   30f80:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   30f84:	50e2      	str	r2, [r4, r3]
   30f86:	bd10      	pop	{r4, pc}
   30f88:	58e2      	ldr	r2, [r4, r3]
   30f8a:	2000      	movs	r0, #0
   30f8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   30f90:	50e2      	str	r2, [r4, r3]
   30f92:	bd10      	pop	{r4, pc}
   30f94:	2009      	movs	r0, #9
   30f96:	f7f4 fcf1 	bl	2597c <bsd_os_errno_set>
   30f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30f9e:	bd10      	pop	{r4, pc}
   30fa0:	2016      	movs	r0, #22
   30fa2:	f7f4 fceb 	bl	2597c <bsd_os_errno_set>
   30fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30faa:	bd10      	pop	{r4, pc}
   30fac:	2023      	movs	r0, #35	; 0x23
   30fae:	f7f4 fce5 	bl	2597c <bsd_os_errno_set>
   30fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30fb6:	bd10      	pop	{r4, pc}
   30fb8:	2002cba0 	.word	0x2002cba0

00030fbc <at_client_evt_handler>:
   30fbc:	b120      	cbz	r0, 30fc8 <at_client_evt_handler+0xc>
   30fbe:	f850 1b08 	ldr.w	r1, [r0], #8
   30fc2:	0c09      	lsrs	r1, r1, #16
   30fc4:	f7fc be10 	b.w	2dbe8 <rpc_at_event_handler>
   30fc8:	4770      	bx	lr
   30fca:	bf00      	nop

00030fcc <rpc_at_client_init>:
   30fcc:	4801      	ldr	r0, [pc, #4]	; (30fd4 <rpc_at_client_init+0x8>)
   30fce:	f7fb bbc7 	b.w	2c760 <rpc_client_register>
   30fd2:	bf00      	nop
   30fd4:	00038e78 	.word	0x00038e78

00030fd8 <rpc_at_client_request_alloc>:
   30fd8:	b180      	cbz	r0, 30ffc <rpc_at_client_request_alloc+0x24>
   30fda:	2300      	movs	r3, #0
   30fdc:	b510      	push	{r4, lr}
   30fde:	b082      	sub	sp, #8
   30fe0:	aa02      	add	r2, sp, #8
   30fe2:	4604      	mov	r4, r0
   30fe4:	f842 3d04 	str.w	r3, [r2, #-4]!
   30fe8:	2003      	movs	r0, #3
   30fea:	f7fb fc33 	bl	2c854 <rpc_message_alloc>
   30fee:	b918      	cbnz	r0, 30ff8 <rpc_at_client_request_alloc+0x20>
   30ff0:	9b01      	ldr	r3, [sp, #4]
   30ff2:	b10b      	cbz	r3, 30ff8 <rpc_at_client_request_alloc+0x20>
   30ff4:	3308      	adds	r3, #8
   30ff6:	6023      	str	r3, [r4, #0]
   30ff8:	b002      	add	sp, #8
   30ffa:	bd10      	pop	{r4, pc}
   30ffc:	200e      	movs	r0, #14
   30ffe:	4770      	bx	lr

00031000 <rpc_at_client_request_send>:
   31000:	b150      	cbz	r0, 31018 <rpc_at_client_request_send+0x18>
   31002:	4603      	mov	r3, r0
   31004:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   31008:	2003      	movs	r0, #3
   3100a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3100e:	f843 1d08 	str.w	r1, [r3, #-8]!
   31012:	4619      	mov	r1, r3
   31014:	f7fb bc0e 	b.w	2c834 <rpc_message_send>
   31018:	200e      	movs	r0, #14
   3101a:	4770      	bx	lr

0003101c <rpc_at_client_message_free>:
   3101c:	b120      	cbz	r0, 31028 <rpc_at_client_message_free+0xc>
   3101e:	f1a0 0108 	sub.w	r1, r0, #8
   31022:	2003      	movs	r0, #3
   31024:	f7fb bc42 	b.w	2c8ac <rpc_message_free>
   31028:	200e      	movs	r0, #14
   3102a:	4770      	bx	lr

0003102c <rpc_at_client_data_free>:
   3102c:	b118      	cbz	r0, 31036 <rpc_at_client_data_free+0xa>
   3102e:	4601      	mov	r1, r0
   31030:	2003      	movs	r0, #3
   31032:	f7fb bc47 	b.w	2c8c4 <rpc_message_data_free>
   31036:	200e      	movs	r0, #14
   31038:	4770      	bx	lr
   3103a:	bf00      	nop

0003103c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   3103c:	4a07      	ldr	r2, [pc, #28]	; (3105c <SystemInit+0x20>)
   3103e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   31042:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   31046:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   3104a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3104e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   31052:	4b03      	ldr	r3, [pc, #12]	; (31060 <SystemInit+0x24>)
   31054:	4a03      	ldr	r2, [pc, #12]	; (31064 <SystemInit+0x28>)
   31056:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   31058:	4770      	bx	lr
   3105a:	bf00      	nop
   3105c:	e000ed00 	.word	0xe000ed00
   31060:	20020458 	.word	0x20020458
   31064:	03d09000 	.word	0x03d09000

00031068 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   31068:	4b04      	ldr	r3, [pc, #16]	; (3107c <nrfx_clock_init+0x14>)
   3106a:	791a      	ldrb	r2, [r3, #4]
   3106c:	b922      	cbnz	r2, 31078 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   3106e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   31070:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   31072:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   31074:	4802      	ldr	r0, [pc, #8]	; (31080 <nrfx_clock_init+0x18>)
   31076:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   31078:	4802      	ldr	r0, [pc, #8]	; (31084 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3107a:	4770      	bx	lr
   3107c:	20024080 	.word	0x20024080
   31080:	0bad0000 	.word	0x0bad0000
   31084:	0bad000c 	.word	0x0bad000c

00031088 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   31088:	b110      	cbz	r0, 31090 <nrfx_clock_start+0x8>
   3108a:	2801      	cmp	r0, #1
   3108c:	d01e      	beq.n	310cc <nrfx_clock_start+0x44>
   3108e:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   31090:	4b13      	ldr	r3, [pc, #76]	; (310e0 <nrfx_clock_start+0x58>)
   31092:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   31096:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   3109a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   3109e:	4619      	mov	r1, r3
   310a0:	d010      	beq.n	310c4 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   310a2:	f002 0203 	and.w	r2, r2, #3
   310a6:	2a02      	cmp	r2, #2
   310a8:	d10c      	bne.n	310c4 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   310aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   310ae:	2200      	movs	r2, #0
   310b0:	4b0c      	ldr	r3, [pc, #48]	; (310e4 <nrfx_clock_start+0x5c>)
   310b2:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   310b4:	2202      	movs	r2, #2
   310b6:	681b      	ldr	r3, [r3, #0]
   310b8:	4b09      	ldr	r3, [pc, #36]	; (310e0 <nrfx_clock_start+0x58>)
   310ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   310be:	2201      	movs	r2, #1
   310c0:	609a      	str	r2, [r3, #8]
}
   310c2:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   310c4:	2301      	movs	r3, #1
   310c6:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   310ca:	e7f0      	b.n	310ae <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   310cc:	2200      	movs	r2, #0
   310ce:	4b06      	ldr	r3, [pc, #24]	; (310e8 <nrfx_clock_start+0x60>)
   310d0:	601a      	str	r2, [r3, #0]
   310d2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   310d4:	4b02      	ldr	r3, [pc, #8]	; (310e0 <nrfx_clock_start+0x58>)
   310d6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   310da:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   310dc:	4770      	bx	lr
   310de:	bf00      	nop
   310e0:	40005000 	.word	0x40005000
   310e4:	40005104 	.word	0x40005104
   310e8:	40005100 	.word	0x40005100

000310ec <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   310ec:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   310ee:	b110      	cbz	r0, 310f6 <nrfx_clock_stop+0xa>
   310f0:	2801      	cmp	r0, #1
   310f2:	d016      	beq.n	31122 <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   310f4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   310f6:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   310f8:	2101      	movs	r1, #1
   310fa:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   310fe:	4c16      	ldr	r4, [pc, #88]	; (31158 <nrfx_clock_stop+0x6c>)
   31100:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31104:	4a15      	ldr	r2, [pc, #84]	; (3115c <nrfx_clock_stop+0x70>)
   31106:	6010      	str	r0, [r2, #0]
   31108:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3110a:	4a15      	ldr	r2, [pc, #84]	; (31160 <nrfx_clock_stop+0x74>)
   3110c:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3110e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   31112:	03db      	lsls	r3, r3, #15
   31114:	d5ee      	bpl.n	310f4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   31116:	2001      	movs	r0, #1
   31118:	f005 fc3b 	bl	36992 <nrfx_busy_wait>
   3111c:	3d01      	subs	r5, #1
   3111e:	d1f6      	bne.n	3110e <nrfx_clock_stop+0x22>
   31120:	e7e8      	b.n	310f4 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31122:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31124:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31128:	4b0e      	ldr	r3, [pc, #56]	; (31164 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   3112a:	4c0b      	ldr	r4, [pc, #44]	; (31158 <nrfx_clock_stop+0x6c>)
   3112c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31130:	601a      	str	r2, [r3, #0]
   31132:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31134:	4b0c      	ldr	r3, [pc, #48]	; (31168 <nrfx_clock_stop+0x7c>)
   31136:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   31138:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3113c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   31140:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   31144:	03d2      	lsls	r2, r2, #15
   31146:	d5d5      	bpl.n	310f4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   31148:	2b00      	cmp	r3, #0
   3114a:	d0d3      	beq.n	310f4 <nrfx_clock_stop+0x8>
   3114c:	2001      	movs	r0, #1
   3114e:	f005 fc20 	bl	36992 <nrfx_busy_wait>
   31152:	3d01      	subs	r5, #1
   31154:	d1f0      	bne.n	31138 <nrfx_clock_stop+0x4c>
   31156:	e7cd      	b.n	310f4 <nrfx_clock_stop+0x8>
   31158:	40005000 	.word	0x40005000
   3115c:	40005104 	.word	0x40005104
   31160:	4000500c 	.word	0x4000500c
   31164:	40005100 	.word	0x40005100
   31168:	40005004 	.word	0x40005004

0003116c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3116c:	4b15      	ldr	r3, [pc, #84]	; (311c4 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3116e:	b510      	push	{r4, lr}
   31170:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   31172:	b14a      	cbz	r2, 31188 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31174:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   31176:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31178:	6018      	str	r0, [r3, #0]
   3117a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   3117c:	4b12      	ldr	r3, [pc, #72]	; (311c8 <nrfx_power_clock_irq_handler+0x5c>)
   3117e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   31182:	4b12      	ldr	r3, [pc, #72]	; (311cc <nrfx_power_clock_irq_handler+0x60>)
   31184:	681b      	ldr	r3, [r3, #0]
   31186:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   31188:	4b11      	ldr	r3, [pc, #68]	; (311d0 <nrfx_power_clock_irq_handler+0x64>)
   3118a:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   3118c:	b182      	cbz	r2, 311b0 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3118e:	2200      	movs	r2, #0
   31190:	601a      	str	r2, [r3, #0]
   31192:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   31194:	4b0c      	ldr	r3, [pc, #48]	; (311c8 <nrfx_power_clock_irq_handler+0x5c>)
   31196:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3119a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   3119e:	f002 0203 	and.w	r2, r2, #3
   311a2:	2a01      	cmp	r2, #1
   311a4:	f04f 0102 	mov.w	r1, #2
   311a8:	d103      	bne.n	311b2 <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   311aa:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   311ae:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   311b0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   311b2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   311b6:	4b05      	ldr	r3, [pc, #20]	; (311cc <nrfx_power_clock_irq_handler+0x60>)
   311b8:	2001      	movs	r0, #1
}
   311ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   311be:	681b      	ldr	r3, [r3, #0]
   311c0:	4718      	bx	r3
   311c2:	bf00      	nop
   311c4:	40005100 	.word	0x40005100
   311c8:	40005000 	.word	0x40005000
   311cc:	20024080 	.word	0x20024080
   311d0:	40005104 	.word	0x40005104

000311d4 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   311d4:	4a0b      	ldr	r2, [pc, #44]	; (31204 <nrfx_dppi_channel_alloc+0x30>)
{
   311d6:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   311d8:	6816      	ldr	r6, [r2, #0]
   311da:	43f1      	mvns	r1, r6
   311dc:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   311de:	b171      	cbz	r1, 311fe <nrfx_dppi_channel_alloc+0x2a>
   311e0:	2500      	movs	r5, #0
   311e2:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   311e4:	fa21 f304 	lsr.w	r3, r1, r4
   311e8:	07db      	lsls	r3, r3, #31
   311ea:	f105 0501 	add.w	r5, r5, #1
   311ee:	d5f8      	bpl.n	311e2 <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   311f0:	2301      	movs	r3, #1
   311f2:	40a3      	lsls	r3, r4
   311f4:	4333      	orrs	r3, r6
    *p_channel = channel;
   311f6:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   311f8:	4803      	ldr	r0, [pc, #12]	; (31208 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   311fa:	6013      	str	r3, [r2, #0]
}
   311fc:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   311fe:	4803      	ldr	r0, [pc, #12]	; (3120c <nrfx_dppi_channel_alloc+0x38>)
   31200:	e7fc      	b.n	311fc <nrfx_dppi_channel_alloc+0x28>
   31202:	bf00      	nop
   31204:	20024088 	.word	0x20024088
   31208:	0bad0000 	.word	0x0bad0000
   3120c:	0bad0002 	.word	0x0bad0002

00031210 <nrfx_dppi_channel_enable>:
    return ((m_allocated_channels & DPPI_BIT_SET(channel)) != 0);
   31210:	4b07      	ldr	r3, [pc, #28]	; (31230 <nrfx_dppi_channel_enable+0x20>)
   31212:	681b      	ldr	r3, [r3, #0]
   31214:	40c3      	lsrs	r3, r0

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!channel_is_allocated(channel))
   31216:	07db      	lsls	r3, r3, #31
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
   31218:	bf41      	itttt	mi
   3121a:	2301      	movmi	r3, #1
   3121c:	fa03 f000 	lslmi.w	r0, r3, r0
   31220:	4b04      	ldrmi	r3, [pc, #16]	; (31234 <nrfx_dppi_channel_enable+0x24>)
   31222:	f8c3 0504 	strmi.w	r0, [r3, #1284]	; 0x504
    nrfx_err_t err_code = NRFX_SUCCESS;
   31226:	bf4c      	ite	mi
   31228:	4803      	ldrmi	r0, [pc, #12]	; (31238 <nrfx_dppi_channel_enable+0x28>)
        err_code = NRFX_ERROR_INVALID_PARAM;
   3122a:	4804      	ldrpl	r0, [pc, #16]	; (3123c <nrfx_dppi_channel_enable+0x2c>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3122c:	4770      	bx	lr
   3122e:	bf00      	nop
   31230:	20024088 	.word	0x20024088
   31234:	40017000 	.word	0x40017000
   31238:	0bad0000 	.word	0x0bad0000
   3123c:	0bad0004 	.word	0x0bad0004

00031240 <nrfx_nvmc_page_erase>:
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   31240:	f3c0 030b 	ubfx	r3, r0, #0, #12

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   31244:	b97b      	cbnz	r3, 31266 <nrfx_nvmc_page_erase+0x26>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   31246:	2202      	movs	r2, #2
   31248:	4b08      	ldr	r3, [pc, #32]	; (3126c <nrfx_nvmc_page_erase+0x2c>)
   3124a:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   3124e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31252:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   31254:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   31258:	07d2      	lsls	r2, r2, #31
   3125a:	d5fb      	bpl.n	31254 <nrfx_nvmc_page_erase+0x14>
    p_reg->CONFIGNS = (uint32_t)mode;
   3125c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3125e:	4804      	ldr	r0, [pc, #16]	; (31270 <nrfx_nvmc_page_erase+0x30>)
   31260:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
   31264:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   31266:	4803      	ldr	r0, [pc, #12]	; (31274 <nrfx_nvmc_page_erase+0x34>)
}
   31268:	4770      	bx	lr
   3126a:	bf00      	nop
   3126c:	40039000 	.word	0x40039000
   31270:	0bad0000 	.word	0x0bad0000
   31274:	0bad000a 	.word	0x0bad000a

00031278 <nrfx_nvmc_word_write>:
   31278:	2201      	movs	r2, #1
   3127a:	4b07      	ldr	r3, [pc, #28]	; (31298 <nrfx_nvmc_word_write+0x20>)
   3127c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   31280:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   31284:	07d2      	lsls	r2, r2, #31
   31286:	d5fb      	bpl.n	31280 <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   31288:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3128a:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIGNS = (uint32_t)mode;
   3128e:	2200      	movs	r2, #0
   31290:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   31294:	4770      	bx	lr
   31296:	bf00      	nop
   31298:	40039000 	.word	0x40039000

0003129c <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   3129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3129e:	460c      	mov	r4, r1
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(timer_event_handler);

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   312a0:	210c      	movs	r1, #12
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   312a2:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   312a4:	4e21      	ldr	r6, [pc, #132]	; (3132c <nrfx_timer_init+0x90>)
   312a6:	4379      	muls	r1, r7
{
   312a8:	4605      	mov	r5, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   312aa:	1870      	adds	r0, r6, r1
   312ac:	7a03      	ldrb	r3, [r0, #8]
   312ae:	2b00      	cmp	r3, #0
   312b0:	d13a      	bne.n	31328 <nrfx_timer_init+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   312b2:	469c      	mov	ip, r3
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));

    p_cb->handler = timer_event_handler;
   312b4:	5072      	str	r2, [r6, r1]
    p_cb->context = p_config->p_context;
   312b6:	6862      	ldr	r2, [r4, #4]
   312b8:	6042      	str	r2, [r0, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   312ba:	7969      	ldrb	r1, [r5, #5]
   312bc:	6828      	ldr	r0, [r5, #0]
   312be:	b2da      	uxtb	r2, r3
   312c0:	4291      	cmp	r1, r2
   312c2:	d829      	bhi.n	31318 <nrfx_timer_init+0x7c>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   312c4:	f340 3007 	sbfx	r0, r0, #12, #8
   312c8:	f7f0 fc88 	bl	21bdc <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   312cc:	682b      	ldr	r3, [r5, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   312ce:	7862      	ldrb	r2, [r4, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   312d0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   312d4:	f002 0203 	and.w	r2, r2, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   312d8:	f021 0103 	bic.w	r1, r1, #3
   312dc:	430a      	orrs	r2, r1
   312de:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   312e2:	f8d3 1508 	ldr.w	r1, [r3, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   312e6:	78a2      	ldrb	r2, [r4, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   312e8:	f021 0103 	bic.w	r1, r1, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   312ec:	f002 0203 	and.w	r2, r2, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   312f0:	430a      	orrs	r2, r1
   312f2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_frequency_t frequency)
{
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   312f6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   312fa:	7822      	ldrb	r2, [r4, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   312fc:	f021 010f 	bic.w	r1, r1, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   31300:	f002 020f 	and.w	r2, r2, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   31304:	430a      	orrs	r2, r1
   31306:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3130a:	230c      	movs	r3, #12
   3130c:	fb03 6607 	mla	r6, r3, r7, r6
   31310:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   31312:	4807      	ldr	r0, [pc, #28]	; (31330 <nrfx_timer_init+0x94>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   31314:	7233      	strb	r3, [r6, #8]
}
   31316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31318:	009a      	lsls	r2, r3, #2
   3131a:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   3131e:	f840 c002 	str.w	ip, [r0, r2]
   31322:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   31324:	3301      	adds	r3, #1
   31326:	e7ca      	b.n	312be <nrfx_timer_init+0x22>
        return err_code;
   31328:	4802      	ldr	r0, [pc, #8]	; (31334 <nrfx_timer_init+0x98>)
   3132a:	e7f4      	b.n	31316 <nrfx_timer_init+0x7a>
   3132c:	2002408c 	.word	0x2002408c
   31330:	0bad0000 	.word	0x0bad0000
   31334:	0bad0005 	.word	0x0bad0005

00031338 <nrfx_timer_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31338:	2201      	movs	r2, #1

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   3133a:	210c      	movs	r1, #12
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   3133c:	6803      	ldr	r3, [r0, #0]
   3133e:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   31340:	7903      	ldrb	r3, [r0, #4]
   31342:	4a03      	ldr	r2, [pc, #12]	; (31350 <nrfx_timer_enable+0x18>)
   31344:	fb01 2303 	mla	r3, r1, r3, r2
   31348:	2202      	movs	r2, #2
   3134a:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   3134c:	4770      	bx	lr
   3134e:	bf00      	nop
   31350:	2002408c 	.word	0x2002408c

00031354 <nrfx_timer_disable>:
   31354:	2201      	movs	r2, #1

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   31356:	6803      	ldr	r3, [r0, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   31358:	4903      	ldr	r1, [pc, #12]	; (31368 <nrfx_timer_disable+0x14>)
   3135a:	611a      	str	r2, [r3, #16]
   3135c:	7903      	ldrb	r3, [r0, #4]
   3135e:	200c      	movs	r0, #12
   31360:	fb00 1303 	mla	r3, r0, r3, r1
   31364:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   31366:	4770      	bx	lr
   31368:	2002408c 	.word	0x2002408c

0003136c <nrfx_timer_uninit>:
{
   3136c:	b538      	push	{r3, r4, r5, lr}
   3136e:	4604      	mov	r4, r0
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   31370:	6800      	ldr	r0, [r0, #0]
    p_reg->SHORTS &= ~(mask);
   31372:	2500      	movs	r5, #0
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   31374:	f340 3007 	sbfx	r0, r0, #12, #8
   31378:	f7f0 fc40 	bl	21bfc <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   3137c:	6823      	ldr	r3, [r4, #0]
    nrfx_timer_disable(p_instance);
   3137e:	4620      	mov	r0, r4
   31380:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   31384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    p_reg->SHORTS &= ~(mask);
   31388:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   3138c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   31390:	f7ff ffe0 	bl	31354 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   31394:	210c      	movs	r1, #12
   31396:	7923      	ldrb	r3, [r4, #4]
   31398:	4a02      	ldr	r2, [pc, #8]	; (313a4 <nrfx_timer_uninit+0x38>)
   3139a:	fb01 2303 	mla	r3, r1, r3, r2
   3139e:	721d      	strb	r5, [r3, #8]
}
   313a0:	bd38      	pop	{r3, r4, r5, pc}
   313a2:	bf00      	nop
   313a4:	2002408c 	.word	0x2002408c

000313a8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   313a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   313aa:	4b11      	ldr	r3, [pc, #68]	; (313f0 <z_sys_init_run_level+0x48>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   313ac:	4f11      	ldr	r7, [pc, #68]	; (313f4 <z_sys_init_run_level+0x4c>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   313ae:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   313b2:	3001      	adds	r0, #1
   313b4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   313b8:	42ae      	cmp	r6, r5
   313ba:	d800      	bhi.n	313be <z_sys_init_run_level+0x16>
		}
	}
}
   313bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   313be:	e9d5 3400 	ldrd	r3, r4, [r5]
   313c2:	4620      	mov	r0, r4
   313c4:	4798      	blx	r3
   313c6:	b180      	cbz	r0, 313ea <z_sys_init_run_level+0x42>
   313c8:	b17c      	cbz	r4, 313ea <z_sys_init_run_level+0x42>
				(dev - __device_start));
   313ca:	4b0b      	ldr	r3, [pc, #44]	; (313f8 <z_sys_init_run_level+0x50>)
   313cc:	1be4      	subs	r4, r4, r7
   313ce:	10e4      	asrs	r4, r4, #3
   313d0:	435c      	muls	r4, r3

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   313d2:	2301      	movs	r3, #1
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   313d4:	4a09      	ldr	r2, [pc, #36]	; (313fc <z_sys_init_run_level+0x54>)
   313d6:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   313d8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   313dc:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   313e0:	fa03 f404 	lsl.w	r4, r3, r4
   313e4:	4304      	orrs	r4, r0
   313e6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   313ea:	3508      	adds	r5, #8
   313ec:	e7e4      	b.n	313b8 <z_sys_init_run_level+0x10>
   313ee:	bf00      	nop
   313f0:	00038e88 	.word	0x00038e88
   313f4:	2002063c 	.word	0x2002063c
   313f8:	aaaaaaab 	.word	0xaaaaaaab
   313fc:	20020714 	.word	0x20020714

00031400 <z_device_get_all_static>:
#include <syscalls/device_get_binding_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   31400:	4a03      	ldr	r2, [pc, #12]	; (31410 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   31402:	4b04      	ldr	r3, [pc, #16]	; (31414 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   31404:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   31406:	1a9b      	subs	r3, r3, r2
}
   31408:	4803      	ldr	r0, [pc, #12]	; (31418 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   3140a:	10db      	asrs	r3, r3, #3
}
   3140c:	4358      	muls	r0, r3
   3140e:	4770      	bx	lr
   31410:	2002063c 	.word	0x2002063c
   31414:	20020714 	.word	0x20020714
   31418:	aaaaaaab 	.word	0xaaaaaaab

0003141c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   3141c:	4b09      	ldr	r3, [pc, #36]	; (31444 <z_device_ready+0x28>)
   3141e:	1ac0      	subs	r0, r0, r3
   31420:	10c3      	asrs	r3, r0, #3
   31422:	4809      	ldr	r0, [pc, #36]	; (31448 <z_device_ready+0x2c>)
   31424:	4358      	muls	r0, r3
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   31426:	4b09      	ldr	r3, [pc, #36]	; (3144c <z_device_ready+0x30>)
   31428:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   3142a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   3142e:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   31430:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   31434:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   31438:	4210      	tst	r0, r2
}
   3143a:	bf0c      	ite	eq
   3143c:	4618      	moveq	r0, r3
   3143e:	2000      	movne	r0, #0
   31440:	4770      	bx	lr
   31442:	bf00      	nop
   31444:	2002063c 	.word	0x2002063c
   31448:	aaaaaaab 	.word	0xaaaaaaab
   3144c:	20020714 	.word	0x20020714

00031450 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   31450:	4911      	ldr	r1, [pc, #68]	; (31498 <z_impl_device_get_binding+0x48>)
{
   31452:	b570      	push	{r4, r5, r6, lr}
   31454:	4605      	mov	r5, r0
   31456:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   31458:	4c10      	ldr	r4, [pc, #64]	; (3149c <z_impl_device_get_binding+0x4c>)
   3145a:	428c      	cmp	r4, r1
   3145c:	d104      	bne.n	31468 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   3145e:	4c0f      	ldr	r4, [pc, #60]	; (3149c <z_impl_device_get_binding+0x4c>)
   31460:	42b4      	cmp	r4, r6
   31462:	d10a      	bne.n	3147a <z_impl_device_get_binding+0x2a>
	return NULL;
   31464:	2400      	movs	r4, #0
   31466:	e014      	b.n	31492 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   31468:	4620      	mov	r0, r4
   3146a:	f7ff ffd7 	bl	3141c <z_device_ready>
   3146e:	b110      	cbz	r0, 31476 <z_impl_device_get_binding+0x26>
   31470:	6823      	ldr	r3, [r4, #0]
   31472:	42ab      	cmp	r3, r5
   31474:	d00d      	beq.n	31492 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   31476:	3418      	adds	r4, #24
   31478:	e7ef      	b.n	3145a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   3147a:	4620      	mov	r0, r4
   3147c:	f7ff ffce 	bl	3141c <z_device_ready>
   31480:	b908      	cbnz	r0, 31486 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   31482:	3418      	adds	r4, #24
   31484:	e7ec      	b.n	31460 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   31486:	4628      	mov	r0, r5
   31488:	6821      	ldr	r1, [r4, #0]
   3148a:	f7e7 fde7 	bl	1905c <strcmp>
   3148e:	2800      	cmp	r0, #0
   31490:	d1f7      	bne.n	31482 <z_impl_device_get_binding+0x32>
}
   31492:	4620      	mov	r0, r4
   31494:	bd70      	pop	{r4, r5, r6, pc}
   31496:	bf00      	nop
   31498:	20020714 	.word	0x20020714
   3149c:	2002063c 	.word	0x2002063c

000314a0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   314a0:	4b01      	ldr	r3, [pc, #4]	; (314a8 <z_impl_z_errno+0x8>)
   314a2:	6898      	ldr	r0, [r3, #8]
}
   314a4:	3068      	adds	r0, #104	; 0x68
   314a6:	4770      	bx	lr
   314a8:	20024098 	.word	0x20024098

000314ac <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   314ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   314b0:	4606      	mov	r6, r0
   314b2:	460f      	mov	r7, r1
	__asm__ volatile(
   314b4:	f04f 0320 	mov.w	r3, #32
   314b8:	f3ef 8811 	mrs	r8, BASEPRI
   314bc:	f383 8811 	msr	BASEPRI, r3
   314c0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   314c4:	f000 ff38 	bl	32338 <z_impl_k_current_get>
   314c8:	4c21      	ldr	r4, [pc, #132]	; (31550 <z_fatal_error+0xa4>)
   314ca:	4b22      	ldr	r3, [pc, #136]	; (31554 <z_fatal_error+0xa8>)
   314cc:	2e04      	cmp	r6, #4
   314ce:	eba4 0403 	sub.w	r4, r4, r3
   314d2:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   314d6:	bf98      	it	ls
   314d8:	4a1f      	ldrls	r2, [pc, #124]	; (31558 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   314da:	ea4f 1484 	mov.w	r4, r4, lsl #6
   314de:	f044 0301 	orr.w	r3, r4, #1
   314e2:	4605      	mov	r5, r0
	switch (reason) {
   314e4:	bf94      	ite	ls
   314e6:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   314ea:	4a1c      	ldrhi	r2, [pc, #112]	; (3155c <z_fatal_error+0xb0>)
   314ec:	f8ad 3000 	strh.w	r3, [sp]
   314f0:	4631      	mov	r1, r6
   314f2:	2300      	movs	r3, #0
   314f4:	481a      	ldr	r0, [pc, #104]	; (31560 <z_fatal_error+0xb4>)
   314f6:	f003 f846 	bl	34586 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   314fa:	b147      	cbz	r7, 3150e <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   314fc:	69fb      	ldr	r3, [r7, #28]
   314fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   31502:	b123      	cbz	r3, 3150e <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   31504:	4817      	ldr	r0, [pc, #92]	; (31564 <z_fatal_error+0xb8>)
   31506:	f044 0101 	orr.w	r1, r4, #1
   3150a:	f002 fffd 	bl	34508 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   3150e:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   31512:	b12d      	cbz	r5, 31520 <z_fatal_error+0x74>
   31514:	4628      	mov	r0, r5
   31516:	f005 fcb7 	bl	36e88 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   3151a:	b108      	cbz	r0, 31520 <z_fatal_error+0x74>
   3151c:	7803      	ldrb	r3, [r0, #0]
   3151e:	b903      	cbnz	r3, 31522 <z_fatal_error+0x76>
		thread_name = "unknown";
   31520:	4811      	ldr	r0, [pc, #68]	; (31568 <z_fatal_error+0xbc>)
	LOG_ERR("Current thread: %p (%s)", thread,
   31522:	f7ee ff7b 	bl	2041c <log_strdup>
   31526:	4623      	mov	r3, r4
   31528:	4602      	mov	r2, r0
   3152a:	4629      	mov	r1, r5
   3152c:	480f      	ldr	r0, [pc, #60]	; (3156c <z_fatal_error+0xc0>)
   3152e:	f003 f811 	bl	34554 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   31532:	4639      	mov	r1, r7
   31534:	4630      	mov	r0, r6
   31536:	f7f5 feeb 	bl	27310 <k_sys_fatal_error_handler>
	__asm__ volatile(
   3153a:	f388 8811 	msr	BASEPRI, r8
   3153e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   31542:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   31544:	b002      	add	sp, #8
   31546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3154a:	f7f0 bf83 	b.w	22454 <z_impl_k_thread_abort>
   3154e:	bf00      	nop
   31550:	000383dc 	.word	0x000383dc
   31554:	0003831c 	.word	0x0003831c
   31558:	00038ea0 	.word	0x00038ea0
   3155c:	0003c961 	.word	0x0003c961
   31560:	0003c977 	.word	0x0003c977
   31564:	0003c99f 	.word	0x0003c99f
   31568:	0003c96f 	.word	0x0003c96f
   3156c:	0003c9c0 	.word	0x0003c9c0

00031570 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   31570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31572:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   31574:	2700      	movs	r7, #0
	_kernel.idle = ticks;
   31576:	4e1b      	ldr	r6, [pc, #108]	; (315e4 <idle+0x74>)
	__asm__ volatile(
   31578:	f04f 0220 	mov.w	r2, #32
   3157c:	f3ef 8311 	mrs	r3, BASEPRI
   31580:	f382 8811 	msr	BASEPRI, r2
   31584:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   31588:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   3158a:	b188      	cbz	r0, 315b0 <idle+0x40>
			cpu->pending_abort = NULL;
   3158c:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   3158e:	f383 8811 	msr	BASEPRI, r3
   31592:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   31596:	f000 fd0d 	bl	31fb4 <z_thread_single_abort>
	__asm__ volatile(
   3159a:	f04f 0320 	mov.w	r3, #32
   3159e:	f3ef 8011 	mrs	r0, BASEPRI
   315a2:	f383 8811 	msr	BASEPRI, r3
   315a6:	f3bf 8f6f 	isb	sy
   315aa:	f005 fb7e 	bl	36caa <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   315ae:	e7e3      	b.n	31578 <idle+0x8>
	__asm__ volatile(
   315b0:	f383 8811 	msr	BASEPRI, r3
   315b4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   315b8:	f04f 0220 	mov.w	r2, #32
   315bc:	f3ef 8311 	mrs	r3, BASEPRI
   315c0:	f382 8811 	msr	BASEPRI, r2
   315c4:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   315c8:	f005 fcec 	bl	36fa4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   315cc:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   315ce:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   315d0:	2802      	cmp	r0, #2
   315d2:	bfd8      	it	le
   315d4:	4608      	movle	r0, r1
   315d6:	f005 fcf5 	bl	36fc4 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   315da:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   315dc:	f7f0 fb9e 	bl	21d1c <arch_cpu_idle>
}
   315e0:	e7ca      	b.n	31578 <idle+0x8>
   315e2:	bf00      	nop
   315e4:	20024098 	.word	0x20024098

000315e8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   315e8:	4802      	ldr	r0, [pc, #8]	; (315f4 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   315ea:	4a03      	ldr	r2, [pc, #12]	; (315f8 <z_bss_zero+0x10>)
   315ec:	2100      	movs	r1, #0
   315ee:	1a12      	subs	r2, r2, r0
   315f0:	f005 bf27 	b.w	37442 <memset>
   315f4:	20020900 	.word	0x20020900
   315f8:	2002cd18 	.word	0x2002cd18

000315fc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   315fc:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   315fe:	4806      	ldr	r0, [pc, #24]	; (31618 <z_data_copy+0x1c>)
   31600:	4a06      	ldr	r2, [pc, #24]	; (3161c <z_data_copy+0x20>)
   31602:	4907      	ldr	r1, [pc, #28]	; (31620 <z_data_copy+0x24>)
   31604:	1a12      	subs	r2, r2, r0
   31606:	f005 fefc 	bl	37402 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   3160a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3160e:	4a05      	ldr	r2, [pc, #20]	; (31624 <z_data_copy+0x28>)
   31610:	4905      	ldr	r1, [pc, #20]	; (31628 <z_data_copy+0x2c>)
   31612:	4806      	ldr	r0, [pc, #24]	; (3162c <z_data_copy+0x30>)
   31614:	f005 bef5 	b.w	37402 <memcpy>
   31618:	20020000 	.word	0x20020000
   3161c:	200208fc 	.word	0x200208fc
   31620:	0003cbdc 	.word	0x0003cbdc
   31624:	00000000 	.word	0x00000000
   31628:	0003cbdc 	.word	0x0003cbdc
   3162c:	20020000 	.word	0x20020000

00031630 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   31630:	2201      	movs	r2, #1
{
   31632:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   31634:	4b0b      	ldr	r3, [pc, #44]	; (31664 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   31636:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   31638:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3163a:	f7ff feb5 	bl	313a8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   3163e:	4a0a      	ldr	r2, [pc, #40]	; (31668 <bg_thread_main+0x38>)
   31640:	490a      	ldr	r1, [pc, #40]	; (3166c <bg_thread_main+0x3c>)
   31642:	480b      	ldr	r0, [pc, #44]	; (31670 <bg_thread_main+0x40>)
   31644:	f002 faee 	bl	33c24 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   31648:	2003      	movs	r0, #3
   3164a:	f7ff fead 	bl	313a8 <z_sys_init_run_level>

	z_init_static_threads();
   3164e:	f000 ff55 	bl	324fc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   31652:	f002 fa02 	bl	33a5a <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   31656:	4a07      	ldr	r2, [pc, #28]	; (31674 <bg_thread_main+0x44>)
   31658:	7b13      	ldrb	r3, [r2, #12]
   3165a:	f023 0301 	bic.w	r3, r3, #1
   3165e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   31660:	bd08      	pop	{r3, pc}
   31662:	bf00      	nop
   31664:	2002cb9f 	.word	0x2002cb9f
   31668:	0003c250 	.word	0x0003c250
   3166c:	0003ca22 	.word	0x0003ca22
   31670:	0003ca41 	.word	0x0003ca41
   31674:	20023280 	.word	0x20023280

00031678 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   31678:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   3167c:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   3167e:	f7ee fe31 	bl	202e4 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   31682:	4b34      	ldr	r3, [pc, #208]	; (31754 <z_cstart+0xdc>)
	uint32_t msp =
   31684:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   31688:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   3168c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   31690:	2400      	movs	r4, #0
   31692:	23e0      	movs	r3, #224	; 0xe0
   31694:	4d30      	ldr	r5, [pc, #192]	; (31758 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   31696:	f04f 0b01 	mov.w	fp, #1
   3169a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   3169e:	77ec      	strb	r4, [r5, #31]
   316a0:	762c      	strb	r4, [r5, #24]
   316a2:	766c      	strb	r4, [r5, #25]
   316a4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   316a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   316a8:	4e2c      	ldr	r6, [pc, #176]	; (3175c <z_cstart+0xe4>)
   316aa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   316ae:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   316b0:	f7f0 fe5c 	bl	2236c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   316b4:	f7f0 fb2c 	bl	21d10 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   316b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   316bc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   316be:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   316c0:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   316c4:	4d26      	ldr	r5, [pc, #152]	; (31760 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   316c6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   316ca:	ab06      	add	r3, sp, #24
   316cc:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   316ce:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   316d0:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   316d4:	f7ff fe68 	bl	313a8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   316d8:	2001      	movs	r0, #1
   316da:	f7ff fe65 	bl	313a8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   316de:	f8df a098 	ldr.w	sl, [pc, #152]	; 31778 <z_cstart+0x100>
	z_sched_init();
   316e2:	f000 fdaf 	bl	32244 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   316e6:	4b1f      	ldr	r3, [pc, #124]	; (31764 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   316e8:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   316ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   316ee:	491e      	ldr	r1, [pc, #120]	; (31768 <z_cstart+0xf0>)
   316f0:	9305      	str	r3, [sp, #20]
   316f2:	4630      	mov	r0, r6
   316f4:	4653      	mov	r3, sl
   316f6:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   316fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   316fe:	9400      	str	r4, [sp, #0]
   31700:	f000 fe9e 	bl	32440 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   31704:	7b73      	ldrb	r3, [r6, #13]
   31706:	4680      	mov	r8, r0
   31708:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   3170c:	4630      	mov	r0, r6
   3170e:	7373      	strb	r3, [r6, #13]
   31710:	f005 fb0d 	bl	36d2e <z_ready_thread>
	z_setup_new_thread(thread, stack,
   31714:	230f      	movs	r3, #15
   31716:	4f15      	ldr	r7, [pc, #84]	; (3176c <z_cstart+0xf4>)
   31718:	f44f 72a0 	mov.w	r2, #320	; 0x140
   3171c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   31720:	4913      	ldr	r1, [pc, #76]	; (31770 <z_cstart+0xf8>)
   31722:	4b14      	ldr	r3, [pc, #80]	; (31774 <z_cstart+0xfc>)
   31724:	4638      	mov	r0, r7
   31726:	e9cd b404 	strd	fp, r4, [sp, #16]
   3172a:	e9cd 5400 	strd	r5, r4, [sp]
   3172e:	f000 fe87 	bl	32440 <z_setup_new_thread>
   31732:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   31734:	4652      	mov	r2, sl
   31736:	f023 0304 	bic.w	r3, r3, #4
   3173a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   3173c:	f105 031c 	add.w	r3, r5, #28
   31740:	4641      	mov	r1, r8
   31742:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   31744:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   31748:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   3174a:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   3174c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   31750:	f7f0 fab8 	bl	21cc4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   31754:	200309d8 	.word	0x200309d8
   31758:	e000ed00 	.word	0xe000ed00
   3175c:	20023280 	.word	0x20023280
   31760:	20024098 	.word	0x20024098
   31764:	0003ca68 	.word	0x0003ca68
   31768:	2002f898 	.word	0x2002f898
   3176c:	200231b8 	.word	0x200231b8
   31770:	20030898 	.word	0x20030898
   31774:	00031571 	.word	0x00031571
   31778:	00031631 	.word	0x00031631

0003177c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   3177c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   3177e:	4c06      	ldr	r4, [pc, #24]	; (31798 <statics_init+0x1c>)
   31780:	4d06      	ldr	r5, [pc, #24]	; (3179c <statics_init+0x20>)
   31782:	42ac      	cmp	r4, r5
   31784:	d301      	bcc.n	3178a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   31786:	2000      	movs	r0, #0
   31788:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   3178a:	4620      	mov	r0, r4
   3178c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   31790:	f005 f929 	bl	369e6 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   31794:	3414      	adds	r4, #20
   31796:	e7f4      	b.n	31782 <statics_init+0x6>
   31798:	20020788 	.word	0x20020788
   3179c:	2002079c 	.word	0x2002079c

000317a0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   317a0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   317a2:	4b0e      	ldr	r3, [pc, #56]	; (317dc <init_mem_slab_module+0x3c>)
   317a4:	4c0e      	ldr	r4, [pc, #56]	; (317e0 <init_mem_slab_module+0x40>)
   317a6:	42a3      	cmp	r3, r4
   317a8:	d301      	bcc.n	317ae <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   317aa:	2000      	movs	r0, #0
	return rc;
}
   317ac:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   317ae:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   317b2:	ea41 0200 	orr.w	r2, r1, r0
   317b6:	f012 0203 	ands.w	r2, r2, #3
   317ba:	d10b      	bne.n	317d4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   317bc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   317be:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   317c0:	42aa      	cmp	r2, r5
   317c2:	d101      	bne.n	317c8 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   317c4:	331c      	adds	r3, #28
   317c6:	e7ee      	b.n	317a6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   317c8:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   317ca:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   317cc:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   317ce:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   317d0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   317d2:	e7f5      	b.n	317c0 <init_mem_slab_module+0x20>
		return -EINVAL;
   317d4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   317d8:	e7e8      	b.n	317ac <init_mem_slab_module+0xc>
   317da:	bf00      	nop
   317dc:	20020788 	.word	0x20020788
   317e0:	20020788 	.word	0x20020788

000317e4 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   317e4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   317e6:	460c      	mov	r4, r1
   317e8:	4616      	mov	r6, r2
   317ea:	461f      	mov	r7, r3
   317ec:	f04f 0320 	mov.w	r3, #32
   317f0:	f3ef 8111 	mrs	r1, BASEPRI
   317f4:	f383 8811 	msr	BASEPRI, r3
   317f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   317fc:	6943      	ldr	r3, [r0, #20]
   317fe:	b15b      	cbz	r3, 31818 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   31800:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   31802:	681b      	ldr	r3, [r3, #0]
   31804:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   31806:	6983      	ldr	r3, [r0, #24]
   31808:	3301      	adds	r3, #1
   3180a:	6183      	str	r3, [r0, #24]
		result = 0;
   3180c:	2000      	movs	r0, #0
	__asm__ volatile(
   3180e:	f381 8811 	msr	BASEPRI, r1
   31812:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   31816:	e011      	b.n	3183c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   31818:	ea56 0207 	orrs.w	r2, r6, r7
   3181c:	d103      	bne.n	31826 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   3181e:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   31822:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   31824:	e7f3      	b.n	3180e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   31826:	4602      	mov	r2, r0
   31828:	e9cd 6700 	strd	r6, r7, [sp]
   3182c:	4804      	ldr	r0, [pc, #16]	; (31840 <k_mem_slab_alloc+0x5c>)
   3182e:	f000 fc83 	bl	32138 <z_pend_curr>
		if (result == 0) {
   31832:	b918      	cbnz	r0, 3183c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   31834:	4b03      	ldr	r3, [pc, #12]	; (31844 <k_mem_slab_alloc+0x60>)
   31836:	689b      	ldr	r3, [r3, #8]
   31838:	695b      	ldr	r3, [r3, #20]
   3183a:	6023      	str	r3, [r4, #0]
}
   3183c:	b002      	add	sp, #8
   3183e:	bdd0      	pop	{r4, r6, r7, pc}
   31840:	2002cba0 	.word	0x2002cba0
   31844:	20024098 	.word	0x20024098

00031848 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   31848:	b570      	push	{r4, r5, r6, lr}
   3184a:	4604      	mov	r4, r0
   3184c:	460d      	mov	r5, r1
	__asm__ volatile(
   3184e:	f04f 0320 	mov.w	r3, #32
   31852:	f3ef 8611 	mrs	r6, BASEPRI
   31856:	f383 8811 	msr	BASEPRI, r3
   3185a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   3185e:	f005 fac1 	bl	36de4 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   31862:	b160      	cbz	r0, 3187e <k_mem_slab_free+0x36>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   31864:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   31866:	682a      	ldr	r2, [r5, #0]
   31868:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   3186c:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   3186e:	f005 fa5e 	bl	36d2e <z_ready_thread>
		z_reschedule(&lock, key);
   31872:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   31874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   31878:	4807      	ldr	r0, [pc, #28]	; (31898 <k_mem_slab_free+0x50>)
   3187a:	f000 b9f7 	b.w	31c6c <z_reschedule>
		**(char ***)mem = slab->free_list;
   3187e:	682b      	ldr	r3, [r5, #0]
   31880:	6962      	ldr	r2, [r4, #20]
   31882:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   31884:	682b      	ldr	r3, [r5, #0]
   31886:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   31888:	69a3      	ldr	r3, [r4, #24]
   3188a:	3b01      	subs	r3, #1
   3188c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   3188e:	f386 8811 	msr	BASEPRI, r6
   31892:	f3bf 8f6f 	isb	sy
}
   31896:	bd70      	pop	{r4, r5, r6, pc}
   31898:	2002cba0 	.word	0x2002cba0

0003189c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   3189c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   318a0:	4604      	mov	r4, r0
   318a2:	4616      	mov	r6, r2
   318a4:	461f      	mov	r7, r3
   318a6:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   318a8:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   318ac:	f04f 0320 	mov.w	r3, #32
   318b0:	f3ef 8811 	mrs	r8, BASEPRI
   318b4:	f383 8811 	msr	BASEPRI, r3
   318b8:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   318bc:	6a02      	ldr	r2, [r0, #32]
   318be:	68c3      	ldr	r3, [r0, #12]
   318c0:	429a      	cmp	r2, r3
   318c2:	d22c      	bcs.n	3191e <z_impl_k_msgq_put+0x82>
   318c4:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   318c6:	f005 fa8d 	bl	36de4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   318ca:	68a2      	ldr	r2, [r4, #8]
   318cc:	4605      	mov	r5, r0
   318ce:	9903      	ldr	r1, [sp, #12]
   318d0:	b180      	cbz	r0, 318f4 <z_impl_k_msgq_put+0x58>
   318d2:	2400      	movs	r4, #0
   318d4:	6940      	ldr	r0, [r0, #20]
   318d6:	f005 fd94 	bl	37402 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   318da:	4628      	mov	r0, r5
   318dc:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
   318e0:	f005 fa25 	bl	36d2e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   318e4:	4648      	mov	r0, r9
   318e6:	4641      	mov	r1, r8
   318e8:	f000 f9c0 	bl	31c6c <z_reschedule>
			return 0;
   318ec:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   318ee:	b005      	add	sp, #20
   318f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   318f4:	69e0      	ldr	r0, [r4, #28]
   318f6:	f005 fd84 	bl	37402 <memcpy>
		result = 0;
   318fa:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   318fc:	69e3      	ldr	r3, [r4, #28]
   318fe:	68a2      	ldr	r2, [r4, #8]
   31900:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   31902:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   31904:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   31906:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   31908:	bf04      	itt	eq
   3190a:	6923      	ldreq	r3, [r4, #16]
   3190c:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   3190e:	6a23      	ldr	r3, [r4, #32]
   31910:	3301      	adds	r3, #1
   31912:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   31914:	f388 8811 	msr	BASEPRI, r8
   31918:	f3bf 8f6f 	isb	sy
	return result;
   3191c:	e7e7      	b.n	318ee <z_impl_k_msgq_put+0x52>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3191e:	ea56 0307 	orrs.w	r3, r6, r7
   31922:	d00a      	beq.n	3193a <z_impl_k_msgq_put+0x9e>
		_current->base.swap_data = (void *) data;
   31924:	4b06      	ldr	r3, [pc, #24]	; (31940 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   31926:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   31928:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3192a:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   3192c:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3192e:	4641      	mov	r1, r8
   31930:	e9cd 6700 	strd	r6, r7, [sp]
   31934:	f000 fc00 	bl	32138 <z_pend_curr>
   31938:	e7d9      	b.n	318ee <z_impl_k_msgq_put+0x52>
		result = -ENOMSG;
   3193a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   3193e:	e7e9      	b.n	31914 <z_impl_k_msgq_put+0x78>
   31940:	20024098 	.word	0x20024098

00031944 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   31944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   31948:	4604      	mov	r4, r0
   3194a:	4616      	mov	r6, r2
   3194c:	4608      	mov	r0, r1
   3194e:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   31950:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   31954:	f04f 0320 	mov.w	r3, #32
   31958:	f3ef 8811 	mrs	r8, BASEPRI
   3195c:	f383 8811 	msr	BASEPRI, r3
   31960:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   31964:	6a23      	ldr	r3, [r4, #32]
   31966:	2b00      	cmp	r3, #0
   31968:	d033      	beq.n	319d2 <z_impl_k_msgq_get+0x8e>
   3196a:	68a2      	ldr	r2, [r4, #8]
   3196c:	69a1      	ldr	r1, [r4, #24]
   3196e:	f005 fd48 	bl	37402 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   31972:	69a3      	ldr	r3, [r4, #24]
   31974:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   31976:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   31978:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   3197a:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   3197c:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   3197e:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   31980:	bf04      	itt	eq
   31982:	6923      	ldreq	r3, [r4, #16]
   31984:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   31986:	6a23      	ldr	r3, [r4, #32]
   31988:	3b01      	subs	r3, #1
   3198a:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3198c:	f005 fa2a 	bl	36de4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   31990:	4605      	mov	r5, r0
   31992:	b370      	cbz	r0, 319f2 <z_impl_k_msgq_get+0xae>
   31994:	6941      	ldr	r1, [r0, #20]
   31996:	68a2      	ldr	r2, [r4, #8]
   31998:	69e0      	ldr	r0, [r4, #28]
   3199a:	f005 fd32 	bl	37402 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   3199e:	69e3      	ldr	r3, [r4, #28]
   319a0:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   319a2:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   319a4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   319a6:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   319a8:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   319aa:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   319ac:	bf04      	itt	eq
   319ae:	6923      	ldreq	r3, [r4, #16]
   319b0:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   319b2:	6a23      	ldr	r3, [r4, #32]
   319b4:	3301      	adds	r3, #1
   319b6:	6223      	str	r3, [r4, #32]
   319b8:	2400      	movs	r4, #0
   319ba:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
			z_ready_thread(pending_thread);
   319be:	f005 f9b6 	bl	36d2e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   319c2:	4648      	mov	r0, r9
   319c4:	4641      	mov	r1, r8
   319c6:	f000 f951 	bl	31c6c <z_reschedule>
			return 0;
   319ca:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   319cc:	b003      	add	sp, #12
   319ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   319d2:	ea56 0307 	orrs.w	r3, r6, r7
   319d6:	d00a      	beq.n	319ee <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   319d8:	4b08      	ldr	r3, [pc, #32]	; (319fc <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   319da:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   319dc:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   319de:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   319e0:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   319e2:	4641      	mov	r1, r8
   319e4:	e9cd 6700 	strd	r6, r7, [sp]
   319e8:	f000 fba6 	bl	32138 <z_pend_curr>
   319ec:	e7ee      	b.n	319cc <z_impl_k_msgq_get+0x88>
		result = -ENOMSG;
   319ee:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   319f2:	f388 8811 	msr	BASEPRI, r8
   319f6:	f3bf 8f6f 	isb	sy
	return result;
   319fa:	e7e7      	b.n	319cc <z_impl_k_msgq_get+0x88>
   319fc:	20024098 	.word	0x20024098

00031a00 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   31a00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   31a04:	4604      	mov	r4, r0
   31a06:	4616      	mov	r6, r2
   31a08:	461f      	mov	r7, r3
	__asm__ volatile(
   31a0a:	f04f 0320 	mov.w	r3, #32
   31a0e:	f3ef 8811 	mrs	r8, BASEPRI
   31a12:	f383 8811 	msr	BASEPRI, r3
   31a16:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   31a1a:	68c3      	ldr	r3, [r0, #12]
   31a1c:	4a32      	ldr	r2, [pc, #200]	; (31ae8 <z_impl_k_mutex_lock+0xe8>)
   31a1e:	b16b      	cbz	r3, 31a3c <z_impl_k_mutex_lock+0x3c>
   31a20:	6880      	ldr	r0, [r0, #8]
   31a22:	6891      	ldr	r1, [r2, #8]
   31a24:	4288      	cmp	r0, r1
   31a26:	d019      	beq.n	31a5c <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   31a28:	ea56 0307 	orrs.w	r3, r6, r7
   31a2c:	d118      	bne.n	31a60 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   31a2e:	f388 8811 	msr	BASEPRI, r8
   31a32:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   31a36:	f06f 000f 	mvn.w	r0, #15
   31a3a:	e00c      	b.n	31a56 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   31a3c:	6891      	ldr	r1, [r2, #8]
   31a3e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   31a42:	3301      	adds	r3, #1
   31a44:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   31a46:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   31a48:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   31a4a:	60a3      	str	r3, [r4, #8]
   31a4c:	f388 8811 	msr	BASEPRI, r8
   31a50:	f3bf 8f6f 	isb	sy
		return 0;
   31a54:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   31a56:	b002      	add	sp, #8
   31a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   31a5c:	6921      	ldr	r1, [r4, #16]
   31a5e:	e7f0      	b.n	31a42 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   31a60:	f990 300e 	ldrsb.w	r3, [r0, #14]
   31a64:	f991 100e 	ldrsb.w	r1, [r1, #14]
   31a68:	4299      	cmp	r1, r3
   31a6a:	bfa8      	it	ge
   31a6c:	4619      	movge	r1, r3
   31a6e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   31a72:	428b      	cmp	r3, r1
   31a74:	dd2c      	ble.n	31ad0 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   31a76:	f000 fba1 	bl	321bc <z_set_prio>
   31a7a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   31a7c:	4622      	mov	r2, r4
   31a7e:	4641      	mov	r1, r8
   31a80:	e9cd 6700 	strd	r6, r7, [sp]
   31a84:	4819      	ldr	r0, [pc, #100]	; (31aec <z_impl_k_mutex_lock+0xec>)
   31a86:	f000 fb57 	bl	32138 <z_pend_curr>
	if (got_mutex == 0) {
   31a8a:	2800      	cmp	r0, #0
   31a8c:	d0e3      	beq.n	31a56 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   31a8e:	f04f 0320 	mov.w	r3, #32
   31a92:	f3ef 8611 	mrs	r6, BASEPRI
   31a96:	f383 8811 	msr	BASEPRI, r3
   31a9a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   31a9e:	6823      	ldr	r3, [r4, #0]
   31aa0:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31aa2:	42a3      	cmp	r3, r4
   31aa4:	d007      	beq.n	31ab6 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   31aa6:	b133      	cbz	r3, 31ab6 <z_impl_k_mutex_lock+0xb6>
   31aa8:	f993 300e 	ldrsb.w	r3, [r3, #14]
   31aac:	4299      	cmp	r1, r3
   31aae:	bfa8      	it	ge
   31ab0:	4619      	movge	r1, r3
   31ab2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   31ab6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   31ab8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   31abc:	4299      	cmp	r1, r3
   31abe:	d109      	bne.n	31ad4 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   31ac0:	b16d      	cbz	r5, 31ade <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   31ac2:	4631      	mov	r1, r6
   31ac4:	4809      	ldr	r0, [pc, #36]	; (31aec <z_impl_k_mutex_lock+0xec>)
   31ac6:	f000 f8d1 	bl	31c6c <z_reschedule>
	return -EAGAIN;
   31aca:	f06f 000a 	mvn.w	r0, #10
   31ace:	e7c2      	b.n	31a56 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   31ad0:	2500      	movs	r5, #0
   31ad2:	e7d3      	b.n	31a7c <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   31ad4:	f000 fb72 	bl	321bc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   31ad8:	2800      	cmp	r0, #0
   31ada:	d1f2      	bne.n	31ac2 <z_impl_k_mutex_lock+0xc2>
   31adc:	e7f0      	b.n	31ac0 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   31ade:	f386 8811 	msr	BASEPRI, r6
   31ae2:	f3bf 8f6f 	isb	sy
   31ae6:	e7f0      	b.n	31aca <z_impl_k_mutex_lock+0xca>
   31ae8:	20024098 	.word	0x20024098
   31aec:	2002cba0 	.word	0x2002cba0

00031af0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   31af0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   31af2:	6883      	ldr	r3, [r0, #8]
{
   31af4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   31af6:	2b00      	cmp	r3, #0
   31af8:	d037      	beq.n	31b6a <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   31afa:	4a1f      	ldr	r2, [pc, #124]	; (31b78 <z_impl_k_mutex_unlock+0x88>)
   31afc:	6892      	ldr	r2, [r2, #8]
   31afe:	4293      	cmp	r3, r2
   31b00:	d136      	bne.n	31b70 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   31b02:	7bda      	ldrb	r2, [r3, #15]
   31b04:	3a01      	subs	r2, #1
   31b06:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   31b08:	68c3      	ldr	r3, [r0, #12]
   31b0a:	2b01      	cmp	r3, #1
   31b0c:	d005      	beq.n	31b1a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   31b0e:	3b01      	subs	r3, #1
   31b10:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   31b12:	f000 f90f 	bl	31d34 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   31b16:	2000      	movs	r0, #0
}
   31b18:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   31b1a:	f04f 0320 	mov.w	r3, #32
   31b1e:	f3ef 8511 	mrs	r5, BASEPRI
   31b22:	f383 8811 	msr	BASEPRI, r3
   31b26:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   31b2a:	6901      	ldr	r1, [r0, #16]
   31b2c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   31b2e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   31b32:	4299      	cmp	r1, r3
   31b34:	d001      	beq.n	31b3a <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   31b36:	f000 fb41 	bl	321bc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   31b3a:	4620      	mov	r0, r4
   31b3c:	f005 f952 	bl	36de4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   31b40:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   31b42:	b160      	cbz	r0, 31b5e <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   31b44:	f990 200e 	ldrsb.w	r2, [r0, #14]
   31b48:	6122      	str	r2, [r4, #16]
   31b4a:	2200      	movs	r2, #0
   31b4c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   31b50:	f005 f8ed 	bl	36d2e <z_ready_thread>
		z_reschedule(&lock, key);
   31b54:	4629      	mov	r1, r5
   31b56:	4809      	ldr	r0, [pc, #36]	; (31b7c <z_impl_k_mutex_unlock+0x8c>)
   31b58:	f000 f888 	bl	31c6c <z_reschedule>
   31b5c:	e7d9      	b.n	31b12 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   31b5e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   31b60:	f385 8811 	msr	BASEPRI, r5
   31b64:	f3bf 8f6f 	isb	sy
   31b68:	e7d3      	b.n	31b12 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   31b6a:	f06f 0015 	mvn.w	r0, #21
   31b6e:	e7d3      	b.n	31b18 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   31b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31b74:	e7d0      	b.n	31b18 <z_impl_k_mutex_unlock+0x28>
   31b76:	bf00      	nop
   31b78:	20024098 	.word	0x20024098
   31b7c:	2002cba0 	.word	0x2002cba0

00031b80 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   31b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   31b82:	4616      	mov	r6, r2
   31b84:	461f      	mov	r7, r3
	__asm__ volatile(
   31b86:	f04f 0320 	mov.w	r3, #32
   31b8a:	f3ef 8511 	mrs	r5, BASEPRI
   31b8e:	f383 8811 	msr	BASEPRI, r3
   31b92:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   31b96:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   31b98:	b19c      	cbz	r4, 31bc2 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   31b9a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   31b9c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   31b9e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   31ba2:	4294      	cmp	r4, r2
	list->head = node;
   31ba4:	6003      	str	r3, [r0, #0]
	list->tail = node;
   31ba6:	bf08      	it	eq
   31ba8:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   31baa:	2101      	movs	r1, #1
   31bac:	4620      	mov	r0, r4
   31bae:	f005 f826 	bl	36bfe <z_queue_node_peek>
   31bb2:	4604      	mov	r4, r0
	__asm__ volatile(
   31bb4:	f385 8811 	msr	BASEPRI, r5
   31bb8:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   31bbc:	4620      	mov	r0, r4
   31bbe:	b003      	add	sp, #12
   31bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   31bc2:	ea56 0307 	orrs.w	r3, r6, r7
   31bc6:	d0f5      	beq.n	31bb4 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   31bc8:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   31bcc:	4629      	mov	r1, r5
   31bce:	4610      	mov	r0, r2
   31bd0:	e9cd 6700 	strd	r6, r7, [sp]
   31bd4:	f000 fab0 	bl	32138 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   31bd8:	2800      	cmp	r0, #0
   31bda:	d1ef      	bne.n	31bbc <z_impl_k_queue_get+0x3c>
   31bdc:	4b01      	ldr	r3, [pc, #4]	; (31be4 <z_impl_k_queue_get+0x64>)
   31bde:	689b      	ldr	r3, [r3, #8]
   31be0:	695c      	ldr	r4, [r3, #20]
   31be2:	e7eb      	b.n	31bbc <z_impl_k_queue_get+0x3c>
   31be4:	20024098 	.word	0x20024098

00031be8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   31be8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   31bea:	4c08      	ldr	r4, [pc, #32]	; (31c0c <z_reset_time_slice+0x24>)
   31bec:	6823      	ldr	r3, [r4, #0]
   31bee:	b15b      	cbz	r3, 31c08 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   31bf0:	f7ef fe82 	bl	218f8 <z_clock_elapsed>
   31bf4:	6822      	ldr	r2, [r4, #0]
   31bf6:	4906      	ldr	r1, [pc, #24]	; (31c10 <z_reset_time_slice+0x28>)
   31bf8:	4410      	add	r0, r2
   31bfa:	6148      	str	r0, [r1, #20]
		z_set_timeout_expiry(slice_time, false);
	}
}
   31bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   31c00:	2100      	movs	r1, #0
   31c02:	4610      	mov	r0, r2
   31c04:	f005 b9de 	b.w	36fc4 <z_set_timeout_expiry>
}
   31c08:	bd10      	pop	{r4, pc}
   31c0a:	bf00      	nop
   31c0c:	200240d8 	.word	0x200240d8
   31c10:	20024098 	.word	0x20024098

00031c14 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   31c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31c16:	460c      	mov	r4, r1
	__asm__ volatile(
   31c18:	f04f 0320 	mov.w	r3, #32
   31c1c:	f3ef 8511 	mrs	r5, BASEPRI
   31c20:	f383 8811 	msr	BASEPRI, r3
   31c24:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   31c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   31c2c:	f240 36e7 	movw	r6, #999	; 0x3e7
   31c30:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   31c32:	2200      	movs	r2, #0
   31c34:	fbe1 6700 	umlal	r6, r7, r1, r0
   31c38:	4b09      	ldr	r3, [pc, #36]	; (31c60 <k_sched_time_slice_set+0x4c>)
   31c3a:	4630      	mov	r0, r6
   31c3c:	615a      	str	r2, [r3, #20]
   31c3e:	4639      	mov	r1, r7
   31c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   31c44:	2300      	movs	r3, #0
   31c46:	f7e6 fdb7 	bl	187b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   31c4a:	4b06      	ldr	r3, [pc, #24]	; (31c64 <k_sched_time_slice_set+0x50>)
   31c4c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   31c4e:	4b06      	ldr	r3, [pc, #24]	; (31c68 <k_sched_time_slice_set+0x54>)
   31c50:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   31c52:	f7ff ffc9 	bl	31be8 <z_reset_time_slice>
	__asm__ volatile(
   31c56:	f385 8811 	msr	BASEPRI, r5
   31c5a:	f3bf 8f6f 	isb	sy
	}
}
   31c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31c60:	20024098 	.word	0x20024098
   31c64:	200240d8 	.word	0x200240d8
   31c68:	200240d4 	.word	0x200240d4

00031c6c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   31c6c:	b949      	cbnz	r1, 31c82 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   31c6e:	f3ef 8005 	mrs	r0, IPSR
   31c72:	b930      	cbnz	r0, 31c82 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   31c74:	4b05      	ldr	r3, [pc, #20]	; (31c8c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   31c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   31c78:	689b      	ldr	r3, [r3, #8]
   31c7a:	429a      	cmp	r2, r3
   31c7c:	d001      	beq.n	31c82 <z_reschedule+0x16>
	return z_swap_irqlock(key.key);
   31c7e:	f004 bfe1 	b.w	36c44 <z_swap_irqlock>
   31c82:	f381 8811 	msr	BASEPRI, r1
   31c86:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   31c8a:	4770      	bx	lr
   31c8c:	20024098 	.word	0x20024098

00031c90 <k_sched_lock>:
	__asm__ volatile(
   31c90:	f04f 0320 	mov.w	r3, #32
   31c94:	f3ef 8111 	mrs	r1, BASEPRI
   31c98:	f383 8811 	msr	BASEPRI, r3
   31c9c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   31ca0:	4b04      	ldr	r3, [pc, #16]	; (31cb4 <k_sched_lock+0x24>)
   31ca2:	689a      	ldr	r2, [r3, #8]
   31ca4:	7bd3      	ldrb	r3, [r2, #15]
   31ca6:	3b01      	subs	r3, #1
   31ca8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   31caa:	f381 8811 	msr	BASEPRI, r1
   31cae:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   31cb2:	4770      	bx	lr
   31cb4:	20024098 	.word	0x20024098

00031cb8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   31cb8:	4b09      	ldr	r3, [pc, #36]	; (31ce0 <z_priq_dumb_remove+0x28>)
   31cba:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   31cbe:	4282      	cmp	r2, r0
   31cc0:	d105      	bne.n	31cce <z_priq_dumb_remove+0x16>
   31cc2:	689b      	ldr	r3, [r3, #8]
   31cc4:	428b      	cmp	r3, r1
   31cc6:	d102      	bne.n	31cce <z_priq_dumb_remove+0x16>
   31cc8:	7b4b      	ldrb	r3, [r1, #13]
   31cca:	06db      	lsls	r3, r3, #27
   31ccc:	d106      	bne.n	31cdc <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   31cce:	e9d1 3200 	ldrd	r3, r2, [r1]
   31cd2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   31cd4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   31cd6:	2300      	movs	r3, #0
	node->prev = NULL;
   31cd8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   31cdc:	4770      	bx	lr
   31cde:	bf00      	nop
   31ce0:	20024098 	.word	0x20024098

00031ce4 <update_cache>:
{
   31ce4:	b538      	push	{r3, r4, r5, lr}
   31ce6:	4c12      	ldr	r4, [pc, #72]	; (31d30 <update_cache+0x4c>)
   31ce8:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   31cea:	6923      	ldr	r3, [r4, #16]
   31cec:	68a2      	ldr	r2, [r4, #8]
   31cee:	b10b      	cbz	r3, 31cf4 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   31cf0:	68e5      	ldr	r5, [r4, #12]
   31cf2:	e00c      	b.n	31d0e <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   31cf4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   31cf8:	f005 f80f 	bl	36d1a <z_priq_dumb_best>
   31cfc:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   31cfe:	7b53      	ldrb	r3, [r2, #13]
   31d00:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   31d02:	bf44      	itt	mi
   31d04:	f043 0308 	orrmi.w	r3, r3, #8
   31d08:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   31d0a:	2d00      	cmp	r5, #0
   31d0c:	d0f0      	beq.n	31cf0 <update_cache+0xc>
	if (preempt_ok != 0) {
   31d0e:	b949      	cbnz	r1, 31d24 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   31d10:	7b53      	ldrb	r3, [r2, #13]
   31d12:	06db      	lsls	r3, r3, #27
   31d14:	d106      	bne.n	31d24 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   31d16:	69ab      	ldr	r3, [r5, #24]
   31d18:	b923      	cbnz	r3, 31d24 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   31d1a:	89d3      	ldrh	r3, [r2, #14]
   31d1c:	2b7f      	cmp	r3, #127	; 0x7f
   31d1e:	d901      	bls.n	31d24 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   31d20:	62a2      	str	r2, [r4, #40]	; 0x28
}
   31d22:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   31d24:	4295      	cmp	r5, r2
   31d26:	d001      	beq.n	31d2c <update_cache+0x48>
			z_reset_time_slice();
   31d28:	f7ff ff5e 	bl	31be8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   31d2c:	62a5      	str	r5, [r4, #40]	; 0x28
}
   31d2e:	e7f8      	b.n	31d22 <update_cache+0x3e>
   31d30:	20024098 	.word	0x20024098

00031d34 <k_sched_unlock>:
{
   31d34:	b510      	push	{r4, lr}
	__asm__ volatile(
   31d36:	f04f 0320 	mov.w	r3, #32
   31d3a:	f3ef 8411 	mrs	r4, BASEPRI
   31d3e:	f383 8811 	msr	BASEPRI, r3
   31d42:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   31d46:	4b08      	ldr	r3, [pc, #32]	; (31d68 <k_sched_unlock+0x34>)
		update_cache(0);
   31d48:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   31d4a:	689a      	ldr	r2, [r3, #8]
   31d4c:	7bd3      	ldrb	r3, [r2, #15]
   31d4e:	3301      	adds	r3, #1
   31d50:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   31d52:	f7ff ffc7 	bl	31ce4 <update_cache>
	__asm__ volatile(
   31d56:	f384 8811 	msr	BASEPRI, r4
   31d5a:	f3bf 8f6f 	isb	sy
}
   31d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   31d62:	f004 bfae 	b.w	36cc2 <z_reschedule_unlocked>
   31d66:	bf00      	nop
   31d68:	20024098 	.word	0x20024098

00031d6c <ready_thread>:
{
   31d6c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   31d6e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   31d72:	7b43      	ldrb	r3, [r0, #13]
   31d74:	2a00      	cmp	r2, #0
   31d76:	db2c      	blt.n	31dd2 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   31d78:	06db      	lsls	r3, r3, #27
   31d7a:	d12a      	bne.n	31dd2 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   31d7c:	6983      	ldr	r3, [r0, #24]
   31d7e:	bb43      	cbnz	r3, 31dd2 <ready_thread+0x66>
	return list->head == list;
   31d80:	4a15      	ldr	r2, [pc, #84]	; (31dd8 <ready_thread+0x6c>)
   31d82:	4611      	mov	r1, r2
   31d84:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31d88:	428c      	cmp	r4, r1
   31d8a:	bf18      	it	ne
   31d8c:	4623      	movne	r3, r4
   31d8e:	2b00      	cmp	r3, #0
   31d90:	bf38      	it	cc
   31d92:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   31d94:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   31d96:	b1b3      	cbz	r3, 31dc6 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   31d98:	f990 600e 	ldrsb.w	r6, [r0, #14]
   31d9c:	f993 500e 	ldrsb.w	r5, [r3, #14]
   31da0:	42ae      	cmp	r6, r5
   31da2:	db03      	blt.n	31dac <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   31da4:	42a3      	cmp	r3, r4
   31da6:	d00e      	beq.n	31dc6 <ready_thread+0x5a>
   31da8:	681b      	ldr	r3, [r3, #0]
   31daa:	e7f4      	b.n	31d96 <ready_thread+0x2a>
	node->prev = successor->prev;
   31dac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   31dae:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   31db2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   31db4:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   31db6:	7b43      	ldrb	r3, [r0, #13]
   31db8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   31dbc:	7343      	strb	r3, [r0, #13]
}
   31dbe:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   31dc0:	2000      	movs	r0, #0
   31dc2:	f7ff bf8f 	b.w	31ce4 <update_cache>
	node->prev = list->tail;
   31dc6:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   31dca:	6b13      	ldr	r3, [r2, #48]	; 0x30
   31dcc:	6018      	str	r0, [r3, #0]
	list->tail = node;
   31dce:	6310      	str	r0, [r2, #48]	; 0x30
}
   31dd0:	e7f1      	b.n	31db6 <ready_thread+0x4a>
}
   31dd2:	bc70      	pop	{r4, r5, r6}
   31dd4:	4770      	bx	lr
   31dd6:	bf00      	nop
   31dd8:	20024098 	.word	0x20024098

00031ddc <z_sched_start>:
{
   31ddc:	b510      	push	{r4, lr}
	__asm__ volatile(
   31dde:	f04f 0220 	mov.w	r2, #32
   31de2:	f3ef 8411 	mrs	r4, BASEPRI
   31de6:	f382 8811 	msr	BASEPRI, r2
   31dea:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   31dee:	7b42      	ldrb	r2, [r0, #13]
   31df0:	0751      	lsls	r1, r2, #29
   31df2:	d404      	bmi.n	31dfe <z_sched_start+0x22>
	__asm__ volatile(
   31df4:	f384 8811 	msr	BASEPRI, r4
   31df8:	f3bf 8f6f 	isb	sy
}
   31dfc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   31dfe:	f022 0204 	bic.w	r2, r2, #4
   31e02:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   31e04:	f7ff ffb2 	bl	31d6c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   31e08:	4621      	mov	r1, r4
}
   31e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   31e0e:	4801      	ldr	r0, [pc, #4]	; (31e14 <z_sched_start+0x38>)
   31e10:	f7ff bf2c 	b.w	31c6c <z_reschedule>
   31e14:	2002cba0 	.word	0x2002cba0

00031e18 <z_impl_k_thread_resume>:
{
   31e18:	b510      	push	{r4, lr}
	__asm__ volatile(
   31e1a:	f04f 0220 	mov.w	r2, #32
   31e1e:	f3ef 8411 	mrs	r4, BASEPRI
   31e22:	f382 8811 	msr	BASEPRI, r2
   31e26:	f3bf 8f6f 	isb	sy
	if (!z_is_thread_suspended(thread)) {
   31e2a:	7b42      	ldrb	r2, [r0, #13]
   31e2c:	06d1      	lsls	r1, r2, #27
   31e2e:	d404      	bmi.n	31e3a <z_impl_k_thread_resume+0x22>
	__asm__ volatile(
   31e30:	f384 8811 	msr	BASEPRI, r4
   31e34:	f3bf 8f6f 	isb	sy
}
   31e38:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   31e3a:	f022 0210 	bic.w	r2, r2, #16
   31e3e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   31e40:	f7ff ff94 	bl	31d6c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   31e44:	4621      	mov	r1, r4
}
   31e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   31e4a:	4801      	ldr	r0, [pc, #4]	; (31e50 <z_impl_k_thread_resume+0x38>)
   31e4c:	f7ff bf0e 	b.w	31c6c <z_reschedule>
   31e50:	2002cba0 	.word	0x2002cba0

00031e54 <move_thread_to_end_of_prio_q>:
{
   31e54:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   31e56:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   31e5a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   31e5c:	2b00      	cmp	r3, #0
   31e5e:	da02      	bge.n	31e66 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   31e60:	4817      	ldr	r0, [pc, #92]	; (31ec0 <move_thread_to_end_of_prio_q+0x6c>)
   31e62:	f7ff ff29 	bl	31cb8 <z_priq_dumb_remove>
	return list->head == list;
   31e66:	4a17      	ldr	r2, [pc, #92]	; (31ec4 <move_thread_to_end_of_prio_q+0x70>)
   31e68:	4610      	mov	r0, r2
   31e6a:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   31e6e:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31e70:	4283      	cmp	r3, r0
   31e72:	bf08      	it	eq
   31e74:	2300      	moveq	r3, #0
   31e76:	2b00      	cmp	r3, #0
   31e78:	bf38      	it	cc
   31e7a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   31e7c:	b1d3      	cbz	r3, 31eb4 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   31e7e:	f991 600e 	ldrsb.w	r6, [r1, #14]
   31e82:	f993 500e 	ldrsb.w	r5, [r3, #14]
   31e86:	42ae      	cmp	r6, r5
   31e88:	db03      	blt.n	31e92 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   31e8a:	42a3      	cmp	r3, r4
   31e8c:	d012      	beq.n	31eb4 <move_thread_to_end_of_prio_q+0x60>
   31e8e:	681b      	ldr	r3, [r3, #0]
   31e90:	e7f4      	b.n	31e7c <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   31e92:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   31e94:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   31e98:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   31e9a:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   31e9c:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   31e9e:	6890      	ldr	r0, [r2, #8]
   31ea0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   31ea4:	734b      	strb	r3, [r1, #13]
   31ea6:	1a43      	subs	r3, r0, r1
   31ea8:	4258      	negs	r0, r3
   31eaa:	4158      	adcs	r0, r3
}
   31eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   31eb0:	f7ff bf18 	b.w	31ce4 <update_cache>
	node->prev = list->tail;
   31eb4:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   31eb8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   31eba:	6019      	str	r1, [r3, #0]
	list->tail = node;
   31ebc:	6311      	str	r1, [r2, #48]	; 0x30
}
   31ebe:	e7ed      	b.n	31e9c <move_thread_to_end_of_prio_q+0x48>
   31ec0:	200240c4 	.word	0x200240c4
   31ec4:	20024098 	.word	0x20024098

00031ec8 <z_time_slice>:
{
   31ec8:	4601      	mov	r1, r0
   31eca:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   31ecc:	f04f 0320 	mov.w	r3, #32
   31ed0:	f3ef 8411 	mrs	r4, BASEPRI
   31ed4:	f383 8811 	msr	BASEPRI, r3
   31ed8:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   31edc:	4b16      	ldr	r3, [pc, #88]	; (31f38 <z_time_slice+0x70>)
   31ede:	4a17      	ldr	r2, [pc, #92]	; (31f3c <z_time_slice+0x74>)
   31ee0:	6898      	ldr	r0, [r3, #8]
   31ee2:	6815      	ldr	r5, [r2, #0]
   31ee4:	42a8      	cmp	r0, r5
   31ee6:	461d      	mov	r5, r3
   31ee8:	d106      	bne.n	31ef8 <z_time_slice+0x30>
			z_reset_time_slice();
   31eea:	f7ff fe7d 	bl	31be8 <z_reset_time_slice>
	__asm__ volatile(
   31eee:	f384 8811 	msr	BASEPRI, r4
   31ef2:	f3bf 8f6f 	isb	sy
}
   31ef6:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   31ef8:	2600      	movs	r6, #0
   31efa:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   31efc:	4a10      	ldr	r2, [pc, #64]	; (31f40 <z_time_slice+0x78>)
   31efe:	6812      	ldr	r2, [r2, #0]
   31f00:	b1ba      	cbz	r2, 31f32 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   31f02:	89c2      	ldrh	r2, [r0, #14]
   31f04:	2a7f      	cmp	r2, #127	; 0x7f
   31f06:	d814      	bhi.n	31f32 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   31f08:	7b42      	ldrb	r2, [r0, #13]
   31f0a:	06d2      	lsls	r2, r2, #27
   31f0c:	d111      	bne.n	31f32 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   31f0e:	4a0d      	ldr	r2, [pc, #52]	; (31f44 <z_time_slice+0x7c>)
   31f10:	f990 600e 	ldrsb.w	r6, [r0, #14]
   31f14:	6812      	ldr	r2, [r2, #0]
   31f16:	4296      	cmp	r6, r2
   31f18:	db0b      	blt.n	31f32 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   31f1a:	4a0b      	ldr	r2, [pc, #44]	; (31f48 <z_time_slice+0x80>)
   31f1c:	4290      	cmp	r0, r2
   31f1e:	d008      	beq.n	31f32 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   31f20:	695a      	ldr	r2, [r3, #20]
   31f22:	428a      	cmp	r2, r1
   31f24:	dc02      	bgt.n	31f2c <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   31f26:	f7ff ff95 	bl	31e54 <move_thread_to_end_of_prio_q>
   31f2a:	e7de      	b.n	31eea <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   31f2c:	1a52      	subs	r2, r2, r1
   31f2e:	615a      	str	r2, [r3, #20]
   31f30:	e7dd      	b.n	31eee <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   31f32:	2300      	movs	r3, #0
   31f34:	616b      	str	r3, [r5, #20]
   31f36:	e7da      	b.n	31eee <z_time_slice+0x26>
   31f38:	20024098 	.word	0x20024098
   31f3c:	200240d0 	.word	0x200240d0
   31f40:	200240d8 	.word	0x200240d8
   31f44:	200240d4 	.word	0x200240d4
   31f48:	200231b8 	.word	0x200231b8

00031f4c <z_impl_k_thread_suspend>:
{
   31f4c:	b570      	push	{r4, r5, r6, lr}
   31f4e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   31f50:	3018      	adds	r0, #24
   31f52:	f005 f811 	bl	36f78 <z_abort_timeout>
	__asm__ volatile(
   31f56:	f04f 0320 	mov.w	r3, #32
   31f5a:	f3ef 8611 	mrs	r6, BASEPRI
   31f5e:	f383 8811 	msr	BASEPRI, r3
   31f62:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   31f66:	f994 300d 	ldrsb.w	r3, [r4, #13]
   31f6a:	2b00      	cmp	r3, #0
   31f6c:	da07      	bge.n	31f7e <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   31f6e:	4621      	mov	r1, r4
   31f70:	480e      	ldr	r0, [pc, #56]	; (31fac <z_impl_k_thread_suspend+0x60>)
   31f72:	f7ff fea1 	bl	31cb8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   31f76:	7b63      	ldrb	r3, [r4, #13]
   31f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   31f7c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   31f7e:	4d0c      	ldr	r5, [pc, #48]	; (31fb0 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   31f80:	7b63      	ldrb	r3, [r4, #13]
   31f82:	68a8      	ldr	r0, [r5, #8]
   31f84:	f043 0310 	orr.w	r3, r3, #16
   31f88:	7363      	strb	r3, [r4, #13]
   31f8a:	1b03      	subs	r3, r0, r4
   31f8c:	4258      	negs	r0, r3
   31f8e:	4158      	adcs	r0, r3
   31f90:	f7ff fea8 	bl	31ce4 <update_cache>
	__asm__ volatile(
   31f94:	f386 8811 	msr	BASEPRI, r6
   31f98:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   31f9c:	68ab      	ldr	r3, [r5, #8]
   31f9e:	42a3      	cmp	r3, r4
   31fa0:	d103      	bne.n	31faa <z_impl_k_thread_suspend+0x5e>
}
   31fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   31fa6:	f004 be8c 	b.w	36cc2 <z_reschedule_unlocked>
}
   31faa:	bd70      	pop	{r4, r5, r6, pc}
   31fac:	200240c4 	.word	0x200240c4
   31fb0:	20024098 	.word	0x20024098

00031fb4 <z_thread_single_abort>:
{
   31fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31fb8:	4604      	mov	r4, r0
	__asm__ volatile(
   31fba:	f04f 0320 	mov.w	r3, #32
   31fbe:	f3ef 8211 	mrs	r2, BASEPRI
   31fc2:	f383 8811 	msr	BASEPRI, r3
   31fc6:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   31fca:	7b43      	ldrb	r3, [r0, #13]
   31fcc:	f013 0f28 	tst.w	r3, #40	; 0x28
   31fd0:	d005      	beq.n	31fde <z_thread_single_abort+0x2a>
	__asm__ volatile(
   31fd2:	f382 8811 	msr	BASEPRI, r2
   31fd6:	f3bf 8f6f 	isb	sy
}
   31fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   31fde:	f043 0320 	orr.w	r3, r3, #32
   31fe2:	7343      	strb	r3, [r0, #13]
   31fe4:	f382 8811 	msr	BASEPRI, r2
   31fe8:	f3bf 8f6f 	isb	sy
   31fec:	3018      	adds	r0, #24
   31fee:	f004 ffc3 	bl	36f78 <z_abort_timeout>
	__asm__ volatile(
   31ff2:	f04f 0320 	mov.w	r3, #32
   31ff6:	f3ef 8611 	mrs	r6, BASEPRI
   31ffa:	f383 8811 	msr	BASEPRI, r3
   31ffe:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   32002:	7b63      	ldrb	r3, [r4, #13]
   32004:	06d8      	lsls	r0, r3, #27
   32006:	d116      	bne.n	32036 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   32008:	69a2      	ldr	r2, [r4, #24]
   3200a:	b9a2      	cbnz	r2, 32036 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   3200c:	0619      	lsls	r1, r3, #24
   3200e:	d507      	bpl.n	32020 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   32010:	4621      	mov	r1, r4
   32012:	4826      	ldr	r0, [pc, #152]	; (320ac <z_thread_single_abort+0xf8>)
   32014:	f7ff fe50 	bl	31cb8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   32018:	7b63      	ldrb	r3, [r4, #13]
   3201a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3201e:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   32020:	4b23      	ldr	r3, [pc, #140]	; (320b0 <z_thread_single_abort+0xfc>)
   32022:	6898      	ldr	r0, [r3, #8]
   32024:	1b02      	subs	r2, r0, r4
   32026:	4250      	negs	r0, r2
   32028:	4150      	adcs	r0, r2
   3202a:	f7ff fe5b 	bl	31ce4 <update_cache>
			waiter->base.pended_on = NULL;
   3202e:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   32030:	f104 0830 	add.w	r8, r4, #48	; 0x30
   32034:	e01e      	b.n	32074 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   32036:	079b      	lsls	r3, r3, #30
   32038:	d5f9      	bpl.n	3202e <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   3203a:	4621      	mov	r1, r4
   3203c:	68a0      	ldr	r0, [r4, #8]
   3203e:	f7ff fe3b 	bl	31cb8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   32042:	7b63      	ldrb	r3, [r4, #13]
   32044:	f023 0302 	bic.w	r3, r3, #2
   32048:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   3204a:	2300      	movs	r3, #0
   3204c:	60a3      	str	r3, [r4, #8]
   3204e:	e7ee      	b.n	3202e <z_thread_single_abort+0x7a>
   32050:	f105 0018 	add.w	r0, r5, #24
   32054:	f004 ff90 	bl	36f78 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   32058:	68a8      	ldr	r0, [r5, #8]
   3205a:	4629      	mov	r1, r5
   3205c:	f7ff fe2c 	bl	31cb8 <z_priq_dumb_remove>
   32060:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   32062:	4628      	mov	r0, r5
   32064:	f023 0302 	bic.w	r3, r3, #2
   32068:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   3206a:	60af      	str	r7, [r5, #8]
   3206c:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   32070:	f7ff fe7c 	bl	31d6c <ready_thread>
	return list->head == list;
   32074:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32076:	4545      	cmp	r5, r8
   32078:	d001      	beq.n	3207e <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   3207a:	2d00      	cmp	r5, #0
   3207c:	d1e8      	bne.n	32050 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   3207e:	4b0c      	ldr	r3, [pc, #48]	; (320b0 <z_thread_single_abort+0xfc>)
   32080:	689a      	ldr	r2, [r3, #8]
   32082:	4b0c      	ldr	r3, [pc, #48]	; (320b4 <z_thread_single_abort+0x100>)
   32084:	429a      	cmp	r2, r3
   32086:	d102      	bne.n	3208e <z_thread_single_abort+0xda>
			update_cache(1);
   32088:	2001      	movs	r0, #1
   3208a:	f7ff fe2b 	bl	31ce4 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   3208e:	7b63      	ldrb	r3, [r4, #13]
   32090:	f043 0308 	orr.w	r3, r3, #8
   32094:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   32096:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   32098:	f386 8811 	msr	BASEPRI, r6
   3209c:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   320a0:	2b00      	cmp	r3, #0
   320a2:	d09a      	beq.n	31fda <z_thread_single_abort+0x26>
		fn_abort(thread);
   320a4:	4620      	mov	r0, r4
}
   320a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   320aa:	4718      	bx	r3
   320ac:	200240c4 	.word	0x200240c4
   320b0:	20024098 	.word	0x20024098
   320b4:	200231b8 	.word	0x200231b8

000320b8 <unready_thread>:
{
   320b8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   320ba:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   320be:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   320c0:	2b00      	cmp	r3, #0
   320c2:	da06      	bge.n	320d2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   320c4:	4807      	ldr	r0, [pc, #28]	; (320e4 <unready_thread+0x2c>)
   320c6:	f7ff fdf7 	bl	31cb8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   320ca:	7b4b      	ldrb	r3, [r1, #13]
   320cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   320d0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   320d2:	4b05      	ldr	r3, [pc, #20]	; (320e8 <unready_thread+0x30>)
   320d4:	6898      	ldr	r0, [r3, #8]
   320d6:	1a43      	subs	r3, r0, r1
   320d8:	4258      	negs	r0, r3
   320da:	4158      	adcs	r0, r3
}
   320dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   320e0:	f7ff be00 	b.w	31ce4 <update_cache>
   320e4:	200240c4 	.word	0x200240c4
   320e8:	20024098 	.word	0x20024098

000320ec <pend>:
{
   320ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   320f0:	4606      	mov	r6, r0
   320f2:	4614      	mov	r4, r2
   320f4:	461d      	mov	r5, r3
	__asm__ volatile(
   320f6:	f04f 0320 	mov.w	r3, #32
   320fa:	f3ef 8711 	mrs	r7, BASEPRI
   320fe:	f383 8811 	msr	BASEPRI, r3
   32102:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   32106:	f004 fe42 	bl	36d8e <add_to_waitq_locked>
	__asm__ volatile(
   3210a:	f387 8811 	msr	BASEPRI, r7
   3210e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   32112:	1c6b      	adds	r3, r5, #1
   32114:	bf08      	it	eq
   32116:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   3211a:	d008      	beq.n	3212e <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3211c:	4622      	mov	r2, r4
   3211e:	462b      	mov	r3, r5
   32120:	f106 0018 	add.w	r0, r6, #24
   32124:	4903      	ldr	r1, [pc, #12]	; (32134 <pend+0x48>)
}
   32126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3212a:	f000 bb13 	b.w	32754 <z_add_timeout>
   3212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32132:	bf00      	nop
   32134:	00036d4f 	.word	0x00036d4f

00032138 <z_pend_curr>:
{
   32138:	b510      	push	{r4, lr}
   3213a:	460c      	mov	r4, r1
	pending_current = _current;
   3213c:	4b06      	ldr	r3, [pc, #24]	; (32158 <z_pend_curr+0x20>)
{
   3213e:	4611      	mov	r1, r2
	pending_current = _current;
   32140:	6898      	ldr	r0, [r3, #8]
   32142:	4b06      	ldr	r3, [pc, #24]	; (3215c <z_pend_curr+0x24>)
   32144:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   32146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3214a:	f7ff ffcf 	bl	320ec <pend>
   3214e:	4620      	mov	r0, r4
}
   32150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32154:	f004 bd76 	b.w	36c44 <z_swap_irqlock>
   32158:	20024098 	.word	0x20024098
   3215c:	200240d0 	.word	0x200240d0

00032160 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   32160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32162:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   32164:	f004 ff49 	bl	36ffa <z_tick_get_32>
   32168:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   3216a:	f04f 0320 	mov.w	r3, #32
   3216e:	f3ef 8711 	mrs	r7, BASEPRI
   32172:	f383 8811 	msr	BASEPRI, r3
   32176:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   3217a:	4e0d      	ldr	r6, [pc, #52]	; (321b0 <z_tick_sleep.part.0+0x50>)
   3217c:	4b0d      	ldr	r3, [pc, #52]	; (321b4 <z_tick_sleep.part.0+0x54>)
   3217e:	68b0      	ldr	r0, [r6, #8]
   32180:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   32182:	f7ff ff99 	bl	320b8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   32186:	68b0      	ldr	r0, [r6, #8]
   32188:	490b      	ldr	r1, [pc, #44]	; (321b8 <z_tick_sleep.part.0+0x58>)
   3218a:	462a      	mov	r2, r5
   3218c:	17eb      	asrs	r3, r5, #31
   3218e:	3018      	adds	r0, #24
   32190:	f000 fae0 	bl	32754 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   32194:	68b2      	ldr	r2, [r6, #8]
   32196:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   32198:	7b53      	ldrb	r3, [r2, #13]
   3219a:	f043 0310 	orr.w	r3, r3, #16
   3219e:	7353      	strb	r3, [r2, #13]
   321a0:	f004 fd50 	bl	36c44 <z_swap_irqlock>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   321a4:	f004 ff29 	bl	36ffa <z_tick_get_32>
   321a8:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   321aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   321ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   321b0:	20024098 	.word	0x20024098
   321b4:	200240d0 	.word	0x200240d0
   321b8:	00036d4f 	.word	0x00036d4f

000321bc <z_set_prio>:
{
   321bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   321c0:	4604      	mov	r4, r0
   321c2:	f04f 0320 	mov.w	r3, #32
   321c6:	f3ef 8811 	mrs	r8, BASEPRI
   321ca:	f383 8811 	msr	BASEPRI, r3
   321ce:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   321d2:	7b43      	ldrb	r3, [r0, #13]
   321d4:	b24e      	sxtb	r6, r1
   321d6:	06db      	lsls	r3, r3, #27
   321d8:	d12e      	bne.n	32238 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   321da:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   321dc:	bb65      	cbnz	r5, 32238 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   321de:	4f18      	ldr	r7, [pc, #96]	; (32240 <z_set_prio+0x84>)
   321e0:	4621      	mov	r1, r4
   321e2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   321e6:	f7ff fd67 	bl	31cb8 <z_priq_dumb_remove>
	return list->head == list;
   321ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   321ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   321ee:	4283      	cmp	r3, r0
   321f0:	bf18      	it	ne
   321f2:	461d      	movne	r5, r3
   321f4:	2d00      	cmp	r5, #0
   321f6:	bf38      	it	cc
   321f8:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   321fa:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   321fc:	b1b5      	cbz	r5, 3222c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   321fe:	f995 100e 	ldrsb.w	r1, [r5, #14]
   32202:	42b1      	cmp	r1, r6
   32204:	dc03      	bgt.n	3220e <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   32206:	42aa      	cmp	r2, r5
   32208:	d010      	beq.n	3222c <z_set_prio+0x70>
   3220a:	682d      	ldr	r5, [r5, #0]
   3220c:	e7f6      	b.n	321fc <z_set_prio+0x40>
	node->prev = successor->prev;
   3220e:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   32210:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   32214:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   32216:	606c      	str	r4, [r5, #4]
			update_cache(1);
   32218:	2001      	movs	r0, #1
   3221a:	f7ff fd63 	bl	31ce4 <update_cache>
   3221e:	2001      	movs	r0, #1
	__asm__ volatile(
   32220:	f388 8811 	msr	BASEPRI, r8
   32224:	f3bf 8f6f 	isb	sy
}
   32228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   3222c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   32230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32232:	601c      	str	r4, [r3, #0]
	list->tail = node;
   32234:	633c      	str	r4, [r7, #48]	; 0x30
}
   32236:	e7ef      	b.n	32218 <z_set_prio+0x5c>
			thread->base.prio = prio;
   32238:	2000      	movs	r0, #0
   3223a:	73a6      	strb	r6, [r4, #14]
   3223c:	e7f0      	b.n	32220 <z_set_prio+0x64>
   3223e:	bf00      	nop
   32240:	20024098 	.word	0x20024098

00032244 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   32244:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   32246:	4b04      	ldr	r3, [pc, #16]	; (32258 <z_sched_init+0x14>)
   32248:	4608      	mov	r0, r1
   3224a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   3224e:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   32252:	f7ff bcdf 	b.w	31c14 <k_sched_time_slice_set>
   32256:	bf00      	nop
   32258:	20024098 	.word	0x20024098

0003225c <z_impl_k_yield>:
{
   3225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   3225e:	4c24      	ldr	r4, [pc, #144]	; (322f0 <z_impl_k_yield+0x94>)
   32260:	4b24      	ldr	r3, [pc, #144]	; (322f4 <z_impl_k_yield+0x98>)
   32262:	68a2      	ldr	r2, [r4, #8]
   32264:	429a      	cmp	r2, r3
   32266:	d030      	beq.n	322ca <z_impl_k_yield+0x6e>
	__asm__ volatile(
   32268:	f04f 0320 	mov.w	r3, #32
   3226c:	f3ef 8511 	mrs	r5, BASEPRI
   32270:	f383 8811 	msr	BASEPRI, r3
   32274:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   32278:	68a1      	ldr	r1, [r4, #8]
   3227a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   3227e:	f7ff fd1b 	bl	31cb8 <z_priq_dumb_remove>
	return list->head == list;
   32282:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   32284:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32286:	4283      	cmp	r3, r0
   32288:	bf08      	it	eq
   3228a:	2300      	moveq	r3, #0
   3228c:	2b00      	cmp	r3, #0
   3228e:	bf38      	it	cc
   32290:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   32292:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   32294:	b32b      	cbz	r3, 322e2 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   32296:	f992 700e 	ldrsb.w	r7, [r2, #14]
   3229a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3229e:	42b7      	cmp	r7, r6
   322a0:	db03      	blt.n	322aa <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   322a2:	428b      	cmp	r3, r1
   322a4:	d01d      	beq.n	322e2 <z_impl_k_yield+0x86>
   322a6:	681b      	ldr	r3, [r3, #0]
   322a8:	e7f4      	b.n	32294 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   322aa:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   322ac:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   322b0:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   322b2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   322b4:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   322b6:	2001      	movs	r0, #1
   322b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   322bc:	7353      	strb	r3, [r2, #13]
   322be:	f7ff fd11 	bl	31ce4 <update_cache>
	__asm__ volatile(
   322c2:	f385 8811 	msr	BASEPRI, r5
   322c6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   322ca:	f04f 0320 	mov.w	r3, #32
   322ce:	f3ef 8011 	mrs	r0, BASEPRI
   322d2:	f383 8811 	msr	BASEPRI, r3
   322d6:	f3bf 8f6f 	isb	sy
}
   322da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void) z_swap_irqlock(arch_irq_lock());
   322de:	f004 bcb1 	b.w	36c44 <z_swap_irqlock>
	node->prev = list->tail;
   322e2:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   322e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   322e8:	601a      	str	r2, [r3, #0]
	list->tail = node;
   322ea:	6322      	str	r2, [r4, #48]	; 0x30
}
   322ec:	e7e2      	b.n	322b4 <z_impl_k_yield+0x58>
   322ee:	bf00      	nop
   322f0:	20024098 	.word	0x20024098
   322f4:	200231b8 	.word	0x200231b8

000322f8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   322f8:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   322fa:	3301      	adds	r3, #1
   322fc:	bf08      	it	eq
   322fe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   32302:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   32304:	d106      	bne.n	32314 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   32306:	4b0b      	ldr	r3, [pc, #44]	; (32334 <z_impl_k_sleep+0x3c>)
   32308:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   3230a:	f7ff fe1f 	bl	31f4c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   3230e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   32312:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   32314:	4604      	mov	r4, r0
	if (ticks == 0) {
   32316:	b948      	cbnz	r0, 3232c <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   32318:	f7ff ffa0 	bl	3225c <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   3231c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   32320:	fb84 3400 	smull	r3, r4, r4, r0
   32324:	0bd8      	lsrs	r0, r3, #15
   32326:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   3232a:	e7f2      	b.n	32312 <z_impl_k_sleep+0x1a>
   3232c:	f7ff ff18 	bl	32160 <z_tick_sleep.part.0>
   32330:	4604      	mov	r4, r0
   32332:	e7f3      	b.n	3231c <z_impl_k_sleep+0x24>
   32334:	20024098 	.word	0x20024098

00032338 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   32338:	4b01      	ldr	r3, [pc, #4]	; (32340 <z_impl_k_current_get+0x8>)
   3233a:	6898      	ldr	r0, [r3, #8]
   3233c:	4770      	bx	lr
   3233e:	bf00      	nop
   32340:	20024098 	.word	0x20024098

00032344 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   32344:	b538      	push	{r3, r4, r5, lr}
   32346:	4604      	mov	r4, r0
   32348:	f04f 0320 	mov.w	r3, #32
   3234c:	f3ef 8511 	mrs	r5, BASEPRI
   32350:	f383 8811 	msr	BASEPRI, r3
   32354:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   32358:	f004 fd44 	bl	36de4 <z_unpend_first_thread>

	if (thread != NULL) {
   3235c:	b150      	cbz	r0, 32374 <z_impl_k_sem_give+0x30>
   3235e:	2200      	movs	r2, #0
   32360:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   32364:	f004 fce3 	bl	36d2e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   32368:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   3236a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3236e:	4807      	ldr	r0, [pc, #28]	; (3238c <z_impl_k_sem_give+0x48>)
   32370:	f7ff bc7c 	b.w	31c6c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   32374:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   32378:	429a      	cmp	r2, r3
   3237a:	bf18      	it	ne
   3237c:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3237e:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   32380:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   32382:	f104 0010 	add.w	r0, r4, #16
   32386:	f004 ffd9 	bl	3733c <z_handle_obj_poll_events>
}
   3238a:	e7ed      	b.n	32368 <z_impl_k_sem_give+0x24>
   3238c:	2002cba0 	.word	0x2002cba0

00032390 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   32390:	b537      	push	{r0, r1, r2, r4, r5, lr}
   32392:	4614      	mov	r4, r2
   32394:	461d      	mov	r5, r3
   32396:	f04f 0320 	mov.w	r3, #32
   3239a:	f3ef 8111 	mrs	r1, BASEPRI
   3239e:	f383 8811 	msr	BASEPRI, r3
   323a2:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   323a6:	6883      	ldr	r3, [r0, #8]
   323a8:	b143      	cbz	r3, 323bc <z_impl_k_sem_take+0x2c>
		sem->count--;
   323aa:	3b01      	subs	r3, #1
   323ac:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   323ae:	f381 8811 	msr	BASEPRI, r1
   323b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   323b6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   323b8:	b003      	add	sp, #12
   323ba:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   323bc:	ea54 0305 	orrs.w	r3, r4, r5
   323c0:	d106      	bne.n	323d0 <z_impl_k_sem_take+0x40>
   323c2:	f381 8811 	msr	BASEPRI, r1
   323c6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   323ca:	f06f 000f 	mvn.w	r0, #15
   323ce:	e7f3      	b.n	323b8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   323d0:	4602      	mov	r2, r0
   323d2:	e9cd 4500 	strd	r4, r5, [sp]
   323d6:	4802      	ldr	r0, [pc, #8]	; (323e0 <z_impl_k_sem_take+0x50>)
   323d8:	f7ff feae 	bl	32138 <z_pend_curr>
	return ret;
   323dc:	e7ec      	b.n	323b8 <z_impl_k_sem_take+0x28>
   323de:	bf00      	nop
   323e0:	2002cba0 	.word	0x2002cba0

000323e4 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   323e4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   323e6:	4c08      	ldr	r4, [pc, #32]	; (32408 <k_sys_work_q_init+0x24>)
   323e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   323ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   323f0:	4620      	mov	r0, r4
   323f2:	4906      	ldr	r1, [pc, #24]	; (3240c <k_sys_work_q_init+0x28>)
   323f4:	f000 f8f6 	bl	325e4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   323f8:	4905      	ldr	r1, [pc, #20]	; (32410 <k_sys_work_q_init+0x2c>)
   323fa:	f104 0018 	add.w	r0, r4, #24
   323fe:	f004 fd40 	bl	36e82 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   32402:	2000      	movs	r0, #0
   32404:	bd10      	pop	{r4, pc}
   32406:	bf00      	nop
   32408:	20023348 	.word	0x20023348
   3240c:	200311d8 	.word	0x200311d8
   32410:	0003ca70 	.word	0x0003ca70

00032414 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	uint32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   32414:	4b09      	ldr	r3, [pc, #36]	; (3243c <z_check_stack_sentinel+0x28>)
   32416:	689b      	ldr	r3, [r3, #8]
   32418:	7b5a      	ldrb	r2, [r3, #13]
   3241a:	07d2      	lsls	r2, r2, #31
   3241c:	d40d      	bmi.n	3243a <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (uint32_t *)_current->stack_info.start;
   3241e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
	if (*stack != STACK_SENTINEL) {
   32420:	681a      	ldr	r2, [r3, #0]
   32422:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   32426:	d008      	beq.n	3243a <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   32428:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   3242c:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   3242e:	4040      	eors	r0, r0
   32430:	f380 8811 	msr	BASEPRI, r0
   32434:	f04f 0002 	mov.w	r0, #2
   32438:	df02      	svc	2
	}
}
   3243a:	4770      	bx	lr
   3243c:	20024098 	.word	0x20024098

00032440 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   32440:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   32444:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   32448:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   3244c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   3244e:	3207      	adds	r2, #7
	thread_base->user_options = (uint8_t)options;
   32450:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   32452:	2504      	movs	r5, #4
   32454:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   32456:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   32458:	f022 0607 	bic.w	r6, r2, #7
	thread_base->prio = priority;
   3245c:	7385      	strb	r5, [r0, #14]
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
   3245e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0

	thread_base->sched_locked = 0U;
   32462:	2500      	movs	r5, #0
{
   32464:	4604      	mov	r4, r0
	node->prev = NULL;
   32466:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   3246a:	73c5      	strb	r5, [r0, #15]
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
   3246c:	600a      	str	r2, [r1, #0]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3246e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	new_thread->stack_info.size = stack_buf_size;
   32470:	e9c0 161b 	strd	r1, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   32474:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   32476:	9202      	str	r2, [sp, #8]
   32478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   3247a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3247e:	9201      	str	r2, [sp, #4]
   32480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   32482:	9200      	str	r2, [sp, #0]
   32484:	4642      	mov	r2, r8
   32486:	f7ef fbff 	bl	21c88 <arch_new_thread>
	if (!_current) {
   3248a:	4b05      	ldr	r3, [pc, #20]	; (324a0 <z_setup_new_thread+0x60>)
	new_thread->fn_abort = NULL;
   3248c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   32490:	689b      	ldr	r3, [r3, #8]
   32492:	b103      	cbz	r3, 32496 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   32494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
   32496:	4640      	mov	r0, r8
   32498:	67a3      	str	r3, [r4, #120]	; 0x78
   3249a:	b004      	add	sp, #16
   3249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   324a0:	20024098 	.word	0x20024098

000324a4 <z_impl_k_thread_create>:
{
   324a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   324a6:	2500      	movs	r5, #0
{
   324a8:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   324aa:	9505      	str	r5, [sp, #20]
   324ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   324ae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   324b2:	9504      	str	r5, [sp, #16]
   324b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   324b6:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   324b8:	9503      	str	r5, [sp, #12]
   324ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   324bc:	9502      	str	r5, [sp, #8]
   324be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   324c0:	9501      	str	r5, [sp, #4]
   324c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   324c4:	9500      	str	r5, [sp, #0]
   324c6:	f7ff ffbb 	bl	32440 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   324ca:	1c7b      	adds	r3, r7, #1
   324cc:	bf08      	it	eq
   324ce:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   324d2:	d005      	beq.n	324e0 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   324d4:	ea56 0307 	orrs.w	r3, r6, r7
   324d8:	d105      	bne.n	324e6 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   324da:	4620      	mov	r0, r4
   324dc:	f7ff fc7e 	bl	31ddc <z_sched_start>
}
   324e0:	4620      	mov	r0, r4
   324e2:	b007      	add	sp, #28
   324e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   324e6:	4632      	mov	r2, r6
   324e8:	463b      	mov	r3, r7
   324ea:	4903      	ldr	r1, [pc, #12]	; (324f8 <z_impl_k_thread_create+0x54>)
   324ec:	f104 0018 	add.w	r0, r4, #24
   324f0:	f000 f930 	bl	32754 <z_add_timeout>
   324f4:	e7f4      	b.n	324e0 <z_impl_k_thread_create+0x3c>
   324f6:	bf00      	nop
   324f8:	00036d4f 	.word	0x00036d4f

000324fc <z_init_static_threads>:
{
   324fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   32500:	4e2a      	ldr	r6, [pc, #168]	; (325ac <z_init_static_threads+0xb0>)
   32502:	4d2b      	ldr	r5, [pc, #172]	; (325b0 <z_init_static_threads+0xb4>)
   32504:	46b0      	mov	r8, r6
{
   32506:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   32508:	42b5      	cmp	r5, r6
   3250a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   3250e:	d310      	bcc.n	32532 <z_init_static_threads+0x36>
	k_sched_lock();
   32510:	f7ff fbbe 	bl	31c90 <k_sched_lock>
   32514:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   32518:	f240 36e7 	movw	r6, #999	; 0x3e7
   3251c:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   3251e:	4c24      	ldr	r4, [pc, #144]	; (325b0 <z_init_static_threads+0xb4>)
   32520:	f8df a090 	ldr.w	sl, [pc, #144]	; 325b4 <z_init_static_threads+0xb8>
   32524:	4544      	cmp	r4, r8
   32526:	d321      	bcc.n	3256c <z_init_static_threads+0x70>
}
   32528:	b006      	add	sp, #24
   3252a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   3252e:	f7ff bc01 	b.w	31d34 <k_sched_unlock>
		z_setup_new_thread(
   32532:	f854 3c04 	ldr.w	r3, [r4, #-4]
   32536:	9305      	str	r3, [sp, #20]
   32538:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3253c:	9304      	str	r3, [sp, #16]
   3253e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   32542:	9303      	str	r3, [sp, #12]
   32544:	f854 3c18 	ldr.w	r3, [r4, #-24]
   32548:	9302      	str	r3, [sp, #8]
   3254a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   3254e:	9301      	str	r3, [sp, #4]
   32550:	f854 3c20 	ldr.w	r3, [r4, #-32]
   32554:	9300      	str	r3, [sp, #0]
   32556:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3255a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   3255e:	f7ff ff6f 	bl	32440 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   32562:	f854 3c30 	ldr.w	r3, [r4, #-48]
   32566:	65dd      	str	r5, [r3, #92]	; 0x5c
   32568:	4625      	mov	r5, r4
   3256a:	e7cd      	b.n	32508 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   3256c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3256e:	1c5a      	adds	r2, r3, #1
   32570:	d00d      	beq.n	3258e <z_init_static_threads+0x92>
   32572:	4630      	mov	r0, r6
   32574:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   32576:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   3257a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3257e:	42b9      	cmp	r1, r7
   32580:	bf08      	it	eq
   32582:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   32584:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   32586:	d104      	bne.n	32592 <z_init_static_threads+0x96>
	z_sched_start(thread);
   32588:	4628      	mov	r0, r5
   3258a:	f7ff fc27 	bl	31ddc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3258e:	3430      	adds	r4, #48	; 0x30
   32590:	e7c8      	b.n	32524 <z_init_static_threads+0x28>
   32592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   32596:	2300      	movs	r3, #0
   32598:	f7e6 f90e 	bl	187b8 <__aeabi_uldivmod>
   3259c:	4602      	mov	r2, r0
   3259e:	460b      	mov	r3, r1
   325a0:	f105 0018 	add.w	r0, r5, #24
   325a4:	4651      	mov	r1, sl
   325a6:	f000 f8d5 	bl	32754 <z_add_timeout>
   325aa:	e7f0      	b.n	3258e <z_init_static_threads+0x92>
   325ac:	2002074c 	.word	0x2002074c
   325b0:	2002071c 	.word	0x2002071c
   325b4:	00036d4f 	.word	0x00036d4f

000325b8 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   325b8:	b508      	push	{r3, lr}
	__asm__ volatile(
   325ba:	f04f 0320 	mov.w	r3, #32
   325be:	f3ef 8411 	mrs	r4, BASEPRI
   325c2:	f383 8811 	msr	BASEPRI, r3
   325c6:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   325ca:	4b05      	ldr	r3, [pc, #20]	; (325e0 <z_self_abort+0x28>)
   325cc:	6898      	ldr	r0, [r3, #8]
   325ce:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   325d0:	f7ff fcbc 	bl	31f4c <z_impl_k_thread_suspend>
	z_check_stack_sentinel();
   325d4:	f7ff ff1e 	bl	32414 <z_check_stack_sentinel>
	ret = arch_swap(key);
   325d8:	4620      	mov	r0, r4
   325da:	f7ef fa7b 	bl	21ad4 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   325de:	bf00      	nop
   325e0:	20024098 	.word	0x20024098

000325e4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   325e4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   325e8:	b08a      	sub	sp, #40	; 0x28
   325ea:	4604      	mov	r4, r0
   325ec:	461d      	mov	r5, r3
   325ee:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   325f2:	f004 fb10 	bl	36c16 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   325f6:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   325fa:	2000      	movs	r0, #0
   325fc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   32600:	f04f 0800 	mov.w	r8, #0
   32604:	f04f 0900 	mov.w	r9, #0
   32608:	e9cd 5003 	strd	r5, r0, [sp, #12]
   3260c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   32610:	e9cd 8906 	strd	r8, r9, [sp, #24]
   32614:	4630      	mov	r0, r6
   32616:	4b05      	ldr	r3, [pc, #20]	; (3262c <k_work_q_start+0x48>)
   32618:	9400      	str	r4, [sp, #0]
   3261a:	f7ff ff43 	bl	324a4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   3261e:	4630      	mov	r0, r6
   32620:	4903      	ldr	r1, [pc, #12]	; (32630 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   32622:	b00a      	add	sp, #40	; 0x28
   32624:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   32628:	f004 bc2b 	b.w	36e82 <z_impl_k_thread_name_set>
   3262c:	00033ded 	.word	0x00033ded
   32630:	0003ca79 	.word	0x0003ca79

00032634 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   32634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32638:	4606      	mov	r6, r0
   3263a:	460d      	mov	r5, r1
   3263c:	4690      	mov	r8, r2
   3263e:	4699      	mov	r9, r3
   32640:	f04f 0320 	mov.w	r3, #32
   32644:	f3ef 8711 	mrs	r7, BASEPRI
   32648:	f383 8811 	msr	BASEPRI, r3
   3264c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   32650:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   32652:	b17b      	cbz	r3, 32674 <k_delayed_work_submit_to_queue+0x40>
   32654:	4283      	cmp	r3, r0
   32656:	d128      	bne.n	326aa <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   32658:	4628      	mov	r0, r5
   3265a:	f004 fc30 	bl	36ebe <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   3265e:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   32662:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   32664:	d008      	beq.n	32678 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   32666:	2800      	cmp	r0, #0
   32668:	da07      	bge.n	3267a <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   3266a:	f387 8811 	msr	BASEPRI, r7
   3266e:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   32672:	e00f      	b.n	32694 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   32674:	2800      	cmp	r0, #0
   32676:	d0ef      	beq.n	32658 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   32678:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3267a:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   3267e:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   32680:	d10b      	bne.n	3269a <k_delayed_work_submit_to_queue+0x66>
   32682:	f387 8811 	msr	BASEPRI, r7
   32686:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   3268a:	4629      	mov	r1, r5
   3268c:	4630      	mov	r0, r6
   3268e:	f004 fbfd 	bl	36e8c <k_work_submit_to_queue>
		return 0;
   32692:	2400      	movs	r4, #0
}
   32694:	4620      	mov	r0, r4
   32696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   3269a:	4642      	mov	r2, r8
   3269c:	464b      	mov	r3, r9
   3269e:	4904      	ldr	r1, [pc, #16]	; (326b0 <k_delayed_work_submit_to_queue+0x7c>)
   326a0:	f105 0010 	add.w	r0, r5, #16
   326a4:	f000 f856 	bl	32754 <z_add_timeout>
   326a8:	e7df      	b.n	3266a <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   326aa:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   326ae:	e7dc      	b.n	3266a <k_delayed_work_submit_to_queue+0x36>
   326b0:	00036eb5 	.word	0x00036eb5

000326b4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   326b4:	4b03      	ldr	r3, [pc, #12]	; (326c4 <elapsed+0x10>)
   326b6:	681b      	ldr	r3, [r3, #0]
   326b8:	b90b      	cbnz	r3, 326be <elapsed+0xa>
   326ba:	f7ef b91d 	b.w	218f8 <z_clock_elapsed>
}
   326be:	2000      	movs	r0, #0
   326c0:	4770      	bx	lr
   326c2:	bf00      	nop
   326c4:	200240dc 	.word	0x200240dc

000326c8 <remove_timeout>:
{
   326c8:	b530      	push	{r4, r5, lr}
   326ca:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   326cc:	b168      	cbz	r0, 326ea <remove_timeout+0x22>
   326ce:	4a0a      	ldr	r2, [pc, #40]	; (326f8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   326d0:	6852      	ldr	r2, [r2, #4]
   326d2:	4290      	cmp	r0, r2
   326d4:	d009      	beq.n	326ea <remove_timeout+0x22>
	if (next(t) != NULL) {
   326d6:	b143      	cbz	r3, 326ea <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   326d8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   326dc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   326e0:	1912      	adds	r2, r2, r4
   326e2:	eb45 0101 	adc.w	r1, r5, r1
   326e6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   326ea:	6842      	ldr	r2, [r0, #4]
   326ec:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   326ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   326f0:	2300      	movs	r3, #0
	node->prev = NULL;
   326f2:	e9c0 3300 	strd	r3, r3, [r0]
}
   326f6:	bd30      	pop	{r4, r5, pc}
   326f8:	2002045c 	.word	0x2002045c

000326fc <next_timeout>:
	return list->head == list;
   326fc:	4b13      	ldr	r3, [pc, #76]	; (3274c <next_timeout+0x50>)

static int32_t next_timeout(void)
{
   326fe:	b510      	push	{r4, lr}
   32700:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32702:	429c      	cmp	r4, r3
   32704:	bf08      	it	eq
   32706:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   32708:	f7ff ffd4 	bl	326b4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   3270c:	b1cc      	cbz	r4, 32742 <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   3270e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   32712:	1a12      	subs	r2, r2, r0
   32714:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   32718:	2a01      	cmp	r2, #1
   3271a:	f173 0100 	sbcs.w	r1, r3, #0
   3271e:	db13      	blt.n	32748 <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   32720:	4610      	mov	r0, r2
   32722:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   32726:	4619      	mov	r1, r3
   32728:	2300      	movs	r3, #0
   3272a:	4282      	cmp	r2, r0
   3272c:	eb73 0401 	sbcs.w	r4, r3, r1
   32730:	da00      	bge.n	32734 <next_timeout+0x38>
   32732:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   32734:	4b06      	ldr	r3, [pc, #24]	; (32750 <next_timeout+0x54>)
   32736:	695b      	ldr	r3, [r3, #20]
   32738:	b113      	cbz	r3, 32740 <next_timeout+0x44>
   3273a:	4298      	cmp	r0, r3
   3273c:	bfa8      	it	ge
   3273e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   32740:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   32742:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   32746:	e7f5      	b.n	32734 <next_timeout+0x38>
   32748:	2000      	movs	r0, #0
   3274a:	e7f3      	b.n	32734 <next_timeout+0x38>
   3274c:	2002045c 	.word	0x2002045c
   32750:	20024098 	.word	0x20024098

00032754 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   32754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32758:	9101      	str	r1, [sp, #4]
   3275a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3275c:	1c4b      	adds	r3, r1, #1
   3275e:	bf08      	it	eq
   32760:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   32764:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   32766:	d06b      	beq.n	32840 <z_add_timeout+0xec>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   32768:	f06f 0301 	mvn.w	r3, #1
   3276c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
   32770:	1c54      	adds	r4, r2, #1
   32772:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   32776:	ebb3 0804 	subs.w	r8, r3, r4
   3277a:	eb6b 0905 	sbc.w	r9, fp, r5
   3277e:	f1b8 0f00 	cmp.w	r8, #0
   32782:	f179 0300 	sbcs.w	r3, r9, #0
   32786:	db0f      	blt.n	327a8 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   32788:	f7ff ff94 	bl	326b4 <elapsed>
   3278c:	f06f 0301 	mvn.w	r3, #1
   32790:	4a32      	ldr	r2, [pc, #200]	; (3285c <z_add_timeout+0x108>)
   32792:	e9d2 1c00 	ldrd	r1, ip, [r2]
   32796:	1a5b      	subs	r3, r3, r1
   32798:	eb6b 020c 	sbc.w	r2, fp, ip
   3279c:	1b1e      	subs	r6, r3, r4
   3279e:	eb62 0705 	sbc.w	r7, r2, r5
   327a2:	1a34      	subs	r4, r6, r0
   327a4:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   327a8:	9b01      	ldr	r3, [sp, #4]
   327aa:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   327ae:	f04f 0320 	mov.w	r3, #32
   327b2:	f3ef 8611 	mrs	r6, BASEPRI
   327b6:	f383 8811 	msr	BASEPRI, r3
   327ba:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   327be:	f7ff ff79 	bl	326b4 <elapsed>
	ticks = MAX(1, ticks);
   327c2:	2c01      	cmp	r4, #1
   327c4:	f175 0300 	sbcs.w	r3, r5, #0
   327c8:	bfbc      	itt	lt
   327ca:	2401      	movlt	r4, #1
   327cc:	2500      	movlt	r5, #0
	return list->head == list;
   327ce:	4b24      	ldr	r3, [pc, #144]	; (32860 <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
   327d0:	1824      	adds	r4, r4, r0
   327d2:	681a      	ldr	r2, [r3, #0]
   327d4:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   327d8:	429a      	cmp	r2, r3
   327da:	e9ca 4504 	strd	r4, r5, [sl, #16]
   327de:	d001      	beq.n	327e4 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   327e0:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   327e2:	b952      	cbnz	r2, 327fa <z_add_timeout+0xa6>
	node->prev = list->tail;
   327e4:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   327e6:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   327ea:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   327ee:	685a      	ldr	r2, [r3, #4]
   327f0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   327f4:	f8c3 a004 	str.w	sl, [r3, #4]
}
   327f8:	e014      	b.n	32824 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   327fa:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   327fe:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   32802:	4544      	cmp	r4, r8
   32804:	eb75 0109 	sbcs.w	r1, r5, r9
   32808:	da1d      	bge.n	32846 <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
   3280a:	ebb8 0004 	subs.w	r0, r8, r4
   3280e:	eb69 0105 	sbc.w	r1, r9, r5
   32812:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   32816:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   32818:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   3281c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   32820:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   32824:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32826:	429a      	cmp	r2, r3
   32828:	d006      	beq.n	32838 <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   3282a:	4592      	cmp	sl, r2
   3282c:	d104      	bne.n	32838 <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
   3282e:	f7ff ff65 	bl	326fc <next_timeout>
   32832:	2100      	movs	r1, #0
   32834:	f7ee fff8 	bl	21828 <z_clock_set_timeout>
	__asm__ volatile(
   32838:	f386 8811 	msr	BASEPRI, r6
   3283c:	f3bf 8f6f 	isb	sy
		}
	}
}
   32840:	b003      	add	sp, #12
   32842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   32846:	ebb4 0008 	subs.w	r0, r4, r8
   3284a:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   3284e:	42ba      	cmp	r2, r7
   32850:	e9ca 0104 	strd	r0, r1, [sl, #16]
   32854:	d0c6      	beq.n	327e4 <z_add_timeout+0x90>
   32856:	6812      	ldr	r2, [r2, #0]
   32858:	e7c3      	b.n	327e2 <z_add_timeout+0x8e>
   3285a:	bf00      	nop
   3285c:	20023428 	.word	0x20023428
   32860:	2002045c 	.word	0x2002045c

00032864 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   32864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32868:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3286a:	f7ff fb2d 	bl	31ec8 <z_time_slice>
	__asm__ volatile(
   3286e:	f04f 0320 	mov.w	r3, #32
   32872:	f3ef 8411 	mrs	r4, BASEPRI
   32876:	f383 8811 	msr	BASEPRI, r3
   3287a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   3287e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 32930 <z_clock_announce+0xcc>
   32882:	4d2a      	ldr	r5, [pc, #168]	; (3292c <z_clock_announce+0xc8>)
   32884:	4651      	mov	r1, sl
	return list->head == list;
   32886:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 32934 <z_clock_announce+0xd0>
   3288a:	602e      	str	r6, [r5, #0]
   3288c:	f8d5 c000 	ldr.w	ip, [r5]
   32890:	f8db 0000 	ldr.w	r0, [fp]
   32894:	4662      	mov	r2, ip
   32896:	e9da 8900 	ldrd	r8, r9, [sl]
   3289a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3289c:	4558      	cmp	r0, fp
   3289e:	e9cd 2300 	strd	r2, r3, [sp]
   328a2:	d00d      	beq.n	328c0 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   328a4:	b160      	cbz	r0, 328c0 <z_clock_announce+0x5c>
   328a6:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   328aa:	45b4      	cmp	ip, r6
   328ac:	41bb      	sbcs	r3, r7
   328ae:	da1d      	bge.n	328ec <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   328b0:	9b00      	ldr	r3, [sp, #0]
   328b2:	ebb6 0c03 	subs.w	ip, r6, r3
   328b6:	9b01      	ldr	r3, [sp, #4]
   328b8:	eb67 0603 	sbc.w	r6, r7, r3
   328bc:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   328c0:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   328c2:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   328c4:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   328c6:	eb13 0208 	adds.w	r2, r3, r8
   328ca:	9b01      	ldr	r3, [sp, #4]
   328cc:	eb43 0309 	adc.w	r3, r3, r9
   328d0:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   328d4:	f7ff ff12 	bl	326fc <next_timeout>
   328d8:	4631      	mov	r1, r6
   328da:	f7ee ffa5 	bl	21828 <z_clock_set_timeout>
	__asm__ volatile(
   328de:	f384 8811 	msr	BASEPRI, r4
   328e2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   328e6:	b003      	add	sp, #12
   328e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   328ec:	2200      	movs	r2, #0
   328ee:	2300      	movs	r3, #0
		curr_tick += dt;
   328f0:	eb18 0806 	adds.w	r8, r8, r6
   328f4:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   328f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   328fc:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   32900:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   32904:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   32906:	f7ff fedf 	bl	326c8 <remove_timeout>
   3290a:	f384 8811 	msr	BASEPRI, r4
   3290e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   32912:	6883      	ldr	r3, [r0, #8]
   32914:	4798      	blx	r3
	__asm__ volatile(
   32916:	f04f 0320 	mov.w	r3, #32
   3291a:	f3ef 8411 	mrs	r4, BASEPRI
   3291e:	f383 8811 	msr	BASEPRI, r3
   32922:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   32926:	4902      	ldr	r1, [pc, #8]	; (32930 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   32928:	e7b0      	b.n	3288c <z_clock_announce+0x28>
   3292a:	bf00      	nop
   3292c:	200240dc 	.word	0x200240dc
   32930:	20023428 	.word	0x20023428
   32934:	2002045c 	.word	0x2002045c

00032938 <z_tick_get>:

int64_t z_tick_get(void)
{
   32938:	b510      	push	{r4, lr}
   3293a:	f04f 0320 	mov.w	r3, #32
   3293e:	f3ef 8411 	mrs	r4, BASEPRI
   32942:	f383 8811 	msr	BASEPRI, r3
   32946:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   3294a:	f7ee ffd5 	bl	218f8 <z_clock_elapsed>
   3294e:	4b06      	ldr	r3, [pc, #24]	; (32968 <z_tick_get+0x30>)
   32950:	e9d3 2300 	ldrd	r2, r3, [r3]
   32954:	1812      	adds	r2, r2, r0
   32956:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   3295a:	f384 8811 	msr	BASEPRI, r4
   3295e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   32962:	4610      	mov	r0, r2
   32964:	4619      	mov	r1, r3
   32966:	bd10      	pop	{r4, pc}
   32968:	20023428 	.word	0x20023428

0003296c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   3296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   3296e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   32972:	1c56      	adds	r6, r2, #1
   32974:	f143 0700 	adc.w	r7, r3, #0
   32978:	2f00      	cmp	r7, #0
   3297a:	bf08      	it	eq
   3297c:	2e02      	cmpeq	r6, #2
{
   3297e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   32980:	d302      	bcc.n	32988 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   32982:	490c      	ldr	r1, [pc, #48]	; (329b4 <z_timer_expiration_handler+0x48>)
   32984:	f7ff fee6 	bl	32754 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   32988:	6b23      	ldr	r3, [r4, #48]	; 0x30
   3298a:	3301      	adds	r3, #1
   3298c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   3298e:	6a23      	ldr	r3, [r4, #32]
   32990:	b10b      	cbz	r3, 32996 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   32992:	4620      	mov	r0, r4
   32994:	4798      	blx	r3
	return list->head == list;
   32996:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3299a:	42a5      	cmp	r5, r4
   3299c:	d009      	beq.n	329b2 <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   3299e:	b145      	cbz	r5, 329b2 <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   329a0:	4628      	mov	r0, r5
   329a2:	f004 f972 	bl	36c8a <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   329a6:	4628      	mov	r0, r5
   329a8:	f004 f9c1 	bl	36d2e <z_ready_thread>
   329ac:	2300      	movs	r3, #0
   329ae:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   329b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   329b4:	0003296d 	.word	0x0003296d

000329b8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   329b8:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   329bc:	4619      	mov	r1, r3
   329be:	4606      	mov	r6, r0
   329c0:	4610      	mov	r0, r2
   329c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   329c6:	1c4c      	adds	r4, r1, #1
   329c8:	bf08      	it	eq
   329ca:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   329ce:	4680      	mov	r8, r0
   329d0:	4689      	mov	r9, r1
   329d2:	d047      	beq.n	32a64 <z_impl_k_timer_start+0xac>
   329d4:	4614      	mov	r4, r2
   329d6:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   329d8:	ea54 0305 	orrs.w	r3, r4, r5
   329dc:	d016      	beq.n	32a0c <z_impl_k_timer_start+0x54>
   329de:	f06f 0301 	mvn.w	r3, #1
   329e2:	ebb3 0a02 	subs.w	sl, r3, r2
   329e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   329ea:	eb63 0b05 	sbc.w	fp, r3, r5
   329ee:	f1ba 0f00 	cmp.w	sl, #0
   329f2:	f17b 0300 	sbcs.w	r3, fp, #0
   329f6:	da09      	bge.n	32a0c <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   329f8:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   329fc:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   32a00:	2c01      	cmp	r4, #1
   32a02:	f175 0300 	sbcs.w	r3, r5, #0
   32a06:	bfbc      	itt	lt
   32a08:	2401      	movlt	r4, #1
   32a0a:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   32a0c:	f06f 0301 	mvn.w	r3, #1
   32a10:	1a1b      	subs	r3, r3, r0
   32a12:	9300      	str	r3, [sp, #0]
   32a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32a18:	eb63 0301 	sbc.w	r3, r3, r1
   32a1c:	9301      	str	r3, [sp, #4]
   32a1e:	e9dd 2300 	ldrd	r2, r3, [sp]
   32a22:	2a00      	cmp	r2, #0
   32a24:	f173 0300 	sbcs.w	r3, r3, #0
   32a28:	da0c      	bge.n	32a44 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   32a2a:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   32a2e:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   32a32:	f1b8 0f00 	cmp.w	r8, #0
   32a36:	f179 0300 	sbcs.w	r3, r9, #0
   32a3a:	bfbc      	itt	lt
   32a3c:	f04f 0800 	movlt.w	r8, #0
   32a40:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   32a44:	4630      	mov	r0, r6
   32a46:	f004 fa97 	bl	36f78 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   32a4a:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   32a4c:	4642      	mov	r2, r8
	timer->status = 0U;
   32a4e:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   32a50:	4630      	mov	r0, r6
   32a52:	464b      	mov	r3, r9
   32a54:	4905      	ldr	r1, [pc, #20]	; (32a6c <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   32a56:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   32a5a:	b002      	add	sp, #8
   32a5c:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   32a60:	f7ff be78 	b.w	32754 <z_add_timeout>
}
   32a64:	b002      	add	sp, #8
   32a66:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   32a6a:	bf00      	nop
   32a6c:	0003296d 	.word	0x0003296d

00032a70 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   32a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   32a74:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   32a76:	4b2a      	ldr	r3, [pc, #168]	; (32b20 <z_impl_k_poll+0xb0>)
{
   32a78:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   32a7a:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   32a7c:	2301      	movs	r3, #1
   32a7e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   32a82:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   32a86:	ea52 0307 	orrs.w	r3, r2, r7
   32a8a:	bf0c      	ite	eq
   32a8c:	2301      	moveq	r3, #1
   32a8e:	2300      	movne	r3, #0
   32a90:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   32a94:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   32a96:	f004 fbf0 	bl	3727a <register_events>
   32a9a:	4681      	mov	r9, r0
	__asm__ volatile(
   32a9c:	f04f 0320 	mov.w	r3, #32
   32aa0:	f3ef 8a11 	mrs	sl, BASEPRI
   32aa4:	f383 8811 	msr	BASEPRI, r3
   32aa8:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   32aac:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   32ab0:	b964      	cbnz	r4, 32acc <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   32ab2:	4601      	mov	r1, r0
   32ab4:	4652      	mov	r2, sl
   32ab6:	4640      	mov	r0, r8
   32ab8:	f004 fb0d 	bl	370d6 <clear_event_registrations>
	__asm__ volatile(
   32abc:	f38a 8811 	msr	BASEPRI, sl
   32ac0:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   32ac4:	4620      	mov	r0, r4
   32ac6:	b004      	add	sp, #16
   32ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   32acc:	2300      	movs	r3, #0
   32ace:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   32ad2:	ea56 0307 	orrs.w	r3, r6, r7
   32ad6:	d106      	bne.n	32ae6 <z_impl_k_poll+0x76>
   32ad8:	f38a 8811 	msr	BASEPRI, sl
   32adc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   32ae0:	f06f 040a 	mvn.w	r4, #10
   32ae4:	e7ee      	b.n	32ac4 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   32ae6:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   32ae8:	4651      	mov	r1, sl
   32aea:	e9cd 6700 	strd	r6, r7, [sp]
   32aee:	480d      	ldr	r0, [pc, #52]	; (32b24 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   32af0:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   32af4:	f7ff fb20 	bl	32138 <z_pend_curr>
   32af8:	4604      	mov	r4, r0
	__asm__ volatile(
   32afa:	f04f 0320 	mov.w	r3, #32
   32afe:	f3ef 8511 	mrs	r5, BASEPRI
   32b02:	f383 8811 	msr	BASEPRI, r3
   32b06:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   32b0a:	462a      	mov	r2, r5
   32b0c:	4649      	mov	r1, r9
   32b0e:	4640      	mov	r0, r8
   32b10:	f004 fae1 	bl	370d6 <clear_event_registrations>
	__asm__ volatile(
   32b14:	f385 8811 	msr	BASEPRI, r5
   32b18:	f3bf 8f6f 	isb	sy
	return swap_rc;
   32b1c:	e7d2      	b.n	32ac4 <z_impl_k_poll+0x54>
   32b1e:	bf00      	nop
   32b20:	20024098 	.word	0x20024098
   32b24:	2002cba0 	.word	0x2002cba0

00032b28 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   32b28:	b538      	push	{r3, r4, r5, lr}
   32b2a:	4603      	mov	r3, r0
	__asm__ volatile(
   32b2c:	f04f 0220 	mov.w	r2, #32
   32b30:	f3ef 8511 	mrs	r5, BASEPRI
   32b34:	f382 8811 	msr	BASEPRI, r2
   32b38:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   32b3c:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   32b3e:	2101      	movs	r1, #1
   32b40:	6081      	str	r1, [r0, #8]
	return list->head == list;
   32b42:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   32b44:	4283      	cmp	r3, r0
   32b46:	d106      	bne.n	32b56 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   32b48:	f385 8811 	msr	BASEPRI, r5
   32b4c:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   32b50:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   32b52:	4620      	mov	r0, r4
   32b54:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   32b56:	e9d0 3200 	ldrd	r3, r2, [r0]
   32b5a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   32b5c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   32b5e:	2300      	movs	r3, #0
	node->prev = NULL;
   32b60:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   32b64:	f004 faf6 	bl	37154 <signal_poll_event>
	z_reschedule(&lock, key);
   32b68:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   32b6a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   32b6c:	4801      	ldr	r0, [pc, #4]	; (32b74 <z_impl_k_poll_signal_raise+0x4c>)
   32b6e:	f7ff f87d 	bl	31c6c <z_reschedule>
	return rc;
   32b72:	e7ee      	b.n	32b52 <z_impl_k_poll_signal_raise+0x2a>
   32b74:	2002cba0 	.word	0x2002cba0

00032b78 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   32b78:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   32b7a:	4801      	ldr	r0, [pc, #4]	; (32b80 <k_malloc+0x8>)
   32b7c:	f004 bbec 	b.w	37358 <k_mem_pool_malloc>
   32b80:	20020464 	.word	0x20020464

00032b84 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   32b84:	b507      	push	{r0, r1, r2, lr}
   32b86:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   32b88:	f004 f971 	bl	36e6e <k_is_in_isr>
   32b8c:	9901      	ldr	r1, [sp, #4]
   32b8e:	b948      	cbnz	r0, 32ba4 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   32b90:	4b07      	ldr	r3, [pc, #28]	; (32bb0 <z_thread_malloc+0x2c>)
   32b92:	689b      	ldr	r3, [r3, #8]
   32b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (pool) {
   32b96:	b13b      	cbz	r3, 32ba8 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   32b98:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   32b9a:	b003      	add	sp, #12
   32b9c:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   32ba0:	f004 bbda 	b.w	37358 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   32ba4:	4b03      	ldr	r3, [pc, #12]	; (32bb4 <z_thread_malloc+0x30>)
   32ba6:	e7f7      	b.n	32b98 <z_thread_malloc+0x14>
}
   32ba8:	b003      	add	sp, #12
   32baa:	f85d fb04 	ldr.w	pc, [sp], #4
   32bae:	bf00      	nop
   32bb0:	20024098 	.word	0x20024098
   32bb4:	20020464 	.word	0x20020464

00032bb8 <_printf_float>:
   32bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32bbc:	ed2d 8b02 	vpush	{d8}
   32bc0:	b08d      	sub	sp, #52	; 0x34
   32bc2:	460c      	mov	r4, r1
   32bc4:	4616      	mov	r6, r2
   32bc6:	461f      	mov	r7, r3
   32bc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   32bcc:	4605      	mov	r5, r0
   32bce:	f000 fcf9 	bl	335c4 <_localeconv_r>
   32bd2:	f8d0 a000 	ldr.w	sl, [r0]
   32bd6:	4650      	mov	r0, sl
   32bd8:	f7e6 fa4a 	bl	19070 <strlen>
   32bdc:	2300      	movs	r3, #0
   32bde:	f894 b018 	ldrb.w	fp, [r4, #24]
   32be2:	ee08 0a10 	vmov	s16, r0
   32be6:	930a      	str	r3, [sp, #40]	; 0x28
   32be8:	6823      	ldr	r3, [r4, #0]
   32bea:	9305      	str	r3, [sp, #20]
   32bec:	f8d8 3000 	ldr.w	r3, [r8]
   32bf0:	3307      	adds	r3, #7
   32bf2:	f023 0307 	bic.w	r3, r3, #7
   32bf6:	f103 0208 	add.w	r2, r3, #8
   32bfa:	f8c8 2000 	str.w	r2, [r8]
   32bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   32c02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   32c06:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   32c0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32c0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   32c12:	f8cd 8018 	str.w	r8, [sp, #24]
   32c16:	9307      	str	r3, [sp, #28]
   32c18:	4b9e      	ldr	r3, [pc, #632]	; (32e94 <_printf_float+0x2dc>)
   32c1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   32c1e:	f7e6 f9df 	bl	18fe0 <__aeabi_dcmpun>
   32c22:	bb88      	cbnz	r0, 32c88 <_printf_float+0xd0>
   32c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32c28:	4b9a      	ldr	r3, [pc, #616]	; (32e94 <_printf_float+0x2dc>)
   32c2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   32c2e:	f7e6 f9b9 	bl	18fa4 <__aeabi_dcmple>
   32c32:	bb48      	cbnz	r0, 32c88 <_printf_float+0xd0>
   32c34:	2200      	movs	r2, #0
   32c36:	2300      	movs	r3, #0
   32c38:	4640      	mov	r0, r8
   32c3a:	4649      	mov	r1, r9
   32c3c:	f7e6 f9a8 	bl	18f90 <__aeabi_dcmplt>
   32c40:	b110      	cbz	r0, 32c48 <_printf_float+0x90>
   32c42:	232d      	movs	r3, #45	; 0x2d
   32c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   32c48:	4b93      	ldr	r3, [pc, #588]	; (32e98 <_printf_float+0x2e0>)
   32c4a:	4894      	ldr	r0, [pc, #592]	; (32e9c <_printf_float+0x2e4>)
   32c4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   32c50:	bf94      	ite	ls
   32c52:	4698      	movls	r8, r3
   32c54:	4680      	movhi	r8, r0
   32c56:	2303      	movs	r3, #3
   32c58:	f04f 0900 	mov.w	r9, #0
   32c5c:	6123      	str	r3, [r4, #16]
   32c5e:	9b05      	ldr	r3, [sp, #20]
   32c60:	f023 0204 	bic.w	r2, r3, #4
   32c64:	6022      	str	r2, [r4, #0]
   32c66:	4633      	mov	r3, r6
   32c68:	aa0b      	add	r2, sp, #44	; 0x2c
   32c6a:	4621      	mov	r1, r4
   32c6c:	4628      	mov	r0, r5
   32c6e:	9700      	str	r7, [sp, #0]
   32c70:	f004 fc8f 	bl	37592 <_printf_common>
   32c74:	3001      	adds	r0, #1
   32c76:	f040 8090 	bne.w	32d9a <_printf_float+0x1e2>
   32c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32c7e:	b00d      	add	sp, #52	; 0x34
   32c80:	ecbd 8b02 	vpop	{d8}
   32c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32c88:	4642      	mov	r2, r8
   32c8a:	464b      	mov	r3, r9
   32c8c:	4640      	mov	r0, r8
   32c8e:	4649      	mov	r1, r9
   32c90:	f7e6 f9a6 	bl	18fe0 <__aeabi_dcmpun>
   32c94:	b140      	cbz	r0, 32ca8 <_printf_float+0xf0>
   32c96:	464b      	mov	r3, r9
   32c98:	4881      	ldr	r0, [pc, #516]	; (32ea0 <_printf_float+0x2e8>)
   32c9a:	2b00      	cmp	r3, #0
   32c9c:	bfbc      	itt	lt
   32c9e:	232d      	movlt	r3, #45	; 0x2d
   32ca0:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   32ca4:	4b7f      	ldr	r3, [pc, #508]	; (32ea4 <_printf_float+0x2ec>)
   32ca6:	e7d1      	b.n	32c4c <_printf_float+0x94>
   32ca8:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   32cac:	6863      	ldr	r3, [r4, #4]
   32cae:	9206      	str	r2, [sp, #24]
   32cb0:	1c5a      	adds	r2, r3, #1
   32cb2:	d13f      	bne.n	32d34 <_printf_float+0x17c>
   32cb4:	2306      	movs	r3, #6
   32cb6:	6063      	str	r3, [r4, #4]
   32cb8:	9b05      	ldr	r3, [sp, #20]
   32cba:	4628      	mov	r0, r5
   32cbc:	6861      	ldr	r1, [r4, #4]
   32cbe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   32cc2:	2300      	movs	r3, #0
   32cc4:	9303      	str	r3, [sp, #12]
   32cc6:	ab0a      	add	r3, sp, #40	; 0x28
   32cc8:	6022      	str	r2, [r4, #0]
   32cca:	e9cd b301 	strd	fp, r3, [sp, #4]
   32cce:	ab09      	add	r3, sp, #36	; 0x24
   32cd0:	ec49 8b10 	vmov	d0, r8, r9
   32cd4:	9300      	str	r3, [sp, #0]
   32cd6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   32cda:	f004 fbba 	bl	37452 <__cvt>
   32cde:	9b06      	ldr	r3, [sp, #24]
   32ce0:	4680      	mov	r8, r0
   32ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
   32ce4:	2b47      	cmp	r3, #71	; 0x47
   32ce6:	d108      	bne.n	32cfa <_printf_float+0x142>
   32ce8:	1cc8      	adds	r0, r1, #3
   32cea:	db02      	blt.n	32cf2 <_printf_float+0x13a>
   32cec:	6863      	ldr	r3, [r4, #4]
   32cee:	4299      	cmp	r1, r3
   32cf0:	dd41      	ble.n	32d76 <_printf_float+0x1be>
   32cf2:	f1ab 0b02 	sub.w	fp, fp, #2
   32cf6:	fa5f fb8b 	uxtb.w	fp, fp
   32cfa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   32cfe:	d820      	bhi.n	32d42 <_printf_float+0x18a>
   32d00:	3901      	subs	r1, #1
   32d02:	465a      	mov	r2, fp
   32d04:	f104 0050 	add.w	r0, r4, #80	; 0x50
   32d08:	9109      	str	r1, [sp, #36]	; 0x24
   32d0a:	f004 fc04 	bl	37516 <__exponent>
   32d0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   32d10:	4681      	mov	r9, r0
   32d12:	1813      	adds	r3, r2, r0
   32d14:	2a01      	cmp	r2, #1
   32d16:	6123      	str	r3, [r4, #16]
   32d18:	dc02      	bgt.n	32d20 <_printf_float+0x168>
   32d1a:	6822      	ldr	r2, [r4, #0]
   32d1c:	07d2      	lsls	r2, r2, #31
   32d1e:	d501      	bpl.n	32d24 <_printf_float+0x16c>
   32d20:	3301      	adds	r3, #1
   32d22:	6123      	str	r3, [r4, #16]
   32d24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   32d28:	2b00      	cmp	r3, #0
   32d2a:	d09c      	beq.n	32c66 <_printf_float+0xae>
   32d2c:	232d      	movs	r3, #45	; 0x2d
   32d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   32d32:	e798      	b.n	32c66 <_printf_float+0xae>
   32d34:	9a06      	ldr	r2, [sp, #24]
   32d36:	2a47      	cmp	r2, #71	; 0x47
   32d38:	d1be      	bne.n	32cb8 <_printf_float+0x100>
   32d3a:	2b00      	cmp	r3, #0
   32d3c:	d1bc      	bne.n	32cb8 <_printf_float+0x100>
   32d3e:	2301      	movs	r3, #1
   32d40:	e7b9      	b.n	32cb6 <_printf_float+0xfe>
   32d42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   32d46:	d118      	bne.n	32d7a <_printf_float+0x1c2>
   32d48:	2900      	cmp	r1, #0
   32d4a:	6863      	ldr	r3, [r4, #4]
   32d4c:	dd0b      	ble.n	32d66 <_printf_float+0x1ae>
   32d4e:	6121      	str	r1, [r4, #16]
   32d50:	b913      	cbnz	r3, 32d58 <_printf_float+0x1a0>
   32d52:	6822      	ldr	r2, [r4, #0]
   32d54:	07d0      	lsls	r0, r2, #31
   32d56:	d502      	bpl.n	32d5e <_printf_float+0x1a6>
   32d58:	3301      	adds	r3, #1
   32d5a:	440b      	add	r3, r1
   32d5c:	6123      	str	r3, [r4, #16]
   32d5e:	f04f 0900 	mov.w	r9, #0
   32d62:	65a1      	str	r1, [r4, #88]	; 0x58
   32d64:	e7de      	b.n	32d24 <_printf_float+0x16c>
   32d66:	b913      	cbnz	r3, 32d6e <_printf_float+0x1b6>
   32d68:	6822      	ldr	r2, [r4, #0]
   32d6a:	07d2      	lsls	r2, r2, #31
   32d6c:	d501      	bpl.n	32d72 <_printf_float+0x1ba>
   32d6e:	3302      	adds	r3, #2
   32d70:	e7f4      	b.n	32d5c <_printf_float+0x1a4>
   32d72:	2301      	movs	r3, #1
   32d74:	e7f2      	b.n	32d5c <_printf_float+0x1a4>
   32d76:	f04f 0b67 	mov.w	fp, #103	; 0x67
   32d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   32d7c:	4299      	cmp	r1, r3
   32d7e:	db05      	blt.n	32d8c <_printf_float+0x1d4>
   32d80:	6823      	ldr	r3, [r4, #0]
   32d82:	6121      	str	r1, [r4, #16]
   32d84:	07d8      	lsls	r0, r3, #31
   32d86:	d5ea      	bpl.n	32d5e <_printf_float+0x1a6>
   32d88:	1c4b      	adds	r3, r1, #1
   32d8a:	e7e7      	b.n	32d5c <_printf_float+0x1a4>
   32d8c:	2900      	cmp	r1, #0
   32d8e:	bfd4      	ite	le
   32d90:	f1c1 0202 	rsble	r2, r1, #2
   32d94:	2201      	movgt	r2, #1
   32d96:	4413      	add	r3, r2
   32d98:	e7e0      	b.n	32d5c <_printf_float+0x1a4>
   32d9a:	6823      	ldr	r3, [r4, #0]
   32d9c:	055a      	lsls	r2, r3, #21
   32d9e:	d407      	bmi.n	32db0 <_printf_float+0x1f8>
   32da0:	6923      	ldr	r3, [r4, #16]
   32da2:	4642      	mov	r2, r8
   32da4:	4631      	mov	r1, r6
   32da6:	4628      	mov	r0, r5
   32da8:	47b8      	blx	r7
   32daa:	3001      	adds	r0, #1
   32dac:	d12c      	bne.n	32e08 <_printf_float+0x250>
   32dae:	e764      	b.n	32c7a <_printf_float+0xc2>
   32db0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   32db4:	f240 80e0 	bls.w	32f78 <_printf_float+0x3c0>
   32db8:	2200      	movs	r2, #0
   32dba:	2300      	movs	r3, #0
   32dbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   32dc0:	f7e6 f8dc 	bl	18f7c <__aeabi_dcmpeq>
   32dc4:	2800      	cmp	r0, #0
   32dc6:	d034      	beq.n	32e32 <_printf_float+0x27a>
   32dc8:	2301      	movs	r3, #1
   32dca:	4a37      	ldr	r2, [pc, #220]	; (32ea8 <_printf_float+0x2f0>)
   32dcc:	4631      	mov	r1, r6
   32dce:	4628      	mov	r0, r5
   32dd0:	47b8      	blx	r7
   32dd2:	3001      	adds	r0, #1
   32dd4:	f43f af51 	beq.w	32c7a <_printf_float+0xc2>
   32dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   32ddc:	429a      	cmp	r2, r3
   32dde:	db02      	blt.n	32de6 <_printf_float+0x22e>
   32de0:	6823      	ldr	r3, [r4, #0]
   32de2:	07d8      	lsls	r0, r3, #31
   32de4:	d510      	bpl.n	32e08 <_printf_float+0x250>
   32de6:	ee18 3a10 	vmov	r3, s16
   32dea:	4652      	mov	r2, sl
   32dec:	4631      	mov	r1, r6
   32dee:	4628      	mov	r0, r5
   32df0:	47b8      	blx	r7
   32df2:	3001      	adds	r0, #1
   32df4:	f43f af41 	beq.w	32c7a <_printf_float+0xc2>
   32df8:	f04f 0800 	mov.w	r8, #0
   32dfc:	f104 091a 	add.w	r9, r4, #26
   32e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   32e02:	3b01      	subs	r3, #1
   32e04:	4543      	cmp	r3, r8
   32e06:	dc09      	bgt.n	32e1c <_printf_float+0x264>
   32e08:	6823      	ldr	r3, [r4, #0]
   32e0a:	079b      	lsls	r3, r3, #30
   32e0c:	f100 8105 	bmi.w	3301a <_printf_float+0x462>
   32e10:	68e0      	ldr	r0, [r4, #12]
   32e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   32e14:	4298      	cmp	r0, r3
   32e16:	bfb8      	it	lt
   32e18:	4618      	movlt	r0, r3
   32e1a:	e730      	b.n	32c7e <_printf_float+0xc6>
   32e1c:	2301      	movs	r3, #1
   32e1e:	464a      	mov	r2, r9
   32e20:	4631      	mov	r1, r6
   32e22:	4628      	mov	r0, r5
   32e24:	47b8      	blx	r7
   32e26:	3001      	adds	r0, #1
   32e28:	f43f af27 	beq.w	32c7a <_printf_float+0xc2>
   32e2c:	f108 0801 	add.w	r8, r8, #1
   32e30:	e7e6      	b.n	32e00 <_printf_float+0x248>
   32e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   32e34:	2b00      	cmp	r3, #0
   32e36:	dc39      	bgt.n	32eac <_printf_float+0x2f4>
   32e38:	2301      	movs	r3, #1
   32e3a:	4a1b      	ldr	r2, [pc, #108]	; (32ea8 <_printf_float+0x2f0>)
   32e3c:	4631      	mov	r1, r6
   32e3e:	4628      	mov	r0, r5
   32e40:	47b8      	blx	r7
   32e42:	3001      	adds	r0, #1
   32e44:	f43f af19 	beq.w	32c7a <_printf_float+0xc2>
   32e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   32e4c:	4313      	orrs	r3, r2
   32e4e:	d102      	bne.n	32e56 <_printf_float+0x29e>
   32e50:	6823      	ldr	r3, [r4, #0]
   32e52:	07d9      	lsls	r1, r3, #31
   32e54:	d5d8      	bpl.n	32e08 <_printf_float+0x250>
   32e56:	ee18 3a10 	vmov	r3, s16
   32e5a:	4652      	mov	r2, sl
   32e5c:	4631      	mov	r1, r6
   32e5e:	4628      	mov	r0, r5
   32e60:	47b8      	blx	r7
   32e62:	3001      	adds	r0, #1
   32e64:	f43f af09 	beq.w	32c7a <_printf_float+0xc2>
   32e68:	f04f 0900 	mov.w	r9, #0
   32e6c:	f104 0a1a 	add.w	sl, r4, #26
   32e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   32e72:	425b      	negs	r3, r3
   32e74:	454b      	cmp	r3, r9
   32e76:	dc01      	bgt.n	32e7c <_printf_float+0x2c4>
   32e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   32e7a:	e792      	b.n	32da2 <_printf_float+0x1ea>
   32e7c:	2301      	movs	r3, #1
   32e7e:	4652      	mov	r2, sl
   32e80:	4631      	mov	r1, r6
   32e82:	4628      	mov	r0, r5
   32e84:	47b8      	blx	r7
   32e86:	3001      	adds	r0, #1
   32e88:	f43f aef7 	beq.w	32c7a <_printf_float+0xc2>
   32e8c:	f109 0901 	add.w	r9, r9, #1
   32e90:	e7ee      	b.n	32e70 <_printf_float+0x2b8>
   32e92:	bf00      	nop
   32e94:	7fefffff 	.word	0x7fefffff
   32e98:	0003cb84 	.word	0x0003cb84
   32e9c:	0003a896 	.word	0x0003a896
   32ea0:	0003cb8c 	.word	0x0003cb8c
   32ea4:	0003cb88 	.word	0x0003cb88
   32ea8:	000397b5 	.word	0x000397b5
   32eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   32eae:	6da3      	ldr	r3, [r4, #88]	; 0x58
   32eb0:	429a      	cmp	r2, r3
   32eb2:	bfa8      	it	ge
   32eb4:	461a      	movge	r2, r3
   32eb6:	2a00      	cmp	r2, #0
   32eb8:	4691      	mov	r9, r2
   32eba:	dc37      	bgt.n	32f2c <_printf_float+0x374>
   32ebc:	f04f 0b00 	mov.w	fp, #0
   32ec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   32ec4:	f104 021a 	add.w	r2, r4, #26
   32ec8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   32eca:	9305      	str	r3, [sp, #20]
   32ecc:	eba3 0309 	sub.w	r3, r3, r9
   32ed0:	455b      	cmp	r3, fp
   32ed2:	dc33      	bgt.n	32f3c <_printf_float+0x384>
   32ed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   32ed8:	429a      	cmp	r2, r3
   32eda:	db3b      	blt.n	32f54 <_printf_float+0x39c>
   32edc:	6823      	ldr	r3, [r4, #0]
   32ede:	07da      	lsls	r2, r3, #31
   32ee0:	d438      	bmi.n	32f54 <_printf_float+0x39c>
   32ee2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   32ee4:	9b05      	ldr	r3, [sp, #20]
   32ee6:	9909      	ldr	r1, [sp, #36]	; 0x24
   32ee8:	1ad3      	subs	r3, r2, r3
   32eea:	eba2 0901 	sub.w	r9, r2, r1
   32eee:	4599      	cmp	r9, r3
   32ef0:	bfa8      	it	ge
   32ef2:	4699      	movge	r9, r3
   32ef4:	f1b9 0f00 	cmp.w	r9, #0
   32ef8:	dc35      	bgt.n	32f66 <_printf_float+0x3ae>
   32efa:	f04f 0800 	mov.w	r8, #0
   32efe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   32f02:	f104 0a1a 	add.w	sl, r4, #26
   32f06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   32f0a:	1a9b      	subs	r3, r3, r2
   32f0c:	eba3 0309 	sub.w	r3, r3, r9
   32f10:	4543      	cmp	r3, r8
   32f12:	f77f af79 	ble.w	32e08 <_printf_float+0x250>
   32f16:	2301      	movs	r3, #1
   32f18:	4652      	mov	r2, sl
   32f1a:	4631      	mov	r1, r6
   32f1c:	4628      	mov	r0, r5
   32f1e:	47b8      	blx	r7
   32f20:	3001      	adds	r0, #1
   32f22:	f43f aeaa 	beq.w	32c7a <_printf_float+0xc2>
   32f26:	f108 0801 	add.w	r8, r8, #1
   32f2a:	e7ec      	b.n	32f06 <_printf_float+0x34e>
   32f2c:	4613      	mov	r3, r2
   32f2e:	4631      	mov	r1, r6
   32f30:	4642      	mov	r2, r8
   32f32:	4628      	mov	r0, r5
   32f34:	47b8      	blx	r7
   32f36:	3001      	adds	r0, #1
   32f38:	d1c0      	bne.n	32ebc <_printf_float+0x304>
   32f3a:	e69e      	b.n	32c7a <_printf_float+0xc2>
   32f3c:	2301      	movs	r3, #1
   32f3e:	4631      	mov	r1, r6
   32f40:	4628      	mov	r0, r5
   32f42:	9205      	str	r2, [sp, #20]
   32f44:	47b8      	blx	r7
   32f46:	3001      	adds	r0, #1
   32f48:	f43f ae97 	beq.w	32c7a <_printf_float+0xc2>
   32f4c:	f10b 0b01 	add.w	fp, fp, #1
   32f50:	9a05      	ldr	r2, [sp, #20]
   32f52:	e7b9      	b.n	32ec8 <_printf_float+0x310>
   32f54:	ee18 3a10 	vmov	r3, s16
   32f58:	4652      	mov	r2, sl
   32f5a:	4631      	mov	r1, r6
   32f5c:	4628      	mov	r0, r5
   32f5e:	47b8      	blx	r7
   32f60:	3001      	adds	r0, #1
   32f62:	d1be      	bne.n	32ee2 <_printf_float+0x32a>
   32f64:	e689      	b.n	32c7a <_printf_float+0xc2>
   32f66:	9a05      	ldr	r2, [sp, #20]
   32f68:	464b      	mov	r3, r9
   32f6a:	4631      	mov	r1, r6
   32f6c:	4628      	mov	r0, r5
   32f6e:	4442      	add	r2, r8
   32f70:	47b8      	blx	r7
   32f72:	3001      	adds	r0, #1
   32f74:	d1c1      	bne.n	32efa <_printf_float+0x342>
   32f76:	e680      	b.n	32c7a <_printf_float+0xc2>
   32f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   32f7a:	2a01      	cmp	r2, #1
   32f7c:	dc01      	bgt.n	32f82 <_printf_float+0x3ca>
   32f7e:	07db      	lsls	r3, r3, #31
   32f80:	d538      	bpl.n	32ff4 <_printf_float+0x43c>
   32f82:	2301      	movs	r3, #1
   32f84:	4642      	mov	r2, r8
   32f86:	4631      	mov	r1, r6
   32f88:	4628      	mov	r0, r5
   32f8a:	47b8      	blx	r7
   32f8c:	3001      	adds	r0, #1
   32f8e:	f43f ae74 	beq.w	32c7a <_printf_float+0xc2>
   32f92:	ee18 3a10 	vmov	r3, s16
   32f96:	4652      	mov	r2, sl
   32f98:	4631      	mov	r1, r6
   32f9a:	4628      	mov	r0, r5
   32f9c:	47b8      	blx	r7
   32f9e:	3001      	adds	r0, #1
   32fa0:	f43f ae6b 	beq.w	32c7a <_printf_float+0xc2>
   32fa4:	2200      	movs	r2, #0
   32fa6:	2300      	movs	r3, #0
   32fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   32fac:	f7e5 ffe6 	bl	18f7c <__aeabi_dcmpeq>
   32fb0:	b9d8      	cbnz	r0, 32fea <_printf_float+0x432>
   32fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   32fb4:	f108 0201 	add.w	r2, r8, #1
   32fb8:	3b01      	subs	r3, #1
   32fba:	4631      	mov	r1, r6
   32fbc:	4628      	mov	r0, r5
   32fbe:	47b8      	blx	r7
   32fc0:	3001      	adds	r0, #1
   32fc2:	d10e      	bne.n	32fe2 <_printf_float+0x42a>
   32fc4:	e659      	b.n	32c7a <_printf_float+0xc2>
   32fc6:	2301      	movs	r3, #1
   32fc8:	4652      	mov	r2, sl
   32fca:	4631      	mov	r1, r6
   32fcc:	4628      	mov	r0, r5
   32fce:	47b8      	blx	r7
   32fd0:	3001      	adds	r0, #1
   32fd2:	f43f ae52 	beq.w	32c7a <_printf_float+0xc2>
   32fd6:	f108 0801 	add.w	r8, r8, #1
   32fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   32fdc:	3b01      	subs	r3, #1
   32fde:	4543      	cmp	r3, r8
   32fe0:	dcf1      	bgt.n	32fc6 <_printf_float+0x40e>
   32fe2:	464b      	mov	r3, r9
   32fe4:	f104 0250 	add.w	r2, r4, #80	; 0x50
   32fe8:	e6dc      	b.n	32da4 <_printf_float+0x1ec>
   32fea:	f04f 0800 	mov.w	r8, #0
   32fee:	f104 0a1a 	add.w	sl, r4, #26
   32ff2:	e7f2      	b.n	32fda <_printf_float+0x422>
   32ff4:	2301      	movs	r3, #1
   32ff6:	4642      	mov	r2, r8
   32ff8:	e7df      	b.n	32fba <_printf_float+0x402>
   32ffa:	2301      	movs	r3, #1
   32ffc:	464a      	mov	r2, r9
   32ffe:	4631      	mov	r1, r6
   33000:	4628      	mov	r0, r5
   33002:	47b8      	blx	r7
   33004:	3001      	adds	r0, #1
   33006:	f43f ae38 	beq.w	32c7a <_printf_float+0xc2>
   3300a:	f108 0801 	add.w	r8, r8, #1
   3300e:	68e3      	ldr	r3, [r4, #12]
   33010:	990b      	ldr	r1, [sp, #44]	; 0x2c
   33012:	1a5b      	subs	r3, r3, r1
   33014:	4543      	cmp	r3, r8
   33016:	dcf0      	bgt.n	32ffa <_printf_float+0x442>
   33018:	e6fa      	b.n	32e10 <_printf_float+0x258>
   3301a:	f04f 0800 	mov.w	r8, #0
   3301e:	f104 0919 	add.w	r9, r4, #25
   33022:	e7f4      	b.n	3300e <_printf_float+0x456>

00033024 <_printf_i>:
   33024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   33028:	460c      	mov	r4, r1
   3302a:	4691      	mov	r9, r2
   3302c:	4680      	mov	r8, r0
   3302e:	469a      	mov	sl, r3
   33030:	7e27      	ldrb	r7, [r4, #24]
   33032:	f104 0243 	add.w	r2, r4, #67	; 0x43
   33036:	990c      	ldr	r1, [sp, #48]	; 0x30
   33038:	2f78      	cmp	r7, #120	; 0x78
   3303a:	d807      	bhi.n	3304c <_printf_i+0x28>
   3303c:	2f62      	cmp	r7, #98	; 0x62
   3303e:	d80a      	bhi.n	33056 <_printf_i+0x32>
   33040:	2f00      	cmp	r7, #0
   33042:	f000 80d8 	beq.w	331f6 <_printf_i+0x1d2>
   33046:	2f58      	cmp	r7, #88	; 0x58
   33048:	f000 80a3 	beq.w	33192 <_printf_i+0x16e>
   3304c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   33050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   33054:	e03a      	b.n	330cc <_printf_i+0xa8>
   33056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   3305a:	2b15      	cmp	r3, #21
   3305c:	d8f6      	bhi.n	3304c <_printf_i+0x28>
   3305e:	a001      	add	r0, pc, #4	; (adr r0, 33064 <_printf_i+0x40>)
   33060:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   33064:	000330bd 	.word	0x000330bd
   33068:	000330d1 	.word	0x000330d1
   3306c:	0003304d 	.word	0x0003304d
   33070:	0003304d 	.word	0x0003304d
   33074:	0003304d 	.word	0x0003304d
   33078:	0003304d 	.word	0x0003304d
   3307c:	000330d1 	.word	0x000330d1
   33080:	0003304d 	.word	0x0003304d
   33084:	0003304d 	.word	0x0003304d
   33088:	0003304d 	.word	0x0003304d
   3308c:	0003304d 	.word	0x0003304d
   33090:	000331dd 	.word	0x000331dd
   33094:	00033101 	.word	0x00033101
   33098:	000331bf 	.word	0x000331bf
   3309c:	0003304d 	.word	0x0003304d
   330a0:	0003304d 	.word	0x0003304d
   330a4:	000331ff 	.word	0x000331ff
   330a8:	0003304d 	.word	0x0003304d
   330ac:	00033101 	.word	0x00033101
   330b0:	0003304d 	.word	0x0003304d
   330b4:	0003304d 	.word	0x0003304d
   330b8:	000331c7 	.word	0x000331c7
   330bc:	680b      	ldr	r3, [r1, #0]
   330be:	f104 0642 	add.w	r6, r4, #66	; 0x42
   330c2:	1d1a      	adds	r2, r3, #4
   330c4:	681b      	ldr	r3, [r3, #0]
   330c6:	600a      	str	r2, [r1, #0]
   330c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   330cc:	2301      	movs	r3, #1
   330ce:	e0a3      	b.n	33218 <_printf_i+0x1f4>
   330d0:	6825      	ldr	r5, [r4, #0]
   330d2:	6808      	ldr	r0, [r1, #0]
   330d4:	062e      	lsls	r6, r5, #24
   330d6:	f100 0304 	add.w	r3, r0, #4
   330da:	d50a      	bpl.n	330f2 <_printf_i+0xce>
   330dc:	6805      	ldr	r5, [r0, #0]
   330de:	600b      	str	r3, [r1, #0]
   330e0:	2d00      	cmp	r5, #0
   330e2:	da03      	bge.n	330ec <_printf_i+0xc8>
   330e4:	232d      	movs	r3, #45	; 0x2d
   330e6:	426d      	negs	r5, r5
   330e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   330ec:	485e      	ldr	r0, [pc, #376]	; (33268 <_printf_i+0x244>)
   330ee:	230a      	movs	r3, #10
   330f0:	e019      	b.n	33126 <_printf_i+0x102>
   330f2:	f015 0f40 	tst.w	r5, #64	; 0x40
   330f6:	6805      	ldr	r5, [r0, #0]
   330f8:	600b      	str	r3, [r1, #0]
   330fa:	bf18      	it	ne
   330fc:	b22d      	sxthne	r5, r5
   330fe:	e7ef      	b.n	330e0 <_printf_i+0xbc>
   33100:	680b      	ldr	r3, [r1, #0]
   33102:	6825      	ldr	r5, [r4, #0]
   33104:	1d18      	adds	r0, r3, #4
   33106:	6008      	str	r0, [r1, #0]
   33108:	0628      	lsls	r0, r5, #24
   3310a:	d501      	bpl.n	33110 <_printf_i+0xec>
   3310c:	681d      	ldr	r5, [r3, #0]
   3310e:	e002      	b.n	33116 <_printf_i+0xf2>
   33110:	0669      	lsls	r1, r5, #25
   33112:	d5fb      	bpl.n	3310c <_printf_i+0xe8>
   33114:	881d      	ldrh	r5, [r3, #0]
   33116:	2f6f      	cmp	r7, #111	; 0x6f
   33118:	4853      	ldr	r0, [pc, #332]	; (33268 <_printf_i+0x244>)
   3311a:	bf0c      	ite	eq
   3311c:	2308      	moveq	r3, #8
   3311e:	230a      	movne	r3, #10
   33120:	2100      	movs	r1, #0
   33122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   33126:	6866      	ldr	r6, [r4, #4]
   33128:	2e00      	cmp	r6, #0
   3312a:	60a6      	str	r6, [r4, #8]
   3312c:	bfa2      	ittt	ge
   3312e:	6821      	ldrge	r1, [r4, #0]
   33130:	f021 0104 	bicge.w	r1, r1, #4
   33134:	6021      	strge	r1, [r4, #0]
   33136:	b90d      	cbnz	r5, 3313c <_printf_i+0x118>
   33138:	2e00      	cmp	r6, #0
   3313a:	d04d      	beq.n	331d8 <_printf_i+0x1b4>
   3313c:	4616      	mov	r6, r2
   3313e:	fbb5 f1f3 	udiv	r1, r5, r3
   33142:	fb03 5711 	mls	r7, r3, r1, r5
   33146:	5dc7      	ldrb	r7, [r0, r7]
   33148:	f806 7d01 	strb.w	r7, [r6, #-1]!
   3314c:	462f      	mov	r7, r5
   3314e:	460d      	mov	r5, r1
   33150:	42bb      	cmp	r3, r7
   33152:	d9f4      	bls.n	3313e <_printf_i+0x11a>
   33154:	2b08      	cmp	r3, #8
   33156:	d10b      	bne.n	33170 <_printf_i+0x14c>
   33158:	6823      	ldr	r3, [r4, #0]
   3315a:	07df      	lsls	r7, r3, #31
   3315c:	d508      	bpl.n	33170 <_printf_i+0x14c>
   3315e:	6923      	ldr	r3, [r4, #16]
   33160:	6861      	ldr	r1, [r4, #4]
   33162:	4299      	cmp	r1, r3
   33164:	bfde      	ittt	le
   33166:	2330      	movle	r3, #48	; 0x30
   33168:	f806 3c01 	strble.w	r3, [r6, #-1]
   3316c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   33170:	1b92      	subs	r2, r2, r6
   33172:	6122      	str	r2, [r4, #16]
   33174:	464b      	mov	r3, r9
   33176:	aa03      	add	r2, sp, #12
   33178:	4621      	mov	r1, r4
   3317a:	4640      	mov	r0, r8
   3317c:	f8cd a000 	str.w	sl, [sp]
   33180:	f004 fa07 	bl	37592 <_printf_common>
   33184:	3001      	adds	r0, #1
   33186:	d14c      	bne.n	33222 <_printf_i+0x1fe>
   33188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3318c:	b004      	add	sp, #16
   3318e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33192:	4835      	ldr	r0, [pc, #212]	; (33268 <_printf_i+0x244>)
   33194:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   33198:	6823      	ldr	r3, [r4, #0]
   3319a:	680e      	ldr	r6, [r1, #0]
   3319c:	061f      	lsls	r7, r3, #24
   3319e:	f856 5b04 	ldr.w	r5, [r6], #4
   331a2:	600e      	str	r6, [r1, #0]
   331a4:	d514      	bpl.n	331d0 <_printf_i+0x1ac>
   331a6:	07d9      	lsls	r1, r3, #31
   331a8:	bf44      	itt	mi
   331aa:	f043 0320 	orrmi.w	r3, r3, #32
   331ae:	6023      	strmi	r3, [r4, #0]
   331b0:	b91d      	cbnz	r5, 331ba <_printf_i+0x196>
   331b2:	6823      	ldr	r3, [r4, #0]
   331b4:	f023 0320 	bic.w	r3, r3, #32
   331b8:	6023      	str	r3, [r4, #0]
   331ba:	2310      	movs	r3, #16
   331bc:	e7b0      	b.n	33120 <_printf_i+0xfc>
   331be:	6823      	ldr	r3, [r4, #0]
   331c0:	f043 0320 	orr.w	r3, r3, #32
   331c4:	6023      	str	r3, [r4, #0]
   331c6:	2378      	movs	r3, #120	; 0x78
   331c8:	4828      	ldr	r0, [pc, #160]	; (3326c <_printf_i+0x248>)
   331ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   331ce:	e7e3      	b.n	33198 <_printf_i+0x174>
   331d0:	065e      	lsls	r6, r3, #25
   331d2:	bf48      	it	mi
   331d4:	b2ad      	uxthmi	r5, r5
   331d6:	e7e6      	b.n	331a6 <_printf_i+0x182>
   331d8:	4616      	mov	r6, r2
   331da:	e7bb      	b.n	33154 <_printf_i+0x130>
   331dc:	680b      	ldr	r3, [r1, #0]
   331de:	6826      	ldr	r6, [r4, #0]
   331e0:	1d1d      	adds	r5, r3, #4
   331e2:	6960      	ldr	r0, [r4, #20]
   331e4:	600d      	str	r5, [r1, #0]
   331e6:	0635      	lsls	r5, r6, #24
   331e8:	681b      	ldr	r3, [r3, #0]
   331ea:	d501      	bpl.n	331f0 <_printf_i+0x1cc>
   331ec:	6018      	str	r0, [r3, #0]
   331ee:	e002      	b.n	331f6 <_printf_i+0x1d2>
   331f0:	0671      	lsls	r1, r6, #25
   331f2:	d5fb      	bpl.n	331ec <_printf_i+0x1c8>
   331f4:	8018      	strh	r0, [r3, #0]
   331f6:	2300      	movs	r3, #0
   331f8:	4616      	mov	r6, r2
   331fa:	6123      	str	r3, [r4, #16]
   331fc:	e7ba      	b.n	33174 <_printf_i+0x150>
   331fe:	680b      	ldr	r3, [r1, #0]
   33200:	1d1a      	adds	r2, r3, #4
   33202:	600a      	str	r2, [r1, #0]
   33204:	2100      	movs	r1, #0
   33206:	681e      	ldr	r6, [r3, #0]
   33208:	6862      	ldr	r2, [r4, #4]
   3320a:	4630      	mov	r0, r6
   3320c:	f004 f8dd 	bl	373ca <memchr>
   33210:	b108      	cbz	r0, 33216 <_printf_i+0x1f2>
   33212:	1b80      	subs	r0, r0, r6
   33214:	6060      	str	r0, [r4, #4]
   33216:	6863      	ldr	r3, [r4, #4]
   33218:	6123      	str	r3, [r4, #16]
   3321a:	2300      	movs	r3, #0
   3321c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   33220:	e7a8      	b.n	33174 <_printf_i+0x150>
   33222:	6923      	ldr	r3, [r4, #16]
   33224:	4632      	mov	r2, r6
   33226:	4649      	mov	r1, r9
   33228:	4640      	mov	r0, r8
   3322a:	47d0      	blx	sl
   3322c:	3001      	adds	r0, #1
   3322e:	d0ab      	beq.n	33188 <_printf_i+0x164>
   33230:	6823      	ldr	r3, [r4, #0]
   33232:	079b      	lsls	r3, r3, #30
   33234:	d413      	bmi.n	3325e <_printf_i+0x23a>
   33236:	68e0      	ldr	r0, [r4, #12]
   33238:	9b03      	ldr	r3, [sp, #12]
   3323a:	4298      	cmp	r0, r3
   3323c:	bfb8      	it	lt
   3323e:	4618      	movlt	r0, r3
   33240:	e7a4      	b.n	3318c <_printf_i+0x168>
   33242:	2301      	movs	r3, #1
   33244:	4632      	mov	r2, r6
   33246:	4649      	mov	r1, r9
   33248:	4640      	mov	r0, r8
   3324a:	47d0      	blx	sl
   3324c:	3001      	adds	r0, #1
   3324e:	d09b      	beq.n	33188 <_printf_i+0x164>
   33250:	3501      	adds	r5, #1
   33252:	68e3      	ldr	r3, [r4, #12]
   33254:	9903      	ldr	r1, [sp, #12]
   33256:	1a5b      	subs	r3, r3, r1
   33258:	42ab      	cmp	r3, r5
   3325a:	dcf2      	bgt.n	33242 <_printf_i+0x21e>
   3325c:	e7eb      	b.n	33236 <_printf_i+0x212>
   3325e:	2500      	movs	r5, #0
   33260:	f104 0619 	add.w	r6, r4, #25
   33264:	e7f5      	b.n	33252 <_printf_i+0x22e>
   33266:	bf00      	nop
   33268:	0003cb90 	.word	0x0003cb90
   3326c:	0003cba1 	.word	0x0003cba1

00033270 <sniprintf>:
   33270:	b40c      	push	{r2, r3}
   33272:	4b18      	ldr	r3, [pc, #96]	; (332d4 <sniprintf+0x64>)
   33274:	b530      	push	{r4, r5, lr}
   33276:	1e0c      	subs	r4, r1, #0
   33278:	b09d      	sub	sp, #116	; 0x74
   3327a:	681d      	ldr	r5, [r3, #0]
   3327c:	da08      	bge.n	33290 <sniprintf+0x20>
   3327e:	238b      	movs	r3, #139	; 0x8b
   33280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33284:	602b      	str	r3, [r5, #0]
   33286:	b01d      	add	sp, #116	; 0x74
   33288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3328c:	b002      	add	sp, #8
   3328e:	4770      	bx	lr
   33290:	f44f 7302 	mov.w	r3, #520	; 0x208
   33294:	9002      	str	r0, [sp, #8]
   33296:	9006      	str	r0, [sp, #24]
   33298:	a902      	add	r1, sp, #8
   3329a:	f8ad 3014 	strh.w	r3, [sp, #20]
   3329e:	bf14      	ite	ne
   332a0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   332a4:	4623      	moveq	r3, r4
   332a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   332a8:	4628      	mov	r0, r5
   332aa:	9304      	str	r3, [sp, #16]
   332ac:	9307      	str	r3, [sp, #28]
   332ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   332b2:	f8ad 3016 	strh.w	r3, [sp, #22]
   332b6:	ab21      	add	r3, sp, #132	; 0x84
   332b8:	9301      	str	r3, [sp, #4]
   332ba:	f000 fa87 	bl	337cc <_svfiprintf_r>
   332be:	1c43      	adds	r3, r0, #1
   332c0:	bfbc      	itt	lt
   332c2:	238b      	movlt	r3, #139	; 0x8b
   332c4:	602b      	strlt	r3, [r5, #0]
   332c6:	2c00      	cmp	r4, #0
   332c8:	d0dd      	beq.n	33286 <sniprintf+0x16>
   332ca:	9b02      	ldr	r3, [sp, #8]
   332cc:	2200      	movs	r2, #0
   332ce:	701a      	strb	r2, [r3, #0]
   332d0:	e7d9      	b.n	33286 <sniprintf+0x16>
   332d2:	bf00      	nop
   332d4:	20020468 	.word	0x20020468

000332d8 <siprintf>:
   332d8:	b40e      	push	{r1, r2, r3}
   332da:	b500      	push	{lr}
   332dc:	b09c      	sub	sp, #112	; 0x70
   332de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   332e2:	ab1d      	add	r3, sp, #116	; 0x74
   332e4:	9002      	str	r0, [sp, #8]
   332e6:	9006      	str	r0, [sp, #24]
   332e8:	9107      	str	r1, [sp, #28]
   332ea:	9104      	str	r1, [sp, #16]
   332ec:	4808      	ldr	r0, [pc, #32]	; (33310 <siprintf+0x38>)
   332ee:	4909      	ldr	r1, [pc, #36]	; (33314 <siprintf+0x3c>)
   332f0:	f853 2b04 	ldr.w	r2, [r3], #4
   332f4:	9105      	str	r1, [sp, #20]
   332f6:	a902      	add	r1, sp, #8
   332f8:	6800      	ldr	r0, [r0, #0]
   332fa:	9301      	str	r3, [sp, #4]
   332fc:	f000 fa66 	bl	337cc <_svfiprintf_r>
   33300:	9b02      	ldr	r3, [sp, #8]
   33302:	2200      	movs	r2, #0
   33304:	701a      	strb	r2, [r3, #0]
   33306:	b01c      	add	sp, #112	; 0x70
   33308:	f85d eb04 	ldr.w	lr, [sp], #4
   3330c:	b003      	add	sp, #12
   3330e:	4770      	bx	lr
   33310:	20020468 	.word	0x20020468
   33314:	ffff0208 	.word	0xffff0208

00033318 <strncasecmp>:
   33318:	b570      	push	{r4, r5, r6, lr}
   3331a:	440a      	add	r2, r1
   3331c:	4604      	mov	r4, r0
   3331e:	4e0e      	ldr	r6, [pc, #56]	; (33358 <strncasecmp+0x40>)
   33320:	428a      	cmp	r2, r1
   33322:	d101      	bne.n	33328 <strncasecmp+0x10>
   33324:	2000      	movs	r0, #0
   33326:	e013      	b.n	33350 <strncasecmp+0x38>
   33328:	f814 3b01 	ldrb.w	r3, [r4], #1
   3332c:	5d98      	ldrb	r0, [r3, r6]
   3332e:	f000 0003 	and.w	r0, r0, #3
   33332:	2801      	cmp	r0, #1
   33334:	f811 0b01 	ldrb.w	r0, [r1], #1
   33338:	5c35      	ldrb	r5, [r6, r0]
   3333a:	bf08      	it	eq
   3333c:	3320      	addeq	r3, #32
   3333e:	f005 0503 	and.w	r5, r5, #3
   33342:	2d01      	cmp	r5, #1
   33344:	bf08      	it	eq
   33346:	3020      	addeq	r0, #32
   33348:	1a1b      	subs	r3, r3, r0
   3334a:	d102      	bne.n	33352 <strncasecmp+0x3a>
   3334c:	2800      	cmp	r0, #0
   3334e:	d1e7      	bne.n	33320 <strncasecmp+0x8>
   33350:	bd70      	pop	{r4, r5, r6, pc}
   33352:	4618      	mov	r0, r3
   33354:	e7fc      	b.n	33350 <strncasecmp+0x38>
   33356:	bf00      	nop
   33358:	0003ca84 	.word	0x0003ca84

0003335c <_strtol_l.isra.0>:
   3335c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33360:	468c      	mov	ip, r1
   33362:	4686      	mov	lr, r0
   33364:	4e38      	ldr	r6, [pc, #224]	; (33448 <_strtol_l.isra.0+0xec>)
   33366:	4660      	mov	r0, ip
   33368:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3336c:	5da5      	ldrb	r5, [r4, r6]
   3336e:	f015 0508 	ands.w	r5, r5, #8
   33372:	d1f8      	bne.n	33366 <_strtol_l.isra.0+0xa>
   33374:	2c2d      	cmp	r4, #45	; 0x2d
   33376:	d133      	bne.n	333e0 <_strtol_l.isra.0+0x84>
   33378:	f89c 4000 	ldrb.w	r4, [ip]
   3337c:	f04f 0801 	mov.w	r8, #1
   33380:	f100 0c02 	add.w	ip, r0, #2
   33384:	2b00      	cmp	r3, #0
   33386:	d05b      	beq.n	33440 <_strtol_l.isra.0+0xe4>
   33388:	2b10      	cmp	r3, #16
   3338a:	d10c      	bne.n	333a6 <_strtol_l.isra.0+0x4a>
   3338c:	2c30      	cmp	r4, #48	; 0x30
   3338e:	d10a      	bne.n	333a6 <_strtol_l.isra.0+0x4a>
   33390:	f89c 0000 	ldrb.w	r0, [ip]
   33394:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   33398:	2858      	cmp	r0, #88	; 0x58
   3339a:	d14c      	bne.n	33436 <_strtol_l.isra.0+0xda>
   3339c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   333a0:	2310      	movs	r3, #16
   333a2:	f10c 0c02 	add.w	ip, ip, #2
   333a6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   333aa:	2600      	movs	r6, #0
   333ac:	3f01      	subs	r7, #1
   333ae:	4630      	mov	r0, r6
   333b0:	fbb7 f9f3 	udiv	r9, r7, r3
   333b4:	fb03 7a19 	mls	sl, r3, r9, r7
   333b8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   333bc:	2d09      	cmp	r5, #9
   333be:	d817      	bhi.n	333f0 <_strtol_l.isra.0+0x94>
   333c0:	462c      	mov	r4, r5
   333c2:	42a3      	cmp	r3, r4
   333c4:	dd23      	ble.n	3340e <_strtol_l.isra.0+0xb2>
   333c6:	1c75      	adds	r5, r6, #1
   333c8:	d007      	beq.n	333da <_strtol_l.isra.0+0x7e>
   333ca:	4581      	cmp	r9, r0
   333cc:	d31c      	bcc.n	33408 <_strtol_l.isra.0+0xac>
   333ce:	d101      	bne.n	333d4 <_strtol_l.isra.0+0x78>
   333d0:	45a2      	cmp	sl, r4
   333d2:	db19      	blt.n	33408 <_strtol_l.isra.0+0xac>
   333d4:	fb00 4003 	mla	r0, r0, r3, r4
   333d8:	2601      	movs	r6, #1
   333da:	f81c 4b01 	ldrb.w	r4, [ip], #1
   333de:	e7eb      	b.n	333b8 <_strtol_l.isra.0+0x5c>
   333e0:	2c2b      	cmp	r4, #43	; 0x2b
   333e2:	46a8      	mov	r8, r5
   333e4:	bf04      	itt	eq
   333e6:	f89c 4000 	ldrbeq.w	r4, [ip]
   333ea:	f100 0c02 	addeq.w	ip, r0, #2
   333ee:	e7c9      	b.n	33384 <_strtol_l.isra.0+0x28>
   333f0:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   333f4:	2d19      	cmp	r5, #25
   333f6:	d801      	bhi.n	333fc <_strtol_l.isra.0+0xa0>
   333f8:	3c37      	subs	r4, #55	; 0x37
   333fa:	e7e2      	b.n	333c2 <_strtol_l.isra.0+0x66>
   333fc:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   33400:	2d19      	cmp	r5, #25
   33402:	d804      	bhi.n	3340e <_strtol_l.isra.0+0xb2>
   33404:	3c57      	subs	r4, #87	; 0x57
   33406:	e7dc      	b.n	333c2 <_strtol_l.isra.0+0x66>
   33408:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   3340c:	e7e5      	b.n	333da <_strtol_l.isra.0+0x7e>
   3340e:	1c73      	adds	r3, r6, #1
   33410:	d106      	bne.n	33420 <_strtol_l.isra.0+0xc4>
   33412:	2322      	movs	r3, #34	; 0x22
   33414:	4638      	mov	r0, r7
   33416:	f8ce 3000 	str.w	r3, [lr]
   3341a:	b942      	cbnz	r2, 3342e <_strtol_l.isra.0+0xd2>
   3341c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33420:	f1b8 0f00 	cmp.w	r8, #0
   33424:	d000      	beq.n	33428 <_strtol_l.isra.0+0xcc>
   33426:	4240      	negs	r0, r0
   33428:	2a00      	cmp	r2, #0
   3342a:	d0f7      	beq.n	3341c <_strtol_l.isra.0+0xc0>
   3342c:	b10e      	cbz	r6, 33432 <_strtol_l.isra.0+0xd6>
   3342e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   33432:	6011      	str	r1, [r2, #0]
   33434:	e7f2      	b.n	3341c <_strtol_l.isra.0+0xc0>
   33436:	2430      	movs	r4, #48	; 0x30
   33438:	2b00      	cmp	r3, #0
   3343a:	d1b4      	bne.n	333a6 <_strtol_l.isra.0+0x4a>
   3343c:	2308      	movs	r3, #8
   3343e:	e7b2      	b.n	333a6 <_strtol_l.isra.0+0x4a>
   33440:	2c30      	cmp	r4, #48	; 0x30
   33442:	d0a5      	beq.n	33390 <_strtol_l.isra.0+0x34>
   33444:	230a      	movs	r3, #10
   33446:	e7ae      	b.n	333a6 <_strtol_l.isra.0+0x4a>
   33448:	0003ca84 	.word	0x0003ca84

0003344c <strtol>:
   3344c:	4613      	mov	r3, r2
   3344e:	460a      	mov	r2, r1
   33450:	4601      	mov	r1, r0
   33452:	4802      	ldr	r0, [pc, #8]	; (3345c <strtol+0x10>)
   33454:	6800      	ldr	r0, [r0, #0]
   33456:	f7ff bf81 	b.w	3335c <_strtol_l.isra.0>
   3345a:	bf00      	nop
   3345c:	20020468 	.word	0x20020468

00033460 <_strtoul_l.isra.0>:
   33460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33464:	468c      	mov	ip, r1
   33466:	4686      	mov	lr, r0
   33468:	4e39      	ldr	r6, [pc, #228]	; (33550 <_strtoul_l.isra.0+0xf0>)
   3346a:	4660      	mov	r0, ip
   3346c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   33470:	5da5      	ldrb	r5, [r4, r6]
   33472:	f015 0508 	ands.w	r5, r5, #8
   33476:	d1f8      	bne.n	3346a <_strtoul_l.isra.0+0xa>
   33478:	2c2d      	cmp	r4, #45	; 0x2d
   3347a:	d134      	bne.n	334e6 <_strtoul_l.isra.0+0x86>
   3347c:	f89c 4000 	ldrb.w	r4, [ip]
   33480:	f04f 0801 	mov.w	r8, #1
   33484:	f100 0c02 	add.w	ip, r0, #2
   33488:	2b00      	cmp	r3, #0
   3348a:	d05d      	beq.n	33548 <_strtoul_l.isra.0+0xe8>
   3348c:	2b10      	cmp	r3, #16
   3348e:	d10c      	bne.n	334aa <_strtoul_l.isra.0+0x4a>
   33490:	2c30      	cmp	r4, #48	; 0x30
   33492:	d10a      	bne.n	334aa <_strtoul_l.isra.0+0x4a>
   33494:	f89c 0000 	ldrb.w	r0, [ip]
   33498:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3349c:	2858      	cmp	r0, #88	; 0x58
   3349e:	d14e      	bne.n	3353e <_strtoul_l.isra.0+0xde>
   334a0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   334a4:	2310      	movs	r3, #16
   334a6:	f10c 0c02 	add.w	ip, ip, #2
   334aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   334ae:	2500      	movs	r5, #0
   334b0:	fbb7 f7f3 	udiv	r7, r7, r3
   334b4:	fb03 f907 	mul.w	r9, r3, r7
   334b8:	4628      	mov	r0, r5
   334ba:	ea6f 0909 	mvn.w	r9, r9
   334be:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   334c2:	2e09      	cmp	r6, #9
   334c4:	d817      	bhi.n	334f6 <_strtoul_l.isra.0+0x96>
   334c6:	4634      	mov	r4, r6
   334c8:	42a3      	cmp	r3, r4
   334ca:	dd23      	ble.n	33514 <_strtoul_l.isra.0+0xb4>
   334cc:	2d00      	cmp	r5, #0
   334ce:	db1e      	blt.n	3350e <_strtoul_l.isra.0+0xae>
   334d0:	4287      	cmp	r7, r0
   334d2:	d31c      	bcc.n	3350e <_strtoul_l.isra.0+0xae>
   334d4:	d101      	bne.n	334da <_strtoul_l.isra.0+0x7a>
   334d6:	45a1      	cmp	r9, r4
   334d8:	db19      	blt.n	3350e <_strtoul_l.isra.0+0xae>
   334da:	fb00 4003 	mla	r0, r0, r3, r4
   334de:	2501      	movs	r5, #1
   334e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   334e4:	e7eb      	b.n	334be <_strtoul_l.isra.0+0x5e>
   334e6:	2c2b      	cmp	r4, #43	; 0x2b
   334e8:	46a8      	mov	r8, r5
   334ea:	bf04      	itt	eq
   334ec:	f89c 4000 	ldrbeq.w	r4, [ip]
   334f0:	f100 0c02 	addeq.w	ip, r0, #2
   334f4:	e7c8      	b.n	33488 <_strtoul_l.isra.0+0x28>
   334f6:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   334fa:	2e19      	cmp	r6, #25
   334fc:	d801      	bhi.n	33502 <_strtoul_l.isra.0+0xa2>
   334fe:	3c37      	subs	r4, #55	; 0x37
   33500:	e7e2      	b.n	334c8 <_strtoul_l.isra.0+0x68>
   33502:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   33506:	2e19      	cmp	r6, #25
   33508:	d804      	bhi.n	33514 <_strtoul_l.isra.0+0xb4>
   3350a:	3c57      	subs	r4, #87	; 0x57
   3350c:	e7dc      	b.n	334c8 <_strtoul_l.isra.0+0x68>
   3350e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   33512:	e7e5      	b.n	334e0 <_strtoul_l.isra.0+0x80>
   33514:	2d00      	cmp	r5, #0
   33516:	da07      	bge.n	33528 <_strtoul_l.isra.0+0xc8>
   33518:	2322      	movs	r3, #34	; 0x22
   3351a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3351e:	f8ce 3000 	str.w	r3, [lr]
   33522:	b942      	cbnz	r2, 33536 <_strtoul_l.isra.0+0xd6>
   33524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   33528:	f1b8 0f00 	cmp.w	r8, #0
   3352c:	d000      	beq.n	33530 <_strtoul_l.isra.0+0xd0>
   3352e:	4240      	negs	r0, r0
   33530:	2a00      	cmp	r2, #0
   33532:	d0f7      	beq.n	33524 <_strtoul_l.isra.0+0xc4>
   33534:	b10d      	cbz	r5, 3353a <_strtoul_l.isra.0+0xda>
   33536:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   3353a:	6011      	str	r1, [r2, #0]
   3353c:	e7f2      	b.n	33524 <_strtoul_l.isra.0+0xc4>
   3353e:	2430      	movs	r4, #48	; 0x30
   33540:	2b00      	cmp	r3, #0
   33542:	d1b2      	bne.n	334aa <_strtoul_l.isra.0+0x4a>
   33544:	2308      	movs	r3, #8
   33546:	e7b0      	b.n	334aa <_strtoul_l.isra.0+0x4a>
   33548:	2c30      	cmp	r4, #48	; 0x30
   3354a:	d0a3      	beq.n	33494 <_strtoul_l.isra.0+0x34>
   3354c:	230a      	movs	r3, #10
   3354e:	e7ac      	b.n	334aa <_strtoul_l.isra.0+0x4a>
   33550:	0003ca84 	.word	0x0003ca84

00033554 <strtoul>:
   33554:	4613      	mov	r3, r2
   33556:	460a      	mov	r2, r1
   33558:	4601      	mov	r1, r0
   3355a:	4802      	ldr	r0, [pc, #8]	; (33564 <strtoul+0x10>)
   3355c:	6800      	ldr	r0, [r0, #0]
   3355e:	f7ff bf7f 	b.w	33460 <_strtoul_l.isra.0>
   33562:	bf00      	nop
   33564:	20020468 	.word	0x20020468

00033568 <vsniprintf>:
   33568:	b507      	push	{r0, r1, r2, lr}
   3356a:	9300      	str	r3, [sp, #0]
   3356c:	4613      	mov	r3, r2
   3356e:	460a      	mov	r2, r1
   33570:	4601      	mov	r1, r0
   33572:	4803      	ldr	r0, [pc, #12]	; (33580 <vsniprintf+0x18>)
   33574:	6800      	ldr	r0, [r0, #0]
   33576:	f004 f90e 	bl	37796 <_vsniprintf_r>
   3357a:	b003      	add	sp, #12
   3357c:	f85d fb04 	ldr.w	pc, [sp], #4
   33580:	20020468 	.word	0x20020468

00033584 <_vsiprintf_r>:
   33584:	b500      	push	{lr}
   33586:	b09b      	sub	sp, #108	; 0x6c
   33588:	9100      	str	r1, [sp, #0]
   3358a:	9104      	str	r1, [sp, #16]
   3358c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   33590:	9105      	str	r1, [sp, #20]
   33592:	9102      	str	r1, [sp, #8]
   33594:	4905      	ldr	r1, [pc, #20]	; (335ac <_vsiprintf_r+0x28>)
   33596:	9103      	str	r1, [sp, #12]
   33598:	4669      	mov	r1, sp
   3359a:	f000 f917 	bl	337cc <_svfiprintf_r>
   3359e:	9b00      	ldr	r3, [sp, #0]
   335a0:	2200      	movs	r2, #0
   335a2:	701a      	strb	r2, [r3, #0]
   335a4:	b01b      	add	sp, #108	; 0x6c
   335a6:	f85d fb04 	ldr.w	pc, [sp], #4
   335aa:	bf00      	nop
   335ac:	ffff0208 	.word	0xffff0208

000335b0 <vsiprintf>:
   335b0:	4613      	mov	r3, r2
   335b2:	460a      	mov	r2, r1
   335b4:	4601      	mov	r1, r0
   335b6:	4802      	ldr	r0, [pc, #8]	; (335c0 <vsiprintf+0x10>)
   335b8:	6800      	ldr	r0, [r0, #0]
   335ba:	f7ff bfe3 	b.w	33584 <_vsiprintf_r>
   335be:	bf00      	nop
   335c0:	20020468 	.word	0x20020468

000335c4 <_localeconv_r>:
   335c4:	4800      	ldr	r0, [pc, #0]	; (335c8 <_localeconv_r+0x4>)
   335c6:	4770      	bx	lr
   335c8:	200205bc 	.word	0x200205bc

000335cc <malloc>:
   335cc:	4b02      	ldr	r3, [pc, #8]	; (335d8 <malloc+0xc>)
   335ce:	4601      	mov	r1, r0
   335d0:	6818      	ldr	r0, [r3, #0]
   335d2:	f000 b8a1 	b.w	33718 <_malloc_r>
   335d6:	bf00      	nop
   335d8:	20020468 	.word	0x20020468

000335dc <__pow5mult>:
   335dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   335e0:	4615      	mov	r5, r2
   335e2:	f012 0203 	ands.w	r2, r2, #3
   335e6:	4606      	mov	r6, r0
   335e8:	460f      	mov	r7, r1
   335ea:	d007      	beq.n	335fc <__pow5mult+0x20>
   335ec:	3a01      	subs	r2, #1
   335ee:	4c21      	ldr	r4, [pc, #132]	; (33674 <__pow5mult+0x98>)
   335f0:	2300      	movs	r3, #0
   335f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   335f6:	f004 f9d4 	bl	379a2 <__multadd>
   335fa:	4607      	mov	r7, r0
   335fc:	10ad      	asrs	r5, r5, #2
   335fe:	d035      	beq.n	3366c <__pow5mult+0x90>
   33600:	6a74      	ldr	r4, [r6, #36]	; 0x24
   33602:	b93c      	cbnz	r4, 33614 <__pow5mult+0x38>
   33604:	2010      	movs	r0, #16
   33606:	f7ff ffe1 	bl	335cc <malloc>
   3360a:	6270      	str	r0, [r6, #36]	; 0x24
   3360c:	6004      	str	r4, [r0, #0]
   3360e:	60c4      	str	r4, [r0, #12]
   33610:	e9c0 4401 	strd	r4, r4, [r0, #4]
   33614:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   33618:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3361c:	b94c      	cbnz	r4, 33632 <__pow5mult+0x56>
   3361e:	f240 2171 	movw	r1, #625	; 0x271
   33622:	4630      	mov	r0, r6
   33624:	f004 fa4c 	bl	37ac0 <__i2b>
   33628:	2300      	movs	r3, #0
   3362a:	4604      	mov	r4, r0
   3362c:	f8c8 0008 	str.w	r0, [r8, #8]
   33630:	6003      	str	r3, [r0, #0]
   33632:	f04f 0900 	mov.w	r9, #0
   33636:	07eb      	lsls	r3, r5, #31
   33638:	d50a      	bpl.n	33650 <__pow5mult+0x74>
   3363a:	4639      	mov	r1, r7
   3363c:	4622      	mov	r2, r4
   3363e:	4630      	mov	r0, r6
   33640:	f004 fa47 	bl	37ad2 <__multiply>
   33644:	4680      	mov	r8, r0
   33646:	4639      	mov	r1, r7
   33648:	4630      	mov	r0, r6
   3364a:	4647      	mov	r7, r8
   3364c:	f004 f992 	bl	37974 <_Bfree>
   33650:	106d      	asrs	r5, r5, #1
   33652:	d00b      	beq.n	3366c <__pow5mult+0x90>
   33654:	6820      	ldr	r0, [r4, #0]
   33656:	b938      	cbnz	r0, 33668 <__pow5mult+0x8c>
   33658:	4622      	mov	r2, r4
   3365a:	4621      	mov	r1, r4
   3365c:	4630      	mov	r0, r6
   3365e:	f004 fa38 	bl	37ad2 <__multiply>
   33662:	6020      	str	r0, [r4, #0]
   33664:	f8c0 9000 	str.w	r9, [r0]
   33668:	4604      	mov	r4, r0
   3366a:	e7e4      	b.n	33636 <__pow5mult+0x5a>
   3366c:	4638      	mov	r0, r7
   3366e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   33672:	bf00      	nop
   33674:	00038eb4 	.word	0x00038eb4

00033678 <_free_r>:
   33678:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3367a:	2900      	cmp	r1, #0
   3367c:	d047      	beq.n	3370e <_free_r+0x96>
   3367e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   33682:	1f0c      	subs	r4, r1, #4
   33684:	9001      	str	r0, [sp, #4]
   33686:	2b00      	cmp	r3, #0
   33688:	bfb8      	it	lt
   3368a:	18e4      	addlt	r4, r4, r3
   3368c:	f000 f9ae 	bl	339ec <__malloc_lock>
   33690:	4a20      	ldr	r2, [pc, #128]	; (33714 <_free_r+0x9c>)
   33692:	9801      	ldr	r0, [sp, #4]
   33694:	6813      	ldr	r3, [r2, #0]
   33696:	4615      	mov	r5, r2
   33698:	b933      	cbnz	r3, 336a8 <_free_r+0x30>
   3369a:	6063      	str	r3, [r4, #4]
   3369c:	6014      	str	r4, [r2, #0]
   3369e:	b003      	add	sp, #12
   336a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   336a4:	f000 b9a8 	b.w	339f8 <__malloc_unlock>
   336a8:	42a3      	cmp	r3, r4
   336aa:	d90b      	bls.n	336c4 <_free_r+0x4c>
   336ac:	6821      	ldr	r1, [r4, #0]
   336ae:	1862      	adds	r2, r4, r1
   336b0:	4293      	cmp	r3, r2
   336b2:	bf02      	ittt	eq
   336b4:	681a      	ldreq	r2, [r3, #0]
   336b6:	685b      	ldreq	r3, [r3, #4]
   336b8:	1852      	addeq	r2, r2, r1
   336ba:	6063      	str	r3, [r4, #4]
   336bc:	bf08      	it	eq
   336be:	6022      	streq	r2, [r4, #0]
   336c0:	602c      	str	r4, [r5, #0]
   336c2:	e7ec      	b.n	3369e <_free_r+0x26>
   336c4:	461a      	mov	r2, r3
   336c6:	685b      	ldr	r3, [r3, #4]
   336c8:	b10b      	cbz	r3, 336ce <_free_r+0x56>
   336ca:	42a3      	cmp	r3, r4
   336cc:	d9fa      	bls.n	336c4 <_free_r+0x4c>
   336ce:	6811      	ldr	r1, [r2, #0]
   336d0:	1855      	adds	r5, r2, r1
   336d2:	42a5      	cmp	r5, r4
   336d4:	d10b      	bne.n	336ee <_free_r+0x76>
   336d6:	6824      	ldr	r4, [r4, #0]
   336d8:	4421      	add	r1, r4
   336da:	1854      	adds	r4, r2, r1
   336dc:	6011      	str	r1, [r2, #0]
   336de:	42a3      	cmp	r3, r4
   336e0:	d1dd      	bne.n	3369e <_free_r+0x26>
   336e2:	681c      	ldr	r4, [r3, #0]
   336e4:	685b      	ldr	r3, [r3, #4]
   336e6:	4421      	add	r1, r4
   336e8:	6053      	str	r3, [r2, #4]
   336ea:	6011      	str	r1, [r2, #0]
   336ec:	e7d7      	b.n	3369e <_free_r+0x26>
   336ee:	d902      	bls.n	336f6 <_free_r+0x7e>
   336f0:	230c      	movs	r3, #12
   336f2:	6003      	str	r3, [r0, #0]
   336f4:	e7d3      	b.n	3369e <_free_r+0x26>
   336f6:	6825      	ldr	r5, [r4, #0]
   336f8:	1961      	adds	r1, r4, r5
   336fa:	428b      	cmp	r3, r1
   336fc:	bf02      	ittt	eq
   336fe:	6819      	ldreq	r1, [r3, #0]
   33700:	685b      	ldreq	r3, [r3, #4]
   33702:	1949      	addeq	r1, r1, r5
   33704:	6063      	str	r3, [r4, #4]
   33706:	bf08      	it	eq
   33708:	6021      	streq	r1, [r4, #0]
   3370a:	6054      	str	r4, [r2, #4]
   3370c:	e7c7      	b.n	3369e <_free_r+0x26>
   3370e:	b003      	add	sp, #12
   33710:	bd30      	pop	{r4, r5, pc}
   33712:	bf00      	nop
   33714:	2002891c 	.word	0x2002891c

00033718 <_malloc_r>:
   33718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3371a:	1ccd      	adds	r5, r1, #3
   3371c:	4606      	mov	r6, r0
   3371e:	f025 0503 	bic.w	r5, r5, #3
   33722:	3508      	adds	r5, #8
   33724:	2d0c      	cmp	r5, #12
   33726:	bf38      	it	cc
   33728:	250c      	movcc	r5, #12
   3372a:	2d00      	cmp	r5, #0
   3372c:	db01      	blt.n	33732 <_malloc_r+0x1a>
   3372e:	42a9      	cmp	r1, r5
   33730:	d903      	bls.n	3373a <_malloc_r+0x22>
   33732:	230c      	movs	r3, #12
   33734:	6033      	str	r3, [r6, #0]
   33736:	2000      	movs	r0, #0
   33738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3373a:	f000 f957 	bl	339ec <__malloc_lock>
   3373e:	4921      	ldr	r1, [pc, #132]	; (337c4 <_malloc_r+0xac>)
   33740:	680a      	ldr	r2, [r1, #0]
   33742:	4614      	mov	r4, r2
   33744:	b99c      	cbnz	r4, 3376e <_malloc_r+0x56>
   33746:	4f20      	ldr	r7, [pc, #128]	; (337c8 <_malloc_r+0xb0>)
   33748:	683b      	ldr	r3, [r7, #0]
   3374a:	b923      	cbnz	r3, 33756 <_malloc_r+0x3e>
   3374c:	4621      	mov	r1, r4
   3374e:	4630      	mov	r0, r6
   33750:	f000 f93c 	bl	339cc <_sbrk_r>
   33754:	6038      	str	r0, [r7, #0]
   33756:	4629      	mov	r1, r5
   33758:	4630      	mov	r0, r6
   3375a:	f000 f937 	bl	339cc <_sbrk_r>
   3375e:	1c43      	adds	r3, r0, #1
   33760:	d123      	bne.n	337aa <_malloc_r+0x92>
   33762:	230c      	movs	r3, #12
   33764:	4630      	mov	r0, r6
   33766:	6033      	str	r3, [r6, #0]
   33768:	f000 f946 	bl	339f8 <__malloc_unlock>
   3376c:	e7e3      	b.n	33736 <_malloc_r+0x1e>
   3376e:	6823      	ldr	r3, [r4, #0]
   33770:	1b5b      	subs	r3, r3, r5
   33772:	d417      	bmi.n	337a4 <_malloc_r+0x8c>
   33774:	2b0b      	cmp	r3, #11
   33776:	d903      	bls.n	33780 <_malloc_r+0x68>
   33778:	6023      	str	r3, [r4, #0]
   3377a:	441c      	add	r4, r3
   3377c:	6025      	str	r5, [r4, #0]
   3377e:	e004      	b.n	3378a <_malloc_r+0x72>
   33780:	6863      	ldr	r3, [r4, #4]
   33782:	42a2      	cmp	r2, r4
   33784:	bf0c      	ite	eq
   33786:	600b      	streq	r3, [r1, #0]
   33788:	6053      	strne	r3, [r2, #4]
   3378a:	4630      	mov	r0, r6
   3378c:	f000 f934 	bl	339f8 <__malloc_unlock>
   33790:	f104 000b 	add.w	r0, r4, #11
   33794:	1d23      	adds	r3, r4, #4
   33796:	f020 0007 	bic.w	r0, r0, #7
   3379a:	1ac2      	subs	r2, r0, r3
   3379c:	d0cc      	beq.n	33738 <_malloc_r+0x20>
   3379e:	1a1b      	subs	r3, r3, r0
   337a0:	50a3      	str	r3, [r4, r2]
   337a2:	e7c9      	b.n	33738 <_malloc_r+0x20>
   337a4:	4622      	mov	r2, r4
   337a6:	6864      	ldr	r4, [r4, #4]
   337a8:	e7cc      	b.n	33744 <_malloc_r+0x2c>
   337aa:	1cc4      	adds	r4, r0, #3
   337ac:	f024 0403 	bic.w	r4, r4, #3
   337b0:	42a0      	cmp	r0, r4
   337b2:	d0e3      	beq.n	3377c <_malloc_r+0x64>
   337b4:	1a21      	subs	r1, r4, r0
   337b6:	4630      	mov	r0, r6
   337b8:	f000 f908 	bl	339cc <_sbrk_r>
   337bc:	3001      	adds	r0, #1
   337be:	d1dd      	bne.n	3377c <_malloc_r+0x64>
   337c0:	e7cf      	b.n	33762 <_malloc_r+0x4a>
   337c2:	bf00      	nop
   337c4:	2002891c 	.word	0x2002891c
   337c8:	20028920 	.word	0x20028920

000337cc <_svfiprintf_r>:
   337cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   337d0:	4698      	mov	r8, r3
   337d2:	898b      	ldrh	r3, [r1, #12]
   337d4:	b09d      	sub	sp, #116	; 0x74
   337d6:	4607      	mov	r7, r0
   337d8:	061b      	lsls	r3, r3, #24
   337da:	460d      	mov	r5, r1
   337dc:	4614      	mov	r4, r2
   337de:	d50e      	bpl.n	337fe <_svfiprintf_r+0x32>
   337e0:	690b      	ldr	r3, [r1, #16]
   337e2:	b963      	cbnz	r3, 337fe <_svfiprintf_r+0x32>
   337e4:	2140      	movs	r1, #64	; 0x40
   337e6:	f7ff ff97 	bl	33718 <_malloc_r>
   337ea:	6028      	str	r0, [r5, #0]
   337ec:	6128      	str	r0, [r5, #16]
   337ee:	b920      	cbnz	r0, 337fa <_svfiprintf_r+0x2e>
   337f0:	230c      	movs	r3, #12
   337f2:	603b      	str	r3, [r7, #0]
   337f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   337f8:	e0d1      	b.n	3399e <_svfiprintf_r+0x1d2>
   337fa:	2340      	movs	r3, #64	; 0x40
   337fc:	616b      	str	r3, [r5, #20]
   337fe:	2300      	movs	r3, #0
   33800:	f8cd 800c 	str.w	r8, [sp, #12]
   33804:	f04f 0901 	mov.w	r9, #1
   33808:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 339b8 <_svfiprintf_r+0x1ec>
   3380c:	9309      	str	r3, [sp, #36]	; 0x24
   3380e:	2320      	movs	r3, #32
   33810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   33814:	2330      	movs	r3, #48	; 0x30
   33816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3381a:	4623      	mov	r3, r4
   3381c:	469a      	mov	sl, r3
   3381e:	f813 2b01 	ldrb.w	r2, [r3], #1
   33822:	b10a      	cbz	r2, 33828 <_svfiprintf_r+0x5c>
   33824:	2a25      	cmp	r2, #37	; 0x25
   33826:	d1f9      	bne.n	3381c <_svfiprintf_r+0x50>
   33828:	ebba 0b04 	subs.w	fp, sl, r4
   3382c:	d00b      	beq.n	33846 <_svfiprintf_r+0x7a>
   3382e:	465b      	mov	r3, fp
   33830:	4622      	mov	r2, r4
   33832:	4629      	mov	r1, r5
   33834:	4638      	mov	r0, r7
   33836:	f004 fb3e 	bl	37eb6 <__ssputs_r>
   3383a:	3001      	adds	r0, #1
   3383c:	f000 80aa 	beq.w	33994 <_svfiprintf_r+0x1c8>
   33840:	9a09      	ldr	r2, [sp, #36]	; 0x24
   33842:	445a      	add	r2, fp
   33844:	9209      	str	r2, [sp, #36]	; 0x24
   33846:	f89a 3000 	ldrb.w	r3, [sl]
   3384a:	2b00      	cmp	r3, #0
   3384c:	f000 80a2 	beq.w	33994 <_svfiprintf_r+0x1c8>
   33850:	2300      	movs	r3, #0
   33852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33856:	f10a 0a01 	add.w	sl, sl, #1
   3385a:	9304      	str	r3, [sp, #16]
   3385c:	9307      	str	r3, [sp, #28]
   3385e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   33862:	931a      	str	r3, [sp, #104]	; 0x68
   33864:	e9cd 2305 	strd	r2, r3, [sp, #20]
   33868:	4654      	mov	r4, sl
   3386a:	2205      	movs	r2, #5
   3386c:	4852      	ldr	r0, [pc, #328]	; (339b8 <_svfiprintf_r+0x1ec>)
   3386e:	f814 1b01 	ldrb.w	r1, [r4], #1
   33872:	f003 fdaa 	bl	373ca <memchr>
   33876:	9a04      	ldr	r2, [sp, #16]
   33878:	b9d8      	cbnz	r0, 338b2 <_svfiprintf_r+0xe6>
   3387a:	06d0      	lsls	r0, r2, #27
   3387c:	bf44      	itt	mi
   3387e:	2320      	movmi	r3, #32
   33880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   33884:	0711      	lsls	r1, r2, #28
   33886:	bf44      	itt	mi
   33888:	232b      	movmi	r3, #43	; 0x2b
   3388a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3388e:	f89a 3000 	ldrb.w	r3, [sl]
   33892:	2b2a      	cmp	r3, #42	; 0x2a
   33894:	d015      	beq.n	338c2 <_svfiprintf_r+0xf6>
   33896:	9a07      	ldr	r2, [sp, #28]
   33898:	4654      	mov	r4, sl
   3389a:	2000      	movs	r0, #0
   3389c:	f04f 0c0a 	mov.w	ip, #10
   338a0:	4621      	mov	r1, r4
   338a2:	f811 3b01 	ldrb.w	r3, [r1], #1
   338a6:	3b30      	subs	r3, #48	; 0x30
   338a8:	2b09      	cmp	r3, #9
   338aa:	d94e      	bls.n	3394a <_svfiprintf_r+0x17e>
   338ac:	b1b0      	cbz	r0, 338dc <_svfiprintf_r+0x110>
   338ae:	9207      	str	r2, [sp, #28]
   338b0:	e014      	b.n	338dc <_svfiprintf_r+0x110>
   338b2:	eba0 0308 	sub.w	r3, r0, r8
   338b6:	46a2      	mov	sl, r4
   338b8:	fa09 f303 	lsl.w	r3, r9, r3
   338bc:	4313      	orrs	r3, r2
   338be:	9304      	str	r3, [sp, #16]
   338c0:	e7d2      	b.n	33868 <_svfiprintf_r+0x9c>
   338c2:	9b03      	ldr	r3, [sp, #12]
   338c4:	1d19      	adds	r1, r3, #4
   338c6:	681b      	ldr	r3, [r3, #0]
   338c8:	2b00      	cmp	r3, #0
   338ca:	9103      	str	r1, [sp, #12]
   338cc:	bfbb      	ittet	lt
   338ce:	425b      	neglt	r3, r3
   338d0:	f042 0202 	orrlt.w	r2, r2, #2
   338d4:	9307      	strge	r3, [sp, #28]
   338d6:	9307      	strlt	r3, [sp, #28]
   338d8:	bfb8      	it	lt
   338da:	9204      	strlt	r2, [sp, #16]
   338dc:	7823      	ldrb	r3, [r4, #0]
   338de:	2b2e      	cmp	r3, #46	; 0x2e
   338e0:	d10c      	bne.n	338fc <_svfiprintf_r+0x130>
   338e2:	7863      	ldrb	r3, [r4, #1]
   338e4:	2b2a      	cmp	r3, #42	; 0x2a
   338e6:	d135      	bne.n	33954 <_svfiprintf_r+0x188>
   338e8:	9b03      	ldr	r3, [sp, #12]
   338ea:	3402      	adds	r4, #2
   338ec:	1d1a      	adds	r2, r3, #4
   338ee:	681b      	ldr	r3, [r3, #0]
   338f0:	2b00      	cmp	r3, #0
   338f2:	9203      	str	r2, [sp, #12]
   338f4:	bfb8      	it	lt
   338f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   338fa:	9305      	str	r3, [sp, #20]
   338fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 339c8 <_svfiprintf_r+0x1fc>
   33900:	2203      	movs	r2, #3
   33902:	7821      	ldrb	r1, [r4, #0]
   33904:	4650      	mov	r0, sl
   33906:	f003 fd60 	bl	373ca <memchr>
   3390a:	b140      	cbz	r0, 3391e <_svfiprintf_r+0x152>
   3390c:	2340      	movs	r3, #64	; 0x40
   3390e:	eba0 000a 	sub.w	r0, r0, sl
   33912:	3401      	adds	r4, #1
   33914:	fa03 f000 	lsl.w	r0, r3, r0
   33918:	9b04      	ldr	r3, [sp, #16]
   3391a:	4303      	orrs	r3, r0
   3391c:	9304      	str	r3, [sp, #16]
   3391e:	f814 1b01 	ldrb.w	r1, [r4], #1
   33922:	2206      	movs	r2, #6
   33924:	4825      	ldr	r0, [pc, #148]	; (339bc <_svfiprintf_r+0x1f0>)
   33926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3392a:	f003 fd4e 	bl	373ca <memchr>
   3392e:	2800      	cmp	r0, #0
   33930:	d038      	beq.n	339a4 <_svfiprintf_r+0x1d8>
   33932:	4b23      	ldr	r3, [pc, #140]	; (339c0 <_svfiprintf_r+0x1f4>)
   33934:	bb1b      	cbnz	r3, 3397e <_svfiprintf_r+0x1b2>
   33936:	9b03      	ldr	r3, [sp, #12]
   33938:	3307      	adds	r3, #7
   3393a:	f023 0307 	bic.w	r3, r3, #7
   3393e:	3308      	adds	r3, #8
   33940:	9303      	str	r3, [sp, #12]
   33942:	9b09      	ldr	r3, [sp, #36]	; 0x24
   33944:	4433      	add	r3, r6
   33946:	9309      	str	r3, [sp, #36]	; 0x24
   33948:	e767      	b.n	3381a <_svfiprintf_r+0x4e>
   3394a:	fb0c 3202 	mla	r2, ip, r2, r3
   3394e:	460c      	mov	r4, r1
   33950:	2001      	movs	r0, #1
   33952:	e7a5      	b.n	338a0 <_svfiprintf_r+0xd4>
   33954:	2300      	movs	r3, #0
   33956:	3401      	adds	r4, #1
   33958:	f04f 0c0a 	mov.w	ip, #10
   3395c:	4619      	mov	r1, r3
   3395e:	9305      	str	r3, [sp, #20]
   33960:	4620      	mov	r0, r4
   33962:	f810 2b01 	ldrb.w	r2, [r0], #1
   33966:	3a30      	subs	r2, #48	; 0x30
   33968:	2a09      	cmp	r2, #9
   3396a:	d903      	bls.n	33974 <_svfiprintf_r+0x1a8>
   3396c:	2b00      	cmp	r3, #0
   3396e:	d0c5      	beq.n	338fc <_svfiprintf_r+0x130>
   33970:	9105      	str	r1, [sp, #20]
   33972:	e7c3      	b.n	338fc <_svfiprintf_r+0x130>
   33974:	fb0c 2101 	mla	r1, ip, r1, r2
   33978:	4604      	mov	r4, r0
   3397a:	2301      	movs	r3, #1
   3397c:	e7f0      	b.n	33960 <_svfiprintf_r+0x194>
   3397e:	ab03      	add	r3, sp, #12
   33980:	462a      	mov	r2, r5
   33982:	a904      	add	r1, sp, #16
   33984:	4638      	mov	r0, r7
   33986:	9300      	str	r3, [sp, #0]
   33988:	4b0e      	ldr	r3, [pc, #56]	; (339c4 <_svfiprintf_r+0x1f8>)
   3398a:	f7ff f915 	bl	32bb8 <_printf_float>
   3398e:	1c42      	adds	r2, r0, #1
   33990:	4606      	mov	r6, r0
   33992:	d1d6      	bne.n	33942 <_svfiprintf_r+0x176>
   33994:	89ab      	ldrh	r3, [r5, #12]
   33996:	065b      	lsls	r3, r3, #25
   33998:	f53f af2c 	bmi.w	337f4 <_svfiprintf_r+0x28>
   3399c:	9809      	ldr	r0, [sp, #36]	; 0x24
   3399e:	b01d      	add	sp, #116	; 0x74
   339a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   339a4:	ab03      	add	r3, sp, #12
   339a6:	462a      	mov	r2, r5
   339a8:	a904      	add	r1, sp, #16
   339aa:	4638      	mov	r0, r7
   339ac:	9300      	str	r3, [sp, #0]
   339ae:	4b05      	ldr	r3, [pc, #20]	; (339c4 <_svfiprintf_r+0x1f8>)
   339b0:	f7ff fb38 	bl	33024 <_printf_i>
   339b4:	e7eb      	b.n	3398e <_svfiprintf_r+0x1c2>
   339b6:	bf00      	nop
   339b8:	0003cbbf 	.word	0x0003cbbf
   339bc:	0003cbc9 	.word	0x0003cbc9
   339c0:	00032bb9 	.word	0x00032bb9
   339c4:	00037eb7 	.word	0x00037eb7
   339c8:	0003cbc5 	.word	0x0003cbc5

000339cc <_sbrk_r>:
   339cc:	b538      	push	{r3, r4, r5, lr}
   339ce:	2300      	movs	r3, #0
   339d0:	4d05      	ldr	r5, [pc, #20]	; (339e8 <_sbrk_r+0x1c>)
   339d2:	4604      	mov	r4, r0
   339d4:	4608      	mov	r0, r1
   339d6:	602b      	str	r3, [r5, #0]
   339d8:	f7ee ff24 	bl	22824 <_sbrk>
   339dc:	1c43      	adds	r3, r0, #1
   339de:	d102      	bne.n	339e6 <_sbrk_r+0x1a>
   339e0:	682b      	ldr	r3, [r5, #0]
   339e2:	b103      	cbz	r3, 339e6 <_sbrk_r+0x1a>
   339e4:	6023      	str	r3, [r4, #0]
   339e6:	bd38      	pop	{r3, r4, r5, pc}
   339e8:	2002cd08 	.word	0x2002cd08

000339ec <__malloc_lock>:
   339ec:	4801      	ldr	r0, [pc, #4]	; (339f4 <__malloc_lock+0x8>)
   339ee:	f004 bb1c 	b.w	3802a <__retarget_lock_acquire_recursive>
   339f2:	bf00      	nop
   339f4:	2002cd10 	.word	0x2002cd10

000339f8 <__malloc_unlock>:
   339f8:	4801      	ldr	r0, [pc, #4]	; (33a00 <__malloc_unlock+0x8>)
   339fa:	f004 bb17 	b.w	3802c <__retarget_lock_release_recursive>
   339fe:	bf00      	nop
   33a00:	2002cd10 	.word	0x2002cd10

00033a04 <z_impl_gpio_pin_interrupt_configure.constprop.0>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   33a04:	040a      	lsls	r2, r1, #16
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
   33a06:	b410      	push	{r4}
	const struct gpio_driver_api *api =
   33a08:	6883      	ldr	r3, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   33a0a:	d505      	bpl.n	33a18 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x14>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   33a0c:	68c2      	ldr	r2, [r0, #12]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   33a0e:	6812      	ldr	r2, [r2, #0]
   33a10:	2a00      	cmp	r2, #0
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   33a12:	bfb8      	it	lt
   33a14:	f481 21c0 	eorlt.w	r1, r1, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   33a18:	699c      	ldr	r4, [r3, #24]
   33a1a:	f401 32b0 	and.w	r2, r1, #90112	; 0x16000
   33a1e:	46a4      	mov	ip, r4
   33a20:	f401 23c0 	and.w	r3, r1, #393216	; 0x60000
}
   33a24:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->pin_interrupt_configure(port, pin, mode, trig);
   33a28:	211f      	movs	r1, #31
   33a2a:	4760      	bx	ip

00033a2c <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   33a2c:	b510      	push	{r4, lr}
   33a2e:	460a      	mov	r2, r1
	struct gpio_driver_data *data =
   33a30:	68c4      	ldr	r4, [r0, #12]
	return api->pin_configure(port, pin, flags);
   33a32:	6883      	ldr	r3, [r0, #8]
   33a34:	211f      	movs	r1, #31
   33a36:	681b      	ldr	r3, [r3, #0]
   33a38:	4798      	blx	r3
	if (ret != 0) {
   33a3a:	b918      	cbnz	r0, 33a44 <gpio_pin_configure.constprop.0+0x18>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   33a3c:	6823      	ldr	r3, [r4, #0]
   33a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   33a42:	6023      	str	r3, [r4, #0]
}
   33a44:	bd10      	pop	{r4, pc}

00033a46 <enter_sleep>:
{
   33a46:	b508      	push	{r3, lr}
	lte_lc_power_off();
   33a48:	f7f3 f972 	bl	26d30 <lte_lc_power_off>
}
   33a4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   33a50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   33a54:	2100      	movs	r1, #0
   33a56:	f7fe bc4f 	b.w	322f8 <z_impl_k_sleep>

00033a5a <main>:
	}
}
#else
void main(void)
{
	start_execute();
   33a5a:	f7e6 b9f1 	b.w	19e40 <start_execute>

00033a5e <slm_util_hex_check>:
	for (int i = 0; i < data_len; i++) {
   33a5e:	2300      	movs	r3, #0
{
   33a60:	b510      	push	{r4, lr}
	for (int i = 0; i < data_len; i++) {
   33a62:	4299      	cmp	r1, r3
   33a64:	dc01      	bgt.n	33a6a <slm_util_hex_check+0xc>
	return false;
   33a66:	2000      	movs	r0, #0
}
   33a68:	bd10      	pop	{r4, pc}
		char ch = *(data + i);
   33a6a:	5cc2      	ldrb	r2, [r0, r3]
		if (!PRINTABLE_ASCII(ch) && ch != '\r' && ch != '\n') {
   33a6c:	f1a2 0420 	sub.w	r4, r2, #32
   33a70:	2c5e      	cmp	r4, #94	; 0x5e
   33a72:	d903      	bls.n	33a7c <slm_util_hex_check+0x1e>
   33a74:	2a0d      	cmp	r2, #13
   33a76:	d001      	beq.n	33a7c <slm_util_hex_check+0x1e>
   33a78:	2a0a      	cmp	r2, #10
   33a7a:	d101      	bne.n	33a80 <slm_util_hex_check+0x22>
	for (int i = 0; i < data_len; i++) {
   33a7c:	3301      	adds	r3, #1
   33a7e:	e7f0      	b.n	33a62 <slm_util_hex_check+0x4>
			return true;
   33a80:	2001      	movs	r0, #1
   33a82:	e7f1      	b.n	33a68 <slm_util_hex_check+0xa>

00033a84 <slm_util_atoh>:
/**
 * @brief Decode hexdecimal string (ASCII text) to hex array
 */
int slm_util_atoh(const char *ascii, uint16_t ascii_len,
		uint8_t *hex, uint16_t hex_len)
{
   33a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33a86:	4607      	mov	r7, r0
   33a88:	460c      	mov	r4, r1
	char hex_str[3];

	if (hex == NULL || ascii == NULL) {
   33a8a:	b1e2      	cbz	r2, 33ac6 <slm_util_atoh+0x42>
   33a8c:	b1d8      	cbz	r0, 33ac6 <slm_util_atoh+0x42>
		return -EINVAL;
	}
	if ((ascii_len % 2) > 0) {
   33a8e:	f011 0501 	ands.w	r5, r1, #1
   33a92:	d118      	bne.n	33ac6 <slm_util_atoh+0x42>
		return -EINVAL;
	}
	if (ascii_len > (hex_len * 2)) {
   33a94:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
   33a98:	dc15      	bgt.n	33ac6 <slm_util_atoh+0x42>
		return -EINVAL;
	}

	hex_str[2] = '\0';
   33a9a:	f88d 5006 	strb.w	r5, [sp, #6]
	for (int i = 0; (i * 2) < ascii_len; i++) {
   33a9e:	1e56      	subs	r6, r2, #1
   33aa0:	42ac      	cmp	r4, r5
   33aa2:	dc02      	bgt.n	33aaa <slm_util_atoh+0x26>
		strncpy(&hex_str[0], ascii + (i * 2), 2);
		*(hex + i) = (uint8_t)strtoul(hex_str, NULL, 16);
	}

	return (ascii_len / 2);
   33aa4:	0860      	lsrs	r0, r4, #1
}
   33aa6:	b003      	add	sp, #12
   33aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strncpy(&hex_str[0], ascii + (i * 2), 2);
   33aaa:	1979      	adds	r1, r7, r5
   33aac:	2202      	movs	r2, #2
   33aae:	a801      	add	r0, sp, #4
   33ab0:	f003 fe20 	bl	376f4 <strncpy>
		*(hex + i) = (uint8_t)strtoul(hex_str, NULL, 16);
   33ab4:	2210      	movs	r2, #16
   33ab6:	2100      	movs	r1, #0
   33ab8:	a801      	add	r0, sp, #4
   33aba:	f7ff fd4b 	bl	33554 <strtoul>
   33abe:	3502      	adds	r5, #2
   33ac0:	f806 0f01 	strb.w	r0, [r6, #1]!
	for (int i = 0; (i * 2) < ascii_len; i++) {
   33ac4:	e7ec      	b.n	33aa0 <slm_util_atoh+0x1c>
		return -EINVAL;
   33ac6:	f06f 0015 	mvn.w	r0, #21
   33aca:	e7ec      	b.n	33aa6 <slm_util_atoh+0x22>

00033acc <check_for_ipv4>:
 */
bool check_for_ipv4(const char *address, uint8_t length)
{
	int index;

	for (index = 0; index < length; index++) {
   33acc:	2300      	movs	r3, #0
   33ace:	4299      	cmp	r1, r3
   33ad0:	dc01      	bgt.n	33ad6 <check_for_ipv4+0xa>
		} else {
			return false;
		}
	}

	return true;
   33ad2:	2001      	movs	r0, #1
   33ad4:	4770      	bx	lr
		char ch = *(address + index);
   33ad6:	5cc2      	ldrb	r2, [r0, r3]
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
   33ad8:	2a2e      	cmp	r2, #46	; 0x2e
   33ada:	d002      	beq.n	33ae2 <check_for_ipv4+0x16>
   33adc:	3a30      	subs	r2, #48	; 0x30
   33ade:	2a09      	cmp	r2, #9
   33ae0:	d801      	bhi.n	33ae6 <check_for_ipv4+0x1a>
	for (index = 0; index < length; index++) {
   33ae2:	3301      	adds	r3, #1
   33ae4:	e7f3      	b.n	33ace <check_for_ipv4+0x2>
			return false;
   33ae6:	2000      	movs	r0, #0
}
   33ae8:	4770      	bx	lr

00033aea <uart_rx_disable>:
	return api->rx_disable(dev);
   33aea:	6883      	ldr	r3, [r0, #8]
   33aec:	695b      	ldr	r3, [r3, #20]
   33aee:	4718      	bx	r3

00033af0 <device_set_power_state.constprop.0>:
 * @param arg Caller passed argument to callback function
 *
 * @retval 0 If successful in queuing the request or changing the state.
 * @retval Errno Negative errno code if failure. Callback will not be called.
 */
static inline int device_set_power_state(const struct device *dev,
   33af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
					 uint32_t device_power_state,
					 device_pm_cb cb, void *arg)
{
	if (dev->device_pm_control) {
   33af2:	6904      	ldr	r4, [r0, #16]
static inline int device_set_power_state(const struct device *dev,
   33af4:	9103      	str	r1, [sp, #12]
	if (dev->device_pm_control) {
   33af6:	b134      	cbz	r4, 33b06 <device_set_power_state.constprop.0+0x16>
		return dev->device_pm_control(dev,
   33af8:	2300      	movs	r3, #0
   33afa:	2101      	movs	r1, #1
   33afc:	9300      	str	r3, [sp, #0]
   33afe:	aa03      	add	r2, sp, #12
   33b00:	47a0      	blx	r4
	} else {
		return device_pm_control_nop(dev,
						 DEVICE_PM_SET_POWER_STATE,
						 &device_power_state, cb, arg);
	}
}
   33b02:	b004      	add	sp, #16
   33b04:	bd10      	pop	{r4, pc}
		return device_pm_control_nop(dev,
   33b06:	4623      	mov	r3, r4
   33b08:	2101      	movs	r1, #1
   33b0a:	9400      	str	r4, [sp, #0]
   33b0c:	aa03      	add	r2, sp, #12
   33b0e:	f002 ff65 	bl	369dc <device_pm_control_nop>
   33b12:	e7f6      	b.n	33b02 <device_set_power_state.constprop.0+0x12>

00033b14 <response_handler>:
	int len = strlen(response);
   33b14:	4608      	mov	r0, r1
{
   33b16:	b510      	push	{r4, lr}
   33b18:	460c      	mov	r4, r1
	int len = strlen(response);
   33b1a:	f7e5 faa9 	bl	19070 <strlen>
	if (len > 0) {
   33b1e:	1e01      	subs	r1, r0, #0
   33b20:	dd04      	ble.n	33b2c <response_handler+0x18>
		rsp_send(response, len);
   33b22:	4620      	mov	r0, r4
}
   33b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rsp_send(response, len);
   33b28:	f7e6 bb5e 	b.w	1a1e8 <rsp_send>
}
   33b2c:	bd10      	pop	{r4, pc}

00033b2e <slm_at_tcpip_uninit>:

/**@brief API to uninitialize TCP/IP AT commands handler
 */
int slm_at_tcpip_uninit(void)
{
	return do_socket_close(0);
   33b2e:	2000      	movs	r0, #0
   33b30:	f7e7 ba2c 	b.w	1af8c <do_socket_close>

00033b34 <close>:
   33b34:	f001 b8eb 	b.w	34d0e <z_impl_zsock_close>

00033b38 <close>:
   33b38:	f001 b8e9 	b.w	34d0e <z_impl_zsock_close>

00033b3c <check_ics>:
	for (int i = len / 4; i > 0; i--) {
   33b3c:	460a      	mov	r2, r1
   33b3e:	2900      	cmp	r1, #0
   33b40:	bfb8      	it	lt
   33b42:	1cca      	addlt	r2, r1, #3
   33b44:	1092      	asrs	r2, r2, #2
{
   33b46:	b570      	push	{r4, r5, r6, lr}
	uint32_t hcs = 0;
   33b48:	2300      	movs	r3, #0
	for (int i = len / 4; i > 0; i--) {
   33b4a:	4614      	mov	r4, r2
	const uint32_t *ptr32 = (const uint32_t *)buffer;
   33b4c:	4606      	mov	r6, r0
	for (int i = len / 4; i > 0; i--) {
   33b4e:	2c00      	cmp	r4, #0
   33b50:	dc14      	bgt.n	33b7c <check_ics+0x40>
   33b52:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (len & 2) {
   33b56:	078d      	lsls	r5, r1, #30
   33b58:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   33b5c:	d505      	bpl.n	33b6a <check_ics+0x2e>
		hcs += s;
   33b5e:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
		uint16_t s = *ptr16++;
   33b62:	3402      	adds	r4, #2
		hcs += s;
   33b64:	18c3      	adds	r3, r0, r3
			hcs++;
   33b66:	bf28      	it	cs
   33b68:	3301      	addcs	r3, #1
	if (len & 1) {
   33b6a:	07ca      	lsls	r2, r1, #31
   33b6c:	d510      	bpl.n	33b90 <check_ics+0x54>
		hcs += s;
   33b6e:	7820      	ldrb	r0, [r4, #0]
   33b70:	18c3      	adds	r3, r0, r3
		if (hcs < s) {
   33b72:	d30d      	bcc.n	33b90 <check_ics+0x54>
			hcs++;
   33b74:	3301      	adds	r3, #1
	return ~hcs;    /* One's complement */
   33b76:	43d8      	mvns	r0, r3
}
   33b78:	b280      	uxth	r0, r0
   33b7a:	bd70      	pop	{r4, r5, r6, pc}
		hcs += s;
   33b7c:	f856 5b04 	ldr.w	r5, [r6], #4
	for (int i = len / 4; i > 0; i--) {
   33b80:	3c01      	subs	r4, #1
   33b82:	195b      	adds	r3, r3, r5
			hcs++;
   33b84:	bf28      	it	cs
   33b86:	3301      	addcs	r3, #1
	for (int i = len / 4; i > 0; i--) {
   33b88:	e7e1      	b.n	33b4e <check_ics+0x12>
		hcs = (hcs & 0xFFFF) + (hcs >> 16);
   33b8a:	0c1a      	lsrs	r2, r3, #16
   33b8c:	fa12 f383 	uxtah	r3, r2, r3
	while (hcs > 0xFFFF) {
   33b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   33b94:	d2f9      	bcs.n	33b8a <check_ics+0x4e>
   33b96:	e7ee      	b.n	33b76 <check_ics+0x3a>

00033b98 <slm_at_icmp_uninit>:
/**@brief API to uninitialize ICMP AT commands handler
 */
int slm_at_icmp_uninit(void)
{
	return 0;
}
   33b98:	2000      	movs	r0, #0
   33b9a:	4770      	bx	lr

00033b9c <slm_at_fota_uninit>:
/**@brief API to uninitialize FOTA AT commands handler
 */
int slm_at_fota_uninit(void)
{
	return 0;
}
   33b9c:	2000      	movs	r0, #0
   33b9e:	4770      	bx	lr

00033ba0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   33ba0:	b140      	cbz	r0, 33bb4 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   33ba2:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   33ba4:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   33ba8:	2b02      	cmp	r3, #2
   33baa:	d006      	beq.n	33bba <sys_notify_validate+0x1a>
   33bac:	2b03      	cmp	r3, #3
   33bae:	d004      	beq.n	33bba <sys_notify_validate+0x1a>
   33bb0:	2b01      	cmp	r3, #1
   33bb2:	d005      	beq.n	33bc0 <sys_notify_validate+0x20>
		return -EINVAL;
   33bb4:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   33bb8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   33bba:	6803      	ldr	r3, [r0, #0]
   33bbc:	2b00      	cmp	r3, #0
   33bbe:	d0f9      	beq.n	33bb4 <sys_notify_validate+0x14>
		notify->result = 0;
   33bc0:	2300      	movs	r3, #0
   33bc2:	6083      	str	r3, [r0, #8]
   33bc4:	4618      	mov	r0, r3
   33bc6:	4770      	bx	lr

00033bc8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   33bc8:	6843      	ldr	r3, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   33bca:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   33bcc:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   33bd0:	2b02      	cmp	r3, #2
	notify->result = res;
   33bd2:	6081      	str	r1, [r0, #8]
	switch (method) {
   33bd4:	d00b      	beq.n	33bee <sys_notify_finalize+0x26>
   33bd6:	2b03      	cmp	r3, #3
   33bd8:	d10c      	bne.n	33bf4 <sys_notify_finalize+0x2c>
	struct k_poll_signal *sig = NULL;
   33bda:	2300      	movs	r3, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   33bdc:	6804      	ldr	r4, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   33bde:	2200      	movs	r2, #0
   33be0:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   33be2:	b113      	cbz	r3, 33bea <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   33be4:	4618      	mov	r0, r3
   33be6:	f7fe ff9f 	bl	32b28 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   33bea:	4620      	mov	r0, r4
   33bec:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   33bee:	2400      	movs	r4, #0
		sig = notify->method.signal;
   33bf0:	6803      	ldr	r3, [r0, #0]
		break;
   33bf2:	e7f4      	b.n	33bde <sys_notify_finalize+0x16>
	switch (method) {
   33bf4:	2400      	movs	r4, #0
   33bf6:	4623      	mov	r3, r4
   33bf8:	e7f1      	b.n	33bde <sys_notify_finalize+0x16>

00033bfa <arch_printk_char_out>:
}
   33bfa:	2000      	movs	r0, #0
   33bfc:	4770      	bx	lr

00033bfe <str_out>:
{
   33bfe:	b530      	push	{r4, r5, lr}
   33c00:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   33c02:	680c      	ldr	r4, [r1, #0]
   33c04:	1c55      	adds	r5, r2, #1
   33c06:	b114      	cbz	r4, 33c0e <str_out+0x10>
   33c08:	684b      	ldr	r3, [r1, #4]
   33c0a:	4293      	cmp	r3, r2
   33c0c:	dc01      	bgt.n	33c12 <str_out+0x14>
		ctx->count++;
   33c0e:	608d      	str	r5, [r1, #8]
}
   33c10:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   33c12:	3b01      	subs	r3, #1
   33c14:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   33c16:	bf08      	it	eq
   33c18:	2200      	moveq	r2, #0
   33c1a:	608d      	str	r5, [r1, #8]
   33c1c:	bf0c      	ite	eq
   33c1e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   33c20:	54a0      	strbne	r0, [r4, r2]
   33c22:	e7f5      	b.n	33c10 <str_out+0x12>

00033c24 <printk>:
{
   33c24:	b40f      	push	{r0, r1, r2, r3}
   33c26:	b507      	push	{r0, r1, r2, lr}
   33c28:	a904      	add	r1, sp, #16
   33c2a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   33c2e:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   33c30:	f000 fcd3 	bl	345da <log_printk>
}
   33c34:	b003      	add	sp, #12
   33c36:	f85d eb04 	ldr.w	lr, [sp], #4
   33c3a:	b004      	add	sp, #16
   33c3c:	4770      	bx	lr

00033c3e <snprintk>:
{
   33c3e:	b40c      	push	{r2, r3}
   33c40:	b507      	push	{r0, r1, r2, lr}
   33c42:	ab04      	add	r3, sp, #16
   33c44:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   33c48:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   33c4a:	f7eb fb5d 	bl	1f308 <vsnprintk>
}
   33c4e:	b003      	add	sp, #12
   33c50:	f85d eb04 	ldr.w	lr, [sp], #4
   33c54:	b002      	add	sp, #8
   33c56:	4770      	bx	lr

00033c58 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   33c58:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   33c5a:	f013 0307 	ands.w	r3, r3, #7
   33c5e:	d105      	bne.n	33c6c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   33c60:	6803      	ldr	r3, [r0, #0]
   33c62:	2b00      	cmp	r3, #0
		evt = EVT_START;
   33c64:	bf0c      	ite	eq
   33c66:	2000      	moveq	r0, #0
   33c68:	2003      	movne	r0, #3
   33c6a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   33c6c:	2b02      	cmp	r3, #2
   33c6e:	d105      	bne.n	33c7c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   33c70:	8b43      	ldrh	r3, [r0, #26]
   33c72:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   33c74:	bf14      	ite	ne
   33c76:	2000      	movne	r0, #0
   33c78:	2004      	moveq	r0, #4
   33c7a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   33c7c:	2b01      	cmp	r3, #1
   33c7e:	d105      	bne.n	33c8c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   33c80:	6803      	ldr	r3, [r0, #0]
   33c82:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   33c84:	bf0c      	ite	eq
   33c86:	2000      	moveq	r0, #0
   33c88:	2005      	movne	r0, #5
   33c8a:	4770      	bx	lr
	int evt = EVT_NOP;
   33c8c:	2000      	movs	r0, #0
}
   33c8e:	4770      	bx	lr

00033c90 <notify_one>:
{
   33c90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33c92:	460d      	mov	r5, r1
   33c94:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   33c96:	4619      	mov	r1, r3
   33c98:	1d28      	adds	r0, r5, #4
{
   33c9a:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   33c9c:	9300      	str	r3, [sp, #0]
   33c9e:	f7ff ff93 	bl	33bc8 <sys_notify_finalize>
	if (cb) {
   33ca2:	4604      	mov	r4, r0
   33ca4:	b140      	cbz	r0, 33cb8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   33ca6:	e9dd 3200 	ldrd	r3, r2, [sp]
   33caa:	4629      	mov	r1, r5
   33cac:	4630      	mov	r0, r6
   33cae:	46a4      	mov	ip, r4
}
   33cb0:	b002      	add	sp, #8
   33cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   33cb6:	4760      	bx	ip
}
   33cb8:	b002      	add	sp, #8
   33cba:	bd70      	pop	{r4, r5, r6, pc}

00033cbc <transition_complete>:
{
   33cbc:	b410      	push	{r4}
	__asm__ volatile(
   33cbe:	f04f 0420 	mov.w	r4, #32
   33cc2:	f3ef 8211 	mrs	r2, BASEPRI
   33cc6:	f384 8811 	msr	BASEPRI, r4
   33cca:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   33cce:	6141      	str	r1, [r0, #20]
}
   33cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   33cd4:	2101      	movs	r1, #1
   33cd6:	f7eb bb2b 	b.w	1f330 <process_event>

00033cda <validate_args>:
{
   33cda:	b510      	push	{r4, lr}
   33cdc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   33cde:	b140      	cbz	r0, 33cf2 <validate_args+0x18>
   33ce0:	b139      	cbz	r1, 33cf2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   33ce2:	1d08      	adds	r0, r1, #4
   33ce4:	f7ff ff5c 	bl	33ba0 <sys_notify_validate>
	if ((rv == 0)
   33ce8:	b928      	cbnz	r0, 33cf6 <validate_args+0x1c>
	    && ((cli->notify.flags
   33cea:	68a3      	ldr	r3, [r4, #8]
   33cec:	f033 0303 	bics.w	r3, r3, #3
   33cf0:	d001      	beq.n	33cf6 <validate_args+0x1c>
		rv = -EINVAL;
   33cf2:	f06f 0015 	mvn.w	r0, #21
}
   33cf6:	bd10      	pop	{r4, pc}

00033cf8 <onoff_manager_init>:
{
   33cf8:	b538      	push	{r3, r4, r5, lr}
   33cfa:	460c      	mov	r4, r1
	if ((mgr == NULL)
   33cfc:	4605      	mov	r5, r0
   33cfe:	b158      	cbz	r0, 33d18 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   33d00:	b151      	cbz	r1, 33d18 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   33d02:	680b      	ldr	r3, [r1, #0]
   33d04:	b143      	cbz	r3, 33d18 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   33d06:	684b      	ldr	r3, [r1, #4]
   33d08:	b133      	cbz	r3, 33d18 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   33d0a:	221c      	movs	r2, #28
   33d0c:	2100      	movs	r1, #0
   33d0e:	f003 fb98 	bl	37442 <memset>
	return 0;
   33d12:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   33d14:	612c      	str	r4, [r5, #16]
}
   33d16:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   33d18:	f06f 0015 	mvn.w	r0, #21
   33d1c:	e7fb      	b.n	33d16 <onoff_manager_init+0x1e>

00033d1e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   33d1e:	b570      	push	{r4, r5, r6, lr}
   33d20:	4604      	mov	r4, r0
   33d22:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   33d24:	f7ff ffd9 	bl	33cda <validate_args>

	if (rv < 0) {
   33d28:	1e05      	subs	r5, r0, #0
   33d2a:	db31      	blt.n	33d90 <onoff_request+0x72>
   33d2c:	f04f 0320 	mov.w	r3, #32
   33d30:	f3ef 8111 	mrs	r1, BASEPRI
   33d34:	f383 8811 	msr	BASEPRI, r3
   33d38:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   33d3c:	f64f 75ff 	movw	r5, #65535	; 0xffff
   33d40:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   33d42:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   33d44:	42ab      	cmp	r3, r5
   33d46:	f000 0207 	and.w	r2, r0, #7
   33d4a:	d02e      	beq.n	33daa <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   33d4c:	2a02      	cmp	r2, #2
   33d4e:	d10e      	bne.n	33d6e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   33d50:	3301      	adds	r3, #1
   33d52:	8363      	strh	r3, [r4, #26]
	rv = state;
   33d54:	4615      	mov	r5, r2
		notify = true;
   33d56:	2301      	movs	r3, #1
	__asm__ volatile(
   33d58:	f381 8811 	msr	BASEPRI, r1
   33d5c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   33d60:	b1b3      	cbz	r3, 33d90 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   33d62:	2300      	movs	r3, #0
   33d64:	4631      	mov	r1, r6
   33d66:	4620      	mov	r0, r4
   33d68:	f7ff ff92 	bl	33c90 <notify_one>
   33d6c:	e010      	b.n	33d90 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   33d6e:	0783      	lsls	r3, r0, #30
   33d70:	d001      	beq.n	33d76 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   33d72:	2a06      	cmp	r2, #6
   33d74:	d10e      	bne.n	33d94 <onoff_request+0x76>
	parent->next = child;
   33d76:	2300      	movs	r3, #0
   33d78:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   33d7a:	6863      	ldr	r3, [r4, #4]
   33d7c:	b993      	cbnz	r3, 33da4 <onoff_request+0x86>
	list->head = node;
   33d7e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   33d82:	4615      	mov	r5, r2
   33d84:	b962      	cbnz	r2, 33da0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   33d86:	460a      	mov	r2, r1
   33d88:	4620      	mov	r0, r4
   33d8a:	2102      	movs	r1, #2
   33d8c:	f7eb fad0 	bl	1f330 <process_event>
		}
	}

	return rv;
}
   33d90:	4628      	mov	r0, r5
   33d92:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   33d94:	2a05      	cmp	r2, #5
   33d96:	bf0c      	ite	eq
   33d98:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   33d9c:	f06f 0504 	mvnne.w	r5, #4
   33da0:	2300      	movs	r3, #0
   33da2:	e7d9      	b.n	33d58 <onoff_request+0x3a>
	parent->next = child;
   33da4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   33da6:	6066      	str	r6, [r4, #4]
}
   33da8:	e7eb      	b.n	33d82 <onoff_request+0x64>
		rv = -EAGAIN;
   33daa:	f06f 050a 	mvn.w	r5, #10
   33dae:	e7f7      	b.n	33da0 <onoff_request+0x82>

00033db0 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   33db0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   33db2:	f7fe fac7 	bl	32344 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   33db6:	2000      	movs	r0, #0
   33db8:	bd08      	pop	{r3, pc}

00033dba <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   33dba:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   33dbc:	f7fe fae8 	bl	32390 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   33dc0:	f110 0f0b 	cmn.w	r0, #11
   33dc4:	d005      	beq.n	33dd2 <sys_sem_take+0x18>
   33dc6:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   33dca:	bf08      	it	eq
   33dcc:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   33dd0:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   33dd2:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   33dd6:	e7fb      	b.n	33dd0 <sys_sem_take+0x16>

00033dd8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   33dd8:	4604      	mov	r4, r0
   33dda:	b508      	push	{r3, lr}
   33ddc:	4608      	mov	r0, r1
   33dde:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   33de0:	461a      	mov	r2, r3
   33de2:	47a0      	blx	r4
	return z_impl_k_current_get();
   33de4:	f7fe faa8 	bl	32338 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   33de8:	f7ee fb34 	bl	22454 <z_impl_k_thread_abort>

00033dec <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   33dec:	b510      	push	{r4, lr}
   33dee:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   33df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33df8:	4620      	mov	r0, r4
   33dfa:	f7fd fec1 	bl	31b80 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   33dfe:	4603      	mov	r3, r0
   33e00:	2800      	cmp	r0, #0
   33e02:	d0f5      	beq.n	33df0 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   33e04:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   33e06:	3308      	adds	r3, #8
   33e08:	e8d3 1fef 	ldaex	r1, [r3]
   33e0c:	f021 0c01 	bic.w	ip, r1, #1
   33e10:	e8c3 cfee 	stlex	lr, ip, [r3]
   33e14:	f1be 0f00 	cmp.w	lr, #0
   33e18:	d1f6      	bne.n	33e08 <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   33e1a:	07cb      	lsls	r3, r1, #31
   33e1c:	d500      	bpl.n	33e20 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   33e1e:	4790      	blx	r2
	z_impl_k_yield();
   33e20:	f7fe fa1c 	bl	3225c <z_impl_k_yield>
   33e24:	e7e4      	b.n	33df0 <z_work_q_main+0x4>

00033e26 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   33e26:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   33e28:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   33e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   33e30:	bf2c      	ite	cs
   33e32:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   33e36:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   33e3a:	4770      	bx	lr

00033e3c <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   33e3c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   33e40:	6880      	ldr	r0, [r0, #8]
   33e42:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   33e46:	bf2c      	ite	cs
   33e48:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   33e4c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   33e50:	4770      	bx	lr

00033e52 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   33e52:	2201      	movs	r2, #1
{
   33e54:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   33e56:	f7ff ffe6 	bl	33e26 <chunk_field>
}
   33e5a:	0840      	lsrs	r0, r0, #1
   33e5c:	bd08      	pop	{r3, pc}

00033e5e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   33e5e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   33e60:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   33e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   33e68:	d308      	bcc.n	33e7c <set_chunk_used+0x1e>
		if (used) {
   33e6a:	684b      	ldr	r3, [r1, #4]
   33e6c:	b11a      	cbz	r2, 33e76 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   33e6e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   33e72:	604b      	str	r3, [r1, #4]
   33e74:	4770      	bx	lr
   33e76:	f023 0301 	bic.w	r3, r3, #1
   33e7a:	e7fa      	b.n	33e72 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   33e7c:	884b      	ldrh	r3, [r1, #2]
   33e7e:	b11a      	cbz	r2, 33e88 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   33e80:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   33e84:	804b      	strh	r3, [r1, #2]
		}
	}
}
   33e86:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   33e88:	f023 0301 	bic.w	r3, r3, #1
   33e8c:	e7fa      	b.n	33e84 <set_chunk_used+0x26>

00033e8e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   33e8e:	0053      	lsls	r3, r2, #1
   33e90:	2201      	movs	r2, #1
   33e92:	f7ff bfd3 	b.w	33e3c <chunk_set>

00033e96 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   33e96:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   33e98:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   33e9a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   33e9e:	bf2c      	ite	cs
   33ea0:	2002      	movcs	r0, #2
   33ea2:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   33ea4:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   33ea6:	fab0 f080 	clz	r0, r0
}
   33eaa:	f1c0 001f 	rsb	r0, r0, #31
   33eae:	4770      	bx	lr

00033eb0 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   33eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33eb2:	4616      	mov	r6, r2
   33eb4:	4604      	mov	r4, r0
   33eb6:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   33eb8:	f7ff ffcb 	bl	33e52 <chunk_size>
   33ebc:	4631      	mov	r1, r6
   33ebe:	4605      	mov	r5, r0
   33ec0:	4620      	mov	r0, r4
   33ec2:	f7ff ffc6 	bl	33e52 <chunk_size>
   33ec6:	182b      	adds	r3, r5, r0

	set_chunk_size(h, lc, newsz);
   33ec8:	461a      	mov	r2, r3
   33eca:	4639      	mov	r1, r7
   33ecc:	4620      	mov	r0, r4
   33ece:	9301      	str	r3, [sp, #4]
   33ed0:	f7ff ffdd 	bl	33e8e <set_chunk_size>
	return c + chunk_size(h, c);
   33ed4:	4631      	mov	r1, r6
   33ed6:	4620      	mov	r0, r4
   33ed8:	f7ff ffbb 	bl	33e52 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   33edc:	2200      	movs	r2, #0
   33ede:	1831      	adds	r1, r6, r0
   33ee0:	4620      	mov	r0, r4
   33ee2:	9b01      	ldr	r3, [sp, #4]
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   33ee4:	b003      	add	sp, #12
   33ee6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   33eea:	f7ff bfa7 	b.w	33e3c <chunk_set>

00033eee <split_chunks>:
{
   33eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33ef0:	4614      	mov	r4, r2
   33ef2:	460e      	mov	r6, r1
   33ef4:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   33ef6:	f7ff ffac 	bl	33e52 <chunk_size>
	size_t lsz = rc - lc;
   33efa:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   33efc:	1b32      	subs	r2, r6, r4
   33efe:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   33f00:	4631      	mov	r1, r6
   33f02:	461a      	mov	r2, r3
   33f04:	4628      	mov	r0, r5
   33f06:	9301      	str	r3, [sp, #4]
   33f08:	f7ff ffc1 	bl	33e8e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   33f0c:	463a      	mov	r2, r7
   33f0e:	4621      	mov	r1, r4
   33f10:	4628      	mov	r0, r5
   33f12:	f7ff ffbc 	bl	33e8e <set_chunk_size>
   33f16:	9b01      	ldr	r3, [sp, #4]
   33f18:	2200      	movs	r2, #0
   33f1a:	4621      	mov	r1, r4
   33f1c:	4628      	mov	r0, r5
   33f1e:	f7ff ff8d 	bl	33e3c <chunk_set>
	return c + chunk_size(h, c);
   33f22:	4621      	mov	r1, r4
   33f24:	4628      	mov	r0, r5
   33f26:	f7ff ff94 	bl	33e52 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   33f2a:	463b      	mov	r3, r7
   33f2c:	1821      	adds	r1, r4, r0
   33f2e:	2200      	movs	r2, #0
   33f30:	4628      	mov	r0, r5
}
   33f32:	b003      	add	sp, #12
   33f34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   33f38:	f7ff bf80 	b.w	33e3c <chunk_set>

00033f3c <free_list_remove_bidx>:
{
   33f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33f40:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   33f42:	2203      	movs	r2, #3
   33f44:	460e      	mov	r6, r1
   33f46:	4604      	mov	r4, r0
   33f48:	f7ff ff6d 	bl	33e26 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   33f4c:	4286      	cmp	r6, r0
   33f4e:	4605      	mov	r5, r0
   33f50:	f107 0804 	add.w	r8, r7, #4
   33f54:	d10b      	bne.n	33f6e <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   33f56:	2301      	movs	r3, #1
   33f58:	fa03 f707 	lsl.w	r7, r3, r7
   33f5c:	68e3      	ldr	r3, [r4, #12]
   33f5e:	ea23 0307 	bic.w	r3, r3, r7
   33f62:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   33f64:	2300      	movs	r3, #0
   33f66:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   33f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   33f6e:	4631      	mov	r1, r6
   33f70:	2202      	movs	r2, #2
   33f72:	4620      	mov	r0, r4
   33f74:	f7ff ff57 	bl	33e26 <chunk_field>
   33f78:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   33f7a:	462b      	mov	r3, r5
   33f7c:	4601      	mov	r1, r0
   33f7e:	2203      	movs	r2, #3
   33f80:	4620      	mov	r0, r4
		b->next = second;
   33f82:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   33f86:	f7ff ff59 	bl	33e3c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   33f8a:	4633      	mov	r3, r6
   33f8c:	4629      	mov	r1, r5
   33f8e:	4620      	mov	r0, r4
}
   33f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   33f94:	2202      	movs	r2, #2
   33f96:	f7ff bf51 	b.w	33e3c <chunk_set>

00033f9a <free_list_remove>:
{
   33f9a:	b538      	push	{r3, r4, r5, lr}
   33f9c:	4604      	mov	r4, r0
   33f9e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   33fa0:	f7ff ff57 	bl	33e52 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   33fa4:	68a3      	ldr	r3, [r4, #8]
   33fa6:	4601      	mov	r1, r0
   33fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   33fac:	d301      	bcc.n	33fb2 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   33fae:	2801      	cmp	r0, #1
   33fb0:	d009      	beq.n	33fc6 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   33fb2:	4620      	mov	r0, r4
   33fb4:	f7ff ff6f 	bl	33e96 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   33fb8:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   33fba:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   33fbc:	4620      	mov	r0, r4
}
   33fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   33fc2:	f7ff bfbb 	b.w	33f3c <free_list_remove_bidx>
}
   33fc6:	bd38      	pop	{r3, r4, r5, pc}

00033fc8 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   33fc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   33fcc:	4604      	mov	r4, r0
   33fce:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   33fd0:	f7ff ff61 	bl	33e96 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   33fd4:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   33fd6:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   33fd8:	4620      	mov	r0, r4
   33fda:	f7ff ff5c 	bl	33e96 <bucket_idx>
   33fde:	42a8      	cmp	r0, r5
   33fe0:	da04      	bge.n	33fec <alloc_chunk+0x24>
		return 0;
   33fe2:	2100      	movs	r1, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   33fe4:	4608      	mov	r0, r1
   33fe6:	b003      	add	sp, #12
   33fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   33fec:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   33ff0:	f8d9 8010 	ldr.w	r8, [r9, #16]
   33ff4:	f1b8 0f00 	cmp.w	r8, #0
   33ff8:	d019      	beq.n	3402e <alloc_chunk+0x66>
   33ffa:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   33ffc:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   34000:	4620      	mov	r0, r4
   34002:	9101      	str	r1, [sp, #4]
   34004:	f7ff ff25 	bl	33e52 <chunk_size>
   34008:	42b8      	cmp	r0, r7
   3400a:	9901      	ldr	r1, [sp, #4]
   3400c:	d305      	bcc.n	3401a <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   3400e:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   34010:	4620      	mov	r0, r4
   34012:	f7ff ff93 	bl	33f3c <free_list_remove_bidx>
   34016:	9901      	ldr	r1, [sp, #4]
		return c;
   34018:	e7e4      	b.n	33fe4 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   3401a:	2203      	movs	r2, #3
   3401c:	4620      	mov	r0, r4
   3401e:	f7ff ff02 	bl	33e26 <chunk_field>
		} while (--i && b->next != first);
   34022:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   34024:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   34028:	d001      	beq.n	3402e <alloc_chunk+0x66>
   3402a:	4580      	cmp	r8, r0
   3402c:	d1e6      	bne.n	33ffc <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   3402e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   34032:	68e3      	ldr	r3, [r4, #12]
   34034:	3501      	adds	r5, #1
   34036:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   34038:	401a      	ands	r2, r3
   3403a:	d0d2      	beq.n	33fe2 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   3403c:	fa92 f2a2 	rbit	r2, r2
   34040:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   34044:	1d13      	adds	r3, r2, #4
   34046:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   3404a:	9101      	str	r1, [sp, #4]
   3404c:	e7e0      	b.n	34010 <alloc_chunk+0x48>

0003404e <free_list_add>:
{
   3404e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34052:	4604      	mov	r4, r0
   34054:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   34056:	f7ff fefc 	bl	33e52 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   3405a:	68a3      	ldr	r3, [r4, #8]
   3405c:	4601      	mov	r1, r0
   3405e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   34062:	d301      	bcc.n	34068 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   34064:	2801      	cmp	r0, #1
   34066:	d035      	beq.n	340d4 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   34068:	4620      	mov	r0, r4
   3406a:	f7ff ff14 	bl	33e96 <bucket_idx>
	if (b->next == 0U) {
   3406e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   34072:	6916      	ldr	r6, [r2, #16]
   34074:	b99e      	cbnz	r6, 3409e <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   34076:	2301      	movs	r3, #1
   34078:	fa03 f000 	lsl.w	r0, r3, r0
   3407c:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   3407e:	4629      	mov	r1, r5
   34080:	4303      	orrs	r3, r0
   34082:	60e3      	str	r3, [r4, #12]
   34084:	4620      	mov	r0, r4
		b->next = c;
   34086:	6115      	str	r5, [r2, #16]
   34088:	462b      	mov	r3, r5
   3408a:	2202      	movs	r2, #2
   3408c:	f7ff fed6 	bl	33e3c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   34090:	2203      	movs	r2, #3
   34092:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   34094:	4620      	mov	r0, r4
}
   34096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3409a:	f7ff becf 	b.w	33e3c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   3409e:	2202      	movs	r2, #2
   340a0:	4631      	mov	r1, r6
   340a2:	4620      	mov	r0, r4
   340a4:	f7ff febf 	bl	33e26 <chunk_field>
   340a8:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   340aa:	4603      	mov	r3, r0
   340ac:	2202      	movs	r2, #2
   340ae:	4629      	mov	r1, r5
   340b0:	4620      	mov	r0, r4
   340b2:	f7ff fec3 	bl	33e3c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   340b6:	4633      	mov	r3, r6
   340b8:	2203      	movs	r2, #3
   340ba:	4629      	mov	r1, r5
   340bc:	4620      	mov	r0, r4
   340be:	f7ff febd 	bl	33e3c <chunk_set>
   340c2:	2203      	movs	r2, #3
   340c4:	4639      	mov	r1, r7
   340c6:	462b      	mov	r3, r5
   340c8:	4620      	mov	r0, r4
   340ca:	f7ff feb7 	bl	33e3c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   340ce:	2202      	movs	r2, #2
   340d0:	4631      	mov	r1, r6
   340d2:	e7df      	b.n	34094 <free_list_add+0x46>
   340d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000340d8 <sys_heap_free>:
{
   340d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (mem == NULL) {
   340da:	2900      	cmp	r1, #0
   340dc:	d050      	beq.n	34180 <sys_heap_free+0xa8>
	struct z_heap *h = heap->heap;
   340de:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
   340e0:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   340e2:	68ab      	ldr	r3, [r5, #8]
   340e4:	4628      	mov	r0, r5
   340e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   340ea:	bf2c      	ite	cs
   340ec:	2408      	movcs	r4, #8
   340ee:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   340f0:	1b0c      	subs	r4, r1, r4
   340f2:	1b64      	subs	r4, r4, r5
   340f4:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   340f6:	4621      	mov	r1, r4
   340f8:	f7ff feb1 	bl	33e5e <set_chunk_used>
	return c + chunk_size(h, c);
   340fc:	4621      	mov	r1, r4
   340fe:	f7ff fea8 	bl	33e52 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   34102:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   34104:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   34106:	4628      	mov	r0, r5
   34108:	9101      	str	r1, [sp, #4]
   3410a:	f7ff fe8c 	bl	33e26 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   3410e:	f010 0f01 	tst.w	r0, #1
   34112:	9901      	ldr	r1, [sp, #4]
   34114:	d10b      	bne.n	3412e <sys_heap_free+0x56>
		free_list_remove(h, right_chunk(h, c));
   34116:	4628      	mov	r0, r5
   34118:	f7ff ff3f 	bl	33f9a <free_list_remove>
	return c + chunk_size(h, c);
   3411c:	4621      	mov	r1, r4
   3411e:	4628      	mov	r0, r5
   34120:	f7ff fe97 	bl	33e52 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   34124:	4621      	mov	r1, r4
   34126:	1822      	adds	r2, r4, r0
   34128:	4628      	mov	r0, r5
   3412a:	f7ff fec1 	bl	33eb0 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   3412e:	2200      	movs	r2, #0
   34130:	4621      	mov	r1, r4
   34132:	4628      	mov	r0, r5
   34134:	f7ff fe77 	bl	33e26 <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   34138:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   3413a:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3413c:	4628      	mov	r0, r5
   3413e:	9101      	str	r1, [sp, #4]
   34140:	f7ff fe71 	bl	33e26 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   34144:	f010 0601 	ands.w	r6, r0, #1
   34148:	9901      	ldr	r1, [sp, #4]
   3414a:	d112      	bne.n	34172 <sys_heap_free+0x9a>
		free_list_remove(h, left_chunk(h, c));
   3414c:	4628      	mov	r0, r5
   3414e:	f7ff ff24 	bl	33f9a <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   34152:	4621      	mov	r1, r4
   34154:	4632      	mov	r2, r6
   34156:	4628      	mov	r0, r5
   34158:	f7ff fe65 	bl	33e26 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   3415c:	4622      	mov	r2, r4
   3415e:	1a21      	subs	r1, r4, r0
   34160:	4628      	mov	r0, r5
   34162:	f7ff fea5 	bl	33eb0 <merge_chunks>
   34166:	4621      	mov	r1, r4
   34168:	4632      	mov	r2, r6
   3416a:	4628      	mov	r0, r5
   3416c:	f7ff fe5b 	bl	33e26 <chunk_field>
   34170:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   34172:	4621      	mov	r1, r4
   34174:	4628      	mov	r0, r5
}
   34176:	b002      	add	sp, #8
   34178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   3417c:	f7ff bf67 	b.w	3404e <free_list_add>
}
   34180:	b002      	add	sp, #8
   34182:	bd70      	pop	{r4, r5, r6, pc}

00034184 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   34184:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   34186:	b909      	cbnz	r1, 3418c <sys_heap_alloc+0x8>
		return NULL;
   34188:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   3418a:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   3418c:	6805      	ldr	r5, [r0, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   3418e:	1dcc      	adds	r4, r1, #7
	return big_heap(h) ? 8 : 4;
   34190:	68ab      	ldr	r3, [r5, #8]
	chunkid_t c = alloc_chunk(h, chunk_sz);
   34192:	4628      	mov	r0, r5
   34194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   34198:	bf2c      	ite	cs
   3419a:	2208      	movcs	r2, #8
   3419c:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   3419e:	4414      	add	r4, r2
   341a0:	08e4      	lsrs	r4, r4, #3
   341a2:	4621      	mov	r1, r4
   341a4:	f7ff ff10 	bl	33fc8 <alloc_chunk>
	if (c == 0U) {
   341a8:	4606      	mov	r6, r0
   341aa:	2800      	cmp	r0, #0
   341ac:	d0ec      	beq.n	34188 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   341ae:	4601      	mov	r1, r0
   341b0:	4628      	mov	r0, r5
   341b2:	f7ff fe4e 	bl	33e52 <chunk_size>
   341b6:	42a0      	cmp	r0, r4
   341b8:	d909      	bls.n	341ce <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   341ba:	4434      	add	r4, r6
   341bc:	4631      	mov	r1, r6
   341be:	4628      	mov	r0, r5
   341c0:	4622      	mov	r2, r4
   341c2:	f7ff fe94 	bl	33eee <split_chunks>
		free_list_add(h, c + chunk_sz);
   341c6:	4621      	mov	r1, r4
   341c8:	4628      	mov	r0, r5
   341ca:	f7ff ff40 	bl	3404e <free_list_add>
	set_chunk_used(h, c, true);
   341ce:	4628      	mov	r0, r5
   341d0:	2201      	movs	r2, #1
   341d2:	4631      	mov	r1, r6
   341d4:	f7ff fe43 	bl	33e5e <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   341d8:	68ab      	ldr	r3, [r5, #8]
   341da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   341de:	bf2c      	ite	cs
   341e0:	2008      	movcs	r0, #8
   341e2:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   341e4:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   341e8:	4428      	add	r0, r5
	return chunk_mem(h, c);
   341ea:	e7ce      	b.n	3418a <sys_heap_alloc+0x6>

000341ec <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   341ec:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   341f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   341f2:	bf2c      	ite	cs
   341f4:	2508      	movcs	r5, #8
   341f6:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   341f8:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   341fa:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   341fc:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   341fe:	1dcc      	adds	r4, r1, #7
   34200:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   34204:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   34206:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   3420a:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   3420c:	440d      	add	r5, r1
   3420e:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   34212:	1b2d      	subs	r5, r5, r4
   34214:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   34216:	4629      	mov	r1, r5
   34218:	4620      	mov	r0, r4
	h->len = buf_sz;
   3421a:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   3421c:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   3421e:	f7ff fe3a 	bl	33e96 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   34222:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   34224:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   34226:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   34228:	361b      	adds	r6, #27
   3422a:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   3422c:	f104 0210 	add.w	r2, r4, #16
   34230:	428b      	cmp	r3, r1
   34232:	db29      	blt.n	34288 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   34234:	4632      	mov	r2, r6
   34236:	4620      	mov	r0, r4
   34238:	2100      	movs	r1, #0
   3423a:	f7ff fe28 	bl	33e8e <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   3423e:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   34240:	4620      	mov	r0, r4
   34242:	2201      	movs	r2, #1
   34244:	2100      	movs	r1, #0
   34246:	f7ff fe0a 	bl	33e5e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   3424a:	463a      	mov	r2, r7
   3424c:	4631      	mov	r1, r6
   3424e:	f7ff fe1e 	bl	33e8e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   34252:	4633      	mov	r3, r6
   34254:	4631      	mov	r1, r6
   34256:	4620      	mov	r0, r4
   34258:	2200      	movs	r2, #0
   3425a:	f7ff fdef 	bl	33e3c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   3425e:	4629      	mov	r1, r5
   34260:	4620      	mov	r0, r4
   34262:	2200      	movs	r2, #0
   34264:	f7ff fe13 	bl	33e8e <set_chunk_size>
   34268:	463b      	mov	r3, r7
   3426a:	4629      	mov	r1, r5
   3426c:	4620      	mov	r0, r4
   3426e:	2200      	movs	r2, #0
   34270:	f7ff fde4 	bl	33e3c <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   34274:	4629      	mov	r1, r5
   34276:	4620      	mov	r0, r4
   34278:	2201      	movs	r2, #1
   3427a:	f7ff fdf0 	bl	33e5e <set_chunk_used>

	free_list_add(h, chunk0_size);
   3427e:	4631      	mov	r1, r6
}
   34280:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   34284:	f7ff bee3 	b.w	3404e <free_list_add>
		h->buckets[i].next = 0;
   34288:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   3428c:	3301      	adds	r3, #1
   3428e:	e7cf      	b.n	34230 <sys_heap_init+0x44>

00034290 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   34290:	2100      	movs	r1, #0
{
   34292:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   34294:	e9d0 6500 	ldrd	r6, r5, [r0]
   34298:	0872      	lsrs	r2, r6, #1
   3429a:	f006 0301 	and.w	r3, r6, #1
   3429e:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   342a2:	189b      	adds	r3, r3, r2
   342a4:	ea4f 0455 	mov.w	r4, r5, lsr #1
   342a8:	eb44 0101 	adc.w	r1, r4, r1
   342ac:	e9c0 3100 	strd	r3, r1, [r0]
}
   342b0:	bd70      	pop	{r4, r5, r6, pc}

000342b2 <_ldiv5>:
	__asm__ ("" : "+r" (m));
   342b2:	f04f 3133 	mov.w	r1, #858993459	; 0x33333333
	result = ((uint64_t)(m * 3U) << 32) | (m * 3U);
   342b6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
{
   342ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t v_lo = *v;
   342be:	e9d0 2400 	ldrd	r2, r4, [r0]
	result = ((uint64_t)(m * 3U) << 32) | (m * 3U);
   342c2:	461d      	mov	r5, r3
	result >>= 32;
   342c4:	2700      	movs	r7, #0
	result += (uint64_t)v_lo * m;
   342c6:	fba2 8901 	umull	r8, r9, r2, r1
   342ca:	eb18 0505 	adds.w	r5, r8, r5
	result += (uint64_t)v_hi * m;
   342ce:	fba4 4501 	umull	r4, r5, r4, r1
	result += (uint64_t)v_lo * m;
   342d2:	eb49 0603 	adc.w	r6, r9, r3
	result += (uint64_t)v_hi * m;
   342d6:	eb18 0204 	adds.w	r2, r8, r4
   342da:	eb49 0105 	adc.w	r1, r9, r5
   342de:	1992      	adds	r2, r2, r6
	result >>= 32;
   342e0:	463a      	mov	r2, r7
	result += (uint64_t)v_hi * m;
   342e2:	eb47 0101 	adc.w	r1, r7, r1
	result += (uint64_t)v_hi * m;
   342e6:	1863      	adds	r3, r4, r1
   342e8:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   342ec:	e9c0 3200 	strd	r3, r2, [r0]
}
   342f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000342f4 <_get_digit>:
	if (*digit_count > 0) {
   342f4:	680b      	ldr	r3, [r1, #0]
{
   342f6:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   342f8:	2b00      	cmp	r3, #0
   342fa:	dd10      	ble.n	3431e <_get_digit+0x2a>
		--*digit_count;
   342fc:	3b01      	subs	r3, #1
   342fe:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   34300:	210a      	movs	r1, #10
   34302:	6802      	ldr	r2, [r0, #0]
   34304:	6844      	ldr	r4, [r0, #4]
   34306:	fba2 5601 	umull	r5, r6, r2, r1
   3430a:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   3430e:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   34312:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   34316:	0f31      	lsrs	r1, r6, #28
   34318:	3130      	adds	r1, #48	; 0x30
}
   3431a:	4608      	mov	r0, r1
   3431c:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   3431e:	2130      	movs	r1, #48	; 0x30
   34320:	e7fb      	b.n	3431a <_get_digit+0x26>

00034322 <outs>:
{
   34322:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   34326:	4680      	mov	r8, r0
   34328:	4689      	mov	r9, r1
   3432a:	4616      	mov	r6, r2
   3432c:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3432e:	4615      	mov	r5, r2
   34330:	42bd      	cmp	r5, r7
   34332:	eba5 0406 	sub.w	r4, r5, r6
   34336:	d305      	bcc.n	34344 <outs+0x22>
   34338:	b10f      	cbz	r7, 3433e <outs+0x1c>
	return (int)count;
   3433a:	4620      	mov	r0, r4
   3433c:	e008      	b.n	34350 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3433e:	782b      	ldrb	r3, [r5, #0]
   34340:	2b00      	cmp	r3, #0
   34342:	d0fa      	beq.n	3433a <outs+0x18>
		int rc = out((int)*sp++, ctx);
   34344:	4649      	mov	r1, r9
   34346:	f815 0b01 	ldrb.w	r0, [r5], #1
   3434a:	47c0      	blx	r8
		if (rc < 0) {
   3434c:	2800      	cmp	r0, #0
   3434e:	daef      	bge.n	34330 <outs+0xe>
}
   34350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00034354 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   34354:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   34358:	4770      	bx	lr

0003435a <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   3435a:	b570      	push	{r4, r5, r6, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   3435c:	6984      	ldr	r4, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   3435e:	6885      	ldr	r5, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   34360:	6906      	ldr	r6, [r0, #16]
   34362:	b18c      	cbz	r4, 34388 <ring_buf_put_claim+0x2e>
   34364:	402c      	ands	r4, r5
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   34366:	6803      	ldr	r3, [r0, #0]
   34368:	4433      	add	r3, r6
   3436a:	1b5b      	subs	r3, r3, r5
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   3436c:	429a      	cmp	r2, r3
   3436e:	bf28      	it	cs
   34370:	461a      	movcs	r2, r3
	trail_size = buf->size - tmp_trail_mod;
   34372:	1b36      	subs	r6, r6, r4

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   34374:	42b2      	cmp	r2, r6
   34376:	bf28      	it	cs
   34378:	4632      	movcs	r2, r6
	*data = &buf->buf.buf8[tmp_trail_mod];
   3437a:	6943      	ldr	r3, [r0, #20]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   3437c:	4415      	add	r5, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
   3437e:	441c      	add	r4, r3
   34380:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   34382:	6085      	str	r5, [r0, #8]

	return allocated;
}
   34384:	4610      	mov	r0, r2
   34386:	bd70      	pop	{r4, r5, r6, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   34388:	fbb5 f4f6 	udiv	r4, r5, r6
   3438c:	fb06 5414 	mls	r4, r6, r4, r5
   34390:	e7e9      	b.n	34366 <ring_buf_put_claim+0xc>

00034392 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->tail + size) > (buf->head + buf->size)) {
   34392:	6843      	ldr	r3, [r0, #4]
   34394:	6902      	ldr	r2, [r0, #16]
   34396:	4419      	add	r1, r3
   34398:	6803      	ldr	r3, [r0, #0]
   3439a:	4413      	add	r3, r2
   3439c:	4299      	cmp	r1, r3
		return -EINVAL;
	}

	buf->tail += size;
	buf->misc.byte_mode.tmp_tail = buf->tail;
   3439e:	bf9a      	itte	ls
   343a0:	e9c0 1101 	strdls	r1, r1, [r0, #4]

	return 0;
   343a4:	2000      	movls	r0, #0
		return -EINVAL;
   343a6:	f06f 0015 	mvnhi.w	r0, #21
}
   343aa:	4770      	bx	lr

000343ac <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   343ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   343b0:	4680      	mov	r8, r0
   343b2:	460e      	mov	r6, r1
   343b4:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   343b6:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   343b8:	462a      	mov	r2, r5
   343ba:	a901      	add	r1, sp, #4
   343bc:	4640      	mov	r0, r8
   343be:	f7ff ffcc 	bl	3435a <ring_buf_put_claim>
   343c2:	4604      	mov	r4, r0
   343c4:	4602      	mov	r2, r0
   343c6:	4631      	mov	r1, r6
   343c8:	9801      	ldr	r0, [sp, #4]
   343ca:	f003 f81a 	bl	37402 <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   343ce:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   343d0:	4427      	add	r7, r4
		data += partial_size;
   343d2:	4426      	add	r6, r4
	} while (size && partial_size);
   343d4:	d001      	beq.n	343da <ring_buf_put+0x2e>
   343d6:	2c00      	cmp	r4, #0
   343d8:	d1ee      	bne.n	343b8 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   343da:	4639      	mov	r1, r7
   343dc:	4640      	mov	r0, r8
   343de:	f7ff ffd8 	bl	34392 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   343e2:	4638      	mov	r0, r7
   343e4:	b002      	add	sp, #8
   343e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000343ea <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   343ea:	b570      	push	{r4, r5, r6, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   343ec:	6984      	ldr	r4, [r0, #24]
	uint32_t space, granted_size, trail_size, tmp_head_mod;

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   343ee:	68c5      	ldr	r5, [r0, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   343f0:	6903      	ldr	r3, [r0, #16]
   343f2:	b184      	cbz	r4, 34416 <ring_buf_get_claim+0x2c>
   343f4:	402c      	ands	r4, r5
	space = buf->tail - buf->misc.byte_mode.tmp_head;
   343f6:	6846      	ldr	r6, [r0, #4]
	trail_size = buf->size - tmp_head_mod;
   343f8:	1b1b      	subs	r3, r3, r4
	space = buf->tail - buf->misc.byte_mode.tmp_head;
   343fa:	1b76      	subs	r6, r6, r5

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   343fc:	42b2      	cmp	r2, r6
   343fe:	bf28      	it	cs
   34400:	4632      	movcs	r2, r6

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   34402:	4293      	cmp	r3, r2
   34404:	bf28      	it	cs
   34406:	4613      	movcs	r3, r2

	*data = &buf->buf.buf8[tmp_head_mod];
   34408:	6942      	ldr	r2, [r0, #20]
	buf->misc.byte_mode.tmp_head += granted_size;
   3440a:	441d      	add	r5, r3
	*data = &buf->buf.buf8[tmp_head_mod];
   3440c:	4414      	add	r4, r2
   3440e:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   34410:	60c5      	str	r5, [r0, #12]

	return granted_size;
}
   34412:	4618      	mov	r0, r3
   34414:	bd70      	pop	{r4, r5, r6, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   34416:	fbb5 f4f3 	udiv	r4, r5, r3
   3441a:	fb03 5414 	mls	r4, r3, r4, r5
   3441e:	e7ea      	b.n	343f6 <ring_buf_get_claim+0xc>

00034420 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->head + size) > buf->tail) {
   34420:	6803      	ldr	r3, [r0, #0]
{
   34422:	b510      	push	{r4, lr}
	if ((buf->head + size) > buf->tail) {
   34424:	4419      	add	r1, r3
   34426:	6843      	ldr	r3, [r0, #4]
{
   34428:	4604      	mov	r4, r0
	if ((buf->head + size) > buf->tail) {
   3442a:	4299      	cmp	r1, r3
   3442c:	d824      	bhi.n	34478 <ring_buf_get_finish+0x58>
		return -EINVAL;
	}

	buf->head += size;
   3442e:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   34430:	60c1      	str	r1, [r0, #12]
	uint32_t threshold = ring_buf_get_rewind_threshold();
   34432:	f7ff ff8f 	bl	34354 <ring_buf_get_rewind_threshold>
	if (buf->head < threshold) {
   34436:	6823      	ldr	r3, [r4, #0]
   34438:	4298      	cmp	r0, r3
   3443a:	d81b      	bhi.n	34474 <ring_buf_get_finish+0x54>
	rewind = buf->size * (threshold / buf->size);
   3443c:	6923      	ldr	r3, [r4, #16]
   3443e:	fbb0 f0f3 	udiv	r0, r0, r3
   34442:	4358      	muls	r0, r3
	__asm__ volatile(
   34444:	f04f 0320 	mov.w	r3, #32
   34448:	f3ef 8211 	mrs	r2, BASEPRI
   3444c:	f383 8811 	msr	BASEPRI, r3
   34450:	f3bf 8f6f 	isb	sy
	buf->tail -= rewind;
   34454:	6863      	ldr	r3, [r4, #4]
   34456:	1a1b      	subs	r3, r3, r0
   34458:	6063      	str	r3, [r4, #4]
	buf->head -= rewind;
   3445a:	6823      	ldr	r3, [r4, #0]
   3445c:	1a1b      	subs	r3, r3, r0
   3445e:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head -= rewind;
   34460:	68e3      	ldr	r3, [r4, #12]
   34462:	1a1b      	subs	r3, r3, r0
   34464:	60e3      	str	r3, [r4, #12]
	buf->misc.byte_mode.tmp_tail -= rewind;
   34466:	68a3      	ldr	r3, [r4, #8]
   34468:	1a18      	subs	r0, r3, r0
   3446a:	60a0      	str	r0, [r4, #8]
	__asm__ volatile(
   3446c:	f382 8811 	msr	BASEPRI, r2
   34470:	f3bf 8f6f 	isb	sy

	byte_indexes_rewind(buf);

	return 0;
   34474:	2000      	movs	r0, #0
   34476:	e001      	b.n	3447c <ring_buf_get_finish+0x5c>
		return -EINVAL;
   34478:	f06f 0015 	mvn.w	r0, #21
}
   3447c:	bd10      	pop	{r4, pc}

0003447e <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   3447e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34482:	4680      	mov	r8, r0
   34484:	460e      	mov	r6, r1
   34486:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   34488:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   3448a:	462a      	mov	r2, r5
   3448c:	a901      	add	r1, sp, #4
   3448e:	4640      	mov	r0, r8
   34490:	f7ff ffab 	bl	343ea <ring_buf_get_claim>
   34494:	4604      	mov	r4, r0
   34496:	4602      	mov	r2, r0
   34498:	9901      	ldr	r1, [sp, #4]
   3449a:	4630      	mov	r0, r6
   3449c:	f002 ffb1 	bl	37402 <memcpy>
		memcpy(data, src, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   344a0:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   344a2:	4427      	add	r7, r4
		data += partial_size;
   344a4:	4426      	add	r6, r4
	} while (size && partial_size);
   344a6:	d001      	beq.n	344ac <ring_buf_get+0x2e>
   344a8:	2c00      	cmp	r4, #0
   344aa:	d1ee      	bne.n	3448a <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   344ac:	4639      	mov	r1, r7
   344ae:	4640      	mov	r0, r8
   344b0:	f7ff ffb6 	bl	34420 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   344b4:	4638      	mov	r0, r7
   344b6:	b002      	add	sp, #8
   344b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000344bc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_TCP_CONN_TIME, 60);
GEN_ABSOLUTE_SYM(CONFIG_SLM_HTTPC, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   344bc:	4770      	bx	lr

000344be <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   344be:	f7fc bdbd 	b.w	3103c <SystemInit>

000344c2 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   344c2:	2300      	movs	r3, #0
	list->head = NULL;
   344c4:	e9c0 3300 	strd	r3, r3, [r0]
}
   344c8:	4770      	bx	lr

000344ca <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   344ca:	6803      	ldr	r3, [r0, #0]
   344cc:	b923      	cbnz	r3, 344d8 <log_list_add_tail+0xe>
		list->head = msg;
   344ce:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   344d0:	2300      	movs	r3, #0
	list->tail = msg;
   344d2:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   344d4:	600b      	str	r3, [r1, #0]
}
   344d6:	4770      	bx	lr
		list->tail->next = msg;
   344d8:	6843      	ldr	r3, [r0, #4]
   344da:	6019      	str	r1, [r3, #0]
   344dc:	e7f8      	b.n	344d0 <log_list_add_tail+0x6>

000344de <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   344de:	6800      	ldr	r0, [r0, #0]
   344e0:	4770      	bx	lr

000344e2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   344e2:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   344e4:	b10b      	cbz	r3, 344ea <log_list_head_get+0x8>
		list->head = list->head->next;
   344e6:	681a      	ldr	r2, [r3, #0]
   344e8:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   344ea:	4618      	mov	r0, r3
   344ec:	4770      	bx	lr

000344ee <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   344ee:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   344f0:	f7ec f968 	bl	207c4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   344f4:	b118      	cbz	r0, 344fe <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   344f6:	2301      	movs	r3, #1
   344f8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   344fa:	2300      	movs	r3, #0
   344fc:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   344fe:	bd08      	pop	{r3, pc}

00034500 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   34500:	f7ed ba14 	b.w	2192c <z_timer_cycle_get_32>

00034504 <dummy_timestamp>:
   34504:	2000      	movs	r0, #0
   34506:	4770      	bx	lr

00034508 <log_0>:
{
   34508:	b513      	push	{r0, r1, r4, lr}
   3450a:	4604      	mov	r4, r0
   3450c:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   3450e:	f7ff ffee 	bl	344ee <z_log_msg_std_alloc>

	if (msg != NULL) {
   34512:	b130      	cbz	r0, 34522 <log_0+0x1a>
		msg_finalize(msg, src_level);
   34514:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   34516:	6104      	str	r4, [r0, #16]
}
   34518:	b002      	add	sp, #8
   3451a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   3451e:	f7ec b873 	b.w	20608 <msg_finalize>
}
   34522:	b002      	add	sp, #8
   34524:	bd10      	pop	{r4, pc}

00034526 <log_1>:
{
   34526:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34528:	460c      	mov	r4, r1
   3452a:	4611      	mov	r1, r2
   3452c:	4605      	mov	r5, r0
   3452e:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   34530:	f7ff ffdd 	bl	344ee <z_log_msg_std_alloc>

	if (msg != NULL) {
   34534:	b160      	cbz	r0, 34550 <log_1+0x2a>
		msg->str = str;
   34536:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   34538:	2501      	movs	r5, #1
   3453a:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   3453c:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   3453e:	f365 1207 	bfi	r2, r5, #4, #4
   34542:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   34544:	9901      	ldr	r1, [sp, #4]
}
   34546:	b003      	add	sp, #12
   34548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   3454c:	f7ec b85c 	b.w	20608 <msg_finalize>
}
   34550:	b003      	add	sp, #12
   34552:	bd30      	pop	{r4, r5, pc}

00034554 <log_2>:
{
   34554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34556:	460e      	mov	r6, r1
   34558:	4619      	mov	r1, r3
   3455a:	4607      	mov	r7, r0
   3455c:	4615      	mov	r5, r2
   3455e:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   34560:	f7ff ffc5 	bl	344ee <z_log_msg_std_alloc>

	if (msg != NULL) {
   34564:	b168      	cbz	r0, 34582 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   34566:	2202      	movs	r2, #2
   34568:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   3456a:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   3456e:	f362 1307 	bfi	r3, r2, #4, #4
   34572:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   34574:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   34576:	6107      	str	r7, [r0, #16]
}
   34578:	b003      	add	sp, #12
   3457a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   3457e:	f7ec b843 	b.w	20608 <msg_finalize>
}
   34582:	b003      	add	sp, #12
   34584:	bdf0      	pop	{r4, r5, r6, r7, pc}

00034586 <log_3>:
{
   34586:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3458a:	460f      	mov	r7, r1
   3458c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   34590:	4680      	mov	r8, r0
   34592:	4616      	mov	r6, r2
   34594:	461d      	mov	r5, r3
   34596:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   34598:	f7ff ffa9 	bl	344ee <z_log_msg_std_alloc>

	if (msg != NULL) {
   3459c:	b178      	cbz	r0, 345be <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   3459e:	2203      	movs	r2, #3
   345a0:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   345a2:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   345a6:	f362 1307 	bfi	r3, r2, #4, #4
   345aa:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   345ac:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   345ae:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   345b2:	61c5      	str	r5, [r0, #28]
}
   345b4:	b002      	add	sp, #8
   345b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   345ba:	f7ec b825 	b.w	20608 <msg_finalize>
}
   345be:	b002      	add	sp, #8
   345c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000345c4 <log_n>:
{
   345c4:	b510      	push	{r4, lr}
   345c6:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   345c8:	f000 f8b1 	bl	3472e <log_msg_create_n>
		if (msg == NULL) {
   345cc:	b120      	cbz	r0, 345d8 <log_n+0x14>
		msg_finalize(msg, src_level);
   345ce:	4621      	mov	r1, r4
}
   345d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   345d4:	f7ec b818 	b.w	20608 <msg_finalize>
}
   345d8:	bd10      	pop	{r4, pc}

000345da <log_printk>:
{
   345da:	b500      	push	{lr}
   345dc:	b0a3      	sub	sp, #140	; 0x8c
   345de:	4602      	mov	r2, r0
   345e0:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   345e2:	a801      	add	r0, sp, #4
   345e4:	2181      	movs	r1, #129	; 0x81
   345e6:	f7ea fe8f 	bl	1f308 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   345ea:	2881      	cmp	r0, #129	; 0x81
   345ec:	4602      	mov	r2, r0
   345ee:	a901      	add	r1, sp, #4
   345f0:	bf28      	it	cs
   345f2:	2281      	movcs	r2, #129	; 0x81
   345f4:	2000      	movs	r0, #0
   345f6:	f000 f8ee 	bl	347d6 <log_msg_hexdump_create>
			if (msg == NULL) {
   345fa:	b118      	cbz	r0, 34604 <log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   345fc:	f04f 0100 	mov.w	r1, #0
   34600:	f7ec f802 	bl	20608 <msg_finalize>
}
   34604:	b023      	add	sp, #140	; 0x8c
   34606:	f85d fb04 	ldr.w	pc, [sp], #4

0003460a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   3460a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3460e:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   34610:	8903      	ldrh	r3, [r0, #8]
{
   34612:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   34614:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   34618:	42a3      	cmp	r3, r4
{
   3461a:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   3461e:	d803      	bhi.n	34628 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   34620:	2300      	movs	r3, #0
   34622:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   34624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   34628:	6811      	ldr	r1, [r2, #0]
   3462a:	4421      	add	r1, r4
   3462c:	4299      	cmp	r1, r3
		*length = available_len - offset;
   3462e:	bf84      	itt	hi
   34630:	1b19      	subhi	r1, r3, r4
   34632:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   34634:	2b0c      	cmp	r3, #12
	req_len = *length;
   34636:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   3463a:	d92b      	bls.n	34694 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   3463c:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   3463e:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   34642:	d82e      	bhi.n	346a2 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   34644:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   34646:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   34648:	454b      	cmp	r3, r9
   3464a:	bf28      	it	cs
   3464c:	464b      	movcs	r3, r9
   3464e:	4420      	add	r0, r4
   34650:	461d      	mov	r5, r3
   34652:	461a      	mov	r2, r3
		if (put_op) {
   34654:	b317      	cbz	r7, 3469c <log_msg_hexdump_data_op+0x92>
   34656:	4631      	mov	r1, r6
   34658:	f002 fed3 	bl	37402 <memcpy>
		req_len -= cpy_len;
   3465c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   34660:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   34662:	f1b9 0f00 	cmp.w	r9, #0
   34666:	d0dd      	beq.n	34624 <log_msg_hexdump_data_op+0x1a>
   34668:	f1b8 0f00 	cmp.w	r8, #0
   3466c:	d0da      	beq.n	34624 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   3466e:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   34672:	454d      	cmp	r5, r9
   34674:	bf28      	it	cs
   34676:	464d      	movcs	r5, r9
		if (put_op) {
   34678:	1d20      	adds	r0, r4, #4
   3467a:	462a      	mov	r2, r5
   3467c:	4440      	add	r0, r8
   3467e:	b1bf      	cbz	r7, 346b0 <log_msg_hexdump_data_op+0xa6>
   34680:	4631      	mov	r1, r6
   34682:	f002 febe 	bl	37402 <memcpy>
		offset = 0;
   34686:	2400      	movs	r4, #0
		cont = cont->next;
   34688:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   3468c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   34690:	442e      	add	r6, r5
   34692:	e7e6      	b.n	34662 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   34694:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   34698:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   3469a:	e7d5      	b.n	34648 <log_msg_hexdump_data_op+0x3e>
   3469c:	4601      	mov	r1, r0
   3469e:	4630      	mov	r0, r6
   346a0:	e7da      	b.n	34658 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   346a2:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   346a4:	2c1b      	cmp	r4, #27
   346a6:	d9dc      	bls.n	34662 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   346a8:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   346ac:	3c1c      	subs	r4, #28
   346ae:	e7f9      	b.n	346a4 <log_msg_hexdump_data_op+0x9a>
   346b0:	4601      	mov	r1, r0
   346b2:	4630      	mov	r0, r6
   346b4:	e7e5      	b.n	34682 <log_msg_hexdump_data_op+0x78>

000346b6 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   346b6:	3004      	adds	r0, #4
   346b8:	e8d0 3fef 	ldaex	r3, [r0]
   346bc:	3301      	adds	r3, #1
   346be:	e8c0 3fe2 	stlex	r2, r3, [r0]
   346c2:	2a00      	cmp	r2, #0
   346c4:	d1f8      	bne.n	346b8 <log_msg_get+0x2>
}
   346c6:	4770      	bx	lr

000346c8 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   346c8:	7a40      	ldrb	r0, [r0, #9]
}
   346ca:	0900      	lsrs	r0, r0, #4
   346cc:	4770      	bx	lr

000346ce <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   346ce:	7a43      	ldrb	r3, [r0, #9]
   346d0:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   346d4:	ea4f 1213 	mov.w	r2, r3, lsr #4
   346d8:	d216      	bcs.n	34708 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   346da:	2a03      	cmp	r2, #3
   346dc:	d803      	bhi.n	346e6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   346de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   346e2:	6948      	ldr	r0, [r1, #20]
   346e4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   346e6:	2901      	cmp	r1, #1
   346e8:	d803      	bhi.n	346f2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   346ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   346ee:	6988      	ldr	r0, [r1, #24]
   346f0:	4770      	bx	lr
	cont = msg->payload.ext.next;
   346f2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   346f4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   346f6:	2906      	cmp	r1, #6
   346f8:	d803      	bhi.n	34702 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   346fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   346fe:	6848      	ldr	r0, [r1, #4]
   34700:	4770      	bx	lr
		cont = cont->next;
   34702:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   34704:	3907      	subs	r1, #7
		cont = cont->next;
   34706:	e7f6      	b.n	346f6 <log_msg_arg_get+0x28>
		return 0;
   34708:	2000      	movs	r0, #0
}
   3470a:	4770      	bx	lr

0003470c <log_msg_put>:
{
   3470c:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   3470e:	1d02      	adds	r2, r0, #4
   34710:	e8d2 1fef 	ldaex	r1, [r2]
   34714:	3901      	subs	r1, #1
   34716:	e8c2 1fec 	stlex	ip, r1, [r2]
   3471a:	f1bc 0f00 	cmp.w	ip, #0
   3471e:	d1f7      	bne.n	34710 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   34720:	685b      	ldr	r3, [r3, #4]
   34722:	b90b      	cbnz	r3, 34728 <log_msg_put+0x1c>
		msg_free(msg);
   34724:	f7ec b862 	b.w	207ec <msg_free>
}
   34728:	4770      	bx	lr

0003472a <log_msg_str_get>:
}
   3472a:	6900      	ldr	r0, [r0, #16]
   3472c:	4770      	bx	lr

0003472e <log_msg_create_n>:
{
   3472e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34732:	4681      	mov	r9, r0
   34734:	4688      	mov	r8, r1
   34736:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   34738:	f7ec f844 	bl	207c4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   3473c:	4604      	mov	r4, r0
   3473e:	b330      	cbz	r0, 3478e <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   34740:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   34742:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   34744:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   34746:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   34748:	8107      	strh	r7, [r0, #8]
   3474a:	d909      	bls.n	34760 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   3474c:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   3474e:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   34752:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   34754:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   34758:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   3475a:	f1ba 0f00 	cmp.w	sl, #0
   3475e:	dc0e      	bgt.n	3477e <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   34760:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   34762:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   34764:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   34768:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   3476c:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   3476e:	d818      	bhi.n	347a2 <log_msg_create_n+0x74>
   34770:	4641      	mov	r1, r8
   34772:	00aa      	lsls	r2, r5, #2
   34774:	f104 0014 	add.w	r0, r4, #20
   34778:	f002 fe43 	bl	37402 <memcpy>
	while (nargs != 0U) {
   3477c:	e007      	b.n	3478e <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   3477e:	f7ec f821 	bl	207c4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   34782:	4606      	mov	r6, r0
   34784:	b930      	cbnz	r0, 34794 <log_msg_create_n+0x66>
			msg_free(msg);
   34786:	4620      	mov	r0, r4
   34788:	f7ec f830 	bl	207ec <msg_free>
			return NULL;
   3478c:	4634      	mov	r4, r6
}
   3478e:	4620      	mov	r0, r4
   34790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   34794:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   34798:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   3479c:	4683      	mov	fp, r0
		cont->next = NULL;
   3479e:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   347a0:	e7db      	b.n	3475a <log_msg_create_n+0x2c>
   347a2:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   347a6:	6967      	ldr	r7, [r4, #20]
   347a8:	61a3      	str	r3, [r4, #24]
   347aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   347ae:	3d02      	subs	r5, #2
   347b0:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   347b2:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   347b6:	2d07      	cmp	r5, #7
   347b8:	462e      	mov	r6, r5
   347ba:	bf28      	it	cs
   347bc:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   347be:	ea4f 0986 	mov.w	r9, r6, lsl #2
   347c2:	4641      	mov	r1, r8
   347c4:	1d38      	adds	r0, r7, #4
   347c6:	464a      	mov	r2, r9
   347c8:	f002 fe1b 	bl	37402 <memcpy>
	while (nargs != 0U) {
   347cc:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   347ce:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   347d0:	44c8      	add	r8, r9
	while (nargs != 0U) {
   347d2:	d1f0      	bne.n	347b6 <log_msg_create_n+0x88>
   347d4:	e7db      	b.n	3478e <log_msg_create_n+0x60>

000347d6 <log_msg_hexdump_create>:
{
   347d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   347da:	f643 75ff 	movw	r5, #16383	; 0x3fff
   347de:	4295      	cmp	r5, r2
{
   347e0:	4680      	mov	r8, r0
   347e2:	460e      	mov	r6, r1
   347e4:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   347e6:	bf28      	it	cs
   347e8:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   347ea:	f7eb ffeb 	bl	207c4 <log_msg_chunk_alloc>
	if (msg == NULL) {
   347ee:	4604      	mov	r4, r0
   347f0:	b378      	cbz	r0, 34852 <log_msg_hexdump_create+0x7c>
	msg->hdr.ref_cnt = 1;
   347f2:	2301      	movs	r3, #1
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   347f4:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.ref_cnt = 1;
   347f6:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   347f8:	00ab      	lsls	r3, r5, #2
   347fa:	f043 0301 	orr.w	r3, r3, #1
   347fe:	f002 0202 	and.w	r2, r2, #2
   34802:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   34804:	2f0c      	cmp	r7, #12
	msg->str = str;
   34806:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   3480a:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   3480c:	f100 0814 	add.w	r8, r0, #20
   34810:	d916      	bls.n	34840 <log_msg_hexdump_create+0x6a>
   34812:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   34814:	7a02      	ldrb	r2, [r0, #8]
   34816:	6183      	str	r3, [r0, #24]
   34818:	6873      	ldr	r3, [r6, #4]
   3481a:	f042 0202 	orr.w	r2, r2, #2
   3481e:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
   34820:	2300      	movs	r3, #0
   34822:	4699      	mov	r9, r3
   34824:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   34826:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   34828:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   3482a:	3d08      	subs	r5, #8
	while (length > 0) {
   3482c:	b18d      	cbz	r5, 34852 <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   3482e:	f7eb ffc9 	bl	207c4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   34832:	4607      	mov	r7, r0
   34834:	b980      	cbnz	r0, 34858 <log_msg_hexdump_create+0x82>
			msg_free(msg);
   34836:	4620      	mov	r0, r4
   34838:	f7eb ffd8 	bl	207ec <msg_free>
			return NULL;
   3483c:	463c      	mov	r4, r7
   3483e:	e008      	b.n	34852 <log_msg_hexdump_create+0x7c>
   34840:	462a      	mov	r2, r5
   34842:	4631      	mov	r1, r6
   34844:	4640      	mov	r0, r8
   34846:	f002 fddc 	bl	37402 <memcpy>
		msg->hdr.params.generic.ext = 0;
   3484a:	7a23      	ldrb	r3, [r4, #8]
   3484c:	f36f 0341 	bfc	r3, #1, #1
   34850:	7223      	strb	r3, [r4, #8]
}
   34852:	4620      	mov	r0, r4
   34854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   34858:	2d1c      	cmp	r5, #28
   3485a:	462f      	mov	r7, r5
   3485c:	bf28      	it	cs
   3485e:	271c      	movcs	r7, #28
		*prev_cont = cont;
   34860:	f8c8 0000 	str.w	r0, [r8]
   34864:	4631      	mov	r1, r6
		cont->next = NULL;
   34866:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   3486a:	4680      	mov	r8, r0
   3486c:	463a      	mov	r2, r7
   3486e:	3004      	adds	r0, #4
   34870:	f002 fdc7 	bl	37402 <memcpy>
		data += chunk_length;
   34874:	443e      	add	r6, r7
		length -= chunk_length;
   34876:	1bed      	subs	r5, r5, r7
   34878:	e7d8      	b.n	3482c <log_msg_hexdump_create+0x56>

0003487a <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   3487a:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   3487c:	2400      	movs	r4, #0
   3487e:	9400      	str	r4, [sp, #0]
   34880:	f7ff fec3 	bl	3460a <log_msg_hexdump_data_op>
}
   34884:	b002      	add	sp, #8
   34886:	bd10      	pop	{r4, pc}

00034888 <buffer_write>:
{
   34888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3488a:	4606      	mov	r6, r0
   3488c:	460d      	mov	r5, r1
   3488e:	4614      	mov	r4, r2
   34890:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   34892:	4621      	mov	r1, r4
   34894:	4628      	mov	r0, r5
   34896:	463a      	mov	r2, r7
   34898:	47b0      	blx	r6
	} while (len != 0);
   3489a:	1a24      	subs	r4, r4, r0
		buf += processed;
   3489c:	4405      	add	r5, r0
	} while (len != 0);
   3489e:	d1f8      	bne.n	34892 <buffer_write+0xa>
}
   348a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000348a2 <std_print>:
{
   348a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   348a6:	b08e      	sub	sp, #56	; 0x38
   348a8:	af0e      	add	r7, sp, #56	; 0x38
   348aa:	4680      	mov	r8, r0
   348ac:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   348ae:	f7ff ff3c 	bl	3472a <log_msg_str_get>
   348b2:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   348b4:	4640      	mov	r0, r8
   348b6:	f7ff ff07 	bl	346c8 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   348ba:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   348be:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   348c0:	0083      	lsls	r3, r0, #2
   348c2:	3307      	adds	r3, #7
   348c4:	f023 0307 	bic.w	r3, r3, #7
   348c8:	ebad 0d03 	sub.w	sp, sp, r3
   348cc:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   348ce:	45d1      	cmp	r9, sl
   348d0:	d116      	bne.n	34900 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   348d2:	4640      	mov	r0, r8
   348d4:	f7ff fef8 	bl	346c8 <log_msg_nargs_get>
   348d8:	280f      	cmp	r0, #15
   348da:	d81e      	bhi.n	3491a <std_print+0x78>
   348dc:	e8df f010 	tbh	[pc, r0, lsl #1]
   348e0:	00200019 	.word	0x00200019
   348e4:	002d0026 	.word	0x002d0026
   348e8:	00410036 	.word	0x00410036
   348ec:	005d004e 	.word	0x005d004e
   348f0:	0081006e 	.word	0x0081006e
   348f4:	00ad0096 	.word	0x00ad0096
   348f8:	00e100c6 	.word	0x00e100c6
   348fc:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   34900:	4649      	mov	r1, r9
   34902:	4640      	mov	r0, r8
   34904:	f7ff fee3 	bl	346ce <log_msg_arg_get>
   34908:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   3490c:	f109 0901 	add.w	r9, r9, #1
   34910:	e7dd      	b.n	348ce <std_print+0x2c>
		print_formatted(log_output, str);
   34912:	4631      	mov	r1, r6
   34914:	4628      	mov	r0, r5
   34916:	f7eb ffa7 	bl	20868 <print_formatted>
}
   3491a:	46bd      	mov	sp, r7
   3491c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   34920:	4631      	mov	r1, r6
   34922:	4628      	mov	r0, r5
   34924:	6822      	ldr	r2, [r4, #0]
   34926:	f7eb ff9f 	bl	20868 <print_formatted>
		break;
   3492a:	e7f6      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   3492c:	4631      	mov	r1, r6
   3492e:	e9d4 2300 	ldrd	r2, r3, [r4]
   34932:	4628      	mov	r0, r5
   34934:	f7eb ff98 	bl	20868 <print_formatted>
		break;
   34938:	e7ef      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   3493a:	68a3      	ldr	r3, [r4, #8]
   3493c:	4631      	mov	r1, r6
   3493e:	9300      	str	r3, [sp, #0]
   34940:	4628      	mov	r0, r5
   34942:	e9d4 2300 	ldrd	r2, r3, [r4]
   34946:	f7eb ff8f 	bl	20868 <print_formatted>
		break;
   3494a:	e7e6      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   3494c:	68e3      	ldr	r3, [r4, #12]
   3494e:	4631      	mov	r1, r6
   34950:	9301      	str	r3, [sp, #4]
   34952:	68a3      	ldr	r3, [r4, #8]
   34954:	4628      	mov	r0, r5
   34956:	9300      	str	r3, [sp, #0]
   34958:	e9d4 2300 	ldrd	r2, r3, [r4]
   3495c:	f7eb ff84 	bl	20868 <print_formatted>
		break;
   34960:	e7db      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   34962:	6923      	ldr	r3, [r4, #16]
   34964:	4631      	mov	r1, r6
   34966:	9302      	str	r3, [sp, #8]
   34968:	68e3      	ldr	r3, [r4, #12]
   3496a:	4628      	mov	r0, r5
   3496c:	9301      	str	r3, [sp, #4]
   3496e:	68a3      	ldr	r3, [r4, #8]
   34970:	9300      	str	r3, [sp, #0]
   34972:	e9d4 2300 	ldrd	r2, r3, [r4]
   34976:	f7eb ff77 	bl	20868 <print_formatted>
		break;
   3497a:	e7ce      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   3497c:	6963      	ldr	r3, [r4, #20]
   3497e:	4631      	mov	r1, r6
   34980:	9303      	str	r3, [sp, #12]
   34982:	6923      	ldr	r3, [r4, #16]
   34984:	4628      	mov	r0, r5
   34986:	9302      	str	r3, [sp, #8]
   34988:	68e3      	ldr	r3, [r4, #12]
   3498a:	9301      	str	r3, [sp, #4]
   3498c:	68a3      	ldr	r3, [r4, #8]
   3498e:	9300      	str	r3, [sp, #0]
   34990:	e9d4 2300 	ldrd	r2, r3, [r4]
   34994:	f7eb ff68 	bl	20868 <print_formatted>
		break;
   34998:	e7bf      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   3499a:	69a3      	ldr	r3, [r4, #24]
   3499c:	4631      	mov	r1, r6
   3499e:	9304      	str	r3, [sp, #16]
   349a0:	6963      	ldr	r3, [r4, #20]
   349a2:	4628      	mov	r0, r5
   349a4:	9303      	str	r3, [sp, #12]
   349a6:	6923      	ldr	r3, [r4, #16]
   349a8:	9302      	str	r3, [sp, #8]
   349aa:	68e3      	ldr	r3, [r4, #12]
   349ac:	9301      	str	r3, [sp, #4]
   349ae:	68a3      	ldr	r3, [r4, #8]
   349b0:	9300      	str	r3, [sp, #0]
   349b2:	e9d4 2300 	ldrd	r2, r3, [r4]
   349b6:	f7eb ff57 	bl	20868 <print_formatted>
		break;
   349ba:	e7ae      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   349bc:	69e3      	ldr	r3, [r4, #28]
   349be:	4631      	mov	r1, r6
   349c0:	9305      	str	r3, [sp, #20]
   349c2:	69a3      	ldr	r3, [r4, #24]
   349c4:	4628      	mov	r0, r5
   349c6:	9304      	str	r3, [sp, #16]
   349c8:	6963      	ldr	r3, [r4, #20]
   349ca:	9303      	str	r3, [sp, #12]
   349cc:	6923      	ldr	r3, [r4, #16]
   349ce:	9302      	str	r3, [sp, #8]
   349d0:	68e3      	ldr	r3, [r4, #12]
   349d2:	9301      	str	r3, [sp, #4]
   349d4:	68a3      	ldr	r3, [r4, #8]
   349d6:	9300      	str	r3, [sp, #0]
   349d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   349dc:	f7eb ff44 	bl	20868 <print_formatted>
		break;
   349e0:	e79b      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   349e2:	6a23      	ldr	r3, [r4, #32]
   349e4:	4631      	mov	r1, r6
   349e6:	9306      	str	r3, [sp, #24]
   349e8:	69e3      	ldr	r3, [r4, #28]
   349ea:	4628      	mov	r0, r5
   349ec:	9305      	str	r3, [sp, #20]
   349ee:	69a3      	ldr	r3, [r4, #24]
   349f0:	9304      	str	r3, [sp, #16]
   349f2:	6963      	ldr	r3, [r4, #20]
   349f4:	9303      	str	r3, [sp, #12]
   349f6:	6923      	ldr	r3, [r4, #16]
   349f8:	9302      	str	r3, [sp, #8]
   349fa:	68e3      	ldr	r3, [r4, #12]
   349fc:	9301      	str	r3, [sp, #4]
   349fe:	68a3      	ldr	r3, [r4, #8]
   34a00:	9300      	str	r3, [sp, #0]
   34a02:	e9d4 2300 	ldrd	r2, r3, [r4]
   34a06:	f7eb ff2f 	bl	20868 <print_formatted>
		break;
   34a0a:	e786      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   34a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34a0e:	4631      	mov	r1, r6
   34a10:	9307      	str	r3, [sp, #28]
   34a12:	6a23      	ldr	r3, [r4, #32]
   34a14:	4628      	mov	r0, r5
   34a16:	9306      	str	r3, [sp, #24]
   34a18:	69e3      	ldr	r3, [r4, #28]
   34a1a:	9305      	str	r3, [sp, #20]
   34a1c:	69a3      	ldr	r3, [r4, #24]
   34a1e:	9304      	str	r3, [sp, #16]
   34a20:	6963      	ldr	r3, [r4, #20]
   34a22:	9303      	str	r3, [sp, #12]
   34a24:	6923      	ldr	r3, [r4, #16]
   34a26:	9302      	str	r3, [sp, #8]
   34a28:	68e3      	ldr	r3, [r4, #12]
   34a2a:	9301      	str	r3, [sp, #4]
   34a2c:	68a3      	ldr	r3, [r4, #8]
   34a2e:	9300      	str	r3, [sp, #0]
   34a30:	e9d4 2300 	ldrd	r2, r3, [r4]
   34a34:	f7eb ff18 	bl	20868 <print_formatted>
		break;
   34a38:	e76f      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   34a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   34a3c:	4631      	mov	r1, r6
   34a3e:	9308      	str	r3, [sp, #32]
   34a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34a42:	4628      	mov	r0, r5
   34a44:	9307      	str	r3, [sp, #28]
   34a46:	6a23      	ldr	r3, [r4, #32]
   34a48:	9306      	str	r3, [sp, #24]
   34a4a:	69e3      	ldr	r3, [r4, #28]
   34a4c:	9305      	str	r3, [sp, #20]
   34a4e:	69a3      	ldr	r3, [r4, #24]
   34a50:	9304      	str	r3, [sp, #16]
   34a52:	6963      	ldr	r3, [r4, #20]
   34a54:	9303      	str	r3, [sp, #12]
   34a56:	6923      	ldr	r3, [r4, #16]
   34a58:	9302      	str	r3, [sp, #8]
   34a5a:	68e3      	ldr	r3, [r4, #12]
   34a5c:	9301      	str	r3, [sp, #4]
   34a5e:	68a3      	ldr	r3, [r4, #8]
   34a60:	9300      	str	r3, [sp, #0]
   34a62:	e9d4 2300 	ldrd	r2, r3, [r4]
   34a66:	f7eb feff 	bl	20868 <print_formatted>
		break;
   34a6a:	e756      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   34a6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   34a6e:	4631      	mov	r1, r6
   34a70:	9309      	str	r3, [sp, #36]	; 0x24
   34a72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   34a74:	4628      	mov	r0, r5
   34a76:	9308      	str	r3, [sp, #32]
   34a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34a7a:	9307      	str	r3, [sp, #28]
   34a7c:	6a23      	ldr	r3, [r4, #32]
   34a7e:	9306      	str	r3, [sp, #24]
   34a80:	69e3      	ldr	r3, [r4, #28]
   34a82:	9305      	str	r3, [sp, #20]
   34a84:	69a3      	ldr	r3, [r4, #24]
   34a86:	9304      	str	r3, [sp, #16]
   34a88:	6963      	ldr	r3, [r4, #20]
   34a8a:	9303      	str	r3, [sp, #12]
   34a8c:	6923      	ldr	r3, [r4, #16]
   34a8e:	9302      	str	r3, [sp, #8]
   34a90:	68e3      	ldr	r3, [r4, #12]
   34a92:	9301      	str	r3, [sp, #4]
   34a94:	68a3      	ldr	r3, [r4, #8]
   34a96:	9300      	str	r3, [sp, #0]
   34a98:	e9d4 2300 	ldrd	r2, r3, [r4]
   34a9c:	f7eb fee4 	bl	20868 <print_formatted>
		break;
   34aa0:	e73b      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   34aa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   34aa4:	4631      	mov	r1, r6
   34aa6:	930a      	str	r3, [sp, #40]	; 0x28
   34aa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   34aaa:	4628      	mov	r0, r5
   34aac:	9309      	str	r3, [sp, #36]	; 0x24
   34aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   34ab0:	9308      	str	r3, [sp, #32]
   34ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34ab4:	9307      	str	r3, [sp, #28]
   34ab6:	6a23      	ldr	r3, [r4, #32]
   34ab8:	9306      	str	r3, [sp, #24]
   34aba:	69e3      	ldr	r3, [r4, #28]
   34abc:	9305      	str	r3, [sp, #20]
   34abe:	69a3      	ldr	r3, [r4, #24]
   34ac0:	9304      	str	r3, [sp, #16]
   34ac2:	6963      	ldr	r3, [r4, #20]
   34ac4:	9303      	str	r3, [sp, #12]
   34ac6:	6923      	ldr	r3, [r4, #16]
   34ac8:	9302      	str	r3, [sp, #8]
   34aca:	68e3      	ldr	r3, [r4, #12]
   34acc:	9301      	str	r3, [sp, #4]
   34ace:	68a3      	ldr	r3, [r4, #8]
   34ad0:	9300      	str	r3, [sp, #0]
   34ad2:	e9d4 2300 	ldrd	r2, r3, [r4]
   34ad6:	f7eb fec7 	bl	20868 <print_formatted>
		break;
   34ada:	e71e      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   34adc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34ade:	4631      	mov	r1, r6
   34ae0:	930b      	str	r3, [sp, #44]	; 0x2c
   34ae2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   34ae4:	4628      	mov	r0, r5
   34ae6:	930a      	str	r3, [sp, #40]	; 0x28
   34ae8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   34aea:	9309      	str	r3, [sp, #36]	; 0x24
   34aec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   34aee:	9308      	str	r3, [sp, #32]
   34af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34af2:	9307      	str	r3, [sp, #28]
   34af4:	6a23      	ldr	r3, [r4, #32]
   34af6:	9306      	str	r3, [sp, #24]
   34af8:	69e3      	ldr	r3, [r4, #28]
   34afa:	9305      	str	r3, [sp, #20]
   34afc:	69a3      	ldr	r3, [r4, #24]
   34afe:	9304      	str	r3, [sp, #16]
   34b00:	6963      	ldr	r3, [r4, #20]
   34b02:	9303      	str	r3, [sp, #12]
   34b04:	6923      	ldr	r3, [r4, #16]
   34b06:	9302      	str	r3, [sp, #8]
   34b08:	68e3      	ldr	r3, [r4, #12]
   34b0a:	9301      	str	r3, [sp, #4]
   34b0c:	68a3      	ldr	r3, [r4, #8]
   34b0e:	9300      	str	r3, [sp, #0]
   34b10:	e9d4 2300 	ldrd	r2, r3, [r4]
   34b14:	f7eb fea8 	bl	20868 <print_formatted>
		break;
   34b18:	e6ff      	b.n	3491a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   34b1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   34b1c:	4631      	mov	r1, r6
   34b1e:	930c      	str	r3, [sp, #48]	; 0x30
   34b20:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34b22:	4628      	mov	r0, r5
   34b24:	930b      	str	r3, [sp, #44]	; 0x2c
   34b26:	6b23      	ldr	r3, [r4, #48]	; 0x30
   34b28:	930a      	str	r3, [sp, #40]	; 0x28
   34b2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   34b2c:	9309      	str	r3, [sp, #36]	; 0x24
   34b2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   34b30:	9308      	str	r3, [sp, #32]
   34b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34b34:	9307      	str	r3, [sp, #28]
   34b36:	6a23      	ldr	r3, [r4, #32]
   34b38:	9306      	str	r3, [sp, #24]
   34b3a:	69e3      	ldr	r3, [r4, #28]
   34b3c:	9305      	str	r3, [sp, #20]
   34b3e:	69a3      	ldr	r3, [r4, #24]
   34b40:	9304      	str	r3, [sp, #16]
   34b42:	6963      	ldr	r3, [r4, #20]
   34b44:	9303      	str	r3, [sp, #12]
   34b46:	6923      	ldr	r3, [r4, #16]
   34b48:	9302      	str	r3, [sp, #8]
   34b4a:	68e3      	ldr	r3, [r4, #12]
   34b4c:	9301      	str	r3, [sp, #4]
   34b4e:	68a3      	ldr	r3, [r4, #8]
   34b50:	9300      	str	r3, [sp, #0]
   34b52:	e9d4 2300 	ldrd	r2, r3, [r4]
   34b56:	f7eb fe87 	bl	20868 <print_formatted>
}
   34b5a:	e6de      	b.n	3491a <std_print+0x78>

00034b5c <log_output_flush>:
		     log_output->control_block->offset,
   34b5c:	6842      	ldr	r2, [r0, #4]
{
   34b5e:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   34b60:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   34b64:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   34b66:	6881      	ldr	r1, [r0, #8]
   34b68:	6800      	ldr	r0, [r0, #0]
   34b6a:	f7ff fe8d 	bl	34888 <buffer_write>
	log_output->control_block->offset = 0;
   34b6e:	2200      	movs	r2, #0
   34b70:	6863      	ldr	r3, [r4, #4]
   34b72:	601a      	str	r2, [r3, #0]
}
   34b74:	bd10      	pop	{r4, pc}

00034b76 <out_func>:
{
   34b76:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   34b78:	684b      	ldr	r3, [r1, #4]
{
   34b7a:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   34b7c:	681a      	ldr	r2, [r3, #0]
   34b7e:	68cb      	ldr	r3, [r1, #12]
{
   34b80:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   34b82:	429a      	cmp	r2, r3
   34b84:	d102      	bne.n	34b8c <out_func+0x16>
		log_output_flush(out_ctx);
   34b86:	4608      	mov	r0, r1
   34b88:	f7ff ffe8 	bl	34b5c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   34b8c:	6863      	ldr	r3, [r4, #4]
   34b8e:	e8d3 2fef 	ldaex	r2, [r3]
   34b92:	1c51      	adds	r1, r2, #1
   34b94:	e8c3 1fe0 	stlex	r0, r1, [r3]
   34b98:	2800      	cmp	r0, #0
   34b9a:	d1f8      	bne.n	34b8e <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   34b9c:	68a3      	ldr	r3, [r4, #8]
}
   34b9e:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   34ba0:	549d      	strb	r5, [r3, r2]
}
   34ba2:	bd38      	pop	{r3, r4, r5, pc}

00034ba4 <boot_write_trailer_byte>:
{
   34ba4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   34ba6:	460d      	mov	r5, r1
   34ba8:	4616      	mov	r6, r2
   34baa:	4604      	mov	r4, r0
	align = flash_area_align(fa);
   34bac:	f000 f9df 	bl	34f6e <flash_area_align>
   34bb0:	9001      	str	r0, [sp, #4]
	erased_val = flash_area_erased_val(fa);
   34bb2:	4620      	mov	r0, r4
   34bb4:	f000 f9e7 	bl	34f86 <flash_area_erased_val>
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   34bb8:	2208      	movs	r2, #8
	erased_val = flash_area_erased_val(fa);
   34bba:	4601      	mov	r1, r0
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   34bbc:	eb0d 0002 	add.w	r0, sp, r2
   34bc0:	f002 fc3f 	bl	37442 <memset>
	rc = flash_area_write(fa, off, buf, align);
   34bc4:	4629      	mov	r1, r5
   34bc6:	4620      	mov	r0, r4
   34bc8:	9b01      	ldr	r3, [sp, #4]
   34bca:	aa02      	add	r2, sp, #8
	buf[0] = val;
   34bcc:	f88d 6008 	strb.w	r6, [sp, #8]
	rc = flash_area_write(fa, off, buf, align);
   34bd0:	f000 f9a4 	bl	34f1c <flash_area_write>
	if (rc != 0) {
   34bd4:	2800      	cmp	r0, #0
}
   34bd6:	bf18      	it	ne
   34bd8:	f06f 0004 	mvnne.w	r0, #4
   34bdc:	b004      	add	sp, #16
   34bde:	bd70      	pop	{r4, r5, r6, pc}

00034be0 <boot_flag_read.constprop.0>:
static int boot_flag_read(int flag, uint8_t bank_id)
   34be0:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   34be2:	2002      	movs	r0, #2
   34be4:	a901      	add	r1, sp, #4
   34be6:	f7ec fa37 	bl	21058 <flash_area_open>
	if (rc) {
   34bea:	b950      	cbnz	r0, 34c02 <boot_flag_read.constprop.0+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   34bec:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   34bee:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   34bf0:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   34bf2:	f10d 0203 	add.w	r2, sp, #3
   34bf6:	3918      	subs	r1, #24
   34bf8:	f000 f973 	bl	34ee2 <flash_area_read>
	if (rc != 0) {
   34bfc:	b908      	cbnz	r0, 34c02 <boot_flag_read.constprop.0+0x22>
	return flag_val;
   34bfe:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   34c02:	b003      	add	sp, #12
   34c04:	f85d fb04 	ldr.w	pc, [sp], #4

00034c08 <boot_flag_write.constprop.0>:
static int boot_flag_write(int flag, uint8_t bank_id)
   34c08:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   34c0a:	a901      	add	r1, sp, #4
   34c0c:	f7ec fa24 	bl	21058 <flash_area_open>
	if (rc) {
   34c10:	4604      	mov	r4, r0
   34c12:	b948      	cbnz	r0, 34c28 <boot_flag_write.constprop.0+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   34c14:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   34c16:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   34c18:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   34c1a:	3918      	subs	r1, #24
   34c1c:	f7ff ffc2 	bl	34ba4 <boot_write_trailer_byte>
   34c20:	4604      	mov	r4, r0
	flash_area_close(fa);
   34c22:	9801      	ldr	r0, [sp, #4]
   34c24:	f000 f95c 	bl	34ee0 <flash_area_close>
}
   34c28:	4620      	mov	r0, r4
   34c2a:	b002      	add	sp, #8
   34c2c:	bd10      	pop	{r4, pc}

00034c2e <boot_write_img_confirmed>:
{
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   34c2e:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   34c30:	f7ff ffd6 	bl	34be0 <boot_flag_read.constprop.0>
	rc = flash_area_open(bank_id, &fa);
   34c34:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   34c36:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   34c38:	2002      	movs	r0, #2
   34c3a:	f7ec fa0d 	bl	21058 <flash_area_open>
	if (rc) {
   34c3e:	b948      	cbnz	r0, 34c54 <boot_write_img_confirmed+0x26>
	return flash_area_erased_val(fa);
   34c40:	9801      	ldr	r0, [sp, #4]
   34c42:	f000 f9a0 	bl	34f86 <flash_area_erased_val>
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   34c46:	42a0      	cmp	r0, r4
   34c48:	d107      	bne.n	34c5a <boot_write_img_confirmed+0x2c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   34c4a:	2002      	movs	r0, #2
   34c4c:	f7ff ffdc 	bl	34c08 <boot_flag_write.constprop.0>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   34c50:	b002      	add	sp, #8
   34c52:	bd10      	pop	{r4, pc}
		return -EINVAL;
   34c54:	f06f 0015 	mvn.w	r0, #21
   34c58:	e7f5      	b.n	34c46 <boot_write_img_confirmed+0x18>
		return 0;
   34c5a:	2000      	movs	r0, #0
   34c5c:	e7f8      	b.n	34c50 <boot_write_img_confirmed+0x22>

00034c5e <flash_img_buffered_write>:
	     "CONFIG_IMG_BLOCK_BUF_SIZE is not a multiple of "
	     "FLASH_WRITE_BLOCK_SIZE");

int flash_img_buffered_write(struct flash_img_context *ctx, const uint8_t *data,
			     size_t len, bool flush)
{
   34c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;

	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   34c60:	f500 7701 	add.w	r7, r0, #516	; 0x204
{
   34c64:	4605      	mov	r5, r0
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   34c66:	4638      	mov	r0, r7
{
   34c68:	461e      	mov	r6, r3
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   34c6a:	f000 f99e 	bl	34faa <stream_flash_buffered_write>
   34c6e:	4604      	mov	r4, r0
	if (!flush) {
   34c70:	b186      	cbz	r6, 34c94 <flash_img_buffered_write+0x36>
		return rc;
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	rc = stream_flash_erase_page(&ctx->stream,
				ctx->flash_area->fa_off +
   34c72:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	rc = stream_flash_erase_page(&ctx->stream,
   34c76:	4638      	mov	r0, r7
				ctx->flash_area->fa_off +
   34c78:	6899      	ldr	r1, [r3, #8]
   34c7a:	685b      	ldr	r3, [r3, #4]
   34c7c:	3920      	subs	r1, #32
	rc = stream_flash_erase_page(&ctx->stream,
   34c7e:	4419      	add	r1, r3
   34c80:	f7ec fa1c 	bl	210bc <stream_flash_erase_page>
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
	if (rc) {
   34c84:	4604      	mov	r4, r0
   34c86:	b928      	cbnz	r0, 34c94 <flash_img_buffered_write+0x36>
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   34c88:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   34c8c:	f000 f928 	bl	34ee0 <flash_area_close>
	ctx->flash_area = NULL;
   34c90:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200

	return rc;
}
   34c94:	4620      	mov	r0, r4
   34c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034c98 <flash_img_bytes_written>:

size_t flash_img_bytes_written(struct flash_img_context *ctx)
{
	return stream_flash_bytes_written(&ctx->stream);
   34c98:	f500 7001 	add.w	r0, r0, #516	; 0x204
   34c9c:	f000 b9ef 	b.w	3507e <stream_flash_bytes_written>

00034ca0 <flash_img_init_id>:
}

int flash_img_init_id(struct flash_img_context *ctx, uint8_t area_id)
{
   34ca0:	b530      	push	{r4, r5, lr}
   34ca2:	4605      	mov	r5, r0
   34ca4:	b085      	sub	sp, #20
   34ca6:	4608      	mov	r0, r1
	int rc;
	const struct device *flash_dev;

	rc = flash_area_open(area_id,
   34ca8:	f505 7100 	add.w	r1, r5, #512	; 0x200
   34cac:	f7ec f9d4 	bl	21058 <flash_area_open>
			       (const struct flash_area **)&(ctx->flash_area));
	if (rc) {
   34cb0:	4604      	mov	r4, r0
   34cb2:	b998      	cbnz	r0, 34cdc <flash_img_init_id+0x3c>
		return rc;
	}

	flash_dev = flash_area_get_device(ctx->flash_area);
   34cb4:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   34cb8:	f000 f962 	bl	34f80 <flash_area_get_device>

	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
			CONFIG_IMG_BLOCK_BUF_SIZE, ctx->flash_area->fa_off,
   34cbc:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   34cc0:	9402      	str	r4, [sp, #8]
   34cc2:	689a      	ldr	r2, [r3, #8]
	flash_dev = flash_area_get_device(ctx->flash_area);
   34cc4:	4601      	mov	r1, r0
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   34cc6:	9201      	str	r2, [sp, #4]
   34cc8:	685b      	ldr	r3, [r3, #4]
   34cca:	462a      	mov	r2, r5
   34ccc:	9300      	str	r3, [sp, #0]
   34cce:	f505 7001 	add.w	r0, r5, #516	; 0x204
   34cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
   34cd6:	f7ec fab3 	bl	21240 <stream_flash_init>
   34cda:	4604      	mov	r4, r0
			ctx->flash_area->fa_size, NULL);
}
   34cdc:	4620      	mov	r0, r4
   34cde:	b005      	add	sp, #20
   34ce0:	bd30      	pop	{r4, r5, pc}

00034ce2 <flash_img_init>:

int flash_img_init(struct flash_img_context *ctx)
{
	return flash_img_init_id(ctx, UPLOAD_FLASH_AREA_ID);
   34ce2:	2106      	movs	r1, #6
   34ce4:	f7ff bfdc 	b.w	34ca0 <flash_img_init_id>

00034ce8 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   34ce8:	f7ec b98e 	b.w	21008 <socket_offload_getaddrinfo>

00034cec <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   34cec:	f7ec b996 	b.w	2101c <socket_offload_freeaddrinfo>

00034cf0 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   34cf0:	b40c      	push	{r2, r3}
   34cf2:	4603      	mov	r3, r0
   34cf4:	b507      	push	{r0, r1, r2, lr}
   34cf6:	aa04      	add	r2, sp, #16
   34cf8:	4608      	mov	r0, r1
   34cfa:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   34cfe:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   34d00:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   34d02:	4798      	blx	r3
	va_end(args);

	return res;
}
   34d04:	b003      	add	sp, #12
   34d06:	f85d eb04 	ldr.w	lr, [sp], #4
   34d0a:	b002      	add	sp, #8
   34d0c:	4770      	bx	lr

00034d0e <z_impl_zsock_close>:
{
   34d0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   34d10:	a901      	add	r1, sp, #4
{
   34d12:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   34d14:	f7ea fa82 	bl	1f21c <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   34d18:	b940      	cbnz	r0, 34d2c <z_impl_zsock_close+0x1e>
		errno = EBADF;
   34d1a:	f000 fafc 	bl	35316 <__errno>
   34d1e:	2309      	movs	r3, #9
		return -1;
   34d20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		errno = EBADF;
   34d24:	6003      	str	r3, [r0, #0]
}
   34d26:	4620      	mov	r0, r4
   34d28:	b003      	add	sp, #12
   34d2a:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   34d2c:	9b01      	ldr	r3, [sp, #4]
   34d2e:	689b      	ldr	r3, [r3, #8]
   34d30:	4798      	blx	r3
   34d32:	4604      	mov	r4, r0
	z_free_fd(sock);
   34d34:	4628      	mov	r0, r5
   34d36:	f7ea fac1 	bl	1f2bc <z_free_fd>
	return ret;
   34d3a:	e7f4      	b.n	34d26 <z_impl_zsock_close+0x18>

00034d3c <z_impl_zsock_bind>:
{
   34d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   34d3e:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   34d40:	a903      	add	r1, sp, #12
{
   34d42:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   34d44:	f7ea fa6a 	bl	1f21c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(bind, sock, addr, addrlen);
   34d48:	b118      	cbz	r0, 34d52 <z_impl_zsock_bind+0x16>
   34d4a:	9b03      	ldr	r3, [sp, #12]
   34d4c:	9a01      	ldr	r2, [sp, #4]
   34d4e:	691b      	ldr	r3, [r3, #16]
   34d50:	b93b      	cbnz	r3, 34d62 <z_impl_zsock_bind+0x26>
   34d52:	f000 fae0 	bl	35316 <__errno>
   34d56:	2309      	movs	r3, #9
   34d58:	6003      	str	r3, [r0, #0]
   34d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   34d5e:	b004      	add	sp, #16
   34d60:	bd10      	pop	{r4, pc}
	VTABLE_CALL(bind, sock, addr, addrlen);
   34d62:	4621      	mov	r1, r4
   34d64:	4798      	blx	r3
   34d66:	e7fa      	b.n	34d5e <z_impl_zsock_bind+0x22>

00034d68 <z_impl_zsock_connect>:
{
   34d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   34d6a:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   34d6c:	a903      	add	r1, sp, #12
{
   34d6e:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   34d70:	f7ea fa54 	bl	1f21c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   34d74:	b118      	cbz	r0, 34d7e <z_impl_zsock_connect+0x16>
   34d76:	9b03      	ldr	r3, [sp, #12]
   34d78:	9a01      	ldr	r2, [sp, #4]
   34d7a:	695b      	ldr	r3, [r3, #20]
   34d7c:	b93b      	cbnz	r3, 34d8e <z_impl_zsock_connect+0x26>
   34d7e:	f000 faca 	bl	35316 <__errno>
   34d82:	2309      	movs	r3, #9
   34d84:	6003      	str	r3, [r0, #0]
   34d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   34d8a:	b004      	add	sp, #16
   34d8c:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   34d8e:	4621      	mov	r1, r4
   34d90:	4798      	blx	r3
   34d92:	e7fa      	b.n	34d8a <z_impl_zsock_connect+0x22>

00034d94 <z_impl_zsock_listen>:
{
   34d94:	b513      	push	{r0, r1, r4, lr}
   34d96:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   34d98:	a901      	add	r1, sp, #4
   34d9a:	f7ea fa3f 	bl	1f21c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(listen, sock, backlog);
   34d9e:	b110      	cbz	r0, 34da6 <z_impl_zsock_listen+0x12>
   34da0:	9b01      	ldr	r3, [sp, #4]
   34da2:	699b      	ldr	r3, [r3, #24]
   34da4:	b93b      	cbnz	r3, 34db6 <z_impl_zsock_listen+0x22>
   34da6:	f000 fab6 	bl	35316 <__errno>
   34daa:	2309      	movs	r3, #9
   34dac:	6003      	str	r3, [r0, #0]
   34dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   34db2:	b002      	add	sp, #8
   34db4:	bd10      	pop	{r4, pc}
	VTABLE_CALL(listen, sock, backlog);
   34db6:	4621      	mov	r1, r4
   34db8:	4798      	blx	r3
   34dba:	e7fa      	b.n	34db2 <z_impl_zsock_listen+0x1e>

00034dbc <z_impl_zsock_accept>:
{
   34dbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   34dbe:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   34dc0:	a903      	add	r1, sp, #12
{
   34dc2:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   34dc4:	f7ea fa2a 	bl	1f21c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(accept, sock, addr, addrlen);
   34dc8:	b118      	cbz	r0, 34dd2 <z_impl_zsock_accept+0x16>
   34dca:	9b03      	ldr	r3, [sp, #12]
   34dcc:	9a01      	ldr	r2, [sp, #4]
   34dce:	69db      	ldr	r3, [r3, #28]
   34dd0:	b93b      	cbnz	r3, 34de2 <z_impl_zsock_accept+0x26>
   34dd2:	f000 faa0 	bl	35316 <__errno>
   34dd6:	2309      	movs	r3, #9
   34dd8:	6003      	str	r3, [r0, #0]
   34dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   34dde:	b004      	add	sp, #16
   34de0:	bd10      	pop	{r4, pc}
	VTABLE_CALL(accept, sock, addr, addrlen);
   34de2:	4621      	mov	r1, r4
   34de4:	4798      	blx	r3
   34de6:	e7fa      	b.n	34dde <z_impl_zsock_accept+0x22>

00034de8 <z_impl_zsock_sendto>:
{
   34de8:	b530      	push	{r4, r5, lr}
   34dea:	b087      	sub	sp, #28
   34dec:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   34dee:	a905      	add	r1, sp, #20
{
   34df0:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   34df4:	f7ea fa12 	bl	1f21c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   34df8:	b120      	cbz	r0, 34e04 <z_impl_zsock_sendto+0x1c>
   34dfa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   34dfe:	9905      	ldr	r1, [sp, #20]
   34e00:	6a0d      	ldr	r5, [r1, #32]
   34e02:	b93d      	cbnz	r5, 34e14 <z_impl_zsock_sendto+0x2c>
   34e04:	f000 fa87 	bl	35316 <__errno>
   34e08:	2309      	movs	r3, #9
   34e0a:	6003      	str	r3, [r0, #0]
   34e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   34e10:	b007      	add	sp, #28
   34e12:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   34e14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   34e16:	9101      	str	r1, [sp, #4]
   34e18:	990a      	ldr	r1, [sp, #40]	; 0x28
   34e1a:	9100      	str	r1, [sp, #0]
   34e1c:	4621      	mov	r1, r4
   34e1e:	47a8      	blx	r5
   34e20:	e7f6      	b.n	34e10 <z_impl_zsock_sendto+0x28>

00034e22 <z_impl_zsock_recvfrom>:
{
   34e22:	b530      	push	{r4, r5, lr}
   34e24:	b087      	sub	sp, #28
   34e26:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   34e28:	a905      	add	r1, sp, #20
{
   34e2a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   34e2e:	f7ea f9f5 	bl	1f21c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   34e32:	b120      	cbz	r0, 34e3e <z_impl_zsock_recvfrom+0x1c>
   34e34:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   34e38:	9905      	ldr	r1, [sp, #20]
   34e3a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   34e3c:	b93d      	cbnz	r5, 34e4e <z_impl_zsock_recvfrom+0x2c>
   34e3e:	f000 fa6a 	bl	35316 <__errno>
   34e42:	2309      	movs	r3, #9
   34e44:	6003      	str	r3, [r0, #0]
   34e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   34e4a:	b007      	add	sp, #28
   34e4c:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   34e4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   34e50:	9101      	str	r1, [sp, #4]
   34e52:	990a      	ldr	r1, [sp, #40]	; 0x28
   34e54:	9100      	str	r1, [sp, #0]
   34e56:	4621      	mov	r1, r4
   34e58:	47a8      	blx	r5
   34e5a:	e7f6      	b.n	34e4a <z_impl_zsock_recvfrom+0x28>

00034e5c <z_impl_zsock_inet_pton>:
}
#include <syscalls/zsock_poll_mrsh.c>
#endif

int z_impl_zsock_inet_pton(sa_family_t family, const char *src, void *dst)
{
   34e5c:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   34e5e:	f000 fac5 	bl	353ec <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
		return 1;
	} else {
		return 0;
	}
}
   34e62:	fab0 f080 	clz	r0, r0
   34e66:	0940      	lsrs	r0, r0, #5
   34e68:	bd08      	pop	{r3, pc}

00034e6a <z_impl_zsock_getsockopt>:
	return -1;
}

int z_impl_zsock_getsockopt(int sock, int level, int optname,
			    void *optval, socklen_t *optlen)
{
   34e6a:	b530      	push	{r4, r5, lr}
   34e6c:	b087      	sub	sp, #28
   34e6e:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   34e70:	a905      	add	r1, sp, #20
{
   34e72:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   34e76:	f7ea f9d1 	bl	1f21c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   34e7a:	b120      	cbz	r0, 34e86 <z_impl_zsock_getsockopt+0x1c>
   34e7c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   34e80:	9905      	ldr	r1, [sp, #20]
   34e82:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   34e84:	b93d      	cbnz	r5, 34e96 <z_impl_zsock_getsockopt+0x2c>
   34e86:	f000 fa46 	bl	35316 <__errno>
   34e8a:	2309      	movs	r3, #9
   34e8c:	6003      	str	r3, [r0, #0]
   34e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   34e92:	b007      	add	sp, #28
   34e94:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   34e96:	990a      	ldr	r1, [sp, #40]	; 0x28
   34e98:	9100      	str	r1, [sp, #0]
   34e9a:	4621      	mov	r1, r4
   34e9c:	47a8      	blx	r5
   34e9e:	e7f8      	b.n	34e92 <z_impl_zsock_getsockopt+0x28>

00034ea0 <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   34ea0:	b530      	push	{r4, r5, lr}
   34ea2:	b087      	sub	sp, #28
   34ea4:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   34ea6:	a905      	add	r1, sp, #20
{
   34ea8:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   34eac:	f7ea f9b6 	bl	1f21c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   34eb0:	b120      	cbz	r0, 34ebc <z_impl_zsock_setsockopt+0x1c>
   34eb2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   34eb6:	9905      	ldr	r1, [sp, #20]
   34eb8:	6acd      	ldr	r5, [r1, #44]	; 0x2c
   34eba:	b93d      	cbnz	r5, 34ecc <z_impl_zsock_setsockopt+0x2c>
   34ebc:	f000 fa2b 	bl	35316 <__errno>
   34ec0:	2309      	movs	r3, #9
   34ec2:	6003      	str	r3, [r0, #0]
   34ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   34ec8:	b007      	add	sp, #28
   34eca:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   34ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
   34ece:	9100      	str	r1, [sp, #0]
   34ed0:	4621      	mov	r1, r4
   34ed2:	47a8      	blx	r5
   34ed4:	e7f8      	b.n	34ec8 <z_impl_zsock_setsockopt+0x28>

00034ed6 <z_impl_flash_write_protection_set>:
						    bool enable)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
   34ed6:	6883      	ldr	r3, [r0, #8]
   34ed8:	68db      	ldr	r3, [r3, #12]
   34eda:	4718      	bx	r3

00034edc <device_get_binding>:
   34edc:	f7fc bab8 	b.w	31450 <z_impl_device_get_binding>

00034ee0 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   34ee0:	4770      	bx	lr

00034ee2 <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   34ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   34ee4:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   34ee6:	6883      	ldr	r3, [r0, #8]
{
   34ee8:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   34eea:	428b      	cmp	r3, r1
{
   34eec:	460c      	mov	r4, r1
   34eee:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   34ef0:	d310      	bcc.n	34f14 <flash_area_read+0x32>
   34ef2:	1871      	adds	r1, r6, r1
   34ef4:	428b      	cmp	r3, r1
   34ef6:	d30d      	bcc.n	34f14 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   34ef8:	68c0      	ldr	r0, [r0, #12]
   34efa:	f7ff ffef 	bl	34edc <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   34efe:	6869      	ldr	r1, [r5, #4]
   34f00:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   34f02:	6883      	ldr	r3, [r0, #8]
   34f04:	9a01      	ldr	r2, [sp, #4]
   34f06:	681c      	ldr	r4, [r3, #0]
   34f08:	4633      	mov	r3, r6
   34f0a:	46a4      	mov	ip, r4
}
   34f0c:	b002      	add	sp, #8
   34f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   34f12:	4760      	bx	ip
   34f14:	f06f 0015 	mvn.w	r0, #21
   34f18:	b002      	add	sp, #8
   34f1a:	bd70      	pop	{r4, r5, r6, pc}

00034f1c <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   34f1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34f20:	4698      	mov	r8, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   34f22:	6883      	ldr	r3, [r0, #8]
{
   34f24:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   34f26:	428b      	cmp	r3, r1
{
   34f28:	460d      	mov	r5, r1
   34f2a:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   34f2c:	d31c      	bcc.n	34f68 <flash_area_write+0x4c>
   34f2e:	4441      	add	r1, r8
   34f30:	428b      	cmp	r3, r1
   34f32:	d319      	bcc.n	34f68 <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   34f34:	68c0      	ldr	r0, [r0, #12]
   34f36:	f7ff ffd1 	bl	34edc <device_get_binding>
   34f3a:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   34f3c:	2100      	movs	r1, #0
   34f3e:	f7ff ffca 	bl	34ed6 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   34f42:	4604      	mov	r4, r0
   34f44:	b960      	cbnz	r0, 34f60 <flash_area_write+0x44>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   34f46:	6879      	ldr	r1, [r7, #4]
   34f48:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   34f4a:	68b3      	ldr	r3, [r6, #8]
   34f4c:	4630      	mov	r0, r6
   34f4e:	685c      	ldr	r4, [r3, #4]
   34f50:	9a01      	ldr	r2, [sp, #4]
   34f52:	4643      	mov	r3, r8
   34f54:	47a0      	blx	r4
   34f56:	4604      	mov	r4, r0
   34f58:	2101      	movs	r1, #1
   34f5a:	4630      	mov	r0, r6
   34f5c:	f7ff ffbb 	bl	34ed6 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   34f60:	4620      	mov	r0, r4
   34f62:	b002      	add	sp, #8
   34f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   34f68:	f06f 0415 	mvn.w	r4, #21
   34f6c:	e7f8      	b.n	34f60 <flash_area_write+0x44>

00034f6e <flash_area_align>:

	return rc;
}

uint8_t flash_area_align(const struct flash_area *fa)
{
   34f6e:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   34f70:	68c0      	ldr	r0, [r0, #12]
   34f72:	f7ff ffb3 	bl	34edc <device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
   34f76:	6883      	ldr	r3, [r0, #8]
   34f78:	691b      	ldr	r3, [r3, #16]
   34f7a:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   34f7c:	7800      	ldrb	r0, [r0, #0]
   34f7e:	bd08      	pop	{r3, pc}

00034f80 <flash_area_get_device>:
	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   34f80:	68c0      	ldr	r0, [r0, #12]
   34f82:	f7ff bfab 	b.w	34edc <device_get_binding>

00034f86 <flash_area_erased_val>:
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   34f86:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   34f88:	68c0      	ldr	r0, [r0, #12]
   34f8a:	f7ff ffa7 	bl	34edc <device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   34f8e:	6883      	ldr	r3, [r0, #8]
   34f90:	691b      	ldr	r3, [r3, #16]
   34f92:	4798      	blx	r3

	return param->erase_value;
}
   34f94:	7900      	ldrb	r0, [r0, #4]
   34f96:	bd08      	pop	{r3, pc}

00034f98 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   34f98:	6883      	ldr	r3, [r0, #8]
   34f9a:	68db      	ldr	r3, [r3, #12]
   34f9c:	4718      	bx	r3

00034f9e <flash_get_write_block_size>:
}


extern size_t z_impl_flash_get_write_block_size(const struct device * dev);
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   34f9e:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   34fa0:	6883      	ldr	r3, [r0, #8]
   34fa2:	691b      	ldr	r3, [r3, #16]
   34fa4:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   34fa6:	6800      	ldr	r0, [r0, #0]
   34fa8:	bd08      	pop	{r3, pc}

00034faa <stream_flash_buffered_write>:
{
   34faa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   34fae:	4688      	mov	r8, r1
   34fb0:	4616      	mov	r6, r2
   34fb2:	461f      	mov	r7, r3
	if (!ctx) {
   34fb4:	4604      	mov	r4, r0
   34fb6:	2800      	cmp	r0, #0
   34fb8:	d059      	beq.n	3506e <stream_flash_buffered_write+0xc4>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   34fba:	6882      	ldr	r2, [r0, #8]
   34fbc:	6903      	ldr	r3, [r0, #16]
   34fbe:	4413      	add	r3, r2
   34fc0:	6982      	ldr	r2, [r0, #24]
   34fc2:	4433      	add	r3, r6
   34fc4:	4293      	cmp	r3, r2
   34fc6:	d855      	bhi.n	35074 <stream_flash_buffered_write+0xca>
	int processed = 0;
   34fc8:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   34fca:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
	while ((len - processed) >=
   34fce:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   34fd2:	eba2 0900 	sub.w	r9, r2, r0
	while ((len - processed) >=
   34fd6:	45ca      	cmp	sl, r9
   34fd8:	d239      	bcs.n	3504e <stream_flash_buffered_write+0xa4>
	if (processed < len) {
   34fda:	42b5      	cmp	r5, r6
   34fdc:	d209      	bcs.n	34ff2 <stream_flash_buffered_write+0x48>
		memcpy(ctx->buf + ctx->buf_bytes,
   34fde:	6823      	ldr	r3, [r4, #0]
   34fe0:	4652      	mov	r2, sl
   34fe2:	4418      	add	r0, r3
   34fe4:	eb08 0105 	add.w	r1, r8, r5
   34fe8:	f002 fa0b 	bl	37402 <memcpy>
		ctx->buf_bytes += len - processed;
   34fec:	68a3      	ldr	r3, [r4, #8]
   34fee:	4453      	add	r3, sl
   34ff0:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   34ff2:	2f00      	cmp	r7, #0
   34ff4:	d041      	beq.n	3507a <stream_flash_buffered_write+0xd0>
   34ff6:	68a0      	ldr	r0, [r4, #8]
   34ff8:	b330      	cbz	r0, 35048 <stream_flash_buffered_write+0x9e>
		fill_length = flash_get_write_block_size(ctx->fdev);
   34ffa:	68e0      	ldr	r0, [r4, #12]
   34ffc:	f7ff ffcf 	bl	34f9e <flash_get_write_block_size>
		if (ctx->buf_bytes % fill_length) {
   35000:	68a3      	ldr	r3, [r4, #8]
		fill_length = flash_get_write_block_size(ctx->fdev);
   35002:	4606      	mov	r6, r0
		if (ctx->buf_bytes % fill_length) {
   35004:	fbb3 f5f0 	udiv	r5, r3, r0
   35008:	fb00 3515 	mls	r5, r0, r5, r3
   3500c:	b1b5      	cbz	r5, 3503c <stream_flash_buffered_write+0x92>
					ctx->offset + ctx->bytes_written,
   3500e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
			rc = flash_read(ctx->fdev,
   35012:	68e0      	ldr	r0, [r4, #12]
					ctx->offset + ctx->bytes_written,
   35014:	4419      	add	r1, r3
	return api->read(dev, offset, data, len);
   35016:	6883      	ldr	r3, [r0, #8]
   35018:	f10d 0207 	add.w	r2, sp, #7
   3501c:	681f      	ldr	r7, [r3, #0]
   3501e:	2301      	movs	r3, #1
   35020:	47b8      	blx	r7
			if (rc != 0) {
   35022:	b988      	cbnz	r0, 35048 <stream_flash_buffered_write+0x9e>
			memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   35024:	68a3      	ldr	r3, [r4, #8]
   35026:	6820      	ldr	r0, [r4, #0]
			fill_length -= ctx->buf_bytes % fill_length;
   35028:	1b75      	subs	r5, r6, r5
__ssp_bos_icheck3(memset, void *, int)
   3502a:	4418      	add	r0, r3
   3502c:	462a      	mov	r2, r5
   3502e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   35032:	f002 fa06 	bl	37442 <memset>
			ctx->buf_bytes += fill_length;
   35036:	68a3      	ldr	r3, [r4, #8]
   35038:	442b      	add	r3, r5
   3503a:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   3503c:	4620      	mov	r0, r4
   3503e:	f7ec f883 	bl	21148 <flash_sync>
		ctx->bytes_written -= fill_length;
   35042:	6923      	ldr	r3, [r4, #16]
   35044:	1b5d      	subs	r5, r3, r5
   35046:	6125      	str	r5, [r4, #16]
}
   35048:	b002      	add	sp, #8
   3504a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   3504e:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   35050:	464a      	mov	r2, r9
   35052:	4418      	add	r0, r3
   35054:	eb08 0105 	add.w	r1, r8, r5
   35058:	f002 f9d3 	bl	37402 <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   3505c:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
   3505e:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
   35060:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   35062:	f7ec f871 	bl	21148 <flash_sync>
		if (rc != 0) {
   35066:	2800      	cmp	r0, #0
   35068:	d1ee      	bne.n	35048 <stream_flash_buffered_write+0x9e>
		processed += buf_empty_bytes;
   3506a:	444d      	add	r5, r9
   3506c:	e7ad      	b.n	34fca <stream_flash_buffered_write+0x20>
		return -EFAULT;
   3506e:	f06f 000d 	mvn.w	r0, #13
   35072:	e7e9      	b.n	35048 <stream_flash_buffered_write+0x9e>
		return -ENOMEM;
   35074:	f06f 000b 	mvn.w	r0, #11
   35078:	e7e6      	b.n	35048 <stream_flash_buffered_write+0x9e>
   3507a:	4638      	mov	r0, r7
   3507c:	e7e4      	b.n	35048 <stream_flash_buffered_write+0x9e>

0003507e <stream_flash_bytes_written>:
}
   3507e:	6900      	ldr	r0, [r0, #16]
   35080:	4770      	bx	lr

00035082 <sys_pm_init>:
	}
}

#if CONFIG_DEVICE_POWER_MANAGEMENT
static int sys_pm_init(const struct device *dev)
{
   35082:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	sys_pm_create_device_list();
   35084:	f7ec f940 	bl	21308 <sys_pm_create_device_list>
	return 0;
}
   35088:	2000      	movs	r0, #0
   3508a:	bd08      	pop	{r3, pc}

0003508c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   3508c:	b2cb      	uxtb	r3, r1
   3508e:	210c      	movs	r1, #12
   35090:	68c2      	ldr	r2, [r0, #12]
   35092:	fb03 2101 	mla	r1, r3, r1, r2
   35096:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   35098:	f000 0007 	and.w	r0, r0, #7
   3509c:	4770      	bx	lr

0003509e <set_off_state>:
	__asm__ volatile(
   3509e:	f04f 0320 	mov.w	r3, #32
   350a2:	f3ef 8211 	mrs	r2, BASEPRI
   350a6:	f383 8811 	msr	BASEPRI, r3
   350aa:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   350ae:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   350b0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   350b4:	d001      	beq.n	350ba <set_off_state+0x1c>
   350b6:	428b      	cmp	r3, r1
   350b8:	d107      	bne.n	350ca <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   350ba:	2301      	movs	r3, #1
   350bc:	6003      	str	r3, [r0, #0]
	int err = 0;
   350be:	2000      	movs	r0, #0
	__asm__ volatile(
   350c0:	f382 8811 	msr	BASEPRI, r2
   350c4:	f3bf 8f6f 	isb	sy
}
   350c8:	4770      	bx	lr
		err = -EPERM;
   350ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   350ce:	e7f7      	b.n	350c0 <set_off_state+0x22>

000350d0 <set_starting_state>:
{
   350d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   350d2:	f04f 0320 	mov.w	r3, #32
   350d6:	f3ef 8211 	mrs	r2, BASEPRI
   350da:	f383 8811 	msr	BASEPRI, r3
   350de:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   350e2:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   350e4:	f003 0407 	and.w	r4, r3, #7
   350e8:	2c01      	cmp	r4, #1
   350ea:	d106      	bne.n	350fa <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   350ec:	6001      	str	r1, [r0, #0]
	int err = 0;
   350ee:	2000      	movs	r0, #0
	__asm__ volatile(
   350f0:	f382 8811 	msr	BASEPRI, r2
   350f4:	f3bf 8f6f 	isb	sy
}
   350f8:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   350fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   350fe:	428b      	cmp	r3, r1
		err = -EALREADY;
   35100:	bf14      	ite	ne
   35102:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   35106:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   3510a:	e7f1      	b.n	350f0 <set_starting_state+0x20>

0003510c <set_on_state>:
	__asm__ volatile(
   3510c:	f04f 0320 	mov.w	r3, #32
   35110:	f3ef 8211 	mrs	r2, BASEPRI
   35114:	f383 8811 	msr	BASEPRI, r3
   35118:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3511c:	6803      	ldr	r3, [r0, #0]
   3511e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   35122:	f043 0302 	orr.w	r3, r3, #2
   35126:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   35128:	f382 8811 	msr	BASEPRI, r2
   3512c:	f3bf 8f6f 	isb	sy
}
   35130:	4770      	bx	lr

00035132 <onoff_started_callback>:
{
   35132:	b410      	push	{r4}
	notify(mgr, 0);
   35134:	241c      	movs	r4, #28
	return &data->mgr[type];
   35136:	68c0      	ldr	r0, [r0, #12]
   35138:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   3513a:	fb03 0004 	mla	r0, r3, r4, r0
   3513e:	2100      	movs	r1, #0
}
   35140:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   35144:	4710      	bx	r2

00035146 <blocking_start_callback>:
{
   35146:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   35148:	f7fd b8fc 	b.w	32344 <z_impl_k_sem_give>

0003514c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3514c:	2000      	movs	r0, #0
   3514e:	f7fb bfcd 	b.w	310ec <nrfx_clock_stop>

00035152 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   35152:	2000      	movs	r0, #0
   35154:	f7fb bf98 	b.w	31088 <nrfx_clock_start>

00035158 <api_stop>:
{
   35158:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   3515a:	240c      	movs	r4, #12
   3515c:	b2c9      	uxtb	r1, r1
   3515e:	434c      	muls	r4, r1
{
   35160:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   35162:	68c0      	ldr	r0, [r0, #12]
   35164:	f104 0340 	add.w	r3, r4, #64	; 0x40
   35168:	2180      	movs	r1, #128	; 0x80
   3516a:	4418      	add	r0, r3
   3516c:	f7ff ff97 	bl	3509e <set_off_state>
	if (err < 0) {
   35170:	2800      	cmp	r0, #0
   35172:	db04      	blt.n	3517e <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   35174:	6869      	ldr	r1, [r5, #4]
   35176:	440c      	add	r4, r1
   35178:	6863      	ldr	r3, [r4, #4]
   3517a:	4798      	blx	r3
	return 0;
   3517c:	2000      	movs	r0, #0
}
   3517e:	bd38      	pop	{r3, r4, r5, pc}

00035180 <api_start>:
{
   35180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   35184:	240c      	movs	r4, #12
   35186:	b2c9      	uxtb	r1, r1
   35188:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   3518a:	68c5      	ldr	r5, [r0, #12]
{
   3518c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   3518e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   35192:	2180      	movs	r1, #128	; 0x80
   35194:	4428      	add	r0, r5
{
   35196:	4690      	mov	r8, r2
   35198:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   3519a:	f7ff ff99 	bl	350d0 <set_starting_state>
	if (err < 0) {
   3519e:	2800      	cmp	r0, #0
   351a0:	db06      	blt.n	351b0 <api_start+0x30>
	subdata->cb = cb;
   351a2:	4425      	add	r5, r4
	subdata->user_data = user_data;
   351a4:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   351a8:	6873      	ldr	r3, [r6, #4]
   351aa:	591b      	ldr	r3, [r3, r4]
   351ac:	4798      	blx	r3
	return 0;
   351ae:	2000      	movs	r0, #0
}
   351b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000351b4 <z_clock_device_ctrl>:
int __weak z_clock_device_ctrl(const struct device *device,
			       uint32_t ctrl_command,
			       void *context, device_pm_cb cb, void *arg)
{
	return -ENOTSUP;
}
   351b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   351b8:	4770      	bx	lr

000351ba <z_clock_isr>:
}
   351ba:	4770      	bx	lr

000351bc <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   351bc:	4770      	bx	lr

000351be <sys_clock_disable>:
   351be:	4770      	bx	lr

000351c0 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   351c0:	b510      	push	{r4, lr}
   351c2:	b40f      	push	{r0, r1, r2, r3}
   351c4:	f7fc fd64 	bl	31c90 <k_sched_lock>
   351c8:	bc0f      	pop	{r0, r1, r2, r3}
   351ca:	f7e2 ff0d 	bl	17fe8 <spm_request_random_number_nse>
   351ce:	b40f      	push	{r0, r1, r2, r3}
   351d0:	f7fc fdb0 	bl	31d34 <k_sched_unlock>
   351d4:	bc0f      	pop	{r0, r1, r2, r3}
   351d6:	bd10      	pop	{r4, pc}

000351d8 <spm_request_read>:
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   351d8:	b510      	push	{r4, lr}
   351da:	b40f      	push	{r0, r1, r2, r3}
   351dc:	f7fc fd58 	bl	31c90 <k_sched_lock>
   351e0:	bc0f      	pop	{r0, r1, r2, r3}
   351e2:	f7e2 ff05 	bl	17ff0 <spm_request_read_nse>
   351e6:	b40f      	push	{r0, r1, r2, r3}
   351e8:	f7fc fda4 	bl	31d34 <k_sched_unlock>
   351ec:	bc0f      	pop	{r0, r1, r2, r3}
   351ee:	bd10      	pop	{r4, pc}

000351f0 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   351f0:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   351f2:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   351f4:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   351f6:	bf97      	itett	ls
   351f8:	6882      	ldrls	r2, [r0, #8]
    r = RdOff - WrOff - 1u;
   351fa:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   351fe:	18d2      	addls	r2, r2, r3
   35200:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
   35204:	bf94      	ite	ls
   35206:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   35208:	1a58      	subhi	r0, r3, r1
}
   3520a:	4770      	bx	lr

0003520c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   3520c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   35210:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   35214:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   35216:	eba9 0804 	sub.w	r8, r9, r4
   3521a:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   3521c:	4590      	cmp	r8, r2
   3521e:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   35220:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
   35222:	4414      	add	r4, r2
   35224:	d904      	bls.n	35230 <_WriteNoCheck+0x24>
   35226:	f002 f8ec 	bl	37402 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   3522a:	60ec      	str	r4, [r5, #12]
}
   3522c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   35230:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   35232:	eba4 0409 	sub.w	r4, r4, r9
   35236:	f002 f8e4 	bl	37402 <memcpy>
   3523a:	4622      	mov	r2, r4
   3523c:	6868      	ldr	r0, [r5, #4]
   3523e:	eb07 0108 	add.w	r1, r7, r8
   35242:	e7f0      	b.n	35226 <_WriteNoCheck+0x1a>

00035244 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   35244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35248:	4606      	mov	r6, r0
   3524a:	4689      	mov	r9, r1
   3524c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   3524e:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   35252:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   35254:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   35256:	68b3      	ldr	r3, [r6, #8]
   35258:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   3525a:	bf28      	it	cs
   3525c:	18e4      	addcs	r4, r4, r3
   3525e:	3c01      	subs	r4, #1
   35260:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   35262:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   35264:	42bc      	cmp	r4, r7
   35266:	bf28      	it	cs
   35268:	463c      	movcs	r4, r7
   3526a:	4294      	cmp	r4, r2
   3526c:	bf28      	it	cs
   3526e:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   35270:	6870      	ldr	r0, [r6, #4]
   35272:	4649      	mov	r1, r9
   35274:	4428      	add	r0, r5
   35276:	4622      	mov	r2, r4
   35278:	f002 f8c3 	bl	37402 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   3527c:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   3527e:	4425      	add	r5, r4
      WrOff = 0u;
   35280:	42ab      	cmp	r3, r5
   35282:	bf08      	it	eq
   35284:	2500      	moveq	r5, #0
  } while (NumBytes);
   35286:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   35288:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   3528a:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   3528c:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   3528e:	d1e1      	bne.n	35254 <_WriteBlocking+0x10>
}
   35290:	4640      	mov	r0, r8
   35292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00035296 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   35296:	f7ec bb63 	b.w	21960 <_DoInit>

0003529a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   3529a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   3529c:	f7ff fffb 	bl	35296 <SEGGER_RTT_Init>

	return 0;
}
   352a0:	2000      	movs	r0, #0
   352a2:	bd08      	pop	{r3, pc}

000352a4 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   352a4:	2100      	movs	r1, #0
   352a6:	2001      	movs	r0, #1
   352a8:	f7ec bd50 	b.w	21d4c <z_arm_fatal_error>

000352ac <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   352ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   352ae:	f383 880b 	msr	PSPLIM, r3
}
   352b2:	4770      	bx	lr

000352b4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   352b4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   352b6:	6800      	ldr	r0, [r0, #0]
   352b8:	f7ec bd48 	b.w	21d4c <z_arm_fatal_error>

000352bc <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   352bc:	b508      	push	{r3, lr}
	handler();
   352be:	f7ec fdb9 	bl	21e34 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   352c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   352c6:	f7ed b85d 	b.w	22384 <z_arm_exc_exit>

000352ca <mpu_configure_region>:
{
   352ca:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   352cc:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   352ce:	680c      	ldr	r4, [r1, #0]
{
   352d0:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   352d2:	890a      	ldrh	r2, [r1, #8]
   352d4:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   352d6:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   352d8:	3b01      	subs	r3, #1
   352da:	f024 041f 	bic.w	r4, r4, #31
   352de:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   352e0:	f002 021f 	and.w	r2, r2, #31
   352e4:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   352e8:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   352ec:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   352ee:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   352f2:	9303      	str	r3, [sp, #12]
   352f4:	f7ed f912 	bl	2251c <region_allocate_and_init>
}
   352f8:	b005      	add	sp, #20
   352fa:	bd30      	pop	{r4, r5, pc}

000352fc <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   352fc:	e840 f000 	tt	r0, r0
   35300:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   35302:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   35306:	bf14      	ite	ne
   35308:	4618      	movne	r0, r3
   3530a:	f06f 0015 	mvneq.w	r0, #21
   3530e:	4770      	bx	lr

00035310 <_stdout_hook_default>:
}
   35310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35314:	4770      	bx	lr

00035316 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   35316:	f7fc b8c3 	b.w	314a0 <z_impl_z_errno>

0003531a <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   3531a:	b508      	push	{r3, lr}
	net_if_init();
   3531c:	f7ed fade 	bl	228dc <net_if_init>
	net_if_post_init();
   35320:	f7ed faf2 	bl	22908 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   35324:	2000      	movs	r0, #0
   35326:	bd08      	pop	{r3, pc}

00035328 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   35328:	b110      	cbz	r0, 35330 <net_if_l2+0x8>
   3532a:	6800      	ldr	r0, [r0, #0]
   3532c:	b100      	cbz	r0, 35330 <net_if_l2+0x8>
	return iface->if_dev->l2;
   3532e:	6840      	ldr	r0, [r0, #4]
}
   35330:	4770      	bx	lr

00035332 <l2_flags_get>:
{
   35332:	b510      	push	{r4, lr}
   35334:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   35336:	f7ff fff7 	bl	35328 <net_if_l2>
   3533a:	b128      	cbz	r0, 35348 <l2_flags_get+0x16>
   3533c:	68c2      	ldr	r2, [r0, #12]
   3533e:	b11a      	cbz	r2, 35348 <l2_flags_get+0x16>
}
   35340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   35344:	4618      	mov	r0, r3
   35346:	4710      	bx	r2
}
   35348:	2000      	movs	r0, #0
   3534a:	bd10      	pop	{r4, pc}

0003534c <net_if_up>:
{
   3534c:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3534e:	6803      	ldr	r3, [r0, #0]
   35350:	4604      	mov	r4, r0
   35352:	330c      	adds	r3, #12
   35354:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   35358:	f013 0301 	ands.w	r3, r3, #1
   3535c:	d10b      	bne.n	35376 <net_if_up+0x2a>
	     net_if_is_socket_offloaded(iface))) {
   3535e:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   35360:	7e91      	ldrb	r1, [r2, #26]
   35362:	b151      	cbz	r1, 3537a <net_if_up+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   35364:	320c      	adds	r2, #12
   35366:	e8d2 1fef 	ldaex	r1, [r2]
   3536a:	f041 0101 	orr.w	r1, r1, #1
   3536e:	e8c2 1fe0 	stlex	r0, r1, [r2]
   35372:	2800      	cmp	r0, #0
   35374:	d1f7      	bne.n	35366 <net_if_up+0x1a>
		return 0;
   35376:	2000      	movs	r0, #0
   35378:	e018      	b.n	353ac <net_if_up+0x60>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   3537a:	f7ff ffd5 	bl	35328 <net_if_l2>
   3537e:	b968      	cbnz	r0, 3539c <net_if_up+0x50>
   35380:	6823      	ldr	r3, [r4, #0]
   35382:	330c      	adds	r3, #12
   35384:	e8d3 2fef 	ldaex	r2, [r3]
   35388:	f042 0201 	orr.w	r2, r2, #1
   3538c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   35390:	2900      	cmp	r1, #0
   35392:	d1f7      	bne.n	35384 <net_if_up+0x38>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   35394:	4620      	mov	r0, r4
   35396:	f7ff ffcc 	bl	35332 <l2_flags_get>
   3539a:	e7ec      	b.n	35376 <net_if_up+0x2a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   3539c:	6883      	ldr	r3, [r0, #8]
   3539e:	2b00      	cmp	r3, #0
   353a0:	d0ee      	beq.n	35380 <net_if_up+0x34>
	status = net_if_l2(iface)->enable(iface, true);
   353a2:	2101      	movs	r1, #1
   353a4:	4620      	mov	r0, r4
   353a6:	4798      	blx	r3
	if (status < 0) {
   353a8:	2800      	cmp	r0, #0
   353aa:	dae9      	bge.n	35380 <net_if_up+0x34>
}
   353ac:	bd10      	pop	{r4, pc}

000353ae <net_byte_to_hex>:
{
   353ae:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   353b0:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   353b2:	b1bb      	cbz	r3, 353e4 <net_byte_to_hex+0x36>
		if (val < 10) {
   353b4:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   353b6:	b26b      	sxtb	r3, r5
   353b8:	bf86      	itte	hi
   353ba:	f1a2 050a 	subhi.w	r5, r2, #10
   353be:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   353c0:	3330      	addls	r3, #48	; 0x30
   353c2:	1c44      	adds	r4, r0, #1
   353c4:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   353c6:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   353ca:	4619      	mov	r1, r3
   353cc:	2b09      	cmp	r3, #9
	*ptr = '\0';
   353ce:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   353d2:	bf83      	ittte	hi
   353d4:	3a0a      	subhi	r2, #10
   353d6:	1889      	addhi	r1, r1, r2
   353d8:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   353da:	3130      	addls	r1, #48	; 0x30
   353dc:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   353de:	7063      	strb	r3, [r4, #1]
   353e0:	1c60      	adds	r0, r4, #1
}
   353e2:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   353e4:	2d00      	cmp	r5, #0
   353e6:	d1e5      	bne.n	353b4 <net_byte_to_hex+0x6>
   353e8:	4604      	mov	r4, r0
   353ea:	e7ec      	b.n	353c6 <net_byte_to_hex+0x18>

000353ec <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   353ec:	2801      	cmp	r0, #1
{
   353ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   353f2:	460c      	mov	r4, r1
   353f4:	4616      	mov	r6, r2
	if (family == AF_INET) {
   353f6:	d126      	bne.n	35446 <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   353f8:	4608      	mov	r0, r1
   353fa:	f7e3 fe39 	bl	19070 <strlen>
		for (i = 0; i < len; i++) {
   353fe:	4623      	mov	r3, r4
   35400:	4420      	add	r0, r4
   35402:	4298      	cmp	r0, r3
   35404:	d112      	bne.n	3542c <z_impl_net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
   35406:	4635      	mov	r5, r6
   35408:	2300      	movs	r3, #0
   3540a:	3603      	adds	r6, #3
   3540c:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   35410:	4620      	mov	r0, r4
   35412:	220a      	movs	r2, #10
   35414:	a901      	add	r1, sp, #4
   35416:	f7fe f819 	bl	3344c <strtol>

			src = ++endptr;
   3541a:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   3541c:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   35420:	42ae      	cmp	r6, r5
			src = ++endptr;
   35422:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   35426:	d1f3      	bne.n	35410 <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   35428:	2000      	movs	r0, #0
   3542a:	e009      	b.n	35440 <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3542c:	f813 2b01 	ldrb.w	r2, [r3], #1
   35430:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   35434:	2909      	cmp	r1, #9
   35436:	d9e4      	bls.n	35402 <z_impl_net_addr_pton+0x16>
   35438:	2a2e      	cmp	r2, #46	; 0x2e
   3543a:	d0e2      	beq.n	35402 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   3543c:	f06f 0015 	mvn.w	r0, #21
}
   35440:	b003      	add	sp, #12
   35442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   35446:	2802      	cmp	r0, #2
   35448:	d1f8      	bne.n	3543c <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   3544a:	212e      	movs	r1, #46	; 0x2e
   3544c:	4620      	mov	r0, r4
   3544e:	f002 f92a 	bl	376a6 <strchr>
		if (*src == ':') {
   35452:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   35454:	2800      	cmp	r0, #0
   35456:	bf14      	ite	ne
   35458:	2706      	movne	r7, #6
   3545a:	2708      	moveq	r7, #8
		if (*src == ':') {
   3545c:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   3545e:	bf08      	it	eq
   35460:	3401      	addeq	r4, #1
		len = strlen(src);
   35462:	4620      	mov	r0, r4
   35464:	f7e3 fe04 	bl	19070 <strlen>
		for (i = 0; i < len; i++) {
   35468:	2300      	movs	r3, #0
   3546a:	4283      	cmp	r3, r0
   3546c:	db21      	blt.n	354b2 <z_impl_net_addr_pton+0xc6>
		for (i = 0; i < expected_groups; i++) {
   3546e:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   35470:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   35472:	2c00      	cmp	r4, #0
   35474:	d0e2      	beq.n	3543c <z_impl_net_addr_pton+0x50>
   35476:	7823      	ldrb	r3, [r4, #0]
   35478:	2b00      	cmp	r3, #0
   3547a:	d0df      	beq.n	3543c <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
   3547c:	2b3a      	cmp	r3, #58	; 0x3a
   3547e:	d02d      	beq.n	354dc <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   35480:	2210      	movs	r2, #16
   35482:	2100      	movs	r1, #0
   35484:	4620      	mov	r0, r4
   35486:	f7fd ffe1 	bl	3344c <strtol>
   3548a:	2210      	movs	r2, #16
   3548c:	4681      	mov	r9, r0
   3548e:	2100      	movs	r1, #0
   35490:	4620      	mov	r0, r4
   35492:	f7fd ffdb 	bl	3344c <strtol>
   35496:	f3c9 2907 	ubfx	r9, r9, #8, #8
   3549a:	ea49 2000 	orr.w	r0, r9, r0, lsl #8
   3549e:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
				src = strchr(src, ':');
   354a2:	213a      	movs	r1, #58	; 0x3a
   354a4:	4620      	mov	r0, r4
   354a6:	f002 f8fe 	bl	376a6 <strchr>
				if (src) {
   354aa:	4604      	mov	r4, r0
   354ac:	b178      	cbz	r0, 354ce <z_impl_net_addr_pton+0xe2>
			src++;
   354ae:	3401      	adds	r4, #1
   354b0:	e010      	b.n	354d4 <z_impl_net_addr_pton+0xe8>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   354b2:	5ce2      	ldrb	r2, [r4, r3]
   354b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   354b8:	290a      	cmp	r1, #10
   354ba:	d906      	bls.n	354ca <z_impl_net_addr_pton+0xde>
   354bc:	f022 0120 	bic.w	r1, r2, #32
   354c0:	3941      	subs	r1, #65	; 0x41
   354c2:	2905      	cmp	r1, #5
   354c4:	d901      	bls.n	354ca <z_impl_net_addr_pton+0xde>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   354c6:	2a2e      	cmp	r2, #46	; 0x2e
   354c8:	d1b8      	bne.n	3543c <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   354ca:	3301      	adds	r3, #1
   354cc:	e7cd      	b.n	3546a <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
   354ce:	1e7b      	subs	r3, r7, #1
   354d0:	42ab      	cmp	r3, r5
   354d2:	dcb3      	bgt.n	3543c <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   354d4:	3501      	adds	r5, #1
   354d6:	42af      	cmp	r7, r5
   354d8:	dccb      	bgt.n	35472 <z_impl_net_addr_pton+0x86>
   354da:	e013      	b.n	35504 <z_impl_net_addr_pton+0x118>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   354dc:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   354e0:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
   354e4:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   354e8:	3501      	adds	r5, #1
   354ea:	42af      	cmp	r7, r5
   354ec:	dcf6      	bgt.n	354dc <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
   354ee:	213a      	movs	r1, #58	; 0x3a
   354f0:	4620      	mov	r0, r4
   354f2:	f002 f925 	bl	37740 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   354f6:	42a0      	cmp	r0, r4
   354f8:	d11f      	bne.n	3553a <z_impl_net_addr_pton+0x14e>
   354fa:	2f06      	cmp	r7, #6
   354fc:	d001      	beq.n	35502 <z_impl_net_addr_pton+0x116>
   354fe:	7863      	ldrb	r3, [r4, #1]
   35500:	bb63      	cbnz	r3, 3555c <z_impl_net_addr_pton+0x170>
				src++;
   35502:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   35504:	2f06      	cmp	r7, #6
   35506:	d18f      	bne.n	35428 <z_impl_net_addr_pton+0x3c>
			for (i = 0; i < 4; i++) {
   35508:	2500      	movs	r5, #0
   3550a:	360c      	adds	r6, #12
				if (!src || !*src) {
   3550c:	2c00      	cmp	r4, #0
   3550e:	d095      	beq.n	3543c <z_impl_net_addr_pton+0x50>
   35510:	7823      	ldrb	r3, [r4, #0]
   35512:	2b00      	cmp	r3, #0
   35514:	d092      	beq.n	3543c <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   35516:	220a      	movs	r2, #10
   35518:	2100      	movs	r1, #0
   3551a:	4620      	mov	r0, r4
   3551c:	f7fd ff96 	bl	3344c <strtol>
				src = strchr(src, '.');
   35520:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   35522:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   35526:	4620      	mov	r0, r4
   35528:	f002 f8bd 	bl	376a6 <strchr>
				if (src) {
   3552c:	4604      	mov	r4, r0
   3552e:	b1b8      	cbz	r0, 35560 <z_impl_net_addr_pton+0x174>
					src++;
   35530:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   35532:	3501      	adds	r5, #1
   35534:	2d04      	cmp	r5, #4
   35536:	d1e9      	bne.n	3550c <z_impl_net_addr_pton+0x120>
   35538:	e776      	b.n	35428 <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
   3553a:	2f06      	cmp	r7, #6
   3553c:	d100      	bne.n	35540 <z_impl_net_addr_pton+0x154>
				tmp--;
   3553e:	3801      	subs	r0, #1
			i = expected_groups - 1;
   35540:	1e7d      	subs	r5, r7, #1
   35542:	3001      	adds	r0, #1
				if (*tmp == ':') {
   35544:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   35548:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   3554a:	bf08      	it	eq
   3554c:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   35550:	2d00      	cmp	r5, #0
   35552:	f6ff af73 	blt.w	3543c <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
   35556:	42a0      	cmp	r0, r4
   35558:	d1f4      	bne.n	35544 <z_impl_net_addr_pton+0x158>
   3555a:	e7a8      	b.n	354ae <z_impl_net_addr_pton+0xc2>
   3555c:	4620      	mov	r0, r4
   3555e:	e7ef      	b.n	35540 <z_impl_net_addr_pton+0x154>
					if (i < 3) {
   35560:	2d03      	cmp	r5, #3
   35562:	f47f af6b 	bne.w	3543c <z_impl_net_addr_pton+0x50>
   35566:	e7e4      	b.n	35532 <z_impl_net_addr_pton+0x146>

00035568 <cb_notify>:
{
   35568:	b570      	push	{r4, r5, r6, lr}
   3556a:	4604      	mov	r4, r0
   3556c:	460d      	mov	r5, r1
   3556e:	461e      	mov	r6, r3
	if (cb == NULL) {
   35570:	b90a      	cbnz	r2, 35576 <cb_notify+0xe>
		return 0;
   35572:	2000      	movs	r0, #0
}
   35574:	bd70      	pop	{r4, r5, r6, pc}
	parser->state = *current_state;
   35576:	6803      	ldr	r3, [r0, #0]
   35578:	7809      	ldrb	r1, [r1, #0]
   3557a:	f361 2390 	bfi	r3, r1, #10, #7
   3557e:	6003      	str	r3, [r0, #0]
	if (UNLIKELY(cb(parser) != 0)) {
   35580:	4790      	blx	r2
   35582:	b118      	cbz	r0, 3558c <cb_notify+0x24>
		SET_ERRNO(cb_error);
   35584:	7de3      	ldrb	r3, [r4, #23]
   35586:	f366 0306 	bfi	r3, r6, #0, #7
   3558a:	75e3      	strb	r3, [r4, #23]
	*current_state = parser->state;
   3558c:	6823      	ldr	r3, [r4, #0]
   3558e:	f3c3 2386 	ubfx	r3, r3, #10, #7
   35592:	702b      	strb	r3, [r5, #0]
	if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {
   35594:	7de3      	ldrb	r3, [r4, #23]
   35596:	065b      	lsls	r3, r3, #25
   35598:	d0eb      	beq.n	35572 <cb_notify+0xa>
		*parsed = already_parsed;
   3559a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   3559e:	601a      	str	r2, [r3, #0]
		return -HTTP_PARSER_ERRNO(parser);
   355a0:	7de0      	ldrb	r0, [r4, #23]
   355a2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   355a6:	4240      	negs	r0, r0
   355a8:	e7e4      	b.n	35574 <cb_notify+0xc>

000355aa <cb_data>:
{
   355aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   355ae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   355b2:	4605      	mov	r5, r0
	if (*mark == NULL) {
   355b4:	f8d8 4000 	ldr.w	r4, [r8]
{
   355b8:	460f      	mov	r7, r1
   355ba:	4691      	mov	r9, r2
   355bc:	461e      	mov	r6, r3
	if (*mark == NULL) {
   355be:	b314      	cbz	r4, 35606 <cb_data+0x5c>
	if (cb == NULL) {
   355c0:	b1e9      	cbz	r1, 355fe <cb_data+0x54>
	parser->state = *current_state;
   355c2:	7832      	ldrb	r2, [r6, #0]
   355c4:	6803      	ldr	r3, [r0, #0]
   355c6:	f362 2390 	bfi	r3, r2, #10, #7
   355ca:	6003      	str	r3, [r0, #0]
	rc = cb(parser, *mark, len);
   355cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   355ce:	f8d8 1000 	ldr.w	r1, [r8]
   355d2:	47b8      	blx	r7
	if (UNLIKELY(rc != 0)) {
   355d4:	b118      	cbz	r0, 355de <cb_data+0x34>
		SET_ERRNO(cb_error);
   355d6:	7deb      	ldrb	r3, [r5, #23]
   355d8:	f369 0306 	bfi	r3, r9, #0, #7
   355dc:	75eb      	strb	r3, [r5, #23]
	*current_state = parser->state;
   355de:	682b      	ldr	r3, [r5, #0]
   355e0:	f3c3 2386 	ubfx	r3, r3, #10, #7
   355e4:	7033      	strb	r3, [r6, #0]
	if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {
   355e6:	7deb      	ldrb	r3, [r5, #23]
   355e8:	065b      	lsls	r3, r3, #25
   355ea:	d008      	beq.n	355fe <cb_data+0x54>
		*parsed = already_parsed;
   355ec:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   355f0:	601a      	str	r2, [r3, #0]
		return -HTTP_PARSER_ERRNO(parser);
   355f2:	7de8      	ldrb	r0, [r5, #23]
   355f4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   355f8:	4240      	negs	r0, r0
}
   355fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*mark = NULL;
   355fe:	2000      	movs	r0, #0
   35600:	f8c8 0000 	str.w	r0, [r8]
	return 0;
   35604:	e7f9      	b.n	355fa <cb_data+0x50>
		return 0;
   35606:	4620      	mov	r0, r4
   35608:	e7f7      	b.n	355fa <cb_data+0x50>

0003560a <http_message_needs_eof>:
	if (parser->type == HTTP_REQUEST) {
   3560a:	7803      	ldrb	r3, [r0, #0]
   3560c:	f013 0303 	ands.w	r3, r3, #3
   35610:	d016      	beq.n	35640 <http_message_needs_eof+0x36>
	if (parser->status_code / 100 == 1U || /* 1xx e.g. Continue */
   35612:	8a83      	ldrh	r3, [r0, #20]
   35614:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
   35618:	2a63      	cmp	r2, #99	; 0x63
   3561a:	d911      	bls.n	35640 <http_message_needs_eof+0x36>
   3561c:	2bcc      	cmp	r3, #204	; 0xcc
   3561e:	d00f      	beq.n	35640 <http_message_needs_eof+0x36>
			parser->status_code == 204U ||     /* No Content */
   35620:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   35624:	d00c      	beq.n	35640 <http_message_needs_eof+0x36>
			parser->flags & F_SKIPBODY) {     /* response to a HEAD
   35626:	8803      	ldrh	r3, [r0, #0]
   35628:	f3c3 0387 	ubfx	r3, r3, #2, #8
	if ((parser->flags & F_CHUNKED) ||
   3562c:	f003 0341 	and.w	r3, r3, #65	; 0x41
   35630:	b933      	cbnz	r3, 35640 <http_message_needs_eof+0x36>
   35632:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   35636:	4018      	ands	r0, r3
   35638:	1c43      	adds	r3, r0, #1
   3563a:	4258      	negs	r0, r3
   3563c:	4158      	adcs	r0, r3
   3563e:	4770      	bx	lr
		return 0;
   35640:	2000      	movs	r0, #0
}
   35642:	4770      	bx	lr

00035644 <http_should_keep_alive>:
{
   35644:	b508      	push	{r3, lr}
	if (parser->http_major > 0 && parser->http_minor > 0) {
   35646:	8a02      	ldrh	r2, [r0, #16]
   35648:	8803      	ldrh	r3, [r0, #0]
   3564a:	f3c3 0387 	ubfx	r3, r3, #2, #8
   3564e:	b12a      	cbz	r2, 3565c <http_should_keep_alive+0x18>
   35650:	8a42      	ldrh	r2, [r0, #18]
   35652:	b11a      	cbz	r2, 3565c <http_should_keep_alive+0x18>
		if (parser->flags & F_CONNECTION_CLOSE) {
   35654:	075b      	lsls	r3, r3, #29
   35656:	d504      	bpl.n	35662 <http_should_keep_alive+0x1e>
			return 0;
   35658:	2000      	movs	r0, #0
   3565a:	e007      	b.n	3566c <http_should_keep_alive+0x28>
		if (!(parser->flags & F_CONNECTION_KEEP_ALIVE)) {
   3565c:	f013 0302 	ands.w	r3, r3, #2
   35660:	d005      	beq.n	3566e <http_should_keep_alive+0x2a>
	return !http_message_needs_eof(parser);
   35662:	f7ff ffd2 	bl	3560a <http_message_needs_eof>
   35666:	fab0 f080 	clz	r0, r0
   3566a:	0940      	lsrs	r0, r0, #5
}
   3566c:	bd08      	pop	{r3, pc}
			return 0;
   3566e:	4618      	mov	r0, r3
   35670:	e7fc      	b.n	3566c <http_should_keep_alive+0x28>

00035672 <http_parser_init>:


void http_parser_init(struct http_parser *parser, enum http_parser_type t)
{
   35672:	b570      	push	{r4, r5, r6, lr}
   35674:	2220      	movs	r2, #32
   35676:	460d      	mov	r5, r1
   35678:	2100      	movs	r1, #0
   3567a:	4604      	mov	r4, r0
	void *data = parser->data; /* preserve application data */
   3567c:	6986      	ldr	r6, [r0, #24]
   3567e:	f001 fee0 	bl	37442 <memset>

	(void)memset(parser, 0, sizeof(*parser));
	parser->data = data;
	parser->type = t;
   35682:	f04f 0300 	mov.w	r3, #0
   35686:	f365 0301 	bfi	r3, r5, #0, #2
	parser->data = data;
   3568a:	61a6      	str	r6, [r4, #24]
	parser->type = t;
   3568c:	7023      	strb	r3, [r4, #0]
	parser->state =
		(t == HTTP_REQUEST ? s_start_req :
   3568e:	b165      	cbz	r5, 356aa <http_parser_init+0x38>
   35690:	2d01      	cmp	r5, #1
   35692:	bf0c      	ite	eq
   35694:	2204      	moveq	r2, #4
   35696:	2202      	movne	r2, #2
	parser->state =
   35698:	6823      	ldr	r3, [r4, #0]
   3569a:	f362 2390 	bfi	r3, r2, #10, #7
   3569e:	6023      	str	r3, [r4, #0]
		 (t == HTTP_RESPONSE ? s_start_res : s_start_req_or_res));
	parser->http_errno = HPE_OK;
   356a0:	7de3      	ldrb	r3, [r4, #23]
   356a2:	f36f 0306 	bfc	r3, #0, #7
   356a6:	75e3      	strb	r3, [r4, #23]
}
   356a8:	bd70      	pop	{r4, r5, r6, pc}
		(t == HTTP_REQUEST ? s_start_req :
   356aa:	2212      	movs	r2, #18
   356ac:	e7f4      	b.n	35698 <http_parser_init+0x26>

000356ae <http_parser_url_init>:
   356ae:	2220      	movs	r2, #32
   356b0:	2100      	movs	r1, #0
   356b2:	f001 bec6 	b.w	37442 <memset>

000356b6 <on_url>:
{
   356b6:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   356b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
   356ba:	b113      	cbz	r3, 356c2 <on_url+0xc>
	    req->internal.response.http_cb->on_url) {
   356bc:	685b      	ldr	r3, [r3, #4]
	if (req->internal.response.http_cb &&
   356be:	b103      	cbz	r3, 356c2 <on_url+0xc>
		req->internal.response.http_cb->on_url(parser, at, length);
   356c0:	4798      	blx	r3
}
   356c2:	2000      	movs	r0, #0
   356c4:	bd08      	pop	{r3, pc}

000356c6 <on_message_begin>:
{
   356c6:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   356c8:	6c83      	ldr	r3, [r0, #72]	; 0x48
   356ca:	b113      	cbz	r3, 356d2 <on_message_begin+0xc>
	    req->internal.response.http_cb->on_message_begin) {
   356cc:	681b      	ldr	r3, [r3, #0]
	if (req->internal.response.http_cb &&
   356ce:	b103      	cbz	r3, 356d2 <on_message_begin+0xc>
		req->internal.response.http_cb->on_message_begin(parser);
   356d0:	4798      	blx	r3
}
   356d2:	2000      	movs	r0, #0
   356d4:	bd08      	pop	{r3, pc}

000356d6 <on_message_complete>:
	if (req->internal.response.http_cb &&
   356d6:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   356d8:	b510      	push	{r4, lr}
   356da:	4604      	mov	r4, r0
	if (req->internal.response.http_cb &&
   356dc:	b113      	cbz	r3, 356e4 <on_message_complete+0xe>
	    req->internal.response.http_cb->on_message_complete) {
   356de:	69db      	ldr	r3, [r3, #28]
	if (req->internal.response.http_cb &&
   356e0:	b103      	cbz	r3, 356e4 <on_message_complete+0xe>
		req->internal.response.http_cb->on_message_complete(parser);
   356e2:	4798      	blx	r3
	req->internal.response.message_complete = 1;
   356e4:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   356e8:	f043 0304 	orr.w	r3, r3, #4
   356ec:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	if (req->internal.response.cb) {
   356f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   356f2:	b12b      	cbz	r3, 35700 <on_message_complete+0x2a>
		req->internal.response.cb(&req->internal.response,
   356f4:	2101      	movs	r1, #1
   356f6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   356fa:	f104 0048 	add.w	r0, r4, #72	; 0x48
   356fe:	4798      	blx	r3
}
   35700:	2000      	movs	r0, #0
   35702:	bd10      	pop	{r4, pc}

00035704 <on_chunk_header>:
{
   35704:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   35706:	6c83      	ldr	r3, [r0, #72]	; 0x48
   35708:	b113      	cbz	r3, 35710 <on_chunk_header+0xc>
	    req->internal.response.http_cb->on_chunk_header) {
   3570a:	6a1b      	ldr	r3, [r3, #32]
	if (req->internal.response.http_cb &&
   3570c:	b103      	cbz	r3, 35710 <on_chunk_header+0xc>
		req->internal.response.http_cb->on_chunk_header(parser);
   3570e:	4798      	blx	r3
}
   35710:	2000      	movs	r0, #0
   35712:	bd08      	pop	{r3, pc}

00035714 <on_chunk_complete>:
{
   35714:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   35716:	6c83      	ldr	r3, [r0, #72]	; 0x48
   35718:	b113      	cbz	r3, 35720 <on_chunk_complete+0xc>
	    req->internal.response.http_cb->on_chunk_complete) {
   3571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	if (req->internal.response.http_cb &&
   3571c:	b103      	cbz	r3, 35720 <on_chunk_complete+0xc>
		req->internal.response.http_cb->on_chunk_complete(parser);
   3571e:	4798      	blx	r3
}
   35720:	2000      	movs	r0, #0
   35722:	bd08      	pop	{r3, pc}

00035724 <http_timeout>:
	(void)close(data->sock);
   35724:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
   35728:	f7ff baf1 	b.w	34d0e <z_impl_zsock_close>

0003572c <on_header_value>:
{
   3572c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (req->internal.response.cl_present) {
   3572e:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
{
   35732:	4604      	mov	r4, r0
	if (req->internal.response.cl_present) {
   35734:	07db      	lsls	r3, r3, #31
{
   35736:	460e      	mov	r6, r1
   35738:	4615      	mov	r5, r2
	if (req->internal.response.cl_present) {
   3573a:	d51a      	bpl.n	35772 <on_header_value+0x46>
		if (length <= MAX_NUM_DIGITS - 1) {
   3573c:	2a0f      	cmp	r2, #15
   3573e:	d812      	bhi.n	35766 <on_header_value+0x3a>
			memcpy(str, at, length);
   35740:	2310      	movs	r3, #16
   35742:	4668      	mov	r0, sp
   35744:	f001 fe6a 	bl	3741c <__memcpy_chk>
			str[length] = 0;
   35748:	2100      	movs	r1, #0
   3574a:	ab04      	add	r3, sp, #16
   3574c:	442b      	add	r3, r5
			num = strtol(str, NULL, 10);
   3574e:	220a      	movs	r2, #10
   35750:	4668      	mov	r0, sp
			str[length] = 0;
   35752:	f803 1c10 	strb.w	r1, [r3, #-16]
			num = strtol(str, NULL, 10);
   35756:	f7fd fe79 	bl	3344c <strtol>
			if (num == LONG_MIN || num == LONG_MAX) {
   3575a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   3575e:	3b01      	subs	r3, #1
   35760:	3303      	adds	r3, #3
   35762:	d811      	bhi.n	35788 <on_header_value+0x5c>
			req->internal.response.content_length = num;
   35764:	6620      	str	r0, [r4, #96]	; 0x60
		req->internal.response.cl_present = false;
   35766:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   3576a:	f36f 0300 	bfc	r3, #0, #1
   3576e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	if (req->internal.response.http_cb &&
   35772:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   35774:	b130      	cbz	r0, 35784 <on_header_value+0x58>
	    req->internal.response.http_cb->on_header_value) {
   35776:	6903      	ldr	r3, [r0, #16]
	if (req->internal.response.http_cb &&
   35778:	b14b      	cbz	r3, 3578e <on_header_value+0x62>
		req->internal.response.http_cb->on_header_value(parser, at,
   3577a:	462a      	mov	r2, r5
   3577c:	4631      	mov	r1, r6
   3577e:	4620      	mov	r0, r4
   35780:	4798      	blx	r3
	return 0;
   35782:	2000      	movs	r0, #0
}
   35784:	b004      	add	sp, #16
   35786:	bd70      	pop	{r4, r5, r6, pc}
				return -EINVAL;
   35788:	f06f 0015 	mvn.w	r0, #21
   3578c:	e7fa      	b.n	35784 <on_header_value+0x58>
	return 0;
   3578e:	4618      	mov	r0, r3
   35790:	e7f8      	b.n	35784 <on_header_value+0x58>

00035792 <on_headers_complete>:
	if (req->internal.response.http_cb &&
   35792:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   35794:	b510      	push	{r4, lr}
   35796:	4604      	mov	r4, r0
	if (req->internal.response.http_cb &&
   35798:	b113      	cbz	r3, 357a0 <on_headers_complete+0xe>
	    req->internal.response.http_cb->on_headers_complete) {
   3579a:	695b      	ldr	r3, [r3, #20]
	if (req->internal.response.http_cb &&
   3579c:	b103      	cbz	r3, 357a0 <on_headers_complete+0xe>
		req->internal.response.http_cb->on_headers_complete(parser);
   3579e:	4798      	blx	r3
	if (parser->status_code >= 500 && parser->status_code < 600) {
   357a0:	8aa3      	ldrh	r3, [r4, #20]
   357a2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   357a6:	b29b      	uxth	r3, r3
   357a8:	2b63      	cmp	r3, #99	; 0x63
   357aa:	d90a      	bls.n	357c2 <on_headers_complete+0x30>
	if ((req->method == HTTP_HEAD || req->method == HTTP_OPTIONS) &&
   357ac:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   357b0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   357b4:	2b02      	cmp	r3, #2
   357b6:	d106      	bne.n	357c6 <on_headers_complete+0x34>
   357b8:	6e20      	ldr	r0, [r4, #96]	; 0x60
   357ba:	3800      	subs	r0, #0
   357bc:	bf18      	it	ne
   357be:	2001      	movne	r0, #1
}
   357c0:	bd10      	pop	{r4, pc}
		return 1;
   357c2:	2001      	movs	r0, #1
   357c4:	e7fc      	b.n	357c0 <on_headers_complete+0x2e>
	return 0;
   357c6:	2000      	movs	r0, #0
   357c8:	e7fa      	b.n	357c0 <on_headers_complete+0x2e>

000357ca <on_status>:
	len = MIN(length, sizeof(req->internal.response.http_status) - 1);
   357ca:	2a1f      	cmp	r2, #31
{
   357cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	len = MIN(length, sizeof(req->internal.response.http_status) - 1);
   357ce:	4616      	mov	r6, r2
   357d0:	bf28      	it	cs
   357d2:	261f      	movcs	r6, #31
{
   357d4:	4604      	mov	r4, r0
   357d6:	4615      	mov	r5, r2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   357d8:	3068      	adds	r0, #104	; 0x68
   357da:	4632      	mov	r2, r6
   357dc:	460f      	mov	r7, r1
   357de:	f001 fe10 	bl	37402 <memcpy>
	req->internal.response.http_status[len] = 0;
   357e2:	2300      	movs	r3, #0
   357e4:	4426      	add	r6, r4
   357e6:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
	if (req->internal.response.http_cb &&
   357ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   357ec:	b12b      	cbz	r3, 357fa <on_status+0x30>
	    req->internal.response.http_cb->on_status) {
   357ee:	689b      	ldr	r3, [r3, #8]
	if (req->internal.response.http_cb &&
   357f0:	b11b      	cbz	r3, 357fa <on_status+0x30>
		req->internal.response.http_cb->on_status(parser, at, length);
   357f2:	462a      	mov	r2, r5
   357f4:	4639      	mov	r1, r7
   357f6:	4620      	mov	r0, r4
   357f8:	4798      	blx	r3
}
   357fa:	2000      	movs	r0, #0
   357fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000357fe <on_body>:
	req->internal.response.processed += length;
   357fe:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   35800:	b570      	push	{r4, r5, r6, lr}
	req->internal.response.processed += length;
   35802:	4413      	add	r3, r2
	req->internal.response.body_found = 1;
   35804:	f890 6088 	ldrb.w	r6, [r0, #136]	; 0x88
	req->internal.response.processed += length;
   35808:	6643      	str	r3, [r0, #100]	; 0x64
	if (req->internal.response.http_cb &&
   3580a:	6c83      	ldr	r3, [r0, #72]	; 0x48
	req->internal.response.body_found = 1;
   3580c:	f046 0602 	orr.w	r6, r6, #2
{
   35810:	4604      	mov	r4, r0
   35812:	460d      	mov	r5, r1
	req->internal.response.body_found = 1;
   35814:	f880 6088 	strb.w	r6, [r0, #136]	; 0x88
	if (req->internal.response.http_cb &&
   35818:	b113      	cbz	r3, 35820 <on_body+0x22>
	    req->internal.response.http_cb->on_body) {
   3581a:	699b      	ldr	r3, [r3, #24]
	if (req->internal.response.http_cb &&
   3581c:	b103      	cbz	r3, 35820 <on_body+0x22>
		req->internal.response.http_cb->on_body(parser, at, length);
   3581e:	4798      	blx	r3
	if (!req->internal.response.body_start &&
   35820:	6d23      	ldr	r3, [r4, #80]	; 0x50
   35822:	b91b      	cbnz	r3, 3582c <on_body+0x2e>
   35824:	6d63      	ldr	r3, [r4, #84]	; 0x54
   35826:	42ab      	cmp	r3, r5
		req->internal.response.body_start = (uint8_t *)at;
   35828:	bf18      	it	ne
   3582a:	6525      	strne	r5, [r4, #80]	; 0x50
	if (req->internal.response.cb) {
   3582c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   3582e:	b173      	cbz	r3, 3584e <on_body+0x50>
		if (http_should_keep_alive(parser)) {
   35830:	4620      	mov	r0, r4
   35832:	f7ff ff07 	bl	35644 <http_should_keep_alive>
   35836:	4602      	mov	r2, r0
   35838:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   3583a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   3583e:	b142      	cbz	r2, 35852 <on_body+0x54>
			req->internal.response.cb(&req->internal.response,
   35840:	2100      	movs	r1, #0
   35842:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
			req->internal.response.cb(&req->internal.response,
   35846:	4798      	blx	r3
		req->internal.response.data_len = 0;
   35848:	2300      	movs	r3, #0
   3584a:	65e3      	str	r3, [r4, #92]	; 0x5c
		req->internal.response.body_start = NULL;
   3584c:	6523      	str	r3, [r4, #80]	; 0x50
}
   3584e:	2000      	movs	r0, #0
   35850:	bd70      	pop	{r4, r5, r6, pc}
			req->internal.response.cb(&req->internal.response,
   35852:	2101      	movs	r1, #1
   35854:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   35858:	e7f5      	b.n	35846 <on_body+0x48>

0003585a <sendall>:
{
   3585a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3585c:	4606      	mov	r6, r0
   3585e:	460d      	mov	r5, r1
   35860:	4614      	mov	r4, r2
   35862:	2700      	movs	r7, #0
	while (len) {
   35864:	b90c      	cbnz	r4, 3586a <sendall+0x10>
	return 0;
   35866:	4620      	mov	r0, r4
   35868:	e00d      	b.n	35886 <sendall+0x2c>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3586a:	2300      	movs	r3, #0
   3586c:	4622      	mov	r2, r4
   3586e:	4629      	mov	r1, r5
   35870:	4630      	mov	r0, r6
   35872:	e9cd 7700 	strd	r7, r7, [sp]
   35876:	f7ff fab7 	bl	34de8 <z_impl_zsock_sendto>
		if (out_len < 0) {
   3587a:	1e03      	subs	r3, r0, #0
   3587c:	da05      	bge.n	3588a <sendall+0x30>
			return -errno;
   3587e:	f7ff fd4a 	bl	35316 <__errno>
   35882:	6800      	ldr	r0, [r0, #0]
   35884:	4240      	negs	r0, r0
}
   35886:	b003      	add	sp, #12
   35888:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = (const char *)buf + out_len;
   3588a:	441d      	add	r5, r3
		len -= out_len;
   3588c:	1ae4      	subs	r4, r4, r3
   3588e:	e7e9      	b.n	35864 <sendall+0xa>

00035890 <http_send_data.constprop.0>:
static int http_send_data(int sock, char *send_buf,
   35890:	b408      	push	{r3}
   35892:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35896:	4607      	mov	r7, r0
   35898:	460e      	mov	r6, r1
   3589a:	ab0d      	add	r3, sp, #52	; 0x34
   3589c:	f853 8b04 	ldr.w	r8, [r3], #4
	data = va_arg(va, const char *);
   358a0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   358a4:	3304      	adds	r3, #4
	int ret, end_of_send = *send_buf_pos;
   358a6:	f8d8 4000 	ldr.w	r4, [r8]
	data = va_arg(va, const char *);
   358aa:	9303      	str	r3, [sp, #12]
	while (data) {
   358ac:	f1bb 0f00 	cmp.w	fp, #0
   358b0:	d106      	bne.n	358c0 <http_send_data.constprop.0+0x30>
	if (end_of_send > (int)send_buf_max_len) {
   358b2:	2cc0      	cmp	r4, #192	; 0xc0
		return -EMSGSIZE;
   358b4:	bfcc      	ite	gt
   358b6:	f06f 0479 	mvngt.w	r4, #121	; 0x79
	*send_buf_pos = end_of_send;
   358ba:	f8c8 4000 	strle.w	r4, [r8]
	return end_of_send;
   358be:	e01c      	b.n	358fa <http_send_data.constprop.0+0x6a>
		end_of_data = 0;
   358c0:	f04f 0a00 	mov.w	sl, #0
			remaining_len = strlen(data + end_of_data);
   358c4:	eb0b 010a 	add.w	r1, fp, sl
   358c8:	4608      	mov	r0, r1
   358ca:	9101      	str	r1, [sp, #4]
   358cc:	f7e3 fbd0 	bl	19070 <strlen>
   358d0:	4605      	mov	r5, r0
			to_be_copied = send_buf_max_len - end_of_send;
   358d2:	f1c4 09c0 	rsb	r9, r4, #192	; 0xc0
			if (remaining_len > to_be_copied) {
   358d6:	454d      	cmp	r5, r9
   358d8:	9901      	ldr	r1, [sp, #4]
   358da:	eb06 0004 	add.w	r0, r6, r4
   358de:	dd12      	ble.n	35906 <http_send_data.constprop.0+0x76>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   358e0:	464a      	mov	r2, r9
   358e2:	f001 ff07 	bl	376f4 <strncpy>
				ret = sendall(sock, send_buf, end_of_send);
   358e6:	22c0      	movs	r2, #192	; 0xc0
   358e8:	4631      	mov	r1, r6
   358ea:	4638      	mov	r0, r7
   358ec:	f7ff ffb5 	bl	3585a <sendall>
				if (ret < 0) {
   358f0:	1e04      	subs	r4, r0, #0
				end_of_data += to_be_copied;
   358f2:	44ca      	add	sl, r9
				remaining_len -= to_be_copied;
   358f4:	eba5 0509 	sub.w	r5, r5, r9
				if (ret < 0) {
   358f8:	da0f      	bge.n	3591a <http_send_data.constprop.0+0x8a>
}
   358fa:	4620      	mov	r0, r4
   358fc:	b004      	add	sp, #16
   358fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35902:	b001      	add	sp, #4
   35904:	4770      	bx	lr
   35906:	462a      	mov	r2, r5
   35908:	f001 fef4 	bl	376f4 <strncpy>
				end_of_send += remaining_len;
   3590c:	442c      	add	r4, r5
		data = va_arg(va, const char *);
   3590e:	9b03      	ldr	r3, [sp, #12]
   35910:	1d1a      	adds	r2, r3, #4
   35912:	f8d3 b000 	ldr.w	fp, [r3]
   35916:	9203      	str	r2, [sp, #12]
   35918:	e7c8      	b.n	358ac <http_send_data.constprop.0+0x1c>
				end_of_send = 0;
   3591a:	2400      	movs	r4, #0
		} while (remaining_len > 0);
   3591c:	42a5      	cmp	r5, r4
   3591e:	dcd1      	bgt.n	358c4 <http_send_data.constprop.0+0x34>
   35920:	e7f5      	b.n	3590e <http_send_data.constprop.0+0x7e>

00035922 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   35922:	6843      	ldr	r3, [r0, #4]
}
   35924:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   35926:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   35928:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3592a:	600b      	str	r3, [r1, #0]
}
   3592c:	4770      	bx	lr

0003592e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3592e:	6843      	ldr	r3, [r0, #4]
   35930:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   35932:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   35934:	4042      	eors	r2, r0
   35936:	400a      	ands	r2, r1
   35938:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3593a:	605a      	str	r2, [r3, #4]
}
   3593c:	2000      	movs	r0, #0
   3593e:	4770      	bx	lr

00035940 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   35940:	6843      	ldr	r3, [r0, #4]
}
   35942:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   35944:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   35946:	6099      	str	r1, [r3, #8]
}
   35948:	4770      	bx	lr

0003594a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3594a:	6843      	ldr	r3, [r0, #4]
}
   3594c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3594e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   35950:	60d9      	str	r1, [r3, #12]
}
   35952:	4770      	bx	lr

00035954 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   35954:	6843      	ldr	r3, [r0, #4]
}
   35956:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   35958:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3595a:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3595c:	4059      	eors	r1, r3
    p_reg->OUT = value;
   3595e:	6051      	str	r1, [r2, #4]
}
   35960:	4770      	bx	lr

00035962 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   35962:	68c3      	ldr	r3, [r0, #12]
{
   35964:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   35966:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   35968:	b158      	cbz	r0, 35982 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3596a:	2400      	movs	r4, #0
   3596c:	4281      	cmp	r1, r0
   3596e:	d113      	bne.n	35998 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   35970:	6808      	ldr	r0, [r1, #0]
   35972:	b95c      	cbnz	r4, 3598c <gpio_nrfx_manage_callback+0x2a>
   35974:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   35976:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   35978:	42a1      	cmp	r1, r4
   3597a:	d100      	bne.n	3597e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   3597c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   3597e:	2000      	movs	r0, #0
   35980:	6008      	str	r0, [r1, #0]
	if (set) {
   35982:	b972      	cbnz	r2, 359a2 <gpio_nrfx_manage_callback+0x40>
	return 0;
   35984:	2000      	movs	r0, #0
}
   35986:	bd30      	pop	{r4, r5, pc}
   35988:	4628      	mov	r0, r5
   3598a:	e7ef      	b.n	3596c <gpio_nrfx_manage_callback+0xa>
   3598c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   3598e:	6898      	ldr	r0, [r3, #8]
   35990:	4281      	cmp	r1, r0
	list->tail = node;
   35992:	bf08      	it	eq
   35994:	609c      	streq	r4, [r3, #8]
}
   35996:	e7f2      	b.n	3597e <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   35998:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3599a:	4604      	mov	r4, r0
   3599c:	2d00      	cmp	r5, #0
   3599e:	d1f3      	bne.n	35988 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   359a0:	b13a      	cbz	r2, 359b2 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   359a2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   359a4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   359a6:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   359a8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   359aa:	2800      	cmp	r0, #0
   359ac:	d1ea      	bne.n	35984 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   359ae:	6099      	str	r1, [r3, #8]
}
   359b0:	e7e9      	b.n	35986 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   359b2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   359b6:	e7e6      	b.n	35986 <gpio_nrfx_manage_callback+0x24>

000359b8 <flash_nrf_write_protection>:
}
   359b8:	2000      	movs	r0, #0
   359ba:	4770      	bx	lr

000359bc <is_regular_addr_valid>:
{
   359bc:	b538      	push	{r3, r4, r5, lr}
   359be:	4604      	mov	r4, r0
   359c0:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   359c2:	f000 fff3 	bl	369ac <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   359c6:	4284      	cmp	r4, r0
   359c8:	d209      	bcs.n	359de <is_regular_addr_valid+0x22>
   359ca:	2c00      	cmp	r4, #0
   359cc:	db07      	blt.n	359de <is_regular_addr_valid+0x22>
	    addr < 0 ||
   359ce:	42a8      	cmp	r0, r5
   359d0:	d305      	bcc.n	359de <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   359d2:	1961      	adds	r1, r4, r5
	    len > flash_size ||
   359d4:	4281      	cmp	r1, r0
   359d6:	bf8c      	ite	hi
   359d8:	2000      	movhi	r0, #0
   359da:	2001      	movls	r0, #1
}
   359dc:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   359de:	2000      	movs	r0, #0
   359e0:	e7fc      	b.n	359dc <is_regular_addr_valid+0x20>

000359e2 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   359e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   359e6:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   359e8:	6883      	ldr	r3, [r0, #8]
{
   359ea:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   359ec:	695b      	ldr	r3, [r3, #20]
   359ee:	4669      	mov	r1, sp
{
   359f0:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   359f2:	aa01      	add	r2, sp, #4
   359f4:	4798      	blx	r3

	while (layout_size--) {
   359f6:	e9dd 1000 	ldrd	r1, r0, [sp]
   359fa:	2300      	movs	r3, #0
	off_t end = 0;
   359fc:	461d      	mov	r5, r3
	off_t group_offs = 0;
   359fe:	469e      	mov	lr, r3
	size_t page_count = 0;
   35a00:	469c      	mov	ip, r3
   35a02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	while (layout_size--) {
   35a06:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   35a0a:	d102      	bne.n	35a12 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   35a0c:	f06f 0015 	mvn.w	r0, #21
   35a10:	e018      	b.n	35a44 <flash_get_page_info+0x62>
		if (use_addr) {
   35a12:	680a      	ldr	r2, [r1, #0]
   35a14:	b1cf      	cbz	r7, 35a4a <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   35a16:	6848      	ldr	r0, [r1, #4]
   35a18:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   35a1c:	42a5      	cmp	r5, r4
   35a1e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   35a22:	dd17      	ble.n	35a54 <flash_get_page_info+0x72>
   35a24:	b103      	cbz	r3, 35a28 <flash_get_page_info+0x46>
   35a26:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   35a28:	9b00      	ldr	r3, [sp, #0]
   35a2a:	685b      	ldr	r3, [r3, #4]
   35a2c:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   35a2e:	b177      	cbz	r7, 35a4e <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   35a30:	eba4 040e 	sub.w	r4, r4, lr
   35a34:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   35a38:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   35a3a:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   35a3e:	4464      	add	r4, ip
			info->start_offset = group_offs +
   35a40:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   35a42:	60b4      	str	r4, [r6, #8]
}
   35a44:	b002      	add	sp, #8
   35a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   35a4a:	4415      	add	r5, r2
   35a4c:	e7e6      	b.n	35a1c <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   35a4e:	eba4 040c 	sub.w	r4, r4, ip
   35a52:	e7f1      	b.n	35a38 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   35a54:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   35a56:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   35a58:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   35a5c:	3108      	adds	r1, #8
   35a5e:	2301      	movs	r3, #1
   35a60:	e7d1      	b.n	35a06 <flash_get_page_info+0x24>

00035a62 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   35a62:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   35a64:	2201      	movs	r2, #1
   35a66:	f7ff bfbc 	b.w	359e2 <flash_get_page_info>

00035a6a <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   35a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   35a6e:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   35a70:	6883      	ldr	r3, [r0, #8]
{
   35a72:	b086      	sub	sp, #24
   35a74:	4688      	mov	r8, r1
   35a76:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   35a78:	695b      	ldr	r3, [r3, #20]
   35a7a:	aa02      	add	r2, sp, #8
   35a7c:	a901      	add	r1, sp, #4
   35a7e:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   35a80:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   35a82:	4625      	mov	r5, r4
   35a84:	9b02      	ldr	r3, [sp, #8]
   35a86:	42ab      	cmp	r3, r5
   35a88:	d802      	bhi.n	35a90 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   35a8a:	b006      	add	sp, #24
   35a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   35a90:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   35a92:	9f01      	ldr	r7, [sp, #4]
   35a94:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   35a98:	687b      	ldr	r3, [r7, #4]
   35a9a:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   35a9c:	683a      	ldr	r2, [r7, #0]
   35a9e:	eb0a 0306 	add.w	r3, sl, r6
   35aa2:	42b2      	cmp	r2, r6
   35aa4:	d802      	bhi.n	35aac <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   35aa6:	469a      	mov	sl, r3
   35aa8:	3501      	adds	r5, #1
   35aaa:	e7eb      	b.n	35a84 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   35aac:	4649      	mov	r1, r9
   35aae:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   35ab0:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   35ab2:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   35ab4:	47c0      	blx	r8
   35ab6:	2800      	cmp	r0, #0
   35ab8:	d0e7      	beq.n	35a8a <flash_page_foreach+0x20>
			off += page_info.size;
   35aba:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   35abc:	3601      	adds	r6, #1
			off += page_info.size;
   35abe:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   35ac0:	e7ec      	b.n	35a9c <flash_page_foreach+0x32>

00035ac2 <uarte_nrfx_config_get>:
{
   35ac2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   35ac4:	68c2      	ldr	r2, [r0, #12]
   35ac6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   35aca:	e883 0003 	stmia.w	r3, {r0, r1}
}
   35ace:	2000      	movs	r0, #0
   35ad0:	4770      	bx	lr

00035ad2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   35ad2:	6843      	ldr	r3, [r0, #4]
   35ad4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   35ad6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   35ada:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   35ade:	4770      	bx	lr

00035ae0 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   35ae0:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   35ae2:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   35ae4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   35ae8:	b938      	cbnz	r0, 35afa <is_tx_ready+0x1a>
   35aea:	7992      	ldrb	r2, [r2, #6]
   35aec:	b932      	cbnz	r2, 35afc <is_tx_ready+0x1c>
   35aee:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   35af2:	3800      	subs	r0, #0
   35af4:	bf18      	it	ne
   35af6:	2001      	movne	r0, #1
   35af8:	4770      	bx	lr
   35afa:	2001      	movs	r0, #1
}
   35afc:	4770      	bx	lr

00035afe <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   35afe:	4770      	bx	lr

00035b00 <uarte_nrfx_rx_enable>:
{
   35b00:	b530      	push	{r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   35b02:	68c5      	ldr	r5, [r0, #12]
	return config->uarte_regs;
   35b04:	6840      	ldr	r0, [r0, #4]
   35b06:	6804      	ldr	r4, [r0, #0]
    return p_reg->PSEL.RXD;
   35b08:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   35b0c:	3001      	adds	r0, #1
   35b0e:	d022      	beq.n	35b56 <uarte_nrfx_rx_enable+0x56>
		MAX(timeout / RX_TIMEOUT_DIV,
   35b10:	2b09      	cmp	r3, #9
   35b12:	bfc8      	it	gt
   35b14:	2005      	movgt	r0, #5
	data->async->rx_timeout = timeout;
   35b16:	68ed      	ldr	r5, [r5, #12]
   35b18:	66eb      	str	r3, [r5, #108]	; 0x6c
		MAX(timeout / RX_TIMEOUT_DIV,
   35b1a:	bfc8      	it	gt
   35b1c:	fb93 f3f0 	sdivgt	r3, r3, r0
	data->async->rx_offset = 0;
   35b20:	f04f 0000 	mov.w	r0, #0
		MAX(timeout / RX_TIMEOUT_DIV,
   35b24:	bfd8      	it	le
   35b26:	2301      	movle	r3, #1
	data->async->rx_buf_len = len;
   35b28:	e9c5 1214 	strd	r1, r2, [r5, #80]	; 0x50
	data->async->rx_next_buf = NULL;
   35b2c:	e9c5 0016 	strd	r0, r0, [r5, #88]	; 0x58
	data->async->rx_timeout_slab =
   35b30:	672b      	str	r3, [r5, #112]	; 0x70
	data->async->rx_next_buf_len = 0;
   35b32:	6628      	str	r0, [r5, #96]	; 0x60
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   35b34:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   35b38:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   35b3c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   35b40:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   35b44:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
   35b48:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	data->async->rx_enabled = true;
   35b4c:	2301      	movs	r3, #1
   35b4e:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   35b52:	6023      	str	r3, [r4, #0]
}
   35b54:	bd30      	pop	{r4, r5, pc}
		return -ENOTSUP;
   35b56:	f06f 0085 	mvn.w	r0, #133	; 0x85
   35b5a:	e7fb      	b.n	35b54 <uarte_nrfx_rx_enable+0x54>

00035b5c <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   35b5c:	6843      	ldr	r3, [r0, #4]
{
   35b5e:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   35b60:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   35b62:	68c4      	ldr	r4, [r0, #12]
	__asm__ volatile(
   35b64:	f04f 0020 	mov.w	r0, #32
   35b68:	f3ef 8511 	mrs	r5, BASEPRI
   35b6c:	f380 8811 	msr	BASEPRI, r0
   35b70:	f3bf 8f6f 	isb	sy
	if ((data->async->rx_buf == NULL)) {
   35b74:	68e4      	ldr	r4, [r4, #12]
   35b76:	6d20      	ldr	r0, [r4, #80]	; 0x50
   35b78:	b190      	cbz	r0, 35ba0 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   35b7a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   35b7c:	b998      	cbnz	r0, 35ba6 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   35b7e:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   35b82:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   35b86:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   35b8a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   35b8e:	f042 0220 	orr.w	r2, r2, #32
   35b92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   35b96:	f385 8811 	msr	BASEPRI, r5
   35b9a:	f3bf 8f6f 	isb	sy
}
   35b9e:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   35ba0:	f06f 000c 	mvn.w	r0, #12
   35ba4:	e7f7      	b.n	35b96 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   35ba6:	f06f 000f 	mvn.w	r0, #15
   35baa:	e7f4      	b.n	35b96 <uarte_nrfx_rx_buf_rsp+0x3a>

00035bac <uarte_nrfx_callback_set>:
	data->async->user_callback = callback;
   35bac:	68c3      	ldr	r3, [r0, #12]
}
   35bae:	2000      	movs	r0, #0
	data->async->user_callback = callback;
   35bb0:	68db      	ldr	r3, [r3, #12]
	data->async->user_data = user_data;
   35bb2:	e9c3 1200 	strd	r1, r2, [r3]
}
   35bb6:	4770      	bx	lr

00035bb8 <user_callback>:
	if (data->async->user_callback) {
   35bb8:	68c3      	ldr	r3, [r0, #12]
   35bba:	68da      	ldr	r2, [r3, #12]
   35bbc:	6813      	ldr	r3, [r2, #0]
   35bbe:	b10b      	cbz	r3, 35bc4 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   35bc0:	6852      	ldr	r2, [r2, #4]
   35bc2:	4718      	bx	r3
}
   35bc4:	4770      	bx	lr

00035bc6 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   35bc6:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   35bc8:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   35bca:	68d0      	ldr	r0, [r2, #12]
{
   35bcc:	b510      	push	{r4, lr}
	return config->uarte_regs;
   35bce:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   35bd0:	b958      	cbnz	r0, 35bea <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   35bd2:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   35bd6:	b15c      	cbz	r4, 35bf0 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   35bd8:	7d52      	ldrb	r2, [r2, #21]
   35bda:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   35bdc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   35be0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   35be4:	2201      	movs	r2, #1
   35be6:	601a      	str	r2, [r3, #0]
}
   35be8:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   35bea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   35bee:	e7fb      	b.n	35be8 <uarte_nrfx_poll_in+0x22>
		return -1;
   35bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35bf4:	e7f8      	b.n	35be8 <uarte_nrfx_poll_in+0x22>

00035bf6 <uarte_nrfx_tx>:
{
   35bf6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   35bfa:	461d      	mov	r5, r3
	return config->uarte_regs;
   35bfc:	6843      	ldr	r3, [r0, #4]
{
   35bfe:	4617      	mov	r7, r2
	return config->uarte_regs;
   35c00:	681c      	ldr	r4, [r3, #0]
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   35c02:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (!nrfx_is_in_ram(buf)) {
   35c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
	struct uarte_nrfx_data *data = get_dev_data(dev);
   35c0a:	68c6      	ldr	r6, [r0, #12]
	if (!nrfx_is_in_ram(buf)) {
   35c0c:	d158      	bne.n	35cc0 <uarte_nrfx_tx+0xca>
	__asm__ volatile(
   35c0e:	f04f 0320 	mov.w	r3, #32
   35c12:	f3ef 8911 	mrs	r9, BASEPRI
   35c16:	f383 8811 	msr	BASEPRI, r3
   35c1a:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   35c1e:	68f3      	ldr	r3, [r6, #12]
   35c20:	f8d3 800c 	ldr.w	r8, [r3, #12]
   35c24:	f1b8 0f00 	cmp.w	r8, #0
   35c28:	d008      	beq.n	35c3c <uarte_nrfx_tx+0x46>
	__asm__ volatile(
   35c2a:	f389 8811 	msr	BASEPRI, r9
   35c2e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   35c32:	f06f 000f 	mvn.w	r0, #15
}
   35c36:	b003      	add	sp, #12
   35c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data->async->tx_size = len;
   35c3c:	60da      	str	r2, [r3, #12]
    p_reg->INTENSET = mask;
   35c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   35c42:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	if (!is_tx_ready(dev)) {
   35c46:	f7ff ff4b 	bl	35ae0 <is_tx_ready>
   35c4a:	68f3      	ldr	r3, [r6, #12]
   35c4c:	bb20      	cbnz	r0, 35c98 <uarte_nrfx_tx+0xa2>
		data->async->pend_tx_buf = (uint8_t *)buf;
   35c4e:	6119      	str	r1, [r3, #16]
   35c50:	f389 8811 	msr	BASEPRI, r9
   35c54:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   35c58:	7af3      	ldrb	r3, [r6, #11]
   35c5a:	2b01      	cmp	r3, #1
   35c5c:	d11a      	bne.n	35c94 <uarte_nrfx_tx+0x9e>
	    && timeout != SYS_FOREVER_MS) {
   35c5e:	1c6b      	adds	r3, r5, #1
   35c60:	d018      	beq.n	35c94 <uarte_nrfx_tx+0x9e>
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   35c62:	68f4      	ldr	r4, [r6, #12]
   35c64:	f240 30e7 	movw	r0, #999	; 0x3e7
   35c68:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   35c6c:	2100      	movs	r1, #0
   35c6e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   35c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   35c76:	2300      	movs	r3, #0
   35c78:	fbc6 0105 	smlal	r0, r1, r6, r5
   35c7c:	f7e2 fd9c 	bl	187b8 <__aeabi_uldivmod>
   35c80:	3418      	adds	r4, #24
   35c82:	4602      	mov	r2, r0
   35c84:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   35c86:	2000      	movs	r0, #0
   35c88:	2100      	movs	r1, #0
   35c8a:	e9cd 0100 	strd	r0, r1, [sp]
   35c8e:	4620      	mov	r0, r4
   35c90:	f7fc fe92 	bl	329b8 <z_impl_k_timer_start>
	return 0;
   35c94:	2000      	movs	r0, #0
   35c96:	e7ce      	b.n	35c36 <uarte_nrfx_tx+0x40>
		data->async->tx_amount = -1;
   35c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		data->async->tx_buf = buf;
   35c9c:	6099      	str	r1, [r3, #8]
		data->async->tx_amount = -1;
   35c9e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   35ca2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   35ca6:	f8c4 7548 	str.w	r7, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   35caa:	f8c4 8120 	str.w	r8, [r4, #288]	; 0x120
   35cae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   35cb2:	f8c4 8158 	str.w	r8, [r4, #344]	; 0x158
   35cb6:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   35cba:	2301      	movs	r3, #1
   35cbc:	60a3      	str	r3, [r4, #8]
}
   35cbe:	e7c7      	b.n	35c50 <uarte_nrfx_tx+0x5a>
		return -ENOTSUP;
   35cc0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   35cc4:	e7b7      	b.n	35c36 <uarte_nrfx_tx+0x40>

00035cc6 <rx_timeout>:
{
   35cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35cca:	b086      	sub	sp, #24
	return z_impl_k_timer_user_data_get(timer);
   35ccc:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   35cce:	68f3      	ldr	r3, [r6, #12]
   35cd0:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
   35cd4:	f002 08ff 	and.w	r8, r2, #255	; 0xff
   35cd8:	bb7a      	cbnz	r2, 35d3a <rx_timeout+0x74>
    p_reg->INTENCLR = mask;
   35cda:	2110      	movs	r1, #16
	const struct device *dev = data->dev;
   35cdc:	6837      	ldr	r7, [r6, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   35cde:	6878      	ldr	r0, [r7, #4]
	return config->uarte_regs;
   35ce0:	6802      	ldr	r2, [r0, #0]
   35ce2:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	if (hw_rx_counting_enabled(data)) {
   35ce6:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   35cea:	b1e2      	cbz	r2, 35d26 <rx_timeout+0x60>
		read = nrfx_timer_capture(&cfg->timer, 0);
   35cec:	4641      	mov	r1, r8
   35cee:	3008      	adds	r0, #8
   35cf0:	f000 fe69 	bl	369c6 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   35cf4:	68f4      	ldr	r4, [r6, #12]
   35cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   35cf8:	4283      	cmp	r3, r0
		data->async->rx_timeout_left = data->async->rx_timeout;
   35cfa:	bf1c      	itt	ne
   35cfc:	6ee3      	ldrne	r3, [r4, #108]	; 0x6c
		data->async->rx_total_byte_cnt = read;
   35cfe:	6660      	strne	r0, [r4, #100]	; 0x64
		    - data->async->rx_total_user_byte_cnt;
   35d00:	e9d4 5a19 	ldrd	r5, sl, [r4, #100]	; 0x64
   35d04:	eba5 050a 	sub.w	r5, r5, sl
		data->async->rx_timeout_left = data->async->rx_timeout;
   35d08:	bf18      	it	ne
   35d0a:	6763      	strne	r3, [r4, #116]	; 0x74
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   35d0c:	e9d4 3915 	ldrd	r3, r9, [r4, #84]	; 0x54
   35d10:	eb05 0209 	add.w	r2, r5, r9
   35d14:	429a      	cmp	r2, r3
   35d16:	d913      	bls.n	35d40 <rx_timeout+0x7a>
		len = data->async->rx_buf_len - data->async->rx_offset;
   35d18:	eba3 0509 	sub.w	r5, r3, r9
	if (len > 0) {
   35d1c:	2d00      	cmp	r5, #0
   35d1e:	dd07      	ble.n	35d30 <rx_timeout+0x6a>
		clipped = true;
   35d20:	f04f 0801 	mov.w	r8, #1
   35d24:	e012      	b.n	35d4c <rx_timeout+0x86>
		read = data->async->rx_cnt.cnt;
   35d26:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   35d2a:	e7e3      	b.n	35cf4 <rx_timeout+0x2e>
			data->async->rx_timeout_left -=
   35d2c:	1a9b      	subs	r3, r3, r2
   35d2e:	6763      	str	r3, [r4, #116]	; 0x74
    p_reg->INTENSET = mask;
   35d30:	2210      	movs	r2, #16
	return config->uarte_regs;
   35d32:	687b      	ldr	r3, [r7, #4]
   35d34:	681b      	ldr	r3, [r3, #0]
   35d36:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   35d3a:	b006      	add	sp, #24
   35d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len > 0) {
   35d40:	2d00      	cmp	r5, #0
   35d42:	ddf5      	ble.n	35d30 <rx_timeout+0x6a>
				< data->async->rx_timeout_slab)) {
   35d44:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
		if (clipped ||
   35d48:	4293      	cmp	r3, r2
   35d4a:	daef      	bge.n	35d2c <rx_timeout+0x66>
			struct uart_event evt = {
   35d4c:	2100      	movs	r1, #0
   35d4e:	2214      	movs	r2, #20
   35d50:	a801      	add	r0, sp, #4
   35d52:	f001 fb76 	bl	37442 <memset>
   35d56:	2302      	movs	r3, #2
   35d58:	f88d 3004 	strb.w	r3, [sp, #4]
   35d5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   35d5e:	9504      	str	r5, [sp, #16]
   35d60:	e9cd 3902 	strd	r3, r9, [sp, #8]
			data->async->rx_offset += len;
   35d64:	eb09 0305 	add.w	r3, r9, r5
			data->async->rx_total_user_byte_cnt += len;
   35d68:	4455      	add	r5, sl
			user_callback(dev, &evt);
   35d6a:	4638      	mov	r0, r7
			data->async->rx_offset += len;
   35d6c:	65a3      	str	r3, [r4, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   35d6e:	66a5      	str	r5, [r4, #104]	; 0x68
			user_callback(dev, &evt);
   35d70:	a901      	add	r1, sp, #4
   35d72:	f7ff ff21 	bl	35bb8 <user_callback>
		if (clipped) {
   35d76:	f1b8 0f00 	cmp.w	r8, #0
   35d7a:	d0d9      	beq.n	35d30 <rx_timeout+0x6a>
			k_timer_stop(&data->async->rx_timeout_timer);
   35d7c:	68f0      	ldr	r0, [r6, #12]
   35d7e:	3078      	adds	r0, #120	; 0x78
	z_impl_k_timer_stop(timer);
   35d80:	f001 f976 	bl	37070 <z_impl_k_timer_stop>
}
   35d84:	e7d4      	b.n	35d30 <rx_timeout+0x6a>

00035d86 <uarte_nrfx_tx_abort>:
	return config->uarte_regs;
   35d86:	6843      	ldr	r3, [r0, #4]
{
   35d88:	b510      	push	{r4, lr}
	return config->uarte_regs;
   35d8a:	681c      	ldr	r4, [r3, #0]
	if (data->async->tx_buf == NULL) {
   35d8c:	68c3      	ldr	r3, [r0, #12]
   35d8e:	68d8      	ldr	r0, [r3, #12]
   35d90:	6883      	ldr	r3, [r0, #8]
   35d92:	b133      	cbz	r3, 35da2 <uarte_nrfx_tx_abort+0x1c>
	z_impl_k_timer_stop(timer);
   35d94:	3018      	adds	r0, #24
   35d96:	f001 f96b 	bl	37070 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   35d9a:	2301      	movs	r3, #1
	return 0;
   35d9c:	2000      	movs	r0, #0
   35d9e:	60e3      	str	r3, [r4, #12]
}
   35da0:	bd10      	pop	{r4, pc}
		return -EFAULT;
   35da2:	f06f 000d 	mvn.w	r0, #13
   35da6:	e7fb      	b.n	35da0 <uarte_nrfx_tx_abort+0x1a>

00035da8 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   35da8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   35daa:	6818      	ldr	r0, [r3, #0]
   35dac:	f7ff bfeb 	b.w	35d86 <uarte_nrfx_tx_abort>

00035db0 <uarte_nrfx_rx_disable>:
{
   35db0:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   35db2:	68c5      	ldr	r5, [r0, #12]
	return config->uarte_regs;
   35db4:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   35db6:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   35db8:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   35dba:	6d03      	ldr	r3, [r0, #80]	; 0x50
   35dbc:	b1b3      	cbz	r3, 35dec <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   35dbe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   35dc0:	b153      	cbz	r3, 35dd8 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   35dc2:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   35dc6:	f023 0320 	bic.w	r3, r3, #32
   35dca:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   35dce:	2300      	movs	r3, #0
   35dd0:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   35dd4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   35dd8:	3078      	adds	r0, #120	; 0x78
   35dda:	f001 f949 	bl	37070 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   35dde:	2000      	movs	r0, #0
   35de0:	68eb      	ldr	r3, [r5, #12]
   35de2:	f883 00b8 	strb.w	r0, [r3, #184]	; 0xb8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   35de6:	2301      	movs	r3, #1
   35de8:	6063      	str	r3, [r4, #4]
}
   35dea:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   35dec:	f06f 000d 	mvn.w	r0, #13
   35df0:	e7fb      	b.n	35dea <uarte_nrfx_rx_disable+0x3a>

00035df2 <uarte_nrfx_pm_control>:
{
   35df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   35df6:	68c7      	ldr	r7, [r0, #12]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   35df8:	2901      	cmp	r1, #1
{
   35dfa:	4698      	mov	r8, r3
   35dfc:	4605      	mov	r5, r0
   35dfe:	4616      	mov	r6, r2
   35e00:	693b      	ldr	r3, [r7, #16]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   35e02:	d159      	bne.n	35eb8 <uarte_nrfx_pm_control+0xc6>
		uint32_t new_state = *((const uint32_t *)context);
   35e04:	6812      	ldr	r2, [r2, #0]
		if (new_state != data->pm_state) {
   35e06:	429a      	cmp	r2, r3
   35e08:	d01e      	beq.n	35e48 <uarte_nrfx_pm_control+0x56>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   35e0a:	f8d0 c004 	ldr.w	ip, [r0, #4]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
   35e0e:	2a01      	cmp	r2, #1
	return config->uarte_regs;
   35e10:	f8dc 4000 	ldr.w	r4, [ip]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
   35e14:	d123      	bne.n	35e5e <uarte_nrfx_pm_control+0x6c>
		uarte_nrfx_pins_enable(dev, true);
   35e16:	f7ef fbcb 	bl	255b0 <uarte_nrfx_pins_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   35e1a:	2308      	movs	r3, #8
   35e1c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   35e20:	68eb      	ldr	r3, [r5, #12]
		return data->async->hw_rx_counting;
   35e22:	68db      	ldr	r3, [r3, #12]
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   35e24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   35e28:	b11b      	cbz	r3, 35e32 <uarte_nrfx_pm_control+0x40>
			nrfx_timer_enable(&get_dev_config(dev)->timer);
   35e2a:	6868      	ldr	r0, [r5, #4]
   35e2c:	3008      	adds	r0, #8
   35e2e:	f7fb fa83 	bl	31338 <nrfx_timer_enable>
		if (get_dev_data(dev)->async) {
   35e32:	68eb      	ldr	r3, [r5, #12]
   35e34:	68db      	ldr	r3, [r3, #12]
   35e36:	b93b      	cbnz	r3, 35e48 <uarte_nrfx_pm_control+0x56>
    return p_reg->PSEL.RXD;
   35e38:	f8d4 3514 	ldr.w	r3, [r4, #1300]	; 0x514
		if (nrf_uarte_rx_pin_get(uarte) !=
   35e3c:	3301      	adds	r3, #1
   35e3e:	f04f 0301 	mov.w	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   35e42:	bf18      	it	ne
   35e44:	6023      	strne	r3, [r4, #0]
		data->pm_state = new_state;
   35e46:	613b      	str	r3, [r7, #16]
	if (cb) {
   35e48:	f1b8 0f00 	cmp.w	r8, #0
   35e4c:	d004      	beq.n	35e58 <uarte_nrfx_pm_control+0x66>
		cb(dev, 0, context, arg);
   35e4e:	4632      	mov	r2, r6
   35e50:	2100      	movs	r1, #0
   35e52:	4628      	mov	r0, r5
   35e54:	9b06      	ldr	r3, [sp, #24]
   35e56:	47c0      	blx	r8
}
   35e58:	2000      	movs	r0, #0
   35e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
   35e5e:	2b01      	cmp	r3, #1
   35e60:	d1f2      	bne.n	35e48 <uarte_nrfx_pm_control+0x56>
		return data->async->hw_rx_counting;
   35e62:	68fb      	ldr	r3, [r7, #12]
		data->pm_state = new_state;
   35e64:	613a      	str	r2, [r7, #16]
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   35e66:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   35e6a:	b13b      	cbz	r3, 35e7c <uarte_nrfx_pm_control+0x8a>
			nrfx_timer_disable(&get_dev_config(dev)->timer);
   35e6c:	f10c 0008 	add.w	r0, ip, #8
   35e70:	f7fb fa70 	bl	31354 <nrfx_timer_disable>
			data->async->rx_total_byte_cnt = 0;
   35e74:	2200      	movs	r2, #0
   35e76:	68fb      	ldr	r3, [r7, #12]
			data->async->rx_total_user_byte_cnt = 0;
   35e78:	e9c3 2219 	strd	r2, r2, [r3, #100]	; 0x64
		if (get_dev_data(dev)->async) {
   35e7c:	68eb      	ldr	r3, [r5, #12]
   35e7e:	68db      	ldr	r3, [r3, #12]
   35e80:	b133      	cbz	r3, 35e90 <uarte_nrfx_pm_control+0x9e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   35e82:	2100      	movs	r1, #0
		uarte_nrfx_pins_enable(dev, false);
   35e84:	4628      	mov	r0, r5
   35e86:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   35e8a:	f7ef fb91 	bl	255b0 <uarte_nrfx_pins_enable>
   35e8e:	e7db      	b.n	35e48 <uarte_nrfx_pm_control+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   35e90:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   35e94:	2b00      	cmp	r3, #0
   35e96:	d0f4      	beq.n	35e82 <uarte_nrfx_pm_control+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   35e98:	2301      	movs	r3, #1
   35e9a:	6063      	str	r3, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   35e9c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
			while (!nrf_uarte_event_check(uarte,
   35ea0:	2b00      	cmp	r3, #0
   35ea2:	d0fb      	beq.n	35e9c <uarte_nrfx_pm_control+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   35ea4:	2300      	movs	r3, #0
   35ea6:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   35eaa:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   35eae:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   35eb2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
}
   35eb6:	e7e4      	b.n	35e82 <uarte_nrfx_pm_control+0x90>
		*((uint32_t *)context) = data->pm_state;
   35eb8:	6013      	str	r3, [r2, #0]
   35eba:	e7c5      	b.n	35e48 <uarte_nrfx_pm_control+0x56>

00035ebc <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   35ebc:	2000      	movs	r0, #0
   35ebe:	4770      	bx	lr

00035ec0 <entropy_cc3xx_rng_get_entropy>:
{
   35ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35ec4:	460f      	mov	r7, r1
   35ec6:	4614      	mov	r4, r2
	size_t offset = 0;
   35ec8:	2600      	movs	r6, #0
	int res = -EINVAL;
   35eca:	f06f 0515 	mvn.w	r5, #21
{
   35ece:	b0a6      	sub	sp, #152	; 0x98
	while (length > 0) {
   35ed0:	b91c      	cbnz	r4, 35eda <entropy_cc3xx_rng_get_entropy+0x1a>
}
   35ed2:	4628      	mov	r0, r5
   35ed4:	b026      	add	sp, #152	; 0x98
   35ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   35eda:	2190      	movs	r1, #144	; 0x90
   35edc:	aa01      	add	r2, sp, #4
   35ede:	a802      	add	r0, sp, #8
   35ee0:	f7ff f96e 	bl	351c0 <spm_request_random_number>
		if (res < 0) {
   35ee4:	1e05      	subs	r5, r0, #0
   35ee6:	dbf4      	blt.n	35ed2 <entropy_cc3xx_rng_get_entropy+0x12>
		if (olen != sizeof(spm_buf)) {
   35ee8:	9b01      	ldr	r3, [sp, #4]
   35eea:	2b90      	cmp	r3, #144	; 0x90
   35eec:	d10e      	bne.n	35f0c <entropy_cc3xx_rng_get_entropy+0x4c>
		to_copy = MIN(length, sizeof(spm_buf));
   35eee:	2c90      	cmp	r4, #144	; 0x90
   35ef0:	46a0      	mov	r8, r4
   35ef2:	bf28      	it	cs
   35ef4:	f04f 0890 	movcs.w	r8, #144	; 0x90
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   35ef8:	19b8      	adds	r0, r7, r6
   35efa:	4642      	mov	r2, r8
   35efc:	a902      	add	r1, sp, #8
		length -= to_copy;
   35efe:	eba4 0408 	sub.w	r4, r4, r8
   35f02:	f001 fa7e 	bl	37402 <memcpy>
   35f06:	b2a4      	uxth	r4, r4
		offset += to_copy;
   35f08:	4446      	add	r6, r8
   35f0a:	e7e1      	b.n	35ed0 <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   35f0c:	f06f 0515 	mvn.w	r5, #21
   35f10:	e7df      	b.n	35ed2 <entropy_cc3xx_rng_get_entropy+0x12>

00035f12 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   35f12:	4668      	mov	r0, sp
   35f14:	f020 0107 	bic.w	r1, r0, #7
   35f18:	468d      	mov	sp, r1
   35f1a:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   35f1c:	f7f3 f8fa 	bl	29114 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   35f20:	f7eb fea4 	bl	21c6c <_arch_isr_direct_pm>
   35f24:	f7ec fa2e 	bl	22384 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   35f28:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   35f2c:	4685      	mov	sp, r0
   35f2e:	4770      	bx	lr

00035f30 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   35f30:	4668      	mov	r0, sp
   35f32:	f020 0107 	bic.w	r1, r0, #7
   35f36:	468d      	mov	sp, r1
   35f38:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   35f3a:	f7f3 fc91 	bl	29860 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   35f3e:	f7eb fe95 	bl	21c6c <_arch_isr_direct_pm>
   35f42:	f7ec fa1f 	bl	22384 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   35f46:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   35f4a:	4685      	mov	sp, r0
   35f4c:	4770      	bx	lr

00035f4e <trace_task_create>:
{
   35f4e:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   35f50:	201d      	movs	r0, #29
   35f52:	2200      	movs	r2, #0
   35f54:	2106      	movs	r1, #6
   35f56:	f7eb fe73 	bl	21c40 <z_arm_irq_priority_set>
}
   35f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   35f5e:	201d      	movs	r0, #29
   35f60:	f7eb be3c 	b.w	21bdc <arch_irq_enable>

00035f64 <read_task_create>:
{
   35f64:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   35f66:	201c      	movs	r0, #28
   35f68:	2200      	movs	r2, #0
   35f6a:	2106      	movs	r1, #6
   35f6c:	f7eb fe68 	bl	21c40 <z_arm_irq_priority_set>
}
   35f70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   35f74:	201c      	movs	r0, #28
   35f76:	f7eb be31 	b.w	21bdc <arch_irq_enable>

00035f7a <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   35f7a:	2000      	movs	r0, #0
   35f7c:	4770      	bx	lr

00035f7e <z_to_nrf_flags>:
{
   35f7e:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   35f80:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   35f84:	bf18      	it	ne
   35f86:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   35f88:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   35f8a:	bf48      	it	mi
   35f8c:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   35f90:	06da      	lsls	r2, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   35f92:	bf48      	it	mi
   35f94:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   35f98:	069b      	lsls	r3, r3, #26
		nrf_flags |= NRF_MSG_WAITALL;
   35f9a:	bf48      	it	mi
   35f9c:	f040 0010 	orrmi.w	r0, r0, #16
}
   35fa0:	4770      	bx	lr

00035fa2 <z_to_nrf_family>:
	switch (z_family) {
   35fa2:	2806      	cmp	r0, #6
   35fa4:	d80a      	bhi.n	35fbc <z_to_nrf_family+0x1a>
   35fa6:	b198      	cbz	r0, 35fd0 <z_to_nrf_family+0x2e>
   35fa8:	3801      	subs	r0, #1
   35faa:	2805      	cmp	r0, #5
   35fac:	d810      	bhi.n	35fd0 <z_to_nrf_family+0x2e>
   35fae:	e8df f000 	tbb	[pc, r0]
   35fb2:	0312      	.short	0x0312
   35fb4:	0b0f0f0d 	.word	0x0b0f0f0d
   35fb8:	200a      	movs	r0, #10
   35fba:	4770      	bx	lr
   35fbc:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   35fbe:	bf14      	ite	ne
   35fc0:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   35fc4:	2066      	moveq	r0, #102	; 0x66
   35fc6:	4770      	bx	lr
		return NRF_AF_LOCAL;
   35fc8:	2001      	movs	r0, #1
   35fca:	4770      	bx	lr
		return NRF_AF_PACKET;
   35fcc:	2005      	movs	r0, #5
   35fce:	4770      	bx	lr
		return -EAFNOSUPPORT;
   35fd0:	f06f 0069 	mvn.w	r0, #105	; 0x69
   35fd4:	4770      	bx	lr
		return NRF_AF_INET;
   35fd6:	2002      	movs	r0, #2
}
   35fd8:	4770      	bx	lr

00035fda <z_to_nrf_protocol>:
	switch (proto) {
   35fda:	f240 1311 	movw	r3, #273	; 0x111
   35fde:	4298      	cmp	r0, r3
   35fe0:	d023      	beq.n	3602a <z_to_nrf_protocol+0x50>
   35fe2:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   35fe6:	da11      	bge.n	3600c <z_to_nrf_protocol+0x32>
   35fe8:	2811      	cmp	r0, #17
   35fea:	d021      	beq.n	36030 <z_to_nrf_protocol+0x56>
   35fec:	dc06      	bgt.n	35ffc <z_to_nrf_protocol+0x22>
   35fee:	b300      	cbz	r0, 36032 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   35ff0:	2806      	cmp	r0, #6
   35ff2:	bf14      	ite	ne
   35ff4:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   35ff8:	2001      	moveq	r0, #1
   35ffa:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   35ffc:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   36000:	bf14      	ite	ne
   36002:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   36006:	f44f 7082 	moveq.w	r0, #260	; 0x104
   3600a:	4770      	bx	lr
	switch (proto) {
   3600c:	f240 2302 	movw	r3, #514	; 0x202
   36010:	4298      	cmp	r0, r3
   36012:	d00e      	beq.n	36032 <z_to_nrf_protocol+0x58>
   36014:	f240 2303 	movw	r3, #515	; 0x203
   36018:	4298      	cmp	r0, r3
   3601a:	d00a      	beq.n	36032 <z_to_nrf_protocol+0x58>
   3601c:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   36020:	4298      	cmp	r0, r3
   36022:	bf18      	it	ne
   36024:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   36028:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   3602a:	f44f 7087 	mov.w	r0, #270	; 0x10e
   3602e:	4770      	bx	lr
	switch (proto) {
   36030:	2002      	movs	r0, #2
}
   36032:	4770      	bx	lr

00036034 <nrf91_socket_is_supported>:
}
   36034:	2001      	movs	r0, #1
   36036:	4770      	bx	lr

00036038 <nrf91_bsdlib_socket_offload_init>:
}
   36038:	2000      	movs	r0, #0
   3603a:	4770      	bx	lr

0003603c <nrf91_socket_offload_getsockopt>:
{
   3603c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36040:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   36042:	2300      	movs	r3, #0
{
   36044:	b086      	sub	sp, #24
   36046:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   3604a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3604e:	f8d8 3000 	ldr.w	r3, [r8]
{
   36052:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   36054:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   36056:	f240 2302 	movw	r3, #514	; 0x202
   3605a:	4299      	cmp	r1, r3
{
   3605c:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   3605e:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   36062:	d005      	beq.n	36070 <nrf91_socket_offload_getsockopt+0x34>
   36064:	dc30      	bgt.n	360c8 <nrf91_socket_offload_getsockopt+0x8c>
   36066:	2901      	cmp	r1, #1
   36068:	d002      	beq.n	36070 <nrf91_socket_offload_getsockopt+0x34>
   3606a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3606e:	d13c      	bne.n	360ea <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   36070:	4631      	mov	r1, r6
   36072:	4620      	mov	r0, r4
   36074:	aa02      	add	r2, sp, #8
   36076:	f7ef fe2b 	bl	25cd0 <z_to_nrf_optname>
   3607a:	2800      	cmp	r0, #0
   3607c:	db35      	blt.n	360ea <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3607e:	2c01      	cmp	r4, #1
   36080:	d126      	bne.n	360d0 <nrf91_socket_offload_getsockopt+0x94>
   36082:	f1a6 0314 	sub.w	r3, r6, #20
   36086:	2b01      	cmp	r3, #1
   36088:	d822      	bhi.n	360d0 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   3608a:	2308      	movs	r3, #8
   3608c:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   3608e:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   36090:	aa03      	add	r2, sp, #12
   36092:	4638      	mov	r0, r7
   36094:	9200      	str	r2, [sp, #0]
   36096:	4621      	mov	r1, r4
   36098:	9a02      	ldr	r2, [sp, #8]
   3609a:	f7f9 fa11 	bl	2f4c0 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3609e:	4607      	mov	r7, r0
   360a0:	b970      	cbnz	r0, 360c0 <nrf91_socket_offload_getsockopt+0x84>
   360a2:	b16d      	cbz	r5, 360c0 <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   360a4:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   360a6:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   360a8:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   360ac:	d108      	bne.n	360c0 <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   360ae:	2e04      	cmp	r6, #4
   360b0:	d110      	bne.n	360d4 <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   360b2:	6828      	ldr	r0, [r5, #0]
   360b4:	f7ef fc62 	bl	2597c <bsd_os_errno_set>
				*(int *)optval = errno;
   360b8:	f7ff f92d 	bl	35316 <__errno>
   360bc:	6803      	ldr	r3, [r0, #0]
   360be:	602b      	str	r3, [r5, #0]
}
   360c0:	4638      	mov	r0, r7
   360c2:	b006      	add	sp, #24
   360c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   360c8:	f240 2303 	movw	r3, #515	; 0x203
   360cc:	4299      	cmp	r1, r3
   360ce:	e7ce      	b.n	3606e <nrf91_socket_offload_getsockopt+0x32>
   360d0:	462b      	mov	r3, r5
   360d2:	e7dd      	b.n	36090 <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   360d4:	3e14      	subs	r6, #20
   360d6:	2e01      	cmp	r6, #1
   360d8:	d8f2      	bhi.n	360c0 <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   360da:	9b04      	ldr	r3, [sp, #16]
   360dc:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   360de:	9b05      	ldr	r3, [sp, #20]
   360e0:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   360e2:	2308      	movs	r3, #8
   360e4:	f8c8 3000 	str.w	r3, [r8]
   360e8:	e7ea      	b.n	360c0 <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   360ea:	f7ff f914 	bl	35316 <__errno>
   360ee:	236d      	movs	r3, #109	; 0x6d
	return retval;
   360f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   360f4:	6003      	str	r3, [r0, #0]
	return retval;
   360f6:	e7e3      	b.n	360c0 <nrf91_socket_offload_getsockopt+0x84>

000360f8 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   360f8:	3801      	subs	r0, #1
   360fa:	f7f9 b98d 	b.w	2f418 <nrf_listen>

000360fe <nrf91_socket_offload_close>:
	return nrf_close(sd);
   360fe:	3801      	subs	r0, #1
   36100:	f7f9 b8fe 	b.w	2f300 <nrf_close>

00036104 <nrf91_socket_offload_freeaddrinfo>:
{
   36104:	b538      	push	{r3, r4, r5, lr}
   36106:	4604      	mov	r4, r0
	while (next != NULL) {
   36108:	b904      	cbnz	r4, 3610c <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3610a:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3610c:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   3610e:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   36110:	f001 f93a 	bl	37388 <k_free>
		k_free(this);
   36114:	4620      	mov	r0, r4
   36116:	f001 f937 	bl	37388 <k_free>
		next = next->ai_next;
   3611a:	462c      	mov	r4, r5
   3611c:	e7f4      	b.n	36108 <nrf91_socket_offload_freeaddrinfo+0x4>

0003611e <z_to_nrf_addrinfo_hints>:
{
   3611e:	b538      	push	{r3, r4, r5, lr}
   36120:	460c      	mov	r4, r1
   36122:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   36124:	221c      	movs	r2, #28
   36126:	2100      	movs	r1, #0
   36128:	1d20      	adds	r0, r4, #4
   3612a:	f001 f98a 	bl	37442 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3612e:	2300      	movs	r3, #0
   36130:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   36132:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   36134:	2b03      	cmp	r3, #3
   36136:	d003      	beq.n	36140 <z_to_nrf_addrinfo_hints+0x22>
   36138:	2b04      	cmp	r3, #4
   3613a:	bf08      	it	eq
   3613c:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   36140:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   36142:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   36144:	f7ff ff2d 	bl	35fa2 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   36148:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   3614c:	d00b      	beq.n	36166 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   3614e:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   36150:	6928      	ldr	r0, [r5, #16]
   36152:	f7ff ff42 	bl	35fda <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   36156:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3615a:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3615c:	d003      	beq.n	36166 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   3615e:	69e8      	ldr	r0, [r5, #28]
   36160:	b108      	cbz	r0, 36166 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   36162:	61a0      	str	r0, [r4, #24]
	return 0;
   36164:	2000      	movs	r0, #0
}
   36166:	bd38      	pop	{r3, r4, r5, pc}

00036168 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   36168:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3616a:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3616c:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3616e:	4603      	mov	r3, r0
{
   36170:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   36172:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   36176:	f101 0420 	add.w	r4, r1, #32
   3617a:	f101 0210 	add.w	r2, r1, #16
   3617e:	f852 5b04 	ldr.w	r5, [r2], #4
   36182:	42a2      	cmp	r2, r4
   36184:	f843 5b04 	str.w	r5, [r3], #4
   36188:	d1f9      	bne.n	3617e <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   3618a:	6a0b      	ldr	r3, [r1, #32]
   3618c:	7503      	strb	r3, [r0, #20]
}
   3618e:	bd30      	pop	{r4, r5, pc}

00036190 <nrf91_socket_offload_recvfrom>:
{
   36190:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   36192:	1e45      	subs	r5, r0, #1
{
   36194:	b08f      	sub	sp, #60	; 0x3c
   36196:	4618      	mov	r0, r3
   36198:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   3619c:	e9cd 2102 	strd	r2, r1, [sp, #8]
   361a0:	f7ff feed 	bl	35f7e <z_to_nrf_flags>
	if (from == NULL) {
   361a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   361a8:	4603      	mov	r3, r0
   361aa:	b944      	cbnz	r4, 361be <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   361ac:	4628      	mov	r0, r5
   361ae:	e9cd 4400 	strd	r4, r4, [sp]
   361b2:	f7f9 f8e9 	bl	2f388 <nrf_recvfrom>
   361b6:	4605      	mov	r5, r0
}
   361b8:	4628      	mov	r0, r5
   361ba:	b00f      	add	sp, #60	; 0x3c
   361bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   361be:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   361c0:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   361c2:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   361c4:	a804      	add	r0, sp, #16
   361c6:	9001      	str	r0, [sp, #4]
   361c8:	9700      	str	r7, [sp, #0]
   361ca:	4628      	mov	r0, r5
   361cc:	f7f9 f8dc 	bl	2f388 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   361d0:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   361d2:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   361d4:	2b02      	cmp	r3, #2
   361d6:	d109      	bne.n	361ec <nrf91_socket_offload_recvfrom+0x5c>
	ptr->sin_port = nrf_in->sin_port;
   361d8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   361dc:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   361de:	2301      	movs	r3, #1
   361e0:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   361e2:	9b08      	ldr	r3, [sp, #32]
   361e4:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   361e6:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   361e8:	6033      	str	r3, [r6, #0]
	return retval;
   361ea:	e7e5      	b.n	361b8 <nrf91_socket_offload_recvfrom+0x28>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   361ec:	2b0a      	cmp	r3, #10
   361ee:	d1e3      	bne.n	361b8 <nrf91_socket_offload_recvfrom+0x28>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   361f0:	4639      	mov	r1, r7
   361f2:	4620      	mov	r0, r4
   361f4:	f7ff ffb8 	bl	36168 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   361f8:	2318      	movs	r3, #24
   361fa:	e7f5      	b.n	361e8 <nrf91_socket_offload_recvfrom+0x58>

000361fc <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   361fc:	2300      	movs	r3, #0
{
   361fe:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   36200:	e9cd 3300 	strd	r3, r3, [sp]
   36204:	f7ff ffc4 	bl	36190 <nrf91_socket_offload_recvfrom>
}
   36208:	b003      	add	sp, #12
   3620a:	f85d fb04 	ldr.w	pc, [sp], #4

0003620e <nrf91_socket_offload_getaddrinfo>:
{
   3620e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36212:	4614      	mov	r4, r2
   36214:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   36216:	2100      	movs	r1, #0
{
   36218:	b093      	sub	sp, #76	; 0x4c
   3621a:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   3621c:	2220      	movs	r2, #32
   3621e:	a802      	add	r0, sp, #8
{
   36220:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   36222:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   36224:	f001 f90d 	bl	37442 <memset>
	if (hints != NULL) {
   36228:	b194      	cbz	r4, 36250 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   3622a:	4620      	mov	r0, r4
   3622c:	a902      	add	r1, sp, #8
   3622e:	f7ff ff76 	bl	3611e <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   36232:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   36236:	f000 80d0 	beq.w	363da <nrf91_socket_offload_getaddrinfo+0x1cc>
		} else if (error == -EAFNOSUPPORT) {
   3623a:	306a      	adds	r0, #106	; 0x6a
   3623c:	f000 80d0 	beq.w	363e0 <nrf91_socket_offload_getaddrinfo+0x1d2>
		if (hints->ai_next != NULL) {
   36240:	6820      	ldr	r0, [r4, #0]
   36242:	b120      	cbz	r0, 3624e <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   36244:	ac0a      	add	r4, sp, #40	; 0x28
   36246:	4621      	mov	r1, r4
   36248:	f7ff ff69 	bl	3611e <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   3624c:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   3624e:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   36250:	4628      	mov	r0, r5
   36252:	4622      	mov	r2, r4
   36254:	4631      	mov	r1, r6
   36256:	ab01      	add	r3, sp, #4
   36258:	f7f9 f94e 	bl	2f4f8 <nrf_getaddrinfo>
	if (retval != 0) {
   3625c:	4605      	mov	r5, r0
   3625e:	b300      	cbz	r0, 362a2 <nrf91_socket_offload_getaddrinfo+0x94>
	switch (nrf_error) {
   36260:	282f      	cmp	r0, #47	; 0x2f
   36262:	f000 80c0 	beq.w	363e6 <nrf91_socket_offload_getaddrinfo+0x1d8>
   36266:	dc0c      	bgt.n	36282 <nrf91_socket_offload_getaddrinfo+0x74>
   36268:	280c      	cmp	r0, #12
   3626a:	f000 80bf 	beq.w	363ec <nrf91_socket_offload_getaddrinfo+0x1de>
		return DNS_EAI_AGAIN;
   3626e:	2823      	cmp	r0, #35	; 0x23
   36270:	bf14      	ite	ne
   36272:	f06f 050a 	mvnne.w	r5, #10
   36276:	f06f 0502 	mvneq.w	r5, #2
}
   3627a:	4628      	mov	r0, r5
   3627c:	b013      	add	sp, #76	; 0x4c
   3627e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   36282:	2833      	cmp	r0, #51	; 0x33
   36284:	d006      	beq.n	36294 <nrf91_socket_offload_getaddrinfo+0x86>
		return DNS_EAI_INPROGRESS;
   36286:	2873      	cmp	r0, #115	; 0x73
   36288:	bf14      	ite	ne
   3628a:	f06f 050a 	mvnne.w	r5, #10
   3628e:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   36292:	e7f2      	b.n	3627a <nrf91_socket_offload_getaddrinfo+0x6c>
		errno = ENETUNREACH;
   36294:	f7ff f83f 	bl	35316 <__errno>
   36298:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   3629a:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   3629e:	6003      	str	r3, [r0, #0]
   362a0:	e7eb      	b.n	3627a <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   362a2:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   362a4:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   362a6:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   362a8:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   362aa:	b91e      	cbnz	r6, 362b4 <nrf91_socket_offload_getaddrinfo+0xa6>
	nrf_freeaddrinfo(nrf_res);
   362ac:	9801      	ldr	r0, [sp, #4]
   362ae:	f7f9 f925 	bl	2f4fc <nrf_freeaddrinfo>
	return retval;
   362b2:	e7e2      	b.n	3627a <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   362b4:	2050      	movs	r0, #80	; 0x50
   362b6:	f7fc fc5f 	bl	32b78 <k_malloc>
		if (next_z_res == NULL) {
   362ba:	4604      	mov	r4, r0
   362bc:	2800      	cmp	r0, #0
   362be:	f000 8081 	beq.w	363c4 <nrf91_socket_offload_getaddrinfo+0x1b6>
	family = nrf_to_z_family(nrf_in->ai_family);
   362c2:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   362c4:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   362c6:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   362c8:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   362cc:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   362d0:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   362d4:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   362d6:	dc23      	bgt.n	36320 <nrf91_socket_offload_getaddrinfo+0x112>
   362d8:	2900      	cmp	r1, #0
   362da:	dd23      	ble.n	36324 <nrf91_socket_offload_getaddrinfo+0x116>
   362dc:	1e4b      	subs	r3, r1, #1
   362de:	2b09      	cmp	r3, #9
   362e0:	d820      	bhi.n	36324 <nrf91_socket_offload_getaddrinfo+0x116>
   362e2:	e8df f003 	tbb	[pc, r3]
   362e6:	2905      	.short	0x2905
   362e8:	1f251f1f 	.word	0x1f251f1f
   362ec:	271f1f1f 	.word	0x271f1f1f
		return AF_LOCAL;
   362f0:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   362f2:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   362f4:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   362f6:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   362fa:	d04b      	beq.n	36394 <nrf91_socket_offload_getaddrinfo+0x186>
   362fc:	dc26      	bgt.n	3634c <nrf91_socket_offload_getaddrinfo+0x13e>
   362fe:	2a02      	cmp	r2, #2
   36300:	d04c      	beq.n	3639c <nrf91_socket_offload_getaddrinfo+0x18e>
   36302:	dc1d      	bgt.n	36340 <nrf91_socket_offload_getaddrinfo+0x132>
   36304:	b372      	cbz	r2, 36364 <nrf91_socket_offload_getaddrinfo+0x156>
   36306:	2a01      	cmp	r2, #1
   36308:	d04a      	beq.n	363a0 <nrf91_socket_offload_getaddrinfo+0x192>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3630a:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   3630e:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   36310:	2300      	movs	r3, #0
   36312:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   36314:	4620      	mov	r0, r4
   36316:	f001 f837 	bl	37388 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   3631a:	f06f 0506 	mvn.w	r5, #6
   3631e:	e053      	b.n	363c8 <nrf91_socket_offload_getaddrinfo+0x1ba>
	switch (nrf_family) {
   36320:	2966      	cmp	r1, #102	; 0x66
   36322:	d00b      	beq.n	3633c <nrf91_socket_offload_getaddrinfo+0x12e>
			k_free(next_z_res);
   36324:	4620      	mov	r0, r4
   36326:	f001 f82f 	bl	37388 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   3632a:	f06f 0508 	mvn.w	r5, #8
   3632e:	e04b      	b.n	363c8 <nrf91_socket_offload_getaddrinfo+0x1ba>
		return AF_PACKET;
   36330:	2303      	movs	r3, #3
   36332:	e7de      	b.n	362f2 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_INET6;
   36334:	2302      	movs	r3, #2
   36336:	e7dc      	b.n	362f2 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (nrf_family) {
   36338:	2301      	movs	r3, #1
   3633a:	e7da      	b.n	362f2 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_LTE;
   3633c:	460b      	mov	r3, r1
   3633e:	e7d8      	b.n	362f2 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (proto) {
   36340:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   36344:	d1e1      	bne.n	3630a <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   36346:	f44f 7381 	mov.w	r3, #258	; 0x102
   3634a:	e025      	b.n	36398 <nrf91_socket_offload_getaddrinfo+0x18a>
	switch (proto) {
   3634c:	f240 2302 	movw	r3, #514	; 0x202
   36350:	429a      	cmp	r2, r3
   36352:	d007      	beq.n	36364 <nrf91_socket_offload_getaddrinfo+0x156>
   36354:	f240 2303 	movw	r3, #515	; 0x203
   36358:	429a      	cmp	r2, r3
   3635a:	d003      	beq.n	36364 <nrf91_socket_offload_getaddrinfo+0x156>
   3635c:	f240 2301 	movw	r3, #513	; 0x201
   36360:	429a      	cmp	r2, r3
   36362:	d1d2      	bne.n	3630a <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   36364:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   36366:	2902      	cmp	r1, #2
   36368:	d11c      	bne.n	363a4 <nrf91_socket_offload_getaddrinfo+0x196>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   3636a:	2008      	movs	r0, #8
   3636c:	f7fc fc04 	bl	32b78 <k_malloc>
   36370:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   36372:	b320      	cbz	r0, 363be <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   36374:	2308      	movs	r3, #8
   36376:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   36378:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   3637a:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3637c:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   3637e:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   36380:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   36382:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   36384:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   36386:	f1b8 0f00 	cmp.w	r8, #0
   3638a:	d123      	bne.n	363d4 <nrf91_socket_offload_getaddrinfo+0x1c6>
			*res = next_z_res;
   3638c:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   3638e:	46a0      	mov	r8, r4
   36390:	69f6      	ldr	r6, [r6, #28]
   36392:	e78a      	b.n	362aa <nrf91_socket_offload_getaddrinfo+0x9c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   36394:	f240 1311 	movw	r3, #273	; 0x111
   36398:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   3639a:	e7e4      	b.n	36366 <nrf91_socket_offload_getaddrinfo+0x158>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3639c:	2311      	movs	r3, #17
   3639e:	e7fb      	b.n	36398 <nrf91_socket_offload_getaddrinfo+0x18a>
   363a0:	2306      	movs	r3, #6
   363a2:	e7f9      	b.n	36398 <nrf91_socket_offload_getaddrinfo+0x18a>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   363a4:	290a      	cmp	r1, #10
   363a6:	d1b5      	bne.n	36314 <nrf91_socket_offload_getaddrinfo+0x106>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   363a8:	2018      	movs	r0, #24
   363aa:	f7fc fbe5 	bl	32b78 <k_malloc>
   363ae:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   363b0:	b128      	cbz	r0, 363be <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   363b2:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   363b4:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   363b6:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   363b8:	f7ff fed6 	bl	36168 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   363bc:	e7e3      	b.n	36386 <nrf91_socket_offload_getaddrinfo+0x178>
			k_free(next_z_res);
   363be:	4620      	mov	r0, r4
   363c0:	f000 ffe2 	bl	37388 <k_free>
			retval = DNS_EAI_MEMORY;
   363c4:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   363c8:	6838      	ldr	r0, [r7, #0]
   363ca:	f7ff fe9b 	bl	36104 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   363ce:	2300      	movs	r3, #0
   363d0:	603b      	str	r3, [r7, #0]
   363d2:	e76b      	b.n	362ac <nrf91_socket_offload_getaddrinfo+0x9e>
			latest_z_res->ai_next = next_z_res;
   363d4:	f8c8 4000 	str.w	r4, [r8]
   363d8:	e7d9      	b.n	3638e <nrf91_socket_offload_getaddrinfo+0x180>
			return DNS_EAI_SOCKTYPE;
   363da:	f06f 0506 	mvn.w	r5, #6
   363de:	e74c      	b.n	3627a <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   363e0:	f06f 0508 	mvn.w	r5, #8
   363e4:	e749      	b.n	3627a <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   363e6:	f06f 0501 	mvn.w	r5, #1
   363ea:	e746      	b.n	3627a <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   363ec:	f06f 0509 	mvn.w	r5, #9
   363f0:	e743      	b.n	3627a <nrf91_socket_offload_getaddrinfo+0x6c>

000363f2 <z_to_nrf_ipv6>:
{
   363f2:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   363f4:	2124      	movs	r1, #36	; 0x24
   363f6:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   363f8:	8841      	ldrh	r1, [r0, #2]
{
   363fa:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   363fc:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   363fe:	210a      	movs	r1, #10
{
   36400:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   36402:	6059      	str	r1, [r3, #4]
   36404:	1d04      	adds	r4, r0, #4
   36406:	f103 0610 	add.w	r6, r3, #16
   3640a:	f100 0714 	add.w	r7, r0, #20
   3640e:	4635      	mov	r5, r6
   36410:	6820      	ldr	r0, [r4, #0]
   36412:	6861      	ldr	r1, [r4, #4]
   36414:	3408      	adds	r4, #8
   36416:	c503      	stmia	r5!, {r0, r1}
   36418:	42bc      	cmp	r4, r7
   3641a:	462e      	mov	r6, r5
   3641c:	d1f7      	bne.n	3640e <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   3641e:	7d12      	ldrb	r2, [r2, #20]
   36420:	621a      	str	r2, [r3, #32]
}
   36422:	bdf0      	pop	{r4, r5, r6, r7, pc}

00036424 <nrf91_socket_offload_sendto>:
{
   36424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36428:	b08e      	sub	sp, #56	; 0x38
   3642a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3642c:	460e      	mov	r6, r1
   3642e:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   36430:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   36432:	b974      	cbnz	r4, 36452 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   36434:	4618      	mov	r0, r3
   36436:	9203      	str	r2, [sp, #12]
   36438:	f7ff fda1 	bl	35f7e <z_to_nrf_flags>
   3643c:	4603      	mov	r3, r0
   3643e:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   36442:	4631      	mov	r1, r6
   36444:	4628      	mov	r0, r5
   36446:	9a03      	ldr	r2, [sp, #12]
   36448:	f7f8 ff68 	bl	2f31c <nrf_sendto>
}
   3644c:	b00e      	add	sp, #56	; 0x38
   3644e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   36452:	8823      	ldrh	r3, [r4, #0]
   36454:	9203      	str	r2, [sp, #12]
   36456:	2b01      	cmp	r3, #1
   36458:	d113      	bne.n	36482 <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   3645a:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3645c:	f04f 0810 	mov.w	r8, #16
	nrf_out->sin_port = ptr->sin_port;
   36460:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   36464:	2302      	movs	r3, #2
   36466:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   36468:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3646a:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3646c:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3646e:	f88d 8014 	strb.w	r8, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   36472:	f7ff fd84 	bl	35f7e <z_to_nrf_flags>
   36476:	a905      	add	r1, sp, #20
   36478:	4603      	mov	r3, r0
   3647a:	f8cd 8004 	str.w	r8, [sp, #4]
   3647e:	9100      	str	r1, [sp, #0]
   36480:	e7df      	b.n	36442 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   36482:	2b02      	cmp	r3, #2
   36484:	d10d      	bne.n	364a2 <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   36486:	f10d 0814 	add.w	r8, sp, #20
   3648a:	4641      	mov	r1, r8
   3648c:	4620      	mov	r0, r4
   3648e:	f7ff ffb0 	bl	363f2 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   36492:	4638      	mov	r0, r7
   36494:	f7ff fd73 	bl	35f7e <z_to_nrf_flags>
   36498:	2124      	movs	r1, #36	; 0x24
   3649a:	4603      	mov	r3, r0
   3649c:	e9cd 8100 	strd	r8, r1, [sp]
   364a0:	e7cf      	b.n	36442 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   364a2:	f7fe ff38 	bl	35316 <__errno>
   364a6:	2386      	movs	r3, #134	; 0x86
   364a8:	6003      	str	r3, [r0, #0]
	return retval;
   364aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   364ae:	e7cd      	b.n	3644c <nrf91_socket_offload_sendto+0x28>

000364b0 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   364b0:	2300      	movs	r3, #0
{
   364b2:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   364b4:	e9cd 3300 	strd	r3, r3, [sp]
   364b8:	f7ff ffb4 	bl	36424 <nrf91_socket_offload_sendto>
}
   364bc:	b003      	add	sp, #12
   364be:	f85d fb04 	ldr.w	pc, [sp], #4

000364c2 <nrf91_socket_offload_connect>:
{
   364c2:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   364c4:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   364c6:	8808      	ldrh	r0, [r1, #0]
{
   364c8:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   364ca:	2801      	cmp	r0, #1
{
   364cc:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   364ce:	d10f      	bne.n	364f0 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   364d0:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   364d2:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   364d4:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   364d8:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   364da:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   364dc:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   364e0:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   364e2:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   364e4:	4620      	mov	r0, r4
   364e6:	a901      	add	r1, sp, #4
   364e8:	f7f8 ff84 	bl	2f3f4 <nrf_connect>
}
   364ec:	b00a      	add	sp, #40	; 0x28
   364ee:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   364f0:	2802      	cmp	r0, #2
   364f2:	d105      	bne.n	36500 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   364f4:	4618      	mov	r0, r3
   364f6:	a901      	add	r1, sp, #4
   364f8:	f7ff ff7b 	bl	363f2 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   364fc:	2224      	movs	r2, #36	; 0x24
   364fe:	e7f1      	b.n	364e4 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   36500:	4620      	mov	r0, r4
   36502:	f7f8 ff77 	bl	2f3f4 <nrf_connect>
		if (retval < 0) {
   36506:	2800      	cmp	r0, #0
   36508:	daf0      	bge.n	364ec <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   3650a:	f7fe ff04 	bl	35316 <__errno>
   3650e:	2386      	movs	r3, #134	; 0x86
   36510:	6003      	str	r3, [r0, #0]
   36512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   36516:	e7e9      	b.n	364ec <nrf91_socket_offload_connect+0x2a>

00036518 <nrf91_socket_offload_setsockopt>:
{
   36518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3651c:	461e      	mov	r6, r3
	switch (z_in_level) {
   3651e:	f240 2302 	movw	r3, #514	; 0x202
{
   36522:	b086      	sub	sp, #24
	switch (z_in_level) {
   36524:	4299      	cmp	r1, r3
{
   36526:	460c      	mov	r4, r1
   36528:	4615      	mov	r5, r2
   3652a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   3652c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   36530:	d005      	beq.n	3653e <nrf91_socket_offload_setsockopt+0x26>
   36532:	dc20      	bgt.n	36576 <nrf91_socket_offload_setsockopt+0x5e>
   36534:	2901      	cmp	r1, #1
   36536:	d002      	beq.n	3653e <nrf91_socket_offload_setsockopt+0x26>
   36538:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3653c:	d126      	bne.n	3658c <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3653e:	4629      	mov	r1, r5
   36540:	4620      	mov	r0, r4
   36542:	aa03      	add	r2, sp, #12
   36544:	f7ef fbc4 	bl	25cd0 <z_to_nrf_optname>
   36548:	2800      	cmp	r0, #0
   3654a:	db1f      	blt.n	3658c <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3654c:	2c01      	cmp	r4, #1
   3654e:	d116      	bne.n	3657e <nrf91_socket_offload_setsockopt+0x66>
   36550:	3d14      	subs	r5, #20
   36552:	2d01      	cmp	r5, #1
   36554:	d805      	bhi.n	36562 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   36556:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   36558:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3655a:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3655c:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3655e:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   36560:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   36562:	4633      	mov	r3, r6
   36564:	4621      	mov	r1, r4
   36566:	4640      	mov	r0, r8
   36568:	9a03      	ldr	r2, [sp, #12]
   3656a:	9700      	str	r7, [sp, #0]
   3656c:	f7f8 ff8c 	bl	2f488 <nrf_setsockopt>
}
   36570:	b006      	add	sp, #24
   36572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   36576:	f240 2303 	movw	r3, #515	; 0x203
   3657a:	4299      	cmp	r1, r3
   3657c:	e7de      	b.n	3653c <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3657e:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   36582:	d1ee      	bne.n	36562 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   36584:	2d08      	cmp	r5, #8
   36586:	bf08      	it	eq
   36588:	2701      	moveq	r7, #1
   3658a:	e7ea      	b.n	36562 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   3658c:	f7fe fec3 	bl	35316 <__errno>
   36590:	236d      	movs	r3, #109	; 0x6d
   36592:	6003      	str	r3, [r0, #0]
   36594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   36598:	e7ea      	b.n	36570 <nrf91_socket_offload_setsockopt+0x58>

0003659a <nrf91_socket_offload_bind>:
{
   3659a:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   3659c:	880a      	ldrh	r2, [r1, #0]
{
   3659e:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   365a0:	2a01      	cmp	r2, #1
{
   365a2:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   365a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
	if (addr->sa_family == AF_INET) {
   365a8:	d10f      	bne.n	365ca <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   365aa:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   365ac:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   365ae:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   365b2:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   365b4:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   365b6:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   365ba:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   365bc:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   365be:	4620      	mov	r0, r4
   365c0:	a901      	add	r1, sp, #4
   365c2:	f7f8 ff4f 	bl	2f464 <nrf_bind>
}
   365c6:	b00a      	add	sp, #40	; 0x28
   365c8:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   365ca:	2a02      	cmp	r2, #2
   365cc:	d105      	bne.n	365da <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   365ce:	4618      	mov	r0, r3
   365d0:	a901      	add	r1, sp, #4
   365d2:	f7ff ff0e 	bl	363f2 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   365d6:	2224      	movs	r2, #36	; 0x24
   365d8:	e7f1      	b.n	365be <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   365da:	f7fe fe9c 	bl	35316 <__errno>
   365de:	2386      	movs	r3, #134	; 0x86
   365e0:	6003      	str	r3, [r0, #0]
   365e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   365e6:	e7ee      	b.n	365c6 <nrf91_socket_offload_bind+0x2c>

000365e8 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   365e8:	280d      	cmp	r0, #13
   365ea:	d004      	beq.n	365f6 <is_lfcr+0xe>
   365ec:	f1a0 030a 	sub.w	r3, r0, #10
   365f0:	4258      	negs	r0, r3
   365f2:	4158      	adcs	r0, r3
   365f4:	4770      	bx	lr
		return true;
   365f6:	2001      	movs	r0, #1
}
   365f8:	4770      	bx	lr

000365fa <skip_command_prefix>:
{
   365fa:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   365fc:	6801      	ldr	r1, [r0, #0]
{
   365fe:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   36600:	1c8b      	adds	r3, r1, #2
   36602:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   36604:	788c      	ldrb	r4, [r1, #2]
   36606:	4620      	mov	r0, r4
   36608:	f7ff ffee 	bl	365e8 <is_lfcr>
   3660c:	b910      	cbnz	r0, 36614 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3660e:	b10c      	cbz	r4, 36614 <skip_command_prefix+0x1a>
	(*cmd)++;
   36610:	3103      	adds	r1, #3
   36612:	6011      	str	r1, [r2, #0]
}
   36614:	bd10      	pop	{r4, pc}

00036616 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   36616:	6813      	ldr	r3, [r2, #0]
   36618:	f7f0 bafa 	b.w	26c10 <at_parser_max_params_from_str>

0003661c <at_parser_cmd_type_get>:

enum at_cmd_type at_parser_cmd_type_get(const char *at_cmd)
{
   3661c:	b507      	push	{r0, r1, r2, lr}
   3661e:	9001      	str	r0, [sp, #4]
	enum at_cmd_type type;

	if (!is_command(at_cmd)) {
   36620:	f7f0 fa66 	bl	26af0 <is_command>
   36624:	b178      	cbz	r0, 36646 <at_parser_cmd_type_get+0x2a>
		return AT_CMD_TYPE_UNKNOWN;
	}

	skip_command_prefix(&at_cmd);
   36626:	a801      	add	r0, sp, #4
   36628:	f7ff ffe7 	bl	365fa <skip_command_prefix>

	while (is_valid_notification_char(*at_cmd)) {
   3662c:	9901      	ldr	r1, [sp, #4]
   3662e:	780a      	ldrb	r2, [r1, #0]
   36630:	4610      	mov	r0, r2
   36632:	f7f0 f96f 	bl	26914 <is_valid_notification_char>
   36636:	b948      	cbnz	r0, 3664c <at_parser_cmd_type_get+0x30>
		at_cmd++;
	}

	if ((*at_cmd == AT_CMD_SEPARATOR) &&
   36638:	2a3d      	cmp	r2, #61	; 0x3d
   3663a:	d114      	bne.n	36666 <at_parser_cmd_type_get+0x4a>
   3663c:	784b      	ldrb	r3, [r1, #1]
	    (*(at_cmd + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
		type = AT_CMD_TYPE_TEST_COMMAND;
   3663e:	2b3f      	cmp	r3, #63	; 0x3f
   36640:	bf14      	ite	ne
   36642:	2001      	movne	r0, #1
   36644:	2003      	moveq	r0, #3
	} else {
		type = AT_CMD_TYPE_UNKNOWN;
	}

	return type;
}
   36646:	b003      	add	sp, #12
   36648:	f85d fb04 	ldr.w	pc, [sp], #4
		at_cmd++;
   3664c:	3101      	adds	r1, #1
   3664e:	9101      	str	r1, [sp, #4]
   36650:	e7ec      	b.n	3662c <at_parser_cmd_type_get+0x10>
	} else if ((*at_cmd == AT_CMD_SEPARATOR) || is_lfcr(*at_cmd) ||
   36652:	4610      	mov	r0, r2
   36654:	f7ff ffc8 	bl	365e8 <is_lfcr>
   36658:	b918      	cbnz	r0, 36662 <at_parser_cmd_type_get+0x46>
		return AT_CMD_TYPE_UNKNOWN;
   3665a:	fab2 f082 	clz	r0, r2
   3665e:	0940      	lsrs	r0, r0, #5
   36660:	e7f1      	b.n	36646 <at_parser_cmd_type_get+0x2a>
		type = AT_CMD_TYPE_SET_COMMAND;
   36662:	2001      	movs	r0, #1
   36664:	e7ef      	b.n	36646 <at_parser_cmd_type_get+0x2a>
	} else if (*at_cmd == AT_CMD_READ_TEST_IDENTIFIER) {
   36666:	2a3f      	cmp	r2, #63	; 0x3f
   36668:	d1f3      	bne.n	36652 <at_parser_cmd_type_get+0x36>
		type = AT_CMD_TYPE_READ_COMMAND;
   3666a:	2002      	movs	r0, #2
   3666c:	e7eb      	b.n	36646 <at_parser_cmd_type_get+0x2a>

0003666e <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   3666e:	6803      	ldr	r3, [r0, #0]
   36670:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   36672:	bf83      	ittte	hi
   36674:	230c      	movhi	r3, #12
   36676:	6840      	ldrhi	r0, [r0, #4]
   36678:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   3667c:	2000      	movls	r0, #0
}
   3667e:	4770      	bx	lr

00036680 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   36680:	7803      	ldrb	r3, [r0, #0]
   36682:	2b01      	cmp	r3, #1
   36684:	d006      	beq.n	36694 <at_param_size+0x14>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   36686:	2b02      	cmp	r3, #2
   36688:	d006      	beq.n	36698 <at_param_size+0x18>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   3668a:	3b03      	subs	r3, #3
   3668c:	2b01      	cmp	r3, #1
   3668e:	d805      	bhi.n	3669c <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   36690:	6840      	ldr	r0, [r0, #4]
   36692:	4770      	bx	lr
		return sizeof(uint16_t);
   36694:	2002      	movs	r0, #2
   36696:	4770      	bx	lr
		return sizeof(uint32_t);
   36698:	2004      	movs	r0, #4
   3669a:	4770      	bx	lr
	}

	return 0;
   3669c:	2000      	movs	r0, #0
}
   3669e:	4770      	bx	lr

000366a0 <at_param_clear>:
{
   366a0:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   366a2:	7803      	ldrb	r3, [r0, #0]
{
   366a4:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   366a6:	3b03      	subs	r3, #3
   366a8:	2b01      	cmp	r3, #1
   366aa:	d802      	bhi.n	366b2 <at_param_clear+0x12>
		k_free(param->value.str_val);
   366ac:	6880      	ldr	r0, [r0, #8]
   366ae:	f000 fe6b 	bl	37388 <k_free>
	param->value.int_val = 0;
   366b2:	2300      	movs	r3, #0
   366b4:	60a3      	str	r3, [r4, #8]
}
   366b6:	bd10      	pop	{r4, pc}

000366b8 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   366b8:	b538      	push	{r3, r4, r5, lr}
   366ba:	460d      	mov	r5, r1
	if (list == NULL) {
   366bc:	4604      	mov	r4, r0
   366be:	b140      	cbz	r0, 366d2 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   366c0:	210c      	movs	r1, #12
   366c2:	4628      	mov	r0, r5
   366c4:	f000 fe65 	bl	37392 <k_calloc>
   366c8:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   366ca:	b128      	cbz	r0, 366d8 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   366cc:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   366ce:	6025      	str	r5, [r4, #0]
}
   366d0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   366d2:	f06f 0015 	mvn.w	r0, #21
   366d6:	e7fb      	b.n	366d0 <at_params_list_init+0x18>
		return -ENOMEM;
   366d8:	f06f 000b 	mvn.w	r0, #11
   366dc:	e7f8      	b.n	366d0 <at_params_list_init+0x18>

000366de <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   366de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (list == NULL || list->params == NULL) {
   366e2:	4604      	mov	r4, r0
   366e4:	b140      	cbz	r0, 366f8 <at_params_list_clear+0x1a>
   366e6:	6843      	ldr	r3, [r0, #4]
   366e8:	b133      	cbz	r3, 366f8 <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   366ea:	2500      	movs	r5, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   366ec:	f04f 0a0c 	mov.w	sl, #12
__ssp_bos_icheck3(memset, void *, int)
   366f0:	462e      	mov	r6, r5
	for (size_t i = 0; i < list->param_count; ++i) {
   366f2:	6823      	ldr	r3, [r4, #0]
   366f4:	429d      	cmp	r5, r3
   366f6:	d301      	bcc.n	366fc <at_params_list_clear+0x1e>
		at_param_init(&params[i]);
	}
}
   366f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		at_param_clear(&params[i]);
   366fc:	fb0a f805 	mul.w	r8, sl, r5
   36700:	f8d4 9004 	ldr.w	r9, [r4, #4]
	for (size_t i = 0; i < list->param_count; ++i) {
   36704:	3501      	adds	r5, #1
		at_param_clear(&params[i]);
   36706:	eb09 0708 	add.w	r7, r9, r8
   3670a:	4638      	mov	r0, r7
   3670c:	f7ff ffc8 	bl	366a0 <at_param_clear>
   36710:	f849 6008 	str.w	r6, [r9, r8]
   36714:	607e      	str	r6, [r7, #4]
   36716:	60be      	str	r6, [r7, #8]
	for (size_t i = 0; i < list->param_count; ++i) {
   36718:	e7eb      	b.n	366f2 <at_params_list_clear+0x14>

0003671a <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   3671a:	b538      	push	{r3, r4, r5, lr}
   3671c:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3671e:	b160      	cbz	r0, 3673a <at_params_short_put+0x20>
   36720:	6843      	ldr	r3, [r0, #4]
   36722:	b153      	cbz	r3, 3673a <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   36724:	f7ff ffa3 	bl	3666e <at_params_get>

	if (param == NULL) {
   36728:	4604      	mov	r4, r0
   3672a:	b130      	cbz	r0, 3673a <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   3672c:	f7ff ffb8 	bl	366a0 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   36730:	2301      	movs	r3, #1
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
   36732:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   36734:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   36736:	60a5      	str	r5, [r4, #8]
}
   36738:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3673a:	f06f 0015 	mvn.w	r0, #21
   3673e:	e7fb      	b.n	36738 <at_params_short_put+0x1e>

00036740 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   36740:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   36742:	b160      	cbz	r0, 3675e <at_params_empty_put+0x1e>
   36744:	6843      	ldr	r3, [r0, #4]
   36746:	b153      	cbz	r3, 3675e <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   36748:	f7ff ff91 	bl	3666e <at_params_get>

	if (param == NULL) {
   3674c:	4604      	mov	r4, r0
   3674e:	b130      	cbz	r0, 3675e <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   36750:	f7ff ffa6 	bl	366a0 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   36754:	2305      	movs	r3, #5
	param->value.int_val = 0;
   36756:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   36758:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3675a:	60a0      	str	r0, [r4, #8]

	return 0;
}
   3675c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3675e:	f06f 0015 	mvn.w	r0, #21
   36762:	e7fb      	b.n	3675c <at_params_empty_put+0x1c>

00036764 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   36764:	b538      	push	{r3, r4, r5, lr}
   36766:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   36768:	b160      	cbz	r0, 36784 <at_params_int_put+0x20>
   3676a:	6843      	ldr	r3, [r0, #4]
   3676c:	b153      	cbz	r3, 36784 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3676e:	f7ff ff7e 	bl	3666e <at_params_get>

	if (param == NULL) {
   36772:	4604      	mov	r4, r0
   36774:	b130      	cbz	r0, 36784 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   36776:	f7ff ff93 	bl	366a0 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   3677a:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   3677c:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   3677e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   36780:	60a5      	str	r5, [r4, #8]
}
   36782:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   36784:	f06f 0015 	mvn.w	r0, #21
   36788:	e7fb      	b.n	36782 <at_params_int_put+0x1e>

0003678a <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   3678a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3678c:	4617      	mov	r7, r2
   3678e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   36790:	b1c0      	cbz	r0, 367c4 <at_params_string_put+0x3a>
   36792:	6843      	ldr	r3, [r0, #4]
   36794:	b1b3      	cbz	r3, 367c4 <at_params_string_put+0x3a>
   36796:	b1aa      	cbz	r2, 367c4 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   36798:	f7ff ff69 	bl	3666e <at_params_get>

	if (param == NULL) {
   3679c:	4604      	mov	r4, r0
   3679e:	b188      	cbz	r0, 367c4 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   367a0:	1c68      	adds	r0, r5, #1
   367a2:	f7fc f9e9 	bl	32b78 <k_malloc>

	if (param_value == NULL) {
   367a6:	4606      	mov	r6, r0
   367a8:	b178      	cbz	r0, 367ca <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   367aa:	462a      	mov	r2, r5
   367ac:	4639      	mov	r1, r7
   367ae:	f000 fe28 	bl	37402 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   367b2:	4620      	mov	r0, r4
   367b4:	f7ff ff74 	bl	366a0 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   367b8:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   367ba:	2000      	movs	r0, #0
	param->size = str_len;
   367bc:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   367be:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   367c0:	60a6      	str	r6, [r4, #8]
}
   367c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   367c4:	f06f 0015 	mvn.w	r0, #21
   367c8:	e7fb      	b.n	367c2 <at_params_string_put+0x38>
		return -ENOMEM;
   367ca:	f06f 000b 	mvn.w	r0, #11
   367ce:	e7f8      	b.n	367c2 <at_params_string_put+0x38>

000367d0 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   367d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   367d2:	4617      	mov	r7, r2
   367d4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   367d6:	b1c0      	cbz	r0, 3680a <at_params_array_put+0x3a>
   367d8:	6843      	ldr	r3, [r0, #4]
   367da:	b1b3      	cbz	r3, 3680a <at_params_array_put+0x3a>
   367dc:	b1aa      	cbz	r2, 3680a <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   367de:	f7ff ff46 	bl	3666e <at_params_get>

	if (param == NULL) {
   367e2:	4604      	mov	r4, r0
   367e4:	b188      	cbz	r0, 3680a <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   367e6:	4628      	mov	r0, r5
   367e8:	f7fc f9c6 	bl	32b78 <k_malloc>

	if (param_value == NULL) {
   367ec:	4606      	mov	r6, r0
   367ee:	b178      	cbz	r0, 36810 <at_params_array_put+0x40>
   367f0:	462a      	mov	r2, r5
   367f2:	4639      	mov	r1, r7
   367f4:	f000 fe05 	bl	37402 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   367f8:	4620      	mov	r0, r4
   367fa:	f7ff ff51 	bl	366a0 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   367fe:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   36800:	2000      	movs	r0, #0
	param->size = array_len;
   36802:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   36804:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   36806:	60a6      	str	r6, [r4, #8]
}
   36808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   3680a:	f06f 0015 	mvn.w	r0, #21
   3680e:	e7fb      	b.n	36808 <at_params_array_put+0x38>
		return -ENOMEM;
   36810:	f06f 000b 	mvn.w	r0, #11
   36814:	e7f8      	b.n	36808 <at_params_array_put+0x38>

00036816 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   36816:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   36818:	b160      	cbz	r0, 36834 <at_params_short_get+0x1e>
   3681a:	6843      	ldr	r3, [r0, #4]
   3681c:	b153      	cbz	r3, 36834 <at_params_short_get+0x1e>
   3681e:	b14a      	cbz	r2, 36834 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   36820:	f7ff ff25 	bl	3666e <at_params_get>

	if (param == NULL) {
   36824:	b130      	cbz	r0, 36834 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   36826:	7803      	ldrb	r3, [r0, #0]
   36828:	2b01      	cmp	r3, #1
   3682a:	d103      	bne.n	36834 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
   3682c:	6883      	ldr	r3, [r0, #8]
	return 0;
   3682e:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   36830:	8013      	strh	r3, [r2, #0]
}
   36832:	bd08      	pop	{r3, pc}
		return -EINVAL;
   36834:	f06f 0015 	mvn.w	r0, #21
   36838:	e7fb      	b.n	36832 <at_params_short_get+0x1c>

0003683a <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   3683a:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   3683c:	b168      	cbz	r0, 3685a <at_params_int_get+0x20>
   3683e:	6843      	ldr	r3, [r0, #4]
   36840:	b15b      	cbz	r3, 3685a <at_params_int_get+0x20>
   36842:	b152      	cbz	r2, 3685a <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   36844:	f7ff ff13 	bl	3666e <at_params_get>

	if (param == NULL) {
   36848:	b138      	cbz	r0, 3685a <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   3684a:	7803      	ldrb	r3, [r0, #0]
   3684c:	3b01      	subs	r3, #1
   3684e:	2b01      	cmp	r3, #1
   36850:	d803      	bhi.n	3685a <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   36852:	6883      	ldr	r3, [r0, #8]
	return 0;
   36854:	2000      	movs	r0, #0
	*value = param->value.int_val;
   36856:	6013      	str	r3, [r2, #0]
}
   36858:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3685a:	f06f 0015 	mvn.w	r0, #21
   3685e:	e7fb      	b.n	36858 <at_params_int_get+0x1e>

00036860 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   36860:	b570      	push	{r4, r5, r6, lr}
   36862:	4616      	mov	r6, r2
   36864:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   36866:	b1c0      	cbz	r0, 3689a <at_params_string_get+0x3a>
   36868:	6843      	ldr	r3, [r0, #4]
   3686a:	b1b3      	cbz	r3, 3689a <at_params_string_get+0x3a>
   3686c:	b1aa      	cbz	r2, 3689a <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   3686e:	b1a4      	cbz	r4, 3689a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   36870:	f7ff fefd 	bl	3666e <at_params_get>

	if (param == NULL) {
   36874:	4601      	mov	r1, r0
   36876:	b180      	cbz	r0, 3689a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   36878:	7803      	ldrb	r3, [r0, #0]
   3687a:	2b03      	cmp	r3, #3
   3687c:	d10d      	bne.n	3689a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   3687e:	f7ff feff 	bl	36680 <at_param_size>

	if (*len < param_len) {
   36882:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   36884:	4605      	mov	r5, r0
	if (*len < param_len) {
   36886:	4283      	cmp	r3, r0
   36888:	d30a      	bcc.n	368a0 <at_params_string_get+0x40>
   3688a:	4602      	mov	r2, r0
   3688c:	6889      	ldr	r1, [r1, #8]
   3688e:	4630      	mov	r0, r6
   36890:	f000 fdb7 	bl	37402 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   36894:	2000      	movs	r0, #0
	*len = param_len;
   36896:	6025      	str	r5, [r4, #0]
}
   36898:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3689a:	f06f 0015 	mvn.w	r0, #21
   3689e:	e7fb      	b.n	36898 <at_params_string_get+0x38>
		return -ENOMEM;
   368a0:	f06f 000b 	mvn.w	r0, #11
   368a4:	e7f8      	b.n	36898 <at_params_string_get+0x38>

000368a6 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   368a6:	4602      	mov	r2, r0
{
   368a8:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   368aa:	b170      	cbz	r0, 368ca <at_params_valid_count_get+0x24>
   368ac:	6840      	ldr	r0, [r0, #4]
   368ae:	b160      	cbz	r0, 368ca <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   368b0:	6811      	ldr	r1, [r2, #0]
   368b2:	b141      	cbz	r1, 368c6 <at_params_valid_count_get+0x20>
   368b4:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   368b6:	7803      	ldrb	r3, [r0, #0]
   368b8:	b12b      	cbz	r3, 368c6 <at_params_valid_count_get+0x20>
		valid_i += 1;
		param = at_params_get(list, valid_i);
   368ba:	4610      	mov	r0, r2
		valid_i += 1;
   368bc:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   368be:	f7ff fed6 	bl	3666e <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   368c2:	2800      	cmp	r0, #0
   368c4:	d1f7      	bne.n	368b6 <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   368c6:	4608      	mov	r0, r1
   368c8:	bd08      	pop	{r3, pc}
		return -EINVAL;
   368ca:	f06f 0115 	mvn.w	r1, #21
   368ce:	e7fa      	b.n	368c6 <at_params_valid_count_get+0x20>

000368d0 <request_send>:
	switch (dl->proto) {
   368d0:	f8d0 3824 	ldr.w	r3, [r0, #2084]	; 0x824
   368d4:	2b06      	cmp	r3, #6
   368d6:	d002      	beq.n	368de <request_send+0xe>
   368d8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   368dc:	d101      	bne.n	368e2 <request_send+0x12>
		return http_get_request_send(dl);
   368de:	f7f1 b983 	b.w	27be8 <http_get_request_send>
}
   368e2:	2000      	movs	r0, #0
   368e4:	4770      	bx	lr

000368e6 <error_evt_send.isra.0>:
static int error_evt_send(const struct download_client *dl, int error)
   368e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   368e8:	2300      	movs	r3, #0
   368ea:	9301      	str	r3, [sp, #4]
   368ec:	9303      	str	r3, [sp, #12]
   368ee:	2301      	movs	r3, #1
static int error_evt_send(const struct download_client *dl, int error)
   368f0:	4602      	mov	r2, r0
		.error = -error
   368f2:	4249      	negs	r1, r1
	return dl->callback(&evt);
   368f4:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   368f6:	f88d 3004 	strb.w	r3, [sp, #4]
   368fa:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   368fc:	4790      	blx	r2
}
   368fe:	b005      	add	sp, #20
   36900:	f85d fb04 	ldr.w	pc, [sp], #4

00036904 <socket_send>:
{
   36904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	size_t off = 0;
   36908:	2500      	movs	r5, #0
{
   3690a:	4606      	mov	r6, r0
   3690c:	460c      	mov	r4, r1
   3690e:	462f      	mov	r7, r5
		sent = send(client->fd, client->buf + off, len, 0);
   36910:	f100 0804 	add.w	r8, r0, #4
	while (len) {
   36914:	b90c      	cbnz	r4, 3691a <socket_send+0x16>
	return 0;
   36916:	4620      	mov	r0, r4
   36918:	e00e      	b.n	36938 <socket_send+0x34>
		sent = send(client->fd, client->buf + off, len, 0);
   3691a:	6830      	ldr	r0, [r6, #0]
   3691c:	2300      	movs	r3, #0
   3691e:	4622      	mov	r2, r4
   36920:	e9cd 7700 	strd	r7, r7, [sp]
   36924:	eb08 0105 	add.w	r1, r8, r5
   36928:	f7fe fa5e 	bl	34de8 <z_impl_zsock_sendto>
		if (sent <= 0) {
   3692c:	1e03      	subs	r3, r0, #0
   3692e:	dc06      	bgt.n	3693e <socket_send+0x3a>
			return -errno;
   36930:	f7fe fcf1 	bl	35316 <__errno>
   36934:	6800      	ldr	r0, [r0, #0]
   36936:	4240      	negs	r0, r0
}
   36938:	b002      	add	sp, #8
   3693a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		off += sent;
   3693e:	441d      	add	r5, r3
		len -= sent;
   36940:	1ae4      	subs	r4, r4, r3
   36942:	e7e7      	b.n	36914 <socket_send+0x10>

00036944 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   36944:	b128      	cbz	r0, 36952 <download_client_file_size_get+0xe>
   36946:	b121      	cbz	r1, 36952 <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   36948:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

	return 0;
   3694c:	2000      	movs	r0, #0
	*size = client->file_size;
   3694e:	600b      	str	r3, [r1, #0]
	return 0;
   36950:	4770      	bx	lr
		return -EINVAL;
   36952:	f06f 0015 	mvn.w	r0, #21
}
   36956:	4770      	bx	lr

00036958 <swallow>:
{
   36958:	b570      	push	{r4, r5, r6, lr}
   3695a:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   3695c:	6800      	ldr	r0, [r0, #0]
{
   3695e:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   36960:	f000 ff02 	bl	37768 <strstr>
	if (!p) {
   36964:	4604      	mov	r4, r0
   36966:	b130      	cbz	r0, 36976 <swallow+0x1e>
	*str = p + strlen(swallow);
   36968:	4630      	mov	r0, r6
   3696a:	f7e2 fb81 	bl	19070 <strlen>
   3696e:	4404      	add	r4, r0
	return 0;
   36970:	2000      	movs	r0, #0
	*str = p + strlen(swallow);
   36972:	602c      	str	r4, [r5, #0]
}
   36974:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   36976:	2001      	movs	r0, #1
   36978:	e7fc      	b.n	36974 <swallow+0x1c>

0003697a <dfu_target_callback_handler>:
	switch (evt) {
   3697a:	b120      	cbz	r0, 36986 <dfu_target_callback_handler+0xc>
   3697c:	2801      	cmp	r0, #1
   3697e:	d005      	beq.n	3698c <dfu_target_callback_handler+0x12>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   36980:	2001      	movs	r0, #1
   36982:	f7f1 ba51 	b.w	27e28 <send_error_evt>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_PENDING);
   36986:	2002      	movs	r0, #2
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_DONE);
   36988:	f7f1 ba3e 	b.w	27e08 <send_evt>
   3698c:	2003      	movs	r0, #3
   3698e:	e7fb      	b.n	36988 <dfu_target_callback_handler+0xe>

00036990 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   36990:	4700      	bx	r0

00036992 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   36992:	f000 ba72 	b.w	36e7a <z_impl_k_busy_wait>

00036996 <nrfx_clock_enable>:
{
   36996:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   36998:	2005      	movs	r0, #5
   3699a:	f7eb f943 	bl	21c24 <arch_irq_is_enabled>
   3699e:	b920      	cbnz	r0, 369aa <nrfx_clock_enable+0x14>
}
   369a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   369a4:	2005      	movs	r0, #5
   369a6:	f7eb b919 	b.w	21bdc <arch_irq_enable>
   369aa:	bd08      	pop	{r3, pc}

000369ac <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   369ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   369b0:	4770      	bx	lr

000369b2 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   369b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   369b6:	4770      	bx	lr

000369b8 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   369b8:	f44f 7080 	mov.w	r0, #256	; 0x100
   369bc:	4770      	bx	lr

000369be <nrfx_timer_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   369be:	2201      	movs	r2, #1
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   369c0:	6803      	ldr	r3, [r0, #0]
   369c2:	60da      	str	r2, [r3, #12]
}
   369c4:	4770      	bx	lr

000369c6 <nrfx_timer_capture>:
                            nrf_timer_cc_channel_t cc_channel)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);

    nrf_timer_task_trigger(p_instance->p_reg,
   369c6:	6802      	ldr	r2, [r0, #0]
   369c8:	2001      	movs	r0, #1
    return (uint32_t)p_reg->CC[cc_channel];
}

NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get(uint32_t channel)
{
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   369ca:	008b      	lsls	r3, r1, #2
   369cc:	3340      	adds	r3, #64	; 0x40
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   369ce:	b2db      	uxtb	r3, r3
   369d0:	50d0      	str	r0, [r2, r3]
    return (uint32_t)p_reg->CC[cc_channel];
   369d2:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   369d6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
}
   369da:	4770      	bx	lr

000369dc <device_pm_control_nop>:
			  void *unused_context,
			  device_pm_cb cb,
			  void *unused_arg)
{
	return -ENOTSUP;
}
   369dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   369e0:	4770      	bx	lr

000369e2 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   369e2:	f7fe bbeb 	b.w	351bc <z_clock_idle_exit>

000369e6 <k_heap_init>:
{
   369e6:	b410      	push	{r4}
   369e8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   369ec:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   369f0:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   369f4:	f7fd bbfa 	b.w	341ec <sys_heap_init>

000369f8 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   369f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   369fc:	4605      	mov	r5, r0
   369fe:	b085      	sub	sp, #20
   36a00:	460f      	mov	r7, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   36a02:	4610      	mov	r0, r2
   36a04:	4619      	mov	r1, r3
   36a06:	f000 fafe 	bl	37006 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   36a0a:	f105 0b14 	add.w	fp, r5, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   36a0e:	9002      	str	r0, [sp, #8]
   36a10:	468a      	mov	sl, r1
	__asm__ volatile(
   36a12:	f04f 0320 	mov.w	r3, #32
   36a16:	f3ef 8411 	mrs	r4, BASEPRI
   36a1a:	f383 8811 	msr	BASEPRI, r3
   36a1e:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   36a22:	f105 060c 	add.w	r6, r5, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   36a26:	4639      	mov	r1, r7
   36a28:	4628      	mov	r0, r5
   36a2a:	f7fd fbab 	bl	34184 <sys_heap_alloc>
   36a2e:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   36a30:	f7fb ff82 	bl	32938 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   36a34:	9b03      	ldr	r3, [sp, #12]
   36a36:	b13b      	cbz	r3, 36a48 <k_heap_alloc+0x50>
	__asm__ volatile(
   36a38:	f384 8811 	msr	BASEPRI, r4
   36a3c:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   36a40:	4618      	mov	r0, r3
   36a42:	b005      	add	sp, #20
   36a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   36a48:	9a02      	ldr	r2, [sp, #8]
   36a4a:	ebb2 0800 	subs.w	r8, r2, r0
   36a4e:	eb6a 0901 	sbc.w	r9, sl, r1
   36a52:	f1b8 0f01 	cmp.w	r8, #1
   36a56:	f179 0200 	sbcs.w	r2, r9, #0
   36a5a:	dbed      	blt.n	36a38 <k_heap_alloc+0x40>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   36a5c:	4632      	mov	r2, r6
   36a5e:	4621      	mov	r1, r4
   36a60:	4658      	mov	r0, fp
   36a62:	e9cd 8900 	strd	r8, r9, [sp]
   36a66:	f7fb fb67 	bl	32138 <z_pend_curr>
	__asm__ volatile(
   36a6a:	f04f 0320 	mov.w	r3, #32
   36a6e:	f3ef 8411 	mrs	r4, BASEPRI
   36a72:	f383 8811 	msr	BASEPRI, r3
   36a76:	f3bf 8f6f 	isb	sy
   36a7a:	e7d4      	b.n	36a26 <k_heap_alloc+0x2e>

00036a7c <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   36a7c:	b538      	push	{r3, r4, r5, lr}
   36a7e:	4604      	mov	r4, r0
   36a80:	f04f 0320 	mov.w	r3, #32
   36a84:	f3ef 8511 	mrs	r5, BASEPRI
   36a88:	f383 8811 	msr	BASEPRI, r3
   36a8c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   36a90:	f7fd fb22 	bl	340d8 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   36a94:	f104 000c 	add.w	r0, r4, #12
   36a98:	f000 f9c9 	bl	36e2e <z_unpend_all>
   36a9c:	b130      	cbz	r0, 36aac <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   36a9e:	4629      	mov	r1, r5
   36aa0:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   36aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   36aa8:	f7fb b8e0 	b.w	31c6c <z_reschedule>
	__asm__ volatile(
   36aac:	f385 8811 	msr	BASEPRI, r5
   36ab0:	f3bf 8f6f 	isb	sy
}
   36ab4:	bd38      	pop	{r3, r4, r5, pc}

00036ab6 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   36ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36ab8:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   36abc:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   36abe:	6800      	ldr	r0, [r0, #0]
{
   36ac0:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   36ac2:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   36ac4:	4632      	mov	r2, r6
   36ac6:	463b      	mov	r3, r7
   36ac8:	4621      	mov	r1, r4
   36aca:	f7ff ff95 	bl	369f8 <k_heap_alloc>
   36ace:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   36ad0:	b144      	cbz	r4, 36ae4 <k_mem_pool_alloc+0x2e>
   36ad2:	b938      	cbnz	r0, 36ae4 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   36ad4:	ea56 0307 	orrs.w	r3, r6, r7
   36ad8:	bf0c      	ite	eq
   36ada:	f06f 000b 	mvneq.w	r0, #11
   36ade:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   36ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   36ae4:	2000      	movs	r0, #0
   36ae6:	e7fc      	b.n	36ae2 <k_mem_pool_alloc+0x2c>

00036ae8 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   36ae8:	e9d0 1000 	ldrd	r1, r0, [r0]
   36aec:	f7ff bfc6 	b.w	36a7c <k_heap_free>

00036af0 <k_mem_slab_init>:
{
   36af0:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   36af2:	2400      	movs	r4, #0
   36af4:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   36af6:	ea41 0402 	orr.w	r4, r1, r2
   36afa:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   36afe:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   36b02:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   36b04:	d10c      	bne.n	36b20 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   36b06:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   36b08:	42a3      	cmp	r3, r4
   36b0a:	d103      	bne.n	36b14 <k_mem_slab_init+0x24>
   36b0c:	e9c0 0000 	strd	r0, r0, [r0]
}
   36b10:	2000      	movs	r0, #0
}
   36b12:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   36b14:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   36b16:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   36b18:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   36b1a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   36b1c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   36b1e:	e7f3      	b.n	36b08 <k_mem_slab_init+0x18>
		return -EINVAL;
   36b20:	f06f 0015 	mvn.w	r0, #21
	return rc;
   36b24:	e7f5      	b.n	36b12 <k_mem_slab_init+0x22>

00036b26 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   36b26:	2300      	movs	r3, #0
   36b28:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   36b2c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   36b30:	4618      	mov	r0, r3
   36b32:	4770      	bx	lr

00036b34 <queue_insert>:
{
   36b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   36b38:	4699      	mov	r9, r3
   36b3a:	4604      	mov	r4, r0
   36b3c:	460d      	mov	r5, r1
   36b3e:	4690      	mov	r8, r2
   36b40:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   36b44:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   36b48:	f04f 0220 	mov.w	r2, #32
   36b4c:	f3ef 8711 	mrs	r7, BASEPRI
   36b50:	f382 8811 	msr	BASEPRI, r2
   36b54:	f3bf 8f6f 	isb	sy
	if (is_append) {
   36b58:	b103      	cbz	r3, 36b5c <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   36b5a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   36b5c:	4630      	mov	r0, r6
   36b5e:	f000 f941 	bl	36de4 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   36b62:	b160      	cbz	r0, 36b7e <queue_insert+0x4a>
   36b64:	2400      	movs	r4, #0
   36b66:	f8c0 8014 	str.w	r8, [r0, #20]
   36b6a:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
	z_ready_thread(thread);
   36b6e:	f000 f8de 	bl	36d2e <z_ready_thread>
	z_reschedule(&queue->lock, key);
   36b72:	4630      	mov	r0, r6
   36b74:	4639      	mov	r1, r7
   36b76:	f7fb f879 	bl	31c6c <z_reschedule>
	return 0;
   36b7a:	2000      	movs	r0, #0
   36b7c:	e00c      	b.n	36b98 <queue_insert+0x64>
	if (alloc) {
   36b7e:	f1b9 0f00 	cmp.w	r9, #0
   36b82:	d01b      	beq.n	36bbc <queue_insert+0x88>
		anode = z_thread_malloc(sizeof(*anode));
   36b84:	2008      	movs	r0, #8
   36b86:	f7fb fffd 	bl	32b84 <z_thread_malloc>
		if (anode == NULL) {
   36b8a:	b938      	cbnz	r0, 36b9c <queue_insert+0x68>
	__asm__ volatile(
   36b8c:	f387 8811 	msr	BASEPRI, r7
   36b90:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   36b94:	f06f 000b 	mvn.w	r0, #11
}
   36b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   36b9c:	2301      	movs	r3, #1
		anode->data = data;
   36b9e:	f8c0 8004 	str.w	r8, [r0, #4]
   36ba2:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   36ba4:	6803      	ldr	r3, [r0, #0]
   36ba6:	f003 0203 	and.w	r2, r3, #3
   36baa:	b95d      	cbnz	r5, 36bc4 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   36bac:	6823      	ldr	r3, [r4, #0]
   36bae:	4313      	orrs	r3, r2
   36bb0:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   36bb2:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   36bb4:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   36bb6:	b973      	cbnz	r3, 36bd6 <queue_insert+0xa2>
	list->tail = node;
   36bb8:	6060      	str	r0, [r4, #4]
}
   36bba:	e00c      	b.n	36bd6 <queue_insert+0xa2>
}
   36bbc:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   36bbe:	f8c8 9000 	str.w	r9, [r8]
}
   36bc2:	e7ef      	b.n	36ba4 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   36bc4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   36bc6:	f033 0303 	bics.w	r3, r3, #3
   36bca:	d110      	bne.n	36bee <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   36bcc:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   36bce:	6862      	ldr	r2, [r4, #4]
   36bd0:	b93a      	cbnz	r2, 36be2 <queue_insert+0xae>
	list->head = node;
   36bd2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   36bd6:	2104      	movs	r1, #4
   36bd8:	f104 0010 	add.w	r0, r4, #16
   36bdc:	f000 fbae 	bl	3733c <z_handle_obj_poll_events>
   36be0:	e7c7      	b.n	36b72 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36be2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36be4:	f003 0303 	and.w	r3, r3, #3
   36be8:	4303      	orrs	r3, r0
   36bea:	6013      	str	r3, [r2, #0]
   36bec:	e7e4      	b.n	36bb8 <queue_insert+0x84>
   36bee:	4313      	orrs	r3, r2
   36bf0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36bf2:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36bf4:	f003 0303 	and.w	r3, r3, #3
   36bf8:	4303      	orrs	r3, r0
   36bfa:	602b      	str	r3, [r5, #0]
}
   36bfc:	e7eb      	b.n	36bd6 <queue_insert+0xa2>

00036bfe <z_queue_node_peek>:
{
   36bfe:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   36c00:	4604      	mov	r4, r0
   36c02:	b130      	cbz	r0, 36c12 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36c04:	6802      	ldr	r2, [r0, #0]
   36c06:	0793      	lsls	r3, r2, #30
   36c08:	d003      	beq.n	36c12 <z_queue_node_peek+0x14>
		ret = anode->data;
   36c0a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   36c0c:	b109      	cbz	r1, 36c12 <z_queue_node_peek+0x14>
			k_free(anode);
   36c0e:	f000 fbbb 	bl	37388 <k_free>
}
   36c12:	4620      	mov	r0, r4
   36c14:	bd10      	pop	{r4, pc}

00036c16 <z_impl_k_queue_init>:
	list->head = NULL;
   36c16:	2300      	movs	r3, #0
	list->tail = NULL;
   36c18:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   36c1c:	f100 0308 	add.w	r3, r0, #8
   36c20:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   36c24:	f100 0310 	add.w	r3, r0, #16
   36c28:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   36c2c:	4770      	bx	lr

00036c2e <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   36c2e:	2301      	movs	r3, #1
{
   36c30:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   36c32:	9300      	str	r3, [sp, #0]
   36c34:	2300      	movs	r3, #0
{
   36c36:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   36c38:	4619      	mov	r1, r3
   36c3a:	f7ff ff7b 	bl	36b34 <queue_insert>
}
   36c3e:	b003      	add	sp, #12
   36c40:	f85d fb04 	ldr.w	pc, [sp], #4

00036c44 <z_swap_irqlock>:
{
   36c44:	b507      	push	{r0, r1, r2, lr}
   36c46:	9001      	str	r0, [sp, #4]
	z_check_stack_sentinel();
   36c48:	f7fb fbe4 	bl	32414 <z_check_stack_sentinel>
	ret = arch_swap(key);
   36c4c:	9801      	ldr	r0, [sp, #4]
}
   36c4e:	b003      	add	sp, #12
   36c50:	f85d eb04 	ldr.w	lr, [sp], #4
	ret = arch_swap(key);
   36c54:	f7ea bf3e 	b.w	21ad4 <arch_swap>

00036c58 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   36c58:	f990 000e 	ldrsb.w	r0, [r0, #14]
   36c5c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   36c60:	4298      	cmp	r0, r3
   36c62:	bfac      	ite	ge
   36c64:	2000      	movge	r0, #0
   36c66:	2001      	movlt	r0, #1
   36c68:	4770      	bx	lr

00036c6a <z_find_first_thread_to_unpend>:
{
   36c6a:	b510      	push	{r4, lr}
	__asm__ volatile(
   36c6c:	f04f 0320 	mov.w	r3, #32
   36c70:	f3ef 8411 	mrs	r4, BASEPRI
   36c74:	f383 8811 	msr	BASEPRI, r3
   36c78:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   36c7c:	f000 f84d 	bl	36d1a <z_priq_dumb_best>
	__asm__ volatile(
   36c80:	f384 8811 	msr	BASEPRI, r4
   36c84:	f3bf 8f6f 	isb	sy
}
   36c88:	bd10      	pop	{r4, pc}

00036c8a <z_unpend_thread_no_timeout>:
{
   36c8a:	b510      	push	{r4, lr}
	__asm__ volatile(
   36c8c:	f04f 0320 	mov.w	r3, #32
   36c90:	f3ef 8411 	mrs	r4, BASEPRI
   36c94:	f383 8811 	msr	BASEPRI, r3
   36c98:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   36c9c:	f000 f81b 	bl	36cd6 <unpend_thread_no_timeout>
	__asm__ volatile(
   36ca0:	f384 8811 	msr	BASEPRI, r4
   36ca4:	f3bf 8f6f 	isb	sy
}
   36ca8:	bd10      	pop	{r4, pc}

00036caa <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   36caa:	4603      	mov	r3, r0
   36cac:	b920      	cbnz	r0, 36cb8 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   36cae:	f3ef 8205 	mrs	r2, IPSR
   36cb2:	b90a      	cbnz	r2, 36cb8 <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   36cb4:	f7ff bfc6 	b.w	36c44 <z_swap_irqlock>
   36cb8:	f383 8811 	msr	BASEPRI, r3
   36cbc:	f3bf 8f6f 	isb	sy
}
   36cc0:	4770      	bx	lr

00036cc2 <z_reschedule_unlocked>:
	__asm__ volatile(
   36cc2:	f04f 0320 	mov.w	r3, #32
   36cc6:	f3ef 8011 	mrs	r0, BASEPRI
   36cca:	f383 8811 	msr	BASEPRI, r3
   36cce:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   36cd2:	f7ff bfea 	b.w	36caa <z_reschedule_irqlock>

00036cd6 <unpend_thread_no_timeout>:
{
   36cd6:	4601      	mov	r1, r0
   36cd8:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   36cda:	6880      	ldr	r0, [r0, #8]
   36cdc:	f7fa ffec 	bl	31cb8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   36ce0:	7b4b      	ldrb	r3, [r1, #13]
   36ce2:	f023 0302 	bic.w	r3, r3, #2
   36ce6:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   36ce8:	2300      	movs	r3, #0
   36cea:	608b      	str	r3, [r1, #8]
}
   36cec:	bd08      	pop	{r3, pc}

00036cee <z_unpend_thread>:
{
   36cee:	b538      	push	{r3, r4, r5, lr}
   36cf0:	4604      	mov	r4, r0
   36cf2:	f04f 0320 	mov.w	r3, #32
   36cf6:	f3ef 8511 	mrs	r5, BASEPRI
   36cfa:	f383 8811 	msr	BASEPRI, r3
   36cfe:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   36d02:	f7ff ffe8 	bl	36cd6 <unpend_thread_no_timeout>
	__asm__ volatile(
   36d06:	f385 8811 	msr	BASEPRI, r5
   36d0a:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   36d0e:	f104 0018 	add.w	r0, r4, #24
}
   36d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   36d16:	f000 b92f 	b.w	36f78 <z_abort_timeout>

00036d1a <z_priq_dumb_best>:
	return list->head == list;
   36d1a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36d1c:	4298      	cmp	r0, r3
   36d1e:	d004      	beq.n	36d2a <z_priq_dumb_best+0x10>
	if (n != NULL) {
   36d20:	2b00      	cmp	r3, #0
   36d22:	bf38      	it	cc
   36d24:	2300      	movcc	r3, #0
   36d26:	4618      	mov	r0, r3
   36d28:	4770      	bx	lr
	struct k_thread *thread = NULL;
   36d2a:	2000      	movs	r0, #0
}
   36d2c:	4770      	bx	lr

00036d2e <z_ready_thread>:
{
   36d2e:	b510      	push	{r4, lr}
	__asm__ volatile(
   36d30:	f04f 0320 	mov.w	r3, #32
   36d34:	f3ef 8411 	mrs	r4, BASEPRI
   36d38:	f383 8811 	msr	BASEPRI, r3
   36d3c:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   36d40:	f7fb f814 	bl	31d6c <ready_thread>
	__asm__ volatile(
   36d44:	f384 8811 	msr	BASEPRI, r4
   36d48:	f3bf 8f6f 	isb	sy
}
   36d4c:	bd10      	pop	{r4, pc}

00036d4e <z_thread_timeout>:
{
   36d4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   36d50:	4604      	mov	r4, r0
	__asm__ volatile(
   36d52:	f04f 0320 	mov.w	r3, #32
   36d56:	f3ef 8511 	mrs	r5, BASEPRI
   36d5a:	f383 8811 	msr	BASEPRI, r3
   36d5e:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   36d62:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   36d66:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   36d68:	b11b      	cbz	r3, 36d72 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   36d6a:	9001      	str	r0, [sp, #4]
   36d6c:	f7ff ffb3 	bl	36cd6 <unpend_thread_no_timeout>
   36d70:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   36d72:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   36d76:	f023 0314 	bic.w	r3, r3, #20
   36d7a:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   36d7e:	f7fa fff5 	bl	31d6c <ready_thread>
	__asm__ volatile(
   36d82:	f385 8811 	msr	BASEPRI, r5
   36d86:	f3bf 8f6f 	isb	sy
}
   36d8a:	b003      	add	sp, #12
   36d8c:	bd30      	pop	{r4, r5, pc}

00036d8e <add_to_waitq_locked>:
{
   36d8e:	b538      	push	{r3, r4, r5, lr}
   36d90:	4604      	mov	r4, r0
   36d92:	460d      	mov	r5, r1
	unready_thread(thread);
   36d94:	f7fb f990 	bl	320b8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   36d98:	7b63      	ldrb	r3, [r4, #13]
   36d9a:	f043 0302 	orr.w	r3, r3, #2
   36d9e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   36da0:	b1c5      	cbz	r5, 36dd4 <add_to_waitq_locked+0x46>
	return list->head == list;
   36da2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   36da4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36da6:	429d      	cmp	r5, r3
   36da8:	bf08      	it	eq
   36daa:	2300      	moveq	r3, #0
   36dac:	2b00      	cmp	r3, #0
   36dae:	bf38      	it	cc
   36db0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   36db2:	b183      	cbz	r3, 36dd6 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   36db4:	f994 100e 	ldrsb.w	r1, [r4, #14]
   36db8:	f993 200e 	ldrsb.w	r2, [r3, #14]
   36dbc:	4291      	cmp	r1, r2
   36dbe:	db04      	blt.n	36dca <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   36dc0:	686a      	ldr	r2, [r5, #4]
   36dc2:	429a      	cmp	r2, r3
   36dc4:	d007      	beq.n	36dd6 <add_to_waitq_locked+0x48>
   36dc6:	681b      	ldr	r3, [r3, #0]
   36dc8:	e7f3      	b.n	36db2 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   36dca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   36dcc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   36dd0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   36dd2:	605c      	str	r4, [r3, #4]
}
   36dd4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   36dd6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   36dd8:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   36dda:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   36ddc:	686b      	ldr	r3, [r5, #4]
   36dde:	601c      	str	r4, [r3, #0]
	list->tail = node;
   36de0:	606c      	str	r4, [r5, #4]
   36de2:	e7f7      	b.n	36dd4 <add_to_waitq_locked+0x46>

00036de4 <z_unpend_first_thread>:
{
   36de4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   36de6:	f04f 0320 	mov.w	r3, #32
   36dea:	f3ef 8211 	mrs	r2, BASEPRI
   36dee:	f383 8811 	msr	BASEPRI, r3
   36df2:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   36df6:	f7ff ff90 	bl	36d1a <z_priq_dumb_best>
   36dfa:	4604      	mov	r4, r0
	__asm__ volatile(
   36dfc:	f382 8811 	msr	BASEPRI, r2
   36e00:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   36e04:	b188      	cbz	r0, 36e2a <z_unpend_first_thread+0x46>
	__asm__ volatile(
   36e06:	f04f 0320 	mov.w	r3, #32
   36e0a:	f3ef 8511 	mrs	r5, BASEPRI
   36e0e:	f383 8811 	msr	BASEPRI, r3
   36e12:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   36e16:	f7ff ff5e 	bl	36cd6 <unpend_thread_no_timeout>
	__asm__ volatile(
   36e1a:	f385 8811 	msr	BASEPRI, r5
   36e1e:	f3bf 8f6f 	isb	sy
   36e22:	f104 0018 	add.w	r0, r4, #24
   36e26:	f000 f8a7 	bl	36f78 <z_abort_timeout>
}
   36e2a:	4620      	mov	r0, r4
   36e2c:	bd38      	pop	{r3, r4, r5, pc}

00036e2e <z_unpend_all>:
{
   36e2e:	b538      	push	{r3, r4, r5, lr}
   36e30:	4605      	mov	r5, r0
	int need_sched = 0;
   36e32:	2000      	movs	r0, #0
	return list->head == list;
   36e34:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36e36:	42a5      	cmp	r5, r4
   36e38:	d000      	beq.n	36e3c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   36e3a:	b904      	cbnz	r4, 36e3e <z_unpend_all+0x10>
}
   36e3c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   36e3e:	4620      	mov	r0, r4
   36e40:	f7ff ff55 	bl	36cee <z_unpend_thread>
		z_ready_thread(thread);
   36e44:	4620      	mov	r0, r4
   36e46:	f7ff ff72 	bl	36d2e <z_ready_thread>
		need_sched = 1;
   36e4a:	2001      	movs	r0, #1
   36e4c:	e7f2      	b.n	36e34 <z_unpend_all+0x6>

00036e4e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   36e4e:	b15a      	cbz	r2, 36e68 <z_impl_k_sem_init+0x1a>
   36e50:	428a      	cmp	r2, r1
   36e52:	d309      	bcc.n	36e68 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   36e54:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   36e58:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   36e5c:	e9c0 0000 	strd	r0, r0, [r0]
   36e60:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   36e64:	2000      	movs	r0, #0
   36e66:	4770      	bx	lr
		return -EINVAL;
   36e68:	f06f 0015 	mvn.w	r0, #21
}
   36e6c:	4770      	bx	lr

00036e6e <k_is_in_isr>:
   36e6e:	f3ef 8005 	mrs	r0, IPSR
}
   36e72:	3800      	subs	r0, #0
   36e74:	bf18      	it	ne
   36e76:	2001      	movne	r0, #1
   36e78:	4770      	bx	lr

00036e7a <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   36e7a:	b108      	cbz	r0, 36e80 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   36e7c:	f7e9 b9d0 	b.w	20220 <arch_busy_wait>
}
   36e80:	4770      	bx	lr

00036e82 <z_impl_k_thread_name_set>:
}
   36e82:	f06f 0057 	mvn.w	r0, #87	; 0x57
   36e86:	4770      	bx	lr

00036e88 <k_thread_name_get>:
}
   36e88:	2000      	movs	r0, #0
   36e8a:	4770      	bx	lr

00036e8c <k_work_submit_to_queue>:
{
   36e8c:	b500      	push	{lr}
   36e8e:	f101 0308 	add.w	r3, r1, #8
   36e92:	e8d3 2fef 	ldaex	r2, [r3]
   36e96:	f042 0c01 	orr.w	ip, r2, #1
   36e9a:	e8c3 cfee 	stlex	lr, ip, [r3]
   36e9e:	f1be 0f00 	cmp.w	lr, #0
   36ea2:	d1f6      	bne.n	36e92 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   36ea4:	07d3      	lsls	r3, r2, #31
   36ea6:	d403      	bmi.n	36eb0 <k_work_submit_to_queue+0x24>
}
   36ea8:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   36eac:	f7ff bebf 	b.w	36c2e <k_queue_append>
}
   36eb0:	f85d fb04 	ldr.w	pc, [sp], #4

00036eb4 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   36eb4:	f1a0 0110 	sub.w	r1, r0, #16
   36eb8:	6980      	ldr	r0, [r0, #24]
   36eba:	f7ff bfe7 	b.w	36e8c <k_work_submit_to_queue>

00036ebe <work_cancel>:
{
   36ebe:	b570      	push	{r4, r5, r6, lr}
   36ec0:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   36ec2:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   36ec6:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   36eca:	07db      	lsls	r3, r3, #31
   36ecc:	d52f      	bpl.n	36f2e <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   36ece:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   36ed0:	6a82      	ldr	r2, [r0, #40]	; 0x28
   36ed2:	6813      	ldr	r3, [r2, #0]
   36ed4:	b913      	cbnz	r3, 36edc <work_cancel+0x1e>
			return -EINVAL;
   36ed6:	f06f 0015 	mvn.w	r0, #21
}
   36eda:	bd70      	pop	{r4, r5, r6, pc}
   36edc:	429c      	cmp	r4, r3
   36ede:	d121      	bne.n	36f24 <work_cancel+0x66>
Z_GENLIST_REMOVE(sflist, sfnode)
   36ee0:	6823      	ldr	r3, [r4, #0]
   36ee2:	6856      	ldr	r6, [r2, #4]
   36ee4:	f023 0003 	bic.w	r0, r3, #3
   36ee8:	b991      	cbnz	r1, 36f10 <work_cancel+0x52>
   36eea:	42b4      	cmp	r4, r6
	list->head = node;
   36eec:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   36eee:	d100      	bne.n	36ef2 <work_cancel+0x34>
	list->tail = node;
   36ef0:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36ef2:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36ef4:	f003 0303 	and.w	r3, r3, #3
   36ef8:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   36efa:	2000      	movs	r0, #0
   36efc:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   36efe:	e8d5 3fef 	ldaex	r3, [r5]
   36f02:	f023 0301 	bic.w	r3, r3, #1
   36f06:	e8c5 3fe2 	stlex	r2, r3, [r5]
   36f0a:	2a00      	cmp	r2, #0
   36f0c:	d0e5      	beq.n	36eda <work_cancel+0x1c>
   36f0e:	e7f6      	b.n	36efe <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36f10:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   36f12:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   36f14:	f003 0303 	and.w	r3, r3, #3
   36f18:	ea43 0300 	orr.w	r3, r3, r0
   36f1c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   36f1e:	bf08      	it	eq
   36f20:	6051      	streq	r1, [r2, #4]
}
   36f22:	e7e6      	b.n	36ef2 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   36f24:	6818      	ldr	r0, [r3, #0]
   36f26:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   36f28:	f020 0303 	bic.w	r3, r0, #3
   36f2c:	e7d2      	b.n	36ed4 <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   36f2e:	3010      	adds	r0, #16
   36f30:	f000 f822 	bl	36f78 <z_abort_timeout>
		if (err) {
   36f34:	2800      	cmp	r0, #0
   36f36:	d0e0      	beq.n	36efa <work_cancel+0x3c>
			return -EALREADY;
   36f38:	f06f 0077 	mvn.w	r0, #119	; 0x77
   36f3c:	e7cd      	b.n	36eda <work_cancel+0x1c>

00036f3e <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   36f3e:	2300      	movs	r3, #0
   36f40:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   36f44:	e9c0 3304 	strd	r3, r3, [r0, #16]
   36f48:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   36f4a:	6283      	str	r3, [r0, #40]	; 0x28
}
   36f4c:	4770      	bx	lr

00036f4e <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   36f4e:	b510      	push	{r4, lr}
	__asm__ volatile(
   36f50:	f04f 0220 	mov.w	r2, #32
   36f54:	f3ef 8411 	mrs	r4, BASEPRI
   36f58:	f382 8811 	msr	BASEPRI, r2
   36f5c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   36f60:	6a83      	ldr	r3, [r0, #40]	; 0x28
   36f62:	b133      	cbz	r3, 36f72 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   36f64:	f7ff ffab 	bl	36ebe <work_cancel>
	__asm__ volatile(
   36f68:	f384 8811 	msr	BASEPRI, r4
   36f6c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   36f70:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   36f72:	f06f 0015 	mvn.w	r0, #21
   36f76:	e7f7      	b.n	36f68 <k_delayed_work_cancel+0x1a>

00036f78 <z_abort_timeout>:
{
   36f78:	b510      	push	{r4, lr}
	__asm__ volatile(
   36f7a:	f04f 0220 	mov.w	r2, #32
   36f7e:	f3ef 8411 	mrs	r4, BASEPRI
   36f82:	f382 8811 	msr	BASEPRI, r2
   36f86:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   36f8a:	6803      	ldr	r3, [r0, #0]
   36f8c:	b13b      	cbz	r3, 36f9e <z_abort_timeout+0x26>
			remove_timeout(to);
   36f8e:	f7fb fb9b 	bl	326c8 <remove_timeout>
			ret = 0;
   36f92:	2000      	movs	r0, #0
	__asm__ volatile(
   36f94:	f384 8811 	msr	BASEPRI, r4
   36f98:	f3bf 8f6f 	isb	sy
}
   36f9c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   36f9e:	f06f 0015 	mvn.w	r0, #21
   36fa2:	e7f7      	b.n	36f94 <z_abort_timeout+0x1c>

00036fa4 <z_get_next_timeout_expiry>:
{
   36fa4:	b510      	push	{r4, lr}
	__asm__ volatile(
   36fa6:	f04f 0320 	mov.w	r3, #32
   36faa:	f3ef 8411 	mrs	r4, BASEPRI
   36fae:	f383 8811 	msr	BASEPRI, r3
   36fb2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   36fb6:	f7fb fba1 	bl	326fc <next_timeout>
	__asm__ volatile(
   36fba:	f384 8811 	msr	BASEPRI, r4
   36fbe:	f3bf 8f6f 	isb	sy
}
   36fc2:	bd10      	pop	{r4, pc}

00036fc4 <z_set_timeout_expiry>:
{
   36fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   36fc6:	4604      	mov	r4, r0
   36fc8:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   36fca:	f04f 0320 	mov.w	r3, #32
   36fce:	f3ef 8511 	mrs	r5, BASEPRI
   36fd2:	f383 8811 	msr	BASEPRI, r3
   36fd6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   36fda:	f7fb fb8f 	bl	326fc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   36fde:	2801      	cmp	r0, #1
   36fe0:	dd05      	ble.n	36fee <z_set_timeout_expiry+0x2a>
   36fe2:	42a0      	cmp	r0, r4
   36fe4:	9901      	ldr	r1, [sp, #4]
   36fe6:	dd02      	ble.n	36fee <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   36fe8:	4620      	mov	r0, r4
   36fea:	f7ea fc1d 	bl	21828 <z_clock_set_timeout>
	__asm__ volatile(
   36fee:	f385 8811 	msr	BASEPRI, r5
   36ff2:	f3bf 8f6f 	isb	sy
}
   36ff6:	b003      	add	sp, #12
   36ff8:	bd30      	pop	{r4, r5, pc}

00036ffa <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   36ffa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   36ffc:	f7fb fc9c 	bl	32938 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   37000:	bd08      	pop	{r3, pc}

00037002 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   37002:	f7fb bc99 	b.w	32938 <z_tick_get>

00037006 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   37006:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   37008:	1c4b      	adds	r3, r1, #1
   3700a:	bf08      	it	eq
   3700c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   37010:	4604      	mov	r4, r0
   37012:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   37014:	d013      	beq.n	3703e <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   37016:	ea54 0105 	orrs.w	r1, r4, r5
   3701a:	d103      	bne.n	37024 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   3701c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   37020:	f7fb bc8a 	b.w	32938 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   37024:	f06f 0101 	mvn.w	r1, #1
   37028:	1a0a      	subs	r2, r1, r0
   3702a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3702e:	eb61 0305 	sbc.w	r3, r1, r5
   37032:	2a00      	cmp	r2, #0
   37034:	f173 0100 	sbcs.w	r1, r3, #0
   37038:	db02      	blt.n	37040 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   3703a:	4610      	mov	r0, r2
   3703c:	4619      	mov	r1, r3
}
   3703e:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   37040:	f7fb fc7a 	bl	32938 <z_tick_get>
   37044:	2c01      	cmp	r4, #1
   37046:	f175 0300 	sbcs.w	r3, r5, #0
   3704a:	bfbc      	itt	lt
   3704c:	2401      	movlt	r4, #1
   3704e:	2500      	movlt	r5, #0
   37050:	1820      	adds	r0, r4, r0
   37052:	eb45 0101 	adc.w	r1, r5, r1
   37056:	e7f2      	b.n	3703e <z_timeout_end_calc+0x38>

00037058 <k_timer_init>:
	timer->status = 0U;
   37058:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   3705a:	e9c0 1208 	strd	r1, r2, [r0, #32]
   3705e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   37062:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   37066:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   3706a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   3706c:	6343      	str	r3, [r0, #52]	; 0x34
}
   3706e:	4770      	bx	lr

00037070 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   37070:	b510      	push	{r4, lr}
   37072:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   37074:	f7ff ff80 	bl	36f78 <z_abort_timeout>

	if (inactive) {
   37078:	b9d8      	cbnz	r0, 370b2 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   3707a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3707c:	b10b      	cbz	r3, 37082 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3707e:	4620      	mov	r0, r4
   37080:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   37082:	f104 0018 	add.w	r0, r4, #24
   37086:	2100      	movs	r1, #0
   37088:	f7ff fdef 	bl	36c6a <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   3708c:	4604      	mov	r4, r0
   3708e:	b180      	cbz	r0, 370b2 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   37090:	f7ff fdfb 	bl	36c8a <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   37094:	4620      	mov	r0, r4
   37096:	f7ff fe4a 	bl	36d2e <z_ready_thread>
	__asm__ volatile(
   3709a:	f04f 0320 	mov.w	r3, #32
   3709e:	f3ef 8011 	mrs	r0, BASEPRI
   370a2:	f383 8811 	msr	BASEPRI, r3
   370a6:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   370aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   370ae:	f7ff bdfc 	b.w	36caa <z_reschedule_irqlock>
   370b2:	bd10      	pop	{r4, pc}

000370b4 <z_impl_k_timer_status_get>:
}
#include <syscalls/k_timer_stop_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_get(struct k_timer *timer)
{
   370b4:	4603      	mov	r3, r0
   370b6:	f04f 0120 	mov.w	r1, #32
   370ba:	f3ef 8211 	mrs	r2, BASEPRI
   370be:	f381 8811 	msr	BASEPRI, r1
   370c2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;

	timer->status = 0U;
   370c6:	2100      	movs	r1, #0
	uint32_t result = timer->status;
   370c8:	6b00      	ldr	r0, [r0, #48]	; 0x30
	timer->status = 0U;
   370ca:	6319      	str	r1, [r3, #48]	; 0x30
	__asm__ volatile(
   370cc:	f382 8811 	msr	BASEPRI, r2
   370d0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return result;
}
   370d4:	4770      	bx	lr

000370d6 <clear_event_registrations>:
	while (num_events--) {
   370d6:	2314      	movs	r3, #20
{
   370d8:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   370da:	2400      	movs	r4, #0
   370dc:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   370e0:	4281      	cmp	r1, r0
   370e2:	d100      	bne.n	370e6 <clear_event_registrations+0x10>
}
   370e4:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   370e6:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   370ea:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   370ee:	f003 030f 	and.w	r3, r3, #15
   370f2:	2b02      	cmp	r3, #2
   370f4:	d80a      	bhi.n	3710c <clear_event_registrations+0x36>
   370f6:	b15b      	cbz	r3, 37110 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   370f8:	f851 3c14 	ldr.w	r3, [r1, #-20]
   370fc:	b143      	cbz	r3, 37110 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   370fe:	f851 5c10 	ldr.w	r5, [r1, #-16]
   37102:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   37104:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   37106:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   3710a:	e001      	b.n	37110 <clear_event_registrations+0x3a>
	switch (event->type) {
   3710c:	2b04      	cmp	r3, #4
   3710e:	d0f3      	beq.n	370f8 <clear_event_registrations+0x22>
   37110:	f382 8811 	msr	BASEPRI, r2
   37114:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   37118:	f04f 0320 	mov.w	r3, #32
   3711c:	f3ef 8211 	mrs	r2, BASEPRI
   37120:	f383 8811 	msr	BASEPRI, r3
   37124:	f3bf 8f6f 	isb	sy
   37128:	3914      	subs	r1, #20
   3712a:	e7d9      	b.n	370e0 <clear_event_registrations+0xa>

0003712c <k_work_submit_to_queue>:
{
   3712c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3712e:	f101 0308 	add.w	r3, r1, #8
   37132:	e8d3 2fef 	ldaex	r2, [r3]
   37136:	f042 0c01 	orr.w	ip, r2, #1
   3713a:	e8c3 cfee 	stlex	lr, ip, [r3]
   3713e:	f1be 0f00 	cmp.w	lr, #0
   37142:	d1f6      	bne.n	37132 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   37144:	07d3      	lsls	r3, r2, #31
   37146:	d403      	bmi.n	37150 <k_work_submit_to_queue+0x24>
}
   37148:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   3714c:	f7ff bd6f 	b.w	36c2e <k_queue_append>
}
   37150:	f85d fb04 	ldr.w	pc, [sp], #4

00037154 <signal_poll_event>:
{
   37154:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   37158:	6884      	ldr	r4, [r0, #8]
{
   3715a:	4605      	mov	r5, r0
   3715c:	460e      	mov	r6, r1
	if (poller) {
   3715e:	b144      	cbz	r4, 37172 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   37160:	7863      	ldrb	r3, [r4, #1]
   37162:	2b01      	cmp	r3, #1
   37164:	d139      	bne.n	371da <signal_poll_event+0x86>
	if (!z_is_thread_pending(thread)) {
   37166:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   3716a:	f013 0302 	ands.w	r3, r3, #2
   3716e:	d10a      	bne.n	37186 <signal_poll_event+0x32>
		poller->is_polling = false;
   37170:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   37172:	2000      	movs	r0, #0
	event->state |= state;
   37174:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   37176:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   37178:	f3c3 3104 	ubfx	r1, r3, #12, #5
   3717c:	430e      	orrs	r6, r1
   3717e:	f366 3310 	bfi	r3, r6, #12, #5
   37182:	60eb      	str	r3, [r5, #12]
	return retcode;
   37184:	e00d      	b.n	371a2 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   37186:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3718a:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   3718e:	f06f 0001 	mvn.w	r0, #1
   37192:	428b      	cmp	r3, r1
   37194:	bf08      	it	eq
   37196:	4282      	cmpeq	r2, r0
   37198:	d106      	bne.n	371a8 <signal_poll_event+0x54>
		poller->is_polling = false;
   3719a:	2300      	movs	r3, #0
		return -EAGAIN;
   3719c:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   371a0:	7023      	strb	r3, [r4, #0]
}
   371a2:	b002      	add	sp, #8
   371a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   371a8:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
	z_unpend_thread(thread);
   371ac:	9001      	str	r0, [sp, #4]
   371ae:	f7ff fd9e 	bl	36cee <z_unpend_thread>
	arch_thread_return_value_set(thread,
   371b2:	2e08      	cmp	r6, #8
   371b4:	bf0c      	ite	eq
   371b6:	f06f 0303 	mvneq.w	r3, #3
   371ba:	2300      	movne	r3, #0
   371bc:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   371be:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   371c2:	06db      	lsls	r3, r3, #27
   371c4:	d103      	bne.n	371ce <signal_poll_event+0x7a>
	if (!z_is_thread_ready(thread)) {
   371c6:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   371ca:	9801      	ldr	r0, [sp, #4]
   371cc:	b10f      	cbz	r7, 371d2 <signal_poll_event+0x7e>
		poller->is_polling = false;
   371ce:	2300      	movs	r3, #0
   371d0:	e7ce      	b.n	37170 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   371d2:	f7ff fdac 	bl	36d2e <z_ready_thread>
		poller->is_polling = false;
   371d6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   371d8:	e7cb      	b.n	37172 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   371da:	2b02      	cmp	r3, #2
   371dc:	d1f7      	bne.n	371ce <signal_poll_event+0x7a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   371de:	7823      	ldrb	r3, [r4, #0]
   371e0:	2b00      	cmp	r3, #0
   371e2:	d0c6      	beq.n	37172 <signal_poll_event+0x1e>
   371e4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   371e8:	2f00      	cmp	r7, #0
   371ea:	d0f4      	beq.n	371d6 <signal_poll_event+0x82>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   371ec:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   371f0:	f1a4 0110 	sub.w	r1, r4, #16
   371f4:	f104 0010 	add.w	r0, r4, #16
   371f8:	9101      	str	r1, [sp, #4]
   371fa:	f7ff febd 	bl	36f78 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   371fe:	4638      	mov	r0, r7
   37200:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   37202:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   37206:	f7ff ff91 	bl	3712c <k_work_submit_to_queue>
		poller->is_polling = false;
   3720a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   3720e:	e7b0      	b.n	37172 <signal_poll_event+0x1e>

00037210 <add_event>:
{
   37210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37212:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   37214:	e9d0 2300 	ldrd	r2, r3, [r0]
   37218:	4290      	cmp	r0, r2
   3721a:	4604      	mov	r4, r0
   3721c:	460d      	mov	r5, r1
   3721e:	d106      	bne.n	3722e <add_event+0x1e>
	node->prev = list->tail;
   37220:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   37222:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   37224:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   37226:	6863      	ldr	r3, [r4, #4]
   37228:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3722a:	6065      	str	r5, [r4, #4]
}
   3722c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   3722e:	2b00      	cmp	r3, #0
   37230:	d0f6      	beq.n	37220 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   37232:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   37234:	b100      	cbz	r0, 37238 <add_event+0x28>
   37236:	3864      	subs	r0, #100	; 0x64
   37238:	b107      	cbz	r7, 3723c <add_event+0x2c>
   3723a:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   3723c:	4639      	mov	r1, r7
   3723e:	f7ff fd0b 	bl	36c58 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   37242:	2800      	cmp	r0, #0
   37244:	d1ec      	bne.n	37220 <add_event+0x10>
	return list->head == list;
   37246:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37248:	42b4      	cmp	r4, r6
   3724a:	d0e9      	beq.n	37220 <add_event+0x10>
   3724c:	2e00      	cmp	r6, #0
   3724e:	bf38      	it	cc
   37250:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   37252:	2e00      	cmp	r6, #0
   37254:	d0e4      	beq.n	37220 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   37256:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   37258:	b101      	cbz	r1, 3725c <add_event+0x4c>
   3725a:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   3725c:	4638      	mov	r0, r7
   3725e:	f7ff fcfb 	bl	36c58 <z_is_t1_higher_prio_than_t2>
   37262:	b128      	cbz	r0, 37270 <add_event+0x60>
	node->prev = successor->prev;
   37264:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   37266:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   3726a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   3726c:	6075      	str	r5, [r6, #4]
			return;
   3726e:	e7dd      	b.n	3722c <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   37270:	6863      	ldr	r3, [r4, #4]
   37272:	42b3      	cmp	r3, r6
   37274:	d0d4      	beq.n	37220 <add_event+0x10>
   37276:	6836      	ldr	r6, [r6, #0]
   37278:	e7eb      	b.n	37252 <add_event+0x42>

0003727a <register_events>:
{
   3727a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   3727e:	f04f 0a00 	mov.w	sl, #0
{
   37282:	460e      	mov	r6, r1
   37284:	4614      	mov	r4, r2
   37286:	461f      	mov	r7, r3
   37288:	4683      	mov	fp, r0
	int events_registered = 0;
   3728a:	4655      	mov	r5, sl
	event->poller = NULL;
   3728c:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   3728e:	45b2      	cmp	sl, r6
   37290:	db02      	blt.n	37298 <register_events+0x1e>
}
   37292:	4628      	mov	r0, r5
   37294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37298:	f04f 0320 	mov.w	r3, #32
   3729c:	f3ef 8911 	mrs	r9, BASEPRI
   372a0:	f383 8811 	msr	BASEPRI, r3
   372a4:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   372a8:	f89b 200d 	ldrb.w	r2, [fp, #13]
   372ac:	f002 020f 	and.w	r2, r2, #15
   372b0:	2a02      	cmp	r2, #2
   372b2:	d006      	beq.n	372c2 <register_events+0x48>
   372b4:	2a04      	cmp	r2, #4
   372b6:	d008      	beq.n	372ca <register_events+0x50>
   372b8:	2a01      	cmp	r2, #1
   372ba:	d120      	bne.n	372fe <register_events+0x84>
		if (event->signal->signaled != 0U) {
   372bc:	f8db 3010 	ldr.w	r3, [fp, #16]
   372c0:	e001      	b.n	372c6 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   372c2:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   372c6:	689b      	ldr	r3, [r3, #8]
   372c8:	e002      	b.n	372d0 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   372ca:	f8db 3010 	ldr.w	r3, [fp, #16]
   372ce:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   372d0:	b1ab      	cbz	r3, 372fe <register_events+0x84>
	event->state |= state;
   372d2:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   372d6:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   372da:	f3c3 3104 	ubfx	r1, r3, #12, #5
   372de:	430a      	orrs	r2, r1
   372e0:	f362 3310 	bfi	r3, r2, #12, #5
   372e4:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   372e8:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   372ec:	f389 8811 	msr	BASEPRI, r9
   372f0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   372f4:	f10a 0a01 	add.w	sl, sl, #1
   372f8:	f10b 0b14 	add.w	fp, fp, #20
   372fc:	e7c7      	b.n	3728e <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   372fe:	2f00      	cmp	r7, #0
   37300:	d1f4      	bne.n	372ec <register_events+0x72>
   37302:	7823      	ldrb	r3, [r4, #0]
   37304:	2b00      	cmp	r3, #0
   37306:	d0f1      	beq.n	372ec <register_events+0x72>
	switch (event->type) {
   37308:	f89b 300d 	ldrb.w	r3, [fp, #13]
   3730c:	f003 030f 	and.w	r3, r3, #15
   37310:	2b02      	cmp	r3, #2
   37312:	d008      	beq.n	37326 <register_events+0xac>
   37314:	2b04      	cmp	r3, #4
   37316:	d006      	beq.n	37326 <register_events+0xac>
   37318:	2b01      	cmp	r3, #1
   3731a:	d10b      	bne.n	37334 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   3731c:	4622      	mov	r2, r4
   3731e:	4659      	mov	r1, fp
   37320:	f8db 0010 	ldr.w	r0, [fp, #16]
   37324:	e004      	b.n	37330 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   37326:	4622      	mov	r2, r4
   37328:	4659      	mov	r1, fp
   3732a:	f8db 0010 	ldr.w	r0, [fp, #16]
   3732e:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   37330:	f7ff ff6e 	bl	37210 <add_event>
	event->poller = poller;
   37334:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   37338:	3501      	adds	r5, #1
   3733a:	e7d7      	b.n	372ec <register_events+0x72>

0003733c <z_handle_obj_poll_events>:
{
   3733c:	4603      	mov	r3, r0
	return list->head == list;
   3733e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   37340:	4283      	cmp	r3, r0
   37342:	d008      	beq.n	37356 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   37344:	e9d0 3200 	ldrd	r3, r2, [r0]
   37348:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3734a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3734c:	2300      	movs	r3, #0
	node->prev = NULL;
   3734e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   37352:	f7ff beff 	b.w	37154 <signal_poll_event>
}
   37356:	4770      	bx	lr

00037358 <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   37358:	2208      	movs	r2, #8
{
   3735a:	b530      	push	{r4, r5, lr}
   3735c:	188a      	adds	r2, r1, r2
   3735e:	b085      	sub	sp, #20
   37360:	d207      	bcs.n	37372 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   37362:	2400      	movs	r4, #0
   37364:	2500      	movs	r5, #0
   37366:	a902      	add	r1, sp, #8
   37368:	e9cd 4500 	strd	r4, r5, [sp]
   3736c:	f7ff fba3 	bl	36ab6 <k_mem_pool_alloc>
   37370:	b110      	cbz	r0, 37378 <k_mem_pool_malloc+0x20>
		return NULL;
   37372:	2000      	movs	r0, #0
}
   37374:	b005      	add	sp, #20
   37376:	bd30      	pop	{r4, r5, pc}
   37378:	9a02      	ldr	r2, [sp, #8]
   3737a:	ab02      	add	r3, sp, #8
   3737c:	cb03      	ldmia	r3!, {r0, r1}
   3737e:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   37380:	9802      	ldr	r0, [sp, #8]
   37382:	6051      	str	r1, [r2, #4]
   37384:	3008      	adds	r0, #8
   37386:	e7f5      	b.n	37374 <k_mem_pool_malloc+0x1c>

00037388 <k_free>:
	if (ptr != NULL) {
   37388:	b110      	cbz	r0, 37390 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   3738a:	3808      	subs	r0, #8
   3738c:	f7ff bbac 	b.w	36ae8 <k_mem_pool_free_id>
}
   37390:	4770      	bx	lr

00037392 <k_calloc>:
{
   37392:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   37394:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   37398:	b118      	cbz	r0, 373a2 <k_calloc+0x10>
   3739a:	fbb2 f0f0 	udiv	r0, r2, r0
   3739e:	4281      	cmp	r1, r0
   373a0:	d10c      	bne.n	373bc <k_calloc+0x2a>
	ret = k_malloc(bounds);
   373a2:	4610      	mov	r0, r2
   373a4:	9201      	str	r2, [sp, #4]
   373a6:	f7fb fbe7 	bl	32b78 <k_malloc>
	if (ret != NULL) {
   373aa:	4604      	mov	r4, r0
   373ac:	b118      	cbz	r0, 373b6 <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   373ae:	2100      	movs	r1, #0
   373b0:	9a01      	ldr	r2, [sp, #4]
   373b2:	f000 f846 	bl	37442 <memset>
}
   373b6:	4620      	mov	r0, r4
   373b8:	b002      	add	sp, #8
   373ba:	bd10      	pop	{r4, pc}
		return NULL;
   373bc:	2400      	movs	r4, #0
   373be:	e7fa      	b.n	373b6 <k_calloc+0x24>

000373c0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   373c0:	4770      	bx	lr

000373c2 <atoi>:
   373c2:	220a      	movs	r2, #10
   373c4:	2100      	movs	r1, #0
   373c6:	f7fc b841 	b.w	3344c <strtol>

000373ca <memchr>:
   373ca:	b2c9      	uxtb	r1, r1
   373cc:	4402      	add	r2, r0
   373ce:	b510      	push	{r4, lr}
   373d0:	4290      	cmp	r0, r2
   373d2:	4603      	mov	r3, r0
   373d4:	d101      	bne.n	373da <memchr+0x10>
   373d6:	2300      	movs	r3, #0
   373d8:	e003      	b.n	373e2 <memchr+0x18>
   373da:	781c      	ldrb	r4, [r3, #0]
   373dc:	3001      	adds	r0, #1
   373de:	428c      	cmp	r4, r1
   373e0:	d1f6      	bne.n	373d0 <memchr+0x6>
   373e2:	4618      	mov	r0, r3
   373e4:	bd10      	pop	{r4, pc}

000373e6 <memcmp>:
   373e6:	b530      	push	{r4, r5, lr}
   373e8:	3901      	subs	r1, #1
   373ea:	2400      	movs	r4, #0
   373ec:	42a2      	cmp	r2, r4
   373ee:	d101      	bne.n	373f4 <memcmp+0xe>
   373f0:	2000      	movs	r0, #0
   373f2:	e005      	b.n	37400 <memcmp+0x1a>
   373f4:	5d03      	ldrb	r3, [r0, r4]
   373f6:	3401      	adds	r4, #1
   373f8:	5d0d      	ldrb	r5, [r1, r4]
   373fa:	42ab      	cmp	r3, r5
   373fc:	d0f6      	beq.n	373ec <memcmp+0x6>
   373fe:	1b58      	subs	r0, r3, r5
   37400:	bd30      	pop	{r4, r5, pc}

00037402 <memcpy>:
   37402:	440a      	add	r2, r1
   37404:	1e43      	subs	r3, r0, #1
   37406:	4291      	cmp	r1, r2
   37408:	d100      	bne.n	3740c <memcpy+0xa>
   3740a:	4770      	bx	lr
   3740c:	b510      	push	{r4, lr}
   3740e:	f811 4b01 	ldrb.w	r4, [r1], #1
   37412:	4291      	cmp	r1, r2
   37414:	f803 4f01 	strb.w	r4, [r3, #1]!
   37418:	d1f9      	bne.n	3740e <memcpy+0xc>
   3741a:	bd10      	pop	{r4, pc}

0003741c <__memcpy_chk>:
   3741c:	429a      	cmp	r2, r3
   3741e:	b508      	push	{r3, lr}
   37420:	d901      	bls.n	37426 <__memcpy_chk+0xa>
   37422:	f7eb fa21 	bl	22868 <__chk_fail>
   37426:	4281      	cmp	r1, r0
   37428:	d804      	bhi.n	37434 <__memcpy_chk+0x18>
   3742a:	188b      	adds	r3, r1, r2
   3742c:	4298      	cmp	r0, r3
   3742e:	d3f8      	bcc.n	37422 <__memcpy_chk+0x6>
   37430:	4281      	cmp	r1, r0
   37432:	d102      	bne.n	3743a <__memcpy_chk+0x1e>
   37434:	1883      	adds	r3, r0, r2
   37436:	4299      	cmp	r1, r3
   37438:	d3f3      	bcc.n	37422 <__memcpy_chk+0x6>
   3743a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3743e:	f7ff bfe0 	b.w	37402 <memcpy>

00037442 <memset>:
   37442:	4402      	add	r2, r0
   37444:	4603      	mov	r3, r0
   37446:	4293      	cmp	r3, r2
   37448:	d100      	bne.n	3744c <memset+0xa>
   3744a:	4770      	bx	lr
   3744c:	f803 1b01 	strb.w	r1, [r3], #1
   37450:	e7f9      	b.n	37446 <memset+0x4>

00037452 <__cvt>:
   37452:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   37456:	ec55 4b10 	vmov	r4, r5, d0
   3745a:	2d00      	cmp	r5, #0
   3745c:	460e      	mov	r6, r1
   3745e:	4619      	mov	r1, r3
   37460:	462b      	mov	r3, r5
   37462:	bfb4      	ite	lt
   37464:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   37468:	2300      	movge	r3, #0
   3746a:	4691      	mov	r9, r2
   3746c:	bfbf      	itttt	lt
   3746e:	4622      	movlt	r2, r4
   37470:	461d      	movlt	r5, r3
   37472:	232d      	movlt	r3, #45	; 0x2d
   37474:	4614      	movlt	r4, r2
   37476:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   3747a:	700b      	strb	r3, [r1, #0]
   3747c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3747e:	f023 0820 	bic.w	r8, r3, #32
   37482:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   37486:	d005      	beq.n	37494 <__cvt+0x42>
   37488:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   3748c:	d100      	bne.n	37490 <__cvt+0x3e>
   3748e:	3601      	adds	r6, #1
   37490:	2102      	movs	r1, #2
   37492:	e000      	b.n	37496 <__cvt+0x44>
   37494:	2103      	movs	r1, #3
   37496:	ab03      	add	r3, sp, #12
   37498:	4632      	mov	r2, r6
   3749a:	9301      	str	r3, [sp, #4]
   3749c:	ab02      	add	r3, sp, #8
   3749e:	ec45 4b10 	vmov	d0, r4, r5
   374a2:	9300      	str	r3, [sp, #0]
   374a4:	4653      	mov	r3, sl
   374a6:	f7e1 fdeb 	bl	19080 <_dtoa_r>
   374aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   374ae:	4607      	mov	r7, r0
   374b0:	d102      	bne.n	374b8 <__cvt+0x66>
   374b2:	f019 0f01 	tst.w	r9, #1
   374b6:	d022      	beq.n	374fe <__cvt+0xac>
   374b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   374bc:	eb07 0906 	add.w	r9, r7, r6
   374c0:	d110      	bne.n	374e4 <__cvt+0x92>
   374c2:	783b      	ldrb	r3, [r7, #0]
   374c4:	2b30      	cmp	r3, #48	; 0x30
   374c6:	d10a      	bne.n	374de <__cvt+0x8c>
   374c8:	2200      	movs	r2, #0
   374ca:	2300      	movs	r3, #0
   374cc:	4620      	mov	r0, r4
   374ce:	4629      	mov	r1, r5
   374d0:	f7e1 fd54 	bl	18f7c <__aeabi_dcmpeq>
   374d4:	b918      	cbnz	r0, 374de <__cvt+0x8c>
   374d6:	f1c6 0601 	rsb	r6, r6, #1
   374da:	f8ca 6000 	str.w	r6, [sl]
   374de:	f8da 3000 	ldr.w	r3, [sl]
   374e2:	4499      	add	r9, r3
   374e4:	2200      	movs	r2, #0
   374e6:	2300      	movs	r3, #0
   374e8:	4620      	mov	r0, r4
   374ea:	4629      	mov	r1, r5
   374ec:	f7e1 fd46 	bl	18f7c <__aeabi_dcmpeq>
   374f0:	b108      	cbz	r0, 374f6 <__cvt+0xa4>
   374f2:	f8cd 900c 	str.w	r9, [sp, #12]
   374f6:	2230      	movs	r2, #48	; 0x30
   374f8:	9b03      	ldr	r3, [sp, #12]
   374fa:	454b      	cmp	r3, r9
   374fc:	d307      	bcc.n	3750e <__cvt+0xbc>
   374fe:	9b03      	ldr	r3, [sp, #12]
   37500:	4638      	mov	r0, r7
   37502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37504:	1bdb      	subs	r3, r3, r7
   37506:	6013      	str	r3, [r2, #0]
   37508:	b004      	add	sp, #16
   3750a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3750e:	1c59      	adds	r1, r3, #1
   37510:	9103      	str	r1, [sp, #12]
   37512:	701a      	strb	r2, [r3, #0]
   37514:	e7f0      	b.n	374f8 <__cvt+0xa6>

00037516 <__exponent>:
   37516:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37518:	2900      	cmp	r1, #0
   3751a:	4603      	mov	r3, r0
   3751c:	bfb8      	it	lt
   3751e:	4249      	neglt	r1, r1
   37520:	f803 2b02 	strb.w	r2, [r3], #2
   37524:	bfb4      	ite	lt
   37526:	222d      	movlt	r2, #45	; 0x2d
   37528:	222b      	movge	r2, #43	; 0x2b
   3752a:	2909      	cmp	r1, #9
   3752c:	7042      	strb	r2, [r0, #1]
   3752e:	dd2a      	ble.n	37586 <__exponent+0x70>
   37530:	f10d 0407 	add.w	r4, sp, #7
   37534:	270a      	movs	r7, #10
   37536:	46a4      	mov	ip, r4
   37538:	460a      	mov	r2, r1
   3753a:	46a6      	mov	lr, r4
   3753c:	3c01      	subs	r4, #1
   3753e:	2a63      	cmp	r2, #99	; 0x63
   37540:	fb91 f6f7 	sdiv	r6, r1, r7
   37544:	fb07 1516 	mls	r5, r7, r6, r1
   37548:	4631      	mov	r1, r6
   3754a:	f105 0530 	add.w	r5, r5, #48	; 0x30
   3754e:	f80e 5c01 	strb.w	r5, [lr, #-1]
   37552:	dcf1      	bgt.n	37538 <__exponent+0x22>
   37554:	3130      	adds	r1, #48	; 0x30
   37556:	f1ae 0502 	sub.w	r5, lr, #2
   3755a:	f804 1c01 	strb.w	r1, [r4, #-1]
   3755e:	1c44      	adds	r4, r0, #1
   37560:	4629      	mov	r1, r5
   37562:	4561      	cmp	r1, ip
   37564:	d30a      	bcc.n	3757c <__exponent+0x66>
   37566:	f10d 0209 	add.w	r2, sp, #9
   3756a:	eba2 020e 	sub.w	r2, r2, lr
   3756e:	4565      	cmp	r5, ip
   37570:	bf88      	it	hi
   37572:	2200      	movhi	r2, #0
   37574:	4413      	add	r3, r2
   37576:	1a18      	subs	r0, r3, r0
   37578:	b003      	add	sp, #12
   3757a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3757c:	f811 2b01 	ldrb.w	r2, [r1], #1
   37580:	f804 2f01 	strb.w	r2, [r4, #1]!
   37584:	e7ed      	b.n	37562 <__exponent+0x4c>
   37586:	2330      	movs	r3, #48	; 0x30
   37588:	3130      	adds	r1, #48	; 0x30
   3758a:	7083      	strb	r3, [r0, #2]
   3758c:	1d03      	adds	r3, r0, #4
   3758e:	70c1      	strb	r1, [r0, #3]
   37590:	e7f1      	b.n	37576 <__exponent+0x60>

00037592 <_printf_common>:
   37592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37596:	4616      	mov	r6, r2
   37598:	4699      	mov	r9, r3
   3759a:	688a      	ldr	r2, [r1, #8]
   3759c:	4607      	mov	r7, r0
   3759e:	690b      	ldr	r3, [r1, #16]
   375a0:	460c      	mov	r4, r1
   375a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
   375a6:	4293      	cmp	r3, r2
   375a8:	bfb8      	it	lt
   375aa:	4613      	movlt	r3, r2
   375ac:	6033      	str	r3, [r6, #0]
   375ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   375b2:	b10a      	cbz	r2, 375b8 <_printf_common+0x26>
   375b4:	3301      	adds	r3, #1
   375b6:	6033      	str	r3, [r6, #0]
   375b8:	6823      	ldr	r3, [r4, #0]
   375ba:	0699      	lsls	r1, r3, #26
   375bc:	bf42      	ittt	mi
   375be:	6833      	ldrmi	r3, [r6, #0]
   375c0:	3302      	addmi	r3, #2
   375c2:	6033      	strmi	r3, [r6, #0]
   375c4:	6825      	ldr	r5, [r4, #0]
   375c6:	f015 0506 	ands.w	r5, r5, #6
   375ca:	d106      	bne.n	375da <_printf_common+0x48>
   375cc:	f104 0a19 	add.w	sl, r4, #25
   375d0:	68e3      	ldr	r3, [r4, #12]
   375d2:	6832      	ldr	r2, [r6, #0]
   375d4:	1a9b      	subs	r3, r3, r2
   375d6:	42ab      	cmp	r3, r5
   375d8:	dc29      	bgt.n	3762e <_printf_common+0x9c>
   375da:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   375de:	1e13      	subs	r3, r2, #0
   375e0:	6822      	ldr	r2, [r4, #0]
   375e2:	bf18      	it	ne
   375e4:	2301      	movne	r3, #1
   375e6:	0692      	lsls	r2, r2, #26
   375e8:	d42e      	bmi.n	37648 <_printf_common+0xb6>
   375ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
   375ee:	4649      	mov	r1, r9
   375f0:	4638      	mov	r0, r7
   375f2:	47c0      	blx	r8
   375f4:	3001      	adds	r0, #1
   375f6:	d021      	beq.n	3763c <_printf_common+0xaa>
   375f8:	6823      	ldr	r3, [r4, #0]
   375fa:	341a      	adds	r4, #26
   375fc:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   37600:	f003 0306 	and.w	r3, r3, #6
   37604:	6832      	ldr	r2, [r6, #0]
   37606:	2600      	movs	r6, #0
   37608:	2b04      	cmp	r3, #4
   3760a:	f854 3c12 	ldr.w	r3, [r4, #-18]
   3760e:	bf08      	it	eq
   37610:	1aad      	subeq	r5, r5, r2
   37612:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   37616:	bf14      	ite	ne
   37618:	2500      	movne	r5, #0
   3761a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3761e:	4293      	cmp	r3, r2
   37620:	bfc4      	itt	gt
   37622:	1a9b      	subgt	r3, r3, r2
   37624:	18ed      	addgt	r5, r5, r3
   37626:	42b5      	cmp	r5, r6
   37628:	d11a      	bne.n	37660 <_printf_common+0xce>
   3762a:	2000      	movs	r0, #0
   3762c:	e008      	b.n	37640 <_printf_common+0xae>
   3762e:	2301      	movs	r3, #1
   37630:	4652      	mov	r2, sl
   37632:	4649      	mov	r1, r9
   37634:	4638      	mov	r0, r7
   37636:	47c0      	blx	r8
   37638:	3001      	adds	r0, #1
   3763a:	d103      	bne.n	37644 <_printf_common+0xb2>
   3763c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37644:	3501      	adds	r5, #1
   37646:	e7c3      	b.n	375d0 <_printf_common+0x3e>
   37648:	18e1      	adds	r1, r4, r3
   3764a:	1c5a      	adds	r2, r3, #1
   3764c:	2030      	movs	r0, #48	; 0x30
   3764e:	3302      	adds	r3, #2
   37650:	4422      	add	r2, r4
   37652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   37656:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   3765a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   3765e:	e7c4      	b.n	375ea <_printf_common+0x58>
   37660:	2301      	movs	r3, #1
   37662:	4622      	mov	r2, r4
   37664:	4649      	mov	r1, r9
   37666:	4638      	mov	r0, r7
   37668:	47c0      	blx	r8
   3766a:	3001      	adds	r0, #1
   3766c:	d0e6      	beq.n	3763c <_printf_common+0xaa>
   3766e:	3601      	adds	r6, #1
   37670:	e7d9      	b.n	37626 <_printf_common+0x94>

00037672 <__sprintf_chk>:
   37672:	b408      	push	{r3}
   37674:	b517      	push	{r0, r1, r2, r4, lr}
   37676:	ab05      	add	r3, sp, #20
   37678:	1e14      	subs	r4, r2, #0
   3767a:	f853 1b04 	ldr.w	r1, [r3], #4
   3767e:	9301      	str	r3, [sp, #4]
   37680:	da07      	bge.n	37692 <__sprintf_chk+0x20>
   37682:	461a      	mov	r2, r3
   37684:	f7fb ff94 	bl	335b0 <vsiprintf>
   37688:	b003      	add	sp, #12
   3768a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3768e:	b001      	add	sp, #4
   37690:	4770      	bx	lr
   37692:	460a      	mov	r2, r1
   37694:	4621      	mov	r1, r4
   37696:	f7fb ff67 	bl	33568 <vsniprintf>
   3769a:	2800      	cmp	r0, #0
   3769c:	dbf4      	blt.n	37688 <__sprintf_chk+0x16>
   3769e:	42a0      	cmp	r0, r4
   376a0:	d3f2      	bcc.n	37688 <__sprintf_chk+0x16>
   376a2:	f7eb f8e1 	bl	22868 <__chk_fail>

000376a6 <strchr>:
   376a6:	b2c9      	uxtb	r1, r1
   376a8:	4603      	mov	r3, r0
   376aa:	f810 2b01 	ldrb.w	r2, [r0], #1
   376ae:	b11a      	cbz	r2, 376b8 <strchr+0x12>
   376b0:	428a      	cmp	r2, r1
   376b2:	d1f9      	bne.n	376a8 <strchr+0x2>
   376b4:	4618      	mov	r0, r3
   376b6:	4770      	bx	lr
   376b8:	2900      	cmp	r1, #0
   376ba:	bf18      	it	ne
   376bc:	2300      	movne	r3, #0
   376be:	e7f9      	b.n	376b4 <strchr+0xe>

000376c0 <strcpy>:
   376c0:	4603      	mov	r3, r0
   376c2:	f811 2b01 	ldrb.w	r2, [r1], #1
   376c6:	f803 2b01 	strb.w	r2, [r3], #1
   376ca:	2a00      	cmp	r2, #0
   376cc:	d1f9      	bne.n	376c2 <strcpy+0x2>
   376ce:	4770      	bx	lr

000376d0 <strncmp>:
   376d0:	b510      	push	{r4, lr}
   376d2:	b16a      	cbz	r2, 376f0 <strncmp+0x20>
   376d4:	3901      	subs	r1, #1
   376d6:	1884      	adds	r4, r0, r2
   376d8:	f810 3b01 	ldrb.w	r3, [r0], #1
   376dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   376e0:	4293      	cmp	r3, r2
   376e2:	d103      	bne.n	376ec <strncmp+0x1c>
   376e4:	42a0      	cmp	r0, r4
   376e6:	d001      	beq.n	376ec <strncmp+0x1c>
   376e8:	2b00      	cmp	r3, #0
   376ea:	d1f5      	bne.n	376d8 <strncmp+0x8>
   376ec:	1a98      	subs	r0, r3, r2
   376ee:	bd10      	pop	{r4, pc}
   376f0:	4610      	mov	r0, r2
   376f2:	e7fc      	b.n	376ee <strncmp+0x1e>

000376f4 <strncpy>:
   376f4:	3901      	subs	r1, #1
   376f6:	4603      	mov	r3, r0
   376f8:	b510      	push	{r4, lr}
   376fa:	b132      	cbz	r2, 3770a <strncpy+0x16>
   376fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   37700:	3a01      	subs	r2, #1
   37702:	f803 4b01 	strb.w	r4, [r3], #1
   37706:	2c00      	cmp	r4, #0
   37708:	d1f7      	bne.n	376fa <strncpy+0x6>
   3770a:	441a      	add	r2, r3
   3770c:	2100      	movs	r1, #0
   3770e:	4293      	cmp	r3, r2
   37710:	d100      	bne.n	37714 <strncpy+0x20>
   37712:	bd10      	pop	{r4, pc}
   37714:	f803 1b01 	strb.w	r1, [r3], #1
   37718:	e7f9      	b.n	3770e <strncpy+0x1a>

0003771a <__strncpy_chk>:
   3771a:	429a      	cmp	r2, r3
   3771c:	b508      	push	{r3, lr}
   3771e:	d901      	bls.n	37724 <__strncpy_chk+0xa>
   37720:	f7eb f8a2 	bl	22868 <__chk_fail>
   37724:	4281      	cmp	r1, r0
   37726:	d804      	bhi.n	37732 <__strncpy_chk+0x18>
   37728:	188b      	adds	r3, r1, r2
   3772a:	4298      	cmp	r0, r3
   3772c:	d3f8      	bcc.n	37720 <__strncpy_chk+0x6>
   3772e:	4281      	cmp	r1, r0
   37730:	d102      	bne.n	37738 <__strncpy_chk+0x1e>
   37732:	1883      	adds	r3, r0, r2
   37734:	4299      	cmp	r1, r3
   37736:	d3f3      	bcc.n	37720 <__strncpy_chk+0x6>
   37738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3773c:	f7ff bfda 	b.w	376f4 <strncpy>

00037740 <strrchr>:
   37740:	b538      	push	{r3, r4, r5, lr}
   37742:	4603      	mov	r3, r0
   37744:	460c      	mov	r4, r1
   37746:	b969      	cbnz	r1, 37764 <strrchr+0x24>
   37748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3774c:	f7ff bfab 	b.w	376a6 <strchr>
   37750:	1c43      	adds	r3, r0, #1
   37752:	4605      	mov	r5, r0
   37754:	4621      	mov	r1, r4
   37756:	4618      	mov	r0, r3
   37758:	f7ff ffa5 	bl	376a6 <strchr>
   3775c:	2800      	cmp	r0, #0
   3775e:	d1f7      	bne.n	37750 <strrchr+0x10>
   37760:	4628      	mov	r0, r5
   37762:	bd38      	pop	{r3, r4, r5, pc}
   37764:	2500      	movs	r5, #0
   37766:	e7f5      	b.n	37754 <strrchr+0x14>

00037768 <strstr>:
   37768:	b5f0      	push	{r4, r5, r6, r7, lr}
   3776a:	780c      	ldrb	r4, [r1, #0]
   3776c:	b164      	cbz	r4, 37788 <strstr+0x20>
   3776e:	4603      	mov	r3, r0
   37770:	781a      	ldrb	r2, [r3, #0]
   37772:	4618      	mov	r0, r3
   37774:	1c5e      	adds	r6, r3, #1
   37776:	b90a      	cbnz	r2, 3777c <strstr+0x14>
   37778:	4610      	mov	r0, r2
   3777a:	e005      	b.n	37788 <strstr+0x20>
   3777c:	4294      	cmp	r4, r2
   3777e:	d108      	bne.n	37792 <strstr+0x2a>
   37780:	460d      	mov	r5, r1
   37782:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   37786:	b902      	cbnz	r2, 3778a <strstr+0x22>
   37788:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3778a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   3778e:	4297      	cmp	r7, r2
   37790:	d0f7      	beq.n	37782 <strstr+0x1a>
   37792:	4633      	mov	r3, r6
   37794:	e7ec      	b.n	37770 <strstr+0x8>

00037796 <_vsniprintf_r>:
   37796:	b530      	push	{r4, r5, lr}
   37798:	1e14      	subs	r4, r2, #0
   3779a:	4605      	mov	r5, r0
   3779c:	b09b      	sub	sp, #108	; 0x6c
   3779e:	4618      	mov	r0, r3
   377a0:	da05      	bge.n	377ae <_vsniprintf_r+0x18>
   377a2:	238b      	movs	r3, #139	; 0x8b
   377a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   377a8:	602b      	str	r3, [r5, #0]
   377aa:	b01b      	add	sp, #108	; 0x6c
   377ac:	bd30      	pop	{r4, r5, pc}
   377ae:	f44f 7302 	mov.w	r3, #520	; 0x208
   377b2:	4602      	mov	r2, r0
   377b4:	9100      	str	r1, [sp, #0]
   377b6:	4628      	mov	r0, r5
   377b8:	f8ad 300c 	strh.w	r3, [sp, #12]
   377bc:	bf14      	ite	ne
   377be:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   377c2:	4623      	moveq	r3, r4
   377c4:	9104      	str	r1, [sp, #16]
   377c6:	4669      	mov	r1, sp
   377c8:	9302      	str	r3, [sp, #8]
   377ca:	9305      	str	r3, [sp, #20]
   377cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   377d0:	f8ad 300e 	strh.w	r3, [sp, #14]
   377d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   377d6:	f7fb fff9 	bl	337cc <_svfiprintf_r>
   377da:	1c43      	adds	r3, r0, #1
   377dc:	bfbc      	itt	lt
   377de:	238b      	movlt	r3, #139	; 0x8b
   377e0:	602b      	strlt	r3, [r5, #0]
   377e2:	2c00      	cmp	r4, #0
   377e4:	d0e1      	beq.n	377aa <_vsniprintf_r+0x14>
   377e6:	9b00      	ldr	r3, [sp, #0]
   377e8:	2200      	movs	r2, #0
   377ea:	701a      	strb	r2, [r3, #0]
   377ec:	e7dd      	b.n	377aa <_vsniprintf_r+0x14>

000377ee <quorem>:
   377ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   377f2:	6903      	ldr	r3, [r0, #16]
   377f4:	4607      	mov	r7, r0
   377f6:	690c      	ldr	r4, [r1, #16]
   377f8:	42a3      	cmp	r3, r4
   377fa:	f2c0 8085 	blt.w	37908 <quorem+0x11a>
   377fe:	3c01      	subs	r4, #1
   37800:	f100 0514 	add.w	r5, r0, #20
   37804:	f101 0814 	add.w	r8, r1, #20
   37808:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3780c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   37810:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   37814:	9301      	str	r3, [sp, #4]
   37816:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   3781a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   3781e:	3301      	adds	r3, #1
   37820:	429a      	cmp	r2, r3
   37822:	fbb2 f6f3 	udiv	r6, r2, r3
   37826:	d333      	bcc.n	37890 <quorem+0xa2>
   37828:	f04f 0e00 	mov.w	lr, #0
   3782c:	4640      	mov	r0, r8
   3782e:	46ac      	mov	ip, r5
   37830:	46f2      	mov	sl, lr
   37832:	f850 2b04 	ldr.w	r2, [r0], #4
   37836:	b293      	uxth	r3, r2
   37838:	4581      	cmp	r9, r0
   3783a:	ea4f 4212 	mov.w	r2, r2, lsr #16
   3783e:	fb06 e303 	mla	r3, r6, r3, lr
   37842:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   37846:	b29b      	uxth	r3, r3
   37848:	fb06 e202 	mla	r2, r6, r2, lr
   3784c:	ebaa 0303 	sub.w	r3, sl, r3
   37850:	f8dc a000 	ldr.w	sl, [ip]
   37854:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   37858:	fa1f fa8a 	uxth.w	sl, sl
   3785c:	4453      	add	r3, sl
   3785e:	fa1f fa82 	uxth.w	sl, r2
   37862:	f8dc 2000 	ldr.w	r2, [ip]
   37866:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   3786a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   3786e:	b29b      	uxth	r3, r3
   37870:	ea4f 4a22 	mov.w	sl, r2, asr #16
   37874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   37878:	f84c 3b04 	str.w	r3, [ip], #4
   3787c:	d2d9      	bcs.n	37832 <quorem+0x44>
   3787e:	f855 300b 	ldr.w	r3, [r5, fp]
   37882:	b92b      	cbnz	r3, 37890 <quorem+0xa2>
   37884:	9b01      	ldr	r3, [sp, #4]
   37886:	3b04      	subs	r3, #4
   37888:	429d      	cmp	r5, r3
   3788a:	461a      	mov	r2, r3
   3788c:	d330      	bcc.n	378f0 <quorem+0x102>
   3788e:	613c      	str	r4, [r7, #16]
   37890:	4638      	mov	r0, r7
   37892:	f000 fa18 	bl	37cc6 <__mcmp>
   37896:	2800      	cmp	r0, #0
   37898:	db26      	blt.n	378e8 <quorem+0xfa>
   3789a:	3601      	adds	r6, #1
   3789c:	4628      	mov	r0, r5
   3789e:	f04f 0c00 	mov.w	ip, #0
   378a2:	f858 1b04 	ldr.w	r1, [r8], #4
   378a6:	f8d0 e000 	ldr.w	lr, [r0]
   378aa:	b28b      	uxth	r3, r1
   378ac:	45c1      	cmp	r9, r8
   378ae:	fa1f f28e 	uxth.w	r2, lr
   378b2:	ebac 0303 	sub.w	r3, ip, r3
   378b6:	4413      	add	r3, r2
   378b8:	ea4f 4211 	mov.w	r2, r1, lsr #16
   378bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   378c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   378c4:	b29b      	uxth	r3, r3
   378c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
   378ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   378ce:	f840 3b04 	str.w	r3, [r0], #4
   378d2:	d2e6      	bcs.n	378a2 <quorem+0xb4>
   378d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   378d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   378dc:	b922      	cbnz	r2, 378e8 <quorem+0xfa>
   378de:	3b04      	subs	r3, #4
   378e0:	429d      	cmp	r5, r3
   378e2:	461a      	mov	r2, r3
   378e4:	d30a      	bcc.n	378fc <quorem+0x10e>
   378e6:	613c      	str	r4, [r7, #16]
   378e8:	4630      	mov	r0, r6
   378ea:	b003      	add	sp, #12
   378ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   378f0:	6812      	ldr	r2, [r2, #0]
   378f2:	3b04      	subs	r3, #4
   378f4:	2a00      	cmp	r2, #0
   378f6:	d1ca      	bne.n	3788e <quorem+0xa0>
   378f8:	3c01      	subs	r4, #1
   378fa:	e7c5      	b.n	37888 <quorem+0x9a>
   378fc:	6812      	ldr	r2, [r2, #0]
   378fe:	3b04      	subs	r3, #4
   37900:	2a00      	cmp	r2, #0
   37902:	d1f0      	bne.n	378e6 <quorem+0xf8>
   37904:	3c01      	subs	r4, #1
   37906:	e7eb      	b.n	378e0 <quorem+0xf2>
   37908:	2000      	movs	r0, #0
   3790a:	e7ee      	b.n	378ea <quorem+0xfc>

0003790c <_Balloc>:
   3790c:	b570      	push	{r4, r5, r6, lr}
   3790e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   37910:	4604      	mov	r4, r0
   37912:	460d      	mov	r5, r1
   37914:	b93e      	cbnz	r6, 37926 <_Balloc+0x1a>
   37916:	2010      	movs	r0, #16
   37918:	f7fb fe58 	bl	335cc <malloc>
   3791c:	6260      	str	r0, [r4, #36]	; 0x24
   3791e:	6006      	str	r6, [r0, #0]
   37920:	60c6      	str	r6, [r0, #12]
   37922:	e9c0 6601 	strd	r6, r6, [r0, #4]
   37926:	6a66      	ldr	r6, [r4, #36]	; 0x24
   37928:	68f3      	ldr	r3, [r6, #12]
   3792a:	b183      	cbz	r3, 3794e <_Balloc+0x42>
   3792c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3792e:	68db      	ldr	r3, [r3, #12]
   37930:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   37934:	b9b8      	cbnz	r0, 37966 <_Balloc+0x5a>
   37936:	2101      	movs	r1, #1
   37938:	4620      	mov	r0, r4
   3793a:	fa01 f605 	lsl.w	r6, r1, r5
   3793e:	1d72      	adds	r2, r6, #5
   37940:	0092      	lsls	r2, r2, #2
   37942:	f000 faa9 	bl	37e98 <_calloc_r>
   37946:	b160      	cbz	r0, 37962 <_Balloc+0x56>
   37948:	e9c0 5601 	strd	r5, r6, [r0, #4]
   3794c:	e00e      	b.n	3796c <_Balloc+0x60>
   3794e:	2221      	movs	r2, #33	; 0x21
   37950:	2104      	movs	r1, #4
   37952:	4620      	mov	r0, r4
   37954:	f000 faa0 	bl	37e98 <_calloc_r>
   37958:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3795a:	60f0      	str	r0, [r6, #12]
   3795c:	68db      	ldr	r3, [r3, #12]
   3795e:	2b00      	cmp	r3, #0
   37960:	d1e4      	bne.n	3792c <_Balloc+0x20>
   37962:	2000      	movs	r0, #0
   37964:	bd70      	pop	{r4, r5, r6, pc}
   37966:	6802      	ldr	r2, [r0, #0]
   37968:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   3796c:	2300      	movs	r3, #0
   3796e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   37972:	e7f7      	b.n	37964 <_Balloc+0x58>

00037974 <_Bfree>:
   37974:	b570      	push	{r4, r5, r6, lr}
   37976:	6a46      	ldr	r6, [r0, #36]	; 0x24
   37978:	4605      	mov	r5, r0
   3797a:	460c      	mov	r4, r1
   3797c:	b93e      	cbnz	r6, 3798e <_Bfree+0x1a>
   3797e:	2010      	movs	r0, #16
   37980:	f7fb fe24 	bl	335cc <malloc>
   37984:	6268      	str	r0, [r5, #36]	; 0x24
   37986:	6006      	str	r6, [r0, #0]
   37988:	60c6      	str	r6, [r0, #12]
   3798a:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3798e:	b13c      	cbz	r4, 379a0 <_Bfree+0x2c>
   37990:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   37992:	6862      	ldr	r2, [r4, #4]
   37994:	68db      	ldr	r3, [r3, #12]
   37996:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3799a:	6021      	str	r1, [r4, #0]
   3799c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   379a0:	bd70      	pop	{r4, r5, r6, pc}

000379a2 <__multadd>:
   379a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   379a6:	4607      	mov	r7, r0
   379a8:	4698      	mov	r8, r3
   379aa:	460c      	mov	r4, r1
   379ac:	690e      	ldr	r6, [r1, #16]
   379ae:	f101 0014 	add.w	r0, r1, #20
   379b2:	2300      	movs	r3, #0
   379b4:	6805      	ldr	r5, [r0, #0]
   379b6:	3301      	adds	r3, #1
   379b8:	b2a9      	uxth	r1, r5
   379ba:	429e      	cmp	r6, r3
   379bc:	ea4f 4515 	mov.w	r5, r5, lsr #16
   379c0:	fb02 8101 	mla	r1, r2, r1, r8
   379c4:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   379c8:	b289      	uxth	r1, r1
   379ca:	fb02 c505 	mla	r5, r2, r5, ip
   379ce:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   379d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
   379d6:	f840 1b04 	str.w	r1, [r0], #4
   379da:	dceb      	bgt.n	379b4 <__multadd+0x12>
   379dc:	f1b8 0f00 	cmp.w	r8, #0
   379e0:	d01b      	beq.n	37a1a <__multadd+0x78>
   379e2:	68a3      	ldr	r3, [r4, #8]
   379e4:	42b3      	cmp	r3, r6
   379e6:	dc12      	bgt.n	37a0e <__multadd+0x6c>
   379e8:	6861      	ldr	r1, [r4, #4]
   379ea:	4638      	mov	r0, r7
   379ec:	3101      	adds	r1, #1
   379ee:	f7ff ff8d 	bl	3790c <_Balloc>
   379f2:	6922      	ldr	r2, [r4, #16]
   379f4:	4605      	mov	r5, r0
   379f6:	f104 010c 	add.w	r1, r4, #12
   379fa:	3202      	adds	r2, #2
   379fc:	300c      	adds	r0, #12
   379fe:	0092      	lsls	r2, r2, #2
   37a00:	f7ff fcff 	bl	37402 <memcpy>
   37a04:	4621      	mov	r1, r4
   37a06:	462c      	mov	r4, r5
   37a08:	4638      	mov	r0, r7
   37a0a:	f7ff ffb3 	bl	37974 <_Bfree>
   37a0e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   37a12:	3601      	adds	r6, #1
   37a14:	f8c3 8014 	str.w	r8, [r3, #20]
   37a18:	6126      	str	r6, [r4, #16]
   37a1a:	4620      	mov	r0, r4
   37a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00037a20 <__hi0bits>:
   37a20:	0c03      	lsrs	r3, r0, #16
   37a22:	041b      	lsls	r3, r3, #16
   37a24:	b9d3      	cbnz	r3, 37a5c <__hi0bits+0x3c>
   37a26:	0400      	lsls	r0, r0, #16
   37a28:	2310      	movs	r3, #16
   37a2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   37a2e:	bf04      	itt	eq
   37a30:	0200      	lsleq	r0, r0, #8
   37a32:	3308      	addeq	r3, #8
   37a34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   37a38:	bf04      	itt	eq
   37a3a:	0100      	lsleq	r0, r0, #4
   37a3c:	3304      	addeq	r3, #4
   37a3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   37a42:	bf04      	itt	eq
   37a44:	0080      	lsleq	r0, r0, #2
   37a46:	3302      	addeq	r3, #2
   37a48:	2800      	cmp	r0, #0
   37a4a:	db05      	blt.n	37a58 <__hi0bits+0x38>
   37a4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   37a50:	f103 0301 	add.w	r3, r3, #1
   37a54:	bf08      	it	eq
   37a56:	2320      	moveq	r3, #32
   37a58:	4618      	mov	r0, r3
   37a5a:	4770      	bx	lr
   37a5c:	2300      	movs	r3, #0
   37a5e:	e7e4      	b.n	37a2a <__hi0bits+0xa>

00037a60 <__lo0bits>:
   37a60:	6803      	ldr	r3, [r0, #0]
   37a62:	4601      	mov	r1, r0
   37a64:	f013 0207 	ands.w	r2, r3, #7
   37a68:	d00b      	beq.n	37a82 <__lo0bits+0x22>
   37a6a:	07da      	lsls	r2, r3, #31
   37a6c:	d424      	bmi.n	37ab8 <__lo0bits+0x58>
   37a6e:	0798      	lsls	r0, r3, #30
   37a70:	bf47      	ittee	mi
   37a72:	085b      	lsrmi	r3, r3, #1
   37a74:	2001      	movmi	r0, #1
   37a76:	089b      	lsrpl	r3, r3, #2
   37a78:	2002      	movpl	r0, #2
   37a7a:	bf4c      	ite	mi
   37a7c:	600b      	strmi	r3, [r1, #0]
   37a7e:	600b      	strpl	r3, [r1, #0]
   37a80:	4770      	bx	lr
   37a82:	b298      	uxth	r0, r3
   37a84:	b9b0      	cbnz	r0, 37ab4 <__lo0bits+0x54>
   37a86:	0c1b      	lsrs	r3, r3, #16
   37a88:	2010      	movs	r0, #16
   37a8a:	f013 0fff 	tst.w	r3, #255	; 0xff
   37a8e:	bf04      	itt	eq
   37a90:	0a1b      	lsreq	r3, r3, #8
   37a92:	3008      	addeq	r0, #8
   37a94:	071a      	lsls	r2, r3, #28
   37a96:	bf04      	itt	eq
   37a98:	091b      	lsreq	r3, r3, #4
   37a9a:	3004      	addeq	r0, #4
   37a9c:	079a      	lsls	r2, r3, #30
   37a9e:	bf04      	itt	eq
   37aa0:	089b      	lsreq	r3, r3, #2
   37aa2:	3002      	addeq	r0, #2
   37aa4:	07da      	lsls	r2, r3, #31
   37aa6:	d403      	bmi.n	37ab0 <__lo0bits+0x50>
   37aa8:	085b      	lsrs	r3, r3, #1
   37aaa:	f100 0001 	add.w	r0, r0, #1
   37aae:	d005      	beq.n	37abc <__lo0bits+0x5c>
   37ab0:	600b      	str	r3, [r1, #0]
   37ab2:	4770      	bx	lr
   37ab4:	4610      	mov	r0, r2
   37ab6:	e7e8      	b.n	37a8a <__lo0bits+0x2a>
   37ab8:	2000      	movs	r0, #0
   37aba:	4770      	bx	lr
   37abc:	2020      	movs	r0, #32
   37abe:	4770      	bx	lr

00037ac0 <__i2b>:
   37ac0:	b510      	push	{r4, lr}
   37ac2:	460c      	mov	r4, r1
   37ac4:	2101      	movs	r1, #1
   37ac6:	f7ff ff21 	bl	3790c <_Balloc>
   37aca:	2201      	movs	r2, #1
   37acc:	6144      	str	r4, [r0, #20]
   37ace:	6102      	str	r2, [r0, #16]
   37ad0:	bd10      	pop	{r4, pc}

00037ad2 <__multiply>:
   37ad2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37ad6:	4615      	mov	r5, r2
   37ad8:	690a      	ldr	r2, [r1, #16]
   37ada:	460c      	mov	r4, r1
   37adc:	b085      	sub	sp, #20
   37ade:	692b      	ldr	r3, [r5, #16]
   37ae0:	429a      	cmp	r2, r3
   37ae2:	bfbe      	ittt	lt
   37ae4:	460b      	movlt	r3, r1
   37ae6:	462c      	movlt	r4, r5
   37ae8:	461d      	movlt	r5, r3
   37aea:	6927      	ldr	r7, [r4, #16]
   37aec:	68a3      	ldr	r3, [r4, #8]
   37aee:	f8d5 9010 	ldr.w	r9, [r5, #16]
   37af2:	6861      	ldr	r1, [r4, #4]
   37af4:	eb07 0609 	add.w	r6, r7, r9
   37af8:	42b3      	cmp	r3, r6
   37afa:	bfb8      	it	lt
   37afc:	3101      	addlt	r1, #1
   37afe:	f7ff ff05 	bl	3790c <_Balloc>
   37b02:	f100 0114 	add.w	r1, r0, #20
   37b06:	2200      	movs	r2, #0
   37b08:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   37b0c:	460b      	mov	r3, r1
   37b0e:	4543      	cmp	r3, r8
   37b10:	d31d      	bcc.n	37b4e <__multiply+0x7c>
   37b12:	f104 0314 	add.w	r3, r4, #20
   37b16:	f105 0214 	add.w	r2, r5, #20
   37b1a:	f104 0515 	add.w	r5, r4, #21
   37b1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   37b22:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   37b26:	9302      	str	r3, [sp, #8]
   37b28:	1b3b      	subs	r3, r7, r4
   37b2a:	3b15      	subs	r3, #21
   37b2c:	f023 0303 	bic.w	r3, r3, #3
   37b30:	3304      	adds	r3, #4
   37b32:	42af      	cmp	r7, r5
   37b34:	bf38      	it	cc
   37b36:	2304      	movcc	r3, #4
   37b38:	9301      	str	r3, [sp, #4]
   37b3a:	9b02      	ldr	r3, [sp, #8]
   37b3c:	9203      	str	r2, [sp, #12]
   37b3e:	4293      	cmp	r3, r2
   37b40:	d808      	bhi.n	37b54 <__multiply+0x82>
   37b42:	2e00      	cmp	r6, #0
   37b44:	dc5a      	bgt.n	37bfc <__multiply+0x12a>
   37b46:	6106      	str	r6, [r0, #16]
   37b48:	b005      	add	sp, #20
   37b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37b4e:	f843 2b04 	str.w	r2, [r3], #4
   37b52:	e7dc      	b.n	37b0e <__multiply+0x3c>
   37b54:	f8b2 a000 	ldrh.w	sl, [r2]
   37b58:	f1ba 0f00 	cmp.w	sl, #0
   37b5c:	d024      	beq.n	37ba8 <__multiply+0xd6>
   37b5e:	f104 0e14 	add.w	lr, r4, #20
   37b62:	4689      	mov	r9, r1
   37b64:	f04f 0c00 	mov.w	ip, #0
   37b68:	f85e 5b04 	ldr.w	r5, [lr], #4
   37b6c:	f8d9 b000 	ldr.w	fp, [r9]
   37b70:	b2ab      	uxth	r3, r5
   37b72:	4577      	cmp	r7, lr
   37b74:	fa1f fb8b 	uxth.w	fp, fp
   37b78:	fb0a b303 	mla	r3, sl, r3, fp
   37b7c:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   37b80:	f8d9 5000 	ldr.w	r5, [r9]
   37b84:	4463      	add	r3, ip
   37b86:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   37b8a:	fb0a c50b 	mla	r5, sl, fp, ip
   37b8e:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   37b92:	b29b      	uxth	r3, r3
   37b94:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   37b98:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   37b9c:	f849 3b04 	str.w	r3, [r9], #4
   37ba0:	d8e2      	bhi.n	37b68 <__multiply+0x96>
   37ba2:	9b01      	ldr	r3, [sp, #4]
   37ba4:	f841 c003 	str.w	ip, [r1, r3]
   37ba8:	9b03      	ldr	r3, [sp, #12]
   37baa:	3204      	adds	r2, #4
   37bac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   37bb0:	f1b9 0f00 	cmp.w	r9, #0
   37bb4:	d020      	beq.n	37bf8 <__multiply+0x126>
   37bb6:	680b      	ldr	r3, [r1, #0]
   37bb8:	f104 0c14 	add.w	ip, r4, #20
   37bbc:	468e      	mov	lr, r1
   37bbe:	f04f 0a00 	mov.w	sl, #0
   37bc2:	f8bc 5000 	ldrh.w	r5, [ip]
   37bc6:	b29b      	uxth	r3, r3
   37bc8:	f8be b002 	ldrh.w	fp, [lr, #2]
   37bcc:	fb09 b505 	mla	r5, r9, r5, fp
   37bd0:	44aa      	add	sl, r5
   37bd2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   37bd6:	f84e 3b04 	str.w	r3, [lr], #4
   37bda:	f85c 3b04 	ldr.w	r3, [ip], #4
   37bde:	f8be 5000 	ldrh.w	r5, [lr]
   37be2:	0c1b      	lsrs	r3, r3, #16
   37be4:	4567      	cmp	r7, ip
   37be6:	fb09 5303 	mla	r3, r9, r3, r5
   37bea:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   37bee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   37bf2:	d8e6      	bhi.n	37bc2 <__multiply+0xf0>
   37bf4:	9d01      	ldr	r5, [sp, #4]
   37bf6:	514b      	str	r3, [r1, r5]
   37bf8:	3104      	adds	r1, #4
   37bfa:	e79e      	b.n	37b3a <__multiply+0x68>
   37bfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   37c00:	2b00      	cmp	r3, #0
   37c02:	d1a0      	bne.n	37b46 <__multiply+0x74>
   37c04:	3e01      	subs	r6, #1
   37c06:	e79c      	b.n	37b42 <__multiply+0x70>

00037c08 <__lshift>:
   37c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37c0c:	460c      	mov	r4, r1
   37c0e:	4607      	mov	r7, r0
   37c10:	4691      	mov	r9, r2
   37c12:	ea4f 1a62 	mov.w	sl, r2, asr #5
   37c16:	6923      	ldr	r3, [r4, #16]
   37c18:	6849      	ldr	r1, [r1, #4]
   37c1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   37c1e:	68a3      	ldr	r3, [r4, #8]
   37c20:	f108 0601 	add.w	r6, r8, #1
   37c24:	42b3      	cmp	r3, r6
   37c26:	db3f      	blt.n	37ca8 <__lshift+0xa0>
   37c28:	4638      	mov	r0, r7
   37c2a:	f7ff fe6f 	bl	3790c <_Balloc>
   37c2e:	2300      	movs	r3, #0
   37c30:	4605      	mov	r5, r0
   37c32:	f100 0114 	add.w	r1, r0, #20
   37c36:	f100 0210 	add.w	r2, r0, #16
   37c3a:	4618      	mov	r0, r3
   37c3c:	4553      	cmp	r3, sl
   37c3e:	db36      	blt.n	37cae <__lshift+0xa6>
   37c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   37c44:	f104 0314 	add.w	r3, r4, #20
   37c48:	6920      	ldr	r0, [r4, #16]
   37c4a:	f019 091f 	ands.w	r9, r9, #31
   37c4e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   37c52:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   37c56:	d02e      	beq.n	37cb6 <__lshift+0xae>
   37c58:	f1c9 0e20 	rsb	lr, r9, #32
   37c5c:	468a      	mov	sl, r1
   37c5e:	2200      	movs	r2, #0
   37c60:	6818      	ldr	r0, [r3, #0]
   37c62:	fa00 f009 	lsl.w	r0, r0, r9
   37c66:	4302      	orrs	r2, r0
   37c68:	f84a 2b04 	str.w	r2, [sl], #4
   37c6c:	f853 2b04 	ldr.w	r2, [r3], #4
   37c70:	459c      	cmp	ip, r3
   37c72:	fa22 f20e 	lsr.w	r2, r2, lr
   37c76:	d8f3      	bhi.n	37c60 <__lshift+0x58>
   37c78:	ebac 0304 	sub.w	r3, ip, r4
   37c7c:	f104 0015 	add.w	r0, r4, #21
   37c80:	3b15      	subs	r3, #21
   37c82:	f023 0303 	bic.w	r3, r3, #3
   37c86:	3304      	adds	r3, #4
   37c88:	4560      	cmp	r0, ip
   37c8a:	bf88      	it	hi
   37c8c:	2304      	movhi	r3, #4
   37c8e:	50ca      	str	r2, [r1, r3]
   37c90:	b10a      	cbz	r2, 37c96 <__lshift+0x8e>
   37c92:	f108 0602 	add.w	r6, r8, #2
   37c96:	3e01      	subs	r6, #1
   37c98:	4638      	mov	r0, r7
   37c9a:	4621      	mov	r1, r4
   37c9c:	612e      	str	r6, [r5, #16]
   37c9e:	f7ff fe69 	bl	37974 <_Bfree>
   37ca2:	4628      	mov	r0, r5
   37ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37ca8:	3101      	adds	r1, #1
   37caa:	005b      	lsls	r3, r3, #1
   37cac:	e7ba      	b.n	37c24 <__lshift+0x1c>
   37cae:	3301      	adds	r3, #1
   37cb0:	f842 0f04 	str.w	r0, [r2, #4]!
   37cb4:	e7c2      	b.n	37c3c <__lshift+0x34>
   37cb6:	3904      	subs	r1, #4
   37cb8:	f853 2b04 	ldr.w	r2, [r3], #4
   37cbc:	459c      	cmp	ip, r3
   37cbe:	f841 2f04 	str.w	r2, [r1, #4]!
   37cc2:	d8f9      	bhi.n	37cb8 <__lshift+0xb0>
   37cc4:	e7e7      	b.n	37c96 <__lshift+0x8e>

00037cc6 <__mcmp>:
   37cc6:	6902      	ldr	r2, [r0, #16]
   37cc8:	b530      	push	{r4, r5, lr}
   37cca:	690c      	ldr	r4, [r1, #16]
   37ccc:	1b12      	subs	r2, r2, r4
   37cce:	d10e      	bne.n	37cee <__mcmp+0x28>
   37cd0:	f100 0314 	add.w	r3, r0, #20
   37cd4:	3114      	adds	r1, #20
   37cd6:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   37cda:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   37cde:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   37ce2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   37ce6:	42a5      	cmp	r5, r4
   37ce8:	d003      	beq.n	37cf2 <__mcmp+0x2c>
   37cea:	d305      	bcc.n	37cf8 <__mcmp+0x32>
   37cec:	2201      	movs	r2, #1
   37cee:	4610      	mov	r0, r2
   37cf0:	bd30      	pop	{r4, r5, pc}
   37cf2:	4283      	cmp	r3, r0
   37cf4:	d3f3      	bcc.n	37cde <__mcmp+0x18>
   37cf6:	e7fa      	b.n	37cee <__mcmp+0x28>
   37cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37cfc:	e7f7      	b.n	37cee <__mcmp+0x28>

00037cfe <__mdiff>:
   37cfe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37d02:	460c      	mov	r4, r1
   37d04:	4606      	mov	r6, r0
   37d06:	4611      	mov	r1, r2
   37d08:	4692      	mov	sl, r2
   37d0a:	4620      	mov	r0, r4
   37d0c:	f7ff ffdb 	bl	37cc6 <__mcmp>
   37d10:	1e05      	subs	r5, r0, #0
   37d12:	d108      	bne.n	37d26 <__mdiff+0x28>
   37d14:	4629      	mov	r1, r5
   37d16:	4630      	mov	r0, r6
   37d18:	f7ff fdf8 	bl	3790c <_Balloc>
   37d1c:	2301      	movs	r3, #1
   37d1e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   37d22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d26:	bfa3      	ittte	ge
   37d28:	4653      	movge	r3, sl
   37d2a:	46a2      	movge	sl, r4
   37d2c:	2500      	movge	r5, #0
   37d2e:	2501      	movlt	r5, #1
   37d30:	bfa8      	it	ge
   37d32:	461c      	movge	r4, r3
   37d34:	f8da 1004 	ldr.w	r1, [sl, #4]
   37d38:	4630      	mov	r0, r6
   37d3a:	f7ff fde7 	bl	3790c <_Balloc>
   37d3e:	f104 0914 	add.w	r9, r4, #20
   37d42:	f8da 7010 	ldr.w	r7, [sl, #16]
   37d46:	f100 0814 	add.w	r8, r0, #20
   37d4a:	6926      	ldr	r6, [r4, #16]
   37d4c:	f10a 0210 	add.w	r2, sl, #16
   37d50:	60c5      	str	r5, [r0, #12]
   37d52:	f10a 0514 	add.w	r5, sl, #20
   37d56:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   37d5a:	46c2      	mov	sl, r8
   37d5c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   37d60:	f04f 0c00 	mov.w	ip, #0
   37d64:	f852 bf04 	ldr.w	fp, [r2, #4]!
   37d68:	f859 3b04 	ldr.w	r3, [r9], #4
   37d6c:	fa1f f18b 	uxth.w	r1, fp
   37d70:	454e      	cmp	r6, r9
   37d72:	4461      	add	r1, ip
   37d74:	fa1f fc83 	uxth.w	ip, r3
   37d78:	ea4f 4313 	mov.w	r3, r3, lsr #16
   37d7c:	eba1 010c 	sub.w	r1, r1, ip
   37d80:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   37d84:	eb03 4321 	add.w	r3, r3, r1, asr #16
   37d88:	b289      	uxth	r1, r1
   37d8a:	ea4f 4c23 	mov.w	ip, r3, asr #16
   37d8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   37d92:	f84a 3b04 	str.w	r3, [sl], #4
   37d96:	d8e5      	bhi.n	37d64 <__mdiff+0x66>
   37d98:	1b33      	subs	r3, r6, r4
   37d9a:	3415      	adds	r4, #21
   37d9c:	3b15      	subs	r3, #21
   37d9e:	f023 0303 	bic.w	r3, r3, #3
   37da2:	3304      	adds	r3, #4
   37da4:	42a6      	cmp	r6, r4
   37da6:	bf38      	it	cc
   37da8:	2304      	movcc	r3, #4
   37daa:	441d      	add	r5, r3
   37dac:	4443      	add	r3, r8
   37dae:	462c      	mov	r4, r5
   37db0:	461e      	mov	r6, r3
   37db2:	4574      	cmp	r4, lr
   37db4:	d30e      	bcc.n	37dd4 <__mdiff+0xd6>
   37db6:	f10e 0203 	add.w	r2, lr, #3
   37dba:	1b52      	subs	r2, r2, r5
   37dbc:	3d03      	subs	r5, #3
   37dbe:	f022 0203 	bic.w	r2, r2, #3
   37dc2:	45ae      	cmp	lr, r5
   37dc4:	bf38      	it	cc
   37dc6:	2200      	movcc	r2, #0
   37dc8:	441a      	add	r2, r3
   37dca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   37dce:	b18b      	cbz	r3, 37df4 <__mdiff+0xf6>
   37dd0:	6107      	str	r7, [r0, #16]
   37dd2:	e7a6      	b.n	37d22 <__mdiff+0x24>
   37dd4:	f854 8b04 	ldr.w	r8, [r4], #4
   37dd8:	fa1f f288 	uxth.w	r2, r8
   37ddc:	4462      	add	r2, ip
   37dde:	1411      	asrs	r1, r2, #16
   37de0:	b292      	uxth	r2, r2
   37de2:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   37de6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   37dea:	ea4f 4c21 	mov.w	ip, r1, asr #16
   37dee:	f846 2b04 	str.w	r2, [r6], #4
   37df2:	e7de      	b.n	37db2 <__mdiff+0xb4>
   37df4:	3f01      	subs	r7, #1
   37df6:	e7e8      	b.n	37dca <__mdiff+0xcc>

00037df8 <__d2b>:
   37df8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   37dfc:	ec57 6b10 	vmov	r6, r7, d0
   37e00:	f3c7 550a 	ubfx	r5, r7, #20, #11
   37e04:	4689      	mov	r9, r1
   37e06:	2101      	movs	r1, #1
   37e08:	4690      	mov	r8, r2
   37e0a:	f7ff fd7f 	bl	3790c <_Balloc>
   37e0e:	f3c7 0313 	ubfx	r3, r7, #0, #20
   37e12:	4604      	mov	r4, r0
   37e14:	bb35      	cbnz	r5, 37e64 <__d2b+0x6c>
   37e16:	2e00      	cmp	r6, #0
   37e18:	9301      	str	r3, [sp, #4]
   37e1a:	d028      	beq.n	37e6e <__d2b+0x76>
   37e1c:	4668      	mov	r0, sp
   37e1e:	9600      	str	r6, [sp, #0]
   37e20:	f7ff fe1e 	bl	37a60 <__lo0bits>
   37e24:	9900      	ldr	r1, [sp, #0]
   37e26:	b300      	cbz	r0, 37e6a <__d2b+0x72>
   37e28:	9a01      	ldr	r2, [sp, #4]
   37e2a:	f1c0 0320 	rsb	r3, r0, #32
   37e2e:	fa02 f303 	lsl.w	r3, r2, r3
   37e32:	40c2      	lsrs	r2, r0
   37e34:	430b      	orrs	r3, r1
   37e36:	9201      	str	r2, [sp, #4]
   37e38:	6163      	str	r3, [r4, #20]
   37e3a:	9b01      	ldr	r3, [sp, #4]
   37e3c:	2b00      	cmp	r3, #0
   37e3e:	61a3      	str	r3, [r4, #24]
   37e40:	bf14      	ite	ne
   37e42:	2202      	movne	r2, #2
   37e44:	2201      	moveq	r2, #1
   37e46:	6122      	str	r2, [r4, #16]
   37e48:	b1d5      	cbz	r5, 37e80 <__d2b+0x88>
   37e4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   37e4e:	4405      	add	r5, r0
   37e50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   37e54:	f8c9 5000 	str.w	r5, [r9]
   37e58:	f8c8 0000 	str.w	r0, [r8]
   37e5c:	4620      	mov	r0, r4
   37e5e:	b003      	add	sp, #12
   37e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   37e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   37e68:	e7d5      	b.n	37e16 <__d2b+0x1e>
   37e6a:	6161      	str	r1, [r4, #20]
   37e6c:	e7e5      	b.n	37e3a <__d2b+0x42>
   37e6e:	a801      	add	r0, sp, #4
   37e70:	f7ff fdf6 	bl	37a60 <__lo0bits>
   37e74:	9b01      	ldr	r3, [sp, #4]
   37e76:	2201      	movs	r2, #1
   37e78:	3020      	adds	r0, #32
   37e7a:	6163      	str	r3, [r4, #20]
   37e7c:	6122      	str	r2, [r4, #16]
   37e7e:	e7e3      	b.n	37e48 <__d2b+0x50>
   37e80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   37e84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   37e88:	f8c9 0000 	str.w	r0, [r9]
   37e8c:	6918      	ldr	r0, [r3, #16]
   37e8e:	f7ff fdc7 	bl	37a20 <__hi0bits>
   37e92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   37e96:	e7df      	b.n	37e58 <__d2b+0x60>

00037e98 <_calloc_r>:
   37e98:	434a      	muls	r2, r1
   37e9a:	b513      	push	{r0, r1, r4, lr}
   37e9c:	4611      	mov	r1, r2
   37e9e:	9201      	str	r2, [sp, #4]
   37ea0:	f7fb fc3a 	bl	33718 <_malloc_r>
   37ea4:	4604      	mov	r4, r0
   37ea6:	b118      	cbz	r0, 37eb0 <_calloc_r+0x18>
   37ea8:	9a01      	ldr	r2, [sp, #4]
   37eaa:	2100      	movs	r1, #0
   37eac:	f7ff fac9 	bl	37442 <memset>
   37eb0:	4620      	mov	r0, r4
   37eb2:	b002      	add	sp, #8
   37eb4:	bd10      	pop	{r4, pc}

00037eb6 <__ssputs_r>:
   37eb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37eba:	688e      	ldr	r6, [r1, #8]
   37ebc:	4682      	mov	sl, r0
   37ebe:	460c      	mov	r4, r1
   37ec0:	4690      	mov	r8, r2
   37ec2:	429e      	cmp	r6, r3
   37ec4:	461f      	mov	r7, r3
   37ec6:	d838      	bhi.n	37f3a <__ssputs_r+0x84>
   37ec8:	898a      	ldrh	r2, [r1, #12]
   37eca:	f412 6f90 	tst.w	r2, #1152	; 0x480
   37ece:	d032      	beq.n	37f36 <__ssputs_r+0x80>
   37ed0:	6825      	ldr	r5, [r4, #0]
   37ed2:	3301      	adds	r3, #1
   37ed4:	6909      	ldr	r1, [r1, #16]
   37ed6:	eba5 0901 	sub.w	r9, r5, r1
   37eda:	6965      	ldr	r5, [r4, #20]
   37edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   37ee0:	444b      	add	r3, r9
   37ee2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   37ee6:	106d      	asrs	r5, r5, #1
   37ee8:	429d      	cmp	r5, r3
   37eea:	bf38      	it	cc
   37eec:	461d      	movcc	r5, r3
   37eee:	0553      	lsls	r3, r2, #21
   37ef0:	d531      	bpl.n	37f56 <__ssputs_r+0xa0>
   37ef2:	4629      	mov	r1, r5
   37ef4:	f7fb fc10 	bl	33718 <_malloc_r>
   37ef8:	4606      	mov	r6, r0
   37efa:	b950      	cbnz	r0, 37f12 <__ssputs_r+0x5c>
   37efc:	230c      	movs	r3, #12
   37efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37f02:	f8ca 3000 	str.w	r3, [sl]
   37f06:	89a3      	ldrh	r3, [r4, #12]
   37f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   37f0c:	81a3      	strh	r3, [r4, #12]
   37f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37f12:	464a      	mov	r2, r9
   37f14:	6921      	ldr	r1, [r4, #16]
   37f16:	f7ff fa74 	bl	37402 <memcpy>
   37f1a:	89a3      	ldrh	r3, [r4, #12]
   37f1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   37f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   37f24:	81a3      	strh	r3, [r4, #12]
   37f26:	6126      	str	r6, [r4, #16]
   37f28:	444e      	add	r6, r9
   37f2a:	6165      	str	r5, [r4, #20]
   37f2c:	eba5 0509 	sub.w	r5, r5, r9
   37f30:	6026      	str	r6, [r4, #0]
   37f32:	463e      	mov	r6, r7
   37f34:	60a5      	str	r5, [r4, #8]
   37f36:	42be      	cmp	r6, r7
   37f38:	d900      	bls.n	37f3c <__ssputs_r+0x86>
   37f3a:	463e      	mov	r6, r7
   37f3c:	4632      	mov	r2, r6
   37f3e:	4641      	mov	r1, r8
   37f40:	6820      	ldr	r0, [r4, #0]
   37f42:	f000 f825 	bl	37f90 <memmove>
   37f46:	68a3      	ldr	r3, [r4, #8]
   37f48:	6822      	ldr	r2, [r4, #0]
   37f4a:	2000      	movs	r0, #0
   37f4c:	1b9b      	subs	r3, r3, r6
   37f4e:	4432      	add	r2, r6
   37f50:	60a3      	str	r3, [r4, #8]
   37f52:	6022      	str	r2, [r4, #0]
   37f54:	e7db      	b.n	37f0e <__ssputs_r+0x58>
   37f56:	462a      	mov	r2, r5
   37f58:	f000 f834 	bl	37fc4 <_realloc_r>
   37f5c:	4606      	mov	r6, r0
   37f5e:	2800      	cmp	r0, #0
   37f60:	d1e1      	bne.n	37f26 <__ssputs_r+0x70>
   37f62:	6921      	ldr	r1, [r4, #16]
   37f64:	4650      	mov	r0, sl
   37f66:	f7fb fb87 	bl	33678 <_free_r>
   37f6a:	e7c7      	b.n	37efc <__ssputs_r+0x46>

00037f6c <__ascii_mbtowc>:
   37f6c:	b082      	sub	sp, #8
   37f6e:	b901      	cbnz	r1, 37f72 <__ascii_mbtowc+0x6>
   37f70:	a901      	add	r1, sp, #4
   37f72:	b142      	cbz	r2, 37f86 <__ascii_mbtowc+0x1a>
   37f74:	b14b      	cbz	r3, 37f8a <__ascii_mbtowc+0x1e>
   37f76:	7813      	ldrb	r3, [r2, #0]
   37f78:	600b      	str	r3, [r1, #0]
   37f7a:	7812      	ldrb	r2, [r2, #0]
   37f7c:	1e10      	subs	r0, r2, #0
   37f7e:	bf18      	it	ne
   37f80:	2001      	movne	r0, #1
   37f82:	b002      	add	sp, #8
   37f84:	4770      	bx	lr
   37f86:	4610      	mov	r0, r2
   37f88:	e7fb      	b.n	37f82 <__ascii_mbtowc+0x16>
   37f8a:	f06f 0001 	mvn.w	r0, #1
   37f8e:	e7f8      	b.n	37f82 <__ascii_mbtowc+0x16>

00037f90 <memmove>:
   37f90:	4288      	cmp	r0, r1
   37f92:	b510      	push	{r4, lr}
   37f94:	eb01 0402 	add.w	r4, r1, r2
   37f98:	d902      	bls.n	37fa0 <memmove+0x10>
   37f9a:	4284      	cmp	r4, r0
   37f9c:	4623      	mov	r3, r4
   37f9e:	d807      	bhi.n	37fb0 <memmove+0x20>
   37fa0:	1e43      	subs	r3, r0, #1
   37fa2:	42a1      	cmp	r1, r4
   37fa4:	d008      	beq.n	37fb8 <memmove+0x28>
   37fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
   37faa:	f803 2f01 	strb.w	r2, [r3, #1]!
   37fae:	e7f8      	b.n	37fa2 <memmove+0x12>
   37fb0:	4402      	add	r2, r0
   37fb2:	4601      	mov	r1, r0
   37fb4:	428a      	cmp	r2, r1
   37fb6:	d100      	bne.n	37fba <memmove+0x2a>
   37fb8:	bd10      	pop	{r4, pc}
   37fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   37fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
   37fc2:	e7f7      	b.n	37fb4 <memmove+0x24>

00037fc4 <_realloc_r>:
   37fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37fc6:	4607      	mov	r7, r0
   37fc8:	4614      	mov	r4, r2
   37fca:	460e      	mov	r6, r1
   37fcc:	b921      	cbnz	r1, 37fd8 <_realloc_r+0x14>
   37fce:	4611      	mov	r1, r2
   37fd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   37fd4:	f7fb bba0 	b.w	33718 <_malloc_r>
   37fd8:	b922      	cbnz	r2, 37fe4 <_realloc_r+0x20>
   37fda:	4625      	mov	r5, r4
   37fdc:	f7fb fb4c 	bl	33678 <_free_r>
   37fe0:	4628      	mov	r0, r5
   37fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37fe4:	f000 f823 	bl	3802e <_malloc_usable_size_r>
   37fe8:	42a0      	cmp	r0, r4
   37fea:	d20f      	bcs.n	3800c <_realloc_r+0x48>
   37fec:	4621      	mov	r1, r4
   37fee:	4638      	mov	r0, r7
   37ff0:	f7fb fb92 	bl	33718 <_malloc_r>
   37ff4:	4605      	mov	r5, r0
   37ff6:	2800      	cmp	r0, #0
   37ff8:	d0f2      	beq.n	37fe0 <_realloc_r+0x1c>
   37ffa:	4631      	mov	r1, r6
   37ffc:	4622      	mov	r2, r4
   37ffe:	f7ff fa00 	bl	37402 <memcpy>
   38002:	4631      	mov	r1, r6
   38004:	4638      	mov	r0, r7
   38006:	f7fb fb37 	bl	33678 <_free_r>
   3800a:	e7e9      	b.n	37fe0 <_realloc_r+0x1c>
   3800c:	4635      	mov	r5, r6
   3800e:	e7e7      	b.n	37fe0 <_realloc_r+0x1c>

00038010 <__ascii_wctomb>:
   38010:	b149      	cbz	r1, 38026 <__ascii_wctomb+0x16>
   38012:	2aff      	cmp	r2, #255	; 0xff
   38014:	bf8d      	iteet	hi
   38016:	238a      	movhi	r3, #138	; 0x8a
   38018:	2001      	movls	r0, #1
   3801a:	700a      	strbls	r2, [r1, #0]
   3801c:	6003      	strhi	r3, [r0, #0]
   3801e:	bf88      	it	hi
   38020:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   38024:	4770      	bx	lr
   38026:	4608      	mov	r0, r1
   38028:	4770      	bx	lr

0003802a <__retarget_lock_acquire_recursive>:
   3802a:	4770      	bx	lr

0003802c <__retarget_lock_release_recursive>:
   3802c:	4770      	bx	lr

0003802e <_malloc_usable_size_r>:
   3802e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   38032:	1f18      	subs	r0, r3, #4
   38034:	2b00      	cmp	r3, #0
   38036:	bfbc      	itt	lt
   38038:	580b      	ldrlt	r3, [r1, r0]
   3803a:	18c0      	addlt	r0, r0, r3
   3803c:	4770      	bx	lr
