
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_start>:
   1c200:	2002fbe0 	.word	0x2002fbe0
   1c204:	00025299 	.word	0x00025299
   1c208:	00036dd5 	.word	0x00036dd5
   1c20c:	000252f9 	.word	0x000252f9
   1c210:	000252f9 	.word	0x000252f9
   1c214:	000252f9 	.word	0x000252f9
   1c218:	000252f9 	.word	0x000252f9
   1c21c:	000252f9 	.word	0x000252f9
	...
   1c22c:	00024f7d 	.word	0x00024f7d
   1c230:	000252f9 	.word	0x000252f9
   1c234:	00000000 	.word	0x00000000
   1c238:	00024ecd 	.word	0x00024ecd
   1c23c:	00036cd3 	.word	0x00036cd3

0001c240 <_irq_vector_table>:
   1c240:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c250:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c260:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c270:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c280:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c290:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c2a0:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c2b0:	000273bd 00037679 00025259 00025259     .s..yv..YR..YR..
   1c2c0:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c2d0:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c2e0:	00025259 00025259 00037697 00025259     YR..YR...v..YR..
   1c2f0:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c300:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c310:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c320:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c330:	00025259 00025259 00025259 00025259     YR..YR..YR..YR..
   1c340:	00025259                                YR..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	000219d0 00000001 0001c200 0001c200     ................
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	3c01      	subs	r4, #1
   1c57c:	bf28      	it	cs
   1c57e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1c582:	d2e9      	bcs.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_uldivmod>:
   1c7b8:	b953      	cbnz	r3, 1c7d0 <__aeabi_uldivmod+0x18>
   1c7ba:	b94a      	cbnz	r2, 1c7d0 <__aeabi_uldivmod+0x18>
   1c7bc:	2900      	cmp	r1, #0
   1c7be:	bf08      	it	eq
   1c7c0:	2800      	cmpeq	r0, #0
   1c7c2:	bf1c      	itt	ne
   1c7c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1c7c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1c7cc:	f000 b96c 	b.w	1caa8 <__aeabi_idiv0>
   1c7d0:	f1ad 0c08 	sub.w	ip, sp, #8
   1c7d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c7d8:	f000 f806 	bl	1c7e8 <__udivmoddi4>
   1c7dc:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c7e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c7e4:	b004      	add	sp, #16
   1c7e6:	4770      	bx	lr

0001c7e8 <__udivmoddi4>:
   1c7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c7ec:	9d08      	ldr	r5, [sp, #32]
   1c7ee:	4604      	mov	r4, r0
   1c7f0:	4688      	mov	r8, r1
   1c7f2:	2b00      	cmp	r3, #0
   1c7f4:	d17d      	bne.n	1c8f2 <__udivmoddi4+0x10a>
   1c7f6:	428a      	cmp	r2, r1
   1c7f8:	4617      	mov	r7, r2
   1c7fa:	d93f      	bls.n	1c87c <__udivmoddi4+0x94>
   1c7fc:	fab2 f282 	clz	r2, r2
   1c800:	b142      	cbz	r2, 1c814 <__udivmoddi4+0x2c>
   1c802:	f1c2 0020 	rsb	r0, r2, #32
   1c806:	4091      	lsls	r1, r2
   1c808:	4097      	lsls	r7, r2
   1c80a:	fa24 f000 	lsr.w	r0, r4, r0
   1c80e:	4094      	lsls	r4, r2
   1c810:	ea40 0801 	orr.w	r8, r0, r1
   1c814:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1c818:	0c23      	lsrs	r3, r4, #16
   1c81a:	fa1f fe87 	uxth.w	lr, r7
   1c81e:	fbb8 f6fc 	udiv	r6, r8, ip
   1c822:	fb0c 8116 	mls	r1, ip, r6, r8
   1c826:	fb06 f00e 	mul.w	r0, r6, lr
   1c82a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1c82e:	4298      	cmp	r0, r3
   1c830:	d905      	bls.n	1c83e <__udivmoddi4+0x56>
   1c832:	18fb      	adds	r3, r7, r3
   1c834:	d202      	bcs.n	1c83c <__udivmoddi4+0x54>
   1c836:	4298      	cmp	r0, r3
   1c838:	f200 8124 	bhi.w	1ca84 <__udivmoddi4+0x29c>
   1c83c:	3e01      	subs	r6, #1
   1c83e:	1a19      	subs	r1, r3, r0
   1c840:	b2a3      	uxth	r3, r4
   1c842:	fbb1 f0fc 	udiv	r0, r1, ip
   1c846:	fb0c 1110 	mls	r1, ip, r0, r1
   1c84a:	fb00 fe0e 	mul.w	lr, r0, lr
   1c84e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1c852:	45a6      	cmp	lr, r4
   1c854:	d905      	bls.n	1c862 <__udivmoddi4+0x7a>
   1c856:	193c      	adds	r4, r7, r4
   1c858:	d202      	bcs.n	1c860 <__udivmoddi4+0x78>
   1c85a:	45a6      	cmp	lr, r4
   1c85c:	f200 810f 	bhi.w	1ca7e <__udivmoddi4+0x296>
   1c860:	3801      	subs	r0, #1
   1c862:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1c866:	eba4 040e 	sub.w	r4, r4, lr
   1c86a:	2600      	movs	r6, #0
   1c86c:	b11d      	cbz	r5, 1c876 <__udivmoddi4+0x8e>
   1c86e:	40d4      	lsrs	r4, r2
   1c870:	2300      	movs	r3, #0
   1c872:	e9c5 4300 	strd	r4, r3, [r5]
   1c876:	4631      	mov	r1, r6
   1c878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c87c:	b902      	cbnz	r2, 1c880 <__udivmoddi4+0x98>
   1c87e:	deff      	udf	#255	; 0xff
   1c880:	fab2 f282 	clz	r2, r2
   1c884:	2a00      	cmp	r2, #0
   1c886:	d150      	bne.n	1c92a <__udivmoddi4+0x142>
   1c888:	1bcb      	subs	r3, r1, r7
   1c88a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1c88e:	fa1f f887 	uxth.w	r8, r7
   1c892:	2601      	movs	r6, #1
   1c894:	0c21      	lsrs	r1, r4, #16
   1c896:	fbb3 fcfe 	udiv	ip, r3, lr
   1c89a:	fb0e 301c 	mls	r0, lr, ip, r3
   1c89e:	460b      	mov	r3, r1
   1c8a0:	fb08 f90c 	mul.w	r9, r8, ip
   1c8a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1c8a8:	4589      	cmp	r9, r1
   1c8aa:	d90a      	bls.n	1c8c2 <__udivmoddi4+0xda>
   1c8ac:	1879      	adds	r1, r7, r1
   1c8ae:	bf2c      	ite	cs
   1c8b0:	2301      	movcs	r3, #1
   1c8b2:	2300      	movcc	r3, #0
   1c8b4:	4589      	cmp	r9, r1
   1c8b6:	d902      	bls.n	1c8be <__udivmoddi4+0xd6>
   1c8b8:	2b00      	cmp	r3, #0
   1c8ba:	f000 80d9 	beq.w	1ca70 <__udivmoddi4+0x288>
   1c8be:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1c8c2:	eba1 0109 	sub.w	r1, r1, r9
   1c8c6:	b2a3      	uxth	r3, r4
   1c8c8:	fbb1 f0fe 	udiv	r0, r1, lr
   1c8cc:	fb0e 1110 	mls	r1, lr, r0, r1
   1c8d0:	fb08 f800 	mul.w	r8, r8, r0
   1c8d4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1c8d8:	45a0      	cmp	r8, r4
   1c8da:	d905      	bls.n	1c8e8 <__udivmoddi4+0x100>
   1c8dc:	193c      	adds	r4, r7, r4
   1c8de:	d202      	bcs.n	1c8e6 <__udivmoddi4+0xfe>
   1c8e0:	45a0      	cmp	r8, r4
   1c8e2:	f200 80c9 	bhi.w	1ca78 <__udivmoddi4+0x290>
   1c8e6:	3801      	subs	r0, #1
   1c8e8:	eba4 0408 	sub.w	r4, r4, r8
   1c8ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1c8f0:	e7bc      	b.n	1c86c <__udivmoddi4+0x84>
   1c8f2:	428b      	cmp	r3, r1
   1c8f4:	d909      	bls.n	1c90a <__udivmoddi4+0x122>
   1c8f6:	2d00      	cmp	r5, #0
   1c8f8:	f000 80b1 	beq.w	1ca5e <__udivmoddi4+0x276>
   1c8fc:	2600      	movs	r6, #0
   1c8fe:	e9c5 0100 	strd	r0, r1, [r5]
   1c902:	4630      	mov	r0, r6
   1c904:	4631      	mov	r1, r6
   1c906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c90a:	fab3 f683 	clz	r6, r3
   1c90e:	2e00      	cmp	r6, #0
   1c910:	d146      	bne.n	1c9a0 <__udivmoddi4+0x1b8>
   1c912:	428b      	cmp	r3, r1
   1c914:	f0c0 80a6 	bcc.w	1ca64 <__udivmoddi4+0x27c>
   1c918:	4282      	cmp	r2, r0
   1c91a:	f240 80a3 	bls.w	1ca64 <__udivmoddi4+0x27c>
   1c91e:	4630      	mov	r0, r6
   1c920:	2d00      	cmp	r5, #0
   1c922:	d0a8      	beq.n	1c876 <__udivmoddi4+0x8e>
   1c924:	e9c5 4800 	strd	r4, r8, [r5]
   1c928:	e7a5      	b.n	1c876 <__udivmoddi4+0x8e>
   1c92a:	4097      	lsls	r7, r2
   1c92c:	f1c2 0320 	rsb	r3, r2, #32
   1c930:	fa01 f002 	lsl.w	r0, r1, r2
   1c934:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1c938:	40d9      	lsrs	r1, r3
   1c93a:	fa24 f303 	lsr.w	r3, r4, r3
   1c93e:	fa1f f887 	uxth.w	r8, r7
   1c942:	4094      	lsls	r4, r2
   1c944:	4303      	orrs	r3, r0
   1c946:	fbb1 f0fe 	udiv	r0, r1, lr
   1c94a:	0c1e      	lsrs	r6, r3, #16
   1c94c:	fb0e 1110 	mls	r1, lr, r0, r1
   1c950:	fb00 fc08 	mul.w	ip, r0, r8
   1c954:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   1c958:	458c      	cmp	ip, r1
   1c95a:	d909      	bls.n	1c970 <__udivmoddi4+0x188>
   1c95c:	1879      	adds	r1, r7, r1
   1c95e:	bf2c      	ite	cs
   1c960:	2601      	movcs	r6, #1
   1c962:	2600      	movcc	r6, #0
   1c964:	458c      	cmp	ip, r1
   1c966:	d902      	bls.n	1c96e <__udivmoddi4+0x186>
   1c968:	2e00      	cmp	r6, #0
   1c96a:	f000 8093 	beq.w	1ca94 <__udivmoddi4+0x2ac>
   1c96e:	3801      	subs	r0, #1
   1c970:	eba1 010c 	sub.w	r1, r1, ip
   1c974:	b29b      	uxth	r3, r3
   1c976:	fbb1 f6fe 	udiv	r6, r1, lr
   1c97a:	fb0e 1116 	mls	r1, lr, r6, r1
   1c97e:	fb06 fc08 	mul.w	ip, r6, r8
   1c982:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1c986:	458c      	cmp	ip, r1
   1c988:	d905      	bls.n	1c996 <__udivmoddi4+0x1ae>
   1c98a:	1879      	adds	r1, r7, r1
   1c98c:	d202      	bcs.n	1c994 <__udivmoddi4+0x1ac>
   1c98e:	458c      	cmp	ip, r1
   1c990:	f200 8087 	bhi.w	1caa2 <__udivmoddi4+0x2ba>
   1c994:	3e01      	subs	r6, #1
   1c996:	eba1 030c 	sub.w	r3, r1, ip
   1c99a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   1c99e:	e779      	b.n	1c894 <__udivmoddi4+0xac>
   1c9a0:	f1c6 0720 	rsb	r7, r6, #32
   1c9a4:	fa03 f406 	lsl.w	r4, r3, r6
   1c9a8:	fa02 fc06 	lsl.w	ip, r2, r6
   1c9ac:	fa01 fe06 	lsl.w	lr, r1, r6
   1c9b0:	40fa      	lsrs	r2, r7
   1c9b2:	fa20 f807 	lsr.w	r8, r0, r7
   1c9b6:	40f9      	lsrs	r1, r7
   1c9b8:	fa00 f306 	lsl.w	r3, r0, r6
   1c9bc:	4322      	orrs	r2, r4
   1c9be:	ea48 040e 	orr.w	r4, r8, lr
   1c9c2:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1c9c6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   1c9ca:	fa1f f982 	uxth.w	r9, r2
   1c9ce:	fbb1 faf8 	udiv	sl, r1, r8
   1c9d2:	fb08 111a 	mls	r1, r8, sl, r1
   1c9d6:	fb0a f009 	mul.w	r0, sl, r9
   1c9da:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   1c9de:	4570      	cmp	r0, lr
   1c9e0:	d90a      	bls.n	1c9f8 <__udivmoddi4+0x210>
   1c9e2:	eb12 0e0e 	adds.w	lr, r2, lr
   1c9e6:	bf2c      	ite	cs
   1c9e8:	2101      	movcs	r1, #1
   1c9ea:	2100      	movcc	r1, #0
   1c9ec:	4570      	cmp	r0, lr
   1c9ee:	d901      	bls.n	1c9f4 <__udivmoddi4+0x20c>
   1c9f0:	2900      	cmp	r1, #0
   1c9f2:	d052      	beq.n	1ca9a <__udivmoddi4+0x2b2>
   1c9f4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1c9f8:	ebae 0e00 	sub.w	lr, lr, r0
   1c9fc:	b2a4      	uxth	r4, r4
   1c9fe:	fbbe f0f8 	udiv	r0, lr, r8
   1ca02:	fb08 ee10 	mls	lr, r8, r0, lr
   1ca06:	fb00 f909 	mul.w	r9, r0, r9
   1ca0a:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   1ca0e:	45f1      	cmp	r9, lr
   1ca10:	d905      	bls.n	1ca1e <__udivmoddi4+0x236>
   1ca12:	eb12 0e0e 	adds.w	lr, r2, lr
   1ca16:	d201      	bcs.n	1ca1c <__udivmoddi4+0x234>
   1ca18:	45f1      	cmp	r9, lr
   1ca1a:	d838      	bhi.n	1ca8e <__udivmoddi4+0x2a6>
   1ca1c:	3801      	subs	r0, #1
   1ca1e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1ca22:	ebae 0e09 	sub.w	lr, lr, r9
   1ca26:	fba0 890c 	umull	r8, r9, r0, ip
   1ca2a:	45ce      	cmp	lr, r9
   1ca2c:	4641      	mov	r1, r8
   1ca2e:	464c      	mov	r4, r9
   1ca30:	d302      	bcc.n	1ca38 <__udivmoddi4+0x250>
   1ca32:	d106      	bne.n	1ca42 <__udivmoddi4+0x25a>
   1ca34:	4543      	cmp	r3, r8
   1ca36:	d204      	bcs.n	1ca42 <__udivmoddi4+0x25a>
   1ca38:	3801      	subs	r0, #1
   1ca3a:	ebb8 010c 	subs.w	r1, r8, ip
   1ca3e:	eb69 0402 	sbc.w	r4, r9, r2
   1ca42:	b315      	cbz	r5, 1ca8a <__udivmoddi4+0x2a2>
   1ca44:	1a5a      	subs	r2, r3, r1
   1ca46:	eb6e 0e04 	sbc.w	lr, lr, r4
   1ca4a:	40f2      	lsrs	r2, r6
   1ca4c:	fa0e f707 	lsl.w	r7, lr, r7
   1ca50:	fa2e f306 	lsr.w	r3, lr, r6
   1ca54:	2600      	movs	r6, #0
   1ca56:	4317      	orrs	r7, r2
   1ca58:	e9c5 7300 	strd	r7, r3, [r5]
   1ca5c:	e70b      	b.n	1c876 <__udivmoddi4+0x8e>
   1ca5e:	462e      	mov	r6, r5
   1ca60:	4628      	mov	r0, r5
   1ca62:	e708      	b.n	1c876 <__udivmoddi4+0x8e>
   1ca64:	1a84      	subs	r4, r0, r2
   1ca66:	eb61 0103 	sbc.w	r1, r1, r3
   1ca6a:	2001      	movs	r0, #1
   1ca6c:	4688      	mov	r8, r1
   1ca6e:	e757      	b.n	1c920 <__udivmoddi4+0x138>
   1ca70:	f1ac 0c02 	sub.w	ip, ip, #2
   1ca74:	4439      	add	r1, r7
   1ca76:	e724      	b.n	1c8c2 <__udivmoddi4+0xda>
   1ca78:	3802      	subs	r0, #2
   1ca7a:	443c      	add	r4, r7
   1ca7c:	e734      	b.n	1c8e8 <__udivmoddi4+0x100>
   1ca7e:	3802      	subs	r0, #2
   1ca80:	443c      	add	r4, r7
   1ca82:	e6ee      	b.n	1c862 <__udivmoddi4+0x7a>
   1ca84:	3e02      	subs	r6, #2
   1ca86:	443b      	add	r3, r7
   1ca88:	e6d9      	b.n	1c83e <__udivmoddi4+0x56>
   1ca8a:	462e      	mov	r6, r5
   1ca8c:	e6f3      	b.n	1c876 <__udivmoddi4+0x8e>
   1ca8e:	3802      	subs	r0, #2
   1ca90:	4496      	add	lr, r2
   1ca92:	e7c4      	b.n	1ca1e <__udivmoddi4+0x236>
   1ca94:	3802      	subs	r0, #2
   1ca96:	4439      	add	r1, r7
   1ca98:	e76a      	b.n	1c970 <__udivmoddi4+0x188>
   1ca9a:	f1aa 0a02 	sub.w	sl, sl, #2
   1ca9e:	4496      	add	lr, r2
   1caa0:	e7aa      	b.n	1c9f8 <__udivmoddi4+0x210>
   1caa2:	3e02      	subs	r6, #2
   1caa4:	4439      	add	r1, r7
   1caa6:	e776      	b.n	1c996 <__udivmoddi4+0x1ae>

0001caa8 <__aeabi_idiv0>:
   1caa8:	4770      	bx	lr
   1caaa:	bf00      	nop

0001caac <__aeabi_dmul>:
   1caac:	b570      	push	{r4, r5, r6, lr}
   1caae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1cab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1cab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1caba:	bf1d      	ittte	ne
   1cabc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1cac0:	ea94 0f0c 	teqne	r4, ip
   1cac4:	ea95 0f0c 	teqne	r5, ip
   1cac8:	f000 f8de 	bleq	1cc88 <__aeabi_dmul+0x1dc>
   1cacc:	442c      	add	r4, r5
   1cace:	ea81 0603 	eor.w	r6, r1, r3
   1cad2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1cad6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1cada:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1cade:	bf18      	it	ne
   1cae0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1cae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1caec:	d038      	beq.n	1cb60 <__aeabi_dmul+0xb4>
   1caee:	fba0 ce02 	umull	ip, lr, r0, r2
   1caf2:	f04f 0500 	mov.w	r5, #0
   1caf6:	fbe1 e502 	umlal	lr, r5, r1, r2
   1cafa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1cafe:	fbe0 e503 	umlal	lr, r5, r0, r3
   1cb02:	f04f 0600 	mov.w	r6, #0
   1cb06:	fbe1 5603 	umlal	r5, r6, r1, r3
   1cb0a:	f09c 0f00 	teq	ip, #0
   1cb0e:	bf18      	it	ne
   1cb10:	f04e 0e01 	orrne.w	lr, lr, #1
   1cb14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1cb18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1cb1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1cb20:	d204      	bcs.n	1cb2c <__aeabi_dmul+0x80>
   1cb22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1cb26:	416d      	adcs	r5, r5
   1cb28:	eb46 0606 	adc.w	r6, r6, r6
   1cb2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1cb30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1cb34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1cb38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1cb3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1cb40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb44:	bf88      	it	hi
   1cb46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb4a:	d81e      	bhi.n	1cb8a <__aeabi_dmul+0xde>
   1cb4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1cb50:	bf08      	it	eq
   1cb52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1cb56:	f150 0000 	adcs.w	r0, r0, #0
   1cb5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb5e:	bd70      	pop	{r4, r5, r6, pc}
   1cb60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1cb64:	ea46 0101 	orr.w	r1, r6, r1
   1cb68:	ea40 0002 	orr.w	r0, r0, r2
   1cb6c:	ea81 0103 	eor.w	r1, r1, r3
   1cb70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1cb74:	bfc2      	ittt	gt
   1cb76:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb7e:	bd70      	popgt	{r4, r5, r6, pc}
   1cb80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb84:	f04f 0e00 	mov.w	lr, #0
   1cb88:	3c01      	subs	r4, #1
   1cb8a:	f300 80ab 	bgt.w	1cce4 <__aeabi_dmul+0x238>
   1cb8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1cb92:	bfde      	ittt	le
   1cb94:	2000      	movle	r0, #0
   1cb96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1cb9a:	bd70      	pople	{r4, r5, r6, pc}
   1cb9c:	f1c4 0400 	rsb	r4, r4, #0
   1cba0:	3c20      	subs	r4, #32
   1cba2:	da35      	bge.n	1cc10 <__aeabi_dmul+0x164>
   1cba4:	340c      	adds	r4, #12
   1cba6:	dc1b      	bgt.n	1cbe0 <__aeabi_dmul+0x134>
   1cba8:	f104 0414 	add.w	r4, r4, #20
   1cbac:	f1c4 0520 	rsb	r5, r4, #32
   1cbb0:	fa00 f305 	lsl.w	r3, r0, r5
   1cbb4:	fa20 f004 	lsr.w	r0, r0, r4
   1cbb8:	fa01 f205 	lsl.w	r2, r1, r5
   1cbbc:	ea40 0002 	orr.w	r0, r0, r2
   1cbc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1cbc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1cbc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1cbcc:	fa21 f604 	lsr.w	r6, r1, r4
   1cbd0:	eb42 0106 	adc.w	r1, r2, r6
   1cbd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cbd8:	bf08      	it	eq
   1cbda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cbde:	bd70      	pop	{r4, r5, r6, pc}
   1cbe0:	f1c4 040c 	rsb	r4, r4, #12
   1cbe4:	f1c4 0520 	rsb	r5, r4, #32
   1cbe8:	fa00 f304 	lsl.w	r3, r0, r4
   1cbec:	fa20 f005 	lsr.w	r0, r0, r5
   1cbf0:	fa01 f204 	lsl.w	r2, r1, r4
   1cbf4:	ea40 0002 	orr.w	r0, r0, r2
   1cbf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1cbfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1cc00:	f141 0100 	adc.w	r1, r1, #0
   1cc04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cc08:	bf08      	it	eq
   1cc0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cc0e:	bd70      	pop	{r4, r5, r6, pc}
   1cc10:	f1c4 0520 	rsb	r5, r4, #32
   1cc14:	fa00 f205 	lsl.w	r2, r0, r5
   1cc18:	ea4e 0e02 	orr.w	lr, lr, r2
   1cc1c:	fa20 f304 	lsr.w	r3, r0, r4
   1cc20:	fa01 f205 	lsl.w	r2, r1, r5
   1cc24:	ea43 0302 	orr.w	r3, r3, r2
   1cc28:	fa21 f004 	lsr.w	r0, r1, r4
   1cc2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1cc30:	fa21 f204 	lsr.w	r2, r1, r4
   1cc34:	ea20 0002 	bic.w	r0, r0, r2
   1cc38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1cc3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cc40:	bf08      	it	eq
   1cc42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cc46:	bd70      	pop	{r4, r5, r6, pc}
   1cc48:	f094 0f00 	teq	r4, #0
   1cc4c:	d10f      	bne.n	1cc6e <__aeabi_dmul+0x1c2>
   1cc4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1cc52:	0040      	lsls	r0, r0, #1
   1cc54:	eb41 0101 	adc.w	r1, r1, r1
   1cc58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cc5c:	bf08      	it	eq
   1cc5e:	3c01      	subeq	r4, #1
   1cc60:	d0f7      	beq.n	1cc52 <__aeabi_dmul+0x1a6>
   1cc62:	ea41 0106 	orr.w	r1, r1, r6
   1cc66:	f095 0f00 	teq	r5, #0
   1cc6a:	bf18      	it	ne
   1cc6c:	4770      	bxne	lr
   1cc6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1cc72:	0052      	lsls	r2, r2, #1
   1cc74:	eb43 0303 	adc.w	r3, r3, r3
   1cc78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1cc7c:	bf08      	it	eq
   1cc7e:	3d01      	subeq	r5, #1
   1cc80:	d0f7      	beq.n	1cc72 <__aeabi_dmul+0x1c6>
   1cc82:	ea43 0306 	orr.w	r3, r3, r6
   1cc86:	4770      	bx	lr
   1cc88:	ea94 0f0c 	teq	r4, ip
   1cc8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cc90:	bf18      	it	ne
   1cc92:	ea95 0f0c 	teqne	r5, ip
   1cc96:	d00c      	beq.n	1ccb2 <__aeabi_dmul+0x206>
   1cc98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cc9c:	bf18      	it	ne
   1cc9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cca2:	d1d1      	bne.n	1cc48 <__aeabi_dmul+0x19c>
   1cca4:	ea81 0103 	eor.w	r1, r1, r3
   1cca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ccac:	f04f 0000 	mov.w	r0, #0
   1ccb0:	bd70      	pop	{r4, r5, r6, pc}
   1ccb2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ccb6:	bf06      	itte	eq
   1ccb8:	4610      	moveq	r0, r2
   1ccba:	4619      	moveq	r1, r3
   1ccbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ccc0:	d019      	beq.n	1ccf6 <__aeabi_dmul+0x24a>
   1ccc2:	ea94 0f0c 	teq	r4, ip
   1ccc6:	d102      	bne.n	1ccce <__aeabi_dmul+0x222>
   1ccc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1cccc:	d113      	bne.n	1ccf6 <__aeabi_dmul+0x24a>
   1ccce:	ea95 0f0c 	teq	r5, ip
   1ccd2:	d105      	bne.n	1cce0 <__aeabi_dmul+0x234>
   1ccd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1ccd8:	bf1c      	itt	ne
   1ccda:	4610      	movne	r0, r2
   1ccdc:	4619      	movne	r1, r3
   1ccde:	d10a      	bne.n	1ccf6 <__aeabi_dmul+0x24a>
   1cce0:	ea81 0103 	eor.w	r1, r1, r3
   1cce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1cce8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ccec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1ccf0:	f04f 0000 	mov.w	r0, #0
   1ccf4:	bd70      	pop	{r4, r5, r6, pc}
   1ccf6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ccfa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ccfe:	bd70      	pop	{r4, r5, r6, pc}

0001cd00 <__aeabi_ddiv>:
   1cd00:	b570      	push	{r4, r5, r6, lr}
   1cd02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1cd06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1cd0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1cd0e:	bf1d      	ittte	ne
   1cd10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1cd14:	ea94 0f0c 	teqne	r4, ip
   1cd18:	ea95 0f0c 	teqne	r5, ip
   1cd1c:	f000 f8a7 	bleq	1ce6e <__aeabi_ddiv+0x16e>
   1cd20:	eba4 0405 	sub.w	r4, r4, r5
   1cd24:	ea81 0e03 	eor.w	lr, r1, r3
   1cd28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cd2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1cd30:	f000 8088 	beq.w	1ce44 <__aeabi_ddiv+0x144>
   1cd34:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1cd38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1cd3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1cd40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1cd44:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1cd48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1cd4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1cd50:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1cd54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1cd58:	429d      	cmp	r5, r3
   1cd5a:	bf08      	it	eq
   1cd5c:	4296      	cmpeq	r6, r2
   1cd5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1cd62:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1cd66:	d202      	bcs.n	1cd6e <__aeabi_ddiv+0x6e>
   1cd68:	085b      	lsrs	r3, r3, #1
   1cd6a:	ea4f 0232 	mov.w	r2, r2, rrx
   1cd6e:	1ab6      	subs	r6, r6, r2
   1cd70:	eb65 0503 	sbc.w	r5, r5, r3
   1cd74:	085b      	lsrs	r3, r3, #1
   1cd76:	ea4f 0232 	mov.w	r2, r2, rrx
   1cd7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1cd7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1cd82:	ebb6 0e02 	subs.w	lr, r6, r2
   1cd86:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cd8a:	bf22      	ittt	cs
   1cd8c:	1ab6      	subcs	r6, r6, r2
   1cd8e:	4675      	movcs	r5, lr
   1cd90:	ea40 000c 	orrcs.w	r0, r0, ip
   1cd94:	085b      	lsrs	r3, r3, #1
   1cd96:	ea4f 0232 	mov.w	r2, r2, rrx
   1cd9a:	ebb6 0e02 	subs.w	lr, r6, r2
   1cd9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cda2:	bf22      	ittt	cs
   1cda4:	1ab6      	subcs	r6, r6, r2
   1cda6:	4675      	movcs	r5, lr
   1cda8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cdac:	085b      	lsrs	r3, r3, #1
   1cdae:	ea4f 0232 	mov.w	r2, r2, rrx
   1cdb2:	ebb6 0e02 	subs.w	lr, r6, r2
   1cdb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cdba:	bf22      	ittt	cs
   1cdbc:	1ab6      	subcs	r6, r6, r2
   1cdbe:	4675      	movcs	r5, lr
   1cdc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cdc4:	085b      	lsrs	r3, r3, #1
   1cdc6:	ea4f 0232 	mov.w	r2, r2, rrx
   1cdca:	ebb6 0e02 	subs.w	lr, r6, r2
   1cdce:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cdd2:	bf22      	ittt	cs
   1cdd4:	1ab6      	subcs	r6, r6, r2
   1cdd6:	4675      	movcs	r5, lr
   1cdd8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cddc:	ea55 0e06 	orrs.w	lr, r5, r6
   1cde0:	d018      	beq.n	1ce14 <__aeabi_ddiv+0x114>
   1cde2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1cde6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1cdea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cdee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cdf2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cdf6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cdfa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cdfe:	d1c0      	bne.n	1cd82 <__aeabi_ddiv+0x82>
   1ce00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ce04:	d10b      	bne.n	1ce1e <__aeabi_ddiv+0x11e>
   1ce06:	ea41 0100 	orr.w	r1, r1, r0
   1ce0a:	f04f 0000 	mov.w	r0, #0
   1ce0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1ce12:	e7b6      	b.n	1cd82 <__aeabi_ddiv+0x82>
   1ce14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ce18:	bf04      	itt	eq
   1ce1a:	4301      	orreq	r1, r0
   1ce1c:	2000      	moveq	r0, #0
   1ce1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1ce22:	bf88      	it	hi
   1ce24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1ce28:	f63f aeaf 	bhi.w	1cb8a <__aeabi_dmul+0xde>
   1ce2c:	ebb5 0c03 	subs.w	ip, r5, r3
   1ce30:	bf04      	itt	eq
   1ce32:	ebb6 0c02 	subseq.w	ip, r6, r2
   1ce36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1ce3a:	f150 0000 	adcs.w	r0, r0, #0
   1ce3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ce42:	bd70      	pop	{r4, r5, r6, pc}
   1ce44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1ce48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1ce4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1ce50:	bfc2      	ittt	gt
   1ce52:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ce56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ce5a:	bd70      	popgt	{r4, r5, r6, pc}
   1ce5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ce60:	f04f 0e00 	mov.w	lr, #0
   1ce64:	3c01      	subs	r4, #1
   1ce66:	e690      	b.n	1cb8a <__aeabi_dmul+0xde>
   1ce68:	ea45 0e06 	orr.w	lr, r5, r6
   1ce6c:	e68d      	b.n	1cb8a <__aeabi_dmul+0xde>
   1ce6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1ce72:	ea94 0f0c 	teq	r4, ip
   1ce76:	bf08      	it	eq
   1ce78:	ea95 0f0c 	teqeq	r5, ip
   1ce7c:	f43f af3b 	beq.w	1ccf6 <__aeabi_dmul+0x24a>
   1ce80:	ea94 0f0c 	teq	r4, ip
   1ce84:	d10a      	bne.n	1ce9c <__aeabi_ddiv+0x19c>
   1ce86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1ce8a:	f47f af34 	bne.w	1ccf6 <__aeabi_dmul+0x24a>
   1ce8e:	ea95 0f0c 	teq	r5, ip
   1ce92:	f47f af25 	bne.w	1cce0 <__aeabi_dmul+0x234>
   1ce96:	4610      	mov	r0, r2
   1ce98:	4619      	mov	r1, r3
   1ce9a:	e72c      	b.n	1ccf6 <__aeabi_dmul+0x24a>
   1ce9c:	ea95 0f0c 	teq	r5, ip
   1cea0:	d106      	bne.n	1ceb0 <__aeabi_ddiv+0x1b0>
   1cea2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cea6:	f43f aefd 	beq.w	1cca4 <__aeabi_dmul+0x1f8>
   1ceaa:	4610      	mov	r0, r2
   1ceac:	4619      	mov	r1, r3
   1ceae:	e722      	b.n	1ccf6 <__aeabi_dmul+0x24a>
   1ceb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ceb4:	bf18      	it	ne
   1ceb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ceba:	f47f aec5 	bne.w	1cc48 <__aeabi_dmul+0x19c>
   1cebe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cec2:	f47f af0d 	bne.w	1cce0 <__aeabi_dmul+0x234>
   1cec6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1ceca:	f47f aeeb 	bne.w	1cca4 <__aeabi_dmul+0x1f8>
   1cece:	e712      	b.n	1ccf6 <__aeabi_dmul+0x24a>

0001ced0 <__gedf2>:
   1ced0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1ced4:	e006      	b.n	1cee4 <__cmpdf2+0x4>
   1ced6:	bf00      	nop

0001ced8 <__ledf2>:
   1ced8:	f04f 0c01 	mov.w	ip, #1
   1cedc:	e002      	b.n	1cee4 <__cmpdf2+0x4>
   1cede:	bf00      	nop

0001cee0 <__cmpdf2>:
   1cee0:	f04f 0c01 	mov.w	ip, #1
   1cee4:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cee8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1ceec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cef4:	bf18      	it	ne
   1cef6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cefa:	d01b      	beq.n	1cf34 <__cmpdf2+0x54>
   1cefc:	b001      	add	sp, #4
   1cefe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cf02:	bf0c      	ite	eq
   1cf04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cf08:	ea91 0f03 	teqne	r1, r3
   1cf0c:	bf02      	ittt	eq
   1cf0e:	ea90 0f02 	teqeq	r0, r2
   1cf12:	2000      	moveq	r0, #0
   1cf14:	4770      	bxeq	lr
   1cf16:	f110 0f00 	cmn.w	r0, #0
   1cf1a:	ea91 0f03 	teq	r1, r3
   1cf1e:	bf58      	it	pl
   1cf20:	4299      	cmppl	r1, r3
   1cf22:	bf08      	it	eq
   1cf24:	4290      	cmpeq	r0, r2
   1cf26:	bf2c      	ite	cs
   1cf28:	17d8      	asrcs	r0, r3, #31
   1cf2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cf2e:	f040 0001 	orr.w	r0, r0, #1
   1cf32:	4770      	bx	lr
   1cf34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cf38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cf3c:	d102      	bne.n	1cf44 <__cmpdf2+0x64>
   1cf3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cf42:	d107      	bne.n	1cf54 <__cmpdf2+0x74>
   1cf44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cf48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cf4c:	d1d6      	bne.n	1cefc <__cmpdf2+0x1c>
   1cf4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cf52:	d0d3      	beq.n	1cefc <__cmpdf2+0x1c>
   1cf54:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cf58:	4770      	bx	lr
   1cf5a:	bf00      	nop

0001cf5c <__aeabi_cdrcmple>:
   1cf5c:	4684      	mov	ip, r0
   1cf5e:	4610      	mov	r0, r2
   1cf60:	4662      	mov	r2, ip
   1cf62:	468c      	mov	ip, r1
   1cf64:	4619      	mov	r1, r3
   1cf66:	4663      	mov	r3, ip
   1cf68:	e000      	b.n	1cf6c <__aeabi_cdcmpeq>
   1cf6a:	bf00      	nop

0001cf6c <__aeabi_cdcmpeq>:
   1cf6c:	b501      	push	{r0, lr}
   1cf6e:	f7ff ffb7 	bl	1cee0 <__cmpdf2>
   1cf72:	2800      	cmp	r0, #0
   1cf74:	bf48      	it	mi
   1cf76:	f110 0f00 	cmnmi.w	r0, #0
   1cf7a:	bd01      	pop	{r0, pc}

0001cf7c <__aeabi_dcmpeq>:
   1cf7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cf80:	f7ff fff4 	bl	1cf6c <__aeabi_cdcmpeq>
   1cf84:	bf0c      	ite	eq
   1cf86:	2001      	moveq	r0, #1
   1cf88:	2000      	movne	r0, #0
   1cf8a:	f85d fb08 	ldr.w	pc, [sp], #8
   1cf8e:	bf00      	nop

0001cf90 <__aeabi_dcmplt>:
   1cf90:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cf94:	f7ff ffea 	bl	1cf6c <__aeabi_cdcmpeq>
   1cf98:	bf34      	ite	cc
   1cf9a:	2001      	movcc	r0, #1
   1cf9c:	2000      	movcs	r0, #0
   1cf9e:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfa2:	bf00      	nop

0001cfa4 <__aeabi_dcmple>:
   1cfa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cfa8:	f7ff ffe0 	bl	1cf6c <__aeabi_cdcmpeq>
   1cfac:	bf94      	ite	ls
   1cfae:	2001      	movls	r0, #1
   1cfb0:	2000      	movhi	r0, #0
   1cfb2:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfb6:	bf00      	nop

0001cfb8 <__aeabi_dcmpge>:
   1cfb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cfbc:	f7ff ffce 	bl	1cf5c <__aeabi_cdrcmple>
   1cfc0:	bf94      	ite	ls
   1cfc2:	2001      	movls	r0, #1
   1cfc4:	2000      	movhi	r0, #0
   1cfc6:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfca:	bf00      	nop

0001cfcc <__aeabi_dcmpgt>:
   1cfcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cfd0:	f7ff ffc4 	bl	1cf5c <__aeabi_cdrcmple>
   1cfd4:	bf34      	ite	cc
   1cfd6:	2001      	movcc	r0, #1
   1cfd8:	2000      	movcs	r0, #0
   1cfda:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfde:	bf00      	nop

0001cfe0 <__aeabi_dcmpun>:
   1cfe0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cfe4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cfe8:	d102      	bne.n	1cff0 <__aeabi_dcmpun+0x10>
   1cfea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cfee:	d10a      	bne.n	1d006 <__aeabi_dcmpun+0x26>
   1cff0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cff4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cff8:	d102      	bne.n	1d000 <__aeabi_dcmpun+0x20>
   1cffa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cffe:	d102      	bne.n	1d006 <__aeabi_dcmpun+0x26>
   1d000:	f04f 0000 	mov.w	r0, #0
   1d004:	4770      	bx	lr
   1d006:	f04f 0001 	mov.w	r0, #1
   1d00a:	4770      	bx	lr

0001d00c <__aeabi_d2iz>:
   1d00c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1d010:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1d014:	d215      	bcs.n	1d042 <__aeabi_d2iz+0x36>
   1d016:	d511      	bpl.n	1d03c <__aeabi_d2iz+0x30>
   1d018:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1d01c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1d020:	d912      	bls.n	1d048 <__aeabi_d2iz+0x3c>
   1d022:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1d026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d02a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1d02e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1d032:	fa23 f002 	lsr.w	r0, r3, r2
   1d036:	bf18      	it	ne
   1d038:	4240      	negne	r0, r0
   1d03a:	4770      	bx	lr
   1d03c:	f04f 0000 	mov.w	r0, #0
   1d040:	4770      	bx	lr
   1d042:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1d046:	d105      	bne.n	1d054 <__aeabi_d2iz+0x48>
   1d048:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1d04c:	bf08      	it	eq
   1d04e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1d052:	4770      	bx	lr
   1d054:	f04f 0000 	mov.w	r0, #0
   1d058:	4770      	bx	lr
   1d05a:	bf00      	nop

0001d05c <strcmp>:
   1d05c:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d060:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d064:	2a01      	cmp	r2, #1
   1d066:	bf28      	it	cs
   1d068:	429a      	cmpcs	r2, r3
   1d06a:	d0f7      	beq.n	1d05c <strcmp>
   1d06c:	1ad0      	subs	r0, r2, r3
   1d06e:	4770      	bx	lr

0001d070 <strlen>:
   1d070:	4603      	mov	r3, r0
   1d072:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d076:	2a00      	cmp	r2, #0
   1d078:	d1fb      	bne.n	1d072 <strlen+0x2>
   1d07a:	1a18      	subs	r0, r3, r0
   1d07c:	3801      	subs	r0, #1
   1d07e:	4770      	bx	lr

0001d080 <_dtoa_r>:
   1d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d084:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1d086:	4604      	mov	r4, r0
   1d088:	ed2d 8b02 	vpush	{d8}
   1d08c:	b095      	sub	sp, #84	; 0x54
   1d08e:	ec57 6b10 	vmov	r6, r7, d0
   1d092:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   1d096:	9105      	str	r1, [sp, #20]
   1d098:	9209      	str	r2, [sp, #36]	; 0x24
   1d09a:	930f      	str	r3, [sp, #60]	; 0x3c
   1d09c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1d0a0:	b93d      	cbnz	r5, 1d0b2 <_dtoa_r+0x32>
   1d0a2:	2010      	movs	r0, #16
   1d0a4:	f018 f81e 	bl	350e4 <malloc>
   1d0a8:	6260      	str	r0, [r4, #36]	; 0x24
   1d0aa:	6005      	str	r5, [r0, #0]
   1d0ac:	60c5      	str	r5, [r0, #12]
   1d0ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1d0b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d0b4:	6819      	ldr	r1, [r3, #0]
   1d0b6:	b151      	cbz	r1, 1d0ce <_dtoa_r+0x4e>
   1d0b8:	685a      	ldr	r2, [r3, #4]
   1d0ba:	2301      	movs	r3, #1
   1d0bc:	4620      	mov	r0, r4
   1d0be:	4093      	lsls	r3, r2
   1d0c0:	604a      	str	r2, [r1, #4]
   1d0c2:	608b      	str	r3, [r1, #8]
   1d0c4:	f01b fff4 	bl	390b0 <_Bfree>
   1d0c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d0ca:	2200      	movs	r2, #0
   1d0cc:	601a      	str	r2, [r3, #0]
   1d0ce:	1e3b      	subs	r3, r7, #0
   1d0d0:	bfb7      	itett	lt
   1d0d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1d0d6:	2300      	movge	r3, #0
   1d0d8:	2201      	movlt	r2, #1
   1d0da:	9303      	strlt	r3, [sp, #12]
   1d0dc:	bfa8      	it	ge
   1d0de:	f8c8 3000 	strge.w	r3, [r8]
   1d0e2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1d0e6:	4bb6      	ldr	r3, [pc, #728]	; (1d3c0 <_dtoa_r+0x340>)
   1d0e8:	bfb8      	it	lt
   1d0ea:	f8c8 2000 	strlt.w	r2, [r8]
   1d0ee:	ea33 0309 	bics.w	r3, r3, r9
   1d0f2:	d11b      	bne.n	1d12c <_dtoa_r+0xac>
   1d0f4:	f242 730f 	movw	r3, #9999	; 0x270f
   1d0f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1d0fa:	6013      	str	r3, [r2, #0]
   1d0fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1d100:	4333      	orrs	r3, r6
   1d102:	f000 8572 	beq.w	1dbea <_dtoa_r+0xb6a>
   1d106:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1d108:	b963      	cbnz	r3, 1d124 <_dtoa_r+0xa4>
   1d10a:	4bae      	ldr	r3, [pc, #696]	; (1d3c4 <_dtoa_r+0x344>)
   1d10c:	e025      	b.n	1d15a <_dtoa_r+0xda>
   1d10e:	4bae      	ldr	r3, [pc, #696]	; (1d3c8 <_dtoa_r+0x348>)
   1d110:	9300      	str	r3, [sp, #0]
   1d112:	3308      	adds	r3, #8
   1d114:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1d116:	6013      	str	r3, [r2, #0]
   1d118:	9800      	ldr	r0, [sp, #0]
   1d11a:	b015      	add	sp, #84	; 0x54
   1d11c:	ecbd 8b02 	vpop	{d8}
   1d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d124:	4ba7      	ldr	r3, [pc, #668]	; (1d3c4 <_dtoa_r+0x344>)
   1d126:	9300      	str	r3, [sp, #0]
   1d128:	3303      	adds	r3, #3
   1d12a:	e7f3      	b.n	1d114 <_dtoa_r+0x94>
   1d12c:	ed9d 7b02 	vldr	d7, [sp, #8]
   1d130:	2200      	movs	r2, #0
   1d132:	2300      	movs	r3, #0
   1d134:	ec51 0b17 	vmov	r0, r1, d7
   1d138:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1d13c:	f7ff ff1e 	bl	1cf7c <__aeabi_dcmpeq>
   1d140:	4680      	mov	r8, r0
   1d142:	b160      	cbz	r0, 1d15e <_dtoa_r+0xde>
   1d144:	2301      	movs	r3, #1
   1d146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1d148:	6013      	str	r3, [r2, #0]
   1d14a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1d14c:	2b00      	cmp	r3, #0
   1d14e:	f000 8549 	beq.w	1dbe4 <_dtoa_r+0xb64>
   1d152:	4b9e      	ldr	r3, [pc, #632]	; (1d3cc <_dtoa_r+0x34c>)
   1d154:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1d156:	6013      	str	r3, [r2, #0]
   1d158:	3b01      	subs	r3, #1
   1d15a:	9300      	str	r3, [sp, #0]
   1d15c:	e7dc      	b.n	1d118 <_dtoa_r+0x98>
   1d15e:	f3c9 550a 	ubfx	r5, r9, #20, #11
   1d162:	aa12      	add	r2, sp, #72	; 0x48
   1d164:	a913      	add	r1, sp, #76	; 0x4c
   1d166:	4620      	mov	r0, r4
   1d168:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1d16c:	f01c f9e2 	bl	39534 <__d2b>
   1d170:	4682      	mov	sl, r0
   1d172:	2d00      	cmp	r5, #0
   1d174:	d07c      	beq.n	1d270 <_dtoa_r+0x1f0>
   1d176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d178:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1d17c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   1d180:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d184:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   1d188:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1d18c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   1d190:	2200      	movs	r2, #0
   1d192:	4b8f      	ldr	r3, [pc, #572]	; (1d3d0 <_dtoa_r+0x350>)
   1d194:	4630      	mov	r0, r6
   1d196:	4639      	mov	r1, r7
   1d198:	f7ff f956 	bl	1c448 <__aeabi_dsub>
   1d19c:	a382      	add	r3, pc, #520	; (adr r3, 1d3a8 <_dtoa_r+0x328>)
   1d19e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1a2:	f7ff fc83 	bl	1caac <__aeabi_dmul>
   1d1a6:	a382      	add	r3, pc, #520	; (adr r3, 1d3b0 <_dtoa_r+0x330>)
   1d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1ac:	f7ff f94e 	bl	1c44c <__adddf3>
   1d1b0:	4606      	mov	r6, r0
   1d1b2:	460f      	mov	r7, r1
   1d1b4:	4628      	mov	r0, r5
   1d1b6:	f7ff fa95 	bl	1c6e4 <__aeabi_i2d>
   1d1ba:	a37f      	add	r3, pc, #508	; (adr r3, 1d3b8 <_dtoa_r+0x338>)
   1d1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1c0:	f7ff fc74 	bl	1caac <__aeabi_dmul>
   1d1c4:	4602      	mov	r2, r0
   1d1c6:	460b      	mov	r3, r1
   1d1c8:	4630      	mov	r0, r6
   1d1ca:	4639      	mov	r1, r7
   1d1cc:	f7ff f93e 	bl	1c44c <__adddf3>
   1d1d0:	4606      	mov	r6, r0
   1d1d2:	460f      	mov	r7, r1
   1d1d4:	f7ff ff1a 	bl	1d00c <__aeabi_d2iz>
   1d1d8:	2200      	movs	r2, #0
   1d1da:	4681      	mov	r9, r0
   1d1dc:	2300      	movs	r3, #0
   1d1de:	4630      	mov	r0, r6
   1d1e0:	4639      	mov	r1, r7
   1d1e2:	f7ff fed5 	bl	1cf90 <__aeabi_dcmplt>
   1d1e6:	b148      	cbz	r0, 1d1fc <_dtoa_r+0x17c>
   1d1e8:	4648      	mov	r0, r9
   1d1ea:	f7ff fa7b 	bl	1c6e4 <__aeabi_i2d>
   1d1ee:	4632      	mov	r2, r6
   1d1f0:	463b      	mov	r3, r7
   1d1f2:	f7ff fec3 	bl	1cf7c <__aeabi_dcmpeq>
   1d1f6:	b908      	cbnz	r0, 1d1fc <_dtoa_r+0x17c>
   1d1f8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1d1fc:	f1b9 0f16 	cmp.w	r9, #22
   1d200:	d855      	bhi.n	1d2ae <_dtoa_r+0x22e>
   1d202:	4b74      	ldr	r3, [pc, #464]	; (1d3d4 <_dtoa_r+0x354>)
   1d204:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1d208:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d210:	f7ff febe 	bl	1cf90 <__aeabi_dcmplt>
   1d214:	2800      	cmp	r0, #0
   1d216:	d04c      	beq.n	1d2b2 <_dtoa_r+0x232>
   1d218:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1d21c:	2300      	movs	r3, #0
   1d21e:	930e      	str	r3, [sp, #56]	; 0x38
   1d220:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1d222:	1b5d      	subs	r5, r3, r5
   1d224:	1e6b      	subs	r3, r5, #1
   1d226:	9304      	str	r3, [sp, #16]
   1d228:	bf45      	ittet	mi
   1d22a:	2300      	movmi	r3, #0
   1d22c:	f1c5 0801 	rsbmi	r8, r5, #1
   1d230:	f04f 0800 	movpl.w	r8, #0
   1d234:	9304      	strmi	r3, [sp, #16]
   1d236:	f1b9 0f00 	cmp.w	r9, #0
   1d23a:	db3c      	blt.n	1d2b6 <_dtoa_r+0x236>
   1d23c:	9b04      	ldr	r3, [sp, #16]
   1d23e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1d242:	444b      	add	r3, r9
   1d244:	9304      	str	r3, [sp, #16]
   1d246:	2300      	movs	r3, #0
   1d248:	9306      	str	r3, [sp, #24]
   1d24a:	9b05      	ldr	r3, [sp, #20]
   1d24c:	2b09      	cmp	r3, #9
   1d24e:	f200 8099 	bhi.w	1d384 <_dtoa_r+0x304>
   1d252:	2b05      	cmp	r3, #5
   1d254:	bfc5      	ittet	gt
   1d256:	3b04      	subgt	r3, #4
   1d258:	2500      	movgt	r5, #0
   1d25a:	2501      	movle	r5, #1
   1d25c:	9305      	strgt	r3, [sp, #20]
   1d25e:	9b05      	ldr	r3, [sp, #20]
   1d260:	3b02      	subs	r3, #2
   1d262:	2b03      	cmp	r3, #3
   1d264:	f200 809a 	bhi.w	1d39c <_dtoa_r+0x31c>
   1d268:	e8df f003 	tbb	[pc, r3]
   1d26c:	8a7c7e2d 	.word	0x8a7c7e2d
   1d270:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
   1d274:	441d      	add	r5, r3
   1d276:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1d27a:	2b20      	cmp	r3, #32
   1d27c:	bfc6      	itte	gt
   1d27e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   1d282:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   1d286:	f1c3 0320 	rsble	r3, r3, #32
   1d28a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1d28e:	bfc5      	ittet	gt
   1d290:	fa09 f303 	lslgt.w	r3, r9, r3
   1d294:	fa26 f000 	lsrgt.w	r0, r6, r0
   1d298:	fa06 f003 	lslle.w	r0, r6, r3
   1d29c:	4318      	orrgt	r0, r3
   1d29e:	f7ff fa11 	bl	1c6c4 <__aeabi_ui2d>
   1d2a2:	2301      	movs	r3, #1
   1d2a4:	4606      	mov	r6, r0
   1d2a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1d2aa:	9310      	str	r3, [sp, #64]	; 0x40
   1d2ac:	e770      	b.n	1d190 <_dtoa_r+0x110>
   1d2ae:	2301      	movs	r3, #1
   1d2b0:	e7b5      	b.n	1d21e <_dtoa_r+0x19e>
   1d2b2:	900e      	str	r0, [sp, #56]	; 0x38
   1d2b4:	e7b4      	b.n	1d220 <_dtoa_r+0x1a0>
   1d2b6:	f1c9 0300 	rsb	r3, r9, #0
   1d2ba:	eba8 0809 	sub.w	r8, r8, r9
   1d2be:	9306      	str	r3, [sp, #24]
   1d2c0:	2300      	movs	r3, #0
   1d2c2:	930d      	str	r3, [sp, #52]	; 0x34
   1d2c4:	e7c1      	b.n	1d24a <_dtoa_r+0x1ca>
   1d2c6:	2300      	movs	r3, #0
   1d2c8:	9308      	str	r3, [sp, #32]
   1d2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d2cc:	2b00      	cmp	r3, #0
   1d2ce:	f300 8085 	bgt.w	1d3dc <_dtoa_r+0x35c>
   1d2d2:	f04f 0b01 	mov.w	fp, #1
   1d2d6:	465b      	mov	r3, fp
   1d2d8:	f8cd b004 	str.w	fp, [sp, #4]
   1d2dc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   1d2e0:	2200      	movs	r2, #0
   1d2e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d2e4:	6072      	str	r2, [r6, #4]
   1d2e6:	2204      	movs	r2, #4
   1d2e8:	f102 0014 	add.w	r0, r2, #20
   1d2ec:	6871      	ldr	r1, [r6, #4]
   1d2ee:	4298      	cmp	r0, r3
   1d2f0:	d97a      	bls.n	1d3e8 <_dtoa_r+0x368>
   1d2f2:	4620      	mov	r0, r4
   1d2f4:	f01b fea8 	bl	39048 <_Balloc>
   1d2f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d2fa:	6030      	str	r0, [r6, #0]
   1d2fc:	681b      	ldr	r3, [r3, #0]
   1d2fe:	9300      	str	r3, [sp, #0]
   1d300:	9b01      	ldr	r3, [sp, #4]
   1d302:	2b0e      	cmp	r3, #14
   1d304:	f200 80f5 	bhi.w	1d4f2 <_dtoa_r+0x472>
   1d308:	2d00      	cmp	r5, #0
   1d30a:	f000 80f2 	beq.w	1d4f2 <_dtoa_r+0x472>
   1d30e:	f1b9 0f00 	cmp.w	r9, #0
   1d312:	dd7d      	ble.n	1d410 <_dtoa_r+0x390>
   1d314:	f009 030f 	and.w	r3, r9, #15
   1d318:	4a2e      	ldr	r2, [pc, #184]	; (1d3d4 <_dtoa_r+0x354>)
   1d31a:	f419 7f80 	tst.w	r9, #256	; 0x100
   1d31e:	ea4f 1729 	mov.w	r7, r9, asr #4
   1d322:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1d326:	ed93 7b00 	vldr	d7, [r3]
   1d32a:	eeb0 8a47 	vmov.f32	s16, s14
   1d32e:	eef0 8a67 	vmov.f32	s17, s15
   1d332:	d05d      	beq.n	1d3f0 <_dtoa_r+0x370>
   1d334:	4b28      	ldr	r3, [pc, #160]	; (1d3d8 <_dtoa_r+0x358>)
   1d336:	f007 070f 	and.w	r7, r7, #15
   1d33a:	2503      	movs	r5, #3
   1d33c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1d340:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d344:	f7ff fcdc 	bl	1cd00 <__aeabi_ddiv>
   1d348:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d34c:	4e22      	ldr	r6, [pc, #136]	; (1d3d8 <_dtoa_r+0x358>)
   1d34e:	2f00      	cmp	r7, #0
   1d350:	d150      	bne.n	1d3f4 <_dtoa_r+0x374>
   1d352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1d356:	ec53 2b18 	vmov	r2, r3, d8
   1d35a:	f7ff fcd1 	bl	1cd00 <__aeabi_ddiv>
   1d35e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d362:	e06f      	b.n	1d444 <_dtoa_r+0x3c4>
   1d364:	2301      	movs	r3, #1
   1d366:	e7af      	b.n	1d2c8 <_dtoa_r+0x248>
   1d368:	2300      	movs	r3, #0
   1d36a:	9308      	str	r3, [sp, #32]
   1d36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d36e:	eb09 0b03 	add.w	fp, r9, r3
   1d372:	f10b 0301 	add.w	r3, fp, #1
   1d376:	2b01      	cmp	r3, #1
   1d378:	9301      	str	r3, [sp, #4]
   1d37a:	bfb8      	it	lt
   1d37c:	2301      	movlt	r3, #1
   1d37e:	e7af      	b.n	1d2e0 <_dtoa_r+0x260>
   1d380:	2301      	movs	r3, #1
   1d382:	e7f2      	b.n	1d36a <_dtoa_r+0x2ea>
   1d384:	2501      	movs	r5, #1
   1d386:	2300      	movs	r3, #0
   1d388:	9508      	str	r5, [sp, #32]
   1d38a:	9305      	str	r3, [sp, #20]
   1d38c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1d390:	2200      	movs	r2, #0
   1d392:	2312      	movs	r3, #18
   1d394:	f8cd b004 	str.w	fp, [sp, #4]
   1d398:	9209      	str	r2, [sp, #36]	; 0x24
   1d39a:	e7a1      	b.n	1d2e0 <_dtoa_r+0x260>
   1d39c:	2301      	movs	r3, #1
   1d39e:	9308      	str	r3, [sp, #32]
   1d3a0:	e7f4      	b.n	1d38c <_dtoa_r+0x30c>
   1d3a2:	bf00      	nop
   1d3a4:	f3af 8000 	nop.w
   1d3a8:	636f4361 	.word	0x636f4361
   1d3ac:	3fd287a7 	.word	0x3fd287a7
   1d3b0:	8b60c8b3 	.word	0x8b60c8b3
   1d3b4:	3fc68a28 	.word	0x3fc68a28
   1d3b8:	509f79fb 	.word	0x509f79fb
   1d3bc:	3fd34413 	.word	0x3fd34413
   1d3c0:	7ff00000 	.word	0x7ff00000
   1d3c4:	0003d313 	.word	0x0003d313
   1d3c8:	0003d30a 	.word	0x0003d30a
   1d3cc:	0003ad33 	.word	0x0003ad33
   1d3d0:	3ff80000 	.word	0x3ff80000
   1d3d4:	00039be0 	.word	0x00039be0
   1d3d8:	00039bb8 	.word	0x00039bb8
   1d3dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   1d3e0:	465b      	mov	r3, fp
   1d3e2:	f8cd b004 	str.w	fp, [sp, #4]
   1d3e6:	e77b      	b.n	1d2e0 <_dtoa_r+0x260>
   1d3e8:	3101      	adds	r1, #1
   1d3ea:	0052      	lsls	r2, r2, #1
   1d3ec:	6071      	str	r1, [r6, #4]
   1d3ee:	e77b      	b.n	1d2e8 <_dtoa_r+0x268>
   1d3f0:	2502      	movs	r5, #2
   1d3f2:	e7ab      	b.n	1d34c <_dtoa_r+0x2cc>
   1d3f4:	07f9      	lsls	r1, r7, #31
   1d3f6:	d508      	bpl.n	1d40a <_dtoa_r+0x38a>
   1d3f8:	3501      	adds	r5, #1
   1d3fa:	ec51 0b18 	vmov	r0, r1, d8
   1d3fe:	e9d6 2300 	ldrd	r2, r3, [r6]
   1d402:	f7ff fb53 	bl	1caac <__aeabi_dmul>
   1d406:	ec41 0b18 	vmov	d8, r0, r1
   1d40a:	107f      	asrs	r7, r7, #1
   1d40c:	3608      	adds	r6, #8
   1d40e:	e79e      	b.n	1d34e <_dtoa_r+0x2ce>
   1d410:	f000 80ab 	beq.w	1d56a <_dtoa_r+0x4ea>
   1d414:	f1c9 0600 	rsb	r6, r9, #0
   1d418:	4baa      	ldr	r3, [pc, #680]	; (1d6c4 <_dtoa_r+0x644>)
   1d41a:	4fab      	ldr	r7, [pc, #684]	; (1d6c8 <_dtoa_r+0x648>)
   1d41c:	2502      	movs	r5, #2
   1d41e:	f006 020f 	and.w	r2, r6, #15
   1d422:	1136      	asrs	r6, r6, #4
   1d424:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d428:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d430:	f7ff fb3c 	bl	1caac <__aeabi_dmul>
   1d434:	2300      	movs	r3, #0
   1d436:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d43a:	2e00      	cmp	r6, #0
   1d43c:	f040 808a 	bne.w	1d554 <_dtoa_r+0x4d4>
   1d440:	2b00      	cmp	r3, #0
   1d442:	d18c      	bne.n	1d35e <_dtoa_r+0x2de>
   1d444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d446:	2b00      	cmp	r3, #0
   1d448:	f000 8091 	beq.w	1d56e <_dtoa_r+0x4ee>
   1d44c:	2200      	movs	r2, #0
   1d44e:	4b9f      	ldr	r3, [pc, #636]	; (1d6cc <_dtoa_r+0x64c>)
   1d450:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1d454:	4630      	mov	r0, r6
   1d456:	4639      	mov	r1, r7
   1d458:	f7ff fd9a 	bl	1cf90 <__aeabi_dcmplt>
   1d45c:	2800      	cmp	r0, #0
   1d45e:	f000 8086 	beq.w	1d56e <_dtoa_r+0x4ee>
   1d462:	9b01      	ldr	r3, [sp, #4]
   1d464:	2b00      	cmp	r3, #0
   1d466:	f000 8082 	beq.w	1d56e <_dtoa_r+0x4ee>
   1d46a:	f1bb 0f00 	cmp.w	fp, #0
   1d46e:	dd3c      	ble.n	1d4ea <_dtoa_r+0x46a>
   1d470:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   1d474:	3501      	adds	r5, #1
   1d476:	2200      	movs	r2, #0
   1d478:	4630      	mov	r0, r6
   1d47a:	9307      	str	r3, [sp, #28]
   1d47c:	4639      	mov	r1, r7
   1d47e:	4b94      	ldr	r3, [pc, #592]	; (1d6d0 <_dtoa_r+0x650>)
   1d480:	f7ff fb14 	bl	1caac <__aeabi_dmul>
   1d484:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   1d488:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d48c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1d490:	4628      	mov	r0, r5
   1d492:	f7ff f927 	bl	1c6e4 <__aeabi_i2d>
   1d496:	4632      	mov	r2, r6
   1d498:	463b      	mov	r3, r7
   1d49a:	f7ff fb07 	bl	1caac <__aeabi_dmul>
   1d49e:	4b8d      	ldr	r3, [pc, #564]	; (1d6d4 <_dtoa_r+0x654>)
   1d4a0:	2200      	movs	r2, #0
   1d4a2:	f7fe ffd3 	bl	1c44c <__adddf3>
   1d4a6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   1d4aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d4ae:	9303      	str	r3, [sp, #12]
   1d4b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d4b2:	2b00      	cmp	r3, #0
   1d4b4:	d160      	bne.n	1d578 <_dtoa_r+0x4f8>
   1d4b6:	2200      	movs	r2, #0
   1d4b8:	4b87      	ldr	r3, [pc, #540]	; (1d6d8 <_dtoa_r+0x658>)
   1d4ba:	4630      	mov	r0, r6
   1d4bc:	4639      	mov	r1, r7
   1d4be:	f7fe ffc3 	bl	1c448 <__aeabi_dsub>
   1d4c2:	4606      	mov	r6, r0
   1d4c4:	460f      	mov	r7, r1
   1d4c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d4ca:	f7ff fd7f 	bl	1cfcc <__aeabi_dcmpgt>
   1d4ce:	2800      	cmp	r0, #0
   1d4d0:	f040 8297 	bne.w	1da02 <_dtoa_r+0x982>
   1d4d4:	4630      	mov	r0, r6
   1d4d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1d4da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1d4de:	4639      	mov	r1, r7
   1d4e0:	f7ff fd56 	bl	1cf90 <__aeabi_dcmplt>
   1d4e4:	2800      	cmp	r0, #0
   1d4e6:	f040 8289 	bne.w	1d9fc <_dtoa_r+0x97c>
   1d4ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1d4ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d4f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1d4f4:	2b00      	cmp	r3, #0
   1d4f6:	f2c0 815b 	blt.w	1d7b0 <_dtoa_r+0x730>
   1d4fa:	f1b9 0f0e 	cmp.w	r9, #14
   1d4fe:	f300 8157 	bgt.w	1d7b0 <_dtoa_r+0x730>
   1d502:	4b70      	ldr	r3, [pc, #448]	; (1d6c4 <_dtoa_r+0x644>)
   1d504:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1d508:	ed93 7b00 	vldr	d7, [r3]
   1d50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d50e:	2b00      	cmp	r3, #0
   1d510:	eeb0 8a47 	vmov.f32	s16, s14
   1d514:	eef0 8a67 	vmov.f32	s17, s15
   1d518:	f280 80e2 	bge.w	1d6e0 <_dtoa_r+0x660>
   1d51c:	9b01      	ldr	r3, [sp, #4]
   1d51e:	2b00      	cmp	r3, #0
   1d520:	f300 80de 	bgt.w	1d6e0 <_dtoa_r+0x660>
   1d524:	f040 826a 	bne.w	1d9fc <_dtoa_r+0x97c>
   1d528:	2200      	movs	r2, #0
   1d52a:	4b6b      	ldr	r3, [pc, #428]	; (1d6d8 <_dtoa_r+0x658>)
   1d52c:	ec51 0b17 	vmov	r0, r1, d7
   1d530:	f7ff fabc 	bl	1caac <__aeabi_dmul>
   1d534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d538:	f7ff fd3e 	bl	1cfb8 <__aeabi_dcmpge>
   1d53c:	9e01      	ldr	r6, [sp, #4]
   1d53e:	4637      	mov	r7, r6
   1d540:	2800      	cmp	r0, #0
   1d542:	f040 8240 	bne.w	1d9c6 <_dtoa_r+0x946>
   1d546:	9d00      	ldr	r5, [sp, #0]
   1d548:	2331      	movs	r3, #49	; 0x31
   1d54a:	f109 0901 	add.w	r9, r9, #1
   1d54e:	f805 3b01 	strb.w	r3, [r5], #1
   1d552:	e23c      	b.n	1d9ce <_dtoa_r+0x94e>
   1d554:	07f2      	lsls	r2, r6, #31
   1d556:	d505      	bpl.n	1d564 <_dtoa_r+0x4e4>
   1d558:	3501      	adds	r5, #1
   1d55a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1d55e:	f7ff faa5 	bl	1caac <__aeabi_dmul>
   1d562:	2301      	movs	r3, #1
   1d564:	1076      	asrs	r6, r6, #1
   1d566:	3708      	adds	r7, #8
   1d568:	e767      	b.n	1d43a <_dtoa_r+0x3ba>
   1d56a:	2502      	movs	r5, #2
   1d56c:	e76a      	b.n	1d444 <_dtoa_r+0x3c4>
   1d56e:	9b01      	ldr	r3, [sp, #4]
   1d570:	f8cd 901c 	str.w	r9, [sp, #28]
   1d574:	930c      	str	r3, [sp, #48]	; 0x30
   1d576:	e789      	b.n	1d48c <_dtoa_r+0x40c>
   1d578:	9900      	ldr	r1, [sp, #0]
   1d57a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1d57c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d57e:	4401      	add	r1, r0
   1d580:	4b50      	ldr	r3, [pc, #320]	; (1d6c4 <_dtoa_r+0x644>)
   1d582:	ed9d 7b02 	vldr	d7, [sp, #8]
   1d586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d58a:	9102      	str	r1, [sp, #8]
   1d58c:	9908      	ldr	r1, [sp, #32]
   1d58e:	eeb0 8a47 	vmov.f32	s16, s14
   1d592:	eef0 8a67 	vmov.f32	s17, s15
   1d596:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1d59a:	2900      	cmp	r1, #0
   1d59c:	d045      	beq.n	1d62a <_dtoa_r+0x5aa>
   1d59e:	2000      	movs	r0, #0
   1d5a0:	494e      	ldr	r1, [pc, #312]	; (1d6dc <_dtoa_r+0x65c>)
   1d5a2:	f7ff fbad 	bl	1cd00 <__aeabi_ddiv>
   1d5a6:	ec53 2b18 	vmov	r2, r3, d8
   1d5aa:	f7fe ff4d 	bl	1c448 <__aeabi_dsub>
   1d5ae:	9d00      	ldr	r5, [sp, #0]
   1d5b0:	ec41 0b18 	vmov	d8, r0, r1
   1d5b4:	4639      	mov	r1, r7
   1d5b6:	4630      	mov	r0, r6
   1d5b8:	f7ff fd28 	bl	1d00c <__aeabi_d2iz>
   1d5bc:	900c      	str	r0, [sp, #48]	; 0x30
   1d5be:	f7ff f891 	bl	1c6e4 <__aeabi_i2d>
   1d5c2:	4602      	mov	r2, r0
   1d5c4:	460b      	mov	r3, r1
   1d5c6:	4630      	mov	r0, r6
   1d5c8:	4639      	mov	r1, r7
   1d5ca:	f7fe ff3d 	bl	1c448 <__aeabi_dsub>
   1d5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d5d0:	4606      	mov	r6, r0
   1d5d2:	460f      	mov	r7, r1
   1d5d4:	3330      	adds	r3, #48	; 0x30
   1d5d6:	f805 3b01 	strb.w	r3, [r5], #1
   1d5da:	ec53 2b18 	vmov	r2, r3, d8
   1d5de:	f7ff fcd7 	bl	1cf90 <__aeabi_dcmplt>
   1d5e2:	2800      	cmp	r0, #0
   1d5e4:	d164      	bne.n	1d6b0 <_dtoa_r+0x630>
   1d5e6:	4632      	mov	r2, r6
   1d5e8:	463b      	mov	r3, r7
   1d5ea:	2000      	movs	r0, #0
   1d5ec:	4937      	ldr	r1, [pc, #220]	; (1d6cc <_dtoa_r+0x64c>)
   1d5ee:	f7fe ff2b 	bl	1c448 <__aeabi_dsub>
   1d5f2:	ec53 2b18 	vmov	r2, r3, d8
   1d5f6:	f7ff fccb 	bl	1cf90 <__aeabi_dcmplt>
   1d5fa:	2800      	cmp	r0, #0
   1d5fc:	f040 80b8 	bne.w	1d770 <_dtoa_r+0x6f0>
   1d600:	9b02      	ldr	r3, [sp, #8]
   1d602:	429d      	cmp	r5, r3
   1d604:	f43f af71 	beq.w	1d4ea <_dtoa_r+0x46a>
   1d608:	2200      	movs	r2, #0
   1d60a:	4b31      	ldr	r3, [pc, #196]	; (1d6d0 <_dtoa_r+0x650>)
   1d60c:	ec51 0b18 	vmov	r0, r1, d8
   1d610:	f7ff fa4c 	bl	1caac <__aeabi_dmul>
   1d614:	2200      	movs	r2, #0
   1d616:	4b2e      	ldr	r3, [pc, #184]	; (1d6d0 <_dtoa_r+0x650>)
   1d618:	ec41 0b18 	vmov	d8, r0, r1
   1d61c:	4630      	mov	r0, r6
   1d61e:	4639      	mov	r1, r7
   1d620:	f7ff fa44 	bl	1caac <__aeabi_dmul>
   1d624:	4606      	mov	r6, r0
   1d626:	460f      	mov	r7, r1
   1d628:	e7c4      	b.n	1d5b4 <_dtoa_r+0x534>
   1d62a:	ec51 0b17 	vmov	r0, r1, d7
   1d62e:	f7ff fa3d 	bl	1caac <__aeabi_dmul>
   1d632:	9b02      	ldr	r3, [sp, #8]
   1d634:	9d00      	ldr	r5, [sp, #0]
   1d636:	930c      	str	r3, [sp, #48]	; 0x30
   1d638:	ec41 0b18 	vmov	d8, r0, r1
   1d63c:	4639      	mov	r1, r7
   1d63e:	4630      	mov	r0, r6
   1d640:	f7ff fce4 	bl	1d00c <__aeabi_d2iz>
   1d644:	9011      	str	r0, [sp, #68]	; 0x44
   1d646:	f7ff f84d 	bl	1c6e4 <__aeabi_i2d>
   1d64a:	4602      	mov	r2, r0
   1d64c:	460b      	mov	r3, r1
   1d64e:	4630      	mov	r0, r6
   1d650:	4639      	mov	r1, r7
   1d652:	f7fe fef9 	bl	1c448 <__aeabi_dsub>
   1d656:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d658:	4606      	mov	r6, r0
   1d65a:	460f      	mov	r7, r1
   1d65c:	3330      	adds	r3, #48	; 0x30
   1d65e:	2200      	movs	r2, #0
   1d660:	f805 3b01 	strb.w	r3, [r5], #1
   1d664:	9b02      	ldr	r3, [sp, #8]
   1d666:	429d      	cmp	r5, r3
   1d668:	d125      	bne.n	1d6b6 <_dtoa_r+0x636>
   1d66a:	4b1c      	ldr	r3, [pc, #112]	; (1d6dc <_dtoa_r+0x65c>)
   1d66c:	ec51 0b18 	vmov	r0, r1, d8
   1d670:	f7fe feec 	bl	1c44c <__adddf3>
   1d674:	4602      	mov	r2, r0
   1d676:	460b      	mov	r3, r1
   1d678:	4630      	mov	r0, r6
   1d67a:	4639      	mov	r1, r7
   1d67c:	f7ff fca6 	bl	1cfcc <__aeabi_dcmpgt>
   1d680:	2800      	cmp	r0, #0
   1d682:	d175      	bne.n	1d770 <_dtoa_r+0x6f0>
   1d684:	2000      	movs	r0, #0
   1d686:	4915      	ldr	r1, [pc, #84]	; (1d6dc <_dtoa_r+0x65c>)
   1d688:	ec53 2b18 	vmov	r2, r3, d8
   1d68c:	f7fe fedc 	bl	1c448 <__aeabi_dsub>
   1d690:	4602      	mov	r2, r0
   1d692:	460b      	mov	r3, r1
   1d694:	4630      	mov	r0, r6
   1d696:	4639      	mov	r1, r7
   1d698:	f7ff fc7a 	bl	1cf90 <__aeabi_dcmplt>
   1d69c:	2800      	cmp	r0, #0
   1d69e:	f43f af24 	beq.w	1d4ea <_dtoa_r+0x46a>
   1d6a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1d6a4:	1e6b      	subs	r3, r5, #1
   1d6a6:	930c      	str	r3, [sp, #48]	; 0x30
   1d6a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1d6ac:	2b30      	cmp	r3, #48	; 0x30
   1d6ae:	d0f8      	beq.n	1d6a2 <_dtoa_r+0x622>
   1d6b0:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1d6b4:	e04a      	b.n	1d74c <_dtoa_r+0x6cc>
   1d6b6:	4b06      	ldr	r3, [pc, #24]	; (1d6d0 <_dtoa_r+0x650>)
   1d6b8:	f7ff f9f8 	bl	1caac <__aeabi_dmul>
   1d6bc:	4606      	mov	r6, r0
   1d6be:	460f      	mov	r7, r1
   1d6c0:	e7bc      	b.n	1d63c <_dtoa_r+0x5bc>
   1d6c2:	bf00      	nop
   1d6c4:	00039be0 	.word	0x00039be0
   1d6c8:	00039bb8 	.word	0x00039bb8
   1d6cc:	3ff00000 	.word	0x3ff00000
   1d6d0:	40240000 	.word	0x40240000
   1d6d4:	401c0000 	.word	0x401c0000
   1d6d8:	40140000 	.word	0x40140000
   1d6dc:	3fe00000 	.word	0x3fe00000
   1d6e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1d6e4:	9d00      	ldr	r5, [sp, #0]
   1d6e6:	4630      	mov	r0, r6
   1d6e8:	4639      	mov	r1, r7
   1d6ea:	ec53 2b18 	vmov	r2, r3, d8
   1d6ee:	f7ff fb07 	bl	1cd00 <__aeabi_ddiv>
   1d6f2:	f7ff fc8b 	bl	1d00c <__aeabi_d2iz>
   1d6f6:	4680      	mov	r8, r0
   1d6f8:	f7fe fff4 	bl	1c6e4 <__aeabi_i2d>
   1d6fc:	ec53 2b18 	vmov	r2, r3, d8
   1d700:	f7ff f9d4 	bl	1caac <__aeabi_dmul>
   1d704:	4602      	mov	r2, r0
   1d706:	4630      	mov	r0, r6
   1d708:	f108 0630 	add.w	r6, r8, #48	; 0x30
   1d70c:	460b      	mov	r3, r1
   1d70e:	4639      	mov	r1, r7
   1d710:	f7fe fe9a 	bl	1c448 <__aeabi_dsub>
   1d714:	f805 6b01 	strb.w	r6, [r5], #1
   1d718:	9e00      	ldr	r6, [sp, #0]
   1d71a:	4602      	mov	r2, r0
   1d71c:	9f01      	ldr	r7, [sp, #4]
   1d71e:	460b      	mov	r3, r1
   1d720:	1bae      	subs	r6, r5, r6
   1d722:	42b7      	cmp	r7, r6
   1d724:	d137      	bne.n	1d796 <_dtoa_r+0x716>
   1d726:	f7fe fe91 	bl	1c44c <__adddf3>
   1d72a:	4606      	mov	r6, r0
   1d72c:	460f      	mov	r7, r1
   1d72e:	ec53 2b18 	vmov	r2, r3, d8
   1d732:	f7ff fc4b 	bl	1cfcc <__aeabi_dcmpgt>
   1d736:	b9c8      	cbnz	r0, 1d76c <_dtoa_r+0x6ec>
   1d738:	4630      	mov	r0, r6
   1d73a:	4639      	mov	r1, r7
   1d73c:	ec53 2b18 	vmov	r2, r3, d8
   1d740:	f7ff fc1c 	bl	1cf7c <__aeabi_dcmpeq>
   1d744:	b110      	cbz	r0, 1d74c <_dtoa_r+0x6cc>
   1d746:	f018 0f01 	tst.w	r8, #1
   1d74a:	d10f      	bne.n	1d76c <_dtoa_r+0x6ec>
   1d74c:	4620      	mov	r0, r4
   1d74e:	4651      	mov	r1, sl
   1d750:	f01b fcae 	bl	390b0 <_Bfree>
   1d754:	2300      	movs	r3, #0
   1d756:	f109 0001 	add.w	r0, r9, #1
   1d75a:	702b      	strb	r3, [r5, #0]
   1d75c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d75e:	6018      	str	r0, [r3, #0]
   1d760:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1d762:	2b00      	cmp	r3, #0
   1d764:	f43f acd8 	beq.w	1d118 <_dtoa_r+0x98>
   1d768:	601d      	str	r5, [r3, #0]
   1d76a:	e4d5      	b.n	1d118 <_dtoa_r+0x98>
   1d76c:	f8cd 901c 	str.w	r9, [sp, #28]
   1d770:	462b      	mov	r3, r5
   1d772:	461d      	mov	r5, r3
   1d774:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1d778:	2a39      	cmp	r2, #57	; 0x39
   1d77a:	d108      	bne.n	1d78e <_dtoa_r+0x70e>
   1d77c:	9a00      	ldr	r2, [sp, #0]
   1d77e:	429a      	cmp	r2, r3
   1d780:	d1f7      	bne.n	1d772 <_dtoa_r+0x6f2>
   1d782:	9a07      	ldr	r2, [sp, #28]
   1d784:	9900      	ldr	r1, [sp, #0]
   1d786:	3201      	adds	r2, #1
   1d788:	9207      	str	r2, [sp, #28]
   1d78a:	2230      	movs	r2, #48	; 0x30
   1d78c:	700a      	strb	r2, [r1, #0]
   1d78e:	781a      	ldrb	r2, [r3, #0]
   1d790:	3201      	adds	r2, #1
   1d792:	701a      	strb	r2, [r3, #0]
   1d794:	e78c      	b.n	1d6b0 <_dtoa_r+0x630>
   1d796:	2200      	movs	r2, #0
   1d798:	4b9c      	ldr	r3, [pc, #624]	; (1da0c <_dtoa_r+0x98c>)
   1d79a:	f7ff f987 	bl	1caac <__aeabi_dmul>
   1d79e:	2200      	movs	r2, #0
   1d7a0:	2300      	movs	r3, #0
   1d7a2:	4606      	mov	r6, r0
   1d7a4:	460f      	mov	r7, r1
   1d7a6:	f7ff fbe9 	bl	1cf7c <__aeabi_dcmpeq>
   1d7aa:	2800      	cmp	r0, #0
   1d7ac:	d09b      	beq.n	1d6e6 <_dtoa_r+0x666>
   1d7ae:	e7cd      	b.n	1d74c <_dtoa_r+0x6cc>
   1d7b0:	9a08      	ldr	r2, [sp, #32]
   1d7b2:	2a00      	cmp	r2, #0
   1d7b4:	f000 80c4 	beq.w	1d940 <_dtoa_r+0x8c0>
   1d7b8:	9a05      	ldr	r2, [sp, #20]
   1d7ba:	2a01      	cmp	r2, #1
   1d7bc:	f300 80a9 	bgt.w	1d912 <_dtoa_r+0x892>
   1d7c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1d7c2:	2a00      	cmp	r2, #0
   1d7c4:	f000 80a1 	beq.w	1d90a <_dtoa_r+0x88a>
   1d7c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1d7cc:	9e06      	ldr	r6, [sp, #24]
   1d7ce:	4645      	mov	r5, r8
   1d7d0:	9a04      	ldr	r2, [sp, #16]
   1d7d2:	2101      	movs	r1, #1
   1d7d4:	4620      	mov	r0, r4
   1d7d6:	4498      	add	r8, r3
   1d7d8:	441a      	add	r2, r3
   1d7da:	9204      	str	r2, [sp, #16]
   1d7dc:	f01b fd0e 	bl	391fc <__i2b>
   1d7e0:	4607      	mov	r7, r0
   1d7e2:	2d00      	cmp	r5, #0
   1d7e4:	dd0b      	ble.n	1d7fe <_dtoa_r+0x77e>
   1d7e6:	9b04      	ldr	r3, [sp, #16]
   1d7e8:	2b00      	cmp	r3, #0
   1d7ea:	dd08      	ble.n	1d7fe <_dtoa_r+0x77e>
   1d7ec:	42ab      	cmp	r3, r5
   1d7ee:	9a04      	ldr	r2, [sp, #16]
   1d7f0:	bfa8      	it	ge
   1d7f2:	462b      	movge	r3, r5
   1d7f4:	eba8 0803 	sub.w	r8, r8, r3
   1d7f8:	1aed      	subs	r5, r5, r3
   1d7fa:	1ad3      	subs	r3, r2, r3
   1d7fc:	9304      	str	r3, [sp, #16]
   1d7fe:	9b06      	ldr	r3, [sp, #24]
   1d800:	b1fb      	cbz	r3, 1d842 <_dtoa_r+0x7c2>
   1d802:	9b08      	ldr	r3, [sp, #32]
   1d804:	2b00      	cmp	r3, #0
   1d806:	f000 809f 	beq.w	1d948 <_dtoa_r+0x8c8>
   1d80a:	2e00      	cmp	r6, #0
   1d80c:	dd11      	ble.n	1d832 <_dtoa_r+0x7b2>
   1d80e:	4639      	mov	r1, r7
   1d810:	4632      	mov	r2, r6
   1d812:	4620      	mov	r0, r4
   1d814:	f017 fc6e 	bl	350f4 <__pow5mult>
   1d818:	4652      	mov	r2, sl
   1d81a:	4601      	mov	r1, r0
   1d81c:	4607      	mov	r7, r0
   1d81e:	4620      	mov	r0, r4
   1d820:	f01b fcf5 	bl	3920e <__multiply>
   1d824:	4651      	mov	r1, sl
   1d826:	9007      	str	r0, [sp, #28]
   1d828:	4620      	mov	r0, r4
   1d82a:	f01b fc41 	bl	390b0 <_Bfree>
   1d82e:	9b07      	ldr	r3, [sp, #28]
   1d830:	469a      	mov	sl, r3
   1d832:	9b06      	ldr	r3, [sp, #24]
   1d834:	1b9a      	subs	r2, r3, r6
   1d836:	d004      	beq.n	1d842 <_dtoa_r+0x7c2>
   1d838:	4651      	mov	r1, sl
   1d83a:	4620      	mov	r0, r4
   1d83c:	f017 fc5a 	bl	350f4 <__pow5mult>
   1d840:	4682      	mov	sl, r0
   1d842:	2101      	movs	r1, #1
   1d844:	4620      	mov	r0, r4
   1d846:	f01b fcd9 	bl	391fc <__i2b>
   1d84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d84c:	4606      	mov	r6, r0
   1d84e:	2b00      	cmp	r3, #0
   1d850:	dd7c      	ble.n	1d94c <_dtoa_r+0x8cc>
   1d852:	461a      	mov	r2, r3
   1d854:	4601      	mov	r1, r0
   1d856:	4620      	mov	r0, r4
   1d858:	f017 fc4c 	bl	350f4 <__pow5mult>
   1d85c:	9b05      	ldr	r3, [sp, #20]
   1d85e:	4606      	mov	r6, r0
   1d860:	2b01      	cmp	r3, #1
   1d862:	dd76      	ble.n	1d952 <_dtoa_r+0x8d2>
   1d864:	2300      	movs	r3, #0
   1d866:	9306      	str	r3, [sp, #24]
   1d868:	6933      	ldr	r3, [r6, #16]
   1d86a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1d86e:	6918      	ldr	r0, [r3, #16]
   1d870:	f01b fc74 	bl	3915c <__hi0bits>
   1d874:	f1c0 0020 	rsb	r0, r0, #32
   1d878:	9b04      	ldr	r3, [sp, #16]
   1d87a:	4418      	add	r0, r3
   1d87c:	f010 001f 	ands.w	r0, r0, #31
   1d880:	f000 8086 	beq.w	1d990 <_dtoa_r+0x910>
   1d884:	f1c0 0320 	rsb	r3, r0, #32
   1d888:	2b04      	cmp	r3, #4
   1d88a:	dd7f      	ble.n	1d98c <_dtoa_r+0x90c>
   1d88c:	f1c0 001c 	rsb	r0, r0, #28
   1d890:	9b04      	ldr	r3, [sp, #16]
   1d892:	4480      	add	r8, r0
   1d894:	4405      	add	r5, r0
   1d896:	4403      	add	r3, r0
   1d898:	9304      	str	r3, [sp, #16]
   1d89a:	f1b8 0f00 	cmp.w	r8, #0
   1d89e:	dd05      	ble.n	1d8ac <_dtoa_r+0x82c>
   1d8a0:	4651      	mov	r1, sl
   1d8a2:	4642      	mov	r2, r8
   1d8a4:	4620      	mov	r0, r4
   1d8a6:	f01b fd4d 	bl	39344 <__lshift>
   1d8aa:	4682      	mov	sl, r0
   1d8ac:	9b04      	ldr	r3, [sp, #16]
   1d8ae:	2b00      	cmp	r3, #0
   1d8b0:	dd05      	ble.n	1d8be <_dtoa_r+0x83e>
   1d8b2:	4631      	mov	r1, r6
   1d8b4:	461a      	mov	r2, r3
   1d8b6:	4620      	mov	r0, r4
   1d8b8:	f01b fd44 	bl	39344 <__lshift>
   1d8bc:	4606      	mov	r6, r0
   1d8be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d8c0:	2b00      	cmp	r3, #0
   1d8c2:	d067      	beq.n	1d994 <_dtoa_r+0x914>
   1d8c4:	4631      	mov	r1, r6
   1d8c6:	4650      	mov	r0, sl
   1d8c8:	f01b fd9b 	bl	39402 <__mcmp>
   1d8cc:	2800      	cmp	r0, #0
   1d8ce:	da61      	bge.n	1d994 <_dtoa_r+0x914>
   1d8d0:	2300      	movs	r3, #0
   1d8d2:	4651      	mov	r1, sl
   1d8d4:	220a      	movs	r2, #10
   1d8d6:	4620      	mov	r0, r4
   1d8d8:	f01b fc01 	bl	390de <__multadd>
   1d8dc:	9b08      	ldr	r3, [sp, #32]
   1d8de:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1d8e2:	4682      	mov	sl, r0
   1d8e4:	2b00      	cmp	r3, #0
   1d8e6:	f000 8187 	beq.w	1dbf8 <_dtoa_r+0xb78>
   1d8ea:	4639      	mov	r1, r7
   1d8ec:	2300      	movs	r3, #0
   1d8ee:	220a      	movs	r2, #10
   1d8f0:	4620      	mov	r0, r4
   1d8f2:	f01b fbf4 	bl	390de <__multadd>
   1d8f6:	f1bb 0f00 	cmp.w	fp, #0
   1d8fa:	4607      	mov	r7, r0
   1d8fc:	f300 808e 	bgt.w	1da1c <_dtoa_r+0x99c>
   1d900:	9b05      	ldr	r3, [sp, #20]
   1d902:	2b02      	cmp	r3, #2
   1d904:	f340 808a 	ble.w	1da1c <_dtoa_r+0x99c>
   1d908:	e04c      	b.n	1d9a4 <_dtoa_r+0x924>
   1d90a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1d90c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1d910:	e75c      	b.n	1d7cc <_dtoa_r+0x74c>
   1d912:	9b01      	ldr	r3, [sp, #4]
   1d914:	1e5e      	subs	r6, r3, #1
   1d916:	9b06      	ldr	r3, [sp, #24]
   1d918:	42b3      	cmp	r3, r6
   1d91a:	bfb7      	itett	lt
   1d91c:	9b06      	ldrlt	r3, [sp, #24]
   1d91e:	1b9e      	subge	r6, r3, r6
   1d920:	9606      	strlt	r6, [sp, #24]
   1d922:	1af2      	sublt	r2, r6, r3
   1d924:	bfbf      	itttt	lt
   1d926:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
   1d928:	2600      	movlt	r6, #0
   1d92a:	189b      	addlt	r3, r3, r2
   1d92c:	930d      	strlt	r3, [sp, #52]	; 0x34
   1d92e:	9b01      	ldr	r3, [sp, #4]
   1d930:	2b00      	cmp	r3, #0
   1d932:	bfb5      	itete	lt
   1d934:	eba8 0503 	sublt.w	r5, r8, r3
   1d938:	4645      	movge	r5, r8
   1d93a:	2300      	movlt	r3, #0
   1d93c:	9b01      	ldrge	r3, [sp, #4]
   1d93e:	e747      	b.n	1d7d0 <_dtoa_r+0x750>
   1d940:	9e06      	ldr	r6, [sp, #24]
   1d942:	4645      	mov	r5, r8
   1d944:	9f08      	ldr	r7, [sp, #32]
   1d946:	e74c      	b.n	1d7e2 <_dtoa_r+0x762>
   1d948:	9a06      	ldr	r2, [sp, #24]
   1d94a:	e775      	b.n	1d838 <_dtoa_r+0x7b8>
   1d94c:	9b05      	ldr	r3, [sp, #20]
   1d94e:	2b01      	cmp	r3, #1
   1d950:	dc18      	bgt.n	1d984 <_dtoa_r+0x904>
   1d952:	9b02      	ldr	r3, [sp, #8]
   1d954:	b9b3      	cbnz	r3, 1d984 <_dtoa_r+0x904>
   1d956:	9b03      	ldr	r3, [sp, #12]
   1d958:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d95c:	b9a3      	cbnz	r3, 1d988 <_dtoa_r+0x908>
   1d95e:	9b03      	ldr	r3, [sp, #12]
   1d960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1d964:	0d1b      	lsrs	r3, r3, #20
   1d966:	051b      	lsls	r3, r3, #20
   1d968:	b12b      	cbz	r3, 1d976 <_dtoa_r+0x8f6>
   1d96a:	9b04      	ldr	r3, [sp, #16]
   1d96c:	f108 0801 	add.w	r8, r8, #1
   1d970:	3301      	adds	r3, #1
   1d972:	9304      	str	r3, [sp, #16]
   1d974:	2301      	movs	r3, #1
   1d976:	9306      	str	r3, [sp, #24]
   1d978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d97a:	2b00      	cmp	r3, #0
   1d97c:	f47f af74 	bne.w	1d868 <_dtoa_r+0x7e8>
   1d980:	2001      	movs	r0, #1
   1d982:	e779      	b.n	1d878 <_dtoa_r+0x7f8>
   1d984:	2300      	movs	r3, #0
   1d986:	e7f6      	b.n	1d976 <_dtoa_r+0x8f6>
   1d988:	9b02      	ldr	r3, [sp, #8]
   1d98a:	e7f4      	b.n	1d976 <_dtoa_r+0x8f6>
   1d98c:	d085      	beq.n	1d89a <_dtoa_r+0x81a>
   1d98e:	4618      	mov	r0, r3
   1d990:	301c      	adds	r0, #28
   1d992:	e77d      	b.n	1d890 <_dtoa_r+0x810>
   1d994:	9b01      	ldr	r3, [sp, #4]
   1d996:	2b00      	cmp	r3, #0
   1d998:	dc3a      	bgt.n	1da10 <_dtoa_r+0x990>
   1d99a:	9b05      	ldr	r3, [sp, #20]
   1d99c:	2b02      	cmp	r3, #2
   1d99e:	dd37      	ble.n	1da10 <_dtoa_r+0x990>
   1d9a0:	f8dd b004 	ldr.w	fp, [sp, #4]
   1d9a4:	f1bb 0f00 	cmp.w	fp, #0
   1d9a8:	d10d      	bne.n	1d9c6 <_dtoa_r+0x946>
   1d9aa:	4631      	mov	r1, r6
   1d9ac:	465b      	mov	r3, fp
   1d9ae:	2205      	movs	r2, #5
   1d9b0:	4620      	mov	r0, r4
   1d9b2:	f01b fb94 	bl	390de <__multadd>
   1d9b6:	4601      	mov	r1, r0
   1d9b8:	4606      	mov	r6, r0
   1d9ba:	4650      	mov	r0, sl
   1d9bc:	f01b fd21 	bl	39402 <__mcmp>
   1d9c0:	2800      	cmp	r0, #0
   1d9c2:	f73f adc0 	bgt.w	1d546 <_dtoa_r+0x4c6>
   1d9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d9c8:	9d00      	ldr	r5, [sp, #0]
   1d9ca:	ea6f 0903 	mvn.w	r9, r3
   1d9ce:	f04f 0800 	mov.w	r8, #0
   1d9d2:	4631      	mov	r1, r6
   1d9d4:	4620      	mov	r0, r4
   1d9d6:	f01b fb6b 	bl	390b0 <_Bfree>
   1d9da:	2f00      	cmp	r7, #0
   1d9dc:	f43f aeb6 	beq.w	1d74c <_dtoa_r+0x6cc>
   1d9e0:	f1b8 0f00 	cmp.w	r8, #0
   1d9e4:	d005      	beq.n	1d9f2 <_dtoa_r+0x972>
   1d9e6:	45b8      	cmp	r8, r7
   1d9e8:	d003      	beq.n	1d9f2 <_dtoa_r+0x972>
   1d9ea:	4641      	mov	r1, r8
   1d9ec:	4620      	mov	r0, r4
   1d9ee:	f01b fb5f 	bl	390b0 <_Bfree>
   1d9f2:	4639      	mov	r1, r7
   1d9f4:	4620      	mov	r0, r4
   1d9f6:	f01b fb5b 	bl	390b0 <_Bfree>
   1d9fa:	e6a7      	b.n	1d74c <_dtoa_r+0x6cc>
   1d9fc:	2600      	movs	r6, #0
   1d9fe:	4637      	mov	r7, r6
   1da00:	e7e1      	b.n	1d9c6 <_dtoa_r+0x946>
   1da02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1da04:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1da08:	4637      	mov	r7, r6
   1da0a:	e59c      	b.n	1d546 <_dtoa_r+0x4c6>
   1da0c:	40240000 	.word	0x40240000
   1da10:	9b08      	ldr	r3, [sp, #32]
   1da12:	f8dd b004 	ldr.w	fp, [sp, #4]
   1da16:	2b00      	cmp	r3, #0
   1da18:	f000 80f5 	beq.w	1dc06 <_dtoa_r+0xb86>
   1da1c:	2d00      	cmp	r5, #0
   1da1e:	dd05      	ble.n	1da2c <_dtoa_r+0x9ac>
   1da20:	4639      	mov	r1, r7
   1da22:	462a      	mov	r2, r5
   1da24:	4620      	mov	r0, r4
   1da26:	f01b fc8d 	bl	39344 <__lshift>
   1da2a:	4607      	mov	r7, r0
   1da2c:	9b06      	ldr	r3, [sp, #24]
   1da2e:	2b00      	cmp	r3, #0
   1da30:	d055      	beq.n	1dade <_dtoa_r+0xa5e>
   1da32:	6879      	ldr	r1, [r7, #4]
   1da34:	4620      	mov	r0, r4
   1da36:	f01b fb07 	bl	39048 <_Balloc>
   1da3a:	693a      	ldr	r2, [r7, #16]
   1da3c:	4605      	mov	r5, r0
   1da3e:	f107 010c 	add.w	r1, r7, #12
   1da42:	3202      	adds	r2, #2
   1da44:	300c      	adds	r0, #12
   1da46:	0092      	lsls	r2, r2, #2
   1da48:	f01b f879 	bl	38b3e <memcpy>
   1da4c:	2201      	movs	r2, #1
   1da4e:	4629      	mov	r1, r5
   1da50:	4620      	mov	r0, r4
   1da52:	f01b fc77 	bl	39344 <__lshift>
   1da56:	9b00      	ldr	r3, [sp, #0]
   1da58:	46b8      	mov	r8, r7
   1da5a:	4607      	mov	r7, r0
   1da5c:	3301      	adds	r3, #1
   1da5e:	9301      	str	r3, [sp, #4]
   1da60:	9b00      	ldr	r3, [sp, #0]
   1da62:	445b      	add	r3, fp
   1da64:	9307      	str	r3, [sp, #28]
   1da66:	9b02      	ldr	r3, [sp, #8]
   1da68:	f003 0301 	and.w	r3, r3, #1
   1da6c:	9306      	str	r3, [sp, #24]
   1da6e:	9b01      	ldr	r3, [sp, #4]
   1da70:	4631      	mov	r1, r6
   1da72:	4650      	mov	r0, sl
   1da74:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
   1da78:	f01b fa57 	bl	38f2a <quorem>
   1da7c:	4603      	mov	r3, r0
   1da7e:	4641      	mov	r1, r8
   1da80:	9002      	str	r0, [sp, #8]
   1da82:	4650      	mov	r0, sl
   1da84:	3330      	adds	r3, #48	; 0x30
   1da86:	9308      	str	r3, [sp, #32]
   1da88:	f01b fcbb 	bl	39402 <__mcmp>
   1da8c:	463a      	mov	r2, r7
   1da8e:	9004      	str	r0, [sp, #16]
   1da90:	4631      	mov	r1, r6
   1da92:	4620      	mov	r0, r4
   1da94:	f01b fcd1 	bl	3943a <__mdiff>
   1da98:	68c2      	ldr	r2, [r0, #12]
   1da9a:	4605      	mov	r5, r0
   1da9c:	9b08      	ldr	r3, [sp, #32]
   1da9e:	bb02      	cbnz	r2, 1dae2 <_dtoa_r+0xa62>
   1daa0:	4601      	mov	r1, r0
   1daa2:	4650      	mov	r0, sl
   1daa4:	f01b fcad 	bl	39402 <__mcmp>
   1daa8:	9b08      	ldr	r3, [sp, #32]
   1daaa:	4602      	mov	r2, r0
   1daac:	4629      	mov	r1, r5
   1daae:	4620      	mov	r0, r4
   1dab0:	e9cd 3208 	strd	r3, r2, [sp, #32]
   1dab4:	f01b fafc 	bl	390b0 <_Bfree>
   1dab8:	9b05      	ldr	r3, [sp, #20]
   1daba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dabc:	9d01      	ldr	r5, [sp, #4]
   1dabe:	ea43 0102 	orr.w	r1, r3, r2
   1dac2:	9b06      	ldr	r3, [sp, #24]
   1dac4:	430b      	orrs	r3, r1
   1dac6:	9b08      	ldr	r3, [sp, #32]
   1dac8:	d10d      	bne.n	1dae6 <_dtoa_r+0xa66>
   1daca:	2b39      	cmp	r3, #57	; 0x39
   1dacc:	d027      	beq.n	1db1e <_dtoa_r+0xa9e>
   1dace:	9a04      	ldr	r2, [sp, #16]
   1dad0:	2a00      	cmp	r2, #0
   1dad2:	dd01      	ble.n	1dad8 <_dtoa_r+0xa58>
   1dad4:	9b02      	ldr	r3, [sp, #8]
   1dad6:	3331      	adds	r3, #49	; 0x31
   1dad8:	f88b 3000 	strb.w	r3, [fp]
   1dadc:	e779      	b.n	1d9d2 <_dtoa_r+0x952>
   1dade:	4638      	mov	r0, r7
   1dae0:	e7b9      	b.n	1da56 <_dtoa_r+0x9d6>
   1dae2:	2201      	movs	r2, #1
   1dae4:	e7e2      	b.n	1daac <_dtoa_r+0xa2c>
   1dae6:	9904      	ldr	r1, [sp, #16]
   1dae8:	2900      	cmp	r1, #0
   1daea:	db04      	blt.n	1daf6 <_dtoa_r+0xa76>
   1daec:	9805      	ldr	r0, [sp, #20]
   1daee:	4301      	orrs	r1, r0
   1daf0:	9806      	ldr	r0, [sp, #24]
   1daf2:	4301      	orrs	r1, r0
   1daf4:	d120      	bne.n	1db38 <_dtoa_r+0xab8>
   1daf6:	2a00      	cmp	r2, #0
   1daf8:	ddee      	ble.n	1dad8 <_dtoa_r+0xa58>
   1dafa:	4651      	mov	r1, sl
   1dafc:	2201      	movs	r2, #1
   1dafe:	4620      	mov	r0, r4
   1db00:	9301      	str	r3, [sp, #4]
   1db02:	f01b fc1f 	bl	39344 <__lshift>
   1db06:	4631      	mov	r1, r6
   1db08:	4682      	mov	sl, r0
   1db0a:	f01b fc7a 	bl	39402 <__mcmp>
   1db0e:	2800      	cmp	r0, #0
   1db10:	9b01      	ldr	r3, [sp, #4]
   1db12:	dc02      	bgt.n	1db1a <_dtoa_r+0xa9a>
   1db14:	d1e0      	bne.n	1dad8 <_dtoa_r+0xa58>
   1db16:	07da      	lsls	r2, r3, #31
   1db18:	d5de      	bpl.n	1dad8 <_dtoa_r+0xa58>
   1db1a:	2b39      	cmp	r3, #57	; 0x39
   1db1c:	d1da      	bne.n	1dad4 <_dtoa_r+0xa54>
   1db1e:	2339      	movs	r3, #57	; 0x39
   1db20:	f88b 3000 	strb.w	r3, [fp]
   1db24:	462b      	mov	r3, r5
   1db26:	461d      	mov	r5, r3
   1db28:	3b01      	subs	r3, #1
   1db2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1db2e:	2a39      	cmp	r2, #57	; 0x39
   1db30:	d050      	beq.n	1dbd4 <_dtoa_r+0xb54>
   1db32:	3201      	adds	r2, #1
   1db34:	701a      	strb	r2, [r3, #0]
   1db36:	e74c      	b.n	1d9d2 <_dtoa_r+0x952>
   1db38:	2a00      	cmp	r2, #0
   1db3a:	dd03      	ble.n	1db44 <_dtoa_r+0xac4>
   1db3c:	2b39      	cmp	r3, #57	; 0x39
   1db3e:	d0ee      	beq.n	1db1e <_dtoa_r+0xa9e>
   1db40:	3301      	adds	r3, #1
   1db42:	e7c9      	b.n	1dad8 <_dtoa_r+0xa58>
   1db44:	9a01      	ldr	r2, [sp, #4]
   1db46:	9907      	ldr	r1, [sp, #28]
   1db48:	f802 3c01 	strb.w	r3, [r2, #-1]
   1db4c:	428a      	cmp	r2, r1
   1db4e:	d02a      	beq.n	1dba6 <_dtoa_r+0xb26>
   1db50:	4651      	mov	r1, sl
   1db52:	2300      	movs	r3, #0
   1db54:	220a      	movs	r2, #10
   1db56:	4620      	mov	r0, r4
   1db58:	f01b fac1 	bl	390de <__multadd>
   1db5c:	45b8      	cmp	r8, r7
   1db5e:	4682      	mov	sl, r0
   1db60:	f04f 0300 	mov.w	r3, #0
   1db64:	f04f 020a 	mov.w	r2, #10
   1db68:	4641      	mov	r1, r8
   1db6a:	4620      	mov	r0, r4
   1db6c:	d107      	bne.n	1db7e <_dtoa_r+0xafe>
   1db6e:	f01b fab6 	bl	390de <__multadd>
   1db72:	4680      	mov	r8, r0
   1db74:	4607      	mov	r7, r0
   1db76:	9b01      	ldr	r3, [sp, #4]
   1db78:	3301      	adds	r3, #1
   1db7a:	9301      	str	r3, [sp, #4]
   1db7c:	e777      	b.n	1da6e <_dtoa_r+0x9ee>
   1db7e:	f01b faae 	bl	390de <__multadd>
   1db82:	4639      	mov	r1, r7
   1db84:	4680      	mov	r8, r0
   1db86:	2300      	movs	r3, #0
   1db88:	220a      	movs	r2, #10
   1db8a:	4620      	mov	r0, r4
   1db8c:	f01b faa7 	bl	390de <__multadd>
   1db90:	4607      	mov	r7, r0
   1db92:	e7f0      	b.n	1db76 <_dtoa_r+0xaf6>
   1db94:	f1bb 0f00 	cmp.w	fp, #0
   1db98:	9a00      	ldr	r2, [sp, #0]
   1db9a:	f04f 0800 	mov.w	r8, #0
   1db9e:	bfcc      	ite	gt
   1dba0:	465d      	movgt	r5, fp
   1dba2:	2501      	movle	r5, #1
   1dba4:	4415      	add	r5, r2
   1dba6:	4651      	mov	r1, sl
   1dba8:	2201      	movs	r2, #1
   1dbaa:	4620      	mov	r0, r4
   1dbac:	9301      	str	r3, [sp, #4]
   1dbae:	f01b fbc9 	bl	39344 <__lshift>
   1dbb2:	4631      	mov	r1, r6
   1dbb4:	4682      	mov	sl, r0
   1dbb6:	f01b fc24 	bl	39402 <__mcmp>
   1dbba:	2800      	cmp	r0, #0
   1dbbc:	dcb2      	bgt.n	1db24 <_dtoa_r+0xaa4>
   1dbbe:	d102      	bne.n	1dbc6 <_dtoa_r+0xb46>
   1dbc0:	9b01      	ldr	r3, [sp, #4]
   1dbc2:	07db      	lsls	r3, r3, #31
   1dbc4:	d4ae      	bmi.n	1db24 <_dtoa_r+0xaa4>
   1dbc6:	462b      	mov	r3, r5
   1dbc8:	461d      	mov	r5, r3
   1dbca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1dbce:	2a30      	cmp	r2, #48	; 0x30
   1dbd0:	d0fa      	beq.n	1dbc8 <_dtoa_r+0xb48>
   1dbd2:	e6fe      	b.n	1d9d2 <_dtoa_r+0x952>
   1dbd4:	9a00      	ldr	r2, [sp, #0]
   1dbd6:	429a      	cmp	r2, r3
   1dbd8:	d1a5      	bne.n	1db26 <_dtoa_r+0xaa6>
   1dbda:	2331      	movs	r3, #49	; 0x31
   1dbdc:	f109 0901 	add.w	r9, r9, #1
   1dbe0:	7013      	strb	r3, [r2, #0]
   1dbe2:	e6f6      	b.n	1d9d2 <_dtoa_r+0x952>
   1dbe4:	4b12      	ldr	r3, [pc, #72]	; (1dc30 <_dtoa_r+0xbb0>)
   1dbe6:	f7ff bab8 	b.w	1d15a <_dtoa_r+0xda>
   1dbea:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1dbec:	2b00      	cmp	r3, #0
   1dbee:	f47f aa8e 	bne.w	1d10e <_dtoa_r+0x8e>
   1dbf2:	4b10      	ldr	r3, [pc, #64]	; (1dc34 <_dtoa_r+0xbb4>)
   1dbf4:	f7ff bab1 	b.w	1d15a <_dtoa_r+0xda>
   1dbf8:	f1bb 0f00 	cmp.w	fp, #0
   1dbfc:	dc03      	bgt.n	1dc06 <_dtoa_r+0xb86>
   1dbfe:	9b05      	ldr	r3, [sp, #20]
   1dc00:	2b02      	cmp	r3, #2
   1dc02:	f73f aecf 	bgt.w	1d9a4 <_dtoa_r+0x924>
   1dc06:	9d00      	ldr	r5, [sp, #0]
   1dc08:	4631      	mov	r1, r6
   1dc0a:	4650      	mov	r0, sl
   1dc0c:	f01b f98d 	bl	38f2a <quorem>
   1dc10:	9a00      	ldr	r2, [sp, #0]
   1dc12:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1dc16:	f805 3b01 	strb.w	r3, [r5], #1
   1dc1a:	1aaa      	subs	r2, r5, r2
   1dc1c:	4593      	cmp	fp, r2
   1dc1e:	ddb9      	ble.n	1db94 <_dtoa_r+0xb14>
   1dc20:	4651      	mov	r1, sl
   1dc22:	2300      	movs	r3, #0
   1dc24:	220a      	movs	r2, #10
   1dc26:	4620      	mov	r0, r4
   1dc28:	f01b fa59 	bl	390de <__multadd>
   1dc2c:	4682      	mov	sl, r0
   1dc2e:	e7eb      	b.n	1dc08 <_dtoa_r+0xb88>
   1dc30:	0003ad32 	.word	0x0003ad32
   1dc34:	0003d30a 	.word	0x0003d30a

0001dc38 <gpio_callback>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dc38:	4907      	ldr	r1, [pc, #28]	; (1dc58 <gpio_callback+0x20>)
   1dc3a:	e8d1 3fef 	ldaex	r3, [r1]
   1dc3e:	f043 0201 	orr.w	r2, r3, #1
   1dc42:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1dc46:	2800      	cmp	r0, #0
   1dc48:	d1f7      	bne.n	1dc3a <gpio_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1dc4a:	07db      	lsls	r3, r3, #31
   1dc4c:	d403      	bmi.n	1dc56 <gpio_callback+0x1e>
		k_queue_append(&work_q->queue, work);
   1dc4e:	4803      	ldr	r0, [pc, #12]	; (1dc5c <gpio_callback+0x24>)
   1dc50:	3908      	subs	r1, #8
   1dc52:	f01a bb9f 	b.w	38394 <k_queue_append>

static void gpio_callback(const struct device *dev,
		     struct gpio_callback *gpio_cb, uint32_t pins)
{
	k_work_submit_to_queue(&slm_work_q, &exit_idle_work);
}
   1dc56:	4770      	bx	lr
   1dc58:	20023318 	.word	0x20023318
   1dc5c:	20021188 	.word	0x20021188

0001dc60 <exit_idle>:
{
   1dc60:	b538      	push	{r3, r4, r5, lr}
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1dc62:	4b14      	ldr	r3, [pc, #80]	; (1dcb4 <exit_idle+0x54>)
   1dc64:	4c14      	ldr	r4, [pc, #80]	; (1dcb8 <exit_idle+0x58>)
	gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   1dc66:	4d15      	ldr	r5, [pc, #84]	; (1dcbc <exit_idle+0x5c>)
   1dc68:	1ae4      	subs	r4, r4, r3
   1dc6a:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Exit Idle");
   1dc6c:	01a4      	lsls	r4, r4, #6
   1dc6e:	4814      	ldr	r0, [pc, #80]	; (1dcc0 <exit_idle+0x60>)
   1dc70:	f044 0103 	orr.w	r1, r4, #3
   1dc74:	f018 f9d4 	bl	36020 <log_0>
	gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   1dc78:	6828      	ldr	r0, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1dc7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1dc7e:	f017 fc4d 	bl	3551c <z_impl_gpio_pin_interrupt_configure.constprop.0>
	gpio_remove_callback(gpio_dev, &gpio_cb);
   1dc82:	6828      	ldr	r0, [r5, #0]
				       struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1dc84:	6883      	ldr	r3, [r0, #8]
   1dc86:	69db      	ldr	r3, [r3, #28]
   1dc88:	b113      	cbz	r3, 1dc90 <exit_idle+0x30>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, false);
   1dc8a:	2200      	movs	r2, #0
   1dc8c:	490d      	ldr	r1, [pc, #52]	; (1dcc4 <exit_idle+0x64>)
   1dc8e:	4798      	blx	r3
	gpio_pin_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN, GPIO_INPUT);
   1dc90:	f44f 7180 	mov.w	r1, #256	; 0x100
   1dc94:	6828      	ldr	r0, [r5, #0]
   1dc96:	f017 fc55 	bl	35544 <gpio_pin_configure.constprop.0>
	err = slm_at_host_init();
   1dc9a:	f000 faf1 	bl	1e280 <slm_at_host_init>
	if (err) {
   1dc9e:	4601      	mov	r1, r0
   1dca0:	b130      	cbz	r0, 1dcb0 <exit_idle+0x50>
		LOG_ERR("Failed to init at_host: %d", err);
   1dca2:	f044 0201 	orr.w	r2, r4, #1
   1dca6:	4808      	ldr	r0, [pc, #32]	; (1dcc8 <exit_idle+0x68>)
}
   1dca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Failed to init at_host: %d", err);
   1dcac:	f018 b9c7 	b.w	3603e <log_1>
}
   1dcb0:	bd38      	pop	{r3, r4, r5, pc}
   1dcb2:	bf00      	nop
   1dcb4:	00039a50 	.word	0x00039a50
   1dcb8:	00039a58 	.word	0x00039a58
   1dcbc:	20023328 	.word	0x20023328
   1dcc0:	0003a4a0 	.word	0x0003a4a0
   1dcc4:	2002331c 	.word	0x2002331c
   1dcc8:	0003a4aa 	.word	0x0003a4aa

0001dccc <bsd_recoverable_error_handler>:
   1dccc:	4a05      	ldr	r2, [pc, #20]	; (1dce4 <bsd_recoverable_error_handler+0x18>)
   1dcce:	4b06      	ldr	r3, [pc, #24]	; (1dce8 <bsd_recoverable_error_handler+0x1c>)
{
   1dcd0:	4601      	mov	r1, r0
   1dcd2:	1ad2      	subs	r2, r2, r3
   1dcd4:	08d2      	lsrs	r2, r2, #3
	LOG_ERR("bsdlib recoverable error: %u", err);
   1dcd6:	0192      	lsls	r2, r2, #6
   1dcd8:	4804      	ldr	r0, [pc, #16]	; (1dcec <bsd_recoverable_error_handler+0x20>)
   1dcda:	f042 0201 	orr.w	r2, r2, #1
   1dcde:	f018 b9ae 	b.w	3603e <log_1>
   1dce2:	bf00      	nop
   1dce4:	00039a58 	.word	0x00039a58
   1dce8:	00039a50 	.word	0x00039a50
   1dcec:	0003a4c5 	.word	0x0003a4c5

0001dcf0 <enter_idle>:

void enter_idle(void)
{
   1dcf0:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1dcf2:	4827      	ldr	r0, [pc, #156]	; (1dd90 <enter_idle+0xa0>)
   1dcf4:	f015 f95a 	bl	32fac <z_impl_device_get_binding>
	int err;

	gpio_dev = device_get_binding(DT_LABEL(DT_NODELABEL(gpio0)));
   1dcf8:	4c26      	ldr	r4, [pc, #152]	; (1dd94 <enter_idle+0xa4>)
   1dcfa:	6020      	str	r0, [r4, #0]
	if (gpio_dev == NULL) {
   1dcfc:	b958      	cbnz	r0, 1dd16 <enter_idle+0x26>
	err = gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
					   GPIO_INT_LEVEL_LOW);
	if (err) {
		LOG_ERR("GPIO_0 enable callback error: %d", err);
	}
}
   1dcfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dd02:	4925      	ldr	r1, [pc, #148]	; (1dd98 <enter_idle+0xa8>)
   1dd04:	4b25      	ldr	r3, [pc, #148]	; (1dd9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 bind error");
   1dd06:	4826      	ldr	r0, [pc, #152]	; (1dda0 <enter_idle+0xb0>)
   1dd08:	1ac9      	subs	r1, r1, r3
   1dd0a:	08c9      	lsrs	r1, r1, #3
   1dd0c:	0189      	lsls	r1, r1, #6
   1dd0e:	f041 0101 	orr.w	r1, r1, #1
   1dd12:	f018 b985 	b.w	36020 <log_0>
	err = gpio_pin_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   1dd16:	f44f 7188 	mov.w	r1, #272	; 0x110
   1dd1a:	f017 fc13 	bl	35544 <gpio_pin_configure.constprop.0>
	if (err) {
   1dd1e:	4601      	mov	r1, r0
   1dd20:	b158      	cbz	r0, 1dd3a <enter_idle+0x4a>
   1dd22:	4a1d      	ldr	r2, [pc, #116]	; (1dd98 <enter_idle+0xa8>)
   1dd24:	4b1d      	ldr	r3, [pc, #116]	; (1dd9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 config error: %d", err);
   1dd26:	481f      	ldr	r0, [pc, #124]	; (1dda4 <enter_idle+0xb4>)
   1dd28:	1ad2      	subs	r2, r2, r3
   1dd2a:	08d2      	lsrs	r2, r2, #3
   1dd2c:	0192      	lsls	r2, r2, #6
   1dd2e:	f042 0201 	orr.w	r2, r2, #1
}
   1dd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("GPIO_0 enable callback error: %d", err);
   1dd36:	f018 b982 	b.w	3603e <log_1>
	callback->handler = handler;
   1dd3a:	491b      	ldr	r1, [pc, #108]	; (1dda8 <enter_idle+0xb8>)
   1dd3c:	4b1b      	ldr	r3, [pc, #108]	; (1ddac <enter_idle+0xbc>)
	err = gpio_add_callback(gpio_dev, &gpio_cb);
   1dd3e:	6820      	ldr	r0, [r4, #0]
   1dd40:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   1dd42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1dd46:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   1dd48:	6883      	ldr	r3, [r0, #8]
   1dd4a:	69db      	ldr	r3, [r3, #28]
   1dd4c:	b163      	cbz	r3, 1dd68 <enter_idle+0x78>
	return api->manage_callback(port, callback, true);
   1dd4e:	2201      	movs	r2, #1
   1dd50:	4798      	blx	r3
	if (err) {
   1dd52:	4601      	mov	r1, r0
   1dd54:	b158      	cbz	r0, 1dd6e <enter_idle+0x7e>
   1dd56:	4a10      	ldr	r2, [pc, #64]	; (1dd98 <enter_idle+0xa8>)
   1dd58:	4b10      	ldr	r3, [pc, #64]	; (1dd9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 add callback error: %d", err);
   1dd5a:	4815      	ldr	r0, [pc, #84]	; (1ddb0 <enter_idle+0xc0>)
   1dd5c:	1ad2      	subs	r2, r2, r3
   1dd5e:	08d2      	lsrs	r2, r2, #3
   1dd60:	0192      	lsls	r2, r2, #6
   1dd62:	f042 0201 	orr.w	r2, r2, #1
   1dd66:	e7e4      	b.n	1dd32 <enter_idle+0x42>
		return -ENOTSUP;
   1dd68:	f06f 0185 	mvn.w	r1, #133	; 0x85
   1dd6c:	e7f3      	b.n	1dd56 <enter_idle+0x66>
	err = gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   1dd6e:	6820      	ldr	r0, [r4, #0]
   1dd70:	f44f 3110 	mov.w	r1, #147456	; 0x24000
   1dd74:	f017 fbd2 	bl	3551c <z_impl_gpio_pin_interrupt_configure.constprop.0>
	if (err) {
   1dd78:	4601      	mov	r1, r0
   1dd7a:	b140      	cbz	r0, 1dd8e <enter_idle+0x9e>
   1dd7c:	4a06      	ldr	r2, [pc, #24]	; (1dd98 <enter_idle+0xa8>)
   1dd7e:	4b07      	ldr	r3, [pc, #28]	; (1dd9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 enable callback error: %d", err);
   1dd80:	480c      	ldr	r0, [pc, #48]	; (1ddb4 <enter_idle+0xc4>)
   1dd82:	1ad2      	subs	r2, r2, r3
   1dd84:	08d2      	lsrs	r2, r2, #3
   1dd86:	0192      	lsls	r2, r2, #6
   1dd88:	f042 0201 	orr.w	r2, r2, #1
   1dd8c:	e7d1      	b.n	1dd32 <enter_idle+0x42>
}
   1dd8e:	bd10      	pop	{r4, pc}
   1dd90:	0003a4e2 	.word	0x0003a4e2
   1dd94:	20023328 	.word	0x20023328
   1dd98:	00039a58 	.word	0x00039a58
   1dd9c:	00039a50 	.word	0x00039a50
   1dda0:	0003a4e9 	.word	0x0003a4e9
   1dda4:	0003a4fb 	.word	0x0003a4fb
   1dda8:	2002331c 	.word	0x2002331c
   1ddac:	0001dc39 	.word	0x0001dc39
   1ddb0:	0003a513 	.word	0x0003a513
   1ddb4:	0003a531 	.word	0x0003a531

0001ddb8 <handle_bsdlib_init_ret>:
	}
#endif	/* CONFIG_SLM_GPIO_WAKEUP */
}

void handle_bsdlib_init_ret(void)
{
   1ddb8:	b508      	push	{r3, lr}
	int ret = bsdlib_get_init_ret();
   1ddba:	f009 fad9 	bl	27370 <bsdlib_get_init_ret>

	/* Handle return values relating to modem firmware update */
	switch (ret) {
   1ddbe:	4b19      	ldr	r3, [pc, #100]	; (1de24 <handle_bsdlib_init_ret+0x6c>)
	int ret = bsdlib_get_init_ret();
   1ddc0:	4601      	mov	r1, r0
	switch (ret) {
   1ddc2:	4298      	cmp	r0, r3
   1ddc4:	dc08      	bgt.n	1ddd8 <handle_bsdlib_init_ret+0x20>
   1ddc6:	3b02      	subs	r3, #2
   1ddc8:	4298      	cmp	r0, r3
   1ddca:	dc17      	bgt.n	1ddfc <handle_bsdlib_init_ret+0x44>
   1ddcc:	f1a0 6388 	sub.w	r3, r0, #71303168	; 0x4400000
   1ddd0:	3b01      	subs	r3, #1
   1ddd2:	2b01      	cmp	r3, #1
   1ddd4:	d91d      	bls.n	1de12 <handle_bsdlib_init_ret+0x5a>
		sys_reboot(SYS_REBOOT_COLD);
		break;
	default:
		break;
	}
}
   1ddd6:	bd08      	pop	{r3, pc}
	switch (ret) {
   1ddd8:	4b13      	ldr	r3, [pc, #76]	; (1de28 <handle_bsdlib_init_ret+0x70>)
   1ddda:	4298      	cmp	r0, r3
   1dddc:	d1fb      	bne.n	1ddd6 <handle_bsdlib_init_ret+0x1e>
   1ddde:	4913      	ldr	r1, [pc, #76]	; (1de2c <handle_bsdlib_init_ret+0x74>)
   1dde0:	4b13      	ldr	r3, [pc, #76]	; (1de30 <handle_bsdlib_init_ret+0x78>)
		LOG_INF("MODEM UPDATE OK. Will run new firmware");
   1dde2:	4814      	ldr	r0, [pc, #80]	; (1de34 <handle_bsdlib_init_ret+0x7c>)
   1dde4:	1ac9      	subs	r1, r1, r3
   1dde6:	08c9      	lsrs	r1, r1, #3
   1dde8:	0189      	lsls	r1, r1, #6
   1ddea:	f041 0103 	orr.w	r1, r1, #3
   1ddee:	f018 f917 	bl	36020 <log_0>
}
   1ddf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_reboot(SYS_REBOOT_COLD);
   1ddf6:	2001      	movs	r0, #1
   1ddf8:	f006 bcb2 	b.w	24760 <sys_reboot>
   1ddfc:	4a0b      	ldr	r2, [pc, #44]	; (1de2c <handle_bsdlib_init_ret+0x74>)
   1ddfe:	4b0c      	ldr	r3, [pc, #48]	; (1de30 <handle_bsdlib_init_ret+0x78>)
		LOG_ERR("MODEM UPDATE ERROR %d. Will run old firmware", ret);
   1de00:	480d      	ldr	r0, [pc, #52]	; (1de38 <handle_bsdlib_init_ret+0x80>)
   1de02:	1ad2      	subs	r2, r2, r3
   1de04:	08d2      	lsrs	r2, r2, #3
   1de06:	0192      	lsls	r2, r2, #6
   1de08:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("MODEM UPDATE FATAL ERROR %d. Modem failiure", ret);
   1de0c:	f018 f917 	bl	3603e <log_1>
   1de10:	e7ef      	b.n	1ddf2 <handle_bsdlib_init_ret+0x3a>
   1de12:	4a06      	ldr	r2, [pc, #24]	; (1de2c <handle_bsdlib_init_ret+0x74>)
   1de14:	4b06      	ldr	r3, [pc, #24]	; (1de30 <handle_bsdlib_init_ret+0x78>)
   1de16:	4809      	ldr	r0, [pc, #36]	; (1de3c <handle_bsdlib_init_ret+0x84>)
   1de18:	1ad2      	subs	r2, r2, r3
   1de1a:	08d2      	lsrs	r2, r2, #3
   1de1c:	0192      	lsls	r2, r2, #6
   1de1e:	f042 0201 	orr.w	r2, r2, #1
   1de22:	e7f3      	b.n	1de0c <handle_bsdlib_init_ret+0x54>
   1de24:	04400004 	.word	0x04400004
   1de28:	05500001 	.word	0x05500001
   1de2c:	00039a58 	.word	0x00039a58
   1de30:	00039a50 	.word	0x00039a50
   1de34:	0003a552 	.word	0x0003a552
   1de38:	0003a579 	.word	0x0003a579
   1de3c:	0003a5a6 	.word	0x0003a5a6

0001de40 <start_execute>:

void start_execute(void)
{
   1de40:	b530      	push	{r4, r5, lr}
   1de42:	b085      	sub	sp, #20
	int err;
	struct onoff_manager *clk_mgr;
	struct onoff_client cli = {};
   1de44:	2210      	movs	r2, #16
   1de46:	2100      	movs	r1, #0
   1de48:	4668      	mov	r0, sp
   1de4a:	f01a fe98 	bl	38b7e <memset>
   1de4e:	4c26      	ldr	r4, [pc, #152]	; (1dee8 <start_execute+0xa8>)
   1de50:	4b26      	ldr	r3, [pc, #152]	; (1deec <start_execute+0xac>)

	LOG_INF("Serial LTE Modem");
   1de52:	4827      	ldr	r0, [pc, #156]	; (1def0 <start_execute+0xb0>)
   1de54:	1ae4      	subs	r4, r4, r3
   1de56:	08e4      	lsrs	r4, r4, #3
   1de58:	01a4      	lsls	r4, r4, #6
   1de5a:	f044 0103 	orr.w	r1, r4, #3
   1de5e:	f018 f8df 	bl	36020 <log_0>

	/* request external XTAL for UART */
	clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1de62:	2000      	movs	r0, #0
   1de64:	f006 fde2 	bl	24a2c <z_nrf_clock_control_get_onoff>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1de68:	2300      	movs	r3, #0
   1de6a:	9301      	str	r3, [sp, #4]
   1de6c:	9303      	str	r3, [sp, #12]
   1de6e:	2301      	movs	r3, #1
	sys_notify_init_spinwait(&cli.notify);
	err = onoff_request(clk_mgr, &cli);
   1de70:	4669      	mov	r1, sp
   1de72:	9302      	str	r3, [sp, #8]
   1de74:	f017 fcdf 	bl	35836 <onoff_request>
	if (err) {
   1de78:	4601      	mov	r1, r0
   1de7a:	b130      	cbz	r0, 1de8a <start_execute+0x4a>
		LOG_ERR("Clock request failed: %d", err);
   1de7c:	481d      	ldr	r0, [pc, #116]	; (1def4 <start_execute+0xb4>)
   1de7e:	f044 0201 	orr.w	r2, r4, #1
		return;
	}

	err = slm_at_host_init();
	if (err) {
		LOG_ERR("Failed to init at_host: %d", err);
   1de82:	f018 f8dc 	bl	3603e <log_1>

	/* All initializations were successful mark image as working so that we
	 * will not revert upon reboot.
	 */
	boot_write_img_confirmed();
}
   1de86:	b005      	add	sp, #20
   1de88:	bd30      	pop	{r4, r5, pc}
	handle_bsdlib_init_ret();
   1de8a:	f7ff ff95 	bl	1ddb8 <handle_bsdlib_init_ret>
	err = modem_info_init();
   1de8e:	f00a fe75 	bl	28b7c <modem_info_init>
	if (err) {
   1de92:	4601      	mov	r1, r0
   1de94:	b118      	cbz	r0, 1de9e <start_execute+0x5e>
		LOG_ERR("Modem info could not be established: %d", err);
   1de96:	4818      	ldr	r0, [pc, #96]	; (1def8 <start_execute+0xb8>)
   1de98:	f044 0201 	orr.w	r2, r4, #1
   1de9c:	e7f1      	b.n	1de82 <start_execute+0x42>
	modem_info_params_init(&modem_param);
   1de9e:	4817      	ldr	r0, [pc, #92]	; (1defc <start_execute+0xbc>)
   1dea0:	f00a feb0 	bl	28c04 <modem_info_params_init>
	err = at_params_list_init(&at_param_list, CONFIG_SLM_AT_MAX_PARAM);
   1dea4:	2109      	movs	r1, #9
   1dea6:	4816      	ldr	r0, [pc, #88]	; (1df00 <start_execute+0xc0>)
   1dea8:	f019 ffb9 	bl	37e1e <at_params_list_init>
	if (err) {
   1deac:	4601      	mov	r1, r0
   1deae:	b118      	cbz	r0, 1deb8 <start_execute+0x78>
		LOG_ERR("Failed to init AT Parser: %d", err);
   1deb0:	4814      	ldr	r0, [pc, #80]	; (1df04 <start_execute+0xc4>)
   1deb2:	f044 0201 	orr.w	r2, r4, #1
   1deb6:	e7e4      	b.n	1de82 <start_execute+0x42>
	err = slm_at_host_init();
   1deb8:	f000 f9e2 	bl	1e280 <slm_at_host_init>
	if (err) {
   1debc:	4605      	mov	r5, r0
   1debe:	b120      	cbz	r0, 1deca <start_execute+0x8a>
		LOG_ERR("Failed to init at_host: %d", err);
   1dec0:	4601      	mov	r1, r0
   1dec2:	f044 0201 	orr.w	r2, r4, #1
   1dec6:	4810      	ldr	r0, [pc, #64]	; (1df08 <start_execute+0xc8>)
   1dec8:	e7db      	b.n	1de82 <start_execute+0x42>
	k_work_q_start(&slm_work_q, slm_wq_stack_area,
   1deca:	230e      	movs	r3, #14
   1decc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ded0:	490e      	ldr	r1, [pc, #56]	; (1df0c <start_execute+0xcc>)
   1ded2:	480f      	ldr	r0, [pc, #60]	; (1df10 <start_execute+0xd0>)
   1ded4:	f016 f934 	bl	34140 <k_work_q_start>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1ded8:	4b0e      	ldr	r3, [pc, #56]	; (1df14 <start_execute+0xd4>)
   1deda:	4a0f      	ldr	r2, [pc, #60]	; (1df18 <start_execute+0xd8>)
   1dedc:	601d      	str	r5, [r3, #0]
   1dede:	e9c3 2501 	strd	r2, r5, [r3, #4]
	boot_write_img_confirmed();
   1dee2:	f018 fc30 	bl	36746 <boot_write_img_confirmed>
   1dee6:	e7ce      	b.n	1de86 <start_execute+0x46>
   1dee8:	00039a58 	.word	0x00039a58
   1deec:	00039a50 	.word	0x00039a50
   1def0:	0003a5d2 	.word	0x0003a5d2
   1def4:	0003a5e3 	.word	0x0003a5e3
   1def8:	0003a5fc 	.word	0x0003a5fc
   1defc:	200208a0 	.word	0x200208a0
   1df00:	20023308 	.word	0x20023308
   1df04:	0003a624 	.word	0x0003a624
   1df08:	0003a4aa 	.word	0x0003a4aa
   1df0c:	2002c860 	.word	0x2002c860
   1df10:	20021188 	.word	0x20021188
   1df14:	20023310 	.word	0x20023310
   1df18:	0001dc61 	.word	0x0001dc61

0001df1c <slm_util_cmd_casecmp>:

/**
 * @brief Compare name of AT command ignoring case
 */
bool slm_util_cmd_casecmp(const char *cmd, const char *slm_cmd)
{
   1df1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df1e:	4606      	mov	r6, r0
	int i;
	int slm_cmd_len = strlen(slm_cmd);
   1df20:	4608      	mov	r0, r1
{
   1df22:	460f      	mov	r7, r1
	int slm_cmd_len = strlen(slm_cmd);
   1df24:	f7ff f8a4 	bl	1d070 <strlen>
   1df28:	4604      	mov	r4, r0

	if (strlen(cmd) < slm_cmd_len) {
   1df2a:	4630      	mov	r0, r6
   1df2c:	f7ff f8a0 	bl	1d070 <strlen>
   1df30:	4284      	cmp	r4, r0
   1df32:	d823      	bhi.n	1df7c <slm_util_cmd_casecmp+0x60>
		return false;
	}

	for (i = 0; i < slm_cmd_len; i++) {
   1df34:	2500      	movs	r5, #0
		if (toupper((int)*(cmd + i)) != toupper((int)*(slm_cmd + i))) {
   1df36:	4813      	ldr	r0, [pc, #76]	; (1df84 <slm_util_cmd_casecmp+0x68>)
	for (i = 0; i < slm_cmd_len; i++) {
   1df38:	42a5      	cmp	r5, r4
   1df3a:	db0d      	blt.n	1df58 <slm_util_cmd_casecmp+0x3c>
			return false;
		}
	}
#if defined(CONFIG_SLM_CR_LF_TERMINATION)
	if (strlen(cmd) > (slm_cmd_len + 2)) {
   1df3c:	4630      	mov	r0, r6
   1df3e:	f7ff f897 	bl	1d070 <strlen>
   1df42:	3402      	adds	r4, #2
   1df44:	42a0      	cmp	r0, r4
   1df46:	d91b      	bls.n	1df80 <slm_util_cmd_casecmp+0x64>
#else
	if (strlen(cmd) > (slm_cmd_len + 1)) {
#endif
		char ch = *(cmd + i);
		/* With parameter, SET TEST, "="; READ, "?" */
		return ((ch == '=') || (ch == '?'));
   1df48:	5d70      	ldrb	r0, [r6, r5]
   1df4a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
   1df4e:	f1a0 033d 	sub.w	r3, r0, #61	; 0x3d
   1df52:	4258      	negs	r0, r3
   1df54:	4158      	adcs	r0, r3
	}

	return true;
}
   1df56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (toupper((int)*(cmd + i)) != toupper((int)*(slm_cmd + i))) {
   1df58:	5d72      	ldrb	r2, [r6, r5]
   1df5a:	5c13      	ldrb	r3, [r2, r0]
   1df5c:	f003 0303 	and.w	r3, r3, #3
   1df60:	2b02      	cmp	r3, #2
   1df62:	5d7b      	ldrb	r3, [r7, r5]
   1df64:	bf08      	it	eq
   1df66:	3a20      	subeq	r2, #32
   1df68:	5cc1      	ldrb	r1, [r0, r3]
   1df6a:	f001 0103 	and.w	r1, r1, #3
   1df6e:	2902      	cmp	r1, #2
   1df70:	bf08      	it	eq
   1df72:	3b20      	subeq	r3, #32
   1df74:	429a      	cmp	r2, r3
   1df76:	d101      	bne.n	1df7c <slm_util_cmd_casecmp+0x60>
	for (i = 0; i < slm_cmd_len; i++) {
   1df78:	3501      	adds	r5, #1
   1df7a:	e7dd      	b.n	1df38 <slm_util_cmd_casecmp+0x1c>
		return false;
   1df7c:	2000      	movs	r0, #0
   1df7e:	e7ea      	b.n	1df56 <slm_util_cmd_casecmp+0x3a>
	return true;
   1df80:	2001      	movs	r0, #1
   1df82:	e7e8      	b.n	1df56 <slm_util_cmd_casecmp+0x3a>
   1df84:	0003d1dc 	.word	0x0003d1dc

0001df88 <slm_util_htoa>:
/**
 * @brief Encode hex array to hexdecimal string (ASCII text)
 */
int slm_util_htoa(const uint8_t *hex, uint16_t hex_len,
		char *ascii, uint16_t ascii_len)
{
   1df88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1df8c:	460d      	mov	r5, r1
   1df8e:	4690      	mov	r8, r2
	if (hex == NULL || ascii == NULL) {
   1df90:	4607      	mov	r7, r0
   1df92:	b1a8      	cbz	r0, 1dfc0 <slm_util_htoa+0x38>
   1df94:	b1a2      	cbz	r2, 1dfc0 <slm_util_htoa+0x38>
		return -EINVAL;
	}
	if (ascii_len < (hex_len * 2)) {
   1df96:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
   1df9a:	ea4f 0641 	mov.w	r6, r1, lsl #1
   1df9e:	db0f      	blt.n	1dfc0 <slm_util_htoa+0x38>
		return -EINVAL;
	}

	for (int i = 0; i < hex_len; i++) {
   1dfa0:	2400      	movs	r4, #0
		sprintf(ascii + (i * 2), "%02X", *(hex + i));
   1dfa2:	f8df 9024 	ldr.w	r9, [pc, #36]	; 1dfc8 <slm_util_htoa+0x40>
	for (int i = 0; i < hex_len; i++) {
   1dfa6:	42a5      	cmp	r5, r4
   1dfa8:	dc02      	bgt.n	1dfb0 <slm_util_htoa+0x28>
	}

	return (hex_len * 2);
}
   1dfaa:	4630      	mov	r0, r6
   1dfac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sprintf(ascii + (i * 2), "%02X", *(hex + i));
   1dfb0:	5d3a      	ldrb	r2, [r7, r4]
   1dfb2:	eb08 0044 	add.w	r0, r8, r4, lsl #1
   1dfb6:	4649      	mov	r1, r9
   1dfb8:	f016 ff3c 	bl	34e34 <siprintf>
	for (int i = 0; i < hex_len; i++) {
   1dfbc:	3401      	adds	r4, #1
   1dfbe:	e7f2      	b.n	1dfa6 <slm_util_htoa+0x1e>
		return -EINVAL;
   1dfc0:	f06f 0615 	mvn.w	r6, #21
   1dfc4:	e7f1      	b.n	1dfaa <slm_util_htoa+0x22>
   1dfc6:	bf00      	nop
   1dfc8:	0003a645 	.word	0x0003a645

0001dfcc <uart_callback>:
	cmd_len = 0;
}

static void uart_callback(const struct device *dev, struct uart_event *evt,
			  void *user_data)
{
   1dfcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfd0:	780b      	ldrb	r3, [r1, #0]
   1dfd2:	460e      	mov	r6, r1
   1dfd4:	2b06      	cmp	r3, #6
   1dfd6:	d837      	bhi.n	1e048 <uart_callback+0x7c>
   1dfd8:	e8df f013 	tbh	[pc, r3, lsl #1]
   1dfdc:	00100007 	.word	0x00100007
   1dfe0:	00b40023 	.word	0x00b40023
   1dfe4:	003600d0 	.word	0x003600d0
   1dfe8:	00d4      	.short	0x00d4

	ARG_UNUSED(user_data);

	switch (evt->type) {
	case UART_TX_DONE:
		k_free(uart_tx_buf);
   1dfea:	4b6b      	ldr	r3, [pc, #428]	; (1e198 <uart_callback+0x1cc>)
   1dfec:	6818      	ldr	r0, [r3, #0]
   1dfee:	f01a fd69 	bl	38ac4 <k_free>
		LOG_DBG("RX_DISABLED");
		break;
	default:
		break;
	}
}
   1dff2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1dff6:	4869      	ldr	r0, [pc, #420]	; (1e19c <uart_callback+0x1d0>)
   1dff8:	f015 bf52 	b.w	33ea0 <z_impl_k_sem_give>
		k_free(uart_tx_buf);
   1dffc:	4b66      	ldr	r3, [pc, #408]	; (1e198 <uart_callback+0x1cc>)
   1dffe:	6818      	ldr	r0, [r3, #0]
   1e000:	f01a fd60 	bl	38ac4 <k_free>
   1e004:	4865      	ldr	r0, [pc, #404]	; (1e19c <uart_callback+0x1d0>)
   1e006:	f015 ff4b 	bl	33ea0 <z_impl_k_sem_give>
   1e00a:	4b65      	ldr	r3, [pc, #404]	; (1e1a0 <uart_callback+0x1d4>)
   1e00c:	4965      	ldr	r1, [pc, #404]	; (1e1a4 <uart_callback+0x1d8>)
		LOG_INF("TX_ABORTED");
   1e00e:	4866      	ldr	r0, [pc, #408]	; (1e1a8 <uart_callback+0x1dc>)
   1e010:	1ac9      	subs	r1, r1, r3
   1e012:	08c9      	lsrs	r1, r1, #3
   1e014:	0189      	lsls	r1, r1, #6
   1e016:	f041 0103 	orr.w	r1, r1, #3
}
   1e01a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LOG_INF("TX_ABORTED");
   1e01e:	f017 bfff 	b.w	36020 <log_0>
   1e022:	4b5f      	ldr	r3, [pc, #380]	; (1e1a0 <uart_callback+0x1d4>)
   1e024:	4f5f      	ldr	r7, [pc, #380]	; (1e1a4 <uart_callback+0x1d8>)
	cmd_len += 1;
   1e026:	4c61      	ldr	r4, [pc, #388]	; (1e1ac <uart_callback+0x1e0>)
   1e028:	1aff      	subs	r7, r7, r3
		for (int i = pos; i < (pos + evt->data.rx.len); i++) {
   1e02a:	4b61      	ldr	r3, [pc, #388]	; (1e1b0 <uart_callback+0x1e4>)
	if (inside_quotes) {
   1e02c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 1e1e4 <uart_callback+0x218>
   1e030:	4698      	mov	r8, r3
   1e032:	f8b3 9000 	ldrh.w	r9, [r3]
   1e036:	08ff      	lsrs	r7, r7, #3
		for (int i = pos; i < (pos + evt->data.rx.len); i++) {
   1e038:	f8b8 3000 	ldrh.w	r3, [r8]
   1e03c:	68f2      	ldr	r2, [r6, #12]
   1e03e:	4413      	add	r3, r2
   1e040:	454b      	cmp	r3, r9
   1e042:	d803      	bhi.n	1e04c <uart_callback+0x80>
		pos += evt->data.rx.len;
   1e044:	f8a8 3000 	strh.w	r3, [r8]
}
   1e048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uart_rx_handler(evt->data.rx.buf[i]);
   1e04c:	6873      	ldr	r3, [r6, #4]
	cmd_len += 1;
   1e04e:	6822      	ldr	r2, [r4, #0]
			uart_rx_handler(evt->data.rx.buf[i]);
   1e050:	f813 3009 	ldrb.w	r3, [r3, r9]
	cmd_len += 1;
   1e054:	1c55      	adds	r5, r2, #1
	switch (character) {
   1e056:	2b22      	cmp	r3, #34	; 0x22
	cmd_len += 1;
   1e058:	6025      	str	r5, [r4, #0]
	switch (character) {
   1e05a:	d018      	beq.n	1e08e <uart_callback+0xc2>
   1e05c:	2b7f      	cmp	r3, #127	; 0x7f
   1e05e:	d001      	beq.n	1e064 <uart_callback+0x98>
   1e060:	2b08      	cmp	r3, #8
   1e062:	d11a      	bne.n	1e09a <uart_callback+0xce>
		pos = pos ? pos - 1 : 0;
   1e064:	b102      	cbz	r2, 1e068 <uart_callback+0x9c>
   1e066:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   1e068:	2d02      	cmp	r5, #2
   1e06a:	bf38      	it	cc
   1e06c:	2502      	movcc	r5, #2
		at_buf[pos] = 0;
   1e06e:	2000      	movs	r0, #0
   1e070:	4950      	ldr	r1, [pc, #320]	; (1e1b4 <uart_callback+0x1e8>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   1e072:	3d02      	subs	r5, #2
		at_buf[pos] = 0;
   1e074:	5488      	strb	r0, [r1, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   1e076:	6025      	str	r5, [r4, #0]
	if (inside_quotes) {
   1e078:	f89a 1000 	ldrb.w	r1, [sl]
   1e07c:	b9d1      	cbnz	r1, 1e0b4 <uart_callback+0xe8>
	switch (term_mode) {
   1e07e:	494e      	ldr	r1, [pc, #312]	; (1e1b8 <uart_callback+0x1ec>)
   1e080:	7809      	ldrb	r1, [r1, #0]
   1e082:	2903      	cmp	r1, #3
   1e084:	d857      	bhi.n	1e136 <uart_callback+0x16a>
   1e086:	e8df f001 	tbb	[pc, r1]
   1e08a:	252a      	.short	0x252a
   1e08c:	4b43      	.short	0x4b43
		inside_quotes = !inside_quotes;
   1e08e:	f89a 1000 	ldrb.w	r1, [sl]
   1e092:	f081 0101 	eor.w	r1, r1, #1
   1e096:	f88a 1000 	strb.w	r1, [sl]
		if (cmd_len > AT_MAX_CMD_LEN) {
   1e09a:	f640 2b8c 	movw	fp, #2700	; 0xa8c
   1e09e:	455d      	cmp	r5, fp
   1e0a0:	d90b      	bls.n	1e0ba <uart_callback+0xee>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   1e0a2:	01ba      	lsls	r2, r7, #6
   1e0a4:	4619      	mov	r1, r3
   1e0a6:	4845      	ldr	r0, [pc, #276]	; (1e1bc <uart_callback+0x1f0>)
   1e0a8:	f042 0201 	orr.w	r2, r2, #1
   1e0ac:	f017 ffc7 	bl	3603e <log_1>
			cmd_len = AT_MAX_CMD_LEN;
   1e0b0:	f8c4 b000 	str.w	fp, [r4]
		for (int i = pos; i < (pos + evt->data.rx.len); i++) {
   1e0b4:	f109 0901 	add.w	r9, r9, #1
   1e0b8:	e7be      	b.n	1e038 <uart_callback+0x6c>
		} else if (cmd_len < 1) {
   1e0ba:	b945      	cbnz	r5, 1e0ce <uart_callback+0x102>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
   1e0bc:	01ba      	lsls	r2, r7, #6
   1e0be:	4629      	mov	r1, r5
   1e0c0:	483f      	ldr	r0, [pc, #252]	; (1e1c0 <uart_callback+0x1f4>)
   1e0c2:	f042 0201 	orr.w	r2, r2, #1
   1e0c6:	f017 ffba 	bl	3603e <log_1>
			cmd_len = 0;
   1e0ca:	6025      	str	r5, [r4, #0]
			return;
   1e0cc:	e7f2      	b.n	1e0b4 <uart_callback+0xe8>
		at_buf[pos] = character;
   1e0ce:	4939      	ldr	r1, [pc, #228]	; (1e1b4 <uart_callback+0x1e8>)
   1e0d0:	548b      	strb	r3, [r1, r2]
		break;
   1e0d2:	e7d1      	b.n	1e078 <uart_callback+0xac>
		if (character == termination[term_mode]) {
   1e0d4:	2b0d      	cmp	r3, #13
   1e0d6:	d1ed      	bne.n	1e0b4 <uart_callback+0xe8>
			cmd_len--;
   1e0d8:	6823      	ldr	r3, [r4, #0]
   1e0da:	3b01      	subs	r3, #1
			cmd_len -= 2;
   1e0dc:	6023      	str	r3, [r4, #0]
	uart_rx_disable(uart_dev);
   1e0de:	4b39      	ldr	r3, [pc, #228]	; (1e1c4 <uart_callback+0x1f8>)
   1e0e0:	6818      	ldr	r0, [r3, #0]
   1e0e2:	f017 fa8e 	bl	35602 <uart_rx_disable>
   1e0e6:	4938      	ldr	r1, [pc, #224]	; (1e1c8 <uart_callback+0x1fc>)
   1e0e8:	e8d1 3fef 	ldaex	r3, [r1]
   1e0ec:	f043 0201 	orr.w	r2, r3, #1
   1e0f0:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1e0f4:	2800      	cmp	r0, #0
   1e0f6:	d1f7      	bne.n	1e0e8 <uart_callback+0x11c>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e0f8:	07db      	lsls	r3, r3, #31
   1e0fa:	d403      	bmi.n	1e104 <uart_callback+0x138>
		k_queue_append(&work_q->queue, work);
   1e0fc:	4833      	ldr	r0, [pc, #204]	; (1e1cc <uart_callback+0x200>)
   1e0fe:	3908      	subs	r1, #8
   1e100:	f01a f948 	bl	38394 <k_queue_append>
	at_buf_len = cmd_len;
   1e104:	6822      	ldr	r2, [r4, #0]
   1e106:	4b32      	ldr	r3, [pc, #200]	; (1e1d0 <uart_callback+0x204>)
   1e108:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
   1e10a:	2300      	movs	r3, #0
   1e10c:	6023      	str	r3, [r4, #0]
   1e10e:	e7d1      	b.n	1e0b4 <uart_callback+0xe8>
		if ((at_buf[pos - 1]) &&
   1e110:	4928      	ldr	r1, [pc, #160]	; (1e1b4 <uart_callback+0x1e8>)
   1e112:	440a      	add	r2, r1
   1e114:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1e118:	2a00      	cmp	r2, #0
   1e11a:	d0cb      	beq.n	1e0b4 <uart_callback+0xe8>
   1e11c:	2b0a      	cmp	r3, #10
   1e11e:	e7da      	b.n	1e0d6 <uart_callback+0x10a>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
   1e120:	4924      	ldr	r1, [pc, #144]	; (1e1b4 <uart_callback+0x1e8>)
   1e122:	440a      	add	r2, r1
   1e124:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1e128:	2a0d      	cmp	r2, #13
   1e12a:	d1c3      	bne.n	1e0b4 <uart_callback+0xe8>
   1e12c:	2b0a      	cmp	r3, #10
   1e12e:	d1c1      	bne.n	1e0b4 <uart_callback+0xe8>
			cmd_len -= 2;
   1e130:	6823      	ldr	r3, [r4, #0]
   1e132:	3b02      	subs	r3, #2
   1e134:	e7d2      	b.n	1e0dc <uart_callback+0x110>
		LOG_ERR("Invalid termination mode: %d", term_mode);
   1e136:	01ba      	lsls	r2, r7, #6
   1e138:	4826      	ldr	r0, [pc, #152]	; (1e1d4 <uart_callback+0x208>)
   1e13a:	f042 0201 	orr.w	r2, r2, #1
   1e13e:	f017 ff7e 	bl	3603e <log_1>
   1e142:	e7b7      	b.n	1e0b4 <uart_callback+0xe8>
		pos = 0;
   1e144:	2200      	movs	r2, #0
   1e146:	4b1a      	ldr	r3, [pc, #104]	; (1e1b0 <uart_callback+0x1e4>)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
   1e148:	4923      	ldr	r1, [pc, #140]	; (1e1d8 <uart_callback+0x20c>)
   1e14a:	801a      	strh	r2, [r3, #0]
		err = uart_rx_buf_rsp(uart_dev, next_buf,
   1e14c:	4b1d      	ldr	r3, [pc, #116]	; (1e1c4 <uart_callback+0x1f8>)
   1e14e:	6809      	ldr	r1, [r1, #0]
   1e150:	6818      	ldr	r0, [r3, #0]
   1e152:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e156:	6883      	ldr	r3, [r0, #8]
   1e158:	691b      	ldr	r3, [r3, #16]
   1e15a:	4798      	blx	r3
		if (err) {
   1e15c:	4601      	mov	r1, r0
   1e15e:	2800      	cmp	r0, #0
   1e160:	f43f af72 	beq.w	1e048 <uart_callback+0x7c>
   1e164:	4a0f      	ldr	r2, [pc, #60]	; (1e1a4 <uart_callback+0x1d8>)
   1e166:	4b0e      	ldr	r3, [pc, #56]	; (1e1a0 <uart_callback+0x1d4>)
			LOG_WRN("UART RX buf rsp: %d", err);
   1e168:	481c      	ldr	r0, [pc, #112]	; (1e1dc <uart_callback+0x210>)
   1e16a:	1ad2      	subs	r2, r2, r3
   1e16c:	08d2      	lsrs	r2, r2, #3
   1e16e:	0192      	lsls	r2, r2, #6
   1e170:	f042 0202 	orr.w	r2, r2, #2
}
   1e174:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LOG_WRN("RX_STOPPED (%d)", evt->data.rx_stop.reason);
   1e178:	f017 bf61 	b.w	3603e <log_1>
		next_buf = evt->data.rx_buf.buf;
   1e17c:	684a      	ldr	r2, [r1, #4]
   1e17e:	4b16      	ldr	r3, [pc, #88]	; (1e1d8 <uart_callback+0x20c>)
   1e180:	601a      	str	r2, [r3, #0]
		break;
   1e182:	e761      	b.n	1e048 <uart_callback+0x7c>
   1e184:	4a07      	ldr	r2, [pc, #28]	; (1e1a4 <uart_callback+0x1d8>)
   1e186:	4b06      	ldr	r3, [pc, #24]	; (1e1a0 <uart_callback+0x1d4>)
		LOG_WRN("RX_STOPPED (%d)", evt->data.rx_stop.reason);
   1e188:	7909      	ldrb	r1, [r1, #4]
   1e18a:	1ad2      	subs	r2, r2, r3
   1e18c:	08d2      	lsrs	r2, r2, #3
   1e18e:	0192      	lsls	r2, r2, #6
   1e190:	4813      	ldr	r0, [pc, #76]	; (1e1e0 <uart_callback+0x214>)
   1e192:	f042 0202 	orr.w	r2, r2, #2
   1e196:	e7ed      	b.n	1e174 <uart_callback+0x1a8>
   1e198:	20023344 	.word	0x20023344
   1e19c:	20020864 	.word	0x20020864
   1e1a0:	00039a50 	.word	0x00039a50
   1e1a4:	00039a68 	.word	0x00039a68
   1e1a8:	0003a64a 	.word	0x0003a64a
   1e1ac:	20023330 	.word	0x20023330
   1e1b0:	20028784 	.word	0x20028784
   1e1b4:	2002923c 	.word	0x2002923c
   1e1b8:	2002a755 	.word	0x2002a755
   1e1bc:	0003a655 	.word	0x0003a655
   1e1c0:	0003a675 	.word	0x0003a675
   1e1c4:	20023340 	.word	0x20023340
   1e1c8:	2002333c 	.word	0x2002333c
   1e1cc:	20023220 	.word	0x20023220
   1e1d0:	2002332c 	.word	0x2002332c
   1e1d4:	0003a693 	.word	0x0003a693
   1e1d8:	200200c0 	.word	0x200200c0
   1e1dc:	0003a6b0 	.word	0x0003a6b0
   1e1e0:	0003a6c4 	.word	0x0003a6c4
   1e1e4:	2002a754 	.word	0x2002a754

0001e1e8 <rsp_send>:
{
   1e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1ea:	4607      	mov	r7, r0
   1e1ec:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   1e1ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e1f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e1f6:	481b      	ldr	r0, [pc, #108]	; (1e264 <rsp_send+0x7c>)
   1e1f8:	f015 fe78 	bl	33eec <z_impl_k_sem_take>
	uart_tx_buf = k_malloc(len);
   1e1fc:	4628      	mov	r0, r5
   1e1fe:	f016 fa69 	bl	346d4 <k_malloc>
   1e202:	4e19      	ldr	r6, [pc, #100]	; (1e268 <rsp_send+0x80>)
   1e204:	4604      	mov	r4, r0
   1e206:	6030      	str	r0, [r6, #0]
	if (uart_tx_buf == NULL) {
   1e208:	b970      	cbnz	r0, 1e228 <rsp_send+0x40>
   1e20a:	4918      	ldr	r1, [pc, #96]	; (1e26c <rsp_send+0x84>)
   1e20c:	4b18      	ldr	r3, [pc, #96]	; (1e270 <rsp_send+0x88>)
		LOG_WRN("No ram buffer");
   1e20e:	4819      	ldr	r0, [pc, #100]	; (1e274 <rsp_send+0x8c>)
   1e210:	1ac9      	subs	r1, r1, r3
   1e212:	08c9      	lsrs	r1, r1, #3
   1e214:	0189      	lsls	r1, r1, #6
   1e216:	f041 0102 	orr.w	r1, r1, #2
   1e21a:	f017 ff01 	bl	36020 <log_0>
}
   1e21e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1e222:	4810      	ldr	r0, [pc, #64]	; (1e264 <rsp_send+0x7c>)
   1e224:	f015 be3c 	b.w	33ea0 <z_impl_k_sem_give>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e228:	462a      	mov	r2, r5
   1e22a:	4639      	mov	r1, r7
   1e22c:	f01a fc87 	bl	38b3e <memcpy>
	ret = uart_tx(uart_dev, uart_tx_buf, len, SYS_FOREVER_MS);
   1e230:	4b11      	ldr	r3, [pc, #68]	; (1e278 <rsp_send+0x90>)
   1e232:	6818      	ldr	r0, [r3, #0]
	return api->tx(dev, buf, len, timeout);
   1e234:	6883      	ldr	r3, [r0, #8]
   1e236:	4621      	mov	r1, r4
   1e238:	685f      	ldr	r7, [r3, #4]
   1e23a:	462a      	mov	r2, r5
   1e23c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e240:	47b8      	blx	r7
	if (ret) {
   1e242:	4601      	mov	r1, r0
   1e244:	b168      	cbz	r0, 1e262 <rsp_send+0x7a>
   1e246:	4b0a      	ldr	r3, [pc, #40]	; (1e270 <rsp_send+0x88>)
   1e248:	4a08      	ldr	r2, [pc, #32]	; (1e26c <rsp_send+0x84>)
		LOG_WRN("uart_tx failed: %d", ret);
   1e24a:	480c      	ldr	r0, [pc, #48]	; (1e27c <rsp_send+0x94>)
   1e24c:	1ad2      	subs	r2, r2, r3
   1e24e:	08d2      	lsrs	r2, r2, #3
   1e250:	0192      	lsls	r2, r2, #6
   1e252:	f042 0202 	orr.w	r2, r2, #2
   1e256:	f017 fef2 	bl	3603e <log_1>
		k_free(uart_tx_buf);
   1e25a:	6830      	ldr	r0, [r6, #0]
   1e25c:	f01a fc32 	bl	38ac4 <k_free>
   1e260:	e7dd      	b.n	1e21e <rsp_send+0x36>
}
   1e262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e264:	20020864 	.word	0x20020864
   1e268:	20023344 	.word	0x20023344
   1e26c:	00039a68 	.word	0x00039a68
   1e270:	00039a50 	.word	0x00039a50
   1e274:	0003a6d4 	.word	0x0003a6d4
   1e278:	20023340 	.word	0x20023340
   1e27c:	0003a6e2 	.word	0x0003a6e2

0001e280 <slm_at_host_init>:

int slm_at_host_init(void)
{
   1e280:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   1e284:	486c      	ldr	r0, [pc, #432]	; (1e438 <slm_at_host_init+0x1b8>)
   1e286:	f014 fe91 	bl	32fac <z_impl_device_get_binding>

	/* Initialize the UART module */
#if defined(CONFIG_SLM_CONNECT_UART_0)
	uart_dev = device_get_binding(DT_LABEL(DT_NODELABEL(uart0)));
#elif defined(CONFIG_SLM_CONNECT_UART_2)
	uart_dev = device_get_binding(DT_LABEL(DT_NODELABEL(uart2)));
   1e28a:	4c6c      	ldr	r4, [pc, #432]	; (1e43c <slm_at_host_init+0x1bc>)
   1e28c:	6020      	str	r0, [r4, #0]
#else
	LOG_ERR("Unsupported UART instance");
	return -EINVAL;
#endif
	if (uart_dev == NULL) {
   1e28e:	b970      	cbnz	r0, 1e2ae <slm_at_host_init+0x2e>
   1e290:	4b6b      	ldr	r3, [pc, #428]	; (1e440 <slm_at_host_init+0x1c0>)
   1e292:	496c      	ldr	r1, [pc, #432]	; (1e444 <slm_at_host_init+0x1c4>)
		LOG_ERR("Cannot bind UART device\n");
   1e294:	486c      	ldr	r0, [pc, #432]	; (1e448 <slm_at_host_init+0x1c8>)
   1e296:	1ac9      	subs	r1, r1, r3
   1e298:	08c9      	lsrs	r1, r1, #3
   1e29a:	0189      	lsls	r1, r1, #6
   1e29c:	f041 0101 	orr.w	r1, r1, #1
   1e2a0:	f017 febe 	bl	36020 <log_0>
		return -EINVAL;
   1e2a4:	f06f 0415 	mvn.w	r4, #21
	k_sem_give(&tx_done);
	rsp_send(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);

	LOG_DBG("at_host init done");
	return err;
}
   1e2a8:	4620      	mov	r0, r4
   1e2aa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	return z_impl_k_uptime_ticks();
   1e2ae:	f01a fa46 	bl	3873e <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1e2b2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1e2b6:	460b      	mov	r3, r1
   1e2b8:	fba0 0106 	umull	r0, r1, r0, r6
   1e2bc:	fb06 1103 	mla	r1, r6, r3, r1
   1e2c0:	0bc7      	lsrs	r7, r0, #15
   1e2c2:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
		err = uart_err_check(uart_dev);
   1e2c6:	6820      	ldr	r0, [r4, #0]
static inline int z_impl_uart_err_check(const struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->err_check != NULL) {
   1e2c8:	6883      	ldr	r3, [r0, #8]
   1e2ca:	6a1b      	ldr	r3, [r3, #32]
   1e2cc:	2b00      	cmp	r3, #0
   1e2ce:	f000 809b 	beq.w	1e408 <slm_at_host_init+0x188>
		return api->err_check(dev);
   1e2d2:	4798      	blx	r3
		if (err) {
   1e2d4:	4605      	mov	r5, r0
   1e2d6:	2800      	cmp	r0, #0
   1e2d8:	f000 8096 	beq.w	1e408 <slm_at_host_init+0x188>
   1e2dc:	f01a fa2f 	bl	3873e <z_impl_k_uptime_ticks>
   1e2e0:	fba0 bc06 	umull	fp, ip, r0, r6
   1e2e4:	fb06 cc01 	mla	ip, r6, r1, ip
   1e2e8:	ea4f 32db 	mov.w	r2, fp, lsr #15
   1e2ec:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
			if (k_uptime_get_32() - start_time > 500) {
   1e2f0:	1bd2      	subs	r2, r2, r7
   1e2f2:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1e2f6:	d9e6      	bls.n	1e2c6 <slm_at_host_init+0x46>
   1e2f8:	4b51      	ldr	r3, [pc, #324]	; (1e440 <slm_at_host_init+0x1c0>)
   1e2fa:	4a52      	ldr	r2, [pc, #328]	; (1e444 <slm_at_host_init+0x1c4>)
				LOG_ERR("UART check failed: %d. "
   1e2fc:	4629      	mov	r1, r5
   1e2fe:	1ad2      	subs	r2, r2, r3
   1e300:	08d2      	lsrs	r2, r2, #3
   1e302:	0192      	lsls	r2, r2, #6
   1e304:	4851      	ldr	r0, [pc, #324]	; (1e44c <slm_at_host_init+0x1cc>)
   1e306:	f042 0201 	orr.w	r2, r2, #1
   1e30a:	f017 fe98 	bl	3603e <log_1>
				return -EIO;
   1e30e:	f06f 0404 	mvn.w	r4, #4
   1e312:	e7c9      	b.n	1e2a8 <slm_at_host_init+0x28>
	device_set_power_state(uart_dev, DEVICE_PM_ACTIVE_STATE,
   1e314:	2101      	movs	r1, #1
   1e316:	6820      	ldr	r0, [r4, #0]
   1e318:	f017 f976 	bl	35608 <device_set_power_state.constprop.0>
	term_mode = CONFIG_SLM_AT_HOST_TERMINATION;
   1e31c:	2203      	movs	r2, #3
   1e31e:	4b4c      	ldr	r3, [pc, #304]	; (1e450 <slm_at_host_init+0x1d0>)
	err = uart_rx_enable(uart_dev, uart_rx_buf[0],
   1e320:	6820      	ldr	r0, [r4, #0]
	term_mode = CONFIG_SLM_AT_HOST_TERMINATION;
   1e322:	701a      	strb	r2, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
   1e324:	6883      	ldr	r3, [r0, #8]
   1e326:	494b      	ldr	r1, [pc, #300]	; (1e454 <slm_at_host_init+0x1d4>)
   1e328:	68dc      	ldr	r4, [r3, #12]
   1e32a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e32e:	2301      	movs	r3, #1
   1e330:	47a0      	blx	r4
	if (err) {
   1e332:	4601      	mov	r1, r0
   1e334:	b140      	cbz	r0, 1e348 <slm_at_host_init+0xc8>
   1e336:	4a43      	ldr	r2, [pc, #268]	; (1e444 <slm_at_host_init+0x1c4>)
   1e338:	4b41      	ldr	r3, [pc, #260]	; (1e440 <slm_at_host_init+0x1c0>)
		LOG_ERR("Cannot enable rx: %d", err);
   1e33a:	4847      	ldr	r0, [pc, #284]	; (1e458 <slm_at_host_init+0x1d8>)
   1e33c:	1ad2      	subs	r2, r2, r3
   1e33e:	08d2      	lsrs	r2, r2, #3
   1e340:	0192      	lsls	r2, r2, #6
   1e342:	f042 0201 	orr.w	r2, r2, #1
   1e346:	e071      	b.n	1e42c <slm_at_host_init+0x1ac>
	err = at_notif_register_handler(NULL, response_handler);
   1e348:	4944      	ldr	r1, [pc, #272]	; (1e45c <slm_at_host_init+0x1dc>)
   1e34a:	f00a f847 	bl	283dc <at_notif_register_handler>
	if (err) {
   1e34e:	4604      	mov	r4, r0
   1e350:	b158      	cbz	r0, 1e36a <slm_at_host_init+0xea>
   1e352:	4b3b      	ldr	r3, [pc, #236]	; (1e440 <slm_at_host_init+0x1c0>)
   1e354:	4a3b      	ldr	r2, [pc, #236]	; (1e444 <slm_at_host_init+0x1c4>)
		LOG_ERR("Can't register handler err=%d", err);
   1e356:	4601      	mov	r1, r0
   1e358:	1ad2      	subs	r2, r2, r3
   1e35a:	08d2      	lsrs	r2, r2, #3
   1e35c:	0192      	lsls	r2, r2, #6
   1e35e:	4840      	ldr	r0, [pc, #256]	; (1e460 <slm_at_host_init+0x1e0>)
   1e360:	f042 0201 	orr.w	r2, r2, #1
   1e364:	f017 fe6b 	bl	3603e <log_1>
		return err;
   1e368:	e79e      	b.n	1e2a8 <slm_at_host_init+0x28>
	err = slm_at_tcp_proxy_init();
   1e36a:	f001 ff23 	bl	201b4 <slm_at_tcp_proxy_init>
	if (err) {
   1e36e:	4601      	mov	r1, r0
   1e370:	b140      	cbz	r0, 1e384 <slm_at_host_init+0x104>
   1e372:	4a34      	ldr	r2, [pc, #208]	; (1e444 <slm_at_host_init+0x1c4>)
   1e374:	4b32      	ldr	r3, [pc, #200]	; (1e440 <slm_at_host_init+0x1c0>)
		LOG_ERR("TCP Server could not be initialized: %d", err);
   1e376:	483b      	ldr	r0, [pc, #236]	; (1e464 <slm_at_host_init+0x1e4>)
   1e378:	1ad2      	subs	r2, r2, r3
   1e37a:	08d2      	lsrs	r2, r2, #3
   1e37c:	0192      	lsls	r2, r2, #6
   1e37e:	f042 0201 	orr.w	r2, r2, #1
   1e382:	e053      	b.n	1e42c <slm_at_host_init+0x1ac>
	err = slm_at_udp_proxy_init();
   1e384:	f002 fece 	bl	21124 <slm_at_udp_proxy_init>
	if (err) {
   1e388:	4601      	mov	r1, r0
   1e38a:	b140      	cbz	r0, 1e39e <slm_at_host_init+0x11e>
   1e38c:	4a2d      	ldr	r2, [pc, #180]	; (1e444 <slm_at_host_init+0x1c4>)
   1e38e:	4b2c      	ldr	r3, [pc, #176]	; (1e440 <slm_at_host_init+0x1c0>)
		LOG_ERR("UDP Server could not be initialized: %d", err);
   1e390:	4835      	ldr	r0, [pc, #212]	; (1e468 <slm_at_host_init+0x1e8>)
   1e392:	1ad2      	subs	r2, r2, r3
   1e394:	08d2      	lsrs	r2, r2, #3
   1e396:	0192      	lsls	r2, r2, #6
   1e398:	f042 0201 	orr.w	r2, r2, #1
   1e39c:	e046      	b.n	1e42c <slm_at_host_init+0x1ac>
	err = slm_at_tcpip_init();
   1e39e:	f000 fda9 	bl	1eef4 <slm_at_tcpip_init>
	if (err) {
   1e3a2:	4601      	mov	r1, r0
   1e3a4:	b140      	cbz	r0, 1e3b8 <slm_at_host_init+0x138>
   1e3a6:	4a27      	ldr	r2, [pc, #156]	; (1e444 <slm_at_host_init+0x1c4>)
   1e3a8:	4b25      	ldr	r3, [pc, #148]	; (1e440 <slm_at_host_init+0x1c0>)
		LOG_ERR("TCPIP could not be initialized: %d", err);
   1e3aa:	4830      	ldr	r0, [pc, #192]	; (1e46c <slm_at_host_init+0x1ec>)
   1e3ac:	1ad2      	subs	r2, r2, r3
   1e3ae:	08d2      	lsrs	r2, r2, #3
   1e3b0:	0192      	lsls	r2, r2, #6
   1e3b2:	f042 0201 	orr.w	r2, r2, #1
   1e3b6:	e039      	b.n	1e42c <slm_at_host_init+0x1ac>
	err = slm_at_icmp_init();
   1e3b8:	f003 fec4 	bl	22144 <slm_at_icmp_init>
	if (err) {
   1e3bc:	4601      	mov	r1, r0
   1e3be:	b140      	cbz	r0, 1e3d2 <slm_at_host_init+0x152>
   1e3c0:	4a20      	ldr	r2, [pc, #128]	; (1e444 <slm_at_host_init+0x1c4>)
   1e3c2:	4b1f      	ldr	r3, [pc, #124]	; (1e440 <slm_at_host_init+0x1c0>)
		LOG_ERR("ICMP could not be initialized: %d", err);
   1e3c4:	482a      	ldr	r0, [pc, #168]	; (1e470 <slm_at_host_init+0x1f0>)
   1e3c6:	1ad2      	subs	r2, r2, r3
   1e3c8:	08d2      	lsrs	r2, r2, #3
   1e3ca:	0192      	lsls	r2, r2, #6
   1e3cc:	f042 0201 	orr.w	r2, r2, #1
   1e3d0:	e02c      	b.n	1e42c <slm_at_host_init+0x1ac>
	err = slm_at_fota_init();
   1e3d2:	f004 f8c9 	bl	22568 <slm_at_fota_init>
	if (err) {
   1e3d6:	4604      	mov	r4, r0
   1e3d8:	b148      	cbz	r0, 1e3ee <slm_at_host_init+0x16e>
   1e3da:	4a1a      	ldr	r2, [pc, #104]	; (1e444 <slm_at_host_init+0x1c4>)
   1e3dc:	4b18      	ldr	r3, [pc, #96]	; (1e440 <slm_at_host_init+0x1c0>)
		LOG_ERR("FOTA could not be initialized: %d", err);
   1e3de:	4601      	mov	r1, r0
   1e3e0:	1ad2      	subs	r2, r2, r3
   1e3e2:	08d2      	lsrs	r2, r2, #3
   1e3e4:	0192      	lsls	r2, r2, #6
   1e3e6:	4823      	ldr	r0, [pc, #140]	; (1e474 <slm_at_host_init+0x1f4>)
   1e3e8:	f042 0201 	orr.w	r2, r2, #1
   1e3ec:	e01e      	b.n	1e42c <slm_at_host_init+0x1ac>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1e3ee:	4b22      	ldr	r3, [pc, #136]	; (1e478 <slm_at_host_init+0x1f8>)
   1e3f0:	4a22      	ldr	r2, [pc, #136]	; (1e47c <slm_at_host_init+0x1fc>)
   1e3f2:	6018      	str	r0, [r3, #0]
   1e3f4:	e9c3 2001 	strd	r2, r0, [r3, #4]
	z_impl_k_sem_give(sem);
   1e3f8:	4821      	ldr	r0, [pc, #132]	; (1e480 <slm_at_host_init+0x200>)
   1e3fa:	f015 fd51 	bl	33ea0 <z_impl_k_sem_give>
	rsp_send(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
   1e3fe:	2107      	movs	r1, #7
   1e400:	4820      	ldr	r0, [pc, #128]	; (1e484 <slm_at_host_init+0x204>)
   1e402:	f7ff fef1 	bl	1e1e8 <rsp_send>
	return err;
   1e406:	e74f      	b.n	1e2a8 <slm_at_host_init+0x28>
	err = uart_callback_set(uart_dev, uart_callback, NULL);
   1e408:	6820      	ldr	r0, [r4, #0]
	return api->callback_set(dev, callback, user_data);
   1e40a:	491f      	ldr	r1, [pc, #124]	; (1e488 <slm_at_host_init+0x208>)
   1e40c:	6883      	ldr	r3, [r0, #8]
   1e40e:	2200      	movs	r2, #0
   1e410:	681b      	ldr	r3, [r3, #0]
   1e412:	4798      	blx	r3
	if (err) {
   1e414:	4601      	mov	r1, r0
   1e416:	2800      	cmp	r0, #0
   1e418:	f43f af7c 	beq.w	1e314 <slm_at_host_init+0x94>
   1e41c:	4a09      	ldr	r2, [pc, #36]	; (1e444 <slm_at_host_init+0x1c4>)
   1e41e:	4b08      	ldr	r3, [pc, #32]	; (1e440 <slm_at_host_init+0x1c0>)
		LOG_ERR("Cannot set callback: %d", err);
   1e420:	481a      	ldr	r0, [pc, #104]	; (1e48c <slm_at_host_init+0x20c>)
   1e422:	1ad2      	subs	r2, r2, r3
   1e424:	08d2      	lsrs	r2, r2, #3
   1e426:	0192      	lsls	r2, r2, #6
   1e428:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("FOTA could not be initialized: %d", err);
   1e42c:	f017 fe07 	bl	3603e <log_1>
		return -EFAULT;
   1e430:	f06f 040d 	mvn.w	r4, #13
   1e434:	e738      	b.n	1e2a8 <slm_at_host_init+0x28>
   1e436:	bf00      	nop
   1e438:	0003a6f5 	.word	0x0003a6f5
   1e43c:	20023340 	.word	0x20023340
   1e440:	00039a50 	.word	0x00039a50
   1e444:	00039a68 	.word	0x00039a68
   1e448:	0003a6fc 	.word	0x0003a6fc
   1e44c:	0003a715 	.word	0x0003a715
   1e450:	2002a755 	.word	0x2002a755
   1e454:	2002a756 	.word	0x2002a756
   1e458:	0003a763 	.word	0x0003a763
   1e45c:	0003562d 	.word	0x0003562d
   1e460:	0003a778 	.word	0x0003a778
   1e464:	0003a796 	.word	0x0003a796
   1e468:	0003a7be 	.word	0x0003a7be
   1e46c:	0003a7e6 	.word	0x0003a7e6
   1e470:	0003a809 	.word	0x0003a809
   1e474:	0003a82b 	.word	0x0003a82b
   1e478:	20023334 	.word	0x20023334
   1e47c:	0001e57d 	.word	0x0001e57d
   1e480:	20020864 	.word	0x20020864
   1e484:	0003a84d 	.word	0x0003a84d
   1e488:	0001dfcd 	.word	0x0001dfcd
   1e48c:	0003a74b 	.word	0x0003a74b

0001e490 <slm_at_host_uninit>:

void slm_at_host_uninit(void)
{
   1e490:	b510      	push	{r4, lr}
	int err;

	err = slm_at_tcp_proxy_uninit();
   1e492:	f002 fd11 	bl	20eb8 <slm_at_tcp_proxy_uninit>
	if (err) {
   1e496:	4601      	mov	r1, r0
   1e498:	b148      	cbz	r0, 1e4ae <slm_at_host_uninit+0x1e>
   1e49a:	4a2f      	ldr	r2, [pc, #188]	; (1e558 <slm_at_host_uninit+0xc8>)
   1e49c:	4b2f      	ldr	r3, [pc, #188]	; (1e55c <slm_at_host_uninit+0xcc>)
		LOG_WRN("TCP Server could not be uninitialized: %d", err);
   1e49e:	4830      	ldr	r0, [pc, #192]	; (1e560 <slm_at_host_uninit+0xd0>)
   1e4a0:	1ad2      	subs	r2, r2, r3
   1e4a2:	08d2      	lsrs	r2, r2, #3
   1e4a4:	0192      	lsls	r2, r2, #6
   1e4a6:	f042 0202 	orr.w	r2, r2, #2
   1e4aa:	f017 fdc8 	bl	3603e <log_1>
	}
	err = slm_at_udp_proxy_uninit();
   1e4ae:	f003 faf9 	bl	21aa4 <slm_at_udp_proxy_uninit>
	if (err) {
   1e4b2:	4601      	mov	r1, r0
   1e4b4:	b148      	cbz	r0, 1e4ca <slm_at_host_uninit+0x3a>
   1e4b6:	4a28      	ldr	r2, [pc, #160]	; (1e558 <slm_at_host_uninit+0xc8>)
   1e4b8:	4b28      	ldr	r3, [pc, #160]	; (1e55c <slm_at_host_uninit+0xcc>)
		LOG_WRN("UDP Server could not be uninitialized: %d", err);
   1e4ba:	482a      	ldr	r0, [pc, #168]	; (1e564 <slm_at_host_uninit+0xd4>)
   1e4bc:	1ad2      	subs	r2, r2, r3
   1e4be:	08d2      	lsrs	r2, r2, #3
   1e4c0:	0192      	lsls	r2, r2, #6
   1e4c2:	f042 0202 	orr.w	r2, r2, #2
   1e4c6:	f017 fdba 	bl	3603e <log_1>
	}
	err = slm_at_tcpip_uninit();
   1e4ca:	f017 f8bc 	bl	35646 <slm_at_tcpip_uninit>
	if (err) {
   1e4ce:	4601      	mov	r1, r0
   1e4d0:	b148      	cbz	r0, 1e4e6 <slm_at_host_uninit+0x56>
   1e4d2:	4a21      	ldr	r2, [pc, #132]	; (1e558 <slm_at_host_uninit+0xc8>)
   1e4d4:	4b21      	ldr	r3, [pc, #132]	; (1e55c <slm_at_host_uninit+0xcc>)
		LOG_WRN("TCPIP could not be uninitialized: %d", err);
   1e4d6:	4824      	ldr	r0, [pc, #144]	; (1e568 <slm_at_host_uninit+0xd8>)
   1e4d8:	1ad2      	subs	r2, r2, r3
   1e4da:	08d2      	lsrs	r2, r2, #3
   1e4dc:	0192      	lsls	r2, r2, #6
   1e4de:	f042 0202 	orr.w	r2, r2, #2
   1e4e2:	f017 fdac 	bl	3603e <log_1>
	err = slm_at_cmng_uninit();
	if (err) {
		LOG_WRN("TLS could not be uninitialized: %d", err);
	}
#endif
	err = slm_at_icmp_uninit();
   1e4e6:	f017 f8e3 	bl	356b0 <slm_at_icmp_uninit>
	if (err) {
   1e4ea:	4601      	mov	r1, r0
   1e4ec:	b148      	cbz	r0, 1e502 <slm_at_host_uninit+0x72>
   1e4ee:	4a1a      	ldr	r2, [pc, #104]	; (1e558 <slm_at_host_uninit+0xc8>)
   1e4f0:	4b1a      	ldr	r3, [pc, #104]	; (1e55c <slm_at_host_uninit+0xcc>)
		LOG_WRN("ICMP could not be uninitialized: %d", err);
   1e4f2:	481e      	ldr	r0, [pc, #120]	; (1e56c <slm_at_host_uninit+0xdc>)
   1e4f4:	1ad2      	subs	r2, r2, r3
   1e4f6:	08d2      	lsrs	r2, r2, #3
   1e4f8:	0192      	lsls	r2, r2, #6
   1e4fa:	f042 0202 	orr.w	r2, r2, #2
   1e4fe:	f017 fd9e 	bl	3603e <log_1>
	}
	err = slm_at_fota_uninit();
   1e502:	f017 f8d7 	bl	356b4 <slm_at_fota_uninit>
	if (err) {
   1e506:	4601      	mov	r1, r0
   1e508:	b148      	cbz	r0, 1e51e <slm_at_host_uninit+0x8e>
   1e50a:	4a13      	ldr	r2, [pc, #76]	; (1e558 <slm_at_host_uninit+0xc8>)
   1e50c:	4b13      	ldr	r3, [pc, #76]	; (1e55c <slm_at_host_uninit+0xcc>)
		LOG_WRN("FOTA could not be uninitialized: %d", err);
   1e50e:	4818      	ldr	r0, [pc, #96]	; (1e570 <slm_at_host_uninit+0xe0>)
   1e510:	1ad2      	subs	r2, r2, r3
   1e512:	08d2      	lsrs	r2, r2, #3
   1e514:	0192      	lsls	r2, r2, #6
   1e516:	f042 0202 	orr.w	r2, r2, #2
   1e51a:	f017 fd90 	bl	3603e <log_1>
	if (err) {
		LOG_WRN("Can't deregister handler: %d", err);
	}
#endif
	/* Power off UART module */
	uart_rx_disable(uart_dev);
   1e51e:	4c15      	ldr	r4, [pc, #84]	; (1e574 <slm_at_host_uninit+0xe4>)
   1e520:	6820      	ldr	r0, [r4, #0]
   1e522:	f017 f86e 	bl	35602 <uart_rx_disable>
	return z_impl_k_sleep(timeout);
   1e526:	2100      	movs	r1, #0
   1e528:	f640 40cd 	movw	r0, #3277	; 0xccd
   1e52c:	f015 fc92 	bl	33e54 <z_impl_k_sleep>
	k_sleep(K_MSEC(100));
	err = device_set_power_state(uart_dev, DEVICE_PM_OFF_STATE,
   1e530:	2105      	movs	r1, #5
   1e532:	6820      	ldr	r0, [r4, #0]
   1e534:	f017 f868 	bl	35608 <device_set_power_state.constprop.0>
				NULL, NULL);
	if (err) {
   1e538:	4601      	mov	r1, r0
   1e53a:	b158      	cbz	r0, 1e554 <slm_at_host_uninit+0xc4>
		LOG_WRN("Can't power off uart: %d", err);
	}

	LOG_DBG("at_host uninit done");
}
   1e53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e540:	4a05      	ldr	r2, [pc, #20]	; (1e558 <slm_at_host_uninit+0xc8>)
   1e542:	4b06      	ldr	r3, [pc, #24]	; (1e55c <slm_at_host_uninit+0xcc>)
		LOG_WRN("Can't power off uart: %d", err);
   1e544:	480c      	ldr	r0, [pc, #48]	; (1e578 <slm_at_host_uninit+0xe8>)
   1e546:	1ad2      	subs	r2, r2, r3
   1e548:	08d2      	lsrs	r2, r2, #3
   1e54a:	0192      	lsls	r2, r2, #6
   1e54c:	f042 0202 	orr.w	r2, r2, #2
   1e550:	f017 bd75 	b.w	3603e <log_1>
}
   1e554:	bd10      	pop	{r4, pc}
   1e556:	bf00      	nop
   1e558:	00039a68 	.word	0x00039a68
   1e55c:	00039a50 	.word	0x00039a50
   1e560:	0003a855 	.word	0x0003a855
   1e564:	0003a87f 	.word	0x0003a87f
   1e568:	0003a8a9 	.word	0x0003a8a9
   1e56c:	0003a8ce 	.word	0x0003a8ce
   1e570:	0003a8f2 	.word	0x0003a8f2
   1e574:	20023340 	.word	0x20023340
   1e578:	0003a916 	.word	0x0003a916

0001e57c <cmd_send>:
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1e57c:	f640 228b 	movw	r2, #2699	; 0xa8b
{
   1e580:	b5f0      	push	{r4, r5, r6, r7, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1e582:	4db0      	ldr	r5, [pc, #704]	; (1e844 <cmd_send+0x2c8>)
   1e584:	4cb0      	ldr	r4, [pc, #704]	; (1e848 <cmd_send+0x2cc>)
   1e586:	682b      	ldr	r3, [r5, #0]
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMVER)) {
   1e588:	4620      	mov	r0, r4
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1e58a:	4293      	cmp	r3, r2
   1e58c:	bf28      	it	cs
   1e58e:	4613      	movcs	r3, r2
   1e590:	2200      	movs	r2, #0
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMVER)) {
   1e592:	49ae      	ldr	r1, [pc, #696]	; (1e84c <cmd_send+0x2d0>)
{
   1e594:	b09f      	sub	sp, #124	; 0x7c
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1e596:	54e2      	strb	r2, [r4, r3]
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMVER)) {
   1e598:	f7ff fcc0 	bl	1df1c <slm_util_cmd_casecmp>
   1e59c:	4607      	mov	r7, r0
   1e59e:	b120      	cbz	r0, 1e5aa <cmd_send+0x2e>
		rsp_send(SLM_VERSION, sizeof(SLM_VERSION) - 1);
   1e5a0:	210f      	movs	r1, #15
   1e5a2:	48ab      	ldr	r0, [pc, #684]	; (1e850 <cmd_send+0x2d4>)
		rsp_send(buf, strlen(buf));
   1e5a4:	f7ff fe20 	bl	1e1e8 <rsp_send>
   1e5a8:	e147      	b.n	1e83a <cmd_send+0x2be>
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMUART)) {
   1e5aa:	4620      	mov	r0, r4
   1e5ac:	49a9      	ldr	r1, [pc, #676]	; (1e854 <cmd_send+0x2d8>)
   1e5ae:	f7ff fcb5 	bl	1df1c <slm_util_cmd_casecmp>
   1e5b2:	4606      	mov	r6, r0
   1e5b4:	2800      	cmp	r0, #0
   1e5b6:	f000 80f1 	beq.w	1e79c <cmd_send+0x220>
	ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
   1e5ba:	4639      	mov	r1, r7
   1e5bc:	4620      	mov	r0, r4
   1e5be:	4aa6      	ldr	r2, [pc, #664]	; (1e858 <cmd_send+0x2dc>)
   1e5c0:	f019 fbdc 	bl	37d7c <at_parser_params_from_str>
	if (ret < 0) {
   1e5c4:	1e06      	subs	r6, r0, #0
   1e5c6:	da0b      	bge.n	1e5e0 <cmd_send+0x64>
		LOG_ERR("Failed to parse AT command %d", ret);
   1e5c8:	4631      	mov	r1, r6
   1e5ca:	4aa4      	ldr	r2, [pc, #656]	; (1e85c <cmd_send+0x2e0>)
   1e5cc:	4ba4      	ldr	r3, [pc, #656]	; (1e860 <cmd_send+0x2e4>)
   1e5ce:	1ad2      	subs	r2, r2, r3
   1e5d0:	08d2      	lsrs	r2, r2, #3
   1e5d2:	0192      	lsls	r2, r2, #6
   1e5d4:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to parse AT command %d", ret);
   1e5d8:	48a2      	ldr	r0, [pc, #648]	; (1e864 <cmd_send+0x2e8>)
   1e5da:	f017 fd30 	bl	3603e <log_1>
		if (err) {
   1e5de:	e037      	b.n	1e650 <cmd_send+0xd4>
	type = at_parser_cmd_type_get(at_cmd);
   1e5e0:	4620      	mov	r0, r4
   1e5e2:	f019 fbce 	bl	37d82 <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1e5e6:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
   1e5e8:	4604      	mov	r4, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1e5ea:	4d9f      	ldr	r5, [pc, #636]	; (1e868 <cmd_send+0x2ec>)
   1e5ec:	d14c      	bne.n	1e688 <cmd_send+0x10c>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1e5ee:	489a      	ldr	r0, [pc, #616]	; (1e858 <cmd_send+0x2dc>)
   1e5f0:	f019 fd0c 	bl	3800c <at_params_valid_count_get>
   1e5f4:	2801      	cmp	r0, #1
   1e5f6:	d90f      	bls.n	1e618 <cmd_send+0x9c>
			ret = at_params_int_get(&at_param_list, 1,
   1e5f8:	4621      	mov	r1, r4
   1e5fa:	4897      	ldr	r0, [pc, #604]	; (1e858 <cmd_send+0x2dc>)
   1e5fc:	aa02      	add	r2, sp, #8
   1e5fe:	f019 fccf 	bl	37fa0 <at_params_int_get>
			if (ret < 0) {
   1e602:	2800      	cmp	r0, #0
   1e604:	da08      	bge.n	1e618 <cmd_send+0x9c>
   1e606:	4995      	ldr	r1, [pc, #596]	; (1e85c <cmd_send+0x2e0>)
   1e608:	4b95      	ldr	r3, [pc, #596]	; (1e860 <cmd_send+0x2e4>)
			LOG_ERR("AT parameter error");
   1e60a:	4898      	ldr	r0, [pc, #608]	; (1e86c <cmd_send+0x2f0>)
   1e60c:	1ac9      	subs	r1, r1, r3
   1e60e:	08c9      	lsrs	r1, r1, #3
   1e610:	0189      	lsls	r1, r1, #6
   1e612:	f041 0101 	orr.w	r1, r1, #1
   1e616:	e019      	b.n	1e64c <cmd_send+0xd0>
		switch (*baudrate) {
   1e618:	9b02      	ldr	r3, [sp, #8]
   1e61a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1e61e:	d058      	beq.n	1e6d2 <cmd_send+0x156>
   1e620:	d81f      	bhi.n	1e662 <cmd_send+0xe6>
   1e622:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e626:	d054      	beq.n	1e6d2 <cmd_send+0x156>
   1e628:	d815      	bhi.n	1e656 <cmd_send+0xda>
   1e62a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e62e:	d050      	beq.n	1e6d2 <cmd_send+0x156>
   1e630:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e634:	d04d      	beq.n	1e6d2 <cmd_send+0x156>
   1e636:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e63a:	d04a      	beq.n	1e6d2 <cmd_send+0x156>
   1e63c:	4987      	ldr	r1, [pc, #540]	; (1e85c <cmd_send+0x2e0>)
   1e63e:	4b88      	ldr	r3, [pc, #544]	; (1e860 <cmd_send+0x2e4>)
			LOG_ERR("Invalid uart baud rate provided.");
   1e640:	488b      	ldr	r0, [pc, #556]	; (1e870 <cmd_send+0x2f4>)
   1e642:	1ac9      	subs	r1, r1, r3
   1e644:	08c9      	lsrs	r1, r1, #3
   1e646:	0189      	lsls	r1, r1, #6
   1e648:	f041 0101 	orr.w	r1, r1, #1
   1e64c:	f017 fce8 	bl	36020 <log_0>
		rsp_send(ERROR_STR, sizeof(ERROR_STR) - 1);
   1e650:	2107      	movs	r1, #7
   1e652:	4888      	ldr	r0, [pc, #544]	; (1e874 <cmd_send+0x2f8>)
   1e654:	e0f3      	b.n	1e83e <cmd_send+0x2c2>
		switch (*baudrate) {
   1e656:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e65a:	d03a      	beq.n	1e6d2 <cmd_send+0x156>
   1e65c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e660:	e7eb      	b.n	1e63a <cmd_send+0xbe>
   1e662:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e666:	d034      	beq.n	1e6d2 <cmd_send+0x156>
   1e668:	d808      	bhi.n	1e67c <cmd_send+0x100>
   1e66a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e66e:	d030      	beq.n	1e6d2 <cmd_send+0x156>
   1e670:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e674:	d02d      	beq.n	1e6d2 <cmd_send+0x156>
   1e676:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e67a:	e7de      	b.n	1e63a <cmd_send+0xbe>
   1e67c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e680:	d027      	beq.n	1e6d2 <cmd_send+0x156>
   1e682:	4a7d      	ldr	r2, [pc, #500]	; (1e878 <cmd_send+0x2fc>)
   1e684:	4293      	cmp	r3, r2
   1e686:	e7d8      	b.n	1e63a <cmd_send+0xbe>
	if (type == AT_CMD_TYPE_READ_COMMAND) {
   1e688:	2802      	cmp	r0, #2
   1e68a:	d161      	bne.n	1e750 <cmd_send+0x1d4>
	err = uart_config_get(uart_dev, &cfg);
   1e68c:	6828      	ldr	r0, [r5, #0]
					 struct uart_config *cfg)
{
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	if (api->config_get != NULL) {
   1e68e:	6883      	ldr	r3, [r0, #8]
   1e690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e692:	2b00      	cmp	r3, #0
   1e694:	d057      	beq.n	1e746 <cmd_send+0x1ca>
		return api->config_get(dev, cfg);
   1e696:	a903      	add	r1, sp, #12
   1e698:	4798      	blx	r3
	if (err) {
   1e69a:	4604      	mov	r4, r0
   1e69c:	2800      	cmp	r0, #0
   1e69e:	d055      	beq.n	1e74c <cmd_send+0x1d0>
   1e6a0:	4a6e      	ldr	r2, [pc, #440]	; (1e85c <cmd_send+0x2e0>)
   1e6a2:	4b6f      	ldr	r3, [pc, #444]	; (1e860 <cmd_send+0x2e4>)
		LOG_ERR("uart_config_get: %d", err);
   1e6a4:	4621      	mov	r1, r4
   1e6a6:	1ad2      	subs	r2, r2, r3
   1e6a8:	08d2      	lsrs	r2, r2, #3
   1e6aa:	0192      	lsls	r2, r2, #6
   1e6ac:	4873      	ldr	r0, [pc, #460]	; (1e87c <cmd_send+0x300>)
   1e6ae:	f042 0201 	orr.w	r2, r2, #1
   1e6b2:	f017 fcc4 	bl	3603e <log_1>
		sprintf(buf, "#SLMUART: %d\r\n", get_uart_baudrate());
   1e6b6:	2100      	movs	r1, #0
   1e6b8:	2220      	movs	r2, #32
   1e6ba:	4b71      	ldr	r3, [pc, #452]	; (1e880 <cmd_send+0x304>)
   1e6bc:	9400      	str	r4, [sp, #0]
   1e6be:	a803      	add	r0, sp, #12
   1e6c0:	f01a fb75 	bl	38dae <__sprintf_chk>
		rsp_send(buf, strlen(buf));
   1e6c4:	a803      	add	r0, sp, #12
   1e6c6:	f7fe fcd3 	bl	1d070 <strlen>
   1e6ca:	4601      	mov	r1, r0
		rsp_send(buf, sizeof(buf));
   1e6cc:	a803      	add	r0, sp, #12
   1e6ce:	f7ff fd8b 	bl	1e1e8 <rsp_send>
			rsp_send(OK_STR, sizeof(OK_STR) - 1);
   1e6d2:	2104      	movs	r1, #4
   1e6d4:	486b      	ldr	r0, [pc, #428]	; (1e884 <cmd_send+0x308>)
   1e6d6:	f7ff fd87 	bl	1e1e8 <rsp_send>
   1e6da:	2100      	movs	r1, #0
   1e6dc:	f240 6067 	movw	r0, #1639	; 0x667
   1e6e0:	f015 fbb8 	bl	33e54 <z_impl_k_sleep>
			set_uart_baudrate(baudrate);
   1e6e4:	9c02      	ldr	r4, [sp, #8]
	err = uart_config_get(uart_dev, &cfg);
   1e6e6:	6828      	ldr	r0, [r5, #0]
	if (api->config_get != NULL) {
   1e6e8:	6883      	ldr	r3, [r0, #8]
   1e6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e6ec:	2b00      	cmp	r3, #0
   1e6ee:	d03c      	beq.n	1e76a <cmd_send+0x1ee>
		return api->config_get(dev, cfg);
   1e6f0:	a903      	add	r1, sp, #12
   1e6f2:	4798      	blx	r3
	if (err != 0) {
   1e6f4:	4601      	mov	r1, r0
   1e6f6:	2800      	cmp	r0, #0
   1e6f8:	d03a      	beq.n	1e770 <cmd_send+0x1f4>
   1e6fa:	4a58      	ldr	r2, [pc, #352]	; (1e85c <cmd_send+0x2e0>)
   1e6fc:	4b58      	ldr	r3, [pc, #352]	; (1e860 <cmd_send+0x2e4>)
		LOG_ERR("uart_config_get: %d", err);
   1e6fe:	485f      	ldr	r0, [pc, #380]	; (1e87c <cmd_send+0x300>)
   1e700:	1ad2      	subs	r2, r2, r3
   1e702:	08d2      	lsrs	r2, r2, #3
   1e704:	0192      	lsls	r2, r2, #6
   1e706:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("uart_configure: %d", err);
   1e70a:	f017 fc98 	bl	3603e <log_1>
	err = uart_rx_enable(uart_dev, uart_rx_buf[0],
   1e70e:	4b56      	ldr	r3, [pc, #344]	; (1e868 <cmd_send+0x2ec>)
   1e710:	6818      	ldr	r0, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
   1e712:	6883      	ldr	r3, [r0, #8]
   1e714:	495c      	ldr	r1, [pc, #368]	; (1e888 <cmd_send+0x30c>)
   1e716:	68dc      	ldr	r4, [r3, #12]
   1e718:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e71c:	2301      	movs	r3, #1
   1e71e:	47a0      	blx	r4
	if (err) {
   1e720:	4601      	mov	r1, r0
   1e722:	2800      	cmp	r0, #0
   1e724:	f000 80f4 	beq.w	1e910 <cmd_send+0x394>
   1e728:	4b4d      	ldr	r3, [pc, #308]	; (1e860 <cmd_send+0x2e4>)
   1e72a:	4a4c      	ldr	r2, [pc, #304]	; (1e85c <cmd_send+0x2e0>)
		LOG_ERR("UART RX failed: %d", err);
   1e72c:	4857      	ldr	r0, [pc, #348]	; (1e88c <cmd_send+0x310>)
   1e72e:	1ad2      	subs	r2, r2, r3
   1e730:	08d2      	lsrs	r2, r2, #3
   1e732:	0192      	lsls	r2, r2, #6
   1e734:	f042 0201 	orr.w	r2, r2, #1
   1e738:	f017 fc81 	bl	3603e <log_1>
		rsp_send(FATAL_STR, sizeof(FATAL_STR) - 1);
   1e73c:	210d      	movs	r1, #13
   1e73e:	4854      	ldr	r0, [pc, #336]	; (1e890 <cmd_send+0x314>)
   1e740:	f7ff fd52 	bl	1e1e8 <rsp_send>
   1e744:	e0e4      	b.n	1e910 <cmd_send+0x394>
	}

	return -ENOTSUP;
   1e746:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e74a:	e7a9      	b.n	1e6a0 <cmd_send+0x124>
	return (int)cfg.baudrate;
   1e74c:	9c03      	ldr	r4, [sp, #12]
   1e74e:	e7b2      	b.n	1e6b6 <cmd_send+0x13a>
	if (type == AT_CMD_TYPE_TEST_COMMAND) {
   1e750:	2803      	cmp	r0, #3
   1e752:	d106      	bne.n	1e762 <cmd_send+0x1e6>
		char buf[] = SLM_UART_BAUDRATE;
   1e754:	494f      	ldr	r1, [pc, #316]	; (1e894 <cmd_send+0x318>)
   1e756:	226b      	movs	r2, #107	; 0x6b
   1e758:	a803      	add	r0, sp, #12
   1e75a:	f01a f9f0 	bl	38b3e <memcpy>
		rsp_send(buf, sizeof(buf));
   1e75e:	216b      	movs	r1, #107	; 0x6b
   1e760:	e7b4      	b.n	1e6cc <cmd_send+0x150>
		if (err != 0) {
   1e762:	2e00      	cmp	r6, #0
   1e764:	f47f af74 	bne.w	1e650 <cmd_send+0xd4>
   1e768:	e7b3      	b.n	1e6d2 <cmd_send+0x156>
   1e76a:	f06f 0185 	mvn.w	r1, #133	; 0x85
   1e76e:	e7c4      	b.n	1e6fa <cmd_send+0x17e>
	err = uart_configure(uart_dev, &cfg);
   1e770:	6828      	ldr	r0, [r5, #0]
	cfg.baudrate = baudrate;
   1e772:	9403      	str	r4, [sp, #12]
	if (api->configure != NULL) {
   1e774:	6883      	ldr	r3, [r0, #8]
   1e776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e778:	b16b      	cbz	r3, 1e796 <cmd_send+0x21a>
		return api->configure(dev, cfg);
   1e77a:	a903      	add	r1, sp, #12
   1e77c:	4798      	blx	r3
	if (err != 0) {
   1e77e:	4601      	mov	r1, r0
   1e780:	2800      	cmp	r0, #0
   1e782:	d0c4      	beq.n	1e70e <cmd_send+0x192>
   1e784:	4a35      	ldr	r2, [pc, #212]	; (1e85c <cmd_send+0x2e0>)
   1e786:	4b36      	ldr	r3, [pc, #216]	; (1e860 <cmd_send+0x2e4>)
		LOG_ERR("uart_configure: %d", err);
   1e788:	4843      	ldr	r0, [pc, #268]	; (1e898 <cmd_send+0x31c>)
   1e78a:	1ad2      	subs	r2, r2, r3
   1e78c:	08d2      	lsrs	r2, r2, #3
   1e78e:	0192      	lsls	r2, r2, #6
   1e790:	f042 0201 	orr.w	r2, r2, #1
   1e794:	e7b9      	b.n	1e70a <cmd_send+0x18e>
	return -ENOTSUP;
   1e796:	f06f 0185 	mvn.w	r1, #133	; 0x85
   1e79a:	e7f3      	b.n	1e784 <cmd_send+0x208>
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_RESET)) {
   1e79c:	4620      	mov	r0, r4
   1e79e:	493f      	ldr	r1, [pc, #252]	; (1e89c <cmd_send+0x320>)
   1e7a0:	f7ff fbbc 	bl	1df1c <slm_util_cmd_casecmp>
   1e7a4:	b180      	cbz	r0, 1e7c8 <cmd_send+0x24c>
		rsp_send(OK_STR, sizeof(OK_STR) - 1);
   1e7a6:	2104      	movs	r1, #4
   1e7a8:	4836      	ldr	r0, [pc, #216]	; (1e884 <cmd_send+0x308>)
   1e7aa:	f7ff fd1d 	bl	1e1e8 <rsp_send>
   1e7ae:	2100      	movs	r1, #0
   1e7b0:	f240 6067 	movw	r0, #1639	; 0x667
   1e7b4:	f015 fb4e 	bl	33e54 <z_impl_k_sleep>
		slm_at_host_uninit();
   1e7b8:	f7ff fe6a 	bl	1e490 <slm_at_host_uninit>
		enter_sleep(false);
   1e7bc:	4630      	mov	r0, r6
   1e7be:	f016 fece 	bl	3555e <enter_sleep>
		sys_reboot(SYS_REBOOT_COLD);
   1e7c2:	2001      	movs	r0, #1
   1e7c4:	f005 ffcc 	bl	24760 <sys_reboot>
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_CLAC)) {
   1e7c8:	4935      	ldr	r1, [pc, #212]	; (1e8a0 <cmd_send+0x324>)
   1e7ca:	481f      	ldr	r0, [pc, #124]	; (1e848 <cmd_send+0x2cc>)
   1e7cc:	f7ff fba6 	bl	1df1c <slm_util_cmd_casecmp>
   1e7d0:	4604      	mov	r4, r0
   1e7d2:	2800      	cmp	r0, #0
   1e7d4:	d06a      	beq.n	1e8ac <cmd_send+0x330>
	rsp_send(AT_CMD_SLMVER, sizeof(AT_CMD_SLMVER) - 1);
   1e7d6:	210a      	movs	r1, #10
   1e7d8:	481c      	ldr	r0, [pc, #112]	; (1e84c <cmd_send+0x2d0>)
   1e7da:	f7ff fd05 	bl	1e1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1e7de:	2102      	movs	r1, #2
   1e7e0:	4830      	ldr	r0, [pc, #192]	; (1e8a4 <cmd_send+0x328>)
   1e7e2:	f7ff fd01 	bl	1e1e8 <rsp_send>
	rsp_send(AT_CMD_SLMUART, sizeof(AT_CMD_SLMUART) - 1);
   1e7e6:	210b      	movs	r1, #11
   1e7e8:	481a      	ldr	r0, [pc, #104]	; (1e854 <cmd_send+0x2d8>)
   1e7ea:	f7ff fcfd 	bl	1e1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1e7ee:	2102      	movs	r1, #2
   1e7f0:	482c      	ldr	r0, [pc, #176]	; (1e8a4 <cmd_send+0x328>)
   1e7f2:	f7ff fcf9 	bl	1e1e8 <rsp_send>
	rsp_send(AT_CMD_SLEEP, sizeof(AT_CMD_SLEEP) - 1);
   1e7f6:	2109      	movs	r1, #9
   1e7f8:	482b      	ldr	r0, [pc, #172]	; (1e8a8 <cmd_send+0x32c>)
   1e7fa:	f7ff fcf5 	bl	1e1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1e7fe:	2102      	movs	r1, #2
   1e800:	4828      	ldr	r0, [pc, #160]	; (1e8a4 <cmd_send+0x328>)
   1e802:	f7ff fcf1 	bl	1e1e8 <rsp_send>
	rsp_send(AT_CMD_RESET, sizeof(AT_CMD_RESET) - 1);
   1e806:	2109      	movs	r1, #9
   1e808:	4824      	ldr	r0, [pc, #144]	; (1e89c <cmd_send+0x320>)
   1e80a:	f7ff fced 	bl	1e1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1e80e:	2102      	movs	r1, #2
   1e810:	4824      	ldr	r0, [pc, #144]	; (1e8a4 <cmd_send+0x328>)
   1e812:	f7ff fce9 	bl	1e1e8 <rsp_send>
	rsp_send(AT_CMD_CLAC, sizeof(AT_CMD_CLAC) - 1);
   1e816:	2108      	movs	r1, #8
   1e818:	4821      	ldr	r0, [pc, #132]	; (1e8a0 <cmd_send+0x324>)
   1e81a:	f7ff fce5 	bl	1e1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1e81e:	2102      	movs	r1, #2
   1e820:	4820      	ldr	r0, [pc, #128]	; (1e8a4 <cmd_send+0x328>)
   1e822:	f7ff fce1 	bl	1e1e8 <rsp_send>
	slm_at_tcp_proxy_clac();
   1e826:	f001 fca3 	bl	20170 <slm_at_tcp_proxy_clac>
	slm_at_udp_proxy_clac();
   1e82a:	f002 fc59 	bl	210e0 <slm_at_udp_proxy_clac>
	slm_at_tcpip_clac();
   1e82e:	f000 fb3f 	bl	1eeb0 <slm_at_tcpip_clac>
	slm_at_icmp_clac();
   1e832:	f003 fc6b 	bl	2210c <slm_at_icmp_clac>
	slm_at_fota_clac();
   1e836:	f003 fe7b 	bl	22530 <slm_at_fota_clac>
		rsp_send(OK_STR, sizeof(OK_STR) - 1);
   1e83a:	2104      	movs	r1, #4
   1e83c:	4811      	ldr	r0, [pc, #68]	; (1e884 <cmd_send+0x308>)
		rsp_send(str, ++chars);
   1e83e:	f7ff fcd3 	bl	1e1e8 <rsp_send>
		break;
   1e842:	e764      	b.n	1e70e <cmd_send+0x192>
   1e844:	2002332c 	.word	0x2002332c
   1e848:	2002923c 	.word	0x2002923c
   1e84c:	0003a92f 	.word	0x0003a92f
   1e850:	0003a93a 	.word	0x0003a93a
   1e854:	0003a94f 	.word	0x0003a94f
   1e858:	20023308 	.word	0x20023308
   1e85c:	00039a68 	.word	0x00039a68
   1e860:	00039a50 	.word	0x00039a50
   1e864:	0003a95b 	.word	0x0003a95b
   1e868:	20023340 	.word	0x20023340
   1e86c:	0003a979 	.word	0x0003a979
   1e870:	0003a98c 	.word	0x0003a98c
   1e874:	0003aa58 	.word	0x0003aa58
   1e878:	000f4240 	.word	0x000f4240
   1e87c:	0003a9ad 	.word	0x0003a9ad
   1e880:	0003a9c1 	.word	0x0003a9c1
   1e884:	0003a94a 	.word	0x0003a94a
   1e888:	2002a756 	.word	0x2002a756
   1e88c:	0003aa3f 	.word	0x0003aa3f
   1e890:	0003aa52 	.word	0x0003aa52
   1e894:	0003aa60 	.word	0x0003aa60
   1e898:	0003a9d0 	.word	0x0003a9d0
   1e89c:	0003a9e3 	.word	0x0003a9e3
   1e8a0:	0003a9ed 	.word	0x0003a9ed
   1e8a4:	0003c9a6 	.word	0x0003c9a6
   1e8a8:	0003a9f6 	.word	0x0003a9f6
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLEEP)) {
   1e8ac:	495f      	ldr	r1, [pc, #380]	; (1ea2c <cmd_send+0x4b0>)
   1e8ae:	4860      	ldr	r0, [pc, #384]	; (1ea30 <cmd_send+0x4b4>)
   1e8b0:	f7ff fb34 	bl	1df1c <slm_util_cmd_casecmp>
   1e8b4:	2800      	cmp	r0, #0
   1e8b6:	d04b      	beq.n	1e950 <cmd_send+0x3d4>
	ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
   1e8b8:	4621      	mov	r1, r4
   1e8ba:	4a5e      	ldr	r2, [pc, #376]	; (1ea34 <cmd_send+0x4b8>)
   1e8bc:	485c      	ldr	r0, [pc, #368]	; (1ea30 <cmd_send+0x4b4>)
   1e8be:	f019 fa5d 	bl	37d7c <at_parser_params_from_str>
	if (ret < 0) {
   1e8c2:	1e05      	subs	r5, r0, #0
   1e8c4:	da08      	bge.n	1e8d8 <cmd_send+0x35c>
   1e8c6:	4a5c      	ldr	r2, [pc, #368]	; (1ea38 <cmd_send+0x4bc>)
   1e8c8:	4b5c      	ldr	r3, [pc, #368]	; (1ea3c <cmd_send+0x4c0>)
		LOG_ERR("Failed to parse AT command %d", ret);
   1e8ca:	4629      	mov	r1, r5
   1e8cc:	1ad2      	subs	r2, r2, r3
   1e8ce:	08d2      	lsrs	r2, r2, #3
   1e8d0:	0192      	lsls	r2, r2, #6
   1e8d2:	f042 0201 	orr.w	r2, r2, #1
   1e8d6:	e67f      	b.n	1e5d8 <cmd_send+0x5c>
	type = at_parser_cmd_type_get(at_cmd);
   1e8d8:	4855      	ldr	r0, [pc, #340]	; (1ea30 <cmd_send+0x4b4>)
   1e8da:	f019 fa52 	bl	37d82 <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1e8de:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
   1e8e0:	4606      	mov	r6, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1e8e2:	d120      	bne.n	1e926 <cmd_send+0x3aa>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1e8e4:	4853      	ldr	r0, [pc, #332]	; (1ea34 <cmd_send+0x4b8>)
		shutdown_mode = SHUTDOWN_MODE_IDLE;
   1e8e6:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1e8ea:	f019 fb8f 	bl	3800c <at_params_valid_count_get>
   1e8ee:	2801      	cmp	r0, #1
   1e8f0:	d907      	bls.n	1e902 <cmd_send+0x386>
			ret = at_params_short_get(&at_param_list, 1,
   1e8f2:	4631      	mov	r1, r6
   1e8f4:	484f      	ldr	r0, [pc, #316]	; (1ea34 <cmd_send+0x4b8>)
   1e8f6:	aa03      	add	r2, sp, #12
   1e8f8:	f019 fb40 	bl	37f7c <at_params_short_get>
			if (ret < 0) {
   1e8fc:	2800      	cmp	r0, #0
   1e8fe:	f6ff ae82 	blt.w	1e606 <cmd_send+0x8a>
		if (shutdown_mode == SHUTDOWN_MODE_IDLE) {
   1e902:	f8bd 400c 	ldrh.w	r4, [sp, #12]
   1e906:	b92c      	cbnz	r4, 1e914 <cmd_send+0x398>
			slm_at_host_uninit();
   1e908:	f7ff fdc2 	bl	1e490 <slm_at_host_uninit>
			enter_idle();
   1e90c:	f7ff f9f0 	bl	1dcf0 <enter_idle>
}
   1e910:	b01f      	add	sp, #124	; 0x7c
   1e912:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (shutdown_mode == SHUTDOWN_MODE_SLEEP) {
   1e914:	2c01      	cmp	r4, #1
   1e916:	f47f ae76 	bne.w	1e606 <cmd_send+0x8a>
			slm_at_host_uninit();
   1e91a:	f7ff fdb9 	bl	1e490 <slm_at_host_uninit>
			enter_sleep(true);
   1e91e:	4620      	mov	r0, r4
   1e920:	f016 fe1d 	bl	3555e <enter_sleep>
		if (err) {
   1e924:	e789      	b.n	1e83a <cmd_send+0x2be>
	if (type == AT_CMD_TYPE_TEST_COMMAND) {
   1e926:	2803      	cmp	r0, #3
   1e928:	d10e      	bne.n	1e948 <cmd_send+0x3cc>
		sprintf(buf, "#XSLEEP: (%d, %d)\r\n", SHUTDOWN_MODE_IDLE,
   1e92a:	2301      	movs	r3, #1
   1e92c:	4621      	mov	r1, r4
   1e92e:	2240      	movs	r2, #64	; 0x40
   1e930:	e9cd 4300 	strd	r4, r3, [sp]
   1e934:	a803      	add	r0, sp, #12
   1e936:	4b42      	ldr	r3, [pc, #264]	; (1ea40 <cmd_send+0x4c4>)
   1e938:	f01a fa39 	bl	38dae <__sprintf_chk>
		rsp_send(buf, strlen(buf));
   1e93c:	a803      	add	r0, sp, #12
   1e93e:	f7fe fb97 	bl	1d070 <strlen>
   1e942:	4601      	mov	r1, r0
   1e944:	a803      	add	r0, sp, #12
   1e946:	e62d      	b.n	1e5a4 <cmd_send+0x28>
		if (err) {
   1e948:	2d00      	cmp	r5, #0
   1e94a:	f43f af76 	beq.w	1e83a <cmd_send+0x2be>
   1e94e:	e67f      	b.n	1e650 <cmd_send+0xd4>
	err = slm_at_tcp_proxy_parse(at_buf, at_buf_len);
   1e950:	8829      	ldrh	r1, [r5, #0]
   1e952:	4837      	ldr	r0, [pc, #220]	; (1ea30 <cmd_send+0x4b4>)
   1e954:	f001 fb74 	bl	20040 <slm_at_tcp_proxy_parse>
	if (err > 0) {
   1e958:	2800      	cmp	r0, #0
   1e95a:	f73f aed8 	bgt.w	1e70e <cmd_send+0x192>
	} else if (err == 0) {
   1e95e:	f43f af6c 	beq.w	1e83a <cmd_send+0x2be>
	} else if (err != -ENOENT) {
   1e962:	3002      	adds	r0, #2
   1e964:	f47f ae74 	bne.w	1e650 <cmd_send+0xd4>
	err = slm_at_udp_proxy_parse(at_buf, at_buf_len);
   1e968:	8829      	ldrh	r1, [r5, #0]
   1e96a:	4831      	ldr	r0, [pc, #196]	; (1ea30 <cmd_send+0x4b4>)
   1e96c:	f002 fb3a 	bl	20fe4 <slm_at_udp_proxy_parse>
	if (err > 0) {
   1e970:	2800      	cmp	r0, #0
   1e972:	f73f aecc 	bgt.w	1e70e <cmd_send+0x192>
	} else if (err == 0) {
   1e976:	f43f af60 	beq.w	1e83a <cmd_send+0x2be>
	} else if (err != -ENOENT) {
   1e97a:	3002      	adds	r0, #2
   1e97c:	f47f ae68 	bne.w	1e650 <cmd_send+0xd4>
	err = slm_at_tcpip_parse(at_buf);
   1e980:	482b      	ldr	r0, [pc, #172]	; (1ea30 <cmd_send+0x4b4>)
   1e982:	f000 fa59 	bl	1ee38 <slm_at_tcpip_parse>
	if (err == 0) {
   1e986:	2800      	cmp	r0, #0
   1e988:	f43f af57 	beq.w	1e83a <cmd_send+0x2be>
	} else if (err != -ENOENT) {
   1e98c:	3002      	adds	r0, #2
   1e98e:	f47f ae5f 	bne.w	1e650 <cmd_send+0xd4>
	err = slm_at_icmp_parse(at_buf);
   1e992:	4827      	ldr	r0, [pc, #156]	; (1ea30 <cmd_send+0x4b4>)
   1e994:	f003 fb8c 	bl	220b0 <slm_at_icmp_parse>
	if (err == 0) {
   1e998:	2800      	cmp	r0, #0
   1e99a:	f43f aeb8 	beq.w	1e70e <cmd_send+0x192>
	} else if (err != -ENOENT) {
   1e99e:	3002      	adds	r0, #2
   1e9a0:	f47f ae56 	bne.w	1e650 <cmd_send+0xd4>
	err = slm_at_fota_parse(at_buf);
   1e9a4:	4822      	ldr	r0, [pc, #136]	; (1ea30 <cmd_send+0x4b4>)
   1e9a6:	f003 fd95 	bl	224d4 <slm_at_fota_parse>
	if (err == 0) {
   1e9aa:	2800      	cmp	r0, #0
   1e9ac:	f43f af45 	beq.w	1e83a <cmd_send+0x2be>
	} else if (err != -ENOENT) {
   1e9b0:	3002      	adds	r0, #2
   1e9b2:	f47f ae4d 	bne.w	1e650 <cmd_send+0xd4>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
   1e9b6:	4923      	ldr	r1, [pc, #140]	; (1ea44 <cmd_send+0x4c8>)
   1e9b8:	f640 228c 	movw	r2, #2700	; 0xa8c
   1e9bc:	481c      	ldr	r0, [pc, #112]	; (1ea30 <cmd_send+0x4b4>)
   1e9be:	ab02      	add	r3, sp, #8
   1e9c0:	f009 fc02 	bl	281c8 <at_cmd_write>
	if (err < 0) {
   1e9c4:	1e01      	subs	r1, r0, #0
   1e9c6:	da0d      	bge.n	1e9e4 <cmd_send+0x468>
   1e9c8:	4b1c      	ldr	r3, [pc, #112]	; (1ea3c <cmd_send+0x4c0>)
   1e9ca:	4a1b      	ldr	r2, [pc, #108]	; (1ea38 <cmd_send+0x4bc>)
		LOG_ERR("AT command error: %d", err);
   1e9cc:	481e      	ldr	r0, [pc, #120]	; (1ea48 <cmd_send+0x4cc>)
   1e9ce:	1ad2      	subs	r2, r2, r3
   1e9d0:	08d2      	lsrs	r2, r2, #3
   1e9d2:	0192      	lsls	r2, r2, #6
   1e9d4:	f042 0201 	orr.w	r2, r2, #1
   1e9d8:	f017 fb31 	bl	3603e <log_1>
		state = AT_CMD_ERROR;
   1e9dc:	2301      	movs	r3, #1
   1e9de:	f88d 3008 	strb.w	r3, [sp, #8]
	switch (state) {
   1e9e2:	e635      	b.n	1e650 <cmd_send+0xd4>
   1e9e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1e9e8:	2b03      	cmp	r3, #3
   1e9ea:	f63f ae90 	bhi.w	1e70e <cmd_send+0x192>
   1e9ee:	a201      	add	r2, pc, #4	; (adr r2, 1e9f4 <cmd_send+0x478>)
   1e9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e9f4:	0001ea05 	.word	0x0001ea05
   1e9f8:	0001e651 	.word	0x0001e651
   1e9fc:	0001ea11 	.word	0x0001ea11
   1ea00:	0001ea25 	.word	0x0001ea25
		rsp_send(buf, strlen(buf));
   1ea04:	480f      	ldr	r0, [pc, #60]	; (1ea44 <cmd_send+0x4c8>)
   1ea06:	f7fe fb33 	bl	1d070 <strlen>
   1ea0a:	4601      	mov	r1, r0
   1ea0c:	480d      	ldr	r0, [pc, #52]	; (1ea44 <cmd_send+0x4c8>)
   1ea0e:	e5c9      	b.n	1e5a4 <cmd_send+0x28>
		chars = sprintf(str, "+CMS: %d\r\n", err);
   1ea10:	4b0e      	ldr	r3, [pc, #56]	; (1ea4c <cmd_send+0x4d0>)
   1ea12:	9100      	str	r1, [sp, #0]
		chars = sprintf(str, "+CME: %d\r\n", err);
   1ea14:	2100      	movs	r1, #0
   1ea16:	2218      	movs	r2, #24
   1ea18:	a803      	add	r0, sp, #12
   1ea1a:	f01a f9c8 	bl	38dae <__sprintf_chk>
		rsp_send(str, ++chars);
   1ea1e:	1c41      	adds	r1, r0, #1
   1ea20:	a803      	add	r0, sp, #12
   1ea22:	e70c      	b.n	1e83e <cmd_send+0x2c2>
		chars = sprintf(str, "+CME: %d\r\n", err);
   1ea24:	4b0a      	ldr	r3, [pc, #40]	; (1ea50 <cmd_send+0x4d4>)
   1ea26:	9100      	str	r1, [sp, #0]
   1ea28:	e7f4      	b.n	1ea14 <cmd_send+0x498>
   1ea2a:	bf00      	nop
   1ea2c:	0003a9f6 	.word	0x0003a9f6
   1ea30:	2002923c 	.word	0x2002923c
   1ea34:	20023308 	.word	0x20023308
   1ea38:	00039a68 	.word	0x00039a68
   1ea3c:	00039a50 	.word	0x00039a50
   1ea40:	0003aa00 	.word	0x0003aa00
   1ea44:	20029cc8 	.word	0x20029cc8
   1ea48:	0003aa14 	.word	0x0003aa14
   1ea4c:	0003aa29 	.word	0x0003aa29
   1ea50:	0003aa34 	.word	0x0003aa34

0001ea54 <handle_at_bind.part.0>:
/**@brief handle AT#XRECVFROM commands
 *  AT#XRECVFROM[=<length>]
 *  AT#XRECVFROM? READ command not supported
 *  AT#XRECVFROM=? TEST command not supported
 */
static int handle_at_recvfrom(enum at_cmd_type cmd_type)
   1ea54:	b508      	push	{r3, lr}
   1ea56:	4906      	ldr	r1, [pc, #24]	; (1ea70 <handle_at_bind.part.0+0x1c>)
   1ea58:	4b06      	ldr	r3, [pc, #24]	; (1ea74 <handle_at_bind.part.0+0x20>)
{
	int err = -EINVAL;
	uint16_t length = NET_IPV4_MTU;

	if (client.sock < 0) {
		LOG_ERR("Socket not opened yet");
   1ea5a:	4807      	ldr	r0, [pc, #28]	; (1ea78 <handle_at_bind.part.0+0x24>)
   1ea5c:	1ac9      	subs	r1, r1, r3
   1ea5e:	08c9      	lsrs	r1, r1, #3
   1ea60:	0189      	lsls	r1, r1, #6
   1ea62:	f041 0101 	orr.w	r1, r1, #1
   1ea66:	f017 fadb 	bl	36020 <log_0>
	default:
		break;
	}

	return err;
}
   1ea6a:	f06f 0015 	mvn.w	r0, #21
   1ea6e:	bd08      	pop	{r3, pc}
   1ea70:	00039b20 	.word	0x00039b20
   1ea74:	00039a50 	.word	0x00039a50
   1ea78:	0003aad3 	.word	0x0003aad3

0001ea7c <handle_at_getaddrinfo>:
 */
static int handle_at_getaddrinfo(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
   1ea7c:	2380      	movs	r3, #128	; 0x80
{
   1ea7e:	b570      	push	{r4, r5, r6, lr}
   1ea80:	b0bc      	sub	sp, #240	; 0xf0
   1ea82:	4605      	mov	r5, r0
	struct addrinfo *result;
	struct addrinfo hints = {
   1ea84:	2250      	movs	r2, #80	; 0x50
   1ea86:	2100      	movs	r1, #0
   1ea88:	a808      	add	r0, sp, #32
	int size = TCPIP_MAX_URL;
   1ea8a:	9302      	str	r3, [sp, #8]
	struct addrinfo hints = {
   1ea8c:	f01a f877 	bl	38b7e <memset>
   1ea90:	2301      	movs	r3, #1
		.ai_family = AF_INET
	};
	struct sockaddr_in *host;
	char ipv4addr[NET_IPV4_ADDR_LEN];

	switch (cmd_type) {
   1ea92:	429d      	cmp	r5, r3
	struct addrinfo hints = {
   1ea94:	930a      	str	r3, [sp, #40]	; 0x28
	switch (cmd_type) {
   1ea96:	d004      	beq.n	1eaa2 <handle_at_getaddrinfo+0x26>
			return err;
		}
		url[size] = '\0';
		if (check_for_ipv4(url, strlen(url))) {
			LOG_ERR("already IPv4 address");
			return -EINVAL;
   1ea98:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
   1ea9c:	4620      	mov	r0, r4
   1ea9e:	b03c      	add	sp, #240	; 0xf0
   1eaa0:	bd70      	pop	{r4, r5, r6, pc}
		if (at_params_valid_count_get(&at_param_list) < 2) {
   1eaa2:	4840      	ldr	r0, [pc, #256]	; (1eba4 <handle_at_getaddrinfo+0x128>)
   1eaa4:	f019 fab2 	bl	3800c <at_params_valid_count_get>
   1eaa8:	2801      	cmp	r0, #1
   1eaaa:	d9f5      	bls.n	1ea98 <handle_at_getaddrinfo+0x1c>
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1eaac:	4629      	mov	r1, r5
   1eaae:	483d      	ldr	r0, [pc, #244]	; (1eba4 <handle_at_getaddrinfo+0x128>)
   1eab0:	ab02      	add	r3, sp, #8
   1eab2:	aa1c      	add	r2, sp, #112	; 0x70
   1eab4:	f019 fa87 	bl	37fc6 <at_params_string_get>
		if (err) {
   1eab8:	4604      	mov	r4, r0
   1eaba:	2800      	cmp	r0, #0
   1eabc:	d1ee      	bne.n	1ea9c <handle_at_getaddrinfo+0x20>
		url[size] = '\0';
   1eabe:	9b02      	ldr	r3, [sp, #8]
   1eac0:	aa3c      	add	r2, sp, #240	; 0xf0
   1eac2:	4413      	add	r3, r2
   1eac4:	f803 0c80 	strb.w	r0, [r3, #-128]
		if (check_for_ipv4(url, strlen(url))) {
   1eac8:	a81c      	add	r0, sp, #112	; 0x70
   1eaca:	f7fe fad1 	bl	1d070 <strlen>
   1eace:	b2c1      	uxtb	r1, r0
   1ead0:	a81c      	add	r0, sp, #112	; 0x70
   1ead2:	f016 fd87 	bl	355e4 <check_for_ipv4>
   1ead6:	4606      	mov	r6, r0
   1ead8:	b150      	cbz	r0, 1eaf0 <handle_at_getaddrinfo+0x74>
   1eada:	4b33      	ldr	r3, [pc, #204]	; (1eba8 <handle_at_getaddrinfo+0x12c>)
   1eadc:	4933      	ldr	r1, [pc, #204]	; (1ebac <handle_at_getaddrinfo+0x130>)
			LOG_ERR("already IPv4 address");
   1eade:	4834      	ldr	r0, [pc, #208]	; (1ebb0 <handle_at_getaddrinfo+0x134>)
   1eae0:	1ac9      	subs	r1, r1, r3
   1eae2:	08c9      	lsrs	r1, r1, #3
   1eae4:	0189      	lsls	r1, r1, #6
   1eae6:	f041 0101 	orr.w	r1, r1, #1
   1eaea:	f017 fa99 	bl	36020 <log_0>
   1eaee:	e7d3      	b.n	1ea98 <handle_at_getaddrinfo+0x1c>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   1eaf0:	4621      	mov	r1, r4
   1eaf2:	ab03      	add	r3, sp, #12
   1eaf4:	aa08      	add	r2, sp, #32
   1eaf6:	a81c      	add	r0, sp, #112	; 0x70
   1eaf8:	f017 fe82 	bl	36800 <zsock_getaddrinfo>
		if (err) {
   1eafc:	4604      	mov	r4, r0
   1eafe:	b1d8      	cbz	r0, 1eb38 <handle_at_getaddrinfo+0xbc>
   1eb00:	4b29      	ldr	r3, [pc, #164]	; (1eba8 <handle_at_getaddrinfo+0x12c>)
   1eb02:	4a2a      	ldr	r2, [pc, #168]	; (1ebac <handle_at_getaddrinfo+0x130>)
			LOG_ERR("getaddrinfo() failed %d", err);
   1eb04:	4601      	mov	r1, r0
   1eb06:	1ad2      	subs	r2, r2, r3
   1eb08:	08d2      	lsrs	r2, r2, #3
   1eb0a:	0192      	lsls	r2, r2, #6
   1eb0c:	4829      	ldr	r0, [pc, #164]	; (1ebb4 <handle_at_getaddrinfo+0x138>)
   1eb0e:	f042 0201 	orr.w	r2, r2, #1
   1eb12:	f017 fa94 	bl	3603e <log_1>
			sprintf(rsp_buf, "#XGETADDRINFO: %d\r\n", -err);
   1eb16:	4263      	negs	r3, r4
   1eb18:	4631      	mov	r1, r6
   1eb1a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1eb1e:	9300      	str	r3, [sp, #0]
   1eb20:	4825      	ldr	r0, [pc, #148]	; (1ebb8 <handle_at_getaddrinfo+0x13c>)
   1eb22:	4b26      	ldr	r3, [pc, #152]	; (1ebbc <handle_at_getaddrinfo+0x140>)
   1eb24:	f01a f943 	bl	38dae <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1eb28:	4823      	ldr	r0, [pc, #140]	; (1ebb8 <handle_at_getaddrinfo+0x13c>)
   1eb2a:	f7fe faa1 	bl	1d070 <strlen>
   1eb2e:	4601      	mov	r1, r0
   1eb30:	4821      	ldr	r0, [pc, #132]	; (1ebb8 <handle_at_getaddrinfo+0x13c>)
   1eb32:	f7ff fb59 	bl	1e1e8 <rsp_send>
			return err;
   1eb36:	e7b1      	b.n	1ea9c <handle_at_getaddrinfo+0x20>
		} else if (result == NULL) {
   1eb38:	9b03      	ldr	r3, [sp, #12]
   1eb3a:	b9bb      	cbnz	r3, 1eb6c <handle_at_getaddrinfo+0xf0>
   1eb3c:	4b1a      	ldr	r3, [pc, #104]	; (1eba8 <handle_at_getaddrinfo+0x12c>)
   1eb3e:	491b      	ldr	r1, [pc, #108]	; (1ebac <handle_at_getaddrinfo+0x130>)
			LOG_ERR("Address not found\n");
   1eb40:	481f      	ldr	r0, [pc, #124]	; (1ebc0 <handle_at_getaddrinfo+0x144>)
   1eb42:	1ac9      	subs	r1, r1, r3
   1eb44:	08c9      	lsrs	r1, r1, #3
   1eb46:	0189      	lsls	r1, r1, #6
   1eb48:	f041 0101 	orr.w	r1, r1, #1
   1eb4c:	f017 fa68 	bl	36020 <log_0>
			sprintf(rsp_buf, "#XGETADDRINFO: not found\r\n");
   1eb50:	491c      	ldr	r1, [pc, #112]	; (1ebc4 <handle_at_getaddrinfo+0x148>)
   1eb52:	4819      	ldr	r0, [pc, #100]	; (1ebb8 <handle_at_getaddrinfo+0x13c>)
   1eb54:	f01a f952 	bl	38dfc <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1eb58:	4817      	ldr	r0, [pc, #92]	; (1ebb8 <handle_at_getaddrinfo+0x13c>)
   1eb5a:	f7fe fa89 	bl	1d070 <strlen>
   1eb5e:	4601      	mov	r1, r0
   1eb60:	4815      	ldr	r0, [pc, #84]	; (1ebb8 <handle_at_getaddrinfo+0x13c>)
   1eb62:	f7ff fb41 	bl	1e1e8 <rsp_send>
			return -ENOENT;
   1eb66:	f06f 0401 	mvn.w	r4, #1
   1eb6a:	e797      	b.n	1ea9c <handle_at_getaddrinfo+0x20>
		inet_ntop(AF_INET, &(host->sin_addr.s_addr),
   1eb6c:	6999      	ldr	r1, [r3, #24]
   1eb6e:	3104      	adds	r1, #4
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   1eb70:	ae04      	add	r6, sp, #16
   1eb72:	4632      	mov	r2, r6
   1eb74:	2310      	movs	r3, #16
   1eb76:	4628      	mov	r0, r5
   1eb78:	f007 f890 	bl	25c9c <z_impl_net_addr_ntop>
		sprintf(rsp_buf, "#XGETADDRINFO: %s\r\n", ipv4addr);
   1eb7c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1eb80:	4621      	mov	r1, r4
   1eb82:	4b11      	ldr	r3, [pc, #68]	; (1ebc8 <handle_at_getaddrinfo+0x14c>)
   1eb84:	9600      	str	r6, [sp, #0]
   1eb86:	480c      	ldr	r0, [pc, #48]	; (1ebb8 <handle_at_getaddrinfo+0x13c>)
   1eb88:	f01a f911 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1eb8c:	480a      	ldr	r0, [pc, #40]	; (1ebb8 <handle_at_getaddrinfo+0x13c>)
   1eb8e:	f7fe fa6f 	bl	1d070 <strlen>
   1eb92:	4601      	mov	r1, r0
   1eb94:	4808      	ldr	r0, [pc, #32]	; (1ebb8 <handle_at_getaddrinfo+0x13c>)
   1eb96:	f7ff fb27 	bl	1e1e8 <rsp_send>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   1eb9a:	9803      	ldr	r0, [sp, #12]
   1eb9c:	f017 fe32 	bl	36804 <zsock_freeaddrinfo>
}
   1eba0:	e77c      	b.n	1ea9c <handle_at_getaddrinfo+0x20>
   1eba2:	bf00      	nop
   1eba4:	20023308 	.word	0x20023308
   1eba8:	00039a50 	.word	0x00039a50
   1ebac:	00039b20 	.word	0x00039b20
   1ebb0:	0003aae9 	.word	0x0003aae9
   1ebb4:	0003aafe 	.word	0x0003aafe
   1ebb8:	200287b0 	.word	0x200287b0
   1ebbc:	0003ab16 	.word	0x0003ab16
   1ebc0:	0003ab7d 	.word	0x0003ab7d
   1ebc4:	0003ab2a 	.word	0x0003ab2a
   1ebc8:	0003ab45 	.word	0x0003ab45

0001ebcc <parse_host_by_ipv4>:
{
   1ebcc:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
   1ebce:	2301      	movs	r3, #1
   1ebd0:	4a07      	ldr	r2, [pc, #28]	; (1ebf0 <parse_host_by_ipv4+0x24>)
	address4->sin_port = htons(port);
   1ebd2:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
   1ebd4:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
   1ebd6:	8051      	strh	r1, [r2, #2]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
   1ebd8:	4601      	mov	r1, r0
   1ebda:	3204      	adds	r2, #4
   1ebdc:	4618      	mov	r0, r3
   1ebde:	f017 fec9 	bl	36974 <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, ip, &address4->sin_addr) == 1) {
   1ebe2:	2801      	cmp	r0, #1
}
   1ebe4:	bf14      	ite	ne
   1ebe6:	f06f 0015 	mvnne.w	r0, #21
   1ebea:	2000      	moveq	r0, #0
   1ebec:	bd08      	pop	{r3, pc}
   1ebee:	bf00      	nop
   1ebf0:	20023360 	.word	0x20023360

0001ebf4 <parse_host_by_name>:
{
   1ebf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ebf6:	4604      	mov	r4, r0
   1ebf8:	4617      	mov	r7, r2
	struct addrinfo hints = {
   1ebfa:	2601      	movs	r6, #1
{
   1ebfc:	b09b      	sub	sp, #108	; 0x6c
	struct addrinfo hints = {
   1ebfe:	2250      	movs	r2, #80	; 0x50
{
   1ec00:	460d      	mov	r5, r1
	struct addrinfo hints = {
   1ec02:	a806      	add	r0, sp, #24
   1ec04:	2100      	movs	r1, #0
   1ec06:	f019 ffba 	bl	38b7e <memset>
	return zsock_getaddrinfo(host, service, hints, res);
   1ec0a:	4620      	mov	r0, r4
   1ec0c:	2100      	movs	r1, #0
   1ec0e:	ab01      	add	r3, sp, #4
   1ec10:	aa06      	add	r2, sp, #24
   1ec12:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1ec16:	f017 fdf3 	bl	36800 <zsock_getaddrinfo>
	if (err) {
   1ec1a:	4604      	mov	r4, r0
   1ec1c:	b160      	cbz	r0, 1ec38 <parse_host_by_name+0x44>
   1ec1e:	4a16      	ldr	r2, [pc, #88]	; (1ec78 <parse_host_by_name+0x84>)
   1ec20:	4b16      	ldr	r3, [pc, #88]	; (1ec7c <parse_host_by_name+0x88>)
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
   1ec22:	4601      	mov	r1, r0
   1ec24:	1ad2      	subs	r2, r2, r3
   1ec26:	08d2      	lsrs	r2, r2, #3
   1ec28:	0192      	lsls	r2, r2, #6
   1ec2a:	4815      	ldr	r0, [pc, #84]	; (1ec80 <parse_host_by_name+0x8c>)
   1ec2c:	4332      	orrs	r2, r6
   1ec2e:	f017 fa06 	bl	3603e <log_1>
}
   1ec32:	4620      	mov	r0, r4
   1ec34:	b01b      	add	sp, #108	; 0x6c
   1ec36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (result == NULL) {
   1ec38:	9b01      	ldr	r3, [sp, #4]
   1ec3a:	b963      	cbnz	r3, 1ec56 <parse_host_by_name+0x62>
   1ec3c:	4b0f      	ldr	r3, [pc, #60]	; (1ec7c <parse_host_by_name+0x88>)
   1ec3e:	490e      	ldr	r1, [pc, #56]	; (1ec78 <parse_host_by_name+0x84>)
		LOG_ERR("ERROR: Address not found\n");
   1ec40:	4810      	ldr	r0, [pc, #64]	; (1ec84 <parse_host_by_name+0x90>)
   1ec42:	1ac9      	subs	r1, r1, r3
   1ec44:	08c9      	lsrs	r1, r1, #3
   1ec46:	0189      	lsls	r1, r1, #6
   1ec48:	f041 0101 	orr.w	r1, r1, #1
   1ec4c:	f017 f9e8 	bl	36020 <log_0>
		return -ENOENT;
   1ec50:	f06f 0401 	mvn.w	r4, #1
   1ec54:	e7ed      	b.n	1ec32 <parse_host_by_name+0x3e>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   1ec56:	699b      	ldr	r3, [r3, #24]
	server4->sin_addr.s_addr =
   1ec58:	490b      	ldr	r1, [pc, #44]	; (1ec88 <parse_host_by_name+0x94>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   1ec5a:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
   1ec5c:	ba6d      	rev16	r5, r5
	server4->sin_addr.s_addr =
   1ec5e:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
   1ec60:	800e      	strh	r6, [r1, #0]
	server4->sin_port = htons(port);
   1ec62:	804d      	strh	r5, [r1, #2]
   1ec64:	2310      	movs	r3, #16
   1ec66:	4630      	mov	r0, r6
   1ec68:	aa02      	add	r2, sp, #8
   1ec6a:	3104      	adds	r1, #4
   1ec6c:	f007 f816 	bl	25c9c <z_impl_net_addr_ntop>
	zsock_freeaddrinfo(ai);
   1ec70:	9801      	ldr	r0, [sp, #4]
   1ec72:	f017 fdc7 	bl	36804 <zsock_freeaddrinfo>
	return 0;
   1ec76:	e7dc      	b.n	1ec32 <parse_host_by_name+0x3e>
   1ec78:	00039b20 	.word	0x00039b20
   1ec7c:	00039a50 	.word	0x00039a50
   1ec80:	0003ab59 	.word	0x0003ab59
   1ec84:	0003ab76 	.word	0x0003ab76
   1ec88:	20023360 	.word	0x20023360

0001ec8c <handle_at_socketopt>:
{
   1ec8c:	b530      	push	{r4, r5, lr}
	switch (cmd_type) {
   1ec8e:	2801      	cmp	r0, #1
{
   1ec90:	4604      	mov	r4, r0
   1ec92:	b087      	sub	sp, #28
	switch (cmd_type) {
   1ec94:	d005      	beq.n	1eca2 <handle_at_socketopt+0x16>
   1ec96:	2803      	cmp	r0, #3
   1ec98:	f000 80a7 	beq.w	1edea <handle_at_socketopt+0x15e>
			return -EINVAL;
   1ec9c:	f06f 0415 	mvn.w	r4, #21
   1eca0:	e069      	b.n	1ed76 <handle_at_socketopt+0xea>
		if (client.sock < 0) {
   1eca2:	4b58      	ldr	r3, [pc, #352]	; (1ee04 <handle_at_socketopt+0x178>)
   1eca4:	681a      	ldr	r2, [r3, #0]
   1eca6:	461d      	mov	r5, r3
   1eca8:	2a00      	cmp	r2, #0
   1ecaa:	da0a      	bge.n	1ecc2 <handle_at_socketopt+0x36>
   1ecac:	4956      	ldr	r1, [pc, #344]	; (1ee08 <handle_at_socketopt+0x17c>)
   1ecae:	4b57      	ldr	r3, [pc, #348]	; (1ee0c <handle_at_socketopt+0x180>)
			LOG_ERR("Socket not opened yet");
   1ecb0:	4857      	ldr	r0, [pc, #348]	; (1ee10 <handle_at_socketopt+0x184>)
   1ecb2:	1ac9      	subs	r1, r1, r3
   1ecb4:	08c9      	lsrs	r1, r1, #3
   1ecb6:	0189      	lsls	r1, r1, #6
   1ecb8:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Invalid role");
   1ecbc:	f017 f9b0 	bl	36020 <log_0>
			return err;
   1ecc0:	e7ec      	b.n	1ec9c <handle_at_socketopt+0x10>
		if (client.role != AT_SOCKET_ROLE_CLIENT) {
   1ecc2:	689b      	ldr	r3, [r3, #8]
   1ecc4:	b143      	cbz	r3, 1ecd8 <handle_at_socketopt+0x4c>
   1ecc6:	4950      	ldr	r1, [pc, #320]	; (1ee08 <handle_at_socketopt+0x17c>)
   1ecc8:	4b50      	ldr	r3, [pc, #320]	; (1ee0c <handle_at_socketopt+0x180>)
			LOG_ERR("Invalid role");
   1ecca:	4852      	ldr	r0, [pc, #328]	; (1ee14 <handle_at_socketopt+0x188>)
   1eccc:	1ac9      	subs	r1, r1, r3
   1ecce:	08c9      	lsrs	r1, r1, #3
   1ecd0:	0189      	lsls	r1, r1, #6
   1ecd2:	f041 0101 	orr.w	r1, r1, #1
   1ecd6:	e7f1      	b.n	1ecbc <handle_at_socketopt+0x30>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1ecd8:	484f      	ldr	r0, [pc, #316]	; (1ee18 <handle_at_socketopt+0x18c>)
   1ecda:	f019 f997 	bl	3800c <at_params_valid_count_get>
   1ecde:	2802      	cmp	r0, #2
   1ece0:	d9dc      	bls.n	1ec9c <handle_at_socketopt+0x10>
		err = at_params_short_get(&at_param_list, 1, &op);
   1ece2:	4621      	mov	r1, r4
   1ece4:	484c      	ldr	r0, [pc, #304]	; (1ee18 <handle_at_socketopt+0x18c>)
   1ece6:	aa02      	add	r2, sp, #8
   1ece8:	f019 f948 	bl	37f7c <at_params_short_get>
		if (err) {
   1ecec:	4604      	mov	r4, r0
   1ecee:	2800      	cmp	r0, #0
   1ecf0:	d141      	bne.n	1ed76 <handle_at_socketopt+0xea>
		err = at_params_short_get(&at_param_list, 2, &name);
   1ecf2:	2102      	movs	r1, #2
   1ecf4:	4848      	ldr	r0, [pc, #288]	; (1ee18 <handle_at_socketopt+0x18c>)
   1ecf6:	f10d 020a 	add.w	r2, sp, #10
   1ecfa:	f019 f93f 	bl	37f7c <at_params_short_get>
		if (err) {
   1ecfe:	4604      	mov	r4, r0
   1ed00:	2800      	cmp	r0, #0
   1ed02:	d138      	bne.n	1ed76 <handle_at_socketopt+0xea>
		if (op == AT_SOCKETOPT_SET) {
   1ed04:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1ed08:	2b01      	cmp	r3, #1
   1ed0a:	d137      	bne.n	1ed7c <handle_at_socketopt+0xf0>
			if (at_params_valid_count_get(&at_param_list) < 4) {
   1ed0c:	4842      	ldr	r0, [pc, #264]	; (1ee18 <handle_at_socketopt+0x18c>)
   1ed0e:	f019 f97d 	bl	3800c <at_params_valid_count_get>
   1ed12:	2803      	cmp	r0, #3
   1ed14:	d9c2      	bls.n	1ec9c <handle_at_socketopt+0x10>
			err = at_params_int_get(&at_param_list, 3, &value);
   1ed16:	2103      	movs	r1, #3
   1ed18:	483f      	ldr	r0, [pc, #252]	; (1ee18 <handle_at_socketopt+0x18c>)
   1ed1a:	aa03      	add	r2, sp, #12
   1ed1c:	f019 f940 	bl	37fa0 <at_params_int_get>
			if (err) {
   1ed20:	4604      	mov	r4, r0
   1ed22:	bb40      	cbnz	r0, 1ed76 <handle_at_socketopt+0xea>
			err = do_socketopt_set(name, value);
   1ed24:	f8bd 200a 	ldrh.w	r2, [sp, #10]
	switch (name) {
   1ed28:	2a04      	cmp	r2, #4
   1ed2a:	d003      	beq.n	1ed34 <handle_at_socketopt+0xa8>
   1ed2c:	2a14      	cmp	r2, #20
   1ed2e:	d006      	beq.n	1ed3e <handle_at_socketopt+0xb2>
   1ed30:	2a02      	cmp	r2, #2
	switch (name) {
   1ed32:	d158      	bne.n	1ede6 <handle_at_socketopt+0x15a>
		sprintf(rsp_buf, "#XSOCKETOPT: ignored\r\n");
   1ed34:	4939      	ldr	r1, [pc, #228]	; (1ee1c <handle_at_socketopt+0x190>)
		sprintf(rsp_buf, "#XSOCKETOPT: not supported\r\n");
   1ed36:	483a      	ldr	r0, [pc, #232]	; (1ee20 <handle_at_socketopt+0x194>)
   1ed38:	f01a f860 	bl	38dfc <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ed3c:	e04b      	b.n	1edd6 <handle_at_socketopt+0x14a>
		struct timeval tmo = { .tv_sec = value };
   1ed3e:	2300      	movs	r3, #0
   1ed40:	9305      	str	r3, [sp, #20]
   1ed42:	9b03      	ldr	r3, [sp, #12]
		ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
   1ed44:	6828      	ldr	r0, [r5, #0]
		struct timeval tmo = { .tv_sec = value };
   1ed46:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1ed48:	2308      	movs	r3, #8
   1ed4a:	2101      	movs	r1, #1
   1ed4c:	9300      	str	r3, [sp, #0]
   1ed4e:	ab04      	add	r3, sp, #16
   1ed50:	f017 fe32 	bl	369b8 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   1ed54:	1e04      	subs	r4, r0, #0
   1ed56:	da0e      	bge.n	1ed76 <handle_at_socketopt+0xea>
   1ed58:	4a2c      	ldr	r2, [pc, #176]	; (1ee0c <handle_at_socketopt+0x180>)
   1ed5a:	4d2b      	ldr	r5, [pc, #172]	; (1ee08 <handle_at_socketopt+0x17c>)
   1ed5c:	1aad      	subs	r5, r5, r2
   1ed5e:	08ed      	lsrs	r5, r5, #3
			LOG_ERR("setsockopt() error: %d", -errno);
   1ed60:	f018 f865 	bl	36e2e <__errno>
   1ed64:	01ad      	lsls	r5, r5, #6
   1ed66:	f045 0501 	orr.w	r5, r5, #1
   1ed6a:	462a      	mov	r2, r5
   1ed6c:	6801      	ldr	r1, [r0, #0]
   1ed6e:	482d      	ldr	r0, [pc, #180]	; (1ee24 <handle_at_socketopt+0x198>)
   1ed70:	4249      	negs	r1, r1
			LOG_ERR("getsockopt() error: %d", -errno);
   1ed72:	f017 f964 	bl	3603e <log_1>
}
   1ed76:	4620      	mov	r0, r4
   1ed78:	b007      	add	sp, #28
   1ed7a:	bd30      	pop	{r4, r5, pc}
		} else if (op == AT_SOCKETOPT_GET) {
   1ed7c:	2b00      	cmp	r3, #0
   1ed7e:	d1fa      	bne.n	1ed76 <handle_at_socketopt+0xea>
			err = do_socketopt_get(name);
   1ed80:	f8bd 300a 	ldrh.w	r3, [sp, #10]
	switch (name) {
   1ed84:	2b04      	cmp	r3, #4
   1ed86:	d0d5      	beq.n	1ed34 <handle_at_socketopt+0xa8>
   1ed88:	2b14      	cmp	r3, #20
   1ed8a:	d001      	beq.n	1ed90 <handle_at_socketopt+0x104>
   1ed8c:	2b02      	cmp	r3, #2
   1ed8e:	e7d0      	b.n	1ed32 <handle_at_socketopt+0xa6>
		socklen_t len = sizeof(struct timeval);
   1ed90:	2308      	movs	r3, #8
		ret = getsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
   1ed92:	6828      	ldr	r0, [r5, #0]
		socklen_t len = sizeof(struct timeval);
   1ed94:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   1ed96:	ab03      	add	r3, sp, #12
   1ed98:	9300      	str	r3, [sp, #0]
   1ed9a:	2214      	movs	r2, #20
   1ed9c:	2101      	movs	r1, #1
   1ed9e:	ab04      	add	r3, sp, #16
   1eda0:	f017 fdef 	bl	36982 <z_impl_zsock_getsockopt>
		if (ret) {
   1eda4:	4604      	mov	r4, r0
   1eda6:	b168      	cbz	r0, 1edc4 <handle_at_socketopt+0x138>
   1eda8:	4a18      	ldr	r2, [pc, #96]	; (1ee0c <handle_at_socketopt+0x180>)
   1edaa:	4d17      	ldr	r5, [pc, #92]	; (1ee08 <handle_at_socketopt+0x17c>)
   1edac:	1aad      	subs	r5, r5, r2
			LOG_ERR("getsockopt() error: %d", -errno);
   1edae:	f018 f83e 	bl	36e2e <__errno>
   1edb2:	08ed      	lsrs	r5, r5, #3
   1edb4:	6801      	ldr	r1, [r0, #0]
   1edb6:	01ad      	lsls	r5, r5, #6
   1edb8:	f045 0501 	orr.w	r5, r5, #1
   1edbc:	462a      	mov	r2, r5
   1edbe:	481a      	ldr	r0, [pc, #104]	; (1ee28 <handle_at_socketopt+0x19c>)
   1edc0:	4249      	negs	r1, r1
   1edc2:	e7d6      	b.n	1ed72 <handle_at_socketopt+0xe6>
			sprintf(rsp_buf, "#XSOCKETOPT: %d sec\r\n",
   1edc4:	9b04      	ldr	r3, [sp, #16]
   1edc6:	4601      	mov	r1, r0
   1edc8:	9300      	str	r3, [sp, #0]
   1edca:	f640 228c 	movw	r2, #2700	; 0xa8c
   1edce:	4b17      	ldr	r3, [pc, #92]	; (1ee2c <handle_at_socketopt+0x1a0>)
   1edd0:	4813      	ldr	r0, [pc, #76]	; (1ee20 <handle_at_socketopt+0x194>)
   1edd2:	f019 ffec 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1edd6:	4812      	ldr	r0, [pc, #72]	; (1ee20 <handle_at_socketopt+0x194>)
   1edd8:	f7fe f94a 	bl	1d070 <strlen>
   1eddc:	4601      	mov	r1, r0
   1edde:	4810      	ldr	r0, [pc, #64]	; (1ee20 <handle_at_socketopt+0x194>)
   1ede0:	f7ff fa02 	bl	1e1e8 <rsp_send>
		break;
   1ede4:	e7c7      	b.n	1ed76 <handle_at_socketopt+0xea>
		sprintf(rsp_buf, "#XSOCKETOPT: not supported\r\n");
   1ede6:	4912      	ldr	r1, [pc, #72]	; (1ee30 <handle_at_socketopt+0x1a4>)
   1ede8:	e7a5      	b.n	1ed36 <handle_at_socketopt+0xaa>
		sprintf(rsp_buf, "#XSOCKETOPT: (%d, %d), <name>, <value>\r\n",
   1edea:	2400      	movs	r4, #0
   1edec:	2301      	movs	r3, #1
   1edee:	f640 228c 	movw	r2, #2700	; 0xa8c
   1edf2:	e9cd 4300 	strd	r4, r3, [sp]
   1edf6:	4621      	mov	r1, r4
   1edf8:	4b0e      	ldr	r3, [pc, #56]	; (1ee34 <handle_at_socketopt+0x1a8>)
   1edfa:	4809      	ldr	r0, [pc, #36]	; (1ee20 <handle_at_socketopt+0x194>)
   1edfc:	f019 ffd7 	bl	38dae <__sprintf_chk>
   1ee00:	e7e9      	b.n	1edd6 <handle_at_socketopt+0x14a>
   1ee02:	bf00      	nop
   1ee04:	20023348 	.word	0x20023348
   1ee08:	00039b20 	.word	0x00039b20
   1ee0c:	00039a50 	.word	0x00039a50
   1ee10:	0003aad3 	.word	0x0003aad3
   1ee14:	0003ab90 	.word	0x0003ab90
   1ee18:	20023308 	.word	0x20023308
   1ee1c:	0003ab9d 	.word	0x0003ab9d
   1ee20:	200287b0 	.word	0x200287b0
   1ee24:	0003abb4 	.word	0x0003abb4
   1ee28:	0003abe8 	.word	0x0003abe8
   1ee2c:	0003abff 	.word	0x0003abff
   1ee30:	0003abcb 	.word	0x0003abcb
   1ee34:	0003ac15 	.word	0x0003ac15

0001ee38 <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const char *at_cmd)
{
   1ee38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee3c:	4e17      	ldr	r6, [pc, #92]	; (1ee9c <slm_at_tcpip_parse+0x64>)
   1ee3e:	4605      	mov	r5, r0
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1ee40:	2400      	movs	r4, #0
   1ee42:	4637      	mov	r7, r6
		if (slm_util_cmd_casecmp(at_cmd, tcpip_at_list[i].string)) {
   1ee44:	4628      	mov	r0, r5
   1ee46:	6871      	ldr	r1, [r6, #4]
   1ee48:	f7ff f868 	bl	1df1c <slm_util_cmd_casecmp>
   1ee4c:	b1f0      	cbz	r0, 1ee8c <slm_at_tcpip_parse+0x54>
			ret = at_parser_params_from_str(at_cmd, NULL,
   1ee4e:	2100      	movs	r1, #0
   1ee50:	4628      	mov	r0, r5
   1ee52:	4a13      	ldr	r2, [pc, #76]	; (1eea0 <slm_at_tcpip_parse+0x68>)
   1ee54:	f018 ff92 	bl	37d7c <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
   1ee58:	4601      	mov	r1, r0
   1ee5a:	b168      	cbz	r0, 1ee78 <slm_at_tcpip_parse+0x40>
   1ee5c:	4b11      	ldr	r3, [pc, #68]	; (1eea4 <slm_at_tcpip_parse+0x6c>)
   1ee5e:	4a12      	ldr	r2, [pc, #72]	; (1eea8 <slm_at_tcpip_parse+0x70>)
				LOG_ERR("Failed to parse AT command %d", ret);
   1ee60:	4812      	ldr	r0, [pc, #72]	; (1eeac <slm_at_tcpip_parse+0x74>)
   1ee62:	1ad2      	subs	r2, r2, r3
   1ee64:	08d2      	lsrs	r2, r2, #3
   1ee66:	0192      	lsls	r2, r2, #6
   1ee68:	f042 0201 	orr.w	r2, r2, #1
   1ee6c:	f017 f8e7 	bl	3603e <log_1>
				return -EINVAL;
   1ee70:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
   1ee74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			type = at_parser_cmd_type_get(at_cmd);
   1ee78:	4628      	mov	r0, r5
   1ee7a:	f018 ff82 	bl	37d82 <at_parser_cmd_type_get>
			ret = tcpip_at_list[i].handler(type);
   1ee7e:	230c      	movs	r3, #12
   1ee80:	fb03 7404 	mla	r4, r3, r4, r7
   1ee84:	68a3      	ldr	r3, [r4, #8]
}
   1ee86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			ret = tcpip_at_list[i].handler(type);
   1ee8a:	4718      	bx	r3
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1ee8c:	3401      	adds	r4, #1
   1ee8e:	2c0b      	cmp	r4, #11
   1ee90:	f106 060c 	add.w	r6, r6, #12
   1ee94:	d1d6      	bne.n	1ee44 <slm_at_tcpip_parse+0xc>
	int ret = -ENOENT;
   1ee96:	f06f 0001 	mvn.w	r0, #1
   1ee9a:	e7eb      	b.n	1ee74 <slm_at_tcpip_parse+0x3c>
   1ee9c:	00039ca8 	.word	0x00039ca8
   1eea0:	20023308 	.word	0x20023308
   1eea4:	00039a50 	.word	0x00039a50
   1eea8:	00039b20 	.word	0x00039b20
   1eeac:	0003a95b 	.word	0x0003a95b

0001eeb0 <slm_at_tcpip_clac>:

/**@brief API to list TCP/IP AT commands
 */
void slm_at_tcpip_clac(void)
{
   1eeb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1eeb2:	2400      	movs	r4, #0
   1eeb4:	4d0c      	ldr	r5, [pc, #48]	; (1eee8 <slm_at_tcpip_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", tcpip_at_list[i].string);
   1eeb6:	4f0d      	ldr	r7, [pc, #52]	; (1eeec <slm_at_tcpip_clac+0x3c>)
   1eeb8:	4e0d      	ldr	r6, [pc, #52]	; (1eef0 <slm_at_tcpip_clac+0x40>)
   1eeba:	686b      	ldr	r3, [r5, #4]
   1eebc:	f640 228c 	movw	r2, #2700	; 0xa8c
   1eec0:	2100      	movs	r1, #0
   1eec2:	9300      	str	r3, [sp, #0]
   1eec4:	4630      	mov	r0, r6
   1eec6:	463b      	mov	r3, r7
   1eec8:	f019 ff71 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1eecc:	4630      	mov	r0, r6
   1eece:	f7fe f8cf 	bl	1d070 <strlen>
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1eed2:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
   1eed4:	4601      	mov	r1, r0
   1eed6:	4630      	mov	r0, r6
   1eed8:	f7ff f986 	bl	1e1e8 <rsp_send>
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1eedc:	2c0b      	cmp	r4, #11
   1eede:	f105 050c 	add.w	r5, r5, #12
   1eee2:	d1ea      	bne.n	1eeba <slm_at_tcpip_clac+0xa>
	}
}
   1eee4:	b003      	add	sp, #12
   1eee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eee8:	00039ca8 	.word	0x00039ca8
   1eeec:	0003ab54 	.word	0x0003ab54
   1eef0:	200287b0 	.word	0x200287b0

0001eef4 <slm_at_tcpip_init>:
 */
int slm_at_tcpip_init(void)
{
	client.sock = INVALID_SOCKET;
	client.sec_tag = INVALID_SEC_TAG;
	client.role = AT_SOCKET_ROLE_CLIENT;
   1eef4:	2000      	movs	r0, #0
	client.sock = INVALID_SOCKET;
   1eef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eefa:	4b04      	ldr	r3, [pc, #16]	; (1ef0c <slm_at_tcpip_init+0x18>)
	client.sec_tag = INVALID_SEC_TAG;
   1eefc:	e9c3 2200 	strd	r2, r2, [r3]
	client.sock_peer = INVALID_SOCKET;
   1ef00:	e9c3 0202 	strd	r0, r2, [r3, #8]
	client.connected = false;
   1ef04:	7518      	strb	r0, [r3, #20]
	client.ip_proto = IPPROTO_IP;
   1ef06:	6118      	str	r0, [r3, #16]
	return 0;
}
   1ef08:	4770      	bx	lr
   1ef0a:	bf00      	nop
   1ef0c:	20023348 	.word	0x20023348

0001ef10 <do_socket_close>:
{
   1ef10:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (client.sock > 0) {
   1ef12:	4d1b      	ldr	r5, [pc, #108]	; (1ef80 <do_socket_close+0x70>)
{
   1ef14:	4606      	mov	r6, r0
	if (client.sock > 0) {
   1ef16:	6828      	ldr	r0, [r5, #0]
   1ef18:	2800      	cmp	r0, #0
   1ef1a:	dd2f      	ble.n	1ef7c <do_socket_close+0x6c>
	return z_impl_zsock_close(sock);
   1ef1c:	f017 fc83 	bl	36826 <z_impl_zsock_close>
		if (ret < 0) {
   1ef20:	1e04      	subs	r4, r0, #0
   1ef22:	da12      	bge.n	1ef4a <do_socket_close+0x3a>
   1ef24:	4a17      	ldr	r2, [pc, #92]	; (1ef84 <do_socket_close+0x74>)
   1ef26:	4c18      	ldr	r4, [pc, #96]	; (1ef88 <do_socket_close+0x78>)
   1ef28:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   1ef2a:	f017 ff80 	bl	36e2e <__errno>
   1ef2e:	08e4      	lsrs	r4, r4, #3
   1ef30:	6801      	ldr	r1, [r0, #0]
   1ef32:	01a4      	lsls	r4, r4, #6
   1ef34:	f044 0402 	orr.w	r4, r4, #2
   1ef38:	4622      	mov	r2, r4
   1ef3a:	4814      	ldr	r0, [pc, #80]	; (1ef8c <do_socket_close+0x7c>)
   1ef3c:	4249      	negs	r1, r1
   1ef3e:	f017 f87e 	bl	3603e <log_1>
			ret = -errno;
   1ef42:	f017 ff74 	bl	36e2e <__errno>
   1ef46:	6804      	ldr	r4, [r0, #0]
   1ef48:	4264      	negs	r4, r4
		if (client.sock_peer > 0) {
   1ef4a:	68e8      	ldr	r0, [r5, #12]
   1ef4c:	2800      	cmp	r0, #0
   1ef4e:	dd01      	ble.n	1ef54 <do_socket_close+0x44>
   1ef50:	f017 fc69 	bl	36826 <z_impl_zsock_close>
		slm_at_tcpip_init();
   1ef54:	f7ff ffce 	bl	1eef4 <slm_at_tcpip_init>
		sprintf(rsp_buf, "#XSOCKET: %d, closed\r\n", error);
   1ef58:	2100      	movs	r1, #0
   1ef5a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ef5e:	4b0c      	ldr	r3, [pc, #48]	; (1ef90 <do_socket_close+0x80>)
   1ef60:	480c      	ldr	r0, [pc, #48]	; (1ef94 <do_socket_close+0x84>)
   1ef62:	9600      	str	r6, [sp, #0]
   1ef64:	f019 ff23 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ef68:	480a      	ldr	r0, [pc, #40]	; (1ef94 <do_socket_close+0x84>)
   1ef6a:	f7fe f881 	bl	1d070 <strlen>
   1ef6e:	4601      	mov	r1, r0
   1ef70:	4808      	ldr	r0, [pc, #32]	; (1ef94 <do_socket_close+0x84>)
   1ef72:	f7ff f939 	bl	1e1e8 <rsp_send>
}
   1ef76:	4620      	mov	r0, r4
   1ef78:	b002      	add	sp, #8
   1ef7a:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1ef7c:	2400      	movs	r4, #0
	return ret;
   1ef7e:	e7fa      	b.n	1ef76 <do_socket_close+0x66>
   1ef80:	20023348 	.word	0x20023348
   1ef84:	00039a50 	.word	0x00039a50
   1ef88:	00039b20 	.word	0x00039b20
   1ef8c:	0003ac3e 	.word	0x0003ac3e
   1ef90:	0003ac51 	.word	0x0003ac51
   1ef94:	200287b0 	.word	0x200287b0

0001ef98 <do_recvfrom>:
{
   1ef98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef9a:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	ret = recvfrom(client.sock, data, length, 0, NULL, NULL);
   1ef9e:	4b4f      	ldr	r3, [pc, #316]	; (1f0dc <do_recvfrom+0x144>)
{
   1efa0:	4602      	mov	r2, r0
   1efa2:	af02      	add	r7, sp, #8
	ret = recvfrom(client.sock, data, length, 0, NULL, NULL);
   1efa4:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1efa6:	2600      	movs	r6, #0
   1efa8:	f107 0108 	add.w	r1, r7, #8
   1efac:	4633      	mov	r3, r6
   1efae:	e9cd 6600 	strd	r6, r6, [sp]
   1efb2:	f017 fcc2 	bl	3693a <z_impl_zsock_recvfrom>
	if (ret < 0) {
   1efb6:	1e04      	subs	r4, r0, #0
   1efb8:	da3a      	bge.n	1f030 <do_recvfrom+0x98>
   1efba:	4a49      	ldr	r2, [pc, #292]	; (1f0e0 <do_recvfrom+0x148>)
   1efbc:	4c49      	ldr	r4, [pc, #292]	; (1f0e4 <do_recvfrom+0x14c>)
   1efbe:	1aa4      	subs	r4, r4, r2
		LOG_ERR("recvfrom() error: %d", -errno);
   1efc0:	f017 ff35 	bl	36e2e <__errno>
   1efc4:	08e4      	lsrs	r4, r4, #3
   1efc6:	6801      	ldr	r1, [r0, #0]
   1efc8:	01a4      	lsls	r4, r4, #6
   1efca:	f044 0401 	orr.w	r4, r4, #1
   1efce:	4622      	mov	r2, r4
   1efd0:	4845      	ldr	r0, [pc, #276]	; (1f0e8 <do_recvfrom+0x150>)
   1efd2:	4249      	negs	r1, r1
   1efd4:	f017 f833 	bl	3603e <log_1>
		if (errno != EAGAIN && errno != ETIMEDOUT) {
   1efd8:	f017 ff29 	bl	36e2e <__errno>
   1efdc:	6803      	ldr	r3, [r0, #0]
   1efde:	2b0b      	cmp	r3, #11
   1efe0:	d012      	beq.n	1f008 <do_recvfrom+0x70>
   1efe2:	f017 ff24 	bl	36e2e <__errno>
   1efe6:	6803      	ldr	r3, [r0, #0]
   1efe8:	2b74      	cmp	r3, #116	; 0x74
   1efea:	d00d      	beq.n	1f008 <do_recvfrom+0x70>
			do_socket_close(-errno);
   1efec:	f017 ff1f 	bl	36e2e <__errno>
   1eff0:	6800      	ldr	r0, [r0, #0]
   1eff2:	4240      	negs	r0, r0
   1eff4:	f7ff ff8c 	bl	1ef10 <do_socket_close>
		return -errno;
   1eff8:	f017 ff19 	bl	36e2e <__errno>
   1effc:	6800      	ldr	r0, [r0, #0]
   1effe:	4240      	negs	r0, r0
}
   1f000:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   1f004:	46bd      	mov	sp, r7
   1f006:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1f008:	f017 ff11 	bl	36e2e <__errno>
   1f00c:	6803      	ldr	r3, [r0, #0]
   1f00e:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f012:	425b      	negs	r3, r3
   1f014:	2100      	movs	r1, #0
   1f016:	9300      	str	r3, [sp, #0]
   1f018:	4834      	ldr	r0, [pc, #208]	; (1f0ec <do_recvfrom+0x154>)
   1f01a:	4b35      	ldr	r3, [pc, #212]	; (1f0f0 <do_recvfrom+0x158>)
   1f01c:	f019 fec7 	bl	38dae <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1f020:	4832      	ldr	r0, [pc, #200]	; (1f0ec <do_recvfrom+0x154>)
   1f022:	f7fe f825 	bl	1d070 <strlen>
   1f026:	4601      	mov	r1, r0
   1f028:	4830      	ldr	r0, [pc, #192]	; (1f0ec <do_recvfrom+0x154>)
   1f02a:	f7ff f8dd 	bl	1e1e8 <rsp_send>
   1f02e:	e7e3      	b.n	1eff8 <do_recvfrom+0x60>
	if (slm_util_hex_check(data, ret)) {
   1f030:	b2a1      	uxth	r1, r4
   1f032:	f107 0008 	add.w	r0, r7, #8
   1f036:	6079      	str	r1, [r7, #4]
   1f038:	f016 fa9d 	bl	35576 <slm_util_hex_check>
   1f03c:	4605      	mov	r5, r0
   1f03e:	2800      	cmp	r0, #0
   1f040:	d033      	beq.n	1f0aa <do_recvfrom+0x112>
		char data_hex[ret * 2];
   1f042:	0063      	lsls	r3, r4, #1
   1f044:	1dda      	adds	r2, r3, #7
   1f046:	f022 0207 	bic.w	r2, r2, #7
	if (slm_util_hex_check(data, ret)) {
   1f04a:	466d      	mov	r5, sp
		char data_hex[ret * 2];
   1f04c:	ebad 0d02 	sub.w	sp, sp, r2
   1f050:	ac02      	add	r4, sp, #8
		ret = slm_util_htoa(data, ret, data_hex, size);
   1f052:	6879      	ldr	r1, [r7, #4]
   1f054:	4622      	mov	r2, r4
   1f056:	b29b      	uxth	r3, r3
   1f058:	f107 0008 	add.w	r0, r7, #8
   1f05c:	f7fe ff94 	bl	1df88 <slm_util_htoa>
		if (ret > 0) {
   1f060:	1e01      	subs	r1, r0, #0
   1f062:	dd17      	ble.n	1f094 <do_recvfrom+0xfc>
			rsp_send(data_hex, ret);
   1f064:	4620      	mov	r0, r4
   1f066:	6079      	str	r1, [r7, #4]
   1f068:	f7ff f8be 	bl	1e1e8 <rsp_send>
			sprintf(rsp_buf, "\r\n#XRECVFROM: %d, %d\r\n",
   1f06c:	6879      	ldr	r1, [r7, #4]
   1f06e:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f072:	e9cd 6100 	strd	r6, r1, [sp]
   1f076:	4b1f      	ldr	r3, [pc, #124]	; (1f0f4 <do_recvfrom+0x15c>)
   1f078:	4631      	mov	r1, r6
   1f07a:	481c      	ldr	r0, [pc, #112]	; (1f0ec <do_recvfrom+0x154>)
   1f07c:	f019 fe97 	bl	38dae <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1f080:	481a      	ldr	r0, [pc, #104]	; (1f0ec <do_recvfrom+0x154>)
   1f082:	f7fd fff5 	bl	1d070 <strlen>
   1f086:	4601      	mov	r1, r0
   1f088:	4818      	ldr	r0, [pc, #96]	; (1f0ec <do_recvfrom+0x154>)
   1f08a:	f7ff f8ad 	bl	1e1e8 <rsp_send>
	return 0;
   1f08e:	2000      	movs	r0, #0
   1f090:	46ad      	mov	sp, r5
   1f092:	e7b5      	b.n	1f000 <do_recvfrom+0x68>
   1f094:	4b12      	ldr	r3, [pc, #72]	; (1f0e0 <do_recvfrom+0x148>)
   1f096:	4a13      	ldr	r2, [pc, #76]	; (1f0e4 <do_recvfrom+0x14c>)
			LOG_ERR("hex convert error: %d", ret);
   1f098:	4817      	ldr	r0, [pc, #92]	; (1f0f8 <do_recvfrom+0x160>)
   1f09a:	1ad2      	subs	r2, r2, r3
   1f09c:	08d2      	lsrs	r2, r2, #3
   1f09e:	0192      	lsls	r2, r2, #6
   1f0a0:	f042 0201 	orr.w	r2, r2, #1
   1f0a4:	f016 ffcb 	bl	3603e <log_1>
   1f0a8:	e7f1      	b.n	1f08e <do_recvfrom+0xf6>
		rsp_send(data, ret);
   1f0aa:	4621      	mov	r1, r4
   1f0ac:	f107 0008 	add.w	r0, r7, #8
   1f0b0:	f7ff f89a 	bl	1e1e8 <rsp_send>
		sprintf(rsp_buf, "\r\n#XRECVFROM: %d, %d\r\n",
   1f0b4:	2301      	movs	r3, #1
   1f0b6:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f0ba:	4629      	mov	r1, r5
   1f0bc:	9300      	str	r3, [sp, #0]
   1f0be:	480b      	ldr	r0, [pc, #44]	; (1f0ec <do_recvfrom+0x154>)
   1f0c0:	4b0c      	ldr	r3, [pc, #48]	; (1f0f4 <do_recvfrom+0x15c>)
   1f0c2:	9401      	str	r4, [sp, #4]
   1f0c4:	f019 fe73 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1f0c8:	4808      	ldr	r0, [pc, #32]	; (1f0ec <do_recvfrom+0x154>)
   1f0ca:	f7fd ffd1 	bl	1d070 <strlen>
   1f0ce:	4601      	mov	r1, r0
   1f0d0:	4806      	ldr	r0, [pc, #24]	; (1f0ec <do_recvfrom+0x154>)
   1f0d2:	f7ff f889 	bl	1e1e8 <rsp_send>
	return 0;
   1f0d6:	4628      	mov	r0, r5
   1f0d8:	e792      	b.n	1f000 <do_recvfrom+0x68>
   1f0da:	bf00      	nop
   1f0dc:	20023348 	.word	0x20023348
   1f0e0:	00039a50 	.word	0x00039a50
   1f0e4:	00039b20 	.word	0x00039b20
   1f0e8:	0003ac68 	.word	0x0003ac68
   1f0ec:	200287b0 	.word	0x200287b0
   1f0f0:	0003ac7d 	.word	0x0003ac7d
   1f0f4:	0003ac8c 	.word	0x0003ac8c
   1f0f8:	0003aca3 	.word	0x0003aca3

0001f0fc <handle_at_recvfrom>:
	uint16_t length = NET_IPV4_MTU;
   1f0fc:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1f100:	b513      	push	{r0, r1, r4, lr}
	uint16_t length = NET_IPV4_MTU;
   1f102:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (client.sock < 0) {
   1f106:	4b18      	ldr	r3, [pc, #96]	; (1f168 <handle_at_recvfrom+0x6c>)
{
   1f108:	4604      	mov	r4, r0
	if (client.sock < 0) {
   1f10a:	681a      	ldr	r2, [r3, #0]
   1f10c:	2a00      	cmp	r2, #0
   1f10e:	da03      	bge.n	1f118 <handle_at_recvfrom+0x1c>
   1f110:	f7ff fca0 	bl	1ea54 <handle_at_bind.part.0>
}
   1f114:	b002      	add	sp, #8
   1f116:	bd10      	pop	{r4, pc}
	if (client.ip_proto != IPPROTO_UDP &&
   1f118:	691b      	ldr	r3, [r3, #16]
   1f11a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1f11e:	2b11      	cmp	r3, #17
   1f120:	d00c      	beq.n	1f13c <handle_at_recvfrom+0x40>
   1f122:	4912      	ldr	r1, [pc, #72]	; (1f16c <handle_at_recvfrom+0x70>)
   1f124:	4b12      	ldr	r3, [pc, #72]	; (1f170 <handle_at_recvfrom+0x74>)
		LOG_ERR("Invalid protocol");
   1f126:	4813      	ldr	r0, [pc, #76]	; (1f174 <handle_at_recvfrom+0x78>)
   1f128:	1ac9      	subs	r1, r1, r3
   1f12a:	08c9      	lsrs	r1, r1, #3
   1f12c:	0189      	lsls	r1, r1, #6
   1f12e:	f041 0101 	orr.w	r1, r1, #1
   1f132:	f016 ff75 	bl	36020 <log_0>
	int err = -EINVAL;
   1f136:	f06f 0015 	mvn.w	r0, #21
   1f13a:	e7eb      	b.n	1f114 <handle_at_recvfrom+0x18>
	switch (cmd_type) {
   1f13c:	2801      	cmp	r0, #1
   1f13e:	d1fa      	bne.n	1f136 <handle_at_recvfrom+0x3a>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1f140:	480d      	ldr	r0, [pc, #52]	; (1f178 <handle_at_recvfrom+0x7c>)
   1f142:	f018 ff63 	bl	3800c <at_params_valid_count_get>
   1f146:	2801      	cmp	r0, #1
   1f148:	d804      	bhi.n	1f154 <handle_at_recvfrom+0x58>
		err = do_recvfrom(length);
   1f14a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1f14e:	f7ff ff23 	bl	1ef98 <do_recvfrom>
		break;
   1f152:	e7df      	b.n	1f114 <handle_at_recvfrom+0x18>
			err = at_params_short_get(&at_param_list, 1, &length);
   1f154:	4621      	mov	r1, r4
   1f156:	4808      	ldr	r0, [pc, #32]	; (1f178 <handle_at_recvfrom+0x7c>)
   1f158:	f10d 0206 	add.w	r2, sp, #6
   1f15c:	f018 ff0e 	bl	37f7c <at_params_short_get>
			if (err) {
   1f160:	2800      	cmp	r0, #0
   1f162:	d0f2      	beq.n	1f14a <handle_at_recvfrom+0x4e>
   1f164:	e7d6      	b.n	1f114 <handle_at_recvfrom+0x18>
   1f166:	bf00      	nop
   1f168:	20023348 	.word	0x20023348
   1f16c:	00039b20 	.word	0x00039b20
   1f170:	00039a50 	.word	0x00039a50
   1f174:	0003acb9 	.word	0x0003acb9
   1f178:	20023308 	.word	0x20023308

0001f17c <do_sendto>:
{
   1f17c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f180:	4604      	mov	r4, r0
   1f182:	460d      	mov	r5, r1
   1f184:	4617      	mov	r7, r2
   1f186:	461e      	mov	r6, r3
	if (check_for_ipv4(url, strlen(url))) {
   1f188:	f7fd ff72 	bl	1d070 <strlen>
   1f18c:	b2c1      	uxtb	r1, r0
   1f18e:	4620      	mov	r0, r4
   1f190:	f016 fa28 	bl	355e4 <check_for_ipv4>
   1f194:	b1d0      	cbz	r0, 1f1cc <do_sendto+0x50>
		ret = parse_host_by_ipv4(url, port);
   1f196:	4629      	mov	r1, r5
   1f198:	4620      	mov	r0, r4
   1f19a:	f7ff fd17 	bl	1ebcc <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
   1f19e:	4604      	mov	r4, r0
	if (ret) {
   1f1a0:	b160      	cbz	r0, 1f1bc <do_sendto+0x40>
   1f1a2:	4a3a      	ldr	r2, [pc, #232]	; (1f28c <do_sendto+0x110>)
   1f1a4:	493a      	ldr	r1, [pc, #232]	; (1f290 <do_sendto+0x114>)
   1f1a6:	1a89      	subs	r1, r1, r2
   1f1a8:	08c9      	lsrs	r1, r1, #3
		LOG_ERR("Parse failed: %d", ret);
   1f1aa:	0189      	lsls	r1, r1, #6
   1f1ac:	f041 0201 	orr.w	r2, r1, #1
   1f1b0:	4601      	mov	r1, r0
   1f1b2:	4838      	ldr	r0, [pc, #224]	; (1f294 <do_sendto+0x118>)
   1f1b4:	f016 ff43 	bl	3603e <log_1>
	if (ret < 0) {
   1f1b8:	2c00      	cmp	r4, #0
   1f1ba:	db63      	blt.n	1f284 <do_sendto+0x108>
{
   1f1bc:	2500      	movs	r5, #0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1f1be:	f04f 0908 	mov.w	r9, #8
		ret = sendto(client.sock, data + offset,
   1f1c2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1f2a8 <do_sendto+0x12c>
   1f1c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1f2ac <do_sendto+0x130>
   1f1ca:	e01a      	b.n	1f202 <do_sendto+0x86>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
   1f1cc:	2202      	movs	r2, #2
   1f1ce:	4629      	mov	r1, r5
   1f1d0:	4620      	mov	r0, r4
   1f1d2:	f7ff fd0f 	bl	1ebf4 <parse_host_by_name>
   1f1d6:	e7e2      	b.n	1f19e <do_sendto+0x22>
				sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1f1d8:	f017 fe29 	bl	36e2e <__errno>
   1f1dc:	6803      	ldr	r3, [r0, #0]
   1f1de:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f1e2:	425b      	negs	r3, r3
   1f1e4:	2100      	movs	r1, #0
   1f1e6:	9300      	str	r3, [sp, #0]
   1f1e8:	482b      	ldr	r0, [pc, #172]	; (1f298 <do_sendto+0x11c>)
   1f1ea:	4b2c      	ldr	r3, [pc, #176]	; (1f29c <do_sendto+0x120>)
   1f1ec:	f019 fddf 	bl	38dae <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1f1f0:	4829      	ldr	r0, [pc, #164]	; (1f298 <do_sendto+0x11c>)
   1f1f2:	f7fd ff3d 	bl	1d070 <strlen>
   1f1f6:	4601      	mov	r1, r0
   1f1f8:	4827      	ldr	r0, [pc, #156]	; (1f298 <do_sendto+0x11c>)
   1f1fa:	f7fe fff5 	bl	1e1e8 <rsp_send>
   1f1fe:	e02c      	b.n	1f25a <do_sendto+0xde>
		offset += ret;
   1f200:	4425      	add	r5, r4
	while (offset < datalen) {
   1f202:	42ae      	cmp	r6, r5
   1f204:	d92d      	bls.n	1f262 <do_sendto+0xe6>
		ret = sendto(client.sock, data + offset,
   1f206:	f8d8 0000 	ldr.w	r0, [r8]
   1f20a:	2300      	movs	r3, #0
   1f20c:	e9cd a900 	strd	sl, r9, [sp]
   1f210:	1b72      	subs	r2, r6, r5
   1f212:	1979      	adds	r1, r7, r5
   1f214:	f017 fb74 	bl	36900 <z_impl_zsock_sendto>
		if (ret <= 0) {
   1f218:	1e04      	subs	r4, r0, #0
   1f21a:	dcf1      	bgt.n	1f200 <do_sendto+0x84>
   1f21c:	4a1b      	ldr	r2, [pc, #108]	; (1f28c <do_sendto+0x110>)
   1f21e:	4c1c      	ldr	r4, [pc, #112]	; (1f290 <do_sendto+0x114>)
   1f220:	1aa4      	subs	r4, r4, r2
			LOG_ERR("sendto() failed: %d", -errno);
   1f222:	f017 fe04 	bl	36e2e <__errno>
   1f226:	08e4      	lsrs	r4, r4, #3
   1f228:	6801      	ldr	r1, [r0, #0]
   1f22a:	01a4      	lsls	r4, r4, #6
   1f22c:	f044 0401 	orr.w	r4, r4, #1
   1f230:	4622      	mov	r2, r4
   1f232:	481b      	ldr	r0, [pc, #108]	; (1f2a0 <do_sendto+0x124>)
   1f234:	4249      	negs	r1, r1
   1f236:	f016 ff02 	bl	3603e <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   1f23a:	f017 fdf8 	bl	36e2e <__errno>
   1f23e:	6803      	ldr	r3, [r0, #0]
   1f240:	2b0b      	cmp	r3, #11
   1f242:	d0c9      	beq.n	1f1d8 <do_sendto+0x5c>
   1f244:	f017 fdf3 	bl	36e2e <__errno>
   1f248:	6803      	ldr	r3, [r0, #0]
   1f24a:	2b74      	cmp	r3, #116	; 0x74
   1f24c:	d0c4      	beq.n	1f1d8 <do_sendto+0x5c>
				do_socket_close(-errno);
   1f24e:	f017 fdee 	bl	36e2e <__errno>
   1f252:	6800      	ldr	r0, [r0, #0]
   1f254:	4240      	negs	r0, r0
   1f256:	f7ff fe5b 	bl	1ef10 <do_socket_close>
			ret = -errno;
   1f25a:	f017 fde8 	bl	36e2e <__errno>
   1f25e:	6804      	ldr	r4, [r0, #0]
   1f260:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XSENDTO: %d\r\n", offset);
   1f262:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f266:	2100      	movs	r1, #0
   1f268:	4b0e      	ldr	r3, [pc, #56]	; (1f2a4 <do_sendto+0x128>)
   1f26a:	480b      	ldr	r0, [pc, #44]	; (1f298 <do_sendto+0x11c>)
   1f26c:	9500      	str	r5, [sp, #0]
   1f26e:	f019 fd9e 	bl	38dae <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1f272:	4809      	ldr	r0, [pc, #36]	; (1f298 <do_sendto+0x11c>)
   1f274:	f7fd fefc 	bl	1d070 <strlen>
   1f278:	4601      	mov	r1, r0
   1f27a:	4807      	ldr	r0, [pc, #28]	; (1f298 <do_sendto+0x11c>)
   1f27c:	f7fe ffb4 	bl	1e1e8 <rsp_send>
	if (ret >= 0) {
   1f280:	ea04 74e4 	and.w	r4, r4, r4, asr #31
}
   1f284:	4620      	mov	r0, r4
   1f286:	b002      	add	sp, #8
   1f288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f28c:	00039a50 	.word	0x00039a50
   1f290:	00039b20 	.word	0x00039b20
   1f294:	0003acca 	.word	0x0003acca
   1f298:	200287b0 	.word	0x200287b0
   1f29c:	0003ac7d 	.word	0x0003ac7d
   1f2a0:	0003acdb 	.word	0x0003acdb
   1f2a4:	0003acef 	.word	0x0003acef
   1f2a8:	20023348 	.word	0x20023348
   1f2ac:	20023360 	.word	0x20023360

0001f2b0 <handle_at_sendto>:
{
   1f2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f2b2:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
	if (client.sock < 0) {
   1f2b6:	4b3c      	ldr	r3, [pc, #240]	; (1f3a8 <handle_at_sendto+0xf8>)
{
   1f2b8:	4605      	mov	r5, r0
	if (client.sock < 0) {
   1f2ba:	681a      	ldr	r2, [r3, #0]
{
   1f2bc:	af00      	add	r7, sp, #0
	if (client.sock < 0) {
   1f2be:	2a00      	cmp	r2, #0
   1f2c0:	da0f      	bge.n	1f2e2 <handle_at_sendto+0x32>
   1f2c2:	493a      	ldr	r1, [pc, #232]	; (1f3ac <handle_at_sendto+0xfc>)
   1f2c4:	4b3a      	ldr	r3, [pc, #232]	; (1f3b0 <handle_at_sendto+0x100>)
		LOG_ERR("Socket not opened yet");
   1f2c6:	483b      	ldr	r0, [pc, #236]	; (1f3b4 <handle_at_sendto+0x104>)
   1f2c8:	1ac9      	subs	r1, r1, r3
   1f2ca:	08c9      	lsrs	r1, r1, #3
   1f2cc:	0189      	lsls	r1, r1, #6
   1f2ce:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid protocol");
   1f2d2:	f016 fea5 	bl	36020 <log_0>
	int err = -EINVAL;
   1f2d6:	f06f 0015 	mvn.w	r0, #21
}
   1f2da:	f507 7733 	add.w	r7, r7, #716	; 0x2cc
   1f2de:	46bd      	mov	sp, r7
   1f2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (client.ip_proto != IPPROTO_UDP &&
   1f2e2:	691b      	ldr	r3, [r3, #16]
   1f2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1f2e8:	2b11      	cmp	r3, #17
   1f2ea:	d008      	beq.n	1f2fe <handle_at_sendto+0x4e>
   1f2ec:	492f      	ldr	r1, [pc, #188]	; (1f3ac <handle_at_sendto+0xfc>)
   1f2ee:	4b30      	ldr	r3, [pc, #192]	; (1f3b0 <handle_at_sendto+0x100>)
		LOG_ERR("Invalid protocol");
   1f2f0:	4831      	ldr	r0, [pc, #196]	; (1f3b8 <handle_at_sendto+0x108>)
   1f2f2:	1ac9      	subs	r1, r1, r3
   1f2f4:	08c9      	lsrs	r1, r1, #3
   1f2f6:	0189      	lsls	r1, r1, #6
   1f2f8:	f041 0101 	orr.w	r1, r1, #1
   1f2fc:	e7e9      	b.n	1f2d2 <handle_at_sendto+0x22>
	switch (cmd_type) {
   1f2fe:	2801      	cmp	r0, #1
   1f300:	d1e9      	bne.n	1f2d6 <handle_at_sendto+0x26>
		if (at_params_valid_count_get(&at_param_list) < 5) {
   1f302:	482e      	ldr	r0, [pc, #184]	; (1f3bc <handle_at_sendto+0x10c>)
   1f304:	f018 fe82 	bl	3800c <at_params_valid_count_get>
   1f308:	2804      	cmp	r0, #4
   1f30a:	d9e4      	bls.n	1f2d6 <handle_at_sendto+0x26>
		size = TCPIP_MAX_URL;
   1f30c:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1f30e:	f107 0408 	add.w	r4, r7, #8
		size = TCPIP_MAX_URL;
   1f312:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1f314:	4622      	mov	r2, r4
   1f316:	4629      	mov	r1, r5
   1f318:	4828      	ldr	r0, [pc, #160]	; (1f3bc <handle_at_sendto+0x10c>)
   1f31a:	1d3b      	adds	r3, r7, #4
   1f31c:	f018 fe53 	bl	37fc6 <at_params_string_get>
		if (err) {
   1f320:	2800      	cmp	r0, #0
   1f322:	d1da      	bne.n	1f2da <handle_at_sendto+0x2a>
		url[size] = '\0';
   1f324:	687b      	ldr	r3, [r7, #4]
		err = at_params_short_get(&at_param_list, 2, &port);
   1f326:	463a      	mov	r2, r7
		url[size] = '\0';
   1f328:	54e0      	strb	r0, [r4, r3]
		err = at_params_short_get(&at_param_list, 2, &port);
   1f32a:	2102      	movs	r1, #2
   1f32c:	4823      	ldr	r0, [pc, #140]	; (1f3bc <handle_at_sendto+0x10c>)
   1f32e:	f018 fe25 	bl	37f7c <at_params_short_get>
		if (err) {
   1f332:	2800      	cmp	r0, #0
   1f334:	d1d1      	bne.n	1f2da <handle_at_sendto+0x2a>
		err = at_params_short_get(&at_param_list, 3, &datatype);
   1f336:	2103      	movs	r1, #3
   1f338:	4820      	ldr	r0, [pc, #128]	; (1f3bc <handle_at_sendto+0x10c>)
   1f33a:	1cba      	adds	r2, r7, #2
   1f33c:	f018 fe1e 	bl	37f7c <at_params_short_get>
		if (err) {
   1f340:	2800      	cmp	r0, #0
   1f342:	d1ca      	bne.n	1f2da <handle_at_sendto+0x2a>
		size = NET_IPV4_MTU;
   1f344:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&at_param_list, 4, data, &size);
   1f348:	2104      	movs	r1, #4
		size = NET_IPV4_MTU;
   1f34a:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&at_param_list, 4, data, &size);
   1f34c:	481b      	ldr	r0, [pc, #108]	; (1f3bc <handle_at_sendto+0x10c>)
   1f34e:	1d3b      	adds	r3, r7, #4
   1f350:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1f354:	f018 fe37 	bl	37fc6 <at_params_string_get>
		if (err) {
   1f358:	2800      	cmp	r0, #0
   1f35a:	d1be      	bne.n	1f2da <handle_at_sendto+0x2a>
		if (datatype == DATATYPE_HEXADECIMAL) {
   1f35c:	887b      	ldrh	r3, [r7, #2]
   1f35e:	6879      	ldr	r1, [r7, #4]
   1f360:	b9d3      	cbnz	r3, 1f398 <handle_at_sendto+0xe8>
			uint8_t data_hex[size / 2];
   1f362:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   1f366:	105b      	asrs	r3, r3, #1
   1f368:	1dda      	adds	r2, r3, #7
   1f36a:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   1f36e:	466d      	mov	r5, sp
			uint8_t data_hex[size / 2];
   1f370:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   1f374:	466a      	mov	r2, sp
   1f376:	b29b      	uxth	r3, r3
   1f378:	b289      	uxth	r1, r1
   1f37a:	f107 0088 	add.w	r0, r7, #136	; 0x88
   1f37e:	f016 f90d 	bl	3559c <slm_util_atoh>
			if (err > 0) {
   1f382:	2800      	cmp	r0, #0
			uint8_t data_hex[size / 2];
   1f384:	466e      	mov	r6, sp
			if (err > 0) {
   1f386:	dd05      	ble.n	1f394 <handle_at_sendto+0xe4>
				err = do_sendto(url, port, data_hex, err);
   1f388:	4603      	mov	r3, r0
   1f38a:	4632      	mov	r2, r6
   1f38c:	4620      	mov	r0, r4
   1f38e:	8839      	ldrh	r1, [r7, #0]
   1f390:	f7ff fef4 	bl	1f17c <do_sendto>
   1f394:	46ad      	mov	sp, r5
   1f396:	e7a0      	b.n	1f2da <handle_at_sendto+0x2a>
			err = do_sendto(url, port, data, size);
   1f398:	460b      	mov	r3, r1
   1f39a:	4620      	mov	r0, r4
   1f39c:	8839      	ldrh	r1, [r7, #0]
   1f39e:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1f3a2:	f7ff feeb 	bl	1f17c <do_sendto>
   1f3a6:	e798      	b.n	1f2da <handle_at_sendto+0x2a>
   1f3a8:	20023348 	.word	0x20023348
   1f3ac:	00039b20 	.word	0x00039b20
   1f3b0:	00039a50 	.word	0x00039a50
   1f3b4:	0003aad3 	.word	0x0003aad3
   1f3b8:	0003acb9 	.word	0x0003acb9
   1f3bc:	20023308 	.word	0x20023308

0001f3c0 <do_recv>:
{
   1f3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3c4:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
	int sock = client.sock;
   1f3c8:	4b65      	ldr	r3, [pc, #404]	; (1f560 <do_recv+0x1a0>)
{
   1f3ca:	4602      	mov	r2, r0
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f3cc:	6899      	ldr	r1, [r3, #8]
	int sock = client.sock;
   1f3ce:	6818      	ldr	r0, [r3, #0]
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f3d0:	2901      	cmp	r1, #1
{
   1f3d2:	af02      	add	r7, sp, #8
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f3d4:	d114      	bne.n	1f400 <do_recv+0x40>
		if (client.sock_peer != INVALID_SOCKET) {
   1f3d6:	68d8      	ldr	r0, [r3, #12]
   1f3d8:	1c43      	adds	r3, r0, #1
   1f3da:	d111      	bne.n	1f400 <do_recv+0x40>
   1f3dc:	4b61      	ldr	r3, [pc, #388]	; (1f564 <do_recv+0x1a4>)
   1f3de:	4962      	ldr	r1, [pc, #392]	; (1f568 <do_recv+0x1a8>)
			LOG_ERR("No remote connection");
   1f3e0:	4862      	ldr	r0, [pc, #392]	; (1f56c <do_recv+0x1ac>)
   1f3e2:	1ac9      	subs	r1, r1, r3
   1f3e4:	08c9      	lsrs	r1, r1, #3
   1f3e6:	0189      	lsls	r1, r1, #6
   1f3e8:	f041 0101 	orr.w	r1, r1, #1
   1f3ec:	f016 fe18 	bl	36020 <log_0>
			return -EINVAL;
   1f3f0:	f06f 0415 	mvn.w	r4, #21
}
   1f3f4:	4620      	mov	r0, r4
   1f3f6:	f507 7712 	add.w	r7, r7, #584	; 0x248
   1f3fa:	46bd      	mov	sp, r7
   1f3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1f400:	2300      	movs	r3, #0
   1f402:	f107 0108 	add.w	r1, r7, #8
   1f406:	e9cd 3300 	strd	r3, r3, [sp]
   1f40a:	f017 fa96 	bl	3693a <z_impl_zsock_recvfrom>
	if (ret < 0) {
   1f40e:	1e05      	subs	r5, r0, #0
   1f410:	da37      	bge.n	1f482 <do_recv+0xc2>
   1f412:	4a54      	ldr	r2, [pc, #336]	; (1f564 <do_recv+0x1a4>)
   1f414:	4c54      	ldr	r4, [pc, #336]	; (1f568 <do_recv+0x1a8>)
   1f416:	1aa4      	subs	r4, r4, r2
		LOG_WRN("recv() error: %d", -errno);
   1f418:	f017 fd09 	bl	36e2e <__errno>
   1f41c:	08e4      	lsrs	r4, r4, #3
   1f41e:	6801      	ldr	r1, [r0, #0]
   1f420:	01a4      	lsls	r4, r4, #6
   1f422:	f044 0402 	orr.w	r4, r4, #2
   1f426:	4622      	mov	r2, r4
   1f428:	4851      	ldr	r0, [pc, #324]	; (1f570 <do_recv+0x1b0>)
   1f42a:	4249      	negs	r1, r1
   1f42c:	f016 fe07 	bl	3603e <log_1>
		if (errno != EAGAIN && errno != ETIMEDOUT) {
   1f430:	f017 fcfd 	bl	36e2e <__errno>
   1f434:	6803      	ldr	r3, [r0, #0]
   1f436:	2b0b      	cmp	r3, #11
   1f438:	d00f      	beq.n	1f45a <do_recv+0x9a>
   1f43a:	f017 fcf8 	bl	36e2e <__errno>
   1f43e:	6803      	ldr	r3, [r0, #0]
   1f440:	2b74      	cmp	r3, #116	; 0x74
   1f442:	d00a      	beq.n	1f45a <do_recv+0x9a>
			do_socket_close(-errno);
   1f444:	f017 fcf3 	bl	36e2e <__errno>
   1f448:	6800      	ldr	r0, [r0, #0]
   1f44a:	4240      	negs	r0, r0
   1f44c:	f7ff fd60 	bl	1ef10 <do_socket_close>
		return -errno;
   1f450:	f017 fced 	bl	36e2e <__errno>
   1f454:	6804      	ldr	r4, [r0, #0]
   1f456:	4264      	negs	r4, r4
   1f458:	e7cc      	b.n	1f3f4 <do_recv+0x34>
			sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1f45a:	f017 fce8 	bl	36e2e <__errno>
   1f45e:	6803      	ldr	r3, [r0, #0]
   1f460:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f464:	425b      	negs	r3, r3
   1f466:	2100      	movs	r1, #0
   1f468:	9300      	str	r3, [sp, #0]
   1f46a:	4842      	ldr	r0, [pc, #264]	; (1f574 <do_recv+0x1b4>)
   1f46c:	4b42      	ldr	r3, [pc, #264]	; (1f578 <do_recv+0x1b8>)
   1f46e:	f019 fc9e 	bl	38dae <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1f472:	4840      	ldr	r0, [pc, #256]	; (1f574 <do_recv+0x1b4>)
   1f474:	f7fd fdfc 	bl	1d070 <strlen>
   1f478:	4601      	mov	r1, r0
   1f47a:	483e      	ldr	r0, [pc, #248]	; (1f574 <do_recv+0x1b4>)
   1f47c:	f7fe feb4 	bl	1e1e8 <rsp_send>
   1f480:	e7e6      	b.n	1f450 <do_recv+0x90>
	if (ret == 0) {
   1f482:	d109      	bne.n	1f498 <do_recv+0xd8>
   1f484:	4938      	ldr	r1, [pc, #224]	; (1f568 <do_recv+0x1a8>)
   1f486:	4b37      	ldr	r3, [pc, #220]	; (1f564 <do_recv+0x1a4>)
		LOG_WRN("recv() return 0");
   1f488:	483c      	ldr	r0, [pc, #240]	; (1f57c <do_recv+0x1bc>)
   1f48a:	1ac9      	subs	r1, r1, r3
   1f48c:	08c9      	lsrs	r1, r1, #3
   1f48e:	0189      	lsls	r1, r1, #6
   1f490:	f041 0102 	orr.w	r1, r1, #2
   1f494:	f016 fdc4 	bl	36020 <log_0>
	if (slm_util_hex_check(data, ret)) {
   1f498:	b2a9      	uxth	r1, r5
   1f49a:	f107 0008 	add.w	r0, r7, #8
   1f49e:	6079      	str	r1, [r7, #4]
   1f4a0:	f016 f869 	bl	35576 <slm_util_hex_check>
   1f4a4:	4604      	mov	r4, r0
   1f4a6:	2800      	cmp	r0, #0
   1f4a8:	d03c      	beq.n	1f524 <do_recv+0x164>
		char data_hex[ret * 2];
   1f4aa:	006b      	lsls	r3, r5, #1
   1f4ac:	1dda      	adds	r2, r3, #7
   1f4ae:	f022 0207 	bic.w	r2, r2, #7
	if (slm_util_hex_check(data, ret)) {
   1f4b2:	466e      	mov	r6, sp
		char data_hex[ret * 2];
   1f4b4:	ebad 0d02 	sub.w	sp, sp, r2
   1f4b8:	f10d 0808 	add.w	r8, sp, #8
		ret = slm_util_htoa(data, ret, data_hex, size);
   1f4bc:	4642      	mov	r2, r8
   1f4be:	6879      	ldr	r1, [r7, #4]
   1f4c0:	b29b      	uxth	r3, r3
   1f4c2:	f107 0008 	add.w	r0, r7, #8
   1f4c6:	f7fe fd5f 	bl	1df88 <slm_util_htoa>
		if (ret > 0) {
   1f4ca:	1e04      	subs	r4, r0, #0
   1f4cc:	dd1e      	ble.n	1f50c <do_recv+0x14c>
			sprintf(rsp_buf, "#XRECV: %d, %d\r\n",
   1f4ce:	2500      	movs	r5, #0
   1f4d0:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f4d4:	4b2a      	ldr	r3, [pc, #168]	; (1f580 <do_recv+0x1c0>)
   1f4d6:	4629      	mov	r1, r5
   1f4d8:	9401      	str	r4, [sp, #4]
   1f4da:	4826      	ldr	r0, [pc, #152]	; (1f574 <do_recv+0x1b4>)
   1f4dc:	9500      	str	r5, [sp, #0]
   1f4de:	f019 fc66 	bl	38dae <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1f4e2:	4824      	ldr	r0, [pc, #144]	; (1f574 <do_recv+0x1b4>)
   1f4e4:	f7fd fdc4 	bl	1d070 <strlen>
   1f4e8:	4601      	mov	r1, r0
   1f4ea:	4822      	ldr	r0, [pc, #136]	; (1f574 <do_recv+0x1b4>)
   1f4ec:	f7fe fe7c 	bl	1e1e8 <rsp_send>
			rsp_send(data_hex, ret);
   1f4f0:	4621      	mov	r1, r4
   1f4f2:	4640      	mov	r0, r8
   1f4f4:	f7fe fe78 	bl	1e1e8 <rsp_send>
			rsp_send("\r\n", strlen("\r\n"));
   1f4f8:	4822      	ldr	r0, [pc, #136]	; (1f584 <do_recv+0x1c4>)
   1f4fa:	f7fd fdb9 	bl	1d070 <strlen>
   1f4fe:	4601      	mov	r1, r0
   1f500:	4820      	ldr	r0, [pc, #128]	; (1f584 <do_recv+0x1c4>)
   1f502:	f7fe fe71 	bl	1e1e8 <rsp_send>
			ret = 0;
   1f506:	462c      	mov	r4, r5
			LOG_ERR("hex convert error: %d", ret);
   1f508:	46b5      	mov	sp, r6
   1f50a:	e773      	b.n	1f3f4 <do_recv+0x34>
   1f50c:	4b15      	ldr	r3, [pc, #84]	; (1f564 <do_recv+0x1a4>)
   1f50e:	4a16      	ldr	r2, [pc, #88]	; (1f568 <do_recv+0x1a8>)
   1f510:	4621      	mov	r1, r4
   1f512:	1ad2      	subs	r2, r2, r3
   1f514:	08d2      	lsrs	r2, r2, #3
   1f516:	0192      	lsls	r2, r2, #6
   1f518:	481b      	ldr	r0, [pc, #108]	; (1f588 <do_recv+0x1c8>)
   1f51a:	f042 0201 	orr.w	r2, r2, #1
   1f51e:	f016 fd8e 	bl	3603e <log_1>
   1f522:	e7f1      	b.n	1f508 <do_recv+0x148>
		sprintf(rsp_buf, "#XRECV: %d, %d\r\n",
   1f524:	2301      	movs	r3, #1
   1f526:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f52a:	4601      	mov	r1, r0
   1f52c:	9300      	str	r3, [sp, #0]
   1f52e:	9501      	str	r5, [sp, #4]
   1f530:	4b13      	ldr	r3, [pc, #76]	; (1f580 <do_recv+0x1c0>)
   1f532:	4810      	ldr	r0, [pc, #64]	; (1f574 <do_recv+0x1b4>)
   1f534:	f019 fc3b 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1f538:	480e      	ldr	r0, [pc, #56]	; (1f574 <do_recv+0x1b4>)
   1f53a:	f7fd fd99 	bl	1d070 <strlen>
   1f53e:	4601      	mov	r1, r0
   1f540:	480c      	ldr	r0, [pc, #48]	; (1f574 <do_recv+0x1b4>)
   1f542:	f7fe fe51 	bl	1e1e8 <rsp_send>
		rsp_send(data, ret);
   1f546:	4629      	mov	r1, r5
   1f548:	f107 0008 	add.w	r0, r7, #8
   1f54c:	f7fe fe4c 	bl	1e1e8 <rsp_send>
		rsp_send("\r\n", strlen("\r\n"));
   1f550:	480c      	ldr	r0, [pc, #48]	; (1f584 <do_recv+0x1c4>)
   1f552:	f7fd fd8d 	bl	1d070 <strlen>
   1f556:	4601      	mov	r1, r0
   1f558:	480a      	ldr	r0, [pc, #40]	; (1f584 <do_recv+0x1c4>)
   1f55a:	f7fe fe45 	bl	1e1e8 <rsp_send>
		ret = 0;
   1f55e:	e749      	b.n	1f3f4 <do_recv+0x34>
   1f560:	20023348 	.word	0x20023348
   1f564:	00039a50 	.word	0x00039a50
   1f568:	00039b20 	.word	0x00039b20
   1f56c:	0003acfe 	.word	0x0003acfe
   1f570:	0003ad13 	.word	0x0003ad13
   1f574:	200287b0 	.word	0x200287b0
   1f578:	0003ac7d 	.word	0x0003ac7d
   1f57c:	0003ad24 	.word	0x0003ad24
   1f580:	0003ad34 	.word	0x0003ad34
   1f584:	0003c9a6 	.word	0x0003c9a6
   1f588:	0003aca3 	.word	0x0003aca3

0001f58c <handle_at_recv>:
	uint16_t length = NET_IPV4_MTU;
   1f58c:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1f590:	b513      	push	{r0, r1, r4, lr}
	uint16_t length = NET_IPV4_MTU;
   1f592:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!client.connected) {
   1f596:	4b13      	ldr	r3, [pc, #76]	; (1f5e4 <handle_at_recv+0x58>)
{
   1f598:	4604      	mov	r4, r0
	if (!client.connected) {
   1f59a:	7d1b      	ldrb	r3, [r3, #20]
   1f59c:	b963      	cbnz	r3, 1f5b8 <handle_at_recv+0x2c>
   1f59e:	4912      	ldr	r1, [pc, #72]	; (1f5e8 <handle_at_recv+0x5c>)
   1f5a0:	4b12      	ldr	r3, [pc, #72]	; (1f5ec <handle_at_recv+0x60>)
		LOG_ERR("Not connected yet");
   1f5a2:	4813      	ldr	r0, [pc, #76]	; (1f5f0 <handle_at_recv+0x64>)
   1f5a4:	1ac9      	subs	r1, r1, r3
   1f5a6:	08c9      	lsrs	r1, r1, #3
   1f5a8:	0189      	lsls	r1, r1, #6
   1f5aa:	f041 0101 	orr.w	r1, r1, #1
   1f5ae:	f016 fd37 	bl	36020 <log_0>
	int err = -EINVAL;
   1f5b2:	f06f 0015 	mvn.w	r0, #21
   1f5b6:	e00a      	b.n	1f5ce <handle_at_recv+0x42>
	switch (cmd_type) {
   1f5b8:	2801      	cmp	r0, #1
   1f5ba:	d1fa      	bne.n	1f5b2 <handle_at_recv+0x26>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1f5bc:	480d      	ldr	r0, [pc, #52]	; (1f5f4 <handle_at_recv+0x68>)
   1f5be:	f018 fd25 	bl	3800c <at_params_valid_count_get>
   1f5c2:	2801      	cmp	r0, #1
   1f5c4:	d805      	bhi.n	1f5d2 <handle_at_recv+0x46>
		err = do_recv(length);
   1f5c6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1f5ca:	f7ff fef9 	bl	1f3c0 <do_recv>
}
   1f5ce:	b002      	add	sp, #8
   1f5d0:	bd10      	pop	{r4, pc}
			err = at_params_short_get(&at_param_list, 1, &length);
   1f5d2:	4621      	mov	r1, r4
   1f5d4:	4807      	ldr	r0, [pc, #28]	; (1f5f4 <handle_at_recv+0x68>)
   1f5d6:	f10d 0206 	add.w	r2, sp, #6
   1f5da:	f018 fccf 	bl	37f7c <at_params_short_get>
			if (err) {
   1f5de:	2800      	cmp	r0, #0
   1f5e0:	d0f1      	beq.n	1f5c6 <handle_at_recv+0x3a>
   1f5e2:	e7f4      	b.n	1f5ce <handle_at_recv+0x42>
   1f5e4:	20023348 	.word	0x20023348
   1f5e8:	00039b20 	.word	0x00039b20
   1f5ec:	00039a50 	.word	0x00039a50
   1f5f0:	0003ad45 	.word	0x0003ad45
   1f5f4:	20023308 	.word	0x20023308

0001f5f8 <do_send>:
	int sock = client.sock;
   1f5f8:	4b3a      	ldr	r3, [pc, #232]	; (1f6e4 <do_send+0xec>)
{
   1f5fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f5fe:	689a      	ldr	r2, [r3, #8]
{
   1f600:	4680      	mov	r8, r0
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f602:	2a01      	cmp	r2, #1
{
   1f604:	460e      	mov	r6, r1
	int sock = client.sock;
   1f606:	681f      	ldr	r7, [r3, #0]
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f608:	d168      	bne.n	1f6dc <do_send+0xe4>
		if (client.sock_peer != INVALID_SOCKET) {
   1f60a:	68df      	ldr	r7, [r3, #12]
   1f60c:	1c7b      	adds	r3, r7, #1
   1f60e:	d165      	bne.n	1f6dc <do_send+0xe4>
   1f610:	4b35      	ldr	r3, [pc, #212]	; (1f6e8 <do_send+0xf0>)
   1f612:	4936      	ldr	r1, [pc, #216]	; (1f6ec <do_send+0xf4>)
			LOG_ERR("No remote connection");
   1f614:	4836      	ldr	r0, [pc, #216]	; (1f6f0 <do_send+0xf8>)
   1f616:	1ac9      	subs	r1, r1, r3
   1f618:	08c9      	lsrs	r1, r1, #3
   1f61a:	0189      	lsls	r1, r1, #6
   1f61c:	f041 0101 	orr.w	r1, r1, #1
   1f620:	f016 fcfe 	bl	36020 <log_0>
			return -EINVAL;
   1f624:	f06f 0015 	mvn.w	r0, #21
}
   1f628:	b003      	add	sp, #12
   1f62a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1f62e:	f017 fbfe 	bl	36e2e <__errno>
   1f632:	6803      	ldr	r3, [r0, #0]
   1f634:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f638:	425b      	negs	r3, r3
   1f63a:	2100      	movs	r1, #0
   1f63c:	9300      	str	r3, [sp, #0]
   1f63e:	482d      	ldr	r0, [pc, #180]	; (1f6f4 <do_send+0xfc>)
   1f640:	4b2d      	ldr	r3, [pc, #180]	; (1f6f8 <do_send+0x100>)
   1f642:	f019 fbb4 	bl	38dae <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1f646:	482b      	ldr	r0, [pc, #172]	; (1f6f4 <do_send+0xfc>)
   1f648:	f7fd fd12 	bl	1d070 <strlen>
   1f64c:	4601      	mov	r1, r0
   1f64e:	4829      	ldr	r0, [pc, #164]	; (1f6f4 <do_send+0xfc>)
   1f650:	f7fe fdca 	bl	1e1e8 <rsp_send>
   1f654:	e02c      	b.n	1f6b0 <do_send+0xb8>
		offset += ret;
   1f656:	4425      	add	r5, r4
	while (offset < datalen) {
   1f658:	42ae      	cmp	r6, r5
   1f65a:	d92d      	bls.n	1f6b8 <do_send+0xc0>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1f65c:	2300      	movs	r3, #0
   1f65e:	4638      	mov	r0, r7
   1f660:	e9cd 9900 	strd	r9, r9, [sp]
   1f664:	1b72      	subs	r2, r6, r5
   1f666:	eb08 0105 	add.w	r1, r8, r5
   1f66a:	f017 f949 	bl	36900 <z_impl_zsock_sendto>
		if (ret < 0) {
   1f66e:	1e04      	subs	r4, r0, #0
   1f670:	daf1      	bge.n	1f656 <do_send+0x5e>
   1f672:	4a1d      	ldr	r2, [pc, #116]	; (1f6e8 <do_send+0xf0>)
   1f674:	4c1d      	ldr	r4, [pc, #116]	; (1f6ec <do_send+0xf4>)
   1f676:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send() failed: %d", -errno);
   1f678:	f017 fbd9 	bl	36e2e <__errno>
   1f67c:	08e4      	lsrs	r4, r4, #3
   1f67e:	6801      	ldr	r1, [r0, #0]
   1f680:	01a4      	lsls	r4, r4, #6
   1f682:	f044 0401 	orr.w	r4, r4, #1
   1f686:	4622      	mov	r2, r4
   1f688:	481c      	ldr	r0, [pc, #112]	; (1f6fc <do_send+0x104>)
   1f68a:	4249      	negs	r1, r1
   1f68c:	f016 fcd7 	bl	3603e <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   1f690:	f017 fbcd 	bl	36e2e <__errno>
   1f694:	6803      	ldr	r3, [r0, #0]
   1f696:	2b0b      	cmp	r3, #11
   1f698:	d0c9      	beq.n	1f62e <do_send+0x36>
   1f69a:	f017 fbc8 	bl	36e2e <__errno>
   1f69e:	6803      	ldr	r3, [r0, #0]
   1f6a0:	2b74      	cmp	r3, #116	; 0x74
   1f6a2:	d0c4      	beq.n	1f62e <do_send+0x36>
				do_socket_close(-errno);
   1f6a4:	f017 fbc3 	bl	36e2e <__errno>
   1f6a8:	6800      	ldr	r0, [r0, #0]
   1f6aa:	4240      	negs	r0, r0
   1f6ac:	f7ff fc30 	bl	1ef10 <do_socket_close>
			ret = -errno;
   1f6b0:	f017 fbbd 	bl	36e2e <__errno>
   1f6b4:	6804      	ldr	r4, [r0, #0]
   1f6b6:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XSEND: %d\r\n", offset);
   1f6b8:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f6bc:	2100      	movs	r1, #0
   1f6be:	4b10      	ldr	r3, [pc, #64]	; (1f700 <do_send+0x108>)
   1f6c0:	480c      	ldr	r0, [pc, #48]	; (1f6f4 <do_send+0xfc>)
   1f6c2:	9500      	str	r5, [sp, #0]
   1f6c4:	f019 fb73 	bl	38dae <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1f6c8:	480a      	ldr	r0, [pc, #40]	; (1f6f4 <do_send+0xfc>)
   1f6ca:	f7fd fcd1 	bl	1d070 <strlen>
   1f6ce:	4601      	mov	r1, r0
   1f6d0:	4808      	ldr	r0, [pc, #32]	; (1f6f4 <do_send+0xfc>)
   1f6d2:	f7fe fd89 	bl	1e1e8 <rsp_send>
	if (ret >= 0) {
   1f6d6:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1f6da:	e7a5      	b.n	1f628 <do_send+0x30>
{
   1f6dc:	2400      	movs	r4, #0
   1f6de:	4625      	mov	r5, r4
   1f6e0:	46a1      	mov	r9, r4
   1f6e2:	e7b9      	b.n	1f658 <do_send+0x60>
   1f6e4:	20023348 	.word	0x20023348
   1f6e8:	00039a50 	.word	0x00039a50
   1f6ec:	00039b20 	.word	0x00039b20
   1f6f0:	0003acfe 	.word	0x0003acfe
   1f6f4:	200287b0 	.word	0x200287b0
   1f6f8:	0003ac7d 	.word	0x0003ac7d
   1f6fc:	0003ad57 	.word	0x0003ad57
   1f700:	0003ad69 	.word	0x0003ad69

0001f704 <handle_at_send>:
{
   1f704:	b590      	push	{r4, r7, lr}
	int size = NET_IPV4_MTU;
   1f706:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1f70a:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   1f70e:	af00      	add	r7, sp, #0
	int size = NET_IPV4_MTU;
   1f710:	607b      	str	r3, [r7, #4]
	if (!client.connected) {
   1f712:	4b25      	ldr	r3, [pc, #148]	; (1f7a8 <__kernel_ram_size+0x48>)
{
   1f714:	4604      	mov	r4, r0
	if (!client.connected) {
   1f716:	7d1b      	ldrb	r3, [r3, #20]
   1f718:	b97b      	cbnz	r3, 1f73a <handle_at_send+0x36>
   1f71a:	4924      	ldr	r1, [pc, #144]	; (1f7ac <__kernel_ram_size+0x4c>)
   1f71c:	4b24      	ldr	r3, [pc, #144]	; (1f7b0 <__kernel_ram_size+0x50>)
		LOG_ERR("Not connected yet");
   1f71e:	4825      	ldr	r0, [pc, #148]	; (1f7b4 <__kernel_ram_size+0x54>)
   1f720:	1ac9      	subs	r1, r1, r3
   1f722:	08c9      	lsrs	r1, r1, #3
   1f724:	0189      	lsls	r1, r1, #6
   1f726:	f041 0101 	orr.w	r1, r1, #1
   1f72a:	f016 fc79 	bl	36020 <log_0>
	int err = -EINVAL;
   1f72e:	f06f 0015 	mvn.w	r0, #21
}
   1f732:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   1f736:	46bd      	mov	sp, r7
   1f738:	bd90      	pop	{r4, r7, pc}
	switch (cmd_type) {
   1f73a:	2801      	cmp	r0, #1
   1f73c:	d1f7      	bne.n	1f72e <handle_at_send+0x2a>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1f73e:	481e      	ldr	r0, [pc, #120]	; (1f7b8 <__kernel_ram_size+0x58>)
   1f740:	f018 fc64 	bl	3800c <at_params_valid_count_get>
   1f744:	2802      	cmp	r0, #2
   1f746:	d9f2      	bls.n	1f72e <handle_at_send+0x2a>
		err = at_params_short_get(&at_param_list, 1, &datatype);
   1f748:	4621      	mov	r1, r4
   1f74a:	481b      	ldr	r0, [pc, #108]	; (1f7b8 <__kernel_ram_size+0x58>)
   1f74c:	1cba      	adds	r2, r7, #2
   1f74e:	f018 fc15 	bl	37f7c <at_params_short_get>
		if (err) {
   1f752:	2800      	cmp	r0, #0
   1f754:	d1ed      	bne.n	1f732 <handle_at_send+0x2e>
		err = at_params_string_get(&at_param_list, 2, data, &size);
   1f756:	2102      	movs	r1, #2
   1f758:	4817      	ldr	r0, [pc, #92]	; (1f7b8 <__kernel_ram_size+0x58>)
   1f75a:	1d3b      	adds	r3, r7, #4
   1f75c:	f107 0208 	add.w	r2, r7, #8
   1f760:	f018 fc31 	bl	37fc6 <at_params_string_get>
		if (err) {
   1f764:	2800      	cmp	r0, #0
   1f766:	d1e4      	bne.n	1f732 <handle_at_send+0x2e>
		if (datatype == DATATYPE_HEXADECIMAL) {
   1f768:	887b      	ldrh	r3, [r7, #2]
   1f76a:	6879      	ldr	r1, [r7, #4]
   1f76c:	b9bb      	cbnz	r3, 1f79e <__kernel_ram_size+0x3e>
			uint8_t data_hex[size / 2];
   1f76e:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   1f772:	105b      	asrs	r3, r3, #1
   1f774:	1dda      	adds	r2, r3, #7
   1f776:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   1f77a:	466c      	mov	r4, sp
			uint8_t data_hex[size / 2];
   1f77c:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   1f780:	466a      	mov	r2, sp
   1f782:	b29b      	uxth	r3, r3
   1f784:	b289      	uxth	r1, r1
   1f786:	f107 0008 	add.w	r0, r7, #8
   1f78a:	f015 ff07 	bl	3559c <slm_util_atoh>
			if (err > 0) {
   1f78e:	2800      	cmp	r0, #0
   1f790:	dd03      	ble.n	1f79a <__kernel_ram_size+0x3a>
				err = do_send(data_hex, err);
   1f792:	4601      	mov	r1, r0
   1f794:	4668      	mov	r0, sp
   1f796:	f7ff ff2f 	bl	1f5f8 <do_send>
   1f79a:	46a5      	mov	sp, r4
   1f79c:	e7c9      	b.n	1f732 <handle_at_send+0x2e>
			err = do_send(data, size);
   1f79e:	f107 0008 	add.w	r0, r7, #8
   1f7a2:	f7ff ff29 	bl	1f5f8 <do_send>
   1f7a6:	e7c4      	b.n	1f732 <handle_at_send+0x2e>
   1f7a8:	20023348 	.word	0x20023348
   1f7ac:	00039b20 	.word	0x00039b20
   1f7b0:	00039a50 	.word	0x00039a50
   1f7b4:	0003ad45 	.word	0x0003ad45
   1f7b8:	20023308 	.word	0x20023308

0001f7bc <handle_at_accept>:
{
   1f7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (client.sock < 0) {
   1f7be:	4b4e      	ldr	r3, [pc, #312]	; (1f8f8 <handle_at_accept+0x13c>)
{
   1f7c0:	4604      	mov	r4, r0
	if (client.sock < 0) {
   1f7c2:	6818      	ldr	r0, [r3, #0]
   1f7c4:	461e      	mov	r6, r3
   1f7c6:	2800      	cmp	r0, #0
{
   1f7c8:	b089      	sub	sp, #36	; 0x24
	if (client.sock < 0) {
   1f7ca:	da0c      	bge.n	1f7e6 <handle_at_accept+0x2a>
   1f7cc:	494b      	ldr	r1, [pc, #300]	; (1f8fc <handle_at_accept+0x140>)
   1f7ce:	4b4c      	ldr	r3, [pc, #304]	; (1f900 <handle_at_accept+0x144>)
		LOG_ERR("Socket not opened yet");
   1f7d0:	484c      	ldr	r0, [pc, #304]	; (1f904 <handle_at_accept+0x148>)
   1f7d2:	1ac9      	subs	r1, r1, r3
   1f7d4:	08c9      	lsrs	r1, r1, #3
   1f7d6:	0189      	lsls	r1, r1, #6
   1f7d8:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
   1f7dc:	f016 fc20 	bl	36020 <log_0>
		return -EINVAL;
   1f7e0:	f06f 0015 	mvn.w	r0, #21
   1f7e4:	e046      	b.n	1f874 <handle_at_accept+0xb8>
	if (client.role != AT_SOCKET_ROLE_SERVER) {
   1f7e6:	689a      	ldr	r2, [r3, #8]
   1f7e8:	2a01      	cmp	r2, #1
   1f7ea:	d008      	beq.n	1f7fe <handle_at_accept+0x42>
   1f7ec:	4943      	ldr	r1, [pc, #268]	; (1f8fc <handle_at_accept+0x140>)
   1f7ee:	4b44      	ldr	r3, [pc, #272]	; (1f900 <handle_at_accept+0x144>)
		LOG_ERR("Invalid role");
   1f7f0:	4845      	ldr	r0, [pc, #276]	; (1f908 <handle_at_accept+0x14c>)
   1f7f2:	1ac9      	subs	r1, r1, r3
   1f7f4:	08c9      	lsrs	r1, r1, #3
   1f7f6:	0189      	lsls	r1, r1, #6
   1f7f8:	f041 0101 	orr.w	r1, r1, #1
   1f7fc:	e7ee      	b.n	1f7dc <handle_at_accept+0x20>
	if (client.ip_proto != IPPROTO_TCP &&
   1f7fe:	691b      	ldr	r3, [r3, #16]
   1f800:	2b06      	cmp	r3, #6
   1f802:	d00b      	beq.n	1f81c <handle_at_accept+0x60>
   1f804:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1f808:	d008      	beq.n	1f81c <handle_at_accept+0x60>
   1f80a:	493c      	ldr	r1, [pc, #240]	; (1f8fc <handle_at_accept+0x140>)
   1f80c:	4b3c      	ldr	r3, [pc, #240]	; (1f900 <handle_at_accept+0x144>)
		LOG_ERR("Invalid protocol");
   1f80e:	483f      	ldr	r0, [pc, #252]	; (1f90c <handle_at_accept+0x150>)
   1f810:	1ac9      	subs	r1, r1, r3
   1f812:	08c9      	lsrs	r1, r1, #3
   1f814:	0189      	lsls	r1, r1, #6
   1f816:	f041 0101 	orr.w	r1, r1, #1
   1f81a:	e7df      	b.n	1f7dc <handle_at_accept+0x20>
	switch (cmd_type) {
   1f81c:	2c01      	cmp	r4, #1
   1f81e:	d007      	beq.n	1f830 <handle_at_accept+0x74>
   1f820:	2c02      	cmp	r4, #2
   1f822:	d1dd      	bne.n	1f7e0 <handle_at_accept+0x24>
		if (client.sock_peer != INVALID_SOCKET) {
   1f824:	68f3      	ldr	r3, [r6, #12]
   1f826:	1c5a      	adds	r2, r3, #1
   1f828:	d060      	beq.n	1f8ec <handle_at_accept+0x130>
			sprintf(rsp_buf, "#XTCPACCEPT: %d\r\n",
   1f82a:	9300      	str	r3, [sp, #0]
   1f82c:	4b38      	ldr	r3, [pc, #224]	; (1f910 <handle_at_accept+0x154>)
   1f82e:	e04e      	b.n	1f8ce <handle_at_accept+0x112>
	socklen_t len = sizeof(struct sockaddr_in);
   1f830:	2308      	movs	r3, #8
   1f832:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_accept(sock, addr, addrlen);
   1f834:	4937      	ldr	r1, [pc, #220]	; (1f914 <handle_at_accept+0x158>)
   1f836:	aa03      	add	r2, sp, #12
   1f838:	f017 f84c 	bl	368d4 <z_impl_zsock_accept>
	if (ret < 0) {
   1f83c:	1e05      	subs	r5, r0, #0
   1f83e:	da1b      	bge.n	1f878 <handle_at_accept+0xbc>
   1f840:	4b2f      	ldr	r3, [pc, #188]	; (1f900 <handle_at_accept+0x144>)
   1f842:	4c2e      	ldr	r4, [pc, #184]	; (1f8fc <handle_at_accept+0x140>)
   1f844:	1ae4      	subs	r4, r4, r3
		LOG_ERR("accept() failed: %d/%d", -errno, ret);
   1f846:	f017 faf2 	bl	36e2e <__errno>
   1f84a:	08e4      	lsrs	r4, r4, #3
   1f84c:	6801      	ldr	r1, [r0, #0]
   1f84e:	01a4      	lsls	r4, r4, #6
   1f850:	f044 0401 	orr.w	r4, r4, #1
   1f854:	4623      	mov	r3, r4
   1f856:	462a      	mov	r2, r5
   1f858:	4249      	negs	r1, r1
   1f85a:	482f      	ldr	r0, [pc, #188]	; (1f918 <handle_at_accept+0x15c>)
   1f85c:	f016 fc06 	bl	3606c <log_2>
		do_socket_close(-errno);
   1f860:	f017 fae5 	bl	36e2e <__errno>
   1f864:	6800      	ldr	r0, [r0, #0]
   1f866:	4240      	negs	r0, r0
   1f868:	f7ff fb52 	bl	1ef10 <do_socket_close>
		return -errno;
   1f86c:	f017 fadf 	bl	36e2e <__errno>
   1f870:	6800      	ldr	r0, [r0, #0]
   1f872:	4240      	negs	r0, r0
}
   1f874:	b009      	add	sp, #36	; 0x24
   1f876:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f878:	af04      	add	r7, sp, #16
   1f87a:	2310      	movs	r3, #16
   1f87c:	463a      	mov	r2, r7
   1f87e:	4620      	mov	r0, r4
   1f880:	4926      	ldr	r1, [pc, #152]	; (1f91c <handle_at_accept+0x160>)
   1f882:	f006 fa0b 	bl	25c9c <z_impl_net_addr_ntop>
	if (inet_ntop(AF_INET, &remote.sin_addr, peer_addr, INET_ADDRSTRLEN)
   1f886:	b978      	cbnz	r0, 1f8a8 <handle_at_accept+0xec>
   1f888:	4a1d      	ldr	r2, [pc, #116]	; (1f900 <handle_at_accept+0x144>)
   1f88a:	4c1c      	ldr	r4, [pc, #112]	; (1f8fc <handle_at_accept+0x140>)
   1f88c:	1aa4      	subs	r4, r4, r2
		LOG_WRN("Parse peer IP address failed: %d", -errno);
   1f88e:	f017 face 	bl	36e2e <__errno>
   1f892:	08e4      	lsrs	r4, r4, #3
   1f894:	6801      	ldr	r1, [r0, #0]
   1f896:	01a4      	lsls	r4, r4, #6
   1f898:	f044 0402 	orr.w	r4, r4, #2
   1f89c:	4622      	mov	r2, r4
   1f89e:	4820      	ldr	r0, [pc, #128]	; (1f920 <handle_at_accept+0x164>)
   1f8a0:	4249      	negs	r1, r1
   1f8a2:	f016 fbcc 	bl	3603e <log_1>
   1f8a6:	e79b      	b.n	1f7e0 <handle_at_accept+0x24>
	sprintf(rsp_buf, "#XACCEPT: connected with %s\r\n",
   1f8a8:	4b1e      	ldr	r3, [pc, #120]	; (1f924 <handle_at_accept+0x168>)
   1f8aa:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f8ae:	2100      	movs	r1, #0
   1f8b0:	481d      	ldr	r0, [pc, #116]	; (1f928 <handle_at_accept+0x16c>)
   1f8b2:	9700      	str	r7, [sp, #0]
   1f8b4:	f019 fa7b 	bl	38dae <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1f8b8:	481b      	ldr	r0, [pc, #108]	; (1f928 <handle_at_accept+0x16c>)
   1f8ba:	f7fd fbd9 	bl	1d070 <strlen>
   1f8be:	4601      	mov	r1, r0
   1f8c0:	4819      	ldr	r0, [pc, #100]	; (1f928 <handle_at_accept+0x16c>)
   1f8c2:	f7fe fc91 	bl	1e1e8 <rsp_send>
	sprintf(rsp_buf, "#XACCEPT: %d\r\n", client.sock_peer);
   1f8c6:	4b19      	ldr	r3, [pc, #100]	; (1f92c <handle_at_accept+0x170>)
	client.sock_peer = ret;
   1f8c8:	60f5      	str	r5, [r6, #12]
	client.connected = true;
   1f8ca:	7534      	strb	r4, [r6, #20]
	sprintf(rsp_buf, "#XACCEPT: %d\r\n", client.sock_peer);
   1f8cc:	9500      	str	r5, [sp, #0]
			sprintf(rsp_buf, "#XTCPACCEPT: %d\r\n",
   1f8ce:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f8d2:	2100      	movs	r1, #0
   1f8d4:	4814      	ldr	r0, [pc, #80]	; (1f928 <handle_at_accept+0x16c>)
   1f8d6:	f019 fa6a 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1f8da:	4813      	ldr	r0, [pc, #76]	; (1f928 <handle_at_accept+0x16c>)
   1f8dc:	f7fd fbc8 	bl	1d070 <strlen>
   1f8e0:	4601      	mov	r1, r0
   1f8e2:	4811      	ldr	r0, [pc, #68]	; (1f928 <handle_at_accept+0x16c>)
   1f8e4:	f7fe fc80 	bl	1e1e8 <rsp_send>
		err = 0;
   1f8e8:	2000      	movs	r0, #0
		break;
   1f8ea:	e7c3      	b.n	1f874 <handle_at_accept+0xb8>
			sprintf(rsp_buf, "#XTCPACCEPT: 0\r\n");
   1f8ec:	4910      	ldr	r1, [pc, #64]	; (1f930 <handle_at_accept+0x174>)
   1f8ee:	480e      	ldr	r0, [pc, #56]	; (1f928 <handle_at_accept+0x16c>)
   1f8f0:	f019 fa84 	bl	38dfc <strcpy>
   1f8f4:	e7f1      	b.n	1f8da <handle_at_accept+0x11e>
   1f8f6:	bf00      	nop
   1f8f8:	20023348 	.word	0x20023348
   1f8fc:	00039b20 	.word	0x00039b20
   1f900:	00039a50 	.word	0x00039a50
   1f904:	0003aad3 	.word	0x0003aad3
   1f908:	0003ab90 	.word	0x0003ab90
   1f90c:	0003acb9 	.word	0x0003acb9
   1f910:	0003addb 	.word	0x0003addb
   1f914:	20023360 	.word	0x20023360
   1f918:	0003ad76 	.word	0x0003ad76
   1f91c:	20023364 	.word	0x20023364
   1f920:	0003ad8d 	.word	0x0003ad8d
   1f924:	0003adae 	.word	0x0003adae
   1f928:	200287b0 	.word	0x200287b0
   1f92c:	0003adcc 	.word	0x0003adcc
   1f930:	0003aded 	.word	0x0003aded

0001f934 <handle_at_listen>:
	if (client.sock < 0) {
   1f934:	4b29      	ldr	r3, [pc, #164]	; (1f9dc <handle_at_listen+0xa8>)
{
   1f936:	4601      	mov	r1, r0
	if (client.sock < 0) {
   1f938:	6818      	ldr	r0, [r3, #0]
{
   1f93a:	b510      	push	{r4, lr}
	if (client.sock < 0) {
   1f93c:	2800      	cmp	r0, #0
   1f93e:	461c      	mov	r4, r3
   1f940:	da0c      	bge.n	1f95c <handle_at_listen+0x28>
   1f942:	4927      	ldr	r1, [pc, #156]	; (1f9e0 <handle_at_listen+0xac>)
   1f944:	4b27      	ldr	r3, [pc, #156]	; (1f9e4 <handle_at_listen+0xb0>)
		LOG_ERR("Socket not opened yet");
   1f946:	4828      	ldr	r0, [pc, #160]	; (1f9e8 <handle_at_listen+0xb4>)
   1f948:	1ac9      	subs	r1, r1, r3
   1f94a:	08c9      	lsrs	r1, r1, #3
   1f94c:	0189      	lsls	r1, r1, #6
   1f94e:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
   1f952:	f016 fb65 	bl	36020 <log_0>
	int err = -EINVAL;
   1f956:	f06f 0015 	mvn.w	r0, #21
   1f95a:	e039      	b.n	1f9d0 <handle_at_listen+0x9c>
	if (client.role != AT_SOCKET_ROLE_SERVER) {
   1f95c:	689a      	ldr	r2, [r3, #8]
   1f95e:	2a01      	cmp	r2, #1
   1f960:	d008      	beq.n	1f974 <handle_at_listen+0x40>
   1f962:	491f      	ldr	r1, [pc, #124]	; (1f9e0 <handle_at_listen+0xac>)
   1f964:	4b1f      	ldr	r3, [pc, #124]	; (1f9e4 <handle_at_listen+0xb0>)
		LOG_ERR("Invalid role");
   1f966:	4821      	ldr	r0, [pc, #132]	; (1f9ec <handle_at_listen+0xb8>)
   1f968:	1ac9      	subs	r1, r1, r3
   1f96a:	08c9      	lsrs	r1, r1, #3
   1f96c:	0189      	lsls	r1, r1, #6
   1f96e:	f041 0101 	orr.w	r1, r1, #1
   1f972:	e7ee      	b.n	1f952 <handle_at_listen+0x1e>
	if (client.ip_proto != IPPROTO_TCP &&
   1f974:	691b      	ldr	r3, [r3, #16]
   1f976:	2b06      	cmp	r3, #6
   1f978:	d00b      	beq.n	1f992 <handle_at_listen+0x5e>
   1f97a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1f97e:	d008      	beq.n	1f992 <handle_at_listen+0x5e>
   1f980:	4917      	ldr	r1, [pc, #92]	; (1f9e0 <handle_at_listen+0xac>)
   1f982:	4b18      	ldr	r3, [pc, #96]	; (1f9e4 <handle_at_listen+0xb0>)
		LOG_ERR("Invalid protocol");
   1f984:	481a      	ldr	r0, [pc, #104]	; (1f9f0 <handle_at_listen+0xbc>)
   1f986:	1ac9      	subs	r1, r1, r3
   1f988:	08c9      	lsrs	r1, r1, #3
   1f98a:	0189      	lsls	r1, r1, #6
   1f98c:	f041 0101 	orr.w	r1, r1, #1
   1f990:	e7df      	b.n	1f952 <handle_at_listen+0x1e>
	switch (cmd_type) {
   1f992:	2901      	cmp	r1, #1
   1f994:	d1df      	bne.n	1f956 <handle_at_listen+0x22>
	return z_impl_zsock_listen(sock, backlog);
   1f996:	f016 ff89 	bl	368ac <z_impl_zsock_listen>
	if (ret < 0) {
   1f99a:	2800      	cmp	r0, #0
   1f99c:	da19      	bge.n	1f9d2 <handle_at_listen+0x9e>
   1f99e:	4a11      	ldr	r2, [pc, #68]	; (1f9e4 <handle_at_listen+0xb0>)
   1f9a0:	4c0f      	ldr	r4, [pc, #60]	; (1f9e0 <handle_at_listen+0xac>)
   1f9a2:	1aa4      	subs	r4, r4, r2
		LOG_ERR("listen() failed: %d", -errno);
   1f9a4:	f017 fa43 	bl	36e2e <__errno>
   1f9a8:	08e4      	lsrs	r4, r4, #3
   1f9aa:	6801      	ldr	r1, [r0, #0]
   1f9ac:	01a4      	lsls	r4, r4, #6
   1f9ae:	f044 0401 	orr.w	r4, r4, #1
   1f9b2:	4622      	mov	r2, r4
   1f9b4:	4249      	negs	r1, r1
   1f9b6:	480f      	ldr	r0, [pc, #60]	; (1f9f4 <handle_at_listen+0xc0>)
   1f9b8:	f016 fb41 	bl	3603e <log_1>
		do_socket_close(-errno);
   1f9bc:	f017 fa37 	bl	36e2e <__errno>
   1f9c0:	6800      	ldr	r0, [r0, #0]
   1f9c2:	4240      	negs	r0, r0
   1f9c4:	f7ff faa4 	bl	1ef10 <do_socket_close>
		return -errno;
   1f9c8:	f017 fa31 	bl	36e2e <__errno>
   1f9cc:	6800      	ldr	r0, [r0, #0]
   1f9ce:	4240      	negs	r0, r0
}
   1f9d0:	bd10      	pop	{r4, pc}
	client.sock_peer = INVALID_SOCKET;
   1f9d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return 0;
   1f9d6:	2000      	movs	r0, #0
	client.sock_peer = INVALID_SOCKET;
   1f9d8:	60e3      	str	r3, [r4, #12]
	return 0;
   1f9da:	e7f9      	b.n	1f9d0 <handle_at_listen+0x9c>
   1f9dc:	20023348 	.word	0x20023348
   1f9e0:	00039b20 	.word	0x00039b20
   1f9e4:	00039a50 	.word	0x00039a50
   1f9e8:	0003aad3 	.word	0x0003aad3
   1f9ec:	0003ab90 	.word	0x0003ab90
   1f9f0:	0003acb9 	.word	0x0003acb9
   1f9f4:	0003adfe 	.word	0x0003adfe

0001f9f8 <handle_at_connect>:
	int size = TCPIP_MAX_URL;
   1f9f8:	2380      	movs	r3, #128	; 0x80
{
   1f9fa:	b570      	push	{r4, r5, r6, lr}
   1f9fc:	b0a4      	sub	sp, #144	; 0x90
	int size = TCPIP_MAX_URL;
   1f9fe:	9303      	str	r3, [sp, #12]
	if (client.sock < 0) {
   1fa00:	4b56      	ldr	r3, [pc, #344]	; (1fb5c <handle_at_connect+0x164>)
{
   1fa02:	4605      	mov	r5, r0
	if (client.sock < 0) {
   1fa04:	681a      	ldr	r2, [r3, #0]
   1fa06:	461e      	mov	r6, r3
   1fa08:	2a00      	cmp	r2, #0
   1fa0a:	da0c      	bge.n	1fa26 <handle_at_connect+0x2e>
   1fa0c:	4954      	ldr	r1, [pc, #336]	; (1fb60 <handle_at_connect+0x168>)
   1fa0e:	4b55      	ldr	r3, [pc, #340]	; (1fb64 <handle_at_connect+0x16c>)
		LOG_ERR("Socket not opened yet");
   1fa10:	4855      	ldr	r0, [pc, #340]	; (1fb68 <handle_at_connect+0x170>)
   1fa12:	1ac9      	subs	r1, r1, r3
   1fa14:	08c9      	lsrs	r1, r1, #3
   1fa16:	0189      	lsls	r1, r1, #6
   1fa18:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
   1fa1c:	f016 fb00 	bl	36020 <log_0>
			return -EINVAL;
   1fa20:	f06f 0415 	mvn.w	r4, #21
   1fa24:	e049      	b.n	1faba <handle_at_connect+0xc2>
	if (client.role != AT_SOCKET_ROLE_CLIENT) {
   1fa26:	689c      	ldr	r4, [r3, #8]
   1fa28:	b144      	cbz	r4, 1fa3c <handle_at_connect+0x44>
   1fa2a:	494d      	ldr	r1, [pc, #308]	; (1fb60 <handle_at_connect+0x168>)
   1fa2c:	4b4d      	ldr	r3, [pc, #308]	; (1fb64 <handle_at_connect+0x16c>)
		LOG_ERR("Invalid role");
   1fa2e:	484f      	ldr	r0, [pc, #316]	; (1fb6c <handle_at_connect+0x174>)
   1fa30:	1ac9      	subs	r1, r1, r3
   1fa32:	08c9      	lsrs	r1, r1, #3
   1fa34:	0189      	lsls	r1, r1, #6
   1fa36:	f041 0101 	orr.w	r1, r1, #1
   1fa3a:	e7ef      	b.n	1fa1c <handle_at_connect+0x24>
	switch (cmd_type) {
   1fa3c:	2801      	cmp	r0, #1
   1fa3e:	d007      	beq.n	1fa50 <handle_at_connect+0x58>
   1fa40:	2802      	cmp	r0, #2
   1fa42:	d1ed      	bne.n	1fa20 <handle_at_connect+0x28>
		if (client.connected) {
   1fa44:	7d1b      	ldrb	r3, [r3, #20]
   1fa46:	2b00      	cmp	r3, #0
   1fa48:	f000 8085 	beq.w	1fb56 <handle_at_connect+0x15e>
			sprintf(rsp_buf, "+XCONNECT: 1\r\n");
   1fa4c:	4948      	ldr	r1, [pc, #288]	; (1fb70 <handle_at_connect+0x178>)
   1fa4e:	e077      	b.n	1fb40 <handle_at_connect+0x148>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1fa50:	4848      	ldr	r0, [pc, #288]	; (1fb74 <handle_at_connect+0x17c>)
   1fa52:	f018 fadb 	bl	3800c <at_params_valid_count_get>
   1fa56:	2802      	cmp	r0, #2
   1fa58:	d9e2      	bls.n	1fa20 <handle_at_connect+0x28>
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1fa5a:	4629      	mov	r1, r5
   1fa5c:	4845      	ldr	r0, [pc, #276]	; (1fb74 <handle_at_connect+0x17c>)
   1fa5e:	ab03      	add	r3, sp, #12
   1fa60:	aa04      	add	r2, sp, #16
   1fa62:	f018 fab0 	bl	37fc6 <at_params_string_get>
		if (err) {
   1fa66:	4604      	mov	r4, r0
   1fa68:	bb38      	cbnz	r0, 1faba <handle_at_connect+0xc2>
		url[size] = '\0';
   1fa6a:	9b03      	ldr	r3, [sp, #12]
   1fa6c:	aa24      	add	r2, sp, #144	; 0x90
   1fa6e:	4413      	add	r3, r2
   1fa70:	f803 0c80 	strb.w	r0, [r3, #-128]
		err = at_params_short_get(&at_param_list, 2, &port);
   1fa74:	2102      	movs	r1, #2
   1fa76:	483f      	ldr	r0, [pc, #252]	; (1fb74 <handle_at_connect+0x17c>)
   1fa78:	f10d 020a 	add.w	r2, sp, #10
   1fa7c:	f018 fa7e 	bl	37f7c <at_params_short_get>
		if (err) {
   1fa80:	4604      	mov	r4, r0
   1fa82:	b9d0      	cbnz	r0, 1faba <handle_at_connect+0xc2>
	if (check_for_ipv4(url, strlen(url))) {
   1fa84:	a804      	add	r0, sp, #16
		err = do_connect(url, port);
   1fa86:	f8bd 400a 	ldrh.w	r4, [sp, #10]
	if (check_for_ipv4(url, strlen(url))) {
   1fa8a:	f7fd faf1 	bl	1d070 <strlen>
   1fa8e:	b2c1      	uxtb	r1, r0
   1fa90:	a804      	add	r0, sp, #16
   1fa92:	f015 fda7 	bl	355e4 <check_for_ipv4>
   1fa96:	b198      	cbz	r0, 1fac0 <handle_at_connect+0xc8>
		ret = parse_host_by_ipv4(url, port);
   1fa98:	4621      	mov	r1, r4
   1fa9a:	a804      	add	r0, sp, #16
   1fa9c:	f7ff f896 	bl	1ebcc <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
   1faa0:	4604      	mov	r4, r0
	if (ret) {
   1faa2:	b198      	cbz	r0, 1facc <handle_at_connect+0xd4>
   1faa4:	4a2e      	ldr	r2, [pc, #184]	; (1fb60 <handle_at_connect+0x168>)
   1faa6:	4b2f      	ldr	r3, [pc, #188]	; (1fb64 <handle_at_connect+0x16c>)
		LOG_ERR("Parse failed: %d", ret);
   1faa8:	4601      	mov	r1, r0
   1faaa:	1ad2      	subs	r2, r2, r3
   1faac:	08d2      	lsrs	r2, r2, #3
   1faae:	0192      	lsls	r2, r2, #6
   1fab0:	4831      	ldr	r0, [pc, #196]	; (1fb78 <handle_at_connect+0x180>)
   1fab2:	f042 0201 	orr.w	r2, r2, #1
   1fab6:	f016 fac2 	bl	3603e <log_1>
}
   1faba:	4620      	mov	r0, r4
   1fabc:	b024      	add	sp, #144	; 0x90
   1fabe:	bd70      	pop	{r4, r5, r6, pc}
		ret = parse_host_by_name(url, port, SOCK_STREAM);
   1fac0:	462a      	mov	r2, r5
   1fac2:	4621      	mov	r1, r4
   1fac4:	a804      	add	r0, sp, #16
   1fac6:	f7ff f895 	bl	1ebf4 <parse_host_by_name>
   1faca:	e7e9      	b.n	1faa0 <handle_at_connect+0xa8>
	if (client.sec_tag != INVALID_SEC_TAG) {
   1facc:	6873      	ldr	r3, [r6, #4]
   1face:	3301      	adds	r3, #1
   1fad0:	d012      	beq.n	1faf8 <handle_at_connect+0x100>
		ret = setsockopt(client.sock, SOL_TLS,
   1fad2:	a804      	add	r0, sp, #16
   1fad4:	6835      	ldr	r5, [r6, #0]
   1fad6:	f7fd facb 	bl	1d070 <strlen>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1fada:	2202      	movs	r2, #2
   1fadc:	9000      	str	r0, [sp, #0]
   1fade:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1fae2:	4628      	mov	r0, r5
   1fae4:	ab04      	add	r3, sp, #16
   1fae6:	f016 ff67 	bl	369b8 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   1faea:	2800      	cmp	r0, #0
   1faec:	da04      	bge.n	1faf8 <handle_at_connect+0x100>
			printk("Failed to set TLS_HOSTNAME\n");
   1faee:	4823      	ldr	r0, [pc, #140]	; (1fb7c <handle_at_connect+0x184>)
   1faf0:	f015 fe24 	bl	3573c <printk>
			ret = -errno;
   1faf4:	f017 f99b 	bl	36e2e <__errno>
	ret = connect(client.sock, (struct sockaddr *)&remote,
   1faf8:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   1fafa:	2208      	movs	r2, #8
   1fafc:	4920      	ldr	r1, [pc, #128]	; (1fb80 <handle_at_connect+0x188>)
   1fafe:	f016 febf 	bl	36880 <z_impl_zsock_connect>
	if (ret < 0) {
   1fb02:	2800      	cmp	r0, #0
   1fb04:	da19      	bge.n	1fb3a <handle_at_connect+0x142>
   1fb06:	4a17      	ldr	r2, [pc, #92]	; (1fb64 <handle_at_connect+0x16c>)
   1fb08:	4c15      	ldr	r4, [pc, #84]	; (1fb60 <handle_at_connect+0x168>)
   1fb0a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect() failed: %d", -errno);
   1fb0c:	f017 f98f 	bl	36e2e <__errno>
   1fb10:	08e4      	lsrs	r4, r4, #3
   1fb12:	6801      	ldr	r1, [r0, #0]
   1fb14:	01a4      	lsls	r4, r4, #6
   1fb16:	f044 0401 	orr.w	r4, r4, #1
   1fb1a:	4622      	mov	r2, r4
   1fb1c:	4249      	negs	r1, r1
   1fb1e:	4819      	ldr	r0, [pc, #100]	; (1fb84 <handle_at_connect+0x18c>)
   1fb20:	f016 fa8d 	bl	3603e <log_1>
		do_socket_close(-errno);
   1fb24:	f017 f983 	bl	36e2e <__errno>
   1fb28:	6800      	ldr	r0, [r0, #0]
   1fb2a:	4240      	negs	r0, r0
   1fb2c:	f7ff f9f0 	bl	1ef10 <do_socket_close>
		return -errno;
   1fb30:	f017 f97d 	bl	36e2e <__errno>
   1fb34:	6804      	ldr	r4, [r0, #0]
   1fb36:	4264      	negs	r4, r4
   1fb38:	e7bf      	b.n	1faba <handle_at_connect+0xc2>
	client.connected = true;
   1fb3a:	2301      	movs	r3, #1
	sprintf(rsp_buf, "#XCONNECT: 1\r\n");
   1fb3c:	4912      	ldr	r1, [pc, #72]	; (1fb88 <handle_at_connect+0x190>)
	client.connected = true;
   1fb3e:	7533      	strb	r3, [r6, #20]
			sprintf(rsp_buf, "+XCONNECT: 0\r\n");
   1fb40:	4812      	ldr	r0, [pc, #72]	; (1fb8c <handle_at_connect+0x194>)
   1fb42:	f019 f95b 	bl	38dfc <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1fb46:	4811      	ldr	r0, [pc, #68]	; (1fb8c <handle_at_connect+0x194>)
   1fb48:	f7fd fa92 	bl	1d070 <strlen>
   1fb4c:	4601      	mov	r1, r0
   1fb4e:	480f      	ldr	r0, [pc, #60]	; (1fb8c <handle_at_connect+0x194>)
   1fb50:	f7fe fb4a 	bl	1e1e8 <rsp_send>
		break;
   1fb54:	e7b1      	b.n	1faba <handle_at_connect+0xc2>
			sprintf(rsp_buf, "+XCONNECT: 0\r\n");
   1fb56:	490e      	ldr	r1, [pc, #56]	; (1fb90 <handle_at_connect+0x198>)
   1fb58:	e7f2      	b.n	1fb40 <handle_at_connect+0x148>
   1fb5a:	bf00      	nop
   1fb5c:	20023348 	.word	0x20023348
   1fb60:	00039b20 	.word	0x00039b20
   1fb64:	00039a50 	.word	0x00039a50
   1fb68:	0003aad3 	.word	0x0003aad3
   1fb6c:	0003ab90 	.word	0x0003ab90
   1fb70:	0003ae52 	.word	0x0003ae52
   1fb74:	20023308 	.word	0x20023308
   1fb78:	0003acca 	.word	0x0003acca
   1fb7c:	0003ae12 	.word	0x0003ae12
   1fb80:	20023360 	.word	0x20023360
   1fb84:	0003ae2e 	.word	0x0003ae2e
   1fb88:	0003ae43 	.word	0x0003ae43
   1fb8c:	200287b0 	.word	0x200287b0
   1fb90:	0003ae61 	.word	0x0003ae61

0001fb94 <handle_at_bind>:
{
   1fb94:	b530      	push	{r4, r5, lr}
	if (client.sock < 0) {
   1fb96:	4d46      	ldr	r5, [pc, #280]	; (1fcb0 <handle_at_bind+0x11c>)
{
   1fb98:	4604      	mov	r4, r0
	if (client.sock < 0) {
   1fb9a:	682b      	ldr	r3, [r5, #0]
{
   1fb9c:	b085      	sub	sp, #20
	if (client.sock < 0) {
   1fb9e:	2b00      	cmp	r3, #0
   1fba0:	da03      	bge.n	1fbaa <handle_at_bind+0x16>
   1fba2:	f7fe ff57 	bl	1ea54 <handle_at_bind.part.0>
}
   1fba6:	b005      	add	sp, #20
   1fba8:	bd30      	pop	{r4, r5, pc}
	switch (cmd_type) {
   1fbaa:	2801      	cmp	r0, #1
   1fbac:	d002      	beq.n	1fbb4 <handle_at_bind+0x20>
		return -EINVAL;
   1fbae:	f06f 0015 	mvn.w	r0, #21
   1fbb2:	e7f8      	b.n	1fba6 <handle_at_bind+0x12>
		if (at_params_valid_count_get(&at_param_list) < 2) {
   1fbb4:	483f      	ldr	r0, [pc, #252]	; (1fcb4 <handle_at_bind+0x120>)
   1fbb6:	f018 fa29 	bl	3800c <at_params_valid_count_get>
   1fbba:	2801      	cmp	r0, #1
   1fbbc:	d9f7      	bls.n	1fbae <handle_at_bind+0x1a>
		err = at_params_short_get(&at_param_list, 1, &port);
   1fbbe:	4621      	mov	r1, r4
   1fbc0:	483c      	ldr	r0, [pc, #240]	; (1fcb4 <handle_at_bind+0x120>)
   1fbc2:	f10d 0206 	add.w	r2, sp, #6
   1fbc6:	f018 f9d9 	bl	37f7c <at_params_short_get>
		if (err < 0) {
   1fbca:	2800      	cmp	r0, #0
   1fbcc:	dbeb      	blt.n	1fba6 <handle_at_bind+0x12>
		err = do_bind(port);
   1fbce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	ret = modem_info_params_get(&modem_param);
   1fbd2:	4839      	ldr	r0, [pc, #228]	; (1fcb8 <handle_at_bind+0x124>)
	local.sin_port = htons(port);
   1fbd4:	0213      	lsls	r3, r2, #8
   1fbd6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	local.sin_family = AF_INET;
   1fbda:	f8ad 4008 	strh.w	r4, [sp, #8]
	local.sin_port = htons(port);
   1fbde:	f8ad 300a 	strh.w	r3, [sp, #10]
	ret = modem_info_params_get(&modem_param);
   1fbe2:	f009 f861 	bl	28ca8 <modem_info_params_get>
	if (ret) {
   1fbe6:	4601      	mov	r1, r0
   1fbe8:	b160      	cbz	r0, 1fc04 <handle_at_bind+0x70>
   1fbea:	4a34      	ldr	r2, [pc, #208]	; (1fcbc <handle_at_bind+0x128>)
   1fbec:	4b34      	ldr	r3, [pc, #208]	; (1fcc0 <handle_at_bind+0x12c>)
		LOG_ERR("Unable to obtain modem parameters (%d)", ret);
   1fbee:	4835      	ldr	r0, [pc, #212]	; (1fcc4 <handle_at_bind+0x130>)
   1fbf0:	1ad2      	subs	r2, r2, r3
   1fbf2:	08d2      	lsrs	r2, r2, #3
   1fbf4:	0192      	lsls	r2, r2, #6
   1fbf6:	f042 0201 	orr.w	r2, r2, #1
   1fbfa:	f016 fa20 	bl	3603e <log_1>
		return -1;
   1fbfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fc02:	e7d0      	b.n	1fba6 <handle_at_bind+0x12>
	addr_len = strlen(modem_param.network.ip_address.value_string);
   1fc04:	4830      	ldr	r0, [pc, #192]	; (1fcc8 <handle_at_bind+0x134>)
   1fc06:	f7fd fa33 	bl	1d070 <strlen>
	if (addr_len == 0) {
   1fc0a:	b950      	cbnz	r0, 1fc22 <handle_at_bind+0x8e>
   1fc0c:	492b      	ldr	r1, [pc, #172]	; (1fcbc <handle_at_bind+0x128>)
   1fc0e:	4b2c      	ldr	r3, [pc, #176]	; (1fcc0 <handle_at_bind+0x12c>)
		LOG_ERR("LTE not connected yet");
   1fc10:	482e      	ldr	r0, [pc, #184]	; (1fccc <handle_at_bind+0x138>)
   1fc12:	1ac9      	subs	r1, r1, r3
   1fc14:	08c9      	lsrs	r1, r1, #3
   1fc16:	0189      	lsls	r1, r1, #6
   1fc18:	f041 0101 	orr.w	r1, r1, #1
   1fc1c:	f016 fa00 	bl	36020 <log_0>
   1fc20:	e7ed      	b.n	1fbfe <handle_at_bind+0x6a>
	if (!check_for_ipv4(modem_param.network.ip_address.value_string,
   1fc22:	b2c1      	uxtb	r1, r0
   1fc24:	4828      	ldr	r0, [pc, #160]	; (1fcc8 <handle_at_bind+0x134>)
   1fc26:	f015 fcdd 	bl	355e4 <check_for_ipv4>
   1fc2a:	b940      	cbnz	r0, 1fc3e <handle_at_bind+0xaa>
   1fc2c:	4923      	ldr	r1, [pc, #140]	; (1fcbc <handle_at_bind+0x128>)
   1fc2e:	4b24      	ldr	r3, [pc, #144]	; (1fcc0 <handle_at_bind+0x12c>)
		LOG_ERR("Invalid local address");
   1fc30:	4827      	ldr	r0, [pc, #156]	; (1fcd0 <handle_at_bind+0x13c>)
   1fc32:	1ac9      	subs	r1, r1, r3
   1fc34:	08c9      	lsrs	r1, r1, #3
   1fc36:	0189      	lsls	r1, r1, #6
   1fc38:	f041 0101 	orr.w	r1, r1, #1
   1fc3c:	e7ee      	b.n	1fc1c <handle_at_bind+0x88>
	return z_impl_zsock_inet_pton(family, src, dst);
   1fc3e:	4922      	ldr	r1, [pc, #136]	; (1fcc8 <handle_at_bind+0x134>)
   1fc40:	4620      	mov	r0, r4
   1fc42:	aa03      	add	r2, sp, #12
   1fc44:	f016 fe96 	bl	36974 <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, modem_param.network.ip_address.value_string,
   1fc48:	2801      	cmp	r0, #1
   1fc4a:	d00f      	beq.n	1fc6c <handle_at_bind+0xd8>
   1fc4c:	4a1c      	ldr	r2, [pc, #112]	; (1fcc0 <handle_at_bind+0x12c>)
   1fc4e:	4c1b      	ldr	r4, [pc, #108]	; (1fcbc <handle_at_bind+0x128>)
   1fc50:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Parse local IP address failed: %d", -errno);
   1fc52:	f017 f8ec 	bl	36e2e <__errno>
   1fc56:	08e4      	lsrs	r4, r4, #3
   1fc58:	6801      	ldr	r1, [r0, #0]
   1fc5a:	01a4      	lsls	r4, r4, #6
   1fc5c:	f044 0401 	orr.w	r4, r4, #1
   1fc60:	4622      	mov	r2, r4
   1fc62:	481c      	ldr	r0, [pc, #112]	; (1fcd4 <handle_at_bind+0x140>)
   1fc64:	4249      	negs	r1, r1
   1fc66:	f016 f9ea 	bl	3603e <log_1>
   1fc6a:	e7a0      	b.n	1fbae <handle_at_bind+0x1a>
	ret = bind(client.sock, (struct sockaddr *)&local,
   1fc6c:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_bind(sock, addr, addrlen);
   1fc6e:	2208      	movs	r2, #8
   1fc70:	eb0d 0102 	add.w	r1, sp, r2
   1fc74:	f016 fdee 	bl	36854 <z_impl_zsock_bind>
	if (ret) {
   1fc78:	2800      	cmp	r0, #0
   1fc7a:	d094      	beq.n	1fba6 <handle_at_bind+0x12>
   1fc7c:	4a10      	ldr	r2, [pc, #64]	; (1fcc0 <handle_at_bind+0x12c>)
   1fc7e:	4c0f      	ldr	r4, [pc, #60]	; (1fcbc <handle_at_bind+0x128>)
   1fc80:	1aa4      	subs	r4, r4, r2
		LOG_ERR("bind() failed: %d", -errno);
   1fc82:	f017 f8d4 	bl	36e2e <__errno>
   1fc86:	08e4      	lsrs	r4, r4, #3
   1fc88:	6801      	ldr	r1, [r0, #0]
   1fc8a:	01a4      	lsls	r4, r4, #6
   1fc8c:	f044 0401 	orr.w	r4, r4, #1
   1fc90:	4622      	mov	r2, r4
   1fc92:	4249      	negs	r1, r1
   1fc94:	4810      	ldr	r0, [pc, #64]	; (1fcd8 <handle_at_bind+0x144>)
   1fc96:	f016 f9d2 	bl	3603e <log_1>
		do_socket_close(-errno);
   1fc9a:	f017 f8c8 	bl	36e2e <__errno>
   1fc9e:	6800      	ldr	r0, [r0, #0]
   1fca0:	4240      	negs	r0, r0
   1fca2:	f7ff f935 	bl	1ef10 <do_socket_close>
		return -errno;
   1fca6:	f017 f8c2 	bl	36e2e <__errno>
   1fcaa:	6800      	ldr	r0, [r0, #0]
   1fcac:	4240      	negs	r0, r0
		break;
   1fcae:	e77a      	b.n	1fba6 <handle_at_bind+0x12>
   1fcb0:	20023348 	.word	0x20023348
   1fcb4:	20023308 	.word	0x20023308
   1fcb8:	200208a0 	.word	0x200208a0
   1fcbc:	00039b20 	.word	0x00039b20
   1fcc0:	00039a50 	.word	0x00039a50
   1fcc4:	0003ae70 	.word	0x0003ae70
   1fcc8:	20020bb2 	.word	0x20020bb2
   1fccc:	0003ae97 	.word	0x0003ae97
   1fcd0:	0003aead 	.word	0x0003aead
   1fcd4:	0003aec3 	.word	0x0003aec3
   1fcd8:	0003aee5 	.word	0x0003aee5

0001fcdc <handle_at_socket>:
{
   1fcdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cmd_type) {
   1fcde:	2802      	cmp	r0, #2
{
   1fce0:	4604      	mov	r4, r0
   1fce2:	b08b      	sub	sp, #44	; 0x2c
	switch (cmd_type) {
   1fce4:	f000 8101 	beq.w	1feea <handle_at_socket+0x20e>
   1fce8:	2803      	cmp	r0, #3
   1fcea:	f000 811c 	beq.w	1ff26 <handle_at_socket+0x24a>
   1fcee:	2801      	cmp	r0, #1
   1fcf0:	d144      	bne.n	1fd7c <handle_at_socket+0xa0>
		if (at_params_valid_count_get(&at_param_list) < 2) {
   1fcf2:	489b      	ldr	r0, [pc, #620]	; (1ff60 <handle_at_socket+0x284>)
   1fcf4:	f018 f98a 	bl	3800c <at_params_valid_count_get>
   1fcf8:	2801      	cmp	r0, #1
   1fcfa:	d93f      	bls.n	1fd7c <handle_at_socket+0xa0>
		err = at_params_short_get(&at_param_list, 1, &op);
   1fcfc:	4621      	mov	r1, r4
   1fcfe:	4898      	ldr	r0, [pc, #608]	; (1ff60 <handle_at_socket+0x284>)
   1fd00:	f10d 021a 	add.w	r2, sp, #26
   1fd04:	f018 f93a 	bl	37f7c <at_params_short_get>
		if (err) {
   1fd08:	4604      	mov	r4, r0
   1fd0a:	2800      	cmp	r0, #0
   1fd0c:	f040 808f 	bne.w	1fe2e <handle_at_socket+0x152>
		if (op == AT_SOCKET_OPEN) {
   1fd10:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1fd14:	2b01      	cmp	r3, #1
   1fd16:	f040 80d5 	bne.w	1fec4 <handle_at_socket+0x1e8>
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   1fd1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (at_params_valid_count_get(&at_param_list) < 4) {
   1fd1e:	4890      	ldr	r0, [pc, #576]	; (1ff60 <handle_at_socket+0x284>)
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   1fd20:	9308      	str	r3, [sp, #32]
			if (at_params_valid_count_get(&at_param_list) < 4) {
   1fd22:	f018 f973 	bl	3800c <at_params_valid_count_get>
   1fd26:	2803      	cmp	r0, #3
   1fd28:	d928      	bls.n	1fd7c <handle_at_socket+0xa0>
			err = at_params_short_get(&at_param_list, 2, &type);
   1fd2a:	2102      	movs	r1, #2
   1fd2c:	488c      	ldr	r0, [pc, #560]	; (1ff60 <handle_at_socket+0x284>)
   1fd2e:	f10d 021e 	add.w	r2, sp, #30
   1fd32:	f018 f923 	bl	37f7c <at_params_short_get>
			if (err) {
   1fd36:	4604      	mov	r4, r0
   1fd38:	2800      	cmp	r0, #0
   1fd3a:	d178      	bne.n	1fe2e <handle_at_socket+0x152>
			err = at_params_short_get(&at_param_list, 3, &role);
   1fd3c:	2103      	movs	r1, #3
   1fd3e:	4888      	ldr	r0, [pc, #544]	; (1ff60 <handle_at_socket+0x284>)
   1fd40:	aa07      	add	r2, sp, #28
   1fd42:	f018 f91b 	bl	37f7c <at_params_short_get>
			if (err) {
   1fd46:	4604      	mov	r4, r0
   1fd48:	2800      	cmp	r0, #0
   1fd4a:	d170      	bne.n	1fe2e <handle_at_socket+0x152>
			if (at_params_valid_count_get(&at_param_list) > 4) {
   1fd4c:	4884      	ldr	r0, [pc, #528]	; (1ff60 <handle_at_socket+0x284>)
   1fd4e:	f018 f95d 	bl	3800c <at_params_valid_count_get>
   1fd52:	2804      	cmp	r0, #4
   1fd54:	d904      	bls.n	1fd60 <handle_at_socket+0x84>
				at_params_int_get(&at_param_list, 4, &sec_tag);
   1fd56:	2104      	movs	r1, #4
   1fd58:	4881      	ldr	r0, [pc, #516]	; (1ff60 <handle_at_socket+0x284>)
   1fd5a:	aa08      	add	r2, sp, #32
   1fd5c:	f018 f920 	bl	37fa0 <at_params_int_get>
			if (client.sock > 0) {
   1fd60:	4d80      	ldr	r5, [pc, #512]	; (1ff64 <handle_at_socket+0x288>)
   1fd62:	682b      	ldr	r3, [r5, #0]
   1fd64:	2b00      	cmp	r3, #0
   1fd66:	dd0c      	ble.n	1fd82 <handle_at_socket+0xa6>
   1fd68:	497f      	ldr	r1, [pc, #508]	; (1ff68 <handle_at_socket+0x28c>)
   1fd6a:	4b80      	ldr	r3, [pc, #512]	; (1ff6c <handle_at_socket+0x290>)
				LOG_WRN("Socket is already opened");
   1fd6c:	4880      	ldr	r0, [pc, #512]	; (1ff70 <handle_at_socket+0x294>)
   1fd6e:	1ac9      	subs	r1, r1, r3
   1fd70:	08c9      	lsrs	r1, r1, #3
   1fd72:	0189      	lsls	r1, r1, #6
   1fd74:	f041 0102 	orr.w	r1, r1, #2
				LOG_WRN("Socket is not opened yet");
   1fd78:	f016 f952 	bl	36020 <log_0>
			return -EINVAL;
   1fd7c:	f06f 0415 	mvn.w	r4, #21
   1fd80:	e055      	b.n	1fe2e <handle_at_socket+0x152>
				err = do_socket_open(type, role, sec_tag);
   1fd82:	f89d 601e 	ldrb.w	r6, [sp, #30]
   1fd86:	9b08      	ldr	r3, [sp, #32]
	if (type == SOCK_STREAM) {
   1fd88:	2e01      	cmp	r6, #1
				err = do_socket_open(type, role, sec_tag);
   1fd8a:	f89d 701c 	ldrb.w	r7, [sp, #28]
	client.sec_tag = sec_tag;
   1fd8e:	606b      	str	r3, [r5, #4]
	if (type == SOCK_STREAM) {
   1fd90:	d12a      	bne.n	1fde8 <handle_at_socket+0x10c>
		if (sec_tag == INVALID_SEC_TAG) {
   1fd92:	3301      	adds	r3, #1
   1fd94:	d11e      	bne.n	1fdd4 <handle_at_socket+0xf8>
	return z_impl_zsock_socket(family, type, proto);
   1fd96:	2206      	movs	r2, #6
   1fd98:	4631      	mov	r1, r6
   1fd9a:	4630      	mov	r0, r6
   1fd9c:	f004 f9ec 	bl	24178 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_TCP;
   1fda0:	2306      	movs	r3, #6
			client.sock = socket(AF_INET, SOCK_STREAM,
   1fda2:	6028      	str	r0, [r5, #0]
	if (client.sock < 0) {
   1fda4:	6828      	ldr	r0, [r5, #0]
			client.ip_proto = IPPROTO_DTLS_1_2;
   1fda6:	612b      	str	r3, [r5, #16]
	if (client.sock < 0) {
   1fda8:	2800      	cmp	r0, #0
   1fdaa:	da43      	bge.n	1fe34 <handle_at_socket+0x158>
   1fdac:	4a6f      	ldr	r2, [pc, #444]	; (1ff6c <handle_at_socket+0x290>)
   1fdae:	4c6e      	ldr	r4, [pc, #440]	; (1ff68 <handle_at_socket+0x28c>)
   1fdb0:	1aa4      	subs	r4, r4, r2
   1fdb2:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("socket() failed: %d", -errno);
   1fdb4:	f017 f83b 	bl	36e2e <__errno>
   1fdb8:	01a4      	lsls	r4, r4, #6
   1fdba:	f044 0401 	orr.w	r4, r4, #1
   1fdbe:	4622      	mov	r2, r4
   1fdc0:	6801      	ldr	r1, [r0, #0]
   1fdc2:	486c      	ldr	r0, [pc, #432]	; (1ff74 <handle_at_socket+0x298>)
   1fdc4:	4249      	negs	r1, r1
			LOG_ERR("set (d)tls tag list failed: %d", -errno);
   1fdc6:	f016 f93a 	bl	3603e <log_1>
			ret = -errno;
   1fdca:	f017 f830 	bl	36e2e <__errno>
   1fdce:	6804      	ldr	r4, [r0, #0]
   1fdd0:	4264      	negs	r4, r4
			goto error_exit;
   1fdd2:	e042      	b.n	1fe5a <handle_at_socket+0x17e>
   1fdd4:	f44f 7281 	mov.w	r2, #258	; 0x102
   1fdd8:	4631      	mov	r1, r6
   1fdda:	4630      	mov	r0, r6
   1fddc:	f004 f9cc 	bl	24178 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_TLS_1_2;
   1fde0:	f44f 7381 	mov.w	r3, #258	; 0x102
			client.sock = socket(AF_INET, SOCK_STREAM,
   1fde4:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_TLS_1_2;
   1fde6:	e7dd      	b.n	1fda4 <handle_at_socket+0xc8>
	} else if (type == SOCK_DGRAM) {
   1fde8:	2e02      	cmp	r6, #2
   1fdea:	d113      	bne.n	1fe14 <handle_at_socket+0x138>
		if (sec_tag == INVALID_SEC_TAG) {
   1fdec:	3301      	adds	r3, #1
   1fdee:	d107      	bne.n	1fe00 <handle_at_socket+0x124>
   1fdf0:	2211      	movs	r2, #17
   1fdf2:	4631      	mov	r1, r6
   1fdf4:	2001      	movs	r0, #1
   1fdf6:	f004 f9bf 	bl	24178 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_UDP;
   1fdfa:	2311      	movs	r3, #17
			client.sock = socket(AF_INET, SOCK_DGRAM,
   1fdfc:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_UDP;
   1fdfe:	e7d1      	b.n	1fda4 <handle_at_socket+0xc8>
   1fe00:	f240 1211 	movw	r2, #273	; 0x111
   1fe04:	4631      	mov	r1, r6
   1fe06:	2001      	movs	r0, #1
   1fe08:	f004 f9b6 	bl	24178 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_DTLS_1_2;
   1fe0c:	f240 1311 	movw	r3, #273	; 0x111
			client.sock = socket(AF_INET, SOCK_DGRAM,
   1fe10:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_DTLS_1_2;
   1fe12:	e7c7      	b.n	1fda4 <handle_at_socket+0xc8>
   1fe14:	4b55      	ldr	r3, [pc, #340]	; (1ff6c <handle_at_socket+0x290>)
   1fe16:	4a54      	ldr	r2, [pc, #336]	; (1ff68 <handle_at_socket+0x28c>)
		LOG_ERR("socket type %d not supported", type);
   1fe18:	4631      	mov	r1, r6
   1fe1a:	1ad2      	subs	r2, r2, r3
   1fe1c:	08d2      	lsrs	r2, r2, #3
   1fe1e:	0192      	lsls	r2, r2, #6
   1fe20:	4855      	ldr	r0, [pc, #340]	; (1ff78 <handle_at_socket+0x29c>)
   1fe22:	f042 0201 	orr.w	r2, r2, #1
   1fe26:	f016 f90a 	bl	3603e <log_1>
		return -ENOTSUP;
   1fe2a:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   1fe2e:	4620      	mov	r0, r4
   1fe30:	b00b      	add	sp, #44	; 0x2c
   1fe32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (client.sec_tag != INVALID_SEC_TAG) {
   1fe34:	686b      	ldr	r3, [r5, #4]
   1fe36:	1c5a      	adds	r2, r3, #1
   1fe38:	d02e      	beq.n	1fe98 <handle_at_socket+0x1bc>
		if (role == AT_SOCKET_ROLE_SERVER) {
   1fe3a:	2f01      	cmp	r7, #1
		sec_tag_t sec_tag_list[1] = { client.sec_tag };
   1fe3c:	9309      	str	r3, [sp, #36]	; 0x24
		if (role == AT_SOCKET_ROLE_SERVER) {
   1fe3e:	d114      	bne.n	1fe6a <handle_at_socket+0x18e>
			sprintf(rsp_buf,
   1fe40:	494e      	ldr	r1, [pc, #312]	; (1ff7c <handle_at_socket+0x2a0>)
   1fe42:	484f      	ldr	r0, [pc, #316]	; (1ff80 <handle_at_socket+0x2a4>)
   1fe44:	f018 ffda 	bl	38dfc <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1fe48:	484d      	ldr	r0, [pc, #308]	; (1ff80 <handle_at_socket+0x2a4>)
   1fe4a:	f7fd f911 	bl	1d070 <strlen>
   1fe4e:	4601      	mov	r1, r0
   1fe50:	484b      	ldr	r0, [pc, #300]	; (1ff80 <handle_at_socket+0x2a4>)
   1fe52:	f7fe f9c9 	bl	1e1e8 <rsp_send>
			ret = -ENOTSUP;
   1fe56:	f06f 0485 	mvn.w	r4, #133	; 0x85
	if (client.sock >= 0) {
   1fe5a:	6828      	ldr	r0, [r5, #0]
   1fe5c:	2800      	cmp	r0, #0
   1fe5e:	db01      	blt.n	1fe64 <handle_at_socket+0x188>
	return z_impl_zsock_close(sock);
   1fe60:	f016 fce1 	bl	36826 <z_impl_zsock_close>
	slm_at_tcpip_init();
   1fe64:	f7ff f846 	bl	1eef4 <slm_at_tcpip_init>
	return ret;
   1fe68:	e7e1      	b.n	1fe2e <handle_at_socket+0x152>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1fe6a:	2304      	movs	r3, #4
   1fe6c:	2201      	movs	r2, #1
   1fe6e:	9300      	str	r3, [sp, #0]
   1fe70:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1fe74:	ab09      	add	r3, sp, #36	; 0x24
   1fe76:	f016 fd9f 	bl	369b8 <z_impl_zsock_setsockopt>
		if (ret) {
   1fe7a:	b168      	cbz	r0, 1fe98 <handle_at_socket+0x1bc>
   1fe7c:	4a3b      	ldr	r2, [pc, #236]	; (1ff6c <handle_at_socket+0x290>)
   1fe7e:	4c3a      	ldr	r4, [pc, #232]	; (1ff68 <handle_at_socket+0x28c>)
   1fe80:	1aa4      	subs	r4, r4, r2
			LOG_ERR("set (d)tls tag list failed: %d", -errno);
   1fe82:	f016 ffd4 	bl	36e2e <__errno>
   1fe86:	08e4      	lsrs	r4, r4, #3
   1fe88:	6801      	ldr	r1, [r0, #0]
   1fe8a:	01a4      	lsls	r4, r4, #6
   1fe8c:	f044 0401 	orr.w	r4, r4, #1
   1fe90:	4622      	mov	r2, r4
   1fe92:	483c      	ldr	r0, [pc, #240]	; (1ff84 <handle_at_socket+0x2a8>)
   1fe94:	4249      	negs	r1, r1
   1fe96:	e796      	b.n	1fdc6 <handle_at_socket+0xea>
	sprintf(rsp_buf, "#XSOCKET: %d, %d, %d, %d\r\n", client.sock,
   1fe98:	692b      	ldr	r3, [r5, #16]
   1fe9a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1fe9e:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1fea2:	682b      	ldr	r3, [r5, #0]
   1fea4:	2100      	movs	r1, #0
   1fea6:	9300      	str	r3, [sp, #0]
   1fea8:	4835      	ldr	r0, [pc, #212]	; (1ff80 <handle_at_socket+0x2a4>)
   1feaa:	4b37      	ldr	r3, [pc, #220]	; (1ff88 <handle_at_socket+0x2ac>)
   1feac:	9601      	str	r6, [sp, #4]
	client.role = role;
   1feae:	60af      	str	r7, [r5, #8]
	sprintf(rsp_buf, "#XSOCKET: %d, %d, %d, %d\r\n", client.sock,
   1feb0:	f018 ff7d 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1feb4:	4832      	ldr	r0, [pc, #200]	; (1ff80 <handle_at_socket+0x2a4>)
   1feb6:	f7fd f8db 	bl	1d070 <strlen>
   1feba:	4601      	mov	r1, r0
   1febc:	4830      	ldr	r0, [pc, #192]	; (1ff80 <handle_at_socket+0x2a4>)
   1febe:	f7fe f993 	bl	1e1e8 <rsp_send>
		break;
   1fec2:	e7b4      	b.n	1fe2e <handle_at_socket+0x152>
		} else if (op == AT_SOCKET_CLOSE) {
   1fec4:	2b00      	cmp	r3, #0
   1fec6:	d1b2      	bne.n	1fe2e <handle_at_socket+0x152>
			if (client.sock < 0) {
   1fec8:	4b26      	ldr	r3, [pc, #152]	; (1ff64 <handle_at_socket+0x288>)
   1feca:	681b      	ldr	r3, [r3, #0]
   1fecc:	2b00      	cmp	r3, #0
   1fece:	da08      	bge.n	1fee2 <handle_at_socket+0x206>
   1fed0:	4925      	ldr	r1, [pc, #148]	; (1ff68 <handle_at_socket+0x28c>)
   1fed2:	4b26      	ldr	r3, [pc, #152]	; (1ff6c <handle_at_socket+0x290>)
				LOG_WRN("Socket is not opened yet");
   1fed4:	482d      	ldr	r0, [pc, #180]	; (1ff8c <handle_at_socket+0x2b0>)
   1fed6:	1ac9      	subs	r1, r1, r3
   1fed8:	08c9      	lsrs	r1, r1, #3
   1feda:	0189      	lsls	r1, r1, #6
   1fedc:	f041 0102 	orr.w	r1, r1, #2
   1fee0:	e74a      	b.n	1fd78 <handle_at_socket+0x9c>
				err = do_socket_close(0);
   1fee2:	f7ff f815 	bl	1ef10 <do_socket_close>
   1fee6:	4604      	mov	r4, r0
   1fee8:	e7a1      	b.n	1fe2e <handle_at_socket+0x152>
		if (client.sock != INVALID_SOCKET) {
   1feea:	4b1e      	ldr	r3, [pc, #120]	; (1ff64 <handle_at_socket+0x288>)
   1feec:	681a      	ldr	r2, [r3, #0]
   1feee:	1c51      	adds	r1, r2, #1
   1fef0:	d014      	beq.n	1ff1c <handle_at_socket+0x240>
			sprintf(rsp_buf, "#XSOCKET: %d, %d, %d\r\n",
   1fef2:	6899      	ldr	r1, [r3, #8]
   1fef4:	4822      	ldr	r0, [pc, #136]	; (1ff80 <handle_at_socket+0x2a4>)
   1fef6:	9102      	str	r1, [sp, #8]
   1fef8:	691b      	ldr	r3, [r3, #16]
   1fefa:	2100      	movs	r1, #0
   1fefc:	e9cd 2300 	strd	r2, r3, [sp]
   1ff00:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ff04:	4b22      	ldr	r3, [pc, #136]	; (1ff90 <handle_at_socket+0x2b4>)
   1ff06:	f018 ff52 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ff0a:	481d      	ldr	r0, [pc, #116]	; (1ff80 <handle_at_socket+0x2a4>)
   1ff0c:	f7fd f8b0 	bl	1d070 <strlen>
   1ff10:	4601      	mov	r1, r0
   1ff12:	481b      	ldr	r0, [pc, #108]	; (1ff80 <handle_at_socket+0x2a4>)
   1ff14:	f7fe f968 	bl	1e1e8 <rsp_send>
		err = 0;
   1ff18:	2400      	movs	r4, #0
		break;
   1ff1a:	e788      	b.n	1fe2e <handle_at_socket+0x152>
			sprintf(rsp_buf, "#XSOCKET: 0\r\n");
   1ff1c:	491d      	ldr	r1, [pc, #116]	; (1ff94 <handle_at_socket+0x2b8>)
   1ff1e:	4818      	ldr	r0, [pc, #96]	; (1ff80 <handle_at_socket+0x2a4>)
   1ff20:	f018 ff6c 	bl	38dfc <strcpy>
   1ff24:	e7f1      	b.n	1ff0a <handle_at_socket+0x22e>
		sprintf(rsp_buf, "#XSOCKET: (%d, %d), (%d, %d), (%d, %d)",
   1ff26:	2400      	movs	r4, #0
   1ff28:	2301      	movs	r3, #1
   1ff2a:	2202      	movs	r2, #2
   1ff2c:	4621      	mov	r1, r4
   1ff2e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1ff32:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1ff36:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ff3a:	e9cd 4300 	strd	r4, r3, [sp]
   1ff3e:	4810      	ldr	r0, [pc, #64]	; (1ff80 <handle_at_socket+0x2a4>)
   1ff40:	4b15      	ldr	r3, [pc, #84]	; (1ff98 <handle_at_socket+0x2bc>)
   1ff42:	f018 ff34 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ff46:	480e      	ldr	r0, [pc, #56]	; (1ff80 <handle_at_socket+0x2a4>)
   1ff48:	f7fd f892 	bl	1d070 <strlen>
   1ff4c:	4601      	mov	r1, r0
   1ff4e:	480c      	ldr	r0, [pc, #48]	; (1ff80 <handle_at_socket+0x2a4>)
   1ff50:	f7fe f94a 	bl	1e1e8 <rsp_send>
		sprintf(rsp_buf, ", <sec-tag>\r\n");
   1ff54:	4911      	ldr	r1, [pc, #68]	; (1ff9c <handle_at_socket+0x2c0>)
   1ff56:	480a      	ldr	r0, [pc, #40]	; (1ff80 <handle_at_socket+0x2a4>)
   1ff58:	f018 ff50 	bl	38dfc <strcpy>
   1ff5c:	e7aa      	b.n	1feb4 <handle_at_socket+0x1d8>
   1ff5e:	bf00      	nop
   1ff60:	20023308 	.word	0x20023308
   1ff64:	20023348 	.word	0x20023348
   1ff68:	00039b20 	.word	0x00039b20
   1ff6c:	00039a50 	.word	0x00039a50
   1ff70:	0003aef7 	.word	0x0003aef7
   1ff74:	0003af2d 	.word	0x0003af2d
   1ff78:	0003af10 	.word	0x0003af10
   1ff7c:	0003af41 	.word	0x0003af41
   1ff80:	200287b0 	.word	0x200287b0
   1ff84:	0003af69 	.word	0x0003af69
   1ff88:	0003af88 	.word	0x0003af88
   1ff8c:	0003afa3 	.word	0x0003afa3
   1ff90:	0003afbc 	.word	0x0003afbc
   1ff94:	0003afd3 	.word	0x0003afd3
   1ff98:	0003afe1 	.word	0x0003afe1
   1ff9c:	0003b008 	.word	0x0003b008

0001ffa0 <handle_at_tcp_recv>:
 *  AT#XTCPRECV[=<length>]
 *  AT#XTCPRECV? READ command not supported
 *  AT#XTCPRECV=? TEST command not supported
 */
static int handle_at_tcp_recv(enum at_cmd_type cmd_type)
{
   1ffa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err = -EINVAL;
	uint16_t length = 0;
   1ffa2:	2300      	movs	r3, #0

	switch (cmd_type) {
   1ffa4:	2801      	cmp	r0, #1
{
   1ffa6:	4604      	mov	r4, r0
	uint16_t length = 0;
   1ffa8:	f8ad 300e 	strh.w	r3, [sp, #14]
	switch (cmd_type) {
   1ffac:	d13a      	bne.n	20024 <handle_at_tcp_recv+0x84>
	case AT_CMD_TYPE_SET_COMMAND:
	{
		uint32_t sz_send = 0;

		if (at_params_valid_count_get(&at_param_list) > 1) {
   1ffae:	481f      	ldr	r0, [pc, #124]	; (2002c <handle_at_tcp_recv+0x8c>)
   1ffb0:	f018 f82c 	bl	3800c <at_params_valid_count_get>
   1ffb4:	2801      	cmp	r0, #1
   1ffb6:	d816      	bhi.n	1ffe6 <handle_at_tcp_recv+0x46>
 *
 * @return 1 if the ring buffer is empty, or 0 if not.
 */
static inline int ring_buf_is_empty(struct ring_buf *buf)
{
	return (buf->head == buf->tail);
   1ffb8:	481d      	ldr	r0, [pc, #116]	; (20030 <handle_at_tcp_recv+0x90>)
			err = at_params_short_get(&at_param_list, 1, &length);
			if (err) {
				return err;
			}
		}
		if (ring_buf_is_empty(&data_buf) == 0) {
   1ffba:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ffbe:	429a      	cmp	r2, r3
   1ffc0:	d11b      	bne.n	1fffa <handle_at_tcp_recv+0x5a>
		uint32_t sz_send = 0;
   1ffc2:	2400      	movs	r4, #0
				sz_send = length;
			}
			rsp_send(rsp_buf, sz_send);
			rsp_send("\r\n", 2);
		}
		sprintf(rsp_buf, "#XTCPRECV: %d\r\n", sz_send);
   1ffc4:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ffc8:	2100      	movs	r1, #0
   1ffca:	4b1a      	ldr	r3, [pc, #104]	; (20034 <handle_at_tcp_recv+0x94>)
   1ffcc:	481a      	ldr	r0, [pc, #104]	; (20038 <handle_at_tcp_recv+0x98>)
   1ffce:	9400      	str	r4, [sp, #0]
   1ffd0:	f018 feed 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ffd4:	4818      	ldr	r0, [pc, #96]	; (20038 <handle_at_tcp_recv+0x98>)
   1ffd6:	f7fd f84b 	bl	1d070 <strlen>
   1ffda:	4601      	mov	r1, r0
   1ffdc:	4816      	ldr	r0, [pc, #88]	; (20038 <handle_at_tcp_recv+0x98>)
   1ffde:	f7fe f903 	bl	1e1e8 <rsp_send>
		err = 0;
   1ffe2:	2000      	movs	r0, #0
	} break;
   1ffe4:	e007      	b.n	1fff6 <handle_at_tcp_recv+0x56>
			err = at_params_short_get(&at_param_list, 1, &length);
   1ffe6:	4621      	mov	r1, r4
   1ffe8:	4810      	ldr	r0, [pc, #64]	; (2002c <handle_at_tcp_recv+0x8c>)
   1ffea:	f10d 020e 	add.w	r2, sp, #14
   1ffee:	f017 ffc5 	bl	37f7c <at_params_short_get>
			if (err) {
   1fff2:	2800      	cmp	r0, #0
   1fff4:	d0e0      	beq.n	1ffb8 <handle_at_tcp_recv+0x18>
	default:
		break;
	}

	return err;
}
   1fff6:	b004      	add	sp, #16
   1fff8:	bd10      	pop	{r4, pc}
			sz_send = ring_buf_get(&data_buf, rsp_buf,
   1fffa:	f640 228c 	movw	r2, #2700	; 0xa8c
   1fffe:	490e      	ldr	r1, [pc, #56]	; (20038 <handle_at_tcp_recv+0x98>)
   20000:	f015 ffc9 	bl	35f96 <ring_buf_get>
			if (length > 0 && sz_send > length) {
   20004:	f8bd 300e 	ldrh.w	r3, [sp, #14]
			sz_send = ring_buf_get(&data_buf, rsp_buf,
   20008:	4604      	mov	r4, r0
			if (length > 0 && sz_send > length) {
   2000a:	b113      	cbz	r3, 20012 <handle_at_tcp_recv+0x72>
   2000c:	4298      	cmp	r0, r3
   2000e:	bf28      	it	cs
   20010:	461c      	movcs	r4, r3
			rsp_send(rsp_buf, sz_send);
   20012:	4621      	mov	r1, r4
   20014:	4808      	ldr	r0, [pc, #32]	; (20038 <handle_at_tcp_recv+0x98>)
   20016:	f7fe f8e7 	bl	1e1e8 <rsp_send>
			rsp_send("\r\n", 2);
   2001a:	2102      	movs	r1, #2
   2001c:	4807      	ldr	r0, [pc, #28]	; (2003c <handle_at_tcp_recv+0x9c>)
   2001e:	f7fe f8e3 	bl	1e1e8 <rsp_send>
   20022:	e7cf      	b.n	1ffc4 <handle_at_tcp_recv+0x24>
	int err = -EINVAL;
   20024:	f06f 0015 	mvn.w	r0, #21
   20028:	e7e5      	b.n	1fff6 <handle_at_tcp_recv+0x56>
   2002a:	bf00      	nop
   2002c:	20023308 	.word	0x20023308
   20030:	200200c4 	.word	0x200200c4
   20034:	0003b09a 	.word	0x0003b09a
   20038:	200287b0 	.word	0x200287b0
   2003c:	0003c9a6 	.word	0x0003c9a6

00020040 <slm_at_tcp_proxy_parse>:

/**@brief API to handle TCP proxy AT commands
 */
int slm_at_tcp_proxy_parse(const char *at_cmd, uint16_t length)
{
   20040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20044:	4e41      	ldr	r6, [pc, #260]	; (2014c <slm_at_tcp_proxy_parse+0x10c>)
   20046:	4605      	mov	r5, r0
   20048:	460f      	mov	r7, r1
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   2004a:	2400      	movs	r4, #0
   2004c:	46b0      	mov	r8, r6
		if (slm_util_cmd_casecmp(at_cmd,
   2004e:	4628      	mov	r0, r5
   20050:	6871      	ldr	r1, [r6, #4]
   20052:	f7fd ff63 	bl	1df1c <slm_util_cmd_casecmp>
   20056:	2800      	cmp	r0, #0
   20058:	d035      	beq.n	200c6 <slm_at_tcp_proxy_parse+0x86>
			tcp_proxy_at_list[i].string)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
   2005a:	2100      	movs	r1, #0
   2005c:	4628      	mov	r0, r5
   2005e:	4a3c      	ldr	r2, [pc, #240]	; (20150 <slm_at_tcp_proxy_parse+0x110>)
   20060:	f017 fe8c 	bl	37d7c <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
   20064:	4601      	mov	r1, r0
   20066:	b170      	cbz	r0, 20086 <slm_at_tcp_proxy_parse+0x46>
   20068:	4a3a      	ldr	r2, [pc, #232]	; (20154 <slm_at_tcp_proxy_parse+0x114>)
   2006a:	4b3b      	ldr	r3, [pc, #236]	; (20158 <slm_at_tcp_proxy_parse+0x118>)
				LOG_ERR("Failed to parse AT command %d", ret);
   2006c:	483b      	ldr	r0, [pc, #236]	; (2015c <slm_at_tcp_proxy_parse+0x11c>)
   2006e:	1ad2      	subs	r2, r2, r3
   20070:	08d2      	lsrs	r2, r2, #3
   20072:	0192      	lsls	r2, r2, #6
   20074:	f042 0201 	orr.w	r2, r2, #1
   20078:	f015 ffe1 	bl	3603e <log_1>
		return -EINVAL;
   2007c:	f06f 0015 	mvn.w	r0, #21
	if (ret == -ENOENT && proxy.datamode) {
		ret = do_tcp_send_datamode(at_cmd, length);
	}

	return ret;
}
   20080:	b003      	add	sp, #12
   20082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			type = at_parser_cmd_type_get(at_cmd);
   20086:	4628      	mov	r0, r5
   20088:	f017 fe7b 	bl	37d82 <at_parser_cmd_type_get>
			ret = tcp_proxy_at_list[i].handler(type);
   2008c:	230c      	movs	r3, #12
   2008e:	fb03 8404 	mla	r4, r3, r4, r8
   20092:	68a3      	ldr	r3, [r4, #8]
   20094:	4798      	blx	r3
	if (ret == -ENOENT && proxy.datamode) {
   20096:	1c83      	adds	r3, r0, #2
   20098:	d1f2      	bne.n	20080 <slm_at_tcp_proxy_parse+0x40>
   2009a:	4e31      	ldr	r6, [pc, #196]	; (20160 <slm_at_tcp_proxy_parse+0x120>)
   2009c:	7c33      	ldrb	r3, [r6, #16]
   2009e:	2b00      	cmp	r3, #0
   200a0:	d051      	beq.n	20146 <slm_at_tcp_proxy_parse+0x106>
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   200a2:	68f3      	ldr	r3, [r6, #12]
   200a4:	b9ab      	cbnz	r3, 200d2 <slm_at_tcp_proxy_parse+0x92>
	    proxy.sock != INVALID_SOCKET) {
   200a6:	f8d6 8000 	ldr.w	r8, [r6]
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   200aa:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   200ae:	d11a      	bne.n	200e6 <slm_at_tcp_proxy_parse+0xa6>
   200b0:	4b29      	ldr	r3, [pc, #164]	; (20158 <slm_at_tcp_proxy_parse+0x118>)
   200b2:	4928      	ldr	r1, [pc, #160]	; (20154 <slm_at_tcp_proxy_parse+0x114>)
		LOG_ERR("Not connected yet");
   200b4:	482b      	ldr	r0, [pc, #172]	; (20164 <slm_at_tcp_proxy_parse+0x124>)
   200b6:	1ac9      	subs	r1, r1, r3
   200b8:	08c9      	lsrs	r1, r1, #3
   200ba:	0189      	lsls	r1, r1, #6
   200bc:	f041 0101 	orr.w	r1, r1, #1
   200c0:	f015 ffae 	bl	36020 <log_0>
   200c4:	e7da      	b.n	2007c <slm_at_tcp_proxy_parse+0x3c>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   200c6:	3401      	adds	r4, #1
   200c8:	2c04      	cmp	r4, #4
   200ca:	f106 060c 	add.w	r6, r6, #12
   200ce:	d1be      	bne.n	2004e <slm_at_tcp_proxy_parse+0xe>
   200d0:	e7e3      	b.n	2009a <slm_at_tcp_proxy_parse+0x5a>
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   200d2:	2b01      	cmp	r3, #1
   200d4:	d1ec      	bne.n	200b0 <slm_at_tcp_proxy_parse+0x70>
		   proxy.sock_peer != INVALID_SOCKET) {
   200d6:	f8d6 8008 	ldr.w	r8, [r6, #8]
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   200da:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   200de:	d0e7      	beq.n	200b0 <slm_at_tcp_proxy_parse+0x70>
	z_impl_k_timer_stop(timer);
   200e0:	4821      	ldr	r0, [pc, #132]	; (20168 <slm_at_tcp_proxy_parse+0x128>)
   200e2:	f018 fb63 	bl	387ac <z_impl_k_timer_stop>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   200e6:	2400      	movs	r4, #0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   200e8:	46a1      	mov	r9, r4
   200ea:	e000      	b.n	200ee <slm_at_tcp_proxy_parse+0xae>
		offset += ret;
   200ec:	4404      	add	r4, r0
	while (offset < datalen) {
   200ee:	42bc      	cmp	r4, r7
   200f0:	d21a      	bcs.n	20128 <slm_at_tcp_proxy_parse+0xe8>
   200f2:	2300      	movs	r3, #0
   200f4:	4640      	mov	r0, r8
   200f6:	e9cd 9900 	strd	r9, r9, [sp]
   200fa:	1b3a      	subs	r2, r7, r4
   200fc:	1929      	adds	r1, r5, r4
   200fe:	f016 fbff 	bl	36900 <z_impl_zsock_sendto>
		if (ret < 0) {
   20102:	2800      	cmp	r0, #0
   20104:	daf2      	bge.n	200ec <slm_at_tcp_proxy_parse+0xac>
   20106:	4a14      	ldr	r2, [pc, #80]	; (20158 <slm_at_tcp_proxy_parse+0x118>)
   20108:	4d12      	ldr	r5, [pc, #72]	; (20154 <slm_at_tcp_proxy_parse+0x114>)
   2010a:	1aad      	subs	r5, r5, r2
			LOG_ERR("send() failed: %d", -errno);
   2010c:	f016 fe8f 	bl	36e2e <__errno>
   20110:	08ed      	lsrs	r5, r5, #3
   20112:	6801      	ldr	r1, [r0, #0]
   20114:	01ad      	lsls	r5, r5, #6
   20116:	f045 0501 	orr.w	r5, r5, #1
   2011a:	462a      	mov	r2, r5
   2011c:	4813      	ldr	r0, [pc, #76]	; (2016c <slm_at_tcp_proxy_parse+0x12c>)
   2011e:	4249      	negs	r1, r1
   20120:	f015 ff8d 	bl	3603e <log_1>
			ret = -errno;
   20124:	f016 fe83 	bl	36e2e <__errno>
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   20128:	68f3      	ldr	r3, [r6, #12]
   2012a:	2b01      	cmp	r3, #1
   2012c:	d109      	bne.n	20142 <slm_at_tcp_proxy_parse+0x102>
	z_impl_k_timer_start(timer, duration, period);
   2012e:	2200      	movs	r2, #0
   20130:	2300      	movs	r3, #0
   20132:	480d      	ldr	r0, [pc, #52]	; (20168 <slm_at_tcp_proxy_parse+0x128>)
   20134:	e9cd 2300 	strd	r2, r3, [sp]
   20138:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   2013c:	2300      	movs	r3, #0
   2013e:	f014 f9e9 	bl	34514 <z_impl_k_timer_start>
	return offset;
   20142:	4620      	mov	r0, r4
   20144:	e79c      	b.n	20080 <slm_at_tcp_proxy_parse+0x40>
   20146:	f06f 0001 	mvn.w	r0, #1
   2014a:	e799      	b.n	20080 <slm_at_tcp_proxy_parse+0x40>
   2014c:	00039d2c 	.word	0x00039d2c
   20150:	20023308 	.word	0x20023308
   20154:	00039b18 	.word	0x00039b18
   20158:	00039a50 	.word	0x00039a50
   2015c:	0003a95b 	.word	0x0003a95b
   20160:	20023368 	.word	0x20023368
   20164:	0003ad45 	.word	0x0003ad45
   20168:	20020720 	.word	0x20020720
   2016c:	0003ad57 	.word	0x0003ad57

00020170 <slm_at_tcp_proxy_clac>:

/**@brief API to list TCP proxy AT commands
 */
void slm_at_tcp_proxy_clac(void)
{
   20170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   20172:	2400      	movs	r4, #0
   20174:	4d0c      	ldr	r5, [pc, #48]	; (201a8 <slm_at_tcp_proxy_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", tcp_proxy_at_list[i].string);
   20176:	4f0d      	ldr	r7, [pc, #52]	; (201ac <slm_at_tcp_proxy_clac+0x3c>)
   20178:	4e0d      	ldr	r6, [pc, #52]	; (201b0 <slm_at_tcp_proxy_clac+0x40>)
   2017a:	686b      	ldr	r3, [r5, #4]
   2017c:	f640 228c 	movw	r2, #2700	; 0xa8c
   20180:	2100      	movs	r1, #0
   20182:	9300      	str	r3, [sp, #0]
   20184:	4630      	mov	r0, r6
   20186:	463b      	mov	r3, r7
   20188:	f018 fe11 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   2018c:	4630      	mov	r0, r6
   2018e:	f7fc ff6f 	bl	1d070 <strlen>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   20192:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
   20194:	4601      	mov	r1, r0
   20196:	4630      	mov	r0, r6
   20198:	f7fe f826 	bl	1e1e8 <rsp_send>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   2019c:	2c04      	cmp	r4, #4
   2019e:	f105 050c 	add.w	r5, r5, #12
   201a2:	d1ea      	bne.n	2017a <slm_at_tcp_proxy_clac+0xa>
	}
}
   201a4:	b003      	add	sp, #12
   201a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   201a8:	00039d2c 	.word	0x00039d2c
   201ac:	0003ab54 	.word	0x0003ab54
   201b0:	200287b0 	.word	0x200287b0

000201b4 <slm_at_tcp_proxy_init>:

/**@brief API to initialize TCP proxy AT commands handler
 */
int slm_at_tcp_proxy_init(void)
{
	proxy.sock = INVALID_SOCKET;
   201b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	proxy.sock_peer = INVALID_SOCKET;
	proxy.role = INVALID_ROLE;
	proxy.datamode = false;
   201b8:	2000      	movs	r0, #0
	proxy.sock = INVALID_SOCKET;
   201ba:	4b03      	ldr	r3, [pc, #12]	; (201c8 <slm_at_tcp_proxy_init+0x14>)
	proxy.role = INVALID_ROLE;
   201bc:	e9c3 2202 	strd	r2, r2, [r3, #8]
	proxy.sock = INVALID_SOCKET;
   201c0:	601a      	str	r2, [r3, #0]
	proxy.datamode = false;
   201c2:	7418      	strb	r0, [r3, #16]

	return 0;
}
   201c4:	4770      	bx	lr
   201c6:	bf00      	nop
   201c8:	20023368 	.word	0x20023368

000201cc <do_tcp_client_disconnect>:
{
   201cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (proxy.sock > 0) {
   201ce:	4c1e      	ldr	r4, [pc, #120]	; (20248 <do_tcp_client_disconnect+0x7c>)
{
   201d0:	4605      	mov	r5, r0
	if (proxy.sock > 0) {
   201d2:	6823      	ldr	r3, [r4, #0]
   201d4:	2b00      	cmp	r3, #0
   201d6:	dd35      	ble.n	20244 <do_tcp_client_disconnect+0x78>
		k_thread_abort(tcp_thread_id);
   201d8:	4b1c      	ldr	r3, [pc, #112]	; (2024c <do_tcp_client_disconnect+0x80>)
   201da:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   201dc:	f005 fb1a 	bl	25814 <z_impl_k_thread_abort>
		ret = close(proxy.sock);
   201e0:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   201e2:	f016 fb20 	bl	36826 <z_impl_zsock_close>
		if (ret < 0) {
   201e6:	1e04      	subs	r4, r0, #0
   201e8:	da12      	bge.n	20210 <do_tcp_client_disconnect+0x44>
   201ea:	4a19      	ldr	r2, [pc, #100]	; (20250 <do_tcp_client_disconnect+0x84>)
   201ec:	4c19      	ldr	r4, [pc, #100]	; (20254 <do_tcp_client_disconnect+0x88>)
   201ee:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   201f0:	f016 fe1d 	bl	36e2e <__errno>
   201f4:	08e4      	lsrs	r4, r4, #3
   201f6:	6801      	ldr	r1, [r0, #0]
   201f8:	01a4      	lsls	r4, r4, #6
   201fa:	f044 0402 	orr.w	r4, r4, #2
   201fe:	4622      	mov	r2, r4
   20200:	4815      	ldr	r0, [pc, #84]	; (20258 <do_tcp_client_disconnect+0x8c>)
   20202:	4249      	negs	r1, r1
   20204:	f015 ff1b 	bl	3603e <log_1>
			ret = -errno;
   20208:	f016 fe11 	bl	36e2e <__errno>
   2020c:	6804      	ldr	r4, [r0, #0]
   2020e:	4264      	negs	r4, r4
		(void)slm_at_tcp_proxy_init();
   20210:	f7ff ffd0 	bl	201b4 <slm_at_tcp_proxy_init>
		if (error) {
   20214:	b18d      	cbz	r5, 2023a <do_tcp_client_disconnect+0x6e>
			sprintf(rsp_buf, "#XTCPCLI: %d disconnected\r\n",
   20216:	f640 228c 	movw	r2, #2700	; 0xa8c
   2021a:	2100      	movs	r1, #0
   2021c:	4b0f      	ldr	r3, [pc, #60]	; (2025c <do_tcp_client_disconnect+0x90>)
   2021e:	4810      	ldr	r0, [pc, #64]	; (20260 <do_tcp_client_disconnect+0x94>)
   20220:	9500      	str	r5, [sp, #0]
   20222:	f018 fdc4 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20226:	480e      	ldr	r0, [pc, #56]	; (20260 <do_tcp_client_disconnect+0x94>)
   20228:	f7fc ff22 	bl	1d070 <strlen>
   2022c:	4601      	mov	r1, r0
   2022e:	480c      	ldr	r0, [pc, #48]	; (20260 <do_tcp_client_disconnect+0x94>)
   20230:	f7fd ffda 	bl	1e1e8 <rsp_send>
}
   20234:	4620      	mov	r0, r4
   20236:	b003      	add	sp, #12
   20238:	bd30      	pop	{r4, r5, pc}
			sprintf(rsp_buf, "#XTCPCLI: disconnected\r\n");
   2023a:	490a      	ldr	r1, [pc, #40]	; (20264 <do_tcp_client_disconnect+0x98>)
   2023c:	4808      	ldr	r0, [pc, #32]	; (20260 <do_tcp_client_disconnect+0x94>)
   2023e:	f018 fddd 	bl	38dfc <strcpy>
   20242:	e7f0      	b.n	20226 <do_tcp_client_disconnect+0x5a>
	int ret = 0;
   20244:	2400      	movs	r4, #0
	return ret;
   20246:	e7f5      	b.n	20234 <do_tcp_client_disconnect+0x68>
   20248:	20023368 	.word	0x20023368
   2024c:	20023384 	.word	0x20023384
   20250:	00039a50 	.word	0x00039a50
   20254:	00039b18 	.word	0x00039b18
   20258:	0003ac3e 	.word	0x0003ac3e
   2025c:	0003b0aa 	.word	0x0003b0aa
   20260:	200287b0 	.word	0x200287b0
   20264:	0003b0c6 	.word	0x0003b0c6

00020268 <handle_at_tcp_client>:
{
   20268:	b570      	push	{r4, r5, r6, lr}
   2026a:	4604      	mov	r4, r0
   2026c:	b0c2      	sub	sp, #264	; 0x108
	int param_count = at_params_valid_count_get(&at_param_list);
   2026e:	48ab      	ldr	r0, [pc, #684]	; (2051c <handle_at_tcp_client+0x2b4>)
   20270:	f017 fecc 	bl	3800c <at_params_valid_count_get>
	switch (cmd_type) {
   20274:	2c02      	cmp	r4, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   20276:	4606      	mov	r6, r0
	switch (cmd_type) {
   20278:	f000 8174 	beq.w	20564 <handle_at_tcp_client+0x2fc>
   2027c:	2c03      	cmp	r4, #3
   2027e:	f000 8194 	beq.w	205aa <handle_at_tcp_client+0x342>
   20282:	2c01      	cmp	r4, #1
   20284:	f040 80cf 	bne.w	20426 <handle_at_tcp_client+0x1be>
		if (param_count < 2) {
   20288:	2801      	cmp	r0, #1
   2028a:	f340 80cc 	ble.w	20426 <handle_at_tcp_client+0x1be>
		err = at_params_short_get(&at_param_list, 1, &op);
   2028e:	4621      	mov	r1, r4
   20290:	48a2      	ldr	r0, [pc, #648]	; (2051c <handle_at_tcp_client+0x2b4>)
   20292:	aa0b      	add	r2, sp, #44	; 0x2c
   20294:	f017 fe72 	bl	37f7c <at_params_short_get>
		if (err) {
   20298:	4604      	mov	r4, r0
   2029a:	2800      	cmp	r0, #0
   2029c:	d16a      	bne.n	20374 <handle_at_tcp_client+0x10c>
		if (op == AT_CLIENT_CONNECT ||
   2029e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   202a2:	1e5a      	subs	r2, r3, #1
   202a4:	2a01      	cmp	r2, #1
   202a6:	f200 8123 	bhi.w	204f0 <handle_at_tcp_client+0x288>
			int size = TCPIP_MAX_URL;
   202aa:	2380      	movs	r3, #128	; 0x80
   202ac:	930c      	str	r3, [sp, #48]	; 0x30
			proxy.sec_tag = INVALID_SEC_TAG;
   202ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   202b2:	4d9b      	ldr	r5, [pc, #620]	; (20520 <handle_at_tcp_client+0x2b8>)
			if (param_count < 4) {
   202b4:	2e03      	cmp	r6, #3
			proxy.sec_tag = INVALID_SEC_TAG;
   202b6:	606b      	str	r3, [r5, #4]
			if (param_count < 4) {
   202b8:	f340 80b5 	ble.w	20426 <handle_at_tcp_client+0x1be>
			err = at_params_string_get(&at_param_list,
   202bc:	2102      	movs	r1, #2
   202be:	4897      	ldr	r0, [pc, #604]	; (2051c <handle_at_tcp_client+0x2b4>)
   202c0:	ab0c      	add	r3, sp, #48	; 0x30
   202c2:	aa22      	add	r2, sp, #136	; 0x88
   202c4:	f017 fe7f 	bl	37fc6 <at_params_string_get>
			if (err) {
   202c8:	4604      	mov	r4, r0
   202ca:	2800      	cmp	r0, #0
   202cc:	d152      	bne.n	20374 <handle_at_tcp_client+0x10c>
			url[size] = '\0';
   202ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   202d0:	aa42      	add	r2, sp, #264	; 0x108
   202d2:	4413      	add	r3, r2
   202d4:	f803 0c80 	strb.w	r0, [r3, #-128]
			err = at_params_short_get(&at_param_list, 3, &port);
   202d8:	2103      	movs	r1, #3
   202da:	4890      	ldr	r0, [pc, #576]	; (2051c <handle_at_tcp_client+0x2b4>)
   202dc:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
   202e0:	f017 fe4c 	bl	37f7c <at_params_short_get>
			if (err) {
   202e4:	4604      	mov	r4, r0
   202e6:	2800      	cmp	r0, #0
   202e8:	d144      	bne.n	20374 <handle_at_tcp_client+0x10c>
			if (param_count > 4) {
   202ea:	2e04      	cmp	r6, #4
   202ec:	d004      	beq.n	202f8 <handle_at_tcp_client+0x90>
				at_params_int_get(&at_param_list,
   202ee:	2104      	movs	r1, #4
   202f0:	488a      	ldr	r0, [pc, #552]	; (2051c <handle_at_tcp_client+0x2b4>)
   202f2:	1d2a      	adds	r2, r5, #4
   202f4:	f017 fe54 	bl	37fa0 <at_params_int_get>
			err = do_tcp_client_connect(url, port, proxy.sec_tag);
   202f8:	686e      	ldr	r6, [r5, #4]
   202fa:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
	if (sec_tag == INVALID_SEC_TAG) {
   202fe:	1c72      	adds	r2, r6, #1
	return z_impl_zsock_socket(family, type, proto);
   20300:	f04f 0101 	mov.w	r1, #1
   20304:	bf0c      	ite	eq
   20306:	2206      	moveq	r2, #6
   20308:	f44f 7281 	movne.w	r2, #258	; 0x102
   2030c:	4608      	mov	r0, r1
   2030e:	f003 ff33 	bl	24178 <z_impl_zsock_socket>
		proxy.sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);
   20312:	6028      	str	r0, [r5, #0]
	if (proxy.sock < 0) {
   20314:	6828      	ldr	r0, [r5, #0]
   20316:	2800      	cmp	r0, #0
   20318:	da2f      	bge.n	2037a <handle_at_tcp_client+0x112>
   2031a:	4a82      	ldr	r2, [pc, #520]	; (20524 <handle_at_tcp_client+0x2bc>)
   2031c:	4c82      	ldr	r4, [pc, #520]	; (20528 <handle_at_tcp_client+0x2c0>)
   2031e:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
   20320:	f016 fd85 	bl	36e2e <__errno>
   20324:	08e4      	lsrs	r4, r4, #3
   20326:	6801      	ldr	r1, [r0, #0]
   20328:	01a4      	lsls	r4, r4, #6
   2032a:	f044 0401 	orr.w	r4, r4, #1
   2032e:	4622      	mov	r2, r4
   20330:	4249      	negs	r1, r1
   20332:	487e      	ldr	r0, [pc, #504]	; (2052c <handle_at_tcp_client+0x2c4>)
   20334:	f015 fe83 	bl	3603e <log_1>
		sprintf(rsp_buf, "#XTCPCLI: %d\r\n", -errno);
   20338:	f016 fd79 	bl	36e2e <__errno>
   2033c:	6803      	ldr	r3, [r0, #0]
   2033e:	2100      	movs	r1, #0
   20340:	425b      	negs	r3, r3
   20342:	f640 228c 	movw	r2, #2700	; 0xa8c
   20346:	9300      	str	r3, [sp, #0]
   20348:	4879      	ldr	r0, [pc, #484]	; (20530 <handle_at_tcp_client+0x2c8>)
   2034a:	4b7a      	ldr	r3, [pc, #488]	; (20534 <handle_at_tcp_client+0x2cc>)
   2034c:	f018 fd2f 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20350:	4877      	ldr	r0, [pc, #476]	; (20530 <handle_at_tcp_client+0x2c8>)
   20352:	f7fc fe8d 	bl	1d070 <strlen>
   20356:	4601      	mov	r1, r0
   20358:	4875      	ldr	r0, [pc, #468]	; (20530 <handle_at_tcp_client+0x2c8>)
   2035a:	f7fd ff45 	bl	1e1e8 <rsp_send>
		return -errno;
   2035e:	f016 fd66 	bl	36e2e <__errno>
   20362:	6804      	ldr	r4, [r0, #0]
   20364:	4264      	negs	r4, r4
			if (err == 0 &&
   20366:	b92c      	cbnz	r4, 20374 <handle_at_tcp_client+0x10c>
   20368:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   2036c:	2b02      	cmp	r3, #2
   2036e:	d101      	bne.n	20374 <handle_at_tcp_client+0x10c>
				proxy.datamode = true;
   20370:	2301      	movs	r3, #1
   20372:	742b      	strb	r3, [r5, #16]
}
   20374:	4620      	mov	r0, r4
   20376:	b042      	add	sp, #264	; 0x108
   20378:	bd70      	pop	{r4, r5, r6, pc}
	if (sec_tag != INVALID_SEC_TAG) {
   2037a:	1c73      	adds	r3, r6, #1
   2037c:	d02f      	beq.n	203de <handle_at_tcp_client+0x176>
		sec_tag_t sec_tag_list[1] = { sec_tag };
   2037e:	960e      	str	r6, [sp, #56]	; 0x38
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   20380:	2304      	movs	r3, #4
   20382:	2201      	movs	r2, #1
   20384:	9300      	str	r3, [sp, #0]
   20386:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2038a:	ab0e      	add	r3, sp, #56	; 0x38
   2038c:	f016 fb14 	bl	369b8 <z_impl_zsock_setsockopt>
		if (ret) {
   20390:	b328      	cbz	r0, 203de <handle_at_tcp_client+0x176>
   20392:	4a64      	ldr	r2, [pc, #400]	; (20524 <handle_at_tcp_client+0x2bc>)
   20394:	4c64      	ldr	r4, [pc, #400]	; (20528 <handle_at_tcp_client+0x2c0>)
   20396:	1aa4      	subs	r4, r4, r2
   20398:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set tag list failed: %d", -errno);
   2039a:	f016 fd48 	bl	36e2e <__errno>
   2039e:	01a4      	lsls	r4, r4, #6
   203a0:	f044 0401 	orr.w	r4, r4, #1
   203a4:	4622      	mov	r2, r4
   203a6:	6801      	ldr	r1, [r0, #0]
   203a8:	4863      	ldr	r0, [pc, #396]	; (20538 <handle_at_tcp_client+0x2d0>)
   203aa:	4249      	negs	r1, r1
		LOG_ERR("connect() failed: %d", -errno);
   203ac:	f015 fe47 	bl	3603e <log_1>
		sprintf(rsp_buf, "#XTCPCLI: %d\r\n", -errno);
   203b0:	f016 fd3d 	bl	36e2e <__errno>
   203b4:	6803      	ldr	r3, [r0, #0]
   203b6:	f640 228c 	movw	r2, #2700	; 0xa8c
   203ba:	425b      	negs	r3, r3
   203bc:	2100      	movs	r1, #0
   203be:	9300      	str	r3, [sp, #0]
   203c0:	485b      	ldr	r0, [pc, #364]	; (20530 <handle_at_tcp_client+0x2c8>)
   203c2:	4b5c      	ldr	r3, [pc, #368]	; (20534 <handle_at_tcp_client+0x2cc>)
   203c4:	f018 fcf3 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   203c8:	4859      	ldr	r0, [pc, #356]	; (20530 <handle_at_tcp_client+0x2c8>)
   203ca:	f7fc fe51 	bl	1d070 <strlen>
   203ce:	4601      	mov	r1, r0
   203d0:	4857      	ldr	r0, [pc, #348]	; (20530 <handle_at_tcp_client+0x2c8>)
   203d2:	f7fd ff09 	bl	1e1e8 <rsp_send>
		close(proxy.sock);
   203d6:	6828      	ldr	r0, [r5, #0]
   203d8:	f015 f938 	bl	3564c <close>
   203dc:	e7bf      	b.n	2035e <handle_at_tcp_client+0xf6>
	if (check_for_ipv4(url, strlen(url))) {
   203de:	a822      	add	r0, sp, #136	; 0x88
   203e0:	f7fc fe46 	bl	1d070 <strlen>
   203e4:	b2c1      	uxtb	r1, r0
   203e6:	a822      	add	r0, sp, #136	; 0x88
   203e8:	f015 f8fc 	bl	355e4 <check_for_ipv4>
   203ec:	4601      	mov	r1, r0
   203ee:	b1e8      	cbz	r0, 2042c <handle_at_tcp_client+0x1c4>
		remote.sin_family = AF_INET;
   203f0:	2001      	movs	r0, #1
   203f2:	4a52      	ldr	r2, [pc, #328]	; (2053c <handle_at_tcp_client+0x2d4>)
		remote.sin_port = htons(port);
   203f4:	0223      	lsls	r3, r4, #8
   203f6:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
		remote.sin_family = AF_INET;
   203fa:	8010      	strh	r0, [r2, #0]
		remote.sin_port = htons(port);
   203fc:	8054      	strh	r4, [r2, #2]
	return z_impl_zsock_inet_pton(family, src, dst);
   203fe:	a922      	add	r1, sp, #136	; 0x88
   20400:	3204      	adds	r2, #4
   20402:	f016 fab7 	bl	36974 <z_impl_zsock_inet_pton>
		if (ret != 1) {
   20406:	2801      	cmp	r0, #1
   20408:	4601      	mov	r1, r0
   2040a:	d035      	beq.n	20478 <handle_at_tcp_client+0x210>
   2040c:	4a46      	ldr	r2, [pc, #280]	; (20528 <handle_at_tcp_client+0x2c0>)
   2040e:	4b45      	ldr	r3, [pc, #276]	; (20524 <handle_at_tcp_client+0x2bc>)
			LOG_ERR("inet_pton() failed: %d", ret);
   20410:	484b      	ldr	r0, [pc, #300]	; (20540 <handle_at_tcp_client+0x2d8>)
   20412:	1ad2      	subs	r2, r2, r3
   20414:	08d2      	lsrs	r2, r2, #3
   20416:	0192      	lsls	r2, r2, #6
   20418:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("getaddrinfo() failed: %d", ret);
   2041c:	f015 fe0f 	bl	3603e <log_1>
			close(proxy.sock);
   20420:	6828      	ldr	r0, [r5, #0]
   20422:	f015 f913 	bl	3564c <close>
			return -EINVAL;
   20426:	f06f 0415 	mvn.w	r4, #21
   2042a:	e7a3      	b.n	20374 <handle_at_tcp_client+0x10c>
		struct addrinfo hints = {
   2042c:	2601      	movs	r6, #1
   2042e:	2250      	movs	r2, #80	; 0x50
   20430:	9009      	str	r0, [sp, #36]	; 0x24
   20432:	a80e      	add	r0, sp, #56	; 0x38
   20434:	f018 fba3 	bl	38b7e <memset>
	return zsock_getaddrinfo(host, service, hints, res);
   20438:	9909      	ldr	r1, [sp, #36]	; 0x24
   2043a:	ab0d      	add	r3, sp, #52	; 0x34
   2043c:	aa0e      	add	r2, sp, #56	; 0x38
   2043e:	a822      	add	r0, sp, #136	; 0x88
   20440:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
   20444:	f016 f9dc 	bl	36800 <zsock_getaddrinfo>
		if (ret || result == NULL) {
   20448:	4601      	mov	r1, r0
   2044a:	b908      	cbnz	r0, 20450 <handle_at_tcp_client+0x1e8>
   2044c:	980d      	ldr	r0, [sp, #52]	; 0x34
   2044e:	b940      	cbnz	r0, 20462 <handle_at_tcp_client+0x1fa>
   20450:	4a35      	ldr	r2, [pc, #212]	; (20528 <handle_at_tcp_client+0x2c0>)
   20452:	4b34      	ldr	r3, [pc, #208]	; (20524 <handle_at_tcp_client+0x2bc>)
			LOG_ERR("getaddrinfo() failed: %d", ret);
   20454:	483b      	ldr	r0, [pc, #236]	; (20544 <handle_at_tcp_client+0x2dc>)
   20456:	1ad2      	subs	r2, r2, r3
   20458:	08d2      	lsrs	r2, r2, #3
   2045a:	0192      	lsls	r2, r2, #6
   2045c:	f042 0201 	orr.w	r2, r2, #1
   20460:	e7dc      	b.n	2041c <handle_at_tcp_client+0x1b4>
		remote.sin_port = htons(port);
   20462:	0222      	lsls	r2, r4, #8
   20464:	ea42 2414 	orr.w	r4, r2, r4, lsr #8
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   20468:	6982      	ldr	r2, [r0, #24]
		remote.sin_family = AF_INET;
   2046a:	4b34      	ldr	r3, [pc, #208]	; (2053c <handle_at_tcp_client+0x2d4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   2046c:	6852      	ldr	r2, [r2, #4]
		remote.sin_family = AF_INET;
   2046e:	801e      	strh	r6, [r3, #0]
		remote.sin_port = htons(port);
   20470:	805c      	strh	r4, [r3, #2]
		remote.sin_addr.s_addr =
   20472:	605a      	str	r2, [r3, #4]
	zsock_freeaddrinfo(ai);
   20474:	f016 f9c6 	bl	36804 <zsock_freeaddrinfo>
	ret = connect(proxy.sock, (struct sockaddr *)&remote,
   20478:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   2047a:	2208      	movs	r2, #8
   2047c:	492f      	ldr	r1, [pc, #188]	; (2053c <handle_at_tcp_client+0x2d4>)
   2047e:	f016 f9ff 	bl	36880 <z_impl_zsock_connect>
	if (ret < 0) {
   20482:	1e04      	subs	r4, r0, #0
   20484:	da0d      	bge.n	204a2 <handle_at_tcp_client+0x23a>
   20486:	4a27      	ldr	r2, [pc, #156]	; (20524 <handle_at_tcp_client+0x2bc>)
   20488:	4c27      	ldr	r4, [pc, #156]	; (20528 <handle_at_tcp_client+0x2c0>)
   2048a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect() failed: %d", -errno);
   2048c:	f016 fccf 	bl	36e2e <__errno>
   20490:	08e4      	lsrs	r4, r4, #3
   20492:	6801      	ldr	r1, [r0, #0]
   20494:	01a4      	lsls	r4, r4, #6
   20496:	f044 0401 	orr.w	r4, r4, #1
   2049a:	4622      	mov	r2, r4
   2049c:	482a      	ldr	r0, [pc, #168]	; (20548 <handle_at_tcp_client+0x2e0>)
   2049e:	4249      	negs	r1, r1
   204a0:	e784      	b.n	203ac <handle_at_tcp_client+0x144>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   204a2:	2200      	movs	r2, #0
   204a4:	2300      	movs	r3, #0
   204a6:	2600      	movs	r6, #0
   204a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   204ac:	2004      	movs	r0, #4
   204ae:	230e      	movs	r3, #14
   204b0:	f44f 6264 	mov.w	r2, #3648	; 0xe40
   204b4:	e9cd 3003 	strd	r3, r0, [sp, #12]
   204b8:	e9cd 6601 	strd	r6, r6, [sp, #4]
   204bc:	4b23      	ldr	r3, [pc, #140]	; (2054c <handle_at_tcp_client+0x2e4>)
   204be:	4924      	ldr	r1, [pc, #144]	; (20550 <handle_at_tcp_client+0x2e8>)
   204c0:	9600      	str	r6, [sp, #0]
   204c2:	4824      	ldr	r0, [pc, #144]	; (20554 <handle_at_tcp_client+0x2ec>)
   204c4:	f013 fd9c 	bl	34000 <z_impl_k_thread_create>
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   204c8:	4b23      	ldr	r3, [pc, #140]	; (20558 <handle_at_tcp_client+0x2f0>)
	sprintf(rsp_buf, "#XTCPCLI: %d connected\r\n", proxy.sock);
   204ca:	4631      	mov	r1, r6
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   204cc:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XTCPCLI: %d connected\r\n", proxy.sock);
   204ce:	682b      	ldr	r3, [r5, #0]
   204d0:	f640 228c 	movw	r2, #2700	; 0xa8c
   204d4:	9300      	str	r3, [sp, #0]
   204d6:	4816      	ldr	r0, [pc, #88]	; (20530 <handle_at_tcp_client+0x2c8>)
   204d8:	4b20      	ldr	r3, [pc, #128]	; (2055c <handle_at_tcp_client+0x2f4>)
	proxy.role = AT_TCP_ROLE_CLIENT;
   204da:	60ee      	str	r6, [r5, #12]
	sprintf(rsp_buf, "#XTCPCLI: %d connected\r\n", proxy.sock);
   204dc:	f018 fc67 	bl	38dae <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   204e0:	4813      	ldr	r0, [pc, #76]	; (20530 <handle_at_tcp_client+0x2c8>)
   204e2:	f7fc fdc5 	bl	1d070 <strlen>
   204e6:	4601      	mov	r1, r0
   204e8:	4811      	ldr	r0, [pc, #68]	; (20530 <handle_at_tcp_client+0x2c8>)
   204ea:	f7fd fe7d 	bl	1e1e8 <rsp_send>
	return ret;
   204ee:	e73a      	b.n	20366 <handle_at_tcp_client+0xfe>
		} else if (op == AT_CLIENT_DISCONNECT) {
   204f0:	2b00      	cmp	r3, #0
   204f2:	f47f af3f 	bne.w	20374 <handle_at_tcp_client+0x10c>
			if (proxy.sock < 0) {
   204f6:	4b0a      	ldr	r3, [pc, #40]	; (20520 <handle_at_tcp_client+0x2b8>)
   204f8:	681b      	ldr	r3, [r3, #0]
   204fa:	2b00      	cmp	r3, #0
   204fc:	da0a      	bge.n	20514 <handle_at_tcp_client+0x2ac>
   204fe:	4b09      	ldr	r3, [pc, #36]	; (20524 <handle_at_tcp_client+0x2bc>)
   20500:	4909      	ldr	r1, [pc, #36]	; (20528 <handle_at_tcp_client+0x2c0>)
				LOG_WRN("Client is not connected");
   20502:	4817      	ldr	r0, [pc, #92]	; (20560 <handle_at_tcp_client+0x2f8>)
   20504:	1ac9      	subs	r1, r1, r3
   20506:	08c9      	lsrs	r1, r1, #3
   20508:	0189      	lsls	r1, r1, #6
   2050a:	f041 0102 	orr.w	r1, r1, #2
   2050e:	f015 fd87 	bl	36020 <log_0>
				return -EINVAL;
   20512:	e788      	b.n	20426 <handle_at_tcp_client+0x1be>
			err = do_tcp_client_disconnect(0);
   20514:	f7ff fe5a 	bl	201cc <do_tcp_client_disconnect>
   20518:	4604      	mov	r4, r0
   2051a:	e72b      	b.n	20374 <handle_at_tcp_client+0x10c>
   2051c:	20023308 	.word	0x20023308
   20520:	20023368 	.word	0x20023368
   20524:	00039a50 	.word	0x00039a50
   20528:	00039b18 	.word	0x00039b18
   2052c:	0003af2d 	.word	0x0003af2d
   20530:	200287b0 	.word	0x200287b0
   20534:	0003b0df 	.word	0x0003b0df
   20538:	0003b0ee 	.word	0x0003b0ee
   2053c:	2002337c 	.word	0x2002337c
   20540:	0003b106 	.word	0x0003b106
   20544:	0003b11d 	.word	0x0003b11d
   20548:	0003ae2e 	.word	0x0003ae2e
   2054c:	00020871 	.word	0x00020871
   20550:	2002d060 	.word	0x2002d060
   20554:	20021268 	.word	0x20021268
   20558:	20023384 	.word	0x20023384
   2055c:	0003b136 	.word	0x0003b136
   20560:	0003b14f 	.word	0x0003b14f
		if (proxy.sock != INVALID_SOCKET &&
   20564:	4b1b      	ldr	r3, [pc, #108]	; (205d4 <handle_at_tcp_client+0x36c>)
   20566:	681a      	ldr	r2, [r3, #0]
   20568:	1c51      	adds	r1, r2, #1
   2056a:	d013      	beq.n	20594 <handle_at_tcp_client+0x32c>
   2056c:	68d9      	ldr	r1, [r3, #12]
   2056e:	b989      	cbnz	r1, 20594 <handle_at_tcp_client+0x32c>
			sprintf(rsp_buf, "#XTCPCLI: %d, %d\r\n",
   20570:	7c1b      	ldrb	r3, [r3, #16]
   20572:	4819      	ldr	r0, [pc, #100]	; (205d8 <handle_at_tcp_client+0x370>)
   20574:	e9cd 2300 	strd	r2, r3, [sp]
   20578:	f640 228c 	movw	r2, #2700	; 0xa8c
   2057c:	4b17      	ldr	r3, [pc, #92]	; (205dc <handle_at_tcp_client+0x374>)
   2057e:	f018 fc16 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20582:	4815      	ldr	r0, [pc, #84]	; (205d8 <handle_at_tcp_client+0x370>)
   20584:	f7fc fd74 	bl	1d070 <strlen>
   20588:	4601      	mov	r1, r0
   2058a:	4813      	ldr	r0, [pc, #76]	; (205d8 <handle_at_tcp_client+0x370>)
   2058c:	f7fd fe2c 	bl	1e1e8 <rsp_send>
		err = 0;
   20590:	2400      	movs	r4, #0
		break;
   20592:	e6ef      	b.n	20374 <handle_at_tcp_client+0x10c>
			sprintf(rsp_buf, "#XTCPCLI: %d\r\n", INVALID_SOCKET);
   20594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20598:	f640 228c 	movw	r2, #2700	; 0xa8c
   2059c:	9300      	str	r3, [sp, #0]
   2059e:	2100      	movs	r1, #0
   205a0:	4b0f      	ldr	r3, [pc, #60]	; (205e0 <handle_at_tcp_client+0x378>)
   205a2:	480d      	ldr	r0, [pc, #52]	; (205d8 <handle_at_tcp_client+0x370>)
   205a4:	f018 fc03 	bl	38dae <__sprintf_chk>
   205a8:	e7eb      	b.n	20582 <handle_at_tcp_client+0x31a>
		sprintf(rsp_buf,
   205aa:	2400      	movs	r4, #0
   205ac:	2301      	movs	r3, #1
   205ae:	2202      	movs	r2, #2
   205b0:	4621      	mov	r1, r4
   205b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   205b6:	9400      	str	r4, [sp, #0]
   205b8:	f640 228c 	movw	r2, #2700	; 0xa8c
   205bc:	4b09      	ldr	r3, [pc, #36]	; (205e4 <handle_at_tcp_client+0x37c>)
   205be:	4806      	ldr	r0, [pc, #24]	; (205d8 <handle_at_tcp_client+0x370>)
   205c0:	f018 fbf5 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   205c4:	4804      	ldr	r0, [pc, #16]	; (205d8 <handle_at_tcp_client+0x370>)
   205c6:	f7fc fd53 	bl	1d070 <strlen>
   205ca:	4601      	mov	r1, r0
   205cc:	4802      	ldr	r0, [pc, #8]	; (205d8 <handle_at_tcp_client+0x370>)
   205ce:	f7fd fe0b 	bl	1e1e8 <rsp_send>
		break;
   205d2:	e6cf      	b.n	20374 <handle_at_tcp_client+0x10c>
   205d4:	20023368 	.word	0x20023368
   205d8:	200287b0 	.word	0x200287b0
   205dc:	0003b167 	.word	0x0003b167
   205e0:	0003b0df 	.word	0x0003b0df
   205e4:	0003b17a 	.word	0x0003b17a

000205e8 <do_tcp_server_stop>:
{
   205e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (proxy.sock > 0) {
   205ea:	4c22      	ldr	r4, [pc, #136]	; (20674 <do_tcp_server_stop+0x8c>)
{
   205ec:	4605      	mov	r5, r0
	if (proxy.sock > 0) {
   205ee:	6823      	ldr	r3, [r4, #0]
   205f0:	2b00      	cmp	r3, #0
   205f2:	dd3d      	ble.n	20670 <do_tcp_server_stop+0x88>
	z_impl_k_timer_stop(timer);
   205f4:	4820      	ldr	r0, [pc, #128]	; (20678 <do_tcp_server_stop+0x90>)
   205f6:	f018 f8d9 	bl	387ac <z_impl_k_timer_stop>
		k_thread_abort(tcp_thread_id);
   205fa:	4b20      	ldr	r3, [pc, #128]	; (2067c <do_tcp_server_stop+0x94>)
   205fc:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   205fe:	f005 f909 	bl	25814 <z_impl_k_thread_abort>
		if (proxy.sock_peer != INVALID_SOCKET) {
   20602:	68a0      	ldr	r0, [r4, #8]
   20604:	1c43      	adds	r3, r0, #1
   20606:	d001      	beq.n	2060c <do_tcp_server_stop+0x24>
			close(proxy.sock_peer);
   20608:	f015 f820 	bl	3564c <close>
		ret = close(proxy.sock);
   2060c:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   2060e:	f016 f90a 	bl	36826 <z_impl_zsock_close>
		if (ret < 0) {
   20612:	1e04      	subs	r4, r0, #0
   20614:	da12      	bge.n	2063c <do_tcp_server_stop+0x54>
   20616:	4a1a      	ldr	r2, [pc, #104]	; (20680 <do_tcp_server_stop+0x98>)
   20618:	4c1a      	ldr	r4, [pc, #104]	; (20684 <do_tcp_server_stop+0x9c>)
   2061a:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   2061c:	f016 fc07 	bl	36e2e <__errno>
   20620:	08e4      	lsrs	r4, r4, #3
   20622:	6801      	ldr	r1, [r0, #0]
   20624:	01a4      	lsls	r4, r4, #6
   20626:	f044 0402 	orr.w	r4, r4, #2
   2062a:	4622      	mov	r2, r4
   2062c:	4816      	ldr	r0, [pc, #88]	; (20688 <do_tcp_server_stop+0xa0>)
   2062e:	4249      	negs	r1, r1
   20630:	f015 fd05 	bl	3603e <log_1>
			ret = -errno;
   20634:	f016 fbfb 	bl	36e2e <__errno>
   20638:	6804      	ldr	r4, [r0, #0]
   2063a:	4264      	negs	r4, r4
		(void)slm_at_tcp_proxy_init();
   2063c:	f7ff fdba 	bl	201b4 <slm_at_tcp_proxy_init>
		if (error) {
   20640:	b18d      	cbz	r5, 20666 <do_tcp_server_stop+0x7e>
			sprintf(rsp_buf, "#XTCPSVR: %d stopped\r\n", error);
   20642:	f640 228c 	movw	r2, #2700	; 0xa8c
   20646:	2100      	movs	r1, #0
   20648:	4b10      	ldr	r3, [pc, #64]	; (2068c <do_tcp_server_stop+0xa4>)
   2064a:	4811      	ldr	r0, [pc, #68]	; (20690 <do_tcp_server_stop+0xa8>)
   2064c:	9500      	str	r5, [sp, #0]
   2064e:	f018 fbae 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20652:	480f      	ldr	r0, [pc, #60]	; (20690 <do_tcp_server_stop+0xa8>)
   20654:	f7fc fd0c 	bl	1d070 <strlen>
   20658:	4601      	mov	r1, r0
   2065a:	480d      	ldr	r0, [pc, #52]	; (20690 <do_tcp_server_stop+0xa8>)
   2065c:	f7fd fdc4 	bl	1e1e8 <rsp_send>
}
   20660:	4620      	mov	r0, r4
   20662:	b003      	add	sp, #12
   20664:	bd30      	pop	{r4, r5, pc}
			sprintf(rsp_buf, "#XTCPSVR: stopped\r\n");
   20666:	490b      	ldr	r1, [pc, #44]	; (20694 <do_tcp_server_stop+0xac>)
   20668:	4809      	ldr	r0, [pc, #36]	; (20690 <do_tcp_server_stop+0xa8>)
   2066a:	f018 fbc7 	bl	38dfc <strcpy>
   2066e:	e7f0      	b.n	20652 <do_tcp_server_stop+0x6a>
	int ret = 0;
   20670:	2400      	movs	r4, #0
	return ret;
   20672:	e7f5      	b.n	20660 <do_tcp_server_stop+0x78>
   20674:	20023368 	.word	0x20023368
   20678:	20020720 	.word	0x20020720
   2067c:	20023384 	.word	0x20023384
   20680:	00039a50 	.word	0x00039a50
   20684:	00039b18 	.word	0x00039b18
   20688:	0003ac3e 	.word	0x0003ac3e
   2068c:	0003b1aa 	.word	0x0003b1aa
   20690:	200287b0 	.word	0x200287b0
   20694:	0003b1c1 	.word	0x0003b1c1

00020698 <do_tcp_send>:
{
   20698:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   2069c:	4e48      	ldr	r6, [pc, #288]	; (207c0 <do_tcp_send+0x128>)
{
   2069e:	4682      	mov	sl, r0
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   206a0:	68f3      	ldr	r3, [r6, #12]
{
   206a2:	4689      	mov	r9, r1
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   206a4:	b98b      	cbnz	r3, 206ca <do_tcp_send+0x32>
	    proxy.sock != INVALID_SOCKET) {
   206a6:	6837      	ldr	r7, [r6, #0]
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   206a8:	1c7a      	adds	r2, r7, #1
   206aa:	d116      	bne.n	206da <do_tcp_send+0x42>
   206ac:	4b45      	ldr	r3, [pc, #276]	; (207c4 <do_tcp_send+0x12c>)
   206ae:	4946      	ldr	r1, [pc, #280]	; (207c8 <do_tcp_send+0x130>)
		LOG_ERR("Not connected yet");
   206b0:	4846      	ldr	r0, [pc, #280]	; (207cc <do_tcp_send+0x134>)
   206b2:	1ac9      	subs	r1, r1, r3
   206b4:	08c9      	lsrs	r1, r1, #3
   206b6:	0189      	lsls	r1, r1, #6
   206b8:	f041 0101 	orr.w	r1, r1, #1
   206bc:	f015 fcb0 	bl	36020 <log_0>
		return -EINVAL;
   206c0:	f06f 0015 	mvn.w	r0, #21
}
   206c4:	b002      	add	sp, #8
   206c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   206ca:	2b01      	cmp	r3, #1
   206cc:	d1ee      	bne.n	206ac <do_tcp_send+0x14>
		   proxy.sock_peer != INVALID_SOCKET) {
   206ce:	68b7      	ldr	r7, [r6, #8]
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   206d0:	1c7b      	adds	r3, r7, #1
   206d2:	d0eb      	beq.n	206ac <do_tcp_send+0x14>
	z_impl_k_timer_stop(timer);
   206d4:	483e      	ldr	r0, [pc, #248]	; (207d0 <do_tcp_send+0x138>)
   206d6:	f018 f869 	bl	387ac <z_impl_k_timer_stop>
{
   206da:	2500      	movs	r5, #0
   206dc:	462c      	mov	r4, r5
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   206de:	46a8      	mov	r8, r5
   206e0:	e01b      	b.n	2071a <do_tcp_send+0x82>
					do_tcp_server_stop(-errno);
   206e2:	f016 fba4 	bl	36e2e <__errno>
   206e6:	6800      	ldr	r0, [r0, #0]
   206e8:	4240      	negs	r0, r0
   206ea:	f7ff ff7d 	bl	205e8 <do_tcp_server_stop>
   206ee:	e044      	b.n	2077a <do_tcp_send+0xe2>
				sprintf(rsp_buf, "#XTCPSEND: %d\r\n", -errno);
   206f0:	f016 fb9d 	bl	36e2e <__errno>
   206f4:	6803      	ldr	r3, [r0, #0]
   206f6:	f640 228c 	movw	r2, #2700	; 0xa8c
   206fa:	425b      	negs	r3, r3
   206fc:	2100      	movs	r1, #0
   206fe:	9300      	str	r3, [sp, #0]
   20700:	4834      	ldr	r0, [pc, #208]	; (207d4 <do_tcp_send+0x13c>)
   20702:	4b35      	ldr	r3, [pc, #212]	; (207d8 <do_tcp_send+0x140>)
   20704:	f018 fb53 	bl	38dae <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   20708:	4832      	ldr	r0, [pc, #200]	; (207d4 <do_tcp_send+0x13c>)
   2070a:	f7fc fcb1 	bl	1d070 <strlen>
   2070e:	4601      	mov	r1, r0
   20710:	4830      	ldr	r0, [pc, #192]	; (207d4 <do_tcp_send+0x13c>)
   20712:	f7fd fd69 	bl	1e1e8 <rsp_send>
   20716:	e030      	b.n	2077a <do_tcp_send+0xe2>
		offset += ret;
   20718:	4425      	add	r5, r4
	while (offset < datalen) {
   2071a:	454d      	cmp	r5, r9
   2071c:	d231      	bcs.n	20782 <do_tcp_send+0xea>
   2071e:	2300      	movs	r3, #0
   20720:	4638      	mov	r0, r7
   20722:	e9cd 8800 	strd	r8, r8, [sp]
   20726:	eba9 0205 	sub.w	r2, r9, r5
   2072a:	eb0a 0105 	add.w	r1, sl, r5
   2072e:	f016 f8e7 	bl	36900 <z_impl_zsock_sendto>
		if (ret < 0) {
   20732:	1e04      	subs	r4, r0, #0
   20734:	daf0      	bge.n	20718 <do_tcp_send+0x80>
   20736:	4a23      	ldr	r2, [pc, #140]	; (207c4 <do_tcp_send+0x12c>)
   20738:	4c23      	ldr	r4, [pc, #140]	; (207c8 <do_tcp_send+0x130>)
   2073a:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send() failed: %d", -errno);
   2073c:	f016 fb77 	bl	36e2e <__errno>
   20740:	08e4      	lsrs	r4, r4, #3
   20742:	6801      	ldr	r1, [r0, #0]
   20744:	01a4      	lsls	r4, r4, #6
   20746:	f044 0401 	orr.w	r4, r4, #1
   2074a:	4622      	mov	r2, r4
   2074c:	4823      	ldr	r0, [pc, #140]	; (207dc <do_tcp_send+0x144>)
   2074e:	4249      	negs	r1, r1
   20750:	f015 fc75 	bl	3603e <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   20754:	f016 fb6b 	bl	36e2e <__errno>
   20758:	6803      	ldr	r3, [r0, #0]
   2075a:	2b0b      	cmp	r3, #11
   2075c:	d0c8      	beq.n	206f0 <do_tcp_send+0x58>
   2075e:	f016 fb66 	bl	36e2e <__errno>
   20762:	6803      	ldr	r3, [r0, #0]
   20764:	2b74      	cmp	r3, #116	; 0x74
   20766:	d0c3      	beq.n	206f0 <do_tcp_send+0x58>
				if (proxy.role == AT_TCP_ROLE_CLIENT) {
   20768:	68f3      	ldr	r3, [r6, #12]
   2076a:	2b00      	cmp	r3, #0
   2076c:	d1b9      	bne.n	206e2 <do_tcp_send+0x4a>
					do_tcp_client_disconnect(-errno);
   2076e:	f016 fb5e 	bl	36e2e <__errno>
   20772:	6800      	ldr	r0, [r0, #0]
   20774:	4240      	negs	r0, r0
   20776:	f7ff fd29 	bl	201cc <do_tcp_client_disconnect>
			ret = -errno;
   2077a:	f016 fb58 	bl	36e2e <__errno>
   2077e:	6804      	ldr	r4, [r0, #0]
   20780:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XTCPSEND: %d\r\n", offset);
   20782:	4b15      	ldr	r3, [pc, #84]	; (207d8 <do_tcp_send+0x140>)
   20784:	f640 228c 	movw	r2, #2700	; 0xa8c
   20788:	2100      	movs	r1, #0
   2078a:	4812      	ldr	r0, [pc, #72]	; (207d4 <do_tcp_send+0x13c>)
   2078c:	9500      	str	r5, [sp, #0]
   2078e:	f018 fb0e 	bl	38dae <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   20792:	4810      	ldr	r0, [pc, #64]	; (207d4 <do_tcp_send+0x13c>)
   20794:	f7fc fc6c 	bl	1d070 <strlen>
   20798:	4601      	mov	r1, r0
   2079a:	480e      	ldr	r0, [pc, #56]	; (207d4 <do_tcp_send+0x13c>)
   2079c:	f7fd fd24 	bl	1e1e8 <rsp_send>
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   207a0:	68f3      	ldr	r3, [r6, #12]
   207a2:	2b01      	cmp	r3, #1
   207a4:	d109      	bne.n	207ba <do_tcp_send+0x122>
	z_impl_k_timer_start(timer, duration, period);
   207a6:	2200      	movs	r2, #0
   207a8:	2300      	movs	r3, #0
   207aa:	4809      	ldr	r0, [pc, #36]	; (207d0 <do_tcp_send+0x138>)
   207ac:	e9cd 2300 	strd	r2, r3, [sp]
   207b0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   207b4:	2300      	movs	r3, #0
   207b6:	f013 fead 	bl	34514 <z_impl_k_timer_start>
	if (ret >= 0) {
   207ba:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   207be:	e781      	b.n	206c4 <do_tcp_send+0x2c>
   207c0:	20023368 	.word	0x20023368
   207c4:	00039a50 	.word	0x00039a50
   207c8:	00039b18 	.word	0x00039b18
   207cc:	0003ad45 	.word	0x0003ad45
   207d0:	20020720 	.word	0x20020720
   207d4:	200287b0 	.word	0x200287b0
   207d8:	0003b1d5 	.word	0x0003b1d5
   207dc:	0003ad57 	.word	0x0003ad57

000207e0 <handle_at_tcp_send>:
	int size = NET_IPV4_MTU;
   207e0:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   207e4:	b590      	push	{r4, r7, lr}
   207e6:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	switch (cmd_type) {
   207ea:	2801      	cmp	r0, #1
{
   207ec:	af00      	add	r7, sp, #0
   207ee:	4604      	mov	r4, r0
	int size = NET_IPV4_MTU;
   207f0:	607b      	str	r3, [r7, #4]
	switch (cmd_type) {
   207f2:	d005      	beq.n	20800 <handle_at_tcp_send+0x20>
	int err = -EINVAL;
   207f4:	f06f 0015 	mvn.w	r0, #21
}
   207f8:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   207fc:	46bd      	mov	sp, r7
   207fe:	bd90      	pop	{r4, r7, pc}
		if (at_params_valid_count_get(&at_param_list) < 3) {
   20800:	481a      	ldr	r0, [pc, #104]	; (2086c <handle_at_tcp_send+0x8c>)
   20802:	f017 fc03 	bl	3800c <at_params_valid_count_get>
   20806:	2802      	cmp	r0, #2
   20808:	d9f4      	bls.n	207f4 <handle_at_tcp_send+0x14>
		err = at_params_short_get(&at_param_list, 1, &datatype);
   2080a:	4621      	mov	r1, r4
   2080c:	4817      	ldr	r0, [pc, #92]	; (2086c <handle_at_tcp_send+0x8c>)
   2080e:	1cba      	adds	r2, r7, #2
   20810:	f017 fbb4 	bl	37f7c <at_params_short_get>
		if (err) {
   20814:	2800      	cmp	r0, #0
   20816:	d1ef      	bne.n	207f8 <handle_at_tcp_send+0x18>
		err = at_params_string_get(&at_param_list, 2, data, &size);
   20818:	2102      	movs	r1, #2
   2081a:	4814      	ldr	r0, [pc, #80]	; (2086c <handle_at_tcp_send+0x8c>)
   2081c:	1d3b      	adds	r3, r7, #4
   2081e:	f107 0208 	add.w	r2, r7, #8
   20822:	f017 fbd0 	bl	37fc6 <at_params_string_get>
		if (err) {
   20826:	2800      	cmp	r0, #0
   20828:	d1e6      	bne.n	207f8 <handle_at_tcp_send+0x18>
		if (datatype == DATATYPE_HEXADECIMAL) {
   2082a:	887b      	ldrh	r3, [r7, #2]
   2082c:	6879      	ldr	r1, [r7, #4]
   2082e:	b9bb      	cbnz	r3, 20860 <handle_at_tcp_send+0x80>
			uint8_t data_hex[size / 2];
   20830:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   20834:	105b      	asrs	r3, r3, #1
   20836:	1dda      	adds	r2, r3, #7
   20838:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   2083c:	466c      	mov	r4, sp
			uint8_t data_hex[size / 2];
   2083e:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   20842:	466a      	mov	r2, sp
   20844:	b29b      	uxth	r3, r3
   20846:	b289      	uxth	r1, r1
   20848:	f107 0008 	add.w	r0, r7, #8
   2084c:	f014 fea6 	bl	3559c <slm_util_atoh>
			if (err > 0) {
   20850:	2800      	cmp	r0, #0
   20852:	dd03      	ble.n	2085c <handle_at_tcp_send+0x7c>
				err = do_tcp_send(data_hex, err);
   20854:	4601      	mov	r1, r0
   20856:	4668      	mov	r0, sp
   20858:	f7ff ff1e 	bl	20698 <do_tcp_send>
   2085c:	46a5      	mov	sp, r4
   2085e:	e7cb      	b.n	207f8 <handle_at_tcp_send+0x18>
			err = do_tcp_send(data, size);
   20860:	f107 0008 	add.w	r0, r7, #8
   20864:	f7ff ff18 	bl	20698 <do_tcp_send>
   20868:	e7c6      	b.n	207f8 <handle_at_tcp_send+0x18>
   2086a:	bf00      	nop
   2086c:	20023308 	.word	0x20023308

00020870 <tcp_thread_func>:
{
   20870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   20874:	f8df 8284 	ldr.w	r8, [pc, #644]	; 20afc <tcp_thread_func+0x28c>
   20878:	4c8f      	ldr	r4, [pc, #572]	; (20ab8 <tcp_thread_func+0x248>)
   2087a:	4646      	mov	r6, r8
   2087c:	4a8f      	ldr	r2, [pc, #572]	; (20abc <tcp_thread_func+0x24c>)
{
   2087e:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   20882:	1aa4      	subs	r4, r4, r2
   20884:	08e4      	lsrs	r4, r4, #3
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   20886:	f8d8 700c 	ldr.w	r7, [r8, #12]
   2088a:	2f01      	cmp	r7, #1
   2088c:	d178      	bne.n	20980 <tcp_thread_func+0x110>
		socklen_t len = sizeof(struct sockaddr_in);
   2088e:	2308      	movs	r3, #8
   20890:	9307      	str	r3, [sp, #28]
		proxy.sock_peer = INVALID_SOCKET;
   20892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20896:	f8d8 0000 	ldr.w	r0, [r8]
   2089a:	f8c8 3008 	str.w	r3, [r8, #8]
	return z_impl_zsock_accept(sock, addr, addrlen);
   2089e:	4988      	ldr	r1, [pc, #544]	; (20ac0 <tcp_thread_func+0x250>)
   208a0:	aa07      	add	r2, sp, #28
   208a2:	f016 f817 	bl	368d4 <z_impl_zsock_accept>
		if (ret < 0) {
   208a6:	f1b0 0900 	subs.w	r9, r0, #0
   208aa:	da14      	bge.n	208d6 <tcp_thread_func+0x66>
			LOG_ERR("accept() failed: %d", -errno);
   208ac:	f016 fabf 	bl	36e2e <__errno>
   208b0:	01a4      	lsls	r4, r4, #6
   208b2:	6801      	ldr	r1, [r0, #0]
   208b4:	f044 0401 	orr.w	r4, r4, #1
   208b8:	4622      	mov	r2, r4
   208ba:	4249      	negs	r1, r1
   208bc:	4881      	ldr	r0, [pc, #516]	; (20ac4 <tcp_thread_func+0x254>)
   208be:	f015 fbbe 	bl	3603e <log_1>
			do_tcp_server_stop(-errno);
   208c2:	f016 fab4 	bl	36e2e <__errno>
   208c6:	6800      	ldr	r0, [r0, #0]
   208c8:	4240      	negs	r0, r0
   208ca:	f7ff fe8d 	bl	205e8 <do_tcp_server_stop>
}
   208ce:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   208d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208d6:	ad0a      	add	r5, sp, #40	; 0x28
   208d8:	2310      	movs	r3, #16
   208da:	462a      	mov	r2, r5
   208dc:	4638      	mov	r0, r7
   208de:	497a      	ldr	r1, [pc, #488]	; (20ac8 <tcp_thread_func+0x258>)
   208e0:	f005 f9dc 	bl	25c9c <z_impl_net_addr_ntop>
		if (inet_ntop(AF_INET, &remote.sin_addr, peer_addr,
   208e4:	b170      	cbz	r0, 20904 <tcp_thread_func+0x94>
			sprintf(rsp_buf, "#XTCPSVR: %s connected\r\n",
   208e6:	2100      	movs	r1, #0
   208e8:	f640 228c 	movw	r2, #2700	; 0xa8c
   208ec:	4b77      	ldr	r3, [pc, #476]	; (20acc <tcp_thread_func+0x25c>)
   208ee:	4878      	ldr	r0, [pc, #480]	; (20ad0 <tcp_thread_func+0x260>)
   208f0:	9500      	str	r5, [sp, #0]
   208f2:	f018 fa5c 	bl	38dae <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   208f6:	4876      	ldr	r0, [pc, #472]	; (20ad0 <tcp_thread_func+0x260>)
   208f8:	f7fc fbba 	bl	1d070 <strlen>
   208fc:	4601      	mov	r1, r0
   208fe:	4874      	ldr	r0, [pc, #464]	; (20ad0 <tcp_thread_func+0x260>)
   20900:	f7fd fc72 	bl	1e1e8 <rsp_send>
		proxy.sock_peer = ret;
   20904:	f8c6 9008 	str.w	r9, [r6, #8]
   20908:	2200      	movs	r2, #0
   2090a:	2300      	movs	r3, #0
   2090c:	4871      	ldr	r0, [pc, #452]	; (20ad4 <tcp_thread_func+0x264>)
   2090e:	e9cd 2300 	strd	r2, r3, [sp]
   20912:	2300      	movs	r3, #0
   20914:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   20918:	f013 fdfc 	bl	34514 <z_impl_k_timer_start>
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   2091c:	68f3      	ldr	r3, [r6, #12]
   2091e:	2b01      	cmp	r3, #1
   20920:	d12e      	bne.n	20980 <tcp_thread_func+0x110>
		sock = proxy.sock_peer;
   20922:	68b3      	ldr	r3, [r6, #8]
		sock = proxy.sock;
   20924:	9303      	str	r3, [sp, #12]
	fds.fd = sock;
   20926:	9b03      	ldr	r3, [sp, #12]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
   20928:	4d6b      	ldr	r5, [pc, #428]	; (20ad8 <tcp_thread_func+0x268>)
   2092a:	9308      	str	r3, [sp, #32]
	fds.events = POLLIN;
   2092c:	2301      	movs	r3, #1
   2092e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   20932:	2300      	movs	r3, #0
	buf->tail = 0;
   20934:	e9c5 3300 	strd	r3, r3, [r5]
	memset(&buf->misc, 0, sizeof(buf->misc));
   20938:	e9c5 3302 	strd	r3, r3, [r5, #8]
	return z_impl_k_timer_status_get(timer);
   2093c:	f8df a194 	ldr.w	sl, [pc, #404]	; 20ad4 <tcp_thread_func+0x264>
				rsp_send(rsp_buf, strlen(rsp_buf));
   20940:	4f63      	ldr	r7, [pc, #396]	; (20ad0 <tcp_thread_func+0x260>)
		if (proxy.role == AT_TCP_ROLE_SERVER &&
   20942:	68f3      	ldr	r3, [r6, #12]
   20944:	2b01      	cmp	r3, #1
   20946:	d11d      	bne.n	20984 <tcp_thread_func+0x114>
   20948:	4650      	mov	r0, sl
   2094a:	f017 ff51 	bl	387f0 <z_impl_k_timer_status_get>
   2094e:	b1c8      	cbz	r0, 20984 <tcp_thread_func+0x114>
	z_impl_k_timer_stop(timer);
   20950:	4860      	ldr	r0, [pc, #384]	; (20ad4 <tcp_thread_func+0x264>)
   20952:	f017 ff2b 	bl	387ac <z_impl_k_timer_stop>
			LOG_INF("Connecion timeout");
   20956:	01a1      	lsls	r1, r4, #6
   20958:	4860      	ldr	r0, [pc, #384]	; (20adc <tcp_thread_func+0x26c>)
   2095a:	f041 0103 	orr.w	r1, r1, #3
   2095e:	f015 fb5f 	bl	36020 <log_0>
			sprintf(rsp_buf, "#XTCPSVR: timeout\r\n");
   20962:	495f      	ldr	r1, [pc, #380]	; (20ae0 <tcp_thread_func+0x270>)
   20964:	485a      	ldr	r0, [pc, #360]	; (20ad0 <tcp_thread_func+0x260>)
   20966:	f018 fa49 	bl	38dfc <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   2096a:	4859      	ldr	r0, [pc, #356]	; (20ad0 <tcp_thread_func+0x260>)
   2096c:	f7fc fb80 	bl	1d070 <strlen>
   20970:	4601      	mov	r1, r0
   20972:	4857      	ldr	r0, [pc, #348]	; (20ad0 <tcp_thread_func+0x260>)
   20974:	f7fd fc38 	bl	1e1e8 <rsp_send>
			close(proxy.sock_peer);
   20978:	68b0      	ldr	r0, [r6, #8]
   2097a:	f014 fe67 	bl	3564c <close>
			goto thread_entry;
   2097e:	e782      	b.n	20886 <tcp_thread_func+0x16>
		sock = proxy.sock;
   20980:	6833      	ldr	r3, [r6, #0]
   20982:	e7cf      	b.n	20924 <tcp_thread_func+0xb4>
	return z_impl_zsock_poll(fds, nfds, timeout);
   20984:	2101      	movs	r1, #1
   20986:	f242 7210 	movw	r2, #10000	; 0x2710
   2098a:	a808      	add	r0, sp, #32
   2098c:	f003 fc1a 	bl	241c4 <z_impl_zsock_poll>
		if (ret < 0) {  /* IO error */
   20990:	1e01      	subs	r1, r0, #0
   20992:	da06      	bge.n	209a2 <tcp_thread_func+0x132>
			LOG_WRN("poll() error: %d", ret);
   20994:	01a2      	lsls	r2, r4, #6
   20996:	4853      	ldr	r0, [pc, #332]	; (20ae4 <tcp_thread_func+0x274>)
   20998:	f042 0202 	orr.w	r2, r2, #2
					LOG_ERR("hex convert error: %d", ret);
   2099c:	f015 fb4f 	bl	3603e <log_1>
					continue;
   209a0:	e7cf      	b.n	20942 <tcp_thread_func+0xd2>
		if (ret == 0) {  /* timeout */
   209a2:	d0ce      	beq.n	20942 <tcp_thread_func+0xd2>
		if ((fds.revents & POLLIN) == POLLIN) {
   209a4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   209a8:	07db      	lsls	r3, r3, #31
   209aa:	d5ca      	bpl.n	20942 <tcp_thread_func+0xd2>
			if (proxy.role == AT_TCP_ROLE_SERVER) {
   209ac:	68f3      	ldr	r3, [r6, #12]
   209ae:	2b01      	cmp	r3, #1
   209b0:	d102      	bne.n	209b8 <tcp_thread_func+0x148>
   209b2:	4650      	mov	r0, sl
   209b4:	f017 fefa 	bl	387ac <z_impl_k_timer_stop>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   209b8:	2300      	movs	r3, #0
   209ba:	f44f 7210 	mov.w	r2, #576	; 0x240
   209be:	e9cd 3300 	strd	r3, r3, [sp]
   209c2:	9803      	ldr	r0, [sp, #12]
   209c4:	a90a      	add	r1, sp, #40	; 0x28
   209c6:	f015 ffb8 	bl	3693a <z_impl_zsock_recvfrom>
			if (ret < 0) {
   209ca:	1e02      	subs	r2, r0, #0
   209cc:	da0a      	bge.n	209e4 <tcp_thread_func+0x174>
				LOG_WRN("recv() error: %d", -errno);
   209ce:	f016 fa2e 	bl	36e2e <__errno>
   209d2:	ea4f 1984 	mov.w	r9, r4, lsl #6
   209d6:	6801      	ldr	r1, [r0, #0]
   209d8:	f049 0902 	orr.w	r9, r9, #2
   209dc:	464a      	mov	r2, r9
   209de:	4842      	ldr	r0, [pc, #264]	; (20ae8 <tcp_thread_func+0x278>)
   209e0:	4249      	negs	r1, r1
   209e2:	e7db      	b.n	2099c <tcp_thread_func+0x12c>
			if (ret == 0) {
   209e4:	d0ad      	beq.n	20942 <tcp_thread_func+0xd2>
			if (proxy.datamode) {
   209e6:	f896 b010 	ldrb.w	fp, [r6, #16]
   209ea:	f1bb 0f00 	cmp.w	fp, #0
   209ee:	d011      	beq.n	20a14 <tcp_thread_func+0x1a4>
				rsp_send(data, ret);
   209f0:	4611      	mov	r1, r2
   209f2:	a80a      	add	r0, sp, #40	; 0x28
				rsp_send(rsp_buf, strlen(rsp_buf));
   209f4:	f7fd fbf8 	bl	1e1e8 <rsp_send>
			if (proxy.role == AT_TCP_ROLE_SERVER) {
   209f8:	68f3      	ldr	r3, [r6, #12]
   209fa:	2b01      	cmp	r3, #1
   209fc:	d1a1      	bne.n	20942 <tcp_thread_func+0xd2>
	z_impl_k_timer_start(timer, duration, period);
   209fe:	2200      	movs	r2, #0
   20a00:	2300      	movs	r3, #0
   20a02:	4650      	mov	r0, sl
   20a04:	e9cd 2300 	strd	r2, r3, [sp]
   20a08:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   20a0c:	2300      	movs	r3, #0
   20a0e:	f013 fd81 	bl	34514 <z_impl_k_timer_start>
   20a12:	e796      	b.n	20942 <tcp_thread_func+0xd2>
			} else if (slm_util_hex_check(data, ret)) {
   20a14:	b291      	uxth	r1, r2
   20a16:	a80a      	add	r0, sp, #40	; 0x28
   20a18:	e9cd 1204 	strd	r1, r2, [sp, #16]
   20a1c:	f014 fdab 	bl	35576 <slm_util_hex_check>
   20a20:	9a05      	ldr	r2, [sp, #20]
   20a22:	4681      	mov	r9, r0
   20a24:	b388      	cbz	r0, 20a8a <tcp_thread_func+0x21a>
				ret = slm_util_htoa(data, ret, data_hex,
   20a26:	f44f 6390 	mov.w	r3, #1152	; 0x480
   20a2a:	4a30      	ldr	r2, [pc, #192]	; (20aec <tcp_thread_func+0x27c>)
   20a2c:	9904      	ldr	r1, [sp, #16]
   20a2e:	a80a      	add	r0, sp, #40	; 0x28
   20a30:	f7fd faaa 	bl	1df88 <slm_util_htoa>
				if (ret < 0) {
   20a34:	f1b0 0900 	subs.w	r9, r0, #0
   20a38:	da05      	bge.n	20a46 <tcp_thread_func+0x1d6>
					LOG_ERR("hex convert error: %d", ret);
   20a3a:	01a2      	lsls	r2, r4, #6
   20a3c:	4649      	mov	r1, r9
   20a3e:	482c      	ldr	r0, [pc, #176]	; (20af0 <tcp_thread_func+0x280>)
   20a40:	f042 0201 	orr.w	r2, r2, #1
   20a44:	e7aa      	b.n	2099c <tcp_thread_func+0x12c>
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->tail - buf->head);
   20a46:	682a      	ldr	r2, [r5, #0]
   20a48:	692b      	ldr	r3, [r5, #16]
   20a4a:	4413      	add	r3, r2
   20a4c:	686a      	ldr	r2, [r5, #4]
   20a4e:	1a9b      	subs	r3, r3, r2
	if (ring_buf_space_get(&data_buf) < length) {
   20a50:	4599      	cmp	r9, r3
   20a52:	d909      	bls.n	20a68 <tcp_thread_func+0x1f8>
					sprintf(rsp_buf,
   20a54:	4638      	mov	r0, r7
   20a56:	4927      	ldr	r1, [pc, #156]	; (20af4 <tcp_thread_func+0x284>)
   20a58:	f018 f9d0 	bl	38dfc <strcpy>
				rsp_send(rsp_buf, strlen(rsp_buf));
   20a5c:	4638      	mov	r0, r7
   20a5e:	f7fc fb07 	bl	1d070 <strlen>
   20a62:	4601      	mov	r1, r0
   20a64:	4638      	mov	r0, r7
   20a66:	e7c5      	b.n	209f4 <tcp_thread_func+0x184>
	return ring_buf_put(&data_buf, data, length);
   20a68:	464a      	mov	r2, r9
   20a6a:	4920      	ldr	r1, [pc, #128]	; (20aec <tcp_thread_func+0x27c>)
   20a6c:	481a      	ldr	r0, [pc, #104]	; (20ad8 <tcp_thread_func+0x268>)
   20a6e:	f015 fa29 	bl	35ec4 <ring_buf_put>
				if (tcp_data_save(data_hex, ret) < 0) {
   20a72:	2800      	cmp	r0, #0
   20a74:	dbee      	blt.n	20a54 <tcp_thread_func+0x1e4>
					sprintf(rsp_buf,
   20a76:	f640 228c 	movw	r2, #2700	; 0xa8c
   20a7a:	4659      	mov	r1, fp
   20a7c:	e9cd b900 	strd	fp, r9, [sp]
   20a80:	4b1d      	ldr	r3, [pc, #116]	; (20af8 <tcp_thread_func+0x288>)
					sprintf(rsp_buf,
   20a82:	4638      	mov	r0, r7
   20a84:	f018 f993 	bl	38dae <__sprintf_chk>
   20a88:	e7e8      	b.n	20a5c <tcp_thread_func+0x1ec>
   20a8a:	6829      	ldr	r1, [r5, #0]
   20a8c:	692b      	ldr	r3, [r5, #16]
   20a8e:	440b      	add	r3, r1
   20a90:	6869      	ldr	r1, [r5, #4]
   20a92:	1a5b      	subs	r3, r3, r1
	if (ring_buf_space_get(&data_buf) < length) {
   20a94:	429a      	cmp	r2, r3
   20a96:	d8dd      	bhi.n	20a54 <tcp_thread_func+0x1e4>
	return ring_buf_put(&data_buf, data, length);
   20a98:	480f      	ldr	r0, [pc, #60]	; (20ad8 <tcp_thread_func+0x268>)
   20a9a:	a90a      	add	r1, sp, #40	; 0x28
   20a9c:	9204      	str	r2, [sp, #16]
   20a9e:	f015 fa11 	bl	35ec4 <ring_buf_put>
				if (tcp_data_save(data, ret) < 0) {
   20aa2:	2800      	cmp	r0, #0
   20aa4:	dbd6      	blt.n	20a54 <tcp_thread_func+0x1e4>
					sprintf(rsp_buf,
   20aa6:	2301      	movs	r3, #1
   20aa8:	9a04      	ldr	r2, [sp, #16]
   20aaa:	9300      	str	r3, [sp, #0]
   20aac:	9201      	str	r2, [sp, #4]
   20aae:	4649      	mov	r1, r9
   20ab0:	f640 228c 	movw	r2, #2700	; 0xa8c
   20ab4:	4b10      	ldr	r3, [pc, #64]	; (20af8 <tcp_thread_func+0x288>)
   20ab6:	e7e4      	b.n	20a82 <tcp_thread_func+0x212>
   20ab8:	00039b18 	.word	0x00039b18
   20abc:	00039a50 	.word	0x00039a50
   20ac0:	2002337c 	.word	0x2002337c
   20ac4:	0003b1e5 	.word	0x0003b1e5
   20ac8:	20023380 	.word	0x20023380
   20acc:	0003b1f9 	.word	0x0003b1f9
   20ad0:	200287b0 	.word	0x200287b0
   20ad4:	20020720 	.word	0x20020720
   20ad8:	200200c4 	.word	0x200200c4
   20adc:	0003b212 	.word	0x0003b212
   20ae0:	0003b224 	.word	0x0003b224
   20ae4:	0003b238 	.word	0x0003b238
   20ae8:	0003ad13 	.word	0x0003ad13
   20aec:	2002ae9c 	.word	0x2002ae9c
   20af0:	0003aca3 	.word	0x0003aca3
   20af4:	0003b249 	.word	0x0003b249
   20af8:	0003b25e 	.word	0x0003b25e
   20afc:	20023368 	.word	0x20023368

00020b00 <handle_at_tcp_server>:
{
   20b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   20b02:	4604      	mov	r4, r0
   20b04:	b08d      	sub	sp, #52	; 0x34
	int param_count = at_params_valid_count_get(&at_param_list);
   20b06:	48b2      	ldr	r0, [pc, #712]	; (20dd0 <handle_at_tcp_server+0x2d0>)
   20b08:	f017 fa80 	bl	3800c <at_params_valid_count_get>
	switch (cmd_type) {
   20b0c:	2c02      	cmp	r4, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   20b0e:	4606      	mov	r6, r0
	switch (cmd_type) {
   20b10:	f000 818a 	beq.w	20e28 <handle_at_tcp_server+0x328>
   20b14:	2c03      	cmp	r4, #3
   20b16:	f000 81af 	beq.w	20e78 <handle_at_tcp_server+0x378>
   20b1a:	2c01      	cmp	r4, #1
   20b1c:	f040 80ca 	bne.w	20cb4 <handle_at_tcp_server+0x1b4>
		if (param_count < 2) {
   20b20:	2801      	cmp	r0, #1
   20b22:	f340 80c7 	ble.w	20cb4 <handle_at_tcp_server+0x1b4>
		err = at_params_short_get(&at_param_list, 1, &op);
   20b26:	4621      	mov	r1, r4
   20b28:	48a9      	ldr	r0, [pc, #676]	; (20dd0 <handle_at_tcp_server+0x2d0>)
   20b2a:	aa09      	add	r2, sp, #36	; 0x24
   20b2c:	f017 fa26 	bl	37f7c <at_params_short_get>
		if (err) {
   20b30:	4604      	mov	r4, r0
   20b32:	2800      	cmp	r0, #0
   20b34:	f040 80aa 	bne.w	20c8c <handle_at_tcp_server+0x18c>
		if (op == AT_SERVER_START ||
   20b38:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   20b3c:	1e5a      	subs	r2, r3, #1
   20b3e:	2a01      	cmp	r2, #1
   20b40:	f200 8130 	bhi.w	20da4 <handle_at_tcp_server+0x2a4>
			proxy.sec_tag = INVALID_SEC_TAG;
   20b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20b48:	4da2      	ldr	r5, [pc, #648]	; (20dd4 <handle_at_tcp_server+0x2d4>)
			if (param_count < 3) {
   20b4a:	2e02      	cmp	r6, #2
			proxy.sec_tag = INVALID_SEC_TAG;
   20b4c:	606b      	str	r3, [r5, #4]
			if (param_count < 3) {
   20b4e:	f000 80b1 	beq.w	20cb4 <handle_at_tcp_server+0x1b4>
			err = at_params_short_get(&at_param_list, 2, &port);
   20b52:	2102      	movs	r1, #2
   20b54:	489e      	ldr	r0, [pc, #632]	; (20dd0 <handle_at_tcp_server+0x2d0>)
   20b56:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   20b5a:	f017 fa0f 	bl	37f7c <at_params_short_get>
			if (err) {
   20b5e:	4604      	mov	r4, r0
   20b60:	2800      	cmp	r0, #0
   20b62:	f040 8093 	bne.w	20c8c <handle_at_tcp_server+0x18c>
			if (param_count > 3) {
   20b66:	2e03      	cmp	r6, #3
   20b68:	d004      	beq.n	20b74 <handle_at_tcp_server+0x74>
				at_params_int_get(&at_param_list, 3,
   20b6a:	2103      	movs	r1, #3
   20b6c:	4898      	ldr	r0, [pc, #608]	; (20dd0 <handle_at_tcp_server+0x2d0>)
   20b6e:	1d2a      	adds	r2, r5, #4
   20b70:	f017 fa16 	bl	37fa0 <at_params_int_get>
			err = do_tcp_server_start(port, proxy.sec_tag);
   20b74:	686c      	ldr	r4, [r5, #4]
   20b76:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26
	if (sec_tag == INVALID_SEC_TAG) {
   20b7a:	1c63      	adds	r3, r4, #1
	return z_impl_zsock_socket(family, type, proto);
   20b7c:	f04f 0101 	mov.w	r1, #1
   20b80:	bf0c      	ite	eq
   20b82:	2206      	moveq	r2, #6
   20b84:	f44f 7281 	movne.w	r2, #258	; 0x102
   20b88:	4608      	mov	r0, r1
   20b8a:	f003 faf5 	bl	24178 <z_impl_zsock_socket>
		proxy.sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);
   20b8e:	6028      	str	r0, [r5, #0]
	if (proxy.sock < 0) {
   20b90:	6828      	ldr	r0, [r5, #0]
   20b92:	2800      	cmp	r0, #0
   20b94:	da2e      	bge.n	20bf4 <handle_at_tcp_server+0xf4>
   20b96:	4a90      	ldr	r2, [pc, #576]	; (20dd8 <handle_at_tcp_server+0x2d8>)
   20b98:	4c90      	ldr	r4, [pc, #576]	; (20ddc <handle_at_tcp_server+0x2dc>)
   20b9a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
   20b9c:	f016 f947 	bl	36e2e <__errno>
   20ba0:	08e4      	lsrs	r4, r4, #3
   20ba2:	6801      	ldr	r1, [r0, #0]
   20ba4:	01a4      	lsls	r4, r4, #6
   20ba6:	f044 0401 	orr.w	r4, r4, #1
   20baa:	4622      	mov	r2, r4
   20bac:	4249      	negs	r1, r1
   20bae:	488c      	ldr	r0, [pc, #560]	; (20de0 <handle_at_tcp_server+0x2e0>)
   20bb0:	f015 fa45 	bl	3603e <log_1>
		sprintf(rsp_buf, "#XTCPSVR: %d\r\n", -errno);
   20bb4:	f016 f93b 	bl	36e2e <__errno>
   20bb8:	6803      	ldr	r3, [r0, #0]
   20bba:	2100      	movs	r1, #0
   20bbc:	425b      	negs	r3, r3
   20bbe:	f640 228c 	movw	r2, #2700	; 0xa8c
   20bc2:	9300      	str	r3, [sp, #0]
   20bc4:	4887      	ldr	r0, [pc, #540]	; (20de4 <handle_at_tcp_server+0x2e4>)
   20bc6:	4b88      	ldr	r3, [pc, #544]	; (20de8 <handle_at_tcp_server+0x2e8>)
   20bc8:	f018 f8f1 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20bcc:	4885      	ldr	r0, [pc, #532]	; (20de4 <handle_at_tcp_server+0x2e4>)
   20bce:	f7fc fa4f 	bl	1d070 <strlen>
   20bd2:	4601      	mov	r1, r0
   20bd4:	4883      	ldr	r0, [pc, #524]	; (20de4 <handle_at_tcp_server+0x2e4>)
   20bd6:	f7fd fb07 	bl	1e1e8 <rsp_send>
			return -errno;
   20bda:	f016 f928 	bl	36e2e <__errno>
   20bde:	6804      	ldr	r4, [r0, #0]
   20be0:	4264      	negs	r4, r4
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   20be2:	2c00      	cmp	r4, #0
   20be4:	d152      	bne.n	20c8c <handle_at_tcp_server+0x18c>
   20be6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   20bea:	2b02      	cmp	r3, #2
   20bec:	d14e      	bne.n	20c8c <handle_at_tcp_server+0x18c>
				proxy.datamode = true;
   20bee:	2301      	movs	r3, #1
   20bf0:	742b      	strb	r3, [r5, #16]
   20bf2:	e04b      	b.n	20c8c <handle_at_tcp_server+0x18c>
	if (sec_tag != INVALID_SEC_TAG) {
   20bf4:	1c66      	adds	r6, r4, #1
   20bf6:	d02f      	beq.n	20c58 <handle_at_tcp_server+0x158>
		sec_tag_t sec_tag_list[1] = { sec_tag };
   20bf8:	940a      	str	r4, [sp, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   20bfa:	2304      	movs	r3, #4
   20bfc:	2201      	movs	r2, #1
   20bfe:	9300      	str	r3, [sp, #0]
   20c00:	f44f 718d 	mov.w	r1, #282	; 0x11a
   20c04:	ab0a      	add	r3, sp, #40	; 0x28
   20c06:	f015 fed7 	bl	369b8 <z_impl_zsock_setsockopt>
		if (ret) {
   20c0a:	b328      	cbz	r0, 20c58 <handle_at_tcp_server+0x158>
   20c0c:	4a72      	ldr	r2, [pc, #456]	; (20dd8 <handle_at_tcp_server+0x2d8>)
   20c0e:	4c73      	ldr	r4, [pc, #460]	; (20ddc <handle_at_tcp_server+0x2dc>)
   20c10:	1aa4      	subs	r4, r4, r2
   20c12:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set tag list failed: %d", -errno);
   20c14:	f016 f90b 	bl	36e2e <__errno>
   20c18:	01a4      	lsls	r4, r4, #6
   20c1a:	f044 0401 	orr.w	r4, r4, #1
   20c1e:	4622      	mov	r2, r4
   20c20:	6801      	ldr	r1, [r0, #0]
   20c22:	4872      	ldr	r0, [pc, #456]	; (20dec <handle_at_tcp_server+0x2ec>)
   20c24:	4249      	negs	r1, r1
   20c26:	f015 fa0a 	bl	3603e <log_1>
			sprintf(rsp_buf, "#XTCPSVR: %d\r\n", -errno);
   20c2a:	f016 f900 	bl	36e2e <__errno>
   20c2e:	6803      	ldr	r3, [r0, #0]
   20c30:	f640 228c 	movw	r2, #2700	; 0xa8c
   20c34:	425b      	negs	r3, r3
   20c36:	2100      	movs	r1, #0
   20c38:	9300      	str	r3, [sp, #0]
   20c3a:	486a      	ldr	r0, [pc, #424]	; (20de4 <handle_at_tcp_server+0x2e4>)
   20c3c:	4b6a      	ldr	r3, [pc, #424]	; (20de8 <handle_at_tcp_server+0x2e8>)
   20c3e:	f018 f8b6 	bl	38dae <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   20c42:	4868      	ldr	r0, [pc, #416]	; (20de4 <handle_at_tcp_server+0x2e4>)
   20c44:	f7fc fa14 	bl	1d070 <strlen>
   20c48:	4601      	mov	r1, r0
   20c4a:	4866      	ldr	r0, [pc, #408]	; (20de4 <handle_at_tcp_server+0x2e4>)
   20c4c:	f7fd facc 	bl	1e1e8 <rsp_send>
			close(proxy.sock);
   20c50:	6828      	ldr	r0, [r5, #0]
   20c52:	f014 fcfb 	bl	3564c <close>
   20c56:	e7c0      	b.n	20bda <handle_at_tcp_server+0xda>
	local.sin_family = AF_INET;
   20c58:	2601      	movs	r6, #1
	local.sin_port = htons(port);
   20c5a:	023b      	lsls	r3, r7, #8
   20c5c:	ea43 2317 	orr.w	r3, r3, r7, lsr #8
	ret = modem_info_params_get(&modem_param);
   20c60:	4863      	ldr	r0, [pc, #396]	; (20df0 <handle_at_tcp_server+0x2f0>)
	local.sin_family = AF_INET;
   20c62:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
	local.sin_port = htons(port);
   20c66:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	ret = modem_info_params_get(&modem_param);
   20c6a:	f008 f81d 	bl	28ca8 <modem_info_params_get>
	if (ret) {
   20c6e:	4604      	mov	r4, r0
   20c70:	b178      	cbz	r0, 20c92 <handle_at_tcp_server+0x192>
   20c72:	4b59      	ldr	r3, [pc, #356]	; (20dd8 <handle_at_tcp_server+0x2d8>)
   20c74:	4a59      	ldr	r2, [pc, #356]	; (20ddc <handle_at_tcp_server+0x2dc>)
		LOG_ERR("Unable to obtain modem parameters (%d)", ret);
   20c76:	4601      	mov	r1, r0
   20c78:	1ad2      	subs	r2, r2, r3
   20c7a:	08d2      	lsrs	r2, r2, #3
   20c7c:	0192      	lsls	r2, r2, #6
   20c7e:	485d      	ldr	r0, [pc, #372]	; (20df4 <handle_at_tcp_server+0x2f4>)
   20c80:	4332      	orrs	r2, r6
   20c82:	f015 f9dc 	bl	3603e <log_1>
		close(proxy.sock);
   20c86:	6828      	ldr	r0, [r5, #0]
   20c88:	f014 fce0 	bl	3564c <close>
}
   20c8c:	4620      	mov	r0, r4
   20c8e:	b00d      	add	sp, #52	; 0x34
   20c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	addr_len = strlen(modem_param.network.ip_address.value_string);
   20c92:	4859      	ldr	r0, [pc, #356]	; (20df8 <handle_at_tcp_server+0x2f8>)
   20c94:	f7fc f9ec 	bl	1d070 <strlen>
	if (addr_len == 0) {
   20c98:	b978      	cbnz	r0, 20cba <handle_at_tcp_server+0x1ba>
   20c9a:	4950      	ldr	r1, [pc, #320]	; (20ddc <handle_at_tcp_server+0x2dc>)
   20c9c:	4b4e      	ldr	r3, [pc, #312]	; (20dd8 <handle_at_tcp_server+0x2d8>)
		LOG_ERR("LTE not connected yet");
   20c9e:	4857      	ldr	r0, [pc, #348]	; (20dfc <handle_at_tcp_server+0x2fc>)
   20ca0:	1ac9      	subs	r1, r1, r3
   20ca2:	08c9      	lsrs	r1, r1, #3
   20ca4:	0189      	lsls	r1, r1, #6
   20ca6:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid local address");
   20caa:	f015 f9b9 	bl	36020 <log_0>
		close(proxy.sock);
   20cae:	6828      	ldr	r0, [r5, #0]
   20cb0:	f014 fccc 	bl	3564c <close>
			return -EINVAL;
   20cb4:	f06f 0415 	mvn.w	r4, #21
   20cb8:	e7e8      	b.n	20c8c <handle_at_tcp_server+0x18c>
	if (!check_for_ipv4(modem_param.network.ip_address.value_string,
   20cba:	b2c1      	uxtb	r1, r0
   20cbc:	484e      	ldr	r0, [pc, #312]	; (20df8 <handle_at_tcp_server+0x2f8>)
   20cbe:	f014 fc91 	bl	355e4 <check_for_ipv4>
   20cc2:	b940      	cbnz	r0, 20cd6 <handle_at_tcp_server+0x1d6>
   20cc4:	4945      	ldr	r1, [pc, #276]	; (20ddc <handle_at_tcp_server+0x2dc>)
   20cc6:	4b44      	ldr	r3, [pc, #272]	; (20dd8 <handle_at_tcp_server+0x2d8>)
		LOG_ERR("Invalid local address");
   20cc8:	484d      	ldr	r0, [pc, #308]	; (20e00 <handle_at_tcp_server+0x300>)
   20cca:	1ac9      	subs	r1, r1, r3
   20ccc:	08c9      	lsrs	r1, r1, #3
   20cce:	0189      	lsls	r1, r1, #6
   20cd0:	f041 0101 	orr.w	r1, r1, #1
   20cd4:	e7e9      	b.n	20caa <handle_at_tcp_server+0x1aa>
	return z_impl_zsock_inet_pton(family, src, dst);
   20cd6:	4948      	ldr	r1, [pc, #288]	; (20df8 <handle_at_tcp_server+0x2f8>)
   20cd8:	4630      	mov	r0, r6
   20cda:	aa0b      	add	r2, sp, #44	; 0x2c
   20cdc:	f015 fe4a 	bl	36974 <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, modem_param.network.ip_address.value_string,
   20ce0:	2801      	cmp	r0, #1
   20ce2:	4607      	mov	r7, r0
   20ce4:	d00f      	beq.n	20d06 <handle_at_tcp_server+0x206>
   20ce6:	4a3c      	ldr	r2, [pc, #240]	; (20dd8 <handle_at_tcp_server+0x2d8>)
   20ce8:	4c3c      	ldr	r4, [pc, #240]	; (20ddc <handle_at_tcp_server+0x2dc>)
   20cea:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Parse local IP address failed: %d", -errno);
   20cec:	f016 f89f 	bl	36e2e <__errno>
   20cf0:	08e4      	lsrs	r4, r4, #3
   20cf2:	6801      	ldr	r1, [r0, #0]
   20cf4:	01a4      	lsls	r4, r4, #6
   20cf6:	f044 0401 	orr.w	r4, r4, #1
   20cfa:	4622      	mov	r2, r4
   20cfc:	4841      	ldr	r0, [pc, #260]	; (20e04 <handle_at_tcp_server+0x304>)
   20cfe:	4249      	negs	r1, r1
   20d00:	f015 f99d 	bl	3603e <log_1>
		close(proxy.sock);
   20d04:	e7d3      	b.n	20cae <handle_at_tcp_server+0x1ae>
	ret = bind(proxy.sock, (struct sockaddr *)&local,
   20d06:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_bind(sock, addr, addrlen);
   20d08:	2208      	movs	r2, #8
   20d0a:	a90a      	add	r1, sp, #40	; 0x28
   20d0c:	f015 fda2 	bl	36854 <z_impl_zsock_bind>
	if (ret) {
   20d10:	4606      	mov	r6, r0
   20d12:	b168      	cbz	r0, 20d30 <handle_at_tcp_server+0x230>
   20d14:	4a30      	ldr	r2, [pc, #192]	; (20dd8 <handle_at_tcp_server+0x2d8>)
   20d16:	4e31      	ldr	r6, [pc, #196]	; (20ddc <handle_at_tcp_server+0x2dc>)
   20d18:	1ab6      	subs	r6, r6, r2
		LOG_ERR("bind() failed: %d", -errno);
   20d1a:	f016 f888 	bl	36e2e <__errno>
   20d1e:	08f6      	lsrs	r6, r6, #3
   20d20:	6801      	ldr	r1, [r0, #0]
   20d22:	01b6      	lsls	r6, r6, #6
   20d24:	f046 0601 	orr.w	r6, r6, #1
   20d28:	4632      	mov	r2, r6
   20d2a:	4837      	ldr	r0, [pc, #220]	; (20e08 <handle_at_tcp_server+0x308>)
   20d2c:	4249      	negs	r1, r1
   20d2e:	e77a      	b.n	20c26 <handle_at_tcp_server+0x126>
	ret = listen(proxy.sock, 1);
   20d30:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_listen(sock, backlog);
   20d32:	4639      	mov	r1, r7
   20d34:	f015 fdba 	bl	368ac <z_impl_zsock_listen>
	if (ret < 0) {
   20d38:	1e04      	subs	r4, r0, #0
   20d3a:	da0d      	bge.n	20d58 <handle_at_tcp_server+0x258>
   20d3c:	4a26      	ldr	r2, [pc, #152]	; (20dd8 <handle_at_tcp_server+0x2d8>)
   20d3e:	4c27      	ldr	r4, [pc, #156]	; (20ddc <handle_at_tcp_server+0x2dc>)
   20d40:	1aa4      	subs	r4, r4, r2
		LOG_ERR("listen() failed: %d", -errno);
   20d42:	f016 f874 	bl	36e2e <__errno>
   20d46:	08e4      	lsrs	r4, r4, #3
   20d48:	6801      	ldr	r1, [r0, #0]
   20d4a:	01a4      	lsls	r4, r4, #6
   20d4c:	f044 0401 	orr.w	r4, r4, #1
   20d50:	4622      	mov	r2, r4
   20d52:	482e      	ldr	r0, [pc, #184]	; (20e0c <handle_at_tcp_server+0x30c>)
   20d54:	4249      	negs	r1, r1
   20d56:	e766      	b.n	20c26 <handle_at_tcp_server+0x126>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20d58:	2200      	movs	r2, #0
   20d5a:	2300      	movs	r3, #0
   20d5c:	2004      	movs	r0, #4
   20d5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   20d62:	230e      	movs	r3, #14
   20d64:	f44f 6264 	mov.w	r2, #3648	; 0xe40
   20d68:	e9cd 3003 	strd	r3, r0, [sp, #12]
   20d6c:	e9cd 6601 	strd	r6, r6, [sp, #4]
   20d70:	4b27      	ldr	r3, [pc, #156]	; (20e10 <handle_at_tcp_server+0x310>)
   20d72:	4928      	ldr	r1, [pc, #160]	; (20e14 <handle_at_tcp_server+0x314>)
   20d74:	9600      	str	r6, [sp, #0]
   20d76:	4828      	ldr	r0, [pc, #160]	; (20e18 <handle_at_tcp_server+0x318>)
   20d78:	f013 f942 	bl	34000 <z_impl_k_thread_create>
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   20d7c:	4b27      	ldr	r3, [pc, #156]	; (20e1c <handle_at_tcp_server+0x31c>)
	sprintf(rsp_buf, "#XTCPSVR: %d started\r\n", proxy.sock);
   20d7e:	4631      	mov	r1, r6
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   20d80:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XTCPSVR: %d started\r\n", proxy.sock);
   20d82:	682b      	ldr	r3, [r5, #0]
   20d84:	f640 228c 	movw	r2, #2700	; 0xa8c
   20d88:	9300      	str	r3, [sp, #0]
   20d8a:	4816      	ldr	r0, [pc, #88]	; (20de4 <handle_at_tcp_server+0x2e4>)
   20d8c:	4b24      	ldr	r3, [pc, #144]	; (20e20 <handle_at_tcp_server+0x320>)
	proxy.role = AT_TCP_ROLE_SERVER;
   20d8e:	60ef      	str	r7, [r5, #12]
	sprintf(rsp_buf, "#XTCPSVR: %d started\r\n", proxy.sock);
   20d90:	f018 f80d 	bl	38dae <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   20d94:	4813      	ldr	r0, [pc, #76]	; (20de4 <handle_at_tcp_server+0x2e4>)
   20d96:	f7fc f96b 	bl	1d070 <strlen>
   20d9a:	4601      	mov	r1, r0
   20d9c:	4811      	ldr	r0, [pc, #68]	; (20de4 <handle_at_tcp_server+0x2e4>)
   20d9e:	f7fd fa23 	bl	1e1e8 <rsp_send>
	return ret;
   20da2:	e71e      	b.n	20be2 <handle_at_tcp_server+0xe2>
		} else if (op == AT_SERVER_STOP) {
   20da4:	2b00      	cmp	r3, #0
   20da6:	f47f af71 	bne.w	20c8c <handle_at_tcp_server+0x18c>
			if (proxy.sock < 0) {
   20daa:	4b0a      	ldr	r3, [pc, #40]	; (20dd4 <handle_at_tcp_server+0x2d4>)
   20dac:	681b      	ldr	r3, [r3, #0]
   20dae:	2b00      	cmp	r3, #0
   20db0:	da0a      	bge.n	20dc8 <handle_at_tcp_server+0x2c8>
   20db2:	4b09      	ldr	r3, [pc, #36]	; (20dd8 <handle_at_tcp_server+0x2d8>)
   20db4:	4909      	ldr	r1, [pc, #36]	; (20ddc <handle_at_tcp_server+0x2dc>)
				LOG_WRN("Server is not running");
   20db6:	481b      	ldr	r0, [pc, #108]	; (20e24 <handle_at_tcp_server+0x324>)
   20db8:	1ac9      	subs	r1, r1, r3
   20dba:	08c9      	lsrs	r1, r1, #3
   20dbc:	0189      	lsls	r1, r1, #6
   20dbe:	f041 0102 	orr.w	r1, r1, #2
   20dc2:	f015 f92d 	bl	36020 <log_0>
				return -EINVAL;
   20dc6:	e775      	b.n	20cb4 <handle_at_tcp_server+0x1b4>
			err = do_tcp_server_stop(0);
   20dc8:	f7ff fc0e 	bl	205e8 <do_tcp_server_stop>
   20dcc:	4604      	mov	r4, r0
   20dce:	e75d      	b.n	20c8c <handle_at_tcp_server+0x18c>
   20dd0:	20023308 	.word	0x20023308
   20dd4:	20023368 	.word	0x20023368
   20dd8:	00039a50 	.word	0x00039a50
   20ddc:	00039b18 	.word	0x00039b18
   20de0:	0003af2d 	.word	0x0003af2d
   20de4:	200287b0 	.word	0x200287b0
   20de8:	0003b272 	.word	0x0003b272
   20dec:	0003b0ee 	.word	0x0003b0ee
   20df0:	200208a0 	.word	0x200208a0
   20df4:	0003ae70 	.word	0x0003ae70
   20df8:	20020bb2 	.word	0x20020bb2
   20dfc:	0003ae97 	.word	0x0003ae97
   20e00:	0003aead 	.word	0x0003aead
   20e04:	0003aec3 	.word	0x0003aec3
   20e08:	0003aee5 	.word	0x0003aee5
   20e0c:	0003adfe 	.word	0x0003adfe
   20e10:	00020871 	.word	0x00020871
   20e14:	2002d060 	.word	0x2002d060
   20e18:	20021268 	.word	0x20021268
   20e1c:	20023384 	.word	0x20023384
   20e20:	0003b281 	.word	0x0003b281
   20e24:	0003b298 	.word	0x0003b298
		if (proxy.sock != INVALID_SOCKET &&
   20e28:	4b1e      	ldr	r3, [pc, #120]	; (20ea4 <handle_at_tcp_server+0x3a4>)
   20e2a:	681a      	ldr	r2, [r3, #0]
   20e2c:	1c51      	adds	r1, r2, #1
   20e2e:	d017      	beq.n	20e60 <handle_at_tcp_server+0x360>
   20e30:	68d9      	ldr	r1, [r3, #12]
   20e32:	2901      	cmp	r1, #1
   20e34:	d114      	bne.n	20e60 <handle_at_tcp_server+0x360>
			sprintf(rsp_buf, "#XTCPSVR: %d, %d, %d\r\n",
   20e36:	7c19      	ldrb	r1, [r3, #16]
   20e38:	481b      	ldr	r0, [pc, #108]	; (20ea8 <handle_at_tcp_server+0x3a8>)
   20e3a:	9102      	str	r1, [sp, #8]
   20e3c:	689b      	ldr	r3, [r3, #8]
   20e3e:	2100      	movs	r1, #0
   20e40:	e9cd 2300 	strd	r2, r3, [sp]
   20e44:	f640 228c 	movw	r2, #2700	; 0xa8c
   20e48:	4b18      	ldr	r3, [pc, #96]	; (20eac <handle_at_tcp_server+0x3ac>)
   20e4a:	f017 ffb0 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20e4e:	4816      	ldr	r0, [pc, #88]	; (20ea8 <handle_at_tcp_server+0x3a8>)
   20e50:	f7fc f90e 	bl	1d070 <strlen>
   20e54:	4601      	mov	r1, r0
   20e56:	4814      	ldr	r0, [pc, #80]	; (20ea8 <handle_at_tcp_server+0x3a8>)
   20e58:	f7fd f9c6 	bl	1e1e8 <rsp_send>
		err = 0;
   20e5c:	2400      	movs	r4, #0
		break;
   20e5e:	e715      	b.n	20c8c <handle_at_tcp_server+0x18c>
			sprintf(rsp_buf, "#XTCPSVR: %d, %d\r\n",
   20e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20e64:	f640 228c 	movw	r2, #2700	; 0xa8c
   20e68:	e9cd 3300 	strd	r3, r3, [sp]
   20e6c:	2100      	movs	r1, #0
   20e6e:	4b10      	ldr	r3, [pc, #64]	; (20eb0 <handle_at_tcp_server+0x3b0>)
   20e70:	480d      	ldr	r0, [pc, #52]	; (20ea8 <handle_at_tcp_server+0x3a8>)
   20e72:	f017 ff9c 	bl	38dae <__sprintf_chk>
   20e76:	e7ea      	b.n	20e4e <handle_at_tcp_server+0x34e>
		sprintf(rsp_buf, "#XTCPSVR: (%d, %d, %d),<port>,<sec_tag>\r\n",
   20e78:	2400      	movs	r4, #0
   20e7a:	2301      	movs	r3, #1
   20e7c:	2202      	movs	r2, #2
   20e7e:	4621      	mov	r1, r4
   20e80:	e9cd 3201 	strd	r3, r2, [sp, #4]
   20e84:	9400      	str	r4, [sp, #0]
   20e86:	f640 228c 	movw	r2, #2700	; 0xa8c
   20e8a:	4b0a      	ldr	r3, [pc, #40]	; (20eb4 <handle_at_tcp_server+0x3b4>)
   20e8c:	4806      	ldr	r0, [pc, #24]	; (20ea8 <handle_at_tcp_server+0x3a8>)
   20e8e:	f017 ff8e 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20e92:	4805      	ldr	r0, [pc, #20]	; (20ea8 <handle_at_tcp_server+0x3a8>)
   20e94:	f7fc f8ec 	bl	1d070 <strlen>
   20e98:	4601      	mov	r1, r0
   20e9a:	4803      	ldr	r0, [pc, #12]	; (20ea8 <handle_at_tcp_server+0x3a8>)
   20e9c:	f7fd f9a4 	bl	1e1e8 <rsp_send>
		break;
   20ea0:	e6f4      	b.n	20c8c <handle_at_tcp_server+0x18c>
   20ea2:	bf00      	nop
   20ea4:	20023368 	.word	0x20023368
   20ea8:	200287b0 	.word	0x200287b0
   20eac:	0003b2ae 	.word	0x0003b2ae
   20eb0:	0003b2c5 	.word	0x0003b2c5
   20eb4:	0003b2d8 	.word	0x0003b2d8

00020eb8 <slm_at_tcp_proxy_uninit>:

/**@brief API to uninitialize TCP proxy AT commands handler
 */
int slm_at_tcp_proxy_uninit(void)
{
	if (proxy.role == AT_TCP_ROLE_CLIENT) {
   20eb8:	4b05      	ldr	r3, [pc, #20]	; (20ed0 <slm_at_tcp_proxy_uninit+0x18>)
   20eba:	68d8      	ldr	r0, [r3, #12]
   20ebc:	b908      	cbnz	r0, 20ec2 <slm_at_tcp_proxy_uninit+0xa>
		return do_tcp_client_disconnect(0);
   20ebe:	f7ff b985 	b.w	201cc <do_tcp_client_disconnect>
	}
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   20ec2:	2801      	cmp	r0, #1
		return do_tcp_server_stop(0);
   20ec4:	f04f 0000 	mov.w	r0, #0
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   20ec8:	d101      	bne.n	20ece <slm_at_tcp_proxy_uninit+0x16>
		return do_tcp_server_stop(0);
   20eca:	f7ff bb8d 	b.w	205e8 <do_tcp_server_stop>
	}

	return 0;
}
   20ece:	4770      	bx	lr
   20ed0:	20023368 	.word	0x20023368

00020ed4 <udp_thread_func>:
}

static void udp_thread_func(void *p1, void *p2, void *p3)
{
	int ret;
	int size = sizeof(struct sockaddr_in);
   20ed4:	2308      	movs	r3, #8
{
   20ed6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20eda:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
   20ede:	4d36      	ldr	r5, [pc, #216]	; (20fb8 <udp_thread_func+0xe4>)
	int size = sizeof(struct sockaddr_in);
   20ee0:	9305      	str	r3, [sp, #20]
   20ee2:	4b36      	ldr	r3, [pc, #216]	; (20fbc <udp_thread_func+0xe8>)
	ARG_UNUSED(p1);
	ARG_UNUSED(p2);
	ARG_UNUSED(p3);

	do {
		ret = recvfrom(udp_sock, data, NET_IPV4_MTU, 0,
   20ee4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 20fd8 <udp_thread_func+0x104>
   20ee8:	1aed      	subs	r5, r5, r3
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   20eea:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 20fdc <udp_thread_func+0x108>
			continue;
		}
		if (ret == 0) {
			continue;
		}
		if (udp_datamode) {
   20eee:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 20fe0 <udp_thread_func+0x10c>
	int size = sizeof(struct sockaddr_in);
   20ef2:	af05      	add	r7, sp, #20
   20ef4:	08ed      	lsrs	r5, r5, #3
		ret = recvfrom(udp_sock, data, NET_IPV4_MTU, 0,
   20ef6:	f8d8 0000 	ldr.w	r0, [r8]
   20efa:	2300      	movs	r3, #0
   20efc:	f44f 7210 	mov.w	r2, #576	; 0x240
   20f00:	e9cd 9700 	strd	r9, r7, [sp]
   20f04:	a906      	add	r1, sp, #24
   20f06:	f015 fd18 	bl	3693a <z_impl_zsock_recvfrom>
		if (ret < 0) {
   20f0a:	1e04      	subs	r4, r0, #0
   20f0c:	da0b      	bge.n	20f26 <udp_thread_func+0x52>
			LOG_WRN("recv() error: %d", -errno);
   20f0e:	f015 ff8e 	bl	36e2e <__errno>
   20f12:	01ac      	lsls	r4, r5, #6
   20f14:	f044 0402 	orr.w	r4, r4, #2
   20f18:	4622      	mov	r2, r4
   20f1a:	6801      	ldr	r1, [r0, #0]
   20f1c:	4828      	ldr	r0, [pc, #160]	; (20fc0 <udp_thread_func+0xec>)
   20f1e:	4249      	negs	r1, r1
					DATATYPE_HEXADECIMAL, ret);
				rsp_send(rsp_buf, strlen(rsp_buf));
				rsp_send(data_hex, ret);
				rsp_send("\r\n", 2);
			} else {
				LOG_WRN("hex convert error: %d", ret);
   20f20:	f015 f88d 	bl	3603e <log_1>
   20f24:	e7e7      	b.n	20ef6 <udp_thread_func+0x22>
		if (ret == 0) {
   20f26:	d0e6      	beq.n	20ef6 <udp_thread_func+0x22>
		if (udp_datamode) {
   20f28:	f89a 6000 	ldrb.w	r6, [sl]
   20f2c:	b126      	cbz	r6, 20f38 <udp_thread_func+0x64>
			rsp_send(data, ret);
   20f2e:	4621      	mov	r1, r4
   20f30:	a806      	add	r0, sp, #24
		} else {
			sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
				DATATYPE_PLAINTEXT, ret);
			rsp_send(rsp_buf, strlen(rsp_buf));
			rsp_send(data, ret);
			rsp_send("\r\n", 2);
   20f32:	f7fd f959 	bl	1e1e8 <rsp_send>
   20f36:	e7de      	b.n	20ef6 <udp_thread_func+0x22>
		} else if (slm_util_hex_check(data, ret)) {
   20f38:	b2a1      	uxth	r1, r4
   20f3a:	a806      	add	r0, sp, #24
   20f3c:	9103      	str	r1, [sp, #12]
   20f3e:	f014 fb1a 	bl	35576 <slm_util_hex_check>
   20f42:	b328      	cbz	r0, 20f90 <udp_thread_func+0xbc>
			ret = slm_util_htoa(data, ret, data_hex,
   20f44:	f44f 6390 	mov.w	r3, #1152	; 0x480
   20f48:	4a1e      	ldr	r2, [pc, #120]	; (20fc4 <udp_thread_func+0xf0>)
   20f4a:	9903      	ldr	r1, [sp, #12]
   20f4c:	a806      	add	r0, sp, #24
   20f4e:	f7fd f81b 	bl	1df88 <slm_util_htoa>
			if (ret > 0) {
   20f52:	1e04      	subs	r4, r0, #0
   20f54:	dd16      	ble.n	20f84 <udp_thread_func+0xb0>
				sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
   20f56:	f640 228c 	movw	r2, #2700	; 0xa8c
   20f5a:	4631      	mov	r1, r6
   20f5c:	4b1a      	ldr	r3, [pc, #104]	; (20fc8 <udp_thread_func+0xf4>)
   20f5e:	e9cd 6400 	strd	r6, r4, [sp]
   20f62:	481a      	ldr	r0, [pc, #104]	; (20fcc <udp_thread_func+0xf8>)
   20f64:	f017 ff23 	bl	38dae <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   20f68:	4818      	ldr	r0, [pc, #96]	; (20fcc <udp_thread_func+0xf8>)
   20f6a:	f7fc f881 	bl	1d070 <strlen>
   20f6e:	4601      	mov	r1, r0
   20f70:	4816      	ldr	r0, [pc, #88]	; (20fcc <udp_thread_func+0xf8>)
   20f72:	f7fd f939 	bl	1e1e8 <rsp_send>
				rsp_send(data_hex, ret);
   20f76:	4621      	mov	r1, r4
   20f78:	4812      	ldr	r0, [pc, #72]	; (20fc4 <udp_thread_func+0xf0>)
			rsp_send(data, ret);
   20f7a:	f7fd f935 	bl	1e1e8 <rsp_send>
			rsp_send("\r\n", 2);
   20f7e:	2102      	movs	r1, #2
   20f80:	4813      	ldr	r0, [pc, #76]	; (20fd0 <udp_thread_func+0xfc>)
   20f82:	e7d6      	b.n	20f32 <udp_thread_func+0x5e>
				LOG_WRN("hex convert error: %d", ret);
   20f84:	01aa      	lsls	r2, r5, #6
   20f86:	4621      	mov	r1, r4
   20f88:	4812      	ldr	r0, [pc, #72]	; (20fd4 <udp_thread_func+0x100>)
   20f8a:	f042 0202 	orr.w	r2, r2, #2
   20f8e:	e7c7      	b.n	20f20 <udp_thread_func+0x4c>
			sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
   20f90:	2301      	movs	r3, #1
   20f92:	4601      	mov	r1, r0
   20f94:	f640 228c 	movw	r2, #2700	; 0xa8c
   20f98:	9300      	str	r3, [sp, #0]
   20f9a:	480c      	ldr	r0, [pc, #48]	; (20fcc <udp_thread_func+0xf8>)
   20f9c:	4b0a      	ldr	r3, [pc, #40]	; (20fc8 <udp_thread_func+0xf4>)
   20f9e:	9401      	str	r4, [sp, #4]
   20fa0:	f017 ff05 	bl	38dae <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   20fa4:	4809      	ldr	r0, [pc, #36]	; (20fcc <udp_thread_func+0xf8>)
   20fa6:	f7fc f863 	bl	1d070 <strlen>
   20faa:	4601      	mov	r1, r0
   20fac:	4807      	ldr	r0, [pc, #28]	; (20fcc <udp_thread_func+0xf8>)
   20fae:	f7fd f91b 	bl	1e1e8 <rsp_send>
			rsp_send(data, ret);
   20fb2:	4621      	mov	r1, r4
   20fb4:	a806      	add	r0, sp, #24
   20fb6:	e7e0      	b.n	20f7a <udp_thread_func+0xa6>
   20fb8:	00039b30 	.word	0x00039b30
   20fbc:	00039a50 	.word	0x00039a50
   20fc0:	0003ad13 	.word	0x0003ad13
   20fc4:	2002b31c 	.word	0x2002b31c
   20fc8:	0003b33a 	.word	0x0003b33a
   20fcc:	200287b0 	.word	0x200287b0
   20fd0:	0003c9a6 	.word	0x0003c9a6
   20fd4:	0003aca3 	.word	0x0003aca3
   20fd8:	20023390 	.word	0x20023390
   20fdc:	20023388 	.word	0x20023388
   20fe0:	2002b79c 	.word	0x2002b79c

00020fe4 <slm_at_udp_proxy_parse>:
}

/**@brief API to handle UDP Proxy AT commands
 */
int slm_at_udp_proxy_parse(const char *at_cmd, uint16_t length)
{
   20fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20fe8:	460e      	mov	r6, r1
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
		if (slm_util_cmd_casecmp(at_cmd,
   20fea:	4931      	ldr	r1, [pc, #196]	; (210b0 <slm_at_udp_proxy_parse+0xcc>)
{
   20fec:	4605      	mov	r5, r0
		if (slm_util_cmd_casecmp(at_cmd,
   20fee:	f7fc ff95 	bl	1df1c <slm_util_cmd_casecmp>
   20ff2:	bb00      	cbnz	r0, 21036 <slm_at_udp_proxy_parse+0x52>
   20ff4:	4628      	mov	r0, r5
   20ff6:	492f      	ldr	r1, [pc, #188]	; (210b4 <slm_at_udp_proxy_parse+0xd0>)
   20ff8:	f7fc ff90 	bl	1df1c <slm_util_cmd_casecmp>
   20ffc:	b9e8      	cbnz	r0, 2103a <slm_at_udp_proxy_parse+0x56>
   20ffe:	4628      	mov	r0, r5
   21000:	492d      	ldr	r1, [pc, #180]	; (210b8 <slm_at_udp_proxy_parse+0xd4>)
   21002:	f7fc ff8b 	bl	1df1c <slm_util_cmd_casecmp>
   21006:	b328      	cbz	r0, 21054 <slm_at_udp_proxy_parse+0x70>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   21008:	2402      	movs	r4, #2
					udp_proxy_at_list[i].string)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
   2100a:	2100      	movs	r1, #0
   2100c:	4628      	mov	r0, r5
   2100e:	4a2b      	ldr	r2, [pc, #172]	; (210bc <slm_at_udp_proxy_parse+0xd8>)
   21010:	f016 feb4 	bl	37d7c <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
   21014:	4601      	mov	r1, r0
   21016:	b190      	cbz	r0, 2103e <slm_at_udp_proxy_parse+0x5a>
   21018:	4b29      	ldr	r3, [pc, #164]	; (210c0 <slm_at_udp_proxy_parse+0xdc>)
   2101a:	4a2a      	ldr	r2, [pc, #168]	; (210c4 <slm_at_udp_proxy_parse+0xe0>)
				LOG_ERR("Failed to parse AT command %d", ret);
   2101c:	482a      	ldr	r0, [pc, #168]	; (210c8 <slm_at_udp_proxy_parse+0xe4>)
   2101e:	1ad2      	subs	r2, r2, r3
   21020:	08d2      	lsrs	r2, r2, #3
   21022:	0192      	lsls	r2, r2, #6
   21024:	f042 0201 	orr.w	r2, r2, #1
   21028:	f015 f809 	bl	3603e <log_1>
				return -EINVAL;
   2102c:	f06f 0015 	mvn.w	r0, #21
	if (ret == -ENOENT && udp_datamode) {
		ret = do_udp_send_datamode(at_cmd, length);
	}

	return ret;
}
   21030:	b003      	add	sp, #12
   21032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   21036:	2400      	movs	r4, #0
   21038:	e7e7      	b.n	2100a <slm_at_udp_proxy_parse+0x26>
   2103a:	2401      	movs	r4, #1
   2103c:	e7e5      	b.n	2100a <slm_at_udp_proxy_parse+0x26>
			type = at_parser_cmd_type_get(at_cmd);
   2103e:	4628      	mov	r0, r5
   21040:	f016 fe9f 	bl	37d82 <at_parser_cmd_type_get>
			ret = udp_proxy_at_list[i].handler(type);
   21044:	220c      	movs	r2, #12
   21046:	4b21      	ldr	r3, [pc, #132]	; (210cc <slm_at_udp_proxy_parse+0xe8>)
   21048:	fb02 3404 	mla	r4, r2, r4, r3
   2104c:	68a3      	ldr	r3, [r4, #8]
   2104e:	4798      	blx	r3
	if (ret == -ENOENT && udp_datamode) {
   21050:	1c83      	adds	r3, r0, #2
   21052:	d1ed      	bne.n	21030 <slm_at_udp_proxy_parse+0x4c>
   21054:	4b1e      	ldr	r3, [pc, #120]	; (210d0 <slm_at_udp_proxy_parse+0xec>)
   21056:	781b      	ldrb	r3, [r3, #0]
   21058:	bb13      	cbnz	r3, 210a0 <slm_at_udp_proxy_parse+0xbc>
   2105a:	f06f 0001 	mvn.w	r0, #1
   2105e:	e7e7      	b.n	21030 <slm_at_udp_proxy_parse+0x4c>
		offset += ret;
   21060:	4404      	add	r4, r0
	while (offset < datalen) {
   21062:	42b4      	cmp	r4, r6
   21064:	d21a      	bcs.n	2109c <slm_at_udp_proxy_parse+0xb8>
		ret = sendto(udp_sock, data + offset, datalen - offset, 0,
   21066:	6838      	ldr	r0, [r7, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   21068:	2300      	movs	r3, #0
   2106a:	e9cd 9800 	strd	r9, r8, [sp]
   2106e:	1b32      	subs	r2, r6, r4
   21070:	1929      	adds	r1, r5, r4
   21072:	f015 fc45 	bl	36900 <z_impl_zsock_sendto>
		if (ret < 0) {
   21076:	2800      	cmp	r0, #0
   21078:	daf2      	bge.n	21060 <slm_at_udp_proxy_parse+0x7c>
   2107a:	4a11      	ldr	r2, [pc, #68]	; (210c0 <slm_at_udp_proxy_parse+0xdc>)
   2107c:	4d11      	ldr	r5, [pc, #68]	; (210c4 <slm_at_udp_proxy_parse+0xe0>)
   2107e:	1aad      	subs	r5, r5, r2
			LOG_ERR("send() failed: %d", -errno);
   21080:	f015 fed5 	bl	36e2e <__errno>
   21084:	08ed      	lsrs	r5, r5, #3
   21086:	6801      	ldr	r1, [r0, #0]
   21088:	01ad      	lsls	r5, r5, #6
   2108a:	f045 0501 	orr.w	r5, r5, #1
   2108e:	462a      	mov	r2, r5
   21090:	4810      	ldr	r0, [pc, #64]	; (210d4 <slm_at_udp_proxy_parse+0xf0>)
   21092:	4249      	negs	r1, r1
   21094:	f014 ffd3 	bl	3603e <log_1>
			ret = -errno;
   21098:	f015 fec9 	bl	36e2e <__errno>
	return offset;
   2109c:	4620      	mov	r0, r4
   2109e:	e7c7      	b.n	21030 <slm_at_udp_proxy_parse+0x4c>
	uint32_t offset = 0;
   210a0:	2400      	movs	r4, #0
   210a2:	f04f 0808 	mov.w	r8, #8
		ret = sendto(udp_sock, data + offset, datalen - offset, 0,
   210a6:	4f0c      	ldr	r7, [pc, #48]	; (210d8 <slm_at_udp_proxy_parse+0xf4>)
   210a8:	f8df 9030 	ldr.w	r9, [pc, #48]	; 210dc <slm_at_udp_proxy_parse+0xf8>
   210ac:	e7d9      	b.n	21062 <slm_at_udp_proxy_parse+0x7e>
   210ae:	bf00      	nop
   210b0:	0003b34e 	.word	0x0003b34e
   210b4:	0003b359 	.word	0x0003b359
   210b8:	0003b364 	.word	0x0003b364
   210bc:	20023308 	.word	0x20023308
   210c0:	00039a50 	.word	0x00039a50
   210c4:	00039b30 	.word	0x00039b30
   210c8:	0003a95b 	.word	0x0003a95b
   210cc:	00039d5c 	.word	0x00039d5c
   210d0:	2002b79c 	.word	0x2002b79c
   210d4:	0003ad57 	.word	0x0003ad57
   210d8:	20023390 	.word	0x20023390
   210dc:	20023388 	.word	0x20023388

000210e0 <slm_at_udp_proxy_clac>:

/**@brief API to list UDP Proxy AT commands
 */
void slm_at_udp_proxy_clac(void)
{
   210e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   210e2:	2400      	movs	r4, #0
   210e4:	4d0c      	ldr	r5, [pc, #48]	; (21118 <slm_at_udp_proxy_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", udp_proxy_at_list[i].string);
   210e6:	4f0d      	ldr	r7, [pc, #52]	; (2111c <slm_at_udp_proxy_clac+0x3c>)
   210e8:	4e0d      	ldr	r6, [pc, #52]	; (21120 <slm_at_udp_proxy_clac+0x40>)
   210ea:	686b      	ldr	r3, [r5, #4]
   210ec:	f640 228c 	movw	r2, #2700	; 0xa8c
   210f0:	2100      	movs	r1, #0
   210f2:	9300      	str	r3, [sp, #0]
   210f4:	4630      	mov	r0, r6
   210f6:	463b      	mov	r3, r7
   210f8:	f017 fe59 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   210fc:	4630      	mov	r0, r6
   210fe:	f7fb ffb7 	bl	1d070 <strlen>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   21102:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
   21104:	4601      	mov	r1, r0
   21106:	4630      	mov	r0, r6
   21108:	f7fd f86e 	bl	1e1e8 <rsp_send>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   2110c:	2c03      	cmp	r4, #3
   2110e:	f105 050c 	add.w	r5, r5, #12
   21112:	d1ea      	bne.n	210ea <slm_at_udp_proxy_clac+0xa>
	}
}
   21114:	b003      	add	sp, #12
   21116:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21118:	00039d5c 	.word	0x00039d5c
   2111c:	0003ab54 	.word	0x0003ab54
   21120:	200287b0 	.word	0x200287b0

00021124 <slm_at_udp_proxy_init>:

/**@brief API to initialize UDP Proxy AT commands handler
 */
int slm_at_udp_proxy_init(void)
{
	udp_sock = INVALID_SOCKET;
   21124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	udp_datamode = false;
   21128:	2000      	movs	r0, #0
	udp_sock = INVALID_SOCKET;
   2112a:	4b04      	ldr	r3, [pc, #16]	; (2113c <slm_at_udp_proxy_init+0x18>)
   2112c:	601a      	str	r2, [r3, #0]
	udp_datamode = false;
   2112e:	4b04      	ldr	r3, [pc, #16]	; (21140 <slm_at_udp_proxy_init+0x1c>)
	remote.sin_family = AF_UNSPEC;
   21130:	4a04      	ldr	r2, [pc, #16]	; (21144 <slm_at_udp_proxy_init+0x20>)
	udp_datamode = false;
   21132:	7018      	strb	r0, [r3, #0]
	remote.sin_family = AF_UNSPEC;
   21134:	4b04      	ldr	r3, [pc, #16]	; (21148 <slm_at_udp_proxy_init+0x24>)
   21136:	601a      	str	r2, [r3, #0]
	remote.sin_port = INVALID_PORT;

	return 0;
}
   21138:	4770      	bx	lr
   2113a:	bf00      	nop
   2113c:	20023390 	.word	0x20023390
   21140:	2002b79c 	.word	0x2002b79c
   21144:	ffff0000 	.word	0xffff0000
   21148:	20023388 	.word	0x20023388

0002114c <do_udp_server_stop.part.0>:
		k_thread_abort(udp_thread_id);
   2114c:	4b1c      	ldr	r3, [pc, #112]	; (211c0 <do_udp_server_stop.part.0+0x74>)
static int do_udp_server_stop(int error)
   2114e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21150:	4605      	mov	r5, r0
		k_thread_abort(udp_thread_id);
   21152:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   21154:	f004 fb5e 	bl	25814 <z_impl_k_thread_abort>
		ret = close(udp_sock);
   21158:	4b1a      	ldr	r3, [pc, #104]	; (211c4 <do_udp_server_stop.part.0+0x78>)
   2115a:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_close(sock);
   2115c:	f015 fb63 	bl	36826 <z_impl_zsock_close>
		if (ret < 0) {
   21160:	1e04      	subs	r4, r0, #0
   21162:	da12      	bge.n	2118a <do_udp_server_stop.part.0+0x3e>
   21164:	4a18      	ldr	r2, [pc, #96]	; (211c8 <do_udp_server_stop.part.0+0x7c>)
   21166:	4c19      	ldr	r4, [pc, #100]	; (211cc <do_udp_server_stop.part.0+0x80>)
   21168:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   2116a:	f015 fe60 	bl	36e2e <__errno>
   2116e:	08e4      	lsrs	r4, r4, #3
   21170:	6801      	ldr	r1, [r0, #0]
   21172:	01a4      	lsls	r4, r4, #6
   21174:	f044 0402 	orr.w	r4, r4, #2
   21178:	4622      	mov	r2, r4
   2117a:	4815      	ldr	r0, [pc, #84]	; (211d0 <do_udp_server_stop.part.0+0x84>)
   2117c:	4249      	negs	r1, r1
   2117e:	f014 ff5e 	bl	3603e <log_1>
			ret = -errno;
   21182:	f015 fe54 	bl	36e2e <__errno>
   21186:	6804      	ldr	r4, [r0, #0]
   21188:	4264      	negs	r4, r4
		(void)slm_at_udp_proxy_init();
   2118a:	f7ff ffcb 	bl	21124 <slm_at_udp_proxy_init>
		if (error) {
   2118e:	b18d      	cbz	r5, 211b4 <do_udp_server_stop.part.0+0x68>
			sprintf(rsp_buf, "#XUDPSVR: %d stopped\r\n", error);
   21190:	f640 228c 	movw	r2, #2700	; 0xa8c
   21194:	2100      	movs	r1, #0
   21196:	4b0f      	ldr	r3, [pc, #60]	; (211d4 <do_udp_server_stop.part.0+0x88>)
   21198:	480f      	ldr	r0, [pc, #60]	; (211d8 <do_udp_server_stop.part.0+0x8c>)
   2119a:	9500      	str	r5, [sp, #0]
   2119c:	f017 fe07 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   211a0:	480d      	ldr	r0, [pc, #52]	; (211d8 <do_udp_server_stop.part.0+0x8c>)
   211a2:	f7fb ff65 	bl	1d070 <strlen>
   211a6:	4601      	mov	r1, r0
   211a8:	480b      	ldr	r0, [pc, #44]	; (211d8 <do_udp_server_stop.part.0+0x8c>)
   211aa:	f7fd f81d 	bl	1e1e8 <rsp_send>
}
   211ae:	4620      	mov	r0, r4
   211b0:	b003      	add	sp, #12
   211b2:	bd30      	pop	{r4, r5, pc}
			sprintf(rsp_buf, "#XUDPSVR: stopped\r\n");
   211b4:	4909      	ldr	r1, [pc, #36]	; (211dc <do_udp_server_stop.part.0+0x90>)
   211b6:	4808      	ldr	r0, [pc, #32]	; (211d8 <do_udp_server_stop.part.0+0x8c>)
   211b8:	f017 fe20 	bl	38dfc <strcpy>
   211bc:	e7f0      	b.n	211a0 <do_udp_server_stop.part.0+0x54>
   211be:	bf00      	nop
   211c0:	20023394 	.word	0x20023394
   211c4:	20023390 	.word	0x20023390
   211c8:	00039a50 	.word	0x00039a50
   211cc:	00039b30 	.word	0x00039b30
   211d0:	0003ac3e 	.word	0x0003ac3e
   211d4:	0003b370 	.word	0x0003b370
   211d8:	200287b0 	.word	0x200287b0
   211dc:	0003b387 	.word	0x0003b387

000211e0 <handle_at_udp_server>:
{
   211e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   211e2:	4606      	mov	r6, r0
   211e4:	b08d      	sub	sp, #52	; 0x34
	int param_count = at_params_valid_count_get(&at_param_list);
   211e6:	48b5      	ldr	r0, [pc, #724]	; (214bc <handle_at_udp_server+0x2dc>)
   211e8:	f016 ff10 	bl	3800c <at_params_valid_count_get>
	switch (cmd_type) {
   211ec:	2e02      	cmp	r6, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   211ee:	4605      	mov	r5, r0
	switch (cmd_type) {
   211f0:	f000 812e 	beq.w	21450 <handle_at_udp_server+0x270>
   211f4:	2e03      	cmp	r6, #3
   211f6:	f000 814c 	beq.w	21492 <handle_at_udp_server+0x2b2>
   211fa:	2e01      	cmp	r6, #1
   211fc:	f040 8096 	bne.w	2132c <handle_at_udp_server+0x14c>
		if (param_count < 2) {
   21200:	2801      	cmp	r0, #1
   21202:	f340 8093 	ble.w	2132c <handle_at_udp_server+0x14c>
		err = at_params_short_get(&at_param_list, 1, &op);
   21206:	4631      	mov	r1, r6
   21208:	48ac      	ldr	r0, [pc, #688]	; (214bc <handle_at_udp_server+0x2dc>)
   2120a:	aa09      	add	r2, sp, #36	; 0x24
   2120c:	f016 feb6 	bl	37f7c <at_params_short_get>
		if (err) {
   21210:	4604      	mov	r4, r0
   21212:	2800      	cmp	r0, #0
   21214:	d176      	bne.n	21304 <handle_at_udp_server+0x124>
		if (op == AT_SERVER_START ||
   21216:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2121a:	1e5a      	subs	r2, r3, #1
   2121c:	2a01      	cmp	r2, #1
   2121e:	f200 8101 	bhi.w	21424 <handle_at_udp_server+0x244>
			if (param_count < 3) {
   21222:	2d02      	cmp	r5, #2
   21224:	f000 8082 	beq.w	2132c <handle_at_udp_server+0x14c>
			err = at_params_short_get(&at_param_list, 2, &port);
   21228:	2102      	movs	r1, #2
   2122a:	48a4      	ldr	r0, [pc, #656]	; (214bc <handle_at_udp_server+0x2dc>)
   2122c:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   21230:	f016 fea4 	bl	37f7c <at_params_short_get>
			if (err) {
   21234:	4604      	mov	r4, r0
   21236:	2800      	cmp	r0, #0
   21238:	d164      	bne.n	21304 <handle_at_udp_server+0x124>
			if (udp_sock > 0) {
   2123a:	4da1      	ldr	r5, [pc, #644]	; (214c0 <handle_at_udp_server+0x2e0>)
   2123c:	682b      	ldr	r3, [r5, #0]
   2123e:	2b00      	cmp	r3, #0
   21240:	dd0a      	ble.n	21258 <handle_at_udp_server+0x78>
   21242:	49a0      	ldr	r1, [pc, #640]	; (214c4 <handle_at_udp_server+0x2e4>)
   21244:	4ba0      	ldr	r3, [pc, #640]	; (214c8 <handle_at_udp_server+0x2e8>)
				LOG_WRN("Server is running");
   21246:	48a1      	ldr	r0, [pc, #644]	; (214cc <handle_at_udp_server+0x2ec>)
   21248:	1ac9      	subs	r1, r1, r3
   2124a:	08c9      	lsrs	r1, r1, #3
   2124c:	0189      	lsls	r1, r1, #6
   2124e:	f041 0102 	orr.w	r1, r1, #2
				LOG_WRN("Server is not running");
   21252:	f014 fee5 	bl	36020 <log_0>
				return -EINVAL;
   21256:	e069      	b.n	2132c <handle_at_udp_server+0x14c>
			err = do_udp_server_start(port);
   21258:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26
	return z_impl_zsock_socket(family, type, proto);
   2125c:	2211      	movs	r2, #17
   2125e:	2102      	movs	r1, #2
   21260:	4630      	mov	r0, r6
   21262:	f002 ff89 	bl	24178 <z_impl_zsock_socket>
	if (udp_sock < 0) {
   21266:	2800      	cmp	r0, #0
	udp_sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   21268:	6028      	str	r0, [r5, #0]
	if (udp_sock < 0) {
   2126a:	da30      	bge.n	212ce <handle_at_udp_server+0xee>
   2126c:	4a96      	ldr	r2, [pc, #600]	; (214c8 <handle_at_udp_server+0x2e8>)
   2126e:	4d95      	ldr	r5, [pc, #596]	; (214c4 <handle_at_udp_server+0x2e4>)
   21270:	1aad      	subs	r5, r5, r2
		LOG_ERR("socket() failed: %d", -errno);
   21272:	f015 fddc 	bl	36e2e <__errno>
   21276:	08ed      	lsrs	r5, r5, #3
   21278:	6801      	ldr	r1, [r0, #0]
   2127a:	01ad      	lsls	r5, r5, #6
   2127c:	f045 0501 	orr.w	r5, r5, #1
   21280:	462a      	mov	r2, r5
   21282:	4249      	negs	r1, r1
   21284:	4892      	ldr	r0, [pc, #584]	; (214d0 <handle_at_udp_server+0x2f0>)
   21286:	f014 feda 	bl	3603e <log_1>
		sprintf(rsp_buf, "#XUDPSVR: %d\r\n", -errno);
   2128a:	f015 fdd0 	bl	36e2e <__errno>
   2128e:	6803      	ldr	r3, [r0, #0]
   21290:	2100      	movs	r1, #0
   21292:	425b      	negs	r3, r3
   21294:	f640 228c 	movw	r2, #2700	; 0xa8c
   21298:	9300      	str	r3, [sp, #0]
   2129a:	488e      	ldr	r0, [pc, #568]	; (214d4 <handle_at_udp_server+0x2f4>)
   2129c:	4b8e      	ldr	r3, [pc, #568]	; (214d8 <handle_at_udp_server+0x2f8>)
   2129e:	f017 fd86 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   212a2:	488c      	ldr	r0, [pc, #560]	; (214d4 <handle_at_udp_server+0x2f4>)
   212a4:	f7fb fee4 	bl	1d070 <strlen>
   212a8:	4601      	mov	r1, r0
   212aa:	488a      	ldr	r0, [pc, #552]	; (214d4 <handle_at_udp_server+0x2f4>)
   212ac:	f7fc ff9c 	bl	1e1e8 <rsp_send>
		return -errno;
   212b0:	f015 fdbd 	bl	36e2e <__errno>
   212b4:	6803      	ldr	r3, [r0, #0]
   212b6:	425b      	negs	r3, r3
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   212b8:	2b00      	cmp	r3, #0
   212ba:	f040 80b1 	bne.w	21420 <handle_at_udp_server+0x240>
   212be:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   212c2:	2b02      	cmp	r3, #2
   212c4:	d11e      	bne.n	21304 <handle_at_udp_server+0x124>
				udp_datamode = true;
   212c6:	2201      	movs	r2, #1
   212c8:	4b84      	ldr	r3, [pc, #528]	; (214dc <handle_at_udp_server+0x2fc>)
   212ca:	701a      	strb	r2, [r3, #0]
   212cc:	e01a      	b.n	21304 <handle_at_udp_server+0x124>
	local.sin_family = AF_INET;
   212ce:	2601      	movs	r6, #1
	local.sin_port = htons(port);
   212d0:	023b      	lsls	r3, r7, #8
   212d2:	ea43 2317 	orr.w	r3, r3, r7, lsr #8
	ret = modem_info_params_get(&modem_param);
   212d6:	4882      	ldr	r0, [pc, #520]	; (214e0 <handle_at_udp_server+0x300>)
	local.sin_family = AF_INET;
   212d8:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
	local.sin_port = htons(port);
   212dc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	ret = modem_info_params_get(&modem_param);
   212e0:	f007 fce2 	bl	28ca8 <modem_info_params_get>
	if (ret) {
   212e4:	4607      	mov	r7, r0
   212e6:	b180      	cbz	r0, 2130a <handle_at_udp_server+0x12a>
   212e8:	4b77      	ldr	r3, [pc, #476]	; (214c8 <handle_at_udp_server+0x2e8>)
   212ea:	4a76      	ldr	r2, [pc, #472]	; (214c4 <handle_at_udp_server+0x2e4>)
		LOG_ERR("Unable to obtain modem parameters (%d)", ret);
   212ec:	4601      	mov	r1, r0
   212ee:	1ad2      	subs	r2, r2, r3
   212f0:	08d2      	lsrs	r2, r2, #3
   212f2:	0192      	lsls	r2, r2, #6
   212f4:	487b      	ldr	r0, [pc, #492]	; (214e4 <handle_at_udp_server+0x304>)
   212f6:	4332      	orrs	r2, r6
   212f8:	f014 fea1 	bl	3603e <log_1>
		close(udp_sock);
   212fc:	6828      	ldr	r0, [r5, #0]
   212fe:	f014 f9a7 	bl	35650 <close>
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   21302:	463c      	mov	r4, r7
}
   21304:	4620      	mov	r0, r4
   21306:	b00d      	add	sp, #52	; 0x34
   21308:	bdf0      	pop	{r4, r5, r6, r7, pc}
	addr_len = strlen(modem_param.network.ip_address.value_string);
   2130a:	4877      	ldr	r0, [pc, #476]	; (214e8 <handle_at_udp_server+0x308>)
   2130c:	f7fb feb0 	bl	1d070 <strlen>
	if (addr_len == 0) {
   21310:	b978      	cbnz	r0, 21332 <handle_at_udp_server+0x152>
   21312:	496c      	ldr	r1, [pc, #432]	; (214c4 <handle_at_udp_server+0x2e4>)
   21314:	4b6c      	ldr	r3, [pc, #432]	; (214c8 <handle_at_udp_server+0x2e8>)
		LOG_ERR("LTE not connected yet");
   21316:	4875      	ldr	r0, [pc, #468]	; (214ec <handle_at_udp_server+0x30c>)
   21318:	1ac9      	subs	r1, r1, r3
   2131a:	08c9      	lsrs	r1, r1, #3
   2131c:	0189      	lsls	r1, r1, #6
   2131e:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid local address");
   21322:	f014 fe7d 	bl	36020 <log_0>
		close(udp_sock);
   21326:	6828      	ldr	r0, [r5, #0]
   21328:	f014 f992 	bl	35650 <close>
			return -EINVAL;
   2132c:	f06f 0415 	mvn.w	r4, #21
   21330:	e7e8      	b.n	21304 <handle_at_udp_server+0x124>
	if (!check_for_ipv4(modem_param.network.ip_address.value_string,
   21332:	b2c1      	uxtb	r1, r0
   21334:	486c      	ldr	r0, [pc, #432]	; (214e8 <handle_at_udp_server+0x308>)
   21336:	f014 f955 	bl	355e4 <check_for_ipv4>
   2133a:	b940      	cbnz	r0, 2134e <handle_at_udp_server+0x16e>
   2133c:	4961      	ldr	r1, [pc, #388]	; (214c4 <handle_at_udp_server+0x2e4>)
   2133e:	4b62      	ldr	r3, [pc, #392]	; (214c8 <handle_at_udp_server+0x2e8>)
		LOG_ERR("Invalid local address");
   21340:	486b      	ldr	r0, [pc, #428]	; (214f0 <handle_at_udp_server+0x310>)
   21342:	1ac9      	subs	r1, r1, r3
   21344:	08c9      	lsrs	r1, r1, #3
   21346:	0189      	lsls	r1, r1, #6
   21348:	f041 0101 	orr.w	r1, r1, #1
   2134c:	e7e9      	b.n	21322 <handle_at_udp_server+0x142>
	return z_impl_zsock_inet_pton(family, src, dst);
   2134e:	4966      	ldr	r1, [pc, #408]	; (214e8 <handle_at_udp_server+0x308>)
   21350:	4630      	mov	r0, r6
   21352:	aa0b      	add	r2, sp, #44	; 0x2c
   21354:	f015 fb0e 	bl	36974 <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, modem_param.network.ip_address.value_string,
   21358:	2801      	cmp	r0, #1
   2135a:	d00f      	beq.n	2137c <handle_at_udp_server+0x19c>
   2135c:	4a5a      	ldr	r2, [pc, #360]	; (214c8 <handle_at_udp_server+0x2e8>)
   2135e:	4c59      	ldr	r4, [pc, #356]	; (214c4 <handle_at_udp_server+0x2e4>)
   21360:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Parse local IP address failed: %d", -errno);
   21362:	f015 fd64 	bl	36e2e <__errno>
   21366:	08e4      	lsrs	r4, r4, #3
   21368:	6801      	ldr	r1, [r0, #0]
   2136a:	01a4      	lsls	r4, r4, #6
   2136c:	f044 0401 	orr.w	r4, r4, #1
   21370:	4622      	mov	r2, r4
   21372:	4860      	ldr	r0, [pc, #384]	; (214f4 <handle_at_udp_server+0x314>)
   21374:	4249      	negs	r1, r1
   21376:	f014 fe62 	bl	3603e <log_1>
		close(udp_sock);
   2137a:	e7d4      	b.n	21326 <handle_at_udp_server+0x146>
	ret = bind(udp_sock, (struct sockaddr *)&local,
   2137c:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_bind(sock, addr, addrlen);
   2137e:	2208      	movs	r2, #8
   21380:	a90a      	add	r1, sp, #40	; 0x28
   21382:	f015 fa67 	bl	36854 <z_impl_zsock_bind>
	if (ret) {
   21386:	4606      	mov	r6, r0
   21388:	b328      	cbz	r0, 213d6 <handle_at_udp_server+0x1f6>
   2138a:	4a4f      	ldr	r2, [pc, #316]	; (214c8 <handle_at_udp_server+0x2e8>)
   2138c:	4e4d      	ldr	r6, [pc, #308]	; (214c4 <handle_at_udp_server+0x2e4>)
   2138e:	1ab6      	subs	r6, r6, r2
		LOG_ERR("bind() failed: %d", -errno);
   21390:	f015 fd4d 	bl	36e2e <__errno>
   21394:	08f6      	lsrs	r6, r6, #3
   21396:	6801      	ldr	r1, [r0, #0]
   21398:	01b6      	lsls	r6, r6, #6
   2139a:	f046 0601 	orr.w	r6, r6, #1
   2139e:	4632      	mov	r2, r6
   213a0:	4249      	negs	r1, r1
   213a2:	4855      	ldr	r0, [pc, #340]	; (214f8 <handle_at_udp_server+0x318>)
   213a4:	f014 fe4b 	bl	3603e <log_1>
		sprintf(rsp_buf, "#XUDPSVR: %d\r\n", -errno);
   213a8:	f015 fd41 	bl	36e2e <__errno>
   213ac:	6803      	ldr	r3, [r0, #0]
   213ae:	f640 228c 	movw	r2, #2700	; 0xa8c
   213b2:	425b      	negs	r3, r3
   213b4:	4639      	mov	r1, r7
   213b6:	9300      	str	r3, [sp, #0]
   213b8:	4846      	ldr	r0, [pc, #280]	; (214d4 <handle_at_udp_server+0x2f4>)
   213ba:	4b47      	ldr	r3, [pc, #284]	; (214d8 <handle_at_udp_server+0x2f8>)
   213bc:	f017 fcf7 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   213c0:	4844      	ldr	r0, [pc, #272]	; (214d4 <handle_at_udp_server+0x2f4>)
   213c2:	f7fb fe55 	bl	1d070 <strlen>
   213c6:	4601      	mov	r1, r0
   213c8:	4842      	ldr	r0, [pc, #264]	; (214d4 <handle_at_udp_server+0x2f4>)
   213ca:	f7fc ff0d 	bl	1e1e8 <rsp_send>
		close(udp_sock);
   213ce:	6828      	ldr	r0, [r5, #0]
   213d0:	f014 f93e 	bl	35650 <close>
   213d4:	e76c      	b.n	212b0 <handle_at_udp_server+0xd0>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   213d6:	2200      	movs	r2, #0
   213d8:	2300      	movs	r3, #0
   213da:	2004      	movs	r0, #4
   213dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   213e0:	230e      	movs	r3, #14
   213e2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
   213e6:	e9cd 3003 	strd	r3, r0, [sp, #12]
   213ea:	e9cd 6601 	strd	r6, r6, [sp, #4]
   213ee:	4b43      	ldr	r3, [pc, #268]	; (214fc <handle_at_udp_server+0x31c>)
   213f0:	4943      	ldr	r1, [pc, #268]	; (21500 <handle_at_udp_server+0x320>)
   213f2:	9600      	str	r6, [sp, #0]
   213f4:	4843      	ldr	r0, [pc, #268]	; (21504 <handle_at_udp_server+0x324>)
   213f6:	f012 fe03 	bl	34000 <z_impl_k_thread_create>
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   213fa:	4b43      	ldr	r3, [pc, #268]	; (21508 <handle_at_udp_server+0x328>)
	sprintf(rsp_buf, "#XUDPSVR: %d started\r\n", udp_sock);
   213fc:	4631      	mov	r1, r6
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   213fe:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XUDPSVR: %d started\r\n", udp_sock);
   21400:	682b      	ldr	r3, [r5, #0]
   21402:	f640 228c 	movw	r2, #2700	; 0xa8c
   21406:	9300      	str	r3, [sp, #0]
   21408:	4832      	ldr	r0, [pc, #200]	; (214d4 <handle_at_udp_server+0x2f4>)
   2140a:	4b40      	ldr	r3, [pc, #256]	; (2150c <handle_at_udp_server+0x32c>)
   2140c:	f017 fccf 	bl	38dae <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   21410:	4830      	ldr	r0, [pc, #192]	; (214d4 <handle_at_udp_server+0x2f4>)
   21412:	f7fb fe2d 	bl	1d070 <strlen>
   21416:	4601      	mov	r1, r0
   21418:	482e      	ldr	r0, [pc, #184]	; (214d4 <handle_at_udp_server+0x2f4>)
   2141a:	f7fc fee5 	bl	1e1e8 <rsp_send>
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   2141e:	e74e      	b.n	212be <handle_at_udp_server+0xde>
   21420:	461c      	mov	r4, r3
   21422:	e76f      	b.n	21304 <handle_at_udp_server+0x124>
		} else if (op == AT_SERVER_STOP) {
   21424:	2b00      	cmp	r3, #0
   21426:	f47f af6d 	bne.w	21304 <handle_at_udp_server+0x124>
			if (udp_sock < 0) {
   2142a:	4b25      	ldr	r3, [pc, #148]	; (214c0 <handle_at_udp_server+0x2e0>)
   2142c:	681c      	ldr	r4, [r3, #0]
   2142e:	2c00      	cmp	r4, #0
   21430:	da08      	bge.n	21444 <handle_at_udp_server+0x264>
   21432:	4924      	ldr	r1, [pc, #144]	; (214c4 <handle_at_udp_server+0x2e4>)
   21434:	4b24      	ldr	r3, [pc, #144]	; (214c8 <handle_at_udp_server+0x2e8>)
				LOG_WRN("Server is not running");
   21436:	4836      	ldr	r0, [pc, #216]	; (21510 <handle_at_udp_server+0x330>)
   21438:	1ac9      	subs	r1, r1, r3
   2143a:	08c9      	lsrs	r1, r1, #3
   2143c:	0189      	lsls	r1, r1, #6
   2143e:	f041 0102 	orr.w	r1, r1, #2
   21442:	e706      	b.n	21252 <handle_at_udp_server+0x72>
	if (udp_sock > 0) {
   21444:	f43f af5e 	beq.w	21304 <handle_at_udp_server+0x124>
   21448:	f7ff fe80 	bl	2114c <do_udp_server_stop.part.0>
   2144c:	4604      	mov	r4, r0
   2144e:	e759      	b.n	21304 <handle_at_udp_server+0x124>
		if (udp_sock != INVALID_SOCKET) {
   21450:	4b1b      	ldr	r3, [pc, #108]	; (214c0 <handle_at_udp_server+0x2e0>)
   21452:	681b      	ldr	r3, [r3, #0]
   21454:	1c59      	adds	r1, r3, #1
   21456:	d013      	beq.n	21480 <handle_at_udp_server+0x2a0>
			sprintf(rsp_buf, "#XUDPSVR: %d, %d\r\n",
   21458:	4a20      	ldr	r2, [pc, #128]	; (214dc <handle_at_udp_server+0x2fc>)
   2145a:	2100      	movs	r1, #0
   2145c:	7812      	ldrb	r2, [r2, #0]
   2145e:	481d      	ldr	r0, [pc, #116]	; (214d4 <handle_at_udp_server+0x2f4>)
   21460:	e9cd 3200 	strd	r3, r2, [sp]
   21464:	f640 228c 	movw	r2, #2700	; 0xa8c
   21468:	4b2a      	ldr	r3, [pc, #168]	; (21514 <handle_at_udp_server+0x334>)
   2146a:	f017 fca0 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   2146e:	4819      	ldr	r0, [pc, #100]	; (214d4 <handle_at_udp_server+0x2f4>)
   21470:	f7fb fdfe 	bl	1d070 <strlen>
   21474:	4601      	mov	r1, r0
   21476:	4817      	ldr	r0, [pc, #92]	; (214d4 <handle_at_udp_server+0x2f4>)
   21478:	f7fc feb6 	bl	1e1e8 <rsp_send>
		err = 0;
   2147c:	2400      	movs	r4, #0
		break;
   2147e:	e741      	b.n	21304 <handle_at_udp_server+0x124>
			sprintf(rsp_buf, "#XUDPSVR: %d\r\n",
   21480:	9300      	str	r3, [sp, #0]
   21482:	f640 228c 	movw	r2, #2700	; 0xa8c
   21486:	2100      	movs	r1, #0
   21488:	4b13      	ldr	r3, [pc, #76]	; (214d8 <handle_at_udp_server+0x2f8>)
   2148a:	4812      	ldr	r0, [pc, #72]	; (214d4 <handle_at_udp_server+0x2f4>)
   2148c:	f017 fc8f 	bl	38dae <__sprintf_chk>
   21490:	e7ed      	b.n	2146e <handle_at_udp_server+0x28e>
		sprintf(rsp_buf, "#XUDPSVR: (%d, %d, %d),<port>,<sec_tag>\r\n",
   21492:	2400      	movs	r4, #0
   21494:	2301      	movs	r3, #1
   21496:	2202      	movs	r2, #2
   21498:	4621      	mov	r1, r4
   2149a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2149e:	9400      	str	r4, [sp, #0]
   214a0:	f640 228c 	movw	r2, #2700	; 0xa8c
   214a4:	4b1c      	ldr	r3, [pc, #112]	; (21518 <handle_at_udp_server+0x338>)
   214a6:	480b      	ldr	r0, [pc, #44]	; (214d4 <handle_at_udp_server+0x2f4>)
   214a8:	f017 fc81 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   214ac:	4809      	ldr	r0, [pc, #36]	; (214d4 <handle_at_udp_server+0x2f4>)
   214ae:	f7fb fddf 	bl	1d070 <strlen>
   214b2:	4601      	mov	r1, r0
   214b4:	4807      	ldr	r0, [pc, #28]	; (214d4 <handle_at_udp_server+0x2f4>)
   214b6:	f7fc fe97 	bl	1e1e8 <rsp_send>
		break;
   214ba:	e723      	b.n	21304 <handle_at_udp_server+0x124>
   214bc:	20023308 	.word	0x20023308
   214c0:	20023390 	.word	0x20023390
   214c4:	00039b30 	.word	0x00039b30
   214c8:	00039a50 	.word	0x00039a50
   214cc:	0003b39b 	.word	0x0003b39b
   214d0:	0003af2d 	.word	0x0003af2d
   214d4:	200287b0 	.word	0x200287b0
   214d8:	0003b3ad 	.word	0x0003b3ad
   214dc:	2002b79c 	.word	0x2002b79c
   214e0:	200208a0 	.word	0x200208a0
   214e4:	0003ae70 	.word	0x0003ae70
   214e8:	20020bb2 	.word	0x20020bb2
   214ec:	0003ae97 	.word	0x0003ae97
   214f0:	0003aead 	.word	0x0003aead
   214f4:	0003aec3 	.word	0x0003aec3
   214f8:	0003aee5 	.word	0x0003aee5
   214fc:	00020ed5 	.word	0x00020ed5
   21500:	2002dea0 	.word	0x2002dea0
   21504:	20021330 	.word	0x20021330
   21508:	20023394 	.word	0x20023394
   2150c:	0003b3bc 	.word	0x0003b3bc
   21510:	0003b298 	.word	0x0003b298
   21514:	0003b3d3 	.word	0x0003b3d3
   21518:	0003b3e6 	.word	0x0003b3e6

0002151c <do_udp_send>:
{
   2151c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (udp_sock == INVALID_SOCKET) {
   21520:	4e3a      	ldr	r6, [pc, #232]	; (2160c <do_udp_send+0xf0>)
{
   21522:	4680      	mov	r8, r0
	if (udp_sock == INVALID_SOCKET) {
   21524:	6833      	ldr	r3, [r6, #0]
{
   21526:	460f      	mov	r7, r1
	if (udp_sock == INVALID_SOCKET) {
   21528:	3301      	adds	r3, #1
   2152a:	d168      	bne.n	215fe <do_udp_send+0xe2>
   2152c:	4b38      	ldr	r3, [pc, #224]	; (21610 <do_udp_send+0xf4>)
   2152e:	4939      	ldr	r1, [pc, #228]	; (21614 <do_udp_send+0xf8>)
		LOG_ERR("Not connected yet");
   21530:	4839      	ldr	r0, [pc, #228]	; (21618 <do_udp_send+0xfc>)
   21532:	1ac9      	subs	r1, r1, r3
   21534:	08c9      	lsrs	r1, r1, #3
   21536:	0189      	lsls	r1, r1, #6
   21538:	f041 0101 	orr.w	r1, r1, #1
   2153c:	f014 fd70 	bl	36020 <log_0>
		return -EINVAL;
   21540:	f06f 0015 	mvn.w	r0, #21
}
   21544:	b002      	add	sp, #8
   21546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sprintf(rsp_buf, "#XUDPSEND: %d\r\n", -errno);
   2154a:	f015 fc70 	bl	36e2e <__errno>
   2154e:	6803      	ldr	r3, [r0, #0]
   21550:	f640 228c 	movw	r2, #2700	; 0xa8c
   21554:	425b      	negs	r3, r3
   21556:	2100      	movs	r1, #0
   21558:	9300      	str	r3, [sp, #0]
   2155a:	4830      	ldr	r0, [pc, #192]	; (2161c <do_udp_send+0x100>)
   2155c:	4b30      	ldr	r3, [pc, #192]	; (21620 <do_udp_send+0x104>)
   2155e:	f017 fc26 	bl	38dae <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   21562:	482e      	ldr	r0, [pc, #184]	; (2161c <do_udp_send+0x100>)
   21564:	f7fb fd84 	bl	1d070 <strlen>
   21568:	4601      	mov	r1, r0
   2156a:	482c      	ldr	r0, [pc, #176]	; (2161c <do_udp_send+0x100>)
   2156c:	f7fc fe3c 	bl	1e1e8 <rsp_send>
   21570:	e02f      	b.n	215d2 <do_udp_send+0xb6>
		offset += ret;
   21572:	4425      	add	r5, r4
	while (offset < datalen) {
   21574:	42bd      	cmp	r5, r7
   21576:	d230      	bcs.n	215da <do_udp_send+0xbe>
		ret = sendto(udp_sock, data + offset, datalen - offset, 0,
   21578:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2157a:	2300      	movs	r3, #0
   2157c:	e9cd a900 	strd	sl, r9, [sp]
   21580:	1b7a      	subs	r2, r7, r5
   21582:	eb08 0105 	add.w	r1, r8, r5
   21586:	f015 f9bb 	bl	36900 <z_impl_zsock_sendto>
		if (ret < 0) {
   2158a:	1e04      	subs	r4, r0, #0
   2158c:	daf1      	bge.n	21572 <do_udp_send+0x56>
   2158e:	4a20      	ldr	r2, [pc, #128]	; (21610 <do_udp_send+0xf4>)
   21590:	4c20      	ldr	r4, [pc, #128]	; (21614 <do_udp_send+0xf8>)
   21592:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send() failed: %d", -errno);
   21594:	f015 fc4b 	bl	36e2e <__errno>
   21598:	08e4      	lsrs	r4, r4, #3
   2159a:	6801      	ldr	r1, [r0, #0]
   2159c:	01a4      	lsls	r4, r4, #6
   2159e:	f044 0401 	orr.w	r4, r4, #1
   215a2:	4622      	mov	r2, r4
   215a4:	481f      	ldr	r0, [pc, #124]	; (21624 <do_udp_send+0x108>)
   215a6:	4249      	negs	r1, r1
   215a8:	f014 fd49 	bl	3603e <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   215ac:	f015 fc3f 	bl	36e2e <__errno>
   215b0:	6803      	ldr	r3, [r0, #0]
   215b2:	2b0b      	cmp	r3, #11
   215b4:	d0c9      	beq.n	2154a <do_udp_send+0x2e>
   215b6:	f015 fc3a 	bl	36e2e <__errno>
   215ba:	6803      	ldr	r3, [r0, #0]
   215bc:	2b74      	cmp	r3, #116	; 0x74
   215be:	d0c4      	beq.n	2154a <do_udp_send+0x2e>
				do_udp_server_stop(-errno);
   215c0:	f015 fc35 	bl	36e2e <__errno>
	if (udp_sock > 0) {
   215c4:	6833      	ldr	r3, [r6, #0]
   215c6:	2b00      	cmp	r3, #0
   215c8:	dd03      	ble.n	215d2 <do_udp_send+0xb6>
				do_udp_server_stop(-errno);
   215ca:	6800      	ldr	r0, [r0, #0]
   215cc:	4240      	negs	r0, r0
   215ce:	f7ff fdbd 	bl	2114c <do_udp_server_stop.part.0>
			ret = -errno;
   215d2:	f015 fc2c 	bl	36e2e <__errno>
   215d6:	6804      	ldr	r4, [r0, #0]
   215d8:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XUDPSEND: %d\r\n", offset);
   215da:	f640 228c 	movw	r2, #2700	; 0xa8c
   215de:	2100      	movs	r1, #0
   215e0:	4b0f      	ldr	r3, [pc, #60]	; (21620 <do_udp_send+0x104>)
   215e2:	480e      	ldr	r0, [pc, #56]	; (2161c <do_udp_send+0x100>)
   215e4:	9500      	str	r5, [sp, #0]
   215e6:	f017 fbe2 	bl	38dae <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   215ea:	480c      	ldr	r0, [pc, #48]	; (2161c <do_udp_send+0x100>)
   215ec:	f7fb fd40 	bl	1d070 <strlen>
   215f0:	4601      	mov	r1, r0
   215f2:	480a      	ldr	r0, [pc, #40]	; (2161c <do_udp_send+0x100>)
   215f4:	f7fc fdf8 	bl	1e1e8 <rsp_send>
	if (ret >= 0) {
   215f8:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   215fc:	e7a2      	b.n	21544 <do_udp_send+0x28>
	uint32_t offset = 0;
   215fe:	2500      	movs	r5, #0
   21600:	f04f 0908 	mov.w	r9, #8
	int ret = 0;
   21604:	462c      	mov	r4, r5
   21606:	f8df a020 	ldr.w	sl, [pc, #32]	; 21628 <do_udp_send+0x10c>
   2160a:	e7b3      	b.n	21574 <do_udp_send+0x58>
   2160c:	20023390 	.word	0x20023390
   21610:	00039a50 	.word	0x00039a50
   21614:	00039b30 	.word	0x00039b30
   21618:	0003ad45 	.word	0x0003ad45
   2161c:	200287b0 	.word	0x200287b0
   21620:	0003b410 	.word	0x0003b410
   21624:	0003ad57 	.word	0x0003ad57
   21628:	20023388 	.word	0x20023388

0002162c <handle_at_udp_send>:
{
   2162c:	b590      	push	{r4, r7, lr}
	int size = NET_IPV4_MTU;
   2162e:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   21632:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   21636:	af00      	add	r7, sp, #0
	int size = NET_IPV4_MTU;
   21638:	607b      	str	r3, [r7, #4]
	if (remote.sin_family == AF_UNSPEC || remote.sin_port == INVALID_PORT) {
   2163a:	4b20      	ldr	r3, [pc, #128]	; (216bc <handle_at_udp_send+0x90>)
{
   2163c:	4604      	mov	r4, r0
	if (remote.sin_family == AF_UNSPEC || remote.sin_port == INVALID_PORT) {
   2163e:	881b      	ldrh	r3, [r3, #0]
   21640:	b92b      	cbnz	r3, 2164e <handle_at_udp_send+0x22>
		return err;
   21642:	f06f 0015 	mvn.w	r0, #21
}
   21646:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   2164a:	46bd      	mov	sp, r7
   2164c:	bd90      	pop	{r4, r7, pc}
	switch (cmd_type) {
   2164e:	2801      	cmp	r0, #1
   21650:	d1f7      	bne.n	21642 <handle_at_udp_send+0x16>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   21652:	481b      	ldr	r0, [pc, #108]	; (216c0 <handle_at_udp_send+0x94>)
   21654:	f016 fcda 	bl	3800c <at_params_valid_count_get>
   21658:	2802      	cmp	r0, #2
   2165a:	d9f2      	bls.n	21642 <handle_at_udp_send+0x16>
		err = at_params_short_get(&at_param_list, 1, &datatype);
   2165c:	4621      	mov	r1, r4
   2165e:	4818      	ldr	r0, [pc, #96]	; (216c0 <handle_at_udp_send+0x94>)
   21660:	1cba      	adds	r2, r7, #2
   21662:	f016 fc8b 	bl	37f7c <at_params_short_get>
		if (err) {
   21666:	2800      	cmp	r0, #0
   21668:	d1ed      	bne.n	21646 <handle_at_udp_send+0x1a>
		err = at_params_string_get(&at_param_list, 2, data, &size);
   2166a:	2102      	movs	r1, #2
   2166c:	4814      	ldr	r0, [pc, #80]	; (216c0 <handle_at_udp_send+0x94>)
   2166e:	1d3b      	adds	r3, r7, #4
   21670:	f107 0208 	add.w	r2, r7, #8
   21674:	f016 fca7 	bl	37fc6 <at_params_string_get>
		if (err) {
   21678:	2800      	cmp	r0, #0
   2167a:	d1e4      	bne.n	21646 <handle_at_udp_send+0x1a>
		if (datatype == DATATYPE_HEXADECIMAL) {
   2167c:	887b      	ldrh	r3, [r7, #2]
   2167e:	6879      	ldr	r1, [r7, #4]
   21680:	b9bb      	cbnz	r3, 216b2 <handle_at_udp_send+0x86>
			uint8_t data_hex[size / 2];
   21682:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   21686:	105b      	asrs	r3, r3, #1
   21688:	1dda      	adds	r2, r3, #7
   2168a:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   2168e:	466c      	mov	r4, sp
			uint8_t data_hex[size / 2];
   21690:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   21694:	466a      	mov	r2, sp
   21696:	b29b      	uxth	r3, r3
   21698:	b289      	uxth	r1, r1
   2169a:	f107 0008 	add.w	r0, r7, #8
   2169e:	f013 ff7d 	bl	3559c <slm_util_atoh>
			if (err > 0) {
   216a2:	2800      	cmp	r0, #0
   216a4:	dd03      	ble.n	216ae <handle_at_udp_send+0x82>
				err = do_udp_send(data_hex, err);
   216a6:	4601      	mov	r1, r0
   216a8:	4668      	mov	r0, sp
   216aa:	f7ff ff37 	bl	2151c <do_udp_send>
   216ae:	46a5      	mov	sp, r4
   216b0:	e7c9      	b.n	21646 <handle_at_udp_send+0x1a>
			err = do_udp_send(data, size);
   216b2:	f107 0008 	add.w	r0, r7, #8
   216b6:	f7ff ff31 	bl	2151c <do_udp_send>
   216ba:	e7c4      	b.n	21646 <handle_at_udp_send+0x1a>
   216bc:	20023388 	.word	0x20023388
   216c0:	20023308 	.word	0x20023308

000216c4 <handle_at_udp_client>:
{
   216c4:	b570      	push	{r4, r5, r6, lr}
   216c6:	4604      	mov	r4, r0
   216c8:	b0c2      	sub	sp, #264	; 0x108
	int param_count = at_params_valid_count_get(&at_param_list);
   216ca:	48aa      	ldr	r0, [pc, #680]	; (21974 <handle_at_udp_client+0x2b0>)
   216cc:	f016 fc9e 	bl	3800c <at_params_valid_count_get>
	switch (cmd_type) {
   216d0:	2c02      	cmp	r4, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   216d2:	4605      	mov	r5, r0
	switch (cmd_type) {
   216d4:	f000 81a0 	beq.w	21a18 <_flash_used+0x48>
   216d8:	2c03      	cmp	r4, #3
   216da:	f000 81be 	beq.w	21a5a <_flash_used+0x8a>
   216de:	2c01      	cmp	r4, #1
   216e0:	f040 80d0 	bne.w	21884 <handle_at_udp_client+0x1c0>
		if (param_count < 2) {
   216e4:	2801      	cmp	r0, #1
   216e6:	f340 80cd 	ble.w	21884 <handle_at_udp_client+0x1c0>
		err = at_params_short_get(&at_param_list, 1, &op);
   216ea:	4621      	mov	r1, r4
   216ec:	48a1      	ldr	r0, [pc, #644]	; (21974 <handle_at_udp_client+0x2b0>)
   216ee:	aa0a      	add	r2, sp, #40	; 0x28
   216f0:	f016 fc44 	bl	37f7c <at_params_short_get>
		if (err) {
   216f4:	4604      	mov	r4, r0
   216f6:	2800      	cmp	r0, #0
   216f8:	d16b      	bne.n	217d2 <handle_at_udp_client+0x10e>
		if (op == AT_CLIENT_CONNECT ||
   216fa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   216fe:	1e5a      	subs	r2, r3, #1
   21700:	2a01      	cmp	r2, #1
   21702:	f200 8124 	bhi.w	2194e <handle_at_udp_client+0x28a>
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   21706:	2180      	movs	r1, #128	; 0x80
   21708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (param_count < 4) {
   2170c:	2d03      	cmp	r5, #3
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   2170e:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
			if (param_count < 4) {
   21712:	f340 80b7 	ble.w	21884 <handle_at_udp_client+0x1c0>
			err = at_params_string_get(&at_param_list,
   21716:	2102      	movs	r1, #2
   21718:	4896      	ldr	r0, [pc, #600]	; (21974 <handle_at_udp_client+0x2b0>)
   2171a:	ab0b      	add	r3, sp, #44	; 0x2c
   2171c:	aa22      	add	r2, sp, #136	; 0x88
   2171e:	f016 fc52 	bl	37fc6 <at_params_string_get>
			if (err) {
   21722:	4604      	mov	r4, r0
   21724:	2800      	cmp	r0, #0
   21726:	d154      	bne.n	217d2 <handle_at_udp_client+0x10e>
			url[size] = '\0';
   21728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2172a:	aa42      	add	r2, sp, #264	; 0x108
   2172c:	4413      	add	r3, r2
   2172e:	f803 0c80 	strb.w	r0, [r3, #-128]
			err = at_params_short_get(&at_param_list, 3, &port);
   21732:	2103      	movs	r1, #3
   21734:	488f      	ldr	r0, [pc, #572]	; (21974 <handle_at_udp_client+0x2b0>)
   21736:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   2173a:	f016 fc1f 	bl	37f7c <at_params_short_get>
			if (err) {
   2173e:	4604      	mov	r4, r0
   21740:	2800      	cmp	r0, #0
   21742:	d146      	bne.n	217d2 <handle_at_udp_client+0x10e>
			if (param_count > 4) {
   21744:	2d04      	cmp	r5, #4
   21746:	d004      	beq.n	21752 <handle_at_udp_client+0x8e>
				at_params_int_get(&at_param_list, 4, &sec_tag);
   21748:	2104      	movs	r1, #4
   2174a:	488a      	ldr	r0, [pc, #552]	; (21974 <handle_at_udp_client+0x2b0>)
   2174c:	aa0c      	add	r2, sp, #48	; 0x30
   2174e:	f016 fc27 	bl	37fa0 <at_params_int_get>
			err = do_udp_client_connect(url, port, sec_tag);
   21752:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   21754:	f8bd 402a 	ldrh.w	r4, [sp, #42]	; 0x2a
	if (sec_tag == INVALID_SEC_TAG) {
   21758:	4d87      	ldr	r5, [pc, #540]	; (21978 <handle_at_udp_client+0x2b4>)
   2175a:	1c72      	adds	r2, r6, #1
	return z_impl_zsock_socket(family, type, proto);
   2175c:	f04f 0102 	mov.w	r1, #2
   21760:	bf0c      	ite	eq
   21762:	2211      	moveq	r2, #17
   21764:	f240 1211 	movwne	r2, #273	; 0x111
   21768:	2001      	movs	r0, #1
   2176a:	f002 fd05 	bl	24178 <z_impl_zsock_socket>
		udp_sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_DTLS_1_2);
   2176e:	6028      	str	r0, [r5, #0]
	if (udp_sock < 0) {
   21770:	6828      	ldr	r0, [r5, #0]
   21772:	2800      	cmp	r0, #0
   21774:	da30      	bge.n	217d8 <handle_at_udp_client+0x114>
   21776:	4a81      	ldr	r2, [pc, #516]	; (2197c <handle_at_udp_client+0x2b8>)
   21778:	4c81      	ldr	r4, [pc, #516]	; (21980 <handle_at_udp_client+0x2bc>)
   2177a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
   2177c:	f015 fb57 	bl	36e2e <__errno>
   21780:	08e4      	lsrs	r4, r4, #3
   21782:	6801      	ldr	r1, [r0, #0]
   21784:	01a4      	lsls	r4, r4, #6
   21786:	f044 0401 	orr.w	r4, r4, #1
   2178a:	4622      	mov	r2, r4
   2178c:	4249      	negs	r1, r1
   2178e:	487d      	ldr	r0, [pc, #500]	; (21984 <handle_at_udp_client+0x2c0>)
   21790:	f014 fc55 	bl	3603e <log_1>
		sprintf(rsp_buf, "#XUDPCLI: %d\r\n", -errno);
   21794:	f015 fb4b 	bl	36e2e <__errno>
   21798:	6803      	ldr	r3, [r0, #0]
   2179a:	2100      	movs	r1, #0
   2179c:	425b      	negs	r3, r3
   2179e:	f640 228c 	movw	r2, #2700	; 0xa8c
   217a2:	9300      	str	r3, [sp, #0]
   217a4:	4878      	ldr	r0, [pc, #480]	; (21988 <handle_at_udp_client+0x2c4>)
   217a6:	4b79      	ldr	r3, [pc, #484]	; (2198c <handle_at_udp_client+0x2c8>)
   217a8:	f017 fb01 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   217ac:	4876      	ldr	r0, [pc, #472]	; (21988 <handle_at_udp_client+0x2c4>)
   217ae:	f7fb fc5f 	bl	1d070 <strlen>
   217b2:	4601      	mov	r1, r0
   217b4:	4874      	ldr	r0, [pc, #464]	; (21988 <handle_at_udp_client+0x2c4>)
   217b6:	f7fc fd17 	bl	1e1e8 <rsp_send>
		return -errno;
   217ba:	f015 fb38 	bl	36e2e <__errno>
   217be:	6804      	ldr	r4, [r0, #0]
   217c0:	4264      	negs	r4, r4
			if (err == 0 &&
   217c2:	b934      	cbnz	r4, 217d2 <handle_at_udp_client+0x10e>
   217c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   217c8:	2b02      	cmp	r3, #2
   217ca:	d102      	bne.n	217d2 <handle_at_udp_client+0x10e>
				udp_datamode = true;
   217cc:	2201      	movs	r2, #1
   217ce:	4b70      	ldr	r3, [pc, #448]	; (21990 <handle_at_udp_client+0x2cc>)
   217d0:	701a      	strb	r2, [r3, #0]
}
   217d2:	4620      	mov	r0, r4
   217d4:	b042      	add	sp, #264	; 0x108
   217d6:	bd70      	pop	{r4, r5, r6, pc}
	if (sec_tag != INVALID_SEC_TAG) {
   217d8:	1c73      	adds	r3, r6, #1
   217da:	d02f      	beq.n	2183c <handle_at_udp_client+0x178>
		sec_tag_t sec_tag_list[1] = { sec_tag };
   217dc:	960e      	str	r6, [sp, #56]	; 0x38
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   217de:	2304      	movs	r3, #4
   217e0:	2201      	movs	r2, #1
   217e2:	9300      	str	r3, [sp, #0]
   217e4:	f44f 718d 	mov.w	r1, #282	; 0x11a
   217e8:	ab0e      	add	r3, sp, #56	; 0x38
   217ea:	f015 f8e5 	bl	369b8 <z_impl_zsock_setsockopt>
		if (ret) {
   217ee:	b328      	cbz	r0, 2183c <handle_at_udp_client+0x178>
   217f0:	4a62      	ldr	r2, [pc, #392]	; (2197c <handle_at_udp_client+0x2b8>)
   217f2:	4c63      	ldr	r4, [pc, #396]	; (21980 <handle_at_udp_client+0x2bc>)
   217f4:	1aa4      	subs	r4, r4, r2
   217f6:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set tag list failed: %d", -errno);
   217f8:	f015 fb19 	bl	36e2e <__errno>
   217fc:	01a4      	lsls	r4, r4, #6
   217fe:	f044 0401 	orr.w	r4, r4, #1
   21802:	4622      	mov	r2, r4
   21804:	6801      	ldr	r1, [r0, #0]
   21806:	4863      	ldr	r0, [pc, #396]	; (21994 <handle_at_udp_client+0x2d0>)
   21808:	4249      	negs	r1, r1
		LOG_ERR("connect() failed: %d", -errno);
   2180a:	f014 fc18 	bl	3603e <log_1>
		sprintf(rsp_buf, "#XUDPCLI: %d\r\n", -errno);
   2180e:	f015 fb0e 	bl	36e2e <__errno>
   21812:	6803      	ldr	r3, [r0, #0]
   21814:	f640 228c 	movw	r2, #2700	; 0xa8c
   21818:	425b      	negs	r3, r3
   2181a:	2100      	movs	r1, #0
   2181c:	9300      	str	r3, [sp, #0]
   2181e:	485a      	ldr	r0, [pc, #360]	; (21988 <handle_at_udp_client+0x2c4>)
   21820:	4b5a      	ldr	r3, [pc, #360]	; (2198c <handle_at_udp_client+0x2c8>)
   21822:	f017 fac4 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   21826:	4858      	ldr	r0, [pc, #352]	; (21988 <handle_at_udp_client+0x2c4>)
   21828:	f7fb fc22 	bl	1d070 <strlen>
   2182c:	4601      	mov	r1, r0
   2182e:	4856      	ldr	r0, [pc, #344]	; (21988 <handle_at_udp_client+0x2c4>)
   21830:	f7fc fcda 	bl	1e1e8 <rsp_send>
		close(udp_sock);
   21834:	6828      	ldr	r0, [r5, #0]
   21836:	f013 ff0b 	bl	35650 <close>
   2183a:	e7be      	b.n	217ba <handle_at_udp_client+0xf6>
	if (check_for_ipv4(url, strlen(url))) {
   2183c:	a822      	add	r0, sp, #136	; 0x88
   2183e:	f7fb fc17 	bl	1d070 <strlen>
   21842:	b2c1      	uxtb	r1, r0
   21844:	a822      	add	r0, sp, #136	; 0x88
   21846:	f013 fecd 	bl	355e4 <check_for_ipv4>
   2184a:	4601      	mov	r1, r0
   2184c:	b1e8      	cbz	r0, 2188a <handle_at_udp_client+0x1c6>
		remote.sin_family = AF_INET;
   2184e:	2001      	movs	r0, #1
   21850:	4a51      	ldr	r2, [pc, #324]	; (21998 <handle_at_udp_client+0x2d4>)
		remote.sin_port = htons(port);
   21852:	0223      	lsls	r3, r4, #8
   21854:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
		remote.sin_family = AF_INET;
   21858:	8010      	strh	r0, [r2, #0]
		remote.sin_port = htons(port);
   2185a:	8054      	strh	r4, [r2, #2]
	return z_impl_zsock_inet_pton(family, src, dst);
   2185c:	a922      	add	r1, sp, #136	; 0x88
   2185e:	3204      	adds	r2, #4
   21860:	f015 f888 	bl	36974 <z_impl_zsock_inet_pton>
		if (ret != 1) {
   21864:	2801      	cmp	r0, #1
   21866:	4601      	mov	r1, r0
   21868:	d036      	beq.n	218d8 <handle_at_udp_client+0x214>
   2186a:	4a45      	ldr	r2, [pc, #276]	; (21980 <handle_at_udp_client+0x2bc>)
   2186c:	4b43      	ldr	r3, [pc, #268]	; (2197c <handle_at_udp_client+0x2b8>)
			LOG_ERR("inet_pton() failed: %d", ret);
   2186e:	484b      	ldr	r0, [pc, #300]	; (2199c <handle_at_udp_client+0x2d8>)
   21870:	1ad2      	subs	r2, r2, r3
   21872:	08d2      	lsrs	r2, r2, #3
   21874:	0192      	lsls	r2, r2, #6
   21876:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("getaddrinfo() failed: %d", ret);
   2187a:	f014 fbe0 	bl	3603e <log_1>
			close(udp_sock);
   2187e:	6828      	ldr	r0, [r5, #0]
   21880:	f013 fee6 	bl	35650 <close>
			return -EINVAL;
   21884:	f06f 0415 	mvn.w	r4, #21
   21888:	e7a3      	b.n	217d2 <handle_at_udp_client+0x10e>
		struct addrinfo hints = {
   2188a:	2250      	movs	r2, #80	; 0x50
   2188c:	9009      	str	r0, [sp, #36]	; 0x24
   2188e:	a80e      	add	r0, sp, #56	; 0x38
   21890:	f017 f975 	bl	38b7e <memset>
   21894:	2601      	movs	r6, #1
   21896:	2302      	movs	r3, #2
	return zsock_getaddrinfo(host, service, hints, res);
   21898:	9909      	ldr	r1, [sp, #36]	; 0x24
   2189a:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
   2189e:	aa0e      	add	r2, sp, #56	; 0x38
   218a0:	ab0d      	add	r3, sp, #52	; 0x34
   218a2:	a822      	add	r0, sp, #136	; 0x88
   218a4:	f014 ffac 	bl	36800 <zsock_getaddrinfo>
		if (ret || result == NULL) {
   218a8:	4601      	mov	r1, r0
   218aa:	b908      	cbnz	r0, 218b0 <handle_at_udp_client+0x1ec>
   218ac:	980d      	ldr	r0, [sp, #52]	; 0x34
   218ae:	b940      	cbnz	r0, 218c2 <handle_at_udp_client+0x1fe>
   218b0:	4a33      	ldr	r2, [pc, #204]	; (21980 <handle_at_udp_client+0x2bc>)
   218b2:	4b32      	ldr	r3, [pc, #200]	; (2197c <handle_at_udp_client+0x2b8>)
			LOG_ERR("getaddrinfo() failed: %d", ret);
   218b4:	483a      	ldr	r0, [pc, #232]	; (219a0 <handle_at_udp_client+0x2dc>)
   218b6:	1ad2      	subs	r2, r2, r3
   218b8:	08d2      	lsrs	r2, r2, #3
   218ba:	0192      	lsls	r2, r2, #6
   218bc:	f042 0201 	orr.w	r2, r2, #1
   218c0:	e7db      	b.n	2187a <handle_at_udp_client+0x1b6>
		remote.sin_port = htons(port);
   218c2:	0222      	lsls	r2, r4, #8
   218c4:	ea42 2414 	orr.w	r4, r2, r4, lsr #8
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   218c8:	6982      	ldr	r2, [r0, #24]
		remote.sin_family = AF_INET;
   218ca:	4b33      	ldr	r3, [pc, #204]	; (21998 <handle_at_udp_client+0x2d4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   218cc:	6852      	ldr	r2, [r2, #4]
		remote.sin_family = AF_INET;
   218ce:	801e      	strh	r6, [r3, #0]
		remote.sin_port = htons(port);
   218d0:	805c      	strh	r4, [r3, #2]
		remote.sin_addr.s_addr =
   218d2:	605a      	str	r2, [r3, #4]
	zsock_freeaddrinfo(ai);
   218d4:	f014 ff96 	bl	36804 <zsock_freeaddrinfo>
	ret = connect(udp_sock, (struct sockaddr *)&remote,
   218d8:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   218da:	2208      	movs	r2, #8
   218dc:	492e      	ldr	r1, [pc, #184]	; (21998 <handle_at_udp_client+0x2d4>)
   218de:	f014 ffcf 	bl	36880 <z_impl_zsock_connect>
	if (ret < 0) {
   218e2:	1e04      	subs	r4, r0, #0
   218e4:	da0d      	bge.n	21902 <handle_at_udp_client+0x23e>
   218e6:	4a25      	ldr	r2, [pc, #148]	; (2197c <handle_at_udp_client+0x2b8>)
   218e8:	4c25      	ldr	r4, [pc, #148]	; (21980 <handle_at_udp_client+0x2bc>)
   218ea:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect() failed: %d", -errno);
   218ec:	f015 fa9f 	bl	36e2e <__errno>
   218f0:	08e4      	lsrs	r4, r4, #3
   218f2:	6801      	ldr	r1, [r0, #0]
   218f4:	01a4      	lsls	r4, r4, #6
   218f6:	f044 0401 	orr.w	r4, r4, #1
   218fa:	4622      	mov	r2, r4
   218fc:	4829      	ldr	r0, [pc, #164]	; (219a4 <handle_at_udp_client+0x2e0>)
   218fe:	4249      	negs	r1, r1
   21900:	e783      	b.n	2180a <handle_at_udp_client+0x146>
   21902:	2200      	movs	r2, #0
   21904:	2300      	movs	r3, #0
   21906:	2600      	movs	r6, #0
   21908:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2190c:	2004      	movs	r0, #4
   2190e:	230e      	movs	r3, #14
   21910:	f44f 62c8 	mov.w	r2, #1600	; 0x640
   21914:	e9cd 3003 	strd	r3, r0, [sp, #12]
   21918:	e9cd 6601 	strd	r6, r6, [sp, #4]
   2191c:	4b22      	ldr	r3, [pc, #136]	; (219a8 <handle_at_udp_client+0x2e4>)
   2191e:	4923      	ldr	r1, [pc, #140]	; (219ac <handle_at_udp_client+0x2e8>)
   21920:	9600      	str	r6, [sp, #0]
   21922:	4823      	ldr	r0, [pc, #140]	; (219b0 <handle_at_udp_client+0x2ec>)
   21924:	f012 fb6c 	bl	34000 <z_impl_k_thread_create>
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   21928:	4b22      	ldr	r3, [pc, #136]	; (219b4 <handle_at_udp_client+0x2f0>)
	sprintf(rsp_buf, "#XUDPCLI: %d connected\r\n", udp_sock);
   2192a:	4631      	mov	r1, r6
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   2192c:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XUDPCLI: %d connected\r\n", udp_sock);
   2192e:	682b      	ldr	r3, [r5, #0]
   21930:	f640 228c 	movw	r2, #2700	; 0xa8c
   21934:	9300      	str	r3, [sp, #0]
   21936:	4814      	ldr	r0, [pc, #80]	; (21988 <handle_at_udp_client+0x2c4>)
   21938:	4b1f      	ldr	r3, [pc, #124]	; (219b8 <handle_at_udp_client+0x2f4>)
   2193a:	f017 fa38 	bl	38dae <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   2193e:	4812      	ldr	r0, [pc, #72]	; (21988 <handle_at_udp_client+0x2c4>)
   21940:	f7fb fb96 	bl	1d070 <strlen>
   21944:	4601      	mov	r1, r0
   21946:	4810      	ldr	r0, [pc, #64]	; (21988 <handle_at_udp_client+0x2c4>)
   21948:	f7fc fc4e 	bl	1e1e8 <rsp_send>
	return ret;
   2194c:	e739      	b.n	217c2 <handle_at_udp_client+0xfe>
		} else if (op == AT_CLIENT_DISCONNECT) {
   2194e:	2b00      	cmp	r3, #0
   21950:	f47f af3f 	bne.w	217d2 <handle_at_udp_client+0x10e>
			if (udp_sock < 0) {
   21954:	4d08      	ldr	r5, [pc, #32]	; (21978 <handle_at_udp_client+0x2b4>)
   21956:	682c      	ldr	r4, [r5, #0]
   21958:	2c00      	cmp	r4, #0
   2195a:	da31      	bge.n	219c0 <handle_at_udp_client+0x2fc>
   2195c:	4b07      	ldr	r3, [pc, #28]	; (2197c <handle_at_udp_client+0x2b8>)
   2195e:	4908      	ldr	r1, [pc, #32]	; (21980 <handle_at_udp_client+0x2bc>)
				LOG_WRN("Client is not connected");
   21960:	4816      	ldr	r0, [pc, #88]	; (219bc <handle_at_udp_client+0x2f8>)
   21962:	1ac9      	subs	r1, r1, r3
   21964:	08c9      	lsrs	r1, r1, #3
   21966:	0189      	lsls	r1, r1, #6
   21968:	f041 0102 	orr.w	r1, r1, #2
   2196c:	f014 fb58 	bl	36020 <log_0>
				return -EINVAL;
   21970:	e788      	b.n	21884 <handle_at_udp_client+0x1c0>
   21972:	bf00      	nop
   21974:	20023308 	.word	0x20023308
   21978:	20023390 	.word	0x20023390
   2197c:	00039a50 	.word	0x00039a50
   21980:	00039b30 	.word	0x00039b30
   21984:	0003af2d 	.word	0x0003af2d
   21988:	200287b0 	.word	0x200287b0
   2198c:	0003b420 	.word	0x0003b420
   21990:	2002b79c 	.word	0x2002b79c
   21994:	0003b0ee 	.word	0x0003b0ee
   21998:	20023388 	.word	0x20023388
   2199c:	0003b106 	.word	0x0003b106
   219a0:	0003b11d 	.word	0x0003b11d
   219a4:	0003ae2e 	.word	0x0003ae2e
   219a8:	00020ed5 	.word	0x00020ed5
   219ac:	2002dea0 	.word	0x2002dea0
   219b0:	20021330 	.word	0x20021330
   219b4:	20023394 	.word	0x20023394
   219b8:	0003b42f 	.word	0x0003b42f
   219bc:	0003b14f 	.word	0x0003b14f
	if (udp_sock > 0) {
   219c0:	f43f af07 	beq.w	217d2 <handle_at_udp_client+0x10e>
		k_thread_abort(udp_thread_id);
   219c4:	4b2c      	ldr	r3, [pc, #176]	; (21a78 <_flash_used+0xa8>)
   219c6:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   219c8:	f003 ff24 	bl	25814 <z_impl_k_thread_abort>
		ret = close(udp_sock);
   219cc:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   219ce:	f014 ff2a 	bl	36826 <z_impl_zsock_close>
		if (ret < 0) {
   219d2:	1e04      	subs	r4, r0, #0
   219d4:	da12      	bge.n	219fc <_flash_used+0x2c>
   219d6:	4a29      	ldr	r2, [pc, #164]	; (21a7c <_flash_used+0xac>)
   219d8:	4c29      	ldr	r4, [pc, #164]	; (21a80 <_flash_used+0xb0>)
   219da:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   219dc:	f015 fa27 	bl	36e2e <__errno>
   219e0:	08e4      	lsrs	r4, r4, #3
   219e2:	6801      	ldr	r1, [r0, #0]
   219e4:	01a4      	lsls	r4, r4, #6
   219e6:	f044 0402 	orr.w	r4, r4, #2
   219ea:	4622      	mov	r2, r4
   219ec:	4825      	ldr	r0, [pc, #148]	; (21a84 <_flash_used+0xb4>)
   219ee:	4249      	negs	r1, r1
   219f0:	f014 fb25 	bl	3603e <log_1>
			ret = -errno;
   219f4:	f015 fa1b 	bl	36e2e <__errno>
   219f8:	6804      	ldr	r4, [r0, #0]
   219fa:	4264      	negs	r4, r4
		(void)slm_at_udp_proxy_init();
   219fc:	f7ff fb92 	bl	21124 <slm_at_udp_proxy_init>
		sprintf(rsp_buf, "#XUDPCLI: disconnected\r\n");
   21a00:	4921      	ldr	r1, [pc, #132]	; (21a88 <_flash_used+0xb8>)
   21a02:	4822      	ldr	r0, [pc, #136]	; (21a8c <_flash_used+0xbc>)
   21a04:	f017 f9fa 	bl	38dfc <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   21a08:	4820      	ldr	r0, [pc, #128]	; (21a8c <_flash_used+0xbc>)
   21a0a:	f7fb fb31 	bl	1d070 <strlen>
   21a0e:	4601      	mov	r1, r0
   21a10:	481e      	ldr	r0, [pc, #120]	; (21a8c <_flash_used+0xbc>)
   21a12:	f7fc fbe9 	bl	1e1e8 <rsp_send>
		break;
   21a16:	e6dc      	b.n	217d2 <handle_at_udp_client+0x10e>
		if (udp_sock != INVALID_SOCKET) {
   21a18:	4b1d      	ldr	r3, [pc, #116]	; (21a90 <_flash_used+0xc0>)
   21a1a:	681b      	ldr	r3, [r3, #0]
   21a1c:	1c59      	adds	r1, r3, #1
   21a1e:	d013      	beq.n	21a48 <_flash_used+0x78>
			sprintf(rsp_buf, "#XUDPCLI: %d, %d\r\n",
   21a20:	4a1c      	ldr	r2, [pc, #112]	; (21a94 <_flash_used+0xc4>)
   21a22:	2100      	movs	r1, #0
   21a24:	7812      	ldrb	r2, [r2, #0]
   21a26:	4819      	ldr	r0, [pc, #100]	; (21a8c <_flash_used+0xbc>)
   21a28:	e9cd 3200 	strd	r3, r2, [sp]
   21a2c:	f640 228c 	movw	r2, #2700	; 0xa8c
   21a30:	4b19      	ldr	r3, [pc, #100]	; (21a98 <_flash_used+0xc8>)
   21a32:	f017 f9bc 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   21a36:	4815      	ldr	r0, [pc, #84]	; (21a8c <_flash_used+0xbc>)
   21a38:	f7fb fb1a 	bl	1d070 <strlen>
   21a3c:	4601      	mov	r1, r0
   21a3e:	4813      	ldr	r0, [pc, #76]	; (21a8c <_flash_used+0xbc>)
   21a40:	f7fc fbd2 	bl	1e1e8 <rsp_send>
		err = 0;
   21a44:	2400      	movs	r4, #0
		break;
   21a46:	e6c4      	b.n	217d2 <handle_at_udp_client+0x10e>
			sprintf(rsp_buf, "#XUDPCLI: %d\r\n",
   21a48:	9300      	str	r3, [sp, #0]
   21a4a:	f640 228c 	movw	r2, #2700	; 0xa8c
   21a4e:	2100      	movs	r1, #0
   21a50:	4b12      	ldr	r3, [pc, #72]	; (21a9c <_flash_used+0xcc>)
   21a52:	480e      	ldr	r0, [pc, #56]	; (21a8c <_flash_used+0xbc>)
   21a54:	f017 f9ab 	bl	38dae <__sprintf_chk>
   21a58:	e7ed      	b.n	21a36 <_flash_used+0x66>
		sprintf(rsp_buf,
   21a5a:	2400      	movs	r4, #0
   21a5c:	2301      	movs	r3, #1
   21a5e:	2202      	movs	r2, #2
   21a60:	4621      	mov	r1, r4
   21a62:	e9cd 3201 	strd	r3, r2, [sp, #4]
   21a66:	9400      	str	r4, [sp, #0]
   21a68:	f640 228c 	movw	r2, #2700	; 0xa8c
   21a6c:	4b0c      	ldr	r3, [pc, #48]	; (21aa0 <_flash_used+0xd0>)
   21a6e:	4807      	ldr	r0, [pc, #28]	; (21a8c <_flash_used+0xbc>)
   21a70:	f017 f99d 	bl	38dae <__sprintf_chk>
   21a74:	e7c8      	b.n	21a08 <_flash_used+0x38>
   21a76:	bf00      	nop
   21a78:	20023394 	.word	0x20023394
   21a7c:	00039a50 	.word	0x00039a50
   21a80:	00039b30 	.word	0x00039b30
   21a84:	0003ac3e 	.word	0x0003ac3e
   21a88:	0003b448 	.word	0x0003b448
   21a8c:	200287b0 	.word	0x200287b0
   21a90:	20023390 	.word	0x20023390
   21a94:	2002b79c 	.word	0x2002b79c
   21a98:	0003b461 	.word	0x0003b461
   21a9c:	0003b420 	.word	0x0003b420
   21aa0:	0003b474 	.word	0x0003b474

00021aa4 <slm_at_udp_proxy_uninit>:

/**@brief API to uninitialize UDP Proxy AT commands handler
 */
int slm_at_udp_proxy_uninit(void)
{
   21aa4:	b538      	push	{r3, r4, r5, lr}
	int ret;

	if (udp_sock > 0) {
   21aa6:	4d11      	ldr	r5, [pc, #68]	; (21aec <slm_at_udp_proxy_uninit+0x48>)
   21aa8:	682b      	ldr	r3, [r5, #0]
   21aaa:	2b00      	cmp	r3, #0
   21aac:	dd1c      	ble.n	21ae8 <slm_at_udp_proxy_uninit+0x44>
		k_thread_abort(udp_thread_id);
   21aae:	4b10      	ldr	r3, [pc, #64]	; (21af0 <slm_at_udp_proxy_uninit+0x4c>)
   21ab0:	6818      	ldr	r0, [r3, #0]
   21ab2:	f003 feaf 	bl	25814 <z_impl_k_thread_abort>
		ret = close(udp_sock);
   21ab6:	6828      	ldr	r0, [r5, #0]
   21ab8:	f014 feb5 	bl	36826 <z_impl_zsock_close>
		if (ret < 0) {
   21abc:	2800      	cmp	r0, #0
   21abe:	da10      	bge.n	21ae2 <slm_at_udp_proxy_uninit+0x3e>
   21ac0:	4a0c      	ldr	r2, [pc, #48]	; (21af4 <slm_at_udp_proxy_uninit+0x50>)
   21ac2:	4c0d      	ldr	r4, [pc, #52]	; (21af8 <slm_at_udp_proxy_uninit+0x54>)
   21ac4:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   21ac6:	f015 f9b2 	bl	36e2e <__errno>
   21aca:	08e4      	lsrs	r4, r4, #3
   21acc:	6801      	ldr	r1, [r0, #0]
   21ace:	01a4      	lsls	r4, r4, #6
   21ad0:	f044 0402 	orr.w	r4, r4, #2
   21ad4:	4622      	mov	r2, r4
   21ad6:	4809      	ldr	r0, [pc, #36]	; (21afc <slm_at_udp_proxy_uninit+0x58>)
   21ad8:	4249      	negs	r1, r1
   21ada:	f014 fab0 	bl	3603e <log_1>
			ret = -errno;
   21ade:	f015 f9a6 	bl	36e2e <__errno>
		}
		udp_sock = INVALID_SOCKET;
   21ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21ae6:	602b      	str	r3, [r5, #0]
	}

	return 0;
}
   21ae8:	2000      	movs	r0, #0
   21aea:	bd38      	pop	{r3, r4, r5, pc}
   21aec:	20023390 	.word	0x20023390
   21af0:	20023394 	.word	0x20023394
   21af4:	00039a50 	.word	0x00039a50
   21af8:	00039b30 	.word	0x00039b30
   21afc:	0003ac3e 	.word	0x0003ac3e

00021b00 <handle_at_icmp_ping>:
 */
static int handle_at_icmp_ping(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[ICMP_MAX_URL];
	int size = ICMP_MAX_URL;
   21b00:	2380      	movs	r3, #128	; 0x80
{
   21b02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t length, timeout, count, interval;

	switch (cmd_type) {
   21b06:	2801      	cmp	r0, #1
{
   21b08:	b0a5      	sub	sp, #148	; 0x94
   21b0a:	4604      	mov	r4, r0
	int size = ICMP_MAX_URL;
   21b0c:	9302      	str	r3, [sp, #8]
	switch (cmd_type) {
   21b0e:	d005      	beq.n	21b1c <handle_at_icmp_ping+0x1c>
	int err = -EINVAL;
   21b10:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
   21b14:	4620      	mov	r0, r4
   21b16:	b025      	add	sp, #148	; 0x94
   21b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (at_params_valid_count_get(&at_param_list) < 4) {
   21b1c:	4874      	ldr	r0, [pc, #464]	; (21cf0 <handle_at_icmp_ping+0x1f0>)
   21b1e:	f016 fa75 	bl	3800c <at_params_valid_count_get>
   21b22:	2803      	cmp	r0, #3
   21b24:	d9f4      	bls.n	21b10 <handle_at_icmp_ping+0x10>
		err = at_params_string_get(&at_param_list, 1, url, &size);
   21b26:	4621      	mov	r1, r4
   21b28:	4871      	ldr	r0, [pc, #452]	; (21cf0 <handle_at_icmp_ping+0x1f0>)
   21b2a:	ab02      	add	r3, sp, #8
   21b2c:	aa04      	add	r2, sp, #16
   21b2e:	f016 fa4a 	bl	37fc6 <at_params_string_get>
		if (err < 0) {
   21b32:	1e04      	subs	r4, r0, #0
   21b34:	dbee      	blt.n	21b14 <handle_at_icmp_ping+0x14>
		url[size] = '\0';
   21b36:	2500      	movs	r5, #0
   21b38:	9b02      	ldr	r3, [sp, #8]
   21b3a:	aa24      	add	r2, sp, #144	; 0x90
   21b3c:	4413      	add	r3, r2
		err = at_params_short_get(&at_param_list, 2, &length);
   21b3e:	2102      	movs	r1, #2
   21b40:	466a      	mov	r2, sp
   21b42:	486b      	ldr	r0, [pc, #428]	; (21cf0 <handle_at_icmp_ping+0x1f0>)
		url[size] = '\0';
   21b44:	f803 5c80 	strb.w	r5, [r3, #-128]
		err = at_params_short_get(&at_param_list, 2, &length);
   21b48:	f016 fa18 	bl	37f7c <at_params_short_get>
		if (err < 0) {
   21b4c:	1e04      	subs	r4, r0, #0
   21b4e:	dbe1      	blt.n	21b14 <handle_at_icmp_ping+0x14>
		err = at_params_short_get(&at_param_list, 3, &timeout);
   21b50:	2103      	movs	r1, #3
   21b52:	4867      	ldr	r0, [pc, #412]	; (21cf0 <handle_at_icmp_ping+0x1f0>)
   21b54:	f10d 0202 	add.w	r2, sp, #2
   21b58:	f016 fa10 	bl	37f7c <at_params_short_get>
		if (err < 0) {
   21b5c:	1e04      	subs	r4, r0, #0
   21b5e:	dbd9      	blt.n	21b14 <handle_at_icmp_ping+0x14>
		if (at_params_valid_count_get(&at_param_list) > 4) {
   21b60:	4863      	ldr	r0, [pc, #396]	; (21cf0 <handle_at_icmp_ping+0x1f0>)
   21b62:	f016 fa53 	bl	3800c <at_params_valid_count_get>
   21b66:	2804      	cmp	r0, #4
   21b68:	d929      	bls.n	21bbe <handle_at_icmp_ping+0xbe>
			err = at_params_short_get(&at_param_list, 4, &count);
   21b6a:	2104      	movs	r1, #4
   21b6c:	4860      	ldr	r0, [pc, #384]	; (21cf0 <handle_at_icmp_ping+0x1f0>)
   21b6e:	aa01      	add	r2, sp, #4
   21b70:	f016 fa04 	bl	37f7c <at_params_short_get>
			if (err < 0) {
   21b74:	1e04      	subs	r4, r0, #0
   21b76:	dbcd      	blt.n	21b14 <handle_at_icmp_ping+0x14>
		if (at_params_valid_count_get(&at_param_list) > 5) {
   21b78:	485d      	ldr	r0, [pc, #372]	; (21cf0 <handle_at_icmp_ping+0x1f0>)
   21b7a:	f016 fa47 	bl	3800c <at_params_valid_count_get>
   21b7e:	2805      	cmp	r0, #5
   21b80:	d920      	bls.n	21bc4 <handle_at_icmp_ping+0xc4>
			err = at_params_short_get(&at_param_list, 5, &interval);
   21b82:	2105      	movs	r1, #5
   21b84:	485a      	ldr	r0, [pc, #360]	; (21cf0 <handle_at_icmp_ping+0x1f0>)
   21b86:	f10d 0206 	add.w	r2, sp, #6
   21b8a:	f016 f9f7 	bl	37f7c <at_params_short_get>
			if (err < 0) {
   21b8e:	1e04      	subs	r4, r0, #0
   21b90:	dbc0      	blt.n	21b14 <handle_at_icmp_ping+0x14>
		err = ping_test_handler(url, length, timeout, count, interval);
   21b92:	f8bd 8000 	ldrh.w	r8, [sp]
   21b96:	f8bd 9002 	ldrh.w	r9, [sp, #2]
	if (length > ICMP_MAX_LEN) {
   21b9a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
		err = ping_test_handler(url, length, timeout, count, interval);
   21b9e:	f8bd 6004 	ldrh.w	r6, [sp, #4]
   21ba2:	f8bd 7006 	ldrh.w	r7, [sp, #6]
	if (length > ICMP_MAX_LEN) {
   21ba6:	dd11      	ble.n	21bcc <handle_at_icmp_ping+0xcc>
   21ba8:	4952      	ldr	r1, [pc, #328]	; (21cf4 <handle_at_icmp_ping+0x1f4>)
   21baa:	4b53      	ldr	r3, [pc, #332]	; (21cf8 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("Payload size exceeds limit");
   21bac:	4853      	ldr	r0, [pc, #332]	; (21cfc <handle_at_icmp_ping+0x1fc>)
   21bae:	1ac9      	subs	r1, r1, r3
   21bb0:	08c9      	lsrs	r1, r1, #3
   21bb2:	0189      	lsls	r1, r1, #6
   21bb4:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("LTE not connected yet");
   21bb8:	f014 fa32 	bl	36020 <log_0>
		return -1;
   21bbc:	e015      	b.n	21bea <handle_at_icmp_ping+0xea>
			count = 0;
   21bbe:	f8ad 5004 	strh.w	r5, [sp, #4]
   21bc2:	e7d9      	b.n	21b78 <handle_at_icmp_ping+0x78>
			interval = 0;
   21bc4:	2300      	movs	r3, #0
   21bc6:	f8ad 3006 	strh.w	r3, [sp, #6]
   21bca:	e7e2      	b.n	21b92 <handle_at_icmp_ping+0x92>
	st = modem_info_params_get(&modem_param);
   21bcc:	484c      	ldr	r0, [pc, #304]	; (21d00 <handle_at_icmp_ping+0x200>)
   21bce:	f007 f86b 	bl	28ca8 <modem_info_params_get>
	if (st < 0) {
   21bd2:	1e01      	subs	r1, r0, #0
   21bd4:	da0c      	bge.n	21bf0 <handle_at_icmp_ping+0xf0>
   21bd6:	4a47      	ldr	r2, [pc, #284]	; (21cf4 <handle_at_icmp_ping+0x1f4>)
   21bd8:	4b47      	ldr	r3, [pc, #284]	; (21cf8 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("Unable to obtain modem parameters (%d)", st);
   21bda:	484a      	ldr	r0, [pc, #296]	; (21d04 <handle_at_icmp_ping+0x204>)
   21bdc:	1ad2      	subs	r2, r2, r3
   21bde:	08d2      	lsrs	r2, r2, #3
   21be0:	0192      	lsls	r2, r2, #6
   21be2:	f042 0201 	orr.w	r2, r2, #1
   21be6:	f014 fa2a 	bl	3603e <log_1>
		return -1;
   21bea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21bee:	e791      	b.n	21b14 <handle_at_icmp_ping+0x14>
	addr_len = strlen(modem_param.network.ip_address.value_string);
   21bf0:	4845      	ldr	r0, [pc, #276]	; (21d08 <handle_at_icmp_ping+0x208>)
   21bf2:	f7fb fa3d 	bl	1d070 <strlen>
	if (addr_len == 0) {
   21bf6:	b940      	cbnz	r0, 21c0a <handle_at_icmp_ping+0x10a>
   21bf8:	493e      	ldr	r1, [pc, #248]	; (21cf4 <handle_at_icmp_ping+0x1f4>)
   21bfa:	4b3f      	ldr	r3, [pc, #252]	; (21cf8 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("LTE not connected yet");
   21bfc:	4843      	ldr	r0, [pc, #268]	; (21d0c <handle_at_icmp_ping+0x20c>)
   21bfe:	1ac9      	subs	r1, r1, r3
   21c00:	08c9      	lsrs	r1, r1, #3
   21c02:	0189      	lsls	r1, r1, #6
   21c04:	f041 0101 	orr.w	r1, r1, #1
   21c08:	e7d6      	b.n	21bb8 <handle_at_icmp_ping+0xb8>
	return zsock_getaddrinfo(host, service, hints, res);
   21c0a:	2200      	movs	r2, #0
   21c0c:	483e      	ldr	r0, [pc, #248]	; (21d08 <handle_at_icmp_ping+0x208>)
   21c0e:	4611      	mov	r1, r2
   21c10:	ab03      	add	r3, sp, #12
   21c12:	f014 fdf5 	bl	36800 <zsock_getaddrinfo>
	if (st != 0) {
   21c16:	4604      	mov	r4, r0
   21c18:	b160      	cbz	r0, 21c34 <handle_at_icmp_ping+0x134>
   21c1a:	4a36      	ldr	r2, [pc, #216]	; (21cf4 <handle_at_icmp_ping+0x1f4>)
   21c1c:	4b36      	ldr	r3, [pc, #216]	; (21cf8 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("getaddrinfo(src) error: %d", st);
   21c1e:	4601      	mov	r1, r0
   21c20:	1ad2      	subs	r2, r2, r3
   21c22:	08d2      	lsrs	r2, r2, #3
   21c24:	0192      	lsls	r2, r2, #6
   21c26:	483a      	ldr	r0, [pc, #232]	; (21d10 <handle_at_icmp_ping+0x210>)
   21c28:	f042 0201 	orr.w	r2, r2, #1
   21c2c:	f014 fa07 	bl	3603e <log_1>
		return -st;
   21c30:	4264      	negs	r4, r4
   21c32:	e76f      	b.n	21b14 <handle_at_icmp_ping+0x14>
	ping_argv.src = res;
   21c34:	9b03      	ldr	r3, [sp, #12]
   21c36:	4d37      	ldr	r5, [pc, #220]	; (21d14 <handle_at_icmp_ping+0x214>)
   21c38:	4602      	mov	r2, r0
   21c3a:	4601      	mov	r1, r0
   21c3c:	602b      	str	r3, [r5, #0]
	res = NULL;
   21c3e:	9003      	str	r0, [sp, #12]
   21c40:	ab03      	add	r3, sp, #12
   21c42:	a804      	add	r0, sp, #16
   21c44:	f014 fddc 	bl	36800 <zsock_getaddrinfo>
	if (st != 0) {
   21c48:	4604      	mov	r4, r0
   21c4a:	b1c8      	cbz	r0, 21c80 <handle_at_icmp_ping+0x180>
   21c4c:	4b2a      	ldr	r3, [pc, #168]	; (21cf8 <handle_at_icmp_ping+0x1f8>)
   21c4e:	4a29      	ldr	r2, [pc, #164]	; (21cf4 <handle_at_icmp_ping+0x1f4>)
		LOG_ERR("getaddrinfo(dest) error: %d", st);
   21c50:	4601      	mov	r1, r0
   21c52:	1ad2      	subs	r2, r2, r3
   21c54:	08d2      	lsrs	r2, r2, #3
   21c56:	0192      	lsls	r2, r2, #6
   21c58:	f042 0201 	orr.w	r2, r2, #1
   21c5c:	482e      	ldr	r0, [pc, #184]	; (21d18 <handle_at_icmp_ping+0x218>)
   21c5e:	f014 f9ee 	bl	3603e <log_1>
		sprintf(rsp_buf, "Cannot resolve remote host\r\n");
   21c62:	492e      	ldr	r1, [pc, #184]	; (21d1c <handle_at_icmp_ping+0x21c>)
   21c64:	482e      	ldr	r0, [pc, #184]	; (21d20 <handle_at_icmp_ping+0x220>)
   21c66:	f017 f8c9 	bl	38dfc <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   21c6a:	482d      	ldr	r0, [pc, #180]	; (21d20 <handle_at_icmp_ping+0x220>)
   21c6c:	f7fb fa00 	bl	1d070 <strlen>
   21c70:	4601      	mov	r1, r0
   21c72:	482b      	ldr	r0, [pc, #172]	; (21d20 <handle_at_icmp_ping+0x220>)
   21c74:	f7fc fab8 	bl	1e1e8 <rsp_send>
	zsock_freeaddrinfo(ai);
   21c78:	6828      	ldr	r0, [r5, #0]
   21c7a:	f014 fdc3 	bl	36804 <zsock_freeaddrinfo>
   21c7e:	e7d7      	b.n	21c30 <handle_at_icmp_ping+0x130>
	ping_argv.dest = res;
   21c80:	9b03      	ldr	r3, [sp, #12]
	if (ping_argv.src->ai_family != ping_argv.dest->ai_family) {
   21c82:	682a      	ldr	r2, [r5, #0]
	ping_argv.dest = res;
   21c84:	606b      	str	r3, [r5, #4]
	if (ping_argv.src->ai_family != ping_argv.dest->ai_family) {
   21c86:	6892      	ldr	r2, [r2, #8]
   21c88:	689b      	ldr	r3, [r3, #8]
   21c8a:	429a      	cmp	r2, r3
   21c8c:	d010      	beq.n	21cb0 <handle_at_icmp_ping+0x1b0>
   21c8e:	4b1a      	ldr	r3, [pc, #104]	; (21cf8 <handle_at_icmp_ping+0x1f8>)
   21c90:	4918      	ldr	r1, [pc, #96]	; (21cf4 <handle_at_icmp_ping+0x1f4>)
		LOG_ERR("Source/Destination address family error");
   21c92:	4824      	ldr	r0, [pc, #144]	; (21d24 <handle_at_icmp_ping+0x224>)
   21c94:	1ac9      	subs	r1, r1, r3
   21c96:	08c9      	lsrs	r1, r1, #3
   21c98:	0189      	lsls	r1, r1, #6
   21c9a:	f041 0101 	orr.w	r1, r1, #1
   21c9e:	f014 f9bf 	bl	36020 <log_0>
   21ca2:	6868      	ldr	r0, [r5, #4]
   21ca4:	f014 fdae 	bl	36804 <zsock_freeaddrinfo>
   21ca8:	6828      	ldr	r0, [r5, #0]
   21caa:	f014 fdab 	bl	36804 <zsock_freeaddrinfo>
		return -1;
   21cae:	e79c      	b.n	21bea <handle_at_icmp_ping+0xea>
		ping_argv.count = count;
   21cb0:	2e00      	cmp	r6, #0
   21cb2:	bf08      	it	eq
   21cb4:	2601      	moveq	r6, #1
		ping_argv.interval = interval;
   21cb6:	2f00      	cmp	r7, #0
	ping_argv.interval = 1000;	/* default 1s */
   21cb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		ping_argv.interval = interval;
   21cbc:	bf18      	it	ne
   21cbe:	463b      	movne	r3, r7
		err = ping_test_handler(url, length, timeout, count, interval);
   21cc0:	e9c5 8902 	strd	r8, r9, [r5, #8]
   21cc4:	4918      	ldr	r1, [pc, #96]	; (21d28 <handle_at_icmp_ping+0x228>)
		ping_argv.count = count;
   21cc6:	612e      	str	r6, [r5, #16]
		ping_argv.interval = interval;
   21cc8:	616b      	str	r3, [r5, #20]
   21cca:	e8d1 3fef 	ldaex	r3, [r1]
   21cce:	f043 0201 	orr.w	r2, r3, #1
   21cd2:	e8c1 2fe0 	stlex	r0, r2, [r1]
   21cd6:	2800      	cmp	r0, #0
   21cd8:	d1f7      	bne.n	21cca <handle_at_icmp_ping+0x1ca>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   21cda:	f013 0501 	ands.w	r5, r3, #1
   21cde:	f47f af19 	bne.w	21b14 <handle_at_icmp_ping+0x14>
		k_queue_append(&work_q->queue, work);
   21ce2:	4812      	ldr	r0, [pc, #72]	; (21d2c <handle_at_icmp_ping+0x22c>)
   21ce4:	3908      	subs	r1, #8
   21ce6:	f016 fb55 	bl	38394 <k_queue_append>
	return 0;
   21cea:	462c      	mov	r4, r5
		break;
   21cec:	e712      	b.n	21b14 <handle_at_icmp_ping+0x14>
   21cee:	bf00      	nop
   21cf0:	20023308 	.word	0x20023308
   21cf4:	00039ac8 	.word	0x00039ac8
   21cf8:	00039a50 	.word	0x00039a50
   21cfc:	0003b4ae 	.word	0x0003b4ae
   21d00:	200208a0 	.word	0x200208a0
   21d04:	0003ae70 	.word	0x0003ae70
   21d08:	20020bb2 	.word	0x20020bb2
   21d0c:	0003ae97 	.word	0x0003ae97
   21d10:	0003b4c9 	.word	0x0003b4c9
   21d14:	200233a4 	.word	0x200233a4
   21d18:	0003b4e4 	.word	0x0003b4e4
   21d1c:	0003b500 	.word	0x0003b500
   21d20:	200287b0 	.word	0x200287b0
   21d24:	0003b51d 	.word	0x0003b51d
   21d28:	200233a0 	.word	0x200233a0
   21d2c:	20021188 	.word	0x20021188

00021d30 <send_ping_wait_reply>:
{
   21d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	total_length = ping_argv.len + header_len + icmp_hdr_len;
   21d34:	4d9e      	ldr	r5, [pc, #632]	; (21fb0 <send_ping_wait_reply+0x280>)
{
   21d36:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
	total_length = ping_argv.len + header_len + icmp_hdr_len;
   21d3a:	68ab      	ldr	r3, [r5, #8]
	memset(ip_buf, 0x00, header_len);
   21d3c:	2400      	movs	r4, #0
	total_length = ping_argv.len + header_len + icmp_hdr_len;
   21d3e:	331c      	adds	r3, #28
   21d40:	fa1f fb83 	uxth.w	fp, r3
	ip_buf[2] = total_length >> 8;           /* Total length */
   21d44:	ba5b      	rev16	r3, r3
   21d46:	f8ad 301a 	strh.w	r3, [sp, #26]
	ip_buf[8] = 64;                          /* TTL */
   21d4a:	f44f 73a0 	mov.w	r3, #320	; 0x140
	ip_buf[0] = (4 << 4) + (header_len / 4); /* Version & header length */
   21d4e:	2245      	movs	r2, #69	; 0x45
	memset(ip_buf, 0x00, header_len);
   21d50:	e9cd 4408 	strd	r4, r4, [sp, #32]
	ip_buf[8] = 64;                          /* TTL */
   21d54:	f8ad 3020 	strh.w	r3, [sp, #32]
	sa = (struct sockaddr_in *)ping_argv.src->ai_addr;
   21d58:	682b      	ldr	r3, [r5, #0]
	memset(ip_buf, 0x00, header_len);
   21d5a:	940a      	str	r4, [sp, #40]	; 0x28
	ip_buf[1] = 0x00;                        /* Type of service */
   21d5c:	699b      	ldr	r3, [r3, #24]
	ip_buf[4] = 0x00;                        /* Identification */
   21d5e:	9407      	str	r4, [sp, #28]
   21d60:	685b      	ldr	r3, [r3, #4]
	hcs = check_ics(buffer, len);
   21d62:	2114      	movs	r1, #20
	buffer[0] = ipaddr & 0xFF;
   21d64:	9309      	str	r3, [sp, #36]	; 0x24
	sa = (struct sockaddr_in *)ping_argv.dest->ai_addr;
   21d66:	686b      	ldr	r3, [r5, #4]
	hcs = check_ics(buffer, len);
   21d68:	a806      	add	r0, sp, #24
   21d6a:	699b      	ldr	r3, [r3, #24]
	ip_buf[0] = (4 << 4) + (header_len / 4); /* Version & header length */
   21d6c:	f8ad 2018 	strh.w	r2, [sp, #24]
	setip(ip_buf+16, sa->sin_addr.s_addr);     /* Destination */
   21d70:	685b      	ldr	r3, [r3, #4]
	*ptr_hcs = 0;   /* Clear checksum before calculation */
   21d72:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
	buffer[0] = ipaddr & 0xFF;
   21d76:	930a      	str	r3, [sp, #40]	; 0x28
	hcs = check_ics(buffer, len);
   21d78:	f013 fc6c 	bl	35654 <check_ics>
	data[0] = ICMP_ECHO_REQ;                 /* Type (echo req) */
   21d7c:	2308      	movs	r3, #8
		data[i] = (i + seqnr) % 10 + '0';
   21d7e:	260a      	movs	r6, #10
	data[6] = seqnr >> 8;                   /* seqnr */
   21d80:	498c      	ldr	r1, [pc, #560]	; (21fb4 <send_ping_wait_reply+0x284>)
	data[4] = 0x00;                         /* Identifier */
   21d82:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
	data[6] = seqnr >> 8;                   /* seqnr */
   21d86:	780a      	ldrb	r2, [r1, #0]
   21d88:	4689      	mov	r9, r1
	data[7] = ++seqnr;                      /* seqr */
   21d8a:	3201      	adds	r2, #1
   21d8c:	b2d2      	uxtb	r2, r2
	data[6] = seqnr >> 8;                   /* seqnr */
   21d8e:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
	data[7] = ++seqnr;                      /* seqr */
   21d92:	700a      	strb	r2, [r1, #0]
	*ptr_hcs = hcs;
   21d94:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
	data[0] = ICMP_ECHO_REQ;                 /* Type (echo req) */
   21d98:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	data[7] = ++seqnr;                      /* seqr */
   21d9c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	for (int i = 8; i < total_length - header_len; i++) {
   21da0:	ac0d      	add	r4, sp, #52	; 0x34
   21da2:	9503      	str	r5, [sp, #12]
   21da4:	f1ab 0114 	sub.w	r1, fp, #20
   21da8:	4299      	cmp	r1, r3
   21daa:	dc40      	bgt.n	21e2e <send_ping_wait_reply+0xfe>
	*ptr_hcs = 0;   /* Clear checksum before calculation */
   21dac:	f04f 0a00 	mov.w	sl, #0
	hcs = check_ics(buffer, len);
   21db0:	a80b      	add	r0, sp, #44	; 0x2c
	*ptr_hcs = 0;   /* Clear checksum before calculation */
   21db2:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
	hcs = check_ics(buffer, len);
   21db6:	f013 fc4d 	bl	35654 <check_ics>
	*ptr_hcs = hcs;
   21dba:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
	errno = 0;
   21dbe:	f015 f836 	bl	36e2e <__errno>
	delta_t = 0;
   21dc2:	2200      	movs	r2, #0
   21dc4:	2300      	movs	r3, #0
   21dc6:	4d7c      	ldr	r5, [pc, #496]	; (21fb8 <send_ping_wait_reply+0x288>)
	errno = 0;
   21dc8:	f8c0 a000 	str.w	sl, [r0]
	delta_t = 0;
   21dcc:	e9c5 2300 	strd	r2, r3, [r5]
	return z_impl_k_uptime_ticks();
   21dd0:	f016 fcb5 	bl	3873e <z_impl_k_uptime_ticks>
   21dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21dd8:	460a      	mov	r2, r1
   21dda:	fba0 0103 	umull	r0, r1, r0, r3
   21dde:	fb03 1102 	mla	r1, r3, r2, r1
	start_t = k_uptime_get();
   21de2:	4e76      	ldr	r6, [pc, #472]	; (21fbc <send_ping_wait_reply+0x28c>)
   21de4:	0bc3      	lsrs	r3, r0, #15
   21de6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   21dea:	0bca      	lsrs	r2, r1, #15
   21dec:	e9c6 3200 	strd	r3, r2, [r6]
	fd = nrf_socket(NRF_AF_PACKET, NRF_SOCK_RAW, 0);
   21df0:	2103      	movs	r1, #3
   21df2:	4652      	mov	r2, sl
   21df4:	2005      	movs	r0, #5
   21df6:	f00f f81f 	bl	30e38 <nrf_socket>
	if (fd < 0) {
   21dfa:	4c71      	ldr	r4, [pc, #452]	; (21fc0 <send_ping_wait_reply+0x290>)
   21dfc:	4b71      	ldr	r3, [pc, #452]	; (21fc4 <send_ping_wait_reply+0x294>)
   21dfe:	f1b0 0800 	subs.w	r8, r0, #0
   21e02:	eba4 0403 	sub.w	r4, r4, r3
   21e06:	462f      	mov	r7, r5
   21e08:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   21e0c:	da19      	bge.n	21e42 <send_ping_wait_reply+0x112>
		LOG_ERR("socket() failed: (%d)", -errno);
   21e0e:	f015 f80e 	bl	36e2e <__errno>
   21e12:	01a4      	lsls	r4, r4, #6
   21e14:	6801      	ldr	r1, [r0, #0]
   21e16:	f044 0401 	orr.w	r4, r4, #1
   21e1a:	486b      	ldr	r0, [pc, #428]	; (21fc8 <send_ping_wait_reply+0x298>)
   21e1c:	4622      	mov	r2, r4
   21e1e:	4249      	negs	r1, r1
   21e20:	f014 f90d 	bl	3603e <log_1>
		return (uint32_t)delta_t;
   21e24:	6828      	ldr	r0, [r5, #0]
}
   21e26:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   21e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		data[i] = (i + seqnr) % 10 + '0';
   21e2e:	18d7      	adds	r7, r2, r3
   21e30:	fbb7 f0f6 	udiv	r0, r7, r6
   21e34:	fb06 7010 	mls	r0, r6, r0, r7
   21e38:	3030      	adds	r0, #48	; 0x30
   21e3a:	f804 0b01 	strb.w	r0, [r4], #1
	for (int i = 8; i < total_length - header_len; i++) {
   21e3e:	3301      	adds	r3, #1
   21e40:	e7b2      	b.n	21da8 <send_ping_wait_reply+0x78>
	ret = nrf_send(fd, ip_buf, total_length, 0);
   21e42:	4653      	mov	r3, sl
   21e44:	465a      	mov	r2, fp
   21e46:	a906      	add	r1, sp, #24
   21e48:	f00f f832 	bl	30eb0 <nrf_send>
	if (ret <= 0) {
   21e4c:	2800      	cmp	r0, #0
   21e4e:	dc0f      	bgt.n	21e70 <send_ping_wait_reply+0x140>
		LOG_ERR("nrf_send() failed: (%d)", -errno);
   21e50:	f014 ffed 	bl	36e2e <__errno>
   21e54:	01a4      	lsls	r4, r4, #6
   21e56:	6801      	ldr	r1, [r0, #0]
   21e58:	f044 0401 	orr.w	r4, r4, #1
   21e5c:	4622      	mov	r2, r4
   21e5e:	485b      	ldr	r0, [pc, #364]	; (21fcc <send_ping_wait_reply+0x29c>)
   21e60:	4249      	negs	r1, r1
   21e62:	f014 f8ec 	bl	3603e <log_1>
	(void)nrf_close(fd);
   21e66:	4640      	mov	r0, r8
   21e68:	f00e fff8 	bl	30e5c <nrf_close>
	return (uint32_t)delta_t;
   21e6c:	6838      	ldr	r0, [r7, #0]
   21e6e:	e7da      	b.n	21e26 <send_ping_wait_reply+0xf6>
	fds[0].events = NRF_POLLIN;
   21e70:	2101      	movs	r1, #1
	ret = nrf_poll(fds, 1, ping_argv.waitms);
   21e72:	9b03      	ldr	r3, [sp, #12]
   21e74:	a804      	add	r0, sp, #16
   21e76:	68da      	ldr	r2, [r3, #12]
	fds[0].fd = fd;
   21e78:	f8cd 8010 	str.w	r8, [sp, #16]
	fds[0].events = NRF_POLLIN;
   21e7c:	f8ad 1014 	strh.w	r1, [sp, #20]
	ret = nrf_poll(fds, 1, ping_argv.waitms);
   21e80:	f00f f8ec 	bl	3105c <nrf_poll>
	if (ret <= 0) {
   21e84:	1e02      	subs	r2, r0, #0
   21e86:	dd1b      	ble.n	21ec0 <send_ping_wait_reply+0x190>
			LOG_INF("nrf_recv() wrong data (%d)", len);
   21e88:	ea4f 1a84 	mov.w	sl, r4, lsl #6
   21e8c:	f8df b160 	ldr.w	fp, [pc, #352]	; 21ff0 <send_ping_wait_reply+0x2c0>
   21e90:	f04a 0a03 	orr.w	sl, sl, #3
		len = nrf_recv(fd, ip_buf, NET_IPV4_MTU, 0);
   21e94:	2300      	movs	r3, #0
   21e96:	f44f 7210 	mov.w	r2, #576	; 0x240
   21e9a:	4640      	mov	r0, r8
   21e9c:	a906      	add	r1, sp, #24
   21e9e:	f00f f83d 	bl	30f1c <nrf_recv>
		if (len <= 0) {
   21ea2:	1e05      	subs	r5, r0, #0
   21ea4:	dc25      	bgt.n	21ef2 <send_ping_wait_reply+0x1c2>
			LOG_ERR("nrf_recv() failed: (%d) (%d)", -errno, len);
   21ea6:	f014 ffc2 	bl	36e2e <__errno>
   21eaa:	01a4      	lsls	r4, r4, #6
   21eac:	6801      	ldr	r1, [r0, #0]
   21eae:	f044 0401 	orr.w	r4, r4, #1
   21eb2:	4623      	mov	r3, r4
   21eb4:	462a      	mov	r2, r5
   21eb6:	4846      	ldr	r0, [pc, #280]	; (21fd0 <send_ping_wait_reply+0x2a0>)
   21eb8:	4249      	negs	r1, r1
   21eba:	f014 f8d7 	bl	3606c <log_2>
			goto close_end;
   21ebe:	e7d2      	b.n	21e66 <send_ping_wait_reply+0x136>
   21ec0:	9203      	str	r2, [sp, #12]
		LOG_ERR("nrf_poll() failed: (%d) (%d)", -errno, ret);
   21ec2:	f014 ffb4 	bl	36e2e <__errno>
   21ec6:	01a4      	lsls	r4, r4, #6
   21ec8:	6801      	ldr	r1, [r0, #0]
   21eca:	f044 0401 	orr.w	r4, r4, #1
   21ece:	4841      	ldr	r0, [pc, #260]	; (21fd4 <send_ping_wait_reply+0x2a4>)
   21ed0:	4249      	negs	r1, r1
   21ed2:	4623      	mov	r3, r4
   21ed4:	9a03      	ldr	r2, [sp, #12]
   21ed6:	f014 f8c9 	bl	3606c <log_2>
		sprintf(rsp_buf, "#XPING: timeout\r\n");
   21eda:	493f      	ldr	r1, [pc, #252]	; (21fd8 <send_ping_wait_reply+0x2a8>)
   21edc:	483f      	ldr	r0, [pc, #252]	; (21fdc <send_ping_wait_reply+0x2ac>)
   21ede:	f016 ff8d 	bl	38dfc <strcpy>
	rsp_send(rsp_buf, strlen(rsp_buf));
   21ee2:	483e      	ldr	r0, [pc, #248]	; (21fdc <send_ping_wait_reply+0x2ac>)
   21ee4:	f7fb f8c4 	bl	1d070 <strlen>
   21ee8:	4601      	mov	r1, r0
   21eea:	483c      	ldr	r0, [pc, #240]	; (21fdc <send_ping_wait_reply+0x2ac>)
   21eec:	f7fc f97c 	bl	1e1e8 <rsp_send>
   21ef0:	e7b9      	b.n	21e66 <send_ping_wait_reply+0x136>
		if (len < header_len) {
   21ef2:	2d13      	cmp	r5, #19
   21ef4:	dc05      	bgt.n	21f02 <send_ping_wait_reply+0x1d2>
			LOG_INF("nrf_recv() wrong data (%d)", len);
   21ef6:	4652      	mov	r2, sl
   21ef8:	4629      	mov	r1, r5
   21efa:	4658      	mov	r0, fp
   21efc:	f014 f89f 	bl	3603e <log_1>
			continue;
   21f00:	e7c8      	b.n	21e94 <send_ping_wait_reply+0x164>
		if (ip_buf[IP_PROTOCOL_POS] != ICMP) {
   21f02:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   21f06:	2b01      	cmp	r3, #1
   21f08:	d1c4      	bne.n	21e94 <send_ping_wait_reply+0x164>
   21f0a:	f016 fc18 	bl	3873e <z_impl_k_uptime_ticks>
   21f0e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   21f12:	460b      	mov	r3, r1
   21f14:	fba0 010a 	umull	r0, r1, r0, sl
   21f18:	fb0a 1103 	mla	r1, sl, r3, r1
   21f1c:	0bc2      	lsrs	r2, r0, #15
   21f1e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   21f22:	0bcb      	lsrs	r3, r1, #15
	delta = uptime - *reftime;
   21f24:	e9d6 0100 	ldrd	r0, r1, [r6]
   21f28:	ebb2 0b00 	subs.w	fp, r2, r0
   21f2c:	eb63 0101 	sbc.w	r1, r3, r1
	delta_t = k_uptime_delta(&start_t);
   21f30:	e9c7 b100 	strd	fp, r1, [r7]
	hcs = check_ics(data, len - header_len);
   21f34:	a80b      	add	r0, sp, #44	; 0x2c
   21f36:	f1a5 0114 	sub.w	r1, r5, #20
	*reftime = uptime;
   21f3a:	e9c6 2300 	strd	r2, r3, [r6]
   21f3e:	f013 fb89 	bl	35654 <check_ics>
	if (hcs != 0) {
   21f42:	4601      	mov	r1, r0
   21f44:	b150      	cbz	r0, 21f5c <send_ping_wait_reply+0x22c>
		LOG_WRN("HCS error %d", hcs);
   21f46:	01a2      	lsls	r2, r4, #6
   21f48:	4825      	ldr	r0, [pc, #148]	; (21fe0 <send_ping_wait_reply+0x2b0>)
   21f4a:	f042 0202 	orr.w	r2, r2, #2
   21f4e:	f014 f876 	bl	3603e <log_1>
		delta_t = 0;
   21f52:	2200      	movs	r2, #0
   21f54:	2300      	movs	r3, #0
   21f56:	e9c7 2300 	strd	r2, r3, [r7]
		goto close_end;
   21f5a:	e784      	b.n	21e66 <send_ping_wait_reply+0x136>
	plseqnr = data[7];
   21f5c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
	if (plseqnr != seqnr) {
   21f60:	f899 2000 	ldrb.w	r2, [r9]
   21f64:	4290      	cmp	r0, r2
   21f66:	d007      	beq.n	21f78 <send_ping_wait_reply+0x248>
		LOG_WRN("error sequence numbers %d %d", plseqnr, seqnr);
   21f68:	4601      	mov	r1, r0
   21f6a:	01a3      	lsls	r3, r4, #6
   21f6c:	481d      	ldr	r0, [pc, #116]	; (21fe4 <send_ping_wait_reply+0x2b4>)
   21f6e:	f043 0302 	orr.w	r3, r3, #2
		LOG_WRN("error length %d %d", pllen, len);
   21f72:	f014 f87b 	bl	3606c <log_2>
   21f76:	e7ec      	b.n	21f52 <send_ping_wait_reply+0x222>
	pllen = (ip_buf[2] << 8) + ip_buf[3];
   21f78:	f89d 301a 	ldrb.w	r3, [sp, #26]
   21f7c:	f89d 601b 	ldrb.w	r6, [sp, #27]
   21f80:	eb06 2603 	add.w	r6, r6, r3, lsl #8
	if (pllen != len) {
   21f84:	42ae      	cmp	r6, r5
   21f86:	d006      	beq.n	21f96 <send_ping_wait_reply+0x266>
		LOG_WRN("error length %d %d", pllen, len);
   21f88:	01a3      	lsls	r3, r4, #6
   21f8a:	462a      	mov	r2, r5
   21f8c:	4631      	mov	r1, r6
   21f8e:	4816      	ldr	r0, [pc, #88]	; (21fe8 <send_ping_wait_reply+0x2b8>)
   21f90:	f043 0302 	orr.w	r3, r3, #2
   21f94:	e7ed      	b.n	21f72 <send_ping_wait_reply+0x242>
	sprintf(rsp_buf, "#XPING: %d.%03d\r\n",
   21f96:	fbbb f2fa 	udiv	r2, fp, sl
   21f9a:	fb0a b312 	mls	r3, sl, r2, fp
   21f9e:	480f      	ldr	r0, [pc, #60]	; (21fdc <send_ping_wait_reply+0x2ac>)
   21fa0:	e9cd 2300 	strd	r2, r3, [sp]
   21fa4:	f640 228c 	movw	r2, #2700	; 0xa8c
   21fa8:	4b10      	ldr	r3, [pc, #64]	; (21fec <send_ping_wait_reply+0x2bc>)
   21faa:	f016 ff00 	bl	38dae <__sprintf_chk>
   21fae:	e798      	b.n	21ee2 <send_ping_wait_reply+0x1b2>
   21fb0:	200233a4 	.word	0x200233a4
   21fb4:	2002b79d 	.word	0x2002b79d
   21fb8:	200213f8 	.word	0x200213f8
   21fbc:	20021400 	.word	0x20021400
   21fc0:	00039ac8 	.word	0x00039ac8
   21fc4:	00039a50 	.word	0x00039a50
   21fc8:	0003b545 	.word	0x0003b545
   21fcc:	0003b55b 	.word	0x0003b55b
   21fd0:	0003b5a2 	.word	0x0003b5a2
   21fd4:	0003b573 	.word	0x0003b573
   21fd8:	0003b590 	.word	0x0003b590
   21fdc:	200287b0 	.word	0x200287b0
   21fe0:	0003b5da 	.word	0x0003b5da
   21fe4:	0003b5e7 	.word	0x0003b5e7
   21fe8:	0003b604 	.word	0x0003b604
   21fec:	0003b617 	.word	0x0003b617
   21ff0:	0003b5bf 	.word	0x0003b5bf

00021ff4 <ping_task>:
{
   21ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < ping_argv.count; i++) {
   21ff8:	2700      	movs	r7, #0
   21ffa:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
	uint32_t count = 0;
   21ffe:	463e      	mov	r6, r7
	uint32_t sum = 0;
   22000:	463c      	mov	r4, r7
	struct addrinfo *si = ping_argv.src;
   22002:	4d27      	ldr	r5, [pc, #156]	; (220a0 <ping_task+0xac>)
	struct addrinfo *di = ping_argv.dest;
   22004:	e9d5 9800 	ldrd	r9, r8, [r5]
	for (int i = 0; i < ping_argv.count; i++) {
   22008:	692b      	ldr	r3, [r5, #16]
   2200a:	42bb      	cmp	r3, r7
   2200c:	dc2f      	bgt.n	2206e <ping_task+0x7a>
	if (count > 1) {
   2200e:	2e01      	cmp	r6, #1
   22010:	d919      	bls.n	22046 <ping_task+0x52>
		uint32_t avg = (sum + count/2) / count;
   22012:	eb04 0456 	add.w	r4, r4, r6, lsr #1
   22016:	fbb4 f6f6 	udiv	r6, r4, r6
		int avg_f = avg % 1000;
   2201a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2201e:	fbb6 f3f4 	udiv	r3, r6, r4
   22022:	fb04 6613 	mls	r6, r4, r3, r6
		sprintf(rsp_buf, "#XPING: average %d.%03d\r\n", avg_s, avg_f);
   22026:	2100      	movs	r1, #0
   22028:	f640 228c 	movw	r2, #2700	; 0xa8c
   2202c:	e9cd 3600 	strd	r3, r6, [sp]
   22030:	481c      	ldr	r0, [pc, #112]	; (220a4 <ping_task+0xb0>)
   22032:	4b1d      	ldr	r3, [pc, #116]	; (220a8 <ping_task+0xb4>)
   22034:	f016 febb 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   22038:	481a      	ldr	r0, [pc, #104]	; (220a4 <ping_task+0xb0>)
   2203a:	f7fb f819 	bl	1d070 <strlen>
   2203e:	4601      	mov	r1, r0
   22040:	4818      	ldr	r0, [pc, #96]	; (220a4 <ping_task+0xb0>)
   22042:	f7fc f8d1 	bl	1e1e8 <rsp_send>
   22046:	4648      	mov	r0, r9
   22048:	f014 fbdc 	bl	36804 <zsock_freeaddrinfo>
   2204c:	4640      	mov	r0, r8
   2204e:	f014 fbd9 	bl	36804 <zsock_freeaddrinfo>
	sprintf(rsp_buf, "OK\r\n");
   22052:	4916      	ldr	r1, [pc, #88]	; (220ac <ping_task+0xb8>)
   22054:	4813      	ldr	r0, [pc, #76]	; (220a4 <ping_task+0xb0>)
   22056:	f016 fed1 	bl	38dfc <strcpy>
	rsp_send(rsp_buf, strlen(rsp_buf));
   2205a:	4812      	ldr	r0, [pc, #72]	; (220a4 <ping_task+0xb0>)
   2205c:	f7fb f808 	bl	1d070 <strlen>
   22060:	4601      	mov	r1, r0
   22062:	4810      	ldr	r0, [pc, #64]	; (220a4 <ping_task+0xb0>)
}
   22064:	b003      	add	sp, #12
   22066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rsp_send(rsp_buf, strlen(rsp_buf));
   2206a:	f7fc b8bd 	b.w	1e1e8 <rsp_send>
		uint32_t ping_t = send_ping_wait_reply();
   2206e:	f7ff fe5f 	bl	21d30 <send_ping_wait_reply>
		if (ping_t > 0)  {
   22072:	b108      	cbz	r0, 22078 <ping_task+0x84>
			count++;
   22074:	3601      	adds	r6, #1
			sum += ping_t;
   22076:	4404      	add	r4, r0
   22078:	f240 3be7 	movw	fp, #999	; 0x3e7
   2207c:	f04f 0c00 	mov.w	ip, #0
		k_sleep(K_MSEC(ping_argv.interval));
   22080:	696b      	ldr	r3, [r5, #20]
   22082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22086:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2208a:	fbca bc01 	smlal	fp, ip, sl, r1
   2208e:	2300      	movs	r3, #0
   22090:	4658      	mov	r0, fp
   22092:	4661      	mov	r1, ip
   22094:	f7fa fb90 	bl	1c7b8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   22098:	f011 fedc 	bl	33e54 <z_impl_k_sleep>
	for (int i = 0; i < ping_argv.count; i++) {
   2209c:	3701      	adds	r7, #1
   2209e:	e7b3      	b.n	22008 <ping_task+0x14>
   220a0:	200233a4 	.word	0x200233a4
   220a4:	200287b0 	.word	0x200287b0
   220a8:	0003b629 	.word	0x0003b629
   220ac:	0003a94a 	.word	0x0003a94a

000220b0 <slm_at_icmp_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_icmp_parse(const char *at_cmd)
{
   220b0:	b510      	push	{r4, lr}
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_ICMP_MAX; i++) {
		if (slm_util_cmd_casecmp(at_cmd, icmp_at_list[i].string)) {
   220b2:	4911      	ldr	r1, [pc, #68]	; (220f8 <slm_at_icmp_parse+0x48>)
{
   220b4:	4604      	mov	r4, r0
		if (slm_util_cmd_casecmp(at_cmd, icmp_at_list[i].string)) {
   220b6:	f7fb ff31 	bl	1df1c <slm_util_cmd_casecmp>
   220ba:	b1d0      	cbz	r0, 220f2 <slm_at_icmp_parse+0x42>
			ret = at_parser_params_from_str(at_cmd, NULL,
   220bc:	2100      	movs	r1, #0
   220be:	4620      	mov	r0, r4
   220c0:	4a0e      	ldr	r2, [pc, #56]	; (220fc <slm_at_icmp_parse+0x4c>)
   220c2:	f015 fe5b 	bl	37d7c <at_parser_params_from_str>
						&at_param_list);
			if (ret < 0) {
   220c6:	1e01      	subs	r1, r0, #0
   220c8:	da0c      	bge.n	220e4 <slm_at_icmp_parse+0x34>
   220ca:	4b0d      	ldr	r3, [pc, #52]	; (22100 <slm_at_icmp_parse+0x50>)
   220cc:	4a0d      	ldr	r2, [pc, #52]	; (22104 <slm_at_icmp_parse+0x54>)
				LOG_ERR("Failed to parse AT command %d", ret);
   220ce:	480e      	ldr	r0, [pc, #56]	; (22108 <slm_at_icmp_parse+0x58>)
   220d0:	1ad2      	subs	r2, r2, r3
   220d2:	08d2      	lsrs	r2, r2, #3
   220d4:	0192      	lsls	r2, r2, #6
   220d6:	f042 0201 	orr.w	r2, r2, #1
   220da:	f013 ffb0 	bl	3603e <log_1>
				return -EINVAL;
   220de:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
   220e2:	bd10      	pop	{r4, pc}
			type = at_parser_cmd_type_get(at_cmd);
   220e4:	4620      	mov	r0, r4
   220e6:	f015 fe4c 	bl	37d82 <at_parser_cmd_type_get>
}
   220ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			ret = icmp_at_list[i].handler(type);
   220ee:	f7ff bd07 	b.w	21b00 <handle_at_icmp_ping>
	int ret = -ENOENT;
   220f2:	f06f 0001 	mvn.w	r0, #1
   220f6:	e7f4      	b.n	220e2 <slm_at_icmp_parse+0x32>
   220f8:	0003b643 	.word	0x0003b643
   220fc:	20023308 	.word	0x20023308
   22100:	00039a50 	.word	0x00039a50
   22104:	00039ac8 	.word	0x00039ac8
   22108:	0003a95b 	.word	0x0003a95b

0002210c <slm_at_icmp_clac>:

/**@brief API to list ICMP AT commands
 */
void slm_at_icmp_clac(void)
{
   2210c:	b513      	push	{r0, r1, r4, lr}
	for (int i = 0; i < AT_ICMP_MAX; i++) {
		sprintf(rsp_buf, "%s\r\n", icmp_at_list[i].string);
   2210e:	4b0a      	ldr	r3, [pc, #40]	; (22138 <slm_at_icmp_clac+0x2c>)
   22110:	4c0a      	ldr	r4, [pc, #40]	; (2213c <slm_at_icmp_clac+0x30>)
   22112:	f640 228c 	movw	r2, #2700	; 0xa8c
   22116:	2100      	movs	r1, #0
   22118:	9300      	str	r3, [sp, #0]
   2211a:	4620      	mov	r0, r4
   2211c:	4b08      	ldr	r3, [pc, #32]	; (22140 <slm_at_icmp_clac+0x34>)
   2211e:	f016 fe46 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   22122:	4620      	mov	r0, r4
   22124:	f7fa ffa4 	bl	1d070 <strlen>
   22128:	4601      	mov	r1, r0
   2212a:	4620      	mov	r0, r4
	}
}
   2212c:	b002      	add	sp, #8
   2212e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rsp_send(rsp_buf, strlen(rsp_buf));
   22132:	f7fc b859 	b.w	1e1e8 <rsp_send>
   22136:	bf00      	nop
   22138:	0003b643 	.word	0x0003b643
   2213c:	200287b0 	.word	0x200287b0
   22140:	0003ab54 	.word	0x0003ab54

00022144 <slm_at_icmp_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22144:	2000      	movs	r0, #0
   22146:	4b03      	ldr	r3, [pc, #12]	; (22154 <slm_at_icmp_init+0x10>)
   22148:	4a03      	ldr	r2, [pc, #12]	; (22158 <slm_at_icmp_init+0x14>)
   2214a:	6018      	str	r0, [r3, #0]
   2214c:	e9c3 2001 	strd	r2, r0, [r3, #4]
 */
int slm_at_icmp_init(void)
{
	k_work_init(&my_work, ping_task);
	return 0;
}
   22150:	4770      	bx	lr
   22152:	bf00      	nop
   22154:	20023398 	.word	0x20023398
   22158:	00021ff5 	.word	0x00021ff5

0002215c <fota_dl_handler>:
	return ret;
}
#endif

static void fota_dl_handler(const struct fota_download_evt *evt)
{
   2215c:	b507      	push	{r0, r1, r2, lr}
   2215e:	7803      	ldrb	r3, [r0, #0]
   22160:	2b04      	cmp	r3, #4
   22162:	d834      	bhi.n	221ce <fota_dl_handler+0x72>
   22164:	e8df f003 	tbb	[pc, r3]
   22168:	281b1603 	.word	0x281b1603
   2216c:	31          	.byte	0x31
   2216d:	00          	.byte	0x00
	switch (evt->id) {
	case FOTA_DOWNLOAD_EVT_PROGRESS:
		sprintf(rsp_buf, "#XFOTA: %d%% downloaded\r\n",
   2216e:	6843      	ldr	r3, [r0, #4]
   22170:	f640 228c 	movw	r2, #2700	; 0xa8c
   22174:	9300      	str	r3, [sp, #0]
   22176:	2100      	movs	r1, #0
   22178:	4b16      	ldr	r3, [pc, #88]	; (221d4 <fota_dl_handler+0x78>)
   2217a:	4817      	ldr	r0, [pc, #92]	; (221d8 <fota_dl_handler+0x7c>)
   2217c:	f016 fe17 	bl	38dae <__sprintf_chk>
	case FOTA_DOWNLOAD_EVT_ERASE_DONE:
		LOG_INF("FOTA_DOWNLOAD_EVT_ERASE_DONE");
		break;
	case FOTA_DOWNLOAD_EVT_ERROR:
		sprintf(rsp_buf, "#XFOTA: download error.\r\n");
		rsp_send(rsp_buf, strlen(rsp_buf));
   22180:	4815      	ldr	r0, [pc, #84]	; (221d8 <fota_dl_handler+0x7c>)
   22182:	f7fa ff75 	bl	1d070 <strlen>
   22186:	4601      	mov	r1, r0
   22188:	4813      	ldr	r0, [pc, #76]	; (221d8 <fota_dl_handler+0x7c>)
		break;

	default:
		break;
	}
}
   2218a:	b003      	add	sp, #12
   2218c:	f85d eb04 	ldr.w	lr, [sp], #4
		rsp_send(rsp_buf, strlen(rsp_buf));
   22190:	f7fc b82a 	b.w	1e1e8 <rsp_send>
		sprintf(rsp_buf, "#XFOTA: downloaded, reset to apply.\r\n");
   22194:	4911      	ldr	r1, [pc, #68]	; (221dc <fota_dl_handler+0x80>)
		sprintf(rsp_buf, "#XFOTA: download error.\r\n");
   22196:	4810      	ldr	r0, [pc, #64]	; (221d8 <fota_dl_handler+0x7c>)
   22198:	f016 fe30 	bl	38dfc <strcpy>
   2219c:	e7f0      	b.n	22180 <fota_dl_handler+0x24>
   2219e:	4910      	ldr	r1, [pc, #64]	; (221e0 <fota_dl_handler+0x84>)
   221a0:	4b10      	ldr	r3, [pc, #64]	; (221e4 <fota_dl_handler+0x88>)
		LOG_INF("FOTA_DOWNLOAD_EVT_ERASE_PENDING");
   221a2:	4811      	ldr	r0, [pc, #68]	; (221e8 <fota_dl_handler+0x8c>)
   221a4:	1ac9      	subs	r1, r1, r3
   221a6:	08c9      	lsrs	r1, r1, #3
   221a8:	0189      	lsls	r1, r1, #6
   221aa:	f041 0103 	orr.w	r1, r1, #3
}
   221ae:	b003      	add	sp, #12
   221b0:	f85d eb04 	ldr.w	lr, [sp], #4
		LOG_INF("FOTA_DOWNLOAD_EVT_ERASE_DONE");
   221b4:	f013 bf34 	b.w	36020 <log_0>
   221b8:	4909      	ldr	r1, [pc, #36]	; (221e0 <fota_dl_handler+0x84>)
   221ba:	4b0a      	ldr	r3, [pc, #40]	; (221e4 <fota_dl_handler+0x88>)
   221bc:	480b      	ldr	r0, [pc, #44]	; (221ec <fota_dl_handler+0x90>)
   221be:	1ac9      	subs	r1, r1, r3
   221c0:	08c9      	lsrs	r1, r1, #3
   221c2:	0189      	lsls	r1, r1, #6
   221c4:	f041 0103 	orr.w	r1, r1, #3
   221c8:	e7f1      	b.n	221ae <fota_dl_handler+0x52>
		sprintf(rsp_buf, "#XFOTA: download error.\r\n");
   221ca:	4909      	ldr	r1, [pc, #36]	; (221f0 <fota_dl_handler+0x94>)
   221cc:	e7e3      	b.n	22196 <fota_dl_handler+0x3a>
}
   221ce:	b003      	add	sp, #12
   221d0:	f85d fb04 	ldr.w	pc, [sp], #4
   221d4:	0003b651 	.word	0x0003b651
   221d8:	200287b0 	.word	0x200287b0
   221dc:	0003b66b 	.word	0x0003b66b
   221e0:	00039ab8 	.word	0x00039ab8
   221e4:	00039a50 	.word	0x00039a50
   221e8:	0003b691 	.word	0x0003b691
   221ec:	0003b6b1 	.word	0x0003b6b1
   221f0:	0003b6ce 	.word	0x0003b6ce

000221f4 <do_fota_start.isra.0>:
static int do_fota_start(int op, const char *file_uri, int sec_tag,
   221f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221f8:	4605      	mov	r5, r0
   221fa:	b0bc      	sub	sp, #240	; 0xf0
	http_parser_url_init(&parser);
   221fc:	a804      	add	r0, sp, #16
static int do_fota_start(int op, const char *file_uri, int sec_tag,
   221fe:	460e      	mov	r6, r1
   22200:	4690      	mov	r8, r2
	http_parser_url_init(&parser);
   22202:	f014 ff3d 	bl	37080 <http_parser_url_init>
	ret = http_parser_parse_url(file_uri, strlen(file_uri), 0, &parser);
   22206:	4628      	mov	r0, r5
   22208:	f7fa ff32 	bl	1d070 <strlen>
   2220c:	2200      	movs	r2, #0
   2220e:	4601      	mov	r1, r0
   22210:	ab04      	add	r3, sp, #16
   22212:	4628      	mov	r0, r5
   22214:	f003 fefc 	bl	26010 <http_parser_parse_url>
	if (ret) {
   22218:	4604      	mov	r4, r0
   2221a:	b178      	cbz	r0, 2223c <do_fota_start.isra.0+0x48>
   2221c:	493a      	ldr	r1, [pc, #232]	; (22308 <do_fota_start.isra.0+0x114>)
   2221e:	4b3b      	ldr	r3, [pc, #236]	; (2230c <do_fota_start.isra.0+0x118>)
		LOG_ERR("Parse URL error");
   22220:	483b      	ldr	r0, [pc, #236]	; (22310 <do_fota_start.isra.0+0x11c>)
   22222:	1ac9      	subs	r1, r1, r3
   22224:	08c9      	lsrs	r1, r1, #3
   22226:	0189      	lsls	r1, r1, #6
   22228:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Parse schema error");
   2222c:	f013 fef8 	bl	36020 <log_0>
		return -EINVAL;
   22230:	f06f 0415 	mvn.w	r4, #21
}
   22234:	4620      	mov	r0, r4
   22236:	b03c      	add	sp, #240	; 0xf0
   22238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (parser.field_set & (1 << UF_SCHEMA)) {
   2223c:	f8bd 7010 	ldrh.w	r7, [sp, #16]
	memset(schema, 0x00, 8);
   22240:	e9cd 0002 	strd	r0, r0, [sp, #8]
	if (parser.field_set & (1 << UF_SCHEMA)) {
   22244:	07f9      	lsls	r1, r7, #31
   22246:	d519      	bpl.n	2227c <do_fota_start.isra.0+0x88>
		strncpy(schema,
   22248:	2308      	movs	r3, #8
   2224a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   2224e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   22252:	4429      	add	r1, r5
   22254:	eb0d 0003 	add.w	r0, sp, r3
   22258:	f016 fdfd 	bl	38e56 <__strncpy_chk>
	memset(path, 0x00, URI_PATH_MAX);
   2225c:	2280      	movs	r2, #128	; 0x80
   2225e:	4621      	mov	r1, r4
   22260:	a81c      	add	r0, sp, #112	; 0x70
   22262:	f016 fc8c 	bl	38b7e <memset>
	if (parser.field_set & (1 << UF_PATH)) {
   22266:	073a      	lsls	r2, r7, #28
   22268:	d411      	bmi.n	2228e <do_fota_start.isra.0+0x9a>
   2226a:	4927      	ldr	r1, [pc, #156]	; (22308 <do_fota_start.isra.0+0x114>)
   2226c:	4b27      	ldr	r3, [pc, #156]	; (2230c <do_fota_start.isra.0+0x118>)
		LOG_ERR("Parse path error");
   2226e:	4829      	ldr	r0, [pc, #164]	; (22314 <do_fota_start.isra.0+0x120>)
   22270:	1ac9      	subs	r1, r1, r3
   22272:	08c9      	lsrs	r1, r1, #3
   22274:	0189      	lsls	r1, r1, #6
   22276:	f041 0101 	orr.w	r1, r1, #1
   2227a:	e7d7      	b.n	2222c <do_fota_start.isra.0+0x38>
   2227c:	4922      	ldr	r1, [pc, #136]	; (22308 <do_fota_start.isra.0+0x114>)
   2227e:	4b23      	ldr	r3, [pc, #140]	; (2230c <do_fota_start.isra.0+0x118>)
		LOG_ERR("Parse schema error");
   22280:	4825      	ldr	r0, [pc, #148]	; (22318 <do_fota_start.isra.0+0x124>)
   22282:	1ac9      	subs	r1, r1, r3
   22284:	08c9      	lsrs	r1, r1, #3
   22286:	0189      	lsls	r1, r1, #6
   22288:	f041 0101 	orr.w	r1, r1, #1
   2228c:	e7ce      	b.n	2222c <do_fota_start.isra.0+0x38>
		strncpy(path,
   2228e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   22292:	2380      	movs	r3, #128	; 0x80
   22294:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   22298:	4429      	add	r1, r5
   2229a:	a81c      	add	r0, sp, #112	; 0x70
   2229c:	f016 fddb 	bl	38e56 <__strncpy_chk>
	memset(hostname, 0x00, URI_HOST_MAX);
   222a0:	2240      	movs	r2, #64	; 0x40
   222a2:	4621      	mov	r1, r4
   222a4:	a80c      	add	r0, sp, #48	; 0x30
   222a6:	f016 fc6a 	bl	38b7e <memset>
	strncpy(hostname, file_uri,
   222aa:	4628      	mov	r0, r5
   222ac:	f7fa fee0 	bl	1d070 <strlen>
   222b0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   222b4:	4629      	mov	r1, r5
   222b6:	1a82      	subs	r2, r0, r2
   222b8:	2340      	movs	r3, #64	; 0x40
   222ba:	a80c      	add	r0, sp, #48	; 0x30
   222bc:	f016 fdcb 	bl	38e56 <__strncpy_chk>
	if (slm_util_cmd_casecmp(schema, SCHEMA_HTTPS)) {
   222c0:	4916      	ldr	r1, [pc, #88]	; (2231c <do_fota_start.isra.0+0x128>)
   222c2:	a802      	add	r0, sp, #8
   222c4:	f7fb fe2a 	bl	1df1c <slm_util_cmd_casecmp>
   222c8:	b950      	cbnz	r0, 222e0 <do_fota_start.isra.0+0xec>
	} else if (slm_util_cmd_casecmp(schema, SCHEMA_HTTP)) {
   222ca:	4915      	ldr	r1, [pc, #84]	; (22320 <do_fota_start.isra.0+0x12c>)
   222cc:	a802      	add	r0, sp, #8
   222ce:	f7fb fe25 	bl	1df1c <slm_util_cmd_casecmp>
   222d2:	2800      	cmp	r0, #0
   222d4:	d0ae      	beq.n	22234 <do_fota_start.isra.0+0x40>
		ret = fota_download_start(hostname, path, -1, apn, 0);
   222d6:	4643      	mov	r3, r8
   222d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   222dc:	9400      	str	r4, [sp, #0]
   222de:	e00d      	b.n	222fc <do_fota_start.isra.0+0x108>
		if (sec_tag == INVALID_SEC_TAG) {
   222e0:	1c73      	adds	r3, r6, #1
   222e2:	d108      	bne.n	222f6 <do_fota_start.isra.0+0x102>
   222e4:	4908      	ldr	r1, [pc, #32]	; (22308 <do_fota_start.isra.0+0x114>)
   222e6:	4b09      	ldr	r3, [pc, #36]	; (2230c <do_fota_start.isra.0+0x118>)
			LOG_ERR("Missing sec_tag");
   222e8:	480e      	ldr	r0, [pc, #56]	; (22324 <do_fota_start.isra.0+0x130>)
   222ea:	1ac9      	subs	r1, r1, r3
   222ec:	08c9      	lsrs	r1, r1, #3
   222ee:	0189      	lsls	r1, r1, #6
   222f0:	f041 0101 	orr.w	r1, r1, #1
   222f4:	e79a      	b.n	2222c <do_fota_start.isra.0+0x38>
		ret = fota_download_start(hostname, path, sec_tag, apn, 0);
   222f6:	4643      	mov	r3, r8
   222f8:	4632      	mov	r2, r6
   222fa:	9400      	str	r4, [sp, #0]
		ret = fota_download_start(hostname, path, -1, apn, 0);
   222fc:	a91c      	add	r1, sp, #112	; 0x70
   222fe:	a80c      	add	r0, sp, #48	; 0x30
   22300:	f007 fcb8 	bl	29c74 <fota_download_start>
   22304:	4604      	mov	r4, r0
   22306:	e795      	b.n	22234 <do_fota_start.isra.0+0x40>
   22308:	00039ab8 	.word	0x00039ab8
   2230c:	00039a50 	.word	0x00039a50
   22310:	0003b6e8 	.word	0x0003b6e8
   22314:	0003b711 	.word	0x0003b711
   22318:	0003b6f8 	.word	0x0003b6f8
   2231c:	0003b70b 	.word	0x0003b70b
   22320:	0003b732 	.word	0x0003b732
   22324:	0003b722 	.word	0x0003b722

00022328 <handle_at_fota>:
 *  AT#XFOTA=<op>,<file_uri>[,<sec_tag>[,<apn>]]
 *  AT#XFOTA? TEST command not supported
 *  AT#XFOTA=?
 */
static int handle_at_fota(enum at_cmd_type cmd_type)
{
   22328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t op;
#if FOTA_FUTURE_FEATURE
	static bool paused;
#endif

	switch (cmd_type) {
   2232c:	2801      	cmp	r0, #1
{
   2232e:	4606      	mov	r6, r0
   22330:	b0ce      	sub	sp, #312	; 0x138
	switch (cmd_type) {
   22332:	d005      	beq.n	22340 <handle_at_fota+0x18>
   22334:	2803      	cmp	r0, #3
   22336:	f000 80a8 	beq.w	2248a <handle_at_fota+0x162>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&at_param_list) <= 1) {
			return -EINVAL;
   2233a:	f06f 0415 	mvn.w	r4, #21
   2233e:	e033      	b.n	223a8 <handle_at_fota+0x80>
		if (at_params_valid_count_get(&at_param_list) <= 1) {
   22340:	485b      	ldr	r0, [pc, #364]	; (224b0 <handle_at_fota+0x188>)
   22342:	f015 fe63 	bl	3800c <at_params_valid_count_get>
   22346:	2801      	cmp	r0, #1
   22348:	d9f7      	bls.n	2233a <handle_at_fota+0x12>
		}
		err = at_params_short_get(&at_param_list, 1, &op);
   2234a:	4631      	mov	r1, r6
   2234c:	4858      	ldr	r0, [pc, #352]	; (224b0 <handle_at_fota+0x188>)
   2234e:	f10d 020e 	add.w	r2, sp, #14
   22352:	f015 fe13 	bl	37f7c <at_params_short_get>
		if (err < 0) {
   22356:	1e04      	subs	r4, r0, #0
   22358:	db26      	blt.n	223a8 <handle_at_fota+0x80>
			return err;
		}
		if (op == AT_FOTA_ERASE) {
   2235a:	f8bd 800e 	ldrh.w	r8, [sp, #14]
   2235e:	f1b8 0f00 	cmp.w	r8, #0
   22362:	d155      	bne.n	22410 <handle_at_fota+0xe8>
	nrf_socklen_t len = sizeof(offset);
   22364:	2304      	movs	r3, #4
   22366:	4a53      	ldr	r2, [pc, #332]	; (224b4 <handle_at_fota+0x18c>)
   22368:	4d53      	ldr	r5, [pc, #332]	; (224b8 <handle_at_fota+0x190>)
	LOG_INF("Erasing scratch");
   2236a:	4854      	ldr	r0, [pc, #336]	; (224bc <handle_at_fota+0x194>)
   2236c:	1aad      	subs	r5, r5, r2
   2236e:	08ed      	lsrs	r5, r5, #3
   22370:	01ad      	lsls	r5, r5, #6
   22372:	f045 0103 	orr.w	r1, r5, #3
	nrf_socklen_t len = sizeof(offset);
   22376:	930e      	str	r3, [sp, #56]	; 0x38
	LOG_INF("Erasing scratch");
   22378:	f013 fe52 	bl	36020 <log_0>
	fd = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_STREAM, NRF_PROTO_DFU);
   2237c:	4631      	mov	r1, r6
   2237e:	4630      	mov	r0, r6
   22380:	f240 2203 	movw	r2, #515	; 0x203
   22384:	f00e fd58 	bl	30e38 <nrf_socket>
	if (fd < 0) {
   22388:	1e06      	subs	r6, r0, #0
	nrf_socklen_t len = sizeof(offset);
   2238a:	af0e      	add	r7, sp, #56	; 0x38
	if (fd < 0) {
   2238c:	da10      	bge.n	223b0 <handle_at_fota+0x88>
		LOG_ERR("nrf_socket error: %d", errno);
   2238e:	f014 fd4e 	bl	36e2e <__errno>
   22392:	f045 0501 	orr.w	r5, r5, #1
   22396:	6801      	ldr	r1, [r0, #0]
   22398:	462a      	mov	r2, r5
   2239a:	4849      	ldr	r0, [pc, #292]	; (224c0 <handle_at_fota+0x198>)
   2239c:	f013 fe4f 	bl	3603e <log_1>
		return -errno;
   223a0:	f014 fd45 	bl	36e2e <__errno>
   223a4:	6804      	ldr	r4, [r0, #0]
   223a6:	4264      	negs	r4, r4
	default:
		break;
	}

	return err;
}
   223a8:	4620      	mov	r0, r4
   223aa:	b04e      	add	sp, #312	; 0x138
   223ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = nrf_setsockopt(fd, NRF_SOL_DFU, NRF_SO_DFU_BACKUP_DELETE,
   223b0:	4643      	mov	r3, r8
   223b2:	2206      	movs	r2, #6
   223b4:	f240 2103 	movw	r1, #515	; 0x203
   223b8:	f8cd 8000 	str.w	r8, [sp]
   223bc:	f00e fe12 	bl	30fe4 <nrf_setsockopt>
	if (err) {
   223c0:	4604      	mov	r4, r0
   223c2:	b160      	cbz	r0, 223de <handle_at_fota+0xb6>
		LOG_ERR("nrf_setsockopt error: %d", errno);
   223c4:	f014 fd33 	bl	36e2e <__errno>
   223c8:	f045 0501 	orr.w	r5, r5, #1
   223cc:	6801      	ldr	r1, [r0, #0]
   223ce:	462a      	mov	r2, r5
   223d0:	483c      	ldr	r0, [pc, #240]	; (224c4 <handle_at_fota+0x19c>)
   223d2:	f013 fe34 	bl	3603e <log_1>
		nrf_close(fd);
   223d6:	4630      	mov	r0, r6
   223d8:	f00e fd40 	bl	30e5c <nrf_close>
   223dc:	e7e0      	b.n	223a0 <handle_at_fota+0x78>
		err = nrf_getsockopt(fd, NRF_SOL_DFU, NRF_SO_DFU_OFFSET,
   223de:	2207      	movs	r2, #7
   223e0:	f240 2103 	movw	r1, #515	; 0x203
   223e4:	4630      	mov	r0, r6
   223e6:	9700      	str	r7, [sp, #0]
   223e8:	ab06      	add	r3, sp, #24
   223ea:	f00e fe17 	bl	3101c <nrf_getsockopt>
		if (err < 0) {
   223ee:	2800      	cmp	r0, #0
   223f0:	da05      	bge.n	223fe <handle_at_fota+0xd6>
   223f2:	2100      	movs	r1, #0
   223f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   223f8:	f011 fd2c 	bl	33e54 <z_impl_k_sleep>
		err = nrf_getsockopt(fd, NRF_SOL_DFU, NRF_SO_DFU_OFFSET,
   223fc:	e7ef      	b.n	223de <handle_at_fota+0xb6>
			LOG_INF("Erase completed");
   223fe:	4832      	ldr	r0, [pc, #200]	; (224c8 <handle_at_fota+0x1a0>)
   22400:	f045 0103 	orr.w	r1, r5, #3
   22404:	f013 fe0c 	bl	36020 <log_0>
	nrf_close(fd);
   22408:	4630      	mov	r0, r6
   2240a:	f00e fd27 	bl	30e5c <nrf_close>
	return 0;
   2240e:	e7cb      	b.n	223a8 <handle_at_fota+0x80>
		} else if (op == AT_FOTA_START) {
   22410:	f1b8 0f01 	cmp.w	r8, #1
   22414:	d1c8      	bne.n	223a8 <handle_at_fota+0x80>
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   22416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (at_params_valid_count_get(&at_param_list) <= 2) {
   2241a:	4825      	ldr	r0, [pc, #148]	; (224b0 <handle_at_fota+0x188>)
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   2241c:	9305      	str	r3, [sp, #20]
			if (at_params_valid_count_get(&at_param_list) <= 2) {
   2241e:	f015 fdf5 	bl	3800c <at_params_valid_count_get>
   22422:	2802      	cmp	r0, #2
   22424:	d989      	bls.n	2233a <handle_at_fota+0x12>
			size = FILE_URI_MAX;
   22426:	f44f 7380 	mov.w	r3, #256	; 0x100
			err = at_params_string_get(&at_param_list, 2, uri,
   2242a:	ad0e      	add	r5, sp, #56	; 0x38
			size = FILE_URI_MAX;
   2242c:	9304      	str	r3, [sp, #16]
			err = at_params_string_get(&at_param_list, 2, uri,
   2242e:	462a      	mov	r2, r5
   22430:	2102      	movs	r1, #2
   22432:	481f      	ldr	r0, [pc, #124]	; (224b0 <handle_at_fota+0x188>)
   22434:	ab04      	add	r3, sp, #16
   22436:	f015 fdc6 	bl	37fc6 <at_params_string_get>
			if (err) {
   2243a:	4604      	mov	r4, r0
   2243c:	2800      	cmp	r0, #0
   2243e:	d1b3      	bne.n	223a8 <handle_at_fota+0x80>
			uri[size] = '\0';
   22440:	9b04      	ldr	r3, [sp, #16]
   22442:	54e8      	strb	r0, [r5, r3]
			if (at_params_valid_count_get(&at_param_list) > 3) {
   22444:	481a      	ldr	r0, [pc, #104]	; (224b0 <handle_at_fota+0x188>)
   22446:	f015 fde1 	bl	3800c <at_params_valid_count_get>
   2244a:	2803      	cmp	r0, #3
   2244c:	d904      	bls.n	22458 <handle_at_fota+0x130>
				at_params_int_get(&at_param_list, 3, &sec_tag);
   2244e:	2103      	movs	r1, #3
   22450:	4817      	ldr	r0, [pc, #92]	; (224b0 <handle_at_fota+0x188>)
   22452:	aa05      	add	r2, sp, #20
   22454:	f015 fda4 	bl	37fa0 <at_params_int_get>
			if (at_params_valid_count_get(&at_param_list) > 4) {
   22458:	4815      	ldr	r0, [pc, #84]	; (224b0 <handle_at_fota+0x188>)
   2245a:	f015 fdd7 	bl	3800c <at_params_valid_count_get>
   2245e:	2804      	cmp	r0, #4
   22460:	d911      	bls.n	22486 <handle_at_fota+0x15e>
				size = APN_MAX;
   22462:	2320      	movs	r3, #32
				at_params_string_get(&at_param_list, 4, apn,
   22464:	2104      	movs	r1, #4
				size = APN_MAX;
   22466:	9304      	str	r3, [sp, #16]
				at_params_string_get(&at_param_list, 4, apn,
   22468:	aa06      	add	r2, sp, #24
   2246a:	ab04      	add	r3, sp, #16
   2246c:	4810      	ldr	r0, [pc, #64]	; (224b0 <handle_at_fota+0x188>)
   2246e:	f015 fdaa 	bl	37fc6 <at_params_string_get>
				apn[size] = '\0';
   22472:	2100      	movs	r1, #0
   22474:	9b04      	ldr	r3, [sp, #16]
   22476:	aa06      	add	r2, sp, #24
   22478:	54d1      	strb	r1, [r2, r3]
				err = do_fota_start(op, uri, sec_tag, NULL);
   2247a:	4628      	mov	r0, r5
   2247c:	9905      	ldr	r1, [sp, #20]
   2247e:	f7ff feb9 	bl	221f4 <do_fota_start.isra.0>
   22482:	4604      	mov	r4, r0
   22484:	e790      	b.n	223a8 <handle_at_fota+0x80>
   22486:	2200      	movs	r2, #0
   22488:	e7f7      	b.n	2247a <handle_at_fota+0x152>
		sprintf(rsp_buf,
   2248a:	2400      	movs	r4, #0
   2248c:	2301      	movs	r3, #1
   2248e:	4621      	mov	r1, r4
   22490:	f640 228c 	movw	r2, #2700	; 0xa8c
   22494:	e9cd 4300 	strd	r4, r3, [sp]
   22498:	480c      	ldr	r0, [pc, #48]	; (224cc <handle_at_fota+0x1a4>)
   2249a:	4b0d      	ldr	r3, [pc, #52]	; (224d0 <handle_at_fota+0x1a8>)
   2249c:	f016 fc87 	bl	38dae <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   224a0:	480a      	ldr	r0, [pc, #40]	; (224cc <handle_at_fota+0x1a4>)
   224a2:	f7fa fde5 	bl	1d070 <strlen>
   224a6:	4601      	mov	r1, r0
   224a8:	4808      	ldr	r0, [pc, #32]	; (224cc <handle_at_fota+0x1a4>)
   224aa:	f7fb fe9d 	bl	1e1e8 <rsp_send>
		break;
   224ae:	e77b      	b.n	223a8 <handle_at_fota+0x80>
   224b0:	20023308 	.word	0x20023308
   224b4:	00039a50 	.word	0x00039a50
   224b8:	00039ab8 	.word	0x00039ab8
   224bc:	0003b737 	.word	0x0003b737
   224c0:	0003b747 	.word	0x0003b747
   224c4:	0003b75c 	.word	0x0003b75c
   224c8:	0003b775 	.word	0x0003b775
   224cc:	200287b0 	.word	0x200287b0
   224d0:	0003b785 	.word	0x0003b785

000224d4 <slm_at_fota_parse>:

/**@brief API to handle FOTA AT commands
 */
int slm_at_fota_parse(const char *at_cmd)
{
   224d4:	b510      	push	{r4, lr}
	int ret = -ENOENT;

	if (slm_util_cmd_casecmp(at_cmd, AT_FOTA)) {
   224d6:	4911      	ldr	r1, [pc, #68]	; (2251c <slm_at_fota_parse+0x48>)
{
   224d8:	4604      	mov	r4, r0
	if (slm_util_cmd_casecmp(at_cmd, AT_FOTA)) {
   224da:	f7fb fd1f 	bl	1df1c <slm_util_cmd_casecmp>
   224de:	b1d0      	cbz	r0, 22516 <slm_at_fota_parse+0x42>
		ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
   224e0:	2100      	movs	r1, #0
   224e2:	4620      	mov	r0, r4
   224e4:	4a0e      	ldr	r2, [pc, #56]	; (22520 <slm_at_fota_parse+0x4c>)
   224e6:	f015 fc49 	bl	37d7c <at_parser_params_from_str>
		if (ret < 0) {
   224ea:	1e01      	subs	r1, r0, #0
   224ec:	da0c      	bge.n	22508 <slm_at_fota_parse+0x34>
   224ee:	4b0d      	ldr	r3, [pc, #52]	; (22524 <slm_at_fota_parse+0x50>)
   224f0:	4a0d      	ldr	r2, [pc, #52]	; (22528 <slm_at_fota_parse+0x54>)
			LOG_ERR("Failed to parse AT command %d", ret);
   224f2:	480e      	ldr	r0, [pc, #56]	; (2252c <slm_at_fota_parse+0x58>)
   224f4:	1ad2      	subs	r2, r2, r3
   224f6:	08d2      	lsrs	r2, r2, #3
   224f8:	0192      	lsls	r2, r2, #6
   224fa:	f042 0201 	orr.w	r2, r2, #1
   224fe:	f013 fd9e 	bl	3603e <log_1>
			return -EINVAL;
   22502:	f06f 0015 	mvn.w	r0, #21
		}
		ret = handle_at_fota(at_parser_cmd_type_get(at_cmd));
	}

	return ret;
}
   22506:	bd10      	pop	{r4, pc}
		ret = handle_at_fota(at_parser_cmd_type_get(at_cmd));
   22508:	4620      	mov	r0, r4
   2250a:	f015 fc3a 	bl	37d82 <at_parser_cmd_type_get>
}
   2250e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = handle_at_fota(at_parser_cmd_type_get(at_cmd));
   22512:	f7ff bf09 	b.w	22328 <handle_at_fota>
	int ret = -ENOENT;
   22516:	f06f 0001 	mvn.w	r0, #1
   2251a:	e7f4      	b.n	22506 <slm_at_fota_parse+0x32>
   2251c:	0003b7b3 	.word	0x0003b7b3
   22520:	20023308 	.word	0x20023308
   22524:	00039a50 	.word	0x00039a50
   22528:	00039ab8 	.word	0x00039ab8
   2252c:	0003a95b 	.word	0x0003a95b

00022530 <slm_at_fota_clac>:

/**@brief API to list FOTA AT commands
 */
void slm_at_fota_clac(void)
{
   22530:	b513      	push	{r0, r1, r4, lr}
	sprintf(rsp_buf, "%s\r\n", AT_FOTA);
   22532:	4b0a      	ldr	r3, [pc, #40]	; (2255c <slm_at_fota_clac+0x2c>)
   22534:	4c0a      	ldr	r4, [pc, #40]	; (22560 <slm_at_fota_clac+0x30>)
   22536:	f640 228c 	movw	r2, #2700	; 0xa8c
   2253a:	2100      	movs	r1, #0
   2253c:	9300      	str	r3, [sp, #0]
   2253e:	4620      	mov	r0, r4
   22540:	4b08      	ldr	r3, [pc, #32]	; (22564 <slm_at_fota_clac+0x34>)
   22542:	f016 fc34 	bl	38dae <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   22546:	4620      	mov	r0, r4
   22548:	f7fa fd92 	bl	1d070 <strlen>
   2254c:	4601      	mov	r1, r0
   2254e:	4620      	mov	r0, r4
}
   22550:	b002      	add	sp, #8
   22552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rsp_send(rsp_buf, strlen(rsp_buf));
   22556:	f7fb be47 	b.w	1e1e8 <rsp_send>
   2255a:	bf00      	nop
   2255c:	0003b7b3 	.word	0x0003b7b3
   22560:	200287b0 	.word	0x200287b0
   22564:	0003ab54 	.word	0x0003ab54

00022568 <slm_at_fota_init>:

/**@brief API to initialize FOTA AT commands handler
 */
int slm_at_fota_init(void)
{
	return fota_download_init(fota_dl_handler);
   22568:	4801      	ldr	r0, [pc, #4]	; (22570 <slm_at_fota_init+0x8>)
   2256a:	f007 bbaf 	b.w	29ccc <fota_download_init>
   2256e:	bf00      	nop
   22570:	0002215d 	.word	0x0002215d

00022574 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   22574:	2807      	cmp	r0, #7
{
   22576:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   22578:	d906      	bls.n	22588 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   2257a:	f014 fc58 	bl	36e2e <__errno>
   2257e:	2309      	movs	r3, #9
   22580:	6003      	str	r3, [r0, #0]
   22582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   22586:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22588:	220c      	movs	r2, #12
   2258a:	4b05      	ldr	r3, [pc, #20]	; (225a0 <_check_fd+0x2c>)
   2258c:	fb02 3000 	mla	r0, r2, r0, r3
   22590:	3008      	adds	r0, #8
   22592:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   22596:	2b00      	cmp	r3, #0
   22598:	d0ef      	beq.n	2257a <_check_fd+0x6>
	return 0;
   2259a:	2000      	movs	r0, #0
   2259c:	e7f3      	b.n	22586 <_check_fd+0x12>
   2259e:	bf00      	nop
   225a0:	200233bc 	.word	0x200233bc

000225a4 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   225a4:	b570      	push	{r4, r5, r6, lr}
   225a6:	4604      	mov	r4, r0
   225a8:	460d      	mov	r5, r1
   225aa:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   225ac:	f7ff ffe2 	bl	22574 <_check_fd>
   225b0:	2800      	cmp	r0, #0
   225b2:	db0a      	blt.n	225ca <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   225b4:	4a08      	ldr	r2, [pc, #32]	; (225d8 <z_get_fd_obj+0x34>)
   225b6:	b155      	cbz	r5, 225ce <z_get_fd_obj+0x2a>
   225b8:	230c      	movs	r3, #12
   225ba:	fb03 2304 	mla	r3, r3, r4, r2
   225be:	685b      	ldr	r3, [r3, #4]
   225c0:	42ab      	cmp	r3, r5
   225c2:	d004      	beq.n	225ce <z_get_fd_obj+0x2a>
		errno = err;
   225c4:	f014 fc33 	bl	36e2e <__errno>
   225c8:	6006      	str	r6, [r0, #0]
		return NULL;
   225ca:	2000      	movs	r0, #0
   225cc:	e002      	b.n	225d4 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   225ce:	200c      	movs	r0, #12
   225d0:	4344      	muls	r4, r0
   225d2:	5910      	ldr	r0, [r2, r4]
}
   225d4:	bd70      	pop	{r4, r5, r6, pc}
   225d6:	bf00      	nop
   225d8:	200233bc 	.word	0x200233bc

000225dc <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   225dc:	b538      	push	{r3, r4, r5, lr}
   225de:	4605      	mov	r5, r0
   225e0:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   225e2:	f7ff ffc7 	bl	22574 <_check_fd>
   225e6:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   225e8:	bfa3      	ittte	ge
   225ea:	230c      	movge	r3, #12
   225ec:	fb03 f005 	mulge.w	r0, r3, r5
   225f0:	4a03      	ldrge	r2, [pc, #12]	; (22600 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   225f2:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   225f4:	bfa1      	itttt	ge
   225f6:	1813      	addge	r3, r2, r0
   225f8:	685b      	ldrge	r3, [r3, #4]
   225fa:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
   225fc:	5810      	ldrge	r0, [r2, r0]
}
   225fe:	bd38      	pop	{r3, r4, r5, pc}
   22600:	200233bc 	.word	0x200233bc

00022604 <z_reserve_fd>:

int z_reserve_fd(void)
{
   22604:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   22606:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   22608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2260c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22610:	4812      	ldr	r0, [pc, #72]	; (2265c <z_reserve_fd+0x58>)
   22612:	f010 ffa3 	bl	3355c <z_impl_k_mutex_lock>
   22616:	4b12      	ldr	r3, [pc, #72]	; (22660 <z_reserve_fd+0x5c>)
   22618:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   2261c:	b17a      	cbz	r2, 2263e <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   2261e:	3401      	adds	r4, #1
   22620:	2c08      	cmp	r4, #8
   22622:	f103 030c 	add.w	r3, r3, #12
   22626:	d1f7      	bne.n	22618 <z_reserve_fd+0x14>
	errno = ENFILE;
   22628:	f014 fc01 	bl	36e2e <__errno>
   2262c:	2317      	movs	r3, #23
	return -1;
   2262e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   22632:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   22634:	4809      	ldr	r0, [pc, #36]	; (2265c <z_reserve_fd+0x58>)
   22636:	f011 f809 	bl	3364c <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   2263a:	4620      	mov	r0, r4
   2263c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2263e:	e8d3 1fef 	ldaex	r1, [r3]
   22642:	3101      	adds	r1, #1
   22644:	e8c3 1fe0 	stlex	r0, r1, [r3]
   22648:	2800      	cmp	r0, #0
   2264a:	d1f8      	bne.n	2263e <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   2264c:	230c      	movs	r3, #12
   2264e:	4363      	muls	r3, r4
   22650:	4904      	ldr	r1, [pc, #16]	; (22664 <z_reserve_fd+0x60>)
   22652:	18c8      	adds	r0, r1, r3
   22654:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   22656:	6042      	str	r2, [r0, #4]
   22658:	e7ec      	b.n	22634 <z_reserve_fd+0x30>
   2265a:	bf00      	nop
   2265c:	20020780 	.word	0x20020780
   22660:	200233c4 	.word	0x200233c4
   22664:	200233bc 	.word	0x200233bc

00022668 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   22668:	230c      	movs	r3, #12
{
   2266a:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   2266c:	4358      	muls	r0, r3
   2266e:	4c02      	ldr	r4, [pc, #8]	; (22678 <z_finalize_fd+0x10>)
   22670:	1823      	adds	r3, r4, r0
   22672:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   22674:	605a      	str	r2, [r3, #4]
}
   22676:	bd10      	pop	{r4, pc}
   22678:	200233bc 	.word	0x200233bc

0002267c <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   2267c:	230c      	movs	r3, #12
   2267e:	4a0e      	ldr	r2, [pc, #56]	; (226b8 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   22680:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   22682:	fb03 2300 	mla	r3, r3, r0, r2
   22686:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22688:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   2268c:	b191      	cbz	r1, 226b4 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   2268e:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22690:	e8d3 5fef 	ldaex	r5, [r3]
   22694:	428d      	cmp	r5, r1
   22696:	d104      	bne.n	226a2 <z_free_fd+0x26>
   22698:	e8c3 4fec 	stlex	ip, r4, [r3]
   2269c:	f1bc 0f00 	cmp.w	ip, #0
   226a0:	d1f6      	bne.n	22690 <z_free_fd+0x14>
   226a2:	d1f1      	bne.n	22688 <z_free_fd+0xc>
	if (old_rc != 1) {
   226a4:	2901      	cmp	r1, #1
   226a6:	d105      	bne.n	226b4 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   226a8:	230c      	movs	r3, #12
   226aa:	4358      	muls	r0, r3
   226ac:	2300      	movs	r3, #0
   226ae:	1811      	adds	r1, r2, r0
   226b0:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   226b2:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   226b4:	bd30      	pop	{r4, r5, pc}
   226b6:	bf00      	nop
   226b8:	200233bc 	.word	0x200233bc

000226bc <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
   226bc:	4b01      	ldr	r3, [pc, #4]	; (226c4 <__printk_hook_install+0x8>)
   226be:	6018      	str	r0, [r3, #0]
}
   226c0:	4770      	bx	lr
   226c2:	bf00      	nop
   226c4:	200200e0 	.word	0x200200e0

000226c8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   226c8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   226ca:	2500      	movs	r5, #0
{
   226cc:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   226ce:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   226d2:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   226d4:	a901      	add	r1, sp, #4
   226d6:	4805      	ldr	r0, [pc, #20]	; (226ec <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   226d8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   226da:	f000 fac1 	bl	22c60 <cbvprintf>

	if (ctx.count < ctx.max) {
   226de:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   226e2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   226e4:	bfb8      	it	lt
   226e6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   226e8:	b005      	add	sp, #20
   226ea:	bd30      	pop	{r4, r5, pc}
   226ec:	00035717 	.word	0x00035717

000226f0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   226f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   226f4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   226f8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   226fa:	f019 0808 	ands.w	r8, r9, #8
{
   226fe:	4693      	mov	fp, r2
	if (processing) {
   22700:	d00e      	beq.n	22720 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
   22702:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   22704:	bf0c      	ite	eq
   22706:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   2270a:	f049 0920 	orrne.w	r9, r9, #32
   2270e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   22712:	f38b 8811 	msr	BASEPRI, fp
   22716:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   2271a:	b003      	add	sp, #12
   2271c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
   22720:	f8df a198 	ldr.w	sl, [pc, #408]	; 228bc <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22724:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   22728:	2902      	cmp	r1, #2
   2272a:	d107      	bne.n	2273c <process_event+0x4c>
			evt = process_recheck(mgr);
   2272c:	4620      	mov	r0, r4
   2272e:	f013 f81f 	bl	35770 <process_recheck>
		if (evt == EVT_NOP) {
   22732:	2800      	cmp	r0, #0
   22734:	d0ed      	beq.n	22712 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   22736:	2801      	cmp	r0, #1
   22738:	8b23      	ldrh	r3, [r4, #24]
   2273a:	d14d      	bne.n	227d8 <process_event+0xe8>
			res = mgr->last_res;
   2273c:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2273e:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   22740:	2f00      	cmp	r7, #0
   22742:	da15      	bge.n	22770 <process_event+0x80>
		*clients = mgr->clients;
   22744:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22746:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   2274a:	e9c4 8800 	strd	r8, r8, [r4]
   2274e:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   22752:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   22754:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22756:	8b21      	ldrh	r1, [r4, #24]
   22758:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2275c:	454a      	cmp	r2, r9
   2275e:	d002      	beq.n	22766 <process_event+0x76>
		if (do_monitors
   22760:	68a3      	ldr	r3, [r4, #8]
   22762:	2b00      	cmp	r3, #0
   22764:	d159      	bne.n	2281a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   22766:	b90d      	cbnz	r5, 2276c <process_event+0x7c>
		    || (transit != NULL)) {
   22768:	2e00      	cmp	r6, #0
   2276a:	d071      	beq.n	22850 <process_event+0x160>
   2276c:	2300      	movs	r3, #0
   2276e:	e055      	b.n	2281c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22770:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   22774:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   22776:	2a01      	cmp	r2, #1
   22778:	d81f      	bhi.n	227ba <process_event+0xca>
		*clients = mgr->clients;
   2277a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   2277e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   22780:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   22782:	b289      	uxth	r1, r1
	list->tail = NULL;
   22784:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   22788:	d10c      	bne.n	227a4 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   2278a:	2d00      	cmp	r5, #0
   2278c:	462b      	mov	r3, r5
   2278e:	bf38      	it	cc
   22790:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   22792:	b12b      	cbz	r3, 227a0 <process_event+0xb0>
				mgr->refs += 1U;
   22794:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22796:	681b      	ldr	r3, [r3, #0]
   22798:	3201      	adds	r2, #1
   2279a:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2279c:	2b00      	cmp	r3, #0
   2279e:	d1f8      	bne.n	22792 <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   227a0:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   227a4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   227a6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   227a8:	f012 ffe2 	bl	35770 <process_recheck>
   227ac:	2800      	cmp	r0, #0
   227ae:	d0d1      	beq.n	22754 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   227b0:	8b23      	ldrh	r3, [r4, #24]
   227b2:	f043 0320 	orr.w	r3, r3, #32
   227b6:	8323      	strh	r3, [r4, #24]
   227b8:	e7cc      	b.n	22754 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
   227ba:	2b04      	cmp	r3, #4
   227bc:	d10a      	bne.n	227d4 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   227be:	f021 0107 	bic.w	r1, r1, #7
   227c2:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   227c4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   227c6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   227c8:	f012 ffd2 	bl	35770 <process_recheck>
   227cc:	b110      	cbz	r0, 227d4 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   227ce:	f041 0120 	orr.w	r1, r1, #32
   227d2:	8321      	strh	r1, [r4, #24]
   227d4:	2500      	movs	r5, #0
   227d6:	e7bd      	b.n	22754 <process_event+0x64>
		} else if (evt == EVT_START) {
   227d8:	2803      	cmp	r0, #3
   227da:	d109      	bne.n	227f0 <process_event+0x100>
			transit = mgr->transitions->start;
   227dc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   227de:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   227e2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   227e4:	f043 0306 	orr.w	r3, r3, #6
}
   227e8:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   227ea:	8323      	strh	r3, [r4, #24]
		res = 0;
   227ec:	462f      	mov	r7, r5
   227ee:	e7b2      	b.n	22756 <process_event+0x66>
		} else if (evt == EVT_STOP) {
   227f0:	2804      	cmp	r0, #4
   227f2:	d106      	bne.n	22802 <process_event+0x112>
			transit = mgr->transitions->stop;
   227f4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   227f6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   227fa:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   227fc:	f043 0304 	orr.w	r3, r3, #4
   22800:	e7f2      	b.n	227e8 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   22802:	2805      	cmp	r0, #5
   22804:	d106      	bne.n	22814 <process_event+0x124>
			transit = mgr->transitions->reset;
   22806:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22808:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   2280c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2280e:	f043 0305 	orr.w	r3, r3, #5
   22812:	e7e9      	b.n	227e8 <process_event+0xf8>
   22814:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   22816:	462e      	mov	r6, r5
   22818:	e7e8      	b.n	227ec <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   2281a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2281c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   22820:	8321      	strh	r1, [r4, #24]
   22822:	f38b 8811 	msr	BASEPRI, fp
   22826:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   2282a:	bb03      	cbnz	r3, 2286e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   2282c:	2d00      	cmp	r5, #0
   2282e:	d134      	bne.n	2289a <process_event+0x1aa>
			if (transit != NULL) {
   22830:	b116      	cbz	r6, 22838 <process_event+0x148>
				transit(mgr, transition_complete);
   22832:	4651      	mov	r1, sl
   22834:	4620      	mov	r0, r4
   22836:	47b0      	blx	r6
	__asm__ volatile(
   22838:	f04f 0320 	mov.w	r3, #32
   2283c:	f3ef 8b11 	mrs	fp, BASEPRI
   22840:	f383 8811 	msr	BASEPRI, r3
   22844:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   22848:	8b23      	ldrh	r3, [r4, #24]
   2284a:	f023 0308 	bic.w	r3, r3, #8
   2284e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   22850:	8b23      	ldrh	r3, [r4, #24]
   22852:	06da      	lsls	r2, r3, #27
   22854:	d52a      	bpl.n	228ac <process_event+0x1bc>
			evt = EVT_COMPLETE;
   22856:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   22858:	f023 0310 	bic.w	r3, r3, #16
   2285c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   2285e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   22862:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   22866:	2900      	cmp	r1, #0
   22868:	f47f af5e 	bne.w	22728 <process_event+0x38>
out:
   2286c:	e751      	b.n	22712 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2286e:	68a1      	ldr	r1, [r4, #8]
   22870:	2900      	cmp	r1, #0
   22872:	d0db      	beq.n	2282c <process_event+0x13c>
	return node->next;
   22874:	680b      	ldr	r3, [r1, #0]
   22876:	2b00      	cmp	r3, #0
   22878:	bf38      	it	cc
   2287a:	2300      	movcc	r3, #0
   2287c:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   2287e:	4620      	mov	r0, r4
   22880:	463b      	mov	r3, r7
   22882:	f8d1 b004 	ldr.w	fp, [r1, #4]
   22886:	9201      	str	r2, [sp, #4]
   22888:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2288a:	9a01      	ldr	r2, [sp, #4]
   2288c:	f1b9 0f00 	cmp.w	r9, #0
   22890:	d0cc      	beq.n	2282c <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22892:	4649      	mov	r1, r9
   22894:	f8d9 3000 	ldr.w	r3, [r9]
   22898:	e7ed      	b.n	22876 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2289a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   2289c:	463b      	mov	r3, r7
   2289e:	4620      	mov	r0, r4
   228a0:	9201      	str	r2, [sp, #4]
   228a2:	682d      	ldr	r5, [r5, #0]
   228a4:	f012 ff80 	bl	357a8 <notify_one>
	while (!sys_slist_is_empty(list)) {
   228a8:	9a01      	ldr	r2, [sp, #4]
   228aa:	e7bf      	b.n	2282c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   228ac:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   228b0:	bf1e      	ittt	ne
   228b2:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   228b6:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   228b8:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   228ba:	e7d0      	b.n	2285e <process_event+0x16e>
   228bc:	000357d5 	.word	0x000357d5

000228c0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   228c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   228c2:	4602      	mov	r2, r0
   228c4:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   228c6:	270a      	movs	r7, #10
	size_t val = 0;
   228c8:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   228ca:	4e07      	ldr	r6, [pc, #28]	; (228e8 <extract_decimal+0x28>)
   228cc:	460c      	mov	r4, r1
   228ce:	7823      	ldrb	r3, [r4, #0]
   228d0:	3101      	adds	r1, #1
   228d2:	5d9d      	ldrb	r5, [r3, r6]
   228d4:	076d      	lsls	r5, r5, #29
   228d6:	d401      	bmi.n	228dc <extract_decimal+0x1c>
	}
	*str = sp;
   228d8:	6014      	str	r4, [r2, #0]
	return val;
}
   228da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   228dc:	fb07 3300 	mla	r3, r7, r0, r3
   228e0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   228e4:	e7f2      	b.n	228cc <extract_decimal+0xc>
   228e6:	bf00      	nop
   228e8:	0003d1dc 	.word	0x0003d1dc

000228ec <extract_conversion>:
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
	*conv = (struct conversion) {
   228ec:	2300      	movs	r3, #0
{
   228ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
	*conv = (struct conversion) {
   228f0:	e9c0 3300 	strd	r3, r3, [r0]
   228f4:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   228f6:	784b      	ldrb	r3, [r1, #1]
{
   228f8:	4604      	mov	r4, r0
	if (*sp == '%') {
   228fa:	2b25      	cmp	r3, #37	; 0x25
   228fc:	d040      	beq.n	22980 <extract_conversion+0x94>
	++sp;
   228fe:	3101      	adds	r1, #1
   22900:	460d      	mov	r5, r1
		switch (*sp) {
   22902:	f811 3b01 	ldrb.w	r3, [r1], #1
   22906:	2b2b      	cmp	r3, #43	; 0x2b
   22908:	d04b      	beq.n	229a2 <extract_conversion+0xb6>
   2290a:	d83d      	bhi.n	22988 <extract_conversion+0x9c>
   2290c:	2b20      	cmp	r3, #32
   2290e:	d04c      	beq.n	229aa <extract_conversion+0xbe>
   22910:	2b23      	cmp	r3, #35	; 0x23
   22912:	d04e      	beq.n	229b2 <extract_conversion+0xc6>
	if (conv->flag_zero && conv->flag_dash) {
   22914:	7823      	ldrb	r3, [r4, #0]
   22916:	f003 0244 	and.w	r2, r3, #68	; 0x44
   2291a:	2a44      	cmp	r2, #68	; 0x44
   2291c:	d102      	bne.n	22924 <extract_conversion+0x38>
		conv->flag_zero = false;
   2291e:	f36f 1386 	bfc	r3, #6, #1
   22922:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
   22924:	782b      	ldrb	r3, [r5, #0]
   22926:	9501      	str	r5, [sp, #4]
   22928:	2b2a      	cmp	r3, #42	; 0x2a
   2292a:	d146      	bne.n	229ba <extract_conversion+0xce>
		conv->width_present = true;
   2292c:	8823      	ldrh	r3, [r4, #0]
   2292e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
   22932:	8023      	strh	r3, [r4, #0]
		return ++sp;
   22934:	1c6b      	adds	r3, r5, #1
		return sp;
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
	sp = extract_prec(conv, sp);
   22936:	9301      	str	r3, [sp, #4]
	if (*sp != '.') {
   22938:	781a      	ldrb	r2, [r3, #0]
   2293a:	2a2e      	cmp	r2, #46	; 0x2e
   2293c:	d10b      	bne.n	22956 <extract_conversion+0x6a>
   2293e:	1c5d      	adds	r5, r3, #1
	++sp;
   22940:	9501      	str	r5, [sp, #4]
	if (*sp == '*') {
   22942:	785a      	ldrb	r2, [r3, #1]
   22944:	2a2a      	cmp	r2, #42	; 0x2a
   22946:	d144      	bne.n	229d2 <extract_conversion+0xe6>
		conv->prec_present = true;
   22948:	7862      	ldrb	r2, [r4, #1]
		return ++sp;
   2294a:	3302      	adds	r3, #2
		conv->prec_present = true;
   2294c:	f022 0206 	bic.w	r2, r2, #6
   22950:	f042 0206 	orr.w	r2, r2, #6
   22954:	7062      	strb	r2, [r4, #1]
	switch (*sp) {
   22956:	4619      	mov	r1, r3
   22958:	f811 0b01 	ldrb.w	r0, [r1], #1
   2295c:	286c      	cmp	r0, #108	; 0x6c
   2295e:	f000 8087 	beq.w	22a70 <extract_conversion+0x184>
   22962:	d842      	bhi.n	229ea <extract_conversion+0xfe>
   22964:	2868      	cmp	r0, #104	; 0x68
   22966:	d048      	beq.n	229fa <extract_conversion+0x10e>
   22968:	286a      	cmp	r0, #106	; 0x6a
   2296a:	f000 808a 	beq.w	22a82 <extract_conversion+0x196>
   2296e:	284c      	cmp	r0, #76	; 0x4c
   22970:	f000 808d 	beq.w	22a8e <extract_conversion+0x1a2>
		conv->length_mod = LENGTH_NONE;
   22974:	7862      	ldrb	r2, [r4, #1]
		break;
   22976:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   22978:	f36f 02c6 	bfc	r2, #3, #4
   2297c:	7062      	strb	r2, [r4, #1]
		break;
   2297e:	e045      	b.n	22a0c <extract_conversion+0x120>
		conv->specifier = *sp++;
   22980:	1c88      	adds	r0, r1, #2
   22982:	70e3      	strb	r3, [r4, #3]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   22984:	b003      	add	sp, #12
   22986:	bd30      	pop	{r4, r5, pc}
		switch (*sp) {
   22988:	2b2d      	cmp	r3, #45	; 0x2d
   2298a:	d005      	beq.n	22998 <extract_conversion+0xac>
   2298c:	2b30      	cmp	r3, #48	; 0x30
   2298e:	d1c1      	bne.n	22914 <extract_conversion+0x28>
			conv->flag_zero = true;
   22990:	7823      	ldrb	r3, [r4, #0]
   22992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22996:	e002      	b.n	2299e <extract_conversion+0xb2>
			conv->flag_dash = true;
   22998:	7823      	ldrb	r3, [r4, #0]
   2299a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   2299e:	7023      	strb	r3, [r4, #0]
			break;
   229a0:	e7ae      	b.n	22900 <extract_conversion+0x14>
			conv->flag_plus = true;
   229a2:	7823      	ldrb	r3, [r4, #0]
   229a4:	f043 0308 	orr.w	r3, r3, #8
   229a8:	e7f9      	b.n	2299e <extract_conversion+0xb2>
			conv->flag_space = true;
   229aa:	7823      	ldrb	r3, [r4, #0]
   229ac:	f043 0310 	orr.w	r3, r3, #16
   229b0:	e7f5      	b.n	2299e <extract_conversion+0xb2>
			conv->flag_hash = true;
   229b2:	7823      	ldrb	r3, [r4, #0]
   229b4:	f043 0320 	orr.w	r3, r3, #32
   229b8:	e7f1      	b.n	2299e <extract_conversion+0xb2>
	size_t width = extract_decimal(&sp);
   229ba:	a801      	add	r0, sp, #4
   229bc:	f7ff ff80 	bl	228c0 <extract_decimal>
	if (sp != wp) {
   229c0:	9b01      	ldr	r3, [sp, #4]
   229c2:	42ab      	cmp	r3, r5
		conv->width_present = true;
   229c4:	bf1f      	itttt	ne
   229c6:	7822      	ldrbne	r2, [r4, #0]
		conv->width_value = width;
   229c8:	6060      	strne	r0, [r4, #4]
		conv->width_present = true;
   229ca:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
   229ce:	7022      	strbne	r2, [r4, #0]
		if (width != conv->width_value) {
   229d0:	e7b1      	b.n	22936 <extract_conversion+0x4a>
	size_t prec = extract_decimal(&sp);
   229d2:	a801      	add	r0, sp, #4
   229d4:	f7ff ff74 	bl	228c0 <extract_decimal>
	if (sp != wp) {
   229d8:	9b01      	ldr	r3, [sp, #4]
   229da:	429d      	cmp	r5, r3
		conv->prec_present = true;
   229dc:	bf1f      	itttt	ne
   229de:	7862      	ldrbne	r2, [r4, #1]
		conv->prec_value = prec;
   229e0:	60a0      	strne	r0, [r4, #8]
		conv->prec_present = true;
   229e2:	f042 0202 	orrne.w	r2, r2, #2
   229e6:	7062      	strbne	r2, [r4, #1]
		if (prec != conv->prec_value) {
   229e8:	e7b5      	b.n	22956 <extract_conversion+0x6a>
	switch (*sp) {
   229ea:	2874      	cmp	r0, #116	; 0x74
   229ec:	7862      	ldrb	r2, [r4, #1]
   229ee:	d04b      	beq.n	22a88 <extract_conversion+0x19c>
   229f0:	287a      	cmp	r0, #122	; 0x7a
   229f2:	d1bf      	bne.n	22974 <extract_conversion+0x88>
		conv->length_mod = LENGTH_Z;
   229f4:	4613      	mov	r3, r2
   229f6:	2206      	movs	r2, #6
   229f8:	e036      	b.n	22a68 <extract_conversion+0x17c>
		if (*++sp == 'h') {
   229fa:	785a      	ldrb	r2, [r3, #1]
   229fc:	2a68      	cmp	r2, #104	; 0x68
   229fe:	7862      	ldrb	r2, [r4, #1]
   22a00:	d130      	bne.n	22a64 <extract_conversion+0x178>
			conv->length_mod = LENGTH_HH;
   22a02:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   22a04:	f361 02c6 	bfi	r2, r1, #3, #4
   22a08:	7062      	strb	r2, [r4, #1]
			++sp;
   22a0a:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   22a0c:	4608      	mov	r0, r1
   22a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
	switch (conv->specifier) {
   22a12:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   22a14:	70e2      	strb	r2, [r4, #3]
	switch (conv->specifier) {
   22a16:	f200 80b2 	bhi.w	22b7e <extract_conversion+0x292>
   22a1a:	2a57      	cmp	r2, #87	; 0x57
   22a1c:	d842      	bhi.n	22aa4 <extract_conversion+0x1b8>
   22a1e:	2a41      	cmp	r2, #65	; 0x41
   22a20:	d004      	beq.n	22a2c <extract_conversion+0x140>
   22a22:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   22a26:	2b02      	cmp	r3, #2
   22a28:	f200 80a9 	bhi.w	22b7e <extract_conversion+0x292>
		conv->specifier_cat = SPECIFIER_FP;
   22a2c:	2104      	movs	r1, #4
   22a2e:	78a3      	ldrb	r3, [r4, #2]
			|| (conv->specifier == 'A');
   22a30:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   22a34:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   22a38:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   22a3c:	424a      	negs	r2, r1
   22a3e:	414a      	adcs	r2, r1
		conv->specifier_a = (conv->specifier == 'a')
   22a40:	7861      	ldrb	r1, [r4, #1]
		conv->specifier_cat = SPECIFIER_FP;
   22a42:	70a3      	strb	r3, [r4, #2]
		conv->specifier_a = (conv->specifier == 'a')
   22a44:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   22a48:	060d      	lsls	r5, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   22a4a:	7061      	strb	r1, [r4, #1]
		if (conv->specifier_a
   22a4c:	b2cb      	uxtb	r3, r1
   22a4e:	f100 80b4 	bmi.w	22bba <extract_conversion+0x2ce>
		if (conv->length_mod == LENGTH_L) {
   22a52:	f003 0278 	and.w	r2, r3, #120	; 0x78
   22a56:	2a18      	cmp	r2, #24
   22a58:	f040 808e 	bne.w	22b78 <extract_conversion+0x28c>
			conv->length_mod = LENGTH_NONE;
   22a5c:	f36f 03c6 	bfc	r3, #3, #4
   22a60:	7063      	strb	r3, [r4, #1]
   22a62:	e079      	b.n	22b58 <extract_conversion+0x26c>
			conv->length_mod = LENGTH_H;
   22a64:	4613      	mov	r3, r2
   22a66:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   22a68:	f362 03c6 	bfi	r3, r2, #3, #4
   22a6c:	7063      	strb	r3, [r4, #1]
   22a6e:	e7cd      	b.n	22a0c <extract_conversion+0x120>
		if (*++sp == 'l') {
   22a70:	785a      	ldrb	r2, [r3, #1]
   22a72:	2a6c      	cmp	r2, #108	; 0x6c
   22a74:	7862      	ldrb	r2, [r4, #1]
   22a76:	d101      	bne.n	22a7c <extract_conversion+0x190>
			conv->length_mod = LENGTH_LL;
   22a78:	2104      	movs	r1, #4
   22a7a:	e7c3      	b.n	22a04 <extract_conversion+0x118>
			conv->length_mod = LENGTH_L;
   22a7c:	4613      	mov	r3, r2
   22a7e:	2203      	movs	r2, #3
   22a80:	e7f2      	b.n	22a68 <extract_conversion+0x17c>
		conv->length_mod = LENGTH_J;
   22a82:	2205      	movs	r2, #5
   22a84:	7863      	ldrb	r3, [r4, #1]
   22a86:	e7ef      	b.n	22a68 <extract_conversion+0x17c>
		conv->length_mod = LENGTH_T;
   22a88:	4613      	mov	r3, r2
   22a8a:	2207      	movs	r2, #7
   22a8c:	e7ec      	b.n	22a68 <extract_conversion+0x17c>
		conv->unsupported = true;
   22a8e:	8823      	ldrh	r3, [r4, #0]
   22a90:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   22a94:	f023 0302 	bic.w	r3, r3, #2
   22a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   22a9c:	f043 0302 	orr.w	r3, r3, #2
   22aa0:	8023      	strh	r3, [r4, #0]
		break;
   22aa2:	e7b3      	b.n	22a0c <extract_conversion+0x120>
   22aa4:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   22aa8:	2b20      	cmp	r3, #32
   22aaa:	d868      	bhi.n	22b7e <extract_conversion+0x292>
   22aac:	a101      	add	r1, pc, #4	; (adr r1, 22ab4 <extract_conversion+0x1c8>)
   22aae:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   22ab2:	bf00      	nop
   22ab4:	00022b5d 	.word	0x00022b5d
   22ab8:	00022b7f 	.word	0x00022b7f
   22abc:	00022b7f 	.word	0x00022b7f
   22ac0:	00022b7f 	.word	0x00022b7f
   22ac4:	00022b7f 	.word	0x00022b7f
   22ac8:	00022b7f 	.word	0x00022b7f
   22acc:	00022b7f 	.word	0x00022b7f
   22ad0:	00022b7f 	.word	0x00022b7f
   22ad4:	00022b7f 	.word	0x00022b7f
   22ad8:	00022a2d 	.word	0x00022a2d
   22adc:	00022b7f 	.word	0x00022b7f
   22ae0:	00022b5d 	.word	0x00022b5d
   22ae4:	00022b39 	.word	0x00022b39
   22ae8:	00022a2d 	.word	0x00022a2d
   22aec:	00022a2d 	.word	0x00022a2d
   22af0:	00022a2d 	.word	0x00022a2d
   22af4:	00022b7f 	.word	0x00022b7f
   22af8:	00022b39 	.word	0x00022b39
   22afc:	00022b7f 	.word	0x00022b7f
   22b00:	00022b7f 	.word	0x00022b7f
   22b04:	00022b7f 	.word	0x00022b7f
   22b08:	00022b7f 	.word	0x00022b7f
   22b0c:	00022b89 	.word	0x00022b89
   22b10:	00022b5d 	.word	0x00022b5d
   22b14:	00022ba3 	.word	0x00022ba3
   22b18:	00022b7f 	.word	0x00022b7f
   22b1c:	00022b7f 	.word	0x00022b7f
   22b20:	00022ba3 	.word	0x00022ba3
   22b24:	00022b7f 	.word	0x00022b7f
   22b28:	00022b5d 	.word	0x00022b5d
   22b2c:	00022b7f 	.word	0x00022b7f
   22b30:	00022b7f 	.word	0x00022b7f
   22b34:	00022b5d 	.word	0x00022b5d
		conv->specifier_cat = SPECIFIER_SINT;
   22b38:	2101      	movs	r1, #1
   22b3a:	78a3      	ldrb	r3, [r4, #2]
		conv->specifier_cat = SPECIFIER_UINT;
   22b3c:	f361 0302 	bfi	r3, r1, #0, #3
   22b40:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   22b42:	7863      	ldrb	r3, [r4, #1]
   22b44:	f003 0378 	and.w	r3, r3, #120	; 0x78
   22b48:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   22b4a:	bf02      	ittt	eq
   22b4c:	7821      	ldrbeq	r1, [r4, #0]
   22b4e:	f041 0101 	orreq.w	r1, r1, #1
   22b52:	7021      	strbeq	r1, [r4, #0]
		if (conv->specifier == 'c') {
   22b54:	2a63      	cmp	r2, #99	; 0x63
   22b56:	d004      	beq.n	22b62 <extract_conversion+0x276>
	bool unsupported = false;
   22b58:	2300      	movs	r3, #0
   22b5a:	e005      	b.n	22b68 <extract_conversion+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
   22b5c:	2102      	movs	r1, #2
   22b5e:	78a3      	ldrb	r3, [r4, #2]
   22b60:	e7ec      	b.n	22b3c <extract_conversion+0x250>
			unsupported = (conv->length_mod != LENGTH_NONE);
   22b62:	3b00      	subs	r3, #0
   22b64:	bf18      	it	ne
   22b66:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   22b68:	7822      	ldrb	r2, [r4, #0]
   22b6a:	f3c2 0140 	ubfx	r1, r2, #1, #1
   22b6e:	430b      	orrs	r3, r1
   22b70:	f363 0241 	bfi	r2, r3, #1, #1
   22b74:	7022      	strb	r2, [r4, #0]
	return sp;
   22b76:	e705      	b.n	22984 <extract_conversion+0x98>
		} else if ((conv->length_mod != LENGTH_NONE)
   22b78:	f013 0f38 	tst.w	r3, #56	; 0x38
   22b7c:	d0ec      	beq.n	22b58 <extract_conversion+0x26c>
			conv->invalid = true;
   22b7e:	7823      	ldrb	r3, [r4, #0]
   22b80:	f043 0301 	orr.w	r3, r3, #1
   22b84:	7023      	strb	r3, [r4, #0]
   22b86:	e7e7      	b.n	22b58 <extract_conversion+0x26c>
		conv->specifier_cat = SPECIFIER_PTR;
   22b88:	2203      	movs	r2, #3
   22b8a:	78a3      	ldrb	r3, [r4, #2]
   22b8c:	f362 0302 	bfi	r3, r2, #0, #3
   22b90:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   22b92:	7863      	ldrb	r3, [r4, #1]
   22b94:	f003 0378 	and.w	r3, r3, #120	; 0x78
   22b98:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   22b9c:	4253      	negs	r3, r2
   22b9e:	4153      	adcs	r3, r2
   22ba0:	e7e2      	b.n	22b68 <extract_conversion+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
   22ba2:	2203      	movs	r2, #3
   22ba4:	78a3      	ldrb	r3, [r4, #2]
   22ba6:	f362 0302 	bfi	r3, r2, #0, #3
   22baa:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
   22bac:	7863      	ldrb	r3, [r4, #1]
   22bae:	f013 0f78 	tst.w	r3, #120	; 0x78
   22bb2:	bf14      	ite	ne
   22bb4:	2301      	movne	r3, #1
   22bb6:	2300      	moveq	r3, #0
   22bb8:	e7d6      	b.n	22b68 <extract_conversion+0x27c>
			unsupported = true;
   22bba:	2301      	movs	r3, #1
   22bbc:	e7d4      	b.n	22b68 <extract_conversion+0x27c>
   22bbe:	bf00      	nop

00022bc0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   22bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22bc4:	4614      	mov	r4, r2
   22bc6:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   22bc8:	78d3      	ldrb	r3, [r2, #3]
   22bca:	4a24      	ldr	r2, [pc, #144]	; (22c5c <encode_uint+0x9c>)
	switch (specifier) {
   22bcc:	2b6f      	cmp	r3, #111	; 0x6f
   22bce:	f813 a002 	ldrb.w	sl, [r3, r2]
{
   22bd2:	4606      	mov	r6, r0
   22bd4:	f00a 0203 	and.w	r2, sl, #3
   22bd8:	460f      	mov	r7, r1
   22bda:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   22bdc:	d02d      	beq.n	22c3a <encode_uint+0x7a>
   22bde:	d828      	bhi.n	22c32 <encode_uint+0x72>
		return 16;
   22be0:	2b58      	cmp	r3, #88	; 0x58
   22be2:	bf14      	ite	ne
   22be4:	250a      	movne	r5, #10
   22be6:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   22be8:	46aa      	mov	sl, r5
   22bea:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   22bee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   22bf2:	4652      	mov	r2, sl
   22bf4:	465b      	mov	r3, fp
   22bf6:	4630      	mov	r0, r6
   22bf8:	4639      	mov	r1, r7
   22bfa:	f7f9 fddd 	bl	1c7b8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   22bfe:	2a09      	cmp	r2, #9
   22c00:	b2d3      	uxtb	r3, r2
   22c02:	d81f      	bhi.n	22c44 <encode_uint+0x84>
   22c04:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   22c06:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22c08:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   22c0a:	bf08      	it	eq
   22c0c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22c0e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   22c12:	d301      	bcc.n	22c18 <encode_uint+0x58>
   22c14:	45c8      	cmp	r8, r9
   22c16:	d812      	bhi.n	22c3e <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   22c18:	7823      	ldrb	r3, [r4, #0]
   22c1a:	069b      	lsls	r3, r3, #26
   22c1c:	d505      	bpl.n	22c2a <encode_uint+0x6a>
		if (radix == 8) {
   22c1e:	2d08      	cmp	r5, #8
   22c20:	d116      	bne.n	22c50 <encode_uint+0x90>
			conv->altform_0 = true;
   22c22:	78a3      	ldrb	r3, [r4, #2]
   22c24:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   22c28:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
   22c2a:	4640      	mov	r0, r8
   22c2c:	b003      	add	sp, #12
   22c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   22c32:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   22c36:	2b70      	cmp	r3, #112	; 0x70
   22c38:	e7d3      	b.n	22be2 <encode_uint+0x22>
	switch (specifier) {
   22c3a:	2508      	movs	r5, #8
   22c3c:	e7d4      	b.n	22be8 <encode_uint+0x28>
		value /= radix;
   22c3e:	4606      	mov	r6, r0
   22c40:	460f      	mov	r7, r1
   22c42:	e7d6      	b.n	22bf2 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22c44:	9a01      	ldr	r2, [sp, #4]
   22c46:	2a01      	cmp	r2, #1
   22c48:	bf0c      	ite	eq
   22c4a:	3337      	addeq	r3, #55	; 0x37
   22c4c:	3357      	addne	r3, #87	; 0x57
   22c4e:	e7da      	b.n	22c06 <encode_uint+0x46>
		} else if (radix == 16) {
   22c50:	2d10      	cmp	r5, #16
   22c52:	d1ea      	bne.n	22c2a <encode_uint+0x6a>
			conv->altform_0c = true;
   22c54:	78a3      	ldrb	r3, [r4, #2]
   22c56:	f043 0310 	orr.w	r3, r3, #16
   22c5a:	e7e5      	b.n	22c28 <encode_uint+0x68>
   22c5c:	0003d1dc 	.word	0x0003d1dc

00022c60 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   22c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c64:	468a      	mov	sl, r1
   22c66:	4614      	mov	r4, r2
   22c68:	469b      	mov	fp, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   22c6a:	f04f 0900 	mov.w	r9, #0
{
   22c6e:	b0a1      	sub	sp, #132	; 0x84
   22c70:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   22c72:	7820      	ldrb	r0, [r4, #0]
   22c74:	b908      	cbnz	r0, 22c7a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   22c76:	4648      	mov	r0, r9
   22c78:	e189      	b.n	22f8e <cbvprintf+0x32e>
		if (*fp != '%') {
   22c7a:	2825      	cmp	r0, #37	; 0x25
   22c7c:	d00a      	beq.n	22c94 <cbvprintf+0x34>
			OUTC(*fp++);
   22c7e:	4651      	mov	r1, sl
   22c80:	9b03      	ldr	r3, [sp, #12]
   22c82:	4798      	blx	r3
   22c84:	2800      	cmp	r0, #0
   22c86:	f2c0 8182 	blt.w	22f8e <cbvprintf+0x32e>
   22c8a:	1c63      	adds	r3, r4, #1
   22c8c:	930b      	str	r3, [sp, #44]	; 0x2c
			OUTC('%');
   22c8e:	f109 0901 	add.w	r9, r9, #1
		if (bps == NULL) {
   22c92:	e067      	b.n	22d64 <cbvprintf+0x104>
		fp = extract_conversion(&conv, sp);
   22c94:	4621      	mov	r1, r4
   22c96:	a816      	add	r0, sp, #88	; 0x58
   22c98:	f7ff fe28 	bl	228ec <extract_conversion>
		if (conv.width_star) {
   22c9c:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
		fp = extract_conversion(&conv, sp);
   22ca0:	900b      	str	r0, [sp, #44]	; 0x2c
		if (conv.width_star) {
   22ca2:	07d8      	lsls	r0, r3, #31
   22ca4:	d51c      	bpl.n	22ce0 <cbvprintf+0x80>
			width = va_arg(ap, int);
   22ca6:	f85b 2b04 	ldr.w	r2, [fp], #4
			if (width < 0) {
   22caa:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
   22cac:	920a      	str	r2, [sp, #40]	; 0x28
			if (width < 0) {
   22cae:	da08      	bge.n	22cc2 <cbvprintf+0x62>
				conv.flag_dash = true;
   22cb0:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   22cb4:	f042 0204 	orr.w	r2, r2, #4
   22cb8:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
				width = -width;
   22cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22cbe:	4252      	negs	r2, r2
		int width = -1;
   22cc0:	920a      	str	r2, [sp, #40]	; 0x28
		if (conv.prec_star) {
   22cc2:	0759      	lsls	r1, r3, #29
   22cc4:	d514      	bpl.n	22cf0 <cbvprintf+0x90>
			int arg = va_arg(ap, int);
   22cc6:	f85b 5b04 	ldr.w	r5, [fp], #4
			if (arg < 0) {
   22cca:	2d00      	cmp	r5, #0
   22ccc:	da13      	bge.n	22cf6 <cbvprintf+0x96>
				conv.prec_present = false;
   22cce:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   22cd2:	f36f 0341 	bfc	r3, #1, #1
   22cd6:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
   22cda:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   22cde:	e00a      	b.n	22cf6 <cbvprintf+0x96>
		} else if (conv.width_present) {
   22ce0:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   22ce4:	2a00      	cmp	r2, #0
		int width = -1;
   22ce6:	bfac      	ite	ge
   22ce8:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
			width = conv.width_value;
   22cec:	9a17      	ldrlt	r2, [sp, #92]	; 0x5c
   22cee:	e7e7      	b.n	22cc0 <cbvprintf+0x60>
		} else if (conv.prec_present) {
   22cf0:	079a      	lsls	r2, r3, #30
   22cf2:	d5f2      	bpl.n	22cda <cbvprintf+0x7a>
			precision = conv.prec_value;
   22cf4:	9d18      	ldr	r5, [sp, #96]	; 0x60
		conv.pad0_value = 0;
   22cf6:	2300      	movs	r3, #0
		conv.pad0_pre_exp = 0;
   22cf8:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv.specifier_cat == SPECIFIER_FP)
   22cfc:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   22d00:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   22d04:	f003 0307 	and.w	r3, r3, #7
   22d08:	2b04      	cmp	r3, #4
   22d0a:	d107      	bne.n	22d1c <cbvprintf+0xbc>
		    && !conv.prec_present) {
   22d0c:	0793      	lsls	r3, r2, #30
   22d0e:	d405      	bmi.n	22d1c <cbvprintf+0xbc>
			if (conv.specifier_a) {
   22d10:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
   22d14:	2b00      	cmp	r3, #0
   22d16:	bfb4      	ite	lt
   22d18:	250d      	movlt	r5, #13
   22d1a:	2506      	movge	r5, #6
			= (enum specifier_cat_enum)conv.specifier_cat;
   22d1c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		union argument_value value = (union argument_value){
   22d20:	2000      	movs	r0, #0
		enum specifier_cat_enum specifier_cat
   22d22:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   22d26:	2b01      	cmp	r3, #1
		union argument_value value = (union argument_value){
   22d28:	f04f 0100 	mov.w	r1, #0
			= (enum length_mod_enum)conv.length_mod;
   22d2c:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   22d30:	d126      	bne.n	22d80 <cbvprintf+0x120>
			switch (length_mod) {
   22d32:	1ed3      	subs	r3, r2, #3
   22d34:	2b04      	cmp	r3, #4
   22d36:	d817      	bhi.n	22d68 <cbvprintf+0x108>
   22d38:	e8df f003 	tbb	[pc, r3]
   22d3c:	16323203 	.word	0x16323203
   22d40:	16          	.byte	0x16
   22d41:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
   22d42:	f85b 0b04 	ldr.w	r0, [fp], #4
				value.sint = (short)value.sint;
   22d46:	17c1      	asrs	r1, r0, #31
		if (conv.invalid || conv.unsupported) {
   22d48:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
   22d4c:	07b7      	lsls	r7, r6, #30
   22d4e:	d047      	beq.n	22de0 <cbvprintf+0x180>
			OUTS(sp, fp);
   22d50:	4622      	mov	r2, r4
   22d52:	4651      	mov	r1, sl
   22d54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22d56:	9803      	ldr	r0, [sp, #12]
   22d58:	f013 f86f 	bl	35e3a <outs>
   22d5c:	2800      	cmp	r0, #0
   22d5e:	f2c0 8116 	blt.w	22f8e <cbvprintf+0x32e>
   22d62:	4481      	add	r9, r0
			continue;
   22d64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   22d66:	e784      	b.n	22c72 <cbvprintf+0x12>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   22d68:	f85b 0b04 	ldr.w	r0, [fp], #4
			if (length_mod == LENGTH_HH) {
   22d6c:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   22d6e:	ea4f 71e0 	mov.w	r1, r0, asr #31
			if (length_mod == LENGTH_HH) {
   22d72:	d101      	bne.n	22d78 <cbvprintf+0x118>
				value.uint = (unsigned char)value.uint;
   22d74:	b2c6      	uxtb	r6, r0
   22d76:	e00f      	b.n	22d98 <cbvprintf+0x138>
			} else if (length_mod == LENGTH_H) {
   22d78:	2a02      	cmp	r2, #2
   22d7a:	d1e5      	bne.n	22d48 <cbvprintf+0xe8>
				value.sint = (short)value.sint;
   22d7c:	b200      	sxth	r0, r0
   22d7e:	e7e2      	b.n	22d46 <cbvprintf+0xe6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   22d80:	2b02      	cmp	r3, #2
   22d82:	d11f      	bne.n	22dc4 <cbvprintf+0x164>
			switch (length_mod) {
   22d84:	1ed3      	subs	r3, r2, #3
   22d86:	2b04      	cmp	r3, #4
   22d88:	d811      	bhi.n	22dae <cbvprintf+0x14e>
   22d8a:	e8df f003 	tbb	[pc, r3]
   22d8e:	0903      	.short	0x0903
   22d90:	1009      	.short	0x1009
   22d92:	10          	.byte	0x10
   22d93:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
   22d94:	f85b 6b04 	ldr.w	r6, [fp], #4
				value.uint = (unsigned short)value.uint;
   22d98:	2300      	movs	r3, #0
   22d9a:	4630      	mov	r0, r6
   22d9c:	4619      	mov	r1, r3
   22d9e:	e7d3      	b.n	22d48 <cbvprintf+0xe8>
					(uint_value_type)va_arg(ap,
   22da0:	f10b 0b07 	add.w	fp, fp, #7
   22da4:	f02b 0b07 	bic.w	fp, fp, #7
				value.uint =
   22da8:	e8fb 0102 	ldrd	r0, r1, [fp], #8
				break;
   22dac:	e7cc      	b.n	22d48 <cbvprintf+0xe8>
				value.uint =
   22dae:	2300      	movs	r3, #0
   22db0:	f85b 6b04 	ldr.w	r6, [fp], #4
			if (length_mod == LENGTH_HH) {
   22db4:	2a01      	cmp	r2, #1
				value.uint =
   22db6:	4630      	mov	r0, r6
   22db8:	4619      	mov	r1, r3
			if (length_mod == LENGTH_HH) {
   22dba:	d0db      	beq.n	22d74 <cbvprintf+0x114>
			} else if (length_mod == LENGTH_H) {
   22dbc:	2a02      	cmp	r2, #2
   22dbe:	d1c3      	bne.n	22d48 <cbvprintf+0xe8>
				value.uint = (unsigned short)value.uint;
   22dc0:	b2b6      	uxth	r6, r6
   22dc2:	e7e9      	b.n	22d98 <cbvprintf+0x138>
		} else if (specifier_cat == SPECIFIER_FP) {
   22dc4:	2b04      	cmp	r3, #4
   22dc6:	d106      	bne.n	22dd6 <cbvprintf+0x176>
			if (length_mod == LENGTH_UPPER_L) {
   22dc8:	f10b 0b07 	add.w	fp, fp, #7
   22dcc:	f02b 0b07 	bic.w	fp, fp, #7
   22dd0:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   22dd4:	e7b8      	b.n	22d48 <cbvprintf+0xe8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   22dd6:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
   22dd8:	bf08      	it	eq
   22dda:	f85b 0b04 	ldreq.w	r0, [fp], #4
   22dde:	e7b3      	b.n	22d48 <cbvprintf+0xe8>
		switch (conv.specifier) {
   22de0:	f89d 705b 	ldrb.w	r7, [sp, #91]	; 0x5b
   22de4:	2f78      	cmp	r7, #120	; 0x78
   22de6:	d8bd      	bhi.n	22d64 <cbvprintf+0x104>
   22de8:	2f57      	cmp	r7, #87	; 0x57
   22dea:	d87f      	bhi.n	22eec <cbvprintf+0x28c>
   22dec:	2f25      	cmp	r7, #37	; 0x25
   22dee:	f000 80c7 	beq.w	22f80 <cbvprintf+0x320>
   22df2:	2f24      	cmp	r7, #36	; 0x24
   22df4:	d9b6      	bls.n	22d64 <cbvprintf+0x104>
   22df6:	2f41      	cmp	r7, #65	; 0x41
   22df8:	d003      	beq.n	22e02 <cbvprintf+0x1a2>
   22dfa:	f1a7 0345 	sub.w	r3, r7, #69	; 0x45
   22dfe:	2b02      	cmp	r3, #2
   22e00:	d8b0      	bhi.n	22d64 <cbvprintf+0x104>
	if ((u.u64 & SIGN_MASK) != 0U) {
   22e02:	2800      	cmp	r0, #0
   22e04:	f171 0300 	sbcs.w	r3, r1, #0
   22e08:	f2c0 815c 	blt.w	230c4 <cbvprintf+0x464>
	} else if (conv->flag_plus) {
   22e0c:	0732      	lsls	r2, r6, #28
   22e0e:	f100 815b 	bmi.w	230c8 <cbvprintf+0x468>
		*sign = ' ';
   22e12:	f016 0610 	ands.w	r6, r6, #16
   22e16:	bf18      	it	ne
   22e18:	2620      	movne	r6, #32
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   22e1a:	f3c1 0313 	ubfx	r3, r1, #0, #20
   22e1e:	9006      	str	r0, [sp, #24]
   22e20:	9307      	str	r3, [sp, #28]
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   22e22:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   22e26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   22e2a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (exp == 0) && (fract != 0);
   22e2e:	2c00      	cmp	r4, #0
   22e30:	f040 814c 	bne.w	230cc <cbvprintf+0x46c>
   22e34:	4603      	mov	r3, r0
   22e36:	9a07      	ldr	r2, [sp, #28]
   22e38:	4313      	orrs	r3, r2
   22e3a:	bf14      	ite	ne
   22e3c:	f04f 0c01 	movne.w	ip, #1
   22e40:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
   22e44:	9907      	ldr	r1, [sp, #28]
		c = 'f';
   22e46:	2f46      	cmp	r7, #70	; 0x46
	fract <<= EXPONENT_BITS;
   22e48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   22e4c:	9906      	ldr	r1, [sp, #24]
		c = 'f';
   22e4e:	bf08      	it	eq
   22e50:	2766      	moveq	r7, #102	; 0x66
	fract <<= EXPONENT_BITS;
   22e52:	02ca      	lsls	r2, r1, #11
   22e54:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
   22e58:	ea44 0102 	orr.w	r1, r4, r2
   22e5c:	910c      	str	r1, [sp, #48]	; 0x30
   22e5e:	17e1      	asrs	r1, r4, #31
   22e60:	4319      	orrs	r1, r3
   22e62:	910d      	str	r1, [sp, #52]	; 0x34
   22e64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   22e68:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
   22e6a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((exp | fract) != 0) {
   22e6e:	f000 81d1 	beq.w	23214 <cbvprintf+0x5b4>
		if (is_subnormal) {
   22e72:	f1bc 0f00 	cmp.w	ip, #0
   22e76:	f040 815f 	bne.w	23138 <cbvprintf+0x4d8>
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   22e7a:	f2a4 38fe 	subw	r8, r4, #1022	; 0x3fe
		fract |= BIT_63;
   22e7e:	2400      	movs	r4, #0
   22e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   22e82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   22e86:	9313      	str	r3, [sp, #76]	; 0x4c
	while (exp <= -3) {
   22e88:	f118 0f02 	cmn.w	r8, #2
   22e8c:	f2c0 8160 	blt.w	23150 <cbvprintf+0x4f0>
	while (exp > 0) {
   22e90:	f1b8 0f00 	cmp.w	r8, #0
   22e94:	f300 8198 	bgt.w	231c8 <cbvprintf+0x568>
		_rlrshift(&fract);
   22e98:	a812      	add	r0, sp, #72	; 0x48
		exp++;
   22e9a:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   22e9e:	f012 ff83 	bl	35da8 <_rlrshift>
	while (exp < (0 + 4)) {
   22ea2:	f1b8 0f04 	cmp.w	r8, #4
   22ea6:	d1f7      	bne.n	22e98 <cbvprintf+0x238>
	if ((c == 'g') || (c == 'G')) {
   22ea8:	f007 03df 	and.w	r3, r7, #223	; 0xdf
   22eac:	2b47      	cmp	r3, #71	; 0x47
   22eae:	f040 81b7 	bne.w	23220 <cbvprintf+0x5c0>
		if (decexp < (-4 + 1) || decexp > precision) {
   22eb2:	1ce3      	adds	r3, r4, #3
   22eb4:	db02      	blt.n	22ebc <cbvprintf+0x25c>
   22eb6:	42ac      	cmp	r4, r5
   22eb8:	f340 81af 	ble.w	2321a <cbvprintf+0x5ba>
			c += 'e' - 'g';  /* e or E */
   22ebc:	3f02      	subs	r7, #2
			if (precision > 0) {
   22ebe:	2d00      	cmp	r5, #0
			c += 'e' - 'g';  /* e or E */
   22ec0:	b2ff      	uxtb	r7, r7
			if (precision > 0) {
   22ec2:	dd00      	ble.n	22ec6 <cbvprintf+0x266>
				precision--;
   22ec4:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
   22ec6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   22eca:	0698      	lsls	r0, r3, #26
   22ecc:	f100 81a8 	bmi.w	23220 <cbvprintf+0x5c0>
   22ed0:	2d00      	cmp	r5, #0
   22ed2:	bfd4      	ite	le
   22ed4:	2300      	movle	r3, #0
   22ed6:	2301      	movgt	r3, #1
	if (c == 'f') {
   22ed8:	2f66      	cmp	r7, #102	; 0x66
	bool prune_zero = false;
   22eda:	9304      	str	r3, [sp, #16]
	if (c == 'f') {
   22edc:	f040 81a2 	bne.w	23224 <cbvprintf+0x5c4>
		if (exp < 0) {
   22ee0:	1961      	adds	r1, r4, r5
   22ee2:	f140 81a0 	bpl.w	23226 <cbvprintf+0x5c6>
			exp = 0;
   22ee6:	f04f 0800 	mov.w	r8, #0
   22eea:	e1a0      	b.n	2322e <cbvprintf+0x5ce>
   22eec:	f1a7 0358 	sub.w	r3, r7, #88	; 0x58
   22ef0:	2b20      	cmp	r3, #32
   22ef2:	f63f af37 	bhi.w	22d64 <cbvprintf+0x104>
   22ef6:	a401      	add	r4, pc, #4	; (adr r4, 22efc <cbvprintf+0x29c>)
   22ef8:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
   22efc:	00023063 	.word	0x00023063
   22f00:	00022d65 	.word	0x00022d65
   22f04:	00022d65 	.word	0x00022d65
   22f08:	00022d65 	.word	0x00022d65
   22f0c:	00022d65 	.word	0x00022d65
   22f10:	00022d65 	.word	0x00022d65
   22f14:	00022d65 	.word	0x00022d65
   22f18:	00022d65 	.word	0x00022d65
   22f1c:	00022d65 	.word	0x00022d65
   22f20:	00022e03 	.word	0x00022e03
   22f24:	00022d65 	.word	0x00022d65
   22f28:	00022faf 	.word	0x00022faf
   22f2c:	00023011 	.word	0x00023011
   22f30:	00022e03 	.word	0x00022e03
   22f34:	00022e03 	.word	0x00022e03
   22f38:	00022e03 	.word	0x00022e03
   22f3c:	00022d65 	.word	0x00022d65
   22f40:	00023011 	.word	0x00023011
   22f44:	00022d65 	.word	0x00022d65
   22f48:	00022d65 	.word	0x00022d65
   22f4c:	00022d65 	.word	0x00022d65
   22f50:	00022d65 	.word	0x00022d65
   22f54:	00023097 	.word	0x00023097
   22f58:	00023063 	.word	0x00023063
   22f5c:	00023067 	.word	0x00023067
   22f60:	00022d65 	.word	0x00022d65
   22f64:	00022d65 	.word	0x00022d65
   22f68:	00022f95 	.word	0x00022f95
   22f6c:	00022d65 	.word	0x00022d65
   22f70:	00023063 	.word	0x00023063
   22f74:	00022d65 	.word	0x00022d65
   22f78:	00022d65 	.word	0x00022d65
   22f7c:	00023063 	.word	0x00023063
			OUTC('%');
   22f80:	4651      	mov	r1, sl
   22f82:	4638      	mov	r0, r7
   22f84:	9b03      	ldr	r3, [sp, #12]
   22f86:	4798      	blx	r3
   22f88:	2800      	cmp	r0, #0
   22f8a:	f6bf ae80 	bge.w	22c8e <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
   22f8e:	b021      	add	sp, #132	; 0x84
   22f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bps = (const char *)value.ptr;
   22f94:	4604      	mov	r4, r0
			size_t len = strlen(bps);
   22f96:	f7fa f86b 	bl	1d070 <strlen>
			if ((precision >= 0)
   22f9a:	2d00      	cmp	r5, #0
   22f9c:	db02      	blt.n	22fa4 <cbvprintf+0x344>
   22f9e:	42a8      	cmp	r0, r5
   22fa0:	bf28      	it	cs
   22fa2:	4628      	movcs	r0, r5
		char sign = 0;
   22fa4:	2600      	movs	r6, #0
			bpe = bps + len;
   22fa6:	eb04 0800 	add.w	r8, r4, r0
		if (bps == NULL) {
   22faa:	b934      	cbnz	r4, 22fba <cbvprintf+0x35a>
   22fac:	e6da      	b.n	22d64 <cbvprintf+0x104>
		char sign = 0;
   22fae:	2600      	movs	r6, #0
			buf[0] = value.uint;
   22fb0:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
			bpe = buf + 1;
   22fb4:	f10d 0865 	add.w	r8, sp, #101	; 0x65
				bps = encode_float(value.dbl, &conv, precision,
   22fb8:	ac19      	add	r4, sp, #100	; 0x64
		size_t nj_len = (bpe - bps);
   22fba:	eba8 0704 	sub.w	r7, r8, r4
		if (sign != 0) {
   22fbe:	b106      	cbz	r6, 22fc2 <cbvprintf+0x362>
			nj_len += 1U;
   22fc0:	3701      	adds	r7, #1
		if (conv.altform_0c) {
   22fc2:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   22fc6:	06cb      	lsls	r3, r1, #27
   22fc8:	f140 820a 	bpl.w	233e0 <cbvprintf+0x780>
			nj_len += 2U;
   22fcc:	3702      	adds	r7, #2
		nj_len += conv.pad0_value;
   22fce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
		if (conv.pad_fp) {
   22fd0:	0648      	lsls	r0, r1, #25
		nj_len += conv.pad0_value;
   22fd2:	4417      	add	r7, r2
		if (width > 0) {
   22fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			nj_len += conv.pad0_pre_exp;
   22fd6:	bf44      	itt	mi
   22fd8:	9a18      	ldrmi	r2, [sp, #96]	; 0x60
   22fda:	18bf      	addmi	r7, r7, r2
		if (width > 0) {
   22fdc:	2b00      	cmp	r3, #0
   22fde:	f340 8212 	ble.w	23406 <cbvprintf+0x7a6>
			if (!conv.flag_dash) {
   22fe2:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
			width -= (int)nj_len;
   22fe6:	1bdf      	subs	r7, r3, r7
			if (!conv.flag_dash) {
   22fe8:	0751      	lsls	r1, r2, #29
   22fea:	f3c2 0580 	ubfx	r5, r2, #2, #1
   22fee:	f100 8249 	bmi.w	23484 <cbvprintf+0x824>
				if (conv.flag_zero) {
   22ff2:	0653      	lsls	r3, r2, #25
   22ff4:	f140 8242 	bpl.w	2347c <cbvprintf+0x81c>
					if (sign != 0) {
   22ff8:	b146      	cbz	r6, 2300c <cbvprintf+0x3ac>
						OUTC(sign);
   22ffa:	4651      	mov	r1, sl
   22ffc:	4630      	mov	r0, r6
   22ffe:	9b03      	ldr	r3, [sp, #12]
   23000:	4798      	blx	r3
   23002:	2800      	cmp	r0, #0
   23004:	dbc3      	blt.n	22f8e <cbvprintf+0x32e>
						sign = 0;
   23006:	462e      	mov	r6, r5
						OUTC(sign);
   23008:	f109 0901 	add.w	r9, r9, #1
					pad = '0';
   2300c:	2530      	movs	r5, #48	; 0x30
   2300e:	e236      	b.n	2347e <cbvprintf+0x81e>
			if (conv.flag_plus) {
   23010:	0734      	lsls	r4, r6, #28
   23012:	d424      	bmi.n	2305e <cbvprintf+0x3fe>
				sign = ' ';
   23014:	f016 0610 	ands.w	r6, r6, #16
   23018:	bf18      	it	ne
   2301a:	2620      	movne	r6, #32
			if (value.sint < 0) {
   2301c:	2800      	cmp	r0, #0
   2301e:	f171 0300 	sbcs.w	r3, r1, #0
   23022:	da03      	bge.n	2302c <cbvprintf+0x3cc>
				sign = '-';
   23024:	262d      	movs	r6, #45	; 0x2d
				value.uint = -value.sint;
   23026:	4240      	negs	r0, r0
   23028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
			bps = encode_uint(value.uint, &conv, buf, bpe);
   2302c:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   23030:	9300      	str	r3, [sp, #0]
   23032:	aa16      	add	r2, sp, #88	; 0x58
   23034:	ab19      	add	r3, sp, #100	; 0x64
   23036:	f7ff fdc3 	bl	22bc0 <encode_uint>
   2303a:	4604      	mov	r4, r0
			if (precision >= 0) {
   2303c:	2d00      	cmp	r5, #0
   2303e:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   23042:	db0a      	blt.n	2305a <cbvprintf+0x3fa>
				conv.flag_zero = false;
   23044:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
   23048:	1b1a      	subs	r2, r3, r4
				conv.flag_zero = false;
   2304a:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   2304e:	4295      	cmp	r5, r2
				conv.flag_zero = false;
   23050:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
   23054:	d901      	bls.n	2305a <cbvprintf+0x3fa>
					conv.pad0_value = precision - (int)len;
   23056:	1aad      	subs	r5, r5, r2
   23058:	9517      	str	r5, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
   2305a:	4698      	mov	r8, r3
   2305c:	e7a5      	b.n	22faa <cbvprintf+0x34a>
				sign = '+';
   2305e:	262b      	movs	r6, #43	; 0x2b
   23060:	e7dc      	b.n	2301c <cbvprintf+0x3bc>
		switch (conv.specifier) {
   23062:	2600      	movs	r6, #0
   23064:	e7e2      	b.n	2302c <cbvprintf+0x3cc>
			if (value.ptr != NULL) {
   23066:	2800      	cmp	r0, #0
   23068:	f000 81b4 	beq.w	233d4 <cbvprintf+0x774>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   2306c:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   23070:	9300      	str	r3, [sp, #0]
   23072:	2100      	movs	r1, #0
   23074:	ab19      	add	r3, sp, #100	; 0x64
   23076:	aa16      	add	r2, sp, #88	; 0x58
   23078:	f7ff fda2 	bl	22bc0 <encode_uint>
				conv.altform_0c = true;
   2307c:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   23080:	4604      	mov	r4, r0
				conv.altform_0c = true;
   23082:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   23086:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   2308a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   2308e:	2600      	movs	r6, #0
				conv.altform_0c = true;
   23090:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
				goto prec_int_pad0;
   23094:	e7d2      	b.n	2303c <cbvprintf+0x3dc>
	switch ((enum length_mod_enum)conv->length_mod) {
   23096:	2a07      	cmp	r2, #7
   23098:	f63f ae64 	bhi.w	22d64 <cbvprintf+0x104>
   2309c:	e8df f002 	tbb	[pc, r2]
   230a0:	0f07040f 	.word	0x0f07040f
   230a4:	0f0f0a0a 	.word	0x0f0f0a0a
		*(signed char *)dp = (signed char)count;
   230a8:	f880 9000 	strb.w	r9, [r0]
		break;
   230ac:	e65a      	b.n	22d64 <cbvprintf+0x104>
		*(short *)dp = (short)count;
   230ae:	f8a0 9000 	strh.w	r9, [r0]
		break;
   230b2:	e657      	b.n	22d64 <cbvprintf+0x104>
		*(intmax_t *)dp = (intmax_t)count;
   230b4:	464a      	mov	r2, r9
   230b6:	17d3      	asrs	r3, r2, #31
   230b8:	e9c0 2300 	strd	r2, r3, [r0]
		break;
   230bc:	e652      	b.n	22d64 <cbvprintf+0x104>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   230be:	f8c0 9000 	str.w	r9, [r0]
		break;
   230c2:	e64f      	b.n	22d64 <cbvprintf+0x104>
		*sign = '-';
   230c4:	262d      	movs	r6, #45	; 0x2d
   230c6:	e6a8      	b.n	22e1a <cbvprintf+0x1ba>
		*sign = '+';
   230c8:	262b      	movs	r6, #43	; 0x2b
   230ca:	e6a6      	b.n	22e1a <cbvprintf+0x1ba>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
   230cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
   230d0:	429c      	cmp	r4, r3
   230d2:	d12d      	bne.n	23130 <cbvprintf+0x4d0>
		if (fract == 0) {
   230d4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   230d8:	4bbd      	ldr	r3, [pc, #756]	; (233d0 <cbvprintf+0x770>)
   230da:	430a      	orrs	r2, r1
   230dc:	5cfb      	ldrb	r3, [r7, r3]
   230de:	f003 0303 	and.w	r3, r3, #3
   230e2:	d117      	bne.n	23114 <cbvprintf+0x4b4>
			if (isupper((int)c)) {
   230e4:	2b01      	cmp	r3, #1
				*buf++ = 'I';
   230e6:	bf0b      	itete	eq
   230e8:	f644 6349 	movweq	r3, #20041	; 0x4e49
				*buf++ = 'i';
   230ec:	f646 6369 	movwne	r3, #28265	; 0x6e69
				*buf++ = 'I';
   230f0:	f8ad 3064 	strheq.w	r3, [sp, #100]	; 0x64
				*buf++ = 'i';
   230f4:	f8ad 3064 	strhne.w	r3, [sp, #100]	; 0x64
				*buf++ = 'F';
   230f8:	bf0c      	ite	eq
   230fa:	2346      	moveq	r3, #70	; 0x46
				*buf++ = 'f';
   230fc:	2366      	movne	r3, #102	; 0x66
				*buf++ = 'n';
   230fe:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
		conv->flag_zero = false;
   23102:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
   23106:	f10d 0867 	add.w	r8, sp, #103	; 0x67
		conv->flag_zero = false;
   2310a:	f36f 1386 	bfc	r3, #6, #1
   2310e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		return bps;
   23112:	e751      	b.n	22fb8 <cbvprintf+0x358>
			if (isupper((int)c)) {
   23114:	2b01      	cmp	r3, #1
				*buf++ = 'N';
   23116:	bf0b      	itete	eq
   23118:	f244 134e 	movweq	r3, #16718	; 0x414e
				*buf++ = 'n';
   2311c:	f246 136e 	movwne	r3, #24942	; 0x616e
				*buf++ = 'N';
   23120:	f8ad 3064 	strheq.w	r3, [sp, #100]	; 0x64
				*buf++ = 'n';
   23124:	f8ad 3064 	strhne.w	r3, [sp, #100]	; 0x64
				*buf++ = 'N';
   23128:	bf0c      	ite	eq
   2312a:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'n';
   2312c:	236e      	movne	r3, #110	; 0x6e
   2312e:	e7e6      	b.n	230fe <cbvprintf+0x49e>
	bool is_subnormal = (exp == 0) && (fract != 0);
   23130:	f04f 0c00 	mov.w	ip, #0
   23134:	e686      	b.n	22e44 <cbvprintf+0x1e4>
				exp--;
   23136:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   23138:	1892      	adds	r2, r2, r2
   2313a:	415b      	adcs	r3, r3
   2313c:	2a00      	cmp	r2, #0
   2313e:	f173 0100 	sbcs.w	r1, r3, #0
   23142:	daf8      	bge.n	23136 <cbvprintf+0x4d6>
   23144:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   23148:	e697      	b.n	22e7a <cbvprintf+0x21a>
			_rlrshift(&fract);
   2314a:	a812      	add	r0, sp, #72	; 0x48
   2314c:	f012 fe2c 	bl	35da8 <_rlrshift>
		while ((fract >> 32) >= (MAX_FP1 / 5)) {
   23150:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
   23154:	2300      	movs	r3, #0
   23156:	f8cd c020 	str.w	ip, [sp, #32]
   2315a:	9309      	str	r3, [sp, #36]	; 0x24
   2315c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   23160:	2900      	cmp	r1, #0
   23162:	bf08      	it	eq
   23164:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
   23168:	f108 0801 	add.w	r8, r8, #1
   2316c:	d2ed      	bcs.n	2314a <cbvprintf+0x4ea>
		fract *= 5U;
   2316e:	2005      	movs	r0, #5
   23170:	fba2 2300 	umull	r2, r3, r2, r0
   23174:	e9cd 2304 	strd	r2, r3, [sp, #16]
   23178:	9b05      	ldr	r3, [sp, #20]
		decexp--;
   2317a:	3c01      	subs	r4, #1
		fract *= 5U;
   2317c:	fb00 330c 	mla	r3, r0, ip, r3
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   23180:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   23184:	9305      	str	r3, [sp, #20]
   23186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2318a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   2318e:	2100      	movs	r1, #0
   23190:	2300      	movs	r3, #0
   23192:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   23196:	9805      	ldr	r0, [sp, #20]
   23198:	428b      	cmp	r3, r1
   2319a:	bf08      	it	eq
   2319c:	4282      	cmpeq	r2, r0
   2319e:	d208      	bcs.n	231b2 <cbvprintf+0x552>
   231a0:	f1bc 0f00 	cmp.w	ip, #0
   231a4:	f43f ae70 	beq.w	22e88 <cbvprintf+0x228>
   231a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   231ac:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   231b0:	e66a      	b.n	22e88 <cbvprintf+0x228>
			fract <<= 1;
   231b2:	9b04      	ldr	r3, [sp, #16]
			exp--;
   231b4:	f04f 0c01 	mov.w	ip, #1
			fract <<= 1;
   231b8:	18db      	adds	r3, r3, r3
   231ba:	9304      	str	r3, [sp, #16]
   231bc:	9b05      	ldr	r3, [sp, #20]
			exp--;
   231be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
   231c2:	415b      	adcs	r3, r3
   231c4:	9305      	str	r3, [sp, #20]
			exp--;
   231c6:	e7e2      	b.n	2318e <cbvprintf+0x52e>
		_ldiv5(&fract);
   231c8:	a812      	add	r0, sp, #72	; 0x48
   231ca:	f012 fdfe 	bl	35dca <_ldiv5>
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   231ce:	f04f 0c00 	mov.w	ip, #0
   231d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   231d4:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
		exp--;
   231d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   231dc:	3401      	adds	r4, #1
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   231de:	9304      	str	r3, [sp, #16]
   231e0:	2300      	movs	r3, #0
   231e2:	2100      	movs	r1, #0
   231e4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   231e8:	4299      	cmp	r1, r3
   231ea:	bf08      	it	eq
   231ec:	4570      	cmpeq	r0, lr
   231ee:	d207      	bcs.n	23200 <cbvprintf+0x5a0>
   231f0:	f1bc 0f00 	cmp.w	ip, #0
   231f4:	f43f ae4c 	beq.w	22e90 <cbvprintf+0x230>
   231f8:	9b04      	ldr	r3, [sp, #16]
   231fa:	e9cd 3e12 	strd	r3, lr, [sp, #72]	; 0x48
   231fe:	e647      	b.n	22e90 <cbvprintf+0x230>
			fract <<= 1;
   23200:	9b04      	ldr	r3, [sp, #16]
			exp--;
   23202:	f04f 0c01 	mov.w	ip, #1
			fract <<= 1;
   23206:	18db      	adds	r3, r3, r3
   23208:	9304      	str	r3, [sp, #16]
   2320a:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
   2320e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   23212:	e7e5      	b.n	231e0 <cbvprintf+0x580>
   23214:	2400      	movs	r4, #0
   23216:	46a0      	mov	r8, r4
   23218:	e63e      	b.n	22e98 <cbvprintf+0x238>
			c = 'f';
   2321a:	2766      	movs	r7, #102	; 0x66
			precision -= decexp;
   2321c:	1b2d      	subs	r5, r5, r4
   2321e:	e652      	b.n	22ec6 <cbvprintf+0x266>
	bool prune_zero = false;
   23220:	2300      	movs	r3, #0
   23222:	e659      	b.n	22ed8 <cbvprintf+0x278>
		exp = precision + 1;
   23224:	1c69      	adds	r1, r5, #1
	if (exp > 16) {
   23226:	2910      	cmp	r1, #16
   23228:	bfa8      	it	ge
   2322a:	2110      	movge	r1, #16
   2322c:	4688      	mov	r8, r1
   2322e:	2310      	movs	r3, #16
	uint64_t ltemp = BIT64(59);
   23230:	2200      	movs	r2, #0
   23232:	9311      	str	r3, [sp, #68]	; 0x44
   23234:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   23238:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
   2323c:	f1b8 0801 	subs.w	r8, r8, #1
   23240:	d222      	bcs.n	23288 <cbvprintf+0x628>
	fract += ltemp;
   23242:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23244:	9a14      	ldr	r2, [sp, #80]	; 0x50
   23246:	9915      	ldr	r1, [sp, #84]	; 0x54
   23248:	189b      	adds	r3, r3, r2
   2324a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2324c:	eb41 0202 	adc.w	r2, r1, r2
   23250:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & (0x0FU << 28)) {
   23254:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
   23258:	930e      	str	r3, [sp, #56]	; 0x38
   2325a:	2300      	movs	r3, #0
   2325c:	930f      	str	r3, [sp, #60]	; 0x3c
   2325e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   23262:	4313      	orrs	r3, r2
   23264:	d006      	beq.n	23274 <cbvprintf+0x614>
		_ldiv5(&fract);
   23266:	a812      	add	r0, sp, #72	; 0x48
   23268:	f012 fdaf 	bl	35dca <_ldiv5>
		_rlrshift(&fract);
   2326c:	a812      	add	r0, sp, #72	; 0x48
   2326e:	f012 fd9b 	bl	35da8 <_rlrshift>
		decexp++;
   23272:	3401      	adds	r4, #1
	if (c == 'f') {
   23274:	2f66      	cmp	r7, #102	; 0x66
   23276:	d17d      	bne.n	23374 <cbvprintf+0x714>
		if (decexp > 0) {
   23278:	2c00      	cmp	r4, #0
   2327a:	dc0c      	bgt.n	23296 <cbvprintf+0x636>
			*buf++ = '0';
   2327c:	2330      	movs	r3, #48	; 0x30
   2327e:	f10d 0865 	add.w	r8, sp, #101	; 0x65
   23282:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
   23286:	e015      	b.n	232b4 <cbvprintf+0x654>
		_ldiv5(&ltemp);
   23288:	a814      	add	r0, sp, #80	; 0x50
   2328a:	f012 fd9e 	bl	35dca <_ldiv5>
		_rlrshift(&ltemp);
   2328e:	a814      	add	r0, sp, #80	; 0x50
   23290:	f012 fd8a 	bl	35da8 <_rlrshift>
   23294:	e7d2      	b.n	2323c <cbvprintf+0x5dc>
	char *buf = bps;
   23296:	f10d 0864 	add.w	r8, sp, #100	; 0x64
			while (decexp > 0 && digit_count > 0) {
   2329a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2329c:	2a00      	cmp	r2, #0
   2329e:	dd07      	ble.n	232b0 <cbvprintf+0x650>
				*buf++ = _get_digit(&fract, &digit_count);
   232a0:	a911      	add	r1, sp, #68	; 0x44
   232a2:	a812      	add	r0, sp, #72	; 0x48
   232a4:	f012 fdb2 	bl	35e0c <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   232a8:	3c01      	subs	r4, #1
				*buf++ = _get_digit(&fract, &digit_count);
   232aa:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   232ae:	d1f4      	bne.n	2329a <cbvprintf+0x63a>
			conv->pad0_value = decexp;
   232b0:	9417      	str	r4, [sp, #92]	; 0x5c
			decexp = 0;
   232b2:	2400      	movs	r4, #0
		if (conv->flag_hash || (precision > 0)) {
   232b4:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   232b8:	0691      	lsls	r1, r2, #26
   232ba:	d401      	bmi.n	232c0 <cbvprintf+0x660>
   232bc:	2d00      	cmp	r5, #0
   232be:	dd1b      	ble.n	232f8 <cbvprintf+0x698>
			*buf++ = '.';
   232c0:	222e      	movs	r2, #46	; 0x2e
   232c2:	f808 2b01 	strb.w	r2, [r8], #1
		if (decexp < 0 && precision > 0) {
   232c6:	b194      	cbz	r4, 232ee <cbvprintf+0x68e>
   232c8:	2d00      	cmp	r5, #0
   232ca:	dd15      	ble.n	232f8 <cbvprintf+0x698>
			conv->pad0_value = -decexp;
   232cc:	4262      	negs	r2, r4
   232ce:	42aa      	cmp	r2, r5
   232d0:	bfa8      	it	ge
   232d2:	462a      	movge	r2, r5
			conv->pad_postdp = (conv->pad0_value > 0);
   232d4:	2a00      	cmp	r2, #0
			conv->pad0_value = -decexp;
   232d6:	9217      	str	r2, [sp, #92]	; 0x5c
			precision -= conv->pad0_value;
   232d8:	eba5 0502 	sub.w	r5, r5, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   232dc:	bfd4      	ite	le
   232de:	2200      	movle	r2, #0
   232e0:	2201      	movgt	r2, #1
   232e2:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   232e6:	f362 1145 	bfi	r1, r2, #5, #1
   232ea:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	while (precision > 0 && digit_count > 0) {
   232ee:	2d00      	cmp	r5, #0
   232f0:	dd02      	ble.n	232f8 <cbvprintf+0x698>
   232f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   232f4:	2a00      	cmp	r2, #0
   232f6:	dc53      	bgt.n	233a0 <cbvprintf+0x740>
	if (prune_zero) {
   232f8:	9b04      	ldr	r3, [sp, #16]
   232fa:	2b00      	cmp	r3, #0
   232fc:	d15b      	bne.n	233b6 <cbvprintf+0x756>
	conv->pad0_pre_exp = precision;
   232fe:	9518      	str	r5, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
   23300:	f007 02df 	and.w	r2, r7, #223	; 0xdf
   23304:	2a45      	cmp	r2, #69	; 0x45
   23306:	d123      	bne.n	23350 <cbvprintf+0x6f0>
		if (decexp < 0) {
   23308:	2c00      	cmp	r4, #0
			*buf++ = '-';
   2330a:	bfb4      	ite	lt
   2330c:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   2330e:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
   23310:	4641      	mov	r1, r8
			decexp = -decexp;
   23312:	bfb8      	it	lt
   23314:	4264      	neglt	r4, r4
		if (decexp >= 100) {
   23316:	2c63      	cmp	r4, #99	; 0x63
		*buf++ = c;
   23318:	f801 7b02 	strb.w	r7, [r1], #2
			*buf++ = '-';
   2331c:	f888 2001 	strb.w	r2, [r8, #1]
		if (decexp >= 100) {
   23320:	dd0a      	ble.n	23338 <cbvprintf+0x6d8>
			*buf++ = (decexp / 100) + '0';
   23322:	2064      	movs	r0, #100	; 0x64
   23324:	fb94 f2f0 	sdiv	r2, r4, r0
			decexp %= 100;
   23328:	fb00 4412 	mls	r4, r0, r2, r4
			*buf++ = (decexp / 100) + '0';
   2332c:	f102 0530 	add.w	r5, r2, #48	; 0x30
   23330:	f108 0103 	add.w	r1, r8, #3
   23334:	f888 5002 	strb.w	r5, [r8, #2]
		*buf++ = (decexp / 10) + '0';
   23338:	200a      	movs	r0, #10
   2333a:	fb94 f2f0 	sdiv	r2, r4, r0
   2333e:	4688      	mov	r8, r1
		*buf++ = (decexp % 10) + '0';
   23340:	fb00 4412 	mls	r4, r0, r2, r4
		*buf++ = (decexp / 10) + '0';
   23344:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   23348:	3430      	adds	r4, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   2334a:	f808 5b02 	strb.w	r5, [r8], #2
		*buf++ = (decexp % 10) + '0';
   2334e:	704c      	strb	r4, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
   23350:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   23352:	2a00      	cmp	r2, #0
   23354:	dc3a      	bgt.n	233cc <cbvprintf+0x76c>
   23356:	9a18      	ldr	r2, [sp, #96]	; 0x60
   23358:	2a00      	cmp	r2, #0
   2335a:	bfd4      	ite	le
   2335c:	2200      	movle	r2, #0
   2335e:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
   23360:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   23364:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
   23368:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
   2336a:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
   2336e:	f888 2000 	strb.w	r2, [r8]
	return bps;
   23372:	e621      	b.n	22fb8 <cbvprintf+0x358>
		*buf = _get_digit(&fract, &digit_count);
   23374:	a911      	add	r1, sp, #68	; 0x44
   23376:	a812      	add	r0, sp, #72	; 0x48
   23378:	f012 fd48 	bl	35e0c <_get_digit>
		if (conv->flag_hash || (precision > 0)) {
   2337c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		if (*buf++ != '0') {
   23380:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   23382:	bf18      	it	ne
   23384:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
   23388:	069a      	lsls	r2, r3, #26
		*buf = _get_digit(&fract, &digit_count);
   2338a:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
		if (conv->flag_hash || (precision > 0)) {
   2338e:	d401      	bmi.n	23394 <cbvprintf+0x734>
   23390:	2d00      	cmp	r5, #0
   23392:	dd0d      	ble.n	233b0 <cbvprintf+0x750>
			*buf++ = '.';
   23394:	232e      	movs	r3, #46	; 0x2e
   23396:	f10d 0866 	add.w	r8, sp, #102	; 0x66
   2339a:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
   2339e:	e7a6      	b.n	232ee <cbvprintf+0x68e>
		*buf++ = _get_digit(&fract, &digit_count);
   233a0:	a911      	add	r1, sp, #68	; 0x44
   233a2:	a812      	add	r0, sp, #72	; 0x48
   233a4:	f012 fd32 	bl	35e0c <_get_digit>
		precision--;
   233a8:	3d01      	subs	r5, #1
		*buf++ = _get_digit(&fract, &digit_count);
   233aa:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   233ae:	e79e      	b.n	232ee <cbvprintf+0x68e>
		if (*buf++ != '0') {
   233b0:	f10d 0865 	add.w	r8, sp, #101	; 0x65
   233b4:	e7a0      	b.n	232f8 <cbvprintf+0x698>
		conv->pad0_pre_exp = 0;
   233b6:	2200      	movs	r2, #0
   233b8:	9218      	str	r2, [sp, #96]	; 0x60
		while (*--buf == '0') {
   233ba:	4641      	mov	r1, r8
   233bc:	f818 2d01 	ldrb.w	r2, [r8, #-1]!
   233c0:	2a30      	cmp	r2, #48	; 0x30
   233c2:	d0fa      	beq.n	233ba <cbvprintf+0x75a>
		if (*buf != '.') {
   233c4:	2a2e      	cmp	r2, #46	; 0x2e
   233c6:	bf18      	it	ne
   233c8:	4688      	movne	r8, r1
   233ca:	e799      	b.n	23300 <cbvprintf+0x6a0>
		|| (conv->pad0_pre_exp > 0);
   233cc:	2201      	movs	r2, #1
   233ce:	e7c7      	b.n	23360 <cbvprintf+0x700>
   233d0:	0003d1dc 	.word	0x0003d1dc
			bpe = bps + 5;
   233d4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 235b4 <cbvprintf+0x954>
		char sign = 0;
   233d8:	4606      	mov	r6, r0
			bps = "(nil)";
   233da:	f1a8 0405 	sub.w	r4, r8, #5
   233de:	e5ec      	b.n	22fba <cbvprintf+0x35a>
		} else if (conv.altform_0) {
   233e0:	070d      	lsls	r5, r1, #28
			nj_len += 1U;
   233e2:	bf48      	it	mi
   233e4:	3701      	addmi	r7, #1
   233e6:	e5f2      	b.n	22fce <cbvprintf+0x36e>
					OUTC(pad);
   233e8:	4651      	mov	r1, sl
   233ea:	4628      	mov	r0, r5
   233ec:	9b03      	ldr	r3, [sp, #12]
   233ee:	4798      	blx	r3
   233f0:	2800      	cmp	r0, #0
   233f2:	f6ff adcc 	blt.w	22f8e <cbvprintf+0x32e>
   233f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   233f8:	eba7 0903 	sub.w	r9, r7, r3
				while (width-- > 0) {
   233fc:	2b00      	cmp	r3, #0
   233fe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   23402:	930a      	str	r3, [sp, #40]	; 0x28
   23404:	dcf0      	bgt.n	233e8 <cbvprintf+0x788>
		if (sign != 0) {
   23406:	b146      	cbz	r6, 2341a <cbvprintf+0x7ba>
			OUTC(sign);
   23408:	4651      	mov	r1, sl
   2340a:	4630      	mov	r0, r6
   2340c:	9b03      	ldr	r3, [sp, #12]
   2340e:	4798      	blx	r3
   23410:	2800      	cmp	r0, #0
   23412:	f6ff adbc 	blt.w	22f8e <cbvprintf+0x32e>
   23416:	f109 0901 	add.w	r9, r9, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv.pad_fp) {
   2341a:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   2341e:	0650      	lsls	r0, r2, #25
   23420:	f140 8081 	bpl.w	23526 <cbvprintf+0x8c6>
			if (conv.specifier_a) {
   23424:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
   23428:	2a00      	cmp	r2, #0
   2342a:	db2d      	blt.n	23488 <cbvprintf+0x828>
   2342c:	eba9 0904 	sub.w	r9, r9, r4
				while (isdigit((int)*cp)) {
   23430:	7820      	ldrb	r0, [r4, #0]
   23432:	4b5f      	ldr	r3, [pc, #380]	; (235b0 <cbvprintf+0x950>)
   23434:	4625      	mov	r5, r4
   23436:	5cc2      	ldrb	r2, [r0, r3]
   23438:	eb09 0604 	add.w	r6, r9, r4
   2343c:	0751      	lsls	r1, r2, #29
   2343e:	f104 0401 	add.w	r4, r4, #1
   23442:	d445      	bmi.n	234d0 <cbvprintf+0x870>
				if (!conv.pad_postdp) {
   23444:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv.pad0_value;
   23448:	9c17      	ldr	r4, [sp, #92]	; 0x5c
				if (!conv.pad_postdp) {
   2344a:	0692      	lsls	r2, r2, #26
   2344c:	d406      	bmi.n	2345c <cbvprintf+0x7fc>
   2344e:	19a7      	adds	r7, r4, r6
					while (pad_len-- > 0) {
   23450:	2c00      	cmp	r4, #0
   23452:	eba7 0604 	sub.w	r6, r7, r4
   23456:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   2345a:	dc3f      	bgt.n	234dc <cbvprintf+0x87c>
				if (*cp == '.') {
   2345c:	7828      	ldrb	r0, [r5, #0]
   2345e:	282e      	cmp	r0, #46	; 0x2e
   23460:	d10a      	bne.n	23478 <cbvprintf+0x818>
					OUTC(*cp++);
   23462:	4651      	mov	r1, sl
   23464:	9b03      	ldr	r3, [sp, #12]
   23466:	4798      	blx	r3
						OUTC('0');
   23468:	2800      	cmp	r0, #0
   2346a:	f6ff ad90 	blt.w	22f8e <cbvprintf+0x32e>
					while (pad_len-- > 0) {
   2346e:	2c00      	cmp	r4, #0
						OUTC('0');
   23470:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   23474:	dc39      	bgt.n	234ea <cbvprintf+0x88a>
					OUTC(*cp++);
   23476:	3501      	adds	r5, #1
   23478:	1b76      	subs	r6, r6, r5
   2347a:	e042      	b.n	23502 <cbvprintf+0x8a2>
				char pad = ' ';
   2347c:	2520      	movs	r5, #32
					pad = '0';
   2347e:	970a      	str	r7, [sp, #40]	; 0x28
   23480:	444f      	add	r7, r9
   23482:	e7b8      	b.n	233f6 <cbvprintf+0x796>
			width -= (int)nj_len;
   23484:	970a      	str	r7, [sp, #40]	; 0x28
   23486:	e7be      	b.n	23406 <cbvprintf+0x7a6>
			if (conv.specifier_a) {
   23488:	4625      	mov	r5, r4
   2348a:	eba9 0904 	sub.w	r9, r9, r4
   2348e:	462f      	mov	r7, r5
   23490:	eb09 0405 	add.w	r4, r9, r5
				while (*cp != 'p') {
   23494:	f815 0b01 	ldrb.w	r0, [r5], #1
   23498:	2870      	cmp	r0, #112	; 0x70
   2349a:	d113      	bne.n	234c4 <cbvprintf+0x864>
			while (pad_len-- > 0) {
   2349c:	9d18      	ldr	r5, [sp, #96]	; 0x60
   2349e:	4425      	add	r5, r4
   234a0:	1b2a      	subs	r2, r5, r4
   234a2:	2a00      	cmp	r2, #0
   234a4:	dc36      	bgt.n	23514 <cbvprintf+0x8b4>
			OUTS(cp, bpe);
   234a6:	4643      	mov	r3, r8
   234a8:	463a      	mov	r2, r7
   234aa:	4651      	mov	r1, sl
   234ac:	9803      	ldr	r0, [sp, #12]
   234ae:	f012 fcc4 	bl	35e3a <outs>
   234b2:	2800      	cmp	r0, #0
   234b4:	f6ff ad6b 	blt.w	22f8e <cbvprintf+0x32e>
   234b8:	4420      	add	r0, r4
   234ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			while (pad_len-- > 0) {
   234bc:	4681      	mov	r9, r0
   234be:	4403      	add	r3, r0
   234c0:	461d      	mov	r5, r3
   234c2:	e06f      	b.n	235a4 <cbvprintf+0x944>
					OUTC(*cp++);
   234c4:	4651      	mov	r1, sl
   234c6:	9b03      	ldr	r3, [sp, #12]
   234c8:	4798      	blx	r3
   234ca:	2800      	cmp	r0, #0
   234cc:	dadf      	bge.n	2348e <cbvprintf+0x82e>
   234ce:	e55e      	b.n	22f8e <cbvprintf+0x32e>
					OUTC(*cp++);
   234d0:	4651      	mov	r1, sl
   234d2:	9b03      	ldr	r3, [sp, #12]
   234d4:	4798      	blx	r3
   234d6:	2800      	cmp	r0, #0
   234d8:	daaa      	bge.n	23430 <cbvprintf+0x7d0>
   234da:	e558      	b.n	22f8e <cbvprintf+0x32e>
						OUTC('0');
   234dc:	4651      	mov	r1, sl
   234de:	2030      	movs	r0, #48	; 0x30
   234e0:	9b03      	ldr	r3, [sp, #12]
   234e2:	4798      	blx	r3
   234e4:	2800      	cmp	r0, #0
   234e6:	dab3      	bge.n	23450 <cbvprintf+0x7f0>
   234e8:	e551      	b.n	22f8e <cbvprintf+0x32e>
						OUTC('0');
   234ea:	4651      	mov	r1, sl
   234ec:	2030      	movs	r0, #48	; 0x30
   234ee:	9b03      	ldr	r3, [sp, #12]
   234f0:	4798      	blx	r3
   234f2:	3c01      	subs	r4, #1
   234f4:	e7b8      	b.n	23468 <cbvprintf+0x808>
					OUTC(*cp++);
   234f6:	4651      	mov	r1, sl
   234f8:	9b03      	ldr	r3, [sp, #12]
   234fa:	4798      	blx	r3
   234fc:	2800      	cmp	r0, #0
   234fe:	f6ff ad46 	blt.w	22f8e <cbvprintf+0x32e>
				while (isdigit((int)*cp)) {
   23502:	4b2b      	ldr	r3, [pc, #172]	; (235b0 <cbvprintf+0x950>)
   23504:	462f      	mov	r7, r5
   23506:	1974      	adds	r4, r6, r5
   23508:	f815 0b01 	ldrb.w	r0, [r5], #1
   2350c:	5cc2      	ldrb	r2, [r0, r3]
   2350e:	0753      	lsls	r3, r2, #29
   23510:	d4f1      	bmi.n	234f6 <cbvprintf+0x896>
   23512:	e7c3      	b.n	2349c <cbvprintf+0x83c>
				OUTC('0');
   23514:	4651      	mov	r1, sl
   23516:	2030      	movs	r0, #48	; 0x30
   23518:	9b03      	ldr	r3, [sp, #12]
   2351a:	4798      	blx	r3
   2351c:	2800      	cmp	r0, #0
   2351e:	f6ff ad36 	blt.w	22f8e <cbvprintf+0x32e>
   23522:	3401      	adds	r4, #1
   23524:	e7bc      	b.n	234a0 <cbvprintf+0x840>
			if (conv.altform_0c | conv.altform_0) {
   23526:	06d1      	lsls	r1, r2, #27
   23528:	d401      	bmi.n	2352e <cbvprintf+0x8ce>
   2352a:	0712      	lsls	r2, r2, #28
   2352c:	d508      	bpl.n	23540 <cbvprintf+0x8e0>
				OUTC('0');
   2352e:	4651      	mov	r1, sl
   23530:	2030      	movs	r0, #48	; 0x30
   23532:	9b03      	ldr	r3, [sp, #12]
   23534:	4798      	blx	r3
   23536:	2800      	cmp	r0, #0
   23538:	f6ff ad29 	blt.w	22f8e <cbvprintf+0x32e>
   2353c:	f109 0901 	add.w	r9, r9, #1
			if (conv.altform_0c) {
   23540:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   23544:	06d3      	lsls	r3, r2, #27
   23546:	d509      	bpl.n	2355c <cbvprintf+0x8fc>
				OUTC(conv.specifier);
   23548:	4651      	mov	r1, sl
   2354a:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
   2354e:	9b03      	ldr	r3, [sp, #12]
   23550:	4798      	blx	r3
   23552:	2800      	cmp	r0, #0
   23554:	f6ff ad1b 	blt.w	22f8e <cbvprintf+0x32e>
   23558:	f109 0901 	add.w	r9, r9, #1
			while (pad_len-- > 0) {
   2355c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   2355e:	444d      	add	r5, r9
   23560:	eba5 0209 	sub.w	r2, r5, r9
   23564:	2a00      	cmp	r2, #0
   23566:	dc0a      	bgt.n	2357e <cbvprintf+0x91e>
			OUTS(bps, bpe);
   23568:	4643      	mov	r3, r8
   2356a:	4622      	mov	r2, r4
   2356c:	4651      	mov	r1, sl
   2356e:	9803      	ldr	r0, [sp, #12]
   23570:	f012 fc63 	bl	35e3a <outs>
   23574:	2800      	cmp	r0, #0
   23576:	f6ff ad0a 	blt.w	22f8e <cbvprintf+0x32e>
   2357a:	4448      	add	r0, r9
   2357c:	e79d      	b.n	234ba <cbvprintf+0x85a>
				OUTC('0');
   2357e:	4651      	mov	r1, sl
   23580:	2030      	movs	r0, #48	; 0x30
   23582:	9b03      	ldr	r3, [sp, #12]
   23584:	4798      	blx	r3
   23586:	2800      	cmp	r0, #0
   23588:	f6ff ad01 	blt.w	22f8e <cbvprintf+0x32e>
   2358c:	f109 0901 	add.w	r9, r9, #1
   23590:	e7e6      	b.n	23560 <cbvprintf+0x900>
			OUTC(' ');
   23592:	4651      	mov	r1, sl
   23594:	2020      	movs	r0, #32
   23596:	9b03      	ldr	r3, [sp, #12]
   23598:	4798      	blx	r3
   2359a:	2800      	cmp	r0, #0
   2359c:	f6ff acf7 	blt.w	22f8e <cbvprintf+0x32e>
   235a0:	f109 0901 	add.w	r9, r9, #1
		while (width > 0) {
   235a4:	eba5 0309 	sub.w	r3, r5, r9
   235a8:	2b00      	cmp	r3, #0
   235aa:	dcf2      	bgt.n	23592 <cbvprintf+0x932>
   235ac:	f7ff bbda 	b.w	22d64 <cbvprintf+0x104>
   235b0:	0003d1dc 	.word	0x0003d1dc
   235b4:	0003b7c6 	.word	0x0003b7c6

000235b8 <nordicsemi_nrf91_init>:
   235b8:	f04f 0220 	mov.w	r2, #32
   235bc:	f3ef 8311 	mrs	r3, BASEPRI
   235c0:	f382 8811 	msr	BASEPRI, r2
   235c4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   235c8:	2101      	movs	r1, #1
   235ca:	4a04      	ldr	r2, [pc, #16]	; (235dc <nordicsemi_nrf91_init+0x24>)
   235cc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   235d0:	f383 8811 	msr	BASEPRI, r3
   235d4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   235d8:	2000      	movs	r0, #0
   235da:	4770      	bx	lr
   235dc:	40039000 	.word	0x40039000

000235e0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   235e0:	b120      	cbz	r0, 235ec <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   235e2:	4b03      	ldr	r3, [pc, #12]	; (235f0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   235e4:	0180      	lsls	r0, r0, #6
   235e6:	f043 0301 	orr.w	r3, r3, #1
   235ea:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   235ec:	4770      	bx	lr
   235ee:	bf00      	nop
   235f0:	00039bb0 	.word	0x00039bb0

000235f4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   235f4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   235f6:	2200      	movs	r2, #0
{
   235f8:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   235fa:	490f      	ldr	r1, [pc, #60]	; (23638 <enable_logger+0x44>)
   235fc:	480f      	ldr	r0, [pc, #60]	; (2363c <enable_logger+0x48>)
   235fe:	f015 f8c9 	bl	38794 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23602:	2200      	movs	r2, #0
   23604:	2300      	movs	r3, #0
   23606:	2400      	movs	r4, #0
   23608:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2360c:	230e      	movs	r3, #14
   2360e:	4d0c      	ldr	r5, [pc, #48]	; (23640 <enable_logger+0x4c>)
   23610:	e9cd 3403 	strd	r3, r4, [sp, #12]
   23614:	f44f 7240 	mov.w	r2, #768	; 0x300
   23618:	4628      	mov	r0, r5
   2361a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2361e:	4b09      	ldr	r3, [pc, #36]	; (23644 <enable_logger+0x50>)
   23620:	4909      	ldr	r1, [pc, #36]	; (23648 <enable_logger+0x54>)
   23622:	9400      	str	r4, [sp, #0]
   23624:	f010 fcec 	bl	34000 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   23628:	4908      	ldr	r1, [pc, #32]	; (2364c <enable_logger+0x58>)
   2362a:	4628      	mov	r0, r5
   2362c:	f014 ffdc 	bl	385e8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   23630:	4620      	mov	r0, r4
   23632:	b009      	add	sp, #36	; 0x24
   23634:	bd30      	pop	{r4, r5, pc}
   23636:	bf00      	nop
   23638:	00023651 	.word	0x00023651
   2363c:	20021408 	.word	0x20021408
   23640:	20021440 	.word	0x20021440
   23644:	00023a85 	.word	0x00023a85
   23648:	2002e4e0 	.word	0x2002e4e0
   2364c:	0003b7cb 	.word	0x0003b7cb

00023650 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   23650:	4801      	ldr	r0, [pc, #4]	; (23658 <log_process_thread_timer_expiry_fn+0x8>)
   23652:	f010 bc25 	b.w	33ea0 <z_impl_k_sem_give>
   23656:	bf00      	nop
   23658:	2002084c 	.word	0x2002084c

0002365c <z_log_get_s_mask>:
{
   2365c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2365e:	4605      	mov	r5, r0
	uint32_t mask = 0;
   23660:	2000      	movs	r0, #0
				mask |= BIT(arg);
   23662:	2701      	movs	r7, #1
	uint32_t arg = 0;
   23664:	4603      	mov	r3, r0
	bool arm = false;
   23666:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   23668:	4e0d      	ldr	r6, [pc, #52]	; (236a0 <z_log_get_s_mask+0x44>)
	while ((curr = *str++) && arg < nargs) {
   2366a:	f815 4b01 	ldrb.w	r4, [r5], #1
   2366e:	b10c      	cbz	r4, 23674 <z_log_get_s_mask+0x18>
   23670:	428b      	cmp	r3, r1
   23672:	d300      	bcc.n	23676 <z_log_get_s_mask+0x1a>
}
   23674:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   23676:	2c25      	cmp	r4, #37	; 0x25
   23678:	d102      	bne.n	23680 <z_log_get_s_mask+0x24>
			arm = !arm;
   2367a:	f082 0201 	eor.w	r2, r2, #1
   2367e:	e7f4      	b.n	2366a <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
   23680:	2a00      	cmp	r2, #0
   23682:	d0f2      	beq.n	2366a <z_log_get_s_mask+0xe>
   23684:	f814 c006 	ldrb.w	ip, [r4, r6]
   23688:	f01c 0f03 	tst.w	ip, #3
   2368c:	d0ed      	beq.n	2366a <z_log_get_s_mask+0xe>
			if (curr == 's') {
   2368e:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   23690:	bf04      	itt	eq
   23692:	fa07 f203 	lsleq.w	r2, r7, r3
   23696:	4310      	orreq	r0, r2
			arg++;
   23698:	3301      	adds	r3, #1
			arm = false;
   2369a:	2200      	movs	r2, #0
   2369c:	e7e5      	b.n	2366a <z_log_get_s_mask+0xe>
   2369e:	bf00      	nop
   236a0:	0003d1dc 	.word	0x0003d1dc

000236a4 <log_core_init>:
{
   236a4:	b508      	push	{r3, lr}
		log_msg_pool_init();
   236a6:	f000 fa4b 	bl	23b40 <log_msg_pool_init>
		log_list_init(&list);
   236aa:	4809      	ldr	r0, [pc, #36]	; (236d0 <log_core_init+0x2c>)
   236ac:	f012 fc95 	bl	35fda <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   236b0:	2304      	movs	r3, #4
   236b2:	2234      	movs	r2, #52	; 0x34
   236b4:	4907      	ldr	r1, [pc, #28]	; (236d4 <log_core_init+0x30>)
   236b6:	4808      	ldr	r0, [pc, #32]	; (236d8 <log_core_init+0x34>)
   236b8:	f014 fdcd 	bl	38256 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   236bc:	4b07      	ldr	r3, [pc, #28]	; (236dc <log_core_init+0x38>)
   236be:	4a08      	ldr	r2, [pc, #32]	; (236e0 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
   236c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   236c4:	601a      	str	r2, [r3, #0]
}
   236c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   236ca:	f000 bc85 	b.w	23fd8 <log_output_timestamp_freq_set>
   236ce:	bf00      	nop
   236d0:	20023428 	.word	0x20023428
   236d4:	20032520 	.word	0x20032520
   236d8:	20023430 	.word	0x20023430
   236dc:	200200e4 	.word	0x200200e4
   236e0:	00036019 	.word	0x00036019

000236e4 <dropped_notify>:
{
   236e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   236e6:	2500      	movs	r5, #0
   236e8:	4b0c      	ldr	r3, [pc, #48]	; (2371c <dropped_notify+0x38>)
   236ea:	e8d3 7fef 	ldaex	r7, [r3]
   236ee:	e8c3 5fe2 	stlex	r2, r5, [r3]
   236f2:	2a00      	cmp	r2, #0
   236f4:	d1f9      	bne.n	236ea <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   236f6:	4c0a      	ldr	r4, [pc, #40]	; (23720 <dropped_notify+0x3c>)
   236f8:	4e0a      	ldr	r6, [pc, #40]	; (23724 <dropped_notify+0x40>)
   236fa:	1b36      	subs	r6, r6, r4
   236fc:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   236fe:	42b5      	cmp	r5, r6
   23700:	db00      	blt.n	23704 <dropped_notify+0x20>
}
   23702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   23704:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   23706:	795b      	ldrb	r3, [r3, #5]
   23708:	b12b      	cbz	r3, 23716 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
   2370a:	6823      	ldr	r3, [r4, #0]
   2370c:	68db      	ldr	r3, [r3, #12]
   2370e:	b113      	cbz	r3, 23716 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
   23710:	4639      	mov	r1, r7
   23712:	4620      	mov	r0, r4
   23714:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   23716:	3501      	adds	r5, #1
   23718:	3410      	adds	r4, #16
   2371a:	e7f0      	b.n	236fe <dropped_notify+0x1a>
   2371c:	20023420 	.word	0x20023420
   23720:	00039b38 	.word	0x00039b38
   23724:	00039b48 	.word	0x00039b48

00023728 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23728:	4b04      	ldr	r3, [pc, #16]	; (2373c <log_dropped+0x14>)
   2372a:	e8d3 2fef 	ldaex	r2, [r3]
   2372e:	3201      	adds	r2, #1
   23730:	e8c3 2fe1 	stlex	r1, r2, [r3]
   23734:	2900      	cmp	r1, #0
   23736:	d1f8      	bne.n	2372a <log_dropped+0x2>
}
   23738:	4770      	bx	lr
   2373a:	bf00      	nop
   2373c:	20023420 	.word	0x20023420

00023740 <log_source_name_get>:
   23740:	4a04      	ldr	r2, [pc, #16]	; (23754 <log_source_name_get+0x14>)
   23742:	4b05      	ldr	r3, [pc, #20]	; (23758 <log_source_name_get+0x18>)
   23744:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   23746:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   2374a:	bf34      	ite	cc
   2374c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   23750:	2000      	movcs	r0, #0
}
   23752:	4770      	bx	lr
   23754:	00039a50 	.word	0x00039a50
   23758:	00039b38 	.word	0x00039b38

0002375c <log_backend_enable>:
	id += backend - log_backend_get(0);
   2375c:	4b09      	ldr	r3, [pc, #36]	; (23784 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   2375e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   23760:	1ac3      	subs	r3, r0, r3
   23762:	111b      	asrs	r3, r3, #4
   23764:	3301      	adds	r3, #1
{
   23766:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   23768:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
   2376a:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
   2376c:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
   2376e:	4c06      	ldr	r4, [pc, #24]	; (23788 <log_backend_enable+0x2c>)
   23770:	715a      	strb	r2, [r3, #5]
   23772:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   23774:	6019      	str	r1, [r3, #0]
   23776:	b912      	cbnz	r2, 2377e <log_backend_enable+0x22>
   23778:	4804      	ldr	r0, [pc, #16]	; (2378c <log_backend_enable+0x30>)
   2377a:	f010 fb91 	bl	33ea0 <z_impl_k_sem_give>
	backend_attached = true;
   2377e:	2301      	movs	r3, #1
   23780:	7023      	strb	r3, [r4, #0]
}
   23782:	bd10      	pop	{r4, pc}
   23784:	00039b38 	.word	0x00039b38
   23788:	2002b79e 	.word	0x2002b79e
   2378c:	2002084c 	.word	0x2002084c

00023790 <log_init>:
{
   23790:	b570      	push	{r4, r5, r6, lr}
   23792:	4b0f      	ldr	r3, [pc, #60]	; (237d0 <log_init+0x40>)
   23794:	e8d3 5fef 	ldaex	r5, [r3]
   23798:	1c6a      	adds	r2, r5, #1
   2379a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2379e:	2900      	cmp	r1, #0
   237a0:	d1f8      	bne.n	23794 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
   237a2:	b92d      	cbnz	r5, 237b0 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
   237a4:	4c0b      	ldr	r4, [pc, #44]	; (237d4 <log_init+0x44>)
   237a6:	4e0c      	ldr	r6, [pc, #48]	; (237d8 <log_init+0x48>)
   237a8:	1b36      	subs	r6, r6, r4
   237aa:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   237ac:	42b5      	cmp	r5, r6
   237ae:	db00      	blt.n	237b2 <log_init+0x22>
}
   237b0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   237b2:	7b23      	ldrb	r3, [r4, #12]
   237b4:	b143      	cbz	r3, 237c8 <log_init+0x38>
			if (backend->api->init != NULL) {
   237b6:	6823      	ldr	r3, [r4, #0]
   237b8:	695b      	ldr	r3, [r3, #20]
   237ba:	b103      	cbz	r3, 237be <log_init+0x2e>
				backend->api->init();
   237bc:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   237be:	2204      	movs	r2, #4
   237c0:	2100      	movs	r1, #0
   237c2:	4620      	mov	r0, r4
   237c4:	f7ff ffca 	bl	2375c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   237c8:	3501      	adds	r5, #1
   237ca:	3410      	adds	r4, #16
   237cc:	e7ee      	b.n	237ac <log_init+0x1c>
   237ce:	bf00      	nop
   237d0:	20023424 	.word	0x20023424
   237d4:	00039b38 	.word	0x00039b38
   237d8:	00039b48 	.word	0x00039b48

000237dc <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   237dc:	4b15      	ldr	r3, [pc, #84]	; (23834 <log_strdup+0x58>)
{
   237de:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   237e0:	4298      	cmp	r0, r3
{
   237e2:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   237e4:	d302      	bcc.n	237ec <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   237e6:	4b14      	ldr	r3, [pc, #80]	; (23838 <log_strdup+0x5c>)
   237e8:	4298      	cmp	r0, r3
   237ea:	d31d      	bcc.n	23828 <log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   237ec:	2200      	movs	r2, #0
   237ee:	2300      	movs	r3, #0
   237f0:	4812      	ldr	r0, [pc, #72]	; (2383c <log_strdup+0x60>)
   237f2:	a901      	add	r1, sp, #4
   237f4:	f00f fda4 	bl	33340 <k_mem_slab_alloc>
	if (err != 0) {
   237f8:	4605      	mov	r5, r0
   237fa:	b9c0      	cbnz	r0, 2382e <log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   237fc:	2201      	movs	r2, #1
   237fe:	9b01      	ldr	r3, [sp, #4]
   23800:	e8d3 1fef 	ldaex	r1, [r3]
   23804:	e8c3 2fe0 	stlex	r0, r2, [r3]
   23808:	2800      	cmp	r0, #0
   2380a:	d1f9      	bne.n	23800 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   2380c:	9e01      	ldr	r6, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2380e:	222d      	movs	r2, #45	; 0x2d
   23810:	1d33      	adds	r3, r6, #4
   23812:	4618      	mov	r0, r3
   23814:	4621      	mov	r1, r4
   23816:	f015 fb0b 	bl	38e30 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   2381a:	227e      	movs	r2, #126	; 0x7e
   2381c:	4603      	mov	r3, r0
   2381e:	f886 2031 	strb.w	r2, [r6, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   23822:	f886 5032 	strb.w	r5, [r6, #50]	; 0x32
	return dup->buf;
   23826:	461c      	mov	r4, r3
}
   23828:	4620      	mov	r0, r4
   2382a:	b002      	add	sp, #8
   2382c:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   2382e:	4b04      	ldr	r3, [pc, #16]	; (23840 <log_strdup+0x64>)
   23830:	e7f9      	b.n	23826 <log_strdup+0x4a>
   23832:	bf00      	nop
   23834:	00039784 	.word	0x00039784
   23838:	0003d334 	.word	0x0003d334
   2383c:	20023430 	.word	0x20023430
   23840:	0003b7d3 	.word	0x0003b7d3

00023844 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   23844:	b148      	cbz	r0, 2385a <log_is_strdup+0x16>
   23846:	4b05      	ldr	r3, [pc, #20]	; (2385c <log_is_strdup+0x18>)
   23848:	4298      	cmp	r0, r3
   2384a:	d305      	bcc.n	23858 <log_is_strdup+0x14>
   2384c:	33d0      	adds	r3, #208	; 0xd0
   2384e:	4298      	cmp	r0, r3
   23850:	bf2c      	ite	cs
   23852:	2000      	movcs	r0, #0
   23854:	2001      	movcc	r0, #1
   23856:	4770      	bx	lr
   23858:	2000      	movs	r0, #0
}
   2385a:	4770      	bx	lr
   2385c:	20032520 	.word	0x20032520

00023860 <z_impl_log_process>:
{
   23860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   23864:	4b4a      	ldr	r3, [pc, #296]	; (23990 <z_impl_log_process+0x130>)
{
   23866:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   23868:	781b      	ldrb	r3, [r3, #0]
{
   2386a:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
   2386c:	b903      	cbnz	r3, 23870 <z_impl_log_process+0x10>
   2386e:	b340      	cbz	r0, 238c2 <z_impl_log_process+0x62>
	__asm__ volatile(
   23870:	f04f 0320 	mov.w	r3, #32
   23874:	f3ef 8611 	mrs	r6, BASEPRI
   23878:	f383 8811 	msr	BASEPRI, r3
   2387c:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   23880:	4844      	ldr	r0, [pc, #272]	; (23994 <z_impl_log_process+0x134>)
   23882:	f012 fbba 	bl	35ffa <log_list_head_get>
   23886:	4605      	mov	r5, r0
	__asm__ volatile(
   23888:	f386 8811 	msr	BASEPRI, r6
   2388c:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   23890:	b158      	cbz	r0, 238aa <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   23892:	4b41      	ldr	r3, [pc, #260]	; (23998 <z_impl_log_process+0x138>)
   23894:	e8d3 2fef 	ldaex	r2, [r3]
   23898:	3a01      	subs	r2, #1
   2389a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2389e:	2900      	cmp	r1, #0
   238a0:	d1f8      	bne.n	23894 <z_impl_log_process+0x34>
	if (!bypass) {
   238a2:	b194      	cbz	r4, 238ca <z_impl_log_process+0x6a>
	log_msg_put(msg);
   238a4:	4628      	mov	r0, r5
   238a6:	f012 fcbd 	bl	36224 <log_msg_put>
	if (!bypass && dropped_cnt) {
   238aa:	b924      	cbnz	r4, 238b6 <z_impl_log_process+0x56>
   238ac:	4b3b      	ldr	r3, [pc, #236]	; (2399c <z_impl_log_process+0x13c>)
   238ae:	681b      	ldr	r3, [r3, #0]
   238b0:	b10b      	cbz	r3, 238b6 <z_impl_log_process+0x56>
		dropped_notify();
   238b2:	f7ff ff17 	bl	236e4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   238b6:	4837      	ldr	r0, [pc, #220]	; (23994 <z_impl_log_process+0x134>)
   238b8:	f012 fb9d 	bl	35ff6 <log_list_head_peek>
   238bc:	1e04      	subs	r4, r0, #0
   238be:	bf18      	it	ne
   238c0:	2401      	movne	r4, #1
}
   238c2:	4620      	mov	r0, r4
   238c4:	b005      	add	sp, #20
   238c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   238ca:	4b35      	ldr	r3, [pc, #212]	; (239a0 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   238cc:	781b      	ldrb	r3, [r3, #0]
   238ce:	b9cb      	cbnz	r3, 23904 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   238d0:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   238d2:	07db      	lsls	r3, r3, #31
   238d4:	d416      	bmi.n	23904 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
   238d6:	f012 fcb4 	bl	36242 <log_msg_str_get>
   238da:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   238dc:	4628      	mov	r0, r5
   238de:	f012 fc7f 	bl	361e0 <log_msg_nargs_get>
   238e2:	4601      	mov	r1, r0
   238e4:	4640      	mov	r0, r8
   238e6:	f7ff feb9 	bl	2365c <z_log_get_s_mask>
   238ea:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   238ec:	4f2d      	ldr	r7, [pc, #180]	; (239a4 <z_impl_log_process+0x144>)
   238ee:	4b2e      	ldr	r3, [pc, #184]	; (239a8 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   238f0:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 239c4 <z_impl_log_process+0x164>
   238f4:	1bdb      	subs	r3, r3, r7
   238f6:	08db      	lsrs	r3, r3, #3
   238f8:	9303      	str	r3, [sp, #12]
   238fa:	4b2c      	ldr	r3, [pc, #176]	; (239ac <z_impl_log_process+0x14c>)
   238fc:	1bdb      	subs	r3, r3, r7
   238fe:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   23902:	b936      	cbnz	r6, 23912 <z_impl_log_process+0xb2>
   23904:	4e2a      	ldr	r6, [pc, #168]	; (239b0 <z_impl_log_process+0x150>)
   23906:	4f2b      	ldr	r7, [pc, #172]	; (239b4 <z_impl_log_process+0x154>)
   23908:	f04f 0800 	mov.w	r8, #0
   2390c:	1bbf      	subs	r7, r7, r6
   2390e:	113f      	asrs	r7, r7, #4
   23910:	e03a      	b.n	23988 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
   23912:	fab6 f186 	clz	r1, r6
   23916:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   2391a:	4649      	mov	r1, r9
   2391c:	4628      	mov	r0, r5
   2391e:	f012 fc62 	bl	361e6 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   23922:	4b25      	ldr	r3, [pc, #148]	; (239b8 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   23924:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   23926:	4298      	cmp	r0, r3
   23928:	d302      	bcc.n	23930 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   2392a:	4a24      	ldr	r2, [pc, #144]	; (239bc <z_impl_log_process+0x15c>)
   2392c:	4290      	cmp	r0, r2
   2392e:	d31a      	bcc.n	23966 <z_impl_log_process+0x106>
   23930:	4608      	mov	r0, r1
   23932:	f7ff ff87 	bl	23844 <log_is_strdup>
   23936:	4602      	mov	r2, r0
   23938:	b9a8      	cbnz	r0, 23966 <z_impl_log_process+0x106>
   2393a:	4b21      	ldr	r3, [pc, #132]	; (239c0 <z_impl_log_process+0x160>)
   2393c:	4299      	cmp	r1, r3
   2393e:	d012      	beq.n	23966 <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
   23940:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   23942:	9903      	ldr	r1, [sp, #12]
   23944:	f3c3 1389 	ubfx	r3, r3, #6, #10
   23948:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   2394a:	bf38      	it	cc
   2394c:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   23950:	ea4f 138a 	mov.w	r3, sl, lsl #6
   23954:	f043 0301 	orr.w	r3, r3, #1
   23958:	f8ad 3000 	strh.w	r3, [sp]
   2395c:	4649      	mov	r1, r9
   2395e:	4643      	mov	r3, r8
   23960:	4658      	mov	r0, fp
   23962:	f012 fb9c 	bl	3609e <log_3>
		mask &= ~BIT(idx);
   23966:	2301      	movs	r3, #1
   23968:	fa03 f109 	lsl.w	r1, r3, r9
   2396c:	ea26 0601 	bic.w	r6, r6, r1
   23970:	e7c7      	b.n	23902 <z_impl_log_process+0xa2>
	return backend->cb->active;
   23972:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   23974:	795b      	ldrb	r3, [r3, #5]
   23976:	b123      	cbz	r3, 23982 <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
   23978:	6833      	ldr	r3, [r6, #0]
   2397a:	4629      	mov	r1, r5
   2397c:	4630      	mov	r0, r6
   2397e:	681b      	ldr	r3, [r3, #0]
   23980:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   23982:	f108 0801 	add.w	r8, r8, #1
   23986:	3610      	adds	r6, #16
   23988:	45b8      	cmp	r8, r7
   2398a:	dbf2      	blt.n	23972 <z_impl_log_process+0x112>
   2398c:	e78a      	b.n	238a4 <z_impl_log_process+0x44>
   2398e:	bf00      	nop
   23990:	2002b79e 	.word	0x2002b79e
   23994:	20023428 	.word	0x20023428
   23998:	2002341c 	.word	0x2002341c
   2399c:	20023420 	.word	0x20023420
   239a0:	2002b79f 	.word	0x2002b79f
   239a4:	00039a50 	.word	0x00039a50
   239a8:	00039b38 	.word	0x00039b38
   239ac:	00039ad0 	.word	0x00039ad0
   239b0:	00039b38 	.word	0x00039b38
   239b4:	00039b48 	.word	0x00039b48
   239b8:	00039784 	.word	0x00039784
   239bc:	0003d334 	.word	0x0003d334
   239c0:	0003b7d3 	.word	0x0003b7d3
   239c4:	0003b7ed 	.word	0x0003b7ed

000239c8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   239c8:	4b27      	ldr	r3, [pc, #156]	; (23a68 <msg_finalize+0xa0>)
{
   239ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   239cc:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   239ce:	8141      	strh	r1, [r0, #10]
{
   239d0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   239d2:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   239d4:	4d25      	ldr	r5, [pc, #148]	; (23a6c <msg_finalize+0xa4>)
   239d6:	60e0      	str	r0, [r4, #12]
   239d8:	e8d5 3fef 	ldaex	r3, [r5]
   239dc:	3301      	adds	r3, #1
   239de:	e8c5 3fe2 	stlex	r2, r3, [r5]
   239e2:	2a00      	cmp	r2, #0
   239e4:	d1f8      	bne.n	239d8 <msg_finalize+0x10>
	__asm__ volatile(
   239e6:	f04f 0320 	mov.w	r3, #32
   239ea:	f3ef 8611 	mrs	r6, BASEPRI
   239ee:	f383 8811 	msr	BASEPRI, r3
   239f2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   239f6:	481e      	ldr	r0, [pc, #120]	; (23a70 <msg_finalize+0xa8>)
   239f8:	4621      	mov	r1, r4
   239fa:	f012 faf2 	bl	35fe2 <log_list_add_tail>
	__asm__ volatile(
   239fe:	f386 8811 	msr	BASEPRI, r6
   23a02:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   23a06:	4b1b      	ldr	r3, [pc, #108]	; (23a74 <msg_finalize+0xac>)
   23a08:	781b      	ldrb	r3, [r3, #0]
   23a0a:	b183      	cbz	r3, 23a2e <msg_finalize+0x66>
	__asm__ volatile(
   23a0c:	f04f 0320 	mov.w	r3, #32
   23a10:	f3ef 8411 	mrs	r4, BASEPRI
   23a14:	f383 8811 	msr	BASEPRI, r3
   23a18:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   23a1c:	2000      	movs	r0, #0
   23a1e:	f7ff ff1f 	bl	23860 <z_impl_log_process>
	__asm__ volatile(
   23a22:	f384 8811 	msr	BASEPRI, r4
   23a26:	f3bf 8f6f 	isb	sy
}
   23a2a:	b002      	add	sp, #8
   23a2c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   23a2e:	4a12      	ldr	r2, [pc, #72]	; (23a78 <msg_finalize+0xb0>)
   23a30:	682b      	ldr	r3, [r5, #0]
   23a32:	6812      	ldr	r2, [r2, #0]
   23a34:	2a00      	cmp	r2, #0
   23a36:	d0f8      	beq.n	23a2a <msg_finalize+0x62>
   23a38:	2b01      	cmp	r3, #1
   23a3a:	d10a      	bne.n	23a52 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   23a3c:	2200      	movs	r2, #0
   23a3e:	2300      	movs	r3, #0
   23a40:	480e      	ldr	r0, [pc, #56]	; (23a7c <msg_finalize+0xb4>)
   23a42:	e9cd 2300 	strd	r2, r3, [sp]
   23a46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   23a4a:	2300      	movs	r3, #0
   23a4c:	f010 fd62 	bl	34514 <z_impl_k_timer_start>
   23a50:	e7eb      	b.n	23a2a <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   23a52:	2b0a      	cmp	r3, #10
   23a54:	d1e9      	bne.n	23a2a <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   23a56:	4809      	ldr	r0, [pc, #36]	; (23a7c <msg_finalize+0xb4>)
   23a58:	f014 fea8 	bl	387ac <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   23a5c:	4808      	ldr	r0, [pc, #32]	; (23a80 <msg_finalize+0xb8>)
}
   23a5e:	b002      	add	sp, #8
   23a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23a64:	f010 ba1c 	b.w	33ea0 <z_impl_k_sem_give>
   23a68:	200200e4 	.word	0x200200e4
   23a6c:	2002341c 	.word	0x2002341c
   23a70:	20023428 	.word	0x20023428
   23a74:	2002b79f 	.word	0x2002b79f
   23a78:	2002344c 	.word	0x2002344c
   23a7c:	20021408 	.word	0x20021408
   23a80:	2002084c 	.word	0x2002084c

00023a84 <log_process_thread_func>:
{
   23a84:	b510      	push	{r4, lr}
	log_init();
   23a86:	f7ff fe83 	bl	23790 <log_init>
	return z_impl_k_current_get();
   23a8a:	f010 fa03 	bl	33e94 <z_impl_k_current_get>
	proc_tid = process_tid;
   23a8e:	4b0c      	ldr	r3, [pc, #48]	; (23ac0 <log_process_thread_func+0x3c>)
   23a90:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   23a92:	b130      	cbz	r0, 23aa2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   23a94:	4b0b      	ldr	r3, [pc, #44]	; (23ac4 <log_process_thread_func+0x40>)
	    process_tid &&
   23a96:	681b      	ldr	r3, [r3, #0]
   23a98:	2b09      	cmp	r3, #9
   23a9a:	dd02      	ble.n	23aa2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   23a9c:	480a      	ldr	r0, [pc, #40]	; (23ac8 <log_process_thread_func+0x44>)
   23a9e:	f010 f9ff 	bl	33ea0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   23aa2:	4c09      	ldr	r4, [pc, #36]	; (23ac8 <log_process_thread_func+0x44>)
   23aa4:	2000      	movs	r0, #0
   23aa6:	f7ff fedb 	bl	23860 <z_impl_log_process>
		if (log_process(false) == false) {
   23aaa:	2800      	cmp	r0, #0
   23aac:	d1fa      	bne.n	23aa4 <log_process_thread_func+0x20>
   23aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23ab6:	4620      	mov	r0, r4
   23ab8:	f010 fa18 	bl	33eec <z_impl_k_sem_take>
   23abc:	e7f2      	b.n	23aa4 <log_process_thread_func+0x20>
   23abe:	bf00      	nop
   23ac0:	2002344c 	.word	0x2002344c
   23ac4:	2002341c 	.word	0x2002341c
   23ac8:	2002084c 	.word	0x2002084c

00023acc <z_impl_log_panic>:
{
   23acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   23ace:	4f0e      	ldr	r7, [pc, #56]	; (23b08 <z_impl_log_panic+0x3c>)
   23ad0:	783d      	ldrb	r5, [r7, #0]
   23ad2:	b975      	cbnz	r5, 23af2 <z_impl_log_panic+0x26>
	log_init();
   23ad4:	f7ff fe5c 	bl	23790 <log_init>
	return __log_backends_end - __log_backends_start;
   23ad8:	4c0c      	ldr	r4, [pc, #48]	; (23b0c <z_impl_log_panic+0x40>)
   23ada:	4e0d      	ldr	r6, [pc, #52]	; (23b10 <z_impl_log_panic+0x44>)
   23adc:	1b36      	subs	r6, r6, r4
   23ade:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   23ae0:	42b5      	cmp	r5, r6
   23ae2:	db07      	blt.n	23af4 <z_impl_log_panic+0x28>
   23ae4:	2000      	movs	r0, #0
   23ae6:	f7ff febb 	bl	23860 <z_impl_log_process>
		while (log_process(false) == true) {
   23aea:	2800      	cmp	r0, #0
   23aec:	d1fa      	bne.n	23ae4 <z_impl_log_panic+0x18>
	panic_mode = true;
   23aee:	2301      	movs	r3, #1
   23af0:	703b      	strb	r3, [r7, #0]
}
   23af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   23af4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   23af6:	795b      	ldrb	r3, [r3, #5]
   23af8:	b11b      	cbz	r3, 23b02 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   23afa:	6823      	ldr	r3, [r4, #0]
   23afc:	4620      	mov	r0, r4
   23afe:	691b      	ldr	r3, [r3, #16]
   23b00:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   23b02:	3501      	adds	r5, #1
   23b04:	3410      	adds	r4, #16
   23b06:	e7eb      	b.n	23ae0 <z_impl_log_panic+0x14>
   23b08:	2002b79f 	.word	0x2002b79f
   23b0c:	00039b38 	.word	0x00039b38
   23b10:	00039b48 	.word	0x00039b48

00023b14 <log_free>:
{
   23b14:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   23b16:	3804      	subs	r0, #4
   23b18:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   23b1a:	e8d0 3fef 	ldaex	r3, [r0]
   23b1e:	1e5a      	subs	r2, r3, #1
   23b20:	e8c0 2fe1 	stlex	r1, r2, [r0]
   23b24:	2900      	cmp	r1, #0
   23b26:	d1f8      	bne.n	23b1a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   23b28:	2b01      	cmp	r3, #1
   23b2a:	d103      	bne.n	23b34 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   23b2c:	4803      	ldr	r0, [pc, #12]	; (23b3c <log_free+0x28>)
   23b2e:	a901      	add	r1, sp, #4
   23b30:	f00f fc38 	bl	333a4 <k_mem_slab_free>
}
   23b34:	b003      	add	sp, #12
   23b36:	f85d fb04 	ldr.w	pc, [sp], #4
   23b3a:	bf00      	nop
   23b3c:	20023430 	.word	0x20023430

00023b40 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   23b40:	2320      	movs	r3, #32
   23b42:	4902      	ldr	r1, [pc, #8]	; (23b4c <log_msg_pool_init+0xc>)
   23b44:	461a      	mov	r2, r3
   23b46:	4802      	ldr	r0, [pc, #8]	; (23b50 <log_msg_pool_init+0x10>)
   23b48:	f014 bb85 	b.w	38256 <k_mem_slab_init>
   23b4c:	200325f0 	.word	0x200325f0
   23b50:	20023450 	.word	0x20023450

00023b54 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   23b54:	2300      	movs	r3, #0
{
   23b56:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   23b58:	4d09      	ldr	r5, [pc, #36]	; (23b80 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   23b5a:	9301      	str	r3, [sp, #4]
   23b5c:	2001      	movs	r0, #1
   23b5e:	f7ff fe7f 	bl	23860 <z_impl_log_process>
   23b62:	4604      	mov	r4, r0
			log_dropped();
   23b64:	f7ff fde0 	bl	23728 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   23b68:	2200      	movs	r2, #0
   23b6a:	2300      	movs	r3, #0
   23b6c:	4628      	mov	r0, r5
   23b6e:	a901      	add	r1, sp, #4
   23b70:	f00f fbe6 	bl	33340 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   23b74:	b108      	cbz	r0, 23b7a <log_msg_no_space_handle+0x26>
   23b76:	2c00      	cmp	r4, #0
   23b78:	d1f0      	bne.n	23b5c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   23b7a:	9801      	ldr	r0, [sp, #4]
   23b7c:	b003      	add	sp, #12
   23b7e:	bd30      	pop	{r4, r5, pc}
   23b80:	20023450 	.word	0x20023450

00023b84 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   23b84:	2300      	movs	r3, #0
{
   23b86:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   23b88:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   23b8a:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   23b8c:	4806      	ldr	r0, [pc, #24]	; (23ba8 <log_msg_chunk_alloc+0x24>)
   23b8e:	2300      	movs	r3, #0
   23b90:	a901      	add	r1, sp, #4
   23b92:	f00f fbd5 	bl	33340 <k_mem_slab_alloc>
	if (err != 0) {
   23b96:	b110      	cbz	r0, 23b9e <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   23b98:	f7ff ffdc 	bl	23b54 <log_msg_no_space_handle>
   23b9c:	9001      	str	r0, [sp, #4]
}
   23b9e:	9801      	ldr	r0, [sp, #4]
   23ba0:	b003      	add	sp, #12
   23ba2:	f85d fb04 	ldr.w	pc, [sp], #4
   23ba6:	bf00      	nop
   23ba8:	20023450 	.word	0x20023450

00023bac <msg_free>:
{
   23bac:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   23bae:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   23bb0:	7a45      	ldrb	r5, [r0, #9]
{
   23bb2:	b085      	sub	sp, #20
   23bb4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   23bb6:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   23bb8:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   23bbc:	d41c      	bmi.n	23bf8 <msg_free+0x4c>
   23bbe:	b1dd      	cbz	r5, 23bf8 <msg_free+0x4c>
		uint32_t smask = 0;
   23bc0:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   23bc2:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   23bc4:	4631      	mov	r1, r6
   23bc6:	9801      	ldr	r0, [sp, #4]
   23bc8:	f012 fb0d 	bl	361e6 <log_msg_arg_get>
   23bcc:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   23bce:	f7ff fe39 	bl	23844 <log_is_strdup>
   23bd2:	b170      	cbz	r0, 23bf2 <msg_free+0x46>
				if (smask == 0) {
   23bd4:	b934      	cbnz	r4, 23be4 <msg_free+0x38>
					smask = z_log_get_s_mask(
   23bd6:	9b01      	ldr	r3, [sp, #4]
   23bd8:	4629      	mov	r1, r5
   23bda:	6918      	ldr	r0, [r3, #16]
   23bdc:	f7ff fd3e 	bl	2365c <z_log_get_s_mask>
					if (smask == 0) {
   23be0:	4604      	mov	r4, r0
   23be2:	b148      	cbz	r0, 23bf8 <msg_free+0x4c>
				if (smask & BIT(i)) {
   23be4:	fa24 f306 	lsr.w	r3, r4, r6
   23be8:	07d9      	lsls	r1, r3, #31
   23bea:	d502      	bpl.n	23bf2 <msg_free+0x46>
					log_free(buf);
   23bec:	4638      	mov	r0, r7
   23bee:	f7ff ff91 	bl	23b14 <log_free>
		for (i = 0; i < nargs; i++) {
   23bf2:	3601      	adds	r6, #1
   23bf4:	42ae      	cmp	r6, r5
   23bf6:	d3e5      	bcc.n	23bc4 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   23bf8:	9b01      	ldr	r3, [sp, #4]
   23bfa:	7a1a      	ldrb	r2, [r3, #8]
   23bfc:	0792      	lsls	r2, r2, #30
   23bfe:	d504      	bpl.n	23c0a <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   23c00:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   23c02:	4c08      	ldr	r4, [pc, #32]	; (23c24 <msg_free+0x78>)
   23c04:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   23c06:	9b03      	ldr	r3, [sp, #12]
   23c08:	b92b      	cbnz	r3, 23c16 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   23c0a:	4806      	ldr	r0, [pc, #24]	; (23c24 <msg_free+0x78>)
   23c0c:	a901      	add	r1, sp, #4
   23c0e:	f00f fbc9 	bl	333a4 <k_mem_slab_free>
}
   23c12:	b005      	add	sp, #20
   23c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   23c16:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   23c18:	4620      	mov	r0, r4
   23c1a:	a903      	add	r1, sp, #12
   23c1c:	f00f fbc2 	bl	333a4 <k_mem_slab_free>
		cont = next;
   23c20:	9503      	str	r5, [sp, #12]
   23c22:	e7f0      	b.n	23c06 <msg_free+0x5a>
   23c24:	20023450 	.word	0x20023450

00023c28 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   23c28:	b40e      	push	{r1, r2, r3}
   23c2a:	b503      	push	{r0, r1, lr}
   23c2c:	ab03      	add	r3, sp, #12
   23c2e:	f853 2b04 	ldr.w	r2, [r3], #4
   23c32:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   23c34:	4804      	ldr	r0, [pc, #16]	; (23c48 <print_formatted+0x20>)
	va_start(args, fmt);
   23c36:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   23c38:	f7ff f812 	bl	22c60 <cbvprintf>
	va_end(args);

	return length;
}
   23c3c:	b002      	add	sp, #8
   23c3e:	f85d eb04 	ldr.w	lr, [sp], #4
   23c42:	b003      	add	sp, #12
   23c44:	4770      	bx	lr
   23c46:	bf00      	nop
   23c48:	0003668f 	.word	0x0003668f

00023c4c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   23c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   23c50:	f011 0402 	ands.w	r4, r1, #2
{
   23c54:	b085      	sub	sp, #20
   23c56:	4606      	mov	r6, r0
   23c58:	4690      	mov	r8, r2
   23c5a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   23c5e:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   23c62:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   23c66:	d007      	beq.n	23c78 <prefix_print+0x2c>
	if (!format) {
   23c68:	f011 0f44 	tst.w	r1, #68	; 0x44
   23c6c:	d137      	bne.n	23cde <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   23c6e:	461a      	mov	r2, r3
   23c70:	4932      	ldr	r1, [pc, #200]	; (23d3c <prefix_print+0xf0>)
   23c72:	f7ff ffd9 	bl	23c28 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   23c76:	4604      	mov	r4, r0
	if (color) {
   23c78:	f1b9 0f00 	cmp.w	r9, #0
   23c7c:	d00a      	beq.n	23c94 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   23c7e:	4b30      	ldr	r3, [pc, #192]	; (23d40 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   23c80:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   23c82:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   23c86:	4b2f      	ldr	r3, [pc, #188]	; (23d44 <prefix_print+0xf8>)
   23c88:	492f      	ldr	r1, [pc, #188]	; (23d48 <prefix_print+0xfc>)
   23c8a:	2a00      	cmp	r2, #0
   23c8c:	bf08      	it	eq
   23c8e:	461a      	moveq	r2, r3
   23c90:	f7ff ffca 	bl	23c28 <print_formatted>
	if (level_on) {
   23c94:	b13d      	cbz	r5, 23ca6 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   23c96:	4b2d      	ldr	r3, [pc, #180]	; (23d4c <prefix_print+0x100>)
   23c98:	4630      	mov	r0, r6
   23c9a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   23c9e:	492c      	ldr	r1, [pc, #176]	; (23d50 <prefix_print+0x104>)
   23ca0:	f7ff ffc2 	bl	23c28 <print_formatted>
   23ca4:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   23ca6:	f1b8 0f00 	cmp.w	r8, #0
   23caa:	d044      	beq.n	23d36 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   23cac:	2301      	movs	r3, #1
   23cae:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   23cb2:	4b28      	ldr	r3, [pc, #160]	; (23d54 <prefix_print+0x108>)
   23cb4:	f017 0f10 	tst.w	r7, #16
   23cb8:	4f27      	ldr	r7, [pc, #156]	; (23d58 <prefix_print+0x10c>)
   23cba:	bf18      	it	ne
   23cbc:	461f      	movne	r7, r3
   23cbe:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   23cc2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   23cc6:	f7ff fd3b 	bl	23740 <log_source_name_get>
   23cca:	4639      	mov	r1, r7
   23ccc:	4602      	mov	r2, r0
   23cce:	4630      	mov	r0, r6
   23cd0:	f7ff ffaa 	bl	23c28 <print_formatted>
   23cd4:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   23cd6:	4420      	add	r0, r4
   23cd8:	b005      	add	sp, #20
   23cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   23cde:	4a1f      	ldr	r2, [pc, #124]	; (23d5c <prefix_print+0x110>)
   23ce0:	6811      	ldr	r1, [r2, #0]
   23ce2:	b331      	cbz	r1, 23d32 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   23ce4:	4a1e      	ldr	r2, [pc, #120]	; (23d60 <prefix_print+0x114>)
   23ce6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   23cea:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   23cec:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   23cf0:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   23cf4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   23cf8:	fbb4 f2fe 	udiv	r2, r4, lr
   23cfc:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   23d00:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   23d04:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   23d08:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   23d0c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   23d10:	fb01 441b 	mls	r4, r1, fp, r4
   23d14:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   23d18:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   23d1c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   23d20:	e9cd b101 	strd	fp, r1, [sp, #4]
   23d24:	fb0a e113 	mls	r1, sl, r3, lr
   23d28:	9100      	str	r1, [sp, #0]
   23d2a:	490e      	ldr	r1, [pc, #56]	; (23d64 <prefix_print+0x118>)
   23d2c:	f7ff ff7c 	bl	23c28 <print_formatted>
   23d30:	e7a1      	b.n	23c76 <prefix_print+0x2a>
		length = 0;
   23d32:	4608      	mov	r0, r1
   23d34:	e79f      	b.n	23c76 <prefix_print+0x2a>
	total += print_formatted(log_output,
   23d36:	4f08      	ldr	r7, [pc, #32]	; (23d58 <prefix_print+0x10c>)
   23d38:	e7c1      	b.n	23cbe <prefix_print+0x72>
   23d3a:	bf00      	nop
   23d3c:	0003b83e 	.word	0x0003b83e
   23d40:	00039d80 	.word	0x00039d80
   23d44:	0003b830 	.word	0x0003b830
   23d48:	0003c758 	.word	0x0003c758
   23d4c:	00039d94 	.word	0x00039d94
   23d50:	0003b863 	.word	0x0003b863
   23d54:	0003b83a 	.word	0x0003b83a
   23d58:	0003b835 	.word	0x0003b835
   23d5c:	2002346c 	.word	0x2002346c
   23d60:	20023470 	.word	0x20023470
   23d64:	0003b847 	.word	0x0003b847

00023d68 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   23d68:	b538      	push	{r3, r4, r5, lr}
   23d6a:	460c      	mov	r4, r1
	if (color) {
   23d6c:	07e1      	lsls	r1, r4, #31
{
   23d6e:	4605      	mov	r5, r0
	if (color) {
   23d70:	d503      	bpl.n	23d7a <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   23d72:	4a08      	ldr	r2, [pc, #32]	; (23d94 <postfix_print+0x2c>)
   23d74:	4908      	ldr	r1, [pc, #32]	; (23d98 <postfix_print+0x30>)
   23d76:	f7ff ff57 	bl	23c28 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   23d7a:	06e2      	lsls	r2, r4, #27
   23d7c:	d408      	bmi.n	23d90 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   23d7e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   23d80:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   23d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   23d86:	bf4c      	ite	mi
   23d88:	4904      	ldrmi	r1, [pc, #16]	; (23d9c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   23d8a:	4905      	ldrpl	r1, [pc, #20]	; (23da0 <postfix_print+0x38>)
   23d8c:	f7ff bf4c 	b.w	23c28 <print_formatted>
}
   23d90:	bd38      	pop	{r3, r4, r5, pc}
   23d92:	bf00      	nop
   23d94:	0003b830 	.word	0x0003b830
   23d98:	0003c758 	.word	0x0003c758
   23d9c:	0003c9a7 	.word	0x0003c9a7
   23da0:	0003c9a6 	.word	0x0003c9a6

00023da4 <hexdump_line_print>:
{
   23da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23da8:	461d      	mov	r5, r3
   23daa:	9b08      	ldr	r3, [sp, #32]
   23dac:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   23dae:	06da      	lsls	r2, r3, #27
{
   23db0:	4604      	mov	r4, r0
   23db2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   23db4:	d405      	bmi.n	23dc2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   23db6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   23db8:	bf4c      	ite	mi
   23dba:	492b      	ldrmi	r1, [pc, #172]	; (23e68 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   23dbc:	492b      	ldrpl	r1, [pc, #172]	; (23e6c <hexdump_line_print+0xc8>)
   23dbe:	f7ff ff33 	bl	23c28 <print_formatted>
{
   23dc2:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   23dc6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 23e74 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   23dca:	45a8      	cmp	r8, r5
   23dcc:	db2d      	blt.n	23e2a <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   23dce:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   23dd0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 23e78 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   23dd4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23e7c <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   23dd8:	f8df a098 	ldr.w	sl, [pc, #152]	; 23e74 <hexdump_line_print+0xd0>
		if (i < length) {
   23ddc:	42bd      	cmp	r5, r7
   23dde:	d232      	bcs.n	23e46 <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   23de0:	4649      	mov	r1, r9
   23de2:	4620      	mov	r0, r4
   23de4:	5d72      	ldrb	r2, [r6, r5]
   23de6:	f7ff ff1f 	bl	23c28 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   23dea:	3501      	adds	r5, #1
   23dec:	2d10      	cmp	r5, #16
   23dee:	d123      	bne.n	23e38 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   23df0:	4620      	mov	r0, r4
   23df2:	491f      	ldr	r1, [pc, #124]	; (23e70 <hexdump_line_print+0xcc>)
   23df4:	f7ff ff18 	bl	23c28 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   23df8:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   23dfa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 23e74 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   23dfe:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23e80 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   23e02:	f8df a080 	ldr.w	sl, [pc, #128]	; 23e84 <hexdump_line_print+0xe0>
		if (i < length) {
   23e06:	42af      	cmp	r7, r5
   23e08:	d929      	bls.n	23e5e <hexdump_line_print+0xba>
			char c = (char)data[i];
   23e0a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   23e0c:	4651      	mov	r1, sl
   23e0e:	f812 3009 	ldrb.w	r3, [r2, r9]
   23e12:	4620      	mov	r0, r4
   23e14:	f013 0f97 	tst.w	r3, #151	; 0x97
   23e18:	bf08      	it	eq
   23e1a:	222e      	moveq	r2, #46	; 0x2e
   23e1c:	f7ff ff04 	bl	23c28 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   23e20:	3501      	adds	r5, #1
   23e22:	2d10      	cmp	r5, #16
   23e24:	d114      	bne.n	23e50 <hexdump_line_print+0xac>
}
   23e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   23e2a:	4649      	mov	r1, r9
   23e2c:	4620      	mov	r0, r4
   23e2e:	f7ff fefb 	bl	23c28 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   23e32:	f108 0801 	add.w	r8, r8, #1
   23e36:	e7c8      	b.n	23dca <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   23e38:	076a      	lsls	r2, r5, #29
   23e3a:	d1cf      	bne.n	23ddc <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   23e3c:	4651      	mov	r1, sl
   23e3e:	4620      	mov	r0, r4
   23e40:	f7ff fef2 	bl	23c28 <print_formatted>
   23e44:	e7ca      	b.n	23ddc <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   23e46:	4641      	mov	r1, r8
   23e48:	4620      	mov	r0, r4
   23e4a:	f7ff feed 	bl	23c28 <print_formatted>
   23e4e:	e7cc      	b.n	23dea <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   23e50:	076b      	lsls	r3, r5, #29
   23e52:	d1d8      	bne.n	23e06 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   23e54:	4641      	mov	r1, r8
   23e56:	4620      	mov	r0, r4
   23e58:	f7ff fee6 	bl	23c28 <print_formatted>
   23e5c:	e7d3      	b.n	23e06 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   23e5e:	4641      	mov	r1, r8
   23e60:	4620      	mov	r0, r4
   23e62:	f7ff fee1 	bl	23c28 <print_formatted>
   23e66:	e7db      	b.n	23e20 <hexdump_line_print+0x7c>
   23e68:	0003c9a7 	.word	0x0003c9a7
   23e6c:	0003c9a6 	.word	0x0003c9a6
   23e70:	0003b873 	.word	0x0003b873
   23e74:	0003b871 	.word	0x0003b871
   23e78:	0003b86f 	.word	0x0003b86f
   23e7c:	0003b869 	.word	0x0003b869
   23e80:	0003d1dc 	.word	0x0003d1dc
   23e84:	0003b875 	.word	0x0003b875

00023e88 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   23e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   23e8c:	7a8b      	ldrb	r3, [r1, #10]
   23e8e:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   23e90:	f013 0807 	ands.w	r8, r3, #7
{
   23e94:	4605      	mov	r5, r0
   23e96:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   23e98:	7a0a      	ldrb	r2, [r1, #8]
   23e9a:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   23e9c:	d021      	beq.n	23ee2 <log_output_msg_process+0x5a>
   23e9e:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   23ea0:	8949      	ldrh	r1, [r1, #10]
   23ea2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   23ea6:	f3c1 1189 	ubfx	r1, r1, #6, #10
   23eaa:	e9cd 8300 	strd	r8, r3, [sp]
   23eae:	9102      	str	r1, [sp, #8]
   23eb0:	68f3      	ldr	r3, [r6, #12]
   23eb2:	4639      	mov	r1, r7
   23eb4:	f002 0201 	and.w	r2, r2, #1
   23eb8:	f7ff fec8 	bl	23c4c <prefix_print>
   23ebc:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   23ebe:	7a34      	ldrb	r4, [r6, #8]
   23ec0:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   23ec2:	f014 0401 	ands.w	r4, r4, #1
   23ec6:	d00e      	beq.n	23ee6 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
   23ec8:	4629      	mov	r1, r5
   23eca:	4630      	mov	r0, r6
   23ecc:	f012 fa75 	bl	363ba <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   23ed0:	f1b8 0f00 	cmp.w	r8, #0
   23ed4:	d02b      	beq.n	23f2e <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
   23ed6:	4642      	mov	r2, r8
   23ed8:	4639      	mov	r1, r7
   23eda:	4628      	mov	r0, r5
   23edc:	f7ff ff44 	bl	23d68 <postfix_print>
   23ee0:	e025      	b.n	23f2e <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   23ee2:	46c1      	mov	r9, r8
   23ee4:	e7eb      	b.n	23ebe <log_output_msg_process+0x36>
	} else if (raw_string) {
   23ee6:	f1b8 0f00 	cmp.w	r8, #0
   23eea:	d126      	bne.n	23f3a <log_output_msg_process+0xb2>
	size_t offset = 0;
   23eec:	4627      	mov	r7, r4
		length = log_output->size;
   23eee:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   23ef0:	aa06      	add	r2, sp, #24
		length = log_output->size;
   23ef2:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   23ef4:	4630      	mov	r0, r6
   23ef6:	463b      	mov	r3, r7
   23ef8:	68a9      	ldr	r1, [r5, #8]
   23efa:	f012 fa4a 	bl	36392 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   23efe:	9a06      	ldr	r2, [sp, #24]
   23f00:	686b      	ldr	r3, [r5, #4]
   23f02:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   23f04:	b13a      	cbz	r2, 23f16 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
   23f06:	68ab      	ldr	r3, [r5, #8]
   23f08:	4413      	add	r3, r2
   23f0a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   23f0e:	f1a4 030a 	sub.w	r3, r4, #10
   23f12:	425c      	negs	r4, r3
   23f14:	415c      	adcs	r4, r3
		log_output_flush(log_output);
   23f16:	4628      	mov	r0, r5
   23f18:	f012 fbac 	bl	36674 <log_output_flush>
		offset += length;
   23f1c:	9b06      	ldr	r3, [sp, #24]
   23f1e:	441f      	add	r7, r3
	} while (length > 0);
   23f20:	2b00      	cmp	r3, #0
   23f22:	d1e4      	bne.n	23eee <log_output_msg_process+0x66>
	if (eol) {
   23f24:	b11c      	cbz	r4, 23f2e <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
   23f26:	4628      	mov	r0, r5
   23f28:	4913      	ldr	r1, [pc, #76]	; (23f78 <log_output_msg_process+0xf0>)
   23f2a:	f7ff fe7d 	bl	23c28 <print_formatted>
	}

	log_output_flush(log_output);
   23f2e:	4628      	mov	r0, r5
   23f30:	f012 fba0 	bl	36674 <log_output_flush>
}
   23f34:	b00a      	add	sp, #40	; 0x28
   23f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   23f3a:	4630      	mov	r0, r6
   23f3c:	f012 f981 	bl	36242 <log_msg_str_get>
   23f40:	490e      	ldr	r1, [pc, #56]	; (23f7c <log_output_msg_process+0xf4>)
   23f42:	4602      	mov	r2, r0
   23f44:	4628      	mov	r0, r5
   23f46:	f7ff fe6f 	bl	23c28 <print_formatted>
		length = sizeof(buf);
   23f4a:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   23f4e:	aa05      	add	r2, sp, #20
   23f50:	4623      	mov	r3, r4
   23f52:	4630      	mov	r0, r6
   23f54:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   23f56:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   23f5a:	f012 fa1a 	bl	36392 <log_msg_hexdump_data_get>
		if (length) {
   23f5e:	9a05      	ldr	r2, [sp, #20]
   23f60:	2a00      	cmp	r2, #0
   23f62:	d0b8      	beq.n	23ed6 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
   23f64:	464b      	mov	r3, r9
   23f66:	4628      	mov	r0, r5
   23f68:	9700      	str	r7, [sp, #0]
   23f6a:	a906      	add	r1, sp, #24
   23f6c:	f7ff ff1a 	bl	23da4 <hexdump_line_print>
			offset += length;
   23f70:	9b05      	ldr	r3, [sp, #20]
   23f72:	441c      	add	r4, r3
		length = sizeof(buf);
   23f74:	e7eb      	b.n	23f4e <log_output_msg_process+0xc6>
   23f76:	bf00      	nop
   23f78:	0003b878 	.word	0x0003b878
   23f7c:	0003c758 	.word	0x0003c758

00023f80 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   23f80:	f242 730f 	movw	r3, #9999	; 0x270f
{
   23f84:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   23f86:	428b      	cmp	r3, r1
   23f88:	bf28      	it	cs
   23f8a:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   23f8c:	6805      	ldr	r5, [r0, #0]
{
   23f8e:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   23f90:	2105      	movs	r1, #5
   23f92:	4668      	mov	r0, sp
   23f94:	4a0d      	ldr	r2, [pc, #52]	; (23fcc <log_output_dropped_process+0x4c>)
   23f96:	f011 fbde 	bl	35756 <snprintk>
   23f9a:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   23f9c:	6863      	ldr	r3, [r4, #4]
   23f9e:	4628      	mov	r0, r5
   23fa0:	220b      	movs	r2, #11
   23fa2:	685b      	ldr	r3, [r3, #4]
   23fa4:	490a      	ldr	r1, [pc, #40]	; (23fd0 <log_output_dropped_process+0x50>)
   23fa6:	f012 f9fb 	bl	363a0 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   23faa:	6863      	ldr	r3, [r4, #4]
   23fac:	4632      	mov	r2, r6
   23fae:	4669      	mov	r1, sp
   23fb0:	4628      	mov	r0, r5
   23fb2:	685b      	ldr	r3, [r3, #4]
   23fb4:	f012 f9f4 	bl	363a0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   23fb8:	6863      	ldr	r3, [r4, #4]
   23fba:	221b      	movs	r2, #27
   23fbc:	4628      	mov	r0, r5
   23fbe:	685b      	ldr	r3, [r3, #4]
   23fc0:	4904      	ldr	r1, [pc, #16]	; (23fd4 <log_output_dropped_process+0x54>)
   23fc2:	f012 f9ed 	bl	363a0 <buffer_write>
		     log_output->control_block->ctx);
}
   23fc6:	b002      	add	sp, #8
   23fc8:	bd70      	pop	{r4, r5, r6, pc}
   23fca:	bf00      	nop
   23fcc:	0003c57d 	.word	0x0003c57d
   23fd0:	0003b8b6 	.word	0x0003b8b6
   23fd4:	0003b89a 	.word	0x0003b89a

00023fd8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   23fd8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   23fda:	2100      	movs	r1, #0
	timestamp_div = 1U;
   23fdc:	4a07      	ldr	r2, [pc, #28]	; (23ffc <log_output_timestamp_freq_set+0x24>)
{
   23fde:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   23fe0:	4c07      	ldr	r4, [pc, #28]	; (24000 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   23fe2:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   23fe4:	42a0      	cmp	r0, r4
   23fe6:	d804      	bhi.n	23ff2 <log_output_timestamp_freq_set+0x1a>
   23fe8:	b101      	cbz	r1, 23fec <log_output_timestamp_freq_set+0x14>
   23fea:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   23fec:	4b05      	ldr	r3, [pc, #20]	; (24004 <log_output_timestamp_freq_set+0x2c>)
   23fee:	6018      	str	r0, [r3, #0]
}
   23ff0:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   23ff2:	2101      	movs	r1, #1
		frequency /= 2U;
   23ff4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   23ff6:	005b      	lsls	r3, r3, #1
   23ff8:	e7f4      	b.n	23fe4 <log_output_timestamp_freq_set+0xc>
   23ffa:	bf00      	nop
   23ffc:	20023470 	.word	0x20023470
   24000:	000f4240 	.word	0x000f4240
   24004:	2002346c 	.word	0x2002346c

00024008 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   24008:	2201      	movs	r2, #1
   2400a:	4b01      	ldr	r3, [pc, #4]	; (24010 <log_backend_rtt_init+0x8>)
   2400c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   2400e:	4770      	bx	lr
   24010:	2002b7b0 	.word	0x2002b7b0

00024014 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   24014:	2201      	movs	r2, #1
   24016:	4b02      	ldr	r3, [pc, #8]	; (24020 <panic+0xc>)
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   24018:	4802      	ldr	r0, [pc, #8]	; (24024 <panic+0x10>)
   2401a:	701a      	strb	r2, [r3, #0]
   2401c:	f012 bb2a 	b.w	36674 <log_output_flush>
   24020:	2002b7b1 	.word	0x2002b7b1
   24024:	00039dc0 	.word	0x00039dc0

00024028 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   24028:	4801      	ldr	r0, [pc, #4]	; (24030 <dropped+0x8>)
   2402a:	f7ff bfa9 	b.w	23f80 <log_output_dropped_process>
   2402e:	bf00      	nop
   24030:	00039dc0 	.word	0x00039dc0

00024034 <put>:
{
   24034:	b510      	push	{r4, lr}
   24036:	460c      	mov	r4, r1
	log_msg_get(msg);
   24038:	4608      	mov	r0, r1
   2403a:	f012 f8c8 	bl	361ce <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   2403e:	4621      	mov	r1, r4
   24040:	4804      	ldr	r0, [pc, #16]	; (24054 <put+0x20>)
   24042:	220f      	movs	r2, #15
   24044:	f7ff ff20 	bl	23e88 <log_output_msg_process>
	log_msg_put(msg);
   24048:	4620      	mov	r0, r4
}
   2404a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2404e:	f012 b8e9 	b.w	36224 <log_msg_put>
   24052:	bf00      	nop
   24054:	00039dc0 	.word	0x00039dc0

00024058 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   24058:	4b05      	ldr	r3, [pc, #20]	; (24070 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   2405a:	781b      	ldrb	r3, [r3, #0]
   2405c:	b11b      	cbz	r3, 24066 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   2405e:	f241 3088 	movw	r0, #5000	; 0x1388
   24062:	f014 babd 	b.w	385e0 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   24066:	20a4      	movs	r0, #164	; 0xa4
   24068:	2100      	movs	r1, #0
   2406a:	f00f bef3 	b.w	33e54 <z_impl_k_sleep>
   2406e:	bf00      	nop
   24070:	2002b7b1 	.word	0x2002b7b1

00024074 <data_out_block_mode>:
{
   24074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   24078:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2410c <data_out_block_mode+0x98>
{
   2407c:	4607      	mov	r7, r0
   2407e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   24080:	2404      	movs	r4, #4
   24082:	46ca      	mov	sl, r9
	return z_impl_k_mutex_lock(mutex, timeout);
   24084:	f8df b088 	ldr.w	fp, [pc, #136]	; 24110 <data_out_block_mode+0x9c>
		if (!is_sync_mode()) {
   24088:	f899 3000 	ldrb.w	r3, [r9]
   2408c:	b933      	cbnz	r3, 2409c <data_out_block_mode+0x28>
   2408e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24096:	4658      	mov	r0, fp
   24098:	f00f fa60 	bl	3355c <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   2409c:	4632      	mov	r2, r6
   2409e:	4639      	mov	r1, r7
   240a0:	2000      	movs	r0, #0
   240a2:	f000 fe6d 	bl	24d80 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
   240a6:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   240aa:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
   240ac:	b913      	cbnz	r3, 240b4 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
   240ae:	4658      	mov	r0, fp
   240b0:	f00f facc 	bl	3364c <z_impl_k_mutex_unlock>
		if (ret) {
   240b4:	4d14      	ldr	r5, [pc, #80]	; (24108 <data_out_block_mode+0x94>)
   240b6:	f1b8 0f00 	cmp.w	r8, #0
   240ba:	d018      	beq.n	240ee <data_out_block_mode+0x7a>
	host_present = true;
   240bc:	2301      	movs	r3, #1
   240be:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   240c0:	f89a 3000 	ldrb.w	r3, [sl]
   240c4:	b933      	cbnz	r3, 240d4 <data_out_block_mode+0x60>
}
   240c6:	4630      	mov	r0, r6
   240c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
   240cc:	b95c      	cbnz	r4, 240e6 <data_out_block_mode+0x72>
		host_present = false;
   240ce:	702c      	strb	r4, [r5, #0]
   240d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   240d4:	2000      	movs	r0, #0
   240d6:	f000 fed3 	bl	24e80 <SEGGER_RTT_HasDataUp>
   240da:	2800      	cmp	r0, #0
   240dc:	d0f3      	beq.n	240c6 <data_out_block_mode+0x52>
   240de:	782b      	ldrb	r3, [r5, #0]
   240e0:	2b00      	cmp	r3, #0
   240e2:	d1f3      	bne.n	240cc <data_out_block_mode+0x58>
   240e4:	e7ef      	b.n	240c6 <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
   240e6:	3c01      	subs	r4, #1
   240e8:	f7ff ffb6 	bl	24058 <on_failed_write.part.0>
   240ec:	e7f2      	b.n	240d4 <data_out_block_mode+0x60>
		} else if (host_present) {
   240ee:	782b      	ldrb	r3, [r5, #0]
   240f0:	b113      	cbz	r3, 240f8 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
   240f2:	3c01      	subs	r4, #1
   240f4:	d104      	bne.n	24100 <data_out_block_mode+0x8c>
		host_present = false;
   240f6:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   240f8:	782b      	ldrb	r3, [r5, #0]
   240fa:	2b00      	cmp	r3, #0
   240fc:	d1c4      	bne.n	24088 <data_out_block_mode+0x14>
   240fe:	e7e2      	b.n	240c6 <data_out_block_mode+0x52>
   24100:	f7ff ffaa 	bl	24058 <on_failed_write.part.0>
   24104:	e7f8      	b.n	240f8 <data_out_block_mode+0x84>
   24106:	bf00      	nop
   24108:	2002b7b0 	.word	0x2002b7b0
   2410c:	2002b7b1 	.word	0x2002b7b1
   24110:	200207bc 	.word	0x200207bc

00024114 <boot_request_upgrade>:
#endif
	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   24114:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24116:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   24118:	a901      	add	r1, sp, #4
   2411a:	2007      	movs	r0, #7
   2411c:	f000 f97c 	bl	24418 <flash_area_open>
	if (rc) {
   24120:	4604      	mov	r4, r0
   24122:	bb10      	cbnz	r0, 2416a <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   24124:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   24126:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   24128:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   2412a:	4a12      	ldr	r2, [pc, #72]	; (24174 <boot_request_upgrade+0x60>)
   2412c:	3910      	subs	r1, #16
   2412e:	f012 fc81 	bl	36a34 <flash_area_write>
   24132:	4604      	mov	r4, r0
	flash_area_close(fa);
   24134:	9801      	ldr	r0, [sp, #4]
   24136:	f012 fc5f 	bl	369f8 <flash_area_close>
	uint8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   2413a:	b9b4      	cbnz	r4, 2416a <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   2413c:	b1c5      	cbz	r5, 24170 <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   2413e:	2007      	movs	r0, #7
   24140:	f012 faee 	bl	36720 <boot_flag_write.constprop.0>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   24144:	4604      	mov	r4, r0
   24146:	b980      	cbnz	r0, 2416a <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   24148:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   2414a:	2007      	movs	r0, #7
   2414c:	a901      	add	r1, sp, #4
   2414e:	f000 f963 	bl	24418 <flash_area_open>
	if (rc) {
   24152:	4604      	mov	r4, r0
   24154:	b948      	cbnz	r0, 2416a <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   24156:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   24158:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   2415a:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   2415c:	3928      	subs	r1, #40	; 0x28
   2415e:	f012 faad 	bl	366bc <boot_write_trailer_byte>
   24162:	4604      	mov	r4, r0
	flash_area_close(fa);
   24164:	9801      	ldr	r0, [sp, #4]
   24166:	f012 fc47 	bl	369f8 <flash_area_close>
	return rc;
#else
	return 0;
#endif /* FLASH_AREA_IMAGE_SECONDARY */

}
   2416a:	4620      	mov	r0, r4
   2416c:	b003      	add	sp, #12
   2416e:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   24170:	2502      	movs	r5, #2
   24172:	e7ea      	b.n	2414a <boot_request_upgrade+0x36>
   24174:	00039dd0 	.word	0x00039dd0

00024178 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   24178:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2417a:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   2417c:	4c0f      	ldr	r4, [pc, #60]	; (241bc <z_impl_zsock_socket+0x44>)
   2417e:	4e10      	ldr	r6, [pc, #64]	; (241c0 <z_impl_zsock_socket+0x48>)
   24180:	42b4      	cmp	r4, r6
   24182:	d307      	bcc.n	24194 <z_impl_zsock_socket+0x1c>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   24184:	f012 fe53 	bl	36e2e <__errno>
   24188:	236a      	movs	r3, #106	; 0x6a
   2418a:	6003      	str	r3, [r0, #0]
	return -1;
}
   2418c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24190:	b002      	add	sp, #8
   24192:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
   24194:	6823      	ldr	r3, [r4, #0]
   24196:	42ab      	cmp	r3, r5
   24198:	d000      	beq.n	2419c <z_impl_zsock_socket+0x24>
   2419a:	b96b      	cbnz	r3, 241b8 <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
   2419c:	4628      	mov	r0, r5
   2419e:	6863      	ldr	r3, [r4, #4]
   241a0:	e9cd 1200 	strd	r1, r2, [sp]
   241a4:	4798      	blx	r3
   241a6:	e9dd 1200 	ldrd	r1, r2, [sp]
   241aa:	b128      	cbz	r0, 241b8 <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
   241ac:	4628      	mov	r0, r5
   241ae:	68a3      	ldr	r3, [r4, #8]
}
   241b0:	b002      	add	sp, #8
   241b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
   241b6:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   241b8:	340c      	adds	r4, #12
   241ba:	e7e1      	b.n	24180 <z_impl_zsock_socket+0x8>
   241bc:	00039a44 	.word	0x00039a44
   241c0:	00039a50 	.word	0x00039a50

000241c4 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   241c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   241c8:	1e14      	subs	r4, r2, #0
{
   241ca:	b09b      	sub	sp, #108	; 0x6c
   241cc:	4606      	mov	r6, r0
   241ce:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
   241d0:	db30      	blt.n	24234 <z_impl_zsock_poll+0x70>
   241d2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   241d6:	f240 30e7 	movw	r0, #999	; 0x3e7
   241da:	2100      	movs	r1, #0
   241dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   241e0:	2300      	movs	r3, #0
   241e2:	fbc5 0104 	smlal	r0, r1, r5, r4
   241e6:	f7f8 fae7 	bl	1c7b8 <__aeabi_uldivmod>
   241ea:	4682      	mov	sl, r0
   241ec:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   241ee:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   241f0:	4650      	mov	r0, sl
   241f2:	4659      	mov	r1, fp
   241f4:	f014 faa5 	bl	38742 <z_timeout_end_calc>

	pev = poll_events;
   241f8:	ab0b      	add	r3, sp, #44	; 0x2c
   241fa:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
   241fc:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
   241fe:	4633      	mov	r3, r6
	bool offload = false;
   24200:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
   24202:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
   24206:	f8dd 900c 	ldr.w	r9, [sp, #12]
   2420a:	f1b9 0f00 	cmp.w	r9, #0
   2420e:	d118      	bne.n	24242 <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   24210:	f1b8 0f00 	cmp.w	r8, #0
   24214:	d049      	beq.n	242aa <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   24216:	9b03      	ldr	r3, [sp, #12]
   24218:	9401      	str	r4, [sp, #4]
   2421a:	9300      	str	r3, [sp, #0]
   2421c:	f44f 7282 	mov.w	r2, #260	; 0x104
   24220:	4633      	mov	r3, r6
   24222:	4629      	mov	r1, r5
   24224:	4638      	mov	r0, r7
   24226:	f012 faef 	bl	36808 <z_fdtable_call_ioctl>
   2422a:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   2422c:	4620      	mov	r0, r4
   2422e:	b01b      	add	sp, #108	; 0x6c
   24230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   24234:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   24238:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
		poll_timeout = SYS_FOREVER_MS;
   2423c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24240:	e7d5      	b.n	241ee <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   24242:	6818      	ldr	r0, [r3, #0]
   24244:	2800      	cmp	r0, #0
   24246:	db2c      	blt.n	242a2 <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
   24248:	a90a      	add	r1, sp, #40	; 0x28
   2424a:	9306      	str	r3, [sp, #24]
   2424c:	f7fe f9c6 	bl	225dc <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   24250:	9b06      	ldr	r3, [sp, #24]
   24252:	4601      	mov	r1, r0
   24254:	b328      	cbz	r0, 242a2 <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
   24256:	aa1a      	add	r2, sp, #104	; 0x68
   24258:	9201      	str	r2, [sp, #4]
   2425a:	aa09      	add	r2, sp, #36	; 0x24
   2425c:	9200      	str	r2, [sp, #0]
   2425e:	9006      	str	r0, [sp, #24]
   24260:	f44f 7281 	mov.w	r2, #258	; 0x102
   24264:	980a      	ldr	r0, [sp, #40]	; 0x28
   24266:	9307      	str	r3, [sp, #28]
   24268:	f012 face 	bl	36808 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   2426c:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   24270:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   24272:	9b07      	ldr	r3, [sp, #28]
   24274:	d011      	beq.n	2429a <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
   24276:	f110 0f12 	cmn.w	r0, #18
   2427a:	9906      	ldr	r1, [sp, #24]
   2427c:	d105      	bne.n	2428a <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   2427e:	b90f      	cbnz	r7, 24284 <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
   24280:	460d      	mov	r5, r1
   24282:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
   24284:	f04f 0801 	mov.w	r8, #1
   24288:	e00b      	b.n	242a2 <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
   2428a:	b150      	cbz	r0, 242a2 <z_impl_zsock_poll+0xde>
   2428c:	9203      	str	r2, [sp, #12]
				errno = -result;
   2428e:	f012 fdce 	bl	36e2e <__errno>
   24292:	9a03      	ldr	r2, [sp, #12]
   24294:	4252      	negs	r2, r2
   24296:	6002      	str	r2, [r0, #0]
				return -1;
   24298:	e03e      	b.n	24318 <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
   2429a:	f04f 0a00 	mov.w	sl, #0
   2429e:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   242a2:	3308      	adds	r3, #8
   242a4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   242a8:	e7af      	b.n	2420a <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   242aa:	ea5a 030b 	orrs.w	r3, sl, fp
   242ae:	d016      	beq.n	242de <z_impl_zsock_poll+0x11a>
   242b0:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   242b4:	bf08      	it	eq
   242b6:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   242ba:	d010      	beq.n	242de <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
   242bc:	f010 f8ea 	bl	34494 <z_tick_get>
   242c0:	9b04      	ldr	r3, [sp, #16]
   242c2:	ebb3 0a00 	subs.w	sl, r3, r0
   242c6:	9b05      	ldr	r3, [sp, #20]
   242c8:	eb63 0b01 	sbc.w	fp, r3, r1
   242cc:	f1ba 0f00 	cmp.w	sl, #0
   242d0:	f17b 0300 	sbcs.w	r3, fp, #0
   242d4:	bfbc      	itt	lt
   242d6:	f04f 0a00 	movlt.w	sl, #0
   242da:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   242de:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   242e2:	9909      	ldr	r1, [sp, #36]	; 0x24
   242e4:	ac0b      	add	r4, sp, #44	; 0x2c
   242e6:	4b34      	ldr	r3, [pc, #208]	; (243b8 <z_impl_zsock_poll+0x1f4>)
   242e8:	1b09      	subs	r1, r1, r4
   242ea:	1089      	asrs	r1, r1, #2
   242ec:	4359      	muls	r1, r3
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   242ee:	465b      	mov	r3, fp
   242f0:	4652      	mov	r2, sl
   242f2:	4620      	mov	r0, r4
   242f4:	f010 f96a 	bl	345cc <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   242f8:	f100 030b 	add.w	r3, r0, #11
   242fc:	2b0b      	cmp	r3, #11
   242fe:	4607      	mov	r7, r0
   24300:	d806      	bhi.n	24310 <z_impl_zsock_poll+0x14c>
   24302:	f640 0581 	movw	r5, #2177	; 0x881
   24306:	40dd      	lsrs	r5, r3
   24308:	43ed      	mvns	r5, r5
   2430a:	f015 0501 	ands.w	r5, r5, #1
   2430e:	d006      	beq.n	2431e <z_impl_zsock_poll+0x15a>
			errno = -ret;
   24310:	f012 fd8d 	bl	36e2e <__errno>
   24314:	427f      	negs	r7, r7
   24316:	6007      	str	r7, [r0, #0]
			return -1;
   24318:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2431c:	e786      	b.n	2422c <z_impl_zsock_poll+0x68>
		pev = poll_events;
   2431e:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   24320:	46b0      	mov	r8, r6
		ret = 0;
   24322:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   24324:	9f03      	ldr	r7, [sp, #12]
   24326:	b9ef      	cbnz	r7, 24364 <z_impl_zsock_poll+0x1a0>
		if (retry) {
   24328:	2d00      	cmp	r5, #0
   2432a:	f43f af7f 	beq.w	2422c <z_impl_zsock_poll+0x68>
			if (ret > 0) {
   2432e:	2c00      	cmp	r4, #0
   24330:	f73f af7c 	bgt.w	2422c <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24334:	ea5a 030b 	orrs.w	r3, sl, fp
   24338:	f43f af78 	beq.w	2422c <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2433c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   24340:	bf08      	it	eq
   24342:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   24346:	d0cc      	beq.n	242e2 <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
   24348:	f010 f8a4 	bl	34494 <z_tick_get>
   2434c:	9b04      	ldr	r3, [sp, #16]
   2434e:	ebb3 0a00 	subs.w	sl, r3, r0
   24352:	9b05      	ldr	r3, [sp, #20]
   24354:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   24358:	f1ba 0f01 	cmp.w	sl, #1
   2435c:	f17b 0300 	sbcs.w	r3, fp, #0
   24360:	dabf      	bge.n	242e2 <z_impl_zsock_poll+0x11e>
   24362:	e763      	b.n	2422c <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
   24364:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
   24368:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
   2436c:	2800      	cmp	r0, #0
   2436e:	db1c      	blt.n	243aa <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
   24370:	a90a      	add	r1, sp, #40	; 0x28
   24372:	f7fe f933 	bl	225dc <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   24376:	4601      	mov	r1, r0
   24378:	b920      	cbnz	r0, 24384 <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
   2437a:	2220      	movs	r2, #32
   2437c:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
   24380:	3401      	adds	r4, #1
   24382:	e012      	b.n	243aa <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
   24384:	ab09      	add	r3, sp, #36	; 0x24
   24386:	f240 1203 	movw	r2, #259	; 0x103
   2438a:	9300      	str	r3, [sp, #0]
   2438c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2438e:	4643      	mov	r3, r8
   24390:	f012 fa3a 	bl	36808 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   24394:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   24398:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   2439a:	d00a      	beq.n	243b2 <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
   2439c:	2800      	cmp	r0, #0
   2439e:	f47f af75 	bne.w	2428c <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
   243a2:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   243a6:	2a00      	cmp	r2, #0
   243a8:	d1ea      	bne.n	24380 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   243aa:	f108 0808 	add.w	r8, r8, #8
   243ae:	3f01      	subs	r7, #1
   243b0:	e7b9      	b.n	24326 <z_impl_zsock_poll+0x162>
				retry = true;
   243b2:	2501      	movs	r5, #1
   243b4:	e7f9      	b.n	243aa <z_impl_zsock_poll+0x1e6>
   243b6:	bf00      	nop
   243b8:	cccccccd 	.word	0xcccccccd

000243bc <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   243bc:	4b01      	ldr	r3, [pc, #4]	; (243c4 <socket_offload_dns_register+0x8>)
   243be:	6018      	str	r0, [r3, #0]
}
   243c0:	4770      	bx	lr
   243c2:	bf00      	nop
   243c4:	20023488 	.word	0x20023488

000243c8 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   243c8:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   243ca:	4c03      	ldr	r4, [pc, #12]	; (243d8 <socket_offload_getaddrinfo+0x10>)
   243cc:	6824      	ldr	r4, [r4, #0]
   243ce:	6824      	ldr	r4, [r4, #0]
   243d0:	46a4      	mov	ip, r4
}
   243d2:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
   243d6:	4760      	bx	ip
   243d8:	20023488 	.word	0x20023488

000243dc <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   243dc:	4b01      	ldr	r3, [pc, #4]	; (243e4 <socket_offload_freeaddrinfo+0x8>)
   243de:	681b      	ldr	r3, [r3, #0]
   243e0:	685b      	ldr	r3, [r3, #4]
   243e2:	4718      	bx	r3
   243e4:	20023488 	.word	0x20023488

000243e8 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   243e8:	4b09      	ldr	r3, [pc, #36]	; (24410 <get_flash_area_from_id+0x28>)
{
   243ea:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   243ec:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   243ee:	4b09      	ldr	r3, [pc, #36]	; (24414 <get_flash_area_from_id+0x2c>)
   243f0:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   243f2:	2300      	movs	r3, #0
   243f4:	429d      	cmp	r5, r3
   243f6:	dc02      	bgt.n	243fe <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   243f8:	2100      	movs	r1, #0
}
   243fa:	4608      	mov	r0, r1
   243fc:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   243fe:	011a      	lsls	r2, r3, #4
   24400:	5ca2      	ldrb	r2, [r4, r2]
   24402:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   24406:	4282      	cmp	r2, r0
   24408:	d0f7      	beq.n	243fa <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   2440a:	3301      	adds	r3, #1
   2440c:	e7f2      	b.n	243f4 <get_flash_area_from_id+0xc>
   2440e:	bf00      	nop
   24410:	00039e60 	.word	0x00039e60
   24414:	200200e8 	.word	0x200200e8

00024418 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   24418:	4b08      	ldr	r3, [pc, #32]	; (2443c <flash_area_open+0x24>)
{
   2441a:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   2441c:	681b      	ldr	r3, [r3, #0]
{
   2441e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   24420:	b12b      	cbz	r3, 2442e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   24422:	f7ff ffe1 	bl	243e8 <get_flash_area_from_id>
	if (area == NULL) {
   24426:	b128      	cbz	r0, 24434 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   24428:	6020      	str	r0, [r4, #0]
	return 0;
   2442a:	2000      	movs	r0, #0
}
   2442c:	bd10      	pop	{r4, pc}
		return -EACCES;
   2442e:	f06f 000c 	mvn.w	r0, #12
   24432:	e7fb      	b.n	2442c <flash_area_open+0x14>
		return -ENOENT;
   24434:	f06f 0001 	mvn.w	r0, #1
   24438:	e7f8      	b.n	2442c <flash_area_open+0x14>
   2443a:	bf00      	nop
   2443c:	200200e8 	.word	0x200200e8

00024440 <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   24440:	6842      	ldr	r2, [r0, #4]
   24442:	680b      	ldr	r3, [r1, #0]
{
   24444:	b510      	push	{r4, lr}
	if (ctx->buf_len > info->size) {
   24446:	4293      	cmp	r3, r2
{
   24448:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   2444a:	d90c      	bls.n	24466 <find_flash_total_size+0x26>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   2444c:	4908      	ldr	r1, [pc, #32]	; (24470 <find_flash_total_size+0x30>)
   2444e:	4b09      	ldr	r3, [pc, #36]	; (24474 <find_flash_total_size+0x34>)
		LOG_ERR("Buffer size is bigger than page");
   24450:	4809      	ldr	r0, [pc, #36]	; (24478 <find_flash_total_size+0x38>)
   24452:	1a5b      	subs	r3, r3, r1
   24454:	08db      	lsrs	r3, r3, #3
   24456:	019b      	lsls	r3, r3, #6
   24458:	f043 0101 	orr.w	r1, r3, #1
   2445c:	f011 fde0 	bl	36020 <log_0>
		ctx->total_size = 0;
   24460:	2000      	movs	r0, #0
   24462:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   24464:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   24466:	684b      	ldr	r3, [r1, #4]
	return true;
   24468:	2001      	movs	r0, #1
	ctx->total_size += info->size;
   2446a:	4413      	add	r3, r2
   2446c:	604b      	str	r3, [r1, #4]
	return true;
   2446e:	e7f9      	b.n	24464 <find_flash_total_size+0x24>
   24470:	00039a50 	.word	0x00039a50
   24474:	00039a50 	.word	0x00039a50
   24478:	0003b8e5 	.word	0x0003b8e5

0002447c <stream_flash_erase_page>:
{
   2447c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2447e:	4606      	mov	r6, r0
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   24480:	68c0      	ldr	r0, [r0, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   24482:	aa01      	add	r2, sp, #4
   24484:	f012 fea0 	bl	371c8 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   24488:	4604      	mov	r4, r0
   2448a:	b168      	cbz	r0, 244a8 <stream_flash_erase_page+0x2c>
   2448c:	4a19      	ldr	r2, [pc, #100]	; (244f4 <stream_flash_erase_page+0x78>)
   2448e:	4b1a      	ldr	r3, [pc, #104]	; (244f8 <stream_flash_erase_page+0x7c>)
		LOG_ERR("Error %d while getting page info", rc);
   24490:	4601      	mov	r1, r0
   24492:	1ad2      	subs	r2, r2, r3
   24494:	08d2      	lsrs	r2, r2, #3
   24496:	0192      	lsls	r2, r2, #6
   24498:	4818      	ldr	r0, [pc, #96]	; (244fc <stream_flash_erase_page+0x80>)
   2449a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Error %d while erasing page", rc);
   2449e:	f011 fdce 	bl	3603e <log_1>
}
   244a2:	4620      	mov	r0, r4
   244a4:	b004      	add	sp, #16
   244a6:	bd70      	pop	{r4, r5, r6, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   244a8:	9901      	ldr	r1, [sp, #4]
   244aa:	6a33      	ldr	r3, [r6, #32]
   244ac:	428b      	cmp	r3, r1
   244ae:	d0f8      	beq.n	244a2 <stream_flash_erase_page+0x26>
   244b0:	4b11      	ldr	r3, [pc, #68]	; (244f8 <stream_flash_erase_page+0x7c>)
   244b2:	4d10      	ldr	r5, [pc, #64]	; (244f4 <stream_flash_erase_page+0x78>)
	ctx->last_erased_page_start_offset = page.start_offset;
   244b4:	6231      	str	r1, [r6, #32]
   244b6:	1aed      	subs	r5, r5, r3
   244b8:	08ed      	lsrs	r5, r5, #3
	LOG_INF("Erasing page at offset 0x%08lx", (long)page.start_offset);
   244ba:	01ad      	lsls	r5, r5, #6
   244bc:	f045 0203 	orr.w	r2, r5, #3
   244c0:	480f      	ldr	r0, [pc, #60]	; (24500 <stream_flash_erase_page+0x84>)
   244c2:	f011 fdbc 	bl	3603e <log_1>
	flash_write_protection_set(ctx->fdev, false);
   244c6:	4621      	mov	r1, r4
   244c8:	68f0      	ldr	r0, [r6, #12]
   244ca:	f012 faf1 	bl	36ab0 <flash_write_protection_set>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   244ce:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
   244d2:	68f0      	ldr	r0, [r6, #12]
				     size_t size)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->erase(dev, offset, size);
   244d4:	6883      	ldr	r3, [r0, #8]
   244d6:	689b      	ldr	r3, [r3, #8]
   244d8:	4798      	blx	r3
   244da:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   244dc:	2101      	movs	r1, #1
   244de:	68f0      	ldr	r0, [r6, #12]
   244e0:	f012 fae6 	bl	36ab0 <flash_write_protection_set>
	if (rc != 0) {
   244e4:	2c00      	cmp	r4, #0
   244e6:	d0dc      	beq.n	244a2 <stream_flash_erase_page+0x26>
		LOG_ERR("Error %d while erasing page", rc);
   244e8:	4621      	mov	r1, r4
   244ea:	4806      	ldr	r0, [pc, #24]	; (24504 <stream_flash_erase_page+0x88>)
   244ec:	f045 0201 	orr.w	r2, r5, #1
   244f0:	e7d5      	b.n	2449e <stream_flash_erase_page+0x22>
   244f2:	bf00      	nop
   244f4:	00039a50 	.word	0x00039a50
   244f8:	00039a50 	.word	0x00039a50
   244fc:	0003b905 	.word	0x0003b905
   24500:	0003b926 	.word	0x0003b926
   24504:	0003b945 	.word	0x0003b945

00024508 <flash_sync>:
{
   24508:	b570      	push	{r4, r5, r6, lr}
		if (ctx->buf_bytes == 0) {
   2450a:	6884      	ldr	r4, [r0, #8]
{
   2450c:	4605      	mov	r5, r0
		if (ctx->buf_bytes == 0) {
   2450e:	b1a4      	cbz	r4, 2453a <flash_sync+0x32>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   24510:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
   24514:	3c01      	subs	r4, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   24516:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   24518:	19a1      	adds	r1, r4, r6
   2451a:	f7ff ffaf 	bl	2447c <stream_flash_erase_page>
		if (rc < 0) {
   2451e:	1e04      	subs	r4, r0, #0
   24520:	da0d      	bge.n	2453e <flash_sync+0x36>
   24522:	4a31      	ldr	r2, [pc, #196]	; (245e8 <flash_sync+0xe0>)
   24524:	4b31      	ldr	r3, [pc, #196]	; (245ec <flash_sync+0xe4>)
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   24526:	4621      	mov	r1, r4
   24528:	1a9b      	subs	r3, r3, r2
   2452a:	4632      	mov	r2, r6
   2452c:	08db      	lsrs	r3, r3, #3
   2452e:	019b      	lsls	r3, r3, #6
   24530:	482f      	ldr	r0, [pc, #188]	; (245f0 <flash_sync+0xe8>)
   24532:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   24536:	f011 fd99 	bl	3606c <log_2>
}
   2453a:	4620      	mov	r0, r4
   2453c:	bd70      	pop	{r4, r5, r6, pc}
	flash_write_protection_set(ctx->fdev, false);
   2453e:	2100      	movs	r1, #0
   24540:	68e8      	ldr	r0, [r5, #12]
   24542:	f012 fab5 	bl	36ab0 <flash_write_protection_set>
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, ctx->buf_bytes);
   24546:	68e8      	ldr	r0, [r5, #12]
   24548:	682a      	ldr	r2, [r5, #0]
   2454a:	68ab      	ldr	r3, [r5, #8]
	return api->write(dev, offset, data, len);
   2454c:	6881      	ldr	r1, [r0, #8]
   2454e:	684c      	ldr	r4, [r1, #4]
   24550:	4631      	mov	r1, r6
   24552:	47a0      	blx	r4
   24554:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   24556:	2101      	movs	r1, #1
   24558:	68e8      	ldr	r0, [r5, #12]
   2455a:	f012 faa9 	bl	36ab0 <flash_write_protection_set>
	if (rc != 0) {
   2455e:	b154      	cbz	r4, 24576 <flash_sync+0x6e>
   24560:	4a21      	ldr	r2, [pc, #132]	; (245e8 <flash_sync+0xe0>)
   24562:	4b22      	ldr	r3, [pc, #136]	; (245ec <flash_sync+0xe4>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   24564:	4621      	mov	r1, r4
   24566:	1a9b      	subs	r3, r3, r2
   24568:	08db      	lsrs	r3, r3, #3
   2456a:	019b      	lsls	r3, r3, #6
   2456c:	4632      	mov	r2, r6
   2456e:	4821      	ldr	r0, [pc, #132]	; (245f4 <flash_sync+0xec>)
   24570:	f043 0301 	orr.w	r3, r3, #1
   24574:	e7df      	b.n	24536 <flash_sync+0x2e>
	if (ctx->callback) {
   24576:	69eb      	ldr	r3, [r5, #28]
   24578:	b953      	cbnz	r3, 24590 <flash_sync+0x88>
	ctx->bytes_written += ctx->buf_bytes;
   2457a:	692b      	ldr	r3, [r5, #16]
   2457c:	68aa      	ldr	r2, [r5, #8]
   2457e:	4413      	add	r3, r2
   24580:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
   24582:	2300      	movs	r3, #0
   24584:	60ab      	str	r3, [r5, #8]
	return rc;
   24586:	e7d8      	b.n	2453a <flash_sync+0x32>
			ctx->buf[i] = ~ctx->buf[i];
   24588:	5d13      	ldrb	r3, [r2, r4]
   2458a:	43db      	mvns	r3, r3
   2458c:	5513      	strb	r3, [r2, r4]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   2458e:	3401      	adds	r4, #1
   24590:	68ab      	ldr	r3, [r5, #8]
   24592:	682a      	ldr	r2, [r5, #0]
   24594:	429c      	cmp	r4, r3
   24596:	d3f7      	bcc.n	24588 <flash_sync+0x80>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   24598:	68e8      	ldr	r0, [r5, #12]
	return api->read(dev, offset, data, len);
   2459a:	6881      	ldr	r1, [r0, #8]
   2459c:	680c      	ldr	r4, [r1, #0]
   2459e:	4631      	mov	r1, r6
   245a0:	47a0      	blx	r4
		if (rc != 0) {
   245a2:	4604      	mov	r4, r0
   245a4:	b158      	cbz	r0, 245be <flash_sync+0xb6>
   245a6:	4b10      	ldr	r3, [pc, #64]	; (245e8 <flash_sync+0xe0>)
   245a8:	4a10      	ldr	r2, [pc, #64]	; (245ec <flash_sync+0xe4>)
			LOG_ERR("flash read failed: %d", rc);
   245aa:	4601      	mov	r1, r0
   245ac:	1ad2      	subs	r2, r2, r3
   245ae:	08d2      	lsrs	r2, r2, #3
   245b0:	0192      	lsls	r2, r2, #6
   245b2:	4811      	ldr	r0, [pc, #68]	; (245f8 <flash_sync+0xf0>)
   245b4:	f042 0201 	orr.w	r2, r2, #1
   245b8:	f011 fd41 	bl	3603e <log_1>
			return rc;
   245bc:	e7bd      	b.n	2453a <flash_sync+0x32>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   245be:	4632      	mov	r2, r6
   245c0:	69eb      	ldr	r3, [r5, #28]
   245c2:	68a9      	ldr	r1, [r5, #8]
   245c4:	6828      	ldr	r0, [r5, #0]
   245c6:	4798      	blx	r3
		if (rc != 0) {
   245c8:	4604      	mov	r4, r0
   245ca:	2800      	cmp	r0, #0
   245cc:	d0d5      	beq.n	2457a <flash_sync+0x72>
   245ce:	4b06      	ldr	r3, [pc, #24]	; (245e8 <flash_sync+0xe0>)
   245d0:	4a06      	ldr	r2, [pc, #24]	; (245ec <flash_sync+0xe4>)
			LOG_ERR("callback failed: %d", rc);
   245d2:	4601      	mov	r1, r0
   245d4:	1ad2      	subs	r2, r2, r3
   245d6:	08d2      	lsrs	r2, r2, #3
   245d8:	0192      	lsls	r2, r2, #6
   245da:	4808      	ldr	r0, [pc, #32]	; (245fc <flash_sync+0xf4>)
   245dc:	f042 0201 	orr.w	r2, r2, #1
   245e0:	f011 fd2d 	bl	3603e <log_1>
   245e4:	e7c9      	b.n	2457a <flash_sync+0x72>
   245e6:	bf00      	nop
   245e8:	00039a50 	.word	0x00039a50
   245ec:	00039a50 	.word	0x00039a50
   245f0:	0003b961 	.word	0x0003b961
   245f4:	0003b98f 	.word	0x0003b98f
   245f8:	0003b9b3 	.word	0x0003b9b3
   245fc:	0003b9c9 	.word	0x0003b9c9

00024600 <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   24600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24604:	460d      	mov	r5, r1
   24606:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   2460a:	4691      	mov	r9, r2
   2460c:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   2460e:	4604      	mov	r4, r0
   24610:	b920      	cbnz	r0, 2461c <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
   24612:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   24616:	b003      	add	sp, #12
   24618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   2461c:	2900      	cmp	r1, #0
   2461e:	d0f8      	beq.n	24612 <stream_flash_init+0x12>
   24620:	2a00      	cmp	r2, #0
   24622:	d0f6      	beq.n	24612 <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   24624:	9300      	str	r3, [sp, #0]
   24626:	2300      	movs	r3, #0
	if (buf_len % flash_get_write_block_size(fdev)) {
   24628:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   2462a:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   2462c:	f012 fa43 	bl	36ab6 <flash_get_write_block_size>
   24630:	fbb7 f3f0 	udiv	r3, r7, r0
   24634:	fb03 7010 	mls	r0, r3, r0, r7
   24638:	b150      	cbz	r0, 24650 <stream_flash_init+0x50>
   2463a:	491e      	ldr	r1, [pc, #120]	; (246b4 <stream_flash_init+0xb4>)
   2463c:	4b1e      	ldr	r3, [pc, #120]	; (246b8 <stream_flash_init+0xb8>)
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   2463e:	481f      	ldr	r0, [pc, #124]	; (246bc <stream_flash_init+0xbc>)
   24640:	1ac9      	subs	r1, r1, r3
   24642:	08c9      	lsrs	r1, r1, #3
   24644:	0189      	lsls	r1, r1, #6
   24646:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Incorrect parameter");
   2464a:	f011 fce9 	bl	36020 <log_0>
   2464e:	e7e0      	b.n	24612 <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   24650:	466a      	mov	r2, sp
   24652:	4628      	mov	r0, r5
   24654:	491a      	ldr	r1, [pc, #104]	; (246c0 <stream_flash_init+0xc0>)
   24656:	f012 fdbb 	bl	371d0 <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   2465a:	9b01      	ldr	r3, [sp, #4]
   2465c:	2b00      	cmp	r3, #0
   2465e:	d0d8      	beq.n	24612 <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   24660:	eb08 0206 	add.w	r2, r8, r6
   24664:	4293      	cmp	r3, r2
   24666:	d208      	bcs.n	2467a <stream_flash_init+0x7a>
   24668:	4912      	ldr	r1, [pc, #72]	; (246b4 <stream_flash_init+0xb4>)
   2466a:	4b13      	ldr	r3, [pc, #76]	; (246b8 <stream_flash_init+0xb8>)
		LOG_ERR("Incorrect parameter");
   2466c:	4815      	ldr	r0, [pc, #84]	; (246c4 <stream_flash_init+0xc4>)
   2466e:	1ac9      	subs	r1, r1, r3
   24670:	08c9      	lsrs	r1, r1, #3
   24672:	0189      	lsls	r1, r1, #6
   24674:	f041 0101 	orr.w	r1, r1, #1
   24678:	e7e7      	b.n	2464a <stream_flash_init+0x4a>
	    offset % flash_get_write_block_size(fdev)) {
   2467a:	4628      	mov	r0, r5
   2467c:	f012 fa1b 	bl	36ab6 <flash_get_write_block_size>
   24680:	fbb8 f3f0 	udiv	r3, r8, r0
   24684:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   24688:	2800      	cmp	r0, #0
   2468a:	d1ed      	bne.n	24668 <stream_flash_init+0x68>
	ctx->buf_len = buf_len;
   2468c:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   24690:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   24692:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   24694:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   24696:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   2469a:	b916      	cbnz	r6, 246a2 <stream_flash_init+0xa2>
   2469c:	9e01      	ldr	r6, [sp, #4]
   2469e:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   246a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
   246a4:	2000      	movs	r0, #0
	ctx->callback = cb;
   246a6:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   246a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   246ac:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   246ae:	6223      	str	r3, [r4, #32]
	return 0;
   246b0:	e7b1      	b.n	24616 <stream_flash_init+0x16>
   246b2:	bf00      	nop
   246b4:	00039a50 	.word	0x00039a50
   246b8:	00039a50 	.word	0x00039a50
   246bc:	0003b9dd 	.word	0x0003b9dd
   246c0:	00024441 	.word	0x00024441
   246c4:	0003ba14 	.word	0x0003ba14

000246c8 <sys_pm_create_device_list>:
		++pmi;
	}
}

void sys_pm_create_device_list(void)
{
   246c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t count = z_device_get_all_static(&all_devices);
   246cc:	481f      	ldr	r0, [pc, #124]	; (2474c <sys_pm_create_device_list+0x84>)
   246ce:	f00e fc45 	bl	32f5c <z_device_get_all_static>

	__ASSERT_NO_MSG(count <= DEVICE_IDX_MAX);

	/* Reserve initial slots for core devices. */
	core_dev = 0;
	while (z_pm_core_devices[core_dev]) {
   246d2:	2300      	movs	r3, #0
   246d4:	4a1e      	ldr	r2, [pc, #120]	; (24750 <sys_pm_create_device_list+0x88>)
	size_t count = z_device_get_all_static(&all_devices);
   246d6:	9000      	str	r0, [sp, #0]
	while (z_pm_core_devices[core_dev]) {
   246d8:	fa1f f983 	uxth.w	r9, r3
   246dc:	f852 4029 	ldr.w	r4, [r2, r9, lsl #2]
   246e0:	3301      	adds	r3, #1
   246e2:	2c00      	cmp	r4, #0
   246e4:	d1f8      	bne.n	246d8 <sys_pm_create_device_list+0x10>
		core_dev++;
	}

	num_pm = core_dev;
   246e6:	4e1b      	ldr	r6, [pc, #108]	; (24754 <sys_pm_create_device_list+0x8c>)
	__ASSERT_NO_MSG(num_pm <= CONFIG_PM_MAX_DEVICES);

	for (pmi = 0; pmi < count; pmi++) {
		device_idx_t cdi = 0;
		const struct device *dev = &all_devices[pmi];
   246e8:	4b18      	ldr	r3, [pc, #96]	; (2474c <sys_pm_create_device_list+0x84>)
			++cdi;
		}

		/* Append the device if it doesn't have a reserved slot. */
		if (cdi == core_dev) {
			pm_devices[num_pm++] = pmi;
   246ea:	f8df a070 	ldr.w	sl, [pc, #112]	; 2475c <sys_pm_create_device_list+0x94>
	num_pm = core_dev;
   246ee:	f8a6 9000 	strh.w	r9, [r6]
	for (pmi = 0; pmi < count; pmi++) {
   246f2:	9a00      	ldr	r2, [sp, #0]
   246f4:	fa1f f884 	uxth.w	r8, r4
   246f8:	4542      	cmp	r2, r8
   246fa:	4645      	mov	r5, r8
   246fc:	d802      	bhi.n	24704 <sys_pm_create_device_list+0x3c>
		}
	}
}
   246fe:	b003      	add	sp, #12
   24700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct device *dev = &all_devices[pmi];
   24704:	2118      	movs	r1, #24
   24706:	681a      	ldr	r2, [r3, #0]
   24708:	fb01 2505 	mla	r5, r1, r5, r2
		if ((dev->device_pm_control == NULL) ||
   2470c:	692a      	ldr	r2, [r5, #16]
   2470e:	b1da      	cbz	r2, 24748 <sys_pm_create_device_list+0x80>
   24710:	4911      	ldr	r1, [pc, #68]	; (24758 <sys_pm_create_device_list+0x90>)
   24712:	428a      	cmp	r2, r1
   24714:	d018      	beq.n	24748 <sys_pm_create_device_list+0x80>
   24716:	2700      	movs	r7, #0
		while (z_pm_core_devices[cdi]) {
   24718:	490d      	ldr	r1, [pc, #52]	; (24750 <sys_pm_create_device_list+0x88>)
   2471a:	b2ba      	uxth	r2, r7
   2471c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   24720:	4693      	mov	fp, r2
   24722:	b151      	cbz	r1, 2473a <sys_pm_create_device_list+0x72>
			if (strcmp(dev->name, z_pm_core_devices[cdi]) == 0) {
   24724:	6828      	ldr	r0, [r5, #0]
   24726:	9201      	str	r2, [sp, #4]
   24728:	f7f8 fc98 	bl	1d05c <strcmp>
   2472c:	3701      	adds	r7, #1
   2472e:	9a01      	ldr	r2, [sp, #4]
   24730:	4b06      	ldr	r3, [pc, #24]	; (2474c <sys_pm_create_device_list+0x84>)
   24732:	2800      	cmp	r0, #0
   24734:	d1f0      	bne.n	24718 <sys_pm_create_device_list+0x50>
				pm_devices[cdi] = pmi;
   24736:	f82a 801b 	strh.w	r8, [sl, fp, lsl #1]
		if (cdi == core_dev) {
   2473a:	454a      	cmp	r2, r9
			pm_devices[num_pm++] = pmi;
   2473c:	bf01      	itttt	eq
   2473e:	8832      	ldrheq	r2, [r6, #0]
   24740:	1c51      	addeq	r1, r2, #1
   24742:	8031      	strheq	r1, [r6, #0]
   24744:	f82a 8012 	strheq.w	r8, [sl, r2, lsl #1]
	for (pmi = 0; pmi < count; pmi++) {
   24748:	3401      	adds	r4, #1
   2474a:	e7d2      	b.n	246f2 <sys_pm_create_device_list+0x2a>
   2474c:	2002348c 	.word	0x2002348c
   24750:	00039e64 	.word	0x00039e64
   24754:	20028786 	.word	0x20028786
   24758:	00038143 	.word	0x00038143
   2475c:	20028788 	.word	0x20028788

00024760 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   24760:	b507      	push	{r0, r1, r2, lr}
   24762:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   24764:	f04f 0220 	mov.w	r2, #32
   24768:	f3ef 8311 	mrs	r3, BASEPRI
   2476c:	f382 8811 	msr	BASEPRI, r2
   24770:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   24774:	f012 faaf 	bl	36cd6 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   24778:	9801      	ldr	r0, [sp, #4]
   2477a:	f000 fff7 	bl	2576c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2477e:	4803      	ldr	r0, [pc, #12]	; (2478c <sys_reboot+0x2c>)
   24780:	f010 ffdc 	bl	3573c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   24784:	f000 fcaa 	bl	250dc <arch_cpu_idle>
   24788:	e7fc      	b.n	24784 <sys_reboot+0x24>
   2478a:	bf00      	nop
   2478c:	0003ba6f 	.word	0x0003ba6f

00024790 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   24790:	b508      	push	{r3, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   24792:	4804      	ldr	r0, [pc, #16]	; (247a4 <rtt_console_init+0x14>)
   24794:	f7fd ff92 	bl	226bc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   24798:	4802      	ldr	r0, [pc, #8]	; (247a4 <rtt_console_init+0x14>)
   2479a:	f001 fa05 	bl	25ba8 <__stdout_hook_install>

	return 0;
}
   2479e:	2000      	movs	r0, #0
   247a0:	bd08      	pop	{r3, pc}
   247a2:	bf00      	nop
   247a4:	000247a9 	.word	0x000247a9

000247a8 <rtt_console_out>:
{
   247a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   247ac:	4604      	mov	r4, r0
	char c = (char)character;
   247ae:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
   247b0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 24810 <rtt_console_out+0x68>
   247b4:	4e15      	ldr	r6, [pc, #84]	; (2480c <rtt_console_out+0x64>)
   247b6:	f88d 0007 	strb.w	r0, [sp, #7]
   247ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   247be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   247c2:	4640      	mov	r0, r8
   247c4:	f00e feca 	bl	3355c <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   247c8:	2201      	movs	r2, #1
   247ca:	f10d 0107 	add.w	r1, sp, #7
   247ce:	2000      	movs	r0, #0
   247d0:	f000 fb22 	bl	24e18 <SEGGER_RTT_WriteNoLock>
   247d4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   247d6:	4640      	mov	r0, r8
   247d8:	f00e ff38 	bl	3364c <z_impl_k_mutex_unlock>
		if (cnt) {
   247dc:	b12f      	cbz	r7, 247ea <rtt_console_out+0x42>
			host_present = true;
   247de:	2301      	movs	r3, #1
   247e0:	7033      	strb	r3, [r6, #0]
}
   247e2:	4620      	mov	r0, r4
   247e4:	b002      	add	sp, #8
   247e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   247ea:	7833      	ldrb	r3, [r6, #0]
   247ec:	2b00      	cmp	r3, #0
   247ee:	d0f8      	beq.n	247e2 <rtt_console_out+0x3a>
			if (max_cnt) {
   247f0:	3d01      	subs	r5, #1
   247f2:	d008      	beq.n	24806 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
   247f4:	f013 feee 	bl	385d4 <k_is_in_isr>
   247f8:	2800      	cmp	r0, #0
   247fa:	d1de      	bne.n	247ba <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   247fc:	2100      	movs	r1, #0
   247fe:	2042      	movs	r0, #66	; 0x42
   24800:	f00f fb28 	bl	33e54 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   24804:	e7d9      	b.n	247ba <rtt_console_out+0x12>
				host_present = false;
   24806:	7035      	strb	r5, [r6, #0]
   24808:	e7eb      	b.n	247e2 <rtt_console_out+0x3a>
   2480a:	bf00      	nop
   2480c:	2002b7b2 	.word	0x2002b7b2
   24810:	200207bc 	.word	0x200207bc

00024814 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   24814:	b570      	push	{r4, r5, r6, lr}
   24816:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
   24818:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   2481a:	480d      	ldr	r0, [pc, #52]	; (24850 <onoff_stop+0x3c>)
{
   2481c:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
   2481e:	1a23      	subs	r3, r4, r0
   24820:	109a      	asrs	r2, r3, #2
   24822:	4b0c      	ldr	r3, [pc, #48]	; (24854 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
   24824:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   24826:	4353      	muls	r3, r2
   24828:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   2482a:	435d      	muls	r5, r3
   2482c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   24830:	4418      	add	r0, r3
   24832:	f012 f9c0 	bl	36bb6 <set_off_state>
	if (err < 0) {
   24836:	1e01      	subs	r1, r0, #0
   24838:	db04      	blt.n	24844 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   2483a:	4b07      	ldr	r3, [pc, #28]	; (24858 <onoff_stop+0x44>)
   2483c:	442b      	add	r3, r5
   2483e:	685b      	ldr	r3, [r3, #4]
   24840:	4798      	blx	r3
	return 0;
   24842:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   24844:	4620      	mov	r0, r4
   24846:	4633      	mov	r3, r6
}
   24848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2484c:	4718      	bx	r3
   2484e:	bf00      	nop
   24850:	200234a0 	.word	0x200234a0
   24854:	b6db6db7 	.word	0xb6db6db7
   24858:	00039e88 	.word	0x00039e88

0002485c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   24860:	4c0f      	ldr	r4, [pc, #60]	; (248a0 <onoff_start+0x44>)
   24862:	4d10      	ldr	r5, [pc, #64]	; (248a4 <onoff_start+0x48>)
   24864:	1b03      	subs	r3, r0, r4
   24866:	109b      	asrs	r3, r3, #2
   24868:	435d      	muls	r5, r3
   2486a:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   2486c:	250c      	movs	r5, #12
   2486e:	435d      	muls	r5, r3
{
   24870:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   24872:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   24876:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   24878:	4420      	add	r0, r4
   2487a:	2140      	movs	r1, #64	; 0x40
   2487c:	f012 f9b4 	bl	36be8 <set_starting_state>
	if (err < 0) {
   24880:	1e01      	subs	r1, r0, #0
   24882:	db08      	blt.n	24896 <onoff_start+0x3a>
	subdata->cb = cb;
   24884:	4b08      	ldr	r3, [pc, #32]	; (248a8 <onoff_start+0x4c>)
   24886:	442c      	add	r4, r5
	subdata->user_data = user_data;
   24888:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2488c:	4b07      	ldr	r3, [pc, #28]	; (248ac <onoff_start+0x50>)
   2488e:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   24890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   24894:	4718      	bx	r3
		notify(mgr, err);
   24896:	4638      	mov	r0, r7
   24898:	4633      	mov	r3, r6
}
   2489a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   2489e:	4718      	bx	r3
   248a0:	200234a0 	.word	0x200234a0
   248a4:	b6db6db7 	.word	0xb6db6db7
   248a8:	00036c4b 	.word	0x00036c4b
   248ac:	00039e88 	.word	0x00039e88

000248b0 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   248b0:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   248b2:	2200      	movs	r2, #0
   248b4:	2101      	movs	r1, #1
{
   248b6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   248b8:	2005      	movs	r0, #5
   248ba:	f000 fba1 	bl	25000 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   248be:	2005      	movs	r0, #5
   248c0:	f000 fb6c 	bl	24f9c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   248c4:	480f      	ldr	r0, [pc, #60]	; (24904 <clk_init+0x54>)
   248c6:	f00e f97d 	bl	32bc4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   248ca:	4b0f      	ldr	r3, [pc, #60]	; (24908 <clk_init+0x58>)
   248cc:	4298      	cmp	r0, r3
   248ce:	d115      	bne.n	248fc <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   248d0:	f013 fc14 	bl	380fc <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   248d4:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   248d6:	490d      	ldr	r1, [pc, #52]	; (2490c <clk_init+0x5c>)
   248d8:	4630      	mov	r0, r6
   248da:	f010 ff99 	bl	35810 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   248de:	2800      	cmp	r0, #0
   248e0:	db0b      	blt.n	248fa <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   248e2:	2501      	movs	r5, #1
   248e4:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   248e6:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   248e8:	4908      	ldr	r1, [pc, #32]	; (2490c <clk_init+0x5c>)
   248ea:	f104 001c 	add.w	r0, r4, #28
   248ee:	f010 ff8f 	bl	35810 <onoff_manager_init>
		if (err < 0) {
   248f2:	2800      	cmp	r0, #0
   248f4:	db01      	blt.n	248fa <clk_init+0x4a>
	}

	return 0;
   248f6:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   248f8:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   248fa:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   248fc:	f06f 0004 	mvn.w	r0, #4
   24900:	e7fb      	b.n	248fa <clk_init+0x4a>
   24902:	bf00      	nop
   24904:	0002494d 	.word	0x0002494d
   24908:	0bad0000 	.word	0x0bad0000
   2490c:	00039ea0 	.word	0x00039ea0

00024910 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   24910:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   24912:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   24914:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   24916:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   24918:	434b      	muls	r3, r1
   2491a:	480a      	ldr	r0, [pc, #40]	; (24944 <clkstarted_handle.constprop.0+0x34>)
   2491c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   2491e:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   24920:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   24924:	4418      	add	r0, r3
	sub_data->cb = NULL;
   24926:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
   24928:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   2492a:	f012 f97b 	bl	36c24 <set_on_state>
	if (callback) {
   2492e:	b135      	cbz	r5, 2493e <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   24930:	462b      	mov	r3, r5
   24932:	9a01      	ldr	r2, [sp, #4]
   24934:	4804      	ldr	r0, [pc, #16]	; (24948 <clkstarted_handle.constprop.0+0x38>)
}
   24936:	b002      	add	sp, #8
   24938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   2493c:	4718      	bx	r3
}
   2493e:	b002      	add	sp, #8
   24940:	bd70      	pop	{r4, r5, r6, pc}
   24942:	bf00      	nop
   24944:	200234a0 	.word	0x200234a0
   24948:	2002063c 	.word	0x2002063c

0002494c <clock_event_handler>:
	switch (event) {
   2494c:	b110      	cbz	r0, 24954 <clock_event_handler+0x8>
   2494e:	2801      	cmp	r0, #1
   24950:	d004      	beq.n	2495c <clock_event_handler+0x10>
   24952:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   24954:	4b03      	ldr	r3, [pc, #12]	; (24964 <clock_event_handler+0x18>)
   24956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   24958:	075b      	lsls	r3, r3, #29
   2495a:	d101      	bne.n	24960 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2495c:	f7ff bfd8 	b.w	24910 <clkstarted_handle.constprop.0>
}
   24960:	4770      	bx	lr
   24962:	bf00      	nop
   24964:	200234a0 	.word	0x200234a0

00024968 <generic_hfclk_start>:
{
   24968:	b508      	push	{r3, lr}
   2496a:	f04f 0320 	mov.w	r3, #32
   2496e:	f3ef 8111 	mrs	r1, BASEPRI
   24972:	f383 8811 	msr	BASEPRI, r3
   24976:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2497a:	4a11      	ldr	r2, [pc, #68]	; (249c0 <generic_hfclk_start+0x58>)
   2497c:	6813      	ldr	r3, [r2, #0]
   2497e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   24982:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   24986:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   24988:	d00b      	beq.n	249a2 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2498a:	4a0e      	ldr	r2, [pc, #56]	; (249c4 <generic_hfclk_start+0x5c>)
   2498c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   24990:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   24994:	f013 0301 	ands.w	r3, r3, #1
   24998:	d003      	beq.n	249a2 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   2499a:	480b      	ldr	r0, [pc, #44]	; (249c8 <generic_hfclk_start+0x60>)
   2499c:	f012 f942 	bl	36c24 <set_on_state>
			already_started = true;
   249a0:	2301      	movs	r3, #1
	__asm__ volatile(
   249a2:	f381 8811 	msr	BASEPRI, r1
   249a6:	f3bf 8f6f 	isb	sy
	if (already_started) {
   249aa:	b123      	cbz	r3, 249b6 <generic_hfclk_start+0x4e>
}
   249ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   249b0:	2000      	movs	r0, #0
   249b2:	f7ff bfad 	b.w	24910 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   249b6:	2001      	movs	r0, #1
}
   249b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   249bc:	f00e b912 	b.w	32be4 <nrfx_clock_start>
   249c0:	200234f0 	.word	0x200234f0
   249c4:	40005000 	.word	0x40005000
   249c8:	200234e0 	.word	0x200234e0

000249cc <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   249cc:	4b07      	ldr	r3, [pc, #28]	; (249ec <generic_hfclk_stop+0x20>)
   249ce:	e8d3 2fef 	ldaex	r2, [r3]
   249d2:	f022 0102 	bic.w	r1, r2, #2
   249d6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   249da:	2800      	cmp	r0, #0
   249dc:	d1f7      	bne.n	249ce <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   249de:	07d3      	lsls	r3, r2, #31
   249e0:	d402      	bmi.n	249e8 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   249e2:	2001      	movs	r0, #1
   249e4:	f00e b930 	b.w	32c48 <nrfx_clock_stop>
}
   249e8:	4770      	bx	lr
   249ea:	bf00      	nop
   249ec:	200234f0 	.word	0x200234f0

000249f0 <api_blocking_start>:
{
   249f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   249f2:	2200      	movs	r2, #0
   249f4:	2301      	movs	r3, #1
   249f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   249fa:	ab04      	add	r3, sp, #16
   249fc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   24a00:	4a09      	ldr	r2, [pc, #36]	; (24a28 <api_blocking_start+0x38>)
   24a02:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   24a04:	f8cd d000 	str.w	sp, [sp]
   24a08:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   24a0c:	f012 f944 	bl	36c98 <api_start>
	if (err < 0) {
   24a10:	2800      	cmp	r0, #0
   24a12:	db05      	blt.n	24a20 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   24a14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   24a18:	2300      	movs	r3, #0
   24a1a:	4668      	mov	r0, sp
   24a1c:	f00f fa66 	bl	33eec <z_impl_k_sem_take>
}
   24a20:	b007      	add	sp, #28
   24a22:	f85d fb04 	ldr.w	pc, [sp], #4
   24a26:	bf00      	nop
   24a28:	00036c5f 	.word	0x00036c5f

00024a2c <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
   24a2c:	b2c3      	uxtb	r3, r0
}
   24a2e:	201c      	movs	r0, #28
   24a30:	4a01      	ldr	r2, [pc, #4]	; (24a38 <z_nrf_clock_control_get_onoff+0xc>)
   24a32:	fb03 2000 	mla	r0, r3, r0, r2
   24a36:	4770      	bx	lr
   24a38:	200234a0 	.word	0x200234a0

00024a3c <z_nrf_clock_control_lf_on>:
{
   24a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24a40:	2201      	movs	r2, #1
   24a42:	4607      	mov	r7, r0
   24a44:	4936      	ldr	r1, [pc, #216]	; (24b20 <z_nrf_clock_control_lf_on+0xe4>)
   24a46:	e8d1 3fef 	ldaex	r3, [r1]
   24a4a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   24a4e:	2800      	cmp	r0, #0
   24a50:	d1f9      	bne.n	24a46 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   24a52:	b933      	cbnz	r3, 24a62 <z_nrf_clock_control_lf_on+0x26>
   24a54:	4933      	ldr	r1, [pc, #204]	; (24b24 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
   24a56:	4834      	ldr	r0, [pc, #208]	; (24b28 <z_nrf_clock_control_lf_on+0xec>)
   24a58:	604b      	str	r3, [r1, #4]
   24a5a:	60cb      	str	r3, [r1, #12]
   24a5c:	608a      	str	r2, [r1, #8]
   24a5e:	f010 feea 	bl	35836 <onoff_request>
	switch (start_mode) {
   24a62:	1e7b      	subs	r3, r7, #1
   24a64:	2b01      	cmp	r3, #1
   24a66:	d82e      	bhi.n	24ac6 <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   24a68:	2f01      	cmp	r7, #1
   24a6a:	d106      	bne.n	24a7a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   24a6c:	4b2f      	ldr	r3, [pc, #188]	; (24b2c <z_nrf_clock_control_lf_on+0xf0>)
   24a6e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   24a72:	f003 0303 	and.w	r3, r3, #3
   24a76:	2b02      	cmp	r3, #2
   24a78:	d025      	beq.n	24ac6 <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   24a7a:	f013 fdab 	bl	385d4 <k_is_in_isr>
   24a7e:	4604      	mov	r4, r0
   24a80:	b918      	cbnz	r0, 24a8a <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
   24a82:	4b2b      	ldr	r3, [pc, #172]	; (24b30 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
   24a84:	781b      	ldrb	r3, [r3, #0]
   24a86:	2b00      	cmp	r3, #0
   24a88:	d144      	bne.n	24b14 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
   24a8a:	f04f 0320 	mov.w	r3, #32
   24a8e:	f3ef 8611 	mrs	r6, BASEPRI
   24a92:	f383 8811 	msr	BASEPRI, r3
   24a96:	f3bf 8f6f 	isb	sy
   24a9a:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   24a9c:	4d23      	ldr	r5, [pc, #140]	; (24b2c <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   24a9e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 24b3c <z_nrf_clock_control_lf_on+0x100>
   24aa2:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   24aa4:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   24aa8:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   24aac:	03d2      	lsls	r2, r2, #15
   24aae:	d50c      	bpl.n	24aca <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   24ab0:	f003 0303 	and.w	r3, r3, #3
   24ab4:	2b02      	cmp	r3, #2
   24ab6:	d001      	beq.n	24abc <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   24ab8:	2f01      	cmp	r7, #1
   24aba:	d106      	bne.n	24aca <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
   24abc:	b334      	cbz	r4, 24b0c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   24abe:	f386 8811 	msr	BASEPRI, r6
   24ac2:	f3bf 8f6f 	isb	sy
}
   24ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   24aca:	b1d4      	cbz	r4, 24b02 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   24acc:	4630      	mov	r0, r6
   24ace:	f000 fb13 	bl	250f8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   24ad2:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   24ad6:	b2db      	uxtb	r3, r3
   24ad8:	2b01      	cmp	r3, #1
   24ada:	d1e3      	bne.n	24aa4 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   24adc:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   24ae0:	2a00      	cmp	r2, #0
   24ae2:	d0df      	beq.n	24aa4 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24ae4:	2200      	movs	r2, #0
   24ae6:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   24aea:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   24aee:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   24af0:	2120      	movs	r1, #32
   24af2:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   24af6:	4a0f      	ldr	r2, [pc, #60]	; (24b34 <z_nrf_clock_control_lf_on+0xf8>)
   24af8:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24afc:	4a0e      	ldr	r2, [pc, #56]	; (24b38 <z_nrf_clock_control_lf_on+0xfc>)
   24afe:	6013      	str	r3, [r2, #0]
}
   24b00:	e7d0      	b.n	24aa4 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   24b02:	2100      	movs	r1, #0
   24b04:	2021      	movs	r0, #33	; 0x21
   24b06:	f00f f9a5 	bl	33e54 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   24b0a:	e7e2      	b.n	24ad2 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
   24b0c:	2302      	movs	r3, #2
   24b0e:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   24b12:	e7d8      	b.n	24ac6 <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
   24b14:	2202      	movs	r2, #2
   24b16:	4b05      	ldr	r3, [pc, #20]	; (24b2c <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   24b18:	4606      	mov	r6, r0
   24b1a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24b1e:	e7bd      	b.n	24a9c <z_nrf_clock_control_lf_on+0x60>
   24b20:	200234f4 	.word	0x200234f4
   24b24:	20023490 	.word	0x20023490
   24b28:	200234bc 	.word	0x200234bc
   24b2c:	40005000 	.word	0x40005000
   24b30:	2002c6e7 	.word	0x2002c6e7
   24b34:	e000e100 	.word	0xe000e100
   24b38:	40005008 	.word	0x40005008
   24b3c:	40005104 	.word	0x40005104

00024b40 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   24b40:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   24b42:	4b08      	ldr	r3, [pc, #32]	; (24b64 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   24b44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   24b48:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   24b4c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   24b50:	4290      	cmp	r0, r2
   24b52:	d100      	bne.n	24b56 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   24b54:	4770      	bx	lr
   24b56:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   24b5a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   24b5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   24b60:	e7f2      	b.n	24b48 <handle_next_cycle_case+0x8>
   24b62:	bf00      	nop
   24b64:	40015000 	.word	0x40015000

00024b68 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24b68:	2200      	movs	r2, #0
   24b6a:	4b07      	ldr	r3, [pc, #28]	; (24b88 <rtc_nrf_isr+0x20>)
   24b6c:	601a      	str	r2, [r3, #0]
   24b6e:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   24b70:	4a06      	ldr	r2, [pc, #24]	; (24b8c <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   24b72:	4b07      	ldr	r3, [pc, #28]	; (24b90 <rtc_nrf_isr+0x28>)
   24b74:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   24b78:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   24b7a:	1ac0      	subs	r0, r0, r3
   24b7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   24b80:	4403      	add	r3, r0
   24b82:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   24b84:	f00f bc1c 	b.w	343c0 <z_clock_announce>
   24b88:	40015140 	.word	0x40015140
   24b8c:	200234f8 	.word	0x200234f8
   24b90:	40015000 	.word	0x40015000

00024b94 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   24b94:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   24b96:	2400      	movs	r4, #0
   24b98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   24b9c:	4d0e      	ldr	r5, [pc, #56]	; (24bd8 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24b9e:	4b0f      	ldr	r3, [pc, #60]	; (24bdc <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   24ba0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24ba4:	601c      	str	r4, [r3, #0]
   24ba6:	681b      	ldr	r3, [r3, #0]
   24ba8:	4b0d      	ldr	r3, [pc, #52]	; (24be0 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   24baa:	2101      	movs	r1, #1
   24bac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   24bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   24bb4:	4622      	mov	r2, r4
   24bb6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   24bba:	2015      	movs	r0, #21
   24bbc:	f000 fa20 	bl	25000 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   24bc0:	2015      	movs	r0, #21
   24bc2:	f000 f9eb 	bl	24f9c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   24bc6:	2301      	movs	r3, #1
   24bc8:	4a06      	ldr	r2, [pc, #24]	; (24be4 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   24bca:	2002      	movs	r0, #2
   24bcc:	6013      	str	r3, [r2, #0]
   24bce:	602b      	str	r3, [r5, #0]
   24bd0:	f7ff ff34 	bl	24a3c <z_nrf_clock_control_lf_on>

	return 0;
}
   24bd4:	4620      	mov	r0, r4
   24bd6:	bd38      	pop	{r3, r4, r5, pc}
   24bd8:	40015000 	.word	0x40015000
   24bdc:	40015140 	.word	0x40015140
   24be0:	e000e100 	.word	0xe000e100
   24be4:	40015008 	.word	0x40015008

00024be8 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   24be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   24bea:	4b2e      	ldr	r3, [pc, #184]	; (24ca4 <z_clock_set_timeout+0xbc>)
   24bec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   24bf0:	bf08      	it	eq
   24bf2:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   24bf4:	3801      	subs	r0, #1
   24bf6:	2800      	cmp	r0, #0
   24bf8:	dd41      	ble.n	24c7e <z_clock_set_timeout+0x96>
   24bfa:	4298      	cmp	r0, r3
   24bfc:	bfa8      	it	ge
   24bfe:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   24c00:	4b29      	ldr	r3, [pc, #164]	; (24ca8 <z_clock_set_timeout+0xc0>)

	uint32_t unannounced = counter_sub(counter(), last_count);
   24c02:	492a      	ldr	r1, [pc, #168]	; (24cac <z_clock_set_timeout+0xc4>)
   24c04:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   24c08:	6809      	ldr	r1, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24c0a:	2600      	movs	r6, #0
	return (a - b) & COUNTER_MAX;
   24c0c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   24c0e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   24c12:	bf18      	it	ne
   24c14:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   24c16:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   24c1a:	3401      	adds	r4, #1
   24c1c:	4420      	add	r0, r4
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   24c1e:	4c21      	ldr	r4, [pc, #132]	; (24ca4 <z_clock_set_timeout+0xbc>)
   24c20:	4d23      	ldr	r5, [pc, #140]	; (24cb0 <z_clock_set_timeout+0xc8>)
   24c22:	42a0      	cmp	r0, r4
   24c24:	bf94      	ite	ls
   24c26:	180c      	addls	r4, r1, r0
   24c28:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   24c2a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   24c2e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   24c32:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   24c36:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24c3a:	602e      	str	r6, [r5, #0]
   24c3c:	682f      	ldr	r7, [r5, #0]
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   24c3e:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   24c42:	f8c3 7540 	str.w	r7, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   24c46:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	return (a - b) & COUNTER_MAX;
   24c4a:	1a53      	subs	r3, r2, r1
   24c4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   24c50:	2b01      	cmp	r3, #1
   24c52:	d104      	bne.n	24c5e <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
   24c54:	200f      	movs	r0, #15
   24c56:	f013 fcc3 	bl	385e0 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24c5a:	602e      	str	r6, [r5, #0]
   24c5c:	682b      	ldr	r3, [r5, #0]
   24c5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   24c62:	4b14      	ldr	r3, [pc, #80]	; (24cb4 <z_clock_set_timeout+0xcc>)
   24c64:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   24c68:	4b0f      	ldr	r3, [pc, #60]	; (24ca8 <z_clock_set_timeout+0xc0>)
   24c6a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   24c6e:	1a22      	subs	r2, r4, r0
   24c70:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   24c74:	2a01      	cmp	r2, #1
   24c76:	d104      	bne.n	24c82 <z_clock_set_timeout+0x9a>
		handle_next_cycle_case(t);
   24c78:	f7ff ff62 	bl	24b40 <handle_next_cycle_case>
   24c7c:	e00b      	b.n	24c96 <z_clock_set_timeout+0xae>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   24c7e:	2000      	movs	r0, #0
   24c80:	e7be      	b.n	24c00 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   24c82:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   24c86:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   24c8a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   24c8e:	1a24      	subs	r4, r4, r0
   24c90:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   24c92:	0223      	lsls	r3, r4, #8
   24c94:	d4f0      	bmi.n	24c78 <z_clock_set_timeout+0x90>
    p_reg->INTENSET = mask;
   24c96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   24c9a:	4b03      	ldr	r3, [pc, #12]	; (24ca8 <z_clock_set_timeout+0xc0>)
   24c9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   24ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24ca2:	bf00      	nop
   24ca4:	007fffff 	.word	0x007fffff
   24ca8:	40015000 	.word	0x40015000
   24cac:	200234f8 	.word	0x200234f8
   24cb0:	40015140 	.word	0x40015140
   24cb4:	e000e100 	.word	0xe000e100

00024cb8 <z_clock_elapsed>:
	__asm__ volatile(
   24cb8:	f04f 0220 	mov.w	r2, #32
   24cbc:	f3ef 8311 	mrs	r3, BASEPRI
   24cc0:	f382 8811 	msr	BASEPRI, r2
   24cc4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   24cc8:	4a06      	ldr	r2, [pc, #24]	; (24ce4 <z_clock_elapsed+0x2c>)
   24cca:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   24cce:	4a06      	ldr	r2, [pc, #24]	; (24ce8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   24cd0:	6812      	ldr	r2, [r2, #0]
   24cd2:	1a80      	subs	r0, r0, r2
   24cd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   24cd8:	f383 8811 	msr	BASEPRI, r3
   24cdc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   24ce0:	4770      	bx	lr
   24ce2:	bf00      	nop
   24ce4:	40015000 	.word	0x40015000
   24ce8:	200234f8 	.word	0x200234f8

00024cec <z_timer_cycle_get_32>:
	__asm__ volatile(
   24cec:	f04f 0320 	mov.w	r3, #32
   24cf0:	f3ef 8211 	mrs	r2, BASEPRI
   24cf4:	f383 8811 	msr	BASEPRI, r3
   24cf8:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   24cfc:	4906      	ldr	r1, [pc, #24]	; (24d18 <z_timer_cycle_get_32+0x2c>)
   24cfe:	4b07      	ldr	r3, [pc, #28]	; (24d1c <z_timer_cycle_get_32+0x30>)
   24d00:	6808      	ldr	r0, [r1, #0]
   24d02:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   24d06:	f382 8811 	msr	BASEPRI, r2
   24d0a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   24d0e:	1a1b      	subs	r3, r3, r0
   24d10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   24d14:	4418      	add	r0, r3
   24d16:	4770      	bx	lr
   24d18:	200234f8 	.word	0x200234f8
   24d1c:	40015000 	.word	0x40015000

00024d20 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   24d20:	2303      	movs	r3, #3
static void _DoInit(void) {
   24d22:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   24d24:	4c10      	ldr	r4, [pc, #64]	; (24d68 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   24d26:	4a11      	ldr	r2, [pc, #68]	; (24d6c <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   24d28:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   24d2c:	4b10      	ldr	r3, [pc, #64]	; (24d70 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   24d2e:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   24d30:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   24d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   24d36:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   24d38:	4a0e      	ldr	r2, [pc, #56]	; (24d74 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   24d3a:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   24d3c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   24d3e:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   24d40:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   24d42:	490d      	ldr	r1, [pc, #52]	; (24d78 <_DoInit+0x58>)
   24d44:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   24d46:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   24d48:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   24d4a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   24d4c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   24d4e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   24d50:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   24d52:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   24d54:	f014 f852 	bl	38dfc <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   24d58:	4620      	mov	r0, r4
   24d5a:	4908      	ldr	r1, [pc, #32]	; (24d7c <_DoInit+0x5c>)
   24d5c:	f014 f84e 	bl	38dfc <strcpy>
  p->acID[6] = ' ';
   24d60:	2320      	movs	r3, #32
   24d62:	71a3      	strb	r3, [r4, #6]
}
   24d64:	bd10      	pop	{r4, pc}
   24d66:	bf00      	nop
   24d68:	200234fc 	.word	0x200234fc
   24d6c:	0003bab2 	.word	0x0003bab2
   24d70:	2002b7c3 	.word	0x2002b7c3
   24d74:	2002b7b3 	.word	0x2002b7b3
   24d78:	0003babb 	.word	0x0003babb
   24d7c:	0003babf 	.word	0x0003babf

00024d80 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
   24d84:	f04f 0b18 	mov.w	fp, #24
   24d88:	4f22      	ldr	r7, [pc, #136]	; (24e14 <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24d8a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   24d8c:	fb0b 7200 	mla	r2, fp, r0, r7
   24d90:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   24d92:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24d94:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   24d96:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24d98:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   24d9a:	d834      	bhi.n	24e06 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   24d9c:	f8d2 a020 	ldr.w	sl, [r2, #32]
   24da0:	ebaa 0905 	sub.w	r9, sl, r5
   24da4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   24da8:	4294      	cmp	r4, r2
   24daa:	d811      	bhi.n	24dd0 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
   24dac:	f04f 0918 	mov.w	r9, #24
   24db0:	fb06 9309 	mla	r3, r6, r9, r9
   24db4:	443b      	add	r3, r7
   24db6:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24db8:	4622      	mov	r2, r4
   24dba:	4641      	mov	r1, r8
   24dbc:	4428      	add	r0, r5
   24dbe:	f013 febe 	bl	38b3e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   24dc2:	fb09 7606 	mla	r6, r9, r6, r7
   24dc6:	442c      	add	r4, r5
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
      return 1;
   24dc8:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   24dca:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   24dcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   24dd0:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   24dd2:	429c      	cmp	r4, r3
   24dd4:	d81b      	bhi.n	24e0e <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
   24dd6:	fb00 bb0b 	mla	fp, r0, fp, fp
   24dda:	44bb      	add	fp, r7
   24ddc:	f8db 0004 	ldr.w	r0, [fp, #4]
   24de0:	464a      	mov	r2, r9
   24de2:	4428      	add	r0, r5
   24de4:	442c      	add	r4, r5
   24de6:	f013 feaa 	bl	38b3e <memcpy>
      if (NumBytes) {
   24dea:	ebb4 040a 	subs.w	r4, r4, sl
   24dee:	d006      	beq.n	24dfe <SEGGER_RTT_WriteSkipNoLock+0x7e>
   24df0:	4622      	mov	r2, r4
   24df2:	f8db 0004 	ldr.w	r0, [fp, #4]
   24df6:	eb08 0109 	add.w	r1, r8, r9
   24dfa:	f013 fea0 	bl	38b3e <memcpy>
      pRing->WrOff = NumBytes;
   24dfe:	2018      	movs	r0, #24
   24e00:	fb00 7606 	mla	r6, r0, r6, r7
   24e04:	e7e0      	b.n	24dc8 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   24e06:	3b01      	subs	r3, #1
   24e08:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   24e0a:	42a3      	cmp	r3, r4
   24e0c:	d2ce      	bcs.n	24dac <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   24e0e:	2000      	movs	r0, #0
   24e10:	e7dc      	b.n	24dcc <SEGGER_RTT_WriteSkipNoLock+0x4c>
   24e12:	bf00      	nop
   24e14:	200234fc 	.word	0x200234fc

00024e18 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   24e1a:	2318      	movs	r3, #24
   24e1c:	4c17      	ldr	r4, [pc, #92]	; (24e7c <SEGGER_RTT_WriteNoLock+0x64>)
   24e1e:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   24e22:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   24e26:	4425      	add	r5, r4
  switch (pRing->Flags) {
   24e28:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24e2a:	460f      	mov	r7, r1
  switch (pRing->Flags) {
   24e2c:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24e2e:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   24e30:	d00f      	beq.n	24e52 <SEGGER_RTT_WriteNoLock+0x3a>
   24e32:	2c02      	cmp	r4, #2
   24e34:	d01a      	beq.n	24e6c <SEGGER_RTT_WriteNoLock+0x54>
   24e36:	b9f4      	cbnz	r4, 24e76 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   24e38:	4628      	mov	r0, r5
   24e3a:	f011 ff65 	bl	36d08 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   24e3e:	4286      	cmp	r6, r0
   24e40:	d805      	bhi.n	24e4e <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   24e42:	4632      	mov	r2, r6
   24e44:	4639      	mov	r1, r7
   24e46:	4628      	mov	r0, r5
   24e48:	f011 ff6c 	bl	36d24 <_WriteNoCheck>
   24e4c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   24e4e:	4620      	mov	r0, r4
   24e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   24e52:	4628      	mov	r0, r5
   24e54:	f011 ff58 	bl	36d08 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   24e58:	4286      	cmp	r6, r0
   24e5a:	4634      	mov	r4, r6
   24e5c:	bf28      	it	cs
   24e5e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   24e60:	4639      	mov	r1, r7
   24e62:	4622      	mov	r2, r4
   24e64:	4628      	mov	r0, r5
   24e66:	f011 ff5d 	bl	36d24 <_WriteNoCheck>
    break;
   24e6a:	e7f0      	b.n	24e4e <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   24e6c:	4628      	mov	r0, r5
}
   24e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   24e72:	f011 bf73 	b.w	36d5c <_WriteBlocking>
  switch (pRing->Flags) {
   24e76:	2400      	movs	r4, #0
  return Status;
   24e78:	e7e9      	b.n	24e4e <SEGGER_RTT_WriteNoLock+0x36>
   24e7a:	bf00      	nop
   24e7c:	200234fc 	.word	0x200234fc

00024e80 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
   24e80:	2218      	movs	r2, #24
   24e82:	4b03      	ldr	r3, [pc, #12]	; (24e90 <SEGGER_RTT_HasDataUp+0x10>)
   24e84:	fb02 3000 	mla	r0, r2, r0, r3
   24e88:	6a83      	ldr	r3, [r0, #40]	; 0x28
  return pRing->WrOff - v;
   24e8a:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   24e8c:	1ac0      	subs	r0, r0, r3
   24e8e:	4770      	bx	lr
   24e90:	200234fc 	.word	0x200234fc

00024e94 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   24e94:	4a0a      	ldr	r2, [pc, #40]	; (24ec0 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   24e96:	490b      	ldr	r1, [pc, #44]	; (24ec4 <arch_swap+0x30>)
	_current->arch.basepri = key;
   24e98:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   24e9a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   24e9c:	67d8      	str	r0, [r3, #124]	; 0x7c
	_current->arch.swap_return_value = _k_neg_eagain;
   24e9e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   24ea2:	4909      	ldr	r1, [pc, #36]	; (24ec8 <arch_swap+0x34>)
   24ea4:	684b      	ldr	r3, [r1, #4]
   24ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   24eaa:	604b      	str	r3, [r1, #4]
   24eac:	2300      	movs	r3, #0
   24eae:	f383 8811 	msr	BASEPRI, r3
   24eb2:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   24eb6:	6893      	ldr	r3, [r2, #8]
}
   24eb8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   24ebc:	4770      	bx	lr
   24ebe:	bf00      	nop
   24ec0:	20023ef8 	.word	0x20023ef8
   24ec4:	0003a47c 	.word	0x0003a47c
   24ec8:	e000ed00 	.word	0xe000ed00

00024ecc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   24ecc:	4929      	ldr	r1, [pc, #164]	; (24f74 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   24ece:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   24ed0:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   24ed4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   24ed6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   24eda:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   24ede:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   24ee2:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   24ee6:	d004      	beq.n	24ef2 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   24ee8:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   24eec:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   24ef0:	e007      	b.n	24f02 <out_fp_endif>

00024ef2 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   24ef2:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vstmia r0, {s16-s31}
   24ef6:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   24efa:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   24efe:	f050 0004 	orrs.w	r0, r0, #4

00024f02 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   24f02:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   24f06:	2020      	movs	r0, #32
    msr BASEPRI, r0
   24f08:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   24f0c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   24f10:	4f19      	ldr	r7, [pc, #100]	; (24f78 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   24f12:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   24f16:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   24f18:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   24f1a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   24f1c:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
   24f1e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   24f20:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   24f22:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   24f26:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   24f2a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   24f2e:	d105      	bne.n	24f3c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   24f30:	2300      	movs	r3, #0
    vmsr fpscr, r3
   24f32:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   24f36:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   24f3a:	e005      	b.n	24f48 <in_fp_endif>

00024f3c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   24f3c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   24f40:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vldmia r0, {s16-s31}
   24f44:	ec90 8a10 	vldmia	r0, {s16-s31}

00024f48 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   24f48:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   24f4c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   24f50:	f383 8814 	msr	CONTROL, r3
    isb
   24f54:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   24f58:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   24f5c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   24f60:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   24f64:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   24f68:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   24f6a:	f011 ff2b 	bl	36dc4 <configure_builtin_stack_guard>
    pop {r2, lr}
   24f6e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   24f72:	4770      	bx	lr
    ldr r1, =_kernel
   24f74:	20023ef8 	.word	0x20023ef8
    ldr v4, =_SCS_ICSR
   24f78:	e000ed04 	.word	0xe000ed04

00024f7c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   24f7c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   24f80:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   24f82:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   24f86:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   24f8a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   24f8c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   24f90:	2902      	cmp	r1, #2
    beq _oops
   24f92:	d0ff      	beq.n	24f94 <_oops>

00024f94 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   24f94:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   24f96:	f011 ff19 	bl	36dcc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   24f9a:	bd01      	pop	{r0, pc}

00024f9c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   24f9c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   24f9e:	2b00      	cmp	r3, #0
   24fa0:	db08      	blt.n	24fb4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   24fa2:	2201      	movs	r2, #1
   24fa4:	f000 001f 	and.w	r0, r0, #31
   24fa8:	fa02 f000 	lsl.w	r0, r2, r0
   24fac:	4a02      	ldr	r2, [pc, #8]	; (24fb8 <arch_irq_enable+0x1c>)
   24fae:	095b      	lsrs	r3, r3, #5
   24fb0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   24fb4:	4770      	bx	lr
   24fb6:	bf00      	nop
   24fb8:	e000e100 	.word	0xe000e100

00024fbc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   24fbc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   24fbe:	2b00      	cmp	r3, #0
   24fc0:	db0d      	blt.n	24fde <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   24fc2:	2201      	movs	r2, #1
   24fc4:	f000 001f 	and.w	r0, r0, #31
   24fc8:	fa02 f000 	lsl.w	r0, r2, r0
   24fcc:	095b      	lsrs	r3, r3, #5
   24fce:	4a04      	ldr	r2, [pc, #16]	; (24fe0 <arch_irq_disable+0x24>)
   24fd0:	3320      	adds	r3, #32
   24fd2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   24fd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   24fda:	f3bf 8f6f 	isb	sy
}
   24fde:	4770      	bx	lr
   24fe0:	e000e100 	.word	0xe000e100

00024fe4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   24fe4:	4b05      	ldr	r3, [pc, #20]	; (24ffc <arch_irq_is_enabled+0x18>)
   24fe6:	0942      	lsrs	r2, r0, #5
   24fe8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   24fec:	2301      	movs	r3, #1
   24fee:	f000 001f 	and.w	r0, r0, #31
   24ff2:	fa03 f000 	lsl.w	r0, r3, r0
}
   24ff6:	4010      	ands	r0, r2
   24ff8:	4770      	bx	lr
   24ffa:	bf00      	nop
   24ffc:	e000e100 	.word	0xe000e100

00025000 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   25000:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   25002:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   25004:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25008:	bfac      	ite	ge
   2500a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2500e:	4b06      	ldrlt	r3, [pc, #24]	; (25028 <z_arm_irq_priority_set+0x28>)
   25010:	ea4f 1141 	mov.w	r1, r1, lsl #5
   25014:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25016:	bfab      	itete	ge
   25018:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2501c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25020:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25024:	5419      	strblt	r1, [r3, r0]
}
   25026:	4770      	bx	lr
   25028:	e000ed14 	.word	0xe000ed14

0002502c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   2502c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2502e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   25030:	4b04      	ldr	r3, [pc, #16]	; (25044 <_arch_isr_direct_pm+0x18>)
   25032:	6a58      	ldr	r0, [r3, #36]	; 0x24
   25034:	b118      	cbz	r0, 2503e <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   25036:	2200      	movs	r2, #0
   25038:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
   2503a:	f013 f885 	bl	38148 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2503e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   25040:	bd08      	pop	{r3, pc}
   25042:	bf00      	nop
   25044:	20023ef8 	.word	0x20023ef8

00025048 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   25048:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2504c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   2504e:	490c      	ldr	r1, [pc, #48]	; (25080 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   25050:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   25054:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   25056:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   2505a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2505e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   25060:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   25064:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   25068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2506c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   25070:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   25072:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   25074:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   25076:	67c3      	str	r3, [r0, #124]	; 0x7c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   25078:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2507c:	4770      	bx	lr
   2507e:	bf00      	nop
   25080:	000358f1 	.word	0x000358f1

00025084 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   25084:	b508      	push	{r3, lr}
   25086:	4604      	mov	r4, r0
   25088:	460e      	mov	r6, r1
   2508a:	4615      	mov	r5, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   2508c:	2300      	movs	r3, #0
   2508e:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   25092:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   25096:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2509a:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2509e:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   250a2:	f000 fbd9 	bl	25858 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   250a6:	4b09      	ldr	r3, [pc, #36]	; (250cc <arch_switch_to_main_thread+0x48>)
   250a8:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   250aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   250ac:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   250b0:	4628      	mov	r0, r5
   250b2:	f386 8809 	msr	PSP, r6
   250b6:	2100      	movs	r1, #0
   250b8:	b663      	cpsie	if
   250ba:	f381 8811 	msr	BASEPRI, r1
   250be:	f3bf 8f6f 	isb	sy
   250c2:	2200      	movs	r2, #0
   250c4:	2300      	movs	r3, #0
   250c6:	f010 fc13 	bl	358f0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   250ca:	bf00      	nop
   250cc:	20023ef8 	.word	0x20023ef8

000250d0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   250d0:	4901      	ldr	r1, [pc, #4]	; (250d8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   250d2:	2210      	movs	r2, #16
	str	r2, [r1]
   250d4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   250d6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   250d8:	e000ed10 	.word	0xe000ed10

000250dc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   250dc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   250de:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   250e0:	f380 8811 	msr	BASEPRI, r0
	isb
   250e4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   250e8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   250ec:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   250ee:	b662      	cpsie	i
	isb
   250f0:	f3bf 8f6f 	isb	sy

	bx	lr
   250f4:	4770      	bx	lr
   250f6:	bf00      	nop

000250f8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   250f8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   250fa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   250fc:	f381 8811 	msr	BASEPRI, r1

	wfe
   25100:	bf20      	wfe

	msr	BASEPRI, r0
   25102:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   25106:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   25108:	4770      	bx	lr
   2510a:	bf00      	nop

0002510c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2510c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25110:	4606      	mov	r6, r0

	if (esf != NULL) {
   25112:	460d      	mov	r5, r1
{
   25114:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
   25116:	2900      	cmp	r1, #0
   25118:	d054      	beq.n	251c4 <z_arm_fatal_error+0xb8>
   2511a:	4b2e      	ldr	r3, [pc, #184]	; (251d4 <z_arm_fatal_error+0xc8>)
   2511c:	4c2e      	ldr	r4, [pc, #184]	; (251d8 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   2511e:	482f      	ldr	r0, [pc, #188]	; (251dc <z_arm_fatal_error+0xd0>)
   25120:	1ae4      	subs	r4, r4, r3
   25122:	08e4      	lsrs	r4, r4, #3
   25124:	01a4      	lsls	r4, r4, #6
   25126:	f044 0401 	orr.w	r4, r4, #1
   2512a:	f8ad 4000 	strh.w	r4, [sp]
   2512e:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   25132:	6809      	ldr	r1, [r1, #0]
   25134:	f010 ffb3 	bl	3609e <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   25138:	f8ad 4000 	strh.w	r4, [sp]
   2513c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   25140:	68e9      	ldr	r1, [r5, #12]
   25142:	4827      	ldr	r0, [pc, #156]	; (251e0 <z_arm_fatal_error+0xd4>)
   25144:	f010 ffab 	bl	3609e <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   25148:	4622      	mov	r2, r4
   2514a:	69e9      	ldr	r1, [r5, #28]
   2514c:	4825      	ldr	r0, [pc, #148]	; (251e4 <z_arm_fatal_error+0xd8>)
   2514e:	f010 ff76 	bl	3603e <log_1>
	for (int i = 0; i < 16; i += 4) {
   25152:	46a8      	mov	r8, r5
   25154:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   25156:	f8df 9098 	ldr.w	r9, [pc, #152]	; 251f0 <z_arm_fatal_error+0xe4>
   2515a:	edd8 7a08 	vldr	s15, [r8, #32]
   2515e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   25162:	edcd 7a03 	vstr	s15, [sp, #12]
   25166:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   2516a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   2516e:	edcd 7a05 	vstr	s15, [sp, #20]
   25172:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   25176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   2517a:	edcd 7a07 	vstr	s15, [sp, #28]
   2517e:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   25182:	2208      	movs	r2, #8
   25184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   25188:	1c7b      	adds	r3, r7, #1
   2518a:	9304      	str	r3, [sp, #16]
   2518c:	1cbb      	adds	r3, r7, #2
   2518e:	9306      	str	r3, [sp, #24]
   25190:	1cfb      	adds	r3, r7, #3
   25192:	9702      	str	r7, [sp, #8]
   25194:	9308      	str	r3, [sp, #32]
   25196:	4648      	mov	r0, r9
   25198:	4623      	mov	r3, r4
   2519a:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
   2519e:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   251a0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   251a4:	f010 ff9a 	bl	360dc <log_n>
	for (int i = 0; i < 16; i += 4) {
   251a8:	2f10      	cmp	r7, #16
   251aa:	f108 0810 	add.w	r8, r8, #16
   251ae:	d1d4      	bne.n	2515a <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   251b0:	4622      	mov	r2, r4
   251b2:	6e29      	ldr	r1, [r5, #96]	; 0x60
   251b4:	480c      	ldr	r0, [pc, #48]	; (251e8 <z_arm_fatal_error+0xdc>)
   251b6:	f010 ff42 	bl	3603e <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   251ba:	4622      	mov	r2, r4
   251bc:	69a9      	ldr	r1, [r5, #24]
   251be:	480b      	ldr	r0, [pc, #44]	; (251ec <z_arm_fatal_error+0xe0>)
   251c0:	f010 ff3d 	bl	3603e <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   251c4:	4629      	mov	r1, r5
   251c6:	4630      	mov	r0, r6
   251c8:	f00d ff1e 	bl	33008 <z_fatal_error>
}
   251cc:	b00b      	add	sp, #44	; 0x2c
   251ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   251d2:	bf00      	nop
   251d4:	00039a50 	.word	0x00039a50
   251d8:	00039b00 	.word	0x00039b00
   251dc:	0003bac6 	.word	0x0003bac6
   251e0:	0003baf5 	.word	0x0003baf5
   251e4:	0003bb24 	.word	0x0003bb24
   251e8:	0003bb76 	.word	0x0003bb76
   251ec:	0003bb85 	.word	0x0003bb85
   251f0:	0003bb33 	.word	0x0003bb33

000251f4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   251f4:	bf30      	wfi
    b z_SysNmiOnReset
   251f6:	f7ff bffd 	b.w	251f4 <z_SysNmiOnReset>
   251fa:	bf00      	nop

000251fc <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   251fc:	4a14      	ldr	r2, [pc, #80]	; (25250 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   251fe:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   25200:	4b14      	ldr	r3, [pc, #80]	; (25254 <z_arm_prep_c+0x58>)
   25202:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   25206:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   25208:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2520c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   25210:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   25214:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   25218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   2521c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   25220:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   25224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   25228:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   2522c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   25230:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   25234:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   25238:	2300      	movs	r3, #0
   2523a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   2523e:	f00d ff81 	bl	33144 <z_bss_zero>
	z_data_copy();
   25242:	f00d ff89 	bl	33158 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   25246:	f000 fad9 	bl	257fc <z_arm_interrupt_init>
	z_cstart();
   2524a:	f00d ffc3 	bl	331d4 <z_cstart>
   2524e:	bf00      	nop
   25250:	0001c200 	.word	0x0001c200
   25254:	e000ed00 	.word	0xe000ed00

00025258 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   25258:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2525a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2525c:	4a0b      	ldr	r2, [pc, #44]	; (2528c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2525e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   25260:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   25262:	bf1e      	ittt	ne
	movne	r1, #0
   25264:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   25266:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
   25268:	f012 ff6e 	blne	38148 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2526c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2526e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   25272:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   25276:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2527a:	4905      	ldr	r1, [pc, #20]	; (25290 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2527c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2527e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   25280:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   25282:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   25286:	4903      	ldr	r1, [pc, #12]	; (25294 <_isr_wrapper+0x3c>)
	bx r1
   25288:	4708      	bx	r1
   2528a:	0000      	.short	0x0000
	ldr r2, =_kernel
   2528c:	20023ef8 	.word	0x20023ef8
	ldr r1, =_sw_isr_table
   25290:	0003983c 	.word	0x0003983c
	ldr r1, =z_arm_int_exit
   25294:	00025745 	.word	0x00025745

00025298 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   25298:	2000      	movs	r0, #0
    msr CONTROL, r0
   2529a:	f380 8814 	msr	CONTROL, r0
    isb
   2529e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   252a2:	2000      	movs	r0, #0
    msr MSPLIM, r0
   252a4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   252a8:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   252ac:	f010 fe93 	bl	35fd6 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   252b0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   252b2:	490e      	ldr	r1, [pc, #56]	; (252ec <__start+0x54>)
    str r0, [r1]
   252b4:	6008      	str	r0, [r1, #0]
    dsb
   252b6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   252ba:	480d      	ldr	r0, [pc, #52]	; (252f0 <__start+0x58>)
    msr msp, r0
   252bc:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   252c0:	f000 fa76 	bl	257b0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   252c4:	2020      	movs	r0, #32
    msr BASEPRI, r0
   252c6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   252ca:	480a      	ldr	r0, [pc, #40]	; (252f4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   252cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   252d0:	1840      	adds	r0, r0, r1
    msr PSP, r0
   252d2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   252d6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   252da:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   252dc:	4308      	orrs	r0, r1
    msr CONTROL, r0
   252de:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   252e2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   252e6:	f7ff ff89 	bl	251fc <z_arm_prep_c>
   252ea:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   252ec:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   252f0:	2002fbe0 	.word	0x2002fbe0
    ldr r0, =z_interrupt_stacks
   252f4:	2002fd20 	.word	0x2002fd20

000252f8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   252f8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   252fc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   25300:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   25302:	4672      	mov	r2, lr
	bl z_arm_fault
   25304:	f000 f93e 	bl	25584 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   25308:	bd01      	pop	{r0, pc}
   2530a:	bf00      	nop

0002530c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   2530c:	b570      	push	{r4, r5, r6, lr}
   2530e:	4b28      	ldr	r3, [pc, #160]	; (253b0 <usage_fault.isra.0+0xa4>)
   25310:	4c28      	ldr	r4, [pc, #160]	; (253b4 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   25312:	4d29      	ldr	r5, [pc, #164]	; (253b8 <usage_fault.isra.0+0xac>)
   25314:	1ae4      	subs	r4, r4, r3
   25316:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   25318:	01a4      	lsls	r4, r4, #6
   2531a:	f044 0601 	orr.w	r6, r4, #1
   2531e:	4631      	mov	r1, r6
   25320:	4826      	ldr	r0, [pc, #152]	; (253bc <usage_fault.isra.0+0xb0>)
   25322:	f010 fe7d 	bl	36020 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   25326:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   25328:	0193      	lsls	r3, r2, #6
   2532a:	d503      	bpl.n	25334 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   2532c:	4631      	mov	r1, r6
   2532e:	4824      	ldr	r0, [pc, #144]	; (253c0 <usage_fault.isra.0+0xb4>)
   25330:	f010 fe76 	bl	36020 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   25334:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25336:	01dd      	lsls	r5, r3, #7
   25338:	d504      	bpl.n	25344 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   2533a:	4822      	ldr	r0, [pc, #136]	; (253c4 <usage_fault.isra.0+0xb8>)
   2533c:	f044 0101 	orr.w	r1, r4, #1
   25340:	f010 fe6e 	bl	36020 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   25344:	4d1c      	ldr	r5, [pc, #112]	; (253b8 <usage_fault.isra.0+0xac>)
   25346:	6aae      	ldr	r6, [r5, #40]	; 0x28
   25348:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   2534c:	d005      	beq.n	2535a <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   2534e:	481e      	ldr	r0, [pc, #120]	; (253c8 <usage_fault.isra.0+0xbc>)
   25350:	f044 0101 	orr.w	r1, r4, #1
   25354:	f010 fe64 	bl	36020 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   25358:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2535a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2535c:	0318      	lsls	r0, r3, #12
   2535e:	d504      	bpl.n	2536a <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   25360:	481a      	ldr	r0, [pc, #104]	; (253cc <usage_fault.isra.0+0xc0>)
   25362:	f044 0101 	orr.w	r1, r4, #1
   25366:	f010 fe5b 	bl	36020 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2536a:	4d13      	ldr	r5, [pc, #76]	; (253b8 <usage_fault.isra.0+0xac>)
   2536c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2536e:	0351      	lsls	r1, r2, #13
   25370:	d504      	bpl.n	2537c <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   25372:	4817      	ldr	r0, [pc, #92]	; (253d0 <usage_fault.isra.0+0xc4>)
   25374:	f044 0101 	orr.w	r1, r4, #1
   25378:	f010 fe52 	bl	36020 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2537c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2537e:	039a      	lsls	r2, r3, #14
   25380:	d504      	bpl.n	2538c <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   25382:	4814      	ldr	r0, [pc, #80]	; (253d4 <usage_fault.isra.0+0xc8>)
   25384:	f044 0101 	orr.w	r1, r4, #1
   25388:	f010 fe4a 	bl	36020 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2538c:	4d0a      	ldr	r5, [pc, #40]	; (253b8 <usage_fault.isra.0+0xac>)
   2538e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25390:	03db      	lsls	r3, r3, #15
   25392:	d504      	bpl.n	2539e <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   25394:	4810      	ldr	r0, [pc, #64]	; (253d8 <usage_fault.isra.0+0xcc>)
   25396:	f044 0101 	orr.w	r1, r4, #1
   2539a:	f010 fe41 	bl	36020 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2539e:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   253a0:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   253a2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   253a6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   253aa:	62ab      	str	r3, [r5, #40]	; 0x28
}
   253ac:	bd70      	pop	{r4, r5, r6, pc}
   253ae:	bf00      	nop
   253b0:	00039a50 	.word	0x00039a50
   253b4:	00039b00 	.word	0x00039b00
   253b8:	e000ed00 	.word	0xe000ed00
   253bc:	0003bbb3 	.word	0x0003bbb3
   253c0:	0003bbcb 	.word	0x0003bbcb
   253c4:	0003bbde 	.word	0x0003bbde
   253c8:	0003bbf8 	.word	0x0003bbf8
   253cc:	0003bc22 	.word	0x0003bc22
   253d0:	0003bc40 	.word	0x0003bc40
   253d4:	0003bc65 	.word	0x0003bc65
   253d8:	0003bc7f 	.word	0x0003bc7f

000253dc <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   253dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253e0:	4b27      	ldr	r3, [pc, #156]	; (25480 <mem_manage_fault.isra.0+0xa4>)
   253e2:	4c28      	ldr	r4, [pc, #160]	; (25484 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   253e4:	4d28      	ldr	r5, [pc, #160]	; (25488 <mem_manage_fault.isra.0+0xac>)
   253e6:	1ae4      	subs	r4, r4, r3
   253e8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   253ea:	01a4      	lsls	r4, r4, #6
   253ec:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   253f0:	4607      	mov	r7, r0
   253f2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   253f4:	4825      	ldr	r0, [pc, #148]	; (2548c <mem_manage_fault.isra.0+0xb0>)
   253f6:	4641      	mov	r1, r8
   253f8:	f010 fe12 	bl	36020 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   253fc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   253fe:	06d1      	lsls	r1, r2, #27
   25400:	d503      	bpl.n	2540a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   25402:	4641      	mov	r1, r8
   25404:	4822      	ldr	r0, [pc, #136]	; (25490 <mem_manage_fault.isra.0+0xb4>)
   25406:	f010 fe0b 	bl	36020 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2540a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2540c:	071a      	lsls	r2, r3, #28
   2540e:	d504      	bpl.n	2541a <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   25410:	4820      	ldr	r0, [pc, #128]	; (25494 <mem_manage_fault.isra.0+0xb8>)
   25412:	f044 0101 	orr.w	r1, r4, #1
   25416:	f010 fe03 	bl	36020 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2541a:	4d1b      	ldr	r5, [pc, #108]	; (25488 <mem_manage_fault.isra.0+0xac>)
   2541c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2541e:	079b      	lsls	r3, r3, #30
   25420:	d512      	bpl.n	25448 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   25422:	f044 0801 	orr.w	r8, r4, #1
   25426:	4641      	mov	r1, r8
   25428:	481b      	ldr	r0, [pc, #108]	; (25498 <mem_manage_fault.isra.0+0xbc>)
   2542a:	f010 fdf9 	bl	36020 <log_0>
		mmfar = SCB->MMFAR;
   2542e:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   25430:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25432:	0618      	lsls	r0, r3, #24
   25434:	d508      	bpl.n	25448 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   25436:	4642      	mov	r2, r8
   25438:	4818      	ldr	r0, [pc, #96]	; (2549c <mem_manage_fault.isra.0+0xc0>)
   2543a:	f010 fe00 	bl	3603e <log_1>
			if (from_hard_fault) {
   2543e:	b11f      	cbz	r7, 25448 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   25440:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   25446:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   25448:	4d0f      	ldr	r5, [pc, #60]	; (25488 <mem_manage_fault.isra.0+0xac>)
   2544a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2544c:	07d2      	lsls	r2, r2, #31
   2544e:	d504      	bpl.n	2545a <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   25450:	4813      	ldr	r0, [pc, #76]	; (254a0 <mem_manage_fault.isra.0+0xc4>)
   25452:	f044 0101 	orr.w	r1, r4, #1
   25456:	f010 fde3 	bl	36020 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2545a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2545c:	069b      	lsls	r3, r3, #26
   2545e:	d504      	bpl.n	2546a <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   25460:	4810      	ldr	r0, [pc, #64]	; (254a4 <mem_manage_fault.isra.0+0xc8>)
   25462:	f044 0101 	orr.w	r1, r4, #1
   25466:	f010 fddb 	bl	36020 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   2546a:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   2546c:	4b06      	ldr	r3, [pc, #24]	; (25488 <mem_manage_fault.isra.0+0xac>)
   2546e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   25470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   25472:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   25476:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   25478:	7030      	strb	r0, [r6, #0]
}
   2547a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2547e:	bf00      	nop
   25480:	00039a50 	.word	0x00039a50
   25484:	00039b00 	.word	0x00039b00
   25488:	e000ed00 	.word	0xe000ed00
   2548c:	0003bcaa 	.word	0x0003bcaa
   25490:	0003bcc0 	.word	0x0003bcc0
   25494:	0003bcf3 	.word	0x0003bcf3
   25498:	0003bd06 	.word	0x0003bd06
   2549c:	0003bd1e 	.word	0x0003bd1e
   254a0:	0003bd34 	.word	0x0003bd34
   254a4:	0003bd53 	.word	0x0003bd53

000254a8 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   254a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   254ac:	4b2a      	ldr	r3, [pc, #168]	; (25558 <bus_fault.isra.0+0xb0>)
   254ae:	4c2b      	ldr	r4, [pc, #172]	; (2555c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   254b0:	4d2b      	ldr	r5, [pc, #172]	; (25560 <bus_fault.isra.0+0xb8>)
   254b2:	1ae4      	subs	r4, r4, r3
   254b4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   254b6:	01a4      	lsls	r4, r4, #6
   254b8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   254bc:	4607      	mov	r7, r0
   254be:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   254c0:	4828      	ldr	r0, [pc, #160]	; (25564 <bus_fault.isra.0+0xbc>)
   254c2:	4641      	mov	r1, r8
   254c4:	f010 fdac 	bl	36020 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   254c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   254ca:	04d1      	lsls	r1, r2, #19
   254cc:	d503      	bpl.n	254d6 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   254ce:	4641      	mov	r1, r8
   254d0:	4825      	ldr	r0, [pc, #148]	; (25568 <bus_fault.isra.0+0xc0>)
   254d2:	f010 fda5 	bl	36020 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   254d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   254d8:	051a      	lsls	r2, r3, #20
   254da:	d504      	bpl.n	254e6 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   254dc:	4823      	ldr	r0, [pc, #140]	; (2556c <bus_fault.isra.0+0xc4>)
   254de:	f044 0101 	orr.w	r1, r4, #1
   254e2:	f010 fd9d 	bl	36020 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   254e6:	4d1e      	ldr	r5, [pc, #120]	; (25560 <bus_fault.isra.0+0xb8>)
   254e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   254ea:	059b      	lsls	r3, r3, #22
   254ec:	d512      	bpl.n	25514 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   254ee:	f044 0801 	orr.w	r8, r4, #1
   254f2:	4641      	mov	r1, r8
   254f4:	481e      	ldr	r0, [pc, #120]	; (25570 <bus_fault.isra.0+0xc8>)
   254f6:	f010 fd93 	bl	36020 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   254fa:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   254fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   254fe:	0418      	lsls	r0, r3, #16
   25500:	d508      	bpl.n	25514 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   25502:	4642      	mov	r2, r8
   25504:	481b      	ldr	r0, [pc, #108]	; (25574 <bus_fault.isra.0+0xcc>)
   25506:	f010 fd9a 	bl	3603e <log_1>
			if (from_hard_fault) {
   2550a:	b11f      	cbz	r7, 25514 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2550c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2550e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   25512:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   25514:	4d12      	ldr	r5, [pc, #72]	; (25560 <bus_fault.isra.0+0xb8>)
   25516:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25518:	0559      	lsls	r1, r3, #21
   2551a:	d504      	bpl.n	25526 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   2551c:	4816      	ldr	r0, [pc, #88]	; (25578 <bus_fault.isra.0+0xd0>)
   2551e:	f044 0101 	orr.w	r1, r4, #1
   25522:	f010 fd7d 	bl	36020 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   25526:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25528:	05da      	lsls	r2, r3, #23
   2552a:	d50d      	bpl.n	25548 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   2552c:	4813      	ldr	r0, [pc, #76]	; (2557c <bus_fault.isra.0+0xd4>)
   2552e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   25532:	f010 fd75 	bl	36020 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   25536:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   25538:	4a09      	ldr	r2, [pc, #36]	; (25560 <bus_fault.isra.0+0xb8>)
   2553a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2553c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   25540:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   25542:	7030      	strb	r0, [r6, #0]
}
   25544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   25548:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2554a:	049b      	lsls	r3, r3, #18
   2554c:	d5f3      	bpl.n	25536 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   2554e:	480c      	ldr	r0, [pc, #48]	; (25580 <bus_fault.isra.0+0xd8>)
   25550:	f044 0101 	orr.w	r1, r4, #1
   25554:	e7ed      	b.n	25532 <bus_fault.isra.0+0x8a>
   25556:	bf00      	nop
   25558:	00039a50 	.word	0x00039a50
   2555c:	00039b00 	.word	0x00039b00
   25560:	e000ed00 	.word	0xe000ed00
   25564:	0003bd82 	.word	0x0003bd82
   25568:	0003bd98 	.word	0x0003bd98
   2556c:	0003bcf3 	.word	0x0003bcf3
   25570:	0003bda9 	.word	0x0003bda9
   25574:	0003bdc2 	.word	0x0003bdc2
   25578:	0003bdd7 	.word	0x0003bdd7
   2557c:	0003bdf2 	.word	0x0003bdf2
   25580:	0003bd53 	.word	0x0003bd53

00025584 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   25584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   25588:	4b5a      	ldr	r3, [pc, #360]	; (256f4 <z_arm_fault+0x170>)
{
   2558a:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2558c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   25590:	460f      	mov	r7, r1
   25592:	4614      	mov	r4, r2
   25594:	2500      	movs	r5, #0
   25596:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   25598:	f3c8 0608 	ubfx	r6, r8, #0, #9
   2559c:	f385 8811 	msr	BASEPRI, r5
   255a0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   255a4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   255a8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   255ac:	d123      	bne.n	255f6 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   255ae:	07d0      	lsls	r0, r2, #31
   255b0:	d421      	bmi.n	255f6 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   255b2:	0651      	lsls	r1, r2, #25
   255b4:	d403      	bmi.n	255be <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   255b6:	0722      	lsls	r2, r4, #28
   255b8:	d40e      	bmi.n	255d8 <z_arm_fault+0x54>
			*nested_exc = true;
   255ba:	2501      	movs	r5, #1
   255bc:	e00e      	b.n	255dc <z_arm_fault+0x58>
   255be:	494e      	ldr	r1, [pc, #312]	; (256f8 <z_arm_fault+0x174>)
   255c0:	4b4e      	ldr	r3, [pc, #312]	; (256fc <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   255c2:	484f      	ldr	r0, [pc, #316]	; (25700 <z_arm_fault+0x17c>)
   255c4:	1a5b      	subs	r3, r3, r1
   255c6:	08db      	lsrs	r3, r3, #3
   255c8:	019b      	lsls	r3, r3, #6
   255ca:	f043 0101 	orr.w	r1, r3, #1
   255ce:	f010 fd27 	bl	36020 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   255d2:	f014 0504 	ands.w	r5, r4, #4
   255d6:	d001      	beq.n	255dc <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   255d8:	46b9      	mov	r9, r7
	*nested_exc = false;
   255da:	2500      	movs	r5, #0
	*recoverable = false;
   255dc:	2300      	movs	r3, #0
   255de:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   255e2:	1ef3      	subs	r3, r6, #3
   255e4:	2b09      	cmp	r3, #9
   255e6:	d86c      	bhi.n	256c2 <z_arm_fault+0x13e>
   255e8:	e8df f003 	tbb	[pc, r3]
   255ec:	3e5e5a07 	.word	0x3e5e5a07
   255f0:	6b6b6b6b 	.word	0x6b6b6b6b
   255f4:	626b      	.short	0x626b
		return NULL;
   255f6:	46a9      	mov	r9, r5
   255f8:	e7f0      	b.n	255dc <z_arm_fault+0x58>
	*recoverable = false;
   255fa:	f04f 0800 	mov.w	r8, #0
   255fe:	4b3e      	ldr	r3, [pc, #248]	; (256f8 <z_arm_fault+0x174>)
   25600:	4e3e      	ldr	r6, [pc, #248]	; (256fc <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   25602:	4840      	ldr	r0, [pc, #256]	; (25704 <z_arm_fault+0x180>)
   25604:	1af6      	subs	r6, r6, r3
   25606:	08f6      	lsrs	r6, r6, #3
   25608:	01b6      	lsls	r6, r6, #6
   2560a:	f046 0601 	orr.w	r6, r6, #1
   2560e:	4631      	mov	r1, r6
   25610:	f010 fd06 	bl	36020 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   25614:	4b37      	ldr	r3, [pc, #220]	; (256f4 <z_arm_fault+0x170>)
	*recoverable = false;
   25616:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2561a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2561c:	f014 0402 	ands.w	r4, r4, #2
   25620:	d005      	beq.n	2562e <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   25622:	4631      	mov	r1, r6
   25624:	4838      	ldr	r0, [pc, #224]	; (25708 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   25626:	f010 fcfb 	bl	36020 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2562a:	2400      	movs	r4, #0
}
   2562c:	e01f      	b.n	2566e <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25630:	005b      	lsls	r3, r3, #1
   25632:	d51c      	bpl.n	2566e <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   25634:	4631      	mov	r1, r6
   25636:	4835      	ldr	r0, [pc, #212]	; (2570c <z_arm_fault+0x188>)
   25638:	f010 fcf2 	bl	36020 <log_0>
		if (SCB_MMFSR != 0) {
   2563c:	4b34      	ldr	r3, [pc, #208]	; (25710 <z_arm_fault+0x18c>)
   2563e:	781b      	ldrb	r3, [r3, #0]
   25640:	b12b      	cbz	r3, 2564e <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   25642:	2001      	movs	r0, #1
   25644:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   25648:	f7ff fec8 	bl	253dc <mem_manage_fault.isra.0>
   2564c:	e00e      	b.n	2566c <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   2564e:	4b31      	ldr	r3, [pc, #196]	; (25714 <z_arm_fault+0x190>)
   25650:	781b      	ldrb	r3, [r3, #0]
   25652:	b12b      	cbz	r3, 25660 <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   25654:	2001      	movs	r0, #1
   25656:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   2565a:	f7ff ff25 	bl	254a8 <bus_fault.isra.0>
   2565e:	e005      	b.n	2566c <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   25660:	4b2d      	ldr	r3, [pc, #180]	; (25718 <z_arm_fault+0x194>)
   25662:	881b      	ldrh	r3, [r3, #0]
   25664:	b29b      	uxth	r3, r3
   25666:	b113      	cbz	r3, 2566e <z_arm_fault+0xea>
			reason = usage_fault(esf);
   25668:	f7ff fe50 	bl	2530c <usage_fault.isra.0>
   2566c:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2566e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25672:	b993      	cbnz	r3, 2569a <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   25674:	2268      	movs	r2, #104	; 0x68
   25676:	4649      	mov	r1, r9
   25678:	a802      	add	r0, sp, #8
   2567a:	f013 fa60 	bl	38b3e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2567e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25680:	b39d      	cbz	r5, 256ea <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   25682:	f3c3 0208 	ubfx	r2, r3, #0, #9
   25686:	b922      	cbnz	r2, 25692 <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   25688:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2568c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   25690:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   25692:	4620      	mov	r0, r4
   25694:	a902      	add	r1, sp, #8
   25696:	f7ff fd39 	bl	2510c <z_arm_fatal_error>
}
   2569a:	b01d      	add	sp, #116	; 0x74
   2569c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   256a0:	2000      	movs	r0, #0
   256a2:	f10d 0107 	add.w	r1, sp, #7
   256a6:	e7cf      	b.n	25648 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   256a8:	2000      	movs	r0, #0
   256aa:	f10d 0107 	add.w	r1, sp, #7
   256ae:	e7d4      	b.n	2565a <z_arm_fault+0xd6>
   256b0:	4912      	ldr	r1, [pc, #72]	; (256fc <z_arm_fault+0x178>)
   256b2:	4b11      	ldr	r3, [pc, #68]	; (256f8 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
   256b4:	4819      	ldr	r0, [pc, #100]	; (2571c <z_arm_fault+0x198>)
   256b6:	1ac9      	subs	r1, r1, r3
   256b8:	08c9      	lsrs	r1, r1, #3
   256ba:	0189      	lsls	r1, r1, #6
   256bc:	f041 0101 	orr.w	r1, r1, #1
   256c0:	e7b1      	b.n	25626 <z_arm_fault+0xa2>
   256c2:	4a0d      	ldr	r2, [pc, #52]	; (256f8 <z_arm_fault+0x174>)
   256c4:	4b0d      	ldr	r3, [pc, #52]	; (256fc <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
   256c6:	4816      	ldr	r0, [pc, #88]	; (25720 <z_arm_fault+0x19c>)
   256c8:	1a9b      	subs	r3, r3, r2
   256ca:	08db      	lsrs	r3, r3, #3
   256cc:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   256d0:	ea4f 1383 	mov.w	r3, r3, lsl #6
   256d4:	4913      	ldr	r1, [pc, #76]	; (25724 <z_arm_fault+0x1a0>)
   256d6:	f043 0301 	orr.w	r3, r3, #1
   256da:	bf18      	it	ne
   256dc:	4601      	movne	r1, r0
   256de:	f1a6 0210 	sub.w	r2, r6, #16
   256e2:	4811      	ldr	r0, [pc, #68]	; (25728 <z_arm_fault+0x1a4>)
   256e4:	f010 fcc2 	bl	3606c <log_2>
   256e8:	e79f      	b.n	2562a <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   256ea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   256ee:	f023 0301 	bic.w	r3, r3, #1
   256f2:	e7cd      	b.n	25690 <z_arm_fault+0x10c>
   256f4:	e000ed00 	.word	0xe000ed00
   256f8:	00039a50 	.word	0x00039a50
   256fc:	00039b00 	.word	0x00039b00
   25700:	0003be0a 	.word	0x0003be0a
   25704:	0003be2d 	.word	0x0003be2d
   25708:	0003be44 	.word	0x0003be44
   2570c:	0003be65 	.word	0x0003be65
   25710:	e000ed28 	.word	0xe000ed28
   25714:	e000ed29 	.word	0xe000ed29
   25718:	e000ed2a 	.word	0xe000ed2a
   2571c:	0003be84 	.word	0x0003be84
   25720:	0003becf 	.word	0x0003becf
   25724:	0003beba 	.word	0x0003beba
   25728:	0003bee8 	.word	0x0003bee8

0002572c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2572c:	4b04      	ldr	r3, [pc, #16]	; (25740 <z_arm_fault_init+0x14>)
   2572e:	695a      	ldr	r2, [r3, #20]
   25730:	f042 0210 	orr.w	r2, r2, #16
   25734:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   25736:	695a      	ldr	r2, [r3, #20]
   25738:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   2573c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2573e:	4770      	bx	lr
   25740:	e000ed00 	.word	0xe000ed00

00025744 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   25744:	4b07      	ldr	r3, [pc, #28]	; (25764 <_EXIT_EXC+0xe>)

	ldr r1, [r3, #_kernel_offset_to_current]
   25746:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   25748:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   2574a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2574c:	d003      	beq.n	25756 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2574e:	4906      	ldr	r1, [pc, #24]	; (25768 <_EXIT_EXC+0x12>)
	ldr r2, =_SCS_ICSR_PENDSV
   25750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   25754:	600a      	str	r2, [r1, #0]

00025756 <_EXIT_EXC>:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
	push {r0, lr}
   25756:	b501      	push	{r0, lr}
	bl z_check_stack_sentinel
   25758:	f00e fc0a 	bl	33f70 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r1}
	mov lr, r1
#else
	pop {r0, lr}
   2575c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   25760:	4770      	bx	lr
   25762:	0000      	.short	0x0000
	ldr r3, =_kernel
   25764:	20023ef8 	.word	0x20023ef8
	ldr r1, =_SCS_ICSR
   25768:	e000ed04 	.word	0xe000ed04

0002576c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   2576c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   25770:	4905      	ldr	r1, [pc, #20]	; (25788 <sys_arch_reboot+0x1c>)
   25772:	4b06      	ldr	r3, [pc, #24]	; (2578c <sys_arch_reboot+0x20>)
   25774:	68ca      	ldr	r2, [r1, #12]
   25776:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2577a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2577c:	60cb      	str	r3, [r1, #12]
   2577e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   25782:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   25784:	e7fd      	b.n	25782 <sys_arch_reboot+0x16>
   25786:	bf00      	nop
   25788:	e000ed00 	.word	0xe000ed00
   2578c:	05fa0004 	.word	0x05fa0004

00025790 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   25790:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   25792:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   25794:	4a05      	ldr	r2, [pc, #20]	; (257ac <z_arm_clear_arm_mpu_config+0x1c>)
   25796:	6811      	ldr	r1, [r2, #0]
	int num_regions =
   25798:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
   2579c:	428b      	cmp	r3, r1
   2579e:	d100      	bne.n	257a2 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   257a0:	4770      	bx	lr
  mpu->RNR = rnr;
   257a2:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   257a4:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   257a6:	3301      	adds	r3, #1
   257a8:	e7f8      	b.n	2579c <z_arm_clear_arm_mpu_config+0xc>
   257aa:	bf00      	nop
   257ac:	e000ed90 	.word	0xe000ed90

000257b0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   257b0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   257b2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   257b4:	2400      	movs	r4, #0
   257b6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   257ba:	f7ff ffe9 	bl	25790 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   257be:	4a0e      	ldr	r2, [pc, #56]	; (257f8 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
   257c0:	4623      	mov	r3, r4
   257c2:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
   257c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   257c8:	f103 0020 	add.w	r0, r3, #32
   257cc:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   257ce:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   257d0:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   257d4:	d1f8      	bne.n	257c8 <z_arm_init_arch_hw_at_boot+0x18>
   257d6:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   257d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   257dc:	f103 0260 	add.w	r2, r3, #96	; 0x60
   257e0:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   257e2:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   257e4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   257e8:	d1f8      	bne.n	257dc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   257ea:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   257ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   257f0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   257f4:	bd10      	pop	{r4, pc}
   257f6:	bf00      	nop
   257f8:	e000e100 	.word	0xe000e100

000257fc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   257fc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   257fe:	2120      	movs	r1, #32
   25800:	4803      	ldr	r0, [pc, #12]	; (25810 <z_arm_interrupt_init+0x14>)
   25802:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   25804:	3301      	adds	r3, #1
   25806:	2b41      	cmp	r3, #65	; 0x41
   25808:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2580c:	d1f9      	bne.n	25802 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2580e:	4770      	bx	lr
   25810:	e000e100 	.word	0xe000e100

00025814 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   25814:	b508      	push	{r3, lr}
	if (_current == thread) {
   25816:	4b0e      	ldr	r3, [pc, #56]	; (25850 <z_impl_k_thread_abort+0x3c>)
   25818:	689b      	ldr	r3, [r3, #8]
   2581a:	4283      	cmp	r3, r0
   2581c:	d107      	bne.n	2582e <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2581e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   25822:	b193      	cbz	r3, 2584a <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   25824:	4a0b      	ldr	r2, [pc, #44]	; (25854 <z_impl_k_thread_abort+0x40>)
   25826:	6853      	ldr	r3, [r2, #4]
   25828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2582c:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   2582e:	f00e f96f 	bl	33b10 <z_thread_single_abort>
	__asm__ volatile(
   25832:	f04f 0320 	mov.w	r3, #32
   25836:	f3ef 8011 	mrs	r0, BASEPRI
   2583a:	f383 8811 	msr	BASEPRI, r3
   2583e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   25842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   25846:	f012 bde3 	b.w	38410 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   2584a:	f00e fc63 	bl	34114 <z_self_abort>
   2584e:	bf00      	nop
   25850:	20023ef8 	.word	0x20023ef8
   25854:	e000ed00 	.word	0xe000ed00

00025858 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   25858:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   2585a:	4b0e      	ldr	r3, [pc, #56]	; (25894 <z_arm_configure_static_mpu_regions+0x3c>)
{
   2585c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   2585e:	9302      	str	r3, [sp, #8]
   25860:	4b0d      	ldr	r3, [pc, #52]	; (25898 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   25862:	4c0e      	ldr	r4, [pc, #56]	; (2589c <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   25864:	9303      	str	r3, [sp, #12]
   25866:	4b0e      	ldr	r3, [pc, #56]	; (258a0 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   25868:	4a0e      	ldr	r2, [pc, #56]	; (258a4 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   2586a:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   2586c:	ab02      	add	r3, sp, #8
   2586e:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   25870:	a801      	add	r0, sp, #4
   25872:	4623      	mov	r3, r4
   25874:	2101      	movs	r1, #1
   25876:	f000 f937 	bl	25ae8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   2587a:	2300      	movs	r3, #0
   2587c:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   2587e:	4b0a      	ldr	r3, [pc, #40]	; (258a8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   25880:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   25882:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   25884:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   25886:	9305      	str	r3, [sp, #20]
   25888:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2588a:	f000 f937 	bl	25afc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   2588e:	b008      	add	sp, #32
   25890:	bd10      	pop	{r4, pc}
   25892:	bf00      	nop
   25894:	20020000 	.word	0x20020000
   25898:	00000000 	.word	0x00000000
   2589c:	20040000 	.word	0x20040000
   258a0:	00010006 	.word	0x00010006
   258a4:	20020000 	.word	0x20020000
   258a8:	200208a0 	.word	0x200208a0

000258ac <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   258ac:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   258ae:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   258b0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   258b2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   258b6:	f004 031f 	and.w	r3, r4, #31
   258ba:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   258bc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   258be:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   258c0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   258c4:	4904      	ldr	r1, [pc, #16]	; (258d8 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   258c6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   258ca:	f043 0301 	orr.w	r3, r3, #1
   258ce:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   258d0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   258d2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   258d4:	bd10      	pop	{r4, pc}
   258d6:	bf00      	nop
   258d8:	e000ed90 	.word	0xe000ed90

000258dc <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   258dc:	280f      	cmp	r0, #15
{
   258de:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   258e0:	d90d      	bls.n	258fe <region_allocate_and_init+0x22>
   258e2:	4b08      	ldr	r3, [pc, #32]	; (25904 <region_allocate_and_init+0x28>)
   258e4:	4a08      	ldr	r2, [pc, #32]	; (25908 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   258e6:	4601      	mov	r1, r0
   258e8:	1ad2      	subs	r2, r2, r3
   258ea:	08d2      	lsrs	r2, r2, #3
   258ec:	0192      	lsls	r2, r2, #6
   258ee:	4807      	ldr	r0, [pc, #28]	; (2590c <region_allocate_and_init+0x30>)
   258f0:	f042 0201 	orr.w	r2, r2, #1
   258f4:	f010 fba3 	bl	3603e <log_1>
		return -EINVAL;
   258f8:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   258fc:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   258fe:	f7ff ffd5 	bl	258ac <region_init>
	return index;
   25902:	e7fb      	b.n	258fc <region_allocate_and_init+0x20>
   25904:	00039a50 	.word	0x00039a50
   25908:	00039af0 	.word	0x00039af0
   2590c:	0003beff 	.word	0x0003beff

00025910 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   25910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25914:	4680      	mov	r8, r0
   25916:	4689      	mov	r9, r1
   25918:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2591a:	2700      	movs	r7, #0
	MPU->RNR = index;
   2591c:	4d51      	ldr	r5, [pc, #324]	; (25a64 <mpu_configure_regions_and_partition.constprop.0+0x154>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   2591e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   25920:	454f      	cmp	r7, r9
   25922:	da35      	bge.n	25990 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   25924:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   25928:	f8d3 a004 	ldr.w	sl, [r3, #4]
   2592c:	f1ba 0f00 	cmp.w	sl, #0
   25930:	d04e      	beq.n	259d0 <mpu_configure_regions_and_partition.constprop.0+0xc0>
		&&
   25932:	f1ba 0f1f 	cmp.w	sl, #31
   25936:	d91e      	bls.n	25976 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   25938:	f01a 0f1f 	tst.w	sl, #31
   2593c:	d11b      	bne.n	25976 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   2593e:	f8d3 b000 	ldr.w	fp, [r3]
		&&
   25942:	f01b 0f1f 	tst.w	fp, #31
   25946:	d116      	bne.n	25976 <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   25948:	4658      	mov	r0, fp
   2594a:	f011 fa63 	bl	36e14 <arm_cmse_mpu_region_get>
   2594e:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   25950:	eb0a 000b 	add.w	r0, sl, fp
   25954:	3801      	subs	r0, #1
   25956:	f011 fa5d 	bl	36e14 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   2595a:	4286      	cmp	r6, r0
   2595c:	d01c      	beq.n	25998 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   2595e:	f06f 0615 	mvn.w	r6, #21
   25962:	4a41      	ldr	r2, [pc, #260]	; (25a68 <mpu_configure_regions_and_partition.constprop.0+0x158>)
   25964:	4b41      	ldr	r3, [pc, #260]	; (25a6c <mpu_configure_regions_and_partition.constprop.0+0x15c>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   25966:	4631      	mov	r1, r6
   25968:	1ad2      	subs	r2, r2, r3
   2596a:	08d2      	lsrs	r2, r2, #3
   2596c:	0192      	lsls	r2, r2, #6
   2596e:	4840      	ldr	r0, [pc, #256]	; (25a70 <mpu_configure_regions_and_partition.constprop.0+0x160>)
   25970:	f042 0201 	orr.w	r2, r2, #1
   25974:	e008      	b.n	25988 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   25976:	4639      	mov	r1, r7
   25978:	4a3b      	ldr	r2, [pc, #236]	; (25a68 <mpu_configure_regions_and_partition.constprop.0+0x158>)
   2597a:	4b3c      	ldr	r3, [pc, #240]	; (25a6c <mpu_configure_regions_and_partition.constprop.0+0x15c>)
   2597c:	483d      	ldr	r0, [pc, #244]	; (25a74 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   2597e:	1ad2      	subs	r2, r2, r3
   25980:	08d2      	lsrs	r2, r2, #3
   25982:	0192      	lsls	r2, r2, #6
   25984:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   25988:	f010 fb59 	bl	3603e <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   2598c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   25990:	4620      	mov	r0, r4
   25992:	b005      	add	sp, #20
   25994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   25998:	f116 0f16 	cmn.w	r6, #22
   2599c:	d0e1      	beq.n	25962 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   2599e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   259a0:	42b3      	cmp	r3, r6
   259a2:	dbde      	blt.n	25962 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   259a4:	60ae      	str	r6, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   259a6:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   259a8:	60ae      	str	r6, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   259aa:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   259ac:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   259b0:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   259b4:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   259b8:	e9d1 3200 	ldrd	r3, r2, [r1]
   259bc:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   259be:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   259c0:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   259c4:	d116      	bne.n	259f4 <mpu_configure_regions_and_partition.constprop.0+0xe4>
   259c6:	45d3      	cmp	fp, sl
   259c8:	d104      	bne.n	259d4 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, regions[i]);
   259ca:	b2f0      	uxtb	r0, r6
   259cc:	f011 fa09 	bl	36de2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   259d0:	3701      	adds	r7, #1
   259d2:	e7a5      	b.n	25920 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   259d4:	60ae      	str	r6, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   259d6:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   259d8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   259dc:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   259e0:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   259e2:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   259e4:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   259e6:	f011 f9fc 	bl	36de2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   259ea:	f110 0f16 	cmn.w	r0, #22
   259ee:	d0cd      	beq.n	2598c <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   259f0:	1c44      	adds	r4, r0, #1
   259f2:	e7ed      	b.n	259d0 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RNR = index;
   259f4:	60ae      	str	r6, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   259f6:	692a      	ldr	r2, [r5, #16]
   259f8:	3b01      	subs	r3, #1
   259fa:	f023 031f 	bic.w	r3, r3, #31
   259fe:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   25a02:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   25a04:	45d3      	cmp	fp, sl
   25a06:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   25a08:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   25a0a:	d0ec      	beq.n	259e6 <mpu_configure_regions_and_partition.constprop.0+0xd6>
				mpu_configure_region(reg_index, regions[i]);
   25a0c:	f011 f9e9 	bl	36de2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   25a10:	f110 0f16 	cmn.w	r0, #22
   25a14:	d0ba      	beq.n	2598c <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   25a16:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   25a18:	68ea      	ldr	r2, [r5, #12]
   25a1a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   25a1e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   25a22:	f362 0304 	bfi	r3, r2, #0, #5
   25a26:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   25a2a:	692b      	ldr	r3, [r5, #16]
   25a2c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   25a30:	085b      	lsrs	r3, r3, #1
   25a32:	f363 1247 	bfi	r2, r3, #5, #3
   25a36:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   25a3a:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   25a3e:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   25a40:	e9d2 3200 	ldrd	r3, r2, [r2]
   25a44:	4413      	add	r3, r2
   25a46:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   25a48:	f023 031f 	bic.w	r3, r3, #31
   25a4c:	445b      	add	r3, fp
   25a4e:	eba3 030a 	sub.w	r3, r3, sl
   25a52:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   25a56:	4669      	mov	r1, sp
   25a58:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   25a5a:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   25a5c:	f7ff ff3e 	bl	258dc <region_allocate_and_init>
   25a60:	e7c3      	b.n	259ea <mpu_configure_regions_and_partition.constprop.0+0xda>
   25a62:	bf00      	nop
   25a64:	e000ed90 	.word	0xe000ed90
   25a68:	00039af0 	.word	0x00039af0
   25a6c:	00039a50 	.word	0x00039a50
   25a70:	0003bf48 	.word	0x0003bf48
   25a74:	0003bf25 	.word	0x0003bf25

00025a78 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   25a78:	2205      	movs	r2, #5
   25a7a:	4b03      	ldr	r3, [pc, #12]	; (25a88 <arm_core_mpu_enable+0x10>)
   25a7c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   25a7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   25a82:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   25a86:	4770      	bx	lr
   25a88:	e000ed90 	.word	0xe000ed90

00025a8c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   25a8c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   25a90:	2200      	movs	r2, #0
   25a92:	4b01      	ldr	r3, [pc, #4]	; (25a98 <arm_core_mpu_disable+0xc>)
   25a94:	605a      	str	r2, [r3, #4]
}
   25a96:	4770      	bx	lr
   25a98:	e000ed90 	.word	0xe000ed90

00025a9c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   25a9c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   25a9e:	4c0e      	ldr	r4, [pc, #56]	; (25ad8 <arm_mpu_init+0x3c>)
   25aa0:	6825      	ldr	r5, [r4, #0]
   25aa2:	2d10      	cmp	r5, #16
   25aa4:	d814      	bhi.n	25ad0 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   25aa6:	f7ff fff1 	bl	25a8c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   25aaa:	2000      	movs	r0, #0
	MPU->MAIR0 =
   25aac:	4b0b      	ldr	r3, [pc, #44]	; (25adc <arm_mpu_init+0x40>)
   25aae:	4a0c      	ldr	r2, [pc, #48]	; (25ae0 <arm_mpu_init+0x44>)
   25ab0:	631a      	str	r2, [r3, #48]	; 0x30
   25ab2:	4285      	cmp	r5, r0
   25ab4:	d105      	bne.n	25ac2 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   25ab6:	4b0b      	ldr	r3, [pc, #44]	; (25ae4 <arm_mpu_init+0x48>)
   25ab8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   25aba:	f7ff ffdd 	bl	25a78 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   25abe:	2000      	movs	r0, #0
}
   25ac0:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   25ac2:	6861      	ldr	r1, [r4, #4]
   25ac4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   25ac8:	f7ff fef0 	bl	258ac <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   25acc:	3001      	adds	r0, #1
   25ace:	e7f0      	b.n	25ab2 <arm_mpu_init+0x16>
		return -1;
   25ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25ad4:	e7f4      	b.n	25ac0 <arm_mpu_init+0x24>
   25ad6:	bf00      	nop
   25ad8:	00039eac 	.word	0x00039eac
   25adc:	e000ed90 	.word	0xe000ed90
   25ae0:	0044ffaa 	.word	0x0044ffaa
   25ae4:	2002bbc3 	.word	0x2002bbc3

00025ae8 <arm_core_mpu_configure_static_mpu_regions>:
{
   25ae8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   25aea:	4c03      	ldr	r4, [pc, #12]	; (25af8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   25aec:	7822      	ldrb	r2, [r4, #0]
   25aee:	f7ff ff0f 	bl	25910 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   25af2:	7020      	strb	r0, [r4, #0]
}
   25af4:	bd10      	pop	{r4, pc}
   25af6:	bf00      	nop
   25af8:	2002bbc3 	.word	0x2002bbc3

00025afc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   25afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b00:	4d26      	ldr	r5, [pc, #152]	; (25b9c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   25b02:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   25b04:	4606      	mov	r6, r0
   25b06:	f04f 0800 	mov.w	r8, #0
   25b0a:	46ab      	mov	fp, r5
	MPU->RNR = index;
   25b0c:	4f24      	ldr	r7, [pc, #144]	; (25ba0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   25b0e:	45d0      	cmp	r8, sl
   25b10:	da1b      	bge.n	25b4a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   25b12:	f8d6 9004 	ldr.w	r9, [r6, #4]
   25b16:	f1b9 0f00 	cmp.w	r9, #0
   25b1a:	d039      	beq.n	25b90 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   25b1c:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   25b1e:	4608      	mov	r0, r1
   25b20:	9101      	str	r1, [sp, #4]
   25b22:	f011 f977 	bl	36e14 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   25b26:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   25b28:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   25b2a:	eb09 0001 	add.w	r0, r9, r1
   25b2e:	3801      	subs	r0, #1
   25b30:	f011 f970 	bl	36e14 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   25b34:	4284      	cmp	r4, r0
   25b36:	f04f 0214 	mov.w	r2, #20
   25b3a:	4b1a      	ldr	r3, [pc, #104]	; (25ba4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   25b3c:	d008      	beq.n	25b50 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   25b3e:	f06f 0315 	mvn.w	r3, #21
   25b42:	fb02 f808 	mul.w	r8, r2, r8
   25b46:	f84b 3008 	str.w	r3, [fp, r8]
}
   25b4a:	b003      	add	sp, #12
   25b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   25b50:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   25b54:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   25b56:	d0f8      	beq.n	25b4a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   25b58:	7819      	ldrb	r1, [r3, #0]
   25b5a:	42a1      	cmp	r1, r4
   25b5c:	ddf5      	ble.n	25b4a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   25b5e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   25b62:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   25b64:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   25b66:	68fc      	ldr	r4, [r7, #12]
   25b68:	f100 0108 	add.w	r1, r0, #8
   25b6c:	7b00      	ldrb	r0, [r0, #12]
   25b6e:	f364 0004 	bfi	r0, r4, #0, #5
   25b72:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   25b74:	6938      	ldr	r0, [r7, #16]
   25b76:	790c      	ldrb	r4, [r1, #4]
   25b78:	0840      	lsrs	r0, r0, #1
   25b7a:	f360 1447 	bfi	r4, r0, #5, #3
   25b7e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   25b80:	68f9      	ldr	r1, [r7, #12]
   25b82:	f021 011f 	bic.w	r1, r1, #31
   25b86:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   25b88:	6939      	ldr	r1, [r7, #16]
   25b8a:	f021 011f 	bic.w	r1, r1, #31
   25b8e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   25b90:	f108 0801 	add.w	r8, r8, #1
   25b94:	3514      	adds	r5, #20
   25b96:	360c      	adds	r6, #12
   25b98:	e7b9      	b.n	25b0e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   25b9a:	bf00      	nop
   25b9c:	200235a4 	.word	0x200235a4
   25ba0:	e000ed90 	.word	0xe000ed90
   25ba4:	2002bbc3 	.word	0x2002bbc3

00025ba8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   25ba8:	4b01      	ldr	r3, [pc, #4]	; (25bb0 <__stdout_hook_install+0x8>)
   25baa:	6018      	str	r0, [r3, #0]
}
   25bac:	4770      	bx	lr
   25bae:	bf00      	nop
   25bb0:	2002019c 	.word	0x2002019c

00025bb4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   25bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25bb6:	460d      	mov	r5, r1
   25bb8:	4f09      	ldr	r7, [pc, #36]	; (25be0 <z_impl_zephyr_write_stdout+0x2c>)
   25bba:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   25bbc:	f1c0 0401 	rsb	r4, r0, #1
   25bc0:	19a3      	adds	r3, r4, r6
   25bc2:	429d      	cmp	r5, r3
   25bc4:	dc01      	bgt.n	25bca <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   25bc6:	4628      	mov	r0, r5
   25bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   25bca:	7873      	ldrb	r3, [r6, #1]
   25bcc:	2b0a      	cmp	r3, #10
   25bce:	d102      	bne.n	25bd6 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   25bd0:	200d      	movs	r0, #13
   25bd2:	683b      	ldr	r3, [r7, #0]
   25bd4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   25bd6:	683b      	ldr	r3, [r7, #0]
   25bd8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   25bdc:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   25bde:	e7ef      	b.n	25bc0 <z_impl_zephyr_write_stdout+0xc>
   25be0:	2002019c 	.word	0x2002019c

00025be4 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   25be4:	b510      	push	{r4, lr}
   25be6:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   25be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25bf0:	480a      	ldr	r0, [pc, #40]	; (25c1c <_sbrk+0x38>)
   25bf2:	f00f fe6e 	bl	358d2 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   25bf6:	490a      	ldr	r1, [pc, #40]	; (25c20 <_sbrk+0x3c>)
   25bf8:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   25bfa:	18e0      	adds	r0, r4, r3
   25bfc:	4c09      	ldr	r4, [pc, #36]	; (25c24 <_sbrk+0x40>)
   25bfe:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   25c02:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   25c06:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   25c08:	bf2e      	itee	cs
   25c0a:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   25c0e:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   25c10:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   25c12:	4802      	ldr	r0, [pc, #8]	; (25c1c <_sbrk+0x38>)
   25c14:	f00f fe58 	bl	358c8 <sys_sem_give>

	return ret;
}
   25c18:	4620      	mov	r0, r4
   25c1a:	bd10      	pop	{r4, pc}
   25c1c:	20020834 	.word	0x20020834
   25c20:	200235b8 	.word	0x200235b8
   25c24:	20032b38 	.word	0x20032b38

00025c28 <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   25c28:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   25c2a:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   25c2c:	4804      	ldr	r0, [pc, #16]	; (25c40 <__chk_fail+0x18>)
   25c2e:	f7ff ffc1 	bl	25bb4 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   25c32:	4040      	eors	r0, r0
   25c34:	f380 8811 	msr	BASEPRI, r0
   25c38:	f04f 0003 	mov.w	r0, #3
   25c3c:	df02      	svc	2
	CODE_UNREACHABLE;
   25c3e:	bf00      	nop
   25c40:	0003bf6b 	.word	0x0003bf6b

00025c44 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   25c44:	b538      	push	{r3, r4, r5, lr}
   25c46:	4c08      	ldr	r4, [pc, #32]	; (25c68 <net_if_init+0x24>)

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   25c48:	4d08      	ldr	r5, [pc, #32]	; (25c6c <net_if_init+0x28>)
   25c4a:	42ac      	cmp	r4, r5
   25c4c:	4620      	mov	r0, r4
   25c4e:	d300      	bcc.n	25c52 <net_if_init+0xe>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   25c50:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   25c52:	6803      	ldr	r3, [r0, #0]
   25c54:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   25c56:	681b      	ldr	r3, [r3, #0]
   25c58:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   25c5a:	2b00      	cmp	r3, #0
   25c5c:	d0f5      	beq.n	25c4a <net_if_init+0x6>
   25c5e:	681b      	ldr	r3, [r3, #0]
   25c60:	2b00      	cmp	r3, #0
   25c62:	d0f2      	beq.n	25c4a <net_if_init+0x6>
	api->init(iface);
   25c64:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   25c66:	e7f0      	b.n	25c4a <net_if_init+0x6>
   25c68:	2002087c 	.word	0x2002087c
   25c6c:	20020880 	.word	0x20020880

00025c70 <net_if_post_init>:

void net_if_post_init(void)
{
   25c70:	b538      	push	{r3, r4, r5, lr}
   25c72:	4c08      	ldr	r4, [pc, #32]	; (25c94 <net_if_post_init+0x24>)
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   25c74:	4d08      	ldr	r5, [pc, #32]	; (25c98 <net_if_post_init+0x28>)
   25c76:	42ac      	cmp	r4, r5
   25c78:	4620      	mov	r0, r4
   25c7a:	d300      	bcc.n	25c7e <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   25c7c:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25c7e:	6803      	ldr	r3, [r0, #0]
   25c80:	3404      	adds	r4, #4
   25c82:	330c      	adds	r3, #12
   25c84:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   25c88:	071b      	lsls	r3, r3, #28
   25c8a:	d4f4      	bmi.n	25c76 <net_if_post_init+0x6>
			net_if_up(iface);
   25c8c:	f011 f8ea 	bl	36e64 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   25c90:	e7f1      	b.n	25c76 <net_if_post_init+0x6>
   25c92:	bf00      	nop
   25c94:	2002087c 	.word	0x2002087c
   25c98:	20020880 	.word	0x20020880

00025c9c <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   25c9c:	2300      	movs	r3, #0
{
   25c9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   25ca2:	2802      	cmp	r0, #2
{
   25ca4:	b089      	sub	sp, #36	; 0x24
   25ca6:	4607      	mov	r7, r0
   25ca8:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   25caa:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   25cae:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   25cb0:	d13e      	bne.n	25d30 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   25cb2:	a806      	add	r0, sp, #24
   25cb4:	9105      	str	r1, [sp, #20]
   25cb6:	4601      	mov	r1, r0
{
   25cb8:	461a      	mov	r2, r3
   25cba:	e006      	b.n	25cca <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   25cbc:	780c      	ldrb	r4, [r1, #0]
   25cbe:	3201      	adds	r2, #1
   25cc0:	3401      	adds	r4, #1
   25cc2:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   25cc4:	b2d4      	uxtb	r4, r2
   25cc6:	2c07      	cmp	r4, #7
   25cc8:	d804      	bhi.n	25cd4 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   25cca:	9c04      	ldr	r4, [sp, #16]
   25ccc:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   25cd0:	2c00      	cmp	r4, #0
   25cd2:	d0f3      	beq.n	25cbc <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   25cd4:	3301      	adds	r3, #1
   25cd6:	2b08      	cmp	r3, #8
   25cd8:	f101 0101 	add.w	r1, r1, #1
   25cdc:	d1ec      	bne.n	25cb8 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   25cde:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   25ce2:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   25ce6:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   25ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
   25cec:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   25cee:	bf88      	it	hi
   25cf0:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   25cf4:	f103 0301 	add.w	r3, r3, #1
   25cf8:	b2db      	uxtb	r3, r3
				pos = i;
   25cfa:	bf88      	it	hi
   25cfc:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   25cfe:	2b08      	cmp	r3, #8
   25d00:	d1f2      	bne.n	25ce8 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   25d02:	469b      	mov	fp, r3
   25d04:	f1b9 0f01 	cmp.w	r9, #1
   25d08:	f04f 033a 	mov.w	r3, #58	; 0x3a
   25d0c:	bf08      	it	eq
   25d0e:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
   25d12:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   25d14:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   25d16:	4634      	mov	r4, r6
   25d18:	460d      	mov	r5, r1
   25d1a:	455d      	cmp	r5, fp
   25d1c:	db17      	blt.n	25d4e <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   25d1e:	42b4      	cmp	r4, r6
   25d20:	d008      	beq.n	25d34 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   25d22:	2300      	movs	r3, #0
   25d24:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   25d26:	bf0c      	ite	eq
   25d28:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   25d2c:	7023      	strbne	r3, [r4, #0]
   25d2e:	e002      	b.n	25d36 <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   25d30:	2801      	cmp	r0, #1
   25d32:	d004      	beq.n	25d3e <z_impl_net_addr_ntop+0xa2>
		return NULL;
   25d34:	2600      	movs	r6, #0
	}

	return dst;
}
   25d36:	4630      	mov	r0, r6
   25d38:	b009      	add	sp, #36	; 0x24
   25d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   25d3e:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   25d40:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   25d44:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   25d48:	4681      	mov	r9, r0
		delim = '.';
   25d4a:	9303      	str	r3, [sp, #12]
   25d4c:	e7e2      	b.n	25d14 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   25d4e:	f1bb 0f04 	cmp.w	fp, #4
   25d52:	d13b      	bne.n	25dcc <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   25d54:	9b04      	ldr	r3, [sp, #16]
   25d56:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   25d58:	b94a      	cbnz	r2, 25d6e <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   25d5a:	2330      	movs	r3, #48	; 0x30
   25d5c:	4620      	mov	r0, r4
   25d5e:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   25d62:	9b03      	ldr	r3, [sp, #12]
   25d64:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   25d66:	3501      	adds	r5, #1
   25d68:	4604      	mov	r4, r0
   25d6a:	b2ed      	uxtb	r5, r5
   25d6c:	e7d5      	b.n	25d1a <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   25d6e:	f04f 0e09 	mov.w	lr, #9
   25d72:	f04f 0a00 	mov.w	sl, #0
   25d76:	e9cd 2401 	strd	r2, r4, [sp, #4]
   25d7a:	483a      	ldr	r0, [pc, #232]	; (25e64 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   25d7c:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   25d80:	45f2      	cmp	sl, lr
		value = value % divisor;
   25d82:	fbbc f2f0 	udiv	r2, ip, r0
   25d86:	fb00 c212 	mls	r2, r0, r2, ip
   25d8a:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   25d8c:	dc01      	bgt.n	25d92 <z_impl_net_addr_ntop+0xf6>
   25d8e:	4584      	cmp	ip, r0
   25d90:	d308      	bcc.n	25da4 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   25d92:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   25d96:	46f2      	mov	sl, lr
   25d98:	9b02      	ldr	r3, [sp, #8]
   25d9a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   25d9e:	f803 cb01 	strb.w	ip, [r3], #1
   25da2:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   25da4:	220a      	movs	r2, #10
   25da6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   25daa:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   25dae:	fbb0 f0f2 	udiv	r0, r0, r2
   25db2:	d1e3      	bne.n	25d7c <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   25db4:	f04f 0200 	mov.w	r2, #0
   25db8:	9b02      	ldr	r3, [sp, #8]
   25dba:	701a      	strb	r2, [r3, #0]
	return buf - start;
   25dbc:	1b1b      	subs	r3, r3, r4
			ptr += l;
   25dbe:	b2da      	uxtb	r2, r3
   25dc0:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   25dc4:	1c58      	adds	r0, r3, #1
   25dc6:	9b03      	ldr	r3, [sp, #12]
   25dc8:	54a3      	strb	r3, [r4, r2]
			continue;
   25dca:	e7cc      	b.n	25d66 <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   25dcc:	45a8      	cmp	r8, r5
   25dce:	d110      	bne.n	25df2 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   25dd0:	b911      	cbnz	r1, 25dd8 <z_impl_net_addr_ntop+0x13c>
   25dd2:	f1b8 0f00 	cmp.w	r8, #0
   25dd6:	d102      	bne.n	25dde <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   25dd8:	233a      	movs	r3, #58	; 0x3a
   25dda:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   25dde:	233a      	movs	r3, #58	; 0x3a
   25de0:	4620      	mov	r0, r4
   25de2:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   25de6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   25dea:	441d      	add	r5, r3
			needcolon = false;
   25dec:	2100      	movs	r1, #0
			i += longest - 1U;
   25dee:	b2ed      	uxtb	r5, r5
			continue;
   25df0:	e7b9      	b.n	25d66 <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   25df2:	b111      	cbz	r1, 25dfa <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   25df4:	233a      	movs	r3, #58	; 0x3a
   25df6:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   25dfa:	9b05      	ldr	r3, [sp, #20]
   25dfc:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   25e00:	0219      	lsls	r1, r3, #8
   25e02:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   25e06:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   25e0a:	b20a      	sxth	r2, r1
		bh = value >> 8;
   25e0c:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   25e10:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   25e14:	d016      	beq.n	25e44 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   25e16:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   25e18:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   25e1a:	d90b      	bls.n	25e34 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   25e1c:	2300      	movs	r3, #0
   25e1e:	2261      	movs	r2, #97	; 0x61
   25e20:	4620      	mov	r0, r4
   25e22:	f011 f850 	bl	36ec6 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   25e26:	2301      	movs	r3, #1
   25e28:	2261      	movs	r2, #97	; 0x61
   25e2a:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   25e2c:	f011 f84b 	bl	36ec6 <net_byte_to_hex>
		needcolon = true;
   25e30:	2101      	movs	r1, #1
   25e32:	e798      	b.n	25d66 <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   25e34:	b25b      	sxtb	r3, r3
   25e36:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   25e38:	bf94      	ite	ls
   25e3a:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   25e3c:	3357      	addhi	r3, #87	; 0x57
   25e3e:	1c60      	adds	r0, r4, #1
   25e40:	7023      	strb	r3, [r4, #0]
   25e42:	e7f0      	b.n	25e26 <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   25e44:	f1ba 0f0f 	cmp.w	sl, #15
   25e48:	d903      	bls.n	25e52 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   25e4a:	2261      	movs	r2, #97	; 0x61
   25e4c:	4651      	mov	r1, sl
   25e4e:	4620      	mov	r0, r4
   25e50:	e7ec      	b.n	25e2c <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   25e52:	b253      	sxtb	r3, r2
   25e54:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   25e58:	bf94      	ite	ls
   25e5a:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   25e5c:	3357      	addhi	r3, #87	; 0x57
   25e5e:	1c60      	adds	r0, r4, #1
   25e60:	7023      	strb	r3, [r4, #0]
   25e62:	e7e5      	b.n	25e30 <z_impl_net_addr_ntop+0x194>
   25e64:	3b9aca00 	.word	0x3b9aca00

00025e68 <parse_url_char>:
 * assumed that the caller cares about (and can detect) the transition between
 * URL and non-URL states by looking for these.
 */
enum state parse_url_char(enum state s, const char ch)
{
	if (ch == ' ' || ch == '\r' || ch == '\n') {
   25e68:	f1a1 030a 	sub.w	r3, r1, #10
   25e6c:	b2db      	uxtb	r3, r3
   25e6e:	2b16      	cmp	r3, #22
   25e70:	d90a      	bls.n	25e88 <parse_url_char+0x20>
	if (ch == '\t' || ch == '\f') {
		return s_dead;
	}
#endif

	switch (s) {
   25e72:	3814      	subs	r0, #20
   25e74:	280b      	cmp	r0, #11
   25e76:	d80d      	bhi.n	25e94 <parse_url_char+0x2c>
   25e78:	e8df f000 	tbb	[pc, r0]
   25e7c:	2b261c0e 	.word	0x2b261c0e
   25e80:	54303232 	.word	0x54303232
   25e84:	8a786666 	.word	0x8a786666
	if (ch == ' ' || ch == '\r' || ch == '\n') {
   25e88:	4a5e      	ldr	r2, [pc, #376]	; (26004 <parse_url_char+0x19c>)
   25e8a:	fa22 f303 	lsr.w	r3, r2, r3
   25e8e:	07da      	lsls	r2, r3, #31
   25e90:	f140 8099 	bpl.w	25fc6 <parse_url_char+0x15e>
   25e94:	2001      	movs	r0, #1

	/* We should never fall out of the switch above unless there's
	 * an error
	 */
	return s_dead;
}
   25e96:	4770      	bx	lr
		if (ch == '/' || ch == '*') {
   25e98:	292f      	cmp	r1, #47	; 0x2f
   25e9a:	f000 808e 	beq.w	25fba <parse_url_char+0x152>
   25e9e:	292a      	cmp	r1, #42	; 0x2a
   25ea0:	f000 808b 	beq.w	25fba <parse_url_char+0x152>
		if (IS_ALPHA(ch)) {
   25ea4:	f041 0120 	orr.w	r1, r1, #32
   25ea8:	3961      	subs	r1, #97	; 0x61
   25eaa:	2919      	cmp	r1, #25
			return s_req_schema;
   25eac:	bf8c      	ite	hi
   25eae:	2001      	movhi	r0, #1
   25eb0:	2015      	movls	r0, #21
   25eb2:	4770      	bx	lr
		if (IS_ALPHA(ch)) {
   25eb4:	f041 0320 	orr.w	r3, r1, #32
   25eb8:	3b61      	subs	r3, #97	; 0x61
   25eba:	2b19      	cmp	r3, #25
   25ebc:	d977      	bls.n	25fae <parse_url_char+0x146>
		if (ch == ':') {
   25ebe:	293a      	cmp	r1, #58	; 0x3a
			return s_req_schema_slash;
   25ec0:	bf14      	ite	ne
   25ec2:	2001      	movne	r0, #1
   25ec4:	2016      	moveq	r0, #22
   25ec6:	4770      	bx	lr
		if (ch == '/') {
   25ec8:	292f      	cmp	r1, #47	; 0x2f
			return s_req_schema_slash_slash;
   25eca:	bf14      	ite	ne
   25ecc:	2001      	movne	r0, #1
   25ece:	2017      	moveq	r0, #23
   25ed0:	4770      	bx	lr
		if (ch == '/') {
   25ed2:	292f      	cmp	r1, #47	; 0x2f
			return s_req_server_start;
   25ed4:	bf14      	ite	ne
   25ed6:	2001      	movne	r0, #1
   25ed8:	2018      	moveq	r0, #24
   25eda:	4770      	bx	lr
		if (ch == '@') {
   25edc:	2940      	cmp	r1, #64	; 0x40
   25ede:	d0d9      	beq.n	25e94 <parse_url_char+0x2c>
		if (ch == '/') {
   25ee0:	292f      	cmp	r1, #47	; 0x2f
   25ee2:	d06a      	beq.n	25fba <parse_url_char+0x152>
		if (ch == '?') {
   25ee4:	293f      	cmp	r1, #63	; 0x3f
   25ee6:	d064      	beq.n	25fb2 <parse_url_char+0x14a>
		if (ch == '@') {
   25ee8:	2940      	cmp	r1, #64	; 0x40
   25eea:	d064      	beq.n	25fb6 <parse_url_char+0x14e>
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
   25eec:	f041 0320 	orr.w	r3, r1, #32
   25ef0:	3b61      	subs	r3, #97	; 0x61
   25ef2:	2b19      	cmp	r3, #25
   25ef4:	d906      	bls.n	25f04 <parse_url_char+0x9c>
   25ef6:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   25efa:	b2db      	uxtb	r3, r3
   25efc:	2b1c      	cmp	r3, #28
   25efe:	d903      	bls.n	25f08 <parse_url_char+0xa0>
   25f00:	297e      	cmp	r1, #126	; 0x7e
   25f02:	d106      	bne.n	25f12 <parse_url_char+0xaa>
			return s_req_server;
   25f04:	2019      	movs	r0, #25
   25f06:	4770      	bx	lr
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
   25f08:	4a3f      	ldr	r2, [pc, #252]	; (26008 <parse_url_char+0x1a0>)
   25f0a:	fa22 f303 	lsr.w	r3, r2, r3
   25f0e:	07db      	lsls	r3, r3, #31
   25f10:	d4f8      	bmi.n	25f04 <parse_url_char+0x9c>
   25f12:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
   25f16:	2b5b      	cmp	r3, #91	; 0x5b
   25f18:	d0f4      	beq.n	25f04 <parse_url_char+0x9c>
   25f1a:	295d      	cmp	r1, #93	; 0x5d
			return s_req_server;
   25f1c:	bf14      	ite	ne
   25f1e:	2001      	movne	r0, #1
   25f20:	2019      	moveq	r0, #25
   25f22:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   25f24:	4a39      	ldr	r2, [pc, #228]	; (2600c <parse_url_char+0x1a4>)
   25f26:	08cb      	lsrs	r3, r1, #3
   25f28:	5cd2      	ldrb	r2, [r2, r3]
   25f2a:	2301      	movs	r3, #1
   25f2c:	f001 0007 	and.w	r0, r1, #7
   25f30:	4083      	lsls	r3, r0
   25f32:	421a      	tst	r2, r3
   25f34:	d141      	bne.n	25fba <parse_url_char+0x152>
   25f36:	060a      	lsls	r2, r1, #24
   25f38:	d43f      	bmi.n	25fba <parse_url_char+0x152>
		switch (ch) {
   25f3a:	2923      	cmp	r1, #35	; 0x23
   25f3c:	d041      	beq.n	25fc2 <parse_url_char+0x15a>
   25f3e:	293f      	cmp	r1, #63	; 0x3f
			return s_req_query_string_start;
   25f40:	bf14      	ite	ne
   25f42:	2001      	movne	r0, #1
   25f44:	201c      	moveq	r0, #28
   25f46:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   25f48:	4a30      	ldr	r2, [pc, #192]	; (2600c <parse_url_char+0x1a4>)
   25f4a:	08cb      	lsrs	r3, r1, #3
   25f4c:	5cd2      	ldrb	r2, [r2, r3]
   25f4e:	2301      	movs	r3, #1
   25f50:	f001 0007 	and.w	r0, r1, #7
   25f54:	4083      	lsls	r3, r0
   25f56:	421a      	tst	r2, r3
   25f58:	d131      	bne.n	25fbe <parse_url_char+0x156>
   25f5a:	060b      	lsls	r3, r1, #24
   25f5c:	d42f      	bmi.n	25fbe <parse_url_char+0x156>
		switch (ch) {
   25f5e:	2923      	cmp	r1, #35	; 0x23
   25f60:	d02f      	beq.n	25fc2 <parse_url_char+0x15a>
   25f62:	293f      	cmp	r1, #63	; 0x3f
			return s_req_query_string;
   25f64:	bf14      	ite	ne
   25f66:	2001      	movne	r0, #1
   25f68:	201d      	moveq	r0, #29
   25f6a:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   25f6c:	4a27      	ldr	r2, [pc, #156]	; (2600c <parse_url_char+0x1a4>)
   25f6e:	08cb      	lsrs	r3, r1, #3
   25f70:	5cd2      	ldrb	r2, [r2, r3]
   25f72:	2301      	movs	r3, #1
   25f74:	f001 0007 	and.w	r0, r1, #7
   25f78:	4083      	lsls	r3, r0
   25f7a:	421a      	tst	r2, r3
   25f7c:	d115      	bne.n	25faa <parse_url_char+0x142>
   25f7e:	060a      	lsls	r2, r1, #24
   25f80:	d413      	bmi.n	25faa <parse_url_char+0x142>
		switch (ch) {
   25f82:	2923      	cmp	r1, #35	; 0x23
   25f84:	d01d      	beq.n	25fc2 <parse_url_char+0x15a>
   25f86:	293f      	cmp	r1, #63	; 0x3f
			return s_req_fragment;
   25f88:	bf14      	ite	ne
   25f8a:	2001      	movne	r0, #1
   25f8c:	201f      	moveq	r0, #31
   25f8e:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   25f90:	4a1e      	ldr	r2, [pc, #120]	; (2600c <parse_url_char+0x1a4>)
   25f92:	08cb      	lsrs	r3, r1, #3
   25f94:	5cd2      	ldrb	r2, [r2, r3]
   25f96:	2301      	movs	r3, #1
   25f98:	f001 0007 	and.w	r0, r1, #7
   25f9c:	4083      	lsls	r3, r0
   25f9e:	421a      	tst	r2, r3
   25fa0:	d103      	bne.n	25faa <parse_url_char+0x142>
   25fa2:	060b      	lsls	r3, r1, #24
   25fa4:	d401      	bmi.n	25faa <parse_url_char+0x142>
		switch (ch) {
   25fa6:	2923      	cmp	r1, #35	; 0x23
   25fa8:	d1ed      	bne.n	25f86 <parse_url_char+0x11e>
			return s_req_fragment;
   25faa:	201f      	movs	r0, #31
   25fac:	4770      	bx	lr
			return s_req_schema;
   25fae:	2015      	movs	r0, #21
   25fb0:	4770      	bx	lr
			return s_req_query_string_start;
   25fb2:	201c      	movs	r0, #28
   25fb4:	4770      	bx	lr
			return s_req_server_with_at;
   25fb6:	201a      	movs	r0, #26
   25fb8:	4770      	bx	lr
			return s_req_path;
   25fba:	201b      	movs	r0, #27
   25fbc:	4770      	bx	lr
			return s_req_query_string;
   25fbe:	201d      	movs	r0, #29
   25fc0:	4770      	bx	lr
			return s_req_fragment_start;
   25fc2:	201e      	movs	r0, #30
   25fc4:	4770      	bx	lr
	switch (s) {
   25fc6:	3814      	subs	r0, #20
   25fc8:	280b      	cmp	r0, #11
   25fca:	f63f af63 	bhi.w	25e94 <parse_url_char+0x2c>
   25fce:	a301      	add	r3, pc, #4	; (adr r3, 25fd4 <parse_url_char+0x16c>)
   25fd0:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   25fd4:	00025ea5 	.word	0x00025ea5
   25fd8:	00025eb5 	.word	0x00025eb5
   25fdc:	00025ec9 	.word	0x00025ec9
   25fe0:	00025ed3 	.word	0x00025ed3
   25fe4:	00025ee1 	.word	0x00025ee1
   25fe8:	00025ee1 	.word	0x00025ee1
   25fec:	00025edd 	.word	0x00025edd
   25ff0:	00025f25 	.word	0x00025f25
   25ff4:	00025f49 	.word	0x00025f49
   25ff8:	00025f49 	.word	0x00025f49
   25ffc:	00025f6d 	.word	0x00025f6d
   26000:	00025f91 	.word	0x00025f91
   26004:	00400009 	.word	0x00400009
   26008:	17ffbff9 	.word	0x17ffbff9
   2600c:	0003bfa0 	.word	0x0003bfa0

00026010 <http_parser_parse_url>:
}

int
http_parser_parse_url(const char *buf, size_t buflen, int is_connect,
		      struct http_parser_url *u)
{
   26010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26014:	4605      	mov	r5, r0
	enum http_parser_url_fields uf;
	int found_at = 0;
	const char *p;
	enum state s;

	u->port = u->field_set = 0U;
   26016:	2700      	movs	r7, #0
	s = is_connect ? s_req_server_start : s_req_spaces_before_url;
   26018:	1e16      	subs	r6, r2, #0
{
   2601a:	461c      	mov	r4, r3
	s = is_connect ? s_req_server_start : s_req_spaces_before_url;
   2601c:	bf14      	ite	ne
   2601e:	2018      	movne	r0, #24
   26020:	2014      	moveq	r0, #20
   26022:	46a8      	mov	r8, r5
		}

		u->field_data[uf].off = p - buf;
		u->field_data[uf].len = 1U;

		u->field_set |= (1 << uf);
   26024:	f04f 0b07 	mov.w	fp, #7
	u->port = u->field_set = 0U;
   26028:	801f      	strh	r7, [r3, #0]
   2602a:	805f      	strh	r7, [r3, #2]
	for (p = buf; p < buf + buflen; p++) {
   2602c:	eb05 0a01 	add.w	sl, r5, r1
   26030:	45d0      	cmp	r8, sl
   26032:	46c1      	mov	r9, r8
   26034:	d30a      	bcc.n	2604c <http_parser_parse_url+0x3c>
		old_uf = uf;
	}

	/* host must be present if there is a schema */
	/* parsing http:///toto will fail */
	if ((u->field_set & (1 << UF_SCHEMA)) &&
   26036:	8822      	ldrh	r2, [r4, #0]
   26038:	f002 0302 	and.w	r3, r2, #2
   2603c:	07d2      	lsls	r2, r2, #31
   2603e:	d54b      	bpl.n	260d8 <http_parser_parse_url+0xc8>
   26040:	2b00      	cmp	r3, #0
   26042:	d14a      	bne.n	260da <http_parser_parse_url+0xca>
			(u->field_set & (1 << UF_HOST)) == 0U) {
		return 1;
   26044:	2601      	movs	r6, #1

		u->port = (uint16_t) v;
	}

	return 0;
}
   26046:	4630      	mov	r0, r6
   26048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		s = parse_url_char(s, *p);
   2604c:	f899 1000 	ldrb.w	r1, [r9]
   26050:	f7ff ff0a 	bl	25e68 <parse_url_char>
		switch (s) {
   26054:	f1a0 0315 	sub.w	r3, r0, #21
   26058:	2201      	movs	r2, #1
   2605a:	f108 0801 	add.w	r8, r8, #1
   2605e:	2b0a      	cmp	r3, #10
   26060:	d8f0      	bhi.n	26044 <http_parser_parse_url+0x34>
   26062:	a101      	add	r1, pc, #4	; (adr r1, 26068 <http_parser_parse_url+0x58>)
   26064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   26068:	000260b5 	.word	0x000260b5
   2606c:	00026031 	.word	0x00026031
   26070:	00026031 	.word	0x00026031
   26074:	00026031 	.word	0x00026031
   26078:	00026097 	.word	0x00026097
   2607c:	00026095 	.word	0x00026095
   26080:	000260a9 	.word	0x000260a9
   26084:	00026031 	.word	0x00026031
   26088:	000260ad 	.word	0x000260ad
   2608c:	00026031 	.word	0x00026031
   26090:	000260b1 	.word	0x000260b1
			found_at = 1;
   26094:	2701      	movs	r7, #1
			uf = UF_HOST;
   26096:	2301      	movs	r3, #1
		if (uf == old_uf) {
   26098:	459b      	cmp	fp, r3
   2609a:	d10d      	bne.n	260b8 <http_parser_parse_url+0xa8>
			u->field_data[uf].len++;
   2609c:	eb04 018b 	add.w	r1, r4, fp, lsl #2
   260a0:	88cb      	ldrh	r3, [r1, #6]
   260a2:	3301      	adds	r3, #1
   260a4:	80cb      	strh	r3, [r1, #6]
			continue;
   260a6:	e7c3      	b.n	26030 <http_parser_parse_url+0x20>
			uf = UF_PATH;
   260a8:	2303      	movs	r3, #3
			break;
   260aa:	e7f5      	b.n	26098 <http_parser_parse_url+0x88>
			uf = UF_QUERY;
   260ac:	2304      	movs	r3, #4
			break;
   260ae:	e7f3      	b.n	26098 <http_parser_parse_url+0x88>
			uf = UF_FRAGMENT;
   260b0:	2305      	movs	r3, #5
			break;
   260b2:	e7f1      	b.n	26098 <http_parser_parse_url+0x88>
		s = parse_url_char(s, *p);
   260b4:	2300      	movs	r3, #0
   260b6:	e7ef      	b.n	26098 <http_parser_parse_url+0x88>
		u->field_data[uf].off = p - buf;
   260b8:	eb04 0183 	add.w	r1, r4, r3, lsl #2
   260bc:	eba9 0905 	sub.w	r9, r9, r5
   260c0:	f8a1 9004 	strh.w	r9, [r1, #4]
		u->field_data[uf].len = 1U;
   260c4:	80ca      	strh	r2, [r1, #6]
		u->field_set |= (1 << uf);
   260c6:	f8b4 c000 	ldrh.w	ip, [r4]
   260ca:	fa02 f103 	lsl.w	r1, r2, r3
   260ce:	ea41 010c 	orr.w	r1, r1, ip
   260d2:	469b      	mov	fp, r3
   260d4:	8021      	strh	r1, [r4, #0]
	for (p = buf; p < buf + buflen; p++) {
   260d6:	e7ab      	b.n	26030 <http_parser_parse_url+0x20>
	if (u->field_set & (1 << UF_HOST)) {
   260d8:	b303      	cbz	r3, 2611c <http_parser_parse_url+0x10c>
	u->field_data[UF_HOST].len = 0U;
   260da:	f04f 0e00 	mov.w	lr, #0
	s = found_at ? s_http_userinfo_start : s_http_host_start;
   260de:	4577      	cmp	r7, lr
   260e0:	bf14      	ite	ne
   260e2:	2102      	movne	r1, #2
   260e4:	2104      	moveq	r1, #4
	buflen = u->field_data[UF_HOST].off + u->field_data[UF_HOST].len;
   260e6:	8922      	ldrh	r2, [r4, #8]
   260e8:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   260ec:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 262b4 <http_parser_parse_url+0x2a4>
	buflen = u->field_data[UF_HOST].off + u->field_data[UF_HOST].len;
   260f0:	4494      	add	ip, r2
		if (IS_USERINFO_CHAR(ch)) {
   260f2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 262b8 <http_parser_parse_url+0x2a8>
	u->field_data[UF_HOST].len = 0U;
   260f6:	f8a4 e00a 	strh.w	lr, [r4, #10]
	for (p = buf + u->field_data[UF_HOST].off; p < buf + buflen; p++) {
   260fa:	442a      	add	r2, r5
   260fc:	44ac      	add	ip, r5
   260fe:	4562      	cmp	r2, ip
   26100:	4610      	mov	r0, r2
   26102:	f1a1 0702 	sub.w	r7, r1, #2
   26106:	d31b      	bcc.n	26140 <http_parser_parse_url+0x130>
	switch (s) {
   26108:	b2ff      	uxtb	r7, r7
   2610a:	2f09      	cmp	r7, #9
   2610c:	d806      	bhi.n	2611c <http_parser_parse_url+0x10c>
   2610e:	2301      	movs	r3, #1
   26110:	fa03 f707 	lsl.w	r7, r3, r7
   26114:	f240 33af 	movw	r3, #943	; 0x3af
   26118:	421f      	tst	r7, r3
   2611a:	d193      	bne.n	26044 <http_parser_parse_url+0x34>
	if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {
   2611c:	8823      	ldrh	r3, [r4, #0]
   2611e:	2e00      	cmp	r6, #0
   26120:	f000 80ba 	beq.w	26298 <http_parser_parse_url+0x288>
   26124:	2b06      	cmp	r3, #6
   26126:	d18d      	bne.n	26044 <http_parser_parse_url+0x34>
		v = strtoul(buf + u->field_data[UF_PORT].off, NULL, 10);
   26128:	89a0      	ldrh	r0, [r4, #12]
   2612a:	220a      	movs	r2, #10
   2612c:	2100      	movs	r1, #0
   2612e:	4428      	add	r0, r5
   26130:	f00e ff9c 	bl	3506c <strtoul>
		if (v > 0xffff) {
   26134:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   26138:	d284      	bcs.n	26044 <http_parser_parse_url+0x34>
	return 0;
   2613a:	2600      	movs	r6, #0
		u->port = (uint16_t) v;
   2613c:	8060      	strh	r0, [r4, #2]
   2613e:	e782      	b.n	26046 <http_parser_parse_url+0x36>
		enum http_host_state new_s = http_parse_host_char(s, *p);
   26140:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (s) {
   26144:	2f0a      	cmp	r7, #10
   26146:	f63f af7d 	bhi.w	26044 <http_parser_parse_url+0x34>
   2614a:	e8df f007 	tbb	[pc, r7]
   2614e:	0606      	.short	0x0606
   26150:	5a465c2d 	.word	0x5a465c2d
   26154:	8c727455 	.word	0x8c727455
   26158:	8c          	.byte	0x8c
   26159:	00          	.byte	0x00
		if (ch == '@') {
   2615a:	2b40      	cmp	r3, #64	; 0x40
   2615c:	f000 8096 	beq.w	2628c <http_parser_parse_url+0x27c>
		if (IS_USERINFO_CHAR(ch)) {
   26160:	f043 0720 	orr.w	r7, r3, #32
   26164:	3f61      	subs	r7, #97	; 0x61
   26166:	2f19      	cmp	r7, #25
   26168:	d909      	bls.n	2617e <http_parser_parse_url+0x16e>
   2616a:	2b5f      	cmp	r3, #95	; 0x5f
   2616c:	d007      	beq.n	2617e <http_parser_parse_url+0x16e>
   2616e:	f1a3 0721 	sub.w	r7, r3, #33	; 0x21
   26172:	b2ff      	uxtb	r7, r7
   26174:	2f1c      	cmp	r7, #28
   26176:	d911      	bls.n	2619c <http_parser_parse_url+0x18c>
   26178:	2b7e      	cmp	r3, #126	; 0x7e
   2617a:	f47f af63 	bne.w	26044 <http_parser_parse_url+0x34>
			if (s != s_http_userinfo) {
   2617e:	2903      	cmp	r1, #3
   26180:	d007      	beq.n	26192 <http_parser_parse_url+0x182>
				u->field_set |= (1 << UF_USERINFO);
   26182:	8823      	ldrh	r3, [r4, #0]
				u->field_data[UF_USERINFO].off = p - buf;
   26184:	1b40      	subs	r0, r0, r5
				u->field_set |= (1 << UF_USERINFO);
   26186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
				u->field_data[UF_USERINFO].off = p - buf;
   2618a:	83a0      	strh	r0, [r4, #28]
				u->field_data[UF_USERINFO].len = 0U;
   2618c:	f8a4 e01e 	strh.w	lr, [r4, #30]
				u->field_set |= (1 << UF_USERINFO);
   26190:	8023      	strh	r3, [r4, #0]
			u->field_data[UF_USERINFO].len++;
   26192:	8be3      	ldrh	r3, [r4, #30]
			return s_http_userinfo;
   26194:	2103      	movs	r1, #3
			u->field_data[UF_USERINFO].len++;
   26196:	3301      	adds	r3, #1
   26198:	83e3      	strh	r3, [r4, #30]
			break;
   2619a:	e7b0      	b.n	260fe <http_parser_parse_url+0xee>
		if (IS_USERINFO_CHAR(ch)) {
   2619c:	fa29 f707 	lsr.w	r7, r9, r7
   261a0:	07ff      	lsls	r7, r7, #31
   261a2:	f57f af4f 	bpl.w	26044 <http_parser_parse_url+0x34>
   261a6:	e7ea      	b.n	2617e <http_parser_parse_url+0x16e>
		if (ch == '[') {
   261a8:	2b5b      	cmp	r3, #91	; 0x5b
   261aa:	d071      	beq.n	26290 <http_parser_parse_url+0x280>
		if (IS_HOST_CHAR(ch)) {
   261ac:	f043 0120 	orr.w	r1, r3, #32
   261b0:	3961      	subs	r1, #97	; 0x61
   261b2:	2919      	cmp	r1, #25
   261b4:	d90a      	bls.n	261cc <http_parser_parse_url+0x1bc>
   261b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   261ba:	2909      	cmp	r1, #9
   261bc:	d906      	bls.n	261cc <http_parser_parse_url+0x1bc>
   261be:	f1a3 012d 	sub.w	r1, r3, #45	; 0x2d
   261c2:	2901      	cmp	r1, #1
   261c4:	d902      	bls.n	261cc <http_parser_parse_url+0x1bc>
   261c6:	2b5f      	cmp	r3, #95	; 0x5f
   261c8:	f47f af3c 	bne.w	26044 <http_parser_parse_url+0x34>
				u->field_data[UF_HOST].off = p - buf;
   261cc:	1b40      	subs	r0, r0, r5
   261ce:	8120      	strh	r0, [r4, #8]
			u->field_data[UF_HOST].len++;
   261d0:	8963      	ldrh	r3, [r4, #10]
			break;
   261d2:	2106      	movs	r1, #6
			u->field_data[UF_HOST].len++;
   261d4:	3301      	adds	r3, #1
   261d6:	8163      	strh	r3, [r4, #10]
			break;
   261d8:	e791      	b.n	260fe <http_parser_parse_url+0xee>
		if (IS_HOST_CHAR(ch)) {
   261da:	f043 0120 	orr.w	r1, r3, #32
   261de:	3961      	subs	r1, #97	; 0x61
   261e0:	2919      	cmp	r1, #25
   261e2:	d9f5      	bls.n	261d0 <http_parser_parse_url+0x1c0>
   261e4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   261e8:	2909      	cmp	r1, #9
   261ea:	d9f1      	bls.n	261d0 <http_parser_parse_url+0x1c0>
   261ec:	f1a3 012d 	sub.w	r1, r3, #45	; 0x2d
   261f0:	2901      	cmp	r1, #1
   261f2:	d9ed      	bls.n	261d0 <http_parser_parse_url+0x1c0>
   261f4:	2b5f      	cmp	r3, #95	; 0x5f
   261f6:	d0eb      	beq.n	261d0 <http_parser_parse_url+0x1c0>
		if (ch == ':') {
   261f8:	2b3a      	cmp	r3, #58	; 0x3a
   261fa:	f47f af23 	bne.w	26044 <http_parser_parse_url+0x34>
			return s_http_host_port_start;
   261fe:	210b      	movs	r1, #11
   26200:	e77d      	b.n	260fe <http_parser_parse_url+0xee>
		if (ch == ']') {
   26202:	2b5d      	cmp	r3, #93	; 0x5d
   26204:	d046      	beq.n	26294 <http_parser_parse_url+0x284>
		if (IS_HEX(ch) || ch == ':' || ch == '.') {
   26206:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
   2620a:	2f0a      	cmp	r7, #10
   2620c:	d948      	bls.n	262a0 <http_parser_parse_url+0x290>
   2620e:	f043 0720 	orr.w	r7, r3, #32
   26212:	3f61      	subs	r7, #97	; 0x61
   26214:	2f05      	cmp	r7, #5
   26216:	d943      	bls.n	262a0 <http_parser_parse_url+0x290>
   26218:	2b2e      	cmp	r3, #46	; 0x2e
   2621a:	d041      	beq.n	262a0 <http_parser_parse_url+0x290>
		if (s == s_http_host_v6 && ch == '%') {
   2621c:	2907      	cmp	r1, #7
   2621e:	f47f af11 	bne.w	26044 <http_parser_parse_url+0x34>
   26222:	2b25      	cmp	r3, #37	; 0x25
   26224:	f47f af0e 	bne.w	26044 <http_parser_parse_url+0x34>
			return s_http_host_v6_zone_start;
   26228:	2109      	movs	r1, #9
			u->field_data[UF_HOST].len++;
   2622a:	8963      	ldrh	r3, [r4, #10]
   2622c:	3301      	adds	r3, #1
   2622e:	8163      	strh	r3, [r4, #10]
			break;
   26230:	e765      	b.n	260fe <http_parser_parse_url+0xee>
		if (ch == ']') {
   26232:	2b5d      	cmp	r3, #93	; 0x5d
   26234:	d02e      	beq.n	26294 <http_parser_parse_url+0x284>
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   26236:	f043 0120 	orr.w	r1, r3, #32
   2623a:	3961      	subs	r1, #97	; 0x61
   2623c:	2919      	cmp	r1, #25
   2623e:	d906      	bls.n	2624e <http_parser_parse_url+0x23e>
   26240:	f1a3 0125 	sub.w	r1, r3, #37	; 0x25
   26244:	b2c9      	uxtb	r1, r1
   26246:	2914      	cmp	r1, #20
   26248:	d903      	bls.n	26252 <http_parser_parse_url+0x242>
   2624a:	2b5f      	cmp	r3, #95	; 0x5f
   2624c:	d107      	bne.n	2625e <http_parser_parse_url+0x24e>
			return s_http_host_v6_zone;
   2624e:	210a      	movs	r1, #10
   26250:	e7eb      	b.n	2622a <http_parser_parse_url+0x21a>
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   26252:	fa28 f101 	lsr.w	r1, r8, r1
   26256:	07c9      	lsls	r1, r1, #31
   26258:	f57f aef4 	bpl.w	26044 <http_parser_parse_url+0x34>
   2625c:	e7f7      	b.n	2624e <http_parser_parse_url+0x23e>
				ch == '_' ||
   2625e:	2b7e      	cmp	r3, #126	; 0x7e
   26260:	f47f aef0 	bne.w	26044 <http_parser_parse_url+0x34>
   26264:	e7f3      	b.n	2624e <http_parser_parse_url+0x23e>
		if (IS_NUM(ch)) {
   26266:	3b30      	subs	r3, #48	; 0x30
   26268:	2b09      	cmp	r3, #9
   2626a:	f63f aeeb 	bhi.w	26044 <http_parser_parse_url+0x34>
			if (s != s_http_host_port) {
   2626e:	290c      	cmp	r1, #12
   26270:	d007      	beq.n	26282 <http_parser_parse_url+0x272>
				u->field_set |= (1 << UF_PORT);
   26272:	8823      	ldrh	r3, [r4, #0]
				u->field_data[UF_PORT].off = p - buf;
   26274:	1b40      	subs	r0, r0, r5
				u->field_set |= (1 << UF_PORT);
   26276:	f043 0304 	orr.w	r3, r3, #4
				u->field_data[UF_PORT].off = p - buf;
   2627a:	81a0      	strh	r0, [r4, #12]
				u->field_data[UF_PORT].len = 0U;
   2627c:	f8a4 e00e 	strh.w	lr, [r4, #14]
				u->field_set |= (1 << UF_PORT);
   26280:	8023      	strh	r3, [r4, #0]
			u->field_data[UF_PORT].len++;
   26282:	89e3      	ldrh	r3, [r4, #14]
			return s_http_host_port;
   26284:	210c      	movs	r1, #12
			u->field_data[UF_PORT].len++;
   26286:	3301      	adds	r3, #1
   26288:	81e3      	strh	r3, [r4, #14]
			break;
   2628a:	e738      	b.n	260fe <http_parser_parse_url+0xee>
			return s_http_host_start;
   2628c:	2104      	movs	r1, #4
   2628e:	e736      	b.n	260fe <http_parser_parse_url+0xee>
			return s_http_host_v6_start;
   26290:	2105      	movs	r1, #5
   26292:	e734      	b.n	260fe <http_parser_parse_url+0xee>
			return s_http_host_v6_end;
   26294:	2108      	movs	r1, #8
   26296:	e732      	b.n	260fe <http_parser_parse_url+0xee>
	if (u->field_set & (1 << UF_PORT)) {
   26298:	075b      	lsls	r3, r3, #29
   2629a:	f57f aed4 	bpl.w	26046 <http_parser_parse_url+0x36>
   2629e:	e743      	b.n	26128 <http_parser_parse_url+0x118>
			if (s != s_http_host_v6) {
   262a0:	2907      	cmp	r1, #7
   262a2:	d001      	beq.n	262a8 <http_parser_parse_url+0x298>
				u->field_data[UF_HOST].off = p - buf;
   262a4:	1b40      	subs	r0, r0, r5
   262a6:	8120      	strh	r0, [r4, #8]
			u->field_data[UF_HOST].len++;
   262a8:	8963      	ldrh	r3, [r4, #10]
			break;
   262aa:	2107      	movs	r1, #7
			u->field_data[UF_HOST].len++;
   262ac:	3301      	adds	r3, #1
   262ae:	8163      	strh	r3, [r4, #10]
			break;
   262b0:	e725      	b.n	260fe <http_parser_parse_url+0xee>
   262b2:	bf00      	nop
   262b4:	001ffb01 	.word	0x001ffb01
   262b8:	17ffbff9 	.word	0x17ffbff9

000262bc <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   262bc:	4a06      	ldr	r2, [pc, #24]	; (262d8 <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   262be:	f000 001f 	and.w	r0, r0, #31
   262c2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   262c6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   262ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   262ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   262d2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   262d6:	4770      	bx	lr
   262d8:	40842500 	.word	0x40842500

000262dc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   262dc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   262de:	4b09      	ldr	r3, [pc, #36]	; (26304 <gpio_nrfx_init+0x28>)
   262e0:	781a      	ldrb	r2, [r3, #0]
   262e2:	b96a      	cbnz	r2, 26300 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   262e4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   262e6:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   262e8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   262ea:	2105      	movs	r1, #5
   262ec:	f7fe fe88 	bl	25000 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   262f0:	2031      	movs	r0, #49	; 0x31
   262f2:	f7fe fe53 	bl	24f9c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   262f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   262fa:	4b03      	ldr	r3, [pc, #12]	; (26308 <gpio_nrfx_init+0x2c>)
   262fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   26300:	2000      	movs	r0, #0
   26302:	bd08      	pop	{r3, pc}
   26304:	2002bbc4 	.word	0x2002bbc4
   26308:	40031000 	.word	0x40031000

0002630c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2630c:	4b28      	ldr	r3, [pc, #160]	; (263b0 <gpio_nrfx_config+0xa4>)
{
   2630e:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26310:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   26312:	4828      	ldr	r0, [pc, #160]	; (263b4 <gpio_nrfx_config+0xa8>)
   26314:	4013      	ands	r3, r2
   26316:	4283      	cmp	r3, r0
   26318:	d03b      	beq.n	26392 <gpio_nrfx_config+0x86>
   2631a:	d80d      	bhi.n	26338 <gpio_nrfx_config+0x2c>
   2631c:	2b06      	cmp	r3, #6
   2631e:	d015      	beq.n	2634c <gpio_nrfx_config+0x40>
   26320:	d805      	bhi.n	2632e <gpio_nrfx_config+0x22>
   26322:	b19b      	cbz	r3, 2634c <gpio_nrfx_config+0x40>
   26324:	2b02      	cmp	r3, #2
   26326:	d036      	beq.n	26396 <gpio_nrfx_config+0x8a>
   26328:	f06f 0015 	mvn.w	r0, #21
   2632c:	e030      	b.n	26390 <gpio_nrfx_config+0x84>
   2632e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   26332:	d1f9      	bne.n	26328 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   26334:	2301      	movs	r3, #1
   26336:	e009      	b.n	2634c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   26338:	481f      	ldr	r0, [pc, #124]	; (263b8 <gpio_nrfx_config+0xac>)
   2633a:	4283      	cmp	r3, r0
   2633c:	d02d      	beq.n	2639a <gpio_nrfx_config+0x8e>
   2633e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   26342:	d02c      	beq.n	2639e <gpio_nrfx_config+0x92>
   26344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   26348:	d1ee      	bne.n	26328 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   2634a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   2634c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   2634e:	bf4c      	ite	mi
   26350:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   26352:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   26356:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   2635a:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   2635e:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   26362:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   26366:	d006      	beq.n	26376 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   26368:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2636c:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2636e:	d018      	beq.n	263a2 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
   26370:	2201      	movs	r2, #1
   26372:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   26374:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   26376:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   2637a:	2000      	movs	r0, #0
   2637c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
   26380:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   26384:	4a0d      	ldr	r2, [pc, #52]	; (263bc <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   26386:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2638a:	3180      	adds	r1, #128	; 0x80
   2638c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   26390:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   26392:	2307      	movs	r3, #7
   26394:	e7da      	b.n	2634c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   26396:	2304      	movs	r3, #4
   26398:	e7d8      	b.n	2634c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   2639a:	2305      	movs	r3, #5
   2639c:	e7d6      	b.n	2634c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   2639e:	2303      	movs	r3, #3
   263a0:	e7d4      	b.n	2634c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   263a2:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   263a4:	bf42      	ittt	mi
   263a6:	2201      	movmi	r2, #1
   263a8:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   263aa:	60f2      	strmi	r2, [r6, #12]
}
   263ac:	e7e3      	b.n	26376 <gpio_nrfx_config+0x6a>
   263ae:	bf00      	nop
   263b0:	00f00006 	.word	0x00f00006
   263b4:	00100006 	.word	0x00100006
   263b8:	00400002 	.word	0x00400002
   263bc:	40842500 	.word	0x40842500

000263c0 <gpio_nrfx_pin_interrupt_configure>:
{
   263c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   263c4:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   263c6:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   263c8:	f8d0 800c 	ldr.w	r8, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   263cc:	7a08      	ldrb	r0, [r1, #8]
   263ce:	f005 071f 	and.w	r7, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   263d2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   263d6:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   263da:	d10a      	bne.n	263f2 <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   263dc:	486e      	ldr	r0, [pc, #440]	; (26598 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
    *p_pin = pin_number & 0x1F;
   263de:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   263e2:	3180      	adds	r1, #128	; 0x80
   263e4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   263e8:	07c8      	lsls	r0, r1, #31
   263ea:	d508      	bpl.n	263fe <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   263ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   263f0:	e0c2      	b.n	26578 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   263f2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   263f6:	f8d8 100c 	ldr.w	r1, [r8, #12]
   263fa:	f000 80ae 	beq.w	2655a <gpio_nrfx_pin_interrupt_configure+0x19a>
   263fe:	2101      	movs	r1, #1
   26400:	f8d8 000c 	ldr.w	r0, [r8, #12]
   26404:	40a9      	lsls	r1, r5
   26406:	4301      	orrs	r1, r0
   26408:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   2640c:	2101      	movs	r1, #1
   2640e:	f8d8 0014 	ldr.w	r0, [r8, #20]
   26412:	40a9      	lsls	r1, r5
   26414:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   26418:	f8d8 2018 	ldr.w	r2, [r8, #24]
   2641c:	bf0c      	ite	eq
   2641e:	4308      	orreq	r0, r1
   26420:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   26422:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   26426:	bf0c      	ite	eq
   26428:	430a      	orreq	r2, r1
   2642a:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   2642c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   26430:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   26434:	f8c8 2018 	str.w	r2, [r8, #24]
   26438:	f8d8 2010 	ldr.w	r2, [r8, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   2643c:	4e57      	ldr	r6, [pc, #348]	; (2659c <gpio_nrfx_pin_interrupt_configure+0x1dc>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   2643e:	bf0c      	ite	eq
   26440:	4311      	orreq	r1, r2
   26442:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   26446:	f8c8 0014 	str.w	r0, [r8, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   2644a:	f8c8 1010 	str.w	r1, [r8, #16]
   2644e:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   26452:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   26454:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   26458:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   2645c:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   26460:	428f      	cmp	r7, r1
   26462:	d17f      	bne.n	26564 <gpio_nrfx_pin_interrupt_configure+0x1a4>
		    && (intenset & BIT(i))) {
   26464:	fa22 f103 	lsr.w	r1, r2, r3
   26468:	07c9      	lsls	r1, r1, #31
   2646a:	d57b      	bpl.n	26564 <gpio_nrfx_pin_interrupt_configure+0x1a4>
			(void)atomic_and(mask, ~BIT(i));
   2646c:	2201      	movs	r2, #1
   2646e:	409a      	lsls	r2, r3
   26470:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26472:	494b      	ldr	r1, [pc, #300]	; (265a0 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   26474:	e8d1 4fef 	ldaex	r4, [r1]
   26478:	4004      	ands	r4, r0
   2647a:	e8c1 4fec 	stlex	ip, r4, [r1]
   2647e:	f1bc 0f00 	cmp.w	ip, #0
   26482:	d1f7      	bne.n	26474 <gpio_nrfx_pin_interrupt_configure+0xb4>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   26484:	009b      	lsls	r3, r3, #2
   26486:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2648a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   2648e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   26492:	f021 0101 	bic.w	r1, r1, #1
   26496:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   2649a:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2649e:	2100      	movs	r1, #0
   264a0:	4638      	mov	r0, r7
   264a2:	f7ff ff0b 	bl	262bc <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   264a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   264aa:	40eb      	lsrs	r3, r5
   264ac:	f013 0301 	ands.w	r3, r3, #1
   264b0:	d051      	beq.n	26556 <gpio_nrfx_pin_interrupt_configure+0x196>
		if (data->trig_edge & BIT(pin)) {
   264b2:	f8d8 3014 	ldr.w	r3, [r8, #20]
   264b6:	40eb      	lsrs	r3, r5
   264b8:	f013 0401 	ands.w	r4, r3, #1
   264bc:	d05e      	beq.n	2657c <gpio_nrfx_pin_interrupt_configure+0x1bc>
			if (data->double_edge & BIT(pin)) {
   264be:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   264c2:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   264c4:	40eb      	lsrs	r3, r5
   264c6:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   264c8:	bf48      	it	mi
   264ca:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   264cc:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   264d0:	bf5f      	itttt	pl
   264d2:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   264d6:	fa21 f505 	lsrpl.w	r5, r1, r5
   264da:	f005 0501 	andpl.w	r5, r5, #1
   264de:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   264e2:	492f      	ldr	r1, [pc, #188]	; (265a0 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   264e4:	bf58      	it	pl
   264e6:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   264e8:	fa0c f402 	lsl.w	r4, ip, r2
   264ec:	e8d1 0fef 	ldaex	r0, [r1]
   264f0:	ea40 0304 	orr.w	r3, r0, r4
   264f4:	e8c1 3fee 	stlex	lr, r3, [r1]
   264f8:	f1be 0f00 	cmp.w	lr, #0
   264fc:	d1f6      	bne.n	264ec <gpio_nrfx_pin_interrupt_configure+0x12c>
		if ((prev & BIT(channel)) == 0) {
   264fe:	40d0      	lsrs	r0, r2
   26500:	f010 0301 	ands.w	r3, r0, #1
   26504:	d133      	bne.n	2656e <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   26506:	0091      	lsls	r1, r2, #2
   26508:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   2650c:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   26510:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   26514:	3240      	adds	r2, #64	; 0x40
   26516:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   2651a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   2651e:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   26522:	023f      	lsls	r7, r7, #8
   26524:	0092      	lsls	r2, r2, #2
   26526:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   2652a:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   2652e:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   26530:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   26534:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   26538:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2653c:	4307      	orrs	r7, r0
   2653e:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   26542:	6013      	str	r3, [r2, #0]
   26544:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   26546:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   2654a:	f042 0201 	orr.w	r2, r2, #1
   2654e:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   26552:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   26556:	4618      	mov	r0, r3
   26558:	e00e      	b.n	26578 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2655a:	2001      	movs	r0, #1
   2655c:	40a8      	lsls	r0, r5
   2655e:	ea21 0100 	bic.w	r1, r1, r0
   26562:	e751      	b.n	26408 <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   26564:	3301      	adds	r3, #1
   26566:	2b08      	cmp	r3, #8
   26568:	f47f af74 	bne.w	26454 <gpio_nrfx_pin_interrupt_configure+0x94>
   2656c:	e797      	b.n	2649e <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   2656e:	3201      	adds	r2, #1
   26570:	2a08      	cmp	r2, #8
   26572:	d1b9      	bne.n	264e8 <gpio_nrfx_pin_interrupt_configure+0x128>
	return -ENODEV;
   26574:	f06f 0012 	mvn.w	r0, #18
}
   26578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2657c:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   26580:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   26582:	40e9      	lsrs	r1, r5
   26584:	f001 0101 	and.w	r1, r1, #1
   26588:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2658c:	b2c9      	uxtb	r1, r1
   2658e:	f7ff fe95 	bl	262bc <nrf_gpio_cfg_sense_set>
	int res = 0;
   26592:	4620      	mov	r0, r4
   26594:	e7f0      	b.n	26578 <gpio_nrfx_pin_interrupt_configure+0x1b8>
   26596:	bf00      	nop
   26598:	40842500 	.word	0x40842500
   2659c:	40031000 	.word	0x40031000
   265a0:	200235d8 	.word	0x200235d8

000265a4 <gpiote_event_handler>:
{
   265a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   265a8:	4f3f      	ldr	r7, [pc, #252]	; (266a8 <gpiote_event_handler+0x104>)
   265aa:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   265ac:	2e00      	cmp	r6, #0
   265ae:	d04f      	beq.n	26650 <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
   265b0:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   265b4:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   265b8:	4b3c      	ldr	r3, [pc, #240]	; (266ac <gpiote_event_handler+0x108>)
   265ba:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   265bc:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   265c0:	430a      	orrs	r2, r1
   265c2:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   265c6:	4a3a      	ldr	r2, [pc, #232]	; (266b0 <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   265c8:	691b      	ldr	r3, [r3, #16]
   265ca:	6914      	ldr	r4, [r2, #16]
   265cc:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   265ce:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   265d2:	bb75      	cbnz	r5, 26632 <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   265d4:	603d      	str	r5, [r7, #0]
   265d6:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   265d8:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   265da:	2501      	movs	r5, #1
   265dc:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   265de:	4835      	ldr	r0, [pc, #212]	; (266b4 <gpiote_event_handler+0x110>)
   265e0:	4935      	ldr	r1, [pc, #212]	; (266b8 <gpiote_event_handler+0x114>)
   265e2:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   265e6:	fa05 fc03 	lsl.w	ip, r5, r3
   265ea:	ea1c 0f02 	tst.w	ip, r2
   265ee:	d00f      	beq.n	26610 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   265f0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   265f4:	b162      	cbz	r2, 26610 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   265f6:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   265fa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   265fe:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   26602:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   26606:	fa05 f202 	lsl.w	r2, r5, r2
   2660a:	4314      	orrs	r4, r2
   2660c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   26610:	3301      	adds	r3, #1
   26612:	2b08      	cmp	r3, #8
   26614:	d1e5      	bne.n	265e2 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   26616:	b9ec      	cbnz	r4, 26654 <gpiote_event_handler+0xb0>
	if (port_event) {
   26618:	b14e      	cbz	r6, 2662e <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
   2661a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2661c:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   2661e:	4d23      	ldr	r5, [pc, #140]	; (266ac <gpiote_event_handler+0x108>)
   26620:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   26622:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   26626:	430a      	orrs	r2, r1
   26628:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   2662c:	bb54      	cbnz	r4, 26684 <gpiote_event_handler+0xe0>
}
   2662e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   26632:	ea15 0f08 	tst.w	r5, r8
   26636:	d006      	beq.n	26646 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   26638:	2100      	movs	r1, #0
   2663a:	f009 001f 	and.w	r0, r9, #31
   2663e:	f7ff fe3d 	bl	262bc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   26642:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   26646:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   2664a:	ea4f 0848 	mov.w	r8, r8, lsl #1
   2664e:	e7c0      	b.n	265d2 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   26650:	4634      	mov	r4, r6
   26652:	e7c1      	b.n	265d8 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   26654:	4b15      	ldr	r3, [pc, #84]	; (266ac <gpiote_event_handler+0x108>)
   26656:	6859      	ldr	r1, [r3, #4]
   26658:	2900      	cmp	r1, #0
   2665a:	d0dd      	beq.n	26618 <gpiote_event_handler+0x74>
	return node->next;
   2665c:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2665e:	4f17      	ldr	r7, [pc, #92]	; (266bc <gpiote_event_handler+0x118>)
   26660:	2d00      	cmp	r5, #0
   26662:	bf38      	it	cc
   26664:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   26666:	688a      	ldr	r2, [r1, #8]
   26668:	4022      	ands	r2, r4
   2666a:	d002      	beq.n	26672 <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
   2666c:	4638      	mov	r0, r7
   2666e:	684b      	ldr	r3, [r1, #4]
   26670:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   26672:	2d00      	cmp	r5, #0
   26674:	d0d0      	beq.n	26618 <gpiote_event_handler+0x74>
   26676:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26678:	4629      	mov	r1, r5
   2667a:	2b00      	cmp	r3, #0
   2667c:	bf38      	it	cc
   2667e:	2300      	movcc	r3, #0
   26680:	461d      	mov	r5, r3
   26682:	e7f0      	b.n	26666 <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
   26684:	4226      	tst	r6, r4
   26686:	d00c      	beq.n	266a2 <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   26688:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2668a:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2668e:	40f9      	lsrs	r1, r7
   26690:	f001 0101 	and.w	r1, r1, #1
   26694:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   26698:	b2c9      	uxtb	r1, r1
   2669a:	f7ff fe0f 	bl	262bc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2669e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   266a2:	3701      	adds	r7, #1
		bit <<= 1;
   266a4:	0076      	lsls	r6, r6, #1
   266a6:	e7c1      	b.n	2662c <gpiote_event_handler+0x88>
   266a8:	4003117c 	.word	0x4003117c
   266ac:	200235bc 	.word	0x200235bc
   266b0:	40842500 	.word	0x40842500
   266b4:	40031000 	.word	0x40031000
   266b8:	40031100 	.word	0x40031100
   266bc:	200206cc 	.word	0x200206cc

000266c0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   266c0:	4b02      	ldr	r3, [pc, #8]	; (266cc <flash_nrf_pages_layout+0xc>)
   266c2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   266c4:	2301      	movs	r3, #1
   266c6:	6013      	str	r3, [r2, #0]
}
   266c8:	4770      	bx	lr
   266ca:	bf00      	nop
   266cc:	200235dc 	.word	0x200235dc

000266d0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   266d0:	4800      	ldr	r0, [pc, #0]	; (266d4 <flash_nrf_get_parameters+0x4>)
   266d2:	4770      	bx	lr
   266d4:	00039f1c 	.word	0x00039f1c

000266d8 <flash_nrf_read>:
{
   266d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   266da:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   266dc:	4619      	mov	r1, r3
   266de:	4620      	mov	r0, r4
{
   266e0:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   266e2:	9301      	str	r3, [sp, #4]
   266e4:	f010 fd1d 	bl	37122 <is_regular_addr_valid>
   266e8:	9a01      	ldr	r2, [sp, #4]
   266ea:	b970      	cbnz	r0, 2670a <flash_nrf_read+0x32>
   266ec:	490f      	ldr	r1, [pc, #60]	; (2672c <flash_nrf_read+0x54>)
   266ee:	4b10      	ldr	r3, [pc, #64]	; (26730 <flash_nrf_read+0x58>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   266f0:	4810      	ldr	r0, [pc, #64]	; (26734 <flash_nrf_read+0x5c>)
   266f2:	1a5b      	subs	r3, r3, r1
   266f4:	08db      	lsrs	r3, r3, #3
   266f6:	019b      	lsls	r3, r3, #6
   266f8:	4621      	mov	r1, r4
   266fa:	f043 0301 	orr.w	r3, r3, #1
   266fe:	f00f fcb5 	bl	3606c <log_2>
		return -EINVAL;
   26702:	f06f 0015 	mvn.w	r0, #21
}
   26706:	b003      	add	sp, #12
   26708:	bd30      	pop	{r4, r5, pc}
	if (!len) {
   2670a:	b16a      	cbz	r2, 26728 <flash_nrf_read+0x50>
	if (addr < PM_APP_ADDRESS) {
   2670c:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   26710:	4621      	mov	r1, r4
   26712:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   26714:	da04      	bge.n	26720 <flash_nrf_read+0x48>
}
   26716:	b003      	add	sp, #12
   26718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return spm_request_read(data, addr, len);
   2671c:	f010 bae8 	b.w	36cf0 <spm_request_read>
   26720:	f012 fa0d 	bl	38b3e <memcpy>
	return 0;
   26724:	2000      	movs	r0, #0
   26726:	e7ee      	b.n	26706 <flash_nrf_read+0x2e>
		return 0;
   26728:	4610      	mov	r0, r2
   2672a:	e7ec      	b.n	26706 <flash_nrf_read+0x2e>
   2672c:	00039a50 	.word	0x00039a50
   26730:	00039ab0 	.word	0x00039ab0
   26734:	0003bfc0 	.word	0x0003bfc0

00026738 <flash_nrf_erase>:
{
   26738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2673a:	460d      	mov	r5, r1
   2673c:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2673e:	f011 fceb 	bl	38118 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   26742:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   26744:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   26746:	4628      	mov	r0, r5
   26748:	f010 fceb 	bl	37122 <is_regular_addr_valid>
   2674c:	462f      	mov	r7, r5
   2674e:	b378      	cbz	r0, 267b0 <flash_nrf_erase+0x78>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   26750:	fbb5 f3f6 	udiv	r3, r5, r6
   26754:	fb06 5313 	mls	r3, r6, r3, r5
   26758:	b923      	cbnz	r3, 26764 <flash_nrf_erase+0x2c>
   2675a:	fbb4 f2f6 	udiv	r2, r4, r6
   2675e:	fb06 4012 	mls	r0, r6, r2, r4
   26762:	b170      	cbz	r0, 26782 <flash_nrf_erase+0x4a>
   26764:	4a18      	ldr	r2, [pc, #96]	; (267c8 <flash_nrf_erase+0x90>)
   26766:	4b19      	ldr	r3, [pc, #100]	; (267cc <flash_nrf_erase+0x94>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   26768:	4629      	mov	r1, r5
   2676a:	1a9b      	subs	r3, r3, r2
   2676c:	4622      	mov	r2, r4
   2676e:	08db      	lsrs	r3, r3, #3
   26770:	019b      	lsls	r3, r3, #6
   26772:	4817      	ldr	r0, [pc, #92]	; (267d0 <flash_nrf_erase+0x98>)
   26774:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("invalid address: 0x%08lx:%zu",
   26778:	f00f fc78 	bl	3606c <log_2>
		return -EINVAL;
   2677c:	f06f 0015 	mvn.w	r0, #21
   26780:	e015      	b.n	267ae <flash_nrf_erase+0x76>
		if (!n_pages) {
   26782:	42a6      	cmp	r6, r4
   26784:	d813      	bhi.n	267ae <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   26786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2678a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2678e:	4811      	ldr	r0, [pc, #68]	; (267d4 <flash_nrf_erase+0x9c>)
   26790:	f00d fbac 	bl	33eec <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   26794:	f011 fcc0 	bl	38118 <nrfx_nvmc_flash_page_size_get>
   26798:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2679a:	4638      	mov	r0, r7
   2679c:	f00c fafe 	bl	32d9c <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   267a0:	1b64      	subs	r4, r4, r5
   267a2:	442f      	add	r7, r5
   267a4:	d1f9      	bne.n	2679a <flash_nrf_erase+0x62>
	z_impl_k_sem_give(sem);
   267a6:	480b      	ldr	r0, [pc, #44]	; (267d4 <flash_nrf_erase+0x9c>)
   267a8:	f00d fb7a 	bl	33ea0 <z_impl_k_sem_give>
	return ret;
   267ac:	4620      	mov	r0, r4
}
   267ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   267b0:	4a05      	ldr	r2, [pc, #20]	; (267c8 <flash_nrf_erase+0x90>)
   267b2:	4b06      	ldr	r3, [pc, #24]	; (267cc <flash_nrf_erase+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   267b4:	4629      	mov	r1, r5
   267b6:	1a9b      	subs	r3, r3, r2
   267b8:	08db      	lsrs	r3, r3, #3
   267ba:	019b      	lsls	r3, r3, #6
   267bc:	4622      	mov	r2, r4
   267be:	4806      	ldr	r0, [pc, #24]	; (267d8 <flash_nrf_erase+0xa0>)
   267c0:	f043 0301 	orr.w	r3, r3, #1
   267c4:	e7d8      	b.n	26778 <flash_nrf_erase+0x40>
   267c6:	bf00      	nop
   267c8:	00039a50 	.word	0x00039a50
   267cc:	00039ab0 	.word	0x00039ab0
   267d0:	0003bfdd 	.word	0x0003bfdd
   267d4:	200235e4 	.word	0x200235e4
   267d8:	0003bfc0 	.word	0x0003bfc0

000267dc <nrf_flash_init>:
{
   267dc:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   267de:	2201      	movs	r2, #1
   267e0:	4806      	ldr	r0, [pc, #24]	; (267fc <nrf_flash_init+0x20>)
   267e2:	4611      	mov	r1, r2
   267e4:	f011 fee6 	bl	385b4 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   267e8:	f011 fc99 	bl	3811e <nrfx_nvmc_flash_page_count_get>
   267ec:	4c04      	ldr	r4, [pc, #16]	; (26800 <nrf_flash_init+0x24>)
   267ee:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   267f0:	f011 fc92 	bl	38118 <nrfx_nvmc_flash_page_size_get>
   267f4:	6060      	str	r0, [r4, #4]
}
   267f6:	2000      	movs	r0, #0
   267f8:	bd10      	pop	{r4, pc}
   267fa:	bf00      	nop
   267fc:	200235e4 	.word	0x200235e4
   26800:	200235dc 	.word	0x200235dc

00026804 <flash_nrf_write>:
{
   26804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26806:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   26808:	4619      	mov	r1, r3
   2680a:	4630      	mov	r0, r6
{
   2680c:	4617      	mov	r7, r2
   2680e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   26810:	f010 fc87 	bl	37122 <is_regular_addr_valid>
   26814:	b970      	cbnz	r0, 26834 <flash_nrf_write+0x30>
   26816:	4a1f      	ldr	r2, [pc, #124]	; (26894 <flash_nrf_write+0x90>)
   26818:	4b1f      	ldr	r3, [pc, #124]	; (26898 <flash_nrf_write+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2681a:	4631      	mov	r1, r6
   2681c:	1a9b      	subs	r3, r3, r2
   2681e:	4622      	mov	r2, r4
   26820:	08db      	lsrs	r3, r3, #3
   26822:	019b      	lsls	r3, r3, #6
   26824:	481d      	ldr	r0, [pc, #116]	; (2689c <flash_nrf_write+0x98>)
   26826:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2682a:	f00f fc1f 	bl	3606c <log_2>
		return -EINVAL;
   2682e:	f06f 0015 	mvn.w	r0, #21
}
   26832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   26834:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   26838:	f015 0503 	ands.w	r5, r5, #3
   2683c:	d00a      	beq.n	26854 <flash_nrf_write+0x50>
   2683e:	4a15      	ldr	r2, [pc, #84]	; (26894 <flash_nrf_write+0x90>)
   26840:	4b15      	ldr	r3, [pc, #84]	; (26898 <flash_nrf_write+0x94>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   26842:	4631      	mov	r1, r6
   26844:	1a9b      	subs	r3, r3, r2
   26846:	08db      	lsrs	r3, r3, #3
   26848:	019b      	lsls	r3, r3, #6
   2684a:	4622      	mov	r2, r4
   2684c:	4814      	ldr	r0, [pc, #80]	; (268a0 <flash_nrf_write+0x9c>)
   2684e:	f043 0301 	orr.w	r3, r3, #1
   26852:	e7ea      	b.n	2682a <flash_nrf_write+0x26>
	if (!len) {
   26854:	b1dc      	cbz	r4, 2688e <flash_nrf_write+0x8a>
	return z_impl_k_sem_take(sem, timeout);
   26856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2685a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2685e:	4811      	ldr	r0, [pc, #68]	; (268a4 <flash_nrf_write+0xa0>)
   26860:	f00d fb44 	bl	33eec <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   26864:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   26868:	42a5      	cmp	r5, r4
   2686a:	eb05 0006 	add.w	r0, r5, r6
   2686e:	d109      	bne.n	26884 <flash_nrf_write+0x80>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   26870:	4a0d      	ldr	r2, [pc, #52]	; (268a8 <flash_nrf_write+0xa4>)
   26872:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   26876:	07db      	lsls	r3, r3, #31
   26878:	d5fb      	bpl.n	26872 <flash_nrf_write+0x6e>
	z_impl_k_sem_give(sem);
   2687a:	480a      	ldr	r0, [pc, #40]	; (268a4 <flash_nrf_write+0xa0>)
   2687c:	f00d fb10 	bl	33ea0 <z_impl_k_sem_give>
	return ret;
   26880:	2000      	movs	r0, #0
}
   26882:	e7d6      	b.n	26832 <flash_nrf_write+0x2e>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   26884:	5979      	ldr	r1, [r7, r5]
   26886:	f00c faa5 	bl	32dd4 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   2688a:	3504      	adds	r5, #4
}
   2688c:	e7ec      	b.n	26868 <flash_nrf_write+0x64>
		return 0;
   2688e:	4620      	mov	r0, r4
   26890:	e7cf      	b.n	26832 <flash_nrf_write+0x2e>
   26892:	bf00      	nop
   26894:	00039a50 	.word	0x00039a50
   26898:	00039ab0 	.word	0x00039ab0
   2689c:	0003bfc0 	.word	0x0003bfc0
   268a0:	0003bffc 	.word	0x0003bffc
   268a4:	200235e4 	.word	0x200235e4
   268a8:	40039000 	.word	0x40039000

000268ac <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   268ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   268ae:	794b      	ldrb	r3, [r1, #5]
   268b0:	2b01      	cmp	r3, #1
   268b2:	d029      	beq.n	26908 <uarte_nrfx_configure+0x5c>
   268b4:	2b03      	cmp	r3, #3
   268b6:	d124      	bne.n	26902 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   268b8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   268ba:	798b      	ldrb	r3, [r1, #6]
   268bc:	2b03      	cmp	r3, #3
   268be:	d120      	bne.n	26902 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   268c0:	79cc      	ldrb	r4, [r1, #7]
   268c2:	b124      	cbz	r4, 268ce <uarte_nrfx_configure+0x22>
   268c4:	2c01      	cmp	r4, #1
   268c6:	d11c      	bne.n	26902 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   268c8:	6843      	ldr	r3, [r0, #4]
   268ca:	791b      	ldrb	r3, [r3, #4]
   268cc:	b1cb      	cbz	r3, 26902 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   268ce:	790a      	ldrb	r2, [r1, #4]
   268d0:	b112      	cbz	r2, 268d8 <uarte_nrfx_configure+0x2c>
   268d2:	2a02      	cmp	r2, #2
   268d4:	d115      	bne.n	26902 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   268d6:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   268d8:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   268da:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   268dc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   268e0:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   268e2:	d065      	beq.n	269b0 <uarte_nrfx_configure+0x104>
   268e4:	d82d      	bhi.n	26942 <uarte_nrfx_configure+0x96>
   268e6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   268ea:	d064      	beq.n	269b6 <uarte_nrfx_configure+0x10a>
   268ec:	d816      	bhi.n	2691c <uarte_nrfx_configure+0x70>
   268ee:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   268f2:	d062      	beq.n	269ba <uarte_nrfx_configure+0x10e>
   268f4:	d80a      	bhi.n	2690c <uarte_nrfx_configure+0x60>
   268f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   268fa:	d061      	beq.n	269c0 <uarte_nrfx_configure+0x114>
   268fc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   26900:	d061      	beq.n	269c6 <uarte_nrfx_configure+0x11a>
   26902:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26906:	e052      	b.n	269ae <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   26908:	2600      	movs	r6, #0
   2690a:	e7d6      	b.n	268ba <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   2690c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   26910:	d05c      	beq.n	269cc <uarte_nrfx_configure+0x120>
   26912:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   26916:	d1f4      	bne.n	26902 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   26918:	4b37      	ldr	r3, [pc, #220]	; (269f8 <uarte_nrfx_configure+0x14c>)
   2691a:	e03c      	b.n	26996 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   2691c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   26920:	d057      	beq.n	269d2 <uarte_nrfx_configure+0x126>
   26922:	d807      	bhi.n	26934 <uarte_nrfx_configure+0x88>
   26924:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   26928:	d055      	beq.n	269d6 <uarte_nrfx_configure+0x12a>
   2692a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   2692e:	d1e8      	bne.n	26902 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   26930:	4b32      	ldr	r3, [pc, #200]	; (269fc <uarte_nrfx_configure+0x150>)
   26932:	e030      	b.n	26996 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   26934:	f647 2712 	movw	r7, #31250	; 0x7a12
   26938:	42bb      	cmp	r3, r7
   2693a:	d1e2      	bne.n	26902 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   2693c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   26940:	e029      	b.n	26996 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   26942:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   26946:	d048      	beq.n	269da <uarte_nrfx_configure+0x12e>
   26948:	d813      	bhi.n	26972 <uarte_nrfx_configure+0xc6>
   2694a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   2694e:	d047      	beq.n	269e0 <uarte_nrfx_configure+0x134>
   26950:	d809      	bhi.n	26966 <uarte_nrfx_configure+0xba>
   26952:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   26956:	42bb      	cmp	r3, r7
   26958:	d044      	beq.n	269e4 <uarte_nrfx_configure+0x138>
   2695a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   2695e:	d1d0      	bne.n	26902 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   26960:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   26964:	e017      	b.n	26996 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   26966:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2696a:	d1ca      	bne.n	26902 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2696c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   26970:	e011      	b.n	26996 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   26972:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   26976:	d038      	beq.n	269ea <uarte_nrfx_configure+0x13e>
   26978:	d808      	bhi.n	2698c <uarte_nrfx_configure+0xe0>
   2697a:	4f21      	ldr	r7, [pc, #132]	; (26a00 <uarte_nrfx_configure+0x154>)
   2697c:	42bb      	cmp	r3, r7
   2697e:	d037      	beq.n	269f0 <uarte_nrfx_configure+0x144>
   26980:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   26984:	d1bd      	bne.n	26902 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   26986:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2698a:	e004      	b.n	26996 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   2698c:	4f1d      	ldr	r7, [pc, #116]	; (26a04 <uarte_nrfx_configure+0x158>)
   2698e:	42bb      	cmp	r3, r7
   26990:	d1b7      	bne.n	26902 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   26992:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   26996:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   2699a:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   2699c:	4334      	orrs	r4, r6
   2699e:	4322      	orrs	r2, r4
   269a0:	3304      	adds	r3, #4
   269a2:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   269a4:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   269a8:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   269ac:	2000      	movs	r0, #0
}
   269ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   269b0:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   269b4:	e7ef      	b.n	26996 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   269b6:	4b14      	ldr	r3, [pc, #80]	; (26a08 <uarte_nrfx_configure+0x15c>)
   269b8:	e7ed      	b.n	26996 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   269ba:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   269be:	e7ea      	b.n	26996 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   269c0:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   269c4:	e7e7      	b.n	26996 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   269c6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   269ca:	e7e4      	b.n	26996 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   269cc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   269d0:	e7e1      	b.n	26996 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   269d2:	4b0e      	ldr	r3, [pc, #56]	; (26a0c <uarte_nrfx_configure+0x160>)
   269d4:	e7df      	b.n	26996 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   269d6:	4b0e      	ldr	r3, [pc, #56]	; (26a10 <uarte_nrfx_configure+0x164>)
   269d8:	e7dd      	b.n	26996 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   269da:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   269de:	e7da      	b.n	26996 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   269e0:	4b0c      	ldr	r3, [pc, #48]	; (26a14 <uarte_nrfx_configure+0x168>)
   269e2:	e7d8      	b.n	26996 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   269e4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   269e8:	e7d5      	b.n	26996 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   269ea:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   269ee:	e7d2      	b.n	26996 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   269f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   269f4:	e7cf      	b.n	26996 <uarte_nrfx_configure+0xea>
   269f6:	bf00      	nop
   269f8:	0013b000 	.word	0x0013b000
   269fc:	004ea000 	.word	0x004ea000
   26a00:	0003d090 	.word	0x0003d090
   26a04:	000f4240 	.word	0x000f4240
   26a08:	00275000 	.word	0x00275000
   26a0c:	0075c000 	.word	0x0075c000
   26a10:	003af000 	.word	0x003af000
   26a14:	013a9000 	.word	0x013a9000

00026a18 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   26a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a1c:	4606      	mov	r6, r0
   26a1e:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   26a20:	68c5      	ldr	r5, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   26a22:	f011 fdd7 	bl	385d4 <k_is_in_isr>
   26a26:	2800      	cmp	r0, #0
   26a28:	d138      	bne.n	26a9c <uarte_nrfx_poll_out+0x84>
	return !z_sys_post_kernel;
   26a2a:	4b31      	ldr	r3, [pc, #196]	; (26af0 <uarte_nrfx_poll_out+0xd8>)
   26a2c:	781b      	ldrb	r3, [r3, #0]
   26a2e:	f083 0301 	eor.w	r3, r3, #1
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	int key;

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
   26a32:	692a      	ldr	r2, [r5, #16]
   26a34:	2a01      	cmp	r2, #1
   26a36:	d12f      	bne.n	26a98 <uarte_nrfx_poll_out+0x80>
	return config->uarte_regs;
   26a38:	6872      	ldr	r2, [r6, #4]
   26a3a:	6814      	ldr	r4, [r2, #0]
		return;
	}
#endif
	if (isr_mode) {
   26a3c:	b3ab      	cbz	r3, 26aaa <uarte_nrfx_poll_out+0x92>
   26a3e:	f04f 0320 	mov.w	r3, #32
   26a42:	f3ef 8811 	mrs	r8, BASEPRI
   26a46:	f383 8811 	msr	BASEPRI, r3
   26a4a:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   26a4e:	4630      	mov	r0, r6
			key = irq_lock();
   26a50:	4641      	mov	r1, r8
			if (is_tx_ready(dev)) {
   26a52:	f010 fbf8 	bl	37246 <is_tx_ready>
   26a56:	b318      	cbz	r0, 26aa0 <uarte_nrfx_poll_out+0x88>
#if CONFIG_UART_ASYNC_API
				if (data->async->tx_size &&
   26a58:	68eb      	ldr	r3, [r5, #12]
   26a5a:	68da      	ldr	r2, [r3, #12]
   26a5c:	b13a      	cbz	r2, 26a6e <uarte_nrfx_poll_out+0x56>
					data->async->tx_amount < 0) {
   26a5e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
				if (data->async->tx_size &&
   26a62:	2a00      	cmp	r2, #0
   26a64:	da03      	bge.n	26a6e <uarte_nrfx_poll_out+0x56>
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
   26a66:	f8d4 254c 	ldr.w	r2, [r4, #1356]	; 0x54c
					data->async->tx_amount =
   26a6a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_reg->TXD.MAXCNT = length;
   26a6e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26a70:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   26a72:	f805 7f14 	strb.w	r7, [r5, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26a76:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26a7a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26a7e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   26a82:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   26a86:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   26a8a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26a8e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   26a90:	f381 8811 	msr	BASEPRI, r1
   26a94:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   26a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   26a9c:	2301      	movs	r3, #1
   26a9e:	e7c8      	b.n	26a32 <uarte_nrfx_poll_out+0x1a>
   26aa0:	f388 8811 	msr	BASEPRI, r8
   26aa4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   26aa8:	e7c9      	b.n	26a3e <uarte_nrfx_poll_out+0x26>
   26aaa:	f04f 0864 	mov.w	r8, #100	; 0x64
			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   26aae:	4630      	mov	r0, r6
   26ab0:	f010 fbc9 	bl	37246 <is_tx_ready>
   26ab4:	b950      	cbnz	r0, 26acc <uarte_nrfx_poll_out+0xb4>
   26ab6:	2001      	movs	r0, #1
   26ab8:	f011 fb1e 	bl	380f8 <nrfx_busy_wait>
   26abc:	f1b8 0801 	subs.w	r8, r8, #1
   26ac0:	d1f5      	bne.n	26aae <uarte_nrfx_poll_out+0x96>
	return z_impl_k_sleep(timeout);
   26ac2:	2100      	movs	r1, #0
   26ac4:	2021      	movs	r0, #33	; 0x21
   26ac6:	f00d f9c5 	bl	33e54 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   26aca:	e7ee      	b.n	26aaa <uarte_nrfx_poll_out+0x92>
	__asm__ volatile(
   26acc:	f04f 0320 	mov.w	r3, #32
   26ad0:	f3ef 8111 	mrs	r1, BASEPRI
   26ad4:	f383 8811 	msr	BASEPRI, r3
   26ad8:	f3bf 8f6f 	isb	sy
				if (is_tx_ready(dev)) {
   26adc:	4630      	mov	r0, r6
   26ade:	f010 fbb2 	bl	37246 <is_tx_ready>
   26ae2:	2800      	cmp	r0, #0
   26ae4:	d1c3      	bne.n	26a6e <uarte_nrfx_poll_out+0x56>
	__asm__ volatile(
   26ae6:	f381 8811 	msr	BASEPRI, r1
   26aea:	f3bf 8f6f 	isb	sy
}
   26aee:	e7e8      	b.n	26ac2 <uarte_nrfx_poll_out+0xaa>
   26af0:	2002c6e7 	.word	0x2002c6e7

00026af4 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   26af4:	6843      	ldr	r3, [r0, #4]
{
   26af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return config->uarte_regs;
   26afa:	681d      	ldr	r5, [r3, #0]
	if (!hw_rx_counting_enabled(data)
   26afc:	68c3      	ldr	r3, [r0, #12]
{
   26afe:	4604      	mov	r4, r0
	if (!hw_rx_counting_enabled(data)
   26b00:	68db      	ldr	r3, [r3, #12]
{
   26b02:	b088      	sub	sp, #32
	if (!hw_rx_counting_enabled(data)
   26b04:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   26b08:	b972      	cbnz	r2, 26b28 <uarte_nrfx_isr_async+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b0a:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   26b0e:	b159      	cbz	r1, 26b28 <uarte_nrfx_isr_async+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b10:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   26b14:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   26b18:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   26b1c:	3201      	adds	r2, #1
   26b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
   26b22:	b008      	add	sp, #32
   26b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b28:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   26b2c:	b31b      	cbz	r3, 26b76 <uarte_nrfx_isr_async+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b2e:	2100      	movs	r1, #0
   26b30:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   26b34:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26b38:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   26b3c:	2214      	movs	r2, #20
    p_reg->ERRORSRC = errsrc_mask;
   26b3e:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
   26b42:	a803      	add	r0, sp, #12
   26b44:	f012 f81b 	bl	38b7e <memset>
   26b48:	2306      	movs	r3, #6
   26b4a:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   26b4e:	07f3      	lsls	r3, r6, #31
   26b50:	f100 80f1 	bmi.w	26d36 <uarte_nrfx_isr_async+0x242>
   26b54:	07b7      	lsls	r7, r6, #30
   26b56:	f100 80f0 	bmi.w	26d3a <uarte_nrfx_isr_async+0x246>
   26b5a:	0770      	lsls	r0, r6, #29
   26b5c:	f100 80ef 	bmi.w	26d3e <uarte_nrfx_isr_async+0x24a>
   26b60:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   26b64:	4620      	mov	r0, r4
   26b66:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   26b68:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   26b6c:	f010 fbd7 	bl	3731e <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   26b70:	4620      	mov	r0, r4
   26b72:	f010 fcd0 	bl	37516 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b76:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26b7a:	b1eb      	cbz	r3, 26bb8 <uarte_nrfx_isr_async+0xc4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b7c:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   26b7e:	68e6      	ldr	r6, [r4, #12]
   26b80:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   26b84:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (!data->async->rx_enabled) {
   26b88:	68f0      	ldr	r0, [r6, #12]
	return config->uarte_regs;
   26b8a:	6863      	ldr	r3, [r4, #4]
   26b8c:	f8d3 8000 	ldr.w	r8, [r3]
	if (!data->async->rx_enabled) {
   26b90:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
   26b94:	2b00      	cmp	r3, #0
   26b96:	f040 80d4 	bne.w	26d42 <uarte_nrfx_isr_async+0x24e>
		if (data->async->rx_buf == NULL) {
   26b9a:	6d01      	ldr	r1, [r0, #80]	; 0x50
   26b9c:	2900      	cmp	r1, #0
   26b9e:	f040 80d0 	bne.w	26d42 <uarte_nrfx_isr_async+0x24e>
			struct uart_event evt = {
   26ba2:	2214      	movs	r2, #20
   26ba4:	a803      	add	r0, sp, #12
   26ba6:	f011 ffea 	bl	38b7e <memset>
   26baa:	2305      	movs	r3, #5
			user_callback(dev, &evt);
   26bac:	4620      	mov	r0, r4
   26bae:	a903      	add	r1, sp, #12
			struct uart_event evt = {
   26bb0:	f88d 300c 	strb.w	r3, [sp, #12]
			user_callback(dev, &evt);
   26bb4:	f010 fbb3 	bl	3731e <user_callback>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26bb8:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   26bbc:	b37b      	cbz	r3, 26c1e <uarte_nrfx_isr_async+0x12a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26bbe:	2100      	movs	r1, #0
	struct uart_event evt = {
   26bc0:	2214      	movs	r2, #20
   26bc2:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
   26bc6:	a803      	add	r0, sp, #12
   26bc8:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   26bcc:	68e6      	ldr	r6, [r4, #12]
	struct uart_event evt = {
   26bce:	f011 ffd6 	bl	38b7e <memset>
   26bd2:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   26bd4:	a903      	add	r1, sp, #12
   26bd6:	4620      	mov	r0, r4
	struct uart_event evt = {
   26bd8:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   26bdc:	f010 fb9f 	bl	3731e <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_MS) {
   26be0:	68f6      	ldr	r6, [r6, #12]
   26be2:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   26be4:	1c59      	adds	r1, r3, #1
   26be6:	d01a      	beq.n	26c1e <uarte_nrfx_isr_async+0x12a>
   26be8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   26bec:	f240 38e7 	movw	r8, #999	; 0x3e7
   26bf0:	f04f 0900 	mov.w	r9, #0
		data->async->rx_timeout_left = data->async->rx_timeout;
   26bf4:	6773      	str	r3, [r6, #116]	; 0x74
			      K_MSEC(data->async->rx_timeout_slab),
   26bf6:	6f33      	ldr	r3, [r6, #112]	; 0x70
   26bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26bfc:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   26c00:	fbc0 8901 	smlal	r8, r9, r0, r1
   26c04:	2300      	movs	r3, #0
   26c06:	4640      	mov	r0, r8
   26c08:	4649      	mov	r1, r9
   26c0a:	f7f5 fdd5 	bl	1c7b8 <__aeabi_uldivmod>
   26c0e:	4602      	mov	r2, r0
   26c10:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   26c12:	e9cd 0100 	strd	r0, r1, [sp]
   26c16:	f106 0078 	add.w	r0, r6, #120	; 0x78
   26c1a:	f00d fc7b 	bl	34514 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26c1e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO)) {
   26c22:	b363      	cbz	r3, 26c7e <uarte_nrfx_isr_async+0x18a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26c24:	2600      	movs	r6, #0
	struct uart_event evt = {
   26c26:	f04f 0804 	mov.w	r8, #4
	struct uarte_nrfx_data *data = get_dev_data(dev);
   26c2a:	68e7      	ldr	r7, [r4, #12]
	struct uart_event evt = {
   26c2c:	2214      	movs	r2, #20
   26c2e:	4631      	mov	r1, r6
   26c30:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
   26c34:	a803      	add	r0, sp, #12
   26c36:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   26c3a:	f011 ffa0 	bl	38b7e <memset>
   26c3e:	f88d 800c 	strb.w	r8, [sp, #12]
		.data.rx_buf.buf = data->async->rx_buf,
   26c42:	68fb      	ldr	r3, [r7, #12]
	user_callback(dev, &evt);
   26c44:	4620      	mov	r0, r4
	struct uart_event evt = {
   26c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
	user_callback(dev, &evt);
   26c48:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   26c4a:	9304      	str	r3, [sp, #16]
	user_callback(dev, &evt);
   26c4c:	f010 fb67 	bl	3731e <user_callback>
	data->async->rx_buf = NULL;
   26c50:	68fb      	ldr	r3, [r7, #12]
   26c52:	651e      	str	r6, [r3, #80]	; 0x50
	if (data->async->rx_next_buf) {
   26c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   26c56:	b143      	cbz	r3, 26c6a <uarte_nrfx_isr_async+0x176>
		user_callback(dev, &evt);
   26c58:	4620      	mov	r0, r4
   26c5a:	a903      	add	r1, sp, #12
		evt.data.rx_buf.buf = data->async->rx_next_buf;
   26c5c:	9304      	str	r3, [sp, #16]
		evt.type = UART_RX_BUF_RELEASED;
   26c5e:	f88d 800c 	strb.w	r8, [sp, #12]
		user_callback(dev, &evt);
   26c62:	f010 fb5c 	bl	3731e <user_callback>
		data->async->rx_next_buf = NULL;
   26c66:	68fb      	ldr	r3, [r7, #12]
   26c68:	65de      	str	r6, [r3, #92]	; 0x5c
	return config->uarte_regs;
   26c6a:	6863      	ldr	r3, [r4, #4]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   26c6c:	4a86      	ldr	r2, [pc, #536]	; (26e88 <uarte_nrfx_isr_async+0x394>)
   26c6e:	681b      	ldr	r3, [r3, #0]
   26c70:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   26c74:	2205      	movs	r2, #5
   26c76:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26c7a:	2201      	movs	r2, #1
   26c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26c7e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   26c82:	b1db      	cbz	r3, 26cbc <uarte_nrfx_isr_async+0x1c8>
    return p_reg->INTENSET & mask;
   26c84:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   26c88:	05da      	lsls	r2, r3, #23
   26c8a:	d517      	bpl.n	26cbc <uarte_nrfx_isr_async+0x1c8>
	return config->uarte_regs;
   26c8c:	6863      	ldr	r3, [r4, #4]
   26c8e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   26c90:	f04f 0120 	mov.w	r1, #32
   26c94:	f3ef 8211 	mrs	r2, BASEPRI
   26c98:	f381 8811 	msr	BASEPRI, r1
   26c9c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26ca0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   26ca4:	b131      	cbz	r1, 26cb4 <uarte_nrfx_isr_async+0x1c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26ca6:	2100      	movs	r1, #0
   26ca8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   26cac:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26cb0:	2101      	movs	r1, #1
   26cb2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   26cb4:	f382 8811 	msr	BASEPRI, r2
   26cb8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26cbc:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   26cc0:	2b00      	cmp	r3, #0
   26cc2:	f43f af2e 	beq.w	26b22 <uarte_nrfx_isr_async+0x2e>
    return p_reg->INTENSET & mask;
   26cc6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   26cca:	025b      	lsls	r3, r3, #9
   26ccc:	f57f af29 	bpl.w	26b22 <uarte_nrfx_isr_async+0x2e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   26cd0:	68e7      	ldr	r7, [r4, #12]
	return config->uarte_regs;
   26cd2:	6863      	ldr	r3, [r4, #4]
	if (!data->async->tx_buf) {
   26cd4:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
   26cd6:	681d      	ldr	r5, [r3, #0]
	if (!data->async->tx_buf) {
   26cd8:	6882      	ldr	r2, [r0, #8]
   26cda:	2a00      	cmp	r2, #0
   26cdc:	f040 80a1 	bne.w	26e22 <uarte_nrfx_isr_async+0x32e>
		if (data->async->pend_tx_buf) {
   26ce0:	6903      	ldr	r3, [r0, #16]
   26ce2:	2b00      	cmp	r3, #0
   26ce4:	f43f af1d 	beq.w	26b22 <uarte_nrfx_isr_async+0x2e>
	__asm__ volatile(
   26ce8:	f04f 0320 	mov.w	r3, #32
   26cec:	f3ef 8011 	mrs	r0, BASEPRI
   26cf0:	f383 8811 	msr	BASEPRI, r3
   26cf4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26cf8:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
			if (nrf_uarte_event_check(uarte,
   26cfc:	b1b3      	cbz	r3, 26d2c <uarte_nrfx_isr_async+0x238>
				data->async->tx_amount = -1;
   26cfe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
				data->async->tx_buf = data->async->pend_tx_buf;
   26d02:	68fb      	ldr	r3, [r7, #12]
   26d04:	6919      	ldr	r1, [r3, #16]
				data->async->tx_amount = -1;
   26d06:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
				data->async->tx_buf = data->async->pend_tx_buf;
   26d0a:	6099      	str	r1, [r3, #8]
				data->async->pend_tx_buf = NULL;
   26d0c:	611a      	str	r2, [r3, #16]
				tx_start(uarte, data->async->tx_buf,
   26d0e:	68db      	ldr	r3, [r3, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26d10:	f8c5 1544 	str.w	r1, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26d14:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26d18:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   26d1c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   26d20:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   26d24:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26d28:	2301      	movs	r3, #1
   26d2a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   26d2c:	f380 8811 	msr	BASEPRI, r0
   26d30:	f3bf 8f6f 	isb	sy
}
   26d34:	e6f5      	b.n	26b22 <uarte_nrfx_isr_async+0x2e>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   26d36:	2601      	movs	r6, #1
   26d38:	e714      	b.n	26b64 <uarte_nrfx_isr_async+0x70>
   26d3a:	2602      	movs	r6, #2
   26d3c:	e712      	b.n	26b64 <uarte_nrfx_isr_async+0x70>
   26d3e:	2604      	movs	r6, #4
   26d40:	e710      	b.n	26b64 <uarte_nrfx_isr_async+0x70>
	data->async->is_in_irq = true;
   26d42:	2301      	movs	r3, #1
   26d44:	f880 30ba 	strb.w	r3, [r0, #186]	; 0xba
	z_impl_k_timer_stop(timer);
   26d48:	3078      	adds	r0, #120	; 0x78
   26d4a:	f011 fd2f 	bl	387ac <z_impl_k_timer_stop>
	int rx_len = rx_amount - data->async->rx_offset;
   26d4e:	68f7      	ldr	r7, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   26d50:	f8d8 353c 	ldr.w	r3, [r8, #1340]	; 0x53c
   26d54:	f8d7 9058 	ldr.w	r9, [r7, #88]	; 0x58
	data->async->rx_total_user_byte_cnt += rx_len;
   26d58:	6eba      	ldr	r2, [r7, #104]	; 0x68
	int rx_len = rx_amount - data->async->rx_offset;
   26d5a:	eba3 0309 	sub.w	r3, r3, r9
	data->async->rx_total_user_byte_cnt += rx_len;
   26d5e:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
	if (!hw_rx_counting_enabled(data)) {
   26d62:	f897 10b9 	ldrb.w	r1, [r7, #185]	; 0xb9
	data->async->rx_total_user_byte_cnt += rx_len;
   26d66:	4452      	add	r2, sl
   26d68:	66ba      	str	r2, [r7, #104]	; 0x68
	if (!hw_rx_counting_enabled(data)) {
   26d6a:	b909      	cbnz	r1, 26d70 <uarte_nrfx_isr_async+0x27c>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   26d6c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
	if (rx_len > 0) {
   26d70:	2b00      	cmp	r3, #0
   26d72:	dd10      	ble.n	26d96 <uarte_nrfx_isr_async+0x2a2>
		struct uart_event evt = {
   26d74:	2100      	movs	r1, #0
   26d76:	2214      	movs	r2, #20
   26d78:	a803      	add	r0, sp, #12
   26d7a:	f011 ff00 	bl	38b7e <memset>
   26d7e:	2302      	movs	r3, #2
   26d80:	f88d 300c 	strb.w	r3, [sp, #12]
   26d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
		user_callback(dev, &evt);
   26d86:	4620      	mov	r0, r4
   26d88:	a903      	add	r1, sp, #12
		struct uart_event evt = {
   26d8a:	e9cd 3904 	strd	r3, r9, [sp, #16]
   26d8e:	f8cd a018 	str.w	sl, [sp, #24]
		user_callback(dev, &evt);
   26d92:	f010 fac4 	bl	3731e <user_callback>
	if (!data->async->rx_enabled) {
   26d96:	68f7      	ldr	r7, [r6, #12]
   26d98:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
   26d9c:	b913      	cbnz	r3, 26da4 <uarte_nrfx_isr_async+0x2b0>
		data->async->is_in_irq = false;
   26d9e:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
		return;
   26da2:	e709      	b.n	26bb8 <uarte_nrfx_isr_async+0xc4>
	struct uart_event evt = {
   26da4:	2214      	movs	r2, #20
   26da6:	2100      	movs	r1, #0
   26da8:	a803      	add	r0, sp, #12
   26daa:	f011 fee8 	bl	38b7e <memset>
   26dae:	2304      	movs	r3, #4
   26db0:	f88d 300c 	strb.w	r3, [sp, #12]
   26db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	user_callback(dev, &evt);
   26db6:	4620      	mov	r0, r4
   26db8:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   26dba:	9304      	str	r3, [sp, #16]
	user_callback(dev, &evt);
   26dbc:	f010 faaf 	bl	3731e <user_callback>
	__asm__ volatile(
   26dc0:	f04f 0320 	mov.w	r3, #32
   26dc4:	f3ef 8111 	mrs	r1, BASEPRI
   26dc8:	f383 8811 	msr	BASEPRI, r3
   26dcc:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   26dd0:	68f3      	ldr	r3, [r6, #12]
   26dd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
		data->async->rx_buf = data->async->rx_next_buf;
   26dd4:	651a      	str	r2, [r3, #80]	; 0x50
	if (data->async->rx_next_buf) {
   26dd6:	b18a      	cbz	r2, 26dfc <uarte_nrfx_isr_async+0x308>
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   26dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   26dda:	655a      	str	r2, [r3, #84]	; 0x54
		data->async->rx_next_buf = NULL;
   26ddc:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   26dde:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
		data->async->rx_offset = 0;
   26de2:	659a      	str	r2, [r3, #88]	; 0x58
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26de4:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   26de8:	b913      	cbnz	r3, 26df0 <uarte_nrfx_isr_async+0x2fc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26dea:	2301      	movs	r3, #1
   26dec:	f8c8 3000 	str.w	r3, [r8]
    p_reg->SHORTS &= ~(mask);
   26df0:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
   26df4:	f023 0320 	bic.w	r3, r3, #32
   26df8:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	__asm__ volatile(
   26dfc:	f381 8811 	msr	BASEPRI, r1
   26e00:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   26e04:	68f3      	ldr	r3, [r6, #12]
   26e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   26e08:	b933      	cbnz	r3, 26e18 <uarte_nrfx_isr_async+0x324>
		evt.type = UART_RX_DISABLED;
   26e0a:	2305      	movs	r3, #5
		user_callback(dev, &evt);
   26e0c:	4620      	mov	r0, r4
   26e0e:	a903      	add	r1, sp, #12
		evt.type = UART_RX_DISABLED;
   26e10:	f88d 300c 	strb.w	r3, [sp, #12]
		user_callback(dev, &evt);
   26e14:	f010 fa83 	bl	3731e <user_callback>
	data->async->is_in_irq = false;
   26e18:	2200      	movs	r2, #0
   26e1a:	68f3      	ldr	r3, [r6, #12]
   26e1c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
   26e20:	e6ca      	b.n	26bb8 <uarte_nrfx_isr_async+0xc4>
   26e22:	3018      	adds	r0, #24
   26e24:	f011 fcc2 	bl	387ac <z_impl_k_timer_stop>
	__asm__ volatile(
   26e28:	f04f 0320 	mov.w	r3, #32
   26e2c:	f3ef 8211 	mrs	r2, BASEPRI
   26e30:	f383 8811 	msr	BASEPRI, r3
   26e34:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   26e38:	68fb      	ldr	r3, [r7, #12]
   26e3a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   26e3e:	2900      	cmp	r1, #0
   26e40:	bfac      	ite	ge
   26e42:	f8d3 60b4 	ldrge.w	r6, [r3, #180]	; 0xb4
    return p_reg->TXD.AMOUNT;
   26e46:	f8d5 654c 	ldrlt.w	r6, [r5, #1356]	; 0x54c
	__asm__ volatile(
   26e4a:	f382 8811 	msr	BASEPRI, r2
   26e4e:	f3bf 8f6f 	isb	sy
	struct uart_event evt = {
   26e52:	2214      	movs	r2, #20
   26e54:	2100      	movs	r1, #0
   26e56:	a803      	add	r0, sp, #12
   26e58:	f011 fe91 	bl	38b7e <memset>
		.data.tx.buf = data->async->tx_buf,
   26e5c:	68fb      	ldr	r3, [r7, #12]
	user_callback(dev, &evt);
   26e5e:	4620      	mov	r0, r4
	struct uart_event evt = {
   26e60:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   26e62:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   26e64:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   26e68:	68da      	ldr	r2, [r3, #12]
   26e6a:	1ab6      	subs	r6, r6, r2
   26e6c:	bf18      	it	ne
   26e6e:	2601      	movne	r6, #1
    p_reg->INTENCLR = mask;
   26e70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   26e74:	f88d 600c 	strb.w	r6, [sp, #12]
   26e78:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	data->async->tx_buf = NULL;
   26e7c:	2200      	movs	r2, #0
   26e7e:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   26e80:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   26e82:	f010 fa4c 	bl	3731e <user_callback>
   26e86:	e64c      	b.n	26b22 <uarte_nrfx_isr_async+0x2e>
   26e88:	2002bbc5 	.word	0x2002bbc5

00026e8c <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   26e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   26e90:	2700      	movs	r7, #0
	return config->uarte_regs;
   26e92:	6843      	ldr	r3, [r0, #4]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   26e94:	f8d0 800c 	ldr.w	r8, [r0, #12]
	return config->uarte_regs;
   26e98:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   26e9a:	460d      	mov	r5, r1
   26e9c:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
   26ea0:	4606      	mov	r6, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   26ea2:	f8c8 0000 	str.w	r0, [r8]

	nrf_gpio_pin_write(config->pseltxd, 1);
   26ea6:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   26ea8:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
   26eaa:	4b90      	ldr	r3, [pc, #576]	; (270ec <uarte_instance_init.isra.0+0x260>)
    *p_pin = pin_number & 0x1F;
   26eac:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   26eb0:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   26eb2:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   26eb4:	2103      	movs	r1, #3
   26eb6:	3280      	adds	r2, #128	; 0x80
   26eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   26ebc:	686a      	ldr	r2, [r5, #4]
   26ebe:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   26ec0:	bf1e      	ittt	ne
   26ec2:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   26ec6:	3180      	addne	r1, #128	; 0x80
   26ec8:	f843 7021 	strne.w	r7, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   26ecc:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
   26ece:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   26ed2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   26ed6:	1c4a      	adds	r2, r1, #1
   26ed8:	bf1f      	itttt	ne
   26eda:	2000      	movne	r0, #0
    *p_pin = pin_number & 0x1F;
   26edc:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   26ee0:	3280      	addne	r2, #128	; 0x80
   26ee2:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   26ee6:	68e8      	ldr	r0, [r5, #12]
   26ee8:	1c47      	adds	r7, r0, #1
   26eea:	d008      	beq.n	26efe <uarte_instance_init.isra.0+0x72>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   26eec:	2701      	movs	r7, #1
    *p_pin = pin_number & 0x1F;
   26eee:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   26ef2:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
   26ef4:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   26ef6:	2703      	movs	r7, #3
   26ef8:	3280      	adds	r2, #128	; 0x80
   26efa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   26efe:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   26f02:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   26f06:	68f1      	ldr	r1, [r6, #12]
   26f08:	4630      	mov	r0, r6
   26f0a:	3104      	adds	r1, #4
   26f0c:	f7ff fcce 	bl	268ac <uarte_nrfx_configure>
	if (err) {
   26f10:	4681      	mov	r9, r0
   26f12:	2800      	cmp	r0, #0
   26f14:	f040 80c7 	bne.w	270a6 <uarte_instance_init.isra.0+0x21a>
		return err;
	}

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
   26f18:	2701      	movs	r7, #1
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   26f1a:	6873      	ldr	r3, [r6, #4]
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
   26f1c:	f8c8 7010 	str.w	r7, [r8, #16]
	if (get_dev_config(dev)->ppi_endtx) {
   26f20:	799b      	ldrb	r3, [r3, #6]
   26f22:	b303      	cbz	r3, 26f66 <uarte_instance_init.isra.0+0xda>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   26f24:	f108 0016 	add.w	r0, r8, #22
   26f28:	f00b ff02 	bl	32d30 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   26f2c:	4b70      	ldr	r3, [pc, #448]	; (270f0 <uarte_instance_init.isra.0+0x264>)
   26f2e:	4298      	cmp	r0, r3
   26f30:	d00b      	beq.n	26f4a <uarte_instance_init.isra.0+0xbe>
   26f32:	4970      	ldr	r1, [pc, #448]	; (270f4 <uarte_instance_init.isra.0+0x268>)
   26f34:	4b70      	ldr	r3, [pc, #448]	; (270f8 <uarte_instance_init.isra.0+0x26c>)
		LOG_ERR("Failed to allocate PPI Channel");
   26f36:	4871      	ldr	r0, [pc, #452]	; (270fc <uarte_instance_init.isra.0+0x270>)
   26f38:	1ac9      	subs	r1, r1, r3
   26f3a:	08c9      	lsrs	r1, r1, #3
   26f3c:	0189      	lsls	r1, r1, #6
   26f3e:	4339      	orrs	r1, r7
   26f40:	f00f f86e 	bl	36020 <log_0>
		err = endtx_stoptx_ppi_init(uarte, data);
		if (err < 0) {
   26f44:	f06f 0904 	mvn.w	r9, #4
   26f48:	e0ad      	b.n	270a6 <uarte_instance_init.isra.0+0x21a>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   26f4a:	f898 3016 	ldrb.w	r3, [r8, #22]
   26f4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   26f52:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   26f56:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   26f5a:	f898 3016 	ldrb.w	r3, [r8, #22]
   26f5e:	409f      	lsls	r7, r3
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   26f60:	4b67      	ldr	r3, [pc, #412]	; (27100 <uarte_instance_init.isra.0+0x274>)
   26f62:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
   26f66:	f8d8 300c 	ldr.w	r3, [r8, #12]
   26f6a:	2b00      	cmp	r3, #0
   26f6c:	f000 80aa 	beq.w	270c4 <uarte_instance_init.isra.0+0x238>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   26f70:	68f7      	ldr	r7, [r6, #12]
   26f72:	f8d6 a004 	ldr.w	sl, [r6, #4]
		return data->async->hw_rx_counting;
   26f76:	68fb      	ldr	r3, [r7, #12]
	return config->uarte_regs;
   26f78:	f8da 5000 	ldr.w	r5, [sl]
	if (hw_rx_counting_enabled(data)) {
   26f7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   26f80:	b1eb      	cbz	r3, 26fbe <uarte_instance_init.isra.0+0x132>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   26f82:	2300      	movs	r3, #0
   26f84:	4a5f      	ldr	r2, [pc, #380]	; (27104 <uarte_instance_init.isra.0+0x278>)
		ret = nrfx_timer_init(&cfg->timer,
   26f86:	f10a 0b08 	add.w	fp, sl, #8
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   26f8a:	e9cd 2300 	strd	r2, r3, [sp]
		ret = nrfx_timer_init(&cfg->timer,
   26f8e:	4669      	mov	r1, sp
   26f90:	4a5d      	ldr	r2, [pc, #372]	; (27108 <uarte_instance_init.isra.0+0x27c>)
   26f92:	4658      	mov	r0, fp
   26f94:	f00b ff30 	bl	32df8 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   26f98:	4a55      	ldr	r2, [pc, #340]	; (270f0 <uarte_instance_init.isra.0+0x264>)
   26f9a:	4290      	cmp	r0, r2
   26f9c:	f000 8087 	beq.w	270ae <uarte_instance_init.isra.0+0x222>
   26fa0:	4b55      	ldr	r3, [pc, #340]	; (270f8 <uarte_instance_init.isra.0+0x26c>)
   26fa2:	4954      	ldr	r1, [pc, #336]	; (270f4 <uarte_instance_init.isra.0+0x268>)
			LOG_ERR("Timer already initialized, "
   26fa4:	4859      	ldr	r0, [pc, #356]	; (2710c <uarte_instance_init.isra.0+0x280>)
   26fa6:	1ac9      	subs	r1, r1, r3
   26fa8:	08c9      	lsrs	r1, r1, #3
   26faa:	0189      	lsls	r1, r1, #6
   26fac:	f041 0101 	orr.w	r1, r1, #1
   26fb0:	f00f f836 	bl	36020 <log_0>
			data->async->hw_rx_counting = false;
   26fb4:	f04f 0200 	mov.w	r2, #0
   26fb8:	68fb      	ldr	r3, [r7, #12]
   26fba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	if (hw_rx_counting_enabled(data)) {
   26fbe:	68f8      	ldr	r0, [r7, #12]
   26fc0:	f890 30b9 	ldrb.w	r3, [r0, #185]	; 0xb9
   26fc4:	b1bb      	cbz	r3, 26ff6 <uarte_instance_init.isra.0+0x16a>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   26fc6:	30b0      	adds	r0, #176	; 0xb0
   26fc8:	f00b feb2 	bl	32d30 <nrfx_dppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   26fcc:	4b48      	ldr	r3, [pc, #288]	; (270f0 <uarte_instance_init.isra.0+0x264>)
   26fce:	4298      	cmp	r0, r3
   26fd0:	d011      	beq.n	26ff6 <uarte_instance_init.isra.0+0x16a>
   26fd2:	4b49      	ldr	r3, [pc, #292]	; (270f8 <uarte_instance_init.isra.0+0x26c>)
   26fd4:	4947      	ldr	r1, [pc, #284]	; (270f4 <uarte_instance_init.isra.0+0x268>)
			LOG_ERR("Failed to allocate PPI Channel, "
   26fd6:	484e      	ldr	r0, [pc, #312]	; (27110 <uarte_instance_init.isra.0+0x284>)
   26fd8:	1ac9      	subs	r1, r1, r3
   26fda:	08c9      	lsrs	r1, r1, #3
   26fdc:	0189      	lsls	r1, r1, #6
   26fde:	f041 0101 	orr.w	r1, r1, #1
   26fe2:	f00f f81d 	bl	36020 <log_0>
			data->async->hw_rx_counting = false;
   26fe6:	2200      	movs	r2, #0
   26fe8:	68fb      	ldr	r3, [r7, #12]
			nrfx_timer_uninit(&cfg->timer);
   26fea:	f10a 0008 	add.w	r0, sl, #8
			data->async->hw_rx_counting = false;
   26fee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			nrfx_timer_uninit(&cfg->timer);
   26ff2:	f00b ff69 	bl	32ec8 <nrfx_timer_uninit>
	if (hw_rx_counting_enabled(data)) {
   26ff6:	68fb      	ldr	r3, [r7, #12]
   26ff8:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   26ffc:	2a00      	cmp	r2, #0
   26ffe:	d05d      	beq.n	270bc <uarte_instance_init.isra.0+0x230>
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   27000:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   27004:	f8da 1008 	ldr.w	r1, [sl, #8]
   27008:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   2700c:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   27010:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
   27014:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   27018:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   2701c:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   27020:	f00b fea4 	bl	32d6c <nrfx_dppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   27024:	4b32      	ldr	r3, [pc, #200]	; (270f0 <uarte_instance_init.isra.0+0x264>)
   27026:	4298      	cmp	r0, r3
   27028:	d18c      	bne.n	26f44 <uarte_instance_init.isra.0+0xb8>
    p_reg->INTENSET = mask;
   2702a:	4b3a      	ldr	r3, [pc, #232]	; (27114 <uarte_instance_init.isra.0+0x288>)
   2702c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   27030:	2308      	movs	r3, #8
   27032:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27036:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2703a:	b193      	cbz	r3, 27062 <uarte_instance_init.isra.0+0x1d6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2703c:	2301      	movs	r3, #1
   2703e:	606b      	str	r3, [r5, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27040:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO)) {
   27044:	2b00      	cmp	r3, #0
   27046:	d0fb      	beq.n	27040 <uarte_instance_init.isra.0+0x1b4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27048:	2300      	movs	r3, #0
   2704a:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
   2704e:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
   27052:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   27056:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   2705a:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   2705e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   27062:	68f8      	ldr	r0, [r7, #12]
   27064:	2200      	movs	r2, #0
   27066:	492c      	ldr	r1, [pc, #176]	; (27118 <uarte_instance_init.isra.0+0x28c>)
   27068:	3078      	adds	r0, #120	; 0x78
   2706a:	f011 fb93 	bl	38794 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   2706e:	68fb      	ldr	r3, [r7, #12]
	timer->user_data = user_data;
   27070:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   27074:	68f8      	ldr	r0, [r7, #12]
   27076:	2200      	movs	r2, #0
   27078:	4928      	ldr	r1, [pc, #160]	; (2711c <uarte_instance_init.isra.0+0x290>)
   2707a:	3018      	adds	r0, #24
   2707c:	f011 fb8a 	bl	38794 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   27080:	68fb      	ldr	r3, [r7, #12]
   27082:	64df      	str	r7, [r3, #76]	; 0x4c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!get_dev_config(dev)->ppi_endtx) {
   27084:	6873      	ldr	r3, [r6, #4]
   27086:	799b      	ldrb	r3, [r3, #6]
   27088:	b91b      	cbnz	r3, 27092 <uarte_instance_init.isra.0+0x206>
    p_reg->INTENSET = mask;
   2708a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2708e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   27092:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27096:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2709a:	2300      	movs	r3, #0
   2709c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   270a0:	2301      	movs	r3, #1
   270a2:	60a3      	str	r3, [r4, #8]
   270a4:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   270a6:	4648      	mov	r0, r9
   270a8:	b003      	add	sp, #12
   270aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nrfx_timer_enable(&cfg->timer);
   270ae:	4658      	mov	r0, fp
   270b0:	f00b fef0 	bl	32e94 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   270b4:	4658      	mov	r0, fp
   270b6:	f011 f835 	bl	38124 <nrfx_timer_clear>
   270ba:	e780      	b.n	26fbe <uarte_instance_init.isra.0+0x132>
    p_reg->INTENSET = mask;
   270bc:	2304      	movs	r3, #4
   270be:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	if (ret != 0) {
   270c2:	e7b2      	b.n	2702a <uarte_instance_init.isra.0+0x19e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   270c4:	2208      	movs	r2, #8
   270c6:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   270ca:	686a      	ldr	r2, [r5, #4]
   270cc:	3201      	adds	r2, #1
   270ce:	d0d9      	beq.n	27084 <uarte_instance_init.isra.0+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   270d0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   270d4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   270d8:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   270dc:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   270e0:	2301      	movs	r3, #1
   270e2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   270e6:	6023      	str	r3, [r4, #0]
}
   270e8:	e7cc      	b.n	27084 <uarte_instance_init.isra.0+0x1f8>
   270ea:	bf00      	nop
   270ec:	40842500 	.word	0x40842500
   270f0:	0bad0000 	.word	0x0bad0000
   270f4:	00039b28 	.word	0x00039b28
   270f8:	00039a50 	.word	0x00039a50
   270fc:	0003c024 	.word	0x0003c024
   27100:	40017000 	.word	0x40017000
   27104:	07030100 	.word	0x07030100
   27108:	00037265 	.word	0x00037265
   2710c:	0003c043 	.word	0x0003c043
   27110:	0003c083 	.word	0x0003c083
   27114:	000a0210 	.word	0x000a0210
   27118:	0003742d 	.word	0x0003742d
   2711c:	0003750f 	.word	0x0003750f

00027120 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   27120:	b530      	push	{r4, r5, lr}
   27122:	b085      	sub	sp, #20
   27124:	466c      	mov	r4, sp
   27126:	4605      	mov	r5, r0
   27128:	4b08      	ldr	r3, [pc, #32]	; (2714c <uarte_0_init+0x2c>)
   2712a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2712c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   27130:	2200      	movs	r2, #0
   27132:	2101      	movs	r1, #1
   27134:	2008      	movs	r0, #8
   27136:	f7fd ff63 	bl	25000 <z_arm_irq_priority_set>
   2713a:	2008      	movs	r0, #8
   2713c:	f7fd ff2e 	bl	24f9c <arch_irq_enable>
   27140:	4621      	mov	r1, r4
   27142:	4628      	mov	r0, r5
   27144:	f7ff fea2 	bl	26e8c <uarte_instance_init.isra.0>
   27148:	b005      	add	sp, #20
   2714a:	bd30      	pop	{r4, r5, pc}
   2714c:	00039b50 	.word	0x00039b50

00027150 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   27150:	b530      	push	{r4, r5, lr}
   27152:	b085      	sub	sp, #20
   27154:	466c      	mov	r4, sp
   27156:	4605      	mov	r5, r0
   27158:	4b08      	ldr	r3, [pc, #32]	; (2717c <uarte_1_init+0x2c>)
   2715a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2715c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   27160:	2200      	movs	r2, #0
   27162:	2101      	movs	r1, #1
   27164:	2009      	movs	r0, #9
   27166:	f7fd ff4b 	bl	25000 <z_arm_irq_priority_set>
   2716a:	2009      	movs	r0, #9
   2716c:	f7fd ff16 	bl	24f9c <arch_irq_enable>
   27170:	4621      	mov	r1, r4
   27172:	4628      	mov	r0, r5
   27174:	f7ff fe8a 	bl	26e8c <uarte_instance_init.isra.0>
   27178:	b005      	add	sp, #20
   2717a:	bd30      	pop	{r4, r5, pc}
   2717c:	00039b60 	.word	0x00039b60

00027180 <uarte_2_init>:
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   27180:	b530      	push	{r4, r5, lr}
   27182:	b085      	sub	sp, #20
   27184:	466c      	mov	r4, sp
   27186:	4605      	mov	r5, r0
   27188:	4b08      	ldr	r3, [pc, #32]	; (271ac <uarte_2_init+0x2c>)
   2718a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2718c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   27190:	2200      	movs	r2, #0
   27192:	2101      	movs	r1, #1
   27194:	200a      	movs	r0, #10
   27196:	f7fd ff33 	bl	25000 <z_arm_irq_priority_set>
   2719a:	200a      	movs	r0, #10
   2719c:	f7fd fefe 	bl	24f9c <arch_irq_enable>
   271a0:	4621      	mov	r1, r4
   271a2:	4628      	mov	r0, r5
   271a4:	f7ff fe72 	bl	26e8c <uarte_instance_init.isra.0>
   271a8:	b005      	add	sp, #20
   271aa:	bd30      	pop	{r4, r5, pc}
   271ac:	00039b70 	.word	0x00039b70

000271b0 <uarte_nrfx_pins_enable>:
{
   271b0:	b570      	push	{r4, r5, r6, lr}
	if (!get_dev_config(dev)->gpio_mgmt) {
   271b2:	6846      	ldr	r6, [r0, #4]
   271b4:	7973      	ldrb	r3, [r6, #5]
   271b6:	b37b      	cbz	r3, 27218 <uarte_nrfx_pins_enable+0x68>
	return config->uarte_regs;
   271b8:	6830      	ldr	r0, [r6, #0]
    return p_reg->PSEL.TXD;
   271ba:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
    return p_reg->PSEL.RXD;
   271be:	f8d0 3514 	ldr.w	r3, [r0, #1300]	; 0x514
    return p_reg->PSEL.CTS;
   271c2:	f002 021f 	and.w	r2, r2, #31
   271c6:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
    return p_reg->PSEL.RTS;
   271ca:	f8d0 5508 	ldr.w	r5, [r0, #1288]	; 0x508
	if (enable) {
   271ce:	4820      	ldr	r0, [pc, #128]	; (27250 <uarte_nrfx_pins_enable+0xa0>)
   271d0:	b319      	cbz	r1, 2721a <uarte_nrfx_pins_enable+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   271d2:	2101      	movs	r1, #1
   271d4:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   271d6:	6081      	str	r1, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   271d8:	2103      	movs	r1, #3
   271da:	3280      	adds	r2, #128	; 0x80
   271dc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   271e0:	1c5a      	adds	r2, r3, #1
   271e2:	bf1f      	itttt	ne
   271e4:	2200      	movne	r2, #0
    *p_pin = pin_number & 0x1F;
   271e6:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   271ea:	3380      	addne	r3, #128	; 0x80
   271ec:	f840 2023 	strne.w	r2, [r0, r3, lsl #2]
		if (IS_RTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   271f0:	7931      	ldrb	r1, [r6, #4]
   271f2:	074e      	lsls	r6, r1, #29
   271f4:	d508      	bpl.n	27208 <uarte_nrfx_pins_enable+0x58>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   271f6:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
   271f8:	f005 021f 	and.w	r2, r5, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   271fc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   271fe:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   27200:	2303      	movs	r3, #3
   27202:	3280      	adds	r2, #128	; 0x80
   27204:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		if (IS_CTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   27208:	0789      	lsls	r1, r1, #30
   2720a:	d505      	bpl.n	27218 <uarte_nrfx_pins_enable+0x68>
   2720c:	2200      	movs	r2, #0
    *p_pin = pin_number & 0x1F;
   2720e:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   27212:	3380      	adds	r3, #128	; 0x80
   27214:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   27218:	bd70      	pop	{r4, r5, r6, pc}
   2721a:	2102      	movs	r1, #2
   2721c:	3280      	adds	r2, #128	; 0x80
   2721e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   27222:	1c5a      	adds	r2, r3, #1
    *p_pin = pin_number & 0x1F;
   27224:	bf1e      	ittt	ne
   27226:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2722a:	3380      	addne	r3, #128	; 0x80
   2722c:	f840 1023 	strne.w	r1, [r0, r3, lsl #2]
		if (IS_RTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   27230:	7933      	ldrb	r3, [r6, #4]
   27232:	075a      	lsls	r2, r3, #29
   27234:	bf41      	itttt	mi
   27236:	2102      	movmi	r1, #2
    *p_pin = pin_number & 0x1F;
   27238:	f005 021f 	andmi.w	r2, r5, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2723c:	3280      	addmi	r2, #128	; 0x80
   2723e:	f840 1022 	strmi.w	r1, [r0, r2, lsl #2]
		if (IS_CTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   27242:	079b      	lsls	r3, r3, #30
   27244:	d5e8      	bpl.n	27218 <uarte_nrfx_pins_enable+0x68>
    *p_pin = pin_number & 0x1F;
   27246:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2724a:	2202      	movs	r2, #2
   2724c:	3380      	adds	r3, #128	; 0x80
   2724e:	e7e1      	b.n	27214 <uarte_nrfx_pins_enable+0x64>
   27250:	40842500 	.word	0x40842500

00027254 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   27254:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   27256:	4d1c      	ldr	r5, [pc, #112]	; (272c8 <_bsdlib_init+0x74>)
   27258:	4c1c      	ldr	r4, [pc, #112]	; (272cc <_bsdlib_init+0x78>)
   2725a:	782b      	ldrb	r3, [r5, #0]
{
   2725c:	b085      	sub	sp, #20
	if (!first_time_init) {
   2725e:	b933      	cbnz	r3, 2726e <_bsdlib_init+0x1a>
	list->tail = NULL;
   27260:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   27264:	481a      	ldr	r0, [pc, #104]	; (272d0 <_bsdlib_init+0x7c>)
   27266:	f011 f811 	bl	3828c <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   2726a:	2301      	movs	r3, #1
   2726c:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2726e:	2200      	movs	r2, #0
   27270:	202a      	movs	r0, #42	; 0x2a
   27272:	4611      	mov	r1, r2
   27274:	f7fd fec4 	bl	25000 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   27278:	4a16      	ldr	r2, [pc, #88]	; (272d4 <_bsdlib_init+0x80>)
   2727a:	ab01      	add	r3, sp, #4
   2727c:	ca07      	ldmia	r2, {r0, r1, r2}
   2727e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   27282:	4618      	mov	r0, r3
   27284:	f009 fbc2 	bl	30a0c <bsd_init>
   27288:	4b13      	ldr	r3, [pc, #76]	; (272d8 <_bsdlib_init+0x84>)
   2728a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   2728c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27294:	480e      	ldr	r0, [pc, #56]	; (272d0 <_bsdlib_init+0x7c>)
   27296:	f00c f961 	bl	3355c <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   2729a:	6820      	ldr	r0, [r4, #0]
   2729c:	b170      	cbz	r0, 272bc <_bsdlib_init+0x68>
	return node->next;
   2729e:	6804      	ldr	r4, [r0, #0]
   272a0:	2c00      	cmp	r4, #0
   272a2:	bf38      	it	cc
   272a4:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   272a6:	3004      	adds	r0, #4
   272a8:	f00c fdfa 	bl	33ea0 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   272ac:	b134      	cbz	r4, 272bc <_bsdlib_init+0x68>
   272ae:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   272b0:	4620      	mov	r0, r4
   272b2:	2b00      	cmp	r3, #0
   272b4:	bf38      	it	cc
   272b6:	2300      	movcc	r3, #0
   272b8:	461c      	mov	r4, r3
   272ba:	e7f4      	b.n	272a6 <_bsdlib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   272bc:	4804      	ldr	r0, [pc, #16]	; (272d0 <_bsdlib_init+0x7c>)
   272be:	f00c f9c5 	bl	3364c <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   272c2:	2000      	movs	r0, #0
   272c4:	b005      	add	sp, #20
   272c6:	bd30      	pop	{r4, r5, pc}
   272c8:	2002bbca 	.word	0x2002bbca
   272cc:	20023600 	.word	0x20023600
   272d0:	20023608 	.word	0x20023608
   272d4:	00039b80 	.word	0x00039b80
   272d8:	200235fc 	.word	0x200235fc

000272dc <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   272dc:	b530      	push	{r4, r5, lr}
   272de:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   272e0:	2201      	movs	r2, #1
   272e2:	2100      	movs	r1, #0
   272e4:	a802      	add	r0, sp, #8
   272e6:	f011 f965 	bl	385b4 <z_impl_k_sem_init>
   272ea:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   272ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   272f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   272f4:	481c      	ldr	r0, [pc, #112]	; (27368 <bsdlib_shutdown_wait+0x8c>)
   272f6:	f00c f931 	bl	3355c <z_impl_k_mutex_lock>
	parent->next = child;
   272fa:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   272fc:	4c1b      	ldr	r4, [pc, #108]	; (2736c <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   272fe:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   27300:	6863      	ldr	r3, [r4, #4]
   27302:	bb2b      	cbnz	r3, 27350 <bsdlib_shutdown_wait+0x74>
	list->head = node;
   27304:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   27308:	4817      	ldr	r0, [pc, #92]	; (27368 <bsdlib_shutdown_wait+0x8c>)
   2730a:	f00c f99f 	bl	3364c <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   2730e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27316:	a802      	add	r0, sp, #8
   27318:	f00c fde8 	bl	33eec <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   2731c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27324:	4810      	ldr	r0, [pc, #64]	; (27368 <bsdlib_shutdown_wait+0x8c>)
   27326:	f00c f919 	bl	3355c <z_impl_k_mutex_lock>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2732a:	2200      	movs	r2, #0
   2732c:	6823      	ldr	r3, [r4, #0]
   2732e:	b153      	cbz	r3, 27346 <bsdlib_shutdown_wait+0x6a>
   27330:	42ab      	cmp	r3, r5
   27332:	d116      	bne.n	27362 <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   27334:	9901      	ldr	r1, [sp, #4]
   27336:	b972      	cbnz	r2, 27356 <bsdlib_shutdown_wait+0x7a>
   27338:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2733a:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2733c:	429a      	cmp	r2, r3
   2733e:	d100      	bne.n	27342 <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   27340:	6061      	str	r1, [r4, #4]
	parent->next = child;
   27342:	2300      	movs	r3, #0
   27344:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   27346:	4808      	ldr	r0, [pc, #32]	; (27368 <bsdlib_shutdown_wait+0x8c>)
   27348:	f00c f980 	bl	3364c <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   2734c:	b009      	add	sp, #36	; 0x24
   2734e:	bd30      	pop	{r4, r5, pc}
   27350:	601d      	str	r5, [r3, #0]
	list->tail = node;
   27352:	6065      	str	r5, [r4, #4]
}
   27354:	e7d8      	b.n	27308 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   27356:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   27358:	6861      	ldr	r1, [r4, #4]
   2735a:	4299      	cmp	r1, r3
	list->tail = node;
   2735c:	bf08      	it	eq
   2735e:	6062      	streq	r2, [r4, #4]
}
   27360:	e7ef      	b.n	27342 <bsdlib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27362:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27364:	681b      	ldr	r3, [r3, #0]
   27366:	e7e2      	b.n	2732e <bsdlib_shutdown_wait+0x52>
   27368:	20023608 	.word	0x20023608
   2736c:	20023600 	.word	0x20023600

00027370 <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   27370:	4b01      	ldr	r3, [pc, #4]	; (27378 <bsdlib_get_init_ret+0x8>)
   27372:	6818      	ldr	r0, [r3, #0]
   27374:	4770      	bx	lr
   27376:	bf00      	nop
   27378:	200235fc 	.word	0x200235fc

0002737c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   2737c:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   2737e:	4c0d      	ldr	r4, [pc, #52]	; (273b4 <thread_monitor_entry_get+0x38>)
{
   27380:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   27382:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   27384:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   27386:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   27388:	4b0b      	ldr	r3, [pc, #44]	; (273b8 <thread_monitor_entry_get+0x3c>)
   2738a:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   2738c:	6801      	ldr	r1, [r0, #0]
   2738e:	4291      	cmp	r1, r2
   27390:	d00e      	beq.n	273b0 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   27392:	b151      	cbz	r1, 273aa <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   27394:	6841      	ldr	r1, [r0, #4]
   27396:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   27398:	42b1      	cmp	r1, r6
   2739a:	bfc4      	itt	gt
   2739c:	4604      	movgt	r4, r0
   2739e:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   273a0:	3d01      	subs	r5, #1
   273a2:	f100 0008 	add.w	r0, r0, #8
   273a6:	d1f1      	bne.n	2738c <thread_monitor_entry_get+0x10>
   273a8:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   273aa:	3b01      	subs	r3, #1
	new_entry->id = id;
   273ac:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   273ae:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   273b0:	bd70      	pop	{r4, r5, r6, pc}
   273b2:	bf00      	nop
   273b4:	20023628 	.word	0x20023628
   273b8:	2002361c 	.word	0x2002361c

000273bc <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   273bc:	4668      	mov	r0, sp
   273be:	f020 0107 	bic.w	r1, r0, #7
   273c2:	468d      	mov	sp, r1
   273c4:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   273c6:	4b0f      	ldr	r3, [pc, #60]	; (27404 <rpc_proxy_irq_handler+0x48>)
   273c8:	e8d3 2fef 	ldaex	r2, [r3]
   273cc:	3201      	adds	r2, #1
   273ce:	e8c3 2fe1 	stlex	r1, r2, [r3]
   273d2:	2900      	cmp	r1, #0
   273d4:	d1f8      	bne.n	273c8 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   273d6:	f003 ff7b 	bl	2b2d0 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   273da:	4b0b      	ldr	r3, [pc, #44]	; (27408 <rpc_proxy_irq_handler+0x4c>)
   273dc:	681c      	ldr	r4, [r3, #0]
   273de:	2c00      	cmp	r4, #0
   273e0:	bf38      	it	cc
   273e2:	2400      	movcc	r4, #0
   273e4:	b12c      	cbz	r4, 273f2 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   273e6:	1d20      	adds	r0, r4, #4
   273e8:	f00c fd5a 	bl	33ea0 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   273ec:	6824      	ldr	r4, [r4, #0]
   273ee:	2c00      	cmp	r4, #0
   273f0:	d1f8      	bne.n	273e4 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   273f2:	f7fd fe1b 	bl	2502c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   273f6:	f7fe f9a5 	bl	25744 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   273fa:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   273fe:	4685      	mov	sp, r0
   27400:	4770      	bx	lr
   27402:	bf00      	nop
   27404:	2002361c 	.word	0x2002361c
   27408:	20023620 	.word	0x20023620

0002740c <bsd_os_timedwait>:
{
   2740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27410:	460c      	mov	r4, r1
   27412:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   27414:	f011 f993 	bl	3873e <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   27418:	6823      	ldr	r3, [r4, #0]
   2741a:	4680      	mov	r8, r0
   2741c:	2b00      	cmp	r3, #0
   2741e:	468a      	mov	sl, r1
   27420:	d103      	bne.n	2742a <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   27422:	f00c fcc9 	bl	33db8 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   27426:	203c      	movs	r0, #60	; 0x3c
   27428:	e091      	b.n	2754e <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   2742a:	bfbc      	itt	lt
   2742c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   27430:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   27432:	2201      	movs	r2, #1
   27434:	2100      	movs	r1, #0
   27436:	a802      	add	r0, sp, #8
   27438:	f011 f8bc 	bl	385b4 <z_impl_k_sem_init>
   2743c:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   2743e:	f04f 0320 	mov.w	r3, #32
   27442:	f3ef 8b11 	mrs	fp, BASEPRI
   27446:	f383 8811 	msr	BASEPRI, r3
   2744a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2744e:	f00c fd21 	bl	33e94 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   27452:	f7ff ff93 	bl	2737c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   27456:	4947      	ldr	r1, [pc, #284]	; (27574 <bsd_os_timedwait+0x168>)
   27458:	6843      	ldr	r3, [r0, #4]
   2745a:	680a      	ldr	r2, [r1, #0]
   2745c:	4689      	mov	r9, r1
   2745e:	4293      	cmp	r3, r2
   27460:	f04f 0300 	mov.w	r3, #0
   27464:	d108      	bne.n	27478 <bsd_os_timedwait+0x6c>
	parent->next = child;
   27466:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   27468:	4b43      	ldr	r3, [pc, #268]	; (27578 <bsd_os_timedwait+0x16c>)
   2746a:	685a      	ldr	r2, [r3, #4]
   2746c:	2a00      	cmp	r2, #0
   2746e:	d171      	bne.n	27554 <bsd_os_timedwait+0x148>
	list->head = node;
   27470:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   27474:	2301      	movs	r3, #1
}
   27476:	e000      	b.n	2747a <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   27478:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   2747a:	f38b 8811 	msr	BASEPRI, fp
   2747e:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   27482:	2b00      	cmp	r3, #0
   27484:	d062      	beq.n	2754c <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   27486:	6823      	ldr	r3, [r4, #0]
   27488:	1c5a      	adds	r2, r3, #1
   2748a:	d066      	beq.n	2755a <bsd_os_timedwait+0x14e>
   2748c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   27490:	f240 30e7 	movw	r0, #999	; 0x3e7
   27494:	2100      	movs	r1, #0
   27496:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   2749a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2749e:	2300      	movs	r3, #0
   274a0:	fbce 010c 	smlal	r0, r1, lr, ip
   274a4:	f7f5 f988 	bl	1c7b8 <__aeabi_uldivmod>
   274a8:	4602      	mov	r2, r0
   274aa:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   274ac:	a802      	add	r0, sp, #8
   274ae:	f00c fd1d 	bl	33eec <z_impl_k_sem_take>
	__asm__ volatile(
   274b2:	f04f 0320 	mov.w	r3, #32
   274b6:	f3ef 8b11 	mrs	fp, BASEPRI
   274ba:	f383 8811 	msr	BASEPRI, r3
   274be:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   274c2:	2000      	movs	r0, #0
   274c4:	4b2c      	ldr	r3, [pc, #176]	; (27578 <bsd_os_timedwait+0x16c>)
   274c6:	681a      	ldr	r2, [r3, #0]
   274c8:	b15a      	cbz	r2, 274e2 <bsd_os_timedwait+0xd6>
   274ca:	42aa      	cmp	r2, r5
   274cc:	d14f      	bne.n	2756e <bsd_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   274ce:	9d01      	ldr	r5, [sp, #4]
   274d0:	2800      	cmp	r0, #0
   274d2:	d146      	bne.n	27562 <bsd_os_timedwait+0x156>
   274d4:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   274d6:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   274d8:	4291      	cmp	r1, r2
   274da:	d100      	bne.n	274de <bsd_os_timedwait+0xd2>
	list->tail = node;
   274dc:	605d      	str	r5, [r3, #4]
	parent->next = child;
   274de:	2300      	movs	r3, #0
   274e0:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   274e2:	f00c fcd7 	bl	33e94 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   274e6:	f7ff ff49 	bl	2737c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   274ea:	f8d9 3000 	ldr.w	r3, [r9]
   274ee:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   274f0:	f38b 8811 	msr	BASEPRI, fp
   274f4:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   274f8:	6825      	ldr	r5, [r4, #0]
   274fa:	1c6b      	adds	r3, r5, #1
   274fc:	d026      	beq.n	2754c <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   274fe:	f011 f91e 	bl	3873e <z_impl_k_uptime_ticks>
   27502:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   27506:	468e      	mov	lr, r1
   27508:	fba8 890c 	umull	r8, r9, r8, ip
   2750c:	fba0 010c 	umull	r0, r1, r0, ip
   27510:	fb0c 990a 	mla	r9, ip, sl, r9
   27514:	fb0c 110e 	mla	r1, ip, lr, r1
   27518:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   2751c:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   27520:	1952      	adds	r2, r2, r5
   27522:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   27526:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   2752a:	0bc5      	lsrs	r5, r0, #15
   2752c:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   27530:	1b56      	subs	r6, r2, r5
   27532:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   27536:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   2753a:	2e00      	cmp	r6, #0
   2753c:	f177 0300 	sbcs.w	r3, r7, #0
   27540:	bfb8      	it	lt
   27542:	2600      	movlt	r6, #0
   27544:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   27546:	2e00      	cmp	r6, #0
   27548:	f43f af6d 	beq.w	27426 <bsd_os_timedwait+0x1a>
	return 0;
   2754c:	2000      	movs	r0, #0
}
   2754e:	b009      	add	sp, #36	; 0x24
   27550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27554:	6015      	str	r5, [r2, #0]
	list->tail = node;
   27556:	605d      	str	r5, [r3, #4]
   27558:	e78c      	b.n	27474 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   2755a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2755e:	4613      	mov	r3, r2
   27560:	e7a4      	b.n	274ac <bsd_os_timedwait+0xa0>
	parent->next = child;
   27562:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   27564:	6859      	ldr	r1, [r3, #4]
   27566:	4291      	cmp	r1, r2
	list->tail = node;
   27568:	bf08      	it	eq
   2756a:	6058      	streq	r0, [r3, #4]
}
   2756c:	e7b7      	b.n	274de <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2756e:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27570:	6812      	ldr	r2, [r2, #0]
   27572:	e7a9      	b.n	274c8 <bsd_os_timedwait+0xbc>
   27574:	2002361c 	.word	0x2002361c
   27578:	20023620 	.word	0x20023620

0002757c <bsd_os_errno_set>:
	switch (err_code) {
   2757c:	283c      	cmp	r0, #60	; 0x3c
{
   2757e:	4601      	mov	r1, r0
   27580:	b508      	push	{r3, lr}
	switch (err_code) {
   27582:	f300 808f 	bgt.w	276a4 <bsd_os_errno_set+0x128>
   27586:	2800      	cmp	r0, #0
   27588:	dc0d      	bgt.n	275a6 <bsd_os_errno_set+0x2a>
   2758a:	4bb2      	ldr	r3, [pc, #712]	; (27854 <bsd_os_errno_set+0x2d8>)
   2758c:	4ab2      	ldr	r2, [pc, #712]	; (27858 <bsd_os_errno_set+0x2dc>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   2758e:	48b3      	ldr	r0, [pc, #716]	; (2785c <bsd_os_errno_set+0x2e0>)
   27590:	1ad2      	subs	r2, r2, r3
   27592:	08d2      	lsrs	r2, r2, #3
   27594:	0192      	lsls	r2, r2, #6
   27596:	f042 0201 	orr.w	r2, r2, #1
   2759a:	f00e fd50 	bl	3603e <log_1>
		errno = 0xBAADBAAD;
   2759e:	f00f fc46 	bl	36e2e <__errno>
   275a2:	4baf      	ldr	r3, [pc, #700]	; (27860 <bsd_os_errno_set+0x2e4>)
   275a4:	e0bf      	b.n	27726 <bsd_os_errno_set+0x1aa>
   275a6:	1e43      	subs	r3, r0, #1
   275a8:	2b3b      	cmp	r3, #59	; 0x3b
   275aa:	d8ee      	bhi.n	2758a <bsd_os_errno_set+0xe>
   275ac:	a201      	add	r2, pc, #4	; (adr r2, 275b4 <bsd_os_errno_set+0x38>)
   275ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   275b2:	bf00      	nop
   275b4:	00027721 	.word	0x00027721
   275b8:	0002772b 	.word	0x0002772b
   275bc:	0002758b 	.word	0x0002758b
   275c0:	0002758b 	.word	0x0002758b
   275c4:	00027733 	.word	0x00027733
   275c8:	0002758b 	.word	0x0002758b
   275cc:	0002758b 	.word	0x0002758b
   275d0:	0002773b 	.word	0x0002773b
   275d4:	00027743 	.word	0x00027743
   275d8:	0002758b 	.word	0x0002758b
   275dc:	0002758b 	.word	0x0002758b
   275e0:	0002774b 	.word	0x0002774b
   275e4:	00027753 	.word	0x00027753
   275e8:	0002775b 	.word	0x0002775b
   275ec:	0002758b 	.word	0x0002758b
   275f0:	0002758b 	.word	0x0002758b
   275f4:	0002758b 	.word	0x0002758b
   275f8:	0002758b 	.word	0x0002758b
   275fc:	0002758b 	.word	0x0002758b
   27600:	0002758b 	.word	0x0002758b
   27604:	0002758b 	.word	0x0002758b
   27608:	00027763 	.word	0x00027763
   2760c:	0002758b 	.word	0x0002758b
   27610:	0002776b 	.word	0x0002776b
   27614:	0002758b 	.word	0x0002758b
   27618:	0002758b 	.word	0x0002758b
   2761c:	0002758b 	.word	0x0002758b
   27620:	0002758b 	.word	0x0002758b
   27624:	0002758b 	.word	0x0002758b
   27628:	0002758b 	.word	0x0002758b
   2762c:	0002758b 	.word	0x0002758b
   27630:	0002758b 	.word	0x0002758b
   27634:	0002758b 	.word	0x0002758b
   27638:	0002758b 	.word	0x0002758b
   2763c:	00027773 	.word	0x00027773
   27640:	0002758b 	.word	0x0002758b
   27644:	0002777b 	.word	0x0002777b
   27648:	0002758b 	.word	0x0002758b
   2764c:	0002758b 	.word	0x0002758b
   27650:	00027843 	.word	0x00027843
   27654:	00027783 	.word	0x00027783
   27658:	0002778b 	.word	0x0002778b
   2765c:	00027793 	.word	0x00027793
   27660:	0002779b 	.word	0x0002779b
   27664:	000277a3 	.word	0x000277a3
   27668:	0002758b 	.word	0x0002758b
   2766c:	000277ab 	.word	0x000277ab
   27670:	000277b3 	.word	0x000277b3
   27674:	0002758b 	.word	0x0002758b
   27678:	000277bb 	.word	0x000277bb
   2767c:	000277c3 	.word	0x000277c3
   27680:	000277cb 	.word	0x000277cb
   27684:	0002784b 	.word	0x0002784b
   27688:	000277d3 	.word	0x000277d3
   2768c:	0002758b 	.word	0x0002758b
   27690:	000277db 	.word	0x000277db
   27694:	000277e3 	.word	0x000277e3
   27698:	0002758b 	.word	0x0002758b
   2769c:	0002758b 	.word	0x0002758b
   276a0:	000277eb 	.word	0x000277eb
	switch (err_code) {
   276a4:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   276a8:	2b18      	cmp	r3, #24
   276aa:	f63f af6e 	bhi.w	2758a <bsd_os_errno_set+0xe>
   276ae:	2b18      	cmp	r3, #24
   276b0:	f63f af6b 	bhi.w	2758a <bsd_os_errno_set+0xe>
   276b4:	a201      	add	r2, pc, #4	; (adr r2, 276bc <bsd_os_errno_set+0x140>)
   276b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   276ba:	bf00      	nop
   276bc:	000277f3 	.word	0x000277f3
   276c0:	0002758b 	.word	0x0002758b
   276c4:	0002758b 	.word	0x0002758b
   276c8:	0002758b 	.word	0x0002758b
   276cc:	0002758b 	.word	0x0002758b
   276d0:	0002758b 	.word	0x0002758b
   276d4:	0002758b 	.word	0x0002758b
   276d8:	000277fb 	.word	0x000277fb
   276dc:	0002758b 	.word	0x0002758b
   276e0:	0002780b 	.word	0x0002780b
   276e4:	00027803 	.word	0x00027803
   276e8:	0002758b 	.word	0x0002758b
   276ec:	0002758b 	.word	0x0002758b
   276f0:	0002758b 	.word	0x0002758b
   276f4:	0002758b 	.word	0x0002758b
   276f8:	0002758b 	.word	0x0002758b
   276fc:	0002758b 	.word	0x0002758b
   27700:	0002758b 	.word	0x0002758b
   27704:	0002758b 	.word	0x0002758b
   27708:	0002758b 	.word	0x0002758b
   2770c:	00027813 	.word	0x00027813
   27710:	0002781b 	.word	0x0002781b
   27714:	00027825 	.word	0x00027825
   27718:	0002782f 	.word	0x0002782f
   2771c:	00027839 	.word	0x00027839
		errno = EPERM;
   27720:	f00f fb85 	bl	36e2e <__errno>
   27724:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   27726:	6003      	str	r3, [r0, #0]
}
   27728:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   2772a:	f00f fb80 	bl	36e2e <__errno>
   2772e:	2302      	movs	r3, #2
   27730:	e7f9      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EIO;
   27732:	f00f fb7c 	bl	36e2e <__errno>
   27736:	2305      	movs	r3, #5
   27738:	e7f5      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ENOEXEC;
   2773a:	f00f fb78 	bl	36e2e <__errno>
   2773e:	2308      	movs	r3, #8
   27740:	e7f1      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EBADF;
   27742:	f00f fb74 	bl	36e2e <__errno>
   27746:	2309      	movs	r3, #9
   27748:	e7ed      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ENOMEM;
   2774a:	f00f fb70 	bl	36e2e <__errno>
   2774e:	230c      	movs	r3, #12
   27750:	e7e9      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EACCES;
   27752:	f00f fb6c 	bl	36e2e <__errno>
   27756:	230d      	movs	r3, #13
   27758:	e7e5      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EFAULT;
   2775a:	f00f fb68 	bl	36e2e <__errno>
   2775e:	230e      	movs	r3, #14
   27760:	e7e1      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EINVAL;
   27762:	f00f fb64 	bl	36e2e <__errno>
   27766:	2316      	movs	r3, #22
   27768:	e7dd      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EMFILE;
   2776a:	f00f fb60 	bl	36e2e <__errno>
   2776e:	2318      	movs	r3, #24
   27770:	e7d9      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EAGAIN;
   27772:	f00f fb5c 	bl	36e2e <__errno>
   27776:	230b      	movs	r3, #11
   27778:	e7d5      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EDOM;
   2777a:	f00f fb58 	bl	36e2e <__errno>
   2777e:	2321      	movs	r3, #33	; 0x21
   27780:	e7d1      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EPROTOTYPE;
   27782:	f00f fb54 	bl	36e2e <__errno>
   27786:	236b      	movs	r3, #107	; 0x6b
   27788:	e7cd      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ENOPROTOOPT;
   2778a:	f00f fb50 	bl	36e2e <__errno>
   2778e:	236d      	movs	r3, #109	; 0x6d
   27790:	e7c9      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EPROTONOSUPPORT;
   27792:	f00f fb4c 	bl	36e2e <__errno>
   27796:	237b      	movs	r3, #123	; 0x7b
   27798:	e7c5      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ESOCKTNOSUPPORT;
   2779a:	f00f fb48 	bl	36e2e <__errno>
   2779e:	237c      	movs	r3, #124	; 0x7c
   277a0:	e7c1      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EOPNOTSUPP;
   277a2:	f00f fb44 	bl	36e2e <__errno>
   277a6:	235f      	movs	r3, #95	; 0x5f
   277a8:	e7bd      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EAFNOSUPPORT;
   277aa:	f00f fb40 	bl	36e2e <__errno>
   277ae:	236a      	movs	r3, #106	; 0x6a
   277b0:	e7b9      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EADDRINUSE;
   277b2:	f00f fb3c 	bl	36e2e <__errno>
   277b6:	2370      	movs	r3, #112	; 0x70
   277b8:	e7b5      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ENETDOWN;
   277ba:	f00f fb38 	bl	36e2e <__errno>
   277be:	2373      	movs	r3, #115	; 0x73
   277c0:	e7b1      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ENETUNREACH;
   277c2:	f00f fb34 	bl	36e2e <__errno>
   277c6:	2372      	movs	r3, #114	; 0x72
   277c8:	e7ad      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ENETRESET;
   277ca:	f00f fb30 	bl	36e2e <__errno>
   277ce:	237e      	movs	r3, #126	; 0x7e
   277d0:	e7a9      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ECONNRESET;
   277d2:	f00f fb2c 	bl	36e2e <__errno>
   277d6:	2368      	movs	r3, #104	; 0x68
   277d8:	e7a5      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EISCONN;
   277da:	f00f fb28 	bl	36e2e <__errno>
   277de:	237f      	movs	r3, #127	; 0x7f
   277e0:	e7a1      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ENOTCONN;
   277e2:	f00f fb24 	bl	36e2e <__errno>
   277e6:	2380      	movs	r3, #128	; 0x80
   277e8:	e79d      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ETIMEDOUT;
   277ea:	f00f fb20 	bl	36e2e <__errno>
   277ee:	2374      	movs	r3, #116	; 0x74
   277f0:	e799      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ENOBUFS;
   277f2:	f00f fb1c 	bl	36e2e <__errno>
   277f6:	2369      	movs	r3, #105	; 0x69
   277f8:	e795      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EHOSTDOWN;
   277fa:	f00f fb18 	bl	36e2e <__errno>
   277fe:	2375      	movs	r3, #117	; 0x75
   27800:	e791      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EINPROGRESS;
   27802:	f00f fb14 	bl	36e2e <__errno>
   27806:	2377      	movs	r3, #119	; 0x77
   27808:	e78d      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EALREADY;
   2780a:	f00f fb10 	bl	36e2e <__errno>
   2780e:	2378      	movs	r3, #120	; 0x78
   27810:	e789      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ECANCELED;
   27812:	f00f fb0c 	bl	36e2e <__errno>
   27816:	238c      	movs	r3, #140	; 0x8c
   27818:	e785      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ENOKEY;
   2781a:	f00f fb08 	bl	36e2e <__errno>
   2781e:	f240 73d1 	movw	r3, #2001	; 0x7d1
   27822:	e780      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EKEYEXPIRED;
   27824:	f00f fb03 	bl	36e2e <__errno>
   27828:	f240 73d2 	movw	r3, #2002	; 0x7d2
   2782c:	e77b      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EKEYREVOKED;
   2782e:	f00f fafe 	bl	36e2e <__errno>
   27832:	f240 73d3 	movw	r3, #2003	; 0x7d3
   27836:	e776      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EKEYREJECTED;
   27838:	f00f faf9 	bl	36e2e <__errno>
   2783c:	f240 73d4 	movw	r3, #2004	; 0x7d4
   27840:	e771      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = EMSGSIZE;
   27842:	f00f faf4 	bl	36e2e <__errno>
   27846:	237a      	movs	r3, #122	; 0x7a
   27848:	e76d      	b.n	27726 <bsd_os_errno_set+0x1aa>
		errno = ECONNABORTED;
   2784a:	f00f faf0 	bl	36e2e <__errno>
   2784e:	2371      	movs	r3, #113	; 0x71
   27850:	e769      	b.n	27726 <bsd_os_errno_set+0x1aa>
   27852:	bf00      	nop
   27854:	00039a50 	.word	0x00039a50
   27858:	00039a78 	.word	0x00039a78
   2785c:	0003c0ed 	.word	0x0003c0ed
   27860:	baadbaad 	.word	0xbaadbaad

00027864 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   27864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   27868:	4b01      	ldr	r3, [pc, #4]	; (27870 <bsd_os_application_irq_set+0xc>)
   2786a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2786e:	4770      	bx	lr
   27870:	e000e100 	.word	0xe000e100

00027874 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   27874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   27878:	4b01      	ldr	r3, [pc, #4]	; (27880 <bsd_os_application_irq_clear+0xc>)
   2787a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2787e:	4770      	bx	lr
   27880:	e000e100 	.word	0xe000e100

00027884 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   27884:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   27888:	4b01      	ldr	r3, [pc, #4]	; (27890 <bsd_os_trace_irq_set+0xc>)
   2788a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2788e:	4770      	bx	lr
   27890:	e000e100 	.word	0xe000e100

00027894 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   27894:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   27898:	4b01      	ldr	r3, [pc, #4]	; (278a0 <bsd_os_trace_irq_clear+0xc>)
   2789a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2789e:	4770      	bx	lr
   278a0:	e000e100 	.word	0xe000e100

000278a4 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   278a4:	b508      	push	{r3, lr}
	list->head = NULL;
   278a6:	2300      	movs	r3, #0
   278a8:	4a07      	ldr	r2, [pc, #28]	; (278c8 <bsd_os_init+0x24>)
	list->tail = NULL;
   278aa:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   278ae:	4a07      	ldr	r2, [pc, #28]	; (278cc <bsd_os_init+0x28>)
   278b0:	e8d2 1fef 	ldaex	r1, [r2]
   278b4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   278b8:	2800      	cmp	r0, #0
   278ba:	d1f9      	bne.n	278b0 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   278bc:	f00f ff05 	bl	376ca <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   278c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   278c4:	f00f bef6 	b.w	376b4 <trace_task_create>
   278c8:	20023620 	.word	0x20023620
   278cc:	2002361c 	.word	0x2002361c

000278d0 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   278d0:	f240 2302 	movw	r3, #514	; 0x202
   278d4:	4298      	cmp	r0, r3
   278d6:	f000 8093 	beq.w	27a00 <z_to_nrf_optname+0x130>
   278da:	dc07      	bgt.n	278ec <z_to_nrf_optname+0x1c>
   278dc:	2801      	cmp	r0, #1
   278de:	d04d      	beq.n	2797c <z_to_nrf_optname+0xac>
   278e0:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   278e4:	d034      	beq.n	27950 <z_to_nrf_optname+0x80>
   278e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		retval = -1;
		break;
	}

	return retval;
}
   278ea:	4770      	bx	lr
	switch (z_in_level) {
   278ec:	f240 2303 	movw	r3, #515	; 0x203
   278f0:	4298      	cmp	r0, r3
   278f2:	d1f8      	bne.n	278e6 <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   278f4:	3901      	subs	r1, #1
   278f6:	2913      	cmp	r1, #19
   278f8:	d8f5      	bhi.n	278e6 <z_to_nrf_optname+0x16>
   278fa:	a301      	add	r3, pc, #4	; (adr r3, 27900 <z_to_nrf_optname+0x30>)
   278fc:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   27900:	00027a0f 	.word	0x00027a0f
   27904:	000279e9 	.word	0x000279e9
   27908:	000279ed 	.word	0x000279ed
   2790c:	0002798d 	.word	0x0002798d
   27910:	000279f1 	.word	0x000279f1
   27914:	000279f5 	.word	0x000279f5
   27918:	000279f9 	.word	0x000279f9
   2791c:	000278e7 	.word	0x000278e7
   27920:	000278e7 	.word	0x000278e7
   27924:	000278e7 	.word	0x000278e7
   27928:	000278e7 	.word	0x000278e7
   2792c:	000278e7 	.word	0x000278e7
   27930:	000278e7 	.word	0x000278e7
   27934:	000278e7 	.word	0x000278e7
   27938:	000278e7 	.word	0x000278e7
   2793c:	000278e7 	.word	0x000278e7
   27940:	000278e7 	.word	0x000278e7
   27944:	000278e7 	.word	0x000278e7
   27948:	000278e7 	.word	0x000278e7
   2794c:	000279fd 	.word	0x000279fd
		switch (z_in_optname) {
   27950:	3901      	subs	r1, #1
   27952:	2907      	cmp	r1, #7
   27954:	d8c7      	bhi.n	278e6 <z_to_nrf_optname+0x16>
   27956:	a301      	add	r3, pc, #4	; (adr r3, 2795c <z_to_nrf_optname+0x8c>)
   27958:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2795c:	000279e9 	.word	0x000279e9
   27960:	000279f1 	.word	0x000279f1
   27964:	000279f5 	.word	0x000279f5
   27968:	000279f9 	.word	0x000279f9
   2796c:	0002798d 	.word	0x0002798d
   27970:	00027a0f 	.word	0x00027a0f
   27974:	000278e7 	.word	0x000278e7
   27978:	000279ed 	.word	0x000279ed
		switch (z_in_optname) {
   2797c:	2920      	cmp	r1, #32
   2797e:	dcb2      	bgt.n	278e6 <z_to_nrf_optname+0x16>
   27980:	2913      	cmp	r1, #19
   27982:	dc05      	bgt.n	27990 <z_to_nrf_optname+0xc0>
   27984:	2902      	cmp	r1, #2
   27986:	d027      	beq.n	279d8 <z_to_nrf_optname+0x108>
   27988:	2904      	cmp	r1, #4
   2798a:	d1ac      	bne.n	278e6 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   2798c:	2304      	movs	r3, #4
   2798e:	e03f      	b.n	27a10 <z_to_nrf_optname+0x140>
   27990:	3914      	subs	r1, #20
   27992:	290c      	cmp	r1, #12
   27994:	d8a7      	bhi.n	278e6 <z_to_nrf_optname+0x16>
   27996:	a301      	add	r3, pc, #4	; (adr r3, 2799c <z_to_nrf_optname+0xcc>)
   27998:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2799c:	000279fd 	.word	0x000279fd
   279a0:	000279d1 	.word	0x000279d1
   279a4:	000278e7 	.word	0x000278e7
   279a8:	000278e7 	.word	0x000278e7
   279ac:	000278e7 	.word	0x000278e7
   279b0:	000279d5 	.word	0x000279d5
   279b4:	000278e7 	.word	0x000278e7
   279b8:	000278e7 	.word	0x000278e7
   279bc:	000278e7 	.word	0x000278e7
   279c0:	000278e7 	.word	0x000278e7
   279c4:	000279dd 	.word	0x000279dd
   279c8:	000279e1 	.word	0x000279e1
   279cc:	000279e5 	.word	0x000279e5
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   279d0:	2315      	movs	r3, #21
   279d2:	e01d      	b.n	27a10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   279d4:	2319      	movs	r3, #25
   279d6:	e01b      	b.n	27a10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   279d8:	2328      	movs	r3, #40	; 0x28
   279da:	e019      	b.n	27a10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   279dc:	231e      	movs	r3, #30
   279de:	e017      	b.n	27a10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   279e0:	231f      	movs	r3, #31
   279e2:	e015      	b.n	27a10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   279e4:	2320      	movs	r3, #32
   279e6:	e013      	b.n	27a10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   279e8:	2302      	movs	r3, #2
   279ea:	e011      	b.n	27a10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   279ec:	2303      	movs	r3, #3
   279ee:	e00f      	b.n	27a10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   279f0:	2305      	movs	r3, #5
   279f2:	e00d      	b.n	27a10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   279f4:	2306      	movs	r3, #6
   279f6:	e00b      	b.n	27a10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   279f8:	2307      	movs	r3, #7
   279fa:	e009      	b.n	27a10 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   279fc:	2314      	movs	r3, #20
   279fe:	e007      	b.n	27a10 <z_to_nrf_optname+0x140>
		switch (z_in_optname) {
   27a00:	2902      	cmp	r1, #2
   27a02:	d0f1      	beq.n	279e8 <z_to_nrf_optname+0x118>
   27a04:	2903      	cmp	r1, #3
   27a06:	d0f1      	beq.n	279ec <z_to_nrf_optname+0x11c>
   27a08:	2901      	cmp	r1, #1
   27a0a:	f47f af6c 	bne.w	278e6 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   27a0e:	2301      	movs	r3, #1
	int retval = 0;
   27a10:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   27a12:	6013      	str	r3, [r2, #0]
			break;
   27a14:	4770      	bx	lr
   27a16:	bf00      	nop

00027a18 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   27a18:	f240 1303 	movw	r3, #259	; 0x103
{
   27a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   27a20:	4299      	cmp	r1, r3
{
   27a22:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   27a24:	f000 8097 	beq.w	27b56 <nrf91_socket_offload_ioctl+0x13e>
   27a28:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   27a2c:	d005      	beq.n	27a3a <nrf91_socket_offload_ioctl+0x22>
   27a2e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   27a32:	d171      	bne.n	27b18 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   27a34:	f06f 0411 	mvn.w	r4, #17
   27a38:	e01d      	b.n	27a76 <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   27a3a:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   27a3e:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   27a42:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   27a44:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   27a48:	4668      	mov	r0, sp
   27a4a:	2240      	movs	r2, #64	; 0x40
   27a4c:	f011 f897 	bl	38b7e <memset>
	for (int i = 0; i < nfds; i++) {
   27a50:	466e      	mov	r6, sp
   27a52:	4655      	mov	r5, sl
   27a54:	4657      	mov	r7, sl
	int retval = 0;
   27a56:	4644      	mov	r4, r8
		tmp[i].events = 0;
   27a58:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   27a5a:	4940      	ldr	r1, [pc, #256]	; (27b5c <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   27a5c:	45c1      	cmp	r9, r8
   27a5e:	dc0e      	bgt.n	27a7e <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   27a60:	2c00      	cmp	r4, #0
   27a62:	dc08      	bgt.n	27a76 <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   27a64:	465a      	mov	r2, fp
   27a66:	4649      	mov	r1, r9
   27a68:	4668      	mov	r0, sp
   27a6a:	f009 faf7 	bl	3105c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   27a6e:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   27a70:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   27a72:	4599      	cmp	r9, r3
   27a74:	dc28      	bgt.n	27ac8 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   27a76:	4620      	mov	r0, r4
   27a78:	b011      	add	sp, #68	; 0x44
   27a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   27a7e:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   27a80:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   27a82:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   27a84:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   27a86:	da05      	bge.n	27a94 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   27a88:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   27a8a:	f108 0801 	add.w	r8, r8, #1
   27a8e:	3608      	adds	r6, #8
   27a90:	3708      	adds	r7, #8
   27a92:	e7e3      	b.n	27a5c <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   27a94:	2286      	movs	r2, #134	; 0x86
   27a96:	f7fa fd85 	bl	225a4 <z_get_fd_obj>
			if (obj != NULL) {
   27a9a:	2300      	movs	r3, #0
   27a9c:	492f      	ldr	r1, [pc, #188]	; (27b5c <nrf91_socket_offload_ioctl+0x144>)
   27a9e:	b178      	cbz	r0, 27ac0 <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   27aa0:	3801      	subs	r0, #1
   27aa2:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   27aa4:	88b8      	ldrh	r0, [r7, #4]
   27aa6:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   27aa8:	bf42      	ittt	mi
   27aaa:	88b2      	ldrhmi	r2, [r6, #4]
   27aac:	f042 0201 	orrmi.w	r2, r2, #1
   27ab0:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   27ab2:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   27ab4:	bf42      	ittt	mi
   27ab6:	88b2      	ldrhmi	r2, [r6, #4]
   27ab8:	f042 0202 	orrmi.w	r2, r2, #2
   27abc:	80b2      	strhmi	r2, [r6, #4]
   27abe:	e7e4      	b.n	27a8a <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   27ac0:	2220      	movs	r2, #32
				retval++;
   27ac2:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   27ac4:	80fa      	strh	r2, [r7, #6]
				retval++;
   27ac6:	e7ed      	b.n	27aa4 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   27ac8:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   27acc:	2a00      	cmp	r2, #0
   27ace:	db20      	blt.n	27b12 <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   27ad0:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   27ad4:	88d2      	ldrh	r2, [r2, #6]
   27ad6:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   27ad8:	bf42      	ittt	mi
   27ada:	88e9      	ldrhmi	r1, [r5, #6]
   27adc:	f041 0101 	orrmi.w	r1, r1, #1
   27ae0:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   27ae2:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   27ae4:	bf42      	ittt	mi
   27ae6:	88e9      	ldrhmi	r1, [r5, #6]
   27ae8:	f041 0104 	orrmi.w	r1, r1, #4
   27aec:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   27aee:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   27af0:	bf42      	ittt	mi
   27af2:	88e9      	ldrhmi	r1, [r5, #6]
   27af4:	f041 0108 	orrmi.w	r1, r1, #8
   27af8:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   27afa:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   27afc:	bf42      	ittt	mi
   27afe:	88e9      	ldrhmi	r1, [r5, #6]
   27b00:	f041 0120 	orrmi.w	r1, r1, #32
   27b04:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   27b06:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   27b08:	bf42      	ittt	mi
   27b0a:	88ea      	ldrhmi	r2, [r5, #6]
   27b0c:	f042 0210 	orrmi.w	r2, r2, #16
   27b10:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   27b12:	3301      	adds	r3, #1
   27b14:	3508      	adds	r5, #8
   27b16:	e7ac      	b.n	27a72 <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   27b18:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   27b1a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
	switch (cmd) {
   27b1e:	d00b      	beq.n	27b38 <nrf91_socket_offload_ioctl+0x120>
   27b20:	2904      	cmp	r1, #4
   27b22:	d111      	bne.n	27b48 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   27b24:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   27b26:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   27b2a:	d10d      	bne.n	27b48 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   27b2c:	2101      	movs	r1, #1
   27b2e:	1392      	asrs	r2, r2, #14
   27b30:	f009 fa96 	bl	31060 <nrf_fcntl>
   27b34:	4604      	mov	r4, r0
		break;
   27b36:	e79e      	b.n	27a76 <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   27b38:	2200      	movs	r2, #0
   27b3a:	2102      	movs	r1, #2
   27b3c:	f009 fa90 	bl	31060 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   27b40:	0380      	lsls	r0, r0, #14
   27b42:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   27b46:	e796      	b.n	27a76 <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   27b48:	f00f f971 	bl	36e2e <__errno>
   27b4c:	2316      	movs	r3, #22
	return retval;
   27b4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   27b52:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   27b54:	e78f      	b.n	27a76 <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   27b56:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   27b5a:	e78c      	b.n	27a76 <nrf91_socket_offload_ioctl+0x5e>
   27b5c:	00039f90 	.word	0x00039f90

00027b60 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   27b60:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   27b62:	4b03      	ldr	r3, [pc, #12]	; (27b70 <nrf91_socket_iface_init+0x10>)
   27b64:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   27b66:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   27b68:	4802      	ldr	r0, [pc, #8]	; (27b74 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   27b6a:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   27b6c:	f7fc bc26 	b.w	243bc <socket_offload_dns_register>
   27b70:	20023678 	.word	0x20023678
   27b74:	00039f88 	.word	0x00039f88

00027b78 <nrf91_socket_offload_accept>:
{
   27b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27b7c:	b08a      	sub	sp, #40	; 0x28
   27b7e:	4607      	mov	r7, r0
   27b80:	460c      	mov	r4, r1
   27b82:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   27b84:	f7fa fd3e 	bl	22604 <z_reserve_fd>
   27b88:	4606      	mov	r6, r0
	if (fd < 0) {
   27b8a:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   27b8c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
	if (fd < 0) {
   27b90:	da05      	bge.n	27b9e <nrf91_socket_offload_accept+0x26>
	return -1;
   27b92:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
   27b96:	4630      	mov	r0, r6
   27b98:	b00a      	add	sp, #40	; 0x28
   27b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   27b9e:	b31c      	cbz	r4, 27be8 <nrf91_socket_offload_accept+0x70>
   27ba0:	b32d      	cbz	r5, 27bee <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   27ba2:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   27ba4:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   27ba6:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   27ba8:	bf0c      	ite	eq
   27baa:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   27bac:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   27bae:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   27bb0:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   27bb2:	4639      	mov	r1, r7
   27bb4:	f009 f9ee 	bl	30f94 <nrf_accept>
	if (new_sd < 0) {
   27bb8:	f1b0 0800 	subs.w	r8, r0, #0
   27bbc:	dbe9      	blt.n	27b92 <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   27bbe:	b164      	cbz	r4, 27bda <nrf91_socket_offload_accept+0x62>
   27bc0:	b15d      	cbz	r5, 27bda <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   27bc2:	687b      	ldr	r3, [r7, #4]
   27bc4:	2b02      	cmp	r3, #2
   27bc6:	d115      	bne.n	27bf4 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   27bc8:	2308      	movs	r3, #8
   27bca:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   27bcc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   27bd0:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   27bd2:	2301      	movs	r3, #1
   27bd4:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   27bd6:	9b04      	ldr	r3, [sp, #16]
   27bd8:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   27bda:	4630      	mov	r0, r6
   27bdc:	4a0c      	ldr	r2, [pc, #48]	; (27c10 <nrf91_socket_offload_accept+0x98>)
   27bde:	f108 0101 	add.w	r1, r8, #1
   27be2:	f7fa fd41 	bl	22668 <z_finalize_fd>
	return fd;
   27be6:	e7d6      	b.n	27b96 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   27be8:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   27bea:	4627      	mov	r7, r4
   27bec:	e7e1      	b.n	27bb2 <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   27bee:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   27bf0:	462f      	mov	r7, r5
   27bf2:	e7de      	b.n	27bb2 <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   27bf4:	2b0a      	cmp	r3, #10
   27bf6:	d106      	bne.n	27c06 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   27bf8:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   27bfa:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   27bfc:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   27bfe:	a901      	add	r1, sp, #4
   27c00:	f00f fe65 	bl	378ce <nrf_to_z_ipv6>
   27c04:	e7e9      	b.n	27bda <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   27c06:	4630      	mov	r0, r6
   27c08:	f7fa fd38 	bl	2267c <z_free_fd>
   27c0c:	e7c1      	b.n	27b92 <nrf91_socket_offload_accept+0x1a>
   27c0e:	bf00      	nop
   27c10:	00039f90 	.word	0x00039f90

00027c14 <nrf91_socket_offload_sendmsg>:
{
   27c14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   27c18:	4680      	mov	r8, r0
   27c1a:	4691      	mov	r9, r2
	if (msg == NULL) {
   27c1c:	460c      	mov	r4, r1
   27c1e:	b1f9      	cbz	r1, 27c60 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   27c20:	2300      	movs	r3, #0
	ssize_t len = 0;
   27c22:	461a      	mov	r2, r3
   27c24:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   27c26:	4283      	cmp	r3, r0
   27c28:	d124      	bne.n	27c74 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   27c2a:	2a80      	cmp	r2, #128	; 0x80
   27c2c:	d86d      	bhi.n	27d0a <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   27c2e:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   27c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27c38:	4836      	ldr	r0, [pc, #216]	; (27d14 <nrf91_socket_offload_sendmsg+0x100>)
   27c3a:	f00b fc8f 	bl	3355c <z_impl_k_mutex_lock>
		len = 0;
   27c3e:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   27c40:	4e35      	ldr	r6, [pc, #212]	; (27d18 <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   27c42:	68e3      	ldr	r3, [r4, #12]
   27c44:	429d      	cmp	r5, r3
   27c46:	d31c      	bcc.n	27c82 <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   27c48:	2600      	movs	r6, #0
		ret = 0;
   27c4a:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   27c4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 27d18 <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   27c50:	42b7      	cmp	r7, r6
   27c52:	dd01      	ble.n	27c58 <nrf91_socket_offload_sendmsg+0x44>
   27c54:	2d00      	cmp	r5, #0
   27c56:	da25      	bge.n	27ca4 <nrf91_socket_offload_sendmsg+0x90>
	return z_impl_k_mutex_unlock(mutex);
   27c58:	482e      	ldr	r0, [pc, #184]	; (27d14 <nrf91_socket_offload_sendmsg+0x100>)
   27c5a:	f00b fcf7 	bl	3364c <z_impl_k_mutex_unlock>
		return ret;
   27c5e:	e005      	b.n	27c6c <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   27c60:	f00f f8e5 	bl	36e2e <__errno>
   27c64:	2316      	movs	r3, #22
		return -1;
   27c66:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		errno = EINVAL;
   27c6a:	6003      	str	r3, [r0, #0]
}
   27c6c:	4628      	mov	r0, r5
   27c6e:	b002      	add	sp, #8
   27c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   27c74:	68a1      	ldr	r1, [r4, #8]
   27c76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   27c7a:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   27c7c:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   27c7e:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   27c80:	e7d1      	b.n	27c26 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   27c82:	68a1      	ldr	r1, [r4, #8]
   27c84:	19f0      	adds	r0, r6, r7
   27c86:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   27c8a:	685a      	ldr	r2, [r3, #4]
   27c8c:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   27c90:	f010 ff55 	bl	38b3e <memcpy>
			len += msg->msg_iov[i].iov_len;
   27c94:	68a3      	ldr	r3, [r4, #8]
   27c96:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   27c9a:	4453      	add	r3, sl
   27c9c:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   27c9e:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   27ca0:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   27ca2:	e7ce      	b.n	27c42 <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   27ca4:	6863      	ldr	r3, [r4, #4]
   27ca6:	1bba      	subs	r2, r7, r6
   27ca8:	9301      	str	r3, [sp, #4]
   27caa:	6823      	ldr	r3, [r4, #0]
   27cac:	eb0a 0106 	add.w	r1, sl, r6
   27cb0:	9300      	str	r3, [sp, #0]
   27cb2:	4640      	mov	r0, r8
   27cb4:	464b      	mov	r3, r9
   27cb6:	f00f ff68 	bl	37b8a <nrf91_socket_offload_sendto>
			if (ret > 0) {
   27cba:	1e05      	subs	r5, r0, #0
				offset += ret;
   27cbc:	bfc8      	it	gt
   27cbe:	1976      	addgt	r6, r6, r5
   27cc0:	e7c6      	b.n	27c50 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   27cc2:	68a3      	ldr	r3, [r4, #8]
   27cc4:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   27cc8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   27ccc:	685b      	ldr	r3, [r3, #4]
   27cce:	b133      	cbz	r3, 27cde <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   27cd0:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   27cd2:	68a3      	ldr	r3, [r4, #8]
   27cd4:	eb03 020a 	add.w	r2, r3, sl
   27cd8:	6852      	ldr	r2, [r2, #4]
   27cda:	4297      	cmp	r7, r2
   27cdc:	d304      	bcc.n	27ce8 <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   27cde:	3601      	adds	r6, #1
   27ce0:	68e3      	ldr	r3, [r4, #12]
   27ce2:	429e      	cmp	r6, r3
   27ce4:	d3ed      	bcc.n	27cc2 <nrf91_socket_offload_sendmsg+0xae>
   27ce6:	e7c1      	b.n	27c6c <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   27ce8:	f853 100a 	ldr.w	r1, [r3, sl]
   27cec:	6863      	ldr	r3, [r4, #4]
   27cee:	4640      	mov	r0, r8
   27cf0:	9301      	str	r3, [sp, #4]
   27cf2:	6823      	ldr	r3, [r4, #0]
   27cf4:	1bd2      	subs	r2, r2, r7
   27cf6:	9300      	str	r3, [sp, #0]
   27cf8:	4439      	add	r1, r7
   27cfa:	464b      	mov	r3, r9
   27cfc:	f00f ff45 	bl	37b8a <nrf91_socket_offload_sendto>
			if (ret < 0) {
   27d00:	1e03      	subs	r3, r0, #0
   27d02:	db05      	blt.n	27d10 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   27d04:	441f      	add	r7, r3
			len += ret;
   27d06:	441d      	add	r5, r3
   27d08:	e7e3      	b.n	27cd2 <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   27d0a:	2600      	movs	r6, #0
	len = 0;
   27d0c:	4635      	mov	r5, r6
   27d0e:	e7e7      	b.n	27ce0 <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   27d10:	461d      	mov	r5, r3
   27d12:	e7ab      	b.n	27c6c <nrf91_socket_offload_sendmsg+0x58>
   27d14:	200207d0 	.word	0x200207d0
   27d18:	2002bbcb 	.word	0x2002bbcb

00027d1c <nrf91_socket_create>:
{
   27d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27d1e:	4606      	mov	r6, r0
   27d20:	460d      	mov	r5, r1
   27d22:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   27d24:	f7fa fc6e 	bl	22604 <z_reserve_fd>
	if (fd < 0) {
   27d28:	1e04      	subs	r4, r0, #0
   27d2a:	db0d      	blt.n	27d48 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   27d2c:	b2b0      	uxth	r0, r6
   27d2e:	f00f fceb 	bl	37708 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   27d32:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   27d36:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   27d38:	d109      	bne.n	27d4e <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   27d3a:	f00f f878 	bl	36e2e <__errno>
   27d3e:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   27d40:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   27d42:	4620      	mov	r0, r4
   27d44:	f7fa fc9a 	bl	2267c <z_free_fd>
		return -1;
   27d48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27d4c:	e01b      	b.n	27d86 <nrf91_socket_create+0x6a>
	switch (socktype) {
   27d4e:	2d03      	cmp	r5, #3
   27d50:	d003      	beq.n	27d5a <nrf91_socket_create+0x3e>
   27d52:	2d04      	cmp	r5, #4
   27d54:	bf08      	it	eq
   27d56:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   27d5a:	4638      	mov	r0, r7
   27d5c:	f00f fcf0 	bl	37740 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   27d60:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   27d64:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   27d66:	d103      	bne.n	27d70 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   27d68:	f00f f861 	bl	36e2e <__errno>
   27d6c:	237b      	movs	r3, #123	; 0x7b
   27d6e:	e7e7      	b.n	27d40 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   27d70:	4629      	mov	r1, r5
   27d72:	4630      	mov	r0, r6
   27d74:	f009 f860 	bl	30e38 <nrf_socket>
	if (sd < 0) {
   27d78:	1e01      	subs	r1, r0, #0
   27d7a:	dbe2      	blt.n	27d42 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   27d7c:	4620      	mov	r0, r4
   27d7e:	4a03      	ldr	r2, [pc, #12]	; (27d8c <nrf91_socket_create+0x70>)
   27d80:	3101      	adds	r1, #1
   27d82:	f7fa fc71 	bl	22668 <z_finalize_fd>
}
   27d86:	4620      	mov	r0, r4
   27d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27d8a:	bf00      	nop
   27d8c:	00039f90 	.word	0x00039f90

00027d90 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   27d90:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   27d92:	f240 2201 	movw	r2, #513	; 0x201
   27d96:	2102      	movs	r1, #2
   27d98:	2066      	movs	r0, #102	; 0x66
   27d9a:	f7fc f9ed 	bl	24178 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   27d9e:	4b05      	ldr	r3, [pc, #20]	; (27db4 <open_socket+0x24>)
   27da0:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   27da2:	3001      	adds	r0, #1
   27da4:	d104      	bne.n	27db0 <open_socket+0x20>
		return -errno;
   27da6:	f00f f842 	bl	36e2e <__errno>
   27daa:	6800      	ldr	r0, [r0, #0]
   27dac:	4240      	negs	r0, r0
	}

	return 0;
}
   27dae:	bd08      	pop	{r3, pc}
	return 0;
   27db0:	2000      	movs	r0, #0
   27db2:	e7fc      	b.n	27dae <open_socket+0x1e>
   27db4:	20023680 	.word	0x20023680

00027db8 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   27db8:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   27dba:	4d17      	ldr	r5, [pc, #92]	; (27e18 <at_cmd_driver_init+0x60>)
{
   27dbc:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   27dbe:	782b      	ldrb	r3, [r5, #0]
   27dc0:	bb43      	cbnz	r3, 27e14 <at_cmd_driver_init+0x5c>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   27dc2:	f7ff ffe5 	bl	27d90 <open_socket>
	if (err) {
   27dc6:	4604      	mov	r4, r0
   27dc8:	b168      	cbz	r0, 27de6 <at_cmd_driver_init+0x2e>
   27dca:	4a14      	ldr	r2, [pc, #80]	; (27e1c <at_cmd_driver_init+0x64>)
   27dcc:	4b14      	ldr	r3, [pc, #80]	; (27e20 <at_cmd_driver_init+0x68>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   27dce:	4601      	mov	r1, r0
   27dd0:	1ad2      	subs	r2, r2, r3
   27dd2:	08d2      	lsrs	r2, r2, #3
   27dd4:	0192      	lsls	r2, r2, #6
   27dd6:	4813      	ldr	r0, [pc, #76]	; (27e24 <at_cmd_driver_init+0x6c>)
   27dd8:	f042 0201 	orr.w	r2, r2, #1
   27ddc:	f00e f92f 	bl	3603e <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   27de0:	4620      	mov	r0, r4
   27de2:	b009      	add	sp, #36	; 0x24
   27de4:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   27de6:	2200      	movs	r2, #0
   27de8:	2300      	movs	r3, #0
   27dea:	e9cd 2306 	strd	r2, r3, [sp, #24]
   27dee:	230a      	movs	r3, #10
   27df0:	e9cd 0000 	strd	r0, r0, [sp]
   27df4:	e9cd 0302 	strd	r0, r3, [sp, #8]
   27df8:	9004      	str	r0, [sp, #16]
   27dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   27dfe:	4b0a      	ldr	r3, [pc, #40]	; (27e28 <at_cmd_driver_init+0x70>)
   27e00:	490a      	ldr	r1, [pc, #40]	; (27e2c <at_cmd_driver_init+0x74>)
   27e02:	480b      	ldr	r0, [pc, #44]	; (27e30 <at_cmd_driver_init+0x78>)
   27e04:	f00c f8fc 	bl	34000 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   27e08:	490a      	ldr	r1, [pc, #40]	; (27e34 <at_cmd_driver_init+0x7c>)
   27e0a:	f010 fbed 	bl	385e8 <z_impl_k_thread_name_set>
	initialized = true;
   27e0e:	2301      	movs	r3, #1
   27e10:	702b      	strb	r3, [r5, #0]
	return 0;
   27e12:	e7e5      	b.n	27de0 <at_cmd_driver_init+0x28>
		return 0;
   27e14:	2400      	movs	r4, #0
   27e16:	e7e3      	b.n	27de0 <at_cmd_driver_init+0x28>
   27e18:	2002c6d7 	.word	0x2002c6d7
   27e1c:	00039a60 	.word	0x00039a60
   27e20:	00039a50 	.word	0x00039a50
   27e24:	0003c126 	.word	0x0003c126
   27e28:	00027f59 	.word	0x00027f59
   27e2c:	2002e7e0 	.word	0x2002e7e0
   27e30:	20021688 	.word	0x20021688
   27e34:	0003c148 	.word	0x0003c148

00027e38 <complete_cmd>:
{
   27e38:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   27e3a:	4c08      	ldr	r4, [pc, #32]	; (27e5c <complete_cmd+0x24>)
   27e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27e44:	4620      	mov	r0, r4
   27e46:	f00b fb89 	bl	3355c <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   27e4a:	2200      	movs	r2, #0
   27e4c:	4b04      	ldr	r3, [pc, #16]	; (27e60 <complete_cmd+0x28>)
   27e4e:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   27e50:	4620      	mov	r0, r4
}
   27e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27e56:	f00b bbf9 	b.w	3364c <z_impl_k_mutex_unlock>
   27e5a:	bf00      	nop
   27e5c:	2002076c 	.word	0x2002076c
   27e60:	20023684 	.word	0x20023684

00027e64 <load_cmd_and_write>:
{
   27e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27e68:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   27e6a:	4e32      	ldr	r6, [pc, #200]	; (27f34 <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   27e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27e70:	4637      	mov	r7, r6
   27e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27e76:	4830      	ldr	r0, [pc, #192]	; (27f38 <load_cmd_and_write+0xd4>)
   27e78:	f00b fb70 	bl	3355c <z_impl_k_mutex_lock>
   27e7c:	4d2f      	ldr	r5, [pc, #188]	; (27f3c <load_cmd_and_write+0xd8>)
   27e7e:	4b30      	ldr	r3, [pc, #192]	; (27f40 <load_cmd_and_write+0xdc>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   27e80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 27f54 <load_cmd_and_write+0xf0>
   27e84:	1aed      	subs	r5, r5, r3
   27e86:	08ed      	lsrs	r5, r5, #3
   27e88:	6833      	ldr	r3, [r6, #0]
   27e8a:	2b00      	cmp	r3, #0
   27e8c:	d14b      	bne.n	27f26 <load_cmd_and_write+0xc2>
   27e8e:	2200      	movs	r2, #0
   27e90:	2300      	movs	r3, #0
   27e92:	4631      	mov	r1, r6
   27e94:	4640      	mov	r0, r8
   27e96:	f00b fb03 	bl	334a0 <z_impl_k_msgq_get>
   27e9a:	4604      	mov	r4, r0
   27e9c:	2800      	cmp	r0, #0
   27e9e:	d142      	bne.n	27f26 <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   27ea0:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   27ea2:	4608      	mov	r0, r1
   27ea4:	9103      	str	r1, [sp, #12]
   27ea6:	f7f5 f8e3 	bl	1d070 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   27eaa:	4b26      	ldr	r3, [pc, #152]	; (27f44 <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   27eac:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   27eae:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   27eb0:	9903      	ldr	r1, [sp, #12]
   27eb2:	4623      	mov	r3, r4
   27eb4:	e9cd 4400 	strd	r4, r4, [sp]
   27eb8:	9202      	str	r2, [sp, #8]
   27eba:	f00e fd21 	bl	36900 <z_impl_zsock_sendto>
   27ebe:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   27ec0:	1c48      	adds	r0, r1, #1
   27ec2:	9a02      	ldr	r2, [sp, #8]
   27ec4:	d126      	bne.n	27f14 <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   27ec6:	f00e ffb2 	bl	36e2e <__errno>
   27eca:	01ac      	lsls	r4, r5, #6
   27ecc:	f044 0401 	orr.w	r4, r4, #1
   27ed0:	4622      	mov	r2, r4
   27ed2:	6801      	ldr	r1, [r0, #0]
   27ed4:	481c      	ldr	r0, [pc, #112]	; (27f48 <load_cmd_and_write+0xe4>)
   27ed6:	f00e f8b2 	bl	3603e <log_1>
		return -errno;
   27eda:	f00e ffa8 	bl	36e2e <__errno>
   27ede:	6804      	ldr	r4, [r0, #0]
   27ee0:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   27ee2:	7c3b      	ldrb	r3, [r7, #16]
   27ee4:	07da      	lsls	r2, r3, #31
   27ee6:	d502      	bpl.n	27eee <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   27ee8:	6838      	ldr	r0, [r7, #0]
   27eea:	f010 fdeb 	bl	38ac4 <k_free>
		if (ret != 0) {
   27eee:	b1d4      	cbz	r4, 27f26 <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   27ef0:	2305      	movs	r3, #5
   27ef2:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   27ef6:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   27ef8:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   27efa:	079b      	lsls	r3, r3, #30
   27efc:	d507      	bpl.n	27f0e <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   27efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27f06:	4811      	ldr	r0, [pc, #68]	; (27f4c <load_cmd_and_write+0xe8>)
   27f08:	a904      	add	r1, sp, #16
   27f0a:	f00b fa75 	bl	333f8 <z_impl_k_msgq_put>
			complete_cmd();
   27f0e:	f7ff ff93 	bl	27e38 <complete_cmd>
	} while (ret != 0);
   27f12:	e7b9      	b.n	27e88 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   27f14:	428a      	cmp	r2, r1
   27f16:	d0e4      	beq.n	27ee2 <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   27f18:	01ab      	lsls	r3, r5, #6
   27f1a:	480d      	ldr	r0, [pc, #52]	; (27f50 <load_cmd_and_write+0xec>)
   27f1c:	f043 0302 	orr.w	r3, r3, #2
   27f20:	f00e f8a4 	bl	3606c <log_2>
   27f24:	e7dd      	b.n	27ee2 <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   27f26:	4804      	ldr	r0, [pc, #16]	; (27f38 <load_cmd_and_write+0xd4>)
   27f28:	f00b fb90 	bl	3364c <z_impl_k_mutex_unlock>
}
   27f2c:	b006      	add	sp, #24
   27f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27f32:	bf00      	nop
   27f34:	20023684 	.word	0x20023684
   27f38:	2002076c 	.word	0x2002076c
   27f3c:	00039a60 	.word	0x00039a60
   27f40:	00039a50 	.word	0x00039a50
   27f44:	20023680 	.word	0x20023680
   27f48:	0003c15d 	.word	0x0003c15d
   27f4c:	2002080c 	.word	0x2002080c
   27f50:	0003c180 	.word	0x0003c180
   27f54:	200207e4 	.word	0x200207e4

00027f58 <socket_thread_fn>:
{
   27f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   27f5c:	f8df 9260 	ldr.w	r9, [pc, #608]	; 281c0 <socket_thread_fn+0x268>
   27f60:	4f83      	ldr	r7, [pc, #524]	; (28170 <socket_thread_fn+0x218>)
   27f62:	46ca      	mov	sl, r9
   27f64:	4b83      	ldr	r3, [pc, #524]	; (28174 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   27f66:	4e84      	ldr	r6, [pc, #528]	; (28178 <socket_thread_fn+0x220>)
   27f68:	1aff      	subs	r7, r7, r3
   27f6a:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   27f6c:	f7ff ff7a 	bl	27e64 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   27f70:	f8d9 0000 	ldr.w	r0, [r9]
   27f74:	2500      	movs	r5, #0
   27f76:	f640 228c 	movw	r2, #2700	; 0xa8c
   27f7a:	462b      	mov	r3, r5
   27f7c:	e9cd 5500 	strd	r5, r5, [sp]
   27f80:	497d      	ldr	r1, [pc, #500]	; (28178 <socket_thread_fn+0x220>)
   27f82:	f00e fcda 	bl	3693a <z_impl_zsock_recvfrom>
		ret.code  = 0;
   27f86:	4c7d      	ldr	r4, [pc, #500]	; (2817c <socket_thread_fn+0x224>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   27f88:	f8df b238 	ldr.w	fp, [pc, #568]	; 281c4 <socket_thread_fn+0x26c>
		if (bytes_read < 0) {
   27f8c:	42a8      	cmp	r0, r5
   27f8e:	4680      	mov	r8, r0
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   27f90:	f8cb 0000 	str.w	r0, [fp]
		ret.code  = 0;
   27f94:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   27f96:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   27f98:	da6a      	bge.n	28070 <socket_thread_fn+0x118>
			if (errno == EHOSTDOWN) {
   27f9a:	f00e ff48 	bl	36e2e <__errno>
   27f9e:	6803      	ldr	r3, [r0, #0]
   27fa0:	2b75      	cmp	r3, #117	; 0x75
   27fa2:	d122      	bne.n	27fea <socket_thread_fn+0x92>
   27fa4:	2301      	movs	r3, #1
   27fa6:	4c76      	ldr	r4, [pc, #472]	; (28180 <socket_thread_fn+0x228>)
   27fa8:	e8d4 2fef 	ldaex	r2, [r4]
   27fac:	e8c4 3fe1 	stlex	r1, r3, [r4]
   27fb0:	2900      	cmp	r1, #0
   27fb2:	d1f9      	bne.n	27fa8 <socket_thread_fn+0x50>
				close(common_socket_fd);
   27fb4:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   27fb8:	f00e fc35 	bl	36826 <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   27fbc:	f7ff f98e 	bl	272dc <bsdlib_shutdown_wait>
   27fc0:	e8d4 3fef 	ldaex	r3, [r4]
   27fc4:	e8c4 5fe2 	stlex	r2, r5, [r4]
   27fc8:	2a00      	cmp	r2, #0
   27fca:	d1f9      	bne.n	27fc0 <socket_thread_fn+0x68>
				if (open_socket() != 0) {
   27fcc:	f7ff fee0 	bl	27d90 <open_socket>
   27fd0:	2800      	cmp	r0, #0
   27fd2:	d0cb      	beq.n	27f6c <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   27fd4:	f00e ff2b 	bl	36e2e <__errno>
   27fd8:	01bc      	lsls	r4, r7, #6
   27fda:	f044 0401 	orr.w	r4, r4, #1
   27fde:	6801      	ldr	r1, [r0, #0]
   27fe0:	4622      	mov	r2, r4
   27fe2:	4868      	ldr	r0, [pc, #416]	; (28184 <socket_thread_fn+0x22c>)
   27fe4:	f00e f82b 	bl	3603e <log_1>
   27fe8:	e7c0      	b.n	27f6c <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   27fea:	01bd      	lsls	r5, r7, #6
   27fec:	f8db 1000 	ldr.w	r1, [fp]
   27ff0:	4865      	ldr	r0, [pc, #404]	; (28188 <socket_thread_fn+0x230>)
   27ff2:	f045 0201 	orr.w	r2, r5, #1
   27ff6:	f00e f822 	bl	3603e <log_1>
			if ((close(common_socket_fd) == 0) &&
   27ffa:	f8d9 0000 	ldr.w	r0, [r9]
   27ffe:	f00e fc12 	bl	36826 <z_impl_zsock_close>
   28002:	bb28      	cbnz	r0, 28050 <socket_thread_fn+0xf8>
			    (open_socket() == 0)) {
   28004:	f7ff fec4 	bl	27d90 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   28008:	bb10      	cbnz	r0, 28050 <socket_thread_fn+0xf8>
				LOG_INF("AT socket recovered");
   2800a:	4860      	ldr	r0, [pc, #384]	; (2818c <socket_thread_fn+0x234>)
   2800c:	f045 0103 	orr.w	r1, r5, #3
   28010:	f00e f806 	bl	36020 <log_0>
				ret.state = AT_CMD_ERROR_READ;
   28014:	2306      	movs	r3, #6
   28016:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   28018:	f00e ff09 	bl	36e2e <__errno>
   2801c:	6803      	ldr	r3, [r0, #0]
   2801e:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   28020:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   28022:	4b5b      	ldr	r3, [pc, #364]	; (28190 <socket_thread_fn+0x238>)
   28024:	681a      	ldr	r2, [r3, #0]
   28026:	b16a      	cbz	r2, 28044 <socket_thread_fn+0xec>
   28028:	7c1b      	ldrb	r3, [r3, #16]
   2802a:	079b      	lsls	r3, r3, #30
   2802c:	d50a      	bpl.n	28044 <socket_thread_fn+0xec>
		    current_cmd.flags & AT_CMD_SYNC &&
   2802e:	7923      	ldrb	r3, [r4, #4]
   28030:	2b07      	cmp	r3, #7
   28032:	d09b      	beq.n	27f6c <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   28034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2803c:	494f      	ldr	r1, [pc, #316]	; (2817c <socket_thread_fn+0x224>)
   2803e:	4855      	ldr	r0, [pc, #340]	; (28194 <socket_thread_fn+0x23c>)
   28040:	f00b f9da 	bl	333f8 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   28044:	7923      	ldrb	r3, [r4, #4]
   28046:	2b07      	cmp	r3, #7
   28048:	d090      	beq.n	27f6c <socket_thread_fn+0x14>
			complete_cmd();
   2804a:	f7ff fef5 	bl	27e38 <complete_cmd>
   2804e:	e78d      	b.n	27f6c <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   28050:	f00e feed 	bl	36e2e <__errno>
   28054:	f045 0501 	orr.w	r5, r5, #1
   28058:	6801      	ldr	r1, [r0, #0]
   2805a:	462a      	mov	r2, r5
   2805c:	484e      	ldr	r0, [pc, #312]	; (28198 <socket_thread_fn+0x240>)
   2805e:	f00d ffee 	bl	3603e <log_1>
			close(common_socket_fd);
   28062:	f8da 0000 	ldr.w	r0, [sl]
}
   28066:	b003      	add	sp, #12
   28068:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2806c:	f00e bbdb 	b.w	36826 <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   28070:	d10a      	bne.n	28088 <socket_thread_fn+0x130>
			LOG_ERR("AT message empty");
   28072:	01b9      	lsls	r1, r7, #6
   28074:	4849      	ldr	r0, [pc, #292]	; (2819c <socket_thread_fn+0x244>)
   28076:	f041 0101 	orr.w	r1, r1, #1
   2807a:	f00d ffd1 	bl	36020 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   2807e:	2306      	movs	r3, #6
   28080:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   28082:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   28086:	e7cb      	b.n	28020 <socket_thread_fn+0xc8>
		} else if (buf[bytes_read - 1] != '\0') {
   28088:	1833      	adds	r3, r6, r0
   2808a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2808e:	b153      	cbz	r3, 280a6 <socket_thread_fn+0x14e>
			LOG_ERR("AT message too large for reception buffer or "
   28090:	01b9      	lsls	r1, r7, #6
   28092:	4843      	ldr	r0, [pc, #268]	; (281a0 <socket_thread_fn+0x248>)
   28094:	f041 0101 	orr.w	r1, r1, #1
   28098:	f00d ffc2 	bl	36020 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   2809c:	2306      	movs	r3, #6
   2809e:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   280a0:	f06f 0368 	mvn.w	r3, #104	; 0x68
   280a4:	e7bc      	b.n	28020 <socket_thread_fn+0xc8>
	ret->state = AT_CMD_NOTIFICATION;
   280a6:	2307      	movs	r3, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   280a8:	1f45      	subs	r5, r0, #5
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   280aa:	483e      	ldr	r0, [pc, #248]	; (281a4 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   280ac:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   280ae:	f7f4 ffdf 	bl	1d070 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   280b2:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   280b4:	4602      	mov	r2, r0
   280b6:	493b      	ldr	r1, [pc, #236]	; (281a4 <socket_thread_fn+0x24c>)
   280b8:	4628      	mov	r0, r5
   280ba:	f010 fea7 	bl	38e0c <strncmp>
		if (match) {
   280be:	b9c0      	cbnz	r0, 280f2 <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   280c0:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   280c2:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   280c4:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   280c6:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   280c8:	3201      	adds	r2, #1
   280ca:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   280cc:	4d30      	ldr	r5, [pc, #192]	; (28190 <socket_thread_fn+0x238>)
   280ce:	682b      	ldr	r3, [r5, #0]
   280d0:	2b00      	cmp	r3, #0
   280d2:	d043      	beq.n	2815c <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   280d4:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   280d6:	2800      	cmp	r0, #0
   280d8:	d040      	beq.n	2815c <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   280da:	7923      	ldrb	r3, [r4, #4]
   280dc:	2b07      	cmp	r3, #7
   280de:	d12e      	bne.n	2813e <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   280e0:	4b31      	ldr	r3, [pc, #196]	; (281a8 <socket_thread_fn+0x250>)
   280e2:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   280e4:	b913      	cbnz	r3, 280ec <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   280e6:	68ab      	ldr	r3, [r5, #8]
   280e8:	2b00      	cmp	r3, #0
   280ea:	d09a      	beq.n	28022 <socket_thread_fn+0xca>
			current_cmd.callback(buf);
   280ec:	4630      	mov	r0, r6
   280ee:	4798      	blx	r3
   280f0:	e797      	b.n	28022 <socket_thread_fn+0xca>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   280f2:	4630      	mov	r0, r6
   280f4:	492d      	ldr	r1, [pc, #180]	; (281ac <socket_thread_fn+0x254>)
   280f6:	f010 fed5 	bl	38ea4 <strstr>
		if (tmpstr) {
   280fa:	4605      	mov	r5, r0
   280fc:	b128      	cbz	r0, 2810a <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   280fe:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   28100:	482b      	ldr	r0, [pc, #172]	; (281b0 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   28102:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   28104:	f010 fcfb 	bl	38afe <atoi>
   28108:	e7db      	b.n	280c2 <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2810a:	4630      	mov	r0, r6
   2810c:	4929      	ldr	r1, [pc, #164]	; (281b4 <socket_thread_fn+0x25c>)
   2810e:	f010 fec9 	bl	38ea4 <strstr>
		if (tmpstr) {
   28112:	4605      	mov	r5, r0
   28114:	b108      	cbz	r0, 2811a <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   28116:	2303      	movs	r3, #3
   28118:	e7f2      	b.n	28100 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2811a:	4827      	ldr	r0, [pc, #156]	; (281b8 <socket_thread_fn+0x260>)
   2811c:	f7f4 ffa8 	bl	1d070 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   28120:	f1a8 0508 	sub.w	r5, r8, #8
   28124:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   28126:	4602      	mov	r2, r0
   28128:	4923      	ldr	r1, [pc, #140]	; (281b8 <socket_thread_fn+0x260>)
   2812a:	4628      	mov	r0, r5
   2812c:	f010 fe6e 	bl	38e0c <strncmp>
		if (match) {
   28130:	b9c0      	cbnz	r0, 28164 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   28132:	2301      	movs	r3, #1
   28134:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   28136:	f06f 0307 	mvn.w	r3, #7
   2813a:	6023      	str	r3, [r4, #0]
			break;
   2813c:	e7c2      	b.n	280c4 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   2813e:	68eb      	ldr	r3, [r5, #12]
   28140:	429a      	cmp	r2, r3
   28142:	d908      	bls.n	28156 <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   28144:	01b9      	lsls	r1, r7, #6
   28146:	481d      	ldr	r0, [pc, #116]	; (281bc <socket_thread_fn+0x264>)
   28148:	f041 0101 	orr.w	r1, r1, #1
   2814c:	f00d ff68 	bl	36020 <log_0>
				ret.code  = -EMSGSIZE;
   28150:	f06f 0379 	mvn.w	r3, #121	; 0x79
   28154:	e764      	b.n	28020 <socket_thread_fn+0xc8>
   28156:	4631      	mov	r1, r6
   28158:	f010 fcf1 	bl	38b3e <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   2815c:	7923      	ldrb	r3, [r4, #4]
   2815e:	2b07      	cmp	r3, #7
   28160:	d1c1      	bne.n	280e6 <socket_thread_fn+0x18e>
   28162:	e7bd      	b.n	280e0 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   28164:	4630      	mov	r0, r6
   28166:	f7f4 ff83 	bl	1d070 <strlen>
   2816a:	1c42      	adds	r2, r0, #1
   2816c:	e7ae      	b.n	280cc <socket_thread_fn+0x174>
   2816e:	bf00      	nop
   28170:	00039a60 	.word	0x00039a60
   28174:	00039a50 	.word	0x00039a50
   28178:	2002bc4b 	.word	0x2002bc4b
   2817c:	2002369c 	.word	0x2002369c
   28180:	200236a4 	.word	0x200236a4
   28184:	0003c1b2 	.word	0x0003c1b2
   28188:	0003c1e6 	.word	0x0003c1e6
   2818c:	0003c208 	.word	0x0003c208
   28190:	20023684 	.word	0x20023684
   28194:	2002080c 	.word	0x2002080c
   28198:	0003c21c 	.word	0x0003c21c
   2819c:	0003c253 	.word	0x0003c253
   281a0:	0003c264 	.word	0x0003c264
   281a4:	0003a94a 	.word	0x0003a94a
   281a8:	20023698 	.word	0x20023698
   281ac:	0003c2af 	.word	0x0003c2af
   281b0:	2002bc56 	.word	0x2002bc56
   281b4:	0003c2bb 	.word	0x0003c2bb
   281b8:	0003aa58 	.word	0x0003aa58
   281bc:	0003c2c7 	.word	0x0003c2c7
   281c0:	20023680 	.word	0x20023680
   281c4:	2002367c 	.word	0x2002367c

000281c8 <at_cmd_write>:
{
   281c8:	b530      	push	{r4, r5, lr}
   281ca:	461c      	mov	r4, r3
   281cc:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   281ce:	4b32      	ldr	r3, [pc, #200]	; (28298 <at_cmd_write+0xd0>)
   281d0:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   281d4:	2b01      	cmp	r3, #1
   281d6:	d05c      	beq.n	28292 <at_cmd_write+0xca>
	if (cmd == NULL) {
   281d8:	b160      	cbz	r0, 281f4 <at_cmd_write+0x2c>
   281da:	1e45      	subs	r5, r0, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   281dc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   281e0:	b9d3      	cbnz	r3, 28218 <at_cmd_write+0x50>
   281e2:	492e      	ldr	r1, [pc, #184]	; (2829c <at_cmd_write+0xd4>)
   281e4:	4b2e      	ldr	r3, [pc, #184]	; (282a0 <at_cmd_write+0xd8>)
		LOG_ERR("Invalid command");
   281e6:	482f      	ldr	r0, [pc, #188]	; (282a4 <at_cmd_write+0xdc>)
   281e8:	1ac9      	subs	r1, r1, r3
   281ea:	08c9      	lsrs	r1, r1, #3
   281ec:	0189      	lsls	r1, r1, #6
   281ee:	f041 0101 	orr.w	r1, r1, #1
   281f2:	e007      	b.n	28204 <at_cmd_write+0x3c>
   281f4:	4929      	ldr	r1, [pc, #164]	; (2829c <at_cmd_write+0xd4>)
   281f6:	4b2a      	ldr	r3, [pc, #168]	; (282a0 <at_cmd_write+0xd8>)
		LOG_ERR("cmd is NULL");
   281f8:	482b      	ldr	r0, [pc, #172]	; (282a8 <at_cmd_write+0xe0>)
   281fa:	1ac9      	subs	r1, r1, r3
   281fc:	08c9      	lsrs	r1, r1, #3
   281fe:	0189      	lsls	r1, r1, #6
   28200:	f041 0101 	orr.w	r1, r1, #1
   28204:	f00d ff0c 	bl	36020 <log_0>
		if (state) {
   28208:	b91c      	cbnz	r4, 28212 <at_cmd_write+0x4a>
		return -EINVAL;
   2820a:	f06f 0015 	mvn.w	r0, #21
}
   2820e:	b009      	add	sp, #36	; 0x24
   28210:	bd30      	pop	{r4, r5, pc}
			*state = AT_CMD_ERROR_QUEUE;
   28212:	2304      	movs	r3, #4
   28214:	7023      	strb	r3, [r4, #0]
   28216:	e7f8      	b.n	2820a <at_cmd_write+0x42>
		if (*c > ' ') {
   28218:	2b20      	cmp	r3, #32
   2821a:	d9df      	bls.n	281dc <at_cmd_write+0x14>
	command.callback = NULL;
   2821c:	2300      	movs	r3, #0
   2821e:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   28220:	2302      	movs	r3, #2
	command.resp = buf;
   28222:	e9cd 0103 	strd	r0, r1, [sp, #12]
	command.resp_size = buf_len;
   28226:	9206      	str	r2, [sp, #24]
	command.flags = AT_CMD_SYNC;
   28228:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   2822c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28234:	481d      	ldr	r0, [pc, #116]	; (282ac <at_cmd_write+0xe4>)
   28236:	f00b f991 	bl	3355c <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2823a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2823e:	a903      	add	r1, sp, #12
   28240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28244:	481a      	ldr	r0, [pc, #104]	; (282b0 <at_cmd_write+0xe8>)
   28246:	f00b f8d7 	bl	333f8 <z_impl_k_msgq_put>
   2824a:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   2824c:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   2824e:	b170      	cbz	r0, 2826e <at_cmd_write+0xa6>
   28250:	4a12      	ldr	r2, [pc, #72]	; (2829c <at_cmd_write+0xd4>)
   28252:	4b13      	ldr	r3, [pc, #76]	; (282a0 <at_cmd_write+0xd8>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   28254:	4817      	ldr	r0, [pc, #92]	; (282b4 <at_cmd_write+0xec>)
   28256:	1ad2      	subs	r2, r2, r3
   28258:	08d2      	lsrs	r2, r2, #3
   2825a:	0192      	lsls	r2, r2, #6
   2825c:	f042 0201 	orr.w	r2, r2, #1
   28260:	f00d feed 	bl	3603e <log_1>
		if (state) {
   28264:	b10c      	cbz	r4, 2826a <at_cmd_write+0xa2>
			*state = AT_CMD_ERROR_QUEUE;
   28266:	2304      	movs	r3, #4
		*state = ret.state;
   28268:	7023      	strb	r3, [r4, #0]
	return ret.code;
   2826a:	9801      	ldr	r0, [sp, #4]
   2826c:	e7cf      	b.n	2820e <at_cmd_write+0x46>
	load_cmd_and_write();
   2826e:	f7ff fdf9 	bl	27e64 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   28272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2827a:	a901      	add	r1, sp, #4
   2827c:	480e      	ldr	r0, [pc, #56]	; (282b8 <at_cmd_write+0xf0>)
   2827e:	f00b f90f 	bl	334a0 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   28282:	480a      	ldr	r0, [pc, #40]	; (282ac <at_cmd_write+0xe4>)
   28284:	f00b f9e2 	bl	3364c <z_impl_k_mutex_unlock>
	if (state) {
   28288:	2c00      	cmp	r4, #0
   2828a:	d0ee      	beq.n	2826a <at_cmd_write+0xa2>
		*state = ret.state;
   2828c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   28290:	e7ea      	b.n	28268 <at_cmd_write+0xa0>
		return -EHOSTDOWN;
   28292:	f06f 0074 	mvn.w	r0, #116	; 0x74
   28296:	e7ba      	b.n	2820e <at_cmd_write+0x46>
   28298:	200236a4 	.word	0x200236a4
   2829c:	00039a60 	.word	0x00039a60
   282a0:	00039a50 	.word	0x00039a50
   282a4:	0003c2f4 	.word	0x0003c2f4
   282a8:	0003c2e8 	.word	0x0003c2e8
   282ac:	200207a8 	.word	0x200207a8
   282b0:	200207e4 	.word	0x200207e4
   282b4:	0003c304 	.word	0x0003c304
   282b8:	2002080c 	.word	0x2002080c

000282bc <at_cmd_set_notification_handler>:
{
   282bc:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   282be:	4c09      	ldr	r4, [pc, #36]	; (282e4 <at_cmd_set_notification_handler+0x28>)
{
   282c0:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   282c2:	6821      	ldr	r1, [r4, #0]
   282c4:	b159      	cbz	r1, 282de <at_cmd_set_notification_handler+0x22>
   282c6:	4281      	cmp	r1, r0
   282c8:	d009      	beq.n	282de <at_cmd_set_notification_handler+0x22>
   282ca:	4a07      	ldr	r2, [pc, #28]	; (282e8 <at_cmd_set_notification_handler+0x2c>)
   282cc:	4b07      	ldr	r3, [pc, #28]	; (282ec <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   282ce:	4808      	ldr	r0, [pc, #32]	; (282f0 <at_cmd_set_notification_handler+0x34>)
   282d0:	1ad2      	subs	r2, r2, r3
   282d2:	08d2      	lsrs	r2, r2, #3
   282d4:	0192      	lsls	r2, r2, #6
   282d6:	f042 0202 	orr.w	r2, r2, #2
   282da:	f00d feb0 	bl	3603e <log_1>
	notification_handler = handler;
   282de:	6025      	str	r5, [r4, #0]
}
   282e0:	bd38      	pop	{r3, r4, r5, pc}
   282e2:	bf00      	nop
   282e4:	20023698 	.word	0x20023698
   282e8:	00039a60 	.word	0x00039a60
   282ec:	00039a50 	.word	0x00039a50
   282f0:	0003c324 	.word	0x0003c324

000282f4 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   282f4:	4b0f      	ldr	r3, [pc, #60]	; (28334 <find_node+0x40>)
{
   282f6:	b570      	push	{r4, r5, r6, lr}
   282f8:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   282fa:	6818      	ldr	r0, [r3, #0]
   282fc:	b170      	cbz	r0, 2831c <find_node+0x28>
	return node->next;
   282fe:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28300:	4603      	mov	r3, r0
   28302:	2d00      	cmp	r5, #0
   28304:	4628      	mov	r0, r5
   28306:	bf38      	it	cc
   28308:	2000      	movcc	r0, #0
   2830a:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   2830c:	685e      	ldr	r6, [r3, #4]
   2830e:	428e      	cmp	r6, r1
   28310:	d105      	bne.n	2831e <find_node+0x2a>
   28312:	689e      	ldr	r6, [r3, #8]
   28314:	4296      	cmp	r6, r2
   28316:	d102      	bne.n	2831e <find_node+0x2a>
			*prev_out = prev;
			return curr;
   28318:	4618      	mov	r0, r3
			*prev_out = prev;
   2831a:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   2831c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2831e:	2800      	cmp	r0, #0
   28320:	d0fc      	beq.n	2831c <find_node+0x28>
	return node->next;
   28322:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28324:	461d      	mov	r5, r3
   28326:	2e00      	cmp	r6, #0
   28328:	4603      	mov	r3, r0
   2832a:	4630      	mov	r0, r6
   2832c:	bf38      	it	cc
   2832e:	2000      	movcc	r0, #0
   28330:	e7ec      	b.n	2830c <find_node+0x18>
   28332:	bf00      	nop
   28334:	200236a8 	.word	0x200236a8

00028338 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   28338:	4a0c      	ldr	r2, [pc, #48]	; (2836c <module_init+0x34>)
{
   2833a:	b508      	push	{r3, lr}
	if (initialized) {
   2833c:	7813      	ldrb	r3, [r2, #0]
   2833e:	b15b      	cbz	r3, 28358 <module_init+0x20>
   28340:	490b      	ldr	r1, [pc, #44]	; (28370 <module_init+0x38>)
   28342:	4b0c      	ldr	r3, [pc, #48]	; (28374 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   28344:	480c      	ldr	r0, [pc, #48]	; (28378 <module_init+0x40>)
   28346:	1ac9      	subs	r1, r1, r3
   28348:	08c9      	lsrs	r1, r1, #3
   2834a:	0189      	lsls	r1, r1, #6
   2834c:	f041 0102 	orr.w	r1, r1, #2
   28350:	f00d fe66 	bl	36020 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   28354:	2000      	movs	r0, #0
   28356:	bd08      	pop	{r3, pc}
	initialized = true;
   28358:	2101      	movs	r1, #1
   2835a:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   2835c:	4a07      	ldr	r2, [pc, #28]	; (2837c <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   2835e:	4808      	ldr	r0, [pc, #32]	; (28380 <module_init+0x48>)
	list->tail = NULL;
   28360:	e9c2 3300 	strd	r3, r3, [r2]
   28364:	f7ff ffaa 	bl	282bc <at_cmd_set_notification_handler>
	return 0;
   28368:	e7f4      	b.n	28354 <module_init+0x1c>
   2836a:	bf00      	nop
   2836c:	2002c6d8 	.word	0x2002c6d8
   28370:	00039a70 	.word	0x00039a70
   28374:	00039a50 	.word	0x00039a50
   28378:	0003c354 	.word	0x0003c354
   2837c:	200236a8 	.word	0x200236a8
   28380:	00028391 	.word	0x00028391

00028384 <k_mutex_unlock.constprop.0>:
   28384:	4801      	ldr	r0, [pc, #4]	; (2838c <k_mutex_unlock.constprop.0+0x8>)
   28386:	f00b b961 	b.w	3364c <z_impl_k_mutex_unlock>
   2838a:	bf00      	nop
   2838c:	20020794 	.word	0x20020794

00028390 <notif_dispatch>:
{
   28390:	b538      	push	{r3, r4, r5, lr}
   28392:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   28394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2839c:	480d      	ldr	r0, [pc, #52]	; (283d4 <notif_dispatch+0x44>)
   2839e:	f00b f8dd 	bl	3355c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   283a2:	4b0d      	ldr	r3, [pc, #52]	; (283d8 <notif_dispatch+0x48>)
   283a4:	681b      	ldr	r3, [r3, #0]
   283a6:	b91b      	cbnz	r3, 283b0 <notif_dispatch+0x20>
}
   283a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   283ac:	f7ff bfea 	b.w	28384 <k_mutex_unlock.constprop.0>
	return node->next;
   283b0:	681c      	ldr	r4, [r3, #0]
   283b2:	2c00      	cmp	r4, #0
   283b4:	bf38      	it	cc
   283b6:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   283b8:	4629      	mov	r1, r5
   283ba:	689a      	ldr	r2, [r3, #8]
   283bc:	6858      	ldr	r0, [r3, #4]
   283be:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   283c0:	2c00      	cmp	r4, #0
   283c2:	d0f1      	beq.n	283a8 <notif_dispatch+0x18>
   283c4:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   283c6:	4623      	mov	r3, r4
   283c8:	2a00      	cmp	r2, #0
   283ca:	bf38      	it	cc
   283cc:	2200      	movcc	r2, #0
   283ce:	4614      	mov	r4, r2
   283d0:	e7f2      	b.n	283b8 <notif_dispatch+0x28>
   283d2:	bf00      	nop
   283d4:	20020794 	.word	0x20020794
   283d8:	200236a8 	.word	0x200236a8

000283dc <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   283dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   283de:	4606      	mov	r6, r0
	if (handler == NULL) {
   283e0:	460d      	mov	r5, r1
   283e2:	b979      	cbnz	r1, 28404 <at_notif_register_handler+0x28>
   283e4:	4a1d      	ldr	r2, [pc, #116]	; (2845c <at_notif_register_handler+0x80>)
   283e6:	4b1e      	ldr	r3, [pc, #120]	; (28460 <at_notif_register_handler+0x84>)
   283e8:	1a9b      	subs	r3, r3, r2
   283ea:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   283ec:	019b      	lsls	r3, r3, #6
   283ee:	460a      	mov	r2, r1
   283f0:	f043 0301 	orr.w	r3, r3, #1
   283f4:	4601      	mov	r1, r0
   283f6:	481b      	ldr	r0, [pc, #108]	; (28464 <at_notif_register_handler+0x88>)
   283f8:	f00d fe38 	bl	3606c <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   283fc:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   28400:	b002      	add	sp, #8
   28402:	bd70      	pop	{r4, r5, r6, pc}
   28404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2840c:	4816      	ldr	r0, [pc, #88]	; (28468 <at_notif_register_handler+0x8c>)
   2840e:	f00b f8a5 	bl	3355c <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   28412:	462a      	mov	r2, r5
   28414:	4631      	mov	r1, r6
   28416:	a801      	add	r0, sp, #4
   28418:	f7ff ff6c 	bl	282f4 <find_node>
   2841c:	4604      	mov	r4, r0
   2841e:	b118      	cbz	r0, 28428 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   28420:	f7ff ffb0 	bl	28384 <k_mutex_unlock.constprop.0>
		return 0;
   28424:	2000      	movs	r0, #0
   28426:	e7eb      	b.n	28400 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   28428:	200c      	movs	r0, #12
   2842a:	f00c f953 	bl	346d4 <k_malloc>
   2842e:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   28430:	b920      	cbnz	r0, 2843c <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   28432:	f7ff ffa7 	bl	28384 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   28436:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2843a:	e7e1      	b.n	28400 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   2843c:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   2843e:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   28440:	4a0a      	ldr	r2, [pc, #40]	; (2846c <at_notif_register_handler+0x90>)
   28442:	6044      	str	r4, [r0, #4]
   28444:	6084      	str	r4, [r0, #8]
	parent->next = child;
   28446:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   28448:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   2844a:	e9c3 6501 	strd	r6, r5, [r3, #4]
   2844e:	b911      	cbnz	r1, 28456 <at_notif_register_handler+0x7a>
	list->head = node;
   28450:	e9c2 3300 	strd	r3, r3, [r2]
}
   28454:	e7e4      	b.n	28420 <at_notif_register_handler+0x44>
	parent->next = child;
   28456:	600b      	str	r3, [r1, #0]
	list->tail = node;
   28458:	6053      	str	r3, [r2, #4]
}
   2845a:	e7e1      	b.n	28420 <at_notif_register_handler+0x44>
   2845c:	00039a50 	.word	0x00039a50
   28460:	00039a70 	.word	0x00039a70
   28464:	0003c377 	.word	0x0003c377
   28468:	20020794 	.word	0x20020794
   2846c:	200236a8 	.word	0x200236a8

00028470 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   28470:	4b06      	ldr	r3, [pc, #24]	; (2848c <is_valid_notification_char+0x1c>)
   28472:	5cc3      	ldrb	r3, [r0, r3]
   28474:	f003 0303 	and.w	r3, r3, #3
   28478:	2b02      	cmp	r3, #2
   2847a:	bf08      	it	eq
   2847c:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   2847e:	3841      	subs	r0, #65	; 0x41
   28480:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   28482:	2819      	cmp	r0, #25
   28484:	bf8c      	ite	hi
   28486:	2000      	movhi	r0, #0
   28488:	2001      	movls	r0, #1
   2848a:	4770      	bx	lr
   2848c:	0003d1dc 	.word	0x0003d1dc

00028490 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   28490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   28494:	6805      	ldr	r5, [r0, #0]
{
   28496:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   28498:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2849a:	782b      	ldrb	r3, [r5, #0]
{
   2849c:	4680      	mov	r8, r0
   2849e:	460f      	mov	r7, r1
   284a0:	4616      	mov	r6, r2
   284a2:	2b00      	cmp	r3, #0
   284a4:	f000 80c8 	beq.w	28638 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   284a8:	4b65      	ldr	r3, [pc, #404]	; (28640 <at_parse_process_element+0x1b0>)
   284aa:	781c      	ldrb	r4, [r3, #0]
   284ac:	2c06      	cmp	r4, #6
   284ae:	d110      	bne.n	284d2 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   284b0:	1c6b      	adds	r3, r5, #1
   284b2:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   284b4:	9a00      	ldr	r2, [sp, #0]
   284b6:	7810      	ldrb	r0, [r2, #0]
   284b8:	f7ff ffda 	bl	28470 <is_valid_notification_char>
   284bc:	b930      	cbnz	r0, 284cc <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   284be:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   284c0:	462a      	mov	r2, r5
   284c2:	4639      	mov	r1, r7
   284c4:	4630      	mov	r0, r6
   284c6:	f00f fd13 	bl	37ef0 <at_params_string_put>
   284ca:	e01b      	b.n	28504 <at_parse_process_element+0x74>
			tmpstr++;
   284cc:	3201      	adds	r2, #1
   284ce:	9200      	str	r2, [sp, #0]
   284d0:	e7f0      	b.n	284b4 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   284d2:	2c07      	cmp	r4, #7
   284d4:	d124      	bne.n	28520 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   284d6:	4668      	mov	r0, sp
   284d8:	f00f fc42 	bl	37d60 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   284dc:	9a00      	ldr	r2, [sp, #0]
   284de:	7810      	ldrb	r0, [r2, #0]
   284e0:	f7ff ffc6 	bl	28470 <is_valid_notification_char>
   284e4:	b9a8      	cbnz	r0, 28512 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   284e6:	1b53      	subs	r3, r2, r5
   284e8:	4639      	mov	r1, r7
   284ea:	462a      	mov	r2, r5
   284ec:	4630      	mov	r0, r6
   284ee:	f00f fcff 	bl	37ef0 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   284f2:	9b00      	ldr	r3, [sp, #0]
   284f4:	781a      	ldrb	r2, [r3, #0]
   284f6:	2a3d      	cmp	r2, #61	; 0x3d
   284f8:	d10e      	bne.n	28518 <at_parse_process_element+0x88>
   284fa:	785a      	ldrb	r2, [r3, #1]
   284fc:	2a3f      	cmp	r2, #63	; 0x3f
   284fe:	d101      	bne.n	28504 <at_parse_process_element+0x74>
			tmpstr += 2;
   28500:	3302      	adds	r3, #2
			tmpstr++;
   28502:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   28504:	2000      	movs	r0, #0
	*str = tmpstr;
   28506:	9b00      	ldr	r3, [sp, #0]
   28508:	f8c8 3000 	str.w	r3, [r8]
}
   2850c:	b023      	add	sp, #140	; 0x8c
   2850e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   28512:	3201      	adds	r2, #1
   28514:	9200      	str	r2, [sp, #0]
   28516:	e7e1      	b.n	284dc <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   28518:	2a3f      	cmp	r2, #63	; 0x3f
   2851a:	d1f3      	bne.n	28504 <at_parse_process_element+0x74>
			tmpstr++;
   2851c:	3301      	adds	r3, #1
   2851e:	e7f0      	b.n	28502 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   28520:	2c08      	cmp	r4, #8
   28522:	d103      	bne.n	2852c <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   28524:	4610      	mov	r0, r2
   28526:	f00f fcbe 	bl	37ea6 <at_params_empty_put>
   2852a:	e7eb      	b.n	28504 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   2852c:	2c02      	cmp	r4, #2
   2852e:	d111      	bne.n	28554 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   28530:	9a00      	ldr	r2, [sp, #0]
   28532:	7811      	ldrb	r1, [r2, #0]
   28534:	4608      	mov	r0, r1
   28536:	f00f fc0a 	bl	37d4e <is_lfcr>
   2853a:	b918      	cbnz	r0, 28544 <at_parse_process_element+0xb4>
   2853c:	b111      	cbz	r1, 28544 <at_parse_process_element+0xb4>
			tmpstr++;
   2853e:	3201      	adds	r2, #1
   28540:	9200      	str	r2, [sp, #0]
   28542:	e7f5      	b.n	28530 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   28544:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   28546:	462a      	mov	r2, r5
   28548:	4639      	mov	r1, r7
   2854a:	4630      	mov	r0, r6
   2854c:	f00f fcd0 	bl	37ef0 <at_params_string_put>
		tmpstr++;
   28550:	9b00      	ldr	r3, [sp, #0]
   28552:	e7e3      	b.n	2851c <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   28554:	2c03      	cmp	r4, #3
   28556:	d109      	bne.n	2856c <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   28558:	9b00      	ldr	r3, [sp, #0]
   2855a:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   2855c:	2a22      	cmp	r2, #34	; 0x22
   2855e:	d003      	beq.n	28568 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   28560:	b112      	cbz	r2, 28568 <at_parse_process_element+0xd8>
			tmpstr++;
   28562:	3301      	adds	r3, #1
   28564:	9300      	str	r3, [sp, #0]
   28566:	e7f7      	b.n	28558 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   28568:	1b5b      	subs	r3, r3, r5
   2856a:	e7ec      	b.n	28546 <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   2856c:	2c01      	cmp	r4, #1
   2856e:	d13c      	bne.n	285ea <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   28570:	4628      	mov	r0, r5
   28572:	220a      	movs	r2, #10
   28574:	a901      	add	r1, sp, #4
   28576:	f00c fd79 	bl	3506c <strtoul>
		tmpstr = next;
   2857a:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2857c:	4d31      	ldr	r5, [pc, #196]	; (28644 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2857e:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   28580:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   28582:	9800      	ldr	r0, [sp, #0]
   28584:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   28586:	2b29      	cmp	r3, #41	; 0x29
   28588:	d028      	beq.n	285dc <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2858a:	b33b      	cbz	r3, 285dc <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2858c:	3b2c      	subs	r3, #44	; 0x2c
   2858e:	b2db      	uxtb	r3, r3
   28590:	3001      	adds	r0, #1
   28592:	2b11      	cmp	r3, #17
				tmparray[i++] =
   28594:	9000      	str	r0, [sp, #0]
   28596:	d803      	bhi.n	285a0 <at_parse_process_element+0x110>
   28598:	fa25 f303 	lsr.w	r3, r5, r3
   2859c:	07db      	lsls	r3, r3, #31
   2859e:	d408      	bmi.n	285b2 <at_parse_process_element+0x122>
				tmpstr++;
   285a0:	46a1      	mov	r9, r4
   285a2:	e004      	b.n	285ae <at_parse_process_element+0x11e>
					tmpstr = next;
   285a4:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   285a6:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   285aa:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   285ac:	d015      	beq.n	285da <at_parse_process_element+0x14a>
				tmpstr++;
   285ae:	464c      	mov	r4, r9
   285b0:	e7e7      	b.n	28582 <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   285b2:	220a      	movs	r2, #10
   285b4:	a901      	add	r1, sp, #4
   285b6:	f00c fd59 	bl	3506c <strtoul>
				tmparray[i++] =
   285ba:	ab22      	add	r3, sp, #136	; 0x88
   285bc:	f104 0901 	add.w	r9, r4, #1
   285c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   285c4:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   285c8:	9800      	ldr	r0, [sp, #0]
   285ca:	f7f4 fd51 	bl	1d070 <strlen>
   285ce:	4604      	mov	r4, r0
   285d0:	9801      	ldr	r0, [sp, #4]
   285d2:	f7f4 fd4d 	bl	1d070 <strlen>
   285d6:	4284      	cmp	r4, r0
   285d8:	d1e4      	bne.n	285a4 <at_parse_process_element+0x114>
   285da:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   285dc:	4639      	mov	r1, r7
   285de:	4630      	mov	r0, r6
   285e0:	00a3      	lsls	r3, r4, #2
   285e2:	aa02      	add	r2, sp, #8
   285e4:	f00f fca7 	bl	37f36 <at_params_array_put>
   285e8:	e7b2      	b.n	28550 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   285ea:	2c04      	cmp	r4, #4
   285ec:	d115      	bne.n	2861a <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   285ee:	220a      	movs	r2, #10
   285f0:	4628      	mov	r0, r5
   285f2:	a902      	add	r1, sp, #8
   285f4:	f00c fd3a 	bl	3506c <strtoul>
		tmpstr = next;
   285f8:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   285fa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   285fe:	4602      	mov	r2, r0
		tmpstr = next;
   28600:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   28602:	da05      	bge.n	28610 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   28604:	b282      	uxth	r2, r0
   28606:	4639      	mov	r1, r7
   28608:	4630      	mov	r0, r6
   2860a:	f00f fc39 	bl	37e80 <at_params_short_put>
   2860e:	e779      	b.n	28504 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   28610:	4639      	mov	r1, r7
   28612:	4630      	mov	r0, r6
   28614:	f00f fc59 	bl	37eca <at_params_int_put>
   28618:	e774      	b.n	28504 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   2861a:	2c05      	cmp	r4, #5
   2861c:	f47f af72 	bne.w	28504 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   28620:	4909      	ldr	r1, [pc, #36]	; (28648 <at_parse_process_element+0x1b8>)
   28622:	9b00      	ldr	r3, [sp, #0]
   28624:	781a      	ldrb	r2, [r3, #0]
   28626:	5c52      	ldrb	r2, [r2, r1]
   28628:	f012 0f44 	tst.w	r2, #68	; 0x44
   2862c:	d101      	bne.n	28632 <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   2862e:	1b5b      	subs	r3, r3, r5
   28630:	e746      	b.n	284c0 <at_parse_process_element+0x30>
			tmpstr++;
   28632:	3301      	adds	r3, #1
   28634:	9300      	str	r3, [sp, #0]
   28636:	e7f4      	b.n	28622 <at_parse_process_element+0x192>
		return -1;
   28638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2863c:	e766      	b.n	2850c <at_parse_process_element+0x7c>
   2863e:	bf00      	nop
   28640:	2002c6d9 	.word	0x2002c6d9
   28644:	00024001 	.word	0x00024001
   28648:	0003d1dc 	.word	0x0003d1dc

0002864c <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   2864c:	b510      	push	{r4, lr}
   2864e:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   28650:	f7f4 fd0e 	bl	1d070 <strlen>
   28654:	2801      	cmp	r0, #1
   28656:	d922      	bls.n	2869e <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   28658:	7821      	ldrb	r1, [r4, #0]
   2865a:	4b13      	ldr	r3, [pc, #76]	; (286a8 <is_command+0x5c>)
   2865c:	5cca      	ldrb	r2, [r1, r3]
   2865e:	f002 0203 	and.w	r2, r2, #3
   28662:	2a02      	cmp	r2, #2
   28664:	bf08      	it	eq
   28666:	3920      	subeq	r1, #32
   28668:	2941      	cmp	r1, #65	; 0x41
   2866a:	461a      	mov	r2, r3
   2866c:	d117      	bne.n	2869e <is_command+0x52>
   2866e:	7863      	ldrb	r3, [r4, #1]
   28670:	5cd2      	ldrb	r2, [r2, r3]
   28672:	f002 0203 	and.w	r2, r2, #3
   28676:	2a02      	cmp	r2, #2
   28678:	bf08      	it	eq
   2867a:	3b20      	subeq	r3, #32
   2867c:	2b54      	cmp	r3, #84	; 0x54
   2867e:	d10e      	bne.n	2869e <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   28680:	78a2      	ldrb	r2, [r4, #2]
   28682:	2a25      	cmp	r2, #37	; 0x25
   28684:	d00d      	beq.n	286a2 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   28686:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2868a:	2b23      	cmp	r3, #35	; 0x23
   2868c:	d009      	beq.n	286a2 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   2868e:	4610      	mov	r0, r2
   28690:	f00f fb5d 	bl	37d4e <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   28694:	b910      	cbnz	r0, 2869c <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   28696:	fab2 f082 	clz	r0, r2
   2869a:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2869c:	bd10      	pop	{r4, pc}
		return false;
   2869e:	2000      	movs	r0, #0
   286a0:	e7fc      	b.n	2869c <is_command+0x50>
		return true;
   286a2:	2001      	movs	r0, #1
   286a4:	e7fa      	b.n	2869c <is_command+0x50>
   286a6:	bf00      	nop
   286a8:	0003d1dc 	.word	0x0003d1dc

000286ac <at_parse_detect_type>:
{
   286ac:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   286ae:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   286b0:	2900      	cmp	r1, #0
{
   286b2:	4605      	mov	r5, r0
   286b4:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   286b6:	d141      	bne.n	2873c <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   286b8:	2a2b      	cmp	r2, #43	; 0x2b
   286ba:	4e29      	ldr	r6, [pc, #164]	; (28760 <at_parse_detect_type+0xb4>)
   286bc:	d001      	beq.n	286c2 <at_parse_detect_type+0x16>
   286be:	2a25      	cmp	r2, #37	; 0x25
   286c0:	d104      	bne.n	286cc <at_parse_detect_type+0x20>
	state = new_state;
   286c2:	2306      	movs	r3, #6
   286c4:	7033      	strb	r3, [r6, #0]
	return 0;
   286c6:	2000      	movs	r0, #0
	*str = tmpstr;
   286c8:	602c      	str	r4, [r5, #0]
}
   286ca:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   286cc:	4620      	mov	r0, r4
   286ce:	f7ff ffbd 	bl	2864c <is_command>
   286d2:	b388      	cbz	r0, 28738 <at_parse_detect_type+0x8c>
	state = new_state;
   286d4:	2307      	movs	r3, #7
   286d6:	e7f5      	b.n	286c4 <at_parse_detect_type+0x18>
	if (chr == '"') {
   286d8:	2a22      	cmp	r2, #34	; 0x22
   286da:	d006      	beq.n	286ea <at_parse_detect_type+0x3e>
	if (chr == '(') {
   286dc:	2a28      	cmp	r2, #40	; 0x28
   286de:	d109      	bne.n	286f4 <at_parse_detect_type+0x48>
   286e0:	2201      	movs	r2, #1
   286e2:	4b1f      	ldr	r3, [pc, #124]	; (28760 <at_parse_detect_type+0xb4>)
		tmpstr++;
   286e4:	4414      	add	r4, r2
	state = new_state;
   286e6:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   286e8:	e7ed      	b.n	286c6 <at_parse_detect_type+0x1a>
	state = new_state;
   286ea:	2203      	movs	r2, #3
   286ec:	4b1c      	ldr	r3, [pc, #112]	; (28760 <at_parse_detect_type+0xb4>)
		tmpstr++;
   286ee:	3401      	adds	r4, #1
	state = new_state;
   286f0:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   286f2:	e7e8      	b.n	286c6 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   286f4:	4610      	mov	r0, r2
   286f6:	f00f fb2a 	bl	37d4e <is_lfcr>
   286fa:	b170      	cbz	r0, 2871a <at_parse_detect_type+0x6e>
   286fc:	4918      	ldr	r1, [pc, #96]	; (28760 <at_parse_detect_type+0xb4>)
   286fe:	7808      	ldrb	r0, [r1, #0]
   28700:	2804      	cmp	r0, #4
   28702:	d108      	bne.n	28716 <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   28704:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   28708:	f00f fb21 	bl	37d4e <is_lfcr>
   2870c:	2800      	cmp	r0, #0
   2870e:	d1f9      	bne.n	28704 <at_parse_detect_type+0x58>
	state = new_state;
   28710:	2305      	movs	r3, #5
   28712:	700b      	strb	r3, [r1, #0]
}
   28714:	e7d7      	b.n	286c6 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   28716:	2808      	cmp	r0, #8
   28718:	d0d5      	beq.n	286c6 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2871a:	3a2c      	subs	r2, #44	; 0x2c
   2871c:	b2d2      	uxtb	r2, r2
   2871e:	2a11      	cmp	r2, #17
   28720:	d807      	bhi.n	28732 <at_parse_detect_type+0x86>
   28722:	4b10      	ldr	r3, [pc, #64]	; (28764 <at_parse_detect_type+0xb8>)
   28724:	fa23 f202 	lsr.w	r2, r3, r2
   28728:	07d3      	lsls	r3, r2, #31
   2872a:	d502      	bpl.n	28732 <at_parse_detect_type+0x86>
	state = new_state;
   2872c:	2208      	movs	r2, #8
   2872e:	4b0c      	ldr	r3, [pc, #48]	; (28760 <at_parse_detect_type+0xb4>)
   28730:	e013      	b.n	2875a <at_parse_detect_type+0xae>
		return -1;
   28732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28736:	e7c8      	b.n	286ca <at_parse_detect_type+0x1e>
	state = new_state;
   28738:	2302      	movs	r3, #2
   2873a:	e7c3      	b.n	286c4 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   2873c:	dd03      	ble.n	28746 <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2873e:	2a2b      	cmp	r2, #43	; 0x2b
   28740:	d0f7      	beq.n	28732 <at_parse_detect_type+0x86>
   28742:	2a25      	cmp	r2, #37	; 0x25
   28744:	d0f5      	beq.n	28732 <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   28746:	4b08      	ldr	r3, [pc, #32]	; (28768 <at_parse_detect_type+0xbc>)
   28748:	5cd3      	ldrb	r3, [r2, r3]
   2874a:	0759      	lsls	r1, r3, #29
   2874c:	d403      	bmi.n	28756 <at_parse_detect_type+0xaa>
   2874e:	2a2d      	cmp	r2, #45	; 0x2d
   28750:	d001      	beq.n	28756 <at_parse_detect_type+0xaa>
   28752:	2a2b      	cmp	r2, #43	; 0x2b
   28754:	d1c0      	bne.n	286d8 <at_parse_detect_type+0x2c>
	state = new_state;
   28756:	2204      	movs	r2, #4
   28758:	4b01      	ldr	r3, [pc, #4]	; (28760 <at_parse_detect_type+0xb4>)
   2875a:	701a      	strb	r2, [r3, #0]
}
   2875c:	e7b3      	b.n	286c6 <at_parse_detect_type+0x1a>
   2875e:	bf00      	nop
   28760:	2002c6d9 	.word	0x2002c6d9
   28764:	00024001 	.word	0x00024001
   28768:	0003d1dc 	.word	0x0003d1dc

0002876c <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   2876c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28770:	4688      	mov	r8, r1
   28772:	4616      	mov	r6, r2
   28774:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   28776:	4604      	mov	r4, r0
   28778:	2800      	cmp	r0, #0
   2877a:	d07e      	beq.n	2887a <at_parser_max_params_from_str+0x10e>
   2877c:	2a00      	cmp	r2, #0
   2877e:	d07c      	beq.n	2887a <at_parser_max_params_from_str+0x10e>
   28780:	6853      	ldr	r3, [r2, #4]
   28782:	2b00      	cmp	r3, #0
   28784:	d079      	beq.n	2887a <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   28786:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   28788:	4610      	mov	r0, r2
   2878a:	f00f fb5b 	bl	37e44 <at_params_list_clear>
	const char *str = *at_params_str;
   2878e:	9401      	str	r4, [sp, #4]
	int index = 0;
   28790:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   28792:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   28794:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 28884 <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   28798:	429f      	cmp	r7, r3
   2879a:	bf28      	it	cs
   2879c:	461f      	movcs	r7, r3
	state = IDLE;
   2879e:	4b38      	ldr	r3, [pc, #224]	; (28880 <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   287a0:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 28888 <at_parser_max_params_from_str+0x11c>
   287a4:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   287a6:	9b01      	ldr	r3, [sp, #4]
   287a8:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   287aa:	2a00      	cmp	r2, #0
   287ac:	d04b      	beq.n	28846 <at_parser_max_params_from_str+0xda>
   287ae:	42a7      	cmp	r7, r4
   287b0:	d949      	bls.n	28846 <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   287b2:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   287b6:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   287b8:	0711      	lsls	r1, r2, #28
			str++;
   287ba:	bf48      	it	mi
   287bc:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   287be:	4621      	mov	r1, r4
			str++;
   287c0:	bf48      	it	mi
   287c2:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   287c4:	f7ff ff72 	bl	286ac <at_parse_detect_type>
   287c8:	1c42      	adds	r2, r0, #1
   287ca:	d03c      	beq.n	28846 <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   287cc:	4632      	mov	r2, r6
   287ce:	4621      	mov	r1, r4
   287d0:	a801      	add	r0, sp, #4
   287d2:	f7ff fe5d 	bl	28490 <at_parse_process_element>
   287d6:	1c43      	adds	r3, r0, #1
   287d8:	d035      	beq.n	28846 <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   287da:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   287dc:	781a      	ldrb	r2, [r3, #0]
   287de:	3a2c      	subs	r2, #44	; 0x2c
   287e0:	b2d2      	uxtb	r2, r2
   287e2:	2a11      	cmp	r2, #17
   287e4:	d81a      	bhi.n	2881c <at_parser_max_params_from_str+0xb0>
   287e6:	fa2a f202 	lsr.w	r2, sl, r2
   287ea:	07d1      	lsls	r1, r2, #31
   287ec:	d516      	bpl.n	2881c <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   287ee:	7858      	ldrb	r0, [r3, #1]
   287f0:	f00f faad 	bl	37d4e <is_lfcr>
   287f4:	b178      	cbz	r0, 28816 <at_parser_max_params_from_str+0xaa>
				index++;
   287f6:	3401      	adds	r4, #1
				if (index == max_params) {
   287f8:	42bc      	cmp	r4, r7
   287fa:	d039      	beq.n	28870 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   287fc:	4621      	mov	r1, r4
   287fe:	a801      	add	r0, sp, #4
   28800:	f7ff ff54 	bl	286ac <at_parse_detect_type>
   28804:	1c42      	adds	r2, r0, #1
   28806:	d01e      	beq.n	28846 <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   28808:	4632      	mov	r2, r6
   2880a:	4621      	mov	r1, r4
   2880c:	a801      	add	r0, sp, #4
   2880e:	f7ff fe3f 	bl	28490 <at_parse_process_element>
   28812:	1c43      	adds	r3, r0, #1
   28814:	d017      	beq.n	28846 <at_parser_max_params_from_str+0xda>
			str++;
   28816:	9b01      	ldr	r3, [sp, #4]
   28818:	3301      	adds	r3, #1
   2881a:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   2881c:	9a01      	ldr	r2, [sp, #4]
   2881e:	7810      	ldrb	r0, [r2, #0]
   28820:	f00f fa95 	bl	37d4e <is_lfcr>
   28824:	b1f8      	cbz	r0, 28866 <at_parser_max_params_from_str+0xfa>
   28826:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   28828:	7811      	ldrb	r1, [r2, #0]
   2882a:	4693      	mov	fp, r2
   2882c:	4608      	mov	r0, r1
   2882e:	3201      	adds	r2, #1
   28830:	f00f fa8d 	bl	37d4e <is_lfcr>
   28834:	2800      	cmp	r0, #0
   28836:	d1f7      	bne.n	28828 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   28838:	b119      	cbz	r1, 28842 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2883a:	292b      	cmp	r1, #43	; 0x2b
   2883c:	d001      	beq.n	28842 <at_parser_max_params_from_str+0xd6>
   2883e:	2925      	cmp	r1, #37	; 0x25
   28840:	d111      	bne.n	28866 <at_parser_max_params_from_str+0xfa>
				str += i;
   28842:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   28846:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   28848:	b9a5      	cbnz	r5, 28874 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2884a:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   2884c:	2a00      	cmp	r2, #0
   2884e:	bf0c      	ite	eq
   28850:	2000      	moveq	r0, #0
   28852:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   28856:	f1b8 0f00 	cmp.w	r8, #0
   2885a:	d001      	beq.n	28860 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   2885c:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   28860:	b003      	add	sp, #12
   28862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   28866:	3401      	adds	r4, #1
			oversized = true;
   28868:	42bc      	cmp	r4, r7
   2886a:	bf08      	it	eq
   2886c:	2501      	moveq	r5, #1
   2886e:	e79a      	b.n	287a6 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   28870:	4605      	mov	r5, r0
   28872:	e7e8      	b.n	28846 <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   28874:	f06f 0006 	mvn.w	r0, #6
   28878:	e7ed      	b.n	28856 <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   2887a:	f06f 0015 	mvn.w	r0, #21
   2887e:	e7ef      	b.n	28860 <at_parser_max_params_from_str+0xf4>
   28880:	2002c6d9 	.word	0x2002c6d9
   28884:	0003d1dc 	.word	0x0003d1dc
   28888:	00024001 	.word	0x00024001

0002888c <lte_lc_power_off>:

	return 0;
}

int lte_lc_power_off(void)
{
   2888c:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   2888e:	2300      	movs	r3, #0
   28890:	4804      	ldr	r0, [pc, #16]	; (288a4 <lte_lc_power_off+0x18>)
   28892:	461a      	mov	r2, r3
   28894:	4619      	mov	r1, r3
   28896:	f7ff fc97 	bl	281c8 <at_cmd_write>
   2889a:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   2889c:	bf18      	it	ne
   2889e:	f06f 0004 	mvnne.w	r0, #4
   288a2:	bd08      	pop	{r3, pc}
   288a4:	0003c3ef 	.word	0x0003c3ef

000288a8 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   288a8:	b510      	push	{r4, lr}
   288aa:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   288ac:	4a09      	ldr	r2, [pc, #36]	; (288d4 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   288ae:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   288b0:	7823      	ldrb	r3, [r4, #0]
   288b2:	2100      	movs	r1, #0
   288b4:	f7ff ff5a 	bl	2876c <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   288b8:	f110 0f0b 	cmn.w	r0, #11
   288bc:	d000      	beq.n	288c0 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   288be:	b940      	cbnz	r0, 288d2 <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   288c0:	4804      	ldr	r0, [pc, #16]	; (288d4 <modem_info_parse.isra.0+0x2c>)
   288c2:	f00f fba3 	bl	3800c <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   288c6:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   288c8:	4298      	cmp	r0, r3
   288ca:	bf94      	ite	ls
   288cc:	2000      	movls	r0, #0
   288ce:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   288d2:	bd10      	pop	{r4, pc}
   288d4:	200236b0 	.word	0x200236b0

000288d8 <modem_info_type_get>:

enum at_param_type modem_info_type_get(enum modem_info info_type)
{
	if (info_type >= MODEM_INFO_COUNT) {
   288d8:	2815      	cmp	r0, #21
		return -EINVAL;
	}

	return modem_data[info_type]->data_type;
   288da:	bf9d      	ittte	ls
   288dc:	4b02      	ldrls	r3, [pc, #8]	; (288e8 <modem_info_type_get+0x10>)
   288de:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   288e2:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   288e4:	20ea      	movhi	r0, #234	; 0xea
}
   288e6:	4770      	bx	lr
   288e8:	0003a094 	.word	0x0003a094

000288ec <modem_info_short_get>:
}

int modem_info_short_get(enum modem_info info, uint16_t *buf)
{
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   288ec:	2300      	movs	r3, #0
{
   288ee:	b530      	push	{r4, r5, lr}
   288f0:	460d      	mov	r5, r1
   288f2:	b0a1      	sub	sp, #132	; 0x84
   288f4:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   288f6:	227c      	movs	r2, #124	; 0x7c
   288f8:	4619      	mov	r1, r3
   288fa:	a801      	add	r0, sp, #4
   288fc:	9300      	str	r3, [sp, #0]
   288fe:	f010 f93e 	bl	38b7e <memset>
	int cmd_length = 0;

	if (buf == NULL) {
   28902:	b1e5      	cbz	r5, 2893e <modem_info_short_get+0x52>
		return -EINVAL;
	}

	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   28904:	4a11      	ldr	r2, [pc, #68]	; (2894c <modem_info_short_get+0x60>)
   28906:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   2890a:	7aa2      	ldrb	r2, [r4, #10]
   2890c:	2a03      	cmp	r2, #3
   2890e:	d016      	beq.n	2893e <modem_info_short_get+0x52>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   28910:	2300      	movs	r3, #0
   28912:	2280      	movs	r2, #128	; 0x80
   28914:	4669      	mov	r1, sp
   28916:	6820      	ldr	r0, [r4, #0]
   28918:	f7ff fc56 	bl	281c8 <at_cmd_write>
			   recv_buf,
			   CONFIG_MODEM_INFO_BUFFER_SIZE,
			   NULL);

	if (err != 0) {
   2891c:	b990      	cbnz	r0, 28944 <modem_info_short_get+0x58>
		return -EIO;
	}

	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   2891e:	4669      	mov	r1, sp
   28920:	f104 0009 	add.w	r0, r4, #9
   28924:	f7ff ffc0 	bl	288a8 <modem_info_parse.isra.0>

	if (err) {
   28928:	b938      	cbnz	r0, 2893a <modem_info_short_get+0x4e>
		return err;
	}

	err = at_params_short_get(&m_param_list,
   2892a:	462a      	mov	r2, r5
   2892c:	7a21      	ldrb	r1, [r4, #8]
   2892e:	4808      	ldr	r0, [pc, #32]	; (28950 <modem_info_short_get+0x64>)
   28930:	f00f fb24 	bl	37f7c <at_params_short_get>

	if (err) {
		return err;
	}

	return sizeof(uint16_t);
   28934:	2800      	cmp	r0, #0
   28936:	bf08      	it	eq
   28938:	2002      	moveq	r0, #2
}
   2893a:	b021      	add	sp, #132	; 0x84
   2893c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2893e:	f06f 0015 	mvn.w	r0, #21
   28942:	e7fa      	b.n	2893a <modem_info_short_get+0x4e>
		return -EIO;
   28944:	f06f 0004 	mvn.w	r0, #4
   28948:	e7f7      	b.n	2893a <modem_info_short_get+0x4e>
   2894a:	bf00      	nop
   2894c:	0003a094 	.word	0x0003a094
   28950:	200236b0 	.word	0x200236b0

00028954 <modem_info_string_get>:

int modem_info_string_get(enum modem_info info, char *buf,
				  const size_t buf_size)
{
   28954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28958:	2500      	movs	r5, #0
{
   2895a:	460e      	mov	r6, r1
   2895c:	b0a5      	sub	sp, #148	; 0x94
   2895e:	4680      	mov	r8, r0
   28960:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28962:	4629      	mov	r1, r5
   28964:	227c      	movs	r2, #124	; 0x7c
   28966:	a805      	add	r0, sp, #20
   28968:	9504      	str	r5, [sp, #16]
   2896a:	f010 f908 	bl	38b7e <memset>
	/* length of each parsed IP address line */
	size_t ip_str_len = 0;
	/* tracks length of buf when parsing multiple IP addresses */
	size_t out_buf_len = 0;
	/* return value indicating length of the string written to buf */
	size_t len = 0;
   2896e:	9503      	str	r5, [sp, #12]

	if ((buf == NULL) || (buf_size == 0)) {
   28970:	2e00      	cmp	r6, #0
   28972:	f000 80e5 	beq.w	28b40 <modem_info_string_get+0x1ec>
   28976:	f1b9 0f00 	cmp.w	r9, #0
   2897a:	f000 80e1 	beq.w	28b40 <modem_info_string_get+0x1ec>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   2897e:	4b75      	ldr	r3, [pc, #468]	; (28b54 <modem_info_string_get+0x200>)
   28980:	2280      	movs	r2, #128	; 0x80
   28982:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   28986:	a904      	add	r1, sp, #16
   28988:	462b      	mov	r3, r5
   2898a:	f8da 0000 	ldr.w	r0, [sl]
   2898e:	f7ff fc1b 	bl	281c8 <at_cmd_write>
			  NULL);

	/* modem_info does not yet support array objects, so here we handle
	 * the supported bands independently as a string
	 */
	if (info == MODEM_INFO_SUP_BAND) {
   28992:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   28996:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   28998:	d10c      	bne.n	289b4 <modem_info_string_get+0x60>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2899a:	f10d 0119 	add.w	r1, sp, #25
   2899e:	4630      	mov	r0, r6
   289a0:	f010 fa2c 	bl	38dfc <strcpy>
		strcpy(buf, recv_buf + sizeof("%XCBAND: ") - 1);
		return strlen(buf);
   289a4:	4630      	mov	r0, r6
   289a6:	f7f4 fb63 	bl	1d070 <strlen>
   289aa:	4601      	mov	r1, r0
			len = out_buf_len;
		}
	}

	return len <= 0 ? -ENOTSUP : len;
}
   289ac:	4608      	mov	r0, r1
   289ae:	b025      	add	sp, #148	; 0x94
   289b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   289b4:	f1b8 0f09 	cmp.w	r8, #9
   289b8:	d038      	beq.n	28a2c <modem_info_string_get+0xd8>
	if (err != 0) {
   289ba:	2c00      	cmp	r4, #0
   289bc:	f040 80c3 	bne.w	28b46 <modem_info_string_get+0x1f2>
	size_t ip_str_len = 0;
   289c0:	4627      	mov	r7, r4
		err = at_params_string_get(&m_param_list,
   289c2:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 28b78 <modem_info_string_get+0x224>
	size_t cmd_rsp_idx = 0;
   289c6:	9400      	str	r4, [sp, #0]
	if (info == MODEM_INFO_IP_ADDRESS) {
   289c8:	9a00      	ldr	r2, [sp, #0]
   289ca:	ab04      	add	r3, sp, #16
   289cc:	f1b8 0f09 	cmp.w	r8, #9
   289d0:	4413      	add	r3, r2
   289d2:	d10f      	bne.n	289f4 <modem_info_string_get+0xa0>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   289d4:	4618      	mov	r0, r3
   289d6:	4960      	ldr	r1, [pc, #384]	; (28b58 <modem_info_string_get+0x204>)
   289d8:	9301      	str	r3, [sp, #4]
   289da:	f010 fa63 	bl	38ea4 <strstr>
		if (ip_str_end == NULL) {
   289de:	2800      	cmp	r0, #0
   289e0:	f000 80b4 	beq.w	28b4c <modem_info_string_get+0x1f8>
		recv_buf[++ip_str_len] = 0;
   289e4:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   289e6:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   289e8:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   289ea:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   289ec:	1c47      	adds	r7, r0, #1
   289ee:	443a      	add	r2, r7
   289f0:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   289f4:	4619      	mov	r1, r3
   289f6:	f10a 0009 	add.w	r0, sl, #9
   289fa:	f7ff ff55 	bl	288a8 <modem_info_parse.isra.0>
	if (err) {
   289fe:	4601      	mov	r1, r0
   28a00:	b1b8      	cbz	r0, 28a32 <modem_info_string_get+0xde>
   28a02:	4a56      	ldr	r2, [pc, #344]	; (28b5c <modem_info_string_get+0x208>)
   28a04:	4b56      	ldr	r3, [pc, #344]	; (28b60 <modem_info_string_get+0x20c>)
		LOG_ERR("Unable to parse data: %d", err);
   28a06:	9000      	str	r0, [sp, #0]
   28a08:	1ad2      	subs	r2, r2, r3
   28a0a:	08d2      	lsrs	r2, r2, #3
   28a0c:	0192      	lsls	r2, r2, #6
   28a0e:	4855      	ldr	r0, [pc, #340]	; (28b64 <modem_info_string_get+0x210>)
   28a10:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Unable to obtain short: %d", err);
   28a14:	f00d fb13 	bl	3603e <log_1>
			return err;
   28a18:	9900      	ldr	r1, [sp, #0]
   28a1a:	e7c7      	b.n	289ac <modem_info_string_get+0x58>
			++ip_str_end;
   28a1c:	3001      	adds	r0, #1
			++ip_cnt;
   28a1e:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   28a20:	4639      	mov	r1, r7
   28a22:	f010 fa3f 	bl	38ea4 <strstr>
   28a26:	2800      	cmp	r0, #0
   28a28:	d1f8      	bne.n	28a1c <modem_info_string_get+0xc8>
   28a2a:	e7c6      	b.n	289ba <modem_info_string_get+0x66>
   28a2c:	4f4a      	ldr	r7, [pc, #296]	; (28b58 <modem_info_string_get+0x204>)
	char *ip_str_end = recv_buf;
   28a2e:	a804      	add	r0, sp, #16
   28a30:	e7f6      	b.n	28a20 <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   28a32:	f89a 300a 	ldrb.w	r3, [sl, #10]
   28a36:	2b01      	cmp	r3, #1
   28a38:	d11f      	bne.n	28a7a <modem_info_string_get+0x126>
		err = at_params_short_get(&m_param_list,
   28a3a:	f89a 1008 	ldrb.w	r1, [sl, #8]
   28a3e:	4658      	mov	r0, fp
   28a40:	f10d 020a 	add.w	r2, sp, #10
   28a44:	f00f fa9a 	bl	37f7c <at_params_short_get>
		if (err) {
   28a48:	4601      	mov	r1, r0
   28a4a:	b148      	cbz	r0, 28a60 <modem_info_string_get+0x10c>
   28a4c:	4a43      	ldr	r2, [pc, #268]	; (28b5c <modem_info_string_get+0x208>)
   28a4e:	4b44      	ldr	r3, [pc, #272]	; (28b60 <modem_info_string_get+0x20c>)
			LOG_ERR("Unable to obtain short: %d", err);
   28a50:	9000      	str	r0, [sp, #0]
   28a52:	1ad2      	subs	r2, r2, r3
   28a54:	08d2      	lsrs	r2, r2, #3
   28a56:	0192      	lsls	r2, r2, #6
   28a58:	4843      	ldr	r0, [pc, #268]	; (28b68 <modem_info_string_get+0x214>)
   28a5a:	f042 0201 	orr.w	r2, r2, #1
   28a5e:	e7d9      	b.n	28a14 <modem_info_string_get+0xc0>
		len = snprintf(buf, buf_size, "%d", param_value);
   28a60:	4649      	mov	r1, r9
   28a62:	4630      	mov	r0, r6
   28a64:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   28a68:	4a40      	ldr	r2, [pc, #256]	; (28b6c <modem_info_string_get+0x218>)
   28a6a:	f00c f9af 	bl	34dcc <sniprintf>
		if ((len <= 0) || (len > buf_size)) {
   28a6e:	4548      	cmp	r0, r9
		len = snprintf(buf, buf_size, "%d", param_value);
   28a70:	9003      	str	r0, [sp, #12]
		if ((len <= 0) || (len > buf_size)) {
   28a72:	d915      	bls.n	28aa0 <modem_info_string_get+0x14c>
			return -EMSGSIZE;
   28a74:	f06f 0179 	mvn.w	r1, #121	; 0x79
   28a78:	e798      	b.n	289ac <modem_info_string_get+0x58>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   28a7a:	2b03      	cmp	r3, #3
   28a7c:	d110      	bne.n	28aa0 <modem_info_string_get+0x14c>
		len = buf_size - out_buf_len;
   28a7e:	eba9 0304 	sub.w	r3, r9, r4
		err = at_params_string_get(&m_param_list,
   28a82:	f89a 1008 	ldrb.w	r1, [sl, #8]
		len = buf_size - out_buf_len;
   28a86:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   28a88:	4658      	mov	r0, fp
   28a8a:	ab03      	add	r3, sp, #12
   28a8c:	1932      	adds	r2, r6, r4
   28a8e:	f00f fa9a 	bl	37fc6 <at_params_string_get>
		if (err != 0) {
   28a92:	4601      	mov	r1, r0
   28a94:	2800      	cmp	r0, #0
   28a96:	d189      	bne.n	289ac <modem_info_string_get+0x58>
		} else if (len >= buf_size) {
   28a98:	9b03      	ldr	r3, [sp, #12]
   28a9a:	454b      	cmp	r3, r9
   28a9c:	d2ea      	bcs.n	28a74 <modem_info_string_get+0x120>
		buf[len] = 0;
   28a9e:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   28aa0:	f1b8 0f0e 	cmp.w	r8, #14
   28aa4:	d121      	bne.n	28aea <modem_info_string_get+0x196>
   28aa6:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   28aa8:	4630      	mov	r0, r6
   28aaa:	f7f4 fae1 	bl	1d070 <strlen>
   28aae:	1ca3      	adds	r3, r4, #2
   28ab0:	1ba4      	subs	r4, r4, r6
   28ab2:	42a0      	cmp	r0, r4
   28ab4:	d80f      	bhi.n	28ad6 <modem_info_string_get+0x182>
		if ((len == ICCID_LEN) &&
   28ab6:	9b03      	ldr	r3, [sp, #12]
   28ab8:	2b14      	cmp	r3, #20
   28aba:	d106      	bne.n	28aca <modem_info_string_get+0x176>
   28abc:	7cf3      	ldrb	r3, [r6, #19]
   28abe:	2b46      	cmp	r3, #70	; 0x46
   28ac0:	d103      	bne.n	28aca <modem_info_string_get+0x176>
			buf[len - 1] = '\0';
   28ac2:	2300      	movs	r3, #0
   28ac4:	74f3      	strb	r3, [r6, #19]
			--len;
   28ac6:	2313      	movs	r3, #19
   28ac8:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   28aca:	9903      	ldr	r1, [sp, #12]
   28acc:	2900      	cmp	r1, #0
   28ace:	bf08      	it	eq
   28ad0:	f06f 0185 	mvneq.w	r1, #133	; 0x85
   28ad4:	e76a      	b.n	289ac <modem_info_string_get+0x58>
		current_char = buf[i];
   28ad6:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   28ada:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   28ade:	461c      	mov	r4, r3
		buf[i] = next_char;
   28ae0:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   28ae4:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   28ae8:	e7de      	b.n	28aa8 <modem_info_string_get+0x154>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   28aea:	f1b8 0f09 	cmp.w	r8, #9
   28aee:	d1ec      	bne.n	28aca <modem_info_string_get+0x176>
   28af0:	2d00      	cmp	r5, #0
   28af2:	ddea      	ble.n	28aca <modem_info_string_get+0x176>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   28af4:	1933      	adds	r3, r6, r4
   28af6:	4618      	mov	r0, r3
   28af8:	491d      	ldr	r1, [pc, #116]	; (28b70 <modem_info_string_get+0x21c>)
   28afa:	9301      	str	r3, [sp, #4]
   28afc:	f010 f9d2 	bl	38ea4 <strstr>
		if (ip_v6_str) {
   28b00:	b130      	cbz	r0, 28b10 <modem_info_string_get+0x1bc>
			*ip_v6_str = 0;
   28b02:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   28b04:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   28b06:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   28b08:	4618      	mov	r0, r3
   28b0a:	f7f4 fab1 	bl	1d070 <strlen>
   28b0e:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   28b10:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   28b12:	2d01      	cmp	r5, #1
		out_buf_len += len;
   28b14:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   28b16:	d00e      	beq.n	28b36 <modem_info_string_get+0x1e2>
			err = snprintf(&buf[out_buf_len],
   28b18:	eba9 0104 	sub.w	r1, r9, r4
   28b1c:	4a15      	ldr	r2, [pc, #84]	; (28b74 <modem_info_string_get+0x220>)
   28b1e:	1930      	adds	r0, r6, r4
   28b20:	9100      	str	r1, [sp, #0]
   28b22:	f00c f953 	bl	34dcc <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   28b26:	2800      	cmp	r0, #0
   28b28:	dda4      	ble.n	28a74 <modem_info_string_get+0x120>
   28b2a:	9900      	ldr	r1, [sp, #0]
   28b2c:	4281      	cmp	r1, r0
   28b2e:	d3a1      	bcc.n	28a74 <modem_info_string_get+0x120>
			cmd_rsp_idx = ip_str_len + 1;
   28b30:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   28b32:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   28b34:	9300      	str	r3, [sp, #0]
		if (--ip_cnt) {
   28b36:	3d01      	subs	r5, #1
   28b38:	f47f af46 	bne.w	289c8 <modem_info_string_get+0x74>
			len = out_buf_len;
   28b3c:	9403      	str	r4, [sp, #12]
   28b3e:	e7c4      	b.n	28aca <modem_info_string_get+0x176>
		return -EINVAL;
   28b40:	f06f 0115 	mvn.w	r1, #21
   28b44:	e732      	b.n	289ac <modem_info_string_get+0x58>
		return -EIO;
   28b46:	f06f 0104 	mvn.w	r1, #4
   28b4a:	e72f      	b.n	289ac <modem_info_string_get+0x58>
			return -EFAULT;
   28b4c:	f06f 010d 	mvn.w	r1, #13
   28b50:	e72c      	b.n	289ac <modem_info_string_get+0x58>
   28b52:	bf00      	nop
   28b54:	0003a094 	.word	0x0003a094
   28b58:	0003c9a6 	.word	0x0003c9a6
   28b5c:	00039ae0 	.word	0x00039ae0
   28b60:	00039a50 	.word	0x00039a50
   28b64:	0003c567 	.word	0x0003c567
   28b68:	0003c580 	.word	0x0003c580
   28b6c:	0003c57d 	.word	0x0003c57d
   28b70:	0003b871 	.word	0x0003b871
   28b74:	0003c59b 	.word	0x0003c59b
   28b78:	200236b0 	.word	0x200236b0

00028b7c <modem_info_init>:
}

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   28b7c:	210a      	movs	r1, #10
   28b7e:	4801      	ldr	r0, [pc, #4]	; (28b84 <modem_info_init+0x8>)
   28b80:	f00f b94d 	b.w	37e1e <at_params_list_init>
   28b84:	200236b0 	.word	0x200236b0

00028b88 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   28b88:	b538      	push	{r3, r4, r5, lr}
   28b8a:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   28b8c:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   28b90:	f7ff fea2 	bl	288d8 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   28b94:	2803      	cmp	r0, #3
   28b96:	d118      	bne.n	28bca <modem_data_get+0x42>
		ret = modem_info_string_get(param->type,
   28b98:	2264      	movs	r2, #100	; 0x64
   28b9a:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   28b9e:	1ca9      	adds	r1, r5, #2
   28ba0:	f7ff fed8 	bl	28954 <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   28ba4:	1e04      	subs	r4, r0, #0
   28ba6:	db02      	blt.n	28bae <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   28ba8:	2400      	movs	r4, #0
}
   28baa:	4620      	mov	r0, r4
   28bac:	bd38      	pop	{r3, r4, r5, pc}
   28bae:	4a11      	ldr	r2, [pc, #68]	; (28bf4 <modem_data_get+0x6c>)
   28bb0:	4b11      	ldr	r3, [pc, #68]	; (28bf8 <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   28bb2:	f895 106c 	ldrb.w	r1, [r5, #108]	; 0x6c
   28bb6:	1a9b      	subs	r3, r3, r2
   28bb8:	08db      	lsrs	r3, r3, #3
   28bba:	019b      	lsls	r3, r3, #6
   28bbc:	4622      	mov	r2, r4
   28bbe:	480f      	ldr	r0, [pc, #60]	; (28bfc <modem_data_get+0x74>)
   28bc0:	f043 0301 	orr.w	r3, r3, #1
   28bc4:	f00d fa52 	bl	3606c <log_2>
			return ret;
   28bc8:	e7ef      	b.n	28baa <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   28bca:	2801      	cmp	r0, #1
   28bcc:	d1ec      	bne.n	28ba8 <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   28bce:	4629      	mov	r1, r5
   28bd0:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   28bd4:	f7ff fe8a 	bl	288ec <modem_info_short_get>
		if (ret < 0) {
   28bd8:	1e04      	subs	r4, r0, #0
   28bda:	dae5      	bge.n	28ba8 <modem_data_get+0x20>
   28bdc:	4b05      	ldr	r3, [pc, #20]	; (28bf4 <modem_data_get+0x6c>)
   28bde:	4a06      	ldr	r2, [pc, #24]	; (28bf8 <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d", ret);
   28be0:	4621      	mov	r1, r4
   28be2:	1ad2      	subs	r2, r2, r3
   28be4:	08d2      	lsrs	r2, r2, #3
   28be6:	0192      	lsls	r2, r2, #6
   28be8:	4805      	ldr	r0, [pc, #20]	; (28c00 <modem_data_get+0x78>)
   28bea:	f042 0201 	orr.w	r2, r2, #1
   28bee:	f00d fa26 	bl	3603e <log_1>
			return ret;
   28bf2:	e7da      	b.n	28baa <modem_data_get+0x22>
   28bf4:	00039a50 	.word	0x00039a50
   28bf8:	00039ae8 	.word	0x00039ae8
   28bfc:	0003c59e 	.word	0x0003c59e
   28c00:	0003c5bc 	.word	0x0003c5bc

00028c04 <modem_info_params_init>:
	if (modem == NULL) {
   28c04:	2800      	cmp	r0, #0
   28c06:	d046      	beq.n	28c96 <modem_info_params_init+0x92>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   28c08:	2301      	movs	r3, #1
   28c0a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   28c0e:	2302      	movs	r3, #2
   28c10:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   28c14:	2303      	movs	r3, #3
   28c16:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   28c1a:	2305      	movs	r3, #5
   28c1c:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   28c20:	2306      	movs	r3, #6
   28c22:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   28c26:	2307      	movs	r3, #7
   28c28:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   28c2c:	2308      	movs	r3, #8
   28c2e:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   28c32:	2309      	movs	r3, #9
   28c34:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   28c38:	2304      	movs	r3, #4
   28c3a:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   28c3e:	230f      	movs	r3, #15
   28c40:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   28c44:	2310      	movs	r3, #16
   28c46:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   28c4a:	2311      	movs	r3, #17
   28c4c:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   28c50:	2314      	movs	r3, #20
   28c52:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   28c56:	2315      	movs	r3, #21
   28c58:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   28c5c:	230a      	movs	r3, #10
   28c5e:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   28c62:	230e      	movs	r3, #14
   28c64:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   28c68:	2312      	movs	r3, #18
   28c6a:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   28c6e:	230d      	movs	r3, #13
   28c70:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   28c74:	230b      	movs	r3, #11
   28c76:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.imei.type			= MODEM_INFO_IMEI;
   28c7a:	2313      	movs	r3, #19
   28c7c:	f880 38d4 	strb.w	r3, [r0, #2260]	; 0x8d4
	modem->device.board			= CONFIG_BOARD;
   28c80:	4b06      	ldr	r3, [pc, #24]	; (28c9c <modem_info_params_init+0x98>)
   28c82:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   28c86:	4b06      	ldr	r3, [pc, #24]	; (28ca0 <modem_info_params_init+0x9c>)
   28c88:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   28c8c:	4b05      	ldr	r3, [pc, #20]	; (28ca4 <modem_info_params_init+0xa0>)
   28c8e:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0
	return 0;
   28c92:	2000      	movs	r0, #0
   28c94:	4770      	bx	lr
		return -EINVAL;
   28c96:	f06f 0015 	mvn.w	r0, #21
}
   28c9a:	4770      	bx	lr
   28c9c:	0003c5d7 	.word	0x0003c5d7
   28ca0:	0003c5e9 	.word	0x0003c5e9
   28ca4:	0003c5f6 	.word	0x0003c5f6

00028ca8 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   28ca8:	e92d 4477 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, sl, lr}
	int ret;

	if (modem == NULL) {
   28cac:	4604      	mov	r4, r0
   28cae:	2800      	cmp	r0, #0
   28cb0:	f000 80ce 	beq.w	28e50 <modem_info_params_get+0x1a8>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   28cb4:	f7ff ff68 	bl	28b88 <modem_data_get>
   28cb8:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   28cba:	f104 0070 	add.w	r0, r4, #112	; 0x70
   28cbe:	f7ff ff63 	bl	28b88 <modem_data_get>
   28cc2:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   28cc4:	f504 7044 	add.w	r0, r4, #784	; 0x310
   28cc8:	f7ff ff5e 	bl	28b88 <modem_data_get>
   28ccc:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   28cce:	f504 7060 	add.w	r0, r4, #896	; 0x380
   28cd2:	f7ff ff59 	bl	28b88 <modem_data_get>
		ret += modem_data_get(&modem->network.current_operator);
   28cd6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		ret += modem_data_get(&modem->network.ue_mode);
   28cda:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   28cdc:	4618      	mov	r0, r3
   28cde:	9301      	str	r3, [sp, #4]
   28ce0:	f7ff ff52 	bl	28b88 <modem_data_get>
   28ce4:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   28ce6:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   28cea:	f7ff ff4d 	bl	28b88 <modem_data_get>
		ret += modem_data_get(&modem->network.area_code);
   28cee:	f104 0ae0 	add.w	sl, r4, #224	; 0xe0
		ret += modem_data_get(&modem->network.cellid_hex);
   28cf2:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   28cf4:	4650      	mov	r0, sl
   28cf6:	f7ff ff47 	bl	28b88 <modem_data_get>
   28cfa:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   28cfc:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   28d00:	f7ff ff42 	bl	28b88 <modem_data_get>
   28d04:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   28d06:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   28d0a:	f7ff ff3d 	bl	28b88 <modem_data_get>
   28d0e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   28d10:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   28d14:	f7ff ff38 	bl	28b88 <modem_data_get>
   28d18:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   28d1a:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   28d1e:	f7ff ff33 	bl	28b88 <modem_data_get>
   28d22:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   28d24:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   28d28:	f7ff ff2e 	bl	28b88 <modem_data_get>
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   28d2c:	9b01      	ldr	r3, [sp, #4]
			ret += modem_data_get(&modem->network.date_time);
   28d2e:	4405      	add	r5, r0
		}

		ret += mcc_mnc_parse(&modem->network.current_operator,
   28d30:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
   28d34:	f504 720c 	add.w	r2, r4, #560	; 0x230
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   28d38:	2b00      	cmp	r3, #0
   28d3a:	d050      	beq.n	28dde <modem_info_params_get+0x136>
   28d3c:	2900      	cmp	r1, #0
   28d3e:	d04e      	beq.n	28dde <modem_info_params_get+0x136>
   28d40:	2a00      	cmp	r2, #0
   28d42:	d04c      	beq.n	28dde <modem_info_params_get+0x136>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28d44:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
	memcpy(mcc->value_string, current_operator->value_string, 3);
   28d48:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   28d4c:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   28d50:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   28d54:	220a      	movs	r2, #10
   28d56:	7083      	strb	r3, [r0, #2]
   28d58:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   28d5c:	2100      	movs	r1, #0
   28d5e:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   28d62:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   28d66:	f204 2632 	addw	r6, r4, #562	; 0x232
   28d6a:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   28d6e:	f00c f8f9 	bl	34f64 <strtol>
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   28d72:	2100      	movs	r1, #0
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   28d74:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   28d78:	220a      	movs	r2, #10
   28d7a:	4630      	mov	r0, r6
   28d7c:	f00c f8f2 	bl	34f64 <strtol>
	return 0;
   28d80:	2100      	movs	r1, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   28d82:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   28d86:	2210      	movs	r2, #16
		ret += mcc_mnc_parse(&modem->network.current_operator,
   28d88:	440d      	add	r5, r1
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   28d8a:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   28d8e:	2100      	movs	r1, #0
   28d90:	f00c f8e8 	bl	34f64 <strtol>
   28d94:	f7f3 fca6 	bl	1c6e4 <__aeabi_i2d>
   28d98:	f504 66c4 	add.w	r6, r4, #1568	; 0x620
   28d9c:	e9c6 0100 	strd	r0, r1, [r6]
	if (area_code == NULL) {
   28da0:	f1ba 0f00 	cmp.w	sl, #0
   28da4:	d01e      	beq.n	28de4 <modem_info_params_get+0x13c>
	area_code->value_string[4] = '\0';
   28da6:	2600      	movs	r6, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   28da8:	2210      	movs	r2, #16
   28daa:	4631      	mov	r1, r6
	area_code->value_string[4] = '\0';
   28dac:	f884 60e6 	strb.w	r6, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   28db0:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   28db4:	f00c f8d6 	bl	34f64 <strtol>
   28db8:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   28dbc:	19a9      	adds	r1, r5, r6
   28dbe:	d014      	beq.n	28dea <modem_info_params_get+0x142>
   28dc0:	4a25      	ldr	r2, [pc, #148]	; (28e58 <modem_info_params_get+0x1b0>)
   28dc2:	4b26      	ldr	r3, [pc, #152]	; (28e5c <modem_info_params_get+0x1b4>)
			LOG_ERR("Network data not obtained: %d", ret);
   28dc4:	4826      	ldr	r0, [pc, #152]	; (28e60 <modem_info_params_get+0x1b8>)
   28dc6:	1ad2      	subs	r2, r2, r3
   28dc8:	08d2      	lsrs	r2, r2, #3
   28dca:	0192      	lsls	r2, r2, #6
   28dcc:	f042 0201 	orr.w	r2, r2, #1
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   28dd0:	f00d f935 	bl	3603e <log_1>
			return -EAGAIN;
   28dd4:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   28dd8:	b003      	add	sp, #12
   28dda:	e8bd 8470 	ldmia.w	sp!, {r4, r5, r6, sl, pc}
		return -EINVAL;
   28dde:	f06f 0115 	mvn.w	r1, #21
   28de2:	e7d0      	b.n	28d86 <modem_info_params_get+0xde>
		return -EINVAL;
   28de4:	f06f 0615 	mvn.w	r6, #21
   28de8:	e7e8      	b.n	28dbc <modem_info_params_get+0x114>
		ret = modem_data_get(&modem->sim.uicc);
   28dea:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   28dee:	f7ff fecb 	bl	28b88 <modem_data_get>
   28df2:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   28df4:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   28df8:	f7ff fec6 	bl	28b88 <modem_data_get>
   28dfc:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   28dfe:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   28e02:	f7ff fec1 	bl	28b88 <modem_data_get>
		if (ret) {
   28e06:	1829      	adds	r1, r5, r0
   28e08:	d008      	beq.n	28e1c <modem_info_params_get+0x174>
   28e0a:	4a13      	ldr	r2, [pc, #76]	; (28e58 <modem_info_params_get+0x1b0>)
   28e0c:	4b13      	ldr	r3, [pc, #76]	; (28e5c <modem_info_params_get+0x1b4>)
			LOG_ERR("Sim data not obtained: %d", ret);
   28e0e:	4815      	ldr	r0, [pc, #84]	; (28e64 <modem_info_params_get+0x1bc>)
   28e10:	1ad2      	subs	r2, r2, r3
   28e12:	08d2      	lsrs	r2, r2, #3
   28e14:	0192      	lsls	r2, r2, #6
   28e16:	f042 0201 	orr.w	r2, r2, #1
   28e1a:	e7d9      	b.n	28dd0 <modem_info_params_get+0x128>
		ret = modem_data_get(&modem->device.modem_fw);
   28e1c:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   28e20:	f7ff feb2 	bl	28b88 <modem_data_get>
   28e24:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   28e26:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   28e2a:	f7ff fead 	bl	28b88 <modem_data_get>
   28e2e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   28e30:	f604 0068 	addw	r0, r4, #2152	; 0x868
   28e34:	f7ff fea8 	bl	28b88 <modem_data_get>
		if (ret) {
   28e38:	1828      	adds	r0, r5, r0
   28e3a:	d0cd      	beq.n	28dd8 <modem_info_params_get+0x130>
   28e3c:	4a06      	ldr	r2, [pc, #24]	; (28e58 <modem_info_params_get+0x1b0>)
   28e3e:	4b07      	ldr	r3, [pc, #28]	; (28e5c <modem_info_params_get+0x1b4>)
			LOG_ERR("Device data not obtained: %d", ret);
   28e40:	4601      	mov	r1, r0
   28e42:	1ad2      	subs	r2, r2, r3
   28e44:	08d2      	lsrs	r2, r2, #3
   28e46:	0192      	lsls	r2, r2, #6
   28e48:	4807      	ldr	r0, [pc, #28]	; (28e68 <modem_info_params_get+0x1c0>)
   28e4a:	f042 0201 	orr.w	r2, r2, #1
   28e4e:	e7bf      	b.n	28dd0 <modem_info_params_get+0x128>
		return -EINVAL;
   28e50:	f06f 0015 	mvn.w	r0, #21
   28e54:	e7c0      	b.n	28dd8 <modem_info_params_get+0x130>
   28e56:	bf00      	nop
   28e58:	00039ae8 	.word	0x00039ae8
   28e5c:	00039a50 	.word	0x00039a50
   28e60:	0003c603 	.word	0x0003c603
   28e64:	0003c621 	.word	0x0003c621
   28e68:	0003c63b 	.word	0x0003c63b

00028e6c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   28e6c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   28e6e:	f7fa fe2d 	bl	23acc <z_impl_log_panic>
   28e72:	4b06      	ldr	r3, [pc, #24]	; (28e8c <k_sys_fatal_error_handler+0x20>)
   28e74:	4906      	ldr	r1, [pc, #24]	; (28e90 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   28e76:	4807      	ldr	r0, [pc, #28]	; (28e94 <k_sys_fatal_error_handler+0x28>)
   28e78:	1ac9      	subs	r1, r1, r3
   28e7a:	08c9      	lsrs	r1, r1, #3
   28e7c:	0189      	lsls	r1, r1, #6
   28e7e:	f041 0101 	orr.w	r1, r1, #1
   28e82:	f00d f8cd 	bl	36020 <log_0>
	sys_arch_reboot(0);
   28e86:	2000      	movs	r0, #0
   28e88:	f7fc fc70 	bl	2576c <sys_arch_reboot>

	CODE_UNREACHABLE;
   28e8c:	00039a50 	.word	0x00039a50
   28e90:	00039aa8 	.word	0x00039aa8
   28e94:	0003c66a 	.word	0x0003c66a

00028e98 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   28e98:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   28e9a:	4604      	mov	r4, r0
{
   28e9c:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   28e9e:	b1f8      	cbz	r0, 28ee0 <download_client_init+0x48>
   28ea0:	b1f1      	cbz	r1, 28ee0 <download_client_init+0x48>
		return -EINVAL;
	}

	client->fd = -1;
   28ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28ea6:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   28ea8:	f641 1308 	movw	r3, #6408	; 0x1908
   28eac:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   28eae:	2200      	movs	r2, #0
   28eb0:	2300      	movs	r3, #0
   28eb2:	2500      	movs	r5, #0
   28eb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   28eb8:	230e      	movs	r3, #14
   28eba:	9000      	str	r0, [sp, #0]
   28ebc:	e9cd 3503 	strd	r3, r5, [sp, #12]
   28ec0:	f600 1108 	addw	r1, r0, #2312	; 0x908
   28ec4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   28ec8:	e9cd 5501 	strd	r5, r5, [sp, #4]
   28ecc:	4b06      	ldr	r3, [pc, #24]	; (28ee8 <download_client_init+0x50>)
   28ece:	f500 6004 	add.w	r0, r0, #2112	; 0x840
   28ed2:	f00b f895 	bl	34000 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   28ed6:	f8c4 0838 	str.w	r0, [r4, #2104]	; 0x838
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   28eda:	4628      	mov	r0, r5
}
   28edc:	b009      	add	sp, #36	; 0x24
   28ede:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   28ee0:	f06f 0015 	mvn.w	r0, #21
   28ee4:	e7fa      	b.n	28edc <download_client_init+0x44>
   28ee6:	bf00      	nop
   28ee8:	00029345 	.word	0x00029345

00028eec <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   28eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ef0:	4688      	mov	r8, r1
   28ef2:	4616      	mov	r6, r2
	int err;
	struct sockaddr sa;

	if (client == NULL || host == NULL || config == NULL) {
   28ef4:	4604      	mov	r4, r0
{
   28ef6:	b0c5      	sub	sp, #276	; 0x114
	if (client == NULL || host == NULL || config == NULL) {
   28ef8:	2800      	cmp	r0, #0
   28efa:	f000 81cd 	beq.w	29298 <download_client_connect+0x3ac>
   28efe:	2900      	cmp	r1, #0
   28f00:	f000 81ca 	beq.w	29298 <download_client_connect+0x3ac>
   28f04:	2a00      	cmp	r2, #0
   28f06:	f000 81c7 	beq.w	29298 <download_client_connect+0x3ac>
		return -EINVAL;
	}

	if (client->fd != -1) {
   28f0a:	6803      	ldr	r3, [r0, #0]
   28f0c:	3301      	adds	r3, #1
   28f0e:	f040 81c6 	bne.w	2929e <download_client_connect+0x3b2>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   28f12:	6893      	ldr	r3, [r2, #8]
   28f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   28f18:	d90f      	bls.n	28f3a <download_client_connect+0x4e>
   28f1a:	4bbb      	ldr	r3, [pc, #748]	; (29208 <download_client_connect+0x31c>)
   28f1c:	49bb      	ldr	r1, [pc, #748]	; (2920c <download_client_connect+0x320>)
		LOG_ERR("The configured fragment size is larger than buffer");
   28f1e:	48bc      	ldr	r0, [pc, #752]	; (29210 <download_client_connect+0x324>)
   28f20:	1ac9      	subs	r1, r1, r3
   28f22:	08c9      	lsrs	r1, r1, #3
   28f24:	0189      	lsls	r1, r1, #6
   28f26:	f041 0101 	orr.w	r1, r1, #1
   28f2a:	f00d f879 	bl	36020 <log_0>
		return -E2BIG;
   28f2e:	f06f 0506 	mvn.w	r5, #6
	if (client->fd < 0) {
		return err;
	}

	return 0;
}
   28f32:	4628      	mov	r0, r5
   28f34:	b045      	add	sp, #276	; 0x114
   28f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = host_lookup(host, AF_INET, config->apn, &sa);
   28f3a:	6855      	ldr	r5, [r2, #4]
	struct addrinfo hints = {
   28f3c:	2100      	movs	r1, #0
   28f3e:	2250      	movs	r2, #80	; 0x50
   28f40:	a81c      	add	r0, sp, #112	; 0x70
   28f42:	f00f fe1c 	bl	38b7e <memset>
			} : NULL,
   28f46:	b16d      	cbz	r5, 28f64 <download_client_connect+0x78>
			&(struct addrinfo) {
   28f48:	2250      	movs	r2, #80	; 0x50
   28f4a:	2100      	movs	r1, #0
   28f4c:	a830      	add	r0, sp, #192	; 0xc0
   28f4e:	f00f fe16 	bl	38b7e <memset>
   28f52:	2304      	movs	r3, #4
   28f54:	2266      	movs	r2, #102	; 0x66
   28f56:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
   28f5a:	f240 2302 	movw	r3, #514	; 0x202
   28f5e:	9537      	str	r5, [sp, #220]	; 0xdc
   28f60:	9334      	str	r3, [sp, #208]	; 0xd0
			} : NULL,
   28f62:	ad30      	add	r5, sp, #192	; 0xc0
	struct addrinfo hints = {
   28f64:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   28f66:	2240      	movs	r2, #64	; 0x40
   28f68:	4640      	mov	r0, r8
   28f6a:	a90c      	add	r1, sp, #48	; 0x30
	struct addrinfo hints = {
   28f6c:	951c      	str	r5, [sp, #112]	; 0x70
   28f6e:	931e      	str	r3, [sp, #120]	; 0x78
	err = url_parse_host(host, hostname, sizeof(hostname));
   28f70:	f000 fb54 	bl	2961c <url_parse_host>
	if (err) {
   28f74:	4605      	mov	r5, r0
   28f76:	2800      	cmp	r0, #0
   28f78:	d1db      	bne.n	28f32 <download_client_connect+0x46>
	return zsock_getaddrinfo(host, service, hints, res);
   28f7a:	4601      	mov	r1, r0
   28f7c:	ab05      	add	r3, sp, #20
   28f7e:	aa1c      	add	r2, sp, #112	; 0x70
   28f80:	a80c      	add	r0, sp, #48	; 0x30
   28f82:	f00d fc3d 	bl	36800 <zsock_getaddrinfo>
	if (err) {
   28f86:	4605      	mov	r5, r0
   28f88:	b190      	cbz	r0, 28fb0 <download_client_connect+0xc4>
   28f8a:	4b9f      	ldr	r3, [pc, #636]	; (29208 <download_client_connect+0x31c>)
   28f8c:	4c9f      	ldr	r4, [pc, #636]	; (2920c <download_client_connect+0x320>)
		LOG_WRN("Failed to resolve hostname %s on %s",
   28f8e:	a80c      	add	r0, sp, #48	; 0x30
   28f90:	1ae4      	subs	r4, r4, r3
   28f92:	f7fa fc23 	bl	237dc <log_strdup>
   28f96:	08e4      	lsrs	r4, r4, #3
   28f98:	01a4      	lsls	r4, r4, #6
   28f9a:	f044 0402 	orr.w	r4, r4, #2
   28f9e:	4601      	mov	r1, r0
   28fa0:	4623      	mov	r3, r4
   28fa2:	4a9c      	ldr	r2, [pc, #624]	; (29214 <download_client_connect+0x328>)
   28fa4:	489c      	ldr	r0, [pc, #624]	; (29218 <download_client_connect+0x32c>)
   28fa6:	f00d f861 	bl	3606c <log_2>
		return -EHOSTUNREACH;
   28faa:	f06f 0575 	mvn.w	r5, #117	; 0x75
   28fae:	e7c0      	b.n	28f32 <download_client_connect+0x46>
	*sa = *(ai->ai_addr);
   28fb0:	f8dd c014 	ldr.w	ip, [sp, #20]
   28fb4:	aa06      	add	r2, sp, #24
   28fb6:	f8dc 3018 	ldr.w	r3, [ip, #24]
   28fba:	f103 0e18 	add.w	lr, r3, #24
   28fbe:	4617      	mov	r7, r2
   28fc0:	6818      	ldr	r0, [r3, #0]
   28fc2:	6859      	ldr	r1, [r3, #4]
   28fc4:	3308      	adds	r3, #8
   28fc6:	c703      	stmia	r7!, {r0, r1}
   28fc8:	4573      	cmp	r3, lr
   28fca:	463a      	mov	r2, r7
   28fcc:	d1f7      	bne.n	28fbe <download_client_connect+0xd2>
	zsock_freeaddrinfo(ai);
   28fce:	4660      	mov	r0, ip
   28fd0:	f00d fc18 	bl	36804 <zsock_freeaddrinfo>
	client->config = *config;
   28fd4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   28fd8:	f604 0318 	addw	r3, r4, #2072	; 0x818
   28fdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = url_parse_proto(host, &dl->proto, &type);
   28fe0:	4640      	mov	r0, r8
	client->host = host;
   28fe2:	f8c4 8810 	str.w	r8, [r4, #2064]	; 0x810
	err = url_parse_proto(host, &dl->proto, &type);
   28fe6:	aa0c      	add	r2, sp, #48	; 0x30
   28fe8:	f604 0124 	addw	r1, r4, #2084	; 0x824
   28fec:	f000 fae0 	bl	295b0 <url_parse_proto>
	if (err) {
   28ff0:	b150      	cbz	r0, 29008 <download_client_connect+0x11c>
		type = SOCK_STREAM;
   28ff2:	2301      	movs	r3, #1
   28ff4:	930c      	str	r3, [sp, #48]	; 0x30
		if (dl->config.sec_tag != -1) {
   28ff6:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   28ffa:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   28ffc:	bf14      	ite	ne
   28ffe:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   29002:	2306      	moveq	r3, #6
   29004:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   29008:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   2900c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   29010:	2a11      	cmp	r2, #17
   29012:	f000 813b 	beq.w	2928c <download_client_connect+0x3a0>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   29016:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2901a:	d115      	bne.n	29048 <download_client_connect+0x15c>
		if (dl->config.sec_tag == -1) {
   2901c:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   29020:	3301      	adds	r3, #1
   29022:	d111      	bne.n	29048 <download_client_connect+0x15c>
   29024:	4b78      	ldr	r3, [pc, #480]	; (29208 <download_client_connect+0x31c>)
   29026:	4979      	ldr	r1, [pc, #484]	; (2920c <download_client_connect+0x320>)
			LOG_WRN("No security tag provided for TLS/DTLS");
   29028:	487c      	ldr	r0, [pc, #496]	; (2921c <download_client_connect+0x330>)
   2902a:	1ac9      	subs	r1, r1, r3
   2902c:	08c9      	lsrs	r1, r1, #3
   2902e:	0189      	lsls	r1, r1, #6
   29030:	f041 0102 	orr.w	r1, r1, #2
   29034:	f00c fff4 	bl	36020 <log_0>
			return -EINVAL;
   29038:	f06f 0715 	mvn.w	r7, #21
	if (client->fd < 0) {
   2903c:	6823      	ldr	r3, [r4, #0]
		return err;
   2903e:	ea35 0523 	bics.w	r5, r5, r3, asr #32
   29042:	bf28      	it	cs
   29044:	463d      	movcs	r5, r7
   29046:	e774      	b.n	28f32 <download_client_connect+0x46>
	err = url_parse_port(host, &port);
   29048:	4640      	mov	r0, r8
   2904a:	a905      	add	r1, sp, #20
   2904c:	f000 fb10 	bl	29670 <url_parse_port>
	if (err) {
   29050:	b148      	cbz	r0, 29066 <download_client_connect+0x17a>
		switch (dl->proto) {
   29052:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   29056:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2905a:	d03a      	beq.n	290d2 <download_client_connect+0x1e6>
   2905c:	dc32      	bgt.n	290c4 <download_client_connect+0x1d8>
   2905e:	2b06      	cmp	r3, #6
   29060:	d03c      	beq.n	290dc <download_client_connect+0x1f0>
   29062:	2b11      	cmp	r3, #17
   29064:	d03c      	beq.n	290e0 <download_client_connect+0x1f4>
	switch (sa->sa_family) {
   29066:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   2906a:	2801      	cmp	r0, #1
   2906c:	d03b      	beq.n	290e6 <download_client_connect+0x1fa>
   2906e:	2802      	cmp	r0, #2
   29070:	f040 810f 	bne.w	29292 <download_client_connect+0x3a6>
		addrlen = sizeof(struct sockaddr_in6);
   29074:	f04f 0b18 	mov.w	fp, #24
		SIN6(sa)->sin6_port = htons(port);
   29078:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2907c:	0213      	lsls	r3, r2, #8
   2907e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   29082:	f8ad 301a 	strh.w	r3, [sp, #26]
	*fd = socket(sa->sa_family, type, dl->proto);
   29086:	990c      	ldr	r1, [sp, #48]	; 0x30
   29088:	f8d4 2824 	ldr.w	r2, [r4, #2084]	; 0x824
	return z_impl_zsock_socket(family, type, proto);
   2908c:	f7fb f874 	bl	24178 <z_impl_zsock_socket>
   29090:	4f5e      	ldr	r7, [pc, #376]	; (2920c <download_client_connect+0x320>)
   29092:	4a5d      	ldr	r2, [pc, #372]	; (29208 <download_client_connect+0x31c>)
	if (*fd < 0) {
   29094:	2800      	cmp	r0, #0
   29096:	eba7 0702 	sub.w	r7, r7, r2
   2909a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
	*fd = socket(sa->sa_family, type, dl->proto);
   2909e:	6020      	str	r0, [r4, #0]
	if (*fd < 0) {
   290a0:	9302      	str	r3, [sp, #8]
   290a2:	ea4f 1683 	mov.w	r6, r3, lsl #6
   290a6:	da28      	bge.n	290fa <download_client_connect+0x20e>
		LOG_ERR("Failed to create socket, err %d", errno);
   290a8:	f00d fec1 	bl	36e2e <__errno>
   290ac:	f046 0601 	orr.w	r6, r6, #1
   290b0:	6801      	ldr	r1, [r0, #0]
   290b2:	4632      	mov	r2, r6
   290b4:	485a      	ldr	r0, [pc, #360]	; (29220 <download_client_connect+0x334>)
   290b6:	f00c ffc2 	bl	3603e <log_1>
		return -errno;
   290ba:	f00d feb8 	bl	36e2e <__errno>
   290be:	6807      	ldr	r7, [r0, #0]
   290c0:	427f      	negs	r7, r7
   290c2:	e7bb      	b.n	2903c <download_client_connect+0x150>
		switch (dl->proto) {
   290c4:	f240 1211 	movw	r2, #273	; 0x111
   290c8:	4293      	cmp	r3, r2
   290ca:	d1cc      	bne.n	29066 <download_client_connect+0x17a>
			port = 5684;
   290cc:	f241 6334 	movw	r3, #5684	; 0x1634
   290d0:	e001      	b.n	290d6 <download_client_connect+0x1ea>
			port = 443;
   290d2:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   290d6:	f8ad 3014 	strh.w	r3, [sp, #20]
			break;
   290da:	e7c4      	b.n	29066 <download_client_connect+0x17a>
			port = 80;
   290dc:	2350      	movs	r3, #80	; 0x50
   290de:	e7fa      	b.n	290d6 <download_client_connect+0x1ea>
			port = 5683;
   290e0:	f241 6333 	movw	r3, #5683	; 0x1633
   290e4:	e7f7      	b.n	290d6 <download_client_connect+0x1ea>
		SIN(sa)->sin_port = htons(port);
   290e6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
		addrlen = sizeof(struct sockaddr_in);
   290ea:	f04f 0b08 	mov.w	fp, #8
		SIN(sa)->sin_port = htons(port);
   290ee:	0213      	lsls	r3, r2, #8
   290f0:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   290f4:	f8ad 301a 	strh.w	r3, [sp, #26]
		break;
   290f8:	e7c5      	b.n	29086 <download_client_connect+0x19a>
	if (dl->config.apn != NULL && strlen(dl->config.apn)) {
   290fa:	f8d4 081c 	ldr.w	r0, [r4, #2076]	; 0x81c
   290fe:	2800      	cmp	r0, #0
   29100:	d040      	beq.n	29184 <download_client_connect+0x298>
   29102:	f7f3 ffb5 	bl	1d070 <strlen>
   29106:	2800      	cmp	r0, #0
   29108:	d03c      	beq.n	29184 <download_client_connect+0x298>
		err = socket_apn_set(*fd, dl->config.apn);
   2910a:	f8d4 781c 	ldr.w	r7, [r4, #2076]	; 0x81c
   2910e:	f8d4 9000 	ldr.w	r9, [r4]
	len = strlen(apn);
   29112:	4638      	mov	r0, r7
   29114:	f7f3 ffac 	bl	1d070 <strlen>
	if (len >= IFNAMSIZ) {
   29118:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   2911a:	4682      	mov	sl, r0
	if (len >= IFNAMSIZ) {
   2911c:	d90d      	bls.n	2913a <download_client_connect+0x24e>
		LOG_ERR("Access point name is too long.");
   2911e:	4841      	ldr	r0, [pc, #260]	; (29224 <download_client_connect+0x338>)
   29120:	f046 0101 	orr.w	r1, r6, #1
   29124:	f00c ff7c 	bl	36020 <log_0>
		return -EINVAL;
   29128:	f06f 0715 	mvn.w	r7, #21
		close(*fd);
   2912c:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   2912e:	f00d fb7a 	bl	36826 <z_impl_zsock_close>
		*fd = -1;
   29132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29136:	6023      	str	r3, [r4, #0]
   29138:	e780      	b.n	2903c <download_client_connect+0x150>
	LOG_INF("Setting up APN: %s", log_strdup(apn));
   2913a:	f046 0203 	orr.w	r2, r6, #3
   2913e:	4638      	mov	r0, r7
   29140:	9203      	str	r2, [sp, #12]
   29142:	f7fa fb4b 	bl	237dc <log_strdup>
   29146:	9a03      	ldr	r2, [sp, #12]
   29148:	4601      	mov	r1, r0
   2914a:	4837      	ldr	r0, [pc, #220]	; (29228 <download_client_connect+0x33c>)
   2914c:	f00c ff77 	bl	3603e <log_1>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   29150:	2219      	movs	r2, #25
   29152:	463b      	mov	r3, r7
   29154:	2101      	movs	r1, #1
   29156:	4648      	mov	r0, r9
   29158:	f8cd a000 	str.w	sl, [sp]
   2915c:	f00d fc2c 	bl	369b8 <z_impl_zsock_setsockopt>
	if (err) {
   29160:	b180      	cbz	r0, 29184 <download_client_connect+0x298>
		LOG_ERR("Failed to bind socket to network \"%s\", err %d",
   29162:	4638      	mov	r0, r7
   29164:	f7fa fb3a 	bl	237dc <log_strdup>
   29168:	9002      	str	r0, [sp, #8]
   2916a:	f00d fe60 	bl	36e2e <__errno>
   2916e:	f046 0601 	orr.w	r6, r6, #1
   29172:	6802      	ldr	r2, [r0, #0]
   29174:	4633      	mov	r3, r6
   29176:	9902      	ldr	r1, [sp, #8]
   29178:	482c      	ldr	r0, [pc, #176]	; (2922c <download_client_connect+0x340>)
   2917a:	f00c ff77 	bl	3606c <log_2>
		return -ENETUNREACH;
   2917e:	f06f 0771 	mvn.w	r7, #113	; 0x71
   29182:	e7d3      	b.n	2912c <download_client_connect+0x240>
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   29184:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   29188:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2918c:	d003      	beq.n	29196 <download_client_connect+0x2aa>
   2918e:	f240 1211 	movw	r2, #273	; 0x111
   29192:	4293      	cmp	r3, r2
   29194:	d126      	bne.n	291e4 <download_client_connect+0x2f8>
	     && (dl->config.sec_tag != -1)) {
   29196:	f8d4 9818 	ldr.w	r9, [r4, #2072]	; 0x818
   2919a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2919e:	d021      	beq.n	291e4 <download_client_connect+0x2f8>
	verify = REQUIRED;
   291a0:	2302      	movs	r3, #2
		err = socket_sectag_set(*fd, dl->config.sec_tag);
   291a2:	f8d4 a000 	ldr.w	sl, [r4]
	sec_tag_t sec_tag_list[] = { sec_tag };
   291a6:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
	verify = REQUIRED;
   291aa:	931c      	str	r3, [sp, #112]	; 0x70
   291ac:	2304      	movs	r3, #4
   291ae:	2205      	movs	r2, #5
   291b0:	9300      	str	r3, [sp, #0]
   291b2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   291b6:	ab1c      	add	r3, sp, #112	; 0x70
   291b8:	4650      	mov	r0, sl
   291ba:	f00d fbfd 	bl	369b8 <z_impl_zsock_setsockopt>
	if (err) {
   291be:	9b02      	ldr	r3, [sp, #8]
   291c0:	019f      	lsls	r7, r3, #6
   291c2:	2800      	cmp	r0, #0
   291c4:	d038      	beq.n	29238 <download_client_connect+0x34c>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   291c6:	f00d fe32 	bl	36e2e <__errno>
   291ca:	f047 0701 	orr.w	r7, r7, #1
   291ce:	463a      	mov	r2, r7
   291d0:	6801      	ldr	r1, [r0, #0]
   291d2:	4817      	ldr	r0, [pc, #92]	; (29230 <download_client_connect+0x344>)
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   291d4:	f00c ff33 	bl	3603e <log_1>
		return -errno;
   291d8:	f00d fe29 	bl	36e2e <__errno>
   291dc:	6807      	ldr	r7, [r0, #0]
   291de:	427f      	negs	r7, r7
		if (err) {
   291e0:	2f00      	cmp	r7, #0
   291e2:	d1a3      	bne.n	2912c <download_client_connect+0x240>
	LOG_INF("Connecting to %s", log_strdup(host));
   291e4:	4640      	mov	r0, r8
   291e6:	f7fa faf9 	bl	237dc <log_strdup>
   291ea:	f046 0703 	orr.w	r7, r6, #3
   291ee:	4601      	mov	r1, r0
   291f0:	463a      	mov	r2, r7
   291f2:	4810      	ldr	r0, [pc, #64]	; (29234 <download_client_connect+0x348>)
   291f4:	f00c ff23 	bl	3603e <log_1>
	err = connect(*fd, sa, addrlen);
   291f8:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   291fa:	465a      	mov	r2, fp
   291fc:	a906      	add	r1, sp, #24
   291fe:	f00d fb3f 	bl	36880 <z_impl_zsock_connect>
	if (err) {
   29202:	bb90      	cbnz	r0, 2926a <download_client_connect+0x37e>
			return -EINVAL;
   29204:	2700      	movs	r7, #0
   29206:	e719      	b.n	2903c <download_client_connect+0x150>
   29208:	00039a50 	.word	0x00039a50
   2920c:	00039aa0 	.word	0x00039aa0
   29210:	0003c687 	.word	0x0003c687
   29214:	0003c6ba 	.word	0x0003c6ba
   29218:	0003c6bf 	.word	0x0003c6bf
   2921c:	0003c6e3 	.word	0x0003c6e3
   29220:	0003c709 	.word	0x0003c709
   29224:	0003c729 	.word	0x0003c729
   29228:	0003c748 	.word	0x0003c748
   2922c:	0003c75b 	.word	0x0003c75b
   29230:	0003c789 	.word	0x0003c789
   29234:	0003c806 	.word	0x0003c806
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   29238:	4649      	mov	r1, r9
   2923a:	481a      	ldr	r0, [pc, #104]	; (292a4 <download_client_connect+0x3b8>)
   2923c:	f047 0203 	orr.w	r2, r7, #3
   29240:	f00c fefd 	bl	3603e <log_1>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   29244:	2304      	movs	r3, #4
   29246:	2201      	movs	r2, #1
   29248:	9300      	str	r3, [sp, #0]
   2924a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2924e:	4650      	mov	r0, sl
   29250:	ab30      	add	r3, sp, #192	; 0xc0
   29252:	f00d fbb1 	bl	369b8 <z_impl_zsock_setsockopt>
	if (err) {
   29256:	2800      	cmp	r0, #0
   29258:	d0c4      	beq.n	291e4 <download_client_connect+0x2f8>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   2925a:	f00d fde8 	bl	36e2e <__errno>
   2925e:	f047 0701 	orr.w	r7, r7, #1
   29262:	6801      	ldr	r1, [r0, #0]
   29264:	463a      	mov	r2, r7
   29266:	4810      	ldr	r0, [pc, #64]	; (292a8 <download_client_connect+0x3bc>)
   29268:	e7b4      	b.n	291d4 <download_client_connect+0x2e8>
		LOG_ERR("Unable to connect, errno %d", errno);
   2926a:	f00d fde0 	bl	36e2e <__errno>
   2926e:	f046 0601 	orr.w	r6, r6, #1
   29272:	6801      	ldr	r1, [r0, #0]
   29274:	4632      	mov	r2, r6
   29276:	480d      	ldr	r0, [pc, #52]	; (292ac <download_client_connect+0x3c0>)
   29278:	f00c fee1 	bl	3603e <log_1>
		err = -errno;
   2927c:	f00d fdd7 	bl	36e2e <__errno>
   29280:	6803      	ldr	r3, [r0, #0]
   29282:	425f      	negs	r7, r3
	if (err) {
   29284:	2b00      	cmp	r3, #0
   29286:	f47f af51 	bne.w	2912c <download_client_connect+0x240>
   2928a:	e7bb      	b.n	29204 <download_client_connect+0x318>
			return -EPROTONOSUPPORT;
   2928c:	f06f 077a 	mvn.w	r7, #122	; 0x7a
   29290:	e6d4      	b.n	2903c <download_client_connect+0x150>
	switch (sa->sa_family) {
   29292:	f06f 0769 	mvn.w	r7, #105	; 0x69
   29296:	e6d1      	b.n	2903c <download_client_connect+0x150>
		return -EINVAL;
   29298:	f06f 0515 	mvn.w	r5, #21
   2929c:	e649      	b.n	28f32 <download_client_connect+0x46>
		return 0;
   2929e:	2500      	movs	r5, #0
   292a0:	e647      	b.n	28f32 <download_client_connect+0x46>
   292a2:	bf00      	nop
   292a4:	0003c7b5 	.word	0x0003c7b5
   292a8:	0003c7d8 	.word	0x0003c7d8
   292ac:	0003c817 	.word	0x0003c817

000292b0 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   292b0:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   292b2:	4604      	mov	r4, r0
   292b4:	b1e0      	cbz	r0, 292f0 <download_client_disconnect+0x40>
   292b6:	6800      	ldr	r0, [r0, #0]
   292b8:	2800      	cmp	r0, #0
   292ba:	db19      	blt.n	292f0 <download_client_disconnect+0x40>
	return z_impl_zsock_close(sock);
   292bc:	f00d fab3 	bl	36826 <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   292c0:	b190      	cbz	r0, 292e8 <download_client_disconnect+0x38>
   292c2:	4a0d      	ldr	r2, [pc, #52]	; (292f8 <download_client_disconnect+0x48>)
   292c4:	4c0d      	ldr	r4, [pc, #52]	; (292fc <download_client_disconnect+0x4c>)
   292c6:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Failed to close socket, errno %d", errno);
   292c8:	f00d fdb1 	bl	36e2e <__errno>
   292cc:	08e4      	lsrs	r4, r4, #3
   292ce:	01a4      	lsls	r4, r4, #6
   292d0:	f044 0401 	orr.w	r4, r4, #1
   292d4:	6801      	ldr	r1, [r0, #0]
   292d6:	4622      	mov	r2, r4
   292d8:	4809      	ldr	r0, [pc, #36]	; (29300 <download_client_disconnect+0x50>)
   292da:	f00c feb0 	bl	3603e <log_1>
		return -errno;
   292de:	f00d fda6 	bl	36e2e <__errno>
   292e2:	6800      	ldr	r0, [r0, #0]
   292e4:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   292e6:	bd10      	pop	{r4, pc}
	client->fd = -1;
   292e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   292ec:	6023      	str	r3, [r4, #0]
	return 0;
   292ee:	e7fa      	b.n	292e6 <download_client_disconnect+0x36>
		return -EINVAL;
   292f0:	f06f 0015 	mvn.w	r0, #21
   292f4:	e7f7      	b.n	292e6 <download_client_disconnect+0x36>
   292f6:	bf00      	nop
   292f8:	00039a50 	.word	0x00039a50
   292fc:	00039aa0 	.word	0x00039aa0
   29300:	0003c833 	.word	0x0003c833

00029304 <reconnect>:
{
   29304:	b510      	push	{r4, lr}
   29306:	4604      	mov	r4, r0
   29308:	4b0b      	ldr	r3, [pc, #44]	; (29338 <reconnect+0x34>)
   2930a:	490c      	ldr	r1, [pc, #48]	; (2933c <reconnect+0x38>)
	LOG_INF("Reconnecting..");
   2930c:	480c      	ldr	r0, [pc, #48]	; (29340 <reconnect+0x3c>)
   2930e:	1ac9      	subs	r1, r1, r3
   29310:	08c9      	lsrs	r1, r1, #3
   29312:	0189      	lsls	r1, r1, #6
   29314:	f041 0103 	orr.w	r1, r1, #3
   29318:	f00c fe82 	bl	36020 <log_0>
	err = download_client_disconnect(dl);
   2931c:	4620      	mov	r0, r4
   2931e:	f7ff ffc7 	bl	292b0 <download_client_disconnect>
	if (err) {
   29322:	b940      	cbnz	r0, 29336 <reconnect+0x32>
	err = download_client_connect(dl, dl->host, &dl->config);
   29324:	4620      	mov	r0, r4
   29326:	f8d4 1810 	ldr.w	r1, [r4, #2064]	; 0x810
   2932a:	f604 0218 	addw	r2, r4, #2072	; 0x818
}
   2932e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   29332:	f7ff bddb 	b.w	28eec <download_client_connect>
}
   29336:	bd10      	pop	{r4, pc}
   29338:	00039a50 	.word	0x00039a50
   2933c:	00039aa0 	.word	0x00039aa0
   29340:	0003c854 	.word	0x0003c854

00029344 <download_thread>:
{
   29344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29348:	4605      	mov	r5, r0
	int rc = 0;
   2934a:	2400      	movs	r4, #0
   2934c:	4e72      	ldr	r6, [pc, #456]	; (29518 <download_thread+0x1d4>)
   2934e:	4b73      	ldr	r3, [pc, #460]	; (2951c <download_thread+0x1d8>)
				rc = error_evt_send(dl, ECONNRESET);
   29350:	f500 57c8 	add.w	r7, r0, #6400	; 0x1900
   29354:	1af6      	subs	r6, r6, r3
{
   29356:	b086      	sub	sp, #24
   29358:	08f6      	lsrs	r6, r6, #3
				rc = error_evt_send(dl, ECONNRESET);
   2935a:	3708      	adds	r7, #8
	k_thread_suspend(dl->tid);
   2935c:	f8d5 0838 	ldr.w	r0, [r5, #2104]	; 0x838
	z_impl_k_thread_suspend(thread);
   29360:	f00a fba2 	bl	33aa8 <z_impl_k_thread_suspend>
		if (sizeof(dl->buf) - dl->offset == 0) {
   29364:	f8d5 1804 	ldr.w	r1, [r5, #2052]	; 0x804
   29368:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   2936c:	d10a      	bne.n	29384 <download_thread+0x40>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   2936e:	01b2      	lsls	r2, r6, #6
   29370:	486b      	ldr	r0, [pc, #428]	; (29520 <download_thread+0x1dc>)
   29372:	f042 0201 	orr.w	r2, r2, #1
   29376:	f00c fe62 	bl	3603e <log_1>
			error_evt_send(dl, E2BIG);
   2937a:	2107      	movs	r1, #7
				error_evt_send(dl, EHOSTDOWN);
   2937c:	6838      	ldr	r0, [r7, #0]
   2937e:	f00e fe65 	bl	3804c <error_evt_send.isra.0>
				break;
   29382:	e7eb      	b.n	2935c <download_thread+0x18>
		len = recv(dl->fd, dl->buf + dl->offset,
   29384:	46a9      	mov	r9, r5
   29386:	f859 0b04 	ldr.w	r0, [r9], #4
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2938a:	f04f 0a00 	mov.w	sl, #0
   2938e:	f5c1 6200 	rsb	r2, r1, #2048	; 0x800
   29392:	4653      	mov	r3, sl
   29394:	e9cd aa00 	strd	sl, sl, [sp]
   29398:	4449      	add	r1, r9
   2939a:	f00d face 	bl	3693a <z_impl_zsock_recvfrom>
		if ((len == 0) || (len == -1)) {
   2939e:	1e43      	subs	r3, r0, #1
   293a0:	3303      	adds	r3, #3
   293a2:	4680      	mov	r8, r0
   293a4:	d93d      	bls.n	29422 <download_thread+0xde>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   293a6:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   293aa:	b193      	cbz	r3, 293d2 <download_thread+0x8e>
   293ac:	f895 2828 	ldrb.w	r2, [r5, #2088]	; 0x828
   293b0:	b17a      	cbz	r2, 293d2 <download_thread+0x8e>
	const struct download_client_evt evt = {
   293b2:	e9cd 9304 	strd	r9, r3, [sp, #16]
   293b6:	f88d a00c 	strb.w	sl, [sp, #12]
	return client->callback(&evt);
   293ba:	683b      	ldr	r3, [r7, #0]
   293bc:	a803      	add	r0, sp, #12
   293be:	4798      	blx	r3
				if (rc) {
   293c0:	4604      	mov	r4, r0
   293c2:	b130      	cbz	r0, 293d2 <download_thread+0x8e>
					LOG_INF("Fragment refused, download stopped.");
   293c4:	01b1      	lsls	r1, r6, #6
   293c6:	f041 0103 	orr.w	r1, r1, #3
			LOG_INF("Fragment refused, download stopped.");
   293ca:	4856      	ldr	r0, [pc, #344]	; (29524 <download_thread+0x1e0>)
   293cc:	f00c fe28 	bl	36020 <log_0>
   293d0:	e7c4      	b.n	2935c <download_thread+0x18>
			if (len == -1) {
   293d2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   293d6:	d11d      	bne.n	29414 <download_thread+0xd0>
				if (errno == ETIMEDOUT) {
   293d8:	f00d fd29 	bl	36e2e <__errno>
   293dc:	6803      	ldr	r3, [r0, #0]
   293de:	2b74      	cmp	r3, #116	; 0x74
   293e0:	d07d      	beq.n	294de <download_thread+0x19a>
				LOG_ERR("Error in recv(), errno %d", errno);
   293e2:	f00d fd24 	bl	36e2e <__errno>
   293e6:	01b4      	lsls	r4, r6, #6
   293e8:	f044 0401 	orr.w	r4, r4, #1
   293ec:	6801      	ldr	r1, [r0, #0]
   293ee:	4622      	mov	r2, r4
   293f0:	484d      	ldr	r0, [pc, #308]	; (29528 <download_thread+0x1e4>)
   293f2:	f00c fe24 	bl	3603e <log_1>
			rc = error_evt_send(dl, ECONNRESET);
   293f6:	2168      	movs	r1, #104	; 0x68
   293f8:	6838      	ldr	r0, [r7, #0]
   293fa:	f00e fe27 	bl	3804c <error_evt_send.isra.0>
			if (rc) {
   293fe:	4604      	mov	r4, r0
   29400:	2800      	cmp	r0, #0
   29402:	d1ab      	bne.n	2935c <download_thread+0x18>
			rc = reconnect(dl);
   29404:	4628      	mov	r0, r5
   29406:	f7ff ff7d 	bl	29304 <reconnect>
			if (rc) {
   2940a:	4604      	mov	r4, r0
   2940c:	2800      	cmp	r0, #0
   2940e:	d066      	beq.n	294de <download_thread+0x19a>
				error_evt_send(dl, EHOSTDOWN);
   29410:	2175      	movs	r1, #117	; 0x75
   29412:	e7b3      	b.n	2937c <download_thread+0x38>
				LOG_WRN("Peer closed connection!");
   29414:	01b1      	lsls	r1, r6, #6
   29416:	4845      	ldr	r0, [pc, #276]	; (2952c <download_thread+0x1e8>)
   29418:	f041 0102 	orr.w	r1, r1, #2
   2941c:	f00c fe00 	bl	36020 <log_0>
   29420:	e7e9      	b.n	293f6 <download_thread+0xb2>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   29422:	f8d5 3824 	ldr.w	r3, [r5, #2084]	; 0x824
   29426:	2b06      	cmp	r3, #6
   29428:	d002      	beq.n	29430 <download_thread+0xec>
   2942a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2942e:	d105      	bne.n	2943c <download_thread+0xf8>
			rc = http_parse(client, len);
   29430:	4641      	mov	r1, r8
   29432:	4628      	mov	r0, r5
   29434:	f000 f9d4 	bl	297e0 <http_parse>
			if (rc > 0) {
   29438:	1e04      	subs	r4, r0, #0
   2943a:	dc93      	bgt.n	29364 <download_thread+0x20>
		if (rc < 0) {
   2943c:	f505 58c8 	add.w	r8, r5, #6400	; 0x1900
   29440:	2c00      	cmp	r4, #0
   29442:	f108 0808 	add.w	r8, r8, #8
   29446:	da03      	bge.n	29450 <download_thread+0x10c>
			error_evt_send(dl, EBADMSG);
   29448:	214d      	movs	r1, #77	; 0x4d
   2944a:	f8d8 0000 	ldr.w	r0, [r8]
   2944e:	e796      	b.n	2937e <download_thread+0x3a>
		if (dl->file_size) {
   29450:	f8d5 2808 	ldr.w	r2, [r5, #2056]	; 0x808
   29454:	f8d5 180c 	ldr.w	r1, [r5, #2060]	; 0x80c
   29458:	ea4f 1a86 	mov.w	sl, r6, lsl #6
   2945c:	b1da      	cbz	r2, 29496 <download_thread+0x152>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   2945e:	2364      	movs	r3, #100	; 0x64
   29460:	434b      	muls	r3, r1
   29462:	f04a 0003 	orr.w	r0, sl, #3
   29466:	f8ad 0000 	strh.w	r0, [sp]
   2946a:	fbb3 f3f2 	udiv	r3, r3, r2
   2946e:	4830      	ldr	r0, [pc, #192]	; (29530 <download_thread+0x1ec>)
   29470:	f00c fe15 	bl	3609e <log_3>
	const struct download_client_evt evt = {
   29474:	2300      	movs	r3, #0
   29476:	f88d 300c 	strb.w	r3, [sp, #12]
   2947a:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   2947e:	f8cd 9010 	str.w	r9, [sp, #16]
   29482:	9305      	str	r3, [sp, #20]
	return client->callback(&evt);
   29484:	a803      	add	r0, sp, #12
   29486:	f8d8 3000 	ldr.w	r3, [r8]
   2948a:	4798      	blx	r3
		if (rc) {
   2948c:	4604      	mov	r4, r0
   2948e:	b140      	cbz	r0, 294a2 <download_thread+0x15e>
			LOG_INF("Fragment refused, download stopped.");
   29490:	f04a 0103 	orr.w	r1, sl, #3
   29494:	e799      	b.n	293ca <download_thread+0x86>
			LOG_INF("Downloaded %u bytes", dl->progress);
   29496:	4827      	ldr	r0, [pc, #156]	; (29534 <download_thread+0x1f0>)
   29498:	f04a 0203 	orr.w	r2, sl, #3
   2949c:	f00c fdcf 	bl	3603e <log_1>
   294a0:	e7e8      	b.n	29474 <download_thread+0x130>
		if (dl->progress == dl->file_size) {
   294a2:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   294a6:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   294aa:	429a      	cmp	r2, r3
   294ac:	d10f      	bne.n	294ce <download_thread+0x18a>
			LOG_INF("Download complete");
   294ae:	4822      	ldr	r0, [pc, #136]	; (29538 <download_thread+0x1f4>)
   294b0:	f04a 0103 	orr.w	r1, sl, #3
   294b4:	f00c fdb4 	bl	36020 <log_0>
			const struct download_client_evt evt = {
   294b8:	2302      	movs	r3, #2
   294ba:	e9cd 4403 	strd	r4, r4, [sp, #12]
   294be:	9405      	str	r4, [sp, #20]
   294c0:	f88d 300c 	strb.w	r3, [sp, #12]
			dl->callback(&evt);
   294c4:	a803      	add	r0, sp, #12
   294c6:	f8d8 3000 	ldr.w	r3, [r8]
   294ca:	4798      	blx	r3
			break;
   294cc:	e746      	b.n	2935c <download_thread+0x18>
		if (dl->http.connection_close) {
   294ce:	f895 3829 	ldrb.w	r3, [r5, #2089]	; 0x829
   294d2:	b123      	cbz	r3, 294de <download_thread+0x19a>
			dl->http.connection_close = false;
   294d4:	f885 0829 	strb.w	r0, [r5, #2089]	; 0x829
			reconnect(dl);
   294d8:	4628      	mov	r0, r5
   294da:	f7ff ff13 	bl	29304 <reconnect>
		dl->offset = 0;
   294de:	f04f 0800 	mov.w	r8, #0
			rc = request_send(dl);
   294e2:	4628      	mov	r0, r5
		dl->offset = 0;
   294e4:	f8c5 8804 	str.w	r8, [r5, #2052]	; 0x804
			dl->http.has_header = false;
   294e8:	f885 8828 	strb.w	r8, [r5, #2088]	; 0x828
			rc = request_send(dl);
   294ec:	f00e fda3 	bl	38036 <request_send>
			if (rc) {
   294f0:	4604      	mov	r4, r0
   294f2:	2800      	cmp	r0, #0
   294f4:	f43f af36 	beq.w	29364 <download_thread+0x20>
				rc = error_evt_send(dl, ECONNRESET);
   294f8:	2168      	movs	r1, #104	; 0x68
   294fa:	6838      	ldr	r0, [r7, #0]
   294fc:	f00e fda6 	bl	3804c <error_evt_send.isra.0>
				if (rc) {
   29500:	4604      	mov	r4, r0
   29502:	2800      	cmp	r0, #0
   29504:	f47f af2a 	bne.w	2935c <download_thread+0x18>
				rc = reconnect(dl);
   29508:	4628      	mov	r0, r5
   2950a:	f7ff fefb 	bl	29304 <reconnect>
				if (rc) {
   2950e:	4604      	mov	r4, r0
   29510:	2800      	cmp	r0, #0
   29512:	d0e6      	beq.n	294e2 <download_thread+0x19e>
   29514:	e77c      	b.n	29410 <download_thread+0xcc>
   29516:	bf00      	nop
   29518:	00039aa0 	.word	0x00039aa0
   2951c:	00039a50 	.word	0x00039a50
   29520:	0003c863 	.word	0x0003c863
   29524:	0003c890 	.word	0x0003c890
   29528:	0003c8b4 	.word	0x0003c8b4
   2952c:	0003c8ce 	.word	0x0003c8ce
   29530:	0003c8e6 	.word	0x0003c8e6
   29534:	0003c904 	.word	0x0003c904
   29538:	0003c918 	.word	0x0003c918

0002953c <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   2953c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL) {
   2953e:	4604      	mov	r4, r0
   29540:	b348      	cbz	r0, 29596 <download_client_start+0x5a>
		return -EINVAL;
	}

	if (client->fd < 0) {
   29542:	6803      	ldr	r3, [r0, #0]
   29544:	2b00      	cmp	r3, #0
   29546:	db29      	blt.n	2959c <download_client_start+0x60>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   29548:	2300      	movs	r3, #0
	client->file = file;
   2954a:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
	client->file_size = 0;
   2954e:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
	client->progress = from;
   29552:	f8c0 280c 	str.w	r2, [r0, #2060]	; 0x80c

	client->offset = 0;
   29556:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
	client->http.has_header = false;
   2955a:	f880 3828 	strb.w	r3, [r0, #2088]	; 0x828
		if (err) {
			return err;
		}
	}

	err = request_send(client);
   2955e:	f00e fd6a 	bl	38036 <request_send>
	if (err) {
   29562:	4606      	mov	r6, r0
   29564:	b9a8      	cbnz	r0, 29592 <download_client_start+0x56>
   29566:	4b0f      	ldr	r3, [pc, #60]	; (295a4 <download_client_start+0x68>)
   29568:	4d0f      	ldr	r5, [pc, #60]	; (295a8 <download_client_start+0x6c>)
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   2956a:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   2956e:	1aed      	subs	r5, r5, r3
   29570:	f7fa f934 	bl	237dc <log_strdup>
   29574:	08ed      	lsrs	r5, r5, #3
   29576:	01ad      	lsls	r5, r5, #6
   29578:	f045 0503 	orr.w	r5, r5, #3
   2957c:	4601      	mov	r1, r0
   2957e:	462b      	mov	r3, r5
   29580:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   29584:	4809      	ldr	r0, [pc, #36]	; (295ac <download_client_start+0x70>)
   29586:	f00c fd71 	bl	3606c <log_2>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   2958a:	f8d4 0838 	ldr.w	r0, [r4, #2104]	; 0x838
	z_impl_k_thread_resume(thread);
   2958e:	f00a f9f1 	bl	33974 <z_impl_k_thread_resume>

	return 0;
}
   29592:	4630      	mov	r0, r6
   29594:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   29596:	f06f 0615 	mvn.w	r6, #21
   2959a:	e7fa      	b.n	29592 <download_client_start+0x56>
		return -ENOTCONN;
   2959c:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   295a0:	e7f7      	b.n	29592 <download_client_start+0x56>
   295a2:	bf00      	nop
   295a4:	00039a50 	.word	0x00039a50
   295a8:	00039aa0 	.word	0x00039aa0
   295ac:	0003c92a 	.word	0x0003c92a

000295b0 <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   295b0:	b570      	push	{r4, r5, r6, lr}
   295b2:	460d      	mov	r5, r1
   295b4:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   295b6:	4915      	ldr	r1, [pc, #84]	; (2960c <url_parse_proto+0x5c>)
   295b8:	2205      	movs	r2, #5
{
   295ba:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   295bc:	f00f fc26 	bl	38e0c <strncmp>
   295c0:	b928      	cbnz	r0, 295ce <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   295c2:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   295c6:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   295c8:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   295ca:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   295cc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   295ce:	2204      	movs	r2, #4
   295d0:	4630      	mov	r0, r6
   295d2:	490f      	ldr	r1, [pc, #60]	; (29610 <url_parse_proto+0x60>)
   295d4:	f00f fc1a 	bl	38e0c <strncmp>
   295d8:	b908      	cbnz	r0, 295de <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   295da:	2306      	movs	r3, #6
   295dc:	e7f3      	b.n	295c6 <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   295de:	2205      	movs	r2, #5
   295e0:	4630      	mov	r0, r6
   295e2:	490c      	ldr	r1, [pc, #48]	; (29614 <url_parse_proto+0x64>)
   295e4:	f00f fc12 	bl	38e0c <strncmp>
   295e8:	b920      	cbnz	r0, 295f4 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   295ea:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   295ee:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   295f0:	2302      	movs	r3, #2
   295f2:	e7ea      	b.n	295ca <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   295f4:	2204      	movs	r2, #4
   295f6:	4630      	mov	r0, r6
   295f8:	4907      	ldr	r1, [pc, #28]	; (29618 <url_parse_proto+0x68>)
   295fa:	f00f fc07 	bl	38e0c <strncmp>
   295fe:	b908      	cbnz	r0, 29604 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   29600:	2311      	movs	r3, #17
   29602:	e7f4      	b.n	295ee <url_parse_proto+0x3e>
		return -EINVAL;
   29604:	f06f 0015 	mvn.w	r0, #21
   29608:	e7e0      	b.n	295cc <url_parse_proto+0x1c>
   2960a:	bf00      	nop
   2960c:	0003b70b 	.word	0x0003b70b
   29610:	0003b732 	.word	0x0003b732
   29614:	0003c94f 	.word	0x0003c94f
   29618:	0003c955 	.word	0x0003c955

0002961c <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   2961c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2961e:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   29620:	9001      	str	r0, [sp, #4]
{
   29622:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   29624:	a801      	add	r0, sp, #4
   29626:	4911      	ldr	r1, [pc, #68]	; (2966c <url_parse_host+0x50>)
{
   29628:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   2962a:	f00e fd48 	bl	380be <swallow>

	end = strchr(cur, ':');
   2962e:	213a      	movs	r1, #58	; 0x3a
   29630:	9801      	ldr	r0, [sp, #4]
   29632:	f00f fbd6 	bl	38de2 <strchr>
	if (!end) {
   29636:	b948      	cbnz	r0, 2964c <url_parse_host+0x30>
		end = strchr(cur, '/');
   29638:	212f      	movs	r1, #47	; 0x2f
   2963a:	9801      	ldr	r0, [sp, #4]
   2963c:	f00f fbd1 	bl	38de2 <strchr>
		if (!end) {
   29640:	b920      	cbnz	r0, 2964c <url_parse_host+0x30>
			end = url + strlen(url) + 1;
   29642:	4620      	mov	r0, r4
   29644:	f7f3 fd14 	bl	1d070 <strlen>
   29648:	1c43      	adds	r3, r0, #1
   2964a:	18e0      	adds	r0, r4, r3
		}
	}

	if (end - cur + 1 > len) {
   2964c:	9901      	ldr	r1, [sp, #4]
   2964e:	1a44      	subs	r4, r0, r1
   29650:	1c63      	adds	r3, r4, #1
   29652:	42b3      	cmp	r3, r6
   29654:	d807      	bhi.n	29666 <url_parse_host+0x4a>
   29656:	4622      	mov	r2, r4
   29658:	4628      	mov	r0, r5
   2965a:	f00f fa70 	bl	38b3e <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   2965e:	2000      	movs	r0, #0
   29660:	5528      	strb	r0, [r5, r4]

	return 0;
}
   29662:	b002      	add	sp, #8
   29664:	bd70      	pop	{r4, r5, r6, pc}
		return -E2BIG;
   29666:	f06f 0006 	mvn.w	r0, #6
   2966a:	e7fa      	b.n	29662 <url_parse_host+0x46>
   2966c:	0003c95a 	.word	0x0003c95a

00029670 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   29670:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   29672:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   29674:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   29676:	4917      	ldr	r1, [pc, #92]	; (296d4 <url_parse_port+0x64>)
   29678:	a801      	add	r0, sp, #4
   2967a:	f00e fd20 	bl	380be <swallow>

	err = swallow(&cur, ":");
   2967e:	4916      	ldr	r1, [pc, #88]	; (296d8 <url_parse_port+0x68>)
   29680:	a801      	add	r0, sp, #4
   29682:	f00e fd1c 	bl	380be <swallow>
	if (err) {
   29686:	4605      	mov	r5, r0
   29688:	bb08      	cbnz	r0, 296ce <url_parse_port+0x5e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   2968a:	212f      	movs	r1, #47	; 0x2f
   2968c:	9801      	ldr	r0, [sp, #4]
   2968e:	f00f fba8 	bl	38de2 <strchr>
	if (!end) {
   29692:	4604      	mov	r4, r0
		len = strlen(cur);
   29694:	9801      	ldr	r0, [sp, #4]
	if (!end) {
   29696:	b9c4      	cbnz	r4, 296ca <url_parse_port+0x5a>
		len = strlen(cur);
   29698:	f7f3 fcea 	bl	1d070 <strlen>
   2969c:	4604      	mov	r4, r0
	} else {
		len = end - cur;
	}

	len = MAX(len, sizeof(aport) - 1);
   2969e:	2c07      	cmp	r4, #7
   296a0:	bf38      	it	cc
   296a2:	2407      	movcc	r4, #7

	memcpy(aport, cur, len);
   296a4:	2308      	movs	r3, #8
   296a6:	4622      	mov	r2, r4
   296a8:	9901      	ldr	r1, [sp, #4]
   296aa:	eb0d 0003 	add.w	r0, sp, r3
   296ae:	f00f fa53 	bl	38b58 <__memcpy_chk>
	aport[len] = '\0';
   296b2:	ab04      	add	r3, sp, #16
   296b4:	441c      	add	r4, r3
   296b6:	2300      	movs	r3, #0

	*port = atoi(aport);
   296b8:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   296ba:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   296be:	f00f fa1e 	bl	38afe <atoi>
   296c2:	8030      	strh	r0, [r6, #0]

	return 0;
}
   296c4:	4628      	mov	r0, r5
   296c6:	b004      	add	sp, #16
   296c8:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   296ca:	1a24      	subs	r4, r4, r0
   296cc:	e7e7      	b.n	2969e <url_parse_port+0x2e>
		return -EINVAL;
   296ce:	f06f 0515 	mvn.w	r5, #21
   296d2:	e7f7      	b.n	296c4 <url_parse_port+0x54>
   296d4:	0003c95a 	.word	0x0003c95a
   296d8:	0003c2c5 	.word	0x0003c2c5

000296dc <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   296dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   296de:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   296e0:	4915      	ldr	r1, [pc, #84]	; (29738 <url_parse_file+0x5c>)
{
   296e2:	4614      	mov	r4, r2
	cur = url;
   296e4:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   296e6:	f00f fbdd 	bl	38ea4 <strstr>
   296ea:	b940      	cbnz	r0, 296fe <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   296ec:	9801      	ldr	r0, [sp, #4]
   296ee:	f7f3 fcbf 	bl	1d070 <strlen>
   296f2:	3001      	adds	r0, #1
   296f4:	42a0      	cmp	r0, r4
   296f6:	d912      	bls.n	2971e <url_parse_file+0x42>
		return -E2BIG;
   296f8:	f06f 0006 	mvn.w	r0, #6
   296fc:	e006      	b.n	2970c <url_parse_file+0x30>
		err = swallow(&cur, "://");
   296fe:	490f      	ldr	r1, [pc, #60]	; (2973c <url_parse_file+0x60>)
   29700:	a801      	add	r0, sp, #4
   29702:	f00e fcdc 	bl	380be <swallow>
		if (err) {
   29706:	b118      	cbz	r0, 29710 <url_parse_file+0x34>
			return -EINVAL;
   29708:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   2970c:	b003      	add	sp, #12
   2970e:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   29710:	490b      	ldr	r1, [pc, #44]	; (29740 <url_parse_file+0x64>)
   29712:	a801      	add	r0, sp, #4
   29714:	f00e fcd3 	bl	380be <swallow>
		if (err) {
   29718:	2800      	cmp	r0, #0
   2971a:	d0e7      	beq.n	296ec <url_parse_file+0x10>
   2971c:	e7f4      	b.n	29708 <url_parse_file+0x2c>
	len = strlen(cur);
   2971e:	9801      	ldr	r0, [sp, #4]
   29720:	f7f3 fca6 	bl	1d070 <strlen>
   29724:	9901      	ldr	r1, [sp, #4]
   29726:	4604      	mov	r4, r0
   29728:	4602      	mov	r2, r0
   2972a:	4628      	mov	r0, r5
   2972c:	f00f fa07 	bl	38b3e <memcpy>
	file[len] = '\0';
   29730:	2300      	movs	r3, #0
	return 0;
   29732:	4618      	mov	r0, r3
	file[len] = '\0';
   29734:	552b      	strb	r3, [r5, r4]
	return 0;
   29736:	e7e9      	b.n	2970c <url_parse_file+0x30>
   29738:	0003c95b 	.word	0x0003c95b
   2973c:	0003c95a 	.word	0x0003c95a
   29740:	0003c95c 	.word	0x0003c95c

00029744 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len);

int http_get_request_send(struct download_client *client)
{
   29744:	b570      	push	{r4, r5, r6, lr}
   29746:	b0c4      	sub	sp, #272	; 0x110
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
	__ASSERT_NO_MSG(client->file);

	err = url_parse_host(client->host, host, sizeof(host));
   29748:	ae04      	add	r6, sp, #16
{
   2974a:	4605      	mov	r5, r0
	err = url_parse_host(client->host, host, sizeof(host));
   2974c:	2240      	movs	r2, #64	; 0x40
   2974e:	4631      	mov	r1, r6
   29750:	f8d0 0810 	ldr.w	r0, [r0, #2064]	; 0x810
   29754:	f7ff ff62 	bl	2961c <url_parse_host>
	if (err) {
   29758:	4604      	mov	r4, r0
   2975a:	bb90      	cbnz	r0, 297c2 <http_get_request_send+0x7e>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   2975c:	22c0      	movs	r2, #192	; 0xc0
   2975e:	f8d5 0814 	ldr.w	r0, [r5, #2068]	; 0x814
   29762:	a914      	add	r1, sp, #80	; 0x50
   29764:	f7ff ffba 	bl	296dc <url_parse_file>
	if (err) {
   29768:	4604      	mov	r4, r0
   2976a:	bb50      	cbnz	r0, 297c2 <http_get_request_send+0x7e>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   2976c:	f8d5 3820 	ldr.w	r3, [r5, #2080]	; 0x820
   29770:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   29774:	b343      	cbz	r3, 297c8 <http_get_request_send+0x84>
		off = client->progress + client->config.frag_size_override - 1;
   29776:	4413      	add	r3, r2
   29778:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   2977a:	f8d5 1808 	ldr.w	r1, [r5, #2056]	; 0x808
   2977e:	b111      	cbz	r1, 29786 <http_get_request_send+0x42>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size);
   29780:	428b      	cmp	r3, r1
   29782:	bf28      	it	cs
   29784:	460b      	movcs	r3, r1
	 * When using HTTP, we request the whole resource to minimize
	 * network usage (only one request/response are sent).
	 */
	if (client->proto == IPPROTO_TLS_1_2
	   || IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS)) {
		len = snprintf(client->buf,
   29786:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2978a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   2978e:	4a10      	ldr	r2, [pc, #64]	; (297d0 <http_get_request_send+0x8c>)
   29790:	ab14      	add	r3, sp, #80	; 0x50
   29792:	9600      	str	r6, [sp, #0]
   29794:	1d28      	adds	r0, r5, #4
   29796:	f00b fb19 	bl	34dcc <sniprintf>
   2979a:	4601      	mov	r1, r0

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len);
   2979c:	4628      	mov	r0, r5
   2979e:	f00e fc64 	bl	3806a <socket_send>
	if (err) {
   297a2:	4604      	mov	r4, r0
   297a4:	b168      	cbz	r0, 297c2 <http_get_request_send+0x7e>
   297a6:	4a0b      	ldr	r2, [pc, #44]	; (297d4 <http_get_request_send+0x90>)
   297a8:	4d0b      	ldr	r5, [pc, #44]	; (297d8 <http_get_request_send+0x94>)
   297aa:	1aad      	subs	r5, r5, r2
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   297ac:	f00d fb3f 	bl	36e2e <__errno>
   297b0:	08ed      	lsrs	r5, r5, #3
   297b2:	01ad      	lsls	r5, r5, #6
   297b4:	f045 0501 	orr.w	r5, r5, #1
   297b8:	6801      	ldr	r1, [r0, #0]
   297ba:	462a      	mov	r2, r5
   297bc:	4807      	ldr	r0, [pc, #28]	; (297dc <http_get_request_send+0x98>)
   297be:	f00c fc3e 	bl	3603e <log_1>
		return err;
	}

	return 0;
}
   297c2:	4620      	mov	r0, r4
   297c4:	b044      	add	sp, #272	; 0x110
   297c6:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   297c8:	f202 73ff 	addw	r3, r2, #2047	; 0x7ff
   297cc:	e7d5      	b.n	2977a <http_get_request_send+0x36>
   297ce:	bf00      	nop
   297d0:	0003c95e 	.word	0x0003c95e
   297d4:	00039a50 	.word	0x00039a50
   297d8:	00039aa0 	.word	0x00039aa0
   297dc:	0003c9a9 	.word	0x0003c9a9

000297e0 <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   297e0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   297e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	client->offset += len;
   297e8:	440b      	add	r3, r1
   297ea:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

	if (!client->http.has_header) {
   297ee:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
{
   297f2:	4604      	mov	r4, r0
   297f4:	460f      	mov	r7, r1
	if (!client->http.has_header) {
   297f6:	2b00      	cmp	r3, #0
   297f8:	d17d      	bne.n	298f6 <http_parse+0x116>
	p = strstr(client->buf, "\r\n\r\n");
   297fa:	1d06      	adds	r6, r0, #4
   297fc:	4630      	mov	r0, r6
   297fe:	494d      	ldr	r1, [pc, #308]	; (29934 <http_parse+0x154>)
   29800:	f00f fb50 	bl	38ea4 <strstr>
	if (!p) {
   29804:	4605      	mov	r5, r0
   29806:	2800      	cmp	r0, #0
   29808:	f000 8090 	beq.w	2992c <http_parse+0x14c>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   2980c:	4849      	ldr	r0, [pc, #292]	; (29934 <http_parse+0x154>)
   2980e:	f7f3 fc2f 	bl	1d070 <strlen>
   29812:	4405      	add	r5, r0
   29814:	4633      	mov	r3, r6
   29816:	4628      	mov	r0, r5
		client->buf[i] = tolower(client->buf[i]);
   29818:	f8df c144 	ldr.w	ip, [pc, #324]	; 29960 <http_parse+0x180>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   2981c:	eba5 0806 	sub.w	r8, r5, r6
	for (size_t i = 0; i < *hdr_len; i++) {
   29820:	4298      	cmp	r0, r3
   29822:	d112      	bne.n	2984a <http_parse+0x6a>
	p = strstr(client->buf, "http/1.1 206");
   29824:	4630      	mov	r0, r6
   29826:	4944      	ldr	r1, [pc, #272]	; (29938 <http_parse+0x158>)
   29828:	f00f fb3c 	bl	38ea4 <strstr>
	if (!p) {
   2982c:	b9c0      	cbnz	r0, 29860 <http_parse+0x80>
   2982e:	4943      	ldr	r1, [pc, #268]	; (2993c <http_parse+0x15c>)
   29830:	4b43      	ldr	r3, [pc, #268]	; (29940 <http_parse+0x160>)
			LOG_ERR("Server did not honor partial content request");
   29832:	4844      	ldr	r0, [pc, #272]	; (29944 <http_parse+0x164>)
   29834:	1ac9      	subs	r1, r1, r3
   29836:	08c9      	lsrs	r1, r1, #3
   29838:	0189      	lsls	r1, r1, #6
   2983a:	f041 0101 	orr.w	r1, r1, #1
				LOG_ERR("Server did not send "
   2983e:	f00c fbef 	bl	36020 <log_0>
			/* Wait for header */
			return 1;
		}
		if (rc < 0) {
			/* Something is wrong with the header */
			return -1;
   29842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
}
   29846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		client->buf[i] = tolower(client->buf[i]);
   2984a:	781a      	ldrb	r2, [r3, #0]
   2984c:	f812 100c 	ldrb.w	r1, [r2, ip]
   29850:	f001 0103 	and.w	r1, r1, #3
   29854:	2901      	cmp	r1, #1
   29856:	bf08      	it	eq
   29858:	3220      	addeq	r2, #32
   2985a:	f803 2b01 	strb.w	r2, [r3], #1
	for (size_t i = 0; i < *hdr_len; i++) {
   2985e:	e7df      	b.n	29820 <http_parse+0x40>
	if (client->file_size == 0) {
   29860:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   29864:	bb13      	cbnz	r3, 298ac <http_parse+0xcc>
			p = strstr(client->buf, "content-range");
   29866:	4630      	mov	r0, r6
   29868:	4937      	ldr	r1, [pc, #220]	; (29948 <http_parse+0x168>)
   2986a:	f00f fb1b 	bl	38ea4 <strstr>
			if (!p) {
   2986e:	b940      	cbnz	r0, 29882 <http_parse+0xa2>
   29870:	4932      	ldr	r1, [pc, #200]	; (2993c <http_parse+0x15c>)
   29872:	4b33      	ldr	r3, [pc, #204]	; (29940 <http_parse+0x160>)
				LOG_ERR("Server did not send "
   29874:	4835      	ldr	r0, [pc, #212]	; (2994c <http_parse+0x16c>)
   29876:	1ac9      	subs	r1, r1, r3
   29878:	08c9      	lsrs	r1, r1, #3
   2987a:	0189      	lsls	r1, r1, #6
   2987c:	f041 0101 	orr.w	r1, r1, #1
   29880:	e7dd      	b.n	2983e <http_parse+0x5e>
			p = strstr(p, "/");
   29882:	4933      	ldr	r1, [pc, #204]	; (29950 <http_parse+0x170>)
   29884:	f00f fb0e 	bl	38ea4 <strstr>
			if (!p) {
   29888:	b940      	cbnz	r0, 2989c <http_parse+0xbc>
   2988a:	492c      	ldr	r1, [pc, #176]	; (2993c <http_parse+0x15c>)
   2988c:	4b2c      	ldr	r3, [pc, #176]	; (29940 <http_parse+0x160>)
				LOG_ERR("No file size in response");
   2988e:	4831      	ldr	r0, [pc, #196]	; (29954 <http_parse+0x174>)
   29890:	1ac9      	subs	r1, r1, r3
   29892:	08c9      	lsrs	r1, r1, #3
   29894:	0189      	lsls	r1, r1, #6
   29896:	f041 0101 	orr.w	r1, r1, #1
   2989a:	e7d0      	b.n	2983e <http_parse+0x5e>
		client->file_size += atoi(p + 1);
   2989c:	3001      	adds	r0, #1
   2989e:	f00f f92e 	bl	38afe <atoi>
   298a2:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   298a6:	4418      	add	r0, r3
   298a8:	f8c4 0808 	str.w	r0, [r4, #2056]	; 0x808
	p = strstr(client->buf, "connection: close");
   298ac:	4630      	mov	r0, r6
   298ae:	492a      	ldr	r1, [pc, #168]	; (29958 <http_parse+0x178>)
   298b0:	f00f faf8 	bl	38ea4 <strstr>
	if (p) {
   298b4:	b160      	cbz	r0, 298d0 <http_parse+0xf0>
   298b6:	4922      	ldr	r1, [pc, #136]	; (29940 <http_parse+0x160>)
   298b8:	4b20      	ldr	r3, [pc, #128]	; (2993c <http_parse+0x15c>)
		LOG_WRN("Peer closed connection, will re-connect");
   298ba:	4828      	ldr	r0, [pc, #160]	; (2995c <http_parse+0x17c>)
   298bc:	1a5b      	subs	r3, r3, r1
   298be:	08db      	lsrs	r3, r3, #3
   298c0:	019b      	lsls	r3, r3, #6
   298c2:	f043 0102 	orr.w	r1, r3, #2
   298c6:	f00c fbab 	bl	36020 <log_0>
		client->http.connection_close = true;
   298ca:	2301      	movs	r3, #1
   298cc:	f884 3829 	strb.w	r3, [r4, #2089]	; 0x829
	client->http.has_header = true;
   298d0:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   298d2:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
	client->http.has_header = true;
   298d6:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
		if (client->offset != hdr_len) {
   298da:	4542      	cmp	r2, r8
   298dc:	d024      	beq.n	29928 <http_parse+0x148>
   298de:	4629      	mov	r1, r5
   298e0:	4630      	mov	r0, r6
   298e2:	eba2 0208 	sub.w	r2, r2, r8
   298e6:	f00f f92a 	bl	38b3e <memcpy>
			client->offset -= hdr_len;
   298ea:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   298ee:	eba3 0308 	sub.w	r3, r3, r8
			client->offset = 0;
   298f2:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
	client->progress += MIN(client->offset, len);
   298f6:	f8d4 180c 	ldr.w	r1, [r4, #2060]	; 0x80c
   298fa:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
	if (client->progress != client->file_size &&
   298fe:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
	client->progress += MIN(client->offset, len);
   29902:	429f      	cmp	r7, r3
   29904:	bf94      	ite	ls
   29906:	19cf      	addls	r7, r1, r7
   29908:	18cf      	addhi	r7, r1, r3
	if (client->progress != client->file_size &&
   2990a:	4297      	cmp	r7, r2
	client->progress += MIN(client->offset, len);
   2990c:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
	if (client->progress != client->file_size &&
   29910:	d00e      	beq.n	29930 <http_parse+0x150>
	    client->offset < (client->config.frag_size_override != 0 ?
   29912:	f8d4 0820 	ldr.w	r0, [r4, #2080]	; 0x820
			      client->config.frag_size_override :
   29916:	2800      	cmp	r0, #0
   29918:	bf08      	it	eq
   2991a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
	if (client->progress != client->file_size &&
   2991e:	4298      	cmp	r0, r3
   29920:	bf94      	ite	ls
   29922:	2000      	movls	r0, #0
   29924:	2001      	movhi	r0, #1
   29926:	e78e      	b.n	29846 <http_parse+0x66>
			client->offset = 0;
   29928:	2300      	movs	r3, #0
   2992a:	e7e2      	b.n	298f2 <http_parse+0x112>
			return 1;
   2992c:	2001      	movs	r0, #1
   2992e:	e78a      	b.n	29846 <http_parse+0x66>
	return 0;
   29930:	2000      	movs	r0, #0
   29932:	e788      	b.n	29846 <http_parse+0x66>
   29934:	0003c9a4 	.word	0x0003c9a4
   29938:	0003c9cf 	.word	0x0003c9cf
   2993c:	00039aa0 	.word	0x00039aa0
   29940:	00039a50 	.word	0x00039a50
   29944:	0003c9dc 	.word	0x0003c9dc
   29948:	0003ca09 	.word	0x0003ca09
   2994c:	0003ca17 	.word	0x0003ca17
   29950:	0003c95c 	.word	0x0003c95c
   29954:	0003ca47 	.word	0x0003ca47
   29958:	0003ca60 	.word	0x0003ca60
   2995c:	0003ca72 	.word	0x0003ca72
   29960:	0003d1dc 	.word	0x0003d1dc

00029964 <send_evt>:

static void send_evt(enum fota_download_evt_id id)
{
	__ASSERT(id != FOTA_DOWNLOAD_EVT_PROGRESS, "use send_progress");
	__ASSERT(id != FOTA_DOWNLOAD_EVT_ERROR, "use send_error_evt");
	const struct fota_download_evt evt = {
   29964:	2300      	movs	r3, #0
{
   29966:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   29968:	e9cd 3300 	strd	r3, r3, [sp]
		.id = id
	};
	callback(&evt);
   2996c:	4b04      	ldr	r3, [pc, #16]	; (29980 <send_evt+0x1c>)
	const struct fota_download_evt evt = {
   2996e:	f88d 0000 	strb.w	r0, [sp]
	callback(&evt);
   29972:	681b      	ldr	r3, [r3, #0]
   29974:	4668      	mov	r0, sp
   29976:	4798      	blx	r3
}
   29978:	b003      	add	sp, #12
   2997a:	f85d fb04 	ldr.w	pc, [sp], #4
   2997e:	bf00      	nop
   29980:	200236b8 	.word	0x200236b8

00029984 <send_error_evt>:

static void send_error_evt(enum fota_download_error_cause cause)
{
	__ASSERT(cause != FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR, "use a valid error cause");
	const struct fota_download_evt evt = {
   29984:	2300      	movs	r3, #0
{
   29986:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   29988:	e9cd 3300 	strd	r3, r3, [sp]
   2998c:	2304      	movs	r3, #4
   2998e:	f88d 3000 	strb.w	r3, [sp]
		.id = FOTA_DOWNLOAD_EVT_ERROR,
		.cause = cause
	};
	callback(&evt);
   29992:	4b04      	ldr	r3, [pc, #16]	; (299a4 <send_error_evt+0x20>)
	const struct fota_download_evt evt = {
   29994:	f88d 0004 	strb.w	r0, [sp, #4]
	callback(&evt);
   29998:	681b      	ldr	r3, [r3, #0]
   2999a:	4668      	mov	r0, sp
   2999c:	4798      	blx	r3
}
   2999e:	b003      	add	sp, #12
   299a0:	f85d fb04 	ldr.w	pc, [sp], #4
   299a4:	200236b8 	.word	0x200236b8

000299a8 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   299a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   299aa:	a801      	add	r0, sp, #4
   299ac:	f000 fa02 	bl	29db4 <dfu_target_offset_get>
	if (err != 0) {
   299b0:	4c18      	ldr	r4, [pc, #96]	; (29a14 <download_with_offset+0x6c>)
   299b2:	4b19      	ldr	r3, [pc, #100]	; (29a18 <download_with_offset+0x70>)
   299b4:	4602      	mov	r2, r0
   299b6:	1ae4      	subs	r4, r4, r3
   299b8:	08e4      	lsrs	r4, r4, #3
   299ba:	01a4      	lsls	r4, r4, #6
   299bc:	b138      	cbz	r0, 299ce <download_with_offset+0x26>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   299be:	4917      	ldr	r1, [pc, #92]	; (29a1c <download_with_offset+0x74>)
   299c0:	4817      	ldr	r0, [pc, #92]	; (29a20 <download_with_offset+0x78>)
   299c2:	f044 0301 	orr.w	r3, r4, #1
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   299c6:	f00c fb51 	bl	3606c <log_2>
			err);
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	return;
}
   299ca:	b003      	add	sp, #12
   299cc:	bd30      	pop	{r4, r5, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   299ce:	4d15      	ldr	r5, [pc, #84]	; (29a24 <download_with_offset+0x7c>)
   299d0:	f605 0218 	addw	r2, r5, #2072	; 0x818
   299d4:	4628      	mov	r0, r5
   299d6:	f8d5 1810 	ldr.w	r1, [r5, #2064]	; 0x810
   299da:	f7ff fa87 	bl	28eec <download_client_connect>
	if (err != 0) {
   299de:	4602      	mov	r2, r0
   299e0:	b120      	cbz	r0, 299ec <download_with_offset+0x44>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   299e2:	490e      	ldr	r1, [pc, #56]	; (29a1c <download_with_offset+0x74>)
   299e4:	4810      	ldr	r0, [pc, #64]	; (29a28 <download_with_offset+0x80>)
   299e6:	f044 0301 	orr.w	r3, r4, #1
   299ea:	e7ec      	b.n	299c6 <download_with_offset+0x1e>
	err = download_client_start(&dlc, dlc.file, offset);
   299ec:	9a01      	ldr	r2, [sp, #4]
   299ee:	4628      	mov	r0, r5
   299f0:	f8d5 1814 	ldr.w	r1, [r5, #2068]	; 0x814
   299f4:	f7ff fda2 	bl	2953c <download_client_start>
	if (err != 0) {
   299f8:	4602      	mov	r2, r0
   299fa:	b120      	cbz	r0, 29a06 <download_with_offset+0x5e>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   299fc:	4907      	ldr	r1, [pc, #28]	; (29a1c <download_with_offset+0x74>)
   299fe:	480b      	ldr	r0, [pc, #44]	; (29a2c <download_with_offset+0x84>)
   29a00:	f044 0301 	orr.w	r3, r4, #1
   29a04:	e7df      	b.n	299c6 <download_with_offset+0x1e>
	LOG_INF("Downloading from offset: 0x%x", offset);
   29a06:	9901      	ldr	r1, [sp, #4]
   29a08:	4809      	ldr	r0, [pc, #36]	; (29a30 <download_with_offset+0x88>)
   29a0a:	f044 0203 	orr.w	r2, r4, #3
   29a0e:	f00c fb16 	bl	3603e <log_1>
   29a12:	e7da      	b.n	299ca <download_with_offset+0x22>
   29a14:	00039ac0 	.word	0x00039ac0
   29a18:	00039a50 	.word	0x00039a50
   29a1c:	0003cc5f 	.word	0x0003cc5f
   29a20:	0003ca9a 	.word	0x0003ca9a
   29a24:	20021750 	.word	0x20021750
   29a28:	0003cac0 	.word	0x0003cac0
   29a2c:	0003cae3 	.word	0x0003cae3
   29a30:	0003cb0e 	.word	0x0003cb0e

00029a34 <download_client_callback>:
{
   29a34:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (event == NULL) {
   29a36:	4605      	mov	r5, r0
{
   29a38:	b085      	sub	sp, #20
	if (event == NULL) {
   29a3a:	2800      	cmp	r0, #0
   29a3c:	f000 80f1 	beq.w	29c22 <download_client_callback+0x1ee>
	switch (event->id) {
   29a40:	7803      	ldrb	r3, [r0, #0]
   29a42:	2b01      	cmp	r3, #1
   29a44:	f000 80b7 	beq.w	29bb6 <download_client_callback+0x182>
   29a48:	2b02      	cmp	r3, #2
   29a4a:	f000 8096 	beq.w	29b7a <download_client_callback+0x146>
   29a4e:	2b00      	cmp	r3, #0
   29a50:	f040 80c7 	bne.w	29be2 <download_client_callback+0x1ae>
		if (first_fragment) {
   29a54:	4e74      	ldr	r6, [pc, #464]	; (29c28 <download_client_callback+0x1f4>)
   29a56:	7833      	ldrb	r3, [r6, #0]
   29a58:	2b00      	cmp	r3, #0
   29a5a:	d051      	beq.n	29b00 <download_client_callback+0xcc>
			err = download_client_file_size_get(&dlc, &file_size);
   29a5c:	4f73      	ldr	r7, [pc, #460]	; (29c2c <download_client_callback+0x1f8>)
   29a5e:	4874      	ldr	r0, [pc, #464]	; (29c30 <download_client_callback+0x1fc>)
   29a60:	4639      	mov	r1, r7
   29a62:	f00e fb22 	bl	380aa <download_client_file_size_get>
			if (err != 0) {
   29a66:	4604      	mov	r4, r0
   29a68:	b108      	cbz	r0, 29a6e <download_client_callback+0x3a>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   29a6a:	2001      	movs	r0, #1
   29a6c:	e068      	b.n	29b40 <download_client_callback+0x10c>
			first_fragment = false;
   29a6e:	7030      	strb	r0, [r6, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   29a70:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   29a74:	f000 f946 	bl	29d04 <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size,
   29a78:	4a6e      	ldr	r2, [pc, #440]	; (29c34 <download_client_callback+0x200>)
   29a7a:	6839      	ldr	r1, [r7, #0]
   29a7c:	f000 f968 	bl	29d50 <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   29a80:	1e04      	subs	r4, r0, #0
   29a82:	da1d      	bge.n	29ac0 <download_client_callback+0x8c>
   29a84:	f114 0f10 	cmn.w	r4, #16
   29a88:	d01a      	beq.n	29ac0 <download_client_callback+0x8c>
   29a8a:	4b6b      	ldr	r3, [pc, #428]	; (29c38 <download_client_callback+0x204>)
   29a8c:	4d6b      	ldr	r5, [pc, #428]	; (29c3c <download_client_callback+0x208>)
				LOG_ERR("dfu_target_init error %d", err);
   29a8e:	4621      	mov	r1, r4
   29a90:	1aed      	subs	r5, r5, r3
   29a92:	08ed      	lsrs	r5, r5, #3
   29a94:	01ad      	lsls	r5, r5, #6
   29a96:	f045 0501 	orr.w	r5, r5, #1
   29a9a:	462a      	mov	r2, r5
   29a9c:	4868      	ldr	r0, [pc, #416]	; (29c40 <download_client_callback+0x20c>)
   29a9e:	f00c face 	bl	3603e <log_1>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   29aa2:	2001      	movs	r0, #1
   29aa4:	f7ff ff6e 	bl	29984 <send_error_evt>
				int res = dfu_target_reset();
   29aa8:	f000 f9be 	bl	29e28 <dfu_target_reset>
				if (res != 0) {
   29aac:	b118      	cbz	r0, 29ab6 <download_client_callback+0x82>
					LOG_ERR("Unable to reset DFU target");
   29aae:	4629      	mov	r1, r5
   29ab0:	4864      	ldr	r0, [pc, #400]	; (29c44 <download_client_callback+0x210>)
   29ab2:	f00c fab5 	bl	36020 <log_0>
				first_fragment = true;
   29ab6:	2301      	movs	r3, #1
   29ab8:	7033      	strb	r3, [r6, #0]
}
   29aba:	4620      	mov	r0, r4
   29abc:	b005      	add	sp, #20
   29abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = dfu_target_offset_get(&offset);
   29ac0:	a801      	add	r0, sp, #4
   29ac2:	f000 f977 	bl	29db4 <dfu_target_offset_get>
			if (err != 0) {
   29ac6:	b110      	cbz	r0, 29ace <download_client_callback+0x9a>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   29ac8:	2001      	movs	r0, #1
   29aca:	f7ff ff5b 	bl	29984 <send_error_evt>
			if (offset != 0) {
   29ace:	9b01      	ldr	r3, [sp, #4]
   29ad0:	b1b3      	cbz	r3, 29b00 <download_client_callback+0xcc>
				(void)download_client_disconnect(&dlc);
   29ad2:	4857      	ldr	r0, [pc, #348]	; (29c30 <download_client_callback+0x1fc>)
   29ad4:	f7ff fbec 	bl	292b0 <download_client_disconnect>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   29ad8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   29adc:	2300      	movs	r3, #0
   29ade:	495a      	ldr	r1, [pc, #360]	; (29c48 <download_client_callback+0x214>)
   29ae0:	485a      	ldr	r0, [pc, #360]	; (29c4c <download_client_callback+0x218>)
   29ae2:	f00a fb55 	bl	34190 <k_delayed_work_submit_to_queue>
   29ae6:	4b54      	ldr	r3, [pc, #336]	; (29c38 <download_client_callback+0x204>)
   29ae8:	4954      	ldr	r1, [pc, #336]	; (29c3c <download_client_callback+0x208>)
				LOG_INF("Refuse fragment, restart with offset");
   29aea:	4859      	ldr	r0, [pc, #356]	; (29c50 <download_client_callback+0x21c>)
   29aec:	1ac9      	subs	r1, r1, r3
   29aee:	08c9      	lsrs	r1, r1, #3
   29af0:	0189      	lsls	r1, r1, #6
   29af2:	f041 0103 	orr.w	r1, r1, #3
   29af6:	f00c fa93 	bl	36020 <log_0>
				return -1;
   29afa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   29afe:	e7dc      	b.n	29aba <download_client_callback+0x86>
		err = dfu_target_write(event->fragment.buf,
   29b00:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   29b04:	f000 f960 	bl	29dc8 <dfu_target_write>
		if (err != 0) {
   29b08:	4604      	mov	r4, r0
   29b0a:	b1e0      	cbz	r0, 29b46 <download_client_callback+0x112>
   29b0c:	4b4a      	ldr	r3, [pc, #296]	; (29c38 <download_client_callback+0x204>)
   29b0e:	4d4b      	ldr	r5, [pc, #300]	; (29c3c <download_client_callback+0x208>)
			LOG_ERR("dfu_target_write error %d", err);
   29b10:	4601      	mov	r1, r0
   29b12:	1aed      	subs	r5, r5, r3
   29b14:	08ed      	lsrs	r5, r5, #3
   29b16:	01ad      	lsls	r5, r5, #6
   29b18:	f045 0501 	orr.w	r5, r5, #1
   29b1c:	484d      	ldr	r0, [pc, #308]	; (29c54 <download_client_callback+0x220>)
   29b1e:	462a      	mov	r2, r5
   29b20:	f00c fa8d 	bl	3603e <log_1>
			int res = dfu_target_done(false);
   29b24:	2000      	movs	r0, #0
   29b26:	f000 f95b 	bl	29de0 <dfu_target_done>
			if (res != 0) {
   29b2a:	b118      	cbz	r0, 29b34 <download_client_callback+0x100>
				LOG_ERR("Unable to free DFU target resources");
   29b2c:	4629      	mov	r1, r5
   29b2e:	484a      	ldr	r0, [pc, #296]	; (29c58 <download_client_callback+0x224>)
   29b30:	f00c fa76 	bl	36020 <log_0>
			first_fragment = true;
   29b34:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   29b36:	483e      	ldr	r0, [pc, #248]	; (29c30 <download_client_callback+0x1fc>)
			first_fragment = true;
   29b38:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   29b3a:	f7ff fbb9 	bl	292b0 <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   29b3e:	2002      	movs	r0, #2
   29b40:	f7ff ff20 	bl	29984 <send_error_evt>
			return err;
   29b44:	e7b9      	b.n	29aba <download_client_callback+0x86>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   29b46:	7833      	ldrb	r3, [r6, #0]
   29b48:	2b00      	cmp	r3, #0
   29b4a:	d1b6      	bne.n	29aba <download_client_callback+0x86>
			err = dfu_target_offset_get(&offset);
   29b4c:	a801      	add	r0, sp, #4
   29b4e:	f000 f931 	bl	29db4 <dfu_target_offset_get>
			if (err != 0) {
   29b52:	4604      	mov	r4, r0
   29b54:	2800      	cmp	r0, #0
   29b56:	d188      	bne.n	29a6a <download_client_callback+0x36>
			if (file_size == 0) {
   29b58:	4b34      	ldr	r3, [pc, #208]	; (29c2c <download_client_callback+0x1f8>)
   29b5a:	681a      	ldr	r2, [r3, #0]
   29b5c:	2a00      	cmp	r2, #0
   29b5e:	d084      	beq.n	29a6a <download_client_callback+0x36>
			send_progress((offset * 100) / file_size);
   29b60:	2364      	movs	r3, #100	; 0x64
   29b62:	9901      	ldr	r1, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   29b64:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   29b68:	434b      	muls	r3, r1
   29b6a:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   29b6e:	9303      	str	r3, [sp, #12]
	callback(&evt);
   29b70:	4b3a      	ldr	r3, [pc, #232]	; (29c5c <download_client_callback+0x228>)
   29b72:	a802      	add	r0, sp, #8
   29b74:	681b      	ldr	r3, [r3, #0]
   29b76:	4798      	blx	r3
}
   29b78:	e79f      	b.n	29aba <download_client_callback+0x86>
		err = dfu_target_done(true);
   29b7a:	2001      	movs	r0, #1
   29b7c:	f000 f930 	bl	29de0 <dfu_target_done>
		if (err != 0) {
   29b80:	4604      	mov	r4, r0
   29b82:	b158      	cbz	r0, 29b9c <download_client_callback+0x168>
   29b84:	4b2c      	ldr	r3, [pc, #176]	; (29c38 <download_client_callback+0x204>)
   29b86:	4a2d      	ldr	r2, [pc, #180]	; (29c3c <download_client_callback+0x208>)
			LOG_ERR("dfu_target_done error: %d", err);
   29b88:	4601      	mov	r1, r0
   29b8a:	1ad2      	subs	r2, r2, r3
   29b8c:	08d2      	lsrs	r2, r2, #3
   29b8e:	0192      	lsls	r2, r2, #6
   29b90:	4833      	ldr	r0, [pc, #204]	; (29c60 <download_client_callback+0x22c>)
   29b92:	f042 0201 	orr.w	r2, r2, #1
   29b96:	f00c fa52 	bl	3603e <log_1>
   29b9a:	e766      	b.n	29a6a <download_client_callback+0x36>
		err = download_client_disconnect(&dlc);
   29b9c:	4824      	ldr	r0, [pc, #144]	; (29c30 <download_client_callback+0x1fc>)
   29b9e:	f7ff fb87 	bl	292b0 <download_client_disconnect>
		if (err != 0) {
   29ba2:	4604      	mov	r4, r0
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   29ba4:	2001      	movs	r0, #1
		if (err != 0) {
   29ba6:	2c00      	cmp	r4, #0
   29ba8:	d1ca      	bne.n	29b40 <download_client_callback+0x10c>
		send_evt(FOTA_DOWNLOAD_EVT_FINISHED);
   29baa:	f7ff fedb 	bl	29964 <send_evt>
		first_fragment = true;
   29bae:	2201      	movs	r2, #1
   29bb0:	4b1d      	ldr	r3, [pc, #116]	; (29c28 <download_client_callback+0x1f4>)
   29bb2:	701a      	strb	r2, [r3, #0]
		break;
   29bb4:	e781      	b.n	29aba <download_client_callback+0x86>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   29bb6:	4e2b      	ldr	r6, [pc, #172]	; (29c64 <download_client_callback+0x230>)
   29bb8:	4c20      	ldr	r4, [pc, #128]	; (29c3c <download_client_callback+0x208>)
   29bba:	6831      	ldr	r1, [r6, #0]
   29bbc:	4f1e      	ldr	r7, [pc, #120]	; (29c38 <download_client_callback+0x204>)
   29bbe:	b191      	cbz	r1, 29be6 <download_client_callback+0x1b2>
   29bc0:	6843      	ldr	r3, [r0, #4]
   29bc2:	f113 0f80 	cmn.w	r3, #128	; 0x80
   29bc6:	d001      	beq.n	29bcc <download_client_callback+0x198>
   29bc8:	3368      	adds	r3, #104	; 0x68
   29bca:	d10c      	bne.n	29be6 <download_client_callback+0x1b2>
   29bcc:	1be2      	subs	r2, r4, r7
   29bce:	08d2      	lsrs	r2, r2, #3
			LOG_WRN("Download socket error. %d retries left...",
   29bd0:	0192      	lsls	r2, r2, #6
   29bd2:	4825      	ldr	r0, [pc, #148]	; (29c68 <download_client_callback+0x234>)
   29bd4:	f042 0202 	orr.w	r2, r2, #2
   29bd8:	f00c fa31 	bl	3603e <log_1>
			socket_retries_left--;
   29bdc:	6833      	ldr	r3, [r6, #0]
   29bde:	3b01      	subs	r3, #1
   29be0:	6033      	str	r3, [r6, #0]
	switch (event->id) {
   29be2:	2400      	movs	r4, #0
   29be4:	e769      	b.n	29aba <download_client_callback+0x86>
   29be6:	1be4      	subs	r4, r4, r7
   29be8:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("Download client error");
   29bea:	01a4      	lsls	r4, r4, #6
			download_client_disconnect(&dlc);
   29bec:	4810      	ldr	r0, [pc, #64]	; (29c30 <download_client_callback+0x1fc>)
			LOG_ERR("Download client error");
   29bee:	f044 0401 	orr.w	r4, r4, #1
			download_client_disconnect(&dlc);
   29bf2:	f7ff fb5d 	bl	292b0 <download_client_disconnect>
			LOG_ERR("Download client error");
   29bf6:	4621      	mov	r1, r4
   29bf8:	481c      	ldr	r0, [pc, #112]	; (29c6c <download_client_callback+0x238>)
   29bfa:	f00c fa11 	bl	36020 <log_0>
			err = dfu_target_done(false);
   29bfe:	2000      	movs	r0, #0
   29c00:	f000 f8ee 	bl	29de0 <dfu_target_done>
			if (err == -EACCES) {
   29c04:	f110 0f0d 	cmn.w	r0, #13
   29c08:	d004      	beq.n	29c14 <download_client_callback+0x1e0>
			} else if (err != 0) {
   29c0a:	b118      	cbz	r0, 29c14 <download_client_callback+0x1e0>
				LOG_ERR("Unable to deinitialze resources "
   29c0c:	4621      	mov	r1, r4
   29c0e:	4818      	ldr	r0, [pc, #96]	; (29c70 <download_client_callback+0x23c>)
   29c10:	f00c fa06 	bl	36020 <log_0>
			first_fragment = true;
   29c14:	2001      	movs	r0, #1
   29c16:	4b04      	ldr	r3, [pc, #16]	; (29c28 <download_client_callback+0x1f4>)
   29c18:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   29c1a:	f7ff feb3 	bl	29984 <send_error_evt>
			return event->error;
   29c1e:	686c      	ldr	r4, [r5, #4]
   29c20:	e74b      	b.n	29aba <download_client_callback+0x86>
		return -EINVAL;
   29c22:	f06f 0415 	mvn.w	r4, #21
   29c26:	e748      	b.n	29aba <download_client_callback+0x86>
   29c28:	20020638 	.word	0x20020638
   29c2c:	200236bc 	.word	0x200236bc
   29c30:	20021750 	.word	0x20021750
   29c34:	000380e1 	.word	0x000380e1
   29c38:	00039a50 	.word	0x00039a50
   29c3c:	00039ac0 	.word	0x00039ac0
   29c40:	0003cb2c 	.word	0x0003cb2c
   29c44:	0003cb45 	.word	0x0003cb45
   29c48:	20023060 	.word	0x20023060
   29c4c:	20023220 	.word	0x20023220
   29c50:	0003cb60 	.word	0x0003cb60
   29c54:	0003cb85 	.word	0x0003cb85
   29c58:	0003cb9f 	.word	0x0003cb9f
   29c5c:	200236b8 	.word	0x200236b8
   29c60:	0003cbc3 	.word	0x0003cbc3
   29c64:	200236c0 	.word	0x200236c0
   29c68:	0003cbdd 	.word	0x0003cbdd
   29c6c:	0003cc07 	.word	0x0003cc07
   29c70:	0003cc1d 	.word	0x0003cc1d

00029c74 <fota_download_start>:

int fota_download_start(const char *host, const char *file, int sec_tag,
			const char *apn, size_t fragment_size)
{
   29c74:	b530      	push	{r4, r5, lr}
   29c76:	b085      	sub	sp, #20
	int err = -1;

	struct download_client_cfg config = {
   29c78:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29c7c:	9b08      	ldr	r3, [sp, #32]
{
   29c7e:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   29c80:	9303      	str	r3, [sp, #12]
		.sec_tag = sec_tag,
		.apn = apn,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   29c82:	4601      	mov	r1, r0
   29c84:	b1c8      	cbz	r0, 29cba <fota_download_start+0x46>
   29c86:	b1c5      	cbz	r5, 29cba <fota_download_start+0x46>
   29c88:	4b0d      	ldr	r3, [pc, #52]	; (29cc0 <fota_download_start+0x4c>)
   29c8a:	681b      	ldr	r3, [r3, #0]
   29c8c:	b1ab      	cbz	r3, 29cba <fota_download_start+0x46>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   29c8e:	2202      	movs	r2, #2
   29c90:	4b0c      	ldr	r3, [pc, #48]	; (29cc4 <fota_download_start+0x50>)
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   29c92:	480d      	ldr	r0, [pc, #52]	; (29cc8 <fota_download_start+0x54>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   29c94:	601a      	str	r2, [r3, #0]
	err = download_client_connect(&dlc, host, &config);
   29c96:	aa01      	add	r2, sp, #4
   29c98:	f7ff f928 	bl	28eec <download_client_connect>
	if (err != 0) {
   29c9c:	4604      	mov	r4, r0
   29c9e:	b948      	cbnz	r0, 29cb4 <fota_download_start+0x40>
		return err;
	}

	err = download_client_start(&dlc, file, 0);
   29ca0:	4602      	mov	r2, r0
   29ca2:	4629      	mov	r1, r5
   29ca4:	4808      	ldr	r0, [pc, #32]	; (29cc8 <fota_download_start+0x54>)
   29ca6:	f7ff fc49 	bl	2953c <download_client_start>
	if (err != 0) {
   29caa:	4604      	mov	r4, r0
   29cac:	b110      	cbz	r0, 29cb4 <fota_download_start+0x40>
		download_client_disconnect(&dlc);
   29cae:	4806      	ldr	r0, [pc, #24]	; (29cc8 <fota_download_start+0x54>)
   29cb0:	f7ff fafe 	bl	292b0 <download_client_disconnect>
		return err;
	}

	return 0;
}
   29cb4:	4620      	mov	r0, r4
   29cb6:	b005      	add	sp, #20
   29cb8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   29cba:	f06f 0415 	mvn.w	r4, #21
   29cbe:	e7f9      	b.n	29cb4 <fota_download_start+0x40>
   29cc0:	200236b8 	.word	0x200236b8
   29cc4:	200236c0 	.word	0x200236c0
   29cc8:	20021750 	.word	0x20021750

00029ccc <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   29ccc:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   29cce:	b158      	cbz	r0, 29ce8 <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   29cd0:	4b07      	ldr	r3, [pc, #28]	; (29cf0 <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   29cd2:	4908      	ldr	r1, [pc, #32]	; (29cf4 <fota_download_init+0x28>)
	callback = client_callback;
   29cd4:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   29cd6:	4808      	ldr	r0, [pc, #32]	; (29cf8 <fota_download_init+0x2c>)
   29cd8:	f00e fce4 	bl	386a4 <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   29cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   29ce0:	4906      	ldr	r1, [pc, #24]	; (29cfc <fota_download_init+0x30>)
   29ce2:	4807      	ldr	r0, [pc, #28]	; (29d00 <fota_download_init+0x34>)
   29ce4:	f7ff b8d8 	b.w	28e98 <download_client_init>
}
   29ce8:	f06f 0015 	mvn.w	r0, #21
   29cec:	bd08      	pop	{r3, pc}
   29cee:	bf00      	nop
   29cf0:	200236b8 	.word	0x200236b8
   29cf4:	000299a9 	.word	0x000299a9
   29cf8:	20023060 	.word	0x20023060
   29cfc:	00029a35 	.word	0x00029a35
   29d00:	20021750 	.word	0x20021750

00029d04 <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   29d04:	b538      	push	{r3, r4, r5, lr}
   29d06:	4605      	mov	r5, r0
   29d08:	460c      	mov	r4, r1
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   29d0a:	f000 faf7 	bl	2a2fc <dfu_target_mcuboot_identify>
   29d0e:	b990      	cbnz	r0, 29d36 <dfu_target_img_type+0x32>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (dfu_target_modem_identify(buf)) {
   29d10:	4628      	mov	r0, r5
   29d12:	f000 f947 	bl	29fa4 <dfu_target_modem_identify>
   29d16:	b980      	cbnz	r0, 29d3a <dfu_target_img_type+0x36>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}
#endif
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   29d18:	2c1f      	cmp	r4, #31
   29d1a:	d910      	bls.n	29d3e <dfu_target_img_type+0x3a>
   29d1c:	4b09      	ldr	r3, [pc, #36]	; (29d44 <dfu_target_img_type+0x40>)
   29d1e:	490a      	ldr	r1, [pc, #40]	; (29d48 <dfu_target_img_type+0x44>)
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   29d20:	480a      	ldr	r0, [pc, #40]	; (29d4c <dfu_target_img_type+0x48>)
   29d22:	1ac9      	subs	r1, r1, r3
   29d24:	08c9      	lsrs	r1, r1, #3
   29d26:	0189      	lsls	r1, r1, #6
   29d28:	f041 0101 	orr.w	r1, r1, #1
   29d2c:	f00c f978 	bl	36020 <log_0>
	return -ENOTSUP;
   29d30:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   29d34:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   29d36:	2001      	movs	r0, #1
   29d38:	e7fc      	b.n	29d34 <dfu_target_img_type+0x30>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   29d3a:	2002      	movs	r0, #2
   29d3c:	e7fa      	b.n	29d34 <dfu_target_img_type+0x30>
		return -EAGAIN;
   29d3e:	f06f 000a 	mvn.w	r0, #10
   29d42:	e7f7      	b.n	29d34 <dfu_target_img_type+0x30>
   29d44:	00039a50 	.word	0x00039a50
   29d48:	00039a88 	.word	0x00039a88
   29d4c:	0003cc74 	.word	0x0003cc74

00029d50 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
   29d50:	4603      	mov	r3, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   29d52:	2b01      	cmp	r3, #1
{
   29d54:	4608      	mov	r0, r1
   29d56:	b570      	push	{r4, r5, r6, lr}
   29d58:	4611      	mov	r1, r2
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   29d5a:	d00e      	beq.n	29d7a <dfu_target_init+0x2a>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   29d5c:	2b02      	cmp	r3, #2
   29d5e:	d018      	beq.n	29d92 <dfu_target_init+0x42>
   29d60:	4b0e      	ldr	r3, [pc, #56]	; (29d9c <dfu_target_init+0x4c>)
   29d62:	490f      	ldr	r1, [pc, #60]	; (29da0 <dfu_target_init+0x50>)
		new_target = &dfu_target_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   29d64:	480f      	ldr	r0, [pc, #60]	; (29da4 <dfu_target_init+0x54>)
   29d66:	1ac9      	subs	r1, r1, r3
   29d68:	08c9      	lsrs	r1, r1, #3
   29d6a:	0189      	lsls	r1, r1, #6
   29d6c:	f041 0101 	orr.w	r1, r1, #1
   29d70:	f00c f956 	bl	36020 <log_0>
		return -ENOTSUP;
   29d74:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size, cb);
}
   29d78:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   29d7a:	4c0b      	ldr	r4, [pc, #44]	; (29da8 <dfu_target_init+0x58>)
	if (new_target == current_target
   29d7c:	4d0b      	ldr	r5, [pc, #44]	; (29dac <dfu_target_init+0x5c>)
   29d7e:	682a      	ldr	r2, [r5, #0]
   29d80:	42a2      	cmp	r2, r4
   29d82:	d101      	bne.n	29d88 <dfu_target_init+0x38>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   29d84:	2b02      	cmp	r3, #2
   29d86:	d106      	bne.n	29d96 <dfu_target_init+0x46>
	return current_target->init(file_size, cb);
   29d88:	6823      	ldr	r3, [r4, #0]
	current_target = new_target;
   29d8a:	602c      	str	r4, [r5, #0]
}
   29d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, cb);
   29d90:	4718      	bx	r3
		new_target = &dfu_target_modem;
   29d92:	4c07      	ldr	r4, [pc, #28]	; (29db0 <dfu_target_init+0x60>)
   29d94:	e7f2      	b.n	29d7c <dfu_target_init+0x2c>
		return 0;
   29d96:	2000      	movs	r0, #0
   29d98:	e7ee      	b.n	29d78 <dfu_target_init+0x28>
   29d9a:	bf00      	nop
   29d9c:	00039a50 	.word	0x00039a50
   29da0:	00039a88 	.word	0x00039a88
   29da4:	0003cc92 	.word	0x0003cc92
   29da8:	0003a128 	.word	0x0003a128
   29dac:	200236c4 	.word	0x200236c4
   29db0:	0003a138 	.word	0x0003a138

00029db4 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   29db4:	4b03      	ldr	r3, [pc, #12]	; (29dc4 <dfu_target_offset_get+0x10>)
   29db6:	681b      	ldr	r3, [r3, #0]
   29db8:	b10b      	cbz	r3, 29dbe <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   29dba:	685b      	ldr	r3, [r3, #4]
   29dbc:	4718      	bx	r3
}
   29dbe:	f06f 000c 	mvn.w	r0, #12
   29dc2:	4770      	bx	lr
   29dc4:	200236c4 	.word	0x200236c4

00029dc8 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   29dc8:	4a04      	ldr	r2, [pc, #16]	; (29ddc <dfu_target_write+0x14>)
   29dca:	6812      	ldr	r2, [r2, #0]
   29dcc:	b112      	cbz	r2, 29dd4 <dfu_target_write+0xc>
   29dce:	b108      	cbz	r0, 29dd4 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   29dd0:	6893      	ldr	r3, [r2, #8]
   29dd2:	4718      	bx	r3
}
   29dd4:	f06f 000c 	mvn.w	r0, #12
   29dd8:	4770      	bx	lr
   29dda:	bf00      	nop
   29ddc:	200236c4 	.word	0x200236c4

00029de0 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   29de0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   29de2:	4e0d      	ldr	r6, [pc, #52]	; (29e18 <dfu_target_done+0x38>)
{
   29de4:	4605      	mov	r5, r0
	if (current_target == NULL) {
   29de6:	6833      	ldr	r3, [r6, #0]
   29de8:	b19b      	cbz	r3, 29e12 <dfu_target_done+0x32>
		return -EACCES;
	}

	err = current_target->done(successful);
   29dea:	68db      	ldr	r3, [r3, #12]
   29dec:	4798      	blx	r3
	if (err != 0) {
   29dee:	4604      	mov	r4, r0
   29df0:	b158      	cbz	r0, 29e0a <dfu_target_done+0x2a>
   29df2:	490a      	ldr	r1, [pc, #40]	; (29e1c <dfu_target_done+0x3c>)
   29df4:	4b0a      	ldr	r3, [pc, #40]	; (29e20 <dfu_target_done+0x40>)
		LOG_ERR("Unable to clean up dfu_target");
   29df6:	480b      	ldr	r0, [pc, #44]	; (29e24 <dfu_target_done+0x44>)
   29df8:	1ac9      	subs	r1, r1, r3
   29dfa:	08c9      	lsrs	r1, r1, #3
   29dfc:	0189      	lsls	r1, r1, #6
   29dfe:	f041 0101 	orr.w	r1, r1, #1
   29e02:	f00c f90d 	bl	36020 <log_0>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   29e06:	4620      	mov	r0, r4
   29e08:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   29e0a:	2d00      	cmp	r5, #0
   29e0c:	d0fb      	beq.n	29e06 <dfu_target_done+0x26>
		current_target = NULL;
   29e0e:	6030      	str	r0, [r6, #0]
   29e10:	e7f9      	b.n	29e06 <dfu_target_done+0x26>
		return -EACCES;
   29e12:	f06f 040c 	mvn.w	r4, #12
   29e16:	e7f6      	b.n	29e06 <dfu_target_done+0x26>
   29e18:	200236c4 	.word	0x200236c4
   29e1c:	00039a88 	.word	0x00039a88
   29e20:	00039a50 	.word	0x00039a50
   29e24:	0003cca5 	.word	0x0003cca5

00029e28 <dfu_target_reset>:

int dfu_target_reset(void)
{
   29e28:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   29e2a:	4d0b      	ldr	r5, [pc, #44]	; (29e58 <dfu_target_reset+0x30>)
   29e2c:	682a      	ldr	r2, [r5, #0]
   29e2e:	b182      	cbz	r2, 29e52 <dfu_target_reset+0x2a>
		int err = current_target->done(false);
   29e30:	2000      	movs	r0, #0
   29e32:	68d3      	ldr	r3, [r2, #12]
   29e34:	4798      	blx	r3

		if (err != 0) {
   29e36:	4604      	mov	r4, r0
   29e38:	b158      	cbz	r0, 29e52 <dfu_target_reset+0x2a>
   29e3a:	4908      	ldr	r1, [pc, #32]	; (29e5c <dfu_target_reset+0x34>)
   29e3c:	4b08      	ldr	r3, [pc, #32]	; (29e60 <dfu_target_reset+0x38>)
			LOG_ERR("Unable to clean up dfu_target");
   29e3e:	4809      	ldr	r0, [pc, #36]	; (29e64 <dfu_target_reset+0x3c>)
   29e40:	1ac9      	subs	r1, r1, r3
   29e42:	08c9      	lsrs	r1, r1, #3
   29e44:	0189      	lsls	r1, r1, #6
   29e46:	f041 0101 	orr.w	r1, r1, #1
   29e4a:	f00c f8e9 	bl	36020 <log_0>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   29e4e:	4620      	mov	r0, r4
   29e50:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   29e52:	2400      	movs	r4, #0
   29e54:	602c      	str	r4, [r5, #0]
	return 0;
   29e56:	e7fa      	b.n	29e4e <dfu_target_reset+0x26>
   29e58:	200236c4 	.word	0x200236c4
   29e5c:	00039a88 	.word	0x00039a88
   29e60:	00039a50 	.word	0x00039a50
   29e64:	0003cca5 	.word	0x0003cca5

00029e68 <get_modem_error>:
static int  fd;
static int  offset;
static dfu_target_callback_t callback;

static int get_modem_error(void)
{
   29e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   29e6a:	2200      	movs	r2, #0
   29e6c:	2304      	movs	r3, #4
   29e6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   29e72:	4b0e      	ldr	r3, [pc, #56]	; (29eac <get_modem_error+0x44>)
   29e74:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   29e76:	ab03      	add	r3, sp, #12
   29e78:	9300      	str	r3, [sp, #0]
   29e7a:	2214      	movs	r2, #20
   29e7c:	f240 2103 	movw	r1, #515	; 0x203
   29e80:	ab02      	add	r3, sp, #8
   29e82:	f00c fd7e 	bl	36982 <z_impl_zsock_getsockopt>
	if (rc) {
   29e86:	b168      	cbz	r0, 29ea4 <get_modem_error+0x3c>
   29e88:	4a09      	ldr	r2, [pc, #36]	; (29eb0 <get_modem_error+0x48>)
   29e8a:	4c0a      	ldr	r4, [pc, #40]	; (29eb4 <get_modem_error+0x4c>)
   29e8c:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   29e8e:	f00c ffce 	bl	36e2e <__errno>
   29e92:	08e4      	lsrs	r4, r4, #3
   29e94:	01a4      	lsls	r4, r4, #6
   29e96:	f044 0401 	orr.w	r4, r4, #1
   29e9a:	6801      	ldr	r1, [r0, #0]
   29e9c:	4622      	mov	r2, r4
   29e9e:	4806      	ldr	r0, [pc, #24]	; (29eb8 <get_modem_error+0x50>)
   29ea0:	f00c f8cd 	bl	3603e <log_1>
	}

	return err;
}
   29ea4:	9802      	ldr	r0, [sp, #8]
   29ea6:	b004      	add	sp, #16
   29ea8:	bd10      	pop	{r4, pc}
   29eaa:	bf00      	nop
   29eac:	200236cc 	.word	0x200236cc
   29eb0:	00039a50 	.word	0x00039a50
   29eb4:	00039a98 	.word	0x00039a98
   29eb8:	0003ccc3 	.word	0x0003ccc3

00029ebc <delete_banked_modem_fw>:
}
#define SLEEP_TIME 1
static int delete_banked_modem_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   29ebc:	2304      	movs	r3, #4
{
   29ebe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29ec2:	4a2f      	ldr	r2, [pc, #188]	; (29f80 <delete_banked_modem_fw+0xc4>)
   29ec4:	4c2f      	ldr	r4, [pc, #188]	; (29f84 <delete_banked_modem_fw+0xc8>)
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   29ec6:	4e30      	ldr	r6, [pc, #192]	; (29f88 <delete_banked_modem_fw+0xcc>)
   29ec8:	1aa4      	subs	r4, r4, r2
   29eca:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Deleting firmware image, this can take several minutes");
   29ecc:	01a4      	lsls	r4, r4, #6
{
   29ece:	b085      	sub	sp, #20
	LOG_INF("Deleting firmware image, this can take several minutes");
   29ed0:	482e      	ldr	r0, [pc, #184]	; (29f8c <delete_banked_modem_fw+0xd0>)
   29ed2:	f044 0103 	orr.w	r1, r4, #3
	socklen_t len = sizeof(offset);
   29ed6:	9303      	str	r3, [sp, #12]
	LOG_INF("Deleting firmware image, this can take several minutes");
   29ed8:	f00c f8a2 	bl	36020 <log_0>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   29edc:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   29ede:	2300      	movs	r3, #0
   29ee0:	2206      	movs	r2, #6
   29ee2:	f240 2103 	movw	r1, #515	; 0x203
   29ee6:	9300      	str	r3, [sp, #0]
   29ee8:	f00c fd66 	bl	369b8 <z_impl_zsock_setsockopt>
	if (err < 0) {
   29eec:	2800      	cmp	r0, #0
   29eee:	da0d      	bge.n	29f0c <delete_banked_modem_fw+0x50>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   29ef0:	f00c ff9d 	bl	36e2e <__errno>
   29ef4:	f044 0401 	orr.w	r4, r4, #1
   29ef8:	6801      	ldr	r1, [r0, #0]
   29efa:	4622      	mov	r2, r4
   29efc:	4824      	ldr	r0, [pc, #144]	; (29f90 <delete_banked_modem_fw+0xd4>)
   29efe:	f00c f89e 	bl	3603e <log_1>
		return -EFAULT;
   29f02:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   29f06:	b005      	add	sp, #20
   29f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   29f0c:	253c      	movs	r5, #60	; 0x3c
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   29f0e:	4f21      	ldr	r7, [pc, #132]	; (29f94 <delete_banked_modem_fw+0xd8>)
				callback(DFU_TARGET_EVT_TIMEOUT);
   29f10:	f8df 8084 	ldr.w	r8, [pc, #132]	; 29f98 <delete_banked_modem_fw+0xdc>
					LOG_ERR("DFU error: %d", err);
   29f14:	f8df 9088 	ldr.w	r9, [pc, #136]	; 29fa0 <delete_banked_modem_fw+0xe4>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   29f18:	6830      	ldr	r0, [r6, #0]
   29f1a:	ab03      	add	r3, sp, #12
   29f1c:	9300      	str	r3, [sp, #0]
   29f1e:	2207      	movs	r2, #7
   29f20:	463b      	mov	r3, r7
   29f22:	f240 2103 	movw	r1, #515	; 0x203
   29f26:	f00c fd2c 	bl	36982 <z_impl_zsock_getsockopt>
		if (err < 0) {
   29f2a:	2800      	cmp	r0, #0
   29f2c:	da1d      	bge.n	29f6a <delete_banked_modem_fw+0xae>
			if (timeout < 0) {
   29f2e:	2d00      	cmp	r5, #0
   29f30:	da04      	bge.n	29f3c <delete_banked_modem_fw+0x80>
				callback(DFU_TARGET_EVT_TIMEOUT);
   29f32:	2000      	movs	r0, #0
   29f34:	f8d8 3000 	ldr.w	r3, [r8]
   29f38:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   29f3a:	253c      	movs	r5, #60	; 0x3c
			if (errno == ENOEXEC) {
   29f3c:	f00c ff77 	bl	36e2e <__errno>
   29f40:	6803      	ldr	r3, [r0, #0]
   29f42:	2b08      	cmp	r3, #8
   29f44:	d10f      	bne.n	29f66 <delete_banked_modem_fw+0xaa>
				err = get_modem_error();
   29f46:	f7ff ff8f 	bl	29e68 <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   29f4a:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   29f4e:	4601      	mov	r1, r0
				if (err != DFU_ERASE_PENDING) {
   29f50:	d004      	beq.n	29f5c <delete_banked_modem_fw+0xa0>
					LOG_ERR("DFU error: %d", err);
   29f52:	4648      	mov	r0, r9
   29f54:	f044 0201 	orr.w	r2, r4, #1
   29f58:	f00c f871 	bl	3603e <log_1>
	return z_impl_k_sleep(timeout);
   29f5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   29f60:	2100      	movs	r1, #0
   29f62:	f009 ff77 	bl	33e54 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   29f66:	3d01      	subs	r5, #1
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   29f68:	e7d6      	b.n	29f18 <delete_banked_modem_fw+0x5c>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   29f6a:	4b0b      	ldr	r3, [pc, #44]	; (29f98 <delete_banked_modem_fw+0xdc>)
   29f6c:	2001      	movs	r0, #1
   29f6e:	681b      	ldr	r3, [r3, #0]
   29f70:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   29f72:	480a      	ldr	r0, [pc, #40]	; (29f9c <delete_banked_modem_fw+0xe0>)
   29f74:	f044 0103 	orr.w	r1, r4, #3
   29f78:	f00c f852 	bl	36020 <log_0>
	return 0;
   29f7c:	2000      	movs	r0, #0
   29f7e:	e7c2      	b.n	29f06 <delete_banked_modem_fw+0x4a>
   29f80:	00039a50 	.word	0x00039a50
   29f84:	00039a98 	.word	0x00039a98
   29f88:	200236cc 	.word	0x200236cc
   29f8c:	0003cce9 	.word	0x0003cce9
   29f90:	0003cd20 	.word	0x0003cd20
   29f94:	200236d0 	.word	0x200236d0
   29f98:	200236c8 	.word	0x200236c8
   29f9c:	0003cd50 	.word	0x0003cd50
   29fa0:	0003cd42 	.word	0x0003cd42

00029fa4 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   29fa4:	6840      	ldr	r0, [r0, #4]

}
   29fa6:	4b02      	ldr	r3, [pc, #8]	; (29fb0 <dfu_target_modem_identify+0xc>)
   29fa8:	1ac3      	subs	r3, r0, r3
   29faa:	4258      	negs	r0, r3
   29fac:	4158      	adcs	r0, r3
   29fae:	4770      	bx	lr
   29fb0:	7544656d 	.word	0x7544656d

00029fb4 <dfu_target_modem_init>:

int dfu_target_modem_init(size_t file_size, dfu_target_callback_t cb)
{
	int err;
	size_t scratch_space;
	socklen_t len = sizeof(offset);
   29fb4:	2304      	movs	r3, #4
{
   29fb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29fba:	b099      	sub	sp, #100	; 0x64
	socklen_t len = sizeof(offset);
   29fbc:	9303      	str	r3, [sp, #12]

	callback = cb;
   29fbe:	4b5e      	ldr	r3, [pc, #376]	; (2a138 <dfu_target_modem_init+0x184>)
{
   29fc0:	4606      	mov	r6, r0
	callback = cb;
   29fc2:	6019      	str	r1, [r3, #0]
	return z_impl_zsock_socket(family, type, proto);
   29fc4:	f240 2203 	movw	r2, #515	; 0x203
   29fc8:	2101      	movs	r1, #1
   29fca:	2006      	movs	r0, #6
   29fcc:	f7fa f8d4 	bl	24178 <z_impl_zsock_socket>
   29fd0:	4c5a      	ldr	r4, [pc, #360]	; (2a13c <dfu_target_modem_init+0x188>)
   29fd2:	4a5b      	ldr	r2, [pc, #364]	; (2a140 <dfu_target_modem_init+0x18c>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   29fd4:	4f5b      	ldr	r7, [pc, #364]	; (2a144 <dfu_target_modem_init+0x190>)
   29fd6:	1aa4      	subs	r4, r4, r2
   29fd8:	08e4      	lsrs	r4, r4, #3
	if (fd < 0) {
   29fda:	2800      	cmp	r0, #0
   29fdc:	463d      	mov	r5, r7
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   29fde:	6038      	str	r0, [r7, #0]
	if (fd < 0) {
   29fe0:	ea4f 1484 	mov.w	r4, r4, lsl #6
   29fe4:	da2c      	bge.n	2a040 <dfu_target_modem_init+0x8c>
		LOG_ERR("Failed to open Modem DFU socket.");
   29fe6:	4858      	ldr	r0, [pc, #352]	; (2a148 <dfu_target_modem_init+0x194>)
   29fe8:	f044 0101 	orr.w	r1, r4, #1
   29fec:	f00c f818 	bl	36020 <log_0>
		return fd;
   29ff0:	6838      	ldr	r0, [r7, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   29ff2:	2800      	cmp	r0, #0
   29ff4:	db45      	blt.n	2a082 <dfu_target_modem_init+0xce>
		return err;
	}

	err = getsockopt(fd, SOL_DFU, SO_DFU_RESOURCES, &scratch_space, &len);
   29ff6:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   29ff8:	af03      	add	r7, sp, #12
   29ffa:	2202      	movs	r2, #2
   29ffc:	f240 2103 	movw	r1, #515	; 0x203
   2a000:	9700      	str	r7, [sp, #0]
   2a002:	ab0e      	add	r3, sp, #56	; 0x38
   2a004:	f00c fcbd 	bl	36982 <z_impl_zsock_getsockopt>
	if (err < 0) {
   2a008:	2800      	cmp	r0, #0
   2a00a:	da0d      	bge.n	2a028 <dfu_target_modem_init+0x74>
		if (errno == ENOEXEC) {
   2a00c:	f00c ff0f 	bl	36e2e <__errno>
   2a010:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2a012:	f044 0801 	orr.w	r8, r4, #1
		if (errno == ENOEXEC) {
   2a016:	2b08      	cmp	r3, #8
   2a018:	d146      	bne.n	2a0a8 <dfu_target_modem_init+0xf4>
			LOG_ERR("Modem error: %d", get_modem_error());
   2a01a:	f7ff ff25 	bl	29e68 <get_modem_error>
   2a01e:	4642      	mov	r2, r8
   2a020:	4601      	mov	r1, r0
   2a022:	484a      	ldr	r0, [pc, #296]	; (2a14c <dfu_target_modem_init+0x198>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2a024:	f00c f80b 	bl	3603e <log_1>
		}
	}

	if (file_size > scratch_space) {
   2a028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2a02a:	42b2      	cmp	r2, r6
   2a02c:	d242      	bcs.n	2a0b4 <dfu_target_modem_init+0x100>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   2a02e:	4848      	ldr	r0, [pc, #288]	; (2a150 <dfu_target_modem_init+0x19c>)
   2a030:	4631      	mov	r1, r6
   2a032:	f044 0301 	orr.w	r3, r4, #1
   2a036:	f00c f819 	bl	3606c <log_2>
			file_size, scratch_space);
		return -EFBIG;
   2a03a:	f06f 001a 	mvn.w	r0, #26
   2a03e:	e020      	b.n	2a082 <dfu_target_modem_init+0xce>
	len = sizeof(version);
   2a040:	f04f 0924 	mov.w	r9, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   2a044:	f044 0803 	orr.w	r8, r4, #3
   2a048:	4641      	mov	r1, r8
   2a04a:	4842      	ldr	r0, [pc, #264]	; (2a154 <dfu_target_modem_init+0x1a0>)
   2a04c:	f00b ffe8 	bl	36020 <log_0>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2a050:	6838      	ldr	r0, [r7, #0]
	len = sizeof(version);
   2a052:	f8cd 9010 	str.w	r9, [sp, #16]
   2a056:	ab04      	add	r3, sp, #16
   2a058:	af05      	add	r7, sp, #20
   2a05a:	9300      	str	r3, [sp, #0]
   2a05c:	2201      	movs	r2, #1
   2a05e:	463b      	mov	r3, r7
   2a060:	f240 2103 	movw	r1, #515	; 0x203
   2a064:	f00c fc8d 	bl	36982 <z_impl_zsock_getsockopt>
	if (err < 0) {
   2a068:	2800      	cmp	r0, #0
   2a06a:	da0d      	bge.n	2a088 <dfu_target_modem_init+0xd4>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   2a06c:	f00c fedf 	bl	36e2e <__errno>
   2a070:	f044 0401 	orr.w	r4, r4, #1
   2a074:	6801      	ldr	r1, [r0, #0]
   2a076:	4622      	mov	r2, r4
   2a078:	4837      	ldr	r0, [pc, #220]	; (2a158 <dfu_target_modem_init+0x1a4>)
   2a07a:	f00b ffe0 	bl	3603e <log_1>
		return -1;
   2a07e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
}
   2a082:	b019      	add	sp, #100	; 0x64
   2a084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   2a088:	464b      	mov	r3, r9
   2a08a:	2125      	movs	r1, #37	; 0x25
   2a08c:	4a33      	ldr	r2, [pc, #204]	; (2a15c <dfu_target_modem_init+0x1a8>)
   2a08e:	9700      	str	r7, [sp, #0]
   2a090:	a80e      	add	r0, sp, #56	; 0x38
   2a092:	f00a fe9b 	bl	34dcc <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   2a096:	a80e      	add	r0, sp, #56	; 0x38
   2a098:	f7f9 fba0 	bl	237dc <log_strdup>
   2a09c:	4642      	mov	r2, r8
   2a09e:	4601      	mov	r1, r0
   2a0a0:	482f      	ldr	r0, [pc, #188]	; (2a160 <dfu_target_modem_init+0x1ac>)
   2a0a2:	f00b ffcc 	bl	3603e <log_1>
	if (err < 0) {
   2a0a6:	e7a6      	b.n	29ff6 <dfu_target_modem_init+0x42>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2a0a8:	f00c fec1 	bl	36e2e <__errno>
   2a0ac:	4642      	mov	r2, r8
   2a0ae:	6801      	ldr	r1, [r0, #0]
   2a0b0:	482c      	ldr	r0, [pc, #176]	; (2a164 <dfu_target_modem_init+0x1b0>)
   2a0b2:	e7b7      	b.n	2a024 <dfu_target_modem_init+0x70>
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2a0b4:	6828      	ldr	r0, [r5, #0]
   2a0b6:	2207      	movs	r2, #7
   2a0b8:	f240 2103 	movw	r1, #515	; 0x203
   2a0bc:	4b2a      	ldr	r3, [pc, #168]	; (2a168 <dfu_target_modem_init+0x1b4>)
   2a0be:	9700      	str	r7, [sp, #0]
   2a0c0:	f00c fc5f 	bl	36982 <z_impl_zsock_getsockopt>
	if (err < 0) {
   2a0c4:	2800      	cmp	r0, #0
   2a0c6:	da0d      	bge.n	2a0e4 <dfu_target_modem_init+0x130>
		if (errno == ENOEXEC) {
   2a0c8:	f00c feb1 	bl	36e2e <__errno>
   2a0cc:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2a0ce:	f044 0601 	orr.w	r6, r4, #1
		if (errno == ENOEXEC) {
   2a0d2:	2b08      	cmp	r3, #8
   2a0d4:	d10f      	bne.n	2a0f6 <dfu_target_modem_init+0x142>
			LOG_ERR("Modem error: %d", get_modem_error());
   2a0d6:	f7ff fec7 	bl	29e68 <get_modem_error>
   2a0da:	4632      	mov	r2, r6
   2a0dc:	4601      	mov	r1, r0
   2a0de:	481b      	ldr	r0, [pc, #108]	; (2a14c <dfu_target_modem_init+0x198>)
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2a0e0:	f00b ffad 	bl	3603e <log_1>
	if (offset == DIRTY_IMAGE) {
   2a0e4:	4e20      	ldr	r6, [pc, #128]	; (2a168 <dfu_target_modem_init+0x1b4>)
   2a0e6:	6831      	ldr	r1, [r6, #0]
   2a0e8:	f5b1 1f20 	cmp.w	r1, #2621440	; 0x280000
   2a0ec:	d109      	bne.n	2a102 <dfu_target_modem_init+0x14e>
		delete_banked_modem_fw();
   2a0ee:	f7ff fee5 	bl	29ebc <delete_banked_modem_fw>
	return 0;
   2a0f2:	2000      	movs	r0, #0
   2a0f4:	e7c5      	b.n	2a082 <dfu_target_modem_init+0xce>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2a0f6:	f00c fe9a 	bl	36e2e <__errno>
   2a0fa:	4632      	mov	r2, r6
   2a0fc:	6801      	ldr	r1, [r0, #0]
   2a0fe:	4819      	ldr	r0, [pc, #100]	; (2a164 <dfu_target_modem_init+0x1b0>)
   2a100:	e7ee      	b.n	2a0e0 <dfu_target_modem_init+0x12c>
	} else if (offset != 0) {
   2a102:	2900      	cmp	r1, #0
   2a104:	d0f5      	beq.n	2a0f2 <dfu_target_modem_init+0x13e>
		LOG_INF("Setting offset to 0x%x", offset);
   2a106:	f044 0403 	orr.w	r4, r4, #3
   2a10a:	4622      	mov	r2, r4
   2a10c:	4817      	ldr	r0, [pc, #92]	; (2a16c <dfu_target_modem_init+0x1b8>)
   2a10e:	f00b ff96 	bl	3603e <log_1>
		len = sizeof(offset);
   2a112:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2a114:	6828      	ldr	r0, [r5, #0]
		len = sizeof(offset);
   2a116:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2a118:	2207      	movs	r2, #7
   2a11a:	9300      	str	r3, [sp, #0]
   2a11c:	f240 2103 	movw	r1, #515	; 0x203
   2a120:	4633      	mov	r3, r6
   2a122:	f00c fc49 	bl	369b8 <z_impl_zsock_setsockopt>
		if (err != 0) {
   2a126:	2800      	cmp	r0, #0
   2a128:	d0e3      	beq.n	2a0f2 <dfu_target_modem_init+0x13e>
			LOG_INF("Error while setting offset: %d", offset);
   2a12a:	4622      	mov	r2, r4
   2a12c:	6831      	ldr	r1, [r6, #0]
   2a12e:	4810      	ldr	r0, [pc, #64]	; (2a170 <dfu_target_modem_init+0x1bc>)
   2a130:	f00b ff85 	bl	3603e <log_1>
   2a134:	e7dd      	b.n	2a0f2 <dfu_target_modem_init+0x13e>
   2a136:	bf00      	nop
   2a138:	200236c8 	.word	0x200236c8
   2a13c:	00039a98 	.word	0x00039a98
   2a140:	00039a50 	.word	0x00039a50
   2a144:	200236cc 	.word	0x200236cc
   2a148:	0003cd69 	.word	0x0003cd69
   2a14c:	0003cded 	.word	0x0003cded
   2a150:	0003ce1a 	.word	0x0003ce1a
   2a154:	0003cd8a 	.word	0x0003cd8a
   2a158:	0003cda3 	.word	0x0003cda3
   2a15c:	0003cdcd 	.word	0x0003cdcd
   2a160:	0003cdd2 	.word	0x0003cdd2
   2a164:	0003cdfd 	.word	0x0003cdfd
   2a168:	200236d0 	.word	0x200236d0
   2a16c:	0003ce49 	.word	0x0003ce49
   2a170:	0003ce60 	.word	0x0003ce60

0002a174 <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   2a174:	4b02      	ldr	r3, [pc, #8]	; (2a180 <dfu_target_modem_offset_get+0xc>)
   2a176:	681b      	ldr	r3, [r3, #0]
   2a178:	6003      	str	r3, [r0, #0]
	return 0;
}
   2a17a:	2000      	movs	r0, #0
   2a17c:	4770      	bx	lr
   2a17e:	bf00      	nop
   2a180:	200236d0 	.word	0x200236d0

0002a184 <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   2a184:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int err = 0;
	int sent = 0;
   2a188:	2400      	movs	r4, #0
{
   2a18a:	4607      	mov	r7, r0
   2a18c:	460d      	mov	r5, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2a18e:	4626      	mov	r6, r4
	int modem_error = 0;
	int send_result = 0;

	while (send_result >= 0) {
		send_result = send(fd, (((uint8_t *)buf) + sent),
   2a190:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2a234 <dfu_target_modem_write+0xb0>
   2a194:	f8d8 0000 	ldr.w	r0, [r8]
   2a198:	2300      	movs	r3, #0
   2a19a:	e9cd 6600 	strd	r6, r6, [sp]
   2a19e:	1b2a      	subs	r2, r5, r4
   2a1a0:	1939      	adds	r1, r7, r4
   2a1a2:	f00c fbad 	bl	36900 <z_impl_zsock_sendto>
				   (len - sent), 0);
		if (send_result > 0) {
   2a1a6:	2800      	cmp	r0, #0
   2a1a8:	dd0a      	ble.n	2a1c0 <dfu_target_modem_write+0x3c>
			sent += send_result;
   2a1aa:	4404      	add	r4, r0
			if (sent >= len) {
   2a1ac:	42ac      	cmp	r4, r5
   2a1ae:	d3f1      	bcc.n	2a194 <dfu_target_modem_write+0x10>
				offset += len;
				return 0;
   2a1b0:	2000      	movs	r0, #0
				offset += len;
   2a1b2:	4b1c      	ldr	r3, [pc, #112]	; (2a224 <dfu_target_modem_write+0xa0>)
   2a1b4:	6819      	ldr	r1, [r3, #0]
   2a1b6:	4429      	add	r1, r5
   2a1b8:	6019      	str	r1, [r3, #0]
			return 0;
		}
	default:
		return -EFAULT;
	}
}
   2a1ba:	b002      	add	sp, #8
   2a1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (send_result >= 0) {
   2a1c0:	d0e8      	beq.n	2a194 <dfu_target_modem_write+0x10>
	if (errno != ENOEXEC) {
   2a1c2:	f00c fe34 	bl	36e2e <__errno>
   2a1c6:	6803      	ldr	r3, [r0, #0]
   2a1c8:	2b08      	cmp	r3, #8
   2a1ca:	d128      	bne.n	2a21e <dfu_target_modem_write+0x9a>
	modem_error = get_modem_error();
   2a1cc:	f7ff fe4c 	bl	29e68 <get_modem_error>
   2a1d0:	4c15      	ldr	r4, [pc, #84]	; (2a228 <dfu_target_modem_write+0xa4>)
   2a1d2:	4b16      	ldr	r3, [pc, #88]	; (2a22c <dfu_target_modem_write+0xa8>)
   2a1d4:	4606      	mov	r6, r0
   2a1d6:	1ae4      	subs	r4, r4, r3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2a1d8:	f00c fe29 	bl	36e2e <__errno>
   2a1dc:	08e4      	lsrs	r4, r4, #3
   2a1de:	01a4      	lsls	r4, r4, #6
   2a1e0:	f044 0401 	orr.w	r4, r4, #1
   2a1e4:	6801      	ldr	r1, [r0, #0]
   2a1e6:	4623      	mov	r3, r4
   2a1e8:	4632      	mov	r2, r6
   2a1ea:	4811      	ldr	r0, [pc, #68]	; (2a230 <dfu_target_modem_write+0xac>)
   2a1ec:	f00b ff3e 	bl	3606c <log_2>
	switch (modem_error) {
   2a1f0:	f116 0f0b 	cmn.w	r6, #11
   2a1f4:	d004      	beq.n	2a200 <dfu_target_modem_write+0x7c>
   2a1f6:	f116 0f09 	cmn.w	r6, #9
   2a1fa:	d00d      	beq.n	2a218 <dfu_target_modem_write+0x94>
   2a1fc:	360e      	adds	r6, #14
   2a1fe:	d10e      	bne.n	2a21e <dfu_target_modem_write+0x9a>
		delete_banked_modem_fw();
   2a200:	f7ff fe5c 	bl	29ebc <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   2a204:	4629      	mov	r1, r5
   2a206:	4638      	mov	r0, r7
   2a208:	f7ff ffbc 	bl	2a184 <dfu_target_modem_write>
			return 0;
   2a20c:	2800      	cmp	r0, #0
   2a20e:	bfb4      	ite	lt
   2a210:	f06f 0015 	mvnlt.w	r0, #21
   2a214:	2000      	movge	r0, #0
   2a216:	e7d0      	b.n	2a1ba <dfu_target_modem_write+0x36>
		return -EINVAL;
   2a218:	f06f 0015 	mvn.w	r0, #21
   2a21c:	e7cd      	b.n	2a1ba <dfu_target_modem_write+0x36>
	switch (modem_error) {
   2a21e:	f06f 000d 	mvn.w	r0, #13
   2a222:	e7ca      	b.n	2a1ba <dfu_target_modem_write+0x36>
   2a224:	200236d0 	.word	0x200236d0
   2a228:	00039a98 	.word	0x00039a98
   2a22c:	00039a50 	.word	0x00039a50
   2a230:	0003ce7f 	.word	0x0003ce7f
   2a234:	200236cc 	.word	0x200236cc

0002a238 <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   2a238:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a23a:	4c1c      	ldr	r4, [pc, #112]	; (2a2ac <dfu_target_modem_done+0x74>)
   2a23c:	4b1c      	ldr	r3, [pc, #112]	; (2a2b0 <dfu_target_modem_done+0x78>)
   2a23e:	4d1d      	ldr	r5, [pc, #116]	; (2a2b4 <dfu_target_modem_done+0x7c>)
   2a240:	1ae4      	subs	r4, r4, r3
   2a242:	08e4      	lsrs	r4, r4, #3
   2a244:	01a4      	lsls	r4, r4, #6
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   2a246:	f044 0103 	orr.w	r1, r4, #3
	int err = 0;

	if (successful) {
   2a24a:	b348      	cbz	r0, 2a2a0 <dfu_target_modem_done+0x68>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   2a24c:	481a      	ldr	r0, [pc, #104]	; (2a2b8 <dfu_target_modem_done+0x80>)
   2a24e:	f00b fee7 	bl	36020 <log_0>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   2a252:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2a254:	2300      	movs	r3, #0
   2a256:	f240 2103 	movw	r1, #515	; 0x203
   2a25a:	2204      	movs	r2, #4
   2a25c:	9300      	str	r3, [sp, #0]
   2a25e:	f00c fbab 	bl	369b8 <z_impl_zsock_setsockopt>
	if (err < 0) {
   2a262:	1e01      	subs	r1, r0, #0
   2a264:	da0f      	bge.n	2a286 <dfu_target_modem_done+0x4e>
   2a266:	9103      	str	r1, [sp, #12]
		if (errno == ENOEXEC) {
   2a268:	f00c fde1 	bl	36e2e <__errno>
   2a26c:	6803      	ldr	r3, [r0, #0]
   2a26e:	9903      	ldr	r1, [sp, #12]
   2a270:	2b08      	cmp	r3, #8
   2a272:	f044 0601 	orr.w	r6, r4, #1
   2a276:	d102      	bne.n	2a27e <dfu_target_modem_done+0x46>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   2a278:	f7ff fdf6 	bl	29e68 <get_modem_error>
   2a27c:	4601      	mov	r1, r0
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   2a27e:	4632      	mov	r2, r6
   2a280:	480e      	ldr	r0, [pc, #56]	; (2a2bc <dfu_target_modem_done+0x84>)
   2a282:	f00b fedc 	bl	3603e <log_1>
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   2a286:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   2a288:	f00c facd 	bl	36826 <z_impl_zsock_close>
	if (err < 0) {
   2a28c:	1e05      	subs	r5, r0, #0
   2a28e:	da0b      	bge.n	2a2a8 <dfu_target_modem_done+0x70>
		LOG_ERR("Failed to close modem DFU socket.");
   2a290:	480b      	ldr	r0, [pc, #44]	; (2a2c0 <dfu_target_modem_done+0x88>)
   2a292:	f044 0101 	orr.w	r1, r4, #1
   2a296:	f00b fec3 	bl	36020 <log_0>
		return err;
	}

	return 0;
}
   2a29a:	4628      	mov	r0, r5
   2a29c:	b004      	add	sp, #16
   2a29e:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Modem upgrade aborted.");
   2a2a0:	4808      	ldr	r0, [pc, #32]	; (2a2c4 <dfu_target_modem_done+0x8c>)
   2a2a2:	f00b febd 	bl	36020 <log_0>
   2a2a6:	e7ee      	b.n	2a286 <dfu_target_modem_done+0x4e>
	return 0;
   2a2a8:	2500      	movs	r5, #0
   2a2aa:	e7f6      	b.n	2a29a <dfu_target_modem_done+0x62>
   2a2ac:	00039a98 	.word	0x00039a98
   2a2b0:	00039a50 	.word	0x00039a50
   2a2b4:	200236cc 	.word	0x200236cc
   2a2b8:	0003cea7 	.word	0x0003cea7
   2a2bc:	0003ced6 	.word	0x0003ced6
   2a2c0:	0003cf11 	.word	0x0003cf11
   2a2c4:	0003cefa 	.word	0x0003cefa

0002a2c8 <reset_flash_context>:

	return 0;
}

static void reset_flash_context(void)
{
   2a2c8:	b508      	push	{r3, lr}
	/* Need to set bytes_written to 0 */
	int err = flash_img_init(&flash_img);
   2a2ca:	4808      	ldr	r0, [pc, #32]	; (2a2ec <reset_flash_context+0x24>)
   2a2cc:	f00c fa95 	bl	367fa <flash_img_init>

	if (err) {
   2a2d0:	b158      	cbz	r0, 2a2ea <reset_flash_context+0x22>
   2a2d2:	4b07      	ldr	r3, [pc, #28]	; (2a2f0 <reset_flash_context+0x28>)
   2a2d4:	4907      	ldr	r1, [pc, #28]	; (2a2f4 <reset_flash_context+0x2c>)
		LOG_ERR("Unable to re-initialize flash_img");
   2a2d6:	4808      	ldr	r0, [pc, #32]	; (2a2f8 <reset_flash_context+0x30>)
   2a2d8:	1ac9      	subs	r1, r1, r3
   2a2da:	08c9      	lsrs	r1, r1, #3
   2a2dc:	0189      	lsls	r1, r1, #6
   2a2de:	f041 0101 	orr.w	r1, r1, #1
	}
	err = store_flash_img_context();
	if (err != 0) {
		LOG_ERR("Unable to reset write progress: %d", err);
	}
}
   2a2e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Unable to re-initialize flash_img");
   2a2e6:	f00b be9b 	b.w	36020 <log_0>
}
   2a2ea:	bd08      	pop	{r3, pc}
   2a2ec:	200236d4 	.word	0x200236d4
   2a2f0:	00039a50 	.word	0x00039a50
   2a2f4:	00039a90 	.word	0x00039a90
   2a2f8:	0003cf44 	.word	0x0003cf44

0002a2fc <dfu_target_mcuboot_identify>:
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   2a2fc:	6800      	ldr	r0, [r0, #0]
}
   2a2fe:	4b02      	ldr	r3, [pc, #8]	; (2a308 <dfu_target_mcuboot_identify+0xc>)
   2a300:	1ac3      	subs	r3, r0, r3
   2a302:	4258      	negs	r0, r3
   2a304:	4158      	adcs	r0, r3
   2a306:	4770      	bx	lr
   2a308:	96f3b83d 	.word	0x96f3b83d

0002a30c <dfu_target_mcuboot_init>:
{
   2a30c:	b538      	push	{r3, r4, r5, lr}
   2a30e:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   2a310:	4812      	ldr	r0, [pc, #72]	; (2a35c <dfu_target_mcuboot_init+0x50>)
   2a312:	f00c fa72 	bl	367fa <flash_img_init>
	if (err != 0) {
   2a316:	4604      	mov	r4, r0
   2a318:	b160      	cbz	r0, 2a334 <dfu_target_mcuboot_init+0x28>
   2a31a:	4a11      	ldr	r2, [pc, #68]	; (2a360 <dfu_target_mcuboot_init+0x54>)
   2a31c:	4b11      	ldr	r3, [pc, #68]	; (2a364 <dfu_target_mcuboot_init+0x58>)
		LOG_ERR("flash_img_init error %d", err);
   2a31e:	4601      	mov	r1, r0
   2a320:	1ad2      	subs	r2, r2, r3
   2a322:	08d2      	lsrs	r2, r2, #3
   2a324:	0192      	lsls	r2, r2, #6
   2a326:	4810      	ldr	r0, [pc, #64]	; (2a368 <dfu_target_mcuboot_init+0x5c>)
   2a328:	f042 0201 	orr.w	r2, r2, #1
   2a32c:	f00b fe87 	bl	3603e <log_1>
}
   2a330:	4620      	mov	r0, r4
   2a332:	bd38      	pop	{r3, r4, r5, pc}
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   2a334:	f5b5 2ff0 	cmp.w	r5, #491520	; 0x78000
   2a338:	d9fa      	bls.n	2a330 <dfu_target_mcuboot_init+0x24>
   2a33a:	4a0a      	ldr	r2, [pc, #40]	; (2a364 <dfu_target_mcuboot_init+0x58>)
   2a33c:	4b08      	ldr	r3, [pc, #32]	; (2a360 <dfu_target_mcuboot_init+0x54>)
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   2a33e:	4629      	mov	r1, r5
   2a340:	1a9b      	subs	r3, r3, r2
   2a342:	08db      	lsrs	r3, r3, #3
   2a344:	019b      	lsls	r3, r3, #6
   2a346:	f44f 22f0 	mov.w	r2, #491520	; 0x78000
   2a34a:	4808      	ldr	r0, [pc, #32]	; (2a36c <dfu_target_mcuboot_init+0x60>)
   2a34c:	f043 0301 	orr.w	r3, r3, #1
   2a350:	f00b fe8c 	bl	3606c <log_2>
		return -EFBIG;
   2a354:	f06f 041a 	mvn.w	r4, #26
   2a358:	e7ea      	b.n	2a330 <dfu_target_mcuboot_init+0x24>
   2a35a:	bf00      	nop
   2a35c:	200236d4 	.word	0x200236d4
   2a360:	00039a90 	.word	0x00039a90
   2a364:	00039a50 	.word	0x00039a50
   2a368:	0003cf66 	.word	0x0003cf66
   2a36c:	0003cf7e 	.word	0x0003cf7e

0002a370 <dfu_target_mcuboot_offset_get>:
{
   2a370:	b510      	push	{r4, lr}
   2a372:	4604      	mov	r4, r0
	*out = flash_img_bytes_written(&flash_img);
   2a374:	4802      	ldr	r0, [pc, #8]	; (2a380 <dfu_target_mcuboot_offset_get+0x10>)
   2a376:	f00c fa1b 	bl	367b0 <flash_img_bytes_written>
   2a37a:	6020      	str	r0, [r4, #0]
}
   2a37c:	2000      	movs	r0, #0
   2a37e:	bd10      	pop	{r4, pc}
   2a380:	200236d4 	.word	0x200236d4

0002a384 <dfu_target_mcuboot_write>:
{
   2a384:	460a      	mov	r2, r1
   2a386:	b510      	push	{r4, lr}
	int err = flash_img_buffered_write(&flash_img, (uint8_t *)buf, len, false);
   2a388:	4601      	mov	r1, r0
   2a38a:	2300      	movs	r3, #0
   2a38c:	4808      	ldr	r0, [pc, #32]	; (2a3b0 <dfu_target_mcuboot_write+0x2c>)
   2a38e:	f00c f9f2 	bl	36776 <flash_img_buffered_write>
	if (err != 0) {
   2a392:	4604      	mov	r4, r0
   2a394:	b150      	cbz	r0, 2a3ac <dfu_target_mcuboot_write+0x28>
   2a396:	4a07      	ldr	r2, [pc, #28]	; (2a3b4 <dfu_target_mcuboot_write+0x30>)
   2a398:	4b07      	ldr	r3, [pc, #28]	; (2a3b8 <dfu_target_mcuboot_write+0x34>)
		LOG_ERR("flash_img_buffered_write error %d", err);
   2a39a:	4601      	mov	r1, r0
   2a39c:	1ad2      	subs	r2, r2, r3
   2a39e:	08d2      	lsrs	r2, r2, #3
   2a3a0:	0192      	lsls	r2, r2, #6
   2a3a2:	4806      	ldr	r0, [pc, #24]	; (2a3bc <dfu_target_mcuboot_write+0x38>)
   2a3a4:	f042 0201 	orr.w	r2, r2, #1
   2a3a8:	f00b fe49 	bl	3603e <log_1>
}
   2a3ac:	4620      	mov	r0, r4
   2a3ae:	bd10      	pop	{r4, pc}
   2a3b0:	200236d4 	.word	0x200236d4
   2a3b4:	00039a90 	.word	0x00039a90
   2a3b8:	00039a50 	.word	0x00039a50
   2a3bc:	0003cfb0 	.word	0x0003cfb0

0002a3c0 <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   2a3c0:	b538      	push	{r3, r4, r5, lr}
   2a3c2:	4d17      	ldr	r5, [pc, #92]	; (2a420 <dfu_target_mcuboot_done+0x60>)
   2a3c4:	4b17      	ldr	r3, [pc, #92]	; (2a424 <dfu_target_mcuboot_done+0x64>)
   2a3c6:	1aed      	subs	r5, r5, r3
   2a3c8:	08ed      	lsrs	r5, r5, #3
   2a3ca:	01ad      	lsls	r5, r5, #6
	int err = 0;

	if (successful) {
   2a3cc:	b318      	cbz	r0, 2a416 <dfu_target_mcuboot_done+0x56>
		err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   2a3ce:	2200      	movs	r2, #0
   2a3d0:	2301      	movs	r3, #1
   2a3d2:	4611      	mov	r1, r2
   2a3d4:	4814      	ldr	r0, [pc, #80]	; (2a428 <dfu_target_mcuboot_done+0x68>)
   2a3d6:	f00c f9ce 	bl	36776 <flash_img_buffered_write>
		if (err != 0) {
   2a3da:	4604      	mov	r4, r0
   2a3dc:	b148      	cbz	r0, 2a3f2 <dfu_target_mcuboot_done+0x32>
			LOG_ERR("flash_img_buffered_write error %d", err);
   2a3de:	4601      	mov	r1, r0
   2a3e0:	4812      	ldr	r0, [pc, #72]	; (2a42c <dfu_target_mcuboot_done+0x6c>)
   2a3e2:	f045 0201 	orr.w	r2, r5, #1
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   2a3e6:	f00b fe2a 	bl	3603e <log_1>
			reset_flash_context();
   2a3ea:	f7ff ff6d 	bl	2a2c8 <reset_flash_context>
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	reset_flash_context();
	return err;
}
   2a3ee:	4620      	mov	r0, r4
   2a3f0:	bd38      	pop	{r3, r4, r5, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   2a3f2:	f7f9 fe8f 	bl	24114 <boot_request_upgrade>
		if (err != 0) {
   2a3f6:	4604      	mov	r4, r0
   2a3f8:	b120      	cbz	r0, 2a404 <dfu_target_mcuboot_done+0x44>
			LOG_ERR("boot_request_upgrade error %d", err);
   2a3fa:	4601      	mov	r1, r0
   2a3fc:	f045 0201 	orr.w	r2, r5, #1
   2a400:	480b      	ldr	r0, [pc, #44]	; (2a430 <dfu_target_mcuboot_done+0x70>)
   2a402:	e7f0      	b.n	2a3e6 <dfu_target_mcuboot_done+0x26>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   2a404:	480b      	ldr	r0, [pc, #44]	; (2a434 <dfu_target_mcuboot_done+0x74>)
   2a406:	f045 0103 	orr.w	r1, r5, #3
		LOG_INF("MCUBoot image upgrade aborted.");
   2a40a:	f00b fe09 	bl	36020 <log_0>
	return err;
   2a40e:	2400      	movs	r4, #0
	reset_flash_context();
   2a410:	f7ff ff5a 	bl	2a2c8 <reset_flash_context>
	return err;
   2a414:	e7eb      	b.n	2a3ee <dfu_target_mcuboot_done+0x2e>
		LOG_INF("MCUBoot image upgrade aborted.");
   2a416:	4808      	ldr	r0, [pc, #32]	; (2a438 <dfu_target_mcuboot_done+0x78>)
   2a418:	f045 0103 	orr.w	r1, r5, #3
   2a41c:	e7f5      	b.n	2a40a <dfu_target_mcuboot_done+0x4a>
   2a41e:	bf00      	nop
   2a420:	00039a90 	.word	0x00039a90
   2a424:	00039a50 	.word	0x00039a50
   2a428:	200236d4 	.word	0x200236d4
   2a42c:	0003cfb0 	.word	0x0003cfb0
   2a430:	0003cfd2 	.word	0x0003cfd2
   2a434:	0003cff0 	.word	0x0003cff0
   2a438:	0003d02b 	.word	0x0003d02b

0002a43c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   2a43c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2a440:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   2a442:	4c21      	ldr	r4, [pc, #132]	; (2a4c8 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   2a444:	4e21      	ldr	r6, [pc, #132]	; (2a4cc <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2a446:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   2a44a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2a4d4 <check_ext_api_requests+0x98>
{
   2a44e:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2a450:	45a8      	cmp	r8, r5
   2a452:	d803      	bhi.n	2a45c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   2a454:	2000      	movs	r0, #0
   2a456:	b005      	add	sp, #20
   2a458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   2a45c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a45e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2a462:	681f      	ldr	r7, [r3, #0]
   2a464:	ab01      	add	r3, sp, #4
   2a466:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   2a46a:	220c      	movs	r2, #12
   2a46c:	4619      	mov	r1, r3
   2a46e:	4638      	mov	r0, r7
   2a470:	f00e fb57 	bl	38b22 <memcmp>
   2a474:	b990      	cbnz	r0, 2a49c <check_ext_api_requests+0x60>
   2a476:	b18f      	cbz	r7, 2a49c <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2a478:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   2a47a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2a47c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   2a47e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2a480:	4291      	cmp	r1, r2
   2a482:	d10b      	bne.n	2a49c <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   2a484:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   2a486:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   2a488:	4291      	cmp	r1, r2
   2a48a:	d807      	bhi.n	2a49c <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   2a48c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   2a48e:	4291      	cmp	r1, r2
   2a490:	d904      	bls.n	2a49c <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   2a492:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2a494:	695b      	ldr	r3, [r3, #20]
   2a496:	ea32 0303 	bics.w	r3, r2, r3
   2a49a:	d00a      	beq.n	2a4b2 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   2a49c:	6a27      	ldr	r7, [r4, #32]
   2a49e:	b167      	cbz	r7, 2a4ba <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   2a4a0:	480b      	ldr	r0, [pc, #44]	; (2a4d0 <check_ext_api_requests+0x94>)
   2a4a2:	f00b f94b 	bl	3573c <printk>
			k_panic();
   2a4a6:	4040      	eors	r0, r0
   2a4a8:	f380 8811 	msr	BASEPRI, r0
   2a4ac:	f04f 0004 	mov.w	r0, #4
   2a4b0:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   2a4b2:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2a4b4:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   2a4b6:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2a4b8:	e7ca      	b.n	2a450 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   2a4ba:	4648      	mov	r0, r9
   2a4bc:	f00b f93e 	bl	3573c <printk>
			*ext_api_req->ext_api = NULL;
   2a4c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a4c2:	601f      	str	r7, [r3, #0]
   2a4c4:	e7f5      	b.n	2a4b2 <check_ext_api_requests+0x76>
   2a4c6:	bf00      	nop
   2a4c8:	0001c43c 	.word	0x0001c43c
   2a4cc:	00039b8c 	.word	0x00039b8c
   2a4d0:	0003d05d 	.word	0x0003d05d
   2a4d4:	0003d086 	.word	0x0003d086

0002a4d8 <packet_free_cb>:
   2a4d8:	b510      	push	{r4, lr}
   2a4da:	4604      	mov	r4, r0
   2a4dc:	6800      	ldr	r0, [r0, #0]
   2a4de:	f004 fef7 	bl	2f2d0 <rpc_logobj_client_data_free>
   2a4e2:	68a0      	ldr	r0, [r4, #8]
   2a4e4:	b118      	cbz	r0, 2a4ee <packet_free_cb+0x16>
   2a4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a4ea:	f007 bd21 	b.w	31f30 <nrf_free>
   2a4ee:	bd10      	pop	{r4, pc}

0002a4f0 <logobj_event_handler>:
   2a4f0:	b530      	push	{r4, r5, lr}
   2a4f2:	4b3b      	ldr	r3, [pc, #236]	; (2a5e0 <logobj_event_handler+0xf0>)
   2a4f4:	b085      	sub	sp, #20
   2a4f6:	681d      	ldr	r5, [r3, #0]
   2a4f8:	2d00      	cmp	r5, #0
   2a4fa:	d04c      	beq.n	2a596 <logobj_event_handler+0xa6>
   2a4fc:	f248 0302 	movw	r3, #32770	; 0x8002
   2a500:	4299      	cmp	r1, r3
   2a502:	d053      	beq.n	2a5ac <logobj_event_handler+0xbc>
   2a504:	d91c      	bls.n	2a540 <logobj_event_handler+0x50>
   2a506:	f248 0303 	movw	r3, #32771	; 0x8003
   2a50a:	4299      	cmp	r1, r3
   2a50c:	d05a      	beq.n	2a5c4 <logobj_event_handler+0xd4>
   2a50e:	f249 0301 	movw	r3, #36865	; 0x9001
   2a512:	4299      	cmp	r1, r3
   2a514:	d147      	bne.n	2a5a6 <logobj_event_handler+0xb6>
   2a516:	2400      	movs	r4, #0
   2a518:	6843      	ldr	r3, [r0, #4]
   2a51a:	6802      	ldr	r2, [r0, #0]
   2a51c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   2a520:	e9cd 2300 	strd	r2, r3, [sp]
   2a524:	69e8      	ldr	r0, [r5, #28]
   2a526:	4669      	mov	r1, sp
   2a528:	6803      	ldr	r3, [r0, #0]
   2a52a:	685b      	ldr	r3, [r3, #4]
   2a52c:	4798      	blx	r3
   2a52e:	3001      	adds	r0, #1
   2a530:	d04e      	beq.n	2a5d0 <logobj_event_handler+0xe0>
   2a532:	4620      	mov	r0, r4
   2a534:	682b      	ldr	r3, [r5, #0]
   2a536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2a53a:	602b      	str	r3, [r5, #0]
   2a53c:	b005      	add	sp, #20
   2a53e:	bd30      	pop	{r4, r5, pc}
   2a540:	f248 0301 	movw	r3, #32769	; 0x8001
   2a544:	4299      	cmp	r1, r3
   2a546:	d12e      	bne.n	2a5a6 <logobj_event_handler+0xb6>
   2a548:	68c3      	ldr	r3, [r0, #12]
   2a54a:	2b00      	cmp	r3, #0
   2a54c:	d135      	bne.n	2a5ba <logobj_event_handler+0xca>
   2a54e:	6828      	ldr	r0, [r5, #0]
   2a550:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2a554:	d03e      	beq.n	2a5d4 <logobj_event_handler+0xe4>
   2a556:	682b      	ldr	r3, [r5, #0]
   2a558:	b29b      	uxth	r3, r3
   2a55a:	2b01      	cmp	r3, #1
   2a55c:	d105      	bne.n	2a56a <logobj_event_handler+0x7a>
   2a55e:	682b      	ldr	r3, [r5, #0]
   2a560:	0c1b      	lsrs	r3, r3, #16
   2a562:	041b      	lsls	r3, r3, #16
   2a564:	f043 0302 	orr.w	r3, r3, #2
   2a568:	602b      	str	r3, [r5, #0]
   2a56a:	4b1e      	ldr	r3, [pc, #120]	; (2a5e4 <logobj_event_handler+0xf4>)
   2a56c:	781a      	ldrb	r2, [r3, #0]
   2a56e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2a572:	2a00      	cmp	r2, #0
   2a574:	d031      	beq.n	2a5da <logobj_event_handler+0xea>
   2a576:	4a1c      	ldr	r2, [pc, #112]	; (2a5e8 <logobj_event_handler+0xf8>)
   2a578:	7811      	ldrb	r1, [r2, #0]
   2a57a:	b909      	cbnz	r1, 2a580 <logobj_event_handler+0x90>
   2a57c:	2101      	movs	r1, #1
   2a57e:	7011      	strb	r1, [r2, #0]
   2a580:	2000      	movs	r0, #0
   2a582:	7018      	strb	r0, [r3, #0]
   2a584:	682b      	ldr	r3, [r5, #0]
   2a586:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2a58a:	602b      	str	r3, [r5, #0]
   2a58c:	682b      	ldr	r3, [r5, #0]
   2a58e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2a592:	602b      	str	r3, [r5, #0]
   2a594:	e7d2      	b.n	2a53c <logobj_event_handler+0x4c>
   2a596:	6800      	ldr	r0, [r0, #0]
   2a598:	2800      	cmp	r0, #0
   2a59a:	d0cf      	beq.n	2a53c <logobj_event_handler+0x4c>
   2a59c:	f004 fe98 	bl	2f2d0 <rpc_logobj_client_data_free>
   2a5a0:	4628      	mov	r0, r5
   2a5a2:	b005      	add	sp, #20
   2a5a4:	bd30      	pop	{r4, r5, pc}
   2a5a6:	2000      	movs	r0, #0
   2a5a8:	b005      	add	sp, #20
   2a5aa:	bd30      	pop	{r4, r5, pc}
   2a5ac:	682b      	ldr	r3, [r5, #0]
   2a5ae:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   2a5b2:	d00b      	beq.n	2a5cc <logobj_event_handler+0xdc>
   2a5b4:	68c0      	ldr	r0, [r0, #12]
   2a5b6:	2800      	cmp	r0, #0
   2a5b8:	d0e4      	beq.n	2a584 <logobj_event_handler+0x94>
   2a5ba:	230e      	movs	r3, #14
   2a5bc:	2000      	movs	r0, #0
   2a5be:	606b      	str	r3, [r5, #4]
   2a5c0:	b005      	add	sp, #20
   2a5c2:	bd30      	pop	{r4, r5, pc}
   2a5c4:	68c3      	ldr	r3, [r0, #12]
   2a5c6:	2b01      	cmp	r3, #1
   2a5c8:	d1a5      	bne.n	2a516 <logobj_event_handler+0x26>
   2a5ca:	e7f6      	b.n	2a5ba <logobj_event_handler+0xca>
   2a5cc:	4618      	mov	r0, r3
   2a5ce:	e7b5      	b.n	2a53c <logobj_event_handler+0x4c>
   2a5d0:	2002      	movs	r0, #2
   2a5d2:	e7b3      	b.n	2a53c <logobj_event_handler+0x4c>
   2a5d4:	230e      	movs	r3, #14
   2a5d6:	606b      	str	r3, [r5, #4]
   2a5d8:	e7b0      	b.n	2a53c <logobj_event_handler+0x4c>
   2a5da:	4a03      	ldr	r2, [pc, #12]	; (2a5e8 <logobj_event_handler+0xf8>)
   2a5dc:	7011      	strb	r1, [r2, #0]
   2a5de:	e7cf      	b.n	2a580 <logobj_event_handler+0x90>
   2a5e0:	20023900 	.word	0x20023900
   2a5e4:	2002c6da 	.word	0x2002c6da
   2a5e8:	2002c6db 	.word	0x2002c6db

0002a5ec <logobj_interface_init>:
   2a5ec:	2300      	movs	r3, #0
   2a5ee:	b510      	push	{r4, lr}
   2a5f0:	4808      	ldr	r0, [pc, #32]	; (2a614 <logobj_interface_init+0x28>)
   2a5f2:	4c09      	ldr	r4, [pc, #36]	; (2a618 <logobj_interface_init+0x2c>)
   2a5f4:	4909      	ldr	r1, [pc, #36]	; (2a61c <logobj_interface_init+0x30>)
   2a5f6:	4a0a      	ldr	r2, [pc, #40]	; (2a620 <logobj_interface_init+0x34>)
   2a5f8:	7023      	strb	r3, [r4, #0]
   2a5fa:	6003      	str	r3, [r0, #0]
   2a5fc:	700b      	strb	r3, [r1, #0]
   2a5fe:	6013      	str	r3, [r2, #0]
   2a600:	f004 fe2a 	bl	2f258 <rpc_logobj_client_init>
   2a604:	b918      	cbnz	r0, 2a60e <logobj_interface_init+0x22>
   2a606:	2201      	movs	r2, #1
   2a608:	4b06      	ldr	r3, [pc, #24]	; (2a624 <logobj_interface_init+0x38>)
   2a60a:	701a      	strb	r2, [r3, #0]
   2a60c:	bd10      	pop	{r4, pc}
   2a60e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a612:	bd10      	pop	{r4, pc}
   2a614:	20023900 	.word	0x20023900
   2a618:	2002c6db 	.word	0x2002c6db
   2a61c:	2002c6da 	.word	0x2002c6da
   2a620:	200238fc 	.word	0x200238fc
   2a624:	2002c6dc 	.word	0x2002c6dc

0002a628 <logobj_interface_open>:
   2a628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a62c:	2400      	movs	r4, #0
   2a62e:	4b5b      	ldr	r3, [pc, #364]	; (2a79c <logobj_interface_open+0x174>)
   2a630:	b084      	sub	sp, #16
   2a632:	781b      	ldrb	r3, [r3, #0]
   2a634:	9401      	str	r4, [sp, #4]
   2a636:	2b00      	cmp	r3, #0
   2a638:	f000 809f 	beq.w	2a77a <logobj_interface_open+0x152>
   2a63c:	2866      	cmp	r0, #102	; 0x66
   2a63e:	4680      	mov	r8, r0
   2a640:	f040 808f 	bne.w	2a762 <logobj_interface_open+0x13a>
   2a644:	2902      	cmp	r1, #2
   2a646:	4689      	mov	r9, r1
   2a648:	f040 808b 	bne.w	2a762 <logobj_interface_open+0x13a>
   2a64c:	f240 2305 	movw	r3, #517	; 0x205
   2a650:	429a      	cmp	r2, r3
   2a652:	4692      	mov	sl, r2
   2a654:	f040 8085 	bne.w	2a762 <logobj_interface_open+0x13a>
   2a658:	4f51      	ldr	r7, [pc, #324]	; (2a7a0 <logobj_interface_open+0x178>)
   2a65a:	683d      	ldr	r5, [r7, #0]
   2a65c:	2d00      	cmp	r5, #0
   2a65e:	f040 8086 	bne.w	2a76e <logobj_interface_open+0x146>
   2a662:	4a50      	ldr	r2, [pc, #320]	; (2a7a4 <logobj_interface_open+0x17c>)
   2a664:	a801      	add	r0, sp, #4
   2a666:	f008 f83b 	bl	326e0 <interface_socket_allocate>
   2a66a:	9b01      	ldr	r3, [sp, #4]
   2a66c:	4606      	mov	r6, r0
   2a66e:	2b00      	cmp	r3, #0
   2a670:	f000 808d 	beq.w	2a78e <logobj_interface_open+0x166>
   2a674:	4629      	mov	r1, r5
   2a676:	2204      	movs	r2, #4
   2a678:	484b      	ldr	r0, [pc, #300]	; (2a7a8 <logobj_interface_open+0x180>)
   2a67a:	603b      	str	r3, [r7, #0]
   2a67c:	f00e fa7f 	bl	38b7e <memset>
   2a680:	9c01      	ldr	r4, [sp, #4]
   2a682:	4629      	mov	r1, r5
   2a684:	e9c4 8903 	strd	r8, r9, [r4, #12]
   2a688:	f8c4 a014 	str.w	sl, [r4, #20]
   2a68c:	a802      	add	r0, sp, #8
   2a68e:	f004 fde9 	bl	2f264 <rpc_logobj_client_request_alloc>
   2a692:	2800      	cmp	r0, #0
   2a694:	d142      	bne.n	2a71c <logobj_interface_open+0xf4>
   2a696:	2201      	movs	r2, #1
   2a698:	2104      	movs	r1, #4
   2a69a:	9b02      	ldr	r3, [sp, #8]
   2a69c:	4d43      	ldr	r5, [pc, #268]	; (2a7ac <logobj_interface_open+0x184>)
   2a69e:	7358      	strb	r0, [r3, #13]
   2a6a0:	7398      	strb	r0, [r3, #14]
   2a6a2:	73d8      	strb	r0, [r3, #15]
   2a6a4:	7258      	strb	r0, [r3, #9]
   2a6a6:	7298      	strb	r0, [r3, #10]
   2a6a8:	72d8      	strb	r0, [r3, #11]
   2a6aa:	7219      	strb	r1, [r3, #8]
   2a6ac:	702a      	strb	r2, [r5, #0]
   2a6ae:	731a      	strb	r2, [r3, #12]
   2a6b0:	6822      	ldr	r2, [r4, #0]
   2a6b2:	4618      	mov	r0, r3
   2a6b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   2a6b8:	6022      	str	r2, [r4, #0]
   2a6ba:	f247 0101 	movw	r1, #28673	; 0x7001
   2a6be:	f004 fde9 	bl	2f294 <rpc_logobj_client_request_send>
   2a6c2:	bb68      	cbnz	r0, 2a720 <logobj_interface_open+0xf8>
   2a6c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2a6c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2a6ca:	2900      	cmp	r1, #0
   2a6cc:	bf08      	it	eq
   2a6ce:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2a6d2:	ab04      	add	r3, sp, #16
   2a6d4:	f843 1d04 	str.w	r1, [r3, #-4]!
   2a6d8:	4630      	mov	r0, r6
   2a6da:	4611      	mov	r1, r2
   2a6dc:	f008 f8b2 	bl	32844 <interface_socket_wait>
   2a6e0:	4604      	mov	r4, r0
   2a6e2:	b310      	cbz	r0, 2a72a <logobj_interface_open+0x102>
   2a6e4:	9a01      	ldr	r2, [sp, #4]
   2a6e6:	2e00      	cmp	r6, #0
   2a6e8:	6813      	ldr	r3, [r2, #0]
   2a6ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2a6ee:	6013      	str	r3, [r2, #0]
   2a6f0:	9a01      	ldr	r2, [sp, #4]
   2a6f2:	6813      	ldr	r3, [r2, #0]
   2a6f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2a6f8:	6013      	str	r3, [r2, #0]
   2a6fa:	9a01      	ldr	r2, [sp, #4]
   2a6fc:	6813      	ldr	r3, [r2, #0]
   2a6fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2a702:	6013      	str	r3, [r2, #0]
   2a704:	da3f      	bge.n	2a786 <logobj_interface_open+0x15e>
   2a706:	2300      	movs	r3, #0
   2a708:	4620      	mov	r0, r4
   2a70a:	603b      	str	r3, [r7, #0]
   2a70c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a710:	f7fc ff34 	bl	2757c <bsd_os_errno_set>
   2a714:	4630      	mov	r0, r6
   2a716:	b004      	add	sp, #16
   2a718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a71c:	240c      	movs	r4, #12
   2a71e:	e7e1      	b.n	2a6e4 <logobj_interface_open+0xbc>
   2a720:	9802      	ldr	r0, [sp, #8]
   2a722:	f004 fdcd 	bl	2f2c0 <rpc_logobj_client_message_free>
   2a726:	2405      	movs	r4, #5
   2a728:	e7dc      	b.n	2a6e4 <logobj_interface_open+0xbc>
   2a72a:	4630      	mov	r0, r6
   2a72c:	f008 f8fe 	bl	3292c <interface_socket_from_handle_get>
   2a730:	b120      	cbz	r0, 2a73c <logobj_interface_open+0x114>
   2a732:	6844      	ldr	r4, [r0, #4]
   2a734:	b114      	cbz	r4, 2a73c <logobj_interface_open+0x114>
   2a736:	2300      	movs	r3, #0
   2a738:	6043      	str	r3, [r0, #4]
   2a73a:	e7d3      	b.n	2a6e4 <logobj_interface_open+0xbc>
   2a73c:	4630      	mov	r0, r6
   2a73e:	9a01      	ldr	r2, [sp, #4]
   2a740:	6813      	ldr	r3, [r2, #0]
   2a742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2a746:	6013      	str	r3, [r2, #0]
   2a748:	9a01      	ldr	r2, [sp, #4]
   2a74a:	6813      	ldr	r3, [r2, #0]
   2a74c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2a750:	6013      	str	r3, [r2, #0]
   2a752:	9a01      	ldr	r2, [sp, #4]
   2a754:	6813      	ldr	r3, [r2, #0]
   2a756:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2a75a:	6013      	str	r3, [r2, #0]
   2a75c:	b004      	add	sp, #16
   2a75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a762:	2016      	movs	r0, #22
   2a764:	f7fc ff0a 	bl	2757c <bsd_os_errno_set>
   2a768:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a76c:	e7d2      	b.n	2a714 <logobj_interface_open+0xec>
   2a76e:	2001      	movs	r0, #1
   2a770:	f7fc ff04 	bl	2757c <bsd_os_errno_set>
   2a774:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a778:	e7cc      	b.n	2a714 <logobj_interface_open+0xec>
   2a77a:	2070      	movs	r0, #112	; 0x70
   2a77c:	f7fc fefe 	bl	2757c <bsd_os_errno_set>
   2a780:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a784:	e7c6      	b.n	2a714 <logobj_interface_open+0xec>
   2a786:	4630      	mov	r0, r6
   2a788:	f008 f80e 	bl	327a8 <interface_socket_free>
   2a78c:	e7bb      	b.n	2a706 <logobj_interface_open+0xde>
   2a78e:	2018      	movs	r0, #24
   2a790:	f7fc fef4 	bl	2757c <bsd_os_errno_set>
   2a794:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a798:	e7bc      	b.n	2a714 <logobj_interface_open+0xec>
   2a79a:	bf00      	nop
   2a79c:	2002c6dc 	.word	0x2002c6dc
   2a7a0:	20023900 	.word	0x20023900
   2a7a4:	0002a4d9 	.word	0x0002a4d9
   2a7a8:	200238fc 	.word	0x200238fc
   2a7ac:	2002c6da 	.word	0x2002c6da

0002a7b0 <logobj_interface_read>:
   2a7b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a7b4:	b087      	sub	sp, #28
   2a7b6:	2900      	cmp	r1, #0
   2a7b8:	d06b      	beq.n	2a892 <logobj_interface_read+0xe2>
   2a7ba:	2a00      	cmp	r2, #0
   2a7bc:	4617      	mov	r7, r2
   2a7be:	dd68      	ble.n	2a892 <logobj_interface_read+0xe2>
   2a7c0:	461d      	mov	r5, r3
   2a7c2:	4680      	mov	r8, r0
   2a7c4:	460e      	mov	r6, r1
   2a7c6:	f008 f8b1 	bl	3292c <interface_socket_from_handle_get>
   2a7ca:	4604      	mov	r4, r0
   2a7cc:	2800      	cmp	r0, #0
   2a7ce:	d066      	beq.n	2a89e <logobj_interface_read+0xee>
   2a7d0:	bb4d      	cbnz	r5, 2a826 <logobj_interface_read+0x76>
   2a7d2:	69e0      	ldr	r0, [r4, #28]
   2a7d4:	07aa      	lsls	r2, r5, #30
   2a7d6:	6803      	ldr	r3, [r0, #0]
   2a7d8:	68db      	ldr	r3, [r3, #12]
   2a7da:	d52d      	bpl.n	2a838 <logobj_interface_read+0x88>
   2a7dc:	4798      	blx	r3
   2a7de:	3001      	adds	r0, #1
   2a7e0:	d047      	beq.n	2a872 <logobj_interface_read+0xc2>
   2a7e2:	6823      	ldr	r3, [r4, #0]
   2a7e4:	69e0      	ldr	r0, [r4, #28]
   2a7e6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   2a7ea:	d044      	beq.n	2a876 <logobj_interface_read+0xc6>
   2a7ec:	2100      	movs	r1, #0
   2a7ee:	6823      	ldr	r3, [r4, #0]
   2a7f0:	462a      	mov	r2, r5
   2a7f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2a7f6:	6023      	str	r3, [r4, #0]
   2a7f8:	e9cd 1104 	strd	r1, r1, [sp, #16]
   2a7fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   2a800:	6803      	ldr	r3, [r0, #0]
   2a802:	a902      	add	r1, sp, #8
   2a804:	689b      	ldr	r3, [r3, #8]
   2a806:	4798      	blx	r3
   2a808:	4605      	mov	r5, r0
   2a80a:	69e0      	ldr	r0, [r4, #28]
   2a80c:	6803      	ldr	r3, [r0, #0]
   2a80e:	68db      	ldr	r3, [r3, #12]
   2a810:	4798      	blx	r3
   2a812:	3001      	adds	r0, #1
   2a814:	d003      	beq.n	2a81e <logobj_interface_read+0x6e>
   2a816:	6823      	ldr	r3, [r4, #0]
   2a818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2a81c:	6023      	str	r3, [r4, #0]
   2a81e:	4628      	mov	r0, r5
   2a820:	b007      	add	sp, #28
   2a822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a826:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   2a82a:	d1d2      	bne.n	2a7d2 <logobj_interface_read+0x22>
   2a82c:	202d      	movs	r0, #45	; 0x2d
   2a82e:	f7fc fea5 	bl	2757c <bsd_os_errno_set>
   2a832:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a836:	e7f2      	b.n	2a81e <logobj_interface_read+0x6e>
   2a838:	6822      	ldr	r2, [r4, #0]
   2a83a:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   2a83e:	d1cd      	bne.n	2a7dc <logobj_interface_read+0x2c>
   2a840:	4798      	blx	r3
   2a842:	1c43      	adds	r3, r0, #1
   2a844:	d1cd      	bne.n	2a7e2 <logobj_interface_read+0x32>
   2a846:	6a22      	ldr	r2, [r4, #32]
   2a848:	ab06      	add	r3, sp, #24
   2a84a:	2a00      	cmp	r2, #0
   2a84c:	bf18      	it	ne
   2a84e:	4610      	movne	r0, r2
   2a850:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2a854:	f843 0d14 	str.w	r0, [r3, #-20]!
   2a858:	4611      	mov	r1, r2
   2a85a:	4640      	mov	r0, r8
   2a85c:	f007 fff2 	bl	32844 <interface_socket_wait>
   2a860:	b158      	cbz	r0, 2a87a <logobj_interface_read+0xca>
   2a862:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a866:	f7fc fe89 	bl	2757c <bsd_os_errno_set>
   2a86a:	4628      	mov	r0, r5
   2a86c:	b007      	add	sp, #28
   2a86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a872:	2023      	movs	r0, #35	; 0x23
   2a874:	e7f5      	b.n	2a862 <logobj_interface_read+0xb2>
   2a876:	461d      	mov	r5, r3
   2a878:	e7c8      	b.n	2a80c <logobj_interface_read+0x5c>
   2a87a:	4640      	mov	r0, r8
   2a87c:	f008 f856 	bl	3292c <interface_socket_from_handle_get>
   2a880:	4603      	mov	r3, r0
   2a882:	2800      	cmp	r0, #0
   2a884:	d0ad      	beq.n	2a7e2 <logobj_interface_read+0x32>
   2a886:	6840      	ldr	r0, [r0, #4]
   2a888:	2800      	cmp	r0, #0
   2a88a:	d0aa      	beq.n	2a7e2 <logobj_interface_read+0x32>
   2a88c:	f8c3 9004 	str.w	r9, [r3, #4]
   2a890:	e7e7      	b.n	2a862 <logobj_interface_read+0xb2>
   2a892:	2016      	movs	r0, #22
   2a894:	f7fc fe72 	bl	2757c <bsd_os_errno_set>
   2a898:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a89c:	e7bf      	b.n	2a81e <logobj_interface_read+0x6e>
   2a89e:	2009      	movs	r0, #9
   2a8a0:	f7fc fe6c 	bl	2757c <bsd_os_errno_set>
   2a8a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a8a8:	e7b9      	b.n	2a81e <logobj_interface_read+0x6e>
   2a8aa:	bf00      	nop

0002a8ac <logobj_interface_write>:
   2a8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a8b0:	b082      	sub	sp, #8
   2a8b2:	2900      	cmp	r1, #0
   2a8b4:	d06b      	beq.n	2a98e <logobj_interface_write+0xe2>
   2a8b6:	2a04      	cmp	r2, #4
   2a8b8:	d169      	bne.n	2a98e <logobj_interface_write+0xe2>
   2a8ba:	461f      	mov	r7, r3
   2a8bc:	4606      	mov	r6, r0
   2a8be:	460d      	mov	r5, r1
   2a8c0:	f008 f834 	bl	3292c <interface_socket_from_handle_get>
   2a8c4:	4604      	mov	r4, r0
   2a8c6:	2800      	cmp	r0, #0
   2a8c8:	d074      	beq.n	2a9b4 <logobj_interface_write+0x108>
   2a8ca:	b1e7      	cbz	r7, 2a906 <logobj_interface_write+0x5a>
   2a8cc:	07b8      	lsls	r0, r7, #30
   2a8ce:	d56b      	bpl.n	2a9a8 <logobj_interface_write+0xfc>
   2a8d0:	6823      	ldr	r3, [r4, #0]
   2a8d2:	039b      	lsls	r3, r3, #14
   2a8d4:	d564      	bpl.n	2a9a0 <logobj_interface_write+0xf4>
   2a8d6:	2700      	movs	r7, #0
   2a8d8:	6823      	ldr	r3, [r4, #0]
   2a8da:	2100      	movs	r1, #0
   2a8dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2a8e0:	6023      	str	r3, [r4, #0]
   2a8e2:	4668      	mov	r0, sp
   2a8e4:	f8d5 8000 	ldr.w	r8, [r5]
   2a8e8:	f004 fcbc 	bl	2f264 <rpc_logobj_client_request_alloc>
   2a8ec:	b198      	cbz	r0, 2a916 <logobj_interface_write+0x6a>
   2a8ee:	200c      	movs	r0, #12
   2a8f0:	6823      	ldr	r3, [r4, #0]
   2a8f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2a8f6:	6023      	str	r3, [r4, #0]
   2a8f8:	f7fc fe40 	bl	2757c <bsd_os_errno_set>
   2a8fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a900:	b002      	add	sp, #8
   2a902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a906:	6803      	ldr	r3, [r0, #0]
   2a908:	00d9      	lsls	r1, r3, #3
   2a90a:	d4e1      	bmi.n	2a8d0 <logobj_interface_write+0x24>
   2a90c:	6803      	ldr	r3, [r0, #0]
   2a90e:	039a      	lsls	r2, r3, #14
   2a910:	d548      	bpl.n	2a9a4 <logobj_interface_write+0xf8>
   2a912:	2701      	movs	r7, #1
   2a914:	e7e0      	b.n	2a8d8 <logobj_interface_write+0x2c>
   2a916:	2504      	movs	r5, #4
   2a918:	9b00      	ldr	r3, [sp, #0]
   2a91a:	f247 0103 	movw	r1, #28675	; 0x7003
   2a91e:	f8c3 800c 	str.w	r8, [r3, #12]
   2a922:	7258      	strb	r0, [r3, #9]
   2a924:	7298      	strb	r0, [r3, #10]
   2a926:	72d8      	strb	r0, [r3, #11]
   2a928:	721d      	strb	r5, [r3, #8]
   2a92a:	4618      	mov	r0, r3
   2a92c:	f004 fcb2 	bl	2f294 <rpc_logobj_client_request_send>
   2a930:	4680      	mov	r8, r0
   2a932:	bb18      	cbnz	r0, 2a97c <logobj_interface_write+0xd0>
   2a934:	b1d7      	cbz	r7, 2a96c <logobj_interface_write+0xc0>
   2a936:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2a938:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2a93c:	2900      	cmp	r1, #0
   2a93e:	bf08      	it	eq
   2a940:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2a944:	ab02      	add	r3, sp, #8
   2a946:	f843 1d04 	str.w	r1, [r3, #-4]!
   2a94a:	4630      	mov	r0, r6
   2a94c:	4611      	mov	r1, r2
   2a94e:	f007 ff79 	bl	32844 <interface_socket_wait>
   2a952:	b120      	cbz	r0, 2a95e <logobj_interface_write+0xb2>
   2a954:	6823      	ldr	r3, [r4, #0]
   2a956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2a95a:	6023      	str	r3, [r4, #0]
   2a95c:	e7cc      	b.n	2a8f8 <logobj_interface_write+0x4c>
   2a95e:	4630      	mov	r0, r6
   2a960:	f007 ffe4 	bl	3292c <interface_socket_from_handle_get>
   2a964:	4603      	mov	r3, r0
   2a966:	b108      	cbz	r0, 2a96c <logobj_interface_write+0xc0>
   2a968:	6840      	ldr	r0, [r0, #4]
   2a96a:	b9b0      	cbnz	r0, 2a99a <logobj_interface_write+0xee>
   2a96c:	4628      	mov	r0, r5
   2a96e:	6823      	ldr	r3, [r4, #0]
   2a970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2a974:	6023      	str	r3, [r4, #0]
   2a976:	b002      	add	sp, #8
   2a978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a97c:	9800      	ldr	r0, [sp, #0]
   2a97e:	f004 fc9f 	bl	2f2c0 <rpc_logobj_client_message_free>
   2a982:	6823      	ldr	r3, [r4, #0]
   2a984:	2005      	movs	r0, #5
   2a986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2a98a:	6023      	str	r3, [r4, #0]
   2a98c:	e7b4      	b.n	2a8f8 <logobj_interface_write+0x4c>
   2a98e:	2016      	movs	r0, #22
   2a990:	f7fc fdf4 	bl	2757c <bsd_os_errno_set>
   2a994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a998:	e7b2      	b.n	2a900 <logobj_interface_write+0x54>
   2a99a:	f8c3 8004 	str.w	r8, [r3, #4]
   2a99e:	e7d9      	b.n	2a954 <logobj_interface_write+0xa8>
   2a9a0:	2073      	movs	r0, #115	; 0x73
   2a9a2:	e7a9      	b.n	2a8f8 <logobj_interface_write+0x4c>
   2a9a4:	2009      	movs	r0, #9
   2a9a6:	e7a7      	b.n	2a8f8 <logobj_interface_write+0x4c>
   2a9a8:	202d      	movs	r0, #45	; 0x2d
   2a9aa:	f7fc fde7 	bl	2757c <bsd_os_errno_set>
   2a9ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a9b2:	e7a5      	b.n	2a900 <logobj_interface_write+0x54>
   2a9b4:	2009      	movs	r0, #9
   2a9b6:	f7fc fde1 	bl	2757c <bsd_os_errno_set>
   2a9ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a9be:	e79f      	b.n	2a900 <logobj_interface_write+0x54>

0002a9c0 <logobj_interface_setopt>:
   2a9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a9c2:	2901      	cmp	r1, #1
   2a9c4:	b085      	sub	sp, #20
   2a9c6:	d06d      	beq.n	2aaa4 <logobj_interface_setopt+0xe4>
   2a9c8:	461e      	mov	r6, r3
   2a9ca:	f240 2305 	movw	r3, #517	; 0x205
   2a9ce:	4299      	cmp	r1, r3
   2a9d0:	f040 80a0 	bne.w	2ab14 <logobj_interface_setopt+0x154>
   2a9d4:	4607      	mov	r7, r0
   2a9d6:	4615      	mov	r5, r2
   2a9d8:	f007 ffa8 	bl	3292c <interface_socket_from_handle_get>
   2a9dc:	4604      	mov	r4, r0
   2a9de:	2800      	cmp	r0, #0
   2a9e0:	f000 80c3 	beq.w	2ab6a <logobj_interface_setopt+0x1aa>
   2a9e4:	2d01      	cmp	r5, #1
   2a9e6:	d019      	beq.n	2aa1c <logobj_interface_setopt+0x5c>
   2a9e8:	2d02      	cmp	r5, #2
   2a9ea:	d010      	beq.n	2aa0e <logobj_interface_setopt+0x4e>
   2a9ec:	252a      	movs	r5, #42	; 0x2a
   2a9ee:	6803      	ldr	r3, [r0, #0]
   2a9f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2a9f4:	6023      	str	r3, [r4, #0]
   2a9f6:	6823      	ldr	r3, [r4, #0]
   2a9f8:	4628      	mov	r0, r5
   2a9fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2a9fe:	6023      	str	r3, [r4, #0]
   2aa00:	f7fc fdbc 	bl	2757c <bsd_os_errno_set>
   2aa04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2aa08:	4628      	mov	r0, r5
   2aa0a:	b005      	add	sp, #20
   2aa0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aa0e:	b116      	cbz	r6, 2aa16 <logobj_interface_setopt+0x56>
   2aa10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2aa12:	2b01      	cmp	r3, #1
   2aa14:	d04e      	beq.n	2aab4 <logobj_interface_setopt+0xf4>
   2aa16:	6823      	ldr	r3, [r4, #0]
   2aa18:	2516      	movs	r5, #22
   2aa1a:	e7e9      	b.n	2a9f0 <logobj_interface_setopt+0x30>
   2aa1c:	2e00      	cmp	r6, #0
   2aa1e:	d0fa      	beq.n	2aa16 <logobj_interface_setopt+0x56>
   2aa20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2aa22:	2b04      	cmp	r3, #4
   2aa24:	d1f7      	bne.n	2aa16 <logobj_interface_setopt+0x56>
   2aa26:	2100      	movs	r1, #0
   2aa28:	a803      	add	r0, sp, #12
   2aa2a:	f004 fc1b 	bl	2f264 <rpc_logobj_client_request_alloc>
   2aa2e:	4605      	mov	r5, r0
   2aa30:	2800      	cmp	r0, #0
   2aa32:	d175      	bne.n	2ab20 <logobj_interface_setopt+0x160>
   2aa34:	9803      	ldr	r0, [sp, #12]
   2aa36:	2208      	movs	r2, #8
   2aa38:	4629      	mov	r1, r5
   2aa3a:	300c      	adds	r0, #12
   2aa3c:	f00e f89f 	bl	38b7e <memset>
   2aa40:	9803      	ldr	r0, [sp, #12]
   2aa42:	4631      	mov	r1, r6
   2aa44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2aa46:	300c      	adds	r0, #12
   2aa48:	f00e f879 	bl	38b3e <memcpy>
   2aa4c:	2308      	movs	r3, #8
   2aa4e:	9803      	ldr	r0, [sp, #12]
   2aa50:	f247 0102 	movw	r1, #28674	; 0x7002
   2aa54:	7203      	strb	r3, [r0, #8]
   2aa56:	7245      	strb	r5, [r0, #9]
   2aa58:	7285      	strb	r5, [r0, #10]
   2aa5a:	72c5      	strb	r5, [r0, #11]
   2aa5c:	6823      	ldr	r3, [r4, #0]
   2aa5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2aa62:	6023      	str	r3, [r4, #0]
   2aa64:	f004 fc16 	bl	2f294 <rpc_logobj_client_request_send>
   2aa68:	2800      	cmp	r0, #0
   2aa6a:	d178      	bne.n	2ab5e <logobj_interface_setopt+0x19e>
   2aa6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2aa6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2aa72:	2900      	cmp	r1, #0
   2aa74:	bf08      	it	eq
   2aa76:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2aa7a:	ab04      	add	r3, sp, #16
   2aa7c:	f843 1d08 	str.w	r1, [r3, #-8]!
   2aa80:	4638      	mov	r0, r7
   2aa82:	4611      	mov	r1, r2
   2aa84:	f007 fede 	bl	32844 <interface_socket_wait>
   2aa88:	4605      	mov	r5, r0
   2aa8a:	2800      	cmp	r0, #0
   2aa8c:	d140      	bne.n	2ab10 <logobj_interface_setopt+0x150>
   2aa8e:	4638      	mov	r0, r7
   2aa90:	f007 ff4c 	bl	3292c <interface_socket_from_handle_get>
   2aa94:	2800      	cmp	r0, #0
   2aa96:	d04e      	beq.n	2ab36 <logobj_interface_setopt+0x176>
   2aa98:	6843      	ldr	r3, [r0, #4]
   2aa9a:	2b00      	cmp	r3, #0
   2aa9c:	d04b      	beq.n	2ab36 <logobj_interface_setopt+0x176>
   2aa9e:	6045      	str	r5, [r0, #4]
   2aaa0:	461d      	mov	r5, r3
   2aaa2:	e035      	b.n	2ab10 <logobj_interface_setopt+0x150>
   2aaa4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2aaa6:	9400      	str	r4, [sp, #0]
   2aaa8:	f007 ff68 	bl	3297c <interface_socket_setopt>
   2aaac:	4605      	mov	r5, r0
   2aaae:	4628      	mov	r0, r5
   2aab0:	b005      	add	sp, #20
   2aab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aab4:	2100      	movs	r1, #0
   2aab6:	a802      	add	r0, sp, #8
   2aab8:	7835      	ldrb	r5, [r6, #0]
   2aaba:	f004 fbd3 	bl	2f264 <rpc_logobj_client_request_alloc>
   2aabe:	bb78      	cbnz	r0, 2ab20 <logobj_interface_setopt+0x160>
   2aac0:	2d01      	cmp	r5, #1
   2aac2:	bf08      	it	eq
   2aac4:	4b2c      	ldreq	r3, [pc, #176]	; (2ab78 <logobj_interface_setopt+0x1b8>)
   2aac6:	f04f 0204 	mov.w	r2, #4
   2aaca:	bf08      	it	eq
   2aacc:	701d      	strbeq	r5, [r3, #0]
   2aace:	2300      	movs	r3, #0
   2aad0:	9802      	ldr	r0, [sp, #8]
   2aad2:	f247 0101 	movw	r1, #28673	; 0x7001
   2aad6:	7243      	strb	r3, [r0, #9]
   2aad8:	60c5      	str	r5, [r0, #12]
   2aada:	7283      	strb	r3, [r0, #10]
   2aadc:	72c3      	strb	r3, [r0, #11]
   2aade:	7202      	strb	r2, [r0, #8]
   2aae0:	6823      	ldr	r3, [r4, #0]
   2aae2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2aae6:	6023      	str	r3, [r4, #0]
   2aae8:	f004 fbd4 	bl	2f294 <rpc_logobj_client_request_send>
   2aaec:	4606      	mov	r6, r0
   2aaee:	bb80      	cbnz	r0, 2ab52 <logobj_interface_setopt+0x192>
   2aaf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2aaf2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2aaf6:	2900      	cmp	r1, #0
   2aaf8:	bf08      	it	eq
   2aafa:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2aafe:	ab04      	add	r3, sp, #16
   2ab00:	f843 1d04 	str.w	r1, [r3, #-4]!
   2ab04:	4638      	mov	r0, r7
   2ab06:	4611      	mov	r1, r2
   2ab08:	f007 fe9c 	bl	32844 <interface_socket_wait>
   2ab0c:	4605      	mov	r5, r0
   2ab0e:	b150      	cbz	r0, 2ab26 <logobj_interface_setopt+0x166>
   2ab10:	6823      	ldr	r3, [r4, #0]
   2ab12:	e76d      	b.n	2a9f0 <logobj_interface_setopt+0x30>
   2ab14:	202a      	movs	r0, #42	; 0x2a
   2ab16:	f7fc fd31 	bl	2757c <bsd_os_errno_set>
   2ab1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ab1e:	e773      	b.n	2aa08 <logobj_interface_setopt+0x48>
   2ab20:	6823      	ldr	r3, [r4, #0]
   2ab22:	250c      	movs	r5, #12
   2ab24:	e764      	b.n	2a9f0 <logobj_interface_setopt+0x30>
   2ab26:	4638      	mov	r0, r7
   2ab28:	f007 ff00 	bl	3292c <interface_socket_from_handle_get>
   2ab2c:	b140      	cbz	r0, 2ab40 <logobj_interface_setopt+0x180>
   2ab2e:	6845      	ldr	r5, [r0, #4]
   2ab30:	b135      	cbz	r5, 2ab40 <logobj_interface_setopt+0x180>
   2ab32:	6046      	str	r6, [r0, #4]
   2ab34:	e7ec      	b.n	2ab10 <logobj_interface_setopt+0x150>
   2ab36:	4631      	mov	r1, r6
   2ab38:	2204      	movs	r2, #4
   2ab3a:	4810      	ldr	r0, [pc, #64]	; (2ab7c <logobj_interface_setopt+0x1bc>)
   2ab3c:	f00d ffff 	bl	38b3e <memcpy>
   2ab40:	6823      	ldr	r3, [r4, #0]
   2ab42:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2ab46:	6023      	str	r3, [r4, #0]
   2ab48:	6823      	ldr	r3, [r4, #0]
   2ab4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2ab4e:	6023      	str	r3, [r4, #0]
   2ab50:	e75a      	b.n	2aa08 <logobj_interface_setopt+0x48>
   2ab52:	9802      	ldr	r0, [sp, #8]
   2ab54:	f004 fbb4 	bl	2f2c0 <rpc_logobj_client_message_free>
   2ab58:	2505      	movs	r5, #5
   2ab5a:	6823      	ldr	r3, [r4, #0]
   2ab5c:	e748      	b.n	2a9f0 <logobj_interface_setopt+0x30>
   2ab5e:	9803      	ldr	r0, [sp, #12]
   2ab60:	f004 fbae 	bl	2f2c0 <rpc_logobj_client_message_free>
   2ab64:	2505      	movs	r5, #5
   2ab66:	6823      	ldr	r3, [r4, #0]
   2ab68:	e742      	b.n	2a9f0 <logobj_interface_setopt+0x30>
   2ab6a:	2009      	movs	r0, #9
   2ab6c:	f7fc fd06 	bl	2757c <bsd_os_errno_set>
   2ab70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ab74:	e748      	b.n	2aa08 <logobj_interface_setopt+0x48>
   2ab76:	bf00      	nop
   2ab78:	2002c6da 	.word	0x2002c6da
   2ab7c:	200238fc 	.word	0x200238fc

0002ab80 <logobj_interface_getopt>:
   2ab80:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ab82:	2901      	cmp	r1, #1
   2ab84:	b083      	sub	sp, #12
   2ab86:	9e08      	ldr	r6, [sp, #32]
   2ab88:	d030      	beq.n	2abec <logobj_interface_getopt+0x6c>
   2ab8a:	461f      	mov	r7, r3
   2ab8c:	f240 2305 	movw	r3, #517	; 0x205
   2ab90:	4299      	cmp	r1, r3
   2ab92:	d134      	bne.n	2abfe <logobj_interface_getopt+0x7e>
   2ab94:	4615      	mov	r5, r2
   2ab96:	f007 fec9 	bl	3292c <interface_socket_from_handle_get>
   2ab9a:	2800      	cmp	r0, #0
   2ab9c:	d037      	beq.n	2ac0e <logobj_interface_getopt+0x8e>
   2ab9e:	2d01      	cmp	r5, #1
   2aba0:	d015      	beq.n	2abce <logobj_interface_getopt+0x4e>
   2aba2:	2d02      	cmp	r5, #2
   2aba4:	d10b      	bne.n	2abbe <logobj_interface_getopt+0x3e>
   2aba6:	b387      	cbz	r7, 2ac0a <logobj_interface_getopt+0x8a>
   2aba8:	6833      	ldr	r3, [r6, #0]
   2abaa:	b373      	cbz	r3, 2ac0a <logobj_interface_getopt+0x8a>
   2abac:	2300      	movs	r3, #0
   2abae:	2201      	movs	r2, #1
   2abb0:	4618      	mov	r0, r3
   2abb2:	491a      	ldr	r1, [pc, #104]	; (2ac1c <logobj_interface_getopt+0x9c>)
   2abb4:	7809      	ldrb	r1, [r1, #0]
   2abb6:	7039      	strb	r1, [r7, #0]
   2abb8:	6032      	str	r2, [r6, #0]
   2abba:	b003      	add	sp, #12
   2abbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2abbe:	2009      	movs	r0, #9
   2abc0:	f7fc fcdc 	bl	2757c <bsd_os_errno_set>
   2abc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2abc8:	4618      	mov	r0, r3
   2abca:	b003      	add	sp, #12
   2abcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2abce:	b1e7      	cbz	r7, 2ac0a <logobj_interface_getopt+0x8a>
   2abd0:	6833      	ldr	r3, [r6, #0]
   2abd2:	2b03      	cmp	r3, #3
   2abd4:	d919      	bls.n	2ac0a <logobj_interface_getopt+0x8a>
   2abd6:	4638      	mov	r0, r7
   2abd8:	2204      	movs	r2, #4
   2abda:	4911      	ldr	r1, [pc, #68]	; (2ac20 <logobj_interface_getopt+0xa0>)
   2abdc:	f00d ffaf 	bl	38b3e <memcpy>
   2abe0:	2300      	movs	r3, #0
   2abe2:	2204      	movs	r2, #4
   2abe4:	4618      	mov	r0, r3
   2abe6:	6032      	str	r2, [r6, #0]
   2abe8:	b003      	add	sp, #12
   2abea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2abec:	9600      	str	r6, [sp, #0]
   2abee:	f007 ff0b 	bl	32a08 <interface_socket_getopt>
   2abf2:	4603      	mov	r3, r0
   2abf4:	2800      	cmp	r0, #0
   2abf6:	d1e3      	bne.n	2abc0 <logobj_interface_getopt+0x40>
   2abf8:	4618      	mov	r0, r3
   2abfa:	b003      	add	sp, #12
   2abfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2abfe:	202a      	movs	r0, #42	; 0x2a
   2ac00:	f7fc fcbc 	bl	2757c <bsd_os_errno_set>
   2ac04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ac08:	e7de      	b.n	2abc8 <logobj_interface_getopt+0x48>
   2ac0a:	2016      	movs	r0, #22
   2ac0c:	e7d8      	b.n	2abc0 <logobj_interface_getopt+0x40>
   2ac0e:	2009      	movs	r0, #9
   2ac10:	f7fc fcb4 	bl	2757c <bsd_os_errno_set>
   2ac14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ac18:	e7d6      	b.n	2abc8 <logobj_interface_getopt+0x48>
   2ac1a:	bf00      	nop
   2ac1c:	2002c6db 	.word	0x2002c6db
   2ac20:	200238fc 	.word	0x200238fc

0002ac24 <logobj_interface_close>:
   2ac24:	b510      	push	{r4, lr}
   2ac26:	4604      	mov	r4, r0
   2ac28:	f007 fe80 	bl	3292c <interface_socket_from_handle_get>
   2ac2c:	b138      	cbz	r0, 2ac3e <logobj_interface_close+0x1a>
   2ac2e:	4620      	mov	r0, r4
   2ac30:	f007 fdba 	bl	327a8 <interface_socket_free>
   2ac34:	2300      	movs	r3, #0
   2ac36:	4a05      	ldr	r2, [pc, #20]	; (2ac4c <logobj_interface_close+0x28>)
   2ac38:	4618      	mov	r0, r3
   2ac3a:	6013      	str	r3, [r2, #0]
   2ac3c:	bd10      	pop	{r4, pc}
   2ac3e:	2009      	movs	r0, #9
   2ac40:	f7fc fc9c 	bl	2757c <bsd_os_errno_set>
   2ac44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ac48:	bd10      	pop	{r4, pc}
   2ac4a:	bf00      	nop
   2ac4c:	20023900 	.word	0x20023900

0002ac50 <rpc_transport_send>:
   2ac50:	f000 bed8 	b.w	2ba04 <rpc_transport_ipc_send>

0002ac54 <rpc_transport_rpc_alloc>:
   2ac54:	f000 bf58 	b.w	2bb08 <rpc_transport_ipc_tx_rpc_data_alloc>

0002ac58 <rpc_transport_data_alloc>:
   2ac58:	f000 bfbe 	b.w	2bbd8 <rpc_transport_ipc_tx_data_alloc>

0002ac5c <rpc_transport_rpc_free>:
   2ac5c:	f000 bdb6 	b.w	2b7cc <rpc_transport_ipc_msg_free>

0002ac60 <rpc_transport_data_free>:
   2ac60:	f000 ba64 	b.w	2b12c <rpc_transport_ipc_data_free>

0002ac64 <ipc_trace_init>:
   2ac64:	4b01      	ldr	r3, [pc, #4]	; (2ac6c <ipc_trace_init+0x8>)
   2ac66:	6018      	str	r0, [r3, #0]
   2ac68:	4770      	bx	lr
   2ac6a:	bf00      	nop
   2ac6c:	20023910 	.word	0x20023910

0002ac70 <bsd_os_trace_irq_handler>:
   2ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ac72:	4b6e      	ldr	r3, [pc, #440]	; (2ae2c <bsd_os_trace_irq_handler+0x1bc>)
   2ac74:	b083      	sub	sp, #12
   2ac76:	781b      	ldrb	r3, [r3, #0]
   2ac78:	2b00      	cmp	r3, #0
   2ac7a:	f000 80d3 	beq.w	2ae24 <bsd_os_trace_irq_handler+0x1b4>
   2ac7e:	4b6c      	ldr	r3, [pc, #432]	; (2ae30 <bsd_os_trace_irq_handler+0x1c0>)
   2ac80:	681c      	ldr	r4, [r3, #0]
   2ac82:	b124      	cbz	r4, 2ac8e <bsd_os_trace_irq_handler+0x1e>
   2ac84:	68a3      	ldr	r3, [r4, #8]
   2ac86:	6862      	ldr	r2, [r4, #4]
   2ac88:	4293      	cmp	r3, r2
   2ac8a:	f040 808c 	bne.w	2ada6 <bsd_os_trace_irq_handler+0x136>
   2ac8e:	4b69      	ldr	r3, [pc, #420]	; (2ae34 <bsd_os_trace_irq_handler+0x1c4>)
   2ac90:	681c      	ldr	r4, [r3, #0]
   2ac92:	b11c      	cbz	r4, 2ac9c <bsd_os_trace_irq_handler+0x2c>
   2ac94:	68a3      	ldr	r3, [r4, #8]
   2ac96:	6862      	ldr	r2, [r4, #4]
   2ac98:	4293      	cmp	r3, r2
   2ac9a:	d146      	bne.n	2ad2a <bsd_os_trace_irq_handler+0xba>
   2ac9c:	4b66      	ldr	r3, [pc, #408]	; (2ae38 <bsd_os_trace_irq_handler+0x1c8>)
   2ac9e:	681c      	ldr	r4, [r3, #0]
   2aca0:	b11c      	cbz	r4, 2acaa <bsd_os_trace_irq_handler+0x3a>
   2aca2:	68a3      	ldr	r3, [r4, #8]
   2aca4:	6862      	ldr	r2, [r4, #4]
   2aca6:	4293      	cmp	r3, r2
   2aca8:	d101      	bne.n	2acae <bsd_os_trace_irq_handler+0x3e>
   2acaa:	b003      	add	sp, #12
   2acac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2acae:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2acb2:	f8ad 2000 	strh.w	r2, [sp]
   2acb6:	7822      	ldrb	r2, [r4, #0]
   2acb8:	466e      	mov	r6, sp
   2acba:	f88d 2004 	strb.w	r2, [sp, #4]
   2acbe:	6862      	ldr	r2, [r4, #4]
   2acc0:	2105      	movs	r1, #5
   2acc2:	4293      	cmp	r3, r2
   2acc4:	bf2a      	itet	cs
   2acc6:	6927      	ldrcs	r7, [r4, #16]
   2acc8:	1ad7      	subcc	r7, r2, r3
   2acca:	1aff      	subcs	r7, r7, r3
   2accc:	4293      	cmp	r3, r2
   2acce:	bf94      	ite	ls
   2acd0:	2500      	movls	r5, #0
   2acd2:	68e5      	ldrhi	r5, [r4, #12]
   2acd4:	b2bf      	uxth	r7, r7
   2acd6:	bf88      	it	hi
   2acd8:	1b52      	subhi	r2, r2, r5
   2acda:	4630      	mov	r0, r6
   2acdc:	bf88      	it	hi
   2acde:	b295      	uxthhi	r5, r2
   2ace0:	f8ad 7002 	strh.w	r7, [sp, #2]
   2ace4:	f00c fcfc 	bl	376e0 <bsd_os_trace_put>
   2ace8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2acec:	68a0      	ldr	r0, [r4, #8]
   2acee:	f00c fcf7 	bl	376e0 <bsd_os_trace_put>
   2acf2:	68a3      	ldr	r3, [r4, #8]
   2acf4:	6922      	ldr	r2, [r4, #16]
   2acf6:	441f      	add	r7, r3
   2acf8:	4297      	cmp	r7, r2
   2acfa:	bf08      	it	eq
   2acfc:	68e3      	ldreq	r3, [r4, #12]
   2acfe:	60a7      	str	r7, [r4, #8]
   2ad00:	bf08      	it	eq
   2ad02:	60a3      	streq	r3, [r4, #8]
   2ad04:	2d00      	cmp	r5, #0
   2ad06:	d0d0      	beq.n	2acaa <bsd_os_trace_irq_handler+0x3a>
   2ad08:	2105      	movs	r1, #5
   2ad0a:	4630      	mov	r0, r6
   2ad0c:	f8ad 5002 	strh.w	r5, [sp, #2]
   2ad10:	f00c fce6 	bl	376e0 <bsd_os_trace_put>
   2ad14:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2ad18:	68e0      	ldr	r0, [r4, #12]
   2ad1a:	f00c fce1 	bl	376e0 <bsd_os_trace_put>
   2ad1e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2ad22:	68e3      	ldr	r3, [r4, #12]
   2ad24:	4413      	add	r3, r2
   2ad26:	60a3      	str	r3, [r4, #8]
   2ad28:	e7bf      	b.n	2acaa <bsd_os_trace_irq_handler+0x3a>
   2ad2a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2ad2e:	f8ad 2000 	strh.w	r2, [sp]
   2ad32:	7822      	ldrb	r2, [r4, #0]
   2ad34:	466e      	mov	r6, sp
   2ad36:	f88d 2004 	strb.w	r2, [sp, #4]
   2ad3a:	6862      	ldr	r2, [r4, #4]
   2ad3c:	2105      	movs	r1, #5
   2ad3e:	4293      	cmp	r3, r2
   2ad40:	bf2a      	itet	cs
   2ad42:	6927      	ldrcs	r7, [r4, #16]
   2ad44:	1ad7      	subcc	r7, r2, r3
   2ad46:	1aff      	subcs	r7, r7, r3
   2ad48:	4293      	cmp	r3, r2
   2ad4a:	bf94      	ite	ls
   2ad4c:	2500      	movls	r5, #0
   2ad4e:	68e5      	ldrhi	r5, [r4, #12]
   2ad50:	b2bf      	uxth	r7, r7
   2ad52:	bf88      	it	hi
   2ad54:	1b52      	subhi	r2, r2, r5
   2ad56:	4630      	mov	r0, r6
   2ad58:	bf88      	it	hi
   2ad5a:	b295      	uxthhi	r5, r2
   2ad5c:	f8ad 7002 	strh.w	r7, [sp, #2]
   2ad60:	f00c fcbe 	bl	376e0 <bsd_os_trace_put>
   2ad64:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2ad68:	68a0      	ldr	r0, [r4, #8]
   2ad6a:	f00c fcb9 	bl	376e0 <bsd_os_trace_put>
   2ad6e:	68a3      	ldr	r3, [r4, #8]
   2ad70:	6922      	ldr	r2, [r4, #16]
   2ad72:	441f      	add	r7, r3
   2ad74:	4297      	cmp	r7, r2
   2ad76:	bf08      	it	eq
   2ad78:	68e3      	ldreq	r3, [r4, #12]
   2ad7a:	60a7      	str	r7, [r4, #8]
   2ad7c:	bf08      	it	eq
   2ad7e:	60a3      	streq	r3, [r4, #8]
   2ad80:	2d00      	cmp	r5, #0
   2ad82:	d08b      	beq.n	2ac9c <bsd_os_trace_irq_handler+0x2c>
   2ad84:	2105      	movs	r1, #5
   2ad86:	4630      	mov	r0, r6
   2ad88:	f8ad 5002 	strh.w	r5, [sp, #2]
   2ad8c:	f00c fca8 	bl	376e0 <bsd_os_trace_put>
   2ad90:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2ad94:	68e0      	ldr	r0, [r4, #12]
   2ad96:	f00c fca3 	bl	376e0 <bsd_os_trace_put>
   2ad9a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2ad9e:	68e3      	ldr	r3, [r4, #12]
   2ada0:	4413      	add	r3, r2
   2ada2:	60a3      	str	r3, [r4, #8]
   2ada4:	e77a      	b.n	2ac9c <bsd_os_trace_irq_handler+0x2c>
   2ada6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2adaa:	f8ad 2000 	strh.w	r2, [sp]
   2adae:	7822      	ldrb	r2, [r4, #0]
   2adb0:	466e      	mov	r6, sp
   2adb2:	f88d 2004 	strb.w	r2, [sp, #4]
   2adb6:	6862      	ldr	r2, [r4, #4]
   2adb8:	2105      	movs	r1, #5
   2adba:	4293      	cmp	r3, r2
   2adbc:	bf2a      	itet	cs
   2adbe:	6927      	ldrcs	r7, [r4, #16]
   2adc0:	1ad7      	subcc	r7, r2, r3
   2adc2:	1aff      	subcs	r7, r7, r3
   2adc4:	4293      	cmp	r3, r2
   2adc6:	bf94      	ite	ls
   2adc8:	2500      	movls	r5, #0
   2adca:	68e5      	ldrhi	r5, [r4, #12]
   2adcc:	b2bf      	uxth	r7, r7
   2adce:	bf88      	it	hi
   2add0:	1b52      	subhi	r2, r2, r5
   2add2:	4630      	mov	r0, r6
   2add4:	bf88      	it	hi
   2add6:	b295      	uxthhi	r5, r2
   2add8:	f8ad 7002 	strh.w	r7, [sp, #2]
   2addc:	f00c fc80 	bl	376e0 <bsd_os_trace_put>
   2ade0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2ade4:	68a0      	ldr	r0, [r4, #8]
   2ade6:	f00c fc7b 	bl	376e0 <bsd_os_trace_put>
   2adea:	68a3      	ldr	r3, [r4, #8]
   2adec:	6922      	ldr	r2, [r4, #16]
   2adee:	441f      	add	r7, r3
   2adf0:	4297      	cmp	r7, r2
   2adf2:	bf08      	it	eq
   2adf4:	68e3      	ldreq	r3, [r4, #12]
   2adf6:	60a7      	str	r7, [r4, #8]
   2adf8:	bf08      	it	eq
   2adfa:	60a3      	streq	r3, [r4, #8]
   2adfc:	2d00      	cmp	r5, #0
   2adfe:	f43f af46 	beq.w	2ac8e <bsd_os_trace_irq_handler+0x1e>
   2ae02:	2105      	movs	r1, #5
   2ae04:	4630      	mov	r0, r6
   2ae06:	f8ad 5002 	strh.w	r5, [sp, #2]
   2ae0a:	f00c fc69 	bl	376e0 <bsd_os_trace_put>
   2ae0e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2ae12:	68e0      	ldr	r0, [r4, #12]
   2ae14:	f00c fc64 	bl	376e0 <bsd_os_trace_put>
   2ae18:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2ae1c:	68e3      	ldr	r3, [r4, #12]
   2ae1e:	4413      	add	r3, r2
   2ae20:	60a3      	str	r3, [r4, #8]
   2ae22:	e734      	b.n	2ac8e <bsd_os_trace_irq_handler+0x1e>
   2ae24:	f7fc fd36 	bl	27894 <bsd_os_trace_irq_clear>
   2ae28:	e729      	b.n	2ac7e <bsd_os_trace_irq_handler+0xe>
   2ae2a:	bf00      	nop
   2ae2c:	2002c6dd 	.word	0x2002c6dd
   2ae30:	2002390c 	.word	0x2002390c
   2ae34:	20023904 	.word	0x20023904
   2ae38:	20023908 	.word	0x20023908

0002ae3c <ipc_trace_handle>:
   2ae3c:	2200      	movs	r2, #0
   2ae3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae42:	4bb2      	ldr	r3, [pc, #712]	; (2b10c <ipc_trace_handle+0x2d0>)
   2ae44:	b083      	sub	sp, #12
   2ae46:	681b      	ldr	r3, [r3, #0]
   2ae48:	6919      	ldr	r1, [r3, #16]
   2ae4a:	695c      	ldr	r4, [r3, #20]
   2ae4c:	7c18      	ldrb	r0, [r3, #16]
   2ae4e:	741a      	strb	r2, [r3, #16]
   2ae50:	7c58      	ldrb	r0, [r3, #17]
   2ae52:	745a      	strb	r2, [r3, #17]
   2ae54:	7c98      	ldrb	r0, [r3, #18]
   2ae56:	749a      	strb	r2, [r3, #18]
   2ae58:	7cd8      	ldrb	r0, [r3, #19]
   2ae5a:	74da      	strb	r2, [r3, #19]
   2ae5c:	7d18      	ldrb	r0, [r3, #20]
   2ae5e:	751a      	strb	r2, [r3, #20]
   2ae60:	7d58      	ldrb	r0, [r3, #21]
   2ae62:	755a      	strb	r2, [r3, #21]
   2ae64:	7d98      	ldrb	r0, [r3, #22]
   2ae66:	759a      	strb	r2, [r3, #22]
   2ae68:	7dd8      	ldrb	r0, [r3, #23]
   2ae6a:	75da      	strb	r2, [r3, #23]
   2ae6c:	b1a9      	cbz	r1, 2ae9a <ipc_trace_handle+0x5e>
   2ae6e:	3901      	subs	r1, #1
   2ae70:	2903      	cmp	r1, #3
   2ae72:	d812      	bhi.n	2ae9a <ipc_trace_handle+0x5e>
   2ae74:	e8df f001 	tbb	[pc, r1]
   2ae78:	1402a97c 	.word	0x1402a97c
   2ae7c:	2501      	movs	r5, #1
   2ae7e:	2003      	movs	r0, #3
   2ae80:	2200      	movs	r2, #0
   2ae82:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   2ae86:	4ca2      	ldr	r4, [pc, #648]	; (2b110 <ipc_trace_handle+0x2d4>)
   2ae88:	7025      	strb	r5, [r4, #0]
   2ae8a:	7a1c      	ldrb	r4, [r3, #8]
   2ae8c:	7218      	strb	r0, [r3, #8]
   2ae8e:	7a58      	ldrb	r0, [r3, #9]
   2ae90:	725a      	strb	r2, [r3, #9]
   2ae92:	7a98      	ldrb	r0, [r3, #10]
   2ae94:	729a      	strb	r2, [r3, #10]
   2ae96:	7ada      	ldrb	r2, [r3, #11]
   2ae98:	72d9      	strb	r1, [r3, #11]
   2ae9a:	b003      	add	sp, #12
   2ae9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aea0:	2104      	movs	r1, #4
   2aea2:	2200      	movs	r2, #0
   2aea4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2aea8:	7a1c      	ldrb	r4, [r3, #8]
   2aeaa:	7219      	strb	r1, [r3, #8]
   2aeac:	7a59      	ldrb	r1, [r3, #9]
   2aeae:	725a      	strb	r2, [r3, #9]
   2aeb0:	4997      	ldr	r1, [pc, #604]	; (2b110 <ipc_trace_handle+0x2d4>)
   2aeb2:	7a9c      	ldrb	r4, [r3, #10]
   2aeb4:	729a      	strb	r2, [r3, #10]
   2aeb6:	7adc      	ldrb	r4, [r3, #11]
   2aeb8:	72d8      	strb	r0, [r3, #11]
   2aeba:	700a      	strb	r2, [r1, #0]
   2aebc:	780b      	ldrb	r3, [r1, #0]
   2aebe:	2b00      	cmp	r3, #0
   2aec0:	f000 809f 	beq.w	2b002 <ipc_trace_handle+0x1c6>
   2aec4:	4b93      	ldr	r3, [pc, #588]	; (2b114 <ipc_trace_handle+0x2d8>)
   2aec6:	681c      	ldr	r4, [r3, #0]
   2aec8:	b124      	cbz	r4, 2aed4 <ipc_trace_handle+0x98>
   2aeca:	68a3      	ldr	r3, [r4, #8]
   2aecc:	6862      	ldr	r2, [r4, #4]
   2aece:	4293      	cmp	r3, r2
   2aed0:	f040 80d9 	bne.w	2b086 <ipc_trace_handle+0x24a>
   2aed4:	4b90      	ldr	r3, [pc, #576]	; (2b118 <ipc_trace_handle+0x2dc>)
   2aed6:	681c      	ldr	r4, [r3, #0]
   2aed8:	b124      	cbz	r4, 2aee4 <ipc_trace_handle+0xa8>
   2aeda:	68a3      	ldr	r3, [r4, #8]
   2aedc:	6862      	ldr	r2, [r4, #4]
   2aede:	4293      	cmp	r3, r2
   2aee0:	f040 8092 	bne.w	2b008 <ipc_trace_handle+0x1cc>
   2aee4:	4b8d      	ldr	r3, [pc, #564]	; (2b11c <ipc_trace_handle+0x2e0>)
   2aee6:	681c      	ldr	r4, [r3, #0]
   2aee8:	2c00      	cmp	r4, #0
   2aeea:	d0d6      	beq.n	2ae9a <ipc_trace_handle+0x5e>
   2aeec:	68a3      	ldr	r3, [r4, #8]
   2aeee:	6862      	ldr	r2, [r4, #4]
   2aef0:	4293      	cmp	r3, r2
   2aef2:	d0d2      	beq.n	2ae9a <ipc_trace_handle+0x5e>
   2aef4:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2aef8:	f8ad 2000 	strh.w	r2, [sp]
   2aefc:	7822      	ldrb	r2, [r4, #0]
   2aefe:	466e      	mov	r6, sp
   2af00:	f88d 2004 	strb.w	r2, [sp, #4]
   2af04:	6862      	ldr	r2, [r4, #4]
   2af06:	2105      	movs	r1, #5
   2af08:	4293      	cmp	r3, r2
   2af0a:	bf2a      	itet	cs
   2af0c:	6927      	ldrcs	r7, [r4, #16]
   2af0e:	1ad7      	subcc	r7, r2, r3
   2af10:	1aff      	subcs	r7, r7, r3
   2af12:	4293      	cmp	r3, r2
   2af14:	bf94      	ite	ls
   2af16:	2500      	movls	r5, #0
   2af18:	68e5      	ldrhi	r5, [r4, #12]
   2af1a:	b2bf      	uxth	r7, r7
   2af1c:	bf88      	it	hi
   2af1e:	1b52      	subhi	r2, r2, r5
   2af20:	4630      	mov	r0, r6
   2af22:	bf88      	it	hi
   2af24:	b295      	uxthhi	r5, r2
   2af26:	f8ad 7002 	strh.w	r7, [sp, #2]
   2af2a:	f00c fbd9 	bl	376e0 <bsd_os_trace_put>
   2af2e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2af32:	68a0      	ldr	r0, [r4, #8]
   2af34:	f00c fbd4 	bl	376e0 <bsd_os_trace_put>
   2af38:	68a3      	ldr	r3, [r4, #8]
   2af3a:	6922      	ldr	r2, [r4, #16]
   2af3c:	441f      	add	r7, r3
   2af3e:	4297      	cmp	r7, r2
   2af40:	bf08      	it	eq
   2af42:	68e3      	ldreq	r3, [r4, #12]
   2af44:	60a7      	str	r7, [r4, #8]
   2af46:	bf08      	it	eq
   2af48:	60a3      	streq	r3, [r4, #8]
   2af4a:	2d00      	cmp	r5, #0
   2af4c:	d0a5      	beq.n	2ae9a <ipc_trace_handle+0x5e>
   2af4e:	2105      	movs	r1, #5
   2af50:	4630      	mov	r0, r6
   2af52:	f8ad 5002 	strh.w	r5, [sp, #2]
   2af56:	f00c fbc3 	bl	376e0 <bsd_os_trace_put>
   2af5a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2af5e:	68e0      	ldr	r0, [r4, #12]
   2af60:	f00c fbbe 	bl	376e0 <bsd_os_trace_put>
   2af64:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2af68:	68e3      	ldr	r3, [r4, #12]
   2af6a:	4413      	add	r3, r2
   2af6c:	60a3      	str	r3, [r4, #8]
   2af6e:	e794      	b.n	2ae9a <ipc_trace_handle+0x5e>
   2af70:	4a67      	ldr	r2, [pc, #412]	; (2b110 <ipc_trace_handle+0x2d4>)
   2af72:	7811      	ldrb	r1, [r2, #0]
   2af74:	b109      	cbz	r1, 2af7a <ipc_trace_handle+0x13e>
   2af76:	2100      	movs	r1, #0
   2af78:	7011      	strb	r1, [r2, #0]
   2af7a:	68a5      	ldr	r5, [r4, #8]
   2af7c:	2d00      	cmp	r5, #0
   2af7e:	d03b      	beq.n	2aff8 <ipc_trace_handle+0x1bc>
   2af80:	f04f 0c00 	mov.w	ip, #0
   2af84:	f8df a190 	ldr.w	sl, [pc, #400]	; 2b118 <ipc_trace_handle+0x2dc>
   2af88:	f8df b188 	ldr.w	fp, [pc, #392]	; 2b114 <ipc_trace_handle+0x2d8>
   2af8c:	4963      	ldr	r1, [pc, #396]	; (2b11c <ipc_trace_handle+0x2e0>)
   2af8e:	46e1      	mov	r9, ip
   2af90:	4666      	mov	r6, ip
   2af92:	4662      	mov	r2, ip
   2af94:	f8d1 e000 	ldr.w	lr, [r1]
   2af98:	f8da 8000 	ldr.w	r8, [sl]
   2af9c:	f8db 7000 	ldr.w	r7, [fp]
   2afa0:	e008      	b.n	2afb4 <ipc_trace_handle+0x178>
   2afa2:	2963      	cmp	r1, #99	; 0x63
   2afa4:	d016      	beq.n	2afd4 <ipc_trace_handle+0x198>
   2afa6:	2961      	cmp	r1, #97	; 0x61
   2afa8:	bf04      	itt	eq
   2afaa:	4607      	moveq	r7, r0
   2afac:	2601      	moveq	r6, #1
   2afae:	3201      	adds	r2, #1
   2afb0:	42aa      	cmp	r2, r5
   2afb2:	d013      	beq.n	2afdc <ipc_trace_handle+0x1a0>
   2afb4:	1c91      	adds	r1, r2, #2
   2afb6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   2afba:	6848      	ldr	r0, [r1, #4]
   2afbc:	7801      	ldrb	r1, [r0, #0]
   2afbe:	2962      	cmp	r1, #98	; 0x62
   2afc0:	d1ef      	bne.n	2afa2 <ipc_trace_handle+0x166>
   2afc2:	4680      	mov	r8, r0
   2afc4:	f04f 0901 	mov.w	r9, #1
   2afc8:	e7f1      	b.n	2afae <ipc_trace_handle+0x172>
   2afca:	f7fc fc5b 	bl	27884 <bsd_os_trace_irq_set>
   2afce:	b003      	add	sp, #12
   2afd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afd4:	4686      	mov	lr, r0
   2afd6:	f04f 0c01 	mov.w	ip, #1
   2afda:	e7e8      	b.n	2afae <ipc_trace_handle+0x172>
   2afdc:	2e00      	cmp	r6, #0
   2afde:	f040 8091 	bne.w	2b104 <ipc_trace_handle+0x2c8>
   2afe2:	f1b9 0f00 	cmp.w	r9, #0
   2afe6:	d001      	beq.n	2afec <ipc_trace_handle+0x1b0>
   2afe8:	f8ca 8000 	str.w	r8, [sl]
   2afec:	f1bc 0f00 	cmp.w	ip, #0
   2aff0:	d002      	beq.n	2aff8 <ipc_trace_handle+0x1bc>
   2aff2:	4a4a      	ldr	r2, [pc, #296]	; (2b11c <ipc_trace_handle+0x2e0>)
   2aff4:	f8c2 e000 	str.w	lr, [r2]
   2aff8:	2001      	movs	r0, #1
   2affa:	2200      	movs	r2, #0
   2affc:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   2b000:	e743      	b.n	2ae8a <ipc_trace_handle+0x4e>
   2b002:	f7fc fc47 	bl	27894 <bsd_os_trace_irq_clear>
   2b006:	e75d      	b.n	2aec4 <ipc_trace_handle+0x88>
   2b008:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2b00c:	f8ad 2000 	strh.w	r2, [sp]
   2b010:	7822      	ldrb	r2, [r4, #0]
   2b012:	466e      	mov	r6, sp
   2b014:	f88d 2004 	strb.w	r2, [sp, #4]
   2b018:	6862      	ldr	r2, [r4, #4]
   2b01a:	2105      	movs	r1, #5
   2b01c:	4293      	cmp	r3, r2
   2b01e:	bf2a      	itet	cs
   2b020:	6927      	ldrcs	r7, [r4, #16]
   2b022:	1ad7      	subcc	r7, r2, r3
   2b024:	1aff      	subcs	r7, r7, r3
   2b026:	4293      	cmp	r3, r2
   2b028:	bf94      	ite	ls
   2b02a:	2500      	movls	r5, #0
   2b02c:	68e5      	ldrhi	r5, [r4, #12]
   2b02e:	b2bf      	uxth	r7, r7
   2b030:	bf88      	it	hi
   2b032:	1b52      	subhi	r2, r2, r5
   2b034:	4630      	mov	r0, r6
   2b036:	bf88      	it	hi
   2b038:	b295      	uxthhi	r5, r2
   2b03a:	f8ad 7002 	strh.w	r7, [sp, #2]
   2b03e:	f00c fb4f 	bl	376e0 <bsd_os_trace_put>
   2b042:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2b046:	68a0      	ldr	r0, [r4, #8]
   2b048:	f00c fb4a 	bl	376e0 <bsd_os_trace_put>
   2b04c:	68a3      	ldr	r3, [r4, #8]
   2b04e:	6922      	ldr	r2, [r4, #16]
   2b050:	441f      	add	r7, r3
   2b052:	4297      	cmp	r7, r2
   2b054:	bf08      	it	eq
   2b056:	68e3      	ldreq	r3, [r4, #12]
   2b058:	60a7      	str	r7, [r4, #8]
   2b05a:	bf08      	it	eq
   2b05c:	60a3      	streq	r3, [r4, #8]
   2b05e:	2d00      	cmp	r5, #0
   2b060:	f43f af40 	beq.w	2aee4 <ipc_trace_handle+0xa8>
   2b064:	2105      	movs	r1, #5
   2b066:	4630      	mov	r0, r6
   2b068:	f8ad 5002 	strh.w	r5, [sp, #2]
   2b06c:	f00c fb38 	bl	376e0 <bsd_os_trace_put>
   2b070:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2b074:	68e0      	ldr	r0, [r4, #12]
   2b076:	f00c fb33 	bl	376e0 <bsd_os_trace_put>
   2b07a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2b07e:	68e3      	ldr	r3, [r4, #12]
   2b080:	4413      	add	r3, r2
   2b082:	60a3      	str	r3, [r4, #8]
   2b084:	e72e      	b.n	2aee4 <ipc_trace_handle+0xa8>
   2b086:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2b08a:	f8ad 2000 	strh.w	r2, [sp]
   2b08e:	7822      	ldrb	r2, [r4, #0]
   2b090:	466e      	mov	r6, sp
   2b092:	f88d 2004 	strb.w	r2, [sp, #4]
   2b096:	6862      	ldr	r2, [r4, #4]
   2b098:	2105      	movs	r1, #5
   2b09a:	4293      	cmp	r3, r2
   2b09c:	bf2a      	itet	cs
   2b09e:	6927      	ldrcs	r7, [r4, #16]
   2b0a0:	1ad7      	subcc	r7, r2, r3
   2b0a2:	1aff      	subcs	r7, r7, r3
   2b0a4:	4293      	cmp	r3, r2
   2b0a6:	bf94      	ite	ls
   2b0a8:	2500      	movls	r5, #0
   2b0aa:	68e5      	ldrhi	r5, [r4, #12]
   2b0ac:	b2bf      	uxth	r7, r7
   2b0ae:	bf88      	it	hi
   2b0b0:	1b52      	subhi	r2, r2, r5
   2b0b2:	4630      	mov	r0, r6
   2b0b4:	bf88      	it	hi
   2b0b6:	b295      	uxthhi	r5, r2
   2b0b8:	f8ad 7002 	strh.w	r7, [sp, #2]
   2b0bc:	f00c fb10 	bl	376e0 <bsd_os_trace_put>
   2b0c0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2b0c4:	68a0      	ldr	r0, [r4, #8]
   2b0c6:	f00c fb0b 	bl	376e0 <bsd_os_trace_put>
   2b0ca:	68a3      	ldr	r3, [r4, #8]
   2b0cc:	6922      	ldr	r2, [r4, #16]
   2b0ce:	441f      	add	r7, r3
   2b0d0:	4297      	cmp	r7, r2
   2b0d2:	bf08      	it	eq
   2b0d4:	68e3      	ldreq	r3, [r4, #12]
   2b0d6:	60a7      	str	r7, [r4, #8]
   2b0d8:	bf08      	it	eq
   2b0da:	60a3      	streq	r3, [r4, #8]
   2b0dc:	2d00      	cmp	r5, #0
   2b0de:	f43f aef9 	beq.w	2aed4 <ipc_trace_handle+0x98>
   2b0e2:	2105      	movs	r1, #5
   2b0e4:	4630      	mov	r0, r6
   2b0e6:	f8ad 5002 	strh.w	r5, [sp, #2]
   2b0ea:	f00c faf9 	bl	376e0 <bsd_os_trace_put>
   2b0ee:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2b0f2:	68e0      	ldr	r0, [r4, #12]
   2b0f4:	f00c faf4 	bl	376e0 <bsd_os_trace_put>
   2b0f8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2b0fc:	68e3      	ldr	r3, [r4, #12]
   2b0fe:	4413      	add	r3, r2
   2b100:	60a3      	str	r3, [r4, #8]
   2b102:	e6e7      	b.n	2aed4 <ipc_trace_handle+0x98>
   2b104:	f8cb 7000 	str.w	r7, [fp]
   2b108:	e76b      	b.n	2afe2 <ipc_trace_handle+0x1a6>
   2b10a:	bf00      	nop
   2b10c:	20023910 	.word	0x20023910
   2b110:	2002c6dd 	.word	0x2002c6dd
   2b114:	2002390c 	.word	0x2002390c
   2b118:	20023904 	.word	0x20023904
   2b11c:	20023908 	.word	0x20023908

0002b120 <rpc_trace_coredump_in_progress>:
   2b120:	4b01      	ldr	r3, [pc, #4]	; (2b128 <rpc_trace_coredump_in_progress+0x8>)
   2b122:	7818      	ldrb	r0, [r3, #0]
   2b124:	4770      	bx	lr
   2b126:	bf00      	nop
   2b128:	2002c6dd 	.word	0x2002c6dd

0002b12c <rpc_transport_ipc_data_free>:
   2b12c:	b510      	push	{r4, lr}
   2b12e:	4b0e      	ldr	r3, [pc, #56]	; (2b168 <rpc_transport_ipc_data_free+0x3c>)
   2b130:	4604      	mov	r4, r0
   2b132:	e9d3 2300 	ldrd	r2, r3, [r3]
   2b136:	4413      	add	r3, r2
   2b138:	4298      	cmp	r0, r3
   2b13a:	d20d      	bcs.n	2b158 <rpc_transport_ipc_data_free+0x2c>
   2b13c:	4282      	cmp	r2, r0
   2b13e:	d80b      	bhi.n	2b158 <rpc_transport_ipc_data_free+0x2c>
   2b140:	f000 fd1a 	bl	2bb78 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   2b144:	b158      	cbz	r0, 2b15e <rpc_transport_ipc_data_free+0x32>
   2b146:	4a09      	ldr	r2, [pc, #36]	; (2b16c <rpc_transport_ipc_data_free+0x40>)
   2b148:	6084      	str	r4, [r0, #8]
   2b14a:	6002      	str	r2, [r0, #0]
   2b14c:	f7ff fd80 	bl	2ac50 <rpc_transport_send>
   2b150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b154:	f7fc bb86 	b.w	27864 <bsd_os_application_irq_set>
   2b158:	4620      	mov	r0, r4
   2b15a:	f006 ffaf 	bl	320bc <nrf_shared_free>
   2b15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b162:	f7fc bb7f 	b.w	27864 <bsd_os_application_irq_set>
   2b166:	bf00      	nop
   2b168:	20023914 	.word	0x20023914
   2b16c:	00020001 	.word	0x00020001

0002b170 <rpc_transport_ipc_init>:
   2b170:	b188      	cbz	r0, 2b196 <rpc_transport_ipc_init+0x26>
   2b172:	b510      	push	{r4, lr}
   2b174:	b082      	sub	sp, #8
   2b176:	aa01      	add	r2, sp, #4
   2b178:	4669      	mov	r1, sp
   2b17a:	4604      	mov	r4, r0
   2b17c:	f000 fb58 	bl	2b830 <rpc_transport_ipc_tx_init>
   2b180:	4602      	mov	r2, r0
   2b182:	b148      	cbz	r0, 2b198 <rpc_transport_ipc_init+0x28>
   2b184:	4b12      	ldr	r3, [pc, #72]	; (2b1d0 <rpc_transport_ipc_init+0x60>)
   2b186:	3428      	adds	r4, #40	; 0x28
   2b188:	e894 0003 	ldmia.w	r4, {r0, r1}
   2b18c:	e883 0003 	stmia.w	r3, {r0, r1}
   2b190:	4610      	mov	r0, r2
   2b192:	b002      	add	sp, #8
   2b194:	bd10      	pop	{r4, pc}
   2b196:	e7fe      	b.n	2b196 <rpc_transport_ipc_init+0x26>
   2b198:	e9dd 1200 	ldrd	r1, r2, [sp]
   2b19c:	4620      	mov	r0, r4
   2b19e:	f000 f9ef 	bl	2b580 <rpc_transport_ipc_rx_init>
   2b1a2:	4602      	mov	r2, r0
   2b1a4:	4b0a      	ldr	r3, [pc, #40]	; (2b1d0 <rpc_transport_ipc_init+0x60>)
   2b1a6:	f104 0128 	add.w	r1, r4, #40	; 0x28
   2b1aa:	c903      	ldmia	r1, {r0, r1}
   2b1ac:	e883 0003 	stmia.w	r3, {r0, r1}
   2b1b0:	2a00      	cmp	r2, #0
   2b1b2:	d1ed      	bne.n	2b190 <rpc_transport_ipc_init+0x20>
   2b1b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2b1b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b1ba:	4906      	ldr	r1, [pc, #24]	; (2b1d4 <rpc_transport_ipc_init+0x64>)
   2b1bc:	015b      	lsls	r3, r3, #5
   2b1be:	b2db      	uxtb	r3, r3
   2b1c0:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   2b1c4:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   2b1c8:	6048      	str	r0, [r1, #4]
   2b1ca:	4610      	mov	r0, r2
   2b1cc:	b002      	add	sp, #8
   2b1ce:	bd10      	pop	{r4, pc}
   2b1d0:	20023914 	.word	0x20023914
   2b1d4:	e000e100 	.word	0xe000e100

0002b1d8 <rpc_transport_ipc_shutdown>:
   2b1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b1dc:	b08c      	sub	sp, #48	; 0x30
   2b1de:	f000 fd05 	bl	2bbec <rpc_transport_ipc_tx_suspend>
   2b1e2:	2200      	movs	r2, #0
   2b1e4:	2010      	movs	r0, #16
   2b1e6:	4b31      	ldr	r3, [pc, #196]	; (2b2ac <rpc_transport_ipc_shutdown+0xd4>)
   2b1e8:	f04f 0c01 	mov.w	ip, #1
   2b1ec:	4c30      	ldr	r4, [pc, #192]	; (2b2b0 <rpc_transport_ipc_shutdown+0xd8>)
   2b1ee:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   2b1f2:	6821      	ldr	r1, [r4, #0]
   2b1f4:	2704      	movs	r7, #4
   2b1f6:	910a      	str	r1, [sp, #40]	; 0x28
   2b1f8:	492e      	ldr	r1, [pc, #184]	; (2b2b4 <rpc_transport_ipc_shutdown+0xdc>)
   2b1fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2b1fc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2b200:	680d      	ldr	r5, [r1, #0]
   2b202:	950b      	str	r5, [sp, #44]	; 0x2c
   2b204:	4d2c      	ldr	r5, [pc, #176]	; (2b2b8 <rpc_transport_ipc_shutdown+0xe0>)
   2b206:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2b208:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   2b20c:	682d      	ldr	r5, [r5, #0]
   2b20e:	2640      	movs	r6, #64	; 0x40
   2b210:	9509      	str	r5, [sp, #36]	; 0x24
   2b212:	4d2a      	ldr	r5, [pc, #168]	; (2b2bc <rpc_transport_ipc_shutdown+0xe4>)
   2b214:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   2b218:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   2b21c:	f8d5 e000 	ldr.w	lr, [r5]
   2b220:	2580      	movs	r5, #128	; 0x80
   2b222:	f8cd e020 	str.w	lr, [sp, #32]
   2b226:	f8dd e020 	ldr.w	lr, [sp, #32]
   2b22a:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   2b22e:	f8d4 e000 	ldr.w	lr, [r4]
   2b232:	2405      	movs	r4, #5
   2b234:	f8cd e01c 	str.w	lr, [sp, #28]
   2b238:	f8df e08c 	ldr.w	lr, [pc, #140]	; 2b2c8 <rpc_transport_ipc_shutdown+0xf0>
   2b23c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   2b240:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   2b244:	f8de e000 	ldr.w	lr, [lr]
   2b248:	f8cd e018 	str.w	lr, [sp, #24]
   2b24c:	f8df e07c 	ldr.w	lr, [pc, #124]	; 2b2cc <rpc_transport_ipc_shutdown+0xf4>
   2b250:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2b254:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   2b258:	f8de e000 	ldr.w	lr, [lr]
   2b25c:	f8cd e014 	str.w	lr, [sp, #20]
   2b260:	f8dd e014 	ldr.w	lr, [sp, #20]
   2b264:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   2b268:	f8d1 c000 	ldr.w	ip, [r1]
   2b26c:	f8cd c010 	str.w	ip, [sp, #16]
   2b270:	f8dd c010 	ldr.w	ip, [sp, #16]
   2b274:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   2b278:	680f      	ldr	r7, [r1, #0]
   2b27a:	9703      	str	r7, [sp, #12]
   2b27c:	9f03      	ldr	r7, [sp, #12]
   2b27e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2b282:	6808      	ldr	r0, [r1, #0]
   2b284:	9002      	str	r0, [sp, #8]
   2b286:	9802      	ldr	r0, [sp, #8]
   2b288:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   2b28c:	680e      	ldr	r6, [r1, #0]
   2b28e:	480c      	ldr	r0, [pc, #48]	; (2b2c0 <rpc_transport_ipc_shutdown+0xe8>)
   2b290:	9601      	str	r6, [sp, #4]
   2b292:	9e01      	ldr	r6, [sp, #4]
   2b294:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   2b298:	6809      	ldr	r1, [r1, #0]
   2b29a:	4b0a      	ldr	r3, [pc, #40]	; (2b2c4 <rpc_transport_ipc_shutdown+0xec>)
   2b29c:	9100      	str	r1, [sp, #0]
   2b29e:	9900      	ldr	r1, [sp, #0]
   2b2a0:	8002      	strh	r2, [r0, #0]
   2b2a2:	601c      	str	r4, [r3, #0]
   2b2a4:	b00c      	add	sp, #48	; 0x30
   2b2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b2aa:	bf00      	nop
   2b2ac:	4002a000 	.word	0x4002a000
   2b2b0:	4002a5a0 	.word	0x4002a5a0
   2b2b4:	4002a308 	.word	0x4002a308
   2b2b8:	4002a590 	.word	0x4002a590
   2b2bc:	4002a598 	.word	0x4002a598
   2b2c0:	200287a6 	.word	0x200287a6
   2b2c4:	2002392c 	.word	0x2002392c
   2b2c8:	4002a5a8 	.word	0x4002a5a8
   2b2cc:	4002a5ac 	.word	0x4002a5ac

0002b2d0 <bsd_os_application_irq_handler>:
   2b2d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2d4:	f7fc face 	bl	27874 <bsd_os_application_irq_clear>
   2b2d8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 2b3b0 <bsd_os_application_irq_handler+0xe0>
   2b2dc:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 2b3b4 <bsd_os_application_irq_handler+0xe4>
   2b2e0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 2b3b8 <bsd_os_application_irq_handler+0xe8>
   2b2e4:	f108 0908 	add.w	r9, r8, #8
   2b2e8:	f858 7b04 	ldr.w	r7, [r8], #4
   2b2ec:	6839      	ldr	r1, [r7, #0]
   2b2ee:	b361      	cbz	r1, 2b34a <bsd_os_application_irq_handler+0x7a>
   2b2f0:	2400      	movs	r4, #0
   2b2f2:	e002      	b.n	2b2fa <bsd_os_application_irq_handler+0x2a>
   2b2f4:	3401      	adds	r4, #1
   2b2f6:	428c      	cmp	r4, r1
   2b2f8:	d227      	bcs.n	2b34a <bsd_os_application_irq_handler+0x7a>
   2b2fa:	00e6      	lsls	r6, r4, #3
   2b2fc:	19bd      	adds	r5, r7, r6
   2b2fe:	68aa      	ldr	r2, [r5, #8]
   2b300:	2a00      	cmp	r2, #0
   2b302:	d0f7      	beq.n	2b2f4 <bsd_os_application_irq_handler+0x24>
   2b304:	686a      	ldr	r2, [r5, #4]
   2b306:	b2d2      	uxtb	r2, r2
   2b308:	2a01      	cmp	r2, #1
   2b30a:	d1f3      	bne.n	2b2f4 <bsd_os_application_irq_handler+0x24>
   2b30c:	6868      	ldr	r0, [r5, #4]
   2b30e:	f8bb 2000 	ldrh.w	r2, [fp]
   2b312:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   2b316:	d1ed      	bne.n	2b2f4 <bsd_os_application_irq_handler+0x24>
   2b318:	68a8      	ldr	r0, [r5, #8]
   2b31a:	6841      	ldr	r1, [r0, #4]
   2b31c:	b2c9      	uxtb	r1, r1
   2b31e:	2902      	cmp	r1, #2
   2b320:	d02c      	beq.n	2b37c <bsd_os_application_irq_handler+0xac>
   2b322:	2901      	cmp	r1, #1
   2b324:	d015      	beq.n	2b352 <bsd_os_application_irq_handler+0x82>
   2b326:	3604      	adds	r6, #4
   2b328:	59b9      	ldr	r1, [r7, r6]
   2b32a:	3201      	adds	r2, #1
   2b32c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   2b330:	f041 0103 	orr.w	r1, r1, #3
   2b334:	51b9      	str	r1, [r7, r6]
   2b336:	f8ab 2000 	strh.w	r2, [fp]
   2b33a:	f7fc fa93 	bl	27864 <bsd_os_application_irq_set>
   2b33e:	f858 7c04 	ldr.w	r7, [r8, #-4]
   2b342:	3401      	adds	r4, #1
   2b344:	6839      	ldr	r1, [r7, #0]
   2b346:	428c      	cmp	r4, r1
   2b348:	d3d7      	bcc.n	2b2fa <bsd_os_application_irq_handler+0x2a>
   2b34a:	45c1      	cmp	r9, r8
   2b34c:	d1cc      	bne.n	2b2e8 <bsd_os_application_irq_handler+0x18>
   2b34e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b352:	6801      	ldr	r1, [r0, #0]
   2b354:	0c09      	lsrs	r1, r1, #16
   2b356:	f002 ff45 	bl	2e1e4 <rpc_handle_ctrl_message>
   2b35a:	2801      	cmp	r0, #1
   2b35c:	d014      	beq.n	2b388 <bsd_os_application_irq_handler+0xb8>
   2b35e:	d310      	bcc.n	2b382 <bsd_os_application_irq_handler+0xb2>
   2b360:	2802      	cmp	r0, #2
   2b362:	d007      	beq.n	2b374 <bsd_os_application_irq_handler+0xa4>
   2b364:	2203      	movs	r2, #3
   2b366:	4b11      	ldr	r3, [pc, #68]	; (2b3ac <bsd_os_application_irq_handler+0xdc>)
   2b368:	4610      	mov	r0, r2
   2b36a:	f8ca 2000 	str.w	r2, [sl]
   2b36e:	601a      	str	r2, [r3, #0]
   2b370:	f005 fb6c 	bl	30a4c <rpc_transport_ipc_fault_handler>
   2b374:	f858 7c04 	ldr.w	r7, [r8, #-4]
   2b378:	6839      	ldr	r1, [r7, #0]
   2b37a:	e7bb      	b.n	2b2f4 <bsd_os_application_irq_handler+0x24>
   2b37c:	f002 ff4a 	bl	2e214 <rpc_handle_data_message>
   2b380:	e7eb      	b.n	2b35a <bsd_os_application_irq_handler+0x8a>
   2b382:	f8bb 2000 	ldrh.w	r2, [fp]
   2b386:	e7ce      	b.n	2b326 <bsd_os_application_irq_handler+0x56>
   2b388:	686a      	ldr	r2, [r5, #4]
   2b38a:	f8bb 1000 	ldrh.w	r1, [fp]
   2b38e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2b392:	f042 0202 	orr.w	r2, r2, #2
   2b396:	606a      	str	r2, [r5, #4]
   2b398:	1c4a      	adds	r2, r1, #1
   2b39a:	f8ab 2000 	strh.w	r2, [fp]
   2b39e:	f7fc fa61 	bl	27864 <bsd_os_application_irq_set>
   2b3a2:	f858 7c04 	ldr.w	r7, [r8, #-4]
   2b3a6:	6839      	ldr	r1, [r7, #0]
   2b3a8:	e7a4      	b.n	2b2f4 <bsd_os_application_irq_handler+0x24>
   2b3aa:	bf00      	nop
   2b3ac:	2002391c 	.word	0x2002391c
   2b3b0:	20023924 	.word	0x20023924
   2b3b4:	200287a6 	.word	0x200287a6
   2b3b8:	2002392c 	.word	0x2002392c

0002b3bc <IPC_IRQHandler>:
   2b3bc:	b570      	push	{r4, r5, r6, lr}
   2b3be:	f44f 6680 	mov.w	r6, #1024	; 0x400
   2b3c2:	4d62      	ldr	r5, [pc, #392]	; (2b54c <IPC_IRQHandler+0x190>)
   2b3c4:	4c62      	ldr	r4, [pc, #392]	; (2b550 <IPC_IRQHandler+0x194>)
   2b3c6:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   2b3ca:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   2b3ce:	b086      	sub	sp, #24
   2b3d0:	061b      	lsls	r3, r3, #24
   2b3d2:	d50b      	bpl.n	2b3ec <IPC_IRQHandler+0x30>
   2b3d4:	f7ff fd32 	bl	2ae3c <ipc_trace_handle>
   2b3d8:	f7ff fea2 	bl	2b120 <rpc_trace_coredump_in_progress>
   2b3dc:	2800      	cmp	r0, #0
   2b3de:	d151      	bne.n	2b484 <IPC_IRQHandler+0xc8>
   2b3e0:	4b5c      	ldr	r3, [pc, #368]	; (2b554 <IPC_IRQHandler+0x198>)
   2b3e2:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   2b3e6:	681b      	ldr	r3, [r3, #0]
   2b3e8:	9301      	str	r3, [sp, #4]
   2b3ea:	9b01      	ldr	r3, [sp, #4]
   2b3ec:	4b58      	ldr	r3, [pc, #352]	; (2b550 <IPC_IRQHandler+0x194>)
   2b3ee:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   2b3f2:	f012 0201 	ands.w	r2, r2, #1
   2b3f6:	d11c      	bne.n	2b432 <IPC_IRQHandler+0x76>
   2b3f8:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   2b3fc:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   2b400:	d145      	bne.n	2b48e <IPC_IRQHandler+0xd2>
   2b402:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   2b406:	0750      	lsls	r0, r2, #29
   2b408:	d50c      	bpl.n	2b424 <IPC_IRQHandler+0x68>
   2b40a:	4a53      	ldr	r2, [pc, #332]	; (2b558 <IPC_IRQHandler+0x19c>)
   2b40c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   2b410:	6812      	ldr	r2, [r2, #0]
   2b412:	4b52      	ldr	r3, [pc, #328]	; (2b55c <IPC_IRQHandler+0x1a0>)
   2b414:	9204      	str	r2, [sp, #16]
   2b416:	9a04      	ldr	r2, [sp, #16]
   2b418:	681a      	ldr	r2, [r3, #0]
   2b41a:	2a02      	cmp	r2, #2
   2b41c:	d079      	beq.n	2b512 <IPC_IRQHandler+0x156>
   2b41e:	681a      	ldr	r2, [r3, #0]
   2b420:	2a01      	cmp	r2, #1
   2b422:	d05b      	beq.n	2b4dc <IPC_IRQHandler+0x120>
   2b424:	4b4a      	ldr	r3, [pc, #296]	; (2b550 <IPC_IRQHandler+0x194>)
   2b426:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   2b42a:	06d2      	lsls	r2, r2, #27
   2b42c:	d41e      	bmi.n	2b46c <IPC_IRQHandler+0xb0>
   2b42e:	b006      	add	sp, #24
   2b430:	bd70      	pop	{r4, r5, r6, pc}
   2b432:	2000      	movs	r0, #0
   2b434:	f248 0202 	movw	r2, #32770	; 0x8002
   2b438:	4949      	ldr	r1, [pc, #292]	; (2b560 <IPC_IRQHandler+0x1a4>)
   2b43a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   2b43e:	6809      	ldr	r1, [r1, #0]
   2b440:	9102      	str	r1, [sp, #8]
   2b442:	9902      	ldr	r1, [sp, #8]
   2b444:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   2b448:	4293      	cmp	r3, r2
   2b44a:	d06b      	beq.n	2b524 <IPC_IRQHandler+0x168>
   2b44c:	d82a      	bhi.n	2b4a4 <IPC_IRQHandler+0xe8>
   2b44e:	2b00      	cmp	r3, #0
   2b450:	d062      	beq.n	2b518 <IPC_IRQHandler+0x15c>
   2b452:	2b02      	cmp	r3, #2
   2b454:	d937      	bls.n	2b4c6 <IPC_IRQHandler+0x10a>
   2b456:	f248 0201 	movw	r2, #32769	; 0x8001
   2b45a:	4293      	cmp	r3, r2
   2b45c:	d15c      	bne.n	2b518 <IPC_IRQHandler+0x15c>
   2b45e:	2003      	movs	r0, #3
   2b460:	2207      	movs	r2, #7
   2b462:	493e      	ldr	r1, [pc, #248]	; (2b55c <IPC_IRQHandler+0x1a0>)
   2b464:	4b3f      	ldr	r3, [pc, #252]	; (2b564 <IPC_IRQHandler+0x1a8>)
   2b466:	6008      	str	r0, [r1, #0]
   2b468:	601a      	str	r2, [r3, #0]
   2b46a:	e7e0      	b.n	2b42e <IPC_IRQHandler+0x72>
   2b46c:	2100      	movs	r1, #0
   2b46e:	4a3e      	ldr	r2, [pc, #248]	; (2b568 <IPC_IRQHandler+0x1ac>)
   2b470:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   2b474:	6813      	ldr	r3, [r2, #0]
   2b476:	9305      	str	r3, [sp, #20]
   2b478:	9b05      	ldr	r3, [sp, #20]
   2b47a:	b006      	add	sp, #24
   2b47c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b480:	f7fc b9f0 	b.w	27864 <bsd_os_application_irq_set>
   2b484:	23e0      	movs	r3, #224	; 0xe0
   2b486:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   2b48a:	606e      	str	r6, [r5, #4]
   2b48c:	e7cf      	b.n	2b42e <IPC_IRQHandler+0x72>
   2b48e:	4937      	ldr	r1, [pc, #220]	; (2b56c <IPC_IRQHandler+0x1b0>)
   2b490:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2b494:	680b      	ldr	r3, [r1, #0]
   2b496:	9303      	str	r3, [sp, #12]
   2b498:	9b03      	ldr	r3, [sp, #12]
   2b49a:	b006      	add	sp, #24
   2b49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b4a0:	f7ff be9a 	b.w	2b1d8 <rpc_transport_ipc_shutdown>
   2b4a4:	4a32      	ldr	r2, [pc, #200]	; (2b570 <IPC_IRQHandler+0x1b4>)
   2b4a6:	4293      	cmp	r3, r2
   2b4a8:	d82a      	bhi.n	2b500 <IPC_IRQHandler+0x144>
   2b4aa:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   2b4ae:	d82a      	bhi.n	2b506 <IPC_IRQHandler+0x14a>
   2b4b0:	f248 0203 	movw	r2, #32771	; 0x8003
   2b4b4:	4293      	cmp	r3, r2
   2b4b6:	d12f      	bne.n	2b518 <IPC_IRQHandler+0x15c>
   2b4b8:	2003      	movs	r0, #3
   2b4ba:	2204      	movs	r2, #4
   2b4bc:	4927      	ldr	r1, [pc, #156]	; (2b55c <IPC_IRQHandler+0x1a0>)
   2b4be:	4b29      	ldr	r3, [pc, #164]	; (2b564 <IPC_IRQHandler+0x1a8>)
   2b4c0:	6008      	str	r0, [r1, #0]
   2b4c2:	601a      	str	r2, [r3, #0]
   2b4c4:	e7b3      	b.n	2b42e <IPC_IRQHandler+0x72>
   2b4c6:	2303      	movs	r3, #3
   2b4c8:	4618      	mov	r0, r3
   2b4ca:	4924      	ldr	r1, [pc, #144]	; (2b55c <IPC_IRQHandler+0x1a0>)
   2b4cc:	4a25      	ldr	r2, [pc, #148]	; (2b564 <IPC_IRQHandler+0x1a8>)
   2b4ce:	600b      	str	r3, [r1, #0]
   2b4d0:	6013      	str	r3, [r2, #0]
   2b4d2:	b006      	add	sp, #24
   2b4d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b4d8:	f005 bab8 	b.w	30a4c <rpc_transport_ipc_fault_handler>
   2b4dc:	4a25      	ldr	r2, [pc, #148]	; (2b574 <IPC_IRQHandler+0x1b8>)
   2b4de:	4826      	ldr	r0, [pc, #152]	; (2b578 <IPC_IRQHandler+0x1bc>)
   2b4e0:	6811      	ldr	r1, [r2, #0]
   2b4e2:	688a      	ldr	r2, [r1, #8]
   2b4e4:	6002      	str	r2, [r0, #0]
   2b4e6:	6849      	ldr	r1, [r1, #4]
   2b4e8:	6041      	str	r1, [r0, #4]
   2b4ea:	b312      	cbz	r2, 2b532 <IPC_IRQHandler+0x176>
   2b4ec:	b309      	cbz	r1, 2b532 <IPC_IRQHandler+0x176>
   2b4ee:	6812      	ldr	r2, [r2, #0]
   2b4f0:	2a10      	cmp	r2, #16
   2b4f2:	d824      	bhi.n	2b53e <IPC_IRQHandler+0x182>
   2b4f4:	680a      	ldr	r2, [r1, #0]
   2b4f6:	2a10      	cmp	r2, #16
   2b4f8:	d821      	bhi.n	2b53e <IPC_IRQHandler+0x182>
   2b4fa:	2202      	movs	r2, #2
   2b4fc:	601a      	str	r2, [r3, #0]
   2b4fe:	e791      	b.n	2b424 <IPC_IRQHandler+0x68>
   2b500:	4a1e      	ldr	r2, [pc, #120]	; (2b57c <IPC_IRQHandler+0x1c0>)
   2b502:	4293      	cmp	r3, r2
   2b504:	d108      	bne.n	2b518 <IPC_IRQHandler+0x15c>
   2b506:	2003      	movs	r0, #3
   2b508:	4914      	ldr	r1, [pc, #80]	; (2b55c <IPC_IRQHandler+0x1a0>)
   2b50a:	4a16      	ldr	r2, [pc, #88]	; (2b564 <IPC_IRQHandler+0x1a8>)
   2b50c:	6008      	str	r0, [r1, #0]
   2b50e:	6013      	str	r3, [r2, #0]
   2b510:	e78d      	b.n	2b42e <IPC_IRQHandler+0x72>
   2b512:	f7fc f9a7 	bl	27864 <bsd_os_application_irq_set>
   2b516:	e785      	b.n	2b424 <IPC_IRQHandler+0x68>
   2b518:	2303      	movs	r3, #3
   2b51a:	4910      	ldr	r1, [pc, #64]	; (2b55c <IPC_IRQHandler+0x1a0>)
   2b51c:	4a11      	ldr	r2, [pc, #68]	; (2b564 <IPC_IRQHandler+0x1a8>)
   2b51e:	600b      	str	r3, [r1, #0]
   2b520:	6013      	str	r3, [r2, #0]
   2b522:	e784      	b.n	2b42e <IPC_IRQHandler+0x72>
   2b524:	2003      	movs	r0, #3
   2b526:	2206      	movs	r2, #6
   2b528:	490c      	ldr	r1, [pc, #48]	; (2b55c <IPC_IRQHandler+0x1a0>)
   2b52a:	4b0e      	ldr	r3, [pc, #56]	; (2b564 <IPC_IRQHandler+0x1a8>)
   2b52c:	6008      	str	r0, [r1, #0]
   2b52e:	601a      	str	r2, [r3, #0]
   2b530:	e77d      	b.n	2b42e <IPC_IRQHandler+0x72>
   2b532:	2003      	movs	r0, #3
   2b534:	2110      	movs	r1, #16
   2b536:	4a0b      	ldr	r2, [pc, #44]	; (2b564 <IPC_IRQHandler+0x1a8>)
   2b538:	6018      	str	r0, [r3, #0]
   2b53a:	6011      	str	r1, [r2, #0]
   2b53c:	e772      	b.n	2b424 <IPC_IRQHandler+0x68>
   2b53e:	2003      	movs	r0, #3
   2b540:	f24c 0106 	movw	r1, #49158	; 0xc006
   2b544:	4a07      	ldr	r2, [pc, #28]	; (2b564 <IPC_IRQHandler+0x1a8>)
   2b546:	6018      	str	r0, [r3, #0]
   2b548:	6011      	str	r1, [r2, #0]
   2b54a:	e76b      	b.n	2b424 <IPC_IRQHandler+0x68>
   2b54c:	e000e100 	.word	0xe000e100
   2b550:	4002a000 	.word	0x4002a000
   2b554:	4002a11c 	.word	0x4002a11c
   2b558:	4002a108 	.word	0x4002a108
   2b55c:	2002392c 	.word	0x2002392c
   2b560:	4002a100 	.word	0x4002a100
   2b564:	2002391c 	.word	0x2002391c
   2b568:	4002a110 	.word	0x4002a110
   2b56c:	4002a118 	.word	0x4002a118
   2b570:	04400004 	.word	0x04400004
   2b574:	20023930 	.word	0x20023930
   2b578:	20023924 	.word	0x20023924
   2b57c:	05500001 	.word	0x05500001

0002b580 <rpc_transport_ipc_rx_init>:
   2b580:	2800      	cmp	r0, #0
   2b582:	f000 8109 	beq.w	2b798 <rpc_transport_ipc_rx_init+0x218>
   2b586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b58a:	6805      	ldr	r5, [r0, #0]
   2b58c:	b097      	sub	sp, #92	; 0x5c
   2b58e:	2d00      	cmp	r5, #0
   2b590:	f000 80f8 	beq.w	2b784 <rpc_transport_ipc_rx_init+0x204>
   2b594:	6883      	ldr	r3, [r0, #8]
   2b596:	2b00      	cmp	r3, #0
   2b598:	f000 80f4 	beq.w	2b784 <rpc_transport_ipc_rx_init+0x204>
   2b59c:	6906      	ldr	r6, [r0, #16]
   2b59e:	2e00      	cmp	r6, #0
   2b5a0:	f000 80f0 	beq.w	2b784 <rpc_transport_ipc_rx_init+0x204>
   2b5a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2b5a6:	2c00      	cmp	r4, #0
   2b5a8:	f000 80ec 	beq.w	2b784 <rpc_transport_ipc_rx_init+0x204>
   2b5ac:	6844      	ldr	r4, [r0, #4]
   2b5ae:	2c1b      	cmp	r4, #27
   2b5b0:	f240 80ed 	bls.w	2b78e <rpc_transport_ipc_rx_init+0x20e>
   2b5b4:	68c4      	ldr	r4, [r0, #12]
   2b5b6:	2c0b      	cmp	r4, #11
   2b5b8:	f240 80e9 	bls.w	2b78e <rpc_transport_ipc_rx_init+0x20e>
   2b5bc:	f8d0 e014 	ldr.w	lr, [r0, #20]
   2b5c0:	f1be 0f17 	cmp.w	lr, #23
   2b5c4:	f240 80e3 	bls.w	2b78e <rpc_transport_ipc_rx_init+0x20e>
   2b5c8:	4604      	mov	r4, r0
   2b5ca:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 2b7c0 <rpc_transport_ipc_rx_init+0x240>
   2b5ce:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   2b5d0:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 2b7c4 <rpc_transport_ipc_rx_init+0x244>
   2b5d4:	4690      	mov	r8, r2
   2b5d6:	9101      	str	r1, [sp, #4]
   2b5d8:	4672      	mov	r2, lr
   2b5da:	2100      	movs	r1, #0
   2b5dc:	4630      	mov	r0, r6
   2b5de:	f8ca 7000 	str.w	r7, [sl]
   2b5e2:	f8cb 3000 	str.w	r3, [fp]
   2b5e6:	f00d faca 	bl	38b7e <memset>
   2b5ea:	69e3      	ldr	r3, [r4, #28]
   2b5ec:	4630      	mov	r0, r6
   2b5ee:	6033      	str	r3, [r6, #0]
   2b5f0:	69a3      	ldr	r3, [r4, #24]
   2b5f2:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 2b7c8 <rpc_transport_ipc_rx_init+0x248>
   2b5f6:	6073      	str	r3, [r6, #4]
   2b5f8:	f7ff fb34 	bl	2ac64 <ipc_trace_init>
   2b5fc:	2200      	movs	r2, #0
   2b5fe:	2001      	movs	r0, #1
   2b600:	4b67      	ldr	r3, [pc, #412]	; (2b7a0 <rpc_transport_ipc_rx_init+0x220>)
   2b602:	4968      	ldr	r1, [pc, #416]	; (2b7a4 <rpc_transport_ipc_rx_init+0x224>)
   2b604:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   2b608:	6809      	ldr	r1, [r1, #0]
   2b60a:	f04f 0c80 	mov.w	ip, #128	; 0x80
   2b60e:	9106      	str	r1, [sp, #24]
   2b610:	4965      	ldr	r1, [pc, #404]	; (2b7a8 <rpc_transport_ipc_rx_init+0x228>)
   2b612:	f8dd e018 	ldr.w	lr, [sp, #24]
   2b616:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   2b61a:	6809      	ldr	r1, [r1, #0]
   2b61c:	702a      	strb	r2, [r5, #0]
   2b61e:	9105      	str	r1, [sp, #20]
   2b620:	706a      	strb	r2, [r5, #1]
   2b622:	70ea      	strb	r2, [r5, #3]
   2b624:	70a8      	strb	r0, [r5, #2]
   2b626:	9905      	ldr	r1, [sp, #20]
   2b628:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2b62a:	f8db e000 	ldr.w	lr, [fp]
   2b62e:	6069      	str	r1, [r5, #4]
   2b630:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   2b632:	61ae      	str	r6, [r5, #24]
   2b634:	60a9      	str	r1, [r5, #8]
   2b636:	9901      	ldr	r1, [sp, #4]
   2b638:	f8c5 e014 	str.w	lr, [r5, #20]
   2b63c:	6129      	str	r1, [r5, #16]
   2b63e:	495b      	ldr	r1, [pc, #364]	; (2b7ac <rpc_transport_ipc_rx_init+0x22c>)
   2b640:	f8c5 800c 	str.w	r8, [r5, #12]
   2b644:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   2b648:	680c      	ldr	r4, [r1, #0]
   2b64a:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   2b64e:	9407      	str	r4, [sp, #28]
   2b650:	9c07      	ldr	r4, [sp, #28]
   2b652:	2404      	movs	r4, #4
   2b654:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   2b658:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   2b65c:	4f54      	ldr	r7, [pc, #336]	; (2b7b0 <rpc_transport_ipc_rx_init+0x230>)
   2b65e:	9408      	str	r4, [sp, #32]
   2b660:	9c08      	ldr	r4, [sp, #32]
   2b662:	2410      	movs	r4, #16
   2b664:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   2b668:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   2b66c:	9409      	str	r4, [sp, #36]	; 0x24
   2b66e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2b670:	2440      	movs	r4, #64	; 0x40
   2b672:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   2b676:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   2b67a:	940a      	str	r4, [sp, #40]	; 0x28
   2b67c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2b67e:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   2b682:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   2b686:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   2b68a:	940b      	str	r4, [sp, #44]	; 0x2c
   2b68c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2b68e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2b692:	680c      	ldr	r4, [r1, #0]
   2b694:	940c      	str	r4, [sp, #48]	; 0x30
   2b696:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b698:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   2b69c:	688c      	ldr	r4, [r1, #8]
   2b69e:	940d      	str	r4, [sp, #52]	; 0x34
   2b6a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   2b6a2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2b6a6:	690c      	ldr	r4, [r1, #16]
   2b6a8:	940e      	str	r4, [sp, #56]	; 0x38
   2b6aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2b6ac:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2b6b0:	698c      	ldr	r4, [r1, #24]
   2b6b2:	940f      	str	r4, [sp, #60]	; 0x3c
   2b6b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2b6b6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   2b6ba:	69cc      	ldr	r4, [r1, #28]
   2b6bc:	f501 7101 	add.w	r1, r1, #516	; 0x204
   2b6c0:	9410      	str	r4, [sp, #64]	; 0x40
   2b6c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   2b6c4:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   2b6c8:	4304      	orrs	r4, r0
   2b6ca:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   2b6ce:	680d      	ldr	r5, [r1, #0]
   2b6d0:	4c38      	ldr	r4, [pc, #224]	; (2b7b4 <rpc_transport_ipc_rx_init+0x234>)
   2b6d2:	9511      	str	r5, [sp, #68]	; 0x44
   2b6d4:	9d11      	ldr	r5, [sp, #68]	; 0x44
   2b6d6:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   2b6da:	4d37      	ldr	r5, [pc, #220]	; (2b7b8 <rpc_transport_ipc_rx_init+0x238>)
   2b6dc:	f046 0604 	orr.w	r6, r6, #4
   2b6e0:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   2b6e4:	680e      	ldr	r6, [r1, #0]
   2b6e6:	9612      	str	r6, [sp, #72]	; 0x48
   2b6e8:	9e12      	ldr	r6, [sp, #72]	; 0x48
   2b6ea:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   2b6ee:	f046 0610 	orr.w	r6, r6, #16
   2b6f2:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   2b6f6:	680e      	ldr	r6, [r1, #0]
   2b6f8:	9613      	str	r6, [sp, #76]	; 0x4c
   2b6fa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   2b6fc:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   2b700:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   2b704:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   2b708:	680e      	ldr	r6, [r1, #0]
   2b70a:	9614      	str	r6, [sp, #80]	; 0x50
   2b70c:	9e14      	ldr	r6, [sp, #80]	; 0x50
   2b70e:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   2b712:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   2b716:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   2b71a:	f8da 3000 	ldr.w	r3, [sl]
   2b71e:	6809      	ldr	r1, [r1, #0]
   2b720:	015b      	lsls	r3, r3, #5
   2b722:	9115      	str	r1, [sp, #84]	; 0x54
   2b724:	b2db      	uxtb	r3, r3
   2b726:	9915      	ldr	r1, [sp, #84]	; 0x54
   2b728:	6022      	str	r2, [r4, #0]
   2b72a:	f8c9 0000 	str.w	r0, [r9]
   2b72e:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   2b732:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   2b736:	f8c5 c004 	str.w	ip, [r5, #4]
   2b73a:	9204      	str	r2, [sp, #16]
   2b73c:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   2b740:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   2b744:	9304      	str	r3, [sp, #16]
   2b746:	9b04      	ldr	r3, [sp, #16]
   2b748:	f8d9 3000 	ldr.w	r3, [r9]
   2b74c:	4283      	cmp	r3, r0
   2b74e:	d10f      	bne.n	2b770 <rpc_transport_ipc_rx_init+0x1f0>
   2b750:	2614      	movs	r6, #20
   2b752:	4d1a      	ldr	r5, [pc, #104]	; (2b7bc <rpc_transport_ipc_rx_init+0x23c>)
   2b754:	e000      	b.n	2b758 <rpc_transport_ipc_rx_init+0x1d8>
   2b756:	b15d      	cbz	r5, 2b770 <rpc_transport_ipc_rx_init+0x1f0>
   2b758:	a903      	add	r1, sp, #12
   2b75a:	2000      	movs	r0, #0
   2b75c:	9603      	str	r6, [sp, #12]
   2b75e:	f7fb fe55 	bl	2740c <bsd_os_timedwait>
   2b762:	9b03      	ldr	r3, [sp, #12]
   2b764:	f8d9 2000 	ldr.w	r2, [r9]
   2b768:	3b14      	subs	r3, #20
   2b76a:	2a01      	cmp	r2, #1
   2b76c:	441d      	add	r5, r3
   2b76e:	d0f2      	beq.n	2b756 <rpc_transport_ipc_rx_init+0x1d6>
   2b770:	f8d9 3000 	ldr.w	r3, [r9]
   2b774:	2b01      	cmp	r3, #1
   2b776:	bf0a      	itet	eq
   2b778:	200d      	moveq	r0, #13
   2b77a:	6820      	ldrne	r0, [r4, #0]
   2b77c:	6020      	streq	r0, [r4, #0]
   2b77e:	b017      	add	sp, #92	; 0x5c
   2b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b784:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2b788:	b017      	add	sp, #92	; 0x5c
   2b78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b78e:	f24c 0009 	movw	r0, #49161	; 0xc009
   2b792:	b017      	add	sp, #92	; 0x5c
   2b794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b798:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2b79c:	4770      	bx	lr
   2b79e:	bf00      	nop
   2b7a0:	4002a000 	.word	0x4002a000
   2b7a4:	4002a610 	.word	0x4002a610
   2b7a8:	4002a614 	.word	0x4002a614
   2b7ac:	4002a590 	.word	0x4002a590
   2b7b0:	40005000 	.word	0x40005000
   2b7b4:	2002391c 	.word	0x2002391c
   2b7b8:	e000e100 	.word	0xe000e100
   2b7bc:	000249f0 	.word	0x000249f0
   2b7c0:	20023920 	.word	0x20023920
   2b7c4:	20023930 	.word	0x20023930
   2b7c8:	2002392c 	.word	0x2002392c

0002b7cc <rpc_transport_ipc_msg_free>:
   2b7cc:	b470      	push	{r4, r5, r6}
   2b7ce:	4e17      	ldr	r6, [pc, #92]	; (2b82c <rpc_transport_ipc_msg_free+0x60>)
   2b7d0:	6831      	ldr	r1, [r6, #0]
   2b7d2:	680d      	ldr	r5, [r1, #0]
   2b7d4:	b1ad      	cbz	r5, 2b802 <rpc_transport_ipc_msg_free+0x36>
   2b7d6:	688b      	ldr	r3, [r1, #8]
   2b7d8:	4283      	cmp	r3, r0
   2b7da:	d024      	beq.n	2b826 <rpc_transport_ipc_msg_free+0x5a>
   2b7dc:	2300      	movs	r3, #0
   2b7de:	3301      	adds	r3, #1
   2b7e0:	00da      	lsls	r2, r3, #3
   2b7e2:	429d      	cmp	r5, r3
   2b7e4:	eb01 0402 	add.w	r4, r1, r2
   2b7e8:	d00b      	beq.n	2b802 <rpc_transport_ipc_msg_free+0x36>
   2b7ea:	68a4      	ldr	r4, [r4, #8]
   2b7ec:	42a0      	cmp	r0, r4
   2b7ee:	d1f6      	bne.n	2b7de <rpc_transport_ipc_msg_free+0x12>
   2b7f0:	3204      	adds	r2, #4
   2b7f2:	588b      	ldr	r3, [r1, r2]
   2b7f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2b7f8:	f043 0303 	orr.w	r3, r3, #3
   2b7fc:	508b      	str	r3, [r1, r2]
   2b7fe:	bc70      	pop	{r4, r5, r6}
   2b800:	4770      	bx	lr
   2b802:	6871      	ldr	r1, [r6, #4]
   2b804:	680d      	ldr	r5, [r1, #0]
   2b806:	2d00      	cmp	r5, #0
   2b808:	d0f9      	beq.n	2b7fe <rpc_transport_ipc_msg_free+0x32>
   2b80a:	688b      	ldr	r3, [r1, #8]
   2b80c:	4283      	cmp	r3, r0
   2b80e:	d00a      	beq.n	2b826 <rpc_transport_ipc_msg_free+0x5a>
   2b810:	2300      	movs	r3, #0
   2b812:	3301      	adds	r3, #1
   2b814:	00da      	lsls	r2, r3, #3
   2b816:	429d      	cmp	r5, r3
   2b818:	eb01 0402 	add.w	r4, r1, r2
   2b81c:	d0ef      	beq.n	2b7fe <rpc_transport_ipc_msg_free+0x32>
   2b81e:	68a4      	ldr	r4, [r4, #8]
   2b820:	42a0      	cmp	r0, r4
   2b822:	d1f6      	bne.n	2b812 <rpc_transport_ipc_msg_free+0x46>
   2b824:	e7e4      	b.n	2b7f0 <rpc_transport_ipc_msg_free+0x24>
   2b826:	2204      	movs	r2, #4
   2b828:	e7e3      	b.n	2b7f2 <rpc_transport_ipc_msg_free+0x26>
   2b82a:	bf00      	nop
   2b82c:	20023924 	.word	0x20023924

0002b830 <rpc_transport_ipc_tx_init>:
   2b830:	2800      	cmp	r0, #0
   2b832:	f000 80b8 	beq.w	2b9a6 <rpc_transport_ipc_tx_init+0x176>
   2b836:	2900      	cmp	r1, #0
   2b838:	f000 80b5 	beq.w	2b9a6 <rpc_transport_ipc_tx_init+0x176>
   2b83c:	2a00      	cmp	r2, #0
   2b83e:	f000 80b2 	beq.w	2b9a6 <rpc_transport_ipc_tx_init+0x176>
   2b842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b846:	6a04      	ldr	r4, [r0, #32]
   2b848:	b085      	sub	sp, #20
   2b84a:	2c00      	cmp	r4, #0
   2b84c:	f000 80a6 	beq.w	2b99c <rpc_transport_ipc_tx_init+0x16c>
   2b850:	6a40      	ldr	r0, [r0, #36]	; 0x24
   2b852:	2800      	cmp	r0, #0
   2b854:	f000 80a2 	beq.w	2b99c <rpc_transport_ipc_tx_init+0x16c>
   2b858:	f642 4587 	movw	r5, #11399	; 0x2c87
   2b85c:	f04f 0a00 	mov.w	sl, #0
   2b860:	4e55      	ldr	r6, [pc, #340]	; (2b9b8 <rpc_transport_ipc_tx_init+0x188>)
   2b862:	42a8      	cmp	r0, r5
   2b864:	f886 a000 	strb.w	sl, [r6]
   2b868:	f240 80a0 	bls.w	2b9ac <rpc_transport_ipc_tx_init+0x17c>
   2b86c:	2708      	movs	r7, #8
   2b86e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 2b9f0 <rpc_transport_ipc_tx_init+0x1c0>
   2b872:	4620      	mov	r0, r4
   2b874:	4616      	mov	r6, r2
   2b876:	460d      	mov	r5, r1
   2b878:	2244      	movs	r2, #68	; 0x44
   2b87a:	4651      	mov	r1, sl
   2b87c:	f8c9 4000 	str.w	r4, [r9]
   2b880:	f00d f97d 	bl	38b7e <memset>
   2b884:	f8d9 2000 	ldr.w	r2, [r9]
   2b888:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b88c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2b9f4 <rpc_transport_ipc_tx_init+0x1c4>
   2b890:	f882 a001 	strb.w	sl, [r2, #1]
   2b894:	f882 a002 	strb.w	sl, [r2, #2]
   2b898:	f882 a003 	strb.w	sl, [r2, #3]
   2b89c:	7017      	strb	r7, [r2, #0]
   2b89e:	4618      	mov	r0, r3
   2b8a0:	2244      	movs	r2, #68	; 0x44
   2b8a2:	4651      	mov	r1, sl
   2b8a4:	f8c8 3000 	str.w	r3, [r8]
   2b8a8:	f00d f969 	bl	38b7e <memset>
   2b8ac:	f8d8 2000 	ldr.w	r2, [r8]
   2b8b0:	f104 0388 	add.w	r3, r4, #136	; 0x88
   2b8b4:	f8df b140 	ldr.w	fp, [pc, #320]	; 2b9f8 <rpc_transport_ipc_tx_init+0x1c8>
   2b8b8:	7017      	strb	r7, [r2, #0]
   2b8ba:	f882 a001 	strb.w	sl, [r2, #1]
   2b8be:	f882 a002 	strb.w	sl, [r2, #2]
   2b8c2:	f882 a003 	strb.w	sl, [r2, #3]
   2b8c6:	4618      	mov	r0, r3
   2b8c8:	f44f 7200 	mov.w	r2, #512	; 0x200
   2b8cc:	4651      	mov	r1, sl
   2b8ce:	f8cb 3000 	str.w	r3, [fp]
   2b8d2:	f00d f954 	bl	38b7e <memset>
   2b8d6:	4b39      	ldr	r3, [pc, #228]	; (2b9bc <rpc_transport_ipc_tx_init+0x18c>)
   2b8d8:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   2b8dc:	f8c3 c000 	str.w	ip, [r3]
   2b8e0:	4651      	mov	r1, sl
   2b8e2:	4660      	mov	r0, ip
   2b8e4:	f44f 7200 	mov.w	r2, #512	; 0x200
   2b8e8:	f00d f949 	bl	38b7e <memset>
   2b8ec:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   2b8f0:	2106      	movs	r1, #6
   2b8f2:	f04f 0e01 	mov.w	lr, #1
   2b8f6:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   2b8fa:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   2b8fe:	4b30      	ldr	r3, [pc, #192]	; (2b9c0 <rpc_transport_ipc_tx_init+0x190>)
   2b900:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   2b904:	605c      	str	r4, [r3, #4]
   2b906:	4c2f      	ldr	r4, [pc, #188]	; (2b9c4 <rpc_transport_ipc_tx_init+0x194>)
   2b908:	f8c3 c008 	str.w	ip, [r3, #8]
   2b90c:	8199      	strh	r1, [r3, #12]
   2b90e:	f8a3 e000 	strh.w	lr, [r3]
   2b912:	4619      	mov	r1, r3
   2b914:	611c      	str	r4, [r3, #16]
   2b916:	4b2c      	ldr	r3, [pc, #176]	; (2b9c8 <rpc_transport_ipc_tx_init+0x198>)
   2b918:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 2b9fc <rpc_transport_ipc_tx_init+0x1cc>
   2b91c:	6120      	str	r0, [r4, #16]
   2b91e:	482b      	ldr	r0, [pc, #172]	; (2b9cc <rpc_transport_ipc_tx_init+0x19c>)
   2b920:	6063      	str	r3, [r4, #4]
   2b922:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   2b926:	60a0      	str	r0, [r4, #8]
   2b928:	f8c4 c000 	str.w	ip, [r4]
   2b92c:	4828      	ldr	r0, [pc, #160]	; (2b9d0 <rpc_transport_ipc_tx_init+0x1a0>)
   2b92e:	60e3      	str	r3, [r4, #12]
   2b930:	6162      	str	r2, [r4, #20]
   2b932:	f006 f9d9 	bl	31ce8 <nrf_mem_register>
   2b936:	2800      	cmp	r0, #0
   2b938:	d132      	bne.n	2b9a0 <rpc_transport_ipc_tx_init+0x170>
   2b93a:	f04f 0c02 	mov.w	ip, #2
   2b93e:	2420      	movs	r4, #32
   2b940:	f8d9 1000 	ldr.w	r1, [r9]
   2b944:	f8db 2000 	ldr.w	r2, [fp]
   2b948:	6029      	str	r1, [r5, #0]
   2b94a:	4b1c      	ldr	r3, [pc, #112]	; (2b9bc <rpc_transport_ipc_tx_init+0x18c>)
   2b94c:	f8d8 1000 	ldr.w	r1, [r8]
   2b950:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 2ba00 <rpc_transport_ipc_tx_init+0x1d0>
   2b954:	4d1f      	ldr	r5, [pc, #124]	; (2b9d4 <rpc_transport_ipc_tx_init+0x1a4>)
   2b956:	6031      	str	r1, [r6, #0]
   2b958:	f8ce 2000 	str.w	r2, [lr]
   2b95c:	681b      	ldr	r3, [r3, #0]
   2b95e:	491e      	ldr	r1, [pc, #120]	; (2b9d8 <rpc_transport_ipc_tx_init+0x1a8>)
   2b960:	f502 7200 	add.w	r2, r2, #512	; 0x200
   2b964:	602a      	str	r2, [r5, #0]
   2b966:	4e1d      	ldr	r6, [pc, #116]	; (2b9dc <rpc_transport_ipc_tx_init+0x1ac>)
   2b968:	4a1d      	ldr	r2, [pc, #116]	; (2b9e0 <rpc_transport_ipc_tx_init+0x1b0>)
   2b96a:	4d1e      	ldr	r5, [pc, #120]	; (2b9e4 <rpc_transport_ipc_tx_init+0x1b4>)
   2b96c:	600b      	str	r3, [r1, #0]
   2b96e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   2b972:	491d      	ldr	r1, [pc, #116]	; (2b9e8 <rpc_transport_ipc_tx_init+0x1b8>)
   2b974:	6033      	str	r3, [r6, #0]
   2b976:	8028      	strh	r0, [r5, #0]
   2b978:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   2b97c:	6809      	ldr	r1, [r1, #0]
   2b97e:	4b1b      	ldr	r3, [pc, #108]	; (2b9ec <rpc_transport_ipc_tx_init+0x1bc>)
   2b980:	9103      	str	r1, [sp, #12]
   2b982:	9903      	ldr	r1, [sp, #12]
   2b984:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   2b988:	6819      	ldr	r1, [r3, #0]
   2b98a:	443b      	add	r3, r7
   2b98c:	9102      	str	r1, [sp, #8]
   2b98e:	9902      	ldr	r1, [sp, #8]
   2b990:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   2b994:	681b      	ldr	r3, [r3, #0]
   2b996:	9301      	str	r3, [sp, #4]
   2b998:	9b01      	ldr	r3, [sp, #4]
   2b99a:	e001      	b.n	2b9a0 <rpc_transport_ipc_tx_init+0x170>
   2b99c:	f24c 0007 	movw	r0, #49159	; 0xc007
   2b9a0:	b005      	add	sp, #20
   2b9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9a6:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2b9aa:	4770      	bx	lr
   2b9ac:	f24c 0004 	movw	r0, #49156	; 0xc004
   2b9b0:	b005      	add	sp, #20
   2b9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9b6:	bf00      	nop
   2b9b8:	2002c6de 	.word	0x2002c6de
   2b9bc:	2002395c 	.word	0x2002395c
   2b9c0:	20023948 	.word	0x20023948
   2b9c4:	2002396c 	.word	0x2002396c
   2b9c8:	00040080 	.word	0x00040080
   2b9cc:	00040100 	.word	0x00040100
   2b9d0:	20023934 	.word	0x20023934
   2b9d4:	20023940 	.word	0x20023940
   2b9d8:	2002393c 	.word	0x2002393c
   2b9dc:	20023938 	.word	0x20023938
   2b9e0:	4002a000 	.word	0x4002a000
   2b9e4:	200287a8 	.word	0x200287a8
   2b9e8:	4002a514 	.word	0x4002a514
   2b9ec:	4002a51c 	.word	0x4002a51c
   2b9f0:	20023968 	.word	0x20023968
   2b9f4:	20023960 	.word	0x20023960
   2b9f8:	20023964 	.word	0x20023964
   2b9fc:	00080040 	.word	0x00080040
   2ba00:	20023944 	.word	0x20023944

0002ba04 <rpc_transport_ipc_send>:
   2ba04:	2800      	cmp	r0, #0
   2ba06:	d061      	beq.n	2bacc <rpc_transport_ipc_send+0xc8>
   2ba08:	b4f0      	push	{r4, r5, r6, r7}
   2ba0a:	4b34      	ldr	r3, [pc, #208]	; (2badc <rpc_transport_ipc_send+0xd8>)
   2ba0c:	b082      	sub	sp, #8
   2ba0e:	681a      	ldr	r2, [r3, #0]
   2ba10:	4b33      	ldr	r3, [pc, #204]	; (2bae0 <rpc_transport_ipc_send+0xdc>)
   2ba12:	4282      	cmp	r2, r0
   2ba14:	d81e      	bhi.n	2ba54 <rpc_transport_ipc_send+0x50>
   2ba16:	681b      	ldr	r3, [r3, #0]
   2ba18:	4932      	ldr	r1, [pc, #200]	; (2bae4 <rpc_transport_ipc_send+0xe0>)
   2ba1a:	4283      	cmp	r3, r0
   2ba1c:	6809      	ldr	r1, [r1, #0]
   2ba1e:	d803      	bhi.n	2ba28 <rpc_transport_ipc_send+0x24>
   2ba20:	4c31      	ldr	r4, [pc, #196]	; (2bae8 <rpc_transport_ipc_send+0xe4>)
   2ba22:	6824      	ldr	r4, [r4, #0]
   2ba24:	4284      	cmp	r4, r0
   2ba26:	d849      	bhi.n	2babc <rpc_transport_ipc_send+0xb8>
   2ba28:	4281      	cmp	r1, r0
   2ba2a:	d90e      	bls.n	2ba4a <rpc_transport_ipc_send+0x46>
   2ba2c:	4b2f      	ldr	r3, [pc, #188]	; (2baec <rpc_transport_ipc_send+0xe8>)
   2ba2e:	781b      	ldrb	r3, [r3, #0]
   2ba30:	2b00      	cmp	r3, #0
   2ba32:	d14e      	bne.n	2bad2 <rpc_transport_ipc_send+0xce>
   2ba34:	1a83      	subs	r3, r0, r2
   2ba36:	492e      	ldr	r1, [pc, #184]	; (2baf0 <rpc_transport_ipc_send+0xec>)
   2ba38:	099f      	lsrs	r7, r3, #6
   2ba3a:	069b      	lsls	r3, r3, #26
   2ba3c:	680a      	ldr	r2, [r1, #0]
   2ba3e:	4d2d      	ldr	r5, [pc, #180]	; (2baf4 <rpc_transport_ipc_send+0xf0>)
   2ba40:	f04f 0403 	mov.w	r4, #3
   2ba44:	f04f 0602 	mov.w	r6, #2
   2ba48:	d014      	beq.n	2ba74 <rpc_transport_ipc_send+0x70>
   2ba4a:	f24c 0010 	movw	r0, #49168	; 0xc010
   2ba4e:	b002      	add	sp, #8
   2ba50:	bcf0      	pop	{r4, r5, r6, r7}
   2ba52:	4770      	bx	lr
   2ba54:	681b      	ldr	r3, [r3, #0]
   2ba56:	4298      	cmp	r0, r3
   2ba58:	d3f7      	bcc.n	2ba4a <rpc_transport_ipc_send+0x46>
   2ba5a:	4a23      	ldr	r2, [pc, #140]	; (2bae8 <rpc_transport_ipc_send+0xe4>)
   2ba5c:	6812      	ldr	r2, [r2, #0]
   2ba5e:	4290      	cmp	r0, r2
   2ba60:	d2f3      	bcs.n	2ba4a <rpc_transport_ipc_send+0x46>
   2ba62:	2401      	movs	r4, #1
   2ba64:	1ac3      	subs	r3, r0, r3
   2ba66:	4a24      	ldr	r2, [pc, #144]	; (2baf8 <rpc_transport_ipc_send+0xf4>)
   2ba68:	099f      	lsrs	r7, r3, #6
   2ba6a:	069b      	lsls	r3, r3, #26
   2ba6c:	4626      	mov	r6, r4
   2ba6e:	6812      	ldr	r2, [r2, #0]
   2ba70:	4d22      	ldr	r5, [pc, #136]	; (2bafc <rpc_transport_ipc_send+0xf8>)
   2ba72:	d1ea      	bne.n	2ba4a <rpc_transport_ipc_send+0x46>
   2ba74:	6841      	ldr	r1, [r0, #4]
   2ba76:	b2c9      	uxtb	r1, r1
   2ba78:	428e      	cmp	r6, r1
   2ba7a:	d122      	bne.n	2bac2 <rpc_transport_ipc_send+0xbe>
   2ba7c:	2020      	movs	r0, #32
   2ba7e:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   2ba82:	491f      	ldr	r1, [pc, #124]	; (2bb00 <rpc_transport_ipc_send+0xfc>)
   2ba84:	685a      	ldr	r2, [r3, #4]
   2ba86:	880e      	ldrh	r6, [r1, #0]
   2ba88:	b292      	uxth	r2, r2
   2ba8a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   2ba8e:	605a      	str	r2, [r3, #4]
   2ba90:	685a      	ldr	r2, [r3, #4]
   2ba92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2ba96:	f042 0201 	orr.w	r2, r2, #1
   2ba9a:	605a      	str	r2, [r3, #4]
   2ba9c:	bf00      	nop
   2ba9e:	3801      	subs	r0, #1
   2baa0:	d1fc      	bne.n	2ba9c <rpc_transport_ipc_send+0x98>
   2baa2:	2201      	movs	r2, #1
   2baa4:	4b17      	ldr	r3, [pc, #92]	; (2bb04 <rpc_transport_ipc_send+0x100>)
   2baa6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2baaa:	682a      	ldr	r2, [r5, #0]
   2baac:	880b      	ldrh	r3, [r1, #0]
   2baae:	9201      	str	r2, [sp, #4]
   2bab0:	9a01      	ldr	r2, [sp, #4]
   2bab2:	3301      	adds	r3, #1
   2bab4:	800b      	strh	r3, [r1, #0]
   2bab6:	b002      	add	sp, #8
   2bab8:	bcf0      	pop	{r4, r5, r6, r7}
   2baba:	4770      	bx	lr
   2babc:	4281      	cmp	r1, r0
   2babe:	d9d0      	bls.n	2ba62 <rpc_transport_ipc_send+0x5e>
   2bac0:	e7b4      	b.n	2ba2c <rpc_transport_ipc_send+0x28>
   2bac2:	f24c 0007 	movw	r0, #49159	; 0xc007
   2bac6:	b002      	add	sp, #8
   2bac8:	bcf0      	pop	{r4, r5, r6, r7}
   2baca:	4770      	bx	lr
   2bacc:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2bad0:	4770      	bx	lr
   2bad2:	f24c 000f 	movw	r0, #49167	; 0xc00f
   2bad6:	b002      	add	sp, #8
   2bad8:	bcf0      	pop	{r4, r5, r6, r7}
   2bada:	4770      	bx	lr
   2badc:	20023944 	.word	0x20023944
   2bae0:	2002393c 	.word	0x2002393c
   2bae4:	20023940 	.word	0x20023940
   2bae8:	20023938 	.word	0x20023938
   2baec:	2002c6de 	.word	0x2002c6de
   2baf0:	20023968 	.word	0x20023968
   2baf4:	4002a00c 	.word	0x4002a00c
   2baf8:	20023960 	.word	0x20023960
   2bafc:	4002a004 	.word	0x4002a004
   2bb00:	200287a8 	.word	0x200287a8
   2bb04:	4002a000 	.word	0x4002a000

0002bb08 <rpc_transport_ipc_tx_rpc_data_alloc>:
   2bb08:	4b18      	ldr	r3, [pc, #96]	; (2bb6c <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   2bb0a:	781b      	ldrb	r3, [r3, #0]
   2bb0c:	bb63      	cbnz	r3, 2bb68 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   2bb0e:	b4f0      	push	{r4, r5, r6, r7}
   2bb10:	4a17      	ldr	r2, [pc, #92]	; (2bb70 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   2bb12:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   2bb16:	6814      	ldr	r4, [r2, #0]
   2bb18:	4b16      	ldr	r3, [pc, #88]	; (2bb74 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   2bb1a:	6825      	ldr	r5, [r4, #0]
   2bb1c:	681e      	ldr	r6, [r3, #0]
   2bb1e:	b1a5      	cbz	r5, 2bb4a <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   2bb20:	4607      	mov	r7, r0
   2bb22:	00c1      	lsls	r1, r0, #3
   2bb24:	1863      	adds	r3, r4, r1
   2bb26:	685a      	ldr	r2, [r3, #4]
   2bb28:	b2d2      	uxtb	r2, r2
   2bb2a:	2a03      	cmp	r2, #3
   2bb2c:	d104      	bne.n	2bb38 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   2bb2e:	609f      	str	r7, [r3, #8]
   2bb30:	685a      	ldr	r2, [r3, #4]
   2bb32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2bb36:	605a      	str	r2, [r3, #4]
   2bb38:	685a      	ldr	r2, [r3, #4]
   2bb3a:	f012 0fff 	tst.w	r2, #255	; 0xff
   2bb3e:	d101      	bne.n	2bb44 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   2bb40:	689b      	ldr	r3, [r3, #8]
   2bb42:	b12b      	cbz	r3, 2bb50 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   2bb44:	3001      	adds	r0, #1
   2bb46:	42a8      	cmp	r0, r5
   2bb48:	d1eb      	bne.n	2bb22 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   2bb4a:	2000      	movs	r0, #0
   2bb4c:	bcf0      	pop	{r4, r5, r6, r7}
   2bb4e:	4770      	bx	lr
   2bb50:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   2bb54:	4421      	add	r1, r4
   2bb56:	6088      	str	r0, [r1, #8]
   2bb58:	6843      	ldr	r3, [r0, #4]
   2bb5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2bb5e:	f043 0302 	orr.w	r3, r3, #2
   2bb62:	6043      	str	r3, [r0, #4]
   2bb64:	bcf0      	pop	{r4, r5, r6, r7}
   2bb66:	4770      	bx	lr
   2bb68:	2000      	movs	r0, #0
   2bb6a:	4770      	bx	lr
   2bb6c:	2002c6de 	.word	0x2002c6de
   2bb70:	20023968 	.word	0x20023968
   2bb74:	20023964 	.word	0x20023964

0002bb78 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   2bb78:	b4f0      	push	{r4, r5, r6, r7}
   2bb7a:	4a15      	ldr	r2, [pc, #84]	; (2bbd0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   2bb7c:	4b15      	ldr	r3, [pc, #84]	; (2bbd4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   2bb7e:	6814      	ldr	r4, [r2, #0]
   2bb80:	681e      	ldr	r6, [r3, #0]
   2bb82:	6825      	ldr	r5, [r4, #0]
   2bb84:	b1ad      	cbz	r5, 2bbb2 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   2bb86:	2000      	movs	r0, #0
   2bb88:	4607      	mov	r7, r0
   2bb8a:	00c1      	lsls	r1, r0, #3
   2bb8c:	1863      	adds	r3, r4, r1
   2bb8e:	685a      	ldr	r2, [r3, #4]
   2bb90:	b2d2      	uxtb	r2, r2
   2bb92:	2a03      	cmp	r2, #3
   2bb94:	d104      	bne.n	2bba0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   2bb96:	609f      	str	r7, [r3, #8]
   2bb98:	685a      	ldr	r2, [r3, #4]
   2bb9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2bb9e:	605a      	str	r2, [r3, #4]
   2bba0:	685a      	ldr	r2, [r3, #4]
   2bba2:	f012 0fff 	tst.w	r2, #255	; 0xff
   2bba6:	d101      	bne.n	2bbac <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   2bba8:	689b      	ldr	r3, [r3, #8]
   2bbaa:	b12b      	cbz	r3, 2bbb8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   2bbac:	3001      	adds	r0, #1
   2bbae:	4285      	cmp	r5, r0
   2bbb0:	d1eb      	bne.n	2bb8a <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   2bbb2:	2000      	movs	r0, #0
   2bbb4:	bcf0      	pop	{r4, r5, r6, r7}
   2bbb6:	4770      	bx	lr
   2bbb8:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   2bbbc:	4421      	add	r1, r4
   2bbbe:	6088      	str	r0, [r1, #8]
   2bbc0:	6843      	ldr	r3, [r0, #4]
   2bbc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2bbc6:	f043 0301 	orr.w	r3, r3, #1
   2bbca:	6043      	str	r3, [r0, #4]
   2bbcc:	bcf0      	pop	{r4, r5, r6, r7}
   2bbce:	4770      	bx	lr
   2bbd0:	20023960 	.word	0x20023960
   2bbd4:	2002395c 	.word	0x2002395c

0002bbd8 <rpc_transport_ipc_tx_data_alloc>:
   2bbd8:	4b03      	ldr	r3, [pc, #12]	; (2bbe8 <rpc_transport_ipc_tx_data_alloc+0x10>)
   2bbda:	781b      	ldrb	r3, [r3, #0]
   2bbdc:	b90b      	cbnz	r3, 2bbe2 <rpc_transport_ipc_tx_data_alloc+0xa>
   2bbde:	f006 ba63 	b.w	320a8 <nrf_shared_malloc>
   2bbe2:	2000      	movs	r0, #0
   2bbe4:	4770      	bx	lr
   2bbe6:	bf00      	nop
   2bbe8:	2002c6de 	.word	0x2002c6de

0002bbec <rpc_transport_ipc_tx_suspend>:
   2bbec:	2201      	movs	r2, #1
   2bbee:	4b01      	ldr	r3, [pc, #4]	; (2bbf4 <rpc_transport_ipc_tx_suspend+0x8>)
   2bbf0:	701a      	strb	r2, [r3, #0]
   2bbf2:	4770      	bx	lr
   2bbf4:	2002c6de 	.word	0x2002c6de

0002bbf8 <secure_client_socket>:
   2bbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bbfc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2bc00:	460c      	mov	r4, r1
   2bc02:	680b      	ldr	r3, [r1, #0]
   2bc04:	4f45      	ldr	r7, [pc, #276]	; (2bd1c <secure_client_socket+0x124>)
   2bc06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2bc0a:	600b      	str	r3, [r1, #0]
   2bc0c:	680b      	ldr	r3, [r1, #0]
   2bc0e:	00c6      	lsls	r6, r0, #3
   2bc10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2bc14:	600b      	str	r3, [r1, #0]
   2bc16:	eb07 0a06 	add.w	sl, r7, r6
   2bc1a:	b084      	sub	sp, #16
   2bc1c:	f8da 3004 	ldr.w	r3, [sl, #4]
   2bc20:	6989      	ldr	r1, [r1, #24]
   2bc22:	f247 0281 	movw	r2, #28801	; 0x7081
   2bc26:	4605      	mov	r5, r0
   2bc28:	f8d4 8000 	ldr.w	r8, [r4]
   2bc2c:	e9cd cc02 	strd	ip, ip, [sp, #8]
   2bc30:	f000 fd76 	bl	2c720 <ip_interface_request_create>
   2bc34:	2800      	cmp	r0, #0
   2bc36:	d06c      	beq.n	2bd12 <secure_client_socket+0x11a>
   2bc38:	f8da 2004 	ldr.w	r2, [sl, #4]
   2bc3c:	4681      	mov	r9, r0
   2bc3e:	2a00      	cmp	r2, #0
   2bc40:	d15c      	bne.n	2bcfc <secure_client_socket+0x104>
   2bc42:	4b37      	ldr	r3, [pc, #220]	; (2bd20 <secure_client_socket+0x128>)
   2bc44:	1971      	adds	r1, r6, r5
   2bc46:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2bc4a:	2224      	movs	r2, #36	; 0x24
   2bc4c:	f109 0014 	add.w	r0, r9, #20
   2bc50:	f00c ff75 	bl	38b3e <memcpy>
   2bc54:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2bc58:	4649      	mov	r1, r9
   2bc5a:	3324      	adds	r3, #36	; 0x24
   2bc5c:	f8c9 3008 	str.w	r3, [r9, #8]
   2bc60:	6822      	ldr	r2, [r4, #0]
   2bc62:	4643      	mov	r3, r8
   2bc64:	0c12      	lsrs	r2, r2, #16
   2bc66:	0412      	lsls	r2, r2, #16
   2bc68:	f042 020a 	orr.w	r2, r2, #10
   2bc6c:	6022      	str	r2, [r4, #0]
   2bc6e:	4620      	mov	r0, r4
   2bc70:	f247 0281 	movw	r2, #28801	; 0x7081
   2bc74:	f000 fd74 	bl	2c760 <ip_interface_request_send>
   2bc78:	4603      	mov	r3, r0
   2bc7a:	b968      	cbnz	r0, 2bc98 <secure_client_socket+0xa0>
   2bc7c:	6823      	ldr	r3, [r4, #0]
   2bc7e:	00db      	lsls	r3, r3, #3
   2bc80:	d40e      	bmi.n	2bca0 <secure_client_socket+0xa8>
   2bc82:	ab03      	add	r3, sp, #12
   2bc84:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2bc88:	210b      	movs	r1, #11
   2bc8a:	4628      	mov	r0, r5
   2bc8c:	f000 fd7c 	bl	2c788 <ip_interface_wait>
   2bc90:	4603      	mov	r3, r0
   2bc92:	b150      	cbz	r0, 2bcaa <secure_client_socket+0xb2>
   2bc94:	f8c4 8000 	str.w	r8, [r4]
   2bc98:	4618      	mov	r0, r3
   2bc9a:	b004      	add	sp, #16
   2bc9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bca0:	2373      	movs	r3, #115	; 0x73
   2bca2:	4618      	mov	r0, r3
   2bca4:	b004      	add	sp, #16
   2bca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bcaa:	220c      	movs	r2, #12
   2bcac:	ab02      	add	r3, sp, #8
   2bcae:	4611      	mov	r1, r2
   2bcb0:	4628      	mov	r0, r5
   2bcb2:	f000 fd69 	bl	2c788 <ip_interface_wait>
   2bcb6:	4603      	mov	r3, r0
   2bcb8:	bb30      	cbnz	r0, 2bd08 <secure_client_socket+0x110>
   2bcba:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   2bcbe:	b138      	cbz	r0, 2bcd0 <secure_client_socket+0xd8>
   2bcc0:	9301      	str	r3, [sp, #4]
   2bcc2:	f006 f935 	bl	31f30 <nrf_free>
   2bcc6:	9b01      	ldr	r3, [sp, #4]
   2bcc8:	443e      	add	r6, r7
   2bcca:	6073      	str	r3, [r6, #4]
   2bccc:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   2bcd0:	4618      	mov	r0, r3
   2bcd2:	6822      	ldr	r2, [r4, #0]
   2bcd4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   2bcd8:	6022      	str	r2, [r4, #0]
   2bcda:	6822      	ldr	r2, [r4, #0]
   2bcdc:	0c12      	lsrs	r2, r2, #16
   2bcde:	0412      	lsls	r2, r2, #16
   2bce0:	f042 020c 	orr.w	r2, r2, #12
   2bce4:	6022      	str	r2, [r4, #0]
   2bce6:	6822      	ldr	r2, [r4, #0]
   2bce8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   2bcec:	6022      	str	r2, [r4, #0]
   2bcee:	6822      	ldr	r2, [r4, #0]
   2bcf0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2bcf4:	6022      	str	r2, [r4, #0]
   2bcf6:	b004      	add	sp, #16
   2bcf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bcfc:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   2bd00:	6800      	ldr	r0, [r0, #0]
   2bd02:	f00c ff1c 	bl	38b3e <memcpy>
   2bd06:	e79c      	b.n	2bc42 <secure_client_socket+0x4a>
   2bd08:	2b73      	cmp	r3, #115	; 0x73
   2bd0a:	d0c5      	beq.n	2bc98 <secure_client_socket+0xa0>
   2bd0c:	f8c4 8000 	str.w	r8, [r4]
   2bd10:	e7c2      	b.n	2bc98 <secure_client_socket+0xa0>
   2bd12:	230c      	movs	r3, #12
   2bd14:	4618      	mov	r0, r3
   2bd16:	b004      	add	sp, #16
   2bd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bd1c:	20023ac8 	.word	0x20023ac8
   2bd20:	20023984 	.word	0x20023984

0002bd24 <tls_interface_init>:
   2bd24:	2201      	movs	r2, #1
   2bd26:	4b02      	ldr	r3, [pc, #8]	; (2bd30 <tls_interface_init+0xc>)
   2bd28:	2000      	movs	r0, #0
   2bd2a:	701a      	strb	r2, [r3, #0]
   2bd2c:	4770      	bx	lr
   2bd2e:	bf00      	nop
   2bd30:	2002c6df 	.word	0x2002c6df

0002bd34 <tls_interface_open>:
   2bd34:	b538      	push	{r3, r4, r5, lr}
   2bd36:	4b23      	ldr	r3, [pc, #140]	; (2bdc4 <tls_interface_open+0x90>)
   2bd38:	781b      	ldrb	r3, [r3, #0]
   2bd3a:	2b00      	cmp	r3, #0
   2bd3c:	d03c      	beq.n	2bdb8 <tls_interface_open+0x84>
   2bd3e:	1e4b      	subs	r3, r1, #1
   2bd40:	2b01      	cmp	r3, #1
   2bd42:	d808      	bhi.n	2bd56 <tls_interface_open+0x22>
   2bd44:	4614      	mov	r4, r2
   2bd46:	b162      	cbz	r2, 2bd62 <tls_interface_open+0x2e>
   2bd48:	2901      	cmp	r1, #1
   2bd4a:	d02d      	beq.n	2bda8 <tls_interface_open+0x74>
   2bd4c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2bd50:	bf08      	it	eq
   2bd52:	2202      	moveq	r2, #2
   2bd54:	d00d      	beq.n	2bd72 <tls_interface_open+0x3e>
   2bd56:	2029      	movs	r0, #41	; 0x29
   2bd58:	f7fb fc10 	bl	2757c <bsd_os_errno_set>
   2bd5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2bd60:	e020      	b.n	2bda4 <tls_interface_open+0x70>
   2bd62:	2901      	cmp	r1, #1
   2bd64:	bf0b      	itete	eq
   2bd66:	2201      	moveq	r2, #1
   2bd68:	2202      	movne	r2, #2
   2bd6a:	f44f 7482 	moveq.w	r4, #260	; 0x104
   2bd6e:	f44f 7487 	movne.w	r4, #270	; 0x10e
   2bd72:	f000 fd3b 	bl	2c7ec <ip_interface_open>
   2bd76:	1e05      	subs	r5, r0, #0
   2bd78:	db1b      	blt.n	2bdb2 <tls_interface_open+0x7e>
   2bd7a:	4b13      	ldr	r3, [pc, #76]	; (2bdc8 <tls_interface_open+0x94>)
   2bd7c:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   2bd80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2bd84:	2224      	movs	r2, #36	; 0x24
   2bd86:	4911      	ldr	r1, [pc, #68]	; (2bdcc <tls_interface_open+0x98>)
   2bd88:	f00c fed9 	bl	38b3e <memcpy>
   2bd8c:	4628      	mov	r0, r5
   2bd8e:	f006 fdcd 	bl	3292c <interface_socket_from_handle_get>
   2bd92:	6803      	ldr	r3, [r0, #0]
   2bd94:	6144      	str	r4, [r0, #20]
   2bd96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2bd9a:	6003      	str	r3, [r0, #0]
   2bd9c:	6803      	ldr	r3, [r0, #0]
   2bd9e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2bda2:	6003      	str	r3, [r0, #0]
   2bda4:	4628      	mov	r0, r5
   2bda6:	bd38      	pop	{r3, r4, r5, pc}
   2bda8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2bdac:	d1d3      	bne.n	2bd56 <tls_interface_open+0x22>
   2bdae:	460a      	mov	r2, r1
   2bdb0:	e7df      	b.n	2bd72 <tls_interface_open+0x3e>
   2bdb2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2bdb6:	e7f5      	b.n	2bda4 <tls_interface_open+0x70>
   2bdb8:	2070      	movs	r0, #112	; 0x70
   2bdba:	f7fb fbdf 	bl	2757c <bsd_os_errno_set>
   2bdbe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2bdc2:	e7ef      	b.n	2bda4 <tls_interface_open+0x70>
   2bdc4:	2002c6df 	.word	0x2002c6df
   2bdc8:	20023984 	.word	0x20023984
   2bdcc:	0003a148 	.word	0x0003a148

0002bdd0 <tls_interface_close>:
   2bdd0:	b538      	push	{r3, r4, r5, lr}
   2bdd2:	4604      	mov	r4, r0
   2bdd4:	f006 fdaa 	bl	3292c <interface_socket_from_handle_get>
   2bdd8:	b180      	cbz	r0, 2bdfc <tls_interface_close+0x2c>
   2bdda:	4d0b      	ldr	r5, [pc, #44]	; (2be08 <tls_interface_close+0x38>)
   2bddc:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   2bde0:	b138      	cbz	r0, 2bdf2 <tls_interface_close+0x22>
   2bde2:	f006 f8a5 	bl	31f30 <nrf_free>
   2bde6:	2300      	movs	r3, #0
   2bde8:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   2bdec:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   2bdf0:	6053      	str	r3, [r2, #4]
   2bdf2:	4620      	mov	r0, r4
   2bdf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bdf8:	f000 bdbe 	b.w	2c978 <ip_interface_close>
   2bdfc:	2009      	movs	r0, #9
   2bdfe:	f7fb fbbd 	bl	2757c <bsd_os_errno_set>
   2be02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2be06:	bd38      	pop	{r3, r4, r5, pc}
   2be08:	20023ac8 	.word	0x20023ac8

0002be0c <tls_interface_sendto>:
   2be0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be10:	b087      	sub	sp, #28
   2be12:	9103      	str	r1, [sp, #12]
   2be14:	4616      	mov	r6, r2
   2be16:	469b      	mov	fp, r3
   2be18:	4682      	mov	sl, r0
   2be1a:	f006 fd87 	bl	3292c <interface_socket_from_handle_get>
   2be1e:	2800      	cmp	r0, #0
   2be20:	f000 8082 	beq.w	2bf28 <tls_interface_sendto+0x11c>
   2be24:	2400      	movs	r4, #0
   2be26:	f01b 0f02 	tst.w	fp, #2
   2be2a:	bf08      	it	eq
   2be2c:	6807      	ldreq	r7, [r0, #0]
   2be2e:	4a40      	ldr	r2, [pc, #256]	; (2bf30 <tls_interface_sendto+0x124>)
   2be30:	bf08      	it	eq
   2be32:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   2be36:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   2be3a:	4605      	mov	r5, r0
   2be3c:	bf0c      	ite	eq
   2be3e:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   2be42:	2700      	movne	r7, #0
   2be44:	46a0      	mov	r8, r4
   2be46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2be4a:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   2be4e:	e00f      	b.n	2be70 <tls_interface_sendto+0x64>
   2be50:	f899 2000 	ldrb.w	r2, [r9]
   2be54:	2a02      	cmp	r2, #2
   2be56:	d061      	beq.n	2bf1c <tls_interface_sendto+0x110>
   2be58:	692a      	ldr	r2, [r5, #16]
   2be5a:	2a01      	cmp	r2, #1
   2be5c:	d061      	beq.n	2bf22 <tls_interface_sendto+0x116>
   2be5e:	2b00      	cmp	r3, #0
   2be60:	db30      	blt.n	2bec4 <tls_interface_sendto+0xb8>
   2be62:	f1b8 0f00 	cmp.w	r8, #0
   2be66:	dc18      	bgt.n	2be9a <tls_interface_sendto+0x8e>
   2be68:	441c      	add	r4, r3
   2be6a:	b1df      	cbz	r7, 2bea4 <tls_interface_sendto+0x98>
   2be6c:	42a6      	cmp	r6, r4
   2be6e:	dd19      	ble.n	2bea4 <tls_interface_sendto+0x98>
   2be70:	6829      	ldr	r1, [r5, #0]
   2be72:	1b32      	subs	r2, r6, r4
   2be74:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2be78:	b289      	uxth	r1, r1
   2be7a:	bfa8      	it	ge
   2be7c:	f44f 6200 	movge.w	r2, #2048	; 0x800
   2be80:	290c      	cmp	r1, #12
   2be82:	d013      	beq.n	2beac <tls_interface_sendto+0xa0>
   2be84:	6829      	ldr	r1, [r5, #0]
   2be86:	b289      	uxth	r1, r1
   2be88:	290b      	cmp	r1, #11
   2be8a:	d0e1      	beq.n	2be50 <tls_interface_sendto+0x44>
   2be8c:	6929      	ldr	r1, [r5, #16]
   2be8e:	2901      	cmp	r1, #1
   2be90:	d024      	beq.n	2bedc <tls_interface_sendto+0xd0>
   2be92:	2902      	cmp	r1, #2
   2be94:	d01a      	beq.n	2becc <tls_interface_sendto+0xc0>
   2be96:	f04f 0839 	mov.w	r8, #57	; 0x39
   2be9a:	4640      	mov	r0, r8
   2be9c:	f7fb fb6e 	bl	2757c <bsd_os_errno_set>
   2bea0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2bea4:	4620      	mov	r0, r4
   2bea6:	b007      	add	sp, #28
   2bea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2beac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2beae:	9903      	ldr	r1, [sp, #12]
   2beb0:	9301      	str	r3, [sp, #4]
   2beb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2beb4:	4421      	add	r1, r4
   2beb6:	9300      	str	r3, [sp, #0]
   2beb8:	4650      	mov	r0, sl
   2beba:	465b      	mov	r3, fp
   2bebc:	f000 fdce 	bl	2ca5c <ip_interface_sendto>
   2bec0:	1e03      	subs	r3, r0, #0
   2bec2:	dad1      	bge.n	2be68 <tls_interface_sendto+0x5c>
   2bec4:	f1b8 0f00 	cmp.w	r8, #0
   2bec8:	ddea      	ble.n	2bea0 <tls_interface_sendto+0x94>
   2beca:	e7e6      	b.n	2be9a <tls_interface_sendto+0x8e>
   2becc:	6829      	ldr	r1, [r5, #0]
   2bece:	b289      	uxth	r1, r1
   2bed0:	2902      	cmp	r1, #2
   2bed2:	d007      	beq.n	2bee4 <tls_interface_sendto+0xd8>
   2bed4:	6829      	ldr	r1, [r5, #0]
   2bed6:	b289      	uxth	r1, r1
   2bed8:	2904      	cmp	r1, #4
   2beda:	d003      	beq.n	2bee4 <tls_interface_sendto+0xd8>
   2bedc:	6829      	ldr	r1, [r5, #0]
   2bede:	b289      	uxth	r1, r1
   2bee0:	2905      	cmp	r1, #5
   2bee2:	d1d8      	bne.n	2be96 <tls_interface_sendto+0x8a>
   2bee4:	f899 1000 	ldrb.w	r1, [r9]
   2bee8:	2902      	cmp	r1, #2
   2beea:	d1b8      	bne.n	2be5e <tls_interface_sendto+0x52>
   2beec:	4629      	mov	r1, r5
   2beee:	4650      	mov	r0, sl
   2bef0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2bef4:	f7ff fe80 	bl	2bbf8 <secure_client_socket>
   2bef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2befc:	4680      	mov	r8, r0
   2befe:	2800      	cmp	r0, #0
   2bf00:	d1ad      	bne.n	2be5e <tls_interface_sendto+0x52>
   2bf02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bf04:	9903      	ldr	r1, [sp, #12]
   2bf06:	9301      	str	r3, [sp, #4]
   2bf08:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2bf0a:	4421      	add	r1, r4
   2bf0c:	9300      	str	r3, [sp, #0]
   2bf0e:	4650      	mov	r0, sl
   2bf10:	465b      	mov	r3, fp
   2bf12:	f000 fda3 	bl	2ca5c <ip_interface_sendto>
   2bf16:	1e03      	subs	r3, r0, #0
   2bf18:	daa6      	bge.n	2be68 <tls_interface_sendto+0x5c>
   2bf1a:	e7c1      	b.n	2bea0 <tls_interface_sendto+0x94>
   2bf1c:	f04f 0823 	mov.w	r8, #35	; 0x23
   2bf20:	e7bb      	b.n	2be9a <tls_interface_sendto+0x8e>
   2bf22:	f04f 082a 	mov.w	r8, #42	; 0x2a
   2bf26:	e7b8      	b.n	2be9a <tls_interface_sendto+0x8e>
   2bf28:	f04f 0809 	mov.w	r8, #9
   2bf2c:	e7b5      	b.n	2be9a <tls_interface_sendto+0x8e>
   2bf2e:	bf00      	nop
   2bf30:	20023984 	.word	0x20023984

0002bf34 <tls_interface_recvfrom>:
   2bf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bf38:	460d      	mov	r5, r1
   2bf3a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2bf3e:	4616      	mov	r6, r2
   2bf40:	461f      	mov	r7, r3
   2bf42:	4604      	mov	r4, r0
   2bf44:	f006 fcf2 	bl	3292c <interface_socket_from_handle_get>
   2bf48:	2800      	cmp	r0, #0
   2bf4a:	d038      	beq.n	2bfbe <tls_interface_recvfrom+0x8a>
   2bf4c:	6803      	ldr	r3, [r0, #0]
   2bf4e:	b29b      	uxth	r3, r3
   2bf50:	2b0c      	cmp	r3, #12
   2bf52:	d00f      	beq.n	2bf74 <tls_interface_recvfrom+0x40>
   2bf54:	6803      	ldr	r3, [r0, #0]
   2bf56:	b29b      	uxth	r3, r3
   2bf58:	2b0d      	cmp	r3, #13
   2bf5a:	d00b      	beq.n	2bf74 <tls_interface_recvfrom+0x40>
   2bf5c:	6903      	ldr	r3, [r0, #16]
   2bf5e:	2b01      	cmp	r3, #1
   2bf60:	d01a      	beq.n	2bf98 <tls_interface_recvfrom+0x64>
   2bf62:	2b02      	cmp	r3, #2
   2bf64:	d010      	beq.n	2bf88 <tls_interface_recvfrom+0x54>
   2bf66:	2023      	movs	r0, #35	; 0x23
   2bf68:	f7fb fb08 	bl	2757c <bsd_os_errno_set>
   2bf6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bf70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bf74:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2bf78:	463b      	mov	r3, r7
   2bf7a:	4632      	mov	r2, r6
   2bf7c:	4629      	mov	r1, r5
   2bf7e:	4620      	mov	r0, r4
   2bf80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bf84:	f000 bee6 	b.w	2cd54 <ip_interface_recvfrom>
   2bf88:	6803      	ldr	r3, [r0, #0]
   2bf8a:	b29b      	uxth	r3, r3
   2bf8c:	2b02      	cmp	r3, #2
   2bf8e:	d007      	beq.n	2bfa0 <tls_interface_recvfrom+0x6c>
   2bf90:	6803      	ldr	r3, [r0, #0]
   2bf92:	b29b      	uxth	r3, r3
   2bf94:	2b04      	cmp	r3, #4
   2bf96:	d003      	beq.n	2bfa0 <tls_interface_recvfrom+0x6c>
   2bf98:	6803      	ldr	r3, [r0, #0]
   2bf9a:	b29b      	uxth	r3, r3
   2bf9c:	2b05      	cmp	r3, #5
   2bf9e:	d1e2      	bne.n	2bf66 <tls_interface_recvfrom+0x32>
   2bfa0:	4b08      	ldr	r3, [pc, #32]	; (2bfc4 <tls_interface_recvfrom+0x90>)
   2bfa2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2bfa6:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2bfaa:	2b02      	cmp	r3, #2
   2bfac:	d1db      	bne.n	2bf66 <tls_interface_recvfrom+0x32>
   2bfae:	4601      	mov	r1, r0
   2bfb0:	4620      	mov	r0, r4
   2bfb2:	f7ff fe21 	bl	2bbf8 <secure_client_socket>
   2bfb6:	2800      	cmp	r0, #0
   2bfb8:	d0dc      	beq.n	2bf74 <tls_interface_recvfrom+0x40>
   2bfba:	dcd5      	bgt.n	2bf68 <tls_interface_recvfrom+0x34>
   2bfbc:	e7d6      	b.n	2bf6c <tls_interface_recvfrom+0x38>
   2bfbe:	2009      	movs	r0, #9
   2bfc0:	e7d2      	b.n	2bf68 <tls_interface_recvfrom+0x34>
   2bfc2:	bf00      	nop
   2bfc4:	20023984 	.word	0x20023984

0002bfc8 <tls_interface_bind>:
   2bfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bfcc:	b082      	sub	sp, #8
   2bfce:	460e      	mov	r6, r1
   2bfd0:	4617      	mov	r7, r2
   2bfd2:	4605      	mov	r5, r0
   2bfd4:	f006 fcaa 	bl	3292c <interface_socket_from_handle_get>
   2bfd8:	2800      	cmp	r0, #0
   2bfda:	d069      	beq.n	2c0b0 <tls_interface_bind+0xe8>
   2bfdc:	6803      	ldr	r3, [r0, #0]
   2bfde:	4604      	mov	r4, r0
   2bfe0:	b29b      	uxth	r3, r3
   2bfe2:	2b02      	cmp	r3, #2
   2bfe4:	d158      	bne.n	2c098 <tls_interface_bind+0xd0>
   2bfe6:	463a      	mov	r2, r7
   2bfe8:	4631      	mov	r1, r6
   2bfea:	4628      	mov	r0, r5
   2bfec:	f001 f9c2 	bl	2d374 <ip_interface_bind>
   2bff0:	2800      	cmp	r0, #0
   2bff2:	d148      	bne.n	2c086 <tls_interface_bind+0xbe>
   2bff4:	00ee      	lsls	r6, r5, #3
   2bff6:	4f2f      	ldr	r7, [pc, #188]	; (2c0b4 <tls_interface_bind+0xec>)
   2bff8:	1973      	adds	r3, r6, r5
   2bffa:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   2bffe:	2b01      	cmp	r3, #1
   2c000:	d002      	beq.n	2c008 <tls_interface_bind+0x40>
   2c002:	b002      	add	sp, #8
   2c004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c008:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2c00c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2c0b8 <tls_interface_bind+0xf0>
   2c010:	f247 0281 	movw	r2, #28801	; 0x7081
   2c014:	eb0a 0906 	add.w	r9, sl, r6
   2c018:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2c01c:	69a1      	ldr	r1, [r4, #24]
   2c01e:	4628      	mov	r0, r5
   2c020:	f8cd c004 	str.w	ip, [sp, #4]
   2c024:	f000 fb7c 	bl	2c720 <ip_interface_request_create>
   2c028:	4680      	mov	r8, r0
   2c02a:	2800      	cmp	r0, #0
   2c02c:	d03e      	beq.n	2c0ac <tls_interface_bind+0xe4>
   2c02e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2c032:	bbaa      	cbnz	r2, 2c0a0 <tls_interface_bind+0xd8>
   2c034:	1971      	adds	r1, r6, r5
   2c036:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   2c03a:	2224      	movs	r2, #36	; 0x24
   2c03c:	f108 0014 	add.w	r0, r8, #20
   2c040:	f00c fd7d 	bl	38b3e <memcpy>
   2c044:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2c048:	4641      	mov	r1, r8
   2c04a:	3324      	adds	r3, #36	; 0x24
   2c04c:	f8c8 3008 	str.w	r3, [r8, #8]
   2c050:	6822      	ldr	r2, [r4, #0]
   2c052:	2304      	movs	r3, #4
   2c054:	0c12      	lsrs	r2, r2, #16
   2c056:	0412      	lsls	r2, r2, #16
   2c058:	f042 020a 	orr.w	r2, r2, #10
   2c05c:	6022      	str	r2, [r4, #0]
   2c05e:	4620      	mov	r0, r4
   2c060:	f247 0281 	movw	r2, #28801	; 0x7081
   2c064:	f000 fb7c 	bl	2c760 <ip_interface_request_send>
   2c068:	b968      	cbnz	r0, 2c086 <tls_interface_bind+0xbe>
   2c06a:	6823      	ldr	r3, [r4, #0]
   2c06c:	00db      	lsls	r3, r3, #3
   2c06e:	d415      	bmi.n	2c09c <tls_interface_bind+0xd4>
   2c070:	4628      	mov	r0, r5
   2c072:	ab01      	add	r3, sp, #4
   2c074:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2c078:	210b      	movs	r1, #11
   2c07a:	f000 fb85 	bl	2c788 <ip_interface_wait>
   2c07e:	2800      	cmp	r0, #0
   2c080:	d0bf      	beq.n	2c002 <tls_interface_bind+0x3a>
   2c082:	2304      	movs	r3, #4
   2c084:	6023      	str	r3, [r4, #0]
   2c086:	2800      	cmp	r0, #0
   2c088:	ddbb      	ble.n	2c002 <tls_interface_bind+0x3a>
   2c08a:	f7fb fa77 	bl	2757c <bsd_os_errno_set>
   2c08e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c092:	b002      	add	sp, #8
   2c094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c098:	202d      	movs	r0, #45	; 0x2d
   2c09a:	e7f6      	b.n	2c08a <tls_interface_bind+0xc2>
   2c09c:	2073      	movs	r0, #115	; 0x73
   2c09e:	e7f4      	b.n	2c08a <tls_interface_bind+0xc2>
   2c0a0:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   2c0a4:	6800      	ldr	r0, [r0, #0]
   2c0a6:	f00c fd4a 	bl	38b3e <memcpy>
   2c0aa:	e7c3      	b.n	2c034 <tls_interface_bind+0x6c>
   2c0ac:	200c      	movs	r0, #12
   2c0ae:	e7ec      	b.n	2c08a <tls_interface_bind+0xc2>
   2c0b0:	2009      	movs	r0, #9
   2c0b2:	e7ea      	b.n	2c08a <tls_interface_bind+0xc2>
   2c0b4:	20023984 	.word	0x20023984
   2c0b8:	20023ac8 	.word	0x20023ac8

0002c0bc <tls_interface_connect>:
   2c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c0be:	460e      	mov	r6, r1
   2c0c0:	4617      	mov	r7, r2
   2c0c2:	4604      	mov	r4, r0
   2c0c4:	f006 fc32 	bl	3292c <interface_socket_from_handle_get>
   2c0c8:	b1e8      	cbz	r0, 2c106 <tls_interface_connect+0x4a>
   2c0ca:	4b13      	ldr	r3, [pc, #76]	; (2c118 <tls_interface_connect+0x5c>)
   2c0cc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2c0d0:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2c0d4:	2b02      	cmp	r3, #2
   2c0d6:	d11c      	bne.n	2c112 <tls_interface_connect+0x56>
   2c0d8:	6803      	ldr	r3, [r0, #0]
   2c0da:	4605      	mov	r5, r0
   2c0dc:	b29b      	uxth	r3, r3
   2c0de:	2b02      	cmp	r3, #2
   2c0e0:	d003      	beq.n	2c0ea <tls_interface_connect+0x2e>
   2c0e2:	6803      	ldr	r3, [r0, #0]
   2c0e4:	b29b      	uxth	r3, r3
   2c0e6:	2b04      	cmp	r3, #4
   2c0e8:	d113      	bne.n	2c112 <tls_interface_connect+0x56>
   2c0ea:	463a      	mov	r2, r7
   2c0ec:	4631      	mov	r1, r6
   2c0ee:	4620      	mov	r0, r4
   2c0f0:	f000 ff58 	bl	2cfa4 <ip_interface_connect>
   2c0f4:	b110      	cbz	r0, 2c0fc <tls_interface_connect+0x40>
   2c0f6:	2800      	cmp	r0, #0
   2c0f8:	dc06      	bgt.n	2c108 <tls_interface_connect+0x4c>
   2c0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c0fc:	4629      	mov	r1, r5
   2c0fe:	4620      	mov	r0, r4
   2c100:	f7ff fd7a 	bl	2bbf8 <secure_client_socket>
   2c104:	e7f7      	b.n	2c0f6 <tls_interface_connect+0x3a>
   2c106:	2009      	movs	r0, #9
   2c108:	f7fb fa38 	bl	2757c <bsd_os_errno_set>
   2c10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c112:	202d      	movs	r0, #45	; 0x2d
   2c114:	e7f8      	b.n	2c108 <tls_interface_connect+0x4c>
   2c116:	bf00      	nop
   2c118:	20023984 	.word	0x20023984

0002c11c <tls_interface_listen>:
   2c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c120:	b085      	sub	sp, #20
   2c122:	4689      	mov	r9, r1
   2c124:	4605      	mov	r5, r0
   2c126:	f006 fc01 	bl	3292c <interface_socket_from_handle_get>
   2c12a:	2800      	cmp	r0, #0
   2c12c:	f000 8084 	beq.w	2c238 <tls_interface_listen+0x11c>
   2c130:	6803      	ldr	r3, [r0, #0]
   2c132:	4604      	mov	r4, r0
   2c134:	00da      	lsls	r2, r3, #3
   2c136:	d47d      	bmi.n	2c234 <tls_interface_listen+0x118>
   2c138:	6903      	ldr	r3, [r0, #16]
   2c13a:	2b01      	cmp	r3, #1
   2c13c:	d17a      	bne.n	2c234 <tls_interface_listen+0x118>
   2c13e:	6803      	ldr	r3, [r0, #0]
   2c140:	b29b      	uxth	r3, r3
   2c142:	2b04      	cmp	r3, #4
   2c144:	d05d      	beq.n	2c202 <tls_interface_listen+0xe6>
   2c146:	6823      	ldr	r3, [r4, #0]
   2c148:	b29b      	uxth	r3, r3
   2c14a:	2b0b      	cmp	r3, #11
   2c14c:	d172      	bne.n	2c234 <tls_interface_listen+0x118>
   2c14e:	4a3b      	ldr	r2, [pc, #236]	; (2c23c <tls_interface_listen+0x120>)
   2c150:	00ee      	lsls	r6, r5, #3
   2c152:	1973      	adds	r3, r6, r5
   2c154:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   2c158:	9201      	str	r2, [sp, #4]
   2c15a:	2b01      	cmp	r3, #1
   2c15c:	d16a      	bne.n	2c234 <tls_interface_listen+0x118>
   2c15e:	2201      	movs	r2, #1
   2c160:	9901      	ldr	r1, [sp, #4]
   2c162:	1973      	adds	r3, r6, r5
   2c164:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   2c168:	6823      	ldr	r3, [r4, #0]
   2c16a:	2b0b      	cmp	r3, #11
   2c16c:	d040      	beq.n	2c1f0 <tls_interface_listen+0xd4>
   2c16e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2c172:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 2c240 <tls_interface_listen+0x124>
   2c176:	f247 0281 	movw	r2, #28801	; 0x7081
   2c17a:	eb0a 0806 	add.w	r8, sl, r6
   2c17e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2c182:	69a1      	ldr	r1, [r4, #24]
   2c184:	4628      	mov	r0, r5
   2c186:	6827      	ldr	r7, [r4, #0]
   2c188:	f8cd c00c 	str.w	ip, [sp, #12]
   2c18c:	f000 fac8 	bl	2c720 <ip_interface_request_create>
   2c190:	4683      	mov	fp, r0
   2c192:	2800      	cmp	r0, #0
   2c194:	d046      	beq.n	2c224 <tls_interface_listen+0x108>
   2c196:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2c19a:	2a00      	cmp	r2, #0
   2c19c:	d144      	bne.n	2c228 <tls_interface_listen+0x10c>
   2c19e:	9b01      	ldr	r3, [sp, #4]
   2c1a0:	1971      	adds	r1, r6, r5
   2c1a2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2c1a6:	2224      	movs	r2, #36	; 0x24
   2c1a8:	f10b 0014 	add.w	r0, fp, #20
   2c1ac:	f00c fcc7 	bl	38b3e <memcpy>
   2c1b0:	f8db 2008 	ldr.w	r2, [fp, #8]
   2c1b4:	4659      	mov	r1, fp
   2c1b6:	3224      	adds	r2, #36	; 0x24
   2c1b8:	f8cb 2008 	str.w	r2, [fp, #8]
   2c1bc:	6822      	ldr	r2, [r4, #0]
   2c1be:	463b      	mov	r3, r7
   2c1c0:	0c12      	lsrs	r2, r2, #16
   2c1c2:	0412      	lsls	r2, r2, #16
   2c1c4:	f042 020a 	orr.w	r2, r2, #10
   2c1c8:	6022      	str	r2, [r4, #0]
   2c1ca:	4620      	mov	r0, r4
   2c1cc:	f247 0281 	movw	r2, #28801	; 0x7081
   2c1d0:	f000 fac6 	bl	2c760 <ip_interface_request_send>
   2c1d4:	b980      	cbnz	r0, 2c1f8 <tls_interface_listen+0xdc>
   2c1d6:	6823      	ldr	r3, [r4, #0]
   2c1d8:	00db      	lsls	r3, r3, #3
   2c1da:	d41b      	bmi.n	2c214 <tls_interface_listen+0xf8>
   2c1dc:	ab03      	add	r3, sp, #12
   2c1de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2c1e2:	210b      	movs	r1, #11
   2c1e4:	4628      	mov	r0, r5
   2c1e6:	f000 facf 	bl	2c788 <ip_interface_wait>
   2c1ea:	b108      	cbz	r0, 2c1f0 <tls_interface_listen+0xd4>
   2c1ec:	6027      	str	r7, [r4, #0]
   2c1ee:	e003      	b.n	2c1f8 <tls_interface_listen+0xdc>
   2c1f0:	4649      	mov	r1, r9
   2c1f2:	4628      	mov	r0, r5
   2c1f4:	f001 f960 	bl	2d4b8 <ip_interface_listen>
   2c1f8:	2800      	cmp	r0, #0
   2c1fa:	dc0c      	bgt.n	2c216 <tls_interface_listen+0xfa>
   2c1fc:	b005      	add	sp, #20
   2c1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c202:	4a0e      	ldr	r2, [pc, #56]	; (2c23c <tls_interface_listen+0x120>)
   2c204:	00ee      	lsls	r6, r5, #3
   2c206:	1973      	adds	r3, r6, r5
   2c208:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   2c20c:	9201      	str	r2, [sp, #4]
   2c20e:	2b02      	cmp	r3, #2
   2c210:	d199      	bne.n	2c146 <tls_interface_listen+0x2a>
   2c212:	e7a4      	b.n	2c15e <tls_interface_listen+0x42>
   2c214:	2073      	movs	r0, #115	; 0x73
   2c216:	f7fb f9b1 	bl	2757c <bsd_os_errno_set>
   2c21a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c21e:	b005      	add	sp, #20
   2c220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c224:	200c      	movs	r0, #12
   2c226:	e7f6      	b.n	2c216 <tls_interface_listen+0xfa>
   2c228:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   2c22c:	6800      	ldr	r0, [r0, #0]
   2c22e:	f00c fc86 	bl	38b3e <memcpy>
   2c232:	e7b4      	b.n	2c19e <tls_interface_listen+0x82>
   2c234:	202d      	movs	r0, #45	; 0x2d
   2c236:	e7ee      	b.n	2c216 <tls_interface_listen+0xfa>
   2c238:	2009      	movs	r0, #9
   2c23a:	e7ec      	b.n	2c216 <tls_interface_listen+0xfa>
   2c23c:	20023984 	.word	0x20023984
   2c240:	20023ac8 	.word	0x20023ac8

0002c244 <tls_interface_accept>:
   2c244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c248:	b083      	sub	sp, #12
   2c24a:	460f      	mov	r7, r1
   2c24c:	4690      	mov	r8, r2
   2c24e:	4699      	mov	r9, r3
   2c250:	4606      	mov	r6, r0
   2c252:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2c256:	f006 fb69 	bl	3292c <interface_socket_from_handle_get>
   2c25a:	9401      	str	r4, [sp, #4]
   2c25c:	2800      	cmp	r0, #0
   2c25e:	d048      	beq.n	2c2f2 <tls_interface_accept+0xae>
   2c260:	6805      	ldr	r5, [r0, #0]
   2c262:	b2ad      	uxth	r5, r5
   2c264:	2d07      	cmp	r5, #7
   2c266:	d144      	bne.n	2c2f2 <tls_interface_accept+0xae>
   2c268:	6803      	ldr	r3, [r0, #0]
   2c26a:	00db      	lsls	r3, r3, #3
   2c26c:	d443      	bmi.n	2c2f6 <tls_interface_accept+0xb2>
   2c26e:	464b      	mov	r3, r9
   2c270:	4642      	mov	r2, r8
   2c272:	4639      	mov	r1, r7
   2c274:	4630      	mov	r0, r6
   2c276:	f001 f99b 	bl	2d5b0 <ip_interface_accept>
   2c27a:	1e04      	subs	r4, r0, #0
   2c27c:	da08      	bge.n	2c290 <tls_interface_accept+0x4c>
   2c27e:	4620      	mov	r0, r4
   2c280:	f7fb f97c 	bl	2757c <bsd_os_errno_set>
   2c284:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2c288:	4620      	mov	r0, r4
   2c28a:	b003      	add	sp, #12
   2c28c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c290:	f006 fb4c 	bl	3292c <interface_socket_from_handle_get>
   2c294:	6803      	ldr	r3, [r0, #0]
   2c296:	f8df 8068 	ldr.w	r8, [pc, #104]	; 2c300 <tls_interface_accept+0xbc>
   2c29a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2c29e:	6003      	str	r3, [r0, #0]
   2c2a0:	6803      	ldr	r3, [r0, #0]
   2c2a2:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   2c2a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2c2aa:	00bf      	lsls	r7, r7, #2
   2c2ac:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2c2b0:	4605      	mov	r5, r0
   2c2b2:	6003      	str	r3, [r0, #0]
   2c2b4:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   2c2b8:	2224      	movs	r2, #36	; 0x24
   2c2ba:	eb08 0007 	add.w	r0, r8, r7
   2c2be:	f00c fc3e 	bl	38b3e <memcpy>
   2c2c2:	2302      	movs	r3, #2
   2c2c4:	f808 3007 	strb.w	r3, [r8, r7]
   2c2c8:	682a      	ldr	r2, [r5, #0]
   2c2ca:	ab01      	add	r3, sp, #4
   2c2cc:	0c12      	lsrs	r2, r2, #16
   2c2ce:	0412      	lsls	r2, r2, #16
   2c2d0:	f042 020b 	orr.w	r2, r2, #11
   2c2d4:	602a      	str	r2, [r5, #0]
   2c2d6:	210c      	movs	r1, #12
   2c2d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2c2dc:	4620      	mov	r0, r4
   2c2de:	f000 fa53 	bl	2c788 <ip_interface_wait>
   2c2e2:	4605      	mov	r5, r0
   2c2e4:	2800      	cmp	r0, #0
   2c2e6:	d0cf      	beq.n	2c288 <tls_interface_accept+0x44>
   2c2e8:	4620      	mov	r0, r4
   2c2ea:	f000 fb45 	bl	2c978 <ip_interface_close>
   2c2ee:	462c      	mov	r4, r5
   2c2f0:	e7c5      	b.n	2c27e <tls_interface_accept+0x3a>
   2c2f2:	2409      	movs	r4, #9
   2c2f4:	e7c3      	b.n	2c27e <tls_interface_accept+0x3a>
   2c2f6:	202d      	movs	r0, #45	; 0x2d
   2c2f8:	f7fb f940 	bl	2757c <bsd_os_errno_set>
   2c2fc:	e7c4      	b.n	2c288 <tls_interface_accept+0x44>
   2c2fe:	bf00      	nop
   2c300:	20023984 	.word	0x20023984

0002c304 <tls_interface_setopt>:
   2c304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c308:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2c30c:	b082      	sub	sp, #8
   2c30e:	9e08      	ldr	r6, [sp, #32]
   2c310:	d120      	bne.n	2c354 <tls_interface_setopt+0x50>
   2c312:	4698      	mov	r8, r3
   2c314:	4617      	mov	r7, r2
   2c316:	4605      	mov	r5, r0
   2c318:	2b00      	cmp	r3, #0
   2c31a:	f000 80a0 	beq.w	2c45e <tls_interface_setopt+0x15a>
   2c31e:	f006 fb05 	bl	3292c <interface_socket_from_handle_get>
   2c322:	2800      	cmp	r0, #0
   2c324:	f000 8097 	beq.w	2c456 <tls_interface_setopt+0x152>
   2c328:	6804      	ldr	r4, [r0, #0]
   2c32a:	b2a4      	uxth	r4, r4
   2c32c:	2c02      	cmp	r4, #2
   2c32e:	d008      	beq.n	2c342 <tls_interface_setopt+0x3e>
   2c330:	6803      	ldr	r3, [r0, #0]
   2c332:	b29b      	uxth	r3, r3
   2c334:	2b04      	cmp	r3, #4
   2c336:	d004      	beq.n	2c342 <tls_interface_setopt+0x3e>
   2c338:	6803      	ldr	r3, [r0, #0]
   2c33a:	b29b      	uxth	r3, r3
   2c33c:	2b05      	cmp	r3, #5
   2c33e:	f040 808a 	bne.w	2c456 <tls_interface_setopt+0x152>
   2c342:	1e7a      	subs	r2, r7, #1
   2c344:	2a05      	cmp	r2, #5
   2c346:	f200 8090 	bhi.w	2c46a <tls_interface_setopt+0x166>
   2c34a:	e8df f002 	tbb	[pc, r2]
   2c34e:	2718      	.short	0x2718
   2c350:	08594b3c 	.word	0x08594b3c
   2c354:	b002      	add	sp, #8
   2c356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c35a:	f001 ba6b 	b.w	2d834 <ip_interface_setopt>
   2c35e:	4601      	mov	r1, r0
   2c360:	e9cd 8600 	strd	r8, r6, [sp]
   2c364:	4628      	mov	r0, r5
   2c366:	f247 0301 	movw	r3, #28673	; 0x7001
   2c36a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2c36e:	f000 ff8b 	bl	2d288 <ip_interface_socketoption_send>
   2c372:	2800      	cmp	r0, #0
   2c374:	d161      	bne.n	2c43a <tls_interface_setopt+0x136>
   2c376:	2000      	movs	r0, #0
   2c378:	b002      	add	sp, #8
   2c37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c37e:	2e04      	cmp	r6, #4
   2c380:	d15a      	bne.n	2c438 <tls_interface_setopt+0x134>
   2c382:	f8d8 0000 	ldr.w	r0, [r8]
   2c386:	2800      	cmp	r0, #0
   2c388:	d05e      	beq.n	2c448 <tls_interface_setopt+0x144>
   2c38a:	2801      	cmp	r0, #1
   2c38c:	d154      	bne.n	2c438 <tls_interface_setopt+0x134>
   2c38e:	4b38      	ldr	r3, [pc, #224]	; (2c470 <tls_interface_setopt+0x16c>)
   2c390:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2c394:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   2c398:	2000      	movs	r0, #0
   2c39a:	e7ed      	b.n	2c378 <tls_interface_setopt+0x74>
   2c39c:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   2c3a0:	d04a      	beq.n	2c438 <tls_interface_setopt+0x134>
   2c3a2:	f016 0703 	ands.w	r7, r6, #3
   2c3a6:	d147      	bne.n	2c438 <tls_interface_setopt+0x134>
   2c3a8:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2c3ac:	00a4      	lsls	r4, r4, #2
   2c3ae:	4b30      	ldr	r3, [pc, #192]	; (2c470 <tls_interface_setopt+0x16c>)
   2c3b0:	1d20      	adds	r0, r4, #4
   2c3b2:	4418      	add	r0, r3
   2c3b4:	4423      	add	r3, r4
   2c3b6:	4632      	mov	r2, r6
   2c3b8:	4641      	mov	r1, r8
   2c3ba:	f883 c003 	strb.w	ip, [r3, #3]
   2c3be:	f00c fbbe 	bl	38b3e <memcpy>
   2c3c2:	4638      	mov	r0, r7
   2c3c4:	e7d8      	b.n	2c378 <tls_interface_setopt+0x74>
   2c3c6:	2e01      	cmp	r6, #1
   2c3c8:	d136      	bne.n	2c438 <tls_interface_setopt+0x134>
   2c3ca:	f898 2000 	ldrb.w	r2, [r8]
   2c3ce:	4b28      	ldr	r3, [pc, #160]	; (2c470 <tls_interface_setopt+0x16c>)
   2c3d0:	3200      	adds	r2, #0
   2c3d2:	bf18      	it	ne
   2c3d4:	2201      	movne	r2, #1
   2c3d6:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2c3da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2c3de:	7062      	strb	r2, [r4, #1]
   2c3e0:	2000      	movs	r0, #0
   2c3e2:	e7c9      	b.n	2c378 <tls_interface_setopt+0x74>
   2c3e4:	2e04      	cmp	r6, #4
   2c3e6:	d127      	bne.n	2c438 <tls_interface_setopt+0x134>
   2c3e8:	f8d8 2000 	ldr.w	r2, [r8]
   2c3ec:	2a02      	cmp	r2, #2
   2c3ee:	d823      	bhi.n	2c438 <tls_interface_setopt+0x134>
   2c3f0:	4b1f      	ldr	r3, [pc, #124]	; (2c470 <tls_interface_setopt+0x16c>)
   2c3f2:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2c3f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2c3fa:	70a2      	strb	r2, [r4, #2]
   2c3fc:	2000      	movs	r0, #0
   2c3fe:	e7bb      	b.n	2c378 <tls_interface_setopt+0x74>
   2c400:	4c1c      	ldr	r4, [pc, #112]	; (2c474 <tls_interface_setopt+0x170>)
   2c402:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   2c406:	b138      	cbz	r0, 2c418 <tls_interface_setopt+0x114>
   2c408:	f005 fd92 	bl	31f30 <nrf_free>
   2c40c:	2200      	movs	r2, #0
   2c40e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   2c412:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   2c416:	605a      	str	r2, [r3, #4]
   2c418:	2e00      	cmp	r6, #0
   2c41a:	d0ac      	beq.n	2c376 <tls_interface_setopt+0x72>
   2c41c:	4630      	mov	r0, r6
   2c41e:	f005 fd7d 	bl	31f1c <nrf_malloc>
   2c422:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   2c426:	b1c0      	cbz	r0, 2c45a <tls_interface_setopt+0x156>
   2c428:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2c42c:	4632      	mov	r2, r6
   2c42e:	4641      	mov	r1, r8
   2c430:	6066      	str	r6, [r4, #4]
   2c432:	f00c fb84 	bl	38b3e <memcpy>
   2c436:	e79e      	b.n	2c376 <tls_interface_setopt+0x72>
   2c438:	2016      	movs	r0, #22
   2c43a:	f7fb f89f 	bl	2757c <bsd_os_errno_set>
   2c43e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c442:	b002      	add	sp, #8
   2c444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c448:	2202      	movs	r2, #2
   2c44a:	4b09      	ldr	r3, [pc, #36]	; (2c470 <tls_interface_setopt+0x16c>)
   2c44c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2c450:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   2c454:	e790      	b.n	2c378 <tls_interface_setopt+0x74>
   2c456:	2009      	movs	r0, #9
   2c458:	e7ef      	b.n	2c43a <tls_interface_setopt+0x136>
   2c45a:	200c      	movs	r0, #12
   2c45c:	e7ed      	b.n	2c43a <tls_interface_setopt+0x136>
   2c45e:	200e      	movs	r0, #14
   2c460:	f7fb f88c 	bl	2757c <bsd_os_errno_set>
   2c464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c468:	e786      	b.n	2c378 <tls_interface_setopt+0x74>
   2c46a:	202a      	movs	r0, #42	; 0x2a
   2c46c:	e7e5      	b.n	2c43a <tls_interface_setopt+0x136>
   2c46e:	bf00      	nop
   2c470:	20023984 	.word	0x20023984
   2c474:	20023ac8 	.word	0x20023ac8

0002c478 <tls_interface_getopt>:
   2c478:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c47a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2c47e:	b083      	sub	sp, #12
   2c480:	9f08      	ldr	r7, [sp, #32]
   2c482:	d112      	bne.n	2c4aa <tls_interface_getopt+0x32>
   2c484:	461d      	mov	r5, r3
   2c486:	b16b      	cbz	r3, 2c4a4 <tls_interface_getopt+0x2c>
   2c488:	b167      	cbz	r7, 2c4a4 <tls_interface_getopt+0x2c>
   2c48a:	4606      	mov	r6, r0
   2c48c:	4614      	mov	r4, r2
   2c48e:	f006 fa4d 	bl	3292c <interface_socket_from_handle_get>
   2c492:	b178      	cbz	r0, 2c4b4 <tls_interface_getopt+0x3c>
   2c494:	3c01      	subs	r4, #1
   2c496:	2c05      	cmp	r4, #5
   2c498:	d859      	bhi.n	2c54e <tls_interface_getopt+0xd6>
   2c49a:	e8df f004 	tbb	[pc, r4]
   2c49e:	2818      	.short	0x2818
   2c4a0:	0d584c40 	.word	0x0d584c40
   2c4a4:	200e      	movs	r0, #14
   2c4a6:	b003      	add	sp, #12
   2c4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c4aa:	b003      	add	sp, #12
   2c4ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c4b0:	f001 ba62 	b.w	2d978 <ip_interface_getopt>
   2c4b4:	2009      	movs	r0, #9
   2c4b6:	e7f6      	b.n	2c4a6 <tls_interface_getopt+0x2e>
   2c4b8:	4601      	mov	r1, r0
   2c4ba:	e9cd 5700 	strd	r5, r7, [sp]
   2c4be:	4630      	mov	r0, r6
   2c4c0:	f247 0301 	movw	r3, #28673	; 0x7001
   2c4c4:	f44f 7280 	mov.w	r2, #256	; 0x100
   2c4c8:	f000 fe2e 	bl	2d128 <ip_interface_socketoption_get>
   2c4cc:	e7eb      	b.n	2c4a6 <tls_interface_getopt+0x2e>
   2c4ce:	683b      	ldr	r3, [r7, #0]
   2c4d0:	2b04      	cmp	r3, #4
   2c4d2:	d13e      	bne.n	2c552 <tls_interface_getopt+0xda>
   2c4d4:	4b22      	ldr	r3, [pc, #136]	; (2c560 <tls_interface_getopt+0xe8>)
   2c4d6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2c4da:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   2c4de:	2000      	movs	r0, #0
   2c4e0:	f1a3 0301 	sub.w	r3, r3, #1
   2c4e4:	fab3 f383 	clz	r3, r3
   2c4e8:	095b      	lsrs	r3, r3, #5
   2c4ea:	602b      	str	r3, [r5, #0]
   2c4ec:	e7db      	b.n	2c4a6 <tls_interface_getopt+0x2e>
   2c4ee:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2c4f2:	491b      	ldr	r1, [pc, #108]	; (2c560 <tls_interface_getopt+0xe8>)
   2c4f4:	683b      	ldr	r3, [r7, #0]
   2c4f6:	00b6      	lsls	r6, r6, #2
   2c4f8:	198a      	adds	r2, r1, r6
   2c4fa:	f013 0403 	ands.w	r4, r3, #3
   2c4fe:	78d0      	ldrb	r0, [r2, #3]
   2c500:	d129      	bne.n	2c556 <tls_interface_getopt+0xde>
   2c502:	089b      	lsrs	r3, r3, #2
   2c504:	4283      	cmp	r3, r0
   2c506:	bf28      	it	cs
   2c508:	4603      	movcs	r3, r0
   2c50a:	009a      	lsls	r2, r3, #2
   2c50c:	b31b      	cbz	r3, 2c556 <tls_interface_getopt+0xde>
   2c50e:	3604      	adds	r6, #4
   2c510:	4431      	add	r1, r6
   2c512:	603a      	str	r2, [r7, #0]
   2c514:	4628      	mov	r0, r5
   2c516:	f00c fb12 	bl	38b3e <memcpy>
   2c51a:	4620      	mov	r0, r4
   2c51c:	e7c3      	b.n	2c4a6 <tls_interface_getopt+0x2e>
   2c51e:	683b      	ldr	r3, [r7, #0]
   2c520:	2b01      	cmp	r3, #1
   2c522:	d116      	bne.n	2c552 <tls_interface_getopt+0xda>
   2c524:	4b0e      	ldr	r3, [pc, #56]	; (2c560 <tls_interface_getopt+0xe8>)
   2c526:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2c52a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2c52e:	7873      	ldrb	r3, [r6, #1]
   2c530:	2000      	movs	r0, #0
   2c532:	702b      	strb	r3, [r5, #0]
   2c534:	e7b7      	b.n	2c4a6 <tls_interface_getopt+0x2e>
   2c536:	683b      	ldr	r3, [r7, #0]
   2c538:	2b04      	cmp	r3, #4
   2c53a:	d10a      	bne.n	2c552 <tls_interface_getopt+0xda>
   2c53c:	4b08      	ldr	r3, [pc, #32]	; (2c560 <tls_interface_getopt+0xe8>)
   2c53e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2c542:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2c546:	78b3      	ldrb	r3, [r6, #2]
   2c548:	2000      	movs	r0, #0
   2c54a:	602b      	str	r3, [r5, #0]
   2c54c:	e7ab      	b.n	2c4a6 <tls_interface_getopt+0x2e>
   2c54e:	202a      	movs	r0, #42	; 0x2a
   2c550:	e7a9      	b.n	2c4a6 <tls_interface_getopt+0x2e>
   2c552:	2016      	movs	r0, #22
   2c554:	e7a7      	b.n	2c4a6 <tls_interface_getopt+0x2e>
   2c556:	2800      	cmp	r0, #0
   2c558:	d1fb      	bne.n	2c552 <tls_interface_getopt+0xda>
   2c55a:	6038      	str	r0, [r7, #0]
   2c55c:	e7a3      	b.n	2c4a6 <tls_interface_getopt+0x2e>
   2c55e:	bf00      	nop
   2c560:	20023984 	.word	0x20023984

0002c564 <tls_rpc_ip_event_handler>:
   2c564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c566:	f248 0581 	movw	r5, #32897	; 0x8081
   2c56a:	42ab      	cmp	r3, r5
   2c56c:	460c      	mov	r4, r1
   2c56e:	d044      	beq.n	2c5fa <tls_rpc_ip_event_handler+0x96>
   2c570:	f249 0182 	movw	r1, #36994	; 0x9082
   2c574:	428b      	cmp	r3, r1
   2c576:	4606      	mov	r6, r0
   2c578:	d02d      	beq.n	2c5d6 <tls_rpc_ip_event_handler+0x72>
   2c57a:	f248 0102 	movw	r1, #32770	; 0x8002
   2c57e:	428b      	cmp	r3, r1
   2c580:	d001      	beq.n	2c586 <tls_rpc_ip_event_handler+0x22>
   2c582:	2001      	movs	r0, #1
   2c584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c586:	2c00      	cmp	r4, #0
   2c588:	d0fb      	beq.n	2c582 <tls_rpc_ip_event_handler+0x1e>
   2c58a:	6963      	ldr	r3, [r4, #20]
   2c58c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   2c590:	d002      	beq.n	2c598 <tls_rpc_ip_event_handler+0x34>
   2c592:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   2c596:	d1f4      	bne.n	2c582 <tls_rpc_ip_event_handler+0x1e>
   2c598:	6823      	ldr	r3, [r4, #0]
   2c59a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   2c59e:	6023      	str	r3, [r4, #0]
   2c5a0:	6955      	ldr	r5, [r2, #20]
   2c5a2:	bb05      	cbnz	r5, 2c5e6 <tls_rpc_ip_event_handler+0x82>
   2c5a4:	6823      	ldr	r3, [r4, #0]
   2c5a6:	0c1b      	lsrs	r3, r3, #16
   2c5a8:	041b      	lsls	r3, r3, #16
   2c5aa:	f043 0305 	orr.w	r3, r3, #5
   2c5ae:	6023      	str	r3, [r4, #0]
   2c5b0:	6823      	ldr	r3, [r4, #0]
   2c5b2:	00db      	lsls	r3, r3, #3
   2c5b4:	d50d      	bpl.n	2c5d2 <tls_rpc_ip_event_handler+0x6e>
   2c5b6:	4b2a      	ldr	r3, [pc, #168]	; (2c660 <tls_rpc_ip_event_handler+0xfc>)
   2c5b8:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   2c5bc:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2c5c0:	2b02      	cmp	r3, #2
   2c5c2:	d106      	bne.n	2c5d2 <tls_rpc_ip_event_handler+0x6e>
   2c5c4:	4630      	mov	r0, r6
   2c5c6:	4621      	mov	r1, r4
   2c5c8:	f7ff fb16 	bl	2bbf8 <secure_client_socket>
   2c5cc:	b108      	cbz	r0, 2c5d2 <tls_rpc_ip_event_handler+0x6e>
   2c5ce:	2873      	cmp	r0, #115	; 0x73
   2c5d0:	d10c      	bne.n	2c5ec <tls_rpc_ip_event_handler+0x88>
   2c5d2:	2000      	movs	r0, #0
   2c5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c5d6:	2c00      	cmp	r4, #0
   2c5d8:	d0fb      	beq.n	2c5d2 <tls_rpc_ip_event_handler+0x6e>
   2c5da:	6823      	ldr	r3, [r4, #0]
   2c5dc:	b29b      	uxth	r3, r3
   2c5de:	2b0b      	cmp	r3, #11
   2c5e0:	d1f7      	bne.n	2c5d2 <tls_rpc_ip_event_handler+0x6e>
   2c5e2:	6915      	ldr	r5, [r2, #16]
   2c5e4:	b1cd      	cbz	r5, 2c61a <tls_rpc_ip_event_handler+0xb6>
   2c5e6:	4628      	mov	r0, r5
   2c5e8:	f000 f890 	bl	2c70c <rpc_error_to_nrf_bsd_error>
   2c5ec:	6060      	str	r0, [r4, #4]
   2c5ee:	6823      	ldr	r3, [r4, #0]
   2c5f0:	2000      	movs	r0, #0
   2c5f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   2c5f6:	6023      	str	r3, [r4, #0]
   2c5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c5fa:	2900      	cmp	r1, #0
   2c5fc:	d0e9      	beq.n	2c5d2 <tls_rpc_ip_event_handler+0x6e>
   2c5fe:	680b      	ldr	r3, [r1, #0]
   2c600:	b29b      	uxth	r3, r3
   2c602:	2b0a      	cmp	r3, #10
   2c604:	d1e5      	bne.n	2c5d2 <tls_rpc_ip_event_handler+0x6e>
   2c606:	6950      	ldr	r0, [r2, #20]
   2c608:	2800      	cmp	r0, #0
   2c60a:	d1ed      	bne.n	2c5e8 <tls_rpc_ip_event_handler+0x84>
   2c60c:	680b      	ldr	r3, [r1, #0]
   2c60e:	0c1b      	lsrs	r3, r3, #16
   2c610:	041b      	lsls	r3, r3, #16
   2c612:	f043 030b 	orr.w	r3, r3, #11
   2c616:	600b      	str	r3, [r1, #0]
   2c618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c61a:	6823      	ldr	r3, [r4, #0]
   2c61c:	4f11      	ldr	r7, [pc, #68]	; (2c664 <tls_rpc_ip_event_handler+0x100>)
   2c61e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   2c622:	6023      	str	r3, [r4, #0]
   2c624:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   2c628:	b130      	cbz	r0, 2c638 <tls_rpc_ip_event_handler+0xd4>
   2c62a:	f005 fc81 	bl	31f30 <nrf_free>
   2c62e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   2c632:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   2c636:	605d      	str	r5, [r3, #4]
   2c638:	6823      	ldr	r3, [r4, #0]
   2c63a:	2000      	movs	r0, #0
   2c63c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2c640:	6023      	str	r3, [r4, #0]
   2c642:	6823      	ldr	r3, [r4, #0]
   2c644:	0c1b      	lsrs	r3, r3, #16
   2c646:	041b      	lsls	r3, r3, #16
   2c648:	f043 030c 	orr.w	r3, r3, #12
   2c64c:	6023      	str	r3, [r4, #0]
   2c64e:	6823      	ldr	r3, [r4, #0]
   2c650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2c654:	6023      	str	r3, [r4, #0]
   2c656:	6823      	ldr	r3, [r4, #0]
   2c658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2c65c:	6023      	str	r3, [r4, #0]
   2c65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c660:	20023984 	.word	0x20023984
   2c664:	20023ac8 	.word	0x20023ac8

0002c668 <ip_client_event_handler>:
   2c668:	f850 1b08 	ldr.w	r1, [r0], #8
   2c66c:	0c09      	lsrs	r1, r1, #16
   2c66e:	f001 bb23 	b.w	2dcb8 <rpc_ip_event_handler>
   2c672:	bf00      	nop

0002c674 <rpc_ip_client_init>:
   2c674:	4801      	ldr	r0, [pc, #4]	; (2c67c <rpc_ip_client_init+0x8>)
   2c676:	f001 be21 	b.w	2e2bc <rpc_client_register>
   2c67a:	bf00      	nop
   2c67c:	0003a16c 	.word	0x0003a16c

0002c680 <rpc_ip_client_request_alloc>:
   2c680:	2300      	movs	r3, #0
   2c682:	b510      	push	{r4, lr}
   2c684:	b082      	sub	sp, #8
   2c686:	9301      	str	r3, [sp, #4]
   2c688:	b158      	cbz	r0, 2c6a2 <rpc_ip_client_request_alloc+0x22>
   2c68a:	4604      	mov	r4, r0
   2c68c:	aa01      	add	r2, sp, #4
   2c68e:	2004      	movs	r0, #4
   2c690:	f001 fe8e 	bl	2e3b0 <rpc_message_alloc>
   2c694:	b918      	cbnz	r0, 2c69e <rpc_ip_client_request_alloc+0x1e>
   2c696:	9b01      	ldr	r3, [sp, #4]
   2c698:	b10b      	cbz	r3, 2c69e <rpc_ip_client_request_alloc+0x1e>
   2c69a:	3308      	adds	r3, #8
   2c69c:	6023      	str	r3, [r4, #0]
   2c69e:	b002      	add	sp, #8
   2c6a0:	bd10      	pop	{r4, pc}
   2c6a2:	2007      	movs	r0, #7
   2c6a4:	b002      	add	sp, #8
   2c6a6:	bd10      	pop	{r4, pc}

0002c6a8 <rpc_ip_client_request_send>:
   2c6a8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2c6ac:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   2c6b0:	d10b      	bne.n	2c6ca <rpc_ip_client_request_send+0x22>
   2c6b2:	b160      	cbz	r0, 2c6ce <rpc_ip_client_request_send+0x26>
   2c6b4:	4603      	mov	r3, r0
   2c6b6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2c6ba:	2004      	movs	r0, #4
   2c6bc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2c6c0:	f843 1d08 	str.w	r1, [r3, #-8]!
   2c6c4:	4619      	mov	r1, r3
   2c6c6:	f001 be63 	b.w	2e390 <rpc_message_send>
   2c6ca:	200f      	movs	r0, #15
   2c6cc:	4770      	bx	lr
   2c6ce:	2007      	movs	r0, #7
   2c6d0:	4770      	bx	lr
   2c6d2:	bf00      	nop

0002c6d4 <rpc_ip_client_message_free>:
   2c6d4:	b120      	cbz	r0, 2c6e0 <rpc_ip_client_message_free+0xc>
   2c6d6:	f1a0 0108 	sub.w	r1, r0, #8
   2c6da:	2004      	movs	r0, #4
   2c6dc:	f001 be94 	b.w	2e408 <rpc_message_free>
   2c6e0:	2007      	movs	r0, #7
   2c6e2:	4770      	bx	lr

0002c6e4 <rpc_ip_client_data_free>:
   2c6e4:	b118      	cbz	r0, 2c6ee <rpc_ip_client_data_free+0xa>
   2c6e6:	4601      	mov	r1, r0
   2c6e8:	2004      	movs	r0, #4
   2c6ea:	f001 be99 	b.w	2e420 <rpc_message_data_free>
   2c6ee:	2007      	movs	r0, #7
   2c6f0:	4770      	bx	lr
   2c6f2:	bf00      	nop

0002c6f4 <ip_recvd_packet_free_cb>:
   2c6f4:	b510      	push	{r4, lr}
   2c6f6:	4604      	mov	r4, r0
   2c6f8:	6800      	ldr	r0, [r0, #0]
   2c6fa:	f7ff fff3 	bl	2c6e4 <rpc_ip_client_data_free>
   2c6fe:	68a0      	ldr	r0, [r4, #8]
   2c700:	b118      	cbz	r0, 2c70a <ip_recvd_packet_free_cb+0x16>
   2c702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c706:	f005 bc13 	b.w	31f30 <nrf_free>
   2c70a:	bd10      	pop	{r4, pc}

0002c70c <rpc_error_to_nrf_bsd_error>:
   2c70c:	2810      	cmp	r0, #16
   2c70e:	bf9a      	itte	ls
   2c710:	4b02      	ldrls	r3, [pc, #8]	; (2c71c <rpc_error_to_nrf_bsd_error+0x10>)
   2c712:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   2c716:	202d      	movhi	r0, #45	; 0x2d
   2c718:	4770      	bx	lr
   2c71a:	bf00      	nop
   2c71c:	0003a17c 	.word	0x0003a17c

0002c720 <ip_interface_request_create>:
   2c720:	b570      	push	{r4, r5, r6, lr}
   2c722:	2500      	movs	r5, #0
   2c724:	b082      	sub	sp, #8
   2c726:	ac02      	add	r4, sp, #8
   2c728:	f844 5d04 	str.w	r5, [r4, #-4]!
   2c72c:	4606      	mov	r6, r0
   2c72e:	460d      	mov	r5, r1
   2c730:	4620      	mov	r0, r4
   2c732:	4619      	mov	r1, r3
   2c734:	4614      	mov	r4, r2
   2c736:	f7ff ffa3 	bl	2c680 <rpc_ip_client_request_alloc>
   2c73a:	b960      	cbnz	r0, 2c756 <ip_interface_request_create+0x36>
   2c73c:	9b01      	ldr	r3, [sp, #4]
   2c73e:	2208      	movs	r2, #8
   2c740:	7258      	strb	r0, [r3, #9]
   2c742:	7298      	strb	r0, [r3, #10]
   2c744:	72d8      	strb	r0, [r3, #11]
   2c746:	4618      	mov	r0, r3
   2c748:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   2c74c:	60dc      	str	r4, [r3, #12]
   2c74e:	611d      	str	r5, [r3, #16]
   2c750:	721a      	strb	r2, [r3, #8]
   2c752:	b002      	add	sp, #8
   2c754:	bd70      	pop	{r4, r5, r6, pc}
   2c756:	9b01      	ldr	r3, [sp, #4]
   2c758:	4618      	mov	r0, r3
   2c75a:	b002      	add	sp, #8
   2c75c:	bd70      	pop	{r4, r5, r6, pc}
   2c75e:	bf00      	nop

0002c760 <ip_interface_request_send>:
   2c760:	b570      	push	{r4, r5, r6, lr}
   2c762:	460c      	mov	r4, r1
   2c764:	4605      	mov	r5, r0
   2c766:	4611      	mov	r1, r2
   2c768:	4620      	mov	r0, r4
   2c76a:	461e      	mov	r6, r3
   2c76c:	f7ff ff9c 	bl	2c6a8 <rpc_ip_client_request_send>
   2c770:	b900      	cbnz	r0, 2c774 <ip_interface_request_send+0x14>
   2c772:	bd70      	pop	{r4, r5, r6, pc}
   2c774:	6820      	ldr	r0, [r4, #0]
   2c776:	b108      	cbz	r0, 2c77c <ip_interface_request_send+0x1c>
   2c778:	f7ff ffb4 	bl	2c6e4 <rpc_ip_client_data_free>
   2c77c:	4620      	mov	r0, r4
   2c77e:	f7ff ffa9 	bl	2c6d4 <rpc_ip_client_message_free>
   2c782:	602e      	str	r6, [r5, #0]
   2c784:	2023      	movs	r0, #35	; 0x23
   2c786:	bd70      	pop	{r4, r5, r6, pc}

0002c788 <ip_interface_wait>:
   2c788:	b538      	push	{r3, r4, r5, lr}
   2c78a:	4605      	mov	r5, r0
   2c78c:	f006 f85a 	bl	32844 <interface_socket_wait>
   2c790:	4604      	mov	r4, r0
   2c792:	b108      	cbz	r0, 2c798 <ip_interface_wait+0x10>
   2c794:	4620      	mov	r0, r4
   2c796:	bd38      	pop	{r3, r4, r5, pc}
   2c798:	4628      	mov	r0, r5
   2c79a:	f006 f8c7 	bl	3292c <interface_socket_from_handle_get>
   2c79e:	2800      	cmp	r0, #0
   2c7a0:	d0f8      	beq.n	2c794 <ip_interface_wait+0xc>
   2c7a2:	6844      	ldr	r4, [r0, #4]
   2c7a4:	2c00      	cmp	r4, #0
   2c7a6:	d0f5      	beq.n	2c794 <ip_interface_wait+0xc>
   2c7a8:	2300      	movs	r3, #0
   2c7aa:	6043      	str	r3, [r0, #4]
   2c7ac:	4620      	mov	r0, r4
   2c7ae:	bd38      	pop	{r3, r4, r5, pc}

0002c7b0 <ip_interface_init>:
   2c7b0:	b538      	push	{r3, r4, r5, lr}
   2c7b2:	2300      	movs	r3, #0
   2c7b4:	4d09      	ldr	r5, [pc, #36]	; (2c7dc <ip_interface_init+0x2c>)
   2c7b6:	4c0a      	ldr	r4, [pc, #40]	; (2c7e0 <ip_interface_init+0x30>)
   2c7b8:	4619      	mov	r1, r3
   2c7ba:	2224      	movs	r2, #36	; 0x24
   2c7bc:	4809      	ldr	r0, [pc, #36]	; (2c7e4 <ip_interface_init+0x34>)
   2c7be:	602b      	str	r3, [r5, #0]
   2c7c0:	6023      	str	r3, [r4, #0]
   2c7c2:	f00c f9dc 	bl	38b7e <memset>
   2c7c6:	f7ff ff55 	bl	2c674 <rpc_ip_client_init>
   2c7ca:	b918      	cbnz	r0, 2c7d4 <ip_interface_init+0x24>
   2c7cc:	2201      	movs	r2, #1
   2c7ce:	4b06      	ldr	r3, [pc, #24]	; (2c7e8 <ip_interface_init+0x38>)
   2c7d0:	701a      	strb	r2, [r3, #0]
   2c7d2:	bd38      	pop	{r3, r4, r5, pc}
   2c7d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7d8:	bd38      	pop	{r3, r4, r5, pc}
   2c7da:	bf00      	nop
   2c7dc:	20023b18 	.word	0x20023b18
   2c7e0:	20023b14 	.word	0x20023b14
   2c7e4:	20023b1c 	.word	0x20023b1c
   2c7e8:	2002c6e0 	.word	0x2002c6e0

0002c7ec <ip_interface_open>:
   2c7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c7f0:	2500      	movs	r5, #0
   2c7f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2c7f6:	4c5e      	ldr	r4, [pc, #376]	; (2c970 <ip_interface_open+0x184>)
   2c7f8:	4606      	mov	r6, r0
   2c7fa:	7820      	ldrb	r0, [r4, #0]
   2c7fc:	b084      	sub	sp, #16
   2c7fe:	e9cd 5701 	strd	r5, r7, [sp, #4]
   2c802:	2800      	cmp	r0, #0
   2c804:	f000 80b0 	beq.w	2c968 <ip_interface_open+0x17c>
   2c808:	4690      	mov	r8, r2
   2c80a:	f026 0208 	bic.w	r2, r6, #8
   2c80e:	2a02      	cmp	r2, #2
   2c810:	460c      	mov	r4, r1
   2c812:	d002      	beq.n	2c81a <ip_interface_open+0x2e>
   2c814:	2e05      	cmp	r6, #5
   2c816:	f040 808d 	bne.w	2c934 <ip_interface_open+0x148>
   2c81a:	1e63      	subs	r3, r4, #1
   2c81c:	2b02      	cmp	r3, #2
   2c81e:	f200 809d 	bhi.w	2c95c <ip_interface_open+0x170>
   2c822:	f1b8 0f00 	cmp.w	r8, #0
   2c826:	d159      	bne.n	2c8dc <ip_interface_open+0xf0>
   2c828:	2c01      	cmp	r4, #1
   2c82a:	d06f      	beq.n	2c90c <ip_interface_open+0x120>
   2c82c:	2c03      	cmp	r4, #3
   2c82e:	bf18      	it	ne
   2c830:	f04f 0802 	movne.w	r8, #2
   2c834:	4a4f      	ldr	r2, [pc, #316]	; (2c974 <ip_interface_open+0x188>)
   2c836:	4621      	mov	r1, r4
   2c838:	a801      	add	r0, sp, #4
   2c83a:	f005 ff51 	bl	326e0 <interface_socket_allocate>
   2c83e:	9b01      	ldr	r3, [sp, #4]
   2c840:	4607      	mov	r7, r0
   2c842:	2b00      	cmp	r3, #0
   2c844:	d060      	beq.n	2c908 <ip_interface_open+0x11c>
   2c846:	2100      	movs	r1, #0
   2c848:	a804      	add	r0, sp, #16
   2c84a:	f840 1d04 	str.w	r1, [r0, #-4]!
   2c84e:	e9c3 6403 	strd	r6, r4, [r3, #12]
   2c852:	f8c3 8014 	str.w	r8, [r3, #20]
   2c856:	f7ff ff13 	bl	2c680 <rpc_ip_client_request_alloc>
   2c85a:	2800      	cmp	r0, #0
   2c85c:	d151      	bne.n	2c902 <ip_interface_open+0x116>
   2c85e:	f247 0201 	movw	r2, #28673	; 0x7001
   2c862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c866:	2108      	movs	r1, #8
   2c868:	9d03      	ldr	r5, [sp, #12]
   2c86a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   2c86e:	60ea      	str	r2, [r5, #12]
   2c870:	7268      	strb	r0, [r5, #9]
   2c872:	72a8      	strb	r0, [r5, #10]
   2c874:	72e8      	strb	r0, [r5, #11]
   2c876:	7229      	strb	r1, [r5, #8]
   2c878:	742b      	strb	r3, [r5, #16]
   2c87a:	746b      	strb	r3, [r5, #17]
   2c87c:	74ab      	strb	r3, [r5, #18]
   2c87e:	74eb      	strb	r3, [r5, #19]
   2c880:	68ab      	ldr	r3, [r5, #8]
   2c882:	2e05      	cmp	r6, #5
   2c884:	f103 030c 	add.w	r3, r3, #12
   2c888:	60ab      	str	r3, [r5, #8]
   2c88a:	d003      	beq.n	2c894 <ip_interface_open+0xa8>
   2c88c:	2e0a      	cmp	r6, #10
   2c88e:	bf14      	ite	ne
   2c890:	2601      	movne	r6, #1
   2c892:	2602      	moveq	r6, #2
   2c894:	616e      	str	r6, [r5, #20]
   2c896:	f8c5 801c 	str.w	r8, [r5, #28]
   2c89a:	61ac      	str	r4, [r5, #24]
   2c89c:	f247 0101 	movw	r1, #28673	; 0x7001
   2c8a0:	4628      	mov	r0, r5
   2c8a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   2c8a6:	f7ff feff 	bl	2c6a8 <rpc_ip_client_request_send>
   2c8aa:	4606      	mov	r6, r0
   2c8ac:	b380      	cbz	r0, 2c910 <ip_interface_open+0x124>
   2c8ae:	6828      	ldr	r0, [r5, #0]
   2c8b0:	b108      	cbz	r0, 2c8b6 <ip_interface_open+0xca>
   2c8b2:	f7ff ff17 	bl	2c6e4 <rpc_ip_client_data_free>
   2c8b6:	4628      	mov	r0, r5
   2c8b8:	f7ff ff0c 	bl	2c6d4 <rpc_ip_client_message_free>
   2c8bc:	2301      	movs	r3, #1
   2c8be:	2523      	movs	r5, #35	; 0x23
   2c8c0:	f8c8 3000 	str.w	r3, [r8]
   2c8c4:	4638      	mov	r0, r7
   2c8c6:	f005 ff6f 	bl	327a8 <interface_socket_free>
   2c8ca:	4628      	mov	r0, r5
   2c8cc:	f7fa fe56 	bl	2757c <bsd_os_errno_set>
   2c8d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2c8d4:	4638      	mov	r0, r7
   2c8d6:	b004      	add	sp, #16
   2c8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c8dc:	2c01      	cmp	r4, #1
   2c8de:	d00a      	beq.n	2c8f6 <ip_interface_open+0x10a>
   2c8e0:	2c02      	cmp	r4, #2
   2c8e2:	d10b      	bne.n	2c8fc <ip_interface_open+0x110>
   2c8e4:	f1b8 0f02 	cmp.w	r8, #2
   2c8e8:	d0a4      	beq.n	2c834 <ip_interface_open+0x48>
   2c8ea:	2029      	movs	r0, #41	; 0x29
   2c8ec:	f7fa fe46 	bl	2757c <bsd_os_errno_set>
   2c8f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2c8f4:	e7ee      	b.n	2c8d4 <ip_interface_open+0xe8>
   2c8f6:	f1b8 0f01 	cmp.w	r8, #1
   2c8fa:	d1f6      	bne.n	2c8ea <ip_interface_open+0xfe>
   2c8fc:	f04f 0802 	mov.w	r8, #2
   2c900:	e798      	b.n	2c834 <ip_interface_open+0x48>
   2c902:	9d03      	ldr	r5, [sp, #12]
   2c904:	2d00      	cmp	r5, #0
   2c906:	d1bb      	bne.n	2c880 <ip_interface_open+0x94>
   2c908:	2569      	movs	r5, #105	; 0x69
   2c90a:	e7db      	b.n	2c8c4 <ip_interface_open+0xd8>
   2c90c:	46a0      	mov	r8, r4
   2c90e:	e791      	b.n	2c834 <ip_interface_open+0x48>
   2c910:	ab02      	add	r3, sp, #8
   2c912:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2c916:	2102      	movs	r1, #2
   2c918:	4638      	mov	r0, r7
   2c91a:	f005 ff93 	bl	32844 <interface_socket_wait>
   2c91e:	4605      	mov	r5, r0
   2c920:	2800      	cmp	r0, #0
   2c922:	d1cf      	bne.n	2c8c4 <ip_interface_open+0xd8>
   2c924:	4638      	mov	r0, r7
   2c926:	f006 f801 	bl	3292c <interface_socket_from_handle_get>
   2c92a:	b138      	cbz	r0, 2c93c <ip_interface_open+0x150>
   2c92c:	6845      	ldr	r5, [r0, #4]
   2c92e:	b12d      	cbz	r5, 2c93c <ip_interface_open+0x150>
   2c930:	6046      	str	r6, [r0, #4]
   2c932:	e7c7      	b.n	2c8c4 <ip_interface_open+0xd8>
   2c934:	202f      	movs	r0, #47	; 0x2f
   2c936:	f7fa fe21 	bl	2757c <bsd_os_errno_set>
   2c93a:	e7cb      	b.n	2c8d4 <ip_interface_open+0xe8>
   2c93c:	3c02      	subs	r4, #2
   2c93e:	2c01      	cmp	r4, #1
   2c940:	d8c8      	bhi.n	2c8d4 <ip_interface_open+0xe8>
   2c942:	4638      	mov	r0, r7
   2c944:	9b01      	ldr	r3, [sp, #4]
   2c946:	681a      	ldr	r2, [r3, #0]
   2c948:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   2c94c:	601a      	str	r2, [r3, #0]
   2c94e:	681a      	ldr	r2, [r3, #0]
   2c950:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2c954:	601a      	str	r2, [r3, #0]
   2c956:	b004      	add	sp, #16
   2c958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c95c:	2016      	movs	r0, #22
   2c95e:	f7fa fe0d 	bl	2757c <bsd_os_errno_set>
   2c962:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2c966:	e7b5      	b.n	2c8d4 <ip_interface_open+0xe8>
   2c968:	2070      	movs	r0, #112	; 0x70
   2c96a:	f7fa fe07 	bl	2757c <bsd_os_errno_set>
   2c96e:	e7b1      	b.n	2c8d4 <ip_interface_open+0xe8>
   2c970:	2002c6e0 	.word	0x2002c6e0
   2c974:	0002c6f5 	.word	0x0002c6f5

0002c978 <ip_interface_close>:
   2c978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c980:	b082      	sub	sp, #8
   2c982:	4606      	mov	r6, r0
   2c984:	9300      	str	r3, [sp, #0]
   2c986:	f005 ffd1 	bl	3292c <interface_socket_from_handle_get>
   2c98a:	2800      	cmp	r0, #0
   2c98c:	d062      	beq.n	2ca54 <ip_interface_close+0xdc>
   2c98e:	4604      	mov	r4, r0
   2c990:	2100      	movs	r1, #0
   2c992:	a802      	add	r0, sp, #8
   2c994:	6827      	ldr	r7, [r4, #0]
   2c996:	f840 1d04 	str.w	r1, [r0, #-4]!
   2c99a:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2c99e:	f7ff fe6f 	bl	2c680 <rpc_ip_client_request_alloc>
   2c9a2:	2800      	cmp	r0, #0
   2c9a4:	d139      	bne.n	2ca1a <ip_interface_close+0xa2>
   2c9a6:	f247 0309 	movw	r3, #28681	; 0x7009
   2c9aa:	2208      	movs	r2, #8
   2c9ac:	9d01      	ldr	r5, [sp, #4]
   2c9ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2c9b2:	60eb      	str	r3, [r5, #12]
   2c9b4:	f8c5 8010 	str.w	r8, [r5, #16]
   2c9b8:	7268      	strb	r0, [r5, #9]
   2c9ba:	72a8      	strb	r0, [r5, #10]
   2c9bc:	72e8      	strb	r0, [r5, #11]
   2c9be:	722a      	strb	r2, [r5, #8]
   2c9c0:	6823      	ldr	r3, [r4, #0]
   2c9c2:	f247 0109 	movw	r1, #28681	; 0x7009
   2c9c6:	0c1b      	lsrs	r3, r3, #16
   2c9c8:	041b      	lsls	r3, r3, #16
   2c9ca:	f043 030d 	orr.w	r3, r3, #13
   2c9ce:	6023      	str	r3, [r4, #0]
   2c9d0:	6823      	ldr	r3, [r4, #0]
   2c9d2:	4628      	mov	r0, r5
   2c9d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2c9d8:	6023      	str	r3, [r4, #0]
   2c9da:	6823      	ldr	r3, [r4, #0]
   2c9dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2c9e0:	6023      	str	r3, [r4, #0]
   2c9e2:	f7ff fe61 	bl	2c6a8 <rpc_ip_client_request_send>
   2c9e6:	bb38      	cbnz	r0, 2ca38 <ip_interface_close+0xc0>
   2c9e8:	466b      	mov	r3, sp
   2c9ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2c9ee:	210e      	movs	r1, #14
   2c9f0:	4630      	mov	r0, r6
   2c9f2:	f005 ff27 	bl	32844 <interface_socket_wait>
   2c9f6:	4604      	mov	r4, r0
   2c9f8:	b1a0      	cbz	r0, 2ca24 <ip_interface_close+0xac>
   2c9fa:	4c17      	ldr	r4, [pc, #92]	; (2ca58 <ip_interface_close+0xe0>)
   2c9fc:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   2ca00:	b120      	cbz	r0, 2ca0c <ip_interface_close+0x94>
   2ca02:	f7ff fe67 	bl	2c6d4 <rpc_ip_client_message_free>
   2ca06:	2300      	movs	r3, #0
   2ca08:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   2ca0c:	4630      	mov	r0, r6
   2ca0e:	f005 fecb 	bl	327a8 <interface_socket_free>
   2ca12:	2000      	movs	r0, #0
   2ca14:	b002      	add	sp, #8
   2ca16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ca1a:	9d01      	ldr	r5, [sp, #4]
   2ca1c:	200c      	movs	r0, #12
   2ca1e:	2d00      	cmp	r5, #0
   2ca20:	d1ce      	bne.n	2c9c0 <ip_interface_close+0x48>
   2ca22:	e012      	b.n	2ca4a <ip_interface_close+0xd2>
   2ca24:	4630      	mov	r0, r6
   2ca26:	f005 ff81 	bl	3292c <interface_socket_from_handle_get>
   2ca2a:	2800      	cmp	r0, #0
   2ca2c:	d0e5      	beq.n	2c9fa <ip_interface_close+0x82>
   2ca2e:	6843      	ldr	r3, [r0, #4]
   2ca30:	2b00      	cmp	r3, #0
   2ca32:	d0e2      	beq.n	2c9fa <ip_interface_close+0x82>
   2ca34:	6044      	str	r4, [r0, #4]
   2ca36:	e7e0      	b.n	2c9fa <ip_interface_close+0x82>
   2ca38:	6828      	ldr	r0, [r5, #0]
   2ca3a:	b108      	cbz	r0, 2ca40 <ip_interface_close+0xc8>
   2ca3c:	f7ff fe52 	bl	2c6e4 <rpc_ip_client_data_free>
   2ca40:	4628      	mov	r0, r5
   2ca42:	f7ff fe47 	bl	2c6d4 <rpc_ip_client_message_free>
   2ca46:	2023      	movs	r0, #35	; 0x23
   2ca48:	6027      	str	r7, [r4, #0]
   2ca4a:	f7fa fd97 	bl	2757c <bsd_os_errno_set>
   2ca4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ca52:	e7df      	b.n	2ca14 <ip_interface_close+0x9c>
   2ca54:	2009      	movs	r0, #9
   2ca56:	e7f8      	b.n	2ca4a <ip_interface_close+0xd2>
   2ca58:	20023b1c 	.word	0x20023b1c

0002ca5c <ip_interface_sendto>:
   2ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ca60:	2400      	movs	r4, #0
   2ca62:	b08b      	sub	sp, #44	; 0x2c
   2ca64:	9102      	str	r1, [sp, #8]
   2ca66:	4615      	mov	r5, r2
   2ca68:	4699      	mov	r9, r3
   2ca6a:	9407      	str	r4, [sp, #28]
   2ca6c:	4607      	mov	r7, r0
   2ca6e:	9e14      	ldr	r6, [sp, #80]	; 0x50
   2ca70:	f005 ff5c 	bl	3292c <interface_socket_from_handle_get>
   2ca74:	2800      	cmp	r0, #0
   2ca76:	f000 8163 	beq.w	2cd40 <ip_interface_sendto+0x2e4>
   2ca7a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2ca7e:	f300 8150 	bgt.w	2cd22 <ip_interface_sendto+0x2c6>
   2ca82:	6903      	ldr	r3, [r0, #16]
   2ca84:	4604      	mov	r4, r0
   2ca86:	2b01      	cmp	r3, #1
   2ca88:	f000 8109 	beq.w	2cc9e <ip_interface_sendto+0x242>
   2ca8c:	6822      	ldr	r2, [r4, #0]
   2ca8e:	0391      	lsls	r1, r2, #14
   2ca90:	d569      	bpl.n	2cb66 <ip_interface_sendto+0x10a>
   2ca92:	f1b9 0f00 	cmp.w	r9, #0
   2ca96:	f000 8112 	beq.w	2ccbe <ip_interface_sendto+0x262>
   2ca9a:	f019 0f02 	tst.w	r9, #2
   2ca9e:	f000 814a 	beq.w	2cd36 <ip_interface_sendto+0x2da>
   2caa2:	2300      	movs	r3, #0
   2caa4:	9303      	str	r3, [sp, #12]
   2caa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2caa8:	f247 0806 	movw	r8, #28678	; 0x7006
   2caac:	2b00      	cmp	r3, #0
   2caae:	bf08      	it	eq
   2cab0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   2cab4:	f04f 0b0c 	mov.w	fp, #12
   2cab8:	4aa5      	ldr	r2, [pc, #660]	; (2cd50 <ip_interface_sendto+0x2f4>)
   2caba:	9308      	str	r3, [sp, #32]
   2cabc:	043b      	lsls	r3, r7, #16
   2cabe:	9200      	str	r2, [sp, #0]
   2cac0:	9304      	str	r3, [sp, #16]
   2cac2:	4629      	mov	r1, r5
   2cac4:	a807      	add	r0, sp, #28
   2cac6:	f7ff fddb 	bl	2c680 <rpc_ip_client_request_alloc>
   2caca:	2804      	cmp	r0, #4
   2cacc:	d05e      	beq.n	2cb8c <ip_interface_sendto+0x130>
   2cace:	2800      	cmp	r0, #0
   2cad0:	f040 813b 	bne.w	2cd4a <ip_interface_sendto+0x2ee>
   2cad4:	9b07      	ldr	r3, [sp, #28]
   2cad6:	f883 b008 	strb.w	fp, [r3, #8]
   2cada:	7258      	strb	r0, [r3, #9]
   2cadc:	7298      	strb	r0, [r3, #10]
   2cade:	72d8      	strb	r0, [r3, #11]
   2cae0:	2e00      	cmp	r6, #0
   2cae2:	d06b      	beq.n	2cbbc <ip_interface_sendto+0x160>
   2cae4:	68e2      	ldr	r2, [r4, #12]
   2cae6:	6871      	ldr	r1, [r6, #4]
   2cae8:	428a      	cmp	r2, r1
   2caea:	f040 80a8 	bne.w	2cc3e <ip_interface_sendto+0x1e2>
   2caee:	7831      	ldrb	r1, [r6, #0]
   2caf0:	9815      	ldr	r0, [sp, #84]	; 0x54
   2caf2:	4288      	cmp	r0, r1
   2caf4:	d10a      	bne.n	2cb0c <ip_interface_sendto+0xb0>
   2caf6:	2a02      	cmp	r2, #2
   2caf8:	f103 001c 	add.w	r0, r3, #28
   2cafc:	f000 80ff 	beq.w	2ccfe <ip_interface_sendto+0x2a2>
   2cb00:	2a0a      	cmp	r2, #10
   2cb02:	d103      	bne.n	2cb0c <ip_interface_sendto+0xb0>
   2cb04:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2cb06:	2a24      	cmp	r2, #36	; 0x24
   2cb08:	f000 80e6 	beq.w	2ccd8 <ip_interface_sendto+0x27c>
   2cb0c:	f04f 0a16 	mov.w	sl, #22
   2cb10:	6818      	ldr	r0, [r3, #0]
   2cb12:	b110      	cbz	r0, 2cb1a <ip_interface_sendto+0xbe>
   2cb14:	f7ff fde6 	bl	2c6e4 <rpc_ip_client_data_free>
   2cb18:	9b07      	ldr	r3, [sp, #28]
   2cb1a:	4618      	mov	r0, r3
   2cb1c:	f7ff fdda 	bl	2c6d4 <rpc_ip_client_message_free>
   2cb20:	6823      	ldr	r3, [r4, #0]
   2cb22:	0318      	lsls	r0, r3, #12
   2cb24:	d40b      	bmi.n	2cb3e <ip_interface_sendto+0xe2>
   2cb26:	6823      	ldr	r3, [r4, #0]
   2cb28:	b29b      	uxth	r3, r3
   2cb2a:	2b0d      	cmp	r3, #13
   2cb2c:	d007      	beq.n	2cb3e <ip_interface_sendto+0xe2>
   2cb2e:	6823      	ldr	r3, [r4, #0]
   2cb30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2cb34:	6023      	str	r3, [r4, #0]
   2cb36:	6823      	ldr	r3, [r4, #0]
   2cb38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2cb3c:	6023      	str	r3, [r4, #0]
   2cb3e:	f1ba 0f00 	cmp.w	sl, #0
   2cb42:	f040 80b3 	bne.w	2ccac <ip_interface_sendto+0x250>
   2cb46:	6823      	ldr	r3, [r4, #0]
   2cb48:	0119      	lsls	r1, r3, #4
   2cb4a:	d57b      	bpl.n	2cc44 <ip_interface_sendto+0x1e8>
   2cb4c:	6823      	ldr	r3, [r4, #0]
   2cb4e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   2cb52:	6023      	str	r3, [r4, #0]
   2cb54:	9b00      	ldr	r3, [sp, #0]
   2cb56:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2cb5a:	2800      	cmp	r0, #0
   2cb5c:	d176      	bne.n	2cc4c <ip_interface_sendto+0x1f0>
   2cb5e:	4628      	mov	r0, r5
   2cb60:	b00b      	add	sp, #44	; 0x2c
   2cb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb66:	6822      	ldr	r2, [r4, #0]
   2cb68:	0092      	lsls	r2, r2, #2
   2cb6a:	d406      	bmi.n	2cb7a <ip_interface_sendto+0x11e>
   2cb6c:	2b01      	cmp	r3, #1
   2cb6e:	f000 80ad 	beq.w	2cccc <ip_interface_sendto+0x270>
   2cb72:	6823      	ldr	r3, [r4, #0]
   2cb74:	031b      	lsls	r3, r3, #12
   2cb76:	f140 80cf 	bpl.w	2cd18 <ip_interface_sendto+0x2bc>
   2cb7a:	6823      	ldr	r3, [r4, #0]
   2cb7c:	031e      	lsls	r6, r3, #12
   2cb7e:	f140 80d5 	bpl.w	2cd2c <ip_interface_sendto+0x2d0>
   2cb82:	4b73      	ldr	r3, [pc, #460]	; (2cd50 <ip_interface_sendto+0x2f4>)
   2cb84:	f8d4 a008 	ldr.w	sl, [r4, #8]
   2cb88:	9300      	str	r3, [sp, #0]
   2cb8a:	e7d8      	b.n	2cb3e <ip_interface_sendto+0xe2>
   2cb8c:	9b03      	ldr	r3, [sp, #12]
   2cb8e:	2b00      	cmp	r3, #0
   2cb90:	d052      	beq.n	2cc38 <ip_interface_sendto+0x1dc>
   2cb92:	9b08      	ldr	r3, [sp, #32]
   2cb94:	3301      	adds	r3, #1
   2cb96:	d094      	beq.n	2cac2 <ip_interface_sendto+0x66>
   2cb98:	230a      	movs	r3, #10
   2cb9a:	a90a      	add	r1, sp, #40	; 0x28
   2cb9c:	f841 3d04 	str.w	r3, [r1, #-4]!
   2cba0:	2000      	movs	r0, #0
   2cba2:	f7fa fc33 	bl	2740c <bsd_os_timedwait>
   2cba6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2cbaa:	f1c2 020a 	rsb	r2, r2, #10
   2cbae:	1a9b      	subs	r3, r3, r2
   2cbb0:	2b00      	cmp	r3, #0
   2cbb2:	9308      	str	r3, [sp, #32]
   2cbb4:	dc85      	bgt.n	2cac2 <ip_interface_sendto+0x66>
   2cbb6:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   2cbba:	e7b1      	b.n	2cb20 <ip_interface_sendto+0xc4>
   2cbbc:	4642      	mov	r2, r8
   2cbbe:	f8c3 9014 	str.w	r9, [r3, #20]
   2cbc2:	69a1      	ldr	r1, [r4, #24]
   2cbc4:	9804      	ldr	r0, [sp, #16]
   2cbc6:	6119      	str	r1, [r3, #16]
   2cbc8:	9902      	ldr	r1, [sp, #8]
   2cbca:	4302      	orrs	r2, r0
   2cbcc:	60da      	str	r2, [r3, #12]
   2cbce:	605d      	str	r5, [r3, #4]
   2cbd0:	b119      	cbz	r1, 2cbda <ip_interface_sendto+0x17e>
   2cbd2:	6818      	ldr	r0, [r3, #0]
   2cbd4:	462a      	mov	r2, r5
   2cbd6:	f00b ffb2 	bl	38b3e <memcpy>
   2cbda:	6823      	ldr	r3, [r4, #0]
   2cbdc:	4641      	mov	r1, r8
   2cbde:	9305      	str	r3, [sp, #20]
   2cbe0:	6823      	ldr	r3, [r4, #0]
   2cbe2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2cbe6:	6023      	str	r3, [r4, #0]
   2cbe8:	6823      	ldr	r3, [r4, #0]
   2cbea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2cbee:	6023      	str	r3, [r4, #0]
   2cbf0:	9b07      	ldr	r3, [sp, #28]
   2cbf2:	4618      	mov	r0, r3
   2cbf4:	9301      	str	r3, [sp, #4]
   2cbf6:	f7ff fd57 	bl	2c6a8 <rpc_ip_client_request_send>
   2cbfa:	9b01      	ldr	r3, [sp, #4]
   2cbfc:	4682      	mov	sl, r0
   2cbfe:	bb78      	cbnz	r0, 2cc60 <ip_interface_sendto+0x204>
   2cc00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2cc04:	ab08      	add	r3, sp, #32
   2cc06:	4611      	mov	r1, r2
   2cc08:	4638      	mov	r0, r7
   2cc0a:	f005 fe1b 	bl	32844 <interface_socket_wait>
   2cc0e:	4603      	mov	r3, r0
   2cc10:	b398      	cbz	r0, 2cc7a <ip_interface_sendto+0x21e>
   2cc12:	6822      	ldr	r2, [r4, #0]
   2cc14:	0312      	lsls	r2, r2, #12
   2cc16:	d43f      	bmi.n	2cc98 <ip_interface_sendto+0x23c>
   2cc18:	2b3c      	cmp	r3, #60	; 0x3c
   2cc1a:	d001      	beq.n	2cc20 <ip_interface_sendto+0x1c4>
   2cc1c:	2b0c      	cmp	r3, #12
   2cc1e:	d001      	beq.n	2cc24 <ip_interface_sendto+0x1c8>
   2cc20:	469a      	mov	sl, r3
   2cc22:	e77d      	b.n	2cb20 <ip_interface_sendto+0xc4>
   2cc24:	9b00      	ldr	r3, [sp, #0]
   2cc26:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2cc2a:	b108      	cbz	r0, 2cc30 <ip_interface_sendto+0x1d4>
   2cc2c:	f7ff fd52 	bl	2c6d4 <rpc_ip_client_message_free>
   2cc30:	9b03      	ldr	r3, [sp, #12]
   2cc32:	2b00      	cmp	r3, #0
   2cc34:	f47f af45 	bne.w	2cac2 <ip_interface_sendto+0x66>
   2cc38:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2cc3c:	e770      	b.n	2cb20 <ip_interface_sendto+0xc4>
   2cc3e:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   2cc42:	e765      	b.n	2cb10 <ip_interface_sendto+0xb4>
   2cc44:	9b00      	ldr	r3, [sp, #0]
   2cc46:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2cc4a:	6985      	ldr	r5, [r0, #24]
   2cc4c:	f7ff fd42 	bl	2c6d4 <rpc_ip_client_message_free>
   2cc50:	2300      	movs	r3, #0
   2cc52:	4628      	mov	r0, r5
   2cc54:	9a00      	ldr	r2, [sp, #0]
   2cc56:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   2cc5a:	b00b      	add	sp, #44	; 0x2c
   2cc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc60:	6818      	ldr	r0, [r3, #0]
   2cc62:	469a      	mov	sl, r3
   2cc64:	b108      	cbz	r0, 2cc6a <ip_interface_sendto+0x20e>
   2cc66:	f7ff fd3d 	bl	2c6e4 <rpc_ip_client_data_free>
   2cc6a:	4650      	mov	r0, sl
   2cc6c:	f7ff fd32 	bl	2c6d4 <rpc_ip_client_message_free>
   2cc70:	9b05      	ldr	r3, [sp, #20]
   2cc72:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2cc76:	6023      	str	r3, [r4, #0]
   2cc78:	e752      	b.n	2cb20 <ip_interface_sendto+0xc4>
   2cc7a:	9001      	str	r0, [sp, #4]
   2cc7c:	4638      	mov	r0, r7
   2cc7e:	f005 fe55 	bl	3292c <interface_socket_from_handle_get>
   2cc82:	9b01      	ldr	r3, [sp, #4]
   2cc84:	2800      	cmp	r0, #0
   2cc86:	d0cb      	beq.n	2cc20 <ip_interface_sendto+0x1c4>
   2cc88:	6843      	ldr	r3, [r0, #4]
   2cc8a:	2b00      	cmp	r3, #0
   2cc8c:	d0c8      	beq.n	2cc20 <ip_interface_sendto+0x1c4>
   2cc8e:	f8c0 a004 	str.w	sl, [r0, #4]
   2cc92:	6822      	ldr	r2, [r4, #0]
   2cc94:	0312      	lsls	r2, r2, #12
   2cc96:	d5bf      	bpl.n	2cc18 <ip_interface_sendto+0x1bc>
   2cc98:	f8d4 a008 	ldr.w	sl, [r4, #8]
   2cc9c:	e740      	b.n	2cb20 <ip_interface_sendto+0xc4>
   2cc9e:	2e00      	cmp	r6, #0
   2cca0:	f43f aef4 	beq.w	2ca8c <ip_interface_sendto+0x30>
   2cca4:	f04f 0a38 	mov.w	sl, #56	; 0x38
   2cca8:	4b29      	ldr	r3, [pc, #164]	; (2cd50 <ip_interface_sendto+0x2f4>)
   2ccaa:	9300      	str	r3, [sp, #0]
   2ccac:	4650      	mov	r0, sl
   2ccae:	f7fa fc65 	bl	2757c <bsd_os_errno_set>
   2ccb2:	9b00      	ldr	r3, [sp, #0]
   2ccb4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ccb8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2ccbc:	e74d      	b.n	2cb5a <ip_interface_sendto+0xfe>
   2ccbe:	6823      	ldr	r3, [r4, #0]
   2ccc0:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   2ccc4:	f3c3 7300 	ubfx	r3, r3, #28, #1
   2ccc8:	9303      	str	r3, [sp, #12]
   2ccca:	e6ec      	b.n	2caa6 <ip_interface_sendto+0x4a>
   2cccc:	6823      	ldr	r3, [r4, #0]
   2ccce:	b29b      	uxth	r3, r3
   2ccd0:	2b05      	cmp	r3, #5
   2ccd2:	f47f af52 	bne.w	2cb7a <ip_interface_sendto+0x11e>
   2ccd6:	e74c      	b.n	2cb72 <ip_interface_sendto+0x116>
   2ccd8:	2210      	movs	r2, #16
   2ccda:	8931      	ldrh	r1, [r6, #8]
   2ccdc:	835a      	strh	r2, [r3, #26]
   2ccde:	8319      	strh	r1, [r3, #24]
   2cce0:	18b1      	adds	r1, r6, r2
   2cce2:	f00b ff2c 	bl	38b3e <memcpy>
   2cce6:	f247 0207 	movw	r2, #28679	; 0x7007
   2ccea:	9b07      	ldr	r3, [sp, #28]
   2ccec:	4690      	mov	r8, r2
   2ccee:	6899      	ldr	r1, [r3, #8]
   2ccf0:	8b58      	ldrh	r0, [r3, #26]
   2ccf2:	3104      	adds	r1, #4
   2ccf4:	4401      	add	r1, r0
   2ccf6:	f8c3 9014 	str.w	r9, [r3, #20]
   2ccfa:	6099      	str	r1, [r3, #8]
   2ccfc:	e761      	b.n	2cbc2 <ip_interface_sendto+0x166>
   2ccfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2cd00:	2a10      	cmp	r2, #16
   2cd02:	f47f af03 	bne.w	2cb0c <ip_interface_sendto+0xb0>
   2cd06:	2204      	movs	r2, #4
   2cd08:	8931      	ldrh	r1, [r6, #8]
   2cd0a:	835a      	strh	r2, [r3, #26]
   2cd0c:	8319      	strh	r1, [r3, #24]
   2cd0e:	f106 010c 	add.w	r1, r6, #12
   2cd12:	f00b ff14 	bl	38b3e <memcpy>
   2cd16:	e7e6      	b.n	2cce6 <ip_interface_sendto+0x28a>
   2cd18:	4b0d      	ldr	r3, [pc, #52]	; (2cd50 <ip_interface_sendto+0x2f4>)
   2cd1a:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2cd1e:	9300      	str	r3, [sp, #0]
   2cd20:	e7c4      	b.n	2ccac <ip_interface_sendto+0x250>
   2cd22:	4b0b      	ldr	r3, [pc, #44]	; (2cd50 <ip_interface_sendto+0x2f4>)
   2cd24:	f04f 0a28 	mov.w	sl, #40	; 0x28
   2cd28:	9300      	str	r3, [sp, #0]
   2cd2a:	e7bf      	b.n	2ccac <ip_interface_sendto+0x250>
   2cd2c:	4b08      	ldr	r3, [pc, #32]	; (2cd50 <ip_interface_sendto+0x2f4>)
   2cd2e:	f04f 0a39 	mov.w	sl, #57	; 0x39
   2cd32:	9300      	str	r3, [sp, #0]
   2cd34:	e7ba      	b.n	2ccac <ip_interface_sendto+0x250>
   2cd36:	4b06      	ldr	r3, [pc, #24]	; (2cd50 <ip_interface_sendto+0x2f4>)
   2cd38:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   2cd3c:	9300      	str	r3, [sp, #0]
   2cd3e:	e7b5      	b.n	2ccac <ip_interface_sendto+0x250>
   2cd40:	4b03      	ldr	r3, [pc, #12]	; (2cd50 <ip_interface_sendto+0x2f4>)
   2cd42:	f04f 0a09 	mov.w	sl, #9
   2cd46:	9300      	str	r3, [sp, #0]
   2cd48:	e7b0      	b.n	2ccac <ip_interface_sendto+0x250>
   2cd4a:	f04f 0a0c 	mov.w	sl, #12
   2cd4e:	e6e7      	b.n	2cb20 <ip_interface_sendto+0xc4>
   2cd50:	20023b1c 	.word	0x20023b1c

0002cd54 <ip_interface_recvfrom>:
   2cd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cd58:	b087      	sub	sp, #28
   2cd5a:	2a00      	cmp	r2, #0
   2cd5c:	f000 8112 	beq.w	2cf84 <ip_interface_recvfrom+0x230>
   2cd60:	4680      	mov	r8, r0
   2cd62:	468b      	mov	fp, r1
   2cd64:	469a      	mov	sl, r3
   2cd66:	4691      	mov	r9, r2
   2cd68:	b11b      	cbz	r3, 2cd72 <ip_interface_recvfrom+0x1e>
   2cd6a:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   2cd6e:	f000 8107 	beq.w	2cf80 <ip_interface_recvfrom+0x22c>
   2cd72:	4640      	mov	r0, r8
   2cd74:	f005 fdda 	bl	3292c <interface_socket_from_handle_get>
   2cd78:	4604      	mov	r4, r0
   2cd7a:	2800      	cmp	r0, #0
   2cd7c:	f000 8104 	beq.w	2cf88 <ip_interface_recvfrom+0x234>
   2cd80:	6803      	ldr	r3, [r0, #0]
   2cd82:	02db      	lsls	r3, r3, #11
   2cd84:	d562      	bpl.n	2ce4c <ip_interface_recvfrom+0xf8>
   2cd86:	f01a 0f02 	tst.w	sl, #2
   2cd8a:	bf18      	it	ne
   2cd8c:	2600      	movne	r6, #0
   2cd8e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2cd92:	bf08      	it	eq
   2cd94:	6806      	ldreq	r6, [r0, #0]
   2cd96:	f00a 0310 	and.w	r3, sl, #16
   2cd9a:	bf04      	itt	eq
   2cd9c:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   2cda0:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   2cda4:	9301      	str	r3, [sp, #4]
   2cda6:	6823      	ldr	r3, [r4, #0]
   2cda8:	03df      	lsls	r7, r3, #15
   2cdaa:	d567      	bpl.n	2ce7c <ip_interface_recvfrom+0x128>
   2cdac:	6823      	ldr	r3, [r4, #0]
   2cdae:	69e0      	ldr	r0, [r4, #28]
   2cdb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2cdb4:	6023      	str	r3, [r4, #0]
   2cdb6:	6803      	ldr	r3, [r0, #0]
   2cdb8:	68db      	ldr	r3, [r3, #12]
   2cdba:	4798      	blx	r3
   2cdbc:	4605      	mov	r5, r0
   2cdbe:	3001      	adds	r0, #1
   2cdc0:	d07d      	beq.n	2cebe <ip_interface_recvfrom+0x16a>
   2cdc2:	45a9      	cmp	r9, r5
   2cdc4:	dd03      	ble.n	2cdce <ip_interface_recvfrom+0x7a>
   2cdc6:	6923      	ldr	r3, [r4, #16]
   2cdc8:	2b01      	cmp	r3, #1
   2cdca:	f000 80a3 	beq.w	2cf14 <ip_interface_recvfrom+0x1c0>
   2cdce:	f04f 0800 	mov.w	r8, #0
   2cdd2:	af02      	add	r7, sp, #8
   2cdd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2cdd6:	b103      	cbz	r3, 2cdda <ip_interface_recvfrom+0x86>
   2cdd8:	681b      	ldr	r3, [r3, #0]
   2cdda:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2cddc:	e9cd b902 	strd	fp, r9, [sp, #8]
   2cde0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2cde4:	69e0      	ldr	r0, [r4, #28]
   2cde6:	4639      	mov	r1, r7
   2cde8:	6803      	ldr	r3, [r0, #0]
   2cdea:	4652      	mov	r2, sl
   2cdec:	689b      	ldr	r3, [r3, #8]
   2cdee:	4798      	blx	r3
   2cdf0:	4605      	mov	r5, r0
   2cdf2:	69e0      	ldr	r0, [r4, #28]
   2cdf4:	1c6b      	adds	r3, r5, #1
   2cdf6:	6803      	ldr	r3, [r0, #0]
   2cdf8:	bf18      	it	ne
   2cdfa:	2701      	movne	r7, #1
   2cdfc:	68db      	ldr	r3, [r3, #12]
   2cdfe:	bf0a      	itet	eq
   2ce00:	2700      	moveq	r7, #0
   2ce02:	2600      	movne	r6, #0
   2ce04:	2623      	moveq	r6, #35	; 0x23
   2ce06:	4798      	blx	r3
   2ce08:	3001      	adds	r0, #1
   2ce0a:	d132      	bne.n	2ce72 <ip_interface_recvfrom+0x11e>
   2ce0c:	f1b8 0f00 	cmp.w	r8, #0
   2ce10:	f000 80b0 	beq.w	2cf74 <ip_interface_recvfrom+0x220>
   2ce14:	2f00      	cmp	r7, #0
   2ce16:	f000 80a1 	beq.w	2cf5c <ip_interface_recvfrom+0x208>
   2ce1a:	6823      	ldr	r3, [r4, #0]
   2ce1c:	0318      	lsls	r0, r3, #12
   2ce1e:	d506      	bpl.n	2ce2e <ip_interface_recvfrom+0xda>
   2ce20:	6823      	ldr	r3, [r4, #0]
   2ce22:	b29b      	uxth	r3, r3
   2ce24:	2b0d      	cmp	r3, #13
   2ce26:	d002      	beq.n	2ce2e <ip_interface_recvfrom+0xda>
   2ce28:	6923      	ldr	r3, [r4, #16]
   2ce2a:	2b01      	cmp	r3, #1
   2ce2c:	d021      	beq.n	2ce72 <ip_interface_recvfrom+0x11e>
   2ce2e:	6823      	ldr	r3, [r4, #0]
   2ce30:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2ce34:	6823      	ldr	r3, [r4, #0]
   2ce36:	f040 80a9 	bne.w	2cf8c <ip_interface_recvfrom+0x238>
   2ce3a:	0319      	lsls	r1, r3, #12
   2ce3c:	d473      	bmi.n	2cf26 <ip_interface_recvfrom+0x1d2>
   2ce3e:	2e00      	cmp	r6, #0
   2ce40:	f040 8086 	bne.w	2cf50 <ip_interface_recvfrom+0x1fc>
   2ce44:	4628      	mov	r0, r5
   2ce46:	b007      	add	sp, #28
   2ce48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ce4c:	6803      	ldr	r3, [r0, #0]
   2ce4e:	b29b      	uxth	r3, r3
   2ce50:	2b06      	cmp	r3, #6
   2ce52:	d071      	beq.n	2cf38 <ip_interface_recvfrom+0x1e4>
   2ce54:	6803      	ldr	r3, [r0, #0]
   2ce56:	b29b      	uxth	r3, r3
   2ce58:	2b07      	cmp	r3, #7
   2ce5a:	bf0c      	ite	eq
   2ce5c:	2609      	moveq	r6, #9
   2ce5e:	2639      	movne	r6, #57	; 0x39
   2ce60:	69e0      	ldr	r0, [r4, #28]
   2ce62:	6803      	ldr	r3, [r0, #0]
   2ce64:	68db      	ldr	r3, [r3, #12]
   2ce66:	4798      	blx	r3
   2ce68:	1c43      	adds	r3, r0, #1
   2ce6a:	4605      	mov	r5, r0
   2ce6c:	d0df      	beq.n	2ce2e <ip_interface_recvfrom+0xda>
   2ce6e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ce72:	6823      	ldr	r3, [r4, #0]
   2ce74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2ce78:	6023      	str	r3, [r4, #0]
   2ce7a:	e7e0      	b.n	2ce3e <ip_interface_recvfrom+0xea>
   2ce7c:	2e00      	cmp	r6, #0
   2ce7e:	d07d      	beq.n	2cf7c <ip_interface_recvfrom+0x228>
   2ce80:	6a26      	ldr	r6, [r4, #32]
   2ce82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2ce86:	2e00      	cmp	r6, #0
   2ce88:	bf08      	it	eq
   2ce8a:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   2ce8e:	af02      	add	r7, sp, #8
   2ce90:	463b      	mov	r3, r7
   2ce92:	4611      	mov	r1, r2
   2ce94:	4640      	mov	r0, r8
   2ce96:	9602      	str	r6, [sp, #8]
   2ce98:	f005 fcd4 	bl	32844 <interface_socket_wait>
   2ce9c:	4606      	mov	r6, r0
   2ce9e:	b350      	cbz	r0, 2cef6 <ip_interface_recvfrom+0x1a2>
   2cea0:	6823      	ldr	r3, [r4, #0]
   2cea2:	031a      	lsls	r2, r3, #12
   2cea4:	d532      	bpl.n	2cf0c <ip_interface_recvfrom+0x1b8>
   2cea6:	6823      	ldr	r3, [r4, #0]
   2cea8:	b29b      	uxth	r3, r3
   2ceaa:	2b0d      	cmp	r3, #13
   2ceac:	d02e      	beq.n	2cf0c <ip_interface_recvfrom+0x1b8>
   2ceae:	6923      	ldr	r3, [r4, #16]
   2ceb0:	f1a3 0801 	sub.w	r8, r3, #1
   2ceb4:	fab8 f888 	clz	r8, r8
   2ceb8:	ea4f 1858 	mov.w	r8, r8, lsr #5
   2cebc:	e78a      	b.n	2cdd4 <ip_interface_recvfrom+0x80>
   2cebe:	6823      	ldr	r3, [r4, #0]
   2cec0:	031a      	lsls	r2, r3, #12
   2cec2:	d5db      	bpl.n	2ce7c <ip_interface_recvfrom+0x128>
   2cec4:	6823      	ldr	r3, [r4, #0]
   2cec6:	b29b      	uxth	r3, r3
   2cec8:	2b0d      	cmp	r3, #13
   2ceca:	d0d7      	beq.n	2ce7c <ip_interface_recvfrom+0x128>
   2cecc:	6923      	ldr	r3, [r4, #16]
   2cece:	69e0      	ldr	r0, [r4, #28]
   2ced0:	2b01      	cmp	r3, #1
   2ced2:	d033      	beq.n	2cf3c <ip_interface_recvfrom+0x1e8>
   2ced4:	2639      	movs	r6, #57	; 0x39
   2ced6:	6823      	ldr	r3, [r4, #0]
   2ced8:	0c1b      	lsrs	r3, r3, #16
   2ceda:	041b      	lsls	r3, r3, #16
   2cedc:	f043 030d 	orr.w	r3, r3, #13
   2cee0:	6023      	str	r3, [r4, #0]
   2cee2:	6823      	ldr	r3, [r4, #0]
   2cee4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2cee8:	6023      	str	r3, [r4, #0]
   2ceea:	6803      	ldr	r3, [r0, #0]
   2ceec:	68db      	ldr	r3, [r3, #12]
   2ceee:	4798      	blx	r3
   2cef0:	3001      	adds	r0, #1
   2cef2:	d1be      	bne.n	2ce72 <ip_interface_recvfrom+0x11e>
   2cef4:	e79b      	b.n	2ce2e <ip_interface_recvfrom+0xda>
   2cef6:	4640      	mov	r0, r8
   2cef8:	f005 fd18 	bl	3292c <interface_socket_from_handle_get>
   2cefc:	b140      	cbz	r0, 2cf10 <ip_interface_recvfrom+0x1bc>
   2cefe:	6846      	ldr	r6, [r0, #4]
   2cf00:	b136      	cbz	r6, 2cf10 <ip_interface_recvfrom+0x1bc>
   2cf02:	2300      	movs	r3, #0
   2cf04:	6043      	str	r3, [r0, #4]
   2cf06:	6823      	ldr	r3, [r4, #0]
   2cf08:	031a      	lsls	r2, r3, #12
   2cf0a:	d4cc      	bmi.n	2cea6 <ip_interface_recvfrom+0x152>
   2cf0c:	69e0      	ldr	r0, [r4, #28]
   2cf0e:	e7ec      	b.n	2ceea <ip_interface_recvfrom+0x196>
   2cf10:	2601      	movs	r6, #1
   2cf12:	e748      	b.n	2cda6 <ip_interface_recvfrom+0x52>
   2cf14:	9b01      	ldr	r3, [sp, #4]
   2cf16:	b11b      	cbz	r3, 2cf20 <ip_interface_recvfrom+0x1cc>
   2cf18:	6823      	ldr	r3, [r4, #0]
   2cf1a:	00d9      	lsls	r1, r3, #3
   2cf1c:	d5b0      	bpl.n	2ce80 <ip_interface_recvfrom+0x12c>
   2cf1e:	e756      	b.n	2cdce <ip_interface_recvfrom+0x7a>
   2cf20:	4698      	mov	r8, r3
   2cf22:	af02      	add	r7, sp, #8
   2cf24:	e756      	b.n	2cdd4 <ip_interface_recvfrom+0x80>
   2cf26:	6823      	ldr	r3, [r4, #0]
   2cf28:	b29b      	uxth	r3, r3
   2cf2a:	2b0d      	cmp	r3, #13
   2cf2c:	d187      	bne.n	2ce3e <ip_interface_recvfrom+0xea>
   2cf2e:	68a3      	ldr	r3, [r4, #8]
   2cf30:	2b00      	cmp	r3, #0
   2cf32:	d084      	beq.n	2ce3e <ip_interface_recvfrom+0xea>
   2cf34:	68a6      	ldr	r6, [r4, #8]
   2cf36:	e782      	b.n	2ce3e <ip_interface_recvfrom+0xea>
   2cf38:	2609      	movs	r6, #9
   2cf3a:	e791      	b.n	2ce60 <ip_interface_recvfrom+0x10c>
   2cf3c:	6803      	ldr	r3, [r0, #0]
   2cf3e:	68db      	ldr	r3, [r3, #12]
   2cf40:	4798      	blx	r3
   2cf42:	3001      	adds	r0, #1
   2cf44:	d00a      	beq.n	2cf5c <ip_interface_recvfrom+0x208>
   2cf46:	2623      	movs	r6, #35	; 0x23
   2cf48:	6823      	ldr	r3, [r4, #0]
   2cf4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2cf4e:	6023      	str	r3, [r4, #0]
   2cf50:	4630      	mov	r0, r6
   2cf52:	f7fa fb13 	bl	2757c <bsd_os_errno_set>
   2cf56:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2cf5a:	e773      	b.n	2ce44 <ip_interface_recvfrom+0xf0>
   2cf5c:	6823      	ldr	r3, [r4, #0]
   2cf5e:	2500      	movs	r5, #0
   2cf60:	0c1b      	lsrs	r3, r3, #16
   2cf62:	041b      	lsls	r3, r3, #16
   2cf64:	f043 030d 	orr.w	r3, r3, #13
   2cf68:	6023      	str	r3, [r4, #0]
   2cf6a:	6823      	ldr	r3, [r4, #0]
   2cf6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2cf70:	6023      	str	r3, [r4, #0]
   2cf72:	e767      	b.n	2ce44 <ip_interface_recvfrom+0xf0>
   2cf74:	2f00      	cmp	r7, #0
   2cf76:	f47f af50 	bne.w	2ce1a <ip_interface_recvfrom+0xc6>
   2cf7a:	e758      	b.n	2ce2e <ip_interface_recvfrom+0xda>
   2cf7c:	2623      	movs	r6, #35	; 0x23
   2cf7e:	e7c5      	b.n	2cf0c <ip_interface_recvfrom+0x1b8>
   2cf80:	262d      	movs	r6, #45	; 0x2d
   2cf82:	e7e5      	b.n	2cf50 <ip_interface_recvfrom+0x1fc>
   2cf84:	2616      	movs	r6, #22
   2cf86:	e7e3      	b.n	2cf50 <ip_interface_recvfrom+0x1fc>
   2cf88:	2609      	movs	r6, #9
   2cf8a:	e7e1      	b.n	2cf50 <ip_interface_recvfrom+0x1fc>
   2cf8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   2cf90:	6023      	str	r3, [r4, #0]
   2cf92:	6823      	ldr	r3, [r4, #0]
   2cf94:	2669      	movs	r6, #105	; 0x69
   2cf96:	0c1b      	lsrs	r3, r3, #16
   2cf98:	041b      	lsls	r3, r3, #16
   2cf9a:	f043 030d 	orr.w	r3, r3, #13
   2cf9e:	6023      	str	r3, [r4, #0]
   2cfa0:	e7d6      	b.n	2cf50 <ip_interface_recvfrom+0x1fc>
   2cfa2:	bf00      	nop

0002cfa4 <ip_interface_connect>:
   2cfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cfa8:	b082      	sub	sp, #8
   2cfaa:	2900      	cmp	r1, #0
   2cfac:	d04b      	beq.n	2d046 <ip_interface_connect+0xa2>
   2cfae:	4617      	mov	r7, r2
   2cfb0:	2a00      	cmp	r2, #0
   2cfb2:	d048      	beq.n	2d046 <ip_interface_connect+0xa2>
   2cfb4:	4680      	mov	r8, r0
   2cfb6:	4689      	mov	r9, r1
   2cfb8:	f005 fcb8 	bl	3292c <interface_socket_from_handle_get>
   2cfbc:	4605      	mov	r5, r0
   2cfbe:	2800      	cmp	r0, #0
   2cfc0:	f000 80af 	beq.w	2d122 <ip_interface_connect+0x17e>
   2cfc4:	6803      	ldr	r3, [r0, #0]
   2cfc6:	b29b      	uxth	r3, r3
   2cfc8:	2b02      	cmp	r3, #2
   2cfca:	d004      	beq.n	2cfd6 <ip_interface_connect+0x32>
   2cfcc:	6803      	ldr	r3, [r0, #0]
   2cfce:	b29b      	uxth	r3, r3
   2cfd0:	2b04      	cmp	r3, #4
   2cfd2:	f040 809d 	bne.w	2d110 <ip_interface_connect+0x16c>
   2cfd6:	6829      	ldr	r1, [r5, #0]
   2cfd8:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   2cfdc:	f040 8089 	bne.w	2d0f2 <ip_interface_connect+0x14e>
   2cfe0:	ae02      	add	r6, sp, #8
   2cfe2:	f8d5 a018 	ldr.w	sl, [r5, #24]
   2cfe6:	f846 1d04 	str.w	r1, [r6, #-4]!
   2cfea:	4630      	mov	r0, r6
   2cfec:	f7ff fb48 	bl	2c680 <rpc_ip_client_request_alloc>
   2cff0:	bb98      	cbnz	r0, 2d05a <ip_interface_connect+0xb6>
   2cff2:	2108      	movs	r1, #8
   2cff4:	ea4f 4208 	mov.w	r2, r8, lsl #16
   2cff8:	9c01      	ldr	r4, [sp, #4]
   2cffa:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   2cffe:	f043 0302 	orr.w	r3, r3, #2
   2d002:	60e3      	str	r3, [r4, #12]
   2d004:	f8c4 a010 	str.w	sl, [r4, #16]
   2d008:	7260      	strb	r0, [r4, #9]
   2d00a:	72a0      	strb	r0, [r4, #10]
   2d00c:	72e0      	strb	r0, [r4, #11]
   2d00e:	7221      	strb	r1, [r4, #8]
   2d010:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   2d014:	f042 0202 	orr.w	r2, r2, #2
   2d018:	60e2      	str	r2, [r4, #12]
   2d01a:	68a3      	ldr	r3, [r4, #8]
   2d01c:	69aa      	ldr	r2, [r5, #24]
   2d01e:	3304      	adds	r3, #4
   2d020:	6122      	str	r2, [r4, #16]
   2d022:	60a3      	str	r3, [r4, #8]
   2d024:	68eb      	ldr	r3, [r5, #12]
   2d026:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2d02a:	4293      	cmp	r3, r2
   2d02c:	d11b      	bne.n	2d066 <ip_interface_connect+0xc2>
   2d02e:	f899 2000 	ldrb.w	r2, [r9]
   2d032:	4297      	cmp	r7, r2
   2d034:	d107      	bne.n	2d046 <ip_interface_connect+0xa2>
   2d036:	2b02      	cmp	r3, #2
   2d038:	f104 0018 	add.w	r0, r4, #24
   2d03c:	d015      	beq.n	2d06a <ip_interface_connect+0xc6>
   2d03e:	2b0a      	cmp	r3, #10
   2d040:	d101      	bne.n	2d046 <ip_interface_connect+0xa2>
   2d042:	2f24      	cmp	r7, #36	; 0x24
   2d044:	d01d      	beq.n	2d082 <ip_interface_connect+0xde>
   2d046:	2416      	movs	r4, #22
   2d048:	4620      	mov	r0, r4
   2d04a:	f7fa fa97 	bl	2757c <bsd_os_errno_set>
   2d04e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d052:	4620      	mov	r0, r4
   2d054:	b002      	add	sp, #8
   2d056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d05a:	9c01      	ldr	r4, [sp, #4]
   2d05c:	2c00      	cmp	r4, #0
   2d05e:	d05e      	beq.n	2d11e <ip_interface_connect+0x17a>
   2d060:	ea4f 4208 	mov.w	r2, r8, lsl #16
   2d064:	e7d4      	b.n	2d010 <ip_interface_connect+0x6c>
   2d066:	242f      	movs	r4, #47	; 0x2f
   2d068:	e7ee      	b.n	2d048 <ip_interface_connect+0xa4>
   2d06a:	2f10      	cmp	r7, #16
   2d06c:	d1eb      	bne.n	2d046 <ip_interface_connect+0xa2>
   2d06e:	2204      	movs	r2, #4
   2d070:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   2d074:	f109 010c 	add.w	r1, r9, #12
   2d078:	82e2      	strh	r2, [r4, #22]
   2d07a:	82a3      	strh	r3, [r4, #20]
   2d07c:	f00b fd5f 	bl	38b3e <memcpy>
   2d080:	e008      	b.n	2d094 <ip_interface_connect+0xf0>
   2d082:	2210      	movs	r2, #16
   2d084:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   2d088:	eb09 0102 	add.w	r1, r9, r2
   2d08c:	82e2      	strh	r2, [r4, #22]
   2d08e:	82a3      	strh	r3, [r4, #20]
   2d090:	f00b fd55 	bl	38b3e <memcpy>
   2d094:	68a3      	ldr	r3, [r4, #8]
   2d096:	8ae2      	ldrh	r2, [r4, #22]
   2d098:	f247 0102 	movw	r1, #28674	; 0x7002
   2d09c:	4413      	add	r3, r2
   2d09e:	60a3      	str	r3, [r4, #8]
   2d0a0:	682f      	ldr	r7, [r5, #0]
   2d0a2:	682b      	ldr	r3, [r5, #0]
   2d0a4:	4620      	mov	r0, r4
   2d0a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   2d0aa:	602b      	str	r3, [r5, #0]
   2d0ac:	f7ff fafc 	bl	2c6a8 <rpc_ip_client_request_send>
   2d0b0:	b9a8      	cbnz	r0, 2d0de <ip_interface_connect+0x13a>
   2d0b2:	682b      	ldr	r3, [r5, #0]
   2d0b4:	00db      	lsls	r3, r3, #3
   2d0b6:	d429      	bmi.n	2d10c <ip_interface_connect+0x168>
   2d0b8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   2d0ba:	4633      	mov	r3, r6
   2d0bc:	2c00      	cmp	r4, #0
   2d0be:	bf08      	it	eq
   2d0c0:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   2d0c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2d0c8:	2105      	movs	r1, #5
   2d0ca:	4640      	mov	r0, r8
   2d0cc:	9401      	str	r4, [sp, #4]
   2d0ce:	f005 fbb9 	bl	32844 <interface_socket_wait>
   2d0d2:	4604      	mov	r4, r0
   2d0d4:	b178      	cbz	r0, 2d0f6 <ip_interface_connect+0x152>
   2d0d6:	2c73      	cmp	r4, #115	; 0x73
   2d0d8:	d0b6      	beq.n	2d048 <ip_interface_connect+0xa4>
   2d0da:	602f      	str	r7, [r5, #0]
   2d0dc:	e7b4      	b.n	2d048 <ip_interface_connect+0xa4>
   2d0de:	6820      	ldr	r0, [r4, #0]
   2d0e0:	b108      	cbz	r0, 2d0e6 <ip_interface_connect+0x142>
   2d0e2:	f7ff faff 	bl	2c6e4 <rpc_ip_client_data_free>
   2d0e6:	4620      	mov	r0, r4
   2d0e8:	f7ff faf4 	bl	2c6d4 <rpc_ip_client_message_free>
   2d0ec:	2423      	movs	r4, #35	; 0x23
   2d0ee:	602f      	str	r7, [r5, #0]
   2d0f0:	e7aa      	b.n	2d048 <ip_interface_connect+0xa4>
   2d0f2:	2472      	movs	r4, #114	; 0x72
   2d0f4:	e7a8      	b.n	2d048 <ip_interface_connect+0xa4>
   2d0f6:	4640      	mov	r0, r8
   2d0f8:	f005 fc18 	bl	3292c <interface_socket_from_handle_get>
   2d0fc:	2800      	cmp	r0, #0
   2d0fe:	d0a8      	beq.n	2d052 <ip_interface_connect+0xae>
   2d100:	6843      	ldr	r3, [r0, #4]
   2d102:	2b00      	cmp	r3, #0
   2d104:	d0a5      	beq.n	2d052 <ip_interface_connect+0xae>
   2d106:	6044      	str	r4, [r0, #4]
   2d108:	461c      	mov	r4, r3
   2d10a:	e7e4      	b.n	2d0d6 <ip_interface_connect+0x132>
   2d10c:	2473      	movs	r4, #115	; 0x73
   2d10e:	e79b      	b.n	2d048 <ip_interface_connect+0xa4>
   2d110:	6803      	ldr	r3, [r0, #0]
   2d112:	b29b      	uxth	r3, r3
   2d114:	2b05      	cmp	r3, #5
   2d116:	bf14      	ite	ne
   2d118:	2409      	movne	r4, #9
   2d11a:	2438      	moveq	r4, #56	; 0x38
   2d11c:	e794      	b.n	2d048 <ip_interface_connect+0xa4>
   2d11e:	240c      	movs	r4, #12
   2d120:	e792      	b.n	2d048 <ip_interface_connect+0xa4>
   2d122:	2409      	movs	r4, #9
   2d124:	e790      	b.n	2d048 <ip_interface_connect+0xa4>
   2d126:	bf00      	nop

0002d128 <ip_interface_socketoption_get>:
   2d128:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   2d12c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d130:	b082      	sub	sp, #8
   2d132:	9400      	str	r4, [sp, #0]
   2d134:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2d136:	2c00      	cmp	r4, #0
   2d138:	d05b      	beq.n	2d1f2 <ip_interface_socketoption_get+0xca>
   2d13a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2d13c:	6824      	ldr	r4, [r4, #0]
   2d13e:	2c00      	cmp	r4, #0
   2d140:	d057      	beq.n	2d1f2 <ip_interface_socketoption_get+0xca>
   2d142:	680c      	ldr	r4, [r1, #0]
   2d144:	0266      	lsls	r6, r4, #9
   2d146:	d44f      	bmi.n	2d1e8 <ip_interface_socketoption_get+0xc0>
   2d148:	680c      	ldr	r4, [r1, #0]
   2d14a:	0225      	lsls	r5, r4, #8
   2d14c:	d44c      	bmi.n	2d1e8 <ip_interface_socketoption_get+0xc0>
   2d14e:	680c      	ldr	r4, [r1, #0]
   2d150:	01e4      	lsls	r4, r4, #7
   2d152:	d449      	bmi.n	2d1e8 <ip_interface_socketoption_get+0xc0>
   2d154:	680c      	ldr	r4, [r1, #0]
   2d156:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   2d15a:	d145      	bne.n	2d1e8 <ip_interface_socketoption_get+0xc0>
   2d15c:	460c      	mov	r4, r1
   2d15e:	680e      	ldr	r6, [r1, #0]
   2d160:	461f      	mov	r7, r3
   2d162:	680b      	ldr	r3, [r1, #0]
   2d164:	4681      	mov	r9, r0
   2d166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2d16a:	600b      	str	r3, [r1, #0]
   2d16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d16e:	a802      	add	r0, sp, #8
   2d170:	f840 cd04 	str.w	ip, [r0, #-4]!
   2d174:	6819      	ldr	r1, [r3, #0]
   2d176:	4615      	mov	r5, r2
   2d178:	f8d4 b018 	ldr.w	fp, [r4, #24]
   2d17c:	f7ff fa80 	bl	2c680 <rpc_ip_client_request_alloc>
   2d180:	2800      	cmp	r0, #0
   2d182:	d146      	bne.n	2d212 <ip_interface_socketoption_get+0xea>
   2d184:	f247 0304 	movw	r3, #28676	; 0x7004
   2d188:	2208      	movs	r2, #8
   2d18a:	f8dd a004 	ldr.w	sl, [sp, #4]
   2d18e:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   2d192:	f8ca 300c 	str.w	r3, [sl, #12]
   2d196:	f8ca b010 	str.w	fp, [sl, #16]
   2d19a:	f88a 0009 	strb.w	r0, [sl, #9]
   2d19e:	f88a 000a 	strb.w	r0, [sl, #10]
   2d1a2:	f88a 000b 	strb.w	r0, [sl, #11]
   2d1a6:	f88a 2008 	strb.w	r2, [sl, #8]
   2d1aa:	f8da 3008 	ldr.w	r3, [sl, #8]
   2d1ae:	f8ca 7018 	str.w	r7, [sl, #24]
   2d1b2:	3308      	adds	r3, #8
   2d1b4:	f8ca 5014 	str.w	r5, [sl, #20]
   2d1b8:	f8ca 3008 	str.w	r3, [sl, #8]
   2d1bc:	f247 0104 	movw	r1, #28676	; 0x7004
   2d1c0:	4650      	mov	r0, sl
   2d1c2:	f8da 7000 	ldr.w	r7, [sl]
   2d1c6:	f7ff fa6f 	bl	2c6a8 <rpc_ip_client_request_send>
   2d1ca:	b9b8      	cbnz	r0, 2d1fc <ip_interface_socketoption_get+0xd4>
   2d1cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   2d1d0:	466b      	mov	r3, sp
   2d1d2:	4611      	mov	r1, r2
   2d1d4:	4648      	mov	r0, r9
   2d1d6:	f005 fb35 	bl	32844 <interface_socket_wait>
   2d1da:	4605      	mov	r5, r0
   2d1dc:	b300      	cbz	r0, 2d220 <ip_interface_socketoption_get+0xf8>
   2d1de:	4638      	mov	r0, r7
   2d1e0:	f7ff fa80 	bl	2c6e4 <rpc_ip_client_data_free>
   2d1e4:	6026      	str	r6, [r4, #0]
   2d1e6:	e000      	b.n	2d1ea <ip_interface_socketoption_get+0xc2>
   2d1e8:	2523      	movs	r5, #35	; 0x23
   2d1ea:	4628      	mov	r0, r5
   2d1ec:	b002      	add	sp, #8
   2d1ee:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   2d1f2:	2516      	movs	r5, #22
   2d1f4:	4628      	mov	r0, r5
   2d1f6:	b002      	add	sp, #8
   2d1f8:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   2d1fc:	f8da 0000 	ldr.w	r0, [sl]
   2d200:	b108      	cbz	r0, 2d206 <ip_interface_socketoption_get+0xde>
   2d202:	f7ff fa6f 	bl	2c6e4 <rpc_ip_client_data_free>
   2d206:	4650      	mov	r0, sl
   2d208:	f7ff fa64 	bl	2c6d4 <rpc_ip_client_message_free>
   2d20c:	2523      	movs	r5, #35	; 0x23
   2d20e:	6026      	str	r6, [r4, #0]
   2d210:	e7e5      	b.n	2d1de <ip_interface_socketoption_get+0xb6>
   2d212:	f8dd a004 	ldr.w	sl, [sp, #4]
   2d216:	f1ba 0f00 	cmp.w	sl, #0
   2d21a:	d1c6      	bne.n	2d1aa <ip_interface_socketoption_get+0x82>
   2d21c:	250c      	movs	r5, #12
   2d21e:	e7e1      	b.n	2d1e4 <ip_interface_socketoption_get+0xbc>
   2d220:	4648      	mov	r0, r9
   2d222:	f005 fb83 	bl	3292c <interface_socket_from_handle_get>
   2d226:	b120      	cbz	r0, 2d232 <ip_interface_socketoption_get+0x10a>
   2d228:	6843      	ldr	r3, [r0, #4]
   2d22a:	b113      	cbz	r3, 2d232 <ip_interface_socketoption_get+0x10a>
   2d22c:	6045      	str	r5, [r0, #4]
   2d22e:	461d      	mov	r5, r3
   2d230:	e7d5      	b.n	2d1de <ip_interface_socketoption_get+0xb6>
   2d232:	f8df b050 	ldr.w	fp, [pc, #80]	; 2d284 <ip_interface_socketoption_get+0x15c>
   2d236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d238:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   2d23c:	681b      	ldr	r3, [r3, #0]
   2d23e:	b1b0      	cbz	r0, 2d26e <ip_interface_socketoption_get+0x146>
   2d240:	6842      	ldr	r2, [r0, #4]
   2d242:	429a      	cmp	r2, r3
   2d244:	d811      	bhi.n	2d26a <ip_interface_socketoption_get+0x142>
   2d246:	6801      	ldr	r1, [r0, #0]
   2d248:	b179      	cbz	r1, 2d26a <ip_interface_socketoption_get+0x142>
   2d24a:	980a      	ldr	r0, [sp, #40]	; 0x28
   2d24c:	f00b fc77 	bl	38b3e <memcpy>
   2d250:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   2d254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d256:	685b      	ldr	r3, [r3, #4]
   2d258:	6013      	str	r3, [r2, #0]
   2d25a:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   2d25e:	f7ff fa39 	bl	2c6d4 <rpc_ip_client_message_free>
   2d262:	2300      	movs	r3, #0
   2d264:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   2d268:	e7b9      	b.n	2d1de <ip_interface_socketoption_get+0xb6>
   2d26a:	2516      	movs	r5, #22
   2d26c:	e7f7      	b.n	2d25e <ip_interface_socketoption_get+0x136>
   2d26e:	461a      	mov	r2, r3
   2d270:	980a      	ldr	r0, [sp, #40]	; 0x28
   2d272:	4639      	mov	r1, r7
   2d274:	f00b fc63 	bl	38b3e <memcpy>
   2d278:	f8da 3004 	ldr.w	r3, [sl, #4]
   2d27c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d27e:	6013      	str	r3, [r2, #0]
   2d280:	e7ad      	b.n	2d1de <ip_interface_socketoption_get+0xb6>
   2d282:	bf00      	nop
   2d284:	20023b1c 	.word	0x20023b1c

0002d288 <ip_interface_socketoption_send>:
   2d288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d28c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2d290:	680c      	ldr	r4, [r1, #0]
   2d292:	b082      	sub	sp, #8
   2d294:	0266      	lsls	r6, r4, #9
   2d296:	9500      	str	r5, [sp, #0]
   2d298:	d44d      	bmi.n	2d336 <ip_interface_socketoption_send+0xae>
   2d29a:	680c      	ldr	r4, [r1, #0]
   2d29c:	0225      	lsls	r5, r4, #8
   2d29e:	d44a      	bmi.n	2d336 <ip_interface_socketoption_send+0xae>
   2d2a0:	680c      	ldr	r4, [r1, #0]
   2d2a2:	01e4      	lsls	r4, r4, #7
   2d2a4:	d447      	bmi.n	2d336 <ip_interface_socketoption_send+0xae>
   2d2a6:	680c      	ldr	r4, [r1, #0]
   2d2a8:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   2d2ac:	d143      	bne.n	2d336 <ip_interface_socketoption_send+0xae>
   2d2ae:	4688      	mov	r8, r1
   2d2b0:	f8d1 9000 	ldr.w	r9, [r1]
   2d2b4:	461f      	mov	r7, r3
   2d2b6:	680b      	ldr	r3, [r1, #0]
   2d2b8:	4605      	mov	r5, r0
   2d2ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2d2be:	a802      	add	r0, sp, #8
   2d2c0:	600b      	str	r3, [r1, #0]
   2d2c2:	f840 4d04 	str.w	r4, [r0, #-4]!
   2d2c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2d2c8:	4616      	mov	r6, r2
   2d2ca:	f8d8 a018 	ldr.w	sl, [r8, #24]
   2d2ce:	f7ff f9d7 	bl	2c680 <rpc_ip_client_request_alloc>
   2d2d2:	bba8      	cbnz	r0, 2d340 <ip_interface_socketoption_send+0xb8>
   2d2d4:	f247 0303 	movw	r3, #28675	; 0x7003
   2d2d8:	2208      	movs	r2, #8
   2d2da:	9c01      	ldr	r4, [sp, #4]
   2d2dc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   2d2e0:	60e3      	str	r3, [r4, #12]
   2d2e2:	f8c4 a010 	str.w	sl, [r4, #16]
   2d2e6:	7260      	strb	r0, [r4, #9]
   2d2e8:	72a0      	strb	r0, [r4, #10]
   2d2ea:	72e0      	strb	r0, [r4, #11]
   2d2ec:	7222      	strb	r2, [r4, #8]
   2d2ee:	68a3      	ldr	r3, [r4, #8]
   2d2f0:	6166      	str	r6, [r4, #20]
   2d2f2:	3308      	adds	r3, #8
   2d2f4:	60a3      	str	r3, [r4, #8]
   2d2f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d2f8:	61a7      	str	r7, [r4, #24]
   2d2fa:	b133      	cbz	r3, 2d30a <ip_interface_socketoption_send+0x82>
   2d2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d2fe:	b123      	cbz	r3, 2d30a <ip_interface_socketoption_send+0x82>
   2d300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d302:	4619      	mov	r1, r3
   2d304:	6820      	ldr	r0, [r4, #0]
   2d306:	f00b fc1a 	bl	38b3e <memcpy>
   2d30a:	f247 0103 	movw	r1, #28675	; 0x7003
   2d30e:	4620      	mov	r0, r4
   2d310:	f7ff f9ca 	bl	2c6a8 <rpc_ip_client_request_send>
   2d314:	4606      	mov	r6, r0
   2d316:	b9c0      	cbnz	r0, 2d34a <ip_interface_socketoption_send+0xc2>
   2d318:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2d31c:	466b      	mov	r3, sp
   2d31e:	4611      	mov	r1, r2
   2d320:	4628      	mov	r0, r5
   2d322:	f005 fa8f 	bl	32844 <interface_socket_wait>
   2d326:	4604      	mov	r4, r0
   2d328:	b1d0      	cbz	r0, 2d360 <ip_interface_socketoption_send+0xd8>
   2d32a:	4620      	mov	r0, r4
   2d32c:	f8c8 9000 	str.w	r9, [r8]
   2d330:	b002      	add	sp, #8
   2d332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d336:	2423      	movs	r4, #35	; 0x23
   2d338:	4620      	mov	r0, r4
   2d33a:	b002      	add	sp, #8
   2d33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d340:	9c01      	ldr	r4, [sp, #4]
   2d342:	2c00      	cmp	r4, #0
   2d344:	d1d3      	bne.n	2d2ee <ip_interface_socketoption_send+0x66>
   2d346:	240c      	movs	r4, #12
   2d348:	e7ef      	b.n	2d32a <ip_interface_socketoption_send+0xa2>
   2d34a:	6820      	ldr	r0, [r4, #0]
   2d34c:	b108      	cbz	r0, 2d352 <ip_interface_socketoption_send+0xca>
   2d34e:	f7ff f9c9 	bl	2c6e4 <rpc_ip_client_data_free>
   2d352:	4620      	mov	r0, r4
   2d354:	f7ff f9be 	bl	2c6d4 <rpc_ip_client_message_free>
   2d358:	2423      	movs	r4, #35	; 0x23
   2d35a:	f8c8 9000 	str.w	r9, [r8]
   2d35e:	e7e4      	b.n	2d32a <ip_interface_socketoption_send+0xa2>
   2d360:	4628      	mov	r0, r5
   2d362:	f005 fae3 	bl	3292c <interface_socket_from_handle_get>
   2d366:	2800      	cmp	r0, #0
   2d368:	d0df      	beq.n	2d32a <ip_interface_socketoption_send+0xa2>
   2d36a:	6844      	ldr	r4, [r0, #4]
   2d36c:	2c00      	cmp	r4, #0
   2d36e:	d0dc      	beq.n	2d32a <ip_interface_socketoption_send+0xa2>
   2d370:	6046      	str	r6, [r0, #4]
   2d372:	e7da      	b.n	2d32a <ip_interface_socketoption_send+0xa2>

0002d374 <ip_interface_bind>:
   2d374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d37c:	b083      	sub	sp, #12
   2d37e:	9300      	str	r3, [sp, #0]
   2d380:	b3b1      	cbz	r1, 2d3f0 <ip_interface_bind+0x7c>
   2d382:	4616      	mov	r6, r2
   2d384:	b3a2      	cbz	r2, 2d3f0 <ip_interface_bind+0x7c>
   2d386:	4607      	mov	r7, r0
   2d388:	4688      	mov	r8, r1
   2d38a:	f005 facf 	bl	3292c <interface_socket_from_handle_get>
   2d38e:	4605      	mov	r5, r0
   2d390:	2800      	cmp	r0, #0
   2d392:	d04a      	beq.n	2d42a <ip_interface_bind+0xb6>
   2d394:	6803      	ldr	r3, [r0, #0]
   2d396:	b29b      	uxth	r3, r3
   2d398:	2b02      	cmp	r3, #2
   2d39a:	d146      	bne.n	2d42a <ip_interface_bind+0xb6>
   2d39c:	2100      	movs	r1, #0
   2d39e:	a802      	add	r0, sp, #8
   2d3a0:	f840 1d04 	str.w	r1, [r0, #-4]!
   2d3a4:	f8d5 9018 	ldr.w	r9, [r5, #24]
   2d3a8:	f7ff f96a 	bl	2c680 <rpc_ip_client_request_alloc>
   2d3ac:	bb50      	cbnz	r0, 2d404 <ip_interface_bind+0x90>
   2d3ae:	f247 0305 	movw	r3, #28677	; 0x7005
   2d3b2:	2208      	movs	r2, #8
   2d3b4:	9c01      	ldr	r4, [sp, #4]
   2d3b6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2d3ba:	60e3      	str	r3, [r4, #12]
   2d3bc:	f8c4 9010 	str.w	r9, [r4, #16]
   2d3c0:	7260      	strb	r0, [r4, #9]
   2d3c2:	72a0      	strb	r0, [r4, #10]
   2d3c4:	72e0      	strb	r0, [r4, #11]
   2d3c6:	7222      	strb	r2, [r4, #8]
   2d3c8:	68a3      	ldr	r3, [r4, #8]
   2d3ca:	3304      	adds	r3, #4
   2d3cc:	60a3      	str	r3, [r4, #8]
   2d3ce:	68eb      	ldr	r3, [r5, #12]
   2d3d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2d3d4:	4293      	cmp	r3, r2
   2d3d6:	d11a      	bne.n	2d40e <ip_interface_bind+0x9a>
   2d3d8:	f898 2000 	ldrb.w	r2, [r8]
   2d3dc:	4296      	cmp	r6, r2
   2d3de:	d107      	bne.n	2d3f0 <ip_interface_bind+0x7c>
   2d3e0:	2b02      	cmp	r3, #2
   2d3e2:	f104 0018 	add.w	r0, r4, #24
   2d3e6:	d014      	beq.n	2d412 <ip_interface_bind+0x9e>
   2d3e8:	2b0a      	cmp	r3, #10
   2d3ea:	d101      	bne.n	2d3f0 <ip_interface_bind+0x7c>
   2d3ec:	2e24      	cmp	r6, #36	; 0x24
   2d3ee:	d01e      	beq.n	2d42e <ip_interface_bind+0xba>
   2d3f0:	2416      	movs	r4, #22
   2d3f2:	4620      	mov	r0, r4
   2d3f4:	f7fa f8c2 	bl	2757c <bsd_os_errno_set>
   2d3f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d3fc:	4620      	mov	r0, r4
   2d3fe:	b003      	add	sp, #12
   2d400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d404:	9c01      	ldr	r4, [sp, #4]
   2d406:	2c00      	cmp	r4, #0
   2d408:	d1de      	bne.n	2d3c8 <ip_interface_bind+0x54>
   2d40a:	240c      	movs	r4, #12
   2d40c:	e7f1      	b.n	2d3f2 <ip_interface_bind+0x7e>
   2d40e:	242f      	movs	r4, #47	; 0x2f
   2d410:	e7ef      	b.n	2d3f2 <ip_interface_bind+0x7e>
   2d412:	2e10      	cmp	r6, #16
   2d414:	d1ec      	bne.n	2d3f0 <ip_interface_bind+0x7c>
   2d416:	2204      	movs	r2, #4
   2d418:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2d41c:	f108 010c 	add.w	r1, r8, #12
   2d420:	82e2      	strh	r2, [r4, #22]
   2d422:	82a3      	strh	r3, [r4, #20]
   2d424:	f00b fb8b 	bl	38b3e <memcpy>
   2d428:	e00a      	b.n	2d440 <ip_interface_bind+0xcc>
   2d42a:	2409      	movs	r4, #9
   2d42c:	e7e1      	b.n	2d3f2 <ip_interface_bind+0x7e>
   2d42e:	2210      	movs	r2, #16
   2d430:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2d434:	eb08 0102 	add.w	r1, r8, r2
   2d438:	82e2      	strh	r2, [r4, #22]
   2d43a:	82a3      	strh	r3, [r4, #20]
   2d43c:	f00b fb7f 	bl	38b3e <memcpy>
   2d440:	68a3      	ldr	r3, [r4, #8]
   2d442:	8ae2      	ldrh	r2, [r4, #22]
   2d444:	f247 0105 	movw	r1, #28677	; 0x7005
   2d448:	4413      	add	r3, r2
   2d44a:	60a3      	str	r3, [r4, #8]
   2d44c:	682b      	ldr	r3, [r5, #0]
   2d44e:	4620      	mov	r0, r4
   2d450:	0c1b      	lsrs	r3, r3, #16
   2d452:	041b      	lsls	r3, r3, #16
   2d454:	f043 0303 	orr.w	r3, r3, #3
   2d458:	602b      	str	r3, [r5, #0]
   2d45a:	682e      	ldr	r6, [r5, #0]
   2d45c:	f7ff f924 	bl	2c6a8 <rpc_ip_client_request_send>
   2d460:	4680      	mov	r8, r0
   2d462:	b978      	cbnz	r0, 2d484 <ip_interface_bind+0x110>
   2d464:	466b      	mov	r3, sp
   2d466:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2d46a:	2104      	movs	r1, #4
   2d46c:	4638      	mov	r0, r7
   2d46e:	f005 f9e9 	bl	32844 <interface_socket_wait>
   2d472:	4604      	mov	r4, r0
   2d474:	b1a0      	cbz	r0, 2d4a0 <ip_interface_bind+0x12c>
   2d476:	682b      	ldr	r3, [r5, #0]
   2d478:	0c1b      	lsrs	r3, r3, #16
   2d47a:	041b      	lsls	r3, r3, #16
   2d47c:	f043 0302 	orr.w	r3, r3, #2
   2d480:	602b      	str	r3, [r5, #0]
   2d482:	e7b6      	b.n	2d3f2 <ip_interface_bind+0x7e>
   2d484:	6820      	ldr	r0, [r4, #0]
   2d486:	b108      	cbz	r0, 2d48c <ip_interface_bind+0x118>
   2d488:	f7ff f92c 	bl	2c6e4 <rpc_ip_client_data_free>
   2d48c:	0c36      	lsrs	r6, r6, #16
   2d48e:	0436      	lsls	r6, r6, #16
   2d490:	4620      	mov	r0, r4
   2d492:	f046 0602 	orr.w	r6, r6, #2
   2d496:	f7ff f91d 	bl	2c6d4 <rpc_ip_client_message_free>
   2d49a:	2423      	movs	r4, #35	; 0x23
   2d49c:	602e      	str	r6, [r5, #0]
   2d49e:	e7a8      	b.n	2d3f2 <ip_interface_bind+0x7e>
   2d4a0:	4638      	mov	r0, r7
   2d4a2:	f005 fa43 	bl	3292c <interface_socket_from_handle_get>
   2d4a6:	2800      	cmp	r0, #0
   2d4a8:	d0a8      	beq.n	2d3fc <ip_interface_bind+0x88>
   2d4aa:	6844      	ldr	r4, [r0, #4]
   2d4ac:	2c00      	cmp	r4, #0
   2d4ae:	d0a5      	beq.n	2d3fc <ip_interface_bind+0x88>
   2d4b0:	f8c0 8004 	str.w	r8, [r0, #4]
   2d4b4:	e7df      	b.n	2d476 <ip_interface_bind+0x102>
   2d4b6:	bf00      	nop

0002d4b8 <ip_interface_listen>:
   2d4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d4c0:	b082      	sub	sp, #8
   2d4c2:	4606      	mov	r6, r0
   2d4c4:	9300      	str	r3, [sp, #0]
   2d4c6:	f005 fa31 	bl	3292c <interface_socket_from_handle_get>
   2d4ca:	2800      	cmp	r0, #0
   2d4cc:	d06c      	beq.n	2d5a8 <ip_interface_listen+0xf0>
   2d4ce:	6803      	ldr	r3, [r0, #0]
   2d4d0:	4604      	mov	r4, r0
   2d4d2:	b29b      	uxth	r3, r3
   2d4d4:	2b04      	cmp	r3, #4
   2d4d6:	d003      	beq.n	2d4e0 <ip_interface_listen+0x28>
   2d4d8:	6803      	ldr	r3, [r0, #0]
   2d4da:	b29b      	uxth	r3, r3
   2d4dc:	2b0b      	cmp	r3, #11
   2d4de:	d163      	bne.n	2d5a8 <ip_interface_listen+0xf0>
   2d4e0:	2100      	movs	r1, #0
   2d4e2:	4a32      	ldr	r2, [pc, #200]	; (2d5ac <ip_interface_listen+0xf4>)
   2d4e4:	4630      	mov	r0, r6
   2d4e6:	f005 f975 	bl	327d4 <interface_socket_packet_handler_update>
   2d4ea:	4601      	mov	r1, r0
   2d4ec:	2800      	cmp	r0, #0
   2d4ee:	d159      	bne.n	2d5a4 <ip_interface_listen+0xec>
   2d4f0:	a802      	add	r0, sp, #8
   2d4f2:	f840 1d04 	str.w	r1, [r0, #-4]!
   2d4f6:	69a7      	ldr	r7, [r4, #24]
   2d4f8:	f7ff f8c2 	bl	2c680 <rpc_ip_client_request_alloc>
   2d4fc:	bba0      	cbnz	r0, 2d568 <ip_interface_listen+0xb0>
   2d4fe:	f247 0308 	movw	r3, #28680	; 0x7008
   2d502:	2208      	movs	r2, #8
   2d504:	9d01      	ldr	r5, [sp, #4]
   2d506:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2d50a:	60eb      	str	r3, [r5, #12]
   2d50c:	612f      	str	r7, [r5, #16]
   2d50e:	7268      	strb	r0, [r5, #9]
   2d510:	72a8      	strb	r0, [r5, #10]
   2d512:	72e8      	strb	r0, [r5, #11]
   2d514:	722a      	strb	r2, [r5, #8]
   2d516:	68ab      	ldr	r3, [r5, #8]
   2d518:	f247 0108 	movw	r1, #28680	; 0x7008
   2d51c:	3304      	adds	r3, #4
   2d51e:	60ab      	str	r3, [r5, #8]
   2d520:	6823      	ldr	r3, [r4, #0]
   2d522:	4628      	mov	r0, r5
   2d524:	0c1b      	lsrs	r3, r3, #16
   2d526:	041b      	lsls	r3, r3, #16
   2d528:	f043 0306 	orr.w	r3, r3, #6
   2d52c:	6023      	str	r3, [r4, #0]
   2d52e:	6827      	ldr	r7, [r4, #0]
   2d530:	f7ff f8ba 	bl	2c6a8 <rpc_ip_client_request_send>
   2d534:	4680      	mov	r8, r0
   2d536:	b9e0      	cbnz	r0, 2d572 <ip_interface_listen+0xba>
   2d538:	466b      	mov	r3, sp
   2d53a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2d53e:	2107      	movs	r1, #7
   2d540:	4630      	mov	r0, r6
   2d542:	f005 f97f 	bl	32844 <interface_socket_wait>
   2d546:	4605      	mov	r5, r0
   2d548:	b308      	cbz	r0, 2d58e <ip_interface_listen+0xd6>
   2d54a:	6823      	ldr	r3, [r4, #0]
   2d54c:	0c1b      	lsrs	r3, r3, #16
   2d54e:	041b      	lsls	r3, r3, #16
   2d550:	f043 0304 	orr.w	r3, r3, #4
   2d554:	6023      	str	r3, [r4, #0]
   2d556:	4628      	mov	r0, r5
   2d558:	f7fa f810 	bl	2757c <bsd_os_errno_set>
   2d55c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2d560:	4628      	mov	r0, r5
   2d562:	b002      	add	sp, #8
   2d564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d568:	9d01      	ldr	r5, [sp, #4]
   2d56a:	2d00      	cmp	r5, #0
   2d56c:	d1d3      	bne.n	2d516 <ip_interface_listen+0x5e>
   2d56e:	250c      	movs	r5, #12
   2d570:	e7f1      	b.n	2d556 <ip_interface_listen+0x9e>
   2d572:	6828      	ldr	r0, [r5, #0]
   2d574:	b108      	cbz	r0, 2d57a <ip_interface_listen+0xc2>
   2d576:	f7ff f8b5 	bl	2c6e4 <rpc_ip_client_data_free>
   2d57a:	0c3f      	lsrs	r7, r7, #16
   2d57c:	043f      	lsls	r7, r7, #16
   2d57e:	4628      	mov	r0, r5
   2d580:	f047 0704 	orr.w	r7, r7, #4
   2d584:	f7ff f8a6 	bl	2c6d4 <rpc_ip_client_message_free>
   2d588:	2523      	movs	r5, #35	; 0x23
   2d58a:	6027      	str	r7, [r4, #0]
   2d58c:	e7e3      	b.n	2d556 <ip_interface_listen+0x9e>
   2d58e:	4630      	mov	r0, r6
   2d590:	f005 f9cc 	bl	3292c <interface_socket_from_handle_get>
   2d594:	2800      	cmp	r0, #0
   2d596:	d0e3      	beq.n	2d560 <ip_interface_listen+0xa8>
   2d598:	6845      	ldr	r5, [r0, #4]
   2d59a:	2d00      	cmp	r5, #0
   2d59c:	d0e0      	beq.n	2d560 <ip_interface_listen+0xa8>
   2d59e:	f8c0 8004 	str.w	r8, [r0, #4]
   2d5a2:	e7d2      	b.n	2d54a <ip_interface_listen+0x92>
   2d5a4:	2523      	movs	r5, #35	; 0x23
   2d5a6:	e7d6      	b.n	2d556 <ip_interface_listen+0x9e>
   2d5a8:	2509      	movs	r5, #9
   2d5aa:	e7d4      	b.n	2d556 <ip_interface_listen+0x9e>
   2d5ac:	0002c6f5 	.word	0x0002c6f5

0002d5b0 <ip_interface_accept>:
   2d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d5b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d5b8:	2500      	movs	r5, #0
   2d5ba:	b087      	sub	sp, #28
   2d5bc:	460f      	mov	r7, r1
   2d5be:	4690      	mov	r8, r2
   2d5c0:	e9cd 5303 	strd	r5, r3, [sp, #12]
   2d5c4:	4606      	mov	r6, r0
   2d5c6:	f005 f9b1 	bl	3292c <interface_socket_from_handle_get>
   2d5ca:	4604      	mov	r4, r0
   2d5cc:	2800      	cmp	r0, #0
   2d5ce:	f000 8123 	beq.w	2d818 <ip_interface_accept+0x268>
   2d5d2:	6803      	ldr	r3, [r0, #0]
   2d5d4:	b29b      	uxth	r3, r3
   2d5d6:	2b07      	cmp	r3, #7
   2d5d8:	d10a      	bne.n	2d5f0 <ip_interface_accept+0x40>
   2d5da:	6803      	ldr	r3, [r0, #0]
   2d5dc:	6805      	ldr	r5, [r0, #0]
   2d5de:	00db      	lsls	r3, r3, #3
   2d5e0:	d416      	bmi.n	2d610 <ip_interface_accept+0x60>
   2d5e2:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2d5e6:	d019      	beq.n	2d61c <ip_interface_accept+0x6c>
   2d5e8:	6805      	ldr	r5, [r0, #0]
   2d5ea:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2d5ee:	d124      	bne.n	2d63a <ip_interface_accept+0x8a>
   2d5f0:	f04f 0909 	mov.w	r9, #9
   2d5f4:	9b03      	ldr	r3, [sp, #12]
   2d5f6:	b113      	cbz	r3, 2d5fe <ip_interface_accept+0x4e>
   2d5f8:	4628      	mov	r0, r5
   2d5fa:	f005 f8d5 	bl	327a8 <interface_socket_free>
   2d5fe:	4648      	mov	r0, r9
   2d600:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2d604:	f7f9 ffba 	bl	2757c <bsd_os_errno_set>
   2d608:	4648      	mov	r0, r9
   2d60a:	b007      	add	sp, #28
   2d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d610:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2d614:	d170      	bne.n	2d6f8 <ip_interface_accept+0x148>
   2d616:	f04f 0923 	mov.w	r9, #35	; 0x23
   2d61a:	e7eb      	b.n	2d5f4 <ip_interface_accept+0x44>
   2d61c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2d620:	ab04      	add	r3, sp, #16
   2d622:	4611      	mov	r1, r2
   2d624:	4630      	mov	r0, r6
   2d626:	f005 f90d 	bl	32844 <interface_socket_wait>
   2d62a:	4681      	mov	r9, r0
   2d62c:	2800      	cmp	r0, #0
   2d62e:	f000 8082 	beq.w	2d736 <ip_interface_accept+0x186>
   2d632:	6825      	ldr	r5, [r4, #0]
   2d634:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2d638:	d0dc      	beq.n	2d5f4 <ip_interface_accept+0x44>
   2d63a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d63e:	2300      	movs	r3, #0
   2d640:	e9cd 0300 	strd	r0, r3, [sp]
   2d644:	4a78      	ldr	r2, [pc, #480]	; (2d828 <ip_interface_accept+0x278>)
   2d646:	6921      	ldr	r1, [r4, #16]
   2d648:	a803      	add	r0, sp, #12
   2d64a:	f005 f849 	bl	326e0 <interface_socket_allocate>
   2d64e:	9b03      	ldr	r3, [sp, #12]
   2d650:	4605      	mov	r5, r0
   2d652:	2b00      	cmp	r3, #0
   2d654:	f000 80e4 	beq.w	2d820 <ip_interface_accept+0x270>
   2d658:	2100      	movs	r1, #0
   2d65a:	6962      	ldr	r2, [r4, #20]
   2d65c:	a806      	add	r0, sp, #24
   2d65e:	615a      	str	r2, [r3, #20]
   2d660:	68e2      	ldr	r2, [r4, #12]
   2d662:	f840 1d04 	str.w	r1, [r0, #-4]!
   2d666:	60da      	str	r2, [r3, #12]
   2d668:	6922      	ldr	r2, [r4, #16]
   2d66a:	611a      	str	r2, [r3, #16]
   2d66c:	f8d4 9018 	ldr.w	r9, [r4, #24]
   2d670:	f7ff f806 	bl	2c680 <rpc_ip_client_request_alloc>
   2d674:	2800      	cmp	r0, #0
   2d676:	d146      	bne.n	2d706 <ip_interface_accept+0x156>
   2d678:	f247 030c 	movw	r3, #28684	; 0x700c
   2d67c:	2108      	movs	r1, #8
   2d67e:	f8dd b014 	ldr.w	fp, [sp, #20]
   2d682:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2d686:	f8cb 300c 	str.w	r3, [fp, #12]
   2d68a:	f8cb 9010 	str.w	r9, [fp, #16]
   2d68e:	f88b 0009 	strb.w	r0, [fp, #9]
   2d692:	f88b 000a 	strb.w	r0, [fp, #10]
   2d696:	f88b 000b 	strb.w	r0, [fp, #11]
   2d69a:	f88b 1008 	strb.w	r1, [fp, #8]
   2d69e:	6823      	ldr	r3, [r4, #0]
   2d6a0:	f247 010c 	movw	r1, #28684	; 0x700c
   2d6a4:	0c1b      	lsrs	r3, r3, #16
   2d6a6:	041b      	lsls	r3, r3, #16
   2d6a8:	f043 0308 	orr.w	r3, r3, #8
   2d6ac:	6023      	str	r3, [r4, #0]
   2d6ae:	4658      	mov	r0, fp
   2d6b0:	f8d4 9000 	ldr.w	r9, [r4]
   2d6b4:	f7fe fff8 	bl	2c6a8 <rpc_ip_client_request_send>
   2d6b8:	4682      	mov	sl, r0
   2d6ba:	bb60      	cbnz	r0, 2d716 <ip_interface_accept+0x166>
   2d6bc:	6822      	ldr	r2, [r4, #0]
   2d6be:	9900      	ldr	r1, [sp, #0]
   2d6c0:	ab04      	add	r3, sp, #16
   2d6c2:	400a      	ands	r2, r1
   2d6c4:	6022      	str	r2, [r4, #0]
   2d6c6:	2109      	movs	r1, #9
   2d6c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2d6cc:	4630      	mov	r0, r6
   2d6ce:	f005 f8b9 	bl	32844 <interface_socket_wait>
   2d6d2:	4681      	mov	r9, r0
   2d6d4:	2800      	cmp	r0, #0
   2d6d6:	f000 808d 	beq.w	2d7f4 <ip_interface_accept+0x244>
   2d6da:	6823      	ldr	r3, [r4, #0]
   2d6dc:	9a01      	ldr	r2, [sp, #4]
   2d6de:	431a      	orrs	r2, r3
   2d6e0:	6022      	str	r2, [r4, #0]
   2d6e2:	6823      	ldr	r3, [r4, #0]
   2d6e4:	0c1b      	lsrs	r3, r3, #16
   2d6e6:	041b      	lsls	r3, r3, #16
   2d6e8:	f043 0307 	orr.w	r3, r3, #7
   2d6ec:	6023      	str	r3, [r4, #0]
   2d6ee:	6823      	ldr	r3, [r4, #0]
   2d6f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2d6f4:	6023      	str	r3, [r4, #0]
   2d6f6:	e77d      	b.n	2d5f4 <ip_interface_accept+0x44>
   2d6f8:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   2d6fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d700:	e9cd 2300 	strd	r2, r3, [sp]
   2d704:	e79e      	b.n	2d644 <ip_interface_accept+0x94>
   2d706:	f8dd b014 	ldr.w	fp, [sp, #20]
   2d70a:	f04f 090c 	mov.w	r9, #12
   2d70e:	f1bb 0f00 	cmp.w	fp, #0
   2d712:	d1c4      	bne.n	2d69e <ip_interface_accept+0xee>
   2d714:	e76e      	b.n	2d5f4 <ip_interface_accept+0x44>
   2d716:	f8db 0000 	ldr.w	r0, [fp]
   2d71a:	b108      	cbz	r0, 2d720 <ip_interface_accept+0x170>
   2d71c:	f7fe ffe2 	bl	2c6e4 <rpc_ip_client_data_free>
   2d720:	ea4f 4919 	mov.w	r9, r9, lsr #16
   2d724:	4658      	mov	r0, fp
   2d726:	ea4f 4909 	mov.w	r9, r9, lsl #16
   2d72a:	f7fe ffd3 	bl	2c6d4 <rpc_ip_client_message_free>
   2d72e:	f049 0307 	orr.w	r3, r9, #7
   2d732:	6023      	str	r3, [r4, #0]
   2d734:	e76f      	b.n	2d616 <ip_interface_accept+0x66>
   2d736:	4630      	mov	r0, r6
   2d738:	f005 f8f8 	bl	3292c <interface_socket_from_handle_get>
   2d73c:	b130      	cbz	r0, 2d74c <ip_interface_accept+0x19c>
   2d73e:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2d742:	f1b9 0f00 	cmp.w	r9, #0
   2d746:	d001      	beq.n	2d74c <ip_interface_accept+0x19c>
   2d748:	6045      	str	r5, [r0, #4]
   2d74a:	e772      	b.n	2d632 <ip_interface_accept+0x82>
   2d74c:	6823      	ldr	r3, [r4, #0]
   2d74e:	03d9      	lsls	r1, r3, #15
   2d750:	f53f af73 	bmi.w	2d63a <ip_interface_accept+0x8a>
   2d754:	4d35      	ldr	r5, [pc, #212]	; (2d82c <ip_interface_accept+0x27c>)
   2d756:	9903      	ldr	r1, [sp, #12]
   2d758:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2d75c:	699b      	ldr	r3, [r3, #24]
   2d75e:	618b      	str	r3, [r1, #24]
   2d760:	b147      	cbz	r7, 2d774 <ip_interface_accept+0x1c4>
   2d762:	68cb      	ldr	r3, [r1, #12]
   2d764:	2b0a      	cmp	r3, #10
   2d766:	d028      	beq.n	2d7ba <ip_interface_accept+0x20a>
   2d768:	2b02      	cmp	r3, #2
   2d76a:	d103      	bne.n	2d774 <ip_interface_accept+0x1c4>
   2d76c:	f8d8 2000 	ldr.w	r2, [r8]
   2d770:	2a10      	cmp	r2, #16
   2d772:	d036      	beq.n	2d7e2 <ip_interface_accept+0x232>
   2d774:	680a      	ldr	r2, [r1, #0]
   2d776:	482e      	ldr	r0, [pc, #184]	; (2d830 <ip_interface_accept+0x280>)
   2d778:	4002      	ands	r2, r0
   2d77a:	f042 0205 	orr.w	r2, r2, #5
   2d77e:	600a      	str	r2, [r1, #0]
   2d780:	9a03      	ldr	r2, [sp, #12]
   2d782:	6811      	ldr	r1, [r2, #0]
   2d784:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   2d788:	6011      	str	r1, [r2, #0]
   2d78a:	6811      	ldr	r1, [r2, #0]
   2d78c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   2d790:	6011      	str	r1, [r2, #0]
   2d792:	6823      	ldr	r3, [r4, #0]
   2d794:	4003      	ands	r3, r0
   2d796:	f043 0307 	orr.w	r3, r3, #7
   2d79a:	6023      	str	r3, [r4, #0]
   2d79c:	6823      	ldr	r3, [r4, #0]
   2d79e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2d7a2:	6023      	str	r3, [r4, #0]
   2d7a4:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   2d7a8:	f7fe ff94 	bl	2c6d4 <rpc_ip_client_message_free>
   2d7ac:	2300      	movs	r3, #0
   2d7ae:	4648      	mov	r0, r9
   2d7b0:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   2d7b4:	b007      	add	sp, #28
   2d7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d7ba:	f8d8 2000 	ldr.w	r2, [r8]
   2d7be:	2a24      	cmp	r2, #36	; 0x24
   2d7c0:	d1d8      	bne.n	2d774 <ip_interface_accept+0x1c4>
   2d7c2:	703a      	strb	r2, [r7, #0]
   2d7c4:	2210      	movs	r2, #16
   2d7c6:	607b      	str	r3, [r7, #4]
   2d7c8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2d7cc:	f107 0010 	add.w	r0, r7, #16
   2d7d0:	8b9b      	ldrh	r3, [r3, #28]
   2d7d2:	813b      	strh	r3, [r7, #8]
   2d7d4:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   2d7d8:	3120      	adds	r1, #32
   2d7da:	f00b f9b0 	bl	38b3e <memcpy>
   2d7de:	9903      	ldr	r1, [sp, #12]
   2d7e0:	e7c8      	b.n	2d774 <ip_interface_accept+0x1c4>
   2d7e2:	703a      	strb	r2, [r7, #0]
   2d7e4:	607b      	str	r3, [r7, #4]
   2d7e6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2d7ea:	f107 000c 	add.w	r0, r7, #12
   2d7ee:	8b9b      	ldrh	r3, [r3, #28]
   2d7f0:	2204      	movs	r2, #4
   2d7f2:	e7ee      	b.n	2d7d2 <ip_interface_accept+0x222>
   2d7f4:	4630      	mov	r0, r6
   2d7f6:	f005 f899 	bl	3292c <interface_socket_from_handle_get>
   2d7fa:	b138      	cbz	r0, 2d80c <ip_interface_accept+0x25c>
   2d7fc:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2d800:	f1b9 0f00 	cmp.w	r9, #0
   2d804:	d002      	beq.n	2d80c <ip_interface_accept+0x25c>
   2d806:	f8c0 a004 	str.w	sl, [r0, #4]
   2d80a:	e766      	b.n	2d6da <ip_interface_accept+0x12a>
   2d80c:	6823      	ldr	r3, [r4, #0]
   2d80e:	9a01      	ldr	r2, [sp, #4]
   2d810:	46a9      	mov	r9, r5
   2d812:	4313      	orrs	r3, r2
   2d814:	6023      	str	r3, [r4, #0]
   2d816:	e79d      	b.n	2d754 <ip_interface_accept+0x1a4>
   2d818:	4605      	mov	r5, r0
   2d81a:	f04f 0909 	mov.w	r9, #9
   2d81e:	e6e9      	b.n	2d5f4 <ip_interface_accept+0x44>
   2d820:	f04f 090c 	mov.w	r9, #12
   2d824:	e6eb      	b.n	2d5fe <ip_interface_accept+0x4e>
   2d826:	bf00      	nop
   2d828:	0002c6f5 	.word	0x0002c6f5
   2d82c:	20023b1c 	.word	0x20023b1c
   2d830:	ffff0000 	.word	0xffff0000

0002d834 <ip_interface_setopt>:
   2d834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d838:	2901      	cmp	r1, #1
   2d83a:	b084      	sub	sp, #16
   2d83c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2d83e:	f040 808a 	bne.w	2d956 <ip_interface_setopt+0x122>
   2d842:	4617      	mov	r7, r2
   2d844:	461d      	mov	r5, r3
   2d846:	4680      	mov	r8, r0
   2d848:	f005 f870 	bl	3292c <interface_socket_from_handle_get>
   2d84c:	4604      	mov	r4, r0
   2d84e:	2800      	cmp	r0, #0
   2d850:	f000 808d 	beq.w	2d96e <ip_interface_setopt+0x13a>
   2d854:	f1a7 0119 	sub.w	r1, r7, #25
   2d858:	290f      	cmp	r1, #15
   2d85a:	d872      	bhi.n	2d942 <ip_interface_setopt+0x10e>
   2d85c:	e8df f001 	tbb	[pc, r1]
   2d860:	7171711a 	.word	0x7171711a
   2d864:	61514071 	.word	0x61514071
   2d868:	71717171 	.word	0x71717171
   2d86c:	08717171 	.word	0x08717171
   2d870:	2e04      	cmp	r6, #4
   2d872:	d176      	bne.n	2d962 <ip_interface_setopt+0x12e>
   2d874:	2d00      	cmp	r5, #0
   2d876:	d074      	beq.n	2d962 <ip_interface_setopt+0x12e>
   2d878:	4601      	mov	r1, r0
   2d87a:	e9cd 5600 	strd	r5, r6, [sp]
   2d87e:	4640      	mov	r0, r8
   2d880:	f241 0304 	movw	r3, #4100	; 0x1004
   2d884:	2208      	movs	r2, #8
   2d886:	f7ff fcff 	bl	2d288 <ip_interface_socketoption_send>
   2d88a:	bb20      	cbnz	r0, 2d8d6 <ip_interface_setopt+0xa2>
   2d88c:	2000      	movs	r0, #0
   2d88e:	b004      	add	sp, #16
   2d890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d894:	2d00      	cmp	r5, #0
   2d896:	d06c      	beq.n	2d972 <ip_interface_setopt+0x13e>
   2d898:	4628      	mov	r0, r5
   2d89a:	f7ef fbe9 	bl	1d070 <strlen>
   2d89e:	42b0      	cmp	r0, r6
   2d8a0:	d167      	bne.n	2d972 <ip_interface_setopt+0x13e>
   2d8a2:	6823      	ldr	r3, [r4, #0]
   2d8a4:	b29b      	uxth	r3, r3
   2d8a6:	2b02      	cmp	r3, #2
   2d8a8:	d161      	bne.n	2d96e <ip_interface_setopt+0x13a>
   2d8aa:	4629      	mov	r1, r5
   2d8ac:	68e0      	ldr	r0, [r4, #12]
   2d8ae:	f002 fdc1 	bl	30434 <pdn_interface_pdn_id_get>
   2d8b2:	9003      	str	r0, [sp, #12]
   2d8b4:	3001      	adds	r0, #1
   2d8b6:	bf08      	it	eq
   2d8b8:	2016      	moveq	r0, #22
   2d8ba:	d00c      	beq.n	2d8d6 <ip_interface_setopt+0xa2>
   2d8bc:	2204      	movs	r2, #4
   2d8be:	ab03      	add	r3, sp, #12
   2d8c0:	e9cd 3200 	strd	r3, r2, [sp]
   2d8c4:	4621      	mov	r1, r4
   2d8c6:	4640      	mov	r0, r8
   2d8c8:	f243 0310 	movw	r3, #12304	; 0x3010
   2d8cc:	2208      	movs	r2, #8
   2d8ce:	f7ff fcdb 	bl	2d288 <ip_interface_socketoption_send>
   2d8d2:	2800      	cmp	r0, #0
   2d8d4:	d0da      	beq.n	2d88c <ip_interface_setopt+0x58>
   2d8d6:	f7f9 fe51 	bl	2757c <bsd_os_errno_set>
   2d8da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d8de:	e7d6      	b.n	2d88e <ip_interface_setopt+0x5a>
   2d8e0:	2e04      	cmp	r6, #4
   2d8e2:	d13e      	bne.n	2d962 <ip_interface_setopt+0x12e>
   2d8e4:	2d00      	cmp	r5, #0
   2d8e6:	d03c      	beq.n	2d962 <ip_interface_setopt+0x12e>
   2d8e8:	4601      	mov	r1, r0
   2d8ea:	e9cd 5600 	strd	r5, r6, [sp]
   2d8ee:	4640      	mov	r0, r8
   2d8f0:	f248 0301 	movw	r3, #32769	; 0x8001
   2d8f4:	f44f 7200 	mov.w	r2, #512	; 0x200
   2d8f8:	f7ff fcc6 	bl	2d288 <ip_interface_socketoption_send>
   2d8fc:	2800      	cmp	r0, #0
   2d8fe:	d0c5      	beq.n	2d88c <ip_interface_setopt+0x58>
   2d900:	e7e9      	b.n	2d8d6 <ip_interface_setopt+0xa2>
   2d902:	2e04      	cmp	r6, #4
   2d904:	d12d      	bne.n	2d962 <ip_interface_setopt+0x12e>
   2d906:	b365      	cbz	r5, 2d962 <ip_interface_setopt+0x12e>
   2d908:	4601      	mov	r1, r0
   2d90a:	e9cd 5600 	strd	r5, r6, [sp]
   2d90e:	4640      	mov	r0, r8
   2d910:	f244 0310 	movw	r3, #16400	; 0x4010
   2d914:	f44f 7200 	mov.w	r2, #512	; 0x200
   2d918:	f7ff fcb6 	bl	2d288 <ip_interface_socketoption_send>
   2d91c:	2800      	cmp	r0, #0
   2d91e:	d0b5      	beq.n	2d88c <ip_interface_setopt+0x58>
   2d920:	e7d9      	b.n	2d8d6 <ip_interface_setopt+0xa2>
   2d922:	2e04      	cmp	r6, #4
   2d924:	d11d      	bne.n	2d962 <ip_interface_setopt+0x12e>
   2d926:	b1e5      	cbz	r5, 2d962 <ip_interface_setopt+0x12e>
   2d928:	4601      	mov	r1, r0
   2d92a:	e9cd 5600 	strd	r5, r6, [sp]
   2d92e:	4640      	mov	r0, r8
   2d930:	f246 0310 	movw	r3, #24592	; 0x6010
   2d934:	f44f 7200 	mov.w	r2, #512	; 0x200
   2d938:	f7ff fca6 	bl	2d288 <ip_interface_socketoption_send>
   2d93c:	2800      	cmp	r0, #0
   2d93e:	d0a5      	beq.n	2d88c <ip_interface_setopt+0x58>
   2d940:	e7c9      	b.n	2d8d6 <ip_interface_setopt+0xa2>
   2d942:	9600      	str	r6, [sp, #0]
   2d944:	462b      	mov	r3, r5
   2d946:	463a      	mov	r2, r7
   2d948:	4640      	mov	r0, r8
   2d94a:	2101      	movs	r1, #1
   2d94c:	f005 f816 	bl	3297c <interface_socket_setopt>
   2d950:	b004      	add	sp, #16
   2d952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d956:	202a      	movs	r0, #42	; 0x2a
   2d958:	f7f9 fe10 	bl	2757c <bsd_os_errno_set>
   2d95c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d960:	e795      	b.n	2d88e <ip_interface_setopt+0x5a>
   2d962:	2016      	movs	r0, #22
   2d964:	f7f9 fe0a 	bl	2757c <bsd_os_errno_set>
   2d968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d96c:	e78f      	b.n	2d88e <ip_interface_setopt+0x5a>
   2d96e:	2009      	movs	r0, #9
   2d970:	e7b1      	b.n	2d8d6 <ip_interface_setopt+0xa2>
   2d972:	200e      	movs	r0, #14
   2d974:	e7af      	b.n	2d8d6 <ip_interface_setopt+0xa2>
   2d976:	bf00      	nop

0002d978 <ip_interface_getopt>:
   2d978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d97c:	2901      	cmp	r1, #1
   2d97e:	b082      	sub	sp, #8
   2d980:	9c08      	ldr	r4, [sp, #32]
   2d982:	d173      	bne.n	2da6c <ip_interface_getopt+0xf4>
   2d984:	4617      	mov	r7, r2
   2d986:	461e      	mov	r6, r3
   2d988:	4680      	mov	r8, r0
   2d98a:	f004 ffcf 	bl	3292c <interface_socket_from_handle_get>
   2d98e:	2800      	cmp	r0, #0
   2d990:	d072      	beq.n	2da78 <ip_interface_getopt+0x100>
   2d992:	f1a7 051e 	sub.w	r5, r7, #30
   2d996:	2d0a      	cmp	r5, #10
   2d998:	d858      	bhi.n	2da4c <ip_interface_getopt+0xd4>
   2d99a:	e8df f005 	tbb	[pc, r5]
   2d99e:	331b      	.short	0x331b
   2d9a0:	57575745 	.word	0x57575745
   2d9a4:	57575757 	.word	0x57575757
   2d9a8:	06          	.byte	0x06
   2d9a9:	00          	.byte	0x00
   2d9aa:	2c00      	cmp	r4, #0
   2d9ac:	d058      	beq.n	2da60 <ip_interface_getopt+0xe8>
   2d9ae:	6823      	ldr	r3, [r4, #0]
   2d9b0:	2b04      	cmp	r3, #4
   2d9b2:	d155      	bne.n	2da60 <ip_interface_getopt+0xe8>
   2d9b4:	2e00      	cmp	r6, #0
   2d9b6:	d053      	beq.n	2da60 <ip_interface_getopt+0xe8>
   2d9b8:	4601      	mov	r1, r0
   2d9ba:	e9cd 6400 	strd	r6, r4, [sp]
   2d9be:	4640      	mov	r0, r8
   2d9c0:	f241 0304 	movw	r3, #4100	; 0x1004
   2d9c4:	2208      	movs	r2, #8
   2d9c6:	f7ff fbaf 	bl	2d128 <ip_interface_socketoption_get>
   2d9ca:	b9b0      	cbnz	r0, 2d9fa <ip_interface_getopt+0x82>
   2d9cc:	2000      	movs	r0, #0
   2d9ce:	b002      	add	sp, #8
   2d9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d9d4:	2c00      	cmp	r4, #0
   2d9d6:	d043      	beq.n	2da60 <ip_interface_getopt+0xe8>
   2d9d8:	6823      	ldr	r3, [r4, #0]
   2d9da:	2b04      	cmp	r3, #4
   2d9dc:	d140      	bne.n	2da60 <ip_interface_getopt+0xe8>
   2d9de:	2e00      	cmp	r6, #0
   2d9e0:	d03e      	beq.n	2da60 <ip_interface_getopt+0xe8>
   2d9e2:	4601      	mov	r1, r0
   2d9e4:	e9cd 6400 	strd	r6, r4, [sp]
   2d9e8:	4640      	mov	r0, r8
   2d9ea:	f248 0301 	movw	r3, #32769	; 0x8001
   2d9ee:	f44f 7200 	mov.w	r2, #512	; 0x200
   2d9f2:	f7ff fb99 	bl	2d128 <ip_interface_socketoption_get>
   2d9f6:	2800      	cmp	r0, #0
   2d9f8:	d0e8      	beq.n	2d9cc <ip_interface_getopt+0x54>
   2d9fa:	f7f9 fdbf 	bl	2757c <bsd_os_errno_set>
   2d9fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2da02:	e7e4      	b.n	2d9ce <ip_interface_getopt+0x56>
   2da04:	b364      	cbz	r4, 2da60 <ip_interface_getopt+0xe8>
   2da06:	6823      	ldr	r3, [r4, #0]
   2da08:	2b04      	cmp	r3, #4
   2da0a:	d129      	bne.n	2da60 <ip_interface_getopt+0xe8>
   2da0c:	b346      	cbz	r6, 2da60 <ip_interface_getopt+0xe8>
   2da0e:	4601      	mov	r1, r0
   2da10:	e9cd 6400 	strd	r6, r4, [sp]
   2da14:	4640      	mov	r0, r8
   2da16:	f244 0310 	movw	r3, #16400	; 0x4010
   2da1a:	f44f 7200 	mov.w	r2, #512	; 0x200
   2da1e:	f7ff fb83 	bl	2d128 <ip_interface_socketoption_get>
   2da22:	2800      	cmp	r0, #0
   2da24:	d0d2      	beq.n	2d9cc <ip_interface_getopt+0x54>
   2da26:	e7e8      	b.n	2d9fa <ip_interface_getopt+0x82>
   2da28:	b1d4      	cbz	r4, 2da60 <ip_interface_getopt+0xe8>
   2da2a:	6823      	ldr	r3, [r4, #0]
   2da2c:	2b04      	cmp	r3, #4
   2da2e:	d117      	bne.n	2da60 <ip_interface_getopt+0xe8>
   2da30:	b1b6      	cbz	r6, 2da60 <ip_interface_getopt+0xe8>
   2da32:	4601      	mov	r1, r0
   2da34:	e9cd 6400 	strd	r6, r4, [sp]
   2da38:	4640      	mov	r0, r8
   2da3a:	f246 0310 	movw	r3, #24592	; 0x6010
   2da3e:	f44f 7200 	mov.w	r2, #512	; 0x200
   2da42:	f7ff fb71 	bl	2d128 <ip_interface_socketoption_get>
   2da46:	2800      	cmp	r0, #0
   2da48:	d0c0      	beq.n	2d9cc <ip_interface_getopt+0x54>
   2da4a:	e7d6      	b.n	2d9fa <ip_interface_getopt+0x82>
   2da4c:	4633      	mov	r3, r6
   2da4e:	463a      	mov	r2, r7
   2da50:	4640      	mov	r0, r8
   2da52:	2101      	movs	r1, #1
   2da54:	9408      	str	r4, [sp, #32]
   2da56:	b002      	add	sp, #8
   2da58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2da5c:	f004 bfd4 	b.w	32a08 <interface_socket_getopt>
   2da60:	2016      	movs	r0, #22
   2da62:	f7f9 fd8b 	bl	2757c <bsd_os_errno_set>
   2da66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2da6a:	e7b0      	b.n	2d9ce <ip_interface_getopt+0x56>
   2da6c:	202a      	movs	r0, #42	; 0x2a
   2da6e:	f7f9 fd85 	bl	2757c <bsd_os_errno_set>
   2da72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2da76:	e7aa      	b.n	2d9ce <ip_interface_getopt+0x56>
   2da78:	2009      	movs	r0, #9
   2da7a:	f7f9 fd7f 	bl	2757c <bsd_os_errno_set>
   2da7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2da82:	e7a4      	b.n	2d9ce <ip_interface_getopt+0x56>

0002da84 <ip_interface_getaddrinfo>:
   2da84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2da88:	f04f 0c00 	mov.w	ip, #0
   2da8c:	2401      	movs	r4, #1
   2da8e:	4e75      	ldr	r6, [pc, #468]	; (2dc64 <ip_interface_getaddrinfo+0x1e0>)
   2da90:	4d75      	ldr	r5, [pc, #468]	; (2dc68 <ip_interface_getaddrinfo+0x1e4>)
   2da92:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 2dc78 <ip_interface_getaddrinfo+0x1f4>
   2da96:	4f75      	ldr	r7, [pc, #468]	; (2dc6c <ip_interface_getaddrinfo+0x1e8>)
   2da98:	7836      	ldrb	r6, [r6, #0]
   2da9a:	b085      	sub	sp, #20
   2da9c:	f8a5 c000 	strh.w	ip, [r5]
   2daa0:	f8c8 4000 	str.w	r4, [r8]
   2daa4:	603c      	str	r4, [r7, #0]
   2daa6:	2e00      	cmp	r6, #0
   2daa8:	d05b      	beq.n	2db62 <ip_interface_getaddrinfo+0xde>
   2daaa:	9301      	str	r3, [sp, #4]
   2daac:	4614      	mov	r4, r2
   2daae:	460b      	mov	r3, r1
   2dab0:	4606      	mov	r6, r0
   2dab2:	b171      	cbz	r1, 2dad2 <ip_interface_getaddrinfo+0x4e>
   2dab4:	4618      	mov	r0, r3
   2dab6:	220a      	movs	r2, #10
   2dab8:	4661      	mov	r1, ip
   2daba:	f007 fa53 	bl	34f64 <strtol>
   2dabe:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   2dac2:	1e42      	subs	r2, r0, #1
   2dac4:	429a      	cmp	r2, r3
   2dac6:	f200 8097 	bhi.w	2dbf8 <ip_interface_getaddrinfo+0x174>
   2daca:	0203      	lsls	r3, r0, #8
   2dacc:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   2dad0:	8028      	strh	r0, [r5, #0]
   2dad2:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 2dc7c <ip_interface_getaddrinfo+0x1f8>
   2dad6:	f8da 3000 	ldr.w	r3, [sl]
   2dada:	2b00      	cmp	r3, #0
   2dadc:	d145      	bne.n	2db6a <ip_interface_getaddrinfo+0xe6>
   2dade:	4a64      	ldr	r2, [pc, #400]	; (2dc70 <ip_interface_getaddrinfo+0x1ec>)
   2dae0:	6013      	str	r3, [r2, #0]
   2dae2:	4a64      	ldr	r2, [pc, #400]	; (2dc74 <ip_interface_getaddrinfo+0x1f0>)
   2dae4:	6013      	str	r3, [r2, #0]
   2dae6:	2e00      	cmp	r6, #0
   2dae8:	d07a      	beq.n	2dbe0 <ip_interface_getaddrinfo+0x15c>
   2daea:	4630      	mov	r0, r6
   2daec:	f7ef fac0 	bl	1d070 <strlen>
   2daf0:	4683      	mov	fp, r0
   2daf2:	b144      	cbz	r4, 2db06 <ip_interface_getaddrinfo+0x82>
   2daf4:	69e2      	ldr	r2, [r4, #28]
   2daf6:	b132      	cbz	r2, 2db06 <ip_interface_getaddrinfo+0x82>
   2daf8:	6851      	ldr	r1, [r2, #4]
   2dafa:	2966      	cmp	r1, #102	; 0x66
   2dafc:	d103      	bne.n	2db06 <ip_interface_getaddrinfo+0x82>
   2dafe:	6891      	ldr	r1, [r2, #8]
   2db00:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2db04:	d07e      	beq.n	2dc04 <ip_interface_getaddrinfo+0x180>
   2db06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2db0a:	2100      	movs	r1, #0
   2db0c:	f10d 0910 	add.w	r9, sp, #16
   2db10:	f849 1d04 	str.w	r1, [r9, #-4]!
   2db14:	4648      	mov	r0, r9
   2db16:	4659      	mov	r1, fp
   2db18:	9200      	str	r2, [sp, #0]
   2db1a:	f7fe fdb1 	bl	2c680 <rpc_ip_client_request_alloc>
   2db1e:	9a00      	ldr	r2, [sp, #0]
   2db20:	2800      	cmp	r0, #0
   2db22:	d15f      	bne.n	2dbe4 <ip_interface_getaddrinfo+0x160>
   2db24:	f247 010d 	movw	r1, #28685	; 0x700d
   2db28:	f04f 0c08 	mov.w	ip, #8
   2db2c:	9d03      	ldr	r5, [sp, #12]
   2db2e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   2db32:	60e9      	str	r1, [r5, #12]
   2db34:	612a      	str	r2, [r5, #16]
   2db36:	7268      	strb	r0, [r5, #9]
   2db38:	72a8      	strb	r0, [r5, #10]
   2db3a:	72e8      	strb	r0, [r5, #11]
   2db3c:	f885 c008 	strb.w	ip, [r5, #8]
   2db40:	2c00      	cmp	r4, #0
   2db42:	d076      	beq.n	2dc32 <ip_interface_getaddrinfo+0x1ae>
   2db44:	6862      	ldr	r2, [r4, #4]
   2db46:	f022 0108 	bic.w	r1, r2, #8
   2db4a:	2902      	cmp	r1, #2
   2db4c:	d011      	beq.n	2db72 <ip_interface_getaddrinfo+0xee>
   2db4e:	2a05      	cmp	r2, #5
   2db50:	d176      	bne.n	2dc40 <ip_interface_getaddrinfo+0x1bc>
   2db52:	68a1      	ldr	r1, [r4, #8]
   2db54:	2902      	cmp	r1, #2
   2db56:	6039      	str	r1, [r7, #0]
   2db58:	d115      	bne.n	2db86 <ip_interface_getaddrinfo+0x102>
   2db5a:	2102      	movs	r1, #2
   2db5c:	f8c8 1000 	str.w	r1, [r8]
   2db60:	e00b      	b.n	2db7a <ip_interface_getaddrinfo+0xf6>
   2db62:	2070      	movs	r0, #112	; 0x70
   2db64:	b005      	add	sp, #20
   2db66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2db6a:	2073      	movs	r0, #115	; 0x73
   2db6c:	b005      	add	sp, #20
   2db6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2db72:	68a1      	ldr	r1, [r4, #8]
   2db74:	2902      	cmp	r1, #2
   2db76:	6039      	str	r1, [r7, #0]
   2db78:	d0ef      	beq.n	2db5a <ip_interface_getaddrinfo+0xd6>
   2db7a:	2a05      	cmp	r2, #5
   2db7c:	d003      	beq.n	2db86 <ip_interface_getaddrinfo+0x102>
   2db7e:	2a0a      	cmp	r2, #10
   2db80:	bf14      	ite	ne
   2db82:	2201      	movne	r2, #1
   2db84:	2202      	moveq	r2, #2
   2db86:	61aa      	str	r2, [r5, #24]
   2db88:	68e2      	ldr	r2, [r4, #12]
   2db8a:	622a      	str	r2, [r5, #32]
   2db8c:	68a2      	ldr	r2, [r4, #8]
   2db8e:	61ea      	str	r2, [r5, #28]
   2db90:	6822      	ldr	r2, [r4, #0]
   2db92:	616a      	str	r2, [r5, #20]
   2db94:	68aa      	ldr	r2, [r5, #8]
   2db96:	3210      	adds	r2, #16
   2db98:	60aa      	str	r2, [r5, #8]
   2db9a:	b12e      	cbz	r6, 2dba8 <ip_interface_getaddrinfo+0x124>
   2db9c:	6828      	ldr	r0, [r5, #0]
   2db9e:	b118      	cbz	r0, 2dba8 <ip_interface_getaddrinfo+0x124>
   2dba0:	465a      	mov	r2, fp
   2dba2:	4631      	mov	r1, r6
   2dba4:	f00a ffcb 	bl	38b3e <memcpy>
   2dba8:	2301      	movs	r3, #1
   2dbaa:	f247 010d 	movw	r1, #28685	; 0x700d
   2dbae:	4628      	mov	r0, r5
   2dbb0:	f8ca 3000 	str.w	r3, [sl]
   2dbb4:	f7fe fd78 	bl	2c6a8 <rpc_ip_client_request_send>
   2dbb8:	bb10      	cbnz	r0, 2dc00 <ip_interface_getaddrinfo+0x17c>
   2dbba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2dbbe:	9303      	str	r3, [sp, #12]
   2dbc0:	4649      	mov	r1, r9
   2dbc2:	4628      	mov	r0, r5
   2dbc4:	f7f9 fc22 	bl	2740c <bsd_os_timedwait>
   2dbc8:	f8da 3000 	ldr.w	r3, [sl]
   2dbcc:	2b01      	cmp	r3, #1
   2dbce:	d0f7      	beq.n	2dbc0 <ip_interface_getaddrinfo+0x13c>
   2dbd0:	4b28      	ldr	r3, [pc, #160]	; (2dc74 <ip_interface_getaddrinfo+0x1f0>)
   2dbd2:	6818      	ldr	r0, [r3, #0]
   2dbd4:	bb40      	cbnz	r0, 2dc28 <ip_interface_getaddrinfo+0x1a4>
   2dbd6:	4b26      	ldr	r3, [pc, #152]	; (2dc70 <ip_interface_getaddrinfo+0x1ec>)
   2dbd8:	9a01      	ldr	r2, [sp, #4]
   2dbda:	681b      	ldr	r3, [r3, #0]
   2dbdc:	6013      	str	r3, [r2, #0]
   2dbde:	e7c1      	b.n	2db64 <ip_interface_getaddrinfo+0xe0>
   2dbe0:	46b3      	mov	fp, r6
   2dbe2:	e786      	b.n	2daf2 <ip_interface_getaddrinfo+0x6e>
   2dbe4:	9d03      	ldr	r5, [sp, #12]
   2dbe6:	2d00      	cmp	r5, #0
   2dbe8:	d1aa      	bne.n	2db40 <ip_interface_getaddrinfo+0xbc>
   2dbea:	200c      	movs	r0, #12
   2dbec:	2300      	movs	r3, #0
   2dbee:	f8ca 3000 	str.w	r3, [sl]
   2dbf2:	b005      	add	sp, #20
   2dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dbf8:	2016      	movs	r0, #22
   2dbfa:	b005      	add	sp, #20
   2dbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc00:	2023      	movs	r0, #35	; 0x23
   2dc02:	e7f3      	b.n	2dbec <ip_interface_getaddrinfo+0x168>
   2dc04:	f240 2002 	movw	r0, #514	; 0x202
   2dc08:	68d1      	ldr	r1, [r2, #12]
   2dc0a:	4281      	cmp	r1, r0
   2dc0c:	f47f af7b 	bne.w	2db06 <ip_interface_getaddrinfo+0x82>
   2dc10:	6991      	ldr	r1, [r2, #24]
   2dc12:	2900      	cmp	r1, #0
   2dc14:	f43f af77 	beq.w	2db06 <ip_interface_getaddrinfo+0x82>
   2dc18:	6860      	ldr	r0, [r4, #4]
   2dc1a:	f002 fc0b 	bl	30434 <pdn_interface_pdn_id_get>
   2dc1e:	1c43      	adds	r3, r0, #1
   2dc20:	f43f af71 	beq.w	2db06 <ip_interface_getaddrinfo+0x82>
   2dc24:	4602      	mov	r2, r0
   2dc26:	e770      	b.n	2db0a <ip_interface_getaddrinfo+0x86>
   2dc28:	4b12      	ldr	r3, [pc, #72]	; (2dc74 <ip_interface_getaddrinfo+0x1f0>)
   2dc2a:	6818      	ldr	r0, [r3, #0]
   2dc2c:	2800      	cmp	r0, #0
   2dc2e:	d099      	beq.n	2db64 <ip_interface_getaddrinfo+0xe0>
   2dc30:	e7dc      	b.n	2dbec <ip_interface_getaddrinfo+0x168>
   2dc32:	4621      	mov	r1, r4
   2dc34:	2210      	movs	r2, #16
   2dc36:	f105 0014 	add.w	r0, r5, #20
   2dc3a:	f00a ffa0 	bl	38b7e <memset>
   2dc3e:	e7a9      	b.n	2db94 <ip_interface_getaddrinfo+0x110>
   2dc40:	202f      	movs	r0, #47	; 0x2f
   2dc42:	f7f9 fc9b 	bl	2757c <bsd_os_errno_set>
   2dc46:	68aa      	ldr	r2, [r5, #8]
   2dc48:	3210      	adds	r2, #16
   2dc4a:	60aa      	str	r2, [r5, #8]
   2dc4c:	b916      	cbnz	r6, 2dc54 <ip_interface_getaddrinfo+0x1d0>
   2dc4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dc52:	e7cb      	b.n	2dbec <ip_interface_getaddrinfo+0x168>
   2dc54:	6828      	ldr	r0, [r5, #0]
   2dc56:	2800      	cmp	r0, #0
   2dc58:	d0f9      	beq.n	2dc4e <ip_interface_getaddrinfo+0x1ca>
   2dc5a:	465a      	mov	r2, fp
   2dc5c:	4631      	mov	r1, r6
   2dc5e:	f00a ff6e 	bl	38b3e <memcpy>
   2dc62:	e7f4      	b.n	2dc4e <ip_interface_getaddrinfo+0x1ca>
   2dc64:	2002c6e0 	.word	0x2002c6e0
   2dc68:	200287aa 	.word	0x200287aa
   2dc6c:	20023b0c 	.word	0x20023b0c
   2dc70:	20023b18 	.word	0x20023b18
   2dc74:	20023b10 	.word	0x20023b10
   2dc78:	20023b08 	.word	0x20023b08
   2dc7c:	20023b14 	.word	0x20023b14

0002dc80 <ip_interface_freeaddrinfo>:
   2dc80:	b538      	push	{r3, r4, r5, lr}
   2dc82:	4d0b      	ldr	r5, [pc, #44]	; (2dcb0 <ip_interface_freeaddrinfo+0x30>)
   2dc84:	682b      	ldr	r3, [r5, #0]
   2dc86:	2b02      	cmp	r3, #2
   2dc88:	d000      	beq.n	2dc8c <ip_interface_freeaddrinfo+0xc>
   2dc8a:	bd38      	pop	{r3, r4, r5, pc}
   2dc8c:	b150      	cbz	r0, 2dca4 <ip_interface_freeaddrinfo+0x24>
   2dc8e:	4604      	mov	r4, r0
   2dc90:	6940      	ldr	r0, [r0, #20]
   2dc92:	f004 f94d 	bl	31f30 <nrf_free>
   2dc96:	69a0      	ldr	r0, [r4, #24]
   2dc98:	b108      	cbz	r0, 2dc9e <ip_interface_freeaddrinfo+0x1e>
   2dc9a:	f004 f949 	bl	31f30 <nrf_free>
   2dc9e:	4620      	mov	r0, r4
   2dca0:	f004 f946 	bl	31f30 <nrf_free>
   2dca4:	2300      	movs	r3, #0
   2dca6:	4a03      	ldr	r2, [pc, #12]	; (2dcb4 <ip_interface_freeaddrinfo+0x34>)
   2dca8:	602b      	str	r3, [r5, #0]
   2dcaa:	6013      	str	r3, [r2, #0]
   2dcac:	bd38      	pop	{r3, r4, r5, pc}
   2dcae:	bf00      	nop
   2dcb0:	20023b14 	.word	0x20023b14
   2dcb4:	20023b10 	.word	0x20023b10

0002dcb8 <rpc_ip_event_handler>:
   2dcb8:	f248 030d 	movw	r3, #32781	; 0x800d
   2dcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dcc0:	4299      	cmp	r1, r3
   2dcc2:	b089      	sub	sp, #36	; 0x24
   2dcc4:	4604      	mov	r4, r0
   2dcc6:	d05c      	beq.n	2dd82 <rpc_ip_event_handler+0xca>
   2dcc8:	f248 030f 	movw	r3, #32783	; 0x800f
   2dccc:	4299      	cmp	r1, r3
   2dcce:	460d      	mov	r5, r1
   2dcd0:	d045      	beq.n	2dd5e <rpc_ip_event_handler+0xa6>
   2dcd2:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   2dcd6:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   2dcda:	68c0      	ldr	r0, [r0, #12]
   2dcdc:	d075      	beq.n	2ddca <rpc_ip_event_handler+0x112>
   2dcde:	0c06      	lsrs	r6, r0, #16
   2dce0:	4630      	mov	r0, r6
   2dce2:	f004 fe23 	bl	3292c <interface_socket_from_handle_get>
   2dce6:	4607      	mov	r7, r0
   2dce8:	2800      	cmp	r0, #0
   2dcea:	d059      	beq.n	2dda0 <rpc_ip_event_handler+0xe8>
   2dcec:	4601      	mov	r1, r0
   2dcee:	462b      	mov	r3, r5
   2dcf0:	4622      	mov	r2, r4
   2dcf2:	4630      	mov	r0, r6
   2dcf4:	f7fe fc36 	bl	2c564 <tls_rpc_ip_event_handler>
   2dcf8:	2800      	cmp	r0, #0
   2dcfa:	d04d      	beq.n	2dd98 <rpc_ip_event_handler+0xe0>
   2dcfc:	f248 0307 	movw	r3, #32775	; 0x8007
   2dd00:	429d      	cmp	r5, r3
   2dd02:	d866      	bhi.n	2ddd2 <rpc_ip_event_handler+0x11a>
   2dd04:	f248 0306 	movw	r3, #32774	; 0x8006
   2dd08:	429d      	cmp	r5, r3
   2dd0a:	f080 81e7 	bcs.w	2e0dc <rpc_ip_event_handler+0x424>
   2dd0e:	f248 0303 	movw	r3, #32771	; 0x8003
   2dd12:	429d      	cmp	r5, r3
   2dd14:	f000 81c5 	beq.w	2e0a2 <rpc_ip_event_handler+0x3ea>
   2dd18:	f200 811b 	bhi.w	2df52 <rpc_ip_event_handler+0x29a>
   2dd1c:	f248 0301 	movw	r3, #32769	; 0x8001
   2dd20:	429d      	cmp	r5, r3
   2dd22:	f000 8154 	beq.w	2dfce <rpc_ip_event_handler+0x316>
   2dd26:	f248 0302 	movw	r3, #32770	; 0x8002
   2dd2a:	429d      	cmp	r5, r3
   2dd2c:	d138      	bne.n	2dda0 <rpc_ip_event_handler+0xe8>
   2dd2e:	683b      	ldr	r3, [r7, #0]
   2dd30:	0098      	lsls	r0, r3, #2
   2dd32:	d531      	bpl.n	2dd98 <rpc_ip_event_handler+0xe0>
   2dd34:	683b      	ldr	r3, [r7, #0]
   2dd36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   2dd3a:	603b      	str	r3, [r7, #0]
   2dd3c:	6963      	ldr	r3, [r4, #20]
   2dd3e:	2b00      	cmp	r3, #0
   2dd40:	f000 81ea 	beq.w	2e118 <rpc_ip_event_handler+0x460>
   2dd44:	2b10      	cmp	r3, #16
   2dd46:	bf8e      	itee	hi
   2dd48:	232d      	movhi	r3, #45	; 0x2d
   2dd4a:	4ab9      	ldrls	r2, [pc, #740]	; (2e030 <rpc_ip_event_handler+0x378>)
   2dd4c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   2dd50:	607b      	str	r3, [r7, #4]
   2dd52:	683b      	ldr	r3, [r7, #0]
   2dd54:	2000      	movs	r0, #0
   2dd56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   2dd5a:	603b      	str	r3, [r7, #0]
   2dd5c:	e00e      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2dd5e:	6943      	ldr	r3, [r0, #20]
   2dd60:	2001      	movs	r0, #1
   2dd62:	2b10      	cmp	r3, #16
   2dd64:	49b3      	ldr	r1, [pc, #716]	; (2e034 <rpc_ip_event_handler+0x37c>)
   2dd66:	bf88      	it	hi
   2dd68:	222d      	movhi	r2, #45	; 0x2d
   2dd6a:	7008      	strb	r0, [r1, #0]
   2dd6c:	f04f 0000 	mov.w	r0, #0
   2dd70:	bf9c      	itt	ls
   2dd72:	4aaf      	ldrls	r2, [pc, #700]	; (2e030 <rpc_ip_event_handler+0x378>)
   2dd74:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   2dd78:	4baf      	ldr	r3, [pc, #700]	; (2e038 <rpc_ip_event_handler+0x380>)
   2dd7a:	601a      	str	r2, [r3, #0]
   2dd7c:	b009      	add	sp, #36	; 0x24
   2dd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dd82:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 2e04c <rpc_ip_event_handler+0x394>
   2dd86:	6807      	ldr	r7, [r0, #0]
   2dd88:	f8da 2000 	ldr.w	r2, [sl]
   2dd8c:	2a01      	cmp	r2, #1
   2dd8e:	d00b      	beq.n	2dda8 <rpc_ip_event_handler+0xf0>
   2dd90:	b117      	cbz	r7, 2dd98 <rpc_ip_event_handler+0xe0>
   2dd92:	4638      	mov	r0, r7
   2dd94:	f7fe fca6 	bl	2c6e4 <rpc_ip_client_data_free>
   2dd98:	2000      	movs	r0, #0
   2dd9a:	b009      	add	sp, #36	; 0x24
   2dd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dda0:	6820      	ldr	r0, [r4, #0]
   2dda2:	2800      	cmp	r0, #0
   2dda4:	d1f6      	bne.n	2dd94 <rpc_ip_event_handler+0xdc>
   2dda6:	e7f7      	b.n	2dd98 <rpc_ip_event_handler+0xe0>
   2dda8:	6942      	ldr	r2, [r0, #20]
   2ddaa:	2a00      	cmp	r2, #0
   2ddac:	d045      	beq.n	2de3a <rpc_ip_event_handler+0x182>
   2ddae:	2a10      	cmp	r2, #16
   2ddb0:	bf8e      	itee	hi
   2ddb2:	222d      	movhi	r2, #45	; 0x2d
   2ddb4:	499e      	ldrls	r1, [pc, #632]	; (2e030 <rpc_ip_event_handler+0x378>)
   2ddb6:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   2ddba:	49a0      	ldr	r1, [pc, #640]	; (2e03c <rpc_ip_event_handler+0x384>)
   2ddbc:	600a      	str	r2, [r1, #0]
   2ddbe:	2202      	movs	r2, #2
   2ddc0:	f8ca 2000 	str.w	r2, [sl]
   2ddc4:	2f00      	cmp	r7, #0
   2ddc6:	d1e4      	bne.n	2dd92 <rpc_ip_event_handler+0xda>
   2ddc8:	e7e6      	b.n	2dd98 <rpc_ip_event_handler+0xe0>
   2ddca:	f004 fd5d 	bl	32888 <interface_from_internal_id_search>
   2ddce:	4606      	mov	r6, r0
   2ddd0:	e786      	b.n	2dce0 <rpc_ip_event_handler+0x28>
   2ddd2:	f248 030c 	movw	r3, #32780	; 0x800c
   2ddd6:	429d      	cmp	r5, r3
   2ddd8:	f000 813c 	beq.w	2e054 <rpc_ip_event_handler+0x39c>
   2dddc:	f240 80d5 	bls.w	2df8a <rpc_ip_event_handler+0x2d2>
   2dde0:	f249 0302 	movw	r3, #36866	; 0x9002
   2dde4:	429d      	cmp	r5, r3
   2dde6:	f000 811d 	beq.w	2e024 <rpc_ip_event_handler+0x36c>
   2ddea:	f249 0303 	movw	r3, #36867	; 0x9003
   2ddee:	429d      	cmp	r5, r3
   2ddf0:	f000 80f9 	beq.w	2dfe6 <rpc_ip_event_handler+0x32e>
   2ddf4:	f249 0301 	movw	r3, #36865	; 0x9001
   2ddf8:	429d      	cmp	r5, r3
   2ddfa:	d1d1      	bne.n	2dda0 <rpc_ip_event_handler+0xe8>
   2ddfc:	683d      	ldr	r5, [r7, #0]
   2ddfe:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   2de02:	f000 8184 	beq.w	2e10e <rpc_ip_event_handler+0x456>
   2de06:	68a3      	ldr	r3, [r4, #8]
   2de08:	2b04      	cmp	r3, #4
   2de0a:	f200 81af 	bhi.w	2e16c <rpc_ip_event_handler+0x4b4>
   2de0e:	2500      	movs	r5, #0
   2de10:	462e      	mov	r6, r5
   2de12:	6821      	ldr	r1, [r4, #0]
   2de14:	6862      	ldr	r2, [r4, #4]
   2de16:	e9cd 6506 	strd	r6, r5, [sp, #24]
   2de1a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   2de1e:	69f8      	ldr	r0, [r7, #28]
   2de20:	a904      	add	r1, sp, #16
   2de22:	6803      	ldr	r3, [r0, #0]
   2de24:	685b      	ldr	r3, [r3, #4]
   2de26:	4798      	blx	r3
   2de28:	3001      	adds	r0, #1
   2de2a:	f000 818e 	beq.w	2e14a <rpc_ip_event_handler+0x492>
   2de2e:	683b      	ldr	r3, [r7, #0]
   2de30:	2000      	movs	r0, #0
   2de32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2de36:	603b      	str	r3, [r7, #0]
   2de38:	e7a0      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2de3a:	6985      	ldr	r5, [r0, #24]
   2de3c:	016b      	lsls	r3, r5, #5
   2de3e:	4618      	mov	r0, r3
   2de40:	9303      	str	r3, [sp, #12]
   2de42:	f004 f86b 	bl	31f1c <nrf_malloc>
   2de46:	9002      	str	r0, [sp, #8]
   2de48:	2800      	cmp	r0, #0
   2de4a:	d078      	beq.n	2df3e <rpc_ip_event_handler+0x286>
   2de4c:	00ee      	lsls	r6, r5, #3
   2de4e:	1970      	adds	r0, r6, r5
   2de50:	0080      	lsls	r0, r0, #2
   2de52:	f004 f863 	bl	31f1c <nrf_malloc>
   2de56:	2800      	cmp	r0, #0
   2de58:	d073      	beq.n	2df42 <rpc_ip_event_handler+0x28a>
   2de5a:	2d00      	cmp	r5, #0
   2de5c:	d074      	beq.n	2df48 <rpc_ip_event_handler+0x290>
   2de5e:	3610      	adds	r6, #16
   2de60:	1983      	adds	r3, r0, r6
   2de62:	9301      	str	r3, [sp, #4]
   2de64:	9b02      	ldr	r3, [sp, #8]
   2de66:	2204      	movs	r2, #4
   2de68:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 2e050 <rpc_ip_event_handler+0x398>
   2de6c:	f100 0810 	add.w	r8, r0, #16
   2de70:	f103 0520 	add.w	r5, r3, #32
   2de74:	e013      	b.n	2de9e <rpc_ip_event_handler+0x1e6>
   2de76:	464a      	mov	r2, r9
   2de78:	f00a fe61 	bl	38b3e <memcpy>
   2de7c:	2100      	movs	r1, #0
   2de7e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2de82:	f108 0808 	add.w	r8, r8, #8
   2de86:	eb09 0206 	add.w	r2, r9, r6
   2de8a:	f803 1009 	strb.w	r1, [r3, r9]
   2de8e:	9b01      	ldr	r3, [sp, #4]
   2de90:	f845 5c04 	str.w	r5, [r5, #-4]
   2de94:	4598      	cmp	r8, r3
   2de96:	f105 0520 	add.w	r5, r5, #32
   2de9a:	f000 8090 	beq.w	2dfbe <rpc_ip_event_handler+0x306>
   2de9e:	58bb      	ldr	r3, [r7, r2]
   2dea0:	18b9      	adds	r1, r7, r2
   2dea2:	f845 3c20 	str.w	r3, [r5, #-32]
   2dea6:	684b      	ldr	r3, [r1, #4]
   2dea8:	f8db 0000 	ldr.w	r0, [fp]
   2deac:	2b02      	cmp	r3, #2
   2deae:	bf14      	ite	ne
   2deb0:	2602      	movne	r6, #2
   2deb2:	260a      	moveq	r6, #10
   2deb4:	4b62      	ldr	r3, [pc, #392]	; (2e040 <rpc_ip_event_handler+0x388>)
   2deb6:	e945 6007 	strd	r6, r0, [r5, #-28]
   2deba:	681b      	ldr	r3, [r3, #0]
   2debc:	f102 0614 	add.w	r6, r2, #20
   2dec0:	f845 3c14 	str.w	r3, [r5, #-20]
   2dec4:	8a08      	ldrh	r0, [r1, #16]
   2dec6:	f1a8 0310 	sub.w	r3, r8, #16
   2deca:	f845 0c10 	str.w	r0, [r5, #-16]
   2dece:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   2ded2:	f845 3c0c 	str.w	r3, [r5, #-12]
   2ded6:	4b5b      	ldr	r3, [pc, #364]	; (2e044 <rpc_ip_event_handler+0x38c>)
   2ded8:	2804      	cmp	r0, #4
   2deda:	eb07 0106 	add.w	r1, r7, r6
   2dede:	881b      	ldrh	r3, [r3, #0]
   2dee0:	d01e      	beq.n	2df20 <rpc_ip_event_handler+0x268>
   2dee2:	220a      	movs	r2, #10
   2dee4:	f848 2c0c 	str.w	r2, [r8, #-12]
   2dee8:	f04f 0224 	mov.w	r2, #36	; 0x24
   2deec:	f828 3c08 	strh.w	r3, [r8, #-8]
   2def0:	f808 2c10 	strb.w	r2, [r8, #-16]
   2def4:	f855 2c10 	ldr.w	r2, [r5, #-16]
   2def8:	4640      	mov	r0, r8
   2defa:	f00a fe20 	bl	38b3e <memcpy>
   2defe:	f855 3c10 	ldr.w	r3, [r5, #-16]
   2df02:	f109 0001 	add.w	r0, r9, #1
   2df06:	441e      	add	r6, r3
   2df08:	f004 f808 	bl	31f1c <nrf_malloc>
   2df0c:	19b9      	adds	r1, r7, r6
   2df0e:	eb09 0206 	add.w	r2, r9, r6
   2df12:	f845 0c08 	str.w	r0, [r5, #-8]
   2df16:	2800      	cmp	r0, #0
   2df18:	d1ad      	bne.n	2de76 <rpc_ip_event_handler+0x1be>
   2df1a:	f108 0808 	add.w	r8, r8, #8
   2df1e:	e7b6      	b.n	2de8e <rpc_ip_event_handler+0x1d6>
   2df20:	2210      	movs	r2, #16
   2df22:	2002      	movs	r0, #2
   2df24:	f828 3c08 	strh.w	r3, [r8, #-8]
   2df28:	f848 0c0c 	str.w	r0, [r8, #-12]
   2df2c:	f808 2c10 	strb.w	r2, [r8, #-16]
   2df30:	f855 2c10 	ldr.w	r2, [r5, #-16]
   2df34:	f1a8 0004 	sub.w	r0, r8, #4
   2df38:	f00a fe01 	bl	38b3e <memcpy>
   2df3c:	e7df      	b.n	2defe <rpc_ip_event_handler+0x246>
   2df3e:	f003 fff7 	bl	31f30 <nrf_free>
   2df42:	210c      	movs	r1, #12
   2df44:	4a3d      	ldr	r2, [pc, #244]	; (2e03c <rpc_ip_event_handler+0x384>)
   2df46:	6011      	str	r1, [r2, #0]
   2df48:	9b02      	ldr	r3, [sp, #8]
   2df4a:	4a3f      	ldr	r2, [pc, #252]	; (2e048 <rpc_ip_event_handler+0x390>)
   2df4c:	6827      	ldr	r7, [r4, #0]
   2df4e:	6013      	str	r3, [r2, #0]
   2df50:	e735      	b.n	2ddbe <rpc_ip_event_handler+0x106>
   2df52:	f248 0304 	movw	r3, #32772	; 0x8004
   2df56:	429d      	cmp	r5, r3
   2df58:	f000 808f 	beq.w	2e07a <rpc_ip_event_handler+0x3c2>
   2df5c:	f248 0305 	movw	r3, #32773	; 0x8005
   2df60:	429d      	cmp	r5, r3
   2df62:	f47f af1d 	bne.w	2dda0 <rpc_ip_event_handler+0xe8>
   2df66:	683b      	ldr	r3, [r7, #0]
   2df68:	b29b      	uxth	r3, r3
   2df6a:	2b03      	cmp	r3, #3
   2df6c:	f47f af14 	bne.w	2dd98 <rpc_ip_event_handler+0xe0>
   2df70:	6963      	ldr	r3, [r4, #20]
   2df72:	2b00      	cmp	r3, #0
   2df74:	f000 80eb 	beq.w	2e14e <rpc_ip_event_handler+0x496>
   2df78:	2b10      	cmp	r3, #16
   2df7a:	f200 80bd 	bhi.w	2e0f8 <rpc_ip_event_handler+0x440>
   2df7e:	4a2c      	ldr	r2, [pc, #176]	; (2e030 <rpc_ip_event_handler+0x378>)
   2df80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2df84:	607b      	str	r3, [r7, #4]
   2df86:	2000      	movs	r0, #0
   2df88:	e6f8      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2df8a:	f248 0308 	movw	r3, #32776	; 0x8008
   2df8e:	429d      	cmp	r5, r3
   2df90:	f000 8094 	beq.w	2e0bc <rpc_ip_event_handler+0x404>
   2df94:	f248 0309 	movw	r3, #32777	; 0x8009
   2df98:	429d      	cmp	r5, r3
   2df9a:	f47f af01 	bne.w	2dda0 <rpc_ip_event_handler+0xe8>
   2df9e:	683b      	ldr	r3, [r7, #0]
   2dfa0:	b29b      	uxth	r3, r3
   2dfa2:	2b0d      	cmp	r3, #13
   2dfa4:	f47f aef8 	bne.w	2dd98 <rpc_ip_event_handler+0xe0>
   2dfa8:	6960      	ldr	r0, [r4, #20]
   2dfaa:	2800      	cmp	r0, #0
   2dfac:	f000 80d7 	beq.w	2e15e <rpc_ip_event_handler+0x4a6>
   2dfb0:	2810      	cmp	r0, #16
   2dfb2:	f200 80a1 	bhi.w	2e0f8 <rpc_ip_event_handler+0x440>
   2dfb6:	4b1e      	ldr	r3, [pc, #120]	; (2e030 <rpc_ip_event_handler+0x378>)
   2dfb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2dfbc:	e7e2      	b.n	2df84 <rpc_ip_event_handler+0x2cc>
   2dfbe:	2100      	movs	r1, #0
   2dfc0:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   2dfc4:	4403      	add	r3, r0
   2dfc6:	f843 1c04 	str.w	r1, [r3, #-4]
   2dfca:	4603      	mov	r3, r0
   2dfcc:	e7bd      	b.n	2df4a <rpc_ip_event_handler+0x292>
   2dfce:	683b      	ldr	r3, [r7, #0]
   2dfd0:	2b01      	cmp	r3, #1
   2dfd2:	f47f aee1 	bne.w	2dd98 <rpc_ip_event_handler+0xe0>
   2dfd6:	6960      	ldr	r0, [r4, #20]
   2dfd8:	2800      	cmp	r0, #0
   2dfda:	d1e9      	bne.n	2dfb0 <rpc_ip_event_handler+0x2f8>
   2dfdc:	2302      	movs	r3, #2
   2dfde:	603b      	str	r3, [r7, #0]
   2dfe0:	69a3      	ldr	r3, [r4, #24]
   2dfe2:	61bb      	str	r3, [r7, #24]
   2dfe4:	e6ca      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2dfe6:	683b      	ldr	r3, [r7, #0]
   2dfe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2dfec:	603b      	str	r3, [r7, #0]
   2dfee:	683b      	ldr	r3, [r7, #0]
   2dff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2dff4:	603b      	str	r3, [r7, #0]
   2dff6:	683b      	ldr	r3, [r7, #0]
   2dff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2dffc:	603b      	str	r3, [r7, #0]
   2dffe:	683b      	ldr	r3, [r7, #0]
   2e000:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2e004:	603b      	str	r3, [r7, #0]
   2e006:	6923      	ldr	r3, [r4, #16]
   2e008:	2b6c      	cmp	r3, #108	; 0x6c
   2e00a:	d077      	beq.n	2e0fc <rpc_ip_event_handler+0x444>
   2e00c:	2b10      	cmp	r3, #16
   2e00e:	bf8c      	ite	hi
   2e010:	232d      	movhi	r3, #45	; 0x2d
   2e012:	4a07      	ldrls	r2, [pc, #28]	; (2e030 <rpc_ip_event_handler+0x378>)
   2e014:	f04f 0000 	mov.w	r0, #0
   2e018:	bf98      	it	ls
   2e01a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   2e01e:	607b      	str	r3, [r7, #4]
   2e020:	60bb      	str	r3, [r7, #8]
   2e022:	e6ab      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e024:	683b      	ldr	r3, [r7, #0]
   2e026:	b29b      	uxth	r3, r3
   2e028:	2b07      	cmp	r3, #7
   2e02a:	f47f aeb5 	bne.w	2dd98 <rpc_ip_event_handler+0xe0>
   2e02e:	e6fe      	b.n	2de2e <rpc_ip_event_handler+0x176>
   2e030:	0003a17c 	.word	0x0003a17c
   2e034:	2002c6e1 	.word	0x2002c6e1
   2e038:	20023b40 	.word	0x20023b40
   2e03c:	20023b10 	.word	0x20023b10
   2e040:	20023b08 	.word	0x20023b08
   2e044:	200287aa 	.word	0x200287aa
   2e048:	20023b18 	.word	0x20023b18
   2e04c:	20023b14 	.word	0x20023b14
   2e050:	20023b0c 	.word	0x20023b0c
   2e054:	683b      	ldr	r3, [r7, #0]
   2e056:	b29b      	uxth	r3, r3
   2e058:	2b08      	cmp	r3, #8
   2e05a:	f47f ae9d 	bne.w	2dd98 <rpc_ip_event_handler+0xe0>
   2e05e:	6963      	ldr	r3, [r4, #20]
   2e060:	2b00      	cmp	r3, #0
   2e062:	d189      	bne.n	2df78 <rpc_ip_event_handler+0x2c0>
   2e064:	4b5e      	ldr	r3, [pc, #376]	; (2e1e0 <rpc_ip_event_handler+0x528>)
   2e066:	2001      	movs	r0, #1
   2e068:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   2e06c:	683b      	ldr	r3, [r7, #0]
   2e06e:	0c1b      	lsrs	r3, r3, #16
   2e070:	041b      	lsls	r3, r3, #16
   2e072:	f043 0309 	orr.w	r3, r3, #9
   2e076:	603b      	str	r3, [r7, #0]
   2e078:	e680      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e07a:	683b      	ldr	r3, [r7, #0]
   2e07c:	01db      	lsls	r3, r3, #7
   2e07e:	f57f ae8b 	bpl.w	2dd98 <rpc_ip_event_handler+0xe0>
   2e082:	6963      	ldr	r3, [r4, #20]
   2e084:	2b00      	cmp	r3, #0
   2e086:	f47f af77 	bne.w	2df78 <rpc_ip_event_handler+0x2c0>
   2e08a:	6823      	ldr	r3, [r4, #0]
   2e08c:	2b00      	cmp	r3, #0
   2e08e:	d071      	beq.n	2e174 <rpc_ip_event_handler+0x4bc>
   2e090:	2001      	movs	r0, #1
   2e092:	4b53      	ldr	r3, [pc, #332]	; (2e1e0 <rpc_ip_event_handler+0x528>)
   2e094:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   2e098:	683b      	ldr	r3, [r7, #0]
   2e09a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   2e09e:	603b      	str	r3, [r7, #0]
   2e0a0:	e66c      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e0a2:	683b      	ldr	r3, [r7, #0]
   2e0a4:	025a      	lsls	r2, r3, #9
   2e0a6:	f57f ae77 	bpl.w	2dd98 <rpc_ip_event_handler+0xe0>
   2e0aa:	6960      	ldr	r0, [r4, #20]
   2e0ac:	2800      	cmp	r0, #0
   2e0ae:	f47f af7f 	bne.w	2dfb0 <rpc_ip_event_handler+0x2f8>
   2e0b2:	683b      	ldr	r3, [r7, #0]
   2e0b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2e0b8:	603b      	str	r3, [r7, #0]
   2e0ba:	e65f      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e0bc:	683b      	ldr	r3, [r7, #0]
   2e0be:	b29b      	uxth	r3, r3
   2e0c0:	2b06      	cmp	r3, #6
   2e0c2:	f47f ae69 	bne.w	2dd98 <rpc_ip_event_handler+0xe0>
   2e0c6:	6960      	ldr	r0, [r4, #20]
   2e0c8:	2800      	cmp	r0, #0
   2e0ca:	f47f af71 	bne.w	2dfb0 <rpc_ip_event_handler+0x2f8>
   2e0ce:	683b      	ldr	r3, [r7, #0]
   2e0d0:	0c1b      	lsrs	r3, r3, #16
   2e0d2:	041b      	lsls	r3, r3, #16
   2e0d4:	f043 0307 	orr.w	r3, r3, #7
   2e0d8:	603b      	str	r3, [r7, #0]
   2e0da:	e64f      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e0dc:	683b      	ldr	r3, [r7, #0]
   2e0de:	0299      	lsls	r1, r3, #10
   2e0e0:	f57f ae5a 	bpl.w	2dd98 <rpc_ip_event_handler+0xe0>
   2e0e4:	6963      	ldr	r3, [r4, #20]
   2e0e6:	b33b      	cbz	r3, 2e138 <rpc_ip_event_handler+0x480>
   2e0e8:	2b6b      	cmp	r3, #107	; 0x6b
   2e0ea:	f47f ae2b 	bne.w	2dd44 <rpc_ip_event_handler+0x8c>
   2e0ee:	693b      	ldr	r3, [r7, #16]
   2e0f0:	2b01      	cmp	r3, #1
   2e0f2:	d041      	beq.n	2e178 <rpc_ip_event_handler+0x4c0>
   2e0f4:	230c      	movs	r3, #12
   2e0f6:	e62b      	b.n	2dd50 <rpc_ip_event_handler+0x98>
   2e0f8:	232d      	movs	r3, #45	; 0x2d
   2e0fa:	e743      	b.n	2df84 <rpc_ip_event_handler+0x2cc>
   2e0fc:	2239      	movs	r2, #57	; 0x39
   2e0fe:	683b      	ldr	r3, [r7, #0]
   2e100:	2000      	movs	r0, #0
   2e102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   2e106:	603b      	str	r3, [r7, #0]
   2e108:	607a      	str	r2, [r7, #4]
   2e10a:	60ba      	str	r2, [r7, #8]
   2e10c:	e636      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e10e:	6820      	ldr	r0, [r4, #0]
   2e110:	f7fe fae8 	bl	2c6e4 <rpc_ip_client_data_free>
   2e114:	4628      	mov	r0, r5
   2e116:	e631      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e118:	683b      	ldr	r3, [r7, #0]
   2e11a:	2000      	movs	r0, #0
   2e11c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e120:	603b      	str	r3, [r7, #0]
   2e122:	683b      	ldr	r3, [r7, #0]
   2e124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2e128:	603b      	str	r3, [r7, #0]
   2e12a:	683b      	ldr	r3, [r7, #0]
   2e12c:	0c1b      	lsrs	r3, r3, #16
   2e12e:	041b      	lsls	r3, r3, #16
   2e130:	f043 0305 	orr.w	r3, r3, #5
   2e134:	603b      	str	r3, [r7, #0]
   2e136:	e621      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e138:	683b      	ldr	r3, [r7, #0]
   2e13a:	4a29      	ldr	r2, [pc, #164]	; (2e1e0 <rpc_ip_event_handler+0x528>)
   2e13c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e140:	603b      	str	r3, [r7, #0]
   2e142:	2001      	movs	r0, #1
   2e144:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   2e148:	e618      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e14a:	2002      	movs	r0, #2
   2e14c:	e616      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e14e:	683b      	ldr	r3, [r7, #0]
   2e150:	2000      	movs	r0, #0
   2e152:	0c1b      	lsrs	r3, r3, #16
   2e154:	041b      	lsls	r3, r3, #16
   2e156:	f043 0304 	orr.w	r3, r3, #4
   2e15a:	603b      	str	r3, [r7, #0]
   2e15c:	e60e      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e15e:	683b      	ldr	r3, [r7, #0]
   2e160:	0c1b      	lsrs	r3, r3, #16
   2e162:	041b      	lsls	r3, r3, #16
   2e164:	f043 030e 	orr.w	r3, r3, #14
   2e168:	603b      	str	r3, [r7, #0]
   2e16a:	e607      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e16c:	8a65      	ldrh	r5, [r4, #18]
   2e16e:	b95d      	cbnz	r5, 2e188 <rpc_ip_event_handler+0x4d0>
   2e170:	462e      	mov	r6, r5
   2e172:	e64e      	b.n	2de12 <rpc_ip_event_handler+0x15a>
   2e174:	2000      	movs	r0, #0
   2e176:	e78f      	b.n	2e098 <rpc_ip_event_handler+0x3e0>
   2e178:	220c      	movs	r2, #12
   2e17a:	683b      	ldr	r3, [r7, #0]
   2e17c:	2000      	movs	r0, #0
   2e17e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   2e182:	603b      	str	r3, [r7, #0]
   2e184:	607a      	str	r2, [r7, #4]
   2e186:	e5f9      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e188:	2024      	movs	r0, #36	; 0x24
   2e18a:	f003 fec7 	bl	31f1c <nrf_malloc>
   2e18e:	4606      	mov	r6, r0
   2e190:	2800      	cmp	r0, #0
   2e192:	d0da      	beq.n	2e14a <rpc_ip_event_handler+0x492>
   2e194:	8a62      	ldrh	r2, [r4, #18]
   2e196:	2a10      	cmp	r2, #16
   2e198:	d009      	beq.n	2e1ae <rpc_ip_event_handler+0x4f6>
   2e19a:	2a04      	cmp	r2, #4
   2e19c:	d013      	beq.n	2e1c6 <rpc_ip_event_handler+0x50e>
   2e19e:	6820      	ldr	r0, [r4, #0]
   2e1a0:	f7fe faa0 	bl	2c6e4 <rpc_ip_client_data_free>
   2e1a4:	4630      	mov	r0, r6
   2e1a6:	f003 fec3 	bl	31f30 <nrf_free>
   2e1aa:	2000      	movs	r0, #0
   2e1ac:	e5e6      	b.n	2dd7c <rpc_ip_event_handler+0xc4>
   2e1ae:	230a      	movs	r3, #10
   2e1b0:	2524      	movs	r5, #36	; 0x24
   2e1b2:	6043      	str	r3, [r0, #4]
   2e1b4:	7005      	strb	r5, [r0, #0]
   2e1b6:	8a23      	ldrh	r3, [r4, #16]
   2e1b8:	f104 0114 	add.w	r1, r4, #20
   2e1bc:	8103      	strh	r3, [r0, #8]
   2e1be:	3010      	adds	r0, #16
   2e1c0:	f00a fcbd 	bl	38b3e <memcpy>
   2e1c4:	e625      	b.n	2de12 <rpc_ip_event_handler+0x15a>
   2e1c6:	2302      	movs	r3, #2
   2e1c8:	2510      	movs	r5, #16
   2e1ca:	6043      	str	r3, [r0, #4]
   2e1cc:	7005      	strb	r5, [r0, #0]
   2e1ce:	8a23      	ldrh	r3, [r4, #16]
   2e1d0:	f104 0114 	add.w	r1, r4, #20
   2e1d4:	8103      	strh	r3, [r0, #8]
   2e1d6:	300c      	adds	r0, #12
   2e1d8:	f00a fcb1 	bl	38b3e <memcpy>
   2e1dc:	e619      	b.n	2de12 <rpc_ip_event_handler+0x15a>
   2e1de:	bf00      	nop
   2e1e0:	20023b1c 	.word	0x20023b1c

0002e1e4 <rpc_handle_ctrl_message>:
   2e1e4:	2902      	cmp	r1, #2
   2e1e6:	b510      	push	{r4, lr}
   2e1e8:	4604      	mov	r4, r0
   2e1ea:	d00c      	beq.n	2e206 <rpc_handle_ctrl_message+0x22>
   2e1ec:	2904      	cmp	r1, #4
   2e1ee:	d008      	beq.n	2e202 <rpc_handle_ctrl_message+0x1e>
   2e1f0:	2901      	cmp	r1, #1
   2e1f2:	d006      	beq.n	2e202 <rpc_handle_ctrl_message+0x1e>
   2e1f4:	6880      	ldr	r0, [r0, #8]
   2e1f6:	b108      	cbz	r0, 2e1fc <rpc_handle_ctrl_message+0x18>
   2e1f8:	f7fc fd32 	bl	2ac60 <rpc_transport_data_free>
   2e1fc:	4620      	mov	r0, r4
   2e1fe:	f7fc fd2d 	bl	2ac5c <rpc_transport_rpc_free>
   2e202:	2000      	movs	r0, #0
   2e204:	bd10      	pop	{r4, pc}
   2e206:	6880      	ldr	r0, [r0, #8]
   2e208:	2800      	cmp	r0, #0
   2e20a:	d0fa      	beq.n	2e202 <rpc_handle_ctrl_message+0x1e>
   2e20c:	f7fc fd28 	bl	2ac60 <rpc_transport_data_free>
   2e210:	2000      	movs	r0, #0
   2e212:	bd10      	pop	{r4, pc}

0002e214 <rpc_handle_data_message>:
   2e214:	4b23      	ldr	r3, [pc, #140]	; (2e2a4 <rpc_handle_data_message+0x90>)
   2e216:	6802      	ldr	r2, [r0, #0]
   2e218:	8819      	ldrh	r1, [r3, #0]
   2e21a:	b292      	uxth	r2, r2
   2e21c:	4291      	cmp	r1, r2
   2e21e:	d027      	beq.n	2e270 <rpc_handle_data_message+0x5c>
   2e220:	8a19      	ldrh	r1, [r3, #16]
   2e222:	4291      	cmp	r1, r2
   2e224:	d02a      	beq.n	2e27c <rpc_handle_data_message+0x68>
   2e226:	8c19      	ldrh	r1, [r3, #32]
   2e228:	4291      	cmp	r1, r2
   2e22a:	d02b      	beq.n	2e284 <rpc_handle_data_message+0x70>
   2e22c:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   2e22e:	4291      	cmp	r1, r2
   2e230:	d02a      	beq.n	2e288 <rpc_handle_data_message+0x74>
   2e232:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   2e236:	4291      	cmp	r1, r2
   2e238:	d028      	beq.n	2e28c <rpc_handle_data_message+0x78>
   2e23a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   2e23e:	4291      	cmp	r1, r2
   2e240:	d026      	beq.n	2e290 <rpc_handle_data_message+0x7c>
   2e242:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   2e246:	4291      	cmp	r1, r2
   2e248:	d026      	beq.n	2e298 <rpc_handle_data_message+0x84>
   2e24a:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   2e24e:	4291      	cmp	r1, r2
   2e250:	d024      	beq.n	2e29c <rpc_handle_data_message+0x88>
   2e252:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   2e256:	4291      	cmp	r1, r2
   2e258:	d01c      	beq.n	2e294 <rpc_handle_data_message+0x80>
   2e25a:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   2e25e:	4291      	cmp	r1, r2
   2e260:	d01e      	beq.n	2e2a0 <rpc_handle_data_message+0x8c>
   2e262:	6880      	ldr	r0, [r0, #8]
   2e264:	b160      	cbz	r0, 2e280 <rpc_handle_data_message+0x6c>
   2e266:	b510      	push	{r4, lr}
   2e268:	f7fc fcfa 	bl	2ac60 <rpc_transport_data_free>
   2e26c:	2000      	movs	r0, #0
   2e26e:	bd10      	pop	{r4, pc}
   2e270:	2200      	movs	r2, #0
   2e272:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2e276:	685a      	ldr	r2, [r3, #4]
   2e278:	68d9      	ldr	r1, [r3, #12]
   2e27a:	4710      	bx	r2
   2e27c:	2201      	movs	r2, #1
   2e27e:	e7f8      	b.n	2e272 <rpc_handle_data_message+0x5e>
   2e280:	2000      	movs	r0, #0
   2e282:	4770      	bx	lr
   2e284:	2202      	movs	r2, #2
   2e286:	e7f4      	b.n	2e272 <rpc_handle_data_message+0x5e>
   2e288:	2203      	movs	r2, #3
   2e28a:	e7f2      	b.n	2e272 <rpc_handle_data_message+0x5e>
   2e28c:	2204      	movs	r2, #4
   2e28e:	e7f0      	b.n	2e272 <rpc_handle_data_message+0x5e>
   2e290:	2205      	movs	r2, #5
   2e292:	e7ee      	b.n	2e272 <rpc_handle_data_message+0x5e>
   2e294:	2208      	movs	r2, #8
   2e296:	e7ec      	b.n	2e272 <rpc_handle_data_message+0x5e>
   2e298:	2206      	movs	r2, #6
   2e29a:	e7ea      	b.n	2e272 <rpc_handle_data_message+0x5e>
   2e29c:	2207      	movs	r2, #7
   2e29e:	e7e8      	b.n	2e272 <rpc_handle_data_message+0x5e>
   2e2a0:	2209      	movs	r2, #9
   2e2a2:	e7e6      	b.n	2e272 <rpc_handle_data_message+0x5e>
   2e2a4:	20023b44 	.word	0x20023b44

0002e2a8 <rpc_framework_init>:
   2e2a8:	b508      	push	{r3, lr}
   2e2aa:	22a0      	movs	r2, #160	; 0xa0
   2e2ac:	2100      	movs	r1, #0
   2e2ae:	4802      	ldr	r0, [pc, #8]	; (2e2b8 <rpc_framework_init+0x10>)
   2e2b0:	f00a fc65 	bl	38b7e <memset>
   2e2b4:	2000      	movs	r0, #0
   2e2b6:	bd08      	pop	{r3, pc}
   2e2b8:	20023b44 	.word	0x20023b44

0002e2bc <rpc_client_register>:
   2e2bc:	8803      	ldrh	r3, [r0, #0]
   2e2be:	2b00      	cmp	r3, #0
   2e2c0:	d045      	beq.n	2e34e <rpc_client_register+0x92>
   2e2c2:	6842      	ldr	r2, [r0, #4]
   2e2c4:	4601      	mov	r1, r0
   2e2c6:	2a00      	cmp	r2, #0
   2e2c8:	d050      	beq.n	2e36c <rpc_client_register+0xb0>
   2e2ca:	4a30      	ldr	r2, [pc, #192]	; (2e38c <rpc_client_register+0xd0>)
   2e2cc:	8810      	ldrh	r0, [r2, #0]
   2e2ce:	4283      	cmp	r3, r0
   2e2d0:	d03d      	beq.n	2e34e <rpc_client_register+0x92>
   2e2d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e2d6:	8a14      	ldrh	r4, [r2, #16]
   2e2d8:	42a3      	cmp	r3, r4
   2e2da:	d035      	beq.n	2e348 <rpc_client_register+0x8c>
   2e2dc:	8c15      	ldrh	r5, [r2, #32]
   2e2de:	42ab      	cmp	r3, r5
   2e2e0:	d032      	beq.n	2e348 <rpc_client_register+0x8c>
   2e2e2:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   2e2e4:	42b3      	cmp	r3, r6
   2e2e6:	d02f      	beq.n	2e348 <rpc_client_register+0x8c>
   2e2e8:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   2e2ec:	42bb      	cmp	r3, r7
   2e2ee:	d02b      	beq.n	2e348 <rpc_client_register+0x8c>
   2e2f0:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   2e2f4:	4563      	cmp	r3, ip
   2e2f6:	d027      	beq.n	2e348 <rpc_client_register+0x8c>
   2e2f8:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   2e2fc:	4573      	cmp	r3, lr
   2e2fe:	d023      	beq.n	2e348 <rpc_client_register+0x8c>
   2e300:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   2e304:	4543      	cmp	r3, r8
   2e306:	d01f      	beq.n	2e348 <rpc_client_register+0x8c>
   2e308:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   2e30c:	454b      	cmp	r3, r9
   2e30e:	d01b      	beq.n	2e348 <rpc_client_register+0x8c>
   2e310:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   2e314:	4553      	cmp	r3, sl
   2e316:	d017      	beq.n	2e348 <rpc_client_register+0x8c>
   2e318:	b1e0      	cbz	r0, 2e354 <rpc_client_register+0x98>
   2e31a:	b35c      	cbz	r4, 2e374 <rpc_client_register+0xb8>
   2e31c:	b365      	cbz	r5, 2e378 <rpc_client_register+0xbc>
   2e31e:	b36e      	cbz	r6, 2e37c <rpc_client_register+0xc0>
   2e320:	b377      	cbz	r7, 2e380 <rpc_client_register+0xc4>
   2e322:	f1bc 0f00 	cmp.w	ip, #0
   2e326:	d02d      	beq.n	2e384 <rpc_client_register+0xc8>
   2e328:	f1be 0f00 	cmp.w	lr, #0
   2e32c:	d020      	beq.n	2e370 <rpc_client_register+0xb4>
   2e32e:	f1b8 0f00 	cmp.w	r8, #0
   2e332:	d029      	beq.n	2e388 <rpc_client_register+0xcc>
   2e334:	f1b9 0f00 	cmp.w	r9, #0
   2e338:	d00b      	beq.n	2e352 <rpc_client_register+0x96>
   2e33a:	2009      	movs	r0, #9
   2e33c:	f1ba 0f00 	cmp.w	sl, #0
   2e340:	d008      	beq.n	2e354 <rpc_client_register+0x98>
   2e342:	2004      	movs	r0, #4
   2e344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e348:	2007      	movs	r0, #7
   2e34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e34e:	2007      	movs	r0, #7
   2e350:	4770      	bx	lr
   2e352:	2008      	movs	r0, #8
   2e354:	0100      	lsls	r0, r0, #4
   2e356:	5213      	strh	r3, [r2, r0]
   2e358:	684b      	ldr	r3, [r1, #4]
   2e35a:	4402      	add	r2, r0
   2e35c:	6053      	str	r3, [r2, #4]
   2e35e:	688b      	ldr	r3, [r1, #8]
   2e360:	2000      	movs	r0, #0
   2e362:	6093      	str	r3, [r2, #8]
   2e364:	68cb      	ldr	r3, [r1, #12]
   2e366:	60d3      	str	r3, [r2, #12]
   2e368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e36c:	200e      	movs	r0, #14
   2e36e:	4770      	bx	lr
   2e370:	2006      	movs	r0, #6
   2e372:	e7ef      	b.n	2e354 <rpc_client_register+0x98>
   2e374:	2001      	movs	r0, #1
   2e376:	e7ed      	b.n	2e354 <rpc_client_register+0x98>
   2e378:	2002      	movs	r0, #2
   2e37a:	e7eb      	b.n	2e354 <rpc_client_register+0x98>
   2e37c:	2003      	movs	r0, #3
   2e37e:	e7e9      	b.n	2e354 <rpc_client_register+0x98>
   2e380:	2004      	movs	r0, #4
   2e382:	e7e7      	b.n	2e354 <rpc_client_register+0x98>
   2e384:	2005      	movs	r0, #5
   2e386:	e7e5      	b.n	2e354 <rpc_client_register+0x98>
   2e388:	2007      	movs	r0, #7
   2e38a:	e7e3      	b.n	2e354 <rpc_client_register+0x98>
   2e38c:	20023b44 	.word	0x20023b44

0002e390 <rpc_message_send>:
   2e390:	b150      	cbz	r0, 2e3a8 <rpc_message_send+0x18>
   2e392:	b159      	cbz	r1, 2e3ac <rpc_message_send+0x1c>
   2e394:	684b      	ldr	r3, [r1, #4]
   2e396:	8008      	strh	r0, [r1, #0]
   2e398:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2e39c:	f043 0302 	orr.w	r3, r3, #2
   2e3a0:	604b      	str	r3, [r1, #4]
   2e3a2:	4608      	mov	r0, r1
   2e3a4:	f7fc bc54 	b.w	2ac50 <rpc_transport_send>
   2e3a8:	2007      	movs	r0, #7
   2e3aa:	4770      	bx	lr
   2e3ac:	200e      	movs	r0, #14
   2e3ae:	4770      	bx	lr

0002e3b0 <rpc_message_alloc>:
   2e3b0:	b342      	cbz	r2, 2e404 <rpc_message_alloc+0x54>
   2e3b2:	b328      	cbz	r0, 2e400 <rpc_message_alloc+0x50>
   2e3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e3b6:	2300      	movs	r3, #0
   2e3b8:	4616      	mov	r6, r2
   2e3ba:	460c      	mov	r4, r1
   2e3bc:	4605      	mov	r5, r0
   2e3be:	6013      	str	r3, [r2, #0]
   2e3c0:	b171      	cbz	r1, 2e3e0 <rpc_message_alloc+0x30>
   2e3c2:	4608      	mov	r0, r1
   2e3c4:	f7fc fc48 	bl	2ac58 <rpc_transport_data_alloc>
   2e3c8:	4607      	mov	r7, r0
   2e3ca:	b1b8      	cbz	r0, 2e3fc <rpc_message_alloc+0x4c>
   2e3cc:	f7fc fc42 	bl	2ac54 <rpc_transport_rpc_alloc>
   2e3d0:	4603      	mov	r3, r0
   2e3d2:	b180      	cbz	r0, 2e3f6 <rpc_message_alloc+0x46>
   2e3d4:	2000      	movs	r0, #0
   2e3d6:	60dc      	str	r4, [r3, #12]
   2e3d8:	609f      	str	r7, [r3, #8]
   2e3da:	801d      	strh	r5, [r3, #0]
   2e3dc:	6033      	str	r3, [r6, #0]
   2e3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e3e0:	f7fc fc38 	bl	2ac54 <rpc_transport_rpc_alloc>
   2e3e4:	4603      	mov	r3, r0
   2e3e6:	b148      	cbz	r0, 2e3fc <rpc_message_alloc+0x4c>
   2e3e8:	4627      	mov	r7, r4
   2e3ea:	60dc      	str	r4, [r3, #12]
   2e3ec:	609f      	str	r7, [r3, #8]
   2e3ee:	801d      	strh	r5, [r3, #0]
   2e3f0:	2000      	movs	r0, #0
   2e3f2:	6033      	str	r3, [r6, #0]
   2e3f4:	e7f3      	b.n	2e3de <rpc_message_alloc+0x2e>
   2e3f6:	4638      	mov	r0, r7
   2e3f8:	f7fc fc32 	bl	2ac60 <rpc_transport_data_free>
   2e3fc:	2004      	movs	r0, #4
   2e3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e400:	2007      	movs	r0, #7
   2e402:	4770      	bx	lr
   2e404:	200e      	movs	r0, #14
   2e406:	4770      	bx	lr

0002e408 <rpc_message_free>:
   2e408:	b130      	cbz	r0, 2e418 <rpc_message_free+0x10>
   2e40a:	b139      	cbz	r1, 2e41c <rpc_message_free+0x14>
   2e40c:	b508      	push	{r3, lr}
   2e40e:	4608      	mov	r0, r1
   2e410:	f7fc fc24 	bl	2ac5c <rpc_transport_rpc_free>
   2e414:	2000      	movs	r0, #0
   2e416:	bd08      	pop	{r3, pc}
   2e418:	2007      	movs	r0, #7
   2e41a:	4770      	bx	lr
   2e41c:	200e      	movs	r0, #14
   2e41e:	4770      	bx	lr

0002e420 <rpc_message_data_free>:
   2e420:	b130      	cbz	r0, 2e430 <rpc_message_data_free+0x10>
   2e422:	b139      	cbz	r1, 2e434 <rpc_message_data_free+0x14>
   2e424:	b508      	push	{r3, lr}
   2e426:	4608      	mov	r0, r1
   2e428:	f7fc fc1a 	bl	2ac60 <rpc_transport_data_free>
   2e42c:	2000      	movs	r0, #0
   2e42e:	bd08      	pop	{r3, pc}
   2e430:	2007      	movs	r0, #7
   2e432:	4770      	bx	lr
   2e434:	200e      	movs	r0, #14
   2e436:	4770      	bx	lr

0002e438 <packet_free_cb>:
   2e438:	b510      	push	{r4, lr}
   2e43a:	4604      	mov	r4, r0
   2e43c:	b118      	cbz	r0, 2e446 <packet_free_cb+0xe>
   2e43e:	6800      	ldr	r0, [r0, #0]
   2e440:	b108      	cbz	r0, 2e446 <packet_free_cb+0xe>
   2e442:	f002 ff87 	bl	31354 <rpc_gnss_client_data_free>
   2e446:	68a0      	ldr	r0, [r4, #8]
   2e448:	b118      	cbz	r0, 2e452 <packet_free_cb+0x1a>
   2e44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e44e:	f003 bd6f 	b.w	31f30 <nrf_free>
   2e452:	bd10      	pop	{r4, pc}

0002e454 <rpc_gnss_event_handler>:
   2e454:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e456:	4b64      	ldr	r3, [pc, #400]	; (2e5e8 <rpc_gnss_event_handler+0x194>)
   2e458:	4606      	mov	r6, r0
   2e45a:	6800      	ldr	r0, [r0, #0]
   2e45c:	881b      	ldrh	r3, [r3, #0]
   2e45e:	6802      	ldr	r2, [r0, #0]
   2e460:	b085      	sub	sp, #20
   2e462:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   2e466:	460d      	mov	r5, r1
   2e468:	d037      	beq.n	2e4da <rpc_gnss_event_handler+0x86>
   2e46a:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   2e46e:	33ff      	adds	r3, #255	; 0xff
   2e470:	b29b      	uxth	r3, r3
   2e472:	2b02      	cmp	r3, #2
   2e474:	d811      	bhi.n	2e49a <rpc_gnss_event_handler+0x46>
   2e476:	4c5d      	ldr	r4, [pc, #372]	; (2e5ec <rpc_gnss_event_handler+0x198>)
   2e478:	6823      	ldr	r3, [r4, #0]
   2e47a:	075a      	lsls	r2, r3, #29
   2e47c:	d410      	bmi.n	2e4a0 <rpc_gnss_event_handler+0x4c>
   2e47e:	6823      	ldr	r3, [r4, #0]
   2e480:	079b      	lsls	r3, r3, #30
   2e482:	d503      	bpl.n	2e48c <rpc_gnss_event_handler+0x38>
   2e484:	f244 0303 	movw	r3, #16387	; 0x4003
   2e488:	429d      	cmp	r5, r3
   2e48a:	d009      	beq.n	2e4a0 <rpc_gnss_event_handler+0x4c>
   2e48c:	6830      	ldr	r0, [r6, #0]
   2e48e:	b120      	cbz	r0, 2e49a <rpc_gnss_event_handler+0x46>
   2e490:	f002 ff60 	bl	31354 <rpc_gnss_client_data_free>
   2e494:	2200      	movs	r2, #0
   2e496:	4b56      	ldr	r3, [pc, #344]	; (2e5f0 <rpc_gnss_event_handler+0x19c>)
   2e498:	601a      	str	r2, [r3, #0]
   2e49a:	2000      	movs	r0, #0
   2e49c:	b005      	add	sp, #20
   2e49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e4a0:	2002      	movs	r0, #2
   2e4a2:	f003 fd3b 	bl	31f1c <nrf_malloc>
   2e4a6:	4607      	mov	r7, r0
   2e4a8:	2800      	cmp	r0, #0
   2e4aa:	f000 8094 	beq.w	2e5d6 <rpc_gnss_event_handler+0x182>
   2e4ae:	2302      	movs	r3, #2
   2e4b0:	8005      	strh	r5, [r0, #0]
   2e4b2:	6831      	ldr	r1, [r6, #0]
   2e4b4:	6872      	ldr	r2, [r6, #4]
   2e4b6:	484f      	ldr	r0, [pc, #316]	; (2e5f4 <rpc_gnss_event_handler+0x1a0>)
   2e4b8:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   2e4bc:	6800      	ldr	r0, [r0, #0]
   2e4be:	9303      	str	r3, [sp, #12]
   2e4c0:	6803      	ldr	r3, [r0, #0]
   2e4c2:	4669      	mov	r1, sp
   2e4c4:	685b      	ldr	r3, [r3, #4]
   2e4c6:	4798      	blx	r3
   2e4c8:	3001      	adds	r0, #1
   2e4ca:	d071      	beq.n	2e5b0 <rpc_gnss_event_handler+0x15c>
   2e4cc:	2000      	movs	r0, #0
   2e4ce:	6823      	ldr	r3, [r4, #0]
   2e4d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2e4d4:	6023      	str	r3, [r4, #0]
   2e4d6:	b005      	add	sp, #20
   2e4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e4da:	4c44      	ldr	r4, [pc, #272]	; (2e5ec <rpc_gnss_event_handler+0x198>)
   2e4dc:	4f44      	ldr	r7, [pc, #272]	; (2e5f0 <rpc_gnss_event_handler+0x19c>)
   2e4de:	6823      	ldr	r3, [r4, #0]
   2e4e0:	6038      	str	r0, [r7, #0]
   2e4e2:	01d9      	lsls	r1, r3, #7
   2e4e4:	d523      	bpl.n	2e52e <rpc_gnss_event_handler+0xda>
   2e4e6:	f242 1302 	movw	r3, #8450	; 0x2102
   2e4ea:	429d      	cmp	r5, r3
   2e4ec:	d11f      	bne.n	2e52e <rpc_gnss_event_handler+0xda>
   2e4ee:	6843      	ldr	r3, [r0, #4]
   2e4f0:	b91b      	cbnz	r3, 2e4fa <rpc_gnss_event_handler+0xa6>
   2e4f2:	6823      	ldr	r3, [r4, #0]
   2e4f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   2e4f8:	6023      	str	r3, [r4, #0]
   2e4fa:	6823      	ldr	r3, [r4, #0]
   2e4fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2e500:	6023      	str	r3, [r4, #0]
   2e502:	6823      	ldr	r3, [r4, #0]
   2e504:	025a      	lsls	r2, r3, #9
   2e506:	d430      	bmi.n	2e56a <rpc_gnss_event_handler+0x116>
   2e508:	f242 0305 	movw	r3, #8197	; 0x2005
   2e50c:	429d      	cmp	r5, r3
   2e50e:	d12c      	bne.n	2e56a <rpc_gnss_event_handler+0x116>
   2e510:	6823      	ldr	r3, [r4, #0]
   2e512:	0299      	lsls	r1, r3, #10
   2e514:	d529      	bpl.n	2e56a <rpc_gnss_event_handler+0x116>
   2e516:	6843      	ldr	r3, [r0, #4]
   2e518:	2b00      	cmp	r3, #0
   2e51a:	d157      	bne.n	2e5cc <rpc_gnss_event_handler+0x178>
   2e51c:	6823      	ldr	r3, [r4, #0]
   2e51e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2e522:	6023      	str	r3, [r4, #0]
   2e524:	6823      	ldr	r3, [r4, #0]
   2e526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e52a:	6023      	str	r3, [r4, #0]
   2e52c:	e01d      	b.n	2e56a <rpc_gnss_event_handler+0x116>
   2e52e:	6823      	ldr	r3, [r4, #0]
   2e530:	025b      	lsls	r3, r3, #9
   2e532:	d50e      	bpl.n	2e552 <rpc_gnss_event_handler+0xfe>
   2e534:	f242 1303 	movw	r3, #8451	; 0x2103
   2e538:	429d      	cmp	r5, r3
   2e53a:	d10a      	bne.n	2e552 <rpc_gnss_event_handler+0xfe>
   2e53c:	6843      	ldr	r3, [r0, #4]
   2e53e:	b91b      	cbnz	r3, 2e548 <rpc_gnss_event_handler+0xf4>
   2e540:	6823      	ldr	r3, [r4, #0]
   2e542:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2e546:	6023      	str	r3, [r4, #0]
   2e548:	6823      	ldr	r3, [r4, #0]
   2e54a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2e54e:	6023      	str	r3, [r4, #0]
   2e550:	e00b      	b.n	2e56a <rpc_gnss_event_handler+0x116>
   2e552:	f242 0301 	movw	r3, #8193	; 0x2001
   2e556:	429d      	cmp	r5, r3
   2e558:	d10c      	bne.n	2e574 <rpc_gnss_event_handler+0x120>
   2e55a:	6843      	ldr	r3, [r0, #4]
   2e55c:	b92b      	cbnz	r3, 2e56a <rpc_gnss_event_handler+0x116>
   2e55e:	6823      	ldr	r3, [r4, #0]
   2e560:	0c1b      	lsrs	r3, r3, #16
   2e562:	041b      	lsls	r3, r3, #16
   2e564:	f043 0302 	orr.w	r3, r3, #2
   2e568:	6023      	str	r3, [r4, #0]
   2e56a:	f002 fef3 	bl	31354 <rpc_gnss_client_data_free>
   2e56e:	2300      	movs	r3, #0
   2e570:	603b      	str	r3, [r7, #0]
   2e572:	e77a      	b.n	2e46a <rpc_gnss_event_handler+0x16>
   2e574:	f242 0304 	movw	r3, #8196	; 0x2004
   2e578:	429d      	cmp	r5, r3
   2e57a:	d1c5      	bne.n	2e508 <rpc_gnss_event_handler+0xb4>
   2e57c:	6843      	ldr	r3, [r0, #4]
   2e57e:	b993      	cbnz	r3, 2e5a6 <rpc_gnss_event_handler+0x152>
   2e580:	6823      	ldr	r3, [r4, #0]
   2e582:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2e586:	6023      	str	r3, [r4, #0]
   2e588:	6823      	ldr	r3, [r4, #0]
   2e58a:	b29b      	uxth	r3, r3
   2e58c:	2b03      	cmp	r3, #3
   2e58e:	6823      	ldr	r3, [r4, #0]
   2e590:	d016      	beq.n	2e5c0 <rpc_gnss_event_handler+0x16c>
   2e592:	b29b      	uxth	r3, r3
   2e594:	2b04      	cmp	r3, #4
   2e596:	d1d7      	bne.n	2e548 <rpc_gnss_event_handler+0xf4>
   2e598:	6823      	ldr	r3, [r4, #0]
   2e59a:	0c1b      	lsrs	r3, r3, #16
   2e59c:	041b      	lsls	r3, r3, #16
   2e59e:	f043 0302 	orr.w	r3, r3, #2
   2e5a2:	6023      	str	r3, [r4, #0]
   2e5a4:	e7d0      	b.n	2e548 <rpc_gnss_event_handler+0xf4>
   2e5a6:	6823      	ldr	r3, [r4, #0]
   2e5a8:	b29b      	uxth	r3, r3
   2e5aa:	2b03      	cmp	r3, #3
   2e5ac:	d1cc      	bne.n	2e548 <rpc_gnss_event_handler+0xf4>
   2e5ae:	e7f3      	b.n	2e598 <rpc_gnss_event_handler+0x144>
   2e5b0:	4638      	mov	r0, r7
   2e5b2:	f003 fcbd 	bl	31f30 <nrf_free>
   2e5b6:	6830      	ldr	r0, [r6, #0]
   2e5b8:	2800      	cmp	r0, #0
   2e5ba:	f47f af69 	bne.w	2e490 <rpc_gnss_event_handler+0x3c>
   2e5be:	e76c      	b.n	2e49a <rpc_gnss_event_handler+0x46>
   2e5c0:	0c1b      	lsrs	r3, r3, #16
   2e5c2:	041b      	lsls	r3, r3, #16
   2e5c4:	f043 0304 	orr.w	r3, r3, #4
   2e5c8:	6023      	str	r3, [r4, #0]
   2e5ca:	e7bd      	b.n	2e548 <rpc_gnss_event_handler+0xf4>
   2e5cc:	6823      	ldr	r3, [r4, #0]
   2e5ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2e5d2:	6023      	str	r3, [r4, #0]
   2e5d4:	e7c9      	b.n	2e56a <rpc_gnss_event_handler+0x116>
   2e5d6:	6830      	ldr	r0, [r6, #0]
   2e5d8:	2800      	cmp	r0, #0
   2e5da:	f43f af5e 	beq.w	2e49a <rpc_gnss_event_handler+0x46>
   2e5de:	f002 feb9 	bl	31354 <rpc_gnss_client_data_free>
   2e5e2:	4b03      	ldr	r3, [pc, #12]	; (2e5f0 <rpc_gnss_event_handler+0x19c>)
   2e5e4:	601f      	str	r7, [r3, #0]
   2e5e6:	e758      	b.n	2e49a <rpc_gnss_event_handler+0x46>
   2e5e8:	200287ac 	.word	0x200287ac
   2e5ec:	20023be4 	.word	0x20023be4
   2e5f0:	20023be8 	.word	0x20023be8
   2e5f4:	20023bec 	.word	0x20023bec

0002e5f8 <gnss_interface_write>:
   2e5f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e5fc:	4a74      	ldr	r2, [pc, #464]	; (2e7d0 <gnss_interface_write+0x1d8>)
   2e5fe:	b09f      	sub	sp, #124	; 0x7c
   2e600:	4290      	cmp	r0, r2
   2e602:	9d26      	ldr	r5, [sp, #152]	; 0x98
   2e604:	f040 80d7 	bne.w	2e7b6 <gnss_interface_write+0x1be>
   2e608:	2900      	cmp	r1, #0
   2e60a:	f000 80c6 	beq.w	2e79a <gnss_interface_write+0x1a2>
   2e60e:	2d00      	cmp	r5, #0
   2e610:	f000 80c3 	beq.w	2e79a <gnss_interface_write+0x1a2>
   2e614:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2e616:	2a02      	cmp	r2, #2
   2e618:	f040 80bf 	bne.w	2e79a <gnss_interface_write+0x1a2>
   2e61c:	4c6d      	ldr	r4, [pc, #436]	; (2e7d4 <gnss_interface_write+0x1dc>)
   2e61e:	6822      	ldr	r2, [r4, #0]
   2e620:	b292      	uxth	r2, r2
   2e622:	2a02      	cmp	r2, #2
   2e624:	d004      	beq.n	2e630 <gnss_interface_write+0x38>
   2e626:	6822      	ldr	r2, [r4, #0]
   2e628:	b292      	uxth	r2, r2
   2e62a:	2a04      	cmp	r2, #4
   2e62c:	f040 80bd 	bne.w	2e7aa <gnss_interface_write+0x1b2>
   2e630:	2b00      	cmp	r3, #0
   2e632:	f040 80c6 	bne.w	2e7c2 <gnss_interface_write+0x1ca>
   2e636:	6822      	ldr	r2, [r4, #0]
   2e638:	0390      	lsls	r0, r2, #14
   2e63a:	d512      	bpl.n	2e662 <gnss_interface_write+0x6a>
   2e63c:	6822      	ldr	r2, [r4, #0]
   2e63e:	882b      	ldrh	r3, [r5, #0]
   2e640:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   2e644:	6022      	str	r2, [r4, #0]
   2e646:	6822      	ldr	r2, [r4, #0]
   2e648:	3b01      	subs	r3, #1
   2e64a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   2e64e:	6022      	str	r2, [r4, #0]
   2e650:	2b07      	cmp	r3, #7
   2e652:	f200 80a2 	bhi.w	2e79a <gnss_interface_write+0x1a2>
   2e656:	e8df f003 	tbb	[pc, r3]
   2e65a:	7d82      	.short	0x7d82
   2e65c:	646e7378 	.word	0x646e7378
   2e660:	0869      	.short	0x0869
   2e662:	2000      	movs	r0, #0
   2e664:	b01f      	add	sp, #124	; 0x7c
   2e666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e66a:	4608      	mov	r0, r1
   2e66c:	a902      	add	r1, sp, #8
   2e66e:	f002 fe25 	bl	312bc <rpc_gnss_serialize_integrity>
   2e672:	2172      	movs	r1, #114	; 0x72
   2e674:	4668      	mov	r0, sp
   2e676:	f002 fe3b 	bl	312f0 <rpc_gnss_client_request_alloc>
   2e67a:	4605      	mov	r5, r0
   2e67c:	9800      	ldr	r0, [sp, #0]
   2e67e:	2d00      	cmp	r5, #0
   2e680:	d172      	bne.n	2e768 <gnss_interface_write+0x170>
   2e682:	2800      	cmp	r0, #0
   2e684:	d077      	beq.n	2e776 <gnss_interface_write+0x17e>
   2e686:	f241 0605 	movw	r6, #4101	; 0x1005
   2e68a:	f04f 0c49 	mov.w	ip, #73	; 0x49
   2e68e:	2272      	movs	r2, #114	; 0x72
   2e690:	f04f 0e76 	mov.w	lr, #118	; 0x76
   2e694:	f04f 0943 	mov.w	r9, #67	; 0x43
   2e698:	f04f 0854 	mov.w	r8, #84	; 0x54
   2e69c:	4f4e      	ldr	r7, [pc, #312]	; (2e7d8 <gnss_interface_write+0x1e0>)
   2e69e:	a91e      	add	r1, sp, #120	; 0x78
   2e6a0:	883b      	ldrh	r3, [r7, #0]
   2e6a2:	f880 c00f 	strb.w	ip, [r0, #15]
   2e6a6:	3301      	adds	r3, #1
   2e6a8:	b29b      	uxth	r3, r3
   2e6aa:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   2e6ae:	f841 cd74 	str.w	ip, [r1, #-116]!
   2e6b2:	7145      	strb	r5, [r0, #5]
   2e6b4:	7185      	strb	r5, [r0, #6]
   2e6b6:	71c5      	strb	r5, [r0, #7]
   2e6b8:	7205      	strb	r5, [r0, #8]
   2e6ba:	7245      	strb	r5, [r0, #9]
   2e6bc:	7285      	strb	r5, [r0, #10]
   2e6be:	72c5      	strb	r5, [r0, #11]
   2e6c0:	7102      	strb	r2, [r0, #4]
   2e6c2:	f880 900c 	strb.w	r9, [r0, #12]
   2e6c6:	f880 800d 	strb.w	r8, [r0, #13]
   2e6ca:	f880 e00e 	strb.w	lr, [r0, #14]
   2e6ce:	6800      	ldr	r0, [r0, #0]
   2e6d0:	803b      	strh	r3, [r7, #0]
   2e6d2:	f00a fa34 	bl	38b3e <memcpy>
   2e6d6:	4b41      	ldr	r3, [pc, #260]	; (2e7dc <gnss_interface_write+0x1e4>)
   2e6d8:	4631      	mov	r1, r6
   2e6da:	9800      	ldr	r0, [sp, #0]
   2e6dc:	601d      	str	r5, [r3, #0]
   2e6de:	f002 fe1b 	bl	31318 <rpc_gnss_client_request_send>
   2e6e2:	2800      	cmp	r0, #0
   2e6e4:	d14e      	bne.n	2e784 <gnss_interface_write+0x18c>
   2e6e6:	6823      	ldr	r3, [r4, #0]
   2e6e8:	0299      	lsls	r1, r3, #10
   2e6ea:	d50b      	bpl.n	2e704 <gnss_interface_write+0x10c>
   2e6ec:	4e3c      	ldr	r6, [pc, #240]	; (2e7e0 <gnss_interface_write+0x1e8>)
   2e6ee:	4d38      	ldr	r5, [pc, #224]	; (2e7d0 <gnss_interface_write+0x1d8>)
   2e6f0:	e000      	b.n	2e6f4 <gnss_interface_write+0xfc>
   2e6f2:	b978      	cbnz	r0, 2e714 <gnss_interface_write+0x11c>
   2e6f4:	4631      	mov	r1, r6
   2e6f6:	4628      	mov	r0, r5
   2e6f8:	f7f8 fe88 	bl	2740c <bsd_os_timedwait>
   2e6fc:	6823      	ldr	r3, [r4, #0]
   2e6fe:	029a      	lsls	r2, r3, #10
   2e700:	d4f7      	bmi.n	2e6f2 <gnss_interface_write+0xfa>
   2e702:	b938      	cbnz	r0, 2e714 <gnss_interface_write+0x11c>
   2e704:	6823      	ldr	r3, [r4, #0]
   2e706:	039b      	lsls	r3, r3, #14
   2e708:	d4ab      	bmi.n	2e662 <gnss_interface_write+0x6a>
   2e70a:	2005      	movs	r0, #5
   2e70c:	6823      	ldr	r3, [r4, #0]
   2e70e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e712:	6023      	str	r3, [r4, #0]
   2e714:	f7f8 ff32 	bl	2757c <bsd_os_errno_set>
   2e718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e71c:	b01f      	add	sp, #124	; 0x7c
   2e71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e722:	4608      	mov	r0, r1
   2e724:	a902      	add	r1, sp, #8
   2e726:	f002 fd81 	bl	3122c <rpc_gnss_serialize_time_and_sv_tow>
   2e72a:	e7a2      	b.n	2e672 <gnss_interface_write+0x7a>
   2e72c:	4608      	mov	r0, r1
   2e72e:	a902      	add	r1, sp, #8
   2e730:	f002 fda4 	bl	3127c <rpc_gnss_serialize_location>
   2e734:	e79d      	b.n	2e672 <gnss_interface_write+0x7a>
   2e736:	4608      	mov	r0, r1
   2e738:	a902      	add	r1, sp, #8
   2e73a:	f002 fd5d 	bl	311f8 <rpc_gnss_serialize_nequick>
   2e73e:	e798      	b.n	2e672 <gnss_interface_write+0x7a>
   2e740:	4608      	mov	r0, r1
   2e742:	a902      	add	r1, sp, #8
   2e744:	f002 fd34 	bl	311b0 <rpc_gnss_serialize_klob>
   2e748:	e793      	b.n	2e672 <gnss_interface_write+0x7a>
   2e74a:	4608      	mov	r0, r1
   2e74c:	a902      	add	r1, sp, #8
   2e74e:	f002 fcfd 	bl	3114c <rpc_gnss_serialize_alm>
   2e752:	e78e      	b.n	2e672 <gnss_interface_write+0x7a>
   2e754:	4608      	mov	r0, r1
   2e756:	a902      	add	r1, sp, #8
   2e758:	f002 fca6 	bl	310a8 <rpc_gnss_serialize_ephe>
   2e75c:	e789      	b.n	2e672 <gnss_interface_write+0x7a>
   2e75e:	4608      	mov	r0, r1
   2e760:	a902      	add	r1, sp, #8
   2e762:	f002 fc7f 	bl	31064 <rpc_gnss_serialize_utc>
   2e766:	e784      	b.n	2e672 <gnss_interface_write+0x7a>
   2e768:	b128      	cbz	r0, 2e776 <gnss_interface_write+0x17e>
   2e76a:	6803      	ldr	r3, [r0, #0]
   2e76c:	b11b      	cbz	r3, 2e776 <gnss_interface_write+0x17e>
   2e76e:	4618      	mov	r0, r3
   2e770:	f002 fdf0 	bl	31354 <rpc_gnss_client_data_free>
   2e774:	9800      	ldr	r0, [sp, #0]
   2e776:	f002 fde5 	bl	31344 <rpc_gnss_client_message_free>
   2e77a:	2023      	movs	r0, #35	; 0x23
   2e77c:	f7f8 fefe 	bl	2757c <bsd_os_errno_set>
   2e780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e784:	6823      	ldr	r3, [r4, #0]
   2e786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2e78a:	6023      	str	r3, [r4, #0]
   2e78c:	6823      	ldr	r3, [r4, #0]
   2e78e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e792:	6023      	str	r3, [r4, #0]
   2e794:	b01f      	add	sp, #124	; 0x7c
   2e796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e79a:	2016      	movs	r0, #22
   2e79c:	f7f8 feee 	bl	2757c <bsd_os_errno_set>
   2e7a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e7a4:	b01f      	add	sp, #124	; 0x7c
   2e7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e7aa:	2039      	movs	r0, #57	; 0x39
   2e7ac:	f7f8 fee6 	bl	2757c <bsd_os_errno_set>
   2e7b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e7b4:	e756      	b.n	2e664 <gnss_interface_write+0x6c>
   2e7b6:	2009      	movs	r0, #9
   2e7b8:	f7f8 fee0 	bl	2757c <bsd_os_errno_set>
   2e7bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e7c0:	e750      	b.n	2e664 <gnss_interface_write+0x6c>
   2e7c2:	202d      	movs	r0, #45	; 0x2d
   2e7c4:	f7f8 feda 	bl	2757c <bsd_os_errno_set>
   2e7c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e7cc:	e74a      	b.n	2e664 <gnss_interface_write+0x6c>
   2e7ce:	bf00      	nop
   2e7d0:	49765443 	.word	0x49765443
   2e7d4:	20023be4 	.word	0x20023be4
   2e7d8:	200287ac 	.word	0x200287ac
   2e7dc:	20023be8 	.word	0x20023be8
   2e7e0:	20020454 	.word	0x20020454

0002e7e4 <gnss_interface_read>:
   2e7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e7e8:	4c55      	ldr	r4, [pc, #340]	; (2e940 <gnss_interface_read+0x15c>)
   2e7ea:	b0b7      	sub	sp, #220	; 0xdc
   2e7ec:	42a0      	cmp	r0, r4
   2e7ee:	f040 81fa 	bne.w	2ebe6 <gnss_interface_read+0x402>
   2e7f2:	460e      	mov	r6, r1
   2e7f4:	2900      	cmp	r1, #0
   2e7f6:	f000 81f0 	beq.w	2ebda <gnss_interface_read+0x3f6>
   2e7fa:	2ad7      	cmp	r2, #215	; 0xd7
   2e7fc:	f240 81ed 	bls.w	2ebda <gnss_interface_read+0x3f6>
   2e800:	4d50      	ldr	r5, [pc, #320]	; (2e944 <gnss_interface_read+0x160>)
   2e802:	469a      	mov	sl, r3
   2e804:	682b      	ldr	r3, [r5, #0]
   2e806:	b29b      	uxth	r3, r3
   2e808:	2b04      	cmp	r3, #4
   2e80a:	d004      	beq.n	2e816 <gnss_interface_read+0x32>
   2e80c:	682b      	ldr	r3, [r5, #0]
   2e80e:	b29b      	uxth	r3, r3
   2e810:	2b02      	cmp	r3, #2
   2e812:	f040 81dc 	bne.w	2ebce <gnss_interface_read+0x3ea>
   2e816:	f1ba 0f00 	cmp.w	sl, #0
   2e81a:	d178      	bne.n	2e90e <gnss_interface_read+0x12a>
   2e81c:	2102      	movs	r1, #2
   2e81e:	20b6      	movs	r0, #182	; 0xb6
   2e820:	2400      	movs	r4, #0
   2e822:	682b      	ldr	r3, [r5, #0]
   2e824:	f10d 020e 	add.w	r2, sp, #14
   2e828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2e82c:	602b      	str	r3, [r5, #0]
   2e82e:	ab08      	add	r3, sp, #32
   2e830:	9304      	str	r3, [sp, #16]
   2e832:	f8df b118 	ldr.w	fp, [pc, #280]	; 2e94c <gnss_interface_read+0x168>
   2e836:	ea0a 0301 	and.w	r3, sl, r1
   2e83a:	4f43      	ldr	r7, [pc, #268]	; (2e948 <gnss_interface_read+0x164>)
   2e83c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 2e950 <gnss_interface_read+0x16c>
   2e840:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 2e940 <gnss_interface_read+0x15c>
   2e844:	9005      	str	r0, [sp, #20]
   2e846:	9107      	str	r1, [sp, #28]
   2e848:	9206      	str	r2, [sp, #24]
   2e84a:	9301      	str	r3, [sp, #4]
   2e84c:	f8db 0000 	ldr.w	r0, [fp]
   2e850:	4652      	mov	r2, sl
   2e852:	6803      	ldr	r3, [r0, #0]
   2e854:	a904      	add	r1, sp, #16
   2e856:	689b      	ldr	r3, [r3, #8]
   2e858:	4798      	blx	r3
   2e85a:	2800      	cmp	r0, #0
   2e85c:	da2a      	bge.n	2e8b4 <gnss_interface_read+0xd0>
   2e85e:	9b01      	ldr	r3, [sp, #4]
   2e860:	b15b      	cbz	r3, 2e87a <gnss_interface_read+0x96>
   2e862:	1c42      	adds	r2, r0, #1
   2e864:	4603      	mov	r3, r0
   2e866:	d125      	bne.n	2e8b4 <gnss_interface_read+0xd0>
   2e868:	b9dc      	cbnz	r4, 2e8a2 <gnss_interface_read+0xbe>
   2e86a:	2023      	movs	r0, #35	; 0x23
   2e86c:	461c      	mov	r4, r3
   2e86e:	f7f8 fe85 	bl	2757c <bsd_os_errno_set>
   2e872:	4620      	mov	r0, r4
   2e874:	b037      	add	sp, #220	; 0xdc
   2e876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e87a:	682a      	ldr	r2, [r5, #0]
   2e87c:	783b      	ldrb	r3, [r7, #0]
   2e87e:	03d1      	lsls	r1, r2, #15
   2e880:	d40c      	bmi.n	2e89c <gnss_interface_read+0xb8>
   2e882:	b95c      	cbnz	r4, 2e89c <gnss_interface_read+0xb8>
   2e884:	b163      	cbz	r3, 2e8a0 <gnss_interface_read+0xbc>
   2e886:	4649      	mov	r1, r9
   2e888:	4640      	mov	r0, r8
   2e88a:	f7f8 fdbf 	bl	2740c <bsd_os_timedwait>
   2e88e:	682b      	ldr	r3, [r5, #0]
   2e890:	03db      	lsls	r3, r3, #15
   2e892:	d437      	bmi.n	2e904 <gnss_interface_read+0x120>
   2e894:	783b      	ldrb	r3, [r7, #0]
   2e896:	2800      	cmp	r0, #0
   2e898:	d0f4      	beq.n	2e884 <gnss_interface_read+0xa0>
   2e89a:	4604      	mov	r4, r0
   2e89c:	2b00      	cmp	r3, #0
   2e89e:	d1d5      	bne.n	2e84c <gnss_interface_read+0x68>
   2e8a0:	2470      	movs	r4, #112	; 0x70
   2e8a2:	4620      	mov	r0, r4
   2e8a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2e8a8:	f7f8 fe68 	bl	2757c <bsd_os_errno_set>
   2e8ac:	4620      	mov	r0, r4
   2e8ae:	b037      	add	sp, #220	; 0xdc
   2e8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e8b4:	f244 0202 	movw	r2, #16386	; 0x4002
   2e8b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2e8bc:	4293      	cmp	r3, r2
   2e8be:	d02f      	beq.n	2e920 <gnss_interface_read+0x13c>
   2e8c0:	f244 0201 	movw	r2, #16385	; 0x4001
   2e8c4:	4293      	cmp	r3, r2
   2e8c6:	d045      	beq.n	2e954 <gnss_interface_read+0x170>
   2e8c8:	f244 0203 	movw	r2, #16387	; 0x4003
   2e8cc:	4293      	cmp	r3, r2
   2e8ce:	f040 8184 	bne.w	2ebda <gnss_interface_read+0x3f6>
   2e8d2:	2203      	movs	r2, #3
   2e8d4:	2414      	movs	r4, #20
   2e8d6:	9b08      	ldr	r3, [sp, #32]
   2e8d8:	7032      	strb	r2, [r6, #0]
   2e8da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2e8dc:	60b3      	str	r3, [r6, #8]
   2e8de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2e8e2:	e9c6 2303 	strd	r2, r3, [r6, #12]
   2e8e6:	f8db 0000 	ldr.w	r0, [fp]
   2e8ea:	6803      	ldr	r3, [r0, #0]
   2e8ec:	68db      	ldr	r3, [r3, #12]
   2e8ee:	4798      	blx	r3
   2e8f0:	2800      	cmp	r0, #0
   2e8f2:	ddbe      	ble.n	2e872 <gnss_interface_read+0x8e>
   2e8f4:	4620      	mov	r0, r4
   2e8f6:	682b      	ldr	r3, [r5, #0]
   2e8f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2e8fc:	602b      	str	r3, [r5, #0]
   2e8fe:	b037      	add	sp, #220	; 0xdc
   2e900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e904:	783b      	ldrb	r3, [r7, #0]
   2e906:	4604      	mov	r4, r0
   2e908:	2b00      	cmp	r3, #0
   2e90a:	d19f      	bne.n	2e84c <gnss_interface_read+0x68>
   2e90c:	e7c8      	b.n	2e8a0 <gnss_interface_read+0xbc>
   2e90e:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   2e912:	d183      	bne.n	2e81c <gnss_interface_read+0x38>
   2e914:	202d      	movs	r0, #45	; 0x2d
   2e916:	f7f8 fe31 	bl	2757c <bsd_os_errno_set>
   2e91a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2e91e:	e7a8      	b.n	2e872 <gnss_interface_read+0x8e>
   2e920:	a808      	add	r0, sp, #32
   2e922:	f7ee fba5 	bl	1d070 <strlen>
   2e926:	2302      	movs	r3, #2
   2e928:	1c44      	adds	r4, r0, #1
   2e92a:	b2a4      	uxth	r4, r4
   2e92c:	f806 3b08 	strb.w	r3, [r6], #8
   2e930:	4622      	mov	r2, r4
   2e932:	a908      	add	r1, sp, #32
   2e934:	4630      	mov	r0, r6
   2e936:	f00a f902 	bl	38b3e <memcpy>
   2e93a:	3408      	adds	r4, #8
   2e93c:	e7d3      	b.n	2e8e6 <gnss_interface_read+0x102>
   2e93e:	bf00      	nop
   2e940:	49765443 	.word	0x49765443
   2e944:	20023be4 	.word	0x20023be4
   2e948:	2002c6e2 	.word	0x2002c6e2
   2e94c:	20023bec 	.word	0x20023bec
   2e950:	20020454 	.word	0x20020454
   2e954:	2401      	movs	r4, #1
   2e956:	a809      	add	r0, sp, #36	; 0x24
   2e958:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   2e95a:	e9c6 0102 	strd	r0, r1, [r6, #8]
   2e95e:	e9c6 2304 	strd	r2, r3, [r6, #16]
   2e962:	990d      	ldr	r1, [sp, #52]	; 0x34
   2e964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2e966:	7034      	strb	r4, [r6, #0]
   2e968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2e96a:	61b1      	str	r1, [r6, #24]
   2e96c:	9910      	ldr	r1, [sp, #64]	; 0x40
   2e96e:	61f2      	str	r2, [r6, #28]
   2e970:	6233      	str	r3, [r6, #32]
   2e972:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   2e976:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   2e97a:	6271      	str	r1, [r6, #36]	; 0x24
   2e97c:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   2e980:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   2e984:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   2e988:	6373      	str	r3, [r6, #52]	; 0x34
   2e98a:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   2e98e:	63b1      	str	r1, [r6, #56]	; 0x38
   2e990:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2e994:	63f2      	str	r2, [r6, #60]	; 0x3c
   2e996:	6433      	str	r3, [r6, #64]	; 0x40
   2e998:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   2e99c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   2e9a0:	8531      	strh	r1, [r6, #40]	; 0x28
   2e9a2:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   2e9a6:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   2e9aa:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   2e9ae:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   2e9b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2e9b4:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   2e9b8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   2e9bc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   2e9c0:	f3c3 210f 	ubfx	r1, r3, #8, #16
   2e9c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2e9c6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   2e9ca:	8630      	strh	r0, [r6, #48]	; 0x30
   2e9cc:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   2e9d0:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   2e9d4:	f3c3 230f 	ubfx	r3, r3, #8, #16
   2e9d8:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   2e9dc:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   2e9e0:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   2e9e4:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   2e9e8:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   2e9ec:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   2e9f0:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   2e9f4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   2e9f8:	64f3      	str	r3, [r6, #76]	; 0x4c
   2e9fa:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   2e9fe:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   2ea02:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   2ea06:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   2ea0a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   2ea0e:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   2ea12:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   2ea16:	65b1      	str	r1, [r6, #88]	; 0x58
   2ea18:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   2ea1c:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   2ea20:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   2ea24:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   2ea28:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   2ea2c:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   2ea30:	6672      	str	r2, [r6, #100]	; 0x64
   2ea32:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   2ea36:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   2ea3a:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   2ea3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2ea40:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   2ea44:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2ea48:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   2ea4c:	f3c2 220f 	ubfx	r2, r2, #8, #16
   2ea50:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   2ea54:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   2ea58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   2ea5c:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   2ea60:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   2ea64:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   2ea68:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   2ea6c:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   2ea70:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   2ea74:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   2ea78:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   2ea7c:	6733      	str	r3, [r6, #112]	; 0x70
   2ea7e:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   2ea82:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   2ea86:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   2ea8a:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   2ea8e:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   2ea92:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   2ea96:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   2ea9a:	67f1      	str	r1, [r6, #124]	; 0x7c
   2ea9c:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   2eaa0:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   2eaa4:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   2eaa8:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   2eaac:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   2eab0:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   2eab4:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   2eab8:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   2eabc:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   2eac0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2eac2:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   2eac6:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   2eaca:	f3c3 210f 	ubfx	r1, r3, #8, #16
   2eace:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   2ead0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   2ead4:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   2ead8:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   2eadc:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   2eae0:	f3c3 230f 	ubfx	r3, r3, #8, #16
   2eae4:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   2eae8:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   2eaec:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   2eaf0:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   2eaf4:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   2eaf8:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   2eafc:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   2eb00:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   2eb04:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   2eb08:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   2eb0c:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   2eb10:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   2eb14:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   2eb18:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   2eb1c:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   2eb20:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   2eb24:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   2eb28:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   2eb2c:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   2eb30:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   2eb34:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   2eb38:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   2eb3c:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   2eb40:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   2eb44:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   2eb48:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   2eb4c:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   2eb50:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   2eb54:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   2eb56:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2eb5a:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   2eb5e:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   2eb62:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   2eb66:	f3c2 220f 	ubfx	r2, r2, #8, #16
   2eb6a:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   2eb6e:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   2eb72:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   2eb76:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   2eb7a:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   2eb7e:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   2eb82:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   2eb86:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   2eb8a:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   2eb8e:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   2eb92:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   2eb96:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   2eb9a:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   2eb9e:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   2eba2:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   2eba6:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   2ebaa:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   2ebae:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   2ebb2:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   2ebb6:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   2ebba:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   2ebbe:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   2ebc2:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   2ebc6:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   2ebca:	24d8      	movs	r4, #216	; 0xd8
   2ebcc:	e68b      	b.n	2e8e6 <gnss_interface_read+0x102>
   2ebce:	2039      	movs	r0, #57	; 0x39
   2ebd0:	f7f8 fcd4 	bl	2757c <bsd_os_errno_set>
   2ebd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2ebd8:	e64b      	b.n	2e872 <gnss_interface_read+0x8e>
   2ebda:	2016      	movs	r0, #22
   2ebdc:	f7f8 fcce 	bl	2757c <bsd_os_errno_set>
   2ebe0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2ebe4:	e645      	b.n	2e872 <gnss_interface_read+0x8e>
   2ebe6:	2009      	movs	r0, #9
   2ebe8:	f7f8 fcc8 	bl	2757c <bsd_os_errno_set>
   2ebec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2ebf0:	e63f      	b.n	2e872 <gnss_interface_read+0x8e>
   2ebf2:	bf00      	nop

0002ebf4 <gnss_interface_setopt>:
   2ebf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ebf8:	4db9      	ldr	r5, [pc, #740]	; (2eee0 <gnss_interface_setopt+0x2ec>)
   2ebfa:	b087      	sub	sp, #28
   2ebfc:	682c      	ldr	r4, [r5, #0]
   2ebfe:	4690      	mov	r8, r2
   2ec00:	b2a4      	uxth	r4, r4
   2ec02:	2c02      	cmp	r4, #2
   2ec04:	d00c      	beq.n	2ec20 <gnss_interface_setopt+0x2c>
   2ec06:	2a08      	cmp	r2, #8
   2ec08:	d00a      	beq.n	2ec20 <gnss_interface_setopt+0x2c>
   2ec0a:	3a0a      	subs	r2, #10
   2ec0c:	2a01      	cmp	r2, #1
   2ec0e:	d907      	bls.n	2ec20 <gnss_interface_setopt+0x2c>
   2ec10:	200e      	movs	r0, #14
   2ec12:	f7f8 fcb3 	bl	2757c <bsd_os_errno_set>
   2ec16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ec1a:	b007      	add	sp, #28
   2ec1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec20:	682a      	ldr	r2, [r5, #0]
   2ec22:	0252      	lsls	r2, r2, #9
   2ec24:	f100 8155 	bmi.w	2eed2 <gnss_interface_setopt+0x2de>
   2ec28:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2ec2c:	f040 8145 	bne.w	2eeba <gnss_interface_setopt+0x2c6>
   2ec30:	4aac      	ldr	r2, [pc, #688]	; (2eee4 <gnss_interface_setopt+0x2f0>)
   2ec32:	4290      	cmp	r0, r2
   2ec34:	f040 8147 	bne.w	2eec6 <gnss_interface_setopt+0x2d2>
   2ec38:	f1a8 020a 	sub.w	r2, r8, #10
   2ec3c:	2a01      	cmp	r2, #1
   2ec3e:	d902      	bls.n	2ec46 <gnss_interface_setopt+0x52>
   2ec40:	2b00      	cmp	r3, #0
   2ec42:	f000 811e 	beq.w	2ee82 <gnss_interface_setopt+0x28e>
   2ec46:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   2ec4a:	2a0a      	cmp	r2, #10
   2ec4c:	f200 8119 	bhi.w	2ee82 <gnss_interface_setopt+0x28e>
   2ec50:	e8df f012 	tbh	[pc, r2, lsl #1]
   2ec54:	00950088 	.word	0x00950088
   2ec58:	00ab00a1 	.word	0x00ab00a1
   2ec5c:	00c200b7 	.word	0x00c200b7
   2ec60:	00e600ce 	.word	0x00e600ce
   2ec64:	010800fc 	.word	0x010800fc
   2ec68:	000b      	.short	0x000b
   2ec6a:	682b      	ldr	r3, [r5, #0]
   2ec6c:	b29b      	uxth	r3, r3
   2ec6e:	2b04      	cmp	r3, #4
   2ec70:	d1ce      	bne.n	2ec10 <gnss_interface_setopt+0x1c>
   2ec72:	2203      	movs	r2, #3
   2ec74:	f241 0604 	movw	r6, #4100	; 0x1004
   2ec78:	2300      	movs	r3, #0
   2ec7a:	4637      	mov	r7, r6
   2ec7c:	f88d 2008 	strb.w	r2, [sp, #8]
   2ec80:	f88d 3009 	strb.w	r3, [sp, #9]
   2ec84:	f88d 300a 	strb.w	r3, [sp, #10]
   2ec88:	f88d 300b 	strb.w	r3, [sp, #11]
   2ec8c:	f88d 300c 	strb.w	r3, [sp, #12]
   2ec90:	682b      	ldr	r3, [r5, #0]
   2ec92:	2112      	movs	r1, #18
   2ec94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2ec98:	4668      	mov	r0, sp
   2ec9a:	602b      	str	r3, [r5, #0]
   2ec9c:	f002 fb28 	bl	312f0 <rpc_gnss_client_request_alloc>
   2eca0:	4604      	mov	r4, r0
   2eca2:	9800      	ldr	r0, [sp, #0]
   2eca4:	2c00      	cmp	r4, #0
   2eca6:	f040 80f2 	bne.w	2ee8e <gnss_interface_setopt+0x29a>
   2ecaa:	2800      	cmp	r0, #0
   2ecac:	f000 80f6 	beq.w	2ee9c <gnss_interface_setopt+0x2a8>
   2ecb0:	2212      	movs	r2, #18
   2ecb2:	f04f 0976 	mov.w	r9, #118	; 0x76
   2ecb6:	f04f 0e49 	mov.w	lr, #73	; 0x49
   2ecba:	f04f 0b43 	mov.w	fp, #67	; 0x43
   2ecbe:	f04f 0a54 	mov.w	sl, #84	; 0x54
   2ecc2:	f8df c22c 	ldr.w	ip, [pc, #556]	; 2eef0 <gnss_interface_setopt+0x2fc>
   2ecc6:	a906      	add	r1, sp, #24
   2ecc8:	f8bc 3000 	ldrh.w	r3, [ip]
   2eccc:	f880 900e 	strb.w	r9, [r0, #14]
   2ecd0:	3301      	adds	r3, #1
   2ecd2:	b29b      	uxth	r3, r3
   2ecd4:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   2ecd8:	f841 6d14 	str.w	r6, [r1, #-20]!
   2ecdc:	7144      	strb	r4, [r0, #5]
   2ecde:	7184      	strb	r4, [r0, #6]
   2ece0:	71c4      	strb	r4, [r0, #7]
   2ece2:	7204      	strb	r4, [r0, #8]
   2ece4:	7244      	strb	r4, [r0, #9]
   2ece6:	7284      	strb	r4, [r0, #10]
   2ece8:	72c4      	strb	r4, [r0, #11]
   2ecea:	7102      	strb	r2, [r0, #4]
   2ecec:	f880 b00c 	strb.w	fp, [r0, #12]
   2ecf0:	f880 a00d 	strb.w	sl, [r0, #13]
   2ecf4:	f880 e00f 	strb.w	lr, [r0, #15]
   2ecf8:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 2eef4 <gnss_interface_setopt+0x300>
   2ecfc:	6800      	ldr	r0, [r0, #0]
   2ecfe:	f8ac 3000 	strh.w	r3, [ip]
   2ed02:	f009 ff1c 	bl	38b3e <memcpy>
   2ed06:	4639      	mov	r1, r7
   2ed08:	9800      	ldr	r0, [sp, #0]
   2ed0a:	f8c9 4000 	str.w	r4, [r9]
   2ed0e:	f002 fb03 	bl	31318 <rpc_gnss_client_request_send>
   2ed12:	2800      	cmp	r0, #0
   2ed14:	f040 80c7 	bne.w	2eea6 <gnss_interface_setopt+0x2b2>
   2ed18:	4f73      	ldr	r7, [pc, #460]	; (2eee8 <gnss_interface_setopt+0x2f4>)
   2ed1a:	4e72      	ldr	r6, [pc, #456]	; (2eee4 <gnss_interface_setopt+0x2f0>)
   2ed1c:	4639      	mov	r1, r7
   2ed1e:	4630      	mov	r0, r6
   2ed20:	f7f8 fb74 	bl	2740c <bsd_os_timedwait>
   2ed24:	682c      	ldr	r4, [r5, #0]
   2ed26:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   2ed2a:	d1f7      	bne.n	2ed1c <gnss_interface_setopt+0x128>
   2ed2c:	f8d9 0000 	ldr.w	r0, [r9]
   2ed30:	b118      	cbz	r0, 2ed3a <gnss_interface_setopt+0x146>
   2ed32:	f002 fb0f 	bl	31354 <rpc_gnss_client_data_free>
   2ed36:	f8c9 4000 	str.w	r4, [r9]
   2ed3a:	682b      	ldr	r3, [r5, #0]
   2ed3c:	021b      	lsls	r3, r3, #8
   2ed3e:	f140 8098 	bpl.w	2ee72 <gnss_interface_setopt+0x27e>
   2ed42:	f1b8 0f08 	cmp.w	r8, #8
   2ed46:	f040 809a 	bne.w	2ee7e <gnss_interface_setopt+0x28a>
   2ed4a:	4b68      	ldr	r3, [pc, #416]	; (2eeec <gnss_interface_setopt+0x2f8>)
   2ed4c:	6818      	ldr	r0, [r3, #0]
   2ed4e:	6803      	ldr	r3, [r0, #0]
   2ed50:	691b      	ldr	r3, [r3, #16]
   2ed52:	4798      	blx	r3
   2ed54:	2000      	movs	r0, #0
   2ed56:	682b      	ldr	r3, [r5, #0]
   2ed58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2ed5c:	602b      	str	r3, [r5, #0]
   2ed5e:	b007      	add	sp, #28
   2ed60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed64:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2ed66:	2a02      	cmp	r2, #2
   2ed68:	f040 808b 	bne.w	2ee82 <gnss_interface_setopt+0x28e>
   2ed6c:	2208      	movs	r2, #8
   2ed6e:	f241 1603 	movw	r6, #4355	; 0x1103
   2ed72:	881b      	ldrh	r3, [r3, #0]
   2ed74:	9202      	str	r2, [sp, #8]
   2ed76:	f8ad 300f 	strh.w	r3, [sp, #15]
   2ed7a:	4637      	mov	r7, r6
   2ed7c:	e788      	b.n	2ec90 <gnss_interface_setopt+0x9c>
   2ed7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2ed80:	2a02      	cmp	r2, #2
   2ed82:	d17e      	bne.n	2ee82 <gnss_interface_setopt+0x28e>
   2ed84:	2210      	movs	r2, #16
   2ed86:	f241 1603 	movw	r6, #4355	; 0x1103
   2ed8a:	881b      	ldrh	r3, [r3, #0]
   2ed8c:	9202      	str	r2, [sp, #8]
   2ed8e:	f8ad 3011 	strh.w	r3, [sp, #17]
   2ed92:	4637      	mov	r7, r6
   2ed94:	e77c      	b.n	2ec90 <gnss_interface_setopt+0x9c>
   2ed96:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2ed98:	2a01      	cmp	r2, #1
   2ed9a:	d172      	bne.n	2ee82 <gnss_interface_setopt+0x28e>
   2ed9c:	781b      	ldrb	r3, [r3, #0]
   2ed9e:	2b01      	cmp	r3, #1
   2eda0:	d16f      	bne.n	2ee82 <gnss_interface_setopt+0x28e>
   2eda2:	f241 1603 	movw	r6, #4355	; 0x1103
   2eda6:	4637      	mov	r7, r6
   2eda8:	e772      	b.n	2ec90 <gnss_interface_setopt+0x9c>
   2edaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2edac:	2a02      	cmp	r2, #2
   2edae:	d168      	bne.n	2ee82 <gnss_interface_setopt+0x28e>
   2edb0:	2220      	movs	r2, #32
   2edb2:	f241 1603 	movw	r6, #4355	; 0x1103
   2edb6:	881b      	ldrh	r3, [r3, #0]
   2edb8:	9202      	str	r2, [sp, #8]
   2edba:	f8ad 3013 	strh.w	r3, [sp, #19]
   2edbe:	4637      	mov	r7, r6
   2edc0:	e766      	b.n	2ec90 <gnss_interface_setopt+0x9c>
   2edc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2edc4:	2a01      	cmp	r2, #1
   2edc6:	d15c      	bne.n	2ee82 <gnss_interface_setopt+0x28e>
   2edc8:	f241 1603 	movw	r6, #4355	; 0x1103
   2edcc:	781b      	ldrb	r3, [r3, #0]
   2edce:	9202      	str	r2, [sp, #8]
   2edd0:	f88d 300c 	strb.w	r3, [sp, #12]
   2edd4:	4637      	mov	r7, r6
   2edd6:	e75b      	b.n	2ec90 <gnss_interface_setopt+0x9c>
   2edd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2edda:	2a01      	cmp	r2, #1
   2eddc:	d151      	bne.n	2ee82 <gnss_interface_setopt+0x28e>
   2edde:	2202      	movs	r2, #2
   2ede0:	f241 1603 	movw	r6, #4355	; 0x1103
   2ede4:	781b      	ldrb	r3, [r3, #0]
   2ede6:	9202      	str	r2, [sp, #8]
   2ede8:	f88d 300d 	strb.w	r3, [sp, #13]
   2edec:	4637      	mov	r7, r6
   2edee:	e74f      	b.n	2ec90 <gnss_interface_setopt+0x9c>
   2edf0:	682a      	ldr	r2, [r5, #0]
   2edf2:	b292      	uxth	r2, r2
   2edf4:	2a02      	cmp	r2, #2
   2edf6:	f47f af0b 	bne.w	2ec10 <gnss_interface_setopt+0x1c>
   2edfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2edfc:	2a04      	cmp	r2, #4
   2edfe:	d140      	bne.n	2ee82 <gnss_interface_setopt+0x28e>
   2ee00:	2101      	movs	r1, #1
   2ee02:	f241 0604 	movw	r6, #4100	; 0x1004
   2ee06:	682a      	ldr	r2, [r5, #0]
   2ee08:	6818      	ldr	r0, [r3, #0]
   2ee0a:	0c13      	lsrs	r3, r2, #16
   2ee0c:	041b      	lsls	r3, r3, #16
   2ee0e:	f043 0303 	orr.w	r3, r3, #3
   2ee12:	f8cd 0009 	str.w	r0, [sp, #9]
   2ee16:	602b      	str	r3, [r5, #0]
   2ee18:	f88d 1008 	strb.w	r1, [sp, #8]
   2ee1c:	4637      	mov	r7, r6
   2ee1e:	e737      	b.n	2ec90 <gnss_interface_setopt+0x9c>
   2ee20:	682a      	ldr	r2, [r5, #0]
   2ee22:	b292      	uxth	r2, r2
   2ee24:	2a04      	cmp	r2, #4
   2ee26:	d004      	beq.n	2ee32 <gnss_interface_setopt+0x23e>
   2ee28:	682a      	ldr	r2, [r5, #0]
   2ee2a:	b292      	uxth	r2, r2
   2ee2c:	2a02      	cmp	r2, #2
   2ee2e:	f47f aeef 	bne.w	2ec10 <gnss_interface_setopt+0x1c>
   2ee32:	2200      	movs	r2, #0
   2ee34:	f88d 2008 	strb.w	r2, [sp, #8]
   2ee38:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2ee3a:	2a04      	cmp	r2, #4
   2ee3c:	d121      	bne.n	2ee82 <gnss_interface_setopt+0x28e>
   2ee3e:	f241 0604 	movw	r6, #4100	; 0x1004
   2ee42:	681b      	ldr	r3, [r3, #0]
   2ee44:	4637      	mov	r7, r6
   2ee46:	f8cd 3009 	str.w	r3, [sp, #9]
   2ee4a:	e721      	b.n	2ec90 <gnss_interface_setopt+0x9c>
   2ee4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2ee4e:	2a01      	cmp	r2, #1
   2ee50:	d117      	bne.n	2ee82 <gnss_interface_setopt+0x28e>
   2ee52:	2240      	movs	r2, #64	; 0x40
   2ee54:	f241 1603 	movw	r6, #4355	; 0x1103
   2ee58:	781b      	ldrb	r3, [r3, #0]
   2ee5a:	9202      	str	r2, [sp, #8]
   2ee5c:	f88d 3015 	strb.w	r3, [sp, #21]
   2ee60:	4637      	mov	r7, r6
   2ee62:	e715      	b.n	2ec90 <gnss_interface_setopt+0x9c>
   2ee64:	682b      	ldr	r3, [r5, #0]
   2ee66:	b29b      	uxth	r3, r3
   2ee68:	2b04      	cmp	r3, #4
   2ee6a:	f47f aed1 	bne.w	2ec10 <gnss_interface_setopt+0x1c>
   2ee6e:	2202      	movs	r2, #2
   2ee70:	e700      	b.n	2ec74 <gnss_interface_setopt+0x80>
   2ee72:	200e      	movs	r0, #14
   2ee74:	f7f8 fb82 	bl	2757c <bsd_os_errno_set>
   2ee78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ee7c:	e76b      	b.n	2ed56 <gnss_interface_setopt+0x162>
   2ee7e:	2000      	movs	r0, #0
   2ee80:	e769      	b.n	2ed56 <gnss_interface_setopt+0x162>
   2ee82:	2016      	movs	r0, #22
   2ee84:	f7f8 fb7a 	bl	2757c <bsd_os_errno_set>
   2ee88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ee8c:	e6c5      	b.n	2ec1a <gnss_interface_setopt+0x26>
   2ee8e:	b128      	cbz	r0, 2ee9c <gnss_interface_setopt+0x2a8>
   2ee90:	6803      	ldr	r3, [r0, #0]
   2ee92:	b11b      	cbz	r3, 2ee9c <gnss_interface_setopt+0x2a8>
   2ee94:	4618      	mov	r0, r3
   2ee96:	f002 fa5d 	bl	31354 <rpc_gnss_client_data_free>
   2ee9a:	9800      	ldr	r0, [sp, #0]
   2ee9c:	f002 fa52 	bl	31344 <rpc_gnss_client_message_free>
   2eea0:	2023      	movs	r0, #35	; 0x23
   2eea2:	f7f8 fb6b 	bl	2757c <bsd_os_errno_set>
   2eea6:	682b      	ldr	r3, [r5, #0]
   2eea8:	200e      	movs	r0, #14
   2eeaa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2eeae:	602b      	str	r3, [r5, #0]
   2eeb0:	f7f8 fb64 	bl	2757c <bsd_os_errno_set>
   2eeb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eeb8:	e6af      	b.n	2ec1a <gnss_interface_setopt+0x26>
   2eeba:	202a      	movs	r0, #42	; 0x2a
   2eebc:	f7f8 fb5e 	bl	2757c <bsd_os_errno_set>
   2eec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eec4:	e6a9      	b.n	2ec1a <gnss_interface_setopt+0x26>
   2eec6:	2009      	movs	r0, #9
   2eec8:	f7f8 fb58 	bl	2757c <bsd_os_errno_set>
   2eecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eed0:	e6a3      	b.n	2ec1a <gnss_interface_setopt+0x26>
   2eed2:	2073      	movs	r0, #115	; 0x73
   2eed4:	f7f8 fb52 	bl	2757c <bsd_os_errno_set>
   2eed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eedc:	e69d      	b.n	2ec1a <gnss_interface_setopt+0x26>
   2eede:	bf00      	nop
   2eee0:	20023be4 	.word	0x20023be4
   2eee4:	49765443 	.word	0x49765443
   2eee8:	20020454 	.word	0x20020454
   2eeec:	20023bec 	.word	0x20023bec
   2eef0:	200287ac 	.word	0x200287ac
   2eef4:	20023be8 	.word	0x20023be8

0002eef8 <gnss_interface_getopt>:
   2eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eefc:	4c81      	ldr	r4, [pc, #516]	; (2f104 <gnss_interface_getopt+0x20c>)
   2eefe:	b087      	sub	sp, #28
   2ef00:	6825      	ldr	r5, [r4, #0]
   2ef02:	4698      	mov	r8, r3
   2ef04:	b2ad      	uxth	r5, r5
   2ef06:	2d02      	cmp	r5, #2
   2ef08:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2ef0a:	f040 80dd 	bne.w	2f0c8 <gnss_interface_getopt+0x1d0>
   2ef0e:	6825      	ldr	r5, [r4, #0]
   2ef10:	03ee      	lsls	r6, r5, #15
   2ef12:	f100 80eb 	bmi.w	2f0ec <gnss_interface_getopt+0x1f4>
   2ef16:	6825      	ldr	r5, [r4, #0]
   2ef18:	01ed      	lsls	r5, r5, #7
   2ef1a:	f100 80ed 	bmi.w	2f0f8 <gnss_interface_getopt+0x200>
   2ef1e:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2ef22:	f040 80d7 	bne.w	2f0d4 <gnss_interface_getopt+0x1dc>
   2ef26:	4978      	ldr	r1, [pc, #480]	; (2f108 <gnss_interface_getopt+0x210>)
   2ef28:	4288      	cmp	r0, r1
   2ef2a:	f040 80d9 	bne.w	2f0e0 <gnss_interface_getopt+0x1e8>
   2ef2e:	f1b8 0f00 	cmp.w	r8, #0
   2ef32:	d00b      	beq.n	2ef4c <gnss_interface_getopt+0x54>
   2ef34:	b153      	cbz	r3, 2ef4c <gnss_interface_getopt+0x54>
   2ef36:	1e57      	subs	r7, r2, #1
   2ef38:	2f05      	cmp	r7, #5
   2ef3a:	d807      	bhi.n	2ef4c <gnss_interface_getopt+0x54>
   2ef3c:	e8df f007 	tbb	[pc, r7]
   2ef40:	0f030f0f 	.word	0x0f030f0f
   2ef44:	0303      	.short	0x0303
   2ef46:	681b      	ldr	r3, [r3, #0]
   2ef48:	2b01      	cmp	r3, #1
   2ef4a:	d00b      	beq.n	2ef64 <gnss_interface_getopt+0x6c>
   2ef4c:	2016      	movs	r0, #22
   2ef4e:	f7f8 fb15 	bl	2757c <bsd_os_errno_set>
   2ef52:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ef56:	4628      	mov	r0, r5
   2ef58:	b007      	add	sp, #28
   2ef5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ef5e:	681b      	ldr	r3, [r3, #0]
   2ef60:	2b02      	cmp	r3, #2
   2ef62:	d1f3      	bne.n	2ef4c <gnss_interface_getopt+0x54>
   2ef64:	6823      	ldr	r3, [r4, #0]
   2ef66:	2212      	movs	r2, #18
   2ef68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2ef6c:	2100      	movs	r1, #0
   2ef6e:	a801      	add	r0, sp, #4
   2ef70:	6023      	str	r3, [r4, #0]
   2ef72:	f009 fe04 	bl	38b7e <memset>
   2ef76:	2112      	movs	r1, #18
   2ef78:	4668      	mov	r0, sp
   2ef7a:	f002 f9b9 	bl	312f0 <rpc_gnss_client_request_alloc>
   2ef7e:	4605      	mov	r5, r0
   2ef80:	9800      	ldr	r0, [sp, #0]
   2ef82:	2d00      	cmp	r5, #0
   2ef84:	f040 808a 	bne.w	2f09c <gnss_interface_getopt+0x1a4>
   2ef88:	2800      	cmp	r0, #0
   2ef8a:	f000 808e 	beq.w	2f0aa <gnss_interface_getopt+0x1b2>
   2ef8e:	f241 1602 	movw	r6, #4354	; 0x1102
   2ef92:	f04f 0e49 	mov.w	lr, #73	; 0x49
   2ef96:	2212      	movs	r2, #18
   2ef98:	f04f 0976 	mov.w	r9, #118	; 0x76
   2ef9c:	f04f 0b43 	mov.w	fp, #67	; 0x43
   2efa0:	f04f 0a54 	mov.w	sl, #84	; 0x54
   2efa4:	f8df c168 	ldr.w	ip, [pc, #360]	; 2f110 <gnss_interface_getopt+0x218>
   2efa8:	f880 e00f 	strb.w	lr, [r0, #15]
   2efac:	f8bc 3000 	ldrh.w	r3, [ip]
   2efb0:	f880 900e 	strb.w	r9, [r0, #14]
   2efb4:	3301      	adds	r3, #1
   2efb6:	b29b      	uxth	r3, r3
   2efb8:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   2efbc:	f8cd e004 	str.w	lr, [sp, #4]
   2efc0:	7145      	strb	r5, [r0, #5]
   2efc2:	7185      	strb	r5, [r0, #6]
   2efc4:	71c5      	strb	r5, [r0, #7]
   2efc6:	7205      	strb	r5, [r0, #8]
   2efc8:	7245      	strb	r5, [r0, #9]
   2efca:	7285      	strb	r5, [r0, #10]
   2efcc:	72c5      	strb	r5, [r0, #11]
   2efce:	a901      	add	r1, sp, #4
   2efd0:	7102      	strb	r2, [r0, #4]
   2efd2:	f880 b00c 	strb.w	fp, [r0, #12]
   2efd6:	f880 a00d 	strb.w	sl, [r0, #13]
   2efda:	f8df 9138 	ldr.w	r9, [pc, #312]	; 2f114 <gnss_interface_getopt+0x21c>
   2efde:	6800      	ldr	r0, [r0, #0]
   2efe0:	f8ac 3000 	strh.w	r3, [ip]
   2efe4:	f009 fdab 	bl	38b3e <memcpy>
   2efe8:	4631      	mov	r1, r6
   2efea:	9800      	ldr	r0, [sp, #0]
   2efec:	f8c9 5000 	str.w	r5, [r9]
   2eff0:	f002 f992 	bl	31318 <rpc_gnss_client_request_send>
   2eff4:	2800      	cmp	r0, #0
   2eff6:	d15d      	bne.n	2f0b4 <gnss_interface_getopt+0x1bc>
   2eff8:	4e44      	ldr	r6, [pc, #272]	; (2f10c <gnss_interface_getopt+0x214>)
   2effa:	4d43      	ldr	r5, [pc, #268]	; (2f108 <gnss_interface_getopt+0x210>)
   2effc:	4631      	mov	r1, r6
   2effe:	4628      	mov	r0, r5
   2f000:	f7f8 fa04 	bl	2740c <bsd_os_timedwait>
   2f004:	6823      	ldr	r3, [r4, #0]
   2f006:	01db      	lsls	r3, r3, #7
   2f008:	d4f8      	bmi.n	2effc <gnss_interface_getopt+0x104>
   2f00a:	f8d9 0000 	ldr.w	r0, [r9]
   2f00e:	b1d8      	cbz	r0, 2f048 <gnss_interface_getopt+0x150>
   2f010:	6825      	ldr	r5, [r4, #0]
   2f012:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   2f016:	d00f      	beq.n	2f038 <gnss_interface_getopt+0x140>
   2f018:	2f05      	cmp	r7, #5
   2f01a:	d837      	bhi.n	2f08c <gnss_interface_getopt+0x194>
   2f01c:	e8df f007 	tbb	[pc, r7]
   2f020:	2b26201a 	.word	0x2b26201a
   2f024:	0331      	.short	0x0331
   2f026:	2500      	movs	r5, #0
   2f028:	7b43      	ldrb	r3, [r0, #13]
   2f02a:	f888 3000 	strb.w	r3, [r8]
   2f02e:	f002 f991 	bl	31354 <rpc_gnss_client_data_free>
   2f032:	2300      	movs	r3, #0
   2f034:	f8c9 3000 	str.w	r3, [r9]
   2f038:	6823      	ldr	r3, [r4, #0]
   2f03a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2f03e:	6023      	str	r3, [r4, #0]
   2f040:	4628      	mov	r0, r5
   2f042:	b007      	add	sp, #28
   2f044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f048:	6823      	ldr	r3, [r4, #0]
   2f04a:	4605      	mov	r5, r0
   2f04c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2f050:	6023      	str	r3, [r4, #0]
   2f052:	e7f5      	b.n	2f040 <gnss_interface_getopt+0x148>
   2f054:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   2f058:	2500      	movs	r5, #0
   2f05a:	f8a8 3000 	strh.w	r3, [r8]
   2f05e:	e7e6      	b.n	2f02e <gnss_interface_getopt+0x136>
   2f060:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   2f064:	2500      	movs	r5, #0
   2f066:	f8a8 3000 	strh.w	r3, [r8]
   2f06a:	e7e0      	b.n	2f02e <gnss_interface_getopt+0x136>
   2f06c:	7b83      	ldrb	r3, [r0, #14]
   2f06e:	2500      	movs	r5, #0
   2f070:	f888 3000 	strb.w	r3, [r8]
   2f074:	e7db      	b.n	2f02e <gnss_interface_getopt+0x136>
   2f076:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   2f07a:	2500      	movs	r5, #0
   2f07c:	f8a8 3000 	strh.w	r3, [r8]
   2f080:	e7d5      	b.n	2f02e <gnss_interface_getopt+0x136>
   2f082:	7b03      	ldrb	r3, [r0, #12]
   2f084:	2500      	movs	r5, #0
   2f086:	f888 3000 	strb.w	r3, [r8]
   2f08a:	e7d0      	b.n	2f02e <gnss_interface_getopt+0x136>
   2f08c:	2016      	movs	r0, #22
   2f08e:	f7f8 fa75 	bl	2757c <bsd_os_errno_set>
   2f092:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f096:	f8d9 0000 	ldr.w	r0, [r9]
   2f09a:	e7c8      	b.n	2f02e <gnss_interface_getopt+0x136>
   2f09c:	b128      	cbz	r0, 2f0aa <gnss_interface_getopt+0x1b2>
   2f09e:	6803      	ldr	r3, [r0, #0]
   2f0a0:	b11b      	cbz	r3, 2f0aa <gnss_interface_getopt+0x1b2>
   2f0a2:	4618      	mov	r0, r3
   2f0a4:	f002 f956 	bl	31354 <rpc_gnss_client_data_free>
   2f0a8:	9800      	ldr	r0, [sp, #0]
   2f0aa:	f002 f94b 	bl	31344 <rpc_gnss_client_message_free>
   2f0ae:	2023      	movs	r0, #35	; 0x23
   2f0b0:	f7f8 fa64 	bl	2757c <bsd_os_errno_set>
   2f0b4:	6823      	ldr	r3, [r4, #0]
   2f0b6:	200e      	movs	r0, #14
   2f0b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2f0bc:	6023      	str	r3, [r4, #0]
   2f0be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f0c2:	f7f8 fa5b 	bl	2757c <bsd_os_errno_set>
   2f0c6:	e746      	b.n	2ef56 <gnss_interface_getopt+0x5e>
   2f0c8:	200e      	movs	r0, #14
   2f0ca:	f7f8 fa57 	bl	2757c <bsd_os_errno_set>
   2f0ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f0d2:	e740      	b.n	2ef56 <gnss_interface_getopt+0x5e>
   2f0d4:	202a      	movs	r0, #42	; 0x2a
   2f0d6:	f7f8 fa51 	bl	2757c <bsd_os_errno_set>
   2f0da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f0de:	e73a      	b.n	2ef56 <gnss_interface_getopt+0x5e>
   2f0e0:	2009      	movs	r0, #9
   2f0e2:	f7f8 fa4b 	bl	2757c <bsd_os_errno_set>
   2f0e6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f0ea:	e734      	b.n	2ef56 <gnss_interface_getopt+0x5e>
   2f0ec:	2005      	movs	r0, #5
   2f0ee:	f7f8 fa45 	bl	2757c <bsd_os_errno_set>
   2f0f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f0f6:	e72e      	b.n	2ef56 <gnss_interface_getopt+0x5e>
   2f0f8:	2073      	movs	r0, #115	; 0x73
   2f0fa:	f7f8 fa3f 	bl	2757c <bsd_os_errno_set>
   2f0fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f102:	e728      	b.n	2ef56 <gnss_interface_getopt+0x5e>
   2f104:	20023be4 	.word	0x20023be4
   2f108:	49765443 	.word	0x49765443
   2f10c:	20020454 	.word	0x20020454
   2f110:	200287ac 	.word	0x200287ac
   2f114:	20023be8 	.word	0x20023be8

0002f118 <gnss_interface_init>:
   2f118:	2100      	movs	r1, #0
   2f11a:	b538      	push	{r3, r4, r5, lr}
   2f11c:	4c0a      	ldr	r4, [pc, #40]	; (2f148 <gnss_interface_init+0x30>)
   2f11e:	4d0b      	ldr	r5, [pc, #44]	; (2f14c <gnss_interface_init+0x34>)
   2f120:	6822      	ldr	r2, [r4, #0]
   2f122:	480b      	ldr	r0, [pc, #44]	; (2f150 <gnss_interface_init+0x38>)
   2f124:	4b0b      	ldr	r3, [pc, #44]	; (2f154 <gnss_interface_init+0x3c>)
   2f126:	402a      	ands	r2, r5
   2f128:	6022      	str	r2, [r4, #0]
   2f12a:	8001      	strh	r1, [r0, #0]
   2f12c:	6019      	str	r1, [r3, #0]
   2f12e:	f002 f8d9 	bl	312e4 <rpc_gnss_client_init>
   2f132:	b938      	cbnz	r0, 2f144 <gnss_interface_init+0x2c>
   2f134:	2101      	movs	r1, #1
   2f136:	6823      	ldr	r3, [r4, #0]
   2f138:	4a07      	ldr	r2, [pc, #28]	; (2f158 <gnss_interface_init+0x40>)
   2f13a:	402b      	ands	r3, r5
   2f13c:	430b      	orrs	r3, r1
   2f13e:	7011      	strb	r1, [r2, #0]
   2f140:	6023      	str	r3, [r4, #0]
   2f142:	bd38      	pop	{r3, r4, r5, pc}
   2f144:	2003      	movs	r0, #3
   2f146:	bd38      	pop	{r3, r4, r5, pc}
   2f148:	20023be4 	.word	0x20023be4
   2f14c:	ffff0000 	.word	0xffff0000
   2f150:	200287ac 	.word	0x200287ac
   2f154:	20023be8 	.word	0x20023be8
   2f158:	2002c6e2 	.word	0x2002c6e2

0002f15c <gnss_interface_open>:
   2f15c:	b510      	push	{r4, lr}
   2f15e:	4b1c      	ldr	r3, [pc, #112]	; (2f1d0 <gnss_interface_open+0x74>)
   2f160:	781b      	ldrb	r3, [r3, #0]
   2f162:	b34b      	cbz	r3, 2f1b8 <gnss_interface_open+0x5c>
   2f164:	2902      	cmp	r1, #2
   2f166:	d121      	bne.n	2f1ac <gnss_interface_open+0x50>
   2f168:	4c1a      	ldr	r4, [pc, #104]	; (2f1d4 <gnss_interface_open+0x78>)
   2f16a:	6823      	ldr	r3, [r4, #0]
   2f16c:	b29b      	uxth	r3, r3
   2f16e:	2b01      	cmp	r3, #1
   2f170:	d116      	bne.n	2f1a0 <gnss_interface_open+0x44>
   2f172:	6823      	ldr	r3, [r4, #0]
   2f174:	4608      	mov	r0, r1
   2f176:	0c1b      	lsrs	r3, r3, #16
   2f178:	041b      	lsls	r3, r3, #16
   2f17a:	f043 0302 	orr.w	r3, r3, #2
   2f17e:	2200      	movs	r2, #0
   2f180:	4915      	ldr	r1, [pc, #84]	; (2f1d8 <gnss_interface_open+0x7c>)
   2f182:	6023      	str	r3, [r4, #0]
   2f184:	f002 f9d0 	bl	31528 <packet_handler_create>
   2f188:	4a14      	ldr	r2, [pc, #80]	; (2f1dc <gnss_interface_open+0x80>)
   2f18a:	6010      	str	r0, [r2, #0]
   2f18c:	b1d0      	cbz	r0, 2f1c4 <gnss_interface_open+0x68>
   2f18e:	6823      	ldr	r3, [r4, #0]
   2f190:	6802      	ldr	r2, [r0, #0]
   2f192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2f196:	6812      	ldr	r2, [r2, #0]
   2f198:	6023      	str	r3, [r4, #0]
   2f19a:	4790      	blx	r2
   2f19c:	4810      	ldr	r0, [pc, #64]	; (2f1e0 <gnss_interface_open+0x84>)
   2f19e:	bd10      	pop	{r4, pc}
   2f1a0:	2005      	movs	r0, #5
   2f1a2:	f7f8 f9eb 	bl	2757c <bsd_os_errno_set>
   2f1a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f1aa:	bd10      	pop	{r4, pc}
   2f1ac:	2029      	movs	r0, #41	; 0x29
   2f1ae:	f7f8 f9e5 	bl	2757c <bsd_os_errno_set>
   2f1b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f1b6:	bd10      	pop	{r4, pc}
   2f1b8:	2070      	movs	r0, #112	; 0x70
   2f1ba:	f7f8 f9df 	bl	2757c <bsd_os_errno_set>
   2f1be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f1c2:	bd10      	pop	{r4, pc}
   2f1c4:	200e      	movs	r0, #14
   2f1c6:	f7f8 f9d9 	bl	2757c <bsd_os_errno_set>
   2f1ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f1ce:	bd10      	pop	{r4, pc}
   2f1d0:	2002c6e2 	.word	0x2002c6e2
   2f1d4:	20023be4 	.word	0x20023be4
   2f1d8:	0002e439 	.word	0x0002e439
   2f1dc:	20023bec 	.word	0x20023bec
   2f1e0:	49765443 	.word	0x49765443

0002f1e4 <gnss_interface_close>:
   2f1e4:	b530      	push	{r4, r5, lr}
   2f1e6:	4b15      	ldr	r3, [pc, #84]	; (2f23c <gnss_interface_close+0x58>)
   2f1e8:	b085      	sub	sp, #20
   2f1ea:	4298      	cmp	r0, r3
   2f1ec:	d11f      	bne.n	2f22e <gnss_interface_close+0x4a>
   2f1ee:	4c14      	ldr	r4, [pc, #80]	; (2f240 <gnss_interface_close+0x5c>)
   2f1f0:	6822      	ldr	r2, [r4, #0]
   2f1f2:	b292      	uxth	r2, r2
   2f1f4:	2a04      	cmp	r2, #4
   2f1f6:	d00f      	beq.n	2f218 <gnss_interface_close+0x34>
   2f1f8:	4d12      	ldr	r5, [pc, #72]	; (2f244 <gnss_interface_close+0x60>)
   2f1fa:	6828      	ldr	r0, [r5, #0]
   2f1fc:	b118      	cbz	r0, 2f206 <gnss_interface_close+0x22>
   2f1fe:	f002 f9b3 	bl	31568 <packet_handler_delete>
   2f202:	2300      	movs	r3, #0
   2f204:	602b      	str	r3, [r5, #0]
   2f206:	2000      	movs	r0, #0
   2f208:	6823      	ldr	r3, [r4, #0]
   2f20a:	0c1b      	lsrs	r3, r3, #16
   2f20c:	041b      	lsls	r3, r3, #16
   2f20e:	f043 0301 	orr.w	r3, r3, #1
   2f212:	6023      	str	r3, [r4, #0]
   2f214:	b005      	add	sp, #20
   2f216:	bd30      	pop	{r4, r5, pc}
   2f218:	2100      	movs	r1, #0
   2f21a:	ab04      	add	r3, sp, #16
   2f21c:	f843 1d04 	str.w	r1, [r3, #-4]!
   2f220:	9200      	str	r2, [sp, #0]
   2f222:	f44f 7101 	mov.w	r1, #516	; 0x204
   2f226:	2208      	movs	r2, #8
   2f228:	f001 fedc 	bl	30fe4 <nrf_setsockopt>
   2f22c:	e7e4      	b.n	2f1f8 <gnss_interface_close+0x14>
   2f22e:	2009      	movs	r0, #9
   2f230:	f7f8 f9a4 	bl	2757c <bsd_os_errno_set>
   2f234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f238:	e7ec      	b.n	2f214 <gnss_interface_close+0x30>
   2f23a:	bf00      	nop
   2f23c:	49765443 	.word	0x49765443
   2f240:	20023be4 	.word	0x20023be4
   2f244:	20023bec 	.word	0x20023bec

0002f248 <rpc_logobj_client_evt_handler>:
   2f248:	b120      	cbz	r0, 2f254 <rpc_logobj_client_evt_handler+0xc>
   2f24a:	f850 1b08 	ldr.w	r1, [r0], #8
   2f24e:	0c09      	lsrs	r1, r1, #16
   2f250:	f7fb b94e 	b.w	2a4f0 <logobj_event_handler>
   2f254:	4770      	bx	lr
   2f256:	bf00      	nop

0002f258 <rpc_logobj_client_init>:
   2f258:	4801      	ldr	r0, [pc, #4]	; (2f260 <rpc_logobj_client_init+0x8>)
   2f25a:	f7ff b82f 	b.w	2e2bc <rpc_client_register>
   2f25e:	bf00      	nop
   2f260:	0003a1c0 	.word	0x0003a1c0

0002f264 <rpc_logobj_client_request_alloc>:
   2f264:	2300      	movs	r3, #0
   2f266:	b510      	push	{r4, lr}
   2f268:	b082      	sub	sp, #8
   2f26a:	9301      	str	r3, [sp, #4]
   2f26c:	b961      	cbnz	r1, 2f288 <rpc_logobj_client_request_alloc+0x24>
   2f26e:	b170      	cbz	r0, 2f28e <rpc_logobj_client_request_alloc+0x2a>
   2f270:	4604      	mov	r4, r0
   2f272:	aa01      	add	r2, sp, #4
   2f274:	2009      	movs	r0, #9
   2f276:	f7ff f89b 	bl	2e3b0 <rpc_message_alloc>
   2f27a:	b918      	cbnz	r0, 2f284 <rpc_logobj_client_request_alloc+0x20>
   2f27c:	9b01      	ldr	r3, [sp, #4]
   2f27e:	b10b      	cbz	r3, 2f284 <rpc_logobj_client_request_alloc+0x20>
   2f280:	3308      	adds	r3, #8
   2f282:	6023      	str	r3, [r4, #0]
   2f284:	b002      	add	sp, #8
   2f286:	bd10      	pop	{r4, pc}
   2f288:	200f      	movs	r0, #15
   2f28a:	b002      	add	sp, #8
   2f28c:	bd10      	pop	{r4, pc}
   2f28e:	200e      	movs	r0, #14
   2f290:	b002      	add	sp, #8
   2f292:	bd10      	pop	{r4, pc}

0002f294 <rpc_logobj_client_request_send>:
   2f294:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2f298:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   2f29c:	d10b      	bne.n	2f2b6 <rpc_logobj_client_request_send+0x22>
   2f29e:	b160      	cbz	r0, 2f2ba <rpc_logobj_client_request_send+0x26>
   2f2a0:	4603      	mov	r3, r0
   2f2a2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2f2a6:	2009      	movs	r0, #9
   2f2a8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2f2ac:	f843 1d08 	str.w	r1, [r3, #-8]!
   2f2b0:	4619      	mov	r1, r3
   2f2b2:	f7ff b86d 	b.w	2e390 <rpc_message_send>
   2f2b6:	200f      	movs	r0, #15
   2f2b8:	4770      	bx	lr
   2f2ba:	200e      	movs	r0, #14
   2f2bc:	4770      	bx	lr
   2f2be:	bf00      	nop

0002f2c0 <rpc_logobj_client_message_free>:
   2f2c0:	b120      	cbz	r0, 2f2cc <rpc_logobj_client_message_free+0xc>
   2f2c2:	f1a0 0108 	sub.w	r1, r0, #8
   2f2c6:	2009      	movs	r0, #9
   2f2c8:	f7ff b89e 	b.w	2e408 <rpc_message_free>
   2f2cc:	200e      	movs	r0, #14
   2f2ce:	4770      	bx	lr

0002f2d0 <rpc_logobj_client_data_free>:
   2f2d0:	b118      	cbz	r0, 2f2da <rpc_logobj_client_data_free+0xa>
   2f2d2:	4601      	mov	r1, r0
   2f2d4:	2009      	movs	r0, #9
   2f2d6:	f7ff b8a3 	b.w	2e420 <rpc_message_data_free>
   2f2da:	200e      	movs	r0, #14
   2f2dc:	4770      	bx	lr
   2f2de:	bf00      	nop

0002f2e0 <dfu_client_event_handler>:
   2f2e0:	f850 1b08 	ldr.w	r1, [r0], #8
   2f2e4:	0c09      	lsrs	r1, r1, #16
   2f2e6:	f002 bef5 	b.w	320d4 <rpc_dfu_event_handler>
   2f2ea:	bf00      	nop

0002f2ec <rpc_dfu_client_init>:
   2f2ec:	4801      	ldr	r0, [pc, #4]	; (2f2f4 <rpc_dfu_client_init+0x8>)
   2f2ee:	f7fe bfe5 	b.w	2e2bc <rpc_client_register>
   2f2f2:	bf00      	nop
   2f2f4:	0003a1d0 	.word	0x0003a1d0

0002f2f8 <rpc_dfu_client_request_alloc>:
   2f2f8:	2300      	movs	r3, #0
   2f2fa:	b510      	push	{r4, lr}
   2f2fc:	b082      	sub	sp, #8
   2f2fe:	9301      	str	r3, [sp, #4]
   2f300:	b158      	cbz	r0, 2f31a <rpc_dfu_client_request_alloc+0x22>
   2f302:	4604      	mov	r4, r0
   2f304:	aa01      	add	r2, sp, #4
   2f306:	2006      	movs	r0, #6
   2f308:	f7ff f852 	bl	2e3b0 <rpc_message_alloc>
   2f30c:	b918      	cbnz	r0, 2f316 <rpc_dfu_client_request_alloc+0x1e>
   2f30e:	9b01      	ldr	r3, [sp, #4]
   2f310:	b10b      	cbz	r3, 2f316 <rpc_dfu_client_request_alloc+0x1e>
   2f312:	3308      	adds	r3, #8
   2f314:	6023      	str	r3, [r4, #0]
   2f316:	b002      	add	sp, #8
   2f318:	bd10      	pop	{r4, pc}
   2f31a:	2007      	movs	r0, #7
   2f31c:	b002      	add	sp, #8
   2f31e:	bd10      	pop	{r4, pc}

0002f320 <rpc_dfu_client_request_send>:
   2f320:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   2f324:	d10b      	bne.n	2f33e <rpc_dfu_client_request_send+0x1e>
   2f326:	b160      	cbz	r0, 2f342 <rpc_dfu_client_request_send+0x22>
   2f328:	4603      	mov	r3, r0
   2f32a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2f32e:	2006      	movs	r0, #6
   2f330:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2f334:	f843 1d08 	str.w	r1, [r3, #-8]!
   2f338:	4619      	mov	r1, r3
   2f33a:	f7ff b829 	b.w	2e390 <rpc_message_send>
   2f33e:	200f      	movs	r0, #15
   2f340:	4770      	bx	lr
   2f342:	2007      	movs	r0, #7
   2f344:	4770      	bx	lr
   2f346:	bf00      	nop

0002f348 <rpc_dfu_client_message_free>:
   2f348:	b120      	cbz	r0, 2f354 <rpc_dfu_client_message_free+0xc>
   2f34a:	f1a0 0108 	sub.w	r1, r0, #8
   2f34e:	2006      	movs	r0, #6
   2f350:	f7ff b85a 	b.w	2e408 <rpc_message_free>
   2f354:	2007      	movs	r0, #7
   2f356:	4770      	bx	lr

0002f358 <rpc_dfu_client_data_free>:
   2f358:	b118      	cbz	r0, 2f362 <rpc_dfu_client_data_free+0xa>
   2f35a:	4601      	mov	r1, r0
   2f35c:	2006      	movs	r0, #6
   2f35e:	f7ff b85f 	b.w	2e420 <rpc_message_data_free>
   2f362:	2007      	movs	r0, #7
   2f364:	4770      	bx	lr
   2f366:	bf00      	nop

0002f368 <packet_free_cb>:
   2f368:	6800      	ldr	r0, [r0, #0]
   2f36a:	f003 bc0d 	b.w	32b88 <rpc_at_client_data_free>
   2f36e:	bf00      	nop

0002f370 <at_interface_write>:
   2f370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f374:	b083      	sub	sp, #12
   2f376:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2f378:	2c00      	cmp	r4, #0
   2f37a:	d16c      	bne.n	2f456 <at_interface_write+0xe6>
   2f37c:	4688      	mov	r8, r1
   2f37e:	4615      	mov	r5, r2
   2f380:	461e      	mov	r6, r3
   2f382:	4607      	mov	r7, r0
   2f384:	f003 fad2 	bl	3292c <interface_socket_from_handle_get>
   2f388:	4604      	mov	r4, r0
   2f38a:	2e00      	cmp	r6, #0
   2f38c:	d137      	bne.n	2f3fe <at_interface_write+0x8e>
   2f38e:	2800      	cmp	r0, #0
   2f390:	d067      	beq.n	2f462 <at_interface_write+0xf2>
   2f392:	6803      	ldr	r3, [r0, #0]
   2f394:	039b      	lsls	r3, r3, #14
   2f396:	d564      	bpl.n	2f462 <at_interface_write+0xf2>
   2f398:	6803      	ldr	r3, [r0, #0]
   2f39a:	4629      	mov	r1, r5
   2f39c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2f3a0:	6003      	str	r3, [r0, #0]
   2f3a2:	6803      	ldr	r3, [r0, #0]
   2f3a4:	4668      	mov	r0, sp
   2f3a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2f3aa:	6023      	str	r3, [r4, #0]
   2f3ac:	f003 fbc2 	bl	32b34 <rpc_at_client_request_alloc>
   2f3b0:	4606      	mov	r6, r0
   2f3b2:	4638      	mov	r0, r7
   2f3b4:	f003 faba 	bl	3292c <interface_socket_from_handle_get>
   2f3b8:	4681      	mov	r9, r0
   2f3ba:	bb56      	cbnz	r6, 2f412 <at_interface_write+0xa2>
   2f3bc:	2304      	movs	r3, #4
   2f3be:	9800      	ldr	r0, [sp, #0]
   2f3c0:	7203      	strb	r3, [r0, #8]
   2f3c2:	7246      	strb	r6, [r0, #9]
   2f3c4:	7286      	strb	r6, [r0, #10]
   2f3c6:	72c6      	strb	r6, [r0, #11]
   2f3c8:	60c7      	str	r7, [r0, #12]
   2f3ca:	bb25      	cbnz	r5, 2f416 <at_interface_write+0xa6>
   2f3cc:	2101      	movs	r1, #1
   2f3ce:	f003 fbc5 	bl	32b5c <rpc_at_client_request_send>
   2f3d2:	bb78      	cbnz	r0, 2f434 <at_interface_write+0xc4>
   2f3d4:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   2f3d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2f3dc:	2900      	cmp	r1, #0
   2f3de:	bf08      	it	eq
   2f3e0:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2f3e4:	ab02      	add	r3, sp, #8
   2f3e6:	f843 1d04 	str.w	r1, [r3, #-4]!
   2f3ea:	4638      	mov	r0, r7
   2f3ec:	4611      	mov	r1, r2
   2f3ee:	f003 fa29 	bl	32844 <interface_socket_wait>
   2f3f2:	b320      	cbz	r0, 2f43e <at_interface_write+0xce>
   2f3f4:	6823      	ldr	r3, [r4, #0]
   2f3f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2f3fa:	6023      	str	r3, [r4, #0]
   2f3fc:	e002      	b.n	2f404 <at_interface_write+0x94>
   2f3fe:	b390      	cbz	r0, 2f466 <at_interface_write+0xf6>
   2f400:	6803      	ldr	r3, [r0, #0]
   2f402:	202d      	movs	r0, #45	; 0x2d
   2f404:	f7f8 f8ba 	bl	2757c <bsd_os_errno_set>
   2f408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f40c:	b003      	add	sp, #12
   2f40e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f412:	200c      	movs	r0, #12
   2f414:	e7ee      	b.n	2f3f4 <at_interface_write+0x84>
   2f416:	4641      	mov	r1, r8
   2f418:	6800      	ldr	r0, [r0, #0]
   2f41a:	462a      	mov	r2, r5
   2f41c:	f009 fb8f 	bl	38b3e <memcpy>
   2f420:	2101      	movs	r1, #1
   2f422:	9800      	ldr	r0, [sp, #0]
   2f424:	f003 fb9a 	bl	32b5c <rpc_at_client_request_send>
   2f428:	2800      	cmp	r0, #0
   2f42a:	d0d3      	beq.n	2f3d4 <at_interface_write+0x64>
   2f42c:	9b00      	ldr	r3, [sp, #0]
   2f42e:	6818      	ldr	r0, [r3, #0]
   2f430:	f003 fbaa 	bl	32b88 <rpc_at_client_data_free>
   2f434:	9800      	ldr	r0, [sp, #0]
   2f436:	f003 fb9f 	bl	32b78 <rpc_at_client_message_free>
   2f43a:	2023      	movs	r0, #35	; 0x23
   2f43c:	e7da      	b.n	2f3f4 <at_interface_write+0x84>
   2f43e:	4638      	mov	r0, r7
   2f440:	f003 fa74 	bl	3292c <interface_socket_from_handle_get>
   2f444:	4603      	mov	r3, r0
   2f446:	b120      	cbz	r0, 2f452 <at_interface_write+0xe2>
   2f448:	6840      	ldr	r0, [r0, #4]
   2f44a:	b110      	cbz	r0, 2f452 <at_interface_write+0xe2>
   2f44c:	2200      	movs	r2, #0
   2f44e:	605a      	str	r2, [r3, #4]
   2f450:	e7d0      	b.n	2f3f4 <at_interface_write+0x84>
   2f452:	4628      	mov	r0, r5
   2f454:	e7da      	b.n	2f40c <at_interface_write+0x9c>
   2f456:	2038      	movs	r0, #56	; 0x38
   2f458:	f7f8 f890 	bl	2757c <bsd_os_errno_set>
   2f45c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f460:	e7d4      	b.n	2f40c <at_interface_write+0x9c>
   2f462:	2016      	movs	r0, #22
   2f464:	e7ce      	b.n	2f404 <at_interface_write+0x94>
   2f466:	202d      	movs	r0, #45	; 0x2d
   2f468:	e7cc      	b.n	2f404 <at_interface_write+0x94>
   2f46a:	bf00      	nop

0002f46c <at_interface_init>:
   2f46c:	b508      	push	{r3, lr}
   2f46e:	f003 fb5b 	bl	32b28 <rpc_at_client_init>
   2f472:	b910      	cbnz	r0, 2f47a <at_interface_init+0xe>
   2f474:	2201      	movs	r2, #1
   2f476:	4b01      	ldr	r3, [pc, #4]	; (2f47c <at_interface_init+0x10>)
   2f478:	701a      	strb	r2, [r3, #0]
   2f47a:	bd08      	pop	{r3, pc}
   2f47c:	2002c6e3 	.word	0x2002c6e3

0002f480 <at_interface_open>:
   2f480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f484:	2600      	movs	r6, #0
   2f486:	4b34      	ldr	r3, [pc, #208]	; (2f558 <at_interface_open+0xd8>)
   2f488:	b084      	sub	sp, #16
   2f48a:	781b      	ldrb	r3, [r3, #0]
   2f48c:	9601      	str	r6, [sp, #4]
   2f48e:	2b00      	cmp	r3, #0
   2f490:	d05c      	beq.n	2f54c <at_interface_open+0xcc>
   2f492:	2902      	cmp	r1, #2
   2f494:	460d      	mov	r5, r1
   2f496:	d153      	bne.n	2f540 <at_interface_open+0xc0>
   2f498:	4680      	mov	r8, r0
   2f49a:	4617      	mov	r7, r2
   2f49c:	a801      	add	r0, sp, #4
   2f49e:	4a2f      	ldr	r2, [pc, #188]	; (2f55c <at_interface_open+0xdc>)
   2f4a0:	f003 f91e 	bl	326e0 <interface_socket_allocate>
   2f4a4:	9b01      	ldr	r3, [sp, #4]
   2f4a6:	4604      	mov	r4, r0
   2f4a8:	b3c3      	cbz	r3, 2f51c <at_interface_open+0x9c>
   2f4aa:	615f      	str	r7, [r3, #20]
   2f4ac:	4631      	mov	r1, r6
   2f4ae:	e9c3 8503 	strd	r8, r5, [r3, #12]
   2f4b2:	a802      	add	r0, sp, #8
   2f4b4:	f003 fb3e 	bl	32b34 <rpc_at_client_request_alloc>
   2f4b8:	4606      	mov	r6, r0
   2f4ba:	4620      	mov	r0, r4
   2f4bc:	f003 fa36 	bl	3292c <interface_socket_from_handle_get>
   2f4c0:	4607      	mov	r7, r0
   2f4c2:	bb16      	cbnz	r6, 2f50a <at_interface_open+0x8a>
   2f4c4:	2304      	movs	r3, #4
   2f4c6:	9802      	ldr	r0, [sp, #8]
   2f4c8:	2105      	movs	r1, #5
   2f4ca:	7246      	strb	r6, [r0, #9]
   2f4cc:	7286      	strb	r6, [r0, #10]
   2f4ce:	72c6      	strb	r6, [r0, #11]
   2f4d0:	7203      	strb	r3, [r0, #8]
   2f4d2:	60c4      	str	r4, [r0, #12]
   2f4d4:	f003 fb42 	bl	32b5c <rpc_at_client_request_send>
   2f4d8:	4606      	mov	r6, r0
   2f4da:	bb60      	cbnz	r0, 2f536 <at_interface_open+0xb6>
   2f4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f4de:	ab04      	add	r3, sp, #16
   2f4e0:	2a00      	cmp	r2, #0
   2f4e2:	bf08      	it	eq
   2f4e4:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   2f4e8:	4629      	mov	r1, r5
   2f4ea:	f843 2d04 	str.w	r2, [r3, #-4]!
   2f4ee:	4620      	mov	r0, r4
   2f4f0:	462a      	mov	r2, r5
   2f4f2:	f003 f9a7 	bl	32844 <interface_socket_wait>
   2f4f6:	4605      	mov	r5, r0
   2f4f8:	b940      	cbnz	r0, 2f50c <at_interface_open+0x8c>
   2f4fa:	4620      	mov	r0, r4
   2f4fc:	f003 fa16 	bl	3292c <interface_socket_from_handle_get>
   2f500:	b180      	cbz	r0, 2f524 <at_interface_open+0xa4>
   2f502:	6845      	ldr	r5, [r0, #4]
   2f504:	b175      	cbz	r5, 2f524 <at_interface_open+0xa4>
   2f506:	6046      	str	r6, [r0, #4]
   2f508:	e000      	b.n	2f50c <at_interface_open+0x8c>
   2f50a:	250c      	movs	r5, #12
   2f50c:	4620      	mov	r0, r4
   2f50e:	f003 f94b 	bl	327a8 <interface_socket_free>
   2f512:	4628      	mov	r0, r5
   2f514:	f7f8 f832 	bl	2757c <bsd_os_errno_set>
   2f518:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2f51c:	4620      	mov	r0, r4
   2f51e:	b004      	add	sp, #16
   2f520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f524:	4620      	mov	r0, r4
   2f526:	9a01      	ldr	r2, [sp, #4]
   2f528:	6813      	ldr	r3, [r2, #0]
   2f52a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2f52e:	6013      	str	r3, [r2, #0]
   2f530:	b004      	add	sp, #16
   2f532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f536:	9802      	ldr	r0, [sp, #8]
   2f538:	f003 fb1e 	bl	32b78 <rpc_at_client_message_free>
   2f53c:	2523      	movs	r5, #35	; 0x23
   2f53e:	e7e5      	b.n	2f50c <at_interface_open+0x8c>
   2f540:	2029      	movs	r0, #41	; 0x29
   2f542:	f7f8 f81b 	bl	2757c <bsd_os_errno_set>
   2f546:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2f54a:	e7e7      	b.n	2f51c <at_interface_open+0x9c>
   2f54c:	2070      	movs	r0, #112	; 0x70
   2f54e:	f7f8 f815 	bl	2757c <bsd_os_errno_set>
   2f552:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2f556:	e7e1      	b.n	2f51c <at_interface_open+0x9c>
   2f558:	2002c6e3 	.word	0x2002c6e3
   2f55c:	0002f369 	.word	0x0002f369

0002f560 <at_interface_close>:
   2f560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f564:	b082      	sub	sp, #8
   2f566:	4606      	mov	r6, r0
   2f568:	f003 f9e0 	bl	3292c <interface_socket_from_handle_get>
   2f56c:	2800      	cmp	r0, #0
   2f56e:	d051      	beq.n	2f614 <at_interface_close+0xb4>
   2f570:	230d      	movs	r3, #13
   2f572:	6807      	ldr	r7, [r0, #0]
   2f574:	6003      	str	r3, [r0, #0]
   2f576:	6803      	ldr	r3, [r0, #0]
   2f578:	4604      	mov	r4, r0
   2f57a:	039b      	lsls	r3, r3, #14
   2f57c:	d42e      	bmi.n	2f5dc <at_interface_close+0x7c>
   2f57e:	2100      	movs	r1, #0
   2f580:	4668      	mov	r0, sp
   2f582:	f003 fad7 	bl	32b34 <rpc_at_client_request_alloc>
   2f586:	4605      	mov	r5, r0
   2f588:	4630      	mov	r0, r6
   2f58a:	f003 f9cf 	bl	3292c <interface_socket_from_handle_get>
   2f58e:	4680      	mov	r8, r0
   2f590:	bb75      	cbnz	r5, 2f5f0 <at_interface_close+0x90>
   2f592:	2304      	movs	r3, #4
   2f594:	9800      	ldr	r0, [sp, #0]
   2f596:	2106      	movs	r1, #6
   2f598:	7203      	strb	r3, [r0, #8]
   2f59a:	7245      	strb	r5, [r0, #9]
   2f59c:	7285      	strb	r5, [r0, #10]
   2f59e:	72c5      	strb	r5, [r0, #11]
   2f5a0:	60c6      	str	r6, [r0, #12]
   2f5a2:	f003 fadb 	bl	32b5c <rpc_at_client_request_send>
   2f5a6:	b9f0      	cbnz	r0, 2f5e6 <at_interface_close+0x86>
   2f5a8:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   2f5ac:	220e      	movs	r2, #14
   2f5ae:	2900      	cmp	r1, #0
   2f5b0:	bf08      	it	eq
   2f5b2:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2f5b6:	ab02      	add	r3, sp, #8
   2f5b8:	f843 1d04 	str.w	r1, [r3, #-4]!
   2f5bc:	4630      	mov	r0, r6
   2f5be:	4611      	mov	r1, r2
   2f5c0:	f003 f940 	bl	32844 <interface_socket_wait>
   2f5c4:	4605      	mov	r5, r0
   2f5c6:	b1a8      	cbz	r0, 2f5f4 <at_interface_close+0x94>
   2f5c8:	6027      	str	r7, [r4, #0]
   2f5ca:	4628      	mov	r0, r5
   2f5cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f5d0:	f7f7 ffd4 	bl	2757c <bsd_os_errno_set>
   2f5d4:	4628      	mov	r0, r5
   2f5d6:	b002      	add	sp, #8
   2f5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f5dc:	6803      	ldr	r3, [r0, #0]
   2f5de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2f5e2:	6003      	str	r3, [r0, #0]
   2f5e4:	e7cb      	b.n	2f57e <at_interface_close+0x1e>
   2f5e6:	9800      	ldr	r0, [sp, #0]
   2f5e8:	f003 fac6 	bl	32b78 <rpc_at_client_message_free>
   2f5ec:	2523      	movs	r5, #35	; 0x23
   2f5ee:	e7eb      	b.n	2f5c8 <at_interface_close+0x68>
   2f5f0:	250c      	movs	r5, #12
   2f5f2:	e7e9      	b.n	2f5c8 <at_interface_close+0x68>
   2f5f4:	4630      	mov	r0, r6
   2f5f6:	f003 f999 	bl	3292c <interface_socket_from_handle_get>
   2f5fa:	b120      	cbz	r0, 2f606 <at_interface_close+0xa6>
   2f5fc:	6843      	ldr	r3, [r0, #4]
   2f5fe:	b113      	cbz	r3, 2f606 <at_interface_close+0xa6>
   2f600:	6045      	str	r5, [r0, #4]
   2f602:	461d      	mov	r5, r3
   2f604:	e7e0      	b.n	2f5c8 <at_interface_close+0x68>
   2f606:	4630      	mov	r0, r6
   2f608:	f003 f8ce 	bl	327a8 <interface_socket_free>
   2f60c:	4628      	mov	r0, r5
   2f60e:	b002      	add	sp, #8
   2f610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f614:	2516      	movs	r5, #22
   2f616:	e7d8      	b.n	2f5ca <at_interface_close+0x6a>

0002f618 <at_interface_read>:
   2f618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f61c:	b087      	sub	sp, #28
   2f61e:	4688      	mov	r8, r1
   2f620:	4615      	mov	r5, r2
   2f622:	461e      	mov	r6, r3
   2f624:	4607      	mov	r7, r0
   2f626:	f003 f981 	bl	3292c <interface_socket_from_handle_get>
   2f62a:	2800      	cmp	r0, #0
   2f62c:	f000 8084 	beq.w	2f738 <at_interface_read+0x120>
   2f630:	2300      	movs	r3, #0
   2f632:	4604      	mov	r4, r0
   2f634:	e9cd 8502 	strd	r8, r5, [sp, #8]
   2f638:	e9cd 3304 	strd	r3, r3, [sp, #16]
   2f63c:	2e00      	cmp	r6, #0
   2f63e:	d12d      	bne.n	2f69c <at_interface_read+0x84>
   2f640:	f016 0502 	ands.w	r5, r6, #2
   2f644:	d148      	bne.n	2f6d8 <at_interface_read+0xc0>
   2f646:	46a8      	mov	r8, r5
   2f648:	6823      	ldr	r3, [r4, #0]
   2f64a:	69e0      	ldr	r0, [r4, #28]
   2f64c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2f650:	6023      	str	r3, [r4, #0]
   2f652:	6803      	ldr	r3, [r0, #0]
   2f654:	4632      	mov	r2, r6
   2f656:	689b      	ldr	r3, [r3, #8]
   2f658:	a902      	add	r1, sp, #8
   2f65a:	4798      	blx	r3
   2f65c:	f1b0 0900 	subs.w	r9, r0, #0
   2f660:	da2a      	bge.n	2f6b8 <at_interface_read+0xa0>
   2f662:	2d00      	cmp	r5, #0
   2f664:	d15e      	bne.n	2f724 <at_interface_read+0x10c>
   2f666:	6a25      	ldr	r5, [r4, #32]
   2f668:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2f66c:	2d00      	cmp	r5, #0
   2f66e:	bf08      	it	eq
   2f670:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   2f674:	4611      	mov	r1, r2
   2f676:	ab01      	add	r3, sp, #4
   2f678:	4638      	mov	r0, r7
   2f67a:	9501      	str	r5, [sp, #4]
   2f67c:	f003 f8e2 	bl	32844 <interface_socket_wait>
   2f680:	4605      	mov	r5, r0
   2f682:	2800      	cmp	r0, #0
   2f684:	d1e0      	bne.n	2f648 <at_interface_read+0x30>
   2f686:	4638      	mov	r0, r7
   2f688:	f003 f950 	bl	3292c <interface_socket_from_handle_get>
   2f68c:	2800      	cmp	r0, #0
   2f68e:	d0db      	beq.n	2f648 <at_interface_read+0x30>
   2f690:	6845      	ldr	r5, [r0, #4]
   2f692:	2d00      	cmp	r5, #0
   2f694:	d0d8      	beq.n	2f648 <at_interface_read+0x30>
   2f696:	f8c0 8004 	str.w	r8, [r0, #4]
   2f69a:	e7d5      	b.n	2f648 <at_interface_read+0x30>
   2f69c:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   2f6a0:	d1ce      	bne.n	2f640 <at_interface_read+0x28>
   2f6a2:	252d      	movs	r5, #45	; 0x2d
   2f6a4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2f6a8:	4628      	mov	r0, r5
   2f6aa:	f7f7 ff67 	bl	2757c <bsd_os_errno_set>
   2f6ae:	4648      	mov	r0, r9
   2f6b0:	b007      	add	sp, #28
   2f6b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f6b6:	2500      	movs	r5, #0
   2f6b8:	69e0      	ldr	r0, [r4, #28]
   2f6ba:	6803      	ldr	r3, [r0, #0]
   2f6bc:	68db      	ldr	r3, [r3, #12]
   2f6be:	4798      	blx	r3
   2f6c0:	3001      	adds	r0, #1
   2f6c2:	d003      	beq.n	2f6cc <at_interface_read+0xb4>
   2f6c4:	6823      	ldr	r3, [r4, #0]
   2f6c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2f6ca:	6023      	str	r3, [r4, #0]
   2f6cc:	2d00      	cmp	r5, #0
   2f6ce:	d1eb      	bne.n	2f6a8 <at_interface_read+0x90>
   2f6d0:	4648      	mov	r0, r9
   2f6d2:	b007      	add	sp, #28
   2f6d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f6d8:	6823      	ldr	r3, [r4, #0]
   2f6da:	69e0      	ldr	r0, [r4, #28]
   2f6dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2f6e0:	6023      	str	r3, [r4, #0]
   2f6e2:	6803      	ldr	r3, [r0, #0]
   2f6e4:	4632      	mov	r2, r6
   2f6e6:	689b      	ldr	r3, [r3, #8]
   2f6e8:	a902      	add	r1, sp, #8
   2f6ea:	4798      	blx	r3
   2f6ec:	f1b0 0900 	subs.w	r9, r0, #0
   2f6f0:	dae1      	bge.n	2f6b6 <at_interface_read+0x9e>
   2f6f2:	69e0      	ldr	r0, [r4, #28]
   2f6f4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2f6f8:	6803      	ldr	r3, [r0, #0]
   2f6fa:	68db      	ldr	r3, [r3, #12]
   2f6fc:	d10a      	bne.n	2f714 <at_interface_read+0xfc>
   2f6fe:	2523      	movs	r5, #35	; 0x23
   2f700:	4798      	blx	r3
   2f702:	3001      	adds	r0, #1
   2f704:	d0ce      	beq.n	2f6a4 <at_interface_read+0x8c>
   2f706:	6823      	ldr	r3, [r4, #0]
   2f708:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2f70c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2f710:	6023      	str	r3, [r4, #0]
   2f712:	e7db      	b.n	2f6cc <at_interface_read+0xb4>
   2f714:	4798      	blx	r3
   2f716:	3001      	adds	r0, #1
   2f718:	d0c9      	beq.n	2f6ae <at_interface_read+0x96>
   2f71a:	6823      	ldr	r3, [r4, #0]
   2f71c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2f720:	6023      	str	r3, [r4, #0]
   2f722:	e7c4      	b.n	2f6ae <at_interface_read+0x96>
   2f724:	69e0      	ldr	r0, [r4, #28]
   2f726:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2f72a:	6803      	ldr	r3, [r0, #0]
   2f72c:	68db      	ldr	r3, [r3, #12]
   2f72e:	d0e7      	beq.n	2f700 <at_interface_read+0xe8>
   2f730:	4798      	blx	r3
   2f732:	3001      	adds	r0, #1
   2f734:	d1c6      	bne.n	2f6c4 <at_interface_read+0xac>
   2f736:	e7b7      	b.n	2f6a8 <at_interface_read+0x90>
   2f738:	2516      	movs	r5, #22
   2f73a:	e7b3      	b.n	2f6a4 <at_interface_read+0x8c>

0002f73c <at_interface_getopt>:
   2f73c:	f003 b964 	b.w	32a08 <interface_socket_getopt>

0002f740 <at_interface_setopt>:
   2f740:	f003 b91c 	b.w	3297c <interface_socket_setopt>

0002f744 <rpc_at_event_handler>:
   2f744:	b570      	push	{r4, r5, r6, lr}
   2f746:	4606      	mov	r6, r0
   2f748:	b084      	sub	sp, #16
   2f74a:	68c0      	ldr	r0, [r0, #12]
   2f74c:	460d      	mov	r5, r1
   2f74e:	f003 f8ed 	bl	3292c <interface_socket_from_handle_get>
   2f752:	4604      	mov	r4, r0
   2f754:	b348      	cbz	r0, 2f7aa <rpc_at_event_handler+0x66>
   2f756:	6803      	ldr	r3, [r0, #0]
   2f758:	b29b      	uxth	r3, r3
   2f75a:	2b01      	cmp	r3, #1
   2f75c:	d01f      	beq.n	2f79e <rpc_at_event_handler+0x5a>
   2f75e:	6803      	ldr	r3, [r0, #0]
   2f760:	b29b      	uxth	r3, r3
   2f762:	2b0d      	cmp	r3, #13
   2f764:	d029      	beq.n	2f7ba <rpc_at_event_handler+0x76>
   2f766:	6803      	ldr	r3, [r0, #0]
   2f768:	b29b      	uxth	r3, r3
   2f76a:	2b02      	cmp	r3, #2
   2f76c:	d02d      	beq.n	2f7ca <rpc_at_event_handler+0x86>
   2f76e:	3d03      	subs	r5, #3
   2f770:	2d01      	cmp	r5, #1
   2f772:	d817      	bhi.n	2f7a4 <rpc_at_event_handler+0x60>
   2f774:	2500      	movs	r5, #0
   2f776:	6873      	ldr	r3, [r6, #4]
   2f778:	6832      	ldr	r2, [r6, #0]
   2f77a:	e9cd 5502 	strd	r5, r5, [sp, #8]
   2f77e:	e9cd 2300 	strd	r2, r3, [sp]
   2f782:	69e0      	ldr	r0, [r4, #28]
   2f784:	4669      	mov	r1, sp
   2f786:	6803      	ldr	r3, [r0, #0]
   2f788:	685b      	ldr	r3, [r3, #4]
   2f78a:	4798      	blx	r3
   2f78c:	3001      	adds	r0, #1
   2f78e:	d019      	beq.n	2f7c4 <rpc_at_event_handler+0x80>
   2f790:	4628      	mov	r0, r5
   2f792:	6823      	ldr	r3, [r4, #0]
   2f794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2f798:	6023      	str	r3, [r4, #0]
   2f79a:	b004      	add	sp, #16
   2f79c:	bd70      	pop	{r4, r5, r6, pc}
   2f79e:	2d02      	cmp	r5, #2
   2f7a0:	d1e5      	bne.n	2f76e <rpc_at_event_handler+0x2a>
   2f7a2:	6005      	str	r5, [r0, #0]
   2f7a4:	2000      	movs	r0, #0
   2f7a6:	b004      	add	sp, #16
   2f7a8:	bd70      	pop	{r4, r5, r6, pc}
   2f7aa:	6830      	ldr	r0, [r6, #0]
   2f7ac:	2800      	cmp	r0, #0
   2f7ae:	d0f9      	beq.n	2f7a4 <rpc_at_event_handler+0x60>
   2f7b0:	f003 f9ea 	bl	32b88 <rpc_at_client_data_free>
   2f7b4:	4620      	mov	r0, r4
   2f7b6:	b004      	add	sp, #16
   2f7b8:	bd70      	pop	{r4, r5, r6, pc}
   2f7ba:	2d02      	cmp	r5, #2
   2f7bc:	d1d7      	bne.n	2f76e <rpc_at_event_handler+0x2a>
   2f7be:	230e      	movs	r3, #14
   2f7c0:	6003      	str	r3, [r0, #0]
   2f7c2:	e7ef      	b.n	2f7a4 <rpc_at_event_handler+0x60>
   2f7c4:	2002      	movs	r0, #2
   2f7c6:	b004      	add	sp, #16
   2f7c8:	bd70      	pop	{r4, r5, r6, pc}
   2f7ca:	6803      	ldr	r3, [r0, #0]
   2f7cc:	029b      	lsls	r3, r3, #10
   2f7ce:	d5ce      	bpl.n	2f76e <rpc_at_event_handler+0x2a>
   2f7d0:	2d02      	cmp	r5, #2
   2f7d2:	d1cc      	bne.n	2f76e <rpc_at_event_handler+0x2a>
   2f7d4:	6803      	ldr	r3, [r0, #0]
   2f7d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2f7da:	6003      	str	r3, [r0, #0]
   2f7dc:	6803      	ldr	r3, [r0, #0]
   2f7de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2f7e2:	6003      	str	r3, [r0, #0]
   2f7e4:	e7de      	b.n	2f7a4 <rpc_at_event_handler+0x60>
   2f7e6:	bf00      	nop

0002f7e8 <ok_rsp_parser>:
   2f7e8:	2000      	movs	r0, #0
   2f7ea:	4770      	bx	lr

0002f7ec <pdn_state_get_parser>:
   2f7ec:	2200      	movs	r2, #0
   2f7ee:	b570      	push	{r4, r5, r6, lr}
   2f7f0:	780b      	ldrb	r3, [r1, #0]
   2f7f2:	b084      	sub	sp, #16
   2f7f4:	460e      	mov	r6, r1
   2f7f6:	e9cd 2200 	strd	r2, r2, [sp]
   2f7fa:	e9cd 2202 	strd	r2, r2, [sp, #8]
   2f7fe:	b323      	cbz	r3, 2f84a <pdn_state_get_parser+0x5e>
   2f800:	460c      	mov	r4, r1
   2f802:	2b20      	cmp	r3, #32
   2f804:	460d      	mov	r5, r1
   2f806:	d01b      	beq.n	2f840 <pdn_state_get_parser+0x54>
   2f808:	700b      	strb	r3, [r1, #0]
   2f80a:	3201      	adds	r2, #1
   2f80c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2f810:	18b1      	adds	r1, r6, r2
   2f812:	460d      	mov	r5, r1
   2f814:	2b00      	cmp	r3, #0
   2f816:	d1f4      	bne.n	2f802 <pdn_state_get_parser+0x16>
   2f818:	2200      	movs	r2, #0
   2f81a:	4b0d      	ldr	r3, [pc, #52]	; (2f850 <pdn_state_get_parser+0x64>)
   2f81c:	702a      	strb	r2, [r5, #0]
   2f81e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2f822:	4a0c      	ldr	r2, [pc, #48]	; (2f854 <pdn_state_get_parser+0x68>)
   2f824:	681b      	ldr	r3, [r3, #0]
   2f826:	2110      	movs	r1, #16
   2f828:	4668      	mov	r0, sp
   2f82a:	f005 facf 	bl	34dcc <sniprintf>
   2f82e:	4669      	mov	r1, sp
   2f830:	4630      	mov	r0, r6
   2f832:	f009 fb37 	bl	38ea4 <strstr>
   2f836:	3000      	adds	r0, #0
   2f838:	bf18      	it	ne
   2f83a:	2001      	movne	r0, #1
   2f83c:	b004      	add	sp, #16
   2f83e:	bd70      	pop	{r4, r5, r6, pc}
   2f840:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2f844:	2b00      	cmp	r3, #0
   2f846:	d1dc      	bne.n	2f802 <pdn_state_get_parser+0x16>
   2f848:	e7e6      	b.n	2f818 <pdn_state_get_parser+0x2c>
   2f84a:	460d      	mov	r5, r1
   2f84c:	e7e4      	b.n	2f818 <pdn_state_get_parser+0x2c>
   2f84e:	bf00      	nop
   2f850:	20023cf4 	.word	0x20023cf4
   2f854:	0003a29c 	.word	0x0003a29c

0002f858 <pdn_id_get_parser>:
   2f858:	b570      	push	{r4, r5, r6, lr}
   2f85a:	780b      	ldrb	r3, [r1, #0]
   2f85c:	4606      	mov	r6, r0
   2f85e:	b313      	cbz	r3, 2f8a6 <pdn_id_get_parser+0x4e>
   2f860:	4608      	mov	r0, r1
   2f862:	2400      	movs	r4, #0
   2f864:	460a      	mov	r2, r1
   2f866:	2b20      	cmp	r3, #32
   2f868:	4615      	mov	r5, r2
   2f86a:	d017      	beq.n	2f89c <pdn_id_get_parser+0x44>
   2f86c:	7013      	strb	r3, [r2, #0]
   2f86e:	3401      	adds	r4, #1
   2f870:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2f874:	190a      	adds	r2, r1, r4
   2f876:	4615      	mov	r5, r2
   2f878:	2b00      	cmp	r3, #0
   2f87a:	d1f4      	bne.n	2f866 <pdn_id_get_parser+0xe>
   2f87c:	2300      	movs	r3, #0
   2f87e:	4608      	mov	r0, r1
   2f880:	702b      	strb	r3, [r5, #0]
   2f882:	213a      	movs	r1, #58	; 0x3a
   2f884:	f009 faad 	bl	38de2 <strchr>
   2f888:	b130      	cbz	r0, 2f898 <pdn_id_get_parser+0x40>
   2f88a:	3001      	adds	r0, #1
   2f88c:	f009 f937 	bl	38afe <atoi>
   2f890:	4b06      	ldr	r3, [pc, #24]	; (2f8ac <pdn_id_get_parser+0x54>)
   2f892:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   2f896:	6058      	str	r0, [r3, #4]
   2f898:	2000      	movs	r0, #0
   2f89a:	bd70      	pop	{r4, r5, r6, pc}
   2f89c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2f8a0:	2b00      	cmp	r3, #0
   2f8a2:	d1e0      	bne.n	2f866 <pdn_id_get_parser+0xe>
   2f8a4:	e7ea      	b.n	2f87c <pdn_id_get_parser+0x24>
   2f8a6:	460d      	mov	r5, r1
   2f8a8:	e7e8      	b.n	2f87c <pdn_id_get_parser+0x24>
   2f8aa:	bf00      	nop
   2f8ac:	20023cf4 	.word	0x20023cf4

0002f8b0 <context_create_parser>:
   2f8b0:	b570      	push	{r4, r5, r6, lr}
   2f8b2:	780b      	ldrb	r3, [r1, #0]
   2f8b4:	4606      	mov	r6, r0
   2f8b6:	b313      	cbz	r3, 2f8fe <context_create_parser+0x4e>
   2f8b8:	4608      	mov	r0, r1
   2f8ba:	2400      	movs	r4, #0
   2f8bc:	460a      	mov	r2, r1
   2f8be:	2b20      	cmp	r3, #32
   2f8c0:	4615      	mov	r5, r2
   2f8c2:	d017      	beq.n	2f8f4 <context_create_parser+0x44>
   2f8c4:	7013      	strb	r3, [r2, #0]
   2f8c6:	3401      	adds	r4, #1
   2f8c8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2f8cc:	190a      	adds	r2, r1, r4
   2f8ce:	4615      	mov	r5, r2
   2f8d0:	2b00      	cmp	r3, #0
   2f8d2:	d1f4      	bne.n	2f8be <context_create_parser+0xe>
   2f8d4:	2300      	movs	r3, #0
   2f8d6:	4608      	mov	r0, r1
   2f8d8:	702b      	strb	r3, [r5, #0]
   2f8da:	213a      	movs	r1, #58	; 0x3a
   2f8dc:	f009 fa81 	bl	38de2 <strchr>
   2f8e0:	b130      	cbz	r0, 2f8f0 <context_create_parser+0x40>
   2f8e2:	4b08      	ldr	r3, [pc, #32]	; (2f904 <context_create_parser+0x54>)
   2f8e4:	3001      	adds	r0, #1
   2f8e6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   2f8ea:	f009 f908 	bl	38afe <atoi>
   2f8ee:	6020      	str	r0, [r4, #0]
   2f8f0:	2000      	movs	r0, #0
   2f8f2:	bd70      	pop	{r4, r5, r6, pc}
   2f8f4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2f8f8:	2b00      	cmp	r3, #0
   2f8fa:	d1e0      	bne.n	2f8be <context_create_parser+0xe>
   2f8fc:	e7ea      	b.n	2f8d4 <context_create_parser+0x24>
   2f8fe:	460d      	mov	r5, r1
   2f900:	e7e8      	b.n	2f8d4 <context_create_parser+0x24>
   2f902:	bf00      	nop
   2f904:	20023cf4 	.word	0x20023cf4

0002f908 <pdn_interface_init>:
   2f908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f90c:	b510      	push	{r4, lr}
   2f90e:	4c0b      	ldr	r4, [pc, #44]	; (2f93c <pdn_interface_init+0x34>)
   2f910:	2228      	movs	r2, #40	; 0x28
   2f912:	2100      	movs	r1, #0
   2f914:	480a      	ldr	r0, [pc, #40]	; (2f940 <pdn_interface_init+0x38>)
   2f916:	6023      	str	r3, [r4, #0]
   2f918:	f009 f931 	bl	38b7e <memset>
   2f91c:	f240 2201 	movw	r2, #513	; 0x201
   2f920:	2102      	movs	r1, #2
   2f922:	2066      	movs	r0, #102	; 0x66
   2f924:	f7ff fdac 	bl	2f480 <at_interface_open>
   2f928:	2800      	cmp	r0, #0
   2f92a:	6020      	str	r0, [r4, #0]
   2f92c:	db04      	blt.n	2f938 <pdn_interface_init+0x30>
   2f92e:	2201      	movs	r2, #1
   2f930:	4b04      	ldr	r3, [pc, #16]	; (2f944 <pdn_interface_init+0x3c>)
   2f932:	2000      	movs	r0, #0
   2f934:	701a      	strb	r2, [r3, #0]
   2f936:	bd10      	pop	{r4, pc}
   2f938:	2003      	movs	r0, #3
   2f93a:	bd10      	pop	{r4, pc}
   2f93c:	20023bf0 	.word	0x20023bf0
   2f940:	20023cf4 	.word	0x20023cf4
   2f944:	2002c6e4 	.word	0x2002c6e4

0002f948 <pdn_interface_open>:
   2f948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f94c:	4b68      	ldr	r3, [pc, #416]	; (2faf0 <pdn_interface_open+0x1a8>)
   2f94e:	b083      	sub	sp, #12
   2f950:	781b      	ldrb	r3, [r3, #0]
   2f952:	2b00      	cmp	r3, #0
   2f954:	f000 80c5 	beq.w	2fae2 <pdn_interface_open+0x19a>
   2f958:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2f95c:	f040 80b0 	bne.w	2fac0 <pdn_interface_open+0x178>
   2f960:	4c64      	ldr	r4, [pc, #400]	; (2faf4 <pdn_interface_open+0x1ac>)
   2f962:	6825      	ldr	r5, [r4, #0]
   2f964:	b34d      	cbz	r5, 2f9ba <pdn_interface_open+0x72>
   2f966:	6863      	ldr	r3, [r4, #4]
   2f968:	2b00      	cmp	r3, #0
   2f96a:	f000 809b 	beq.w	2faa4 <pdn_interface_open+0x15c>
   2f96e:	68a3      	ldr	r3, [r4, #8]
   2f970:	2b00      	cmp	r3, #0
   2f972:	f000 8099 	beq.w	2faa8 <pdn_interface_open+0x160>
   2f976:	68e3      	ldr	r3, [r4, #12]
   2f978:	2b00      	cmp	r3, #0
   2f97a:	f000 8097 	beq.w	2faac <pdn_interface_open+0x164>
   2f97e:	6923      	ldr	r3, [r4, #16]
   2f980:	2b00      	cmp	r3, #0
   2f982:	f000 8095 	beq.w	2fab0 <pdn_interface_open+0x168>
   2f986:	6963      	ldr	r3, [r4, #20]
   2f988:	2b00      	cmp	r3, #0
   2f98a:	f000 8093 	beq.w	2fab4 <pdn_interface_open+0x16c>
   2f98e:	69a3      	ldr	r3, [r4, #24]
   2f990:	2b00      	cmp	r3, #0
   2f992:	f000 8091 	beq.w	2fab8 <pdn_interface_open+0x170>
   2f996:	69e3      	ldr	r3, [r4, #28]
   2f998:	2b00      	cmp	r3, #0
   2f99a:	f000 808f 	beq.w	2fabc <pdn_interface_open+0x174>
   2f99e:	6a23      	ldr	r3, [r4, #32]
   2f9a0:	b153      	cbz	r3, 2f9b8 <pdn_interface_open+0x70>
   2f9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2f9a4:	2509      	movs	r5, #9
   2f9a6:	b143      	cbz	r3, 2f9ba <pdn_interface_open+0x72>
   2f9a8:	200c      	movs	r0, #12
   2f9aa:	f7f7 fde7 	bl	2757c <bsd_os_errno_set>
   2f9ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f9b2:	b003      	add	sp, #12
   2f9b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f9b8:	2508      	movs	r5, #8
   2f9ba:	2020      	movs	r0, #32
   2f9bc:	f002 faae 	bl	31f1c <nrf_malloc>
   2f9c0:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   2f9c4:	2800      	cmp	r0, #0
   2f9c6:	d0ef      	beq.n	2f9a8 <pdn_interface_open+0x60>
   2f9c8:	2220      	movs	r2, #32
   2f9ca:	2100      	movs	r1, #0
   2f9cc:	f009 f8d7 	bl	38b7e <memset>
   2f9d0:	2101      	movs	r1, #1
   2f9d2:	2003      	movs	r0, #3
   2f9d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2f9d8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   2f9dc:	4b46      	ldr	r3, [pc, #280]	; (2faf8 <pdn_interface_open+0x1b0>)
   2f9de:	6091      	str	r1, [r2, #8]
   2f9e0:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
   2f9e4:	4a45      	ldr	r2, [pc, #276]	; (2fafc <pdn_interface_open+0x1b4>)
   2f9e6:	60c8      	str	r0, [r1, #12]
   2f9e8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   2f9ec:	f44f 7180 	mov.w	r1, #256	; 0x100
   2f9f0:	6047      	str	r7, [r0, #4]
   2f9f2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 2fb0c <pdn_interface_open+0x1c4>
   2f9f6:	4842      	ldr	r0, [pc, #264]	; (2fb00 <pdn_interface_open+0x1b8>)
   2f9f8:	f005 f9e8 	bl	34dcc <sniprintf>
   2f9fc:	4840      	ldr	r0, [pc, #256]	; (2fb00 <pdn_interface_open+0x1b8>)
   2f9fe:	f8d8 9000 	ldr.w	r9, [r8]
   2fa02:	2600      	movs	r6, #0
   2fa04:	f7ed fb34 	bl	1d070 <strlen>
   2fa08:	4633      	mov	r3, r6
   2fa0a:	4602      	mov	r2, r0
   2fa0c:	493c      	ldr	r1, [pc, #240]	; (2fb00 <pdn_interface_open+0x1b8>)
   2fa0e:	4648      	mov	r0, r9
   2fa10:	9601      	str	r6, [sp, #4]
   2fa12:	9600      	str	r6, [sp, #0]
   2fa14:	f7ff fcac 	bl	2f370 <at_interface_write>
   2fa18:	4681      	mov	r9, r0
   2fa1a:	4839      	ldr	r0, [pc, #228]	; (2fb00 <pdn_interface_open+0x1b8>)
   2fa1c:	f7ed fb28 	bl	1d070 <strlen>
   2fa20:	4548      	cmp	r0, r9
   2fa22:	d153      	bne.n	2facc <pdn_interface_open+0x184>
   2fa24:	4633      	mov	r3, r6
   2fa26:	e9cd 6600 	strd	r6, r6, [sp]
   2fa2a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2fa2e:	4934      	ldr	r1, [pc, #208]	; (2fb00 <pdn_interface_open+0x1b8>)
   2fa30:	f8d8 0000 	ldr.w	r0, [r8]
   2fa34:	f7ff fdf0 	bl	2f618 <at_interface_read>
   2fa38:	4606      	mov	r6, r0
   2fa3a:	4832      	ldr	r0, [pc, #200]	; (2fb04 <pdn_interface_open+0x1bc>)
   2fa3c:	f7ed fb18 	bl	1d070 <strlen>
   2fa40:	4286      	cmp	r6, r0
   2fa42:	db15      	blt.n	2fa70 <pdn_interface_open+0x128>
   2fa44:	4602      	mov	r2, r0
   2fa46:	492e      	ldr	r1, [pc, #184]	; (2fb00 <pdn_interface_open+0x1b8>)
   2fa48:	482e      	ldr	r0, [pc, #184]	; (2fb04 <pdn_interface_open+0x1bc>)
   2fa4a:	f009 f9df 	bl	38e0c <strncmp>
   2fa4e:	b978      	cbnz	r0, 2fa70 <pdn_interface_open+0x128>
   2fa50:	492b      	ldr	r1, [pc, #172]	; (2fb00 <pdn_interface_open+0x1b8>)
   2fa52:	4628      	mov	r0, r5
   2fa54:	f7ff ff2c 	bl	2f8b0 <context_create_parser>
   2fa58:	b9b0      	cbnz	r0, 2fa88 <pdn_interface_open+0x140>
   2fa5a:	2202      	movs	r2, #2
   2fa5c:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   2fa60:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   2fa64:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   2fa68:	609a      	str	r2, [r3, #8]
   2fa6a:	b003      	add	sp, #12
   2fa6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2fa70:	4825      	ldr	r0, [pc, #148]	; (2fb08 <pdn_interface_open+0x1c0>)
   2fa72:	f7ed fafd 	bl	1d070 <strlen>
   2fa76:	4922      	ldr	r1, [pc, #136]	; (2fb00 <pdn_interface_open+0x1b8>)
   2fa78:	4602      	mov	r2, r0
   2fa7a:	4823      	ldr	r0, [pc, #140]	; (2fb08 <pdn_interface_open+0x1c0>)
   2fa7c:	f009 f9c6 	bl	38e0c <strncmp>
   2fa80:	b960      	cbnz	r0, 2fa9c <pdn_interface_open+0x154>
   2fa82:	2008      	movs	r0, #8
   2fa84:	f7f7 fd7a 	bl	2757c <bsd_os_errno_set>
   2fa88:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   2fa8c:	f002 fa50 	bl	31f30 <nrf_free>
   2fa90:	2300      	movs	r3, #0
   2fa92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fa96:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   2fa9a:	e78a      	b.n	2f9b2 <pdn_interface_open+0x6a>
   2fa9c:	2005      	movs	r0, #5
   2fa9e:	f7f7 fd6d 	bl	2757c <bsd_os_errno_set>
   2faa2:	e7f1      	b.n	2fa88 <pdn_interface_open+0x140>
   2faa4:	2501      	movs	r5, #1
   2faa6:	e788      	b.n	2f9ba <pdn_interface_open+0x72>
   2faa8:	2502      	movs	r5, #2
   2faaa:	e786      	b.n	2f9ba <pdn_interface_open+0x72>
   2faac:	2503      	movs	r5, #3
   2faae:	e784      	b.n	2f9ba <pdn_interface_open+0x72>
   2fab0:	2504      	movs	r5, #4
   2fab2:	e782      	b.n	2f9ba <pdn_interface_open+0x72>
   2fab4:	2505      	movs	r5, #5
   2fab6:	e780      	b.n	2f9ba <pdn_interface_open+0x72>
   2fab8:	2506      	movs	r5, #6
   2faba:	e77e      	b.n	2f9ba <pdn_interface_open+0x72>
   2fabc:	2507      	movs	r5, #7
   2fabe:	e77c      	b.n	2f9ba <pdn_interface_open+0x72>
   2fac0:	2029      	movs	r0, #41	; 0x29
   2fac2:	f7f7 fd5b 	bl	2757c <bsd_os_errno_set>
   2fac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2faca:	e772      	b.n	2f9b2 <pdn_interface_open+0x6a>
   2facc:	2005      	movs	r0, #5
   2face:	f7f7 fd55 	bl	2757c <bsd_os_errno_set>
   2fad2:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   2fad6:	f002 fa2b 	bl	31f30 <nrf_free>
   2fada:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   2fade:	4638      	mov	r0, r7
   2fae0:	e767      	b.n	2f9b2 <pdn_interface_open+0x6a>
   2fae2:	2070      	movs	r0, #112	; 0x70
   2fae4:	f7f7 fd4a 	bl	2757c <bsd_os_errno_set>
   2fae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2faec:	e761      	b.n	2f9b2 <pdn_interface_open+0x6a>
   2faee:	bf00      	nop
   2faf0:	2002c6e4 	.word	0x2002c6e4
   2faf4:	20023cf4 	.word	0x20023cf4
   2faf8:	0003a278 	.word	0x0003a278
   2fafc:	0003a284 	.word	0x0003a284
   2fb00:	20023bf4 	.word	0x20023bf4
   2fb04:	0003a288 	.word	0x0003a288
   2fb08:	0003a294 	.word	0x0003a294
   2fb0c:	20023bf0 	.word	0x20023bf0

0002fb10 <pdn_interface_connect>:
   2fb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fb14:	b085      	sub	sp, #20
   2fb16:	2900      	cmp	r1, #0
   2fb18:	f000 81f3 	beq.w	2ff02 <pdn_interface_connect+0x3f2>
   2fb1c:	2a64      	cmp	r2, #100	; 0x64
   2fb1e:	4690      	mov	r8, r2
   2fb20:	f200 81ef 	bhi.w	2ff02 <pdn_interface_connect+0x3f2>
   2fb24:	0c03      	lsrs	r3, r0, #16
   2fb26:	4ab1      	ldr	r2, [pc, #708]	; (2fdec <pdn_interface_connect+0x2dc>)
   2fb28:	041b      	lsls	r3, r3, #16
   2fb2a:	4293      	cmp	r3, r2
   2fb2c:	f040 8154 	bne.w	2fdd8 <pdn_interface_connect+0x2c8>
   2fb30:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   2fb34:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   2fb38:	2c09      	cmp	r4, #9
   2fb3a:	f300 814d 	bgt.w	2fdd8 <pdn_interface_connect+0x2c8>
   2fb3e:	4fac      	ldr	r7, [pc, #688]	; (2fdf0 <pdn_interface_connect+0x2e0>)
   2fb40:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2fb44:	2b00      	cmp	r3, #0
   2fb46:	f000 8147 	beq.w	2fdd8 <pdn_interface_connect+0x2c8>
   2fb4a:	689a      	ldr	r2, [r3, #8]
   2fb4c:	2a00      	cmp	r2, #0
   2fb4e:	f000 8143 	beq.w	2fdd8 <pdn_interface_connect+0x2c8>
   2fb52:	689b      	ldr	r3, [r3, #8]
   2fb54:	2b02      	cmp	r3, #2
   2fb56:	f040 813f 	bne.w	2fdd8 <pdn_interface_connect+0x2c8>
   2fb5a:	4da6      	ldr	r5, [pc, #664]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fb5c:	4ba6      	ldr	r3, [pc, #664]	; (2fdf8 <pdn_interface_connect+0x2e8>)
   2fb5e:	4aa7      	ldr	r2, [pc, #668]	; (2fdfc <pdn_interface_connect+0x2ec>)
   2fb60:	4689      	mov	r9, r1
   2fb62:	4628      	mov	r0, r5
   2fb64:	f44f 7180 	mov.w	r1, #256	; 0x100
   2fb68:	f005 f930 	bl	34dcc <sniprintf>
   2fb6c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2fb70:	4606      	mov	r6, r0
   2fb72:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2fb76:	681b      	ldr	r3, [r3, #0]
   2fb78:	4aa1      	ldr	r2, [pc, #644]	; (2fe00 <pdn_interface_connect+0x2f0>)
   2fb7a:	1828      	adds	r0, r5, r0
   2fb7c:	f005 f926 	bl	34dcc <sniprintf>
   2fb80:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2fb84:	4406      	add	r6, r0
   2fb86:	68db      	ldr	r3, [r3, #12]
   2fb88:	f003 0203 	and.w	r2, r3, #3
   2fb8c:	2a03      	cmp	r2, #3
   2fb8e:	f000 811a 	beq.w	2fdc6 <pdn_interface_connect+0x2b6>
   2fb92:	079b      	lsls	r3, r3, #30
   2fb94:	bf4c      	ite	mi
   2fb96:	4b9b      	ldrmi	r3, [pc, #620]	; (2fe04 <pdn_interface_connect+0x2f4>)
   2fb98:	4b9b      	ldrpl	r3, [pc, #620]	; (2fe08 <pdn_interface_connect+0x2f8>)
   2fb9a:	19a8      	adds	r0, r5, r6
   2fb9c:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   2fba0:	4a9a      	ldr	r2, [pc, #616]	; (2fe0c <pdn_interface_connect+0x2fc>)
   2fba2:	f005 f913 	bl	34dcc <sniprintf>
   2fba6:	1833      	adds	r3, r6, r0
   2fba8:	eb08 0203 	add.w	r2, r8, r3
   2fbac:	2afd      	cmp	r2, #253	; 0xfd
   2fbae:	f300 81a5 	bgt.w	2fefc <pdn_interface_connect+0x3ec>
   2fbb2:	2122      	movs	r1, #34	; 0x22
   2fbb4:	1c5e      	adds	r6, r3, #1
   2fbb6:	54e9      	strb	r1, [r5, r3]
   2fbb8:	4642      	mov	r2, r8
   2fbba:	19a8      	adds	r0, r5, r6
   2fbbc:	4649      	mov	r1, r9
   2fbbe:	f009 f937 	bl	38e30 <strncpy>
   2fbc2:	eb08 0306 	add.w	r3, r8, r6
   2fbc6:	18ea      	adds	r2, r5, r3
   2fbc8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   2fbcc:	b902      	cbnz	r2, 2fbd0 <pdn_interface_connect+0xc0>
   2fbce:	3b01      	subs	r3, #1
   2fbd0:	2600      	movs	r6, #0
   2fbd2:	2122      	movs	r1, #34	; 0x22
   2fbd4:	18ea      	adds	r2, r5, r3
   2fbd6:	f8df a254 	ldr.w	sl, [pc, #596]	; 2fe2c <pdn_interface_connect+0x31c>
   2fbda:	54e9      	strb	r1, [r5, r3]
   2fbdc:	4885      	ldr	r0, [pc, #532]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fbde:	7056      	strb	r6, [r2, #1]
   2fbe0:	f8da b000 	ldr.w	fp, [sl]
   2fbe4:	f7ed fa44 	bl	1d070 <strlen>
   2fbe8:	4633      	mov	r3, r6
   2fbea:	4602      	mov	r2, r0
   2fbec:	4981      	ldr	r1, [pc, #516]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fbee:	4658      	mov	r0, fp
   2fbf0:	9601      	str	r6, [sp, #4]
   2fbf2:	9600      	str	r6, [sp, #0]
   2fbf4:	f7ff fbbc 	bl	2f370 <at_interface_write>
   2fbf8:	4683      	mov	fp, r0
   2fbfa:	487e      	ldr	r0, [pc, #504]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fbfc:	f7ed fa38 	bl	1d070 <strlen>
   2fc00:	4558      	cmp	r0, fp
   2fc02:	d008      	beq.n	2fc16 <pdn_interface_connect+0x106>
   2fc04:	2005      	movs	r0, #5
   2fc06:	f7f7 fcb9 	bl	2757c <bsd_os_errno_set>
   2fc0a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2fc0e:	4658      	mov	r0, fp
   2fc10:	b005      	add	sp, #20
   2fc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc16:	4633      	mov	r3, r6
   2fc18:	e9cd 6600 	strd	r6, r6, [sp]
   2fc1c:	f44f 7280 	mov.w	r2, #256	; 0x100
   2fc20:	4974      	ldr	r1, [pc, #464]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fc22:	f8da 0000 	ldr.w	r0, [sl]
   2fc26:	f7ff fcf7 	bl	2f618 <at_interface_read>
   2fc2a:	4606      	mov	r6, r0
   2fc2c:	4878      	ldr	r0, [pc, #480]	; (2fe10 <pdn_interface_connect+0x300>)
   2fc2e:	f7ed fa1f 	bl	1d070 <strlen>
   2fc32:	4286      	cmp	r6, r0
   2fc34:	da0f      	bge.n	2fc56 <pdn_interface_connect+0x146>
   2fc36:	4877      	ldr	r0, [pc, #476]	; (2fe14 <pdn_interface_connect+0x304>)
   2fc38:	f7ed fa1a 	bl	1d070 <strlen>
   2fc3c:	496d      	ldr	r1, [pc, #436]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fc3e:	4602      	mov	r2, r0
   2fc40:	4874      	ldr	r0, [pc, #464]	; (2fe14 <pdn_interface_connect+0x304>)
   2fc42:	f009 f8e3 	bl	38e0c <strncmp>
   2fc46:	2800      	cmp	r0, #0
   2fc48:	d1dc      	bne.n	2fc04 <pdn_interface_connect+0xf4>
   2fc4a:	2008      	movs	r0, #8
   2fc4c:	f7f7 fc96 	bl	2757c <bsd_os_errno_set>
   2fc50:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2fc54:	e7db      	b.n	2fc0e <pdn_interface_connect+0xfe>
   2fc56:	4602      	mov	r2, r0
   2fc58:	4966      	ldr	r1, [pc, #408]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fc5a:	486d      	ldr	r0, [pc, #436]	; (2fe10 <pdn_interface_connect+0x300>)
   2fc5c:	f009 f8d6 	bl	38e0c <strncmp>
   2fc60:	2800      	cmp	r0, #0
   2fc62:	d1e8      	bne.n	2fc36 <pdn_interface_connect+0x126>
   2fc64:	4963      	ldr	r1, [pc, #396]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fc66:	4620      	mov	r0, r4
   2fc68:	f7ff fdbe 	bl	2f7e8 <ok_rsp_parser>
   2fc6c:	4683      	mov	fp, r0
   2fc6e:	2800      	cmp	r0, #0
   2fc70:	d1cd      	bne.n	2fc0e <pdn_interface_connect+0xfe>
   2fc72:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2fc76:	7c1b      	ldrb	r3, [r3, #16]
   2fc78:	2b00      	cmp	r3, #0
   2fc7a:	f040 80d9 	bne.w	2fe30 <pdn_interface_connect+0x320>
   2fc7e:	4b66      	ldr	r3, [pc, #408]	; (2fe18 <pdn_interface_connect+0x308>)
   2fc80:	4a5e      	ldr	r2, [pc, #376]	; (2fdfc <pdn_interface_connect+0x2ec>)
   2fc82:	f44f 7180 	mov.w	r1, #256	; 0x100
   2fc86:	485b      	ldr	r0, [pc, #364]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fc88:	f005 f8a0 	bl	34dcc <sniprintf>
   2fc8c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2fc90:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2fc94:	4a61      	ldr	r2, [pc, #388]	; (2fe1c <pdn_interface_connect+0x30c>)
   2fc96:	681b      	ldr	r3, [r3, #0]
   2fc98:	4428      	add	r0, r5
   2fc9a:	f005 f897 	bl	34dcc <sniprintf>
   2fc9e:	f8da 3000 	ldr.w	r3, [sl]
   2fca2:	4854      	ldr	r0, [pc, #336]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fca4:	2600      	movs	r6, #0
   2fca6:	9303      	str	r3, [sp, #12]
   2fca8:	f7ed f9e2 	bl	1d070 <strlen>
   2fcac:	9b03      	ldr	r3, [sp, #12]
   2fcae:	4602      	mov	r2, r0
   2fcb0:	4950      	ldr	r1, [pc, #320]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fcb2:	4618      	mov	r0, r3
   2fcb4:	9601      	str	r6, [sp, #4]
   2fcb6:	4633      	mov	r3, r6
   2fcb8:	9600      	str	r6, [sp, #0]
   2fcba:	f7ff fb59 	bl	2f370 <at_interface_write>
   2fcbe:	9003      	str	r0, [sp, #12]
   2fcc0:	484c      	ldr	r0, [pc, #304]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fcc2:	f7ed f9d5 	bl	1d070 <strlen>
   2fcc6:	9b03      	ldr	r3, [sp, #12]
   2fcc8:	4298      	cmp	r0, r3
   2fcca:	d19b      	bne.n	2fc04 <pdn_interface_connect+0xf4>
   2fccc:	4633      	mov	r3, r6
   2fcce:	e9cd 6600 	strd	r6, r6, [sp]
   2fcd2:	f44f 7280 	mov.w	r2, #256	; 0x100
   2fcd6:	4947      	ldr	r1, [pc, #284]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fcd8:	f8da 0000 	ldr.w	r0, [sl]
   2fcdc:	f7ff fc9c 	bl	2f618 <at_interface_read>
   2fce0:	4606      	mov	r6, r0
   2fce2:	484b      	ldr	r0, [pc, #300]	; (2fe10 <pdn_interface_connect+0x300>)
   2fce4:	f7ed f9c4 	bl	1d070 <strlen>
   2fce8:	4286      	cmp	r6, r0
   2fcea:	dba4      	blt.n	2fc36 <pdn_interface_connect+0x126>
   2fcec:	4602      	mov	r2, r0
   2fcee:	4941      	ldr	r1, [pc, #260]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fcf0:	4847      	ldr	r0, [pc, #284]	; (2fe10 <pdn_interface_connect+0x300>)
   2fcf2:	f009 f88b 	bl	38e0c <strncmp>
   2fcf6:	4606      	mov	r6, r0
   2fcf8:	2800      	cmp	r0, #0
   2fcfa:	d19c      	bne.n	2fc36 <pdn_interface_connect+0x126>
   2fcfc:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   2fd00:	f108 0320 	add.w	r3, r8, #32
   2fd04:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   2fd08:	4413      	add	r3, r2
   2fd0a:	4419      	add	r1, r3
   2fd0c:	f002 f91c 	bl	31f48 <nrf_realloc>
   2fd10:	2800      	cmp	r0, #0
   2fd12:	f000 80fc 	beq.w	2ff0e <pdn_interface_connect+0x3fe>
   2fd16:	2303      	movs	r3, #3
   2fd18:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   2fd1c:	6083      	str	r3, [r0, #8]
   2fd1e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2fd22:	4649      	mov	r1, r9
   2fd24:	f8c3 801c 	str.w	r8, [r3, #28]
   2fd28:	f857 c024 	ldr.w	ip, [r7, r4, lsl #2]
   2fd2c:	4642      	mov	r2, r8
   2fd2e:	e9dc 0305 	ldrd	r0, r3, [ip, #20]
   2fd32:	4418      	add	r0, r3
   2fd34:	4603      	mov	r3, r0
   2fd36:	3320      	adds	r3, #32
   2fd38:	eb0c 0003 	add.w	r0, ip, r3
   2fd3c:	f008 feff 	bl	38b3e <memcpy>
   2fd40:	4b37      	ldr	r3, [pc, #220]	; (2fe20 <pdn_interface_connect+0x310>)
   2fd42:	4a2e      	ldr	r2, [pc, #184]	; (2fdfc <pdn_interface_connect+0x2ec>)
   2fd44:	f44f 7180 	mov.w	r1, #256	; 0x100
   2fd48:	482a      	ldr	r0, [pc, #168]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fd4a:	f005 f83f 	bl	34dcc <sniprintf>
   2fd4e:	4601      	mov	r1, r0
   2fd50:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2fd54:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   2fd58:	681b      	ldr	r3, [r3, #0]
   2fd5a:	4a30      	ldr	r2, [pc, #192]	; (2fe1c <pdn_interface_connect+0x30c>)
   2fd5c:	1828      	adds	r0, r5, r0
   2fd5e:	f005 f835 	bl	34dcc <sniprintf>
   2fd62:	4824      	ldr	r0, [pc, #144]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fd64:	f8da 5000 	ldr.w	r5, [sl]
   2fd68:	f7ed f982 	bl	1d070 <strlen>
   2fd6c:	4633      	mov	r3, r6
   2fd6e:	4602      	mov	r2, r0
   2fd70:	4920      	ldr	r1, [pc, #128]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fd72:	4628      	mov	r0, r5
   2fd74:	9601      	str	r6, [sp, #4]
   2fd76:	9600      	str	r6, [sp, #0]
   2fd78:	f7ff fafa 	bl	2f370 <at_interface_write>
   2fd7c:	4605      	mov	r5, r0
   2fd7e:	481d      	ldr	r0, [pc, #116]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fd80:	f7ed f976 	bl	1d070 <strlen>
   2fd84:	42a8      	cmp	r0, r5
   2fd86:	f040 80d2 	bne.w	2ff2e <pdn_interface_connect+0x41e>
   2fd8a:	4633      	mov	r3, r6
   2fd8c:	f44f 7280 	mov.w	r2, #256	; 0x100
   2fd90:	4918      	ldr	r1, [pc, #96]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fd92:	f8da 0000 	ldr.w	r0, [sl]
   2fd96:	e9cd 6600 	strd	r6, r6, [sp]
   2fd9a:	f7ff fc3d 	bl	2f618 <at_interface_read>
   2fd9e:	4605      	mov	r5, r0
   2fda0:	4820      	ldr	r0, [pc, #128]	; (2fe24 <pdn_interface_connect+0x314>)
   2fda2:	f7ed f965 	bl	1d070 <strlen>
   2fda6:	4285      	cmp	r5, r0
   2fda8:	f2c0 80b4 	blt.w	2ff14 <pdn_interface_connect+0x404>
   2fdac:	4602      	mov	r2, r0
   2fdae:	4911      	ldr	r1, [pc, #68]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fdb0:	481c      	ldr	r0, [pc, #112]	; (2fe24 <pdn_interface_connect+0x314>)
   2fdb2:	f009 f82b 	bl	38e0c <strncmp>
   2fdb6:	2800      	cmp	r0, #0
   2fdb8:	f040 80ac 	bne.w	2ff14 <pdn_interface_connect+0x404>
   2fdbc:	4620      	mov	r0, r4
   2fdbe:	490d      	ldr	r1, [pc, #52]	; (2fdf4 <pdn_interface_connect+0x2e4>)
   2fdc0:	f7ff fd4a 	bl	2f858 <pdn_id_get_parser>
   2fdc4:	e723      	b.n	2fc0e <pdn_interface_connect+0xfe>
   2fdc6:	4b18      	ldr	r3, [pc, #96]	; (2fe28 <pdn_interface_connect+0x318>)
   2fdc8:	4a10      	ldr	r2, [pc, #64]	; (2fe0c <pdn_interface_connect+0x2fc>)
   2fdca:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   2fdce:	19a8      	adds	r0, r5, r6
   2fdd0:	f004 fffc 	bl	34dcc <sniprintf>
   2fdd4:	1833      	adds	r3, r6, r0
   2fdd6:	e6e7      	b.n	2fba8 <pdn_interface_connect+0x98>
   2fdd8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2fddc:	2009      	movs	r0, #9
   2fdde:	f7f7 fbcd 	bl	2757c <bsd_os_errno_set>
   2fde2:	4658      	mov	r0, fp
   2fde4:	b005      	add	sp, #20
   2fde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fdea:	bf00      	nop
   2fdec:	789a0000 	.word	0x789a0000
   2fdf0:	20023cf4 	.word	0x20023cf4
   2fdf4:	20023bf4 	.word	0x20023bf4
   2fdf8:	0003a1ec 	.word	0x0003a1ec
   2fdfc:	0003a284 	.word	0x0003a284
   2fe00:	0003a1f8 	.word	0x0003a1f8
   2fe04:	0003a20c 	.word	0x0003a20c
   2fe08:	0003a214 	.word	0x0003a214
   2fe0c:	0003a204 	.word	0x0003a204
   2fe10:	0003a218 	.word	0x0003a218
   2fe14:	0003a294 	.word	0x0003a294
   2fe18:	0003a238 	.word	0x0003a238
   2fe1c:	0003a244 	.word	0x0003a244
   2fe20:	0003a248 	.word	0x0003a248
   2fe24:	0003a258 	.word	0x0003a258
   2fe28:	0003a1fc 	.word	0x0003a1fc
   2fe2c:	20023bf0 	.word	0x20023bf0
   2fe30:	4b41      	ldr	r3, [pc, #260]	; (2ff38 <pdn_interface_connect+0x428>)
   2fe32:	4a42      	ldr	r2, [pc, #264]	; (2ff3c <pdn_interface_connect+0x42c>)
   2fe34:	f44f 7180 	mov.w	r1, #256	; 0x100
   2fe38:	4841      	ldr	r0, [pc, #260]	; (2ff40 <pdn_interface_connect+0x430>)
   2fe3a:	f004 ffc7 	bl	34dcc <sniprintf>
   2fe3e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2fe42:	4a40      	ldr	r2, [pc, #256]	; (2ff44 <pdn_interface_connect+0x434>)
   2fe44:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2fe48:	4606      	mov	r6, r0
   2fe4a:	681b      	ldr	r3, [r3, #0]
   2fe4c:	1828      	adds	r0, r5, r0
   2fe4e:	f004 ffbd 	bl	34dcc <sniprintf>
   2fe52:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2fe56:	4406      	add	r6, r0
   2fe58:	7c1b      	ldrb	r3, [r3, #16]
   2fe5a:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   2fe5e:	2b01      	cmp	r3, #1
   2fe60:	bf0c      	ite	eq
   2fe62:	4a39      	ldreq	r2, [pc, #228]	; (2ff48 <pdn_interface_connect+0x438>)
   2fe64:	4a39      	ldrne	r2, [pc, #228]	; (2ff4c <pdn_interface_connect+0x43c>)
   2fe66:	19a8      	adds	r0, r5, r6
   2fe68:	f004 ffb0 	bl	34dcc <sniprintf>
   2fe6c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2fe70:	4406      	add	r6, r0
   2fe72:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   2fe76:	4a36      	ldr	r2, [pc, #216]	; (2ff50 <pdn_interface_connect+0x440>)
   2fe78:	3320      	adds	r3, #32
   2fe7a:	19a8      	adds	r0, r5, r6
   2fe7c:	f004 ffa6 	bl	34dcc <sniprintf>
   2fe80:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2fe84:	4430      	add	r0, r6
   2fe86:	695a      	ldr	r2, [r3, #20]
   2fe88:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2fe8c:	3220      	adds	r2, #32
   2fe8e:	4413      	add	r3, r2
   2fe90:	4428      	add	r0, r5
   2fe92:	4a30      	ldr	r2, [pc, #192]	; (2ff54 <pdn_interface_connect+0x444>)
   2fe94:	f004 ff9a 	bl	34dcc <sniprintf>
   2fe98:	f8da 3000 	ldr.w	r3, [sl]
   2fe9c:	4828      	ldr	r0, [pc, #160]	; (2ff40 <pdn_interface_connect+0x430>)
   2fe9e:	2600      	movs	r6, #0
   2fea0:	9303      	str	r3, [sp, #12]
   2fea2:	f7ed f8e5 	bl	1d070 <strlen>
   2fea6:	9b03      	ldr	r3, [sp, #12]
   2fea8:	4602      	mov	r2, r0
   2feaa:	4925      	ldr	r1, [pc, #148]	; (2ff40 <pdn_interface_connect+0x430>)
   2feac:	4618      	mov	r0, r3
   2feae:	9601      	str	r6, [sp, #4]
   2feb0:	4633      	mov	r3, r6
   2feb2:	9600      	str	r6, [sp, #0]
   2feb4:	f7ff fa5c 	bl	2f370 <at_interface_write>
   2feb8:	9003      	str	r0, [sp, #12]
   2feba:	4821      	ldr	r0, [pc, #132]	; (2ff40 <pdn_interface_connect+0x430>)
   2febc:	f7ed f8d8 	bl	1d070 <strlen>
   2fec0:	9b03      	ldr	r3, [sp, #12]
   2fec2:	4298      	cmp	r0, r3
   2fec4:	f47f ae9e 	bne.w	2fc04 <pdn_interface_connect+0xf4>
   2fec8:	4633      	mov	r3, r6
   2feca:	e9cd 6600 	strd	r6, r6, [sp]
   2fece:	f44f 7280 	mov.w	r2, #256	; 0x100
   2fed2:	491b      	ldr	r1, [pc, #108]	; (2ff40 <pdn_interface_connect+0x430>)
   2fed4:	f8da 0000 	ldr.w	r0, [sl]
   2fed8:	f7ff fb9e 	bl	2f618 <at_interface_read>
   2fedc:	4606      	mov	r6, r0
   2fede:	481e      	ldr	r0, [pc, #120]	; (2ff58 <pdn_interface_connect+0x448>)
   2fee0:	f7ed f8c6 	bl	1d070 <strlen>
   2fee4:	4286      	cmp	r6, r0
   2fee6:	f6ff aea6 	blt.w	2fc36 <pdn_interface_connect+0x126>
   2feea:	4602      	mov	r2, r0
   2feec:	4914      	ldr	r1, [pc, #80]	; (2ff40 <pdn_interface_connect+0x430>)
   2feee:	481a      	ldr	r0, [pc, #104]	; (2ff58 <pdn_interface_connect+0x448>)
   2fef0:	f008 ff8c 	bl	38e0c <strncmp>
   2fef4:	2800      	cmp	r0, #0
   2fef6:	f43f aec2 	beq.w	2fc7e <pdn_interface_connect+0x16e>
   2fefa:	e69c      	b.n	2fc36 <pdn_interface_connect+0x126>
   2fefc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2ff00:	e685      	b.n	2fc0e <pdn_interface_connect+0xfe>
   2ff02:	2016      	movs	r0, #22
   2ff04:	f7f7 fb3a 	bl	2757c <bsd_os_errno_set>
   2ff08:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2ff0c:	e67f      	b.n	2fc0e <pdn_interface_connect+0xfe>
   2ff0e:	f04f 0b0c 	mov.w	fp, #12
   2ff12:	e67c      	b.n	2fc0e <pdn_interface_connect+0xfe>
   2ff14:	4811      	ldr	r0, [pc, #68]	; (2ff5c <pdn_interface_connect+0x44c>)
   2ff16:	f7ed f8ab 	bl	1d070 <strlen>
   2ff1a:	4909      	ldr	r1, [pc, #36]	; (2ff40 <pdn_interface_connect+0x430>)
   2ff1c:	4602      	mov	r2, r0
   2ff1e:	480f      	ldr	r0, [pc, #60]	; (2ff5c <pdn_interface_connect+0x44c>)
   2ff20:	f008 ff74 	bl	38e0c <strncmp>
   2ff24:	b918      	cbnz	r0, 2ff2e <pdn_interface_connect+0x41e>
   2ff26:	2008      	movs	r0, #8
   2ff28:	f7f7 fb28 	bl	2757c <bsd_os_errno_set>
   2ff2c:	e66f      	b.n	2fc0e <pdn_interface_connect+0xfe>
   2ff2e:	2005      	movs	r0, #5
   2ff30:	f7f7 fb24 	bl	2757c <bsd_os_errno_set>
   2ff34:	e66b      	b.n	2fc0e <pdn_interface_connect+0xfe>
   2ff36:	bf00      	nop
   2ff38:	0003a21c 	.word	0x0003a21c
   2ff3c:	0003a284 	.word	0x0003a284
   2ff40:	20023bf4 	.word	0x20023bf4
   2ff44:	0003a1f8 	.word	0x0003a1f8
   2ff48:	0003a228 	.word	0x0003a228
   2ff4c:	0003a22c 	.word	0x0003a22c
   2ff50:	0003a204 	.word	0x0003a204
   2ff54:	0003a230 	.word	0x0003a230
   2ff58:	0003a218 	.word	0x0003a218
   2ff5c:	0003a294 	.word	0x0003a294

0002ff60 <pdn_interface_close>:
   2ff60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ff64:	4a6c      	ldr	r2, [pc, #432]	; (30118 <CONFIG_FLASH_LOAD_SIZE+0x118>)
   2ff66:	0c03      	lsrs	r3, r0, #16
   2ff68:	041b      	lsls	r3, r3, #16
   2ff6a:	4293      	cmp	r3, r2
   2ff6c:	b083      	sub	sp, #12
   2ff6e:	f040 80ae 	bne.w	300ce <CONFIG_FLASH_LOAD_SIZE+0xce>
   2ff72:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   2ff76:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   2ff7a:	2c09      	cmp	r4, #9
   2ff7c:	f300 80a7 	bgt.w	300ce <CONFIG_FLASH_LOAD_SIZE+0xce>
   2ff80:	4d66      	ldr	r5, [pc, #408]	; (3011c <CONFIG_FLASH_LOAD_SIZE+0x11c>)
   2ff82:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2ff86:	2800      	cmp	r0, #0
   2ff88:	f000 80a1 	beq.w	300ce <CONFIG_FLASH_LOAD_SIZE+0xce>
   2ff8c:	6883      	ldr	r3, [r0, #8]
   2ff8e:	2b00      	cmp	r3, #0
   2ff90:	f000 809d 	beq.w	300ce <CONFIG_FLASH_LOAD_SIZE+0xce>
   2ff94:	6883      	ldr	r3, [r0, #8]
   2ff96:	2b03      	cmp	r3, #3
   2ff98:	d00b      	beq.n	2ffb2 <pdn_interface_close+0x52>
   2ff9a:	6883      	ldr	r3, [r0, #8]
   2ff9c:	2b02      	cmp	r3, #2
   2ff9e:	d056      	beq.n	3004e <CONFIG_FLASH_LOAD_SIZE+0x4e>
   2ffa0:	f001 ffc6 	bl	31f30 <nrf_free>
   2ffa4:	2300      	movs	r3, #0
   2ffa6:	4618      	mov	r0, r3
   2ffa8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   2ffac:	b003      	add	sp, #12
   2ffae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2ffb2:	4e5b      	ldr	r6, [pc, #364]	; (30120 <CONFIG_FLASH_LOAD_SIZE+0x120>)
   2ffb4:	4b5b      	ldr	r3, [pc, #364]	; (30124 <CONFIG_FLASH_LOAD_SIZE+0x124>)
   2ffb6:	4a5c      	ldr	r2, [pc, #368]	; (30128 <CONFIG_FLASH_LOAD_SIZE+0x128>)
   2ffb8:	f44f 7180 	mov.w	r1, #256	; 0x100
   2ffbc:	4630      	mov	r0, r6
   2ffbe:	f004 ff05 	bl	34dcc <sniprintf>
   2ffc2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2ffc6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2ffca:	681b      	ldr	r3, [r3, #0]
   2ffcc:	4a57      	ldr	r2, [pc, #348]	; (3012c <CONFIG_FLASH_LOAD_SIZE+0x12c>)
   2ffce:	4430      	add	r0, r6
   2ffd0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 3013c <CONFIG_FLASH_LOAD_SIZE+0x13c>
   2ffd4:	f004 fefa 	bl	34dcc <sniprintf>
   2ffd8:	4630      	mov	r0, r6
   2ffda:	f8d8 9000 	ldr.w	r9, [r8]
   2ffde:	2700      	movs	r7, #0
   2ffe0:	f7ed f846 	bl	1d070 <strlen>
   2ffe4:	4631      	mov	r1, r6
   2ffe6:	4602      	mov	r2, r0
   2ffe8:	463b      	mov	r3, r7
   2ffea:	4648      	mov	r0, r9
   2ffec:	9701      	str	r7, [sp, #4]
   2ffee:	9700      	str	r7, [sp, #0]
   2fff0:	f7ff f9be 	bl	2f370 <at_interface_write>
   2fff4:	4681      	mov	r9, r0
   2fff6:	4630      	mov	r0, r6
   2fff8:	f7ed f83a 	bl	1d070 <strlen>
   2fffc:	4548      	cmp	r0, r9
   2fffe:	f040 8083 	bne.w	30108 <CONFIG_FLASH_LOAD_SIZE+0x108>
   30002:	463b      	mov	r3, r7
   30004:	e9cd 7700 	strd	r7, r7, [sp]
   30008:	f44f 7280 	mov.w	r2, #256	; 0x100
   3000c:	4631      	mov	r1, r6
   3000e:	f8d8 0000 	ldr.w	r0, [r8]
   30012:	f7ff fb01 	bl	2f618 <at_interface_read>
   30016:	4607      	mov	r7, r0
   30018:	4845      	ldr	r0, [pc, #276]	; (30130 <CONFIG_FLASH_LOAD_SIZE+0x130>)
   3001a:	f7ed f829 	bl	1d070 <strlen>
   3001e:	4287      	cmp	r7, r0
   30020:	da5b      	bge.n	300da <CONFIG_FLASH_LOAD_SIZE+0xda>
   30022:	4844      	ldr	r0, [pc, #272]	; (30134 <CONFIG_FLASH_LOAD_SIZE+0x134>)
   30024:	f7ed f824 	bl	1d070 <strlen>
   30028:	493d      	ldr	r1, [pc, #244]	; (30120 <CONFIG_FLASH_LOAD_SIZE+0x120>)
   3002a:	4602      	mov	r2, r0
   3002c:	4841      	ldr	r0, [pc, #260]	; (30134 <CONFIG_FLASH_LOAD_SIZE+0x134>)
   3002e:	f008 feed 	bl	38e0c <strncmp>
   30032:	2800      	cmp	r0, #0
   30034:	d168      	bne.n	30108 <CONFIG_FLASH_LOAD_SIZE+0x108>
   30036:	2008      	movs	r0, #8
   30038:	f7f7 faa0 	bl	2757c <bsd_os_errno_set>
   3003c:	2202      	movs	r2, #2
   3003e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   30042:	609a      	str	r2, [r3, #8]
   30044:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   30048:	6883      	ldr	r3, [r0, #8]
   3004a:	2b02      	cmp	r3, #2
   3004c:	d1a8      	bne.n	2ffa0 <pdn_interface_close+0x40>
   3004e:	4e34      	ldr	r6, [pc, #208]	; (30120 <CONFIG_FLASH_LOAD_SIZE+0x120>)
   30050:	4b39      	ldr	r3, [pc, #228]	; (30138 <CONFIG_FLASH_LOAD_SIZE+0x138>)
   30052:	4a35      	ldr	r2, [pc, #212]	; (30128 <CONFIG_FLASH_LOAD_SIZE+0x128>)
   30054:	f44f 7180 	mov.w	r1, #256	; 0x100
   30058:	4630      	mov	r0, r6
   3005a:	f004 feb7 	bl	34dcc <sniprintf>
   3005e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   30062:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   30066:	681b      	ldr	r3, [r3, #0]
   30068:	4a30      	ldr	r2, [pc, #192]	; (3012c <CONFIG_FLASH_LOAD_SIZE+0x12c>)
   3006a:	4430      	add	r0, r6
   3006c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 3013c <CONFIG_FLASH_LOAD_SIZE+0x13c>
   30070:	f004 feac 	bl	34dcc <sniprintf>
   30074:	4630      	mov	r0, r6
   30076:	f8d8 9000 	ldr.w	r9, [r8]
   3007a:	2700      	movs	r7, #0
   3007c:	f7ec fff8 	bl	1d070 <strlen>
   30080:	4631      	mov	r1, r6
   30082:	4602      	mov	r2, r0
   30084:	463b      	mov	r3, r7
   30086:	4648      	mov	r0, r9
   30088:	9701      	str	r7, [sp, #4]
   3008a:	9700      	str	r7, [sp, #0]
   3008c:	f7ff f970 	bl	2f370 <at_interface_write>
   30090:	4681      	mov	r9, r0
   30092:	4630      	mov	r0, r6
   30094:	f7ec ffec 	bl	1d070 <strlen>
   30098:	4548      	cmp	r0, r9
   3009a:	d139      	bne.n	30110 <CONFIG_FLASH_LOAD_SIZE+0x110>
   3009c:	463b      	mov	r3, r7
   3009e:	e9cd 7700 	strd	r7, r7, [sp]
   300a2:	f44f 7280 	mov.w	r2, #256	; 0x100
   300a6:	4631      	mov	r1, r6
   300a8:	f8d8 0000 	ldr.w	r0, [r8]
   300ac:	f7ff fab4 	bl	2f618 <at_interface_read>
   300b0:	4607      	mov	r7, r0
   300b2:	481f      	ldr	r0, [pc, #124]	; (30130 <CONFIG_FLASH_LOAD_SIZE+0x130>)
   300b4:	f7ec ffdc 	bl	1d070 <strlen>
   300b8:	4287      	cmp	r7, r0
   300ba:	db16      	blt.n	300ea <CONFIG_FLASH_LOAD_SIZE+0xea>
   300bc:	4602      	mov	r2, r0
   300be:	4631      	mov	r1, r6
   300c0:	481b      	ldr	r0, [pc, #108]	; (30130 <CONFIG_FLASH_LOAD_SIZE+0x130>)
   300c2:	f008 fea3 	bl	38e0c <strncmp>
   300c6:	b980      	cbnz	r0, 300ea <CONFIG_FLASH_LOAD_SIZE+0xea>
   300c8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   300cc:	e768      	b.n	2ffa0 <pdn_interface_close+0x40>
   300ce:	2009      	movs	r0, #9
   300d0:	f7f7 fa54 	bl	2757c <bsd_os_errno_set>
   300d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   300d8:	e768      	b.n	2ffac <pdn_interface_close+0x4c>
   300da:	4602      	mov	r2, r0
   300dc:	4631      	mov	r1, r6
   300de:	4814      	ldr	r0, [pc, #80]	; (30130 <CONFIG_FLASH_LOAD_SIZE+0x130>)
   300e0:	f008 fe94 	bl	38e0c <strncmp>
   300e4:	2800      	cmp	r0, #0
   300e6:	d0a9      	beq.n	3003c <CONFIG_FLASH_LOAD_SIZE+0x3c>
   300e8:	e79b      	b.n	30022 <CONFIG_FLASH_LOAD_SIZE+0x22>
   300ea:	4812      	ldr	r0, [pc, #72]	; (30134 <CONFIG_FLASH_LOAD_SIZE+0x134>)
   300ec:	f7ec ffc0 	bl	1d070 <strlen>
   300f0:	490b      	ldr	r1, [pc, #44]	; (30120 <CONFIG_FLASH_LOAD_SIZE+0x120>)
   300f2:	4602      	mov	r2, r0
   300f4:	480f      	ldr	r0, [pc, #60]	; (30134 <CONFIG_FLASH_LOAD_SIZE+0x134>)
   300f6:	f008 fe89 	bl	38e0c <strncmp>
   300fa:	b948      	cbnz	r0, 30110 <CONFIG_FLASH_LOAD_SIZE+0x110>
   300fc:	2008      	movs	r0, #8
   300fe:	f7f7 fa3d 	bl	2757c <bsd_os_errno_set>
   30102:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   30106:	e74b      	b.n	2ffa0 <pdn_interface_close+0x40>
   30108:	2005      	movs	r0, #5
   3010a:	f7f7 fa37 	bl	2757c <bsd_os_errno_set>
   3010e:	e795      	b.n	3003c <CONFIG_FLASH_LOAD_SIZE+0x3c>
   30110:	2005      	movs	r0, #5
   30112:	f7f7 fa33 	bl	2757c <bsd_os_errno_set>
   30116:	e7d7      	b.n	300c8 <CONFIG_FLASH_LOAD_SIZE+0xc8>
   30118:	789a0000 	.word	0x789a0000
   3011c:	20023cf4 	.word	0x20023cf4
   30120:	20023bf4 	.word	0x20023bf4
   30124:	0003a1e0 	.word	0x0003a1e0
   30128:	0003a284 	.word	0x0003a284
   3012c:	0003a244 	.word	0x0003a244
   30130:	0003a218 	.word	0x0003a218
   30134:	0003a294 	.word	0x0003a294
   30138:	0003a1ec 	.word	0x0003a1ec
   3013c:	20023bf0 	.word	0x20023bf0

00030140 <pdn_interface_setopt>:
   30140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30142:	f240 2402 	movw	r4, #514	; 0x202
   30146:	42a1      	cmp	r1, r4
   30148:	9e06      	ldr	r6, [sp, #24]
   3014a:	f040 8090 	bne.w	3026e <pdn_interface_setopt+0x12e>
   3014e:	461d      	mov	r5, r3
   30150:	2b00      	cmp	r3, #0
   30152:	f000 808c 	beq.w	3026e <pdn_interface_setopt+0x12e>
   30156:	2e00      	cmp	r6, #0
   30158:	f000 8089 	beq.w	3026e <pdn_interface_setopt+0x12e>
   3015c:	0c03      	lsrs	r3, r0, #16
   3015e:	494d      	ldr	r1, [pc, #308]	; (30294 <pdn_interface_setopt+0x154>)
   30160:	041b      	lsls	r3, r3, #16
   30162:	428b      	cmp	r3, r1
   30164:	d005      	beq.n	30172 <pdn_interface_setopt+0x32>
   30166:	2009      	movs	r0, #9
   30168:	f7f7 fa08 	bl	2757c <bsd_os_errno_set>
   3016c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30172:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   30176:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   3017a:	2c09      	cmp	r4, #9
   3017c:	dcf3      	bgt.n	30166 <pdn_interface_setopt+0x26>
   3017e:	4f46      	ldr	r7, [pc, #280]	; (30298 <pdn_interface_setopt+0x158>)
   30180:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   30184:	2b00      	cmp	r3, #0
   30186:	d0ee      	beq.n	30166 <pdn_interface_setopt+0x26>
   30188:	6899      	ldr	r1, [r3, #8]
   3018a:	2900      	cmp	r1, #0
   3018c:	d0eb      	beq.n	30166 <pdn_interface_setopt+0x26>
   3018e:	2a01      	cmp	r2, #1
   30190:	d049      	beq.n	30226 <pdn_interface_setopt+0xe6>
   30192:	2a04      	cmp	r2, #4
   30194:	d145      	bne.n	30222 <pdn_interface_setopt+0xe2>
   30196:	689a      	ldr	r2, [r3, #8]
   30198:	2a00      	cmp	r2, #0
   3019a:	d04c      	beq.n	30236 <pdn_interface_setopt+0xf6>
   3019c:	689a      	ldr	r2, [r3, #8]
   3019e:	2a03      	cmp	r2, #3
   301a0:	d049      	beq.n	30236 <pdn_interface_setopt+0xf6>
   301a2:	689b      	ldr	r3, [r3, #8]
   301a4:	2b04      	cmp	r3, #4
   301a6:	d046      	beq.n	30236 <pdn_interface_setopt+0xf6>
   301a8:	4628      	mov	r0, r5
   301aa:	f7ec ff61 	bl	1d070 <strlen>
   301ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   301b2:	3001      	adds	r0, #1
   301b4:	f105 0664 	add.w	r6, r5, #100	; 0x64
   301b8:	6158      	str	r0, [r3, #20]
   301ba:	4630      	mov	r0, r6
   301bc:	f7ec ff58 	bl	1d070 <strlen>
   301c0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   301c4:	3001      	adds	r0, #1
   301c6:	6198      	str	r0, [r3, #24]
   301c8:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
   301cc:	3b01      	subs	r3, #1
   301ce:	2b01      	cmp	r3, #1
   301d0:	d84b      	bhi.n	3026a <pdn_interface_setopt+0x12a>
   301d2:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   301d6:	6943      	ldr	r3, [r0, #20]
   301d8:	2b63      	cmp	r3, #99	; 0x63
   301da:	dc46      	bgt.n	3026a <pdn_interface_setopt+0x12a>
   301dc:	6982      	ldr	r2, [r0, #24]
   301de:	2a63      	cmp	r2, #99	; 0x63
   301e0:	dc43      	bgt.n	3026a <pdn_interface_setopt+0x12a>
   301e2:	4413      	add	r3, r2
   301e4:	f103 0120 	add.w	r1, r3, #32
   301e8:	f001 feae 	bl	31f48 <nrf_realloc>
   301ec:	4603      	mov	r3, r0
   301ee:	2800      	cmp	r0, #0
   301f0:	d048      	beq.n	30284 <pdn_interface_setopt+0x144>
   301f2:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   301f6:	6941      	ldr	r1, [r0, #20]
   301f8:	462b      	mov	r3, r5
   301fa:	4a28      	ldr	r2, [pc, #160]	; (3029c <pdn_interface_setopt+0x15c>)
   301fc:	3020      	adds	r0, #32
   301fe:	f004 fde5 	bl	34dcc <sniprintf>
   30202:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   30206:	3021      	adds	r0, #33	; 0x21
   30208:	4633      	mov	r3, r6
   3020a:	6991      	ldr	r1, [r2, #24]
   3020c:	4410      	add	r0, r2
   3020e:	4a23      	ldr	r2, [pc, #140]	; (3029c <pdn_interface_setopt+0x15c>)
   30210:	f004 fddc 	bl	34dcc <sniprintf>
   30214:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   30218:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   3021c:	2000      	movs	r0, #0
   3021e:	741a      	strb	r2, [r3, #16]
   30220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30222:	202d      	movs	r0, #45	; 0x2d
   30224:	e7a0      	b.n	30168 <pdn_interface_setopt+0x28>
   30226:	689a      	ldr	r2, [r3, #8]
   30228:	b12a      	cbz	r2, 30236 <pdn_interface_setopt+0xf6>
   3022a:	689a      	ldr	r2, [r3, #8]
   3022c:	2a03      	cmp	r2, #3
   3022e:	d002      	beq.n	30236 <pdn_interface_setopt+0xf6>
   30230:	689a      	ldr	r2, [r3, #8]
   30232:	2a04      	cmp	r2, #4
   30234:	d101      	bne.n	3023a <pdn_interface_setopt+0xfa>
   30236:	200e      	movs	r0, #14
   30238:	e796      	b.n	30168 <pdn_interface_setopt+0x28>
   3023a:	08b2      	lsrs	r2, r6, #2
   3023c:	1e51      	subs	r1, r2, #1
   3023e:	2901      	cmp	r1, #1
   30240:	d813      	bhi.n	3026a <pdn_interface_setopt+0x12a>
   30242:	07b1      	lsls	r1, r6, #30
   30244:	d111      	bne.n	3026a <pdn_interface_setopt+0x12a>
   30246:	6829      	ldr	r1, [r5, #0]
   30248:	2902      	cmp	r1, #2
   3024a:	d016      	beq.n	3027a <pdn_interface_setopt+0x13a>
   3024c:	290a      	cmp	r1, #10
   3024e:	d10c      	bne.n	3026a <pdn_interface_setopt+0x12a>
   30250:	2102      	movs	r1, #2
   30252:	2a02      	cmp	r2, #2
   30254:	d106      	bne.n	30264 <pdn_interface_setopt+0x124>
   30256:	686a      	ldr	r2, [r5, #4]
   30258:	2a02      	cmp	r2, #2
   3025a:	d010      	beq.n	3027e <pdn_interface_setopt+0x13e>
   3025c:	2a0a      	cmp	r2, #10
   3025e:	d104      	bne.n	3026a <pdn_interface_setopt+0x12a>
   30260:	f041 0102 	orr.w	r1, r1, #2
   30264:	60d9      	str	r1, [r3, #12]
   30266:	2000      	movs	r0, #0
   30268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3026a:	2016      	movs	r0, #22
   3026c:	e77c      	b.n	30168 <pdn_interface_setopt+0x28>
   3026e:	2016      	movs	r0, #22
   30270:	f7f7 f984 	bl	2757c <bsd_os_errno_set>
   30274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3027a:	2101      	movs	r1, #1
   3027c:	e7e9      	b.n	30252 <pdn_interface_setopt+0x112>
   3027e:	f041 0101 	orr.w	r1, r1, #1
   30282:	e7ef      	b.n	30264 <pdn_interface_setopt+0x124>
   30284:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   30288:	200c      	movs	r0, #12
   3028a:	6153      	str	r3, [r2, #20]
   3028c:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   30290:	6193      	str	r3, [r2, #24]
   30292:	e769      	b.n	30168 <pdn_interface_setopt+0x28>
   30294:	789a0000 	.word	0x789a0000
   30298:	20023cf4 	.word	0x20023cf4
   3029c:	0003a284 	.word	0x0003a284

000302a0 <pdn_interface_getopt>:
   302a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   302a4:	f240 2402 	movw	r4, #514	; 0x202
   302a8:	b083      	sub	sp, #12
   302aa:	42a1      	cmp	r1, r4
   302ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   302ae:	f040 808f 	bne.w	303d0 <pdn_interface_getopt+0x130>
   302b2:	461e      	mov	r6, r3
   302b4:	2b00      	cmp	r3, #0
   302b6:	f000 808b 	beq.w	303d0 <pdn_interface_getopt+0x130>
   302ba:	2d00      	cmp	r5, #0
   302bc:	f000 8088 	beq.w	303d0 <pdn_interface_getopt+0x130>
   302c0:	0c03      	lsrs	r3, r0, #16
   302c2:	4954      	ldr	r1, [pc, #336]	; (30414 <pdn_interface_getopt+0x174>)
   302c4:	041b      	lsls	r3, r3, #16
   302c6:	428b      	cmp	r3, r1
   302c8:	f040 8084 	bne.w	303d4 <pdn_interface_getopt+0x134>
   302cc:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   302d0:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   302d4:	2c09      	cmp	r4, #9
   302d6:	dc7d      	bgt.n	303d4 <pdn_interface_getopt+0x134>
   302d8:	4b4f      	ldr	r3, [pc, #316]	; (30418 <pdn_interface_getopt+0x178>)
   302da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   302de:	2b00      	cmp	r3, #0
   302e0:	d078      	beq.n	303d4 <pdn_interface_getopt+0x134>
   302e2:	6899      	ldr	r1, [r3, #8]
   302e4:	2900      	cmp	r1, #0
   302e6:	d075      	beq.n	303d4 <pdn_interface_getopt+0x134>
   302e8:	2a02      	cmp	r2, #2
   302ea:	d04e      	beq.n	3038a <pdn_interface_getopt+0xea>
   302ec:	2a03      	cmp	r2, #3
   302ee:	d009      	beq.n	30304 <pdn_interface_getopt+0x64>
   302f0:	2a01      	cmp	r2, #1
   302f2:	d054      	beq.n	3039e <pdn_interface_getopt+0xfe>
   302f4:	202d      	movs	r0, #45	; 0x2d
   302f6:	f7f7 f941 	bl	2757c <bsd_os_errno_set>
   302fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   302fe:	b003      	add	sp, #12
   30300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30304:	682b      	ldr	r3, [r5, #0]
   30306:	2b00      	cmp	r3, #0
   30308:	d062      	beq.n	303d0 <pdn_interface_getopt+0x130>
   3030a:	4b44      	ldr	r3, [pc, #272]	; (3041c <pdn_interface_getopt+0x17c>)
   3030c:	4a44      	ldr	r2, [pc, #272]	; (30420 <pdn_interface_getopt+0x180>)
   3030e:	f44f 7180 	mov.w	r1, #256	; 0x100
   30312:	4844      	ldr	r0, [pc, #272]	; (30424 <pdn_interface_getopt+0x184>)
   30314:	f8df 8118 	ldr.w	r8, [pc, #280]	; 30430 <pdn_interface_getopt+0x190>
   30318:	f004 fd58 	bl	34dcc <sniprintf>
   3031c:	4841      	ldr	r0, [pc, #260]	; (30424 <pdn_interface_getopt+0x184>)
   3031e:	f8d8 9000 	ldr.w	r9, [r8]
   30322:	2700      	movs	r7, #0
   30324:	f7ec fea4 	bl	1d070 <strlen>
   30328:	463b      	mov	r3, r7
   3032a:	4602      	mov	r2, r0
   3032c:	493d      	ldr	r1, [pc, #244]	; (30424 <pdn_interface_getopt+0x184>)
   3032e:	4648      	mov	r0, r9
   30330:	9701      	str	r7, [sp, #4]
   30332:	9700      	str	r7, [sp, #0]
   30334:	f7ff f81c 	bl	2f370 <at_interface_write>
   30338:	4681      	mov	r9, r0
   3033a:	483a      	ldr	r0, [pc, #232]	; (30424 <pdn_interface_getopt+0x184>)
   3033c:	f7ec fe98 	bl	1d070 <strlen>
   30340:	4548      	cmp	r0, r9
   30342:	d161      	bne.n	30408 <pdn_interface_getopt+0x168>
   30344:	463b      	mov	r3, r7
   30346:	e9cd 7700 	strd	r7, r7, [sp]
   3034a:	f44f 7280 	mov.w	r2, #256	; 0x100
   3034e:	4935      	ldr	r1, [pc, #212]	; (30424 <pdn_interface_getopt+0x184>)
   30350:	f8d8 0000 	ldr.w	r0, [r8]
   30354:	f7ff f960 	bl	2f618 <at_interface_read>
   30358:	4607      	mov	r7, r0
   3035a:	4833      	ldr	r0, [pc, #204]	; (30428 <pdn_interface_getopt+0x188>)
   3035c:	f7ec fe88 	bl	1d070 <strlen>
   30360:	4287      	cmp	r7, r0
   30362:	db3d      	blt.n	303e0 <pdn_interface_getopt+0x140>
   30364:	4602      	mov	r2, r0
   30366:	492f      	ldr	r1, [pc, #188]	; (30424 <pdn_interface_getopt+0x184>)
   30368:	482f      	ldr	r0, [pc, #188]	; (30428 <pdn_interface_getopt+0x188>)
   3036a:	f008 fd4f 	bl	38e0c <strncmp>
   3036e:	4607      	mov	r7, r0
   30370:	2800      	cmp	r0, #0
   30372:	d135      	bne.n	303e0 <pdn_interface_getopt+0x140>
   30374:	4620      	mov	r0, r4
   30376:	492b      	ldr	r1, [pc, #172]	; (30424 <pdn_interface_getopt+0x184>)
   30378:	f7ff fa38 	bl	2f7ec <pdn_state_get_parser>
   3037c:	2800      	cmp	r0, #0
   3037e:	dbba      	blt.n	302f6 <pdn_interface_getopt+0x56>
   30380:	2301      	movs	r3, #1
   30382:	7030      	strb	r0, [r6, #0]
   30384:	4638      	mov	r0, r7
   30386:	602b      	str	r3, [r5, #0]
   30388:	e7b9      	b.n	302fe <pdn_interface_getopt+0x5e>
   3038a:	682a      	ldr	r2, [r5, #0]
   3038c:	b302      	cbz	r2, 303d0 <pdn_interface_getopt+0x130>
   3038e:	2201      	movs	r2, #1
   30390:	2000      	movs	r0, #0
   30392:	681b      	ldr	r3, [r3, #0]
   30394:	7033      	strb	r3, [r6, #0]
   30396:	602a      	str	r2, [r5, #0]
   30398:	b003      	add	sp, #12
   3039a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3039e:	689a      	ldr	r2, [r3, #8]
   303a0:	b1a2      	cbz	r2, 303cc <pdn_interface_getopt+0x12c>
   303a2:	689a      	ldr	r2, [r3, #8]
   303a4:	2a04      	cmp	r2, #4
   303a6:	d011      	beq.n	303cc <pdn_interface_getopt+0x12c>
   303a8:	682a      	ldr	r2, [r5, #0]
   303aa:	2a07      	cmp	r2, #7
   303ac:	d910      	bls.n	303d0 <pdn_interface_getopt+0x130>
   303ae:	f012 0203 	ands.w	r2, r2, #3
   303b2:	d10d      	bne.n	303d0 <pdn_interface_getopt+0x130>
   303b4:	68db      	ldr	r3, [r3, #12]
   303b6:	0799      	lsls	r1, r3, #30
   303b8:	d421      	bmi.n	303fe <pdn_interface_getopt+0x15e>
   303ba:	2104      	movs	r1, #4
   303bc:	07db      	lsls	r3, r3, #31
   303be:	d502      	bpl.n	303c6 <pdn_interface_getopt+0x126>
   303c0:	2302      	movs	r3, #2
   303c2:	50b3      	str	r3, [r6, r2]
   303c4:	460a      	mov	r2, r1
   303c6:	602a      	str	r2, [r5, #0]
   303c8:	2000      	movs	r0, #0
   303ca:	e798      	b.n	302fe <pdn_interface_getopt+0x5e>
   303cc:	200e      	movs	r0, #14
   303ce:	e792      	b.n	302f6 <pdn_interface_getopt+0x56>
   303d0:	2016      	movs	r0, #22
   303d2:	e790      	b.n	302f6 <pdn_interface_getopt+0x56>
   303d4:	2009      	movs	r0, #9
   303d6:	f7f7 f8d1 	bl	2757c <bsd_os_errno_set>
   303da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   303de:	e78e      	b.n	302fe <pdn_interface_getopt+0x5e>
   303e0:	4812      	ldr	r0, [pc, #72]	; (3042c <pdn_interface_getopt+0x18c>)
   303e2:	f7ec fe45 	bl	1d070 <strlen>
   303e6:	490f      	ldr	r1, [pc, #60]	; (30424 <pdn_interface_getopt+0x184>)
   303e8:	4602      	mov	r2, r0
   303ea:	4810      	ldr	r0, [pc, #64]	; (3042c <pdn_interface_getopt+0x18c>)
   303ec:	f008 fd0e 	bl	38e0c <strncmp>
   303f0:	b950      	cbnz	r0, 30408 <pdn_interface_getopt+0x168>
   303f2:	2008      	movs	r0, #8
   303f4:	f7f7 f8c2 	bl	2757c <bsd_os_errno_set>
   303f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   303fc:	e77b      	b.n	302f6 <pdn_interface_getopt+0x56>
   303fe:	220a      	movs	r2, #10
   30400:	2108      	movs	r1, #8
   30402:	6032      	str	r2, [r6, #0]
   30404:	2204      	movs	r2, #4
   30406:	e7d9      	b.n	303bc <pdn_interface_getopt+0x11c>
   30408:	2005      	movs	r0, #5
   3040a:	f7f7 f8b7 	bl	2757c <bsd_os_errno_set>
   3040e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30412:	e770      	b.n	302f6 <pdn_interface_getopt+0x56>
   30414:	789a0000 	.word	0x789a0000
   30418:	20023cf4 	.word	0x20023cf4
   3041c:	0003a264 	.word	0x0003a264
   30420:	0003a284 	.word	0x0003a284
   30424:	20023bf4 	.word	0x20023bf4
   30428:	0003a270 	.word	0x0003a270
   3042c:	0003a294 	.word	0x0003a294
   30430:	20023bf0 	.word	0x20023bf0

00030434 <pdn_interface_pdn_id_get>:
   30434:	2900      	cmp	r1, #0
   30436:	f000 82ba 	beq.w	309ae <pdn_interface_pdn_id_get+0x57a>
   3043a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3043e:	2802      	cmp	r0, #2
   30440:	b083      	sub	sp, #12
   30442:	460e      	mov	r6, r1
   30444:	d067      	beq.n	30516 <pdn_interface_pdn_id_get+0xe2>
   30446:	280a      	cmp	r0, #10
   30448:	d040      	beq.n	304cc <pdn_interface_pdn_id_get+0x98>
   3044a:	4cae      	ldr	r4, [pc, #696]	; (30704 <pdn_interface_pdn_id_get+0x2d0>)
   3044c:	6823      	ldr	r3, [r4, #0]
   3044e:	b11b      	cbz	r3, 30458 <pdn_interface_pdn_id_get+0x24>
   30450:	689b      	ldr	r3, [r3, #8]
   30452:	2b03      	cmp	r3, #3
   30454:	f000 80fc 	beq.w	30650 <pdn_interface_pdn_id_get+0x21c>
   30458:	6863      	ldr	r3, [r4, #4]
   3045a:	b11b      	cbz	r3, 30464 <pdn_interface_pdn_id_get+0x30>
   3045c:	689b      	ldr	r3, [r3, #8]
   3045e:	2b03      	cmp	r3, #3
   30460:	f000 80e4 	beq.w	3062c <pdn_interface_pdn_id_get+0x1f8>
   30464:	68a3      	ldr	r3, [r4, #8]
   30466:	b11b      	cbz	r3, 30470 <pdn_interface_pdn_id_get+0x3c>
   30468:	689b      	ldr	r3, [r3, #8]
   3046a:	2b03      	cmp	r3, #3
   3046c:	f000 80cc 	beq.w	30608 <pdn_interface_pdn_id_get+0x1d4>
   30470:	68e3      	ldr	r3, [r4, #12]
   30472:	b11b      	cbz	r3, 3047c <pdn_interface_pdn_id_get+0x48>
   30474:	689b      	ldr	r3, [r3, #8]
   30476:	2b03      	cmp	r3, #3
   30478:	f000 80b4 	beq.w	305e4 <pdn_interface_pdn_id_get+0x1b0>
   3047c:	6923      	ldr	r3, [r4, #16]
   3047e:	b11b      	cbz	r3, 30488 <pdn_interface_pdn_id_get+0x54>
   30480:	689b      	ldr	r3, [r3, #8]
   30482:	2b03      	cmp	r3, #3
   30484:	f000 80f5 	beq.w	30672 <pdn_interface_pdn_id_get+0x23e>
   30488:	6963      	ldr	r3, [r4, #20]
   3048a:	b11b      	cbz	r3, 30494 <pdn_interface_pdn_id_get+0x60>
   3048c:	689b      	ldr	r3, [r3, #8]
   3048e:	2b03      	cmp	r3, #3
   30490:	f000 813c 	beq.w	3070c <pdn_interface_pdn_id_get+0x2d8>
   30494:	69a3      	ldr	r3, [r4, #24]
   30496:	b11b      	cbz	r3, 304a0 <pdn_interface_pdn_id_get+0x6c>
   30498:	689b      	ldr	r3, [r3, #8]
   3049a:	2b03      	cmp	r3, #3
   3049c:	f000 811f 	beq.w	306de <pdn_interface_pdn_id_get+0x2aa>
   304a0:	69e3      	ldr	r3, [r4, #28]
   304a2:	b11b      	cbz	r3, 304ac <pdn_interface_pdn_id_get+0x78>
   304a4:	689b      	ldr	r3, [r3, #8]
   304a6:	2b03      	cmp	r3, #3
   304a8:	f000 8107 	beq.w	306ba <pdn_interface_pdn_id_get+0x286>
   304ac:	6a23      	ldr	r3, [r4, #32]
   304ae:	b11b      	cbz	r3, 304b8 <pdn_interface_pdn_id_get+0x84>
   304b0:	689b      	ldr	r3, [r3, #8]
   304b2:	2b03      	cmp	r3, #3
   304b4:	f000 80ef 	beq.w	30696 <pdn_interface_pdn_id_get+0x262>
   304b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   304ba:	b113      	cbz	r3, 304c2 <pdn_interface_pdn_id_get+0x8e>
   304bc:	689b      	ldr	r3, [r3, #8]
   304be:	2b03      	cmp	r3, #3
   304c0:	d07e      	beq.n	305c0 <pdn_interface_pdn_id_get+0x18c>
   304c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   304c6:	b003      	add	sp, #12
   304c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   304cc:	2500      	movs	r5, #0
   304ce:	4c8e      	ldr	r4, [pc, #568]	; (30708 <pdn_interface_pdn_id_get+0x2d4>)
   304d0:	e002      	b.n	304d8 <pdn_interface_pdn_id_get+0xa4>
   304d2:	3501      	adds	r5, #1
   304d4:	2d0a      	cmp	r5, #10
   304d6:	d0f4      	beq.n	304c2 <pdn_interface_pdn_id_get+0x8e>
   304d8:	f854 3f04 	ldr.w	r3, [r4, #4]!
   304dc:	2b00      	cmp	r3, #0
   304de:	d0f8      	beq.n	304d2 <pdn_interface_pdn_id_get+0x9e>
   304e0:	689b      	ldr	r3, [r3, #8]
   304e2:	2b03      	cmp	r3, #3
   304e4:	d1f5      	bne.n	304d2 <pdn_interface_pdn_id_get+0x9e>
   304e6:	4630      	mov	r0, r6
   304e8:	f7ec fdc2 	bl	1d070 <strlen>
   304ec:	6823      	ldr	r3, [r4, #0]
   304ee:	69da      	ldr	r2, [r3, #28]
   304f0:	4290      	cmp	r0, r2
   304f2:	d1ee      	bne.n	304d2 <pdn_interface_pdn_id_get+0x9e>
   304f4:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   304f8:	4439      	add	r1, r7
   304fa:	3120      	adds	r1, #32
   304fc:	4602      	mov	r2, r0
   304fe:	4419      	add	r1, r3
   30500:	4630      	mov	r0, r6
   30502:	f008 fc83 	bl	38e0c <strncmp>
   30506:	2800      	cmp	r0, #0
   30508:	d1e3      	bne.n	304d2 <pdn_interface_pdn_id_get+0x9e>
   3050a:	6823      	ldr	r3, [r4, #0]
   3050c:	68da      	ldr	r2, [r3, #12]
   3050e:	0792      	lsls	r2, r2, #30
   30510:	f100 8128 	bmi.w	30764 <pdn_interface_pdn_id_get+0x330>
   30514:	e7dd      	b.n	304d2 <pdn_interface_pdn_id_get+0x9e>
   30516:	4c7b      	ldr	r4, [pc, #492]	; (30704 <pdn_interface_pdn_id_get+0x2d0>)
   30518:	6823      	ldr	r3, [r4, #0]
   3051a:	b11b      	cbz	r3, 30524 <pdn_interface_pdn_id_get+0xf0>
   3051c:	689b      	ldr	r3, [r3, #8]
   3051e:	2b03      	cmp	r3, #3
   30520:	f000 822a 	beq.w	30978 <pdn_interface_pdn_id_get+0x544>
   30524:	6863      	ldr	r3, [r4, #4]
   30526:	b11b      	cbz	r3, 30530 <pdn_interface_pdn_id_get+0xfc>
   30528:	689b      	ldr	r3, [r3, #8]
   3052a:	2b03      	cmp	r3, #3
   3052c:	f000 8209 	beq.w	30942 <pdn_interface_pdn_id_get+0x50e>
   30530:	68a3      	ldr	r3, [r4, #8]
   30532:	b11b      	cbz	r3, 3053c <pdn_interface_pdn_id_get+0x108>
   30534:	689b      	ldr	r3, [r3, #8]
   30536:	2b03      	cmp	r3, #3
   30538:	f000 81b3 	beq.w	308a2 <pdn_interface_pdn_id_get+0x46e>
   3053c:	68e3      	ldr	r3, [r4, #12]
   3053e:	b11b      	cbz	r3, 30548 <pdn_interface_pdn_id_get+0x114>
   30540:	689d      	ldr	r5, [r3, #8]
   30542:	2d03      	cmp	r5, #3
   30544:	f000 81c8 	beq.w	308d8 <pdn_interface_pdn_id_get+0x4a4>
   30548:	6923      	ldr	r3, [r4, #16]
   3054a:	b11b      	cbz	r3, 30554 <pdn_interface_pdn_id_get+0x120>
   3054c:	689b      	ldr	r3, [r3, #8]
   3054e:	2b03      	cmp	r3, #3
   30550:	f000 80ee 	beq.w	30730 <pdn_interface_pdn_id_get+0x2fc>
   30554:	6963      	ldr	r3, [r4, #20]
   30556:	b11b      	cbz	r3, 30560 <pdn_interface_pdn_id_get+0x12c>
   30558:	689b      	ldr	r3, [r3, #8]
   3055a:	2b03      	cmp	r3, #3
   3055c:	f000 8150 	beq.w	30800 <pdn_interface_pdn_id_get+0x3cc>
   30560:	69a3      	ldr	r3, [r4, #24]
   30562:	b11b      	cbz	r3, 3056c <pdn_interface_pdn_id_get+0x138>
   30564:	689b      	ldr	r3, [r3, #8]
   30566:	2b03      	cmp	r3, #3
   30568:	f000 8165 	beq.w	30836 <pdn_interface_pdn_id_get+0x402>
   3056c:	69e3      	ldr	r3, [r4, #28]
   3056e:	b11b      	cbz	r3, 30578 <pdn_interface_pdn_id_get+0x144>
   30570:	689b      	ldr	r3, [r3, #8]
   30572:	2b03      	cmp	r3, #3
   30574:	f000 817a 	beq.w	3086c <pdn_interface_pdn_id_get+0x438>
   30578:	6a23      	ldr	r3, [r4, #32]
   3057a:	b11b      	cbz	r3, 30584 <pdn_interface_pdn_id_get+0x150>
   3057c:	689b      	ldr	r3, [r3, #8]
   3057e:	2b03      	cmp	r3, #3
   30580:	f000 81c4 	beq.w	3090c <pdn_interface_pdn_id_get+0x4d8>
   30584:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30586:	2b00      	cmp	r3, #0
   30588:	d09b      	beq.n	304c2 <pdn_interface_pdn_id_get+0x8e>
   3058a:	689b      	ldr	r3, [r3, #8]
   3058c:	2b03      	cmp	r3, #3
   3058e:	d198      	bne.n	304c2 <pdn_interface_pdn_id_get+0x8e>
   30590:	4630      	mov	r0, r6
   30592:	f7ec fd6d 	bl	1d070 <strlen>
   30596:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30598:	69da      	ldr	r2, [r3, #28]
   3059a:	4290      	cmp	r0, r2
   3059c:	d191      	bne.n	304c2 <pdn_interface_pdn_id_get+0x8e>
   3059e:	e9d3 5105 	ldrd	r5, r1, [r3, #20]
   305a2:	4429      	add	r1, r5
   305a4:	3120      	adds	r1, #32
   305a6:	4602      	mov	r2, r0
   305a8:	4419      	add	r1, r3
   305aa:	4630      	mov	r0, r6
   305ac:	f008 fc2e 	bl	38e0c <strncmp>
   305b0:	2800      	cmp	r0, #0
   305b2:	d186      	bne.n	304c2 <pdn_interface_pdn_id_get+0x8e>
   305b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   305b6:	68da      	ldr	r2, [r3, #12]
   305b8:	07d2      	lsls	r2, r2, #31
   305ba:	d582      	bpl.n	304c2 <pdn_interface_pdn_id_get+0x8e>
   305bc:	2509      	movs	r5, #9
   305be:	e0d1      	b.n	30764 <pdn_interface_pdn_id_get+0x330>
   305c0:	4630      	mov	r0, r6
   305c2:	f7ec fd55 	bl	1d070 <strlen>
   305c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   305c8:	69da      	ldr	r2, [r3, #28]
   305ca:	4290      	cmp	r0, r2
   305cc:	f47f af79 	bne.w	304c2 <pdn_interface_pdn_id_get+0x8e>
   305d0:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
   305d4:	4421      	add	r1, r4
   305d6:	3120      	adds	r1, #32
   305d8:	4602      	mov	r2, r0
   305da:	4419      	add	r1, r3
   305dc:	4630      	mov	r0, r6
   305de:	f008 fc15 	bl	38e0c <strncmp>
   305e2:	e76e      	b.n	304c2 <pdn_interface_pdn_id_get+0x8e>
   305e4:	4630      	mov	r0, r6
   305e6:	f7ec fd43 	bl	1d070 <strlen>
   305ea:	68e3      	ldr	r3, [r4, #12]
   305ec:	69da      	ldr	r2, [r3, #28]
   305ee:	4290      	cmp	r0, r2
   305f0:	f47f af44 	bne.w	3047c <pdn_interface_pdn_id_get+0x48>
   305f4:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   305f8:	4429      	add	r1, r5
   305fa:	3120      	adds	r1, #32
   305fc:	4602      	mov	r2, r0
   305fe:	4419      	add	r1, r3
   30600:	4630      	mov	r0, r6
   30602:	f008 fc03 	bl	38e0c <strncmp>
   30606:	e739      	b.n	3047c <pdn_interface_pdn_id_get+0x48>
   30608:	4630      	mov	r0, r6
   3060a:	f7ec fd31 	bl	1d070 <strlen>
   3060e:	68a3      	ldr	r3, [r4, #8]
   30610:	69da      	ldr	r2, [r3, #28]
   30612:	4290      	cmp	r0, r2
   30614:	f47f af2c 	bne.w	30470 <pdn_interface_pdn_id_get+0x3c>
   30618:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   3061c:	4429      	add	r1, r5
   3061e:	3120      	adds	r1, #32
   30620:	4602      	mov	r2, r0
   30622:	4419      	add	r1, r3
   30624:	4630      	mov	r0, r6
   30626:	f008 fbf1 	bl	38e0c <strncmp>
   3062a:	e721      	b.n	30470 <pdn_interface_pdn_id_get+0x3c>
   3062c:	4630      	mov	r0, r6
   3062e:	f7ec fd1f 	bl	1d070 <strlen>
   30632:	6863      	ldr	r3, [r4, #4]
   30634:	69da      	ldr	r2, [r3, #28]
   30636:	4290      	cmp	r0, r2
   30638:	f47f af14 	bne.w	30464 <pdn_interface_pdn_id_get+0x30>
   3063c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   30640:	4429      	add	r1, r5
   30642:	3120      	adds	r1, #32
   30644:	4602      	mov	r2, r0
   30646:	4419      	add	r1, r3
   30648:	4630      	mov	r0, r6
   3064a:	f008 fbdf 	bl	38e0c <strncmp>
   3064e:	e709      	b.n	30464 <pdn_interface_pdn_id_get+0x30>
   30650:	4608      	mov	r0, r1
   30652:	f7ec fd0d 	bl	1d070 <strlen>
   30656:	6823      	ldr	r3, [r4, #0]
   30658:	69da      	ldr	r2, [r3, #28]
   3065a:	4282      	cmp	r2, r0
   3065c:	f47f aefc 	bne.w	30458 <pdn_interface_pdn_id_get+0x24>
   30660:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   30664:	4401      	add	r1, r0
   30666:	3120      	adds	r1, #32
   30668:	4419      	add	r1, r3
   3066a:	4630      	mov	r0, r6
   3066c:	f008 fbce 	bl	38e0c <strncmp>
   30670:	e6f2      	b.n	30458 <pdn_interface_pdn_id_get+0x24>
   30672:	4630      	mov	r0, r6
   30674:	f7ec fcfc 	bl	1d070 <strlen>
   30678:	6923      	ldr	r3, [r4, #16]
   3067a:	69da      	ldr	r2, [r3, #28]
   3067c:	4290      	cmp	r0, r2
   3067e:	f47f af03 	bne.w	30488 <pdn_interface_pdn_id_get+0x54>
   30682:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   30686:	4429      	add	r1, r5
   30688:	3120      	adds	r1, #32
   3068a:	4602      	mov	r2, r0
   3068c:	4419      	add	r1, r3
   3068e:	4630      	mov	r0, r6
   30690:	f008 fbbc 	bl	38e0c <strncmp>
   30694:	e6f8      	b.n	30488 <pdn_interface_pdn_id_get+0x54>
   30696:	4630      	mov	r0, r6
   30698:	f7ec fcea 	bl	1d070 <strlen>
   3069c:	6a23      	ldr	r3, [r4, #32]
   3069e:	69da      	ldr	r2, [r3, #28]
   306a0:	4290      	cmp	r0, r2
   306a2:	f47f af09 	bne.w	304b8 <pdn_interface_pdn_id_get+0x84>
   306a6:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   306aa:	4429      	add	r1, r5
   306ac:	3120      	adds	r1, #32
   306ae:	4602      	mov	r2, r0
   306b0:	4419      	add	r1, r3
   306b2:	4630      	mov	r0, r6
   306b4:	f008 fbaa 	bl	38e0c <strncmp>
   306b8:	e6fe      	b.n	304b8 <pdn_interface_pdn_id_get+0x84>
   306ba:	4630      	mov	r0, r6
   306bc:	f7ec fcd8 	bl	1d070 <strlen>
   306c0:	69e3      	ldr	r3, [r4, #28]
   306c2:	69da      	ldr	r2, [r3, #28]
   306c4:	4290      	cmp	r0, r2
   306c6:	f47f aef1 	bne.w	304ac <pdn_interface_pdn_id_get+0x78>
   306ca:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   306ce:	4429      	add	r1, r5
   306d0:	3120      	adds	r1, #32
   306d2:	4602      	mov	r2, r0
   306d4:	4419      	add	r1, r3
   306d6:	4630      	mov	r0, r6
   306d8:	f008 fb98 	bl	38e0c <strncmp>
   306dc:	e6e6      	b.n	304ac <pdn_interface_pdn_id_get+0x78>
   306de:	4630      	mov	r0, r6
   306e0:	f7ec fcc6 	bl	1d070 <strlen>
   306e4:	69a3      	ldr	r3, [r4, #24]
   306e6:	69da      	ldr	r2, [r3, #28]
   306e8:	4290      	cmp	r0, r2
   306ea:	f47f aed9 	bne.w	304a0 <pdn_interface_pdn_id_get+0x6c>
   306ee:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   306f2:	4429      	add	r1, r5
   306f4:	3120      	adds	r1, #32
   306f6:	4602      	mov	r2, r0
   306f8:	4419      	add	r1, r3
   306fa:	4630      	mov	r0, r6
   306fc:	f008 fb86 	bl	38e0c <strncmp>
   30700:	e6ce      	b.n	304a0 <pdn_interface_pdn_id_get+0x6c>
   30702:	bf00      	nop
   30704:	20023cf4 	.word	0x20023cf4
   30708:	20023cf0 	.word	0x20023cf0
   3070c:	4630      	mov	r0, r6
   3070e:	f7ec fcaf 	bl	1d070 <strlen>
   30712:	6963      	ldr	r3, [r4, #20]
   30714:	69da      	ldr	r2, [r3, #28]
   30716:	4290      	cmp	r0, r2
   30718:	f47f aebc 	bne.w	30494 <pdn_interface_pdn_id_get+0x60>
   3071c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   30720:	4429      	add	r1, r5
   30722:	3120      	adds	r1, #32
   30724:	4602      	mov	r2, r0
   30726:	4419      	add	r1, r3
   30728:	4630      	mov	r0, r6
   3072a:	f008 fb6f 	bl	38e0c <strncmp>
   3072e:	e6b1      	b.n	30494 <pdn_interface_pdn_id_get+0x60>
   30730:	4630      	mov	r0, r6
   30732:	f7ec fc9d 	bl	1d070 <strlen>
   30736:	6923      	ldr	r3, [r4, #16]
   30738:	69da      	ldr	r2, [r3, #28]
   3073a:	4290      	cmp	r0, r2
   3073c:	f47f af0a 	bne.w	30554 <pdn_interface_pdn_id_get+0x120>
   30740:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   30744:	4429      	add	r1, r5
   30746:	3120      	adds	r1, #32
   30748:	4602      	mov	r2, r0
   3074a:	4419      	add	r1, r3
   3074c:	4630      	mov	r0, r6
   3074e:	f008 fb5d 	bl	38e0c <strncmp>
   30752:	2800      	cmp	r0, #0
   30754:	f47f aefe 	bne.w	30554 <pdn_interface_pdn_id_get+0x120>
   30758:	6923      	ldr	r3, [r4, #16]
   3075a:	68da      	ldr	r2, [r3, #12]
   3075c:	07d2      	lsls	r2, r2, #31
   3075e:	f57f aef9 	bpl.w	30554 <pdn_interface_pdn_id_get+0x120>
   30762:	2504      	movs	r5, #4
   30764:	6858      	ldr	r0, [r3, #4]
   30766:	1c43      	adds	r3, r0, #1
   30768:	f47f aead 	bne.w	304c6 <pdn_interface_pdn_id_get+0x92>
   3076c:	4e9d      	ldr	r6, [pc, #628]	; (309e4 <pdn_interface_pdn_id_get+0x5b0>)
   3076e:	4b9e      	ldr	r3, [pc, #632]	; (309e8 <pdn_interface_pdn_id_get+0x5b4>)
   30770:	4a9e      	ldr	r2, [pc, #632]	; (309ec <pdn_interface_pdn_id_get+0x5b8>)
   30772:	f44f 7180 	mov.w	r1, #256	; 0x100
   30776:	4630      	mov	r0, r6
   30778:	f004 fb28 	bl	34dcc <sniprintf>
   3077c:	4c9c      	ldr	r4, [pc, #624]	; (309f0 <pdn_interface_pdn_id_get+0x5bc>)
   3077e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   30782:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   30786:	4a9b      	ldr	r2, [pc, #620]	; (309f4 <pdn_interface_pdn_id_get+0x5c0>)
   30788:	681b      	ldr	r3, [r3, #0]
   3078a:	4430      	add	r0, r6
   3078c:	f8df 8270 	ldr.w	r8, [pc, #624]	; 30a00 <pdn_interface_pdn_id_get+0x5cc>
   30790:	f004 fb1c 	bl	34dcc <sniprintf>
   30794:	4630      	mov	r0, r6
   30796:	f8d8 9000 	ldr.w	r9, [r8]
   3079a:	2700      	movs	r7, #0
   3079c:	f7ec fc68 	bl	1d070 <strlen>
   307a0:	4631      	mov	r1, r6
   307a2:	4602      	mov	r2, r0
   307a4:	463b      	mov	r3, r7
   307a6:	4648      	mov	r0, r9
   307a8:	9701      	str	r7, [sp, #4]
   307aa:	9700      	str	r7, [sp, #0]
   307ac:	f7fe fde0 	bl	2f370 <at_interface_write>
   307b0:	4681      	mov	r9, r0
   307b2:	4630      	mov	r0, r6
   307b4:	f7ec fc5c 	bl	1d070 <strlen>
   307b8:	4548      	cmp	r0, r9
   307ba:	f040 810b 	bne.w	309d4 <pdn_interface_pdn_id_get+0x5a0>
   307be:	463b      	mov	r3, r7
   307c0:	f44f 7280 	mov.w	r2, #256	; 0x100
   307c4:	e9cd 7700 	strd	r7, r7, [sp]
   307c8:	4631      	mov	r1, r6
   307ca:	f8d8 0000 	ldr.w	r0, [r8]
   307ce:	f7fe ff23 	bl	2f618 <at_interface_read>
   307d2:	4607      	mov	r7, r0
   307d4:	4888      	ldr	r0, [pc, #544]	; (309f8 <pdn_interface_pdn_id_get+0x5c4>)
   307d6:	f7ec fc4b 	bl	1d070 <strlen>
   307da:	4287      	cmp	r7, r0
   307dc:	4602      	mov	r2, r0
   307de:	f2c0 80e9 	blt.w	309b4 <pdn_interface_pdn_id_get+0x580>
   307e2:	4631      	mov	r1, r6
   307e4:	4884      	ldr	r0, [pc, #528]	; (309f8 <pdn_interface_pdn_id_get+0x5c4>)
   307e6:	f008 fb11 	bl	38e0c <strncmp>
   307ea:	2800      	cmp	r0, #0
   307ec:	f040 80e2 	bne.w	309b4 <pdn_interface_pdn_id_get+0x580>
   307f0:	4631      	mov	r1, r6
   307f2:	4628      	mov	r0, r5
   307f4:	f7ff f830 	bl	2f858 <pdn_id_get_parser>
   307f8:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   307fc:	6858      	ldr	r0, [r3, #4]
   307fe:	e662      	b.n	304c6 <pdn_interface_pdn_id_get+0x92>
   30800:	4630      	mov	r0, r6
   30802:	f7ec fc35 	bl	1d070 <strlen>
   30806:	6963      	ldr	r3, [r4, #20]
   30808:	69da      	ldr	r2, [r3, #28]
   3080a:	4290      	cmp	r0, r2
   3080c:	f47f aea8 	bne.w	30560 <pdn_interface_pdn_id_get+0x12c>
   30810:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   30814:	4429      	add	r1, r5
   30816:	3120      	adds	r1, #32
   30818:	4602      	mov	r2, r0
   3081a:	4419      	add	r1, r3
   3081c:	4630      	mov	r0, r6
   3081e:	f008 faf5 	bl	38e0c <strncmp>
   30822:	2800      	cmp	r0, #0
   30824:	f47f ae9c 	bne.w	30560 <pdn_interface_pdn_id_get+0x12c>
   30828:	6963      	ldr	r3, [r4, #20]
   3082a:	68da      	ldr	r2, [r3, #12]
   3082c:	07d7      	lsls	r7, r2, #31
   3082e:	f57f ae97 	bpl.w	30560 <pdn_interface_pdn_id_get+0x12c>
   30832:	2505      	movs	r5, #5
   30834:	e796      	b.n	30764 <pdn_interface_pdn_id_get+0x330>
   30836:	4630      	mov	r0, r6
   30838:	f7ec fc1a 	bl	1d070 <strlen>
   3083c:	69a3      	ldr	r3, [r4, #24]
   3083e:	69da      	ldr	r2, [r3, #28]
   30840:	4290      	cmp	r0, r2
   30842:	f47f ae93 	bne.w	3056c <pdn_interface_pdn_id_get+0x138>
   30846:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   3084a:	4429      	add	r1, r5
   3084c:	3120      	adds	r1, #32
   3084e:	4602      	mov	r2, r0
   30850:	4419      	add	r1, r3
   30852:	4630      	mov	r0, r6
   30854:	f008 fada 	bl	38e0c <strncmp>
   30858:	2800      	cmp	r0, #0
   3085a:	f47f ae87 	bne.w	3056c <pdn_interface_pdn_id_get+0x138>
   3085e:	69a3      	ldr	r3, [r4, #24]
   30860:	68da      	ldr	r2, [r3, #12]
   30862:	07d5      	lsls	r5, r2, #31
   30864:	f57f ae82 	bpl.w	3056c <pdn_interface_pdn_id_get+0x138>
   30868:	2506      	movs	r5, #6
   3086a:	e77b      	b.n	30764 <pdn_interface_pdn_id_get+0x330>
   3086c:	4630      	mov	r0, r6
   3086e:	f7ec fbff 	bl	1d070 <strlen>
   30872:	69e3      	ldr	r3, [r4, #28]
   30874:	69da      	ldr	r2, [r3, #28]
   30876:	4290      	cmp	r0, r2
   30878:	f47f ae7e 	bne.w	30578 <pdn_interface_pdn_id_get+0x144>
   3087c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   30880:	4429      	add	r1, r5
   30882:	3120      	adds	r1, #32
   30884:	4602      	mov	r2, r0
   30886:	4419      	add	r1, r3
   30888:	4630      	mov	r0, r6
   3088a:	f008 fabf 	bl	38e0c <strncmp>
   3088e:	2800      	cmp	r0, #0
   30890:	f47f ae72 	bne.w	30578 <pdn_interface_pdn_id_get+0x144>
   30894:	69e3      	ldr	r3, [r4, #28]
   30896:	68da      	ldr	r2, [r3, #12]
   30898:	07d0      	lsls	r0, r2, #31
   3089a:	f57f ae6d 	bpl.w	30578 <pdn_interface_pdn_id_get+0x144>
   3089e:	2507      	movs	r5, #7
   308a0:	e760      	b.n	30764 <pdn_interface_pdn_id_get+0x330>
   308a2:	4630      	mov	r0, r6
   308a4:	f7ec fbe4 	bl	1d070 <strlen>
   308a8:	68a3      	ldr	r3, [r4, #8]
   308aa:	69da      	ldr	r2, [r3, #28]
   308ac:	4290      	cmp	r0, r2
   308ae:	f47f ae45 	bne.w	3053c <pdn_interface_pdn_id_get+0x108>
   308b2:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   308b6:	4429      	add	r1, r5
   308b8:	3120      	adds	r1, #32
   308ba:	4602      	mov	r2, r0
   308bc:	4419      	add	r1, r3
   308be:	4630      	mov	r0, r6
   308c0:	f008 faa4 	bl	38e0c <strncmp>
   308c4:	2800      	cmp	r0, #0
   308c6:	f47f ae39 	bne.w	3053c <pdn_interface_pdn_id_get+0x108>
   308ca:	68a3      	ldr	r3, [r4, #8]
   308cc:	68da      	ldr	r2, [r3, #12]
   308ce:	07d0      	lsls	r0, r2, #31
   308d0:	f57f ae34 	bpl.w	3053c <pdn_interface_pdn_id_get+0x108>
   308d4:	2502      	movs	r5, #2
   308d6:	e745      	b.n	30764 <pdn_interface_pdn_id_get+0x330>
   308d8:	4630      	mov	r0, r6
   308da:	f7ec fbc9 	bl	1d070 <strlen>
   308de:	68e3      	ldr	r3, [r4, #12]
   308e0:	69da      	ldr	r2, [r3, #28]
   308e2:	4290      	cmp	r0, r2
   308e4:	f47f ae30 	bne.w	30548 <pdn_interface_pdn_id_get+0x114>
   308e8:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   308ec:	4439      	add	r1, r7
   308ee:	3120      	adds	r1, #32
   308f0:	4602      	mov	r2, r0
   308f2:	4419      	add	r1, r3
   308f4:	4630      	mov	r0, r6
   308f6:	f008 fa89 	bl	38e0c <strncmp>
   308fa:	2800      	cmp	r0, #0
   308fc:	f47f ae24 	bne.w	30548 <pdn_interface_pdn_id_get+0x114>
   30900:	68e3      	ldr	r3, [r4, #12]
   30902:	68da      	ldr	r2, [r3, #12]
   30904:	07d1      	lsls	r1, r2, #31
   30906:	f53f af2d 	bmi.w	30764 <pdn_interface_pdn_id_get+0x330>
   3090a:	e61d      	b.n	30548 <pdn_interface_pdn_id_get+0x114>
   3090c:	4630      	mov	r0, r6
   3090e:	f7ec fbaf 	bl	1d070 <strlen>
   30912:	6a23      	ldr	r3, [r4, #32]
   30914:	69da      	ldr	r2, [r3, #28]
   30916:	4290      	cmp	r0, r2
   30918:	f47f ae34 	bne.w	30584 <pdn_interface_pdn_id_get+0x150>
   3091c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   30920:	4429      	add	r1, r5
   30922:	3120      	adds	r1, #32
   30924:	4602      	mov	r2, r0
   30926:	4419      	add	r1, r3
   30928:	4630      	mov	r0, r6
   3092a:	f008 fa6f 	bl	38e0c <strncmp>
   3092e:	2800      	cmp	r0, #0
   30930:	f47f ae28 	bne.w	30584 <pdn_interface_pdn_id_get+0x150>
   30934:	6a23      	ldr	r3, [r4, #32]
   30936:	68da      	ldr	r2, [r3, #12]
   30938:	07d1      	lsls	r1, r2, #31
   3093a:	f57f ae23 	bpl.w	30584 <pdn_interface_pdn_id_get+0x150>
   3093e:	2508      	movs	r5, #8
   30940:	e710      	b.n	30764 <pdn_interface_pdn_id_get+0x330>
   30942:	4630      	mov	r0, r6
   30944:	f7ec fb94 	bl	1d070 <strlen>
   30948:	6863      	ldr	r3, [r4, #4]
   3094a:	69da      	ldr	r2, [r3, #28]
   3094c:	4290      	cmp	r0, r2
   3094e:	f47f adef 	bne.w	30530 <pdn_interface_pdn_id_get+0xfc>
   30952:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   30956:	4429      	add	r1, r5
   30958:	3120      	adds	r1, #32
   3095a:	4602      	mov	r2, r0
   3095c:	4419      	add	r1, r3
   3095e:	4630      	mov	r0, r6
   30960:	f008 fa54 	bl	38e0c <strncmp>
   30964:	2800      	cmp	r0, #0
   30966:	f47f ade3 	bne.w	30530 <pdn_interface_pdn_id_get+0xfc>
   3096a:	6863      	ldr	r3, [r4, #4]
   3096c:	68da      	ldr	r2, [r3, #12]
   3096e:	07d5      	lsls	r5, r2, #31
   30970:	f57f adde 	bpl.w	30530 <pdn_interface_pdn_id_get+0xfc>
   30974:	2501      	movs	r5, #1
   30976:	e6f5      	b.n	30764 <pdn_interface_pdn_id_get+0x330>
   30978:	4608      	mov	r0, r1
   3097a:	f7ec fb79 	bl	1d070 <strlen>
   3097e:	6823      	ldr	r3, [r4, #0]
   30980:	69da      	ldr	r2, [r3, #28]
   30982:	4290      	cmp	r0, r2
   30984:	f47f adce 	bne.w	30524 <pdn_interface_pdn_id_get+0xf0>
   30988:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   3098c:	4429      	add	r1, r5
   3098e:	3120      	adds	r1, #32
   30990:	4602      	mov	r2, r0
   30992:	4419      	add	r1, r3
   30994:	4630      	mov	r0, r6
   30996:	f008 fa39 	bl	38e0c <strncmp>
   3099a:	4605      	mov	r5, r0
   3099c:	2800      	cmp	r0, #0
   3099e:	f47f adc1 	bne.w	30524 <pdn_interface_pdn_id_get+0xf0>
   309a2:	6823      	ldr	r3, [r4, #0]
   309a4:	68da      	ldr	r2, [r3, #12]
   309a6:	07d7      	lsls	r7, r2, #31
   309a8:	f53f aedc 	bmi.w	30764 <pdn_interface_pdn_id_get+0x330>
   309ac:	e5ba      	b.n	30524 <pdn_interface_pdn_id_get+0xf0>
   309ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   309b2:	4770      	bx	lr
   309b4:	4811      	ldr	r0, [pc, #68]	; (309fc <pdn_interface_pdn_id_get+0x5c8>)
   309b6:	f7ec fb5b 	bl	1d070 <strlen>
   309ba:	490a      	ldr	r1, [pc, #40]	; (309e4 <pdn_interface_pdn_id_get+0x5b0>)
   309bc:	4602      	mov	r2, r0
   309be:	480f      	ldr	r0, [pc, #60]	; (309fc <pdn_interface_pdn_id_get+0x5c8>)
   309c0:	f008 fa24 	bl	38e0c <strncmp>
   309c4:	b930      	cbnz	r0, 309d4 <pdn_interface_pdn_id_get+0x5a0>
   309c6:	2008      	movs	r0, #8
   309c8:	f7f6 fdd8 	bl	2757c <bsd_os_errno_set>
   309cc:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   309d0:	6858      	ldr	r0, [r3, #4]
   309d2:	e578      	b.n	304c6 <pdn_interface_pdn_id_get+0x92>
   309d4:	2005      	movs	r0, #5
   309d6:	f7f6 fdd1 	bl	2757c <bsd_os_errno_set>
   309da:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   309de:	6858      	ldr	r0, [r3, #4]
   309e0:	e571      	b.n	304c6 <pdn_interface_pdn_id_get+0x92>
   309e2:	bf00      	nop
   309e4:	20023bf4 	.word	0x20023bf4
   309e8:	0003a248 	.word	0x0003a248
   309ec:	0003a284 	.word	0x0003a284
   309f0:	20023cf4 	.word	0x20023cf4
   309f4:	0003a244 	.word	0x0003a244
   309f8:	0003a258 	.word	0x0003a258
   309fc:	0003a294 	.word	0x0003a294
   30a00:	20023bf0 	.word	0x20023bf0

00030a04 <bsd_platform_error_handler>:
   30a04:	b508      	push	{r3, lr}
   30a06:	f7ed f961 	bl	1dccc <bsd_recoverable_error_handler>
   30a0a:	bd08      	pop	{r3, pc}

00030a0c <bsd_init>:
   30a0c:	b160      	cbz	r0, 30a28 <bsd_init+0x1c>
   30a0e:	b510      	push	{r4, lr}
   30a10:	4c07      	ldr	r4, [pc, #28]	; (30a30 <bsd_init+0x24>)
   30a12:	7823      	ldrb	r3, [r4, #0]
   30a14:	b92b      	cbnz	r3, 30a22 <bsd_init+0x16>
   30a16:	f000 f81b 	bl	30a50 <bsd_platform_init>
   30a1a:	b908      	cbnz	r0, 30a20 <bsd_init+0x14>
   30a1c:	2301      	movs	r3, #1
   30a1e:	7023      	strb	r3, [r4, #0]
   30a20:	bd10      	pop	{r4, pc}
   30a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30a26:	bd10      	pop	{r4, pc}
   30a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30a2c:	4770      	bx	lr
   30a2e:	bf00      	nop
   30a30:	2002c6e5 	.word	0x2002c6e5

00030a34 <unimplemented_method>:
   30a34:	b40f      	push	{r0, r1, r2, r3}
   30a36:	b508      	push	{r3, lr}
   30a38:	202d      	movs	r0, #45	; 0x2d
   30a3a:	f7f6 fd9f 	bl	2757c <bsd_os_errno_set>
   30a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30a46:	b004      	add	sp, #16
   30a48:	4770      	bx	lr
   30a4a:	bf00      	nop

00030a4c <rpc_transport_ipc_fault_handler>:
   30a4c:	f7ff bfda 	b.w	30a04 <bsd_platform_error_handler>

00030a50 <bsd_platform_init>:
   30a50:	b5f0      	push	{r4, r5, r6, r7, lr}
   30a52:	f04f 0c00 	mov.w	ip, #0
   30a56:	f247 0660 	movw	r6, #28768	; 0x7060
   30a5a:	f24b 0260 	movw	r2, #45152	; 0xb060
   30a5e:	6843      	ldr	r3, [r0, #4]
   30a60:	4d3a      	ldr	r5, [pc, #232]	; (30b4c <bsd_platform_init+0xfc>)
   30a62:	4607      	mov	r7, r0
   30a64:	602b      	str	r3, [r5, #0]
   30a66:	7801      	ldrb	r1, [r0, #0]
   30a68:	2006      	movs	r0, #6
   30a6a:	4561      	cmp	r1, ip
   30a6c:	bf08      	it	eq
   30a6e:	4632      	moveq	r2, r6
   30a70:	4413      	add	r3, r2
   30a72:	4c37      	ldr	r4, [pc, #220]	; (30b50 <bsd_platform_init+0x100>)
   30a74:	60ab      	str	r3, [r5, #8]
   30a76:	68b9      	ldr	r1, [r7, #8]
   30a78:	6063      	str	r3, [r4, #4]
   30a7a:	4b36      	ldr	r3, [pc, #216]	; (30b54 <bsd_platform_init+0x104>)
   30a7c:	b093      	sub	sp, #76	; 0x4c
   30a7e:	606a      	str	r2, [r5, #4]
   30a80:	f8a4 c000 	strh.w	ip, [r4]
   30a84:	1a8a      	subs	r2, r1, r2
   30a86:	60ea      	str	r2, [r5, #12]
   30a88:	60a2      	str	r2, [r4, #8]
   30a8a:	81a0      	strh	r0, [r4, #12]
   30a8c:	6123      	str	r3, [r4, #16]
   30a8e:	f001 f8b7 	bl	31c00 <nrf_mem_init>
   30a92:	2800      	cmp	r0, #0
   30a94:	d156      	bne.n	30b44 <bsd_platform_init+0xf4>
   30a96:	4621      	mov	r1, r4
   30a98:	a801      	add	r0, sp, #4
   30a9a:	f001 f925 	bl	31ce8 <nrf_mem_register>
   30a9e:	2800      	cmp	r0, #0
   30aa0:	d150      	bne.n	30b44 <bsd_platform_init+0xf4>
   30aa2:	f7f6 feff 	bl	278a4 <bsd_os_init>
   30aa6:	f7fd fbff 	bl	2e2a8 <rpc_framework_init>
   30aaa:	2800      	cmp	r0, #0
   30aac:	d14a      	bne.n	30b44 <bsd_platform_init+0xf4>
   30aae:	783a      	ldrb	r2, [r7, #0]
   30ab0:	682b      	ldr	r3, [r5, #0]
   30ab2:	bb32      	cbnz	r2, 30b02 <bsd_platform_init+0xb2>
   30ab4:	4606      	mov	r6, r0
   30ab6:	2220      	movs	r2, #32
   30ab8:	2408      	movs	r4, #8
   30aba:	2500      	movs	r5, #0
   30abc:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   30ac0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   30ac4:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   30ac8:	4411      	add	r1, r2
   30aca:	9302      	str	r3, [sp, #8]
   30acc:	e9cd 6008 	strd	r6, r0, [sp, #32]
   30ad0:	910c      	str	r1, [sp, #48]	; 0x30
   30ad2:	9203      	str	r2, [sp, #12]
   30ad4:	f103 0140 	add.w	r1, r3, #64	; 0x40
   30ad8:	9205      	str	r2, [sp, #20]
   30ada:	9207      	str	r2, [sp, #28]
   30adc:	eb0d 0004 	add.w	r0, sp, r4
   30ae0:	189a      	adds	r2, r3, r2
   30ae2:	3360      	adds	r3, #96	; 0x60
   30ae4:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   30ae8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   30aec:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   30af0:	940f      	str	r4, [sp, #60]	; 0x3c
   30af2:	9104      	str	r1, [sp, #16]
   30af4:	9206      	str	r2, [sp, #24]
   30af6:	930a      	str	r3, [sp, #40]	; 0x28
   30af8:	f7fa fb3a 	bl	2b170 <rpc_transport_ipc_init>
   30afc:	b128      	cbz	r0, 30b0a <bsd_platform_init+0xba>
   30afe:	b013      	add	sp, #76	; 0x4c
   30b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30b02:	441e      	add	r6, r3
   30b04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   30b08:	e7d5      	b.n	30ab6 <bsd_platform_init+0x66>
   30b0a:	f001 fddd 	bl	326c8 <interface_init>
   30b0e:	b9c8      	cbnz	r0, 30b44 <bsd_platform_init+0xf4>
   30b10:	f7fe fcac 	bl	2f46c <at_interface_init>
   30b14:	b9b0      	cbnz	r0, 30b44 <bsd_platform_init+0xf4>
   30b16:	f7fb fe4b 	bl	2c7b0 <ip_interface_init>
   30b1a:	b998      	cbnz	r0, 30b44 <bsd_platform_init+0xf4>
   30b1c:	f7fb f902 	bl	2bd24 <tls_interface_init>
   30b20:	b980      	cbnz	r0, 30b44 <bsd_platform_init+0xf4>
   30b22:	f001 faed 	bl	32100 <mfu_interface_init>
   30b26:	b968      	cbnz	r0, 30b44 <bsd_platform_init+0xf4>
   30b28:	f7fe feee 	bl	2f908 <pdn_interface_init>
   30b2c:	b950      	cbnz	r0, 30b44 <bsd_platform_init+0xf4>
   30b2e:	f7fe faf3 	bl	2f118 <gnss_interface_init>
   30b32:	b938      	cbnz	r0, 30b44 <bsd_platform_init+0xf4>
   30b34:	f7f9 fd5a 	bl	2a5ec <logobj_interface_init>
   30b38:	1b40      	subs	r0, r0, r5
   30b3a:	bf18      	it	ne
   30b3c:	2001      	movne	r0, #1
   30b3e:	4240      	negs	r0, r0
   30b40:	b013      	add	sp, #76	; 0x4c
   30b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30b48:	b013      	add	sp, #76	; 0x4c
   30b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30b4c:	20023d30 	.word	0x20023d30
   30b50:	20023d1c 	.word	0x20023d1c
   30b54:	0003a3e8 	.word	0x0003a3e8

00030b58 <bsd_platform_af_method_table_get>:
   30b58:	2805      	cmp	r0, #5
   30b5a:	d02a      	beq.n	30bb2 <bsd_platform_af_method_table_get+0x5a>
   30b5c:	b508      	push	{r3, lr}
   30b5e:	d914      	bls.n	30b8a <bsd_platform_af_method_table_get+0x32>
   30b60:	280a      	cmp	r0, #10
   30b62:	d016      	beq.n	30b92 <bsd_platform_af_method_table_get+0x3a>
   30b64:	2866      	cmp	r0, #102	; 0x66
   30b66:	d11f      	bne.n	30ba8 <bsd_platform_af_method_table_get+0x50>
   30b68:	f240 2302 	movw	r3, #514	; 0x202
   30b6c:	429a      	cmp	r2, r3
   30b6e:	d035      	beq.n	30bdc <bsd_platform_af_method_table_get+0x84>
   30b70:	f240 2305 	movw	r3, #517	; 0x205
   30b74:	429a      	cmp	r2, r3
   30b76:	d035      	beq.n	30be4 <bsd_platform_af_method_table_get+0x8c>
   30b78:	f240 2301 	movw	r3, #513	; 0x201
   30b7c:	429a      	cmp	r2, r3
   30b7e:	d02f      	beq.n	30be0 <bsd_platform_af_method_table_get+0x88>
   30b80:	202b      	movs	r0, #43	; 0x2b
   30b82:	f7f6 fcfb 	bl	2757c <bsd_os_errno_set>
   30b86:	2000      	movs	r0, #0
   30b88:	bd08      	pop	{r3, pc}
   30b8a:	2801      	cmp	r0, #1
   30b8c:	d016      	beq.n	30bbc <bsd_platform_af_method_table_get+0x64>
   30b8e:	2802      	cmp	r0, #2
   30b90:	d10a      	bne.n	30ba8 <bsd_platform_af_method_table_get+0x50>
   30b92:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   30b96:	d21a      	bcs.n	30bce <bsd_platform_af_method_table_get+0x76>
   30b98:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   30b9c:	d21a      	bcs.n	30bd4 <bsd_platform_af_method_table_get+0x7c>
   30b9e:	3a01      	subs	r2, #1
   30ba0:	2a01      	cmp	r2, #1
   30ba2:	d8ed      	bhi.n	30b80 <bsd_platform_af_method_table_get+0x28>
   30ba4:	4810      	ldr	r0, [pc, #64]	; (30be8 <bsd_platform_af_method_table_get+0x90>)
   30ba6:	bd08      	pop	{r3, pc}
   30ba8:	2016      	movs	r0, #22
   30baa:	f7f6 fce7 	bl	2757c <bsd_os_errno_set>
   30bae:	2000      	movs	r0, #0
   30bb0:	bd08      	pop	{r3, pc}
   30bb2:	2903      	cmp	r1, #3
   30bb4:	480d      	ldr	r0, [pc, #52]	; (30bec <bsd_platform_af_method_table_get+0x94>)
   30bb6:	bf18      	it	ne
   30bb8:	2000      	movne	r0, #0
   30bba:	4770      	bx	lr
   30bbc:	f240 2303 	movw	r3, #515	; 0x203
   30bc0:	429a      	cmp	r2, r3
   30bc2:	d009      	beq.n	30bd8 <bsd_platform_af_method_table_get+0x80>
   30bc4:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   30bc8:	d1da      	bne.n	30b80 <bsd_platform_af_method_table_get+0x28>
   30bca:	4809      	ldr	r0, [pc, #36]	; (30bf0 <bsd_platform_af_method_table_get+0x98>)
   30bcc:	bd08      	pop	{r3, pc}
   30bce:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   30bd2:	d1d5      	bne.n	30b80 <bsd_platform_af_method_table_get+0x28>
   30bd4:	4807      	ldr	r0, [pc, #28]	; (30bf4 <bsd_platform_af_method_table_get+0x9c>)
   30bd6:	bd08      	pop	{r3, pc}
   30bd8:	4807      	ldr	r0, [pc, #28]	; (30bf8 <bsd_platform_af_method_table_get+0xa0>)
   30bda:	bd08      	pop	{r3, pc}
   30bdc:	4807      	ldr	r0, [pc, #28]	; (30bfc <bsd_platform_af_method_table_get+0xa4>)
   30bde:	bd08      	pop	{r3, pc}
   30be0:	4807      	ldr	r0, [pc, #28]	; (30c00 <bsd_platform_af_method_table_get+0xa8>)
   30be2:	bd08      	pop	{r3, pc}
   30be4:	4807      	ldr	r0, [pc, #28]	; (30c04 <bsd_platform_af_method_table_get+0xac>)
   30be6:	bd08      	pop	{r3, pc}
   30be8:	0003a2d0 	.word	0x0003a2d0
   30bec:	0003a3c0 	.word	0x0003a3c0
   30bf0:	0003a370 	.word	0x0003a370
   30bf4:	0003a2f8 	.word	0x0003a2f8
   30bf8:	0003a320 	.word	0x0003a320
   30bfc:	0003a348 	.word	0x0003a348
   30c00:	0003a2a8 	.word	0x0003a2a8
   30c04:	0003a398 	.word	0x0003a398

00030c08 <bsd_platform_fd_method_table_get>:
   30c08:	b538      	push	{r3, r4, r5, lr}
   30c0a:	4605      	mov	r5, r0
   30c0c:	f001 fe8e 	bl	3292c <interface_socket_from_handle_get>
   30c10:	4604      	mov	r4, r0
   30c12:	b960      	cbnz	r0, 30c2e <bsd_platform_fd_method_table_get+0x26>
   30c14:	4b2c      	ldr	r3, [pc, #176]	; (30cc8 <bsd_platform_fd_method_table_get+0xc0>)
   30c16:	429d      	cmp	r5, r3
   30c18:	d02f      	beq.n	30c7a <bsd_platform_fd_method_table_get+0x72>
   30c1a:	0c2b      	lsrs	r3, r5, #16
   30c1c:	4a2b      	ldr	r2, [pc, #172]	; (30ccc <bsd_platform_fd_method_table_get+0xc4>)
   30c1e:	041b      	lsls	r3, r3, #16
   30c20:	4293      	cmp	r3, r2
   30c22:	d03d      	beq.n	30ca0 <bsd_platform_fd_method_table_get+0x98>
   30c24:	4b2a      	ldr	r3, [pc, #168]	; (30cd0 <bsd_platform_fd_method_table_get+0xc8>)
   30c26:	429d      	cmp	r5, r3
   30c28:	d149      	bne.n	30cbe <bsd_platform_fd_method_table_get+0xb6>
   30c2a:	482a      	ldr	r0, [pc, #168]	; (30cd4 <bsd_platform_fd_method_table_get+0xcc>)
   30c2c:	bd38      	pop	{r3, r4, r5, pc}
   30c2e:	68c3      	ldr	r3, [r0, #12]
   30c30:	6942      	ldr	r2, [r0, #20]
   30c32:	2b05      	cmp	r3, #5
   30c34:	d036      	beq.n	30ca4 <bsd_platform_fd_method_table_get+0x9c>
   30c36:	d911      	bls.n	30c5c <bsd_platform_fd_method_table_get+0x54>
   30c38:	2b0a      	cmp	r3, #10
   30c3a:	d013      	beq.n	30c64 <bsd_platform_fd_method_table_get+0x5c>
   30c3c:	2b66      	cmp	r3, #102	; 0x66
   30c3e:	d11e      	bne.n	30c7e <bsd_platform_fd_method_table_get+0x76>
   30c40:	f240 2302 	movw	r3, #514	; 0x202
   30c44:	429a      	cmp	r2, r3
   30c46:	d02b      	beq.n	30ca0 <bsd_platform_fd_method_table_get+0x98>
   30c48:	f240 2305 	movw	r3, #517	; 0x205
   30c4c:	429a      	cmp	r2, r3
   30c4e:	d02f      	beq.n	30cb0 <bsd_platform_fd_method_table_get+0xa8>
   30c50:	f240 2301 	movw	r3, #513	; 0x201
   30c54:	429a      	cmp	r2, r3
   30c56:	d11e      	bne.n	30c96 <bsd_platform_fd_method_table_get+0x8e>
   30c58:	481f      	ldr	r0, [pc, #124]	; (30cd8 <bsd_platform_fd_method_table_get+0xd0>)
   30c5a:	bd38      	pop	{r3, r4, r5, pc}
   30c5c:	2b01      	cmp	r3, #1
   30c5e:	d013      	beq.n	30c88 <bsd_platform_fd_method_table_get+0x80>
   30c60:	2b02      	cmp	r3, #2
   30c62:	d10c      	bne.n	30c7e <bsd_platform_fd_method_table_get+0x76>
   30c64:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   30c68:	d224      	bcs.n	30cb4 <bsd_platform_fd_method_table_get+0xac>
   30c6a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   30c6e:	d224      	bcs.n	30cba <bsd_platform_fd_method_table_get+0xb2>
   30c70:	3a01      	subs	r2, #1
   30c72:	2a01      	cmp	r2, #1
   30c74:	d80f      	bhi.n	30c96 <bsd_platform_fd_method_table_get+0x8e>
   30c76:	4819      	ldr	r0, [pc, #100]	; (30cdc <bsd_platform_fd_method_table_get+0xd4>)
   30c78:	bd38      	pop	{r3, r4, r5, pc}
   30c7a:	4819      	ldr	r0, [pc, #100]	; (30ce0 <bsd_platform_fd_method_table_get+0xd8>)
   30c7c:	bd38      	pop	{r3, r4, r5, pc}
   30c7e:	2016      	movs	r0, #22
   30c80:	f7f6 fc7c 	bl	2757c <bsd_os_errno_set>
   30c84:	2000      	movs	r0, #0
   30c86:	bd38      	pop	{r3, r4, r5, pc}
   30c88:	f240 2303 	movw	r3, #515	; 0x203
   30c8c:	429a      	cmp	r2, r3
   30c8e:	d0f4      	beq.n	30c7a <bsd_platform_fd_method_table_get+0x72>
   30c90:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   30c94:	d0c9      	beq.n	30c2a <bsd_platform_fd_method_table_get+0x22>
   30c96:	202b      	movs	r0, #43	; 0x2b
   30c98:	f7f6 fc70 	bl	2757c <bsd_os_errno_set>
   30c9c:	2000      	movs	r0, #0
   30c9e:	bd38      	pop	{r3, r4, r5, pc}
   30ca0:	4810      	ldr	r0, [pc, #64]	; (30ce4 <bsd_platform_fd_method_table_get+0xdc>)
   30ca2:	bd38      	pop	{r3, r4, r5, pc}
   30ca4:	6903      	ldr	r3, [r0, #16]
   30ca6:	4810      	ldr	r0, [pc, #64]	; (30ce8 <bsd_platform_fd_method_table_get+0xe0>)
   30ca8:	2b03      	cmp	r3, #3
   30caa:	bf18      	it	ne
   30cac:	2000      	movne	r0, #0
   30cae:	bd38      	pop	{r3, r4, r5, pc}
   30cb0:	480e      	ldr	r0, [pc, #56]	; (30cec <bsd_platform_fd_method_table_get+0xe4>)
   30cb2:	bd38      	pop	{r3, r4, r5, pc}
   30cb4:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   30cb8:	d1ed      	bne.n	30c96 <bsd_platform_fd_method_table_get+0x8e>
   30cba:	480d      	ldr	r0, [pc, #52]	; (30cf0 <bsd_platform_fd_method_table_get+0xe8>)
   30cbc:	bd38      	pop	{r3, r4, r5, pc}
   30cbe:	2009      	movs	r0, #9
   30cc0:	f7f6 fc5c 	bl	2757c <bsd_os_errno_set>
   30cc4:	4620      	mov	r0, r4
   30cc6:	bd38      	pop	{r3, r4, r5, pc}
   30cc8:	49765432 	.word	0x49765432
   30ccc:	789a0000 	.word	0x789a0000
   30cd0:	49765443 	.word	0x49765443
   30cd4:	0003a370 	.word	0x0003a370
   30cd8:	0003a2a8 	.word	0x0003a2a8
   30cdc:	0003a2d0 	.word	0x0003a2d0
   30ce0:	0003a320 	.word	0x0003a320
   30ce4:	0003a348 	.word	0x0003a348
   30ce8:	0003a3c0 	.word	0x0003a3c0
   30cec:	0003a398 	.word	0x0003a398
   30cf0:	0003a2f8 	.word	0x0003a2f8

00030cf4 <bsd_platform_getaddrinfo>:
   30cf4:	f7fc bec6 	b.w	2da84 <ip_interface_getaddrinfo>

00030cf8 <bsd_platform_freeaddrinfo>:
   30cf8:	f7fc bfc2 	b.w	2dc80 <ip_interface_freeaddrinfo>

00030cfc <bsd_platform_poll>:
   30cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30d00:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   30d04:	b083      	sub	sp, #12
   30d06:	9200      	str	r2, [sp, #0]
   30d08:	2800      	cmp	r0, #0
   30d0a:	d048      	beq.n	30d9e <bsd_platform_poll+0xa2>
   30d0c:	1e4b      	subs	r3, r1, #1
   30d0e:	2b08      	cmp	r3, #8
   30d10:	d845      	bhi.n	30d9e <bsd_platform_poll+0xa2>
   30d12:	4680      	mov	r8, r0
   30d14:	4605      	mov	r5, r0
   30d16:	2400      	movs	r4, #0
   30d18:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   30d1c:	88ab      	ldrh	r3, [r5, #4]
   30d1e:	6828      	ldr	r0, [r5, #0]
   30d20:	f003 0303 	and.w	r3, r3, #3
   30d24:	a901      	add	r1, sp, #4
   30d26:	f043 061c 	orr.w	r6, r3, #28
   30d2a:	f001 fe0d 	bl	32948 <interface_socket_event_get>
   30d2e:	9b01      	ldr	r3, [sp, #4]
   30d30:	3508      	adds	r5, #8
   30d32:	4033      	ands	r3, r6
   30d34:	f825 3c02 	strh.w	r3, [r5, #-2]
   30d38:	b103      	cbz	r3, 30d3c <bsd_platform_poll+0x40>
   30d3a:	3401      	adds	r4, #1
   30d3c:	42af      	cmp	r7, r5
   30d3e:	d1ed      	bne.n	30d1c <bsd_platform_poll+0x20>
   30d40:	bb9c      	cbnz	r4, 30daa <bsd_platform_poll+0xae>
   30d42:	4669      	mov	r1, sp
   30d44:	4640      	mov	r0, r8
   30d46:	f7f6 fb61 	bl	2740c <bsd_os_timedwait>
   30d4a:	4607      	mov	r7, r0
   30d4c:	b108      	cbz	r0, 30d52 <bsd_platform_poll+0x56>
   30d4e:	283c      	cmp	r0, #60	; 0x3c
   30d50:	d11d      	bne.n	30d8e <bsd_platform_poll+0x92>
   30d52:	46c1      	mov	r9, r8
   30d54:	2600      	movs	r6, #0
   30d56:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   30d5a:	f8d9 0000 	ldr.w	r0, [r9]
   30d5e:	f003 0303 	and.w	r3, r3, #3
   30d62:	a901      	add	r1, sp, #4
   30d64:	f043 041c 	orr.w	r4, r3, #28
   30d68:	f001 fdee 	bl	32948 <interface_socket_event_get>
   30d6c:	9b01      	ldr	r3, [sp, #4]
   30d6e:	f109 0908 	add.w	r9, r9, #8
   30d72:	4023      	ands	r3, r4
   30d74:	f829 3c02 	strh.w	r3, [r9, #-2]
   30d78:	b103      	cbz	r3, 30d7c <bsd_platform_poll+0x80>
   30d7a:	3601      	adds	r6, #1
   30d7c:	454d      	cmp	r5, r9
   30d7e:	d1ea      	bne.n	30d56 <bsd_platform_poll+0x5a>
   30d80:	b90e      	cbnz	r6, 30d86 <bsd_platform_poll+0x8a>
   30d82:	2f00      	cmp	r7, #0
   30d84:	d0dd      	beq.n	30d42 <bsd_platform_poll+0x46>
   30d86:	4630      	mov	r0, r6
   30d88:	b003      	add	sp, #12
   30d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30d8e:	2023      	movs	r0, #35	; 0x23
   30d90:	f7f6 fbf4 	bl	2757c <bsd_os_errno_set>
   30d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30d98:	b003      	add	sp, #12
   30d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30d9e:	2016      	movs	r0, #22
   30da0:	f7f6 fbec 	bl	2757c <bsd_os_errno_set>
   30da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30da8:	e7ee      	b.n	30d88 <bsd_platform_poll+0x8c>
   30daa:	4620      	mov	r0, r4
   30dac:	e7ec      	b.n	30d88 <bsd_platform_poll+0x8c>
   30dae:	bf00      	nop

00030db0 <bsd_platform_fcntl>:
   30db0:	b508      	push	{r3, lr}
   30db2:	4b06      	ldr	r3, [pc, #24]	; (30dcc <bsd_platform_fcntl+0x1c>)
   30db4:	4298      	cmp	r0, r3
   30db6:	d003      	beq.n	30dc0 <bsd_platform_fcntl+0x10>
   30db8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30dbc:	f001 be6e 	b.w	32a9c <interface_socket_fcntl>
   30dc0:	202d      	movs	r0, #45	; 0x2d
   30dc2:	f7f6 fbdb 	bl	2757c <bsd_os_errno_set>
   30dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30dca:	bd08      	pop	{r3, pc}
   30dcc:	49765432 	.word	0x49765432

00030dd0 <linked_list_init>:
   30dd0:	b128      	cbz	r0, 30dde <linked_list_init+0xe>
   30dd2:	2300      	movs	r3, #0
   30dd4:	6003      	str	r3, [r0, #0]
   30dd6:	e9c0 3301 	strd	r3, r3, [r0, #4]
   30dda:	4618      	mov	r0, r3
   30ddc:	4770      	bx	lr
   30dde:	2007      	movs	r0, #7
   30de0:	4770      	bx	lr
   30de2:	bf00      	nop

00030de4 <linked_list_push>:
   30de4:	6802      	ldr	r2, [r0, #0]
   30de6:	4603      	mov	r3, r0
   30de8:	3201      	adds	r2, #1
   30dea:	d00e      	beq.n	30e0a <linked_list_push+0x26>
   30dec:	2200      	movs	r2, #0
   30dee:	600a      	str	r2, [r1, #0]
   30df0:	6802      	ldr	r2, [r0, #0]
   30df2:	b13a      	cbz	r2, 30e04 <linked_list_push+0x20>
   30df4:	6882      	ldr	r2, [r0, #8]
   30df6:	6011      	str	r1, [r2, #0]
   30df8:	6081      	str	r1, [r0, #8]
   30dfa:	681a      	ldr	r2, [r3, #0]
   30dfc:	2000      	movs	r0, #0
   30dfe:	3201      	adds	r2, #1
   30e00:	601a      	str	r2, [r3, #0]
   30e02:	4770      	bx	lr
   30e04:	e9c0 1101 	strd	r1, r1, [r0, #4]
   30e08:	e7f7      	b.n	30dfa <linked_list_push+0x16>
   30e0a:	2004      	movs	r0, #4
   30e0c:	4770      	bx	lr
   30e0e:	bf00      	nop

00030e10 <linked_list_pop>:
   30e10:	4603      	mov	r3, r0
   30e12:	6800      	ldr	r0, [r0, #0]
   30e14:	b128      	cbz	r0, 30e22 <linked_list_pop+0x12>
   30e16:	6858      	ldr	r0, [r3, #4]
   30e18:	681a      	ldr	r2, [r3, #0]
   30e1a:	6801      	ldr	r1, [r0, #0]
   30e1c:	3a01      	subs	r2, #1
   30e1e:	6059      	str	r1, [r3, #4]
   30e20:	601a      	str	r2, [r3, #0]
   30e22:	4770      	bx	lr

00030e24 <linked_list_peek>:
   30e24:	6803      	ldr	r3, [r0, #0]
   30e26:	b10b      	cbz	r3, 30e2c <linked_list_peek+0x8>
   30e28:	6840      	ldr	r0, [r0, #4]
   30e2a:	4770      	bx	lr
   30e2c:	4618      	mov	r0, r3
   30e2e:	4770      	bx	lr

00030e30 <linked_list_size_get>:
   30e30:	6800      	ldr	r0, [r0, #0]
   30e32:	4770      	bx	lr

00030e34 <linked_list_get_next>:
   30e34:	6800      	ldr	r0, [r0, #0]
   30e36:	4770      	bx	lr

00030e38 <nrf_socket>:
   30e38:	b570      	push	{r4, r5, r6, lr}
   30e3a:	4604      	mov	r4, r0
   30e3c:	460d      	mov	r5, r1
   30e3e:	4616      	mov	r6, r2
   30e40:	f7ff fe8a 	bl	30b58 <bsd_platform_af_method_table_get>
   30e44:	b130      	cbz	r0, 30e54 <nrf_socket+0x1c>
   30e46:	6803      	ldr	r3, [r0, #0]
   30e48:	4632      	mov	r2, r6
   30e4a:	4629      	mov	r1, r5
   30e4c:	4620      	mov	r0, r4
   30e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30e52:	4718      	bx	r3
   30e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30e58:	bd70      	pop	{r4, r5, r6, pc}
   30e5a:	bf00      	nop

00030e5c <nrf_close>:
   30e5c:	b510      	push	{r4, lr}
   30e5e:	4604      	mov	r4, r0
   30e60:	f7ff fed2 	bl	30c08 <bsd_platform_fd_method_table_get>
   30e64:	b120      	cbz	r0, 30e70 <nrf_close+0x14>
   30e66:	6843      	ldr	r3, [r0, #4]
   30e68:	4620      	mov	r0, r4
   30e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30e6e:	4718      	bx	r3
   30e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30e74:	bd10      	pop	{r4, pc}
   30e76:	bf00      	nop

00030e78 <nrf_sendto>:
   30e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30e7c:	460d      	mov	r5, r1
   30e7e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   30e82:	4616      	mov	r6, r2
   30e84:	461f      	mov	r7, r3
   30e86:	4604      	mov	r4, r0
   30e88:	f7ff febe 	bl	30c08 <bsd_platform_fd_method_table_get>
   30e8c:	b158      	cbz	r0, 30ea6 <nrf_sendto+0x2e>
   30e8e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   30e92:	f8d0 e008 	ldr.w	lr, [r0, #8]
   30e96:	463b      	mov	r3, r7
   30e98:	4632      	mov	r2, r6
   30e9a:	4629      	mov	r1, r5
   30e9c:	4620      	mov	r0, r4
   30e9e:	46f4      	mov	ip, lr
   30ea0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30ea4:	4760      	bx	ip
   30ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30eae:	bf00      	nop

00030eb0 <nrf_send>:
   30eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30eb4:	b082      	sub	sp, #8
   30eb6:	460e      	mov	r6, r1
   30eb8:	4617      	mov	r7, r2
   30eba:	4698      	mov	r8, r3
   30ebc:	4605      	mov	r5, r0
   30ebe:	f7ff fea3 	bl	30c08 <bsd_platform_fd_method_table_get>
   30ec2:	b160      	cbz	r0, 30ede <nrf_send+0x2e>
   30ec4:	4604      	mov	r4, r0
   30ec6:	2000      	movs	r0, #0
   30ec8:	e9cd 0000 	strd	r0, r0, [sp]
   30ecc:	4643      	mov	r3, r8
   30ece:	463a      	mov	r2, r7
   30ed0:	4631      	mov	r1, r6
   30ed2:	4628      	mov	r0, r5
   30ed4:	68a4      	ldr	r4, [r4, #8]
   30ed6:	47a0      	blx	r4
   30ed8:	b002      	add	sp, #8
   30eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30ee2:	e7f9      	b.n	30ed8 <nrf_send+0x28>

00030ee4 <nrf_recvfrom>:
   30ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30ee8:	460d      	mov	r5, r1
   30eea:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   30eee:	4616      	mov	r6, r2
   30ef0:	461f      	mov	r7, r3
   30ef2:	4604      	mov	r4, r0
   30ef4:	f7ff fe88 	bl	30c08 <bsd_platform_fd_method_table_get>
   30ef8:	b158      	cbz	r0, 30f12 <nrf_recvfrom+0x2e>
   30efa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   30efe:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   30f02:	463b      	mov	r3, r7
   30f04:	4632      	mov	r2, r6
   30f06:	4629      	mov	r1, r5
   30f08:	4620      	mov	r0, r4
   30f0a:	46f4      	mov	ip, lr
   30f0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30f10:	4760      	bx	ip
   30f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30f1a:	bf00      	nop

00030f1c <nrf_recv>:
   30f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30f20:	b082      	sub	sp, #8
   30f22:	460e      	mov	r6, r1
   30f24:	4617      	mov	r7, r2
   30f26:	4698      	mov	r8, r3
   30f28:	4605      	mov	r5, r0
   30f2a:	f7ff fe6d 	bl	30c08 <bsd_platform_fd_method_table_get>
   30f2e:	b160      	cbz	r0, 30f4a <nrf_recv+0x2e>
   30f30:	4604      	mov	r4, r0
   30f32:	2000      	movs	r0, #0
   30f34:	e9cd 0000 	strd	r0, r0, [sp]
   30f38:	4643      	mov	r3, r8
   30f3a:	463a      	mov	r2, r7
   30f3c:	4631      	mov	r1, r6
   30f3e:	4628      	mov	r0, r5
   30f40:	68e4      	ldr	r4, [r4, #12]
   30f42:	47a0      	blx	r4
   30f44:	b002      	add	sp, #8
   30f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30f4e:	e7f9      	b.n	30f44 <nrf_recv+0x28>

00030f50 <nrf_connect>:
   30f50:	b570      	push	{r4, r5, r6, lr}
   30f52:	460d      	mov	r5, r1
   30f54:	4616      	mov	r6, r2
   30f56:	4604      	mov	r4, r0
   30f58:	f7ff fe56 	bl	30c08 <bsd_platform_fd_method_table_get>
   30f5c:	b130      	cbz	r0, 30f6c <nrf_connect+0x1c>
   30f5e:	6943      	ldr	r3, [r0, #20]
   30f60:	4632      	mov	r2, r6
   30f62:	4629      	mov	r1, r5
   30f64:	4620      	mov	r0, r4
   30f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30f6a:	4718      	bx	r3
   30f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30f70:	bd70      	pop	{r4, r5, r6, pc}
   30f72:	bf00      	nop

00030f74 <nrf_listen>:
   30f74:	b570      	push	{r4, r5, r6, lr}
   30f76:	460d      	mov	r5, r1
   30f78:	4604      	mov	r4, r0
   30f7a:	f7ff fe45 	bl	30c08 <bsd_platform_fd_method_table_get>
   30f7e:	b128      	cbz	r0, 30f8c <nrf_listen+0x18>
   30f80:	6983      	ldr	r3, [r0, #24]
   30f82:	4629      	mov	r1, r5
   30f84:	4620      	mov	r0, r4
   30f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30f8a:	4718      	bx	r3
   30f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30f90:	bd70      	pop	{r4, r5, r6, pc}
   30f92:	bf00      	nop

00030f94 <nrf_accept>:
   30f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30f98:	460d      	mov	r5, r1
   30f9a:	4616      	mov	r6, r2
   30f9c:	4604      	mov	r4, r0
   30f9e:	f7ff fe33 	bl	30c08 <bsd_platform_fd_method_table_get>
   30fa2:	b140      	cbz	r0, 30fb6 <nrf_accept+0x22>
   30fa4:	69c7      	ldr	r7, [r0, #28]
   30fa6:	4632      	mov	r2, r6
   30fa8:	4629      	mov	r1, r5
   30faa:	4620      	mov	r0, r4
   30fac:	46bc      	mov	ip, r7
   30fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   30fb2:	2300      	movs	r3, #0
   30fb4:	4760      	bx	ip
   30fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30fbe:	bf00      	nop

00030fc0 <nrf_bind>:
   30fc0:	b570      	push	{r4, r5, r6, lr}
   30fc2:	460d      	mov	r5, r1
   30fc4:	4616      	mov	r6, r2
   30fc6:	4604      	mov	r4, r0
   30fc8:	f7ff fe1e 	bl	30c08 <bsd_platform_fd_method_table_get>
   30fcc:	b130      	cbz	r0, 30fdc <nrf_bind+0x1c>
   30fce:	6903      	ldr	r3, [r0, #16]
   30fd0:	4632      	mov	r2, r6
   30fd2:	4629      	mov	r1, r5
   30fd4:	4620      	mov	r0, r4
   30fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30fda:	4718      	bx	r3
   30fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30fe0:	bd70      	pop	{r4, r5, r6, pc}
   30fe2:	bf00      	nop

00030fe4 <nrf_setsockopt>:
   30fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30fe8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   30fec:	460d      	mov	r5, r1
   30fee:	4616      	mov	r6, r2
   30ff0:	461f      	mov	r7, r3
   30ff2:	4604      	mov	r4, r0
   30ff4:	f7ff fe08 	bl	30c08 <bsd_platform_fd_method_table_get>
   30ff8:	b158      	cbz	r0, 31012 <nrf_setsockopt+0x2e>
   30ffa:	f8cd 8018 	str.w	r8, [sp, #24]
   30ffe:	f8d0 e020 	ldr.w	lr, [r0, #32]
   31002:	463b      	mov	r3, r7
   31004:	4632      	mov	r2, r6
   31006:	4629      	mov	r1, r5
   31008:	4620      	mov	r0, r4
   3100a:	46f4      	mov	ip, lr
   3100c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   31010:	4760      	bx	ip
   31012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3101a:	bf00      	nop

0003101c <nrf_getsockopt>:
   3101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31020:	f8dd 8018 	ldr.w	r8, [sp, #24]
   31024:	460d      	mov	r5, r1
   31026:	4616      	mov	r6, r2
   31028:	461f      	mov	r7, r3
   3102a:	4604      	mov	r4, r0
   3102c:	f7ff fdec 	bl	30c08 <bsd_platform_fd_method_table_get>
   31030:	b158      	cbz	r0, 3104a <nrf_getsockopt+0x2e>
   31032:	f8cd 8018 	str.w	r8, [sp, #24]
   31036:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   3103a:	463b      	mov	r3, r7
   3103c:	4632      	mov	r2, r6
   3103e:	4629      	mov	r1, r5
   31040:	4620      	mov	r0, r4
   31042:	46f4      	mov	ip, lr
   31044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   31048:	4760      	bx	ip
   3104a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3104e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31052:	bf00      	nop

00031054 <nrf_getaddrinfo>:
   31054:	f7ff be4e 	b.w	30cf4 <bsd_platform_getaddrinfo>

00031058 <nrf_freeaddrinfo>:
   31058:	f7ff be4e 	b.w	30cf8 <bsd_platform_freeaddrinfo>

0003105c <nrf_poll>:
   3105c:	f7ff be4e 	b.w	30cfc <bsd_platform_poll>

00031060 <nrf_fcntl>:
   31060:	f7ff bea6 	b.w	30db0 <bsd_platform_fcntl>

00031064 <rpc_gnss_serialize_utc>:
   31064:	4603      	mov	r3, r0
   31066:	b1d8      	cbz	r0, 310a0 <rpc_gnss_serialize_utc+0x3c>
   31068:	b1d1      	cbz	r1, 310a0 <rpc_gnss_serialize_utc+0x3c>
   3106a:	2000      	movs	r0, #0
   3106c:	2201      	movs	r2, #1
   3106e:	7048      	strb	r0, [r1, #1]
   31070:	700a      	strb	r2, [r1, #0]
   31072:	685a      	ldr	r2, [r3, #4]
   31074:	2010      	movs	r0, #16
   31076:	f8c1 2006 	str.w	r2, [r1, #6]
   3107a:	681a      	ldr	r2, [r3, #0]
   3107c:	f8c1 2002 	str.w	r2, [r1, #2]
   31080:	f993 200a 	ldrsb.w	r2, [r3, #10]
   31084:	730a      	strb	r2, [r1, #12]
   31086:	f993 200d 	ldrsb.w	r2, [r3, #13]
   3108a:	73ca      	strb	r2, [r1, #15]
   3108c:	f993 200c 	ldrsb.w	r2, [r3, #12]
   31090:	738a      	strb	r2, [r1, #14]
   31092:	7a1a      	ldrb	r2, [r3, #8]
   31094:	728a      	strb	r2, [r1, #10]
   31096:	7ada      	ldrb	r2, [r3, #11]
   31098:	734a      	strb	r2, [r1, #13]
   3109a:	7a5b      	ldrb	r3, [r3, #9]
   3109c:	72cb      	strb	r3, [r1, #11]
   3109e:	4770      	bx	lr
   310a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   310a4:	4770      	bx	lr
   310a6:	bf00      	nop

000310a8 <rpc_gnss_serialize_ephe>:
   310a8:	4603      	mov	r3, r0
   310aa:	2800      	cmp	r0, #0
   310ac:	d04b      	beq.n	31146 <rpc_gnss_serialize_ephe+0x9e>
   310ae:	2900      	cmp	r1, #0
   310b0:	d049      	beq.n	31146 <rpc_gnss_serialize_ephe+0x9e>
   310b2:	2000      	movs	r0, #0
   310b4:	2202      	movs	r2, #2
   310b6:	7048      	strb	r0, [r1, #1]
   310b8:	700a      	strb	r2, [r1, #0]
   310ba:	68da      	ldr	r2, [r3, #12]
   310bc:	2040      	movs	r0, #64	; 0x40
   310be:	f8c1 200b 	str.w	r2, [r1, #11]
   310c2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   310c6:	f8a1 2009 	strh.w	r2, [r1, #9]
   310ca:	f993 2006 	ldrsb.w	r2, [r3, #6]
   310ce:	720a      	strb	r2, [r1, #8]
   310d0:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   310d4:	878a      	strh	r2, [r1, #60]	; 0x3c
   310d6:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   310da:	86ca      	strh	r2, [r1, #54]	; 0x36
   310dc:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   310e0:	874a      	strh	r2, [r1, #58]	; 0x3a
   310e2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   310e6:	868a      	strh	r2, [r1, #52]	; 0x34
   310e8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   310ec:	87ca      	strh	r2, [r1, #62]	; 0x3e
   310ee:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   310f2:	870a      	strh	r2, [r1, #56]	; 0x38
   310f4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   310f8:	830a      	strh	r2, [r1, #24]
   310fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   310fc:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   31100:	7c9a      	ldrb	r2, [r3, #18]
   31102:	744a      	strb	r2, [r1, #17]
   31104:	785a      	ldrb	r2, [r3, #1]
   31106:	70ca      	strb	r2, [r1, #3]
   31108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3110a:	62ca      	str	r2, [r1, #44]	; 0x2c
   3110c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   31110:	84ca      	strh	r2, [r1, #38]	; 0x26
   31112:	885a      	ldrh	r2, [r3, #2]
   31114:	808a      	strh	r2, [r1, #4]
   31116:	6a1a      	ldr	r2, [r3, #32]
   31118:	f8c1 201a 	str.w	r2, [r1, #26]
   3111c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   3111e:	630a      	str	r2, [r1, #48]	; 0x30
   31120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   31122:	f8c1 201e 	str.w	r2, [r1, #30]
   31126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   31128:	628a      	str	r2, [r1, #40]	; 0x28
   3112a:	781a      	ldrb	r2, [r3, #0]
   3112c:	708a      	strb	r2, [r1, #2]
   3112e:	f993 2010 	ldrsb.w	r2, [r3, #16]
   31132:	73ca      	strb	r2, [r1, #15]
   31134:	889a      	ldrh	r2, [r3, #4]
   31136:	80ca      	strh	r2, [r1, #6]
   31138:	8a9a      	ldrh	r2, [r3, #20]
   3113a:	824a      	strh	r2, [r1, #18]
   3113c:	7c5a      	ldrb	r2, [r3, #17]
   3113e:	740a      	strb	r2, [r1, #16]
   31140:	699b      	ldr	r3, [r3, #24]
   31142:	614b      	str	r3, [r1, #20]
   31144:	4770      	bx	lr
   31146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3114a:	4770      	bx	lr

0003114c <rpc_gnss_serialize_alm>:
   3114c:	4603      	mov	r3, r0
   3114e:	b360      	cbz	r0, 311aa <rpc_gnss_serialize_alm+0x5e>
   31150:	b359      	cbz	r1, 311aa <rpc_gnss_serialize_alm+0x5e>
   31152:	2000      	movs	r0, #0
   31154:	2203      	movs	r2, #3
   31156:	7048      	strb	r0, [r1, #1]
   31158:	700a      	strb	r2, [r1, #0]
   3115a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   3115e:	2021      	movs	r0, #33	; 0x21
   31160:	f8a1 201d 	strh.w	r2, [r1, #29]
   31164:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   31168:	f8a1 201f 	strh.w	r2, [r1, #31]
   3116c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   31170:	810a      	strh	r2, [r1, #8]
   31172:	889a      	ldrh	r2, [r3, #4]
   31174:	80ca      	strh	r2, [r1, #6]
   31176:	78da      	ldrb	r2, [r3, #3]
   31178:	714a      	strb	r2, [r1, #5]
   3117a:	699a      	ldr	r2, [r3, #24]
   3117c:	f8c1 2019 	str.w	r2, [r1, #25]
   31180:	691a      	ldr	r2, [r3, #16]
   31182:	f8c1 2011 	str.w	r2, [r1, #17]
   31186:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   3118a:	814a      	strh	r2, [r1, #10]
   3118c:	68da      	ldr	r2, [r3, #12]
   3118e:	f8c1 200d 	str.w	r2, [r1, #13]
   31192:	7a9a      	ldrb	r2, [r3, #10]
   31194:	730a      	strb	r2, [r1, #12]
   31196:	781a      	ldrb	r2, [r3, #0]
   31198:	708a      	strb	r2, [r1, #2]
   3119a:	789a      	ldrb	r2, [r3, #2]
   3119c:	710a      	strb	r2, [r1, #4]
   3119e:	695a      	ldr	r2, [r3, #20]
   311a0:	f8c1 2015 	str.w	r2, [r1, #21]
   311a4:	785b      	ldrb	r3, [r3, #1]
   311a6:	70cb      	strb	r3, [r1, #3]
   311a8:	4770      	bx	lr
   311aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   311ae:	4770      	bx	lr

000311b0 <rpc_gnss_serialize_klob>:
   311b0:	4603      	mov	r3, r0
   311b2:	b1f0      	cbz	r0, 311f2 <rpc_gnss_serialize_klob+0x42>
   311b4:	b1e9      	cbz	r1, 311f2 <rpc_gnss_serialize_klob+0x42>
   311b6:	2000      	movs	r0, #0
   311b8:	2204      	movs	r2, #4
   311ba:	7048      	strb	r0, [r1, #1]
   311bc:	700a      	strb	r2, [r1, #0]
   311be:	f993 2000 	ldrsb.w	r2, [r3]
   311c2:	200a      	movs	r0, #10
   311c4:	708a      	strb	r2, [r1, #2]
   311c6:	f993 2001 	ldrsb.w	r2, [r3, #1]
   311ca:	70ca      	strb	r2, [r1, #3]
   311cc:	f993 2002 	ldrsb.w	r2, [r3, #2]
   311d0:	710a      	strb	r2, [r1, #4]
   311d2:	f993 2003 	ldrsb.w	r2, [r3, #3]
   311d6:	714a      	strb	r2, [r1, #5]
   311d8:	f993 2004 	ldrsb.w	r2, [r3, #4]
   311dc:	718a      	strb	r2, [r1, #6]
   311de:	f993 2005 	ldrsb.w	r2, [r3, #5]
   311e2:	71ca      	strb	r2, [r1, #7]
   311e4:	f993 2006 	ldrsb.w	r2, [r3, #6]
   311e8:	720a      	strb	r2, [r1, #8]
   311ea:	f993 3007 	ldrsb.w	r3, [r3, #7]
   311ee:	724b      	strb	r3, [r1, #9]
   311f0:	4770      	bx	lr
   311f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   311f6:	4770      	bx	lr

000311f8 <rpc_gnss_serialize_nequick>:
   311f8:	4603      	mov	r3, r0
   311fa:	b198      	cbz	r0, 31224 <rpc_gnss_serialize_nequick+0x2c>
   311fc:	b191      	cbz	r1, 31224 <rpc_gnss_serialize_nequick+0x2c>
   311fe:	2000      	movs	r0, #0
   31200:	2205      	movs	r2, #5
   31202:	7048      	strb	r0, [r1, #1]
   31204:	700a      	strb	r2, [r1, #0]
   31206:	f9b3 2000 	ldrsh.w	r2, [r3]
   3120a:	200a      	movs	r0, #10
   3120c:	804a      	strh	r2, [r1, #2]
   3120e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   31212:	808a      	strh	r2, [r1, #4]
   31214:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   31218:	80ca      	strh	r2, [r1, #6]
   3121a:	799a      	ldrb	r2, [r3, #6]
   3121c:	720a      	strb	r2, [r1, #8]
   3121e:	79db      	ldrb	r3, [r3, #7]
   31220:	724b      	strb	r3, [r1, #9]
   31222:	4770      	bx	lr
   31224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31228:	4770      	bx	lr
   3122a:	bf00      	nop

0003122c <rpc_gnss_serialize_time_and_sv_tow>:
   3122c:	b310      	cbz	r0, 31274 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   3122e:	b309      	cbz	r1, 31274 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   31230:	b470      	push	{r4, r5, r6}
   31232:	2500      	movs	r5, #0
   31234:	2606      	movs	r6, #6
   31236:	460c      	mov	r4, r1
   31238:	704d      	strb	r5, [r1, #1]
   3123a:	700e      	strb	r6, [r1, #0]
   3123c:	462b      	mov	r3, r5
   3123e:	8805      	ldrh	r5, [r0, #0]
   31240:	4602      	mov	r2, r0
   31242:	804d      	strh	r5, [r1, #2]
   31244:	68c5      	ldr	r5, [r0, #12]
   31246:	f8c1 500a 	str.w	r5, [r1, #10]
   3124a:	8905      	ldrh	r5, [r0, #8]
   3124c:	810d      	strh	r5, [r1, #8]
   3124e:	6840      	ldr	r0, [r0, #4]
   31250:	6048      	str	r0, [r1, #4]
   31252:	8a15      	ldrh	r5, [r2, #16]
   31254:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   31258:	4408      	add	r0, r1
   3125a:	81c5      	strh	r5, [r0, #14]
   3125c:	7c90      	ldrb	r0, [r2, #18]
   3125e:	3301      	adds	r3, #1
   31260:	2b20      	cmp	r3, #32
   31262:	7420      	strb	r0, [r4, #16]
   31264:	f102 0204 	add.w	r2, r2, #4
   31268:	f104 0403 	add.w	r4, r4, #3
   3126c:	d1f1      	bne.n	31252 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   3126e:	206e      	movs	r0, #110	; 0x6e
   31270:	bc70      	pop	{r4, r5, r6}
   31272:	4770      	bx	lr
   31274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31278:	4770      	bx	lr
   3127a:	bf00      	nop

0003127c <rpc_gnss_serialize_location>:
   3127c:	4603      	mov	r3, r0
   3127e:	b1c8      	cbz	r0, 312b4 <rpc_gnss_serialize_location+0x38>
   31280:	b1c1      	cbz	r1, 312b4 <rpc_gnss_serialize_location+0x38>
   31282:	2000      	movs	r0, #0
   31284:	2207      	movs	r2, #7
   31286:	7048      	strb	r0, [r1, #1]
   31288:	700a      	strb	r2, [r1, #0]
   3128a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   3128e:	2011      	movs	r0, #17
   31290:	814a      	strh	r2, [r1, #10]
   31292:	7b9a      	ldrb	r2, [r3, #14]
   31294:	740a      	strb	r2, [r1, #16]
   31296:	681a      	ldr	r2, [r3, #0]
   31298:	f8c1 2002 	str.w	r2, [r1, #2]
   3129c:	685a      	ldr	r2, [r3, #4]
   3129e:	f8c1 2006 	str.w	r2, [r1, #6]
   312a2:	7b1a      	ldrb	r2, [r3, #12]
   312a4:	738a      	strb	r2, [r1, #14]
   312a6:	7b5a      	ldrb	r2, [r3, #13]
   312a8:	73ca      	strb	r2, [r1, #15]
   312aa:	7a9a      	ldrb	r2, [r3, #10]
   312ac:	730a      	strb	r2, [r1, #12]
   312ae:	7adb      	ldrb	r3, [r3, #11]
   312b0:	734b      	strb	r3, [r1, #13]
   312b2:	4770      	bx	lr
   312b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   312b8:	4770      	bx	lr
   312ba:	bf00      	nop

000312bc <rpc_gnss_serialize_integrity>:
   312bc:	b148      	cbz	r0, 312d2 <rpc_gnss_serialize_integrity+0x16>
   312be:	b141      	cbz	r1, 312d2 <rpc_gnss_serialize_integrity+0x16>
   312c0:	2200      	movs	r2, #0
   312c2:	2308      	movs	r3, #8
   312c4:	704a      	strb	r2, [r1, #1]
   312c6:	700b      	strb	r3, [r1, #0]
   312c8:	6803      	ldr	r3, [r0, #0]
   312ca:	2006      	movs	r0, #6
   312cc:	f8c1 3002 	str.w	r3, [r1, #2]
   312d0:	4770      	bx	lr
   312d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   312d6:	4770      	bx	lr

000312d8 <gnss_client_event_handler>:
   312d8:	f850 1b08 	ldr.w	r1, [r0], #8
   312dc:	0c09      	lsrs	r1, r1, #16
   312de:	f7fd b8b9 	b.w	2e454 <rpc_gnss_event_handler>
   312e2:	bf00      	nop

000312e4 <rpc_gnss_client_init>:
   312e4:	4801      	ldr	r0, [pc, #4]	; (312ec <rpc_gnss_client_init+0x8>)
   312e6:	f7fc bfe9 	b.w	2e2bc <rpc_client_register>
   312ea:	bf00      	nop
   312ec:	0003a400 	.word	0x0003a400

000312f0 <rpc_gnss_client_request_alloc>:
   312f0:	2300      	movs	r3, #0
   312f2:	b510      	push	{r4, lr}
   312f4:	b082      	sub	sp, #8
   312f6:	9301      	str	r3, [sp, #4]
   312f8:	b158      	cbz	r0, 31312 <rpc_gnss_client_request_alloc+0x22>
   312fa:	4604      	mov	r4, r0
   312fc:	aa01      	add	r2, sp, #4
   312fe:	2007      	movs	r0, #7
   31300:	f7fd f856 	bl	2e3b0 <rpc_message_alloc>
   31304:	b918      	cbnz	r0, 3130e <rpc_gnss_client_request_alloc+0x1e>
   31306:	9b01      	ldr	r3, [sp, #4]
   31308:	b10b      	cbz	r3, 3130e <rpc_gnss_client_request_alloc+0x1e>
   3130a:	3308      	adds	r3, #8
   3130c:	6023      	str	r3, [r4, #0]
   3130e:	b002      	add	sp, #8
   31310:	bd10      	pop	{r4, pc}
   31312:	2007      	movs	r0, #7
   31314:	b002      	add	sp, #8
   31316:	bd10      	pop	{r4, pc}

00031318 <rpc_gnss_client_request_send>:
   31318:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   3131c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   31320:	d10b      	bne.n	3133a <rpc_gnss_client_request_send+0x22>
   31322:	b160      	cbz	r0, 3133e <rpc_gnss_client_request_send+0x26>
   31324:	4603      	mov	r3, r0
   31326:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3132a:	2007      	movs	r0, #7
   3132c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   31330:	f843 1d08 	str.w	r1, [r3, #-8]!
   31334:	4619      	mov	r1, r3
   31336:	f7fd b82b 	b.w	2e390 <rpc_message_send>
   3133a:	200f      	movs	r0, #15
   3133c:	4770      	bx	lr
   3133e:	2007      	movs	r0, #7
   31340:	4770      	bx	lr
   31342:	bf00      	nop

00031344 <rpc_gnss_client_message_free>:
   31344:	b120      	cbz	r0, 31350 <rpc_gnss_client_message_free+0xc>
   31346:	f1a0 0108 	sub.w	r1, r0, #8
   3134a:	2007      	movs	r0, #7
   3134c:	f7fd b85c 	b.w	2e408 <rpc_message_free>
   31350:	2007      	movs	r0, #7
   31352:	4770      	bx	lr

00031354 <rpc_gnss_client_data_free>:
   31354:	b118      	cbz	r0, 3135e <rpc_gnss_client_data_free+0xa>
   31356:	4601      	mov	r1, r0
   31358:	2007      	movs	r0, #7
   3135a:	f7fd b861 	b.w	2e420 <rpc_message_data_free>
   3135e:	2007      	movs	r0, #7
   31360:	4770      	bx	lr
   31362:	bf00      	nop

00031364 <datagram_handler_init>:
   31364:	b510      	push	{r4, lr}
   31366:	4604      	mov	r4, r0
   31368:	200c      	movs	r0, #12
   3136a:	f000 fdd7 	bl	31f1c <nrf_malloc>
   3136e:	60e0      	str	r0, [r4, #12]
   31370:	b118      	cbz	r0, 3137a <datagram_handler_init+0x16>
   31372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31376:	f7ff bd2b 	b.w	30dd0 <linked_list_init>
   3137a:	2004      	movs	r0, #4
   3137c:	bd10      	pop	{r4, pc}
   3137e:	bf00      	nop

00031380 <datagram_handler_put>:
   31380:	b570      	push	{r4, r5, r6, lr}
   31382:	4606      	mov	r6, r0
   31384:	2014      	movs	r0, #20
   31386:	460d      	mov	r5, r1
   31388:	f000 fdc8 	bl	31f1c <nrf_malloc>
   3138c:	b178      	cbz	r0, 313ae <datagram_handler_put+0x2e>
   3138e:	682b      	ldr	r3, [r5, #0]
   31390:	4604      	mov	r4, r0
   31392:	6043      	str	r3, [r0, #4]
   31394:	686b      	ldr	r3, [r5, #4]
   31396:	4601      	mov	r1, r0
   31398:	6083      	str	r3, [r0, #8]
   3139a:	68eb      	ldr	r3, [r5, #12]
   3139c:	60c3      	str	r3, [r0, #12]
   3139e:	68ab      	ldr	r3, [r5, #8]
   313a0:	6103      	str	r3, [r0, #16]
   313a2:	68f0      	ldr	r0, [r6, #12]
   313a4:	f7ff fd1e 	bl	30de4 <linked_list_push>
   313a8:	b920      	cbnz	r0, 313b4 <datagram_handler_put+0x34>
   313aa:	6868      	ldr	r0, [r5, #4]
   313ac:	bd70      	pop	{r4, r5, r6, pc}
   313ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   313b2:	bd70      	pop	{r4, r5, r6, pc}
   313b4:	4620      	mov	r0, r4
   313b6:	f000 fdbb 	bl	31f30 <nrf_free>
   313ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   313be:	bd70      	pop	{r4, r5, r6, pc}

000313c0 <datagram_handler_get>:
   313c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   313c4:	4607      	mov	r7, r0
   313c6:	b084      	sub	sp, #16
   313c8:	68c0      	ldr	r0, [r0, #12]
   313ca:	460c      	mov	r4, r1
   313cc:	4616      	mov	r6, r2
   313ce:	f7ff fd29 	bl	30e24 <linked_list_peek>
   313d2:	2800      	cmp	r0, #0
   313d4:	d03b      	beq.n	3144e <datagram_handler_get+0x8e>
   313d6:	6882      	ldr	r2, [r0, #8]
   313d8:	4605      	mov	r5, r0
   313da:	e9d4 0300 	ldrd	r0, r3, [r4]
   313de:	429a      	cmp	r2, r3
   313e0:	bf28      	it	cs
   313e2:	461a      	movcs	r2, r3
   313e4:	6062      	str	r2, [r4, #4]
   313e6:	b110      	cbz	r0, 313ee <datagram_handler_get+0x2e>
   313e8:	6869      	ldr	r1, [r5, #4]
   313ea:	f007 fba8 	bl	38b3e <memcpy>
   313ee:	68a0      	ldr	r0, [r4, #8]
   313f0:	b118      	cbz	r0, 313fa <datagram_handler_get+0x3a>
   313f2:	692b      	ldr	r3, [r5, #16]
   313f4:	b10b      	cbz	r3, 313fa <datagram_handler_get+0x3a>
   313f6:	68ea      	ldr	r2, [r5, #12]
   313f8:	bb02      	cbnz	r2, 3143c <datagram_handler_get+0x7c>
   313fa:	2300      	movs	r3, #0
   313fc:	60e3      	str	r3, [r4, #12]
   313fe:	0732      	lsls	r2, r6, #28
   31400:	d506      	bpl.n	31410 <datagram_handler_get+0x50>
   31402:	06b3      	lsls	r3, r6, #26
   31404:	bf4c      	ite	mi
   31406:	68a8      	ldrmi	r0, [r5, #8]
   31408:	6860      	ldrpl	r0, [r4, #4]
   3140a:	b004      	add	sp, #16
   3140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31410:	68f8      	ldr	r0, [r7, #12]
   31412:	f7ff fcfd 	bl	30e10 <linked_list_pop>
   31416:	4680      	mov	r8, r0
   31418:	2800      	cmp	r0, #0
   3141a:	d0f2      	beq.n	31402 <datagram_handler_get+0x42>
   3141c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   31420:	6902      	ldr	r2, [r0, #16]
   31422:	9300      	str	r3, [sp, #0]
   31424:	68c3      	ldr	r3, [r0, #12]
   31426:	e9cd 1201 	strd	r1, r2, [sp, #4]
   3142a:	9303      	str	r3, [sp, #12]
   3142c:	4668      	mov	r0, sp
   3142e:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   31432:	4798      	blx	r3
   31434:	4640      	mov	r0, r8
   31436:	f000 fd7b 	bl	31f30 <nrf_free>
   3143a:	e7e2      	b.n	31402 <datagram_handler_get+0x42>
   3143c:	68e3      	ldr	r3, [r4, #12]
   3143e:	429a      	cmp	r2, r3
   31440:	bf28      	it	cs
   31442:	461a      	movcs	r2, r3
   31444:	60e2      	str	r2, [r4, #12]
   31446:	6929      	ldr	r1, [r5, #16]
   31448:	f007 fb79 	bl	38b3e <memcpy>
   3144c:	e7d7      	b.n	313fe <datagram_handler_get+0x3e>
   3144e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31452:	e7da      	b.n	3140a <datagram_handler_get+0x4a>

00031454 <datagram_handler_available>:
   31454:	b508      	push	{r3, lr}
   31456:	68c0      	ldr	r0, [r0, #12]
   31458:	f7ff fce4 	bl	30e24 <linked_list_peek>
   3145c:	b108      	cbz	r0, 31462 <datagram_handler_available+0xe>
   3145e:	6880      	ldr	r0, [r0, #8]
   31460:	bd08      	pop	{r3, pc}
   31462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31466:	bd08      	pop	{r3, pc}

00031468 <datagram_handler_flush>:
   31468:	b530      	push	{r4, r5, lr}
   3146a:	4605      	mov	r5, r0
   3146c:	68c0      	ldr	r0, [r0, #12]
   3146e:	b085      	sub	sp, #20
   31470:	b9a8      	cbnz	r0, 3149e <datagram_handler_flush+0x36>
   31472:	e01a      	b.n	314aa <datagram_handler_flush+0x42>
   31474:	68e8      	ldr	r0, [r5, #12]
   31476:	f7ff fccb 	bl	30e10 <linked_list_pop>
   3147a:	4604      	mov	r4, r0
   3147c:	b170      	cbz	r0, 3149c <datagram_handler_flush+0x34>
   3147e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   31482:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   31486:	e9cd 0100 	strd	r0, r1, [sp]
   3148a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3148e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   31492:	4668      	mov	r0, sp
   31494:	4798      	blx	r3
   31496:	4620      	mov	r0, r4
   31498:	f000 fd4a 	bl	31f30 <nrf_free>
   3149c:	68e8      	ldr	r0, [r5, #12]
   3149e:	f7ff fcc7 	bl	30e30 <linked_list_size_get>
   314a2:	2800      	cmp	r0, #0
   314a4:	d1e6      	bne.n	31474 <datagram_handler_flush+0xc>
   314a6:	b005      	add	sp, #20
   314a8:	bd30      	pop	{r4, r5, pc}
   314aa:	2008      	movs	r0, #8
   314ac:	b005      	add	sp, #20
   314ae:	bd30      	pop	{r4, r5, pc}

000314b0 <datagram_handler_free>:
   314b0:	b530      	push	{r4, r5, lr}
   314b2:	4605      	mov	r5, r0
   314b4:	68c0      	ldr	r0, [r0, #12]
   314b6:	b085      	sub	sp, #20
   314b8:	b9a0      	cbnz	r0, 314e4 <datagram_handler_free+0x34>
   314ba:	e01c      	b.n	314f6 <datagram_handler_free+0x46>
   314bc:	f7ff fca8 	bl	30e10 <linked_list_pop>
   314c0:	4604      	mov	r4, r0
   314c2:	b170      	cbz	r0, 314e2 <datagram_handler_free+0x32>
   314c4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   314c8:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   314cc:	e9cd 0100 	strd	r0, r1, [sp]
   314d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   314d4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   314d8:	4668      	mov	r0, sp
   314da:	4798      	blx	r3
   314dc:	4620      	mov	r0, r4
   314de:	f000 fd27 	bl	31f30 <nrf_free>
   314e2:	68e8      	ldr	r0, [r5, #12]
   314e4:	f7ff fca4 	bl	30e30 <linked_list_size_get>
   314e8:	4604      	mov	r4, r0
   314ea:	68e8      	ldr	r0, [r5, #12]
   314ec:	2c00      	cmp	r4, #0
   314ee:	d1e5      	bne.n	314bc <datagram_handler_free+0xc>
   314f0:	f000 fd1e 	bl	31f30 <nrf_free>
   314f4:	60ec      	str	r4, [r5, #12]
   314f6:	b005      	add	sp, #20
   314f8:	bd30      	pop	{r4, r5, pc}
   314fa:	bf00      	nop

000314fc <null_handler_init>:
   314fc:	2000      	movs	r0, #0
   314fe:	4770      	bx	lr

00031500 <null_handler_put>:
   31500:	b510      	push	{r4, lr}
   31502:	460c      	mov	r4, r1
   31504:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   31508:	4620      	mov	r0, r4
   3150a:	4798      	blx	r3
   3150c:	6860      	ldr	r0, [r4, #4]
   3150e:	bd10      	pop	{r4, pc}

00031510 <null_handler_get>:
   31510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31514:	4770      	bx	lr
   31516:	bf00      	nop

00031518 <null_handler_available>:
   31518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3151c:	4770      	bx	lr
   3151e:	bf00      	nop

00031520 <null_handler_flush>:
   31520:	2000      	movs	r0, #0
   31522:	4770      	bx	lr

00031524 <null_handler_free>:
   31524:	4770      	bx	lr
   31526:	bf00      	nop

00031528 <packet_handler_create>:
   31528:	2801      	cmp	r0, #1
   3152a:	b538      	push	{r3, r4, r5, lr}
   3152c:	460d      	mov	r5, r1
   3152e:	4614      	mov	r4, r2
   31530:	d00d      	beq.n	3154e <packet_handler_create+0x26>
   31532:	db11      	blt.n	31558 <packet_handler_create+0x30>
   31534:	2803      	cmp	r0, #3
   31536:	dc0f      	bgt.n	31558 <packet_handler_create+0x30>
   31538:	2010      	movs	r0, #16
   3153a:	f000 fcef 	bl	31f1c <nrf_malloc>
   3153e:	2218      	movs	r2, #24
   31540:	b120      	cbz	r0, 3154c <packet_handler_create+0x24>
   31542:	4b08      	ldr	r3, [pc, #32]	; (31564 <packet_handler_create+0x3c>)
   31544:	6045      	str	r5, [r0, #4]
   31546:	4413      	add	r3, r2
   31548:	6084      	str	r4, [r0, #8]
   3154a:	6003      	str	r3, [r0, #0]
   3154c:	bd38      	pop	{r3, r4, r5, pc}
   3154e:	2014      	movs	r0, #20
   31550:	f000 fce4 	bl	31f1c <nrf_malloc>
   31554:	2230      	movs	r2, #48	; 0x30
   31556:	e7f3      	b.n	31540 <packet_handler_create+0x18>
   31558:	200c      	movs	r0, #12
   3155a:	f000 fcdf 	bl	31f1c <nrf_malloc>
   3155e:	2200      	movs	r2, #0
   31560:	e7ee      	b.n	31540 <packet_handler_create+0x18>
   31562:	bf00      	nop
   31564:	0003a410 	.word	0x0003a410

00031568 <packet_handler_delete>:
   31568:	b510      	push	{r4, lr}
   3156a:	4604      	mov	r4, r0
   3156c:	6803      	ldr	r3, [r0, #0]
   3156e:	691b      	ldr	r3, [r3, #16]
   31570:	4798      	blx	r3
   31572:	6823      	ldr	r3, [r4, #0]
   31574:	4620      	mov	r0, r4
   31576:	695b      	ldr	r3, [r3, #20]
   31578:	4798      	blx	r3
   3157a:	4620      	mov	r0, r4
   3157c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31580:	f000 bcd6 	b.w	31f30 <nrf_free>

00031584 <stream_handler_init>:
   31584:	b510      	push	{r4, lr}
   31586:	4604      	mov	r4, r0
   31588:	200c      	movs	r0, #12
   3158a:	f000 fcc7 	bl	31f1c <nrf_malloc>
   3158e:	60e0      	str	r0, [r4, #12]
   31590:	b128      	cbz	r0, 3159e <stream_handler_init+0x1a>
   31592:	2300      	movs	r3, #0
   31594:	6123      	str	r3, [r4, #16]
   31596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3159a:	f7ff bc19 	b.w	30dd0 <linked_list_init>
   3159e:	2004      	movs	r0, #4
   315a0:	bd10      	pop	{r4, pc}
   315a2:	bf00      	nop

000315a4 <stream_handler_put>:
   315a4:	b570      	push	{r4, r5, r6, lr}
   315a6:	4606      	mov	r6, r0
   315a8:	2014      	movs	r0, #20
   315aa:	460d      	mov	r5, r1
   315ac:	f000 fcb6 	bl	31f1c <nrf_malloc>
   315b0:	b178      	cbz	r0, 315d2 <stream_handler_put+0x2e>
   315b2:	682b      	ldr	r3, [r5, #0]
   315b4:	4604      	mov	r4, r0
   315b6:	6043      	str	r3, [r0, #4]
   315b8:	686b      	ldr	r3, [r5, #4]
   315ba:	4601      	mov	r1, r0
   315bc:	6083      	str	r3, [r0, #8]
   315be:	68eb      	ldr	r3, [r5, #12]
   315c0:	60c3      	str	r3, [r0, #12]
   315c2:	68ab      	ldr	r3, [r5, #8]
   315c4:	6103      	str	r3, [r0, #16]
   315c6:	68f0      	ldr	r0, [r6, #12]
   315c8:	f7ff fc0c 	bl	30de4 <linked_list_push>
   315cc:	b920      	cbnz	r0, 315d8 <stream_handler_put+0x34>
   315ce:	6868      	ldr	r0, [r5, #4]
   315d0:	bd70      	pop	{r4, r5, r6, pc}
   315d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   315d6:	bd70      	pop	{r4, r5, r6, pc}
   315d8:	4620      	mov	r0, r4
   315da:	f000 fca9 	bl	31f30 <nrf_free>
   315de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   315e2:	bd70      	pop	{r4, r5, r6, pc}

000315e4 <stream_handler_get>:
   315e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   315e8:	4682      	mov	sl, r0
   315ea:	b089      	sub	sp, #36	; 0x24
   315ec:	68c0      	ldr	r0, [r0, #12]
   315ee:	4689      	mov	r9, r1
   315f0:	4693      	mov	fp, r2
   315f2:	f7ff fc17 	bl	30e24 <linked_list_peek>
   315f6:	2800      	cmp	r0, #0
   315f8:	d071      	beq.n	316de <stream_handler_get+0xfa>
   315fa:	4605      	mov	r5, r0
   315fc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   31600:	b120      	cbz	r0, 3160c <stream_handler_get+0x28>
   31602:	692b      	ldr	r3, [r5, #16]
   31604:	b113      	cbz	r3, 3160c <stream_handler_get+0x28>
   31606:	68ea      	ldr	r2, [r5, #12]
   31608:	2a00      	cmp	r2, #0
   3160a:	d15d      	bne.n	316c8 <stream_handler_get+0xe4>
   3160c:	2300      	movs	r3, #0
   3160e:	f8c9 300c 	str.w	r3, [r9, #12]
   31612:	f8d9 2000 	ldr.w	r2, [r9]
   31616:	f8d9 8004 	ldr.w	r8, [r9, #4]
   3161a:	f8da 1010 	ldr.w	r1, [sl, #16]
   3161e:	9203      	str	r2, [sp, #12]
   31620:	f1b8 0f00 	cmp.w	r8, #0
   31624:	d030      	beq.n	31688 <stream_handler_get+0xa4>
   31626:	2400      	movs	r4, #0
   31628:	f00b 0320 	and.w	r3, fp, #32
   3162c:	9301      	str	r3, [sp, #4]
   3162e:	f00b 0b08 	and.w	fp, fp, #8
   31632:	68ae      	ldr	r6, [r5, #8]
   31634:	eba8 0304 	sub.w	r3, r8, r4
   31638:	1a76      	subs	r6, r6, r1
   3163a:	429e      	cmp	r6, r3
   3163c:	4637      	mov	r7, r6
   3163e:	bf28      	it	cs
   31640:	461f      	movcs	r7, r3
   31642:	b10a      	cbz	r2, 31648 <stream_handler_get+0x64>
   31644:	9a01      	ldr	r2, [sp, #4]
   31646:	b1aa      	cbz	r2, 31674 <stream_handler_get+0x90>
   31648:	f1bb 0f00 	cmp.w	fp, #0
   3164c:	d106      	bne.n	3165c <stream_handler_get+0x78>
   3164e:	429e      	cmp	r6, r3
   31650:	d921      	bls.n	31696 <stream_handler_get+0xb2>
   31652:	f8da 3010 	ldr.w	r3, [sl, #16]
   31656:	443b      	add	r3, r7
   31658:	f8ca 3010 	str.w	r3, [sl, #16]
   3165c:	4628      	mov	r0, r5
   3165e:	f7ff fbe9 	bl	30e34 <linked_list_get_next>
   31662:	443c      	add	r4, r7
   31664:	4605      	mov	r5, r0
   31666:	b180      	cbz	r0, 3168a <stream_handler_get+0xa6>
   31668:	45a0      	cmp	r8, r4
   3166a:	d90e      	bls.n	3168a <stream_handler_get+0xa6>
   3166c:	f8d9 2000 	ldr.w	r2, [r9]
   31670:	2100      	movs	r1, #0
   31672:	e7de      	b.n	31632 <stream_handler_get+0x4e>
   31674:	6868      	ldr	r0, [r5, #4]
   31676:	9302      	str	r3, [sp, #8]
   31678:	9b03      	ldr	r3, [sp, #12]
   3167a:	4401      	add	r1, r0
   3167c:	463a      	mov	r2, r7
   3167e:	1918      	adds	r0, r3, r4
   31680:	f007 fa5d 	bl	38b3e <memcpy>
   31684:	9b02      	ldr	r3, [sp, #8]
   31686:	e7df      	b.n	31648 <stream_handler_get+0x64>
   31688:	4644      	mov	r4, r8
   3168a:	4620      	mov	r0, r4
   3168c:	f8c9 4004 	str.w	r4, [r9, #4]
   31690:	b009      	add	sp, #36	; 0x24
   31692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31696:	f8da 000c 	ldr.w	r0, [sl, #12]
   3169a:	f7ff fbb9 	bl	30e10 <linked_list_pop>
   3169e:	4606      	mov	r6, r0
   316a0:	b170      	cbz	r0, 316c0 <stream_handler_get+0xdc>
   316a2:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   316a6:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   316aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
   316ae:	e9cd 1006 	strd	r1, r0, [sp, #24]
   316b2:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   316b6:	a804      	add	r0, sp, #16
   316b8:	4798      	blx	r3
   316ba:	4630      	mov	r0, r6
   316bc:	f000 fc38 	bl	31f30 <nrf_free>
   316c0:	2300      	movs	r3, #0
   316c2:	f8ca 3010 	str.w	r3, [sl, #16]
   316c6:	e7c9      	b.n	3165c <stream_handler_get+0x78>
   316c8:	f8d9 300c 	ldr.w	r3, [r9, #12]
   316cc:	429a      	cmp	r2, r3
   316ce:	bf28      	it	cs
   316d0:	461a      	movcs	r2, r3
   316d2:	f8c9 200c 	str.w	r2, [r9, #12]
   316d6:	6929      	ldr	r1, [r5, #16]
   316d8:	f007 fa31 	bl	38b3e <memcpy>
   316dc:	e799      	b.n	31612 <stream_handler_get+0x2e>
   316de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   316e2:	e7d5      	b.n	31690 <stream_handler_get+0xac>

000316e4 <stream_handler_available>:
   316e4:	b510      	push	{r4, lr}
   316e6:	4604      	mov	r4, r0
   316e8:	68c0      	ldr	r0, [r0, #12]
   316ea:	f7ff fb9b 	bl	30e24 <linked_list_peek>
   316ee:	b150      	cbz	r0, 31706 <stream_handler_available+0x22>
   316f0:	6924      	ldr	r4, [r4, #16]
   316f2:	4264      	negs	r4, r4
   316f4:	6883      	ldr	r3, [r0, #8]
   316f6:	441c      	add	r4, r3
   316f8:	f7ff fb9c 	bl	30e34 <linked_list_get_next>
   316fc:	2800      	cmp	r0, #0
   316fe:	d1f9      	bne.n	316f4 <stream_handler_available+0x10>
   31700:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   31704:	bd10      	pop	{r4, pc}
   31706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3170a:	bd10      	pop	{r4, pc}

0003170c <stream_handler_flush>:
   3170c:	b530      	push	{r4, r5, lr}
   3170e:	4605      	mov	r5, r0
   31710:	68c0      	ldr	r0, [r0, #12]
   31712:	b085      	sub	sp, #20
   31714:	b9a8      	cbnz	r0, 31742 <stream_handler_flush+0x36>
   31716:	e01a      	b.n	3174e <stream_handler_flush+0x42>
   31718:	68e8      	ldr	r0, [r5, #12]
   3171a:	f7ff fb79 	bl	30e10 <linked_list_pop>
   3171e:	4604      	mov	r4, r0
   31720:	b170      	cbz	r0, 31740 <stream_handler_flush+0x34>
   31722:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   31726:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3172a:	e9cd 0100 	strd	r0, r1, [sp]
   3172e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   31732:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   31736:	4668      	mov	r0, sp
   31738:	4798      	blx	r3
   3173a:	4620      	mov	r0, r4
   3173c:	f000 fbf8 	bl	31f30 <nrf_free>
   31740:	68e8      	ldr	r0, [r5, #12]
   31742:	f7ff fb75 	bl	30e30 <linked_list_size_get>
   31746:	2800      	cmp	r0, #0
   31748:	d1e6      	bne.n	31718 <stream_handler_flush+0xc>
   3174a:	b005      	add	sp, #20
   3174c:	bd30      	pop	{r4, r5, pc}
   3174e:	2008      	movs	r0, #8
   31750:	b005      	add	sp, #20
   31752:	bd30      	pop	{r4, r5, pc}

00031754 <stream_handler_free>:
   31754:	b530      	push	{r4, r5, lr}
   31756:	4605      	mov	r5, r0
   31758:	68c0      	ldr	r0, [r0, #12]
   3175a:	b085      	sub	sp, #20
   3175c:	b9a0      	cbnz	r0, 31788 <stream_handler_free+0x34>
   3175e:	e01c      	b.n	3179a <stream_handler_free+0x46>
   31760:	f7ff fb56 	bl	30e10 <linked_list_pop>
   31764:	4604      	mov	r4, r0
   31766:	b170      	cbz	r0, 31786 <stream_handler_free+0x32>
   31768:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3176c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   31770:	e9cd 0100 	strd	r0, r1, [sp]
   31774:	e9cd 2302 	strd	r2, r3, [sp, #8]
   31778:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3177c:	4668      	mov	r0, sp
   3177e:	4798      	blx	r3
   31780:	4620      	mov	r0, r4
   31782:	f000 fbd5 	bl	31f30 <nrf_free>
   31786:	68e8      	ldr	r0, [r5, #12]
   31788:	f7ff fb52 	bl	30e30 <linked_list_size_get>
   3178c:	4604      	mov	r4, r0
   3178e:	68e8      	ldr	r0, [r5, #12]
   31790:	2c00      	cmp	r4, #0
   31792:	d1e5      	bne.n	31760 <stream_handler_free+0xc>
   31794:	f000 fbcc 	bl	31f30 <nrf_free>
   31798:	60ec      	str	r4, [r5, #12]
   3179a:	b005      	add	sp, #20
   3179c:	bd30      	pop	{r4, r5, pc}
   3179e:	bf00      	nop

000317a0 <mem_free>:
   317a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   317a4:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 31874 <mem_free+0xd4>
   317a8:	b083      	sub	sp, #12
   317aa:	9000      	str	r0, [sp, #0]
   317ac:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   317b0:	f8dc 3008 	ldr.w	r3, [ip, #8]
   317b4:	b12b      	cbz	r3, 317c2 <mem_free+0x22>
   317b6:	f8dc 2000 	ldr.w	r2, [ip]
   317ba:	9c00      	ldr	r4, [sp, #0]
   317bc:	7810      	ldrb	r0, [r2, #0]
   317be:	42a0      	cmp	r0, r4
   317c0:	d006      	beq.n	317d0 <mem_free+0x30>
   317c2:	f10c 0c0c 	add.w	ip, ip, #12
   317c6:	45e3      	cmp	fp, ip
   317c8:	d1f2      	bne.n	317b0 <mem_free+0x10>
   317ca:	b003      	add	sp, #12
   317cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   317d0:	f8dc a004 	ldr.w	sl, [ip, #4]
   317d4:	eb03 080a 	add.w	r8, r3, sl
   317d8:	45c2      	cmp	sl, r8
   317da:	d2f2      	bcs.n	317c2 <mem_free+0x22>
   317dc:	6853      	ldr	r3, [r2, #4]
   317de:	f8cd c004 	str.w	ip, [sp, #4]
   317e2:	46d6      	mov	lr, sl
   317e4:	469c      	mov	ip, r3
   317e6:	f8d2 9010 	ldr.w	r9, [r2, #16]
   317ea:	8997      	ldrh	r7, [r2, #12]
   317ec:	ebae 000a 	sub.w	r0, lr, sl
   317f0:	b3df      	cbz	r7, 3186a <mem_free+0xca>
   317f2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   317f6:	4290      	cmp	r0, r2
   317f8:	d31c      	bcc.n	31834 <mem_free+0x94>
   317fa:	4665      	mov	r5, ip
   317fc:	2400      	movs	r4, #0
   317fe:	f109 0304 	add.w	r3, r9, #4
   31802:	e003      	b.n	3180c <mem_free+0x6c>
   31804:	885a      	ldrh	r2, [r3, #2]
   31806:	3304      	adds	r3, #4
   31808:	4282      	cmp	r2, r0
   3180a:	d815      	bhi.n	31838 <mem_free+0x98>
   3180c:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   31810:	3401      	adds	r4, #1
   31812:	42a7      	cmp	r7, r4
   31814:	fb02 5506 	mla	r5, r2, r6, r5
   31818:	eba0 0002 	sub.w	r0, r0, r2
   3181c:	461e      	mov	r6, r3
   3181e:	d1f1      	bne.n	31804 <mem_free+0x64>
   31820:	2000      	movs	r0, #0
   31822:	4281      	cmp	r1, r0
   31824:	d00d      	beq.n	31842 <mem_free+0xa2>
   31826:	f10e 0e01 	add.w	lr, lr, #1
   3182a:	45f0      	cmp	r8, lr
   3182c:	d1de      	bne.n	317ec <mem_free+0x4c>
   3182e:	f8dd c004 	ldr.w	ip, [sp, #4]
   31832:	e7c6      	b.n	317c2 <mem_free+0x22>
   31834:	4665      	mov	r5, ip
   31836:	464e      	mov	r6, r9
   31838:	8833      	ldrh	r3, [r6, #0]
   3183a:	fb00 5003 	mla	r0, r0, r3, r5
   3183e:	4281      	cmp	r1, r0
   31840:	d1f1      	bne.n	31826 <mem_free+0x86>
   31842:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   31846:	f8dd c004 	ldr.w	ip, [sp, #4]
   3184a:	d0ba      	beq.n	317c2 <mem_free+0x22>
   3184c:	2301      	movs	r3, #1
   3184e:	4a08      	ldr	r2, [pc, #32]	; (31870 <mem_free+0xd0>)
   31850:	ea4f 115e 	mov.w	r1, lr, lsr #5
   31854:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   31858:	f00e 0e1f 	and.w	lr, lr, #31
   3185c:	fa03 fe0e 	lsl.w	lr, r3, lr
   31860:	ea4e 0000 	orr.w	r0, lr, r0
   31864:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   31868:	e7af      	b.n	317ca <mem_free+0x2a>
   3186a:	4638      	mov	r0, r7
   3186c:	e7d9      	b.n	31822 <mem_free+0x82>
   3186e:	bf00      	nop
   31870:	20023d40 	.word	0x20023d40
   31874:	20023d84 	.word	0x20023d84

00031878 <mem_alloc.constprop.5>:
   31878:	2800      	cmp	r0, #0
   3187a:	d050      	beq.n	3191e <mem_alloc.constprop.5+0xa6>
   3187c:	4b6d      	ldr	r3, [pc, #436]	; (31a34 <mem_alloc.constprop.5+0x1bc>)
   3187e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   31882:	4290      	cmp	r0, r2
   31884:	d84b      	bhi.n	3191e <mem_alloc.constprop.5+0xa6>
   31886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3188a:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   3188e:	b083      	sub	sp, #12
   31890:	f1bb 0f00 	cmp.w	fp, #0
   31894:	d054      	beq.n	31940 <mem_alloc.constprop.5+0xc8>
   31896:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   3189a:	4691      	mov	r9, r2
   3189c:	2600      	movs	r6, #0
   3189e:	f04f 0812 	mov.w	r8, #18
   318a2:	4f65      	ldr	r7, [pc, #404]	; (31a38 <mem_alloc.constprop.5+0x1c0>)
   318a4:	9201      	str	r2, [sp, #4]
   318a6:	f10b 0e11 	add.w	lr, fp, #17
   318aa:	eb06 0209 	add.w	r2, r6, r9
   318ae:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   318b2:	3201      	adds	r2, #1
   318b4:	0852      	lsrs	r2, r2, #1
   318b6:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   318ba:	f102 0112 	add.w	r1, r2, #18
   318be:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   318c2:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   318c6:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   318ca:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   318ce:	f8dc c004 	ldr.w	ip, [ip, #4]
   318d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   318d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   318da:	f8da a010 	ldr.w	sl, [sl, #16]
   318de:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   318e2:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   318e6:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   318ea:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   318ee:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   318f2:	6849      	ldr	r1, [r1, #4]
   318f4:	692d      	ldr	r5, [r5, #16]
   318f6:	6924      	ldr	r4, [r4, #16]
   318f8:	f8dc c004 	ldr.w	ip, [ip, #4]
   318fc:	4550      	cmp	r0, sl
   318fe:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   31902:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   31906:	d915      	bls.n	31934 <mem_alloc.constprop.5+0xbc>
   31908:	4288      	cmp	r0, r1
   3190a:	d211      	bcs.n	31930 <mem_alloc.constprop.5+0xb8>
   3190c:	42a8      	cmp	r0, r5
   3190e:	d908      	bls.n	31922 <mem_alloc.constprop.5+0xaa>
   31910:	1c56      	adds	r6, r2, #1
   31912:	45b1      	cmp	r9, r6
   31914:	f0c0 8087 	bcc.w	31a26 <mem_alloc.constprop.5+0x1ae>
   31918:	f102 0813 	add.w	r8, r2, #19
   3191c:	e7c5      	b.n	318aa <mem_alloc.constprop.5+0x32>
   3191e:	2000      	movs	r0, #0
   31920:	4770      	bx	lr
   31922:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   31926:	454e      	cmp	r6, r9
   31928:	d87d      	bhi.n	31a26 <mem_alloc.constprop.5+0x1ae>
   3192a:	f102 0e11 	add.w	lr, r2, #17
   3192e:	e7bc      	b.n	318aa <mem_alloc.constprop.5+0x32>
   31930:	f109 0601 	add.w	r6, r9, #1
   31934:	45b3      	cmp	fp, r6
   31936:	d007      	beq.n	31948 <mem_alloc.constprop.5+0xd0>
   31938:	2e10      	cmp	r6, #16
   3193a:	d001      	beq.n	31940 <mem_alloc.constprop.5+0xc8>
   3193c:	45b3      	cmp	fp, r6
   3193e:	d808      	bhi.n	31952 <mem_alloc.constprop.5+0xda>
   31940:	2000      	movs	r0, #0
   31942:	b003      	add	sp, #12
   31944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31948:	9a01      	ldr	r2, [sp, #4]
   3194a:	2a10      	cmp	r2, #16
   3194c:	bf18      	it	ne
   3194e:	4616      	movne	r6, r2
   31950:	d0f6      	beq.n	31940 <mem_alloc.constprop.5+0xc8>
   31952:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 31a3c <mem_alloc.constprop.5+0x1c4>
   31956:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   3195a:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   3195e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   31962:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   31966:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   3196a:	f8d2 e004 	ldr.w	lr, [r2, #4]
   3196e:	691d      	ldr	r5, [r3, #16]
   31970:	2c00      	cmp	r4, #0
   31972:	d056      	beq.n	31a22 <mem_alloc.constprop.5+0x1aa>
   31974:	462a      	mov	r2, r5
   31976:	4670      	mov	r0, lr
   31978:	00a4      	lsls	r4, r4, #2
   3197a:	eb05 0904 	add.w	r9, r5, r4
   3197e:	8851      	ldrh	r1, [r2, #2]
   31980:	3204      	adds	r2, #4
   31982:	4591      	cmp	r9, r2
   31984:	4408      	add	r0, r1
   31986:	d1fa      	bne.n	3197e <mem_alloc.constprop.5+0x106>
   31988:	1929      	adds	r1, r5, r4
   3198a:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   3198e:	4482      	add	sl, r0
   31990:	4582      	cmp	sl, r0
   31992:	d918      	bls.n	319c6 <mem_alloc.constprop.5+0x14e>
   31994:	0941      	lsrs	r1, r0, #5
   31996:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   3199a:	f000 041f 	and.w	r4, r0, #31
   3199e:	fa22 f904 	lsr.w	r9, r2, r4
   319a2:	f019 0f01 	tst.w	r9, #1
   319a6:	d007      	beq.n	319b8 <mem_alloc.constprop.5+0x140>
   319a8:	e013      	b.n	319d2 <mem_alloc.constprop.5+0x15a>
   319aa:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   319ae:	fa22 f904 	lsr.w	r9, r2, r4
   319b2:	f019 0f01 	tst.w	r9, #1
   319b6:	d10c      	bne.n	319d2 <mem_alloc.constprop.5+0x15a>
   319b8:	3001      	adds	r0, #1
   319ba:	4582      	cmp	sl, r0
   319bc:	ea4f 1150 	mov.w	r1, r0, lsr #5
   319c0:	f000 041f 	and.w	r4, r0, #31
   319c4:	d1f1      	bne.n	319aa <mem_alloc.constprop.5+0x132>
   319c6:	3601      	adds	r6, #1
   319c8:	455e      	cmp	r6, fp
   319ca:	f108 0808 	add.w	r8, r8, #8
   319ce:	d3c4      	bcc.n	3195a <mem_alloc.constprop.5+0xe2>
   319d0:	e7b6      	b.n	31940 <mem_alloc.constprop.5+0xc8>
   319d2:	2601      	movs	r6, #1
   319d4:	fa06 f404 	lsl.w	r4, r6, r4
   319d8:	899e      	ldrh	r6, [r3, #12]
   319da:	ea22 0204 	bic.w	r2, r2, r4
   319de:	eba0 000e 	sub.w	r0, r0, lr
   319e2:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   319e6:	685c      	ldr	r4, [r3, #4]
   319e8:	2e00      	cmp	r6, #0
   319ea:	d0a9      	beq.n	31940 <mem_alloc.constprop.5+0xc8>
   319ec:	886a      	ldrh	r2, [r5, #2]
   319ee:	4282      	cmp	r2, r0
   319f0:	d811      	bhi.n	31a16 <mem_alloc.constprop.5+0x19e>
   319f2:	2100      	movs	r1, #0
   319f4:	1d2b      	adds	r3, r5, #4
   319f6:	e003      	b.n	31a00 <mem_alloc.constprop.5+0x188>
   319f8:	885a      	ldrh	r2, [r3, #2]
   319fa:	3304      	adds	r3, #4
   319fc:	4282      	cmp	r2, r0
   319fe:	d80a      	bhi.n	31a16 <mem_alloc.constprop.5+0x19e>
   31a00:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   31a04:	3101      	adds	r1, #1
   31a06:	428e      	cmp	r6, r1
   31a08:	fb02 4405 	mla	r4, r2, r5, r4
   31a0c:	eba0 0002 	sub.w	r0, r0, r2
   31a10:	461d      	mov	r5, r3
   31a12:	d1f1      	bne.n	319f8 <mem_alloc.constprop.5+0x180>
   31a14:	e794      	b.n	31940 <mem_alloc.constprop.5+0xc8>
   31a16:	882b      	ldrh	r3, [r5, #0]
   31a18:	fb00 4003 	mla	r0, r0, r3, r4
   31a1c:	b003      	add	sp, #12
   31a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31a22:	4670      	mov	r0, lr
   31a24:	e7b0      	b.n	31988 <mem_alloc.constprop.5+0x110>
   31a26:	f1bb 0f10 	cmp.w	fp, #16
   31a2a:	bf08      	it	eq
   31a2c:	260f      	moveq	r6, #15
   31a2e:	d090      	beq.n	31952 <mem_alloc.constprop.5+0xda>
   31a30:	e786      	b.n	31940 <mem_alloc.constprop.5+0xc8>
   31a32:	bf00      	nop
   31a34:	20023dc0 	.word	0x20023dc0
   31a38:	20023d84 	.word	0x20023d84
   31a3c:	20023d40 	.word	0x20023d40

00031a40 <mem_alloc.constprop.4>:
   31a40:	2800      	cmp	r0, #0
   31a42:	d04c      	beq.n	31ade <mem_alloc.constprop.4+0x9e>
   31a44:	4b6b      	ldr	r3, [pc, #428]	; (31bf4 <mem_alloc.constprop.4+0x1b4>)
   31a46:	681a      	ldr	r2, [r3, #0]
   31a48:	4290      	cmp	r0, r2
   31a4a:	d848      	bhi.n	31ade <mem_alloc.constprop.4+0x9e>
   31a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31a50:	685f      	ldr	r7, [r3, #4]
   31a52:	b083      	sub	sp, #12
   31a54:	9700      	str	r7, [sp, #0]
   31a56:	2f00      	cmp	r7, #0
   31a58:	d051      	beq.n	31afe <mem_alloc.constprop.4+0xbe>
   31a5a:	1e7a      	subs	r2, r7, #1
   31a5c:	4696      	mov	lr, r2
   31a5e:	2100      	movs	r1, #0
   31a60:	f04f 0c01 	mov.w	ip, #1
   31a64:	4c64      	ldr	r4, [pc, #400]	; (31bf8 <mem_alloc.constprop.4+0x1b8>)
   31a66:	9201      	str	r2, [sp, #4]
   31a68:	eb01 020e 	add.w	r2, r1, lr
   31a6c:	3201      	adds	r2, #1
   31a6e:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   31a72:	0852      	lsrs	r2, r2, #1
   31a74:	f102 0801 	add.w	r8, r2, #1
   31a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   31a7c:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   31a80:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   31a84:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   31a88:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   31a8c:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   31a90:	f8d9 9004 	ldr.w	r9, [r9, #4]
   31a94:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   31a98:	f8da a010 	ldr.w	sl, [sl, #16]
   31a9c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   31aa0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   31aa4:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   31aa8:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   31aac:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   31ab0:	6936      	ldr	r6, [r6, #16]
   31ab2:	f8db b004 	ldr.w	fp, [fp, #4]
   31ab6:	692d      	ldr	r5, [r5, #16]
   31ab8:	f8d9 9004 	ldr.w	r9, [r9, #4]
   31abc:	4550      	cmp	r0, sl
   31abe:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   31ac2:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   31ac6:	d913      	bls.n	31af0 <mem_alloc.constprop.4+0xb0>
   31ac8:	42a8      	cmp	r0, r5
   31aca:	d210      	bcs.n	31aee <mem_alloc.constprop.4+0xae>
   31acc:	42b0      	cmp	r0, r6
   31ace:	d908      	bls.n	31ae2 <mem_alloc.constprop.4+0xa2>
   31ad0:	45c6      	cmp	lr, r8
   31ad2:	4641      	mov	r1, r8
   31ad4:	f0c0 8087 	bcc.w	31be6 <mem_alloc.constprop.4+0x1a6>
   31ad8:	f108 0c01 	add.w	ip, r8, #1
   31adc:	e7c4      	b.n	31a68 <mem_alloc.constprop.4+0x28>
   31ade:	2000      	movs	r0, #0
   31ae0:	4770      	bx	lr
   31ae2:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   31ae6:	4571      	cmp	r1, lr
   31ae8:	d87d      	bhi.n	31be6 <mem_alloc.constprop.4+0x1a6>
   31aea:	4617      	mov	r7, r2
   31aec:	e7bc      	b.n	31a68 <mem_alloc.constprop.4+0x28>
   31aee:	4639      	mov	r1, r7
   31af0:	9a00      	ldr	r2, [sp, #0]
   31af2:	428a      	cmp	r2, r1
   31af4:	d007      	beq.n	31b06 <mem_alloc.constprop.4+0xc6>
   31af6:	2910      	cmp	r1, #16
   31af8:	d001      	beq.n	31afe <mem_alloc.constprop.4+0xbe>
   31afa:	428a      	cmp	r2, r1
   31afc:	d808      	bhi.n	31b10 <mem_alloc.constprop.4+0xd0>
   31afe:	2000      	movs	r0, #0
   31b00:	b003      	add	sp, #12
   31b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31b06:	9a01      	ldr	r2, [sp, #4]
   31b08:	2a10      	cmp	r2, #16
   31b0a:	bf18      	it	ne
   31b0c:	4611      	movne	r1, r2
   31b0e:	d0f6      	beq.n	31afe <mem_alloc.constprop.4+0xbe>
   31b10:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 31bfc <mem_alloc.constprop.4+0x1bc>
   31b14:	f8dd 9000 	ldr.w	r9, [sp]
   31b18:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   31b1c:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   31b20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   31b24:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   31b28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   31b2c:	f8d2 e004 	ldr.w	lr, [r2, #4]
   31b30:	691f      	ldr	r7, [r3, #16]
   31b32:	2e00      	cmp	r6, #0
   31b34:	d055      	beq.n	31be2 <mem_alloc.constprop.4+0x1a2>
   31b36:	463a      	mov	r2, r7
   31b38:	4670      	mov	r0, lr
   31b3a:	00b6      	lsls	r6, r6, #2
   31b3c:	eb07 0a06 	add.w	sl, r7, r6
   31b40:	8855      	ldrh	r5, [r2, #2]
   31b42:	3204      	adds	r2, #4
   31b44:	4592      	cmp	sl, r2
   31b46:	4428      	add	r0, r5
   31b48:	d1fa      	bne.n	31b40 <mem_alloc.constprop.4+0x100>
   31b4a:	19bd      	adds	r5, r7, r6
   31b4c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   31b50:	4483      	add	fp, r0
   31b52:	4583      	cmp	fp, r0
   31b54:	d918      	bls.n	31b88 <mem_alloc.constprop.4+0x148>
   31b56:	0945      	lsrs	r5, r0, #5
   31b58:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   31b5c:	f000 061f 	and.w	r6, r0, #31
   31b60:	fa22 fa06 	lsr.w	sl, r2, r6
   31b64:	f01a 0f01 	tst.w	sl, #1
   31b68:	d007      	beq.n	31b7a <mem_alloc.constprop.4+0x13a>
   31b6a:	e013      	b.n	31b94 <mem_alloc.constprop.4+0x154>
   31b6c:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   31b70:	fa22 fa06 	lsr.w	sl, r2, r6
   31b74:	f01a 0f01 	tst.w	sl, #1
   31b78:	d10c      	bne.n	31b94 <mem_alloc.constprop.4+0x154>
   31b7a:	3001      	adds	r0, #1
   31b7c:	4583      	cmp	fp, r0
   31b7e:	ea4f 1550 	mov.w	r5, r0, lsr #5
   31b82:	f000 061f 	and.w	r6, r0, #31
   31b86:	d1f1      	bne.n	31b6c <mem_alloc.constprop.4+0x12c>
   31b88:	3101      	adds	r1, #1
   31b8a:	4549      	cmp	r1, r9
   31b8c:	f108 0808 	add.w	r8, r8, #8
   31b90:	d3c4      	bcc.n	31b1c <mem_alloc.constprop.4+0xdc>
   31b92:	e7b4      	b.n	31afe <mem_alloc.constprop.4+0xbe>
   31b94:	2101      	movs	r1, #1
   31b96:	40b1      	lsls	r1, r6
   31b98:	899e      	ldrh	r6, [r3, #12]
   31b9a:	ea22 0201 	bic.w	r2, r2, r1
   31b9e:	eba0 000e 	sub.w	r0, r0, lr
   31ba2:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   31ba6:	685c      	ldr	r4, [r3, #4]
   31ba8:	2e00      	cmp	r6, #0
   31baa:	d0a8      	beq.n	31afe <mem_alloc.constprop.4+0xbe>
   31bac:	887a      	ldrh	r2, [r7, #2]
   31bae:	4282      	cmp	r2, r0
   31bb0:	d811      	bhi.n	31bd6 <mem_alloc.constprop.4+0x196>
   31bb2:	2100      	movs	r1, #0
   31bb4:	1d3b      	adds	r3, r7, #4
   31bb6:	e003      	b.n	31bc0 <mem_alloc.constprop.4+0x180>
   31bb8:	885a      	ldrh	r2, [r3, #2]
   31bba:	3304      	adds	r3, #4
   31bbc:	4282      	cmp	r2, r0
   31bbe:	d80a      	bhi.n	31bd6 <mem_alloc.constprop.4+0x196>
   31bc0:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   31bc4:	3101      	adds	r1, #1
   31bc6:	428e      	cmp	r6, r1
   31bc8:	eba0 0002 	sub.w	r0, r0, r2
   31bcc:	fb02 4405 	mla	r4, r2, r5, r4
   31bd0:	461f      	mov	r7, r3
   31bd2:	d1f1      	bne.n	31bb8 <mem_alloc.constprop.4+0x178>
   31bd4:	e793      	b.n	31afe <mem_alloc.constprop.4+0xbe>
   31bd6:	883b      	ldrh	r3, [r7, #0]
   31bd8:	fb00 4003 	mla	r0, r0, r3, r4
   31bdc:	b003      	add	sp, #12
   31bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31be2:	4670      	mov	r0, lr
   31be4:	e7b1      	b.n	31b4a <mem_alloc.constprop.4+0x10a>
   31be6:	9a00      	ldr	r2, [sp, #0]
   31be8:	2a10      	cmp	r2, #16
   31bea:	bf08      	it	eq
   31bec:	210f      	moveq	r1, #15
   31bee:	d08f      	beq.n	31b10 <mem_alloc.constprop.4+0xd0>
   31bf0:	e785      	b.n	31afe <mem_alloc.constprop.4+0xbe>
   31bf2:	bf00      	nop
   31bf4:	20023dc0 	.word	0x20023dc0
   31bf8:	20023d84 	.word	0x20023d84
   31bfc:	20023d40 	.word	0x20023d40

00031c00 <nrf_mem_init>:
   31c00:	b570      	push	{r4, r5, r6, lr}
   31c02:	2200      	movs	r2, #0
   31c04:	2501      	movs	r5, #1
   31c06:	4833      	ldr	r0, [pc, #204]	; (31cd4 <nrf_mem_init+0xd4>)
   31c08:	0951      	lsrs	r1, r2, #5
   31c0a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   31c0e:	f002 031f 	and.w	r3, r2, #31
   31c12:	fa05 f303 	lsl.w	r3, r5, r3
   31c16:	3201      	adds	r2, #1
   31c18:	4323      	orrs	r3, r4
   31c1a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   31c1e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   31c22:	d1f1      	bne.n	31c08 <nrf_mem_init+0x8>
   31c24:	2400      	movs	r4, #0
   31c26:	4b2c      	ldr	r3, [pc, #176]	; (31cd8 <nrf_mem_init+0xd8>)
   31c28:	4621      	mov	r1, r4
   31c2a:	223c      	movs	r2, #60	; 0x3c
   31c2c:	482b      	ldr	r0, [pc, #172]	; (31cdc <nrf_mem_init+0xdc>)
   31c2e:	601c      	str	r4, [r3, #0]
   31c30:	f006 ffa5 	bl	38b7e <memset>
   31c34:	2110      	movs	r1, #16
   31c36:	2205      	movs	r2, #5
   31c38:	4b29      	ldr	r3, [pc, #164]	; (31ce0 <nrf_mem_init+0xe0>)
   31c3a:	4e2a      	ldr	r6, [pc, #168]	; (31ce4 <nrf_mem_init+0xe4>)
   31c3c:	e9c3 4400 	strd	r4, r4, [r3]
   31c40:	60d9      	str	r1, [r3, #12]
   31c42:	6159      	str	r1, [r3, #20]
   31c44:	61d9      	str	r1, [r3, #28]
   31c46:	6259      	str	r1, [r3, #36]	; 0x24
   31c48:	62d9      	str	r1, [r3, #44]	; 0x2c
   31c4a:	6359      	str	r1, [r3, #52]	; 0x34
   31c4c:	63d9      	str	r1, [r3, #60]	; 0x3c
   31c4e:	6459      	str	r1, [r3, #68]	; 0x44
   31c50:	64d9      	str	r1, [r3, #76]	; 0x4c
   31c52:	6559      	str	r1, [r3, #84]	; 0x54
   31c54:	65d9      	str	r1, [r3, #92]	; 0x5c
   31c56:	6659      	str	r1, [r3, #100]	; 0x64
   31c58:	66d9      	str	r1, [r3, #108]	; 0x6c
   31c5a:	6759      	str	r1, [r3, #116]	; 0x74
   31c5c:	67d9      	str	r1, [r3, #124]	; 0x7c
   31c5e:	609a      	str	r2, [r3, #8]
   31c60:	611a      	str	r2, [r3, #16]
   31c62:	619a      	str	r2, [r3, #24]
   31c64:	621a      	str	r2, [r3, #32]
   31c66:	629a      	str	r2, [r3, #40]	; 0x28
   31c68:	631a      	str	r2, [r3, #48]	; 0x30
   31c6a:	639a      	str	r2, [r3, #56]	; 0x38
   31c6c:	641a      	str	r2, [r3, #64]	; 0x40
   31c6e:	649a      	str	r2, [r3, #72]	; 0x48
   31c70:	651a      	str	r2, [r3, #80]	; 0x50
   31c72:	659a      	str	r2, [r3, #88]	; 0x58
   31c74:	661a      	str	r2, [r3, #96]	; 0x60
   31c76:	669a      	str	r2, [r3, #104]	; 0x68
   31c78:	671a      	str	r2, [r3, #112]	; 0x70
   31c7a:	679a      	str	r2, [r3, #120]	; 0x78
   31c7c:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   31c80:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   31c84:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   31c88:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   31c8c:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   31c90:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   31c94:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   31c98:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   31c9c:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   31ca0:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   31ca4:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   31ca8:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   31cac:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   31cb0:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   31cb4:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   31cb8:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   31cbc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   31cc0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   31cc4:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   31cc8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   31ccc:	4620      	mov	r0, r4
   31cce:	7035      	strb	r5, [r6, #0]
   31cd0:	bd70      	pop	{r4, r5, r6, pc}
   31cd2:	bf00      	nop
   31cd4:	20023d40 	.word	0x20023d40
   31cd8:	20023d80 	.word	0x20023d80
   31cdc:	20023d84 	.word	0x20023d84
   31ce0:	20023dc0 	.word	0x20023dc0
   31ce4:	2002c6e6 	.word	0x2002c6e6

00031ce8 <nrf_mem_register>:
   31ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31cec:	4b87      	ldr	r3, [pc, #540]	; (31f0c <nrf_mem_register+0x224>)
   31cee:	b087      	sub	sp, #28
   31cf0:	781b      	ldrb	r3, [r3, #0]
   31cf2:	2b00      	cmp	r3, #0
   31cf4:	f000 808c 	beq.w	31e10 <nrf_mem_register+0x128>
   31cf8:	b328      	cbz	r0, 31d46 <nrf_mem_register+0x5e>
   31cfa:	b321      	cbz	r1, 31d46 <nrf_mem_register+0x5e>
   31cfc:	780b      	ldrb	r3, [r1, #0]
   31cfe:	f8df 8218 	ldr.w	r8, [pc, #536]	; 31f18 <nrf_mem_register+0x230>
   31d02:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   31d06:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   31d0a:	685b      	ldr	r3, [r3, #4]
   31d0c:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   31d10:	4463      	add	r3, ip
   31d12:	2b10      	cmp	r3, #16
   31d14:	d811      	bhi.n	31d3a <nrf_mem_register+0x52>
   31d16:	f04f 0a00 	mov.w	sl, #0
   31d1a:	4689      	mov	r9, r1
   31d1c:	4b7c      	ldr	r3, [pc, #496]	; (31f10 <nrf_mem_register+0x228>)
   31d1e:	4f7d      	ldr	r7, [pc, #500]	; (31f14 <nrf_mem_register+0x22c>)
   31d20:	681b      	ldr	r3, [r3, #0]
   31d22:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   31d26:	9300      	str	r3, [sp, #0]
   31d28:	68b9      	ldr	r1, [r7, #8]
   31d2a:	b191      	cbz	r1, 31d52 <nrf_mem_register+0x6a>
   31d2c:	f10a 0a01 	add.w	sl, sl, #1
   31d30:	f1ba 0f05 	cmp.w	sl, #5
   31d34:	f107 070c 	add.w	r7, r7, #12
   31d38:	d1f6      	bne.n	31d28 <nrf_mem_register+0x40>
   31d3a:	f248 1b07 	movw	fp, #33031	; 0x8107
   31d3e:	4658      	mov	r0, fp
   31d40:	b007      	add	sp, #28
   31d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31d46:	f248 1b0e 	movw	fp, #33038	; 0x810e
   31d4a:	4658      	mov	r0, fp
   31d4c:	b007      	add	sp, #28
   31d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31d52:	f1bc 0f00 	cmp.w	ip, #0
   31d56:	d061      	beq.n	31e1c <nrf_mem_register+0x134>
   31d58:	460d      	mov	r5, r1
   31d5a:	460c      	mov	r4, r1
   31d5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   31d60:	eb0e 0b03 	add.w	fp, lr, r3
   31d64:	885a      	ldrh	r2, [r3, #2]
   31d66:	f833 6b04 	ldrh.w	r6, [r3], #4
   31d6a:	4415      	add	r5, r2
   31d6c:	459b      	cmp	fp, r3
   31d6e:	fb02 4406 	mla	r4, r2, r6, r4
   31d72:	d1f7      	bne.n	31d64 <nrf_mem_register+0x7c>
   31d74:	f8d9 3008 	ldr.w	r3, [r9, #8]
   31d78:	42a3      	cmp	r3, r4
   31d7a:	d3d7      	bcc.n	31d2c <nrf_mem_register+0x44>
   31d7c:	9b00      	ldr	r3, [sp, #0]
   31d7e:	442b      	add	r3, r5
   31d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   31d84:	d2d2      	bcs.n	31d2c <nrf_mem_register+0x44>
   31d86:	4c63      	ldr	r4, [pc, #396]	; (31f14 <nrf_mem_register+0x22c>)
   31d88:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   31d8c:	0092      	lsls	r2, r2, #2
   31d8e:	f8c0 a000 	str.w	sl, [r0]
   31d92:	18a0      	adds	r0, r4, r2
   31d94:	f844 9002 	str.w	r9, [r4, r2]
   31d98:	9a00      	ldr	r2, [sp, #0]
   31d9a:	468b      	mov	fp, r1
   31d9c:	e9c0 2501 	strd	r2, r5, [r0, #4]
   31da0:	f899 2001 	ldrb.w	r2, [r9, #1]
   31da4:	485a      	ldr	r0, [pc, #360]	; (31f10 <nrf_mem_register+0x228>)
   31da6:	2a01      	cmp	r2, #1
   31da8:	6003      	str	r3, [r0, #0]
   31daa:	d0c8      	beq.n	31d3e <nrf_mem_register+0x56>
   31dac:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   31db0:	2b00      	cmp	r3, #0
   31db2:	d0c4      	beq.n	31d3e <nrf_mem_register+0x56>
   31db4:	2500      	movs	r5, #0
   31db6:	f8cd 9004 	str.w	r9, [sp, #4]
   31dba:	f8cd a00c 	str.w	sl, [sp, #12]
   31dbe:	f8cd b014 	str.w	fp, [sp, #20]
   31dc2:	9b01      	ldr	r3, [sp, #4]
   31dc4:	781f      	ldrb	r7, [r3, #0]
   31dc6:	691a      	ldr	r2, [r3, #16]
   31dc8:	013b      	lsls	r3, r7, #4
   31dca:	eb03 0907 	add.w	r9, r3, r7
   31dce:	9300      	str	r3, [sp, #0]
   31dd0:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   31dd4:	6859      	ldr	r1, [r3, #4]
   31dd6:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   31dda:	9102      	str	r1, [sp, #8]
   31ddc:	bb39      	cbnz	r1, 31e2e <nrf_mem_register+0x146>
   31dde:	9a03      	ldr	r2, [sp, #12]
   31de0:	60dd      	str	r5, [r3, #12]
   31de2:	609a      	str	r2, [r3, #8]
   31de4:	9b00      	ldr	r3, [sp, #0]
   31de6:	443b      	add	r3, r7
   31de8:	461f      	mov	r7, r3
   31dea:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   31dee:	684b      	ldr	r3, [r1, #4]
   31df0:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   31df4:	3301      	adds	r3, #1
   31df6:	4294      	cmp	r4, r2
   31df8:	604b      	str	r3, [r1, #4]
   31dfa:	d912      	bls.n	31e22 <nrf_mem_register+0x13a>
   31dfc:	9b01      	ldr	r3, [sp, #4]
   31dfe:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   31e02:	899b      	ldrh	r3, [r3, #12]
   31e04:	3501      	adds	r5, #1
   31e06:	429d      	cmp	r5, r3
   31e08:	d3db      	bcc.n	31dc2 <nrf_mem_register+0xda>
   31e0a:	f8dd b014 	ldr.w	fp, [sp, #20]
   31e0e:	e796      	b.n	31d3e <nrf_mem_register+0x56>
   31e10:	f248 1b08 	movw	fp, #33032	; 0x8108
   31e14:	4658      	mov	r0, fp
   31e16:	b007      	add	sp, #28
   31e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31e1c:	9b00      	ldr	r3, [sp, #0]
   31e1e:	4665      	mov	r5, ip
   31e20:	e7ae      	b.n	31d80 <nrf_mem_register+0x98>
   31e22:	9b01      	ldr	r3, [sp, #4]
   31e24:	3501      	adds	r5, #1
   31e26:	899b      	ldrh	r3, [r3, #12]
   31e28:	42ab      	cmp	r3, r5
   31e2a:	d8ca      	bhi.n	31dc2 <nrf_mem_register+0xda>
   31e2c:	e7ed      	b.n	31e0a <nrf_mem_register+0x122>
   31e2e:	2600      	movs	r6, #0
   31e30:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   31e34:	9504      	str	r5, [sp, #16]
   31e36:	eb06 000a 	add.w	r0, r6, sl
   31e3a:	eb09 0206 	add.w	r2, r9, r6
   31e3e:	3201      	adds	r2, #1
   31e40:	3001      	adds	r0, #1
   31e42:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   31e46:	0840      	lsrs	r0, r0, #1
   31e48:	4d32      	ldr	r5, [pc, #200]	; (31f14 <nrf_mem_register+0x22c>)
   31e4a:	eb09 0100 	add.w	r1, r9, r0
   31e4e:	eb09 030a 	add.w	r3, r9, sl
   31e52:	3101      	adds	r1, #1
   31e54:	3301      	adds	r3, #1
   31e56:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   31e5a:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   31e5e:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   31e62:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   31e66:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   31e6a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   31e6e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   31e72:	f8db b010 	ldr.w	fp, [fp, #16]
   31e76:	6852      	ldr	r2, [r2, #4]
   31e78:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   31e7c:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   31e80:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   31e84:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   31e88:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   31e8c:	f8de e010 	ldr.w	lr, [lr, #16]
   31e90:	6849      	ldr	r1, [r1, #4]
   31e92:	f8dc c010 	ldr.w	ip, [ip, #16]
   31e96:	685b      	ldr	r3, [r3, #4]
   31e98:	4294      	cmp	r4, r2
   31e9a:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   31e9e:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   31ea2:	d92d      	bls.n	31f00 <nrf_mem_register+0x218>
   31ea4:	429c      	cmp	r4, r3
   31ea6:	d22d      	bcs.n	31f04 <nrf_mem_register+0x21c>
   31ea8:	428c      	cmp	r4, r1
   31eaa:	d924      	bls.n	31ef6 <nrf_mem_register+0x20e>
   31eac:	1c46      	adds	r6, r0, #1
   31eae:	45b2      	cmp	sl, r6
   31eb0:	d2c1      	bcs.n	31e36 <nrf_mem_register+0x14e>
   31eb2:	2610      	movs	r6, #16
   31eb4:	9d04      	ldr	r5, [sp, #16]
   31eb6:	9a02      	ldr	r2, [sp, #8]
   31eb8:	42b2      	cmp	r2, r6
   31eba:	d911      	bls.n	31ee0 <nrf_mem_register+0x1f8>
   31ebc:	9b00      	ldr	r3, [sp, #0]
   31ebe:	443b      	add	r3, r7
   31ec0:	441a      	add	r2, r3
   31ec2:	4433      	add	r3, r6
   31ec4:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   31ec8:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   31ecc:	2208      	movs	r2, #8
   31ece:	4651      	mov	r1, sl
   31ed0:	eb0a 0002 	add.w	r0, sl, r2
   31ed4:	f1aa 0a08 	sub.w	sl, sl, #8
   31ed8:	f006 fe31 	bl	38b3e <memcpy>
   31edc:	45d1      	cmp	r9, sl
   31ede:	d1f5      	bne.n	31ecc <nrf_mem_register+0x1e4>
   31ee0:	9b00      	ldr	r3, [sp, #0]
   31ee2:	9903      	ldr	r1, [sp, #12]
   31ee4:	443b      	add	r3, r7
   31ee6:	4433      	add	r3, r6
   31ee8:	3301      	adds	r3, #1
   31eea:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   31eee:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   31ef2:	6055      	str	r5, [r2, #4]
   31ef4:	e776      	b.n	31de4 <nrf_mem_register+0xfc>
   31ef6:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   31efa:	4556      	cmp	r6, sl
   31efc:	d99b      	bls.n	31e36 <nrf_mem_register+0x14e>
   31efe:	e7d8      	b.n	31eb2 <nrf_mem_register+0x1ca>
   31f00:	9d04      	ldr	r5, [sp, #16]
   31f02:	e7d8      	b.n	31eb6 <nrf_mem_register+0x1ce>
   31f04:	9d04      	ldr	r5, [sp, #16]
   31f06:	f10a 0601 	add.w	r6, sl, #1
   31f0a:	e7d4      	b.n	31eb6 <nrf_mem_register+0x1ce>
   31f0c:	2002c6e6 	.word	0x2002c6e6
   31f10:	20023d80 	.word	0x20023d80
   31f14:	20023d84 	.word	0x20023d84
   31f18:	20023dc0 	.word	0x20023dc0

00031f1c <nrf_malloc>:
   31f1c:	4b03      	ldr	r3, [pc, #12]	; (31f2c <nrf_malloc+0x10>)
   31f1e:	781b      	ldrb	r3, [r3, #0]
   31f20:	b10b      	cbz	r3, 31f26 <nrf_malloc+0xa>
   31f22:	f7ff bd8d 	b.w	31a40 <mem_alloc.constprop.4>
   31f26:	4618      	mov	r0, r3
   31f28:	4770      	bx	lr
   31f2a:	bf00      	nop
   31f2c:	2002c6e6 	.word	0x2002c6e6

00031f30 <nrf_free>:
   31f30:	4b04      	ldr	r3, [pc, #16]	; (31f44 <nrf_free+0x14>)
   31f32:	781b      	ldrb	r3, [r3, #0]
   31f34:	b123      	cbz	r3, 31f40 <nrf_free+0x10>
   31f36:	b118      	cbz	r0, 31f40 <nrf_free+0x10>
   31f38:	4601      	mov	r1, r0
   31f3a:	2000      	movs	r0, #0
   31f3c:	f7ff bc30 	b.w	317a0 <mem_free>
   31f40:	4770      	bx	lr
   31f42:	bf00      	nop
   31f44:	2002c6e6 	.word	0x2002c6e6

00031f48 <nrf_realloc>:
   31f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31f4c:	4b52      	ldr	r3, [pc, #328]	; (32098 <nrf_realloc+0x150>)
   31f4e:	b087      	sub	sp, #28
   31f50:	781b      	ldrb	r3, [r3, #0]
   31f52:	b173      	cbz	r3, 31f72 <nrf_realloc+0x2a>
   31f54:	b168      	cbz	r0, 31f72 <nrf_realloc+0x2a>
   31f56:	e9cd 0101 	strd	r0, r1, [sp, #4]
   31f5a:	f8df a148 	ldr.w	sl, [pc, #328]	; 320a4 <nrf_realloc+0x15c>
   31f5e:	f8da 3000 	ldr.w	r3, [sl]
   31f62:	b10b      	cbz	r3, 31f68 <nrf_realloc+0x20>
   31f64:	781a      	ldrb	r2, [r3, #0]
   31f66:	b14a      	cbz	r2, 31f7c <nrf_realloc+0x34>
   31f68:	4b4c      	ldr	r3, [pc, #304]	; (3209c <nrf_realloc+0x154>)
   31f6a:	f10a 0a0c 	add.w	sl, sl, #12
   31f6e:	4553      	cmp	r3, sl
   31f70:	d1f5      	bne.n	31f5e <nrf_realloc+0x16>
   31f72:	2400      	movs	r4, #0
   31f74:	4620      	mov	r0, r4
   31f76:	b007      	add	sp, #28
   31f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31f7c:	e9da 9201 	ldrd	r9, r2, [sl, #4]
   31f80:	444a      	add	r2, r9
   31f82:	4591      	cmp	r9, r2
   31f84:	9200      	str	r2, [sp, #0]
   31f86:	d2ef      	bcs.n	31f68 <nrf_realloc+0x20>
   31f88:	685a      	ldr	r2, [r3, #4]
   31f8a:	f8cd a00c 	str.w	sl, [sp, #12]
   31f8e:	46cb      	mov	fp, r9
   31f90:	4692      	mov	sl, r2
   31f92:	f8d3 8010 	ldr.w	r8, [r3, #16]
   31f96:	899f      	ldrh	r7, [r3, #12]
   31f98:	ebab 0e09 	sub.w	lr, fp, r9
   31f9c:	b1d7      	cbz	r7, 31fd4 <nrf_realloc+0x8c>
   31f9e:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   31fa2:	45e6      	cmp	lr, ip
   31fa4:	4662      	mov	r2, ip
   31fa6:	d31d      	bcc.n	31fe4 <nrf_realloc+0x9c>
   31fa8:	4654      	mov	r4, sl
   31faa:	4671      	mov	r1, lr
   31fac:	4665      	mov	r5, ip
   31fae:	2000      	movs	r0, #0
   31fb0:	f108 0304 	add.w	r3, r8, #4
   31fb4:	e004      	b.n	31fc0 <nrf_realloc+0x78>
   31fb6:	885a      	ldrh	r2, [r3, #2]
   31fb8:	3304      	adds	r3, #4
   31fba:	428a      	cmp	r2, r1
   31fbc:	4615      	mov	r5, r2
   31fbe:	d814      	bhi.n	31fea <nrf_realloc+0xa2>
   31fc0:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   31fc4:	3001      	adds	r0, #1
   31fc6:	4287      	cmp	r7, r0
   31fc8:	fb02 4406 	mla	r4, r2, r6, r4
   31fcc:	eba1 0105 	sub.w	r1, r1, r5
   31fd0:	461e      	mov	r6, r3
   31fd2:	d1f0      	bne.n	31fb6 <nrf_realloc+0x6e>
   31fd4:	9b00      	ldr	r3, [sp, #0]
   31fd6:	f10b 0b01 	add.w	fp, fp, #1
   31fda:	455b      	cmp	r3, fp
   31fdc:	d1dc      	bne.n	31f98 <nrf_realloc+0x50>
   31fde:	f8dd a00c 	ldr.w	sl, [sp, #12]
   31fe2:	e7c1      	b.n	31f68 <nrf_realloc+0x20>
   31fe4:	4654      	mov	r4, sl
   31fe6:	4671      	mov	r1, lr
   31fe8:	4646      	mov	r6, r8
   31fea:	8833      	ldrh	r3, [r6, #0]
   31fec:	fb01 4103 	mla	r1, r1, r3, r4
   31ff0:	9b01      	ldr	r3, [sp, #4]
   31ff2:	428b      	cmp	r3, r1
   31ff4:	d1ee      	bne.n	31fd4 <nrf_realloc+0x8c>
   31ff6:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   31ffa:	f8dd a00c 	ldr.w	sl, [sp, #12]
   31ffe:	d0b3      	beq.n	31f68 <nrf_realloc+0x20>
   32000:	45e6      	cmp	lr, ip
   32002:	d334      	bcc.n	3206e <nrf_realloc+0x126>
   32004:	2200      	movs	r2, #0
   32006:	f108 0304 	add.w	r3, r8, #4
   3200a:	e006      	b.n	3201a <nrf_realloc+0xd2>
   3200c:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   32010:	4698      	mov	r8, r3
   32012:	45f4      	cmp	ip, lr
   32014:	f103 0304 	add.w	r3, r3, #4
   32018:	d829      	bhi.n	3206e <nrf_realloc+0x126>
   3201a:	3201      	adds	r2, #1
   3201c:	42ba      	cmp	r2, r7
   3201e:	ebae 0e0c 	sub.w	lr, lr, ip
   32022:	d1f3      	bne.n	3200c <nrf_realloc+0xc4>
   32024:	2300      	movs	r3, #0
   32026:	9a02      	ldr	r2, [sp, #8]
   32028:	429a      	cmp	r2, r3
   3202a:	d923      	bls.n	32074 <nrf_realloc+0x12c>
   3202c:	4610      	mov	r0, r2
   3202e:	f7ff fd07 	bl	31a40 <mem_alloc.constprop.4>
   32032:	4604      	mov	r4, r0
   32034:	2800      	cmp	r0, #0
   32036:	d097      	beq.n	31f68 <nrf_realloc+0x20>
   32038:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
   3203c:	462a      	mov	r2, r5
   3203e:	f006 fd7e 	bl	38b3e <memcpy>
   32042:	462b      	mov	r3, r5
   32044:	2201      	movs	r2, #1
   32046:	3303      	adds	r3, #3
   32048:	4915      	ldr	r1, [pc, #84]	; (320a0 <nrf_realloc+0x158>)
   3204a:	4423      	add	r3, r4
   3204c:	f023 0303 	bic.w	r3, r3, #3
   32050:	ea4f 105b 	mov.w	r0, fp, lsr #5
   32054:	681e      	ldr	r6, [r3, #0]
   32056:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   3205a:	f00b 031f 	and.w	r3, fp, #31
   3205e:	fa02 f303 	lsl.w	r3, r2, r3
   32062:	9605      	str	r6, [sp, #20]
   32064:	432b      	orrs	r3, r5
   32066:	9a05      	ldr	r2, [sp, #20]
   32068:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   3206c:	e782      	b.n	31f74 <nrf_realloc+0x2c>
   3206e:	f8b8 3000 	ldrh.w	r3, [r8]
   32072:	e7d8      	b.n	32026 <nrf_realloc+0xde>
   32074:	4615      	mov	r5, r2
   32076:	b96a      	cbnz	r2, 32094 <nrf_realloc+0x14c>
   32078:	2301      	movs	r3, #1
   3207a:	4a09      	ldr	r2, [pc, #36]	; (320a0 <nrf_realloc+0x158>)
   3207c:	ea4f 115b 	mov.w	r1, fp, lsr #5
   32080:	f00b 041f 	and.w	r4, fp, #31
   32084:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   32088:	40a3      	lsls	r3, r4
   3208a:	4303      	orrs	r3, r0
   3208c:	462c      	mov	r4, r5
   3208e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   32092:	e76f      	b.n	31f74 <nrf_realloc+0x2c>
   32094:	9c01      	ldr	r4, [sp, #4]
   32096:	e76d      	b.n	31f74 <nrf_realloc+0x2c>
   32098:	2002c6e6 	.word	0x2002c6e6
   3209c:	20023dc0 	.word	0x20023dc0
   320a0:	20023d40 	.word	0x20023d40
   320a4:	20023d84 	.word	0x20023d84

000320a8 <nrf_shared_malloc>:
   320a8:	4b03      	ldr	r3, [pc, #12]	; (320b8 <nrf_shared_malloc+0x10>)
   320aa:	781b      	ldrb	r3, [r3, #0]
   320ac:	b10b      	cbz	r3, 320b2 <nrf_shared_malloc+0xa>
   320ae:	f7ff bbe3 	b.w	31878 <mem_alloc.constprop.5>
   320b2:	4618      	mov	r0, r3
   320b4:	4770      	bx	lr
   320b6:	bf00      	nop
   320b8:	2002c6e6 	.word	0x2002c6e6

000320bc <nrf_shared_free>:
   320bc:	4b04      	ldr	r3, [pc, #16]	; (320d0 <nrf_shared_free+0x14>)
   320be:	781b      	ldrb	r3, [r3, #0]
   320c0:	b123      	cbz	r3, 320cc <nrf_shared_free+0x10>
   320c2:	b118      	cbz	r0, 320cc <nrf_shared_free+0x10>
   320c4:	4601      	mov	r1, r0
   320c6:	2001      	movs	r0, #1
   320c8:	f7ff bb6a 	b.w	317a0 <mem_free>
   320cc:	4770      	bx	lr
   320ce:	bf00      	nop
   320d0:	2002c6e6 	.word	0x2002c6e6

000320d4 <rpc_dfu_event_handler>:
   320d4:	b508      	push	{r3, lr}
   320d6:	4a08      	ldr	r2, [pc, #32]	; (320f8 <rpc_dfu_event_handler+0x24>)
   320d8:	68c1      	ldr	r1, [r0, #12]
   320da:	8812      	ldrh	r2, [r2, #0]
   320dc:	4603      	mov	r3, r0
   320de:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   320e2:	d005      	beq.n	320f0 <rpc_dfu_event_handler+0x1c>
   320e4:	6800      	ldr	r0, [r0, #0]
   320e6:	b110      	cbz	r0, 320ee <rpc_dfu_event_handler+0x1a>
   320e8:	f7fd f936 	bl	2f358 <rpc_dfu_client_data_free>
   320ec:	2000      	movs	r0, #0
   320ee:	bd08      	pop	{r3, pc}
   320f0:	4a02      	ldr	r2, [pc, #8]	; (320fc <rpc_dfu_event_handler+0x28>)
   320f2:	2001      	movs	r0, #1
   320f4:	6013      	str	r3, [r2, #0]
   320f6:	bd08      	pop	{r3, pc}
   320f8:	200287ae 	.word	0x200287ae
   320fc:	20023edc 	.word	0x20023edc

00032100 <mfu_interface_init>:
   32100:	2300      	movs	r3, #0
   32102:	b510      	push	{r4, lr}
   32104:	4808      	ldr	r0, [pc, #32]	; (32128 <mfu_interface_init+0x28>)
   32106:	4909      	ldr	r1, [pc, #36]	; (3212c <mfu_interface_init+0x2c>)
   32108:	4a09      	ldr	r2, [pc, #36]	; (32130 <mfu_interface_init+0x30>)
   3210a:	4c0a      	ldr	r4, [pc, #40]	; (32134 <mfu_interface_init+0x34>)
   3210c:	8003      	strh	r3, [r0, #0]
   3210e:	600b      	str	r3, [r1, #0]
   32110:	6013      	str	r3, [r2, #0]
   32112:	6023      	str	r3, [r4, #0]
   32114:	f7fd f8ea 	bl	2f2ec <rpc_dfu_client_init>
   32118:	b910      	cbnz	r0, 32120 <mfu_interface_init+0x20>
   3211a:	2301      	movs	r3, #1
   3211c:	6023      	str	r3, [r4, #0]
   3211e:	bd10      	pop	{r4, pc}
   32120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32124:	bd10      	pop	{r4, pc}
   32126:	bf00      	nop
   32128:	200287ae 	.word	0x200287ae
   3212c:	20023edc 	.word	0x20023edc
   32130:	20023ed8 	.word	0x20023ed8
   32134:	20023ed0 	.word	0x20023ed0

00032138 <mfu_interface_open>:
   32138:	b508      	push	{r3, lr}
   3213a:	4b07      	ldr	r3, [pc, #28]	; (32158 <mfu_interface_open+0x20>)
   3213c:	681a      	ldr	r2, [r3, #0]
   3213e:	2a01      	cmp	r2, #1
   32140:	d103      	bne.n	3214a <mfu_interface_open+0x12>
   32142:	2202      	movs	r2, #2
   32144:	601a      	str	r2, [r3, #0]
   32146:	4805      	ldr	r0, [pc, #20]	; (3215c <mfu_interface_open+0x24>)
   32148:	bd08      	pop	{r3, pc}
   3214a:	2001      	movs	r0, #1
   3214c:	f7f5 fa16 	bl	2757c <bsd_os_errno_set>
   32150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32154:	bd08      	pop	{r3, pc}
   32156:	bf00      	nop
   32158:	20023ed0 	.word	0x20023ed0
   3215c:	49765432 	.word	0x49765432

00032160 <mfu_interface_close>:
   32160:	b5f0      	push	{r4, r5, r6, r7, lr}
   32162:	4c32      	ldr	r4, [pc, #200]	; (3222c <mfu_interface_close+0xcc>)
   32164:	b083      	sub	sp, #12
   32166:	6823      	ldr	r3, [r4, #0]
   32168:	1e9a      	subs	r2, r3, #2
   3216a:	2a01      	cmp	r2, #1
   3216c:	d857      	bhi.n	3221e <mfu_interface_close+0xbe>
   3216e:	2b03      	cmp	r3, #3
   32170:	d004      	beq.n	3217c <mfu_interface_close+0x1c>
   32172:	2301      	movs	r3, #1
   32174:	2000      	movs	r0, #0
   32176:	6023      	str	r3, [r4, #0]
   32178:	b003      	add	sp, #12
   3217a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3217c:	2100      	movs	r1, #0
   3217e:	4668      	mov	r0, sp
   32180:	f7fd f8ba 	bl	2f2f8 <rpc_dfu_client_request_alloc>
   32184:	4603      	mov	r3, r0
   32186:	2800      	cmp	r0, #0
   32188:	d13d      	bne.n	32206 <mfu_interface_close+0xa6>
   3218a:	2104      	movs	r1, #4
   3218c:	4e28      	ldr	r6, [pc, #160]	; (32230 <mfu_interface_close+0xd0>)
   3218e:	9800      	ldr	r0, [sp, #0]
   32190:	8832      	ldrh	r2, [r6, #0]
   32192:	7201      	strb	r1, [r0, #8]
   32194:	3201      	adds	r2, #1
   32196:	b292      	uxth	r2, r2
   32198:	0411      	lsls	r1, r2, #16
   3219a:	f041 0106 	orr.w	r1, r1, #6
   3219e:	4d25      	ldr	r5, [pc, #148]	; (32234 <mfu_interface_close+0xd4>)
   321a0:	60c1      	str	r1, [r0, #12]
   321a2:	7103      	strb	r3, [r0, #4]
   321a4:	7143      	strb	r3, [r0, #5]
   321a6:	7183      	strb	r3, [r0, #6]
   321a8:	71c3      	strb	r3, [r0, #7]
   321aa:	7243      	strb	r3, [r0, #9]
   321ac:	7283      	strb	r3, [r0, #10]
   321ae:	72c3      	strb	r3, [r0, #11]
   321b0:	2106      	movs	r1, #6
   321b2:	8032      	strh	r2, [r6, #0]
   321b4:	602b      	str	r3, [r5, #0]
   321b6:	f7fd f8b3 	bl	2f320 <rpc_dfu_client_request_send>
   321ba:	b9d8      	cbnz	r0, 321f4 <mfu_interface_close+0x94>
   321bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   321c0:	ae02      	add	r6, sp, #8
   321c2:	4627      	mov	r7, r4
   321c4:	f846 3d04 	str.w	r3, [r6, #-4]!
   321c8:	e004      	b.n	321d4 <mfu_interface_close+0x74>
   321ca:	4631      	mov	r1, r6
   321cc:	4638      	mov	r0, r7
   321ce:	f7f5 f91d 	bl	2740c <bsd_os_timedwait>
   321d2:	b9f0      	cbnz	r0, 32212 <mfu_interface_close+0xb2>
   321d4:	6828      	ldr	r0, [r5, #0]
   321d6:	2800      	cmp	r0, #0
   321d8:	d0f7      	beq.n	321ca <mfu_interface_close+0x6a>
   321da:	6905      	ldr	r5, [r0, #16]
   321dc:	f7fd f8b4 	bl	2f348 <rpc_dfu_client_message_free>
   321e0:	2d00      	cmp	r5, #0
   321e2:	d0c6      	beq.n	32172 <mfu_interface_close+0x12>
   321e4:	4b14      	ldr	r3, [pc, #80]	; (32238 <mfu_interface_close+0xd8>)
   321e6:	2008      	movs	r0, #8
   321e8:	601d      	str	r5, [r3, #0]
   321ea:	f7f5 f9c7 	bl	2757c <bsd_os_errno_set>
   321ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   321f2:	e7c1      	b.n	32178 <mfu_interface_close+0x18>
   321f4:	9800      	ldr	r0, [sp, #0]
   321f6:	6803      	ldr	r3, [r0, #0]
   321f8:	b11b      	cbz	r3, 32202 <mfu_interface_close+0xa2>
   321fa:	4618      	mov	r0, r3
   321fc:	f7fd f8ac 	bl	2f358 <rpc_dfu_client_data_free>
   32200:	9800      	ldr	r0, [sp, #0]
   32202:	f7fd f8a1 	bl	2f348 <rpc_dfu_client_message_free>
   32206:	200c      	movs	r0, #12
   32208:	f7f5 f9b8 	bl	2757c <bsd_os_errno_set>
   3220c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32210:	e7b2      	b.n	32178 <mfu_interface_close+0x18>
   32212:	203c      	movs	r0, #60	; 0x3c
   32214:	f7f5 f9b2 	bl	2757c <bsd_os_errno_set>
   32218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3221c:	e7ac      	b.n	32178 <mfu_interface_close+0x18>
   3221e:	2001      	movs	r0, #1
   32220:	f7f5 f9ac 	bl	2757c <bsd_os_errno_set>
   32224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32228:	e7a6      	b.n	32178 <mfu_interface_close+0x18>
   3222a:	bf00      	nop
   3222c:	20023ed0 	.word	0x20023ed0
   32230:	200287ae 	.word	0x200287ae
   32234:	20023edc 	.word	0x20023edc
   32238:	20023ed4 	.word	0x20023ed4

0003223c <mfu_interface_sendto>:
   3223c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32240:	4e64      	ldr	r6, [pc, #400]	; (323d4 <mfu_interface_sendto+0x198>)
   32242:	460f      	mov	r7, r1
   32244:	6831      	ldr	r1, [r6, #0]
   32246:	4615      	mov	r5, r2
   32248:	1e8a      	subs	r2, r1, #2
   3224a:	2a01      	cmp	r2, #1
   3224c:	b082      	sub	sp, #8
   3224e:	f200 80b4 	bhi.w	323ba <mfu_interface_sendto+0x17e>
   32252:	2f00      	cmp	r7, #0
   32254:	f000 80a5 	beq.w	323a2 <mfu_interface_sendto+0x166>
   32258:	2d00      	cmp	r5, #0
   3225a:	f000 80a2 	beq.w	323a2 <mfu_interface_sendto+0x166>
   3225e:	2b00      	cmp	r3, #0
   32260:	f040 80b1 	bne.w	323c6 <mfu_interface_sendto+0x18a>
   32264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   32266:	2b00      	cmp	r3, #0
   32268:	f040 80a1 	bne.w	323ae <mfu_interface_sendto+0x172>
   3226c:	2902      	cmp	r1, #2
   3226e:	d04f      	beq.n	32310 <mfu_interface_sendto+0xd4>
   32270:	46e8      	mov	r8, sp
   32272:	4640      	mov	r0, r8
   32274:	4629      	mov	r1, r5
   32276:	f7fd f83f 	bl	2f2f8 <rpc_dfu_client_request_alloc>
   3227a:	4606      	mov	r6, r0
   3227c:	b140      	cbz	r0, 32290 <mfu_interface_sendto+0x54>
   3227e:	200c      	movs	r0, #12
   32280:	f7f5 f97c 	bl	2757c <bsd_os_errno_set>
   32284:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   32288:	4628      	mov	r0, r5
   3228a:	b002      	add	sp, #8
   3228c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32290:	9b00      	ldr	r3, [sp, #0]
   32292:	4639      	mov	r1, r7
   32294:	6818      	ldr	r0, [r3, #0]
   32296:	462a      	mov	r2, r5
   32298:	f006 fc51 	bl	38b3e <memcpy>
   3229c:	2104      	movs	r1, #4
   3229e:	4c4e      	ldr	r4, [pc, #312]	; (323d8 <mfu_interface_sendto+0x19c>)
   322a0:	9800      	ldr	r0, [sp, #0]
   322a2:	8823      	ldrh	r3, [r4, #0]
   322a4:	6045      	str	r5, [r0, #4]
   322a6:	3301      	adds	r3, #1
   322a8:	b29b      	uxth	r3, r3
   322aa:	041a      	lsls	r2, r3, #16
   322ac:	8023      	strh	r3, [r4, #0]
   322ae:	430a      	orrs	r2, r1
   322b0:	4c4a      	ldr	r4, [pc, #296]	; (323dc <mfu_interface_sendto+0x1a0>)
   322b2:	60c2      	str	r2, [r0, #12]
   322b4:	7246      	strb	r6, [r0, #9]
   322b6:	7286      	strb	r6, [r0, #10]
   322b8:	72c6      	strb	r6, [r0, #11]
   322ba:	7201      	strb	r1, [r0, #8]
   322bc:	6026      	str	r6, [r4, #0]
   322be:	f7fd f82f 	bl	2f320 <rpc_dfu_client_request_send>
   322c2:	2800      	cmp	r0, #0
   322c4:	d163      	bne.n	3238e <mfu_interface_sendto+0x152>
   322c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   322ca:	ae02      	add	r6, sp, #8
   322cc:	4f41      	ldr	r7, [pc, #260]	; (323d4 <mfu_interface_sendto+0x198>)
   322ce:	f846 3d04 	str.w	r3, [r6, #-4]!
   322d2:	e004      	b.n	322de <mfu_interface_sendto+0xa2>
   322d4:	4631      	mov	r1, r6
   322d6:	4638      	mov	r0, r7
   322d8:	f7f5 f898 	bl	2740c <bsd_os_timedwait>
   322dc:	b978      	cbnz	r0, 322fe <mfu_interface_sendto+0xc2>
   322de:	6820      	ldr	r0, [r4, #0]
   322e0:	2800      	cmp	r0, #0
   322e2:	d0f7      	beq.n	322d4 <mfu_interface_sendto+0x98>
   322e4:	6904      	ldr	r4, [r0, #16]
   322e6:	f7fd f82f 	bl	2f348 <rpc_dfu_client_message_free>
   322ea:	2c00      	cmp	r4, #0
   322ec:	d0cc      	beq.n	32288 <mfu_interface_sendto+0x4c>
   322ee:	4b3c      	ldr	r3, [pc, #240]	; (323e0 <mfu_interface_sendto+0x1a4>)
   322f0:	2008      	movs	r0, #8
   322f2:	601c      	str	r4, [r3, #0]
   322f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   322f8:	f7f5 f940 	bl	2757c <bsd_os_errno_set>
   322fc:	e7c4      	b.n	32288 <mfu_interface_sendto+0x4c>
   322fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   32302:	203c      	movs	r0, #60	; 0x3c
   32304:	f7f5 f93a 	bl	2757c <bsd_os_errno_set>
   32308:	4628      	mov	r0, r5
   3230a:	b002      	add	sp, #8
   3230c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32310:	46e8      	mov	r8, sp
   32312:	4619      	mov	r1, r3
   32314:	4640      	mov	r0, r8
   32316:	f7fc ffef 	bl	2f2f8 <rpc_dfu_client_request_alloc>
   3231a:	4602      	mov	r2, r0
   3231c:	2800      	cmp	r0, #0
   3231e:	d1ae      	bne.n	3227e <mfu_interface_sendto+0x42>
   32320:	f04f 0c08 	mov.w	ip, #8
   32324:	492c      	ldr	r1, [pc, #176]	; (323d8 <mfu_interface_sendto+0x19c>)
   32326:	482f      	ldr	r0, [pc, #188]	; (323e4 <mfu_interface_sendto+0x1a8>)
   32328:	880b      	ldrh	r3, [r1, #0]
   3232a:	6804      	ldr	r4, [r0, #0]
   3232c:	3301      	adds	r3, #1
   3232e:	9800      	ldr	r0, [sp, #0]
   32330:	b29b      	uxth	r3, r3
   32332:	800b      	strh	r3, [r1, #0]
   32334:	041b      	lsls	r3, r3, #16
   32336:	f043 0303 	orr.w	r3, r3, #3
   3233a:	6104      	str	r4, [r0, #16]
   3233c:	4c27      	ldr	r4, [pc, #156]	; (323dc <mfu_interface_sendto+0x1a0>)
   3233e:	60c3      	str	r3, [r0, #12]
   32340:	7102      	strb	r2, [r0, #4]
   32342:	7142      	strb	r2, [r0, #5]
   32344:	7182      	strb	r2, [r0, #6]
   32346:	71c2      	strb	r2, [r0, #7]
   32348:	7242      	strb	r2, [r0, #9]
   3234a:	7282      	strb	r2, [r0, #10]
   3234c:	72c2      	strb	r2, [r0, #11]
   3234e:	f880 c008 	strb.w	ip, [r0, #8]
   32352:	2103      	movs	r1, #3
   32354:	6022      	str	r2, [r4, #0]
   32356:	f7fc ffe3 	bl	2f320 <rpc_dfu_client_request_send>
   3235a:	b9c0      	cbnz	r0, 3238e <mfu_interface_sendto+0x152>
   3235c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32360:	f10d 0908 	add.w	r9, sp, #8
   32364:	f849 3d04 	str.w	r3, [r9, #-4]!
   32368:	46b2      	mov	sl, r6
   3236a:	e005      	b.n	32378 <mfu_interface_sendto+0x13c>
   3236c:	4649      	mov	r1, r9
   3236e:	4650      	mov	r0, sl
   32370:	f7f5 f84c 	bl	2740c <bsd_os_timedwait>
   32374:	2800      	cmp	r0, #0
   32376:	d1c2      	bne.n	322fe <mfu_interface_sendto+0xc2>
   32378:	6820      	ldr	r0, [r4, #0]
   3237a:	2800      	cmp	r0, #0
   3237c:	d0f6      	beq.n	3236c <mfu_interface_sendto+0x130>
   3237e:	6904      	ldr	r4, [r0, #16]
   32380:	f7fc ffe2 	bl	2f348 <rpc_dfu_client_message_free>
   32384:	2c00      	cmp	r4, #0
   32386:	d1b2      	bne.n	322ee <mfu_interface_sendto+0xb2>
   32388:	2303      	movs	r3, #3
   3238a:	6033      	str	r3, [r6, #0]
   3238c:	e771      	b.n	32272 <mfu_interface_sendto+0x36>
   3238e:	9800      	ldr	r0, [sp, #0]
   32390:	6803      	ldr	r3, [r0, #0]
   32392:	b11b      	cbz	r3, 3239c <mfu_interface_sendto+0x160>
   32394:	4618      	mov	r0, r3
   32396:	f7fc ffdf 	bl	2f358 <rpc_dfu_client_data_free>
   3239a:	9800      	ldr	r0, [sp, #0]
   3239c:	f7fc ffd4 	bl	2f348 <rpc_dfu_client_message_free>
   323a0:	e76d      	b.n	3227e <mfu_interface_sendto+0x42>
   323a2:	2016      	movs	r0, #22
   323a4:	f7f5 f8ea 	bl	2757c <bsd_os_errno_set>
   323a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   323ac:	e76c      	b.n	32288 <mfu_interface_sendto+0x4c>
   323ae:	2038      	movs	r0, #56	; 0x38
   323b0:	f7f5 f8e4 	bl	2757c <bsd_os_errno_set>
   323b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   323b8:	e766      	b.n	32288 <mfu_interface_sendto+0x4c>
   323ba:	2001      	movs	r0, #1
   323bc:	f7f5 f8de 	bl	2757c <bsd_os_errno_set>
   323c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   323c4:	e760      	b.n	32288 <mfu_interface_sendto+0x4c>
   323c6:	202d      	movs	r0, #45	; 0x2d
   323c8:	f7f5 f8d8 	bl	2757c <bsd_os_errno_set>
   323cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   323d0:	e75a      	b.n	32288 <mfu_interface_sendto+0x4c>
   323d2:	bf00      	nop
   323d4:	20023ed0 	.word	0x20023ed0
   323d8:	200287ae 	.word	0x200287ae
   323dc:	20023edc 	.word	0x20023edc
   323e0:	20023ed4 	.word	0x20023ed4
   323e4:	20023ed8 	.word	0x20023ed8

000323e8 <mfu_interface_setopt>:
   323e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   323ea:	4846      	ldr	r0, [pc, #280]	; (32504 <mfu_interface_setopt+0x11c>)
   323ec:	b083      	sub	sp, #12
   323ee:	6800      	ldr	r0, [r0, #0]
   323f0:	3802      	subs	r0, #2
   323f2:	2801      	cmp	r0, #1
   323f4:	d877      	bhi.n	324e6 <mfu_interface_setopt+0xfe>
   323f6:	f240 2003 	movw	r0, #515	; 0x203
   323fa:	4281      	cmp	r1, r0
   323fc:	d16d      	bne.n	324da <mfu_interface_setopt+0xf2>
   323fe:	3a04      	subs	r2, #4
   32400:	2a03      	cmp	r2, #3
   32402:	d85c      	bhi.n	324be <mfu_interface_setopt+0xd6>
   32404:	e8df f002 	tbb	[pc, r2]
   32408:	514e024b 	.word	0x514e024b
   3240c:	2407      	movs	r4, #7
   3240e:	4625      	mov	r5, r4
   32410:	2100      	movs	r1, #0
   32412:	4668      	mov	r0, sp
   32414:	f7fc ff70 	bl	2f2f8 <rpc_dfu_client_request_alloc>
   32418:	4603      	mov	r3, r0
   3241a:	2800      	cmp	r0, #0
   3241c:	d138      	bne.n	32490 <mfu_interface_setopt+0xa8>
   3241e:	2704      	movs	r7, #4
   32420:	4e39      	ldr	r6, [pc, #228]	; (32508 <mfu_interface_setopt+0x120>)
   32422:	9800      	ldr	r0, [sp, #0]
   32424:	8832      	ldrh	r2, [r6, #0]
   32426:	4629      	mov	r1, r5
   32428:	3201      	adds	r2, #1
   3242a:	b292      	uxth	r2, r2
   3242c:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   32430:	4c36      	ldr	r4, [pc, #216]	; (3250c <mfu_interface_setopt+0x124>)
   32432:	60c5      	str	r5, [r0, #12]
   32434:	7103      	strb	r3, [r0, #4]
   32436:	7143      	strb	r3, [r0, #5]
   32438:	7183      	strb	r3, [r0, #6]
   3243a:	71c3      	strb	r3, [r0, #7]
   3243c:	7243      	strb	r3, [r0, #9]
   3243e:	7283      	strb	r3, [r0, #10]
   32440:	72c3      	strb	r3, [r0, #11]
   32442:	7207      	strb	r7, [r0, #8]
   32444:	8032      	strh	r2, [r6, #0]
   32446:	6023      	str	r3, [r4, #0]
   32448:	f7fc ff6a 	bl	2f320 <rpc_dfu_client_request_send>
   3244c:	b9b8      	cbnz	r0, 3247e <mfu_interface_setopt+0x96>
   3244e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32452:	ad02      	add	r5, sp, #8
   32454:	4e2b      	ldr	r6, [pc, #172]	; (32504 <mfu_interface_setopt+0x11c>)
   32456:	f845 3d04 	str.w	r3, [r5, #-4]!
   3245a:	e005      	b.n	32468 <mfu_interface_setopt+0x80>
   3245c:	4629      	mov	r1, r5
   3245e:	4630      	mov	r0, r6
   32460:	f7f4 ffd4 	bl	2740c <bsd_os_timedwait>
   32464:	2800      	cmp	r0, #0
   32466:	d131      	bne.n	324cc <mfu_interface_setopt+0xe4>
   32468:	6820      	ldr	r0, [r4, #0]
   3246a:	2800      	cmp	r0, #0
   3246c:	d0f6      	beq.n	3245c <mfu_interface_setopt+0x74>
   3246e:	6904      	ldr	r4, [r0, #16]
   32470:	f7fc ff6a 	bl	2f348 <rpc_dfu_client_message_free>
   32474:	2c00      	cmp	r4, #0
   32476:	d13c      	bne.n	324f2 <mfu_interface_setopt+0x10a>
   32478:	4620      	mov	r0, r4
   3247a:	b003      	add	sp, #12
   3247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3247e:	9800      	ldr	r0, [sp, #0]
   32480:	6803      	ldr	r3, [r0, #0]
   32482:	b11b      	cbz	r3, 3248c <mfu_interface_setopt+0xa4>
   32484:	4618      	mov	r0, r3
   32486:	f7fc ff67 	bl	2f358 <rpc_dfu_client_data_free>
   3248a:	9800      	ldr	r0, [sp, #0]
   3248c:	f7fc ff5c 	bl	2f348 <rpc_dfu_client_message_free>
   32490:	200c      	movs	r0, #12
   32492:	f7f5 f873 	bl	2757c <bsd_os_errno_set>
   32496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3249a:	b003      	add	sp, #12
   3249c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3249e:	2405      	movs	r4, #5
   324a0:	4625      	mov	r5, r4
   324a2:	e7b5      	b.n	32410 <mfu_interface_setopt+0x28>
   324a4:	2408      	movs	r4, #8
   324a6:	4625      	mov	r5, r4
   324a8:	e7b2      	b.n	32410 <mfu_interface_setopt+0x28>
   324aa:	b1b3      	cbz	r3, 324da <mfu_interface_setopt+0xf2>
   324ac:	9a08      	ldr	r2, [sp, #32]
   324ae:	2a04      	cmp	r2, #4
   324b0:	d113      	bne.n	324da <mfu_interface_setopt+0xf2>
   324b2:	2000      	movs	r0, #0
   324b4:	681a      	ldr	r2, [r3, #0]
   324b6:	4b16      	ldr	r3, [pc, #88]	; (32510 <mfu_interface_setopt+0x128>)
   324b8:	601a      	str	r2, [r3, #0]
   324ba:	b003      	add	sp, #12
   324bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   324be:	202a      	movs	r0, #42	; 0x2a
   324c0:	f7f5 f85c 	bl	2757c <bsd_os_errno_set>
   324c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   324c8:	b003      	add	sp, #12
   324ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   324cc:	203c      	movs	r0, #60	; 0x3c
   324ce:	f7f5 f855 	bl	2757c <bsd_os_errno_set>
   324d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   324d6:	b003      	add	sp, #12
   324d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   324da:	2016      	movs	r0, #22
   324dc:	f7f5 f84e 	bl	2757c <bsd_os_errno_set>
   324e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   324e4:	e7c9      	b.n	3247a <mfu_interface_setopt+0x92>
   324e6:	2001      	movs	r0, #1
   324e8:	f7f5 f848 	bl	2757c <bsd_os_errno_set>
   324ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   324f0:	e7c3      	b.n	3247a <mfu_interface_setopt+0x92>
   324f2:	4b08      	ldr	r3, [pc, #32]	; (32514 <mfu_interface_setopt+0x12c>)
   324f4:	2008      	movs	r0, #8
   324f6:	601c      	str	r4, [r3, #0]
   324f8:	f7f5 f840 	bl	2757c <bsd_os_errno_set>
   324fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32500:	e7bb      	b.n	3247a <mfu_interface_setopt+0x92>
   32502:	bf00      	nop
   32504:	20023ed0 	.word	0x20023ed0
   32508:	200287ae 	.word	0x200287ae
   3250c:	20023edc 	.word	0x20023edc
   32510:	20023ed8 	.word	0x20023ed8
   32514:	20023ed4 	.word	0x20023ed4

00032518 <mfu_interface_getopt>:
   32518:	f240 2003 	movw	r0, #515	; 0x203
   3251c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32520:	4281      	cmp	r1, r0
   32522:	b082      	sub	sp, #8
   32524:	9e08      	ldr	r6, [sp, #32]
   32526:	f040 80ae 	bne.w	32686 <mfu_interface_getopt+0x16e>
   3252a:	461d      	mov	r5, r3
   3252c:	2b00      	cmp	r3, #0
   3252e:	f000 80aa 	beq.w	32686 <mfu_interface_getopt+0x16e>
   32532:	2e00      	cmp	r6, #0
   32534:	f000 80a7 	beq.w	32686 <mfu_interface_getopt+0x16e>
   32538:	4b5e      	ldr	r3, [pc, #376]	; (326b4 <mfu_interface_getopt+0x19c>)
   3253a:	681b      	ldr	r3, [r3, #0]
   3253c:	3b02      	subs	r3, #2
   3253e:	2b01      	cmp	r3, #1
   32540:	f200 80a7 	bhi.w	32692 <mfu_interface_getopt+0x17a>
   32544:	3a01      	subs	r2, #1
   32546:	2a13      	cmp	r2, #19
   32548:	d879      	bhi.n	3263e <mfu_interface_getopt+0x126>
   3254a:	e8df f002 	tbb	[pc, r2]
   3254e:	5f17      	.short	0x5f17
   32550:	78787878 	.word	0x78787878
   32554:	78787872 	.word	0x78787872
   32558:	78787878 	.word	0x78787878
   3255c:	78787878 	.word	0x78787878
   32560:	0a78      	.short	0x0a78
   32562:	6833      	ldr	r3, [r6, #0]
   32564:	2b04      	cmp	r3, #4
   32566:	f040 808e 	bne.w	32686 <mfu_interface_getopt+0x16e>
   3256a:	2200      	movs	r2, #0
   3256c:	4610      	mov	r0, r2
   3256e:	4b52      	ldr	r3, [pc, #328]	; (326b8 <mfu_interface_getopt+0x1a0>)
   32570:	6819      	ldr	r1, [r3, #0]
   32572:	601a      	str	r2, [r3, #0]
   32574:	6029      	str	r1, [r5, #0]
   32576:	b002      	add	sp, #8
   32578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3257c:	6833      	ldr	r3, [r6, #0]
   3257e:	2b24      	cmp	r3, #36	; 0x24
   32580:	f040 8081 	bne.w	32686 <mfu_interface_getopt+0x16e>
   32584:	2401      	movs	r4, #1
   32586:	46a0      	mov	r8, r4
   32588:	2100      	movs	r1, #0
   3258a:	4668      	mov	r0, sp
   3258c:	f7fc feb4 	bl	2f2f8 <rpc_dfu_client_request_alloc>
   32590:	2800      	cmp	r0, #0
   32592:	d146      	bne.n	32622 <mfu_interface_getopt+0x10a>
   32594:	4949      	ldr	r1, [pc, #292]	; (326bc <mfu_interface_getopt+0x1a4>)
   32596:	9b00      	ldr	r3, [sp, #0]
   32598:	880a      	ldrh	r2, [r1, #0]
   3259a:	f1b8 0f03 	cmp.w	r8, #3
   3259e:	f102 0201 	add.w	r2, r2, #1
   325a2:	b292      	uxth	r2, r2
   325a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   325a8:	7118      	strb	r0, [r3, #4]
   325aa:	800a      	strh	r2, [r1, #0]
   325ac:	60dc      	str	r4, [r3, #12]
   325ae:	7158      	strb	r0, [r3, #5]
   325b0:	7198      	strb	r0, [r3, #6]
   325b2:	71d8      	strb	r0, [r3, #7]
   325b4:	d04b      	beq.n	3264e <mfu_interface_getopt+0x136>
   325b6:	2104      	movs	r1, #4
   325b8:	2200      	movs	r2, #0
   325ba:	4f41      	ldr	r7, [pc, #260]	; (326c0 <mfu_interface_getopt+0x1a8>)
   325bc:	6099      	str	r1, [r3, #8]
   325be:	4618      	mov	r0, r3
   325c0:	4641      	mov	r1, r8
   325c2:	603a      	str	r2, [r7, #0]
   325c4:	f7fc feac 	bl	2f320 <rpc_dfu_client_request_send>
   325c8:	2800      	cmp	r0, #0
   325ca:	d14d      	bne.n	32668 <mfu_interface_getopt+0x150>
   325cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   325d0:	ac02      	add	r4, sp, #8
   325d2:	f844 3d04 	str.w	r3, [r4, #-4]!
   325d6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 326b4 <mfu_interface_getopt+0x19c>
   325da:	e005      	b.n	325e8 <mfu_interface_getopt+0xd0>
   325dc:	4621      	mov	r1, r4
   325de:	4640      	mov	r0, r8
   325e0:	f7f4 ff14 	bl	2740c <bsd_os_timedwait>
   325e4:	2800      	cmp	r0, #0
   325e6:	d137      	bne.n	32658 <mfu_interface_getopt+0x140>
   325e8:	6839      	ldr	r1, [r7, #0]
   325ea:	2900      	cmp	r1, #0
   325ec:	d0f6      	beq.n	325dc <mfu_interface_getopt+0xc4>
   325ee:	690c      	ldr	r4, [r1, #16]
   325f0:	2c00      	cmp	r4, #0
   325f2:	d154      	bne.n	3269e <mfu_interface_getopt+0x186>
   325f4:	6832      	ldr	r2, [r6, #0]
   325f6:	3114      	adds	r1, #20
   325f8:	4628      	mov	r0, r5
   325fa:	f006 faa0 	bl	38b3e <memcpy>
   325fe:	6838      	ldr	r0, [r7, #0]
   32600:	f7fc fea2 	bl	2f348 <rpc_dfu_client_message_free>
   32604:	4620      	mov	r0, r4
   32606:	b002      	add	sp, #8
   32608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3260c:	6833      	ldr	r3, [r6, #0]
   3260e:	2b04      	cmp	r3, #4
   32610:	d139      	bne.n	32686 <mfu_interface_getopt+0x16e>
   32612:	2402      	movs	r4, #2
   32614:	2100      	movs	r1, #0
   32616:	4668      	mov	r0, sp
   32618:	46a0      	mov	r8, r4
   3261a:	f7fc fe6d 	bl	2f2f8 <rpc_dfu_client_request_alloc>
   3261e:	2800      	cmp	r0, #0
   32620:	d0b8      	beq.n	32594 <mfu_interface_getopt+0x7c>
   32622:	200c      	movs	r0, #12
   32624:	f7f4 ffaa 	bl	2757c <bsd_os_errno_set>
   32628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3262c:	b002      	add	sp, #8
   3262e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32632:	6833      	ldr	r3, [r6, #0]
   32634:	2b04      	cmp	r3, #4
   32636:	d126      	bne.n	32686 <mfu_interface_getopt+0x16e>
   32638:	2409      	movs	r4, #9
   3263a:	46a0      	mov	r8, r4
   3263c:	e7a4      	b.n	32588 <mfu_interface_getopt+0x70>
   3263e:	202a      	movs	r0, #42	; 0x2a
   32640:	f7f4 ff9c 	bl	2757c <bsd_os_errno_set>
   32644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32648:	b002      	add	sp, #8
   3264a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3264e:	4a1d      	ldr	r2, [pc, #116]	; (326c4 <mfu_interface_getopt+0x1ac>)
   32650:	2108      	movs	r1, #8
   32652:	6812      	ldr	r2, [r2, #0]
   32654:	611a      	str	r2, [r3, #16]
   32656:	e7af      	b.n	325b8 <mfu_interface_getopt+0xa0>
   32658:	203c      	movs	r0, #60	; 0x3c
   3265a:	f7f4 ff8f 	bl	2757c <bsd_os_errno_set>
   3265e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32662:	b002      	add	sp, #8
   32664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32668:	9800      	ldr	r0, [sp, #0]
   3266a:	6803      	ldr	r3, [r0, #0]
   3266c:	b11b      	cbz	r3, 32676 <mfu_interface_getopt+0x15e>
   3266e:	4618      	mov	r0, r3
   32670:	f7fc fe72 	bl	2f358 <rpc_dfu_client_data_free>
   32674:	9800      	ldr	r0, [sp, #0]
   32676:	f7fc fe67 	bl	2f348 <rpc_dfu_client_message_free>
   3267a:	200c      	movs	r0, #12
   3267c:	f7f4 ff7e 	bl	2757c <bsd_os_errno_set>
   32680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32684:	e7d2      	b.n	3262c <mfu_interface_getopt+0x114>
   32686:	2016      	movs	r0, #22
   32688:	f7f4 ff78 	bl	2757c <bsd_os_errno_set>
   3268c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32690:	e771      	b.n	32576 <mfu_interface_getopt+0x5e>
   32692:	2001      	movs	r0, #1
   32694:	f7f4 ff72 	bl	2757c <bsd_os_errno_set>
   32698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3269c:	e76b      	b.n	32576 <mfu_interface_getopt+0x5e>
   3269e:	4b06      	ldr	r3, [pc, #24]	; (326b8 <mfu_interface_getopt+0x1a0>)
   326a0:	2008      	movs	r0, #8
   326a2:	601c      	str	r4, [r3, #0]
   326a4:	f7f4 ff6a 	bl	2757c <bsd_os_errno_set>
   326a8:	6838      	ldr	r0, [r7, #0]
   326aa:	f7fc fe4d 	bl	2f348 <rpc_dfu_client_message_free>
   326ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   326b2:	e760      	b.n	32576 <mfu_interface_getopt+0x5e>
   326b4:	20023ed0 	.word	0x20023ed0
   326b8:	20023ed4 	.word	0x20023ed4
   326bc:	200287ae 	.word	0x200287ae
   326c0:	20023edc 	.word	0x20023edc
   326c4:	20023ed8 	.word	0x20023ed8

000326c8 <interface_init>:
   326c8:	b508      	push	{r3, lr}
   326ca:	f44f 72b4 	mov.w	r2, #360	; 0x168
   326ce:	2100      	movs	r1, #0
   326d0:	4802      	ldr	r0, [pc, #8]	; (326dc <interface_init+0x14>)
   326d2:	f006 fa54 	bl	38b7e <memset>
   326d6:	2000      	movs	r0, #0
   326d8:	bd08      	pop	{r3, pc}
   326da:	bf00      	nop
   326dc:	2002c6e8 	.word	0x2002c6e8

000326e0 <interface_socket_allocate>:
   326e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   326e2:	4b30      	ldr	r3, [pc, #192]	; (327a4 <interface_socket_allocate+0xc4>)
   326e4:	4606      	mov	r6, r0
   326e6:	681d      	ldr	r5, [r3, #0]
   326e8:	4608      	mov	r0, r1
   326ea:	b31d      	cbz	r5, 32734 <interface_socket_allocate+0x54>
   326ec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   326ee:	2c00      	cmp	r4, #0
   326f0:	d04a      	beq.n	32788 <interface_socket_allocate+0xa8>
   326f2:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   326f4:	2c00      	cmp	r4, #0
   326f6:	d049      	beq.n	3278c <interface_socket_allocate+0xac>
   326f8:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   326fa:	2c00      	cmp	r4, #0
   326fc:	d048      	beq.n	32790 <interface_socket_allocate+0xb0>
   326fe:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   32702:	2900      	cmp	r1, #0
   32704:	d046      	beq.n	32794 <interface_socket_allocate+0xb4>
   32706:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   3270a:	b191      	cbz	r1, 32732 <interface_socket_allocate+0x52>
   3270c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   32710:	2900      	cmp	r1, #0
   32712:	d043      	beq.n	3279c <interface_socket_allocate+0xbc>
   32714:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   32718:	2900      	cmp	r1, #0
   3271a:	d041      	beq.n	327a0 <interface_socket_allocate+0xc0>
   3271c:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   32720:	2900      	cmp	r1, #0
   32722:	d039      	beq.n	32798 <interface_socket_allocate+0xb8>
   32724:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   32728:	2069      	movs	r0, #105	; 0x69
   3272a:	f7f4 ff27 	bl	2757c <bsd_os_errno_set>
   3272e:	4628      	mov	r0, r5
   32730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32732:	2505      	movs	r5, #5
   32734:	f04f 0c01 	mov.w	ip, #1
   32738:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3273c:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   32740:	00e4      	lsls	r4, r4, #3
   32742:	f843 c004 	str.w	ip, [r3, r4]
   32746:	441c      	add	r4, r3
   32748:	4611      	mov	r1, r2
   3274a:	61a7      	str	r7, [r4, #24]
   3274c:	4622      	mov	r2, r4
   3274e:	f7fe feeb 	bl	31528 <packet_handler_create>
   32752:	4603      	mov	r3, r0
   32754:	61e0      	str	r0, [r4, #28]
   32756:	b158      	cbz	r0, 32770 <interface_socket_allocate+0x90>
   32758:	681b      	ldr	r3, [r3, #0]
   3275a:	681b      	ldr	r3, [r3, #0]
   3275c:	4798      	blx	r3
   3275e:	b910      	cbnz	r0, 32766 <interface_socket_allocate+0x86>
   32760:	6034      	str	r4, [r6, #0]
   32762:	4628      	mov	r0, r5
   32764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32766:	69e0      	ldr	r0, [r4, #28]
   32768:	f7fe fefe 	bl	31568 <packet_handler_delete>
   3276c:	2300      	movs	r3, #0
   3276e:	61e3      	str	r3, [r4, #28]
   32770:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   32774:	2228      	movs	r2, #40	; 0x28
   32776:	2100      	movs	r1, #0
   32778:	4620      	mov	r0, r4
   3277a:	f006 fa00 	bl	38b7e <memset>
   3277e:	200c      	movs	r0, #12
   32780:	f7f4 fefc 	bl	2757c <bsd_os_errno_set>
   32784:	4628      	mov	r0, r5
   32786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32788:	2501      	movs	r5, #1
   3278a:	e7d3      	b.n	32734 <interface_socket_allocate+0x54>
   3278c:	2502      	movs	r5, #2
   3278e:	e7d1      	b.n	32734 <interface_socket_allocate+0x54>
   32790:	2503      	movs	r5, #3
   32792:	e7cf      	b.n	32734 <interface_socket_allocate+0x54>
   32794:	2504      	movs	r5, #4
   32796:	e7cd      	b.n	32734 <interface_socket_allocate+0x54>
   32798:	2508      	movs	r5, #8
   3279a:	e7cb      	b.n	32734 <interface_socket_allocate+0x54>
   3279c:	2506      	movs	r5, #6
   3279e:	e7c9      	b.n	32734 <interface_socket_allocate+0x54>
   327a0:	2507      	movs	r5, #7
   327a2:	e7c7      	b.n	32734 <interface_socket_allocate+0x54>
   327a4:	2002c6e8 	.word	0x2002c6e8

000327a8 <interface_socket_free>:
   327a8:	2808      	cmp	r0, #8
   327aa:	d900      	bls.n	327ae <interface_socket_free+0x6>
   327ac:	4770      	bx	lr
   327ae:	b510      	push	{r4, lr}
   327b0:	4c07      	ldr	r4, [pc, #28]	; (327d0 <interface_socket_free+0x28>)
   327b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   327b6:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   327ba:	69e0      	ldr	r0, [r4, #28]
   327bc:	b108      	cbz	r0, 327c2 <interface_socket_free+0x1a>
   327be:	f7fe fed3 	bl	31568 <packet_handler_delete>
   327c2:	4620      	mov	r0, r4
   327c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   327c8:	2228      	movs	r2, #40	; 0x28
   327ca:	2100      	movs	r1, #0
   327cc:	f006 b9d7 	b.w	38b7e <memset>
   327d0:	2002c6e8 	.word	0x2002c6e8

000327d4 <interface_socket_packet_handler_update>:
   327d4:	2808      	cmp	r0, #8
   327d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   327da:	d81e      	bhi.n	3281a <interface_socket_packet_handler_update+0x46>
   327dc:	ea4f 0880 	mov.w	r8, r0, lsl #2
   327e0:	4e17      	ldr	r6, [pc, #92]	; (32840 <interface_socket_packet_handler_update+0x6c>)
   327e2:	eb08 0300 	add.w	r3, r8, r0
   327e6:	00db      	lsls	r3, r3, #3
   327e8:	58f4      	ldr	r4, [r6, r3]
   327ea:	18f5      	adds	r5, r6, r3
   327ec:	b1ac      	cbz	r4, 3281a <interface_socket_packet_handler_update+0x46>
   327ee:	460b      	mov	r3, r1
   327f0:	4604      	mov	r4, r0
   327f2:	4611      	mov	r1, r2
   327f4:	4618      	mov	r0, r3
   327f6:	462a      	mov	r2, r5
   327f8:	f8d5 901c 	ldr.w	r9, [r5, #28]
   327fc:	f7fe fe94 	bl	31528 <packet_handler_create>
   32800:	61e8      	str	r0, [r5, #28]
   32802:	b1d0      	cbz	r0, 3283a <interface_socket_packet_handler_update+0x66>
   32804:	6803      	ldr	r3, [r0, #0]
   32806:	681b      	ldr	r3, [r3, #0]
   32808:	4798      	blx	r3
   3280a:	4607      	mov	r7, r0
   3280c:	b948      	cbnz	r0, 32822 <interface_socket_packet_handler_update+0x4e>
   3280e:	4648      	mov	r0, r9
   32810:	f7fe feaa 	bl	31568 <packet_handler_delete>
   32814:	4638      	mov	r0, r7
   32816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3281a:	2705      	movs	r7, #5
   3281c:	4638      	mov	r0, r7
   3281e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   32822:	69e8      	ldr	r0, [r5, #28]
   32824:	f7fe fea0 	bl	31568 <packet_handler_delete>
   32828:	eb08 0004 	add.w	r0, r8, r4
   3282c:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   32830:	f8c6 901c 	str.w	r9, [r6, #28]
   32834:	4638      	mov	r0, r7
   32836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3283a:	2704      	movs	r7, #4
   3283c:	e7f4      	b.n	32828 <interface_socket_packet_handler_update+0x54>
   3283e:	bf00      	nop
   32840:	2002c6e8 	.word	0x2002c6e8

00032844 <interface_socket_wait>:
   32844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32848:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3284c:	4c0d      	ldr	r4, [pc, #52]	; (32884 <interface_socket_wait+0x40>)
   3284e:	00c0      	lsls	r0, r0, #3
   32850:	5825      	ldr	r5, [r4, r0]
   32852:	4404      	add	r4, r0
   32854:	4015      	ands	r5, r2
   32856:	428d      	cmp	r5, r1
   32858:	d011      	beq.n	3287e <interface_socket_wait+0x3a>
   3285a:	6860      	ldr	r0, [r4, #4]
   3285c:	b978      	cbnz	r0, 3287e <interface_socket_wait+0x3a>
   3285e:	4698      	mov	r8, r3
   32860:	460f      	mov	r7, r1
   32862:	4616      	mov	r6, r2
   32864:	4625      	mov	r5, r4
   32866:	e006      	b.n	32876 <interface_socket_wait+0x32>
   32868:	686b      	ldr	r3, [r5, #4]
   3286a:	b943      	cbnz	r3, 3287e <interface_socket_wait+0x3a>
   3286c:	4641      	mov	r1, r8
   3286e:	4620      	mov	r0, r4
   32870:	f7f4 fdcc 	bl	2740c <bsd_os_timedwait>
   32874:	b920      	cbnz	r0, 32880 <interface_socket_wait+0x3c>
   32876:	6828      	ldr	r0, [r5, #0]
   32878:	4030      	ands	r0, r6
   3287a:	42b8      	cmp	r0, r7
   3287c:	d1f4      	bne.n	32868 <interface_socket_wait+0x24>
   3287e:	2000      	movs	r0, #0
   32880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32884:	2002c6e8 	.word	0x2002c6e8

00032888 <interface_from_internal_id_search>:
   32888:	4b27      	ldr	r3, [pc, #156]	; (32928 <interface_from_internal_id_search+0xa0>)
   3288a:	681a      	ldr	r2, [r3, #0]
   3288c:	b112      	cbz	r2, 32894 <interface_from_internal_id_search+0xc>
   3288e:	699a      	ldr	r2, [r3, #24]
   32890:	4282      	cmp	r2, r0
   32892:	d039      	beq.n	32908 <interface_from_internal_id_search+0x80>
   32894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   32896:	b112      	cbz	r2, 3289e <interface_from_internal_id_search+0x16>
   32898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   3289a:	4282      	cmp	r2, r0
   3289c:	d036      	beq.n	3290c <interface_from_internal_id_search+0x84>
   3289e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   328a0:	b112      	cbz	r2, 328a8 <interface_from_internal_id_search+0x20>
   328a2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   328a4:	4282      	cmp	r2, r0
   328a6:	d033      	beq.n	32910 <interface_from_internal_id_search+0x88>
   328a8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   328aa:	b11a      	cbz	r2, 328b4 <interface_from_internal_id_search+0x2c>
   328ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   328b0:	4282      	cmp	r2, r0
   328b2:	d02f      	beq.n	32914 <interface_from_internal_id_search+0x8c>
   328b4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   328b8:	b11a      	cbz	r2, 328c2 <interface_from_internal_id_search+0x3a>
   328ba:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   328be:	4282      	cmp	r2, r0
   328c0:	d02a      	beq.n	32918 <interface_from_internal_id_search+0x90>
   328c2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   328c6:	b11a      	cbz	r2, 328d0 <interface_from_internal_id_search+0x48>
   328c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   328cc:	4282      	cmp	r2, r0
   328ce:	d025      	beq.n	3291c <interface_from_internal_id_search+0x94>
   328d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   328d4:	b11a      	cbz	r2, 328de <interface_from_internal_id_search+0x56>
   328d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   328da:	4282      	cmp	r2, r0
   328dc:	d020      	beq.n	32920 <interface_from_internal_id_search+0x98>
   328de:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   328e2:	b11a      	cbz	r2, 328ec <interface_from_internal_id_search+0x64>
   328e4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   328e8:	4282      	cmp	r2, r0
   328ea:	d01b      	beq.n	32924 <interface_from_internal_id_search+0x9c>
   328ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   328f0:	b13a      	cbz	r2, 32902 <interface_from_internal_id_search+0x7a>
   328f2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   328f6:	4283      	cmp	r3, r0
   328f8:	bf14      	ite	ne
   328fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   328fe:	2008      	moveq	r0, #8
   32900:	4770      	bx	lr
   32902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32906:	4770      	bx	lr
   32908:	2000      	movs	r0, #0
   3290a:	4770      	bx	lr
   3290c:	2001      	movs	r0, #1
   3290e:	4770      	bx	lr
   32910:	2002      	movs	r0, #2
   32912:	4770      	bx	lr
   32914:	2003      	movs	r0, #3
   32916:	4770      	bx	lr
   32918:	2004      	movs	r0, #4
   3291a:	4770      	bx	lr
   3291c:	2005      	movs	r0, #5
   3291e:	4770      	bx	lr
   32920:	2006      	movs	r0, #6
   32922:	4770      	bx	lr
   32924:	2007      	movs	r0, #7
   32926:	4770      	bx	lr
   32928:	2002c6e8 	.word	0x2002c6e8

0003292c <interface_socket_from_handle_get>:
   3292c:	2808      	cmp	r0, #8
   3292e:	d807      	bhi.n	32940 <interface_socket_from_handle_get+0x14>
   32930:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   32934:	4b03      	ldr	r3, [pc, #12]	; (32944 <interface_socket_from_handle_get+0x18>)
   32936:	00c0      	lsls	r0, r0, #3
   32938:	581a      	ldr	r2, [r3, r0]
   3293a:	b10a      	cbz	r2, 32940 <interface_socket_from_handle_get+0x14>
   3293c:	4418      	add	r0, r3
   3293e:	4770      	bx	lr
   32940:	2000      	movs	r0, #0
   32942:	4770      	bx	lr
   32944:	2002c6e8 	.word	0x2002c6e8

00032948 <interface_socket_event_get>:
   32948:	b119      	cbz	r1, 32952 <interface_socket_event_get+0xa>
   3294a:	2808      	cmp	r0, #8
   3294c:	d902      	bls.n	32954 <interface_socket_event_get+0xc>
   3294e:	2310      	movs	r3, #16
   32950:	600b      	str	r3, [r1, #0]
   32952:	4770      	bx	lr
   32954:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   32958:	4b07      	ldr	r3, [pc, #28]	; (32978 <interface_socket_event_get+0x30>)
   3295a:	00c0      	lsls	r0, r0, #3
   3295c:	581a      	ldr	r2, [r3, r0]
   3295e:	2a00      	cmp	r2, #0
   32960:	d0f5      	beq.n	3294e <interface_socket_event_get+0x6>
   32962:	581b      	ldr	r3, [r3, r0]
   32964:	0c1b      	lsrs	r3, r3, #16
   32966:	f003 020a 	and.w	r2, r3, #10
   3296a:	2a0a      	cmp	r2, #10
   3296c:	bf14      	ite	ne
   3296e:	f003 030f 	andne.w	r3, r3, #15
   32972:	f003 030d 	andeq.w	r3, r3, #13
   32976:	e7eb      	b.n	32950 <interface_socket_event_get+0x8>
   32978:	2002c6e8 	.word	0x2002c6e8

0003297c <interface_socket_setopt>:
   3297c:	2808      	cmp	r0, #8
   3297e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32980:	d82c      	bhi.n	329dc <interface_socket_setopt+0x60>
   32982:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   32986:	4e1e      	ldr	r6, [pc, #120]	; (32a00 <interface_socket_setopt+0x84>)
   32988:	00c0      	lsls	r0, r0, #3
   3298a:	5834      	ldr	r4, [r6, r0]
   3298c:	b334      	cbz	r4, 329dc <interface_socket_setopt+0x60>
   3298e:	2901      	cmp	r1, #1
   32990:	d11e      	bne.n	329d0 <interface_socket_setopt+0x54>
   32992:	f1a2 0114 	sub.w	r1, r2, #20
   32996:	2901      	cmp	r1, #1
   32998:	d81a      	bhi.n	329d0 <interface_socket_setopt+0x54>
   3299a:	9906      	ldr	r1, [sp, #24]
   3299c:	2908      	cmp	r1, #8
   3299e:	d123      	bne.n	329e8 <interface_socket_setopt+0x6c>
   329a0:	b313      	cbz	r3, 329e8 <interface_socket_setopt+0x6c>
   329a2:	6859      	ldr	r1, [r3, #4]
   329a4:	4c17      	ldr	r4, [pc, #92]	; (32a04 <interface_socket_setopt+0x88>)
   329a6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   329aa:	fba4 4101 	umull	r4, r1, r4, r1
   329ae:	0989      	lsrs	r1, r1, #6
   329b0:	460c      	mov	r4, r1
   329b2:	2500      	movs	r5, #0
   329b4:	681b      	ldr	r3, [r3, #0]
   329b6:	fbe7 4503 	umlal	r4, r5, r7, r3
   329ba:	2d01      	cmp	r5, #1
   329bc:	bf08      	it	eq
   329be:	2c00      	cmpeq	r4, #0
   329c0:	d218      	bcs.n	329f4 <interface_socket_setopt+0x78>
   329c2:	4430      	add	r0, r6
   329c4:	2a14      	cmp	r2, #20
   329c6:	bf0c      	ite	eq
   329c8:	6204      	streq	r4, [r0, #32]
   329ca:	6244      	strne	r4, [r0, #36]	; 0x24
   329cc:	2000      	movs	r0, #0
   329ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   329d0:	202a      	movs	r0, #42	; 0x2a
   329d2:	f7f4 fdd3 	bl	2757c <bsd_os_errno_set>
   329d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   329da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   329dc:	2009      	movs	r0, #9
   329de:	f7f4 fdcd 	bl	2757c <bsd_os_errno_set>
   329e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   329e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   329e8:	2016      	movs	r0, #22
   329ea:	f7f4 fdc7 	bl	2757c <bsd_os_errno_set>
   329ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   329f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   329f4:	2025      	movs	r0, #37	; 0x25
   329f6:	f7f4 fdc1 	bl	2757c <bsd_os_errno_set>
   329fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   329fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32a00:	2002c6e8 	.word	0x2002c6e8
   32a04:	10624dd3 	.word	0x10624dd3

00032a08 <interface_socket_getopt>:
   32a08:	b570      	push	{r4, r5, r6, lr}
   32a0a:	2808      	cmp	r0, #8
   32a0c:	9d04      	ldr	r5, [sp, #16]
   32a0e:	d835      	bhi.n	32a7c <interface_socket_getopt+0x74>
   32a10:	4c20      	ldr	r4, [pc, #128]	; (32a94 <interface_socket_getopt+0x8c>)
   32a12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   32a16:	00c0      	lsls	r0, r0, #3
   32a18:	5826      	ldr	r6, [r4, r0]
   32a1a:	4404      	add	r4, r0
   32a1c:	b376      	cbz	r6, 32a7c <interface_socket_getopt+0x74>
   32a1e:	2901      	cmp	r1, #1
   32a20:	d132      	bne.n	32a88 <interface_socket_getopt+0x80>
   32a22:	b32b      	cbz	r3, 32a70 <interface_socket_getopt+0x68>
   32a24:	b325      	cbz	r5, 32a70 <interface_socket_getopt+0x68>
   32a26:	2a04      	cmp	r2, #4
   32a28:	d019      	beq.n	32a5e <interface_socket_getopt+0x56>
   32a2a:	f1a2 0114 	sub.w	r1, r2, #20
   32a2e:	2901      	cmp	r1, #1
   32a30:	d82a      	bhi.n	32a88 <interface_socket_getopt+0x80>
   32a32:	6829      	ldr	r1, [r5, #0]
   32a34:	2908      	cmp	r1, #8
   32a36:	d11b      	bne.n	32a70 <interface_socket_getopt+0x68>
   32a38:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   32a3c:	2a14      	cmp	r2, #20
   32a3e:	bf18      	it	ne
   32a40:	4601      	movne	r1, r0
   32a42:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   32a46:	4a14      	ldr	r2, [pc, #80]	; (32a98 <interface_socket_getopt+0x90>)
   32a48:	2000      	movs	r0, #0
   32a4a:	fba2 5201 	umull	r5, r2, r2, r1
   32a4e:	0992      	lsrs	r2, r2, #6
   32a50:	fb04 1112 	mls	r1, r4, r2, r1
   32a54:	fb04 f101 	mul.w	r1, r4, r1
   32a58:	e9c3 2100 	strd	r2, r1, [r3]
   32a5c:	bd70      	pop	{r4, r5, r6, pc}
   32a5e:	682a      	ldr	r2, [r5, #0]
   32a60:	2a04      	cmp	r2, #4
   32a62:	d105      	bne.n	32a70 <interface_socket_getopt+0x68>
   32a64:	2200      	movs	r2, #0
   32a66:	6861      	ldr	r1, [r4, #4]
   32a68:	4610      	mov	r0, r2
   32a6a:	6019      	str	r1, [r3, #0]
   32a6c:	6062      	str	r2, [r4, #4]
   32a6e:	bd70      	pop	{r4, r5, r6, pc}
   32a70:	2016      	movs	r0, #22
   32a72:	f7f4 fd83 	bl	2757c <bsd_os_errno_set>
   32a76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32a7a:	bd70      	pop	{r4, r5, r6, pc}
   32a7c:	2009      	movs	r0, #9
   32a7e:	f7f4 fd7d 	bl	2757c <bsd_os_errno_set>
   32a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32a86:	bd70      	pop	{r4, r5, r6, pc}
   32a88:	202a      	movs	r0, #42	; 0x2a
   32a8a:	f7f4 fd77 	bl	2757c <bsd_os_errno_set>
   32a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32a92:	bd70      	pop	{r4, r5, r6, pc}
   32a94:	2002c6e8 	.word	0x2002c6e8
   32a98:	10624dd3 	.word	0x10624dd3

00032a9c <interface_socket_fcntl>:
   32a9c:	2808      	cmp	r0, #8
   32a9e:	b510      	push	{r4, lr}
   32aa0:	d826      	bhi.n	32af0 <interface_socket_fcntl+0x54>
   32aa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   32aa6:	4c1b      	ldr	r4, [pc, #108]	; (32b14 <interface_socket_fcntl+0x78>)
   32aa8:	00c3      	lsls	r3, r0, #3
   32aaa:	58e0      	ldr	r0, [r4, r3]
   32aac:	b300      	cbz	r0, 32af0 <interface_socket_fcntl+0x54>
   32aae:	2901      	cmp	r1, #1
   32ab0:	d005      	beq.n	32abe <interface_socket_fcntl+0x22>
   32ab2:	2902      	cmp	r1, #2
   32ab4:	d122      	bne.n	32afc <interface_socket_fcntl+0x60>
   32ab6:	58e0      	ldr	r0, [r4, r3]
   32ab8:	f3c0 7000 	ubfx	r0, r0, #28, #1
   32abc:	bd10      	pop	{r4, pc}
   32abe:	07d2      	lsls	r2, r2, #31
   32ac0:	d410      	bmi.n	32ae4 <interface_socket_fcntl+0x48>
   32ac2:	58e0      	ldr	r0, [r4, r3]
   32ac4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   32ac8:	d11e      	bne.n	32b08 <interface_socket_fcntl+0x6c>
   32aca:	58e2      	ldr	r2, [r4, r3]
   32acc:	b292      	uxth	r2, r2
   32ace:	2a0a      	cmp	r2, #10
   32ad0:	d01a      	beq.n	32b08 <interface_socket_fcntl+0x6c>
   32ad2:	58e2      	ldr	r2, [r4, r3]
   32ad4:	b292      	uxth	r2, r2
   32ad6:	2a0b      	cmp	r2, #11
   32ad8:	d016      	beq.n	32b08 <interface_socket_fcntl+0x6c>
   32ada:	58e2      	ldr	r2, [r4, r3]
   32adc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   32ae0:	50e2      	str	r2, [r4, r3]
   32ae2:	bd10      	pop	{r4, pc}
   32ae4:	58e2      	ldr	r2, [r4, r3]
   32ae6:	2000      	movs	r0, #0
   32ae8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   32aec:	50e2      	str	r2, [r4, r3]
   32aee:	bd10      	pop	{r4, pc}
   32af0:	2009      	movs	r0, #9
   32af2:	f7f4 fd43 	bl	2757c <bsd_os_errno_set>
   32af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32afa:	bd10      	pop	{r4, pc}
   32afc:	2016      	movs	r0, #22
   32afe:	f7f4 fd3d 	bl	2757c <bsd_os_errno_set>
   32b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32b06:	bd10      	pop	{r4, pc}
   32b08:	2023      	movs	r0, #35	; 0x23
   32b0a:	f7f4 fd37 	bl	2757c <bsd_os_errno_set>
   32b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32b12:	bd10      	pop	{r4, pc}
   32b14:	2002c6e8 	.word	0x2002c6e8

00032b18 <at_client_evt_handler>:
   32b18:	b120      	cbz	r0, 32b24 <at_client_evt_handler+0xc>
   32b1a:	f850 1b08 	ldr.w	r1, [r0], #8
   32b1e:	0c09      	lsrs	r1, r1, #16
   32b20:	f7fc be10 	b.w	2f744 <rpc_at_event_handler>
   32b24:	4770      	bx	lr
   32b26:	bf00      	nop

00032b28 <rpc_at_client_init>:
   32b28:	4801      	ldr	r0, [pc, #4]	; (32b30 <rpc_at_client_init+0x8>)
   32b2a:	f7fb bbc7 	b.w	2e2bc <rpc_client_register>
   32b2e:	bf00      	nop
   32b30:	0003a458 	.word	0x0003a458

00032b34 <rpc_at_client_request_alloc>:
   32b34:	b180      	cbz	r0, 32b58 <rpc_at_client_request_alloc+0x24>
   32b36:	2300      	movs	r3, #0
   32b38:	b510      	push	{r4, lr}
   32b3a:	b082      	sub	sp, #8
   32b3c:	aa02      	add	r2, sp, #8
   32b3e:	4604      	mov	r4, r0
   32b40:	f842 3d04 	str.w	r3, [r2, #-4]!
   32b44:	2003      	movs	r0, #3
   32b46:	f7fb fc33 	bl	2e3b0 <rpc_message_alloc>
   32b4a:	b918      	cbnz	r0, 32b54 <rpc_at_client_request_alloc+0x20>
   32b4c:	9b01      	ldr	r3, [sp, #4]
   32b4e:	b10b      	cbz	r3, 32b54 <rpc_at_client_request_alloc+0x20>
   32b50:	3308      	adds	r3, #8
   32b52:	6023      	str	r3, [r4, #0]
   32b54:	b002      	add	sp, #8
   32b56:	bd10      	pop	{r4, pc}
   32b58:	200e      	movs	r0, #14
   32b5a:	4770      	bx	lr

00032b5c <rpc_at_client_request_send>:
   32b5c:	b150      	cbz	r0, 32b74 <rpc_at_client_request_send+0x18>
   32b5e:	4603      	mov	r3, r0
   32b60:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   32b64:	2003      	movs	r0, #3
   32b66:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   32b6a:	f843 1d08 	str.w	r1, [r3, #-8]!
   32b6e:	4619      	mov	r1, r3
   32b70:	f7fb bc0e 	b.w	2e390 <rpc_message_send>
   32b74:	200e      	movs	r0, #14
   32b76:	4770      	bx	lr

00032b78 <rpc_at_client_message_free>:
   32b78:	b120      	cbz	r0, 32b84 <rpc_at_client_message_free+0xc>
   32b7a:	f1a0 0108 	sub.w	r1, r0, #8
   32b7e:	2003      	movs	r0, #3
   32b80:	f7fb bc42 	b.w	2e408 <rpc_message_free>
   32b84:	200e      	movs	r0, #14
   32b86:	4770      	bx	lr

00032b88 <rpc_at_client_data_free>:
   32b88:	b118      	cbz	r0, 32b92 <rpc_at_client_data_free+0xa>
   32b8a:	4601      	mov	r1, r0
   32b8c:	2003      	movs	r0, #3
   32b8e:	f7fb bc47 	b.w	2e420 <rpc_message_data_free>
   32b92:	200e      	movs	r0, #14
   32b94:	4770      	bx	lr
   32b96:	bf00      	nop

00032b98 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   32b98:	4a07      	ldr	r2, [pc, #28]	; (32bb8 <SystemInit+0x20>)
   32b9a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   32b9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   32ba2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   32ba6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   32baa:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   32bae:	4b03      	ldr	r3, [pc, #12]	; (32bbc <SystemInit+0x24>)
   32bb0:	4a03      	ldr	r2, [pc, #12]	; (32bc0 <SystemInit+0x28>)
   32bb2:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   32bb4:	4770      	bx	lr
   32bb6:	bf00      	nop
   32bb8:	e000ed00 	.word	0xe000ed00
   32bbc:	20020458 	.word	0x20020458
   32bc0:	03d09000 	.word	0x03d09000

00032bc4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   32bc4:	4b04      	ldr	r3, [pc, #16]	; (32bd8 <nrfx_clock_init+0x14>)
   32bc6:	791a      	ldrb	r2, [r3, #4]
   32bc8:	b922      	cbnz	r2, 32bd4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   32bca:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   32bcc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   32bce:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   32bd0:	4802      	ldr	r0, [pc, #8]	; (32bdc <nrfx_clock_init+0x18>)
   32bd2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   32bd4:	4802      	ldr	r0, [pc, #8]	; (32be0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   32bd6:	4770      	bx	lr
   32bd8:	20023ee0 	.word	0x20023ee0
   32bdc:	0bad0000 	.word	0x0bad0000
   32be0:	0bad000c 	.word	0x0bad000c

00032be4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   32be4:	b110      	cbz	r0, 32bec <nrfx_clock_start+0x8>
   32be6:	2801      	cmp	r0, #1
   32be8:	d01e      	beq.n	32c28 <nrfx_clock_start+0x44>
   32bea:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   32bec:	4b13      	ldr	r3, [pc, #76]	; (32c3c <nrfx_clock_start+0x58>)
   32bee:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32bf2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   32bf6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   32bfa:	4619      	mov	r1, r3
   32bfc:	d010      	beq.n	32c20 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   32bfe:	f002 0203 	and.w	r2, r2, #3
   32c02:	2a02      	cmp	r2, #2
   32c04:	d10c      	bne.n	32c20 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   32c06:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32c0a:	2200      	movs	r2, #0
   32c0c:	4b0c      	ldr	r3, [pc, #48]	; (32c40 <nrfx_clock_start+0x5c>)
   32c0e:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   32c10:	2202      	movs	r2, #2
   32c12:	681b      	ldr	r3, [r3, #0]
   32c14:	4b09      	ldr	r3, [pc, #36]	; (32c3c <nrfx_clock_start+0x58>)
   32c16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32c1a:	2201      	movs	r2, #1
   32c1c:	609a      	str	r2, [r3, #8]
}
   32c1e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   32c20:	2301      	movs	r3, #1
   32c22:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   32c26:	e7f0      	b.n	32c0a <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32c28:	2200      	movs	r2, #0
   32c2a:	4b06      	ldr	r3, [pc, #24]	; (32c44 <nrfx_clock_start+0x60>)
   32c2c:	601a      	str	r2, [r3, #0]
   32c2e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   32c30:	4b02      	ldr	r3, [pc, #8]	; (32c3c <nrfx_clock_start+0x58>)
   32c32:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32c36:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   32c38:	4770      	bx	lr
   32c3a:	bf00      	nop
   32c3c:	40005000 	.word	0x40005000
   32c40:	40005104 	.word	0x40005104
   32c44:	40005100 	.word	0x40005100

00032c48 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   32c48:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   32c4a:	b110      	cbz	r0, 32c52 <nrfx_clock_stop+0xa>
   32c4c:	2801      	cmp	r0, #1
   32c4e:	d016      	beq.n	32c7e <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   32c50:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   32c52:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32c54:	2101      	movs	r1, #1
   32c56:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   32c5a:	4c16      	ldr	r4, [pc, #88]	; (32cb4 <nrfx_clock_stop+0x6c>)
   32c5c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32c60:	4a15      	ldr	r2, [pc, #84]	; (32cb8 <nrfx_clock_stop+0x70>)
   32c62:	6010      	str	r0, [r2, #0]
   32c64:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32c66:	4a15      	ldr	r2, [pc, #84]	; (32cbc <nrfx_clock_stop+0x74>)
   32c68:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32c6a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   32c6e:	03db      	lsls	r3, r3, #15
   32c70:	d5ee      	bpl.n	32c50 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   32c72:	2001      	movs	r0, #1
   32c74:	f005 fa40 	bl	380f8 <nrfx_busy_wait>
   32c78:	3d01      	subs	r5, #1
   32c7a:	d1f6      	bne.n	32c6a <nrfx_clock_stop+0x22>
   32c7c:	e7e8      	b.n	32c50 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32c7e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32c80:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32c84:	4b0e      	ldr	r3, [pc, #56]	; (32cc0 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   32c86:	4c0b      	ldr	r4, [pc, #44]	; (32cb4 <nrfx_clock_stop+0x6c>)
   32c88:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32c8c:	601a      	str	r2, [r3, #0]
   32c8e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32c90:	4b0c      	ldr	r3, [pc, #48]	; (32cc4 <nrfx_clock_stop+0x7c>)
   32c92:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   32c94:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   32c98:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   32c9c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   32ca0:	03d2      	lsls	r2, r2, #15
   32ca2:	d5d5      	bpl.n	32c50 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   32ca4:	2b00      	cmp	r3, #0
   32ca6:	d0d3      	beq.n	32c50 <nrfx_clock_stop+0x8>
   32ca8:	2001      	movs	r0, #1
   32caa:	f005 fa25 	bl	380f8 <nrfx_busy_wait>
   32cae:	3d01      	subs	r5, #1
   32cb0:	d1f0      	bne.n	32c94 <nrfx_clock_stop+0x4c>
   32cb2:	e7cd      	b.n	32c50 <nrfx_clock_stop+0x8>
   32cb4:	40005000 	.word	0x40005000
   32cb8:	40005104 	.word	0x40005104
   32cbc:	4000500c 	.word	0x4000500c
   32cc0:	40005100 	.word	0x40005100
   32cc4:	40005004 	.word	0x40005004

00032cc8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   32cc8:	4b15      	ldr	r3, [pc, #84]	; (32d20 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   32cca:	b510      	push	{r4, lr}
   32ccc:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   32cce:	b14a      	cbz	r2, 32ce4 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32cd0:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   32cd2:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32cd4:	6018      	str	r0, [r3, #0]
   32cd6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   32cd8:	4b12      	ldr	r3, [pc, #72]	; (32d24 <nrfx_power_clock_irq_handler+0x5c>)
   32cda:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   32cde:	4b12      	ldr	r3, [pc, #72]	; (32d28 <nrfx_power_clock_irq_handler+0x60>)
   32ce0:	681b      	ldr	r3, [r3, #0]
   32ce2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   32ce4:	4b11      	ldr	r3, [pc, #68]	; (32d2c <nrfx_power_clock_irq_handler+0x64>)
   32ce6:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   32ce8:	b182      	cbz	r2, 32d0c <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32cea:	2200      	movs	r2, #0
   32cec:	601a      	str	r2, [r3, #0]
   32cee:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   32cf0:	4b0c      	ldr	r3, [pc, #48]	; (32d24 <nrfx_power_clock_irq_handler+0x5c>)
   32cf2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32cf6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   32cfa:	f002 0203 	and.w	r2, r2, #3
   32cfe:	2a01      	cmp	r2, #1
   32d00:	f04f 0102 	mov.w	r1, #2
   32d04:	d103      	bne.n	32d0e <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   32d06:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32d0a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   32d0c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   32d0e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   32d12:	4b05      	ldr	r3, [pc, #20]	; (32d28 <nrfx_power_clock_irq_handler+0x60>)
   32d14:	2001      	movs	r0, #1
}
   32d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   32d1a:	681b      	ldr	r3, [r3, #0]
   32d1c:	4718      	bx	r3
   32d1e:	bf00      	nop
   32d20:	40005100 	.word	0x40005100
   32d24:	40005000 	.word	0x40005000
   32d28:	20023ee0 	.word	0x20023ee0
   32d2c:	40005104 	.word	0x40005104

00032d30 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   32d30:	4a0b      	ldr	r2, [pc, #44]	; (32d60 <nrfx_dppi_channel_alloc+0x30>)
{
   32d32:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   32d34:	6816      	ldr	r6, [r2, #0]
   32d36:	43f1      	mvns	r1, r6
   32d38:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   32d3a:	b171      	cbz	r1, 32d5a <nrfx_dppi_channel_alloc+0x2a>
   32d3c:	2500      	movs	r5, #0
   32d3e:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   32d40:	fa21 f304 	lsr.w	r3, r1, r4
   32d44:	07db      	lsls	r3, r3, #31
   32d46:	f105 0501 	add.w	r5, r5, #1
   32d4a:	d5f8      	bpl.n	32d3e <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   32d4c:	2301      	movs	r3, #1
   32d4e:	40a3      	lsls	r3, r4
   32d50:	4333      	orrs	r3, r6
    *p_channel = channel;
   32d52:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   32d54:	4803      	ldr	r0, [pc, #12]	; (32d64 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   32d56:	6013      	str	r3, [r2, #0]
}
   32d58:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   32d5a:	4803      	ldr	r0, [pc, #12]	; (32d68 <nrfx_dppi_channel_alloc+0x38>)
   32d5c:	e7fc      	b.n	32d58 <nrfx_dppi_channel_alloc+0x28>
   32d5e:	bf00      	nop
   32d60:	20023ee8 	.word	0x20023ee8
   32d64:	0bad0000 	.word	0x0bad0000
   32d68:	0bad0002 	.word	0x0bad0002

00032d6c <nrfx_dppi_channel_enable>:
    return ((m_allocated_channels & DPPI_BIT_SET(channel)) != 0);
   32d6c:	4b07      	ldr	r3, [pc, #28]	; (32d8c <nrfx_dppi_channel_enable+0x20>)
   32d6e:	681b      	ldr	r3, [r3, #0]
   32d70:	40c3      	lsrs	r3, r0

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!channel_is_allocated(channel))
   32d72:	07db      	lsls	r3, r3, #31
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
   32d74:	bf41      	itttt	mi
   32d76:	2301      	movmi	r3, #1
   32d78:	fa03 f000 	lslmi.w	r0, r3, r0
   32d7c:	4b04      	ldrmi	r3, [pc, #16]	; (32d90 <nrfx_dppi_channel_enable+0x24>)
   32d7e:	f8c3 0504 	strmi.w	r0, [r3, #1284]	; 0x504
    nrfx_err_t err_code = NRFX_SUCCESS;
   32d82:	bf4c      	ite	mi
   32d84:	4803      	ldrmi	r0, [pc, #12]	; (32d94 <nrfx_dppi_channel_enable+0x28>)
        err_code = NRFX_ERROR_INVALID_PARAM;
   32d86:	4804      	ldrpl	r0, [pc, #16]	; (32d98 <nrfx_dppi_channel_enable+0x2c>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   32d88:	4770      	bx	lr
   32d8a:	bf00      	nop
   32d8c:	20023ee8 	.word	0x20023ee8
   32d90:	40017000 	.word	0x40017000
   32d94:	0bad0000 	.word	0x0bad0000
   32d98:	0bad0004 	.word	0x0bad0004

00032d9c <nrfx_nvmc_page_erase>:
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   32d9c:	f3c0 030b 	ubfx	r3, r0, #0, #12

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   32da0:	b97b      	cbnz	r3, 32dc2 <nrfx_nvmc_page_erase+0x26>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   32da2:	2202      	movs	r2, #2
   32da4:	4b08      	ldr	r3, [pc, #32]	; (32dc8 <nrfx_nvmc_page_erase+0x2c>)
   32da6:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   32daa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32dae:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   32db0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   32db4:	07d2      	lsls	r2, r2, #31
   32db6:	d5fb      	bpl.n	32db0 <nrfx_nvmc_page_erase+0x14>
    p_reg->CONFIGNS = (uint32_t)mode;
   32db8:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   32dba:	4804      	ldr	r0, [pc, #16]	; (32dcc <nrfx_nvmc_page_erase+0x30>)
   32dbc:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
   32dc0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   32dc2:	4803      	ldr	r0, [pc, #12]	; (32dd0 <nrfx_nvmc_page_erase+0x34>)
}
   32dc4:	4770      	bx	lr
   32dc6:	bf00      	nop
   32dc8:	40039000 	.word	0x40039000
   32dcc:	0bad0000 	.word	0x0bad0000
   32dd0:	0bad000a 	.word	0x0bad000a

00032dd4 <nrfx_nvmc_word_write>:
   32dd4:	2201      	movs	r2, #1
   32dd6:	4b07      	ldr	r3, [pc, #28]	; (32df4 <nrfx_nvmc_word_write+0x20>)
   32dd8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   32ddc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   32de0:	07d2      	lsls	r2, r2, #31
   32de2:	d5fb      	bpl.n	32ddc <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   32de4:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   32de6:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIGNS = (uint32_t)mode;
   32dea:	2200      	movs	r2, #0
   32dec:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   32df0:	4770      	bx	lr
   32df2:	bf00      	nop
   32df4:	40039000 	.word	0x40039000

00032df8 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   32df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32dfa:	460c      	mov	r4, r1
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(timer_event_handler);

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   32dfc:	210c      	movs	r1, #12
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   32dfe:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   32e00:	4e21      	ldr	r6, [pc, #132]	; (32e88 <nrfx_timer_init+0x90>)
   32e02:	4379      	muls	r1, r7
{
   32e04:	4605      	mov	r5, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   32e06:	1870      	adds	r0, r6, r1
   32e08:	7a03      	ldrb	r3, [r0, #8]
   32e0a:	2b00      	cmp	r3, #0
   32e0c:	d13a      	bne.n	32e84 <nrfx_timer_init+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32e0e:	469c      	mov	ip, r3
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));

    p_cb->handler = timer_event_handler;
   32e10:	5072      	str	r2, [r6, r1]
    p_cb->context = p_config->p_context;
   32e12:	6862      	ldr	r2, [r4, #4]
   32e14:	6042      	str	r2, [r0, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   32e16:	7969      	ldrb	r1, [r5, #5]
   32e18:	6828      	ldr	r0, [r5, #0]
   32e1a:	b2da      	uxtb	r2, r3
   32e1c:	4291      	cmp	r1, r2
   32e1e:	d829      	bhi.n	32e74 <nrfx_timer_init+0x7c>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   32e20:	f340 3007 	sbfx	r0, r0, #12, #8
   32e24:	f7f2 f8ba 	bl	24f9c <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   32e28:	682b      	ldr	r3, [r5, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   32e2a:	7862      	ldrb	r2, [r4, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   32e2c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   32e30:	f002 0203 	and.w	r2, r2, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   32e34:	f021 0103 	bic.w	r1, r1, #3
   32e38:	430a      	orrs	r2, r1
   32e3a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   32e3e:	f8d3 1508 	ldr.w	r1, [r3, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   32e42:	78a2      	ldrb	r2, [r4, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   32e44:	f021 0103 	bic.w	r1, r1, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   32e48:	f002 0203 	and.w	r2, r2, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   32e4c:	430a      	orrs	r2, r1
   32e4e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_frequency_t frequency)
{
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   32e52:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   32e56:	7822      	ldrb	r2, [r4, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   32e58:	f021 010f 	bic.w	r1, r1, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   32e5c:	f002 020f 	and.w	r2, r2, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   32e60:	430a      	orrs	r2, r1
   32e62:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   32e66:	230c      	movs	r3, #12
   32e68:	fb03 6607 	mla	r6, r3, r7, r6
   32e6c:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   32e6e:	4807      	ldr	r0, [pc, #28]	; (32e8c <nrfx_timer_init+0x94>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   32e70:	7233      	strb	r3, [r6, #8]
}
   32e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32e74:	009a      	lsls	r2, r3, #2
   32e76:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   32e7a:	f840 c002 	str.w	ip, [r0, r2]
   32e7e:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   32e80:	3301      	adds	r3, #1
   32e82:	e7ca      	b.n	32e1a <nrfx_timer_init+0x22>
        return err_code;
   32e84:	4802      	ldr	r0, [pc, #8]	; (32e90 <nrfx_timer_init+0x98>)
   32e86:	e7f4      	b.n	32e72 <nrfx_timer_init+0x7a>
   32e88:	20023eec 	.word	0x20023eec
   32e8c:	0bad0000 	.word	0x0bad0000
   32e90:	0bad0005 	.word	0x0bad0005

00032e94 <nrfx_timer_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32e94:	2201      	movs	r2, #1

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   32e96:	210c      	movs	r1, #12
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   32e98:	6803      	ldr	r3, [r0, #0]
   32e9a:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   32e9c:	7903      	ldrb	r3, [r0, #4]
   32e9e:	4a03      	ldr	r2, [pc, #12]	; (32eac <nrfx_timer_enable+0x18>)
   32ea0:	fb01 2303 	mla	r3, r1, r3, r2
   32ea4:	2202      	movs	r2, #2
   32ea6:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   32ea8:	4770      	bx	lr
   32eaa:	bf00      	nop
   32eac:	20023eec 	.word	0x20023eec

00032eb0 <nrfx_timer_disable>:
   32eb0:	2201      	movs	r2, #1

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   32eb2:	6803      	ldr	r3, [r0, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   32eb4:	4903      	ldr	r1, [pc, #12]	; (32ec4 <nrfx_timer_disable+0x14>)
   32eb6:	611a      	str	r2, [r3, #16]
   32eb8:	7903      	ldrb	r3, [r0, #4]
   32eba:	200c      	movs	r0, #12
   32ebc:	fb00 1303 	mla	r3, r0, r3, r1
   32ec0:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   32ec2:	4770      	bx	lr
   32ec4:	20023eec 	.word	0x20023eec

00032ec8 <nrfx_timer_uninit>:
{
   32ec8:	b538      	push	{r3, r4, r5, lr}
   32eca:	4604      	mov	r4, r0
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   32ecc:	6800      	ldr	r0, [r0, #0]
    p_reg->SHORTS &= ~(mask);
   32ece:	2500      	movs	r5, #0
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   32ed0:	f340 3007 	sbfx	r0, r0, #12, #8
   32ed4:	f7f2 f872 	bl	24fbc <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   32ed8:	6823      	ldr	r3, [r4, #0]
    nrfx_timer_disable(p_instance);
   32eda:	4620      	mov	r0, r4
   32edc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   32ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    p_reg->SHORTS &= ~(mask);
   32ee4:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   32ee8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   32eec:	f7ff ffe0 	bl	32eb0 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   32ef0:	210c      	movs	r1, #12
   32ef2:	7923      	ldrb	r3, [r4, #4]
   32ef4:	4a02      	ldr	r2, [pc, #8]	; (32f00 <nrfx_timer_uninit+0x38>)
   32ef6:	fb01 2303 	mla	r3, r1, r3, r2
   32efa:	721d      	strb	r5, [r3, #8]
}
   32efc:	bd38      	pop	{r3, r4, r5, pc}
   32efe:	bf00      	nop
   32f00:	20023eec 	.word	0x20023eec

00032f04 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   32f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   32f06:	4b11      	ldr	r3, [pc, #68]	; (32f4c <z_sys_init_run_level+0x48>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   32f08:	4f11      	ldr	r7, [pc, #68]	; (32f50 <z_sys_init_run_level+0x4c>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   32f0a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   32f0e:	3001      	adds	r0, #1
   32f10:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   32f14:	42ae      	cmp	r6, r5
   32f16:	d800      	bhi.n	32f1a <z_sys_init_run_level+0x16>
		}
	}
}
   32f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   32f1a:	e9d5 3400 	ldrd	r3, r4, [r5]
   32f1e:	4620      	mov	r0, r4
   32f20:	4798      	blx	r3
   32f22:	b180      	cbz	r0, 32f46 <z_sys_init_run_level+0x42>
   32f24:	b17c      	cbz	r4, 32f46 <z_sys_init_run_level+0x42>
				(dev - __device_start));
   32f26:	4b0b      	ldr	r3, [pc, #44]	; (32f54 <z_sys_init_run_level+0x50>)
   32f28:	1be4      	subs	r4, r4, r7
   32f2a:	10e4      	asrs	r4, r4, #3
   32f2c:	435c      	muls	r4, r3

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   32f2e:	2301      	movs	r3, #1
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   32f30:	4a09      	ldr	r2, [pc, #36]	; (32f58 <z_sys_init_run_level+0x54>)
   32f32:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   32f34:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   32f38:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   32f3c:	fa03 f404 	lsl.w	r4, r3, r4
   32f40:	4304      	orrs	r4, r0
   32f42:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   32f46:	3508      	adds	r5, #8
   32f48:	e7e4      	b.n	32f14 <z_sys_init_run_level+0x10>
   32f4a:	bf00      	nop
   32f4c:	0003a468 	.word	0x0003a468
   32f50:	2002063c 	.word	0x2002063c
   32f54:	aaaaaaab 	.word	0xaaaaaaab
   32f58:	20020714 	.word	0x20020714

00032f5c <z_device_get_all_static>:
#include <syscalls/device_get_binding_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   32f5c:	4a03      	ldr	r2, [pc, #12]	; (32f6c <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   32f5e:	4b04      	ldr	r3, [pc, #16]	; (32f70 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   32f60:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   32f62:	1a9b      	subs	r3, r3, r2
}
   32f64:	4803      	ldr	r0, [pc, #12]	; (32f74 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   32f66:	10db      	asrs	r3, r3, #3
}
   32f68:	4358      	muls	r0, r3
   32f6a:	4770      	bx	lr
   32f6c:	2002063c 	.word	0x2002063c
   32f70:	20020714 	.word	0x20020714
   32f74:	aaaaaaab 	.word	0xaaaaaaab

00032f78 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   32f78:	4b09      	ldr	r3, [pc, #36]	; (32fa0 <z_device_ready+0x28>)
   32f7a:	1ac0      	subs	r0, r0, r3
   32f7c:	10c3      	asrs	r3, r0, #3
   32f7e:	4809      	ldr	r0, [pc, #36]	; (32fa4 <z_device_ready+0x2c>)
   32f80:	4358      	muls	r0, r3
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   32f82:	4b09      	ldr	r3, [pc, #36]	; (32fa8 <z_device_ready+0x30>)
   32f84:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   32f86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   32f8a:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   32f8c:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   32f90:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   32f94:	4210      	tst	r0, r2
}
   32f96:	bf0c      	ite	eq
   32f98:	4618      	moveq	r0, r3
   32f9a:	2000      	movne	r0, #0
   32f9c:	4770      	bx	lr
   32f9e:	bf00      	nop
   32fa0:	2002063c 	.word	0x2002063c
   32fa4:	aaaaaaab 	.word	0xaaaaaaab
   32fa8:	20020714 	.word	0x20020714

00032fac <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   32fac:	4911      	ldr	r1, [pc, #68]	; (32ff4 <z_impl_device_get_binding+0x48>)
{
   32fae:	b570      	push	{r4, r5, r6, lr}
   32fb0:	4605      	mov	r5, r0
   32fb2:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   32fb4:	4c10      	ldr	r4, [pc, #64]	; (32ff8 <z_impl_device_get_binding+0x4c>)
   32fb6:	428c      	cmp	r4, r1
   32fb8:	d104      	bne.n	32fc4 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   32fba:	4c0f      	ldr	r4, [pc, #60]	; (32ff8 <z_impl_device_get_binding+0x4c>)
   32fbc:	42b4      	cmp	r4, r6
   32fbe:	d10a      	bne.n	32fd6 <z_impl_device_get_binding+0x2a>
	return NULL;
   32fc0:	2400      	movs	r4, #0
   32fc2:	e014      	b.n	32fee <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   32fc4:	4620      	mov	r0, r4
   32fc6:	f7ff ffd7 	bl	32f78 <z_device_ready>
   32fca:	b110      	cbz	r0, 32fd2 <z_impl_device_get_binding+0x26>
   32fcc:	6823      	ldr	r3, [r4, #0]
   32fce:	42ab      	cmp	r3, r5
   32fd0:	d00d      	beq.n	32fee <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   32fd2:	3418      	adds	r4, #24
   32fd4:	e7ef      	b.n	32fb6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   32fd6:	4620      	mov	r0, r4
   32fd8:	f7ff ffce 	bl	32f78 <z_device_ready>
   32fdc:	b908      	cbnz	r0, 32fe2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   32fde:	3418      	adds	r4, #24
   32fe0:	e7ec      	b.n	32fbc <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   32fe2:	4628      	mov	r0, r5
   32fe4:	6821      	ldr	r1, [r4, #0]
   32fe6:	f7ea f839 	bl	1d05c <strcmp>
   32fea:	2800      	cmp	r0, #0
   32fec:	d1f7      	bne.n	32fde <z_impl_device_get_binding+0x32>
}
   32fee:	4620      	mov	r0, r4
   32ff0:	bd70      	pop	{r4, r5, r6, pc}
   32ff2:	bf00      	nop
   32ff4:	20020714 	.word	0x20020714
   32ff8:	2002063c 	.word	0x2002063c

00032ffc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   32ffc:	4b01      	ldr	r3, [pc, #4]	; (33004 <z_impl_z_errno+0x8>)
   32ffe:	6898      	ldr	r0, [r3, #8]
}
   33000:	3068      	adds	r0, #104	; 0x68
   33002:	4770      	bx	lr
   33004:	20023ef8 	.word	0x20023ef8

00033008 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   33008:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3300c:	4606      	mov	r6, r0
   3300e:	460f      	mov	r7, r1
	__asm__ volatile(
   33010:	f04f 0320 	mov.w	r3, #32
   33014:	f3ef 8811 	mrs	r8, BASEPRI
   33018:	f383 8811 	msr	BASEPRI, r3
   3301c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   33020:	f000 ff38 	bl	33e94 <z_impl_k_current_get>
   33024:	4c21      	ldr	r4, [pc, #132]	; (330ac <z_fatal_error+0xa4>)
   33026:	4b22      	ldr	r3, [pc, #136]	; (330b0 <z_fatal_error+0xa8>)
   33028:	2e04      	cmp	r6, #4
   3302a:	eba4 0403 	sub.w	r4, r4, r3
   3302e:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   33032:	bf98      	it	ls
   33034:	4a1f      	ldrls	r2, [pc, #124]	; (330b4 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   33036:	ea4f 1484 	mov.w	r4, r4, lsl #6
   3303a:	f044 0301 	orr.w	r3, r4, #1
   3303e:	4605      	mov	r5, r0
	switch (reason) {
   33040:	bf94      	ite	ls
   33042:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   33046:	4a1c      	ldrhi	r2, [pc, #112]	; (330b8 <z_fatal_error+0xb0>)
   33048:	f8ad 3000 	strh.w	r3, [sp]
   3304c:	4631      	mov	r1, r6
   3304e:	2300      	movs	r3, #0
   33050:	481a      	ldr	r0, [pc, #104]	; (330bc <z_fatal_error+0xb4>)
   33052:	f003 f824 	bl	3609e <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   33056:	b147      	cbz	r7, 3306a <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   33058:	69fb      	ldr	r3, [r7, #28]
   3305a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   3305e:	b123      	cbz	r3, 3306a <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   33060:	4817      	ldr	r0, [pc, #92]	; (330c0 <z_fatal_error+0xb8>)
   33062:	f044 0101 	orr.w	r1, r4, #1
   33066:	f002 ffdb 	bl	36020 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   3306a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   3306e:	b12d      	cbz	r5, 3307c <z_fatal_error+0x74>
   33070:	4628      	mov	r0, r5
   33072:	f005 fabc 	bl	385ee <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   33076:	b108      	cbz	r0, 3307c <z_fatal_error+0x74>
   33078:	7803      	ldrb	r3, [r0, #0]
   3307a:	b903      	cbnz	r3, 3307e <z_fatal_error+0x76>
		thread_name = "unknown";
   3307c:	4811      	ldr	r0, [pc, #68]	; (330c4 <z_fatal_error+0xbc>)
	LOG_ERR("Current thread: %p (%s)", thread,
   3307e:	f7f0 fbad 	bl	237dc <log_strdup>
   33082:	4623      	mov	r3, r4
   33084:	4602      	mov	r2, r0
   33086:	4629      	mov	r1, r5
   33088:	480f      	ldr	r0, [pc, #60]	; (330c8 <z_fatal_error+0xc0>)
   3308a:	f002 ffef 	bl	3606c <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   3308e:	4639      	mov	r1, r7
   33090:	4630      	mov	r0, r6
   33092:	f7f5 feeb 	bl	28e6c <k_sys_fatal_error_handler>
	__asm__ volatile(
   33096:	f388 8811 	msr	BASEPRI, r8
   3309a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   3309e:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   330a0:	b002      	add	sp, #8
   330a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   330a6:	f7f2 bbb5 	b.w	25814 <z_impl_k_thread_abort>
   330aa:	bf00      	nop
   330ac:	00039b00 	.word	0x00039b00
   330b0:	00039a50 	.word	0x00039a50
   330b4:	0003a480 	.word	0x0003a480
   330b8:	0003d0b9 	.word	0x0003d0b9
   330bc:	0003d0cf 	.word	0x0003d0cf
   330c0:	0003d0f7 	.word	0x0003d0f7
   330c4:	0003d0c7 	.word	0x0003d0c7
   330c8:	0003d118 	.word	0x0003d118

000330cc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   330cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   330ce:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   330d0:	2700      	movs	r7, #0
	_kernel.idle = ticks;
   330d2:	4e1b      	ldr	r6, [pc, #108]	; (33140 <idle+0x74>)
	__asm__ volatile(
   330d4:	f04f 0220 	mov.w	r2, #32
   330d8:	f3ef 8311 	mrs	r3, BASEPRI
   330dc:	f382 8811 	msr	BASEPRI, r2
   330e0:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   330e4:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   330e6:	b188      	cbz	r0, 3310c <idle+0x40>
			cpu->pending_abort = NULL;
   330e8:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   330ea:	f383 8811 	msr	BASEPRI, r3
   330ee:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   330f2:	f000 fd0d 	bl	33b10 <z_thread_single_abort>
	__asm__ volatile(
   330f6:	f04f 0320 	mov.w	r3, #32
   330fa:	f3ef 8011 	mrs	r0, BASEPRI
   330fe:	f383 8811 	msr	BASEPRI, r3
   33102:	f3bf 8f6f 	isb	sy
   33106:	f005 f983 	bl	38410 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   3310a:	e7e3      	b.n	330d4 <idle+0x8>
	__asm__ volatile(
   3310c:	f383 8811 	msr	BASEPRI, r3
   33110:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   33114:	f04f 0220 	mov.w	r2, #32
   33118:	f3ef 8311 	mrs	r3, BASEPRI
   3311c:	f382 8811 	msr	BASEPRI, r2
   33120:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   33124:	f005 fadc 	bl	386e0 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   33128:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   3312a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3312c:	2802      	cmp	r0, #2
   3312e:	bfd8      	it	le
   33130:	4608      	movle	r0, r1
   33132:	f005 fae5 	bl	38700 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   33136:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   33138:	f7f1 ffd0 	bl	250dc <arch_cpu_idle>
}
   3313c:	e7ca      	b.n	330d4 <idle+0x8>
   3313e:	bf00      	nop
   33140:	20023ef8 	.word	0x20023ef8

00033144 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   33144:	4802      	ldr	r0, [pc, #8]	; (33150 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   33146:	4a03      	ldr	r2, [pc, #12]	; (33154 <z_bss_zero+0x10>)
   33148:	2100      	movs	r1, #0
   3314a:	1a12      	subs	r2, r2, r0
   3314c:	f005 bd17 	b.w	38b7e <memset>
   33150:	200208a0 	.word	0x200208a0
   33154:	2002c860 	.word	0x2002c860

00033158 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   33158:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3315a:	4806      	ldr	r0, [pc, #24]	; (33174 <z_data_copy+0x1c>)
   3315c:	4a06      	ldr	r2, [pc, #24]	; (33178 <z_data_copy+0x20>)
   3315e:	4907      	ldr	r1, [pc, #28]	; (3317c <z_data_copy+0x24>)
   33160:	1a12      	subs	r2, r2, r0
   33162:	f005 fcec 	bl	38b3e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   33166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3316a:	4a05      	ldr	r2, [pc, #20]	; (33180 <z_data_copy+0x28>)
   3316c:	4905      	ldr	r1, [pc, #20]	; (33184 <z_data_copy+0x2c>)
   3316e:	4806      	ldr	r0, [pc, #24]	; (33188 <z_data_copy+0x30>)
   33170:	f005 bce5 	b.w	38b3e <memcpy>
   33174:	20020000 	.word	0x20020000
   33178:	2002089c 	.word	0x2002089c
   3317c:	0003d334 	.word	0x0003d334
   33180:	00000000 	.word	0x00000000
   33184:	0003d334 	.word	0x0003d334
   33188:	20020000 	.word	0x20020000

0003318c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   3318c:	2201      	movs	r2, #1
{
   3318e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   33190:	4b0b      	ldr	r3, [pc, #44]	; (331c0 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   33192:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   33194:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   33196:	f7ff feb5 	bl	32f04 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   3319a:	4a0a      	ldr	r2, [pc, #40]	; (331c4 <bg_thread_main+0x38>)
   3319c:	490a      	ldr	r1, [pc, #40]	; (331c8 <bg_thread_main+0x3c>)
   3319e:	480b      	ldr	r0, [pc, #44]	; (331cc <bg_thread_main+0x40>)
   331a0:	f002 facc 	bl	3573c <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   331a4:	2003      	movs	r0, #3
   331a6:	f7ff fead 	bl	32f04 <z_sys_init_run_level>

	z_init_static_threads();
   331aa:	f000 ff55 	bl	34058 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   331ae:	f002 f9e0 	bl	35572 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   331b2:	4a07      	ldr	r2, [pc, #28]	; (331d0 <bg_thread_main+0x44>)
   331b4:	7b13      	ldrb	r3, [r2, #12]
   331b6:	f023 0301 	bic.w	r3, r3, #1
   331ba:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   331bc:	bd08      	pop	{r3, pc}
   331be:	bf00      	nop
   331c0:	2002c6e7 	.word	0x2002c6e7
   331c4:	0003c9a8 	.word	0x0003c9a8
   331c8:	0003d17a 	.word	0x0003d17a
   331cc:	0003d199 	.word	0x0003d199
   331d0:	20023158 	.word	0x20023158

000331d4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   331d4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   331d8:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   331da:	f7f0 fa63 	bl	236a4 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   331de:	4b34      	ldr	r3, [pc, #208]	; (332b0 <z_cstart+0xdc>)
	uint32_t msp =
   331e0:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   331e4:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   331e8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   331ec:	2400      	movs	r4, #0
   331ee:	23e0      	movs	r3, #224	; 0xe0
   331f0:	4d30      	ldr	r5, [pc, #192]	; (332b4 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   331f2:	f04f 0b01 	mov.w	fp, #1
   331f6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   331fa:	77ec      	strb	r4, [r5, #31]
   331fc:	762c      	strb	r4, [r5, #24]
   331fe:	766c      	strb	r4, [r5, #25]
   33200:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   33202:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   33204:	4e2c      	ldr	r6, [pc, #176]	; (332b8 <z_cstart+0xe4>)
   33206:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   3320a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   3320c:	f7f2 fa8e 	bl	2572c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   33210:	f7f1 ff5e 	bl	250d0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   33214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33218:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   3321a:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   3321c:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   33220:	4d26      	ldr	r5, [pc, #152]	; (332bc <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   33222:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   33226:	ab06      	add	r3, sp, #24
   33228:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3322a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   3322c:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   33230:	f7ff fe68 	bl	32f04 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   33234:	2001      	movs	r0, #1
   33236:	f7ff fe65 	bl	32f04 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3323a:	f8df a098 	ldr.w	sl, [pc, #152]	; 332d4 <z_cstart+0x100>
	z_sched_init();
   3323e:	f000 fdaf 	bl	33da0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   33242:	4b1f      	ldr	r3, [pc, #124]	; (332c0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   33244:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   33246:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   3324a:	491e      	ldr	r1, [pc, #120]	; (332c4 <z_cstart+0xf0>)
   3324c:	9305      	str	r3, [sp, #20]
   3324e:	4630      	mov	r0, r6
   33250:	4653      	mov	r3, sl
   33252:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   33256:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3325a:	9400      	str	r4, [sp, #0]
   3325c:	f000 fe9e 	bl	33f9c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   33260:	7b73      	ldrb	r3, [r6, #13]
   33262:	4680      	mov	r8, r0
   33264:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   33268:	4630      	mov	r0, r6
   3326a:	7373      	strb	r3, [r6, #13]
   3326c:	f005 f912 	bl	38494 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   33270:	230f      	movs	r3, #15
   33272:	4f15      	ldr	r7, [pc, #84]	; (332c8 <z_cstart+0xf4>)
   33274:	f44f 72a0 	mov.w	r2, #320	; 0x140
   33278:	e9cd 4302 	strd	r4, r3, [sp, #8]
   3327c:	4913      	ldr	r1, [pc, #76]	; (332cc <z_cstart+0xf8>)
   3327e:	4b14      	ldr	r3, [pc, #80]	; (332d0 <z_cstart+0xfc>)
   33280:	4638      	mov	r0, r7
   33282:	e9cd b404 	strd	fp, r4, [sp, #16]
   33286:	e9cd 5400 	strd	r5, r4, [sp]
   3328a:	f000 fe87 	bl	33f9c <z_setup_new_thread>
   3328e:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   33290:	4652      	mov	r2, sl
   33292:	f023 0304 	bic.w	r3, r3, #4
   33296:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   33298:	f105 031c 	add.w	r3, r5, #28
   3329c:	4641      	mov	r1, r8
   3329e:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   332a0:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   332a4:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   332a6:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   332a8:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   332ac:	f7f1 feea 	bl	25084 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   332b0:	2002fd20 	.word	0x2002fd20
   332b4:	e000ed00 	.word	0xe000ed00
   332b8:	20023158 	.word	0x20023158
   332bc:	20023ef8 	.word	0x20023ef8
   332c0:	0003d1c0 	.word	0x0003d1c0
   332c4:	2002ebe0 	.word	0x2002ebe0
   332c8:	20023090 	.word	0x20023090
   332cc:	2002fbe0 	.word	0x2002fbe0
   332d0:	000330cd 	.word	0x000330cd
   332d4:	0003318d 	.word	0x0003318d

000332d8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   332d8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   332da:	4c06      	ldr	r4, [pc, #24]	; (332f4 <statics_init+0x1c>)
   332dc:	4d06      	ldr	r5, [pc, #24]	; (332f8 <statics_init+0x20>)
   332de:	42ac      	cmp	r4, r5
   332e0:	d301      	bcc.n	332e6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   332e2:	2000      	movs	r0, #0
   332e4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   332e6:	4620      	mov	r0, r4
   332e8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   332ec:	f004 ff2e 	bl	3814c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   332f0:	3414      	adds	r4, #20
   332f2:	e7f4      	b.n	332de <statics_init+0x6>
   332f4:	20020758 	.word	0x20020758
   332f8:	2002076c 	.word	0x2002076c

000332fc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   332fc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   332fe:	4b0e      	ldr	r3, [pc, #56]	; (33338 <init_mem_slab_module+0x3c>)
   33300:	4c0e      	ldr	r4, [pc, #56]	; (3333c <init_mem_slab_module+0x40>)
   33302:	42a3      	cmp	r3, r4
   33304:	d301      	bcc.n	3330a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   33306:	2000      	movs	r0, #0
	return rc;
}
   33308:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3330a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   3330e:	ea41 0200 	orr.w	r2, r1, r0
   33312:	f012 0203 	ands.w	r2, r2, #3
   33316:	d10b      	bne.n	33330 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   33318:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   3331a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3331c:	42aa      	cmp	r2, r5
   3331e:	d101      	bne.n	33324 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   33320:	331c      	adds	r3, #28
   33322:	e7ee      	b.n	33302 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   33324:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   33326:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   33328:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   3332a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   3332c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   3332e:	e7f5      	b.n	3331c <init_mem_slab_module+0x20>
		return -EINVAL;
   33330:	f06f 0015 	mvn.w	r0, #21
	return rc;
   33334:	e7e8      	b.n	33308 <init_mem_slab_module+0xc>
   33336:	bf00      	nop
   33338:	20020758 	.word	0x20020758
   3333c:	20020758 	.word	0x20020758

00033340 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   33340:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   33342:	460c      	mov	r4, r1
   33344:	4616      	mov	r6, r2
   33346:	461f      	mov	r7, r3
   33348:	f04f 0320 	mov.w	r3, #32
   3334c:	f3ef 8111 	mrs	r1, BASEPRI
   33350:	f383 8811 	msr	BASEPRI, r3
   33354:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   33358:	6943      	ldr	r3, [r0, #20]
   3335a:	b15b      	cbz	r3, 33374 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   3335c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   3335e:	681b      	ldr	r3, [r3, #0]
   33360:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   33362:	6983      	ldr	r3, [r0, #24]
   33364:	3301      	adds	r3, #1
   33366:	6183      	str	r3, [r0, #24]
		result = 0;
   33368:	2000      	movs	r0, #0
	__asm__ volatile(
   3336a:	f381 8811 	msr	BASEPRI, r1
   3336e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   33372:	e011      	b.n	33398 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   33374:	ea56 0207 	orrs.w	r2, r6, r7
   33378:	d103      	bne.n	33382 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   3337a:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   3337e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   33380:	e7f3      	b.n	3336a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   33382:	4602      	mov	r2, r0
   33384:	e9cd 6700 	strd	r6, r7, [sp]
   33388:	4804      	ldr	r0, [pc, #16]	; (3339c <k_mem_slab_alloc+0x5c>)
   3338a:	f000 fc83 	bl	33c94 <z_pend_curr>
		if (result == 0) {
   3338e:	b918      	cbnz	r0, 33398 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   33390:	4b03      	ldr	r3, [pc, #12]	; (333a0 <k_mem_slab_alloc+0x60>)
   33392:	689b      	ldr	r3, [r3, #8]
   33394:	695b      	ldr	r3, [r3, #20]
   33396:	6023      	str	r3, [r4, #0]
}
   33398:	b002      	add	sp, #8
   3339a:	bdd0      	pop	{r4, r6, r7, pc}
   3339c:	2002c6e8 	.word	0x2002c6e8
   333a0:	20023ef8 	.word	0x20023ef8

000333a4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   333a4:	b570      	push	{r4, r5, r6, lr}
   333a6:	4604      	mov	r4, r0
   333a8:	460d      	mov	r5, r1
	__asm__ volatile(
   333aa:	f04f 0320 	mov.w	r3, #32
   333ae:	f3ef 8611 	mrs	r6, BASEPRI
   333b2:	f383 8811 	msr	BASEPRI, r3
   333b6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   333ba:	f005 f8c6 	bl	3854a <z_unpend_first_thread>

	if (pending_thread != NULL) {
   333be:	b160      	cbz	r0, 333da <k_mem_slab_free+0x36>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   333c0:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   333c2:	682a      	ldr	r2, [r5, #0]
   333c4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   333c8:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   333ca:	f005 f863 	bl	38494 <z_ready_thread>
		z_reschedule(&lock, key);
   333ce:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   333d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   333d4:	4807      	ldr	r0, [pc, #28]	; (333f4 <k_mem_slab_free+0x50>)
   333d6:	f000 b9f7 	b.w	337c8 <z_reschedule>
		**(char ***)mem = slab->free_list;
   333da:	682b      	ldr	r3, [r5, #0]
   333dc:	6962      	ldr	r2, [r4, #20]
   333de:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   333e0:	682b      	ldr	r3, [r5, #0]
   333e2:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   333e4:	69a3      	ldr	r3, [r4, #24]
   333e6:	3b01      	subs	r3, #1
   333e8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   333ea:	f386 8811 	msr	BASEPRI, r6
   333ee:	f3bf 8f6f 	isb	sy
}
   333f2:	bd70      	pop	{r4, r5, r6, pc}
   333f4:	2002c6e8 	.word	0x2002c6e8

000333f8 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   333f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   333fc:	4604      	mov	r4, r0
   333fe:	4616      	mov	r6, r2
   33400:	461f      	mov	r7, r3
   33402:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   33404:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   33408:	f04f 0320 	mov.w	r3, #32
   3340c:	f3ef 8811 	mrs	r8, BASEPRI
   33410:	f383 8811 	msr	BASEPRI, r3
   33414:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   33418:	6a02      	ldr	r2, [r0, #32]
   3341a:	68c3      	ldr	r3, [r0, #12]
   3341c:	429a      	cmp	r2, r3
   3341e:	d22c      	bcs.n	3347a <z_impl_k_msgq_put+0x82>
   33420:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   33422:	f005 f892 	bl	3854a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   33426:	68a2      	ldr	r2, [r4, #8]
   33428:	4605      	mov	r5, r0
   3342a:	9903      	ldr	r1, [sp, #12]
   3342c:	b180      	cbz	r0, 33450 <z_impl_k_msgq_put+0x58>
   3342e:	2400      	movs	r4, #0
   33430:	6940      	ldr	r0, [r0, #20]
   33432:	f005 fb84 	bl	38b3e <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   33436:	4628      	mov	r0, r5
   33438:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
   3343c:	f005 f82a 	bl	38494 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   33440:	4648      	mov	r0, r9
   33442:	4641      	mov	r1, r8
   33444:	f000 f9c0 	bl	337c8 <z_reschedule>
			return 0;
   33448:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3344a:	b005      	add	sp, #20
   3344c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   33450:	69e0      	ldr	r0, [r4, #28]
   33452:	f005 fb74 	bl	38b3e <memcpy>
		result = 0;
   33456:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   33458:	69e3      	ldr	r3, [r4, #28]
   3345a:	68a2      	ldr	r2, [r4, #8]
   3345c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3345e:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   33460:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   33462:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   33464:	bf04      	itt	eq
   33466:	6923      	ldreq	r3, [r4, #16]
   33468:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   3346a:	6a23      	ldr	r3, [r4, #32]
   3346c:	3301      	adds	r3, #1
   3346e:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   33470:	f388 8811 	msr	BASEPRI, r8
   33474:	f3bf 8f6f 	isb	sy
	return result;
   33478:	e7e7      	b.n	3344a <z_impl_k_msgq_put+0x52>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3347a:	ea56 0307 	orrs.w	r3, r6, r7
   3347e:	d00a      	beq.n	33496 <z_impl_k_msgq_put+0x9e>
		_current->base.swap_data = (void *) data;
   33480:	4b06      	ldr	r3, [pc, #24]	; (3349c <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33482:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   33484:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33486:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   33488:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3348a:	4641      	mov	r1, r8
   3348c:	e9cd 6700 	strd	r6, r7, [sp]
   33490:	f000 fc00 	bl	33c94 <z_pend_curr>
   33494:	e7d9      	b.n	3344a <z_impl_k_msgq_put+0x52>
		result = -ENOMSG;
   33496:	f06f 0022 	mvn.w	r0, #34	; 0x22
   3349a:	e7e9      	b.n	33470 <z_impl_k_msgq_put+0x78>
   3349c:	20023ef8 	.word	0x20023ef8

000334a0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   334a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   334a4:	4604      	mov	r4, r0
   334a6:	4616      	mov	r6, r2
   334a8:	4608      	mov	r0, r1
   334aa:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   334ac:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   334b0:	f04f 0320 	mov.w	r3, #32
   334b4:	f3ef 8811 	mrs	r8, BASEPRI
   334b8:	f383 8811 	msr	BASEPRI, r3
   334bc:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   334c0:	6a23      	ldr	r3, [r4, #32]
   334c2:	2b00      	cmp	r3, #0
   334c4:	d033      	beq.n	3352e <z_impl_k_msgq_get+0x8e>
   334c6:	68a2      	ldr	r2, [r4, #8]
   334c8:	69a1      	ldr	r1, [r4, #24]
   334ca:	f005 fb38 	bl	38b3e <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   334ce:	69a3      	ldr	r3, [r4, #24]
   334d0:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   334d2:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   334d4:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   334d6:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   334d8:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   334da:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   334dc:	bf04      	itt	eq
   334de:	6923      	ldreq	r3, [r4, #16]
   334e0:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   334e2:	6a23      	ldr	r3, [r4, #32]
   334e4:	3b01      	subs	r3, #1
   334e6:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   334e8:	f005 f82f 	bl	3854a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   334ec:	4605      	mov	r5, r0
   334ee:	b370      	cbz	r0, 3354e <z_impl_k_msgq_get+0xae>
   334f0:	6941      	ldr	r1, [r0, #20]
   334f2:	68a2      	ldr	r2, [r4, #8]
   334f4:	69e0      	ldr	r0, [r4, #28]
   334f6:	f005 fb22 	bl	38b3e <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   334fa:	69e3      	ldr	r3, [r4, #28]
   334fc:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   334fe:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   33500:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   33502:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   33504:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   33506:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   33508:	bf04      	itt	eq
   3350a:	6923      	ldreq	r3, [r4, #16]
   3350c:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   3350e:	6a23      	ldr	r3, [r4, #32]
   33510:	3301      	adds	r3, #1
   33512:	6223      	str	r3, [r4, #32]
   33514:	2400      	movs	r4, #0
   33516:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
			z_ready_thread(pending_thread);
   3351a:	f004 ffbb 	bl	38494 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   3351e:	4648      	mov	r0, r9
   33520:	4641      	mov	r1, r8
   33522:	f000 f951 	bl	337c8 <z_reschedule>
			return 0;
   33526:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   33528:	b003      	add	sp, #12
   3352a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3352e:	ea56 0307 	orrs.w	r3, r6, r7
   33532:	d00a      	beq.n	3354a <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   33534:	4b08      	ldr	r3, [pc, #32]	; (33558 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33536:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   33538:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3353a:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   3353c:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3353e:	4641      	mov	r1, r8
   33540:	e9cd 6700 	strd	r6, r7, [sp]
   33544:	f000 fba6 	bl	33c94 <z_pend_curr>
   33548:	e7ee      	b.n	33528 <z_impl_k_msgq_get+0x88>
		result = -ENOMSG;
   3354a:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   3354e:	f388 8811 	msr	BASEPRI, r8
   33552:	f3bf 8f6f 	isb	sy
	return result;
   33556:	e7e7      	b.n	33528 <z_impl_k_msgq_get+0x88>
   33558:	20023ef8 	.word	0x20023ef8

0003355c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   3355c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   33560:	4604      	mov	r4, r0
   33562:	4616      	mov	r6, r2
   33564:	461f      	mov	r7, r3
	__asm__ volatile(
   33566:	f04f 0320 	mov.w	r3, #32
   3356a:	f3ef 8811 	mrs	r8, BASEPRI
   3356e:	f383 8811 	msr	BASEPRI, r3
   33572:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   33576:	68c3      	ldr	r3, [r0, #12]
   33578:	4a32      	ldr	r2, [pc, #200]	; (33644 <z_impl_k_mutex_lock+0xe8>)
   3357a:	b16b      	cbz	r3, 33598 <z_impl_k_mutex_lock+0x3c>
   3357c:	6880      	ldr	r0, [r0, #8]
   3357e:	6891      	ldr	r1, [r2, #8]
   33580:	4288      	cmp	r0, r1
   33582:	d019      	beq.n	335b8 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   33584:	ea56 0307 	orrs.w	r3, r6, r7
   33588:	d118      	bne.n	335bc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   3358a:	f388 8811 	msr	BASEPRI, r8
   3358e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   33592:	f06f 000f 	mvn.w	r0, #15
   33596:	e00c      	b.n	335b2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   33598:	6891      	ldr	r1, [r2, #8]
   3359a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   3359e:	3301      	adds	r3, #1
   335a0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   335a2:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   335a4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   335a6:	60a3      	str	r3, [r4, #8]
   335a8:	f388 8811 	msr	BASEPRI, r8
   335ac:	f3bf 8f6f 	isb	sy
		return 0;
   335b0:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   335b2:	b002      	add	sp, #8
   335b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   335b8:	6921      	ldr	r1, [r4, #16]
   335ba:	e7f0      	b.n	3359e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   335bc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   335c0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   335c4:	4299      	cmp	r1, r3
   335c6:	bfa8      	it	ge
   335c8:	4619      	movge	r1, r3
   335ca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   335ce:	428b      	cmp	r3, r1
   335d0:	dd2c      	ble.n	3362c <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   335d2:	f000 fba1 	bl	33d18 <z_set_prio>
   335d6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   335d8:	4622      	mov	r2, r4
   335da:	4641      	mov	r1, r8
   335dc:	e9cd 6700 	strd	r6, r7, [sp]
   335e0:	4819      	ldr	r0, [pc, #100]	; (33648 <z_impl_k_mutex_lock+0xec>)
   335e2:	f000 fb57 	bl	33c94 <z_pend_curr>
	if (got_mutex == 0) {
   335e6:	2800      	cmp	r0, #0
   335e8:	d0e3      	beq.n	335b2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   335ea:	f04f 0320 	mov.w	r3, #32
   335ee:	f3ef 8611 	mrs	r6, BASEPRI
   335f2:	f383 8811 	msr	BASEPRI, r3
   335f6:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   335fa:	6823      	ldr	r3, [r4, #0]
   335fc:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   335fe:	42a3      	cmp	r3, r4
   33600:	d007      	beq.n	33612 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   33602:	b133      	cbz	r3, 33612 <z_impl_k_mutex_lock+0xb6>
   33604:	f993 300e 	ldrsb.w	r3, [r3, #14]
   33608:	4299      	cmp	r1, r3
   3360a:	bfa8      	it	ge
   3360c:	4619      	movge	r1, r3
   3360e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   33612:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   33614:	f990 300e 	ldrsb.w	r3, [r0, #14]
   33618:	4299      	cmp	r1, r3
   3361a:	d109      	bne.n	33630 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   3361c:	b16d      	cbz	r5, 3363a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   3361e:	4631      	mov	r1, r6
   33620:	4809      	ldr	r0, [pc, #36]	; (33648 <z_impl_k_mutex_lock+0xec>)
   33622:	f000 f8d1 	bl	337c8 <z_reschedule>
	return -EAGAIN;
   33626:	f06f 000a 	mvn.w	r0, #10
   3362a:	e7c2      	b.n	335b2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   3362c:	2500      	movs	r5, #0
   3362e:	e7d3      	b.n	335d8 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   33630:	f000 fb72 	bl	33d18 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   33634:	2800      	cmp	r0, #0
   33636:	d1f2      	bne.n	3361e <z_impl_k_mutex_lock+0xc2>
   33638:	e7f0      	b.n	3361c <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   3363a:	f386 8811 	msr	BASEPRI, r6
   3363e:	f3bf 8f6f 	isb	sy
   33642:	e7f0      	b.n	33626 <z_impl_k_mutex_lock+0xca>
   33644:	20023ef8 	.word	0x20023ef8
   33648:	2002c6e8 	.word	0x2002c6e8

0003364c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   3364c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   3364e:	6883      	ldr	r3, [r0, #8]
{
   33650:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   33652:	2b00      	cmp	r3, #0
   33654:	d037      	beq.n	336c6 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   33656:	4a1f      	ldr	r2, [pc, #124]	; (336d4 <z_impl_k_mutex_unlock+0x88>)
   33658:	6892      	ldr	r2, [r2, #8]
   3365a:	4293      	cmp	r3, r2
   3365c:	d136      	bne.n	336cc <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   3365e:	7bda      	ldrb	r2, [r3, #15]
   33660:	3a01      	subs	r2, #1
   33662:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   33664:	68c3      	ldr	r3, [r0, #12]
   33666:	2b01      	cmp	r3, #1
   33668:	d005      	beq.n	33676 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   3366a:	3b01      	subs	r3, #1
   3366c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   3366e:	f000 f90f 	bl	33890 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   33672:	2000      	movs	r0, #0
}
   33674:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   33676:	f04f 0320 	mov.w	r3, #32
   3367a:	f3ef 8511 	mrs	r5, BASEPRI
   3367e:	f383 8811 	msr	BASEPRI, r3
   33682:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   33686:	6901      	ldr	r1, [r0, #16]
   33688:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   3368a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3368e:	4299      	cmp	r1, r3
   33690:	d001      	beq.n	33696 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   33692:	f000 fb41 	bl	33d18 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   33696:	4620      	mov	r0, r4
   33698:	f004 ff57 	bl	3854a <z_unpend_first_thread>
	mutex->owner = new_owner;
   3369c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   3369e:	b160      	cbz	r0, 336ba <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   336a0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   336a4:	6122      	str	r2, [r4, #16]
   336a6:	2200      	movs	r2, #0
   336a8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   336ac:	f004 fef2 	bl	38494 <z_ready_thread>
		z_reschedule(&lock, key);
   336b0:	4629      	mov	r1, r5
   336b2:	4809      	ldr	r0, [pc, #36]	; (336d8 <z_impl_k_mutex_unlock+0x8c>)
   336b4:	f000 f888 	bl	337c8 <z_reschedule>
   336b8:	e7d9      	b.n	3366e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   336ba:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   336bc:	f385 8811 	msr	BASEPRI, r5
   336c0:	f3bf 8f6f 	isb	sy
   336c4:	e7d3      	b.n	3366e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   336c6:	f06f 0015 	mvn.w	r0, #21
   336ca:	e7d3      	b.n	33674 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   336cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   336d0:	e7d0      	b.n	33674 <z_impl_k_mutex_unlock+0x28>
   336d2:	bf00      	nop
   336d4:	20023ef8 	.word	0x20023ef8
   336d8:	2002c6e8 	.word	0x2002c6e8

000336dc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   336dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   336de:	4616      	mov	r6, r2
   336e0:	461f      	mov	r7, r3
	__asm__ volatile(
   336e2:	f04f 0320 	mov.w	r3, #32
   336e6:	f3ef 8511 	mrs	r5, BASEPRI
   336ea:	f383 8811 	msr	BASEPRI, r3
   336ee:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   336f2:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   336f4:	b19c      	cbz	r4, 3371e <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   336f6:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   336f8:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   336fa:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   336fe:	4294      	cmp	r4, r2
	list->head = node;
   33700:	6003      	str	r3, [r0, #0]
	list->tail = node;
   33702:	bf08      	it	eq
   33704:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   33706:	2101      	movs	r1, #1
   33708:	4620      	mov	r0, r4
   3370a:	f004 fe2b 	bl	38364 <z_queue_node_peek>
   3370e:	4604      	mov	r4, r0
	__asm__ volatile(
   33710:	f385 8811 	msr	BASEPRI, r5
   33714:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   33718:	4620      	mov	r0, r4
   3371a:	b003      	add	sp, #12
   3371c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3371e:	ea56 0307 	orrs.w	r3, r6, r7
   33722:	d0f5      	beq.n	33710 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   33724:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   33728:	4629      	mov	r1, r5
   3372a:	4610      	mov	r0, r2
   3372c:	e9cd 6700 	strd	r6, r7, [sp]
   33730:	f000 fab0 	bl	33c94 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   33734:	2800      	cmp	r0, #0
   33736:	d1ef      	bne.n	33718 <z_impl_k_queue_get+0x3c>
   33738:	4b01      	ldr	r3, [pc, #4]	; (33740 <z_impl_k_queue_get+0x64>)
   3373a:	689b      	ldr	r3, [r3, #8]
   3373c:	695c      	ldr	r4, [r3, #20]
   3373e:	e7eb      	b.n	33718 <z_impl_k_queue_get+0x3c>
   33740:	20023ef8 	.word	0x20023ef8

00033744 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   33744:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   33746:	4c08      	ldr	r4, [pc, #32]	; (33768 <z_reset_time_slice+0x24>)
   33748:	6823      	ldr	r3, [r4, #0]
   3374a:	b15b      	cbz	r3, 33764 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   3374c:	f7f1 fab4 	bl	24cb8 <z_clock_elapsed>
   33750:	6822      	ldr	r2, [r4, #0]
   33752:	4906      	ldr	r1, [pc, #24]	; (3376c <z_reset_time_slice+0x28>)
   33754:	4410      	add	r0, r2
   33756:	6148      	str	r0, [r1, #20]
		z_set_timeout_expiry(slice_time, false);
	}
}
   33758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   3375c:	2100      	movs	r1, #0
   3375e:	4610      	mov	r0, r2
   33760:	f004 bfce 	b.w	38700 <z_set_timeout_expiry>
}
   33764:	bd10      	pop	{r4, pc}
   33766:	bf00      	nop
   33768:	20023f38 	.word	0x20023f38
   3376c:	20023ef8 	.word	0x20023ef8

00033770 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   33770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33772:	460c      	mov	r4, r1
	__asm__ volatile(
   33774:	f04f 0320 	mov.w	r3, #32
   33778:	f3ef 8511 	mrs	r5, BASEPRI
   3377c:	f383 8811 	msr	BASEPRI, r3
   33780:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   33784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   33788:	f240 36e7 	movw	r6, #999	; 0x3e7
   3378c:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   3378e:	2200      	movs	r2, #0
   33790:	fbe1 6700 	umlal	r6, r7, r1, r0
   33794:	4b09      	ldr	r3, [pc, #36]	; (337bc <k_sched_time_slice_set+0x4c>)
   33796:	4630      	mov	r0, r6
   33798:	615a      	str	r2, [r3, #20]
   3379a:	4639      	mov	r1, r7
   3379c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   337a0:	2300      	movs	r3, #0
   337a2:	f7e9 f809 	bl	1c7b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   337a6:	4b06      	ldr	r3, [pc, #24]	; (337c0 <k_sched_time_slice_set+0x50>)
   337a8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   337aa:	4b06      	ldr	r3, [pc, #24]	; (337c4 <k_sched_time_slice_set+0x54>)
   337ac:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   337ae:	f7ff ffc9 	bl	33744 <z_reset_time_slice>
	__asm__ volatile(
   337b2:	f385 8811 	msr	BASEPRI, r5
   337b6:	f3bf 8f6f 	isb	sy
	}
}
   337ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   337bc:	20023ef8 	.word	0x20023ef8
   337c0:	20023f38 	.word	0x20023f38
   337c4:	20023f34 	.word	0x20023f34

000337c8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   337c8:	b949      	cbnz	r1, 337de <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   337ca:	f3ef 8005 	mrs	r0, IPSR
   337ce:	b930      	cbnz	r0, 337de <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   337d0:	4b05      	ldr	r3, [pc, #20]	; (337e8 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   337d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   337d4:	689b      	ldr	r3, [r3, #8]
   337d6:	429a      	cmp	r2, r3
   337d8:	d001      	beq.n	337de <z_reschedule+0x16>
	return z_swap_irqlock(key.key);
   337da:	f004 bde6 	b.w	383aa <z_swap_irqlock>
   337de:	f381 8811 	msr	BASEPRI, r1
   337e2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   337e6:	4770      	bx	lr
   337e8:	20023ef8 	.word	0x20023ef8

000337ec <k_sched_lock>:
	__asm__ volatile(
   337ec:	f04f 0320 	mov.w	r3, #32
   337f0:	f3ef 8111 	mrs	r1, BASEPRI
   337f4:	f383 8811 	msr	BASEPRI, r3
   337f8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   337fc:	4b04      	ldr	r3, [pc, #16]	; (33810 <k_sched_lock+0x24>)
   337fe:	689a      	ldr	r2, [r3, #8]
   33800:	7bd3      	ldrb	r3, [r2, #15]
   33802:	3b01      	subs	r3, #1
   33804:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   33806:	f381 8811 	msr	BASEPRI, r1
   3380a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   3380e:	4770      	bx	lr
   33810:	20023ef8 	.word	0x20023ef8

00033814 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   33814:	4b09      	ldr	r3, [pc, #36]	; (3383c <z_priq_dumb_remove+0x28>)
   33816:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   3381a:	4282      	cmp	r2, r0
   3381c:	d105      	bne.n	3382a <z_priq_dumb_remove+0x16>
   3381e:	689b      	ldr	r3, [r3, #8]
   33820:	428b      	cmp	r3, r1
   33822:	d102      	bne.n	3382a <z_priq_dumb_remove+0x16>
   33824:	7b4b      	ldrb	r3, [r1, #13]
   33826:	06db      	lsls	r3, r3, #27
   33828:	d106      	bne.n	33838 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   3382a:	e9d1 3200 	ldrd	r3, r2, [r1]
   3382e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   33830:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   33832:	2300      	movs	r3, #0
	node->prev = NULL;
   33834:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   33838:	4770      	bx	lr
   3383a:	bf00      	nop
   3383c:	20023ef8 	.word	0x20023ef8

00033840 <update_cache>:
{
   33840:	b538      	push	{r3, r4, r5, lr}
   33842:	4c12      	ldr	r4, [pc, #72]	; (3388c <update_cache+0x4c>)
   33844:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   33846:	6923      	ldr	r3, [r4, #16]
   33848:	68a2      	ldr	r2, [r4, #8]
   3384a:	b10b      	cbz	r3, 33850 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   3384c:	68e5      	ldr	r5, [r4, #12]
   3384e:	e00c      	b.n	3386a <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   33850:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   33854:	f004 fe14 	bl	38480 <z_priq_dumb_best>
   33858:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   3385a:	7b53      	ldrb	r3, [r2, #13]
   3385c:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   3385e:	bf44      	itt	mi
   33860:	f043 0308 	orrmi.w	r3, r3, #8
   33864:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   33866:	2d00      	cmp	r5, #0
   33868:	d0f0      	beq.n	3384c <update_cache+0xc>
	if (preempt_ok != 0) {
   3386a:	b949      	cbnz	r1, 33880 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   3386c:	7b53      	ldrb	r3, [r2, #13]
   3386e:	06db      	lsls	r3, r3, #27
   33870:	d106      	bne.n	33880 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   33872:	69ab      	ldr	r3, [r5, #24]
   33874:	b923      	cbnz	r3, 33880 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   33876:	89d3      	ldrh	r3, [r2, #14]
   33878:	2b7f      	cmp	r3, #127	; 0x7f
   3387a:	d901      	bls.n	33880 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   3387c:	62a2      	str	r2, [r4, #40]	; 0x28
}
   3387e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   33880:	4295      	cmp	r5, r2
   33882:	d001      	beq.n	33888 <update_cache+0x48>
			z_reset_time_slice();
   33884:	f7ff ff5e 	bl	33744 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   33888:	62a5      	str	r5, [r4, #40]	; 0x28
}
   3388a:	e7f8      	b.n	3387e <update_cache+0x3e>
   3388c:	20023ef8 	.word	0x20023ef8

00033890 <k_sched_unlock>:
{
   33890:	b510      	push	{r4, lr}
	__asm__ volatile(
   33892:	f04f 0320 	mov.w	r3, #32
   33896:	f3ef 8411 	mrs	r4, BASEPRI
   3389a:	f383 8811 	msr	BASEPRI, r3
   3389e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   338a2:	4b08      	ldr	r3, [pc, #32]	; (338c4 <k_sched_unlock+0x34>)
		update_cache(0);
   338a4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   338a6:	689a      	ldr	r2, [r3, #8]
   338a8:	7bd3      	ldrb	r3, [r2, #15]
   338aa:	3301      	adds	r3, #1
   338ac:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   338ae:	f7ff ffc7 	bl	33840 <update_cache>
	__asm__ volatile(
   338b2:	f384 8811 	msr	BASEPRI, r4
   338b6:	f3bf 8f6f 	isb	sy
}
   338ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   338be:	f004 bdb3 	b.w	38428 <z_reschedule_unlocked>
   338c2:	bf00      	nop
   338c4:	20023ef8 	.word	0x20023ef8

000338c8 <ready_thread>:
{
   338c8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   338ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   338ce:	7b43      	ldrb	r3, [r0, #13]
   338d0:	2a00      	cmp	r2, #0
   338d2:	db2c      	blt.n	3392e <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   338d4:	06db      	lsls	r3, r3, #27
   338d6:	d12a      	bne.n	3392e <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   338d8:	6983      	ldr	r3, [r0, #24]
   338da:	bb43      	cbnz	r3, 3392e <ready_thread+0x66>
	return list->head == list;
   338dc:	4a15      	ldr	r2, [pc, #84]	; (33934 <ready_thread+0x6c>)
   338de:	4611      	mov	r1, r2
   338e0:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   338e4:	428c      	cmp	r4, r1
   338e6:	bf18      	it	ne
   338e8:	4623      	movne	r3, r4
   338ea:	2b00      	cmp	r3, #0
   338ec:	bf38      	it	cc
   338ee:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   338f0:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   338f2:	b1b3      	cbz	r3, 33922 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   338f4:	f990 600e 	ldrsb.w	r6, [r0, #14]
   338f8:	f993 500e 	ldrsb.w	r5, [r3, #14]
   338fc:	42ae      	cmp	r6, r5
   338fe:	db03      	blt.n	33908 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   33900:	42a3      	cmp	r3, r4
   33902:	d00e      	beq.n	33922 <ready_thread+0x5a>
   33904:	681b      	ldr	r3, [r3, #0]
   33906:	e7f4      	b.n	338f2 <ready_thread+0x2a>
	node->prev = successor->prev;
   33908:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3390a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   3390e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   33910:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   33912:	7b43      	ldrb	r3, [r0, #13]
   33914:	f063 037f 	orn	r3, r3, #127	; 0x7f
   33918:	7343      	strb	r3, [r0, #13]
}
   3391a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   3391c:	2000      	movs	r0, #0
   3391e:	f7ff bf8f 	b.w	33840 <update_cache>
	node->prev = list->tail;
   33922:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   33926:	6b13      	ldr	r3, [r2, #48]	; 0x30
   33928:	6018      	str	r0, [r3, #0]
	list->tail = node;
   3392a:	6310      	str	r0, [r2, #48]	; 0x30
}
   3392c:	e7f1      	b.n	33912 <ready_thread+0x4a>
}
   3392e:	bc70      	pop	{r4, r5, r6}
   33930:	4770      	bx	lr
   33932:	bf00      	nop
   33934:	20023ef8 	.word	0x20023ef8

00033938 <z_sched_start>:
{
   33938:	b510      	push	{r4, lr}
	__asm__ volatile(
   3393a:	f04f 0220 	mov.w	r2, #32
   3393e:	f3ef 8411 	mrs	r4, BASEPRI
   33942:	f382 8811 	msr	BASEPRI, r2
   33946:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   3394a:	7b42      	ldrb	r2, [r0, #13]
   3394c:	0751      	lsls	r1, r2, #29
   3394e:	d404      	bmi.n	3395a <z_sched_start+0x22>
	__asm__ volatile(
   33950:	f384 8811 	msr	BASEPRI, r4
   33954:	f3bf 8f6f 	isb	sy
}
   33958:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3395a:	f022 0204 	bic.w	r2, r2, #4
   3395e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   33960:	f7ff ffb2 	bl	338c8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   33964:	4621      	mov	r1, r4
}
   33966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   3396a:	4801      	ldr	r0, [pc, #4]	; (33970 <z_sched_start+0x38>)
   3396c:	f7ff bf2c 	b.w	337c8 <z_reschedule>
   33970:	2002c6e8 	.word	0x2002c6e8

00033974 <z_impl_k_thread_resume>:
{
   33974:	b510      	push	{r4, lr}
	__asm__ volatile(
   33976:	f04f 0220 	mov.w	r2, #32
   3397a:	f3ef 8411 	mrs	r4, BASEPRI
   3397e:	f382 8811 	msr	BASEPRI, r2
   33982:	f3bf 8f6f 	isb	sy
	if (!z_is_thread_suspended(thread)) {
   33986:	7b42      	ldrb	r2, [r0, #13]
   33988:	06d1      	lsls	r1, r2, #27
   3398a:	d404      	bmi.n	33996 <z_impl_k_thread_resume+0x22>
	__asm__ volatile(
   3398c:	f384 8811 	msr	BASEPRI, r4
   33990:	f3bf 8f6f 	isb	sy
}
   33994:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   33996:	f022 0210 	bic.w	r2, r2, #16
   3399a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   3399c:	f7ff ff94 	bl	338c8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   339a0:	4621      	mov	r1, r4
}
   339a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   339a6:	4801      	ldr	r0, [pc, #4]	; (339ac <z_impl_k_thread_resume+0x38>)
   339a8:	f7ff bf0e 	b.w	337c8 <z_reschedule>
   339ac:	2002c6e8 	.word	0x2002c6e8

000339b0 <move_thread_to_end_of_prio_q>:
{
   339b0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   339b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   339b6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   339b8:	2b00      	cmp	r3, #0
   339ba:	da02      	bge.n	339c2 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   339bc:	4817      	ldr	r0, [pc, #92]	; (33a1c <move_thread_to_end_of_prio_q+0x6c>)
   339be:	f7ff ff29 	bl	33814 <z_priq_dumb_remove>
	return list->head == list;
   339c2:	4a17      	ldr	r2, [pc, #92]	; (33a20 <move_thread_to_end_of_prio_q+0x70>)
   339c4:	4610      	mov	r0, r2
   339c6:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   339ca:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   339cc:	4283      	cmp	r3, r0
   339ce:	bf08      	it	eq
   339d0:	2300      	moveq	r3, #0
   339d2:	2b00      	cmp	r3, #0
   339d4:	bf38      	it	cc
   339d6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   339d8:	b1d3      	cbz	r3, 33a10 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   339da:	f991 600e 	ldrsb.w	r6, [r1, #14]
   339de:	f993 500e 	ldrsb.w	r5, [r3, #14]
   339e2:	42ae      	cmp	r6, r5
   339e4:	db03      	blt.n	339ee <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   339e6:	42a3      	cmp	r3, r4
   339e8:	d012      	beq.n	33a10 <move_thread_to_end_of_prio_q+0x60>
   339ea:	681b      	ldr	r3, [r3, #0]
   339ec:	e7f4      	b.n	339d8 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   339ee:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   339f0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   339f4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   339f6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   339f8:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   339fa:	6890      	ldr	r0, [r2, #8]
   339fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   33a00:	734b      	strb	r3, [r1, #13]
   33a02:	1a43      	subs	r3, r0, r1
   33a04:	4258      	negs	r0, r3
   33a06:	4158      	adcs	r0, r3
}
   33a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   33a0c:	f7ff bf18 	b.w	33840 <update_cache>
	node->prev = list->tail;
   33a10:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   33a14:	6b13      	ldr	r3, [r2, #48]	; 0x30
   33a16:	6019      	str	r1, [r3, #0]
	list->tail = node;
   33a18:	6311      	str	r1, [r2, #48]	; 0x30
}
   33a1a:	e7ed      	b.n	339f8 <move_thread_to_end_of_prio_q+0x48>
   33a1c:	20023f24 	.word	0x20023f24
   33a20:	20023ef8 	.word	0x20023ef8

00033a24 <z_time_slice>:
{
   33a24:	4601      	mov	r1, r0
   33a26:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   33a28:	f04f 0320 	mov.w	r3, #32
   33a2c:	f3ef 8411 	mrs	r4, BASEPRI
   33a30:	f383 8811 	msr	BASEPRI, r3
   33a34:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   33a38:	4b16      	ldr	r3, [pc, #88]	; (33a94 <z_time_slice+0x70>)
   33a3a:	4a17      	ldr	r2, [pc, #92]	; (33a98 <z_time_slice+0x74>)
   33a3c:	6898      	ldr	r0, [r3, #8]
   33a3e:	6815      	ldr	r5, [r2, #0]
   33a40:	42a8      	cmp	r0, r5
   33a42:	461d      	mov	r5, r3
   33a44:	d106      	bne.n	33a54 <z_time_slice+0x30>
			z_reset_time_slice();
   33a46:	f7ff fe7d 	bl	33744 <z_reset_time_slice>
	__asm__ volatile(
   33a4a:	f384 8811 	msr	BASEPRI, r4
   33a4e:	f3bf 8f6f 	isb	sy
}
   33a52:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   33a54:	2600      	movs	r6, #0
   33a56:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   33a58:	4a10      	ldr	r2, [pc, #64]	; (33a9c <z_time_slice+0x78>)
   33a5a:	6812      	ldr	r2, [r2, #0]
   33a5c:	b1ba      	cbz	r2, 33a8e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   33a5e:	89c2      	ldrh	r2, [r0, #14]
   33a60:	2a7f      	cmp	r2, #127	; 0x7f
   33a62:	d814      	bhi.n	33a8e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   33a64:	7b42      	ldrb	r2, [r0, #13]
   33a66:	06d2      	lsls	r2, r2, #27
   33a68:	d111      	bne.n	33a8e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   33a6a:	4a0d      	ldr	r2, [pc, #52]	; (33aa0 <z_time_slice+0x7c>)
   33a6c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   33a70:	6812      	ldr	r2, [r2, #0]
   33a72:	4296      	cmp	r6, r2
   33a74:	db0b      	blt.n	33a8e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   33a76:	4a0b      	ldr	r2, [pc, #44]	; (33aa4 <z_time_slice+0x80>)
   33a78:	4290      	cmp	r0, r2
   33a7a:	d008      	beq.n	33a8e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   33a7c:	695a      	ldr	r2, [r3, #20]
   33a7e:	428a      	cmp	r2, r1
   33a80:	dc02      	bgt.n	33a88 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   33a82:	f7ff ff95 	bl	339b0 <move_thread_to_end_of_prio_q>
   33a86:	e7de      	b.n	33a46 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   33a88:	1a52      	subs	r2, r2, r1
   33a8a:	615a      	str	r2, [r3, #20]
   33a8c:	e7dd      	b.n	33a4a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   33a8e:	2300      	movs	r3, #0
   33a90:	616b      	str	r3, [r5, #20]
   33a92:	e7da      	b.n	33a4a <z_time_slice+0x26>
   33a94:	20023ef8 	.word	0x20023ef8
   33a98:	20023f30 	.word	0x20023f30
   33a9c:	20023f38 	.word	0x20023f38
   33aa0:	20023f34 	.word	0x20023f34
   33aa4:	20023090 	.word	0x20023090

00033aa8 <z_impl_k_thread_suspend>:
{
   33aa8:	b570      	push	{r4, r5, r6, lr}
   33aaa:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   33aac:	3018      	adds	r0, #24
   33aae:	f004 fe01 	bl	386b4 <z_abort_timeout>
	__asm__ volatile(
   33ab2:	f04f 0320 	mov.w	r3, #32
   33ab6:	f3ef 8611 	mrs	r6, BASEPRI
   33aba:	f383 8811 	msr	BASEPRI, r3
   33abe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   33ac2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   33ac6:	2b00      	cmp	r3, #0
   33ac8:	da07      	bge.n	33ada <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   33aca:	4621      	mov	r1, r4
   33acc:	480e      	ldr	r0, [pc, #56]	; (33b08 <z_impl_k_thread_suspend+0x60>)
   33ace:	f7ff fea1 	bl	33814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   33ad2:	7b63      	ldrb	r3, [r4, #13]
   33ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   33ad8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   33ada:	4d0c      	ldr	r5, [pc, #48]	; (33b0c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   33adc:	7b63      	ldrb	r3, [r4, #13]
   33ade:	68a8      	ldr	r0, [r5, #8]
   33ae0:	f043 0310 	orr.w	r3, r3, #16
   33ae4:	7363      	strb	r3, [r4, #13]
   33ae6:	1b03      	subs	r3, r0, r4
   33ae8:	4258      	negs	r0, r3
   33aea:	4158      	adcs	r0, r3
   33aec:	f7ff fea8 	bl	33840 <update_cache>
	__asm__ volatile(
   33af0:	f386 8811 	msr	BASEPRI, r6
   33af4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   33af8:	68ab      	ldr	r3, [r5, #8]
   33afa:	42a3      	cmp	r3, r4
   33afc:	d103      	bne.n	33b06 <z_impl_k_thread_suspend+0x5e>
}
   33afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   33b02:	f004 bc91 	b.w	38428 <z_reschedule_unlocked>
}
   33b06:	bd70      	pop	{r4, r5, r6, pc}
   33b08:	20023f24 	.word	0x20023f24
   33b0c:	20023ef8 	.word	0x20023ef8

00033b10 <z_thread_single_abort>:
{
   33b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33b14:	4604      	mov	r4, r0
	__asm__ volatile(
   33b16:	f04f 0320 	mov.w	r3, #32
   33b1a:	f3ef 8211 	mrs	r2, BASEPRI
   33b1e:	f383 8811 	msr	BASEPRI, r3
   33b22:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   33b26:	7b43      	ldrb	r3, [r0, #13]
   33b28:	f013 0f28 	tst.w	r3, #40	; 0x28
   33b2c:	d005      	beq.n	33b3a <z_thread_single_abort+0x2a>
	__asm__ volatile(
   33b2e:	f382 8811 	msr	BASEPRI, r2
   33b32:	f3bf 8f6f 	isb	sy
}
   33b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   33b3a:	f043 0320 	orr.w	r3, r3, #32
   33b3e:	7343      	strb	r3, [r0, #13]
   33b40:	f382 8811 	msr	BASEPRI, r2
   33b44:	f3bf 8f6f 	isb	sy
   33b48:	3018      	adds	r0, #24
   33b4a:	f004 fdb3 	bl	386b4 <z_abort_timeout>
	__asm__ volatile(
   33b4e:	f04f 0320 	mov.w	r3, #32
   33b52:	f3ef 8611 	mrs	r6, BASEPRI
   33b56:	f383 8811 	msr	BASEPRI, r3
   33b5a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   33b5e:	7b63      	ldrb	r3, [r4, #13]
   33b60:	06d8      	lsls	r0, r3, #27
   33b62:	d116      	bne.n	33b92 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   33b64:	69a2      	ldr	r2, [r4, #24]
   33b66:	b9a2      	cbnz	r2, 33b92 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   33b68:	0619      	lsls	r1, r3, #24
   33b6a:	d507      	bpl.n	33b7c <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   33b6c:	4621      	mov	r1, r4
   33b6e:	4826      	ldr	r0, [pc, #152]	; (33c08 <z_thread_single_abort+0xf8>)
   33b70:	f7ff fe50 	bl	33814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   33b74:	7b63      	ldrb	r3, [r4, #13]
   33b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   33b7a:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   33b7c:	4b23      	ldr	r3, [pc, #140]	; (33c0c <z_thread_single_abort+0xfc>)
   33b7e:	6898      	ldr	r0, [r3, #8]
   33b80:	1b02      	subs	r2, r0, r4
   33b82:	4250      	negs	r0, r2
   33b84:	4150      	adcs	r0, r2
   33b86:	f7ff fe5b 	bl	33840 <update_cache>
			waiter->base.pended_on = NULL;
   33b8a:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   33b8c:	f104 0830 	add.w	r8, r4, #48	; 0x30
   33b90:	e01e      	b.n	33bd0 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   33b92:	079b      	lsls	r3, r3, #30
   33b94:	d5f9      	bpl.n	33b8a <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   33b96:	4621      	mov	r1, r4
   33b98:	68a0      	ldr	r0, [r4, #8]
   33b9a:	f7ff fe3b 	bl	33814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   33b9e:	7b63      	ldrb	r3, [r4, #13]
   33ba0:	f023 0302 	bic.w	r3, r3, #2
   33ba4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   33ba6:	2300      	movs	r3, #0
   33ba8:	60a3      	str	r3, [r4, #8]
   33baa:	e7ee      	b.n	33b8a <z_thread_single_abort+0x7a>
   33bac:	f105 0018 	add.w	r0, r5, #24
   33bb0:	f004 fd80 	bl	386b4 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   33bb4:	68a8      	ldr	r0, [r5, #8]
   33bb6:	4629      	mov	r1, r5
   33bb8:	f7ff fe2c 	bl	33814 <z_priq_dumb_remove>
   33bbc:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   33bbe:	4628      	mov	r0, r5
   33bc0:	f023 0302 	bic.w	r3, r3, #2
   33bc4:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   33bc6:	60af      	str	r7, [r5, #8]
   33bc8:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   33bcc:	f7ff fe7c 	bl	338c8 <ready_thread>
	return list->head == list;
   33bd0:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33bd2:	4545      	cmp	r5, r8
   33bd4:	d001      	beq.n	33bda <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   33bd6:	2d00      	cmp	r5, #0
   33bd8:	d1e8      	bne.n	33bac <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   33bda:	4b0c      	ldr	r3, [pc, #48]	; (33c0c <z_thread_single_abort+0xfc>)
   33bdc:	689a      	ldr	r2, [r3, #8]
   33bde:	4b0c      	ldr	r3, [pc, #48]	; (33c10 <z_thread_single_abort+0x100>)
   33be0:	429a      	cmp	r2, r3
   33be2:	d102      	bne.n	33bea <z_thread_single_abort+0xda>
			update_cache(1);
   33be4:	2001      	movs	r0, #1
   33be6:	f7ff fe2b 	bl	33840 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   33bea:	7b63      	ldrb	r3, [r4, #13]
   33bec:	f043 0308 	orr.w	r3, r3, #8
   33bf0:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   33bf2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   33bf4:	f386 8811 	msr	BASEPRI, r6
   33bf8:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   33bfc:	2b00      	cmp	r3, #0
   33bfe:	d09a      	beq.n	33b36 <z_thread_single_abort+0x26>
		fn_abort(thread);
   33c00:	4620      	mov	r0, r4
}
   33c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   33c06:	4718      	bx	r3
   33c08:	20023f24 	.word	0x20023f24
   33c0c:	20023ef8 	.word	0x20023ef8
   33c10:	20023090 	.word	0x20023090

00033c14 <unready_thread>:
{
   33c14:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   33c16:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   33c1a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   33c1c:	2b00      	cmp	r3, #0
   33c1e:	da06      	bge.n	33c2e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   33c20:	4807      	ldr	r0, [pc, #28]	; (33c40 <unready_thread+0x2c>)
   33c22:	f7ff fdf7 	bl	33814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   33c26:	7b4b      	ldrb	r3, [r1, #13]
   33c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   33c2c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   33c2e:	4b05      	ldr	r3, [pc, #20]	; (33c44 <unready_thread+0x30>)
   33c30:	6898      	ldr	r0, [r3, #8]
   33c32:	1a43      	subs	r3, r0, r1
   33c34:	4258      	negs	r0, r3
   33c36:	4158      	adcs	r0, r3
}
   33c38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   33c3c:	f7ff be00 	b.w	33840 <update_cache>
   33c40:	20023f24 	.word	0x20023f24
   33c44:	20023ef8 	.word	0x20023ef8

00033c48 <pend>:
{
   33c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33c4c:	4606      	mov	r6, r0
   33c4e:	4614      	mov	r4, r2
   33c50:	461d      	mov	r5, r3
	__asm__ volatile(
   33c52:	f04f 0320 	mov.w	r3, #32
   33c56:	f3ef 8711 	mrs	r7, BASEPRI
   33c5a:	f383 8811 	msr	BASEPRI, r3
   33c5e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   33c62:	f004 fc47 	bl	384f4 <add_to_waitq_locked>
	__asm__ volatile(
   33c66:	f387 8811 	msr	BASEPRI, r7
   33c6a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   33c6e:	1c6b      	adds	r3, r5, #1
   33c70:	bf08      	it	eq
   33c72:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   33c76:	d008      	beq.n	33c8a <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   33c78:	4622      	mov	r2, r4
   33c7a:	462b      	mov	r3, r5
   33c7c:	f106 0018 	add.w	r0, r6, #24
   33c80:	4903      	ldr	r1, [pc, #12]	; (33c90 <pend+0x48>)
}
   33c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   33c86:	f000 bb13 	b.w	342b0 <z_add_timeout>
   33c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33c8e:	bf00      	nop
   33c90:	000384b5 	.word	0x000384b5

00033c94 <z_pend_curr>:
{
   33c94:	b510      	push	{r4, lr}
   33c96:	460c      	mov	r4, r1
	pending_current = _current;
   33c98:	4b06      	ldr	r3, [pc, #24]	; (33cb4 <z_pend_curr+0x20>)
{
   33c9a:	4611      	mov	r1, r2
	pending_current = _current;
   33c9c:	6898      	ldr	r0, [r3, #8]
   33c9e:	4b06      	ldr	r3, [pc, #24]	; (33cb8 <z_pend_curr+0x24>)
   33ca0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   33ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   33ca6:	f7ff ffcf 	bl	33c48 <pend>
   33caa:	4620      	mov	r0, r4
}
   33cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33cb0:	f004 bb7b 	b.w	383aa <z_swap_irqlock>
   33cb4:	20023ef8 	.word	0x20023ef8
   33cb8:	20023f30 	.word	0x20023f30

00033cbc <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   33cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33cbe:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   33cc0:	f004 fd39 	bl	38736 <z_tick_get_32>
   33cc4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   33cc6:	f04f 0320 	mov.w	r3, #32
   33cca:	f3ef 8711 	mrs	r7, BASEPRI
   33cce:	f383 8811 	msr	BASEPRI, r3
   33cd2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   33cd6:	4e0d      	ldr	r6, [pc, #52]	; (33d0c <z_tick_sleep.part.0+0x50>)
   33cd8:	4b0d      	ldr	r3, [pc, #52]	; (33d10 <z_tick_sleep.part.0+0x54>)
   33cda:	68b0      	ldr	r0, [r6, #8]
   33cdc:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   33cde:	f7ff ff99 	bl	33c14 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   33ce2:	68b0      	ldr	r0, [r6, #8]
   33ce4:	490b      	ldr	r1, [pc, #44]	; (33d14 <z_tick_sleep.part.0+0x58>)
   33ce6:	462a      	mov	r2, r5
   33ce8:	17eb      	asrs	r3, r5, #31
   33cea:	3018      	adds	r0, #24
   33cec:	f000 fae0 	bl	342b0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   33cf0:	68b2      	ldr	r2, [r6, #8]
   33cf2:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   33cf4:	7b53      	ldrb	r3, [r2, #13]
   33cf6:	f043 0310 	orr.w	r3, r3, #16
   33cfa:	7353      	strb	r3, [r2, #13]
   33cfc:	f004 fb55 	bl	383aa <z_swap_irqlock>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   33d00:	f004 fd19 	bl	38736 <z_tick_get_32>
   33d04:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   33d06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   33d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33d0c:	20023ef8 	.word	0x20023ef8
   33d10:	20023f30 	.word	0x20023f30
   33d14:	000384b5 	.word	0x000384b5

00033d18 <z_set_prio>:
{
   33d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33d1c:	4604      	mov	r4, r0
   33d1e:	f04f 0320 	mov.w	r3, #32
   33d22:	f3ef 8811 	mrs	r8, BASEPRI
   33d26:	f383 8811 	msr	BASEPRI, r3
   33d2a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   33d2e:	7b43      	ldrb	r3, [r0, #13]
   33d30:	b24e      	sxtb	r6, r1
   33d32:	06db      	lsls	r3, r3, #27
   33d34:	d12e      	bne.n	33d94 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   33d36:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   33d38:	bb65      	cbnz	r5, 33d94 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   33d3a:	4f18      	ldr	r7, [pc, #96]	; (33d9c <z_set_prio+0x84>)
   33d3c:	4621      	mov	r1, r4
   33d3e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   33d42:	f7ff fd67 	bl	33814 <z_priq_dumb_remove>
	return list->head == list;
   33d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   33d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33d4a:	4283      	cmp	r3, r0
   33d4c:	bf18      	it	ne
   33d4e:	461d      	movne	r5, r3
   33d50:	2d00      	cmp	r5, #0
   33d52:	bf38      	it	cc
   33d54:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   33d56:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   33d58:	b1b5      	cbz	r5, 33d88 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   33d5a:	f995 100e 	ldrsb.w	r1, [r5, #14]
   33d5e:	42b1      	cmp	r1, r6
   33d60:	dc03      	bgt.n	33d6a <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   33d62:	42aa      	cmp	r2, r5
   33d64:	d010      	beq.n	33d88 <z_set_prio+0x70>
   33d66:	682d      	ldr	r5, [r5, #0]
   33d68:	e7f6      	b.n	33d58 <z_set_prio+0x40>
	node->prev = successor->prev;
   33d6a:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   33d6c:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   33d70:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   33d72:	606c      	str	r4, [r5, #4]
			update_cache(1);
   33d74:	2001      	movs	r0, #1
   33d76:	f7ff fd63 	bl	33840 <update_cache>
   33d7a:	2001      	movs	r0, #1
	__asm__ volatile(
   33d7c:	f388 8811 	msr	BASEPRI, r8
   33d80:	f3bf 8f6f 	isb	sy
}
   33d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   33d88:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   33d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33d8e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   33d90:	633c      	str	r4, [r7, #48]	; 0x30
}
   33d92:	e7ef      	b.n	33d74 <z_set_prio+0x5c>
			thread->base.prio = prio;
   33d94:	2000      	movs	r0, #0
   33d96:	73a6      	strb	r6, [r4, #14]
   33d98:	e7f0      	b.n	33d7c <z_set_prio+0x64>
   33d9a:	bf00      	nop
   33d9c:	20023ef8 	.word	0x20023ef8

00033da0 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   33da0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   33da2:	4b04      	ldr	r3, [pc, #16]	; (33db4 <z_sched_init+0x14>)
   33da4:	4608      	mov	r0, r1
   33da6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   33daa:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   33dae:	f7ff bcdf 	b.w	33770 <k_sched_time_slice_set>
   33db2:	bf00      	nop
   33db4:	20023ef8 	.word	0x20023ef8

00033db8 <z_impl_k_yield>:
{
   33db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   33dba:	4c24      	ldr	r4, [pc, #144]	; (33e4c <z_impl_k_yield+0x94>)
   33dbc:	4b24      	ldr	r3, [pc, #144]	; (33e50 <z_impl_k_yield+0x98>)
   33dbe:	68a2      	ldr	r2, [r4, #8]
   33dc0:	429a      	cmp	r2, r3
   33dc2:	d030      	beq.n	33e26 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   33dc4:	f04f 0320 	mov.w	r3, #32
   33dc8:	f3ef 8511 	mrs	r5, BASEPRI
   33dcc:	f383 8811 	msr	BASEPRI, r3
   33dd0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   33dd4:	68a1      	ldr	r1, [r4, #8]
   33dd6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   33dda:	f7ff fd1b 	bl	33814 <z_priq_dumb_remove>
	return list->head == list;
   33dde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   33de0:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33de2:	4283      	cmp	r3, r0
   33de4:	bf08      	it	eq
   33de6:	2300      	moveq	r3, #0
   33de8:	2b00      	cmp	r3, #0
   33dea:	bf38      	it	cc
   33dec:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   33dee:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   33df0:	b32b      	cbz	r3, 33e3e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   33df2:	f992 700e 	ldrsb.w	r7, [r2, #14]
   33df6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   33dfa:	42b7      	cmp	r7, r6
   33dfc:	db03      	blt.n	33e06 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   33dfe:	428b      	cmp	r3, r1
   33e00:	d01d      	beq.n	33e3e <z_impl_k_yield+0x86>
   33e02:	681b      	ldr	r3, [r3, #0]
   33e04:	e7f4      	b.n	33df0 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   33e06:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   33e08:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   33e0c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   33e0e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   33e10:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   33e12:	2001      	movs	r0, #1
   33e14:	f063 037f 	orn	r3, r3, #127	; 0x7f
   33e18:	7353      	strb	r3, [r2, #13]
   33e1a:	f7ff fd11 	bl	33840 <update_cache>
	__asm__ volatile(
   33e1e:	f385 8811 	msr	BASEPRI, r5
   33e22:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   33e26:	f04f 0320 	mov.w	r3, #32
   33e2a:	f3ef 8011 	mrs	r0, BASEPRI
   33e2e:	f383 8811 	msr	BASEPRI, r3
   33e32:	f3bf 8f6f 	isb	sy
}
   33e36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void) z_swap_irqlock(arch_irq_lock());
   33e3a:	f004 bab6 	b.w	383aa <z_swap_irqlock>
	node->prev = list->tail;
   33e3e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   33e42:	6b23      	ldr	r3, [r4, #48]	; 0x30
   33e44:	601a      	str	r2, [r3, #0]
	list->tail = node;
   33e46:	6322      	str	r2, [r4, #48]	; 0x30
}
   33e48:	e7e2      	b.n	33e10 <z_impl_k_yield+0x58>
   33e4a:	bf00      	nop
   33e4c:	20023ef8 	.word	0x20023ef8
   33e50:	20023090 	.word	0x20023090

00033e54 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   33e54:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   33e56:	3301      	adds	r3, #1
   33e58:	bf08      	it	eq
   33e5a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   33e5e:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   33e60:	d106      	bne.n	33e70 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   33e62:	4b0b      	ldr	r3, [pc, #44]	; (33e90 <z_impl_k_sleep+0x3c>)
   33e64:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   33e66:	f7ff fe1f 	bl	33aa8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   33e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   33e6e:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   33e70:	4604      	mov	r4, r0
	if (ticks == 0) {
   33e72:	b948      	cbnz	r0, 33e88 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   33e74:	f7ff ffa0 	bl	33db8 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   33e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   33e7c:	fb84 3400 	smull	r3, r4, r4, r0
   33e80:	0bd8      	lsrs	r0, r3, #15
   33e82:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   33e86:	e7f2      	b.n	33e6e <z_impl_k_sleep+0x1a>
   33e88:	f7ff ff18 	bl	33cbc <z_tick_sleep.part.0>
   33e8c:	4604      	mov	r4, r0
   33e8e:	e7f3      	b.n	33e78 <z_impl_k_sleep+0x24>
   33e90:	20023ef8 	.word	0x20023ef8

00033e94 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   33e94:	4b01      	ldr	r3, [pc, #4]	; (33e9c <z_impl_k_current_get+0x8>)
   33e96:	6898      	ldr	r0, [r3, #8]
   33e98:	4770      	bx	lr
   33e9a:	bf00      	nop
   33e9c:	20023ef8 	.word	0x20023ef8

00033ea0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   33ea0:	b538      	push	{r3, r4, r5, lr}
   33ea2:	4604      	mov	r4, r0
   33ea4:	f04f 0320 	mov.w	r3, #32
   33ea8:	f3ef 8511 	mrs	r5, BASEPRI
   33eac:	f383 8811 	msr	BASEPRI, r3
   33eb0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   33eb4:	f004 fb49 	bl	3854a <z_unpend_first_thread>

	if (thread != NULL) {
   33eb8:	b150      	cbz	r0, 33ed0 <z_impl_k_sem_give+0x30>
   33eba:	2200      	movs	r2, #0
   33ebc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   33ec0:	f004 fae8 	bl	38494 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   33ec4:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   33ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   33eca:	4807      	ldr	r0, [pc, #28]	; (33ee8 <z_impl_k_sem_give+0x48>)
   33ecc:	f7ff bc7c 	b.w	337c8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   33ed0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   33ed4:	429a      	cmp	r2, r3
   33ed6:	bf18      	it	ne
   33ed8:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   33eda:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   33edc:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   33ede:	f104 0010 	add.w	r0, r4, #16
   33ee2:	f004 fdc9 	bl	38a78 <z_handle_obj_poll_events>
}
   33ee6:	e7ed      	b.n	33ec4 <z_impl_k_sem_give+0x24>
   33ee8:	2002c6e8 	.word	0x2002c6e8

00033eec <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   33eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33eee:	4614      	mov	r4, r2
   33ef0:	461d      	mov	r5, r3
   33ef2:	f04f 0320 	mov.w	r3, #32
   33ef6:	f3ef 8111 	mrs	r1, BASEPRI
   33efa:	f383 8811 	msr	BASEPRI, r3
   33efe:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   33f02:	6883      	ldr	r3, [r0, #8]
   33f04:	b143      	cbz	r3, 33f18 <z_impl_k_sem_take+0x2c>
		sem->count--;
   33f06:	3b01      	subs	r3, #1
   33f08:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   33f0a:	f381 8811 	msr	BASEPRI, r1
   33f0e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   33f12:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   33f14:	b003      	add	sp, #12
   33f16:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   33f18:	ea54 0305 	orrs.w	r3, r4, r5
   33f1c:	d106      	bne.n	33f2c <z_impl_k_sem_take+0x40>
   33f1e:	f381 8811 	msr	BASEPRI, r1
   33f22:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   33f26:	f06f 000f 	mvn.w	r0, #15
   33f2a:	e7f3      	b.n	33f14 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   33f2c:	4602      	mov	r2, r0
   33f2e:	e9cd 4500 	strd	r4, r5, [sp]
   33f32:	4802      	ldr	r0, [pc, #8]	; (33f3c <z_impl_k_sem_take+0x50>)
   33f34:	f7ff feae 	bl	33c94 <z_pend_curr>
	return ret;
   33f38:	e7ec      	b.n	33f14 <z_impl_k_sem_take+0x28>
   33f3a:	bf00      	nop
   33f3c:	2002c6e8 	.word	0x2002c6e8

00033f40 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   33f40:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   33f42:	4c08      	ldr	r4, [pc, #32]	; (33f64 <k_sys_work_q_init+0x24>)
   33f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33f48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   33f4c:	4620      	mov	r0, r4
   33f4e:	4906      	ldr	r1, [pc, #24]	; (33f68 <k_sys_work_q_init+0x28>)
   33f50:	f000 f8f6 	bl	34140 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   33f54:	4905      	ldr	r1, [pc, #20]	; (33f6c <k_sys_work_q_init+0x2c>)
   33f56:	f104 0018 	add.w	r0, r4, #24
   33f5a:	f004 fb45 	bl	385e8 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   33f5e:	2000      	movs	r0, #0
   33f60:	bd10      	pop	{r4, pc}
   33f62:	bf00      	nop
   33f64:	20023220 	.word	0x20023220
   33f68:	20030520 	.word	0x20030520
   33f6c:	0003d1c8 	.word	0x0003d1c8

00033f70 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	uint32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   33f70:	4b09      	ldr	r3, [pc, #36]	; (33f98 <z_check_stack_sentinel+0x28>)
   33f72:	689b      	ldr	r3, [r3, #8]
   33f74:	7b5a      	ldrb	r2, [r3, #13]
   33f76:	07d2      	lsls	r2, r2, #31
   33f78:	d40d      	bmi.n	33f96 <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (uint32_t *)_current->stack_info.start;
   33f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
	if (*stack != STACK_SENTINEL) {
   33f7c:	681a      	ldr	r2, [r3, #0]
   33f7e:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   33f82:	d008      	beq.n	33f96 <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   33f84:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   33f88:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   33f8a:	4040      	eors	r0, r0
   33f8c:	f380 8811 	msr	BASEPRI, r0
   33f90:	f04f 0002 	mov.w	r0, #2
   33f94:	df02      	svc	2
	}
}
   33f96:	4770      	bx	lr
   33f98:	20023ef8 	.word	0x20023ef8

00033f9c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   33f9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   33fa0:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   33fa4:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   33fa8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   33faa:	3207      	adds	r2, #7
	thread_base->user_options = (uint8_t)options;
   33fac:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   33fae:	2504      	movs	r5, #4
   33fb0:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   33fb2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   33fb4:	f022 0607 	bic.w	r6, r2, #7
	thread_base->prio = priority;
   33fb8:	7385      	strb	r5, [r0, #14]
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
   33fba:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0

	thread_base->sched_locked = 0U;
   33fbe:	2500      	movs	r5, #0
{
   33fc0:	4604      	mov	r4, r0
	node->prev = NULL;
   33fc2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   33fc6:	73c5      	strb	r5, [r0, #15]
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
   33fc8:	600a      	str	r2, [r1, #0]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33fca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	new_thread->stack_info.size = stack_buf_size;
   33fcc:	e9c0 161b 	strd	r1, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   33fd0:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33fd2:	9202      	str	r2, [sp, #8]
   33fd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   33fd6:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33fda:	9201      	str	r2, [sp, #4]
   33fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   33fde:	9200      	str	r2, [sp, #0]
   33fe0:	4642      	mov	r2, r8
   33fe2:	f7f1 f831 	bl	25048 <arch_new_thread>
	if (!_current) {
   33fe6:	4b05      	ldr	r3, [pc, #20]	; (33ffc <z_setup_new_thread+0x60>)
	new_thread->fn_abort = NULL;
   33fe8:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   33fec:	689b      	ldr	r3, [r3, #8]
   33fee:	b103      	cbz	r3, 33ff2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   33ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
   33ff2:	4640      	mov	r0, r8
   33ff4:	67a3      	str	r3, [r4, #120]	; 0x78
   33ff6:	b004      	add	sp, #16
   33ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33ffc:	20023ef8 	.word	0x20023ef8

00034000 <z_impl_k_thread_create>:
{
   34000:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   34002:	2500      	movs	r5, #0
{
   34004:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   34006:	9505      	str	r5, [sp, #20]
   34008:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   3400a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3400e:	9504      	str	r5, [sp, #16]
   34010:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   34012:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   34014:	9503      	str	r5, [sp, #12]
   34016:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   34018:	9502      	str	r5, [sp, #8]
   3401a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   3401c:	9501      	str	r5, [sp, #4]
   3401e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   34020:	9500      	str	r5, [sp, #0]
   34022:	f7ff ffbb 	bl	33f9c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   34026:	1c7b      	adds	r3, r7, #1
   34028:	bf08      	it	eq
   3402a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   3402e:	d005      	beq.n	3403c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   34030:	ea56 0307 	orrs.w	r3, r6, r7
   34034:	d105      	bne.n	34042 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   34036:	4620      	mov	r0, r4
   34038:	f7ff fc7e 	bl	33938 <z_sched_start>
}
   3403c:	4620      	mov	r0, r4
   3403e:	b007      	add	sp, #28
   34040:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   34042:	4632      	mov	r2, r6
   34044:	463b      	mov	r3, r7
   34046:	4903      	ldr	r1, [pc, #12]	; (34054 <z_impl_k_thread_create+0x54>)
   34048:	f104 0018 	add.w	r0, r4, #24
   3404c:	f000 f930 	bl	342b0 <z_add_timeout>
   34050:	e7f4      	b.n	3403c <z_impl_k_thread_create+0x3c>
   34052:	bf00      	nop
   34054:	000384b5 	.word	0x000384b5

00034058 <z_init_static_threads>:
{
   34058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   3405c:	4e2a      	ldr	r6, [pc, #168]	; (34108 <z_init_static_threads+0xb0>)
   3405e:	4d2b      	ldr	r5, [pc, #172]	; (3410c <z_init_static_threads+0xb4>)
   34060:	46b0      	mov	r8, r6
{
   34062:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   34064:	42b5      	cmp	r5, r6
   34066:	f105 0430 	add.w	r4, r5, #48	; 0x30
   3406a:	d310      	bcc.n	3408e <z_init_static_threads+0x36>
	k_sched_lock();
   3406c:	f7ff fbbe 	bl	337ec <k_sched_lock>
   34070:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   34074:	f240 36e7 	movw	r6, #999	; 0x3e7
   34078:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   3407a:	4c24      	ldr	r4, [pc, #144]	; (3410c <z_init_static_threads+0xb4>)
   3407c:	f8df a090 	ldr.w	sl, [pc, #144]	; 34110 <z_init_static_threads+0xb8>
   34080:	4544      	cmp	r4, r8
   34082:	d321      	bcc.n	340c8 <z_init_static_threads+0x70>
}
   34084:	b006      	add	sp, #24
   34086:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   3408a:	f7ff bc01 	b.w	33890 <k_sched_unlock>
		z_setup_new_thread(
   3408e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   34092:	9305      	str	r3, [sp, #20]
   34094:	f854 3c10 	ldr.w	r3, [r4, #-16]
   34098:	9304      	str	r3, [sp, #16]
   3409a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3409e:	9303      	str	r3, [sp, #12]
   340a0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   340a4:	9302      	str	r3, [sp, #8]
   340a6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   340aa:	9301      	str	r3, [sp, #4]
   340ac:	f854 3c20 	ldr.w	r3, [r4, #-32]
   340b0:	9300      	str	r3, [sp, #0]
   340b2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   340b6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   340ba:	f7ff ff6f 	bl	33f9c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   340be:	f854 3c30 	ldr.w	r3, [r4, #-48]
   340c2:	65dd      	str	r5, [r3, #92]	; 0x5c
   340c4:	4625      	mov	r5, r4
   340c6:	e7cd      	b.n	34064 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   340c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   340ca:	1c5a      	adds	r2, r3, #1
   340cc:	d00d      	beq.n	340ea <z_init_static_threads+0x92>
   340ce:	4630      	mov	r0, r6
   340d0:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   340d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   340d6:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   340da:	42b9      	cmp	r1, r7
   340dc:	bf08      	it	eq
   340de:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   340e0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   340e2:	d104      	bne.n	340ee <z_init_static_threads+0x96>
	z_sched_start(thread);
   340e4:	4628      	mov	r0, r5
   340e6:	f7ff fc27 	bl	33938 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   340ea:	3430      	adds	r4, #48	; 0x30
   340ec:	e7c8      	b.n	34080 <z_init_static_threads+0x28>
   340ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   340f2:	2300      	movs	r3, #0
   340f4:	f7e8 fb60 	bl	1c7b8 <__aeabi_uldivmod>
   340f8:	4602      	mov	r2, r0
   340fa:	460b      	mov	r3, r1
   340fc:	f105 0018 	add.w	r0, r5, #24
   34100:	4651      	mov	r1, sl
   34102:	f000 f8d5 	bl	342b0 <z_add_timeout>
   34106:	e7f0      	b.n	340ea <z_init_static_threads+0x92>
   34108:	2002071c 	.word	0x2002071c
   3410c:	2002071c 	.word	0x2002071c
   34110:	000384b5 	.word	0x000384b5

00034114 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   34114:	b508      	push	{r3, lr}
	__asm__ volatile(
   34116:	f04f 0320 	mov.w	r3, #32
   3411a:	f3ef 8411 	mrs	r4, BASEPRI
   3411e:	f383 8811 	msr	BASEPRI, r3
   34122:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   34126:	4b05      	ldr	r3, [pc, #20]	; (3413c <z_self_abort+0x28>)
   34128:	6898      	ldr	r0, [r3, #8]
   3412a:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   3412c:	f7ff fcbc 	bl	33aa8 <z_impl_k_thread_suspend>
	z_check_stack_sentinel();
   34130:	f7ff ff1e 	bl	33f70 <z_check_stack_sentinel>
	ret = arch_swap(key);
   34134:	4620      	mov	r0, r4
   34136:	f7f0 fead 	bl	24e94 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   3413a:	bf00      	nop
   3413c:	20023ef8 	.word	0x20023ef8

00034140 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   34140:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   34144:	b08a      	sub	sp, #40	; 0x28
   34146:	4604      	mov	r4, r0
   34148:	461d      	mov	r5, r3
   3414a:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   3414e:	f004 f915 	bl	3837c <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   34152:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   34156:	2000      	movs	r0, #0
   34158:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   3415c:	f04f 0800 	mov.w	r8, #0
   34160:	f04f 0900 	mov.w	r9, #0
   34164:	e9cd 5003 	strd	r5, r0, [sp, #12]
   34168:	e9cd 0001 	strd	r0, r0, [sp, #4]
   3416c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   34170:	4630      	mov	r0, r6
   34172:	4b05      	ldr	r3, [pc, #20]	; (34188 <k_work_q_start+0x48>)
   34174:	9400      	str	r4, [sp, #0]
   34176:	f7ff ff43 	bl	34000 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   3417a:	4630      	mov	r0, r6
   3417c:	4903      	ldr	r1, [pc, #12]	; (3418c <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   3417e:	b00a      	add	sp, #40	; 0x28
   34180:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   34184:	f004 ba30 	b.w	385e8 <z_impl_k_thread_name_set>
   34188:	00035905 	.word	0x00035905
   3418c:	0003d1d1 	.word	0x0003d1d1

00034190 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   34190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   34194:	4606      	mov	r6, r0
   34196:	460d      	mov	r5, r1
   34198:	4690      	mov	r8, r2
   3419a:	4699      	mov	r9, r3
   3419c:	f04f 0320 	mov.w	r3, #32
   341a0:	f3ef 8711 	mrs	r7, BASEPRI
   341a4:	f383 8811 	msr	BASEPRI, r3
   341a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   341ac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   341ae:	b17b      	cbz	r3, 341d0 <k_delayed_work_submit_to_queue+0x40>
   341b0:	4283      	cmp	r3, r0
   341b2:	d128      	bne.n	34206 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   341b4:	4628      	mov	r0, r5
   341b6:	f004 fa35 	bl	38624 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   341ba:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   341be:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   341c0:	d008      	beq.n	341d4 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   341c2:	2800      	cmp	r0, #0
   341c4:	da07      	bge.n	341d6 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   341c6:	f387 8811 	msr	BASEPRI, r7
   341ca:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   341ce:	e00f      	b.n	341f0 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   341d0:	2800      	cmp	r0, #0
   341d2:	d0ef      	beq.n	341b4 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   341d4:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   341d6:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   341da:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   341dc:	d10b      	bne.n	341f6 <k_delayed_work_submit_to_queue+0x66>
   341de:	f387 8811 	msr	BASEPRI, r7
   341e2:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   341e6:	4629      	mov	r1, r5
   341e8:	4630      	mov	r0, r6
   341ea:	f004 fa02 	bl	385f2 <k_work_submit_to_queue>
		return 0;
   341ee:	2400      	movs	r4, #0
}
   341f0:	4620      	mov	r0, r4
   341f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   341f6:	4642      	mov	r2, r8
   341f8:	464b      	mov	r3, r9
   341fa:	4904      	ldr	r1, [pc, #16]	; (3420c <k_delayed_work_submit_to_queue+0x7c>)
   341fc:	f105 0010 	add.w	r0, r5, #16
   34200:	f000 f856 	bl	342b0 <z_add_timeout>
   34204:	e7df      	b.n	341c6 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   34206:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   3420a:	e7dc      	b.n	341c6 <k_delayed_work_submit_to_queue+0x36>
   3420c:	0003861b 	.word	0x0003861b

00034210 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   34210:	4b03      	ldr	r3, [pc, #12]	; (34220 <elapsed+0x10>)
   34212:	681b      	ldr	r3, [r3, #0]
   34214:	b90b      	cbnz	r3, 3421a <elapsed+0xa>
   34216:	f7f0 bd4f 	b.w	24cb8 <z_clock_elapsed>
}
   3421a:	2000      	movs	r0, #0
   3421c:	4770      	bx	lr
   3421e:	bf00      	nop
   34220:	20023f3c 	.word	0x20023f3c

00034224 <remove_timeout>:
{
   34224:	b530      	push	{r4, r5, lr}
   34226:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   34228:	b168      	cbz	r0, 34246 <remove_timeout+0x22>
   3422a:	4a0a      	ldr	r2, [pc, #40]	; (34254 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   3422c:	6852      	ldr	r2, [r2, #4]
   3422e:	4290      	cmp	r0, r2
   34230:	d009      	beq.n	34246 <remove_timeout+0x22>
	if (next(t) != NULL) {
   34232:	b143      	cbz	r3, 34246 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   34234:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   34238:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   3423c:	1912      	adds	r2, r2, r4
   3423e:	eb45 0101 	adc.w	r1, r5, r1
   34242:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   34246:	6842      	ldr	r2, [r0, #4]
   34248:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3424a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3424c:	2300      	movs	r3, #0
	node->prev = NULL;
   3424e:	e9c0 3300 	strd	r3, r3, [r0]
}
   34252:	bd30      	pop	{r4, r5, pc}
   34254:	2002045c 	.word	0x2002045c

00034258 <next_timeout>:
	return list->head == list;
   34258:	4b13      	ldr	r3, [pc, #76]	; (342a8 <next_timeout+0x50>)

static int32_t next_timeout(void)
{
   3425a:	b510      	push	{r4, lr}
   3425c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3425e:	429c      	cmp	r4, r3
   34260:	bf08      	it	eq
   34262:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   34264:	f7ff ffd4 	bl	34210 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   34268:	b1cc      	cbz	r4, 3429e <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   3426a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   3426e:	1a12      	subs	r2, r2, r0
   34270:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   34274:	2a01      	cmp	r2, #1
   34276:	f173 0100 	sbcs.w	r1, r3, #0
   3427a:	db13      	blt.n	342a4 <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   3427c:	4610      	mov	r0, r2
   3427e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   34282:	4619      	mov	r1, r3
   34284:	2300      	movs	r3, #0
   34286:	4282      	cmp	r2, r0
   34288:	eb73 0401 	sbcs.w	r4, r3, r1
   3428c:	da00      	bge.n	34290 <next_timeout+0x38>
   3428e:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   34290:	4b06      	ldr	r3, [pc, #24]	; (342ac <next_timeout+0x54>)
   34292:	695b      	ldr	r3, [r3, #20]
   34294:	b113      	cbz	r3, 3429c <next_timeout+0x44>
   34296:	4298      	cmp	r0, r3
   34298:	bfa8      	it	ge
   3429a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3429c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   3429e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   342a2:	e7f5      	b.n	34290 <next_timeout+0x38>
   342a4:	2000      	movs	r0, #0
   342a6:	e7f3      	b.n	34290 <next_timeout+0x38>
   342a8:	2002045c 	.word	0x2002045c
   342ac:	20023ef8 	.word	0x20023ef8

000342b0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   342b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   342b4:	9101      	str	r1, [sp, #4]
   342b6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   342b8:	1c4b      	adds	r3, r1, #1
   342ba:	bf08      	it	eq
   342bc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   342c0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   342c2:	d06b      	beq.n	3439c <z_add_timeout+0xec>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   342c4:	f06f 0301 	mvn.w	r3, #1
   342c8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
   342cc:	1c54      	adds	r4, r2, #1
   342ce:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   342d2:	ebb3 0804 	subs.w	r8, r3, r4
   342d6:	eb6b 0905 	sbc.w	r9, fp, r5
   342da:	f1b8 0f00 	cmp.w	r8, #0
   342de:	f179 0300 	sbcs.w	r3, r9, #0
   342e2:	db0f      	blt.n	34304 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   342e4:	f7ff ff94 	bl	34210 <elapsed>
   342e8:	f06f 0301 	mvn.w	r3, #1
   342ec:	4a32      	ldr	r2, [pc, #200]	; (343b8 <z_add_timeout+0x108>)
   342ee:	e9d2 1c00 	ldrd	r1, ip, [r2]
   342f2:	1a5b      	subs	r3, r3, r1
   342f4:	eb6b 020c 	sbc.w	r2, fp, ip
   342f8:	1b1e      	subs	r6, r3, r4
   342fa:	eb62 0705 	sbc.w	r7, r2, r5
   342fe:	1a34      	subs	r4, r6, r0
   34300:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   34304:	9b01      	ldr	r3, [sp, #4]
   34306:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   3430a:	f04f 0320 	mov.w	r3, #32
   3430e:	f3ef 8611 	mrs	r6, BASEPRI
   34312:	f383 8811 	msr	BASEPRI, r3
   34316:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   3431a:	f7ff ff79 	bl	34210 <elapsed>
	ticks = MAX(1, ticks);
   3431e:	2c01      	cmp	r4, #1
   34320:	f175 0300 	sbcs.w	r3, r5, #0
   34324:	bfbc      	itt	lt
   34326:	2401      	movlt	r4, #1
   34328:	2500      	movlt	r5, #0
	return list->head == list;
   3432a:	4b24      	ldr	r3, [pc, #144]	; (343bc <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
   3432c:	1824      	adds	r4, r4, r0
   3432e:	681a      	ldr	r2, [r3, #0]
   34330:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34334:	429a      	cmp	r2, r3
   34336:	e9ca 4504 	strd	r4, r5, [sl, #16]
   3433a:	d001      	beq.n	34340 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3433c:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   3433e:	b952      	cbnz	r2, 34356 <z_add_timeout+0xa6>
	node->prev = list->tail;
   34340:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   34342:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   34346:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   3434a:	685a      	ldr	r2, [r3, #4]
   3434c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   34350:	f8c3 a004 	str.w	sl, [r3, #4]
}
   34354:	e014      	b.n	34380 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   34356:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   3435a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   3435e:	4544      	cmp	r4, r8
   34360:	eb75 0109 	sbcs.w	r1, r5, r9
   34364:	da1d      	bge.n	343a2 <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
   34366:	ebb8 0004 	subs.w	r0, r8, r4
   3436a:	eb69 0105 	sbc.w	r1, r9, r5
   3436e:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   34372:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   34374:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   34378:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   3437c:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   34380:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34382:	429a      	cmp	r2, r3
   34384:	d006      	beq.n	34394 <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   34386:	4592      	cmp	sl, r2
   34388:	d104      	bne.n	34394 <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
   3438a:	f7ff ff65 	bl	34258 <next_timeout>
   3438e:	2100      	movs	r1, #0
   34390:	f7f0 fc2a 	bl	24be8 <z_clock_set_timeout>
	__asm__ volatile(
   34394:	f386 8811 	msr	BASEPRI, r6
   34398:	f3bf 8f6f 	isb	sy
		}
	}
}
   3439c:	b003      	add	sp, #12
   3439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   343a2:	ebb4 0008 	subs.w	r0, r4, r8
   343a6:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   343aa:	42ba      	cmp	r2, r7
   343ac:	e9ca 0104 	strd	r0, r1, [sl, #16]
   343b0:	d0c6      	beq.n	34340 <z_add_timeout+0x90>
   343b2:	6812      	ldr	r2, [r2, #0]
   343b4:	e7c3      	b.n	3433e <z_add_timeout+0x8e>
   343b6:	bf00      	nop
   343b8:	20023300 	.word	0x20023300
   343bc:	2002045c 	.word	0x2002045c

000343c0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   343c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   343c4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   343c6:	f7ff fb2d 	bl	33a24 <z_time_slice>
	__asm__ volatile(
   343ca:	f04f 0320 	mov.w	r3, #32
   343ce:	f3ef 8411 	mrs	r4, BASEPRI
   343d2:	f383 8811 	msr	BASEPRI, r3
   343d6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   343da:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3448c <z_clock_announce+0xcc>
   343de:	4d2a      	ldr	r5, [pc, #168]	; (34488 <z_clock_announce+0xc8>)
   343e0:	4651      	mov	r1, sl
	return list->head == list;
   343e2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 34490 <z_clock_announce+0xd0>
   343e6:	602e      	str	r6, [r5, #0]
   343e8:	f8d5 c000 	ldr.w	ip, [r5]
   343ec:	f8db 0000 	ldr.w	r0, [fp]
   343f0:	4662      	mov	r2, ip
   343f2:	e9da 8900 	ldrd	r8, r9, [sl]
   343f6:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   343f8:	4558      	cmp	r0, fp
   343fa:	e9cd 2300 	strd	r2, r3, [sp]
   343fe:	d00d      	beq.n	3441c <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   34400:	b160      	cbz	r0, 3441c <z_clock_announce+0x5c>
   34402:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   34406:	45b4      	cmp	ip, r6
   34408:	41bb      	sbcs	r3, r7
   3440a:	da1d      	bge.n	34448 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   3440c:	9b00      	ldr	r3, [sp, #0]
   3440e:	ebb6 0c03 	subs.w	ip, r6, r3
   34412:	9b01      	ldr	r3, [sp, #4]
   34414:	eb67 0603 	sbc.w	r6, r7, r3
   34418:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   3441c:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   3441e:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   34420:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   34422:	eb13 0208 	adds.w	r2, r3, r8
   34426:	9b01      	ldr	r3, [sp, #4]
   34428:	eb43 0309 	adc.w	r3, r3, r9
   3442c:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   34430:	f7ff ff12 	bl	34258 <next_timeout>
   34434:	4631      	mov	r1, r6
   34436:	f7f0 fbd7 	bl	24be8 <z_clock_set_timeout>
	__asm__ volatile(
   3443a:	f384 8811 	msr	BASEPRI, r4
   3443e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   34442:	b003      	add	sp, #12
   34444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   34448:	2200      	movs	r2, #0
   3444a:	2300      	movs	r3, #0
		curr_tick += dt;
   3444c:	eb18 0806 	adds.w	r8, r8, r6
   34450:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   34454:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   34458:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   3445c:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   34460:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   34462:	f7ff fedf 	bl	34224 <remove_timeout>
   34466:	f384 8811 	msr	BASEPRI, r4
   3446a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3446e:	6883      	ldr	r3, [r0, #8]
   34470:	4798      	blx	r3
	__asm__ volatile(
   34472:	f04f 0320 	mov.w	r3, #32
   34476:	f3ef 8411 	mrs	r4, BASEPRI
   3447a:	f383 8811 	msr	BASEPRI, r3
   3447e:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   34482:	4902      	ldr	r1, [pc, #8]	; (3448c <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   34484:	e7b0      	b.n	343e8 <z_clock_announce+0x28>
   34486:	bf00      	nop
   34488:	20023f3c 	.word	0x20023f3c
   3448c:	20023300 	.word	0x20023300
   34490:	2002045c 	.word	0x2002045c

00034494 <z_tick_get>:

int64_t z_tick_get(void)
{
   34494:	b510      	push	{r4, lr}
   34496:	f04f 0320 	mov.w	r3, #32
   3449a:	f3ef 8411 	mrs	r4, BASEPRI
   3449e:	f383 8811 	msr	BASEPRI, r3
   344a2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   344a6:	f7f0 fc07 	bl	24cb8 <z_clock_elapsed>
   344aa:	4b06      	ldr	r3, [pc, #24]	; (344c4 <z_tick_get+0x30>)
   344ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   344b0:	1812      	adds	r2, r2, r0
   344b2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   344b6:	f384 8811 	msr	BASEPRI, r4
   344ba:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   344be:	4610      	mov	r0, r2
   344c0:	4619      	mov	r1, r3
   344c2:	bd10      	pop	{r4, pc}
   344c4:	20023300 	.word	0x20023300

000344c8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   344c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   344ca:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   344ce:	1c56      	adds	r6, r2, #1
   344d0:	f143 0700 	adc.w	r7, r3, #0
   344d4:	2f00      	cmp	r7, #0
   344d6:	bf08      	it	eq
   344d8:	2e02      	cmpeq	r6, #2
{
   344da:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   344dc:	d302      	bcc.n	344e4 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   344de:	490c      	ldr	r1, [pc, #48]	; (34510 <z_timer_expiration_handler+0x48>)
   344e0:	f7ff fee6 	bl	342b0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   344e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   344e6:	3301      	adds	r3, #1
   344e8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   344ea:	6a23      	ldr	r3, [r4, #32]
   344ec:	b10b      	cbz	r3, 344f2 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   344ee:	4620      	mov	r0, r4
   344f0:	4798      	blx	r3
	return list->head == list;
   344f2:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   344f6:	42a5      	cmp	r5, r4
   344f8:	d009      	beq.n	3450e <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   344fa:	b145      	cbz	r5, 3450e <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   344fc:	4628      	mov	r0, r5
   344fe:	f003 ff77 	bl	383f0 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   34502:	4628      	mov	r0, r5
   34504:	f003 ffc6 	bl	38494 <z_ready_thread>
   34508:	2300      	movs	r3, #0
   3450a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   3450e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34510:	000344c9 	.word	0x000344c9

00034514 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   34514:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   34518:	4619      	mov	r1, r3
   3451a:	4606      	mov	r6, r0
   3451c:	4610      	mov	r0, r2
   3451e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   34522:	1c4c      	adds	r4, r1, #1
   34524:	bf08      	it	eq
   34526:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   3452a:	4680      	mov	r8, r0
   3452c:	4689      	mov	r9, r1
   3452e:	d047      	beq.n	345c0 <z_impl_k_timer_start+0xac>
   34530:	4614      	mov	r4, r2
   34532:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   34534:	ea54 0305 	orrs.w	r3, r4, r5
   34538:	d016      	beq.n	34568 <z_impl_k_timer_start+0x54>
   3453a:	f06f 0301 	mvn.w	r3, #1
   3453e:	ebb3 0a02 	subs.w	sl, r3, r2
   34542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   34546:	eb63 0b05 	sbc.w	fp, r3, r5
   3454a:	f1ba 0f00 	cmp.w	sl, #0
   3454e:	f17b 0300 	sbcs.w	r3, fp, #0
   34552:	da09      	bge.n	34568 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   34554:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   34558:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   3455c:	2c01      	cmp	r4, #1
   3455e:	f175 0300 	sbcs.w	r3, r5, #0
   34562:	bfbc      	itt	lt
   34564:	2401      	movlt	r4, #1
   34566:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   34568:	f06f 0301 	mvn.w	r3, #1
   3456c:	1a1b      	subs	r3, r3, r0
   3456e:	9300      	str	r3, [sp, #0]
   34570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   34574:	eb63 0301 	sbc.w	r3, r3, r1
   34578:	9301      	str	r3, [sp, #4]
   3457a:	e9dd 2300 	ldrd	r2, r3, [sp]
   3457e:	2a00      	cmp	r2, #0
   34580:	f173 0300 	sbcs.w	r3, r3, #0
   34584:	da0c      	bge.n	345a0 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   34586:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   3458a:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   3458e:	f1b8 0f00 	cmp.w	r8, #0
   34592:	f179 0300 	sbcs.w	r3, r9, #0
   34596:	bfbc      	itt	lt
   34598:	f04f 0800 	movlt.w	r8, #0
   3459c:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   345a0:	4630      	mov	r0, r6
   345a2:	f004 f887 	bl	386b4 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   345a6:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   345a8:	4642      	mov	r2, r8
	timer->status = 0U;
   345aa:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   345ac:	4630      	mov	r0, r6
   345ae:	464b      	mov	r3, r9
   345b0:	4905      	ldr	r1, [pc, #20]	; (345c8 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   345b2:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   345b6:	b002      	add	sp, #8
   345b8:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   345bc:	f7ff be78 	b.w	342b0 <z_add_timeout>
}
   345c0:	b002      	add	sp, #8
   345c2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   345c6:	bf00      	nop
   345c8:	000344c9 	.word	0x000344c9

000345cc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   345cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   345d0:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   345d2:	4b2a      	ldr	r3, [pc, #168]	; (3467c <z_impl_k_poll+0xb0>)
{
   345d4:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   345d6:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   345d8:	2301      	movs	r3, #1
   345da:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   345de:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   345e2:	ea52 0307 	orrs.w	r3, r2, r7
   345e6:	bf0c      	ite	eq
   345e8:	2301      	moveq	r3, #1
   345ea:	2300      	movne	r3, #0
   345ec:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   345f0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   345f2:	f004 f9e0 	bl	389b6 <register_events>
   345f6:	4681      	mov	r9, r0
	__asm__ volatile(
   345f8:	f04f 0320 	mov.w	r3, #32
   345fc:	f3ef 8a11 	mrs	sl, BASEPRI
   34600:	f383 8811 	msr	BASEPRI, r3
   34604:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   34608:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   3460c:	b964      	cbnz	r4, 34628 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   3460e:	4601      	mov	r1, r0
   34610:	4652      	mov	r2, sl
   34612:	4640      	mov	r0, r8
   34614:	f004 f8fd 	bl	38812 <clear_event_registrations>
	__asm__ volatile(
   34618:	f38a 8811 	msr	BASEPRI, sl
   3461c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   34620:	4620      	mov	r0, r4
   34622:	b004      	add	sp, #16
   34624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   34628:	2300      	movs	r3, #0
   3462a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3462e:	ea56 0307 	orrs.w	r3, r6, r7
   34632:	d106      	bne.n	34642 <z_impl_k_poll+0x76>
   34634:	f38a 8811 	msr	BASEPRI, sl
   34638:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3463c:	f06f 040a 	mvn.w	r4, #10
   34640:	e7ee      	b.n	34620 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   34642:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   34644:	4651      	mov	r1, sl
   34646:	e9cd 6700 	strd	r6, r7, [sp]
   3464a:	480d      	ldr	r0, [pc, #52]	; (34680 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3464c:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   34650:	f7ff fb20 	bl	33c94 <z_pend_curr>
   34654:	4604      	mov	r4, r0
	__asm__ volatile(
   34656:	f04f 0320 	mov.w	r3, #32
   3465a:	f3ef 8511 	mrs	r5, BASEPRI
   3465e:	f383 8811 	msr	BASEPRI, r3
   34662:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   34666:	462a      	mov	r2, r5
   34668:	4649      	mov	r1, r9
   3466a:	4640      	mov	r0, r8
   3466c:	f004 f8d1 	bl	38812 <clear_event_registrations>
	__asm__ volatile(
   34670:	f385 8811 	msr	BASEPRI, r5
   34674:	f3bf 8f6f 	isb	sy
	return swap_rc;
   34678:	e7d2      	b.n	34620 <z_impl_k_poll+0x54>
   3467a:	bf00      	nop
   3467c:	20023ef8 	.word	0x20023ef8
   34680:	2002c6e8 	.word	0x2002c6e8

00034684 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   34684:	b538      	push	{r3, r4, r5, lr}
   34686:	4603      	mov	r3, r0
	__asm__ volatile(
   34688:	f04f 0220 	mov.w	r2, #32
   3468c:	f3ef 8511 	mrs	r5, BASEPRI
   34690:	f382 8811 	msr	BASEPRI, r2
   34694:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   34698:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   3469a:	2101      	movs	r1, #1
   3469c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   3469e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   346a0:	4283      	cmp	r3, r0
   346a2:	d106      	bne.n	346b2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   346a4:	f385 8811 	msr	BASEPRI, r5
   346a8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   346ac:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   346ae:	4620      	mov	r0, r4
   346b0:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   346b2:	e9d0 3200 	ldrd	r3, r2, [r0]
   346b6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   346b8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   346ba:	2300      	movs	r3, #0
	node->prev = NULL;
   346bc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   346c0:	f004 f8e6 	bl	38890 <signal_poll_event>
	z_reschedule(&lock, key);
   346c4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   346c6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   346c8:	4801      	ldr	r0, [pc, #4]	; (346d0 <z_impl_k_poll_signal_raise+0x4c>)
   346ca:	f7ff f87d 	bl	337c8 <z_reschedule>
	return rc;
   346ce:	e7ee      	b.n	346ae <z_impl_k_poll_signal_raise+0x2a>
   346d0:	2002c6e8 	.word	0x2002c6e8

000346d4 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   346d4:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   346d6:	4801      	ldr	r0, [pc, #4]	; (346dc <k_malloc+0x8>)
   346d8:	f004 b9dc 	b.w	38a94 <k_mem_pool_malloc>
   346dc:	20020464 	.word	0x20020464

000346e0 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   346e0:	b507      	push	{r0, r1, r2, lr}
   346e2:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   346e4:	f003 ff76 	bl	385d4 <k_is_in_isr>
   346e8:	9901      	ldr	r1, [sp, #4]
   346ea:	b948      	cbnz	r0, 34700 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   346ec:	4b07      	ldr	r3, [pc, #28]	; (3470c <z_thread_malloc+0x2c>)
   346ee:	689b      	ldr	r3, [r3, #8]
   346f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (pool) {
   346f2:	b13b      	cbz	r3, 34704 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   346f4:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   346f6:	b003      	add	sp, #12
   346f8:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   346fc:	f004 b9ca 	b.w	38a94 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   34700:	4b03      	ldr	r3, [pc, #12]	; (34710 <z_thread_malloc+0x30>)
   34702:	e7f7      	b.n	346f4 <z_thread_malloc+0x14>
}
   34704:	b003      	add	sp, #12
   34706:	f85d fb04 	ldr.w	pc, [sp], #4
   3470a:	bf00      	nop
   3470c:	20023ef8 	.word	0x20023ef8
   34710:	20020464 	.word	0x20020464

00034714 <_printf_float>:
   34714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34718:	ed2d 8b02 	vpush	{d8}
   3471c:	b08d      	sub	sp, #52	; 0x34
   3471e:	460c      	mov	r4, r1
   34720:	4616      	mov	r6, r2
   34722:	461f      	mov	r7, r3
   34724:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   34728:	4605      	mov	r5, r0
   3472a:	f000 fcd7 	bl	350dc <_localeconv_r>
   3472e:	f8d0 a000 	ldr.w	sl, [r0]
   34732:	4650      	mov	r0, sl
   34734:	f7e8 fc9c 	bl	1d070 <strlen>
   34738:	2300      	movs	r3, #0
   3473a:	f894 b018 	ldrb.w	fp, [r4, #24]
   3473e:	ee08 0a10 	vmov	s16, r0
   34742:	930a      	str	r3, [sp, #40]	; 0x28
   34744:	6823      	ldr	r3, [r4, #0]
   34746:	9305      	str	r3, [sp, #20]
   34748:	f8d8 3000 	ldr.w	r3, [r8]
   3474c:	3307      	adds	r3, #7
   3474e:	f023 0307 	bic.w	r3, r3, #7
   34752:	f103 0208 	add.w	r2, r3, #8
   34756:	f8c8 2000 	str.w	r2, [r8]
   3475a:	e9d3 2300 	ldrd	r2, r3, [r3]
   3475e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   34762:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   34766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3476a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   3476e:	f8cd 8018 	str.w	r8, [sp, #24]
   34772:	9307      	str	r3, [sp, #28]
   34774:	4b9e      	ldr	r3, [pc, #632]	; (349f0 <_printf_float+0x2dc>)
   34776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   3477a:	f7e8 fc31 	bl	1cfe0 <__aeabi_dcmpun>
   3477e:	bb88      	cbnz	r0, 347e4 <_printf_float+0xd0>
   34780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   34784:	4b9a      	ldr	r3, [pc, #616]	; (349f0 <_printf_float+0x2dc>)
   34786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   3478a:	f7e8 fc0b 	bl	1cfa4 <__aeabi_dcmple>
   3478e:	bb48      	cbnz	r0, 347e4 <_printf_float+0xd0>
   34790:	2200      	movs	r2, #0
   34792:	2300      	movs	r3, #0
   34794:	4640      	mov	r0, r8
   34796:	4649      	mov	r1, r9
   34798:	f7e8 fbfa 	bl	1cf90 <__aeabi_dcmplt>
   3479c:	b110      	cbz	r0, 347a4 <_printf_float+0x90>
   3479e:	232d      	movs	r3, #45	; 0x2d
   347a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   347a4:	4b93      	ldr	r3, [pc, #588]	; (349f4 <_printf_float+0x2e0>)
   347a6:	4894      	ldr	r0, [pc, #592]	; (349f8 <_printf_float+0x2e4>)
   347a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   347ac:	bf94      	ite	ls
   347ae:	4698      	movls	r8, r3
   347b0:	4680      	movhi	r8, r0
   347b2:	2303      	movs	r3, #3
   347b4:	f04f 0900 	mov.w	r9, #0
   347b8:	6123      	str	r3, [r4, #16]
   347ba:	9b05      	ldr	r3, [sp, #20]
   347bc:	f023 0204 	bic.w	r2, r3, #4
   347c0:	6022      	str	r2, [r4, #0]
   347c2:	4633      	mov	r3, r6
   347c4:	aa0b      	add	r2, sp, #44	; 0x2c
   347c6:	4621      	mov	r1, r4
   347c8:	4628      	mov	r0, r5
   347ca:	9700      	str	r7, [sp, #0]
   347cc:	f004 fa7f 	bl	38cce <_printf_common>
   347d0:	3001      	adds	r0, #1
   347d2:	f040 8090 	bne.w	348f6 <_printf_float+0x1e2>
   347d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   347da:	b00d      	add	sp, #52	; 0x34
   347dc:	ecbd 8b02 	vpop	{d8}
   347e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   347e4:	4642      	mov	r2, r8
   347e6:	464b      	mov	r3, r9
   347e8:	4640      	mov	r0, r8
   347ea:	4649      	mov	r1, r9
   347ec:	f7e8 fbf8 	bl	1cfe0 <__aeabi_dcmpun>
   347f0:	b140      	cbz	r0, 34804 <_printf_float+0xf0>
   347f2:	464b      	mov	r3, r9
   347f4:	4881      	ldr	r0, [pc, #516]	; (349fc <_printf_float+0x2e8>)
   347f6:	2b00      	cmp	r3, #0
   347f8:	bfbc      	itt	lt
   347fa:	232d      	movlt	r3, #45	; 0x2d
   347fc:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   34800:	4b7f      	ldr	r3, [pc, #508]	; (34a00 <_printf_float+0x2ec>)
   34802:	e7d1      	b.n	347a8 <_printf_float+0x94>
   34804:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   34808:	6863      	ldr	r3, [r4, #4]
   3480a:	9206      	str	r2, [sp, #24]
   3480c:	1c5a      	adds	r2, r3, #1
   3480e:	d13f      	bne.n	34890 <_printf_float+0x17c>
   34810:	2306      	movs	r3, #6
   34812:	6063      	str	r3, [r4, #4]
   34814:	9b05      	ldr	r3, [sp, #20]
   34816:	4628      	mov	r0, r5
   34818:	6861      	ldr	r1, [r4, #4]
   3481a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   3481e:	2300      	movs	r3, #0
   34820:	9303      	str	r3, [sp, #12]
   34822:	ab0a      	add	r3, sp, #40	; 0x28
   34824:	6022      	str	r2, [r4, #0]
   34826:	e9cd b301 	strd	fp, r3, [sp, #4]
   3482a:	ab09      	add	r3, sp, #36	; 0x24
   3482c:	ec49 8b10 	vmov	d0, r8, r9
   34830:	9300      	str	r3, [sp, #0]
   34832:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   34836:	f004 f9aa 	bl	38b8e <__cvt>
   3483a:	9b06      	ldr	r3, [sp, #24]
   3483c:	4680      	mov	r8, r0
   3483e:	9909      	ldr	r1, [sp, #36]	; 0x24
   34840:	2b47      	cmp	r3, #71	; 0x47
   34842:	d108      	bne.n	34856 <_printf_float+0x142>
   34844:	1cc8      	adds	r0, r1, #3
   34846:	db02      	blt.n	3484e <_printf_float+0x13a>
   34848:	6863      	ldr	r3, [r4, #4]
   3484a:	4299      	cmp	r1, r3
   3484c:	dd41      	ble.n	348d2 <_printf_float+0x1be>
   3484e:	f1ab 0b02 	sub.w	fp, fp, #2
   34852:	fa5f fb8b 	uxtb.w	fp, fp
   34856:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3485a:	d820      	bhi.n	3489e <_printf_float+0x18a>
   3485c:	3901      	subs	r1, #1
   3485e:	465a      	mov	r2, fp
   34860:	f104 0050 	add.w	r0, r4, #80	; 0x50
   34864:	9109      	str	r1, [sp, #36]	; 0x24
   34866:	f004 f9f4 	bl	38c52 <__exponent>
   3486a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3486c:	4681      	mov	r9, r0
   3486e:	1813      	adds	r3, r2, r0
   34870:	2a01      	cmp	r2, #1
   34872:	6123      	str	r3, [r4, #16]
   34874:	dc02      	bgt.n	3487c <_printf_float+0x168>
   34876:	6822      	ldr	r2, [r4, #0]
   34878:	07d2      	lsls	r2, r2, #31
   3487a:	d501      	bpl.n	34880 <_printf_float+0x16c>
   3487c:	3301      	adds	r3, #1
   3487e:	6123      	str	r3, [r4, #16]
   34880:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   34884:	2b00      	cmp	r3, #0
   34886:	d09c      	beq.n	347c2 <_printf_float+0xae>
   34888:	232d      	movs	r3, #45	; 0x2d
   3488a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3488e:	e798      	b.n	347c2 <_printf_float+0xae>
   34890:	9a06      	ldr	r2, [sp, #24]
   34892:	2a47      	cmp	r2, #71	; 0x47
   34894:	d1be      	bne.n	34814 <_printf_float+0x100>
   34896:	2b00      	cmp	r3, #0
   34898:	d1bc      	bne.n	34814 <_printf_float+0x100>
   3489a:	2301      	movs	r3, #1
   3489c:	e7b9      	b.n	34812 <_printf_float+0xfe>
   3489e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   348a2:	d118      	bne.n	348d6 <_printf_float+0x1c2>
   348a4:	2900      	cmp	r1, #0
   348a6:	6863      	ldr	r3, [r4, #4]
   348a8:	dd0b      	ble.n	348c2 <_printf_float+0x1ae>
   348aa:	6121      	str	r1, [r4, #16]
   348ac:	b913      	cbnz	r3, 348b4 <_printf_float+0x1a0>
   348ae:	6822      	ldr	r2, [r4, #0]
   348b0:	07d0      	lsls	r0, r2, #31
   348b2:	d502      	bpl.n	348ba <_printf_float+0x1a6>
   348b4:	3301      	adds	r3, #1
   348b6:	440b      	add	r3, r1
   348b8:	6123      	str	r3, [r4, #16]
   348ba:	f04f 0900 	mov.w	r9, #0
   348be:	65a1      	str	r1, [r4, #88]	; 0x58
   348c0:	e7de      	b.n	34880 <_printf_float+0x16c>
   348c2:	b913      	cbnz	r3, 348ca <_printf_float+0x1b6>
   348c4:	6822      	ldr	r2, [r4, #0]
   348c6:	07d2      	lsls	r2, r2, #31
   348c8:	d501      	bpl.n	348ce <_printf_float+0x1ba>
   348ca:	3302      	adds	r3, #2
   348cc:	e7f4      	b.n	348b8 <_printf_float+0x1a4>
   348ce:	2301      	movs	r3, #1
   348d0:	e7f2      	b.n	348b8 <_printf_float+0x1a4>
   348d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
   348d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   348d8:	4299      	cmp	r1, r3
   348da:	db05      	blt.n	348e8 <_printf_float+0x1d4>
   348dc:	6823      	ldr	r3, [r4, #0]
   348de:	6121      	str	r1, [r4, #16]
   348e0:	07d8      	lsls	r0, r3, #31
   348e2:	d5ea      	bpl.n	348ba <_printf_float+0x1a6>
   348e4:	1c4b      	adds	r3, r1, #1
   348e6:	e7e7      	b.n	348b8 <_printf_float+0x1a4>
   348e8:	2900      	cmp	r1, #0
   348ea:	bfd4      	ite	le
   348ec:	f1c1 0202 	rsble	r2, r1, #2
   348f0:	2201      	movgt	r2, #1
   348f2:	4413      	add	r3, r2
   348f4:	e7e0      	b.n	348b8 <_printf_float+0x1a4>
   348f6:	6823      	ldr	r3, [r4, #0]
   348f8:	055a      	lsls	r2, r3, #21
   348fa:	d407      	bmi.n	3490c <_printf_float+0x1f8>
   348fc:	6923      	ldr	r3, [r4, #16]
   348fe:	4642      	mov	r2, r8
   34900:	4631      	mov	r1, r6
   34902:	4628      	mov	r0, r5
   34904:	47b8      	blx	r7
   34906:	3001      	adds	r0, #1
   34908:	d12c      	bne.n	34964 <_printf_float+0x250>
   3490a:	e764      	b.n	347d6 <_printf_float+0xc2>
   3490c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   34910:	f240 80e0 	bls.w	34ad4 <_printf_float+0x3c0>
   34914:	2200      	movs	r2, #0
   34916:	2300      	movs	r3, #0
   34918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3491c:	f7e8 fb2e 	bl	1cf7c <__aeabi_dcmpeq>
   34920:	2800      	cmp	r0, #0
   34922:	d034      	beq.n	3498e <_printf_float+0x27a>
   34924:	2301      	movs	r3, #1
   34926:	4a37      	ldr	r2, [pc, #220]	; (34a04 <_printf_float+0x2f0>)
   34928:	4631      	mov	r1, r6
   3492a:	4628      	mov	r0, r5
   3492c:	47b8      	blx	r7
   3492e:	3001      	adds	r0, #1
   34930:	f43f af51 	beq.w	347d6 <_printf_float+0xc2>
   34934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   34938:	429a      	cmp	r2, r3
   3493a:	db02      	blt.n	34942 <_printf_float+0x22e>
   3493c:	6823      	ldr	r3, [r4, #0]
   3493e:	07d8      	lsls	r0, r3, #31
   34940:	d510      	bpl.n	34964 <_printf_float+0x250>
   34942:	ee18 3a10 	vmov	r3, s16
   34946:	4652      	mov	r2, sl
   34948:	4631      	mov	r1, r6
   3494a:	4628      	mov	r0, r5
   3494c:	47b8      	blx	r7
   3494e:	3001      	adds	r0, #1
   34950:	f43f af41 	beq.w	347d6 <_printf_float+0xc2>
   34954:	f04f 0800 	mov.w	r8, #0
   34958:	f104 091a 	add.w	r9, r4, #26
   3495c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3495e:	3b01      	subs	r3, #1
   34960:	4543      	cmp	r3, r8
   34962:	dc09      	bgt.n	34978 <_printf_float+0x264>
   34964:	6823      	ldr	r3, [r4, #0]
   34966:	079b      	lsls	r3, r3, #30
   34968:	f100 8105 	bmi.w	34b76 <_printf_float+0x462>
   3496c:	68e0      	ldr	r0, [r4, #12]
   3496e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   34970:	4298      	cmp	r0, r3
   34972:	bfb8      	it	lt
   34974:	4618      	movlt	r0, r3
   34976:	e730      	b.n	347da <_printf_float+0xc6>
   34978:	2301      	movs	r3, #1
   3497a:	464a      	mov	r2, r9
   3497c:	4631      	mov	r1, r6
   3497e:	4628      	mov	r0, r5
   34980:	47b8      	blx	r7
   34982:	3001      	adds	r0, #1
   34984:	f43f af27 	beq.w	347d6 <_printf_float+0xc2>
   34988:	f108 0801 	add.w	r8, r8, #1
   3498c:	e7e6      	b.n	3495c <_printf_float+0x248>
   3498e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34990:	2b00      	cmp	r3, #0
   34992:	dc39      	bgt.n	34a08 <_printf_float+0x2f4>
   34994:	2301      	movs	r3, #1
   34996:	4a1b      	ldr	r2, [pc, #108]	; (34a04 <_printf_float+0x2f0>)
   34998:	4631      	mov	r1, r6
   3499a:	4628      	mov	r0, r5
   3499c:	47b8      	blx	r7
   3499e:	3001      	adds	r0, #1
   349a0:	f43f af19 	beq.w	347d6 <_printf_float+0xc2>
   349a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   349a8:	4313      	orrs	r3, r2
   349aa:	d102      	bne.n	349b2 <_printf_float+0x29e>
   349ac:	6823      	ldr	r3, [r4, #0]
   349ae:	07d9      	lsls	r1, r3, #31
   349b0:	d5d8      	bpl.n	34964 <_printf_float+0x250>
   349b2:	ee18 3a10 	vmov	r3, s16
   349b6:	4652      	mov	r2, sl
   349b8:	4631      	mov	r1, r6
   349ba:	4628      	mov	r0, r5
   349bc:	47b8      	blx	r7
   349be:	3001      	adds	r0, #1
   349c0:	f43f af09 	beq.w	347d6 <_printf_float+0xc2>
   349c4:	f04f 0900 	mov.w	r9, #0
   349c8:	f104 0a1a 	add.w	sl, r4, #26
   349cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   349ce:	425b      	negs	r3, r3
   349d0:	454b      	cmp	r3, r9
   349d2:	dc01      	bgt.n	349d8 <_printf_float+0x2c4>
   349d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   349d6:	e792      	b.n	348fe <_printf_float+0x1ea>
   349d8:	2301      	movs	r3, #1
   349da:	4652      	mov	r2, sl
   349dc:	4631      	mov	r1, r6
   349de:	4628      	mov	r0, r5
   349e0:	47b8      	blx	r7
   349e2:	3001      	adds	r0, #1
   349e4:	f43f aef7 	beq.w	347d6 <_printf_float+0xc2>
   349e8:	f109 0901 	add.w	r9, r9, #1
   349ec:	e7ee      	b.n	349cc <_printf_float+0x2b8>
   349ee:	bf00      	nop
   349f0:	7fefffff 	.word	0x7fefffff
   349f4:	0003d2dc 	.word	0x0003d2dc
   349f8:	0003b892 	.word	0x0003b892
   349fc:	0003d2e4 	.word	0x0003d2e4
   34a00:	0003d2e0 	.word	0x0003d2e0
   34a04:	0003ad32 	.word	0x0003ad32
   34a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   34a0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   34a0c:	429a      	cmp	r2, r3
   34a0e:	bfa8      	it	ge
   34a10:	461a      	movge	r2, r3
   34a12:	2a00      	cmp	r2, #0
   34a14:	4691      	mov	r9, r2
   34a16:	dc37      	bgt.n	34a88 <_printf_float+0x374>
   34a18:	f04f 0b00 	mov.w	fp, #0
   34a1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   34a20:	f104 021a 	add.w	r2, r4, #26
   34a24:	6da3      	ldr	r3, [r4, #88]	; 0x58
   34a26:	9305      	str	r3, [sp, #20]
   34a28:	eba3 0309 	sub.w	r3, r3, r9
   34a2c:	455b      	cmp	r3, fp
   34a2e:	dc33      	bgt.n	34a98 <_printf_float+0x384>
   34a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   34a34:	429a      	cmp	r2, r3
   34a36:	db3b      	blt.n	34ab0 <_printf_float+0x39c>
   34a38:	6823      	ldr	r3, [r4, #0]
   34a3a:	07da      	lsls	r2, r3, #31
   34a3c:	d438      	bmi.n	34ab0 <_printf_float+0x39c>
   34a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   34a40:	9b05      	ldr	r3, [sp, #20]
   34a42:	9909      	ldr	r1, [sp, #36]	; 0x24
   34a44:	1ad3      	subs	r3, r2, r3
   34a46:	eba2 0901 	sub.w	r9, r2, r1
   34a4a:	4599      	cmp	r9, r3
   34a4c:	bfa8      	it	ge
   34a4e:	4699      	movge	r9, r3
   34a50:	f1b9 0f00 	cmp.w	r9, #0
   34a54:	dc35      	bgt.n	34ac2 <_printf_float+0x3ae>
   34a56:	f04f 0800 	mov.w	r8, #0
   34a5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   34a5e:	f104 0a1a 	add.w	sl, r4, #26
   34a62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   34a66:	1a9b      	subs	r3, r3, r2
   34a68:	eba3 0309 	sub.w	r3, r3, r9
   34a6c:	4543      	cmp	r3, r8
   34a6e:	f77f af79 	ble.w	34964 <_printf_float+0x250>
   34a72:	2301      	movs	r3, #1
   34a74:	4652      	mov	r2, sl
   34a76:	4631      	mov	r1, r6
   34a78:	4628      	mov	r0, r5
   34a7a:	47b8      	blx	r7
   34a7c:	3001      	adds	r0, #1
   34a7e:	f43f aeaa 	beq.w	347d6 <_printf_float+0xc2>
   34a82:	f108 0801 	add.w	r8, r8, #1
   34a86:	e7ec      	b.n	34a62 <_printf_float+0x34e>
   34a88:	4613      	mov	r3, r2
   34a8a:	4631      	mov	r1, r6
   34a8c:	4642      	mov	r2, r8
   34a8e:	4628      	mov	r0, r5
   34a90:	47b8      	blx	r7
   34a92:	3001      	adds	r0, #1
   34a94:	d1c0      	bne.n	34a18 <_printf_float+0x304>
   34a96:	e69e      	b.n	347d6 <_printf_float+0xc2>
   34a98:	2301      	movs	r3, #1
   34a9a:	4631      	mov	r1, r6
   34a9c:	4628      	mov	r0, r5
   34a9e:	9205      	str	r2, [sp, #20]
   34aa0:	47b8      	blx	r7
   34aa2:	3001      	adds	r0, #1
   34aa4:	f43f ae97 	beq.w	347d6 <_printf_float+0xc2>
   34aa8:	f10b 0b01 	add.w	fp, fp, #1
   34aac:	9a05      	ldr	r2, [sp, #20]
   34aae:	e7b9      	b.n	34a24 <_printf_float+0x310>
   34ab0:	ee18 3a10 	vmov	r3, s16
   34ab4:	4652      	mov	r2, sl
   34ab6:	4631      	mov	r1, r6
   34ab8:	4628      	mov	r0, r5
   34aba:	47b8      	blx	r7
   34abc:	3001      	adds	r0, #1
   34abe:	d1be      	bne.n	34a3e <_printf_float+0x32a>
   34ac0:	e689      	b.n	347d6 <_printf_float+0xc2>
   34ac2:	9a05      	ldr	r2, [sp, #20]
   34ac4:	464b      	mov	r3, r9
   34ac6:	4631      	mov	r1, r6
   34ac8:	4628      	mov	r0, r5
   34aca:	4442      	add	r2, r8
   34acc:	47b8      	blx	r7
   34ace:	3001      	adds	r0, #1
   34ad0:	d1c1      	bne.n	34a56 <_printf_float+0x342>
   34ad2:	e680      	b.n	347d6 <_printf_float+0xc2>
   34ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   34ad6:	2a01      	cmp	r2, #1
   34ad8:	dc01      	bgt.n	34ade <_printf_float+0x3ca>
   34ada:	07db      	lsls	r3, r3, #31
   34adc:	d538      	bpl.n	34b50 <_printf_float+0x43c>
   34ade:	2301      	movs	r3, #1
   34ae0:	4642      	mov	r2, r8
   34ae2:	4631      	mov	r1, r6
   34ae4:	4628      	mov	r0, r5
   34ae6:	47b8      	blx	r7
   34ae8:	3001      	adds	r0, #1
   34aea:	f43f ae74 	beq.w	347d6 <_printf_float+0xc2>
   34aee:	ee18 3a10 	vmov	r3, s16
   34af2:	4652      	mov	r2, sl
   34af4:	4631      	mov	r1, r6
   34af6:	4628      	mov	r0, r5
   34af8:	47b8      	blx	r7
   34afa:	3001      	adds	r0, #1
   34afc:	f43f ae6b 	beq.w	347d6 <_printf_float+0xc2>
   34b00:	2200      	movs	r2, #0
   34b02:	2300      	movs	r3, #0
   34b04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   34b08:	f7e8 fa38 	bl	1cf7c <__aeabi_dcmpeq>
   34b0c:	b9d8      	cbnz	r0, 34b46 <_printf_float+0x432>
   34b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   34b10:	f108 0201 	add.w	r2, r8, #1
   34b14:	3b01      	subs	r3, #1
   34b16:	4631      	mov	r1, r6
   34b18:	4628      	mov	r0, r5
   34b1a:	47b8      	blx	r7
   34b1c:	3001      	adds	r0, #1
   34b1e:	d10e      	bne.n	34b3e <_printf_float+0x42a>
   34b20:	e659      	b.n	347d6 <_printf_float+0xc2>
   34b22:	2301      	movs	r3, #1
   34b24:	4652      	mov	r2, sl
   34b26:	4631      	mov	r1, r6
   34b28:	4628      	mov	r0, r5
   34b2a:	47b8      	blx	r7
   34b2c:	3001      	adds	r0, #1
   34b2e:	f43f ae52 	beq.w	347d6 <_printf_float+0xc2>
   34b32:	f108 0801 	add.w	r8, r8, #1
   34b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   34b38:	3b01      	subs	r3, #1
   34b3a:	4543      	cmp	r3, r8
   34b3c:	dcf1      	bgt.n	34b22 <_printf_float+0x40e>
   34b3e:	464b      	mov	r3, r9
   34b40:	f104 0250 	add.w	r2, r4, #80	; 0x50
   34b44:	e6dc      	b.n	34900 <_printf_float+0x1ec>
   34b46:	f04f 0800 	mov.w	r8, #0
   34b4a:	f104 0a1a 	add.w	sl, r4, #26
   34b4e:	e7f2      	b.n	34b36 <_printf_float+0x422>
   34b50:	2301      	movs	r3, #1
   34b52:	4642      	mov	r2, r8
   34b54:	e7df      	b.n	34b16 <_printf_float+0x402>
   34b56:	2301      	movs	r3, #1
   34b58:	464a      	mov	r2, r9
   34b5a:	4631      	mov	r1, r6
   34b5c:	4628      	mov	r0, r5
   34b5e:	47b8      	blx	r7
   34b60:	3001      	adds	r0, #1
   34b62:	f43f ae38 	beq.w	347d6 <_printf_float+0xc2>
   34b66:	f108 0801 	add.w	r8, r8, #1
   34b6a:	68e3      	ldr	r3, [r4, #12]
   34b6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   34b6e:	1a5b      	subs	r3, r3, r1
   34b70:	4543      	cmp	r3, r8
   34b72:	dcf0      	bgt.n	34b56 <_printf_float+0x442>
   34b74:	e6fa      	b.n	3496c <_printf_float+0x258>
   34b76:	f04f 0800 	mov.w	r8, #0
   34b7a:	f104 0919 	add.w	r9, r4, #25
   34b7e:	e7f4      	b.n	34b6a <_printf_float+0x456>

00034b80 <_printf_i>:
   34b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   34b84:	460c      	mov	r4, r1
   34b86:	4691      	mov	r9, r2
   34b88:	4680      	mov	r8, r0
   34b8a:	469a      	mov	sl, r3
   34b8c:	7e27      	ldrb	r7, [r4, #24]
   34b8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   34b92:	990c      	ldr	r1, [sp, #48]	; 0x30
   34b94:	2f78      	cmp	r7, #120	; 0x78
   34b96:	d807      	bhi.n	34ba8 <_printf_i+0x28>
   34b98:	2f62      	cmp	r7, #98	; 0x62
   34b9a:	d80a      	bhi.n	34bb2 <_printf_i+0x32>
   34b9c:	2f00      	cmp	r7, #0
   34b9e:	f000 80d8 	beq.w	34d52 <_printf_i+0x1d2>
   34ba2:	2f58      	cmp	r7, #88	; 0x58
   34ba4:	f000 80a3 	beq.w	34cee <_printf_i+0x16e>
   34ba8:	f104 0642 	add.w	r6, r4, #66	; 0x42
   34bac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   34bb0:	e03a      	b.n	34c28 <_printf_i+0xa8>
   34bb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   34bb6:	2b15      	cmp	r3, #21
   34bb8:	d8f6      	bhi.n	34ba8 <_printf_i+0x28>
   34bba:	a001      	add	r0, pc, #4	; (adr r0, 34bc0 <_printf_i+0x40>)
   34bbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   34bc0:	00034c19 	.word	0x00034c19
   34bc4:	00034c2d 	.word	0x00034c2d
   34bc8:	00034ba9 	.word	0x00034ba9
   34bcc:	00034ba9 	.word	0x00034ba9
   34bd0:	00034ba9 	.word	0x00034ba9
   34bd4:	00034ba9 	.word	0x00034ba9
   34bd8:	00034c2d 	.word	0x00034c2d
   34bdc:	00034ba9 	.word	0x00034ba9
   34be0:	00034ba9 	.word	0x00034ba9
   34be4:	00034ba9 	.word	0x00034ba9
   34be8:	00034ba9 	.word	0x00034ba9
   34bec:	00034d39 	.word	0x00034d39
   34bf0:	00034c5d 	.word	0x00034c5d
   34bf4:	00034d1b 	.word	0x00034d1b
   34bf8:	00034ba9 	.word	0x00034ba9
   34bfc:	00034ba9 	.word	0x00034ba9
   34c00:	00034d5b 	.word	0x00034d5b
   34c04:	00034ba9 	.word	0x00034ba9
   34c08:	00034c5d 	.word	0x00034c5d
   34c0c:	00034ba9 	.word	0x00034ba9
   34c10:	00034ba9 	.word	0x00034ba9
   34c14:	00034d23 	.word	0x00034d23
   34c18:	680b      	ldr	r3, [r1, #0]
   34c1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   34c1e:	1d1a      	adds	r2, r3, #4
   34c20:	681b      	ldr	r3, [r3, #0]
   34c22:	600a      	str	r2, [r1, #0]
   34c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   34c28:	2301      	movs	r3, #1
   34c2a:	e0a3      	b.n	34d74 <_printf_i+0x1f4>
   34c2c:	6825      	ldr	r5, [r4, #0]
   34c2e:	6808      	ldr	r0, [r1, #0]
   34c30:	062e      	lsls	r6, r5, #24
   34c32:	f100 0304 	add.w	r3, r0, #4
   34c36:	d50a      	bpl.n	34c4e <_printf_i+0xce>
   34c38:	6805      	ldr	r5, [r0, #0]
   34c3a:	600b      	str	r3, [r1, #0]
   34c3c:	2d00      	cmp	r5, #0
   34c3e:	da03      	bge.n	34c48 <_printf_i+0xc8>
   34c40:	232d      	movs	r3, #45	; 0x2d
   34c42:	426d      	negs	r5, r5
   34c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   34c48:	485e      	ldr	r0, [pc, #376]	; (34dc4 <_printf_i+0x244>)
   34c4a:	230a      	movs	r3, #10
   34c4c:	e019      	b.n	34c82 <_printf_i+0x102>
   34c4e:	f015 0f40 	tst.w	r5, #64	; 0x40
   34c52:	6805      	ldr	r5, [r0, #0]
   34c54:	600b      	str	r3, [r1, #0]
   34c56:	bf18      	it	ne
   34c58:	b22d      	sxthne	r5, r5
   34c5a:	e7ef      	b.n	34c3c <_printf_i+0xbc>
   34c5c:	680b      	ldr	r3, [r1, #0]
   34c5e:	6825      	ldr	r5, [r4, #0]
   34c60:	1d18      	adds	r0, r3, #4
   34c62:	6008      	str	r0, [r1, #0]
   34c64:	0628      	lsls	r0, r5, #24
   34c66:	d501      	bpl.n	34c6c <_printf_i+0xec>
   34c68:	681d      	ldr	r5, [r3, #0]
   34c6a:	e002      	b.n	34c72 <_printf_i+0xf2>
   34c6c:	0669      	lsls	r1, r5, #25
   34c6e:	d5fb      	bpl.n	34c68 <_printf_i+0xe8>
   34c70:	881d      	ldrh	r5, [r3, #0]
   34c72:	2f6f      	cmp	r7, #111	; 0x6f
   34c74:	4853      	ldr	r0, [pc, #332]	; (34dc4 <_printf_i+0x244>)
   34c76:	bf0c      	ite	eq
   34c78:	2308      	moveq	r3, #8
   34c7a:	230a      	movne	r3, #10
   34c7c:	2100      	movs	r1, #0
   34c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   34c82:	6866      	ldr	r6, [r4, #4]
   34c84:	2e00      	cmp	r6, #0
   34c86:	60a6      	str	r6, [r4, #8]
   34c88:	bfa2      	ittt	ge
   34c8a:	6821      	ldrge	r1, [r4, #0]
   34c8c:	f021 0104 	bicge.w	r1, r1, #4
   34c90:	6021      	strge	r1, [r4, #0]
   34c92:	b90d      	cbnz	r5, 34c98 <_printf_i+0x118>
   34c94:	2e00      	cmp	r6, #0
   34c96:	d04d      	beq.n	34d34 <_printf_i+0x1b4>
   34c98:	4616      	mov	r6, r2
   34c9a:	fbb5 f1f3 	udiv	r1, r5, r3
   34c9e:	fb03 5711 	mls	r7, r3, r1, r5
   34ca2:	5dc7      	ldrb	r7, [r0, r7]
   34ca4:	f806 7d01 	strb.w	r7, [r6, #-1]!
   34ca8:	462f      	mov	r7, r5
   34caa:	460d      	mov	r5, r1
   34cac:	42bb      	cmp	r3, r7
   34cae:	d9f4      	bls.n	34c9a <_printf_i+0x11a>
   34cb0:	2b08      	cmp	r3, #8
   34cb2:	d10b      	bne.n	34ccc <_printf_i+0x14c>
   34cb4:	6823      	ldr	r3, [r4, #0]
   34cb6:	07df      	lsls	r7, r3, #31
   34cb8:	d508      	bpl.n	34ccc <_printf_i+0x14c>
   34cba:	6923      	ldr	r3, [r4, #16]
   34cbc:	6861      	ldr	r1, [r4, #4]
   34cbe:	4299      	cmp	r1, r3
   34cc0:	bfde      	ittt	le
   34cc2:	2330      	movle	r3, #48	; 0x30
   34cc4:	f806 3c01 	strble.w	r3, [r6, #-1]
   34cc8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   34ccc:	1b92      	subs	r2, r2, r6
   34cce:	6122      	str	r2, [r4, #16]
   34cd0:	464b      	mov	r3, r9
   34cd2:	aa03      	add	r2, sp, #12
   34cd4:	4621      	mov	r1, r4
   34cd6:	4640      	mov	r0, r8
   34cd8:	f8cd a000 	str.w	sl, [sp]
   34cdc:	f003 fff7 	bl	38cce <_printf_common>
   34ce0:	3001      	adds	r0, #1
   34ce2:	d14c      	bne.n	34d7e <_printf_i+0x1fe>
   34ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34ce8:	b004      	add	sp, #16
   34cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34cee:	4835      	ldr	r0, [pc, #212]	; (34dc4 <_printf_i+0x244>)
   34cf0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   34cf4:	6823      	ldr	r3, [r4, #0]
   34cf6:	680e      	ldr	r6, [r1, #0]
   34cf8:	061f      	lsls	r7, r3, #24
   34cfa:	f856 5b04 	ldr.w	r5, [r6], #4
   34cfe:	600e      	str	r6, [r1, #0]
   34d00:	d514      	bpl.n	34d2c <_printf_i+0x1ac>
   34d02:	07d9      	lsls	r1, r3, #31
   34d04:	bf44      	itt	mi
   34d06:	f043 0320 	orrmi.w	r3, r3, #32
   34d0a:	6023      	strmi	r3, [r4, #0]
   34d0c:	b91d      	cbnz	r5, 34d16 <_printf_i+0x196>
   34d0e:	6823      	ldr	r3, [r4, #0]
   34d10:	f023 0320 	bic.w	r3, r3, #32
   34d14:	6023      	str	r3, [r4, #0]
   34d16:	2310      	movs	r3, #16
   34d18:	e7b0      	b.n	34c7c <_printf_i+0xfc>
   34d1a:	6823      	ldr	r3, [r4, #0]
   34d1c:	f043 0320 	orr.w	r3, r3, #32
   34d20:	6023      	str	r3, [r4, #0]
   34d22:	2378      	movs	r3, #120	; 0x78
   34d24:	4828      	ldr	r0, [pc, #160]	; (34dc8 <_printf_i+0x248>)
   34d26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   34d2a:	e7e3      	b.n	34cf4 <_printf_i+0x174>
   34d2c:	065e      	lsls	r6, r3, #25
   34d2e:	bf48      	it	mi
   34d30:	b2ad      	uxthmi	r5, r5
   34d32:	e7e6      	b.n	34d02 <_printf_i+0x182>
   34d34:	4616      	mov	r6, r2
   34d36:	e7bb      	b.n	34cb0 <_printf_i+0x130>
   34d38:	680b      	ldr	r3, [r1, #0]
   34d3a:	6826      	ldr	r6, [r4, #0]
   34d3c:	1d1d      	adds	r5, r3, #4
   34d3e:	6960      	ldr	r0, [r4, #20]
   34d40:	600d      	str	r5, [r1, #0]
   34d42:	0635      	lsls	r5, r6, #24
   34d44:	681b      	ldr	r3, [r3, #0]
   34d46:	d501      	bpl.n	34d4c <_printf_i+0x1cc>
   34d48:	6018      	str	r0, [r3, #0]
   34d4a:	e002      	b.n	34d52 <_printf_i+0x1d2>
   34d4c:	0671      	lsls	r1, r6, #25
   34d4e:	d5fb      	bpl.n	34d48 <_printf_i+0x1c8>
   34d50:	8018      	strh	r0, [r3, #0]
   34d52:	2300      	movs	r3, #0
   34d54:	4616      	mov	r6, r2
   34d56:	6123      	str	r3, [r4, #16]
   34d58:	e7ba      	b.n	34cd0 <_printf_i+0x150>
   34d5a:	680b      	ldr	r3, [r1, #0]
   34d5c:	1d1a      	adds	r2, r3, #4
   34d5e:	600a      	str	r2, [r1, #0]
   34d60:	2100      	movs	r1, #0
   34d62:	681e      	ldr	r6, [r3, #0]
   34d64:	6862      	ldr	r2, [r4, #4]
   34d66:	4630      	mov	r0, r6
   34d68:	f003 fecd 	bl	38b06 <memchr>
   34d6c:	b108      	cbz	r0, 34d72 <_printf_i+0x1f2>
   34d6e:	1b80      	subs	r0, r0, r6
   34d70:	6060      	str	r0, [r4, #4]
   34d72:	6863      	ldr	r3, [r4, #4]
   34d74:	6123      	str	r3, [r4, #16]
   34d76:	2300      	movs	r3, #0
   34d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   34d7c:	e7a8      	b.n	34cd0 <_printf_i+0x150>
   34d7e:	6923      	ldr	r3, [r4, #16]
   34d80:	4632      	mov	r2, r6
   34d82:	4649      	mov	r1, r9
   34d84:	4640      	mov	r0, r8
   34d86:	47d0      	blx	sl
   34d88:	3001      	adds	r0, #1
   34d8a:	d0ab      	beq.n	34ce4 <_printf_i+0x164>
   34d8c:	6823      	ldr	r3, [r4, #0]
   34d8e:	079b      	lsls	r3, r3, #30
   34d90:	d413      	bmi.n	34dba <_printf_i+0x23a>
   34d92:	68e0      	ldr	r0, [r4, #12]
   34d94:	9b03      	ldr	r3, [sp, #12]
   34d96:	4298      	cmp	r0, r3
   34d98:	bfb8      	it	lt
   34d9a:	4618      	movlt	r0, r3
   34d9c:	e7a4      	b.n	34ce8 <_printf_i+0x168>
   34d9e:	2301      	movs	r3, #1
   34da0:	4632      	mov	r2, r6
   34da2:	4649      	mov	r1, r9
   34da4:	4640      	mov	r0, r8
   34da6:	47d0      	blx	sl
   34da8:	3001      	adds	r0, #1
   34daa:	d09b      	beq.n	34ce4 <_printf_i+0x164>
   34dac:	3501      	adds	r5, #1
   34dae:	68e3      	ldr	r3, [r4, #12]
   34db0:	9903      	ldr	r1, [sp, #12]
   34db2:	1a5b      	subs	r3, r3, r1
   34db4:	42ab      	cmp	r3, r5
   34db6:	dcf2      	bgt.n	34d9e <_printf_i+0x21e>
   34db8:	e7eb      	b.n	34d92 <_printf_i+0x212>
   34dba:	2500      	movs	r5, #0
   34dbc:	f104 0619 	add.w	r6, r4, #25
   34dc0:	e7f5      	b.n	34dae <_printf_i+0x22e>
   34dc2:	bf00      	nop
   34dc4:	0003d2e8 	.word	0x0003d2e8
   34dc8:	0003d2f9 	.word	0x0003d2f9

00034dcc <sniprintf>:
   34dcc:	b40c      	push	{r2, r3}
   34dce:	4b18      	ldr	r3, [pc, #96]	; (34e30 <sniprintf+0x64>)
   34dd0:	b530      	push	{r4, r5, lr}
   34dd2:	1e0c      	subs	r4, r1, #0
   34dd4:	b09d      	sub	sp, #116	; 0x74
   34dd6:	681d      	ldr	r5, [r3, #0]
   34dd8:	da08      	bge.n	34dec <sniprintf+0x20>
   34dda:	238b      	movs	r3, #139	; 0x8b
   34ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34de0:	602b      	str	r3, [r5, #0]
   34de2:	b01d      	add	sp, #116	; 0x74
   34de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   34de8:	b002      	add	sp, #8
   34dea:	4770      	bx	lr
   34dec:	f44f 7302 	mov.w	r3, #520	; 0x208
   34df0:	9002      	str	r0, [sp, #8]
   34df2:	9006      	str	r0, [sp, #24]
   34df4:	a902      	add	r1, sp, #8
   34df6:	f8ad 3014 	strh.w	r3, [sp, #20]
   34dfa:	bf14      	ite	ne
   34dfc:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   34e00:	4623      	moveq	r3, r4
   34e02:	9a20      	ldr	r2, [sp, #128]	; 0x80
   34e04:	4628      	mov	r0, r5
   34e06:	9304      	str	r3, [sp, #16]
   34e08:	9307      	str	r3, [sp, #28]
   34e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34e0e:	f8ad 3016 	strh.w	r3, [sp, #22]
   34e12:	ab21      	add	r3, sp, #132	; 0x84
   34e14:	9301      	str	r3, [sp, #4]
   34e16:	f000 fa65 	bl	352e4 <_svfiprintf_r>
   34e1a:	1c43      	adds	r3, r0, #1
   34e1c:	bfbc      	itt	lt
   34e1e:	238b      	movlt	r3, #139	; 0x8b
   34e20:	602b      	strlt	r3, [r5, #0]
   34e22:	2c00      	cmp	r4, #0
   34e24:	d0dd      	beq.n	34de2 <sniprintf+0x16>
   34e26:	9b02      	ldr	r3, [sp, #8]
   34e28:	2200      	movs	r2, #0
   34e2a:	701a      	strb	r2, [r3, #0]
   34e2c:	e7d9      	b.n	34de2 <sniprintf+0x16>
   34e2e:	bf00      	nop
   34e30:	20020468 	.word	0x20020468

00034e34 <siprintf>:
   34e34:	b40e      	push	{r1, r2, r3}
   34e36:	b500      	push	{lr}
   34e38:	b09c      	sub	sp, #112	; 0x70
   34e3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   34e3e:	ab1d      	add	r3, sp, #116	; 0x74
   34e40:	9002      	str	r0, [sp, #8]
   34e42:	9006      	str	r0, [sp, #24]
   34e44:	9107      	str	r1, [sp, #28]
   34e46:	9104      	str	r1, [sp, #16]
   34e48:	4808      	ldr	r0, [pc, #32]	; (34e6c <siprintf+0x38>)
   34e4a:	4909      	ldr	r1, [pc, #36]	; (34e70 <siprintf+0x3c>)
   34e4c:	f853 2b04 	ldr.w	r2, [r3], #4
   34e50:	9105      	str	r1, [sp, #20]
   34e52:	a902      	add	r1, sp, #8
   34e54:	6800      	ldr	r0, [r0, #0]
   34e56:	9301      	str	r3, [sp, #4]
   34e58:	f000 fa44 	bl	352e4 <_svfiprintf_r>
   34e5c:	9b02      	ldr	r3, [sp, #8]
   34e5e:	2200      	movs	r2, #0
   34e60:	701a      	strb	r2, [r3, #0]
   34e62:	b01c      	add	sp, #112	; 0x70
   34e64:	f85d eb04 	ldr.w	lr, [sp], #4
   34e68:	b003      	add	sp, #12
   34e6a:	4770      	bx	lr
   34e6c:	20020468 	.word	0x20020468
   34e70:	ffff0208 	.word	0xffff0208

00034e74 <_strtol_l.isra.0>:
   34e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34e78:	468c      	mov	ip, r1
   34e7a:	4686      	mov	lr, r0
   34e7c:	4e38      	ldr	r6, [pc, #224]	; (34f60 <_strtol_l.isra.0+0xec>)
   34e7e:	4660      	mov	r0, ip
   34e80:	f81c 4b01 	ldrb.w	r4, [ip], #1
   34e84:	5da5      	ldrb	r5, [r4, r6]
   34e86:	f015 0508 	ands.w	r5, r5, #8
   34e8a:	d1f8      	bne.n	34e7e <_strtol_l.isra.0+0xa>
   34e8c:	2c2d      	cmp	r4, #45	; 0x2d
   34e8e:	d133      	bne.n	34ef8 <_strtol_l.isra.0+0x84>
   34e90:	f89c 4000 	ldrb.w	r4, [ip]
   34e94:	f04f 0801 	mov.w	r8, #1
   34e98:	f100 0c02 	add.w	ip, r0, #2
   34e9c:	2b00      	cmp	r3, #0
   34e9e:	d05b      	beq.n	34f58 <_strtol_l.isra.0+0xe4>
   34ea0:	2b10      	cmp	r3, #16
   34ea2:	d10c      	bne.n	34ebe <_strtol_l.isra.0+0x4a>
   34ea4:	2c30      	cmp	r4, #48	; 0x30
   34ea6:	d10a      	bne.n	34ebe <_strtol_l.isra.0+0x4a>
   34ea8:	f89c 0000 	ldrb.w	r0, [ip]
   34eac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   34eb0:	2858      	cmp	r0, #88	; 0x58
   34eb2:	d14c      	bne.n	34f4e <_strtol_l.isra.0+0xda>
   34eb4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   34eb8:	2310      	movs	r3, #16
   34eba:	f10c 0c02 	add.w	ip, ip, #2
   34ebe:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   34ec2:	2600      	movs	r6, #0
   34ec4:	3f01      	subs	r7, #1
   34ec6:	4630      	mov	r0, r6
   34ec8:	fbb7 f9f3 	udiv	r9, r7, r3
   34ecc:	fb03 7a19 	mls	sl, r3, r9, r7
   34ed0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   34ed4:	2d09      	cmp	r5, #9
   34ed6:	d817      	bhi.n	34f08 <_strtol_l.isra.0+0x94>
   34ed8:	462c      	mov	r4, r5
   34eda:	42a3      	cmp	r3, r4
   34edc:	dd23      	ble.n	34f26 <_strtol_l.isra.0+0xb2>
   34ede:	1c75      	adds	r5, r6, #1
   34ee0:	d007      	beq.n	34ef2 <_strtol_l.isra.0+0x7e>
   34ee2:	4581      	cmp	r9, r0
   34ee4:	d31c      	bcc.n	34f20 <_strtol_l.isra.0+0xac>
   34ee6:	d101      	bne.n	34eec <_strtol_l.isra.0+0x78>
   34ee8:	45a2      	cmp	sl, r4
   34eea:	db19      	blt.n	34f20 <_strtol_l.isra.0+0xac>
   34eec:	fb00 4003 	mla	r0, r0, r3, r4
   34ef0:	2601      	movs	r6, #1
   34ef2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   34ef6:	e7eb      	b.n	34ed0 <_strtol_l.isra.0+0x5c>
   34ef8:	2c2b      	cmp	r4, #43	; 0x2b
   34efa:	46a8      	mov	r8, r5
   34efc:	bf04      	itt	eq
   34efe:	f89c 4000 	ldrbeq.w	r4, [ip]
   34f02:	f100 0c02 	addeq.w	ip, r0, #2
   34f06:	e7c9      	b.n	34e9c <_strtol_l.isra.0+0x28>
   34f08:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   34f0c:	2d19      	cmp	r5, #25
   34f0e:	d801      	bhi.n	34f14 <_strtol_l.isra.0+0xa0>
   34f10:	3c37      	subs	r4, #55	; 0x37
   34f12:	e7e2      	b.n	34eda <_strtol_l.isra.0+0x66>
   34f14:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   34f18:	2d19      	cmp	r5, #25
   34f1a:	d804      	bhi.n	34f26 <_strtol_l.isra.0+0xb2>
   34f1c:	3c57      	subs	r4, #87	; 0x57
   34f1e:	e7dc      	b.n	34eda <_strtol_l.isra.0+0x66>
   34f20:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   34f24:	e7e5      	b.n	34ef2 <_strtol_l.isra.0+0x7e>
   34f26:	1c73      	adds	r3, r6, #1
   34f28:	d106      	bne.n	34f38 <_strtol_l.isra.0+0xc4>
   34f2a:	2322      	movs	r3, #34	; 0x22
   34f2c:	4638      	mov	r0, r7
   34f2e:	f8ce 3000 	str.w	r3, [lr]
   34f32:	b942      	cbnz	r2, 34f46 <_strtol_l.isra.0+0xd2>
   34f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34f38:	f1b8 0f00 	cmp.w	r8, #0
   34f3c:	d000      	beq.n	34f40 <_strtol_l.isra.0+0xcc>
   34f3e:	4240      	negs	r0, r0
   34f40:	2a00      	cmp	r2, #0
   34f42:	d0f7      	beq.n	34f34 <_strtol_l.isra.0+0xc0>
   34f44:	b10e      	cbz	r6, 34f4a <_strtol_l.isra.0+0xd6>
   34f46:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   34f4a:	6011      	str	r1, [r2, #0]
   34f4c:	e7f2      	b.n	34f34 <_strtol_l.isra.0+0xc0>
   34f4e:	2430      	movs	r4, #48	; 0x30
   34f50:	2b00      	cmp	r3, #0
   34f52:	d1b4      	bne.n	34ebe <_strtol_l.isra.0+0x4a>
   34f54:	2308      	movs	r3, #8
   34f56:	e7b2      	b.n	34ebe <_strtol_l.isra.0+0x4a>
   34f58:	2c30      	cmp	r4, #48	; 0x30
   34f5a:	d0a5      	beq.n	34ea8 <_strtol_l.isra.0+0x34>
   34f5c:	230a      	movs	r3, #10
   34f5e:	e7ae      	b.n	34ebe <_strtol_l.isra.0+0x4a>
   34f60:	0003d1dc 	.word	0x0003d1dc

00034f64 <strtol>:
   34f64:	4613      	mov	r3, r2
   34f66:	460a      	mov	r2, r1
   34f68:	4601      	mov	r1, r0
   34f6a:	4802      	ldr	r0, [pc, #8]	; (34f74 <strtol+0x10>)
   34f6c:	6800      	ldr	r0, [r0, #0]
   34f6e:	f7ff bf81 	b.w	34e74 <_strtol_l.isra.0>
   34f72:	bf00      	nop
   34f74:	20020468 	.word	0x20020468

00034f78 <_strtoul_l.isra.0>:
   34f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34f7c:	468c      	mov	ip, r1
   34f7e:	4686      	mov	lr, r0
   34f80:	4e39      	ldr	r6, [pc, #228]	; (35068 <_strtoul_l.isra.0+0xf0>)
   34f82:	4660      	mov	r0, ip
   34f84:	f81c 4b01 	ldrb.w	r4, [ip], #1
   34f88:	5da5      	ldrb	r5, [r4, r6]
   34f8a:	f015 0508 	ands.w	r5, r5, #8
   34f8e:	d1f8      	bne.n	34f82 <_strtoul_l.isra.0+0xa>
   34f90:	2c2d      	cmp	r4, #45	; 0x2d
   34f92:	d134      	bne.n	34ffe <_strtoul_l.isra.0+0x86>
   34f94:	f89c 4000 	ldrb.w	r4, [ip]
   34f98:	f04f 0801 	mov.w	r8, #1
   34f9c:	f100 0c02 	add.w	ip, r0, #2
   34fa0:	2b00      	cmp	r3, #0
   34fa2:	d05d      	beq.n	35060 <_strtoul_l.isra.0+0xe8>
   34fa4:	2b10      	cmp	r3, #16
   34fa6:	d10c      	bne.n	34fc2 <_strtoul_l.isra.0+0x4a>
   34fa8:	2c30      	cmp	r4, #48	; 0x30
   34faa:	d10a      	bne.n	34fc2 <_strtoul_l.isra.0+0x4a>
   34fac:	f89c 0000 	ldrb.w	r0, [ip]
   34fb0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   34fb4:	2858      	cmp	r0, #88	; 0x58
   34fb6:	d14e      	bne.n	35056 <_strtoul_l.isra.0+0xde>
   34fb8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   34fbc:	2310      	movs	r3, #16
   34fbe:	f10c 0c02 	add.w	ip, ip, #2
   34fc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   34fc6:	2500      	movs	r5, #0
   34fc8:	fbb7 f7f3 	udiv	r7, r7, r3
   34fcc:	fb03 f907 	mul.w	r9, r3, r7
   34fd0:	4628      	mov	r0, r5
   34fd2:	ea6f 0909 	mvn.w	r9, r9
   34fd6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   34fda:	2e09      	cmp	r6, #9
   34fdc:	d817      	bhi.n	3500e <_strtoul_l.isra.0+0x96>
   34fde:	4634      	mov	r4, r6
   34fe0:	42a3      	cmp	r3, r4
   34fe2:	dd23      	ble.n	3502c <_strtoul_l.isra.0+0xb4>
   34fe4:	2d00      	cmp	r5, #0
   34fe6:	db1e      	blt.n	35026 <_strtoul_l.isra.0+0xae>
   34fe8:	4287      	cmp	r7, r0
   34fea:	d31c      	bcc.n	35026 <_strtoul_l.isra.0+0xae>
   34fec:	d101      	bne.n	34ff2 <_strtoul_l.isra.0+0x7a>
   34fee:	45a1      	cmp	r9, r4
   34ff0:	db19      	blt.n	35026 <_strtoul_l.isra.0+0xae>
   34ff2:	fb00 4003 	mla	r0, r0, r3, r4
   34ff6:	2501      	movs	r5, #1
   34ff8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   34ffc:	e7eb      	b.n	34fd6 <_strtoul_l.isra.0+0x5e>
   34ffe:	2c2b      	cmp	r4, #43	; 0x2b
   35000:	46a8      	mov	r8, r5
   35002:	bf04      	itt	eq
   35004:	f89c 4000 	ldrbeq.w	r4, [ip]
   35008:	f100 0c02 	addeq.w	ip, r0, #2
   3500c:	e7c8      	b.n	34fa0 <_strtoul_l.isra.0+0x28>
   3500e:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   35012:	2e19      	cmp	r6, #25
   35014:	d801      	bhi.n	3501a <_strtoul_l.isra.0+0xa2>
   35016:	3c37      	subs	r4, #55	; 0x37
   35018:	e7e2      	b.n	34fe0 <_strtoul_l.isra.0+0x68>
   3501a:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   3501e:	2e19      	cmp	r6, #25
   35020:	d804      	bhi.n	3502c <_strtoul_l.isra.0+0xb4>
   35022:	3c57      	subs	r4, #87	; 0x57
   35024:	e7dc      	b.n	34fe0 <_strtoul_l.isra.0+0x68>
   35026:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3502a:	e7e5      	b.n	34ff8 <_strtoul_l.isra.0+0x80>
   3502c:	2d00      	cmp	r5, #0
   3502e:	da07      	bge.n	35040 <_strtoul_l.isra.0+0xc8>
   35030:	2322      	movs	r3, #34	; 0x22
   35032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35036:	f8ce 3000 	str.w	r3, [lr]
   3503a:	b942      	cbnz	r2, 3504e <_strtoul_l.isra.0+0xd6>
   3503c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35040:	f1b8 0f00 	cmp.w	r8, #0
   35044:	d000      	beq.n	35048 <_strtoul_l.isra.0+0xd0>
   35046:	4240      	negs	r0, r0
   35048:	2a00      	cmp	r2, #0
   3504a:	d0f7      	beq.n	3503c <_strtoul_l.isra.0+0xc4>
   3504c:	b10d      	cbz	r5, 35052 <_strtoul_l.isra.0+0xda>
   3504e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   35052:	6011      	str	r1, [r2, #0]
   35054:	e7f2      	b.n	3503c <_strtoul_l.isra.0+0xc4>
   35056:	2430      	movs	r4, #48	; 0x30
   35058:	2b00      	cmp	r3, #0
   3505a:	d1b2      	bne.n	34fc2 <_strtoul_l.isra.0+0x4a>
   3505c:	2308      	movs	r3, #8
   3505e:	e7b0      	b.n	34fc2 <_strtoul_l.isra.0+0x4a>
   35060:	2c30      	cmp	r4, #48	; 0x30
   35062:	d0a3      	beq.n	34fac <_strtoul_l.isra.0+0x34>
   35064:	230a      	movs	r3, #10
   35066:	e7ac      	b.n	34fc2 <_strtoul_l.isra.0+0x4a>
   35068:	0003d1dc 	.word	0x0003d1dc

0003506c <strtoul>:
   3506c:	4613      	mov	r3, r2
   3506e:	460a      	mov	r2, r1
   35070:	4601      	mov	r1, r0
   35072:	4802      	ldr	r0, [pc, #8]	; (3507c <strtoul+0x10>)
   35074:	6800      	ldr	r0, [r0, #0]
   35076:	f7ff bf7f 	b.w	34f78 <_strtoul_l.isra.0>
   3507a:	bf00      	nop
   3507c:	20020468 	.word	0x20020468

00035080 <vsniprintf>:
   35080:	b507      	push	{r0, r1, r2, lr}
   35082:	9300      	str	r3, [sp, #0]
   35084:	4613      	mov	r3, r2
   35086:	460a      	mov	r2, r1
   35088:	4601      	mov	r1, r0
   3508a:	4803      	ldr	r0, [pc, #12]	; (35098 <vsniprintf+0x18>)
   3508c:	6800      	ldr	r0, [r0, #0]
   3508e:	f003 ff20 	bl	38ed2 <_vsniprintf_r>
   35092:	b003      	add	sp, #12
   35094:	f85d fb04 	ldr.w	pc, [sp], #4
   35098:	20020468 	.word	0x20020468

0003509c <_vsiprintf_r>:
   3509c:	b500      	push	{lr}
   3509e:	b09b      	sub	sp, #108	; 0x6c
   350a0:	9100      	str	r1, [sp, #0]
   350a2:	9104      	str	r1, [sp, #16]
   350a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   350a8:	9105      	str	r1, [sp, #20]
   350aa:	9102      	str	r1, [sp, #8]
   350ac:	4905      	ldr	r1, [pc, #20]	; (350c4 <_vsiprintf_r+0x28>)
   350ae:	9103      	str	r1, [sp, #12]
   350b0:	4669      	mov	r1, sp
   350b2:	f000 f917 	bl	352e4 <_svfiprintf_r>
   350b6:	9b00      	ldr	r3, [sp, #0]
   350b8:	2200      	movs	r2, #0
   350ba:	701a      	strb	r2, [r3, #0]
   350bc:	b01b      	add	sp, #108	; 0x6c
   350be:	f85d fb04 	ldr.w	pc, [sp], #4
   350c2:	bf00      	nop
   350c4:	ffff0208 	.word	0xffff0208

000350c8 <vsiprintf>:
   350c8:	4613      	mov	r3, r2
   350ca:	460a      	mov	r2, r1
   350cc:	4601      	mov	r1, r0
   350ce:	4802      	ldr	r0, [pc, #8]	; (350d8 <vsiprintf+0x10>)
   350d0:	6800      	ldr	r0, [r0, #0]
   350d2:	f7ff bfe3 	b.w	3509c <_vsiprintf_r>
   350d6:	bf00      	nop
   350d8:	20020468 	.word	0x20020468

000350dc <_localeconv_r>:
   350dc:	4800      	ldr	r0, [pc, #0]	; (350e0 <_localeconv_r+0x4>)
   350de:	4770      	bx	lr
   350e0:	200205bc 	.word	0x200205bc

000350e4 <malloc>:
   350e4:	4b02      	ldr	r3, [pc, #8]	; (350f0 <malloc+0xc>)
   350e6:	4601      	mov	r1, r0
   350e8:	6818      	ldr	r0, [r3, #0]
   350ea:	f000 b8a1 	b.w	35230 <_malloc_r>
   350ee:	bf00      	nop
   350f0:	20020468 	.word	0x20020468

000350f4 <__pow5mult>:
   350f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   350f8:	4615      	mov	r5, r2
   350fa:	f012 0203 	ands.w	r2, r2, #3
   350fe:	4606      	mov	r6, r0
   35100:	460f      	mov	r7, r1
   35102:	d007      	beq.n	35114 <__pow5mult+0x20>
   35104:	3a01      	subs	r2, #1
   35106:	4c21      	ldr	r4, [pc, #132]	; (3518c <__pow5mult+0x98>)
   35108:	2300      	movs	r3, #0
   3510a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3510e:	f003 ffe6 	bl	390de <__multadd>
   35112:	4607      	mov	r7, r0
   35114:	10ad      	asrs	r5, r5, #2
   35116:	d035      	beq.n	35184 <__pow5mult+0x90>
   35118:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3511a:	b93c      	cbnz	r4, 3512c <__pow5mult+0x38>
   3511c:	2010      	movs	r0, #16
   3511e:	f7ff ffe1 	bl	350e4 <malloc>
   35122:	6270      	str	r0, [r6, #36]	; 0x24
   35124:	6004      	str	r4, [r0, #0]
   35126:	60c4      	str	r4, [r0, #12]
   35128:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3512c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   35130:	f8d8 4008 	ldr.w	r4, [r8, #8]
   35134:	b94c      	cbnz	r4, 3514a <__pow5mult+0x56>
   35136:	f240 2171 	movw	r1, #625	; 0x271
   3513a:	4630      	mov	r0, r6
   3513c:	f004 f85e 	bl	391fc <__i2b>
   35140:	2300      	movs	r3, #0
   35142:	4604      	mov	r4, r0
   35144:	f8c8 0008 	str.w	r0, [r8, #8]
   35148:	6003      	str	r3, [r0, #0]
   3514a:	f04f 0900 	mov.w	r9, #0
   3514e:	07eb      	lsls	r3, r5, #31
   35150:	d50a      	bpl.n	35168 <__pow5mult+0x74>
   35152:	4639      	mov	r1, r7
   35154:	4622      	mov	r2, r4
   35156:	4630      	mov	r0, r6
   35158:	f004 f859 	bl	3920e <__multiply>
   3515c:	4680      	mov	r8, r0
   3515e:	4639      	mov	r1, r7
   35160:	4630      	mov	r0, r6
   35162:	4647      	mov	r7, r8
   35164:	f003 ffa4 	bl	390b0 <_Bfree>
   35168:	106d      	asrs	r5, r5, #1
   3516a:	d00b      	beq.n	35184 <__pow5mult+0x90>
   3516c:	6820      	ldr	r0, [r4, #0]
   3516e:	b938      	cbnz	r0, 35180 <__pow5mult+0x8c>
   35170:	4622      	mov	r2, r4
   35172:	4621      	mov	r1, r4
   35174:	4630      	mov	r0, r6
   35176:	f004 f84a 	bl	3920e <__multiply>
   3517a:	6020      	str	r0, [r4, #0]
   3517c:	f8c0 9000 	str.w	r9, [r0]
   35180:	4604      	mov	r4, r0
   35182:	e7e4      	b.n	3514e <__pow5mult+0x5a>
   35184:	4638      	mov	r0, r7
   35186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3518a:	bf00      	nop
   3518c:	0003a494 	.word	0x0003a494

00035190 <_free_r>:
   35190:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35192:	2900      	cmp	r1, #0
   35194:	d047      	beq.n	35226 <_free_r+0x96>
   35196:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3519a:	1f0c      	subs	r4, r1, #4
   3519c:	9001      	str	r0, [sp, #4]
   3519e:	2b00      	cmp	r3, #0
   351a0:	bfb8      	it	lt
   351a2:	18e4      	addlt	r4, r4, r3
   351a4:	f000 f9ae 	bl	35504 <__malloc_lock>
   351a8:	4a20      	ldr	r2, [pc, #128]	; (3522c <_free_r+0x9c>)
   351aa:	9801      	ldr	r0, [sp, #4]
   351ac:	6813      	ldr	r3, [r2, #0]
   351ae:	4615      	mov	r5, r2
   351b0:	b933      	cbnz	r3, 351c0 <_free_r+0x30>
   351b2:	6063      	str	r3, [r4, #4]
   351b4:	6014      	str	r4, [r2, #0]
   351b6:	b003      	add	sp, #12
   351b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   351bc:	f000 b9a8 	b.w	35510 <__malloc_unlock>
   351c0:	42a3      	cmp	r3, r4
   351c2:	d90b      	bls.n	351dc <_free_r+0x4c>
   351c4:	6821      	ldr	r1, [r4, #0]
   351c6:	1862      	adds	r2, r4, r1
   351c8:	4293      	cmp	r3, r2
   351ca:	bf02      	ittt	eq
   351cc:	681a      	ldreq	r2, [r3, #0]
   351ce:	685b      	ldreq	r3, [r3, #4]
   351d0:	1852      	addeq	r2, r2, r1
   351d2:	6063      	str	r3, [r4, #4]
   351d4:	bf08      	it	eq
   351d6:	6022      	streq	r2, [r4, #0]
   351d8:	602c      	str	r4, [r5, #0]
   351da:	e7ec      	b.n	351b6 <_free_r+0x26>
   351dc:	461a      	mov	r2, r3
   351de:	685b      	ldr	r3, [r3, #4]
   351e0:	b10b      	cbz	r3, 351e6 <_free_r+0x56>
   351e2:	42a3      	cmp	r3, r4
   351e4:	d9fa      	bls.n	351dc <_free_r+0x4c>
   351e6:	6811      	ldr	r1, [r2, #0]
   351e8:	1855      	adds	r5, r2, r1
   351ea:	42a5      	cmp	r5, r4
   351ec:	d10b      	bne.n	35206 <_free_r+0x76>
   351ee:	6824      	ldr	r4, [r4, #0]
   351f0:	4421      	add	r1, r4
   351f2:	1854      	adds	r4, r2, r1
   351f4:	6011      	str	r1, [r2, #0]
   351f6:	42a3      	cmp	r3, r4
   351f8:	d1dd      	bne.n	351b6 <_free_r+0x26>
   351fa:	681c      	ldr	r4, [r3, #0]
   351fc:	685b      	ldr	r3, [r3, #4]
   351fe:	4421      	add	r1, r4
   35200:	6053      	str	r3, [r2, #4]
   35202:	6011      	str	r1, [r2, #0]
   35204:	e7d7      	b.n	351b6 <_free_r+0x26>
   35206:	d902      	bls.n	3520e <_free_r+0x7e>
   35208:	230c      	movs	r3, #12
   3520a:	6003      	str	r3, [r0, #0]
   3520c:	e7d3      	b.n	351b6 <_free_r+0x26>
   3520e:	6825      	ldr	r5, [r4, #0]
   35210:	1961      	adds	r1, r4, r5
   35212:	428b      	cmp	r3, r1
   35214:	bf02      	ittt	eq
   35216:	6819      	ldreq	r1, [r3, #0]
   35218:	685b      	ldreq	r3, [r3, #4]
   3521a:	1949      	addeq	r1, r1, r5
   3521c:	6063      	str	r3, [r4, #4]
   3521e:	bf08      	it	eq
   35220:	6021      	streq	r1, [r4, #0]
   35222:	6054      	str	r4, [r2, #4]
   35224:	e7c7      	b.n	351b6 <_free_r+0x26>
   35226:	b003      	add	sp, #12
   35228:	bd30      	pop	{r4, r5, pc}
   3522a:	bf00      	nop
   3522c:	2002877c 	.word	0x2002877c

00035230 <_malloc_r>:
   35230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35232:	1ccd      	adds	r5, r1, #3
   35234:	4606      	mov	r6, r0
   35236:	f025 0503 	bic.w	r5, r5, #3
   3523a:	3508      	adds	r5, #8
   3523c:	2d0c      	cmp	r5, #12
   3523e:	bf38      	it	cc
   35240:	250c      	movcc	r5, #12
   35242:	2d00      	cmp	r5, #0
   35244:	db01      	blt.n	3524a <_malloc_r+0x1a>
   35246:	42a9      	cmp	r1, r5
   35248:	d903      	bls.n	35252 <_malloc_r+0x22>
   3524a:	230c      	movs	r3, #12
   3524c:	6033      	str	r3, [r6, #0]
   3524e:	2000      	movs	r0, #0
   35250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35252:	f000 f957 	bl	35504 <__malloc_lock>
   35256:	4921      	ldr	r1, [pc, #132]	; (352dc <_malloc_r+0xac>)
   35258:	680a      	ldr	r2, [r1, #0]
   3525a:	4614      	mov	r4, r2
   3525c:	b99c      	cbnz	r4, 35286 <_malloc_r+0x56>
   3525e:	4f20      	ldr	r7, [pc, #128]	; (352e0 <_malloc_r+0xb0>)
   35260:	683b      	ldr	r3, [r7, #0]
   35262:	b923      	cbnz	r3, 3526e <_malloc_r+0x3e>
   35264:	4621      	mov	r1, r4
   35266:	4630      	mov	r0, r6
   35268:	f000 f93c 	bl	354e4 <_sbrk_r>
   3526c:	6038      	str	r0, [r7, #0]
   3526e:	4629      	mov	r1, r5
   35270:	4630      	mov	r0, r6
   35272:	f000 f937 	bl	354e4 <_sbrk_r>
   35276:	1c43      	adds	r3, r0, #1
   35278:	d123      	bne.n	352c2 <_malloc_r+0x92>
   3527a:	230c      	movs	r3, #12
   3527c:	4630      	mov	r0, r6
   3527e:	6033      	str	r3, [r6, #0]
   35280:	f000 f946 	bl	35510 <__malloc_unlock>
   35284:	e7e3      	b.n	3524e <_malloc_r+0x1e>
   35286:	6823      	ldr	r3, [r4, #0]
   35288:	1b5b      	subs	r3, r3, r5
   3528a:	d417      	bmi.n	352bc <_malloc_r+0x8c>
   3528c:	2b0b      	cmp	r3, #11
   3528e:	d903      	bls.n	35298 <_malloc_r+0x68>
   35290:	6023      	str	r3, [r4, #0]
   35292:	441c      	add	r4, r3
   35294:	6025      	str	r5, [r4, #0]
   35296:	e004      	b.n	352a2 <_malloc_r+0x72>
   35298:	6863      	ldr	r3, [r4, #4]
   3529a:	42a2      	cmp	r2, r4
   3529c:	bf0c      	ite	eq
   3529e:	600b      	streq	r3, [r1, #0]
   352a0:	6053      	strne	r3, [r2, #4]
   352a2:	4630      	mov	r0, r6
   352a4:	f000 f934 	bl	35510 <__malloc_unlock>
   352a8:	f104 000b 	add.w	r0, r4, #11
   352ac:	1d23      	adds	r3, r4, #4
   352ae:	f020 0007 	bic.w	r0, r0, #7
   352b2:	1ac2      	subs	r2, r0, r3
   352b4:	d0cc      	beq.n	35250 <_malloc_r+0x20>
   352b6:	1a1b      	subs	r3, r3, r0
   352b8:	50a3      	str	r3, [r4, r2]
   352ba:	e7c9      	b.n	35250 <_malloc_r+0x20>
   352bc:	4622      	mov	r2, r4
   352be:	6864      	ldr	r4, [r4, #4]
   352c0:	e7cc      	b.n	3525c <_malloc_r+0x2c>
   352c2:	1cc4      	adds	r4, r0, #3
   352c4:	f024 0403 	bic.w	r4, r4, #3
   352c8:	42a0      	cmp	r0, r4
   352ca:	d0e3      	beq.n	35294 <_malloc_r+0x64>
   352cc:	1a21      	subs	r1, r4, r0
   352ce:	4630      	mov	r0, r6
   352d0:	f000 f908 	bl	354e4 <_sbrk_r>
   352d4:	3001      	adds	r0, #1
   352d6:	d1dd      	bne.n	35294 <_malloc_r+0x64>
   352d8:	e7cf      	b.n	3527a <_malloc_r+0x4a>
   352da:	bf00      	nop
   352dc:	2002877c 	.word	0x2002877c
   352e0:	20028780 	.word	0x20028780

000352e4 <_svfiprintf_r>:
   352e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   352e8:	4698      	mov	r8, r3
   352ea:	898b      	ldrh	r3, [r1, #12]
   352ec:	b09d      	sub	sp, #116	; 0x74
   352ee:	4607      	mov	r7, r0
   352f0:	061b      	lsls	r3, r3, #24
   352f2:	460d      	mov	r5, r1
   352f4:	4614      	mov	r4, r2
   352f6:	d50e      	bpl.n	35316 <_svfiprintf_r+0x32>
   352f8:	690b      	ldr	r3, [r1, #16]
   352fa:	b963      	cbnz	r3, 35316 <_svfiprintf_r+0x32>
   352fc:	2140      	movs	r1, #64	; 0x40
   352fe:	f7ff ff97 	bl	35230 <_malloc_r>
   35302:	6028      	str	r0, [r5, #0]
   35304:	6128      	str	r0, [r5, #16]
   35306:	b920      	cbnz	r0, 35312 <_svfiprintf_r+0x2e>
   35308:	230c      	movs	r3, #12
   3530a:	603b      	str	r3, [r7, #0]
   3530c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35310:	e0d1      	b.n	354b6 <_svfiprintf_r+0x1d2>
   35312:	2340      	movs	r3, #64	; 0x40
   35314:	616b      	str	r3, [r5, #20]
   35316:	2300      	movs	r3, #0
   35318:	f8cd 800c 	str.w	r8, [sp, #12]
   3531c:	f04f 0901 	mov.w	r9, #1
   35320:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 354d0 <_svfiprintf_r+0x1ec>
   35324:	9309      	str	r3, [sp, #36]	; 0x24
   35326:	2320      	movs	r3, #32
   35328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3532c:	2330      	movs	r3, #48	; 0x30
   3532e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   35332:	4623      	mov	r3, r4
   35334:	469a      	mov	sl, r3
   35336:	f813 2b01 	ldrb.w	r2, [r3], #1
   3533a:	b10a      	cbz	r2, 35340 <_svfiprintf_r+0x5c>
   3533c:	2a25      	cmp	r2, #37	; 0x25
   3533e:	d1f9      	bne.n	35334 <_svfiprintf_r+0x50>
   35340:	ebba 0b04 	subs.w	fp, sl, r4
   35344:	d00b      	beq.n	3535e <_svfiprintf_r+0x7a>
   35346:	465b      	mov	r3, fp
   35348:	4622      	mov	r2, r4
   3534a:	4629      	mov	r1, r5
   3534c:	4638      	mov	r0, r7
   3534e:	f004 f950 	bl	395f2 <__ssputs_r>
   35352:	3001      	adds	r0, #1
   35354:	f000 80aa 	beq.w	354ac <_svfiprintf_r+0x1c8>
   35358:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3535a:	445a      	add	r2, fp
   3535c:	9209      	str	r2, [sp, #36]	; 0x24
   3535e:	f89a 3000 	ldrb.w	r3, [sl]
   35362:	2b00      	cmp	r3, #0
   35364:	f000 80a2 	beq.w	354ac <_svfiprintf_r+0x1c8>
   35368:	2300      	movs	r3, #0
   3536a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3536e:	f10a 0a01 	add.w	sl, sl, #1
   35372:	9304      	str	r3, [sp, #16]
   35374:	9307      	str	r3, [sp, #28]
   35376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3537a:	931a      	str	r3, [sp, #104]	; 0x68
   3537c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   35380:	4654      	mov	r4, sl
   35382:	2205      	movs	r2, #5
   35384:	4852      	ldr	r0, [pc, #328]	; (354d0 <_svfiprintf_r+0x1ec>)
   35386:	f814 1b01 	ldrb.w	r1, [r4], #1
   3538a:	f003 fbbc 	bl	38b06 <memchr>
   3538e:	9a04      	ldr	r2, [sp, #16]
   35390:	b9d8      	cbnz	r0, 353ca <_svfiprintf_r+0xe6>
   35392:	06d0      	lsls	r0, r2, #27
   35394:	bf44      	itt	mi
   35396:	2320      	movmi	r3, #32
   35398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3539c:	0711      	lsls	r1, r2, #28
   3539e:	bf44      	itt	mi
   353a0:	232b      	movmi	r3, #43	; 0x2b
   353a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   353a6:	f89a 3000 	ldrb.w	r3, [sl]
   353aa:	2b2a      	cmp	r3, #42	; 0x2a
   353ac:	d015      	beq.n	353da <_svfiprintf_r+0xf6>
   353ae:	9a07      	ldr	r2, [sp, #28]
   353b0:	4654      	mov	r4, sl
   353b2:	2000      	movs	r0, #0
   353b4:	f04f 0c0a 	mov.w	ip, #10
   353b8:	4621      	mov	r1, r4
   353ba:	f811 3b01 	ldrb.w	r3, [r1], #1
   353be:	3b30      	subs	r3, #48	; 0x30
   353c0:	2b09      	cmp	r3, #9
   353c2:	d94e      	bls.n	35462 <_svfiprintf_r+0x17e>
   353c4:	b1b0      	cbz	r0, 353f4 <_svfiprintf_r+0x110>
   353c6:	9207      	str	r2, [sp, #28]
   353c8:	e014      	b.n	353f4 <_svfiprintf_r+0x110>
   353ca:	eba0 0308 	sub.w	r3, r0, r8
   353ce:	46a2      	mov	sl, r4
   353d0:	fa09 f303 	lsl.w	r3, r9, r3
   353d4:	4313      	orrs	r3, r2
   353d6:	9304      	str	r3, [sp, #16]
   353d8:	e7d2      	b.n	35380 <_svfiprintf_r+0x9c>
   353da:	9b03      	ldr	r3, [sp, #12]
   353dc:	1d19      	adds	r1, r3, #4
   353de:	681b      	ldr	r3, [r3, #0]
   353e0:	2b00      	cmp	r3, #0
   353e2:	9103      	str	r1, [sp, #12]
   353e4:	bfbb      	ittet	lt
   353e6:	425b      	neglt	r3, r3
   353e8:	f042 0202 	orrlt.w	r2, r2, #2
   353ec:	9307      	strge	r3, [sp, #28]
   353ee:	9307      	strlt	r3, [sp, #28]
   353f0:	bfb8      	it	lt
   353f2:	9204      	strlt	r2, [sp, #16]
   353f4:	7823      	ldrb	r3, [r4, #0]
   353f6:	2b2e      	cmp	r3, #46	; 0x2e
   353f8:	d10c      	bne.n	35414 <_svfiprintf_r+0x130>
   353fa:	7863      	ldrb	r3, [r4, #1]
   353fc:	2b2a      	cmp	r3, #42	; 0x2a
   353fe:	d135      	bne.n	3546c <_svfiprintf_r+0x188>
   35400:	9b03      	ldr	r3, [sp, #12]
   35402:	3402      	adds	r4, #2
   35404:	1d1a      	adds	r2, r3, #4
   35406:	681b      	ldr	r3, [r3, #0]
   35408:	2b00      	cmp	r3, #0
   3540a:	9203      	str	r2, [sp, #12]
   3540c:	bfb8      	it	lt
   3540e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   35412:	9305      	str	r3, [sp, #20]
   35414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 354e0 <_svfiprintf_r+0x1fc>
   35418:	2203      	movs	r2, #3
   3541a:	7821      	ldrb	r1, [r4, #0]
   3541c:	4650      	mov	r0, sl
   3541e:	f003 fb72 	bl	38b06 <memchr>
   35422:	b140      	cbz	r0, 35436 <_svfiprintf_r+0x152>
   35424:	2340      	movs	r3, #64	; 0x40
   35426:	eba0 000a 	sub.w	r0, r0, sl
   3542a:	3401      	adds	r4, #1
   3542c:	fa03 f000 	lsl.w	r0, r3, r0
   35430:	9b04      	ldr	r3, [sp, #16]
   35432:	4303      	orrs	r3, r0
   35434:	9304      	str	r3, [sp, #16]
   35436:	f814 1b01 	ldrb.w	r1, [r4], #1
   3543a:	2206      	movs	r2, #6
   3543c:	4825      	ldr	r0, [pc, #148]	; (354d4 <_svfiprintf_r+0x1f0>)
   3543e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   35442:	f003 fb60 	bl	38b06 <memchr>
   35446:	2800      	cmp	r0, #0
   35448:	d038      	beq.n	354bc <_svfiprintf_r+0x1d8>
   3544a:	4b23      	ldr	r3, [pc, #140]	; (354d8 <_svfiprintf_r+0x1f4>)
   3544c:	bb1b      	cbnz	r3, 35496 <_svfiprintf_r+0x1b2>
   3544e:	9b03      	ldr	r3, [sp, #12]
   35450:	3307      	adds	r3, #7
   35452:	f023 0307 	bic.w	r3, r3, #7
   35456:	3308      	adds	r3, #8
   35458:	9303      	str	r3, [sp, #12]
   3545a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3545c:	4433      	add	r3, r6
   3545e:	9309      	str	r3, [sp, #36]	; 0x24
   35460:	e767      	b.n	35332 <_svfiprintf_r+0x4e>
   35462:	fb0c 3202 	mla	r2, ip, r2, r3
   35466:	460c      	mov	r4, r1
   35468:	2001      	movs	r0, #1
   3546a:	e7a5      	b.n	353b8 <_svfiprintf_r+0xd4>
   3546c:	2300      	movs	r3, #0
   3546e:	3401      	adds	r4, #1
   35470:	f04f 0c0a 	mov.w	ip, #10
   35474:	4619      	mov	r1, r3
   35476:	9305      	str	r3, [sp, #20]
   35478:	4620      	mov	r0, r4
   3547a:	f810 2b01 	ldrb.w	r2, [r0], #1
   3547e:	3a30      	subs	r2, #48	; 0x30
   35480:	2a09      	cmp	r2, #9
   35482:	d903      	bls.n	3548c <_svfiprintf_r+0x1a8>
   35484:	2b00      	cmp	r3, #0
   35486:	d0c5      	beq.n	35414 <_svfiprintf_r+0x130>
   35488:	9105      	str	r1, [sp, #20]
   3548a:	e7c3      	b.n	35414 <_svfiprintf_r+0x130>
   3548c:	fb0c 2101 	mla	r1, ip, r1, r2
   35490:	4604      	mov	r4, r0
   35492:	2301      	movs	r3, #1
   35494:	e7f0      	b.n	35478 <_svfiprintf_r+0x194>
   35496:	ab03      	add	r3, sp, #12
   35498:	462a      	mov	r2, r5
   3549a:	a904      	add	r1, sp, #16
   3549c:	4638      	mov	r0, r7
   3549e:	9300      	str	r3, [sp, #0]
   354a0:	4b0e      	ldr	r3, [pc, #56]	; (354dc <_svfiprintf_r+0x1f8>)
   354a2:	f7ff f937 	bl	34714 <_printf_float>
   354a6:	1c42      	adds	r2, r0, #1
   354a8:	4606      	mov	r6, r0
   354aa:	d1d6      	bne.n	3545a <_svfiprintf_r+0x176>
   354ac:	89ab      	ldrh	r3, [r5, #12]
   354ae:	065b      	lsls	r3, r3, #25
   354b0:	f53f af2c 	bmi.w	3530c <_svfiprintf_r+0x28>
   354b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   354b6:	b01d      	add	sp, #116	; 0x74
   354b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   354bc:	ab03      	add	r3, sp, #12
   354be:	462a      	mov	r2, r5
   354c0:	a904      	add	r1, sp, #16
   354c2:	4638      	mov	r0, r7
   354c4:	9300      	str	r3, [sp, #0]
   354c6:	4b05      	ldr	r3, [pc, #20]	; (354dc <_svfiprintf_r+0x1f8>)
   354c8:	f7ff fb5a 	bl	34b80 <_printf_i>
   354cc:	e7eb      	b.n	354a6 <_svfiprintf_r+0x1c2>
   354ce:	bf00      	nop
   354d0:	0003d317 	.word	0x0003d317
   354d4:	0003d321 	.word	0x0003d321
   354d8:	00034715 	.word	0x00034715
   354dc:	000395f3 	.word	0x000395f3
   354e0:	0003d31d 	.word	0x0003d31d

000354e4 <_sbrk_r>:
   354e4:	b538      	push	{r3, r4, r5, lr}
   354e6:	2300      	movs	r3, #0
   354e8:	4d05      	ldr	r5, [pc, #20]	; (35500 <_sbrk_r+0x1c>)
   354ea:	4604      	mov	r4, r0
   354ec:	4608      	mov	r0, r1
   354ee:	602b      	str	r3, [r5, #0]
   354f0:	f7f0 fb78 	bl	25be4 <_sbrk>
   354f4:	1c43      	adds	r3, r0, #1
   354f6:	d102      	bne.n	354fe <_sbrk_r+0x1a>
   354f8:	682b      	ldr	r3, [r5, #0]
   354fa:	b103      	cbz	r3, 354fe <_sbrk_r+0x1a>
   354fc:	6023      	str	r3, [r4, #0]
   354fe:	bd38      	pop	{r3, r4, r5, pc}
   35500:	2002c850 	.word	0x2002c850

00035504 <__malloc_lock>:
   35504:	4801      	ldr	r0, [pc, #4]	; (3550c <__malloc_lock+0x8>)
   35506:	f004 b92e 	b.w	39766 <__retarget_lock_acquire_recursive>
   3550a:	bf00      	nop
   3550c:	2002c858 	.word	0x2002c858

00035510 <__malloc_unlock>:
   35510:	4801      	ldr	r0, [pc, #4]	; (35518 <__malloc_unlock+0x8>)
   35512:	f004 b929 	b.w	39768 <__retarget_lock_release_recursive>
   35516:	bf00      	nop
   35518:	2002c858 	.word	0x2002c858

0003551c <z_impl_gpio_pin_interrupt_configure.constprop.0>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   3551c:	040a      	lsls	r2, r1, #16
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
   3551e:	b410      	push	{r4}
	const struct gpio_driver_api *api =
   35520:	6883      	ldr	r3, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   35522:	d505      	bpl.n	35530 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x14>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   35524:	68c2      	ldr	r2, [r0, #12]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   35526:	6812      	ldr	r2, [r2, #0]
   35528:	2a00      	cmp	r2, #0
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   3552a:	bfb8      	it	lt
   3552c:	f481 21c0 	eorlt.w	r1, r1, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   35530:	699c      	ldr	r4, [r3, #24]
   35532:	f401 32b0 	and.w	r2, r1, #90112	; 0x16000
   35536:	46a4      	mov	ip, r4
   35538:	f401 23c0 	and.w	r3, r1, #393216	; 0x60000
}
   3553c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->pin_interrupt_configure(port, pin, mode, trig);
   35540:	211f      	movs	r1, #31
   35542:	4760      	bx	ip

00035544 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   35544:	b510      	push	{r4, lr}
   35546:	460a      	mov	r2, r1
	struct gpio_driver_data *data =
   35548:	68c4      	ldr	r4, [r0, #12]
	return api->pin_configure(port, pin, flags);
   3554a:	6883      	ldr	r3, [r0, #8]
   3554c:	211f      	movs	r1, #31
   3554e:	681b      	ldr	r3, [r3, #0]
   35550:	4798      	blx	r3
	if (ret != 0) {
   35552:	b918      	cbnz	r0, 3555c <gpio_pin_configure.constprop.0+0x18>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   35554:	6823      	ldr	r3, [r4, #0]
   35556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   3555a:	6023      	str	r3, [r4, #0]
}
   3555c:	bd10      	pop	{r4, pc}

0003555e <enter_sleep>:
{
   3555e:	b508      	push	{r3, lr}
	lte_lc_power_off();
   35560:	f7f3 f994 	bl	2888c <lte_lc_power_off>
}
   35564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   35568:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   3556c:	2100      	movs	r1, #0
   3556e:	f7fe bc71 	b.w	33e54 <z_impl_k_sleep>

00035572 <main>:
	}
}
#else
void main(void)
{
	start_execute();
   35572:	f7e8 bc65 	b.w	1de40 <start_execute>

00035576 <slm_util_hex_check>:
	for (int i = 0; i < data_len; i++) {
   35576:	2300      	movs	r3, #0
{
   35578:	b510      	push	{r4, lr}
	for (int i = 0; i < data_len; i++) {
   3557a:	4299      	cmp	r1, r3
   3557c:	dc01      	bgt.n	35582 <slm_util_hex_check+0xc>
	return false;
   3557e:	2000      	movs	r0, #0
}
   35580:	bd10      	pop	{r4, pc}
		char ch = *(data + i);
   35582:	5cc2      	ldrb	r2, [r0, r3]
		if (!PRINTABLE_ASCII(ch) && ch != '\r' && ch != '\n') {
   35584:	f1a2 0420 	sub.w	r4, r2, #32
   35588:	2c5e      	cmp	r4, #94	; 0x5e
   3558a:	d903      	bls.n	35594 <slm_util_hex_check+0x1e>
   3558c:	2a0d      	cmp	r2, #13
   3558e:	d001      	beq.n	35594 <slm_util_hex_check+0x1e>
   35590:	2a0a      	cmp	r2, #10
   35592:	d101      	bne.n	35598 <slm_util_hex_check+0x22>
	for (int i = 0; i < data_len; i++) {
   35594:	3301      	adds	r3, #1
   35596:	e7f0      	b.n	3557a <slm_util_hex_check+0x4>
			return true;
   35598:	2001      	movs	r0, #1
   3559a:	e7f1      	b.n	35580 <slm_util_hex_check+0xa>

0003559c <slm_util_atoh>:
/**
 * @brief Decode hexdecimal string (ASCII text) to hex array
 */
int slm_util_atoh(const char *ascii, uint16_t ascii_len,
		uint8_t *hex, uint16_t hex_len)
{
   3559c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3559e:	4607      	mov	r7, r0
   355a0:	460c      	mov	r4, r1
	char hex_str[3];

	if (hex == NULL || ascii == NULL) {
   355a2:	b1e2      	cbz	r2, 355de <slm_util_atoh+0x42>
   355a4:	b1d8      	cbz	r0, 355de <slm_util_atoh+0x42>
		return -EINVAL;
	}
	if ((ascii_len % 2) > 0) {
   355a6:	f011 0501 	ands.w	r5, r1, #1
   355aa:	d118      	bne.n	355de <slm_util_atoh+0x42>
		return -EINVAL;
	}
	if (ascii_len > (hex_len * 2)) {
   355ac:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
   355b0:	dc15      	bgt.n	355de <slm_util_atoh+0x42>
		return -EINVAL;
	}

	hex_str[2] = '\0';
   355b2:	f88d 5006 	strb.w	r5, [sp, #6]
	for (int i = 0; (i * 2) < ascii_len; i++) {
   355b6:	1e56      	subs	r6, r2, #1
   355b8:	42ac      	cmp	r4, r5
   355ba:	dc02      	bgt.n	355c2 <slm_util_atoh+0x26>
		strncpy(&hex_str[0], ascii + (i * 2), 2);
		*(hex + i) = (uint8_t)strtoul(hex_str, NULL, 16);
	}

	return (ascii_len / 2);
   355bc:	0860      	lsrs	r0, r4, #1
}
   355be:	b003      	add	sp, #12
   355c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strncpy(&hex_str[0], ascii + (i * 2), 2);
   355c2:	1979      	adds	r1, r7, r5
   355c4:	2202      	movs	r2, #2
   355c6:	a801      	add	r0, sp, #4
   355c8:	f003 fc32 	bl	38e30 <strncpy>
		*(hex + i) = (uint8_t)strtoul(hex_str, NULL, 16);
   355cc:	2210      	movs	r2, #16
   355ce:	2100      	movs	r1, #0
   355d0:	a801      	add	r0, sp, #4
   355d2:	f7ff fd4b 	bl	3506c <strtoul>
   355d6:	3502      	adds	r5, #2
   355d8:	f806 0f01 	strb.w	r0, [r6, #1]!
	for (int i = 0; (i * 2) < ascii_len; i++) {
   355dc:	e7ec      	b.n	355b8 <slm_util_atoh+0x1c>
		return -EINVAL;
   355de:	f06f 0015 	mvn.w	r0, #21
   355e2:	e7ec      	b.n	355be <slm_util_atoh+0x22>

000355e4 <check_for_ipv4>:
 */
bool check_for_ipv4(const char *address, uint8_t length)
{
	int index;

	for (index = 0; index < length; index++) {
   355e4:	2300      	movs	r3, #0
   355e6:	4299      	cmp	r1, r3
   355e8:	dc01      	bgt.n	355ee <check_for_ipv4+0xa>
		} else {
			return false;
		}
	}

	return true;
   355ea:	2001      	movs	r0, #1
   355ec:	4770      	bx	lr
		char ch = *(address + index);
   355ee:	5cc2      	ldrb	r2, [r0, r3]
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
   355f0:	2a2e      	cmp	r2, #46	; 0x2e
   355f2:	d002      	beq.n	355fa <check_for_ipv4+0x16>
   355f4:	3a30      	subs	r2, #48	; 0x30
   355f6:	2a09      	cmp	r2, #9
   355f8:	d801      	bhi.n	355fe <check_for_ipv4+0x1a>
	for (index = 0; index < length; index++) {
   355fa:	3301      	adds	r3, #1
   355fc:	e7f3      	b.n	355e6 <check_for_ipv4+0x2>
			return false;
   355fe:	2000      	movs	r0, #0
}
   35600:	4770      	bx	lr

00035602 <uart_rx_disable>:
	return api->rx_disable(dev);
   35602:	6883      	ldr	r3, [r0, #8]
   35604:	695b      	ldr	r3, [r3, #20]
   35606:	4718      	bx	r3

00035608 <device_set_power_state.constprop.0>:
 * @param arg Caller passed argument to callback function
 *
 * @retval 0 If successful in queuing the request or changing the state.
 * @retval Errno Negative errno code if failure. Callback will not be called.
 */
static inline int device_set_power_state(const struct device *dev,
   35608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
					 uint32_t device_power_state,
					 device_pm_cb cb, void *arg)
{
	if (dev->device_pm_control) {
   3560a:	6904      	ldr	r4, [r0, #16]
static inline int device_set_power_state(const struct device *dev,
   3560c:	9103      	str	r1, [sp, #12]
	if (dev->device_pm_control) {
   3560e:	b134      	cbz	r4, 3561e <device_set_power_state.constprop.0+0x16>
		return dev->device_pm_control(dev,
   35610:	2300      	movs	r3, #0
   35612:	2101      	movs	r1, #1
   35614:	9300      	str	r3, [sp, #0]
   35616:	aa03      	add	r2, sp, #12
   35618:	47a0      	blx	r4
	} else {
		return device_pm_control_nop(dev,
						 DEVICE_PM_SET_POWER_STATE,
						 &device_power_state, cb, arg);
	}
}
   3561a:	b004      	add	sp, #16
   3561c:	bd10      	pop	{r4, pc}
		return device_pm_control_nop(dev,
   3561e:	4623      	mov	r3, r4
   35620:	2101      	movs	r1, #1
   35622:	9400      	str	r4, [sp, #0]
   35624:	aa03      	add	r2, sp, #12
   35626:	f002 fd8c 	bl	38142 <device_pm_control_nop>
   3562a:	e7f6      	b.n	3561a <device_set_power_state.constprop.0+0x12>

0003562c <response_handler>:
	int len = strlen(response);
   3562c:	4608      	mov	r0, r1
{
   3562e:	b510      	push	{r4, lr}
   35630:	460c      	mov	r4, r1
	int len = strlen(response);
   35632:	f7e7 fd1d 	bl	1d070 <strlen>
	if (len > 0) {
   35636:	1e01      	subs	r1, r0, #0
   35638:	dd04      	ble.n	35644 <response_handler+0x18>
		rsp_send(response, len);
   3563a:	4620      	mov	r0, r4
}
   3563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rsp_send(response, len);
   35640:	f7e8 bdd2 	b.w	1e1e8 <rsp_send>
}
   35644:	bd10      	pop	{r4, pc}

00035646 <slm_at_tcpip_uninit>:

/**@brief API to uninitialize TCP/IP AT commands handler
 */
int slm_at_tcpip_uninit(void)
{
	return do_socket_close(0);
   35646:	2000      	movs	r0, #0
   35648:	f7e9 bc62 	b.w	1ef10 <do_socket_close>

0003564c <close>:
   3564c:	f001 b8eb 	b.w	36826 <z_impl_zsock_close>

00035650 <close>:
   35650:	f001 b8e9 	b.w	36826 <z_impl_zsock_close>

00035654 <check_ics>:
	for (int i = len / 4; i > 0; i--) {
   35654:	460a      	mov	r2, r1
   35656:	2900      	cmp	r1, #0
   35658:	bfb8      	it	lt
   3565a:	1cca      	addlt	r2, r1, #3
   3565c:	1092      	asrs	r2, r2, #2
{
   3565e:	b570      	push	{r4, r5, r6, lr}
	uint32_t hcs = 0;
   35660:	2300      	movs	r3, #0
	for (int i = len / 4; i > 0; i--) {
   35662:	4614      	mov	r4, r2
	const uint32_t *ptr32 = (const uint32_t *)buffer;
   35664:	4606      	mov	r6, r0
	for (int i = len / 4; i > 0; i--) {
   35666:	2c00      	cmp	r4, #0
   35668:	dc14      	bgt.n	35694 <check_ics+0x40>
   3566a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (len & 2) {
   3566e:	078d      	lsls	r5, r1, #30
   35670:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   35674:	d505      	bpl.n	35682 <check_ics+0x2e>
		hcs += s;
   35676:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
		uint16_t s = *ptr16++;
   3567a:	3402      	adds	r4, #2
		hcs += s;
   3567c:	18c3      	adds	r3, r0, r3
			hcs++;
   3567e:	bf28      	it	cs
   35680:	3301      	addcs	r3, #1
	if (len & 1) {
   35682:	07ca      	lsls	r2, r1, #31
   35684:	d510      	bpl.n	356a8 <check_ics+0x54>
		hcs += s;
   35686:	7820      	ldrb	r0, [r4, #0]
   35688:	18c3      	adds	r3, r0, r3
		if (hcs < s) {
   3568a:	d30d      	bcc.n	356a8 <check_ics+0x54>
			hcs++;
   3568c:	3301      	adds	r3, #1
	return ~hcs;    /* One's complement */
   3568e:	43d8      	mvns	r0, r3
}
   35690:	b280      	uxth	r0, r0
   35692:	bd70      	pop	{r4, r5, r6, pc}
		hcs += s;
   35694:	f856 5b04 	ldr.w	r5, [r6], #4
	for (int i = len / 4; i > 0; i--) {
   35698:	3c01      	subs	r4, #1
   3569a:	195b      	adds	r3, r3, r5
			hcs++;
   3569c:	bf28      	it	cs
   3569e:	3301      	addcs	r3, #1
	for (int i = len / 4; i > 0; i--) {
   356a0:	e7e1      	b.n	35666 <check_ics+0x12>
		hcs = (hcs & 0xFFFF) + (hcs >> 16);
   356a2:	0c1a      	lsrs	r2, r3, #16
   356a4:	fa12 f383 	uxtah	r3, r2, r3
	while (hcs > 0xFFFF) {
   356a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   356ac:	d2f9      	bcs.n	356a2 <check_ics+0x4e>
   356ae:	e7ee      	b.n	3568e <check_ics+0x3a>

000356b0 <slm_at_icmp_uninit>:
/**@brief API to uninitialize ICMP AT commands handler
 */
int slm_at_icmp_uninit(void)
{
	return 0;
}
   356b0:	2000      	movs	r0, #0
   356b2:	4770      	bx	lr

000356b4 <slm_at_fota_uninit>:
/**@brief API to uninitialize FOTA AT commands handler
 */
int slm_at_fota_uninit(void)
{
	return 0;
}
   356b4:	2000      	movs	r0, #0
   356b6:	4770      	bx	lr

000356b8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   356b8:	b140      	cbz	r0, 356cc <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   356ba:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   356bc:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   356c0:	2b02      	cmp	r3, #2
   356c2:	d006      	beq.n	356d2 <sys_notify_validate+0x1a>
   356c4:	2b03      	cmp	r3, #3
   356c6:	d004      	beq.n	356d2 <sys_notify_validate+0x1a>
   356c8:	2b01      	cmp	r3, #1
   356ca:	d005      	beq.n	356d8 <sys_notify_validate+0x20>
		return -EINVAL;
   356cc:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   356d0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   356d2:	6803      	ldr	r3, [r0, #0]
   356d4:	2b00      	cmp	r3, #0
   356d6:	d0f9      	beq.n	356cc <sys_notify_validate+0x14>
		notify->result = 0;
   356d8:	2300      	movs	r3, #0
   356da:	6083      	str	r3, [r0, #8]
   356dc:	4618      	mov	r0, r3
   356de:	4770      	bx	lr

000356e0 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   356e0:	6843      	ldr	r3, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   356e2:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   356e4:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   356e8:	2b02      	cmp	r3, #2
	notify->result = res;
   356ea:	6081      	str	r1, [r0, #8]
	switch (method) {
   356ec:	d00b      	beq.n	35706 <sys_notify_finalize+0x26>
   356ee:	2b03      	cmp	r3, #3
   356f0:	d10c      	bne.n	3570c <sys_notify_finalize+0x2c>
	struct k_poll_signal *sig = NULL;
   356f2:	2300      	movs	r3, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   356f4:	6804      	ldr	r4, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   356f6:	2200      	movs	r2, #0
   356f8:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   356fa:	b113      	cbz	r3, 35702 <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   356fc:	4618      	mov	r0, r3
   356fe:	f7fe ffc1 	bl	34684 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   35702:	4620      	mov	r0, r4
   35704:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   35706:	2400      	movs	r4, #0
		sig = notify->method.signal;
   35708:	6803      	ldr	r3, [r0, #0]
		break;
   3570a:	e7f4      	b.n	356f6 <sys_notify_finalize+0x16>
	switch (method) {
   3570c:	2400      	movs	r4, #0
   3570e:	4623      	mov	r3, r4
   35710:	e7f1      	b.n	356f6 <sys_notify_finalize+0x16>

00035712 <arch_printk_char_out>:
}
   35712:	2000      	movs	r0, #0
   35714:	4770      	bx	lr

00035716 <str_out>:
{
   35716:	b530      	push	{r4, r5, lr}
   35718:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3571a:	680c      	ldr	r4, [r1, #0]
   3571c:	1c55      	adds	r5, r2, #1
   3571e:	b114      	cbz	r4, 35726 <str_out+0x10>
   35720:	684b      	ldr	r3, [r1, #4]
   35722:	4293      	cmp	r3, r2
   35724:	dc01      	bgt.n	3572a <str_out+0x14>
		ctx->count++;
   35726:	608d      	str	r5, [r1, #8]
}
   35728:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   3572a:	3b01      	subs	r3, #1
   3572c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   3572e:	bf08      	it	eq
   35730:	2200      	moveq	r2, #0
   35732:	608d      	str	r5, [r1, #8]
   35734:	bf0c      	ite	eq
   35736:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   35738:	54a0      	strbne	r0, [r4, r2]
   3573a:	e7f5      	b.n	35728 <str_out+0x12>

0003573c <printk>:
{
   3573c:	b40f      	push	{r0, r1, r2, r3}
   3573e:	b507      	push	{r0, r1, r2, lr}
   35740:	a904      	add	r1, sp, #16
   35742:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   35746:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   35748:	f000 fcd3 	bl	360f2 <log_printk>
}
   3574c:	b003      	add	sp, #12
   3574e:	f85d eb04 	ldr.w	lr, [sp], #4
   35752:	b004      	add	sp, #16
   35754:	4770      	bx	lr

00035756 <snprintk>:
{
   35756:	b40c      	push	{r2, r3}
   35758:	b507      	push	{r0, r1, r2, lr}
   3575a:	ab04      	add	r3, sp, #16
   3575c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   35760:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   35762:	f7ec ffb1 	bl	226c8 <vsnprintk>
}
   35766:	b003      	add	sp, #12
   35768:	f85d eb04 	ldr.w	lr, [sp], #4
   3576c:	b002      	add	sp, #8
   3576e:	4770      	bx	lr

00035770 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   35770:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   35772:	f013 0307 	ands.w	r3, r3, #7
   35776:	d105      	bne.n	35784 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   35778:	6803      	ldr	r3, [r0, #0]
   3577a:	2b00      	cmp	r3, #0
		evt = EVT_START;
   3577c:	bf0c      	ite	eq
   3577e:	2000      	moveq	r0, #0
   35780:	2003      	movne	r0, #3
   35782:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   35784:	2b02      	cmp	r3, #2
   35786:	d105      	bne.n	35794 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   35788:	8b43      	ldrh	r3, [r0, #26]
   3578a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   3578c:	bf14      	ite	ne
   3578e:	2000      	movne	r0, #0
   35790:	2004      	moveq	r0, #4
   35792:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   35794:	2b01      	cmp	r3, #1
   35796:	d105      	bne.n	357a4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   35798:	6803      	ldr	r3, [r0, #0]
   3579a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   3579c:	bf0c      	ite	eq
   3579e:	2000      	moveq	r0, #0
   357a0:	2005      	movne	r0, #5
   357a2:	4770      	bx	lr
	int evt = EVT_NOP;
   357a4:	2000      	movs	r0, #0
}
   357a6:	4770      	bx	lr

000357a8 <notify_one>:
{
   357a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   357aa:	460d      	mov	r5, r1
   357ac:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   357ae:	4619      	mov	r1, r3
   357b0:	1d28      	adds	r0, r5, #4
{
   357b2:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   357b4:	9300      	str	r3, [sp, #0]
   357b6:	f7ff ff93 	bl	356e0 <sys_notify_finalize>
	if (cb) {
   357ba:	4604      	mov	r4, r0
   357bc:	b140      	cbz	r0, 357d0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   357be:	e9dd 3200 	ldrd	r3, r2, [sp]
   357c2:	4629      	mov	r1, r5
   357c4:	4630      	mov	r0, r6
   357c6:	46a4      	mov	ip, r4
}
   357c8:	b002      	add	sp, #8
   357ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   357ce:	4760      	bx	ip
}
   357d0:	b002      	add	sp, #8
   357d2:	bd70      	pop	{r4, r5, r6, pc}

000357d4 <transition_complete>:
{
   357d4:	b410      	push	{r4}
	__asm__ volatile(
   357d6:	f04f 0420 	mov.w	r4, #32
   357da:	f3ef 8211 	mrs	r2, BASEPRI
   357de:	f384 8811 	msr	BASEPRI, r4
   357e2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   357e6:	6141      	str	r1, [r0, #20]
}
   357e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   357ec:	2101      	movs	r1, #1
   357ee:	f7ec bf7f 	b.w	226f0 <process_event>

000357f2 <validate_args>:
{
   357f2:	b510      	push	{r4, lr}
   357f4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   357f6:	b140      	cbz	r0, 3580a <validate_args+0x18>
   357f8:	b139      	cbz	r1, 3580a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   357fa:	1d08      	adds	r0, r1, #4
   357fc:	f7ff ff5c 	bl	356b8 <sys_notify_validate>
	if ((rv == 0)
   35800:	b928      	cbnz	r0, 3580e <validate_args+0x1c>
	    && ((cli->notify.flags
   35802:	68a3      	ldr	r3, [r4, #8]
   35804:	f033 0303 	bics.w	r3, r3, #3
   35808:	d001      	beq.n	3580e <validate_args+0x1c>
		rv = -EINVAL;
   3580a:	f06f 0015 	mvn.w	r0, #21
}
   3580e:	bd10      	pop	{r4, pc}

00035810 <onoff_manager_init>:
{
   35810:	b538      	push	{r3, r4, r5, lr}
   35812:	460c      	mov	r4, r1
	if ((mgr == NULL)
   35814:	4605      	mov	r5, r0
   35816:	b158      	cbz	r0, 35830 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   35818:	b151      	cbz	r1, 35830 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   3581a:	680b      	ldr	r3, [r1, #0]
   3581c:	b143      	cbz	r3, 35830 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   3581e:	684b      	ldr	r3, [r1, #4]
   35820:	b133      	cbz	r3, 35830 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   35822:	221c      	movs	r2, #28
   35824:	2100      	movs	r1, #0
   35826:	f003 f9aa 	bl	38b7e <memset>
	return 0;
   3582a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3582c:	612c      	str	r4, [r5, #16]
}
   3582e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   35830:	f06f 0015 	mvn.w	r0, #21
   35834:	e7fb      	b.n	3582e <onoff_manager_init+0x1e>

00035836 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   35836:	b570      	push	{r4, r5, r6, lr}
   35838:	4604      	mov	r4, r0
   3583a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   3583c:	f7ff ffd9 	bl	357f2 <validate_args>

	if (rv < 0) {
   35840:	1e05      	subs	r5, r0, #0
   35842:	db31      	blt.n	358a8 <onoff_request+0x72>
   35844:	f04f 0320 	mov.w	r3, #32
   35848:	f3ef 8111 	mrs	r1, BASEPRI
   3584c:	f383 8811 	msr	BASEPRI, r3
   35850:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   35854:	f64f 75ff 	movw	r5, #65535	; 0xffff
   35858:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   3585a:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   3585c:	42ab      	cmp	r3, r5
   3585e:	f000 0207 	and.w	r2, r0, #7
   35862:	d02e      	beq.n	358c2 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   35864:	2a02      	cmp	r2, #2
   35866:	d10e      	bne.n	35886 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   35868:	3301      	adds	r3, #1
   3586a:	8363      	strh	r3, [r4, #26]
	rv = state;
   3586c:	4615      	mov	r5, r2
		notify = true;
   3586e:	2301      	movs	r3, #1
	__asm__ volatile(
   35870:	f381 8811 	msr	BASEPRI, r1
   35874:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   35878:	b1b3      	cbz	r3, 358a8 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   3587a:	2300      	movs	r3, #0
   3587c:	4631      	mov	r1, r6
   3587e:	4620      	mov	r0, r4
   35880:	f7ff ff92 	bl	357a8 <notify_one>
   35884:	e010      	b.n	358a8 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   35886:	0783      	lsls	r3, r0, #30
   35888:	d001      	beq.n	3588e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   3588a:	2a06      	cmp	r2, #6
   3588c:	d10e      	bne.n	358ac <onoff_request+0x76>
	parent->next = child;
   3588e:	2300      	movs	r3, #0
   35890:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   35892:	6863      	ldr	r3, [r4, #4]
   35894:	b993      	cbnz	r3, 358bc <onoff_request+0x86>
	list->head = node;
   35896:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   3589a:	4615      	mov	r5, r2
   3589c:	b962      	cbnz	r2, 358b8 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   3589e:	460a      	mov	r2, r1
   358a0:	4620      	mov	r0, r4
   358a2:	2102      	movs	r1, #2
   358a4:	f7ec ff24 	bl	226f0 <process_event>
		}
	}

	return rv;
}
   358a8:	4628      	mov	r0, r5
   358aa:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   358ac:	2a05      	cmp	r2, #5
   358ae:	bf0c      	ite	eq
   358b0:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   358b4:	f06f 0504 	mvnne.w	r5, #4
   358b8:	2300      	movs	r3, #0
   358ba:	e7d9      	b.n	35870 <onoff_request+0x3a>
	parent->next = child;
   358bc:	601e      	str	r6, [r3, #0]
	list->tail = node;
   358be:	6066      	str	r6, [r4, #4]
}
   358c0:	e7eb      	b.n	3589a <onoff_request+0x64>
		rv = -EAGAIN;
   358c2:	f06f 050a 	mvn.w	r5, #10
   358c6:	e7f7      	b.n	358b8 <onoff_request+0x82>

000358c8 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   358c8:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   358ca:	f7fe fae9 	bl	33ea0 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   358ce:	2000      	movs	r0, #0
   358d0:	bd08      	pop	{r3, pc}

000358d2 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   358d2:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   358d4:	f7fe fb0a 	bl	33eec <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   358d8:	f110 0f0b 	cmn.w	r0, #11
   358dc:	d005      	beq.n	358ea <sys_sem_take+0x18>
   358de:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   358e2:	bf08      	it	eq
   358e4:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   358e8:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   358ea:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   358ee:	e7fb      	b.n	358e8 <sys_sem_take+0x16>

000358f0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   358f0:	4604      	mov	r4, r0
   358f2:	b508      	push	{r3, lr}
   358f4:	4608      	mov	r0, r1
   358f6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   358f8:	461a      	mov	r2, r3
   358fa:	47a0      	blx	r4
	return z_impl_k_current_get();
   358fc:	f7fe faca 	bl	33e94 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   35900:	f7ef ff88 	bl	25814 <z_impl_k_thread_abort>

00035904 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   35904:	b510      	push	{r4, lr}
   35906:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   35908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3590c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35910:	4620      	mov	r0, r4
   35912:	f7fd fee3 	bl	336dc <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   35916:	4603      	mov	r3, r0
   35918:	2800      	cmp	r0, #0
   3591a:	d0f5      	beq.n	35908 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   3591c:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3591e:	3308      	adds	r3, #8
   35920:	e8d3 1fef 	ldaex	r1, [r3]
   35924:	f021 0c01 	bic.w	ip, r1, #1
   35928:	e8c3 cfee 	stlex	lr, ip, [r3]
   3592c:	f1be 0f00 	cmp.w	lr, #0
   35930:	d1f6      	bne.n	35920 <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   35932:	07cb      	lsls	r3, r1, #31
   35934:	d500      	bpl.n	35938 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   35936:	4790      	blx	r2
	z_impl_k_yield();
   35938:	f7fe fa3e 	bl	33db8 <z_impl_k_yield>
   3593c:	e7e4      	b.n	35908 <z_work_q_main+0x4>

0003593e <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   3593e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   35940:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   35944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   35948:	bf2c      	ite	cs
   3594a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   3594e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   35952:	4770      	bx	lr

00035954 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   35954:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   35958:	6880      	ldr	r0, [r0, #8]
   3595a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   3595e:	bf2c      	ite	cs
   35960:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   35964:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   35968:	4770      	bx	lr

0003596a <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   3596a:	2201      	movs	r2, #1
{
   3596c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   3596e:	f7ff ffe6 	bl	3593e <chunk_field>
}
   35972:	0840      	lsrs	r0, r0, #1
   35974:	bd08      	pop	{r3, pc}

00035976 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   35976:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   35978:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   3597c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   35980:	d308      	bcc.n	35994 <set_chunk_used+0x1e>
		if (used) {
   35982:	684b      	ldr	r3, [r1, #4]
   35984:	b11a      	cbz	r2, 3598e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   35986:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   3598a:	604b      	str	r3, [r1, #4]
   3598c:	4770      	bx	lr
   3598e:	f023 0301 	bic.w	r3, r3, #1
   35992:	e7fa      	b.n	3598a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   35994:	884b      	ldrh	r3, [r1, #2]
   35996:	b11a      	cbz	r2, 359a0 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   35998:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   3599c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   3599e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   359a0:	f023 0301 	bic.w	r3, r3, #1
   359a4:	e7fa      	b.n	3599c <set_chunk_used+0x26>

000359a6 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   359a6:	0053      	lsls	r3, r2, #1
   359a8:	2201      	movs	r2, #1
   359aa:	f7ff bfd3 	b.w	35954 <chunk_set>

000359ae <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   359ae:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   359b0:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   359b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   359b6:	bf2c      	ite	cs
   359b8:	2002      	movcs	r0, #2
   359ba:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   359bc:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   359be:	fab0 f080 	clz	r0, r0
}
   359c2:	f1c0 001f 	rsb	r0, r0, #31
   359c6:	4770      	bx	lr

000359c8 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   359c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   359ca:	4616      	mov	r6, r2
   359cc:	4604      	mov	r4, r0
   359ce:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   359d0:	f7ff ffcb 	bl	3596a <chunk_size>
   359d4:	4631      	mov	r1, r6
   359d6:	4605      	mov	r5, r0
   359d8:	4620      	mov	r0, r4
   359da:	f7ff ffc6 	bl	3596a <chunk_size>
   359de:	182b      	adds	r3, r5, r0

	set_chunk_size(h, lc, newsz);
   359e0:	461a      	mov	r2, r3
   359e2:	4639      	mov	r1, r7
   359e4:	4620      	mov	r0, r4
   359e6:	9301      	str	r3, [sp, #4]
   359e8:	f7ff ffdd 	bl	359a6 <set_chunk_size>
	return c + chunk_size(h, c);
   359ec:	4631      	mov	r1, r6
   359ee:	4620      	mov	r0, r4
   359f0:	f7ff ffbb 	bl	3596a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   359f4:	2200      	movs	r2, #0
   359f6:	1831      	adds	r1, r6, r0
   359f8:	4620      	mov	r0, r4
   359fa:	9b01      	ldr	r3, [sp, #4]
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   359fc:	b003      	add	sp, #12
   359fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   35a02:	f7ff bfa7 	b.w	35954 <chunk_set>

00035a06 <split_chunks>:
{
   35a06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35a08:	4614      	mov	r4, r2
   35a0a:	460e      	mov	r6, r1
   35a0c:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   35a0e:	f7ff ffac 	bl	3596a <chunk_size>
	size_t lsz = rc - lc;
   35a12:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   35a14:	1b32      	subs	r2, r6, r4
   35a16:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   35a18:	4631      	mov	r1, r6
   35a1a:	461a      	mov	r2, r3
   35a1c:	4628      	mov	r0, r5
   35a1e:	9301      	str	r3, [sp, #4]
   35a20:	f7ff ffc1 	bl	359a6 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   35a24:	463a      	mov	r2, r7
   35a26:	4621      	mov	r1, r4
   35a28:	4628      	mov	r0, r5
   35a2a:	f7ff ffbc 	bl	359a6 <set_chunk_size>
   35a2e:	9b01      	ldr	r3, [sp, #4]
   35a30:	2200      	movs	r2, #0
   35a32:	4621      	mov	r1, r4
   35a34:	4628      	mov	r0, r5
   35a36:	f7ff ff8d 	bl	35954 <chunk_set>
	return c + chunk_size(h, c);
   35a3a:	4621      	mov	r1, r4
   35a3c:	4628      	mov	r0, r5
   35a3e:	f7ff ff94 	bl	3596a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   35a42:	463b      	mov	r3, r7
   35a44:	1821      	adds	r1, r4, r0
   35a46:	2200      	movs	r2, #0
   35a48:	4628      	mov	r0, r5
}
   35a4a:	b003      	add	sp, #12
   35a4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   35a50:	f7ff bf80 	b.w	35954 <chunk_set>

00035a54 <free_list_remove_bidx>:
{
   35a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35a58:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   35a5a:	2203      	movs	r2, #3
   35a5c:	460e      	mov	r6, r1
   35a5e:	4604      	mov	r4, r0
   35a60:	f7ff ff6d 	bl	3593e <chunk_field>
	if (next_free_chunk(h, c) == c) {
   35a64:	4286      	cmp	r6, r0
   35a66:	4605      	mov	r5, r0
   35a68:	f107 0804 	add.w	r8, r7, #4
   35a6c:	d10b      	bne.n	35a86 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   35a6e:	2301      	movs	r3, #1
   35a70:	fa03 f707 	lsl.w	r7, r3, r7
   35a74:	68e3      	ldr	r3, [r4, #12]
   35a76:	ea23 0307 	bic.w	r3, r3, r7
   35a7a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   35a7c:	2300      	movs	r3, #0
   35a7e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   35a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   35a86:	4631      	mov	r1, r6
   35a88:	2202      	movs	r2, #2
   35a8a:	4620      	mov	r0, r4
   35a8c:	f7ff ff57 	bl	3593e <chunk_field>
   35a90:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   35a92:	462b      	mov	r3, r5
   35a94:	4601      	mov	r1, r0
   35a96:	2203      	movs	r2, #3
   35a98:	4620      	mov	r0, r4
		b->next = second;
   35a9a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   35a9e:	f7ff ff59 	bl	35954 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   35aa2:	4633      	mov	r3, r6
   35aa4:	4629      	mov	r1, r5
   35aa6:	4620      	mov	r0, r4
}
   35aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   35aac:	2202      	movs	r2, #2
   35aae:	f7ff bf51 	b.w	35954 <chunk_set>

00035ab2 <free_list_remove>:
{
   35ab2:	b538      	push	{r3, r4, r5, lr}
   35ab4:	4604      	mov	r4, r0
   35ab6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   35ab8:	f7ff ff57 	bl	3596a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   35abc:	68a3      	ldr	r3, [r4, #8]
   35abe:	4601      	mov	r1, r0
   35ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   35ac4:	d301      	bcc.n	35aca <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   35ac6:	2801      	cmp	r0, #1
   35ac8:	d009      	beq.n	35ade <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   35aca:	4620      	mov	r0, r4
   35acc:	f7ff ff6f 	bl	359ae <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   35ad0:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   35ad2:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   35ad4:	4620      	mov	r0, r4
}
   35ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   35ada:	f7ff bfbb 	b.w	35a54 <free_list_remove_bidx>
}
   35ade:	bd38      	pop	{r3, r4, r5, pc}

00035ae0 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   35ae0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   35ae4:	4604      	mov	r4, r0
   35ae6:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   35ae8:	f7ff ff61 	bl	359ae <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   35aec:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   35aee:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   35af0:	4620      	mov	r0, r4
   35af2:	f7ff ff5c 	bl	359ae <bucket_idx>
   35af6:	42a8      	cmp	r0, r5
   35af8:	da04      	bge.n	35b04 <alloc_chunk+0x24>
		return 0;
   35afa:	2100      	movs	r1, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   35afc:	4608      	mov	r0, r1
   35afe:	b003      	add	sp, #12
   35b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   35b04:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   35b08:	f8d9 8010 	ldr.w	r8, [r9, #16]
   35b0c:	f1b8 0f00 	cmp.w	r8, #0
   35b10:	d019      	beq.n	35b46 <alloc_chunk+0x66>
   35b12:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   35b14:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   35b18:	4620      	mov	r0, r4
   35b1a:	9101      	str	r1, [sp, #4]
   35b1c:	f7ff ff25 	bl	3596a <chunk_size>
   35b20:	42b8      	cmp	r0, r7
   35b22:	9901      	ldr	r1, [sp, #4]
   35b24:	d305      	bcc.n	35b32 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   35b26:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   35b28:	4620      	mov	r0, r4
   35b2a:	f7ff ff93 	bl	35a54 <free_list_remove_bidx>
   35b2e:	9901      	ldr	r1, [sp, #4]
		return c;
   35b30:	e7e4      	b.n	35afc <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   35b32:	2203      	movs	r2, #3
   35b34:	4620      	mov	r0, r4
   35b36:	f7ff ff02 	bl	3593e <chunk_field>
		} while (--i && b->next != first);
   35b3a:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   35b3c:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   35b40:	d001      	beq.n	35b46 <alloc_chunk+0x66>
   35b42:	4580      	cmp	r8, r0
   35b44:	d1e6      	bne.n	35b14 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   35b46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35b4a:	68e3      	ldr	r3, [r4, #12]
   35b4c:	3501      	adds	r5, #1
   35b4e:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   35b50:	401a      	ands	r2, r3
   35b52:	d0d2      	beq.n	35afa <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   35b54:	fa92 f2a2 	rbit	r2, r2
   35b58:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   35b5c:	1d13      	adds	r3, r2, #4
   35b5e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   35b62:	9101      	str	r1, [sp, #4]
   35b64:	e7e0      	b.n	35b28 <alloc_chunk+0x48>

00035b66 <free_list_add>:
{
   35b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35b6a:	4604      	mov	r4, r0
   35b6c:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   35b6e:	f7ff fefc 	bl	3596a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   35b72:	68a3      	ldr	r3, [r4, #8]
   35b74:	4601      	mov	r1, r0
   35b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   35b7a:	d301      	bcc.n	35b80 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   35b7c:	2801      	cmp	r0, #1
   35b7e:	d035      	beq.n	35bec <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   35b80:	4620      	mov	r0, r4
   35b82:	f7ff ff14 	bl	359ae <bucket_idx>
	if (b->next == 0U) {
   35b86:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   35b8a:	6916      	ldr	r6, [r2, #16]
   35b8c:	b99e      	cbnz	r6, 35bb6 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   35b8e:	2301      	movs	r3, #1
   35b90:	fa03 f000 	lsl.w	r0, r3, r0
   35b94:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   35b96:	4629      	mov	r1, r5
   35b98:	4303      	orrs	r3, r0
   35b9a:	60e3      	str	r3, [r4, #12]
   35b9c:	4620      	mov	r0, r4
		b->next = c;
   35b9e:	6115      	str	r5, [r2, #16]
   35ba0:	462b      	mov	r3, r5
   35ba2:	2202      	movs	r2, #2
   35ba4:	f7ff fed6 	bl	35954 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   35ba8:	2203      	movs	r2, #3
   35baa:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   35bac:	4620      	mov	r0, r4
}
   35bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   35bb2:	f7ff becf 	b.w	35954 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   35bb6:	2202      	movs	r2, #2
   35bb8:	4631      	mov	r1, r6
   35bba:	4620      	mov	r0, r4
   35bbc:	f7ff febf 	bl	3593e <chunk_field>
   35bc0:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   35bc2:	4603      	mov	r3, r0
   35bc4:	2202      	movs	r2, #2
   35bc6:	4629      	mov	r1, r5
   35bc8:	4620      	mov	r0, r4
   35bca:	f7ff fec3 	bl	35954 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   35bce:	4633      	mov	r3, r6
   35bd0:	2203      	movs	r2, #3
   35bd2:	4629      	mov	r1, r5
   35bd4:	4620      	mov	r0, r4
   35bd6:	f7ff febd 	bl	35954 <chunk_set>
   35bda:	2203      	movs	r2, #3
   35bdc:	4639      	mov	r1, r7
   35bde:	462b      	mov	r3, r5
   35be0:	4620      	mov	r0, r4
   35be2:	f7ff feb7 	bl	35954 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   35be6:	2202      	movs	r2, #2
   35be8:	4631      	mov	r1, r6
   35bea:	e7df      	b.n	35bac <free_list_add+0x46>
   35bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035bf0 <sys_heap_free>:
{
   35bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (mem == NULL) {
   35bf2:	2900      	cmp	r1, #0
   35bf4:	d050      	beq.n	35c98 <sys_heap_free+0xa8>
	struct z_heap *h = heap->heap;
   35bf6:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
   35bf8:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   35bfa:	68ab      	ldr	r3, [r5, #8]
   35bfc:	4628      	mov	r0, r5
   35bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   35c02:	bf2c      	ite	cs
   35c04:	2408      	movcs	r4, #8
   35c06:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   35c08:	1b0c      	subs	r4, r1, r4
   35c0a:	1b64      	subs	r4, r4, r5
   35c0c:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   35c0e:	4621      	mov	r1, r4
   35c10:	f7ff feb1 	bl	35976 <set_chunk_used>
	return c + chunk_size(h, c);
   35c14:	4621      	mov	r1, r4
   35c16:	f7ff fea8 	bl	3596a <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   35c1a:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   35c1c:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   35c1e:	4628      	mov	r0, r5
   35c20:	9101      	str	r1, [sp, #4]
   35c22:	f7ff fe8c 	bl	3593e <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   35c26:	f010 0f01 	tst.w	r0, #1
   35c2a:	9901      	ldr	r1, [sp, #4]
   35c2c:	d10b      	bne.n	35c46 <sys_heap_free+0x56>
		free_list_remove(h, right_chunk(h, c));
   35c2e:	4628      	mov	r0, r5
   35c30:	f7ff ff3f 	bl	35ab2 <free_list_remove>
	return c + chunk_size(h, c);
   35c34:	4621      	mov	r1, r4
   35c36:	4628      	mov	r0, r5
   35c38:	f7ff fe97 	bl	3596a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   35c3c:	4621      	mov	r1, r4
   35c3e:	1822      	adds	r2, r4, r0
   35c40:	4628      	mov	r0, r5
   35c42:	f7ff fec1 	bl	359c8 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   35c46:	2200      	movs	r2, #0
   35c48:	4621      	mov	r1, r4
   35c4a:	4628      	mov	r0, r5
   35c4c:	f7ff fe77 	bl	3593e <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   35c50:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   35c52:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   35c54:	4628      	mov	r0, r5
   35c56:	9101      	str	r1, [sp, #4]
   35c58:	f7ff fe71 	bl	3593e <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   35c5c:	f010 0601 	ands.w	r6, r0, #1
   35c60:	9901      	ldr	r1, [sp, #4]
   35c62:	d112      	bne.n	35c8a <sys_heap_free+0x9a>
		free_list_remove(h, left_chunk(h, c));
   35c64:	4628      	mov	r0, r5
   35c66:	f7ff ff24 	bl	35ab2 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   35c6a:	4621      	mov	r1, r4
   35c6c:	4632      	mov	r2, r6
   35c6e:	4628      	mov	r0, r5
   35c70:	f7ff fe65 	bl	3593e <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   35c74:	4622      	mov	r2, r4
   35c76:	1a21      	subs	r1, r4, r0
   35c78:	4628      	mov	r0, r5
   35c7a:	f7ff fea5 	bl	359c8 <merge_chunks>
   35c7e:	4621      	mov	r1, r4
   35c80:	4632      	mov	r2, r6
   35c82:	4628      	mov	r0, r5
   35c84:	f7ff fe5b 	bl	3593e <chunk_field>
   35c88:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   35c8a:	4621      	mov	r1, r4
   35c8c:	4628      	mov	r0, r5
}
   35c8e:	b002      	add	sp, #8
   35c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   35c94:	f7ff bf67 	b.w	35b66 <free_list_add>
}
   35c98:	b002      	add	sp, #8
   35c9a:	bd70      	pop	{r4, r5, r6, pc}

00035c9c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   35c9c:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   35c9e:	b909      	cbnz	r1, 35ca4 <sys_heap_alloc+0x8>
		return NULL;
   35ca0:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   35ca2:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   35ca4:	6805      	ldr	r5, [r0, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   35ca6:	1dcc      	adds	r4, r1, #7
	return big_heap(h) ? 8 : 4;
   35ca8:	68ab      	ldr	r3, [r5, #8]
	chunkid_t c = alloc_chunk(h, chunk_sz);
   35caa:	4628      	mov	r0, r5
   35cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   35cb0:	bf2c      	ite	cs
   35cb2:	2208      	movcs	r2, #8
   35cb4:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   35cb6:	4414      	add	r4, r2
   35cb8:	08e4      	lsrs	r4, r4, #3
   35cba:	4621      	mov	r1, r4
   35cbc:	f7ff ff10 	bl	35ae0 <alloc_chunk>
	if (c == 0U) {
   35cc0:	4606      	mov	r6, r0
   35cc2:	2800      	cmp	r0, #0
   35cc4:	d0ec      	beq.n	35ca0 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   35cc6:	4601      	mov	r1, r0
   35cc8:	4628      	mov	r0, r5
   35cca:	f7ff fe4e 	bl	3596a <chunk_size>
   35cce:	42a0      	cmp	r0, r4
   35cd0:	d909      	bls.n	35ce6 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   35cd2:	4434      	add	r4, r6
   35cd4:	4631      	mov	r1, r6
   35cd6:	4628      	mov	r0, r5
   35cd8:	4622      	mov	r2, r4
   35cda:	f7ff fe94 	bl	35a06 <split_chunks>
		free_list_add(h, c + chunk_sz);
   35cde:	4621      	mov	r1, r4
   35ce0:	4628      	mov	r0, r5
   35ce2:	f7ff ff40 	bl	35b66 <free_list_add>
	set_chunk_used(h, c, true);
   35ce6:	4628      	mov	r0, r5
   35ce8:	2201      	movs	r2, #1
   35cea:	4631      	mov	r1, r6
   35cec:	f7ff fe43 	bl	35976 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   35cf0:	68ab      	ldr	r3, [r5, #8]
   35cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   35cf6:	bf2c      	ite	cs
   35cf8:	2008      	movcs	r0, #8
   35cfa:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   35cfc:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   35d00:	4428      	add	r0, r5
	return chunk_mem(h, c);
   35d02:	e7ce      	b.n	35ca2 <sys_heap_alloc+0x6>

00035d04 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   35d04:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   35d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35d0a:	bf2c      	ite	cs
   35d0c:	2508      	movcs	r5, #8
   35d0e:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   35d10:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   35d12:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   35d14:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   35d16:	1dcc      	adds	r4, r1, #7
   35d18:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   35d1c:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   35d1e:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   35d22:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   35d24:	440d      	add	r5, r1
   35d26:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   35d2a:	1b2d      	subs	r5, r5, r4
   35d2c:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   35d2e:	4629      	mov	r1, r5
   35d30:	4620      	mov	r0, r4
	h->len = buf_sz;
   35d32:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   35d34:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   35d36:	f7ff fe3a 	bl	359ae <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   35d3a:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   35d3c:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   35d3e:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   35d40:	361b      	adds	r6, #27
   35d42:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   35d44:	f104 0210 	add.w	r2, r4, #16
   35d48:	428b      	cmp	r3, r1
   35d4a:	db29      	blt.n	35da0 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   35d4c:	4632      	mov	r2, r6
   35d4e:	4620      	mov	r0, r4
   35d50:	2100      	movs	r1, #0
   35d52:	f7ff fe28 	bl	359a6 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   35d56:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   35d58:	4620      	mov	r0, r4
   35d5a:	2201      	movs	r2, #1
   35d5c:	2100      	movs	r1, #0
   35d5e:	f7ff fe0a 	bl	35976 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   35d62:	463a      	mov	r2, r7
   35d64:	4631      	mov	r1, r6
   35d66:	f7ff fe1e 	bl	359a6 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   35d6a:	4633      	mov	r3, r6
   35d6c:	4631      	mov	r1, r6
   35d6e:	4620      	mov	r0, r4
   35d70:	2200      	movs	r2, #0
   35d72:	f7ff fdef 	bl	35954 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   35d76:	4629      	mov	r1, r5
   35d78:	4620      	mov	r0, r4
   35d7a:	2200      	movs	r2, #0
   35d7c:	f7ff fe13 	bl	359a6 <set_chunk_size>
   35d80:	463b      	mov	r3, r7
   35d82:	4629      	mov	r1, r5
   35d84:	4620      	mov	r0, r4
   35d86:	2200      	movs	r2, #0
   35d88:	f7ff fde4 	bl	35954 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   35d8c:	4629      	mov	r1, r5
   35d8e:	4620      	mov	r0, r4
   35d90:	2201      	movs	r2, #1
   35d92:	f7ff fdf0 	bl	35976 <set_chunk_used>

	free_list_add(h, chunk0_size);
   35d96:	4631      	mov	r1, r6
}
   35d98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   35d9c:	f7ff bee3 	b.w	35b66 <free_list_add>
		h->buckets[i].next = 0;
   35da0:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   35da4:	3301      	adds	r3, #1
   35da6:	e7cf      	b.n	35d48 <sys_heap_init+0x44>

00035da8 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   35da8:	2100      	movs	r1, #0
{
   35daa:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   35dac:	e9d0 6500 	ldrd	r6, r5, [r0]
   35db0:	0872      	lsrs	r2, r6, #1
   35db2:	f006 0301 	and.w	r3, r6, #1
   35db6:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   35dba:	189b      	adds	r3, r3, r2
   35dbc:	ea4f 0455 	mov.w	r4, r5, lsr #1
   35dc0:	eb44 0101 	adc.w	r1, r4, r1
   35dc4:	e9c0 3100 	strd	r3, r1, [r0]
}
   35dc8:	bd70      	pop	{r4, r5, r6, pc}

00035dca <_ldiv5>:
	__asm__ ("" : "+r" (m));
   35dca:	f04f 3133 	mov.w	r1, #858993459	; 0x33333333
	result = ((uint64_t)(m * 3U) << 32) | (m * 3U);
   35dce:	eb01 0341 	add.w	r3, r1, r1, lsl #1
{
   35dd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t v_lo = *v;
   35dd6:	e9d0 2400 	ldrd	r2, r4, [r0]
	result = ((uint64_t)(m * 3U) << 32) | (m * 3U);
   35dda:	461d      	mov	r5, r3
	result >>= 32;
   35ddc:	2700      	movs	r7, #0
	result += (uint64_t)v_lo * m;
   35dde:	fba2 8901 	umull	r8, r9, r2, r1
   35de2:	eb18 0505 	adds.w	r5, r8, r5
	result += (uint64_t)v_hi * m;
   35de6:	fba4 4501 	umull	r4, r5, r4, r1
	result += (uint64_t)v_lo * m;
   35dea:	eb49 0603 	adc.w	r6, r9, r3
	result += (uint64_t)v_hi * m;
   35dee:	eb18 0204 	adds.w	r2, r8, r4
   35df2:	eb49 0105 	adc.w	r1, r9, r5
   35df6:	1992      	adds	r2, r2, r6
	result >>= 32;
   35df8:	463a      	mov	r2, r7
	result += (uint64_t)v_hi * m;
   35dfa:	eb47 0101 	adc.w	r1, r7, r1
	result += (uint64_t)v_hi * m;
   35dfe:	1863      	adds	r3, r4, r1
   35e00:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   35e04:	e9c0 3200 	strd	r3, r2, [r0]
}
   35e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00035e0c <_get_digit>:
	if (*digit_count > 0) {
   35e0c:	680b      	ldr	r3, [r1, #0]
{
   35e0e:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   35e10:	2b00      	cmp	r3, #0
   35e12:	dd10      	ble.n	35e36 <_get_digit+0x2a>
		--*digit_count;
   35e14:	3b01      	subs	r3, #1
   35e16:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   35e18:	210a      	movs	r1, #10
   35e1a:	6802      	ldr	r2, [r0, #0]
   35e1c:	6844      	ldr	r4, [r0, #4]
   35e1e:	fba2 5601 	umull	r5, r6, r2, r1
   35e22:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   35e26:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   35e2a:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   35e2e:	0f31      	lsrs	r1, r6, #28
   35e30:	3130      	adds	r1, #48	; 0x30
}
   35e32:	4608      	mov	r0, r1
   35e34:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   35e36:	2130      	movs	r1, #48	; 0x30
   35e38:	e7fb      	b.n	35e32 <_get_digit+0x26>

00035e3a <outs>:
{
   35e3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35e3e:	4680      	mov	r8, r0
   35e40:	4689      	mov	r9, r1
   35e42:	4616      	mov	r6, r2
   35e44:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   35e46:	4615      	mov	r5, r2
   35e48:	42bd      	cmp	r5, r7
   35e4a:	eba5 0406 	sub.w	r4, r5, r6
   35e4e:	d305      	bcc.n	35e5c <outs+0x22>
   35e50:	b10f      	cbz	r7, 35e56 <outs+0x1c>
	return (int)count;
   35e52:	4620      	mov	r0, r4
   35e54:	e008      	b.n	35e68 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   35e56:	782b      	ldrb	r3, [r5, #0]
   35e58:	2b00      	cmp	r3, #0
   35e5a:	d0fa      	beq.n	35e52 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   35e5c:	4649      	mov	r1, r9
   35e5e:	f815 0b01 	ldrb.w	r0, [r5], #1
   35e62:	47c0      	blx	r8
		if (rc < 0) {
   35e64:	2800      	cmp	r0, #0
   35e66:	daef      	bge.n	35e48 <outs+0xe>
}
   35e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00035e6c <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   35e6c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   35e70:	4770      	bx	lr

00035e72 <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   35e72:	b570      	push	{r4, r5, r6, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   35e74:	6984      	ldr	r4, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   35e76:	6885      	ldr	r5, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   35e78:	6906      	ldr	r6, [r0, #16]
   35e7a:	b18c      	cbz	r4, 35ea0 <ring_buf_put_claim+0x2e>
   35e7c:	402c      	ands	r4, r5
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   35e7e:	6803      	ldr	r3, [r0, #0]
   35e80:	4433      	add	r3, r6
   35e82:	1b5b      	subs	r3, r3, r5
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   35e84:	429a      	cmp	r2, r3
   35e86:	bf28      	it	cs
   35e88:	461a      	movcs	r2, r3
	trail_size = buf->size - tmp_trail_mod;
   35e8a:	1b36      	subs	r6, r6, r4

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   35e8c:	42b2      	cmp	r2, r6
   35e8e:	bf28      	it	cs
   35e90:	4632      	movcs	r2, r6
	*data = &buf->buf.buf8[tmp_trail_mod];
   35e92:	6943      	ldr	r3, [r0, #20]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   35e94:	4415      	add	r5, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
   35e96:	441c      	add	r4, r3
   35e98:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   35e9a:	6085      	str	r5, [r0, #8]

	return allocated;
}
   35e9c:	4610      	mov	r0, r2
   35e9e:	bd70      	pop	{r4, r5, r6, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   35ea0:	fbb5 f4f6 	udiv	r4, r5, r6
   35ea4:	fb06 5414 	mls	r4, r6, r4, r5
   35ea8:	e7e9      	b.n	35e7e <ring_buf_put_claim+0xc>

00035eaa <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->tail + size) > (buf->head + buf->size)) {
   35eaa:	6843      	ldr	r3, [r0, #4]
   35eac:	6902      	ldr	r2, [r0, #16]
   35eae:	4419      	add	r1, r3
   35eb0:	6803      	ldr	r3, [r0, #0]
   35eb2:	4413      	add	r3, r2
   35eb4:	4299      	cmp	r1, r3
		return -EINVAL;
	}

	buf->tail += size;
	buf->misc.byte_mode.tmp_tail = buf->tail;
   35eb6:	bf9a      	itte	ls
   35eb8:	e9c0 1101 	strdls	r1, r1, [r0, #4]

	return 0;
   35ebc:	2000      	movls	r0, #0
		return -EINVAL;
   35ebe:	f06f 0015 	mvnhi.w	r0, #21
}
   35ec2:	4770      	bx	lr

00035ec4 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   35ec4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   35ec8:	4680      	mov	r8, r0
   35eca:	460e      	mov	r6, r1
   35ecc:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   35ece:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   35ed0:	462a      	mov	r2, r5
   35ed2:	a901      	add	r1, sp, #4
   35ed4:	4640      	mov	r0, r8
   35ed6:	f7ff ffcc 	bl	35e72 <ring_buf_put_claim>
   35eda:	4604      	mov	r4, r0
   35edc:	4602      	mov	r2, r0
   35ede:	4631      	mov	r1, r6
   35ee0:	9801      	ldr	r0, [sp, #4]
   35ee2:	f002 fe2c 	bl	38b3e <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   35ee6:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   35ee8:	4427      	add	r7, r4
		data += partial_size;
   35eea:	4426      	add	r6, r4
	} while (size && partial_size);
   35eec:	d001      	beq.n	35ef2 <ring_buf_put+0x2e>
   35eee:	2c00      	cmp	r4, #0
   35ef0:	d1ee      	bne.n	35ed0 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   35ef2:	4639      	mov	r1, r7
   35ef4:	4640      	mov	r0, r8
   35ef6:	f7ff ffd8 	bl	35eaa <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   35efa:	4638      	mov	r0, r7
   35efc:	b002      	add	sp, #8
   35efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035f02 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   35f02:	b570      	push	{r4, r5, r6, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   35f04:	6984      	ldr	r4, [r0, #24]
	uint32_t space, granted_size, trail_size, tmp_head_mod;

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   35f06:	68c5      	ldr	r5, [r0, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   35f08:	6903      	ldr	r3, [r0, #16]
   35f0a:	b184      	cbz	r4, 35f2e <ring_buf_get_claim+0x2c>
   35f0c:	402c      	ands	r4, r5
	space = buf->tail - buf->misc.byte_mode.tmp_head;
   35f0e:	6846      	ldr	r6, [r0, #4]
	trail_size = buf->size - tmp_head_mod;
   35f10:	1b1b      	subs	r3, r3, r4
	space = buf->tail - buf->misc.byte_mode.tmp_head;
   35f12:	1b76      	subs	r6, r6, r5

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   35f14:	42b2      	cmp	r2, r6
   35f16:	bf28      	it	cs
   35f18:	4632      	movcs	r2, r6

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   35f1a:	4293      	cmp	r3, r2
   35f1c:	bf28      	it	cs
   35f1e:	4613      	movcs	r3, r2

	*data = &buf->buf.buf8[tmp_head_mod];
   35f20:	6942      	ldr	r2, [r0, #20]
	buf->misc.byte_mode.tmp_head += granted_size;
   35f22:	441d      	add	r5, r3
	*data = &buf->buf.buf8[tmp_head_mod];
   35f24:	4414      	add	r4, r2
   35f26:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   35f28:	60c5      	str	r5, [r0, #12]

	return granted_size;
}
   35f2a:	4618      	mov	r0, r3
   35f2c:	bd70      	pop	{r4, r5, r6, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   35f2e:	fbb5 f4f3 	udiv	r4, r5, r3
   35f32:	fb03 5414 	mls	r4, r3, r4, r5
   35f36:	e7ea      	b.n	35f0e <ring_buf_get_claim+0xc>

00035f38 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->head + size) > buf->tail) {
   35f38:	6803      	ldr	r3, [r0, #0]
{
   35f3a:	b510      	push	{r4, lr}
	if ((buf->head + size) > buf->tail) {
   35f3c:	4419      	add	r1, r3
   35f3e:	6843      	ldr	r3, [r0, #4]
{
   35f40:	4604      	mov	r4, r0
	if ((buf->head + size) > buf->tail) {
   35f42:	4299      	cmp	r1, r3
   35f44:	d824      	bhi.n	35f90 <ring_buf_get_finish+0x58>
		return -EINVAL;
	}

	buf->head += size;
   35f46:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   35f48:	60c1      	str	r1, [r0, #12]
	uint32_t threshold = ring_buf_get_rewind_threshold();
   35f4a:	f7ff ff8f 	bl	35e6c <ring_buf_get_rewind_threshold>
	if (buf->head < threshold) {
   35f4e:	6823      	ldr	r3, [r4, #0]
   35f50:	4298      	cmp	r0, r3
   35f52:	d81b      	bhi.n	35f8c <ring_buf_get_finish+0x54>
	rewind = buf->size * (threshold / buf->size);
   35f54:	6923      	ldr	r3, [r4, #16]
   35f56:	fbb0 f0f3 	udiv	r0, r0, r3
   35f5a:	4358      	muls	r0, r3
	__asm__ volatile(
   35f5c:	f04f 0320 	mov.w	r3, #32
   35f60:	f3ef 8211 	mrs	r2, BASEPRI
   35f64:	f383 8811 	msr	BASEPRI, r3
   35f68:	f3bf 8f6f 	isb	sy
	buf->tail -= rewind;
   35f6c:	6863      	ldr	r3, [r4, #4]
   35f6e:	1a1b      	subs	r3, r3, r0
   35f70:	6063      	str	r3, [r4, #4]
	buf->head -= rewind;
   35f72:	6823      	ldr	r3, [r4, #0]
   35f74:	1a1b      	subs	r3, r3, r0
   35f76:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head -= rewind;
   35f78:	68e3      	ldr	r3, [r4, #12]
   35f7a:	1a1b      	subs	r3, r3, r0
   35f7c:	60e3      	str	r3, [r4, #12]
	buf->misc.byte_mode.tmp_tail -= rewind;
   35f7e:	68a3      	ldr	r3, [r4, #8]
   35f80:	1a18      	subs	r0, r3, r0
   35f82:	60a0      	str	r0, [r4, #8]
	__asm__ volatile(
   35f84:	f382 8811 	msr	BASEPRI, r2
   35f88:	f3bf 8f6f 	isb	sy

	byte_indexes_rewind(buf);

	return 0;
   35f8c:	2000      	movs	r0, #0
   35f8e:	e001      	b.n	35f94 <ring_buf_get_finish+0x5c>
		return -EINVAL;
   35f90:	f06f 0015 	mvn.w	r0, #21
}
   35f94:	bd10      	pop	{r4, pc}

00035f96 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   35f96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   35f9a:	4680      	mov	r8, r0
   35f9c:	460e      	mov	r6, r1
   35f9e:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   35fa0:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   35fa2:	462a      	mov	r2, r5
   35fa4:	a901      	add	r1, sp, #4
   35fa6:	4640      	mov	r0, r8
   35fa8:	f7ff ffab 	bl	35f02 <ring_buf_get_claim>
   35fac:	4604      	mov	r4, r0
   35fae:	4602      	mov	r2, r0
   35fb0:	9901      	ldr	r1, [sp, #4]
   35fb2:	4630      	mov	r0, r6
   35fb4:	f002 fdc3 	bl	38b3e <memcpy>
		memcpy(data, src, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   35fb8:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   35fba:	4427      	add	r7, r4
		data += partial_size;
   35fbc:	4426      	add	r6, r4
	} while (size && partial_size);
   35fbe:	d001      	beq.n	35fc4 <ring_buf_get+0x2e>
   35fc0:	2c00      	cmp	r4, #0
   35fc2:	d1ee      	bne.n	35fa2 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   35fc4:	4639      	mov	r1, r7
   35fc6:	4640      	mov	r0, r8
   35fc8:	f7ff ffb6 	bl	35f38 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   35fcc:	4638      	mov	r0, r7
   35fce:	b002      	add	sp, #8
   35fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035fd4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_TCP_POLL_TIME, 10);
GEN_ABSOLUTE_SYM(CONFIG_SLM_TCP_CONN_TIME, 60);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   35fd4:	4770      	bx	lr

00035fd6 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   35fd6:	f7fc bddf 	b.w	32b98 <SystemInit>

00035fda <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   35fda:	2300      	movs	r3, #0
	list->head = NULL;
   35fdc:	e9c0 3300 	strd	r3, r3, [r0]
}
   35fe0:	4770      	bx	lr

00035fe2 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   35fe2:	6803      	ldr	r3, [r0, #0]
   35fe4:	b923      	cbnz	r3, 35ff0 <log_list_add_tail+0xe>
		list->head = msg;
   35fe6:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   35fe8:	2300      	movs	r3, #0
	list->tail = msg;
   35fea:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   35fec:	600b      	str	r3, [r1, #0]
}
   35fee:	4770      	bx	lr
		list->tail->next = msg;
   35ff0:	6843      	ldr	r3, [r0, #4]
   35ff2:	6019      	str	r1, [r3, #0]
   35ff4:	e7f8      	b.n	35fe8 <log_list_add_tail+0x6>

00035ff6 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   35ff6:	6800      	ldr	r0, [r0, #0]
   35ff8:	4770      	bx	lr

00035ffa <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   35ffa:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   35ffc:	b10b      	cbz	r3, 36002 <log_list_head_get+0x8>
		list->head = list->head->next;
   35ffe:	681a      	ldr	r2, [r3, #0]
   36000:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   36002:	4618      	mov	r0, r3
   36004:	4770      	bx	lr

00036006 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   36006:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   36008:	f7ed fdbc 	bl	23b84 <log_msg_chunk_alloc>

	if (msg != NULL) {
   3600c:	b118      	cbz	r0, 36016 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   3600e:	2301      	movs	r3, #1
   36010:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   36012:	2300      	movs	r3, #0
   36014:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   36016:	bd08      	pop	{r3, pc}

00036018 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   36018:	f7ee be68 	b.w	24cec <z_timer_cycle_get_32>

0003601c <dummy_timestamp>:
   3601c:	2000      	movs	r0, #0
   3601e:	4770      	bx	lr

00036020 <log_0>:
{
   36020:	b513      	push	{r0, r1, r4, lr}
   36022:	4604      	mov	r4, r0
   36024:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   36026:	f7ff ffee 	bl	36006 <z_log_msg_std_alloc>

	if (msg != NULL) {
   3602a:	b130      	cbz	r0, 3603a <log_0+0x1a>
		msg_finalize(msg, src_level);
   3602c:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   3602e:	6104      	str	r4, [r0, #16]
}
   36030:	b002      	add	sp, #8
   36032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   36036:	f7ed bcc7 	b.w	239c8 <msg_finalize>
}
   3603a:	b002      	add	sp, #8
   3603c:	bd10      	pop	{r4, pc}

0003603e <log_1>:
{
   3603e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   36040:	460c      	mov	r4, r1
   36042:	4611      	mov	r1, r2
   36044:	4605      	mov	r5, r0
   36046:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   36048:	f7ff ffdd 	bl	36006 <z_log_msg_std_alloc>

	if (msg != NULL) {
   3604c:	b160      	cbz	r0, 36068 <log_1+0x2a>
		msg->str = str;
   3604e:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   36050:	2501      	movs	r5, #1
   36052:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   36054:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   36056:	f365 1207 	bfi	r2, r5, #4, #4
   3605a:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   3605c:	9901      	ldr	r1, [sp, #4]
}
   3605e:	b003      	add	sp, #12
   36060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   36064:	f7ed bcb0 	b.w	239c8 <msg_finalize>
}
   36068:	b003      	add	sp, #12
   3606a:	bd30      	pop	{r4, r5, pc}

0003606c <log_2>:
{
   3606c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3606e:	460e      	mov	r6, r1
   36070:	4619      	mov	r1, r3
   36072:	4607      	mov	r7, r0
   36074:	4615      	mov	r5, r2
   36076:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   36078:	f7ff ffc5 	bl	36006 <z_log_msg_std_alloc>

	if (msg != NULL) {
   3607c:	b168      	cbz	r0, 3609a <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   3607e:	2202      	movs	r2, #2
   36080:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   36082:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   36086:	f362 1307 	bfi	r3, r2, #4, #4
   3608a:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   3608c:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   3608e:	6107      	str	r7, [r0, #16]
}
   36090:	b003      	add	sp, #12
   36092:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   36096:	f7ed bc97 	b.w	239c8 <msg_finalize>
}
   3609a:	b003      	add	sp, #12
   3609c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003609e <log_3>:
{
   3609e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   360a2:	460f      	mov	r7, r1
   360a4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   360a8:	4680      	mov	r8, r0
   360aa:	4616      	mov	r6, r2
   360ac:	461d      	mov	r5, r3
   360ae:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   360b0:	f7ff ffa9 	bl	36006 <z_log_msg_std_alloc>

	if (msg != NULL) {
   360b4:	b178      	cbz	r0, 360d6 <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   360b6:	2203      	movs	r2, #3
   360b8:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   360ba:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   360be:	f362 1307 	bfi	r3, r2, #4, #4
   360c2:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   360c4:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   360c6:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   360ca:	61c5      	str	r5, [r0, #28]
}
   360cc:	b002      	add	sp, #8
   360ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   360d2:	f7ed bc79 	b.w	239c8 <msg_finalize>
}
   360d6:	b002      	add	sp, #8
   360d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000360dc <log_n>:
{
   360dc:	b510      	push	{r4, lr}
   360de:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   360e0:	f000 f8b1 	bl	36246 <log_msg_create_n>
		if (msg == NULL) {
   360e4:	b120      	cbz	r0, 360f0 <log_n+0x14>
		msg_finalize(msg, src_level);
   360e6:	4621      	mov	r1, r4
}
   360e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   360ec:	f7ed bc6c 	b.w	239c8 <msg_finalize>
}
   360f0:	bd10      	pop	{r4, pc}

000360f2 <log_printk>:
{
   360f2:	b500      	push	{lr}
   360f4:	b0a3      	sub	sp, #140	; 0x8c
   360f6:	4602      	mov	r2, r0
   360f8:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   360fa:	a801      	add	r0, sp, #4
   360fc:	2181      	movs	r1, #129	; 0x81
   360fe:	f7ec fae3 	bl	226c8 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   36102:	2881      	cmp	r0, #129	; 0x81
   36104:	4602      	mov	r2, r0
   36106:	a901      	add	r1, sp, #4
   36108:	bf28      	it	cs
   3610a:	2281      	movcs	r2, #129	; 0x81
   3610c:	2000      	movs	r0, #0
   3610e:	f000 f8ee 	bl	362ee <log_msg_hexdump_create>
			if (msg == NULL) {
   36112:	b118      	cbz	r0, 3611c <log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   36114:	f04f 0100 	mov.w	r1, #0
   36118:	f7ed fc56 	bl	239c8 <msg_finalize>
}
   3611c:	b023      	add	sp, #140	; 0x8c
   3611e:	f85d fb04 	ldr.w	pc, [sp], #4

00036122 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   36122:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   36126:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   36128:	8903      	ldrh	r3, [r0, #8]
{
   3612a:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   3612c:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   36130:	42a3      	cmp	r3, r4
{
   36132:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   36136:	d803      	bhi.n	36140 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   36138:	2300      	movs	r3, #0
   3613a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   3613c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   36140:	6811      	ldr	r1, [r2, #0]
   36142:	4421      	add	r1, r4
   36144:	4299      	cmp	r1, r3
		*length = available_len - offset;
   36146:	bf84      	itt	hi
   36148:	1b19      	subhi	r1, r3, r4
   3614a:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   3614c:	2b0c      	cmp	r3, #12
	req_len = *length;
   3614e:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   36152:	d92b      	bls.n	361ac <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   36154:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   36156:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   3615a:	d82e      	bhi.n	361ba <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   3615c:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   3615e:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   36160:	454b      	cmp	r3, r9
   36162:	bf28      	it	cs
   36164:	464b      	movcs	r3, r9
   36166:	4420      	add	r0, r4
   36168:	461d      	mov	r5, r3
   3616a:	461a      	mov	r2, r3
		if (put_op) {
   3616c:	b317      	cbz	r7, 361b4 <log_msg_hexdump_data_op+0x92>
   3616e:	4631      	mov	r1, r6
   36170:	f002 fce5 	bl	38b3e <memcpy>
		req_len -= cpy_len;
   36174:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   36178:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   3617a:	f1b9 0f00 	cmp.w	r9, #0
   3617e:	d0dd      	beq.n	3613c <log_msg_hexdump_data_op+0x1a>
   36180:	f1b8 0f00 	cmp.w	r8, #0
   36184:	d0da      	beq.n	3613c <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   36186:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   3618a:	454d      	cmp	r5, r9
   3618c:	bf28      	it	cs
   3618e:	464d      	movcs	r5, r9
		if (put_op) {
   36190:	1d20      	adds	r0, r4, #4
   36192:	462a      	mov	r2, r5
   36194:	4440      	add	r0, r8
   36196:	b1bf      	cbz	r7, 361c8 <log_msg_hexdump_data_op+0xa6>
   36198:	4631      	mov	r1, r6
   3619a:	f002 fcd0 	bl	38b3e <memcpy>
		offset = 0;
   3619e:	2400      	movs	r4, #0
		cont = cont->next;
   361a0:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   361a4:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   361a8:	442e      	add	r6, r5
   361aa:	e7e6      	b.n	3617a <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   361ac:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   361b0:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   361b2:	e7d5      	b.n	36160 <log_msg_hexdump_data_op+0x3e>
   361b4:	4601      	mov	r1, r0
   361b6:	4630      	mov	r0, r6
   361b8:	e7da      	b.n	36170 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   361ba:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   361bc:	2c1b      	cmp	r4, #27
   361be:	d9dc      	bls.n	3617a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   361c0:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   361c4:	3c1c      	subs	r4, #28
   361c6:	e7f9      	b.n	361bc <log_msg_hexdump_data_op+0x9a>
   361c8:	4601      	mov	r1, r0
   361ca:	4630      	mov	r0, r6
   361cc:	e7e5      	b.n	3619a <log_msg_hexdump_data_op+0x78>

000361ce <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   361ce:	3004      	adds	r0, #4
   361d0:	e8d0 3fef 	ldaex	r3, [r0]
   361d4:	3301      	adds	r3, #1
   361d6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   361da:	2a00      	cmp	r2, #0
   361dc:	d1f8      	bne.n	361d0 <log_msg_get+0x2>
}
   361de:	4770      	bx	lr

000361e0 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   361e0:	7a40      	ldrb	r0, [r0, #9]
}
   361e2:	0900      	lsrs	r0, r0, #4
   361e4:	4770      	bx	lr

000361e6 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   361e6:	7a43      	ldrb	r3, [r0, #9]
   361e8:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   361ec:	ea4f 1213 	mov.w	r2, r3, lsr #4
   361f0:	d216      	bcs.n	36220 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   361f2:	2a03      	cmp	r2, #3
   361f4:	d803      	bhi.n	361fe <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   361f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   361fa:	6948      	ldr	r0, [r1, #20]
   361fc:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   361fe:	2901      	cmp	r1, #1
   36200:	d803      	bhi.n	3620a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   36202:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   36206:	6988      	ldr	r0, [r1, #24]
   36208:	4770      	bx	lr
	cont = msg->payload.ext.next;
   3620a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   3620c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   3620e:	2906      	cmp	r1, #6
   36210:	d803      	bhi.n	3621a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   36212:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   36216:	6848      	ldr	r0, [r1, #4]
   36218:	4770      	bx	lr
		cont = cont->next;
   3621a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   3621c:	3907      	subs	r1, #7
		cont = cont->next;
   3621e:	e7f6      	b.n	3620e <log_msg_arg_get+0x28>
		return 0;
   36220:	2000      	movs	r0, #0
}
   36222:	4770      	bx	lr

00036224 <log_msg_put>:
{
   36224:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   36226:	1d02      	adds	r2, r0, #4
   36228:	e8d2 1fef 	ldaex	r1, [r2]
   3622c:	3901      	subs	r1, #1
   3622e:	e8c2 1fec 	stlex	ip, r1, [r2]
   36232:	f1bc 0f00 	cmp.w	ip, #0
   36236:	d1f7      	bne.n	36228 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   36238:	685b      	ldr	r3, [r3, #4]
   3623a:	b90b      	cbnz	r3, 36240 <log_msg_put+0x1c>
		msg_free(msg);
   3623c:	f7ed bcb6 	b.w	23bac <msg_free>
}
   36240:	4770      	bx	lr

00036242 <log_msg_str_get>:
}
   36242:	6900      	ldr	r0, [r0, #16]
   36244:	4770      	bx	lr

00036246 <log_msg_create_n>:
{
   36246:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3624a:	4681      	mov	r9, r0
   3624c:	4688      	mov	r8, r1
   3624e:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   36250:	f7ed fc98 	bl	23b84 <log_msg_chunk_alloc>
	if (msg != NULL) {
   36254:	4604      	mov	r4, r0
   36256:	b330      	cbz	r0, 362a6 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   36258:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   3625a:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   3625c:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   3625e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   36260:	8107      	strh	r7, [r0, #8]
   36262:	d909      	bls.n	36278 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   36264:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   36266:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   3626a:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   3626c:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   36270:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   36272:	f1ba 0f00 	cmp.w	sl, #0
   36276:	dc0e      	bgt.n	36296 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   36278:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   3627a:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   3627c:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   36280:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   36284:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   36286:	d818      	bhi.n	362ba <log_msg_create_n+0x74>
   36288:	4641      	mov	r1, r8
   3628a:	00aa      	lsls	r2, r5, #2
   3628c:	f104 0014 	add.w	r0, r4, #20
   36290:	f002 fc55 	bl	38b3e <memcpy>
	while (nargs != 0U) {
   36294:	e007      	b.n	362a6 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   36296:	f7ed fc75 	bl	23b84 <log_msg_chunk_alloc>
		if (cont == NULL) {
   3629a:	4606      	mov	r6, r0
   3629c:	b930      	cbnz	r0, 362ac <log_msg_create_n+0x66>
			msg_free(msg);
   3629e:	4620      	mov	r0, r4
   362a0:	f7ed fc84 	bl	23bac <msg_free>
			return NULL;
   362a4:	4634      	mov	r4, r6
}
   362a6:	4620      	mov	r0, r4
   362a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   362ac:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   362b0:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   362b4:	4683      	mov	fp, r0
		cont->next = NULL;
   362b6:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   362b8:	e7db      	b.n	36272 <log_msg_create_n+0x2c>
   362ba:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   362be:	6967      	ldr	r7, [r4, #20]
   362c0:	61a3      	str	r3, [r4, #24]
   362c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   362c6:	3d02      	subs	r5, #2
   362c8:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   362ca:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   362ce:	2d07      	cmp	r5, #7
   362d0:	462e      	mov	r6, r5
   362d2:	bf28      	it	cs
   362d4:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   362d6:	ea4f 0986 	mov.w	r9, r6, lsl #2
   362da:	4641      	mov	r1, r8
   362dc:	1d38      	adds	r0, r7, #4
   362de:	464a      	mov	r2, r9
   362e0:	f002 fc2d 	bl	38b3e <memcpy>
	while (nargs != 0U) {
   362e4:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   362e6:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   362e8:	44c8      	add	r8, r9
	while (nargs != 0U) {
   362ea:	d1f0      	bne.n	362ce <log_msg_create_n+0x88>
   362ec:	e7db      	b.n	362a6 <log_msg_create_n+0x60>

000362ee <log_msg_hexdump_create>:
{
   362ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   362f2:	f643 75ff 	movw	r5, #16383	; 0x3fff
   362f6:	4295      	cmp	r5, r2
{
   362f8:	4680      	mov	r8, r0
   362fa:	460e      	mov	r6, r1
   362fc:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   362fe:	bf28      	it	cs
   36300:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   36302:	f7ed fc3f 	bl	23b84 <log_msg_chunk_alloc>
	if (msg == NULL) {
   36306:	4604      	mov	r4, r0
   36308:	b378      	cbz	r0, 3636a <log_msg_hexdump_create+0x7c>
	msg->hdr.ref_cnt = 1;
   3630a:	2301      	movs	r3, #1
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   3630c:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.ref_cnt = 1;
   3630e:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   36310:	00ab      	lsls	r3, r5, #2
   36312:	f043 0301 	orr.w	r3, r3, #1
   36316:	f002 0202 	and.w	r2, r2, #2
   3631a:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   3631c:	2f0c      	cmp	r7, #12
	msg->str = str;
   3631e:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   36322:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   36324:	f100 0814 	add.w	r8, r0, #20
   36328:	d916      	bls.n	36358 <log_msg_hexdump_create+0x6a>
   3632a:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   3632c:	7a02      	ldrb	r2, [r0, #8]
   3632e:	6183      	str	r3, [r0, #24]
   36330:	6873      	ldr	r3, [r6, #4]
   36332:	f042 0202 	orr.w	r2, r2, #2
   36336:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
   36338:	2300      	movs	r3, #0
   3633a:	4699      	mov	r9, r3
   3633c:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   3633e:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   36340:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   36342:	3d08      	subs	r5, #8
	while (length > 0) {
   36344:	b18d      	cbz	r5, 3636a <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   36346:	f7ed fc1d 	bl	23b84 <log_msg_chunk_alloc>
		if (cont == NULL) {
   3634a:	4607      	mov	r7, r0
   3634c:	b980      	cbnz	r0, 36370 <log_msg_hexdump_create+0x82>
			msg_free(msg);
   3634e:	4620      	mov	r0, r4
   36350:	f7ed fc2c 	bl	23bac <msg_free>
			return NULL;
   36354:	463c      	mov	r4, r7
   36356:	e008      	b.n	3636a <log_msg_hexdump_create+0x7c>
   36358:	462a      	mov	r2, r5
   3635a:	4631      	mov	r1, r6
   3635c:	4640      	mov	r0, r8
   3635e:	f002 fbee 	bl	38b3e <memcpy>
		msg->hdr.params.generic.ext = 0;
   36362:	7a23      	ldrb	r3, [r4, #8]
   36364:	f36f 0341 	bfc	r3, #1, #1
   36368:	7223      	strb	r3, [r4, #8]
}
   3636a:	4620      	mov	r0, r4
   3636c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   36370:	2d1c      	cmp	r5, #28
   36372:	462f      	mov	r7, r5
   36374:	bf28      	it	cs
   36376:	271c      	movcs	r7, #28
		*prev_cont = cont;
   36378:	f8c8 0000 	str.w	r0, [r8]
   3637c:	4631      	mov	r1, r6
		cont->next = NULL;
   3637e:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   36382:	4680      	mov	r8, r0
   36384:	463a      	mov	r2, r7
   36386:	3004      	adds	r0, #4
   36388:	f002 fbd9 	bl	38b3e <memcpy>
		data += chunk_length;
   3638c:	443e      	add	r6, r7
		length -= chunk_length;
   3638e:	1bed      	subs	r5, r5, r7
   36390:	e7d8      	b.n	36344 <log_msg_hexdump_create+0x56>

00036392 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   36392:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   36394:	2400      	movs	r4, #0
   36396:	9400      	str	r4, [sp, #0]
   36398:	f7ff fec3 	bl	36122 <log_msg_hexdump_data_op>
}
   3639c:	b002      	add	sp, #8
   3639e:	bd10      	pop	{r4, pc}

000363a0 <buffer_write>:
{
   363a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   363a2:	4606      	mov	r6, r0
   363a4:	460d      	mov	r5, r1
   363a6:	4614      	mov	r4, r2
   363a8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   363aa:	4621      	mov	r1, r4
   363ac:	4628      	mov	r0, r5
   363ae:	463a      	mov	r2, r7
   363b0:	47b0      	blx	r6
	} while (len != 0);
   363b2:	1a24      	subs	r4, r4, r0
		buf += processed;
   363b4:	4405      	add	r5, r0
	} while (len != 0);
   363b6:	d1f8      	bne.n	363aa <buffer_write+0xa>
}
   363b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000363ba <std_print>:
{
   363ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   363be:	b08e      	sub	sp, #56	; 0x38
   363c0:	af0e      	add	r7, sp, #56	; 0x38
   363c2:	4680      	mov	r8, r0
   363c4:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   363c6:	f7ff ff3c 	bl	36242 <log_msg_str_get>
   363ca:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   363cc:	4640      	mov	r0, r8
   363ce:	f7ff ff07 	bl	361e0 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   363d2:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   363d6:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   363d8:	0083      	lsls	r3, r0, #2
   363da:	3307      	adds	r3, #7
   363dc:	f023 0307 	bic.w	r3, r3, #7
   363e0:	ebad 0d03 	sub.w	sp, sp, r3
   363e4:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   363e6:	45d1      	cmp	r9, sl
   363e8:	d116      	bne.n	36418 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   363ea:	4640      	mov	r0, r8
   363ec:	f7ff fef8 	bl	361e0 <log_msg_nargs_get>
   363f0:	280f      	cmp	r0, #15
   363f2:	d81e      	bhi.n	36432 <std_print+0x78>
   363f4:	e8df f010 	tbh	[pc, r0, lsl #1]
   363f8:	00200019 	.word	0x00200019
   363fc:	002d0026 	.word	0x002d0026
   36400:	00410036 	.word	0x00410036
   36404:	005d004e 	.word	0x005d004e
   36408:	0081006e 	.word	0x0081006e
   3640c:	00ad0096 	.word	0x00ad0096
   36410:	00e100c6 	.word	0x00e100c6
   36414:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   36418:	4649      	mov	r1, r9
   3641a:	4640      	mov	r0, r8
   3641c:	f7ff fee3 	bl	361e6 <log_msg_arg_get>
   36420:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   36424:	f109 0901 	add.w	r9, r9, #1
   36428:	e7dd      	b.n	363e6 <std_print+0x2c>
		print_formatted(log_output, str);
   3642a:	4631      	mov	r1, r6
   3642c:	4628      	mov	r0, r5
   3642e:	f7ed fbfb 	bl	23c28 <print_formatted>
}
   36432:	46bd      	mov	sp, r7
   36434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   36438:	4631      	mov	r1, r6
   3643a:	4628      	mov	r0, r5
   3643c:	6822      	ldr	r2, [r4, #0]
   3643e:	f7ed fbf3 	bl	23c28 <print_formatted>
		break;
   36442:	e7f6      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   36444:	4631      	mov	r1, r6
   36446:	e9d4 2300 	ldrd	r2, r3, [r4]
   3644a:	4628      	mov	r0, r5
   3644c:	f7ed fbec 	bl	23c28 <print_formatted>
		break;
   36450:	e7ef      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   36452:	68a3      	ldr	r3, [r4, #8]
   36454:	4631      	mov	r1, r6
   36456:	9300      	str	r3, [sp, #0]
   36458:	4628      	mov	r0, r5
   3645a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3645e:	f7ed fbe3 	bl	23c28 <print_formatted>
		break;
   36462:	e7e6      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   36464:	68e3      	ldr	r3, [r4, #12]
   36466:	4631      	mov	r1, r6
   36468:	9301      	str	r3, [sp, #4]
   3646a:	68a3      	ldr	r3, [r4, #8]
   3646c:	4628      	mov	r0, r5
   3646e:	9300      	str	r3, [sp, #0]
   36470:	e9d4 2300 	ldrd	r2, r3, [r4]
   36474:	f7ed fbd8 	bl	23c28 <print_formatted>
		break;
   36478:	e7db      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   3647a:	6923      	ldr	r3, [r4, #16]
   3647c:	4631      	mov	r1, r6
   3647e:	9302      	str	r3, [sp, #8]
   36480:	68e3      	ldr	r3, [r4, #12]
   36482:	4628      	mov	r0, r5
   36484:	9301      	str	r3, [sp, #4]
   36486:	68a3      	ldr	r3, [r4, #8]
   36488:	9300      	str	r3, [sp, #0]
   3648a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3648e:	f7ed fbcb 	bl	23c28 <print_formatted>
		break;
   36492:	e7ce      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   36494:	6963      	ldr	r3, [r4, #20]
   36496:	4631      	mov	r1, r6
   36498:	9303      	str	r3, [sp, #12]
   3649a:	6923      	ldr	r3, [r4, #16]
   3649c:	4628      	mov	r0, r5
   3649e:	9302      	str	r3, [sp, #8]
   364a0:	68e3      	ldr	r3, [r4, #12]
   364a2:	9301      	str	r3, [sp, #4]
   364a4:	68a3      	ldr	r3, [r4, #8]
   364a6:	9300      	str	r3, [sp, #0]
   364a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   364ac:	f7ed fbbc 	bl	23c28 <print_formatted>
		break;
   364b0:	e7bf      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   364b2:	69a3      	ldr	r3, [r4, #24]
   364b4:	4631      	mov	r1, r6
   364b6:	9304      	str	r3, [sp, #16]
   364b8:	6963      	ldr	r3, [r4, #20]
   364ba:	4628      	mov	r0, r5
   364bc:	9303      	str	r3, [sp, #12]
   364be:	6923      	ldr	r3, [r4, #16]
   364c0:	9302      	str	r3, [sp, #8]
   364c2:	68e3      	ldr	r3, [r4, #12]
   364c4:	9301      	str	r3, [sp, #4]
   364c6:	68a3      	ldr	r3, [r4, #8]
   364c8:	9300      	str	r3, [sp, #0]
   364ca:	e9d4 2300 	ldrd	r2, r3, [r4]
   364ce:	f7ed fbab 	bl	23c28 <print_formatted>
		break;
   364d2:	e7ae      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   364d4:	69e3      	ldr	r3, [r4, #28]
   364d6:	4631      	mov	r1, r6
   364d8:	9305      	str	r3, [sp, #20]
   364da:	69a3      	ldr	r3, [r4, #24]
   364dc:	4628      	mov	r0, r5
   364de:	9304      	str	r3, [sp, #16]
   364e0:	6963      	ldr	r3, [r4, #20]
   364e2:	9303      	str	r3, [sp, #12]
   364e4:	6923      	ldr	r3, [r4, #16]
   364e6:	9302      	str	r3, [sp, #8]
   364e8:	68e3      	ldr	r3, [r4, #12]
   364ea:	9301      	str	r3, [sp, #4]
   364ec:	68a3      	ldr	r3, [r4, #8]
   364ee:	9300      	str	r3, [sp, #0]
   364f0:	e9d4 2300 	ldrd	r2, r3, [r4]
   364f4:	f7ed fb98 	bl	23c28 <print_formatted>
		break;
   364f8:	e79b      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   364fa:	6a23      	ldr	r3, [r4, #32]
   364fc:	4631      	mov	r1, r6
   364fe:	9306      	str	r3, [sp, #24]
   36500:	69e3      	ldr	r3, [r4, #28]
   36502:	4628      	mov	r0, r5
   36504:	9305      	str	r3, [sp, #20]
   36506:	69a3      	ldr	r3, [r4, #24]
   36508:	9304      	str	r3, [sp, #16]
   3650a:	6963      	ldr	r3, [r4, #20]
   3650c:	9303      	str	r3, [sp, #12]
   3650e:	6923      	ldr	r3, [r4, #16]
   36510:	9302      	str	r3, [sp, #8]
   36512:	68e3      	ldr	r3, [r4, #12]
   36514:	9301      	str	r3, [sp, #4]
   36516:	68a3      	ldr	r3, [r4, #8]
   36518:	9300      	str	r3, [sp, #0]
   3651a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3651e:	f7ed fb83 	bl	23c28 <print_formatted>
		break;
   36522:	e786      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   36524:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36526:	4631      	mov	r1, r6
   36528:	9307      	str	r3, [sp, #28]
   3652a:	6a23      	ldr	r3, [r4, #32]
   3652c:	4628      	mov	r0, r5
   3652e:	9306      	str	r3, [sp, #24]
   36530:	69e3      	ldr	r3, [r4, #28]
   36532:	9305      	str	r3, [sp, #20]
   36534:	69a3      	ldr	r3, [r4, #24]
   36536:	9304      	str	r3, [sp, #16]
   36538:	6963      	ldr	r3, [r4, #20]
   3653a:	9303      	str	r3, [sp, #12]
   3653c:	6923      	ldr	r3, [r4, #16]
   3653e:	9302      	str	r3, [sp, #8]
   36540:	68e3      	ldr	r3, [r4, #12]
   36542:	9301      	str	r3, [sp, #4]
   36544:	68a3      	ldr	r3, [r4, #8]
   36546:	9300      	str	r3, [sp, #0]
   36548:	e9d4 2300 	ldrd	r2, r3, [r4]
   3654c:	f7ed fb6c 	bl	23c28 <print_formatted>
		break;
   36550:	e76f      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   36552:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   36554:	4631      	mov	r1, r6
   36556:	9308      	str	r3, [sp, #32]
   36558:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3655a:	4628      	mov	r0, r5
   3655c:	9307      	str	r3, [sp, #28]
   3655e:	6a23      	ldr	r3, [r4, #32]
   36560:	9306      	str	r3, [sp, #24]
   36562:	69e3      	ldr	r3, [r4, #28]
   36564:	9305      	str	r3, [sp, #20]
   36566:	69a3      	ldr	r3, [r4, #24]
   36568:	9304      	str	r3, [sp, #16]
   3656a:	6963      	ldr	r3, [r4, #20]
   3656c:	9303      	str	r3, [sp, #12]
   3656e:	6923      	ldr	r3, [r4, #16]
   36570:	9302      	str	r3, [sp, #8]
   36572:	68e3      	ldr	r3, [r4, #12]
   36574:	9301      	str	r3, [sp, #4]
   36576:	68a3      	ldr	r3, [r4, #8]
   36578:	9300      	str	r3, [sp, #0]
   3657a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3657e:	f7ed fb53 	bl	23c28 <print_formatted>
		break;
   36582:	e756      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   36584:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   36586:	4631      	mov	r1, r6
   36588:	9309      	str	r3, [sp, #36]	; 0x24
   3658a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   3658c:	4628      	mov	r0, r5
   3658e:	9308      	str	r3, [sp, #32]
   36590:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36592:	9307      	str	r3, [sp, #28]
   36594:	6a23      	ldr	r3, [r4, #32]
   36596:	9306      	str	r3, [sp, #24]
   36598:	69e3      	ldr	r3, [r4, #28]
   3659a:	9305      	str	r3, [sp, #20]
   3659c:	69a3      	ldr	r3, [r4, #24]
   3659e:	9304      	str	r3, [sp, #16]
   365a0:	6963      	ldr	r3, [r4, #20]
   365a2:	9303      	str	r3, [sp, #12]
   365a4:	6923      	ldr	r3, [r4, #16]
   365a6:	9302      	str	r3, [sp, #8]
   365a8:	68e3      	ldr	r3, [r4, #12]
   365aa:	9301      	str	r3, [sp, #4]
   365ac:	68a3      	ldr	r3, [r4, #8]
   365ae:	9300      	str	r3, [sp, #0]
   365b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   365b4:	f7ed fb38 	bl	23c28 <print_formatted>
		break;
   365b8:	e73b      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   365ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
   365bc:	4631      	mov	r1, r6
   365be:	930a      	str	r3, [sp, #40]	; 0x28
   365c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   365c2:	4628      	mov	r0, r5
   365c4:	9309      	str	r3, [sp, #36]	; 0x24
   365c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   365c8:	9308      	str	r3, [sp, #32]
   365ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   365cc:	9307      	str	r3, [sp, #28]
   365ce:	6a23      	ldr	r3, [r4, #32]
   365d0:	9306      	str	r3, [sp, #24]
   365d2:	69e3      	ldr	r3, [r4, #28]
   365d4:	9305      	str	r3, [sp, #20]
   365d6:	69a3      	ldr	r3, [r4, #24]
   365d8:	9304      	str	r3, [sp, #16]
   365da:	6963      	ldr	r3, [r4, #20]
   365dc:	9303      	str	r3, [sp, #12]
   365de:	6923      	ldr	r3, [r4, #16]
   365e0:	9302      	str	r3, [sp, #8]
   365e2:	68e3      	ldr	r3, [r4, #12]
   365e4:	9301      	str	r3, [sp, #4]
   365e6:	68a3      	ldr	r3, [r4, #8]
   365e8:	9300      	str	r3, [sp, #0]
   365ea:	e9d4 2300 	ldrd	r2, r3, [r4]
   365ee:	f7ed fb1b 	bl	23c28 <print_formatted>
		break;
   365f2:	e71e      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   365f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   365f6:	4631      	mov	r1, r6
   365f8:	930b      	str	r3, [sp, #44]	; 0x2c
   365fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   365fc:	4628      	mov	r0, r5
   365fe:	930a      	str	r3, [sp, #40]	; 0x28
   36600:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   36602:	9309      	str	r3, [sp, #36]	; 0x24
   36604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   36606:	9308      	str	r3, [sp, #32]
   36608:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3660a:	9307      	str	r3, [sp, #28]
   3660c:	6a23      	ldr	r3, [r4, #32]
   3660e:	9306      	str	r3, [sp, #24]
   36610:	69e3      	ldr	r3, [r4, #28]
   36612:	9305      	str	r3, [sp, #20]
   36614:	69a3      	ldr	r3, [r4, #24]
   36616:	9304      	str	r3, [sp, #16]
   36618:	6963      	ldr	r3, [r4, #20]
   3661a:	9303      	str	r3, [sp, #12]
   3661c:	6923      	ldr	r3, [r4, #16]
   3661e:	9302      	str	r3, [sp, #8]
   36620:	68e3      	ldr	r3, [r4, #12]
   36622:	9301      	str	r3, [sp, #4]
   36624:	68a3      	ldr	r3, [r4, #8]
   36626:	9300      	str	r3, [sp, #0]
   36628:	e9d4 2300 	ldrd	r2, r3, [r4]
   3662c:	f7ed fafc 	bl	23c28 <print_formatted>
		break;
   36630:	e6ff      	b.n	36432 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   36632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   36634:	4631      	mov	r1, r6
   36636:	930c      	str	r3, [sp, #48]	; 0x30
   36638:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3663a:	4628      	mov	r0, r5
   3663c:	930b      	str	r3, [sp, #44]	; 0x2c
   3663e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   36640:	930a      	str	r3, [sp, #40]	; 0x28
   36642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   36644:	9309      	str	r3, [sp, #36]	; 0x24
   36646:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   36648:	9308      	str	r3, [sp, #32]
   3664a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3664c:	9307      	str	r3, [sp, #28]
   3664e:	6a23      	ldr	r3, [r4, #32]
   36650:	9306      	str	r3, [sp, #24]
   36652:	69e3      	ldr	r3, [r4, #28]
   36654:	9305      	str	r3, [sp, #20]
   36656:	69a3      	ldr	r3, [r4, #24]
   36658:	9304      	str	r3, [sp, #16]
   3665a:	6963      	ldr	r3, [r4, #20]
   3665c:	9303      	str	r3, [sp, #12]
   3665e:	6923      	ldr	r3, [r4, #16]
   36660:	9302      	str	r3, [sp, #8]
   36662:	68e3      	ldr	r3, [r4, #12]
   36664:	9301      	str	r3, [sp, #4]
   36666:	68a3      	ldr	r3, [r4, #8]
   36668:	9300      	str	r3, [sp, #0]
   3666a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3666e:	f7ed fadb 	bl	23c28 <print_formatted>
}
   36672:	e6de      	b.n	36432 <std_print+0x78>

00036674 <log_output_flush>:
		     log_output->control_block->offset,
   36674:	6842      	ldr	r2, [r0, #4]
{
   36676:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   36678:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   3667c:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   3667e:	6881      	ldr	r1, [r0, #8]
   36680:	6800      	ldr	r0, [r0, #0]
   36682:	f7ff fe8d 	bl	363a0 <buffer_write>
	log_output->control_block->offset = 0;
   36686:	2200      	movs	r2, #0
   36688:	6863      	ldr	r3, [r4, #4]
   3668a:	601a      	str	r2, [r3, #0]
}
   3668c:	bd10      	pop	{r4, pc}

0003668e <out_func>:
{
   3668e:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   36690:	684b      	ldr	r3, [r1, #4]
{
   36692:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   36694:	681a      	ldr	r2, [r3, #0]
   36696:	68cb      	ldr	r3, [r1, #12]
{
   36698:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   3669a:	429a      	cmp	r2, r3
   3669c:	d102      	bne.n	366a4 <out_func+0x16>
		log_output_flush(out_ctx);
   3669e:	4608      	mov	r0, r1
   366a0:	f7ff ffe8 	bl	36674 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   366a4:	6863      	ldr	r3, [r4, #4]
   366a6:	e8d3 2fef 	ldaex	r2, [r3]
   366aa:	1c51      	adds	r1, r2, #1
   366ac:	e8c3 1fe0 	stlex	r0, r1, [r3]
   366b0:	2800      	cmp	r0, #0
   366b2:	d1f8      	bne.n	366a6 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   366b4:	68a3      	ldr	r3, [r4, #8]
}
   366b6:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   366b8:	549d      	strb	r5, [r3, r2]
}
   366ba:	bd38      	pop	{r3, r4, r5, pc}

000366bc <boot_write_trailer_byte>:
{
   366bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   366be:	460d      	mov	r5, r1
   366c0:	4616      	mov	r6, r2
   366c2:	4604      	mov	r4, r0
	align = flash_area_align(fa);
   366c4:	f000 f9df 	bl	36a86 <flash_area_align>
   366c8:	9001      	str	r0, [sp, #4]
	erased_val = flash_area_erased_val(fa);
   366ca:	4620      	mov	r0, r4
   366cc:	f000 f9e7 	bl	36a9e <flash_area_erased_val>
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   366d0:	2208      	movs	r2, #8
	erased_val = flash_area_erased_val(fa);
   366d2:	4601      	mov	r1, r0
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   366d4:	eb0d 0002 	add.w	r0, sp, r2
   366d8:	f002 fa51 	bl	38b7e <memset>
	rc = flash_area_write(fa, off, buf, align);
   366dc:	4629      	mov	r1, r5
   366de:	4620      	mov	r0, r4
   366e0:	9b01      	ldr	r3, [sp, #4]
   366e2:	aa02      	add	r2, sp, #8
	buf[0] = val;
   366e4:	f88d 6008 	strb.w	r6, [sp, #8]
	rc = flash_area_write(fa, off, buf, align);
   366e8:	f000 f9a4 	bl	36a34 <flash_area_write>
	if (rc != 0) {
   366ec:	2800      	cmp	r0, #0
}
   366ee:	bf18      	it	ne
   366f0:	f06f 0004 	mvnne.w	r0, #4
   366f4:	b004      	add	sp, #16
   366f6:	bd70      	pop	{r4, r5, r6, pc}

000366f8 <boot_flag_read.constprop.0>:
static int boot_flag_read(int flag, uint8_t bank_id)
   366f8:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   366fa:	2003      	movs	r0, #3
   366fc:	a901      	add	r1, sp, #4
   366fe:	f7ed fe8b 	bl	24418 <flash_area_open>
	if (rc) {
   36702:	b950      	cbnz	r0, 3671a <boot_flag_read.constprop.0+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   36704:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   36706:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   36708:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   3670a:	f10d 0203 	add.w	r2, sp, #3
   3670e:	3918      	subs	r1, #24
   36710:	f000 f973 	bl	369fa <flash_area_read>
	if (rc != 0) {
   36714:	b908      	cbnz	r0, 3671a <boot_flag_read.constprop.0+0x22>
	return flag_val;
   36716:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   3671a:	b003      	add	sp, #12
   3671c:	f85d fb04 	ldr.w	pc, [sp], #4

00036720 <boot_flag_write.constprop.0>:
static int boot_flag_write(int flag, uint8_t bank_id)
   36720:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   36722:	a901      	add	r1, sp, #4
   36724:	f7ed fe78 	bl	24418 <flash_area_open>
	if (rc) {
   36728:	4604      	mov	r4, r0
   3672a:	b948      	cbnz	r0, 36740 <boot_flag_write.constprop.0+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   3672c:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   3672e:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   36730:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   36732:	3918      	subs	r1, #24
   36734:	f7ff ffc2 	bl	366bc <boot_write_trailer_byte>
   36738:	4604      	mov	r4, r0
	flash_area_close(fa);
   3673a:	9801      	ldr	r0, [sp, #4]
   3673c:	f000 f95c 	bl	369f8 <flash_area_close>
}
   36740:	4620      	mov	r0, r4
   36742:	b002      	add	sp, #8
   36744:	bd10      	pop	{r4, pc}

00036746 <boot_write_img_confirmed>:
{
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   36746:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   36748:	f7ff ffd6 	bl	366f8 <boot_flag_read.constprop.0>
	rc = flash_area_open(bank_id, &fa);
   3674c:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   3674e:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   36750:	2003      	movs	r0, #3
   36752:	f7ed fe61 	bl	24418 <flash_area_open>
	if (rc) {
   36756:	b948      	cbnz	r0, 3676c <boot_write_img_confirmed+0x26>
	return flash_area_erased_val(fa);
   36758:	9801      	ldr	r0, [sp, #4]
   3675a:	f000 f9a0 	bl	36a9e <flash_area_erased_val>
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   3675e:	42a0      	cmp	r0, r4
   36760:	d107      	bne.n	36772 <boot_write_img_confirmed+0x2c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   36762:	2003      	movs	r0, #3
   36764:	f7ff ffdc 	bl	36720 <boot_flag_write.constprop.0>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   36768:	b002      	add	sp, #8
   3676a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3676c:	f06f 0015 	mvn.w	r0, #21
   36770:	e7f5      	b.n	3675e <boot_write_img_confirmed+0x18>
		return 0;
   36772:	2000      	movs	r0, #0
   36774:	e7f8      	b.n	36768 <boot_write_img_confirmed+0x22>

00036776 <flash_img_buffered_write>:
	     "CONFIG_IMG_BLOCK_BUF_SIZE is not a multiple of "
	     "FLASH_WRITE_BLOCK_SIZE");

int flash_img_buffered_write(struct flash_img_context *ctx, const uint8_t *data,
			     size_t len, bool flush)
{
   36776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;

	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   36778:	f500 7701 	add.w	r7, r0, #516	; 0x204
{
   3677c:	4605      	mov	r5, r0
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   3677e:	4638      	mov	r0, r7
{
   36780:	461e      	mov	r6, r3
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   36782:	f000 f99e 	bl	36ac2 <stream_flash_buffered_write>
   36786:	4604      	mov	r4, r0
	if (!flush) {
   36788:	b186      	cbz	r6, 367ac <flash_img_buffered_write+0x36>
		return rc;
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	rc = stream_flash_erase_page(&ctx->stream,
				ctx->flash_area->fa_off +
   3678a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	rc = stream_flash_erase_page(&ctx->stream,
   3678e:	4638      	mov	r0, r7
				ctx->flash_area->fa_off +
   36790:	6899      	ldr	r1, [r3, #8]
   36792:	685b      	ldr	r3, [r3, #4]
   36794:	3920      	subs	r1, #32
	rc = stream_flash_erase_page(&ctx->stream,
   36796:	4419      	add	r1, r3
   36798:	f7ed fe70 	bl	2447c <stream_flash_erase_page>
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
	if (rc) {
   3679c:	4604      	mov	r4, r0
   3679e:	b928      	cbnz	r0, 367ac <flash_img_buffered_write+0x36>
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   367a0:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   367a4:	f000 f928 	bl	369f8 <flash_area_close>
	ctx->flash_area = NULL;
   367a8:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200

	return rc;
}
   367ac:	4620      	mov	r0, r4
   367ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000367b0 <flash_img_bytes_written>:

size_t flash_img_bytes_written(struct flash_img_context *ctx)
{
	return stream_flash_bytes_written(&ctx->stream);
   367b0:	f500 7001 	add.w	r0, r0, #516	; 0x204
   367b4:	f000 b9ef 	b.w	36b96 <stream_flash_bytes_written>

000367b8 <flash_img_init_id>:
}

int flash_img_init_id(struct flash_img_context *ctx, uint8_t area_id)
{
   367b8:	b530      	push	{r4, r5, lr}
   367ba:	4605      	mov	r5, r0
   367bc:	b085      	sub	sp, #20
   367be:	4608      	mov	r0, r1
	int rc;
	const struct device *flash_dev;

	rc = flash_area_open(area_id,
   367c0:	f505 7100 	add.w	r1, r5, #512	; 0x200
   367c4:	f7ed fe28 	bl	24418 <flash_area_open>
			       (const struct flash_area **)&(ctx->flash_area));
	if (rc) {
   367c8:	4604      	mov	r4, r0
   367ca:	b998      	cbnz	r0, 367f4 <flash_img_init_id+0x3c>
		return rc;
	}

	flash_dev = flash_area_get_device(ctx->flash_area);
   367cc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   367d0:	f000 f962 	bl	36a98 <flash_area_get_device>

	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
			CONFIG_IMG_BLOCK_BUF_SIZE, ctx->flash_area->fa_off,
   367d4:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   367d8:	9402      	str	r4, [sp, #8]
   367da:	689a      	ldr	r2, [r3, #8]
	flash_dev = flash_area_get_device(ctx->flash_area);
   367dc:	4601      	mov	r1, r0
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   367de:	9201      	str	r2, [sp, #4]
   367e0:	685b      	ldr	r3, [r3, #4]
   367e2:	462a      	mov	r2, r5
   367e4:	9300      	str	r3, [sp, #0]
   367e6:	f505 7001 	add.w	r0, r5, #516	; 0x204
   367ea:	f44f 7300 	mov.w	r3, #512	; 0x200
   367ee:	f7ed ff07 	bl	24600 <stream_flash_init>
   367f2:	4604      	mov	r4, r0
			ctx->flash_area->fa_size, NULL);
}
   367f4:	4620      	mov	r0, r4
   367f6:	b005      	add	sp, #20
   367f8:	bd30      	pop	{r4, r5, pc}

000367fa <flash_img_init>:

int flash_img_init(struct flash_img_context *ctx)
{
	return flash_img_init_id(ctx, UPLOAD_FLASH_AREA_ID);
   367fa:	2107      	movs	r1, #7
   367fc:	f7ff bfdc 	b.w	367b8 <flash_img_init_id>

00036800 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   36800:	f7ed bde2 	b.w	243c8 <socket_offload_getaddrinfo>

00036804 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   36804:	f7ed bdea 	b.w	243dc <socket_offload_freeaddrinfo>

00036808 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   36808:	b40c      	push	{r2, r3}
   3680a:	4603      	mov	r3, r0
   3680c:	b507      	push	{r0, r1, r2, lr}
   3680e:	aa04      	add	r2, sp, #16
   36810:	4608      	mov	r0, r1
   36812:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   36816:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   36818:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3681a:	4798      	blx	r3
	va_end(args);

	return res;
}
   3681c:	b003      	add	sp, #12
   3681e:	f85d eb04 	ldr.w	lr, [sp], #4
   36822:	b002      	add	sp, #8
   36824:	4770      	bx	lr

00036826 <z_impl_zsock_close>:
{
   36826:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   36828:	a901      	add	r1, sp, #4
{
   3682a:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   3682c:	f7eb fed6 	bl	225dc <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   36830:	b940      	cbnz	r0, 36844 <z_impl_zsock_close+0x1e>
		errno = EBADF;
   36832:	f000 fafc 	bl	36e2e <__errno>
   36836:	2309      	movs	r3, #9
		return -1;
   36838:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		errno = EBADF;
   3683c:	6003      	str	r3, [r0, #0]
}
   3683e:	4620      	mov	r0, r4
   36840:	b003      	add	sp, #12
   36842:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   36844:	9b01      	ldr	r3, [sp, #4]
   36846:	689b      	ldr	r3, [r3, #8]
   36848:	4798      	blx	r3
   3684a:	4604      	mov	r4, r0
	z_free_fd(sock);
   3684c:	4628      	mov	r0, r5
   3684e:	f7eb ff15 	bl	2267c <z_free_fd>
	return ret;
   36852:	e7f4      	b.n	3683e <z_impl_zsock_close+0x18>

00036854 <z_impl_zsock_bind>:
{
   36854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   36856:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   36858:	a903      	add	r1, sp, #12
{
   3685a:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   3685c:	f7eb febe 	bl	225dc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(bind, sock, addr, addrlen);
   36860:	b118      	cbz	r0, 3686a <z_impl_zsock_bind+0x16>
   36862:	9b03      	ldr	r3, [sp, #12]
   36864:	9a01      	ldr	r2, [sp, #4]
   36866:	691b      	ldr	r3, [r3, #16]
   36868:	b93b      	cbnz	r3, 3687a <z_impl_zsock_bind+0x26>
   3686a:	f000 fae0 	bl	36e2e <__errno>
   3686e:	2309      	movs	r3, #9
   36870:	6003      	str	r3, [r0, #0]
   36872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   36876:	b004      	add	sp, #16
   36878:	bd10      	pop	{r4, pc}
	VTABLE_CALL(bind, sock, addr, addrlen);
   3687a:	4621      	mov	r1, r4
   3687c:	4798      	blx	r3
   3687e:	e7fa      	b.n	36876 <z_impl_zsock_bind+0x22>

00036880 <z_impl_zsock_connect>:
{
   36880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   36882:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   36884:	a903      	add	r1, sp, #12
{
   36886:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   36888:	f7eb fea8 	bl	225dc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   3688c:	b118      	cbz	r0, 36896 <z_impl_zsock_connect+0x16>
   3688e:	9b03      	ldr	r3, [sp, #12]
   36890:	9a01      	ldr	r2, [sp, #4]
   36892:	695b      	ldr	r3, [r3, #20]
   36894:	b93b      	cbnz	r3, 368a6 <z_impl_zsock_connect+0x26>
   36896:	f000 faca 	bl	36e2e <__errno>
   3689a:	2309      	movs	r3, #9
   3689c:	6003      	str	r3, [r0, #0]
   3689e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   368a2:	b004      	add	sp, #16
   368a4:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   368a6:	4621      	mov	r1, r4
   368a8:	4798      	blx	r3
   368aa:	e7fa      	b.n	368a2 <z_impl_zsock_connect+0x22>

000368ac <z_impl_zsock_listen>:
{
   368ac:	b513      	push	{r0, r1, r4, lr}
   368ae:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   368b0:	a901      	add	r1, sp, #4
   368b2:	f7eb fe93 	bl	225dc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(listen, sock, backlog);
   368b6:	b110      	cbz	r0, 368be <z_impl_zsock_listen+0x12>
   368b8:	9b01      	ldr	r3, [sp, #4]
   368ba:	699b      	ldr	r3, [r3, #24]
   368bc:	b93b      	cbnz	r3, 368ce <z_impl_zsock_listen+0x22>
   368be:	f000 fab6 	bl	36e2e <__errno>
   368c2:	2309      	movs	r3, #9
   368c4:	6003      	str	r3, [r0, #0]
   368c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   368ca:	b002      	add	sp, #8
   368cc:	bd10      	pop	{r4, pc}
	VTABLE_CALL(listen, sock, backlog);
   368ce:	4621      	mov	r1, r4
   368d0:	4798      	blx	r3
   368d2:	e7fa      	b.n	368ca <z_impl_zsock_listen+0x1e>

000368d4 <z_impl_zsock_accept>:
{
   368d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   368d6:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   368d8:	a903      	add	r1, sp, #12
{
   368da:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   368dc:	f7eb fe7e 	bl	225dc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(accept, sock, addr, addrlen);
   368e0:	b118      	cbz	r0, 368ea <z_impl_zsock_accept+0x16>
   368e2:	9b03      	ldr	r3, [sp, #12]
   368e4:	9a01      	ldr	r2, [sp, #4]
   368e6:	69db      	ldr	r3, [r3, #28]
   368e8:	b93b      	cbnz	r3, 368fa <z_impl_zsock_accept+0x26>
   368ea:	f000 faa0 	bl	36e2e <__errno>
   368ee:	2309      	movs	r3, #9
   368f0:	6003      	str	r3, [r0, #0]
   368f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   368f6:	b004      	add	sp, #16
   368f8:	bd10      	pop	{r4, pc}
	VTABLE_CALL(accept, sock, addr, addrlen);
   368fa:	4621      	mov	r1, r4
   368fc:	4798      	blx	r3
   368fe:	e7fa      	b.n	368f6 <z_impl_zsock_accept+0x22>

00036900 <z_impl_zsock_sendto>:
{
   36900:	b530      	push	{r4, r5, lr}
   36902:	b087      	sub	sp, #28
   36904:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   36906:	a905      	add	r1, sp, #20
{
   36908:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   3690c:	f7eb fe66 	bl	225dc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   36910:	b120      	cbz	r0, 3691c <z_impl_zsock_sendto+0x1c>
   36912:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   36916:	9905      	ldr	r1, [sp, #20]
   36918:	6a0d      	ldr	r5, [r1, #32]
   3691a:	b93d      	cbnz	r5, 3692c <z_impl_zsock_sendto+0x2c>
   3691c:	f000 fa87 	bl	36e2e <__errno>
   36920:	2309      	movs	r3, #9
   36922:	6003      	str	r3, [r0, #0]
   36924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   36928:	b007      	add	sp, #28
   3692a:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3692c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3692e:	9101      	str	r1, [sp, #4]
   36930:	990a      	ldr	r1, [sp, #40]	; 0x28
   36932:	9100      	str	r1, [sp, #0]
   36934:	4621      	mov	r1, r4
   36936:	47a8      	blx	r5
   36938:	e7f6      	b.n	36928 <z_impl_zsock_sendto+0x28>

0003693a <z_impl_zsock_recvfrom>:
{
   3693a:	b530      	push	{r4, r5, lr}
   3693c:	b087      	sub	sp, #28
   3693e:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   36940:	a905      	add	r1, sp, #20
{
   36942:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   36946:	f7eb fe49 	bl	225dc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3694a:	b120      	cbz	r0, 36956 <z_impl_zsock_recvfrom+0x1c>
   3694c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   36950:	9905      	ldr	r1, [sp, #20]
   36952:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   36954:	b93d      	cbnz	r5, 36966 <z_impl_zsock_recvfrom+0x2c>
   36956:	f000 fa6a 	bl	36e2e <__errno>
   3695a:	2309      	movs	r3, #9
   3695c:	6003      	str	r3, [r0, #0]
   3695e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   36962:	b007      	add	sp, #28
   36964:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   36966:	990b      	ldr	r1, [sp, #44]	; 0x2c
   36968:	9101      	str	r1, [sp, #4]
   3696a:	990a      	ldr	r1, [sp, #40]	; 0x28
   3696c:	9100      	str	r1, [sp, #0]
   3696e:	4621      	mov	r1, r4
   36970:	47a8      	blx	r5
   36972:	e7f6      	b.n	36962 <z_impl_zsock_recvfrom+0x28>

00036974 <z_impl_zsock_inet_pton>:
}
#include <syscalls/zsock_poll_mrsh.c>
#endif

int z_impl_zsock_inet_pton(sa_family_t family, const char *src, void *dst)
{
   36974:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   36976:	f000 fac5 	bl	36f04 <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
		return 1;
	} else {
		return 0;
	}
}
   3697a:	fab0 f080 	clz	r0, r0
   3697e:	0940      	lsrs	r0, r0, #5
   36980:	bd08      	pop	{r3, pc}

00036982 <z_impl_zsock_getsockopt>:
	return -1;
}

int z_impl_zsock_getsockopt(int sock, int level, int optname,
			    void *optval, socklen_t *optlen)
{
   36982:	b530      	push	{r4, r5, lr}
   36984:	b087      	sub	sp, #28
   36986:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   36988:	a905      	add	r1, sp, #20
{
   3698a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   3698e:	f7eb fe25 	bl	225dc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   36992:	b120      	cbz	r0, 3699e <z_impl_zsock_getsockopt+0x1c>
   36994:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   36998:	9905      	ldr	r1, [sp, #20]
   3699a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   3699c:	b93d      	cbnz	r5, 369ae <z_impl_zsock_getsockopt+0x2c>
   3699e:	f000 fa46 	bl	36e2e <__errno>
   369a2:	2309      	movs	r3, #9
   369a4:	6003      	str	r3, [r0, #0]
   369a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   369aa:	b007      	add	sp, #28
   369ac:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   369ae:	990a      	ldr	r1, [sp, #40]	; 0x28
   369b0:	9100      	str	r1, [sp, #0]
   369b2:	4621      	mov	r1, r4
   369b4:	47a8      	blx	r5
   369b6:	e7f8      	b.n	369aa <z_impl_zsock_getsockopt+0x28>

000369b8 <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   369b8:	b530      	push	{r4, r5, lr}
   369ba:	b087      	sub	sp, #28
   369bc:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   369be:	a905      	add	r1, sp, #20
{
   369c0:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   369c4:	f7eb fe0a 	bl	225dc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   369c8:	b120      	cbz	r0, 369d4 <z_impl_zsock_setsockopt+0x1c>
   369ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   369ce:	9905      	ldr	r1, [sp, #20]
   369d0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
   369d2:	b93d      	cbnz	r5, 369e4 <z_impl_zsock_setsockopt+0x2c>
   369d4:	f000 fa2b 	bl	36e2e <__errno>
   369d8:	2309      	movs	r3, #9
   369da:	6003      	str	r3, [r0, #0]
   369dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   369e0:	b007      	add	sp, #28
   369e2:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   369e4:	990a      	ldr	r1, [sp, #40]	; 0x28
   369e6:	9100      	str	r1, [sp, #0]
   369e8:	4621      	mov	r1, r4
   369ea:	47a8      	blx	r5
   369ec:	e7f8      	b.n	369e0 <z_impl_zsock_setsockopt+0x28>

000369ee <z_impl_flash_write_protection_set>:
						    bool enable)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
   369ee:	6883      	ldr	r3, [r0, #8]
   369f0:	68db      	ldr	r3, [r3, #12]
   369f2:	4718      	bx	r3

000369f4 <device_get_binding>:
   369f4:	f7fc bada 	b.w	32fac <z_impl_device_get_binding>

000369f8 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   369f8:	4770      	bx	lr

000369fa <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   369fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   369fc:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   369fe:	6883      	ldr	r3, [r0, #8]
{
   36a00:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   36a02:	428b      	cmp	r3, r1
{
   36a04:	460c      	mov	r4, r1
   36a06:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   36a08:	d310      	bcc.n	36a2c <flash_area_read+0x32>
   36a0a:	1871      	adds	r1, r6, r1
   36a0c:	428b      	cmp	r3, r1
   36a0e:	d30d      	bcc.n	36a2c <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   36a10:	68c0      	ldr	r0, [r0, #12]
   36a12:	f7ff ffef 	bl	369f4 <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   36a16:	6869      	ldr	r1, [r5, #4]
   36a18:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   36a1a:	6883      	ldr	r3, [r0, #8]
   36a1c:	9a01      	ldr	r2, [sp, #4]
   36a1e:	681c      	ldr	r4, [r3, #0]
   36a20:	4633      	mov	r3, r6
   36a22:	46a4      	mov	ip, r4
}
   36a24:	b002      	add	sp, #8
   36a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   36a2a:	4760      	bx	ip
   36a2c:	f06f 0015 	mvn.w	r0, #21
   36a30:	b002      	add	sp, #8
   36a32:	bd70      	pop	{r4, r5, r6, pc}

00036a34 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   36a34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   36a38:	4698      	mov	r8, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   36a3a:	6883      	ldr	r3, [r0, #8]
{
   36a3c:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   36a3e:	428b      	cmp	r3, r1
{
   36a40:	460d      	mov	r5, r1
   36a42:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   36a44:	d31c      	bcc.n	36a80 <flash_area_write+0x4c>
   36a46:	4441      	add	r1, r8
   36a48:	428b      	cmp	r3, r1
   36a4a:	d319      	bcc.n	36a80 <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   36a4c:	68c0      	ldr	r0, [r0, #12]
   36a4e:	f7ff ffd1 	bl	369f4 <device_get_binding>
   36a52:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   36a54:	2100      	movs	r1, #0
   36a56:	f7ff ffca 	bl	369ee <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   36a5a:	4604      	mov	r4, r0
   36a5c:	b960      	cbnz	r0, 36a78 <flash_area_write+0x44>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   36a5e:	6879      	ldr	r1, [r7, #4]
   36a60:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   36a62:	68b3      	ldr	r3, [r6, #8]
   36a64:	4630      	mov	r0, r6
   36a66:	685c      	ldr	r4, [r3, #4]
   36a68:	9a01      	ldr	r2, [sp, #4]
   36a6a:	4643      	mov	r3, r8
   36a6c:	47a0      	blx	r4
   36a6e:	4604      	mov	r4, r0
   36a70:	2101      	movs	r1, #1
   36a72:	4630      	mov	r0, r6
   36a74:	f7ff ffbb 	bl	369ee <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   36a78:	4620      	mov	r0, r4
   36a7a:	b002      	add	sp, #8
   36a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   36a80:	f06f 0415 	mvn.w	r4, #21
   36a84:	e7f8      	b.n	36a78 <flash_area_write+0x44>

00036a86 <flash_area_align>:

	return rc;
}

uint8_t flash_area_align(const struct flash_area *fa)
{
   36a86:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   36a88:	68c0      	ldr	r0, [r0, #12]
   36a8a:	f7ff ffb3 	bl	369f4 <device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
   36a8e:	6883      	ldr	r3, [r0, #8]
   36a90:	691b      	ldr	r3, [r3, #16]
   36a92:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   36a94:	7800      	ldrb	r0, [r0, #0]
   36a96:	bd08      	pop	{r3, pc}

00036a98 <flash_area_get_device>:
	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   36a98:	68c0      	ldr	r0, [r0, #12]
   36a9a:	f7ff bfab 	b.w	369f4 <device_get_binding>

00036a9e <flash_area_erased_val>:
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   36a9e:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   36aa0:	68c0      	ldr	r0, [r0, #12]
   36aa2:	f7ff ffa7 	bl	369f4 <device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   36aa6:	6883      	ldr	r3, [r0, #8]
   36aa8:	691b      	ldr	r3, [r3, #16]
   36aaa:	4798      	blx	r3

	return param->erase_value;
}
   36aac:	7900      	ldrb	r0, [r0, #4]
   36aae:	bd08      	pop	{r3, pc}

00036ab0 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   36ab0:	6883      	ldr	r3, [r0, #8]
   36ab2:	68db      	ldr	r3, [r3, #12]
   36ab4:	4718      	bx	r3

00036ab6 <flash_get_write_block_size>:
}


extern size_t z_impl_flash_get_write_block_size(const struct device * dev);
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   36ab6:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   36ab8:	6883      	ldr	r3, [r0, #8]
   36aba:	691b      	ldr	r3, [r3, #16]
   36abc:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   36abe:	6800      	ldr	r0, [r0, #0]
   36ac0:	bd08      	pop	{r3, pc}

00036ac2 <stream_flash_buffered_write>:
{
   36ac2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   36ac6:	4688      	mov	r8, r1
   36ac8:	4616      	mov	r6, r2
   36aca:	461f      	mov	r7, r3
	if (!ctx) {
   36acc:	4604      	mov	r4, r0
   36ace:	2800      	cmp	r0, #0
   36ad0:	d059      	beq.n	36b86 <stream_flash_buffered_write+0xc4>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   36ad2:	6882      	ldr	r2, [r0, #8]
   36ad4:	6903      	ldr	r3, [r0, #16]
   36ad6:	4413      	add	r3, r2
   36ad8:	6982      	ldr	r2, [r0, #24]
   36ada:	4433      	add	r3, r6
   36adc:	4293      	cmp	r3, r2
   36ade:	d855      	bhi.n	36b8c <stream_flash_buffered_write+0xca>
	int processed = 0;
   36ae0:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   36ae2:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
	while ((len - processed) >=
   36ae6:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   36aea:	eba2 0900 	sub.w	r9, r2, r0
	while ((len - processed) >=
   36aee:	45ca      	cmp	sl, r9
   36af0:	d239      	bcs.n	36b66 <stream_flash_buffered_write+0xa4>
	if (processed < len) {
   36af2:	42b5      	cmp	r5, r6
   36af4:	d209      	bcs.n	36b0a <stream_flash_buffered_write+0x48>
		memcpy(ctx->buf + ctx->buf_bytes,
   36af6:	6823      	ldr	r3, [r4, #0]
   36af8:	4652      	mov	r2, sl
   36afa:	4418      	add	r0, r3
   36afc:	eb08 0105 	add.w	r1, r8, r5
   36b00:	f002 f81d 	bl	38b3e <memcpy>
		ctx->buf_bytes += len - processed;
   36b04:	68a3      	ldr	r3, [r4, #8]
   36b06:	4453      	add	r3, sl
   36b08:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   36b0a:	2f00      	cmp	r7, #0
   36b0c:	d041      	beq.n	36b92 <stream_flash_buffered_write+0xd0>
   36b0e:	68a0      	ldr	r0, [r4, #8]
   36b10:	b330      	cbz	r0, 36b60 <stream_flash_buffered_write+0x9e>
		fill_length = flash_get_write_block_size(ctx->fdev);
   36b12:	68e0      	ldr	r0, [r4, #12]
   36b14:	f7ff ffcf 	bl	36ab6 <flash_get_write_block_size>
		if (ctx->buf_bytes % fill_length) {
   36b18:	68a3      	ldr	r3, [r4, #8]
		fill_length = flash_get_write_block_size(ctx->fdev);
   36b1a:	4606      	mov	r6, r0
		if (ctx->buf_bytes % fill_length) {
   36b1c:	fbb3 f5f0 	udiv	r5, r3, r0
   36b20:	fb00 3515 	mls	r5, r0, r5, r3
   36b24:	b1b5      	cbz	r5, 36b54 <stream_flash_buffered_write+0x92>
					ctx->offset + ctx->bytes_written,
   36b26:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
			rc = flash_read(ctx->fdev,
   36b2a:	68e0      	ldr	r0, [r4, #12]
					ctx->offset + ctx->bytes_written,
   36b2c:	4419      	add	r1, r3
	return api->read(dev, offset, data, len);
   36b2e:	6883      	ldr	r3, [r0, #8]
   36b30:	f10d 0207 	add.w	r2, sp, #7
   36b34:	681f      	ldr	r7, [r3, #0]
   36b36:	2301      	movs	r3, #1
   36b38:	47b8      	blx	r7
			if (rc != 0) {
   36b3a:	b988      	cbnz	r0, 36b60 <stream_flash_buffered_write+0x9e>
			memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   36b3c:	68a3      	ldr	r3, [r4, #8]
   36b3e:	6820      	ldr	r0, [r4, #0]
			fill_length -= ctx->buf_bytes % fill_length;
   36b40:	1b75      	subs	r5, r6, r5
__ssp_bos_icheck3(memset, void *, int)
   36b42:	4418      	add	r0, r3
   36b44:	462a      	mov	r2, r5
   36b46:	f89d 1007 	ldrb.w	r1, [sp, #7]
   36b4a:	f002 f818 	bl	38b7e <memset>
			ctx->buf_bytes += fill_length;
   36b4e:	68a3      	ldr	r3, [r4, #8]
   36b50:	442b      	add	r3, r5
   36b52:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   36b54:	4620      	mov	r0, r4
   36b56:	f7ed fcd7 	bl	24508 <flash_sync>
		ctx->bytes_written -= fill_length;
   36b5a:	6923      	ldr	r3, [r4, #16]
   36b5c:	1b5d      	subs	r5, r3, r5
   36b5e:	6125      	str	r5, [r4, #16]
}
   36b60:	b002      	add	sp, #8
   36b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   36b66:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   36b68:	464a      	mov	r2, r9
   36b6a:	4418      	add	r0, r3
   36b6c:	eb08 0105 	add.w	r1, r8, r5
   36b70:	f001 ffe5 	bl	38b3e <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   36b74:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
   36b76:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
   36b78:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   36b7a:	f7ed fcc5 	bl	24508 <flash_sync>
		if (rc != 0) {
   36b7e:	2800      	cmp	r0, #0
   36b80:	d1ee      	bne.n	36b60 <stream_flash_buffered_write+0x9e>
		processed += buf_empty_bytes;
   36b82:	444d      	add	r5, r9
   36b84:	e7ad      	b.n	36ae2 <stream_flash_buffered_write+0x20>
		return -EFAULT;
   36b86:	f06f 000d 	mvn.w	r0, #13
   36b8a:	e7e9      	b.n	36b60 <stream_flash_buffered_write+0x9e>
		return -ENOMEM;
   36b8c:	f06f 000b 	mvn.w	r0, #11
   36b90:	e7e6      	b.n	36b60 <stream_flash_buffered_write+0x9e>
   36b92:	4638      	mov	r0, r7
   36b94:	e7e4      	b.n	36b60 <stream_flash_buffered_write+0x9e>

00036b96 <stream_flash_bytes_written>:
}
   36b96:	6900      	ldr	r0, [r0, #16]
   36b98:	4770      	bx	lr

00036b9a <sys_pm_init>:
	}
}

#if CONFIG_DEVICE_POWER_MANAGEMENT
static int sys_pm_init(const struct device *dev)
{
   36b9a:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	sys_pm_create_device_list();
   36b9c:	f7ed fd94 	bl	246c8 <sys_pm_create_device_list>
	return 0;
}
   36ba0:	2000      	movs	r0, #0
   36ba2:	bd08      	pop	{r3, pc}

00036ba4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   36ba4:	b2cb      	uxtb	r3, r1
   36ba6:	210c      	movs	r1, #12
   36ba8:	68c2      	ldr	r2, [r0, #12]
   36baa:	fb03 2101 	mla	r1, r3, r1, r2
   36bae:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   36bb0:	f000 0007 	and.w	r0, r0, #7
   36bb4:	4770      	bx	lr

00036bb6 <set_off_state>:
	__asm__ volatile(
   36bb6:	f04f 0320 	mov.w	r3, #32
   36bba:	f3ef 8211 	mrs	r2, BASEPRI
   36bbe:	f383 8811 	msr	BASEPRI, r3
   36bc2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   36bc6:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   36bc8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   36bcc:	d001      	beq.n	36bd2 <set_off_state+0x1c>
   36bce:	428b      	cmp	r3, r1
   36bd0:	d107      	bne.n	36be2 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   36bd2:	2301      	movs	r3, #1
   36bd4:	6003      	str	r3, [r0, #0]
	int err = 0;
   36bd6:	2000      	movs	r0, #0
	__asm__ volatile(
   36bd8:	f382 8811 	msr	BASEPRI, r2
   36bdc:	f3bf 8f6f 	isb	sy
}
   36be0:	4770      	bx	lr
		err = -EPERM;
   36be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   36be6:	e7f7      	b.n	36bd8 <set_off_state+0x22>

00036be8 <set_starting_state>:
{
   36be8:	b510      	push	{r4, lr}
	__asm__ volatile(
   36bea:	f04f 0320 	mov.w	r3, #32
   36bee:	f3ef 8211 	mrs	r2, BASEPRI
   36bf2:	f383 8811 	msr	BASEPRI, r3
   36bf6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   36bfa:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   36bfc:	f003 0407 	and.w	r4, r3, #7
   36c00:	2c01      	cmp	r4, #1
   36c02:	d106      	bne.n	36c12 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   36c04:	6001      	str	r1, [r0, #0]
	int err = 0;
   36c06:	2000      	movs	r0, #0
	__asm__ volatile(
   36c08:	f382 8811 	msr	BASEPRI, r2
   36c0c:	f3bf 8f6f 	isb	sy
}
   36c10:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   36c12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   36c16:	428b      	cmp	r3, r1
		err = -EALREADY;
   36c18:	bf14      	ite	ne
   36c1a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   36c1e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   36c22:	e7f1      	b.n	36c08 <set_starting_state+0x20>

00036c24 <set_on_state>:
	__asm__ volatile(
   36c24:	f04f 0320 	mov.w	r3, #32
   36c28:	f3ef 8211 	mrs	r2, BASEPRI
   36c2c:	f383 8811 	msr	BASEPRI, r3
   36c30:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   36c34:	6803      	ldr	r3, [r0, #0]
   36c36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   36c3a:	f043 0302 	orr.w	r3, r3, #2
   36c3e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   36c40:	f382 8811 	msr	BASEPRI, r2
   36c44:	f3bf 8f6f 	isb	sy
}
   36c48:	4770      	bx	lr

00036c4a <onoff_started_callback>:
{
   36c4a:	b410      	push	{r4}
	notify(mgr, 0);
   36c4c:	241c      	movs	r4, #28
	return &data->mgr[type];
   36c4e:	68c0      	ldr	r0, [r0, #12]
   36c50:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   36c52:	fb03 0004 	mla	r0, r3, r4, r0
   36c56:	2100      	movs	r1, #0
}
   36c58:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   36c5c:	4710      	bx	r2

00036c5e <blocking_start_callback>:
{
   36c5e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   36c60:	f7fd b91e 	b.w	33ea0 <z_impl_k_sem_give>

00036c64 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   36c64:	2000      	movs	r0, #0
   36c66:	f7fb bfef 	b.w	32c48 <nrfx_clock_stop>

00036c6a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   36c6a:	2000      	movs	r0, #0
   36c6c:	f7fb bfba 	b.w	32be4 <nrfx_clock_start>

00036c70 <api_stop>:
{
   36c70:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   36c72:	240c      	movs	r4, #12
   36c74:	b2c9      	uxtb	r1, r1
   36c76:	434c      	muls	r4, r1
{
   36c78:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   36c7a:	68c0      	ldr	r0, [r0, #12]
   36c7c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   36c80:	2180      	movs	r1, #128	; 0x80
   36c82:	4418      	add	r0, r3
   36c84:	f7ff ff97 	bl	36bb6 <set_off_state>
	if (err < 0) {
   36c88:	2800      	cmp	r0, #0
   36c8a:	db04      	blt.n	36c96 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   36c8c:	6869      	ldr	r1, [r5, #4]
   36c8e:	440c      	add	r4, r1
   36c90:	6863      	ldr	r3, [r4, #4]
   36c92:	4798      	blx	r3
	return 0;
   36c94:	2000      	movs	r0, #0
}
   36c96:	bd38      	pop	{r3, r4, r5, pc}

00036c98 <api_start>:
{
   36c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   36c9c:	240c      	movs	r4, #12
   36c9e:	b2c9      	uxtb	r1, r1
   36ca0:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   36ca2:	68c5      	ldr	r5, [r0, #12]
{
   36ca4:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   36ca6:	f104 0040 	add.w	r0, r4, #64	; 0x40
   36caa:	2180      	movs	r1, #128	; 0x80
   36cac:	4428      	add	r0, r5
{
   36cae:	4690      	mov	r8, r2
   36cb0:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   36cb2:	f7ff ff99 	bl	36be8 <set_starting_state>
	if (err < 0) {
   36cb6:	2800      	cmp	r0, #0
   36cb8:	db06      	blt.n	36cc8 <api_start+0x30>
	subdata->cb = cb;
   36cba:	4425      	add	r5, r4
	subdata->user_data = user_data;
   36cbc:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   36cc0:	6873      	ldr	r3, [r6, #4]
   36cc2:	591b      	ldr	r3, [r3, r4]
   36cc4:	4798      	blx	r3
	return 0;
   36cc6:	2000      	movs	r0, #0
}
   36cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00036ccc <z_clock_device_ctrl>:
int __weak z_clock_device_ctrl(const struct device *device,
			       uint32_t ctrl_command,
			       void *context, device_pm_cb cb, void *arg)
{
	return -ENOTSUP;
}
   36ccc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   36cd0:	4770      	bx	lr

00036cd2 <z_clock_isr>:
}
   36cd2:	4770      	bx	lr

00036cd4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   36cd4:	4770      	bx	lr

00036cd6 <sys_clock_disable>:
   36cd6:	4770      	bx	lr

00036cd8 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   36cd8:	b510      	push	{r4, lr}
   36cda:	b40f      	push	{r0, r1, r2, r3}
   36cdc:	f7fc fd86 	bl	337ec <k_sched_lock>
   36ce0:	bc0f      	pop	{r0, r1, r2, r3}
   36ce2:	f7e1 f981 	bl	17fe8 <spm_request_random_number_nse>
   36ce6:	b40f      	push	{r0, r1, r2, r3}
   36ce8:	f7fc fdd2 	bl	33890 <k_sched_unlock>
   36cec:	bc0f      	pop	{r0, r1, r2, r3}
   36cee:	bd10      	pop	{r4, pc}

00036cf0 <spm_request_read>:
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   36cf0:	b510      	push	{r4, lr}
   36cf2:	b40f      	push	{r0, r1, r2, r3}
   36cf4:	f7fc fd7a 	bl	337ec <k_sched_lock>
   36cf8:	bc0f      	pop	{r0, r1, r2, r3}
   36cfa:	f7e1 f979 	bl	17ff0 <spm_request_read_nse>
   36cfe:	b40f      	push	{r0, r1, r2, r3}
   36d00:	f7fc fdc6 	bl	33890 <k_sched_unlock>
   36d04:	bc0f      	pop	{r0, r1, r2, r3}
   36d06:	bd10      	pop	{r4, pc}

00036d08 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   36d08:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   36d0a:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   36d0c:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   36d0e:	bf97      	itett	ls
   36d10:	6882      	ldrls	r2, [r0, #8]
    r = RdOff - WrOff - 1u;
   36d12:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   36d16:	18d2      	addls	r2, r2, r3
   36d18:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
   36d1c:	bf94      	ite	ls
   36d1e:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   36d20:	1a58      	subhi	r0, r3, r1
}
   36d22:	4770      	bx	lr

00036d24 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   36d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   36d28:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   36d2c:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   36d2e:	eba9 0804 	sub.w	r8, r9, r4
   36d32:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   36d34:	4590      	cmp	r8, r2
   36d36:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   36d38:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
   36d3a:	4414      	add	r4, r2
   36d3c:	d904      	bls.n	36d48 <_WriteNoCheck+0x24>
   36d3e:	f001 fefe 	bl	38b3e <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   36d42:	60ec      	str	r4, [r5, #12]
}
   36d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   36d48:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   36d4a:	eba4 0409 	sub.w	r4, r4, r9
   36d4e:	f001 fef6 	bl	38b3e <memcpy>
   36d52:	4622      	mov	r2, r4
   36d54:	6868      	ldr	r0, [r5, #4]
   36d56:	eb07 0108 	add.w	r1, r7, r8
   36d5a:	e7f0      	b.n	36d3e <_WriteNoCheck+0x1a>

00036d5c <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   36d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   36d60:	4606      	mov	r6, r0
   36d62:	4689      	mov	r9, r1
   36d64:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   36d66:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   36d6a:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   36d6c:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   36d6e:	68b3      	ldr	r3, [r6, #8]
   36d70:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   36d72:	bf28      	it	cs
   36d74:	18e4      	addcs	r4, r4, r3
   36d76:	3c01      	subs	r4, #1
   36d78:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   36d7a:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   36d7c:	42bc      	cmp	r4, r7
   36d7e:	bf28      	it	cs
   36d80:	463c      	movcs	r4, r7
   36d82:	4294      	cmp	r4, r2
   36d84:	bf28      	it	cs
   36d86:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   36d88:	6870      	ldr	r0, [r6, #4]
   36d8a:	4649      	mov	r1, r9
   36d8c:	4428      	add	r0, r5
   36d8e:	4622      	mov	r2, r4
   36d90:	f001 fed5 	bl	38b3e <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   36d94:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   36d96:	4425      	add	r5, r4
      WrOff = 0u;
   36d98:	42ab      	cmp	r3, r5
   36d9a:	bf08      	it	eq
   36d9c:	2500      	moveq	r5, #0
  } while (NumBytes);
   36d9e:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   36da0:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   36da2:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   36da4:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   36da6:	d1e1      	bne.n	36d6c <_WriteBlocking+0x10>
}
   36da8:	4640      	mov	r0, r8
   36daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00036dae <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   36dae:	f7ed bfb7 	b.w	24d20 <_DoInit>

00036db2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   36db2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   36db4:	f7ff fffb 	bl	36dae <SEGGER_RTT_Init>

	return 0;
}
   36db8:	2000      	movs	r0, #0
   36dba:	bd08      	pop	{r3, pc}

00036dbc <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   36dbc:	2100      	movs	r1, #0
   36dbe:	2001      	movs	r0, #1
   36dc0:	f7ee b9a4 	b.w	2510c <z_arm_fatal_error>

00036dc4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   36dc4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   36dc6:	f383 880b 	msr	PSPLIM, r3
}
   36dca:	4770      	bx	lr

00036dcc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   36dcc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   36dce:	6800      	ldr	r0, [r0, #0]
   36dd0:	f7ee b99c 	b.w	2510c <z_arm_fatal_error>

00036dd4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   36dd4:	b508      	push	{r3, lr}
	handler();
   36dd6:	f7ee fa0d 	bl	251f4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   36dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   36dde:	f7ee bcb1 	b.w	25744 <z_arm_exc_exit>

00036de2 <mpu_configure_region>:
{
   36de2:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   36de4:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   36de6:	680c      	ldr	r4, [r1, #0]
{
   36de8:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   36dea:	890a      	ldrh	r2, [r1, #8]
   36dec:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   36dee:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   36df0:	3b01      	subs	r3, #1
   36df2:	f024 041f 	bic.w	r4, r4, #31
   36df6:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   36df8:	f002 021f 	and.w	r2, r2, #31
   36dfc:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   36e00:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   36e04:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   36e06:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   36e0a:	9303      	str	r3, [sp, #12]
   36e0c:	f7ee fd66 	bl	258dc <region_allocate_and_init>
}
   36e10:	b005      	add	sp, #20
   36e12:	bd30      	pop	{r4, r5, pc}

00036e14 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   36e14:	e840 f000 	tt	r0, r0
   36e18:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   36e1a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   36e1e:	bf14      	ite	ne
   36e20:	4618      	movne	r0, r3
   36e22:	f06f 0015 	mvneq.w	r0, #21
   36e26:	4770      	bx	lr

00036e28 <_stdout_hook_default>:
}
   36e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   36e2c:	4770      	bx	lr

00036e2e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   36e2e:	f7fc b8e5 	b.w	32ffc <z_impl_z_errno>

00036e32 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   36e32:	b508      	push	{r3, lr}
	net_if_init();
   36e34:	f7ee ff06 	bl	25c44 <net_if_init>
	net_if_post_init();
   36e38:	f7ee ff1a 	bl	25c70 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   36e3c:	2000      	movs	r0, #0
   36e3e:	bd08      	pop	{r3, pc}

00036e40 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   36e40:	b110      	cbz	r0, 36e48 <net_if_l2+0x8>
   36e42:	6800      	ldr	r0, [r0, #0]
   36e44:	b100      	cbz	r0, 36e48 <net_if_l2+0x8>
	return iface->if_dev->l2;
   36e46:	6840      	ldr	r0, [r0, #4]
}
   36e48:	4770      	bx	lr

00036e4a <l2_flags_get>:
{
   36e4a:	b510      	push	{r4, lr}
   36e4c:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   36e4e:	f7ff fff7 	bl	36e40 <net_if_l2>
   36e52:	b128      	cbz	r0, 36e60 <l2_flags_get+0x16>
   36e54:	68c2      	ldr	r2, [r0, #12]
   36e56:	b11a      	cbz	r2, 36e60 <l2_flags_get+0x16>
}
   36e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   36e5c:	4618      	mov	r0, r3
   36e5e:	4710      	bx	r2
}
   36e60:	2000      	movs	r0, #0
   36e62:	bd10      	pop	{r4, pc}

00036e64 <net_if_up>:
{
   36e64:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   36e66:	6803      	ldr	r3, [r0, #0]
   36e68:	4604      	mov	r4, r0
   36e6a:	330c      	adds	r3, #12
   36e6c:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   36e70:	f013 0301 	ands.w	r3, r3, #1
   36e74:	d10b      	bne.n	36e8e <net_if_up+0x2a>
	     net_if_is_socket_offloaded(iface))) {
   36e76:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   36e78:	7e91      	ldrb	r1, [r2, #26]
   36e7a:	b151      	cbz	r1, 36e92 <net_if_up+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   36e7c:	320c      	adds	r2, #12
   36e7e:	e8d2 1fef 	ldaex	r1, [r2]
   36e82:	f041 0101 	orr.w	r1, r1, #1
   36e86:	e8c2 1fe0 	stlex	r0, r1, [r2]
   36e8a:	2800      	cmp	r0, #0
   36e8c:	d1f7      	bne.n	36e7e <net_if_up+0x1a>
		return 0;
   36e8e:	2000      	movs	r0, #0
   36e90:	e018      	b.n	36ec4 <net_if_up+0x60>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   36e92:	f7ff ffd5 	bl	36e40 <net_if_l2>
   36e96:	b968      	cbnz	r0, 36eb4 <net_if_up+0x50>
   36e98:	6823      	ldr	r3, [r4, #0]
   36e9a:	330c      	adds	r3, #12
   36e9c:	e8d3 2fef 	ldaex	r2, [r3]
   36ea0:	f042 0201 	orr.w	r2, r2, #1
   36ea4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   36ea8:	2900      	cmp	r1, #0
   36eaa:	d1f7      	bne.n	36e9c <net_if_up+0x38>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   36eac:	4620      	mov	r0, r4
   36eae:	f7ff ffcc 	bl	36e4a <l2_flags_get>
   36eb2:	e7ec      	b.n	36e8e <net_if_up+0x2a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   36eb4:	6883      	ldr	r3, [r0, #8]
   36eb6:	2b00      	cmp	r3, #0
   36eb8:	d0ee      	beq.n	36e98 <net_if_up+0x34>
	status = net_if_l2(iface)->enable(iface, true);
   36eba:	2101      	movs	r1, #1
   36ebc:	4620      	mov	r0, r4
   36ebe:	4798      	blx	r3
	if (status < 0) {
   36ec0:	2800      	cmp	r0, #0
   36ec2:	dae9      	bge.n	36e98 <net_if_up+0x34>
}
   36ec4:	bd10      	pop	{r4, pc}

00036ec6 <net_byte_to_hex>:
{
   36ec6:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   36ec8:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   36eca:	b1bb      	cbz	r3, 36efc <net_byte_to_hex+0x36>
		if (val < 10) {
   36ecc:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   36ece:	b26b      	sxtb	r3, r5
   36ed0:	bf86      	itte	hi
   36ed2:	f1a2 050a 	subhi.w	r5, r2, #10
   36ed6:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   36ed8:	3330      	addls	r3, #48	; 0x30
   36eda:	1c44      	adds	r4, r0, #1
   36edc:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   36ede:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   36ee2:	4619      	mov	r1, r3
   36ee4:	2b09      	cmp	r3, #9
	*ptr = '\0';
   36ee6:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   36eea:	bf83      	ittte	hi
   36eec:	3a0a      	subhi	r2, #10
   36eee:	1889      	addhi	r1, r1, r2
   36ef0:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   36ef2:	3130      	addls	r1, #48	; 0x30
   36ef4:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   36ef6:	7063      	strb	r3, [r4, #1]
   36ef8:	1c60      	adds	r0, r4, #1
}
   36efa:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   36efc:	2d00      	cmp	r5, #0
   36efe:	d1e5      	bne.n	36ecc <net_byte_to_hex+0x6>
   36f00:	4604      	mov	r4, r0
   36f02:	e7ec      	b.n	36ede <net_byte_to_hex+0x18>

00036f04 <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   36f04:	2801      	cmp	r0, #1
{
   36f06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   36f0a:	460c      	mov	r4, r1
   36f0c:	4616      	mov	r6, r2
	if (family == AF_INET) {
   36f0e:	d126      	bne.n	36f5e <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   36f10:	4608      	mov	r0, r1
   36f12:	f7e6 f8ad 	bl	1d070 <strlen>
		for (i = 0; i < len; i++) {
   36f16:	4623      	mov	r3, r4
   36f18:	4420      	add	r0, r4
   36f1a:	4298      	cmp	r0, r3
   36f1c:	d112      	bne.n	36f44 <z_impl_net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
   36f1e:	4635      	mov	r5, r6
   36f20:	2300      	movs	r3, #0
   36f22:	3603      	adds	r6, #3
   36f24:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   36f28:	4620      	mov	r0, r4
   36f2a:	220a      	movs	r2, #10
   36f2c:	a901      	add	r1, sp, #4
   36f2e:	f7fe f819 	bl	34f64 <strtol>

			src = ++endptr;
   36f32:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   36f34:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   36f38:	42ae      	cmp	r6, r5
			src = ++endptr;
   36f3a:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   36f3e:	d1f3      	bne.n	36f28 <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   36f40:	2000      	movs	r0, #0
   36f42:	e009      	b.n	36f58 <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   36f44:	f813 2b01 	ldrb.w	r2, [r3], #1
   36f48:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   36f4c:	2909      	cmp	r1, #9
   36f4e:	d9e4      	bls.n	36f1a <z_impl_net_addr_pton+0x16>
   36f50:	2a2e      	cmp	r2, #46	; 0x2e
   36f52:	d0e2      	beq.n	36f1a <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   36f54:	f06f 0015 	mvn.w	r0, #21
}
   36f58:	b003      	add	sp, #12
   36f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   36f5e:	2802      	cmp	r0, #2
   36f60:	d1f8      	bne.n	36f54 <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   36f62:	212e      	movs	r1, #46	; 0x2e
   36f64:	4620      	mov	r0, r4
   36f66:	f001 ff3c 	bl	38de2 <strchr>
		if (*src == ':') {
   36f6a:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   36f6c:	2800      	cmp	r0, #0
   36f6e:	bf14      	ite	ne
   36f70:	2706      	movne	r7, #6
   36f72:	2708      	moveq	r7, #8
		if (*src == ':') {
   36f74:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   36f76:	bf08      	it	eq
   36f78:	3401      	addeq	r4, #1
		len = strlen(src);
   36f7a:	4620      	mov	r0, r4
   36f7c:	f7e6 f878 	bl	1d070 <strlen>
		for (i = 0; i < len; i++) {
   36f80:	2300      	movs	r3, #0
   36f82:	4283      	cmp	r3, r0
   36f84:	db21      	blt.n	36fca <z_impl_net_addr_pton+0xc6>
		for (i = 0; i < expected_groups; i++) {
   36f86:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   36f88:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   36f8a:	2c00      	cmp	r4, #0
   36f8c:	d0e2      	beq.n	36f54 <z_impl_net_addr_pton+0x50>
   36f8e:	7823      	ldrb	r3, [r4, #0]
   36f90:	2b00      	cmp	r3, #0
   36f92:	d0df      	beq.n	36f54 <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
   36f94:	2b3a      	cmp	r3, #58	; 0x3a
   36f96:	d02d      	beq.n	36ff4 <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   36f98:	2210      	movs	r2, #16
   36f9a:	2100      	movs	r1, #0
   36f9c:	4620      	mov	r0, r4
   36f9e:	f7fd ffe1 	bl	34f64 <strtol>
   36fa2:	2210      	movs	r2, #16
   36fa4:	4681      	mov	r9, r0
   36fa6:	2100      	movs	r1, #0
   36fa8:	4620      	mov	r0, r4
   36faa:	f7fd ffdb 	bl	34f64 <strtol>
   36fae:	f3c9 2907 	ubfx	r9, r9, #8, #8
   36fb2:	ea49 2000 	orr.w	r0, r9, r0, lsl #8
   36fb6:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
				src = strchr(src, ':');
   36fba:	213a      	movs	r1, #58	; 0x3a
   36fbc:	4620      	mov	r0, r4
   36fbe:	f001 ff10 	bl	38de2 <strchr>
				if (src) {
   36fc2:	4604      	mov	r4, r0
   36fc4:	b178      	cbz	r0, 36fe6 <z_impl_net_addr_pton+0xe2>
			src++;
   36fc6:	3401      	adds	r4, #1
   36fc8:	e010      	b.n	36fec <z_impl_net_addr_pton+0xe8>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   36fca:	5ce2      	ldrb	r2, [r4, r3]
   36fcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   36fd0:	290a      	cmp	r1, #10
   36fd2:	d906      	bls.n	36fe2 <z_impl_net_addr_pton+0xde>
   36fd4:	f022 0120 	bic.w	r1, r2, #32
   36fd8:	3941      	subs	r1, #65	; 0x41
   36fda:	2905      	cmp	r1, #5
   36fdc:	d901      	bls.n	36fe2 <z_impl_net_addr_pton+0xde>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   36fde:	2a2e      	cmp	r2, #46	; 0x2e
   36fe0:	d1b8      	bne.n	36f54 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   36fe2:	3301      	adds	r3, #1
   36fe4:	e7cd      	b.n	36f82 <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
   36fe6:	1e7b      	subs	r3, r7, #1
   36fe8:	42ab      	cmp	r3, r5
   36fea:	dcb3      	bgt.n	36f54 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   36fec:	3501      	adds	r5, #1
   36fee:	42af      	cmp	r7, r5
   36ff0:	dccb      	bgt.n	36f8a <z_impl_net_addr_pton+0x86>
   36ff2:	e013      	b.n	3701c <z_impl_net_addr_pton+0x118>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   36ff4:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   36ff8:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
   36ffc:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   37000:	3501      	adds	r5, #1
   37002:	42af      	cmp	r7, r5
   37004:	dcf6      	bgt.n	36ff4 <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
   37006:	213a      	movs	r1, #58	; 0x3a
   37008:	4620      	mov	r0, r4
   3700a:	f001 ff37 	bl	38e7c <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   3700e:	42a0      	cmp	r0, r4
   37010:	d11f      	bne.n	37052 <z_impl_net_addr_pton+0x14e>
   37012:	2f06      	cmp	r7, #6
   37014:	d001      	beq.n	3701a <z_impl_net_addr_pton+0x116>
   37016:	7863      	ldrb	r3, [r4, #1]
   37018:	bb63      	cbnz	r3, 37074 <z_impl_net_addr_pton+0x170>
				src++;
   3701a:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   3701c:	2f06      	cmp	r7, #6
   3701e:	d18f      	bne.n	36f40 <z_impl_net_addr_pton+0x3c>
			for (i = 0; i < 4; i++) {
   37020:	2500      	movs	r5, #0
   37022:	360c      	adds	r6, #12
				if (!src || !*src) {
   37024:	2c00      	cmp	r4, #0
   37026:	d095      	beq.n	36f54 <z_impl_net_addr_pton+0x50>
   37028:	7823      	ldrb	r3, [r4, #0]
   3702a:	2b00      	cmp	r3, #0
   3702c:	d092      	beq.n	36f54 <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   3702e:	220a      	movs	r2, #10
   37030:	2100      	movs	r1, #0
   37032:	4620      	mov	r0, r4
   37034:	f7fd ff96 	bl	34f64 <strtol>
				src = strchr(src, '.');
   37038:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   3703a:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   3703e:	4620      	mov	r0, r4
   37040:	f001 fecf 	bl	38de2 <strchr>
				if (src) {
   37044:	4604      	mov	r4, r0
   37046:	b1b8      	cbz	r0, 37078 <z_impl_net_addr_pton+0x174>
					src++;
   37048:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   3704a:	3501      	adds	r5, #1
   3704c:	2d04      	cmp	r5, #4
   3704e:	d1e9      	bne.n	37024 <z_impl_net_addr_pton+0x120>
   37050:	e776      	b.n	36f40 <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
   37052:	2f06      	cmp	r7, #6
   37054:	d100      	bne.n	37058 <z_impl_net_addr_pton+0x154>
				tmp--;
   37056:	3801      	subs	r0, #1
			i = expected_groups - 1;
   37058:	1e7d      	subs	r5, r7, #1
   3705a:	3001      	adds	r0, #1
				if (*tmp == ':') {
   3705c:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   37060:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   37062:	bf08      	it	eq
   37064:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   37068:	2d00      	cmp	r5, #0
   3706a:	f6ff af73 	blt.w	36f54 <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
   3706e:	42a0      	cmp	r0, r4
   37070:	d1f4      	bne.n	3705c <z_impl_net_addr_pton+0x158>
   37072:	e7a8      	b.n	36fc6 <z_impl_net_addr_pton+0xc2>
   37074:	4620      	mov	r0, r4
   37076:	e7ef      	b.n	37058 <z_impl_net_addr_pton+0x154>
					if (i < 3) {
   37078:	2d03      	cmp	r5, #3
   3707a:	f47f af6b 	bne.w	36f54 <z_impl_net_addr_pton+0x50>
   3707e:	e7e4      	b.n	3704a <z_impl_net_addr_pton+0x146>

00037080 <http_parser_url_init>:
   37080:	2220      	movs	r2, #32
   37082:	2100      	movs	r1, #0
   37084:	f001 bd7b 	b.w	38b7e <memset>

00037088 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37088:	6843      	ldr	r3, [r0, #4]
}
   3708a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3708c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3708e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   37090:	600b      	str	r3, [r1, #0]
}
   37092:	4770      	bx	lr

00037094 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37094:	6843      	ldr	r3, [r0, #4]
   37096:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   37098:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   3709a:	4042      	eors	r2, r0
   3709c:	400a      	ands	r2, r1
   3709e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   370a0:	605a      	str	r2, [r3, #4]
}
   370a2:	2000      	movs	r0, #0
   370a4:	4770      	bx	lr

000370a6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   370a6:	6843      	ldr	r3, [r0, #4]
}
   370a8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   370aa:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   370ac:	6099      	str	r1, [r3, #8]
}
   370ae:	4770      	bx	lr

000370b0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   370b0:	6843      	ldr	r3, [r0, #4]
}
   370b2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   370b4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   370b6:	60d9      	str	r1, [r3, #12]
}
   370b8:	4770      	bx	lr

000370ba <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   370ba:	6843      	ldr	r3, [r0, #4]
}
   370bc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   370be:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   370c0:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   370c2:	4059      	eors	r1, r3
    p_reg->OUT = value;
   370c4:	6051      	str	r1, [r2, #4]
}
   370c6:	4770      	bx	lr

000370c8 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   370c8:	68c3      	ldr	r3, [r0, #12]
{
   370ca:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   370cc:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   370ce:	b158      	cbz	r0, 370e8 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   370d0:	2400      	movs	r4, #0
   370d2:	4281      	cmp	r1, r0
   370d4:	d113      	bne.n	370fe <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   370d6:	6808      	ldr	r0, [r1, #0]
   370d8:	b95c      	cbnz	r4, 370f2 <gpio_nrfx_manage_callback+0x2a>
   370da:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   370dc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   370de:	42a1      	cmp	r1, r4
   370e0:	d100      	bne.n	370e4 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   370e2:	6098      	str	r0, [r3, #8]
	parent->next = child;
   370e4:	2000      	movs	r0, #0
   370e6:	6008      	str	r0, [r1, #0]
	if (set) {
   370e8:	b972      	cbnz	r2, 37108 <gpio_nrfx_manage_callback+0x40>
	return 0;
   370ea:	2000      	movs	r0, #0
}
   370ec:	bd30      	pop	{r4, r5, pc}
   370ee:	4628      	mov	r0, r5
   370f0:	e7ef      	b.n	370d2 <gpio_nrfx_manage_callback+0xa>
   370f2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   370f4:	6898      	ldr	r0, [r3, #8]
   370f6:	4281      	cmp	r1, r0
	list->tail = node;
   370f8:	bf08      	it	eq
   370fa:	609c      	streq	r4, [r3, #8]
}
   370fc:	e7f2      	b.n	370e4 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   370fe:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   37100:	4604      	mov	r4, r0
   37102:	2d00      	cmp	r5, #0
   37104:	d1f3      	bne.n	370ee <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   37106:	b13a      	cbz	r2, 37118 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   37108:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   3710a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   3710c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   3710e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   37110:	2800      	cmp	r0, #0
   37112:	d1ea      	bne.n	370ea <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   37114:	6099      	str	r1, [r3, #8]
}
   37116:	e7e9      	b.n	370ec <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   37118:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   3711c:	e7e6      	b.n	370ec <gpio_nrfx_manage_callback+0x24>

0003711e <flash_nrf_write_protection>:
}
   3711e:	2000      	movs	r0, #0
   37120:	4770      	bx	lr

00037122 <is_regular_addr_valid>:
{
   37122:	b538      	push	{r3, r4, r5, lr}
   37124:	4604      	mov	r4, r0
   37126:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   37128:	f000 fff3 	bl	38112 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   3712c:	4284      	cmp	r4, r0
   3712e:	d209      	bcs.n	37144 <is_regular_addr_valid+0x22>
   37130:	2c00      	cmp	r4, #0
   37132:	db07      	blt.n	37144 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   37134:	42a8      	cmp	r0, r5
   37136:	d305      	bcc.n	37144 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   37138:	1961      	adds	r1, r4, r5
	    len > flash_size ||
   3713a:	4281      	cmp	r1, r0
   3713c:	bf8c      	ite	hi
   3713e:	2000      	movhi	r0, #0
   37140:	2001      	movls	r0, #1
}
   37142:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   37144:	2000      	movs	r0, #0
   37146:	e7fc      	b.n	37142 <is_regular_addr_valid+0x20>

00037148 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   37148:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3714c:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   3714e:	6883      	ldr	r3, [r0, #8]
{
   37150:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   37152:	695b      	ldr	r3, [r3, #20]
   37154:	4669      	mov	r1, sp
{
   37156:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   37158:	aa01      	add	r2, sp, #4
   3715a:	4798      	blx	r3

	while (layout_size--) {
   3715c:	e9dd 1000 	ldrd	r1, r0, [sp]
   37160:	2300      	movs	r3, #0
	off_t end = 0;
   37162:	461d      	mov	r5, r3
	off_t group_offs = 0;
   37164:	469e      	mov	lr, r3
	size_t page_count = 0;
   37166:	469c      	mov	ip, r3
   37168:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	while (layout_size--) {
   3716c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   37170:	d102      	bne.n	37178 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   37172:	f06f 0015 	mvn.w	r0, #21
   37176:	e018      	b.n	371aa <flash_get_page_info+0x62>
		if (use_addr) {
   37178:	680a      	ldr	r2, [r1, #0]
   3717a:	b1cf      	cbz	r7, 371b0 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   3717c:	6848      	ldr	r0, [r1, #4]
   3717e:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   37182:	42a5      	cmp	r5, r4
   37184:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   37188:	dd17      	ble.n	371ba <flash_get_page_info+0x72>
   3718a:	b103      	cbz	r3, 3718e <flash_get_page_info+0x46>
   3718c:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   3718e:	9b00      	ldr	r3, [sp, #0]
   37190:	685b      	ldr	r3, [r3, #4]
   37192:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   37194:	b177      	cbz	r7, 371b4 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   37196:	eba4 040e 	sub.w	r4, r4, lr
   3719a:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   3719e:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   371a0:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   371a4:	4464      	add	r4, ip
			info->start_offset = group_offs +
   371a6:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   371a8:	60b4      	str	r4, [r6, #8]
}
   371aa:	b002      	add	sp, #8
   371ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   371b0:	4415      	add	r5, r2
   371b2:	e7e6      	b.n	37182 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   371b4:	eba4 040c 	sub.w	r4, r4, ip
   371b8:	e7f1      	b.n	3719e <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   371ba:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   371bc:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   371be:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   371c2:	3108      	adds	r1, #8
   371c4:	2301      	movs	r3, #1
   371c6:	e7d1      	b.n	3716c <flash_get_page_info+0x24>

000371c8 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   371c8:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   371ca:	2201      	movs	r2, #1
   371cc:	f7ff bfbc 	b.w	37148 <flash_get_page_info>

000371d0 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   371d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   371d4:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   371d6:	6883      	ldr	r3, [r0, #8]
{
   371d8:	b086      	sub	sp, #24
   371da:	4688      	mov	r8, r1
   371dc:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   371de:	695b      	ldr	r3, [r3, #20]
   371e0:	aa02      	add	r2, sp, #8
   371e2:	a901      	add	r1, sp, #4
   371e4:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   371e6:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   371e8:	4625      	mov	r5, r4
   371ea:	9b02      	ldr	r3, [sp, #8]
   371ec:	42ab      	cmp	r3, r5
   371ee:	d802      	bhi.n	371f6 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   371f0:	b006      	add	sp, #24
   371f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   371f6:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   371f8:	9f01      	ldr	r7, [sp, #4]
   371fa:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   371fe:	687b      	ldr	r3, [r7, #4]
   37200:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   37202:	683a      	ldr	r2, [r7, #0]
   37204:	eb0a 0306 	add.w	r3, sl, r6
   37208:	42b2      	cmp	r2, r6
   3720a:	d802      	bhi.n	37212 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   3720c:	469a      	mov	sl, r3
   3720e:	3501      	adds	r5, #1
   37210:	e7eb      	b.n	371ea <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   37212:	4649      	mov	r1, r9
   37214:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   37216:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   37218:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   3721a:	47c0      	blx	r8
   3721c:	2800      	cmp	r0, #0
   3721e:	d0e7      	beq.n	371f0 <flash_page_foreach+0x20>
			off += page_info.size;
   37220:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   37222:	3601      	adds	r6, #1
			off += page_info.size;
   37224:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   37226:	e7ec      	b.n	37202 <flash_page_foreach+0x32>

00037228 <uarte_nrfx_config_get>:
{
   37228:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   3722a:	68c2      	ldr	r2, [r0, #12]
   3722c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   37230:	e883 0003 	stmia.w	r3, {r0, r1}
}
   37234:	2000      	movs	r0, #0
   37236:	4770      	bx	lr

00037238 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   37238:	6843      	ldr	r3, [r0, #4]
   3723a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3723c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   37240:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   37244:	4770      	bx	lr

00037246 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   37246:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   37248:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3724a:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3724e:	b938      	cbnz	r0, 37260 <is_tx_ready+0x1a>
   37250:	7992      	ldrb	r2, [r2, #6]
   37252:	b932      	cbnz	r2, 37262 <is_tx_ready+0x1c>
   37254:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   37258:	3800      	subs	r0, #0
   3725a:	bf18      	it	ne
   3725c:	2001      	movne	r0, #1
   3725e:	4770      	bx	lr
   37260:	2001      	movs	r0, #1
}
   37262:	4770      	bx	lr

00037264 <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   37264:	4770      	bx	lr

00037266 <uarte_nrfx_rx_enable>:
{
   37266:	b530      	push	{r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   37268:	68c5      	ldr	r5, [r0, #12]
	return config->uarte_regs;
   3726a:	6840      	ldr	r0, [r0, #4]
   3726c:	6804      	ldr	r4, [r0, #0]
    return p_reg->PSEL.RXD;
   3726e:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   37272:	3001      	adds	r0, #1
   37274:	d022      	beq.n	372bc <uarte_nrfx_rx_enable+0x56>
		MAX(timeout / RX_TIMEOUT_DIV,
   37276:	2b09      	cmp	r3, #9
   37278:	bfc8      	it	gt
   3727a:	2005      	movgt	r0, #5
	data->async->rx_timeout = timeout;
   3727c:	68ed      	ldr	r5, [r5, #12]
   3727e:	66eb      	str	r3, [r5, #108]	; 0x6c
		MAX(timeout / RX_TIMEOUT_DIV,
   37280:	bfc8      	it	gt
   37282:	fb93 f3f0 	sdivgt	r3, r3, r0
	data->async->rx_offset = 0;
   37286:	f04f 0000 	mov.w	r0, #0
		MAX(timeout / RX_TIMEOUT_DIV,
   3728a:	bfd8      	it	le
   3728c:	2301      	movle	r3, #1
	data->async->rx_buf_len = len;
   3728e:	e9c5 1214 	strd	r1, r2, [r5, #80]	; 0x50
	data->async->rx_next_buf = NULL;
   37292:	e9c5 0016 	strd	r0, r0, [r5, #88]	; 0x58
	data->async->rx_timeout_slab =
   37296:	672b      	str	r3, [r5, #112]	; 0x70
	data->async->rx_next_buf_len = 0;
   37298:	6628      	str	r0, [r5, #96]	; 0x60
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3729a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3729e:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   372a2:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   372a6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   372aa:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
   372ae:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	data->async->rx_enabled = true;
   372b2:	2301      	movs	r3, #1
   372b4:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   372b8:	6023      	str	r3, [r4, #0]
}
   372ba:	bd30      	pop	{r4, r5, pc}
		return -ENOTSUP;
   372bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   372c0:	e7fb      	b.n	372ba <uarte_nrfx_rx_enable+0x54>

000372c2 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   372c2:	6843      	ldr	r3, [r0, #4]
{
   372c4:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   372c6:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   372c8:	68c4      	ldr	r4, [r0, #12]
	__asm__ volatile(
   372ca:	f04f 0020 	mov.w	r0, #32
   372ce:	f3ef 8511 	mrs	r5, BASEPRI
   372d2:	f380 8811 	msr	BASEPRI, r0
   372d6:	f3bf 8f6f 	isb	sy
	if ((data->async->rx_buf == NULL)) {
   372da:	68e4      	ldr	r4, [r4, #12]
   372dc:	6d20      	ldr	r0, [r4, #80]	; 0x50
   372de:	b190      	cbz	r0, 37306 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   372e0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   372e2:	b998      	cbnz	r0, 3730c <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   372e4:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   372e8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   372ec:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   372f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   372f4:	f042 0220 	orr.w	r2, r2, #32
   372f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   372fc:	f385 8811 	msr	BASEPRI, r5
   37300:	f3bf 8f6f 	isb	sy
}
   37304:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   37306:	f06f 000c 	mvn.w	r0, #12
   3730a:	e7f7      	b.n	372fc <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   3730c:	f06f 000f 	mvn.w	r0, #15
   37310:	e7f4      	b.n	372fc <uarte_nrfx_rx_buf_rsp+0x3a>

00037312 <uarte_nrfx_callback_set>:
	data->async->user_callback = callback;
   37312:	68c3      	ldr	r3, [r0, #12]
}
   37314:	2000      	movs	r0, #0
	data->async->user_callback = callback;
   37316:	68db      	ldr	r3, [r3, #12]
	data->async->user_data = user_data;
   37318:	e9c3 1200 	strd	r1, r2, [r3]
}
   3731c:	4770      	bx	lr

0003731e <user_callback>:
	if (data->async->user_callback) {
   3731e:	68c3      	ldr	r3, [r0, #12]
   37320:	68da      	ldr	r2, [r3, #12]
   37322:	6813      	ldr	r3, [r2, #0]
   37324:	b10b      	cbz	r3, 3732a <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   37326:	6852      	ldr	r2, [r2, #4]
   37328:	4718      	bx	r3
}
   3732a:	4770      	bx	lr

0003732c <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3732c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   3732e:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   37330:	68d0      	ldr	r0, [r2, #12]
{
   37332:	b510      	push	{r4, lr}
	return config->uarte_regs;
   37334:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   37336:	b958      	cbnz	r0, 37350 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37338:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3733c:	b15c      	cbz	r4, 37356 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   3733e:	7d52      	ldrb	r2, [r2, #21]
   37340:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   37342:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   37346:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3734a:	2201      	movs	r2, #1
   3734c:	601a      	str	r2, [r3, #0]
}
   3734e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   37350:	f06f 0085 	mvn.w	r0, #133	; 0x85
   37354:	e7fb      	b.n	3734e <uarte_nrfx_poll_in+0x22>
		return -1;
   37356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3735a:	e7f8      	b.n	3734e <uarte_nrfx_poll_in+0x22>

0003735c <uarte_nrfx_tx>:
{
   3735c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   37360:	461d      	mov	r5, r3
	return config->uarte_regs;
   37362:	6843      	ldr	r3, [r0, #4]
{
   37364:	4617      	mov	r7, r2
	return config->uarte_regs;
   37366:	681c      	ldr	r4, [r3, #0]
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   37368:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (!nrfx_is_in_ram(buf)) {
   3736c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
	struct uarte_nrfx_data *data = get_dev_data(dev);
   37370:	68c6      	ldr	r6, [r0, #12]
	if (!nrfx_is_in_ram(buf)) {
   37372:	d158      	bne.n	37426 <uarte_nrfx_tx+0xca>
	__asm__ volatile(
   37374:	f04f 0320 	mov.w	r3, #32
   37378:	f3ef 8911 	mrs	r9, BASEPRI
   3737c:	f383 8811 	msr	BASEPRI, r3
   37380:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   37384:	68f3      	ldr	r3, [r6, #12]
   37386:	f8d3 800c 	ldr.w	r8, [r3, #12]
   3738a:	f1b8 0f00 	cmp.w	r8, #0
   3738e:	d008      	beq.n	373a2 <uarte_nrfx_tx+0x46>
	__asm__ volatile(
   37390:	f389 8811 	msr	BASEPRI, r9
   37394:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   37398:	f06f 000f 	mvn.w	r0, #15
}
   3739c:	b003      	add	sp, #12
   3739e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data->async->tx_size = len;
   373a2:	60da      	str	r2, [r3, #12]
    p_reg->INTENSET = mask;
   373a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   373a8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	if (!is_tx_ready(dev)) {
   373ac:	f7ff ff4b 	bl	37246 <is_tx_ready>
   373b0:	68f3      	ldr	r3, [r6, #12]
   373b2:	bb20      	cbnz	r0, 373fe <uarte_nrfx_tx+0xa2>
		data->async->pend_tx_buf = (uint8_t *)buf;
   373b4:	6119      	str	r1, [r3, #16]
   373b6:	f389 8811 	msr	BASEPRI, r9
   373ba:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   373be:	7af3      	ldrb	r3, [r6, #11]
   373c0:	2b01      	cmp	r3, #1
   373c2:	d11a      	bne.n	373fa <uarte_nrfx_tx+0x9e>
	    && timeout != SYS_FOREVER_MS) {
   373c4:	1c6b      	adds	r3, r5, #1
   373c6:	d018      	beq.n	373fa <uarte_nrfx_tx+0x9e>
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   373c8:	68f4      	ldr	r4, [r6, #12]
   373ca:	f240 30e7 	movw	r0, #999	; 0x3e7
   373ce:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   373d2:	2100      	movs	r1, #0
   373d4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   373d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   373dc:	2300      	movs	r3, #0
   373de:	fbc6 0105 	smlal	r0, r1, r6, r5
   373e2:	f7e5 f9e9 	bl	1c7b8 <__aeabi_uldivmod>
   373e6:	3418      	adds	r4, #24
   373e8:	4602      	mov	r2, r0
   373ea:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   373ec:	2000      	movs	r0, #0
   373ee:	2100      	movs	r1, #0
   373f0:	e9cd 0100 	strd	r0, r1, [sp]
   373f4:	4620      	mov	r0, r4
   373f6:	f7fd f88d 	bl	34514 <z_impl_k_timer_start>
	return 0;
   373fa:	2000      	movs	r0, #0
   373fc:	e7ce      	b.n	3739c <uarte_nrfx_tx+0x40>
		data->async->tx_amount = -1;
   373fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		data->async->tx_buf = buf;
   37402:	6099      	str	r1, [r3, #8]
		data->async->tx_amount = -1;
   37404:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   37408:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3740c:	f8c4 7548 	str.w	r7, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   37410:	f8c4 8120 	str.w	r8, [r4, #288]	; 0x120
   37414:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   37418:	f8c4 8158 	str.w	r8, [r4, #344]	; 0x158
   3741c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   37420:	2301      	movs	r3, #1
   37422:	60a3      	str	r3, [r4, #8]
}
   37424:	e7c7      	b.n	373b6 <uarte_nrfx_tx+0x5a>
		return -ENOTSUP;
   37426:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3742a:	e7b7      	b.n	3739c <uarte_nrfx_tx+0x40>

0003742c <rx_timeout>:
{
   3742c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37430:	b086      	sub	sp, #24
	return z_impl_k_timer_user_data_get(timer);
   37432:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   37434:	68f3      	ldr	r3, [r6, #12]
   37436:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
   3743a:	f002 08ff 	and.w	r8, r2, #255	; 0xff
   3743e:	bb7a      	cbnz	r2, 374a0 <rx_timeout+0x74>
    p_reg->INTENCLR = mask;
   37440:	2110      	movs	r1, #16
	const struct device *dev = data->dev;
   37442:	6837      	ldr	r7, [r6, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   37444:	6878      	ldr	r0, [r7, #4]
	return config->uarte_regs;
   37446:	6802      	ldr	r2, [r0, #0]
   37448:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	if (hw_rx_counting_enabled(data)) {
   3744c:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   37450:	b1e2      	cbz	r2, 3748c <rx_timeout+0x60>
		read = nrfx_timer_capture(&cfg->timer, 0);
   37452:	4641      	mov	r1, r8
   37454:	3008      	adds	r0, #8
   37456:	f000 fe69 	bl	3812c <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   3745a:	68f4      	ldr	r4, [r6, #12]
   3745c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3745e:	4283      	cmp	r3, r0
		data->async->rx_timeout_left = data->async->rx_timeout;
   37460:	bf1c      	itt	ne
   37462:	6ee3      	ldrne	r3, [r4, #108]	; 0x6c
		data->async->rx_total_byte_cnt = read;
   37464:	6660      	strne	r0, [r4, #100]	; 0x64
		    - data->async->rx_total_user_byte_cnt;
   37466:	e9d4 5a19 	ldrd	r5, sl, [r4, #100]	; 0x64
   3746a:	eba5 050a 	sub.w	r5, r5, sl
		data->async->rx_timeout_left = data->async->rx_timeout;
   3746e:	bf18      	it	ne
   37470:	6763      	strne	r3, [r4, #116]	; 0x74
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   37472:	e9d4 3915 	ldrd	r3, r9, [r4, #84]	; 0x54
   37476:	eb05 0209 	add.w	r2, r5, r9
   3747a:	429a      	cmp	r2, r3
   3747c:	d913      	bls.n	374a6 <rx_timeout+0x7a>
		len = data->async->rx_buf_len - data->async->rx_offset;
   3747e:	eba3 0509 	sub.w	r5, r3, r9
	if (len > 0) {
   37482:	2d00      	cmp	r5, #0
   37484:	dd07      	ble.n	37496 <rx_timeout+0x6a>
		clipped = true;
   37486:	f04f 0801 	mov.w	r8, #1
   3748a:	e012      	b.n	374b2 <rx_timeout+0x86>
		read = data->async->rx_cnt.cnt;
   3748c:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   37490:	e7e3      	b.n	3745a <rx_timeout+0x2e>
			data->async->rx_timeout_left -=
   37492:	1a9b      	subs	r3, r3, r2
   37494:	6763      	str	r3, [r4, #116]	; 0x74
    p_reg->INTENSET = mask;
   37496:	2210      	movs	r2, #16
	return config->uarte_regs;
   37498:	687b      	ldr	r3, [r7, #4]
   3749a:	681b      	ldr	r3, [r3, #0]
   3749c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   374a0:	b006      	add	sp, #24
   374a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len > 0) {
   374a6:	2d00      	cmp	r5, #0
   374a8:	ddf5      	ble.n	37496 <rx_timeout+0x6a>
				< data->async->rx_timeout_slab)) {
   374aa:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
		if (clipped ||
   374ae:	4293      	cmp	r3, r2
   374b0:	daef      	bge.n	37492 <rx_timeout+0x66>
			struct uart_event evt = {
   374b2:	2100      	movs	r1, #0
   374b4:	2214      	movs	r2, #20
   374b6:	a801      	add	r0, sp, #4
   374b8:	f001 fb61 	bl	38b7e <memset>
   374bc:	2302      	movs	r3, #2
   374be:	f88d 3004 	strb.w	r3, [sp, #4]
   374c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   374c4:	9504      	str	r5, [sp, #16]
   374c6:	e9cd 3902 	strd	r3, r9, [sp, #8]
			data->async->rx_offset += len;
   374ca:	eb09 0305 	add.w	r3, r9, r5
			data->async->rx_total_user_byte_cnt += len;
   374ce:	4455      	add	r5, sl
			user_callback(dev, &evt);
   374d0:	4638      	mov	r0, r7
			data->async->rx_offset += len;
   374d2:	65a3      	str	r3, [r4, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   374d4:	66a5      	str	r5, [r4, #104]	; 0x68
			user_callback(dev, &evt);
   374d6:	a901      	add	r1, sp, #4
   374d8:	f7ff ff21 	bl	3731e <user_callback>
		if (clipped) {
   374dc:	f1b8 0f00 	cmp.w	r8, #0
   374e0:	d0d9      	beq.n	37496 <rx_timeout+0x6a>
			k_timer_stop(&data->async->rx_timeout_timer);
   374e2:	68f0      	ldr	r0, [r6, #12]
   374e4:	3078      	adds	r0, #120	; 0x78
	z_impl_k_timer_stop(timer);
   374e6:	f001 f961 	bl	387ac <z_impl_k_timer_stop>
}
   374ea:	e7d4      	b.n	37496 <rx_timeout+0x6a>

000374ec <uarte_nrfx_tx_abort>:
	return config->uarte_regs;
   374ec:	6843      	ldr	r3, [r0, #4]
{
   374ee:	b510      	push	{r4, lr}
	return config->uarte_regs;
   374f0:	681c      	ldr	r4, [r3, #0]
	if (data->async->tx_buf == NULL) {
   374f2:	68c3      	ldr	r3, [r0, #12]
   374f4:	68d8      	ldr	r0, [r3, #12]
   374f6:	6883      	ldr	r3, [r0, #8]
   374f8:	b133      	cbz	r3, 37508 <uarte_nrfx_tx_abort+0x1c>
	z_impl_k_timer_stop(timer);
   374fa:	3018      	adds	r0, #24
   374fc:	f001 f956 	bl	387ac <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   37500:	2301      	movs	r3, #1
	return 0;
   37502:	2000      	movs	r0, #0
   37504:	60e3      	str	r3, [r4, #12]
}
   37506:	bd10      	pop	{r4, pc}
		return -EFAULT;
   37508:	f06f 000d 	mvn.w	r0, #13
   3750c:	e7fb      	b.n	37506 <uarte_nrfx_tx_abort+0x1a>

0003750e <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   3750e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   37510:	6818      	ldr	r0, [r3, #0]
   37512:	f7ff bfeb 	b.w	374ec <uarte_nrfx_tx_abort>

00037516 <uarte_nrfx_rx_disable>:
{
   37516:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   37518:	68c5      	ldr	r5, [r0, #12]
	return config->uarte_regs;
   3751a:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   3751c:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   3751e:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   37520:	6d03      	ldr	r3, [r0, #80]	; 0x50
   37522:	b1b3      	cbz	r3, 37552 <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   37524:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   37526:	b153      	cbz	r3, 3753e <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   37528:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   3752c:	f023 0320 	bic.w	r3, r3, #32
   37530:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   37534:	2300      	movs	r3, #0
   37536:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   3753a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   3753e:	3078      	adds	r0, #120	; 0x78
   37540:	f001 f934 	bl	387ac <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   37544:	2000      	movs	r0, #0
   37546:	68eb      	ldr	r3, [r5, #12]
   37548:	f883 00b8 	strb.w	r0, [r3, #184]	; 0xb8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3754c:	2301      	movs	r3, #1
   3754e:	6063      	str	r3, [r4, #4]
}
   37550:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   37552:	f06f 000d 	mvn.w	r0, #13
   37556:	e7fb      	b.n	37550 <uarte_nrfx_rx_disable+0x3a>

00037558 <uarte_nrfx_pm_control>:
{
   37558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   3755c:	68c7      	ldr	r7, [r0, #12]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   3755e:	2901      	cmp	r1, #1
{
   37560:	4698      	mov	r8, r3
   37562:	4605      	mov	r5, r0
   37564:	4616      	mov	r6, r2
   37566:	693b      	ldr	r3, [r7, #16]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   37568:	d159      	bne.n	3761e <uarte_nrfx_pm_control+0xc6>
		uint32_t new_state = *((const uint32_t *)context);
   3756a:	6812      	ldr	r2, [r2, #0]
		if (new_state != data->pm_state) {
   3756c:	429a      	cmp	r2, r3
   3756e:	d01e      	beq.n	375ae <uarte_nrfx_pm_control+0x56>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   37570:	f8d0 c004 	ldr.w	ip, [r0, #4]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
   37574:	2a01      	cmp	r2, #1
	return config->uarte_regs;
   37576:	f8dc 4000 	ldr.w	r4, [ip]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
   3757a:	d123      	bne.n	375c4 <uarte_nrfx_pm_control+0x6c>
		uarte_nrfx_pins_enable(dev, true);
   3757c:	f7ef fe18 	bl	271b0 <uarte_nrfx_pins_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   37580:	2308      	movs	r3, #8
   37582:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   37586:	68eb      	ldr	r3, [r5, #12]
		return data->async->hw_rx_counting;
   37588:	68db      	ldr	r3, [r3, #12]
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   3758a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   3758e:	b11b      	cbz	r3, 37598 <uarte_nrfx_pm_control+0x40>
			nrfx_timer_enable(&get_dev_config(dev)->timer);
   37590:	6868      	ldr	r0, [r5, #4]
   37592:	3008      	adds	r0, #8
   37594:	f7fb fc7e 	bl	32e94 <nrfx_timer_enable>
		if (get_dev_data(dev)->async) {
   37598:	68eb      	ldr	r3, [r5, #12]
   3759a:	68db      	ldr	r3, [r3, #12]
   3759c:	b93b      	cbnz	r3, 375ae <uarte_nrfx_pm_control+0x56>
    return p_reg->PSEL.RXD;
   3759e:	f8d4 3514 	ldr.w	r3, [r4, #1300]	; 0x514
		if (nrf_uarte_rx_pin_get(uarte) !=
   375a2:	3301      	adds	r3, #1
   375a4:	f04f 0301 	mov.w	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   375a8:	bf18      	it	ne
   375aa:	6023      	strne	r3, [r4, #0]
		data->pm_state = new_state;
   375ac:	613b      	str	r3, [r7, #16]
	if (cb) {
   375ae:	f1b8 0f00 	cmp.w	r8, #0
   375b2:	d004      	beq.n	375be <uarte_nrfx_pm_control+0x66>
		cb(dev, 0, context, arg);
   375b4:	4632      	mov	r2, r6
   375b6:	2100      	movs	r1, #0
   375b8:	4628      	mov	r0, r5
   375ba:	9b06      	ldr	r3, [sp, #24]
   375bc:	47c0      	blx	r8
}
   375be:	2000      	movs	r0, #0
   375c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
   375c4:	2b01      	cmp	r3, #1
   375c6:	d1f2      	bne.n	375ae <uarte_nrfx_pm_control+0x56>
		return data->async->hw_rx_counting;
   375c8:	68fb      	ldr	r3, [r7, #12]
		data->pm_state = new_state;
   375ca:	613a      	str	r2, [r7, #16]
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   375cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   375d0:	b13b      	cbz	r3, 375e2 <uarte_nrfx_pm_control+0x8a>
			nrfx_timer_disable(&get_dev_config(dev)->timer);
   375d2:	f10c 0008 	add.w	r0, ip, #8
   375d6:	f7fb fc6b 	bl	32eb0 <nrfx_timer_disable>
			data->async->rx_total_byte_cnt = 0;
   375da:	2200      	movs	r2, #0
   375dc:	68fb      	ldr	r3, [r7, #12]
			data->async->rx_total_user_byte_cnt = 0;
   375de:	e9c3 2219 	strd	r2, r2, [r3, #100]	; 0x64
		if (get_dev_data(dev)->async) {
   375e2:	68eb      	ldr	r3, [r5, #12]
   375e4:	68db      	ldr	r3, [r3, #12]
   375e6:	b133      	cbz	r3, 375f6 <uarte_nrfx_pm_control+0x9e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   375e8:	2100      	movs	r1, #0
		uarte_nrfx_pins_enable(dev, false);
   375ea:	4628      	mov	r0, r5
   375ec:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   375f0:	f7ef fdde 	bl	271b0 <uarte_nrfx_pins_enable>
   375f4:	e7db      	b.n	375ae <uarte_nrfx_pm_control+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   375f6:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   375fa:	2b00      	cmp	r3, #0
   375fc:	d0f4      	beq.n	375e8 <uarte_nrfx_pm_control+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   375fe:	2301      	movs	r3, #1
   37600:	6063      	str	r3, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37602:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
			while (!nrf_uarte_event_check(uarte,
   37606:	2b00      	cmp	r3, #0
   37608:	d0fb      	beq.n	37602 <uarte_nrfx_pm_control+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3760a:	2300      	movs	r3, #0
   3760c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   37610:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   37614:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   37618:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
}
   3761c:	e7e4      	b.n	375e8 <uarte_nrfx_pm_control+0x90>
		*((uint32_t *)context) = data->pm_state;
   3761e:	6013      	str	r3, [r2, #0]
   37620:	e7c5      	b.n	375ae <uarte_nrfx_pm_control+0x56>

00037622 <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   37622:	2000      	movs	r0, #0
   37624:	4770      	bx	lr

00037626 <entropy_cc3xx_rng_get_entropy>:
{
   37626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3762a:	460f      	mov	r7, r1
   3762c:	4614      	mov	r4, r2
	size_t offset = 0;
   3762e:	2600      	movs	r6, #0
	int res = -EINVAL;
   37630:	f06f 0515 	mvn.w	r5, #21
{
   37634:	b0a6      	sub	sp, #152	; 0x98
	while (length > 0) {
   37636:	b91c      	cbnz	r4, 37640 <entropy_cc3xx_rng_get_entropy+0x1a>
}
   37638:	4628      	mov	r0, r5
   3763a:	b026      	add	sp, #152	; 0x98
   3763c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   37640:	2190      	movs	r1, #144	; 0x90
   37642:	aa01      	add	r2, sp, #4
   37644:	a802      	add	r0, sp, #8
   37646:	f7ff fb47 	bl	36cd8 <spm_request_random_number>
		if (res < 0) {
   3764a:	1e05      	subs	r5, r0, #0
   3764c:	dbf4      	blt.n	37638 <entropy_cc3xx_rng_get_entropy+0x12>
		if (olen != sizeof(spm_buf)) {
   3764e:	9b01      	ldr	r3, [sp, #4]
   37650:	2b90      	cmp	r3, #144	; 0x90
   37652:	d10e      	bne.n	37672 <entropy_cc3xx_rng_get_entropy+0x4c>
		to_copy = MIN(length, sizeof(spm_buf));
   37654:	2c90      	cmp	r4, #144	; 0x90
   37656:	46a0      	mov	r8, r4
   37658:	bf28      	it	cs
   3765a:	f04f 0890 	movcs.w	r8, #144	; 0x90
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3765e:	19b8      	adds	r0, r7, r6
   37660:	4642      	mov	r2, r8
   37662:	a902      	add	r1, sp, #8
		length -= to_copy;
   37664:	eba4 0408 	sub.w	r4, r4, r8
   37668:	f001 fa69 	bl	38b3e <memcpy>
   3766c:	b2a4      	uxth	r4, r4
		offset += to_copy;
   3766e:	4446      	add	r6, r8
   37670:	e7e1      	b.n	37636 <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   37672:	f06f 0515 	mvn.w	r5, #21
   37676:	e7df      	b.n	37638 <entropy_cc3xx_rng_get_entropy+0x12>

00037678 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   37678:	4668      	mov	r0, sp
   3767a:	f020 0107 	bic.w	r1, r0, #7
   3767e:	468d      	mov	sp, r1
   37680:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   37682:	f7f3 faf5 	bl	2ac70 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   37686:	f7ed fcd1 	bl	2502c <_arch_isr_direct_pm>
   3768a:	f7ee f85b 	bl	25744 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3768e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   37692:	4685      	mov	sp, r0
   37694:	4770      	bx	lr

00037696 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   37696:	4668      	mov	r0, sp
   37698:	f020 0107 	bic.w	r1, r0, #7
   3769c:	468d      	mov	sp, r1
   3769e:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   376a0:	f7f3 fe8c 	bl	2b3bc <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   376a4:	f7ed fcc2 	bl	2502c <_arch_isr_direct_pm>
   376a8:	f7ee f84c 	bl	25744 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   376ac:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   376b0:	4685      	mov	sp, r0
   376b2:	4770      	bx	lr

000376b4 <trace_task_create>:
{
   376b4:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   376b6:	201d      	movs	r0, #29
   376b8:	2200      	movs	r2, #0
   376ba:	2106      	movs	r1, #6
   376bc:	f7ed fca0 	bl	25000 <z_arm_irq_priority_set>
}
   376c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   376c4:	201d      	movs	r0, #29
   376c6:	f7ed bc69 	b.w	24f9c <arch_irq_enable>

000376ca <read_task_create>:
{
   376ca:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   376cc:	201c      	movs	r0, #28
   376ce:	2200      	movs	r2, #0
   376d0:	2106      	movs	r1, #6
   376d2:	f7ed fc95 	bl	25000 <z_arm_irq_priority_set>
}
   376d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   376da:	201c      	movs	r0, #28
   376dc:	f7ed bc5e 	b.w	24f9c <arch_irq_enable>

000376e0 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   376e0:	2000      	movs	r0, #0
   376e2:	4770      	bx	lr

000376e4 <z_to_nrf_flags>:
{
   376e4:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   376e6:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   376ea:	bf18      	it	ne
   376ec:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   376ee:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   376f0:	bf48      	it	mi
   376f2:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   376f6:	06da      	lsls	r2, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   376f8:	bf48      	it	mi
   376fa:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   376fe:	069b      	lsls	r3, r3, #26
		nrf_flags |= NRF_MSG_WAITALL;
   37700:	bf48      	it	mi
   37702:	f040 0010 	orrmi.w	r0, r0, #16
}
   37706:	4770      	bx	lr

00037708 <z_to_nrf_family>:
	switch (z_family) {
   37708:	2806      	cmp	r0, #6
   3770a:	d80a      	bhi.n	37722 <z_to_nrf_family+0x1a>
   3770c:	b198      	cbz	r0, 37736 <z_to_nrf_family+0x2e>
   3770e:	3801      	subs	r0, #1
   37710:	2805      	cmp	r0, #5
   37712:	d810      	bhi.n	37736 <z_to_nrf_family+0x2e>
   37714:	e8df f000 	tbb	[pc, r0]
   37718:	0f0d0312 	.word	0x0f0d0312
   3771c:	0b0f      	.short	0x0b0f
   3771e:	200a      	movs	r0, #10
   37720:	4770      	bx	lr
   37722:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   37724:	bf14      	ite	ne
   37726:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   3772a:	2066      	moveq	r0, #102	; 0x66
   3772c:	4770      	bx	lr
		return NRF_AF_LOCAL;
   3772e:	2001      	movs	r0, #1
   37730:	4770      	bx	lr
		return NRF_AF_PACKET;
   37732:	2005      	movs	r0, #5
   37734:	4770      	bx	lr
		return -EAFNOSUPPORT;
   37736:	f06f 0069 	mvn.w	r0, #105	; 0x69
   3773a:	4770      	bx	lr
		return NRF_AF_INET;
   3773c:	2002      	movs	r0, #2
}
   3773e:	4770      	bx	lr

00037740 <z_to_nrf_protocol>:
	switch (proto) {
   37740:	f240 1311 	movw	r3, #273	; 0x111
   37744:	4298      	cmp	r0, r3
   37746:	d023      	beq.n	37790 <z_to_nrf_protocol+0x50>
   37748:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   3774c:	da11      	bge.n	37772 <z_to_nrf_protocol+0x32>
   3774e:	2811      	cmp	r0, #17
   37750:	d021      	beq.n	37796 <z_to_nrf_protocol+0x56>
   37752:	dc06      	bgt.n	37762 <z_to_nrf_protocol+0x22>
   37754:	b300      	cbz	r0, 37798 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   37756:	2806      	cmp	r0, #6
   37758:	bf14      	ite	ne
   3775a:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3775e:	2001      	moveq	r0, #1
   37760:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   37762:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   37766:	bf14      	ite	ne
   37768:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3776c:	f44f 7082 	moveq.w	r0, #260	; 0x104
   37770:	4770      	bx	lr
	switch (proto) {
   37772:	f240 2302 	movw	r3, #514	; 0x202
   37776:	4298      	cmp	r0, r3
   37778:	d00e      	beq.n	37798 <z_to_nrf_protocol+0x58>
   3777a:	f240 2303 	movw	r3, #515	; 0x203
   3777e:	4298      	cmp	r0, r3
   37780:	d00a      	beq.n	37798 <z_to_nrf_protocol+0x58>
   37782:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   37786:	4298      	cmp	r0, r3
   37788:	bf18      	it	ne
   3778a:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3778e:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   37790:	f44f 7087 	mov.w	r0, #270	; 0x10e
   37794:	4770      	bx	lr
	switch (proto) {
   37796:	2002      	movs	r0, #2
}
   37798:	4770      	bx	lr

0003779a <nrf91_socket_is_supported>:
}
   3779a:	2001      	movs	r0, #1
   3779c:	4770      	bx	lr

0003779e <nrf91_bsdlib_socket_offload_init>:
}
   3779e:	2000      	movs	r0, #0
   377a0:	4770      	bx	lr

000377a2 <nrf91_socket_offload_getsockopt>:
{
   377a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   377a6:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   377a8:	2300      	movs	r3, #0
{
   377aa:	b086      	sub	sp, #24
   377ac:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   377b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   377b4:	f8d8 3000 	ldr.w	r3, [r8]
{
   377b8:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   377ba:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   377bc:	f240 2302 	movw	r3, #514	; 0x202
   377c0:	4299      	cmp	r1, r3
{
   377c2:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   377c4:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   377c8:	d005      	beq.n	377d6 <nrf91_socket_offload_getsockopt+0x34>
   377ca:	dc30      	bgt.n	3782e <nrf91_socket_offload_getsockopt+0x8c>
   377cc:	2901      	cmp	r1, #1
   377ce:	d002      	beq.n	377d6 <nrf91_socket_offload_getsockopt+0x34>
   377d0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   377d4:	d13c      	bne.n	37850 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   377d6:	4631      	mov	r1, r6
   377d8:	4620      	mov	r0, r4
   377da:	aa02      	add	r2, sp, #8
   377dc:	f7f0 f878 	bl	278d0 <z_to_nrf_optname>
   377e0:	2800      	cmp	r0, #0
   377e2:	db35      	blt.n	37850 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   377e4:	2c01      	cmp	r4, #1
   377e6:	d126      	bne.n	37836 <nrf91_socket_offload_getsockopt+0x94>
   377e8:	f1a6 0314 	sub.w	r3, r6, #20
   377ec:	2b01      	cmp	r3, #1
   377ee:	d822      	bhi.n	37836 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   377f0:	2308      	movs	r3, #8
   377f2:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   377f4:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   377f6:	aa03      	add	r2, sp, #12
   377f8:	4638      	mov	r0, r7
   377fa:	9200      	str	r2, [sp, #0]
   377fc:	4621      	mov	r1, r4
   377fe:	9a02      	ldr	r2, [sp, #8]
   37800:	f7f9 fc0c 	bl	3101c <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   37804:	4607      	mov	r7, r0
   37806:	b970      	cbnz	r0, 37826 <nrf91_socket_offload_getsockopt+0x84>
   37808:	b16d      	cbz	r5, 37826 <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   3780a:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3780c:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   3780e:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   37812:	d108      	bne.n	37826 <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   37814:	2e04      	cmp	r6, #4
   37816:	d110      	bne.n	3783a <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   37818:	6828      	ldr	r0, [r5, #0]
   3781a:	f7ef feaf 	bl	2757c <bsd_os_errno_set>
				*(int *)optval = errno;
   3781e:	f7ff fb06 	bl	36e2e <__errno>
   37822:	6803      	ldr	r3, [r0, #0]
   37824:	602b      	str	r3, [r5, #0]
}
   37826:	4638      	mov	r0, r7
   37828:	b006      	add	sp, #24
   3782a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3782e:	f240 2303 	movw	r3, #515	; 0x203
   37832:	4299      	cmp	r1, r3
   37834:	e7ce      	b.n	377d4 <nrf91_socket_offload_getsockopt+0x32>
   37836:	462b      	mov	r3, r5
   37838:	e7dd      	b.n	377f6 <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   3783a:	3e14      	subs	r6, #20
   3783c:	2e01      	cmp	r6, #1
   3783e:	d8f2      	bhi.n	37826 <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   37840:	9b04      	ldr	r3, [sp, #16]
   37842:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   37844:	9b05      	ldr	r3, [sp, #20]
   37846:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   37848:	2308      	movs	r3, #8
   3784a:	f8c8 3000 	str.w	r3, [r8]
   3784e:	e7ea      	b.n	37826 <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   37850:	f7ff faed 	bl	36e2e <__errno>
   37854:	236d      	movs	r3, #109	; 0x6d
	return retval;
   37856:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   3785a:	6003      	str	r3, [r0, #0]
	return retval;
   3785c:	e7e3      	b.n	37826 <nrf91_socket_offload_getsockopt+0x84>

0003785e <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3785e:	3801      	subs	r0, #1
   37860:	f7f9 bb88 	b.w	30f74 <nrf_listen>

00037864 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   37864:	3801      	subs	r0, #1
   37866:	f7f9 baf9 	b.w	30e5c <nrf_close>

0003786a <nrf91_socket_offload_freeaddrinfo>:
{
   3786a:	b538      	push	{r3, r4, r5, lr}
   3786c:	4604      	mov	r4, r0
	while (next != NULL) {
   3786e:	b904      	cbnz	r4, 37872 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   37870:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   37872:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   37874:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   37876:	f001 f925 	bl	38ac4 <k_free>
		k_free(this);
   3787a:	4620      	mov	r0, r4
   3787c:	f001 f922 	bl	38ac4 <k_free>
		next = next->ai_next;
   37880:	462c      	mov	r4, r5
   37882:	e7f4      	b.n	3786e <nrf91_socket_offload_freeaddrinfo+0x4>

00037884 <z_to_nrf_addrinfo_hints>:
{
   37884:	b538      	push	{r3, r4, r5, lr}
   37886:	460c      	mov	r4, r1
   37888:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   3788a:	221c      	movs	r2, #28
   3788c:	2100      	movs	r1, #0
   3788e:	1d20      	adds	r0, r4, #4
   37890:	f001 f975 	bl	38b7e <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   37894:	2300      	movs	r3, #0
   37896:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   37898:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   3789a:	2b03      	cmp	r3, #3
   3789c:	d003      	beq.n	378a6 <z_to_nrf_addrinfo_hints+0x22>
   3789e:	2b04      	cmp	r3, #4
   378a0:	bf08      	it	eq
   378a2:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   378a6:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   378a8:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   378aa:	f7ff ff2d 	bl	37708 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   378ae:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   378b2:	d00b      	beq.n	378cc <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   378b4:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   378b6:	6928      	ldr	r0, [r5, #16]
   378b8:	f7ff ff42 	bl	37740 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   378bc:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   378c0:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   378c2:	d003      	beq.n	378cc <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   378c4:	69e8      	ldr	r0, [r5, #28]
   378c6:	b108      	cbz	r0, 378cc <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   378c8:	61a0      	str	r0, [r4, #24]
	return 0;
   378ca:	2000      	movs	r0, #0
}
   378cc:	bd38      	pop	{r3, r4, r5, pc}

000378ce <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   378ce:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   378d0:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   378d2:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   378d4:	4603      	mov	r3, r0
{
   378d6:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   378d8:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   378dc:	f101 0420 	add.w	r4, r1, #32
   378e0:	f101 0210 	add.w	r2, r1, #16
   378e4:	f852 5b04 	ldr.w	r5, [r2], #4
   378e8:	42a2      	cmp	r2, r4
   378ea:	f843 5b04 	str.w	r5, [r3], #4
   378ee:	d1f9      	bne.n	378e4 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   378f0:	6a0b      	ldr	r3, [r1, #32]
   378f2:	7503      	strb	r3, [r0, #20]
}
   378f4:	bd30      	pop	{r4, r5, pc}

000378f6 <nrf91_socket_offload_recvfrom>:
{
   378f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   378f8:	1e45      	subs	r5, r0, #1
{
   378fa:	b08f      	sub	sp, #60	; 0x3c
   378fc:	4618      	mov	r0, r3
   378fe:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   37902:	e9cd 2102 	strd	r2, r1, [sp, #8]
   37906:	f7ff feed 	bl	376e4 <z_to_nrf_flags>
	if (from == NULL) {
   3790a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   3790e:	4603      	mov	r3, r0
   37910:	b944      	cbnz	r4, 37924 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   37912:	4628      	mov	r0, r5
   37914:	e9cd 4400 	strd	r4, r4, [sp]
   37918:	f7f9 fae4 	bl	30ee4 <nrf_recvfrom>
   3791c:	4605      	mov	r5, r0
}
   3791e:	4628      	mov	r0, r5
   37920:	b00f      	add	sp, #60	; 0x3c
   37922:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   37924:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   37926:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   37928:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3792a:	a804      	add	r0, sp, #16
   3792c:	9001      	str	r0, [sp, #4]
   3792e:	9700      	str	r7, [sp, #0]
   37930:	4628      	mov	r0, r5
   37932:	f7f9 fad7 	bl	30ee4 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   37936:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   37938:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   3793a:	2b02      	cmp	r3, #2
   3793c:	d109      	bne.n	37952 <nrf91_socket_offload_recvfrom+0x5c>
	ptr->sin_port = nrf_in->sin_port;
   3793e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   37942:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   37944:	2301      	movs	r3, #1
   37946:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   37948:	9b08      	ldr	r3, [sp, #32]
   3794a:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3794c:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   3794e:	6033      	str	r3, [r6, #0]
	return retval;
   37950:	e7e5      	b.n	3791e <nrf91_socket_offload_recvfrom+0x28>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   37952:	2b0a      	cmp	r3, #10
   37954:	d1e3      	bne.n	3791e <nrf91_socket_offload_recvfrom+0x28>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   37956:	4639      	mov	r1, r7
   37958:	4620      	mov	r0, r4
   3795a:	f7ff ffb8 	bl	378ce <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3795e:	2318      	movs	r3, #24
   37960:	e7f5      	b.n	3794e <nrf91_socket_offload_recvfrom+0x58>

00037962 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   37962:	2300      	movs	r3, #0
{
   37964:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   37966:	e9cd 3300 	strd	r3, r3, [sp]
   3796a:	f7ff ffc4 	bl	378f6 <nrf91_socket_offload_recvfrom>
}
   3796e:	b003      	add	sp, #12
   37970:	f85d fb04 	ldr.w	pc, [sp], #4

00037974 <nrf91_socket_offload_getaddrinfo>:
{
   37974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   37978:	4614      	mov	r4, r2
   3797a:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   3797c:	2100      	movs	r1, #0
{
   3797e:	b093      	sub	sp, #76	; 0x4c
   37980:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   37982:	2220      	movs	r2, #32
   37984:	a802      	add	r0, sp, #8
{
   37986:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   37988:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   3798a:	f001 f8f8 	bl	38b7e <memset>
	if (hints != NULL) {
   3798e:	b194      	cbz	r4, 379b6 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   37990:	4620      	mov	r0, r4
   37992:	a902      	add	r1, sp, #8
   37994:	f7ff ff76 	bl	37884 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   37998:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   3799c:	f000 80d0 	beq.w	37b40 <nrf91_socket_offload_getaddrinfo+0x1cc>
		} else if (error == -EAFNOSUPPORT) {
   379a0:	306a      	adds	r0, #106	; 0x6a
   379a2:	f000 80d0 	beq.w	37b46 <nrf91_socket_offload_getaddrinfo+0x1d2>
		if (hints->ai_next != NULL) {
   379a6:	6820      	ldr	r0, [r4, #0]
   379a8:	b120      	cbz	r0, 379b4 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   379aa:	ac0a      	add	r4, sp, #40	; 0x28
   379ac:	4621      	mov	r1, r4
   379ae:	f7ff ff69 	bl	37884 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   379b2:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   379b4:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   379b6:	4628      	mov	r0, r5
   379b8:	4622      	mov	r2, r4
   379ba:	4631      	mov	r1, r6
   379bc:	ab01      	add	r3, sp, #4
   379be:	f7f9 fb49 	bl	31054 <nrf_getaddrinfo>
	if (retval != 0) {
   379c2:	4605      	mov	r5, r0
   379c4:	b300      	cbz	r0, 37a08 <nrf91_socket_offload_getaddrinfo+0x94>
	switch (nrf_error) {
   379c6:	282f      	cmp	r0, #47	; 0x2f
   379c8:	f000 80c0 	beq.w	37b4c <nrf91_socket_offload_getaddrinfo+0x1d8>
   379cc:	dc0c      	bgt.n	379e8 <nrf91_socket_offload_getaddrinfo+0x74>
   379ce:	280c      	cmp	r0, #12
   379d0:	f000 80bf 	beq.w	37b52 <nrf91_socket_offload_getaddrinfo+0x1de>
		return DNS_EAI_AGAIN;
   379d4:	2823      	cmp	r0, #35	; 0x23
   379d6:	bf14      	ite	ne
   379d8:	f06f 050a 	mvnne.w	r5, #10
   379dc:	f06f 0502 	mvneq.w	r5, #2
}
   379e0:	4628      	mov	r0, r5
   379e2:	b013      	add	sp, #76	; 0x4c
   379e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   379e8:	2833      	cmp	r0, #51	; 0x33
   379ea:	d006      	beq.n	379fa <nrf91_socket_offload_getaddrinfo+0x86>
		return DNS_EAI_INPROGRESS;
   379ec:	2873      	cmp	r0, #115	; 0x73
   379ee:	bf14      	ite	ne
   379f0:	f06f 050a 	mvnne.w	r5, #10
   379f4:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   379f8:	e7f2      	b.n	379e0 <nrf91_socket_offload_getaddrinfo+0x6c>
		errno = ENETUNREACH;
   379fa:	f7ff fa18 	bl	36e2e <__errno>
   379fe:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   37a00:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   37a04:	6003      	str	r3, [r0, #0]
   37a06:	e7eb      	b.n	379e0 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   37a08:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   37a0a:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   37a0c:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   37a0e:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   37a10:	b91e      	cbnz	r6, 37a1a <nrf91_socket_offload_getaddrinfo+0xa6>
	nrf_freeaddrinfo(nrf_res);
   37a12:	9801      	ldr	r0, [sp, #4]
   37a14:	f7f9 fb20 	bl	31058 <nrf_freeaddrinfo>
	return retval;
   37a18:	e7e2      	b.n	379e0 <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   37a1a:	2050      	movs	r0, #80	; 0x50
   37a1c:	f7fc fe5a 	bl	346d4 <k_malloc>
		if (next_z_res == NULL) {
   37a20:	4604      	mov	r4, r0
   37a22:	2800      	cmp	r0, #0
   37a24:	f000 8081 	beq.w	37b2a <nrf91_socket_offload_getaddrinfo+0x1b6>
	family = nrf_to_z_family(nrf_in->ai_family);
   37a28:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   37a2a:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   37a2c:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   37a2e:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   37a32:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   37a36:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   37a3a:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   37a3c:	dc23      	bgt.n	37a86 <nrf91_socket_offload_getaddrinfo+0x112>
   37a3e:	2900      	cmp	r1, #0
   37a40:	dd23      	ble.n	37a8a <nrf91_socket_offload_getaddrinfo+0x116>
   37a42:	1e4b      	subs	r3, r1, #1
   37a44:	2b09      	cmp	r3, #9
   37a46:	d820      	bhi.n	37a8a <nrf91_socket_offload_getaddrinfo+0x116>
   37a48:	e8df f003 	tbb	[pc, r3]
   37a4c:	1f1f2905 	.word	0x1f1f2905
   37a50:	1f1f1f25 	.word	0x1f1f1f25
   37a54:	271f      	.short	0x271f
		return AF_LOCAL;
   37a56:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   37a58:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   37a5a:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   37a5c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   37a60:	d04b      	beq.n	37afa <nrf91_socket_offload_getaddrinfo+0x186>
   37a62:	dc26      	bgt.n	37ab2 <nrf91_socket_offload_getaddrinfo+0x13e>
   37a64:	2a02      	cmp	r2, #2
   37a66:	d04c      	beq.n	37b02 <nrf91_socket_offload_getaddrinfo+0x18e>
   37a68:	dc1d      	bgt.n	37aa6 <nrf91_socket_offload_getaddrinfo+0x132>
   37a6a:	b372      	cbz	r2, 37aca <nrf91_socket_offload_getaddrinfo+0x156>
   37a6c:	2a01      	cmp	r2, #1
   37a6e:	d04a      	beq.n	37b06 <nrf91_socket_offload_getaddrinfo+0x192>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   37a70:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   37a74:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   37a76:	2300      	movs	r3, #0
   37a78:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   37a7a:	4620      	mov	r0, r4
   37a7c:	f001 f822 	bl	38ac4 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   37a80:	f06f 0506 	mvn.w	r5, #6
   37a84:	e053      	b.n	37b2e <nrf91_socket_offload_getaddrinfo+0x1ba>
	switch (nrf_family) {
   37a86:	2966      	cmp	r1, #102	; 0x66
   37a88:	d00b      	beq.n	37aa2 <nrf91_socket_offload_getaddrinfo+0x12e>
			k_free(next_z_res);
   37a8a:	4620      	mov	r0, r4
   37a8c:	f001 f81a 	bl	38ac4 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   37a90:	f06f 0508 	mvn.w	r5, #8
   37a94:	e04b      	b.n	37b2e <nrf91_socket_offload_getaddrinfo+0x1ba>
		return AF_PACKET;
   37a96:	2303      	movs	r3, #3
   37a98:	e7de      	b.n	37a58 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_INET6;
   37a9a:	2302      	movs	r3, #2
   37a9c:	e7dc      	b.n	37a58 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (nrf_family) {
   37a9e:	2301      	movs	r3, #1
   37aa0:	e7da      	b.n	37a58 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_LTE;
   37aa2:	460b      	mov	r3, r1
   37aa4:	e7d8      	b.n	37a58 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (proto) {
   37aa6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   37aaa:	d1e1      	bne.n	37a70 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   37aac:	f44f 7381 	mov.w	r3, #258	; 0x102
   37ab0:	e025      	b.n	37afe <nrf91_socket_offload_getaddrinfo+0x18a>
	switch (proto) {
   37ab2:	f240 2302 	movw	r3, #514	; 0x202
   37ab6:	429a      	cmp	r2, r3
   37ab8:	d007      	beq.n	37aca <nrf91_socket_offload_getaddrinfo+0x156>
   37aba:	f240 2303 	movw	r3, #515	; 0x203
   37abe:	429a      	cmp	r2, r3
   37ac0:	d003      	beq.n	37aca <nrf91_socket_offload_getaddrinfo+0x156>
   37ac2:	f240 2301 	movw	r3, #513	; 0x201
   37ac6:	429a      	cmp	r2, r3
   37ac8:	d1d2      	bne.n	37a70 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   37aca:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   37acc:	2902      	cmp	r1, #2
   37ace:	d11c      	bne.n	37b0a <nrf91_socket_offload_getaddrinfo+0x196>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   37ad0:	2008      	movs	r0, #8
   37ad2:	f7fc fdff 	bl	346d4 <k_malloc>
   37ad6:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   37ad8:	b320      	cbz	r0, 37b24 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   37ada:	2308      	movs	r3, #8
   37adc:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   37ade:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   37ae0:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   37ae2:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   37ae4:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   37ae6:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   37ae8:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   37aea:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   37aec:	f1b8 0f00 	cmp.w	r8, #0
   37af0:	d123      	bne.n	37b3a <nrf91_socket_offload_getaddrinfo+0x1c6>
			*res = next_z_res;
   37af2:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   37af4:	46a0      	mov	r8, r4
   37af6:	69f6      	ldr	r6, [r6, #28]
   37af8:	e78a      	b.n	37a10 <nrf91_socket_offload_getaddrinfo+0x9c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   37afa:	f240 1311 	movw	r3, #273	; 0x111
   37afe:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   37b00:	e7e4      	b.n	37acc <nrf91_socket_offload_getaddrinfo+0x158>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   37b02:	2311      	movs	r3, #17
   37b04:	e7fb      	b.n	37afe <nrf91_socket_offload_getaddrinfo+0x18a>
   37b06:	2306      	movs	r3, #6
   37b08:	e7f9      	b.n	37afe <nrf91_socket_offload_getaddrinfo+0x18a>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   37b0a:	290a      	cmp	r1, #10
   37b0c:	d1b5      	bne.n	37a7a <nrf91_socket_offload_getaddrinfo+0x106>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   37b0e:	2018      	movs	r0, #24
   37b10:	f7fc fde0 	bl	346d4 <k_malloc>
   37b14:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   37b16:	b128      	cbz	r0, 37b24 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   37b18:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   37b1a:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   37b1c:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   37b1e:	f7ff fed6 	bl	378ce <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   37b22:	e7e3      	b.n	37aec <nrf91_socket_offload_getaddrinfo+0x178>
			k_free(next_z_res);
   37b24:	4620      	mov	r0, r4
   37b26:	f000 ffcd 	bl	38ac4 <k_free>
			retval = DNS_EAI_MEMORY;
   37b2a:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   37b2e:	6838      	ldr	r0, [r7, #0]
   37b30:	f7ff fe9b 	bl	3786a <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   37b34:	2300      	movs	r3, #0
   37b36:	603b      	str	r3, [r7, #0]
   37b38:	e76b      	b.n	37a12 <nrf91_socket_offload_getaddrinfo+0x9e>
			latest_z_res->ai_next = next_z_res;
   37b3a:	f8c8 4000 	str.w	r4, [r8]
   37b3e:	e7d9      	b.n	37af4 <nrf91_socket_offload_getaddrinfo+0x180>
			return DNS_EAI_SOCKTYPE;
   37b40:	f06f 0506 	mvn.w	r5, #6
   37b44:	e74c      	b.n	379e0 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   37b46:	f06f 0508 	mvn.w	r5, #8
   37b4a:	e749      	b.n	379e0 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   37b4c:	f06f 0501 	mvn.w	r5, #1
   37b50:	e746      	b.n	379e0 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   37b52:	f06f 0509 	mvn.w	r5, #9
   37b56:	e743      	b.n	379e0 <nrf91_socket_offload_getaddrinfo+0x6c>

00037b58 <z_to_nrf_ipv6>:
{
   37b58:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   37b5a:	2124      	movs	r1, #36	; 0x24
   37b5c:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   37b5e:	8841      	ldrh	r1, [r0, #2]
{
   37b60:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   37b62:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   37b64:	210a      	movs	r1, #10
{
   37b66:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   37b68:	6059      	str	r1, [r3, #4]
   37b6a:	1d04      	adds	r4, r0, #4
   37b6c:	f103 0610 	add.w	r6, r3, #16
   37b70:	f100 0714 	add.w	r7, r0, #20
   37b74:	4635      	mov	r5, r6
   37b76:	6820      	ldr	r0, [r4, #0]
   37b78:	6861      	ldr	r1, [r4, #4]
   37b7a:	3408      	adds	r4, #8
   37b7c:	c503      	stmia	r5!, {r0, r1}
   37b7e:	42bc      	cmp	r4, r7
   37b80:	462e      	mov	r6, r5
   37b82:	d1f7      	bne.n	37b74 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   37b84:	7d12      	ldrb	r2, [r2, #20]
   37b86:	621a      	str	r2, [r3, #32]
}
   37b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

00037b8a <nrf91_socket_offload_sendto>:
{
   37b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37b8e:	b08e      	sub	sp, #56	; 0x38
   37b90:	9c14      	ldr	r4, [sp, #80]	; 0x50
   37b92:	460e      	mov	r6, r1
   37b94:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   37b96:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   37b98:	b974      	cbnz	r4, 37bb8 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   37b9a:	4618      	mov	r0, r3
   37b9c:	9203      	str	r2, [sp, #12]
   37b9e:	f7ff fda1 	bl	376e4 <z_to_nrf_flags>
   37ba2:	4603      	mov	r3, r0
   37ba4:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   37ba8:	4631      	mov	r1, r6
   37baa:	4628      	mov	r0, r5
   37bac:	9a03      	ldr	r2, [sp, #12]
   37bae:	f7f9 f963 	bl	30e78 <nrf_sendto>
}
   37bb2:	b00e      	add	sp, #56	; 0x38
   37bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   37bb8:	8823      	ldrh	r3, [r4, #0]
   37bba:	9203      	str	r2, [sp, #12]
   37bbc:	2b01      	cmp	r3, #1
   37bbe:	d113      	bne.n	37be8 <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   37bc0:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   37bc2:	f04f 0810 	mov.w	r8, #16
	nrf_out->sin_port = ptr->sin_port;
   37bc6:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   37bca:	2302      	movs	r3, #2
   37bcc:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   37bce:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   37bd0:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   37bd2:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   37bd4:	f88d 8014 	strb.w	r8, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   37bd8:	f7ff fd84 	bl	376e4 <z_to_nrf_flags>
   37bdc:	a905      	add	r1, sp, #20
   37bde:	4603      	mov	r3, r0
   37be0:	f8cd 8004 	str.w	r8, [sp, #4]
   37be4:	9100      	str	r1, [sp, #0]
   37be6:	e7df      	b.n	37ba8 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   37be8:	2b02      	cmp	r3, #2
   37bea:	d10d      	bne.n	37c08 <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   37bec:	f10d 0814 	add.w	r8, sp, #20
   37bf0:	4641      	mov	r1, r8
   37bf2:	4620      	mov	r0, r4
   37bf4:	f7ff ffb0 	bl	37b58 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   37bf8:	4638      	mov	r0, r7
   37bfa:	f7ff fd73 	bl	376e4 <z_to_nrf_flags>
   37bfe:	2124      	movs	r1, #36	; 0x24
   37c00:	4603      	mov	r3, r0
   37c02:	e9cd 8100 	strd	r8, r1, [sp]
   37c06:	e7cf      	b.n	37ba8 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   37c08:	f7ff f911 	bl	36e2e <__errno>
   37c0c:	2386      	movs	r3, #134	; 0x86
   37c0e:	6003      	str	r3, [r0, #0]
	return retval;
   37c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37c14:	e7cd      	b.n	37bb2 <nrf91_socket_offload_sendto+0x28>

00037c16 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   37c16:	2300      	movs	r3, #0
{
   37c18:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   37c1a:	e9cd 3300 	strd	r3, r3, [sp]
   37c1e:	f7ff ffb4 	bl	37b8a <nrf91_socket_offload_sendto>
}
   37c22:	b003      	add	sp, #12
   37c24:	f85d fb04 	ldr.w	pc, [sp], #4

00037c28 <nrf91_socket_offload_connect>:
{
   37c28:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   37c2a:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   37c2c:	8808      	ldrh	r0, [r1, #0]
{
   37c2e:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   37c30:	2801      	cmp	r0, #1
{
   37c32:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   37c34:	d10f      	bne.n	37c56 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   37c36:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   37c38:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   37c3a:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   37c3e:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   37c40:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   37c42:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   37c46:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   37c48:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   37c4a:	4620      	mov	r0, r4
   37c4c:	a901      	add	r1, sp, #4
   37c4e:	f7f9 f97f 	bl	30f50 <nrf_connect>
}
   37c52:	b00a      	add	sp, #40	; 0x28
   37c54:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   37c56:	2802      	cmp	r0, #2
   37c58:	d105      	bne.n	37c66 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   37c5a:	4618      	mov	r0, r3
   37c5c:	a901      	add	r1, sp, #4
   37c5e:	f7ff ff7b 	bl	37b58 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   37c62:	2224      	movs	r2, #36	; 0x24
   37c64:	e7f1      	b.n	37c4a <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   37c66:	4620      	mov	r0, r4
   37c68:	f7f9 f972 	bl	30f50 <nrf_connect>
		if (retval < 0) {
   37c6c:	2800      	cmp	r0, #0
   37c6e:	daf0      	bge.n	37c52 <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   37c70:	f7ff f8dd 	bl	36e2e <__errno>
   37c74:	2386      	movs	r3, #134	; 0x86
   37c76:	6003      	str	r3, [r0, #0]
   37c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37c7c:	e7e9      	b.n	37c52 <nrf91_socket_offload_connect+0x2a>

00037c7e <nrf91_socket_offload_setsockopt>:
{
   37c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37c82:	461e      	mov	r6, r3
	switch (z_in_level) {
   37c84:	f240 2302 	movw	r3, #514	; 0x202
{
   37c88:	b086      	sub	sp, #24
	switch (z_in_level) {
   37c8a:	4299      	cmp	r1, r3
{
   37c8c:	460c      	mov	r4, r1
   37c8e:	4615      	mov	r5, r2
   37c90:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   37c92:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   37c96:	d005      	beq.n	37ca4 <nrf91_socket_offload_setsockopt+0x26>
   37c98:	dc20      	bgt.n	37cdc <nrf91_socket_offload_setsockopt+0x5e>
   37c9a:	2901      	cmp	r1, #1
   37c9c:	d002      	beq.n	37ca4 <nrf91_socket_offload_setsockopt+0x26>
   37c9e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   37ca2:	d126      	bne.n	37cf2 <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   37ca4:	4629      	mov	r1, r5
   37ca6:	4620      	mov	r0, r4
   37ca8:	aa03      	add	r2, sp, #12
   37caa:	f7ef fe11 	bl	278d0 <z_to_nrf_optname>
   37cae:	2800      	cmp	r0, #0
   37cb0:	db1f      	blt.n	37cf2 <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   37cb2:	2c01      	cmp	r4, #1
   37cb4:	d116      	bne.n	37ce4 <nrf91_socket_offload_setsockopt+0x66>
   37cb6:	3d14      	subs	r5, #20
   37cb8:	2d01      	cmp	r5, #1
   37cba:	d805      	bhi.n	37cc8 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   37cbc:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   37cbe:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   37cc0:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   37cc2:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   37cc4:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   37cc6:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   37cc8:	4633      	mov	r3, r6
   37cca:	4621      	mov	r1, r4
   37ccc:	4640      	mov	r0, r8
   37cce:	9a03      	ldr	r2, [sp, #12]
   37cd0:	9700      	str	r7, [sp, #0]
   37cd2:	f7f9 f987 	bl	30fe4 <nrf_setsockopt>
}
   37cd6:	b006      	add	sp, #24
   37cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   37cdc:	f240 2303 	movw	r3, #515	; 0x203
   37ce0:	4299      	cmp	r1, r3
   37ce2:	e7de      	b.n	37ca2 <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   37ce4:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   37ce8:	d1ee      	bne.n	37cc8 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   37cea:	2d08      	cmp	r5, #8
   37cec:	bf08      	it	eq
   37cee:	2701      	moveq	r7, #1
   37cf0:	e7ea      	b.n	37cc8 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   37cf2:	f7ff f89c 	bl	36e2e <__errno>
   37cf6:	236d      	movs	r3, #109	; 0x6d
   37cf8:	6003      	str	r3, [r0, #0]
   37cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37cfe:	e7ea      	b.n	37cd6 <nrf91_socket_offload_setsockopt+0x58>

00037d00 <nrf91_socket_offload_bind>:
{
   37d00:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   37d02:	880a      	ldrh	r2, [r1, #0]
{
   37d04:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   37d06:	2a01      	cmp	r2, #1
{
   37d08:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   37d0a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
	if (addr->sa_family == AF_INET) {
   37d0e:	d10f      	bne.n	37d30 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   37d10:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   37d12:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   37d14:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   37d18:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   37d1a:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   37d1c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   37d20:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   37d22:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   37d24:	4620      	mov	r0, r4
   37d26:	a901      	add	r1, sp, #4
   37d28:	f7f9 f94a 	bl	30fc0 <nrf_bind>
}
   37d2c:	b00a      	add	sp, #40	; 0x28
   37d2e:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   37d30:	2a02      	cmp	r2, #2
   37d32:	d105      	bne.n	37d40 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   37d34:	4618      	mov	r0, r3
   37d36:	a901      	add	r1, sp, #4
   37d38:	f7ff ff0e 	bl	37b58 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   37d3c:	2224      	movs	r2, #36	; 0x24
   37d3e:	e7f1      	b.n	37d24 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   37d40:	f7ff f875 	bl	36e2e <__errno>
   37d44:	2386      	movs	r3, #134	; 0x86
   37d46:	6003      	str	r3, [r0, #0]
   37d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37d4c:	e7ee      	b.n	37d2c <nrf91_socket_offload_bind+0x2c>

00037d4e <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   37d4e:	280d      	cmp	r0, #13
   37d50:	d004      	beq.n	37d5c <is_lfcr+0xe>
   37d52:	f1a0 030a 	sub.w	r3, r0, #10
   37d56:	4258      	negs	r0, r3
   37d58:	4158      	adcs	r0, r3
   37d5a:	4770      	bx	lr
		return true;
   37d5c:	2001      	movs	r0, #1
}
   37d5e:	4770      	bx	lr

00037d60 <skip_command_prefix>:
{
   37d60:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   37d62:	6801      	ldr	r1, [r0, #0]
{
   37d64:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   37d66:	1c8b      	adds	r3, r1, #2
   37d68:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   37d6a:	788c      	ldrb	r4, [r1, #2]
   37d6c:	4620      	mov	r0, r4
   37d6e:	f7ff ffee 	bl	37d4e <is_lfcr>
   37d72:	b910      	cbnz	r0, 37d7a <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   37d74:	b10c      	cbz	r4, 37d7a <skip_command_prefix+0x1a>
	(*cmd)++;
   37d76:	3103      	adds	r1, #3
   37d78:	6011      	str	r1, [r2, #0]
}
   37d7a:	bd10      	pop	{r4, pc}

00037d7c <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   37d7c:	6813      	ldr	r3, [r2, #0]
   37d7e:	f7f0 bcf5 	b.w	2876c <at_parser_max_params_from_str>

00037d82 <at_parser_cmd_type_get>:

enum at_cmd_type at_parser_cmd_type_get(const char *at_cmd)
{
   37d82:	b507      	push	{r0, r1, r2, lr}
   37d84:	9001      	str	r0, [sp, #4]
	enum at_cmd_type type;

	if (!is_command(at_cmd)) {
   37d86:	f7f0 fc61 	bl	2864c <is_command>
   37d8a:	b178      	cbz	r0, 37dac <at_parser_cmd_type_get+0x2a>
		return AT_CMD_TYPE_UNKNOWN;
	}

	skip_command_prefix(&at_cmd);
   37d8c:	a801      	add	r0, sp, #4
   37d8e:	f7ff ffe7 	bl	37d60 <skip_command_prefix>

	while (is_valid_notification_char(*at_cmd)) {
   37d92:	9901      	ldr	r1, [sp, #4]
   37d94:	780a      	ldrb	r2, [r1, #0]
   37d96:	4610      	mov	r0, r2
   37d98:	f7f0 fb6a 	bl	28470 <is_valid_notification_char>
   37d9c:	b948      	cbnz	r0, 37db2 <at_parser_cmd_type_get+0x30>
		at_cmd++;
	}

	if ((*at_cmd == AT_CMD_SEPARATOR) &&
   37d9e:	2a3d      	cmp	r2, #61	; 0x3d
   37da0:	d114      	bne.n	37dcc <at_parser_cmd_type_get+0x4a>
   37da2:	784b      	ldrb	r3, [r1, #1]
	    (*(at_cmd + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
		type = AT_CMD_TYPE_TEST_COMMAND;
   37da4:	2b3f      	cmp	r3, #63	; 0x3f
   37da6:	bf14      	ite	ne
   37da8:	2001      	movne	r0, #1
   37daa:	2003      	moveq	r0, #3
	} else {
		type = AT_CMD_TYPE_UNKNOWN;
	}

	return type;
}
   37dac:	b003      	add	sp, #12
   37dae:	f85d fb04 	ldr.w	pc, [sp], #4
		at_cmd++;
   37db2:	3101      	adds	r1, #1
   37db4:	9101      	str	r1, [sp, #4]
   37db6:	e7ec      	b.n	37d92 <at_parser_cmd_type_get+0x10>
	} else if ((*at_cmd == AT_CMD_SEPARATOR) || is_lfcr(*at_cmd) ||
   37db8:	4610      	mov	r0, r2
   37dba:	f7ff ffc8 	bl	37d4e <is_lfcr>
   37dbe:	b918      	cbnz	r0, 37dc8 <at_parser_cmd_type_get+0x46>
		return AT_CMD_TYPE_UNKNOWN;
   37dc0:	fab2 f082 	clz	r0, r2
   37dc4:	0940      	lsrs	r0, r0, #5
   37dc6:	e7f1      	b.n	37dac <at_parser_cmd_type_get+0x2a>
		type = AT_CMD_TYPE_SET_COMMAND;
   37dc8:	2001      	movs	r0, #1
   37dca:	e7ef      	b.n	37dac <at_parser_cmd_type_get+0x2a>
	} else if (*at_cmd == AT_CMD_READ_TEST_IDENTIFIER) {
   37dcc:	2a3f      	cmp	r2, #63	; 0x3f
   37dce:	d1f3      	bne.n	37db8 <at_parser_cmd_type_get+0x36>
		type = AT_CMD_TYPE_READ_COMMAND;
   37dd0:	2002      	movs	r0, #2
   37dd2:	e7eb      	b.n	37dac <at_parser_cmd_type_get+0x2a>

00037dd4 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   37dd4:	6803      	ldr	r3, [r0, #0]
   37dd6:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   37dd8:	bf83      	ittte	hi
   37dda:	230c      	movhi	r3, #12
   37ddc:	6840      	ldrhi	r0, [r0, #4]
   37dde:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   37de2:	2000      	movls	r0, #0
}
   37de4:	4770      	bx	lr

00037de6 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   37de6:	7803      	ldrb	r3, [r0, #0]
   37de8:	2b01      	cmp	r3, #1
   37dea:	d006      	beq.n	37dfa <at_param_size+0x14>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   37dec:	2b02      	cmp	r3, #2
   37dee:	d006      	beq.n	37dfe <at_param_size+0x18>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   37df0:	3b03      	subs	r3, #3
   37df2:	2b01      	cmp	r3, #1
   37df4:	d805      	bhi.n	37e02 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   37df6:	6840      	ldr	r0, [r0, #4]
   37df8:	4770      	bx	lr
		return sizeof(uint16_t);
   37dfa:	2002      	movs	r0, #2
   37dfc:	4770      	bx	lr
		return sizeof(uint32_t);
   37dfe:	2004      	movs	r0, #4
   37e00:	4770      	bx	lr
	}

	return 0;
   37e02:	2000      	movs	r0, #0
}
   37e04:	4770      	bx	lr

00037e06 <at_param_clear>:
{
   37e06:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   37e08:	7803      	ldrb	r3, [r0, #0]
{
   37e0a:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   37e0c:	3b03      	subs	r3, #3
   37e0e:	2b01      	cmp	r3, #1
   37e10:	d802      	bhi.n	37e18 <at_param_clear+0x12>
		k_free(param->value.str_val);
   37e12:	6880      	ldr	r0, [r0, #8]
   37e14:	f000 fe56 	bl	38ac4 <k_free>
	param->value.int_val = 0;
   37e18:	2300      	movs	r3, #0
   37e1a:	60a3      	str	r3, [r4, #8]
}
   37e1c:	bd10      	pop	{r4, pc}

00037e1e <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   37e1e:	b538      	push	{r3, r4, r5, lr}
   37e20:	460d      	mov	r5, r1
	if (list == NULL) {
   37e22:	4604      	mov	r4, r0
   37e24:	b140      	cbz	r0, 37e38 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   37e26:	210c      	movs	r1, #12
   37e28:	4628      	mov	r0, r5
   37e2a:	f000 fe50 	bl	38ace <k_calloc>
   37e2e:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   37e30:	b128      	cbz	r0, 37e3e <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   37e32:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   37e34:	6025      	str	r5, [r4, #0]
}
   37e36:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   37e38:	f06f 0015 	mvn.w	r0, #21
   37e3c:	e7fb      	b.n	37e36 <at_params_list_init+0x18>
		return -ENOMEM;
   37e3e:	f06f 000b 	mvn.w	r0, #11
   37e42:	e7f8      	b.n	37e36 <at_params_list_init+0x18>

00037e44 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   37e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (list == NULL || list->params == NULL) {
   37e48:	4604      	mov	r4, r0
   37e4a:	b140      	cbz	r0, 37e5e <at_params_list_clear+0x1a>
   37e4c:	6843      	ldr	r3, [r0, #4]
   37e4e:	b133      	cbz	r3, 37e5e <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   37e50:	2500      	movs	r5, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   37e52:	f04f 0a0c 	mov.w	sl, #12
__ssp_bos_icheck3(memset, void *, int)
   37e56:	462e      	mov	r6, r5
	for (size_t i = 0; i < list->param_count; ++i) {
   37e58:	6823      	ldr	r3, [r4, #0]
   37e5a:	429d      	cmp	r5, r3
   37e5c:	d301      	bcc.n	37e62 <at_params_list_clear+0x1e>
		at_param_init(&params[i]);
	}
}
   37e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		at_param_clear(&params[i]);
   37e62:	fb0a f805 	mul.w	r8, sl, r5
   37e66:	f8d4 9004 	ldr.w	r9, [r4, #4]
	for (size_t i = 0; i < list->param_count; ++i) {
   37e6a:	3501      	adds	r5, #1
		at_param_clear(&params[i]);
   37e6c:	eb09 0708 	add.w	r7, r9, r8
   37e70:	4638      	mov	r0, r7
   37e72:	f7ff ffc8 	bl	37e06 <at_param_clear>
   37e76:	f849 6008 	str.w	r6, [r9, r8]
   37e7a:	607e      	str	r6, [r7, #4]
   37e7c:	60be      	str	r6, [r7, #8]
	for (size_t i = 0; i < list->param_count; ++i) {
   37e7e:	e7eb      	b.n	37e58 <at_params_list_clear+0x14>

00037e80 <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   37e80:	b538      	push	{r3, r4, r5, lr}
   37e82:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   37e84:	b160      	cbz	r0, 37ea0 <at_params_short_put+0x20>
   37e86:	6843      	ldr	r3, [r0, #4]
   37e88:	b153      	cbz	r3, 37ea0 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   37e8a:	f7ff ffa3 	bl	37dd4 <at_params_get>

	if (param == NULL) {
   37e8e:	4604      	mov	r4, r0
   37e90:	b130      	cbz	r0, 37ea0 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   37e92:	f7ff ffb8 	bl	37e06 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   37e96:	2301      	movs	r3, #1
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
   37e98:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   37e9a:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   37e9c:	60a5      	str	r5, [r4, #8]
}
   37e9e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   37ea0:	f06f 0015 	mvn.w	r0, #21
   37ea4:	e7fb      	b.n	37e9e <at_params_short_put+0x1e>

00037ea6 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   37ea6:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   37ea8:	b160      	cbz	r0, 37ec4 <at_params_empty_put+0x1e>
   37eaa:	6843      	ldr	r3, [r0, #4]
   37eac:	b153      	cbz	r3, 37ec4 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   37eae:	f7ff ff91 	bl	37dd4 <at_params_get>

	if (param == NULL) {
   37eb2:	4604      	mov	r4, r0
   37eb4:	b130      	cbz	r0, 37ec4 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   37eb6:	f7ff ffa6 	bl	37e06 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   37eba:	2305      	movs	r3, #5
	param->value.int_val = 0;
   37ebc:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   37ebe:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   37ec0:	60a0      	str	r0, [r4, #8]

	return 0;
}
   37ec2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   37ec4:	f06f 0015 	mvn.w	r0, #21
   37ec8:	e7fb      	b.n	37ec2 <at_params_empty_put+0x1c>

00037eca <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   37eca:	b538      	push	{r3, r4, r5, lr}
   37ecc:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   37ece:	b160      	cbz	r0, 37eea <at_params_int_put+0x20>
   37ed0:	6843      	ldr	r3, [r0, #4]
   37ed2:	b153      	cbz	r3, 37eea <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   37ed4:	f7ff ff7e 	bl	37dd4 <at_params_get>

	if (param == NULL) {
   37ed8:	4604      	mov	r4, r0
   37eda:	b130      	cbz	r0, 37eea <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   37edc:	f7ff ff93 	bl	37e06 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   37ee0:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   37ee2:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   37ee4:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   37ee6:	60a5      	str	r5, [r4, #8]
}
   37ee8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   37eea:	f06f 0015 	mvn.w	r0, #21
   37eee:	e7fb      	b.n	37ee8 <at_params_int_put+0x1e>

00037ef0 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   37ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37ef2:	4617      	mov	r7, r2
   37ef4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   37ef6:	b1c0      	cbz	r0, 37f2a <at_params_string_put+0x3a>
   37ef8:	6843      	ldr	r3, [r0, #4]
   37efa:	b1b3      	cbz	r3, 37f2a <at_params_string_put+0x3a>
   37efc:	b1aa      	cbz	r2, 37f2a <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   37efe:	f7ff ff69 	bl	37dd4 <at_params_get>

	if (param == NULL) {
   37f02:	4604      	mov	r4, r0
   37f04:	b188      	cbz	r0, 37f2a <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   37f06:	1c68      	adds	r0, r5, #1
   37f08:	f7fc fbe4 	bl	346d4 <k_malloc>

	if (param_value == NULL) {
   37f0c:	4606      	mov	r6, r0
   37f0e:	b178      	cbz	r0, 37f30 <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   37f10:	462a      	mov	r2, r5
   37f12:	4639      	mov	r1, r7
   37f14:	f000 fe13 	bl	38b3e <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   37f18:	4620      	mov	r0, r4
   37f1a:	f7ff ff74 	bl	37e06 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   37f1e:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   37f20:	2000      	movs	r0, #0
	param->size = str_len;
   37f22:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   37f24:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   37f26:	60a6      	str	r6, [r4, #8]
}
   37f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   37f2a:	f06f 0015 	mvn.w	r0, #21
   37f2e:	e7fb      	b.n	37f28 <at_params_string_put+0x38>
		return -ENOMEM;
   37f30:	f06f 000b 	mvn.w	r0, #11
   37f34:	e7f8      	b.n	37f28 <at_params_string_put+0x38>

00037f36 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   37f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37f38:	4617      	mov	r7, r2
   37f3a:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   37f3c:	b1c0      	cbz	r0, 37f70 <at_params_array_put+0x3a>
   37f3e:	6843      	ldr	r3, [r0, #4]
   37f40:	b1b3      	cbz	r3, 37f70 <at_params_array_put+0x3a>
   37f42:	b1aa      	cbz	r2, 37f70 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   37f44:	f7ff ff46 	bl	37dd4 <at_params_get>

	if (param == NULL) {
   37f48:	4604      	mov	r4, r0
   37f4a:	b188      	cbz	r0, 37f70 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   37f4c:	4628      	mov	r0, r5
   37f4e:	f7fc fbc1 	bl	346d4 <k_malloc>

	if (param_value == NULL) {
   37f52:	4606      	mov	r6, r0
   37f54:	b178      	cbz	r0, 37f76 <at_params_array_put+0x40>
   37f56:	462a      	mov	r2, r5
   37f58:	4639      	mov	r1, r7
   37f5a:	f000 fdf0 	bl	38b3e <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   37f5e:	4620      	mov	r0, r4
   37f60:	f7ff ff51 	bl	37e06 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   37f64:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   37f66:	2000      	movs	r0, #0
	param->size = array_len;
   37f68:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   37f6a:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   37f6c:	60a6      	str	r6, [r4, #8]
}
   37f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   37f70:	f06f 0015 	mvn.w	r0, #21
   37f74:	e7fb      	b.n	37f6e <at_params_array_put+0x38>
		return -ENOMEM;
   37f76:	f06f 000b 	mvn.w	r0, #11
   37f7a:	e7f8      	b.n	37f6e <at_params_array_put+0x38>

00037f7c <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   37f7c:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   37f7e:	b160      	cbz	r0, 37f9a <at_params_short_get+0x1e>
   37f80:	6843      	ldr	r3, [r0, #4]
   37f82:	b153      	cbz	r3, 37f9a <at_params_short_get+0x1e>
   37f84:	b14a      	cbz	r2, 37f9a <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   37f86:	f7ff ff25 	bl	37dd4 <at_params_get>

	if (param == NULL) {
   37f8a:	b130      	cbz	r0, 37f9a <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   37f8c:	7803      	ldrb	r3, [r0, #0]
   37f8e:	2b01      	cmp	r3, #1
   37f90:	d103      	bne.n	37f9a <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
   37f92:	6883      	ldr	r3, [r0, #8]
	return 0;
   37f94:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   37f96:	8013      	strh	r3, [r2, #0]
}
   37f98:	bd08      	pop	{r3, pc}
		return -EINVAL;
   37f9a:	f06f 0015 	mvn.w	r0, #21
   37f9e:	e7fb      	b.n	37f98 <at_params_short_get+0x1c>

00037fa0 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   37fa0:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   37fa2:	b168      	cbz	r0, 37fc0 <at_params_int_get+0x20>
   37fa4:	6843      	ldr	r3, [r0, #4]
   37fa6:	b15b      	cbz	r3, 37fc0 <at_params_int_get+0x20>
   37fa8:	b152      	cbz	r2, 37fc0 <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   37faa:	f7ff ff13 	bl	37dd4 <at_params_get>

	if (param == NULL) {
   37fae:	b138      	cbz	r0, 37fc0 <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   37fb0:	7803      	ldrb	r3, [r0, #0]
   37fb2:	3b01      	subs	r3, #1
   37fb4:	2b01      	cmp	r3, #1
   37fb6:	d803      	bhi.n	37fc0 <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   37fb8:	6883      	ldr	r3, [r0, #8]
	return 0;
   37fba:	2000      	movs	r0, #0
	*value = param->value.int_val;
   37fbc:	6013      	str	r3, [r2, #0]
}
   37fbe:	bd08      	pop	{r3, pc}
		return -EINVAL;
   37fc0:	f06f 0015 	mvn.w	r0, #21
   37fc4:	e7fb      	b.n	37fbe <at_params_int_get+0x1e>

00037fc6 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   37fc6:	b570      	push	{r4, r5, r6, lr}
   37fc8:	4616      	mov	r6, r2
   37fca:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   37fcc:	b1c0      	cbz	r0, 38000 <at_params_string_get+0x3a>
   37fce:	6843      	ldr	r3, [r0, #4]
   37fd0:	b1b3      	cbz	r3, 38000 <at_params_string_get+0x3a>
   37fd2:	b1aa      	cbz	r2, 38000 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   37fd4:	b1a4      	cbz	r4, 38000 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   37fd6:	f7ff fefd 	bl	37dd4 <at_params_get>

	if (param == NULL) {
   37fda:	4601      	mov	r1, r0
   37fdc:	b180      	cbz	r0, 38000 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   37fde:	7803      	ldrb	r3, [r0, #0]
   37fe0:	2b03      	cmp	r3, #3
   37fe2:	d10d      	bne.n	38000 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   37fe4:	f7ff feff 	bl	37de6 <at_param_size>

	if (*len < param_len) {
   37fe8:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   37fea:	4605      	mov	r5, r0
	if (*len < param_len) {
   37fec:	4283      	cmp	r3, r0
   37fee:	d30a      	bcc.n	38006 <at_params_string_get+0x40>
   37ff0:	4602      	mov	r2, r0
   37ff2:	6889      	ldr	r1, [r1, #8]
   37ff4:	4630      	mov	r0, r6
   37ff6:	f000 fda2 	bl	38b3e <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   37ffa:	2000      	movs	r0, #0
	*len = param_len;
   37ffc:	6025      	str	r5, [r4, #0]
}
   37ffe:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   38000:	f06f 0015 	mvn.w	r0, #21
   38004:	e7fb      	b.n	37ffe <at_params_string_get+0x38>
		return -ENOMEM;
   38006:	f06f 000b 	mvn.w	r0, #11
   3800a:	e7f8      	b.n	37ffe <at_params_string_get+0x38>

0003800c <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   3800c:	4602      	mov	r2, r0
{
   3800e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   38010:	b170      	cbz	r0, 38030 <at_params_valid_count_get+0x24>
   38012:	6840      	ldr	r0, [r0, #4]
   38014:	b160      	cbz	r0, 38030 <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   38016:	6811      	ldr	r1, [r2, #0]
   38018:	b141      	cbz	r1, 3802c <at_params_valid_count_get+0x20>
   3801a:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3801c:	7803      	ldrb	r3, [r0, #0]
   3801e:	b12b      	cbz	r3, 3802c <at_params_valid_count_get+0x20>
		valid_i += 1;
		param = at_params_get(list, valid_i);
   38020:	4610      	mov	r0, r2
		valid_i += 1;
   38022:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   38024:	f7ff fed6 	bl	37dd4 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   38028:	2800      	cmp	r0, #0
   3802a:	d1f7      	bne.n	3801c <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   3802c:	4608      	mov	r0, r1
   3802e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   38030:	f06f 0115 	mvn.w	r1, #21
   38034:	e7fa      	b.n	3802c <at_params_valid_count_get+0x20>

00038036 <request_send>:
	switch (dl->proto) {
   38036:	f8d0 3824 	ldr.w	r3, [r0, #2084]	; 0x824
   3803a:	2b06      	cmp	r3, #6
   3803c:	d002      	beq.n	38044 <request_send+0xe>
   3803e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   38042:	d101      	bne.n	38048 <request_send+0x12>
		return http_get_request_send(dl);
   38044:	f7f1 bb7e 	b.w	29744 <http_get_request_send>
}
   38048:	2000      	movs	r0, #0
   3804a:	4770      	bx	lr

0003804c <error_evt_send.isra.0>:
static int error_evt_send(const struct download_client *dl, int error)
   3804c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   3804e:	2300      	movs	r3, #0
   38050:	9301      	str	r3, [sp, #4]
   38052:	9303      	str	r3, [sp, #12]
   38054:	2301      	movs	r3, #1
static int error_evt_send(const struct download_client *dl, int error)
   38056:	4602      	mov	r2, r0
		.error = -error
   38058:	4249      	negs	r1, r1
	return dl->callback(&evt);
   3805a:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   3805c:	f88d 3004 	strb.w	r3, [sp, #4]
   38060:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   38062:	4790      	blx	r2
}
   38064:	b005      	add	sp, #20
   38066:	f85d fb04 	ldr.w	pc, [sp], #4

0003806a <socket_send>:
{
   3806a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	size_t off = 0;
   3806e:	2500      	movs	r5, #0
{
   38070:	4606      	mov	r6, r0
   38072:	460c      	mov	r4, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   38074:	462f      	mov	r7, r5
		sent = send(client->fd, client->buf + off, len, 0);
   38076:	f100 0804 	add.w	r8, r0, #4
	while (len) {
   3807a:	b90c      	cbnz	r4, 38080 <socket_send+0x16>
	return 0;
   3807c:	4620      	mov	r0, r4
   3807e:	e00e      	b.n	3809e <socket_send+0x34>
		sent = send(client->fd, client->buf + off, len, 0);
   38080:	6830      	ldr	r0, [r6, #0]
   38082:	2300      	movs	r3, #0
   38084:	4622      	mov	r2, r4
   38086:	e9cd 7700 	strd	r7, r7, [sp]
   3808a:	eb08 0105 	add.w	r1, r8, r5
   3808e:	f7fe fc37 	bl	36900 <z_impl_zsock_sendto>
		if (sent <= 0) {
   38092:	1e03      	subs	r3, r0, #0
   38094:	dc06      	bgt.n	380a4 <socket_send+0x3a>
			return -errno;
   38096:	f7fe feca 	bl	36e2e <__errno>
   3809a:	6800      	ldr	r0, [r0, #0]
   3809c:	4240      	negs	r0, r0
}
   3809e:	b002      	add	sp, #8
   380a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		off += sent;
   380a4:	441d      	add	r5, r3
		len -= sent;
   380a6:	1ae4      	subs	r4, r4, r3
   380a8:	e7e7      	b.n	3807a <socket_send+0x10>

000380aa <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   380aa:	b128      	cbz	r0, 380b8 <download_client_file_size_get+0xe>
   380ac:	b121      	cbz	r1, 380b8 <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   380ae:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

	return 0;
   380b2:	2000      	movs	r0, #0
	*size = client->file_size;
   380b4:	600b      	str	r3, [r1, #0]
	return 0;
   380b6:	4770      	bx	lr
		return -EINVAL;
   380b8:	f06f 0015 	mvn.w	r0, #21
}
   380bc:	4770      	bx	lr

000380be <swallow>:
{
   380be:	b570      	push	{r4, r5, r6, lr}
   380c0:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   380c2:	6800      	ldr	r0, [r0, #0]
{
   380c4:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   380c6:	f000 feed 	bl	38ea4 <strstr>
	if (!p) {
   380ca:	4604      	mov	r4, r0
   380cc:	b130      	cbz	r0, 380dc <swallow+0x1e>
	*str = p + strlen(swallow);
   380ce:	4630      	mov	r0, r6
   380d0:	f7e4 ffce 	bl	1d070 <strlen>
   380d4:	4404      	add	r4, r0
	return 0;
   380d6:	2000      	movs	r0, #0
	*str = p + strlen(swallow);
   380d8:	602c      	str	r4, [r5, #0]
}
   380da:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   380dc:	2001      	movs	r0, #1
   380de:	e7fc      	b.n	380da <swallow+0x1c>

000380e0 <dfu_target_callback_handler>:
	switch (evt) {
   380e0:	b120      	cbz	r0, 380ec <dfu_target_callback_handler+0xc>
   380e2:	2801      	cmp	r0, #1
   380e4:	d005      	beq.n	380f2 <dfu_target_callback_handler+0x12>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   380e6:	2001      	movs	r0, #1
   380e8:	f7f1 bc4c 	b.w	29984 <send_error_evt>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_PENDING);
   380ec:	2002      	movs	r0, #2
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_DONE);
   380ee:	f7f1 bc39 	b.w	29964 <send_evt>
   380f2:	2003      	movs	r0, #3
   380f4:	e7fb      	b.n	380ee <dfu_target_callback_handler+0xe>

000380f6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   380f6:	4700      	bx	r0

000380f8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   380f8:	f000 ba72 	b.w	385e0 <z_impl_k_busy_wait>

000380fc <nrfx_clock_enable>:
{
   380fc:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   380fe:	2005      	movs	r0, #5
   38100:	f7ec ff70 	bl	24fe4 <arch_irq_is_enabled>
   38104:	b920      	cbnz	r0, 38110 <nrfx_clock_enable+0x14>
}
   38106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3810a:	2005      	movs	r0, #5
   3810c:	f7ec bf46 	b.w	24f9c <arch_irq_enable>
   38110:	bd08      	pop	{r3, pc}

00038112 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   38112:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   38116:	4770      	bx	lr

00038118 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   38118:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   3811c:	4770      	bx	lr

0003811e <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   3811e:	f44f 7080 	mov.w	r0, #256	; 0x100
   38122:	4770      	bx	lr

00038124 <nrfx_timer_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   38124:	2201      	movs	r2, #1
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   38126:	6803      	ldr	r3, [r0, #0]
   38128:	60da      	str	r2, [r3, #12]
}
   3812a:	4770      	bx	lr

0003812c <nrfx_timer_capture>:
                            nrf_timer_cc_channel_t cc_channel)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);

    nrf_timer_task_trigger(p_instance->p_reg,
   3812c:	6802      	ldr	r2, [r0, #0]
   3812e:	2001      	movs	r0, #1
    return (uint32_t)p_reg->CC[cc_channel];
}

NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get(uint32_t channel)
{
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   38130:	008b      	lsls	r3, r1, #2
   38132:	3340      	adds	r3, #64	; 0x40
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   38134:	b2db      	uxtb	r3, r3
   38136:	50d0      	str	r0, [r2, r3]
    return (uint32_t)p_reg->CC[cc_channel];
   38138:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   3813c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
}
   38140:	4770      	bx	lr

00038142 <device_pm_control_nop>:
			  void *unused_context,
			  device_pm_cb cb,
			  void *unused_arg)
{
	return -ENOTSUP;
}
   38142:	f06f 0085 	mvn.w	r0, #133	; 0x85
   38146:	4770      	bx	lr

00038148 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   38148:	f7fe bdc4 	b.w	36cd4 <z_clock_idle_exit>

0003814c <k_heap_init>:
{
   3814c:	b410      	push	{r4}
   3814e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   38152:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   38156:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   3815a:	f7fd bdd3 	b.w	35d04 <sys_heap_init>

0003815e <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   3815e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38162:	4605      	mov	r5, r0
   38164:	b085      	sub	sp, #20
   38166:	460f      	mov	r7, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   38168:	4610      	mov	r0, r2
   3816a:	4619      	mov	r1, r3
   3816c:	f000 fae9 	bl	38742 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   38170:	f105 0b14 	add.w	fp, r5, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   38174:	9002      	str	r0, [sp, #8]
   38176:	468a      	mov	sl, r1
	__asm__ volatile(
   38178:	f04f 0320 	mov.w	r3, #32
   3817c:	f3ef 8411 	mrs	r4, BASEPRI
   38180:	f383 8811 	msr	BASEPRI, r3
   38184:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   38188:	f105 060c 	add.w	r6, r5, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   3818c:	4639      	mov	r1, r7
   3818e:	4628      	mov	r0, r5
   38190:	f7fd fd84 	bl	35c9c <sys_heap_alloc>
   38194:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   38196:	f7fc f97d 	bl	34494 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   3819a:	9b03      	ldr	r3, [sp, #12]
   3819c:	b13b      	cbz	r3, 381ae <k_heap_alloc+0x50>
	__asm__ volatile(
   3819e:	f384 8811 	msr	BASEPRI, r4
   381a2:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   381a6:	4618      	mov	r0, r3
   381a8:	b005      	add	sp, #20
   381aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   381ae:	9a02      	ldr	r2, [sp, #8]
   381b0:	ebb2 0800 	subs.w	r8, r2, r0
   381b4:	eb6a 0901 	sbc.w	r9, sl, r1
   381b8:	f1b8 0f01 	cmp.w	r8, #1
   381bc:	f179 0200 	sbcs.w	r2, r9, #0
   381c0:	dbed      	blt.n	3819e <k_heap_alloc+0x40>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   381c2:	4632      	mov	r2, r6
   381c4:	4621      	mov	r1, r4
   381c6:	4658      	mov	r0, fp
   381c8:	e9cd 8900 	strd	r8, r9, [sp]
   381cc:	f7fb fd62 	bl	33c94 <z_pend_curr>
	__asm__ volatile(
   381d0:	f04f 0320 	mov.w	r3, #32
   381d4:	f3ef 8411 	mrs	r4, BASEPRI
   381d8:	f383 8811 	msr	BASEPRI, r3
   381dc:	f3bf 8f6f 	isb	sy
   381e0:	e7d4      	b.n	3818c <k_heap_alloc+0x2e>

000381e2 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   381e2:	b538      	push	{r3, r4, r5, lr}
   381e4:	4604      	mov	r4, r0
   381e6:	f04f 0320 	mov.w	r3, #32
   381ea:	f3ef 8511 	mrs	r5, BASEPRI
   381ee:	f383 8811 	msr	BASEPRI, r3
   381f2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   381f6:	f7fd fcfb 	bl	35bf0 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   381fa:	f104 000c 	add.w	r0, r4, #12
   381fe:	f000 f9c9 	bl	38594 <z_unpend_all>
   38202:	b130      	cbz	r0, 38212 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   38204:	4629      	mov	r1, r5
   38206:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   3820a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   3820e:	f7fb badb 	b.w	337c8 <z_reschedule>
	__asm__ volatile(
   38212:	f385 8811 	msr	BASEPRI, r5
   38216:	f3bf 8f6f 	isb	sy
}
   3821a:	bd38      	pop	{r3, r4, r5, pc}

0003821c <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   3821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3821e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   38222:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   38224:	6800      	ldr	r0, [r0, #0]
{
   38226:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   38228:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   3822a:	4632      	mov	r2, r6
   3822c:	463b      	mov	r3, r7
   3822e:	4621      	mov	r1, r4
   38230:	f7ff ff95 	bl	3815e <k_heap_alloc>
   38234:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   38236:	b144      	cbz	r4, 3824a <k_mem_pool_alloc+0x2e>
   38238:	b938      	cbnz	r0, 3824a <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   3823a:	ea56 0307 	orrs.w	r3, r6, r7
   3823e:	bf0c      	ite	eq
   38240:	f06f 000b 	mvneq.w	r0, #11
   38244:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   38248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   3824a:	2000      	movs	r0, #0
   3824c:	e7fc      	b.n	38248 <k_mem_pool_alloc+0x2c>

0003824e <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   3824e:	e9d0 1000 	ldrd	r1, r0, [r0]
   38252:	f7ff bfc6 	b.w	381e2 <k_heap_free>

00038256 <k_mem_slab_init>:
{
   38256:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   38258:	2400      	movs	r4, #0
   3825a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3825c:	ea41 0402 	orr.w	r4, r1, r2
   38260:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   38264:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   38268:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3826a:	d10c      	bne.n	38286 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   3826c:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3826e:	42a3      	cmp	r3, r4
   38270:	d103      	bne.n	3827a <k_mem_slab_init+0x24>
   38272:	e9c0 0000 	strd	r0, r0, [r0]
}
   38276:	2000      	movs	r0, #0
}
   38278:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   3827a:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3827c:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   3827e:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   38280:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   38282:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   38284:	e7f3      	b.n	3826e <k_mem_slab_init+0x18>
		return -EINVAL;
   38286:	f06f 0015 	mvn.w	r0, #21
	return rc;
   3828a:	e7f5      	b.n	38278 <k_mem_slab_init+0x22>

0003828c <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   3828c:	2300      	movs	r3, #0
   3828e:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   38292:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   38296:	4618      	mov	r0, r3
   38298:	4770      	bx	lr

0003829a <queue_insert>:
{
   3829a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3829e:	4699      	mov	r9, r3
   382a0:	4604      	mov	r4, r0
   382a2:	460d      	mov	r5, r1
   382a4:	4690      	mov	r8, r2
   382a6:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   382aa:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   382ae:	f04f 0220 	mov.w	r2, #32
   382b2:	f3ef 8711 	mrs	r7, BASEPRI
   382b6:	f382 8811 	msr	BASEPRI, r2
   382ba:	f3bf 8f6f 	isb	sy
	if (is_append) {
   382be:	b103      	cbz	r3, 382c2 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   382c0:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   382c2:	4630      	mov	r0, r6
   382c4:	f000 f941 	bl	3854a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   382c8:	b160      	cbz	r0, 382e4 <queue_insert+0x4a>
   382ca:	2400      	movs	r4, #0
   382cc:	f8c0 8014 	str.w	r8, [r0, #20]
   382d0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
	z_ready_thread(thread);
   382d4:	f000 f8de 	bl	38494 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   382d8:	4630      	mov	r0, r6
   382da:	4639      	mov	r1, r7
   382dc:	f7fb fa74 	bl	337c8 <z_reschedule>
	return 0;
   382e0:	2000      	movs	r0, #0
   382e2:	e00c      	b.n	382fe <queue_insert+0x64>
	if (alloc) {
   382e4:	f1b9 0f00 	cmp.w	r9, #0
   382e8:	d01b      	beq.n	38322 <queue_insert+0x88>
		anode = z_thread_malloc(sizeof(*anode));
   382ea:	2008      	movs	r0, #8
   382ec:	f7fc f9f8 	bl	346e0 <z_thread_malloc>
		if (anode == NULL) {
   382f0:	b938      	cbnz	r0, 38302 <queue_insert+0x68>
	__asm__ volatile(
   382f2:	f387 8811 	msr	BASEPRI, r7
   382f6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   382fa:	f06f 000b 	mvn.w	r0, #11
}
   382fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   38302:	2301      	movs	r3, #1
		anode->data = data;
   38304:	f8c0 8004 	str.w	r8, [r0, #4]
   38308:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3830a:	6803      	ldr	r3, [r0, #0]
   3830c:	f003 0203 	and.w	r2, r3, #3
   38310:	b95d      	cbnz	r5, 3832a <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   38312:	6823      	ldr	r3, [r4, #0]
   38314:	4313      	orrs	r3, r2
   38316:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   38318:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   3831a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3831c:	b973      	cbnz	r3, 3833c <queue_insert+0xa2>
	list->tail = node;
   3831e:	6060      	str	r0, [r4, #4]
}
   38320:	e00c      	b.n	3833c <queue_insert+0xa2>
}
   38322:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   38324:	f8c8 9000 	str.w	r9, [r8]
}
   38328:	e7ef      	b.n	3830a <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3832a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3832c:	f033 0303 	bics.w	r3, r3, #3
   38330:	d110      	bne.n	38354 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   38332:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   38334:	6862      	ldr	r2, [r4, #4]
   38336:	b93a      	cbnz	r2, 38348 <queue_insert+0xae>
	list->head = node;
   38338:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3833c:	2104      	movs	r1, #4
   3833e:	f104 0010 	add.w	r0, r4, #16
   38342:	f000 fb99 	bl	38a78 <z_handle_obj_poll_events>
   38346:	e7c7      	b.n	382d8 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   38348:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3834a:	f003 0303 	and.w	r3, r3, #3
   3834e:	4303      	orrs	r3, r0
   38350:	6013      	str	r3, [r2, #0]
   38352:	e7e4      	b.n	3831e <queue_insert+0x84>
   38354:	4313      	orrs	r3, r2
   38356:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   38358:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3835a:	f003 0303 	and.w	r3, r3, #3
   3835e:	4303      	orrs	r3, r0
   38360:	602b      	str	r3, [r5, #0]
}
   38362:	e7eb      	b.n	3833c <queue_insert+0xa2>

00038364 <z_queue_node_peek>:
{
   38364:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   38366:	4604      	mov	r4, r0
   38368:	b130      	cbz	r0, 38378 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3836a:	6802      	ldr	r2, [r0, #0]
   3836c:	0793      	lsls	r3, r2, #30
   3836e:	d003      	beq.n	38378 <z_queue_node_peek+0x14>
		ret = anode->data;
   38370:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   38372:	b109      	cbz	r1, 38378 <z_queue_node_peek+0x14>
			k_free(anode);
   38374:	f000 fba6 	bl	38ac4 <k_free>
}
   38378:	4620      	mov	r0, r4
   3837a:	bd10      	pop	{r4, pc}

0003837c <z_impl_k_queue_init>:
	list->head = NULL;
   3837c:	2300      	movs	r3, #0
	list->tail = NULL;
   3837e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   38382:	f100 0308 	add.w	r3, r0, #8
   38386:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   3838a:	f100 0310 	add.w	r3, r0, #16
   3838e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   38392:	4770      	bx	lr

00038394 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   38394:	2301      	movs	r3, #1
{
   38396:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   38398:	9300      	str	r3, [sp, #0]
   3839a:	2300      	movs	r3, #0
{
   3839c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3839e:	4619      	mov	r1, r3
   383a0:	f7ff ff7b 	bl	3829a <queue_insert>
}
   383a4:	b003      	add	sp, #12
   383a6:	f85d fb04 	ldr.w	pc, [sp], #4

000383aa <z_swap_irqlock>:
{
   383aa:	b507      	push	{r0, r1, r2, lr}
   383ac:	9001      	str	r0, [sp, #4]
	z_check_stack_sentinel();
   383ae:	f7fb fddf 	bl	33f70 <z_check_stack_sentinel>
	ret = arch_swap(key);
   383b2:	9801      	ldr	r0, [sp, #4]
}
   383b4:	b003      	add	sp, #12
   383b6:	f85d eb04 	ldr.w	lr, [sp], #4
	ret = arch_swap(key);
   383ba:	f7ec bd6b 	b.w	24e94 <arch_swap>

000383be <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   383be:	f990 000e 	ldrsb.w	r0, [r0, #14]
   383c2:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   383c6:	4298      	cmp	r0, r3
   383c8:	bfac      	ite	ge
   383ca:	2000      	movge	r0, #0
   383cc:	2001      	movlt	r0, #1
   383ce:	4770      	bx	lr

000383d0 <z_find_first_thread_to_unpend>:
{
   383d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   383d2:	f04f 0320 	mov.w	r3, #32
   383d6:	f3ef 8411 	mrs	r4, BASEPRI
   383da:	f383 8811 	msr	BASEPRI, r3
   383de:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   383e2:	f000 f84d 	bl	38480 <z_priq_dumb_best>
	__asm__ volatile(
   383e6:	f384 8811 	msr	BASEPRI, r4
   383ea:	f3bf 8f6f 	isb	sy
}
   383ee:	bd10      	pop	{r4, pc}

000383f0 <z_unpend_thread_no_timeout>:
{
   383f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   383f2:	f04f 0320 	mov.w	r3, #32
   383f6:	f3ef 8411 	mrs	r4, BASEPRI
   383fa:	f383 8811 	msr	BASEPRI, r3
   383fe:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   38402:	f000 f81b 	bl	3843c <unpend_thread_no_timeout>
	__asm__ volatile(
   38406:	f384 8811 	msr	BASEPRI, r4
   3840a:	f3bf 8f6f 	isb	sy
}
   3840e:	bd10      	pop	{r4, pc}

00038410 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   38410:	4603      	mov	r3, r0
   38412:	b920      	cbnz	r0, 3841e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   38414:	f3ef 8205 	mrs	r2, IPSR
   38418:	b90a      	cbnz	r2, 3841e <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   3841a:	f7ff bfc6 	b.w	383aa <z_swap_irqlock>
   3841e:	f383 8811 	msr	BASEPRI, r3
   38422:	f3bf 8f6f 	isb	sy
}
   38426:	4770      	bx	lr

00038428 <z_reschedule_unlocked>:
	__asm__ volatile(
   38428:	f04f 0320 	mov.w	r3, #32
   3842c:	f3ef 8011 	mrs	r0, BASEPRI
   38430:	f383 8811 	msr	BASEPRI, r3
   38434:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   38438:	f7ff bfea 	b.w	38410 <z_reschedule_irqlock>

0003843c <unpend_thread_no_timeout>:
{
   3843c:	4601      	mov	r1, r0
   3843e:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   38440:	6880      	ldr	r0, [r0, #8]
   38442:	f7fb f9e7 	bl	33814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   38446:	7b4b      	ldrb	r3, [r1, #13]
   38448:	f023 0302 	bic.w	r3, r3, #2
   3844c:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   3844e:	2300      	movs	r3, #0
   38450:	608b      	str	r3, [r1, #8]
}
   38452:	bd08      	pop	{r3, pc}

00038454 <z_unpend_thread>:
{
   38454:	b538      	push	{r3, r4, r5, lr}
   38456:	4604      	mov	r4, r0
   38458:	f04f 0320 	mov.w	r3, #32
   3845c:	f3ef 8511 	mrs	r5, BASEPRI
   38460:	f383 8811 	msr	BASEPRI, r3
   38464:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   38468:	f7ff ffe8 	bl	3843c <unpend_thread_no_timeout>
	__asm__ volatile(
   3846c:	f385 8811 	msr	BASEPRI, r5
   38470:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   38474:	f104 0018 	add.w	r0, r4, #24
}
   38478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3847c:	f000 b91a 	b.w	386b4 <z_abort_timeout>

00038480 <z_priq_dumb_best>:
	return list->head == list;
   38480:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38482:	4298      	cmp	r0, r3
   38484:	d004      	beq.n	38490 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   38486:	2b00      	cmp	r3, #0
   38488:	bf38      	it	cc
   3848a:	2300      	movcc	r3, #0
   3848c:	4618      	mov	r0, r3
   3848e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   38490:	2000      	movs	r0, #0
}
   38492:	4770      	bx	lr

00038494 <z_ready_thread>:
{
   38494:	b510      	push	{r4, lr}
	__asm__ volatile(
   38496:	f04f 0320 	mov.w	r3, #32
   3849a:	f3ef 8411 	mrs	r4, BASEPRI
   3849e:	f383 8811 	msr	BASEPRI, r3
   384a2:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   384a6:	f7fb fa0f 	bl	338c8 <ready_thread>
	__asm__ volatile(
   384aa:	f384 8811 	msr	BASEPRI, r4
   384ae:	f3bf 8f6f 	isb	sy
}
   384b2:	bd10      	pop	{r4, pc}

000384b4 <z_thread_timeout>:
{
   384b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   384b6:	4604      	mov	r4, r0
	__asm__ volatile(
   384b8:	f04f 0320 	mov.w	r3, #32
   384bc:	f3ef 8511 	mrs	r5, BASEPRI
   384c0:	f383 8811 	msr	BASEPRI, r3
   384c4:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   384c8:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   384cc:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   384ce:	b11b      	cbz	r3, 384d8 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   384d0:	9001      	str	r0, [sp, #4]
   384d2:	f7ff ffb3 	bl	3843c <unpend_thread_no_timeout>
   384d6:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   384d8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   384dc:	f023 0314 	bic.w	r3, r3, #20
   384e0:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   384e4:	f7fb f9f0 	bl	338c8 <ready_thread>
	__asm__ volatile(
   384e8:	f385 8811 	msr	BASEPRI, r5
   384ec:	f3bf 8f6f 	isb	sy
}
   384f0:	b003      	add	sp, #12
   384f2:	bd30      	pop	{r4, r5, pc}

000384f4 <add_to_waitq_locked>:
{
   384f4:	b538      	push	{r3, r4, r5, lr}
   384f6:	4604      	mov	r4, r0
   384f8:	460d      	mov	r5, r1
	unready_thread(thread);
   384fa:	f7fb fb8b 	bl	33c14 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   384fe:	7b63      	ldrb	r3, [r4, #13]
   38500:	f043 0302 	orr.w	r3, r3, #2
   38504:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   38506:	b1c5      	cbz	r5, 3853a <add_to_waitq_locked+0x46>
	return list->head == list;
   38508:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   3850a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3850c:	429d      	cmp	r5, r3
   3850e:	bf08      	it	eq
   38510:	2300      	moveq	r3, #0
   38512:	2b00      	cmp	r3, #0
   38514:	bf38      	it	cc
   38516:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38518:	b183      	cbz	r3, 3853c <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   3851a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   3851e:	f993 200e 	ldrsb.w	r2, [r3, #14]
   38522:	4291      	cmp	r1, r2
   38524:	db04      	blt.n	38530 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   38526:	686a      	ldr	r2, [r5, #4]
   38528:	429a      	cmp	r2, r3
   3852a:	d007      	beq.n	3853c <add_to_waitq_locked+0x48>
   3852c:	681b      	ldr	r3, [r3, #0]
   3852e:	e7f3      	b.n	38518 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   38530:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   38532:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   38536:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   38538:	605c      	str	r4, [r3, #4]
}
   3853a:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   3853c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3853e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   38540:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   38542:	686b      	ldr	r3, [r5, #4]
   38544:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38546:	606c      	str	r4, [r5, #4]
   38548:	e7f7      	b.n	3853a <add_to_waitq_locked+0x46>

0003854a <z_unpend_first_thread>:
{
   3854a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3854c:	f04f 0320 	mov.w	r3, #32
   38550:	f3ef 8211 	mrs	r2, BASEPRI
   38554:	f383 8811 	msr	BASEPRI, r3
   38558:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   3855c:	f7ff ff90 	bl	38480 <z_priq_dumb_best>
   38560:	4604      	mov	r4, r0
	__asm__ volatile(
   38562:	f382 8811 	msr	BASEPRI, r2
   38566:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   3856a:	b188      	cbz	r0, 38590 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   3856c:	f04f 0320 	mov.w	r3, #32
   38570:	f3ef 8511 	mrs	r5, BASEPRI
   38574:	f383 8811 	msr	BASEPRI, r3
   38578:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   3857c:	f7ff ff5e 	bl	3843c <unpend_thread_no_timeout>
	__asm__ volatile(
   38580:	f385 8811 	msr	BASEPRI, r5
   38584:	f3bf 8f6f 	isb	sy
   38588:	f104 0018 	add.w	r0, r4, #24
   3858c:	f000 f892 	bl	386b4 <z_abort_timeout>
}
   38590:	4620      	mov	r0, r4
   38592:	bd38      	pop	{r3, r4, r5, pc}

00038594 <z_unpend_all>:
{
   38594:	b538      	push	{r3, r4, r5, lr}
   38596:	4605      	mov	r5, r0
	int need_sched = 0;
   38598:	2000      	movs	r0, #0
	return list->head == list;
   3859a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3859c:	42a5      	cmp	r5, r4
   3859e:	d000      	beq.n	385a2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   385a0:	b904      	cbnz	r4, 385a4 <z_unpend_all+0x10>
}
   385a2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   385a4:	4620      	mov	r0, r4
   385a6:	f7ff ff55 	bl	38454 <z_unpend_thread>
		z_ready_thread(thread);
   385aa:	4620      	mov	r0, r4
   385ac:	f7ff ff72 	bl	38494 <z_ready_thread>
		need_sched = 1;
   385b0:	2001      	movs	r0, #1
   385b2:	e7f2      	b.n	3859a <z_unpend_all+0x6>

000385b4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   385b4:	b15a      	cbz	r2, 385ce <z_impl_k_sem_init+0x1a>
   385b6:	428a      	cmp	r2, r1
   385b8:	d309      	bcc.n	385ce <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   385ba:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   385be:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   385c2:	e9c0 0000 	strd	r0, r0, [r0]
   385c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   385ca:	2000      	movs	r0, #0
   385cc:	4770      	bx	lr
		return -EINVAL;
   385ce:	f06f 0015 	mvn.w	r0, #21
}
   385d2:	4770      	bx	lr

000385d4 <k_is_in_isr>:
   385d4:	f3ef 8005 	mrs	r0, IPSR
}
   385d8:	3800      	subs	r0, #0
   385da:	bf18      	it	ne
   385dc:	2001      	movne	r0, #1
   385de:	4770      	bx	lr

000385e0 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   385e0:	b108      	cbz	r0, 385e6 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   385e2:	f7ea bffd 	b.w	235e0 <arch_busy_wait>
}
   385e6:	4770      	bx	lr

000385e8 <z_impl_k_thread_name_set>:
}
   385e8:	f06f 0057 	mvn.w	r0, #87	; 0x57
   385ec:	4770      	bx	lr

000385ee <k_thread_name_get>:
}
   385ee:	2000      	movs	r0, #0
   385f0:	4770      	bx	lr

000385f2 <k_work_submit_to_queue>:
{
   385f2:	b500      	push	{lr}
   385f4:	f101 0308 	add.w	r3, r1, #8
   385f8:	e8d3 2fef 	ldaex	r2, [r3]
   385fc:	f042 0c01 	orr.w	ip, r2, #1
   38600:	e8c3 cfee 	stlex	lr, ip, [r3]
   38604:	f1be 0f00 	cmp.w	lr, #0
   38608:	d1f6      	bne.n	385f8 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   3860a:	07d3      	lsls	r3, r2, #31
   3860c:	d403      	bmi.n	38616 <k_work_submit_to_queue+0x24>
}
   3860e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   38612:	f7ff bebf 	b.w	38394 <k_queue_append>
}
   38616:	f85d fb04 	ldr.w	pc, [sp], #4

0003861a <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   3861a:	f1a0 0110 	sub.w	r1, r0, #16
   3861e:	6980      	ldr	r0, [r0, #24]
   38620:	f7ff bfe7 	b.w	385f2 <k_work_submit_to_queue>

00038624 <work_cancel>:
{
   38624:	b570      	push	{r4, r5, r6, lr}
   38626:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   38628:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3862c:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   38630:	07db      	lsls	r3, r3, #31
   38632:	d52f      	bpl.n	38694 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   38634:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   38636:	6a82      	ldr	r2, [r0, #40]	; 0x28
   38638:	6813      	ldr	r3, [r2, #0]
   3863a:	b913      	cbnz	r3, 38642 <work_cancel+0x1e>
			return -EINVAL;
   3863c:	f06f 0015 	mvn.w	r0, #21
}
   38640:	bd70      	pop	{r4, r5, r6, pc}
   38642:	429c      	cmp	r4, r3
   38644:	d121      	bne.n	3868a <work_cancel+0x66>
Z_GENLIST_REMOVE(sflist, sfnode)
   38646:	6823      	ldr	r3, [r4, #0]
   38648:	6856      	ldr	r6, [r2, #4]
   3864a:	f023 0003 	bic.w	r0, r3, #3
   3864e:	b991      	cbnz	r1, 38676 <work_cancel+0x52>
   38650:	42b4      	cmp	r4, r6
	list->head = node;
   38652:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   38654:	d100      	bne.n	38658 <work_cancel+0x34>
	list->tail = node;
   38656:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   38658:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3865a:	f003 0303 	and.w	r3, r3, #3
   3865e:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   38660:	2000      	movs	r0, #0
   38662:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   38664:	e8d5 3fef 	ldaex	r3, [r5]
   38668:	f023 0301 	bic.w	r3, r3, #1
   3866c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   38670:	2a00      	cmp	r2, #0
   38672:	d0e5      	beq.n	38640 <work_cancel+0x1c>
   38674:	e7f6      	b.n	38664 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   38676:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   38678:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   3867a:	f003 0303 	and.w	r3, r3, #3
   3867e:	ea43 0300 	orr.w	r3, r3, r0
   38682:	600b      	str	r3, [r1, #0]
	list->tail = node;
   38684:	bf08      	it	eq
   38686:	6051      	streq	r1, [r2, #4]
}
   38688:	e7e6      	b.n	38658 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3868a:	6818      	ldr	r0, [r3, #0]
   3868c:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3868e:	f020 0303 	bic.w	r3, r0, #3
   38692:	e7d2      	b.n	3863a <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   38694:	3010      	adds	r0, #16
   38696:	f000 f80d 	bl	386b4 <z_abort_timeout>
		if (err) {
   3869a:	2800      	cmp	r0, #0
   3869c:	d0e0      	beq.n	38660 <work_cancel+0x3c>
			return -EALREADY;
   3869e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   386a2:	e7cd      	b.n	38640 <work_cancel+0x1c>

000386a4 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   386a4:	2300      	movs	r3, #0
   386a6:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   386aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
   386ae:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   386b0:	6283      	str	r3, [r0, #40]	; 0x28
}
   386b2:	4770      	bx	lr

000386b4 <z_abort_timeout>:
{
   386b4:	b510      	push	{r4, lr}
	__asm__ volatile(
   386b6:	f04f 0220 	mov.w	r2, #32
   386ba:	f3ef 8411 	mrs	r4, BASEPRI
   386be:	f382 8811 	msr	BASEPRI, r2
   386c2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   386c6:	6803      	ldr	r3, [r0, #0]
   386c8:	b13b      	cbz	r3, 386da <z_abort_timeout+0x26>
			remove_timeout(to);
   386ca:	f7fb fdab 	bl	34224 <remove_timeout>
			ret = 0;
   386ce:	2000      	movs	r0, #0
	__asm__ volatile(
   386d0:	f384 8811 	msr	BASEPRI, r4
   386d4:	f3bf 8f6f 	isb	sy
}
   386d8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   386da:	f06f 0015 	mvn.w	r0, #21
   386de:	e7f7      	b.n	386d0 <z_abort_timeout+0x1c>

000386e0 <z_get_next_timeout_expiry>:
{
   386e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   386e2:	f04f 0320 	mov.w	r3, #32
   386e6:	f3ef 8411 	mrs	r4, BASEPRI
   386ea:	f383 8811 	msr	BASEPRI, r3
   386ee:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   386f2:	f7fb fdb1 	bl	34258 <next_timeout>
	__asm__ volatile(
   386f6:	f384 8811 	msr	BASEPRI, r4
   386fa:	f3bf 8f6f 	isb	sy
}
   386fe:	bd10      	pop	{r4, pc}

00038700 <z_set_timeout_expiry>:
{
   38700:	b537      	push	{r0, r1, r2, r4, r5, lr}
   38702:	4604      	mov	r4, r0
   38704:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   38706:	f04f 0320 	mov.w	r3, #32
   3870a:	f3ef 8511 	mrs	r5, BASEPRI
   3870e:	f383 8811 	msr	BASEPRI, r3
   38712:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   38716:	f7fb fd9f 	bl	34258 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3871a:	2801      	cmp	r0, #1
   3871c:	dd05      	ble.n	3872a <z_set_timeout_expiry+0x2a>
   3871e:	42a0      	cmp	r0, r4
   38720:	9901      	ldr	r1, [sp, #4]
   38722:	dd02      	ble.n	3872a <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   38724:	4620      	mov	r0, r4
   38726:	f7ec fa5f 	bl	24be8 <z_clock_set_timeout>
	__asm__ volatile(
   3872a:	f385 8811 	msr	BASEPRI, r5
   3872e:	f3bf 8f6f 	isb	sy
}
   38732:	b003      	add	sp, #12
   38734:	bd30      	pop	{r4, r5, pc}

00038736 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   38736:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   38738:	f7fb feac 	bl	34494 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3873c:	bd08      	pop	{r3, pc}

0003873e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   3873e:	f7fb bea9 	b.w	34494 <z_tick_get>

00038742 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   38742:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38744:	1c4b      	adds	r3, r1, #1
   38746:	bf08      	it	eq
   38748:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   3874c:	4604      	mov	r4, r0
   3874e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38750:	d013      	beq.n	3877a <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   38752:	ea54 0105 	orrs.w	r1, r4, r5
   38756:	d103      	bne.n	38760 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   38758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   3875c:	f7fb be9a 	b.w	34494 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   38760:	f06f 0101 	mvn.w	r1, #1
   38764:	1a0a      	subs	r2, r1, r0
   38766:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3876a:	eb61 0305 	sbc.w	r3, r1, r5
   3876e:	2a00      	cmp	r2, #0
   38770:	f173 0100 	sbcs.w	r1, r3, #0
   38774:	db02      	blt.n	3877c <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   38776:	4610      	mov	r0, r2
   38778:	4619      	mov	r1, r3
}
   3877a:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   3877c:	f7fb fe8a 	bl	34494 <z_tick_get>
   38780:	2c01      	cmp	r4, #1
   38782:	f175 0300 	sbcs.w	r3, r5, #0
   38786:	bfbc      	itt	lt
   38788:	2401      	movlt	r4, #1
   3878a:	2500      	movlt	r5, #0
   3878c:	1820      	adds	r0, r4, r0
   3878e:	eb45 0101 	adc.w	r1, r5, r1
   38792:	e7f2      	b.n	3877a <z_timeout_end_calc+0x38>

00038794 <k_timer_init>:
	timer->status = 0U;
   38794:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   38796:	e9c0 1208 	strd	r1, r2, [r0, #32]
   3879a:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   3879e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   387a2:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   387a6:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   387a8:	6343      	str	r3, [r0, #52]	; 0x34
}
   387aa:	4770      	bx	lr

000387ac <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   387ac:	b510      	push	{r4, lr}
   387ae:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   387b0:	f7ff ff80 	bl	386b4 <z_abort_timeout>

	if (inactive) {
   387b4:	b9d8      	cbnz	r0, 387ee <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   387b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   387b8:	b10b      	cbz	r3, 387be <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   387ba:	4620      	mov	r0, r4
   387bc:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   387be:	f104 0018 	add.w	r0, r4, #24
   387c2:	2100      	movs	r1, #0
   387c4:	f7ff fe04 	bl	383d0 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   387c8:	4604      	mov	r4, r0
   387ca:	b180      	cbz	r0, 387ee <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   387cc:	f7ff fe10 	bl	383f0 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   387d0:	4620      	mov	r0, r4
   387d2:	f7ff fe5f 	bl	38494 <z_ready_thread>
	__asm__ volatile(
   387d6:	f04f 0320 	mov.w	r3, #32
   387da:	f3ef 8011 	mrs	r0, BASEPRI
   387de:	f383 8811 	msr	BASEPRI, r3
   387e2:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   387e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   387ea:	f7ff be11 	b.w	38410 <z_reschedule_irqlock>
   387ee:	bd10      	pop	{r4, pc}

000387f0 <z_impl_k_timer_status_get>:
}
#include <syscalls/k_timer_stop_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_get(struct k_timer *timer)
{
   387f0:	4603      	mov	r3, r0
   387f2:	f04f 0120 	mov.w	r1, #32
   387f6:	f3ef 8211 	mrs	r2, BASEPRI
   387fa:	f381 8811 	msr	BASEPRI, r1
   387fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;

	timer->status = 0U;
   38802:	2100      	movs	r1, #0
	uint32_t result = timer->status;
   38804:	6b00      	ldr	r0, [r0, #48]	; 0x30
	timer->status = 0U;
   38806:	6319      	str	r1, [r3, #48]	; 0x30
	__asm__ volatile(
   38808:	f382 8811 	msr	BASEPRI, r2
   3880c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return result;
}
   38810:	4770      	bx	lr

00038812 <clear_event_registrations>:
	while (num_events--) {
   38812:	2314      	movs	r3, #20
{
   38814:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   38816:	2400      	movs	r4, #0
   38818:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   3881c:	4281      	cmp	r1, r0
   3881e:	d100      	bne.n	38822 <clear_event_registrations+0x10>
}
   38820:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   38822:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   38826:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   3882a:	f003 030f 	and.w	r3, r3, #15
   3882e:	2b02      	cmp	r3, #2
   38830:	d80a      	bhi.n	38848 <clear_event_registrations+0x36>
   38832:	b15b      	cbz	r3, 3884c <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   38834:	f851 3c14 	ldr.w	r3, [r1, #-20]
   38838:	b143      	cbz	r3, 3884c <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   3883a:	f851 5c10 	ldr.w	r5, [r1, #-16]
   3883e:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   38840:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   38842:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   38846:	e001      	b.n	3884c <clear_event_registrations+0x3a>
	switch (event->type) {
   38848:	2b04      	cmp	r3, #4
   3884a:	d0f3      	beq.n	38834 <clear_event_registrations+0x22>
   3884c:	f382 8811 	msr	BASEPRI, r2
   38850:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   38854:	f04f 0320 	mov.w	r3, #32
   38858:	f3ef 8211 	mrs	r2, BASEPRI
   3885c:	f383 8811 	msr	BASEPRI, r3
   38860:	f3bf 8f6f 	isb	sy
   38864:	3914      	subs	r1, #20
   38866:	e7d9      	b.n	3881c <clear_event_registrations+0xa>

00038868 <k_work_submit_to_queue>:
{
   38868:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3886a:	f101 0308 	add.w	r3, r1, #8
   3886e:	e8d3 2fef 	ldaex	r2, [r3]
   38872:	f042 0c01 	orr.w	ip, r2, #1
   38876:	e8c3 cfee 	stlex	lr, ip, [r3]
   3887a:	f1be 0f00 	cmp.w	lr, #0
   3887e:	d1f6      	bne.n	3886e <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   38880:	07d3      	lsls	r3, r2, #31
   38882:	d403      	bmi.n	3888c <k_work_submit_to_queue+0x24>
}
   38884:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   38888:	f7ff bd84 	b.w	38394 <k_queue_append>
}
   3888c:	f85d fb04 	ldr.w	pc, [sp], #4

00038890 <signal_poll_event>:
{
   38890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   38894:	6884      	ldr	r4, [r0, #8]
{
   38896:	4605      	mov	r5, r0
   38898:	460e      	mov	r6, r1
	if (poller) {
   3889a:	b144      	cbz	r4, 388ae <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   3889c:	7863      	ldrb	r3, [r4, #1]
   3889e:	2b01      	cmp	r3, #1
   388a0:	d139      	bne.n	38916 <signal_poll_event+0x86>
	if (!z_is_thread_pending(thread)) {
   388a2:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   388a6:	f013 0302 	ands.w	r3, r3, #2
   388aa:	d10a      	bne.n	388c2 <signal_poll_event+0x32>
		poller->is_polling = false;
   388ac:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   388ae:	2000      	movs	r0, #0
	event->state |= state;
   388b0:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   388b2:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   388b4:	f3c3 3104 	ubfx	r1, r3, #12, #5
   388b8:	430e      	orrs	r6, r1
   388ba:	f366 3310 	bfi	r3, r6, #12, #5
   388be:	60eb      	str	r3, [r5, #12]
	return retcode;
   388c0:	e00d      	b.n	388de <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   388c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   388c6:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   388ca:	f06f 0001 	mvn.w	r0, #1
   388ce:	428b      	cmp	r3, r1
   388d0:	bf08      	it	eq
   388d2:	4282      	cmpeq	r2, r0
   388d4:	d106      	bne.n	388e4 <signal_poll_event+0x54>
		poller->is_polling = false;
   388d6:	2300      	movs	r3, #0
		return -EAGAIN;
   388d8:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   388dc:	7023      	strb	r3, [r4, #0]
}
   388de:	b002      	add	sp, #8
   388e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   388e4:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
	z_unpend_thread(thread);
   388e8:	9001      	str	r0, [sp, #4]
   388ea:	f7ff fdb3 	bl	38454 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   388ee:	2e08      	cmp	r6, #8
   388f0:	bf0c      	ite	eq
   388f2:	f06f 0303 	mvneq.w	r3, #3
   388f6:	2300      	movne	r3, #0
   388f8:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   388fa:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   388fe:	06db      	lsls	r3, r3, #27
   38900:	d103      	bne.n	3890a <signal_poll_event+0x7a>
	if (!z_is_thread_ready(thread)) {
   38902:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   38906:	9801      	ldr	r0, [sp, #4]
   38908:	b10f      	cbz	r7, 3890e <signal_poll_event+0x7e>
		poller->is_polling = false;
   3890a:	2300      	movs	r3, #0
   3890c:	e7ce      	b.n	388ac <signal_poll_event+0x1c>
	z_ready_thread(thread);
   3890e:	f7ff fdc1 	bl	38494 <z_ready_thread>
		poller->is_polling = false;
   38912:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   38914:	e7cb      	b.n	388ae <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   38916:	2b02      	cmp	r3, #2
   38918:	d1f7      	bne.n	3890a <signal_poll_event+0x7a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   3891a:	7823      	ldrb	r3, [r4, #0]
   3891c:	2b00      	cmp	r3, #0
   3891e:	d0c6      	beq.n	388ae <signal_poll_event+0x1e>
   38920:	f854 7c04 	ldr.w	r7, [r4, #-4]
   38924:	2f00      	cmp	r7, #0
   38926:	d0f4      	beq.n	38912 <signal_poll_event+0x82>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   38928:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   3892c:	f1a4 0110 	sub.w	r1, r4, #16
   38930:	f104 0010 	add.w	r0, r4, #16
   38934:	9101      	str	r1, [sp, #4]
   38936:	f7ff febd 	bl	386b4 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   3893a:	4638      	mov	r0, r7
   3893c:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   3893e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   38942:	f7ff ff91 	bl	38868 <k_work_submit_to_queue>
		poller->is_polling = false;
   38946:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   3894a:	e7b0      	b.n	388ae <signal_poll_event+0x1e>

0003894c <add_event>:
{
   3894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3894e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   38950:	e9d0 2300 	ldrd	r2, r3, [r0]
   38954:	4290      	cmp	r0, r2
   38956:	4604      	mov	r4, r0
   38958:	460d      	mov	r5, r1
   3895a:	d106      	bne.n	3896a <add_event+0x1e>
	node->prev = list->tail;
   3895c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   3895e:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   38960:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   38962:	6863      	ldr	r3, [r4, #4]
   38964:	601d      	str	r5, [r3, #0]
	list->tail = node;
   38966:	6065      	str	r5, [r4, #4]
}
   38968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   3896a:	2b00      	cmp	r3, #0
   3896c:	d0f6      	beq.n	3895c <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   3896e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   38970:	b100      	cbz	r0, 38974 <add_event+0x28>
   38972:	3864      	subs	r0, #100	; 0x64
   38974:	b107      	cbz	r7, 38978 <add_event+0x2c>
   38976:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   38978:	4639      	mov	r1, r7
   3897a:	f7ff fd20 	bl	383be <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   3897e:	2800      	cmp	r0, #0
   38980:	d1ec      	bne.n	3895c <add_event+0x10>
	return list->head == list;
   38982:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38984:	42b4      	cmp	r4, r6
   38986:	d0e9      	beq.n	3895c <add_event+0x10>
   38988:	2e00      	cmp	r6, #0
   3898a:	bf38      	it	cc
   3898c:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3898e:	2e00      	cmp	r6, #0
   38990:	d0e4      	beq.n	3895c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   38992:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   38994:	b101      	cbz	r1, 38998 <add_event+0x4c>
   38996:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   38998:	4638      	mov	r0, r7
   3899a:	f7ff fd10 	bl	383be <z_is_t1_higher_prio_than_t2>
   3899e:	b128      	cbz	r0, 389ac <add_event+0x60>
	node->prev = successor->prev;
   389a0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   389a2:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   389a6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   389a8:	6075      	str	r5, [r6, #4]
			return;
   389aa:	e7dd      	b.n	38968 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   389ac:	6863      	ldr	r3, [r4, #4]
   389ae:	42b3      	cmp	r3, r6
   389b0:	d0d4      	beq.n	3895c <add_event+0x10>
   389b2:	6836      	ldr	r6, [r6, #0]
   389b4:	e7eb      	b.n	3898e <add_event+0x42>

000389b6 <register_events>:
{
   389b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   389ba:	f04f 0a00 	mov.w	sl, #0
{
   389be:	460e      	mov	r6, r1
   389c0:	4614      	mov	r4, r2
   389c2:	461f      	mov	r7, r3
   389c4:	4683      	mov	fp, r0
	int events_registered = 0;
   389c6:	4655      	mov	r5, sl
	event->poller = NULL;
   389c8:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   389ca:	45b2      	cmp	sl, r6
   389cc:	db02      	blt.n	389d4 <register_events+0x1e>
}
   389ce:	4628      	mov	r0, r5
   389d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   389d4:	f04f 0320 	mov.w	r3, #32
   389d8:	f3ef 8911 	mrs	r9, BASEPRI
   389dc:	f383 8811 	msr	BASEPRI, r3
   389e0:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   389e4:	f89b 200d 	ldrb.w	r2, [fp, #13]
   389e8:	f002 020f 	and.w	r2, r2, #15
   389ec:	2a02      	cmp	r2, #2
   389ee:	d006      	beq.n	389fe <register_events+0x48>
   389f0:	2a04      	cmp	r2, #4
   389f2:	d008      	beq.n	38a06 <register_events+0x50>
   389f4:	2a01      	cmp	r2, #1
   389f6:	d120      	bne.n	38a3a <register_events+0x84>
		if (event->signal->signaled != 0U) {
   389f8:	f8db 3010 	ldr.w	r3, [fp, #16]
   389fc:	e001      	b.n	38a02 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   389fe:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   38a02:	689b      	ldr	r3, [r3, #8]
   38a04:	e002      	b.n	38a0c <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   38a06:	f8db 3010 	ldr.w	r3, [fp, #16]
   38a0a:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   38a0c:	b1ab      	cbz	r3, 38a3a <register_events+0x84>
	event->state |= state;
   38a0e:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   38a12:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   38a16:	f3c3 3104 	ubfx	r1, r3, #12, #5
   38a1a:	430a      	orrs	r2, r1
   38a1c:	f362 3310 	bfi	r3, r2, #12, #5
   38a20:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   38a24:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   38a28:	f389 8811 	msr	BASEPRI, r9
   38a2c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   38a30:	f10a 0a01 	add.w	sl, sl, #1
   38a34:	f10b 0b14 	add.w	fp, fp, #20
   38a38:	e7c7      	b.n	389ca <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   38a3a:	2f00      	cmp	r7, #0
   38a3c:	d1f4      	bne.n	38a28 <register_events+0x72>
   38a3e:	7823      	ldrb	r3, [r4, #0]
   38a40:	2b00      	cmp	r3, #0
   38a42:	d0f1      	beq.n	38a28 <register_events+0x72>
	switch (event->type) {
   38a44:	f89b 300d 	ldrb.w	r3, [fp, #13]
   38a48:	f003 030f 	and.w	r3, r3, #15
   38a4c:	2b02      	cmp	r3, #2
   38a4e:	d008      	beq.n	38a62 <register_events+0xac>
   38a50:	2b04      	cmp	r3, #4
   38a52:	d006      	beq.n	38a62 <register_events+0xac>
   38a54:	2b01      	cmp	r3, #1
   38a56:	d10b      	bne.n	38a70 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   38a58:	4622      	mov	r2, r4
   38a5a:	4659      	mov	r1, fp
   38a5c:	f8db 0010 	ldr.w	r0, [fp, #16]
   38a60:	e004      	b.n	38a6c <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   38a62:	4622      	mov	r2, r4
   38a64:	4659      	mov	r1, fp
   38a66:	f8db 0010 	ldr.w	r0, [fp, #16]
   38a6a:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   38a6c:	f7ff ff6e 	bl	3894c <add_event>
	event->poller = poller;
   38a70:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   38a74:	3501      	adds	r5, #1
   38a76:	e7d7      	b.n	38a28 <register_events+0x72>

00038a78 <z_handle_obj_poll_events>:
{
   38a78:	4603      	mov	r3, r0
	return list->head == list;
   38a7a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   38a7c:	4283      	cmp	r3, r0
   38a7e:	d008      	beq.n	38a92 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   38a80:	e9d0 3200 	ldrd	r3, r2, [r0]
   38a84:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   38a86:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   38a88:	2300      	movs	r3, #0
	node->prev = NULL;
   38a8a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   38a8e:	f7ff beff 	b.w	38890 <signal_poll_event>
}
   38a92:	4770      	bx	lr

00038a94 <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   38a94:	2208      	movs	r2, #8
{
   38a96:	b530      	push	{r4, r5, lr}
   38a98:	188a      	adds	r2, r1, r2
   38a9a:	b085      	sub	sp, #20
   38a9c:	d207      	bcs.n	38aae <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   38a9e:	2400      	movs	r4, #0
   38aa0:	2500      	movs	r5, #0
   38aa2:	a902      	add	r1, sp, #8
   38aa4:	e9cd 4500 	strd	r4, r5, [sp]
   38aa8:	f7ff fbb8 	bl	3821c <k_mem_pool_alloc>
   38aac:	b110      	cbz	r0, 38ab4 <k_mem_pool_malloc+0x20>
		return NULL;
   38aae:	2000      	movs	r0, #0
}
   38ab0:	b005      	add	sp, #20
   38ab2:	bd30      	pop	{r4, r5, pc}
   38ab4:	9a02      	ldr	r2, [sp, #8]
   38ab6:	ab02      	add	r3, sp, #8
   38ab8:	cb03      	ldmia	r3!, {r0, r1}
   38aba:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   38abc:	9802      	ldr	r0, [sp, #8]
   38abe:	6051      	str	r1, [r2, #4]
   38ac0:	3008      	adds	r0, #8
   38ac2:	e7f5      	b.n	38ab0 <k_mem_pool_malloc+0x1c>

00038ac4 <k_free>:
	if (ptr != NULL) {
   38ac4:	b110      	cbz	r0, 38acc <k_free+0x8>
		k_mem_pool_free_id(ptr);
   38ac6:	3808      	subs	r0, #8
   38ac8:	f7ff bbc1 	b.w	3824e <k_mem_pool_free_id>
}
   38acc:	4770      	bx	lr

00038ace <k_calloc>:
{
   38ace:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   38ad0:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   38ad4:	b118      	cbz	r0, 38ade <k_calloc+0x10>
   38ad6:	fbb2 f0f0 	udiv	r0, r2, r0
   38ada:	4281      	cmp	r1, r0
   38adc:	d10c      	bne.n	38af8 <k_calloc+0x2a>
	ret = k_malloc(bounds);
   38ade:	4610      	mov	r0, r2
   38ae0:	9201      	str	r2, [sp, #4]
   38ae2:	f7fb fdf7 	bl	346d4 <k_malloc>
	if (ret != NULL) {
   38ae6:	4604      	mov	r4, r0
   38ae8:	b118      	cbz	r0, 38af2 <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   38aea:	2100      	movs	r1, #0
   38aec:	9a01      	ldr	r2, [sp, #4]
   38aee:	f000 f846 	bl	38b7e <memset>
}
   38af2:	4620      	mov	r0, r4
   38af4:	b002      	add	sp, #8
   38af6:	bd10      	pop	{r4, pc}
		return NULL;
   38af8:	2400      	movs	r4, #0
   38afa:	e7fa      	b.n	38af2 <k_calloc+0x24>

00038afc <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   38afc:	4770      	bx	lr

00038afe <atoi>:
   38afe:	220a      	movs	r2, #10
   38b00:	2100      	movs	r1, #0
   38b02:	f7fc ba2f 	b.w	34f64 <strtol>

00038b06 <memchr>:
   38b06:	b2c9      	uxtb	r1, r1
   38b08:	4402      	add	r2, r0
   38b0a:	b510      	push	{r4, lr}
   38b0c:	4290      	cmp	r0, r2
   38b0e:	4603      	mov	r3, r0
   38b10:	d101      	bne.n	38b16 <memchr+0x10>
   38b12:	2300      	movs	r3, #0
   38b14:	e003      	b.n	38b1e <memchr+0x18>
   38b16:	781c      	ldrb	r4, [r3, #0]
   38b18:	3001      	adds	r0, #1
   38b1a:	428c      	cmp	r4, r1
   38b1c:	d1f6      	bne.n	38b0c <memchr+0x6>
   38b1e:	4618      	mov	r0, r3
   38b20:	bd10      	pop	{r4, pc}

00038b22 <memcmp>:
   38b22:	b530      	push	{r4, r5, lr}
   38b24:	3901      	subs	r1, #1
   38b26:	2400      	movs	r4, #0
   38b28:	42a2      	cmp	r2, r4
   38b2a:	d101      	bne.n	38b30 <memcmp+0xe>
   38b2c:	2000      	movs	r0, #0
   38b2e:	e005      	b.n	38b3c <memcmp+0x1a>
   38b30:	5d03      	ldrb	r3, [r0, r4]
   38b32:	3401      	adds	r4, #1
   38b34:	5d0d      	ldrb	r5, [r1, r4]
   38b36:	42ab      	cmp	r3, r5
   38b38:	d0f6      	beq.n	38b28 <memcmp+0x6>
   38b3a:	1b58      	subs	r0, r3, r5
   38b3c:	bd30      	pop	{r4, r5, pc}

00038b3e <memcpy>:
   38b3e:	440a      	add	r2, r1
   38b40:	1e43      	subs	r3, r0, #1
   38b42:	4291      	cmp	r1, r2
   38b44:	d100      	bne.n	38b48 <memcpy+0xa>
   38b46:	4770      	bx	lr
   38b48:	b510      	push	{r4, lr}
   38b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
   38b4e:	4291      	cmp	r1, r2
   38b50:	f803 4f01 	strb.w	r4, [r3, #1]!
   38b54:	d1f9      	bne.n	38b4a <memcpy+0xc>
   38b56:	bd10      	pop	{r4, pc}

00038b58 <__memcpy_chk>:
   38b58:	429a      	cmp	r2, r3
   38b5a:	b508      	push	{r3, lr}
   38b5c:	d901      	bls.n	38b62 <__memcpy_chk+0xa>
   38b5e:	f7ed f863 	bl	25c28 <__chk_fail>
   38b62:	4281      	cmp	r1, r0
   38b64:	d804      	bhi.n	38b70 <__memcpy_chk+0x18>
   38b66:	188b      	adds	r3, r1, r2
   38b68:	4298      	cmp	r0, r3
   38b6a:	d3f8      	bcc.n	38b5e <__memcpy_chk+0x6>
   38b6c:	4281      	cmp	r1, r0
   38b6e:	d102      	bne.n	38b76 <__memcpy_chk+0x1e>
   38b70:	1883      	adds	r3, r0, r2
   38b72:	4299      	cmp	r1, r3
   38b74:	d3f3      	bcc.n	38b5e <__memcpy_chk+0x6>
   38b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   38b7a:	f7ff bfe0 	b.w	38b3e <memcpy>

00038b7e <memset>:
   38b7e:	4402      	add	r2, r0
   38b80:	4603      	mov	r3, r0
   38b82:	4293      	cmp	r3, r2
   38b84:	d100      	bne.n	38b88 <memset+0xa>
   38b86:	4770      	bx	lr
   38b88:	f803 1b01 	strb.w	r1, [r3], #1
   38b8c:	e7f9      	b.n	38b82 <memset+0x4>

00038b8e <__cvt>:
   38b8e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   38b92:	ec55 4b10 	vmov	r4, r5, d0
   38b96:	2d00      	cmp	r5, #0
   38b98:	460e      	mov	r6, r1
   38b9a:	4619      	mov	r1, r3
   38b9c:	462b      	mov	r3, r5
   38b9e:	bfb4      	ite	lt
   38ba0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   38ba4:	2300      	movge	r3, #0
   38ba6:	4691      	mov	r9, r2
   38ba8:	bfbf      	itttt	lt
   38baa:	4622      	movlt	r2, r4
   38bac:	461d      	movlt	r5, r3
   38bae:	232d      	movlt	r3, #45	; 0x2d
   38bb0:	4614      	movlt	r4, r2
   38bb2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   38bb6:	700b      	strb	r3, [r1, #0]
   38bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   38bba:	f023 0820 	bic.w	r8, r3, #32
   38bbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   38bc2:	d005      	beq.n	38bd0 <__cvt+0x42>
   38bc4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   38bc8:	d100      	bne.n	38bcc <__cvt+0x3e>
   38bca:	3601      	adds	r6, #1
   38bcc:	2102      	movs	r1, #2
   38bce:	e000      	b.n	38bd2 <__cvt+0x44>
   38bd0:	2103      	movs	r1, #3
   38bd2:	ab03      	add	r3, sp, #12
   38bd4:	4632      	mov	r2, r6
   38bd6:	9301      	str	r3, [sp, #4]
   38bd8:	ab02      	add	r3, sp, #8
   38bda:	ec45 4b10 	vmov	d0, r4, r5
   38bde:	9300      	str	r3, [sp, #0]
   38be0:	4653      	mov	r3, sl
   38be2:	f7e4 fa4d 	bl	1d080 <_dtoa_r>
   38be6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   38bea:	4607      	mov	r7, r0
   38bec:	d102      	bne.n	38bf4 <__cvt+0x66>
   38bee:	f019 0f01 	tst.w	r9, #1
   38bf2:	d022      	beq.n	38c3a <__cvt+0xac>
   38bf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   38bf8:	eb07 0906 	add.w	r9, r7, r6
   38bfc:	d110      	bne.n	38c20 <__cvt+0x92>
   38bfe:	783b      	ldrb	r3, [r7, #0]
   38c00:	2b30      	cmp	r3, #48	; 0x30
   38c02:	d10a      	bne.n	38c1a <__cvt+0x8c>
   38c04:	2200      	movs	r2, #0
   38c06:	2300      	movs	r3, #0
   38c08:	4620      	mov	r0, r4
   38c0a:	4629      	mov	r1, r5
   38c0c:	f7e4 f9b6 	bl	1cf7c <__aeabi_dcmpeq>
   38c10:	b918      	cbnz	r0, 38c1a <__cvt+0x8c>
   38c12:	f1c6 0601 	rsb	r6, r6, #1
   38c16:	f8ca 6000 	str.w	r6, [sl]
   38c1a:	f8da 3000 	ldr.w	r3, [sl]
   38c1e:	4499      	add	r9, r3
   38c20:	2200      	movs	r2, #0
   38c22:	2300      	movs	r3, #0
   38c24:	4620      	mov	r0, r4
   38c26:	4629      	mov	r1, r5
   38c28:	f7e4 f9a8 	bl	1cf7c <__aeabi_dcmpeq>
   38c2c:	b108      	cbz	r0, 38c32 <__cvt+0xa4>
   38c2e:	f8cd 900c 	str.w	r9, [sp, #12]
   38c32:	2230      	movs	r2, #48	; 0x30
   38c34:	9b03      	ldr	r3, [sp, #12]
   38c36:	454b      	cmp	r3, r9
   38c38:	d307      	bcc.n	38c4a <__cvt+0xbc>
   38c3a:	9b03      	ldr	r3, [sp, #12]
   38c3c:	4638      	mov	r0, r7
   38c3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   38c40:	1bdb      	subs	r3, r3, r7
   38c42:	6013      	str	r3, [r2, #0]
   38c44:	b004      	add	sp, #16
   38c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   38c4a:	1c59      	adds	r1, r3, #1
   38c4c:	9103      	str	r1, [sp, #12]
   38c4e:	701a      	strb	r2, [r3, #0]
   38c50:	e7f0      	b.n	38c34 <__cvt+0xa6>

00038c52 <__exponent>:
   38c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   38c54:	2900      	cmp	r1, #0
   38c56:	4603      	mov	r3, r0
   38c58:	bfb8      	it	lt
   38c5a:	4249      	neglt	r1, r1
   38c5c:	f803 2b02 	strb.w	r2, [r3], #2
   38c60:	bfb4      	ite	lt
   38c62:	222d      	movlt	r2, #45	; 0x2d
   38c64:	222b      	movge	r2, #43	; 0x2b
   38c66:	2909      	cmp	r1, #9
   38c68:	7042      	strb	r2, [r0, #1]
   38c6a:	dd2a      	ble.n	38cc2 <__exponent+0x70>
   38c6c:	f10d 0407 	add.w	r4, sp, #7
   38c70:	270a      	movs	r7, #10
   38c72:	46a4      	mov	ip, r4
   38c74:	460a      	mov	r2, r1
   38c76:	46a6      	mov	lr, r4
   38c78:	3c01      	subs	r4, #1
   38c7a:	2a63      	cmp	r2, #99	; 0x63
   38c7c:	fb91 f6f7 	sdiv	r6, r1, r7
   38c80:	fb07 1516 	mls	r5, r7, r6, r1
   38c84:	4631      	mov	r1, r6
   38c86:	f105 0530 	add.w	r5, r5, #48	; 0x30
   38c8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
   38c8e:	dcf1      	bgt.n	38c74 <__exponent+0x22>
   38c90:	3130      	adds	r1, #48	; 0x30
   38c92:	f1ae 0502 	sub.w	r5, lr, #2
   38c96:	f804 1c01 	strb.w	r1, [r4, #-1]
   38c9a:	1c44      	adds	r4, r0, #1
   38c9c:	4629      	mov	r1, r5
   38c9e:	4561      	cmp	r1, ip
   38ca0:	d30a      	bcc.n	38cb8 <__exponent+0x66>
   38ca2:	f10d 0209 	add.w	r2, sp, #9
   38ca6:	eba2 020e 	sub.w	r2, r2, lr
   38caa:	4565      	cmp	r5, ip
   38cac:	bf88      	it	hi
   38cae:	2200      	movhi	r2, #0
   38cb0:	4413      	add	r3, r2
   38cb2:	1a18      	subs	r0, r3, r0
   38cb4:	b003      	add	sp, #12
   38cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38cb8:	f811 2b01 	ldrb.w	r2, [r1], #1
   38cbc:	f804 2f01 	strb.w	r2, [r4, #1]!
   38cc0:	e7ed      	b.n	38c9e <__exponent+0x4c>
   38cc2:	2330      	movs	r3, #48	; 0x30
   38cc4:	3130      	adds	r1, #48	; 0x30
   38cc6:	7083      	strb	r3, [r0, #2]
   38cc8:	1d03      	adds	r3, r0, #4
   38cca:	70c1      	strb	r1, [r0, #3]
   38ccc:	e7f1      	b.n	38cb2 <__exponent+0x60>

00038cce <_printf_common>:
   38cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   38cd2:	4616      	mov	r6, r2
   38cd4:	4699      	mov	r9, r3
   38cd6:	688a      	ldr	r2, [r1, #8]
   38cd8:	4607      	mov	r7, r0
   38cda:	690b      	ldr	r3, [r1, #16]
   38cdc:	460c      	mov	r4, r1
   38cde:	f8dd 8020 	ldr.w	r8, [sp, #32]
   38ce2:	4293      	cmp	r3, r2
   38ce4:	bfb8      	it	lt
   38ce6:	4613      	movlt	r3, r2
   38ce8:	6033      	str	r3, [r6, #0]
   38cea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   38cee:	b10a      	cbz	r2, 38cf4 <_printf_common+0x26>
   38cf0:	3301      	adds	r3, #1
   38cf2:	6033      	str	r3, [r6, #0]
   38cf4:	6823      	ldr	r3, [r4, #0]
   38cf6:	0699      	lsls	r1, r3, #26
   38cf8:	bf42      	ittt	mi
   38cfa:	6833      	ldrmi	r3, [r6, #0]
   38cfc:	3302      	addmi	r3, #2
   38cfe:	6033      	strmi	r3, [r6, #0]
   38d00:	6825      	ldr	r5, [r4, #0]
   38d02:	f015 0506 	ands.w	r5, r5, #6
   38d06:	d106      	bne.n	38d16 <_printf_common+0x48>
   38d08:	f104 0a19 	add.w	sl, r4, #25
   38d0c:	68e3      	ldr	r3, [r4, #12]
   38d0e:	6832      	ldr	r2, [r6, #0]
   38d10:	1a9b      	subs	r3, r3, r2
   38d12:	42ab      	cmp	r3, r5
   38d14:	dc29      	bgt.n	38d6a <_printf_common+0x9c>
   38d16:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   38d1a:	1e13      	subs	r3, r2, #0
   38d1c:	6822      	ldr	r2, [r4, #0]
   38d1e:	bf18      	it	ne
   38d20:	2301      	movne	r3, #1
   38d22:	0692      	lsls	r2, r2, #26
   38d24:	d42e      	bmi.n	38d84 <_printf_common+0xb6>
   38d26:	f104 0243 	add.w	r2, r4, #67	; 0x43
   38d2a:	4649      	mov	r1, r9
   38d2c:	4638      	mov	r0, r7
   38d2e:	47c0      	blx	r8
   38d30:	3001      	adds	r0, #1
   38d32:	d021      	beq.n	38d78 <_printf_common+0xaa>
   38d34:	6823      	ldr	r3, [r4, #0]
   38d36:	341a      	adds	r4, #26
   38d38:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   38d3c:	f003 0306 	and.w	r3, r3, #6
   38d40:	6832      	ldr	r2, [r6, #0]
   38d42:	2600      	movs	r6, #0
   38d44:	2b04      	cmp	r3, #4
   38d46:	f854 3c12 	ldr.w	r3, [r4, #-18]
   38d4a:	bf08      	it	eq
   38d4c:	1aad      	subeq	r5, r5, r2
   38d4e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   38d52:	bf14      	ite	ne
   38d54:	2500      	movne	r5, #0
   38d56:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   38d5a:	4293      	cmp	r3, r2
   38d5c:	bfc4      	itt	gt
   38d5e:	1a9b      	subgt	r3, r3, r2
   38d60:	18ed      	addgt	r5, r5, r3
   38d62:	42b5      	cmp	r5, r6
   38d64:	d11a      	bne.n	38d9c <_printf_common+0xce>
   38d66:	2000      	movs	r0, #0
   38d68:	e008      	b.n	38d7c <_printf_common+0xae>
   38d6a:	2301      	movs	r3, #1
   38d6c:	4652      	mov	r2, sl
   38d6e:	4649      	mov	r1, r9
   38d70:	4638      	mov	r0, r7
   38d72:	47c0      	blx	r8
   38d74:	3001      	adds	r0, #1
   38d76:	d103      	bne.n	38d80 <_printf_common+0xb2>
   38d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   38d80:	3501      	adds	r5, #1
   38d82:	e7c3      	b.n	38d0c <_printf_common+0x3e>
   38d84:	18e1      	adds	r1, r4, r3
   38d86:	1c5a      	adds	r2, r3, #1
   38d88:	2030      	movs	r0, #48	; 0x30
   38d8a:	3302      	adds	r3, #2
   38d8c:	4422      	add	r2, r4
   38d8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   38d92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   38d96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   38d9a:	e7c4      	b.n	38d26 <_printf_common+0x58>
   38d9c:	2301      	movs	r3, #1
   38d9e:	4622      	mov	r2, r4
   38da0:	4649      	mov	r1, r9
   38da2:	4638      	mov	r0, r7
   38da4:	47c0      	blx	r8
   38da6:	3001      	adds	r0, #1
   38da8:	d0e6      	beq.n	38d78 <_printf_common+0xaa>
   38daa:	3601      	adds	r6, #1
   38dac:	e7d9      	b.n	38d62 <_printf_common+0x94>

00038dae <__sprintf_chk>:
   38dae:	b408      	push	{r3}
   38db0:	b517      	push	{r0, r1, r2, r4, lr}
   38db2:	ab05      	add	r3, sp, #20
   38db4:	1e14      	subs	r4, r2, #0
   38db6:	f853 1b04 	ldr.w	r1, [r3], #4
   38dba:	9301      	str	r3, [sp, #4]
   38dbc:	da07      	bge.n	38dce <__sprintf_chk+0x20>
   38dbe:	461a      	mov	r2, r3
   38dc0:	f7fc f982 	bl	350c8 <vsiprintf>
   38dc4:	b003      	add	sp, #12
   38dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   38dca:	b001      	add	sp, #4
   38dcc:	4770      	bx	lr
   38dce:	460a      	mov	r2, r1
   38dd0:	4621      	mov	r1, r4
   38dd2:	f7fc f955 	bl	35080 <vsniprintf>
   38dd6:	2800      	cmp	r0, #0
   38dd8:	dbf4      	blt.n	38dc4 <__sprintf_chk+0x16>
   38dda:	42a0      	cmp	r0, r4
   38ddc:	d3f2      	bcc.n	38dc4 <__sprintf_chk+0x16>
   38dde:	f7ec ff23 	bl	25c28 <__chk_fail>

00038de2 <strchr>:
   38de2:	b2c9      	uxtb	r1, r1
   38de4:	4603      	mov	r3, r0
   38de6:	f810 2b01 	ldrb.w	r2, [r0], #1
   38dea:	b11a      	cbz	r2, 38df4 <strchr+0x12>
   38dec:	428a      	cmp	r2, r1
   38dee:	d1f9      	bne.n	38de4 <strchr+0x2>
   38df0:	4618      	mov	r0, r3
   38df2:	4770      	bx	lr
   38df4:	2900      	cmp	r1, #0
   38df6:	bf18      	it	ne
   38df8:	2300      	movne	r3, #0
   38dfa:	e7f9      	b.n	38df0 <strchr+0xe>

00038dfc <strcpy>:
   38dfc:	4603      	mov	r3, r0
   38dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
   38e02:	f803 2b01 	strb.w	r2, [r3], #1
   38e06:	2a00      	cmp	r2, #0
   38e08:	d1f9      	bne.n	38dfe <strcpy+0x2>
   38e0a:	4770      	bx	lr

00038e0c <strncmp>:
   38e0c:	b510      	push	{r4, lr}
   38e0e:	b16a      	cbz	r2, 38e2c <strncmp+0x20>
   38e10:	3901      	subs	r1, #1
   38e12:	1884      	adds	r4, r0, r2
   38e14:	f810 3b01 	ldrb.w	r3, [r0], #1
   38e18:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   38e1c:	4293      	cmp	r3, r2
   38e1e:	d103      	bne.n	38e28 <strncmp+0x1c>
   38e20:	42a0      	cmp	r0, r4
   38e22:	d001      	beq.n	38e28 <strncmp+0x1c>
   38e24:	2b00      	cmp	r3, #0
   38e26:	d1f5      	bne.n	38e14 <strncmp+0x8>
   38e28:	1a98      	subs	r0, r3, r2
   38e2a:	bd10      	pop	{r4, pc}
   38e2c:	4610      	mov	r0, r2
   38e2e:	e7fc      	b.n	38e2a <strncmp+0x1e>

00038e30 <strncpy>:
   38e30:	3901      	subs	r1, #1
   38e32:	4603      	mov	r3, r0
   38e34:	b510      	push	{r4, lr}
   38e36:	b132      	cbz	r2, 38e46 <strncpy+0x16>
   38e38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   38e3c:	3a01      	subs	r2, #1
   38e3e:	f803 4b01 	strb.w	r4, [r3], #1
   38e42:	2c00      	cmp	r4, #0
   38e44:	d1f7      	bne.n	38e36 <strncpy+0x6>
   38e46:	441a      	add	r2, r3
   38e48:	2100      	movs	r1, #0
   38e4a:	4293      	cmp	r3, r2
   38e4c:	d100      	bne.n	38e50 <strncpy+0x20>
   38e4e:	bd10      	pop	{r4, pc}
   38e50:	f803 1b01 	strb.w	r1, [r3], #1
   38e54:	e7f9      	b.n	38e4a <strncpy+0x1a>

00038e56 <__strncpy_chk>:
   38e56:	429a      	cmp	r2, r3
   38e58:	b508      	push	{r3, lr}
   38e5a:	d901      	bls.n	38e60 <__strncpy_chk+0xa>
   38e5c:	f7ec fee4 	bl	25c28 <__chk_fail>
   38e60:	4281      	cmp	r1, r0
   38e62:	d804      	bhi.n	38e6e <__strncpy_chk+0x18>
   38e64:	188b      	adds	r3, r1, r2
   38e66:	4298      	cmp	r0, r3
   38e68:	d3f8      	bcc.n	38e5c <__strncpy_chk+0x6>
   38e6a:	4281      	cmp	r1, r0
   38e6c:	d102      	bne.n	38e74 <__strncpy_chk+0x1e>
   38e6e:	1883      	adds	r3, r0, r2
   38e70:	4299      	cmp	r1, r3
   38e72:	d3f3      	bcc.n	38e5c <__strncpy_chk+0x6>
   38e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   38e78:	f7ff bfda 	b.w	38e30 <strncpy>

00038e7c <strrchr>:
   38e7c:	b538      	push	{r3, r4, r5, lr}
   38e7e:	4603      	mov	r3, r0
   38e80:	460c      	mov	r4, r1
   38e82:	b969      	cbnz	r1, 38ea0 <strrchr+0x24>
   38e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   38e88:	f7ff bfab 	b.w	38de2 <strchr>
   38e8c:	1c43      	adds	r3, r0, #1
   38e8e:	4605      	mov	r5, r0
   38e90:	4621      	mov	r1, r4
   38e92:	4618      	mov	r0, r3
   38e94:	f7ff ffa5 	bl	38de2 <strchr>
   38e98:	2800      	cmp	r0, #0
   38e9a:	d1f7      	bne.n	38e8c <strrchr+0x10>
   38e9c:	4628      	mov	r0, r5
   38e9e:	bd38      	pop	{r3, r4, r5, pc}
   38ea0:	2500      	movs	r5, #0
   38ea2:	e7f5      	b.n	38e90 <strrchr+0x14>

00038ea4 <strstr>:
   38ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   38ea6:	780c      	ldrb	r4, [r1, #0]
   38ea8:	b164      	cbz	r4, 38ec4 <strstr+0x20>
   38eaa:	4603      	mov	r3, r0
   38eac:	781a      	ldrb	r2, [r3, #0]
   38eae:	4618      	mov	r0, r3
   38eb0:	1c5e      	adds	r6, r3, #1
   38eb2:	b90a      	cbnz	r2, 38eb8 <strstr+0x14>
   38eb4:	4610      	mov	r0, r2
   38eb6:	e005      	b.n	38ec4 <strstr+0x20>
   38eb8:	4294      	cmp	r4, r2
   38eba:	d108      	bne.n	38ece <strstr+0x2a>
   38ebc:	460d      	mov	r5, r1
   38ebe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   38ec2:	b902      	cbnz	r2, 38ec6 <strstr+0x22>
   38ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38ec6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   38eca:	4297      	cmp	r7, r2
   38ecc:	d0f7      	beq.n	38ebe <strstr+0x1a>
   38ece:	4633      	mov	r3, r6
   38ed0:	e7ec      	b.n	38eac <strstr+0x8>

00038ed2 <_vsniprintf_r>:
   38ed2:	b530      	push	{r4, r5, lr}
   38ed4:	1e14      	subs	r4, r2, #0
   38ed6:	4605      	mov	r5, r0
   38ed8:	b09b      	sub	sp, #108	; 0x6c
   38eda:	4618      	mov	r0, r3
   38edc:	da05      	bge.n	38eea <_vsniprintf_r+0x18>
   38ede:	238b      	movs	r3, #139	; 0x8b
   38ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38ee4:	602b      	str	r3, [r5, #0]
   38ee6:	b01b      	add	sp, #108	; 0x6c
   38ee8:	bd30      	pop	{r4, r5, pc}
   38eea:	f44f 7302 	mov.w	r3, #520	; 0x208
   38eee:	4602      	mov	r2, r0
   38ef0:	9100      	str	r1, [sp, #0]
   38ef2:	4628      	mov	r0, r5
   38ef4:	f8ad 300c 	strh.w	r3, [sp, #12]
   38ef8:	bf14      	ite	ne
   38efa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   38efe:	4623      	moveq	r3, r4
   38f00:	9104      	str	r1, [sp, #16]
   38f02:	4669      	mov	r1, sp
   38f04:	9302      	str	r3, [sp, #8]
   38f06:	9305      	str	r3, [sp, #20]
   38f08:	f64f 73ff 	movw	r3, #65535	; 0xffff
   38f0c:	f8ad 300e 	strh.w	r3, [sp, #14]
   38f10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   38f12:	f7fc f9e7 	bl	352e4 <_svfiprintf_r>
   38f16:	1c43      	adds	r3, r0, #1
   38f18:	bfbc      	itt	lt
   38f1a:	238b      	movlt	r3, #139	; 0x8b
   38f1c:	602b      	strlt	r3, [r5, #0]
   38f1e:	2c00      	cmp	r4, #0
   38f20:	d0e1      	beq.n	38ee6 <_vsniprintf_r+0x14>
   38f22:	9b00      	ldr	r3, [sp, #0]
   38f24:	2200      	movs	r2, #0
   38f26:	701a      	strb	r2, [r3, #0]
   38f28:	e7dd      	b.n	38ee6 <_vsniprintf_r+0x14>

00038f2a <quorem>:
   38f2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38f2e:	6903      	ldr	r3, [r0, #16]
   38f30:	4607      	mov	r7, r0
   38f32:	690c      	ldr	r4, [r1, #16]
   38f34:	42a3      	cmp	r3, r4
   38f36:	f2c0 8085 	blt.w	39044 <quorem+0x11a>
   38f3a:	3c01      	subs	r4, #1
   38f3c:	f100 0514 	add.w	r5, r0, #20
   38f40:	f101 0814 	add.w	r8, r1, #20
   38f44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   38f48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   38f4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   38f50:	9301      	str	r3, [sp, #4]
   38f52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   38f56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   38f5a:	3301      	adds	r3, #1
   38f5c:	429a      	cmp	r2, r3
   38f5e:	fbb2 f6f3 	udiv	r6, r2, r3
   38f62:	d333      	bcc.n	38fcc <quorem+0xa2>
   38f64:	f04f 0e00 	mov.w	lr, #0
   38f68:	4640      	mov	r0, r8
   38f6a:	46ac      	mov	ip, r5
   38f6c:	46f2      	mov	sl, lr
   38f6e:	f850 2b04 	ldr.w	r2, [r0], #4
   38f72:	b293      	uxth	r3, r2
   38f74:	4581      	cmp	r9, r0
   38f76:	ea4f 4212 	mov.w	r2, r2, lsr #16
   38f7a:	fb06 e303 	mla	r3, r6, r3, lr
   38f7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   38f82:	b29b      	uxth	r3, r3
   38f84:	fb06 e202 	mla	r2, r6, r2, lr
   38f88:	ebaa 0303 	sub.w	r3, sl, r3
   38f8c:	f8dc a000 	ldr.w	sl, [ip]
   38f90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   38f94:	fa1f fa8a 	uxth.w	sl, sl
   38f98:	4453      	add	r3, sl
   38f9a:	fa1f fa82 	uxth.w	sl, r2
   38f9e:	f8dc 2000 	ldr.w	r2, [ip]
   38fa2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   38fa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
   38faa:	b29b      	uxth	r3, r3
   38fac:	ea4f 4a22 	mov.w	sl, r2, asr #16
   38fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   38fb4:	f84c 3b04 	str.w	r3, [ip], #4
   38fb8:	d2d9      	bcs.n	38f6e <quorem+0x44>
   38fba:	f855 300b 	ldr.w	r3, [r5, fp]
   38fbe:	b92b      	cbnz	r3, 38fcc <quorem+0xa2>
   38fc0:	9b01      	ldr	r3, [sp, #4]
   38fc2:	3b04      	subs	r3, #4
   38fc4:	429d      	cmp	r5, r3
   38fc6:	461a      	mov	r2, r3
   38fc8:	d330      	bcc.n	3902c <quorem+0x102>
   38fca:	613c      	str	r4, [r7, #16]
   38fcc:	4638      	mov	r0, r7
   38fce:	f000 fa18 	bl	39402 <__mcmp>
   38fd2:	2800      	cmp	r0, #0
   38fd4:	db26      	blt.n	39024 <quorem+0xfa>
   38fd6:	3601      	adds	r6, #1
   38fd8:	4628      	mov	r0, r5
   38fda:	f04f 0c00 	mov.w	ip, #0
   38fde:	f858 1b04 	ldr.w	r1, [r8], #4
   38fe2:	f8d0 e000 	ldr.w	lr, [r0]
   38fe6:	b28b      	uxth	r3, r1
   38fe8:	45c1      	cmp	r9, r8
   38fea:	fa1f f28e 	uxth.w	r2, lr
   38fee:	ebac 0303 	sub.w	r3, ip, r3
   38ff2:	4413      	add	r3, r2
   38ff4:	ea4f 4211 	mov.w	r2, r1, lsr #16
   38ff8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   38ffc:	eb02 4223 	add.w	r2, r2, r3, asr #16
   39000:	b29b      	uxth	r3, r3
   39002:	ea4f 4c22 	mov.w	ip, r2, asr #16
   39006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3900a:	f840 3b04 	str.w	r3, [r0], #4
   3900e:	d2e6      	bcs.n	38fde <quorem+0xb4>
   39010:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   39014:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   39018:	b922      	cbnz	r2, 39024 <quorem+0xfa>
   3901a:	3b04      	subs	r3, #4
   3901c:	429d      	cmp	r5, r3
   3901e:	461a      	mov	r2, r3
   39020:	d30a      	bcc.n	39038 <quorem+0x10e>
   39022:	613c      	str	r4, [r7, #16]
   39024:	4630      	mov	r0, r6
   39026:	b003      	add	sp, #12
   39028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3902c:	6812      	ldr	r2, [r2, #0]
   3902e:	3b04      	subs	r3, #4
   39030:	2a00      	cmp	r2, #0
   39032:	d1ca      	bne.n	38fca <quorem+0xa0>
   39034:	3c01      	subs	r4, #1
   39036:	e7c5      	b.n	38fc4 <quorem+0x9a>
   39038:	6812      	ldr	r2, [r2, #0]
   3903a:	3b04      	subs	r3, #4
   3903c:	2a00      	cmp	r2, #0
   3903e:	d1f0      	bne.n	39022 <quorem+0xf8>
   39040:	3c01      	subs	r4, #1
   39042:	e7eb      	b.n	3901c <quorem+0xf2>
   39044:	2000      	movs	r0, #0
   39046:	e7ee      	b.n	39026 <quorem+0xfc>

00039048 <_Balloc>:
   39048:	b570      	push	{r4, r5, r6, lr}
   3904a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3904c:	4604      	mov	r4, r0
   3904e:	460d      	mov	r5, r1
   39050:	b93e      	cbnz	r6, 39062 <_Balloc+0x1a>
   39052:	2010      	movs	r0, #16
   39054:	f7fc f846 	bl	350e4 <malloc>
   39058:	6260      	str	r0, [r4, #36]	; 0x24
   3905a:	6006      	str	r6, [r0, #0]
   3905c:	60c6      	str	r6, [r0, #12]
   3905e:	e9c0 6601 	strd	r6, r6, [r0, #4]
   39062:	6a66      	ldr	r6, [r4, #36]	; 0x24
   39064:	68f3      	ldr	r3, [r6, #12]
   39066:	b183      	cbz	r3, 3908a <_Balloc+0x42>
   39068:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3906a:	68db      	ldr	r3, [r3, #12]
   3906c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   39070:	b9b8      	cbnz	r0, 390a2 <_Balloc+0x5a>
   39072:	2101      	movs	r1, #1
   39074:	4620      	mov	r0, r4
   39076:	fa01 f605 	lsl.w	r6, r1, r5
   3907a:	1d72      	adds	r2, r6, #5
   3907c:	0092      	lsls	r2, r2, #2
   3907e:	f000 faa9 	bl	395d4 <_calloc_r>
   39082:	b160      	cbz	r0, 3909e <_Balloc+0x56>
   39084:	e9c0 5601 	strd	r5, r6, [r0, #4]
   39088:	e00e      	b.n	390a8 <_Balloc+0x60>
   3908a:	2221      	movs	r2, #33	; 0x21
   3908c:	2104      	movs	r1, #4
   3908e:	4620      	mov	r0, r4
   39090:	f000 faa0 	bl	395d4 <_calloc_r>
   39094:	6a63      	ldr	r3, [r4, #36]	; 0x24
   39096:	60f0      	str	r0, [r6, #12]
   39098:	68db      	ldr	r3, [r3, #12]
   3909a:	2b00      	cmp	r3, #0
   3909c:	d1e4      	bne.n	39068 <_Balloc+0x20>
   3909e:	2000      	movs	r0, #0
   390a0:	bd70      	pop	{r4, r5, r6, pc}
   390a2:	6802      	ldr	r2, [r0, #0]
   390a4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   390a8:	2300      	movs	r3, #0
   390aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
   390ae:	e7f7      	b.n	390a0 <_Balloc+0x58>

000390b0 <_Bfree>:
   390b0:	b570      	push	{r4, r5, r6, lr}
   390b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   390b4:	4605      	mov	r5, r0
   390b6:	460c      	mov	r4, r1
   390b8:	b93e      	cbnz	r6, 390ca <_Bfree+0x1a>
   390ba:	2010      	movs	r0, #16
   390bc:	f7fc f812 	bl	350e4 <malloc>
   390c0:	6268      	str	r0, [r5, #36]	; 0x24
   390c2:	6006      	str	r6, [r0, #0]
   390c4:	60c6      	str	r6, [r0, #12]
   390c6:	e9c0 6601 	strd	r6, r6, [r0, #4]
   390ca:	b13c      	cbz	r4, 390dc <_Bfree+0x2c>
   390cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   390ce:	6862      	ldr	r2, [r4, #4]
   390d0:	68db      	ldr	r3, [r3, #12]
   390d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   390d6:	6021      	str	r1, [r4, #0]
   390d8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   390dc:	bd70      	pop	{r4, r5, r6, pc}

000390de <__multadd>:
   390de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   390e2:	4607      	mov	r7, r0
   390e4:	4698      	mov	r8, r3
   390e6:	460c      	mov	r4, r1
   390e8:	690e      	ldr	r6, [r1, #16]
   390ea:	f101 0014 	add.w	r0, r1, #20
   390ee:	2300      	movs	r3, #0
   390f0:	6805      	ldr	r5, [r0, #0]
   390f2:	3301      	adds	r3, #1
   390f4:	b2a9      	uxth	r1, r5
   390f6:	429e      	cmp	r6, r3
   390f8:	ea4f 4515 	mov.w	r5, r5, lsr #16
   390fc:	fb02 8101 	mla	r1, r2, r1, r8
   39100:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   39104:	b289      	uxth	r1, r1
   39106:	fb02 c505 	mla	r5, r2, r5, ip
   3910a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   3910e:	ea4f 4815 	mov.w	r8, r5, lsr #16
   39112:	f840 1b04 	str.w	r1, [r0], #4
   39116:	dceb      	bgt.n	390f0 <__multadd+0x12>
   39118:	f1b8 0f00 	cmp.w	r8, #0
   3911c:	d01b      	beq.n	39156 <__multadd+0x78>
   3911e:	68a3      	ldr	r3, [r4, #8]
   39120:	42b3      	cmp	r3, r6
   39122:	dc12      	bgt.n	3914a <__multadd+0x6c>
   39124:	6861      	ldr	r1, [r4, #4]
   39126:	4638      	mov	r0, r7
   39128:	3101      	adds	r1, #1
   3912a:	f7ff ff8d 	bl	39048 <_Balloc>
   3912e:	6922      	ldr	r2, [r4, #16]
   39130:	4605      	mov	r5, r0
   39132:	f104 010c 	add.w	r1, r4, #12
   39136:	3202      	adds	r2, #2
   39138:	300c      	adds	r0, #12
   3913a:	0092      	lsls	r2, r2, #2
   3913c:	f7ff fcff 	bl	38b3e <memcpy>
   39140:	4621      	mov	r1, r4
   39142:	462c      	mov	r4, r5
   39144:	4638      	mov	r0, r7
   39146:	f7ff ffb3 	bl	390b0 <_Bfree>
   3914a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   3914e:	3601      	adds	r6, #1
   39150:	f8c3 8014 	str.w	r8, [r3, #20]
   39154:	6126      	str	r6, [r4, #16]
   39156:	4620      	mov	r0, r4
   39158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003915c <__hi0bits>:
   3915c:	0c03      	lsrs	r3, r0, #16
   3915e:	041b      	lsls	r3, r3, #16
   39160:	b9d3      	cbnz	r3, 39198 <__hi0bits+0x3c>
   39162:	0400      	lsls	r0, r0, #16
   39164:	2310      	movs	r3, #16
   39166:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   3916a:	bf04      	itt	eq
   3916c:	0200      	lsleq	r0, r0, #8
   3916e:	3308      	addeq	r3, #8
   39170:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   39174:	bf04      	itt	eq
   39176:	0100      	lsleq	r0, r0, #4
   39178:	3304      	addeq	r3, #4
   3917a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   3917e:	bf04      	itt	eq
   39180:	0080      	lsleq	r0, r0, #2
   39182:	3302      	addeq	r3, #2
   39184:	2800      	cmp	r0, #0
   39186:	db05      	blt.n	39194 <__hi0bits+0x38>
   39188:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   3918c:	f103 0301 	add.w	r3, r3, #1
   39190:	bf08      	it	eq
   39192:	2320      	moveq	r3, #32
   39194:	4618      	mov	r0, r3
   39196:	4770      	bx	lr
   39198:	2300      	movs	r3, #0
   3919a:	e7e4      	b.n	39166 <__hi0bits+0xa>

0003919c <__lo0bits>:
   3919c:	6803      	ldr	r3, [r0, #0]
   3919e:	4601      	mov	r1, r0
   391a0:	f013 0207 	ands.w	r2, r3, #7
   391a4:	d00b      	beq.n	391be <__lo0bits+0x22>
   391a6:	07da      	lsls	r2, r3, #31
   391a8:	d424      	bmi.n	391f4 <__lo0bits+0x58>
   391aa:	0798      	lsls	r0, r3, #30
   391ac:	bf47      	ittee	mi
   391ae:	085b      	lsrmi	r3, r3, #1
   391b0:	2001      	movmi	r0, #1
   391b2:	089b      	lsrpl	r3, r3, #2
   391b4:	2002      	movpl	r0, #2
   391b6:	bf4c      	ite	mi
   391b8:	600b      	strmi	r3, [r1, #0]
   391ba:	600b      	strpl	r3, [r1, #0]
   391bc:	4770      	bx	lr
   391be:	b298      	uxth	r0, r3
   391c0:	b9b0      	cbnz	r0, 391f0 <__lo0bits+0x54>
   391c2:	0c1b      	lsrs	r3, r3, #16
   391c4:	2010      	movs	r0, #16
   391c6:	f013 0fff 	tst.w	r3, #255	; 0xff
   391ca:	bf04      	itt	eq
   391cc:	0a1b      	lsreq	r3, r3, #8
   391ce:	3008      	addeq	r0, #8
   391d0:	071a      	lsls	r2, r3, #28
   391d2:	bf04      	itt	eq
   391d4:	091b      	lsreq	r3, r3, #4
   391d6:	3004      	addeq	r0, #4
   391d8:	079a      	lsls	r2, r3, #30
   391da:	bf04      	itt	eq
   391dc:	089b      	lsreq	r3, r3, #2
   391de:	3002      	addeq	r0, #2
   391e0:	07da      	lsls	r2, r3, #31
   391e2:	d403      	bmi.n	391ec <__lo0bits+0x50>
   391e4:	085b      	lsrs	r3, r3, #1
   391e6:	f100 0001 	add.w	r0, r0, #1
   391ea:	d005      	beq.n	391f8 <__lo0bits+0x5c>
   391ec:	600b      	str	r3, [r1, #0]
   391ee:	4770      	bx	lr
   391f0:	4610      	mov	r0, r2
   391f2:	e7e8      	b.n	391c6 <__lo0bits+0x2a>
   391f4:	2000      	movs	r0, #0
   391f6:	4770      	bx	lr
   391f8:	2020      	movs	r0, #32
   391fa:	4770      	bx	lr

000391fc <__i2b>:
   391fc:	b510      	push	{r4, lr}
   391fe:	460c      	mov	r4, r1
   39200:	2101      	movs	r1, #1
   39202:	f7ff ff21 	bl	39048 <_Balloc>
   39206:	2201      	movs	r2, #1
   39208:	6144      	str	r4, [r0, #20]
   3920a:	6102      	str	r2, [r0, #16]
   3920c:	bd10      	pop	{r4, pc}

0003920e <__multiply>:
   3920e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39212:	4615      	mov	r5, r2
   39214:	690a      	ldr	r2, [r1, #16]
   39216:	460c      	mov	r4, r1
   39218:	b085      	sub	sp, #20
   3921a:	692b      	ldr	r3, [r5, #16]
   3921c:	429a      	cmp	r2, r3
   3921e:	bfbe      	ittt	lt
   39220:	460b      	movlt	r3, r1
   39222:	462c      	movlt	r4, r5
   39224:	461d      	movlt	r5, r3
   39226:	6927      	ldr	r7, [r4, #16]
   39228:	68a3      	ldr	r3, [r4, #8]
   3922a:	f8d5 9010 	ldr.w	r9, [r5, #16]
   3922e:	6861      	ldr	r1, [r4, #4]
   39230:	eb07 0609 	add.w	r6, r7, r9
   39234:	42b3      	cmp	r3, r6
   39236:	bfb8      	it	lt
   39238:	3101      	addlt	r1, #1
   3923a:	f7ff ff05 	bl	39048 <_Balloc>
   3923e:	f100 0114 	add.w	r1, r0, #20
   39242:	2200      	movs	r2, #0
   39244:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   39248:	460b      	mov	r3, r1
   3924a:	4543      	cmp	r3, r8
   3924c:	d31d      	bcc.n	3928a <__multiply+0x7c>
   3924e:	f104 0314 	add.w	r3, r4, #20
   39252:	f105 0214 	add.w	r2, r5, #20
   39256:	f104 0515 	add.w	r5, r4, #21
   3925a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   3925e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   39262:	9302      	str	r3, [sp, #8]
   39264:	1b3b      	subs	r3, r7, r4
   39266:	3b15      	subs	r3, #21
   39268:	f023 0303 	bic.w	r3, r3, #3
   3926c:	3304      	adds	r3, #4
   3926e:	42af      	cmp	r7, r5
   39270:	bf38      	it	cc
   39272:	2304      	movcc	r3, #4
   39274:	9301      	str	r3, [sp, #4]
   39276:	9b02      	ldr	r3, [sp, #8]
   39278:	9203      	str	r2, [sp, #12]
   3927a:	4293      	cmp	r3, r2
   3927c:	d808      	bhi.n	39290 <__multiply+0x82>
   3927e:	2e00      	cmp	r6, #0
   39280:	dc5a      	bgt.n	39338 <__multiply+0x12a>
   39282:	6106      	str	r6, [r0, #16]
   39284:	b005      	add	sp, #20
   39286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3928a:	f843 2b04 	str.w	r2, [r3], #4
   3928e:	e7dc      	b.n	3924a <__multiply+0x3c>
   39290:	f8b2 a000 	ldrh.w	sl, [r2]
   39294:	f1ba 0f00 	cmp.w	sl, #0
   39298:	d024      	beq.n	392e4 <__multiply+0xd6>
   3929a:	f104 0e14 	add.w	lr, r4, #20
   3929e:	4689      	mov	r9, r1
   392a0:	f04f 0c00 	mov.w	ip, #0
   392a4:	f85e 5b04 	ldr.w	r5, [lr], #4
   392a8:	f8d9 b000 	ldr.w	fp, [r9]
   392ac:	b2ab      	uxth	r3, r5
   392ae:	4577      	cmp	r7, lr
   392b0:	fa1f fb8b 	uxth.w	fp, fp
   392b4:	fb0a b303 	mla	r3, sl, r3, fp
   392b8:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   392bc:	f8d9 5000 	ldr.w	r5, [r9]
   392c0:	4463      	add	r3, ip
   392c2:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   392c6:	fb0a c50b 	mla	r5, sl, fp, ip
   392ca:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   392ce:	b29b      	uxth	r3, r3
   392d0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   392d4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   392d8:	f849 3b04 	str.w	r3, [r9], #4
   392dc:	d8e2      	bhi.n	392a4 <__multiply+0x96>
   392de:	9b01      	ldr	r3, [sp, #4]
   392e0:	f841 c003 	str.w	ip, [r1, r3]
   392e4:	9b03      	ldr	r3, [sp, #12]
   392e6:	3204      	adds	r2, #4
   392e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   392ec:	f1b9 0f00 	cmp.w	r9, #0
   392f0:	d020      	beq.n	39334 <__multiply+0x126>
   392f2:	680b      	ldr	r3, [r1, #0]
   392f4:	f104 0c14 	add.w	ip, r4, #20
   392f8:	468e      	mov	lr, r1
   392fa:	f04f 0a00 	mov.w	sl, #0
   392fe:	f8bc 5000 	ldrh.w	r5, [ip]
   39302:	b29b      	uxth	r3, r3
   39304:	f8be b002 	ldrh.w	fp, [lr, #2]
   39308:	fb09 b505 	mla	r5, r9, r5, fp
   3930c:	44aa      	add	sl, r5
   3930e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   39312:	f84e 3b04 	str.w	r3, [lr], #4
   39316:	f85c 3b04 	ldr.w	r3, [ip], #4
   3931a:	f8be 5000 	ldrh.w	r5, [lr]
   3931e:	0c1b      	lsrs	r3, r3, #16
   39320:	4567      	cmp	r7, ip
   39322:	fb09 5303 	mla	r3, r9, r3, r5
   39326:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   3932a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   3932e:	d8e6      	bhi.n	392fe <__multiply+0xf0>
   39330:	9d01      	ldr	r5, [sp, #4]
   39332:	514b      	str	r3, [r1, r5]
   39334:	3104      	adds	r1, #4
   39336:	e79e      	b.n	39276 <__multiply+0x68>
   39338:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   3933c:	2b00      	cmp	r3, #0
   3933e:	d1a0      	bne.n	39282 <__multiply+0x74>
   39340:	3e01      	subs	r6, #1
   39342:	e79c      	b.n	3927e <__multiply+0x70>

00039344 <__lshift>:
   39344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39348:	460c      	mov	r4, r1
   3934a:	4607      	mov	r7, r0
   3934c:	4691      	mov	r9, r2
   3934e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   39352:	6923      	ldr	r3, [r4, #16]
   39354:	6849      	ldr	r1, [r1, #4]
   39356:	eb03 1862 	add.w	r8, r3, r2, asr #5
   3935a:	68a3      	ldr	r3, [r4, #8]
   3935c:	f108 0601 	add.w	r6, r8, #1
   39360:	42b3      	cmp	r3, r6
   39362:	db3f      	blt.n	393e4 <__lshift+0xa0>
   39364:	4638      	mov	r0, r7
   39366:	f7ff fe6f 	bl	39048 <_Balloc>
   3936a:	2300      	movs	r3, #0
   3936c:	4605      	mov	r5, r0
   3936e:	f100 0114 	add.w	r1, r0, #20
   39372:	f100 0210 	add.w	r2, r0, #16
   39376:	4618      	mov	r0, r3
   39378:	4553      	cmp	r3, sl
   3937a:	db36      	blt.n	393ea <__lshift+0xa6>
   3937c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   39380:	f104 0314 	add.w	r3, r4, #20
   39384:	6920      	ldr	r0, [r4, #16]
   39386:	f019 091f 	ands.w	r9, r9, #31
   3938a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   3938e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   39392:	d02e      	beq.n	393f2 <__lshift+0xae>
   39394:	f1c9 0e20 	rsb	lr, r9, #32
   39398:	468a      	mov	sl, r1
   3939a:	2200      	movs	r2, #0
   3939c:	6818      	ldr	r0, [r3, #0]
   3939e:	fa00 f009 	lsl.w	r0, r0, r9
   393a2:	4302      	orrs	r2, r0
   393a4:	f84a 2b04 	str.w	r2, [sl], #4
   393a8:	f853 2b04 	ldr.w	r2, [r3], #4
   393ac:	459c      	cmp	ip, r3
   393ae:	fa22 f20e 	lsr.w	r2, r2, lr
   393b2:	d8f3      	bhi.n	3939c <__lshift+0x58>
   393b4:	ebac 0304 	sub.w	r3, ip, r4
   393b8:	f104 0015 	add.w	r0, r4, #21
   393bc:	3b15      	subs	r3, #21
   393be:	f023 0303 	bic.w	r3, r3, #3
   393c2:	3304      	adds	r3, #4
   393c4:	4560      	cmp	r0, ip
   393c6:	bf88      	it	hi
   393c8:	2304      	movhi	r3, #4
   393ca:	50ca      	str	r2, [r1, r3]
   393cc:	b10a      	cbz	r2, 393d2 <__lshift+0x8e>
   393ce:	f108 0602 	add.w	r6, r8, #2
   393d2:	3e01      	subs	r6, #1
   393d4:	4638      	mov	r0, r7
   393d6:	4621      	mov	r1, r4
   393d8:	612e      	str	r6, [r5, #16]
   393da:	f7ff fe69 	bl	390b0 <_Bfree>
   393de:	4628      	mov	r0, r5
   393e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   393e4:	3101      	adds	r1, #1
   393e6:	005b      	lsls	r3, r3, #1
   393e8:	e7ba      	b.n	39360 <__lshift+0x1c>
   393ea:	3301      	adds	r3, #1
   393ec:	f842 0f04 	str.w	r0, [r2, #4]!
   393f0:	e7c2      	b.n	39378 <__lshift+0x34>
   393f2:	3904      	subs	r1, #4
   393f4:	f853 2b04 	ldr.w	r2, [r3], #4
   393f8:	459c      	cmp	ip, r3
   393fa:	f841 2f04 	str.w	r2, [r1, #4]!
   393fe:	d8f9      	bhi.n	393f4 <__lshift+0xb0>
   39400:	e7e7      	b.n	393d2 <__lshift+0x8e>

00039402 <__mcmp>:
   39402:	6902      	ldr	r2, [r0, #16]
   39404:	b530      	push	{r4, r5, lr}
   39406:	690c      	ldr	r4, [r1, #16]
   39408:	1b12      	subs	r2, r2, r4
   3940a:	d10e      	bne.n	3942a <__mcmp+0x28>
   3940c:	f100 0314 	add.w	r3, r0, #20
   39410:	3114      	adds	r1, #20
   39412:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   39416:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   3941a:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   3941e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   39422:	42a5      	cmp	r5, r4
   39424:	d003      	beq.n	3942e <__mcmp+0x2c>
   39426:	d305      	bcc.n	39434 <__mcmp+0x32>
   39428:	2201      	movs	r2, #1
   3942a:	4610      	mov	r0, r2
   3942c:	bd30      	pop	{r4, r5, pc}
   3942e:	4283      	cmp	r3, r0
   39430:	d3f3      	bcc.n	3941a <__mcmp+0x18>
   39432:	e7fa      	b.n	3942a <__mcmp+0x28>
   39434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   39438:	e7f7      	b.n	3942a <__mcmp+0x28>

0003943a <__mdiff>:
   3943a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3943e:	460c      	mov	r4, r1
   39440:	4606      	mov	r6, r0
   39442:	4611      	mov	r1, r2
   39444:	4692      	mov	sl, r2
   39446:	4620      	mov	r0, r4
   39448:	f7ff ffdb 	bl	39402 <__mcmp>
   3944c:	1e05      	subs	r5, r0, #0
   3944e:	d108      	bne.n	39462 <__mdiff+0x28>
   39450:	4629      	mov	r1, r5
   39452:	4630      	mov	r0, r6
   39454:	f7ff fdf8 	bl	39048 <_Balloc>
   39458:	2301      	movs	r3, #1
   3945a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   3945e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39462:	bfa3      	ittte	ge
   39464:	4653      	movge	r3, sl
   39466:	46a2      	movge	sl, r4
   39468:	2500      	movge	r5, #0
   3946a:	2501      	movlt	r5, #1
   3946c:	bfa8      	it	ge
   3946e:	461c      	movge	r4, r3
   39470:	f8da 1004 	ldr.w	r1, [sl, #4]
   39474:	4630      	mov	r0, r6
   39476:	f7ff fde7 	bl	39048 <_Balloc>
   3947a:	f104 0914 	add.w	r9, r4, #20
   3947e:	f8da 7010 	ldr.w	r7, [sl, #16]
   39482:	f100 0814 	add.w	r8, r0, #20
   39486:	6926      	ldr	r6, [r4, #16]
   39488:	f10a 0210 	add.w	r2, sl, #16
   3948c:	60c5      	str	r5, [r0, #12]
   3948e:	f10a 0514 	add.w	r5, sl, #20
   39492:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   39496:	46c2      	mov	sl, r8
   39498:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   3949c:	f04f 0c00 	mov.w	ip, #0
   394a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   394a4:	f859 3b04 	ldr.w	r3, [r9], #4
   394a8:	fa1f f18b 	uxth.w	r1, fp
   394ac:	454e      	cmp	r6, r9
   394ae:	4461      	add	r1, ip
   394b0:	fa1f fc83 	uxth.w	ip, r3
   394b4:	ea4f 4313 	mov.w	r3, r3, lsr #16
   394b8:	eba1 010c 	sub.w	r1, r1, ip
   394bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   394c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
   394c4:	b289      	uxth	r1, r1
   394c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   394ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   394ce:	f84a 3b04 	str.w	r3, [sl], #4
   394d2:	d8e5      	bhi.n	394a0 <__mdiff+0x66>
   394d4:	1b33      	subs	r3, r6, r4
   394d6:	3415      	adds	r4, #21
   394d8:	3b15      	subs	r3, #21
   394da:	f023 0303 	bic.w	r3, r3, #3
   394de:	3304      	adds	r3, #4
   394e0:	42a6      	cmp	r6, r4
   394e2:	bf38      	it	cc
   394e4:	2304      	movcc	r3, #4
   394e6:	441d      	add	r5, r3
   394e8:	4443      	add	r3, r8
   394ea:	462c      	mov	r4, r5
   394ec:	461e      	mov	r6, r3
   394ee:	4574      	cmp	r4, lr
   394f0:	d30e      	bcc.n	39510 <__mdiff+0xd6>
   394f2:	f10e 0203 	add.w	r2, lr, #3
   394f6:	1b52      	subs	r2, r2, r5
   394f8:	3d03      	subs	r5, #3
   394fa:	f022 0203 	bic.w	r2, r2, #3
   394fe:	45ae      	cmp	lr, r5
   39500:	bf38      	it	cc
   39502:	2200      	movcc	r2, #0
   39504:	441a      	add	r2, r3
   39506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   3950a:	b18b      	cbz	r3, 39530 <__mdiff+0xf6>
   3950c:	6107      	str	r7, [r0, #16]
   3950e:	e7a6      	b.n	3945e <__mdiff+0x24>
   39510:	f854 8b04 	ldr.w	r8, [r4], #4
   39514:	fa1f f288 	uxth.w	r2, r8
   39518:	4462      	add	r2, ip
   3951a:	1411      	asrs	r1, r2, #16
   3951c:	b292      	uxth	r2, r2
   3951e:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   39522:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   39526:	ea4f 4c21 	mov.w	ip, r1, asr #16
   3952a:	f846 2b04 	str.w	r2, [r6], #4
   3952e:	e7de      	b.n	394ee <__mdiff+0xb4>
   39530:	3f01      	subs	r7, #1
   39532:	e7e8      	b.n	39506 <__mdiff+0xcc>

00039534 <__d2b>:
   39534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   39538:	ec57 6b10 	vmov	r6, r7, d0
   3953c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   39540:	4689      	mov	r9, r1
   39542:	2101      	movs	r1, #1
   39544:	4690      	mov	r8, r2
   39546:	f7ff fd7f 	bl	39048 <_Balloc>
   3954a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   3954e:	4604      	mov	r4, r0
   39550:	bb35      	cbnz	r5, 395a0 <__d2b+0x6c>
   39552:	2e00      	cmp	r6, #0
   39554:	9301      	str	r3, [sp, #4]
   39556:	d028      	beq.n	395aa <__d2b+0x76>
   39558:	4668      	mov	r0, sp
   3955a:	9600      	str	r6, [sp, #0]
   3955c:	f7ff fe1e 	bl	3919c <__lo0bits>
   39560:	9900      	ldr	r1, [sp, #0]
   39562:	b300      	cbz	r0, 395a6 <__d2b+0x72>
   39564:	9a01      	ldr	r2, [sp, #4]
   39566:	f1c0 0320 	rsb	r3, r0, #32
   3956a:	fa02 f303 	lsl.w	r3, r2, r3
   3956e:	40c2      	lsrs	r2, r0
   39570:	430b      	orrs	r3, r1
   39572:	9201      	str	r2, [sp, #4]
   39574:	6163      	str	r3, [r4, #20]
   39576:	9b01      	ldr	r3, [sp, #4]
   39578:	2b00      	cmp	r3, #0
   3957a:	61a3      	str	r3, [r4, #24]
   3957c:	bf14      	ite	ne
   3957e:	2202      	movne	r2, #2
   39580:	2201      	moveq	r2, #1
   39582:	6122      	str	r2, [r4, #16]
   39584:	b1d5      	cbz	r5, 395bc <__d2b+0x88>
   39586:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   3958a:	4405      	add	r5, r0
   3958c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   39590:	f8c9 5000 	str.w	r5, [r9]
   39594:	f8c8 0000 	str.w	r0, [r8]
   39598:	4620      	mov	r0, r4
   3959a:	b003      	add	sp, #12
   3959c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   395a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   395a4:	e7d5      	b.n	39552 <__d2b+0x1e>
   395a6:	6161      	str	r1, [r4, #20]
   395a8:	e7e5      	b.n	39576 <__d2b+0x42>
   395aa:	a801      	add	r0, sp, #4
   395ac:	f7ff fdf6 	bl	3919c <__lo0bits>
   395b0:	9b01      	ldr	r3, [sp, #4]
   395b2:	2201      	movs	r2, #1
   395b4:	3020      	adds	r0, #32
   395b6:	6163      	str	r3, [r4, #20]
   395b8:	6122      	str	r2, [r4, #16]
   395ba:	e7e3      	b.n	39584 <__d2b+0x50>
   395bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   395c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   395c4:	f8c9 0000 	str.w	r0, [r9]
   395c8:	6918      	ldr	r0, [r3, #16]
   395ca:	f7ff fdc7 	bl	3915c <__hi0bits>
   395ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   395d2:	e7df      	b.n	39594 <__d2b+0x60>

000395d4 <_calloc_r>:
   395d4:	434a      	muls	r2, r1
   395d6:	b513      	push	{r0, r1, r4, lr}
   395d8:	4611      	mov	r1, r2
   395da:	9201      	str	r2, [sp, #4]
   395dc:	f7fb fe28 	bl	35230 <_malloc_r>
   395e0:	4604      	mov	r4, r0
   395e2:	b118      	cbz	r0, 395ec <_calloc_r+0x18>
   395e4:	9a01      	ldr	r2, [sp, #4]
   395e6:	2100      	movs	r1, #0
   395e8:	f7ff fac9 	bl	38b7e <memset>
   395ec:	4620      	mov	r0, r4
   395ee:	b002      	add	sp, #8
   395f0:	bd10      	pop	{r4, pc}

000395f2 <__ssputs_r>:
   395f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   395f6:	688e      	ldr	r6, [r1, #8]
   395f8:	4682      	mov	sl, r0
   395fa:	460c      	mov	r4, r1
   395fc:	4690      	mov	r8, r2
   395fe:	429e      	cmp	r6, r3
   39600:	461f      	mov	r7, r3
   39602:	d838      	bhi.n	39676 <__ssputs_r+0x84>
   39604:	898a      	ldrh	r2, [r1, #12]
   39606:	f412 6f90 	tst.w	r2, #1152	; 0x480
   3960a:	d032      	beq.n	39672 <__ssputs_r+0x80>
   3960c:	6825      	ldr	r5, [r4, #0]
   3960e:	3301      	adds	r3, #1
   39610:	6909      	ldr	r1, [r1, #16]
   39612:	eba5 0901 	sub.w	r9, r5, r1
   39616:	6965      	ldr	r5, [r4, #20]
   39618:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3961c:	444b      	add	r3, r9
   3961e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   39622:	106d      	asrs	r5, r5, #1
   39624:	429d      	cmp	r5, r3
   39626:	bf38      	it	cc
   39628:	461d      	movcc	r5, r3
   3962a:	0553      	lsls	r3, r2, #21
   3962c:	d531      	bpl.n	39692 <__ssputs_r+0xa0>
   3962e:	4629      	mov	r1, r5
   39630:	f7fb fdfe 	bl	35230 <_malloc_r>
   39634:	4606      	mov	r6, r0
   39636:	b950      	cbnz	r0, 3964e <__ssputs_r+0x5c>
   39638:	230c      	movs	r3, #12
   3963a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3963e:	f8ca 3000 	str.w	r3, [sl]
   39642:	89a3      	ldrh	r3, [r4, #12]
   39644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   39648:	81a3      	strh	r3, [r4, #12]
   3964a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3964e:	464a      	mov	r2, r9
   39650:	6921      	ldr	r1, [r4, #16]
   39652:	f7ff fa74 	bl	38b3e <memcpy>
   39656:	89a3      	ldrh	r3, [r4, #12]
   39658:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   3965c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   39660:	81a3      	strh	r3, [r4, #12]
   39662:	6126      	str	r6, [r4, #16]
   39664:	444e      	add	r6, r9
   39666:	6165      	str	r5, [r4, #20]
   39668:	eba5 0509 	sub.w	r5, r5, r9
   3966c:	6026      	str	r6, [r4, #0]
   3966e:	463e      	mov	r6, r7
   39670:	60a5      	str	r5, [r4, #8]
   39672:	42be      	cmp	r6, r7
   39674:	d900      	bls.n	39678 <__ssputs_r+0x86>
   39676:	463e      	mov	r6, r7
   39678:	4632      	mov	r2, r6
   3967a:	4641      	mov	r1, r8
   3967c:	6820      	ldr	r0, [r4, #0]
   3967e:	f000 f825 	bl	396cc <memmove>
   39682:	68a3      	ldr	r3, [r4, #8]
   39684:	6822      	ldr	r2, [r4, #0]
   39686:	2000      	movs	r0, #0
   39688:	1b9b      	subs	r3, r3, r6
   3968a:	4432      	add	r2, r6
   3968c:	60a3      	str	r3, [r4, #8]
   3968e:	6022      	str	r2, [r4, #0]
   39690:	e7db      	b.n	3964a <__ssputs_r+0x58>
   39692:	462a      	mov	r2, r5
   39694:	f000 f834 	bl	39700 <_realloc_r>
   39698:	4606      	mov	r6, r0
   3969a:	2800      	cmp	r0, #0
   3969c:	d1e1      	bne.n	39662 <__ssputs_r+0x70>
   3969e:	6921      	ldr	r1, [r4, #16]
   396a0:	4650      	mov	r0, sl
   396a2:	f7fb fd75 	bl	35190 <_free_r>
   396a6:	e7c7      	b.n	39638 <__ssputs_r+0x46>

000396a8 <__ascii_mbtowc>:
   396a8:	b082      	sub	sp, #8
   396aa:	b901      	cbnz	r1, 396ae <__ascii_mbtowc+0x6>
   396ac:	a901      	add	r1, sp, #4
   396ae:	b142      	cbz	r2, 396c2 <__ascii_mbtowc+0x1a>
   396b0:	b14b      	cbz	r3, 396c6 <__ascii_mbtowc+0x1e>
   396b2:	7813      	ldrb	r3, [r2, #0]
   396b4:	600b      	str	r3, [r1, #0]
   396b6:	7812      	ldrb	r2, [r2, #0]
   396b8:	1e10      	subs	r0, r2, #0
   396ba:	bf18      	it	ne
   396bc:	2001      	movne	r0, #1
   396be:	b002      	add	sp, #8
   396c0:	4770      	bx	lr
   396c2:	4610      	mov	r0, r2
   396c4:	e7fb      	b.n	396be <__ascii_mbtowc+0x16>
   396c6:	f06f 0001 	mvn.w	r0, #1
   396ca:	e7f8      	b.n	396be <__ascii_mbtowc+0x16>

000396cc <memmove>:
   396cc:	4288      	cmp	r0, r1
   396ce:	b510      	push	{r4, lr}
   396d0:	eb01 0402 	add.w	r4, r1, r2
   396d4:	d902      	bls.n	396dc <memmove+0x10>
   396d6:	4284      	cmp	r4, r0
   396d8:	4623      	mov	r3, r4
   396da:	d807      	bhi.n	396ec <memmove+0x20>
   396dc:	1e43      	subs	r3, r0, #1
   396de:	42a1      	cmp	r1, r4
   396e0:	d008      	beq.n	396f4 <memmove+0x28>
   396e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   396e6:	f803 2f01 	strb.w	r2, [r3, #1]!
   396ea:	e7f8      	b.n	396de <memmove+0x12>
   396ec:	4402      	add	r2, r0
   396ee:	4601      	mov	r1, r0
   396f0:	428a      	cmp	r2, r1
   396f2:	d100      	bne.n	396f6 <memmove+0x2a>
   396f4:	bd10      	pop	{r4, pc}
   396f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   396fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   396fe:	e7f7      	b.n	396f0 <memmove+0x24>

00039700 <_realloc_r>:
   39700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39702:	4607      	mov	r7, r0
   39704:	4614      	mov	r4, r2
   39706:	460e      	mov	r6, r1
   39708:	b921      	cbnz	r1, 39714 <_realloc_r+0x14>
   3970a:	4611      	mov	r1, r2
   3970c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   39710:	f7fb bd8e 	b.w	35230 <_malloc_r>
   39714:	b922      	cbnz	r2, 39720 <_realloc_r+0x20>
   39716:	4625      	mov	r5, r4
   39718:	f7fb fd3a 	bl	35190 <_free_r>
   3971c:	4628      	mov	r0, r5
   3971e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39720:	f000 f823 	bl	3976a <_malloc_usable_size_r>
   39724:	42a0      	cmp	r0, r4
   39726:	d20f      	bcs.n	39748 <_realloc_r+0x48>
   39728:	4621      	mov	r1, r4
   3972a:	4638      	mov	r0, r7
   3972c:	f7fb fd80 	bl	35230 <_malloc_r>
   39730:	4605      	mov	r5, r0
   39732:	2800      	cmp	r0, #0
   39734:	d0f2      	beq.n	3971c <_realloc_r+0x1c>
   39736:	4631      	mov	r1, r6
   39738:	4622      	mov	r2, r4
   3973a:	f7ff fa00 	bl	38b3e <memcpy>
   3973e:	4631      	mov	r1, r6
   39740:	4638      	mov	r0, r7
   39742:	f7fb fd25 	bl	35190 <_free_r>
   39746:	e7e9      	b.n	3971c <_realloc_r+0x1c>
   39748:	4635      	mov	r5, r6
   3974a:	e7e7      	b.n	3971c <_realloc_r+0x1c>

0003974c <__ascii_wctomb>:
   3974c:	b149      	cbz	r1, 39762 <__ascii_wctomb+0x16>
   3974e:	2aff      	cmp	r2, #255	; 0xff
   39750:	bf8d      	iteet	hi
   39752:	238a      	movhi	r3, #138	; 0x8a
   39754:	2001      	movls	r0, #1
   39756:	700a      	strbls	r2, [r1, #0]
   39758:	6003      	strhi	r3, [r0, #0]
   3975a:	bf88      	it	hi
   3975c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   39760:	4770      	bx	lr
   39762:	4608      	mov	r0, r1
   39764:	4770      	bx	lr

00039766 <__retarget_lock_acquire_recursive>:
   39766:	4770      	bx	lr

00039768 <__retarget_lock_release_recursive>:
   39768:	4770      	bx	lr

0003976a <_malloc_usable_size_r>:
   3976a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3976e:	1f18      	subs	r0, r3, #4
   39770:	2b00      	cmp	r3, #0
   39772:	bfbc      	itt	lt
   39774:	580b      	ldrlt	r3, [r1, r0]
   39776:	18c0      	addlt	r0, r0, r3
   39778:	4770      	bx	lr
