
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010200 <_vector_start>:
   10200:	20001828 	.word	0x20001828
   10204:	0001234d 	.word	0x0001234d
   10208:	00015443 	.word	0x00015443
   1020c:	000123ad 	.word	0x000123ad
   10210:	000123ad 	.word	0x000123ad
   10214:	000123ad 	.word	0x000123ad
   10218:	000123ad 	.word	0x000123ad
   1021c:	000123ad 	.word	0x000123ad
	...
   1022c:	00012161 	.word	0x00012161
   10230:	000123ad 	.word	0x000123ad
   10234:	00000000 	.word	0x00000000
   10238:	00012109 	.word	0x00012109
   1023c:	00015329 	.word	0x00015329

00010240 <_irq_vector_table>:
   10240:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   10250:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   10260:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   10270:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   10280:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   10290:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   102a0:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   102b0:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   102c0:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   102d0:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   102e0:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   102f0:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   10300:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   10310:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   10320:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   10330:	0001230d 0001230d 0001230d 0001230d     .#...#...#...#..
   10340:	0001230d                                .#..

00010344 <_vector_end>:
	...

00010400 <m_firmware_info>:
   10400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10410:	00007e00 00000001 00010200 00010200     .~..............
   10420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001043c <__aeabi_uldivmod>:
   1043c:	b953      	cbnz	r3, 10454 <__aeabi_uldivmod+0x18>
   1043e:	b94a      	cbnz	r2, 10454 <__aeabi_uldivmod+0x18>
   10440:	2900      	cmp	r1, #0
   10442:	bf08      	it	eq
   10444:	2800      	cmpeq	r0, #0
   10446:	bf1c      	itt	ne
   10448:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1044c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10450:	f000 b96c 	b.w	1072c <__aeabi_idiv0>
   10454:	f1ad 0c08 	sub.w	ip, sp, #8
   10458:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1045c:	f000 f806 	bl	1046c <__udivmoddi4>
   10460:	f8dd e004 	ldr.w	lr, [sp, #4]
   10464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10468:	b004      	add	sp, #16
   1046a:	4770      	bx	lr

0001046c <__udivmoddi4>:
   1046c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10470:	9d08      	ldr	r5, [sp, #32]
   10472:	4604      	mov	r4, r0
   10474:	4688      	mov	r8, r1
   10476:	2b00      	cmp	r3, #0
   10478:	d17d      	bne.n	10576 <__udivmoddi4+0x10a>
   1047a:	428a      	cmp	r2, r1
   1047c:	4617      	mov	r7, r2
   1047e:	d93f      	bls.n	10500 <__udivmoddi4+0x94>
   10480:	fab2 f282 	clz	r2, r2
   10484:	b142      	cbz	r2, 10498 <__udivmoddi4+0x2c>
   10486:	f1c2 0020 	rsb	r0, r2, #32
   1048a:	4091      	lsls	r1, r2
   1048c:	4097      	lsls	r7, r2
   1048e:	fa24 f000 	lsr.w	r0, r4, r0
   10492:	4094      	lsls	r4, r2
   10494:	ea40 0801 	orr.w	r8, r0, r1
   10498:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1049c:	0c23      	lsrs	r3, r4, #16
   1049e:	fa1f fe87 	uxth.w	lr, r7
   104a2:	fbb8 f6fc 	udiv	r6, r8, ip
   104a6:	fb0c 8116 	mls	r1, ip, r6, r8
   104aa:	fb06 f00e 	mul.w	r0, r6, lr
   104ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   104b2:	4298      	cmp	r0, r3
   104b4:	d905      	bls.n	104c2 <__udivmoddi4+0x56>
   104b6:	18fb      	adds	r3, r7, r3
   104b8:	d202      	bcs.n	104c0 <__udivmoddi4+0x54>
   104ba:	4298      	cmp	r0, r3
   104bc:	f200 8124 	bhi.w	10708 <__udivmoddi4+0x29c>
   104c0:	3e01      	subs	r6, #1
   104c2:	1a19      	subs	r1, r3, r0
   104c4:	b2a3      	uxth	r3, r4
   104c6:	fbb1 f0fc 	udiv	r0, r1, ip
   104ca:	fb0c 1110 	mls	r1, ip, r0, r1
   104ce:	fb00 fe0e 	mul.w	lr, r0, lr
   104d2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   104d6:	45a6      	cmp	lr, r4
   104d8:	d905      	bls.n	104e6 <__udivmoddi4+0x7a>
   104da:	193c      	adds	r4, r7, r4
   104dc:	d202      	bcs.n	104e4 <__udivmoddi4+0x78>
   104de:	45a6      	cmp	lr, r4
   104e0:	f200 810f 	bhi.w	10702 <__udivmoddi4+0x296>
   104e4:	3801      	subs	r0, #1
   104e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   104ea:	eba4 040e 	sub.w	r4, r4, lr
   104ee:	2600      	movs	r6, #0
   104f0:	b11d      	cbz	r5, 104fa <__udivmoddi4+0x8e>
   104f2:	40d4      	lsrs	r4, r2
   104f4:	2300      	movs	r3, #0
   104f6:	e9c5 4300 	strd	r4, r3, [r5]
   104fa:	4631      	mov	r1, r6
   104fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10500:	b902      	cbnz	r2, 10504 <__udivmoddi4+0x98>
   10502:	deff      	udf	#255	; 0xff
   10504:	fab2 f282 	clz	r2, r2
   10508:	2a00      	cmp	r2, #0
   1050a:	d150      	bne.n	105ae <__udivmoddi4+0x142>
   1050c:	1bcb      	subs	r3, r1, r7
   1050e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10512:	fa1f f887 	uxth.w	r8, r7
   10516:	2601      	movs	r6, #1
   10518:	0c21      	lsrs	r1, r4, #16
   1051a:	fbb3 fcfe 	udiv	ip, r3, lr
   1051e:	fb0e 301c 	mls	r0, lr, ip, r3
   10522:	460b      	mov	r3, r1
   10524:	fb08 f90c 	mul.w	r9, r8, ip
   10528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1052c:	4589      	cmp	r9, r1
   1052e:	d90a      	bls.n	10546 <__udivmoddi4+0xda>
   10530:	1879      	adds	r1, r7, r1
   10532:	bf2c      	ite	cs
   10534:	2301      	movcs	r3, #1
   10536:	2300      	movcc	r3, #0
   10538:	4589      	cmp	r9, r1
   1053a:	d902      	bls.n	10542 <__udivmoddi4+0xd6>
   1053c:	2b00      	cmp	r3, #0
   1053e:	f000 80d9 	beq.w	106f4 <__udivmoddi4+0x288>
   10542:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   10546:	eba1 0109 	sub.w	r1, r1, r9
   1054a:	b2a3      	uxth	r3, r4
   1054c:	fbb1 f0fe 	udiv	r0, r1, lr
   10550:	fb0e 1110 	mls	r1, lr, r0, r1
   10554:	fb08 f800 	mul.w	r8, r8, r0
   10558:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1055c:	45a0      	cmp	r8, r4
   1055e:	d905      	bls.n	1056c <__udivmoddi4+0x100>
   10560:	193c      	adds	r4, r7, r4
   10562:	d202      	bcs.n	1056a <__udivmoddi4+0xfe>
   10564:	45a0      	cmp	r8, r4
   10566:	f200 80c9 	bhi.w	106fc <__udivmoddi4+0x290>
   1056a:	3801      	subs	r0, #1
   1056c:	eba4 0408 	sub.w	r4, r4, r8
   10570:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10574:	e7bc      	b.n	104f0 <__udivmoddi4+0x84>
   10576:	428b      	cmp	r3, r1
   10578:	d909      	bls.n	1058e <__udivmoddi4+0x122>
   1057a:	2d00      	cmp	r5, #0
   1057c:	f000 80b1 	beq.w	106e2 <__udivmoddi4+0x276>
   10580:	2600      	movs	r6, #0
   10582:	e9c5 0100 	strd	r0, r1, [r5]
   10586:	4630      	mov	r0, r6
   10588:	4631      	mov	r1, r6
   1058a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1058e:	fab3 f683 	clz	r6, r3
   10592:	2e00      	cmp	r6, #0
   10594:	d146      	bne.n	10624 <__udivmoddi4+0x1b8>
   10596:	428b      	cmp	r3, r1
   10598:	f0c0 80a6 	bcc.w	106e8 <__udivmoddi4+0x27c>
   1059c:	4282      	cmp	r2, r0
   1059e:	f240 80a3 	bls.w	106e8 <__udivmoddi4+0x27c>
   105a2:	4630      	mov	r0, r6
   105a4:	2d00      	cmp	r5, #0
   105a6:	d0a8      	beq.n	104fa <__udivmoddi4+0x8e>
   105a8:	e9c5 4800 	strd	r4, r8, [r5]
   105ac:	e7a5      	b.n	104fa <__udivmoddi4+0x8e>
   105ae:	4097      	lsls	r7, r2
   105b0:	f1c2 0320 	rsb	r3, r2, #32
   105b4:	fa01 f002 	lsl.w	r0, r1, r2
   105b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   105bc:	40d9      	lsrs	r1, r3
   105be:	fa24 f303 	lsr.w	r3, r4, r3
   105c2:	fa1f f887 	uxth.w	r8, r7
   105c6:	4094      	lsls	r4, r2
   105c8:	4303      	orrs	r3, r0
   105ca:	fbb1 f0fe 	udiv	r0, r1, lr
   105ce:	0c1e      	lsrs	r6, r3, #16
   105d0:	fb0e 1110 	mls	r1, lr, r0, r1
   105d4:	fb00 fc08 	mul.w	ip, r0, r8
   105d8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   105dc:	458c      	cmp	ip, r1
   105de:	d909      	bls.n	105f4 <__udivmoddi4+0x188>
   105e0:	1879      	adds	r1, r7, r1
   105e2:	bf2c      	ite	cs
   105e4:	2601      	movcs	r6, #1
   105e6:	2600      	movcc	r6, #0
   105e8:	458c      	cmp	ip, r1
   105ea:	d902      	bls.n	105f2 <__udivmoddi4+0x186>
   105ec:	2e00      	cmp	r6, #0
   105ee:	f000 8093 	beq.w	10718 <__udivmoddi4+0x2ac>
   105f2:	3801      	subs	r0, #1
   105f4:	eba1 010c 	sub.w	r1, r1, ip
   105f8:	b29b      	uxth	r3, r3
   105fa:	fbb1 f6fe 	udiv	r6, r1, lr
   105fe:	fb0e 1116 	mls	r1, lr, r6, r1
   10602:	fb06 fc08 	mul.w	ip, r6, r8
   10606:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1060a:	458c      	cmp	ip, r1
   1060c:	d905      	bls.n	1061a <__udivmoddi4+0x1ae>
   1060e:	1879      	adds	r1, r7, r1
   10610:	d202      	bcs.n	10618 <__udivmoddi4+0x1ac>
   10612:	458c      	cmp	ip, r1
   10614:	f200 8087 	bhi.w	10726 <__udivmoddi4+0x2ba>
   10618:	3e01      	subs	r6, #1
   1061a:	eba1 030c 	sub.w	r3, r1, ip
   1061e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   10622:	e779      	b.n	10518 <__udivmoddi4+0xac>
   10624:	f1c6 0720 	rsb	r7, r6, #32
   10628:	fa03 f406 	lsl.w	r4, r3, r6
   1062c:	fa02 fc06 	lsl.w	ip, r2, r6
   10630:	fa01 fe06 	lsl.w	lr, r1, r6
   10634:	40fa      	lsrs	r2, r7
   10636:	fa20 f807 	lsr.w	r8, r0, r7
   1063a:	40f9      	lsrs	r1, r7
   1063c:	fa00 f306 	lsl.w	r3, r0, r6
   10640:	4322      	orrs	r2, r4
   10642:	ea48 040e 	orr.w	r4, r8, lr
   10646:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1064a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   1064e:	fa1f f982 	uxth.w	r9, r2
   10652:	fbb1 faf8 	udiv	sl, r1, r8
   10656:	fb08 111a 	mls	r1, r8, sl, r1
   1065a:	fb0a f009 	mul.w	r0, sl, r9
   1065e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   10662:	4570      	cmp	r0, lr
   10664:	d90a      	bls.n	1067c <__udivmoddi4+0x210>
   10666:	eb12 0e0e 	adds.w	lr, r2, lr
   1066a:	bf2c      	ite	cs
   1066c:	2101      	movcs	r1, #1
   1066e:	2100      	movcc	r1, #0
   10670:	4570      	cmp	r0, lr
   10672:	d901      	bls.n	10678 <__udivmoddi4+0x20c>
   10674:	2900      	cmp	r1, #0
   10676:	d052      	beq.n	1071e <__udivmoddi4+0x2b2>
   10678:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1067c:	ebae 0e00 	sub.w	lr, lr, r0
   10680:	b2a4      	uxth	r4, r4
   10682:	fbbe f0f8 	udiv	r0, lr, r8
   10686:	fb08 ee10 	mls	lr, r8, r0, lr
   1068a:	fb00 f909 	mul.w	r9, r0, r9
   1068e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   10692:	45f1      	cmp	r9, lr
   10694:	d905      	bls.n	106a2 <__udivmoddi4+0x236>
   10696:	eb12 0e0e 	adds.w	lr, r2, lr
   1069a:	d201      	bcs.n	106a0 <__udivmoddi4+0x234>
   1069c:	45f1      	cmp	r9, lr
   1069e:	d838      	bhi.n	10712 <__udivmoddi4+0x2a6>
   106a0:	3801      	subs	r0, #1
   106a2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   106a6:	ebae 0e09 	sub.w	lr, lr, r9
   106aa:	fba0 890c 	umull	r8, r9, r0, ip
   106ae:	45ce      	cmp	lr, r9
   106b0:	4641      	mov	r1, r8
   106b2:	464c      	mov	r4, r9
   106b4:	d302      	bcc.n	106bc <__udivmoddi4+0x250>
   106b6:	d106      	bne.n	106c6 <__udivmoddi4+0x25a>
   106b8:	4543      	cmp	r3, r8
   106ba:	d204      	bcs.n	106c6 <__udivmoddi4+0x25a>
   106bc:	3801      	subs	r0, #1
   106be:	ebb8 010c 	subs.w	r1, r8, ip
   106c2:	eb69 0402 	sbc.w	r4, r9, r2
   106c6:	b315      	cbz	r5, 1070e <__udivmoddi4+0x2a2>
   106c8:	1a5a      	subs	r2, r3, r1
   106ca:	eb6e 0e04 	sbc.w	lr, lr, r4
   106ce:	40f2      	lsrs	r2, r6
   106d0:	fa0e f707 	lsl.w	r7, lr, r7
   106d4:	fa2e f306 	lsr.w	r3, lr, r6
   106d8:	2600      	movs	r6, #0
   106da:	4317      	orrs	r7, r2
   106dc:	e9c5 7300 	strd	r7, r3, [r5]
   106e0:	e70b      	b.n	104fa <__udivmoddi4+0x8e>
   106e2:	462e      	mov	r6, r5
   106e4:	4628      	mov	r0, r5
   106e6:	e708      	b.n	104fa <__udivmoddi4+0x8e>
   106e8:	1a84      	subs	r4, r0, r2
   106ea:	eb61 0103 	sbc.w	r1, r1, r3
   106ee:	2001      	movs	r0, #1
   106f0:	4688      	mov	r8, r1
   106f2:	e757      	b.n	105a4 <__udivmoddi4+0x138>
   106f4:	f1ac 0c02 	sub.w	ip, ip, #2
   106f8:	4439      	add	r1, r7
   106fa:	e724      	b.n	10546 <__udivmoddi4+0xda>
   106fc:	3802      	subs	r0, #2
   106fe:	443c      	add	r4, r7
   10700:	e734      	b.n	1056c <__udivmoddi4+0x100>
   10702:	3802      	subs	r0, #2
   10704:	443c      	add	r4, r7
   10706:	e6ee      	b.n	104e6 <__udivmoddi4+0x7a>
   10708:	3e02      	subs	r6, #2
   1070a:	443b      	add	r3, r7
   1070c:	e6d9      	b.n	104c2 <__udivmoddi4+0x56>
   1070e:	462e      	mov	r6, r5
   10710:	e6f3      	b.n	104fa <__udivmoddi4+0x8e>
   10712:	3802      	subs	r0, #2
   10714:	4496      	add	lr, r2
   10716:	e7c4      	b.n	106a2 <__udivmoddi4+0x236>
   10718:	3802      	subs	r0, #2
   1071a:	4439      	add	r1, r7
   1071c:	e76a      	b.n	105f4 <__udivmoddi4+0x188>
   1071e:	f1aa 0a02 	sub.w	sl, sl, #2
   10722:	4496      	add	lr, r2
   10724:	e7aa      	b.n	1067c <__udivmoddi4+0x210>
   10726:	3e02      	subs	r6, #2
   10728:	4439      	add	r1, r7
   1072a:	e776      	b.n	1061a <__udivmoddi4+0x1ae>

0001072c <__aeabi_idiv0>:
   1072c:	4770      	bx	lr
   1072e:	bf00      	nop

00010730 <__gnu_cmse_nonsecure_call>:
   10730:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
   10734:	4627      	mov	r7, r4
   10736:	46a0      	mov	r8, r4
   10738:	46a1      	mov	r9, r4
   1073a:	46a2      	mov	sl, r4
   1073c:	46a3      	mov	fp, r4
   1073e:	46a4      	mov	ip, r4
   10740:	ed2d 8b10 	vpush	{d8-d15}
   10744:	f04f 0500 	mov.w	r5, #0
   10748:	ec45 5b18 	vmov	d8, r5, r5
   1074c:	ec45 5a19 	vmov	s18, s19, r5, r5
   10750:	ec45 5a1a 	vmov	s20, s21, r5, r5
   10754:	ec45 5a1b 	vmov	s22, s23, r5, r5
   10758:	ec45 5a1c 	vmov	s24, s25, r5, r5
   1075c:	ec45 5a1d 	vmov	s26, s27, r5, r5
   10760:	ec45 5a1e 	vmov	s28, s29, r5, r5
   10764:	ec45 5a1f 	vmov	s30, s31, r5, r5
   10768:	eef1 5a10 	vmrs	r5, fpscr
   1076c:	f64f 7660 	movw	r6, #65376	; 0xff60
   10770:	f6c0 76ff 	movt	r6, #4095	; 0xfff
   10774:	4035      	ands	r5, r6
   10776:	eee1 5a10 	vmsr	fpscr, r5
   1077a:	f384 8800 	msr	CPSR_f, r4
   1077e:	4625      	mov	r5, r4
   10780:	4626      	mov	r6, r4
   10782:	47a4      	blxns	r4
   10784:	ecbd 8b10 	vpop	{d8-d15}
   10788:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0001078c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1078c:	680b      	ldr	r3, [r1, #0]
   1078e:	3301      	adds	r3, #1
   10790:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10792:	4b01      	ldr	r3, [pc, #4]	; (10798 <char_out+0xc>)
   10794:	681b      	ldr	r3, [r3, #0]
   10796:	4718      	bx	r3
   10798:	20000000 	.word	0x20000000

0001079c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1079c:	b507      	push	{r0, r1, r2, lr}
   1079e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   107a0:	2100      	movs	r1, #0
{
   107a2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   107a4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   107a6:	4803      	ldr	r0, [pc, #12]	; (107b4 <vprintk+0x18>)
   107a8:	a901      	add	r1, sp, #4
   107aa:	f000 fa65 	bl	10c78 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   107ae:	b003      	add	sp, #12
   107b0:	f85d fb04 	ldr.w	pc, [sp], #4
   107b4:	0001078d 	.word	0x0001078d

000107b8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   107b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   107bc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   107c0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   107c2:	f019 0808 	ands.w	r8, r9, #8
{
   107c6:	4693      	mov	fp, r2
	if (processing) {
   107c8:	d00e      	beq.n	107e8 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
   107ca:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   107cc:	bf0c      	ite	eq
   107ce:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   107d2:	f049 0920 	orrne.w	r9, r9, #32
   107d6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   107da:	f38b 8811 	msr	BASEPRI, fp
   107de:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   107e2:	b003      	add	sp, #12
   107e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
   107e8:	f8df a198 	ldr.w	sl, [pc, #408]	; 10984 <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   107ec:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   107f0:	2902      	cmp	r1, #2
   107f2:	d107      	bne.n	10804 <process_event+0x4c>
			evt = process_recheck(mgr);
   107f4:	4620      	mov	r0, r4
   107f6:	f004 fac0 	bl	14d7a <process_recheck>
		if (evt == EVT_NOP) {
   107fa:	2800      	cmp	r0, #0
   107fc:	d0ed      	beq.n	107da <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   107fe:	2801      	cmp	r0, #1
   10800:	8b23      	ldrh	r3, [r4, #24]
   10802:	d14d      	bne.n	108a0 <process_event+0xe8>
			res = mgr->last_res;
   10804:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10806:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   10808:	2f00      	cmp	r7, #0
   1080a:	da15      	bge.n	10838 <process_event+0x80>
		*clients = mgr->clients;
   1080c:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1080e:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   10812:	e9c4 8800 	strd	r8, r8, [r4]
   10816:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1081a:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1081c:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1081e:	8b21      	ldrh	r1, [r4, #24]
   10820:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10824:	454a      	cmp	r2, r9
   10826:	d002      	beq.n	1082e <process_event+0x76>
		if (do_monitors
   10828:	68a3      	ldr	r3, [r4, #8]
   1082a:	2b00      	cmp	r3, #0
   1082c:	d159      	bne.n	108e2 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   1082e:	b90d      	cbnz	r5, 10834 <process_event+0x7c>
		    || (transit != NULL)) {
   10830:	2e00      	cmp	r6, #0
   10832:	d071      	beq.n	10918 <process_event+0x160>
   10834:	2300      	movs	r3, #0
   10836:	e055      	b.n	108e4 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10838:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1083c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1083e:	2a01      	cmp	r2, #1
   10840:	d81f      	bhi.n	10882 <process_event+0xca>
		*clients = mgr->clients;
   10842:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   10846:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   10848:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   1084a:	b289      	uxth	r1, r1
	list->tail = NULL;
   1084c:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   10850:	d10c      	bne.n	1086c <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10852:	2d00      	cmp	r5, #0
   10854:	462b      	mov	r3, r5
   10856:	bf38      	it	cc
   10858:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1085a:	b12b      	cbz	r3, 10868 <process_event+0xb0>
				mgr->refs += 1U;
   1085c:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1085e:	681b      	ldr	r3, [r3, #0]
   10860:	3201      	adds	r2, #1
   10862:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10864:	2b00      	cmp	r3, #0
   10866:	d1f8      	bne.n	1085a <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10868:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   1086c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1086e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10870:	f004 fa83 	bl	14d7a <process_recheck>
   10874:	2800      	cmp	r0, #0
   10876:	d0d1      	beq.n	1081c <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10878:	8b23      	ldrh	r3, [r4, #24]
   1087a:	f043 0320 	orr.w	r3, r3, #32
   1087e:	8323      	strh	r3, [r4, #24]
   10880:	e7cc      	b.n	1081c <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10882:	2b04      	cmp	r3, #4
   10884:	d10a      	bne.n	1089c <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10886:	f021 0107 	bic.w	r1, r1, #7
   1088a:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   1088c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1088e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10890:	f004 fa73 	bl	14d7a <process_recheck>
   10894:	b110      	cbz	r0, 1089c <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10896:	f041 0120 	orr.w	r1, r1, #32
   1089a:	8321      	strh	r1, [r4, #24]
   1089c:	2500      	movs	r5, #0
   1089e:	e7bd      	b.n	1081c <process_event+0x64>
		} else if (evt == EVT_START) {
   108a0:	2803      	cmp	r0, #3
   108a2:	d109      	bne.n	108b8 <process_event+0x100>
			transit = mgr->transitions->start;
   108a4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108a6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   108aa:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108ac:	f043 0306 	orr.w	r3, r3, #6
}
   108b0:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   108b2:	8323      	strh	r3, [r4, #24]
		res = 0;
   108b4:	462f      	mov	r7, r5
   108b6:	e7b2      	b.n	1081e <process_event+0x66>
		} else if (evt == EVT_STOP) {
   108b8:	2804      	cmp	r0, #4
   108ba:	d106      	bne.n	108ca <process_event+0x112>
			transit = mgr->transitions->stop;
   108bc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108be:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   108c2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108c4:	f043 0304 	orr.w	r3, r3, #4
   108c8:	e7f2      	b.n	108b0 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   108ca:	2805      	cmp	r0, #5
   108cc:	d106      	bne.n	108dc <process_event+0x124>
			transit = mgr->transitions->reset;
   108ce:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108d0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   108d4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108d6:	f043 0305 	orr.w	r3, r3, #5
   108da:	e7e9      	b.n	108b0 <process_event+0xf8>
   108dc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   108de:	462e      	mov	r6, r5
   108e0:	e7e8      	b.n	108b4 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   108e2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   108e4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   108e8:	8321      	strh	r1, [r4, #24]
   108ea:	f38b 8811 	msr	BASEPRI, fp
   108ee:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   108f2:	bb03      	cbnz	r3, 10936 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   108f4:	2d00      	cmp	r5, #0
   108f6:	d134      	bne.n	10962 <process_event+0x1aa>
			if (transit != NULL) {
   108f8:	b116      	cbz	r6, 10900 <process_event+0x148>
				transit(mgr, transition_complete);
   108fa:	4651      	mov	r1, sl
   108fc:	4620      	mov	r0, r4
   108fe:	47b0      	blx	r6
	__asm__ volatile(
   10900:	f04f 0320 	mov.w	r3, #32
   10904:	f3ef 8b11 	mrs	fp, BASEPRI
   10908:	f383 8811 	msr	BASEPRI, r3
   1090c:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10910:	8b23      	ldrh	r3, [r4, #24]
   10912:	f023 0308 	bic.w	r3, r3, #8
   10916:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10918:	8b23      	ldrh	r3, [r4, #24]
   1091a:	06da      	lsls	r2, r3, #27
   1091c:	d52a      	bpl.n	10974 <process_event+0x1bc>
			evt = EVT_COMPLETE;
   1091e:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10920:	f023 0310 	bic.w	r3, r3, #16
   10924:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   10926:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   1092a:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1092e:	2900      	cmp	r1, #0
   10930:	f47f af5e 	bne.w	107f0 <process_event+0x38>
out:
   10934:	e751      	b.n	107da <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10936:	68a1      	ldr	r1, [r4, #8]
   10938:	2900      	cmp	r1, #0
   1093a:	d0db      	beq.n	108f4 <process_event+0x13c>
	return node->next;
   1093c:	680b      	ldr	r3, [r1, #0]
   1093e:	2b00      	cmp	r3, #0
   10940:	bf38      	it	cc
   10942:	2300      	movcc	r3, #0
   10944:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   10946:	4620      	mov	r0, r4
   10948:	463b      	mov	r3, r7
   1094a:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1094e:	9201      	str	r2, [sp, #4]
   10950:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10952:	9a01      	ldr	r2, [sp, #4]
   10954:	f1b9 0f00 	cmp.w	r9, #0
   10958:	d0cc      	beq.n	108f4 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1095a:	4649      	mov	r1, r9
   1095c:	f8d9 3000 	ldr.w	r3, [r9]
   10960:	e7ed      	b.n	1093e <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10962:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   10964:	463b      	mov	r3, r7
   10966:	4620      	mov	r0, r4
   10968:	9201      	str	r2, [sp, #4]
   1096a:	682d      	ldr	r5, [r5, #0]
   1096c:	f004 fa21 	bl	14db2 <notify_one>
	while (!sys_slist_is_empty(list)) {
   10970:	9a01      	ldr	r2, [sp, #4]
   10972:	e7bf      	b.n	108f4 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10974:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10978:	bf1e      	ittt	ne
   1097a:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   1097e:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10980:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   10982:	e7d0      	b.n	10926 <process_event+0x16e>
   10984:	00014ddf 	.word	0x00014ddf

00010988 <extract_conversion>:
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
	*conv = (struct conversion) {
   10988:	2200      	movs	r2, #0
{
   1098a:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
   1098c:	e9c0 2200 	strd	r2, r2, [r0]
   10990:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   10992:	784a      	ldrb	r2, [r1, #1]
{
   10994:	4603      	mov	r3, r0
	if (*sp == '%') {
   10996:	2a25      	cmp	r2, #37	; 0x25
   10998:	d033      	beq.n	10a02 <extract_conversion+0x7a>
	++sp;
   1099a:	3101      	adds	r1, #1
   1099c:	4608      	mov	r0, r1
		switch (*sp) {
   1099e:	f811 2b01 	ldrb.w	r2, [r1], #1
   109a2:	2a2b      	cmp	r2, #43	; 0x2b
   109a4:	d03d      	beq.n	10a22 <extract_conversion+0x9a>
   109a6:	d82f      	bhi.n	10a08 <extract_conversion+0x80>
   109a8:	2a20      	cmp	r2, #32
   109aa:	d03e      	beq.n	10a2a <extract_conversion+0xa2>
   109ac:	2a23      	cmp	r2, #35	; 0x23
   109ae:	d040      	beq.n	10a32 <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
   109b0:	781a      	ldrb	r2, [r3, #0]
   109b2:	f002 0144 	and.w	r1, r2, #68	; 0x44
   109b6:	2944      	cmp	r1, #68	; 0x44
   109b8:	d102      	bne.n	109c0 <extract_conversion+0x38>
		conv->flag_zero = false;
   109ba:	f36f 1286 	bfc	r2, #6, #1
   109be:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
   109c0:	7802      	ldrb	r2, [r0, #0]
   109c2:	2a2a      	cmp	r2, #42	; 0x2a
   109c4:	d14c      	bne.n	10a60 <extract_conversion+0xd8>
		conv->width_present = true;
   109c6:	8819      	ldrh	r1, [r3, #0]
   109c8:	1c42      	adds	r2, r0, #1
   109ca:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
   109ce:	8019      	strh	r1, [r3, #0]
	if (*sp != '.') {
   109d0:	7811      	ldrb	r1, [r2, #0]
   109d2:	292e      	cmp	r1, #46	; 0x2e
   109d4:	d14f      	bne.n	10a76 <extract_conversion+0xee>
	if (*sp == '*') {
   109d6:	7851      	ldrb	r1, [r2, #1]
   109d8:	292a      	cmp	r1, #42	; 0x2a
   109da:	d045      	beq.n	10a68 <extract_conversion+0xe0>
   109dc:	3201      	adds	r2, #1
	const char *sp = *str;
   109de:	4615      	mov	r5, r2
	size_t val = 0;
   109e0:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   109e2:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   109e4:	4610      	mov	r0, r2
   109e6:	f810 4b01 	ldrb.w	r4, [r0], #1
   109ea:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   109ee:	2e09      	cmp	r6, #9
   109f0:	d953      	bls.n	10a9a <extract_conversion+0x112>
	if (sp != wp) {
   109f2:	42aa      	cmp	r2, r5
		conv->prec_present = true;
   109f4:	bf1f      	itttt	ne
   109f6:	7858      	ldrbne	r0, [r3, #1]
		conv->prec_value = prec;
   109f8:	6099      	strne	r1, [r3, #8]
		conv->prec_present = true;
   109fa:	f040 0002 	orrne.w	r0, r0, #2
   109fe:	7058      	strbne	r0, [r3, #1]
		if (prec != conv->prec_value) {
   10a00:	e039      	b.n	10a76 <extract_conversion+0xee>
		conv->specifier = *sp++;
   10a02:	1c88      	adds	r0, r1, #2
   10a04:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   10a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
   10a08:	2a2d      	cmp	r2, #45	; 0x2d
   10a0a:	d005      	beq.n	10a18 <extract_conversion+0x90>
   10a0c:	2a30      	cmp	r2, #48	; 0x30
   10a0e:	d1cf      	bne.n	109b0 <extract_conversion+0x28>
			conv->flag_zero = true;
   10a10:	781a      	ldrb	r2, [r3, #0]
   10a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10a16:	e002      	b.n	10a1e <extract_conversion+0x96>
			conv->flag_dash = true;
   10a18:	781a      	ldrb	r2, [r3, #0]
   10a1a:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
   10a1e:	701a      	strb	r2, [r3, #0]
			break;
   10a20:	e7bc      	b.n	1099c <extract_conversion+0x14>
			conv->flag_plus = true;
   10a22:	781a      	ldrb	r2, [r3, #0]
   10a24:	f042 0208 	orr.w	r2, r2, #8
   10a28:	e7f9      	b.n	10a1e <extract_conversion+0x96>
			conv->flag_space = true;
   10a2a:	781a      	ldrb	r2, [r3, #0]
   10a2c:	f042 0210 	orr.w	r2, r2, #16
   10a30:	e7f5      	b.n	10a1e <extract_conversion+0x96>
			conv->flag_hash = true;
   10a32:	781a      	ldrb	r2, [r3, #0]
   10a34:	f042 0220 	orr.w	r2, r2, #32
   10a38:	e7f1      	b.n	10a1e <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
   10a3a:	4622      	mov	r2, r4
   10a3c:	fb07 5101 	mla	r1, r7, r1, r5
   10a40:	3930      	subs	r1, #48	; 0x30
   10a42:	4614      	mov	r4, r2
   10a44:	f814 5b01 	ldrb.w	r5, [r4], #1
   10a48:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10a4c:	2e09      	cmp	r6, #9
   10a4e:	d9f4      	bls.n	10a3a <extract_conversion+0xb2>
	if (sp != wp) {
   10a50:	4290      	cmp	r0, r2
		conv->width_present = true;
   10a52:	bf1f      	itttt	ne
   10a54:	7818      	ldrbne	r0, [r3, #0]
		conv->width_value = width;
   10a56:	6059      	strne	r1, [r3, #4]
		conv->width_present = true;
   10a58:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
   10a5c:	7018      	strbne	r0, [r3, #0]
		if (width != conv->width_value) {
   10a5e:	e7b7      	b.n	109d0 <extract_conversion+0x48>
   10a60:	4602      	mov	r2, r0
	size_t val = 0;
   10a62:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   10a64:	270a      	movs	r7, #10
   10a66:	e7ec      	b.n	10a42 <extract_conversion+0xba>
		conv->prec_present = true;
   10a68:	7859      	ldrb	r1, [r3, #1]
		return ++sp;
   10a6a:	3202      	adds	r2, #2
		conv->prec_present = true;
   10a6c:	f021 0106 	bic.w	r1, r1, #6
   10a70:	f041 0106 	orr.w	r1, r1, #6
   10a74:	7059      	strb	r1, [r3, #1]
	switch (*sp) {
   10a76:	4611      	mov	r1, r2
   10a78:	f811 0b01 	ldrb.w	r0, [r1], #1
   10a7c:	286c      	cmp	r0, #108	; 0x6c
   10a7e:	d054      	beq.n	10b2a <extract_conversion+0x1a2>
   10a80:	d810      	bhi.n	10aa4 <extract_conversion+0x11c>
   10a82:	2868      	cmp	r0, #104	; 0x68
   10a84:	d016      	beq.n	10ab4 <extract_conversion+0x12c>
   10a86:	286a      	cmp	r0, #106	; 0x6a
   10a88:	d058      	beq.n	10b3c <extract_conversion+0x1b4>
   10a8a:	284c      	cmp	r0, #76	; 0x4c
   10a8c:	d05c      	beq.n	10b48 <extract_conversion+0x1c0>
		conv->length_mod = LENGTH_NONE;
   10a8e:	7859      	ldrb	r1, [r3, #1]
   10a90:	f36f 01c6 	bfc	r1, #3, #4
   10a94:	7059      	strb	r1, [r3, #1]
		break;
   10a96:	4611      	mov	r1, r2
   10a98:	e015      	b.n	10ac6 <extract_conversion+0x13e>
		val = 10U * val + *sp++ - '0';
   10a9a:	fb07 4101 	mla	r1, r7, r1, r4
   10a9e:	4602      	mov	r2, r0
   10aa0:	3930      	subs	r1, #48	; 0x30
   10aa2:	e79f      	b.n	109e4 <extract_conversion+0x5c>
	switch (*sp) {
   10aa4:	2874      	cmp	r0, #116	; 0x74
   10aa6:	785c      	ldrb	r4, [r3, #1]
   10aa8:	d04b      	beq.n	10b42 <extract_conversion+0x1ba>
   10aaa:	287a      	cmp	r0, #122	; 0x7a
   10aac:	d1ef      	bne.n	10a8e <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
   10aae:	4622      	mov	r2, r4
   10ab0:	2006      	movs	r0, #6
   10ab2:	e036      	b.n	10b22 <extract_conversion+0x19a>
		if (*++sp == 'h') {
   10ab4:	7850      	ldrb	r0, [r2, #1]
   10ab6:	785c      	ldrb	r4, [r3, #1]
   10ab8:	2868      	cmp	r0, #104	; 0x68
   10aba:	d130      	bne.n	10b1e <extract_conversion+0x196>
			conv->length_mod = LENGTH_HH;
   10abc:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   10abe:	f361 04c6 	bfi	r4, r1, #3, #4
   10ac2:	705c      	strb	r4, [r3, #1]
			++sp;
   10ac4:	1c91      	adds	r1, r2, #2
	conv->specifier = *sp++;
   10ac6:	4608      	mov	r0, r1
   10ac8:	f810 4b01 	ldrb.w	r4, [r0], #1
	switch (conv->specifier) {
   10acc:	2c78      	cmp	r4, #120	; 0x78
	conv->specifier = *sp++;
   10ace:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
   10ad0:	f200 80b1 	bhi.w	10c36 <extract_conversion+0x2ae>
   10ad4:	2c57      	cmp	r4, #87	; 0x57
   10ad6:	d842      	bhi.n	10b5e <extract_conversion+0x1d6>
   10ad8:	2c41      	cmp	r4, #65	; 0x41
   10ada:	d004      	beq.n	10ae6 <extract_conversion+0x15e>
   10adc:	f1a4 0245 	sub.w	r2, r4, #69	; 0x45
   10ae0:	2a02      	cmp	r2, #2
   10ae2:	f200 80a8 	bhi.w	10c36 <extract_conversion+0x2ae>
		conv->specifier_cat = SPECIFIER_FP;
   10ae6:	2104      	movs	r1, #4
   10ae8:	789a      	ldrb	r2, [r3, #2]
			|| (conv->specifier == 'A');
   10aea:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   10aee:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   10af2:	f361 0202 	bfi	r2, r1, #0, #3
			|| (conv->specifier == 'A');
   10af6:	426c      	negs	r4, r5
		conv->specifier_a = (conv->specifier == 'a')
   10af8:	7859      	ldrb	r1, [r3, #1]
			|| (conv->specifier == 'A');
   10afa:	416c      	adcs	r4, r5
		conv->specifier_a = (conv->specifier == 'a')
   10afc:	f364 11c7 	bfi	r1, r4, #7, #1
		if (conv->specifier_a
   10b00:	060e      	lsls	r6, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
   10b02:	709a      	strb	r2, [r3, #2]
		conv->specifier_a = (conv->specifier == 'a')
   10b04:	7059      	strb	r1, [r3, #1]
		if (conv->specifier_a
   10b06:	b2ca      	uxtb	r2, r1
   10b08:	f100 80b3 	bmi.w	10c72 <extract_conversion+0x2ea>
		if (conv->length_mod == LENGTH_L) {
   10b0c:	f002 0178 	and.w	r1, r2, #120	; 0x78
   10b10:	2918      	cmp	r1, #24
   10b12:	f040 808d 	bne.w	10c30 <extract_conversion+0x2a8>
			conv->length_mod = LENGTH_NONE;
   10b16:	f36f 02c6 	bfc	r2, #3, #4
   10b1a:	705a      	strb	r2, [r3, #1]
   10b1c:	e078      	b.n	10c10 <extract_conversion+0x288>
			conv->length_mod = LENGTH_H;
   10b1e:	4622      	mov	r2, r4
   10b20:	2002      	movs	r0, #2
			conv->length_mod = LENGTH_L;
   10b22:	f360 02c6 	bfi	r2, r0, #3, #4
   10b26:	705a      	strb	r2, [r3, #1]
   10b28:	e7cd      	b.n	10ac6 <extract_conversion+0x13e>
		if (*++sp == 'l') {
   10b2a:	7850      	ldrb	r0, [r2, #1]
   10b2c:	785c      	ldrb	r4, [r3, #1]
   10b2e:	286c      	cmp	r0, #108	; 0x6c
   10b30:	d101      	bne.n	10b36 <extract_conversion+0x1ae>
			conv->length_mod = LENGTH_LL;
   10b32:	2104      	movs	r1, #4
   10b34:	e7c3      	b.n	10abe <extract_conversion+0x136>
			conv->length_mod = LENGTH_L;
   10b36:	4622      	mov	r2, r4
   10b38:	2003      	movs	r0, #3
   10b3a:	e7f2      	b.n	10b22 <extract_conversion+0x19a>
		conv->length_mod = LENGTH_J;
   10b3c:	2005      	movs	r0, #5
   10b3e:	785a      	ldrb	r2, [r3, #1]
   10b40:	e7ef      	b.n	10b22 <extract_conversion+0x19a>
		conv->length_mod = LENGTH_T;
   10b42:	4622      	mov	r2, r4
   10b44:	2007      	movs	r0, #7
   10b46:	e7ec      	b.n	10b22 <extract_conversion+0x19a>
		conv->unsupported = true;
   10b48:	881a      	ldrh	r2, [r3, #0]
   10b4a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   10b4e:	f022 0202 	bic.w	r2, r2, #2
   10b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   10b56:	f042 0202 	orr.w	r2, r2, #2
   10b5a:	801a      	strh	r2, [r3, #0]
		break;
   10b5c:	e7b3      	b.n	10ac6 <extract_conversion+0x13e>
   10b5e:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
   10b62:	2a20      	cmp	r2, #32
   10b64:	d867      	bhi.n	10c36 <extract_conversion+0x2ae>
   10b66:	a101      	add	r1, pc, #4	; (adr r1, 10b6c <extract_conversion+0x1e4>)
   10b68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   10b6c:	00010c15 	.word	0x00010c15
   10b70:	00010c37 	.word	0x00010c37
   10b74:	00010c37 	.word	0x00010c37
   10b78:	00010c37 	.word	0x00010c37
   10b7c:	00010c37 	.word	0x00010c37
   10b80:	00010c37 	.word	0x00010c37
   10b84:	00010c37 	.word	0x00010c37
   10b88:	00010c37 	.word	0x00010c37
   10b8c:	00010c37 	.word	0x00010c37
   10b90:	00010ae7 	.word	0x00010ae7
   10b94:	00010c37 	.word	0x00010c37
   10b98:	00010c15 	.word	0x00010c15
   10b9c:	00010bf1 	.word	0x00010bf1
   10ba0:	00010ae7 	.word	0x00010ae7
   10ba4:	00010ae7 	.word	0x00010ae7
   10ba8:	00010ae7 	.word	0x00010ae7
   10bac:	00010c37 	.word	0x00010c37
   10bb0:	00010bf1 	.word	0x00010bf1
   10bb4:	00010c37 	.word	0x00010c37
   10bb8:	00010c37 	.word	0x00010c37
   10bbc:	00010c37 	.word	0x00010c37
   10bc0:	00010c37 	.word	0x00010c37
   10bc4:	00010c41 	.word	0x00010c41
   10bc8:	00010c15 	.word	0x00010c15
   10bcc:	00010c5b 	.word	0x00010c5b
   10bd0:	00010c37 	.word	0x00010c37
   10bd4:	00010c37 	.word	0x00010c37
   10bd8:	00010c5b 	.word	0x00010c5b
   10bdc:	00010c37 	.word	0x00010c37
   10be0:	00010c15 	.word	0x00010c15
   10be4:	00010c37 	.word	0x00010c37
   10be8:	00010c37 	.word	0x00010c37
   10bec:	00010c15 	.word	0x00010c15
		conv->specifier_cat = SPECIFIER_SINT;
   10bf0:	2101      	movs	r1, #1
   10bf2:	789a      	ldrb	r2, [r3, #2]
		conv->specifier_cat = SPECIFIER_UINT;
   10bf4:	f361 0202 	bfi	r2, r1, #0, #3
   10bf8:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   10bfa:	785a      	ldrb	r2, [r3, #1]
   10bfc:	f002 0278 	and.w	r2, r2, #120	; 0x78
   10c00:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
   10c02:	bf02      	ittt	eq
   10c04:	7819      	ldrbeq	r1, [r3, #0]
   10c06:	f041 0101 	orreq.w	r1, r1, #1
   10c0a:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
   10c0c:	2c63      	cmp	r4, #99	; 0x63
   10c0e:	d004      	beq.n	10c1a <extract_conversion+0x292>
	bool unsupported = false;
   10c10:	2200      	movs	r2, #0
   10c12:	e005      	b.n	10c20 <extract_conversion+0x298>
		conv->specifier_cat = SPECIFIER_UINT;
   10c14:	2102      	movs	r1, #2
   10c16:	789a      	ldrb	r2, [r3, #2]
   10c18:	e7ec      	b.n	10bf4 <extract_conversion+0x26c>
			unsupported = (conv->length_mod != LENGTH_NONE);
   10c1a:	3a00      	subs	r2, #0
   10c1c:	bf18      	it	ne
   10c1e:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
   10c20:	7819      	ldrb	r1, [r3, #0]
   10c22:	f3c1 0440 	ubfx	r4, r1, #1, #1
   10c26:	4322      	orrs	r2, r4
   10c28:	f362 0141 	bfi	r1, r2, #1, #1
   10c2c:	7019      	strb	r1, [r3, #0]
	return sp;
   10c2e:	e6ea      	b.n	10a06 <extract_conversion+0x7e>
		} else if ((conv->length_mod != LENGTH_NONE)
   10c30:	f012 0f38 	tst.w	r2, #56	; 0x38
   10c34:	d0ec      	beq.n	10c10 <extract_conversion+0x288>
			conv->invalid = true;
   10c36:	781a      	ldrb	r2, [r3, #0]
   10c38:	f042 0201 	orr.w	r2, r2, #1
   10c3c:	701a      	strb	r2, [r3, #0]
   10c3e:	e7e7      	b.n	10c10 <extract_conversion+0x288>
		conv->specifier_cat = SPECIFIER_PTR;
   10c40:	2103      	movs	r1, #3
   10c42:	789a      	ldrb	r2, [r3, #2]
   10c44:	f361 0202 	bfi	r2, r1, #0, #3
   10c48:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   10c4a:	785a      	ldrb	r2, [r3, #1]
   10c4c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   10c50:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
   10c54:	424a      	negs	r2, r1
   10c56:	414a      	adcs	r2, r1
   10c58:	e7e2      	b.n	10c20 <extract_conversion+0x298>
		conv->specifier_cat = SPECIFIER_PTR;
   10c5a:	2103      	movs	r1, #3
   10c5c:	789a      	ldrb	r2, [r3, #2]
   10c5e:	f361 0202 	bfi	r2, r1, #0, #3
   10c62:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
   10c64:	785a      	ldrb	r2, [r3, #1]
   10c66:	f012 0f78 	tst.w	r2, #120	; 0x78
   10c6a:	bf14      	ite	ne
   10c6c:	2201      	movne	r2, #1
   10c6e:	2200      	moveq	r2, #0
   10c70:	e7d6      	b.n	10c20 <extract_conversion+0x298>
			unsupported = true;
   10c72:	2201      	movs	r2, #1
   10c74:	e7d4      	b.n	10c20 <extract_conversion+0x298>
   10c76:	bf00      	nop

00010c78 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c7c:	468a      	mov	sl, r1
   10c7e:	4614      	mov	r4, r2
   10c80:	469b      	mov	fp, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10c82:	f04f 0900 	mov.w	r9, #0
{
   10c86:	b0a1      	sub	sp, #132	; 0x84
   10c88:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10c8a:	7820      	ldrb	r0, [r4, #0]
   10c8c:	b908      	cbnz	r0, 10c92 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10c8e:	4648      	mov	r0, r9
   10c90:	e189      	b.n	10fa6 <cbvprintf+0x32e>
		if (*fp != '%') {
   10c92:	2825      	cmp	r0, #37	; 0x25
   10c94:	d00a      	beq.n	10cac <cbvprintf+0x34>
			OUTC(*fp++);
   10c96:	4651      	mov	r1, sl
   10c98:	9b03      	ldr	r3, [sp, #12]
   10c9a:	4798      	blx	r3
   10c9c:	2800      	cmp	r0, #0
   10c9e:	f2c0 8182 	blt.w	10fa6 <cbvprintf+0x32e>
   10ca2:	1c63      	adds	r3, r4, #1
   10ca4:	930b      	str	r3, [sp, #44]	; 0x2c
			OUTC('%');
   10ca6:	f109 0901 	add.w	r9, r9, #1
		if (bps == NULL) {
   10caa:	e067      	b.n	10d7c <cbvprintf+0x104>
		fp = extract_conversion(&conv, sp);
   10cac:	4621      	mov	r1, r4
   10cae:	a816      	add	r0, sp, #88	; 0x58
   10cb0:	f7ff fe6a 	bl	10988 <extract_conversion>
		if (conv.width_star) {
   10cb4:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
		fp = extract_conversion(&conv, sp);
   10cb8:	900b      	str	r0, [sp, #44]	; 0x2c
		if (conv.width_star) {
   10cba:	07d8      	lsls	r0, r3, #31
   10cbc:	d51c      	bpl.n	10cf8 <cbvprintf+0x80>
			width = va_arg(ap, int);
   10cbe:	f85b 2b04 	ldr.w	r2, [fp], #4
			if (width < 0) {
   10cc2:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
   10cc4:	920a      	str	r2, [sp, #40]	; 0x28
			if (width < 0) {
   10cc6:	da08      	bge.n	10cda <cbvprintf+0x62>
				conv.flag_dash = true;
   10cc8:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   10ccc:	f042 0204 	orr.w	r2, r2, #4
   10cd0:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
				width = -width;
   10cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10cd6:	4252      	negs	r2, r2
		int width = -1;
   10cd8:	920a      	str	r2, [sp, #40]	; 0x28
		if (conv.prec_star) {
   10cda:	0759      	lsls	r1, r3, #29
   10cdc:	d514      	bpl.n	10d08 <cbvprintf+0x90>
			int arg = va_arg(ap, int);
   10cde:	f85b 5b04 	ldr.w	r5, [fp], #4
			if (arg < 0) {
   10ce2:	2d00      	cmp	r5, #0
   10ce4:	da13      	bge.n	10d0e <cbvprintf+0x96>
				conv.prec_present = false;
   10ce6:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   10cea:	f36f 0341 	bfc	r3, #1, #1
   10cee:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
   10cf2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10cf6:	e00a      	b.n	10d0e <cbvprintf+0x96>
		} else if (conv.width_present) {
   10cf8:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   10cfc:	2a00      	cmp	r2, #0
		int width = -1;
   10cfe:	bfac      	ite	ge
   10d00:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
			width = conv.width_value;
   10d04:	9a17      	ldrlt	r2, [sp, #92]	; 0x5c
   10d06:	e7e7      	b.n	10cd8 <cbvprintf+0x60>
		} else if (conv.prec_present) {
   10d08:	079a      	lsls	r2, r3, #30
   10d0a:	d5f2      	bpl.n	10cf2 <cbvprintf+0x7a>
			precision = conv.prec_value;
   10d0c:	9d18      	ldr	r5, [sp, #96]	; 0x60
		conv.pad0_value = 0;
   10d0e:	2300      	movs	r3, #0
		conv.pad0_pre_exp = 0;
   10d10:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv.specifier_cat == SPECIFIER_FP)
   10d14:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   10d18:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   10d1c:	f003 0307 	and.w	r3, r3, #7
   10d20:	2b04      	cmp	r3, #4
   10d22:	d107      	bne.n	10d34 <cbvprintf+0xbc>
		    && !conv.prec_present) {
   10d24:	0793      	lsls	r3, r2, #30
   10d26:	d405      	bmi.n	10d34 <cbvprintf+0xbc>
			if (conv.specifier_a) {
   10d28:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
   10d2c:	2b00      	cmp	r3, #0
   10d2e:	bfb4      	ite	lt
   10d30:	250d      	movlt	r5, #13
   10d32:	2506      	movge	r5, #6
			= (enum specifier_cat_enum)conv.specifier_cat;
   10d34:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		union argument_value value = (union argument_value){
   10d38:	2000      	movs	r0, #0
		enum specifier_cat_enum specifier_cat
   10d3a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   10d3e:	2b01      	cmp	r3, #1
		union argument_value value = (union argument_value){
   10d40:	f04f 0100 	mov.w	r1, #0
			= (enum length_mod_enum)conv.length_mod;
   10d44:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   10d48:	d126      	bne.n	10d98 <cbvprintf+0x120>
			switch (length_mod) {
   10d4a:	1ed3      	subs	r3, r2, #3
   10d4c:	2b04      	cmp	r3, #4
   10d4e:	d817      	bhi.n	10d80 <cbvprintf+0x108>
   10d50:	e8df f003 	tbb	[pc, r3]
   10d54:	16323203 	.word	0x16323203
   10d58:	16          	.byte	0x16
   10d59:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
   10d5a:	f85b 0b04 	ldr.w	r0, [fp], #4
				value.sint = (short)value.sint;
   10d5e:	17c1      	asrs	r1, r0, #31
		if (conv.invalid || conv.unsupported) {
   10d60:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
   10d64:	07b7      	lsls	r7, r6, #30
   10d66:	d047      	beq.n	10df8 <cbvprintf+0x180>
			OUTS(sp, fp);
   10d68:	4622      	mov	r2, r4
   10d6a:	4651      	mov	r1, sl
   10d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d6e:	9803      	ldr	r0, [sp, #12]
   10d70:	f004 fa29 	bl	151c6 <outs>
   10d74:	2800      	cmp	r0, #0
   10d76:	f2c0 8116 	blt.w	10fa6 <cbvprintf+0x32e>
   10d7a:	4481      	add	r9, r0
			continue;
   10d7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   10d7e:	e784      	b.n	10c8a <cbvprintf+0x12>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10d80:	f85b 0b04 	ldr.w	r0, [fp], #4
			if (length_mod == LENGTH_HH) {
   10d84:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10d86:	ea4f 71e0 	mov.w	r1, r0, asr #31
			if (length_mod == LENGTH_HH) {
   10d8a:	d101      	bne.n	10d90 <cbvprintf+0x118>
				value.uint = (unsigned char)value.uint;
   10d8c:	b2c6      	uxtb	r6, r0
   10d8e:	e00f      	b.n	10db0 <cbvprintf+0x138>
			} else if (length_mod == LENGTH_H) {
   10d90:	2a02      	cmp	r2, #2
   10d92:	d1e5      	bne.n	10d60 <cbvprintf+0xe8>
				value.sint = (short)value.sint;
   10d94:	b200      	sxth	r0, r0
   10d96:	e7e2      	b.n	10d5e <cbvprintf+0xe6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   10d98:	2b02      	cmp	r3, #2
   10d9a:	d11f      	bne.n	10ddc <cbvprintf+0x164>
			switch (length_mod) {
   10d9c:	1ed3      	subs	r3, r2, #3
   10d9e:	2b04      	cmp	r3, #4
   10da0:	d811      	bhi.n	10dc6 <cbvprintf+0x14e>
   10da2:	e8df f003 	tbb	[pc, r3]
   10da6:	0903      	.short	0x0903
   10da8:	1009      	.short	0x1009
   10daa:	10          	.byte	0x10
   10dab:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
   10dac:	f85b 6b04 	ldr.w	r6, [fp], #4
				value.uint = (unsigned short)value.uint;
   10db0:	2300      	movs	r3, #0
   10db2:	4630      	mov	r0, r6
   10db4:	4619      	mov	r1, r3
   10db6:	e7d3      	b.n	10d60 <cbvprintf+0xe8>
					(uint_value_type)va_arg(ap,
   10db8:	f10b 0b07 	add.w	fp, fp, #7
   10dbc:	f02b 0b07 	bic.w	fp, fp, #7
				value.uint =
   10dc0:	e8fb 0102 	ldrd	r0, r1, [fp], #8
				break;
   10dc4:	e7cc      	b.n	10d60 <cbvprintf+0xe8>
				value.uint =
   10dc6:	2300      	movs	r3, #0
   10dc8:	f85b 6b04 	ldr.w	r6, [fp], #4
			if (length_mod == LENGTH_HH) {
   10dcc:	2a01      	cmp	r2, #1
				value.uint =
   10dce:	4630      	mov	r0, r6
   10dd0:	4619      	mov	r1, r3
			if (length_mod == LENGTH_HH) {
   10dd2:	d0db      	beq.n	10d8c <cbvprintf+0x114>
			} else if (length_mod == LENGTH_H) {
   10dd4:	2a02      	cmp	r2, #2
   10dd6:	d1c3      	bne.n	10d60 <cbvprintf+0xe8>
				value.uint = (unsigned short)value.uint;
   10dd8:	b2b6      	uxth	r6, r6
   10dda:	e7e9      	b.n	10db0 <cbvprintf+0x138>
		} else if (specifier_cat == SPECIFIER_FP) {
   10ddc:	2b04      	cmp	r3, #4
   10dde:	d106      	bne.n	10dee <cbvprintf+0x176>
			if (length_mod == LENGTH_UPPER_L) {
   10de0:	f10b 0b07 	add.w	fp, fp, #7
   10de4:	f02b 0b07 	bic.w	fp, fp, #7
   10de8:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   10dec:	e7b8      	b.n	10d60 <cbvprintf+0xe8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   10dee:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
   10df0:	bf08      	it	eq
   10df2:	f85b 0b04 	ldreq.w	r0, [fp], #4
   10df6:	e7b3      	b.n	10d60 <cbvprintf+0xe8>
		switch (conv.specifier) {
   10df8:	f89d 705b 	ldrb.w	r7, [sp, #91]	; 0x5b
   10dfc:	2f78      	cmp	r7, #120	; 0x78
   10dfe:	d8bd      	bhi.n	10d7c <cbvprintf+0x104>
   10e00:	2f57      	cmp	r7, #87	; 0x57
   10e02:	d87f      	bhi.n	10f04 <cbvprintf+0x28c>
   10e04:	2f25      	cmp	r7, #37	; 0x25
   10e06:	f000 80c7 	beq.w	10f98 <cbvprintf+0x320>
   10e0a:	2f24      	cmp	r7, #36	; 0x24
   10e0c:	d9b6      	bls.n	10d7c <cbvprintf+0x104>
   10e0e:	2f41      	cmp	r7, #65	; 0x41
   10e10:	d003      	beq.n	10e1a <cbvprintf+0x1a2>
   10e12:	f1a7 0345 	sub.w	r3, r7, #69	; 0x45
   10e16:	2b02      	cmp	r3, #2
   10e18:	d8b0      	bhi.n	10d7c <cbvprintf+0x104>
	if ((u.u64 & SIGN_MASK) != 0U) {
   10e1a:	2800      	cmp	r0, #0
   10e1c:	f171 0300 	sbcs.w	r3, r1, #0
   10e20:	f2c0 815c 	blt.w	110dc <cbvprintf+0x464>
	} else if (conv->flag_plus) {
   10e24:	0732      	lsls	r2, r6, #28
   10e26:	f100 815b 	bmi.w	110e0 <cbvprintf+0x468>
		*sign = ' ';
   10e2a:	f016 0610 	ands.w	r6, r6, #16
   10e2e:	bf18      	it	ne
   10e30:	2620      	movne	r6, #32
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   10e32:	f3c1 0313 	ubfx	r3, r1, #0, #20
   10e36:	9006      	str	r0, [sp, #24]
   10e38:	9307      	str	r3, [sp, #28]
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   10e3a:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   10e3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10e42:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (exp == 0) && (fract != 0);
   10e46:	2c00      	cmp	r4, #0
   10e48:	f040 814c 	bne.w	110e4 <cbvprintf+0x46c>
   10e4c:	4603      	mov	r3, r0
   10e4e:	9a07      	ldr	r2, [sp, #28]
   10e50:	4313      	orrs	r3, r2
   10e52:	bf14      	ite	ne
   10e54:	f04f 0c01 	movne.w	ip, #1
   10e58:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
   10e5c:	9907      	ldr	r1, [sp, #28]
		c = 'f';
   10e5e:	2f46      	cmp	r7, #70	; 0x46
	fract <<= EXPONENT_BITS;
   10e60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10e64:	9906      	ldr	r1, [sp, #24]
		c = 'f';
   10e66:	bf08      	it	eq
   10e68:	2766      	moveq	r7, #102	; 0x66
	fract <<= EXPONENT_BITS;
   10e6a:	02ca      	lsls	r2, r1, #11
   10e6c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
   10e70:	ea44 0102 	orr.w	r1, r4, r2
   10e74:	910c      	str	r1, [sp, #48]	; 0x30
   10e76:	17e1      	asrs	r1, r4, #31
   10e78:	4319      	orrs	r1, r3
   10e7a:	910d      	str	r1, [sp, #52]	; 0x34
   10e7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   10e80:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
   10e82:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((exp | fract) != 0) {
   10e86:	f000 81cf 	beq.w	11228 <cbvprintf+0x5b0>
		if (is_subnormal) {
   10e8a:	f1bc 0f00 	cmp.w	ip, #0
   10e8e:	f040 815d 	bne.w	1114c <cbvprintf+0x4d4>
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   10e92:	f2a4 38fe 	subw	r8, r4, #1022	; 0x3fe
		fract |= BIT_63;
   10e96:	2400      	movs	r4, #0
   10e98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10e9e:	9313      	str	r3, [sp, #76]	; 0x4c
	while (exp <= -3) {
   10ea0:	f118 0f02 	cmn.w	r8, #2
   10ea4:	f2c0 815e 	blt.w	11164 <cbvprintf+0x4ec>
	while (exp > 0) {
   10ea8:	f1b8 0f00 	cmp.w	r8, #0
   10eac:	f300 8196 	bgt.w	111dc <cbvprintf+0x564>
		_rlrshift(&fract);
   10eb0:	a812      	add	r0, sp, #72	; 0x48
		exp++;
   10eb2:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   10eb6:	f004 f8f2 	bl	1509e <_rlrshift>
	while (exp < (0 + 4)) {
   10eba:	f1b8 0f04 	cmp.w	r8, #4
   10ebe:	d1f7      	bne.n	10eb0 <cbvprintf+0x238>
	if ((c == 'g') || (c == 'G')) {
   10ec0:	f007 03df 	and.w	r3, r7, #223	; 0xdf
   10ec4:	2b47      	cmp	r3, #71	; 0x47
   10ec6:	f040 81b5 	bne.w	11234 <cbvprintf+0x5bc>
		if (decexp < (-4 + 1) || decexp > precision) {
   10eca:	1ce3      	adds	r3, r4, #3
   10ecc:	db02      	blt.n	10ed4 <cbvprintf+0x25c>
   10ece:	42a5      	cmp	r5, r4
   10ed0:	f280 81ad 	bge.w	1122e <cbvprintf+0x5b6>
			c += 'e' - 'g';  /* e or E */
   10ed4:	3f02      	subs	r7, #2
			if (precision > 0) {
   10ed6:	2d00      	cmp	r5, #0
			c += 'e' - 'g';  /* e or E */
   10ed8:	b2ff      	uxtb	r7, r7
			if (precision > 0) {
   10eda:	dd00      	ble.n	10ede <cbvprintf+0x266>
				precision--;
   10edc:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
   10ede:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   10ee2:	0698      	lsls	r0, r3, #26
   10ee4:	f100 81a6 	bmi.w	11234 <cbvprintf+0x5bc>
   10ee8:	2d00      	cmp	r5, #0
   10eea:	bfd4      	ite	le
   10eec:	2300      	movle	r3, #0
   10eee:	2301      	movgt	r3, #1
	if (c == 'f') {
   10ef0:	2f66      	cmp	r7, #102	; 0x66
	bool prune_zero = false;
   10ef2:	9304      	str	r3, [sp, #16]
	if (c == 'f') {
   10ef4:	f040 81a0 	bne.w	11238 <cbvprintf+0x5c0>
		if (exp < 0) {
   10ef8:	1963      	adds	r3, r4, r5
   10efa:	f140 819e 	bpl.w	1123a <cbvprintf+0x5c2>
			exp = 0;
   10efe:	f04f 0800 	mov.w	r8, #0
   10f02:	e19e      	b.n	11242 <cbvprintf+0x5ca>
   10f04:	f1a7 0358 	sub.w	r3, r7, #88	; 0x58
   10f08:	2b20      	cmp	r3, #32
   10f0a:	f63f af37 	bhi.w	10d7c <cbvprintf+0x104>
   10f0e:	a401      	add	r4, pc, #4	; (adr r4, 10f14 <cbvprintf+0x29c>)
   10f10:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
   10f14:	0001107b 	.word	0x0001107b
   10f18:	00010d7d 	.word	0x00010d7d
   10f1c:	00010d7d 	.word	0x00010d7d
   10f20:	00010d7d 	.word	0x00010d7d
   10f24:	00010d7d 	.word	0x00010d7d
   10f28:	00010d7d 	.word	0x00010d7d
   10f2c:	00010d7d 	.word	0x00010d7d
   10f30:	00010d7d 	.word	0x00010d7d
   10f34:	00010d7d 	.word	0x00010d7d
   10f38:	00010e1b 	.word	0x00010e1b
   10f3c:	00010d7d 	.word	0x00010d7d
   10f40:	00010fc7 	.word	0x00010fc7
   10f44:	00011029 	.word	0x00011029
   10f48:	00010e1b 	.word	0x00010e1b
   10f4c:	00010e1b 	.word	0x00010e1b
   10f50:	00010e1b 	.word	0x00010e1b
   10f54:	00010d7d 	.word	0x00010d7d
   10f58:	00011029 	.word	0x00011029
   10f5c:	00010d7d 	.word	0x00010d7d
   10f60:	00010d7d 	.word	0x00010d7d
   10f64:	00010d7d 	.word	0x00010d7d
   10f68:	00010d7d 	.word	0x00010d7d
   10f6c:	000110af 	.word	0x000110af
   10f70:	0001107b 	.word	0x0001107b
   10f74:	0001107f 	.word	0x0001107f
   10f78:	00010d7d 	.word	0x00010d7d
   10f7c:	00010d7d 	.word	0x00010d7d
   10f80:	00010fad 	.word	0x00010fad
   10f84:	00010d7d 	.word	0x00010d7d
   10f88:	0001107b 	.word	0x0001107b
   10f8c:	00010d7d 	.word	0x00010d7d
   10f90:	00010d7d 	.word	0x00010d7d
   10f94:	0001107b 	.word	0x0001107b
			OUTC('%');
   10f98:	4651      	mov	r1, sl
   10f9a:	4638      	mov	r0, r7
   10f9c:	9b03      	ldr	r3, [sp, #12]
   10f9e:	4798      	blx	r3
   10fa0:	2800      	cmp	r0, #0
   10fa2:	f6bf ae80 	bge.w	10ca6 <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
   10fa6:	b021      	add	sp, #132	; 0x84
   10fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bps = (const char *)value.ptr;
   10fac:	4604      	mov	r4, r0
			size_t len = strlen(bps);
   10fae:	f004 fa76 	bl	1549e <strlen>
			if ((precision >= 0)
   10fb2:	2d00      	cmp	r5, #0
   10fb4:	db02      	blt.n	10fbc <cbvprintf+0x344>
   10fb6:	42a8      	cmp	r0, r5
   10fb8:	bf28      	it	cs
   10fba:	4628      	movcs	r0, r5
		char sign = 0;
   10fbc:	2600      	movs	r6, #0
			bpe = bps + len;
   10fbe:	eb04 0800 	add.w	r8, r4, r0
		if (bps == NULL) {
   10fc2:	b934      	cbnz	r4, 10fd2 <cbvprintf+0x35a>
   10fc4:	e6da      	b.n	10d7c <cbvprintf+0x104>
		char sign = 0;
   10fc6:	2600      	movs	r6, #0
			buf[0] = value.uint;
   10fc8:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
			bpe = buf + 1;
   10fcc:	f10d 0865 	add.w	r8, sp, #101	; 0x65
				bps = encode_float(value.dbl, &conv, precision,
   10fd0:	ac19      	add	r4, sp, #100	; 0x64
		size_t nj_len = (bpe - bps);
   10fd2:	eba8 0704 	sub.w	r7, r8, r4
		if (sign != 0) {
   10fd6:	b106      	cbz	r6, 10fda <cbvprintf+0x362>
			nj_len += 1U;
   10fd8:	3701      	adds	r7, #1
		if (conv.altform_0c) {
   10fda:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   10fde:	06cb      	lsls	r3, r1, #27
   10fe0:	f140 8206 	bpl.w	113f0 <cbvprintf+0x778>
			nj_len += 2U;
   10fe4:	3702      	adds	r7, #2
		nj_len += conv.pad0_value;
   10fe6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
		if (conv.pad_fp) {
   10fe8:	0648      	lsls	r0, r1, #25
		nj_len += conv.pad0_value;
   10fea:	4417      	add	r7, r2
		if (width > 0) {
   10fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			nj_len += conv.pad0_pre_exp;
   10fee:	bf44      	itt	mi
   10ff0:	9a18      	ldrmi	r2, [sp, #96]	; 0x60
   10ff2:	18bf      	addmi	r7, r7, r2
		if (width > 0) {
   10ff4:	2b00      	cmp	r3, #0
   10ff6:	f340 820e 	ble.w	11416 <cbvprintf+0x79e>
			if (!conv.flag_dash) {
   10ffa:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
			width -= (int)nj_len;
   10ffe:	1bdf      	subs	r7, r3, r7
			if (!conv.flag_dash) {
   11000:	0751      	lsls	r1, r2, #29
   11002:	f3c2 0580 	ubfx	r5, r2, #2, #1
   11006:	f100 8245 	bmi.w	11494 <cbvprintf+0x81c>
				if (conv.flag_zero) {
   1100a:	0653      	lsls	r3, r2, #25
   1100c:	f140 823e 	bpl.w	1148c <cbvprintf+0x814>
					if (sign != 0) {
   11010:	b146      	cbz	r6, 11024 <cbvprintf+0x3ac>
						OUTC(sign);
   11012:	4651      	mov	r1, sl
   11014:	4630      	mov	r0, r6
   11016:	9b03      	ldr	r3, [sp, #12]
   11018:	4798      	blx	r3
   1101a:	2800      	cmp	r0, #0
   1101c:	dbc3      	blt.n	10fa6 <cbvprintf+0x32e>
						sign = 0;
   1101e:	462e      	mov	r6, r5
						OUTC(sign);
   11020:	f109 0901 	add.w	r9, r9, #1
					pad = '0';
   11024:	2530      	movs	r5, #48	; 0x30
   11026:	e232      	b.n	1148e <cbvprintf+0x816>
			if (conv.flag_plus) {
   11028:	0734      	lsls	r4, r6, #28
   1102a:	d424      	bmi.n	11076 <cbvprintf+0x3fe>
				sign = ' ';
   1102c:	f016 0610 	ands.w	r6, r6, #16
   11030:	bf18      	it	ne
   11032:	2620      	movne	r6, #32
			if (value.sint < 0) {
   11034:	2800      	cmp	r0, #0
   11036:	f171 0300 	sbcs.w	r3, r1, #0
   1103a:	da03      	bge.n	11044 <cbvprintf+0x3cc>
				sign = '-';
   1103c:	262d      	movs	r6, #45	; 0x2d
				value.uint = -value.sint;
   1103e:	4240      	negs	r0, r0
   11040:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
			bps = encode_uint(value.uint, &conv, buf, bpe);
   11044:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   11048:	9300      	str	r3, [sp, #0]
   1104a:	aa16      	add	r2, sp, #88	; 0x58
   1104c:	ab19      	add	r3, sp, #100	; 0x64
   1104e:	f004 f86f 	bl	15130 <encode_uint>
   11052:	4604      	mov	r4, r0
			if (precision >= 0) {
   11054:	2d00      	cmp	r5, #0
   11056:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   1105a:	db0a      	blt.n	11072 <cbvprintf+0x3fa>
				conv.flag_zero = false;
   1105c:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
   11060:	1b1a      	subs	r2, r3, r4
				conv.flag_zero = false;
   11062:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   11066:	4295      	cmp	r5, r2
				conv.flag_zero = false;
   11068:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
   1106c:	d901      	bls.n	11072 <cbvprintf+0x3fa>
					conv.pad0_value = precision - (int)len;
   1106e:	1aad      	subs	r5, r5, r2
   11070:	9517      	str	r5, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
   11072:	4698      	mov	r8, r3
   11074:	e7a5      	b.n	10fc2 <cbvprintf+0x34a>
				sign = '+';
   11076:	262b      	movs	r6, #43	; 0x2b
   11078:	e7dc      	b.n	11034 <cbvprintf+0x3bc>
		switch (conv.specifier) {
   1107a:	2600      	movs	r6, #0
   1107c:	e7e2      	b.n	11044 <cbvprintf+0x3cc>
			if (value.ptr != NULL) {
   1107e:	2800      	cmp	r0, #0
   11080:	f000 81b0 	beq.w	113e4 <cbvprintf+0x76c>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   11084:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   11088:	9300      	str	r3, [sp, #0]
   1108a:	2100      	movs	r1, #0
   1108c:	ab19      	add	r3, sp, #100	; 0x64
   1108e:	aa16      	add	r2, sp, #88	; 0x58
   11090:	f004 f84e 	bl	15130 <encode_uint>
				conv.altform_0c = true;
   11094:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   11098:	4604      	mov	r4, r0
				conv.altform_0c = true;
   1109a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1109e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   110a2:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   110a6:	2600      	movs	r6, #0
				conv.altform_0c = true;
   110a8:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
				goto prec_int_pad0;
   110ac:	e7d2      	b.n	11054 <cbvprintf+0x3dc>
	switch ((enum length_mod_enum)conv->length_mod) {
   110ae:	2a07      	cmp	r2, #7
   110b0:	f63f ae64 	bhi.w	10d7c <cbvprintf+0x104>
   110b4:	e8df f002 	tbb	[pc, r2]
   110b8:	0f07040f 	.word	0x0f07040f
   110bc:	0f0f0a0a 	.word	0x0f0f0a0a
		*(signed char *)dp = (signed char)count;
   110c0:	f880 9000 	strb.w	r9, [r0]
		break;
   110c4:	e65a      	b.n	10d7c <cbvprintf+0x104>
		*(short *)dp = (short)count;
   110c6:	f8a0 9000 	strh.w	r9, [r0]
		break;
   110ca:	e657      	b.n	10d7c <cbvprintf+0x104>
		*(intmax_t *)dp = (intmax_t)count;
   110cc:	464a      	mov	r2, r9
   110ce:	17d3      	asrs	r3, r2, #31
   110d0:	e9c0 2300 	strd	r2, r3, [r0]
		break;
   110d4:	e652      	b.n	10d7c <cbvprintf+0x104>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   110d6:	f8c0 9000 	str.w	r9, [r0]
		break;
   110da:	e64f      	b.n	10d7c <cbvprintf+0x104>
		*sign = '-';
   110dc:	262d      	movs	r6, #45	; 0x2d
   110de:	e6a8      	b.n	10e32 <cbvprintf+0x1ba>
		*sign = '+';
   110e0:	262b      	movs	r6, #43	; 0x2b
   110e2:	e6a6      	b.n	10e32 <cbvprintf+0x1ba>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
   110e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
   110e8:	429c      	cmp	r4, r3
   110ea:	d12b      	bne.n	11144 <cbvprintf+0x4cc>
		if (fract == 0) {
   110ec:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   110f0:	4323      	orrs	r3, r4
   110f2:	f1a7 0741 	sub.w	r7, r7, #65	; 0x41
   110f6:	d117      	bne.n	11128 <cbvprintf+0x4b0>
			if (isupper((int)c)) {
   110f8:	2f19      	cmp	r7, #25
				*buf++ = 'I';
   110fa:	bf95      	itete	ls
   110fc:	f644 6349 	movwls	r3, #20041	; 0x4e49
				*buf++ = 'i';
   11100:	f646 6369 	movwhi	r3, #28265	; 0x6e69
				*buf++ = 'I';
   11104:	f8ad 3064 	strhls.w	r3, [sp, #100]	; 0x64
				*buf++ = 'i';
   11108:	f8ad 3064 	strhhi.w	r3, [sp, #100]	; 0x64
				*buf++ = 'F';
   1110c:	bf94      	ite	ls
   1110e:	2346      	movls	r3, #70	; 0x46
				*buf++ = 'f';
   11110:	2366      	movhi	r3, #102	; 0x66
				*buf++ = 'n';
   11112:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
		conv->flag_zero = false;
   11116:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
   1111a:	f10d 0867 	add.w	r8, sp, #103	; 0x67
		conv->flag_zero = false;
   1111e:	f36f 1386 	bfc	r3, #6, #1
   11122:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		return bps;
   11126:	e753      	b.n	10fd0 <cbvprintf+0x358>
			if (isupper((int)c)) {
   11128:	2f19      	cmp	r7, #25
				*buf++ = 'N';
   1112a:	bf95      	itete	ls
   1112c:	f244 134e 	movwls	r3, #16718	; 0x414e
				*buf++ = 'n';
   11130:	f246 136e 	movwhi	r3, #24942	; 0x616e
				*buf++ = 'N';
   11134:	f8ad 3064 	strhls.w	r3, [sp, #100]	; 0x64
				*buf++ = 'n';
   11138:	f8ad 3064 	strhhi.w	r3, [sp, #100]	; 0x64
				*buf++ = 'N';
   1113c:	bf94      	ite	ls
   1113e:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'n';
   11140:	236e      	movhi	r3, #110	; 0x6e
   11142:	e7e6      	b.n	11112 <cbvprintf+0x49a>
	bool is_subnormal = (exp == 0) && (fract != 0);
   11144:	f04f 0c00 	mov.w	ip, #0
   11148:	e688      	b.n	10e5c <cbvprintf+0x1e4>
				exp--;
   1114a:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   1114c:	1892      	adds	r2, r2, r2
   1114e:	415b      	adcs	r3, r3
   11150:	2a00      	cmp	r2, #0
   11152:	f173 0100 	sbcs.w	r1, r3, #0
   11156:	daf8      	bge.n	1114a <cbvprintf+0x4d2>
   11158:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   1115c:	e699      	b.n	10e92 <cbvprintf+0x21a>
			_rlrshift(&fract);
   1115e:	a812      	add	r0, sp, #72	; 0x48
   11160:	f003 ff9d 	bl	1509e <_rlrshift>
		while ((fract >> 32) >= (MAX_FP1 / 5)) {
   11164:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
   11168:	2300      	movs	r3, #0
   1116a:	f8cd c020 	str.w	ip, [sp, #32]
   1116e:	9309      	str	r3, [sp, #36]	; 0x24
   11170:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   11174:	2900      	cmp	r1, #0
   11176:	bf08      	it	eq
   11178:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
   1117c:	f108 0801 	add.w	r8, r8, #1
   11180:	d2ed      	bcs.n	1115e <cbvprintf+0x4e6>
		fract *= 5U;
   11182:	2005      	movs	r0, #5
   11184:	fba2 2300 	umull	r2, r3, r2, r0
   11188:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1118c:	9b05      	ldr	r3, [sp, #20]
		decexp--;
   1118e:	3c01      	subs	r4, #1
		fract *= 5U;
   11190:	fb00 330c 	mla	r3, r0, ip, r3
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   11194:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   11198:	9305      	str	r3, [sp, #20]
   1119a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1119e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   111a2:	2100      	movs	r1, #0
   111a4:	2300      	movs	r3, #0
   111a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   111aa:	9805      	ldr	r0, [sp, #20]
   111ac:	428b      	cmp	r3, r1
   111ae:	bf08      	it	eq
   111b0:	4282      	cmpeq	r2, r0
   111b2:	d208      	bcs.n	111c6 <cbvprintf+0x54e>
   111b4:	f1bc 0f00 	cmp.w	ip, #0
   111b8:	f43f ae72 	beq.w	10ea0 <cbvprintf+0x228>
   111bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   111c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   111c4:	e66c      	b.n	10ea0 <cbvprintf+0x228>
			fract <<= 1;
   111c6:	9b04      	ldr	r3, [sp, #16]
			exp--;
   111c8:	f04f 0c01 	mov.w	ip, #1
			fract <<= 1;
   111cc:	18db      	adds	r3, r3, r3
   111ce:	9304      	str	r3, [sp, #16]
   111d0:	9b05      	ldr	r3, [sp, #20]
			exp--;
   111d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
   111d6:	415b      	adcs	r3, r3
   111d8:	9305      	str	r3, [sp, #20]
			exp--;
   111da:	e7e2      	b.n	111a2 <cbvprintf+0x52a>
		_ldiv5(&fract);
   111dc:	a812      	add	r0, sp, #72	; 0x48
   111de:	f003 ff6f 	bl	150c0 <_ldiv5>
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   111e2:	f04f 0c00 	mov.w	ip, #0
   111e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111e8:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
		exp--;
   111ec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   111f0:	3401      	adds	r4, #1
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   111f2:	9304      	str	r3, [sp, #16]
   111f4:	2300      	movs	r3, #0
   111f6:	2100      	movs	r1, #0
   111f8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   111fc:	4299      	cmp	r1, r3
   111fe:	bf08      	it	eq
   11200:	4570      	cmpeq	r0, lr
   11202:	d207      	bcs.n	11214 <cbvprintf+0x59c>
   11204:	f1bc 0f00 	cmp.w	ip, #0
   11208:	f43f ae4e 	beq.w	10ea8 <cbvprintf+0x230>
   1120c:	9b04      	ldr	r3, [sp, #16]
   1120e:	e9cd 3e12 	strd	r3, lr, [sp, #72]	; 0x48
   11212:	e649      	b.n	10ea8 <cbvprintf+0x230>
			fract <<= 1;
   11214:	9b04      	ldr	r3, [sp, #16]
			exp--;
   11216:	f04f 0c01 	mov.w	ip, #1
			fract <<= 1;
   1121a:	18db      	adds	r3, r3, r3
   1121c:	9304      	str	r3, [sp, #16]
   1121e:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
   11222:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   11226:	e7e5      	b.n	111f4 <cbvprintf+0x57c>
   11228:	2400      	movs	r4, #0
   1122a:	46a0      	mov	r8, r4
   1122c:	e640      	b.n	10eb0 <cbvprintf+0x238>
			c = 'f';
   1122e:	2766      	movs	r7, #102	; 0x66
			precision -= decexp;
   11230:	1b2d      	subs	r5, r5, r4
   11232:	e654      	b.n	10ede <cbvprintf+0x266>
	bool prune_zero = false;
   11234:	2300      	movs	r3, #0
   11236:	e65b      	b.n	10ef0 <cbvprintf+0x278>
		exp = precision + 1;
   11238:	1c6b      	adds	r3, r5, #1
	if (exp > 16) {
   1123a:	2b10      	cmp	r3, #16
   1123c:	bfa8      	it	ge
   1123e:	2310      	movge	r3, #16
   11240:	4698      	mov	r8, r3
   11242:	2210      	movs	r2, #16
	uint64_t ltemp = BIT64(59);
   11244:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   11248:	9211      	str	r2, [sp, #68]	; 0x44
   1124a:	2200      	movs	r2, #0
   1124c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
   11250:	f1b8 0801 	subs.w	r8, r8, #1
   11254:	d222      	bcs.n	1129c <cbvprintf+0x624>
	fract += ltemp;
   11256:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11258:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1125a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1125c:	189b      	adds	r3, r3, r2
   1125e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11260:	eb41 0202 	adc.w	r2, r1, r2
   11264:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & (0x0FU << 28)) {
   11268:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
   1126c:	930e      	str	r3, [sp, #56]	; 0x38
   1126e:	2300      	movs	r3, #0
   11270:	930f      	str	r3, [sp, #60]	; 0x3c
   11272:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   11276:	4313      	orrs	r3, r2
   11278:	d006      	beq.n	11288 <cbvprintf+0x610>
		_ldiv5(&fract);
   1127a:	a812      	add	r0, sp, #72	; 0x48
   1127c:	f003 ff20 	bl	150c0 <_ldiv5>
		_rlrshift(&fract);
   11280:	a812      	add	r0, sp, #72	; 0x48
   11282:	f003 ff0c 	bl	1509e <_rlrshift>
		decexp++;
   11286:	3401      	adds	r4, #1
	if (c == 'f') {
   11288:	2f66      	cmp	r7, #102	; 0x66
   1128a:	d17d      	bne.n	11388 <cbvprintf+0x710>
		if (decexp > 0) {
   1128c:	2c00      	cmp	r4, #0
   1128e:	dc0c      	bgt.n	112aa <cbvprintf+0x632>
			*buf++ = '0';
   11290:	2330      	movs	r3, #48	; 0x30
   11292:	f10d 0865 	add.w	r8, sp, #101	; 0x65
   11296:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
   1129a:	e015      	b.n	112c8 <cbvprintf+0x650>
		_ldiv5(&ltemp);
   1129c:	a814      	add	r0, sp, #80	; 0x50
   1129e:	f003 ff0f 	bl	150c0 <_ldiv5>
		_rlrshift(&ltemp);
   112a2:	a814      	add	r0, sp, #80	; 0x50
   112a4:	f003 fefb 	bl	1509e <_rlrshift>
   112a8:	e7d2      	b.n	11250 <cbvprintf+0x5d8>
	char *buf = bps;
   112aa:	f10d 0864 	add.w	r8, sp, #100	; 0x64
			while (decexp > 0 && digit_count > 0) {
   112ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
   112b0:	2a00      	cmp	r2, #0
   112b2:	dd07      	ble.n	112c4 <cbvprintf+0x64c>
				*buf++ = _get_digit(&fract, &digit_count);
   112b4:	a911      	add	r1, sp, #68	; 0x44
   112b6:	a812      	add	r0, sp, #72	; 0x48
   112b8:	f003 ff23 	bl	15102 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   112bc:	3c01      	subs	r4, #1
				*buf++ = _get_digit(&fract, &digit_count);
   112be:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   112c2:	d1f4      	bne.n	112ae <cbvprintf+0x636>
			conv->pad0_value = decexp;
   112c4:	9417      	str	r4, [sp, #92]	; 0x5c
			decexp = 0;
   112c6:	2400      	movs	r4, #0
		if (conv->flag_hash || (precision > 0)) {
   112c8:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   112cc:	0691      	lsls	r1, r2, #26
   112ce:	d401      	bmi.n	112d4 <cbvprintf+0x65c>
   112d0:	2d00      	cmp	r5, #0
   112d2:	dd1b      	ble.n	1130c <cbvprintf+0x694>
			*buf++ = '.';
   112d4:	222e      	movs	r2, #46	; 0x2e
   112d6:	f808 2b01 	strb.w	r2, [r8], #1
		if (decexp < 0 && precision > 0) {
   112da:	b194      	cbz	r4, 11302 <cbvprintf+0x68a>
   112dc:	2d00      	cmp	r5, #0
   112de:	dd15      	ble.n	1130c <cbvprintf+0x694>
			conv->pad0_value = -decexp;
   112e0:	4262      	negs	r2, r4
   112e2:	42aa      	cmp	r2, r5
   112e4:	bfa8      	it	ge
   112e6:	462a      	movge	r2, r5
			conv->pad_postdp = (conv->pad0_value > 0);
   112e8:	2a00      	cmp	r2, #0
			conv->pad0_value = -decexp;
   112ea:	9217      	str	r2, [sp, #92]	; 0x5c
			precision -= conv->pad0_value;
   112ec:	eba5 0502 	sub.w	r5, r5, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   112f0:	bfd4      	ite	le
   112f2:	2200      	movle	r2, #0
   112f4:	2201      	movgt	r2, #1
   112f6:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   112fa:	f362 1145 	bfi	r1, r2, #5, #1
   112fe:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	while (precision > 0 && digit_count > 0) {
   11302:	2d00      	cmp	r5, #0
   11304:	dd02      	ble.n	1130c <cbvprintf+0x694>
   11306:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11308:	2a00      	cmp	r2, #0
   1130a:	dc53      	bgt.n	113b4 <cbvprintf+0x73c>
	if (prune_zero) {
   1130c:	9b04      	ldr	r3, [sp, #16]
   1130e:	2b00      	cmp	r3, #0
   11310:	d15b      	bne.n	113ca <cbvprintf+0x752>
	conv->pad0_pre_exp = precision;
   11312:	9518      	str	r5, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
   11314:	f007 02df 	and.w	r2, r7, #223	; 0xdf
   11318:	2a45      	cmp	r2, #69	; 0x45
   1131a:	d123      	bne.n	11364 <cbvprintf+0x6ec>
		if (decexp < 0) {
   1131c:	2c00      	cmp	r4, #0
			*buf++ = '-';
   1131e:	bfb4      	ite	lt
   11320:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   11322:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
   11324:	4641      	mov	r1, r8
			decexp = -decexp;
   11326:	bfb8      	it	lt
   11328:	4264      	neglt	r4, r4
		if (decexp >= 100) {
   1132a:	2c63      	cmp	r4, #99	; 0x63
		*buf++ = c;
   1132c:	f801 7b02 	strb.w	r7, [r1], #2
			*buf++ = '-';
   11330:	f888 2001 	strb.w	r2, [r8, #1]
		if (decexp >= 100) {
   11334:	dd0a      	ble.n	1134c <cbvprintf+0x6d4>
			*buf++ = (decexp / 100) + '0';
   11336:	2064      	movs	r0, #100	; 0x64
   11338:	fb94 f2f0 	sdiv	r2, r4, r0
			decexp %= 100;
   1133c:	fb00 4412 	mls	r4, r0, r2, r4
			*buf++ = (decexp / 100) + '0';
   11340:	f102 0530 	add.w	r5, r2, #48	; 0x30
   11344:	f108 0103 	add.w	r1, r8, #3
   11348:	f888 5002 	strb.w	r5, [r8, #2]
		*buf++ = (decexp / 10) + '0';
   1134c:	200a      	movs	r0, #10
   1134e:	fb94 f2f0 	sdiv	r2, r4, r0
   11352:	4688      	mov	r8, r1
		*buf++ = (decexp % 10) + '0';
   11354:	fb00 4412 	mls	r4, r0, r2, r4
		*buf++ = (decexp / 10) + '0';
   11358:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   1135c:	3430      	adds	r4, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   1135e:	f808 5b02 	strb.w	r5, [r8], #2
		*buf++ = (decexp % 10) + '0';
   11362:	704c      	strb	r4, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
   11364:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   11366:	2a00      	cmp	r2, #0
   11368:	dc3a      	bgt.n	113e0 <cbvprintf+0x768>
   1136a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1136c:	2a00      	cmp	r2, #0
   1136e:	bfd4      	ite	le
   11370:	2200      	movle	r2, #0
   11372:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
   11374:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   11378:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
   1137c:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
   1137e:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
   11382:	f888 2000 	strb.w	r2, [r8]
	return bps;
   11386:	e623      	b.n	10fd0 <cbvprintf+0x358>
		*buf = _get_digit(&fract, &digit_count);
   11388:	a911      	add	r1, sp, #68	; 0x44
   1138a:	a812      	add	r0, sp, #72	; 0x48
   1138c:	f003 feb9 	bl	15102 <_get_digit>
		if (conv->flag_hash || (precision > 0)) {
   11390:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		if (*buf++ != '0') {
   11394:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   11396:	bf18      	it	ne
   11398:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
   1139c:	069a      	lsls	r2, r3, #26
		*buf = _get_digit(&fract, &digit_count);
   1139e:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
		if (conv->flag_hash || (precision > 0)) {
   113a2:	d401      	bmi.n	113a8 <cbvprintf+0x730>
   113a4:	2d00      	cmp	r5, #0
   113a6:	dd0d      	ble.n	113c4 <cbvprintf+0x74c>
			*buf++ = '.';
   113a8:	232e      	movs	r3, #46	; 0x2e
   113aa:	f10d 0866 	add.w	r8, sp, #102	; 0x66
   113ae:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
   113b2:	e7a6      	b.n	11302 <cbvprintf+0x68a>
		*buf++ = _get_digit(&fract, &digit_count);
   113b4:	a911      	add	r1, sp, #68	; 0x44
   113b6:	a812      	add	r0, sp, #72	; 0x48
   113b8:	f003 fea3 	bl	15102 <_get_digit>
		precision--;
   113bc:	3d01      	subs	r5, #1
		*buf++ = _get_digit(&fract, &digit_count);
   113be:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   113c2:	e79e      	b.n	11302 <cbvprintf+0x68a>
		if (*buf++ != '0') {
   113c4:	f10d 0865 	add.w	r8, sp, #101	; 0x65
   113c8:	e7a0      	b.n	1130c <cbvprintf+0x694>
		conv->pad0_pre_exp = 0;
   113ca:	2200      	movs	r2, #0
   113cc:	9218      	str	r2, [sp, #96]	; 0x60
		while (*--buf == '0') {
   113ce:	4641      	mov	r1, r8
   113d0:	f818 2d01 	ldrb.w	r2, [r8, #-1]!
   113d4:	2a30      	cmp	r2, #48	; 0x30
   113d6:	d0fa      	beq.n	113ce <cbvprintf+0x756>
		if (*buf != '.') {
   113d8:	2a2e      	cmp	r2, #46	; 0x2e
   113da:	bf18      	it	ne
   113dc:	4688      	movne	r8, r1
   113de:	e799      	b.n	11314 <cbvprintf+0x69c>
		|| (conv->pad0_pre_exp > 0);
   113e0:	2201      	movs	r2, #1
   113e2:	e7c7      	b.n	11374 <cbvprintf+0x6fc>
			bpe = bps + 5;
   113e4:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 115c0 <cbvprintf+0x948>
		char sign = 0;
   113e8:	4606      	mov	r6, r0
			bps = "(nil)";
   113ea:	f1a8 0405 	sub.w	r4, r8, #5
   113ee:	e5f0      	b.n	10fd2 <cbvprintf+0x35a>
		} else if (conv.altform_0) {
   113f0:	070d      	lsls	r5, r1, #28
			nj_len += 1U;
   113f2:	bf48      	it	mi
   113f4:	3701      	addmi	r7, #1
   113f6:	e5f6      	b.n	10fe6 <cbvprintf+0x36e>
					OUTC(pad);
   113f8:	4651      	mov	r1, sl
   113fa:	4628      	mov	r0, r5
   113fc:	9b03      	ldr	r3, [sp, #12]
   113fe:	4798      	blx	r3
   11400:	2800      	cmp	r0, #0
   11402:	f6ff add0 	blt.w	10fa6 <cbvprintf+0x32e>
   11406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11408:	eba7 0903 	sub.w	r9, r7, r3
				while (width-- > 0) {
   1140c:	2b00      	cmp	r3, #0
   1140e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11412:	930a      	str	r3, [sp, #40]	; 0x28
   11414:	dcf0      	bgt.n	113f8 <cbvprintf+0x780>
		if (sign != 0) {
   11416:	b146      	cbz	r6, 1142a <cbvprintf+0x7b2>
			OUTC(sign);
   11418:	4651      	mov	r1, sl
   1141a:	4630      	mov	r0, r6
   1141c:	9b03      	ldr	r3, [sp, #12]
   1141e:	4798      	blx	r3
   11420:	2800      	cmp	r0, #0
   11422:	f6ff adc0 	blt.w	10fa6 <cbvprintf+0x32e>
   11426:	f109 0901 	add.w	r9, r9, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv.pad_fp) {
   1142a:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   1142e:	0655      	lsls	r5, r2, #25
   11430:	f140 8081 	bpl.w	11536 <cbvprintf+0x8be>
			if (conv.specifier_a) {
   11434:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
   11438:	2a00      	cmp	r2, #0
   1143a:	db2d      	blt.n	11498 <cbvprintf+0x820>
   1143c:	eba9 0904 	sub.w	r9, r9, r4
				while (isdigit((int)*cp)) {
   11440:	7820      	ldrb	r0, [r4, #0]
   11442:	4625      	mov	r5, r4
   11444:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   11448:	2a09      	cmp	r2, #9
   1144a:	eb09 0604 	add.w	r6, r9, r4
   1144e:	f104 0401 	add.w	r4, r4, #1
   11452:	d945      	bls.n	114e0 <cbvprintf+0x868>
				if (!conv.pad_postdp) {
   11454:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv.pad0_value;
   11458:	9c17      	ldr	r4, [sp, #92]	; 0x5c
				if (!conv.pad_postdp) {
   1145a:	0690      	lsls	r0, r2, #26
   1145c:	d406      	bmi.n	1146c <cbvprintf+0x7f4>
   1145e:	19a7      	adds	r7, r4, r6
					while (pad_len-- > 0) {
   11460:	2c00      	cmp	r4, #0
   11462:	eba7 0604 	sub.w	r6, r7, r4
   11466:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   1146a:	dc3f      	bgt.n	114ec <cbvprintf+0x874>
				if (*cp == '.') {
   1146c:	7828      	ldrb	r0, [r5, #0]
   1146e:	282e      	cmp	r0, #46	; 0x2e
   11470:	d10a      	bne.n	11488 <cbvprintf+0x810>
					OUTC(*cp++);
   11472:	4651      	mov	r1, sl
   11474:	9b03      	ldr	r3, [sp, #12]
   11476:	4798      	blx	r3
						OUTC('0');
   11478:	2800      	cmp	r0, #0
   1147a:	f6ff ad94 	blt.w	10fa6 <cbvprintf+0x32e>
					while (pad_len-- > 0) {
   1147e:	2c00      	cmp	r4, #0
						OUTC('0');
   11480:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   11484:	dc39      	bgt.n	114fa <cbvprintf+0x882>
					OUTC(*cp++);
   11486:	3501      	adds	r5, #1
   11488:	1b76      	subs	r6, r6, r5
   1148a:	e042      	b.n	11512 <cbvprintf+0x89a>
				char pad = ' ';
   1148c:	2520      	movs	r5, #32
					pad = '0';
   1148e:	970a      	str	r7, [sp, #40]	; 0x28
   11490:	444f      	add	r7, r9
   11492:	e7b8      	b.n	11406 <cbvprintf+0x78e>
			width -= (int)nj_len;
   11494:	970a      	str	r7, [sp, #40]	; 0x28
   11496:	e7be      	b.n	11416 <cbvprintf+0x79e>
			if (conv.specifier_a) {
   11498:	4625      	mov	r5, r4
   1149a:	eba9 0904 	sub.w	r9, r9, r4
   1149e:	462f      	mov	r7, r5
   114a0:	eb09 0405 	add.w	r4, r9, r5
				while (*cp != 'p') {
   114a4:	f815 0b01 	ldrb.w	r0, [r5], #1
   114a8:	2870      	cmp	r0, #112	; 0x70
   114aa:	d113      	bne.n	114d4 <cbvprintf+0x85c>
			while (pad_len-- > 0) {
   114ac:	9d18      	ldr	r5, [sp, #96]	; 0x60
   114ae:	4425      	add	r5, r4
   114b0:	1b2a      	subs	r2, r5, r4
   114b2:	2a00      	cmp	r2, #0
   114b4:	dc36      	bgt.n	11524 <cbvprintf+0x8ac>
			OUTS(cp, bpe);
   114b6:	4643      	mov	r3, r8
   114b8:	463a      	mov	r2, r7
   114ba:	4651      	mov	r1, sl
   114bc:	9803      	ldr	r0, [sp, #12]
   114be:	f003 fe82 	bl	151c6 <outs>
   114c2:	2800      	cmp	r0, #0
   114c4:	f6ff ad6f 	blt.w	10fa6 <cbvprintf+0x32e>
   114c8:	4420      	add	r0, r4
   114ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			while (pad_len-- > 0) {
   114cc:	4681      	mov	r9, r0
   114ce:	4403      	add	r3, r0
   114d0:	461d      	mov	r5, r3
   114d2:	e06f      	b.n	115b4 <cbvprintf+0x93c>
					OUTC(*cp++);
   114d4:	4651      	mov	r1, sl
   114d6:	9b03      	ldr	r3, [sp, #12]
   114d8:	4798      	blx	r3
   114da:	2800      	cmp	r0, #0
   114dc:	dadf      	bge.n	1149e <cbvprintf+0x826>
   114de:	e562      	b.n	10fa6 <cbvprintf+0x32e>
					OUTC(*cp++);
   114e0:	4651      	mov	r1, sl
   114e2:	9b03      	ldr	r3, [sp, #12]
   114e4:	4798      	blx	r3
   114e6:	2800      	cmp	r0, #0
   114e8:	daaa      	bge.n	11440 <cbvprintf+0x7c8>
   114ea:	e55c      	b.n	10fa6 <cbvprintf+0x32e>
						OUTC('0');
   114ec:	4651      	mov	r1, sl
   114ee:	2030      	movs	r0, #48	; 0x30
   114f0:	9b03      	ldr	r3, [sp, #12]
   114f2:	4798      	blx	r3
   114f4:	2800      	cmp	r0, #0
   114f6:	dab3      	bge.n	11460 <cbvprintf+0x7e8>
   114f8:	e555      	b.n	10fa6 <cbvprintf+0x32e>
						OUTC('0');
   114fa:	4651      	mov	r1, sl
   114fc:	2030      	movs	r0, #48	; 0x30
   114fe:	9b03      	ldr	r3, [sp, #12]
   11500:	4798      	blx	r3
   11502:	3c01      	subs	r4, #1
   11504:	e7b8      	b.n	11478 <cbvprintf+0x800>
					OUTC(*cp++);
   11506:	4651      	mov	r1, sl
   11508:	9b03      	ldr	r3, [sp, #12]
   1150a:	4798      	blx	r3
   1150c:	2800      	cmp	r0, #0
   1150e:	f6ff ad4a 	blt.w	10fa6 <cbvprintf+0x32e>
   11512:	462f      	mov	r7, r5
   11514:	1974      	adds	r4, r6, r5
				while (isdigit((int)*cp)) {
   11516:	f815 0b01 	ldrb.w	r0, [r5], #1
   1151a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   1151e:	2a09      	cmp	r2, #9
   11520:	d9f1      	bls.n	11506 <cbvprintf+0x88e>
   11522:	e7c3      	b.n	114ac <cbvprintf+0x834>
				OUTC('0');
   11524:	4651      	mov	r1, sl
   11526:	2030      	movs	r0, #48	; 0x30
   11528:	9b03      	ldr	r3, [sp, #12]
   1152a:	4798      	blx	r3
   1152c:	2800      	cmp	r0, #0
   1152e:	f6ff ad3a 	blt.w	10fa6 <cbvprintf+0x32e>
   11532:	3401      	adds	r4, #1
   11534:	e7bc      	b.n	114b0 <cbvprintf+0x838>
			if (conv.altform_0c | conv.altform_0) {
   11536:	06d1      	lsls	r1, r2, #27
   11538:	d401      	bmi.n	1153e <cbvprintf+0x8c6>
   1153a:	0712      	lsls	r2, r2, #28
   1153c:	d508      	bpl.n	11550 <cbvprintf+0x8d8>
				OUTC('0');
   1153e:	4651      	mov	r1, sl
   11540:	2030      	movs	r0, #48	; 0x30
   11542:	9b03      	ldr	r3, [sp, #12]
   11544:	4798      	blx	r3
   11546:	2800      	cmp	r0, #0
   11548:	f6ff ad2d 	blt.w	10fa6 <cbvprintf+0x32e>
   1154c:	f109 0901 	add.w	r9, r9, #1
			if (conv.altform_0c) {
   11550:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   11554:	06d3      	lsls	r3, r2, #27
   11556:	d509      	bpl.n	1156c <cbvprintf+0x8f4>
				OUTC(conv.specifier);
   11558:	4651      	mov	r1, sl
   1155a:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
   1155e:	9b03      	ldr	r3, [sp, #12]
   11560:	4798      	blx	r3
   11562:	2800      	cmp	r0, #0
   11564:	f6ff ad1f 	blt.w	10fa6 <cbvprintf+0x32e>
   11568:	f109 0901 	add.w	r9, r9, #1
			while (pad_len-- > 0) {
   1156c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   1156e:	444d      	add	r5, r9
   11570:	eba5 0209 	sub.w	r2, r5, r9
   11574:	2a00      	cmp	r2, #0
   11576:	dc0a      	bgt.n	1158e <cbvprintf+0x916>
			OUTS(bps, bpe);
   11578:	4643      	mov	r3, r8
   1157a:	4622      	mov	r2, r4
   1157c:	4651      	mov	r1, sl
   1157e:	9803      	ldr	r0, [sp, #12]
   11580:	f003 fe21 	bl	151c6 <outs>
   11584:	2800      	cmp	r0, #0
   11586:	f6ff ad0e 	blt.w	10fa6 <cbvprintf+0x32e>
   1158a:	4448      	add	r0, r9
   1158c:	e79d      	b.n	114ca <cbvprintf+0x852>
				OUTC('0');
   1158e:	4651      	mov	r1, sl
   11590:	2030      	movs	r0, #48	; 0x30
   11592:	9b03      	ldr	r3, [sp, #12]
   11594:	4798      	blx	r3
   11596:	2800      	cmp	r0, #0
   11598:	f6ff ad05 	blt.w	10fa6 <cbvprintf+0x32e>
   1159c:	f109 0901 	add.w	r9, r9, #1
   115a0:	e7e6      	b.n	11570 <cbvprintf+0x8f8>
			OUTC(' ');
   115a2:	4651      	mov	r1, sl
   115a4:	2020      	movs	r0, #32
   115a6:	9b03      	ldr	r3, [sp, #12]
   115a8:	4798      	blx	r3
   115aa:	2800      	cmp	r0, #0
   115ac:	f6ff acfb 	blt.w	10fa6 <cbvprintf+0x32e>
   115b0:	f109 0901 	add.w	r9, r9, #1
		while (width > 0) {
   115b4:	eba5 0309 	sub.w	r3, r5, r9
   115b8:	2b00      	cmp	r3, #0
   115ba:	dcf2      	bgt.n	115a2 <cbvprintf+0x92a>
   115bc:	f7ff bbde 	b.w	10d7c <cbvprintf+0x104>
   115c0:	00015d62 	.word	0x00015d62

000115c4 <nordicsemi_nrf91_init>:
   115c4:	f04f 0220 	mov.w	r2, #32
   115c8:	f3ef 8311 	mrs	r3, BASEPRI
   115cc:	f382 8811 	msr	BASEPRI, r2
   115d0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   115d4:	2101      	movs	r1, #1
   115d6:	4a04      	ldr	r2, [pc, #16]	; (115e8 <nordicsemi_nrf91_init+0x24>)
   115d8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   115dc:	f383 8811 	msr	BASEPRI, r3
   115e0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   115e4:	2000      	movs	r0, #0
   115e6:	4770      	bx	lr
   115e8:	50039000 	.word	0x50039000

000115ec <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   115ec:	b120      	cbz	r0, 115f8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   115ee:	4b03      	ldr	r3, [pc, #12]	; (115fc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   115f0:	0180      	lsls	r0, r0, #6
   115f2:	f043 0301 	orr.w	r3, r3, #1
   115f6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   115f8:	4770      	bx	lr
   115fa:	bf00      	nop
   115fc:	00015ae0 	.word	0x00015ae0

00011600 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   11600:	b507      	push	{r0, r1, r2, lr}
   11602:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   11604:	f04f 0220 	mov.w	r2, #32
   11608:	f3ef 8311 	mrs	r3, BASEPRI
   1160c:	f382 8811 	msr	BASEPRI, r2
   11610:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   11614:	f003 fe8a 	bl	1532c <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   11618:	9801      	ldr	r0, [sp, #4]
   1161a:	f000 ffe5 	bl	125e8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1161e:	4803      	ldr	r0, [pc, #12]	; (1162c <sys_reboot+0x2c>)
   11620:	f003 fb9e 	bl	14d60 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11624:	f000 fe20 	bl	12268 <arch_cpu_idle>
   11628:	e7fc      	b.n	11624 <sys_reboot+0x24>
   1162a:	bf00      	nop
   1162c:	00015d63 	.word	0x00015d63

00011630 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
   11630:	4a0e      	ldr	r2, [pc, #56]	; (1166c <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11632:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   11634:	1a84      	subs	r4, r0, r2
{
   11636:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   11638:	200c      	movs	r0, #12
{
   1163a:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   1163c:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1163e:	10a3      	asrs	r3, r4, #2
   11640:	4c0b      	ldr	r4, [pc, #44]	; (11670 <onoff_stop+0x40>)
   11642:	435c      	muls	r4, r3
   11644:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   11646:	fb00 2004 	mla	r0, r0, r4, r2
   1164a:	4408      	add	r0, r1
   1164c:	f003 fde0 	bl	15210 <set_off_state>
	if (err < 0) {
   11650:	1e01      	subs	r1, r0, #0
   11652:	db05      	blt.n	11660 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   11654:	4b07      	ldr	r3, [pc, #28]	; (11674 <onoff_stop+0x44>)
   11656:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1165a:	6863      	ldr	r3, [r4, #4]
   1165c:	4798      	blx	r3
	return 0;
   1165e:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   11660:	4628      	mov	r0, r5
   11662:	4633      	mov	r3, r6
}
   11664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   11668:	4718      	bx	r3
   1166a:	bf00      	nop
   1166c:	20000230 	.word	0x20000230
   11670:	b6db6db7 	.word	0xb6db6db7
   11674:	00015afc 	.word	0x00015afc

00011678 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   1167c:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   1167e:	4e10      	ldr	r6, [pc, #64]	; (116c0 <onoff_start+0x48>)
{
   11680:	4680      	mov	r8, r0
	size_t offset = (size_t)(mgr - data->mgr);
   11682:	1b84      	subs	r4, r0, r6
   11684:	10a3      	asrs	r3, r4, #2
   11686:	4c0f      	ldr	r4, [pc, #60]	; (116c4 <onoff_start+0x4c>)
{
   11688:	460f      	mov	r7, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1168a:	435c      	muls	r4, r3
   1168c:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   1168e:	4365      	muls	r5, r4
   11690:	f105 0040 	add.w	r0, r5, #64	; 0x40
   11694:	2140      	movs	r1, #64	; 0x40
   11696:	4430      	add	r0, r6
   11698:	f003 fdd3 	bl	15242 <set_starting_state>
	if (err < 0) {
   1169c:	1e01      	subs	r1, r0, #0
   1169e:	db09      	blt.n	116b4 <onoff_start+0x3c>
	subdata->cb = cb;
   116a0:	4a09      	ldr	r2, [pc, #36]	; (116c8 <onoff_start+0x50>)
   116a2:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
   116a4:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   116a8:	4b08      	ldr	r3, [pc, #32]	; (116cc <onoff_start+0x54>)
   116aa:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   116ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   116b2:	4718      	bx	r3
		notify(mgr, err);
   116b4:	4640      	mov	r0, r8
   116b6:	463b      	mov	r3, r7
}
   116b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   116bc:	4718      	bx	r3
   116be:	bf00      	nop
   116c0:	20000230 	.word	0x20000230
   116c4:	b6db6db7 	.word	0xb6db6db7
   116c8:	000152a5 	.word	0x000152a5
   116cc:	00015afc 	.word	0x00015afc

000116d0 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   116d0:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   116d2:	2200      	movs	r2, #0
   116d4:	2101      	movs	r1, #1
{
   116d6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   116d8:	2005      	movs	r0, #5
   116da:	f000 fd6f 	bl	121bc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   116de:	2005      	movs	r0, #5
   116e0:	f000 fd4e 	bl	12180 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   116e4:	480f      	ldr	r0, [pc, #60]	; (11724 <clk_init+0x54>)
   116e6:	f001 faf9 	bl	12cdc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   116ea:	4b0f      	ldr	r3, [pc, #60]	; (11728 <clk_init+0x58>)
   116ec:	4298      	cmp	r0, r3
   116ee:	d115      	bne.n	1171c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   116f0:	f003 ff61 	bl	155b6 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   116f4:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   116f6:	490d      	ldr	r1, [pc, #52]	; (1172c <clk_init+0x5c>)
   116f8:	4630      	mov	r0, r6
   116fa:	f003 fb8e 	bl	14e1a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   116fe:	2800      	cmp	r0, #0
   11700:	db0b      	blt.n	1171a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11702:	2501      	movs	r5, #1
   11704:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   11706:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   11708:	4908      	ldr	r1, [pc, #32]	; (1172c <clk_init+0x5c>)
   1170a:	f104 001c 	add.w	r0, r4, #28
   1170e:	f003 fb84 	bl	14e1a <onoff_manager_init>
		if (err < 0) {
   11712:	2800      	cmp	r0, #0
   11714:	db01      	blt.n	1171a <clk_init+0x4a>
	}

	return 0;
   11716:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11718:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   1171a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1171c:	f06f 0004 	mvn.w	r0, #4
   11720:	e7fb      	b.n	1171a <clk_init+0x4a>
   11722:	bf00      	nop
   11724:	0001176d 	.word	0x0001176d
   11728:	0bad0000 	.word	0x0bad0000
   1172c:	00015b0c 	.word	0x00015b0c

00011730 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   11730:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   11732:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   11734:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   11736:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   11738:	434b      	muls	r3, r1
   1173a:	480a      	ldr	r0, [pc, #40]	; (11764 <clkstarted_handle.constprop.0+0x34>)
   1173c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1173e:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   11740:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   11744:	4418      	add	r0, r3
	sub_data->cb = NULL;
   11746:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
   11748:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   1174a:	f003 fd98 	bl	1527e <set_on_state>
	if (callback) {
   1174e:	b135      	cbz	r5, 1175e <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   11750:	462b      	mov	r3, r5
   11752:	9a01      	ldr	r2, [sp, #4]
   11754:	4804      	ldr	r0, [pc, #16]	; (11768 <clkstarted_handle.constprop.0+0x38>)
}
   11756:	b002      	add	sp, #8
   11758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1175c:	4718      	bx	r3
}
   1175e:	b002      	add	sp, #8
   11760:	bd70      	pop	{r4, r5, r6, pc}
   11762:	bf00      	nop
   11764:	20000230 	.word	0x20000230
   11768:	20000090 	.word	0x20000090

0001176c <clock_event_handler>:
	switch (event) {
   1176c:	b110      	cbz	r0, 11774 <clock_event_handler+0x8>
   1176e:	2801      	cmp	r0, #1
   11770:	d004      	beq.n	1177c <clock_event_handler+0x10>
   11772:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   11774:	4b03      	ldr	r3, [pc, #12]	; (11784 <clock_event_handler+0x18>)
   11776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   11778:	075b      	lsls	r3, r3, #29
   1177a:	d101      	bne.n	11780 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1177c:	f7ff bfd8 	b.w	11730 <clkstarted_handle.constprop.0>
}
   11780:	4770      	bx	lr
   11782:	bf00      	nop
   11784:	20000230 	.word	0x20000230

00011788 <generic_hfclk_start>:
{
   11788:	b508      	push	{r3, lr}
   1178a:	f04f 0320 	mov.w	r3, #32
   1178e:	f3ef 8111 	mrs	r1, BASEPRI
   11792:	f383 8811 	msr	BASEPRI, r3
   11796:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1179a:	4a12      	ldr	r2, [pc, #72]	; (117e4 <generic_hfclk_start+0x5c>)
   1179c:	6813      	ldr	r3, [r2, #0]
   1179e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   117a2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   117a6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   117a8:	d00c      	beq.n	117c4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   117aa:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   117ae:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   117b2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   117b6:	f013 0301 	ands.w	r3, r3, #1
   117ba:	d003      	beq.n	117c4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   117bc:	480a      	ldr	r0, [pc, #40]	; (117e8 <generic_hfclk_start+0x60>)
   117be:	f003 fd5e 	bl	1527e <set_on_state>
			already_started = true;
   117c2:	2301      	movs	r3, #1
	__asm__ volatile(
   117c4:	f381 8811 	msr	BASEPRI, r1
   117c8:	f3bf 8f6f 	isb	sy
	if (already_started) {
   117cc:	b123      	cbz	r3, 117d8 <generic_hfclk_start+0x50>
}
   117ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   117d2:	2000      	movs	r0, #0
   117d4:	f7ff bfac 	b.w	11730 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   117d8:	2001      	movs	r0, #1
}
   117da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   117de:	f001 ba8d 	b.w	12cfc <nrfx_clock_start>
   117e2:	bf00      	nop
   117e4:	20000280 	.word	0x20000280
   117e8:	20000270 	.word	0x20000270

000117ec <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   117ec:	4b07      	ldr	r3, [pc, #28]	; (1180c <generic_hfclk_stop+0x20>)
   117ee:	e8d3 2fef 	ldaex	r2, [r3]
   117f2:	f022 0102 	bic.w	r1, r2, #2
   117f6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   117fa:	2800      	cmp	r0, #0
   117fc:	d1f7      	bne.n	117ee <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   117fe:	07d3      	lsls	r3, r2, #31
   11800:	d402      	bmi.n	11808 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   11802:	2001      	movs	r0, #1
   11804:	f001 baac 	b.w	12d60 <nrfx_clock_stop>
}
   11808:	4770      	bx	lr
   1180a:	bf00      	nop
   1180c:	20000280 	.word	0x20000280

00011810 <api_blocking_start>:
{
   11810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11812:	2200      	movs	r2, #0
   11814:	2301      	movs	r3, #1
   11816:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1181a:	466b      	mov	r3, sp
   1181c:	4a08      	ldr	r2, [pc, #32]	; (11840 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1181e:	f8cd d000 	str.w	sp, [sp]
   11822:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11826:	f003 fd64 	bl	152f2 <api_start>
	if (err < 0) {
   1182a:	2800      	cmp	r0, #0
   1182c:	db05      	blt.n	1183a <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   1182e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   11832:	2300      	movs	r3, #0
   11834:	4668      	mov	r0, sp
   11836:	f002 f8f3 	bl	13a20 <z_impl_k_sem_take>
}
   1183a:	b005      	add	sp, #20
   1183c:	f85d fb04 	ldr.w	pc, [sp], #4
   11840:	000152b9 	.word	0x000152b9

00011844 <z_nrf_clock_control_lf_on>:
{
   11844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11848:	2201      	movs	r2, #1
   1184a:	4606      	mov	r6, r0
   1184c:	4939      	ldr	r1, [pc, #228]	; (11934 <z_nrf_clock_control_lf_on+0xf0>)
   1184e:	e8d1 3fef 	ldaex	r3, [r1]
   11852:	e8c1 2fe0 	stlex	r0, r2, [r1]
   11856:	2800      	cmp	r0, #0
   11858:	d1f9      	bne.n	1184e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1185a:	b933      	cbnz	r3, 1186a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1185c:	4936      	ldr	r1, [pc, #216]	; (11938 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   1185e:	4837      	ldr	r0, [pc, #220]	; (1193c <z_nrf_clock_control_lf_on+0xf8>)
   11860:	604b      	str	r3, [r1, #4]
   11862:	60cb      	str	r3, [r1, #12]
   11864:	608a      	str	r2, [r1, #8]
   11866:	f003 faeb 	bl	14e40 <onoff_request>
	switch (start_mode) {
   1186a:	1e73      	subs	r3, r6, #1
   1186c:	2b01      	cmp	r3, #1
   1186e:	d832      	bhi.n	118d6 <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   11870:	2e01      	cmp	r6, #1
   11872:	d107      	bne.n	11884 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   11874:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11878:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1187c:	f003 0303 	and.w	r3, r3, #3
   11880:	2b02      	cmp	r3, #2
   11882:	d028      	beq.n	118d6 <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11884:	f003 ff8e 	bl	157a4 <k_is_in_isr>
   11888:	4604      	mov	r4, r0
   1188a:	b918      	cbnz	r0, 11894 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
   1188c:	4b2c      	ldr	r3, [pc, #176]	; (11940 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   1188e:	781b      	ldrb	r3, [r3, #0]
   11890:	2b00      	cmp	r3, #0
   11892:	d147      	bne.n	11924 <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
   11894:	f04f 0320 	mov.w	r3, #32
   11898:	f3ef 8511 	mrs	r5, BASEPRI
   1189c:	f383 8811 	msr	BASEPRI, r3
   118a0:	f3bf 8f6f 	isb	sy
   118a4:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   118a6:	4f27      	ldr	r7, [pc, #156]	; (11944 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   118a8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 11948 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   118ac:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1194c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   118b0:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   118b4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   118b8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   118bc:	03d2      	lsls	r2, r2, #15
   118be:	d50c      	bpl.n	118da <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   118c0:	f003 0303 	and.w	r3, r3, #3
   118c4:	2b02      	cmp	r3, #2
   118c6:	d001      	beq.n	118cc <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   118c8:	2e01      	cmp	r6, #1
   118ca:	d106      	bne.n	118da <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   118cc:	b324      	cbz	r4, 11918 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
   118ce:	f385 8811 	msr	BASEPRI, r5
   118d2:	f3bf 8f6f 	isb	sy
}
   118d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   118da:	b1c4      	cbz	r4, 1190e <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   118dc:	4628      	mov	r0, r5
   118de:	f000 fcd1 	bl	12284 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   118e2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   118e6:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   118ea:	b2db      	uxtb	r3, r3
   118ec:	2b01      	cmp	r3, #1
   118ee:	d1df      	bne.n	118b0 <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   118f0:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   118f2:	2900      	cmp	r1, #0
   118f4:	d0dc      	beq.n	118b0 <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   118f6:	2100      	movs	r1, #0
   118f8:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   118fa:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   118fc:	2102      	movs	r1, #2
   118fe:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   11902:	2220      	movs	r2, #32
   11904:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11908:	f8c9 3000 	str.w	r3, [r9]
}
   1190c:	e7d0      	b.n	118b0 <z_nrf_clock_control_lf_on+0x6c>
	return z_impl_k_sleep(timeout);
   1190e:	2100      	movs	r1, #0
   11910:	2021      	movs	r0, #33	; 0x21
   11912:	f002 f83f 	bl	13994 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   11916:	e7e4      	b.n	118e2 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   11918:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1191c:	2202      	movs	r2, #2
   1191e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   11922:	e7d8      	b.n	118d6 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
   11924:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11928:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1192a:	4605      	mov	r5, r0
   1192c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   11930:	e7b9      	b.n	118a6 <z_nrf_clock_control_lf_on+0x62>
   11932:	bf00      	nop
   11934:	20000284 	.word	0x20000284
   11938:	20000220 	.word	0x20000220
   1193c:	2000024c 	.word	0x2000024c
   11940:	20000825 	.word	0x20000825
   11944:	50005104 	.word	0x50005104
   11948:	e000e100 	.word	0xe000e100
   1194c:	50005008 	.word	0x50005008

00011950 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   11950:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   11952:	4b08      	ldr	r3, [pc, #32]	; (11974 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   11954:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   11958:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1195c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   11960:	4290      	cmp	r0, r2
   11962:	d100      	bne.n	11966 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   11964:	4770      	bx	lr
   11966:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   1196a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1196c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   11970:	e7f2      	b.n	11958 <handle_next_cycle_case+0x8>
   11972:	bf00      	nop
   11974:	50015000 	.word	0x50015000

00011978 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11978:	2200      	movs	r2, #0
   1197a:	4b07      	ldr	r3, [pc, #28]	; (11998 <rtc_nrf_isr+0x20>)
   1197c:	601a      	str	r2, [r3, #0]
   1197e:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   11980:	4a06      	ldr	r2, [pc, #24]	; (1199c <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   11982:	4b07      	ldr	r3, [pc, #28]	; (119a0 <rtc_nrf_isr+0x28>)
   11984:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   11988:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   1198a:	1ac0      	subs	r0, r0, r3
   1198c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   11990:	4403      	add	r3, r0
   11992:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   11994:	f002 b9e8 	b.w	13d68 <z_clock_announce>
   11998:	50015140 	.word	0x50015140
   1199c:	20000288 	.word	0x20000288
   119a0:	50015000 	.word	0x50015000

000119a4 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   119a4:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   119a6:	2400      	movs	r4, #0
   119a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   119ac:	4d0e      	ldr	r5, [pc, #56]	; (119e8 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   119ae:	4b0f      	ldr	r3, [pc, #60]	; (119ec <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   119b0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   119b4:	601c      	str	r4, [r3, #0]
   119b6:	681b      	ldr	r3, [r3, #0]
   119b8:	4b0d      	ldr	r3, [pc, #52]	; (119f0 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   119ba:	2101      	movs	r1, #1
   119bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   119c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   119c4:	4622      	mov	r2, r4
   119c6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   119ca:	2015      	movs	r0, #21
   119cc:	f000 fbf6 	bl	121bc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   119d0:	2015      	movs	r0, #21
   119d2:	f000 fbd5 	bl	12180 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   119d6:	2301      	movs	r3, #1
   119d8:	4a06      	ldr	r2, [pc, #24]	; (119f4 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   119da:	2002      	movs	r0, #2
   119dc:	6013      	str	r3, [r2, #0]
   119de:	602b      	str	r3, [r5, #0]
   119e0:	f7ff ff30 	bl	11844 <z_nrf_clock_control_lf_on>

	return 0;
}
   119e4:	4620      	mov	r0, r4
   119e6:	bd38      	pop	{r3, r4, r5, pc}
   119e8:	50015000 	.word	0x50015000
   119ec:	50015140 	.word	0x50015140
   119f0:	e000e100 	.word	0xe000e100
   119f4:	50015008 	.word	0x50015008

000119f8 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   119f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   119fa:	4b2e      	ldr	r3, [pc, #184]	; (11ab4 <z_clock_set_timeout+0xbc>)
   119fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   11a00:	bf08      	it	eq
   11a02:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11a04:	3801      	subs	r0, #1
   11a06:	2800      	cmp	r0, #0
   11a08:	dd41      	ble.n	11a8e <z_clock_set_timeout+0x96>
   11a0a:	4298      	cmp	r0, r3
   11a0c:	bfa8      	it	ge
   11a0e:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   11a10:	4b29      	ldr	r3, [pc, #164]	; (11ab8 <z_clock_set_timeout+0xc0>)

	uint32_t unannounced = counter_sub(counter(), last_count);
   11a12:	492a      	ldr	r1, [pc, #168]	; (11abc <z_clock_set_timeout+0xc4>)
   11a14:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   11a18:	6809      	ldr	r1, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11a1a:	2600      	movs	r6, #0
	return (a - b) & COUNTER_MAX;
   11a1c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   11a1e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   11a22:	bf18      	it	ne
   11a24:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   11a26:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   11a2a:	3401      	adds	r4, #1
   11a2c:	4420      	add	r0, r4
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   11a2e:	4c21      	ldr	r4, [pc, #132]	; (11ab4 <z_clock_set_timeout+0xbc>)
   11a30:	4d23      	ldr	r5, [pc, #140]	; (11ac0 <z_clock_set_timeout+0xc8>)
   11a32:	42a0      	cmp	r0, r4
   11a34:	bf94      	ite	ls
   11a36:	180c      	addls	r4, r1, r0
   11a38:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   11a3a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   11a3e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   11a42:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   11a46:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11a4a:	602e      	str	r6, [r5, #0]
   11a4c:	682f      	ldr	r7, [r5, #0]
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   11a4e:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   11a52:	f8c3 7540 	str.w	r7, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   11a56:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	return (a - b) & COUNTER_MAX;
   11a5a:	1a53      	subs	r3, r2, r1
   11a5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   11a60:	2b01      	cmp	r3, #1
   11a62:	d104      	bne.n	11a6e <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
   11a64:	200f      	movs	r0, #15
   11a66:	f003 fea3 	bl	157b0 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11a6a:	602e      	str	r6, [r5, #0]
   11a6c:	682b      	ldr	r3, [r5, #0]
   11a6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   11a72:	4b14      	ldr	r3, [pc, #80]	; (11ac4 <z_clock_set_timeout+0xcc>)
   11a74:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   11a78:	4b0f      	ldr	r3, [pc, #60]	; (11ab8 <z_clock_set_timeout+0xc0>)
   11a7a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   11a7e:	1a22      	subs	r2, r4, r0
   11a80:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   11a84:	2a01      	cmp	r2, #1
   11a86:	d104      	bne.n	11a92 <z_clock_set_timeout+0x9a>
		handle_next_cycle_case(t);
   11a88:	f7ff ff62 	bl	11950 <handle_next_cycle_case>
   11a8c:	e00b      	b.n	11aa6 <z_clock_set_timeout+0xae>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11a8e:	2000      	movs	r0, #0
   11a90:	e7be      	b.n	11a10 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   11a92:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   11a96:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   11a9a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   11a9e:	1a24      	subs	r4, r4, r0
   11aa0:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   11aa2:	0223      	lsls	r3, r4, #8
   11aa4:	d4f0      	bmi.n	11a88 <z_clock_set_timeout+0x90>
    p_reg->INTENSET = mask;
   11aa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11aaa:	4b03      	ldr	r3, [pc, #12]	; (11ab8 <z_clock_set_timeout+0xc0>)
   11aac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   11ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ab2:	bf00      	nop
   11ab4:	007fffff 	.word	0x007fffff
   11ab8:	50015000 	.word	0x50015000
   11abc:	20000288 	.word	0x20000288
   11ac0:	50015140 	.word	0x50015140
   11ac4:	e000e100 	.word	0xe000e100

00011ac8 <z_clock_elapsed>:
	__asm__ volatile(
   11ac8:	f04f 0220 	mov.w	r2, #32
   11acc:	f3ef 8311 	mrs	r3, BASEPRI
   11ad0:	f382 8811 	msr	BASEPRI, r2
   11ad4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   11ad8:	4a06      	ldr	r2, [pc, #24]	; (11af4 <z_clock_elapsed+0x2c>)
   11ada:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   11ade:	4a06      	ldr	r2, [pc, #24]	; (11af8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   11ae0:	6812      	ldr	r2, [r2, #0]
   11ae2:	1a80      	subs	r0, r0, r2
   11ae4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   11ae8:	f383 8811 	msr	BASEPRI, r3
   11aec:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   11af0:	4770      	bx	lr
   11af2:	bf00      	nop
   11af4:	50015000 	.word	0x50015000
   11af8:	20000288 	.word	0x20000288

00011afc <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
   11afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   11afe:	2800      	cmp	r0, #0
{
   11b00:	461c      	mov	r4, r3

	for (size_t i = start; i < end; i++) {
   11b02:	460d      	mov	r5, r1
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   11b04:	bf14      	ite	ne
   11b06:	f44f 5300 	movne.w	r3, #8192	; 0x2000
   11b0a:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	for (size_t i = start; i < end; i++) {
   11b0e:	4e20      	ldr	r6, [pc, #128]	; (11b90 <config_regions+0x94>)
   11b10:	4295      	cmp	r5, r2
   11b12:	d332      	bcc.n	11b7a <config_regions+0x7e>
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
   11b14:	fb02 f003 	mul.w	r0, r2, r3
   11b18:	3a01      	subs	r2, #1
   11b1a:	434b      	muls	r3, r1
   11b1c:	9000      	str	r0, [sp, #0]
   11b1e:	481d      	ldr	r0, [pc, #116]	; (11b94 <config_regions+0x98>)
   11b20:	f003 f91e 	bl	14d60 <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
   11b24:	4b1c      	ldr	r3, [pc, #112]	; (11b98 <config_regions+0x9c>)
   11b26:	f014 0f10 	tst.w	r4, #16
   11b2a:	491c      	ldr	r1, [pc, #112]	; (11b9c <config_regions+0xa0>)
   11b2c:	481c      	ldr	r0, [pc, #112]	; (11ba0 <config_regions+0xa4>)
   11b2e:	bf08      	it	eq
   11b30:	4619      	moveq	r1, r3
   11b32:	f003 f915 	bl	14d60 <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
   11b36:	f014 0f04 	tst.w	r4, #4
   11b3a:	bf14      	ite	ne
   11b3c:	2172      	movne	r1, #114	; 0x72
   11b3e:	212d      	moveq	r1, #45	; 0x2d
   11b40:	4818      	ldr	r0, [pc, #96]	; (11ba4 <config_regions+0xa8>)
   11b42:	f003 f90d 	bl	14d60 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
   11b46:	f014 0f02 	tst.w	r4, #2
   11b4a:	bf14      	ite	ne
   11b4c:	2177      	movne	r1, #119	; 0x77
   11b4e:	212d      	moveq	r1, #45	; 0x2d
   11b50:	4814      	ldr	r0, [pc, #80]	; (11ba4 <config_regions+0xa8>)
   11b52:	f003 f905 	bl	14d60 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
   11b56:	f014 0f01 	tst.w	r4, #1
   11b5a:	bf0c      	ite	eq
   11b5c:	212d      	moveq	r1, #45	; 0x2d
   11b5e:	2178      	movne	r1, #120	; 0x78
   11b60:	4810      	ldr	r0, [pc, #64]	; (11ba4 <config_regions+0xa8>)
   11b62:	f003 f8fd 	bl	14d60 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
   11b66:	216c      	movs	r1, #108	; 0x6c
   11b68:	480e      	ldr	r0, [pc, #56]	; (11ba4 <config_regions+0xa8>)
   11b6a:	f003 f8f9 	bl	14d60 <printk>
	PRINT("\n");
   11b6e:	480e      	ldr	r0, [pc, #56]	; (11ba8 <config_regions+0xac>)
}
   11b70:	b003      	add	sp, #12
   11b72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
   11b76:	f003 b8f3 	b.w	14d60 <printk>
		if (ram) {
   11b7a:	b128      	cbz	r0, 11b88 <config_regions+0x8c>
			NRF_SPU->RAMREGION[i].PERM = perm;
   11b7c:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
   11b80:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
   11b84:	3501      	adds	r5, #1
   11b86:	e7c3      	b.n	11b10 <config_regions+0x14>
			NRF_SPU->FLASHREGION[i].PERM = perm;
   11b88:	f505 77c0 	add.w	r7, r5, #384	; 0x180
   11b8c:	e7f8      	b.n	11b80 <config_regions+0x84>
   11b8e:	bf00      	nop
   11b90:	50003000 	.word	0x50003000
   11b94:	00015dab 	.word	0x00015dab
   11b98:	00015d9f 	.word	0x00015d9f
   11b9c:	00015d96 	.word	0x00015d96
   11ba0:	00015f2a 	.word	0x00015f2a
   11ba4:	00015dc5 	.word	0x00015dc5
   11ba8:	000160f9 	.word	0x000160f9

00011bac <spm_config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(uint8_t id, bool dma_present)
   11bac:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
   11bae:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	db0c      	blt.n	11bce <spm_config_peripheral.constprop.0+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11bb4:	2201      	movs	r2, #1
   11bb6:	f000 011f 	and.w	r1, r0, #31
   11bba:	408a      	lsls	r2, r1
   11bbc:	095b      	lsrs	r3, r3, #5
   11bbe:	4910      	ldr	r1, [pc, #64]	; (11c00 <spm_config_peripheral.constprop.0+0x54>)
   11bc0:	3320      	adds	r3, #32
   11bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   11bc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11bca:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   11bce:	0083      	lsls	r3, r0, #2
   11bd0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   11bd4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   11bd8:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   11bda:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   11bde:	d006      	beq.n	11bee <spm_config_peripheral.constprop.0+0x42>
	return present && (usel || split);
   11be0:	2a00      	cmp	r2, #0
   11be2:	da07      	bge.n	11bf4 <spm_config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
   11be4:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
   11be8:	3a02      	subs	r2, #2
   11bea:	2a01      	cmp	r2, #1
   11bec:	d802      	bhi.n	11bf4 <spm_config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
   11bee:	4a05      	ldr	r2, [pc, #20]	; (11c04 <spm_config_peripheral.constprop.0+0x58>)
   11bf0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
   11bf4:	2101      	movs	r1, #1
   11bf6:	f003 fbec 	bl	153d2 <irq_target_state_set>
	return 0;
}
   11bfa:	2000      	movs	r0, #0
   11bfc:	bd08      	pop	{r3, pc}
   11bfe:	bf00      	nop
   11c00:	e000e100 	.word	0xe000e100
   11c04:	80000100 	.word	0x80000100

00011c08 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
   11c08:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   11c0a:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
{
   11c0e:	b085      	sub	sp, #20
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   11c10:	4d2e      	ldr	r5, [pc, #184]	; (11ccc <spm_jump+0xc4>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
   11c12:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   11c16:	482e      	ldr	r0, [pc, #184]	; (11cd0 <spm_jump+0xc8>)
   11c18:	f003 f8a2 	bl	14d60 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   11c1c:	6821      	ldr	r1, [r4, #0]
   11c1e:	482d      	ldr	r0, [pc, #180]	; (11cd4 <spm_jump+0xcc>)
   11c20:	f003 f89e 	bl	14d60 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   11c24:	6829      	ldr	r1, [r5, #0]
   11c26:	482c      	ldr	r0, [pc, #176]	; (11cd8 <spm_jump+0xd0>)
   11c28:	f003 f89a 	bl	14d60 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   11c2c:	2210      	movs	r2, #16
   11c2e:	2100      	movs	r1, #0
   11c30:	4668      	mov	r0, sp
   11c32:	f003 fc8d 	bl	15550 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
   11c36:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
   11c38:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   11c3a:	9300      	str	r3, [sp, #0]
   11c3c:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
   11c3e:	f000 fec1 	bl	129c4 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
   11c42:	2001      	movs	r0, #1
   11c44:	f000 feee 	bl	12a24 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
   11c48:	2000      	movs	r0, #0
   11c4a:	f000 fed7 	bl	129fc <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
   11c4e:	2000      	movs	r0, #0
   11c50:	f000 fefc 	bl	12a4c <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
   11c54:	2101      	movs	r1, #1
   11c56:	2000      	movs	r0, #0
   11c58:	f000 ff16 	bl	12a88 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
   11c5c:	f000 ff0a 	bl	12a74 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   11c60:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
   11c62:	481e      	ldr	r0, [pc, #120]	; (11cdc <spm_jump+0xd4>)
   11c64:	f003 f87c 	bl	14d60 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
   11c68:	2008      	movs	r0, #8
   11c6a:	f7ff ff9f 	bl	11bac <spm_config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   11c6e:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
   11c72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11c76:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
   11c7a:	0864      	lsrs	r4, r4, #1
   11c7c:	0064      	lsls	r4, r4, #1
   11c7e:	4620      	mov	r0, r4
   11c80:	4621      	mov	r1, r4
   11c82:	4622      	mov	r2, r4
   11c84:	4623      	mov	r3, r4
   11c86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   11c8a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   11c8e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   11c92:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   11c96:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   11c9a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   11c9e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   11ca2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   11ca6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   11caa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   11cae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   11cb2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   11cb6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   11cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   11cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   11cc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   11cc6:	f7fe fd33 	bl	10730 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
   11cca:	bf00      	nop
   11ccc:	0001c204 	.word	0x0001c204
   11cd0:	00015dc8 	.word	0x00015dc8
   11cd4:	00015ddf 	.word	0x00015ddf
   11cd8:	00015df4 	.word	0x00015df4
   11cdc:	00015e12 	.word	0x00015e12

00011ce0 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
   11ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
   11ce4:	483b      	ldr	r0, [pc, #236]	; (11dd4 <spm_config+0xf4>)
   11ce6:	f003 f83b 	bl	14d60 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
   11cea:	2100      	movs	r1, #0
   11cec:	f240 1317 	movw	r3, #279	; 0x117
   11cf0:	4608      	mov	r0, r1
   11cf2:	2203      	movs	r2, #3
   11cf4:	f7ff ff02 	bl	11afc <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
   11cf8:	f240 1307 	movw	r3, #263	; 0x107
   11cfc:	2220      	movs	r2, #32
   11cfe:	2103      	movs	r1, #3
   11d00:	2000      	movs	r0, #0
   11d02:	f7ff fefb 	bl	11afc <config_regions>
	PRINT("\n");
   11d06:	4834      	ldr	r0, [pc, #208]	; (11dd8 <spm_config+0xf8>)
   11d08:	f003 f82a 	bl	14d60 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   11d0c:	4b33      	ldr	r3, [pc, #204]	; (11ddc <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   11d0e:	4a34      	ldr	r2, [pc, #208]	; (11de0 <spm_config+0x100>)
   11d10:	f3c3 31c4 	ubfx	r1, r3, #15, #5
   11d14:	f3c3 030e 	ubfx	r3, r3, #0, #15
   11d18:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   11d1c:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   11d20:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   11d24:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
   11d28:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
   11d2c:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
   11d30:	482c      	ldr	r0, [pc, #176]	; (11de4 <spm_config+0x104>)
   11d32:	0152      	lsls	r2, r2, #5
   11d34:	f003 f814 	bl	14d60 <printk>
	PRINT("\n");
   11d38:	4827      	ldr	r0, [pc, #156]	; (11dd8 <spm_config+0xf8>)
   11d3a:	f003 f811 	bl	14d60 <printk>
	int err = spm_secure_services_init();
   11d3e:	f003 faf6 	bl	1532e <spm_secure_services_init>
	if (err != 0) {
   11d42:	4601      	mov	r1, r0
   11d44:	b110      	cbz	r0, 11d4c <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
   11d46:	4828      	ldr	r0, [pc, #160]	; (11de8 <spm_config+0x108>)
   11d48:	f003 f80a 	bl	14d60 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   11d4c:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
   11d4e:	4827      	ldr	r0, [pc, #156]	; (11dec <spm_config+0x10c>)
   11d50:	f003 f806 	bl	14d60 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
   11d54:	f240 1317 	movw	r3, #279	; 0x117
   11d58:	2208      	movs	r2, #8
   11d5a:	2100      	movs	r1, #0
   11d5c:	2001      	movs	r0, #1
   11d5e:	f7ff fecd 	bl	11afc <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
   11d62:	4d1f      	ldr	r5, [pc, #124]	; (11de0 <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
   11d64:	f240 1307 	movw	r3, #263	; 0x107
   11d68:	2220      	movs	r2, #32
   11d6a:	2108      	movs	r1, #8
   11d6c:	2001      	movs	r0, #1
   11d6e:	f7ff fec5 	bl	11afc <config_regions>
	PRINT("\n");
   11d72:	4819      	ldr	r0, [pc, #100]	; (11dd8 <spm_config+0xf8>)
   11d74:	f002 fff4 	bl	14d60 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   11d78:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
   11d7c:	481c      	ldr	r0, [pc, #112]	; (11df0 <spm_config+0x110>)
   11d7e:	f002 ffef 	bl	14d60 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
   11d82:	4f1c      	ldr	r7, [pc, #112]	; (11df4 <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
   11d84:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
   11d88:	f8df 807c 	ldr.w	r8, [pc, #124]	; 11e08 <spm_config+0x128>
   11d8c:	4d1a      	ldr	r5, [pc, #104]	; (11df8 <spm_config+0x118>)
   11d8e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 11e0c <spm_config+0x12c>
   11d92:	796e      	ldrb	r6, [r5, #5]
   11d94:	4621      	mov	r1, r4
   11d96:	2e00      	cmp	r6, #0
   11d98:	bf14      	ite	ne
   11d9a:	463b      	movne	r3, r7
   11d9c:	4643      	moveq	r3, r8
   11d9e:	4648      	mov	r0, r9
   11da0:	682a      	ldr	r2, [r5, #0]
   11da2:	f002 ffdd 	bl	14d60 <printk>
		if (!periph[i].nonsecure) {
   11da6:	b966      	cbnz	r6, 11dc2 <spm_config+0xe2>
			PRINT("\tSKIP\n");
   11da8:	4814      	ldr	r0, [pc, #80]	; (11dfc <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   11daa:	3401      	adds	r4, #1
			PRINT("\tOK\n");
   11dac:	f002 ffd8 	bl	14d60 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   11db0:	2c1a      	cmp	r4, #26
   11db2:	f105 0508 	add.w	r5, r5, #8
   11db6:	d1ec      	bne.n	11d92 <spm_config+0xb2>
	PRINT("\n");
   11db8:	4807      	ldr	r0, [pc, #28]	; (11dd8 <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
   11dba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
   11dbe:	f002 bfcf 	b.w	14d60 <printk>
		err = spm_config_peripheral(periph[i].id, false);
   11dc2:	7928      	ldrb	r0, [r5, #4]
   11dc4:	f7ff fef2 	bl	11bac <spm_config_peripheral.constprop.0>
		if (err) {
   11dc8:	b108      	cbz	r0, 11dce <spm_config+0xee>
			PRINT("\tERROR\n");
   11dca:	480d      	ldr	r0, [pc, #52]	; (11e00 <spm_config+0x120>)
   11dcc:	e7ed      	b.n	11daa <spm_config+0xca>
			PRINT("\tOK\n");
   11dce:	480d      	ldr	r0, [pc, #52]	; (11e04 <spm_config+0x124>)
   11dd0:	e7eb      	b.n	11daa <spm_config+0xca>
   11dd2:	bf00      	nop
   11dd4:	00015e48 	.word	0x00015e48
   11dd8:	000160f9 	.word	0x000160f9
   11ddc:	00017fe0 	.word	0x00017fe0
   11de0:	50003000 	.word	0x50003000
   11de4:	00015e6c 	.word	0x00015e6c
   11de8:	00015eb2 	.word	0x00015eb2
   11dec:	00015ee2 	.word	0x00015ee2
   11df0:	00015f04 	.word	0x00015f04
   11df4:	00015e3d 	.word	0x00015e3d
   11df8:	00015b18 	.word	0x00015b18
   11dfc:	00015f2d 	.word	0x00015f2d
   11e00:	00015f34 	.word	0x00015f34
   11e04:	00015f3c 	.word	0x00015f3c
   11e08:	00015da3 	.word	0x00015da3
   11e0c:	00015f20 	.word	0x00015f20

00011e10 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
   11e10:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
   11e12:	2800      	cmp	r0, #0
   11e14:	d050      	beq.n	11eb8 <__acle_se_spm_request_read_nse+0xa8>
   11e16:	2a00      	cmp	r2, #0
   11e18:	d04e      	beq.n	11eb8 <__acle_se_spm_request_read_nse+0xa8>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		uint32_t start = ranges[i].start;
		uint32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
   11e1a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   11e1e:	d348      	bcc.n	11eb2 <__acle_se_spm_request_read_nse+0xa2>
   11e20:	1853      	adds	r3, r2, r1
   11e22:	f5b3 3f81 	cmp.w	r3, #66048	; 0x10200
   11e26:	d906      	bls.n	11e36 <__acle_se_spm_request_read_nse+0x26>
   11e28:	4c25      	ldr	r4, [pc, #148]	; (11ec0 <__acle_se_spm_request_read_nse+0xb0>)
   11e2a:	42a1      	cmp	r1, r4
   11e2c:	d93b      	bls.n	11ea6 <__acle_se_spm_request_read_nse+0x96>
   11e2e:	f604 241d 	addw	r4, r4, #2589	; 0xa1d
   11e32:	42a3      	cmp	r3, r4
   11e34:	d83a      	bhi.n	11eac <__acle_se_spm_request_read_nse+0x9c>
			memcpy(destination, (const void *)addr, len);
   11e36:	f003 fb60 	bl	154fa <memcpy>
			return 0;
   11e3a:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
   11e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11e40:	4671      	mov	r1, lr
   11e42:	4672      	mov	r2, lr
   11e44:	4673      	mov	r3, lr
   11e46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   11e4a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   11e4e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   11e52:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   11e56:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   11e5a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   11e5e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   11e62:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   11e66:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   11e6a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   11e6e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   11e72:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   11e76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   11e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   11e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   11e82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   11e86:	f38e 8c00 	msr	CPSR_fs, lr
   11e8a:	b410      	push	{r4}
   11e8c:	eef1 ca10 	vmrs	ip, fpscr
   11e90:	f64f 7460 	movw	r4, #65376	; 0xff60
   11e94:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   11e98:	ea0c 0c04 	and.w	ip, ip, r4
   11e9c:	eee1 ca10 	vmsr	fpscr, ip
   11ea0:	bc10      	pop	{r4}
   11ea2:	46f4      	mov	ip, lr
   11ea4:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
   11ea6:	4c07      	ldr	r4, [pc, #28]	; (11ec4 <__acle_se_spm_request_read_nse+0xb4>)
   11ea8:	42a1      	cmp	r1, r4
   11eaa:	d902      	bls.n	11eb2 <__acle_se_spm_request_read_nse+0xa2>
   11eac:	4c06      	ldr	r4, [pc, #24]	; (11ec8 <__acle_se_spm_request_read_nse+0xb8>)
   11eae:	42a3      	cmp	r3, r4
   11eb0:	d9c1      	bls.n	11e36 <__acle_se_spm_request_read_nse+0x26>
	return -EPERM;
   11eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11eb6:	e7c1      	b.n	11e3c <__acle_se_spm_request_read_nse+0x2c>
		return -EINVAL;
   11eb8:	f06f 0015 	mvn.w	r0, #21
   11ebc:	e7be      	b.n	11e3c <__acle_se_spm_request_read_nse+0x2c>
   11ebe:	bf00      	nop
   11ec0:	00ff0203 	.word	0x00ff0203
   11ec4:	00ff012f 	.word	0x00ff012f
   11ec8:	00ff0138 	.word	0x00ff0138

00011ecc <__acle_se_spm_firmware_info_nse>:


#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
   11ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ed0:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
   11ed2:	460e      	mov	r6, r1
{
   11ed4:	b085      	sub	sp, #20
	if (info == NULL) {
   11ed6:	2900      	cmp	r1, #0
   11ed8:	d054      	beq.n	11f84 <__acle_se_spm_firmware_info_nse+0xb8>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   11eda:	f04f 0800 	mov.w	r8, #0
   11ede:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 11f98 <__acle_se_spm_firmware_info_nse+0xcc>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   11ee2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 11f9c <__acle_se_spm_firmware_info_nse+0xd0>
   11ee6:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
   11ee8:	f85b 5b04 	ldr.w	r5, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   11eec:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
   11ef0:	444d      	add	r5, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   11ef2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
   11ef6:	220c      	movs	r2, #12
   11ef8:	4639      	mov	r1, r7
   11efa:	4628      	mov	r0, r5
   11efc:	f003 fad6 	bl	154ac <memcmp>
   11f00:	4604      	mov	r4, r0
   11f02:	b908      	cbnz	r0, 11f08 <__acle_se_spm_firmware_info_nse+0x3c>
		if (finfo) {
   11f04:	2d00      	cmp	r5, #0
   11f06:	d140      	bne.n	11f8a <__acle_se_spm_firmware_info_nse+0xbe>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   11f08:	f108 0801 	add.w	r8, r8, #1
   11f0c:	f1b8 0f05 	cmp.w	r8, #5
   11f10:	d1ea      	bne.n	11ee8 <__acle_se_spm_firmware_info_nse+0x1c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
   11f12:	f06f 040d 	mvn.w	r4, #13
}
   11f16:	4620      	mov	r0, r4
   11f18:	b005      	add	sp, #20
   11f1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   11f1e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   11f22:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   11f26:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   11f2a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   11f2e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   11f32:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   11f36:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   11f3a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   11f3e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   11f42:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   11f46:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   11f4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   11f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   11f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   11f56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f5a:	4671      	mov	r1, lr
   11f5c:	4672      	mov	r2, lr
   11f5e:	4673      	mov	r3, lr
   11f60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   11f64:	f38e 8c00 	msr	CPSR_fs, lr
   11f68:	b410      	push	{r4}
   11f6a:	eef1 ca10 	vmrs	ip, fpscr
   11f6e:	f64f 7460 	movw	r4, #65376	; 0xff60
   11f72:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   11f76:	ea0c 0c04 	and.w	ip, ip, r4
   11f7a:	eee1 ca10 	vmsr	fpscr, ip
   11f7e:	bc10      	pop	{r4}
   11f80:	46f4      	mov	ip, lr
   11f82:	4774      	bxns	lr
		return -EINVAL;
   11f84:	f06f 0415 	mvn.w	r4, #21
   11f88:	e7c5      	b.n	11f16 <__acle_se_spm_firmware_info_nse+0x4a>
		memcpy(info, tmp_info, sizeof(*tmp_info));
   11f8a:	223c      	movs	r2, #60	; 0x3c
   11f8c:	4629      	mov	r1, r5
   11f8e:	4630      	mov	r0, r6
   11f90:	f003 fab3 	bl	154fa <memcpy>
		return 0;
   11f94:	e7bf      	b.n	11f16 <__acle_se_spm_firmware_info_nse+0x4a>
   11f96:	bf00      	nop
   11f98:	00015be8 	.word	0x00015be8
   11f9c:	00015ab0 	.word	0x00015ab0

00011fa0 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   11fa0:	4801      	ldr	r0, [pc, #4]	; (11fa8 <nrf_cc3xx_platform_abort_init+0x8>)
   11fa2:	f002 b9a3 	b.w	142ec <nrf_cc3xx_platform_set_abort>
   11fa6:	bf00      	nop
   11fa8:	00015bfc 	.word	0x00015bfc

00011fac <mutex_unlock_platform>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   11fac:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   11fae:	b130      	cbz	r0, 11fbe <mutex_unlock_platform+0x12>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   11fb0:	6843      	ldr	r3, [r0, #4]
   11fb2:	b13b      	cbz	r3, 11fc4 <mutex_unlock_platform+0x18>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
   11fb4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   11fb6:	f001 f93d 	bl	13234 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC3XX_PLATFORM_SUCCESS;
   11fba:	2000      	movs	r0, #0
}
   11fbc:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   11fbe:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   11fc2:	e7fb      	b.n	11fbc <mutex_unlock_platform+0x10>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   11fc4:	4800      	ldr	r0, [pc, #0]	; (11fc8 <mutex_unlock_platform+0x1c>)
   11fc6:	e7f9      	b.n	11fbc <mutex_unlock_platform+0x10>
   11fc8:	ffff8fea 	.word	0xffff8fea

00011fcc <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   11fcc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   11fce:	4604      	mov	r4, r0
   11fd0:	b918      	cbnz	r0, 11fda <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   11fd2:	4b0b      	ldr	r3, [pc, #44]	; (12000 <mutex_free_platform+0x34>)
   11fd4:	480b      	ldr	r0, [pc, #44]	; (12004 <mutex_free_platform+0x38>)
   11fd6:	685b      	ldr	r3, [r3, #4]
   11fd8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   11fda:	6861      	ldr	r1, [r4, #4]
   11fdc:	b159      	cbz	r1, 11ff6 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   11fde:	f011 0102 	ands.w	r1, r1, #2
   11fe2:	6820      	ldr	r0, [r4, #0]
   11fe4:	d008      	beq.n	11ff8 <mutex_free_platform+0x2c>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
   11fe6:	4601      	mov	r1, r0
   11fe8:	4807      	ldr	r0, [pc, #28]	; (12008 <mutex_free_platform+0x3c>)
   11fea:	f001 f881 	bl	130f0 <k_mem_slab_free>
        mutex->mutex = NULL;
   11fee:	2300      	movs	r3, #0
   11ff0:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   11ff2:	2300      	movs	r3, #0
   11ff4:	6063      	str	r3, [r4, #4]
}
   11ff6:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   11ff8:	2214      	movs	r2, #20
   11ffa:	f003 faa9 	bl	15550 <memset>
   11ffe:	e7f8      	b.n	11ff2 <mutex_free_platform+0x26>
   12000:	20000044 	.word	0x20000044
   12004:	0001603d 	.word	0x0001603d
   12008:	2000028c 	.word	0x2000028c

0001200c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1200c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1200e:	4604      	mov	r4, r0
   12010:	b918      	cbnz	r0, 1201a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   12012:	4b14      	ldr	r3, [pc, #80]	; (12064 <mutex_init_platform+0x58>)
   12014:	4814      	ldr	r0, [pc, #80]	; (12068 <mutex_init_platform+0x5c>)
   12016:	685b      	ldr	r3, [r3, #4]
   12018:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   1201a:	6863      	ldr	r3, [r4, #4]
   1201c:	b9cb      	cbnz	r3, 12052 <mutex_init_platform+0x46>
   1201e:	6823      	ldr	r3, [r4, #0]
   12020:	b9bb      	cbnz	r3, 12052 <mutex_init_platform+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   12022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1202a:	4621      	mov	r1, r4
   1202c:	480f      	ldr	r0, [pc, #60]	; (1206c <mutex_init_platform+0x60>)
   1202e:	f001 f82d 	bl	1308c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   12032:	b908      	cbnz	r0, 12038 <mutex_init_platform+0x2c>
   12034:	6823      	ldr	r3, [r4, #0]
   12036:	b91b      	cbnz	r3, 12040 <mutex_init_platform+0x34>
            platform_abort_apis.abort_fn(
   12038:	4b0a      	ldr	r3, [pc, #40]	; (12064 <mutex_init_platform+0x58>)
   1203a:	480d      	ldr	r0, [pc, #52]	; (12070 <mutex_init_platform+0x64>)
   1203c:	685b      	ldr	r3, [r3, #4]
   1203e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12040:	2214      	movs	r2, #20
   12042:	2100      	movs	r1, #0
   12044:	6820      	ldr	r0, [r4, #0]
   12046:	f003 fa83 	bl	15550 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   1204a:	6863      	ldr	r3, [r4, #4]
   1204c:	f043 0302 	orr.w	r3, r3, #2
   12050:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   12052:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   12054:	f003 faf3 	bl	1563e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   12058:	6863      	ldr	r3, [r4, #4]
   1205a:	f043 0301 	orr.w	r3, r3, #1
   1205e:	6063      	str	r3, [r4, #4]
}
   12060:	bd10      	pop	{r4, pc}
   12062:	bf00      	nop
   12064:	20000044 	.word	0x20000044
   12068:	0001603d 	.word	0x0001603d
   1206c:	2000028c 	.word	0x2000028c
   12070:	00016063 	.word	0x00016063

00012074 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12074:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   12076:	b168      	cbz	r0, 12094 <mutex_lock_platform+0x20>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12078:	6843      	ldr	r3, [r0, #4]
   1207a:	b173      	cbz	r3, 1209a <mutex_lock_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   1207c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1207e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12086:	f001 f85d 	bl	13144 <z_impl_k_mutex_lock>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   1208a:	4b05      	ldr	r3, [pc, #20]	; (120a0 <mutex_lock_platform+0x2c>)
    if (ret == 0) {
   1208c:	2800      	cmp	r0, #0
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   1208e:	bf18      	it	ne
   12090:	4618      	movne	r0, r3
}
   12092:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12094:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12098:	e7fb      	b.n	12092 <mutex_lock_platform+0x1e>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1209a:	4802      	ldr	r0, [pc, #8]	; (120a4 <mutex_lock_platform+0x30>)
   1209c:	e7f9      	b.n	12092 <mutex_lock_platform+0x1e>
   1209e:	bf00      	nop
   120a0:	ffff8fe9 	.word	0xffff8fe9
   120a4:	ffff8fea 	.word	0xffff8fea

000120a8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   120a8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   120aa:	4906      	ldr	r1, [pc, #24]	; (120c4 <nrf_cc3xx_platform_mutex_init+0x1c>)
   120ac:	2340      	movs	r3, #64	; 0x40
   120ae:	2214      	movs	r2, #20
   120b0:	4805      	ldr	r0, [pc, #20]	; (120c8 <nrf_cc3xx_platform_mutex_init+0x20>)
   120b2:	f003 faa9 	bl	15608 <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   120b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   120ba:	4904      	ldr	r1, [pc, #16]	; (120cc <nrf_cc3xx_platform_mutex_init+0x24>)
   120bc:	4804      	ldr	r0, [pc, #16]	; (120d0 <nrf_cc3xx_platform_mutex_init+0x28>)
   120be:	f002 b967 	b.w	14390 <nrf_cc3xx_platform_set_mutexes>
   120c2:	bf00      	nop
   120c4:	200002a8 	.word	0x200002a8
   120c8:	2000028c 	.word	0x2000028c
   120cc:	00015c14 	.word	0x00015c14
   120d0:	00015c04 	.word	0x00015c04

000120d4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   120d4:	4a09      	ldr	r2, [pc, #36]	; (120fc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   120d6:	490a      	ldr	r1, [pc, #40]	; (12100 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   120d8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   120da:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   120dc:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   120de:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   120e0:	4908      	ldr	r1, [pc, #32]	; (12104 <arch_swap+0x30>)
   120e2:	684b      	ldr	r3, [r1, #4]
   120e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   120e8:	604b      	str	r3, [r1, #4]
   120ea:	2300      	movs	r3, #0
   120ec:	f383 8811 	msr	BASEPRI, r3
   120f0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   120f4:	6893      	ldr	r3, [r2, #8]
}
   120f6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   120f8:	4770      	bx	lr
   120fa:	bf00      	nop
   120fc:	200007c4 	.word	0x200007c4
   12100:	00015c50 	.word	0x00015c50
   12104:	e000ed00 	.word	0xe000ed00

00012108 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12108:	4913      	ldr	r1, [pc, #76]	; (12158 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1210a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1210c:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   12110:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12112:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12116:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1211a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1211c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12120:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12124:	4f0d      	ldr	r7, [pc, #52]	; (1215c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12126:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1212a:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   1212c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1212e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12130:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   12132:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12134:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   12136:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1213a:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   1213e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   12142:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   12146:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1214a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1214c:	f003 f96f 	bl	1542e <configure_builtin_stack_guard>
    pop {r2, lr}
   12150:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   12154:	4770      	bx	lr
   12156:	0000      	.short	0x0000
    ldr r1, =_kernel
   12158:	200007c4 	.word	0x200007c4
    ldr v4, =_SCS_ICSR
   1215c:	e000ed04 	.word	0xe000ed04

00012160 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   12160:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12164:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   12166:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1216a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1216e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   12170:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   12174:	2902      	cmp	r1, #2
    beq _oops
   12176:	d0ff      	beq.n	12178 <_oops>

00012178 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   12178:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1217a:	f003 f95e 	bl	1543a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1217e:	bd01      	pop	{r0, pc}

00012180 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12180:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   12182:	2b00      	cmp	r3, #0
   12184:	db08      	blt.n	12198 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12186:	2201      	movs	r2, #1
   12188:	f000 001f 	and.w	r0, r0, #31
   1218c:	fa02 f000 	lsl.w	r0, r2, r0
   12190:	4a02      	ldr	r2, [pc, #8]	; (1219c <arch_irq_enable+0x1c>)
   12192:	095b      	lsrs	r3, r3, #5
   12194:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   12198:	4770      	bx	lr
   1219a:	bf00      	nop
   1219c:	e000e100 	.word	0xe000e100

000121a0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   121a0:	4b05      	ldr	r3, [pc, #20]	; (121b8 <arch_irq_is_enabled+0x18>)
   121a2:	0942      	lsrs	r2, r0, #5
   121a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   121a8:	2301      	movs	r3, #1
   121aa:	f000 001f 	and.w	r0, r0, #31
   121ae:	fa03 f000 	lsl.w	r0, r3, r0
}
   121b2:	4010      	ands	r0, r2
   121b4:	4770      	bx	lr
   121b6:	bf00      	nop
   121b8:	e000e100 	.word	0xe000e100

000121bc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   121bc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   121be:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   121c0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121c4:	bfac      	ite	ge
   121c6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121ca:	4b06      	ldrlt	r3, [pc, #24]	; (121e4 <z_arm_irq_priority_set+0x28>)
   121cc:	ea4f 1141 	mov.w	r1, r1, lsl #5
   121d0:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121d2:	bfab      	itete	ge
   121d4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121d8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121dc:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121e0:	5419      	strblt	r1, [r3, r0]
}
   121e2:	4770      	bx	lr
   121e4:	e000ed14 	.word	0xe000ed14

000121e8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   121e8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   121ec:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   121ee:	490b      	ldr	r1, [pc, #44]	; (1221c <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   121f0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   121f4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   121f6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   121fa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   121fe:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   12200:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   12204:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1220c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12210:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12212:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12214:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   12216:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12218:	4770      	bx	lr
   1221a:	bf00      	nop
   1221c:	00014ed3 	.word	0x00014ed3

00012220 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   12220:	b508      	push	{r3, lr}
   12222:	4604      	mov	r4, r0
   12224:	460e      	mov	r6, r1
   12226:	4615      	mov	r5, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   12228:	2300      	movs	r3, #0
   1222a:	eee1 3a10 	vmsr	fpscr, r3
	z_arm_configure_static_mpu_regions();
   1222e:	f000 fa51 	bl	126d4 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12232:	4b09      	ldr	r3, [pc, #36]	; (12258 <arch_switch_to_main_thread+0x38>)
   12234:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   12236:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   12238:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1223c:	4628      	mov	r0, r5
   1223e:	f386 8809 	msr	PSP, r6
   12242:	2100      	movs	r1, #0
   12244:	b663      	cpsie	if
   12246:	f381 8811 	msr	BASEPRI, r1
   1224a:	f3bf 8f6f 	isb	sy
   1224e:	2200      	movs	r2, #0
   12250:	2300      	movs	r3, #0
   12252:	f002 fe3e 	bl	14ed2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12256:	bf00      	nop
   12258:	200007c4 	.word	0x200007c4

0001225c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1225c:	4901      	ldr	r1, [pc, #4]	; (12264 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1225e:	2210      	movs	r2, #16
	str	r2, [r1]
   12260:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12262:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12264:	e000ed10 	.word	0xe000ed10

00012268 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12268:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1226a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1226c:	f380 8811 	msr	BASEPRI, r0
	isb
   12270:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12274:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12278:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1227a:	b662      	cpsie	i
	isb
   1227c:	f3bf 8f6f 	isb	sy

	bx	lr
   12280:	4770      	bx	lr
   12282:	bf00      	nop

00012284 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12284:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12286:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12288:	f381 8811 	msr	BASEPRI, r1

	wfe
   1228c:	bf20      	wfe

	msr	BASEPRI, r0
   1228e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12292:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12294:	4770      	bx	lr
   12296:	bf00      	nop

00012298 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12298:	bf30      	wfi
    b z_SysNmiOnReset
   1229a:	f7ff bffd 	b.w	12298 <z_SysNmiOnReset>
   1229e:	bf00      	nop

000122a0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   122a0:	4a17      	ldr	r2, [pc, #92]	; (12300 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   122a2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   122a4:	4b17      	ldr	r3, [pc, #92]	; (12304 <z_arm_prep_c+0x64>)
   122a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   122aa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   122ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   122b0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   122b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   122b8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   122bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   122c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   122c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   122c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
   122cc:	4a0e      	ldr	r2, [pc, #56]	; (12308 <z_arm_prep_c+0x68>)
   122ce:	6853      	ldr	r3, [r2, #4]
   122d0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   122d4:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   122d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   122da:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   122de:	2300      	movs	r3, #0
   122e0:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   122e4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   122e8:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   122ec:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   122f0:	f000 fde8 	bl	12ec4 <z_bss_zero>
	z_data_copy();
   122f4:	f000 fdf0 	bl	12ed8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   122f8:	f000 f9be 	bl	12678 <z_arm_interrupt_init>
	z_cstart();
   122fc:	f000 fe1e 	bl	12f3c <z_cstart>
   12300:	00010200 	.word	0x00010200
   12304:	e000ed00 	.word	0xe000ed00
   12308:	e000ef30 	.word	0xe000ef30

0001230c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1230c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1230e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12310:	4a0b      	ldr	r2, [pc, #44]	; (12340 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12312:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   12314:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12316:	bf1e      	ittt	ne
	movne	r1, #0
   12318:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1231a:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
   1231c:	f003 f972 	blne	15604 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12320:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12322:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12326:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1232a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1232e:	4905      	ldr	r1, [pc, #20]	; (12344 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12330:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12332:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12334:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12336:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1233a:	4903      	ldr	r1, [pc, #12]	; (12348 <_isr_wrapper+0x3c>)
	bx r1
   1233c:	4708      	bx	r1
   1233e:	0000      	.short	0x0000
	ldr r2, =_kernel
   12340:	200007c4 	.word	0x200007c4
	ldr r1, =_sw_isr_table
   12344:	000158a0 	.word	0x000158a0
	ldr r1, =z_arm_int_exit
   12348:	000125cd 	.word	0x000125cd

0001234c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1234c:	2000      	movs	r0, #0
    msr CONTROL, r0
   1234e:	f380 8814 	msr	CONTROL, r0
    isb
   12352:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   12356:	2000      	movs	r0, #0
    msr MSPLIM, r0
   12358:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   1235c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   12360:	f002 ff4b 	bl	151fa <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   12364:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12366:	490e      	ldr	r1, [pc, #56]	; (123a0 <__start+0x54>)
    str r0, [r1]
   12368:	6008      	str	r0, [r1, #0]
    dsb
   1236a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1236e:	480d      	ldr	r0, [pc, #52]	; (123a4 <__start+0x58>)
    msr msp, r0
   12370:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   12374:	f000 f95a 	bl	1262c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12378:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1237a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1237e:	480a      	ldr	r0, [pc, #40]	; (123a8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12380:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   12384:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12386:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1238a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1238e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12390:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12392:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12396:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1239a:	f7ff ff81 	bl	122a0 <z_arm_prep_c>
   1239e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   123a0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   123a4:	20001828 	.word	0x20001828
    ldr r0, =z_interrupt_stacks
   123a8:	20001968 	.word	0x20001968

000123ac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   123ac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   123b0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   123b4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   123b6:	4672      	mov	r2, lr
	bl z_arm_fault
   123b8:	f000 f870 	bl	1249c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   123bc:	bd01      	pop	{r0, pc}
   123be:	bf00      	nop

000123c0 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   123c0:	4b0c      	ldr	r3, [pc, #48]	; (123f4 <mem_manage_fault.isra.0+0x34>)
   123c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   123c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   123c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   123c8:	0792      	lsls	r2, r2, #30
   123ca:	d508      	bpl.n	123de <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   123cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   123ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   123d0:	0612      	lsls	r2, r2, #24
   123d2:	d504      	bpl.n	123de <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   123d4:	b118      	cbz	r0, 123de <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   123d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   123d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   123dc:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   123de:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   123e0:	4b04      	ldr	r3, [pc, #16]	; (123f4 <mem_manage_fault.isra.0+0x34>)
   123e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   123e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   123e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   123e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   123ea:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   123ee:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   123f0:	7008      	strb	r0, [r1, #0]

	return reason;
}
   123f2:	4770      	bx	lr
   123f4:	e000ed00 	.word	0xe000ed00

000123f8 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   123f8:	4b0d      	ldr	r3, [pc, #52]	; (12430 <bus_fault.isra.0+0x38>)
   123fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   123fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   123fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12400:	0592      	lsls	r2, r2, #22
   12402:	d508      	bpl.n	12416 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   12404:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12408:	0412      	lsls	r2, r2, #16
   1240a:	d504      	bpl.n	12416 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   1240c:	b118      	cbz	r0, 12416 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1240e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12414:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   12416:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12418:	4b05      	ldr	r3, [pc, #20]	; (12430 <bus_fault.isra.0+0x38>)
   1241a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1241c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1241e:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12420:	bf58      	it	pl
   12422:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12426:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   1242a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1242c:	7008      	strb	r0, [r1, #0]

	return reason;
}
   1242e:	4770      	bx	lr
   12430:	e000ed00 	.word	0xe000ed00

00012434 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12434:	4b09      	ldr	r3, [pc, #36]	; (1245c <usage_fault.isra.0+0x28>)
   12436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1243a:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1243c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1243e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   12446:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1244a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   1244e:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
   12452:	bf18      	it	ne
   12454:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12456:	629a      	str	r2, [r3, #40]	; 0x28
}
   12458:	4770      	bx	lr
   1245a:	bf00      	nop
   1245c:	e000ed00 	.word	0xe000ed00

00012460 <secure_fault.isra.0>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
   12460:	4b0d      	ldr	r3, [pc, #52]	; (12498 <secure_fault.isra.0+0x38>)
   12462:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
   12464:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
   12466:	695a      	ldr	r2, [r3, #20]
   12468:	07d0      	lsls	r0, r2, #31
   1246a:	d40f      	bmi.n	1248c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
   1246c:	695a      	ldr	r2, [r3, #20]
   1246e:	0791      	lsls	r1, r2, #30
   12470:	d40c      	bmi.n	1248c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
   12472:	695a      	ldr	r2, [r3, #20]
   12474:	0752      	lsls	r2, r2, #29
   12476:	d409      	bmi.n	1248c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
   12478:	695a      	ldr	r2, [r3, #20]
   1247a:	0710      	lsls	r0, r2, #28
   1247c:	d406      	bmi.n	1248c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
   1247e:	695a      	ldr	r2, [r3, #20]
   12480:	06d1      	lsls	r1, r2, #27
   12482:	d403      	bmi.n	1248c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
   12484:	695a      	ldr	r2, [r3, #20]
   12486:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
   12488:	bf58      	it	pl
   1248a:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
   1248c:	695a      	ldr	r2, [r3, #20]
   1248e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   12492:	615a      	str	r2, [r3, #20]
}
   12494:	4770      	bx	lr
   12496:	bf00      	nop
   12498:	e000edd0 	.word	0xe000edd0

0001249c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1249c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1249e:	4b41      	ldr	r3, [pc, #260]	; (125a4 <z_arm_fault+0x108>)
   124a0:	2500      	movs	r5, #0
   124a2:	685b      	ldr	r3, [r3, #4]
{
   124a4:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   124a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   124aa:	f385 8811 	msr	BASEPRI, r5
   124ae:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   124b2:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   124b6:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   124ba:	d11e      	bne.n	124fa <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
   124bc:	f012 0401 	ands.w	r4, r2, #1
   124c0:	d01a      	beq.n	124f8 <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   124c2:	0656      	lsls	r6, r2, #25
   124c4:	f002 0408 	and.w	r4, r2, #8
   124c8:	d467      	bmi.n	1259a <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   124ca:	f082 0204 	eor.w	r2, r2, #4
   124ce:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   124d2:	b164      	cbz	r4, 124ee <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
   124d4:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
   124d8:	2200      	movs	r2, #0
   124da:	3b03      	subs	r3, #3
   124dc:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   124e0:	2b04      	cmp	r3, #4
   124e2:	d84b      	bhi.n	1257c <z_arm_fault+0xe0>
   124e4:	e8df f003 	tbb	[pc, r3]
   124e8:	41504c0b 	.word	0x41504c0b
   124ec:	48          	.byte	0x48
   124ed:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
   124ee:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
   124f2:	e7f1      	b.n	124d8 <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
   124f4:	460e      	mov	r6, r1
   124f6:	e7ef      	b.n	124d8 <z_arm_fault+0x3c>
	*nested_exc = false;
   124f8:	4625      	mov	r5, r4
		return NULL;
   124fa:	462e      	mov	r6, r5
   124fc:	e7ec      	b.n	124d8 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   124fe:	4b29      	ldr	r3, [pc, #164]	; (125a4 <z_arm_fault+0x108>)
   12500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12502:	0792      	lsls	r2, r2, #30
   12504:	d43a      	bmi.n	1257c <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12506:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   12508:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   1250c:	d008      	beq.n	12520 <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
   1250e:	3328      	adds	r3, #40	; 0x28
   12510:	781b      	ldrb	r3, [r3, #0]
   12512:	b1eb      	cbz	r3, 12550 <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
   12514:	2001      	movs	r0, #1
   12516:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1251a:	f7ff ff51 	bl	123c0 <mem_manage_fault.isra.0>
   1251e:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   12520:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12524:	b993      	cbnz	r3, 1254c <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12526:	2220      	movs	r2, #32
   12528:	4631      	mov	r1, r6
   1252a:	a802      	add	r0, sp, #8
   1252c:	f002 ffe5 	bl	154fa <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   12530:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12532:	b36d      	cbz	r5, 12590 <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   12534:	f3c3 0208 	ubfx	r2, r3, #0, #9
   12538:	b922      	cbnz	r2, 12544 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1253a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1253e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12542:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   12544:	4620      	mov	r0, r4
   12546:	a902      	add	r1, sp, #8
   12548:	f002 ff75 	bl	15436 <z_arm_fatal_error>
}
   1254c:	b00b      	add	sp, #44	; 0x2c
   1254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   12550:	4b15      	ldr	r3, [pc, #84]	; (125a8 <z_arm_fault+0x10c>)
   12552:	781b      	ldrb	r3, [r3, #0]
   12554:	b12b      	cbz	r3, 12562 <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
   12556:	2001      	movs	r0, #1
   12558:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1255c:	f7ff ff4c 	bl	123f8 <bus_fault.isra.0>
   12560:	e7dd      	b.n	1251e <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
   12562:	4b12      	ldr	r3, [pc, #72]	; (125ac <z_arm_fault+0x110>)
   12564:	881f      	ldrh	r7, [r3, #0]
   12566:	b2bf      	uxth	r7, r7
   12568:	b117      	cbz	r7, 12570 <z_arm_fault+0xd4>
		reason = usage_fault(esf);
   1256a:	f7ff ff63 	bl	12434 <usage_fault.isra.0>
   1256e:	e7d6      	b.n	1251e <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
   12570:	4b0f      	ldr	r3, [pc, #60]	; (125b0 <z_arm_fault+0x114>)
   12572:	695c      	ldr	r4, [r3, #20]
   12574:	2c00      	cmp	r4, #0
   12576:	d0d3      	beq.n	12520 <z_arm_fault+0x84>
		secure_fault(esf);
   12578:	f7ff ff72 	bl	12460 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1257c:	2400      	movs	r4, #0
   1257e:	e7cf      	b.n	12520 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
   12580:	2000      	movs	r0, #0
   12582:	f10d 0107 	add.w	r1, sp, #7
   12586:	e7c8      	b.n	1251a <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
   12588:	2000      	movs	r0, #0
   1258a:	f10d 0107 	add.w	r1, sp, #7
   1258e:	e7e5      	b.n	1255c <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12590:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12594:	f023 0301 	bic.w	r3, r3, #1
   12598:	e7d3      	b.n	12542 <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1259a:	2c00      	cmp	r4, #0
   1259c:	d1aa      	bne.n	124f4 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
   1259e:	4606      	mov	r6, r0
			*nested_exc = true;
   125a0:	2501      	movs	r5, #1
   125a2:	e799      	b.n	124d8 <z_arm_fault+0x3c>
   125a4:	e000ed00 	.word	0xe000ed00
   125a8:	e000ed29 	.word	0xe000ed29
   125ac:	e000ed2a 	.word	0xe000ed2a
   125b0:	e000edd0 	.word	0xe000edd0

000125b4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   125b4:	4b04      	ldr	r3, [pc, #16]	; (125c8 <z_arm_fault_init+0x14>)
   125b6:	695a      	ldr	r2, [r3, #20]
   125b8:	f042 0210 	orr.w	r2, r2, #16
   125bc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   125be:	695a      	ldr	r2, [r3, #20]
   125c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   125c4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   125c6:	4770      	bx	lr
   125c8:	e000ed00 	.word	0xe000ed00

000125cc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   125cc:	4b04      	ldr	r3, [pc, #16]	; (125e0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   125ce:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   125d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   125d2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   125d4:	d003      	beq.n	125de <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   125d6:	4903      	ldr	r1, [pc, #12]	; (125e4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   125d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   125dc:	600a      	str	r2, [r1, #0]

000125de <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   125de:	4770      	bx	lr
	ldr r3, =_kernel
   125e0:	200007c4 	.word	0x200007c4
	ldr r1, =_SCS_ICSR
   125e4:	e000ed04 	.word	0xe000ed04

000125e8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   125e8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   125ec:	4905      	ldr	r1, [pc, #20]	; (12604 <sys_arch_reboot+0x1c>)
   125ee:	4b06      	ldr	r3, [pc, #24]	; (12608 <sys_arch_reboot+0x20>)
   125f0:	68ca      	ldr	r2, [r1, #12]
   125f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   125f6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   125f8:	60cb      	str	r3, [r1, #12]
   125fa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   125fe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12600:	e7fd      	b.n	125fe <sys_arch_reboot+0x16>
   12602:	bf00      	nop
   12604:	e000ed00 	.word	0xe000ed00
   12608:	05fa0004 	.word	0x05fa0004

0001260c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   1260c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   1260e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12610:	4a05      	ldr	r2, [pc, #20]	; (12628 <z_arm_clear_arm_mpu_config+0x1c>)
   12612:	6811      	ldr	r1, [r2, #0]
	int num_regions =
   12614:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
   12618:	428b      	cmp	r3, r1
   1261a:	d100      	bne.n	1261e <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   1261c:	4770      	bx	lr
  mpu->RNR = rnr;
   1261e:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   12620:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   12622:	3301      	adds	r3, #1
   12624:	e7f8      	b.n	12618 <z_arm_clear_arm_mpu_config+0xc>
   12626:	bf00      	nop
   12628:	e000ed90 	.word	0xe000ed90

0001262c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1262c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1262e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12630:	2400      	movs	r4, #0
   12632:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12636:	f7ff ffe9 	bl	1260c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1263a:	4a0e      	ldr	r2, [pc, #56]	; (12674 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
   1263c:	4623      	mov	r3, r4
   1263e:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
   12640:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12644:	f103 0020 	add.w	r0, r3, #32
   12648:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1264a:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   1264c:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   12650:	d1f8      	bne.n	12644 <z_arm_init_arch_hw_at_boot+0x18>
   12652:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12658:	f103 0260 	add.w	r2, r3, #96	; 0x60
   1265c:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1265e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12660:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   12664:	d1f8      	bne.n	12658 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   12666:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   12668:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1266c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   12670:	bd10      	pop	{r4, pc}
   12672:	bf00      	nop
   12674:	e000e100 	.word	0xe000e100

00012678 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12678:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1267a:	2120      	movs	r1, #32
   1267c:	4803      	ldr	r0, [pc, #12]	; (1268c <z_arm_interrupt_init+0x14>)
   1267e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12680:	3301      	adds	r3, #1
   12682:	2b41      	cmp	r3, #65	; 0x41
   12684:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   12688:	d1f9      	bne.n	1267e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1268a:	4770      	bx	lr
   1268c:	e000e100 	.word	0xe000e100

00012690 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   12690:	b508      	push	{r3, lr}
	if (_current == thread) {
   12692:	4b0e      	ldr	r3, [pc, #56]	; (126cc <z_impl_k_thread_abort+0x3c>)
   12694:	689b      	ldr	r3, [r3, #8]
   12696:	4283      	cmp	r3, r0
   12698:	d107      	bne.n	126aa <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1269a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1269e:	b193      	cbz	r3, 126c6 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   126a0:	4a0b      	ldr	r2, [pc, #44]	; (126d0 <z_impl_k_thread_abort+0x40>)
   126a2:	6853      	ldr	r3, [r2, #4]
   126a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   126a8:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   126aa:	f000 ffd1 	bl	13650 <z_thread_single_abort>
	__asm__ volatile(
   126ae:	f04f 0320 	mov.w	r3, #32
   126b2:	f3ef 8011 	mrs	r0, BASEPRI
   126b6:	f383 8811 	msr	BASEPRI, r3
   126ba:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   126be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   126c2:	f002 bfc3 	b.w	1564c <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   126c6:	f001 fa63 	bl	13b90 <z_self_abort>
   126ca:	bf00      	nop
   126cc:	200007c4 	.word	0x200007c4
   126d0:	e000ed00 	.word	0xe000ed00

000126d4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   126d4:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   126d6:	4b0e      	ldr	r3, [pc, #56]	; (12710 <z_arm_configure_static_mpu_regions+0x3c>)
{
   126d8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   126da:	9302      	str	r3, [sp, #8]
   126dc:	4b0d      	ldr	r3, [pc, #52]	; (12714 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   126de:	4c0e      	ldr	r4, [pc, #56]	; (12718 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   126e0:	9303      	str	r3, [sp, #12]
   126e2:	4b0e      	ldr	r3, [pc, #56]	; (1271c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   126e4:	4a0e      	ldr	r2, [pc, #56]	; (12720 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   126e6:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   126e8:	ab02      	add	r3, sp, #8
   126ea:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   126ec:	a801      	add	r0, sp, #4
   126ee:	4623      	mov	r3, r4
   126f0:	2101      	movs	r1, #1
   126f2:	f000 f907 	bl	12904 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   126f6:	2300      	movs	r3, #0
   126f8:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   126fa:	4b0a      	ldr	r3, [pc, #40]	; (12724 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   126fc:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   126fe:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12700:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   12702:	9305      	str	r3, [sp, #20]
   12704:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12706:	f000 f907 	bl	12918 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1270a:	b008      	add	sp, #32
   1270c:	bd10      	pop	{r4, pc}
   1270e:	bf00      	nop
   12710:	20000000 	.word	0x20000000
   12714:	00000000 	.word	0x00000000
   12718:	20010000 	.word	0x20010000
   1271c:	00010006 	.word	0x00010006
   12720:	20000000 	.word	0x20000000
   12724:	20000118 	.word	0x20000118

00012728 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   12728:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1272a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1272c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1272e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   12732:	f004 031f 	and.w	r3, r4, #31
   12736:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   12738:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1273a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1273c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   12740:	4904      	ldr	r1, [pc, #16]	; (12754 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   12742:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   12746:	f043 0301 	orr.w	r3, r3, #1
   1274a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1274c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1274e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   12750:	bd10      	pop	{r4, pc}
   12752:	bf00      	nop
   12754:	e000ed90 	.word	0xe000ed90

00012758 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   12758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1275c:	4607      	mov	r7, r0
   1275e:	4688      	mov	r8, r1
   12760:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   12762:	2600      	movs	r6, #0
	MPU->RNR = index;
   12764:	4d4a      	ldr	r5, [pc, #296]	; (12890 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   12766:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   12768:	4546      	cmp	r6, r8
   1276a:	da0b      	bge.n	12784 <mpu_configure_regions_and_partition.constprop.0+0x2c>
		if (regions[i]->size == 0U) {
   1276c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   12770:	f8d3 9004 	ldr.w	r9, [r3, #4]
   12774:	f1b9 0f00 	cmp.w	r9, #0
   12778:	d03a      	beq.n	127f0 <mpu_configure_regions_and_partition.constprop.0+0x98>
		&&
   1277a:	f1b9 0f1f 	cmp.w	r9, #31
   1277e:	d805      	bhi.n	1278c <mpu_configure_regions_and_partition.constprop.0+0x34>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   12780:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   12784:	4620      	mov	r0, r4
   12786:	b005      	add	sp, #20
   12788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   1278c:	f019 0f1f 	tst.w	r9, #31
   12790:	d1f6      	bne.n	12780 <mpu_configure_regions_and_partition.constprop.0+0x28>
		((part->start &
   12792:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   12796:	f01a 0f1f 	tst.w	sl, #31
   1279a:	d1f1      	bne.n	12780 <mpu_configure_regions_and_partition.constprop.0+0x28>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1279c:	4650      	mov	r0, sl
   1279e:	f002 fe74 	bl	1548a <arm_cmse_mpu_region_get>
   127a2:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   127a4:	eb09 000a 	add.w	r0, r9, sl
   127a8:	3801      	subs	r0, #1
   127aa:	f002 fe6e 	bl	1548a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   127ae:	4583      	cmp	fp, r0
   127b0:	d1e6      	bne.n	12780 <mpu_configure_regions_and_partition.constprop.0+0x28>
		if ((u_reg_index == -EINVAL) ||
   127b2:	f11b 0f16 	cmn.w	fp, #22
   127b6:	d0e3      	beq.n	12780 <mpu_configure_regions_and_partition.constprop.0+0x28>
			(u_reg_index > (reg_index - 1))) {
   127b8:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   127ba:	455b      	cmp	r3, fp
   127bc:	dbe0      	blt.n	12780 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
   127be:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   127c2:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   127c4:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   127c8:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   127ca:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   127ce:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   127d2:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   127d6:	e9d1 3200 	ldrd	r3, r2, [r1]
   127da:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   127dc:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   127de:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   127e2:	d118      	bne.n	12816 <mpu_configure_regions_and_partition.constprop.0+0xbe>
   127e4:	45ca      	cmp	sl, r9
   127e6:	d105      	bne.n	127f4 <mpu_configure_regions_and_partition.constprop.0+0x9c>
			mpu_configure_region(u_reg_index, regions[i]);
   127e8:	fa5f f08b 	uxtb.w	r0, fp
   127ec:	f002 fe30 	bl	15450 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   127f0:	3601      	adds	r6, #1
   127f2:	e7b9      	b.n	12768 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   127f4:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   127f8:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   127fa:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   127fe:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   12802:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   12804:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   12806:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   12808:	f002 fe22 	bl	15450 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1280c:	f110 0f16 	cmn.w	r0, #22
   12810:	d0b6      	beq.n	12780 <mpu_configure_regions_and_partition.constprop.0+0x28>
			reg_index++;
   12812:	1c44      	adds	r4, r0, #1
   12814:	e7ec      	b.n	127f0 <mpu_configure_regions_and_partition.constprop.0+0x98>
	MPU->RNR = index;
   12816:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1281a:	692a      	ldr	r2, [r5, #16]
   1281c:	3b01      	subs	r3, #1
   1281e:	f023 031f 	bic.w	r3, r3, #31
   12822:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   12826:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   12828:	45ca      	cmp	sl, r9
   1282a:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1282c:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   1282e:	d0eb      	beq.n	12808 <mpu_configure_regions_and_partition.constprop.0+0xb0>
				mpu_configure_region(reg_index, regions[i]);
   12830:	f002 fe0e 	bl	15450 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   12834:	f110 0f16 	cmn.w	r0, #22
   12838:	d0a2      	beq.n	12780 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
   1283a:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   1283e:	68ea      	ldr	r2, [r5, #12]
   12840:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   12844:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   12848:	f362 0304 	bfi	r3, r2, #0, #5
   1284c:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12850:	692b      	ldr	r3, [r5, #16]
   12852:	f89d 2008 	ldrb.w	r2, [sp, #8]
   12856:	085b      	lsrs	r3, r3, #1
   12858:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   1285c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12860:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   12864:	e9d3 1300 	ldrd	r1, r3, [r3]
   12868:	440b      	add	r3, r1
   1286a:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   1286c:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   12870:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   12872:	4453      	add	r3, sl
   12874:	eba3 0309 	sub.w	r3, r3, r9
   12878:	b2c0      	uxtb	r0, r0
   1287a:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   1287e:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   12880:	9303      	str	r3, [sp, #12]
   12882:	f63f af7d 	bhi.w	12780 <mpu_configure_regions_and_partition.constprop.0+0x28>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   12886:	4669      	mov	r1, sp
   12888:	f7ff ff4e 	bl	12728 <region_init>
   1288c:	e7c1      	b.n	12812 <mpu_configure_regions_and_partition.constprop.0+0xba>
   1288e:	bf00      	nop
   12890:	e000ed90 	.word	0xe000ed90

00012894 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12894:	2205      	movs	r2, #5
   12896:	4b03      	ldr	r3, [pc, #12]	; (128a4 <arm_core_mpu_enable+0x10>)
   12898:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1289a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1289e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   128a2:	4770      	bx	lr
   128a4:	e000ed90 	.word	0xe000ed90

000128a8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   128a8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   128ac:	2200      	movs	r2, #0
   128ae:	4b01      	ldr	r3, [pc, #4]	; (128b4 <arm_core_mpu_disable+0xc>)
   128b0:	605a      	str	r2, [r3, #4]
}
   128b2:	4770      	bx	lr
   128b4:	e000ed90 	.word	0xe000ed90

000128b8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   128b8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   128ba:	4c0e      	ldr	r4, [pc, #56]	; (128f4 <arm_mpu_init+0x3c>)
   128bc:	6825      	ldr	r5, [r4, #0]
   128be:	2d10      	cmp	r5, #16
   128c0:	d814      	bhi.n	128ec <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   128c2:	f7ff fff1 	bl	128a8 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   128c6:	2000      	movs	r0, #0
	MPU->MAIR0 =
   128c8:	4b0b      	ldr	r3, [pc, #44]	; (128f8 <arm_mpu_init+0x40>)
   128ca:	4a0c      	ldr	r2, [pc, #48]	; (128fc <arm_mpu_init+0x44>)
   128cc:	631a      	str	r2, [r3, #48]	; 0x30
   128ce:	4285      	cmp	r5, r0
   128d0:	d105      	bne.n	128de <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   128d2:	4b0b      	ldr	r3, [pc, #44]	; (12900 <arm_mpu_init+0x48>)
   128d4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   128d6:	f7ff ffdd 	bl	12894 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   128da:	2000      	movs	r0, #0
}
   128dc:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   128de:	6861      	ldr	r1, [r4, #4]
   128e0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   128e4:	f7ff ff20 	bl	12728 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   128e8:	3001      	adds	r0, #1
   128ea:	e7f0      	b.n	128ce <arm_mpu_init+0x16>
		return -1;
   128ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   128f0:	e7f4      	b.n	128dc <arm_mpu_init+0x24>
   128f2:	bf00      	nop
   128f4:	00015c28 	.word	0x00015c28
   128f8:	e000ed90 	.word	0xe000ed90
   128fc:	0044ffaa 	.word	0x0044ffaa
   12900:	20000824 	.word	0x20000824

00012904 <arm_core_mpu_configure_static_mpu_regions>:
{
   12904:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   12906:	4c03      	ldr	r4, [pc, #12]	; (12914 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   12908:	7822      	ldrb	r2, [r4, #0]
   1290a:	f7ff ff25 	bl	12758 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1290e:	7020      	strb	r0, [r4, #0]
}
   12910:	bd10      	pop	{r4, pc}
   12912:	bf00      	nop
   12914:	20000824 	.word	0x20000824

00012918 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   12918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1291c:	4d26      	ldr	r5, [pc, #152]	; (129b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   1291e:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12920:	4606      	mov	r6, r0
   12922:	f04f 0800 	mov.w	r8, #0
   12926:	46ab      	mov	fp, r5
	MPU->RNR = index;
   12928:	4f24      	ldr	r7, [pc, #144]	; (129bc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1292a:	45d0      	cmp	r8, sl
   1292c:	da1b      	bge.n	12966 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1292e:	f8d6 9004 	ldr.w	r9, [r6, #4]
   12932:	f1b9 0f00 	cmp.w	r9, #0
   12936:	d039      	beq.n	129ac <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   12938:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1293a:	4608      	mov	r0, r1
   1293c:	9101      	str	r1, [sp, #4]
   1293e:	f002 fda4 	bl	1548a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12942:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   12944:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12946:	eb09 0001 	add.w	r0, r9, r1
   1294a:	3801      	subs	r0, #1
   1294c:	f002 fd9d 	bl	1548a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   12950:	4284      	cmp	r4, r0
   12952:	f04f 0214 	mov.w	r2, #20
   12956:	4b1a      	ldr	r3, [pc, #104]	; (129c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   12958:	d008      	beq.n	1296c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1295a:	f06f 0315 	mvn.w	r3, #21
   1295e:	fb02 f808 	mul.w	r8, r2, r8
   12962:	f84b 3008 	str.w	r3, [fp, r8]
}
   12966:	b003      	add	sp, #12
   12968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1296c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   12970:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   12972:	d0f8      	beq.n	12966 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   12974:	7819      	ldrb	r1, [r3, #0]
   12976:	42a1      	cmp	r1, r4
   12978:	ddf5      	ble.n	12966 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   1297a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   1297e:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   12980:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   12982:	68fc      	ldr	r4, [r7, #12]
   12984:	f100 0108 	add.w	r1, r0, #8
   12988:	7b00      	ldrb	r0, [r0, #12]
   1298a:	f364 0004 	bfi	r0, r4, #0, #5
   1298e:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12990:	6938      	ldr	r0, [r7, #16]
   12992:	790c      	ldrb	r4, [r1, #4]
   12994:	0840      	lsrs	r0, r0, #1
   12996:	f360 1447 	bfi	r4, r0, #5, #3
   1299a:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1299c:	68f9      	ldr	r1, [r7, #12]
   1299e:	f021 011f 	bic.w	r1, r1, #31
   129a2:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   129a4:	6939      	ldr	r1, [r7, #16]
   129a6:	f021 011f 	bic.w	r1, r1, #31
   129aa:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   129ac:	f108 0801 	add.w	r8, r8, #1
   129b0:	3514      	adds	r5, #20
   129b2:	360c      	adds	r6, #12
   129b4:	e7b9      	b.n	1292a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   129b6:	bf00      	nop
   129b8:	200007a8 	.word	0x200007a8
   129bc:	e000ed90 	.word	0xe000ed90
   129c0:	20000824 	.word	0x20000824

000129c4 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
   129c4:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
   129c6:	4b0c      	ldr	r3, [pc, #48]	; (129f8 <tz_nonsecure_state_setup+0x34>)
   129c8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
   129ca:	6803      	ldr	r3, [r0, #0]
   129cc:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
   129d0:	6843      	ldr	r3, [r0, #4]
   129d2:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
   129d6:	7b02      	ldrb	r2, [r0, #12]
   129d8:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
   129dc:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
   129e0:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
   129e4:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
   129e6:	bf48      	it	mi
   129e8:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
   129ec:	b109      	cbz	r1, 129f2 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
   129ee:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
   129f2:	f383 8894 	msr	CONTROL_NS, r3
}
   129f6:	4770      	bx	lr
   129f8:	e002ed00 	.word	0xe002ed00

000129fc <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   129fc:	4a08      	ldr	r2, [pc, #32]	; (12a20 <tz_nbanked_exception_target_state_set+0x24>)
   129fe:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
   12a00:	b148      	cbz	r0, 12a16 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
   12a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12a06:	041b      	lsls	r3, r3, #16
   12a08:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   12a0a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   12a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   12a12:	60d3      	str	r3, [r2, #12]
}
   12a14:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12a16:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
   12a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   12a1c:	e7f5      	b.n	12a0a <tz_nbanked_exception_target_state_set+0xe>
   12a1e:	bf00      	nop
   12a20:	e000ed00 	.word	0xe000ed00

00012a24 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12a24:	4a08      	ldr	r2, [pc, #32]	; (12a48 <tz_nonsecure_exception_prio_config+0x24>)
   12a26:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
   12a28:	b140      	cbz	r0, 12a3c <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12a2a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
   12a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   12a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   12a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   12a38:	60d3      	str	r3, [r2, #12]
}
   12a3a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
   12a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   12a40:	041b      	lsls	r3, r3, #16
   12a42:	0c1b      	lsrs	r3, r3, #16
   12a44:	e7f4      	b.n	12a30 <tz_nonsecure_exception_prio_config+0xc>
   12a46:	bf00      	nop
   12a48:	e000ed00 	.word	0xe000ed00

00012a4c <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12a4c:	4a08      	ldr	r2, [pc, #32]	; (12a70 <tz_nonsecure_system_reset_req_block+0x24>)
   12a4e:	68d3      	ldr	r3, [r2, #12]
	if (block) {
   12a50:	b140      	cbz	r0, 12a64 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12a52:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
   12a54:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   12a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   12a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
   12a60:	60d3      	str	r3, [r2, #12]
}
   12a62:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
   12a64:	f023 0308 	bic.w	r3, r3, #8
   12a68:	041b      	lsls	r3, r3, #16
   12a6a:	0c1b      	lsrs	r3, r3, #16
   12a6c:	e7f4      	b.n	12a58 <tz_nonsecure_system_reset_req_block+0xc>
   12a6e:	bf00      	nop
   12a70:	e000ed00 	.word	0xe000ed00

00012a74 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
   12a74:	4a03      	ldr	r2, [pc, #12]	; (12a84 <tz_nonsecure_fpu_access_enable+0x10>)
   12a76:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   12a7a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   12a7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
   12a82:	4770      	bx	lr
   12a84:	e000ed00 	.word	0xe000ed00

00012a88 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
   12a88:	4b08      	ldr	r3, [pc, #32]	; (12aac <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
   12a8a:	681a      	ldr	r2, [r3, #0]
   12a8c:	b118      	cbz	r0, 12a96 <tz_sau_configure+0xe>
   12a8e:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   12a92:	601a      	str	r2, [r3, #0]
		}
	}
}
   12a94:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
   12a96:	f022 0201 	bic.w	r2, r2, #1
   12a9a:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   12a9c:	681a      	ldr	r2, [r3, #0]
		if (allns) {
   12a9e:	b111      	cbz	r1, 12aa6 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   12aa0:	f042 0202 	orr.w	r2, r2, #2
   12aa4:	e7f5      	b.n	12a92 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   12aa6:	f022 0202 	bic.w	r2, r2, #2
   12aaa:	e7f2      	b.n	12a92 <tz_sau_configure+0xa>
   12aac:	e000edd0 	.word	0xe000edd0

00012ab0 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   12ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12ab4:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   12ab6:	4c21      	ldr	r4, [pc, #132]	; (12b3c <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   12ab8:	4e21      	ldr	r6, [pc, #132]	; (12b40 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12aba:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   12abe:	f8df 9088 	ldr.w	r9, [pc, #136]	; 12b48 <check_ext_api_requests+0x98>
{
   12ac2:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12ac4:	45a8      	cmp	r8, r5
   12ac6:	d803      	bhi.n	12ad0 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   12ac8:	2000      	movs	r0, #0
   12aca:	b005      	add	sp, #20
   12acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   12ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12ad2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12ad6:	681f      	ldr	r7, [r3, #0]
   12ad8:	ab01      	add	r3, sp, #4
   12ada:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   12ade:	220c      	movs	r2, #12
   12ae0:	4619      	mov	r1, r3
   12ae2:	4638      	mov	r0, r7
   12ae4:	f002 fce2 	bl	154ac <memcmp>
   12ae8:	b990      	cbnz	r0, 12b10 <check_ext_api_requests+0x60>
   12aea:	b18f      	cbz	r7, 12b10 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   12aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   12aee:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   12af0:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   12af2:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   12af4:	4291      	cmp	r1, r2
   12af6:	d10b      	bne.n	12b10 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   12af8:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   12afa:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   12afc:	4291      	cmp	r1, r2
   12afe:	d807      	bhi.n	12b10 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   12b00:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   12b02:	4291      	cmp	r1, r2
   12b04:	d904      	bls.n	12b10 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   12b06:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   12b08:	695b      	ldr	r3, [r3, #20]
   12b0a:	ea32 0303 	bics.w	r3, r2, r3
   12b0e:	d00a      	beq.n	12b26 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   12b10:	6a27      	ldr	r7, [r4, #32]
   12b12:	b167      	cbz	r7, 12b2e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   12b14:	480b      	ldr	r0, [pc, #44]	; (12b44 <check_ext_api_requests+0x94>)
   12b16:	f002 f923 	bl	14d60 <printk>
			k_panic();
   12b1a:	4040      	eors	r0, r0
   12b1c:	f380 8811 	msr	BASEPRI, r0
   12b20:	f04f 0004 	mov.w	r0, #4
   12b24:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   12b26:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12b28:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   12b2a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12b2c:	e7ca      	b.n	12ac4 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   12b2e:	4648      	mov	r0, r9
   12b30:	f002 f916 	bl	14d60 <printk>
			*ext_api_req->ext_api = NULL;
   12b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12b36:	601f      	str	r7, [r3, #0]
   12b38:	e7f5      	b.n	12b26 <check_ext_api_requests+0x76>
   12b3a:	bf00      	nop
   12b3c:	0001043c 	.word	0x0001043c
   12b40:	00015abc 	.word	0x00015abc
   12b44:	0001609f 	.word	0x0001609f
   12b48:	000160c8 	.word	0x000160c8

00012b4c <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   12b4c:	4b05      	ldr	r3, [pc, #20]	; (12b64 <nrf91_errata_14+0x18>)
   12b4e:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   12b50:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   12b52:	681b      	ldr	r3, [r3, #0]
   12b54:	2b09      	cmp	r3, #9
   12b56:	d103      	bne.n	12b60 <nrf91_errata_14+0x14>
            {
                switch(var2)
   12b58:	1e43      	subs	r3, r0, #1
   12b5a:	4258      	negs	r0, r3
   12b5c:	4158      	adcs	r0, r3
   12b5e:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   12b60:	2000      	movs	r0, #0
    #endif
}
   12b62:	4770      	bx	lr
   12b64:	00ff0134 	.word	0x00ff0134

00012b68 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   12b68:	4a4f      	ldr	r2, [pc, #316]	; (12ca8 <SystemInit+0x140>)
{
   12b6a:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   12b6c:	6813      	ldr	r3, [r2, #0]
   12b6e:	f043 0302 	orr.w	r3, r3, #2
   12b72:	6013      	str	r3, [r2, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   12b74:	4b4d      	ldr	r3, [pc, #308]	; (12cac <SystemInit+0x144>)
            if (var1 == 0x09)
   12b76:	681b      	ldr	r3, [r3, #0]
   12b78:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
   12b7a:	bf01      	itttt	eq
   12b7c:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
   12b80:	2200      	moveq	r2, #0
   12b82:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
   12b86:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
   12b8a:	f7ff ffdf 	bl	12b4c <nrf91_errata_14>
   12b8e:	b130      	cbz	r0, 12b9e <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
   12b90:	2301      	movs	r3, #1
   12b92:	4a47      	ldr	r2, [pc, #284]	; (12cb0 <SystemInit+0x148>)
   12b94:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   12b96:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
   12b9a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   12b9e:	4b43      	ldr	r3, [pc, #268]	; (12cac <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   12ba0:	681b      	ldr	r3, [r3, #0]
   12ba2:	2b09      	cmp	r3, #9
   12ba4:	d107      	bne.n	12bb6 <SystemInit+0x4e>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   12ba6:	4b43      	ldr	r3, [pc, #268]	; (12cb4 <SystemInit+0x14c>)
            {
                switch(var2)
   12ba8:	681b      	ldr	r3, [r3, #0]
   12baa:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   12bac:	bf1e      	ittt	ne
   12bae:	2201      	movne	r2, #1
   12bb0:	4b41      	ldrne	r3, [pc, #260]	; (12cb8 <SystemInit+0x150>)
   12bb2:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
   12bb6:	f7ff ffc9 	bl	12b4c <nrf91_errata_14>
   12bba:	b110      	cbz	r0, 12bc2 <SystemInit+0x5a>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
   12bbc:	220e      	movs	r2, #14
   12bbe:	4b3f      	ldr	r3, [pc, #252]	; (12cbc <SystemInit+0x154>)
   12bc0:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   12bc2:	4b3a      	ldr	r3, [pc, #232]	; (12cac <SystemInit+0x144>)
            if (var1 == 0x09)
   12bc4:	681b      	ldr	r3, [r3, #0]
   12bc6:	2b09      	cmp	r3, #9
   12bc8:	d104      	bne.n	12bd4 <SystemInit+0x6c>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
   12bca:	2200      	movs	r2, #0
   12bcc:	4b3c      	ldr	r3, [pc, #240]	; (12cc0 <SystemInit+0x158>)
   12bce:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
   12bd0:	2201      	movs	r2, #1
   12bd2:	605a      	str	r2, [r3, #4]
{
   12bd4:	2200      	movs	r2, #0
   12bd6:	00d3      	lsls	r3, r2, #3
   12bd8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   12bdc:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   12be0:	3101      	adds	r1, #1
   12be2:	d008      	beq.n	12bf6 <SystemInit+0x8e>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   12be4:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   12be8:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   12bea:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   12bee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   12bf2:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   12bf4:	d1ef      	bne.n	12bd6 <SystemInit+0x6e>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   12bf6:	4b33      	ldr	r3, [pc, #204]	; (12cc4 <SystemInit+0x15c>)
   12bf8:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
   12bfa:	07d1      	lsls	r1, r2, #31
   12bfc:	d53b      	bpl.n	12c76 <SystemInit+0x10e>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12bfe:	4b32      	ldr	r3, [pc, #200]	; (12cc8 <SystemInit+0x160>)
   12c00:	4619      	mov	r1, r3
   12c02:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   12c06:	2a01      	cmp	r2, #1
   12c08:	d1fb      	bne.n	12c02 <SystemInit+0x9a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
   12c0a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12c0e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   12c12:	2b01      	cmp	r3, #1
   12c14:	d1fb      	bne.n	12c0e <SystemInit+0xa6>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   12c16:	4b2b      	ldr	r3, [pc, #172]	; (12cc4 <SystemInit+0x15c>)
   12c18:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
   12c1a:	07d2      	lsls	r2, r2, #31
   12c1c:	d508      	bpl.n	12c30 <SystemInit+0xc8>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
   12c1e:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12c20:	4929      	ldr	r1, [pc, #164]	; (12cc8 <SystemInit+0x160>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
   12c22:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
   12c26:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12c28:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
   12c2c:	2a01      	cmp	r2, #1
   12c2e:	d1fb      	bne.n	12c28 <SystemInit+0xc0>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   12c30:	6a1a      	ldr	r2, [r3, #32]
   12c32:	3201      	adds	r2, #1
   12c34:	d10a      	bne.n	12c4c <SystemInit+0xe4>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
   12c36:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
   12c38:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12c3c:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
   12c40:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12c42:	4a21      	ldr	r2, [pc, #132]	; (12cc8 <SystemInit+0x160>)
   12c44:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   12c48:	2b01      	cmp	r3, #1
   12c4a:	d1fb      	bne.n	12c44 <SystemInit+0xdc>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
   12c4c:	2200      	movs	r2, #0
   12c4e:	4b1e      	ldr	r3, [pc, #120]	; (12cc8 <SystemInit+0x160>)
   12c50:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12c54:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   12c58:	2a01      	cmp	r2, #1
   12c5a:	d1fb      	bne.n	12c54 <SystemInit+0xec>
  __ASM volatile ("dsb 0xF":::"memory");
   12c5c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12c60:	491a      	ldr	r1, [pc, #104]	; (12ccc <SystemInit+0x164>)
   12c62:	4b1b      	ldr	r3, [pc, #108]	; (12cd0 <SystemInit+0x168>)
   12c64:	68ca      	ldr	r2, [r1, #12]
   12c66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12c6a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12c6c:	60cb      	str	r3, [r1, #12]
   12c6e:	f3bf 8f4f 	dsb	sy
    __NOP();
   12c72:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12c74:	e7fd      	b.n	12c72 <SystemInit+0x10a>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   12c76:	6a1b      	ldr	r3, [r3, #32]
   12c78:	3301      	adds	r3, #1
   12c7a:	d0c0      	beq.n	12bfe <SystemInit+0x96>
        SCB->NSACR |= (3UL << 10);
   12c7c:	4b13      	ldr	r3, [pc, #76]	; (12ccc <SystemInit+0x164>)
   12c7e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   12c82:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
   12c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   12c8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12c8e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   12c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   12c96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12c9a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   12c9e:	4b0d      	ldr	r3, [pc, #52]	; (12cd4 <SystemInit+0x16c>)
   12ca0:	4a0d      	ldr	r2, [pc, #52]	; (12cd8 <SystemInit+0x170>)
   12ca2:	601a      	str	r2, [r3, #0]
}
   12ca4:	bd08      	pop	{r3, pc}
   12ca6:	bf00      	nop
   12ca8:	e000edd0 	.word	0xe000edd0
   12cac:	00ff0130 	.word	0x00ff0130
   12cb0:	50004a38 	.word	0x50004a38
   12cb4:	00ff0134 	.word	0x00ff0134
   12cb8:	50004000 	.word	0x50004000
   12cbc:	5003aee4 	.word	0x5003aee4
   12cc0:	5000470c 	.word	0x5000470c
   12cc4:	00ff8000 	.word	0x00ff8000
   12cc8:	50039000 	.word	0x50039000
   12ccc:	e000ed00 	.word	0xe000ed00
   12cd0:	05fa0004 	.word	0x05fa0004
   12cd4:	20000024 	.word	0x20000024
   12cd8:	03d09000 	.word	0x03d09000

00012cdc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   12cdc:	4b04      	ldr	r3, [pc, #16]	; (12cf0 <nrfx_clock_init+0x14>)
   12cde:	791a      	ldrb	r2, [r3, #4]
   12ce0:	b922      	cbnz	r2, 12cec <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   12ce2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   12ce4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   12ce6:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   12ce8:	4802      	ldr	r0, [pc, #8]	; (12cf4 <nrfx_clock_init+0x18>)
   12cea:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   12cec:	4802      	ldr	r0, [pc, #8]	; (12cf8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   12cee:	4770      	bx	lr
   12cf0:	200007bc 	.word	0x200007bc
   12cf4:	0bad0000 	.word	0x0bad0000
   12cf8:	0bad000c 	.word	0x0bad000c

00012cfc <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   12cfc:	b110      	cbz	r0, 12d04 <nrfx_clock_start+0x8>
   12cfe:	2801      	cmp	r0, #1
   12d00:	d020      	beq.n	12d44 <nrfx_clock_start+0x48>
   12d02:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12d04:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   12d08:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12d0c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   12d10:	03c9      	lsls	r1, r1, #15
   12d12:	d511      	bpl.n	12d38 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   12d14:	f003 0303 	and.w	r3, r3, #3
   12d18:	2b02      	cmp	r3, #2
   12d1a:	d10d      	bne.n	12d38 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   12d1c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d20:	2200      	movs	r2, #0
   12d22:	4b0d      	ldr	r3, [pc, #52]	; (12d58 <nrfx_clock_start+0x5c>)
   12d24:	601a      	str	r2, [r3, #0]
   12d26:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12d28:	2202      	movs	r2, #2
   12d2a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12d2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12d32:	2201      	movs	r2, #1
   12d34:	609a      	str	r2, [r3, #8]
}
   12d36:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   12d38:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12d3c:	2201      	movs	r2, #1
   12d3e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   12d42:	e7ed      	b.n	12d20 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d44:	2200      	movs	r2, #0
   12d46:	4b05      	ldr	r3, [pc, #20]	; (12d5c <nrfx_clock_start+0x60>)
   12d48:	601a      	str	r2, [r3, #0]
   12d4a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12d4c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12d50:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12d54:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   12d56:	4770      	bx	lr
   12d58:	50005104 	.word	0x50005104
   12d5c:	50005100 	.word	0x50005100

00012d60 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   12d60:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   12d62:	b110      	cbz	r0, 12d6a <nrfx_clock_stop+0xa>
   12d64:	2801      	cmp	r0, #1
   12d66:	d018      	beq.n	12d9a <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   12d68:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   12d6a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12d6e:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12d70:	2101      	movs	r1, #1
   12d72:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12d76:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
   12d78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d7c:	4a15      	ldr	r2, [pc, #84]	; (12dd4 <nrfx_clock_stop+0x74>)
   12d7e:	6010      	str	r0, [r2, #0]
   12d80:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12d82:	4a15      	ldr	r2, [pc, #84]	; (12dd8 <nrfx_clock_stop+0x78>)
   12d84:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12d86:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   12d8a:	03db      	lsls	r3, r3, #15
   12d8c:	d5ec      	bpl.n	12d68 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   12d8e:	2001      	movs	r0, #1
   12d90:	f002 fc0f 	bl	155b2 <nrfx_busy_wait>
   12d94:	3d01      	subs	r5, #1
   12d96:	d1f6      	bne.n	12d86 <nrfx_clock_stop+0x26>
   12d98:	e7e6      	b.n	12d68 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   12d9a:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d9e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12da0:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12da4:	4b0d      	ldr	r3, [pc, #52]	; (12ddc <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
   12da6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12daa:	601a      	str	r2, [r3, #0]
   12dac:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12dae:	4b0c      	ldr	r3, [pc, #48]	; (12de0 <nrfx_clock_stop+0x80>)
   12db0:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12db2:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12db6:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12dba:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12dbe:	03d2      	lsls	r2, r2, #15
   12dc0:	d5d2      	bpl.n	12d68 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   12dc2:	2b00      	cmp	r3, #0
   12dc4:	d0d0      	beq.n	12d68 <nrfx_clock_stop+0x8>
   12dc6:	2001      	movs	r0, #1
   12dc8:	f002 fbf3 	bl	155b2 <nrfx_busy_wait>
   12dcc:	3d01      	subs	r5, #1
   12dce:	d1f0      	bne.n	12db2 <nrfx_clock_stop+0x52>
   12dd0:	e7ca      	b.n	12d68 <nrfx_clock_stop+0x8>
   12dd2:	bf00      	nop
   12dd4:	50005104 	.word	0x50005104
   12dd8:	5000500c 	.word	0x5000500c
   12ddc:	50005100 	.word	0x50005100
   12de0:	50005004 	.word	0x50005004

00012de4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12de4:	4b16      	ldr	r3, [pc, #88]	; (12e40 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   12de6:	b510      	push	{r4, lr}
   12de8:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   12dea:	b152      	cbz	r2, 12e02 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12dec:	2000      	movs	r0, #0
   12dee:	6018      	str	r0, [r3, #0]
   12df0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   12df2:	2201      	movs	r2, #1
   12df4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12df8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   12dfc:	4b11      	ldr	r3, [pc, #68]	; (12e44 <nrfx_power_clock_irq_handler+0x60>)
   12dfe:	681b      	ldr	r3, [r3, #0]
   12e00:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12e02:	4b11      	ldr	r3, [pc, #68]	; (12e48 <nrfx_power_clock_irq_handler+0x64>)
   12e04:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   12e06:	b18a      	cbz	r2, 12e2c <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12e08:	2200      	movs	r2, #0
   12e0a:	601a      	str	r2, [r3, #0]
   12e0c:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12e0e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12e12:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12e16:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   12e1a:	f002 0203 	and.w	r2, r2, #3
   12e1e:	2a01      	cmp	r2, #1
   12e20:	f04f 0102 	mov.w	r1, #2
   12e24:	d103      	bne.n	12e2e <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   12e26:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12e2a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   12e2c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   12e2e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   12e32:	4b04      	ldr	r3, [pc, #16]	; (12e44 <nrfx_power_clock_irq_handler+0x60>)
   12e34:	2001      	movs	r0, #1
}
   12e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   12e3a:	681b      	ldr	r3, [r3, #0]
   12e3c:	4718      	bx	r3
   12e3e:	bf00      	nop
   12e40:	50005100 	.word	0x50005100
   12e44:	200007bc 	.word	0x200007bc
   12e48:	50005104 	.word	0x50005104

00012e4c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   12e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e4e:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   12e50:	2700      	movs	r7, #0
	_kernel.idle = ticks;
   12e52:	4e1b      	ldr	r6, [pc, #108]	; (12ec0 <idle+0x74>)
   12e54:	f04f 0220 	mov.w	r2, #32
   12e58:	f3ef 8311 	mrs	r3, BASEPRI
   12e5c:	f382 8811 	msr	BASEPRI, r2
   12e60:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   12e64:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   12e66:	b188      	cbz	r0, 12e8c <idle+0x40>
			cpu->pending_abort = NULL;
   12e68:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   12e6a:	f383 8811 	msr	BASEPRI, r3
   12e6e:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   12e72:	f000 fbed 	bl	13650 <z_thread_single_abort>
	__asm__ volatile(
   12e76:	f04f 0320 	mov.w	r3, #32
   12e7a:	f3ef 8011 	mrs	r0, BASEPRI
   12e7e:	f383 8811 	msr	BASEPRI, r3
   12e82:	f3bf 8f6f 	isb	sy
   12e86:	f002 fbe1 	bl	1564c <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   12e8a:	e7e3      	b.n	12e54 <idle+0x8>
	__asm__ volatile(
   12e8c:	f383 8811 	msr	BASEPRI, r3
   12e90:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   12e94:	f04f 0220 	mov.w	r2, #32
   12e98:	f3ef 8311 	mrs	r3, BASEPRI
   12e9c:	f382 8811 	msr	BASEPRI, r2
   12ea0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   12ea4:	f002 fc9e 	bl	157e4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   12ea8:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   12eaa:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   12eac:	2802      	cmp	r0, #2
   12eae:	bfd8      	it	le
   12eb0:	4608      	movle	r0, r1
   12eb2:	f002 fca7 	bl	15804 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   12eb6:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   12eb8:	f7ff f9d6 	bl	12268 <arch_cpu_idle>
}
   12ebc:	e7ca      	b.n	12e54 <idle+0x8>
   12ebe:	bf00      	nop
   12ec0:	200007c4 	.word	0x200007c4

00012ec4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   12ec4:	4802      	ldr	r0, [pc, #8]	; (12ed0 <z_bss_zero+0xc>)
   12ec6:	4a03      	ldr	r2, [pc, #12]	; (12ed4 <z_bss_zero+0x10>)
   12ec8:	2100      	movs	r1, #0
   12eca:	1a12      	subs	r2, r2, r0
   12ecc:	f002 bb40 	b.w	15550 <memset>
   12ed0:	20000118 	.word	0x20000118
   12ed4:	20000828 	.word	0x20000828

00012ed8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   12ed8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   12eda:	4806      	ldr	r0, [pc, #24]	; (12ef4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   12edc:	4a06      	ldr	r2, [pc, #24]	; (12ef8 <z_data_copy+0x20>)
   12ede:	4907      	ldr	r1, [pc, #28]	; (12efc <z_data_copy+0x24>)
   12ee0:	1a12      	subs	r2, r2, r0
   12ee2:	f002 fb0a 	bl	154fa <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   12ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   12eea:	4a05      	ldr	r2, [pc, #20]	; (12f00 <z_data_copy+0x28>)
   12eec:	4905      	ldr	r1, [pc, #20]	; (12f04 <z_data_copy+0x2c>)
   12eee:	4806      	ldr	r0, [pc, #24]	; (12f08 <z_data_copy+0x30>)
   12ef0:	f002 bb03 	b.w	154fa <memcpy>
   12ef4:	20000000 	.word	0x20000000
   12ef8:	20000114 	.word	0x20000114
   12efc:	00016110 	.word	0x00016110
   12f00:	00000000 	.word	0x00000000
   12f04:	00016110 	.word	0x00016110
   12f08:	20000000 	.word	0x20000000

00012f0c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   12f0c:	2201      	movs	r2, #1
{
   12f0e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   12f10:	4b08      	ldr	r3, [pc, #32]	; (12f34 <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   12f12:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   12f14:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   12f16:	f000 ffab 	bl	13e70 <z_sys_init_run_level>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   12f1a:	2003      	movs	r0, #3
   12f1c:	f000 ffa8 	bl	13e70 <z_sys_init_run_level>

	z_init_static_threads();
   12f20:	f000 fdd8 	bl	13ad4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   12f24:	f001 fef6 	bl	14d14 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   12f28:	4a03      	ldr	r2, [pc, #12]	; (12f38 <bg_thread_main+0x2c>)
   12f2a:	7b13      	ldrb	r3, [r2, #12]
   12f2c:	f023 0301 	bic.w	r3, r3, #1
   12f30:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   12f32:	bd08      	pop	{r3, pc}
   12f34:	20000825 	.word	0x20000825
   12f38:	20000198 	.word	0x20000198

00012f3c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   12f3c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   12f40:	4b37      	ldr	r3, [pc, #220]	; (13020 <z_cstart+0xe4>)
   12f42:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
   12f44:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   12f48:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   12f4c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f50:	2400      	movs	r4, #0
   12f52:	23e0      	movs	r3, #224	; 0xe0
   12f54:	4d33      	ldr	r5, [pc, #204]	; (13024 <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   12f56:	f04f 0b01 	mov.w	fp, #1
   12f5a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   12f5e:	77ec      	strb	r4, [r5, #31]
   12f60:	762c      	strb	r4, [r5, #24]
   12f62:	766c      	strb	r4, [r5, #25]
   12f64:	76ac      	strb	r4, [r5, #26]
   12f66:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   12f68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   12f6a:	4e2f      	ldr	r6, [pc, #188]	; (13028 <z_cstart+0xec>)
   12f6c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   12f70:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   12f72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   12f74:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 13044 <z_cstart+0x108>
   12f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   12f7c:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   12f7e:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   12f80:	f7ff fb18 	bl	125b4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   12f84:	f7ff f96a 	bl	1225c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   12f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f8c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   12f8e:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   12f90:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   12f94:	4d25      	ldr	r5, [pc, #148]	; (1302c <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   12f96:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   12f9a:	ab06      	add	r3, sp, #24
   12f9c:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   12f9e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   12fa0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   12fa4:	f000 ff64 	bl	13e70 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   12fa8:	2001      	movs	r0, #1
   12faa:	f000 ff61 	bl	13e70 <z_sys_init_run_level>
	z_sched_init();
   12fae:	f000 fc97 	bl	138e0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   12fb2:	4b1f      	ldr	r3, [pc, #124]	; (13030 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   12fb4:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   12fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12fba:	491e      	ldr	r1, [pc, #120]	; (13034 <z_cstart+0xf8>)
   12fbc:	9305      	str	r3, [sp, #20]
   12fbe:	4630      	mov	r0, r6
   12fc0:	4653      	mov	r3, sl
   12fc2:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   12fc6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12fca:	9400      	str	r4, [sp, #0]
   12fcc:	f000 fd52 	bl	13a74 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12fd0:	7b73      	ldrb	r3, [r6, #13]
   12fd2:	4680      	mov	r8, r0
   12fd4:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   12fd8:	4630      	mov	r0, r6
   12fda:	7373      	strb	r3, [r6, #13]
   12fdc:	f002 fb62 	bl	156a4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   12fe0:	230f      	movs	r3, #15
   12fe2:	4f15      	ldr	r7, [pc, #84]	; (13038 <z_cstart+0xfc>)
   12fe4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12fe8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12fec:	4913      	ldr	r1, [pc, #76]	; (1303c <z_cstart+0x100>)
   12fee:	4b14      	ldr	r3, [pc, #80]	; (13040 <z_cstart+0x104>)
   12ff0:	4638      	mov	r0, r7
   12ff2:	e9cd b404 	strd	fp, r4, [sp, #16]
   12ff6:	e9cd 5400 	strd	r5, r4, [sp]
   12ffa:	f000 fd3b 	bl	13a74 <z_setup_new_thread>
   12ffe:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   13000:	4652      	mov	r2, sl
   13002:	f023 0304 	bic.w	r3, r3, #4
   13006:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   13008:	f105 031c 	add.w	r3, r5, #28
   1300c:	4641      	mov	r1, r8
   1300e:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   13010:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   13014:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   13016:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   13018:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1301c:	f7ff f900 	bl	12220 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   13020:	20001968 	.word	0x20001968
   13024:	e000ed00 	.word	0xe000ed00
   13028:	20000198 	.word	0x20000198
   1302c:	200007c4 	.word	0x200007c4
   13030:	00016106 	.word	0x00016106
   13034:	20000828 	.word	0x20000828
   13038:	20000118 	.word	0x20000118
   1303c:	20001828 	.word	0x20001828
   13040:	00012e4d 	.word	0x00012e4d
   13044:	00012f0d 	.word	0x00012f0d

00013048 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   13048:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1304a:	4b0e      	ldr	r3, [pc, #56]	; (13084 <init_mem_slab_module+0x3c>)
   1304c:	4c0e      	ldr	r4, [pc, #56]	; (13088 <init_mem_slab_module+0x40>)
   1304e:	42a3      	cmp	r3, r4
   13050:	d301      	bcc.n	13056 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   13052:	2000      	movs	r0, #0
	return rc;
}
   13054:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   13056:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1305a:	ea41 0200 	orr.w	r2, r1, r0
   1305e:	f012 0203 	ands.w	r2, r2, #3
   13062:	d10b      	bne.n	1307c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   13064:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   13066:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   13068:	42aa      	cmp	r2, r5
   1306a:	d101      	bne.n	13070 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1306c:	331c      	adds	r3, #28
   1306e:	e7ee      	b.n	1304e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   13070:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   13072:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   13074:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   13076:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   13078:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1307a:	e7f5      	b.n	13068 <init_mem_slab_module+0x20>
		return -EINVAL;
   1307c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   13080:	e7e8      	b.n	13054 <init_mem_slab_module+0xc>
   13082:	bf00      	nop
   13084:	200000c4 	.word	0x200000c4
   13088:	200000c4 	.word	0x200000c4

0001308c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1308c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1308e:	460c      	mov	r4, r1
   13090:	4616      	mov	r6, r2
   13092:	461f      	mov	r7, r3
   13094:	f04f 0320 	mov.w	r3, #32
   13098:	f3ef 8111 	mrs	r1, BASEPRI
   1309c:	f383 8811 	msr	BASEPRI, r3
   130a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   130a4:	6943      	ldr	r3, [r0, #20]
   130a6:	b15b      	cbz	r3, 130c0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   130a8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   130aa:	681b      	ldr	r3, [r3, #0]
   130ac:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   130ae:	6983      	ldr	r3, [r0, #24]
   130b0:	3301      	adds	r3, #1
   130b2:	6183      	str	r3, [r0, #24]
		result = 0;
   130b4:	2000      	movs	r0, #0
	__asm__ volatile(
   130b6:	f381 8811 	msr	BASEPRI, r1
   130ba:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   130be:	e011      	b.n	130e4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   130c0:	ea56 0207 	orrs.w	r2, r6, r7
   130c4:	d103      	bne.n	130ce <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   130c6:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   130ca:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   130cc:	e7f3      	b.n	130b6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   130ce:	4602      	mov	r2, r0
   130d0:	e9cd 6700 	strd	r6, r7, [sp]
   130d4:	4804      	ldr	r0, [pc, #16]	; (130e8 <k_mem_slab_alloc+0x5c>)
   130d6:	f000 fb7d 	bl	137d4 <z_pend_curr>
		if (result == 0) {
   130da:	b918      	cbnz	r0, 130e4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   130dc:	4b03      	ldr	r3, [pc, #12]	; (130ec <k_mem_slab_alloc+0x60>)
   130de:	689b      	ldr	r3, [r3, #8]
   130e0:	695b      	ldr	r3, [r3, #20]
   130e2:	6023      	str	r3, [r4, #0]
}
   130e4:	b002      	add	sp, #8
   130e6:	bdd0      	pop	{r4, r6, r7, pc}
   130e8:	20000826 	.word	0x20000826
   130ec:	200007c4 	.word	0x200007c4

000130f0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   130f0:	b570      	push	{r4, r5, r6, lr}
   130f2:	4604      	mov	r4, r0
   130f4:	460d      	mov	r5, r1
	__asm__ volatile(
   130f6:	f04f 0320 	mov.w	r3, #32
   130fa:	f3ef 8611 	mrs	r6, BASEPRI
   130fe:	f383 8811 	msr	BASEPRI, r3
   13102:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   13106:	f002 fb28 	bl	1575a <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1310a:	b158      	cbz	r0, 13124 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1310c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1310e:	682a      	ldr	r2, [r5, #0]
   13110:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   13112:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   13114:	f002 fac6 	bl	156a4 <z_ready_thread>
		z_reschedule(&lock, key);
   13118:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1311a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1311e:	4808      	ldr	r0, [pc, #32]	; (13140 <k_mem_slab_free+0x50>)
   13120:	f000 b910 	b.w	13344 <z_reschedule>
		**(char ***)mem = slab->free_list;
   13124:	682b      	ldr	r3, [r5, #0]
   13126:	6962      	ldr	r2, [r4, #20]
   13128:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1312a:	682b      	ldr	r3, [r5, #0]
   1312c:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1312e:	69a3      	ldr	r3, [r4, #24]
   13130:	3b01      	subs	r3, #1
   13132:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   13134:	f386 8811 	msr	BASEPRI, r6
   13138:	f3bf 8f6f 	isb	sy
}
   1313c:	bd70      	pop	{r4, r5, r6, pc}
   1313e:	bf00      	nop
   13140:	20000826 	.word	0x20000826

00013144 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   13144:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13148:	4604      	mov	r4, r0
   1314a:	4616      	mov	r6, r2
   1314c:	461f      	mov	r7, r3
	__asm__ volatile(
   1314e:	f04f 0320 	mov.w	r3, #32
   13152:	f3ef 8811 	mrs	r8, BASEPRI
   13156:	f383 8811 	msr	BASEPRI, r3
   1315a:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1315e:	68c3      	ldr	r3, [r0, #12]
   13160:	4a32      	ldr	r2, [pc, #200]	; (1322c <z_impl_k_mutex_lock+0xe8>)
   13162:	b16b      	cbz	r3, 13180 <z_impl_k_mutex_lock+0x3c>
   13164:	6880      	ldr	r0, [r0, #8]
   13166:	6891      	ldr	r1, [r2, #8]
   13168:	4288      	cmp	r0, r1
   1316a:	d019      	beq.n	131a0 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1316c:	ea56 0307 	orrs.w	r3, r6, r7
   13170:	d118      	bne.n	131a4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   13172:	f388 8811 	msr	BASEPRI, r8
   13176:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1317a:	f06f 000f 	mvn.w	r0, #15
   1317e:	e00c      	b.n	1319a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   13180:	6891      	ldr	r1, [r2, #8]
   13182:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   13186:	3301      	adds	r3, #1
   13188:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1318a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1318c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1318e:	60a3      	str	r3, [r4, #8]
   13190:	f388 8811 	msr	BASEPRI, r8
   13194:	f3bf 8f6f 	isb	sy
		return 0;
   13198:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1319a:	b002      	add	sp, #8
   1319c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   131a0:	6921      	ldr	r1, [r4, #16]
   131a2:	e7f0      	b.n	13186 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   131a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   131a8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   131ac:	4299      	cmp	r1, r3
   131ae:	bfa8      	it	ge
   131b0:	4619      	movge	r1, r3
   131b2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   131b6:	4299      	cmp	r1, r3
   131b8:	da2c      	bge.n	13214 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   131ba:	f000 fb4d 	bl	13858 <z_set_prio>
   131be:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   131c0:	4622      	mov	r2, r4
   131c2:	4641      	mov	r1, r8
   131c4:	e9cd 6700 	strd	r6, r7, [sp]
   131c8:	4819      	ldr	r0, [pc, #100]	; (13230 <z_impl_k_mutex_lock+0xec>)
   131ca:	f000 fb03 	bl	137d4 <z_pend_curr>
	if (got_mutex == 0) {
   131ce:	2800      	cmp	r0, #0
   131d0:	d0e3      	beq.n	1319a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   131d2:	f04f 0320 	mov.w	r3, #32
   131d6:	f3ef 8611 	mrs	r6, BASEPRI
   131da:	f383 8811 	msr	BASEPRI, r3
   131de:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   131e2:	6823      	ldr	r3, [r4, #0]
   131e4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   131e6:	42a3      	cmp	r3, r4
   131e8:	d007      	beq.n	131fa <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   131ea:	b133      	cbz	r3, 131fa <z_impl_k_mutex_lock+0xb6>
   131ec:	f993 300e 	ldrsb.w	r3, [r3, #14]
   131f0:	4299      	cmp	r1, r3
   131f2:	bfa8      	it	ge
   131f4:	4619      	movge	r1, r3
   131f6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   131fa:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   131fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   13200:	4299      	cmp	r1, r3
   13202:	d109      	bne.n	13218 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   13204:	b16d      	cbz	r5, 13222 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   13206:	4631      	mov	r1, r6
   13208:	4809      	ldr	r0, [pc, #36]	; (13230 <z_impl_k_mutex_lock+0xec>)
   1320a:	f000 f89b 	bl	13344 <z_reschedule>
	return -EAGAIN;
   1320e:	f06f 000a 	mvn.w	r0, #10
   13212:	e7c2      	b.n	1319a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   13214:	2500      	movs	r5, #0
   13216:	e7d3      	b.n	131c0 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   13218:	f000 fb1e 	bl	13858 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1321c:	2800      	cmp	r0, #0
   1321e:	d1f2      	bne.n	13206 <z_impl_k_mutex_lock+0xc2>
   13220:	e7f0      	b.n	13204 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   13222:	f386 8811 	msr	BASEPRI, r6
   13226:	f3bf 8f6f 	isb	sy
   1322a:	e7f0      	b.n	1320e <z_impl_k_mutex_lock+0xca>
   1322c:	200007c4 	.word	0x200007c4
   13230:	20000826 	.word	0x20000826

00013234 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   13234:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   13236:	6883      	ldr	r3, [r0, #8]
{
   13238:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1323a:	2b00      	cmp	r3, #0
   1323c:	d036      	beq.n	132ac <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1323e:	4a1e      	ldr	r2, [pc, #120]	; (132b8 <z_impl_k_mutex_unlock+0x84>)
   13240:	6892      	ldr	r2, [r2, #8]
   13242:	4293      	cmp	r3, r2
   13244:	d135      	bne.n	132b2 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   13246:	7bda      	ldrb	r2, [r3, #15]
   13248:	3a01      	subs	r2, #1
   1324a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1324c:	68c3      	ldr	r3, [r0, #12]
   1324e:	2b01      	cmp	r3, #1
   13250:	d005      	beq.n	1325e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   13252:	3b01      	subs	r3, #1
   13254:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   13256:	f000 f8d9 	bl	1340c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1325a:	2000      	movs	r0, #0
}
   1325c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1325e:	f04f 0320 	mov.w	r3, #32
   13262:	f3ef 8511 	mrs	r5, BASEPRI
   13266:	f383 8811 	msr	BASEPRI, r3
   1326a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1326e:	6901      	ldr	r1, [r0, #16]
   13270:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   13272:	f990 300e 	ldrsb.w	r3, [r0, #14]
   13276:	4299      	cmp	r1, r3
   13278:	d001      	beq.n	1327e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1327a:	f000 faed 	bl	13858 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1327e:	4620      	mov	r0, r4
   13280:	f002 fa6b 	bl	1575a <z_unpend_first_thread>
	mutex->owner = new_owner;
   13284:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   13286:	b158      	cbz	r0, 132a0 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   13288:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1328c:	6122      	str	r2, [r4, #16]
   1328e:	2200      	movs	r2, #0
   13290:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   13292:	f002 fa07 	bl	156a4 <z_ready_thread>
		z_reschedule(&lock, key);
   13296:	4629      	mov	r1, r5
   13298:	4808      	ldr	r0, [pc, #32]	; (132bc <z_impl_k_mutex_unlock+0x88>)
   1329a:	f000 f853 	bl	13344 <z_reschedule>
   1329e:	e7da      	b.n	13256 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   132a0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   132a2:	f385 8811 	msr	BASEPRI, r5
   132a6:	f3bf 8f6f 	isb	sy
   132aa:	e7d4      	b.n	13256 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   132ac:	f06f 0015 	mvn.w	r0, #21
   132b0:	e7d4      	b.n	1325c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   132b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   132b6:	e7d1      	b.n	1325c <z_impl_k_mutex_unlock+0x28>
   132b8:	200007c4 	.word	0x200007c4
   132bc:	20000826 	.word	0x20000826

000132c0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   132c0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   132c2:	4c08      	ldr	r4, [pc, #32]	; (132e4 <z_reset_time_slice+0x24>)
   132c4:	6823      	ldr	r3, [r4, #0]
   132c6:	b15b      	cbz	r3, 132e0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   132c8:	f7fe fbfe 	bl	11ac8 <z_clock_elapsed>
   132cc:	6822      	ldr	r2, [r4, #0]
   132ce:	4906      	ldr	r1, [pc, #24]	; (132e8 <z_reset_time_slice+0x28>)
   132d0:	4410      	add	r0, r2
   132d2:	6148      	str	r0, [r1, #20]
		z_set_timeout_expiry(slice_time, false);
	}
}
   132d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   132d8:	2100      	movs	r1, #0
   132da:	4610      	mov	r0, r2
   132dc:	f002 ba92 	b.w	15804 <z_set_timeout_expiry>
}
   132e0:	bd10      	pop	{r4, pc}
   132e2:	bf00      	nop
   132e4:	20000800 	.word	0x20000800
   132e8:	200007c4 	.word	0x200007c4

000132ec <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   132ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132ee:	460c      	mov	r4, r1
	__asm__ volatile(
   132f0:	f04f 0320 	mov.w	r3, #32
   132f4:	f3ef 8511 	mrs	r5, BASEPRI
   132f8:	f383 8811 	msr	BASEPRI, r3
   132fc:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   13300:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13304:	f240 36e7 	movw	r6, #999	; 0x3e7
   13308:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1330a:	2200      	movs	r2, #0
   1330c:	fbe1 6700 	umlal	r6, r7, r1, r0
   13310:	4b09      	ldr	r3, [pc, #36]	; (13338 <k_sched_time_slice_set+0x4c>)
   13312:	4630      	mov	r0, r6
   13314:	615a      	str	r2, [r3, #20]
   13316:	4639      	mov	r1, r7
   13318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1331c:	2300      	movs	r3, #0
   1331e:	f7fd f88d 	bl	1043c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   13322:	4b06      	ldr	r3, [pc, #24]	; (1333c <k_sched_time_slice_set+0x50>)
   13324:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   13326:	4b06      	ldr	r3, [pc, #24]	; (13340 <k_sched_time_slice_set+0x54>)
   13328:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1332a:	f7ff ffc9 	bl	132c0 <z_reset_time_slice>
	__asm__ volatile(
   1332e:	f385 8811 	msr	BASEPRI, r5
   13332:	f3bf 8f6f 	isb	sy
	}
}
   13336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13338:	200007c4 	.word	0x200007c4
   1333c:	20000800 	.word	0x20000800
   13340:	200007fc 	.word	0x200007fc

00013344 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13344:	b949      	cbnz	r1, 1335a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13346:	f3ef 8005 	mrs	r0, IPSR
   1334a:	b930      	cbnz	r0, 1335a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1334c:	4b05      	ldr	r3, [pc, #20]	; (13364 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1334e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13350:	689b      	ldr	r3, [r3, #8]
   13352:	429a      	cmp	r2, r3
   13354:	d001      	beq.n	1335a <z_reschedule+0x16>
	ret = arch_swap(key);
   13356:	f7fe bebd 	b.w	120d4 <arch_swap>
   1335a:	f381 8811 	msr	BASEPRI, r1
   1335e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   13362:	4770      	bx	lr
   13364:	200007c4 	.word	0x200007c4

00013368 <k_sched_lock>:
	__asm__ volatile(
   13368:	f04f 0320 	mov.w	r3, #32
   1336c:	f3ef 8111 	mrs	r1, BASEPRI
   13370:	f383 8811 	msr	BASEPRI, r3
   13374:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   13378:	4b04      	ldr	r3, [pc, #16]	; (1338c <k_sched_lock+0x24>)
   1337a:	689a      	ldr	r2, [r3, #8]
   1337c:	7bd3      	ldrb	r3, [r2, #15]
   1337e:	3b01      	subs	r3, #1
   13380:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   13382:	f381 8811 	msr	BASEPRI, r1
   13386:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1338a:	4770      	bx	lr
   1338c:	200007c4 	.word	0x200007c4

00013390 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   13390:	4b09      	ldr	r3, [pc, #36]	; (133b8 <z_priq_dumb_remove+0x28>)
   13392:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   13396:	4282      	cmp	r2, r0
   13398:	d105      	bne.n	133a6 <z_priq_dumb_remove+0x16>
   1339a:	689b      	ldr	r3, [r3, #8]
   1339c:	428b      	cmp	r3, r1
   1339e:	d102      	bne.n	133a6 <z_priq_dumb_remove+0x16>
   133a0:	7b4b      	ldrb	r3, [r1, #13]
   133a2:	06db      	lsls	r3, r3, #27
   133a4:	d106      	bne.n	133b4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   133a6:	e9d1 3200 	ldrd	r3, r2, [r1]
   133aa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   133ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   133ae:	2300      	movs	r3, #0
	node->prev = NULL;
   133b0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   133b4:	4770      	bx	lr
   133b6:	bf00      	nop
   133b8:	200007c4 	.word	0x200007c4

000133bc <update_cache>:
{
   133bc:	b538      	push	{r3, r4, r5, lr}
   133be:	4c12      	ldr	r4, [pc, #72]	; (13408 <update_cache+0x4c>)
   133c0:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   133c2:	6923      	ldr	r3, [r4, #16]
   133c4:	68a2      	ldr	r2, [r4, #8]
   133c6:	b10b      	cbz	r3, 133cc <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   133c8:	68e5      	ldr	r5, [r4, #12]
   133ca:	e00c      	b.n	133e6 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   133cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   133d0:	f002 f95e 	bl	15690 <z_priq_dumb_best>
   133d4:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   133d6:	7b53      	ldrb	r3, [r2, #13]
   133d8:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   133da:	bf44      	itt	mi
   133dc:	f043 0308 	orrmi.w	r3, r3, #8
   133e0:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   133e2:	2d00      	cmp	r5, #0
   133e4:	d0f0      	beq.n	133c8 <update_cache+0xc>
	if (preempt_ok != 0) {
   133e6:	b949      	cbnz	r1, 133fc <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   133e8:	7b53      	ldrb	r3, [r2, #13]
   133ea:	06db      	lsls	r3, r3, #27
   133ec:	d106      	bne.n	133fc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   133ee:	69ab      	ldr	r3, [r5, #24]
   133f0:	b923      	cbnz	r3, 133fc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   133f2:	89d3      	ldrh	r3, [r2, #14]
   133f4:	2b7f      	cmp	r3, #127	; 0x7f
   133f6:	d901      	bls.n	133fc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   133f8:	62a2      	str	r2, [r4, #40]	; 0x28
}
   133fa:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   133fc:	4295      	cmp	r5, r2
   133fe:	d001      	beq.n	13404 <update_cache+0x48>
			z_reset_time_slice();
   13400:	f7ff ff5e 	bl	132c0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   13404:	62a5      	str	r5, [r4, #40]	; 0x28
}
   13406:	e7f8      	b.n	133fa <update_cache+0x3e>
   13408:	200007c4 	.word	0x200007c4

0001340c <k_sched_unlock>:
{
   1340c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1340e:	f04f 0320 	mov.w	r3, #32
   13412:	f3ef 8411 	mrs	r4, BASEPRI
   13416:	f383 8811 	msr	BASEPRI, r3
   1341a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1341e:	4b08      	ldr	r3, [pc, #32]	; (13440 <k_sched_unlock+0x34>)
		update_cache(0);
   13420:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   13422:	689a      	ldr	r2, [r3, #8]
   13424:	7bd3      	ldrb	r3, [r2, #15]
   13426:	3301      	adds	r3, #1
   13428:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1342a:	f7ff ffc7 	bl	133bc <update_cache>
	__asm__ volatile(
   1342e:	f384 8811 	msr	BASEPRI, r4
   13432:	f3bf 8f6f 	isb	sy
}
   13436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1343a:	f002 b913 	b.w	15664 <z_reschedule_unlocked>
   1343e:	bf00      	nop
   13440:	200007c4 	.word	0x200007c4

00013444 <ready_thread>:
{
   13444:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   13446:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1344a:	7b43      	ldrb	r3, [r0, #13]
   1344c:	2a00      	cmp	r2, #0
   1344e:	db2c      	blt.n	134aa <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   13450:	06db      	lsls	r3, r3, #27
   13452:	d12a      	bne.n	134aa <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   13454:	6983      	ldr	r3, [r0, #24]
   13456:	bb43      	cbnz	r3, 134aa <ready_thread+0x66>
	return list->head == list;
   13458:	4a15      	ldr	r2, [pc, #84]	; (134b0 <ready_thread+0x6c>)
   1345a:	4611      	mov	r1, r2
   1345c:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13460:	428c      	cmp	r4, r1
   13462:	bf18      	it	ne
   13464:	4623      	movne	r3, r4
   13466:	2b00      	cmp	r3, #0
   13468:	bf38      	it	cc
   1346a:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1346c:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1346e:	b1b3      	cbz	r3, 1349e <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   13470:	f990 600e 	ldrsb.w	r6, [r0, #14]
   13474:	f993 500e 	ldrsb.w	r5, [r3, #14]
   13478:	42ae      	cmp	r6, r5
   1347a:	db03      	blt.n	13484 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   1347c:	42a3      	cmp	r3, r4
   1347e:	d00e      	beq.n	1349e <ready_thread+0x5a>
   13480:	681b      	ldr	r3, [r3, #0]
   13482:	e7f4      	b.n	1346e <ready_thread+0x2a>
	node->prev = successor->prev;
   13484:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   13486:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1348a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1348c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1348e:	7b43      	ldrb	r3, [r0, #13]
   13490:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13494:	7343      	strb	r3, [r0, #13]
}
   13496:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   13498:	2000      	movs	r0, #0
   1349a:	f7ff bf8f 	b.w	133bc <update_cache>
	node->prev = list->tail;
   1349e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   134a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   134a4:	6018      	str	r0, [r3, #0]
	list->tail = node;
   134a6:	6310      	str	r0, [r2, #48]	; 0x30
}
   134a8:	e7f1      	b.n	1348e <ready_thread+0x4a>
}
   134aa:	bc70      	pop	{r4, r5, r6}
   134ac:	4770      	bx	lr
   134ae:	bf00      	nop
   134b0:	200007c4 	.word	0x200007c4

000134b4 <z_sched_start>:
{
   134b4:	b510      	push	{r4, lr}
	__asm__ volatile(
   134b6:	f04f 0220 	mov.w	r2, #32
   134ba:	f3ef 8411 	mrs	r4, BASEPRI
   134be:	f382 8811 	msr	BASEPRI, r2
   134c2:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   134c6:	7b42      	ldrb	r2, [r0, #13]
   134c8:	0751      	lsls	r1, r2, #29
   134ca:	d404      	bmi.n	134d6 <z_sched_start+0x22>
	__asm__ volatile(
   134cc:	f384 8811 	msr	BASEPRI, r4
   134d0:	f3bf 8f6f 	isb	sy
}
   134d4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   134d6:	f022 0204 	bic.w	r2, r2, #4
   134da:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   134dc:	f7ff ffb2 	bl	13444 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   134e0:	4621      	mov	r1, r4
}
   134e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   134e6:	4801      	ldr	r0, [pc, #4]	; (134ec <z_sched_start+0x38>)
   134e8:	f7ff bf2c 	b.w	13344 <z_reschedule>
   134ec:	20000826 	.word	0x20000826

000134f0 <move_thread_to_end_of_prio_q>:
{
   134f0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   134f2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   134f6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   134f8:	2b00      	cmp	r3, #0
   134fa:	da02      	bge.n	13502 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   134fc:	4817      	ldr	r0, [pc, #92]	; (1355c <move_thread_to_end_of_prio_q+0x6c>)
   134fe:	f7ff ff47 	bl	13390 <z_priq_dumb_remove>
	return list->head == list;
   13502:	4a17      	ldr	r2, [pc, #92]	; (13560 <move_thread_to_end_of_prio_q+0x70>)
   13504:	4610      	mov	r0, r2
   13506:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1350a:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1350c:	4283      	cmp	r3, r0
   1350e:	bf08      	it	eq
   13510:	2300      	moveq	r3, #0
   13512:	2b00      	cmp	r3, #0
   13514:	bf38      	it	cc
   13516:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13518:	b1d3      	cbz	r3, 13550 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1351a:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1351e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   13522:	42ae      	cmp	r6, r5
   13524:	db03      	blt.n	1352e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   13526:	42a3      	cmp	r3, r4
   13528:	d012      	beq.n	13550 <move_thread_to_end_of_prio_q+0x60>
   1352a:	681b      	ldr	r3, [r3, #0]
   1352c:	e7f4      	b.n	13518 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1352e:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   13530:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   13534:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   13536:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   13538:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1353a:	6890      	ldr	r0, [r2, #8]
   1353c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13540:	734b      	strb	r3, [r1, #13]
   13542:	1a43      	subs	r3, r0, r1
   13544:	4258      	negs	r0, r3
   13546:	4158      	adcs	r0, r3
}
   13548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1354c:	f7ff bf36 	b.w	133bc <update_cache>
	node->prev = list->tail;
   13550:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   13554:	6b13      	ldr	r3, [r2, #48]	; 0x30
   13556:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13558:	6311      	str	r1, [r2, #48]	; 0x30
}
   1355a:	e7ed      	b.n	13538 <move_thread_to_end_of_prio_q+0x48>
   1355c:	200007f0 	.word	0x200007f0
   13560:	200007c4 	.word	0x200007c4

00013564 <z_time_slice>:
{
   13564:	4601      	mov	r1, r0
   13566:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   13568:	f04f 0320 	mov.w	r3, #32
   1356c:	f3ef 8411 	mrs	r4, BASEPRI
   13570:	f383 8811 	msr	BASEPRI, r3
   13574:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   13578:	4b16      	ldr	r3, [pc, #88]	; (135d4 <z_time_slice+0x70>)
   1357a:	4a17      	ldr	r2, [pc, #92]	; (135d8 <z_time_slice+0x74>)
   1357c:	6898      	ldr	r0, [r3, #8]
   1357e:	6815      	ldr	r5, [r2, #0]
   13580:	42a8      	cmp	r0, r5
   13582:	461d      	mov	r5, r3
   13584:	d106      	bne.n	13594 <z_time_slice+0x30>
			z_reset_time_slice();
   13586:	f7ff fe9b 	bl	132c0 <z_reset_time_slice>
	__asm__ volatile(
   1358a:	f384 8811 	msr	BASEPRI, r4
   1358e:	f3bf 8f6f 	isb	sy
}
   13592:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   13594:	2600      	movs	r6, #0
   13596:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   13598:	4a10      	ldr	r2, [pc, #64]	; (135dc <z_time_slice+0x78>)
   1359a:	6812      	ldr	r2, [r2, #0]
   1359c:	b1ba      	cbz	r2, 135ce <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1359e:	89c2      	ldrh	r2, [r0, #14]
   135a0:	2a7f      	cmp	r2, #127	; 0x7f
   135a2:	d814      	bhi.n	135ce <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   135a4:	7b42      	ldrb	r2, [r0, #13]
   135a6:	06d2      	lsls	r2, r2, #27
   135a8:	d111      	bne.n	135ce <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   135aa:	4a0d      	ldr	r2, [pc, #52]	; (135e0 <z_time_slice+0x7c>)
   135ac:	f990 600e 	ldrsb.w	r6, [r0, #14]
   135b0:	6812      	ldr	r2, [r2, #0]
   135b2:	4296      	cmp	r6, r2
   135b4:	db0b      	blt.n	135ce <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   135b6:	4a0b      	ldr	r2, [pc, #44]	; (135e4 <z_time_slice+0x80>)
   135b8:	4290      	cmp	r0, r2
   135ba:	d008      	beq.n	135ce <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   135bc:	695a      	ldr	r2, [r3, #20]
   135be:	428a      	cmp	r2, r1
   135c0:	dc02      	bgt.n	135c8 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   135c2:	f7ff ff95 	bl	134f0 <move_thread_to_end_of_prio_q>
   135c6:	e7de      	b.n	13586 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   135c8:	1a52      	subs	r2, r2, r1
   135ca:	615a      	str	r2, [r3, #20]
   135cc:	e7dd      	b.n	1358a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   135ce:	2300      	movs	r3, #0
   135d0:	616b      	str	r3, [r5, #20]
   135d2:	e7da      	b.n	1358a <z_time_slice+0x26>
   135d4:	200007c4 	.word	0x200007c4
   135d8:	200007f8 	.word	0x200007f8
   135dc:	20000800 	.word	0x20000800
   135e0:	200007fc 	.word	0x200007fc
   135e4:	20000118 	.word	0x20000118

000135e8 <z_impl_k_thread_suspend>:
{
   135e8:	b570      	push	{r4, r5, r6, lr}
   135ea:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   135ec:	3018      	adds	r0, #24
   135ee:	f002 f8e3 	bl	157b8 <z_abort_timeout>
	__asm__ volatile(
   135f2:	f04f 0320 	mov.w	r3, #32
   135f6:	f3ef 8611 	mrs	r6, BASEPRI
   135fa:	f383 8811 	msr	BASEPRI, r3
   135fe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   13602:	f994 300d 	ldrsb.w	r3, [r4, #13]
   13606:	2b00      	cmp	r3, #0
   13608:	da07      	bge.n	1361a <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1360a:	4621      	mov	r1, r4
   1360c:	480e      	ldr	r0, [pc, #56]	; (13648 <z_impl_k_thread_suspend+0x60>)
   1360e:	f7ff febf 	bl	13390 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   13612:	7b63      	ldrb	r3, [r4, #13]
   13614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13618:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1361a:	4d0c      	ldr	r5, [pc, #48]	; (1364c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1361c:	7b63      	ldrb	r3, [r4, #13]
   1361e:	68a8      	ldr	r0, [r5, #8]
   13620:	f043 0310 	orr.w	r3, r3, #16
   13624:	7363      	strb	r3, [r4, #13]
   13626:	1b03      	subs	r3, r0, r4
   13628:	4258      	negs	r0, r3
   1362a:	4158      	adcs	r0, r3
   1362c:	f7ff fec6 	bl	133bc <update_cache>
	__asm__ volatile(
   13630:	f386 8811 	msr	BASEPRI, r6
   13634:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   13638:	68ab      	ldr	r3, [r5, #8]
   1363a:	42a3      	cmp	r3, r4
   1363c:	d103      	bne.n	13646 <z_impl_k_thread_suspend+0x5e>
}
   1363e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   13642:	f002 b80f 	b.w	15664 <z_reschedule_unlocked>
}
   13646:	bd70      	pop	{r4, r5, r6, pc}
   13648:	200007f0 	.word	0x200007f0
   1364c:	200007c4 	.word	0x200007c4

00013650 <z_thread_single_abort>:
{
   13650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13654:	4604      	mov	r4, r0
	__asm__ volatile(
   13656:	f04f 0320 	mov.w	r3, #32
   1365a:	f3ef 8211 	mrs	r2, BASEPRI
   1365e:	f383 8811 	msr	BASEPRI, r3
   13662:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   13666:	7b43      	ldrb	r3, [r0, #13]
   13668:	f013 0f28 	tst.w	r3, #40	; 0x28
   1366c:	d005      	beq.n	1367a <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1366e:	f382 8811 	msr	BASEPRI, r2
   13672:	f3bf 8f6f 	isb	sy
}
   13676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1367a:	f043 0320 	orr.w	r3, r3, #32
   1367e:	7343      	strb	r3, [r0, #13]
   13680:	f382 8811 	msr	BASEPRI, r2
   13684:	f3bf 8f6f 	isb	sy
   13688:	3018      	adds	r0, #24
   1368a:	f002 f895 	bl	157b8 <z_abort_timeout>
	__asm__ volatile(
   1368e:	f04f 0320 	mov.w	r3, #32
   13692:	f3ef 8611 	mrs	r6, BASEPRI
   13696:	f383 8811 	msr	BASEPRI, r3
   1369a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1369e:	7b63      	ldrb	r3, [r4, #13]
   136a0:	06d8      	lsls	r0, r3, #27
   136a2:	d116      	bne.n	136d2 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   136a4:	69a2      	ldr	r2, [r4, #24]
   136a6:	b9a2      	cbnz	r2, 136d2 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   136a8:	0619      	lsls	r1, r3, #24
   136aa:	d507      	bpl.n	136bc <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   136ac:	4621      	mov	r1, r4
   136ae:	4826      	ldr	r0, [pc, #152]	; (13748 <z_thread_single_abort+0xf8>)
   136b0:	f7ff fe6e 	bl	13390 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   136b4:	7b63      	ldrb	r3, [r4, #13]
   136b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   136ba:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   136bc:	4b23      	ldr	r3, [pc, #140]	; (1374c <z_thread_single_abort+0xfc>)
   136be:	6898      	ldr	r0, [r3, #8]
   136c0:	1b02      	subs	r2, r0, r4
   136c2:	4250      	negs	r0, r2
   136c4:	4150      	adcs	r0, r2
   136c6:	f7ff fe79 	bl	133bc <update_cache>
			waiter->base.pended_on = NULL;
   136ca:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   136cc:	f104 0830 	add.w	r8, r4, #48	; 0x30
   136d0:	e01d      	b.n	1370e <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
   136d2:	079b      	lsls	r3, r3, #30
   136d4:	d5f9      	bpl.n	136ca <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   136d6:	4621      	mov	r1, r4
   136d8:	68a0      	ldr	r0, [r4, #8]
   136da:	f7ff fe59 	bl	13390 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   136de:	7b63      	ldrb	r3, [r4, #13]
   136e0:	f023 0302 	bic.w	r3, r3, #2
   136e4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   136e6:	2300      	movs	r3, #0
   136e8:	60a3      	str	r3, [r4, #8]
   136ea:	e7ee      	b.n	136ca <z_thread_single_abort+0x7a>
   136ec:	f105 0018 	add.w	r0, r5, #24
   136f0:	f002 f862 	bl	157b8 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   136f4:	68a8      	ldr	r0, [r5, #8]
   136f6:	4629      	mov	r1, r5
   136f8:	f7ff fe4a 	bl	13390 <z_priq_dumb_remove>
   136fc:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   136fe:	4628      	mov	r0, r5
   13700:	f023 0302 	bic.w	r3, r3, #2
   13704:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   13706:	60af      	str	r7, [r5, #8]
   13708:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   1370a:	f7ff fe9b 	bl	13444 <ready_thread>
	return list->head == list;
   1370e:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13710:	4545      	cmp	r5, r8
   13712:	d001      	beq.n	13718 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   13714:	2d00      	cmp	r5, #0
   13716:	d1e9      	bne.n	136ec <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   13718:	4b0c      	ldr	r3, [pc, #48]	; (1374c <z_thread_single_abort+0xfc>)
   1371a:	689a      	ldr	r2, [r3, #8]
   1371c:	4b0c      	ldr	r3, [pc, #48]	; (13750 <z_thread_single_abort+0x100>)
   1371e:	429a      	cmp	r2, r3
   13720:	d102      	bne.n	13728 <z_thread_single_abort+0xd8>
			update_cache(1);
   13722:	2001      	movs	r0, #1
   13724:	f7ff fe4a 	bl	133bc <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   13728:	7b63      	ldrb	r3, [r4, #13]
   1372a:	f043 0308 	orr.w	r3, r3, #8
   1372e:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   13730:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   13732:	f386 8811 	msr	BASEPRI, r6
   13736:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1373a:	2b00      	cmp	r3, #0
   1373c:	d09b      	beq.n	13676 <z_thread_single_abort+0x26>
		fn_abort(thread);
   1373e:	4620      	mov	r0, r4
}
   13740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   13744:	4718      	bx	r3
   13746:	bf00      	nop
   13748:	200007f0 	.word	0x200007f0
   1374c:	200007c4 	.word	0x200007c4
   13750:	20000118 	.word	0x20000118

00013754 <unready_thread>:
{
   13754:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   13756:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1375a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1375c:	2b00      	cmp	r3, #0
   1375e:	da06      	bge.n	1376e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   13760:	4807      	ldr	r0, [pc, #28]	; (13780 <unready_thread+0x2c>)
   13762:	f7ff fe15 	bl	13390 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   13766:	7b4b      	ldrb	r3, [r1, #13]
   13768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1376c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1376e:	4b05      	ldr	r3, [pc, #20]	; (13784 <unready_thread+0x30>)
   13770:	6898      	ldr	r0, [r3, #8]
   13772:	1a43      	subs	r3, r0, r1
   13774:	4258      	negs	r0, r3
   13776:	4158      	adcs	r0, r3
}
   13778:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1377c:	f7ff be1e 	b.w	133bc <update_cache>
   13780:	200007f0 	.word	0x200007f0
   13784:	200007c4 	.word	0x200007c4

00013788 <pend>:
{
   13788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1378c:	4606      	mov	r6, r0
   1378e:	4614      	mov	r4, r2
   13790:	461d      	mov	r5, r3
	__asm__ volatile(
   13792:	f04f 0320 	mov.w	r3, #32
   13796:	f3ef 8711 	mrs	r7, BASEPRI
   1379a:	f383 8811 	msr	BASEPRI, r3
   1379e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   137a2:	f001 ffaf 	bl	15704 <add_to_waitq_locked>
	__asm__ volatile(
   137a6:	f387 8811 	msr	BASEPRI, r7
   137aa:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   137ae:	1c6b      	adds	r3, r5, #1
   137b0:	bf08      	it	eq
   137b2:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   137b6:	d008      	beq.n	137ca <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   137b8:	4622      	mov	r2, r4
   137ba:	462b      	mov	r3, r5
   137bc:	f106 0018 	add.w	r0, r6, #24
   137c0:	4903      	ldr	r1, [pc, #12]	; (137d0 <pend+0x48>)
}
   137c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   137c6:	f000 ba47 	b.w	13c58 <z_add_timeout>
   137ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137ce:	bf00      	nop
   137d0:	000156c5 	.word	0x000156c5

000137d4 <z_pend_curr>:
{
   137d4:	b510      	push	{r4, lr}
   137d6:	460c      	mov	r4, r1
	pending_current = _current;
   137d8:	4b06      	ldr	r3, [pc, #24]	; (137f4 <z_pend_curr+0x20>)
{
   137da:	4611      	mov	r1, r2
	pending_current = _current;
   137dc:	6898      	ldr	r0, [r3, #8]
   137de:	4b06      	ldr	r3, [pc, #24]	; (137f8 <z_pend_curr+0x24>)
   137e0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   137e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   137e6:	f7ff ffcf 	bl	13788 <pend>
   137ea:	4620      	mov	r0, r4
}
   137ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   137f0:	f7fe bc70 	b.w	120d4 <arch_swap>
   137f4:	200007c4 	.word	0x200007c4
   137f8:	200007f8 	.word	0x200007f8

000137fc <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   137fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   137fe:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   13800:	f002 f81b 	bl	1583a <z_tick_get_32>
   13804:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   13806:	f04f 0320 	mov.w	r3, #32
   1380a:	f3ef 8711 	mrs	r7, BASEPRI
   1380e:	f383 8811 	msr	BASEPRI, r3
   13812:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   13816:	4e0d      	ldr	r6, [pc, #52]	; (1384c <z_tick_sleep.part.0+0x50>)
   13818:	4b0d      	ldr	r3, [pc, #52]	; (13850 <z_tick_sleep.part.0+0x54>)
   1381a:	68b0      	ldr	r0, [r6, #8]
   1381c:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1381e:	f7ff ff99 	bl	13754 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   13822:	68b0      	ldr	r0, [r6, #8]
   13824:	490b      	ldr	r1, [pc, #44]	; (13854 <z_tick_sleep.part.0+0x58>)
   13826:	462a      	mov	r2, r5
   13828:	17eb      	asrs	r3, r5, #31
   1382a:	3018      	adds	r0, #24
   1382c:	f000 fa14 	bl	13c58 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   13830:	68b2      	ldr	r2, [r6, #8]
   13832:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   13834:	7b53      	ldrb	r3, [r2, #13]
   13836:	f043 0310 	orr.w	r3, r3, #16
   1383a:	7353      	strb	r3, [r2, #13]
   1383c:	f7fe fc4a 	bl	120d4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   13840:	f001 fffb 	bl	1583a <z_tick_get_32>
   13844:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   13846:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1384a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1384c:	200007c4 	.word	0x200007c4
   13850:	200007f8 	.word	0x200007f8
   13854:	000156c5 	.word	0x000156c5

00013858 <z_set_prio>:
{
   13858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1385c:	4604      	mov	r4, r0
   1385e:	f04f 0320 	mov.w	r3, #32
   13862:	f3ef 8811 	mrs	r8, BASEPRI
   13866:	f383 8811 	msr	BASEPRI, r3
   1386a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1386e:	7b43      	ldrb	r3, [r0, #13]
   13870:	b24e      	sxtb	r6, r1
   13872:	06db      	lsls	r3, r3, #27
   13874:	d12e      	bne.n	138d4 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   13876:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   13878:	bb65      	cbnz	r5, 138d4 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1387a:	4f18      	ldr	r7, [pc, #96]	; (138dc <z_set_prio+0x84>)
   1387c:	4621      	mov	r1, r4
   1387e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   13882:	f7ff fd85 	bl	13390 <z_priq_dumb_remove>
	return list->head == list;
   13886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1388a:	4283      	cmp	r3, r0
   1388c:	bf18      	it	ne
   1388e:	461d      	movne	r5, r3
   13890:	2d00      	cmp	r5, #0
   13892:	bf38      	it	cc
   13894:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   13896:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13898:	b1b5      	cbz	r5, 138c8 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1389a:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1389e:	42b1      	cmp	r1, r6
   138a0:	dc03      	bgt.n	138aa <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   138a2:	42aa      	cmp	r2, r5
   138a4:	d010      	beq.n	138c8 <z_set_prio+0x70>
   138a6:	682d      	ldr	r5, [r5, #0]
   138a8:	e7f6      	b.n	13898 <z_set_prio+0x40>
	node->prev = successor->prev;
   138aa:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   138ac:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   138b0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   138b2:	606c      	str	r4, [r5, #4]
			update_cache(1);
   138b4:	2001      	movs	r0, #1
   138b6:	f7ff fd81 	bl	133bc <update_cache>
   138ba:	2001      	movs	r0, #1
	__asm__ volatile(
   138bc:	f388 8811 	msr	BASEPRI, r8
   138c0:	f3bf 8f6f 	isb	sy
}
   138c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   138c8:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   138cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   138ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   138d0:	633c      	str	r4, [r7, #48]	; 0x30
}
   138d2:	e7ef      	b.n	138b4 <z_set_prio+0x5c>
			thread->base.prio = prio;
   138d4:	2000      	movs	r0, #0
   138d6:	73a6      	strb	r6, [r4, #14]
   138d8:	e7f0      	b.n	138bc <z_set_prio+0x64>
   138da:	bf00      	nop
   138dc:	200007c4 	.word	0x200007c4

000138e0 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   138e0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   138e2:	4b04      	ldr	r3, [pc, #16]	; (138f4 <z_sched_init+0x14>)
   138e4:	4608      	mov	r0, r1
   138e6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   138ea:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   138ee:	f7ff bcfd 	b.w	132ec <k_sched_time_slice_set>
   138f2:	bf00      	nop
   138f4:	200007c4 	.word	0x200007c4

000138f8 <z_impl_k_yield>:
{
   138f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   138fa:	4c24      	ldr	r4, [pc, #144]	; (1398c <z_impl_k_yield+0x94>)
   138fc:	4b24      	ldr	r3, [pc, #144]	; (13990 <z_impl_k_yield+0x98>)
   138fe:	68a2      	ldr	r2, [r4, #8]
   13900:	429a      	cmp	r2, r3
   13902:	d030      	beq.n	13966 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   13904:	f04f 0320 	mov.w	r3, #32
   13908:	f3ef 8511 	mrs	r5, BASEPRI
   1390c:	f383 8811 	msr	BASEPRI, r3
   13910:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   13914:	68a1      	ldr	r1, [r4, #8]
   13916:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1391a:	f7ff fd39 	bl	13390 <z_priq_dumb_remove>
	return list->head == list;
   1391e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   13920:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13922:	4283      	cmp	r3, r0
   13924:	bf08      	it	eq
   13926:	2300      	moveq	r3, #0
   13928:	2b00      	cmp	r3, #0
   1392a:	bf38      	it	cc
   1392c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1392e:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13930:	b32b      	cbz	r3, 1397e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   13932:	f992 700e 	ldrsb.w	r7, [r2, #14]
   13936:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1393a:	42b7      	cmp	r7, r6
   1393c:	db03      	blt.n	13946 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1393e:	428b      	cmp	r3, r1
   13940:	d01d      	beq.n	1397e <z_impl_k_yield+0x86>
   13942:	681b      	ldr	r3, [r3, #0]
   13944:	e7f4      	b.n	13930 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   13946:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   13948:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1394c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1394e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   13950:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   13952:	2001      	movs	r0, #1
   13954:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13958:	7353      	strb	r3, [r2, #13]
   1395a:	f7ff fd2f 	bl	133bc <update_cache>
	__asm__ volatile(
   1395e:	f385 8811 	msr	BASEPRI, r5
   13962:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   13966:	f04f 0320 	mov.w	r3, #32
   1396a:	f3ef 8011 	mrs	r0, BASEPRI
   1396e:	f383 8811 	msr	BASEPRI, r3
   13972:	f3bf 8f6f 	isb	sy
}
   13976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1397a:	f7fe bbab 	b.w	120d4 <arch_swap>
	node->prev = list->tail;
   1397e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   13982:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13984:	601a      	str	r2, [r3, #0]
	list->tail = node;
   13986:	6322      	str	r2, [r4, #48]	; 0x30
}
   13988:	e7e2      	b.n	13950 <z_impl_k_yield+0x58>
   1398a:	bf00      	nop
   1398c:	200007c4 	.word	0x200007c4
   13990:	20000118 	.word	0x20000118

00013994 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   13994:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13996:	3301      	adds	r3, #1
   13998:	bf08      	it	eq
   1399a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1399e:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   139a0:	d106      	bne.n	139b0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   139a2:	4b0b      	ldr	r3, [pc, #44]	; (139d0 <z_impl_k_sleep+0x3c>)
   139a4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   139a6:	f7ff fe1f 	bl	135e8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   139aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   139ae:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   139b0:	4604      	mov	r4, r0
	if (ticks == 0) {
   139b2:	b948      	cbnz	r0, 139c8 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   139b4:	f7ff ffa0 	bl	138f8 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   139b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   139bc:	fb84 3400 	smull	r3, r4, r4, r0
   139c0:	0bd8      	lsrs	r0, r3, #15
   139c2:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   139c6:	e7f2      	b.n	139ae <z_impl_k_sleep+0x1a>
   139c8:	f7ff ff18 	bl	137fc <z_tick_sleep.part.0>
   139cc:	4604      	mov	r4, r0
   139ce:	e7f3      	b.n	139b8 <z_impl_k_sleep+0x24>
   139d0:	200007c4 	.word	0x200007c4

000139d4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   139d4:	4b01      	ldr	r3, [pc, #4]	; (139dc <z_impl_k_current_get+0x8>)
   139d6:	6898      	ldr	r0, [r3, #8]
   139d8:	4770      	bx	lr
   139da:	bf00      	nop
   139dc:	200007c4 	.word	0x200007c4

000139e0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   139e0:	b538      	push	{r3, r4, r5, lr}
   139e2:	4604      	mov	r4, r0
   139e4:	f04f 0320 	mov.w	r3, #32
   139e8:	f3ef 8511 	mrs	r5, BASEPRI
   139ec:	f383 8811 	msr	BASEPRI, r3
   139f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   139f4:	f001 feb1 	bl	1575a <z_unpend_first_thread>

	if (thread != NULL) {
   139f8:	b148      	cbz	r0, 13a0e <z_impl_k_sem_give+0x2e>
   139fa:	2200      	movs	r2, #0
   139fc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   139fe:	f001 fe51 	bl	156a4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   13a02:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   13a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   13a08:	4804      	ldr	r0, [pc, #16]	; (13a1c <z_impl_k_sem_give+0x3c>)
   13a0a:	f7ff bc9b 	b.w	13344 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   13a0e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   13a12:	429a      	cmp	r2, r3
   13a14:	bf18      	it	ne
   13a16:	3301      	addne	r3, #1
   13a18:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   13a1a:	e7f2      	b.n	13a02 <z_impl_k_sem_give+0x22>
   13a1c:	20000826 	.word	0x20000826

00013a20 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   13a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13a22:	4614      	mov	r4, r2
   13a24:	461d      	mov	r5, r3
   13a26:	f04f 0320 	mov.w	r3, #32
   13a2a:	f3ef 8111 	mrs	r1, BASEPRI
   13a2e:	f383 8811 	msr	BASEPRI, r3
   13a32:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   13a36:	6883      	ldr	r3, [r0, #8]
   13a38:	b143      	cbz	r3, 13a4c <z_impl_k_sem_take+0x2c>
		sem->count--;
   13a3a:	3b01      	subs	r3, #1
   13a3c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   13a3e:	f381 8811 	msr	BASEPRI, r1
   13a42:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   13a46:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   13a48:	b003      	add	sp, #12
   13a4a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13a4c:	ea54 0305 	orrs.w	r3, r4, r5
   13a50:	d106      	bne.n	13a60 <z_impl_k_sem_take+0x40>
   13a52:	f381 8811 	msr	BASEPRI, r1
   13a56:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   13a5a:	f06f 000f 	mvn.w	r0, #15
   13a5e:	e7f3      	b.n	13a48 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   13a60:	4602      	mov	r2, r0
   13a62:	e9cd 4500 	strd	r4, r5, [sp]
   13a66:	4802      	ldr	r0, [pc, #8]	; (13a70 <z_impl_k_sem_take+0x50>)
   13a68:	f7ff feb4 	bl	137d4 <z_pend_curr>
	return ret;
   13a6c:	e7ec      	b.n	13a48 <z_impl_k_sem_take+0x28>
   13a6e:	bf00      	nop
   13a70:	20000826 	.word	0x20000826

00013a74 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   13a74:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   13a78:	f100 0530 	add.w	r5, r0, #48	; 0x30
   13a7c:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   13a7e:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   13a82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   13a84:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   13a86:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   13a88:	2504      	movs	r5, #4
   13a8a:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   13a8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   13a8e:	3207      	adds	r2, #7
	thread_base->prio = priority;
   13a90:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   13a92:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   13a94:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   13a98:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
   13a9c:	eb01 0802 	add.w	r8, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   13aa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	node->prev = NULL;
   13aa2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   13aa6:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   13aa8:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   13aaa:	9202      	str	r2, [sp, #8]
   13aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13aae:	9201      	str	r2, [sp, #4]
   13ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13ab2:	9200      	str	r2, [sp, #0]
   13ab4:	4642      	mov	r2, r8
   13ab6:	f7fe fb97 	bl	121e8 <arch_new_thread>
	if (!_current) {
   13aba:	4b05      	ldr	r3, [pc, #20]	; (13ad0 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
   13abc:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   13ac0:	689b      	ldr	r3, [r3, #8]
   13ac2:	b103      	cbz	r3, 13ac6 <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
   13ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   13ac6:	4640      	mov	r0, r8
   13ac8:	6763      	str	r3, [r4, #116]	; 0x74
   13aca:	b005      	add	sp, #20
   13acc:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
   13ad0:	200007c4 	.word	0x200007c4

00013ad4 <z_init_static_threads>:
{
   13ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   13ad8:	4e2a      	ldr	r6, [pc, #168]	; (13b84 <z_init_static_threads+0xb0>)
   13ada:	4d2b      	ldr	r5, [pc, #172]	; (13b88 <z_init_static_threads+0xb4>)
   13adc:	46b0      	mov	r8, r6
{
   13ade:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   13ae0:	42b5      	cmp	r5, r6
   13ae2:	f105 0430 	add.w	r4, r5, #48	; 0x30
   13ae6:	d310      	bcc.n	13b0a <z_init_static_threads+0x36>
	k_sched_lock();
   13ae8:	f7ff fc3e 	bl	13368 <k_sched_lock>
   13aec:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   13af0:	f240 36e7 	movw	r6, #999	; 0x3e7
   13af4:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   13af6:	4c24      	ldr	r4, [pc, #144]	; (13b88 <z_init_static_threads+0xb4>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   13af8:	f8df a090 	ldr.w	sl, [pc, #144]	; 13b8c <z_init_static_threads+0xb8>
   13afc:	4544      	cmp	r4, r8
   13afe:	d321      	bcc.n	13b44 <z_init_static_threads+0x70>
}
   13b00:	b006      	add	sp, #24
   13b02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   13b06:	f7ff bc81 	b.w	1340c <k_sched_unlock>
		z_setup_new_thread(
   13b0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13b0e:	9305      	str	r3, [sp, #20]
   13b10:	f854 3c10 	ldr.w	r3, [r4, #-16]
   13b14:	9304      	str	r3, [sp, #16]
   13b16:	f854 3c14 	ldr.w	r3, [r4, #-20]
   13b1a:	9303      	str	r3, [sp, #12]
   13b1c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   13b20:	9302      	str	r3, [sp, #8]
   13b22:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   13b26:	9301      	str	r3, [sp, #4]
   13b28:	f854 3c20 	ldr.w	r3, [r4, #-32]
   13b2c:	9300      	str	r3, [sp, #0]
   13b2e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   13b32:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   13b36:	f7ff ff9d 	bl	13a74 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   13b3a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   13b3e:	65dd      	str	r5, [r3, #92]	; 0x5c
   13b40:	4625      	mov	r5, r4
   13b42:	e7cd      	b.n	13ae0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   13b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13b46:	1c5a      	adds	r2, r3, #1
   13b48:	d00d      	beq.n	13b66 <z_init_static_threads+0x92>
   13b4a:	4630      	mov	r0, r6
   13b4c:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   13b4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13b52:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   13b56:	42b9      	cmp	r1, r7
   13b58:	bf08      	it	eq
   13b5a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   13b5c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   13b5e:	d104      	bne.n	13b6a <z_init_static_threads+0x96>
	z_sched_start(thread);
   13b60:	4628      	mov	r0, r5
   13b62:	f7ff fca7 	bl	134b4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   13b66:	3430      	adds	r4, #48	; 0x30
   13b68:	e7c8      	b.n	13afc <z_init_static_threads+0x28>
   13b6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13b6e:	2300      	movs	r3, #0
   13b70:	f7fc fc64 	bl	1043c <__aeabi_uldivmod>
   13b74:	4602      	mov	r2, r0
   13b76:	460b      	mov	r3, r1
   13b78:	f105 0018 	add.w	r0, r5, #24
   13b7c:	4651      	mov	r1, sl
   13b7e:	f000 f86b 	bl	13c58 <z_add_timeout>
   13b82:	e7f0      	b.n	13b66 <z_init_static_threads+0x92>
   13b84:	200000c4 	.word	0x200000c4
   13b88:	200000c4 	.word	0x200000c4
   13b8c:	000156c5 	.word	0x000156c5

00013b90 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   13b90:	b508      	push	{r3, lr}
	__asm__ volatile(
   13b92:	f04f 0320 	mov.w	r3, #32
   13b96:	f3ef 8411 	mrs	r4, BASEPRI
   13b9a:	f383 8811 	msr	BASEPRI, r3
   13b9e:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   13ba2:	4b04      	ldr	r3, [pc, #16]	; (13bb4 <z_self_abort+0x24>)
   13ba4:	6898      	ldr	r0, [r3, #8]
   13ba6:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   13ba8:	f7ff fd1e 	bl	135e8 <z_impl_k_thread_suspend>
   13bac:	4620      	mov	r0, r4
   13bae:	f7fe fa91 	bl	120d4 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   13bb2:	bf00      	nop
   13bb4:	200007c4 	.word	0x200007c4

00013bb8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   13bb8:	4b03      	ldr	r3, [pc, #12]	; (13bc8 <elapsed+0x10>)
   13bba:	681b      	ldr	r3, [r3, #0]
   13bbc:	b90b      	cbnz	r3, 13bc2 <elapsed+0xa>
   13bbe:	f7fd bf83 	b.w	11ac8 <z_clock_elapsed>
}
   13bc2:	2000      	movs	r0, #0
   13bc4:	4770      	bx	lr
   13bc6:	bf00      	nop
   13bc8:	20000804 	.word	0x20000804

00013bcc <remove_timeout>:
{
   13bcc:	b530      	push	{r4, r5, lr}
   13bce:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13bd0:	b168      	cbz	r0, 13bee <remove_timeout+0x22>
   13bd2:	4a0a      	ldr	r2, [pc, #40]	; (13bfc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   13bd4:	6852      	ldr	r2, [r2, #4]
   13bd6:	4290      	cmp	r0, r2
   13bd8:	d009      	beq.n	13bee <remove_timeout+0x22>
	if (next(t) != NULL) {
   13bda:	b143      	cbz	r3, 13bee <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   13bdc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   13be0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   13be4:	1912      	adds	r2, r2, r4
   13be6:	eb45 0101 	adc.w	r1, r5, r1
   13bea:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   13bee:	6842      	ldr	r2, [r0, #4]
   13bf0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   13bf2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13bf4:	2300      	movs	r3, #0
	node->prev = NULL;
   13bf6:	e9c0 3300 	strd	r3, r3, [r0]
}
   13bfa:	bd30      	pop	{r4, r5, pc}
   13bfc:	20000028 	.word	0x20000028

00013c00 <next_timeout>:
	return list->head == list;
   13c00:	4b13      	ldr	r3, [pc, #76]	; (13c50 <next_timeout+0x50>)

static int32_t next_timeout(void)
{
   13c02:	b510      	push	{r4, lr}
   13c04:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13c06:	429c      	cmp	r4, r3
   13c08:	bf08      	it	eq
   13c0a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   13c0c:	f7ff ffd4 	bl	13bb8 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   13c10:	b1cc      	cbz	r4, 13c46 <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   13c12:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13c16:	1a12      	subs	r2, r2, r0
   13c18:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   13c1c:	2a01      	cmp	r2, #1
   13c1e:	f173 0100 	sbcs.w	r1, r3, #0
   13c22:	db13      	blt.n	13c4c <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   13c24:	4610      	mov	r0, r2
   13c26:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   13c2a:	4619      	mov	r1, r3
   13c2c:	2300      	movs	r3, #0
   13c2e:	4282      	cmp	r2, r0
   13c30:	eb73 0401 	sbcs.w	r4, r3, r1
   13c34:	da00      	bge.n	13c38 <next_timeout+0x38>
   13c36:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   13c38:	4b06      	ldr	r3, [pc, #24]	; (13c54 <next_timeout+0x54>)
   13c3a:	695b      	ldr	r3, [r3, #20]
   13c3c:	b113      	cbz	r3, 13c44 <next_timeout+0x44>
   13c3e:	4298      	cmp	r0, r3
   13c40:	bfa8      	it	ge
   13c42:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   13c44:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   13c46:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   13c4a:	e7f5      	b.n	13c38 <next_timeout+0x38>
   13c4c:	2000      	movs	r0, #0
   13c4e:	e7f3      	b.n	13c38 <next_timeout+0x38>
   13c50:	20000028 	.word	0x20000028
   13c54:	200007c4 	.word	0x200007c4

00013c58 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   13c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c5c:	9101      	str	r1, [sp, #4]
   13c5e:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13c60:	1c4b      	adds	r3, r1, #1
   13c62:	bf08      	it	eq
   13c64:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   13c68:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13c6a:	d06b      	beq.n	13d44 <z_add_timeout+0xec>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   13c6c:	f06f 0301 	mvn.w	r3, #1
   13c70:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
   13c74:	1c54      	adds	r4, r2, #1
   13c76:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   13c7a:	ebb3 0804 	subs.w	r8, r3, r4
   13c7e:	eb6b 0905 	sbc.w	r9, fp, r5
   13c82:	f1b8 0f00 	cmp.w	r8, #0
   13c86:	f179 0300 	sbcs.w	r3, r9, #0
   13c8a:	db0f      	blt.n	13cac <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   13c8c:	f7ff ff94 	bl	13bb8 <elapsed>
   13c90:	f06f 0301 	mvn.w	r3, #1
   13c94:	4a32      	ldr	r2, [pc, #200]	; (13d60 <z_add_timeout+0x108>)
   13c96:	e9d2 1c00 	ldrd	r1, ip, [r2]
   13c9a:	1a5b      	subs	r3, r3, r1
   13c9c:	eb6b 020c 	sbc.w	r2, fp, ip
   13ca0:	1b1e      	subs	r6, r3, r4
   13ca2:	eb62 0705 	sbc.w	r7, r2, r5
   13ca6:	1a34      	subs	r4, r6, r0
   13ca8:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   13cac:	9b01      	ldr	r3, [sp, #4]
   13cae:	f8ca 3008 	str.w	r3, [sl, #8]
   13cb2:	f04f 0320 	mov.w	r3, #32
   13cb6:	f3ef 8611 	mrs	r6, BASEPRI
   13cba:	f383 8811 	msr	BASEPRI, r3
   13cbe:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   13cc2:	f7ff ff79 	bl	13bb8 <elapsed>
	ticks = MAX(1, ticks);
   13cc6:	2c01      	cmp	r4, #1
   13cc8:	f175 0300 	sbcs.w	r3, r5, #0
   13ccc:	bfbc      	itt	lt
   13cce:	2401      	movlt	r4, #1
   13cd0:	2500      	movlt	r5, #0
	return list->head == list;
   13cd2:	4b24      	ldr	r3, [pc, #144]	; (13d64 <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
   13cd4:	1824      	adds	r4, r4, r0
   13cd6:	681a      	ldr	r2, [r3, #0]
   13cd8:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13cdc:	429a      	cmp	r2, r3
   13cde:	e9ca 4504 	strd	r4, r5, [sl, #16]
   13ce2:	d001      	beq.n	13ce8 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13ce4:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   13ce6:	b952      	cbnz	r2, 13cfe <z_add_timeout+0xa6>
	node->prev = list->tail;
   13ce8:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   13cea:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   13cee:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   13cf2:	685a      	ldr	r2, [r3, #4]
   13cf4:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   13cf8:	f8c3 a004 	str.w	sl, [r3, #4]
}
   13cfc:	e014      	b.n	13d28 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   13cfe:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   13d02:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   13d06:	4544      	cmp	r4, r8
   13d08:	eb75 0109 	sbcs.w	r1, r5, r9
   13d0c:	da1d      	bge.n	13d4a <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
   13d0e:	ebb8 0004 	subs.w	r0, r8, r4
   13d12:	eb69 0105 	sbc.w	r1, r9, r5
   13d16:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   13d1a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   13d1c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   13d20:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   13d24:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   13d28:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13d2a:	429a      	cmp	r2, r3
   13d2c:	d006      	beq.n	13d3c <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   13d2e:	4592      	cmp	sl, r2
   13d30:	d104      	bne.n	13d3c <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
   13d32:	f7ff ff65 	bl	13c00 <next_timeout>
   13d36:	2100      	movs	r1, #0
   13d38:	f7fd fe5e 	bl	119f8 <z_clock_set_timeout>
	__asm__ volatile(
   13d3c:	f386 8811 	msr	BASEPRI, r6
   13d40:	f3bf 8f6f 	isb	sy
		}
	}
}
   13d44:	b003      	add	sp, #12
   13d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   13d4a:	ebb4 0008 	subs.w	r0, r4, r8
   13d4e:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   13d52:	42ba      	cmp	r2, r7
   13d54:	e9ca 0104 	strd	r0, r1, [sl, #16]
   13d58:	d0c6      	beq.n	13ce8 <z_add_timeout+0x90>
   13d5a:	6812      	ldr	r2, [r2, #0]
   13d5c:	e7c3      	b.n	13ce6 <z_add_timeout+0x8e>
   13d5e:	bf00      	nop
   13d60:	20000218 	.word	0x20000218
   13d64:	20000028 	.word	0x20000028

00013d68 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   13d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d6c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   13d6e:	f7ff fbf9 	bl	13564 <z_time_slice>
	__asm__ volatile(
   13d72:	f04f 0320 	mov.w	r3, #32
   13d76:	f3ef 8411 	mrs	r4, BASEPRI
   13d7a:	f383 8811 	msr	BASEPRI, r3
   13d7e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   13d82:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 13e34 <z_clock_announce+0xcc>
   13d86:	4d2a      	ldr	r5, [pc, #168]	; (13e30 <z_clock_announce+0xc8>)
   13d88:	4651      	mov	r1, sl
	return list->head == list;
   13d8a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 13e38 <z_clock_announce+0xd0>
   13d8e:	602e      	str	r6, [r5, #0]
   13d90:	f8d5 c000 	ldr.w	ip, [r5]
   13d94:	f8db 0000 	ldr.w	r0, [fp]
   13d98:	4662      	mov	r2, ip
   13d9a:	e9da 8900 	ldrd	r8, r9, [sl]
   13d9e:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13da0:	4558      	cmp	r0, fp
   13da2:	e9cd 2300 	strd	r2, r3, [sp]
   13da6:	d00d      	beq.n	13dc4 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   13da8:	b160      	cbz	r0, 13dc4 <z_clock_announce+0x5c>
   13daa:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   13dae:	45b4      	cmp	ip, r6
   13db0:	41bb      	sbcs	r3, r7
   13db2:	da1d      	bge.n	13df0 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   13db4:	9b00      	ldr	r3, [sp, #0]
   13db6:	ebb6 0c03 	subs.w	ip, r6, r3
   13dba:	9b01      	ldr	r3, [sp, #4]
   13dbc:	eb67 0603 	sbc.w	r6, r7, r3
   13dc0:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   13dc4:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   13dc6:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   13dc8:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   13dca:	eb13 0208 	adds.w	r2, r3, r8
   13dce:	9b01      	ldr	r3, [sp, #4]
   13dd0:	eb43 0309 	adc.w	r3, r3, r9
   13dd4:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   13dd8:	f7ff ff12 	bl	13c00 <next_timeout>
   13ddc:	4631      	mov	r1, r6
   13dde:	f7fd fe0b 	bl	119f8 <z_clock_set_timeout>
	__asm__ volatile(
   13de2:	f384 8811 	msr	BASEPRI, r4
   13de6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   13dea:	b003      	add	sp, #12
   13dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   13df0:	2200      	movs	r2, #0
   13df2:	2300      	movs	r3, #0
		curr_tick += dt;
   13df4:	eb18 0806 	adds.w	r8, r8, r6
   13df8:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   13dfc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   13e00:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   13e04:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   13e08:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   13e0a:	f7ff fedf 	bl	13bcc <remove_timeout>
   13e0e:	f384 8811 	msr	BASEPRI, r4
   13e12:	f3bf 8f6f 	isb	sy
		t->fn(t);
   13e16:	6883      	ldr	r3, [r0, #8]
   13e18:	4798      	blx	r3
	__asm__ volatile(
   13e1a:	f04f 0320 	mov.w	r3, #32
   13e1e:	f3ef 8411 	mrs	r4, BASEPRI
   13e22:	f383 8811 	msr	BASEPRI, r3
   13e26:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   13e2a:	4902      	ldr	r1, [pc, #8]	; (13e34 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   13e2c:	e7b0      	b.n	13d90 <z_clock_announce+0x28>
   13e2e:	bf00      	nop
   13e30:	20000804 	.word	0x20000804
   13e34:	20000218 	.word	0x20000218
   13e38:	20000028 	.word	0x20000028

00013e3c <z_tick_get>:

int64_t z_tick_get(void)
{
   13e3c:	b510      	push	{r4, lr}
   13e3e:	f04f 0320 	mov.w	r3, #32
   13e42:	f3ef 8411 	mrs	r4, BASEPRI
   13e46:	f383 8811 	msr	BASEPRI, r3
   13e4a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   13e4e:	f7fd fe3b 	bl	11ac8 <z_clock_elapsed>
   13e52:	4b06      	ldr	r3, [pc, #24]	; (13e6c <z_tick_get+0x30>)
   13e54:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e58:	1812      	adds	r2, r2, r0
   13e5a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   13e5e:	f384 8811 	msr	BASEPRI, r4
   13e62:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   13e66:	4610      	mov	r0, r2
   13e68:	4619      	mov	r1, r3
   13e6a:	bd10      	pop	{r4, pc}
   13e6c:	20000218 	.word	0x20000218

00013e70 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   13e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13e72:	4b10      	ldr	r3, [pc, #64]	; (13eb4 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   13e74:	4f10      	ldr	r7, [pc, #64]	; (13eb8 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13e76:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   13e7a:	3001      	adds	r0, #1
   13e7c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   13e80:	42ae      	cmp	r6, r5
   13e82:	d800      	bhi.n	13e86 <z_sys_init_run_level+0x16>
		}
	}
}
   13e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   13e86:	e9d5 3400 	ldrd	r3, r4, [r5]
   13e8a:	4620      	mov	r0, r4
   13e8c:	4798      	blx	r3
   13e8e:	b170      	cbz	r0, 13eae <z_sys_init_run_level+0x3e>
   13e90:	b16c      	cbz	r4, 13eae <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   13e92:	2301      	movs	r3, #1
				(dev - __device_start));
   13e94:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   13e96:	4a09      	ldr	r2, [pc, #36]	; (13ebc <z_sys_init_run_level+0x4c>)
   13e98:	1124      	asrs	r4, r4, #4
   13e9a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   13e9c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   13ea0:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   13ea4:	fa03 f404 	lsl.w	r4, r3, r4
   13ea8:	4304      	orrs	r4, r0
   13eaa:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13eae:	3508      	adds	r5, #8
   13eb0:	e7e6      	b.n	13e80 <z_sys_init_run_level+0x10>
   13eb2:	bf00      	nop
   13eb4:	00015c54 	.word	0x00015c54
   13eb8:	20000090 	.word	0x20000090
   13ebc:	200000c0 	.word	0x200000c0

00013ec0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   13ec0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   13ec2:	4c06      	ldr	r4, [pc, #24]	; (13edc <statics_init+0x1c>)
   13ec4:	4d06      	ldr	r5, [pc, #24]	; (13ee0 <statics_init+0x20>)
   13ec6:	42ac      	cmp	r4, r5
   13ec8:	d301      	bcc.n	13ece <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   13eca:	2000      	movs	r0, #0
   13ecc:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   13ece:	4620      	mov	r0, r4
   13ed0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   13ed4:	f001 fcb5 	bl	15842 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   13ed8:	3414      	adds	r4, #20
   13eda:	e7f4      	b.n	13ec6 <statics_init+0x6>
   13edc:	200000c4 	.word	0x200000c4
   13ee0:	200000c4 	.word	0x200000c4

00013ee4 <CC_PalMemCopyPlat>:
   13ee4:	f001 baf2 	b.w	154cc <memmove>

00013ee8 <CC_PalMemSetZeroPlat>:
   13ee8:	460a      	mov	r2, r1
   13eea:	2100      	movs	r1, #0
   13eec:	f001 bb30 	b.w	15550 <memset>

00013ef0 <CC_PalInit>:
   13ef0:	b510      	push	{r4, lr}
   13ef2:	4811      	ldr	r0, [pc, #68]	; (13f38 <CC_PalInit+0x48>)
   13ef4:	f000 f848 	bl	13f88 <CC_PalMutexCreate>
   13ef8:	b100      	cbz	r0, 13efc <CC_PalInit+0xc>
   13efa:	bd10      	pop	{r4, pc}
   13efc:	480f      	ldr	r0, [pc, #60]	; (13f3c <CC_PalInit+0x4c>)
   13efe:	f000 f843 	bl	13f88 <CC_PalMutexCreate>
   13f02:	2800      	cmp	r0, #0
   13f04:	d1f9      	bne.n	13efa <CC_PalInit+0xa>
   13f06:	4c0e      	ldr	r4, [pc, #56]	; (13f40 <CC_PalInit+0x50>)
   13f08:	4620      	mov	r0, r4
   13f0a:	f000 f83d 	bl	13f88 <CC_PalMutexCreate>
   13f0e:	2800      	cmp	r0, #0
   13f10:	d1f3      	bne.n	13efa <CC_PalInit+0xa>
   13f12:	4b0c      	ldr	r3, [pc, #48]	; (13f44 <CC_PalInit+0x54>)
   13f14:	480c      	ldr	r0, [pc, #48]	; (13f48 <CC_PalInit+0x58>)
   13f16:	601c      	str	r4, [r3, #0]
   13f18:	f000 f836 	bl	13f88 <CC_PalMutexCreate>
   13f1c:	4601      	mov	r1, r0
   13f1e:	2800      	cmp	r0, #0
   13f20:	d1eb      	bne.n	13efa <CC_PalInit+0xa>
   13f22:	f000 f82d 	bl	13f80 <CC_PalDmaInit>
   13f26:	4604      	mov	r4, r0
   13f28:	b108      	cbz	r0, 13f2e <CC_PalInit+0x3e>
   13f2a:	4620      	mov	r0, r4
   13f2c:	bd10      	pop	{r4, pc}
   13f2e:	f000 f851 	bl	13fd4 <CC_PalPowerSaveModeInit>
   13f32:	4620      	mov	r0, r4
   13f34:	e7fa      	b.n	13f2c <CC_PalInit+0x3c>
   13f36:	bf00      	nop
   13f38:	2000003c 	.word	0x2000003c
   13f3c:	20000030 	.word	0x20000030
   13f40:	20000038 	.word	0x20000038
   13f44:	20000040 	.word	0x20000040
   13f48:	20000034 	.word	0x20000034

00013f4c <CC_PalTerminate>:
   13f4c:	b508      	push	{r3, lr}
   13f4e:	4808      	ldr	r0, [pc, #32]	; (13f70 <CC_PalTerminate+0x24>)
   13f50:	f000 f824 	bl	13f9c <CC_PalMutexDestroy>
   13f54:	4807      	ldr	r0, [pc, #28]	; (13f74 <CC_PalTerminate+0x28>)
   13f56:	f000 f821 	bl	13f9c <CC_PalMutexDestroy>
   13f5a:	4807      	ldr	r0, [pc, #28]	; (13f78 <CC_PalTerminate+0x2c>)
   13f5c:	f000 f81e 	bl	13f9c <CC_PalMutexDestroy>
   13f60:	4806      	ldr	r0, [pc, #24]	; (13f7c <CC_PalTerminate+0x30>)
   13f62:	f000 f81b 	bl	13f9c <CC_PalMutexDestroy>
   13f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13f6a:	f000 b80b 	b.w	13f84 <CC_PalDmaTerminate>
   13f6e:	bf00      	nop
   13f70:	2000003c 	.word	0x2000003c
   13f74:	20000030 	.word	0x20000030
   13f78:	20000038 	.word	0x20000038
   13f7c:	20000034 	.word	0x20000034

00013f80 <CC_PalDmaInit>:
   13f80:	2000      	movs	r0, #0
   13f82:	4770      	bx	lr

00013f84 <CC_PalDmaTerminate>:
   13f84:	4770      	bx	lr
   13f86:	bf00      	nop

00013f88 <CC_PalMutexCreate>:
   13f88:	b508      	push	{r3, lr}
   13f8a:	4b03      	ldr	r3, [pc, #12]	; (13f98 <CC_PalMutexCreate+0x10>)
   13f8c:	6802      	ldr	r2, [r0, #0]
   13f8e:	681b      	ldr	r3, [r3, #0]
   13f90:	6810      	ldr	r0, [r2, #0]
   13f92:	4798      	blx	r3
   13f94:	2000      	movs	r0, #0
   13f96:	bd08      	pop	{r3, pc}
   13f98:	20000054 	.word	0x20000054

00013f9c <CC_PalMutexDestroy>:
   13f9c:	b508      	push	{r3, lr}
   13f9e:	4b03      	ldr	r3, [pc, #12]	; (13fac <CC_PalMutexDestroy+0x10>)
   13fa0:	6802      	ldr	r2, [r0, #0]
   13fa2:	685b      	ldr	r3, [r3, #4]
   13fa4:	6810      	ldr	r0, [r2, #0]
   13fa6:	4798      	blx	r3
   13fa8:	2000      	movs	r0, #0
   13faa:	bd08      	pop	{r3, pc}
   13fac:	20000054 	.word	0x20000054

00013fb0 <CC_PalMutexLock>:
   13fb0:	4b02      	ldr	r3, [pc, #8]	; (13fbc <CC_PalMutexLock+0xc>)
   13fb2:	6802      	ldr	r2, [r0, #0]
   13fb4:	689b      	ldr	r3, [r3, #8]
   13fb6:	6810      	ldr	r0, [r2, #0]
   13fb8:	4718      	bx	r3
   13fba:	bf00      	nop
   13fbc:	20000054 	.word	0x20000054

00013fc0 <CC_PalMutexUnlock>:
   13fc0:	b508      	push	{r3, lr}
   13fc2:	4b03      	ldr	r3, [pc, #12]	; (13fd0 <CC_PalMutexUnlock+0x10>)
   13fc4:	6802      	ldr	r2, [r0, #0]
   13fc6:	68db      	ldr	r3, [r3, #12]
   13fc8:	6810      	ldr	r0, [r2, #0]
   13fca:	4798      	blx	r3
   13fcc:	2000      	movs	r0, #0
   13fce:	bd08      	pop	{r3, pc}
   13fd0:	20000054 	.word	0x20000054

00013fd4 <CC_PalPowerSaveModeInit>:
   13fd4:	b570      	push	{r4, r5, r6, lr}
   13fd6:	4c09      	ldr	r4, [pc, #36]	; (13ffc <CC_PalPowerSaveModeInit+0x28>)
   13fd8:	4d09      	ldr	r5, [pc, #36]	; (14000 <CC_PalPowerSaveModeInit+0x2c>)
   13fda:	6920      	ldr	r0, [r4, #16]
   13fdc:	68ab      	ldr	r3, [r5, #8]
   13fde:	4798      	blx	r3
   13fe0:	b118      	cbz	r0, 13fea <CC_PalPowerSaveModeInit+0x16>
   13fe2:	4b08      	ldr	r3, [pc, #32]	; (14004 <CC_PalPowerSaveModeInit+0x30>)
   13fe4:	4808      	ldr	r0, [pc, #32]	; (14008 <CC_PalPowerSaveModeInit+0x34>)
   13fe6:	685b      	ldr	r3, [r3, #4]
   13fe8:	4798      	blx	r3
   13fea:	2100      	movs	r1, #0
   13fec:	4a07      	ldr	r2, [pc, #28]	; (1400c <CC_PalPowerSaveModeInit+0x38>)
   13fee:	68eb      	ldr	r3, [r5, #12]
   13ff0:	6011      	str	r1, [r2, #0]
   13ff2:	6920      	ldr	r0, [r4, #16]
   13ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13ff8:	4718      	bx	r3
   13ffa:	bf00      	nop
   13ffc:	20000064 	.word	0x20000064
   14000:	20000054 	.word	0x20000054
   14004:	20000044 	.word	0x20000044
   14008:	00015c68 	.word	0x00015c68
   1400c:	20000808 	.word	0x20000808

00014010 <CC_PalPowerSaveModeSelect>:
   14010:	b570      	push	{r4, r5, r6, lr}
   14012:	4d1a      	ldr	r5, [pc, #104]	; (1407c <CC_PalPowerSaveModeSelect+0x6c>)
   14014:	4e1a      	ldr	r6, [pc, #104]	; (14080 <CC_PalPowerSaveModeSelect+0x70>)
   14016:	4604      	mov	r4, r0
   14018:	68b2      	ldr	r2, [r6, #8]
   1401a:	6928      	ldr	r0, [r5, #16]
   1401c:	4790      	blx	r2
   1401e:	b9f0      	cbnz	r0, 1405e <CC_PalPowerSaveModeSelect+0x4e>
   14020:	b15c      	cbz	r4, 1403a <CC_PalPowerSaveModeSelect+0x2a>
   14022:	4c18      	ldr	r4, [pc, #96]	; (14084 <CC_PalPowerSaveModeSelect+0x74>)
   14024:	6823      	ldr	r3, [r4, #0]
   14026:	b1ab      	cbz	r3, 14054 <CC_PalPowerSaveModeSelect+0x44>
   14028:	2b01      	cmp	r3, #1
   1402a:	d01a      	beq.n	14062 <CC_PalPowerSaveModeSelect+0x52>
   1402c:	3b01      	subs	r3, #1
   1402e:	6023      	str	r3, [r4, #0]
   14030:	6928      	ldr	r0, [r5, #16]
   14032:	68f3      	ldr	r3, [r6, #12]
   14034:	4798      	blx	r3
   14036:	2000      	movs	r0, #0
   14038:	bd70      	pop	{r4, r5, r6, pc}
   1403a:	4c12      	ldr	r4, [pc, #72]	; (14084 <CC_PalPowerSaveModeSelect+0x74>)
   1403c:	6821      	ldr	r1, [r4, #0]
   1403e:	b939      	cbnz	r1, 14050 <CC_PalPowerSaveModeSelect+0x40>
   14040:	2001      	movs	r0, #1
   14042:	4b11      	ldr	r3, [pc, #68]	; (14088 <CC_PalPowerSaveModeSelect+0x78>)
   14044:	4a11      	ldr	r2, [pc, #68]	; (1408c <CC_PalPowerSaveModeSelect+0x7c>)
   14046:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1404a:	6813      	ldr	r3, [r2, #0]
   1404c:	2b00      	cmp	r3, #0
   1404e:	d1fc      	bne.n	1404a <CC_PalPowerSaveModeSelect+0x3a>
   14050:	3101      	adds	r1, #1
   14052:	6021      	str	r1, [r4, #0]
   14054:	68f3      	ldr	r3, [r6, #12]
   14056:	6928      	ldr	r0, [r5, #16]
   14058:	4798      	blx	r3
   1405a:	2000      	movs	r0, #0
   1405c:	bd70      	pop	{r4, r5, r6, pc}
   1405e:	480c      	ldr	r0, [pc, #48]	; (14090 <CC_PalPowerSaveModeSelect+0x80>)
   14060:	bd70      	pop	{r4, r5, r6, pc}
   14062:	4a0a      	ldr	r2, [pc, #40]	; (1408c <CC_PalPowerSaveModeSelect+0x7c>)
   14064:	6813      	ldr	r3, [r2, #0]
   14066:	2b00      	cmp	r3, #0
   14068:	d1fc      	bne.n	14064 <CC_PalPowerSaveModeSelect+0x54>
   1406a:	4a07      	ldr	r2, [pc, #28]	; (14088 <CC_PalPowerSaveModeSelect+0x78>)
   1406c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   14070:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   14074:	f000 f820 	bl	140b8 <CC_HalMaskInterrupt>
   14078:	6823      	ldr	r3, [r4, #0]
   1407a:	e7d7      	b.n	1402c <CC_PalPowerSaveModeSelect+0x1c>
   1407c:	20000064 	.word	0x20000064
   14080:	20000054 	.word	0x20000054
   14084:	20000808 	.word	0x20000808
   14088:	50840000 	.word	0x50840000
   1408c:	50841910 	.word	0x50841910
   14090:	ffff8fe9 	.word	0xffff8fe9

00014094 <CC_HalInit>:
   14094:	2000      	movs	r0, #0
   14096:	4770      	bx	lr

00014098 <CC_HalTerminate>:
   14098:	2000      	movs	r0, #0
   1409a:	4770      	bx	lr

0001409c <CC_HalClearInterruptBit>:
   1409c:	0543      	lsls	r3, r0, #21
   1409e:	d503      	bpl.n	140a8 <CC_HalClearInterruptBit+0xc>
   140a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   140a4:	4b02      	ldr	r3, [pc, #8]	; (140b0 <CC_HalClearInterruptBit+0x14>)
   140a6:	601a      	str	r2, [r3, #0]
   140a8:	4b02      	ldr	r3, [pc, #8]	; (140b4 <CC_HalClearInterruptBit+0x18>)
   140aa:	6018      	str	r0, [r3, #0]
   140ac:	4770      	bx	lr
   140ae:	bf00      	nop
   140b0:	50841108 	.word	0x50841108
   140b4:	50841a08 	.word	0x50841a08

000140b8 <CC_HalMaskInterrupt>:
   140b8:	4b01      	ldr	r3, [pc, #4]	; (140c0 <CC_HalMaskInterrupt+0x8>)
   140ba:	6018      	str	r0, [r3, #0]
   140bc:	4770      	bx	lr
   140be:	bf00      	nop
   140c0:	50841a04 	.word	0x50841a04

000140c4 <CC_HalWaitInterruptRND>:
   140c4:	b108      	cbz	r0, 140ca <CC_HalWaitInterruptRND+0x6>
   140c6:	f000 b803 	b.w	140d0 <CC_PalWaitInterruptRND>
   140ca:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   140ce:	4770      	bx	lr

000140d0 <CC_PalWaitInterruptRND>:
   140d0:	4602      	mov	r2, r0
   140d2:	4807      	ldr	r0, [pc, #28]	; (140f0 <CC_PalWaitInterruptRND+0x20>)
   140d4:	6803      	ldr	r3, [r0, #0]
   140d6:	4213      	tst	r3, r2
   140d8:	d0fc      	beq.n	140d4 <CC_PalWaitInterruptRND+0x4>
   140da:	b121      	cbz	r1, 140e6 <CC_PalWaitInterruptRND+0x16>
   140dc:	4b05      	ldr	r3, [pc, #20]	; (140f4 <CC_PalWaitInterruptRND+0x24>)
   140de:	4806      	ldr	r0, [pc, #24]	; (140f8 <CC_PalWaitInterruptRND+0x28>)
   140e0:	681b      	ldr	r3, [r3, #0]
   140e2:	600b      	str	r3, [r1, #0]
   140e4:	6003      	str	r3, [r0, #0]
   140e6:	4b05      	ldr	r3, [pc, #20]	; (140fc <CC_PalWaitInterruptRND+0x2c>)
   140e8:	2000      	movs	r0, #0
   140ea:	601a      	str	r2, [r3, #0]
   140ec:	4770      	bx	lr
   140ee:	bf00      	nop
   140f0:	50841a00 	.word	0x50841a00
   140f4:	50841104 	.word	0x50841104
   140f8:	50841108 	.word	0x50841108
   140fc:	50841a08 	.word	0x50841a08

00014100 <mbedtls_platform_setup>:
   14100:	f000 b89e 	b.w	14240 <nrf_cc3xx_platform_init>

00014104 <mbedtls_platform_zeroize>:
   14104:	b138      	cbz	r0, 14116 <mbedtls_platform_zeroize+0x12>
   14106:	b131      	cbz	r1, 14116 <mbedtls_platform_zeroize+0x12>
   14108:	2200      	movs	r2, #0
   1410a:	4401      	add	r1, r0
   1410c:	4603      	mov	r3, r0
   1410e:	3001      	adds	r0, #1
   14110:	4281      	cmp	r1, r0
   14112:	701a      	strb	r2, [r3, #0]
   14114:	d1fa      	bne.n	1410c <mbedtls_platform_zeroize+0x8>
   14116:	4770      	bx	lr

00014118 <mbedtls_hardware_poll>:
   14118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1411c:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
   14120:	460e      	mov	r6, r1
   14122:	9205      	str	r2, [sp, #20]
   14124:	2100      	movs	r1, #0
   14126:	4614      	mov	r4, r2
   14128:	a812      	add	r0, sp, #72	; 0x48
   1412a:	f44f 7208 	mov.w	r2, #544	; 0x220
   1412e:	461d      	mov	r5, r3
   14130:	f001 fa0e 	bl	15550 <memset>
   14134:	2100      	movs	r1, #0
   14136:	2228      	movs	r2, #40	; 0x28
   14138:	a808      	add	r0, sp, #32
   1413a:	9106      	str	r1, [sp, #24]
   1413c:	f001 fa08 	bl	15550 <memset>
   14140:	2e00      	cmp	r6, #0
   14142:	d03c      	beq.n	141be <mbedtls_hardware_poll+0xa6>
   14144:	2d00      	cmp	r5, #0
   14146:	d03a      	beq.n	141be <mbedtls_hardware_poll+0xa6>
   14148:	2c00      	cmp	r4, #0
   1414a:	d038      	beq.n	141be <mbedtls_hardware_poll+0xa6>
   1414c:	2104      	movs	r1, #4
   1414e:	a806      	add	r0, sp, #24
   14150:	f7ff feca 	bl	13ee8 <CC_PalMemSetZeroPlat>
   14154:	a808      	add	r0, sp, #32
   14156:	2128      	movs	r1, #40	; 0x28
   14158:	f7ff fec6 	bl	13ee8 <CC_PalMemSetZeroPlat>
   1415c:	a808      	add	r0, sp, #32
   1415e:	f000 f831 	bl	141c4 <RNG_PLAT_SetUserRngParameters>
   14162:	b178      	cbz	r0, 14184 <mbedtls_hardware_poll+0x6c>
   14164:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   14168:	f44f 7108 	mov.w	r1, #544	; 0x220
   1416c:	a812      	add	r0, sp, #72	; 0x48
   1416e:	f7ff ffc9 	bl	14104 <mbedtls_platform_zeroize>
   14172:	2104      	movs	r1, #4
   14174:	a806      	add	r0, sp, #24
   14176:	f7ff ffc5 	bl	14104 <mbedtls_platform_zeroize>
   1417a:	4638      	mov	r0, r7
   1417c:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   14180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14184:	ab12      	add	r3, sp, #72	; 0x48
   14186:	f10d 081c 	add.w	r8, sp, #28
   1418a:	4602      	mov	r2, r0
   1418c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   14190:	9003      	str	r0, [sp, #12]
   14192:	ab05      	add	r3, sp, #20
   14194:	a908      	add	r1, sp, #32
   14196:	f8cd 8000 	str.w	r8, [sp]
   1419a:	a806      	add	r0, sp, #24
   1419c:	f000 fd14 	bl	14bc8 <LLF_RND_GetTrngSource>
   141a0:	2800      	cmp	r0, #0
   141a2:	d1df      	bne.n	14164 <mbedtls_hardware_poll+0x4c>
   141a4:	682b      	ldr	r3, [r5, #0]
   141a6:	42a3      	cmp	r3, r4
   141a8:	d3dc      	bcc.n	14164 <mbedtls_hardware_poll+0x4c>
   141aa:	f8d8 1000 	ldr.w	r1, [r8]
   141ae:	4607      	mov	r7, r0
   141b0:	4622      	mov	r2, r4
   141b2:	4630      	mov	r0, r6
   141b4:	3108      	adds	r1, #8
   141b6:	f7ff fe95 	bl	13ee4 <CC_PalMemCopyPlat>
   141ba:	602c      	str	r4, [r5, #0]
   141bc:	e7d4      	b.n	14168 <mbedtls_hardware_poll+0x50>
   141be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   141c2:	e7da      	b.n	1417a <mbedtls_hardware_poll+0x62>

000141c4 <RNG_PLAT_SetUserRngParameters>:
   141c4:	231c      	movs	r3, #28
   141c6:	b530      	push	{r4, r5, lr}
   141c8:	b083      	sub	sp, #12
   141ca:	a901      	add	r1, sp, #4
   141cc:	4604      	mov	r4, r0
   141ce:	9301      	str	r3, [sp, #4]
   141d0:	f000 f9ce 	bl	14570 <CC_PalTrngParamGet>
   141d4:	4605      	mov	r5, r0
   141d6:	b938      	cbnz	r0, 141e8 <RNG_PLAT_SetUserRngParameters+0x24>
   141d8:	9b01      	ldr	r3, [sp, #4]
   141da:	2b1c      	cmp	r3, #28
   141dc:	d007      	beq.n	141ee <RNG_PLAT_SetUserRngParameters+0x2a>
   141de:	4d16      	ldr	r5, [pc, #88]	; (14238 <RNG_PLAT_SetUserRngParameters+0x74>)
   141e0:	4620      	mov	r0, r4
   141e2:	211c      	movs	r1, #28
   141e4:	f7ff fe80 	bl	13ee8 <CC_PalMemSetZeroPlat>
   141e8:	4628      	mov	r0, r5
   141ea:	b003      	add	sp, #12
   141ec:	bd30      	pop	{r4, r5, pc}
   141ee:	2101      	movs	r1, #1
   141f0:	e9d4 3200 	ldrd	r3, r2, [r4]
   141f4:	3b00      	subs	r3, #0
   141f6:	bf18      	it	ne
   141f8:	2301      	movne	r3, #1
   141fa:	61e1      	str	r1, [r4, #28]
   141fc:	b10a      	cbz	r2, 14202 <RNG_PLAT_SetUserRngParameters+0x3e>
   141fe:	f043 0302 	orr.w	r3, r3, #2
   14202:	68a2      	ldr	r2, [r4, #8]
   14204:	b932      	cbnz	r2, 14214 <RNG_PLAT_SetUserRngParameters+0x50>
   14206:	68e2      	ldr	r2, [r4, #12]
   14208:	b942      	cbnz	r2, 1421c <RNG_PLAT_SetUserRngParameters+0x58>
   1420a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1420e:	b98b      	cbnz	r3, 14234 <RNG_PLAT_SetUserRngParameters+0x70>
   14210:	4d0a      	ldr	r5, [pc, #40]	; (1423c <RNG_PLAT_SetUserRngParameters+0x78>)
   14212:	e7e5      	b.n	141e0 <RNG_PLAT_SetUserRngParameters+0x1c>
   14214:	68e2      	ldr	r2, [r4, #12]
   14216:	f043 0304 	orr.w	r3, r3, #4
   1421a:	b13a      	cbz	r2, 1422c <RNG_PLAT_SetUserRngParameters+0x68>
   1421c:	2200      	movs	r2, #0
   1421e:	4628      	mov	r0, r5
   14220:	f043 0308 	orr.w	r3, r3, #8
   14224:	e9c4 3208 	strd	r3, r2, [r4, #32]
   14228:	b003      	add	sp, #12
   1422a:	bd30      	pop	{r4, r5, pc}
   1422c:	4615      	mov	r5, r2
   1422e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   14232:	e7d9      	b.n	141e8 <RNG_PLAT_SetUserRngParameters+0x24>
   14234:	4615      	mov	r5, r2
   14236:	e7d7      	b.n	141e8 <RNG_PLAT_SetUserRngParameters+0x24>
   14238:	00f00c37 	.word	0x00f00c37
   1423c:	00f00c0e 	.word	0x00f00c0e

00014240 <nrf_cc3xx_platform_init>:
   14240:	b510      	push	{r4, lr}
   14242:	4c0c      	ldr	r4, [pc, #48]	; (14274 <nrf_cc3xx_platform_init+0x34>)
   14244:	6823      	ldr	r3, [r4, #0]
   14246:	b113      	cbz	r3, 1424e <nrf_cc3xx_platform_init+0xe>
   14248:	4b0b      	ldr	r3, [pc, #44]	; (14278 <nrf_cc3xx_platform_init+0x38>)
   1424a:	681b      	ldr	r3, [r3, #0]
   1424c:	b92b      	cbnz	r3, 1425a <nrf_cc3xx_platform_init+0x1a>
   1424e:	f000 f94f 	bl	144f0 <CC_LibInit>
   14252:	b930      	cbnz	r0, 14262 <nrf_cc3xx_platform_init+0x22>
   14254:	2201      	movs	r2, #1
   14256:	4b08      	ldr	r3, [pc, #32]	; (14278 <nrf_cc3xx_platform_init+0x38>)
   14258:	601a      	str	r2, [r3, #0]
   1425a:	2301      	movs	r3, #1
   1425c:	2000      	movs	r0, #0
   1425e:	6023      	str	r3, [r4, #0]
   14260:	bd10      	pop	{r4, pc}
   14262:	3801      	subs	r0, #1
   14264:	2806      	cmp	r0, #6
   14266:	d901      	bls.n	1426c <nrf_cc3xx_platform_init+0x2c>
   14268:	4804      	ldr	r0, [pc, #16]	; (1427c <nrf_cc3xx_platform_init+0x3c>)
   1426a:	bd10      	pop	{r4, pc}
   1426c:	4b04      	ldr	r3, [pc, #16]	; (14280 <nrf_cc3xx_platform_init+0x40>)
   1426e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   14272:	bd10      	pop	{r4, pc}
   14274:	2000080c 	.word	0x2000080c
   14278:	20000810 	.word	0x20000810
   1427c:	ffff8ffe 	.word	0xffff8ffe
   14280:	00015c88 	.word	0x00015c88

00014284 <nrf_cc3xx_platform_init_no_rng>:
   14284:	b510      	push	{r4, lr}
   14286:	4c0a      	ldr	r4, [pc, #40]	; (142b0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   14288:	6823      	ldr	r3, [r4, #0]
   1428a:	b11b      	cbz	r3, 14294 <nrf_cc3xx_platform_init_no_rng+0x10>
   1428c:	2301      	movs	r3, #1
   1428e:	2000      	movs	r0, #0
   14290:	6023      	str	r3, [r4, #0]
   14292:	bd10      	pop	{r4, pc}
   14294:	f000 f898 	bl	143c8 <CC_LibInitNoRng>
   14298:	2800      	cmp	r0, #0
   1429a:	d0f7      	beq.n	1428c <nrf_cc3xx_platform_init_no_rng+0x8>
   1429c:	3801      	subs	r0, #1
   1429e:	2806      	cmp	r0, #6
   142a0:	d803      	bhi.n	142aa <nrf_cc3xx_platform_init_no_rng+0x26>
   142a2:	4b04      	ldr	r3, [pc, #16]	; (142b4 <nrf_cc3xx_platform_init_no_rng+0x30>)
   142a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   142a8:	bd10      	pop	{r4, pc}
   142aa:	4803      	ldr	r0, [pc, #12]	; (142b8 <nrf_cc3xx_platform_init_no_rng+0x34>)
   142ac:	bd10      	pop	{r4, pc}
   142ae:	bf00      	nop
   142b0:	2000080c 	.word	0x2000080c
   142b4:	00015c88 	.word	0x00015c88
   142b8:	ffff8ffe 	.word	0xffff8ffe

000142bc <nrf_cc3xx_platform_abort>:
   142bc:	f3bf 8f4f 	dsb	sy
   142c0:	4905      	ldr	r1, [pc, #20]	; (142d8 <nrf_cc3xx_platform_abort+0x1c>)
   142c2:	4b06      	ldr	r3, [pc, #24]	; (142dc <nrf_cc3xx_platform_abort+0x20>)
   142c4:	68ca      	ldr	r2, [r1, #12]
   142c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   142ca:	4313      	orrs	r3, r2
   142cc:	60cb      	str	r3, [r1, #12]
   142ce:	f3bf 8f4f 	dsb	sy
   142d2:	bf00      	nop
   142d4:	e7fd      	b.n	142d2 <nrf_cc3xx_platform_abort+0x16>
   142d6:	bf00      	nop
   142d8:	e000ed00 	.word	0xe000ed00
   142dc:	05fa0004 	.word	0x05fa0004

000142e0 <CC_PalAbort>:
   142e0:	4b01      	ldr	r3, [pc, #4]	; (142e8 <CC_PalAbort+0x8>)
   142e2:	685b      	ldr	r3, [r3, #4]
   142e4:	4718      	bx	r3
   142e6:	bf00      	nop
   142e8:	20000044 	.word	0x20000044

000142ec <nrf_cc3xx_platform_set_abort>:
   142ec:	4b02      	ldr	r3, [pc, #8]	; (142f8 <nrf_cc3xx_platform_set_abort+0xc>)
   142ee:	e9d0 1200 	ldrd	r1, r2, [r0]
   142f2:	e9c3 1200 	strd	r1, r2, [r3]
   142f6:	4770      	bx	lr
   142f8:	20000044 	.word	0x20000044

000142fc <mutex_unlock>:
   142fc:	b148      	cbz	r0, 14312 <mutex_unlock+0x16>
   142fe:	6843      	ldr	r3, [r0, #4]
   14300:	b12b      	cbz	r3, 1430e <mutex_unlock+0x12>
   14302:	f3bf 8f5f 	dmb	sy
   14306:	2300      	movs	r3, #0
   14308:	6003      	str	r3, [r0, #0]
   1430a:	4618      	mov	r0, r3
   1430c:	4770      	bx	lr
   1430e:	4802      	ldr	r0, [pc, #8]	; (14318 <mutex_unlock+0x1c>)
   14310:	4770      	bx	lr
   14312:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14316:	4770      	bx	lr
   14318:	ffff8fea 	.word	0xffff8fea

0001431c <mutex_free>:
   1431c:	b510      	push	{r4, lr}
   1431e:	4604      	mov	r4, r0
   14320:	b128      	cbz	r0, 1432e <mutex_free+0x12>
   14322:	6863      	ldr	r3, [r4, #4]
   14324:	b113      	cbz	r3, 1432c <mutex_free+0x10>
   14326:	2300      	movs	r3, #0
   14328:	6023      	str	r3, [r4, #0]
   1432a:	6063      	str	r3, [r4, #4]
   1432c:	bd10      	pop	{r4, pc}
   1432e:	4b02      	ldr	r3, [pc, #8]	; (14338 <mutex_free+0x1c>)
   14330:	4802      	ldr	r0, [pc, #8]	; (1433c <mutex_free+0x20>)
   14332:	685b      	ldr	r3, [r3, #4]
   14334:	4798      	blx	r3
   14336:	e7f4      	b.n	14322 <mutex_free+0x6>
   14338:	20000044 	.word	0x20000044
   1433c:	00015ca4 	.word	0x00015ca4

00014340 <mutex_init>:
   14340:	b510      	push	{r4, lr}
   14342:	4604      	mov	r4, r0
   14344:	b130      	cbz	r0, 14354 <mutex_init+0x14>
   14346:	2200      	movs	r2, #0
   14348:	6863      	ldr	r3, [r4, #4]
   1434a:	6022      	str	r2, [r4, #0]
   1434c:	f043 0301 	orr.w	r3, r3, #1
   14350:	6063      	str	r3, [r4, #4]
   14352:	bd10      	pop	{r4, pc}
   14354:	4801      	ldr	r0, [pc, #4]	; (1435c <mutex_init+0x1c>)
   14356:	f7ff ffc3 	bl	142e0 <CC_PalAbort>
   1435a:	e7f4      	b.n	14346 <mutex_init+0x6>
   1435c:	00015ccc 	.word	0x00015ccc

00014360 <mutex_lock>:
   14360:	b180      	cbz	r0, 14384 <mutex_lock+0x24>
   14362:	6843      	ldr	r3, [r0, #4]
   14364:	b163      	cbz	r3, 14380 <mutex_lock+0x20>
   14366:	2201      	movs	r2, #1
   14368:	e8d0 3fef 	ldaex	r3, [r0]
   1436c:	e8c0 2fe1 	stlex	r1, r2, [r0]
   14370:	2900      	cmp	r1, #0
   14372:	d1f9      	bne.n	14368 <mutex_lock+0x8>
   14374:	2b01      	cmp	r3, #1
   14376:	d0f7      	beq.n	14368 <mutex_lock+0x8>
   14378:	f3bf 8f5f 	dmb	sy
   1437c:	2000      	movs	r0, #0
   1437e:	4770      	bx	lr
   14380:	4802      	ldr	r0, [pc, #8]	; (1438c <mutex_lock+0x2c>)
   14382:	4770      	bx	lr
   14384:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14388:	4770      	bx	lr
   1438a:	bf00      	nop
   1438c:	ffff8fea 	.word	0xffff8fea

00014390 <nrf_cc3xx_platform_set_mutexes>:
   14390:	b470      	push	{r4, r5, r6}
   14392:	4b0b      	ldr	r3, [pc, #44]	; (143c0 <nrf_cc3xx_platform_set_mutexes+0x30>)
   14394:	6806      	ldr	r6, [r0, #0]
   14396:	68c2      	ldr	r2, [r0, #12]
   14398:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
   1439c:	e9c3 4202 	strd	r4, r2, [r3, #8]
   143a0:	e9c3 6500 	strd	r6, r5, [r3]
   143a4:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
   143a8:	680e      	ldr	r6, [r1, #0]
   143aa:	4b06      	ldr	r3, [pc, #24]	; (143c4 <nrf_cc3xx_platform_set_mutexes+0x34>)
   143ac:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
   143b0:	e9c3 6500 	strd	r6, r5, [r3]
   143b4:	e9c3 4002 	strd	r4, r0, [r3, #8]
   143b8:	611a      	str	r2, [r3, #16]
   143ba:	bc70      	pop	{r4, r5, r6}
   143bc:	4770      	bx	lr
   143be:	bf00      	nop
   143c0:	20000054 	.word	0x20000054
   143c4:	20000064 	.word	0x20000064

000143c8 <CC_LibInitNoRng>:
   143c8:	b510      	push	{r4, lr}
   143ca:	f7ff fe63 	bl	14094 <CC_HalInit>
   143ce:	b120      	cbz	r0, 143da <CC_LibInitNoRng+0x12>
   143d0:	2403      	movs	r4, #3
   143d2:	f7ff fdbb 	bl	13f4c <CC_PalTerminate>
   143d6:	4620      	mov	r0, r4
   143d8:	bd10      	pop	{r4, pc}
   143da:	f7ff fd89 	bl	13ef0 <CC_PalInit>
   143de:	b990      	cbnz	r0, 14406 <CC_LibInitNoRng+0x3e>
   143e0:	f7ff fe16 	bl	14010 <CC_PalPowerSaveModeSelect>
   143e4:	b990      	cbnz	r0, 1440c <CC_LibInitNoRng+0x44>
   143e6:	4b0f      	ldr	r3, [pc, #60]	; (14424 <CC_LibInitNoRng+0x5c>)
   143e8:	681b      	ldr	r3, [r3, #0]
   143ea:	0e1b      	lsrs	r3, r3, #24
   143ec:	2bf0      	cmp	r3, #240	; 0xf0
   143ee:	d108      	bne.n	14402 <CC_LibInitNoRng+0x3a>
   143f0:	4a0d      	ldr	r2, [pc, #52]	; (14428 <CC_LibInitNoRng+0x60>)
   143f2:	4b0e      	ldr	r3, [pc, #56]	; (1442c <CC_LibInitNoRng+0x64>)
   143f4:	6812      	ldr	r2, [r2, #0]
   143f6:	429a      	cmp	r2, r3
   143f8:	d00a      	beq.n	14410 <CC_LibInitNoRng+0x48>
   143fa:	2407      	movs	r4, #7
   143fc:	f7ff fe4c 	bl	14098 <CC_HalTerminate>
   14400:	e7e7      	b.n	143d2 <CC_LibInitNoRng+0xa>
   14402:	2406      	movs	r4, #6
   14404:	e7fa      	b.n	143fc <CC_LibInitNoRng+0x34>
   14406:	2404      	movs	r4, #4
   14408:	4620      	mov	r0, r4
   1440a:	bd10      	pop	{r4, pc}
   1440c:	2400      	movs	r4, #0
   1440e:	e7f5      	b.n	143fc <CC_LibInitNoRng+0x34>
   14410:	2001      	movs	r0, #1
   14412:	f7ff fdfd 	bl	14010 <CC_PalPowerSaveModeSelect>
   14416:	4604      	mov	r4, r0
   14418:	2800      	cmp	r0, #0
   1441a:	d1f7      	bne.n	1440c <CC_LibInitNoRng+0x44>
   1441c:	4b04      	ldr	r3, [pc, #16]	; (14430 <CC_LibInitNoRng+0x68>)
   1441e:	6018      	str	r0, [r3, #0]
   14420:	e7d9      	b.n	143d6 <CC_LibInitNoRng+0xe>
   14422:	bf00      	nop
   14424:	50841928 	.word	0x50841928
   14428:	50841a24 	.word	0x50841a24
   1442c:	20e00000 	.word	0x20e00000
   14430:	50841a0c 	.word	0x50841a0c

00014434 <CC_LibInitRngModule>:
   14434:	b530      	push	{r4, r5, lr}
   14436:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   1443a:	f44f 7208 	mov.w	r2, #544	; 0x220
   1443e:	2100      	movs	r1, #0
   14440:	a80c      	add	r0, sp, #48	; 0x30
   14442:	f001 f885 	bl	15550 <memset>
   14446:	2100      	movs	r1, #0
   14448:	2228      	movs	r2, #40	; 0x28
   1444a:	a802      	add	r0, sp, #8
   1444c:	9101      	str	r1, [sp, #4]
   1444e:	f001 f87f 	bl	15550 <memset>
   14452:	a802      	add	r0, sp, #8
   14454:	f7ff feb6 	bl	141c4 <RNG_PLAT_SetUserRngParameters>
   14458:	b120      	cbz	r0, 14464 <CC_LibInitRngModule+0x30>
   1445a:	2405      	movs	r4, #5
   1445c:	4620      	mov	r0, r4
   1445e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   14462:	bd30      	pop	{r4, r5, pc}
   14464:	4d1d      	ldr	r5, [pc, #116]	; (144dc <CC_LibInitRngModule+0xa8>)
   14466:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1446a:	6828      	ldr	r0, [r5, #0]
   1446c:	f7ff fda0 	bl	13fb0 <CC_PalMutexLock>
   14470:	4604      	mov	r4, r0
   14472:	b9e8      	cbnz	r0, 144b0 <CC_LibInitRngModule+0x7c>
   14474:	2000      	movs	r0, #0
   14476:	f7ff fdcb 	bl	14010 <CC_PalPowerSaveModeSelect>
   1447a:	bb58      	cbnz	r0, 144d4 <CC_LibInitRngModule+0xa0>
   1447c:	aa0c      	add	r2, sp, #48	; 0x30
   1447e:	a902      	add	r1, sp, #8
   14480:	a801      	add	r0, sp, #4
   14482:	f000 fbed 	bl	14c60 <LLF_RND_RunTrngStartupTest>
   14486:	4604      	mov	r4, r0
   14488:	2001      	movs	r0, #1
   1448a:	f7ff fdc1 	bl	14010 <CC_PalPowerSaveModeSelect>
   1448e:	b9e8      	cbnz	r0, 144cc <CC_LibInitRngModule+0x98>
   14490:	6828      	ldr	r0, [r5, #0]
   14492:	f7ff fd95 	bl	13fc0 <CC_PalMutexUnlock>
   14496:	b928      	cbnz	r0, 144a4 <CC_LibInitRngModule+0x70>
   14498:	2c00      	cmp	r4, #0
   1449a:	d1de      	bne.n	1445a <CC_LibInitRngModule+0x26>
   1449c:	4620      	mov	r0, r4
   1449e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   144a2:	bd30      	pop	{r4, r5, pc}
   144a4:	480e      	ldr	r0, [pc, #56]	; (144e0 <CC_LibInitRngModule+0xac>)
   144a6:	f7ff ff1b 	bl	142e0 <CC_PalAbort>
   144aa:	2c00      	cmp	r4, #0
   144ac:	d0f6      	beq.n	1449c <CC_LibInitRngModule+0x68>
   144ae:	e7d4      	b.n	1445a <CC_LibInitRngModule+0x26>
   144b0:	480c      	ldr	r0, [pc, #48]	; (144e4 <CC_LibInitRngModule+0xb0>)
   144b2:	f7ff ff15 	bl	142e0 <CC_PalAbort>
   144b6:	2c01      	cmp	r4, #1
   144b8:	d1dc      	bne.n	14474 <CC_LibInitRngModule+0x40>
   144ba:	6828      	ldr	r0, [r5, #0]
   144bc:	f7ff fd80 	bl	13fc0 <CC_PalMutexUnlock>
   144c0:	2800      	cmp	r0, #0
   144c2:	d0ca      	beq.n	1445a <CC_LibInitRngModule+0x26>
   144c4:	4806      	ldr	r0, [pc, #24]	; (144e0 <CC_LibInitRngModule+0xac>)
   144c6:	f7ff ff0b 	bl	142e0 <CC_PalAbort>
   144ca:	e7c6      	b.n	1445a <CC_LibInitRngModule+0x26>
   144cc:	4806      	ldr	r0, [pc, #24]	; (144e8 <CC_LibInitRngModule+0xb4>)
   144ce:	f7ff ff07 	bl	142e0 <CC_PalAbort>
   144d2:	e7dd      	b.n	14490 <CC_LibInitRngModule+0x5c>
   144d4:	4805      	ldr	r0, [pc, #20]	; (144ec <CC_LibInitRngModule+0xb8>)
   144d6:	f7ff ff03 	bl	142e0 <CC_PalAbort>
   144da:	e7cf      	b.n	1447c <CC_LibInitRngModule+0x48>
   144dc:	20000040 	.word	0x20000040
   144e0:	00015d08 	.word	0x00015d08
   144e4:	00015cf0 	.word	0x00015cf0
   144e8:	00015d40 	.word	0x00015d40
   144ec:	00015d20 	.word	0x00015d20

000144f0 <CC_LibInit>:
   144f0:	b508      	push	{r3, lr}
   144f2:	f7ff fdcf 	bl	14094 <CC_HalInit>
   144f6:	b118      	cbz	r0, 14500 <CC_LibInit+0x10>
   144f8:	f7ff fd28 	bl	13f4c <CC_PalTerminate>
   144fc:	2003      	movs	r0, #3
   144fe:	bd08      	pop	{r3, pc}
   14500:	f7ff fcf6 	bl	13ef0 <CC_PalInit>
   14504:	b9c0      	cbnz	r0, 14538 <CC_LibInit+0x48>
   14506:	f7ff fd83 	bl	14010 <CC_PalPowerSaveModeSelect>
   1450a:	b9b8      	cbnz	r0, 1453c <CC_LibInit+0x4c>
   1450c:	4b14      	ldr	r3, [pc, #80]	; (14560 <CC_LibInit+0x70>)
   1450e:	681b      	ldr	r3, [r3, #0]
   14510:	0e1b      	lsrs	r3, r3, #24
   14512:	2bf0      	cmp	r3, #240	; 0xf0
   14514:	d10a      	bne.n	1452c <CC_LibInit+0x3c>
   14516:	4a13      	ldr	r2, [pc, #76]	; (14564 <CC_LibInit+0x74>)
   14518:	4b13      	ldr	r3, [pc, #76]	; (14568 <CC_LibInit+0x78>)
   1451a:	6812      	ldr	r2, [r2, #0]
   1451c:	429a      	cmp	r2, r3
   1451e:	d017      	beq.n	14550 <CC_LibInit+0x60>
   14520:	f7ff fdba 	bl	14098 <CC_HalTerminate>
   14524:	f7ff fd12 	bl	13f4c <CC_PalTerminate>
   14528:	2007      	movs	r0, #7
   1452a:	bd08      	pop	{r3, pc}
   1452c:	f7ff fdb4 	bl	14098 <CC_HalTerminate>
   14530:	f7ff fd0c 	bl	13f4c <CC_PalTerminate>
   14534:	2006      	movs	r0, #6
   14536:	bd08      	pop	{r3, pc}
   14538:	2004      	movs	r0, #4
   1453a:	bd08      	pop	{r3, pc}
   1453c:	f7ff fdac 	bl	14098 <CC_HalTerminate>
   14540:	f7ff fd04 	bl	13f4c <CC_PalTerminate>
   14544:	f7ff ff76 	bl	14434 <CC_LibInitRngModule>
   14548:	2800      	cmp	r0, #0
   1454a:	bf18      	it	ne
   1454c:	2005      	movne	r0, #5
   1454e:	bd08      	pop	{r3, pc}
   14550:	2001      	movs	r0, #1
   14552:	f7ff fd5d 	bl	14010 <CC_PalPowerSaveModeSelect>
   14556:	2800      	cmp	r0, #0
   14558:	d1f0      	bne.n	1453c <CC_LibInit+0x4c>
   1455a:	4b04      	ldr	r3, [pc, #16]	; (1456c <CC_LibInit+0x7c>)
   1455c:	6018      	str	r0, [r3, #0]
   1455e:	e7f1      	b.n	14544 <CC_LibInit+0x54>
   14560:	50841928 	.word	0x50841928
   14564:	50841a24 	.word	0x50841a24
   14568:	20e00000 	.word	0x20e00000
   1456c:	50841a0c 	.word	0x50841a0c

00014570 <CC_PalTrngParamGet>:
   14570:	2800      	cmp	r0, #0
   14572:	d066      	beq.n	14642 <CC_PalTrngParamGet+0xd2>
   14574:	2900      	cmp	r1, #0
   14576:	d064      	beq.n	14642 <CC_PalTrngParamGet+0xd2>
   14578:	680b      	ldr	r3, [r1, #0]
   1457a:	2b1c      	cmp	r3, #28
   1457c:	d161      	bne.n	14642 <CC_PalTrngParamGet+0xd2>
   1457e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14582:	4a3b      	ldr	r2, [pc, #236]	; (14670 <CC_PalTrngParamGet+0x100>)
   14584:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
   14588:	4291      	cmp	r1, r2
   1458a:	d05c      	beq.n	14646 <CC_PalTrngParamGet+0xd6>
   1458c:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   14590:	3201      	adds	r2, #1
   14592:	d058      	beq.n	14646 <CC_PalTrngParamGet+0xd6>
   14594:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   14598:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1459c:	6002      	str	r2, [r0, #0]
   1459e:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
   145a2:	4a34      	ldr	r2, [pc, #208]	; (14674 <CC_PalTrngParamGet+0x104>)
   145a4:	4291      	cmp	r1, r2
   145a6:	d060      	beq.n	1466a <CC_PalTrngParamGet+0xfa>
   145a8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   145ac:	3201      	adds	r2, #1
   145ae:	d05c      	beq.n	1466a <CC_PalTrngParamGet+0xfa>
   145b0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   145b4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   145b8:	6042      	str	r2, [r0, #4]
   145ba:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   145be:	f512 7f94 	cmn.w	r2, #296	; 0x128
   145c2:	d04f      	beq.n	14664 <CC_PalTrngParamGet+0xf4>
   145c4:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   145c8:	3201      	adds	r2, #1
   145ca:	d04b      	beq.n	14664 <CC_PalTrngParamGet+0xf4>
   145cc:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   145d0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   145d4:	6082      	str	r2, [r0, #8]
   145d6:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
   145da:	4a27      	ldr	r2, [pc, #156]	; (14678 <CC_PalTrngParamGet+0x108>)
   145dc:	4291      	cmp	r1, r2
   145de:	d03e      	beq.n	1465e <CC_PalTrngParamGet+0xee>
   145e0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   145e4:	3201      	adds	r2, #1
   145e6:	d03a      	beq.n	1465e <CC_PalTrngParamGet+0xee>
   145e8:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   145ec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   145f0:	60c2      	str	r2, [r0, #12]
   145f2:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   145f6:	3270      	adds	r2, #112	; 0x70
   145f8:	d02f      	beq.n	1465a <CC_PalTrngParamGet+0xea>
   145fa:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   145fe:	3201      	adds	r2, #1
   14600:	d02b      	beq.n	1465a <CC_PalTrngParamGet+0xea>
   14602:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   14606:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1460a:	6102      	str	r2, [r0, #16]
   1460c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   14610:	32af      	adds	r2, #175	; 0xaf
   14612:	d020      	beq.n	14656 <CC_PalTrngParamGet+0xe6>
   14614:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   14618:	3201      	adds	r2, #1
   1461a:	d01c      	beq.n	14656 <CC_PalTrngParamGet+0xe6>
   1461c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   14620:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14624:	6142      	str	r2, [r0, #20]
   14626:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
   1462a:	4a14      	ldr	r2, [pc, #80]	; (1467c <CC_PalTrngParamGet+0x10c>)
   1462c:	4291      	cmp	r1, r2
   1462e:	d00d      	beq.n	1464c <CC_PalTrngParamGet+0xdc>
   14630:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   14634:	3201      	adds	r2, #1
   14636:	d009      	beq.n	1464c <CC_PalTrngParamGet+0xdc>
   14638:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
   1463c:	6183      	str	r3, [r0, #24]
   1463e:	2000      	movs	r0, #0
   14640:	4770      	bx	lr
   14642:	2001      	movs	r0, #1
   14644:	4770      	bx	lr
   14646:	f640 02fc 	movw	r2, #2300	; 0x8fc
   1464a:	e7a5      	b.n	14598 <CC_PalTrngParamGet+0x28>
   1464c:	f240 3337 	movw	r3, #823	; 0x337
   14650:	6183      	str	r3, [r0, #24]
   14652:	2000      	movs	r0, #0
   14654:	4770      	bx	lr
   14656:	2251      	movs	r2, #81	; 0x51
   14658:	e7e2      	b.n	14620 <CC_PalTrngParamGet+0xb0>
   1465a:	2290      	movs	r2, #144	; 0x90
   1465c:	e7d3      	b.n	14606 <CC_PalTrngParamGet+0x96>
   1465e:	f642 1204 	movw	r2, #10500	; 0x2904
   14662:	e7c3      	b.n	145ec <CC_PalTrngParamGet+0x7c>
   14664:	f640 62d8 	movw	r2, #3800	; 0xed8
   14668:	e7b2      	b.n	145d0 <CC_PalTrngParamGet+0x60>
   1466a:	f242 02d0 	movw	r2, #8400	; 0x20d0
   1466e:	e7a1      	b.n	145b4 <CC_PalTrngParamGet+0x44>
   14670:	fffff8fc 	.word	0xfffff8fc
   14674:	ffff20d0 	.word	0xffff20d0
   14678:	ffff2904 	.word	0xffff2904
   1467c:	fffff337 	.word	0xfffff337

00014680 <startTrngHW>:
   14680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14684:	2800      	cmp	r0, #0
   14686:	d077      	beq.n	14778 <startTrngHW+0xf8>
   14688:	460c      	mov	r4, r1
   1468a:	2900      	cmp	r1, #0
   1468c:	d074      	beq.n	14778 <startTrngHW+0xf8>
   1468e:	461d      	mov	r5, r3
   14690:	2b00      	cmp	r3, #0
   14692:	d071      	beq.n	14778 <startTrngHW+0xf8>
   14694:	4606      	mov	r6, r0
   14696:	b11a      	cbz	r2, 146a0 <startTrngHW+0x20>
   14698:	2201      	movs	r2, #1
   1469a:	2300      	movs	r3, #0
   1469c:	602a      	str	r2, [r5, #0]
   1469e:	6003      	str	r3, [r0, #0]
   146a0:	682b      	ldr	r3, [r5, #0]
   146a2:	2b00      	cmp	r3, #0
   146a4:	d064      	beq.n	14770 <startTrngHW+0xf0>
   146a6:	4629      	mov	r1, r5
   146a8:	4620      	mov	r0, r4
   146aa:	f000 fb15 	bl	14cd8 <LLF_RND_GetFastestRosc>
   146ae:	4607      	mov	r7, r0
   146b0:	2800      	cmp	r0, #0
   146b2:	d15e      	bne.n	14772 <startTrngHW+0xf2>
   146b4:	4621      	mov	r1, r4
   146b6:	6828      	ldr	r0, [r5, #0]
   146b8:	f000 faf0 	bl	14c9c <LLF_RND_GetRoscSampleCnt>
   146bc:	4607      	mov	r7, r0
   146be:	2800      	cmp	r0, #0
   146c0:	d157      	bne.n	14772 <startTrngHW+0xf2>
   146c2:	682b      	ldr	r3, [r5, #0]
   146c4:	2b08      	cmp	r3, #8
   146c6:	d066      	beq.n	14796 <startTrngHW+0x116>
   146c8:	2b04      	cmp	r3, #4
   146ca:	d067      	beq.n	1479c <startTrngHW+0x11c>
   146cc:	f1a3 0802 	sub.w	r8, r3, #2
   146d0:	fab8 f888 	clz	r8, r8
   146d4:	ea4f 1858 	mov.w	r8, r8, lsr #5
   146d8:	2301      	movs	r3, #1
   146da:	469c      	mov	ip, r3
   146dc:	4a31      	ldr	r2, [pc, #196]	; (147a4 <startTrngHW+0x124>)
   146de:	4932      	ldr	r1, [pc, #200]	; (147a8 <startTrngHW+0x128>)
   146e0:	6013      	str	r3, [r2, #0]
   146e2:	4610      	mov	r0, r2
   146e4:	600b      	str	r3, [r1, #0]
   146e6:	3a94      	subs	r2, #148	; 0x94
   146e8:	f8c0 c000 	str.w	ip, [r0]
   146ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   146ee:	6013      	str	r3, [r2, #0]
   146f0:	6811      	ldr	r1, [r2, #0]
   146f2:	428b      	cmp	r3, r1
   146f4:	d1f8      	bne.n	146e8 <startTrngHW+0x68>
   146f6:	f04f 0900 	mov.w	r9, #0
   146fa:	4b2c      	ldr	r3, [pc, #176]	; (147ac <startTrngHW+0x12c>)
   146fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14700:	f8c3 9000 	str.w	r9, [r3]
   14704:	f7ff fcca 	bl	1409c <CC_HalClearInterruptBit>
   14708:	4b29      	ldr	r3, [pc, #164]	; (147b0 <startTrngHW+0x130>)
   1470a:	4a2a      	ldr	r2, [pc, #168]	; (147b4 <startTrngHW+0x134>)
   1470c:	4648      	mov	r0, r9
   1470e:	601a      	str	r2, [r3, #0]
   14710:	f7ff fcd2 	bl	140b8 <CC_HalMaskInterrupt>
   14714:	4a28      	ldr	r2, [pc, #160]	; (147b8 <startTrngHW+0x138>)
   14716:	4b29      	ldr	r3, [pc, #164]	; (147bc <startTrngHW+0x13c>)
   14718:	f8c2 8000 	str.w	r8, [r2]
   1471c:	6818      	ldr	r0, [r3, #0]
   1471e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   14722:	f7ff fcc9 	bl	140b8 <CC_HalMaskInterrupt>
   14726:	220a      	movs	r2, #10
   14728:	4b25      	ldr	r3, [pc, #148]	; (147c0 <startTrngHW+0x140>)
   1472a:	601a      	str	r2, [r3, #0]
   1472c:	9a08      	ldr	r2, [sp, #32]
   1472e:	6923      	ldr	r3, [r4, #16]
   14730:	2a01      	cmp	r2, #1
   14732:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14734:	d024      	beq.n	14780 <startTrngHW+0x100>
   14736:	4a23      	ldr	r2, [pc, #140]	; (147c4 <startTrngHW+0x144>)
   14738:	fba2 2303 	umull	r2, r3, r2, r3
   1473c:	091b      	lsrs	r3, r3, #4
   1473e:	2201      	movs	r2, #1
   14740:	fb03 f301 	mul.w	r3, r3, r1
   14744:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14748:	491f      	ldr	r1, [pc, #124]	; (147c8 <startTrngHW+0x148>)
   1474a:	03db      	lsls	r3, r3, #15
   1474c:	099b      	lsrs	r3, r3, #6
   1474e:	600b      	str	r3, [r1, #0]
   14750:	4b16      	ldr	r3, [pc, #88]	; (147ac <startTrngHW+0x12c>)
   14752:	4638      	mov	r0, r7
   14754:	601a      	str	r2, [r3, #0]
   14756:	6833      	ldr	r3, [r6, #0]
   14758:	682a      	ldr	r2, [r5, #0]
   1475a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1475e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   14762:	6033      	str	r3, [r6, #0]
   14764:	682a      	ldr	r2, [r5, #0]
   14766:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1476a:	6033      	str	r3, [r6, #0]
   1476c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14770:	4f16      	ldr	r7, [pc, #88]	; (147cc <startTrngHW+0x14c>)
   14772:	4638      	mov	r0, r7
   14774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14778:	4f15      	ldr	r7, [pc, #84]	; (147d0 <startTrngHW+0x150>)
   1477a:	4638      	mov	r0, r7
   1477c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14780:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14784:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   14788:	3201      	adds	r2, #1
   1478a:	d002      	beq.n	14792 <startTrngHW+0x112>
   1478c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   14790:	e7d1      	b.n	14736 <startTrngHW+0xb6>
   14792:	2316      	movs	r3, #22
   14794:	e7d3      	b.n	1473e <startTrngHW+0xbe>
   14796:	f04f 0803 	mov.w	r8, #3
   1479a:	e79d      	b.n	146d8 <startTrngHW+0x58>
   1479c:	f04f 0802 	mov.w	r8, #2
   147a0:	e79a      	b.n	146d8 <startTrngHW+0x58>
   147a2:	bf00      	nop
   147a4:	508411c4 	.word	0x508411c4
   147a8:	50841140 	.word	0x50841140
   147ac:	5084112c 	.word	0x5084112c
   147b0:	50841100 	.word	0x50841100
   147b4:	0ffffffe 	.word	0x0ffffffe
   147b8:	5084110c 	.word	0x5084110c
   147bc:	50841a04 	.word	0x50841a04
   147c0:	50841138 	.word	0x50841138
   147c4:	aaaaaaab 	.word	0xaaaaaaab
   147c8:	508411d8 	.word	0x508411d8
   147cc:	00f10c31 	.word	0x00f10c31
   147d0:	00f10c35 	.word	0x00f10c35

000147d4 <LLF_RND_RepetitionCounterTest.part.0>:
   147d4:	b4f0      	push	{r4, r5, r6, r7}
   147d6:	2400      	movs	r4, #0
   147d8:	00c9      	lsls	r1, r1, #3
   147da:	4626      	mov	r6, r4
   147dc:	4627      	mov	r7, r4
   147de:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   147e2:	e006      	b.n	147f2 <LLF_RND_RepetitionCounterTest.part.0+0x1e>
   147e4:	429f      	cmp	r7, r3
   147e6:	d015      	beq.n	14814 <LLF_RND_RepetitionCounterTest.part.0+0x40>
   147e8:	2601      	movs	r6, #1
   147ea:	4565      	cmp	r5, ip
   147ec:	d818      	bhi.n	14820 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   147ee:	462c      	mov	r4, r5
   147f0:	461f      	mov	r7, r3
   147f2:	0963      	lsrs	r3, r4, #5
   147f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   147f8:	f004 011f 	and.w	r1, r4, #31
   147fc:	40cb      	lsrs	r3, r1
   147fe:	291f      	cmp	r1, #31
   14800:	f104 0501 	add.w	r5, r4, #1
   14804:	bf18      	it	ne
   14806:	f003 0301 	andne.w	r3, r3, #1
   1480a:	2c00      	cmp	r4, #0
   1480c:	d1ea      	bne.n	147e4 <LLF_RND_RepetitionCounterTest.part.0+0x10>
   1480e:	2601      	movs	r6, #1
   14810:	4635      	mov	r5, r6
   14812:	e7ec      	b.n	147ee <LLF_RND_RepetitionCounterTest.part.0+0x1a>
   14814:	3601      	adds	r6, #1
   14816:	4296      	cmp	r6, r2
   14818:	d1e7      	bne.n	147ea <LLF_RND_RepetitionCounterTest.part.0+0x16>
   1481a:	4803      	ldr	r0, [pc, #12]	; (14828 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
   1481c:	bcf0      	pop	{r4, r5, r6, r7}
   1481e:	4770      	bx	lr
   14820:	2000      	movs	r0, #0
   14822:	bcf0      	pop	{r4, r5, r6, r7}
   14824:	4770      	bx	lr
   14826:	bf00      	nop
   14828:	00f10c36 	.word	0x00f10c36

0001482c <LLF_RND_AdaptiveProportionTest>:
   1482c:	2800      	cmp	r0, #0
   1482e:	d05f      	beq.n	148f0 <LLF_RND_AdaptiveProportionTest+0xc4>
   14830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14834:	1e4c      	subs	r4, r1, #1
   14836:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1483a:	d226      	bcs.n	1488a <LLF_RND_AdaptiveProportionTest+0x5e>
   1483c:	b32b      	cbz	r3, 1488a <LLF_RND_AdaptiveProportionTest+0x5e>
   1483e:	b322      	cbz	r2, 1488a <LLF_RND_AdaptiveProportionTest+0x5e>
   14840:	00cc      	lsls	r4, r1, #3
   14842:	2b01      	cmp	r3, #1
   14844:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   14848:	d02f      	beq.n	148aa <LLF_RND_AdaptiveProportionTest+0x7e>
   1484a:	2100      	movs	r1, #0
   1484c:	468c      	mov	ip, r1
   1484e:	460f      	mov	r7, r1
   14850:	460d      	mov	r5, r1
   14852:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   14856:	094c      	lsrs	r4, r1, #5
   14858:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1485c:	f001 061f 	and.w	r6, r1, #31
   14860:	40f4      	lsrs	r4, r6
   14862:	2e1f      	cmp	r6, #31
   14864:	bf18      	it	ne
   14866:	f004 0401 	andne.w	r4, r4, #1
   1486a:	b921      	cbnz	r1, 14876 <LLF_RND_AdaptiveProportionTest+0x4a>
   1486c:	2501      	movs	r5, #1
   1486e:	46ac      	mov	ip, r5
   14870:	4629      	mov	r1, r5
   14872:	4627      	mov	r7, r4
   14874:	e7ef      	b.n	14856 <LLF_RND_AdaptiveProportionTest+0x2a>
   14876:	42ab      	cmp	r3, r5
   14878:	d013      	beq.n	148a2 <LLF_RND_AdaptiveProportionTest+0x76>
   1487a:	42a7      	cmp	r7, r4
   1487c:	d101      	bne.n	14882 <LLF_RND_AdaptiveProportionTest+0x56>
   1487e:	f10c 0c01 	add.w	ip, ip, #1
   14882:	4545      	cmp	r5, r8
   14884:	d104      	bne.n	14890 <LLF_RND_AdaptiveProportionTest+0x64>
   14886:	4562      	cmp	r2, ip
   14888:	d202      	bcs.n	14890 <LLF_RND_AdaptiveProportionTest+0x64>
   1488a:	481a      	ldr	r0, [pc, #104]	; (148f4 <LLF_RND_AdaptiveProportionTest+0xc8>)
   1488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14890:	463c      	mov	r4, r7
   14892:	3101      	adds	r1, #1
   14894:	458e      	cmp	lr, r1
   14896:	f105 0501 	add.w	r5, r5, #1
   1489a:	d2ea      	bcs.n	14872 <LLF_RND_AdaptiveProportionTest+0x46>
   1489c:	2000      	movs	r0, #0
   1489e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148a2:	2500      	movs	r5, #0
   148a4:	f04f 0c01 	mov.w	ip, #1
   148a8:	e7f3      	b.n	14892 <LLF_RND_AdaptiveProportionTest+0x66>
   148aa:	2600      	movs	r6, #0
   148ac:	46b4      	mov	ip, r6
   148ae:	4637      	mov	r7, r6
   148b0:	4631      	mov	r1, r6
   148b2:	094b      	lsrs	r3, r1, #5
   148b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   148b8:	f001 051f 	and.w	r5, r1, #31
   148bc:	40eb      	lsrs	r3, r5
   148be:	2d1f      	cmp	r5, #31
   148c0:	bf18      	it	ne
   148c2:	f003 0301 	andne.w	r3, r3, #1
   148c6:	b139      	cbz	r1, 148d8 <LLF_RND_AdaptiveProportionTest+0xac>
   148c8:	b95f      	cbnz	r7, 148e2 <LLF_RND_AdaptiveProportionTest+0xb6>
   148ca:	459c      	cmp	ip, r3
   148cc:	d001      	beq.n	148d2 <LLF_RND_AdaptiveProportionTest+0xa6>
   148ce:	4663      	mov	r3, ip
   148d0:	e008      	b.n	148e4 <LLF_RND_AdaptiveProportionTest+0xb8>
   148d2:	4663      	mov	r3, ip
   148d4:	3601      	adds	r6, #1
   148d6:	e005      	b.n	148e4 <LLF_RND_AdaptiveProportionTest+0xb8>
   148d8:	2601      	movs	r6, #1
   148da:	4631      	mov	r1, r6
   148dc:	469c      	mov	ip, r3
   148de:	2701      	movs	r7, #1
   148e0:	e7e7      	b.n	148b2 <LLF_RND_AdaptiveProportionTest+0x86>
   148e2:	463e      	mov	r6, r7
   148e4:	42b2      	cmp	r2, r6
   148e6:	d3d0      	bcc.n	1488a <LLF_RND_AdaptiveProportionTest+0x5e>
   148e8:	3101      	adds	r1, #1
   148ea:	42a1      	cmp	r1, r4
   148ec:	d1f6      	bne.n	148dc <LLF_RND_AdaptiveProportionTest+0xb0>
   148ee:	e7d5      	b.n	1489c <LLF_RND_AdaptiveProportionTest+0x70>
   148f0:	4800      	ldr	r0, [pc, #0]	; (148f4 <LLF_RND_AdaptiveProportionTest+0xc8>)
   148f2:	4770      	bx	lr
   148f4:	00f10c37 	.word	0x00f10c37

000148f8 <getTrngSource>:
   148f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148fc:	b08d      	sub	sp, #52	; 0x34
   148fe:	9e18      	ldr	r6, [sp, #96]	; 0x60
   14900:	4607      	mov	r7, r0
   14902:	460c      	mov	r4, r1
   14904:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   14906:	2e00      	cmp	r6, #0
   14908:	d14c      	bne.n	149a4 <getTrngSource+0xac>
   1490a:	f8d1 b010 	ldr.w	fp, [r1, #16]
   1490e:	2100      	movs	r1, #0
   14910:	601d      	str	r5, [r3, #0]
   14912:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14914:	6019      	str	r1, [r3, #0]
   14916:	2a00      	cmp	r2, #0
   14918:	f000 811e 	beq.w	14b58 <getTrngSource+0x260>
   1491c:	4a9a      	ldr	r2, [pc, #616]	; (14b88 <getTrngSource+0x290>)
   1491e:	4b9b      	ldr	r3, [pc, #620]	; (14b8c <getTrngSource+0x294>)
   14920:	6811      	ldr	r1, [r2, #0]
   14922:	6a62      	ldr	r2, [r4, #36]	; 0x24
   14924:	681b      	ldr	r3, [r3, #0]
   14926:	429a      	cmp	r2, r3
   14928:	d147      	bne.n	149ba <getTrngSource+0xc2>
   1492a:	290a      	cmp	r1, #10
   1492c:	d145      	bne.n	149ba <getTrngSource+0xc2>
   1492e:	78fb      	ldrb	r3, [r7, #3]
   14930:	9304      	str	r3, [sp, #16]
   14932:	2304      	movs	r3, #4
   14934:	46b8      	mov	r8, r7
   14936:	9302      	str	r3, [sp, #8]
   14938:	4b95      	ldr	r3, [pc, #596]	; (14b90 <getTrngSource+0x298>)
   1493a:	fba3 230b 	umull	r2, r3, r3, fp
   1493e:	ea4f 0a93 	mov.w	sl, r3, lsr #2
   14942:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   14946:	f105 0208 	add.w	r2, r5, #8
   1494a:	9203      	str	r2, [sp, #12]
   1494c:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
   14950:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14952:	f8c3 b000 	str.w	fp, [r3]
   14956:	f1bb 0f00 	cmp.w	fp, #0
   1495a:	f000 80c3 	beq.w	14ae4 <getTrngSource+0x1ec>
   1495e:	465d      	mov	r5, fp
   14960:	f04f 0900 	mov.w	r9, #0
   14964:	9e03      	ldr	r6, [sp, #12]
   14966:	f000 f9c7 	bl	14cf8 <LLF_RND_TurnOffTrng>
   1496a:	2300      	movs	r3, #0
   1496c:	9305      	str	r3, [sp, #20]
   1496e:	f1b8 0f00 	cmp.w	r8, #0
   14972:	f000 80e5 	beq.w	14b40 <getTrngSource+0x248>
   14976:	2c00      	cmp	r4, #0
   14978:	f000 80e2 	beq.w	14b40 <getTrngSource+0x248>
   1497c:	9b04      	ldr	r3, [sp, #16]
   1497e:	2b00      	cmp	r3, #0
   14980:	f000 80dc 	beq.w	14b3c <getTrngSource+0x244>
   14984:	4620      	mov	r0, r4
   14986:	a904      	add	r1, sp, #16
   14988:	f000 f9a6 	bl	14cd8 <LLF_RND_GetFastestRosc>
   1498c:	b1b8      	cbz	r0, 149be <getTrngSource+0xc6>
   1498e:	4b81      	ldr	r3, [pc, #516]	; (14b94 <getTrngSource+0x29c>)
   14990:	4298      	cmp	r0, r3
   14992:	f040 80a7 	bne.w	14ae4 <getTrngSource+0x1ec>
   14996:	9002      	str	r0, [sp, #8]
   14998:	f000 f9ae 	bl	14cf8 <LLF_RND_TurnOffTrng>
   1499c:	9802      	ldr	r0, [sp, #8]
   1499e:	b00d      	add	sp, #52	; 0x34
   149a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149a4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   149a8:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   149ac:	3001      	adds	r0, #1
   149ae:	bf0c      	ite	eq
   149b0:	f44f 7b04 	moveq.w	fp, #528	; 0x210
   149b4:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
   149b8:	e7a9      	b.n	1490e <getTrngSource+0x16>
   149ba:	4877      	ldr	r0, [pc, #476]	; (14b98 <getTrngSource+0x2a0>)
   149bc:	e7eb      	b.n	14996 <getTrngSource+0x9e>
   149be:	4621      	mov	r1, r4
   149c0:	9804      	ldr	r0, [sp, #16]
   149c2:	f000 f96b 	bl	14c9c <LLF_RND_GetRoscSampleCnt>
   149c6:	2800      	cmp	r0, #0
   149c8:	d1e1      	bne.n	1498e <getTrngSource+0x96>
   149ca:	9f04      	ldr	r7, [sp, #16]
   149cc:	2f08      	cmp	r7, #8
   149ce:	f000 80b9 	beq.w	14b44 <getTrngSource+0x24c>
   149d2:	2f04      	cmp	r7, #4
   149d4:	f000 80b8 	beq.w	14b48 <getTrngSource+0x250>
   149d8:	f1a7 0702 	sub.w	r7, r7, #2
   149dc:	fab7 f787 	clz	r7, r7
   149e0:	097f      	lsrs	r7, r7, #5
   149e2:	2301      	movs	r3, #1
   149e4:	4619      	mov	r1, r3
   149e6:	486d      	ldr	r0, [pc, #436]	; (14b9c <getTrngSource+0x2a4>)
   149e8:	6003      	str	r3, [r0, #0]
   149ea:	f840 3c84 	str.w	r3, [r0, #-132]
   149ee:	4b6b      	ldr	r3, [pc, #428]	; (14b9c <getTrngSource+0x2a4>)
   149f0:	4866      	ldr	r0, [pc, #408]	; (14b8c <getTrngSource+0x294>)
   149f2:	6019      	str	r1, [r3, #0]
   149f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   149f6:	6003      	str	r3, [r0, #0]
   149f8:	6800      	ldr	r0, [r0, #0]
   149fa:	4283      	cmp	r3, r0
   149fc:	d1f7      	bne.n	149ee <getTrngSource+0xf6>
   149fe:	2300      	movs	r3, #0
   14a00:	4a67      	ldr	r2, [pc, #412]	; (14ba0 <getTrngSource+0x2a8>)
   14a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a06:	6013      	str	r3, [r2, #0]
   14a08:	f7ff fb48 	bl	1409c <CC_HalClearInterruptBit>
   14a0c:	2300      	movs	r3, #0
   14a0e:	4965      	ldr	r1, [pc, #404]	; (14ba4 <getTrngSource+0x2ac>)
   14a10:	4618      	mov	r0, r3
   14a12:	4b65      	ldr	r3, [pc, #404]	; (14ba8 <getTrngSource+0x2b0>)
   14a14:	6019      	str	r1, [r3, #0]
   14a16:	f7ff fb4f 	bl	140b8 <CC_HalMaskInterrupt>
   14a1a:	4964      	ldr	r1, [pc, #400]	; (14bac <getTrngSource+0x2b4>)
   14a1c:	4b64      	ldr	r3, [pc, #400]	; (14bb0 <getTrngSource+0x2b8>)
   14a1e:	600f      	str	r7, [r1, #0]
   14a20:	6818      	ldr	r0, [r3, #0]
   14a22:	4f5b      	ldr	r7, [pc, #364]	; (14b90 <getTrngSource+0x298>)
   14a24:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   14a28:	f7ff fb46 	bl	140b8 <CC_HalMaskInterrupt>
   14a2c:	210a      	movs	r1, #10
   14a2e:	2201      	movs	r2, #1
   14a30:	4b55      	ldr	r3, [pc, #340]	; (14b88 <getTrngSource+0x290>)
   14a32:	4860      	ldr	r0, [pc, #384]	; (14bb4 <getTrngSource+0x2bc>)
   14a34:	6019      	str	r1, [r3, #0]
   14a36:	6921      	ldr	r1, [r4, #16]
   14a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14a3a:	fba7 c101 	umull	ip, r1, r7, r1
   14a3e:	0909      	lsrs	r1, r1, #4
   14a40:	fb03 f301 	mul.w	r3, r3, r1
   14a44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14a48:	03db      	lsls	r3, r3, #15
   14a4a:	099b      	lsrs	r3, r3, #6
   14a4c:	6003      	str	r3, [r0, #0]
   14a4e:	4b54      	ldr	r3, [pc, #336]	; (14ba0 <getTrngSource+0x2a8>)
   14a50:	a805      	add	r0, sp, #20
   14a52:	601a      	str	r2, [r3, #0]
   14a54:	9904      	ldr	r1, [sp, #16]
   14a56:	f8d8 2000 	ldr.w	r2, [r8]
   14a5a:	020b      	lsls	r3, r1, #8
   14a5c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   14a60:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   14a64:	4313      	orrs	r3, r2
   14a66:	f8c8 3000 	str.w	r3, [r8]
   14a6a:	f000 f907 	bl	14c7c <LLF_RND_WaitRngInterrupt>
   14a6e:	2800      	cmp	r0, #0
   14a70:	d18d      	bne.n	1498e <getTrngSource+0x96>
   14a72:	4b51      	ldr	r3, [pc, #324]	; (14bb8 <getTrngSource+0x2c0>)
   14a74:	fba7 2705 	umull	r2, r7, r7, r5
   14a78:	681a      	ldr	r2, [r3, #0]
   14a7a:	3314      	adds	r3, #20
   14a7c:	9206      	str	r2, [sp, #24]
   14a7e:	f853 2c10 	ldr.w	r2, [r3, #-16]
   14a82:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   14a86:	9207      	str	r2, [sp, #28]
   14a88:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   14a8c:	9208      	str	r2, [sp, #32]
   14a8e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   14a92:	9209      	str	r2, [sp, #36]	; 0x24
   14a94:	f853 2c04 	ldr.w	r2, [r3, #-4]
   14a98:	920a      	str	r2, [sp, #40]	; 0x28
   14a9a:	681b      	ldr	r3, [r3, #0]
   14a9c:	930b      	str	r3, [sp, #44]	; 0x2c
   14a9e:	d102      	bne.n	14aa6 <getTrngSource+0x1ae>
   14aa0:	f1ba 0f00 	cmp.w	sl, #0
   14aa4:	d141      	bne.n	14b2a <getTrngSource+0x232>
   14aa6:	2218      	movs	r2, #24
   14aa8:	4630      	mov	r0, r6
   14aaa:	eb0d 0102 	add.w	r1, sp, r2
   14aae:	f7ff fa19 	bl	13ee4 <CC_PalMemCopyPlat>
   14ab2:	3d18      	subs	r5, #24
   14ab4:	3618      	adds	r6, #24
   14ab6:	f109 0901 	add.w	r9, r9, #1
   14aba:	2d00      	cmp	r5, #0
   14abc:	f47f af53 	bne.w	14966 <getTrngSource+0x6e>
   14ac0:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
   14ac4:	d85d      	bhi.n	14b82 <getTrngSource+0x28a>
   14ac6:	9d03      	ldr	r5, [sp, #12]
   14ac8:	4659      	mov	r1, fp
   14aca:	4628      	mov	r0, r5
   14acc:	6962      	ldr	r2, [r4, #20]
   14ace:	f7ff fe81 	bl	147d4 <LLF_RND_RepetitionCounterTest.part.0>
   14ad2:	2800      	cmp	r0, #0
   14ad4:	d04b      	beq.n	14b6e <getTrngSource+0x276>
   14ad6:	2300      	movs	r3, #0
   14ad8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14ada:	6013      	str	r3, [r2, #0]
   14adc:	4b2d      	ldr	r3, [pc, #180]	; (14b94 <getTrngSource+0x29c>)
   14ade:	4298      	cmp	r0, r3
   14ae0:	f43f af59 	beq.w	14996 <getTrngSource+0x9e>
   14ae4:	9d04      	ldr	r5, [sp, #16]
   14ae6:	2d08      	cmp	r5, #8
   14ae8:	d034      	beq.n	14b54 <getTrngSource+0x25c>
   14aea:	2200      	movs	r2, #0
   14aec:	ab04      	add	r3, sp, #16
   14aee:	4621      	mov	r1, r4
   14af0:	4640      	mov	r0, r8
   14af2:	006d      	lsls	r5, r5, #1
   14af4:	9200      	str	r2, [sp, #0]
   14af6:	9504      	str	r5, [sp, #16]
   14af8:	f7ff fdc2 	bl	14680 <startTrngHW>
   14afc:	4b2f      	ldr	r3, [pc, #188]	; (14bbc <getTrngSource+0x2c4>)
   14afe:	4298      	cmp	r0, r3
   14b00:	d024      	beq.n	14b4c <getTrngSource+0x254>
   14b02:	2800      	cmp	r0, #0
   14b04:	f47f af47 	bne.w	14996 <getTrngSource+0x9e>
   14b08:	f8d8 2000 	ldr.w	r2, [r8]
   14b0c:	0a13      	lsrs	r3, r2, #8
   14b0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   14b12:	4313      	orrs	r3, r2
   14b14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   14b18:	f8c8 3000 	str.w	r3, [r8]
   14b1c:	9b02      	ldr	r3, [sp, #8]
   14b1e:	3b01      	subs	r3, #1
   14b20:	9302      	str	r3, [sp, #8]
   14b22:	f47f af15 	bne.w	14950 <getTrngSource+0x58>
   14b26:	2000      	movs	r0, #0
   14b28:	e735      	b.n	14996 <getTrngSource+0x9e>
   14b2a:	4630      	mov	r0, r6
   14b2c:	4652      	mov	r2, sl
   14b2e:	a906      	add	r1, sp, #24
   14b30:	f7ff f9d8 	bl	13ee4 <CC_PalMemCopyPlat>
   14b34:	eba5 050a 	sub.w	r5, r5, sl
   14b38:	4456      	add	r6, sl
   14b3a:	e7bc      	b.n	14ab6 <getTrngSource+0x1be>
   14b3c:	481f      	ldr	r0, [pc, #124]	; (14bbc <getTrngSource+0x2c4>)
   14b3e:	e726      	b.n	1498e <getTrngSource+0x96>
   14b40:	481f      	ldr	r0, [pc, #124]	; (14bc0 <getTrngSource+0x2c8>)
   14b42:	e724      	b.n	1498e <getTrngSource+0x96>
   14b44:	2703      	movs	r7, #3
   14b46:	e74c      	b.n	149e2 <getTrngSource+0xea>
   14b48:	2702      	movs	r7, #2
   14b4a:	e74a      	b.n	149e2 <getTrngSource+0xea>
   14b4c:	6a23      	ldr	r3, [r4, #32]
   14b4e:	2b00      	cmp	r3, #0
   14b50:	f43f af21 	beq.w	14996 <getTrngSource+0x9e>
   14b54:	481b      	ldr	r0, [pc, #108]	; (14bc4 <getTrngSource+0x2cc>)
   14b56:	e71e      	b.n	14996 <getTrngSource+0x9e>
   14b58:	2201      	movs	r2, #1
   14b5a:	4621      	mov	r1, r4
   14b5c:	4638      	mov	r0, r7
   14b5e:	9600      	str	r6, [sp, #0]
   14b60:	ab04      	add	r3, sp, #16
   14b62:	f7ff fd8d 	bl	14680 <startTrngHW>
   14b66:	2800      	cmp	r0, #0
   14b68:	f43f aee3 	beq.w	14932 <getTrngSource+0x3a>
   14b6c:	e713      	b.n	14996 <getTrngSource+0x9e>
   14b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   14b72:	4659      	mov	r1, fp
   14b74:	4628      	mov	r0, r5
   14b76:	69a2      	ldr	r2, [r4, #24]
   14b78:	f7ff fe58 	bl	1482c <LLF_RND_AdaptiveProportionTest>
   14b7c:	2800      	cmp	r0, #0
   14b7e:	d1aa      	bne.n	14ad6 <getTrngSource+0x1de>
   14b80:	e7d1      	b.n	14b26 <getTrngSource+0x22e>
   14b82:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14b84:	601d      	str	r5, [r3, #0]
   14b86:	e7ad      	b.n	14ae4 <getTrngSource+0x1ec>
   14b88:	50841138 	.word	0x50841138
   14b8c:	50841130 	.word	0x50841130
   14b90:	aaaaaaab 	.word	0xaaaaaaab
   14b94:	00f10c02 	.word	0x00f10c02
   14b98:	00f10c30 	.word	0x00f10c30
   14b9c:	508411c4 	.word	0x508411c4
   14ba0:	5084112c 	.word	0x5084112c
   14ba4:	0ffffffe 	.word	0x0ffffffe
   14ba8:	50841100 	.word	0x50841100
   14bac:	5084110c 	.word	0x5084110c
   14bb0:	50841a04 	.word	0x50841a04
   14bb4:	508411d8 	.word	0x508411d8
   14bb8:	50841114 	.word	0x50841114
   14bbc:	00f10c31 	.word	0x00f10c31
   14bc0:	00f10c35 	.word	0x00f10c35
   14bc4:	00f10c32 	.word	0x00f10c32

00014bc8 <LLF_RND_GetTrngSource>:
   14bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bcc:	4e1f      	ldr	r6, [pc, #124]	; (14c4c <LLF_RND_GetTrngSource+0x84>)
   14bce:	b084      	sub	sp, #16
   14bd0:	4604      	mov	r4, r0
   14bd2:	460d      	mov	r5, r1
   14bd4:	6830      	ldr	r0, [r6, #0]
   14bd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14bda:	4690      	mov	r8, r2
   14bdc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   14bde:	f7ff f9e7 	bl	13fb0 <CC_PalMutexLock>
   14be2:	b9d8      	cbnz	r0, 14c1c <LLF_RND_GetTrngSource+0x54>
   14be4:	2000      	movs	r0, #0
   14be6:	f7ff fa13 	bl	14010 <CC_PalPowerSaveModeSelect>
   14bea:	b9f8      	cbnz	r0, 14c2c <LLF_RND_GetTrngSource+0x64>
   14bec:	2300      	movs	r3, #0
   14bee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14bf0:	4620      	mov	r0, r4
   14bf2:	9200      	str	r2, [sp, #0]
   14bf4:	9302      	str	r3, [sp, #8]
   14bf6:	4642      	mov	r2, r8
   14bf8:	4629      	mov	r1, r5
   14bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14bfc:	9701      	str	r7, [sp, #4]
   14bfe:	f7ff fe7b 	bl	148f8 <getTrngSource>
   14c02:	4604      	mov	r4, r0
   14c04:	2001      	movs	r0, #1
   14c06:	f7ff fa03 	bl	14010 <CC_PalPowerSaveModeSelect>
   14c0a:	b9d0      	cbnz	r0, 14c42 <LLF_RND_GetTrngSource+0x7a>
   14c0c:	6830      	ldr	r0, [r6, #0]
   14c0e:	f7ff f9d7 	bl	13fc0 <CC_PalMutexUnlock>
   14c12:	b978      	cbnz	r0, 14c34 <LLF_RND_GetTrngSource+0x6c>
   14c14:	4620      	mov	r0, r4
   14c16:	b004      	add	sp, #16
   14c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c1c:	480c      	ldr	r0, [pc, #48]	; (14c50 <LLF_RND_GetTrngSource+0x88>)
   14c1e:	f7ff fb5f 	bl	142e0 <CC_PalAbort>
   14c22:	2000      	movs	r0, #0
   14c24:	f7ff f9f4 	bl	14010 <CC_PalPowerSaveModeSelect>
   14c28:	2800      	cmp	r0, #0
   14c2a:	d0df      	beq.n	14bec <LLF_RND_GetTrngSource+0x24>
   14c2c:	4809      	ldr	r0, [pc, #36]	; (14c54 <LLF_RND_GetTrngSource+0x8c>)
   14c2e:	f7ff fb57 	bl	142e0 <CC_PalAbort>
   14c32:	e7db      	b.n	14bec <LLF_RND_GetTrngSource+0x24>
   14c34:	4808      	ldr	r0, [pc, #32]	; (14c58 <LLF_RND_GetTrngSource+0x90>)
   14c36:	f7ff fb53 	bl	142e0 <CC_PalAbort>
   14c3a:	4620      	mov	r0, r4
   14c3c:	b004      	add	sp, #16
   14c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c42:	4806      	ldr	r0, [pc, #24]	; (14c5c <LLF_RND_GetTrngSource+0x94>)
   14c44:	f7ff fb4c 	bl	142e0 <CC_PalAbort>
   14c48:	e7e0      	b.n	14c0c <LLF_RND_GetTrngSource+0x44>
   14c4a:	bf00      	nop
   14c4c:	20000040 	.word	0x20000040
   14c50:	00015cf0 	.word	0x00015cf0
   14c54:	00015d20 	.word	0x00015d20
   14c58:	00015d08 	.word	0x00015d08
   14c5c:	00015d40 	.word	0x00015d40

00014c60 <LLF_RND_RunTrngStartupTest>:
   14c60:	b510      	push	{r4, lr}
   14c62:	2401      	movs	r4, #1
   14c64:	b086      	sub	sp, #24
   14c66:	ab05      	add	r3, sp, #20
   14c68:	e9cd 2401 	strd	r2, r4, [sp, #4]
   14c6c:	9300      	str	r3, [sp, #0]
   14c6e:	2200      	movs	r2, #0
   14c70:	ab04      	add	r3, sp, #16
   14c72:	f7ff fe41 	bl	148f8 <getTrngSource>
   14c76:	b006      	add	sp, #24
   14c78:	bd10      	pop	{r4, pc}
   14c7a:	bf00      	nop

00014c7c <LLF_RND_WaitRngInterrupt>:
   14c7c:	4601      	mov	r1, r0
   14c7e:	b508      	push	{r3, lr}
   14c80:	f44f 6080 	mov.w	r0, #1024	; 0x400
   14c84:	f7ff fa1e 	bl	140c4 <CC_HalWaitInterruptRND>
   14c88:	2300      	movs	r3, #0
   14c8a:	4902      	ldr	r1, [pc, #8]	; (14c94 <LLF_RND_WaitRngInterrupt+0x18>)
   14c8c:	4a02      	ldr	r2, [pc, #8]	; (14c98 <LLF_RND_WaitRngInterrupt+0x1c>)
   14c8e:	600b      	str	r3, [r1, #0]
   14c90:	6013      	str	r3, [r2, #0]
   14c92:	bd08      	pop	{r3, pc}
   14c94:	508411c8 	.word	0x508411c8
   14c98:	5084112c 	.word	0x5084112c

00014c9c <LLF_RND_GetRoscSampleCnt>:
   14c9c:	3801      	subs	r0, #1
   14c9e:	2807      	cmp	r0, #7
   14ca0:	d805      	bhi.n	14cae <LLF_RND_GetRoscSampleCnt+0x12>
   14ca2:	e8df f000 	tbb	[pc, r0]
   14ca6:	0e0a      	.short	0x0e0a
   14ca8:	04041204 	.word	0x04041204
   14cac:	0604      	.short	0x0604
   14cae:	4809      	ldr	r0, [pc, #36]	; (14cd4 <LLF_RND_GetRoscSampleCnt+0x38>)
   14cb0:	4770      	bx	lr
   14cb2:	68cb      	ldr	r3, [r1, #12]
   14cb4:	2000      	movs	r0, #0
   14cb6:	624b      	str	r3, [r1, #36]	; 0x24
   14cb8:	4770      	bx	lr
   14cba:	680b      	ldr	r3, [r1, #0]
   14cbc:	2000      	movs	r0, #0
   14cbe:	624b      	str	r3, [r1, #36]	; 0x24
   14cc0:	4770      	bx	lr
   14cc2:	684b      	ldr	r3, [r1, #4]
   14cc4:	2000      	movs	r0, #0
   14cc6:	624b      	str	r3, [r1, #36]	; 0x24
   14cc8:	4770      	bx	lr
   14cca:	688b      	ldr	r3, [r1, #8]
   14ccc:	2000      	movs	r0, #0
   14cce:	624b      	str	r3, [r1, #36]	; 0x24
   14cd0:	4770      	bx	lr
   14cd2:	bf00      	nop
   14cd4:	00f10c31 	.word	0x00f10c31

00014cd8 <LLF_RND_GetFastestRosc>:
   14cd8:	680b      	ldr	r3, [r1, #0]
   14cda:	e002      	b.n	14ce2 <LLF_RND_GetFastestRosc+0xa>
   14cdc:	2b08      	cmp	r3, #8
   14cde:	600b      	str	r3, [r1, #0]
   14ce0:	d806      	bhi.n	14cf0 <LLF_RND_GetFastestRosc+0x18>
   14ce2:	6a02      	ldr	r2, [r0, #32]
   14ce4:	4213      	tst	r3, r2
   14ce6:	ea4f 0343 	mov.w	r3, r3, lsl #1
   14cea:	d0f7      	beq.n	14cdc <LLF_RND_GetFastestRosc+0x4>
   14cec:	2000      	movs	r0, #0
   14cee:	4770      	bx	lr
   14cf0:	4800      	ldr	r0, [pc, #0]	; (14cf4 <LLF_RND_GetFastestRosc+0x1c>)
   14cf2:	4770      	bx	lr
   14cf4:	00f10c31 	.word	0x00f10c31

00014cf8 <LLF_RND_TurnOffTrng>:
   14cf8:	2300      	movs	r3, #0
   14cfa:	4904      	ldr	r1, [pc, #16]	; (14d0c <LLF_RND_TurnOffTrng+0x14>)
   14cfc:	4a04      	ldr	r2, [pc, #16]	; (14d10 <LLF_RND_TurnOffTrng+0x18>)
   14cfe:	600b      	str	r3, [r1, #0]
   14d00:	f44f 6080 	mov.w	r0, #1024	; 0x400
   14d04:	6013      	str	r3, [r2, #0]
   14d06:	f7ff b9c9 	b.w	1409c <CC_HalClearInterruptBit>
   14d0a:	bf00      	nop
   14d0c:	5084112c 	.word	0x5084112c
   14d10:	508411c4 	.word	0x508411c4

00014d14 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
   14d14:	b508      	push	{r3, lr}
	spm_config();
   14d16:	f7fc ffe3 	bl	11ce0 <spm_config>
	spm_jump();
}
   14d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   14d1e:	f7fc bf73 	b.w	11c08 <spm_jump>

00014d22 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   14d22:	b160      	cbz	r0, 14d3e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   14d24:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   14d26:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   14d2a:	2b01      	cmp	r3, #1
   14d2c:	d003      	beq.n	14d36 <sys_notify_validate+0x14>
   14d2e:	2b03      	cmp	r3, #3
   14d30:	d105      	bne.n	14d3e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   14d32:	6803      	ldr	r3, [r0, #0]
   14d34:	b11b      	cbz	r3, 14d3e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   14d36:	2300      	movs	r3, #0
   14d38:	6083      	str	r3, [r0, #8]
   14d3a:	4618      	mov	r0, r3
   14d3c:	4770      	bx	lr
		return -EINVAL;
   14d3e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   14d42:	4770      	bx	lr

00014d44 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   14d44:	2200      	movs	r2, #0
   14d46:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   14d48:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   14d4a:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
   14d4e:	2b03      	cmp	r3, #3
	sys_notify_generic_callback rv = 0;
   14d50:	bf14      	ite	ne
   14d52:	4613      	movne	r3, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   14d54:	6803      	ldreq	r3, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   14d56:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   14d58:	4618      	mov	r0, r3
   14d5a:	4770      	bx	lr

00014d5c <arch_printk_char_out>:
}
   14d5c:	2000      	movs	r0, #0
   14d5e:	4770      	bx	lr

00014d60 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
   14d60:	b40f      	push	{r0, r1, r2, r3}
   14d62:	b507      	push	{r0, r1, r2, lr}
   14d64:	a904      	add	r1, sp, #16
   14d66:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14d6a:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   14d6c:	f7fb fd16 	bl	1079c <vprintk>
	}
	va_end(ap);
}
   14d70:	b003      	add	sp, #12
   14d72:	f85d eb04 	ldr.w	lr, [sp], #4
   14d76:	b004      	add	sp, #16
   14d78:	4770      	bx	lr

00014d7a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14d7a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   14d7c:	f013 0307 	ands.w	r3, r3, #7
   14d80:	d105      	bne.n	14d8e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   14d82:	6803      	ldr	r3, [r0, #0]
   14d84:	2b00      	cmp	r3, #0
		evt = EVT_START;
   14d86:	bf0c      	ite	eq
   14d88:	2000      	moveq	r0, #0
   14d8a:	2003      	movne	r0, #3
   14d8c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   14d8e:	2b02      	cmp	r3, #2
   14d90:	d105      	bne.n	14d9e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   14d92:	8b43      	ldrh	r3, [r0, #26]
   14d94:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   14d96:	bf14      	ite	ne
   14d98:	2000      	movne	r0, #0
   14d9a:	2004      	moveq	r0, #4
   14d9c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   14d9e:	2b01      	cmp	r3, #1
   14da0:	d105      	bne.n	14dae <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   14da2:	6803      	ldr	r3, [r0, #0]
   14da4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   14da6:	bf0c      	ite	eq
   14da8:	2000      	moveq	r0, #0
   14daa:	2005      	movne	r0, #5
   14dac:	4770      	bx	lr
	int evt = EVT_NOP;
   14dae:	2000      	movs	r0, #0
}
   14db0:	4770      	bx	lr

00014db2 <notify_one>:
{
   14db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14db4:	460d      	mov	r5, r1
   14db6:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   14db8:	4619      	mov	r1, r3
   14dba:	1d28      	adds	r0, r5, #4
{
   14dbc:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   14dbe:	9300      	str	r3, [sp, #0]
   14dc0:	f7ff ffc0 	bl	14d44 <sys_notify_finalize>
	if (cb) {
   14dc4:	4604      	mov	r4, r0
   14dc6:	b140      	cbz	r0, 14dda <notify_one+0x28>
		cb(mgr, cli, state, res);
   14dc8:	e9dd 3200 	ldrd	r3, r2, [sp]
   14dcc:	4629      	mov	r1, r5
   14dce:	4630      	mov	r0, r6
   14dd0:	46a4      	mov	ip, r4
}
   14dd2:	b002      	add	sp, #8
   14dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   14dd8:	4760      	bx	ip
}
   14dda:	b002      	add	sp, #8
   14ddc:	bd70      	pop	{r4, r5, r6, pc}

00014dde <transition_complete>:
{
   14dde:	b410      	push	{r4}
	__asm__ volatile(
   14de0:	f04f 0420 	mov.w	r4, #32
   14de4:	f3ef 8211 	mrs	r2, BASEPRI
   14de8:	f384 8811 	msr	BASEPRI, r4
   14dec:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   14df0:	6141      	str	r1, [r0, #20]
}
   14df2:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   14df6:	2101      	movs	r1, #1
   14df8:	f7fb bcde 	b.w	107b8 <process_event>

00014dfc <validate_args>:
{
   14dfc:	b510      	push	{r4, lr}
   14dfe:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   14e00:	b140      	cbz	r0, 14e14 <validate_args+0x18>
   14e02:	b139      	cbz	r1, 14e14 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   14e04:	1d08      	adds	r0, r1, #4
   14e06:	f7ff ff8c 	bl	14d22 <sys_notify_validate>
	if ((rv == 0)
   14e0a:	b928      	cbnz	r0, 14e18 <validate_args+0x1c>
	    && ((cli->notify.flags
   14e0c:	68a3      	ldr	r3, [r4, #8]
   14e0e:	f033 0303 	bics.w	r3, r3, #3
   14e12:	d001      	beq.n	14e18 <validate_args+0x1c>
		rv = -EINVAL;
   14e14:	f06f 0015 	mvn.w	r0, #21
}
   14e18:	bd10      	pop	{r4, pc}

00014e1a <onoff_manager_init>:
{
   14e1a:	b538      	push	{r3, r4, r5, lr}
   14e1c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   14e1e:	4605      	mov	r5, r0
   14e20:	b158      	cbz	r0, 14e3a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   14e22:	b151      	cbz	r1, 14e3a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   14e24:	680b      	ldr	r3, [r1, #0]
   14e26:	b143      	cbz	r3, 14e3a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   14e28:	684b      	ldr	r3, [r1, #4]
   14e2a:	b133      	cbz	r3, 14e3a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   14e2c:	221c      	movs	r2, #28
   14e2e:	2100      	movs	r1, #0
   14e30:	f000 fb8e 	bl	15550 <memset>
	return 0;
   14e34:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   14e36:	612c      	str	r4, [r5, #16]
}
   14e38:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14e3a:	f06f 0015 	mvn.w	r0, #21
   14e3e:	e7fb      	b.n	14e38 <onoff_manager_init+0x1e>

00014e40 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   14e40:	b570      	push	{r4, r5, r6, lr}
   14e42:	4604      	mov	r4, r0
   14e44:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   14e46:	f7ff ffd9 	bl	14dfc <validate_args>

	if (rv < 0) {
   14e4a:	1e05      	subs	r5, r0, #0
   14e4c:	db31      	blt.n	14eb2 <onoff_request+0x72>
   14e4e:	f04f 0320 	mov.w	r3, #32
   14e52:	f3ef 8111 	mrs	r1, BASEPRI
   14e56:	f383 8811 	msr	BASEPRI, r3
   14e5a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   14e5e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   14e62:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14e64:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   14e66:	42ab      	cmp	r3, r5
   14e68:	f000 0207 	and.w	r2, r0, #7
   14e6c:	d02e      	beq.n	14ecc <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   14e6e:	2a02      	cmp	r2, #2
   14e70:	d10e      	bne.n	14e90 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   14e72:	3301      	adds	r3, #1
   14e74:	8363      	strh	r3, [r4, #26]
	rv = state;
   14e76:	4615      	mov	r5, r2
		notify = true;
   14e78:	2301      	movs	r3, #1
	__asm__ volatile(
   14e7a:	f381 8811 	msr	BASEPRI, r1
   14e7e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   14e82:	b1b3      	cbz	r3, 14eb2 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   14e84:	2300      	movs	r3, #0
   14e86:	4631      	mov	r1, r6
   14e88:	4620      	mov	r0, r4
   14e8a:	f7ff ff92 	bl	14db2 <notify_one>
   14e8e:	e010      	b.n	14eb2 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   14e90:	0783      	lsls	r3, r0, #30
   14e92:	d001      	beq.n	14e98 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   14e94:	2a06      	cmp	r2, #6
   14e96:	d10e      	bne.n	14eb6 <onoff_request+0x76>
	parent->next = child;
   14e98:	2300      	movs	r3, #0
   14e9a:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   14e9c:	6863      	ldr	r3, [r4, #4]
   14e9e:	b993      	cbnz	r3, 14ec6 <onoff_request+0x86>
	list->head = node;
   14ea0:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   14ea4:	4615      	mov	r5, r2
   14ea6:	b962      	cbnz	r2, 14ec2 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   14ea8:	460a      	mov	r2, r1
   14eaa:	4620      	mov	r0, r4
   14eac:	2102      	movs	r1, #2
   14eae:	f7fb fc83 	bl	107b8 <process_event>
		}
	}

	return rv;
}
   14eb2:	4628      	mov	r0, r5
   14eb4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   14eb6:	2a05      	cmp	r2, #5
   14eb8:	bf0c      	ite	eq
   14eba:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   14ebe:	f06f 0504 	mvnne.w	r5, #4
   14ec2:	2300      	movs	r3, #0
   14ec4:	e7d9      	b.n	14e7a <onoff_request+0x3a>
	parent->next = child;
   14ec6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   14ec8:	6066      	str	r6, [r4, #4]
}
   14eca:	e7eb      	b.n	14ea4 <onoff_request+0x64>
		rv = -EAGAIN;
   14ecc:	f06f 050a 	mvn.w	r5, #10
   14ed0:	e7f7      	b.n	14ec2 <onoff_request+0x82>

00014ed2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   14ed2:	4604      	mov	r4, r0
   14ed4:	b508      	push	{r3, lr}
   14ed6:	4608      	mov	r0, r1
   14ed8:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   14eda:	461a      	mov	r2, r3
   14edc:	47a0      	blx	r4
	return z_impl_k_current_get();
   14ede:	f7fe fd79 	bl	139d4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   14ee2:	f7fd fbd5 	bl	12690 <z_impl_k_thread_abort>

00014ee6 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   14ee6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   14ee8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   14eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   14ef0:	bf2c      	ite	cs
   14ef2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   14ef6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   14efa:	4770      	bx	lr

00014efc <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   14efc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   14f00:	6880      	ldr	r0, [r0, #8]
   14f02:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   14f06:	bf2c      	ite	cs
   14f08:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   14f0c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   14f10:	4770      	bx	lr

00014f12 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   14f12:	2201      	movs	r2, #1
{
   14f14:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   14f16:	f7ff ffe6 	bl	14ee6 <chunk_field>
}
   14f1a:	0840      	lsrs	r0, r0, #1
   14f1c:	bd08      	pop	{r3, pc}

00014f1e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   14f1e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   14f20:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   14f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14f28:	d308      	bcc.n	14f3c <set_chunk_used+0x1e>
		if (used) {
   14f2a:	684b      	ldr	r3, [r1, #4]
   14f2c:	b11a      	cbz	r2, 14f36 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   14f2e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   14f32:	604b      	str	r3, [r1, #4]
   14f34:	4770      	bx	lr
   14f36:	f023 0301 	bic.w	r3, r3, #1
   14f3a:	e7fa      	b.n	14f32 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   14f3c:	884b      	ldrh	r3, [r1, #2]
   14f3e:	b11a      	cbz	r2, 14f48 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   14f40:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   14f44:	804b      	strh	r3, [r1, #2]
		}
	}
}
   14f46:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   14f48:	f023 0301 	bic.w	r3, r3, #1
   14f4c:	e7fa      	b.n	14f44 <set_chunk_used+0x26>

00014f4e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   14f4e:	0053      	lsls	r3, r2, #1
   14f50:	2201      	movs	r2, #1
   14f52:	f7ff bfd3 	b.w	14efc <chunk_set>

00014f56 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   14f56:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   14f58:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   14f5a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   14f5e:	bf2c      	ite	cs
   14f60:	2002      	movcs	r0, #2
   14f62:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   14f64:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   14f66:	fab0 f080 	clz	r0, r0
}
   14f6a:	f1c0 001f 	rsb	r0, r0, #31
   14f6e:	4770      	bx	lr

00014f70 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   14f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f74:	4604      	mov	r4, r0
   14f76:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   14f78:	f7ff ffcb 	bl	14f12 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   14f7c:	68a3      	ldr	r3, [r4, #8]
   14f7e:	4601      	mov	r1, r0
   14f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14f84:	d301      	bcc.n	14f8a <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   14f86:	2801      	cmp	r0, #1
   14f88:	d035      	beq.n	14ff6 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   14f8a:	4620      	mov	r0, r4
   14f8c:	f7ff ffe3 	bl	14f56 <bucket_idx>
	if (b->next == 0U) {
   14f90:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   14f94:	6916      	ldr	r6, [r2, #16]
   14f96:	b99e      	cbnz	r6, 14fc0 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   14f98:	2301      	movs	r3, #1
   14f9a:	fa03 f000 	lsl.w	r0, r3, r0
   14f9e:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   14fa0:	4629      	mov	r1, r5
   14fa2:	4303      	orrs	r3, r0
   14fa4:	60e3      	str	r3, [r4, #12]
   14fa6:	4620      	mov	r0, r4
		b->next = c;
   14fa8:	6115      	str	r5, [r2, #16]
   14faa:	462b      	mov	r3, r5
   14fac:	2202      	movs	r2, #2
   14fae:	f7ff ffa5 	bl	14efc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   14fb2:	2203      	movs	r2, #3
   14fb4:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   14fb6:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   14fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14fbc:	f7ff bf9e 	b.w	14efc <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   14fc0:	2202      	movs	r2, #2
   14fc2:	4631      	mov	r1, r6
   14fc4:	4620      	mov	r0, r4
   14fc6:	f7ff ff8e 	bl	14ee6 <chunk_field>
   14fca:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   14fcc:	4603      	mov	r3, r0
   14fce:	2202      	movs	r2, #2
   14fd0:	4629      	mov	r1, r5
   14fd2:	4620      	mov	r0, r4
   14fd4:	f7ff ff92 	bl	14efc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   14fd8:	4633      	mov	r3, r6
   14fda:	2203      	movs	r2, #3
   14fdc:	4629      	mov	r1, r5
   14fde:	4620      	mov	r0, r4
   14fe0:	f7ff ff8c 	bl	14efc <chunk_set>
   14fe4:	2203      	movs	r2, #3
   14fe6:	4639      	mov	r1, r7
   14fe8:	462b      	mov	r3, r5
   14fea:	4620      	mov	r0, r4
   14fec:	f7ff ff86 	bl	14efc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   14ff0:	2202      	movs	r2, #2
   14ff2:	4631      	mov	r1, r6
   14ff4:	e7df      	b.n	14fb6 <free_list_add+0x46>
   14ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014ffa <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   14ffa:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   14ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15000:	bf2c      	ite	cs
   15002:	2508      	movcs	r5, #8
   15004:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   15006:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   15008:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   1500a:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1500c:	1dcc      	adds	r4, r1, #7
   1500e:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   15012:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   15014:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   15018:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1501a:	440d      	add	r5, r1
   1501c:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   15020:	1b2d      	subs	r5, r5, r4
   15022:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   15024:	4629      	mov	r1, r5
   15026:	4620      	mov	r0, r4
	h->len = buf_sz;
   15028:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1502a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1502c:	f7ff ff93 	bl	14f56 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   15030:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   15032:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   15034:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   15036:	361b      	adds	r6, #27
   15038:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   1503a:	f104 0210 	add.w	r2, r4, #16
   1503e:	428b      	cmp	r3, r1
   15040:	db29      	blt.n	15096 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   15042:	4632      	mov	r2, r6
   15044:	4620      	mov	r0, r4
   15046:	2100      	movs	r1, #0
   15048:	f7ff ff81 	bl	14f4e <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1504c:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1504e:	4620      	mov	r0, r4
   15050:	2201      	movs	r2, #1
   15052:	2100      	movs	r1, #0
   15054:	f7ff ff63 	bl	14f1e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   15058:	463a      	mov	r2, r7
   1505a:	4631      	mov	r1, r6
   1505c:	f7ff ff77 	bl	14f4e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   15060:	4633      	mov	r3, r6
   15062:	4631      	mov	r1, r6
   15064:	4620      	mov	r0, r4
   15066:	2200      	movs	r2, #0
   15068:	f7ff ff48 	bl	14efc <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1506c:	4629      	mov	r1, r5
   1506e:	4620      	mov	r0, r4
   15070:	2200      	movs	r2, #0
   15072:	f7ff ff6c 	bl	14f4e <set_chunk_size>
   15076:	463b      	mov	r3, r7
   15078:	4629      	mov	r1, r5
   1507a:	4620      	mov	r0, r4
   1507c:	2200      	movs	r2, #0
   1507e:	f7ff ff3d 	bl	14efc <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   15082:	4629      	mov	r1, r5
   15084:	4620      	mov	r0, r4
   15086:	2201      	movs	r2, #1
   15088:	f7ff ff49 	bl	14f1e <set_chunk_used>

	free_list_add(h, chunk0_size);
   1508c:	4631      	mov	r1, r6
}
   1508e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   15092:	f7ff bf6d 	b.w	14f70 <free_list_add>
		h->buckets[i].next = 0;
   15096:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1509a:	3301      	adds	r3, #1
   1509c:	e7cf      	b.n	1503e <sys_heap_init+0x44>

0001509e <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1509e:	2100      	movs	r1, #0
{
   150a0:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   150a2:	e9d0 6500 	ldrd	r6, r5, [r0]
   150a6:	0872      	lsrs	r2, r6, #1
   150a8:	f006 0301 	and.w	r3, r6, #1
   150ac:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   150b0:	189b      	adds	r3, r3, r2
   150b2:	ea4f 0455 	mov.w	r4, r5, lsr #1
   150b6:	eb44 0101 	adc.w	r1, r4, r1
   150ba:	e9c0 3100 	strd	r3, r1, [r0]
}
   150be:	bd70      	pop	{r4, r5, r6, pc}

000150c0 <_ldiv5>:
	__asm__ ("" : "+r" (m));
   150c0:	f04f 3133 	mov.w	r1, #858993459	; 0x33333333
	result = ((uint64_t)(m * 3U) << 32) | (m * 3U);
   150c4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
{
   150c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t v_lo = *v;
   150cc:	e9d0 2400 	ldrd	r2, r4, [r0]
	result = ((uint64_t)(m * 3U) << 32) | (m * 3U);
   150d0:	461d      	mov	r5, r3
	result >>= 32;
   150d2:	2700      	movs	r7, #0
	result += (uint64_t)v_lo * m;
   150d4:	fba2 8901 	umull	r8, r9, r2, r1
   150d8:	eb18 0505 	adds.w	r5, r8, r5
	result += (uint64_t)v_hi * m;
   150dc:	fba4 4501 	umull	r4, r5, r4, r1
	result += (uint64_t)v_lo * m;
   150e0:	eb49 0603 	adc.w	r6, r9, r3
	result += (uint64_t)v_hi * m;
   150e4:	eb18 0204 	adds.w	r2, r8, r4
   150e8:	eb49 0105 	adc.w	r1, r9, r5
   150ec:	1992      	adds	r2, r2, r6
	result >>= 32;
   150ee:	463a      	mov	r2, r7
	result += (uint64_t)v_hi * m;
   150f0:	eb47 0101 	adc.w	r1, r7, r1
	result += (uint64_t)v_hi * m;
   150f4:	1863      	adds	r3, r4, r1
   150f6:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   150fa:	e9c0 3200 	strd	r3, r2, [r0]
}
   150fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00015102 <_get_digit>:
	if (*digit_count > 0) {
   15102:	680b      	ldr	r3, [r1, #0]
{
   15104:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   15106:	2b00      	cmp	r3, #0
   15108:	dd10      	ble.n	1512c <_get_digit+0x2a>
		--*digit_count;
   1510a:	3b01      	subs	r3, #1
   1510c:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   1510e:	210a      	movs	r1, #10
   15110:	6802      	ldr	r2, [r0, #0]
   15112:	6844      	ldr	r4, [r0, #4]
   15114:	fba2 5601 	umull	r5, r6, r2, r1
   15118:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   1511c:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   15120:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   15124:	0f31      	lsrs	r1, r6, #28
   15126:	3130      	adds	r1, #48	; 0x30
}
   15128:	4608      	mov	r0, r1
   1512a:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1512c:	2130      	movs	r1, #48	; 0x30
   1512e:	e7fb      	b.n	15128 <_get_digit+0x26>

00015130 <encode_uint>:
{
   15130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15134:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   15136:	78d3      	ldrb	r3, [r2, #3]
{
   15138:	4614      	mov	r4, r2
	switch (specifier) {
   1513a:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1513c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   15140:	4606      	mov	r6, r0
   15142:	460f      	mov	r7, r1
   15144:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   15146:	d02d      	beq.n	151a4 <encode_uint+0x74>
   15148:	d828      	bhi.n	1519c <encode_uint+0x6c>
		return 16;
   1514a:	2b58      	cmp	r3, #88	; 0x58
   1514c:	bf14      	ite	ne
   1514e:	250a      	movne	r5, #10
   15150:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   15152:	46aa      	mov	sl, r5
   15154:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   15158:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1515c:	4652      	mov	r2, sl
   1515e:	465b      	mov	r3, fp
   15160:	4630      	mov	r0, r6
   15162:	4639      	mov	r1, r7
   15164:	f7fb f96a 	bl	1043c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   15168:	2a09      	cmp	r2, #9
   1516a:	b2d3      	uxtb	r3, r2
   1516c:	d81f      	bhi.n	151ae <encode_uint+0x7e>
   1516e:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   15170:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   15172:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   15174:	bf08      	it	eq
   15176:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   15178:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1517c:	d301      	bcc.n	15182 <encode_uint+0x52>
   1517e:	45c8      	cmp	r8, r9
   15180:	d812      	bhi.n	151a8 <encode_uint+0x78>
	if (conv->flag_hash) {
   15182:	7823      	ldrb	r3, [r4, #0]
   15184:	069b      	lsls	r3, r3, #26
   15186:	d505      	bpl.n	15194 <encode_uint+0x64>
		if (radix == 8) {
   15188:	2d08      	cmp	r5, #8
   1518a:	d116      	bne.n	151ba <encode_uint+0x8a>
			conv->altform_0 = true;
   1518c:	78a3      	ldrb	r3, [r4, #2]
   1518e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   15192:	70a3      	strb	r3, [r4, #2]
}
   15194:	4640      	mov	r0, r8
   15196:	b003      	add	sp, #12
   15198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1519c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   151a0:	2b70      	cmp	r3, #112	; 0x70
   151a2:	e7d3      	b.n	1514c <encode_uint+0x1c>
	switch (specifier) {
   151a4:	2508      	movs	r5, #8
   151a6:	e7d4      	b.n	15152 <encode_uint+0x22>
		value /= radix;
   151a8:	4606      	mov	r6, r0
   151aa:	460f      	mov	r7, r1
   151ac:	e7d6      	b.n	1515c <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   151ae:	9a01      	ldr	r2, [sp, #4]
   151b0:	2a19      	cmp	r2, #25
   151b2:	bf94      	ite	ls
   151b4:	3337      	addls	r3, #55	; 0x37
   151b6:	3357      	addhi	r3, #87	; 0x57
   151b8:	e7da      	b.n	15170 <encode_uint+0x40>
		} else if (radix == 16) {
   151ba:	2d10      	cmp	r5, #16
   151bc:	d1ea      	bne.n	15194 <encode_uint+0x64>
			conv->altform_0c = true;
   151be:	78a3      	ldrb	r3, [r4, #2]
   151c0:	f043 0310 	orr.w	r3, r3, #16
   151c4:	e7e5      	b.n	15192 <encode_uint+0x62>

000151c6 <outs>:
{
   151c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   151ca:	4680      	mov	r8, r0
   151cc:	4689      	mov	r9, r1
   151ce:	4616      	mov	r6, r2
   151d0:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   151d2:	4615      	mov	r5, r2
   151d4:	42bd      	cmp	r5, r7
   151d6:	eba5 0406 	sub.w	r4, r5, r6
   151da:	d305      	bcc.n	151e8 <outs+0x22>
   151dc:	b10f      	cbz	r7, 151e2 <outs+0x1c>
	return (int)count;
   151de:	4620      	mov	r0, r4
   151e0:	e008      	b.n	151f4 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   151e2:	782b      	ldrb	r3, [r5, #0]
   151e4:	2b00      	cmp	r3, #0
   151e6:	d0fa      	beq.n	151de <outs+0x18>
		int rc = out((int)*sp++, ctx);
   151e8:	4649      	mov	r1, r9
   151ea:	f815 0b01 	ldrb.w	r0, [r5], #1
   151ee:	47c0      	blx	r8
		if (rc < 0) {
   151f0:	2800      	cmp	r0, #0
   151f2:	daef      	bge.n	151d4 <outs+0xe>
}
   151f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000151f8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   151f8:	4770      	bx	lr

000151fa <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   151fa:	f7fd bcb5 	b.w	12b68 <SystemInit>

000151fe <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   151fe:	b2cb      	uxtb	r3, r1
   15200:	210c      	movs	r1, #12
   15202:	68c2      	ldr	r2, [r0, #12]
   15204:	fb03 2101 	mla	r1, r3, r1, r2
   15208:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1520a:	f000 0007 	and.w	r0, r0, #7
   1520e:	4770      	bx	lr

00015210 <set_off_state>:
	__asm__ volatile(
   15210:	f04f 0320 	mov.w	r3, #32
   15214:	f3ef 8211 	mrs	r2, BASEPRI
   15218:	f383 8811 	msr	BASEPRI, r3
   1521c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   15220:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   15222:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   15226:	d001      	beq.n	1522c <set_off_state+0x1c>
   15228:	428b      	cmp	r3, r1
   1522a:	d107      	bne.n	1523c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1522c:	2301      	movs	r3, #1
   1522e:	6003      	str	r3, [r0, #0]
	int err = 0;
   15230:	2000      	movs	r0, #0
	__asm__ volatile(
   15232:	f382 8811 	msr	BASEPRI, r2
   15236:	f3bf 8f6f 	isb	sy
}
   1523a:	4770      	bx	lr
		err = -EPERM;
   1523c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15240:	e7f7      	b.n	15232 <set_off_state+0x22>

00015242 <set_starting_state>:
{
   15242:	b510      	push	{r4, lr}
	__asm__ volatile(
   15244:	f04f 0320 	mov.w	r3, #32
   15248:	f3ef 8211 	mrs	r2, BASEPRI
   1524c:	f383 8811 	msr	BASEPRI, r3
   15250:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   15254:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   15256:	f003 0407 	and.w	r4, r3, #7
   1525a:	2c01      	cmp	r4, #1
   1525c:	d106      	bne.n	1526c <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1525e:	6001      	str	r1, [r0, #0]
	int err = 0;
   15260:	2000      	movs	r0, #0
	__asm__ volatile(
   15262:	f382 8811 	msr	BASEPRI, r2
   15266:	f3bf 8f6f 	isb	sy
}
   1526a:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1526c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   15270:	428b      	cmp	r3, r1
		err = -EALREADY;
   15272:	bf14      	ite	ne
   15274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   15278:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   1527c:	e7f1      	b.n	15262 <set_starting_state+0x20>

0001527e <set_on_state>:
	__asm__ volatile(
   1527e:	f04f 0320 	mov.w	r3, #32
   15282:	f3ef 8211 	mrs	r2, BASEPRI
   15286:	f383 8811 	msr	BASEPRI, r3
   1528a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1528e:	6803      	ldr	r3, [r0, #0]
   15290:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15294:	f043 0302 	orr.w	r3, r3, #2
   15298:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1529a:	f382 8811 	msr	BASEPRI, r2
   1529e:	f3bf 8f6f 	isb	sy
}
   152a2:	4770      	bx	lr

000152a4 <onoff_started_callback>:
{
   152a4:	b410      	push	{r4}
	notify(mgr, 0);
   152a6:	241c      	movs	r4, #28
	return &data->mgr[type];
   152a8:	68c0      	ldr	r0, [r0, #12]
   152aa:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   152ac:	fb03 0004 	mla	r0, r3, r4, r0
   152b0:	2100      	movs	r1, #0
}
   152b2:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   152b6:	4710      	bx	r2

000152b8 <blocking_start_callback>:
{
   152b8:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   152ba:	f7fe bb91 	b.w	139e0 <z_impl_k_sem_give>

000152be <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   152be:	2000      	movs	r0, #0
   152c0:	f7fd bd4e 	b.w	12d60 <nrfx_clock_stop>

000152c4 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   152c4:	2000      	movs	r0, #0
   152c6:	f7fd bd19 	b.w	12cfc <nrfx_clock_start>

000152ca <api_stop>:
{
   152ca:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   152cc:	230c      	movs	r3, #12
   152ce:	b2cc      	uxtb	r4, r1
   152d0:	4363      	muls	r3, r4
{
   152d2:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   152d4:	68c0      	ldr	r0, [r0, #12]
   152d6:	3340      	adds	r3, #64	; 0x40
   152d8:	2180      	movs	r1, #128	; 0x80
   152da:	4418      	add	r0, r3
   152dc:	f7ff ff98 	bl	15210 <set_off_state>
	if (err < 0) {
   152e0:	2800      	cmp	r0, #0
   152e2:	db05      	blt.n	152f0 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   152e4:	6869      	ldr	r1, [r5, #4]
   152e6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   152ea:	6863      	ldr	r3, [r4, #4]
   152ec:	4798      	blx	r3
	return 0;
   152ee:	2000      	movs	r0, #0
}
   152f0:	bd38      	pop	{r3, r4, r5, pc}

000152f2 <api_start>:
{
   152f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	err = set_starting_state(&subdata->flags, ctx);
   152f6:	270c      	movs	r7, #12
   152f8:	b2cd      	uxtb	r5, r1
   152fa:	436f      	muls	r7, r5
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   152fc:	68c4      	ldr	r4, [r0, #12]
{
   152fe:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   15300:	f107 0040 	add.w	r0, r7, #64	; 0x40
   15304:	2180      	movs	r1, #128	; 0x80
   15306:	4420      	add	r0, r4
{
   15308:	4690      	mov	r8, r2
   1530a:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   1530c:	f7ff ff99 	bl	15242 <set_starting_state>
	if (err < 0) {
   15310:	2800      	cmp	r0, #0
   15312:	db07      	blt.n	15324 <api_start+0x32>
	subdata->cb = cb;
   15314:	443c      	add	r4, r7
	subdata->user_data = user_data;
   15316:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1531a:	6873      	ldr	r3, [r6, #4]
   1531c:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   15320:	4798      	blx	r3
	return 0;
   15322:	2000      	movs	r0, #0
}
   15324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015328 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   15328:	4770      	bx	lr

0001532a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1532a:	4770      	bx	lr

0001532c <sys_clock_disable>:
   1532c:	4770      	bx	lr

0001532e <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
   1532e:	2300      	movs	r3, #0
{
   15330:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
   15332:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
   15334:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
   15338:	f7fe fee2 	bl	14100 <mbedtls_platform_setup>
}
   1533c:	b003      	add	sp, #12
   1533e:	f85d fb04 	ldr.w	pc, [sp], #4

00015342 <__acle_se_spm_request_random_number_nse>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   15342:	2990      	cmp	r1, #144	; 0x90
{
   15344:	b508      	push	{r3, lr}
   15346:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   15348:	d139      	bne.n	153be <__acle_se_spm_request_random_number_nse+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
   1534a:	460a      	mov	r2, r1
   1534c:	4601      	mov	r1, r0
   1534e:	2000      	movs	r0, #0
   15350:	f7fe fee2 	bl	14118 <mbedtls_hardware_poll>
}
   15354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15358:	4671      	mov	r1, lr
   1535a:	4672      	mov	r2, lr
   1535c:	4673      	mov	r3, lr
   1535e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   15362:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   15366:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   1536a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   1536e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   15372:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   15376:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   1537a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   1537e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   15382:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   15386:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   1538a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1538e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   15392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   15396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1539a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1539e:	f38e 8c00 	msr	CPSR_fs, lr
   153a2:	b410      	push	{r4}
   153a4:	eef1 ca10 	vmrs	ip, fpscr
   153a8:	f64f 7460 	movw	r4, #65376	; 0xff60
   153ac:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   153b0:	ea0c 0c04 	and.w	ip, ip, r4
   153b4:	eee1 ca10 	vmsr	fpscr, ip
   153b8:	bc10      	pop	{r4}
   153ba:	46f4      	mov	ip, lr
   153bc:	4774      	bxns	lr
		return -EINVAL;
   153be:	f06f 0015 	mvn.w	r0, #21
   153c2:	e7c7      	b.n	15354 <__acle_se_spm_request_random_number_nse+0x12>

000153c4 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   153c4:	2000      	movs	r0, #0
   153c6:	f7fc b91b 	b.w	11600 <sys_reboot>

000153ca <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   153ca:	2100      	movs	r1, #0
   153cc:	2001      	movs	r0, #1
   153ce:	f000 b832 	b.w	15436 <z_arm_fatal_error>

000153d2 <irq_target_state_set>:
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
   153d2:	b243      	sxtb	r3, r0
   153d4:	b9c9      	cbnz	r1, 1540a <irq_target_state_set+0x38>
  if ((int32_t)(IRQn) >= 0)
   153d6:	2b00      	cmp	r3, #0
   153d8:	db15      	blt.n	15406 <irq_target_state_set+0x34>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   153da:	2101      	movs	r1, #1
   153dc:	095b      	lsrs	r3, r3, #5
   153de:	009b      	lsls	r3, r3, #2
   153e0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   153e4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   153e8:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
   153ec:	f000 001f 	and.w	r0, r0, #31
   153f0:	4081      	lsls	r1, r0
   153f2:	ea22 0201 	bic.w	r2, r2, r1
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   153f6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   153fa:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   153fe:	40c1      	lsrs	r1, r0
   15400:	f001 0101 	and.w	r1, r1, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
   15404:	b2c9      	uxtb	r1, r1
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
	}
}
   15406:	4608      	mov	r0, r1
   15408:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   1540a:	2b00      	cmp	r3, #0
   1540c:	db0d      	blt.n	1542a <irq_target_state_set+0x58>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   1540e:	2201      	movs	r2, #1
   15410:	095b      	lsrs	r3, r3, #5
   15412:	009b      	lsls	r3, r3, #2
   15414:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   15418:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1541c:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   15420:	f000 001f 	and.w	r0, r0, #31
   15424:	4082      	lsls	r2, r0
   15426:	430a      	orrs	r2, r1
   15428:	e7e5      	b.n	153f6 <irq_target_state_set+0x24>
		return IRQ_TARGET_STATE_SECURE;
   1542a:	2100      	movs	r1, #0
   1542c:	e7eb      	b.n	15406 <irq_target_state_set+0x34>

0001542e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1542e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   15430:	f383 880b 	msr	PSPLIM, r3
}
   15434:	4770      	bx	lr

00015436 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   15436:	f000 b8c9 	b.w	155cc <z_fatal_error>

0001543a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1543a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1543c:	6800      	ldr	r0, [r0, #0]
   1543e:	f000 b8c5 	b.w	155cc <z_fatal_error>

00015442 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   15442:	b508      	push	{r3, lr}
	handler();
   15444:	f7fc ff28 	bl	12298 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   15448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1544c:	f7fd b8be 	b.w	125cc <z_arm_exc_exit>

00015450 <mpu_configure_region>:
{
   15450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   15452:	890a      	ldrh	r2, [r1, #8]
   15454:	7a8e      	ldrb	r6, [r1, #10]
	region_conf.base = new_region->start;
   15456:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   15458:	684d      	ldr	r5, [r1, #4]
   1545a:	f002 021f 	and.w	r2, r2, #31
   1545e:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   15462:	9300      	str	r3, [sp, #0]
   15464:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   15468:	f023 031f 	bic.w	r3, r3, #31
   1546c:	1e6a      	subs	r2, r5, #1
   1546e:	4413      	add	r3, r2
   15470:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   15474:	280f      	cmp	r0, #15
   15476:	9303      	str	r3, [sp, #12]
   15478:	d804      	bhi.n	15484 <mpu_configure_region+0x34>
	region_init(index, region_conf);
   1547a:	4669      	mov	r1, sp
   1547c:	f7fd f954 	bl	12728 <region_init>
}
   15480:	b004      	add	sp, #16
   15482:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15484:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
   15488:	e7fa      	b.n	15480 <mpu_configure_region+0x30>

0001548a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1548a:	e840 f000 	tt	r0, r0
   1548e:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   15490:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   15494:	bf14      	ite	ne
   15496:	4618      	movne	r0, r3
   15498:	f06f 0015 	mvneq.w	r0, #21
   1549c:	4770      	bx	lr

0001549e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1549e:	4603      	mov	r3, r0
	size_t n = 0;
   154a0:	2000      	movs	r0, #0

	while (*s != '\0') {
   154a2:	5c1a      	ldrb	r2, [r3, r0]
   154a4:	b902      	cbnz	r2, 154a8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   154a6:	4770      	bx	lr
		n++;
   154a8:	3001      	adds	r0, #1
   154aa:	e7fa      	b.n	154a2 <strlen+0x4>

000154ac <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   154ac:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   154ae:	b15a      	cbz	r2, 154c8 <memcmp+0x1c>
   154b0:	3901      	subs	r1, #1
   154b2:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   154b4:	f810 2b01 	ldrb.w	r2, [r0], #1
   154b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   154bc:	42a0      	cmp	r0, r4
   154be:	d001      	beq.n	154c4 <memcmp+0x18>
   154c0:	429a      	cmp	r2, r3
   154c2:	d0f7      	beq.n	154b4 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   154c4:	1ad0      	subs	r0, r2, r3
}
   154c6:	bd10      	pop	{r4, pc}
		return 0;
   154c8:	4610      	mov	r0, r2
   154ca:	e7fc      	b.n	154c6 <memcmp+0x1a>

000154cc <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   154cc:	1a43      	subs	r3, r0, r1
   154ce:	4293      	cmp	r3, r2
{
   154d0:	b510      	push	{r4, lr}
   154d2:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   154d6:	d308      	bcc.n	154ea <memmove+0x1e>
	char *dest = d;
   154d8:	4602      	mov	r2, r0
   154da:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   154dc:	429a      	cmp	r2, r3
   154de:	d00b      	beq.n	154f8 <memmove+0x2c>
			*dest = *src;
   154e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   154e4:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   154e8:	e7f8      	b.n	154dc <memmove+0x10>
   154ea:	440a      	add	r2, r1
			dest[n] = src[n];
   154ec:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   154f0:	428a      	cmp	r2, r1
			dest[n] = src[n];
   154f2:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   154f6:	d1f9      	bne.n	154ec <memmove+0x20>
		}
	}

	return d;
}
   154f8:	bd10      	pop	{r4, pc}

000154fa <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   154fa:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   154fc:	ea81 0400 	eor.w	r4, r1, r0
   15500:	07a5      	lsls	r5, r4, #30
   15502:	4603      	mov	r3, r0
   15504:	d00b      	beq.n	1551e <memcpy+0x24>
   15506:	3b01      	subs	r3, #1
   15508:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1550a:	4291      	cmp	r1, r2
   1550c:	d11b      	bne.n	15546 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1550e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   15510:	2a00      	cmp	r2, #0
   15512:	d0fc      	beq.n	1550e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   15514:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   15518:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1551a:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1551e:	079c      	lsls	r4, r3, #30
   15520:	d1f6      	bne.n	15510 <memcpy+0x16>
   15522:	f022 0403 	bic.w	r4, r2, #3
   15526:	1f1d      	subs	r5, r3, #4
   15528:	0896      	lsrs	r6, r2, #2
   1552a:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1552c:	42b9      	cmp	r1, r7
   1552e:	d105      	bne.n	1553c <memcpy+0x42>
   15530:	f06f 0503 	mvn.w	r5, #3
   15534:	4423      	add	r3, r4
   15536:	fb05 2206 	mla	r2, r5, r6, r2
   1553a:	e7e4      	b.n	15506 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1553c:	f851 cb04 	ldr.w	ip, [r1], #4
   15540:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   15544:	e7f2      	b.n	1552c <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   15546:	f811 4b01 	ldrb.w	r4, [r1], #1
   1554a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1554e:	e7dc      	b.n	1550a <memcpy+0x10>

00015550 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   15550:	4603      	mov	r3, r0
{
   15552:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   15554:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   15556:	079c      	lsls	r4, r3, #30
   15558:	d111      	bne.n	1557e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1555a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1555e:	f022 0603 	bic.w	r6, r2, #3
   15562:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   15566:	441e      	add	r6, r3
   15568:	0894      	lsrs	r4, r2, #2
   1556a:	42b3      	cmp	r3, r6
   1556c:	d10d      	bne.n	1558a <memset+0x3a>
   1556e:	f06f 0503 	mvn.w	r5, #3
   15572:	fb05 2204 	mla	r2, r5, r4, r2
   15576:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   15578:	4293      	cmp	r3, r2
   1557a:	d109      	bne.n	15590 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1557c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1557e:	2a00      	cmp	r2, #0
   15580:	d0fc      	beq.n	1557c <memset+0x2c>
		*(d_byte++) = c_byte;
   15582:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   15586:	3a01      	subs	r2, #1
   15588:	e7e5      	b.n	15556 <memset+0x6>
		*(d_word++) = c_word;
   1558a:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1558e:	e7ec      	b.n	1556a <memset+0x1a>
		*(d_byte++) = c_byte;
   15590:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   15594:	e7f0      	b.n	15578 <memset+0x28>

00015596 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   15596:	2000      	movs	r0, #0
{
   15598:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
   1559a:	f7fd f825 	bl	125e8 <sys_arch_reboot>

0001559e <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
   1559e:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   155a0:	f7fc fcfe 	bl	11fa0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   155a4:	f7fc fd80 	bl	120a8 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
   155a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   155ac:	f7fe be6a 	b.w	14284 <nrf_cc3xx_platform_init_no_rng>

000155b0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   155b0:	4700      	bx	r0

000155b2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   155b2:	f000 b8fd 	b.w	157b0 <z_impl_k_busy_wait>

000155b6 <nrfx_clock_enable>:
{
   155b6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   155b8:	2005      	movs	r0, #5
   155ba:	f7fc fdf1 	bl	121a0 <arch_irq_is_enabled>
   155be:	b920      	cbnz	r0, 155ca <nrfx_clock_enable+0x14>
}
   155c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   155c4:	2005      	movs	r0, #5
   155c6:	f7fc bddb 	b.w	12180 <arch_irq_enable>
   155ca:	bd08      	pop	{r3, pc}

000155cc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   155cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   155ce:	4605      	mov	r5, r0
   155d0:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   155d2:	f04f 0320 	mov.w	r3, #32
   155d6:	f3ef 8611 	mrs	r6, BASEPRI
   155da:	f383 8811 	msr	BASEPRI, r3
   155de:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   155e2:	f7fe f9f7 	bl	139d4 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   155e6:	9901      	ldr	r1, [sp, #4]
   155e8:	4604      	mov	r4, r0
   155ea:	4628      	mov	r0, r5
   155ec:	f7ff ffd3 	bl	15596 <k_sys_fatal_error_handler>
	__asm__ volatile(
   155f0:	f386 8811 	msr	BASEPRI, r6
   155f4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   155f8:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   155fa:	b002      	add	sp, #8
   155fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15600:	f7fd b846 	b.w	12690 <z_impl_k_thread_abort>

00015604 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   15604:	f7ff be91 	b.w	1532a <z_clock_idle_exit>

00015608 <k_mem_slab_init>:
{
   15608:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1560a:	2400      	movs	r4, #0
   1560c:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1560e:	ea41 0402 	orr.w	r4, r1, r2
   15612:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   15616:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1561a:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1561c:	d10c      	bne.n	15638 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1561e:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   15620:	42a3      	cmp	r3, r4
   15622:	d103      	bne.n	1562c <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   15624:	e9c0 0000 	strd	r0, r0, [r0]
}
   15628:	2000      	movs	r0, #0
}
   1562a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1562c:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1562e:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   15630:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   15632:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   15634:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   15636:	e7f3      	b.n	15620 <k_mem_slab_init+0x18>
		return -EINVAL;
   15638:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1563c:	e7f5      	b.n	1562a <k_mem_slab_init+0x22>

0001563e <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   1563e:	2300      	movs	r3, #0
   15640:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   15644:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   15648:	4618      	mov	r0, r3
   1564a:	4770      	bx	lr

0001564c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1564c:	4603      	mov	r3, r0
   1564e:	b920      	cbnz	r0, 1565a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15650:	f3ef 8205 	mrs	r2, IPSR
   15654:	b90a      	cbnz	r2, 1565a <z_reschedule_irqlock+0xe>
   15656:	f7fc bd3d 	b.w	120d4 <arch_swap>
   1565a:	f383 8811 	msr	BASEPRI, r3
   1565e:	f3bf 8f6f 	isb	sy
}
   15662:	4770      	bx	lr

00015664 <z_reschedule_unlocked>:
	__asm__ volatile(
   15664:	f04f 0320 	mov.w	r3, #32
   15668:	f3ef 8011 	mrs	r0, BASEPRI
   1566c:	f383 8811 	msr	BASEPRI, r3
   15670:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   15674:	f7ff bfea 	b.w	1564c <z_reschedule_irqlock>

00015678 <unpend_thread_no_timeout>:
{
   15678:	4601      	mov	r1, r0
   1567a:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1567c:	6880      	ldr	r0, [r0, #8]
   1567e:	f7fd fe87 	bl	13390 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15682:	7b4b      	ldrb	r3, [r1, #13]
   15684:	f023 0302 	bic.w	r3, r3, #2
   15688:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   1568a:	2300      	movs	r3, #0
   1568c:	608b      	str	r3, [r1, #8]
}
   1568e:	bd08      	pop	{r3, pc}

00015690 <z_priq_dumb_best>:
	return list->head == list;
   15690:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15692:	4298      	cmp	r0, r3
   15694:	d004      	beq.n	156a0 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   15696:	2b00      	cmp	r3, #0
   15698:	bf38      	it	cc
   1569a:	2300      	movcc	r3, #0
   1569c:	4618      	mov	r0, r3
   1569e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   156a0:	2000      	movs	r0, #0
}
   156a2:	4770      	bx	lr

000156a4 <z_ready_thread>:
{
   156a4:	b510      	push	{r4, lr}
   156a6:	f04f 0320 	mov.w	r3, #32
   156aa:	f3ef 8411 	mrs	r4, BASEPRI
   156ae:	f383 8811 	msr	BASEPRI, r3
   156b2:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   156b6:	f7fd fec5 	bl	13444 <ready_thread>
	__asm__ volatile(
   156ba:	f384 8811 	msr	BASEPRI, r4
   156be:	f3bf 8f6f 	isb	sy
}
   156c2:	bd10      	pop	{r4, pc}

000156c4 <z_thread_timeout>:
{
   156c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   156c6:	4604      	mov	r4, r0
	__asm__ volatile(
   156c8:	f04f 0320 	mov.w	r3, #32
   156cc:	f3ef 8511 	mrs	r5, BASEPRI
   156d0:	f383 8811 	msr	BASEPRI, r3
   156d4:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   156d8:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   156dc:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   156de:	b11b      	cbz	r3, 156e8 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   156e0:	9001      	str	r0, [sp, #4]
   156e2:	f7ff ffc9 	bl	15678 <unpend_thread_no_timeout>
   156e6:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   156e8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   156ec:	f023 0314 	bic.w	r3, r3, #20
   156f0:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   156f4:	f7fd fea6 	bl	13444 <ready_thread>
	__asm__ volatile(
   156f8:	f385 8811 	msr	BASEPRI, r5
   156fc:	f3bf 8f6f 	isb	sy
}
   15700:	b003      	add	sp, #12
   15702:	bd30      	pop	{r4, r5, pc}

00015704 <add_to_waitq_locked>:
{
   15704:	b538      	push	{r3, r4, r5, lr}
   15706:	4604      	mov	r4, r0
   15708:	460d      	mov	r5, r1
	unready_thread(thread);
   1570a:	f7fe f823 	bl	13754 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1570e:	7b63      	ldrb	r3, [r4, #13]
   15710:	f043 0302 	orr.w	r3, r3, #2
   15714:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   15716:	b1c5      	cbz	r5, 1574a <add_to_waitq_locked+0x46>
	return list->head == list;
   15718:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1571a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1571c:	429d      	cmp	r5, r3
   1571e:	bf08      	it	eq
   15720:	2300      	moveq	r3, #0
   15722:	2b00      	cmp	r3, #0
   15724:	bf38      	it	cc
   15726:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15728:	b183      	cbz	r3, 1574c <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   1572a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1572e:	f993 200e 	ldrsb.w	r2, [r3, #14]
   15732:	4291      	cmp	r1, r2
   15734:	db04      	blt.n	15740 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   15736:	686a      	ldr	r2, [r5, #4]
   15738:	429a      	cmp	r2, r3
   1573a:	d007      	beq.n	1574c <add_to_waitq_locked+0x48>
   1573c:	681b      	ldr	r3, [r3, #0]
   1573e:	e7f3      	b.n	15728 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   15740:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   15742:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   15746:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   15748:	605c      	str	r4, [r3, #4]
}
   1574a:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   1574c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1574e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   15750:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   15752:	686b      	ldr	r3, [r5, #4]
   15754:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15756:	606c      	str	r4, [r5, #4]
   15758:	e7f7      	b.n	1574a <add_to_waitq_locked+0x46>

0001575a <z_unpend_first_thread>:
{
   1575a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1575c:	f04f 0320 	mov.w	r3, #32
   15760:	f3ef 8211 	mrs	r2, BASEPRI
   15764:	f383 8811 	msr	BASEPRI, r3
   15768:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1576c:	f7ff ff90 	bl	15690 <z_priq_dumb_best>
   15770:	4604      	mov	r4, r0
	__asm__ volatile(
   15772:	f382 8811 	msr	BASEPRI, r2
   15776:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1577a:	b188      	cbz	r0, 157a0 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   1577c:	f04f 0320 	mov.w	r3, #32
   15780:	f3ef 8511 	mrs	r5, BASEPRI
   15784:	f383 8811 	msr	BASEPRI, r3
   15788:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1578c:	f7ff ff74 	bl	15678 <unpend_thread_no_timeout>
	__asm__ volatile(
   15790:	f385 8811 	msr	BASEPRI, r5
   15794:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   15798:	f104 0018 	add.w	r0, r4, #24
   1579c:	f000 f80c 	bl	157b8 <z_abort_timeout>
}
   157a0:	4620      	mov	r0, r4
   157a2:	bd38      	pop	{r3, r4, r5, pc}

000157a4 <k_is_in_isr>:
   157a4:	f3ef 8005 	mrs	r0, IPSR
}
   157a8:	3800      	subs	r0, #0
   157aa:	bf18      	it	ne
   157ac:	2001      	movne	r0, #1
   157ae:	4770      	bx	lr

000157b0 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   157b0:	b108      	cbz	r0, 157b6 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   157b2:	f7fb bf1b 	b.w	115ec <arch_busy_wait>
}
   157b6:	4770      	bx	lr

000157b8 <z_abort_timeout>:
{
   157b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   157ba:	f04f 0220 	mov.w	r2, #32
   157be:	f3ef 8411 	mrs	r4, BASEPRI
   157c2:	f382 8811 	msr	BASEPRI, r2
   157c6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   157ca:	6803      	ldr	r3, [r0, #0]
   157cc:	b13b      	cbz	r3, 157de <z_abort_timeout+0x26>
			remove_timeout(to);
   157ce:	f7fe f9fd 	bl	13bcc <remove_timeout>
			ret = 0;
   157d2:	2000      	movs	r0, #0
	__asm__ volatile(
   157d4:	f384 8811 	msr	BASEPRI, r4
   157d8:	f3bf 8f6f 	isb	sy
}
   157dc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   157de:	f06f 0015 	mvn.w	r0, #21
   157e2:	e7f7      	b.n	157d4 <z_abort_timeout+0x1c>

000157e4 <z_get_next_timeout_expiry>:
{
   157e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   157e6:	f04f 0320 	mov.w	r3, #32
   157ea:	f3ef 8411 	mrs	r4, BASEPRI
   157ee:	f383 8811 	msr	BASEPRI, r3
   157f2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   157f6:	f7fe fa03 	bl	13c00 <next_timeout>
	__asm__ volatile(
   157fa:	f384 8811 	msr	BASEPRI, r4
   157fe:	f3bf 8f6f 	isb	sy
}
   15802:	bd10      	pop	{r4, pc}

00015804 <z_set_timeout_expiry>:
{
   15804:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15806:	4604      	mov	r4, r0
   15808:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   1580a:	f04f 0320 	mov.w	r3, #32
   1580e:	f3ef 8511 	mrs	r5, BASEPRI
   15812:	f383 8811 	msr	BASEPRI, r3
   15816:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1581a:	f7fe f9f1 	bl	13c00 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1581e:	2801      	cmp	r0, #1
   15820:	dd05      	ble.n	1582e <z_set_timeout_expiry+0x2a>
   15822:	42a0      	cmp	r0, r4
   15824:	9901      	ldr	r1, [sp, #4]
   15826:	dd02      	ble.n	1582e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   15828:	4620      	mov	r0, r4
   1582a:	f7fc f8e5 	bl	119f8 <z_clock_set_timeout>
	__asm__ volatile(
   1582e:	f385 8811 	msr	BASEPRI, r5
   15832:	f3bf 8f6f 	isb	sy
}
   15836:	b003      	add	sp, #12
   15838:	bd30      	pop	{r4, r5, pc}

0001583a <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1583a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1583c:	f7fe fafe 	bl	13e3c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   15840:	bd08      	pop	{r3, pc}

00015842 <k_heap_init>:
{
   15842:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   15844:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   15848:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1584c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   15850:	f7ff bbd3 	b.w	14ffa <sys_heap_init>

00015854 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   15854:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00016240 <spm_firmware_info_nse-0x1da0>:
	...

00017fe0 <spm_firmware_info_nse>:
   17fe0:	e97f e97f 	sg
   17fe4:	f7f9 bf72 	b.w	11ecc <__acle_se_spm_firmware_info_nse>

00017fe8 <spm_request_random_number_nse>:
   17fe8:	e97f e97f 	sg
   17fec:	f7fd b9a9 	b.w	15342 <__acle_se_spm_request_random_number_nse>

00017ff0 <spm_request_read_nse>:
   17ff0:	e97f e97f 	sg
   17ff4:	f7f9 bf0c 	b.w	11e10 <__acle_se_spm_request_read_nse>
	...
