
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_start>:
   1c200:	20030898 	.word	0x20030898
   1c204:	00025ec5 	.word	0x00025ec5
   1c208:	0003926d 	.word	0x0003926d
   1c20c:	00025f25 	.word	0x00025f25
   1c210:	00025f25 	.word	0x00025f25
   1c214:	00025f25 	.word	0x00025f25
   1c218:	00025f25 	.word	0x00025f25
   1c21c:	00025f25 	.word	0x00025f25
	...
   1c22c:	00025bb1 	.word	0x00025bb1
   1c230:	00025f25 	.word	0x00025f25
   1c234:	00000000 	.word	0x00000000
   1c238:	00025b0d 	.word	0x00025b0d
   1c23c:	00039173 	.word	0x00039173

0001c240 <_irq_vector_table>:
   1c240:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c250:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c260:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c270:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c280:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c290:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c2a0:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c2b0:	00029779 00039ec3 00025e85 00025e85     y........^...^..
   1c2c0:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c2d0:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c2e0:	00025e85 00025e85 00039ee1 00025e85     .^...^.......^..
   1c2f0:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c300:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c310:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c320:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c330:	00025e85 00025e85 00025e85 00025e85     .^...^...^...^..
   1c340:	00025e85                                .^..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	0002521c 00000001 0001c200 0001c200     .R..............
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	3c01      	subs	r4, #1
   1c57c:	bf28      	it	cs
   1c57e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1c582:	d2e9      	bcs.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_uldivmod>:
   1c7b8:	b953      	cbnz	r3, 1c7d0 <__aeabi_uldivmod+0x18>
   1c7ba:	b94a      	cbnz	r2, 1c7d0 <__aeabi_uldivmod+0x18>
   1c7bc:	2900      	cmp	r1, #0
   1c7be:	bf08      	it	eq
   1c7c0:	2800      	cmpeq	r0, #0
   1c7c2:	bf1c      	itt	ne
   1c7c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1c7c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1c7cc:	f000 b96c 	b.w	1caa8 <__aeabi_idiv0>
   1c7d0:	f1ad 0c08 	sub.w	ip, sp, #8
   1c7d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c7d8:	f000 f806 	bl	1c7e8 <__udivmoddi4>
   1c7dc:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c7e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c7e4:	b004      	add	sp, #16
   1c7e6:	4770      	bx	lr

0001c7e8 <__udivmoddi4>:
   1c7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c7ec:	9d08      	ldr	r5, [sp, #32]
   1c7ee:	4604      	mov	r4, r0
   1c7f0:	4688      	mov	r8, r1
   1c7f2:	2b00      	cmp	r3, #0
   1c7f4:	d17d      	bne.n	1c8f2 <__udivmoddi4+0x10a>
   1c7f6:	428a      	cmp	r2, r1
   1c7f8:	4617      	mov	r7, r2
   1c7fa:	d93f      	bls.n	1c87c <__udivmoddi4+0x94>
   1c7fc:	fab2 f282 	clz	r2, r2
   1c800:	b142      	cbz	r2, 1c814 <__udivmoddi4+0x2c>
   1c802:	f1c2 0020 	rsb	r0, r2, #32
   1c806:	4091      	lsls	r1, r2
   1c808:	4097      	lsls	r7, r2
   1c80a:	fa24 f000 	lsr.w	r0, r4, r0
   1c80e:	4094      	lsls	r4, r2
   1c810:	ea40 0801 	orr.w	r8, r0, r1
   1c814:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1c818:	0c23      	lsrs	r3, r4, #16
   1c81a:	fa1f fe87 	uxth.w	lr, r7
   1c81e:	fbb8 f6fc 	udiv	r6, r8, ip
   1c822:	fb0c 8116 	mls	r1, ip, r6, r8
   1c826:	fb06 f00e 	mul.w	r0, r6, lr
   1c82a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1c82e:	4298      	cmp	r0, r3
   1c830:	d905      	bls.n	1c83e <__udivmoddi4+0x56>
   1c832:	18fb      	adds	r3, r7, r3
   1c834:	d202      	bcs.n	1c83c <__udivmoddi4+0x54>
   1c836:	4298      	cmp	r0, r3
   1c838:	f200 8124 	bhi.w	1ca84 <__udivmoddi4+0x29c>
   1c83c:	3e01      	subs	r6, #1
   1c83e:	1a19      	subs	r1, r3, r0
   1c840:	b2a3      	uxth	r3, r4
   1c842:	fbb1 f0fc 	udiv	r0, r1, ip
   1c846:	fb0c 1110 	mls	r1, ip, r0, r1
   1c84a:	fb00 fe0e 	mul.w	lr, r0, lr
   1c84e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1c852:	45a6      	cmp	lr, r4
   1c854:	d905      	bls.n	1c862 <__udivmoddi4+0x7a>
   1c856:	193c      	adds	r4, r7, r4
   1c858:	d202      	bcs.n	1c860 <__udivmoddi4+0x78>
   1c85a:	45a6      	cmp	lr, r4
   1c85c:	f200 810f 	bhi.w	1ca7e <__udivmoddi4+0x296>
   1c860:	3801      	subs	r0, #1
   1c862:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1c866:	eba4 040e 	sub.w	r4, r4, lr
   1c86a:	2600      	movs	r6, #0
   1c86c:	b11d      	cbz	r5, 1c876 <__udivmoddi4+0x8e>
   1c86e:	40d4      	lsrs	r4, r2
   1c870:	2300      	movs	r3, #0
   1c872:	e9c5 4300 	strd	r4, r3, [r5]
   1c876:	4631      	mov	r1, r6
   1c878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c87c:	b902      	cbnz	r2, 1c880 <__udivmoddi4+0x98>
   1c87e:	deff      	udf	#255	; 0xff
   1c880:	fab2 f282 	clz	r2, r2
   1c884:	2a00      	cmp	r2, #0
   1c886:	d150      	bne.n	1c92a <__udivmoddi4+0x142>
   1c888:	1bcb      	subs	r3, r1, r7
   1c88a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1c88e:	fa1f f887 	uxth.w	r8, r7
   1c892:	2601      	movs	r6, #1
   1c894:	0c21      	lsrs	r1, r4, #16
   1c896:	fbb3 fcfe 	udiv	ip, r3, lr
   1c89a:	fb0e 301c 	mls	r0, lr, ip, r3
   1c89e:	460b      	mov	r3, r1
   1c8a0:	fb08 f90c 	mul.w	r9, r8, ip
   1c8a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1c8a8:	4589      	cmp	r9, r1
   1c8aa:	d90a      	bls.n	1c8c2 <__udivmoddi4+0xda>
   1c8ac:	1879      	adds	r1, r7, r1
   1c8ae:	bf2c      	ite	cs
   1c8b0:	2301      	movcs	r3, #1
   1c8b2:	2300      	movcc	r3, #0
   1c8b4:	4589      	cmp	r9, r1
   1c8b6:	d902      	bls.n	1c8be <__udivmoddi4+0xd6>
   1c8b8:	2b00      	cmp	r3, #0
   1c8ba:	f000 80d9 	beq.w	1ca70 <__udivmoddi4+0x288>
   1c8be:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1c8c2:	eba1 0109 	sub.w	r1, r1, r9
   1c8c6:	b2a3      	uxth	r3, r4
   1c8c8:	fbb1 f0fe 	udiv	r0, r1, lr
   1c8cc:	fb0e 1110 	mls	r1, lr, r0, r1
   1c8d0:	fb08 f800 	mul.w	r8, r8, r0
   1c8d4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1c8d8:	45a0      	cmp	r8, r4
   1c8da:	d905      	bls.n	1c8e8 <__udivmoddi4+0x100>
   1c8dc:	193c      	adds	r4, r7, r4
   1c8de:	d202      	bcs.n	1c8e6 <__udivmoddi4+0xfe>
   1c8e0:	45a0      	cmp	r8, r4
   1c8e2:	f200 80c9 	bhi.w	1ca78 <__udivmoddi4+0x290>
   1c8e6:	3801      	subs	r0, #1
   1c8e8:	eba4 0408 	sub.w	r4, r4, r8
   1c8ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1c8f0:	e7bc      	b.n	1c86c <__udivmoddi4+0x84>
   1c8f2:	428b      	cmp	r3, r1
   1c8f4:	d909      	bls.n	1c90a <__udivmoddi4+0x122>
   1c8f6:	2d00      	cmp	r5, #0
   1c8f8:	f000 80b1 	beq.w	1ca5e <__udivmoddi4+0x276>
   1c8fc:	2600      	movs	r6, #0
   1c8fe:	e9c5 0100 	strd	r0, r1, [r5]
   1c902:	4630      	mov	r0, r6
   1c904:	4631      	mov	r1, r6
   1c906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c90a:	fab3 f683 	clz	r6, r3
   1c90e:	2e00      	cmp	r6, #0
   1c910:	d146      	bne.n	1c9a0 <__udivmoddi4+0x1b8>
   1c912:	428b      	cmp	r3, r1
   1c914:	f0c0 80a6 	bcc.w	1ca64 <__udivmoddi4+0x27c>
   1c918:	4282      	cmp	r2, r0
   1c91a:	f240 80a3 	bls.w	1ca64 <__udivmoddi4+0x27c>
   1c91e:	4630      	mov	r0, r6
   1c920:	2d00      	cmp	r5, #0
   1c922:	d0a8      	beq.n	1c876 <__udivmoddi4+0x8e>
   1c924:	e9c5 4800 	strd	r4, r8, [r5]
   1c928:	e7a5      	b.n	1c876 <__udivmoddi4+0x8e>
   1c92a:	4097      	lsls	r7, r2
   1c92c:	f1c2 0320 	rsb	r3, r2, #32
   1c930:	fa01 f002 	lsl.w	r0, r1, r2
   1c934:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1c938:	40d9      	lsrs	r1, r3
   1c93a:	fa24 f303 	lsr.w	r3, r4, r3
   1c93e:	fa1f f887 	uxth.w	r8, r7
   1c942:	4094      	lsls	r4, r2
   1c944:	4303      	orrs	r3, r0
   1c946:	fbb1 f0fe 	udiv	r0, r1, lr
   1c94a:	0c1e      	lsrs	r6, r3, #16
   1c94c:	fb0e 1110 	mls	r1, lr, r0, r1
   1c950:	fb00 fc08 	mul.w	ip, r0, r8
   1c954:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   1c958:	458c      	cmp	ip, r1
   1c95a:	d909      	bls.n	1c970 <__udivmoddi4+0x188>
   1c95c:	1879      	adds	r1, r7, r1
   1c95e:	bf2c      	ite	cs
   1c960:	2601      	movcs	r6, #1
   1c962:	2600      	movcc	r6, #0
   1c964:	458c      	cmp	ip, r1
   1c966:	d902      	bls.n	1c96e <__udivmoddi4+0x186>
   1c968:	2e00      	cmp	r6, #0
   1c96a:	f000 8093 	beq.w	1ca94 <__udivmoddi4+0x2ac>
   1c96e:	3801      	subs	r0, #1
   1c970:	eba1 010c 	sub.w	r1, r1, ip
   1c974:	b29b      	uxth	r3, r3
   1c976:	fbb1 f6fe 	udiv	r6, r1, lr
   1c97a:	fb0e 1116 	mls	r1, lr, r6, r1
   1c97e:	fb06 fc08 	mul.w	ip, r6, r8
   1c982:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1c986:	458c      	cmp	ip, r1
   1c988:	d905      	bls.n	1c996 <__udivmoddi4+0x1ae>
   1c98a:	1879      	adds	r1, r7, r1
   1c98c:	d202      	bcs.n	1c994 <__udivmoddi4+0x1ac>
   1c98e:	458c      	cmp	ip, r1
   1c990:	f200 8087 	bhi.w	1caa2 <__udivmoddi4+0x2ba>
   1c994:	3e01      	subs	r6, #1
   1c996:	eba1 030c 	sub.w	r3, r1, ip
   1c99a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   1c99e:	e779      	b.n	1c894 <__udivmoddi4+0xac>
   1c9a0:	f1c6 0720 	rsb	r7, r6, #32
   1c9a4:	fa03 f406 	lsl.w	r4, r3, r6
   1c9a8:	fa02 fc06 	lsl.w	ip, r2, r6
   1c9ac:	fa01 fe06 	lsl.w	lr, r1, r6
   1c9b0:	40fa      	lsrs	r2, r7
   1c9b2:	fa20 f807 	lsr.w	r8, r0, r7
   1c9b6:	40f9      	lsrs	r1, r7
   1c9b8:	fa00 f306 	lsl.w	r3, r0, r6
   1c9bc:	4322      	orrs	r2, r4
   1c9be:	ea48 040e 	orr.w	r4, r8, lr
   1c9c2:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1c9c6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   1c9ca:	fa1f f982 	uxth.w	r9, r2
   1c9ce:	fbb1 faf8 	udiv	sl, r1, r8
   1c9d2:	fb08 111a 	mls	r1, r8, sl, r1
   1c9d6:	fb0a f009 	mul.w	r0, sl, r9
   1c9da:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   1c9de:	4570      	cmp	r0, lr
   1c9e0:	d90a      	bls.n	1c9f8 <__udivmoddi4+0x210>
   1c9e2:	eb12 0e0e 	adds.w	lr, r2, lr
   1c9e6:	bf2c      	ite	cs
   1c9e8:	2101      	movcs	r1, #1
   1c9ea:	2100      	movcc	r1, #0
   1c9ec:	4570      	cmp	r0, lr
   1c9ee:	d901      	bls.n	1c9f4 <__udivmoddi4+0x20c>
   1c9f0:	2900      	cmp	r1, #0
   1c9f2:	d052      	beq.n	1ca9a <__udivmoddi4+0x2b2>
   1c9f4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1c9f8:	ebae 0e00 	sub.w	lr, lr, r0
   1c9fc:	b2a4      	uxth	r4, r4
   1c9fe:	fbbe f0f8 	udiv	r0, lr, r8
   1ca02:	fb08 ee10 	mls	lr, r8, r0, lr
   1ca06:	fb00 f909 	mul.w	r9, r0, r9
   1ca0a:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   1ca0e:	45f1      	cmp	r9, lr
   1ca10:	d905      	bls.n	1ca1e <__udivmoddi4+0x236>
   1ca12:	eb12 0e0e 	adds.w	lr, r2, lr
   1ca16:	d201      	bcs.n	1ca1c <__udivmoddi4+0x234>
   1ca18:	45f1      	cmp	r9, lr
   1ca1a:	d838      	bhi.n	1ca8e <__udivmoddi4+0x2a6>
   1ca1c:	3801      	subs	r0, #1
   1ca1e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1ca22:	ebae 0e09 	sub.w	lr, lr, r9
   1ca26:	fba0 890c 	umull	r8, r9, r0, ip
   1ca2a:	45ce      	cmp	lr, r9
   1ca2c:	4641      	mov	r1, r8
   1ca2e:	464c      	mov	r4, r9
   1ca30:	d302      	bcc.n	1ca38 <__udivmoddi4+0x250>
   1ca32:	d106      	bne.n	1ca42 <__udivmoddi4+0x25a>
   1ca34:	4543      	cmp	r3, r8
   1ca36:	d204      	bcs.n	1ca42 <__udivmoddi4+0x25a>
   1ca38:	3801      	subs	r0, #1
   1ca3a:	ebb8 010c 	subs.w	r1, r8, ip
   1ca3e:	eb69 0402 	sbc.w	r4, r9, r2
   1ca42:	b315      	cbz	r5, 1ca8a <__udivmoddi4+0x2a2>
   1ca44:	1a5a      	subs	r2, r3, r1
   1ca46:	eb6e 0e04 	sbc.w	lr, lr, r4
   1ca4a:	40f2      	lsrs	r2, r6
   1ca4c:	fa0e f707 	lsl.w	r7, lr, r7
   1ca50:	fa2e f306 	lsr.w	r3, lr, r6
   1ca54:	2600      	movs	r6, #0
   1ca56:	4317      	orrs	r7, r2
   1ca58:	e9c5 7300 	strd	r7, r3, [r5]
   1ca5c:	e70b      	b.n	1c876 <__udivmoddi4+0x8e>
   1ca5e:	462e      	mov	r6, r5
   1ca60:	4628      	mov	r0, r5
   1ca62:	e708      	b.n	1c876 <__udivmoddi4+0x8e>
   1ca64:	1a84      	subs	r4, r0, r2
   1ca66:	eb61 0103 	sbc.w	r1, r1, r3
   1ca6a:	2001      	movs	r0, #1
   1ca6c:	4688      	mov	r8, r1
   1ca6e:	e757      	b.n	1c920 <__udivmoddi4+0x138>
   1ca70:	f1ac 0c02 	sub.w	ip, ip, #2
   1ca74:	4439      	add	r1, r7
   1ca76:	e724      	b.n	1c8c2 <__udivmoddi4+0xda>
   1ca78:	3802      	subs	r0, #2
   1ca7a:	443c      	add	r4, r7
   1ca7c:	e734      	b.n	1c8e8 <__udivmoddi4+0x100>
   1ca7e:	3802      	subs	r0, #2
   1ca80:	443c      	add	r4, r7
   1ca82:	e6ee      	b.n	1c862 <__udivmoddi4+0x7a>
   1ca84:	3e02      	subs	r6, #2
   1ca86:	443b      	add	r3, r7
   1ca88:	e6d9      	b.n	1c83e <__udivmoddi4+0x56>
   1ca8a:	462e      	mov	r6, r5
   1ca8c:	e6f3      	b.n	1c876 <__udivmoddi4+0x8e>
   1ca8e:	3802      	subs	r0, #2
   1ca90:	4496      	add	lr, r2
   1ca92:	e7c4      	b.n	1ca1e <__udivmoddi4+0x236>
   1ca94:	3802      	subs	r0, #2
   1ca96:	4439      	add	r1, r7
   1ca98:	e76a      	b.n	1c970 <__udivmoddi4+0x188>
   1ca9a:	f1aa 0a02 	sub.w	sl, sl, #2
   1ca9e:	4496      	add	lr, r2
   1caa0:	e7aa      	b.n	1c9f8 <__udivmoddi4+0x210>
   1caa2:	3e02      	subs	r6, #2
   1caa4:	4439      	add	r1, r7
   1caa6:	e776      	b.n	1c996 <__udivmoddi4+0x1ae>

0001caa8 <__aeabi_idiv0>:
   1caa8:	4770      	bx	lr
   1caaa:	bf00      	nop

0001caac <__aeabi_dmul>:
   1caac:	b570      	push	{r4, r5, r6, lr}
   1caae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1cab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1cab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1caba:	bf1d      	ittte	ne
   1cabc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1cac0:	ea94 0f0c 	teqne	r4, ip
   1cac4:	ea95 0f0c 	teqne	r5, ip
   1cac8:	f000 f8de 	bleq	1cc88 <__aeabi_dmul+0x1dc>
   1cacc:	442c      	add	r4, r5
   1cace:	ea81 0603 	eor.w	r6, r1, r3
   1cad2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1cad6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1cada:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1cade:	bf18      	it	ne
   1cae0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1cae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1caec:	d038      	beq.n	1cb60 <__aeabi_dmul+0xb4>
   1caee:	fba0 ce02 	umull	ip, lr, r0, r2
   1caf2:	f04f 0500 	mov.w	r5, #0
   1caf6:	fbe1 e502 	umlal	lr, r5, r1, r2
   1cafa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1cafe:	fbe0 e503 	umlal	lr, r5, r0, r3
   1cb02:	f04f 0600 	mov.w	r6, #0
   1cb06:	fbe1 5603 	umlal	r5, r6, r1, r3
   1cb0a:	f09c 0f00 	teq	ip, #0
   1cb0e:	bf18      	it	ne
   1cb10:	f04e 0e01 	orrne.w	lr, lr, #1
   1cb14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1cb18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1cb1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1cb20:	d204      	bcs.n	1cb2c <__aeabi_dmul+0x80>
   1cb22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1cb26:	416d      	adcs	r5, r5
   1cb28:	eb46 0606 	adc.w	r6, r6, r6
   1cb2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1cb30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1cb34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1cb38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1cb3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1cb40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb44:	bf88      	it	hi
   1cb46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb4a:	d81e      	bhi.n	1cb8a <__aeabi_dmul+0xde>
   1cb4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1cb50:	bf08      	it	eq
   1cb52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1cb56:	f150 0000 	adcs.w	r0, r0, #0
   1cb5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb5e:	bd70      	pop	{r4, r5, r6, pc}
   1cb60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1cb64:	ea46 0101 	orr.w	r1, r6, r1
   1cb68:	ea40 0002 	orr.w	r0, r0, r2
   1cb6c:	ea81 0103 	eor.w	r1, r1, r3
   1cb70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1cb74:	bfc2      	ittt	gt
   1cb76:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb7e:	bd70      	popgt	{r4, r5, r6, pc}
   1cb80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb84:	f04f 0e00 	mov.w	lr, #0
   1cb88:	3c01      	subs	r4, #1
   1cb8a:	f300 80ab 	bgt.w	1cce4 <__aeabi_dmul+0x238>
   1cb8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1cb92:	bfde      	ittt	le
   1cb94:	2000      	movle	r0, #0
   1cb96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1cb9a:	bd70      	pople	{r4, r5, r6, pc}
   1cb9c:	f1c4 0400 	rsb	r4, r4, #0
   1cba0:	3c20      	subs	r4, #32
   1cba2:	da35      	bge.n	1cc10 <__aeabi_dmul+0x164>
   1cba4:	340c      	adds	r4, #12
   1cba6:	dc1b      	bgt.n	1cbe0 <__aeabi_dmul+0x134>
   1cba8:	f104 0414 	add.w	r4, r4, #20
   1cbac:	f1c4 0520 	rsb	r5, r4, #32
   1cbb0:	fa00 f305 	lsl.w	r3, r0, r5
   1cbb4:	fa20 f004 	lsr.w	r0, r0, r4
   1cbb8:	fa01 f205 	lsl.w	r2, r1, r5
   1cbbc:	ea40 0002 	orr.w	r0, r0, r2
   1cbc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1cbc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1cbc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1cbcc:	fa21 f604 	lsr.w	r6, r1, r4
   1cbd0:	eb42 0106 	adc.w	r1, r2, r6
   1cbd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cbd8:	bf08      	it	eq
   1cbda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cbde:	bd70      	pop	{r4, r5, r6, pc}
   1cbe0:	f1c4 040c 	rsb	r4, r4, #12
   1cbe4:	f1c4 0520 	rsb	r5, r4, #32
   1cbe8:	fa00 f304 	lsl.w	r3, r0, r4
   1cbec:	fa20 f005 	lsr.w	r0, r0, r5
   1cbf0:	fa01 f204 	lsl.w	r2, r1, r4
   1cbf4:	ea40 0002 	orr.w	r0, r0, r2
   1cbf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1cbfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1cc00:	f141 0100 	adc.w	r1, r1, #0
   1cc04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cc08:	bf08      	it	eq
   1cc0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cc0e:	bd70      	pop	{r4, r5, r6, pc}
   1cc10:	f1c4 0520 	rsb	r5, r4, #32
   1cc14:	fa00 f205 	lsl.w	r2, r0, r5
   1cc18:	ea4e 0e02 	orr.w	lr, lr, r2
   1cc1c:	fa20 f304 	lsr.w	r3, r0, r4
   1cc20:	fa01 f205 	lsl.w	r2, r1, r5
   1cc24:	ea43 0302 	orr.w	r3, r3, r2
   1cc28:	fa21 f004 	lsr.w	r0, r1, r4
   1cc2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1cc30:	fa21 f204 	lsr.w	r2, r1, r4
   1cc34:	ea20 0002 	bic.w	r0, r0, r2
   1cc38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1cc3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cc40:	bf08      	it	eq
   1cc42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cc46:	bd70      	pop	{r4, r5, r6, pc}
   1cc48:	f094 0f00 	teq	r4, #0
   1cc4c:	d10f      	bne.n	1cc6e <__aeabi_dmul+0x1c2>
   1cc4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1cc52:	0040      	lsls	r0, r0, #1
   1cc54:	eb41 0101 	adc.w	r1, r1, r1
   1cc58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cc5c:	bf08      	it	eq
   1cc5e:	3c01      	subeq	r4, #1
   1cc60:	d0f7      	beq.n	1cc52 <__aeabi_dmul+0x1a6>
   1cc62:	ea41 0106 	orr.w	r1, r1, r6
   1cc66:	f095 0f00 	teq	r5, #0
   1cc6a:	bf18      	it	ne
   1cc6c:	4770      	bxne	lr
   1cc6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1cc72:	0052      	lsls	r2, r2, #1
   1cc74:	eb43 0303 	adc.w	r3, r3, r3
   1cc78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1cc7c:	bf08      	it	eq
   1cc7e:	3d01      	subeq	r5, #1
   1cc80:	d0f7      	beq.n	1cc72 <__aeabi_dmul+0x1c6>
   1cc82:	ea43 0306 	orr.w	r3, r3, r6
   1cc86:	4770      	bx	lr
   1cc88:	ea94 0f0c 	teq	r4, ip
   1cc8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cc90:	bf18      	it	ne
   1cc92:	ea95 0f0c 	teqne	r5, ip
   1cc96:	d00c      	beq.n	1ccb2 <__aeabi_dmul+0x206>
   1cc98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cc9c:	bf18      	it	ne
   1cc9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cca2:	d1d1      	bne.n	1cc48 <__aeabi_dmul+0x19c>
   1cca4:	ea81 0103 	eor.w	r1, r1, r3
   1cca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ccac:	f04f 0000 	mov.w	r0, #0
   1ccb0:	bd70      	pop	{r4, r5, r6, pc}
   1ccb2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ccb6:	bf06      	itte	eq
   1ccb8:	4610      	moveq	r0, r2
   1ccba:	4619      	moveq	r1, r3
   1ccbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ccc0:	d019      	beq.n	1ccf6 <__aeabi_dmul+0x24a>
   1ccc2:	ea94 0f0c 	teq	r4, ip
   1ccc6:	d102      	bne.n	1ccce <__aeabi_dmul+0x222>
   1ccc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1cccc:	d113      	bne.n	1ccf6 <__aeabi_dmul+0x24a>
   1ccce:	ea95 0f0c 	teq	r5, ip
   1ccd2:	d105      	bne.n	1cce0 <__aeabi_dmul+0x234>
   1ccd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1ccd8:	bf1c      	itt	ne
   1ccda:	4610      	movne	r0, r2
   1ccdc:	4619      	movne	r1, r3
   1ccde:	d10a      	bne.n	1ccf6 <__aeabi_dmul+0x24a>
   1cce0:	ea81 0103 	eor.w	r1, r1, r3
   1cce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1cce8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ccec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1ccf0:	f04f 0000 	mov.w	r0, #0
   1ccf4:	bd70      	pop	{r4, r5, r6, pc}
   1ccf6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ccfa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ccfe:	bd70      	pop	{r4, r5, r6, pc}

0001cd00 <__aeabi_ddiv>:
   1cd00:	b570      	push	{r4, r5, r6, lr}
   1cd02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1cd06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1cd0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1cd0e:	bf1d      	ittte	ne
   1cd10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1cd14:	ea94 0f0c 	teqne	r4, ip
   1cd18:	ea95 0f0c 	teqne	r5, ip
   1cd1c:	f000 f8a7 	bleq	1ce6e <__aeabi_ddiv+0x16e>
   1cd20:	eba4 0405 	sub.w	r4, r4, r5
   1cd24:	ea81 0e03 	eor.w	lr, r1, r3
   1cd28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cd2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1cd30:	f000 8088 	beq.w	1ce44 <__aeabi_ddiv+0x144>
   1cd34:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1cd38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1cd3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1cd40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1cd44:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1cd48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1cd4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1cd50:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1cd54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1cd58:	429d      	cmp	r5, r3
   1cd5a:	bf08      	it	eq
   1cd5c:	4296      	cmpeq	r6, r2
   1cd5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1cd62:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1cd66:	d202      	bcs.n	1cd6e <__aeabi_ddiv+0x6e>
   1cd68:	085b      	lsrs	r3, r3, #1
   1cd6a:	ea4f 0232 	mov.w	r2, r2, rrx
   1cd6e:	1ab6      	subs	r6, r6, r2
   1cd70:	eb65 0503 	sbc.w	r5, r5, r3
   1cd74:	085b      	lsrs	r3, r3, #1
   1cd76:	ea4f 0232 	mov.w	r2, r2, rrx
   1cd7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1cd7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1cd82:	ebb6 0e02 	subs.w	lr, r6, r2
   1cd86:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cd8a:	bf22      	ittt	cs
   1cd8c:	1ab6      	subcs	r6, r6, r2
   1cd8e:	4675      	movcs	r5, lr
   1cd90:	ea40 000c 	orrcs.w	r0, r0, ip
   1cd94:	085b      	lsrs	r3, r3, #1
   1cd96:	ea4f 0232 	mov.w	r2, r2, rrx
   1cd9a:	ebb6 0e02 	subs.w	lr, r6, r2
   1cd9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cda2:	bf22      	ittt	cs
   1cda4:	1ab6      	subcs	r6, r6, r2
   1cda6:	4675      	movcs	r5, lr
   1cda8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cdac:	085b      	lsrs	r3, r3, #1
   1cdae:	ea4f 0232 	mov.w	r2, r2, rrx
   1cdb2:	ebb6 0e02 	subs.w	lr, r6, r2
   1cdb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cdba:	bf22      	ittt	cs
   1cdbc:	1ab6      	subcs	r6, r6, r2
   1cdbe:	4675      	movcs	r5, lr
   1cdc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cdc4:	085b      	lsrs	r3, r3, #1
   1cdc6:	ea4f 0232 	mov.w	r2, r2, rrx
   1cdca:	ebb6 0e02 	subs.w	lr, r6, r2
   1cdce:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cdd2:	bf22      	ittt	cs
   1cdd4:	1ab6      	subcs	r6, r6, r2
   1cdd6:	4675      	movcs	r5, lr
   1cdd8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cddc:	ea55 0e06 	orrs.w	lr, r5, r6
   1cde0:	d018      	beq.n	1ce14 <__aeabi_ddiv+0x114>
   1cde2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1cde6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1cdea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cdee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cdf2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cdf6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cdfa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cdfe:	d1c0      	bne.n	1cd82 <__aeabi_ddiv+0x82>
   1ce00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ce04:	d10b      	bne.n	1ce1e <__aeabi_ddiv+0x11e>
   1ce06:	ea41 0100 	orr.w	r1, r1, r0
   1ce0a:	f04f 0000 	mov.w	r0, #0
   1ce0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1ce12:	e7b6      	b.n	1cd82 <__aeabi_ddiv+0x82>
   1ce14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ce18:	bf04      	itt	eq
   1ce1a:	4301      	orreq	r1, r0
   1ce1c:	2000      	moveq	r0, #0
   1ce1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1ce22:	bf88      	it	hi
   1ce24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1ce28:	f63f aeaf 	bhi.w	1cb8a <__aeabi_dmul+0xde>
   1ce2c:	ebb5 0c03 	subs.w	ip, r5, r3
   1ce30:	bf04      	itt	eq
   1ce32:	ebb6 0c02 	subseq.w	ip, r6, r2
   1ce36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1ce3a:	f150 0000 	adcs.w	r0, r0, #0
   1ce3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ce42:	bd70      	pop	{r4, r5, r6, pc}
   1ce44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1ce48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1ce4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1ce50:	bfc2      	ittt	gt
   1ce52:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ce56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ce5a:	bd70      	popgt	{r4, r5, r6, pc}
   1ce5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ce60:	f04f 0e00 	mov.w	lr, #0
   1ce64:	3c01      	subs	r4, #1
   1ce66:	e690      	b.n	1cb8a <__aeabi_dmul+0xde>
   1ce68:	ea45 0e06 	orr.w	lr, r5, r6
   1ce6c:	e68d      	b.n	1cb8a <__aeabi_dmul+0xde>
   1ce6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1ce72:	ea94 0f0c 	teq	r4, ip
   1ce76:	bf08      	it	eq
   1ce78:	ea95 0f0c 	teqeq	r5, ip
   1ce7c:	f43f af3b 	beq.w	1ccf6 <__aeabi_dmul+0x24a>
   1ce80:	ea94 0f0c 	teq	r4, ip
   1ce84:	d10a      	bne.n	1ce9c <__aeabi_ddiv+0x19c>
   1ce86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1ce8a:	f47f af34 	bne.w	1ccf6 <__aeabi_dmul+0x24a>
   1ce8e:	ea95 0f0c 	teq	r5, ip
   1ce92:	f47f af25 	bne.w	1cce0 <__aeabi_dmul+0x234>
   1ce96:	4610      	mov	r0, r2
   1ce98:	4619      	mov	r1, r3
   1ce9a:	e72c      	b.n	1ccf6 <__aeabi_dmul+0x24a>
   1ce9c:	ea95 0f0c 	teq	r5, ip
   1cea0:	d106      	bne.n	1ceb0 <__aeabi_ddiv+0x1b0>
   1cea2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cea6:	f43f aefd 	beq.w	1cca4 <__aeabi_dmul+0x1f8>
   1ceaa:	4610      	mov	r0, r2
   1ceac:	4619      	mov	r1, r3
   1ceae:	e722      	b.n	1ccf6 <__aeabi_dmul+0x24a>
   1ceb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ceb4:	bf18      	it	ne
   1ceb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ceba:	f47f aec5 	bne.w	1cc48 <__aeabi_dmul+0x19c>
   1cebe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cec2:	f47f af0d 	bne.w	1cce0 <__aeabi_dmul+0x234>
   1cec6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1ceca:	f47f aeeb 	bne.w	1cca4 <__aeabi_dmul+0x1f8>
   1cece:	e712      	b.n	1ccf6 <__aeabi_dmul+0x24a>

0001ced0 <__gedf2>:
   1ced0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1ced4:	e006      	b.n	1cee4 <__cmpdf2+0x4>
   1ced6:	bf00      	nop

0001ced8 <__ledf2>:
   1ced8:	f04f 0c01 	mov.w	ip, #1
   1cedc:	e002      	b.n	1cee4 <__cmpdf2+0x4>
   1cede:	bf00      	nop

0001cee0 <__cmpdf2>:
   1cee0:	f04f 0c01 	mov.w	ip, #1
   1cee4:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cee8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1ceec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cef4:	bf18      	it	ne
   1cef6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cefa:	d01b      	beq.n	1cf34 <__cmpdf2+0x54>
   1cefc:	b001      	add	sp, #4
   1cefe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cf02:	bf0c      	ite	eq
   1cf04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cf08:	ea91 0f03 	teqne	r1, r3
   1cf0c:	bf02      	ittt	eq
   1cf0e:	ea90 0f02 	teqeq	r0, r2
   1cf12:	2000      	moveq	r0, #0
   1cf14:	4770      	bxeq	lr
   1cf16:	f110 0f00 	cmn.w	r0, #0
   1cf1a:	ea91 0f03 	teq	r1, r3
   1cf1e:	bf58      	it	pl
   1cf20:	4299      	cmppl	r1, r3
   1cf22:	bf08      	it	eq
   1cf24:	4290      	cmpeq	r0, r2
   1cf26:	bf2c      	ite	cs
   1cf28:	17d8      	asrcs	r0, r3, #31
   1cf2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cf2e:	f040 0001 	orr.w	r0, r0, #1
   1cf32:	4770      	bx	lr
   1cf34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cf38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cf3c:	d102      	bne.n	1cf44 <__cmpdf2+0x64>
   1cf3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cf42:	d107      	bne.n	1cf54 <__cmpdf2+0x74>
   1cf44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cf48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cf4c:	d1d6      	bne.n	1cefc <__cmpdf2+0x1c>
   1cf4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cf52:	d0d3      	beq.n	1cefc <__cmpdf2+0x1c>
   1cf54:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cf58:	4770      	bx	lr
   1cf5a:	bf00      	nop

0001cf5c <__aeabi_cdrcmple>:
   1cf5c:	4684      	mov	ip, r0
   1cf5e:	4610      	mov	r0, r2
   1cf60:	4662      	mov	r2, ip
   1cf62:	468c      	mov	ip, r1
   1cf64:	4619      	mov	r1, r3
   1cf66:	4663      	mov	r3, ip
   1cf68:	e000      	b.n	1cf6c <__aeabi_cdcmpeq>
   1cf6a:	bf00      	nop

0001cf6c <__aeabi_cdcmpeq>:
   1cf6c:	b501      	push	{r0, lr}
   1cf6e:	f7ff ffb7 	bl	1cee0 <__cmpdf2>
   1cf72:	2800      	cmp	r0, #0
   1cf74:	bf48      	it	mi
   1cf76:	f110 0f00 	cmnmi.w	r0, #0
   1cf7a:	bd01      	pop	{r0, pc}

0001cf7c <__aeabi_dcmpeq>:
   1cf7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cf80:	f7ff fff4 	bl	1cf6c <__aeabi_cdcmpeq>
   1cf84:	bf0c      	ite	eq
   1cf86:	2001      	moveq	r0, #1
   1cf88:	2000      	movne	r0, #0
   1cf8a:	f85d fb08 	ldr.w	pc, [sp], #8
   1cf8e:	bf00      	nop

0001cf90 <__aeabi_dcmplt>:
   1cf90:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cf94:	f7ff ffea 	bl	1cf6c <__aeabi_cdcmpeq>
   1cf98:	bf34      	ite	cc
   1cf9a:	2001      	movcc	r0, #1
   1cf9c:	2000      	movcs	r0, #0
   1cf9e:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfa2:	bf00      	nop

0001cfa4 <__aeabi_dcmple>:
   1cfa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cfa8:	f7ff ffe0 	bl	1cf6c <__aeabi_cdcmpeq>
   1cfac:	bf94      	ite	ls
   1cfae:	2001      	movls	r0, #1
   1cfb0:	2000      	movhi	r0, #0
   1cfb2:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfb6:	bf00      	nop

0001cfb8 <__aeabi_dcmpge>:
   1cfb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cfbc:	f7ff ffce 	bl	1cf5c <__aeabi_cdrcmple>
   1cfc0:	bf94      	ite	ls
   1cfc2:	2001      	movls	r0, #1
   1cfc4:	2000      	movhi	r0, #0
   1cfc6:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfca:	bf00      	nop

0001cfcc <__aeabi_dcmpgt>:
   1cfcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cfd0:	f7ff ffc4 	bl	1cf5c <__aeabi_cdrcmple>
   1cfd4:	bf34      	ite	cc
   1cfd6:	2001      	movcc	r0, #1
   1cfd8:	2000      	movcs	r0, #0
   1cfda:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfde:	bf00      	nop

0001cfe0 <__aeabi_dcmpun>:
   1cfe0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cfe4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cfe8:	d102      	bne.n	1cff0 <__aeabi_dcmpun+0x10>
   1cfea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cfee:	d10a      	bne.n	1d006 <__aeabi_dcmpun+0x26>
   1cff0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cff4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cff8:	d102      	bne.n	1d000 <__aeabi_dcmpun+0x20>
   1cffa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cffe:	d102      	bne.n	1d006 <__aeabi_dcmpun+0x26>
   1d000:	f04f 0000 	mov.w	r0, #0
   1d004:	4770      	bx	lr
   1d006:	f04f 0001 	mov.w	r0, #1
   1d00a:	4770      	bx	lr

0001d00c <__aeabi_d2iz>:
   1d00c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1d010:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1d014:	d215      	bcs.n	1d042 <__aeabi_d2iz+0x36>
   1d016:	d511      	bpl.n	1d03c <__aeabi_d2iz+0x30>
   1d018:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1d01c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1d020:	d912      	bls.n	1d048 <__aeabi_d2iz+0x3c>
   1d022:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1d026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d02a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1d02e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1d032:	fa23 f002 	lsr.w	r0, r3, r2
   1d036:	bf18      	it	ne
   1d038:	4240      	negne	r0, r0
   1d03a:	4770      	bx	lr
   1d03c:	f04f 0000 	mov.w	r0, #0
   1d040:	4770      	bx	lr
   1d042:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1d046:	d105      	bne.n	1d054 <__aeabi_d2iz+0x48>
   1d048:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1d04c:	bf08      	it	eq
   1d04e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1d052:	4770      	bx	lr
   1d054:	f04f 0000 	mov.w	r0, #0
   1d058:	4770      	bx	lr
   1d05a:	bf00      	nop

0001d05c <strcmp>:
   1d05c:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d060:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d064:	2a01      	cmp	r2, #1
   1d066:	bf28      	it	cs
   1d068:	429a      	cmpcs	r2, r3
   1d06a:	d0f7      	beq.n	1d05c <strcmp>
   1d06c:	1ad0      	subs	r0, r2, r3
   1d06e:	4770      	bx	lr

0001d070 <strlen>:
   1d070:	4603      	mov	r3, r0
   1d072:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d076:	2a00      	cmp	r2, #0
   1d078:	d1fb      	bne.n	1d072 <strlen+0x2>
   1d07a:	1a18      	subs	r0, r3, r0
   1d07c:	3801      	subs	r0, #1
   1d07e:	4770      	bx	lr

0001d080 <_dtoa_r>:
   1d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d084:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1d086:	4604      	mov	r4, r0
   1d088:	ed2d 8b02 	vpush	{d8}
   1d08c:	b095      	sub	sp, #84	; 0x54
   1d08e:	ec57 6b10 	vmov	r6, r7, d0
   1d092:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   1d096:	9105      	str	r1, [sp, #20]
   1d098:	9209      	str	r2, [sp, #36]	; 0x24
   1d09a:	930f      	str	r3, [sp, #60]	; 0x3c
   1d09c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1d0a0:	b93d      	cbnz	r5, 1d0b2 <_dtoa_r+0x32>
   1d0a2:	2010      	movs	r0, #16
   1d0a4:	f01a fa6e 	bl	37584 <malloc>
   1d0a8:	6260      	str	r0, [r4, #36]	; 0x24
   1d0aa:	6005      	str	r5, [r0, #0]
   1d0ac:	60c5      	str	r5, [r0, #12]
   1d0ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1d0b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d0b4:	6819      	ldr	r1, [r3, #0]
   1d0b6:	b151      	cbz	r1, 1d0ce <_dtoa_r+0x4e>
   1d0b8:	685a      	ldr	r2, [r3, #4]
   1d0ba:	2301      	movs	r3, #1
   1d0bc:	4620      	mov	r0, r4
   1d0be:	4093      	lsls	r3, r2
   1d0c0:	604a      	str	r2, [r1, #4]
   1d0c2:	608b      	str	r3, [r1, #8]
   1d0c4:	f01e fc2e 	bl	3b924 <_Bfree>
   1d0c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d0ca:	2200      	movs	r2, #0
   1d0cc:	601a      	str	r2, [r3, #0]
   1d0ce:	1e3b      	subs	r3, r7, #0
   1d0d0:	bfb7      	itett	lt
   1d0d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1d0d6:	2300      	movge	r3, #0
   1d0d8:	2201      	movlt	r2, #1
   1d0da:	9303      	strlt	r3, [sp, #12]
   1d0dc:	bfa8      	it	ge
   1d0de:	f8c8 3000 	strge.w	r3, [r8]
   1d0e2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1d0e6:	4bb6      	ldr	r3, [pc, #728]	; (1d3c0 <_dtoa_r+0x340>)
   1d0e8:	bfb8      	it	lt
   1d0ea:	f8c8 2000 	strlt.w	r2, [r8]
   1d0ee:	ea33 0309 	bics.w	r3, r3, r9
   1d0f2:	d11b      	bne.n	1d12c <_dtoa_r+0xac>
   1d0f4:	f242 730f 	movw	r3, #9999	; 0x270f
   1d0f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1d0fa:	6013      	str	r3, [r2, #0]
   1d0fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1d100:	4333      	orrs	r3, r6
   1d102:	f000 8572 	beq.w	1dbea <_dtoa_r+0xb6a>
   1d106:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1d108:	b963      	cbnz	r3, 1d124 <_dtoa_r+0xa4>
   1d10a:	4bae      	ldr	r3, [pc, #696]	; (1d3c4 <_dtoa_r+0x344>)
   1d10c:	e025      	b.n	1d15a <_dtoa_r+0xda>
   1d10e:	4bae      	ldr	r3, [pc, #696]	; (1d3c8 <_dtoa_r+0x348>)
   1d110:	9300      	str	r3, [sp, #0]
   1d112:	3308      	adds	r3, #8
   1d114:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1d116:	6013      	str	r3, [r2, #0]
   1d118:	9800      	ldr	r0, [sp, #0]
   1d11a:	b015      	add	sp, #84	; 0x54
   1d11c:	ecbd 8b02 	vpop	{d8}
   1d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d124:	4ba7      	ldr	r3, [pc, #668]	; (1d3c4 <_dtoa_r+0x344>)
   1d126:	9300      	str	r3, [sp, #0]
   1d128:	3303      	adds	r3, #3
   1d12a:	e7f3      	b.n	1d114 <_dtoa_r+0x94>
   1d12c:	ed9d 7b02 	vldr	d7, [sp, #8]
   1d130:	2200      	movs	r2, #0
   1d132:	2300      	movs	r3, #0
   1d134:	ec51 0b17 	vmov	r0, r1, d7
   1d138:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1d13c:	f7ff ff1e 	bl	1cf7c <__aeabi_dcmpeq>
   1d140:	4680      	mov	r8, r0
   1d142:	b160      	cbz	r0, 1d15e <_dtoa_r+0xde>
   1d144:	2301      	movs	r3, #1
   1d146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1d148:	6013      	str	r3, [r2, #0]
   1d14a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1d14c:	2b00      	cmp	r3, #0
   1d14e:	f000 8549 	beq.w	1dbe4 <_dtoa_r+0xb64>
   1d152:	4b9e      	ldr	r3, [pc, #632]	; (1d3cc <_dtoa_r+0x34c>)
   1d154:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1d156:	6013      	str	r3, [r2, #0]
   1d158:	3b01      	subs	r3, #1
   1d15a:	9300      	str	r3, [sp, #0]
   1d15c:	e7dc      	b.n	1d118 <_dtoa_r+0x98>
   1d15e:	f3c9 550a 	ubfx	r5, r9, #20, #11
   1d162:	aa12      	add	r2, sp, #72	; 0x48
   1d164:	a913      	add	r1, sp, #76	; 0x4c
   1d166:	4620      	mov	r0, r4
   1d168:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1d16c:	f01e fe1c 	bl	3bda8 <__d2b>
   1d170:	4682      	mov	sl, r0
   1d172:	2d00      	cmp	r5, #0
   1d174:	d07c      	beq.n	1d270 <_dtoa_r+0x1f0>
   1d176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d178:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1d17c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   1d180:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d184:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   1d188:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1d18c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   1d190:	2200      	movs	r2, #0
   1d192:	4b8f      	ldr	r3, [pc, #572]	; (1d3d0 <_dtoa_r+0x350>)
   1d194:	4630      	mov	r0, r6
   1d196:	4639      	mov	r1, r7
   1d198:	f7ff f956 	bl	1c448 <__aeabi_dsub>
   1d19c:	a382      	add	r3, pc, #520	; (adr r3, 1d3a8 <_dtoa_r+0x328>)
   1d19e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1a2:	f7ff fc83 	bl	1caac <__aeabi_dmul>
   1d1a6:	a382      	add	r3, pc, #520	; (adr r3, 1d3b0 <_dtoa_r+0x330>)
   1d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1ac:	f7ff f94e 	bl	1c44c <__adddf3>
   1d1b0:	4606      	mov	r6, r0
   1d1b2:	460f      	mov	r7, r1
   1d1b4:	4628      	mov	r0, r5
   1d1b6:	f7ff fa95 	bl	1c6e4 <__aeabi_i2d>
   1d1ba:	a37f      	add	r3, pc, #508	; (adr r3, 1d3b8 <_dtoa_r+0x338>)
   1d1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1c0:	f7ff fc74 	bl	1caac <__aeabi_dmul>
   1d1c4:	4602      	mov	r2, r0
   1d1c6:	460b      	mov	r3, r1
   1d1c8:	4630      	mov	r0, r6
   1d1ca:	4639      	mov	r1, r7
   1d1cc:	f7ff f93e 	bl	1c44c <__adddf3>
   1d1d0:	4606      	mov	r6, r0
   1d1d2:	460f      	mov	r7, r1
   1d1d4:	f7ff ff1a 	bl	1d00c <__aeabi_d2iz>
   1d1d8:	2200      	movs	r2, #0
   1d1da:	4681      	mov	r9, r0
   1d1dc:	2300      	movs	r3, #0
   1d1de:	4630      	mov	r0, r6
   1d1e0:	4639      	mov	r1, r7
   1d1e2:	f7ff fed5 	bl	1cf90 <__aeabi_dcmplt>
   1d1e6:	b148      	cbz	r0, 1d1fc <_dtoa_r+0x17c>
   1d1e8:	4648      	mov	r0, r9
   1d1ea:	f7ff fa7b 	bl	1c6e4 <__aeabi_i2d>
   1d1ee:	4632      	mov	r2, r6
   1d1f0:	463b      	mov	r3, r7
   1d1f2:	f7ff fec3 	bl	1cf7c <__aeabi_dcmpeq>
   1d1f6:	b908      	cbnz	r0, 1d1fc <_dtoa_r+0x17c>
   1d1f8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1d1fc:	f1b9 0f16 	cmp.w	r9, #22
   1d200:	d855      	bhi.n	1d2ae <_dtoa_r+0x22e>
   1d202:	4b74      	ldr	r3, [pc, #464]	; (1d3d4 <_dtoa_r+0x354>)
   1d204:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1d208:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d210:	f7ff febe 	bl	1cf90 <__aeabi_dcmplt>
   1d214:	2800      	cmp	r0, #0
   1d216:	d04c      	beq.n	1d2b2 <_dtoa_r+0x232>
   1d218:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1d21c:	2300      	movs	r3, #0
   1d21e:	930e      	str	r3, [sp, #56]	; 0x38
   1d220:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1d222:	1b5d      	subs	r5, r3, r5
   1d224:	1e6b      	subs	r3, r5, #1
   1d226:	9304      	str	r3, [sp, #16]
   1d228:	bf45      	ittet	mi
   1d22a:	2300      	movmi	r3, #0
   1d22c:	f1c5 0801 	rsbmi	r8, r5, #1
   1d230:	f04f 0800 	movpl.w	r8, #0
   1d234:	9304      	strmi	r3, [sp, #16]
   1d236:	f1b9 0f00 	cmp.w	r9, #0
   1d23a:	db3c      	blt.n	1d2b6 <_dtoa_r+0x236>
   1d23c:	9b04      	ldr	r3, [sp, #16]
   1d23e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1d242:	444b      	add	r3, r9
   1d244:	9304      	str	r3, [sp, #16]
   1d246:	2300      	movs	r3, #0
   1d248:	9306      	str	r3, [sp, #24]
   1d24a:	9b05      	ldr	r3, [sp, #20]
   1d24c:	2b09      	cmp	r3, #9
   1d24e:	f200 8099 	bhi.w	1d384 <_dtoa_r+0x304>
   1d252:	2b05      	cmp	r3, #5
   1d254:	bfc5      	ittet	gt
   1d256:	3b04      	subgt	r3, #4
   1d258:	2500      	movgt	r5, #0
   1d25a:	2501      	movle	r5, #1
   1d25c:	9305      	strgt	r3, [sp, #20]
   1d25e:	9b05      	ldr	r3, [sp, #20]
   1d260:	3b02      	subs	r3, #2
   1d262:	2b03      	cmp	r3, #3
   1d264:	f200 809a 	bhi.w	1d39c <_dtoa_r+0x31c>
   1d268:	e8df f003 	tbb	[pc, r3]
   1d26c:	8a7c7e2d 	.word	0x8a7c7e2d
   1d270:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
   1d274:	441d      	add	r5, r3
   1d276:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1d27a:	2b20      	cmp	r3, #32
   1d27c:	bfc6      	itte	gt
   1d27e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   1d282:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   1d286:	f1c3 0320 	rsble	r3, r3, #32
   1d28a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1d28e:	bfc5      	ittet	gt
   1d290:	fa09 f303 	lslgt.w	r3, r9, r3
   1d294:	fa26 f000 	lsrgt.w	r0, r6, r0
   1d298:	fa06 f003 	lslle.w	r0, r6, r3
   1d29c:	4318      	orrgt	r0, r3
   1d29e:	f7ff fa11 	bl	1c6c4 <__aeabi_ui2d>
   1d2a2:	2301      	movs	r3, #1
   1d2a4:	4606      	mov	r6, r0
   1d2a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1d2aa:	9310      	str	r3, [sp, #64]	; 0x40
   1d2ac:	e770      	b.n	1d190 <_dtoa_r+0x110>
   1d2ae:	2301      	movs	r3, #1
   1d2b0:	e7b5      	b.n	1d21e <_dtoa_r+0x19e>
   1d2b2:	900e      	str	r0, [sp, #56]	; 0x38
   1d2b4:	e7b4      	b.n	1d220 <_dtoa_r+0x1a0>
   1d2b6:	f1c9 0300 	rsb	r3, r9, #0
   1d2ba:	eba8 0809 	sub.w	r8, r8, r9
   1d2be:	9306      	str	r3, [sp, #24]
   1d2c0:	2300      	movs	r3, #0
   1d2c2:	930d      	str	r3, [sp, #52]	; 0x34
   1d2c4:	e7c1      	b.n	1d24a <_dtoa_r+0x1ca>
   1d2c6:	2300      	movs	r3, #0
   1d2c8:	9308      	str	r3, [sp, #32]
   1d2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d2cc:	2b00      	cmp	r3, #0
   1d2ce:	f300 8085 	bgt.w	1d3dc <_dtoa_r+0x35c>
   1d2d2:	f04f 0b01 	mov.w	fp, #1
   1d2d6:	465b      	mov	r3, fp
   1d2d8:	f8cd b004 	str.w	fp, [sp, #4]
   1d2dc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   1d2e0:	2200      	movs	r2, #0
   1d2e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d2e4:	6072      	str	r2, [r6, #4]
   1d2e6:	2204      	movs	r2, #4
   1d2e8:	f102 0014 	add.w	r0, r2, #20
   1d2ec:	6871      	ldr	r1, [r6, #4]
   1d2ee:	4298      	cmp	r0, r3
   1d2f0:	d97a      	bls.n	1d3e8 <_dtoa_r+0x368>
   1d2f2:	4620      	mov	r0, r4
   1d2f4:	f01e fae2 	bl	3b8bc <_Balloc>
   1d2f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d2fa:	6030      	str	r0, [r6, #0]
   1d2fc:	681b      	ldr	r3, [r3, #0]
   1d2fe:	9300      	str	r3, [sp, #0]
   1d300:	9b01      	ldr	r3, [sp, #4]
   1d302:	2b0e      	cmp	r3, #14
   1d304:	f200 80f5 	bhi.w	1d4f2 <_dtoa_r+0x472>
   1d308:	2d00      	cmp	r5, #0
   1d30a:	f000 80f2 	beq.w	1d4f2 <_dtoa_r+0x472>
   1d30e:	f1b9 0f00 	cmp.w	r9, #0
   1d312:	dd7d      	ble.n	1d410 <_dtoa_r+0x390>
   1d314:	f009 030f 	and.w	r3, r9, #15
   1d318:	4a2e      	ldr	r2, [pc, #184]	; (1d3d4 <_dtoa_r+0x354>)
   1d31a:	f419 7f80 	tst.w	r9, #256	; 0x100
   1d31e:	ea4f 1729 	mov.w	r7, r9, asr #4
   1d322:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1d326:	ed93 7b00 	vldr	d7, [r3]
   1d32a:	eeb0 8a47 	vmov.f32	s16, s14
   1d32e:	eef0 8a67 	vmov.f32	s17, s15
   1d332:	d05d      	beq.n	1d3f0 <_dtoa_r+0x370>
   1d334:	4b28      	ldr	r3, [pc, #160]	; (1d3d8 <_dtoa_r+0x358>)
   1d336:	f007 070f 	and.w	r7, r7, #15
   1d33a:	2503      	movs	r5, #3
   1d33c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1d340:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d344:	f7ff fcdc 	bl	1cd00 <__aeabi_ddiv>
   1d348:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d34c:	4e22      	ldr	r6, [pc, #136]	; (1d3d8 <_dtoa_r+0x358>)
   1d34e:	2f00      	cmp	r7, #0
   1d350:	d150      	bne.n	1d3f4 <_dtoa_r+0x374>
   1d352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1d356:	ec53 2b18 	vmov	r2, r3, d8
   1d35a:	f7ff fcd1 	bl	1cd00 <__aeabi_ddiv>
   1d35e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d362:	e06f      	b.n	1d444 <_dtoa_r+0x3c4>
   1d364:	2301      	movs	r3, #1
   1d366:	e7af      	b.n	1d2c8 <_dtoa_r+0x248>
   1d368:	2300      	movs	r3, #0
   1d36a:	9308      	str	r3, [sp, #32]
   1d36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d36e:	eb09 0b03 	add.w	fp, r9, r3
   1d372:	f10b 0301 	add.w	r3, fp, #1
   1d376:	2b01      	cmp	r3, #1
   1d378:	9301      	str	r3, [sp, #4]
   1d37a:	bfb8      	it	lt
   1d37c:	2301      	movlt	r3, #1
   1d37e:	e7af      	b.n	1d2e0 <_dtoa_r+0x260>
   1d380:	2301      	movs	r3, #1
   1d382:	e7f2      	b.n	1d36a <_dtoa_r+0x2ea>
   1d384:	2501      	movs	r5, #1
   1d386:	2300      	movs	r3, #0
   1d388:	9508      	str	r5, [sp, #32]
   1d38a:	9305      	str	r3, [sp, #20]
   1d38c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1d390:	2200      	movs	r2, #0
   1d392:	2312      	movs	r3, #18
   1d394:	f8cd b004 	str.w	fp, [sp, #4]
   1d398:	9209      	str	r2, [sp, #36]	; 0x24
   1d39a:	e7a1      	b.n	1d2e0 <_dtoa_r+0x260>
   1d39c:	2301      	movs	r3, #1
   1d39e:	9308      	str	r3, [sp, #32]
   1d3a0:	e7f4      	b.n	1d38c <_dtoa_r+0x30c>
   1d3a2:	bf00      	nop
   1d3a4:	f3af 8000 	nop.w
   1d3a8:	636f4361 	.word	0x636f4361
   1d3ac:	3fd287a7 	.word	0x3fd287a7
   1d3b0:	8b60c8b3 	.word	0x8b60c8b3
   1d3b4:	3fc68a28 	.word	0x3fc68a28
   1d3b8:	509f79fb 	.word	0x509f79fb
   1d3bc:	3fd34413 	.word	0x3fd34413
   1d3c0:	7ff00000 	.word	0x7ff00000
   1d3c4:	00040afe 	.word	0x00040afe
   1d3c8:	00040af5 	.word	0x00040af5
   1d3cc:	0003d736 	.word	0x0003d736
   1d3d0:	3ff80000 	.word	0x3ff80000
   1d3d4:	0003c460 	.word	0x0003c460
   1d3d8:	0003c438 	.word	0x0003c438
   1d3dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   1d3e0:	465b      	mov	r3, fp
   1d3e2:	f8cd b004 	str.w	fp, [sp, #4]
   1d3e6:	e77b      	b.n	1d2e0 <_dtoa_r+0x260>
   1d3e8:	3101      	adds	r1, #1
   1d3ea:	0052      	lsls	r2, r2, #1
   1d3ec:	6071      	str	r1, [r6, #4]
   1d3ee:	e77b      	b.n	1d2e8 <_dtoa_r+0x268>
   1d3f0:	2502      	movs	r5, #2
   1d3f2:	e7ab      	b.n	1d34c <_dtoa_r+0x2cc>
   1d3f4:	07f9      	lsls	r1, r7, #31
   1d3f6:	d508      	bpl.n	1d40a <_dtoa_r+0x38a>
   1d3f8:	3501      	adds	r5, #1
   1d3fa:	ec51 0b18 	vmov	r0, r1, d8
   1d3fe:	e9d6 2300 	ldrd	r2, r3, [r6]
   1d402:	f7ff fb53 	bl	1caac <__aeabi_dmul>
   1d406:	ec41 0b18 	vmov	d8, r0, r1
   1d40a:	107f      	asrs	r7, r7, #1
   1d40c:	3608      	adds	r6, #8
   1d40e:	e79e      	b.n	1d34e <_dtoa_r+0x2ce>
   1d410:	f000 80ab 	beq.w	1d56a <_dtoa_r+0x4ea>
   1d414:	f1c9 0600 	rsb	r6, r9, #0
   1d418:	4baa      	ldr	r3, [pc, #680]	; (1d6c4 <_dtoa_r+0x644>)
   1d41a:	4fab      	ldr	r7, [pc, #684]	; (1d6c8 <_dtoa_r+0x648>)
   1d41c:	2502      	movs	r5, #2
   1d41e:	f006 020f 	and.w	r2, r6, #15
   1d422:	1136      	asrs	r6, r6, #4
   1d424:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d428:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d430:	f7ff fb3c 	bl	1caac <__aeabi_dmul>
   1d434:	2300      	movs	r3, #0
   1d436:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d43a:	2e00      	cmp	r6, #0
   1d43c:	f040 808a 	bne.w	1d554 <_dtoa_r+0x4d4>
   1d440:	2b00      	cmp	r3, #0
   1d442:	d18c      	bne.n	1d35e <_dtoa_r+0x2de>
   1d444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d446:	2b00      	cmp	r3, #0
   1d448:	f000 8091 	beq.w	1d56e <_dtoa_r+0x4ee>
   1d44c:	2200      	movs	r2, #0
   1d44e:	4b9f      	ldr	r3, [pc, #636]	; (1d6cc <_dtoa_r+0x64c>)
   1d450:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1d454:	4630      	mov	r0, r6
   1d456:	4639      	mov	r1, r7
   1d458:	f7ff fd9a 	bl	1cf90 <__aeabi_dcmplt>
   1d45c:	2800      	cmp	r0, #0
   1d45e:	f000 8086 	beq.w	1d56e <_dtoa_r+0x4ee>
   1d462:	9b01      	ldr	r3, [sp, #4]
   1d464:	2b00      	cmp	r3, #0
   1d466:	f000 8082 	beq.w	1d56e <_dtoa_r+0x4ee>
   1d46a:	f1bb 0f00 	cmp.w	fp, #0
   1d46e:	dd3c      	ble.n	1d4ea <_dtoa_r+0x46a>
   1d470:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   1d474:	3501      	adds	r5, #1
   1d476:	2200      	movs	r2, #0
   1d478:	4630      	mov	r0, r6
   1d47a:	9307      	str	r3, [sp, #28]
   1d47c:	4639      	mov	r1, r7
   1d47e:	4b94      	ldr	r3, [pc, #592]	; (1d6d0 <_dtoa_r+0x650>)
   1d480:	f7ff fb14 	bl	1caac <__aeabi_dmul>
   1d484:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   1d488:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d48c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1d490:	4628      	mov	r0, r5
   1d492:	f7ff f927 	bl	1c6e4 <__aeabi_i2d>
   1d496:	4632      	mov	r2, r6
   1d498:	463b      	mov	r3, r7
   1d49a:	f7ff fb07 	bl	1caac <__aeabi_dmul>
   1d49e:	4b8d      	ldr	r3, [pc, #564]	; (1d6d4 <_dtoa_r+0x654>)
   1d4a0:	2200      	movs	r2, #0
   1d4a2:	f7fe ffd3 	bl	1c44c <__adddf3>
   1d4a6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   1d4aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d4ae:	9303      	str	r3, [sp, #12]
   1d4b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d4b2:	2b00      	cmp	r3, #0
   1d4b4:	d160      	bne.n	1d578 <_dtoa_r+0x4f8>
   1d4b6:	2200      	movs	r2, #0
   1d4b8:	4b87      	ldr	r3, [pc, #540]	; (1d6d8 <_dtoa_r+0x658>)
   1d4ba:	4630      	mov	r0, r6
   1d4bc:	4639      	mov	r1, r7
   1d4be:	f7fe ffc3 	bl	1c448 <__aeabi_dsub>
   1d4c2:	4606      	mov	r6, r0
   1d4c4:	460f      	mov	r7, r1
   1d4c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d4ca:	f7ff fd7f 	bl	1cfcc <__aeabi_dcmpgt>
   1d4ce:	2800      	cmp	r0, #0
   1d4d0:	f040 8297 	bne.w	1da02 <_dtoa_r+0x982>
   1d4d4:	4630      	mov	r0, r6
   1d4d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1d4da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1d4de:	4639      	mov	r1, r7
   1d4e0:	f7ff fd56 	bl	1cf90 <__aeabi_dcmplt>
   1d4e4:	2800      	cmp	r0, #0
   1d4e6:	f040 8289 	bne.w	1d9fc <_dtoa_r+0x97c>
   1d4ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1d4ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d4f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1d4f4:	2b00      	cmp	r3, #0
   1d4f6:	f2c0 815b 	blt.w	1d7b0 <_dtoa_r+0x730>
   1d4fa:	f1b9 0f0e 	cmp.w	r9, #14
   1d4fe:	f300 8157 	bgt.w	1d7b0 <_dtoa_r+0x730>
   1d502:	4b70      	ldr	r3, [pc, #448]	; (1d6c4 <_dtoa_r+0x644>)
   1d504:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1d508:	ed93 7b00 	vldr	d7, [r3]
   1d50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d50e:	2b00      	cmp	r3, #0
   1d510:	eeb0 8a47 	vmov.f32	s16, s14
   1d514:	eef0 8a67 	vmov.f32	s17, s15
   1d518:	f280 80e2 	bge.w	1d6e0 <_dtoa_r+0x660>
   1d51c:	9b01      	ldr	r3, [sp, #4]
   1d51e:	2b00      	cmp	r3, #0
   1d520:	f300 80de 	bgt.w	1d6e0 <_dtoa_r+0x660>
   1d524:	f040 826a 	bne.w	1d9fc <_dtoa_r+0x97c>
   1d528:	2200      	movs	r2, #0
   1d52a:	4b6b      	ldr	r3, [pc, #428]	; (1d6d8 <_dtoa_r+0x658>)
   1d52c:	ec51 0b17 	vmov	r0, r1, d7
   1d530:	f7ff fabc 	bl	1caac <__aeabi_dmul>
   1d534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d538:	f7ff fd3e 	bl	1cfb8 <__aeabi_dcmpge>
   1d53c:	9e01      	ldr	r6, [sp, #4]
   1d53e:	4637      	mov	r7, r6
   1d540:	2800      	cmp	r0, #0
   1d542:	f040 8240 	bne.w	1d9c6 <_dtoa_r+0x946>
   1d546:	9d00      	ldr	r5, [sp, #0]
   1d548:	2331      	movs	r3, #49	; 0x31
   1d54a:	f109 0901 	add.w	r9, r9, #1
   1d54e:	f805 3b01 	strb.w	r3, [r5], #1
   1d552:	e23c      	b.n	1d9ce <_dtoa_r+0x94e>
   1d554:	07f2      	lsls	r2, r6, #31
   1d556:	d505      	bpl.n	1d564 <_dtoa_r+0x4e4>
   1d558:	3501      	adds	r5, #1
   1d55a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1d55e:	f7ff faa5 	bl	1caac <__aeabi_dmul>
   1d562:	2301      	movs	r3, #1
   1d564:	1076      	asrs	r6, r6, #1
   1d566:	3708      	adds	r7, #8
   1d568:	e767      	b.n	1d43a <_dtoa_r+0x3ba>
   1d56a:	2502      	movs	r5, #2
   1d56c:	e76a      	b.n	1d444 <_dtoa_r+0x3c4>
   1d56e:	9b01      	ldr	r3, [sp, #4]
   1d570:	f8cd 901c 	str.w	r9, [sp, #28]
   1d574:	930c      	str	r3, [sp, #48]	; 0x30
   1d576:	e789      	b.n	1d48c <_dtoa_r+0x40c>
   1d578:	9900      	ldr	r1, [sp, #0]
   1d57a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1d57c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d57e:	4401      	add	r1, r0
   1d580:	4b50      	ldr	r3, [pc, #320]	; (1d6c4 <_dtoa_r+0x644>)
   1d582:	ed9d 7b02 	vldr	d7, [sp, #8]
   1d586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d58a:	9102      	str	r1, [sp, #8]
   1d58c:	9908      	ldr	r1, [sp, #32]
   1d58e:	eeb0 8a47 	vmov.f32	s16, s14
   1d592:	eef0 8a67 	vmov.f32	s17, s15
   1d596:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1d59a:	2900      	cmp	r1, #0
   1d59c:	d045      	beq.n	1d62a <_dtoa_r+0x5aa>
   1d59e:	2000      	movs	r0, #0
   1d5a0:	494e      	ldr	r1, [pc, #312]	; (1d6dc <_dtoa_r+0x65c>)
   1d5a2:	f7ff fbad 	bl	1cd00 <__aeabi_ddiv>
   1d5a6:	ec53 2b18 	vmov	r2, r3, d8
   1d5aa:	f7fe ff4d 	bl	1c448 <__aeabi_dsub>
   1d5ae:	9d00      	ldr	r5, [sp, #0]
   1d5b0:	ec41 0b18 	vmov	d8, r0, r1
   1d5b4:	4639      	mov	r1, r7
   1d5b6:	4630      	mov	r0, r6
   1d5b8:	f7ff fd28 	bl	1d00c <__aeabi_d2iz>
   1d5bc:	900c      	str	r0, [sp, #48]	; 0x30
   1d5be:	f7ff f891 	bl	1c6e4 <__aeabi_i2d>
   1d5c2:	4602      	mov	r2, r0
   1d5c4:	460b      	mov	r3, r1
   1d5c6:	4630      	mov	r0, r6
   1d5c8:	4639      	mov	r1, r7
   1d5ca:	f7fe ff3d 	bl	1c448 <__aeabi_dsub>
   1d5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d5d0:	4606      	mov	r6, r0
   1d5d2:	460f      	mov	r7, r1
   1d5d4:	3330      	adds	r3, #48	; 0x30
   1d5d6:	f805 3b01 	strb.w	r3, [r5], #1
   1d5da:	ec53 2b18 	vmov	r2, r3, d8
   1d5de:	f7ff fcd7 	bl	1cf90 <__aeabi_dcmplt>
   1d5e2:	2800      	cmp	r0, #0
   1d5e4:	d164      	bne.n	1d6b0 <_dtoa_r+0x630>
   1d5e6:	4632      	mov	r2, r6
   1d5e8:	463b      	mov	r3, r7
   1d5ea:	2000      	movs	r0, #0
   1d5ec:	4937      	ldr	r1, [pc, #220]	; (1d6cc <_dtoa_r+0x64c>)
   1d5ee:	f7fe ff2b 	bl	1c448 <__aeabi_dsub>
   1d5f2:	ec53 2b18 	vmov	r2, r3, d8
   1d5f6:	f7ff fccb 	bl	1cf90 <__aeabi_dcmplt>
   1d5fa:	2800      	cmp	r0, #0
   1d5fc:	f040 80b8 	bne.w	1d770 <_dtoa_r+0x6f0>
   1d600:	9b02      	ldr	r3, [sp, #8]
   1d602:	429d      	cmp	r5, r3
   1d604:	f43f af71 	beq.w	1d4ea <_dtoa_r+0x46a>
   1d608:	2200      	movs	r2, #0
   1d60a:	4b31      	ldr	r3, [pc, #196]	; (1d6d0 <_dtoa_r+0x650>)
   1d60c:	ec51 0b18 	vmov	r0, r1, d8
   1d610:	f7ff fa4c 	bl	1caac <__aeabi_dmul>
   1d614:	2200      	movs	r2, #0
   1d616:	4b2e      	ldr	r3, [pc, #184]	; (1d6d0 <_dtoa_r+0x650>)
   1d618:	ec41 0b18 	vmov	d8, r0, r1
   1d61c:	4630      	mov	r0, r6
   1d61e:	4639      	mov	r1, r7
   1d620:	f7ff fa44 	bl	1caac <__aeabi_dmul>
   1d624:	4606      	mov	r6, r0
   1d626:	460f      	mov	r7, r1
   1d628:	e7c4      	b.n	1d5b4 <_dtoa_r+0x534>
   1d62a:	ec51 0b17 	vmov	r0, r1, d7
   1d62e:	f7ff fa3d 	bl	1caac <__aeabi_dmul>
   1d632:	9b02      	ldr	r3, [sp, #8]
   1d634:	9d00      	ldr	r5, [sp, #0]
   1d636:	930c      	str	r3, [sp, #48]	; 0x30
   1d638:	ec41 0b18 	vmov	d8, r0, r1
   1d63c:	4639      	mov	r1, r7
   1d63e:	4630      	mov	r0, r6
   1d640:	f7ff fce4 	bl	1d00c <__aeabi_d2iz>
   1d644:	9011      	str	r0, [sp, #68]	; 0x44
   1d646:	f7ff f84d 	bl	1c6e4 <__aeabi_i2d>
   1d64a:	4602      	mov	r2, r0
   1d64c:	460b      	mov	r3, r1
   1d64e:	4630      	mov	r0, r6
   1d650:	4639      	mov	r1, r7
   1d652:	f7fe fef9 	bl	1c448 <__aeabi_dsub>
   1d656:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d658:	4606      	mov	r6, r0
   1d65a:	460f      	mov	r7, r1
   1d65c:	3330      	adds	r3, #48	; 0x30
   1d65e:	2200      	movs	r2, #0
   1d660:	f805 3b01 	strb.w	r3, [r5], #1
   1d664:	9b02      	ldr	r3, [sp, #8]
   1d666:	429d      	cmp	r5, r3
   1d668:	d125      	bne.n	1d6b6 <_dtoa_r+0x636>
   1d66a:	4b1c      	ldr	r3, [pc, #112]	; (1d6dc <_dtoa_r+0x65c>)
   1d66c:	ec51 0b18 	vmov	r0, r1, d8
   1d670:	f7fe feec 	bl	1c44c <__adddf3>
   1d674:	4602      	mov	r2, r0
   1d676:	460b      	mov	r3, r1
   1d678:	4630      	mov	r0, r6
   1d67a:	4639      	mov	r1, r7
   1d67c:	f7ff fca6 	bl	1cfcc <__aeabi_dcmpgt>
   1d680:	2800      	cmp	r0, #0
   1d682:	d175      	bne.n	1d770 <_dtoa_r+0x6f0>
   1d684:	2000      	movs	r0, #0
   1d686:	4915      	ldr	r1, [pc, #84]	; (1d6dc <_dtoa_r+0x65c>)
   1d688:	ec53 2b18 	vmov	r2, r3, d8
   1d68c:	f7fe fedc 	bl	1c448 <__aeabi_dsub>
   1d690:	4602      	mov	r2, r0
   1d692:	460b      	mov	r3, r1
   1d694:	4630      	mov	r0, r6
   1d696:	4639      	mov	r1, r7
   1d698:	f7ff fc7a 	bl	1cf90 <__aeabi_dcmplt>
   1d69c:	2800      	cmp	r0, #0
   1d69e:	f43f af24 	beq.w	1d4ea <_dtoa_r+0x46a>
   1d6a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1d6a4:	1e6b      	subs	r3, r5, #1
   1d6a6:	930c      	str	r3, [sp, #48]	; 0x30
   1d6a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1d6ac:	2b30      	cmp	r3, #48	; 0x30
   1d6ae:	d0f8      	beq.n	1d6a2 <_dtoa_r+0x622>
   1d6b0:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1d6b4:	e04a      	b.n	1d74c <_dtoa_r+0x6cc>
   1d6b6:	4b06      	ldr	r3, [pc, #24]	; (1d6d0 <_dtoa_r+0x650>)
   1d6b8:	f7ff f9f8 	bl	1caac <__aeabi_dmul>
   1d6bc:	4606      	mov	r6, r0
   1d6be:	460f      	mov	r7, r1
   1d6c0:	e7bc      	b.n	1d63c <_dtoa_r+0x5bc>
   1d6c2:	bf00      	nop
   1d6c4:	0003c460 	.word	0x0003c460
   1d6c8:	0003c438 	.word	0x0003c438
   1d6cc:	3ff00000 	.word	0x3ff00000
   1d6d0:	40240000 	.word	0x40240000
   1d6d4:	401c0000 	.word	0x401c0000
   1d6d8:	40140000 	.word	0x40140000
   1d6dc:	3fe00000 	.word	0x3fe00000
   1d6e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1d6e4:	9d00      	ldr	r5, [sp, #0]
   1d6e6:	4630      	mov	r0, r6
   1d6e8:	4639      	mov	r1, r7
   1d6ea:	ec53 2b18 	vmov	r2, r3, d8
   1d6ee:	f7ff fb07 	bl	1cd00 <__aeabi_ddiv>
   1d6f2:	f7ff fc8b 	bl	1d00c <__aeabi_d2iz>
   1d6f6:	4680      	mov	r8, r0
   1d6f8:	f7fe fff4 	bl	1c6e4 <__aeabi_i2d>
   1d6fc:	ec53 2b18 	vmov	r2, r3, d8
   1d700:	f7ff f9d4 	bl	1caac <__aeabi_dmul>
   1d704:	4602      	mov	r2, r0
   1d706:	4630      	mov	r0, r6
   1d708:	f108 0630 	add.w	r6, r8, #48	; 0x30
   1d70c:	460b      	mov	r3, r1
   1d70e:	4639      	mov	r1, r7
   1d710:	f7fe fe9a 	bl	1c448 <__aeabi_dsub>
   1d714:	f805 6b01 	strb.w	r6, [r5], #1
   1d718:	9e00      	ldr	r6, [sp, #0]
   1d71a:	4602      	mov	r2, r0
   1d71c:	9f01      	ldr	r7, [sp, #4]
   1d71e:	460b      	mov	r3, r1
   1d720:	1bae      	subs	r6, r5, r6
   1d722:	42b7      	cmp	r7, r6
   1d724:	d137      	bne.n	1d796 <_dtoa_r+0x716>
   1d726:	f7fe fe91 	bl	1c44c <__adddf3>
   1d72a:	4606      	mov	r6, r0
   1d72c:	460f      	mov	r7, r1
   1d72e:	ec53 2b18 	vmov	r2, r3, d8
   1d732:	f7ff fc4b 	bl	1cfcc <__aeabi_dcmpgt>
   1d736:	b9c8      	cbnz	r0, 1d76c <_dtoa_r+0x6ec>
   1d738:	4630      	mov	r0, r6
   1d73a:	4639      	mov	r1, r7
   1d73c:	ec53 2b18 	vmov	r2, r3, d8
   1d740:	f7ff fc1c 	bl	1cf7c <__aeabi_dcmpeq>
   1d744:	b110      	cbz	r0, 1d74c <_dtoa_r+0x6cc>
   1d746:	f018 0f01 	tst.w	r8, #1
   1d74a:	d10f      	bne.n	1d76c <_dtoa_r+0x6ec>
   1d74c:	4620      	mov	r0, r4
   1d74e:	4651      	mov	r1, sl
   1d750:	f01e f8e8 	bl	3b924 <_Bfree>
   1d754:	2300      	movs	r3, #0
   1d756:	f109 0001 	add.w	r0, r9, #1
   1d75a:	702b      	strb	r3, [r5, #0]
   1d75c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d75e:	6018      	str	r0, [r3, #0]
   1d760:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1d762:	2b00      	cmp	r3, #0
   1d764:	f43f acd8 	beq.w	1d118 <_dtoa_r+0x98>
   1d768:	601d      	str	r5, [r3, #0]
   1d76a:	e4d5      	b.n	1d118 <_dtoa_r+0x98>
   1d76c:	f8cd 901c 	str.w	r9, [sp, #28]
   1d770:	462b      	mov	r3, r5
   1d772:	461d      	mov	r5, r3
   1d774:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1d778:	2a39      	cmp	r2, #57	; 0x39
   1d77a:	d108      	bne.n	1d78e <_dtoa_r+0x70e>
   1d77c:	9a00      	ldr	r2, [sp, #0]
   1d77e:	429a      	cmp	r2, r3
   1d780:	d1f7      	bne.n	1d772 <_dtoa_r+0x6f2>
   1d782:	9a07      	ldr	r2, [sp, #28]
   1d784:	9900      	ldr	r1, [sp, #0]
   1d786:	3201      	adds	r2, #1
   1d788:	9207      	str	r2, [sp, #28]
   1d78a:	2230      	movs	r2, #48	; 0x30
   1d78c:	700a      	strb	r2, [r1, #0]
   1d78e:	781a      	ldrb	r2, [r3, #0]
   1d790:	3201      	adds	r2, #1
   1d792:	701a      	strb	r2, [r3, #0]
   1d794:	e78c      	b.n	1d6b0 <_dtoa_r+0x630>
   1d796:	2200      	movs	r2, #0
   1d798:	4b9c      	ldr	r3, [pc, #624]	; (1da0c <_dtoa_r+0x98c>)
   1d79a:	f7ff f987 	bl	1caac <__aeabi_dmul>
   1d79e:	2200      	movs	r2, #0
   1d7a0:	2300      	movs	r3, #0
   1d7a2:	4606      	mov	r6, r0
   1d7a4:	460f      	mov	r7, r1
   1d7a6:	f7ff fbe9 	bl	1cf7c <__aeabi_dcmpeq>
   1d7aa:	2800      	cmp	r0, #0
   1d7ac:	d09b      	beq.n	1d6e6 <_dtoa_r+0x666>
   1d7ae:	e7cd      	b.n	1d74c <_dtoa_r+0x6cc>
   1d7b0:	9a08      	ldr	r2, [sp, #32]
   1d7b2:	2a00      	cmp	r2, #0
   1d7b4:	f000 80c4 	beq.w	1d940 <_dtoa_r+0x8c0>
   1d7b8:	9a05      	ldr	r2, [sp, #20]
   1d7ba:	2a01      	cmp	r2, #1
   1d7bc:	f300 80a9 	bgt.w	1d912 <_dtoa_r+0x892>
   1d7c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1d7c2:	2a00      	cmp	r2, #0
   1d7c4:	f000 80a1 	beq.w	1d90a <_dtoa_r+0x88a>
   1d7c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1d7cc:	9e06      	ldr	r6, [sp, #24]
   1d7ce:	4645      	mov	r5, r8
   1d7d0:	9a04      	ldr	r2, [sp, #16]
   1d7d2:	2101      	movs	r1, #1
   1d7d4:	4620      	mov	r0, r4
   1d7d6:	4498      	add	r8, r3
   1d7d8:	441a      	add	r2, r3
   1d7da:	9204      	str	r2, [sp, #16]
   1d7dc:	f01e f948 	bl	3ba70 <__i2b>
   1d7e0:	4607      	mov	r7, r0
   1d7e2:	2d00      	cmp	r5, #0
   1d7e4:	dd0b      	ble.n	1d7fe <_dtoa_r+0x77e>
   1d7e6:	9b04      	ldr	r3, [sp, #16]
   1d7e8:	2b00      	cmp	r3, #0
   1d7ea:	dd08      	ble.n	1d7fe <_dtoa_r+0x77e>
   1d7ec:	42ab      	cmp	r3, r5
   1d7ee:	9a04      	ldr	r2, [sp, #16]
   1d7f0:	bfa8      	it	ge
   1d7f2:	462b      	movge	r3, r5
   1d7f4:	eba8 0803 	sub.w	r8, r8, r3
   1d7f8:	1aed      	subs	r5, r5, r3
   1d7fa:	1ad3      	subs	r3, r2, r3
   1d7fc:	9304      	str	r3, [sp, #16]
   1d7fe:	9b06      	ldr	r3, [sp, #24]
   1d800:	b1fb      	cbz	r3, 1d842 <_dtoa_r+0x7c2>
   1d802:	9b08      	ldr	r3, [sp, #32]
   1d804:	2b00      	cmp	r3, #0
   1d806:	f000 809f 	beq.w	1d948 <_dtoa_r+0x8c8>
   1d80a:	2e00      	cmp	r6, #0
   1d80c:	dd11      	ble.n	1d832 <_dtoa_r+0x7b2>
   1d80e:	4639      	mov	r1, r7
   1d810:	4632      	mov	r2, r6
   1d812:	4620      	mov	r0, r4
   1d814:	f019 febe 	bl	37594 <__pow5mult>
   1d818:	4652      	mov	r2, sl
   1d81a:	4601      	mov	r1, r0
   1d81c:	4607      	mov	r7, r0
   1d81e:	4620      	mov	r0, r4
   1d820:	f01e f92f 	bl	3ba82 <__multiply>
   1d824:	4651      	mov	r1, sl
   1d826:	9007      	str	r0, [sp, #28]
   1d828:	4620      	mov	r0, r4
   1d82a:	f01e f87b 	bl	3b924 <_Bfree>
   1d82e:	9b07      	ldr	r3, [sp, #28]
   1d830:	469a      	mov	sl, r3
   1d832:	9b06      	ldr	r3, [sp, #24]
   1d834:	1b9a      	subs	r2, r3, r6
   1d836:	d004      	beq.n	1d842 <_dtoa_r+0x7c2>
   1d838:	4651      	mov	r1, sl
   1d83a:	4620      	mov	r0, r4
   1d83c:	f019 feaa 	bl	37594 <__pow5mult>
   1d840:	4682      	mov	sl, r0
   1d842:	2101      	movs	r1, #1
   1d844:	4620      	mov	r0, r4
   1d846:	f01e f913 	bl	3ba70 <__i2b>
   1d84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d84c:	4606      	mov	r6, r0
   1d84e:	2b00      	cmp	r3, #0
   1d850:	dd7c      	ble.n	1d94c <_dtoa_r+0x8cc>
   1d852:	461a      	mov	r2, r3
   1d854:	4601      	mov	r1, r0
   1d856:	4620      	mov	r0, r4
   1d858:	f019 fe9c 	bl	37594 <__pow5mult>
   1d85c:	9b05      	ldr	r3, [sp, #20]
   1d85e:	4606      	mov	r6, r0
   1d860:	2b01      	cmp	r3, #1
   1d862:	dd76      	ble.n	1d952 <_dtoa_r+0x8d2>
   1d864:	2300      	movs	r3, #0
   1d866:	9306      	str	r3, [sp, #24]
   1d868:	6933      	ldr	r3, [r6, #16]
   1d86a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1d86e:	6918      	ldr	r0, [r3, #16]
   1d870:	f01e f8ae 	bl	3b9d0 <__hi0bits>
   1d874:	f1c0 0020 	rsb	r0, r0, #32
   1d878:	9b04      	ldr	r3, [sp, #16]
   1d87a:	4418      	add	r0, r3
   1d87c:	f010 001f 	ands.w	r0, r0, #31
   1d880:	f000 8086 	beq.w	1d990 <_dtoa_r+0x910>
   1d884:	f1c0 0320 	rsb	r3, r0, #32
   1d888:	2b04      	cmp	r3, #4
   1d88a:	dd7f      	ble.n	1d98c <_dtoa_r+0x90c>
   1d88c:	f1c0 001c 	rsb	r0, r0, #28
   1d890:	9b04      	ldr	r3, [sp, #16]
   1d892:	4480      	add	r8, r0
   1d894:	4405      	add	r5, r0
   1d896:	4403      	add	r3, r0
   1d898:	9304      	str	r3, [sp, #16]
   1d89a:	f1b8 0f00 	cmp.w	r8, #0
   1d89e:	dd05      	ble.n	1d8ac <_dtoa_r+0x82c>
   1d8a0:	4651      	mov	r1, sl
   1d8a2:	4642      	mov	r2, r8
   1d8a4:	4620      	mov	r0, r4
   1d8a6:	f01e f987 	bl	3bbb8 <__lshift>
   1d8aa:	4682      	mov	sl, r0
   1d8ac:	9b04      	ldr	r3, [sp, #16]
   1d8ae:	2b00      	cmp	r3, #0
   1d8b0:	dd05      	ble.n	1d8be <_dtoa_r+0x83e>
   1d8b2:	4631      	mov	r1, r6
   1d8b4:	461a      	mov	r2, r3
   1d8b6:	4620      	mov	r0, r4
   1d8b8:	f01e f97e 	bl	3bbb8 <__lshift>
   1d8bc:	4606      	mov	r6, r0
   1d8be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d8c0:	2b00      	cmp	r3, #0
   1d8c2:	d067      	beq.n	1d994 <_dtoa_r+0x914>
   1d8c4:	4631      	mov	r1, r6
   1d8c6:	4650      	mov	r0, sl
   1d8c8:	f01e f9d5 	bl	3bc76 <__mcmp>
   1d8cc:	2800      	cmp	r0, #0
   1d8ce:	da61      	bge.n	1d994 <_dtoa_r+0x914>
   1d8d0:	2300      	movs	r3, #0
   1d8d2:	4651      	mov	r1, sl
   1d8d4:	220a      	movs	r2, #10
   1d8d6:	4620      	mov	r0, r4
   1d8d8:	f01e f83b 	bl	3b952 <__multadd>
   1d8dc:	9b08      	ldr	r3, [sp, #32]
   1d8de:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1d8e2:	4682      	mov	sl, r0
   1d8e4:	2b00      	cmp	r3, #0
   1d8e6:	f000 8187 	beq.w	1dbf8 <_dtoa_r+0xb78>
   1d8ea:	4639      	mov	r1, r7
   1d8ec:	2300      	movs	r3, #0
   1d8ee:	220a      	movs	r2, #10
   1d8f0:	4620      	mov	r0, r4
   1d8f2:	f01e f82e 	bl	3b952 <__multadd>
   1d8f6:	f1bb 0f00 	cmp.w	fp, #0
   1d8fa:	4607      	mov	r7, r0
   1d8fc:	f300 808e 	bgt.w	1da1c <_dtoa_r+0x99c>
   1d900:	9b05      	ldr	r3, [sp, #20]
   1d902:	2b02      	cmp	r3, #2
   1d904:	f340 808a 	ble.w	1da1c <_dtoa_r+0x99c>
   1d908:	e04c      	b.n	1d9a4 <_dtoa_r+0x924>
   1d90a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1d90c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1d910:	e75c      	b.n	1d7cc <_dtoa_r+0x74c>
   1d912:	9b01      	ldr	r3, [sp, #4]
   1d914:	1e5e      	subs	r6, r3, #1
   1d916:	9b06      	ldr	r3, [sp, #24]
   1d918:	42b3      	cmp	r3, r6
   1d91a:	bfb7      	itett	lt
   1d91c:	9b06      	ldrlt	r3, [sp, #24]
   1d91e:	1b9e      	subge	r6, r3, r6
   1d920:	9606      	strlt	r6, [sp, #24]
   1d922:	1af2      	sublt	r2, r6, r3
   1d924:	bfbf      	itttt	lt
   1d926:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
   1d928:	2600      	movlt	r6, #0
   1d92a:	189b      	addlt	r3, r3, r2
   1d92c:	930d      	strlt	r3, [sp, #52]	; 0x34
   1d92e:	9b01      	ldr	r3, [sp, #4]
   1d930:	2b00      	cmp	r3, #0
   1d932:	bfb5      	itete	lt
   1d934:	eba8 0503 	sublt.w	r5, r8, r3
   1d938:	4645      	movge	r5, r8
   1d93a:	2300      	movlt	r3, #0
   1d93c:	9b01      	ldrge	r3, [sp, #4]
   1d93e:	e747      	b.n	1d7d0 <_dtoa_r+0x750>
   1d940:	9e06      	ldr	r6, [sp, #24]
   1d942:	4645      	mov	r5, r8
   1d944:	9f08      	ldr	r7, [sp, #32]
   1d946:	e74c      	b.n	1d7e2 <_dtoa_r+0x762>
   1d948:	9a06      	ldr	r2, [sp, #24]
   1d94a:	e775      	b.n	1d838 <_dtoa_r+0x7b8>
   1d94c:	9b05      	ldr	r3, [sp, #20]
   1d94e:	2b01      	cmp	r3, #1
   1d950:	dc18      	bgt.n	1d984 <_dtoa_r+0x904>
   1d952:	9b02      	ldr	r3, [sp, #8]
   1d954:	b9b3      	cbnz	r3, 1d984 <_dtoa_r+0x904>
   1d956:	9b03      	ldr	r3, [sp, #12]
   1d958:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d95c:	b9a3      	cbnz	r3, 1d988 <_dtoa_r+0x908>
   1d95e:	9b03      	ldr	r3, [sp, #12]
   1d960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1d964:	0d1b      	lsrs	r3, r3, #20
   1d966:	051b      	lsls	r3, r3, #20
   1d968:	b12b      	cbz	r3, 1d976 <_dtoa_r+0x8f6>
   1d96a:	9b04      	ldr	r3, [sp, #16]
   1d96c:	f108 0801 	add.w	r8, r8, #1
   1d970:	3301      	adds	r3, #1
   1d972:	9304      	str	r3, [sp, #16]
   1d974:	2301      	movs	r3, #1
   1d976:	9306      	str	r3, [sp, #24]
   1d978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d97a:	2b00      	cmp	r3, #0
   1d97c:	f47f af74 	bne.w	1d868 <_dtoa_r+0x7e8>
   1d980:	2001      	movs	r0, #1
   1d982:	e779      	b.n	1d878 <_dtoa_r+0x7f8>
   1d984:	2300      	movs	r3, #0
   1d986:	e7f6      	b.n	1d976 <_dtoa_r+0x8f6>
   1d988:	9b02      	ldr	r3, [sp, #8]
   1d98a:	e7f4      	b.n	1d976 <_dtoa_r+0x8f6>
   1d98c:	d085      	beq.n	1d89a <_dtoa_r+0x81a>
   1d98e:	4618      	mov	r0, r3
   1d990:	301c      	adds	r0, #28
   1d992:	e77d      	b.n	1d890 <_dtoa_r+0x810>
   1d994:	9b01      	ldr	r3, [sp, #4]
   1d996:	2b00      	cmp	r3, #0
   1d998:	dc3a      	bgt.n	1da10 <_dtoa_r+0x990>
   1d99a:	9b05      	ldr	r3, [sp, #20]
   1d99c:	2b02      	cmp	r3, #2
   1d99e:	dd37      	ble.n	1da10 <_dtoa_r+0x990>
   1d9a0:	f8dd b004 	ldr.w	fp, [sp, #4]
   1d9a4:	f1bb 0f00 	cmp.w	fp, #0
   1d9a8:	d10d      	bne.n	1d9c6 <_dtoa_r+0x946>
   1d9aa:	4631      	mov	r1, r6
   1d9ac:	465b      	mov	r3, fp
   1d9ae:	2205      	movs	r2, #5
   1d9b0:	4620      	mov	r0, r4
   1d9b2:	f01d ffce 	bl	3b952 <__multadd>
   1d9b6:	4601      	mov	r1, r0
   1d9b8:	4606      	mov	r6, r0
   1d9ba:	4650      	mov	r0, sl
   1d9bc:	f01e f95b 	bl	3bc76 <__mcmp>
   1d9c0:	2800      	cmp	r0, #0
   1d9c2:	f73f adc0 	bgt.w	1d546 <_dtoa_r+0x4c6>
   1d9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d9c8:	9d00      	ldr	r5, [sp, #0]
   1d9ca:	ea6f 0903 	mvn.w	r9, r3
   1d9ce:	f04f 0800 	mov.w	r8, #0
   1d9d2:	4631      	mov	r1, r6
   1d9d4:	4620      	mov	r0, r4
   1d9d6:	f01d ffa5 	bl	3b924 <_Bfree>
   1d9da:	2f00      	cmp	r7, #0
   1d9dc:	f43f aeb6 	beq.w	1d74c <_dtoa_r+0x6cc>
   1d9e0:	f1b8 0f00 	cmp.w	r8, #0
   1d9e4:	d005      	beq.n	1d9f2 <_dtoa_r+0x972>
   1d9e6:	45b8      	cmp	r8, r7
   1d9e8:	d003      	beq.n	1d9f2 <_dtoa_r+0x972>
   1d9ea:	4641      	mov	r1, r8
   1d9ec:	4620      	mov	r0, r4
   1d9ee:	f01d ff99 	bl	3b924 <_Bfree>
   1d9f2:	4639      	mov	r1, r7
   1d9f4:	4620      	mov	r0, r4
   1d9f6:	f01d ff95 	bl	3b924 <_Bfree>
   1d9fa:	e6a7      	b.n	1d74c <_dtoa_r+0x6cc>
   1d9fc:	2600      	movs	r6, #0
   1d9fe:	4637      	mov	r7, r6
   1da00:	e7e1      	b.n	1d9c6 <_dtoa_r+0x946>
   1da02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1da04:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1da08:	4637      	mov	r7, r6
   1da0a:	e59c      	b.n	1d546 <_dtoa_r+0x4c6>
   1da0c:	40240000 	.word	0x40240000
   1da10:	9b08      	ldr	r3, [sp, #32]
   1da12:	f8dd b004 	ldr.w	fp, [sp, #4]
   1da16:	2b00      	cmp	r3, #0
   1da18:	f000 80f5 	beq.w	1dc06 <_dtoa_r+0xb86>
   1da1c:	2d00      	cmp	r5, #0
   1da1e:	dd05      	ble.n	1da2c <_dtoa_r+0x9ac>
   1da20:	4639      	mov	r1, r7
   1da22:	462a      	mov	r2, r5
   1da24:	4620      	mov	r0, r4
   1da26:	f01e f8c7 	bl	3bbb8 <__lshift>
   1da2a:	4607      	mov	r7, r0
   1da2c:	9b06      	ldr	r3, [sp, #24]
   1da2e:	2b00      	cmp	r3, #0
   1da30:	d055      	beq.n	1dade <_dtoa_r+0xa5e>
   1da32:	6879      	ldr	r1, [r7, #4]
   1da34:	4620      	mov	r0, r4
   1da36:	f01d ff41 	bl	3b8bc <_Balloc>
   1da3a:	693a      	ldr	r2, [r7, #16]
   1da3c:	4605      	mov	r5, r0
   1da3e:	f107 010c 	add.w	r1, r7, #12
   1da42:	3202      	adds	r2, #2
   1da44:	300c      	adds	r0, #12
   1da46:	0092      	lsls	r2, r2, #2
   1da48:	f01d fcb3 	bl	3b3b2 <memcpy>
   1da4c:	2201      	movs	r2, #1
   1da4e:	4629      	mov	r1, r5
   1da50:	4620      	mov	r0, r4
   1da52:	f01e f8b1 	bl	3bbb8 <__lshift>
   1da56:	9b00      	ldr	r3, [sp, #0]
   1da58:	46b8      	mov	r8, r7
   1da5a:	4607      	mov	r7, r0
   1da5c:	3301      	adds	r3, #1
   1da5e:	9301      	str	r3, [sp, #4]
   1da60:	9b00      	ldr	r3, [sp, #0]
   1da62:	445b      	add	r3, fp
   1da64:	9307      	str	r3, [sp, #28]
   1da66:	9b02      	ldr	r3, [sp, #8]
   1da68:	f003 0301 	and.w	r3, r3, #1
   1da6c:	9306      	str	r3, [sp, #24]
   1da6e:	9b01      	ldr	r3, [sp, #4]
   1da70:	4631      	mov	r1, r6
   1da72:	4650      	mov	r0, sl
   1da74:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
   1da78:	f01d fe91 	bl	3b79e <quorem>
   1da7c:	4603      	mov	r3, r0
   1da7e:	4641      	mov	r1, r8
   1da80:	9002      	str	r0, [sp, #8]
   1da82:	4650      	mov	r0, sl
   1da84:	3330      	adds	r3, #48	; 0x30
   1da86:	9308      	str	r3, [sp, #32]
   1da88:	f01e f8f5 	bl	3bc76 <__mcmp>
   1da8c:	463a      	mov	r2, r7
   1da8e:	9004      	str	r0, [sp, #16]
   1da90:	4631      	mov	r1, r6
   1da92:	4620      	mov	r0, r4
   1da94:	f01e f90b 	bl	3bcae <__mdiff>
   1da98:	68c2      	ldr	r2, [r0, #12]
   1da9a:	4605      	mov	r5, r0
   1da9c:	9b08      	ldr	r3, [sp, #32]
   1da9e:	bb02      	cbnz	r2, 1dae2 <_dtoa_r+0xa62>
   1daa0:	4601      	mov	r1, r0
   1daa2:	4650      	mov	r0, sl
   1daa4:	f01e f8e7 	bl	3bc76 <__mcmp>
   1daa8:	9b08      	ldr	r3, [sp, #32]
   1daaa:	4602      	mov	r2, r0
   1daac:	4629      	mov	r1, r5
   1daae:	4620      	mov	r0, r4
   1dab0:	e9cd 3208 	strd	r3, r2, [sp, #32]
   1dab4:	f01d ff36 	bl	3b924 <_Bfree>
   1dab8:	9b05      	ldr	r3, [sp, #20]
   1daba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dabc:	9d01      	ldr	r5, [sp, #4]
   1dabe:	ea43 0102 	orr.w	r1, r3, r2
   1dac2:	9b06      	ldr	r3, [sp, #24]
   1dac4:	430b      	orrs	r3, r1
   1dac6:	9b08      	ldr	r3, [sp, #32]
   1dac8:	d10d      	bne.n	1dae6 <_dtoa_r+0xa66>
   1daca:	2b39      	cmp	r3, #57	; 0x39
   1dacc:	d027      	beq.n	1db1e <_dtoa_r+0xa9e>
   1dace:	9a04      	ldr	r2, [sp, #16]
   1dad0:	2a00      	cmp	r2, #0
   1dad2:	dd01      	ble.n	1dad8 <_dtoa_r+0xa58>
   1dad4:	9b02      	ldr	r3, [sp, #8]
   1dad6:	3331      	adds	r3, #49	; 0x31
   1dad8:	f88b 3000 	strb.w	r3, [fp]
   1dadc:	e779      	b.n	1d9d2 <_dtoa_r+0x952>
   1dade:	4638      	mov	r0, r7
   1dae0:	e7b9      	b.n	1da56 <_dtoa_r+0x9d6>
   1dae2:	2201      	movs	r2, #1
   1dae4:	e7e2      	b.n	1daac <_dtoa_r+0xa2c>
   1dae6:	9904      	ldr	r1, [sp, #16]
   1dae8:	2900      	cmp	r1, #0
   1daea:	db04      	blt.n	1daf6 <_dtoa_r+0xa76>
   1daec:	9805      	ldr	r0, [sp, #20]
   1daee:	4301      	orrs	r1, r0
   1daf0:	9806      	ldr	r0, [sp, #24]
   1daf2:	4301      	orrs	r1, r0
   1daf4:	d120      	bne.n	1db38 <_dtoa_r+0xab8>
   1daf6:	2a00      	cmp	r2, #0
   1daf8:	ddee      	ble.n	1dad8 <_dtoa_r+0xa58>
   1dafa:	4651      	mov	r1, sl
   1dafc:	2201      	movs	r2, #1
   1dafe:	4620      	mov	r0, r4
   1db00:	9301      	str	r3, [sp, #4]
   1db02:	f01e f859 	bl	3bbb8 <__lshift>
   1db06:	4631      	mov	r1, r6
   1db08:	4682      	mov	sl, r0
   1db0a:	f01e f8b4 	bl	3bc76 <__mcmp>
   1db0e:	2800      	cmp	r0, #0
   1db10:	9b01      	ldr	r3, [sp, #4]
   1db12:	dc02      	bgt.n	1db1a <_dtoa_r+0xa9a>
   1db14:	d1e0      	bne.n	1dad8 <_dtoa_r+0xa58>
   1db16:	07da      	lsls	r2, r3, #31
   1db18:	d5de      	bpl.n	1dad8 <_dtoa_r+0xa58>
   1db1a:	2b39      	cmp	r3, #57	; 0x39
   1db1c:	d1da      	bne.n	1dad4 <_dtoa_r+0xa54>
   1db1e:	2339      	movs	r3, #57	; 0x39
   1db20:	f88b 3000 	strb.w	r3, [fp]
   1db24:	462b      	mov	r3, r5
   1db26:	461d      	mov	r5, r3
   1db28:	3b01      	subs	r3, #1
   1db2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1db2e:	2a39      	cmp	r2, #57	; 0x39
   1db30:	d050      	beq.n	1dbd4 <_dtoa_r+0xb54>
   1db32:	3201      	adds	r2, #1
   1db34:	701a      	strb	r2, [r3, #0]
   1db36:	e74c      	b.n	1d9d2 <_dtoa_r+0x952>
   1db38:	2a00      	cmp	r2, #0
   1db3a:	dd03      	ble.n	1db44 <_dtoa_r+0xac4>
   1db3c:	2b39      	cmp	r3, #57	; 0x39
   1db3e:	d0ee      	beq.n	1db1e <_dtoa_r+0xa9e>
   1db40:	3301      	adds	r3, #1
   1db42:	e7c9      	b.n	1dad8 <_dtoa_r+0xa58>
   1db44:	9a01      	ldr	r2, [sp, #4]
   1db46:	9907      	ldr	r1, [sp, #28]
   1db48:	f802 3c01 	strb.w	r3, [r2, #-1]
   1db4c:	428a      	cmp	r2, r1
   1db4e:	d02a      	beq.n	1dba6 <_dtoa_r+0xb26>
   1db50:	4651      	mov	r1, sl
   1db52:	2300      	movs	r3, #0
   1db54:	220a      	movs	r2, #10
   1db56:	4620      	mov	r0, r4
   1db58:	f01d fefb 	bl	3b952 <__multadd>
   1db5c:	45b8      	cmp	r8, r7
   1db5e:	4682      	mov	sl, r0
   1db60:	f04f 0300 	mov.w	r3, #0
   1db64:	f04f 020a 	mov.w	r2, #10
   1db68:	4641      	mov	r1, r8
   1db6a:	4620      	mov	r0, r4
   1db6c:	d107      	bne.n	1db7e <_dtoa_r+0xafe>
   1db6e:	f01d fef0 	bl	3b952 <__multadd>
   1db72:	4680      	mov	r8, r0
   1db74:	4607      	mov	r7, r0
   1db76:	9b01      	ldr	r3, [sp, #4]
   1db78:	3301      	adds	r3, #1
   1db7a:	9301      	str	r3, [sp, #4]
   1db7c:	e777      	b.n	1da6e <_dtoa_r+0x9ee>
   1db7e:	f01d fee8 	bl	3b952 <__multadd>
   1db82:	4639      	mov	r1, r7
   1db84:	4680      	mov	r8, r0
   1db86:	2300      	movs	r3, #0
   1db88:	220a      	movs	r2, #10
   1db8a:	4620      	mov	r0, r4
   1db8c:	f01d fee1 	bl	3b952 <__multadd>
   1db90:	4607      	mov	r7, r0
   1db92:	e7f0      	b.n	1db76 <_dtoa_r+0xaf6>
   1db94:	f1bb 0f00 	cmp.w	fp, #0
   1db98:	9a00      	ldr	r2, [sp, #0]
   1db9a:	f04f 0800 	mov.w	r8, #0
   1db9e:	bfcc      	ite	gt
   1dba0:	465d      	movgt	r5, fp
   1dba2:	2501      	movle	r5, #1
   1dba4:	4415      	add	r5, r2
   1dba6:	4651      	mov	r1, sl
   1dba8:	2201      	movs	r2, #1
   1dbaa:	4620      	mov	r0, r4
   1dbac:	9301      	str	r3, [sp, #4]
   1dbae:	f01e f803 	bl	3bbb8 <__lshift>
   1dbb2:	4631      	mov	r1, r6
   1dbb4:	4682      	mov	sl, r0
   1dbb6:	f01e f85e 	bl	3bc76 <__mcmp>
   1dbba:	2800      	cmp	r0, #0
   1dbbc:	dcb2      	bgt.n	1db24 <_dtoa_r+0xaa4>
   1dbbe:	d102      	bne.n	1dbc6 <_dtoa_r+0xb46>
   1dbc0:	9b01      	ldr	r3, [sp, #4]
   1dbc2:	07db      	lsls	r3, r3, #31
   1dbc4:	d4ae      	bmi.n	1db24 <_dtoa_r+0xaa4>
   1dbc6:	462b      	mov	r3, r5
   1dbc8:	461d      	mov	r5, r3
   1dbca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1dbce:	2a30      	cmp	r2, #48	; 0x30
   1dbd0:	d0fa      	beq.n	1dbc8 <_dtoa_r+0xb48>
   1dbd2:	e6fe      	b.n	1d9d2 <_dtoa_r+0x952>
   1dbd4:	9a00      	ldr	r2, [sp, #0]
   1dbd6:	429a      	cmp	r2, r3
   1dbd8:	d1a5      	bne.n	1db26 <_dtoa_r+0xaa6>
   1dbda:	2331      	movs	r3, #49	; 0x31
   1dbdc:	f109 0901 	add.w	r9, r9, #1
   1dbe0:	7013      	strb	r3, [r2, #0]
   1dbe2:	e6f6      	b.n	1d9d2 <_dtoa_r+0x952>
   1dbe4:	4b12      	ldr	r3, [pc, #72]	; (1dc30 <_dtoa_r+0xbb0>)
   1dbe6:	f7ff bab8 	b.w	1d15a <_dtoa_r+0xda>
   1dbea:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1dbec:	2b00      	cmp	r3, #0
   1dbee:	f47f aa8e 	bne.w	1d10e <_dtoa_r+0x8e>
   1dbf2:	4b10      	ldr	r3, [pc, #64]	; (1dc34 <_dtoa_r+0xbb4>)
   1dbf4:	f7ff bab1 	b.w	1d15a <_dtoa_r+0xda>
   1dbf8:	f1bb 0f00 	cmp.w	fp, #0
   1dbfc:	dc03      	bgt.n	1dc06 <_dtoa_r+0xb86>
   1dbfe:	9b05      	ldr	r3, [sp, #20]
   1dc00:	2b02      	cmp	r3, #2
   1dc02:	f73f aecf 	bgt.w	1d9a4 <_dtoa_r+0x924>
   1dc06:	9d00      	ldr	r5, [sp, #0]
   1dc08:	4631      	mov	r1, r6
   1dc0a:	4650      	mov	r0, sl
   1dc0c:	f01d fdc7 	bl	3b79e <quorem>
   1dc10:	9a00      	ldr	r2, [sp, #0]
   1dc12:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1dc16:	f805 3b01 	strb.w	r3, [r5], #1
   1dc1a:	1aaa      	subs	r2, r5, r2
   1dc1c:	4593      	cmp	fp, r2
   1dc1e:	ddb9      	ble.n	1db94 <_dtoa_r+0xb14>
   1dc20:	4651      	mov	r1, sl
   1dc22:	2300      	movs	r3, #0
   1dc24:	220a      	movs	r2, #10
   1dc26:	4620      	mov	r0, r4
   1dc28:	f01d fe93 	bl	3b952 <__multadd>
   1dc2c:	4682      	mov	sl, r0
   1dc2e:	e7eb      	b.n	1dc08 <_dtoa_r+0xb88>
   1dc30:	0003d735 	.word	0x0003d735
   1dc34:	00040af5 	.word	0x00040af5

0001dc38 <gpio_callback>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dc38:	4907      	ldr	r1, [pc, #28]	; (1dc58 <gpio_callback+0x20>)
   1dc3a:	e8d1 3fef 	ldaex	r3, [r1]
   1dc3e:	f043 0201 	orr.w	r2, r3, #1
   1dc42:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1dc46:	2800      	cmp	r0, #0
   1dc48:	d1f7      	bne.n	1dc3a <gpio_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1dc4a:	07db      	lsls	r3, r3, #31
   1dc4c:	d403      	bmi.n	1dc56 <gpio_callback+0x1e>
		k_queue_append(&work_q->queue, work);
   1dc4e:	4803      	ldr	r0, [pc, #12]	; (1dc5c <gpio_callback+0x24>)
   1dc50:	3908      	subs	r1, #8
   1dc52:	f01c bfc4 	b.w	3abde <k_queue_append>

static void gpio_callback(const struct device *dev,
		     struct gpio_callback *gpio_cb, uint32_t pins)
{
	k_work_submit_to_queue(&slm_work_q, &exit_idle_work);
}
   1dc56:	4770      	bx	lr
   1dc58:	20023440 	.word	0x20023440
   1dc5c:	200211e8 	.word	0x200211e8

0001dc60 <exit_idle>:
{
   1dc60:	b538      	push	{r3, r4, r5, lr}
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1dc62:	4b14      	ldr	r3, [pc, #80]	; (1dcb4 <exit_idle+0x54>)
   1dc64:	4c14      	ldr	r4, [pc, #80]	; (1dcb8 <exit_idle+0x58>)
	gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   1dc66:	4d15      	ldr	r5, [pc, #84]	; (1dcbc <exit_idle+0x5c>)
   1dc68:	1ae4      	subs	r4, r4, r3
   1dc6a:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Exit Idle");
   1dc6c:	01a4      	lsls	r4, r4, #6
   1dc6e:	4814      	ldr	r0, [pc, #80]	; (1dcc0 <exit_idle+0x60>)
   1dc70:	f044 0103 	orr.w	r1, r4, #3
   1dc74:	f01a fc24 	bl	384c0 <log_0>
	gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   1dc78:	6828      	ldr	r0, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1dc7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1dc7e:	f019 fe9d 	bl	379bc <z_impl_gpio_pin_interrupt_configure.constprop.0>
	gpio_remove_callback(gpio_dev, &gpio_cb);
   1dc82:	6828      	ldr	r0, [r5, #0]
				       struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1dc84:	6883      	ldr	r3, [r0, #8]
   1dc86:	69db      	ldr	r3, [r3, #28]
   1dc88:	b113      	cbz	r3, 1dc90 <exit_idle+0x30>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, false);
   1dc8a:	2200      	movs	r2, #0
   1dc8c:	490d      	ldr	r1, [pc, #52]	; (1dcc4 <exit_idle+0x64>)
   1dc8e:	4798      	blx	r3
	gpio_pin_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN, GPIO_INPUT);
   1dc90:	f44f 7180 	mov.w	r1, #256	; 0x100
   1dc94:	6828      	ldr	r0, [r5, #0]
   1dc96:	f019 fea5 	bl	379e4 <gpio_pin_configure.constprop.0>
	err = slm_at_host_init();
   1dc9a:	f000 faf1 	bl	1e280 <slm_at_host_init>
	if (err) {
   1dc9e:	4601      	mov	r1, r0
   1dca0:	b130      	cbz	r0, 1dcb0 <exit_idle+0x50>
		LOG_ERR("Failed to init at_host: %d", err);
   1dca2:	f044 0201 	orr.w	r2, r4, #1
   1dca6:	4808      	ldr	r0, [pc, #32]	; (1dcc8 <exit_idle+0x68>)
}
   1dca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Failed to init at_host: %d", err);
   1dcac:	f01a bc17 	b.w	384de <log_1>
}
   1dcb0:	bd38      	pop	{r3, r4, r5, pc}
   1dcb2:	bf00      	nop
   1dcb4:	0003c2cc 	.word	0x0003c2cc
   1dcb8:	0003c2d4 	.word	0x0003c2d4
   1dcbc:	20023450 	.word	0x20023450
   1dcc0:	0003ce40 	.word	0x0003ce40
   1dcc4:	20023444 	.word	0x20023444
   1dcc8:	0003ce4a 	.word	0x0003ce4a

0001dccc <bsd_recoverable_error_handler>:
   1dccc:	4a05      	ldr	r2, [pc, #20]	; (1dce4 <bsd_recoverable_error_handler+0x18>)
   1dcce:	4b06      	ldr	r3, [pc, #24]	; (1dce8 <bsd_recoverable_error_handler+0x1c>)
{
   1dcd0:	4601      	mov	r1, r0
   1dcd2:	1ad2      	subs	r2, r2, r3
   1dcd4:	08d2      	lsrs	r2, r2, #3
	LOG_ERR("bsdlib recoverable error: %u", err);
   1dcd6:	0192      	lsls	r2, r2, #6
   1dcd8:	4804      	ldr	r0, [pc, #16]	; (1dcec <bsd_recoverable_error_handler+0x20>)
   1dcda:	f042 0201 	orr.w	r2, r2, #1
   1dcde:	f01a bbfe 	b.w	384de <log_1>
   1dce2:	bf00      	nop
   1dce4:	0003c2d4 	.word	0x0003c2d4
   1dce8:	0003c2cc 	.word	0x0003c2cc
   1dcec:	0003ce65 	.word	0x0003ce65

0001dcf0 <enter_idle>:

void enter_idle(void)
{
   1dcf0:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1dcf2:	4827      	ldr	r0, [pc, #156]	; (1dd90 <enter_idle+0xa0>)
   1dcf4:	f017 fb8a 	bl	3540c <z_impl_device_get_binding>
	int err;

	gpio_dev = device_get_binding(DT_LABEL(DT_NODELABEL(gpio0)));
   1dcf8:	4c26      	ldr	r4, [pc, #152]	; (1dd94 <enter_idle+0xa4>)
   1dcfa:	6020      	str	r0, [r4, #0]
	if (gpio_dev == NULL) {
   1dcfc:	b958      	cbnz	r0, 1dd16 <enter_idle+0x26>
	err = gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
					   GPIO_INT_LEVEL_LOW);
	if (err) {
		LOG_ERR("GPIO_0 enable callback error: %d", err);
	}
}
   1dcfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dd02:	4925      	ldr	r1, [pc, #148]	; (1dd98 <enter_idle+0xa8>)
   1dd04:	4b25      	ldr	r3, [pc, #148]	; (1dd9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 bind error");
   1dd06:	4826      	ldr	r0, [pc, #152]	; (1dda0 <enter_idle+0xb0>)
   1dd08:	1ac9      	subs	r1, r1, r3
   1dd0a:	08c9      	lsrs	r1, r1, #3
   1dd0c:	0189      	lsls	r1, r1, #6
   1dd0e:	f041 0101 	orr.w	r1, r1, #1
   1dd12:	f01a bbd5 	b.w	384c0 <log_0>
	err = gpio_pin_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   1dd16:	f44f 7188 	mov.w	r1, #272	; 0x110
   1dd1a:	f019 fe63 	bl	379e4 <gpio_pin_configure.constprop.0>
	if (err) {
   1dd1e:	4601      	mov	r1, r0
   1dd20:	b158      	cbz	r0, 1dd3a <enter_idle+0x4a>
   1dd22:	4a1d      	ldr	r2, [pc, #116]	; (1dd98 <enter_idle+0xa8>)
   1dd24:	4b1d      	ldr	r3, [pc, #116]	; (1dd9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 config error: %d", err);
   1dd26:	481f      	ldr	r0, [pc, #124]	; (1dda4 <enter_idle+0xb4>)
   1dd28:	1ad2      	subs	r2, r2, r3
   1dd2a:	08d2      	lsrs	r2, r2, #3
   1dd2c:	0192      	lsls	r2, r2, #6
   1dd2e:	f042 0201 	orr.w	r2, r2, #1
}
   1dd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("GPIO_0 enable callback error: %d", err);
   1dd36:	f01a bbd2 	b.w	384de <log_1>
	callback->handler = handler;
   1dd3a:	491b      	ldr	r1, [pc, #108]	; (1dda8 <enter_idle+0xb8>)
   1dd3c:	4b1b      	ldr	r3, [pc, #108]	; (1ddac <enter_idle+0xbc>)
	err = gpio_add_callback(gpio_dev, &gpio_cb);
   1dd3e:	6820      	ldr	r0, [r4, #0]
   1dd40:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   1dd42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1dd46:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   1dd48:	6883      	ldr	r3, [r0, #8]
   1dd4a:	69db      	ldr	r3, [r3, #28]
   1dd4c:	b163      	cbz	r3, 1dd68 <enter_idle+0x78>
	return api->manage_callback(port, callback, true);
   1dd4e:	2201      	movs	r2, #1
   1dd50:	4798      	blx	r3
	if (err) {
   1dd52:	4601      	mov	r1, r0
   1dd54:	b158      	cbz	r0, 1dd6e <enter_idle+0x7e>
   1dd56:	4a10      	ldr	r2, [pc, #64]	; (1dd98 <enter_idle+0xa8>)
   1dd58:	4b10      	ldr	r3, [pc, #64]	; (1dd9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 add callback error: %d", err);
   1dd5a:	4815      	ldr	r0, [pc, #84]	; (1ddb0 <enter_idle+0xc0>)
   1dd5c:	1ad2      	subs	r2, r2, r3
   1dd5e:	08d2      	lsrs	r2, r2, #3
   1dd60:	0192      	lsls	r2, r2, #6
   1dd62:	f042 0201 	orr.w	r2, r2, #1
   1dd66:	e7e4      	b.n	1dd32 <enter_idle+0x42>
		return -ENOTSUP;
   1dd68:	f06f 0185 	mvn.w	r1, #133	; 0x85
   1dd6c:	e7f3      	b.n	1dd56 <enter_idle+0x66>
	err = gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
   1dd6e:	6820      	ldr	r0, [r4, #0]
   1dd70:	f44f 3110 	mov.w	r1, #147456	; 0x24000
   1dd74:	f019 fe22 	bl	379bc <z_impl_gpio_pin_interrupt_configure.constprop.0>
	if (err) {
   1dd78:	4601      	mov	r1, r0
   1dd7a:	b140      	cbz	r0, 1dd8e <enter_idle+0x9e>
   1dd7c:	4a06      	ldr	r2, [pc, #24]	; (1dd98 <enter_idle+0xa8>)
   1dd7e:	4b07      	ldr	r3, [pc, #28]	; (1dd9c <enter_idle+0xac>)
		LOG_ERR("GPIO_0 enable callback error: %d", err);
   1dd80:	480c      	ldr	r0, [pc, #48]	; (1ddb4 <enter_idle+0xc4>)
   1dd82:	1ad2      	subs	r2, r2, r3
   1dd84:	08d2      	lsrs	r2, r2, #3
   1dd86:	0192      	lsls	r2, r2, #6
   1dd88:	f042 0201 	orr.w	r2, r2, #1
   1dd8c:	e7d1      	b.n	1dd32 <enter_idle+0x42>
}
   1dd8e:	bd10      	pop	{r4, pc}
   1dd90:	0003ce82 	.word	0x0003ce82
   1dd94:	20023450 	.word	0x20023450
   1dd98:	0003c2d4 	.word	0x0003c2d4
   1dd9c:	0003c2cc 	.word	0x0003c2cc
   1dda0:	0003ce89 	.word	0x0003ce89
   1dda4:	0003ce9b 	.word	0x0003ce9b
   1dda8:	20023444 	.word	0x20023444
   1ddac:	0001dc39 	.word	0x0001dc39
   1ddb0:	0003ceb3 	.word	0x0003ceb3
   1ddb4:	0003ced1 	.word	0x0003ced1

0001ddb8 <handle_bsdlib_init_ret>:
	}
#endif	/* CONFIG_SLM_GPIO_WAKEUP */
}

void handle_bsdlib_init_ret(void)
{
   1ddb8:	b508      	push	{r3, lr}
	int ret = bsdlib_get_init_ret();
   1ddba:	f00b fcb7 	bl	2972c <bsdlib_get_init_ret>

	/* Handle return values relating to modem firmware update */
	switch (ret) {
   1ddbe:	4b19      	ldr	r3, [pc, #100]	; (1de24 <handle_bsdlib_init_ret+0x6c>)
	int ret = bsdlib_get_init_ret();
   1ddc0:	4601      	mov	r1, r0
	switch (ret) {
   1ddc2:	4298      	cmp	r0, r3
   1ddc4:	dc08      	bgt.n	1ddd8 <handle_bsdlib_init_ret+0x20>
   1ddc6:	3b02      	subs	r3, #2
   1ddc8:	4298      	cmp	r0, r3
   1ddca:	dc17      	bgt.n	1ddfc <handle_bsdlib_init_ret+0x44>
   1ddcc:	f1a0 6388 	sub.w	r3, r0, #71303168	; 0x4400000
   1ddd0:	3b01      	subs	r3, #1
   1ddd2:	2b01      	cmp	r3, #1
   1ddd4:	d91d      	bls.n	1de12 <handle_bsdlib_init_ret+0x5a>
		sys_reboot(SYS_REBOOT_COLD);
		break;
	default:
		break;
	}
}
   1ddd6:	bd08      	pop	{r3, pc}
	switch (ret) {
   1ddd8:	4b13      	ldr	r3, [pc, #76]	; (1de28 <handle_bsdlib_init_ret+0x70>)
   1ddda:	4298      	cmp	r0, r3
   1dddc:	d1fb      	bne.n	1ddd6 <handle_bsdlib_init_ret+0x1e>
   1ddde:	4913      	ldr	r1, [pc, #76]	; (1de2c <handle_bsdlib_init_ret+0x74>)
   1dde0:	4b13      	ldr	r3, [pc, #76]	; (1de30 <handle_bsdlib_init_ret+0x78>)
		LOG_INF("MODEM UPDATE OK. Will run new firmware");
   1dde2:	4814      	ldr	r0, [pc, #80]	; (1de34 <handle_bsdlib_init_ret+0x7c>)
   1dde4:	1ac9      	subs	r1, r1, r3
   1dde6:	08c9      	lsrs	r1, r1, #3
   1dde8:	0189      	lsls	r1, r1, #6
   1ddea:	f041 0103 	orr.w	r1, r1, #3
   1ddee:	f01a fb67 	bl	384c0 <log_0>
}
   1ddf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_reboot(SYS_REBOOT_COLD);
   1ddf6:	2001      	movs	r0, #1
   1ddf8:	f007 bad2 	b.w	253a0 <sys_reboot>
   1ddfc:	4a0b      	ldr	r2, [pc, #44]	; (1de2c <handle_bsdlib_init_ret+0x74>)
   1ddfe:	4b0c      	ldr	r3, [pc, #48]	; (1de30 <handle_bsdlib_init_ret+0x78>)
		LOG_ERR("MODEM UPDATE ERROR %d. Will run old firmware", ret);
   1de00:	480d      	ldr	r0, [pc, #52]	; (1de38 <handle_bsdlib_init_ret+0x80>)
   1de02:	1ad2      	subs	r2, r2, r3
   1de04:	08d2      	lsrs	r2, r2, #3
   1de06:	0192      	lsls	r2, r2, #6
   1de08:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("MODEM UPDATE FATAL ERROR %d. Modem failiure", ret);
   1de0c:	f01a fb67 	bl	384de <log_1>
   1de10:	e7ef      	b.n	1ddf2 <handle_bsdlib_init_ret+0x3a>
   1de12:	4a06      	ldr	r2, [pc, #24]	; (1de2c <handle_bsdlib_init_ret+0x74>)
   1de14:	4b06      	ldr	r3, [pc, #24]	; (1de30 <handle_bsdlib_init_ret+0x78>)
   1de16:	4809      	ldr	r0, [pc, #36]	; (1de3c <handle_bsdlib_init_ret+0x84>)
   1de18:	1ad2      	subs	r2, r2, r3
   1de1a:	08d2      	lsrs	r2, r2, #3
   1de1c:	0192      	lsls	r2, r2, #6
   1de1e:	f042 0201 	orr.w	r2, r2, #1
   1de22:	e7f3      	b.n	1de0c <handle_bsdlib_init_ret+0x54>
   1de24:	04400004 	.word	0x04400004
   1de28:	05500001 	.word	0x05500001
   1de2c:	0003c2d4 	.word	0x0003c2d4
   1de30:	0003c2cc 	.word	0x0003c2cc
   1de34:	0003cef2 	.word	0x0003cef2
   1de38:	0003cf19 	.word	0x0003cf19
   1de3c:	0003cf46 	.word	0x0003cf46

0001de40 <start_execute>:

void start_execute(void)
{
   1de40:	b530      	push	{r4, r5, lr}
   1de42:	b085      	sub	sp, #20
	int err;
	struct onoff_manager *clk_mgr;
	struct onoff_client cli = {};
   1de44:	2210      	movs	r2, #16
   1de46:	2100      	movs	r1, #0
   1de48:	4668      	mov	r0, sp
   1de4a:	f01d fad2 	bl	3b3f2 <memset>
   1de4e:	4c26      	ldr	r4, [pc, #152]	; (1dee8 <start_execute+0xa8>)
   1de50:	4b26      	ldr	r3, [pc, #152]	; (1deec <start_execute+0xac>)

	LOG_INF("Serial LTE Modem");
   1de52:	4827      	ldr	r0, [pc, #156]	; (1def0 <start_execute+0xb0>)
   1de54:	1ae4      	subs	r4, r4, r3
   1de56:	08e4      	lsrs	r4, r4, #3
   1de58:	01a4      	lsls	r4, r4, #6
   1de5a:	f044 0103 	orr.w	r1, r4, #3
   1de5e:	f01a fb2f 	bl	384c0 <log_0>

	/* request external XTAL for UART */
	clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1de62:	2000      	movs	r0, #0
   1de64:	f007 fc02 	bl	2566c <z_nrf_clock_control_get_onoff>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1de68:	2300      	movs	r3, #0
   1de6a:	9301      	str	r3, [sp, #4]
   1de6c:	9303      	str	r3, [sp, #12]
   1de6e:	2301      	movs	r3, #1
	sys_notify_init_spinwait(&cli.notify);
	err = onoff_request(clk_mgr, &cli);
   1de70:	4669      	mov	r1, sp
   1de72:	9302      	str	r3, [sp, #8]
   1de74:	f019 ff2f 	bl	37cd6 <onoff_request>
	if (err) {
   1de78:	4601      	mov	r1, r0
   1de7a:	b130      	cbz	r0, 1de8a <start_execute+0x4a>
		LOG_ERR("Clock request failed: %d", err);
   1de7c:	481d      	ldr	r0, [pc, #116]	; (1def4 <start_execute+0xb4>)
   1de7e:	f044 0201 	orr.w	r2, r4, #1
		return;
	}

	err = slm_at_host_init();
	if (err) {
		LOG_ERR("Failed to init at_host: %d", err);
   1de82:	f01a fb2c 	bl	384de <log_1>

	/* All initializations were successful mark image as working so that we
	 * will not revert upon reboot.
	 */
	boot_write_img_confirmed();
}
   1de86:	b005      	add	sp, #20
   1de88:	bd30      	pop	{r4, r5, pc}
	handle_bsdlib_init_ret();
   1de8a:	f7ff ff95 	bl	1ddb8 <handle_bsdlib_init_ret>
	err = modem_info_init();
   1de8e:	f00d f8a5 	bl	2afdc <modem_info_init>
	if (err) {
   1de92:	4601      	mov	r1, r0
   1de94:	b118      	cbz	r0, 1de9e <start_execute+0x5e>
		LOG_ERR("Modem info could not be established: %d", err);
   1de96:	4818      	ldr	r0, [pc, #96]	; (1def8 <start_execute+0xb8>)
   1de98:	f044 0201 	orr.w	r2, r4, #1
   1de9c:	e7f1      	b.n	1de82 <start_execute+0x42>
	modem_info_params_init(&modem_param);
   1de9e:	4817      	ldr	r0, [pc, #92]	; (1defc <start_execute+0xbc>)
   1dea0:	f00d f8e0 	bl	2b064 <modem_info_params_init>
	err = at_params_list_init(&at_param_list, CONFIG_SLM_AT_MAX_PARAM);
   1dea4:	2109      	movs	r1, #9
   1dea6:	4816      	ldr	r0, [pc, #88]	; (1df00 <start_execute+0xc0>)
   1dea8:	f01c fbde 	bl	3a668 <at_params_list_init>
	if (err) {
   1deac:	4601      	mov	r1, r0
   1deae:	b118      	cbz	r0, 1deb8 <start_execute+0x78>
		LOG_ERR("Failed to init AT Parser: %d", err);
   1deb0:	4814      	ldr	r0, [pc, #80]	; (1df04 <start_execute+0xc4>)
   1deb2:	f044 0201 	orr.w	r2, r4, #1
   1deb6:	e7e4      	b.n	1de82 <start_execute+0x42>
	err = slm_at_host_init();
   1deb8:	f000 f9e2 	bl	1e280 <slm_at_host_init>
	if (err) {
   1debc:	4605      	mov	r5, r0
   1debe:	b120      	cbz	r0, 1deca <start_execute+0x8a>
		LOG_ERR("Failed to init at_host: %d", err);
   1dec0:	4601      	mov	r1, r0
   1dec2:	f044 0201 	orr.w	r2, r4, #1
   1dec6:	4810      	ldr	r0, [pc, #64]	; (1df08 <start_execute+0xc8>)
   1dec8:	e7db      	b.n	1de82 <start_execute+0x42>
	k_work_q_start(&slm_work_q, slm_wq_stack_area,
   1deca:	230e      	movs	r3, #14
   1decc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ded0:	490e      	ldr	r1, [pc, #56]	; (1df0c <start_execute+0xcc>)
   1ded2:	480f      	ldr	r0, [pc, #60]	; (1df10 <start_execute+0xd0>)
   1ded4:	f018 fb62 	bl	3659c <k_work_q_start>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1ded8:	4b0e      	ldr	r3, [pc, #56]	; (1df14 <start_execute+0xd4>)
   1deda:	4a0f      	ldr	r2, [pc, #60]	; (1df18 <start_execute+0xd8>)
   1dedc:	601d      	str	r5, [r3, #0]
   1dede:	e9c3 2501 	strd	r2, r5, [r3, #4]
	boot_write_img_confirmed();
   1dee2:	f01a fe80 	bl	38be6 <boot_write_img_confirmed>
   1dee6:	e7ce      	b.n	1de86 <start_execute+0x46>
   1dee8:	0003c2d4 	.word	0x0003c2d4
   1deec:	0003c2cc 	.word	0x0003c2cc
   1def0:	0003cf72 	.word	0x0003cf72
   1def4:	0003cf83 	.word	0x0003cf83
   1def8:	0003cf9c 	.word	0x0003cf9c
   1defc:	20020900 	.word	0x20020900
   1df00:	20023430 	.word	0x20023430
   1df04:	0003cfc4 	.word	0x0003cfc4
   1df08:	0003ce4a 	.word	0x0003ce4a
   1df0c:	2002cd18 	.word	0x2002cd18
   1df10:	200211e8 	.word	0x200211e8
   1df14:	20023438 	.word	0x20023438
   1df18:	0001dc61 	.word	0x0001dc61

0001df1c <slm_util_cmd_casecmp>:

/**
 * @brief Compare name of AT command ignoring case
 */
bool slm_util_cmd_casecmp(const char *cmd, const char *slm_cmd)
{
   1df1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df1e:	4606      	mov	r6, r0
	int i;
	int slm_cmd_len = strlen(slm_cmd);
   1df20:	4608      	mov	r0, r1
{
   1df22:	460f      	mov	r7, r1
	int slm_cmd_len = strlen(slm_cmd);
   1df24:	f7ff f8a4 	bl	1d070 <strlen>
   1df28:	4604      	mov	r4, r0

	if (strlen(cmd) < slm_cmd_len) {
   1df2a:	4630      	mov	r0, r6
   1df2c:	f7ff f8a0 	bl	1d070 <strlen>
   1df30:	4284      	cmp	r4, r0
   1df32:	d823      	bhi.n	1df7c <slm_util_cmd_casecmp+0x60>
		return false;
	}

	for (i = 0; i < slm_cmd_len; i++) {
   1df34:	2500      	movs	r5, #0
		if (toupper((int)*(cmd + i)) != toupper((int)*(slm_cmd + i))) {
   1df36:	4813      	ldr	r0, [pc, #76]	; (1df84 <slm_util_cmd_casecmp+0x68>)
	for (i = 0; i < slm_cmd_len; i++) {
   1df38:	42a5      	cmp	r5, r4
   1df3a:	db0d      	blt.n	1df58 <slm_util_cmd_casecmp+0x3c>
			return false;
		}
	}
#if defined(CONFIG_SLM_CR_LF_TERMINATION)
	if (strlen(cmd) > (slm_cmd_len + 2)) {
   1df3c:	4630      	mov	r0, r6
   1df3e:	f7ff f897 	bl	1d070 <strlen>
   1df42:	3402      	adds	r4, #2
   1df44:	42a0      	cmp	r0, r4
   1df46:	d91b      	bls.n	1df80 <slm_util_cmd_casecmp+0x64>
#else
	if (strlen(cmd) > (slm_cmd_len + 1)) {
#endif
		char ch = *(cmd + i);
		/* With parameter, SET TEST, "="; READ, "?" */
		return ((ch == '=') || (ch == '?'));
   1df48:	5d70      	ldrb	r0, [r6, r5]
   1df4a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
   1df4e:	f1a0 033d 	sub.w	r3, r0, #61	; 0x3d
   1df52:	4258      	negs	r0, r3
   1df54:	4158      	adcs	r0, r3
	}

	return true;
}
   1df56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (toupper((int)*(cmd + i)) != toupper((int)*(slm_cmd + i))) {
   1df58:	5d72      	ldrb	r2, [r6, r5]
   1df5a:	5c13      	ldrb	r3, [r2, r0]
   1df5c:	f003 0303 	and.w	r3, r3, #3
   1df60:	2b02      	cmp	r3, #2
   1df62:	5d7b      	ldrb	r3, [r7, r5]
   1df64:	bf08      	it	eq
   1df66:	3a20      	subeq	r2, #32
   1df68:	5cc1      	ldrb	r1, [r0, r3]
   1df6a:	f001 0103 	and.w	r1, r1, #3
   1df6e:	2902      	cmp	r1, #2
   1df70:	bf08      	it	eq
   1df72:	3b20      	subeq	r3, #32
   1df74:	429a      	cmp	r2, r3
   1df76:	d101      	bne.n	1df7c <slm_util_cmd_casecmp+0x60>
	for (i = 0; i < slm_cmd_len; i++) {
   1df78:	3501      	adds	r5, #1
   1df7a:	e7dd      	b.n	1df38 <slm_util_cmd_casecmp+0x1c>
		return false;
   1df7c:	2000      	movs	r0, #0
   1df7e:	e7ea      	b.n	1df56 <slm_util_cmd_casecmp+0x3a>
	return true;
   1df80:	2001      	movs	r0, #1
   1df82:	e7e8      	b.n	1df56 <slm_util_cmd_casecmp+0x3a>
   1df84:	000409c7 	.word	0x000409c7

0001df88 <slm_util_htoa>:
/**
 * @brief Encode hex array to hexdecimal string (ASCII text)
 */
int slm_util_htoa(const uint8_t *hex, uint16_t hex_len,
		char *ascii, uint16_t ascii_len)
{
   1df88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1df8c:	460d      	mov	r5, r1
   1df8e:	4690      	mov	r8, r2
	if (hex == NULL || ascii == NULL) {
   1df90:	4607      	mov	r7, r0
   1df92:	b1a8      	cbz	r0, 1dfc0 <slm_util_htoa+0x38>
   1df94:	b1a2      	cbz	r2, 1dfc0 <slm_util_htoa+0x38>
		return -EINVAL;
	}
	if (ascii_len < (hex_len * 2)) {
   1df96:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
   1df9a:	ea4f 0641 	mov.w	r6, r1, lsl #1
   1df9e:	db0f      	blt.n	1dfc0 <slm_util_htoa+0x38>
		return -EINVAL;
	}

	for (int i = 0; i < hex_len; i++) {
   1dfa0:	2400      	movs	r4, #0
		sprintf(ascii + (i * 2), "%02X", *(hex + i));
   1dfa2:	f8df 9024 	ldr.w	r9, [pc, #36]	; 1dfc8 <slm_util_htoa+0x40>
	for (int i = 0; i < hex_len; i++) {
   1dfa6:	42a5      	cmp	r5, r4
   1dfa8:	dc02      	bgt.n	1dfb0 <slm_util_htoa+0x28>
	}

	return (hex_len * 2);
}
   1dfaa:	4630      	mov	r0, r6
   1dfac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sprintf(ascii + (i * 2), "%02X", *(hex + i));
   1dfb0:	5d3a      	ldrb	r2, [r7, r4]
   1dfb2:	eb08 0044 	add.w	r0, r8, r4, lsl #1
   1dfb6:	4649      	mov	r1, r9
   1dfb8:	f019 f96a 	bl	37290 <siprintf>
	for (int i = 0; i < hex_len; i++) {
   1dfbc:	3401      	adds	r4, #1
   1dfbe:	e7f2      	b.n	1dfa6 <slm_util_htoa+0x1e>
		return -EINVAL;
   1dfc0:	f06f 0615 	mvn.w	r6, #21
   1dfc4:	e7f1      	b.n	1dfaa <slm_util_htoa+0x22>
   1dfc6:	bf00      	nop
   1dfc8:	0003cfe5 	.word	0x0003cfe5

0001dfcc <uart_callback>:
	cmd_len = 0;
}

static void uart_callback(const struct device *dev, struct uart_event *evt,
			  void *user_data)
{
   1dfcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfd0:	780b      	ldrb	r3, [r1, #0]
   1dfd2:	460e      	mov	r6, r1
   1dfd4:	2b06      	cmp	r3, #6
   1dfd6:	d837      	bhi.n	1e048 <uart_callback+0x7c>
   1dfd8:	e8df f013 	tbh	[pc, r3, lsl #1]
   1dfdc:	00100007 	.word	0x00100007
   1dfe0:	00b40023 	.word	0x00b40023
   1dfe4:	003600d0 	.word	0x003600d0
   1dfe8:	00d4      	.short	0x00d4

	ARG_UNUSED(user_data);

	switch (evt->type) {
	case UART_TX_DONE:
		k_free(uart_tx_buf);
   1dfea:	4b6b      	ldr	r3, [pc, #428]	; (1e198 <uart_callback+0x1cc>)
   1dfec:	6818      	ldr	r0, [r3, #0]
   1dfee:	f01d f9a3 	bl	3b338 <k_free>
		LOG_DBG("RX_DISABLED");
		break;
	default:
		break;
	}
}
   1dff2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1dff6:	4869      	ldr	r0, [pc, #420]	; (1e19c <uart_callback+0x1d0>)
   1dff8:	f018 b980 	b.w	362fc <z_impl_k_sem_give>
		k_free(uart_tx_buf);
   1dffc:	4b66      	ldr	r3, [pc, #408]	; (1e198 <uart_callback+0x1cc>)
   1dffe:	6818      	ldr	r0, [r3, #0]
   1e000:	f01d f99a 	bl	3b338 <k_free>
   1e004:	4865      	ldr	r0, [pc, #404]	; (1e19c <uart_callback+0x1d0>)
   1e006:	f018 f979 	bl	362fc <z_impl_k_sem_give>
   1e00a:	4b65      	ldr	r3, [pc, #404]	; (1e1a0 <uart_callback+0x1d4>)
   1e00c:	4965      	ldr	r1, [pc, #404]	; (1e1a4 <uart_callback+0x1d8>)
		LOG_INF("TX_ABORTED");
   1e00e:	4866      	ldr	r0, [pc, #408]	; (1e1a8 <uart_callback+0x1dc>)
   1e010:	1ac9      	subs	r1, r1, r3
   1e012:	08c9      	lsrs	r1, r1, #3
   1e014:	0189      	lsls	r1, r1, #6
   1e016:	f041 0103 	orr.w	r1, r1, #3
}
   1e01a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LOG_INF("TX_ABORTED");
   1e01e:	f01a ba4f 	b.w	384c0 <log_0>
   1e022:	4b5f      	ldr	r3, [pc, #380]	; (1e1a0 <uart_callback+0x1d4>)
   1e024:	4f5f      	ldr	r7, [pc, #380]	; (1e1a4 <uart_callback+0x1d8>)
	cmd_len += 1;
   1e026:	4c61      	ldr	r4, [pc, #388]	; (1e1ac <uart_callback+0x1e0>)
   1e028:	1aff      	subs	r7, r7, r3
		for (int i = pos; i < (pos + evt->data.rx.len); i++) {
   1e02a:	4b61      	ldr	r3, [pc, #388]	; (1e1b0 <uart_callback+0x1e4>)
	if (inside_quotes) {
   1e02c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 1e1e4 <uart_callback+0x218>
   1e030:	4698      	mov	r8, r3
   1e032:	f8b3 9000 	ldrh.w	r9, [r3]
   1e036:	08ff      	lsrs	r7, r7, #3
		for (int i = pos; i < (pos + evt->data.rx.len); i++) {
   1e038:	f8b8 3000 	ldrh.w	r3, [r8]
   1e03c:	68f2      	ldr	r2, [r6, #12]
   1e03e:	4413      	add	r3, r2
   1e040:	454b      	cmp	r3, r9
   1e042:	d803      	bhi.n	1e04c <uart_callback+0x80>
		pos += evt->data.rx.len;
   1e044:	f8a8 3000 	strh.w	r3, [r8]
}
   1e048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uart_rx_handler(evt->data.rx.buf[i]);
   1e04c:	6873      	ldr	r3, [r6, #4]
	cmd_len += 1;
   1e04e:	6822      	ldr	r2, [r4, #0]
			uart_rx_handler(evt->data.rx.buf[i]);
   1e050:	f813 3009 	ldrb.w	r3, [r3, r9]
	cmd_len += 1;
   1e054:	1c55      	adds	r5, r2, #1
	switch (character) {
   1e056:	2b22      	cmp	r3, #34	; 0x22
	cmd_len += 1;
   1e058:	6025      	str	r5, [r4, #0]
	switch (character) {
   1e05a:	d018      	beq.n	1e08e <uart_callback+0xc2>
   1e05c:	2b7f      	cmp	r3, #127	; 0x7f
   1e05e:	d001      	beq.n	1e064 <uart_callback+0x98>
   1e060:	2b08      	cmp	r3, #8
   1e062:	d11a      	bne.n	1e09a <uart_callback+0xce>
		pos = pos ? pos - 1 : 0;
   1e064:	b102      	cbz	r2, 1e068 <uart_callback+0x9c>
   1e066:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   1e068:	2d02      	cmp	r5, #2
   1e06a:	bf38      	it	cc
   1e06c:	2502      	movcc	r5, #2
		at_buf[pos] = 0;
   1e06e:	2000      	movs	r0, #0
   1e070:	4950      	ldr	r1, [pc, #320]	; (1e1b4 <uart_callback+0x1e8>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   1e072:	3d02      	subs	r5, #2
		at_buf[pos] = 0;
   1e074:	5488      	strb	r0, [r1, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   1e076:	6025      	str	r5, [r4, #0]
	if (inside_quotes) {
   1e078:	f89a 1000 	ldrb.w	r1, [sl]
   1e07c:	b9d1      	cbnz	r1, 1e0b4 <uart_callback+0xe8>
	switch (term_mode) {
   1e07e:	494e      	ldr	r1, [pc, #312]	; (1e1b8 <uart_callback+0x1ec>)
   1e080:	7809      	ldrb	r1, [r1, #0]
   1e082:	2903      	cmp	r1, #3
   1e084:	d857      	bhi.n	1e136 <uart_callback+0x16a>
   1e086:	e8df f001 	tbb	[pc, r1]
   1e08a:	252a      	.short	0x252a
   1e08c:	4b43      	.short	0x4b43
		inside_quotes = !inside_quotes;
   1e08e:	f89a 1000 	ldrb.w	r1, [sl]
   1e092:	f081 0101 	eor.w	r1, r1, #1
   1e096:	f88a 1000 	strb.w	r1, [sl]
		if (cmd_len > AT_MAX_CMD_LEN) {
   1e09a:	f640 2b8c 	movw	fp, #2700	; 0xa8c
   1e09e:	455d      	cmp	r5, fp
   1e0a0:	d90b      	bls.n	1e0ba <uart_callback+0xee>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   1e0a2:	01ba      	lsls	r2, r7, #6
   1e0a4:	4619      	mov	r1, r3
   1e0a6:	4845      	ldr	r0, [pc, #276]	; (1e1bc <uart_callback+0x1f0>)
   1e0a8:	f042 0201 	orr.w	r2, r2, #1
   1e0ac:	f01a fa17 	bl	384de <log_1>
			cmd_len = AT_MAX_CMD_LEN;
   1e0b0:	f8c4 b000 	str.w	fp, [r4]
		for (int i = pos; i < (pos + evt->data.rx.len); i++) {
   1e0b4:	f109 0901 	add.w	r9, r9, #1
   1e0b8:	e7be      	b.n	1e038 <uart_callback+0x6c>
		} else if (cmd_len < 1) {
   1e0ba:	b945      	cbnz	r5, 1e0ce <uart_callback+0x102>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
   1e0bc:	01ba      	lsls	r2, r7, #6
   1e0be:	4629      	mov	r1, r5
   1e0c0:	483f      	ldr	r0, [pc, #252]	; (1e1c0 <uart_callback+0x1f4>)
   1e0c2:	f042 0201 	orr.w	r2, r2, #1
   1e0c6:	f01a fa0a 	bl	384de <log_1>
			cmd_len = 0;
   1e0ca:	6025      	str	r5, [r4, #0]
			return;
   1e0cc:	e7f2      	b.n	1e0b4 <uart_callback+0xe8>
		at_buf[pos] = character;
   1e0ce:	4939      	ldr	r1, [pc, #228]	; (1e1b4 <uart_callback+0x1e8>)
   1e0d0:	548b      	strb	r3, [r1, r2]
		break;
   1e0d2:	e7d1      	b.n	1e078 <uart_callback+0xac>
		if (character == termination[term_mode]) {
   1e0d4:	2b0d      	cmp	r3, #13
   1e0d6:	d1ed      	bne.n	1e0b4 <uart_callback+0xe8>
			cmd_len--;
   1e0d8:	6823      	ldr	r3, [r4, #0]
   1e0da:	3b01      	subs	r3, #1
			cmd_len -= 2;
   1e0dc:	6023      	str	r3, [r4, #0]
	uart_rx_disable(uart_dev);
   1e0de:	4b39      	ldr	r3, [pc, #228]	; (1e1c4 <uart_callback+0x1f8>)
   1e0e0:	6818      	ldr	r0, [r3, #0]
   1e0e2:	f019 fcde 	bl	37aa2 <uart_rx_disable>
   1e0e6:	4938      	ldr	r1, [pc, #224]	; (1e1c8 <uart_callback+0x1fc>)
   1e0e8:	e8d1 3fef 	ldaex	r3, [r1]
   1e0ec:	f043 0201 	orr.w	r2, r3, #1
   1e0f0:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1e0f4:	2800      	cmp	r0, #0
   1e0f6:	d1f7      	bne.n	1e0e8 <uart_callback+0x11c>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e0f8:	07db      	lsls	r3, r3, #31
   1e0fa:	d403      	bmi.n	1e104 <uart_callback+0x138>
		k_queue_append(&work_q->queue, work);
   1e0fc:	4833      	ldr	r0, [pc, #204]	; (1e1cc <uart_callback+0x200>)
   1e0fe:	3908      	subs	r1, #8
   1e100:	f01c fd6d 	bl	3abde <k_queue_append>
	at_buf_len = cmd_len;
   1e104:	6822      	ldr	r2, [r4, #0]
   1e106:	4b32      	ldr	r3, [pc, #200]	; (1e1d0 <uart_callback+0x204>)
   1e108:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
   1e10a:	2300      	movs	r3, #0
   1e10c:	6023      	str	r3, [r4, #0]
   1e10e:	e7d1      	b.n	1e0b4 <uart_callback+0xe8>
		if ((at_buf[pos - 1]) &&
   1e110:	4928      	ldr	r1, [pc, #160]	; (1e1b4 <uart_callback+0x1e8>)
   1e112:	440a      	add	r2, r1
   1e114:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1e118:	2a00      	cmp	r2, #0
   1e11a:	d0cb      	beq.n	1e0b4 <uart_callback+0xe8>
   1e11c:	2b0a      	cmp	r3, #10
   1e11e:	e7da      	b.n	1e0d6 <uart_callback+0x10a>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
   1e120:	4924      	ldr	r1, [pc, #144]	; (1e1b4 <uart_callback+0x1e8>)
   1e122:	440a      	add	r2, r1
   1e124:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1e128:	2a0d      	cmp	r2, #13
   1e12a:	d1c3      	bne.n	1e0b4 <uart_callback+0xe8>
   1e12c:	2b0a      	cmp	r3, #10
   1e12e:	d1c1      	bne.n	1e0b4 <uart_callback+0xe8>
			cmd_len -= 2;
   1e130:	6823      	ldr	r3, [r4, #0]
   1e132:	3b02      	subs	r3, #2
   1e134:	e7d2      	b.n	1e0dc <uart_callback+0x110>
		LOG_ERR("Invalid termination mode: %d", term_mode);
   1e136:	01ba      	lsls	r2, r7, #6
   1e138:	4826      	ldr	r0, [pc, #152]	; (1e1d4 <uart_callback+0x208>)
   1e13a:	f042 0201 	orr.w	r2, r2, #1
   1e13e:	f01a f9ce 	bl	384de <log_1>
   1e142:	e7b7      	b.n	1e0b4 <uart_callback+0xe8>
		pos = 0;
   1e144:	2200      	movs	r2, #0
   1e146:	4b1a      	ldr	r3, [pc, #104]	; (1e1b0 <uart_callback+0x1e4>)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
   1e148:	4923      	ldr	r1, [pc, #140]	; (1e1d8 <uart_callback+0x20c>)
   1e14a:	801a      	strh	r2, [r3, #0]
		err = uart_rx_buf_rsp(uart_dev, next_buf,
   1e14c:	4b1d      	ldr	r3, [pc, #116]	; (1e1c4 <uart_callback+0x1f8>)
   1e14e:	6809      	ldr	r1, [r1, #0]
   1e150:	6818      	ldr	r0, [r3, #0]
   1e152:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e156:	6883      	ldr	r3, [r0, #8]
   1e158:	691b      	ldr	r3, [r3, #16]
   1e15a:	4798      	blx	r3
		if (err) {
   1e15c:	4601      	mov	r1, r0
   1e15e:	2800      	cmp	r0, #0
   1e160:	f43f af72 	beq.w	1e048 <uart_callback+0x7c>
   1e164:	4a0f      	ldr	r2, [pc, #60]	; (1e1a4 <uart_callback+0x1d8>)
   1e166:	4b0e      	ldr	r3, [pc, #56]	; (1e1a0 <uart_callback+0x1d4>)
			LOG_WRN("UART RX buf rsp: %d", err);
   1e168:	481c      	ldr	r0, [pc, #112]	; (1e1dc <uart_callback+0x210>)
   1e16a:	1ad2      	subs	r2, r2, r3
   1e16c:	08d2      	lsrs	r2, r2, #3
   1e16e:	0192      	lsls	r2, r2, #6
   1e170:	f042 0202 	orr.w	r2, r2, #2
}
   1e174:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LOG_WRN("RX_STOPPED (%d)", evt->data.rx_stop.reason);
   1e178:	f01a b9b1 	b.w	384de <log_1>
		next_buf = evt->data.rx_buf.buf;
   1e17c:	684a      	ldr	r2, [r1, #4]
   1e17e:	4b16      	ldr	r3, [pc, #88]	; (1e1d8 <uart_callback+0x20c>)
   1e180:	601a      	str	r2, [r3, #0]
		break;
   1e182:	e761      	b.n	1e048 <uart_callback+0x7c>
   1e184:	4a07      	ldr	r2, [pc, #28]	; (1e1a4 <uart_callback+0x1d8>)
   1e186:	4b06      	ldr	r3, [pc, #24]	; (1e1a0 <uart_callback+0x1d4>)
		LOG_WRN("RX_STOPPED (%d)", evt->data.rx_stop.reason);
   1e188:	7909      	ldrb	r1, [r1, #4]
   1e18a:	1ad2      	subs	r2, r2, r3
   1e18c:	08d2      	lsrs	r2, r2, #3
   1e18e:	0192      	lsls	r2, r2, #6
   1e190:	4813      	ldr	r0, [pc, #76]	; (1e1e0 <uart_callback+0x214>)
   1e192:	f042 0202 	orr.w	r2, r2, #2
   1e196:	e7ed      	b.n	1e174 <uart_callback+0x1a8>
   1e198:	2002346c 	.word	0x2002346c
   1e19c:	200208c4 	.word	0x200208c4
   1e1a0:	0003c2cc 	.word	0x0003c2cc
   1e1a4:	0003c2e4 	.word	0x0003c2e4
   1e1a8:	0003cfea 	.word	0x0003cfea
   1e1ac:	20023458 	.word	0x20023458
   1e1b0:	20028924 	.word	0x20028924
   1e1b4:	200293dc 	.word	0x200293dc
   1e1b8:	2002a8f5 	.word	0x2002a8f5
   1e1bc:	0003cff5 	.word	0x0003cff5
   1e1c0:	0003d015 	.word	0x0003d015
   1e1c4:	20023468 	.word	0x20023468
   1e1c8:	20023464 	.word	0x20023464
   1e1cc:	20023348 	.word	0x20023348
   1e1d0:	20023454 	.word	0x20023454
   1e1d4:	0003d033 	.word	0x0003d033
   1e1d8:	200200c0 	.word	0x200200c0
   1e1dc:	0003d050 	.word	0x0003d050
   1e1e0:	0003d064 	.word	0x0003d064
   1e1e4:	2002a8f4 	.word	0x2002a8f4

0001e1e8 <rsp_send>:
{
   1e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1ea:	4607      	mov	r7, r0
   1e1ec:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   1e1ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e1f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e1f6:	481b      	ldr	r0, [pc, #108]	; (1e264 <rsp_send+0x7c>)
   1e1f8:	f018 f8a6 	bl	36348 <z_impl_k_sem_take>
	uart_tx_buf = k_malloc(len);
   1e1fc:	4628      	mov	r0, r5
   1e1fe:	f018 fc97 	bl	36b30 <k_malloc>
   1e202:	4e19      	ldr	r6, [pc, #100]	; (1e268 <rsp_send+0x80>)
   1e204:	4604      	mov	r4, r0
   1e206:	6030      	str	r0, [r6, #0]
	if (uart_tx_buf == NULL) {
   1e208:	b970      	cbnz	r0, 1e228 <rsp_send+0x40>
   1e20a:	4918      	ldr	r1, [pc, #96]	; (1e26c <rsp_send+0x84>)
   1e20c:	4b18      	ldr	r3, [pc, #96]	; (1e270 <rsp_send+0x88>)
		LOG_WRN("No ram buffer");
   1e20e:	4819      	ldr	r0, [pc, #100]	; (1e274 <rsp_send+0x8c>)
   1e210:	1ac9      	subs	r1, r1, r3
   1e212:	08c9      	lsrs	r1, r1, #3
   1e214:	0189      	lsls	r1, r1, #6
   1e216:	f041 0102 	orr.w	r1, r1, #2
   1e21a:	f01a f951 	bl	384c0 <log_0>
}
   1e21e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1e222:	4810      	ldr	r0, [pc, #64]	; (1e264 <rsp_send+0x7c>)
   1e224:	f018 b86a 	b.w	362fc <z_impl_k_sem_give>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e228:	462a      	mov	r2, r5
   1e22a:	4639      	mov	r1, r7
   1e22c:	f01d f8c1 	bl	3b3b2 <memcpy>
	ret = uart_tx(uart_dev, uart_tx_buf, len, SYS_FOREVER_MS);
   1e230:	4b11      	ldr	r3, [pc, #68]	; (1e278 <rsp_send+0x90>)
   1e232:	6818      	ldr	r0, [r3, #0]
	return api->tx(dev, buf, len, timeout);
   1e234:	6883      	ldr	r3, [r0, #8]
   1e236:	4621      	mov	r1, r4
   1e238:	685f      	ldr	r7, [r3, #4]
   1e23a:	462a      	mov	r2, r5
   1e23c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e240:	47b8      	blx	r7
	if (ret) {
   1e242:	4601      	mov	r1, r0
   1e244:	b168      	cbz	r0, 1e262 <rsp_send+0x7a>
   1e246:	4b0a      	ldr	r3, [pc, #40]	; (1e270 <rsp_send+0x88>)
   1e248:	4a08      	ldr	r2, [pc, #32]	; (1e26c <rsp_send+0x84>)
		LOG_WRN("uart_tx failed: %d", ret);
   1e24a:	480c      	ldr	r0, [pc, #48]	; (1e27c <rsp_send+0x94>)
   1e24c:	1ad2      	subs	r2, r2, r3
   1e24e:	08d2      	lsrs	r2, r2, #3
   1e250:	0192      	lsls	r2, r2, #6
   1e252:	f042 0202 	orr.w	r2, r2, #2
   1e256:	f01a f942 	bl	384de <log_1>
		k_free(uart_tx_buf);
   1e25a:	6830      	ldr	r0, [r6, #0]
   1e25c:	f01d f86c 	bl	3b338 <k_free>
   1e260:	e7dd      	b.n	1e21e <rsp_send+0x36>
}
   1e262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e264:	200208c4 	.word	0x200208c4
   1e268:	2002346c 	.word	0x2002346c
   1e26c:	0003c2e4 	.word	0x0003c2e4
   1e270:	0003c2cc 	.word	0x0003c2cc
   1e274:	0003d074 	.word	0x0003d074
   1e278:	20023468 	.word	0x20023468
   1e27c:	0003d082 	.word	0x0003d082

0001e280 <slm_at_host_init>:

int slm_at_host_init(void)
{
   1e280:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   1e284:	4872      	ldr	r0, [pc, #456]	; (1e450 <slm_at_host_init+0x1d0>)
   1e286:	f017 f8c1 	bl	3540c <z_impl_device_get_binding>

	/* Initialize the UART module */
#if defined(CONFIG_SLM_CONNECT_UART_0)
	uart_dev = device_get_binding(DT_LABEL(DT_NODELABEL(uart0)));
#elif defined(CONFIG_SLM_CONNECT_UART_2)
	uart_dev = device_get_binding(DT_LABEL(DT_NODELABEL(uart2)));
   1e28a:	4c72      	ldr	r4, [pc, #456]	; (1e454 <slm_at_host_init+0x1d4>)
   1e28c:	6020      	str	r0, [r4, #0]
#else
	LOG_ERR("Unsupported UART instance");
	return -EINVAL;
#endif
	if (uart_dev == NULL) {
   1e28e:	b970      	cbnz	r0, 1e2ae <slm_at_host_init+0x2e>
   1e290:	4b71      	ldr	r3, [pc, #452]	; (1e458 <slm_at_host_init+0x1d8>)
   1e292:	4972      	ldr	r1, [pc, #456]	; (1e45c <slm_at_host_init+0x1dc>)
		LOG_ERR("Cannot bind UART device\n");
   1e294:	4872      	ldr	r0, [pc, #456]	; (1e460 <slm_at_host_init+0x1e0>)
   1e296:	1ac9      	subs	r1, r1, r3
   1e298:	08c9      	lsrs	r1, r1, #3
   1e29a:	0189      	lsls	r1, r1, #6
   1e29c:	f041 0101 	orr.w	r1, r1, #1
   1e2a0:	f01a f90e 	bl	384c0 <log_0>
		return -EINVAL;
   1e2a4:	f06f 0415 	mvn.w	r4, #21
	k_sem_give(&tx_done);
	rsp_send(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);

	LOG_DBG("at_host init done");
	return err;
}
   1e2a8:	4620      	mov	r0, r4
   1e2aa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	return z_impl_k_uptime_ticks();
   1e2ae:	f01c fe80 	bl	3afb2 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1e2b2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1e2b6:	460b      	mov	r3, r1
   1e2b8:	fba0 0106 	umull	r0, r1, r0, r6
   1e2bc:	fb06 1103 	mla	r1, r6, r3, r1
   1e2c0:	0bc7      	lsrs	r7, r0, #15
   1e2c2:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
		err = uart_err_check(uart_dev);
   1e2c6:	6820      	ldr	r0, [r4, #0]
static inline int z_impl_uart_err_check(const struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->err_check != NULL) {
   1e2c8:	6883      	ldr	r3, [r0, #8]
   1e2ca:	6a1b      	ldr	r3, [r3, #32]
   1e2cc:	2b00      	cmp	r3, #0
   1e2ce:	f000 80a8 	beq.w	1e422 <slm_at_host_init+0x1a2>
		return api->err_check(dev);
   1e2d2:	4798      	blx	r3
		if (err) {
   1e2d4:	4605      	mov	r5, r0
   1e2d6:	2800      	cmp	r0, #0
   1e2d8:	f000 80a3 	beq.w	1e422 <slm_at_host_init+0x1a2>
   1e2dc:	f01c fe69 	bl	3afb2 <z_impl_k_uptime_ticks>
   1e2e0:	fba0 bc06 	umull	fp, ip, r0, r6
   1e2e4:	fb06 cc01 	mla	ip, r6, r1, ip
   1e2e8:	ea4f 32db 	mov.w	r2, fp, lsr #15
   1e2ec:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
			if (k_uptime_get_32() - start_time > 500) {
   1e2f0:	1bd2      	subs	r2, r2, r7
   1e2f2:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1e2f6:	d9e6      	bls.n	1e2c6 <slm_at_host_init+0x46>
   1e2f8:	4b57      	ldr	r3, [pc, #348]	; (1e458 <slm_at_host_init+0x1d8>)
   1e2fa:	4a58      	ldr	r2, [pc, #352]	; (1e45c <slm_at_host_init+0x1dc>)
				LOG_ERR("UART check failed: %d. "
   1e2fc:	4629      	mov	r1, r5
   1e2fe:	1ad2      	subs	r2, r2, r3
   1e300:	08d2      	lsrs	r2, r2, #3
   1e302:	0192      	lsls	r2, r2, #6
   1e304:	4857      	ldr	r0, [pc, #348]	; (1e464 <slm_at_host_init+0x1e4>)
   1e306:	f042 0201 	orr.w	r2, r2, #1
   1e30a:	f01a f8e8 	bl	384de <log_1>
				return -EIO;
   1e30e:	f06f 0404 	mvn.w	r4, #4
   1e312:	e7c9      	b.n	1e2a8 <slm_at_host_init+0x28>
	device_set_power_state(uart_dev, DEVICE_PM_ACTIVE_STATE,
   1e314:	2101      	movs	r1, #1
   1e316:	6820      	ldr	r0, [r4, #0]
   1e318:	f019 fbc6 	bl	37aa8 <device_set_power_state.constprop.0>
	term_mode = CONFIG_SLM_AT_HOST_TERMINATION;
   1e31c:	2203      	movs	r2, #3
   1e31e:	4b52      	ldr	r3, [pc, #328]	; (1e468 <slm_at_host_init+0x1e8>)
	err = uart_rx_enable(uart_dev, uart_rx_buf[0],
   1e320:	6820      	ldr	r0, [r4, #0]
	term_mode = CONFIG_SLM_AT_HOST_TERMINATION;
   1e322:	701a      	strb	r2, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
   1e324:	6883      	ldr	r3, [r0, #8]
   1e326:	4951      	ldr	r1, [pc, #324]	; (1e46c <slm_at_host_init+0x1ec>)
   1e328:	68dc      	ldr	r4, [r3, #12]
   1e32a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e32e:	2301      	movs	r3, #1
   1e330:	47a0      	blx	r4
	if (err) {
   1e332:	4601      	mov	r1, r0
   1e334:	b140      	cbz	r0, 1e348 <slm_at_host_init+0xc8>
   1e336:	4a49      	ldr	r2, [pc, #292]	; (1e45c <slm_at_host_init+0x1dc>)
   1e338:	4b47      	ldr	r3, [pc, #284]	; (1e458 <slm_at_host_init+0x1d8>)
		LOG_ERR("Cannot enable rx: %d", err);
   1e33a:	484d      	ldr	r0, [pc, #308]	; (1e470 <slm_at_host_init+0x1f0>)
   1e33c:	1ad2      	subs	r2, r2, r3
   1e33e:	08d2      	lsrs	r2, r2, #3
   1e340:	0192      	lsls	r2, r2, #6
   1e342:	f042 0201 	orr.w	r2, r2, #1
   1e346:	e07e      	b.n	1e446 <slm_at_host_init+0x1c6>
	err = at_notif_register_handler(NULL, response_handler);
   1e348:	494a      	ldr	r1, [pc, #296]	; (1e474 <slm_at_host_init+0x1f4>)
   1e34a:	f00c fa25 	bl	2a798 <at_notif_register_handler>
	if (err) {
   1e34e:	4604      	mov	r4, r0
   1e350:	b158      	cbz	r0, 1e36a <slm_at_host_init+0xea>
   1e352:	4b41      	ldr	r3, [pc, #260]	; (1e458 <slm_at_host_init+0x1d8>)
   1e354:	4a41      	ldr	r2, [pc, #260]	; (1e45c <slm_at_host_init+0x1dc>)
		LOG_ERR("Can't register handler err=%d", err);
   1e356:	4601      	mov	r1, r0
   1e358:	1ad2      	subs	r2, r2, r3
   1e35a:	08d2      	lsrs	r2, r2, #3
   1e35c:	0192      	lsls	r2, r2, #6
   1e35e:	4846      	ldr	r0, [pc, #280]	; (1e478 <slm_at_host_init+0x1f8>)
   1e360:	f042 0201 	orr.w	r2, r2, #1
   1e364:	f01a f8bb 	bl	384de <log_1>
		return err;
   1e368:	e79e      	b.n	1e2a8 <slm_at_host_init+0x28>
	err = slm_at_tcp_proxy_init();
   1e36a:	f001 ff61 	bl	20230 <slm_at_tcp_proxy_init>
	if (err) {
   1e36e:	4601      	mov	r1, r0
   1e370:	b140      	cbz	r0, 1e384 <slm_at_host_init+0x104>
   1e372:	4a3a      	ldr	r2, [pc, #232]	; (1e45c <slm_at_host_init+0x1dc>)
   1e374:	4b38      	ldr	r3, [pc, #224]	; (1e458 <slm_at_host_init+0x1d8>)
		LOG_ERR("TCP Server could not be initialized: %d", err);
   1e376:	4841      	ldr	r0, [pc, #260]	; (1e47c <slm_at_host_init+0x1fc>)
   1e378:	1ad2      	subs	r2, r2, r3
   1e37a:	08d2      	lsrs	r2, r2, #3
   1e37c:	0192      	lsls	r2, r2, #6
   1e37e:	f042 0201 	orr.w	r2, r2, #1
   1e382:	e060      	b.n	1e446 <slm_at_host_init+0x1c6>
	err = slm_at_udp_proxy_init();
   1e384:	f002 ff0c 	bl	211a0 <slm_at_udp_proxy_init>
	if (err) {
   1e388:	4601      	mov	r1, r0
   1e38a:	b140      	cbz	r0, 1e39e <slm_at_host_init+0x11e>
   1e38c:	4a33      	ldr	r2, [pc, #204]	; (1e45c <slm_at_host_init+0x1dc>)
   1e38e:	4b32      	ldr	r3, [pc, #200]	; (1e458 <slm_at_host_init+0x1d8>)
		LOG_ERR("UDP Server could not be initialized: %d", err);
   1e390:	483b      	ldr	r0, [pc, #236]	; (1e480 <slm_at_host_init+0x200>)
   1e392:	1ad2      	subs	r2, r2, r3
   1e394:	08d2      	lsrs	r2, r2, #3
   1e396:	0192      	lsls	r2, r2, #6
   1e398:	f042 0201 	orr.w	r2, r2, #1
   1e39c:	e053      	b.n	1e446 <slm_at_host_init+0x1c6>
	err = slm_at_tcpip_init();
   1e39e:	f000 fde7 	bl	1ef70 <slm_at_tcpip_init>
	if (err) {
   1e3a2:	4601      	mov	r1, r0
   1e3a4:	b140      	cbz	r0, 1e3b8 <slm_at_host_init+0x138>
   1e3a6:	4a2d      	ldr	r2, [pc, #180]	; (1e45c <slm_at_host_init+0x1dc>)
   1e3a8:	4b2b      	ldr	r3, [pc, #172]	; (1e458 <slm_at_host_init+0x1d8>)
		LOG_ERR("TCPIP could not be initialized: %d", err);
   1e3aa:	4836      	ldr	r0, [pc, #216]	; (1e484 <slm_at_host_init+0x204>)
   1e3ac:	1ad2      	subs	r2, r2, r3
   1e3ae:	08d2      	lsrs	r2, r2, #3
   1e3b0:	0192      	lsls	r2, r2, #6
   1e3b2:	f042 0201 	orr.w	r2, r2, #1
   1e3b6:	e046      	b.n	1e446 <slm_at_host_init+0x1c6>
	err = slm_at_icmp_init();
   1e3b8:	f003 ff02 	bl	221c0 <slm_at_icmp_init>
	if (err) {
   1e3bc:	4601      	mov	r1, r0
   1e3be:	b140      	cbz	r0, 1e3d2 <slm_at_host_init+0x152>
   1e3c0:	4a26      	ldr	r2, [pc, #152]	; (1e45c <slm_at_host_init+0x1dc>)
   1e3c2:	4b25      	ldr	r3, [pc, #148]	; (1e458 <slm_at_host_init+0x1d8>)
		LOG_ERR("ICMP could not be initialized: %d", err);
   1e3c4:	4830      	ldr	r0, [pc, #192]	; (1e488 <slm_at_host_init+0x208>)
   1e3c6:	1ad2      	subs	r2, r2, r3
   1e3c8:	08d2      	lsrs	r2, r2, #3
   1e3ca:	0192      	lsls	r2, r2, #6
   1e3cc:	f042 0201 	orr.w	r2, r2, #1
   1e3d0:	e039      	b.n	1e446 <slm_at_host_init+0x1c6>
	err = slm_at_fota_init();
   1e3d2:	f004 f907 	bl	225e4 <slm_at_fota_init>
	if (err) {
   1e3d6:	4601      	mov	r1, r0
   1e3d8:	b140      	cbz	r0, 1e3ec <slm_at_host_init+0x16c>
   1e3da:	4a20      	ldr	r2, [pc, #128]	; (1e45c <slm_at_host_init+0x1dc>)
   1e3dc:	4b1e      	ldr	r3, [pc, #120]	; (1e458 <slm_at_host_init+0x1d8>)
		LOG_ERR("FOTA could not be initialized: %d", err);
   1e3de:	482b      	ldr	r0, [pc, #172]	; (1e48c <slm_at_host_init+0x20c>)
   1e3e0:	1ad2      	subs	r2, r2, r3
   1e3e2:	08d2      	lsrs	r2, r2, #3
   1e3e4:	0192      	lsls	r2, r2, #6
   1e3e6:	f042 0201 	orr.w	r2, r2, #1
   1e3ea:	e02c      	b.n	1e446 <slm_at_host_init+0x1c6>
	err = slm_at_httpc_init();
   1e3ec:	f004 fe8c 	bl	23108 <slm_at_httpc_init>
	if (err) {
   1e3f0:	4604      	mov	r4, r0
   1e3f2:	b148      	cbz	r0, 1e408 <slm_at_host_init+0x188>
   1e3f4:	4a19      	ldr	r2, [pc, #100]	; (1e45c <slm_at_host_init+0x1dc>)
   1e3f6:	4b18      	ldr	r3, [pc, #96]	; (1e458 <slm_at_host_init+0x1d8>)
		LOG_ERR("HTTP could not be initialized: %d", err);
   1e3f8:	4601      	mov	r1, r0
   1e3fa:	1ad2      	subs	r2, r2, r3
   1e3fc:	08d2      	lsrs	r2, r2, #3
   1e3fe:	0192      	lsls	r2, r2, #6
   1e400:	4823      	ldr	r0, [pc, #140]	; (1e490 <slm_at_host_init+0x210>)
   1e402:	f042 0201 	orr.w	r2, r2, #1
   1e406:	e01e      	b.n	1e446 <slm_at_host_init+0x1c6>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1e408:	4b22      	ldr	r3, [pc, #136]	; (1e494 <slm_at_host_init+0x214>)
   1e40a:	4a23      	ldr	r2, [pc, #140]	; (1e498 <slm_at_host_init+0x218>)
   1e40c:	6018      	str	r0, [r3, #0]
   1e40e:	e9c3 2001 	strd	r2, r0, [r3, #4]
	z_impl_k_sem_give(sem);
   1e412:	4822      	ldr	r0, [pc, #136]	; (1e49c <slm_at_host_init+0x21c>)
   1e414:	f017 ff72 	bl	362fc <z_impl_k_sem_give>
	rsp_send(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
   1e418:	2107      	movs	r1, #7
   1e41a:	4821      	ldr	r0, [pc, #132]	; (1e4a0 <slm_at_host_init+0x220>)
   1e41c:	f7ff fee4 	bl	1e1e8 <rsp_send>
	return err;
   1e420:	e742      	b.n	1e2a8 <slm_at_host_init+0x28>
	err = uart_callback_set(uart_dev, uart_callback, NULL);
   1e422:	6820      	ldr	r0, [r4, #0]
	return api->callback_set(dev, callback, user_data);
   1e424:	491f      	ldr	r1, [pc, #124]	; (1e4a4 <slm_at_host_init+0x224>)
   1e426:	6883      	ldr	r3, [r0, #8]
   1e428:	2200      	movs	r2, #0
   1e42a:	681b      	ldr	r3, [r3, #0]
   1e42c:	4798      	blx	r3
	if (err) {
   1e42e:	4601      	mov	r1, r0
   1e430:	2800      	cmp	r0, #0
   1e432:	f43f af6f 	beq.w	1e314 <slm_at_host_init+0x94>
   1e436:	4a09      	ldr	r2, [pc, #36]	; (1e45c <slm_at_host_init+0x1dc>)
   1e438:	4b07      	ldr	r3, [pc, #28]	; (1e458 <slm_at_host_init+0x1d8>)
		LOG_ERR("Cannot set callback: %d", err);
   1e43a:	481b      	ldr	r0, [pc, #108]	; (1e4a8 <slm_at_host_init+0x228>)
   1e43c:	1ad2      	subs	r2, r2, r3
   1e43e:	08d2      	lsrs	r2, r2, #3
   1e440:	0192      	lsls	r2, r2, #6
   1e442:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("HTTP could not be initialized: %d", err);
   1e446:	f01a f84a 	bl	384de <log_1>
		return -EFAULT;
   1e44a:	f06f 040d 	mvn.w	r4, #13
   1e44e:	e72b      	b.n	1e2a8 <slm_at_host_init+0x28>
   1e450:	0003d095 	.word	0x0003d095
   1e454:	20023468 	.word	0x20023468
   1e458:	0003c2cc 	.word	0x0003c2cc
   1e45c:	0003c2e4 	.word	0x0003c2e4
   1e460:	0003d09c 	.word	0x0003d09c
   1e464:	0003d0b5 	.word	0x0003d0b5
   1e468:	2002a8f5 	.word	0x2002a8f5
   1e46c:	2002a8f6 	.word	0x2002a8f6
   1e470:	0003d103 	.word	0x0003d103
   1e474:	00037acd 	.word	0x00037acd
   1e478:	0003d118 	.word	0x0003d118
   1e47c:	0003d136 	.word	0x0003d136
   1e480:	0003d15e 	.word	0x0003d15e
   1e484:	0003d186 	.word	0x0003d186
   1e488:	0003d1a9 	.word	0x0003d1a9
   1e48c:	0003d1cb 	.word	0x0003d1cb
   1e490:	0003d1ed 	.word	0x0003d1ed
   1e494:	2002345c 	.word	0x2002345c
   1e498:	0001e5e1 	.word	0x0001e5e1
   1e49c:	200208c4 	.word	0x200208c4
   1e4a0:	0003d20f 	.word	0x0003d20f
   1e4a4:	0001dfcd 	.word	0x0001dfcd
   1e4a8:	0003d0eb 	.word	0x0003d0eb

0001e4ac <slm_at_host_uninit>:

void slm_at_host_uninit(void)
{
   1e4ac:	b510      	push	{r4, lr}
	int err;

	err = slm_at_tcp_proxy_uninit();
   1e4ae:	f002 fd41 	bl	20f34 <slm_at_tcp_proxy_uninit>
	if (err) {
   1e4b2:	4601      	mov	r1, r0
   1e4b4:	b148      	cbz	r0, 1e4ca <slm_at_host_uninit+0x1e>
   1e4b6:	4a3e      	ldr	r2, [pc, #248]	; (1e5b0 <slm_at_host_uninit+0x104>)
   1e4b8:	4b3e      	ldr	r3, [pc, #248]	; (1e5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("TCP Server could not be uninitialized: %d", err);
   1e4ba:	483f      	ldr	r0, [pc, #252]	; (1e5b8 <slm_at_host_uninit+0x10c>)
   1e4bc:	1ad2      	subs	r2, r2, r3
   1e4be:	08d2      	lsrs	r2, r2, #3
   1e4c0:	0192      	lsls	r2, r2, #6
   1e4c2:	f042 0202 	orr.w	r2, r2, #2
   1e4c6:	f01a f80a 	bl	384de <log_1>
	}
	err = slm_at_udp_proxy_uninit();
   1e4ca:	f003 fb29 	bl	21b20 <slm_at_udp_proxy_uninit>
	if (err) {
   1e4ce:	4601      	mov	r1, r0
   1e4d0:	b148      	cbz	r0, 1e4e6 <slm_at_host_uninit+0x3a>
   1e4d2:	4a37      	ldr	r2, [pc, #220]	; (1e5b0 <slm_at_host_uninit+0x104>)
   1e4d4:	4b37      	ldr	r3, [pc, #220]	; (1e5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("UDP Server could not be uninitialized: %d", err);
   1e4d6:	4839      	ldr	r0, [pc, #228]	; (1e5bc <slm_at_host_uninit+0x110>)
   1e4d8:	1ad2      	subs	r2, r2, r3
   1e4da:	08d2      	lsrs	r2, r2, #3
   1e4dc:	0192      	lsls	r2, r2, #6
   1e4de:	f042 0202 	orr.w	r2, r2, #2
   1e4e2:	f019 fffc 	bl	384de <log_1>
	}
	err = slm_at_tcpip_uninit();
   1e4e6:	f019 fafe 	bl	37ae6 <slm_at_tcpip_uninit>
	if (err) {
   1e4ea:	4601      	mov	r1, r0
   1e4ec:	b148      	cbz	r0, 1e502 <slm_at_host_uninit+0x56>
   1e4ee:	4a30      	ldr	r2, [pc, #192]	; (1e5b0 <slm_at_host_uninit+0x104>)
   1e4f0:	4b30      	ldr	r3, [pc, #192]	; (1e5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("TCPIP could not be uninitialized: %d", err);
   1e4f2:	4833      	ldr	r0, [pc, #204]	; (1e5c0 <slm_at_host_uninit+0x114>)
   1e4f4:	1ad2      	subs	r2, r2, r3
   1e4f6:	08d2      	lsrs	r2, r2, #3
   1e4f8:	0192      	lsls	r2, r2, #6
   1e4fa:	f042 0202 	orr.w	r2, r2, #2
   1e4fe:	f019 ffee 	bl	384de <log_1>
	err = slm_at_cmng_uninit();
	if (err) {
		LOG_WRN("TLS could not be uninitialized: %d", err);
	}
#endif
	err = slm_at_icmp_uninit();
   1e502:	f019 fb25 	bl	37b50 <slm_at_icmp_uninit>
	if (err) {
   1e506:	4601      	mov	r1, r0
   1e508:	b148      	cbz	r0, 1e51e <slm_at_host_uninit+0x72>
   1e50a:	4a29      	ldr	r2, [pc, #164]	; (1e5b0 <slm_at_host_uninit+0x104>)
   1e50c:	4b29      	ldr	r3, [pc, #164]	; (1e5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("ICMP could not be uninitialized: %d", err);
   1e50e:	482d      	ldr	r0, [pc, #180]	; (1e5c4 <slm_at_host_uninit+0x118>)
   1e510:	1ad2      	subs	r2, r2, r3
   1e512:	08d2      	lsrs	r2, r2, #3
   1e514:	0192      	lsls	r2, r2, #6
   1e516:	f042 0202 	orr.w	r2, r2, #2
   1e51a:	f019 ffe0 	bl	384de <log_1>
	}
	err = slm_at_fota_uninit();
   1e51e:	f019 fb19 	bl	37b54 <slm_at_fota_uninit>
	if (err) {
   1e522:	4601      	mov	r1, r0
   1e524:	b148      	cbz	r0, 1e53a <slm_at_host_uninit+0x8e>
   1e526:	4a22      	ldr	r2, [pc, #136]	; (1e5b0 <slm_at_host_uninit+0x104>)
   1e528:	4b22      	ldr	r3, [pc, #136]	; (1e5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("FOTA could not be uninitialized: %d", err);
   1e52a:	4827      	ldr	r0, [pc, #156]	; (1e5c8 <slm_at_host_uninit+0x11c>)
   1e52c:	1ad2      	subs	r2, r2, r3
   1e52e:	08d2      	lsrs	r2, r2, #3
   1e530:	0192      	lsls	r2, r2, #6
   1e532:	f042 0202 	orr.w	r2, r2, #2
   1e536:	f019 ffd2 	bl	384de <log_1>
	if (err) {
		LOG_WRN("MQTT could not be uninitialized: %d", err);
	}
#endif
#if defined(CONFIG_SLM_HTTPC)
	err = slm_at_httpc_uninit();
   1e53a:	f004 fded 	bl	23118 <slm_at_httpc_uninit>
	if (err) {
   1e53e:	4601      	mov	r1, r0
   1e540:	b148      	cbz	r0, 1e556 <slm_at_host_uninit+0xaa>
   1e542:	4a1b      	ldr	r2, [pc, #108]	; (1e5b0 <slm_at_host_uninit+0x104>)
   1e544:	4b1b      	ldr	r3, [pc, #108]	; (1e5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("HTTP could not be uninitialized: %d", err);
   1e546:	4821      	ldr	r0, [pc, #132]	; (1e5cc <slm_at_host_uninit+0x120>)
   1e548:	1ad2      	subs	r2, r2, r3
   1e54a:	08d2      	lsrs	r2, r2, #3
   1e54c:	0192      	lsls	r2, r2, #6
   1e54e:	f042 0202 	orr.w	r2, r2, #2
   1e552:	f019 ffc4 	bl	384de <log_1>
	}

	err = at_notif_deregister_handler(NULL, response_handler);
   1e556:	491e      	ldr	r1, [pc, #120]	; (1e5d0 <slm_at_host_uninit+0x124>)
   1e558:	2000      	movs	r0, #0
   1e55a:	f00c f967 	bl	2a82c <at_notif_deregister_handler>
	if (err) {
   1e55e:	4601      	mov	r1, r0
   1e560:	b148      	cbz	r0, 1e576 <slm_at_host_uninit+0xca>
   1e562:	4a13      	ldr	r2, [pc, #76]	; (1e5b0 <slm_at_host_uninit+0x104>)
   1e564:	4b13      	ldr	r3, [pc, #76]	; (1e5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("Can't deregister handler: %d", err);
   1e566:	481b      	ldr	r0, [pc, #108]	; (1e5d4 <slm_at_host_uninit+0x128>)
   1e568:	1ad2      	subs	r2, r2, r3
   1e56a:	08d2      	lsrs	r2, r2, #3
   1e56c:	0192      	lsls	r2, r2, #6
   1e56e:	f042 0202 	orr.w	r2, r2, #2
   1e572:	f019 ffb4 	bl	384de <log_1>
	}
#endif
	/* Power off UART module */
	uart_rx_disable(uart_dev);
   1e576:	4c18      	ldr	r4, [pc, #96]	; (1e5d8 <slm_at_host_uninit+0x12c>)
   1e578:	6820      	ldr	r0, [r4, #0]
   1e57a:	f019 fa92 	bl	37aa2 <uart_rx_disable>
	return z_impl_k_sleep(timeout);
   1e57e:	2100      	movs	r1, #0
   1e580:	f640 40cd 	movw	r0, #3277	; 0xccd
   1e584:	f017 fe94 	bl	362b0 <z_impl_k_sleep>
	k_sleep(K_MSEC(100));
	err = device_set_power_state(uart_dev, DEVICE_PM_OFF_STATE,
   1e588:	2105      	movs	r1, #5
   1e58a:	6820      	ldr	r0, [r4, #0]
   1e58c:	f019 fa8c 	bl	37aa8 <device_set_power_state.constprop.0>
				NULL, NULL);
	if (err) {
   1e590:	4601      	mov	r1, r0
   1e592:	b158      	cbz	r0, 1e5ac <slm_at_host_uninit+0x100>
		LOG_WRN("Can't power off uart: %d", err);
	}

	LOG_DBG("at_host uninit done");
}
   1e594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e598:	4a05      	ldr	r2, [pc, #20]	; (1e5b0 <slm_at_host_uninit+0x104>)
   1e59a:	4b06      	ldr	r3, [pc, #24]	; (1e5b4 <slm_at_host_uninit+0x108>)
		LOG_WRN("Can't power off uart: %d", err);
   1e59c:	480f      	ldr	r0, [pc, #60]	; (1e5dc <slm_at_host_uninit+0x130>)
   1e59e:	1ad2      	subs	r2, r2, r3
   1e5a0:	08d2      	lsrs	r2, r2, #3
   1e5a2:	0192      	lsls	r2, r2, #6
   1e5a4:	f042 0202 	orr.w	r2, r2, #2
   1e5a8:	f019 bf99 	b.w	384de <log_1>
}
   1e5ac:	bd10      	pop	{r4, pc}
   1e5ae:	bf00      	nop
   1e5b0:	0003c2e4 	.word	0x0003c2e4
   1e5b4:	0003c2cc 	.word	0x0003c2cc
   1e5b8:	0003d217 	.word	0x0003d217
   1e5bc:	0003d241 	.word	0x0003d241
   1e5c0:	0003d26b 	.word	0x0003d26b
   1e5c4:	0003d290 	.word	0x0003d290
   1e5c8:	0003d2b4 	.word	0x0003d2b4
   1e5cc:	0003d2d8 	.word	0x0003d2d8
   1e5d0:	00037acd 	.word	0x00037acd
   1e5d4:	0003d2fc 	.word	0x0003d2fc
   1e5d8:	20023468 	.word	0x20023468
   1e5dc:	0003d319 	.word	0x0003d319

0001e5e0 <cmd_send>:
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1e5e0:	f640 228b 	movw	r2, #2699	; 0xa8b
{
   1e5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1e5e6:	4db1      	ldr	r5, [pc, #708]	; (1e8ac <cmd_send+0x2cc>)
   1e5e8:	4cb1      	ldr	r4, [pc, #708]	; (1e8b0 <cmd_send+0x2d0>)
   1e5ea:	682b      	ldr	r3, [r5, #0]
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMVER)) {
   1e5ec:	4620      	mov	r0, r4
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1e5ee:	4293      	cmp	r3, r2
   1e5f0:	bf28      	it	cs
   1e5f2:	4613      	movcs	r3, r2
   1e5f4:	2200      	movs	r2, #0
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMVER)) {
   1e5f6:	49af      	ldr	r1, [pc, #700]	; (1e8b4 <cmd_send+0x2d4>)
{
   1e5f8:	b09f      	sub	sp, #124	; 0x7c
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1e5fa:	54e2      	strb	r2, [r4, r3]
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMVER)) {
   1e5fc:	f7ff fc8e 	bl	1df1c <slm_util_cmd_casecmp>
   1e600:	4607      	mov	r7, r0
   1e602:	b120      	cbz	r0, 1e60e <cmd_send+0x2e>
		rsp_send(SLM_VERSION, sizeof(SLM_VERSION) - 1);
   1e604:	210f      	movs	r1, #15
   1e606:	48ac      	ldr	r0, [pc, #688]	; (1e8b8 <cmd_send+0x2d8>)
		rsp_send(buf, strlen(buf));
   1e608:	f7ff fdee 	bl	1e1e8 <rsp_send>
   1e60c:	e149      	b.n	1e8a2 <cmd_send+0x2c2>
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMUART)) {
   1e60e:	4620      	mov	r0, r4
   1e610:	49aa      	ldr	r1, [pc, #680]	; (1e8bc <cmd_send+0x2dc>)
   1e612:	f7ff fc83 	bl	1df1c <slm_util_cmd_casecmp>
   1e616:	4606      	mov	r6, r0
   1e618:	2800      	cmp	r0, #0
   1e61a:	f000 80f1 	beq.w	1e800 <cmd_send+0x220>
	ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
   1e61e:	4639      	mov	r1, r7
   1e620:	4620      	mov	r0, r4
   1e622:	4aa7      	ldr	r2, [pc, #668]	; (1e8c0 <cmd_send+0x2e0>)
   1e624:	f01b ffcf 	bl	3a5c6 <at_parser_params_from_str>
	if (ret < 0) {
   1e628:	1e06      	subs	r6, r0, #0
   1e62a:	da0b      	bge.n	1e644 <cmd_send+0x64>
		LOG_ERR("Failed to parse AT command %d", ret);
   1e62c:	4631      	mov	r1, r6
   1e62e:	4aa5      	ldr	r2, [pc, #660]	; (1e8c4 <cmd_send+0x2e4>)
   1e630:	4ba5      	ldr	r3, [pc, #660]	; (1e8c8 <cmd_send+0x2e8>)
   1e632:	1ad2      	subs	r2, r2, r3
   1e634:	08d2      	lsrs	r2, r2, #3
   1e636:	0192      	lsls	r2, r2, #6
   1e638:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to parse AT command %d", ret);
   1e63c:	48a3      	ldr	r0, [pc, #652]	; (1e8cc <cmd_send+0x2ec>)
   1e63e:	f019 ff4e 	bl	384de <log_1>
		if (err) {
   1e642:	e037      	b.n	1e6b4 <cmd_send+0xd4>
	type = at_parser_cmd_type_get(at_cmd);
   1e644:	4620      	mov	r0, r4
   1e646:	f01b ffc1 	bl	3a5cc <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1e64a:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
   1e64c:	4604      	mov	r4, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1e64e:	4da0      	ldr	r5, [pc, #640]	; (1e8d0 <cmd_send+0x2f0>)
   1e650:	d14c      	bne.n	1e6ec <cmd_send+0x10c>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1e652:	489b      	ldr	r0, [pc, #620]	; (1e8c0 <cmd_send+0x2e0>)
   1e654:	f01c f8ff 	bl	3a856 <at_params_valid_count_get>
   1e658:	2801      	cmp	r0, #1
   1e65a:	d90f      	bls.n	1e67c <cmd_send+0x9c>
			ret = at_params_int_get(&at_param_list, 1,
   1e65c:	4621      	mov	r1, r4
   1e65e:	4898      	ldr	r0, [pc, #608]	; (1e8c0 <cmd_send+0x2e0>)
   1e660:	aa02      	add	r2, sp, #8
   1e662:	f01c f8c2 	bl	3a7ea <at_params_int_get>
			if (ret < 0) {
   1e666:	2800      	cmp	r0, #0
   1e668:	da08      	bge.n	1e67c <cmd_send+0x9c>
   1e66a:	4996      	ldr	r1, [pc, #600]	; (1e8c4 <cmd_send+0x2e4>)
   1e66c:	4b96      	ldr	r3, [pc, #600]	; (1e8c8 <cmd_send+0x2e8>)
			LOG_ERR("AT parameter error");
   1e66e:	4899      	ldr	r0, [pc, #612]	; (1e8d4 <cmd_send+0x2f4>)
   1e670:	1ac9      	subs	r1, r1, r3
   1e672:	08c9      	lsrs	r1, r1, #3
   1e674:	0189      	lsls	r1, r1, #6
   1e676:	f041 0101 	orr.w	r1, r1, #1
   1e67a:	e019      	b.n	1e6b0 <cmd_send+0xd0>
		switch (*baudrate) {
   1e67c:	9b02      	ldr	r3, [sp, #8]
   1e67e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1e682:	d058      	beq.n	1e736 <cmd_send+0x156>
   1e684:	d81f      	bhi.n	1e6c6 <cmd_send+0xe6>
   1e686:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e68a:	d054      	beq.n	1e736 <cmd_send+0x156>
   1e68c:	d815      	bhi.n	1e6ba <cmd_send+0xda>
   1e68e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e692:	d050      	beq.n	1e736 <cmd_send+0x156>
   1e694:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e698:	d04d      	beq.n	1e736 <cmd_send+0x156>
   1e69a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e69e:	d04a      	beq.n	1e736 <cmd_send+0x156>
   1e6a0:	4988      	ldr	r1, [pc, #544]	; (1e8c4 <cmd_send+0x2e4>)
   1e6a2:	4b89      	ldr	r3, [pc, #548]	; (1e8c8 <cmd_send+0x2e8>)
			LOG_ERR("Invalid uart baud rate provided.");
   1e6a4:	488c      	ldr	r0, [pc, #560]	; (1e8d8 <cmd_send+0x2f8>)
   1e6a6:	1ac9      	subs	r1, r1, r3
   1e6a8:	08c9      	lsrs	r1, r1, #3
   1e6aa:	0189      	lsls	r1, r1, #6
   1e6ac:	f041 0101 	orr.w	r1, r1, #1
   1e6b0:	f019 ff06 	bl	384c0 <log_0>
		rsp_send(ERROR_STR, sizeof(ERROR_STR) - 1);
   1e6b4:	2107      	movs	r1, #7
   1e6b6:	4889      	ldr	r0, [pc, #548]	; (1e8dc <cmd_send+0x2fc>)
   1e6b8:	e0f5      	b.n	1e8a6 <cmd_send+0x2c6>
		switch (*baudrate) {
   1e6ba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e6be:	d03a      	beq.n	1e736 <cmd_send+0x156>
   1e6c0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e6c4:	e7eb      	b.n	1e69e <cmd_send+0xbe>
   1e6c6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e6ca:	d034      	beq.n	1e736 <cmd_send+0x156>
   1e6cc:	d808      	bhi.n	1e6e0 <cmd_send+0x100>
   1e6ce:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e6d2:	d030      	beq.n	1e736 <cmd_send+0x156>
   1e6d4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e6d8:	d02d      	beq.n	1e736 <cmd_send+0x156>
   1e6da:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e6de:	e7de      	b.n	1e69e <cmd_send+0xbe>
   1e6e0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e6e4:	d027      	beq.n	1e736 <cmd_send+0x156>
   1e6e6:	4a7e      	ldr	r2, [pc, #504]	; (1e8e0 <cmd_send+0x300>)
   1e6e8:	4293      	cmp	r3, r2
   1e6ea:	e7d8      	b.n	1e69e <cmd_send+0xbe>
	if (type == AT_CMD_TYPE_READ_COMMAND) {
   1e6ec:	2802      	cmp	r0, #2
   1e6ee:	d161      	bne.n	1e7b4 <cmd_send+0x1d4>
	err = uart_config_get(uart_dev, &cfg);
   1e6f0:	6828      	ldr	r0, [r5, #0]
					 struct uart_config *cfg)
{
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	if (api->config_get != NULL) {
   1e6f2:	6883      	ldr	r3, [r0, #8]
   1e6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e6f6:	2b00      	cmp	r3, #0
   1e6f8:	d057      	beq.n	1e7aa <cmd_send+0x1ca>
		return api->config_get(dev, cfg);
   1e6fa:	a903      	add	r1, sp, #12
   1e6fc:	4798      	blx	r3
	if (err) {
   1e6fe:	4604      	mov	r4, r0
   1e700:	2800      	cmp	r0, #0
   1e702:	d055      	beq.n	1e7b0 <cmd_send+0x1d0>
   1e704:	4a6f      	ldr	r2, [pc, #444]	; (1e8c4 <cmd_send+0x2e4>)
   1e706:	4b70      	ldr	r3, [pc, #448]	; (1e8c8 <cmd_send+0x2e8>)
		LOG_ERR("uart_config_get: %d", err);
   1e708:	4621      	mov	r1, r4
   1e70a:	1ad2      	subs	r2, r2, r3
   1e70c:	08d2      	lsrs	r2, r2, #3
   1e70e:	0192      	lsls	r2, r2, #6
   1e710:	4874      	ldr	r0, [pc, #464]	; (1e8e4 <cmd_send+0x304>)
   1e712:	f042 0201 	orr.w	r2, r2, #1
   1e716:	f019 fee2 	bl	384de <log_1>
		sprintf(buf, "#SLMUART: %d\r\n", get_uart_baudrate());
   1e71a:	2100      	movs	r1, #0
   1e71c:	2220      	movs	r2, #32
   1e71e:	4b72      	ldr	r3, [pc, #456]	; (1e8e8 <cmd_send+0x308>)
   1e720:	9400      	str	r4, [sp, #0]
   1e722:	a803      	add	r0, sp, #12
   1e724:	f01c ff7d 	bl	3b622 <__sprintf_chk>
		rsp_send(buf, strlen(buf));
   1e728:	a803      	add	r0, sp, #12
   1e72a:	f7fe fca1 	bl	1d070 <strlen>
   1e72e:	4601      	mov	r1, r0
		rsp_send(buf, sizeof(buf));
   1e730:	a803      	add	r0, sp, #12
   1e732:	f7ff fd59 	bl	1e1e8 <rsp_send>
			rsp_send(OK_STR, sizeof(OK_STR) - 1);
   1e736:	2104      	movs	r1, #4
   1e738:	486c      	ldr	r0, [pc, #432]	; (1e8ec <cmd_send+0x30c>)
   1e73a:	f7ff fd55 	bl	1e1e8 <rsp_send>
   1e73e:	2100      	movs	r1, #0
   1e740:	f240 6067 	movw	r0, #1639	; 0x667
   1e744:	f017 fdb4 	bl	362b0 <z_impl_k_sleep>
			set_uart_baudrate(baudrate);
   1e748:	9c02      	ldr	r4, [sp, #8]
	err = uart_config_get(uart_dev, &cfg);
   1e74a:	6828      	ldr	r0, [r5, #0]
	if (api->config_get != NULL) {
   1e74c:	6883      	ldr	r3, [r0, #8]
   1e74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e750:	2b00      	cmp	r3, #0
   1e752:	d03c      	beq.n	1e7ce <cmd_send+0x1ee>
		return api->config_get(dev, cfg);
   1e754:	a903      	add	r1, sp, #12
   1e756:	4798      	blx	r3
	if (err != 0) {
   1e758:	4601      	mov	r1, r0
   1e75a:	2800      	cmp	r0, #0
   1e75c:	d03a      	beq.n	1e7d4 <cmd_send+0x1f4>
   1e75e:	4a59      	ldr	r2, [pc, #356]	; (1e8c4 <cmd_send+0x2e4>)
   1e760:	4b59      	ldr	r3, [pc, #356]	; (1e8c8 <cmd_send+0x2e8>)
		LOG_ERR("uart_config_get: %d", err);
   1e762:	4860      	ldr	r0, [pc, #384]	; (1e8e4 <cmd_send+0x304>)
   1e764:	1ad2      	subs	r2, r2, r3
   1e766:	08d2      	lsrs	r2, r2, #3
   1e768:	0192      	lsls	r2, r2, #6
   1e76a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("uart_configure: %d", err);
   1e76e:	f019 feb6 	bl	384de <log_1>
	err = uart_rx_enable(uart_dev, uart_rx_buf[0],
   1e772:	4b57      	ldr	r3, [pc, #348]	; (1e8d0 <cmd_send+0x2f0>)
   1e774:	6818      	ldr	r0, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
   1e776:	6883      	ldr	r3, [r0, #8]
   1e778:	495d      	ldr	r1, [pc, #372]	; (1e8f0 <cmd_send+0x310>)
   1e77a:	68dc      	ldr	r4, [r3, #12]
   1e77c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e780:	2301      	movs	r3, #1
   1e782:	47a0      	blx	r4
	if (err) {
   1e784:	4601      	mov	r1, r0
   1e786:	2800      	cmp	r0, #0
   1e788:	f000 80f6 	beq.w	1e978 <cmd_send+0x398>
   1e78c:	4b4e      	ldr	r3, [pc, #312]	; (1e8c8 <cmd_send+0x2e8>)
   1e78e:	4a4d      	ldr	r2, [pc, #308]	; (1e8c4 <cmd_send+0x2e4>)
		LOG_ERR("UART RX failed: %d", err);
   1e790:	4858      	ldr	r0, [pc, #352]	; (1e8f4 <cmd_send+0x314>)
   1e792:	1ad2      	subs	r2, r2, r3
   1e794:	08d2      	lsrs	r2, r2, #3
   1e796:	0192      	lsls	r2, r2, #6
   1e798:	f042 0201 	orr.w	r2, r2, #1
   1e79c:	f019 fe9f 	bl	384de <log_1>
		rsp_send(FATAL_STR, sizeof(FATAL_STR) - 1);
   1e7a0:	210d      	movs	r1, #13
   1e7a2:	4855      	ldr	r0, [pc, #340]	; (1e8f8 <cmd_send+0x318>)
   1e7a4:	f7ff fd20 	bl	1e1e8 <rsp_send>
   1e7a8:	e0e6      	b.n	1e978 <cmd_send+0x398>
	}

	return -ENOTSUP;
   1e7aa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e7ae:	e7a9      	b.n	1e704 <cmd_send+0x124>
	return (int)cfg.baudrate;
   1e7b0:	9c03      	ldr	r4, [sp, #12]
   1e7b2:	e7b2      	b.n	1e71a <cmd_send+0x13a>
	if (type == AT_CMD_TYPE_TEST_COMMAND) {
   1e7b4:	2803      	cmp	r0, #3
   1e7b6:	d106      	bne.n	1e7c6 <cmd_send+0x1e6>
		char buf[] = SLM_UART_BAUDRATE;
   1e7b8:	4950      	ldr	r1, [pc, #320]	; (1e8fc <cmd_send+0x31c>)
   1e7ba:	226b      	movs	r2, #107	; 0x6b
   1e7bc:	a803      	add	r0, sp, #12
   1e7be:	f01c fdf8 	bl	3b3b2 <memcpy>
		rsp_send(buf, sizeof(buf));
   1e7c2:	216b      	movs	r1, #107	; 0x6b
   1e7c4:	e7b4      	b.n	1e730 <cmd_send+0x150>
		if (err != 0) {
   1e7c6:	2e00      	cmp	r6, #0
   1e7c8:	f47f af74 	bne.w	1e6b4 <cmd_send+0xd4>
   1e7cc:	e7b3      	b.n	1e736 <cmd_send+0x156>
   1e7ce:	f06f 0185 	mvn.w	r1, #133	; 0x85
   1e7d2:	e7c4      	b.n	1e75e <cmd_send+0x17e>
	err = uart_configure(uart_dev, &cfg);
   1e7d4:	6828      	ldr	r0, [r5, #0]
	cfg.baudrate = baudrate;
   1e7d6:	9403      	str	r4, [sp, #12]
	if (api->configure != NULL) {
   1e7d8:	6883      	ldr	r3, [r0, #8]
   1e7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e7dc:	b16b      	cbz	r3, 1e7fa <cmd_send+0x21a>
		return api->configure(dev, cfg);
   1e7de:	a903      	add	r1, sp, #12
   1e7e0:	4798      	blx	r3
	if (err != 0) {
   1e7e2:	4601      	mov	r1, r0
   1e7e4:	2800      	cmp	r0, #0
   1e7e6:	d0c4      	beq.n	1e772 <cmd_send+0x192>
   1e7e8:	4a36      	ldr	r2, [pc, #216]	; (1e8c4 <cmd_send+0x2e4>)
   1e7ea:	4b37      	ldr	r3, [pc, #220]	; (1e8c8 <cmd_send+0x2e8>)
		LOG_ERR("uart_configure: %d", err);
   1e7ec:	4844      	ldr	r0, [pc, #272]	; (1e900 <cmd_send+0x320>)
   1e7ee:	1ad2      	subs	r2, r2, r3
   1e7f0:	08d2      	lsrs	r2, r2, #3
   1e7f2:	0192      	lsls	r2, r2, #6
   1e7f4:	f042 0201 	orr.w	r2, r2, #1
   1e7f8:	e7b9      	b.n	1e76e <cmd_send+0x18e>
	return -ENOTSUP;
   1e7fa:	f06f 0185 	mvn.w	r1, #133	; 0x85
   1e7fe:	e7f3      	b.n	1e7e8 <cmd_send+0x208>
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_RESET)) {
   1e800:	4620      	mov	r0, r4
   1e802:	4940      	ldr	r1, [pc, #256]	; (1e904 <cmd_send+0x324>)
   1e804:	f7ff fb8a 	bl	1df1c <slm_util_cmd_casecmp>
   1e808:	b180      	cbz	r0, 1e82c <cmd_send+0x24c>
		rsp_send(OK_STR, sizeof(OK_STR) - 1);
   1e80a:	2104      	movs	r1, #4
   1e80c:	4837      	ldr	r0, [pc, #220]	; (1e8ec <cmd_send+0x30c>)
   1e80e:	f7ff fceb 	bl	1e1e8 <rsp_send>
   1e812:	2100      	movs	r1, #0
   1e814:	f240 6067 	movw	r0, #1639	; 0x667
   1e818:	f017 fd4a 	bl	362b0 <z_impl_k_sleep>
		slm_at_host_uninit();
   1e81c:	f7ff fe46 	bl	1e4ac <slm_at_host_uninit>
		enter_sleep(false);
   1e820:	4630      	mov	r0, r6
   1e822:	f019 f8ec 	bl	379fe <enter_sleep>
		sys_reboot(SYS_REBOOT_COLD);
   1e826:	2001      	movs	r0, #1
   1e828:	f006 fdba 	bl	253a0 <sys_reboot>
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_CLAC)) {
   1e82c:	4936      	ldr	r1, [pc, #216]	; (1e908 <cmd_send+0x328>)
   1e82e:	4820      	ldr	r0, [pc, #128]	; (1e8b0 <cmd_send+0x2d0>)
   1e830:	f7ff fb74 	bl	1df1c <slm_util_cmd_casecmp>
   1e834:	4604      	mov	r4, r0
   1e836:	2800      	cmp	r0, #0
   1e838:	d06c      	beq.n	1e914 <cmd_send+0x334>
	rsp_send(AT_CMD_SLMVER, sizeof(AT_CMD_SLMVER) - 1);
   1e83a:	210a      	movs	r1, #10
   1e83c:	481d      	ldr	r0, [pc, #116]	; (1e8b4 <cmd_send+0x2d4>)
   1e83e:	f7ff fcd3 	bl	1e1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1e842:	2102      	movs	r1, #2
   1e844:	4831      	ldr	r0, [pc, #196]	; (1e90c <cmd_send+0x32c>)
   1e846:	f7ff fccf 	bl	1e1e8 <rsp_send>
	rsp_send(AT_CMD_SLMUART, sizeof(AT_CMD_SLMUART) - 1);
   1e84a:	210b      	movs	r1, #11
   1e84c:	481b      	ldr	r0, [pc, #108]	; (1e8bc <cmd_send+0x2dc>)
   1e84e:	f7ff fccb 	bl	1e1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1e852:	2102      	movs	r1, #2
   1e854:	482d      	ldr	r0, [pc, #180]	; (1e90c <cmd_send+0x32c>)
   1e856:	f7ff fcc7 	bl	1e1e8 <rsp_send>
	rsp_send(AT_CMD_SLEEP, sizeof(AT_CMD_SLEEP) - 1);
   1e85a:	2109      	movs	r1, #9
   1e85c:	482c      	ldr	r0, [pc, #176]	; (1e910 <cmd_send+0x330>)
   1e85e:	f7ff fcc3 	bl	1e1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1e862:	2102      	movs	r1, #2
   1e864:	4829      	ldr	r0, [pc, #164]	; (1e90c <cmd_send+0x32c>)
   1e866:	f7ff fcbf 	bl	1e1e8 <rsp_send>
	rsp_send(AT_CMD_RESET, sizeof(AT_CMD_RESET) - 1);
   1e86a:	2109      	movs	r1, #9
   1e86c:	4825      	ldr	r0, [pc, #148]	; (1e904 <cmd_send+0x324>)
   1e86e:	f7ff fcbb 	bl	1e1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1e872:	2102      	movs	r1, #2
   1e874:	4825      	ldr	r0, [pc, #148]	; (1e90c <cmd_send+0x32c>)
   1e876:	f7ff fcb7 	bl	1e1e8 <rsp_send>
	rsp_send(AT_CMD_CLAC, sizeof(AT_CMD_CLAC) - 1);
   1e87a:	2108      	movs	r1, #8
   1e87c:	4822      	ldr	r0, [pc, #136]	; (1e908 <cmd_send+0x328>)
   1e87e:	f7ff fcb3 	bl	1e1e8 <rsp_send>
	rsp_send("\r\n", 2);
   1e882:	2102      	movs	r1, #2
   1e884:	4821      	ldr	r0, [pc, #132]	; (1e90c <cmd_send+0x32c>)
   1e886:	f7ff fcaf 	bl	1e1e8 <rsp_send>
	slm_at_tcp_proxy_clac();
   1e88a:	f001 fcaf 	bl	201ec <slm_at_tcp_proxy_clac>
	slm_at_udp_proxy_clac();
   1e88e:	f002 fc65 	bl	2115c <slm_at_udp_proxy_clac>
	slm_at_tcpip_clac();
   1e892:	f000 fb4b 	bl	1ef2c <slm_at_tcpip_clac>
	slm_at_icmp_clac();
   1e896:	f003 fc77 	bl	22188 <slm_at_icmp_clac>
	slm_at_fota_clac();
   1e89a:	f003 fe87 	bl	225ac <slm_at_fota_clac>
	slm_at_httpc_clac();
   1e89e:	f004 fc5b 	bl	23158 <slm_at_httpc_clac>
		rsp_send(OK_STR, sizeof(OK_STR) - 1);
   1e8a2:	2104      	movs	r1, #4
   1e8a4:	4811      	ldr	r0, [pc, #68]	; (1e8ec <cmd_send+0x30c>)
		rsp_send(str, ++chars);
   1e8a6:	f7ff fc9f 	bl	1e1e8 <rsp_send>
		break;
   1e8aa:	e762      	b.n	1e772 <cmd_send+0x192>
   1e8ac:	20023454 	.word	0x20023454
   1e8b0:	200293dc 	.word	0x200293dc
   1e8b4:	0003d332 	.word	0x0003d332
   1e8b8:	0003d33d 	.word	0x0003d33d
   1e8bc:	0003d352 	.word	0x0003d352
   1e8c0:	20023430 	.word	0x20023430
   1e8c4:	0003c2e4 	.word	0x0003c2e4
   1e8c8:	0003c2cc 	.word	0x0003c2cc
   1e8cc:	0003d35e 	.word	0x0003d35e
   1e8d0:	20023468 	.word	0x20023468
   1e8d4:	0003d37c 	.word	0x0003d37c
   1e8d8:	0003d38f 	.word	0x0003d38f
   1e8dc:	0003d45b 	.word	0x0003d45b
   1e8e0:	000f4240 	.word	0x000f4240
   1e8e4:	0003d3b0 	.word	0x0003d3b0
   1e8e8:	0003d3c4 	.word	0x0003d3c4
   1e8ec:	0003d34d 	.word	0x0003d34d
   1e8f0:	2002a8f6 	.word	0x2002a8f6
   1e8f4:	0003d442 	.word	0x0003d442
   1e8f8:	0003d455 	.word	0x0003d455
   1e8fc:	0003d463 	.word	0x0003d463
   1e900:	0003d3d3 	.word	0x0003d3d3
   1e904:	0003d3e6 	.word	0x0003d3e6
   1e908:	0003d3f0 	.word	0x0003d3f0
   1e90c:	00040191 	.word	0x00040191
   1e910:	0003d3f9 	.word	0x0003d3f9
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLEEP)) {
   1e914:	4964      	ldr	r1, [pc, #400]	; (1eaa8 <cmd_send+0x4c8>)
   1e916:	4865      	ldr	r0, [pc, #404]	; (1eaac <cmd_send+0x4cc>)
   1e918:	f7ff fb00 	bl	1df1c <slm_util_cmd_casecmp>
   1e91c:	2800      	cmp	r0, #0
   1e91e:	d04b      	beq.n	1e9b8 <cmd_send+0x3d8>
	ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
   1e920:	4621      	mov	r1, r4
   1e922:	4a63      	ldr	r2, [pc, #396]	; (1eab0 <cmd_send+0x4d0>)
   1e924:	4861      	ldr	r0, [pc, #388]	; (1eaac <cmd_send+0x4cc>)
   1e926:	f01b fe4e 	bl	3a5c6 <at_parser_params_from_str>
	if (ret < 0) {
   1e92a:	1e05      	subs	r5, r0, #0
   1e92c:	da08      	bge.n	1e940 <cmd_send+0x360>
   1e92e:	4a61      	ldr	r2, [pc, #388]	; (1eab4 <cmd_send+0x4d4>)
   1e930:	4b61      	ldr	r3, [pc, #388]	; (1eab8 <cmd_send+0x4d8>)
		LOG_ERR("Failed to parse AT command %d", ret);
   1e932:	4629      	mov	r1, r5
   1e934:	1ad2      	subs	r2, r2, r3
   1e936:	08d2      	lsrs	r2, r2, #3
   1e938:	0192      	lsls	r2, r2, #6
   1e93a:	f042 0201 	orr.w	r2, r2, #1
   1e93e:	e67d      	b.n	1e63c <cmd_send+0x5c>
	type = at_parser_cmd_type_get(at_cmd);
   1e940:	485a      	ldr	r0, [pc, #360]	; (1eaac <cmd_send+0x4cc>)
   1e942:	f01b fe43 	bl	3a5cc <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1e946:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
   1e948:	4606      	mov	r6, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
   1e94a:	d120      	bne.n	1e98e <cmd_send+0x3ae>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1e94c:	4858      	ldr	r0, [pc, #352]	; (1eab0 <cmd_send+0x4d0>)
		shutdown_mode = SHUTDOWN_MODE_IDLE;
   1e94e:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1e952:	f01b ff80 	bl	3a856 <at_params_valid_count_get>
   1e956:	2801      	cmp	r0, #1
   1e958:	d907      	bls.n	1e96a <cmd_send+0x38a>
			ret = at_params_short_get(&at_param_list, 1,
   1e95a:	4631      	mov	r1, r6
   1e95c:	4854      	ldr	r0, [pc, #336]	; (1eab0 <cmd_send+0x4d0>)
   1e95e:	aa03      	add	r2, sp, #12
   1e960:	f01b ff31 	bl	3a7c6 <at_params_short_get>
			if (ret < 0) {
   1e964:	2800      	cmp	r0, #0
   1e966:	f6ff ae80 	blt.w	1e66a <cmd_send+0x8a>
		if (shutdown_mode == SHUTDOWN_MODE_IDLE) {
   1e96a:	f8bd 400c 	ldrh.w	r4, [sp, #12]
   1e96e:	b92c      	cbnz	r4, 1e97c <cmd_send+0x39c>
			slm_at_host_uninit();
   1e970:	f7ff fd9c 	bl	1e4ac <slm_at_host_uninit>
			enter_idle();
   1e974:	f7ff f9bc 	bl	1dcf0 <enter_idle>
}
   1e978:	b01f      	add	sp, #124	; 0x7c
   1e97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (shutdown_mode == SHUTDOWN_MODE_SLEEP) {
   1e97c:	2c01      	cmp	r4, #1
   1e97e:	f47f ae74 	bne.w	1e66a <cmd_send+0x8a>
			slm_at_host_uninit();
   1e982:	f7ff fd93 	bl	1e4ac <slm_at_host_uninit>
			enter_sleep(true);
   1e986:	4620      	mov	r0, r4
   1e988:	f019 f839 	bl	379fe <enter_sleep>
		if (err) {
   1e98c:	e789      	b.n	1e8a2 <cmd_send+0x2c2>
	if (type == AT_CMD_TYPE_TEST_COMMAND) {
   1e98e:	2803      	cmp	r0, #3
   1e990:	d10e      	bne.n	1e9b0 <cmd_send+0x3d0>
		sprintf(buf, "#XSLEEP: (%d, %d)\r\n", SHUTDOWN_MODE_IDLE,
   1e992:	2301      	movs	r3, #1
   1e994:	4621      	mov	r1, r4
   1e996:	2240      	movs	r2, #64	; 0x40
   1e998:	e9cd 4300 	strd	r4, r3, [sp]
   1e99c:	a803      	add	r0, sp, #12
   1e99e:	4b47      	ldr	r3, [pc, #284]	; (1eabc <cmd_send+0x4dc>)
   1e9a0:	f01c fe3f 	bl	3b622 <__sprintf_chk>
		rsp_send(buf, strlen(buf));
   1e9a4:	a803      	add	r0, sp, #12
   1e9a6:	f7fe fb63 	bl	1d070 <strlen>
   1e9aa:	4601      	mov	r1, r0
   1e9ac:	a803      	add	r0, sp, #12
   1e9ae:	e62b      	b.n	1e608 <cmd_send+0x28>
		if (err) {
   1e9b0:	2d00      	cmp	r5, #0
   1e9b2:	f43f af76 	beq.w	1e8a2 <cmd_send+0x2c2>
   1e9b6:	e67d      	b.n	1e6b4 <cmd_send+0xd4>
	err = slm_at_tcp_proxy_parse(at_buf, at_buf_len);
   1e9b8:	8829      	ldrh	r1, [r5, #0]
   1e9ba:	483c      	ldr	r0, [pc, #240]	; (1eaac <cmd_send+0x4cc>)
   1e9bc:	f001 fb7e 	bl	200bc <slm_at_tcp_proxy_parse>
	if (err > 0) {
   1e9c0:	2800      	cmp	r0, #0
   1e9c2:	f73f aed6 	bgt.w	1e772 <cmd_send+0x192>
	} else if (err == 0) {
   1e9c6:	f43f af6c 	beq.w	1e8a2 <cmd_send+0x2c2>
	} else if (err != -ENOENT) {
   1e9ca:	3002      	adds	r0, #2
   1e9cc:	f47f ae72 	bne.w	1e6b4 <cmd_send+0xd4>
	err = slm_at_udp_proxy_parse(at_buf, at_buf_len);
   1e9d0:	8829      	ldrh	r1, [r5, #0]
   1e9d2:	4836      	ldr	r0, [pc, #216]	; (1eaac <cmd_send+0x4cc>)
   1e9d4:	f002 fb44 	bl	21060 <slm_at_udp_proxy_parse>
	if (err > 0) {
   1e9d8:	2800      	cmp	r0, #0
   1e9da:	f73f aeca 	bgt.w	1e772 <cmd_send+0x192>
	} else if (err == 0) {
   1e9de:	f43f af60 	beq.w	1e8a2 <cmd_send+0x2c2>
	} else if (err != -ENOENT) {
   1e9e2:	3002      	adds	r0, #2
   1e9e4:	f47f ae66 	bne.w	1e6b4 <cmd_send+0xd4>
	err = slm_at_tcpip_parse(at_buf);
   1e9e8:	4830      	ldr	r0, [pc, #192]	; (1eaac <cmd_send+0x4cc>)
   1e9ea:	f000 fa63 	bl	1eeb4 <slm_at_tcpip_parse>
	if (err == 0) {
   1e9ee:	2800      	cmp	r0, #0
   1e9f0:	f43f af57 	beq.w	1e8a2 <cmd_send+0x2c2>
	} else if (err != -ENOENT) {
   1e9f4:	3002      	adds	r0, #2
   1e9f6:	f47f ae5d 	bne.w	1e6b4 <cmd_send+0xd4>
	err = slm_at_icmp_parse(at_buf);
   1e9fa:	482c      	ldr	r0, [pc, #176]	; (1eaac <cmd_send+0x4cc>)
   1e9fc:	f003 fb96 	bl	2212c <slm_at_icmp_parse>
	if (err == 0) {
   1ea00:	2800      	cmp	r0, #0
   1ea02:	f43f aeb6 	beq.w	1e772 <cmd_send+0x192>
	} else if (err != -ENOENT) {
   1ea06:	3002      	adds	r0, #2
   1ea08:	f47f ae54 	bne.w	1e6b4 <cmd_send+0xd4>
	err = slm_at_fota_parse(at_buf);
   1ea0c:	4827      	ldr	r0, [pc, #156]	; (1eaac <cmd_send+0x4cc>)
   1ea0e:	f003 fd9f 	bl	22550 <slm_at_fota_parse>
	if (err == 0) {
   1ea12:	2800      	cmp	r0, #0
   1ea14:	f43f af45 	beq.w	1e8a2 <cmd_send+0x2c2>
	} else if (err != -ENOENT) {
   1ea18:	3002      	adds	r0, #2
   1ea1a:	f47f ae4b 	bne.w	1e6b4 <cmd_send+0xd4>
	err = slm_at_httpc_parse(at_buf, at_buf_len);
   1ea1e:	6829      	ldr	r1, [r5, #0]
   1ea20:	4822      	ldr	r0, [pc, #136]	; (1eaac <cmd_send+0x4cc>)
   1ea22:	f004 fb11 	bl	23048 <slm_at_httpc_parse>
	if (err == 0) {
   1ea26:	2800      	cmp	r0, #0
   1ea28:	f43f af3b 	beq.w	1e8a2 <cmd_send+0x2c2>
	} else if (err != -ENOENT) {
   1ea2c:	3002      	adds	r0, #2
   1ea2e:	f47f ae41 	bne.w	1e6b4 <cmd_send+0xd4>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
   1ea32:	4923      	ldr	r1, [pc, #140]	; (1eac0 <cmd_send+0x4e0>)
   1ea34:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ea38:	481c      	ldr	r0, [pc, #112]	; (1eaac <cmd_send+0x4cc>)
   1ea3a:	ab02      	add	r3, sp, #8
   1ea3c:	f00b fda2 	bl	2a584 <at_cmd_write>
	if (err < 0) {
   1ea40:	1e01      	subs	r1, r0, #0
   1ea42:	da0d      	bge.n	1ea60 <cmd_send+0x480>
   1ea44:	4b1c      	ldr	r3, [pc, #112]	; (1eab8 <cmd_send+0x4d8>)
   1ea46:	4a1b      	ldr	r2, [pc, #108]	; (1eab4 <cmd_send+0x4d4>)
		LOG_ERR("AT command error: %d", err);
   1ea48:	481e      	ldr	r0, [pc, #120]	; (1eac4 <cmd_send+0x4e4>)
   1ea4a:	1ad2      	subs	r2, r2, r3
   1ea4c:	08d2      	lsrs	r2, r2, #3
   1ea4e:	0192      	lsls	r2, r2, #6
   1ea50:	f042 0201 	orr.w	r2, r2, #1
   1ea54:	f019 fd43 	bl	384de <log_1>
		state = AT_CMD_ERROR;
   1ea58:	2301      	movs	r3, #1
   1ea5a:	f88d 3008 	strb.w	r3, [sp, #8]
	switch (state) {
   1ea5e:	e629      	b.n	1e6b4 <cmd_send+0xd4>
   1ea60:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1ea64:	2b03      	cmp	r3, #3
   1ea66:	f63f ae84 	bhi.w	1e772 <cmd_send+0x192>
   1ea6a:	a201      	add	r2, pc, #4	; (adr r2, 1ea70 <cmd_send+0x490>)
   1ea6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ea70:	0001ea81 	.word	0x0001ea81
   1ea74:	0001e6b5 	.word	0x0001e6b5
   1ea78:	0001ea8d 	.word	0x0001ea8d
   1ea7c:	0001eaa1 	.word	0x0001eaa1
		rsp_send(buf, strlen(buf));
   1ea80:	480f      	ldr	r0, [pc, #60]	; (1eac0 <cmd_send+0x4e0>)
   1ea82:	f7fe faf5 	bl	1d070 <strlen>
   1ea86:	4601      	mov	r1, r0
   1ea88:	480d      	ldr	r0, [pc, #52]	; (1eac0 <cmd_send+0x4e0>)
   1ea8a:	e5bd      	b.n	1e608 <cmd_send+0x28>
		chars = sprintf(str, "+CMS: %d\r\n", err);
   1ea8c:	4b0e      	ldr	r3, [pc, #56]	; (1eac8 <cmd_send+0x4e8>)
   1ea8e:	9100      	str	r1, [sp, #0]
		chars = sprintf(str, "+CME: %d\r\n", err);
   1ea90:	2100      	movs	r1, #0
   1ea92:	2218      	movs	r2, #24
   1ea94:	a803      	add	r0, sp, #12
   1ea96:	f01c fdc4 	bl	3b622 <__sprintf_chk>
		rsp_send(str, ++chars);
   1ea9a:	1c41      	adds	r1, r0, #1
   1ea9c:	a803      	add	r0, sp, #12
   1ea9e:	e702      	b.n	1e8a6 <cmd_send+0x2c6>
		chars = sprintf(str, "+CME: %d\r\n", err);
   1eaa0:	4b0a      	ldr	r3, [pc, #40]	; (1eacc <cmd_send+0x4ec>)
   1eaa2:	9100      	str	r1, [sp, #0]
   1eaa4:	e7f4      	b.n	1ea90 <cmd_send+0x4b0>
   1eaa6:	bf00      	nop
   1eaa8:	0003d3f9 	.word	0x0003d3f9
   1eaac:	200293dc 	.word	0x200293dc
   1eab0:	20023430 	.word	0x20023430
   1eab4:	0003c2e4 	.word	0x0003c2e4
   1eab8:	0003c2cc 	.word	0x0003c2cc
   1eabc:	0003d403 	.word	0x0003d403
   1eac0:	20029e68 	.word	0x20029e68
   1eac4:	0003d417 	.word	0x0003d417
   1eac8:	0003d42c 	.word	0x0003d42c
   1eacc:	0003d437 	.word	0x0003d437

0001ead0 <handle_at_bind.part.0>:
/**@brief handle AT#XRECVFROM commands
 *  AT#XRECVFROM[=<length>]
 *  AT#XRECVFROM? READ command not supported
 *  AT#XRECVFROM=? TEST command not supported
 */
static int handle_at_recvfrom(enum at_cmd_type cmd_type)
   1ead0:	b508      	push	{r3, lr}
   1ead2:	4906      	ldr	r1, [pc, #24]	; (1eaec <handle_at_bind.part.0+0x1c>)
   1ead4:	4b06      	ldr	r3, [pc, #24]	; (1eaf0 <handle_at_bind.part.0+0x20>)
{
	int err = -EINVAL;
	uint16_t length = NET_IPV4_MTU;

	if (client.sock < 0) {
		LOG_ERR("Socket not opened yet");
   1ead6:	4807      	ldr	r0, [pc, #28]	; (1eaf4 <handle_at_bind.part.0+0x24>)
   1ead8:	1ac9      	subs	r1, r1, r3
   1eada:	08c9      	lsrs	r1, r1, #3
   1eadc:	0189      	lsls	r1, r1, #6
   1eade:	f041 0101 	orr.w	r1, r1, #1
   1eae2:	f019 fced 	bl	384c0 <log_0>
	default:
		break;
	}

	return err;
}
   1eae6:	f06f 0015 	mvn.w	r0, #21
   1eaea:	bd08      	pop	{r3, pc}
   1eaec:	0003c3a4 	.word	0x0003c3a4
   1eaf0:	0003c2cc 	.word	0x0003c2cc
   1eaf4:	0003d4d6 	.word	0x0003d4d6

0001eaf8 <handle_at_getaddrinfo>:
 */
static int handle_at_getaddrinfo(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
   1eaf8:	2380      	movs	r3, #128	; 0x80
{
   1eafa:	b570      	push	{r4, r5, r6, lr}
   1eafc:	b0bc      	sub	sp, #240	; 0xf0
   1eafe:	4605      	mov	r5, r0
	struct addrinfo *result;
	struct addrinfo hints = {
   1eb00:	2250      	movs	r2, #80	; 0x50
   1eb02:	2100      	movs	r1, #0
   1eb04:	a808      	add	r0, sp, #32
	int size = TCPIP_MAX_URL;
   1eb06:	9302      	str	r3, [sp, #8]
	struct addrinfo hints = {
   1eb08:	f01c fc73 	bl	3b3f2 <memset>
   1eb0c:	2301      	movs	r3, #1
		.ai_family = AF_INET
	};
	struct sockaddr_in *host;
	char ipv4addr[NET_IPV4_ADDR_LEN];

	switch (cmd_type) {
   1eb0e:	429d      	cmp	r5, r3
	struct addrinfo hints = {
   1eb10:	930a      	str	r3, [sp, #40]	; 0x28
	switch (cmd_type) {
   1eb12:	d004      	beq.n	1eb1e <handle_at_getaddrinfo+0x26>
			return err;
		}
		url[size] = '\0';
		if (check_for_ipv4(url, strlen(url))) {
			LOG_ERR("already IPv4 address");
			return -EINVAL;
   1eb14:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
   1eb18:	4620      	mov	r0, r4
   1eb1a:	b03c      	add	sp, #240	; 0xf0
   1eb1c:	bd70      	pop	{r4, r5, r6, pc}
		if (at_params_valid_count_get(&at_param_list) < 2) {
   1eb1e:	4840      	ldr	r0, [pc, #256]	; (1ec20 <handle_at_getaddrinfo+0x128>)
   1eb20:	f01b fe99 	bl	3a856 <at_params_valid_count_get>
   1eb24:	2801      	cmp	r0, #1
   1eb26:	d9f5      	bls.n	1eb14 <handle_at_getaddrinfo+0x1c>
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1eb28:	4629      	mov	r1, r5
   1eb2a:	483d      	ldr	r0, [pc, #244]	; (1ec20 <handle_at_getaddrinfo+0x128>)
   1eb2c:	ab02      	add	r3, sp, #8
   1eb2e:	aa1c      	add	r2, sp, #112	; 0x70
   1eb30:	f01b fe6e 	bl	3a810 <at_params_string_get>
		if (err) {
   1eb34:	4604      	mov	r4, r0
   1eb36:	2800      	cmp	r0, #0
   1eb38:	d1ee      	bne.n	1eb18 <handle_at_getaddrinfo+0x20>
		url[size] = '\0';
   1eb3a:	9b02      	ldr	r3, [sp, #8]
   1eb3c:	aa3c      	add	r2, sp, #240	; 0xf0
   1eb3e:	4413      	add	r3, r2
   1eb40:	f803 0c80 	strb.w	r0, [r3, #-128]
		if (check_for_ipv4(url, strlen(url))) {
   1eb44:	a81c      	add	r0, sp, #112	; 0x70
   1eb46:	f7fe fa93 	bl	1d070 <strlen>
   1eb4a:	b2c1      	uxtb	r1, r0
   1eb4c:	a81c      	add	r0, sp, #112	; 0x70
   1eb4e:	f018 ff99 	bl	37a84 <check_for_ipv4>
   1eb52:	4606      	mov	r6, r0
   1eb54:	b150      	cbz	r0, 1eb6c <handle_at_getaddrinfo+0x74>
   1eb56:	4b33      	ldr	r3, [pc, #204]	; (1ec24 <handle_at_getaddrinfo+0x12c>)
   1eb58:	4933      	ldr	r1, [pc, #204]	; (1ec28 <handle_at_getaddrinfo+0x130>)
			LOG_ERR("already IPv4 address");
   1eb5a:	4834      	ldr	r0, [pc, #208]	; (1ec2c <handle_at_getaddrinfo+0x134>)
   1eb5c:	1ac9      	subs	r1, r1, r3
   1eb5e:	08c9      	lsrs	r1, r1, #3
   1eb60:	0189      	lsls	r1, r1, #6
   1eb62:	f041 0101 	orr.w	r1, r1, #1
   1eb66:	f019 fcab 	bl	384c0 <log_0>
   1eb6a:	e7d3      	b.n	1eb14 <handle_at_getaddrinfo+0x1c>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   1eb6c:	4621      	mov	r1, r4
   1eb6e:	ab03      	add	r3, sp, #12
   1eb70:	aa08      	add	r2, sp, #32
   1eb72:	a81c      	add	r0, sp, #112	; 0x70
   1eb74:	f01a f894 	bl	38ca0 <zsock_getaddrinfo>
		if (err) {
   1eb78:	4604      	mov	r4, r0
   1eb7a:	b1d8      	cbz	r0, 1ebb4 <handle_at_getaddrinfo+0xbc>
   1eb7c:	4b29      	ldr	r3, [pc, #164]	; (1ec24 <handle_at_getaddrinfo+0x12c>)
   1eb7e:	4a2a      	ldr	r2, [pc, #168]	; (1ec28 <handle_at_getaddrinfo+0x130>)
			LOG_ERR("getaddrinfo() failed %d", err);
   1eb80:	4601      	mov	r1, r0
   1eb82:	1ad2      	subs	r2, r2, r3
   1eb84:	08d2      	lsrs	r2, r2, #3
   1eb86:	0192      	lsls	r2, r2, #6
   1eb88:	4829      	ldr	r0, [pc, #164]	; (1ec30 <handle_at_getaddrinfo+0x138>)
   1eb8a:	f042 0201 	orr.w	r2, r2, #1
   1eb8e:	f019 fca6 	bl	384de <log_1>
			sprintf(rsp_buf, "#XGETADDRINFO: %d\r\n", -err);
   1eb92:	4263      	negs	r3, r4
   1eb94:	4631      	mov	r1, r6
   1eb96:	f640 228c 	movw	r2, #2700	; 0xa8c
   1eb9a:	9300      	str	r3, [sp, #0]
   1eb9c:	4825      	ldr	r0, [pc, #148]	; (1ec34 <handle_at_getaddrinfo+0x13c>)
   1eb9e:	4b26      	ldr	r3, [pc, #152]	; (1ec38 <handle_at_getaddrinfo+0x140>)
   1eba0:	f01c fd3f 	bl	3b622 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1eba4:	4823      	ldr	r0, [pc, #140]	; (1ec34 <handle_at_getaddrinfo+0x13c>)
   1eba6:	f7fe fa63 	bl	1d070 <strlen>
   1ebaa:	4601      	mov	r1, r0
   1ebac:	4821      	ldr	r0, [pc, #132]	; (1ec34 <handle_at_getaddrinfo+0x13c>)
   1ebae:	f7ff fb1b 	bl	1e1e8 <rsp_send>
			return err;
   1ebb2:	e7b1      	b.n	1eb18 <handle_at_getaddrinfo+0x20>
		} else if (result == NULL) {
   1ebb4:	9b03      	ldr	r3, [sp, #12]
   1ebb6:	b9bb      	cbnz	r3, 1ebe8 <handle_at_getaddrinfo+0xf0>
   1ebb8:	4b1a      	ldr	r3, [pc, #104]	; (1ec24 <handle_at_getaddrinfo+0x12c>)
   1ebba:	491b      	ldr	r1, [pc, #108]	; (1ec28 <handle_at_getaddrinfo+0x130>)
			LOG_ERR("Address not found\n");
   1ebbc:	481f      	ldr	r0, [pc, #124]	; (1ec3c <handle_at_getaddrinfo+0x144>)
   1ebbe:	1ac9      	subs	r1, r1, r3
   1ebc0:	08c9      	lsrs	r1, r1, #3
   1ebc2:	0189      	lsls	r1, r1, #6
   1ebc4:	f041 0101 	orr.w	r1, r1, #1
   1ebc8:	f019 fc7a 	bl	384c0 <log_0>
			sprintf(rsp_buf, "#XGETADDRINFO: not found\r\n");
   1ebcc:	491c      	ldr	r1, [pc, #112]	; (1ec40 <handle_at_getaddrinfo+0x148>)
   1ebce:	4819      	ldr	r0, [pc, #100]	; (1ec34 <handle_at_getaddrinfo+0x13c>)
   1ebd0:	f01c fd4e 	bl	3b670 <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1ebd4:	4817      	ldr	r0, [pc, #92]	; (1ec34 <handle_at_getaddrinfo+0x13c>)
   1ebd6:	f7fe fa4b 	bl	1d070 <strlen>
   1ebda:	4601      	mov	r1, r0
   1ebdc:	4815      	ldr	r0, [pc, #84]	; (1ec34 <handle_at_getaddrinfo+0x13c>)
   1ebde:	f7ff fb03 	bl	1e1e8 <rsp_send>
			return -ENOENT;
   1ebe2:	f06f 0401 	mvn.w	r4, #1
   1ebe6:	e797      	b.n	1eb18 <handle_at_getaddrinfo+0x20>
		inet_ntop(AF_INET, &(host->sin_addr.s_addr),
   1ebe8:	6999      	ldr	r1, [r3, #24]
   1ebea:	3104      	adds	r1, #4
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   1ebec:	ae04      	add	r6, sp, #16
   1ebee:	4632      	mov	r2, r6
   1ebf0:	2310      	movs	r3, #16
   1ebf2:	4628      	mov	r0, r5
   1ebf4:	f007 fe7c 	bl	268f0 <z_impl_net_addr_ntop>
		sprintf(rsp_buf, "#XGETADDRINFO: %s\r\n", ipv4addr);
   1ebf8:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ebfc:	4621      	mov	r1, r4
   1ebfe:	4b11      	ldr	r3, [pc, #68]	; (1ec44 <handle_at_getaddrinfo+0x14c>)
   1ec00:	9600      	str	r6, [sp, #0]
   1ec02:	480c      	ldr	r0, [pc, #48]	; (1ec34 <handle_at_getaddrinfo+0x13c>)
   1ec04:	f01c fd0d 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ec08:	480a      	ldr	r0, [pc, #40]	; (1ec34 <handle_at_getaddrinfo+0x13c>)
   1ec0a:	f7fe fa31 	bl	1d070 <strlen>
   1ec0e:	4601      	mov	r1, r0
   1ec10:	4808      	ldr	r0, [pc, #32]	; (1ec34 <handle_at_getaddrinfo+0x13c>)
   1ec12:	f7ff fae9 	bl	1e1e8 <rsp_send>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   1ec16:	9803      	ldr	r0, [sp, #12]
   1ec18:	f01a f844 	bl	38ca4 <zsock_freeaddrinfo>
}
   1ec1c:	e77c      	b.n	1eb18 <handle_at_getaddrinfo+0x20>
   1ec1e:	bf00      	nop
   1ec20:	20023430 	.word	0x20023430
   1ec24:	0003c2cc 	.word	0x0003c2cc
   1ec28:	0003c3a4 	.word	0x0003c3a4
   1ec2c:	0003d4ec 	.word	0x0003d4ec
   1ec30:	0003d501 	.word	0x0003d501
   1ec34:	20028950 	.word	0x20028950
   1ec38:	0003d519 	.word	0x0003d519
   1ec3c:	0003d580 	.word	0x0003d580
   1ec40:	0003d52d 	.word	0x0003d52d
   1ec44:	0003d548 	.word	0x0003d548

0001ec48 <parse_host_by_ipv4>:
{
   1ec48:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
   1ec4a:	2301      	movs	r3, #1
   1ec4c:	4a07      	ldr	r2, [pc, #28]	; (1ec6c <parse_host_by_ipv4+0x24>)
	address4->sin_port = htons(port);
   1ec4e:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
   1ec50:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
   1ec52:	8051      	strh	r1, [r2, #2]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
   1ec54:	4601      	mov	r1, r0
   1ec56:	3204      	adds	r2, #4
   1ec58:	4618      	mov	r0, r3
   1ec5a:	f01a f8db 	bl	38e14 <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, ip, &address4->sin_addr) == 1) {
   1ec5e:	2801      	cmp	r0, #1
}
   1ec60:	bf14      	ite	ne
   1ec62:	f06f 0015 	mvnne.w	r0, #21
   1ec66:	2000      	moveq	r0, #0
   1ec68:	bd08      	pop	{r3, pc}
   1ec6a:	bf00      	nop
   1ec6c:	20023488 	.word	0x20023488

0001ec70 <parse_host_by_name>:
{
   1ec70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec72:	4604      	mov	r4, r0
   1ec74:	4617      	mov	r7, r2
	struct addrinfo hints = {
   1ec76:	2601      	movs	r6, #1
{
   1ec78:	b09b      	sub	sp, #108	; 0x6c
	struct addrinfo hints = {
   1ec7a:	2250      	movs	r2, #80	; 0x50
{
   1ec7c:	460d      	mov	r5, r1
	struct addrinfo hints = {
   1ec7e:	a806      	add	r0, sp, #24
   1ec80:	2100      	movs	r1, #0
   1ec82:	f01c fbb6 	bl	3b3f2 <memset>
	return zsock_getaddrinfo(host, service, hints, res);
   1ec86:	4620      	mov	r0, r4
   1ec88:	2100      	movs	r1, #0
   1ec8a:	ab01      	add	r3, sp, #4
   1ec8c:	aa06      	add	r2, sp, #24
   1ec8e:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1ec92:	f01a f805 	bl	38ca0 <zsock_getaddrinfo>
	if (err) {
   1ec96:	4604      	mov	r4, r0
   1ec98:	b160      	cbz	r0, 1ecb4 <parse_host_by_name+0x44>
   1ec9a:	4a16      	ldr	r2, [pc, #88]	; (1ecf4 <parse_host_by_name+0x84>)
   1ec9c:	4b16      	ldr	r3, [pc, #88]	; (1ecf8 <parse_host_by_name+0x88>)
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
   1ec9e:	4601      	mov	r1, r0
   1eca0:	1ad2      	subs	r2, r2, r3
   1eca2:	08d2      	lsrs	r2, r2, #3
   1eca4:	0192      	lsls	r2, r2, #6
   1eca6:	4815      	ldr	r0, [pc, #84]	; (1ecfc <parse_host_by_name+0x8c>)
   1eca8:	4332      	orrs	r2, r6
   1ecaa:	f019 fc18 	bl	384de <log_1>
}
   1ecae:	4620      	mov	r0, r4
   1ecb0:	b01b      	add	sp, #108	; 0x6c
   1ecb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (result == NULL) {
   1ecb4:	9b01      	ldr	r3, [sp, #4]
   1ecb6:	b963      	cbnz	r3, 1ecd2 <parse_host_by_name+0x62>
   1ecb8:	4b0f      	ldr	r3, [pc, #60]	; (1ecf8 <parse_host_by_name+0x88>)
   1ecba:	490e      	ldr	r1, [pc, #56]	; (1ecf4 <parse_host_by_name+0x84>)
		LOG_ERR("ERROR: Address not found\n");
   1ecbc:	4810      	ldr	r0, [pc, #64]	; (1ed00 <parse_host_by_name+0x90>)
   1ecbe:	1ac9      	subs	r1, r1, r3
   1ecc0:	08c9      	lsrs	r1, r1, #3
   1ecc2:	0189      	lsls	r1, r1, #6
   1ecc4:	f041 0101 	orr.w	r1, r1, #1
   1ecc8:	f019 fbfa 	bl	384c0 <log_0>
		return -ENOENT;
   1eccc:	f06f 0401 	mvn.w	r4, #1
   1ecd0:	e7ed      	b.n	1ecae <parse_host_by_name+0x3e>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   1ecd2:	699b      	ldr	r3, [r3, #24]
	server4->sin_addr.s_addr =
   1ecd4:	490b      	ldr	r1, [pc, #44]	; (1ed04 <parse_host_by_name+0x94>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   1ecd6:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
   1ecd8:	ba6d      	rev16	r5, r5
	server4->sin_addr.s_addr =
   1ecda:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
   1ecdc:	800e      	strh	r6, [r1, #0]
	server4->sin_port = htons(port);
   1ecde:	804d      	strh	r5, [r1, #2]
   1ece0:	2310      	movs	r3, #16
   1ece2:	4630      	mov	r0, r6
   1ece4:	aa02      	add	r2, sp, #8
   1ece6:	3104      	adds	r1, #4
   1ece8:	f007 fe02 	bl	268f0 <z_impl_net_addr_ntop>
	zsock_freeaddrinfo(ai);
   1ecec:	9801      	ldr	r0, [sp, #4]
   1ecee:	f019 ffd9 	bl	38ca4 <zsock_freeaddrinfo>
	return 0;
   1ecf2:	e7dc      	b.n	1ecae <parse_host_by_name+0x3e>
   1ecf4:	0003c3a4 	.word	0x0003c3a4
   1ecf8:	0003c2cc 	.word	0x0003c2cc
   1ecfc:	0003d55c 	.word	0x0003d55c
   1ed00:	0003d579 	.word	0x0003d579
   1ed04:	20023488 	.word	0x20023488

0001ed08 <handle_at_socketopt>:
{
   1ed08:	b530      	push	{r4, r5, lr}
	switch (cmd_type) {
   1ed0a:	2801      	cmp	r0, #1
{
   1ed0c:	4604      	mov	r4, r0
   1ed0e:	b087      	sub	sp, #28
	switch (cmd_type) {
   1ed10:	d005      	beq.n	1ed1e <handle_at_socketopt+0x16>
   1ed12:	2803      	cmp	r0, #3
   1ed14:	f000 80a7 	beq.w	1ee66 <handle_at_socketopt+0x15e>
			return -EINVAL;
   1ed18:	f06f 0415 	mvn.w	r4, #21
   1ed1c:	e069      	b.n	1edf2 <handle_at_socketopt+0xea>
		if (client.sock < 0) {
   1ed1e:	4b58      	ldr	r3, [pc, #352]	; (1ee80 <handle_at_socketopt+0x178>)
   1ed20:	681a      	ldr	r2, [r3, #0]
   1ed22:	461d      	mov	r5, r3
   1ed24:	2a00      	cmp	r2, #0
   1ed26:	da0a      	bge.n	1ed3e <handle_at_socketopt+0x36>
   1ed28:	4956      	ldr	r1, [pc, #344]	; (1ee84 <handle_at_socketopt+0x17c>)
   1ed2a:	4b57      	ldr	r3, [pc, #348]	; (1ee88 <handle_at_socketopt+0x180>)
			LOG_ERR("Socket not opened yet");
   1ed2c:	4857      	ldr	r0, [pc, #348]	; (1ee8c <handle_at_socketopt+0x184>)
   1ed2e:	1ac9      	subs	r1, r1, r3
   1ed30:	08c9      	lsrs	r1, r1, #3
   1ed32:	0189      	lsls	r1, r1, #6
   1ed34:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Invalid role");
   1ed38:	f019 fbc2 	bl	384c0 <log_0>
			return err;
   1ed3c:	e7ec      	b.n	1ed18 <handle_at_socketopt+0x10>
		if (client.role != AT_SOCKET_ROLE_CLIENT) {
   1ed3e:	689b      	ldr	r3, [r3, #8]
   1ed40:	b143      	cbz	r3, 1ed54 <handle_at_socketopt+0x4c>
   1ed42:	4950      	ldr	r1, [pc, #320]	; (1ee84 <handle_at_socketopt+0x17c>)
   1ed44:	4b50      	ldr	r3, [pc, #320]	; (1ee88 <handle_at_socketopt+0x180>)
			LOG_ERR("Invalid role");
   1ed46:	4852      	ldr	r0, [pc, #328]	; (1ee90 <handle_at_socketopt+0x188>)
   1ed48:	1ac9      	subs	r1, r1, r3
   1ed4a:	08c9      	lsrs	r1, r1, #3
   1ed4c:	0189      	lsls	r1, r1, #6
   1ed4e:	f041 0101 	orr.w	r1, r1, #1
   1ed52:	e7f1      	b.n	1ed38 <handle_at_socketopt+0x30>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1ed54:	484f      	ldr	r0, [pc, #316]	; (1ee94 <handle_at_socketopt+0x18c>)
   1ed56:	f01b fd7e 	bl	3a856 <at_params_valid_count_get>
   1ed5a:	2802      	cmp	r0, #2
   1ed5c:	d9dc      	bls.n	1ed18 <handle_at_socketopt+0x10>
		err = at_params_short_get(&at_param_list, 1, &op);
   1ed5e:	4621      	mov	r1, r4
   1ed60:	484c      	ldr	r0, [pc, #304]	; (1ee94 <handle_at_socketopt+0x18c>)
   1ed62:	aa02      	add	r2, sp, #8
   1ed64:	f01b fd2f 	bl	3a7c6 <at_params_short_get>
		if (err) {
   1ed68:	4604      	mov	r4, r0
   1ed6a:	2800      	cmp	r0, #0
   1ed6c:	d141      	bne.n	1edf2 <handle_at_socketopt+0xea>
		err = at_params_short_get(&at_param_list, 2, &name);
   1ed6e:	2102      	movs	r1, #2
   1ed70:	4848      	ldr	r0, [pc, #288]	; (1ee94 <handle_at_socketopt+0x18c>)
   1ed72:	f10d 020a 	add.w	r2, sp, #10
   1ed76:	f01b fd26 	bl	3a7c6 <at_params_short_get>
		if (err) {
   1ed7a:	4604      	mov	r4, r0
   1ed7c:	2800      	cmp	r0, #0
   1ed7e:	d138      	bne.n	1edf2 <handle_at_socketopt+0xea>
		if (op == AT_SOCKETOPT_SET) {
   1ed80:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1ed84:	2b01      	cmp	r3, #1
   1ed86:	d137      	bne.n	1edf8 <handle_at_socketopt+0xf0>
			if (at_params_valid_count_get(&at_param_list) < 4) {
   1ed88:	4842      	ldr	r0, [pc, #264]	; (1ee94 <handle_at_socketopt+0x18c>)
   1ed8a:	f01b fd64 	bl	3a856 <at_params_valid_count_get>
   1ed8e:	2803      	cmp	r0, #3
   1ed90:	d9c2      	bls.n	1ed18 <handle_at_socketopt+0x10>
			err = at_params_int_get(&at_param_list, 3, &value);
   1ed92:	2103      	movs	r1, #3
   1ed94:	483f      	ldr	r0, [pc, #252]	; (1ee94 <handle_at_socketopt+0x18c>)
   1ed96:	aa03      	add	r2, sp, #12
   1ed98:	f01b fd27 	bl	3a7ea <at_params_int_get>
			if (err) {
   1ed9c:	4604      	mov	r4, r0
   1ed9e:	bb40      	cbnz	r0, 1edf2 <handle_at_socketopt+0xea>
			err = do_socketopt_set(name, value);
   1eda0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
	switch (name) {
   1eda4:	2a04      	cmp	r2, #4
   1eda6:	d003      	beq.n	1edb0 <handle_at_socketopt+0xa8>
   1eda8:	2a14      	cmp	r2, #20
   1edaa:	d006      	beq.n	1edba <handle_at_socketopt+0xb2>
   1edac:	2a02      	cmp	r2, #2
	switch (name) {
   1edae:	d158      	bne.n	1ee62 <handle_at_socketopt+0x15a>
		sprintf(rsp_buf, "#XSOCKETOPT: ignored\r\n");
   1edb0:	4939      	ldr	r1, [pc, #228]	; (1ee98 <handle_at_socketopt+0x190>)
		sprintf(rsp_buf, "#XSOCKETOPT: not supported\r\n");
   1edb2:	483a      	ldr	r0, [pc, #232]	; (1ee9c <handle_at_socketopt+0x194>)
   1edb4:	f01c fc5c 	bl	3b670 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1edb8:	e04b      	b.n	1ee52 <handle_at_socketopt+0x14a>
		struct timeval tmo = { .tv_sec = value };
   1edba:	2300      	movs	r3, #0
   1edbc:	9305      	str	r3, [sp, #20]
   1edbe:	9b03      	ldr	r3, [sp, #12]
		ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
   1edc0:	6828      	ldr	r0, [r5, #0]
		struct timeval tmo = { .tv_sec = value };
   1edc2:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1edc4:	2308      	movs	r3, #8
   1edc6:	2101      	movs	r1, #1
   1edc8:	9300      	str	r3, [sp, #0]
   1edca:	ab04      	add	r3, sp, #16
   1edcc:	f01a f844 	bl	38e58 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   1edd0:	1e04      	subs	r4, r0, #0
   1edd2:	da0e      	bge.n	1edf2 <handle_at_socketopt+0xea>
   1edd4:	4a2c      	ldr	r2, [pc, #176]	; (1ee88 <handle_at_socketopt+0x180>)
   1edd6:	4d2b      	ldr	r5, [pc, #172]	; (1ee84 <handle_at_socketopt+0x17c>)
   1edd8:	1aad      	subs	r5, r5, r2
   1edda:	08ed      	lsrs	r5, r5, #3
			LOG_ERR("setsockopt() error: %d", -errno);
   1eddc:	f01a fa73 	bl	392c6 <__errno>
   1ede0:	01ad      	lsls	r5, r5, #6
   1ede2:	f045 0501 	orr.w	r5, r5, #1
   1ede6:	462a      	mov	r2, r5
   1ede8:	6801      	ldr	r1, [r0, #0]
   1edea:	482d      	ldr	r0, [pc, #180]	; (1eea0 <handle_at_socketopt+0x198>)
   1edec:	4249      	negs	r1, r1
			LOG_ERR("getsockopt() error: %d", -errno);
   1edee:	f019 fb76 	bl	384de <log_1>
}
   1edf2:	4620      	mov	r0, r4
   1edf4:	b007      	add	sp, #28
   1edf6:	bd30      	pop	{r4, r5, pc}
		} else if (op == AT_SOCKETOPT_GET) {
   1edf8:	2b00      	cmp	r3, #0
   1edfa:	d1fa      	bne.n	1edf2 <handle_at_socketopt+0xea>
			err = do_socketopt_get(name);
   1edfc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
	switch (name) {
   1ee00:	2b04      	cmp	r3, #4
   1ee02:	d0d5      	beq.n	1edb0 <handle_at_socketopt+0xa8>
   1ee04:	2b14      	cmp	r3, #20
   1ee06:	d001      	beq.n	1ee0c <handle_at_socketopt+0x104>
   1ee08:	2b02      	cmp	r3, #2
   1ee0a:	e7d0      	b.n	1edae <handle_at_socketopt+0xa6>
		socklen_t len = sizeof(struct timeval);
   1ee0c:	2308      	movs	r3, #8
		ret = getsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
   1ee0e:	6828      	ldr	r0, [r5, #0]
		socklen_t len = sizeof(struct timeval);
   1ee10:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   1ee12:	ab03      	add	r3, sp, #12
   1ee14:	9300      	str	r3, [sp, #0]
   1ee16:	2214      	movs	r2, #20
   1ee18:	2101      	movs	r1, #1
   1ee1a:	ab04      	add	r3, sp, #16
   1ee1c:	f01a f801 	bl	38e22 <z_impl_zsock_getsockopt>
		if (ret) {
   1ee20:	4604      	mov	r4, r0
   1ee22:	b168      	cbz	r0, 1ee40 <handle_at_socketopt+0x138>
   1ee24:	4a18      	ldr	r2, [pc, #96]	; (1ee88 <handle_at_socketopt+0x180>)
   1ee26:	4d17      	ldr	r5, [pc, #92]	; (1ee84 <handle_at_socketopt+0x17c>)
   1ee28:	1aad      	subs	r5, r5, r2
			LOG_ERR("getsockopt() error: %d", -errno);
   1ee2a:	f01a fa4c 	bl	392c6 <__errno>
   1ee2e:	08ed      	lsrs	r5, r5, #3
   1ee30:	6801      	ldr	r1, [r0, #0]
   1ee32:	01ad      	lsls	r5, r5, #6
   1ee34:	f045 0501 	orr.w	r5, r5, #1
   1ee38:	462a      	mov	r2, r5
   1ee3a:	481a      	ldr	r0, [pc, #104]	; (1eea4 <handle_at_socketopt+0x19c>)
   1ee3c:	4249      	negs	r1, r1
   1ee3e:	e7d6      	b.n	1edee <handle_at_socketopt+0xe6>
			sprintf(rsp_buf, "#XSOCKETOPT: %d sec\r\n",
   1ee40:	9b04      	ldr	r3, [sp, #16]
   1ee42:	4601      	mov	r1, r0
   1ee44:	9300      	str	r3, [sp, #0]
   1ee46:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ee4a:	4b17      	ldr	r3, [pc, #92]	; (1eea8 <handle_at_socketopt+0x1a0>)
   1ee4c:	4813      	ldr	r0, [pc, #76]	; (1ee9c <handle_at_socketopt+0x194>)
   1ee4e:	f01c fbe8 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ee52:	4812      	ldr	r0, [pc, #72]	; (1ee9c <handle_at_socketopt+0x194>)
   1ee54:	f7fe f90c 	bl	1d070 <strlen>
   1ee58:	4601      	mov	r1, r0
   1ee5a:	4810      	ldr	r0, [pc, #64]	; (1ee9c <handle_at_socketopt+0x194>)
   1ee5c:	f7ff f9c4 	bl	1e1e8 <rsp_send>
		break;
   1ee60:	e7c7      	b.n	1edf2 <handle_at_socketopt+0xea>
		sprintf(rsp_buf, "#XSOCKETOPT: not supported\r\n");
   1ee62:	4912      	ldr	r1, [pc, #72]	; (1eeac <handle_at_socketopt+0x1a4>)
   1ee64:	e7a5      	b.n	1edb2 <handle_at_socketopt+0xaa>
		sprintf(rsp_buf, "#XSOCKETOPT: (%d, %d), <name>, <value>\r\n",
   1ee66:	2400      	movs	r4, #0
   1ee68:	2301      	movs	r3, #1
   1ee6a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ee6e:	e9cd 4300 	strd	r4, r3, [sp]
   1ee72:	4621      	mov	r1, r4
   1ee74:	4b0e      	ldr	r3, [pc, #56]	; (1eeb0 <handle_at_socketopt+0x1a8>)
   1ee76:	4809      	ldr	r0, [pc, #36]	; (1ee9c <handle_at_socketopt+0x194>)
   1ee78:	f01c fbd3 	bl	3b622 <__sprintf_chk>
   1ee7c:	e7e9      	b.n	1ee52 <handle_at_socketopt+0x14a>
   1ee7e:	bf00      	nop
   1ee80:	20023470 	.word	0x20023470
   1ee84:	0003c3a4 	.word	0x0003c3a4
   1ee88:	0003c2cc 	.word	0x0003c2cc
   1ee8c:	0003d4d6 	.word	0x0003d4d6
   1ee90:	0003d593 	.word	0x0003d593
   1ee94:	20023430 	.word	0x20023430
   1ee98:	0003d5a0 	.word	0x0003d5a0
   1ee9c:	20028950 	.word	0x20028950
   1eea0:	0003d5b7 	.word	0x0003d5b7
   1eea4:	0003d5eb 	.word	0x0003d5eb
   1eea8:	0003d602 	.word	0x0003d602
   1eeac:	0003d5ce 	.word	0x0003d5ce
   1eeb0:	0003d618 	.word	0x0003d618

0001eeb4 <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const char *at_cmd)
{
   1eeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eeb8:	4e17      	ldr	r6, [pc, #92]	; (1ef18 <slm_at_tcpip_parse+0x64>)
   1eeba:	4605      	mov	r5, r0
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1eebc:	2400      	movs	r4, #0
   1eebe:	4637      	mov	r7, r6
		if (slm_util_cmd_casecmp(at_cmd, tcpip_at_list[i].string)) {
   1eec0:	4628      	mov	r0, r5
   1eec2:	6871      	ldr	r1, [r6, #4]
   1eec4:	f7ff f82a 	bl	1df1c <slm_util_cmd_casecmp>
   1eec8:	b1f0      	cbz	r0, 1ef08 <slm_at_tcpip_parse+0x54>
			ret = at_parser_params_from_str(at_cmd, NULL,
   1eeca:	2100      	movs	r1, #0
   1eecc:	4628      	mov	r0, r5
   1eece:	4a13      	ldr	r2, [pc, #76]	; (1ef1c <slm_at_tcpip_parse+0x68>)
   1eed0:	f01b fb79 	bl	3a5c6 <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
   1eed4:	4601      	mov	r1, r0
   1eed6:	b168      	cbz	r0, 1eef4 <slm_at_tcpip_parse+0x40>
   1eed8:	4b11      	ldr	r3, [pc, #68]	; (1ef20 <slm_at_tcpip_parse+0x6c>)
   1eeda:	4a12      	ldr	r2, [pc, #72]	; (1ef24 <slm_at_tcpip_parse+0x70>)
				LOG_ERR("Failed to parse AT command %d", ret);
   1eedc:	4812      	ldr	r0, [pc, #72]	; (1ef28 <slm_at_tcpip_parse+0x74>)
   1eede:	1ad2      	subs	r2, r2, r3
   1eee0:	08d2      	lsrs	r2, r2, #3
   1eee2:	0192      	lsls	r2, r2, #6
   1eee4:	f042 0201 	orr.w	r2, r2, #1
   1eee8:	f019 faf9 	bl	384de <log_1>
				return -EINVAL;
   1eeec:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
   1eef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			type = at_parser_cmd_type_get(at_cmd);
   1eef4:	4628      	mov	r0, r5
   1eef6:	f01b fb69 	bl	3a5cc <at_parser_cmd_type_get>
			ret = tcpip_at_list[i].handler(type);
   1eefa:	230c      	movs	r3, #12
   1eefc:	fb03 7404 	mla	r4, r3, r4, r7
   1ef00:	68a3      	ldr	r3, [r4, #8]
}
   1ef02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			ret = tcpip_at_list[i].handler(type);
   1ef06:	4718      	bx	r3
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1ef08:	3401      	adds	r4, #1
   1ef0a:	2c0b      	cmp	r4, #11
   1ef0c:	f106 060c 	add.w	r6, r6, #12
   1ef10:	d1d6      	bne.n	1eec0 <slm_at_tcpip_parse+0xc>
	int ret = -ENOENT;
   1ef12:	f06f 0001 	mvn.w	r0, #1
   1ef16:	e7eb      	b.n	1eef0 <slm_at_tcpip_parse+0x3c>
   1ef18:	0003c528 	.word	0x0003c528
   1ef1c:	20023430 	.word	0x20023430
   1ef20:	0003c2cc 	.word	0x0003c2cc
   1ef24:	0003c3a4 	.word	0x0003c3a4
   1ef28:	0003d35e 	.word	0x0003d35e

0001ef2c <slm_at_tcpip_clac>:

/**@brief API to list TCP/IP AT commands
 */
void slm_at_tcpip_clac(void)
{
   1ef2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1ef2e:	2400      	movs	r4, #0
   1ef30:	4d0c      	ldr	r5, [pc, #48]	; (1ef64 <slm_at_tcpip_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", tcpip_at_list[i].string);
   1ef32:	4f0d      	ldr	r7, [pc, #52]	; (1ef68 <slm_at_tcpip_clac+0x3c>)
   1ef34:	4e0d      	ldr	r6, [pc, #52]	; (1ef6c <slm_at_tcpip_clac+0x40>)
   1ef36:	686b      	ldr	r3, [r5, #4]
   1ef38:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ef3c:	2100      	movs	r1, #0
   1ef3e:	9300      	str	r3, [sp, #0]
   1ef40:	4630      	mov	r0, r6
   1ef42:	463b      	mov	r3, r7
   1ef44:	f01c fb6d 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ef48:	4630      	mov	r0, r6
   1ef4a:	f7fe f891 	bl	1d070 <strlen>
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1ef4e:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ef50:	4601      	mov	r1, r0
   1ef52:	4630      	mov	r0, r6
   1ef54:	f7ff f948 	bl	1e1e8 <rsp_send>
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
   1ef58:	2c0b      	cmp	r4, #11
   1ef5a:	f105 050c 	add.w	r5, r5, #12
   1ef5e:	d1ea      	bne.n	1ef36 <slm_at_tcpip_clac+0xa>
	}
}
   1ef60:	b003      	add	sp, #12
   1ef62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ef64:	0003c528 	.word	0x0003c528
   1ef68:	0003d557 	.word	0x0003d557
   1ef6c:	20028950 	.word	0x20028950

0001ef70 <slm_at_tcpip_init>:
 */
int slm_at_tcpip_init(void)
{
	client.sock = INVALID_SOCKET;
	client.sec_tag = INVALID_SEC_TAG;
	client.role = AT_SOCKET_ROLE_CLIENT;
   1ef70:	2000      	movs	r0, #0
	client.sock = INVALID_SOCKET;
   1ef72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ef76:	4b04      	ldr	r3, [pc, #16]	; (1ef88 <slm_at_tcpip_init+0x18>)
	client.sec_tag = INVALID_SEC_TAG;
   1ef78:	e9c3 2200 	strd	r2, r2, [r3]
	client.sock_peer = INVALID_SOCKET;
   1ef7c:	e9c3 0202 	strd	r0, r2, [r3, #8]
	client.connected = false;
   1ef80:	7518      	strb	r0, [r3, #20]
	client.ip_proto = IPPROTO_IP;
   1ef82:	6118      	str	r0, [r3, #16]
	return 0;
}
   1ef84:	4770      	bx	lr
   1ef86:	bf00      	nop
   1ef88:	20023470 	.word	0x20023470

0001ef8c <do_socket_close>:
{
   1ef8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (client.sock > 0) {
   1ef8e:	4d1b      	ldr	r5, [pc, #108]	; (1effc <do_socket_close+0x70>)
{
   1ef90:	4606      	mov	r6, r0
	if (client.sock > 0) {
   1ef92:	6828      	ldr	r0, [r5, #0]
   1ef94:	2800      	cmp	r0, #0
   1ef96:	dd2f      	ble.n	1eff8 <do_socket_close+0x6c>
	return z_impl_zsock_close(sock);
   1ef98:	f019 fe95 	bl	38cc6 <z_impl_zsock_close>
		if (ret < 0) {
   1ef9c:	1e04      	subs	r4, r0, #0
   1ef9e:	da12      	bge.n	1efc6 <do_socket_close+0x3a>
   1efa0:	4a17      	ldr	r2, [pc, #92]	; (1f000 <do_socket_close+0x74>)
   1efa2:	4c18      	ldr	r4, [pc, #96]	; (1f004 <do_socket_close+0x78>)
   1efa4:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   1efa6:	f01a f98e 	bl	392c6 <__errno>
   1efaa:	08e4      	lsrs	r4, r4, #3
   1efac:	6801      	ldr	r1, [r0, #0]
   1efae:	01a4      	lsls	r4, r4, #6
   1efb0:	f044 0402 	orr.w	r4, r4, #2
   1efb4:	4622      	mov	r2, r4
   1efb6:	4814      	ldr	r0, [pc, #80]	; (1f008 <do_socket_close+0x7c>)
   1efb8:	4249      	negs	r1, r1
   1efba:	f019 fa90 	bl	384de <log_1>
			ret = -errno;
   1efbe:	f01a f982 	bl	392c6 <__errno>
   1efc2:	6804      	ldr	r4, [r0, #0]
   1efc4:	4264      	negs	r4, r4
		if (client.sock_peer > 0) {
   1efc6:	68e8      	ldr	r0, [r5, #12]
   1efc8:	2800      	cmp	r0, #0
   1efca:	dd01      	ble.n	1efd0 <do_socket_close+0x44>
   1efcc:	f019 fe7b 	bl	38cc6 <z_impl_zsock_close>
		slm_at_tcpip_init();
   1efd0:	f7ff ffce 	bl	1ef70 <slm_at_tcpip_init>
		sprintf(rsp_buf, "#XSOCKET: %d, closed\r\n", error);
   1efd4:	2100      	movs	r1, #0
   1efd6:	f640 228c 	movw	r2, #2700	; 0xa8c
   1efda:	4b0c      	ldr	r3, [pc, #48]	; (1f00c <do_socket_close+0x80>)
   1efdc:	480c      	ldr	r0, [pc, #48]	; (1f010 <do_socket_close+0x84>)
   1efde:	9600      	str	r6, [sp, #0]
   1efe0:	f01c fb1f 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1efe4:	480a      	ldr	r0, [pc, #40]	; (1f010 <do_socket_close+0x84>)
   1efe6:	f7fe f843 	bl	1d070 <strlen>
   1efea:	4601      	mov	r1, r0
   1efec:	4808      	ldr	r0, [pc, #32]	; (1f010 <do_socket_close+0x84>)
   1efee:	f7ff f8fb 	bl	1e1e8 <rsp_send>
}
   1eff2:	4620      	mov	r0, r4
   1eff4:	b002      	add	sp, #8
   1eff6:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1eff8:	2400      	movs	r4, #0
	return ret;
   1effa:	e7fa      	b.n	1eff2 <do_socket_close+0x66>
   1effc:	20023470 	.word	0x20023470
   1f000:	0003c2cc 	.word	0x0003c2cc
   1f004:	0003c3a4 	.word	0x0003c3a4
   1f008:	0003d641 	.word	0x0003d641
   1f00c:	0003d654 	.word	0x0003d654
   1f010:	20028950 	.word	0x20028950

0001f014 <do_recvfrom>:
{
   1f014:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f016:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	ret = recvfrom(client.sock, data, length, 0, NULL, NULL);
   1f01a:	4b4f      	ldr	r3, [pc, #316]	; (1f158 <do_recvfrom+0x144>)
{
   1f01c:	4602      	mov	r2, r0
   1f01e:	af02      	add	r7, sp, #8
	ret = recvfrom(client.sock, data, length, 0, NULL, NULL);
   1f020:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1f022:	2600      	movs	r6, #0
   1f024:	f107 0108 	add.w	r1, r7, #8
   1f028:	4633      	mov	r3, r6
   1f02a:	e9cd 6600 	strd	r6, r6, [sp]
   1f02e:	f019 fed4 	bl	38dda <z_impl_zsock_recvfrom>
	if (ret < 0) {
   1f032:	1e04      	subs	r4, r0, #0
   1f034:	da3a      	bge.n	1f0ac <do_recvfrom+0x98>
   1f036:	4a49      	ldr	r2, [pc, #292]	; (1f15c <do_recvfrom+0x148>)
   1f038:	4c49      	ldr	r4, [pc, #292]	; (1f160 <do_recvfrom+0x14c>)
   1f03a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("recvfrom() error: %d", -errno);
   1f03c:	f01a f943 	bl	392c6 <__errno>
   1f040:	08e4      	lsrs	r4, r4, #3
   1f042:	6801      	ldr	r1, [r0, #0]
   1f044:	01a4      	lsls	r4, r4, #6
   1f046:	f044 0401 	orr.w	r4, r4, #1
   1f04a:	4622      	mov	r2, r4
   1f04c:	4845      	ldr	r0, [pc, #276]	; (1f164 <do_recvfrom+0x150>)
   1f04e:	4249      	negs	r1, r1
   1f050:	f019 fa45 	bl	384de <log_1>
		if (errno != EAGAIN && errno != ETIMEDOUT) {
   1f054:	f01a f937 	bl	392c6 <__errno>
   1f058:	6803      	ldr	r3, [r0, #0]
   1f05a:	2b0b      	cmp	r3, #11
   1f05c:	d012      	beq.n	1f084 <do_recvfrom+0x70>
   1f05e:	f01a f932 	bl	392c6 <__errno>
   1f062:	6803      	ldr	r3, [r0, #0]
   1f064:	2b74      	cmp	r3, #116	; 0x74
   1f066:	d00d      	beq.n	1f084 <do_recvfrom+0x70>
			do_socket_close(-errno);
   1f068:	f01a f92d 	bl	392c6 <__errno>
   1f06c:	6800      	ldr	r0, [r0, #0]
   1f06e:	4240      	negs	r0, r0
   1f070:	f7ff ff8c 	bl	1ef8c <do_socket_close>
		return -errno;
   1f074:	f01a f927 	bl	392c6 <__errno>
   1f078:	6800      	ldr	r0, [r0, #0]
   1f07a:	4240      	negs	r0, r0
}
   1f07c:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   1f080:	46bd      	mov	sp, r7
   1f082:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1f084:	f01a f91f 	bl	392c6 <__errno>
   1f088:	6803      	ldr	r3, [r0, #0]
   1f08a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f08e:	425b      	negs	r3, r3
   1f090:	2100      	movs	r1, #0
   1f092:	9300      	str	r3, [sp, #0]
   1f094:	4834      	ldr	r0, [pc, #208]	; (1f168 <do_recvfrom+0x154>)
   1f096:	4b35      	ldr	r3, [pc, #212]	; (1f16c <do_recvfrom+0x158>)
   1f098:	f01c fac3 	bl	3b622 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1f09c:	4832      	ldr	r0, [pc, #200]	; (1f168 <do_recvfrom+0x154>)
   1f09e:	f7fd ffe7 	bl	1d070 <strlen>
   1f0a2:	4601      	mov	r1, r0
   1f0a4:	4830      	ldr	r0, [pc, #192]	; (1f168 <do_recvfrom+0x154>)
   1f0a6:	f7ff f89f 	bl	1e1e8 <rsp_send>
   1f0aa:	e7e3      	b.n	1f074 <do_recvfrom+0x60>
	if (slm_util_hex_check(data, ret)) {
   1f0ac:	b2a1      	uxth	r1, r4
   1f0ae:	f107 0008 	add.w	r0, r7, #8
   1f0b2:	6079      	str	r1, [r7, #4]
   1f0b4:	f018 fcaf 	bl	37a16 <slm_util_hex_check>
   1f0b8:	4605      	mov	r5, r0
   1f0ba:	2800      	cmp	r0, #0
   1f0bc:	d033      	beq.n	1f126 <do_recvfrom+0x112>
		char data_hex[ret * 2];
   1f0be:	0063      	lsls	r3, r4, #1
   1f0c0:	1dda      	adds	r2, r3, #7
   1f0c2:	f022 0207 	bic.w	r2, r2, #7
	if (slm_util_hex_check(data, ret)) {
   1f0c6:	466d      	mov	r5, sp
		char data_hex[ret * 2];
   1f0c8:	ebad 0d02 	sub.w	sp, sp, r2
   1f0cc:	ac02      	add	r4, sp, #8
		ret = slm_util_htoa(data, ret, data_hex, size);
   1f0ce:	6879      	ldr	r1, [r7, #4]
   1f0d0:	4622      	mov	r2, r4
   1f0d2:	b29b      	uxth	r3, r3
   1f0d4:	f107 0008 	add.w	r0, r7, #8
   1f0d8:	f7fe ff56 	bl	1df88 <slm_util_htoa>
		if (ret > 0) {
   1f0dc:	1e01      	subs	r1, r0, #0
   1f0de:	dd17      	ble.n	1f110 <do_recvfrom+0xfc>
			rsp_send(data_hex, ret);
   1f0e0:	4620      	mov	r0, r4
   1f0e2:	6079      	str	r1, [r7, #4]
   1f0e4:	f7ff f880 	bl	1e1e8 <rsp_send>
			sprintf(rsp_buf, "\r\n#XRECVFROM: %d, %d\r\n",
   1f0e8:	6879      	ldr	r1, [r7, #4]
   1f0ea:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f0ee:	e9cd 6100 	strd	r6, r1, [sp]
   1f0f2:	4b1f      	ldr	r3, [pc, #124]	; (1f170 <do_recvfrom+0x15c>)
   1f0f4:	4631      	mov	r1, r6
   1f0f6:	481c      	ldr	r0, [pc, #112]	; (1f168 <do_recvfrom+0x154>)
   1f0f8:	f01c fa93 	bl	3b622 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1f0fc:	481a      	ldr	r0, [pc, #104]	; (1f168 <do_recvfrom+0x154>)
   1f0fe:	f7fd ffb7 	bl	1d070 <strlen>
   1f102:	4601      	mov	r1, r0
   1f104:	4818      	ldr	r0, [pc, #96]	; (1f168 <do_recvfrom+0x154>)
   1f106:	f7ff f86f 	bl	1e1e8 <rsp_send>
	return 0;
   1f10a:	2000      	movs	r0, #0
   1f10c:	46ad      	mov	sp, r5
   1f10e:	e7b5      	b.n	1f07c <do_recvfrom+0x68>
   1f110:	4b12      	ldr	r3, [pc, #72]	; (1f15c <do_recvfrom+0x148>)
   1f112:	4a13      	ldr	r2, [pc, #76]	; (1f160 <do_recvfrom+0x14c>)
			LOG_ERR("hex convert error: %d", ret);
   1f114:	4817      	ldr	r0, [pc, #92]	; (1f174 <do_recvfrom+0x160>)
   1f116:	1ad2      	subs	r2, r2, r3
   1f118:	08d2      	lsrs	r2, r2, #3
   1f11a:	0192      	lsls	r2, r2, #6
   1f11c:	f042 0201 	orr.w	r2, r2, #1
   1f120:	f019 f9dd 	bl	384de <log_1>
   1f124:	e7f1      	b.n	1f10a <do_recvfrom+0xf6>
		rsp_send(data, ret);
   1f126:	4621      	mov	r1, r4
   1f128:	f107 0008 	add.w	r0, r7, #8
   1f12c:	f7ff f85c 	bl	1e1e8 <rsp_send>
		sprintf(rsp_buf, "\r\n#XRECVFROM: %d, %d\r\n",
   1f130:	2301      	movs	r3, #1
   1f132:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f136:	4629      	mov	r1, r5
   1f138:	9300      	str	r3, [sp, #0]
   1f13a:	480b      	ldr	r0, [pc, #44]	; (1f168 <do_recvfrom+0x154>)
   1f13c:	4b0c      	ldr	r3, [pc, #48]	; (1f170 <do_recvfrom+0x15c>)
   1f13e:	9401      	str	r4, [sp, #4]
   1f140:	f01c fa6f 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1f144:	4808      	ldr	r0, [pc, #32]	; (1f168 <do_recvfrom+0x154>)
   1f146:	f7fd ff93 	bl	1d070 <strlen>
   1f14a:	4601      	mov	r1, r0
   1f14c:	4806      	ldr	r0, [pc, #24]	; (1f168 <do_recvfrom+0x154>)
   1f14e:	f7ff f84b 	bl	1e1e8 <rsp_send>
	return 0;
   1f152:	4628      	mov	r0, r5
   1f154:	e792      	b.n	1f07c <do_recvfrom+0x68>
   1f156:	bf00      	nop
   1f158:	20023470 	.word	0x20023470
   1f15c:	0003c2cc 	.word	0x0003c2cc
   1f160:	0003c3a4 	.word	0x0003c3a4
   1f164:	0003d66b 	.word	0x0003d66b
   1f168:	20028950 	.word	0x20028950
   1f16c:	0003d680 	.word	0x0003d680
   1f170:	0003d68f 	.word	0x0003d68f
   1f174:	0003d6a6 	.word	0x0003d6a6

0001f178 <handle_at_recvfrom>:
	uint16_t length = NET_IPV4_MTU;
   1f178:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1f17c:	b513      	push	{r0, r1, r4, lr}
	uint16_t length = NET_IPV4_MTU;
   1f17e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (client.sock < 0) {
   1f182:	4b18      	ldr	r3, [pc, #96]	; (1f1e4 <handle_at_recvfrom+0x6c>)
{
   1f184:	4604      	mov	r4, r0
	if (client.sock < 0) {
   1f186:	681a      	ldr	r2, [r3, #0]
   1f188:	2a00      	cmp	r2, #0
   1f18a:	da03      	bge.n	1f194 <handle_at_recvfrom+0x1c>
   1f18c:	f7ff fca0 	bl	1ead0 <handle_at_bind.part.0>
}
   1f190:	b002      	add	sp, #8
   1f192:	bd10      	pop	{r4, pc}
	if (client.ip_proto != IPPROTO_UDP &&
   1f194:	691b      	ldr	r3, [r3, #16]
   1f196:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1f19a:	2b11      	cmp	r3, #17
   1f19c:	d00c      	beq.n	1f1b8 <handle_at_recvfrom+0x40>
   1f19e:	4912      	ldr	r1, [pc, #72]	; (1f1e8 <handle_at_recvfrom+0x70>)
   1f1a0:	4b12      	ldr	r3, [pc, #72]	; (1f1ec <handle_at_recvfrom+0x74>)
		LOG_ERR("Invalid protocol");
   1f1a2:	4813      	ldr	r0, [pc, #76]	; (1f1f0 <handle_at_recvfrom+0x78>)
   1f1a4:	1ac9      	subs	r1, r1, r3
   1f1a6:	08c9      	lsrs	r1, r1, #3
   1f1a8:	0189      	lsls	r1, r1, #6
   1f1aa:	f041 0101 	orr.w	r1, r1, #1
   1f1ae:	f019 f987 	bl	384c0 <log_0>
	int err = -EINVAL;
   1f1b2:	f06f 0015 	mvn.w	r0, #21
   1f1b6:	e7eb      	b.n	1f190 <handle_at_recvfrom+0x18>
	switch (cmd_type) {
   1f1b8:	2801      	cmp	r0, #1
   1f1ba:	d1fa      	bne.n	1f1b2 <handle_at_recvfrom+0x3a>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1f1bc:	480d      	ldr	r0, [pc, #52]	; (1f1f4 <handle_at_recvfrom+0x7c>)
   1f1be:	f01b fb4a 	bl	3a856 <at_params_valid_count_get>
   1f1c2:	2801      	cmp	r0, #1
   1f1c4:	d804      	bhi.n	1f1d0 <handle_at_recvfrom+0x58>
		err = do_recvfrom(length);
   1f1c6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1f1ca:	f7ff ff23 	bl	1f014 <do_recvfrom>
		break;
   1f1ce:	e7df      	b.n	1f190 <handle_at_recvfrom+0x18>
			err = at_params_short_get(&at_param_list, 1, &length);
   1f1d0:	4621      	mov	r1, r4
   1f1d2:	4808      	ldr	r0, [pc, #32]	; (1f1f4 <handle_at_recvfrom+0x7c>)
   1f1d4:	f10d 0206 	add.w	r2, sp, #6
   1f1d8:	f01b faf5 	bl	3a7c6 <at_params_short_get>
			if (err) {
   1f1dc:	2800      	cmp	r0, #0
   1f1de:	d0f2      	beq.n	1f1c6 <handle_at_recvfrom+0x4e>
   1f1e0:	e7d6      	b.n	1f190 <handle_at_recvfrom+0x18>
   1f1e2:	bf00      	nop
   1f1e4:	20023470 	.word	0x20023470
   1f1e8:	0003c3a4 	.word	0x0003c3a4
   1f1ec:	0003c2cc 	.word	0x0003c2cc
   1f1f0:	0003d6bc 	.word	0x0003d6bc
   1f1f4:	20023430 	.word	0x20023430

0001f1f8 <do_sendto>:
{
   1f1f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f1fc:	4604      	mov	r4, r0
   1f1fe:	460d      	mov	r5, r1
   1f200:	4617      	mov	r7, r2
   1f202:	461e      	mov	r6, r3
	if (check_for_ipv4(url, strlen(url))) {
   1f204:	f7fd ff34 	bl	1d070 <strlen>
   1f208:	b2c1      	uxtb	r1, r0
   1f20a:	4620      	mov	r0, r4
   1f20c:	f018 fc3a 	bl	37a84 <check_for_ipv4>
   1f210:	b1d0      	cbz	r0, 1f248 <do_sendto+0x50>
		ret = parse_host_by_ipv4(url, port);
   1f212:	4629      	mov	r1, r5
   1f214:	4620      	mov	r0, r4
   1f216:	f7ff fd17 	bl	1ec48 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
   1f21a:	4604      	mov	r4, r0
	if (ret) {
   1f21c:	b160      	cbz	r0, 1f238 <do_sendto+0x40>
   1f21e:	4a3a      	ldr	r2, [pc, #232]	; (1f308 <do_sendto+0x110>)
   1f220:	493a      	ldr	r1, [pc, #232]	; (1f30c <do_sendto+0x114>)
   1f222:	1a89      	subs	r1, r1, r2
   1f224:	08c9      	lsrs	r1, r1, #3
		LOG_ERR("Parse failed: %d", ret);
   1f226:	0189      	lsls	r1, r1, #6
   1f228:	f041 0201 	orr.w	r2, r1, #1
   1f22c:	4601      	mov	r1, r0
   1f22e:	4838      	ldr	r0, [pc, #224]	; (1f310 <do_sendto+0x118>)
   1f230:	f019 f955 	bl	384de <log_1>
	if (ret < 0) {
   1f234:	2c00      	cmp	r4, #0
   1f236:	db63      	blt.n	1f300 <do_sendto+0x108>
{
   1f238:	2500      	movs	r5, #0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1f23a:	f04f 0908 	mov.w	r9, #8
		ret = sendto(client.sock, data + offset,
   1f23e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1f324 <do_sendto+0x12c>
   1f242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1f328 <do_sendto+0x130>
   1f246:	e01a      	b.n	1f27e <do_sendto+0x86>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
   1f248:	2202      	movs	r2, #2
   1f24a:	4629      	mov	r1, r5
   1f24c:	4620      	mov	r0, r4
   1f24e:	f7ff fd0f 	bl	1ec70 <parse_host_by_name>
   1f252:	e7e2      	b.n	1f21a <do_sendto+0x22>
				sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1f254:	f01a f837 	bl	392c6 <__errno>
   1f258:	6803      	ldr	r3, [r0, #0]
   1f25a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f25e:	425b      	negs	r3, r3
   1f260:	2100      	movs	r1, #0
   1f262:	9300      	str	r3, [sp, #0]
   1f264:	482b      	ldr	r0, [pc, #172]	; (1f314 <do_sendto+0x11c>)
   1f266:	4b2c      	ldr	r3, [pc, #176]	; (1f318 <do_sendto+0x120>)
   1f268:	f01c f9db 	bl	3b622 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1f26c:	4829      	ldr	r0, [pc, #164]	; (1f314 <do_sendto+0x11c>)
   1f26e:	f7fd feff 	bl	1d070 <strlen>
   1f272:	4601      	mov	r1, r0
   1f274:	4827      	ldr	r0, [pc, #156]	; (1f314 <do_sendto+0x11c>)
   1f276:	f7fe ffb7 	bl	1e1e8 <rsp_send>
   1f27a:	e02c      	b.n	1f2d6 <do_sendto+0xde>
		offset += ret;
   1f27c:	4425      	add	r5, r4
	while (offset < datalen) {
   1f27e:	42ae      	cmp	r6, r5
   1f280:	d92d      	bls.n	1f2de <do_sendto+0xe6>
		ret = sendto(client.sock, data + offset,
   1f282:	f8d8 0000 	ldr.w	r0, [r8]
   1f286:	2300      	movs	r3, #0
   1f288:	e9cd a900 	strd	sl, r9, [sp]
   1f28c:	1b72      	subs	r2, r6, r5
   1f28e:	1979      	adds	r1, r7, r5
   1f290:	f019 fd86 	bl	38da0 <z_impl_zsock_sendto>
		if (ret <= 0) {
   1f294:	1e04      	subs	r4, r0, #0
   1f296:	dcf1      	bgt.n	1f27c <do_sendto+0x84>
   1f298:	4a1b      	ldr	r2, [pc, #108]	; (1f308 <do_sendto+0x110>)
   1f29a:	4c1c      	ldr	r4, [pc, #112]	; (1f30c <do_sendto+0x114>)
   1f29c:	1aa4      	subs	r4, r4, r2
			LOG_ERR("sendto() failed: %d", -errno);
   1f29e:	f01a f812 	bl	392c6 <__errno>
   1f2a2:	08e4      	lsrs	r4, r4, #3
   1f2a4:	6801      	ldr	r1, [r0, #0]
   1f2a6:	01a4      	lsls	r4, r4, #6
   1f2a8:	f044 0401 	orr.w	r4, r4, #1
   1f2ac:	4622      	mov	r2, r4
   1f2ae:	481b      	ldr	r0, [pc, #108]	; (1f31c <do_sendto+0x124>)
   1f2b0:	4249      	negs	r1, r1
   1f2b2:	f019 f914 	bl	384de <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   1f2b6:	f01a f806 	bl	392c6 <__errno>
   1f2ba:	6803      	ldr	r3, [r0, #0]
   1f2bc:	2b0b      	cmp	r3, #11
   1f2be:	d0c9      	beq.n	1f254 <do_sendto+0x5c>
   1f2c0:	f01a f801 	bl	392c6 <__errno>
   1f2c4:	6803      	ldr	r3, [r0, #0]
   1f2c6:	2b74      	cmp	r3, #116	; 0x74
   1f2c8:	d0c4      	beq.n	1f254 <do_sendto+0x5c>
				do_socket_close(-errno);
   1f2ca:	f019 fffc 	bl	392c6 <__errno>
   1f2ce:	6800      	ldr	r0, [r0, #0]
   1f2d0:	4240      	negs	r0, r0
   1f2d2:	f7ff fe5b 	bl	1ef8c <do_socket_close>
			ret = -errno;
   1f2d6:	f019 fff6 	bl	392c6 <__errno>
   1f2da:	6804      	ldr	r4, [r0, #0]
   1f2dc:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XSENDTO: %d\r\n", offset);
   1f2de:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f2e2:	2100      	movs	r1, #0
   1f2e4:	4b0e      	ldr	r3, [pc, #56]	; (1f320 <do_sendto+0x128>)
   1f2e6:	480b      	ldr	r0, [pc, #44]	; (1f314 <do_sendto+0x11c>)
   1f2e8:	9500      	str	r5, [sp, #0]
   1f2ea:	f01c f99a 	bl	3b622 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1f2ee:	4809      	ldr	r0, [pc, #36]	; (1f314 <do_sendto+0x11c>)
   1f2f0:	f7fd febe 	bl	1d070 <strlen>
   1f2f4:	4601      	mov	r1, r0
   1f2f6:	4807      	ldr	r0, [pc, #28]	; (1f314 <do_sendto+0x11c>)
   1f2f8:	f7fe ff76 	bl	1e1e8 <rsp_send>
	if (ret >= 0) {
   1f2fc:	ea04 74e4 	and.w	r4, r4, r4, asr #31
}
   1f300:	4620      	mov	r0, r4
   1f302:	b002      	add	sp, #8
   1f304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f308:	0003c2cc 	.word	0x0003c2cc
   1f30c:	0003c3a4 	.word	0x0003c3a4
   1f310:	0003d6cd 	.word	0x0003d6cd
   1f314:	20028950 	.word	0x20028950
   1f318:	0003d680 	.word	0x0003d680
   1f31c:	0003d6de 	.word	0x0003d6de
   1f320:	0003d6f2 	.word	0x0003d6f2
   1f324:	20023470 	.word	0x20023470
   1f328:	20023488 	.word	0x20023488

0001f32c <handle_at_sendto>:
{
   1f32c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f32e:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
	if (client.sock < 0) {
   1f332:	4b3c      	ldr	r3, [pc, #240]	; (1f424 <handle_at_sendto+0xf8>)
{
   1f334:	4605      	mov	r5, r0
	if (client.sock < 0) {
   1f336:	681a      	ldr	r2, [r3, #0]
{
   1f338:	af00      	add	r7, sp, #0
	if (client.sock < 0) {
   1f33a:	2a00      	cmp	r2, #0
   1f33c:	da0f      	bge.n	1f35e <handle_at_sendto+0x32>
   1f33e:	493a      	ldr	r1, [pc, #232]	; (1f428 <handle_at_sendto+0xfc>)
   1f340:	4b3a      	ldr	r3, [pc, #232]	; (1f42c <handle_at_sendto+0x100>)
		LOG_ERR("Socket not opened yet");
   1f342:	483b      	ldr	r0, [pc, #236]	; (1f430 <handle_at_sendto+0x104>)
   1f344:	1ac9      	subs	r1, r1, r3
   1f346:	08c9      	lsrs	r1, r1, #3
   1f348:	0189      	lsls	r1, r1, #6
   1f34a:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid protocol");
   1f34e:	f019 f8b7 	bl	384c0 <log_0>
	int err = -EINVAL;
   1f352:	f06f 0015 	mvn.w	r0, #21
}
   1f356:	f507 7733 	add.w	r7, r7, #716	; 0x2cc
   1f35a:	46bd      	mov	sp, r7
   1f35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (client.ip_proto != IPPROTO_UDP &&
   1f35e:	691b      	ldr	r3, [r3, #16]
   1f360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1f364:	2b11      	cmp	r3, #17
   1f366:	d008      	beq.n	1f37a <handle_at_sendto+0x4e>
   1f368:	492f      	ldr	r1, [pc, #188]	; (1f428 <handle_at_sendto+0xfc>)
   1f36a:	4b30      	ldr	r3, [pc, #192]	; (1f42c <handle_at_sendto+0x100>)
		LOG_ERR("Invalid protocol");
   1f36c:	4831      	ldr	r0, [pc, #196]	; (1f434 <handle_at_sendto+0x108>)
   1f36e:	1ac9      	subs	r1, r1, r3
   1f370:	08c9      	lsrs	r1, r1, #3
   1f372:	0189      	lsls	r1, r1, #6
   1f374:	f041 0101 	orr.w	r1, r1, #1
   1f378:	e7e9      	b.n	1f34e <handle_at_sendto+0x22>
	switch (cmd_type) {
   1f37a:	2801      	cmp	r0, #1
   1f37c:	d1e9      	bne.n	1f352 <handle_at_sendto+0x26>
		if (at_params_valid_count_get(&at_param_list) < 5) {
   1f37e:	482e      	ldr	r0, [pc, #184]	; (1f438 <handle_at_sendto+0x10c>)
   1f380:	f01b fa69 	bl	3a856 <at_params_valid_count_get>
   1f384:	2804      	cmp	r0, #4
   1f386:	d9e4      	bls.n	1f352 <handle_at_sendto+0x26>
		size = TCPIP_MAX_URL;
   1f388:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1f38a:	f107 0408 	add.w	r4, r7, #8
		size = TCPIP_MAX_URL;
   1f38e:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1f390:	4622      	mov	r2, r4
   1f392:	4629      	mov	r1, r5
   1f394:	4828      	ldr	r0, [pc, #160]	; (1f438 <handle_at_sendto+0x10c>)
   1f396:	1d3b      	adds	r3, r7, #4
   1f398:	f01b fa3a 	bl	3a810 <at_params_string_get>
		if (err) {
   1f39c:	2800      	cmp	r0, #0
   1f39e:	d1da      	bne.n	1f356 <handle_at_sendto+0x2a>
		url[size] = '\0';
   1f3a0:	687b      	ldr	r3, [r7, #4]
		err = at_params_short_get(&at_param_list, 2, &port);
   1f3a2:	463a      	mov	r2, r7
		url[size] = '\0';
   1f3a4:	54e0      	strb	r0, [r4, r3]
		err = at_params_short_get(&at_param_list, 2, &port);
   1f3a6:	2102      	movs	r1, #2
   1f3a8:	4823      	ldr	r0, [pc, #140]	; (1f438 <handle_at_sendto+0x10c>)
   1f3aa:	f01b fa0c 	bl	3a7c6 <at_params_short_get>
		if (err) {
   1f3ae:	2800      	cmp	r0, #0
   1f3b0:	d1d1      	bne.n	1f356 <handle_at_sendto+0x2a>
		err = at_params_short_get(&at_param_list, 3, &datatype);
   1f3b2:	2103      	movs	r1, #3
   1f3b4:	4820      	ldr	r0, [pc, #128]	; (1f438 <handle_at_sendto+0x10c>)
   1f3b6:	1cba      	adds	r2, r7, #2
   1f3b8:	f01b fa05 	bl	3a7c6 <at_params_short_get>
		if (err) {
   1f3bc:	2800      	cmp	r0, #0
   1f3be:	d1ca      	bne.n	1f356 <handle_at_sendto+0x2a>
		size = NET_IPV4_MTU;
   1f3c0:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&at_param_list, 4, data, &size);
   1f3c4:	2104      	movs	r1, #4
		size = NET_IPV4_MTU;
   1f3c6:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&at_param_list, 4, data, &size);
   1f3c8:	481b      	ldr	r0, [pc, #108]	; (1f438 <handle_at_sendto+0x10c>)
   1f3ca:	1d3b      	adds	r3, r7, #4
   1f3cc:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1f3d0:	f01b fa1e 	bl	3a810 <at_params_string_get>
		if (err) {
   1f3d4:	2800      	cmp	r0, #0
   1f3d6:	d1be      	bne.n	1f356 <handle_at_sendto+0x2a>
		if (datatype == DATATYPE_HEXADECIMAL) {
   1f3d8:	887b      	ldrh	r3, [r7, #2]
   1f3da:	6879      	ldr	r1, [r7, #4]
   1f3dc:	b9d3      	cbnz	r3, 1f414 <handle_at_sendto+0xe8>
			uint8_t data_hex[size / 2];
   1f3de:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   1f3e2:	105b      	asrs	r3, r3, #1
   1f3e4:	1dda      	adds	r2, r3, #7
   1f3e6:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   1f3ea:	466d      	mov	r5, sp
			uint8_t data_hex[size / 2];
   1f3ec:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   1f3f0:	466a      	mov	r2, sp
   1f3f2:	b29b      	uxth	r3, r3
   1f3f4:	b289      	uxth	r1, r1
   1f3f6:	f107 0088 	add.w	r0, r7, #136	; 0x88
   1f3fa:	f018 fb1f 	bl	37a3c <slm_util_atoh>
			if (err > 0) {
   1f3fe:	2800      	cmp	r0, #0
			uint8_t data_hex[size / 2];
   1f400:	466e      	mov	r6, sp
			if (err > 0) {
   1f402:	dd05      	ble.n	1f410 <handle_at_sendto+0xe4>
				err = do_sendto(url, port, data_hex, err);
   1f404:	4603      	mov	r3, r0
   1f406:	4632      	mov	r2, r6
   1f408:	4620      	mov	r0, r4
   1f40a:	8839      	ldrh	r1, [r7, #0]
   1f40c:	f7ff fef4 	bl	1f1f8 <do_sendto>
   1f410:	46ad      	mov	sp, r5
   1f412:	e7a0      	b.n	1f356 <handle_at_sendto+0x2a>
			err = do_sendto(url, port, data, size);
   1f414:	460b      	mov	r3, r1
   1f416:	4620      	mov	r0, r4
   1f418:	8839      	ldrh	r1, [r7, #0]
   1f41a:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1f41e:	f7ff feeb 	bl	1f1f8 <do_sendto>
   1f422:	e798      	b.n	1f356 <handle_at_sendto+0x2a>
   1f424:	20023470 	.word	0x20023470
   1f428:	0003c3a4 	.word	0x0003c3a4
   1f42c:	0003c2cc 	.word	0x0003c2cc
   1f430:	0003d4d6 	.word	0x0003d4d6
   1f434:	0003d6bc 	.word	0x0003d6bc
   1f438:	20023430 	.word	0x20023430

0001f43c <do_recv>:
{
   1f43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f440:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
	int sock = client.sock;
   1f444:	4b65      	ldr	r3, [pc, #404]	; (1f5dc <do_recv+0x1a0>)
{
   1f446:	4602      	mov	r2, r0
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f448:	6899      	ldr	r1, [r3, #8]
	int sock = client.sock;
   1f44a:	6818      	ldr	r0, [r3, #0]
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f44c:	2901      	cmp	r1, #1
{
   1f44e:	af02      	add	r7, sp, #8
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f450:	d114      	bne.n	1f47c <do_recv+0x40>
		if (client.sock_peer != INVALID_SOCKET) {
   1f452:	68d8      	ldr	r0, [r3, #12]
   1f454:	1c43      	adds	r3, r0, #1
   1f456:	d111      	bne.n	1f47c <do_recv+0x40>
   1f458:	4b61      	ldr	r3, [pc, #388]	; (1f5e0 <do_recv+0x1a4>)
   1f45a:	4962      	ldr	r1, [pc, #392]	; (1f5e4 <do_recv+0x1a8>)
			LOG_ERR("No remote connection");
   1f45c:	4862      	ldr	r0, [pc, #392]	; (1f5e8 <do_recv+0x1ac>)
   1f45e:	1ac9      	subs	r1, r1, r3
   1f460:	08c9      	lsrs	r1, r1, #3
   1f462:	0189      	lsls	r1, r1, #6
   1f464:	f041 0101 	orr.w	r1, r1, #1
   1f468:	f019 f82a 	bl	384c0 <log_0>
			return -EINVAL;
   1f46c:	f06f 0415 	mvn.w	r4, #21
}
   1f470:	4620      	mov	r0, r4
   1f472:	f507 7712 	add.w	r7, r7, #584	; 0x248
   1f476:	46bd      	mov	sp, r7
   1f478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1f47c:	2300      	movs	r3, #0
   1f47e:	f107 0108 	add.w	r1, r7, #8
   1f482:	e9cd 3300 	strd	r3, r3, [sp]
   1f486:	f019 fca8 	bl	38dda <z_impl_zsock_recvfrom>
	if (ret < 0) {
   1f48a:	1e05      	subs	r5, r0, #0
   1f48c:	da37      	bge.n	1f4fe <do_recv+0xc2>
   1f48e:	4a54      	ldr	r2, [pc, #336]	; (1f5e0 <do_recv+0x1a4>)
   1f490:	4c54      	ldr	r4, [pc, #336]	; (1f5e4 <do_recv+0x1a8>)
   1f492:	1aa4      	subs	r4, r4, r2
		LOG_WRN("recv() error: %d", -errno);
   1f494:	f019 ff17 	bl	392c6 <__errno>
   1f498:	08e4      	lsrs	r4, r4, #3
   1f49a:	6801      	ldr	r1, [r0, #0]
   1f49c:	01a4      	lsls	r4, r4, #6
   1f49e:	f044 0402 	orr.w	r4, r4, #2
   1f4a2:	4622      	mov	r2, r4
   1f4a4:	4851      	ldr	r0, [pc, #324]	; (1f5ec <do_recv+0x1b0>)
   1f4a6:	4249      	negs	r1, r1
   1f4a8:	f019 f819 	bl	384de <log_1>
		if (errno != EAGAIN && errno != ETIMEDOUT) {
   1f4ac:	f019 ff0b 	bl	392c6 <__errno>
   1f4b0:	6803      	ldr	r3, [r0, #0]
   1f4b2:	2b0b      	cmp	r3, #11
   1f4b4:	d00f      	beq.n	1f4d6 <do_recv+0x9a>
   1f4b6:	f019 ff06 	bl	392c6 <__errno>
   1f4ba:	6803      	ldr	r3, [r0, #0]
   1f4bc:	2b74      	cmp	r3, #116	; 0x74
   1f4be:	d00a      	beq.n	1f4d6 <do_recv+0x9a>
			do_socket_close(-errno);
   1f4c0:	f019 ff01 	bl	392c6 <__errno>
   1f4c4:	6800      	ldr	r0, [r0, #0]
   1f4c6:	4240      	negs	r0, r0
   1f4c8:	f7ff fd60 	bl	1ef8c <do_socket_close>
		return -errno;
   1f4cc:	f019 fefb 	bl	392c6 <__errno>
   1f4d0:	6804      	ldr	r4, [r0, #0]
   1f4d2:	4264      	negs	r4, r4
   1f4d4:	e7cc      	b.n	1f470 <do_recv+0x34>
			sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1f4d6:	f019 fef6 	bl	392c6 <__errno>
   1f4da:	6803      	ldr	r3, [r0, #0]
   1f4dc:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f4e0:	425b      	negs	r3, r3
   1f4e2:	2100      	movs	r1, #0
   1f4e4:	9300      	str	r3, [sp, #0]
   1f4e6:	4842      	ldr	r0, [pc, #264]	; (1f5f0 <do_recv+0x1b4>)
   1f4e8:	4b42      	ldr	r3, [pc, #264]	; (1f5f4 <do_recv+0x1b8>)
   1f4ea:	f01c f89a 	bl	3b622 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1f4ee:	4840      	ldr	r0, [pc, #256]	; (1f5f0 <do_recv+0x1b4>)
   1f4f0:	f7fd fdbe 	bl	1d070 <strlen>
   1f4f4:	4601      	mov	r1, r0
   1f4f6:	483e      	ldr	r0, [pc, #248]	; (1f5f0 <do_recv+0x1b4>)
   1f4f8:	f7fe fe76 	bl	1e1e8 <rsp_send>
   1f4fc:	e7e6      	b.n	1f4cc <do_recv+0x90>
	if (ret == 0) {
   1f4fe:	d109      	bne.n	1f514 <do_recv+0xd8>
   1f500:	4938      	ldr	r1, [pc, #224]	; (1f5e4 <do_recv+0x1a8>)
   1f502:	4b37      	ldr	r3, [pc, #220]	; (1f5e0 <do_recv+0x1a4>)
		LOG_WRN("recv() return 0");
   1f504:	483c      	ldr	r0, [pc, #240]	; (1f5f8 <do_recv+0x1bc>)
   1f506:	1ac9      	subs	r1, r1, r3
   1f508:	08c9      	lsrs	r1, r1, #3
   1f50a:	0189      	lsls	r1, r1, #6
   1f50c:	f041 0102 	orr.w	r1, r1, #2
   1f510:	f018 ffd6 	bl	384c0 <log_0>
	if (slm_util_hex_check(data, ret)) {
   1f514:	b2a9      	uxth	r1, r5
   1f516:	f107 0008 	add.w	r0, r7, #8
   1f51a:	6079      	str	r1, [r7, #4]
   1f51c:	f018 fa7b 	bl	37a16 <slm_util_hex_check>
   1f520:	4604      	mov	r4, r0
   1f522:	2800      	cmp	r0, #0
   1f524:	d03c      	beq.n	1f5a0 <do_recv+0x164>
		char data_hex[ret * 2];
   1f526:	006b      	lsls	r3, r5, #1
   1f528:	1dda      	adds	r2, r3, #7
   1f52a:	f022 0207 	bic.w	r2, r2, #7
	if (slm_util_hex_check(data, ret)) {
   1f52e:	466e      	mov	r6, sp
		char data_hex[ret * 2];
   1f530:	ebad 0d02 	sub.w	sp, sp, r2
   1f534:	f10d 0808 	add.w	r8, sp, #8
		ret = slm_util_htoa(data, ret, data_hex, size);
   1f538:	4642      	mov	r2, r8
   1f53a:	6879      	ldr	r1, [r7, #4]
   1f53c:	b29b      	uxth	r3, r3
   1f53e:	f107 0008 	add.w	r0, r7, #8
   1f542:	f7fe fd21 	bl	1df88 <slm_util_htoa>
		if (ret > 0) {
   1f546:	1e04      	subs	r4, r0, #0
   1f548:	dd1e      	ble.n	1f588 <do_recv+0x14c>
			sprintf(rsp_buf, "#XRECV: %d, %d\r\n",
   1f54a:	2500      	movs	r5, #0
   1f54c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f550:	4b2a      	ldr	r3, [pc, #168]	; (1f5fc <do_recv+0x1c0>)
   1f552:	4629      	mov	r1, r5
   1f554:	9401      	str	r4, [sp, #4]
   1f556:	4826      	ldr	r0, [pc, #152]	; (1f5f0 <do_recv+0x1b4>)
   1f558:	9500      	str	r5, [sp, #0]
   1f55a:	f01c f862 	bl	3b622 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1f55e:	4824      	ldr	r0, [pc, #144]	; (1f5f0 <do_recv+0x1b4>)
   1f560:	f7fd fd86 	bl	1d070 <strlen>
   1f564:	4601      	mov	r1, r0
   1f566:	4822      	ldr	r0, [pc, #136]	; (1f5f0 <do_recv+0x1b4>)
   1f568:	f7fe fe3e 	bl	1e1e8 <rsp_send>
			rsp_send(data_hex, ret);
   1f56c:	4621      	mov	r1, r4
   1f56e:	4640      	mov	r0, r8
   1f570:	f7fe fe3a 	bl	1e1e8 <rsp_send>
			rsp_send("\r\n", strlen("\r\n"));
   1f574:	4822      	ldr	r0, [pc, #136]	; (1f600 <do_recv+0x1c4>)
   1f576:	f7fd fd7b 	bl	1d070 <strlen>
   1f57a:	4601      	mov	r1, r0
   1f57c:	4820      	ldr	r0, [pc, #128]	; (1f600 <do_recv+0x1c4>)
   1f57e:	f7fe fe33 	bl	1e1e8 <rsp_send>
			ret = 0;
   1f582:	462c      	mov	r4, r5
			LOG_ERR("hex convert error: %d", ret);
   1f584:	46b5      	mov	sp, r6
   1f586:	e773      	b.n	1f470 <do_recv+0x34>
   1f588:	4b15      	ldr	r3, [pc, #84]	; (1f5e0 <do_recv+0x1a4>)
   1f58a:	4a16      	ldr	r2, [pc, #88]	; (1f5e4 <do_recv+0x1a8>)
   1f58c:	4621      	mov	r1, r4
   1f58e:	1ad2      	subs	r2, r2, r3
   1f590:	08d2      	lsrs	r2, r2, #3
   1f592:	0192      	lsls	r2, r2, #6
   1f594:	481b      	ldr	r0, [pc, #108]	; (1f604 <do_recv+0x1c8>)
   1f596:	f042 0201 	orr.w	r2, r2, #1
   1f59a:	f018 ffa0 	bl	384de <log_1>
   1f59e:	e7f1      	b.n	1f584 <do_recv+0x148>
		sprintf(rsp_buf, "#XRECV: %d, %d\r\n",
   1f5a0:	2301      	movs	r3, #1
   1f5a2:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f5a6:	4601      	mov	r1, r0
   1f5a8:	9300      	str	r3, [sp, #0]
   1f5aa:	9501      	str	r5, [sp, #4]
   1f5ac:	4b13      	ldr	r3, [pc, #76]	; (1f5fc <do_recv+0x1c0>)
   1f5ae:	4810      	ldr	r0, [pc, #64]	; (1f5f0 <do_recv+0x1b4>)
   1f5b0:	f01c f837 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1f5b4:	480e      	ldr	r0, [pc, #56]	; (1f5f0 <do_recv+0x1b4>)
   1f5b6:	f7fd fd5b 	bl	1d070 <strlen>
   1f5ba:	4601      	mov	r1, r0
   1f5bc:	480c      	ldr	r0, [pc, #48]	; (1f5f0 <do_recv+0x1b4>)
   1f5be:	f7fe fe13 	bl	1e1e8 <rsp_send>
		rsp_send(data, ret);
   1f5c2:	4629      	mov	r1, r5
   1f5c4:	f107 0008 	add.w	r0, r7, #8
   1f5c8:	f7fe fe0e 	bl	1e1e8 <rsp_send>
		rsp_send("\r\n", strlen("\r\n"));
   1f5cc:	480c      	ldr	r0, [pc, #48]	; (1f600 <do_recv+0x1c4>)
   1f5ce:	f7fd fd4f 	bl	1d070 <strlen>
   1f5d2:	4601      	mov	r1, r0
   1f5d4:	480a      	ldr	r0, [pc, #40]	; (1f600 <do_recv+0x1c4>)
   1f5d6:	f7fe fe07 	bl	1e1e8 <rsp_send>
		ret = 0;
   1f5da:	e749      	b.n	1f470 <do_recv+0x34>
   1f5dc:	20023470 	.word	0x20023470
   1f5e0:	0003c2cc 	.word	0x0003c2cc
   1f5e4:	0003c3a4 	.word	0x0003c3a4
   1f5e8:	0003d701 	.word	0x0003d701
   1f5ec:	0003d716 	.word	0x0003d716
   1f5f0:	20028950 	.word	0x20028950
   1f5f4:	0003d680 	.word	0x0003d680
   1f5f8:	0003d727 	.word	0x0003d727
   1f5fc:	0003d737 	.word	0x0003d737
   1f600:	00040191 	.word	0x00040191
   1f604:	0003d6a6 	.word	0x0003d6a6

0001f608 <handle_at_recv>:
	uint16_t length = NET_IPV4_MTU;
   1f608:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1f60c:	b513      	push	{r0, r1, r4, lr}
	uint16_t length = NET_IPV4_MTU;
   1f60e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!client.connected) {
   1f612:	4b13      	ldr	r3, [pc, #76]	; (1f660 <handle_at_recv+0x58>)
{
   1f614:	4604      	mov	r4, r0
	if (!client.connected) {
   1f616:	7d1b      	ldrb	r3, [r3, #20]
   1f618:	b963      	cbnz	r3, 1f634 <handle_at_recv+0x2c>
   1f61a:	4912      	ldr	r1, [pc, #72]	; (1f664 <handle_at_recv+0x5c>)
   1f61c:	4b12      	ldr	r3, [pc, #72]	; (1f668 <handle_at_recv+0x60>)
		LOG_ERR("Not connected yet");
   1f61e:	4813      	ldr	r0, [pc, #76]	; (1f66c <handle_at_recv+0x64>)
   1f620:	1ac9      	subs	r1, r1, r3
   1f622:	08c9      	lsrs	r1, r1, #3
   1f624:	0189      	lsls	r1, r1, #6
   1f626:	f041 0101 	orr.w	r1, r1, #1
   1f62a:	f018 ff49 	bl	384c0 <log_0>
	int err = -EINVAL;
   1f62e:	f06f 0015 	mvn.w	r0, #21
   1f632:	e00a      	b.n	1f64a <handle_at_recv+0x42>
	switch (cmd_type) {
   1f634:	2801      	cmp	r0, #1
   1f636:	d1fa      	bne.n	1f62e <handle_at_recv+0x26>
		if (at_params_valid_count_get(&at_param_list) > 1) {
   1f638:	480d      	ldr	r0, [pc, #52]	; (1f670 <handle_at_recv+0x68>)
   1f63a:	f01b f90c 	bl	3a856 <at_params_valid_count_get>
   1f63e:	2801      	cmp	r0, #1
   1f640:	d805      	bhi.n	1f64e <handle_at_recv+0x46>
		err = do_recv(length);
   1f642:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1f646:	f7ff fef9 	bl	1f43c <do_recv>
}
   1f64a:	b002      	add	sp, #8
   1f64c:	bd10      	pop	{r4, pc}
			err = at_params_short_get(&at_param_list, 1, &length);
   1f64e:	4621      	mov	r1, r4
   1f650:	4807      	ldr	r0, [pc, #28]	; (1f670 <handle_at_recv+0x68>)
   1f652:	f10d 0206 	add.w	r2, sp, #6
   1f656:	f01b f8b6 	bl	3a7c6 <at_params_short_get>
			if (err) {
   1f65a:	2800      	cmp	r0, #0
   1f65c:	d0f1      	beq.n	1f642 <handle_at_recv+0x3a>
   1f65e:	e7f4      	b.n	1f64a <handle_at_recv+0x42>
   1f660:	20023470 	.word	0x20023470
   1f664:	0003c3a4 	.word	0x0003c3a4
   1f668:	0003c2cc 	.word	0x0003c2cc
   1f66c:	0003d748 	.word	0x0003d748
   1f670:	20023430 	.word	0x20023430

0001f674 <do_send>:
	int sock = client.sock;
   1f674:	4b3a      	ldr	r3, [pc, #232]	; (1f760 <__kernel_ram_size+0x60>)
{
   1f676:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f67a:	689a      	ldr	r2, [r3, #8]
{
   1f67c:	4680      	mov	r8, r0
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f67e:	2a01      	cmp	r2, #1
{
   1f680:	460e      	mov	r6, r1
	int sock = client.sock;
   1f682:	681f      	ldr	r7, [r3, #0]
	if (client.role == AT_SOCKET_ROLE_SERVER) {
   1f684:	d168      	bne.n	1f758 <__kernel_ram_size+0x58>
		if (client.sock_peer != INVALID_SOCKET) {
   1f686:	68df      	ldr	r7, [r3, #12]
   1f688:	1c7b      	adds	r3, r7, #1
   1f68a:	d165      	bne.n	1f758 <__kernel_ram_size+0x58>
   1f68c:	4b35      	ldr	r3, [pc, #212]	; (1f764 <__kernel_ram_size+0x64>)
   1f68e:	4936      	ldr	r1, [pc, #216]	; (1f768 <__kernel_ram_size+0x68>)
			LOG_ERR("No remote connection");
   1f690:	4836      	ldr	r0, [pc, #216]	; (1f76c <__kernel_ram_size+0x6c>)
   1f692:	1ac9      	subs	r1, r1, r3
   1f694:	08c9      	lsrs	r1, r1, #3
   1f696:	0189      	lsls	r1, r1, #6
   1f698:	f041 0101 	orr.w	r1, r1, #1
   1f69c:	f018 ff10 	bl	384c0 <log_0>
			return -EINVAL;
   1f6a0:	f06f 0015 	mvn.w	r0, #21
}
   1f6a4:	b003      	add	sp, #12
   1f6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
   1f6aa:	f019 fe0c 	bl	392c6 <__errno>
   1f6ae:	6803      	ldr	r3, [r0, #0]
   1f6b0:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f6b4:	425b      	negs	r3, r3
   1f6b6:	2100      	movs	r1, #0
   1f6b8:	9300      	str	r3, [sp, #0]
   1f6ba:	482d      	ldr	r0, [pc, #180]	; (1f770 <__kernel_ram_size+0x70>)
   1f6bc:	4b2d      	ldr	r3, [pc, #180]	; (1f774 <__kernel_ram_size+0x74>)
   1f6be:	f01b ffb0 	bl	3b622 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1f6c2:	482b      	ldr	r0, [pc, #172]	; (1f770 <__kernel_ram_size+0x70>)
   1f6c4:	f7fd fcd4 	bl	1d070 <strlen>
   1f6c8:	4601      	mov	r1, r0
   1f6ca:	4829      	ldr	r0, [pc, #164]	; (1f770 <__kernel_ram_size+0x70>)
   1f6cc:	f7fe fd8c 	bl	1e1e8 <rsp_send>
   1f6d0:	e02c      	b.n	1f72c <__kernel_ram_size+0x2c>
		offset += ret;
   1f6d2:	4425      	add	r5, r4
	while (offset < datalen) {
   1f6d4:	42ae      	cmp	r6, r5
   1f6d6:	d92d      	bls.n	1f734 <__kernel_ram_size+0x34>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1f6d8:	2300      	movs	r3, #0
   1f6da:	4638      	mov	r0, r7
   1f6dc:	e9cd 9900 	strd	r9, r9, [sp]
   1f6e0:	1b72      	subs	r2, r6, r5
   1f6e2:	eb08 0105 	add.w	r1, r8, r5
   1f6e6:	f019 fb5b 	bl	38da0 <z_impl_zsock_sendto>
		if (ret < 0) {
   1f6ea:	1e04      	subs	r4, r0, #0
   1f6ec:	daf1      	bge.n	1f6d2 <do_send+0x5e>
   1f6ee:	4a1d      	ldr	r2, [pc, #116]	; (1f764 <__kernel_ram_size+0x64>)
   1f6f0:	4c1d      	ldr	r4, [pc, #116]	; (1f768 <__kernel_ram_size+0x68>)
   1f6f2:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send() failed: %d", -errno);
   1f6f4:	f019 fde7 	bl	392c6 <__errno>
   1f6f8:	08e4      	lsrs	r4, r4, #3
   1f6fa:	6801      	ldr	r1, [r0, #0]
   1f6fc:	01a4      	lsls	r4, r4, #6
   1f6fe:	f044 0401 	orr.w	r4, r4, #1
   1f702:	4622      	mov	r2, r4
   1f704:	481c      	ldr	r0, [pc, #112]	; (1f778 <__kernel_ram_size+0x78>)
   1f706:	4249      	negs	r1, r1
   1f708:	f018 fee9 	bl	384de <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   1f70c:	f019 fddb 	bl	392c6 <__errno>
   1f710:	6803      	ldr	r3, [r0, #0]
   1f712:	2b0b      	cmp	r3, #11
   1f714:	d0c9      	beq.n	1f6aa <do_send+0x36>
   1f716:	f019 fdd6 	bl	392c6 <__errno>
   1f71a:	6803      	ldr	r3, [r0, #0]
   1f71c:	2b74      	cmp	r3, #116	; 0x74
   1f71e:	d0c4      	beq.n	1f6aa <do_send+0x36>
				do_socket_close(-errno);
   1f720:	f019 fdd1 	bl	392c6 <__errno>
   1f724:	6800      	ldr	r0, [r0, #0]
   1f726:	4240      	negs	r0, r0
   1f728:	f7ff fc30 	bl	1ef8c <do_socket_close>
			ret = -errno;
   1f72c:	f019 fdcb 	bl	392c6 <__errno>
   1f730:	6804      	ldr	r4, [r0, #0]
   1f732:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XSEND: %d\r\n", offset);
   1f734:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f738:	2100      	movs	r1, #0
   1f73a:	4b10      	ldr	r3, [pc, #64]	; (1f77c <__kernel_ram_size+0x7c>)
   1f73c:	480c      	ldr	r0, [pc, #48]	; (1f770 <__kernel_ram_size+0x70>)
   1f73e:	9500      	str	r5, [sp, #0]
   1f740:	f01b ff6f 	bl	3b622 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1f744:	480a      	ldr	r0, [pc, #40]	; (1f770 <__kernel_ram_size+0x70>)
   1f746:	f7fd fc93 	bl	1d070 <strlen>
   1f74a:	4601      	mov	r1, r0
   1f74c:	4808      	ldr	r0, [pc, #32]	; (1f770 <__kernel_ram_size+0x70>)
   1f74e:	f7fe fd4b 	bl	1e1e8 <rsp_send>
	if (ret >= 0) {
   1f752:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1f756:	e7a5      	b.n	1f6a4 <do_send+0x30>
{
   1f758:	2400      	movs	r4, #0
   1f75a:	4625      	mov	r5, r4
   1f75c:	46a1      	mov	r9, r4
   1f75e:	e7b9      	b.n	1f6d4 <do_send+0x60>
   1f760:	20023470 	.word	0x20023470
   1f764:	0003c2cc 	.word	0x0003c2cc
   1f768:	0003c3a4 	.word	0x0003c3a4
   1f76c:	0003d701 	.word	0x0003d701
   1f770:	20028950 	.word	0x20028950
   1f774:	0003d680 	.word	0x0003d680
   1f778:	0003d75a 	.word	0x0003d75a
   1f77c:	0003d76c 	.word	0x0003d76c

0001f780 <handle_at_send>:
{
   1f780:	b590      	push	{r4, r7, lr}
	int size = NET_IPV4_MTU;
   1f782:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1f786:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   1f78a:	af00      	add	r7, sp, #0
	int size = NET_IPV4_MTU;
   1f78c:	607b      	str	r3, [r7, #4]
	if (!client.connected) {
   1f78e:	4b25      	ldr	r3, [pc, #148]	; (1f824 <handle_at_send+0xa4>)
{
   1f790:	4604      	mov	r4, r0
	if (!client.connected) {
   1f792:	7d1b      	ldrb	r3, [r3, #20]
   1f794:	b97b      	cbnz	r3, 1f7b6 <handle_at_send+0x36>
   1f796:	4924      	ldr	r1, [pc, #144]	; (1f828 <handle_at_send+0xa8>)
   1f798:	4b24      	ldr	r3, [pc, #144]	; (1f82c <handle_at_send+0xac>)
		LOG_ERR("Not connected yet");
   1f79a:	4825      	ldr	r0, [pc, #148]	; (1f830 <handle_at_send+0xb0>)
   1f79c:	1ac9      	subs	r1, r1, r3
   1f79e:	08c9      	lsrs	r1, r1, #3
   1f7a0:	0189      	lsls	r1, r1, #6
   1f7a2:	f041 0101 	orr.w	r1, r1, #1
   1f7a6:	f018 fe8b 	bl	384c0 <log_0>
	int err = -EINVAL;
   1f7aa:	f06f 0015 	mvn.w	r0, #21
}
   1f7ae:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   1f7b2:	46bd      	mov	sp, r7
   1f7b4:	bd90      	pop	{r4, r7, pc}
	switch (cmd_type) {
   1f7b6:	2801      	cmp	r0, #1
   1f7b8:	d1f7      	bne.n	1f7aa <handle_at_send+0x2a>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1f7ba:	481e      	ldr	r0, [pc, #120]	; (1f834 <handle_at_send+0xb4>)
   1f7bc:	f01b f84b 	bl	3a856 <at_params_valid_count_get>
   1f7c0:	2802      	cmp	r0, #2
   1f7c2:	d9f2      	bls.n	1f7aa <handle_at_send+0x2a>
		err = at_params_short_get(&at_param_list, 1, &datatype);
   1f7c4:	4621      	mov	r1, r4
   1f7c6:	481b      	ldr	r0, [pc, #108]	; (1f834 <handle_at_send+0xb4>)
   1f7c8:	1cba      	adds	r2, r7, #2
   1f7ca:	f01a fffc 	bl	3a7c6 <at_params_short_get>
		if (err) {
   1f7ce:	2800      	cmp	r0, #0
   1f7d0:	d1ed      	bne.n	1f7ae <handle_at_send+0x2e>
		err = at_params_string_get(&at_param_list, 2, data, &size);
   1f7d2:	2102      	movs	r1, #2
   1f7d4:	4817      	ldr	r0, [pc, #92]	; (1f834 <handle_at_send+0xb4>)
   1f7d6:	1d3b      	adds	r3, r7, #4
   1f7d8:	f107 0208 	add.w	r2, r7, #8
   1f7dc:	f01b f818 	bl	3a810 <at_params_string_get>
		if (err) {
   1f7e0:	2800      	cmp	r0, #0
   1f7e2:	d1e4      	bne.n	1f7ae <handle_at_send+0x2e>
		if (datatype == DATATYPE_HEXADECIMAL) {
   1f7e4:	887b      	ldrh	r3, [r7, #2]
   1f7e6:	6879      	ldr	r1, [r7, #4]
   1f7e8:	b9bb      	cbnz	r3, 1f81a <handle_at_send+0x9a>
			uint8_t data_hex[size / 2];
   1f7ea:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   1f7ee:	105b      	asrs	r3, r3, #1
   1f7f0:	1dda      	adds	r2, r3, #7
   1f7f2:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   1f7f6:	466c      	mov	r4, sp
			uint8_t data_hex[size / 2];
   1f7f8:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   1f7fc:	466a      	mov	r2, sp
   1f7fe:	b29b      	uxth	r3, r3
   1f800:	b289      	uxth	r1, r1
   1f802:	f107 0008 	add.w	r0, r7, #8
   1f806:	f018 f919 	bl	37a3c <slm_util_atoh>
			if (err > 0) {
   1f80a:	2800      	cmp	r0, #0
   1f80c:	dd03      	ble.n	1f816 <handle_at_send+0x96>
				err = do_send(data_hex, err);
   1f80e:	4601      	mov	r1, r0
   1f810:	4668      	mov	r0, sp
   1f812:	f7ff ff2f 	bl	1f674 <do_send>
   1f816:	46a5      	mov	sp, r4
   1f818:	e7c9      	b.n	1f7ae <handle_at_send+0x2e>
			err = do_send(data, size);
   1f81a:	f107 0008 	add.w	r0, r7, #8
   1f81e:	f7ff ff29 	bl	1f674 <do_send>
   1f822:	e7c4      	b.n	1f7ae <handle_at_send+0x2e>
   1f824:	20023470 	.word	0x20023470
   1f828:	0003c3a4 	.word	0x0003c3a4
   1f82c:	0003c2cc 	.word	0x0003c2cc
   1f830:	0003d748 	.word	0x0003d748
   1f834:	20023430 	.word	0x20023430

0001f838 <handle_at_accept>:
{
   1f838:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (client.sock < 0) {
   1f83a:	4b4e      	ldr	r3, [pc, #312]	; (1f974 <handle_at_accept+0x13c>)
{
   1f83c:	4604      	mov	r4, r0
	if (client.sock < 0) {
   1f83e:	6818      	ldr	r0, [r3, #0]
   1f840:	461e      	mov	r6, r3
   1f842:	2800      	cmp	r0, #0
{
   1f844:	b089      	sub	sp, #36	; 0x24
	if (client.sock < 0) {
   1f846:	da0c      	bge.n	1f862 <handle_at_accept+0x2a>
   1f848:	494b      	ldr	r1, [pc, #300]	; (1f978 <handle_at_accept+0x140>)
   1f84a:	4b4c      	ldr	r3, [pc, #304]	; (1f97c <handle_at_accept+0x144>)
		LOG_ERR("Socket not opened yet");
   1f84c:	484c      	ldr	r0, [pc, #304]	; (1f980 <handle_at_accept+0x148>)
   1f84e:	1ac9      	subs	r1, r1, r3
   1f850:	08c9      	lsrs	r1, r1, #3
   1f852:	0189      	lsls	r1, r1, #6
   1f854:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
   1f858:	f018 fe32 	bl	384c0 <log_0>
		return -EINVAL;
   1f85c:	f06f 0015 	mvn.w	r0, #21
   1f860:	e046      	b.n	1f8f0 <handle_at_accept+0xb8>
	if (client.role != AT_SOCKET_ROLE_SERVER) {
   1f862:	689a      	ldr	r2, [r3, #8]
   1f864:	2a01      	cmp	r2, #1
   1f866:	d008      	beq.n	1f87a <handle_at_accept+0x42>
   1f868:	4943      	ldr	r1, [pc, #268]	; (1f978 <handle_at_accept+0x140>)
   1f86a:	4b44      	ldr	r3, [pc, #272]	; (1f97c <handle_at_accept+0x144>)
		LOG_ERR("Invalid role");
   1f86c:	4845      	ldr	r0, [pc, #276]	; (1f984 <handle_at_accept+0x14c>)
   1f86e:	1ac9      	subs	r1, r1, r3
   1f870:	08c9      	lsrs	r1, r1, #3
   1f872:	0189      	lsls	r1, r1, #6
   1f874:	f041 0101 	orr.w	r1, r1, #1
   1f878:	e7ee      	b.n	1f858 <handle_at_accept+0x20>
	if (client.ip_proto != IPPROTO_TCP &&
   1f87a:	691b      	ldr	r3, [r3, #16]
   1f87c:	2b06      	cmp	r3, #6
   1f87e:	d00b      	beq.n	1f898 <handle_at_accept+0x60>
   1f880:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1f884:	d008      	beq.n	1f898 <handle_at_accept+0x60>
   1f886:	493c      	ldr	r1, [pc, #240]	; (1f978 <handle_at_accept+0x140>)
   1f888:	4b3c      	ldr	r3, [pc, #240]	; (1f97c <handle_at_accept+0x144>)
		LOG_ERR("Invalid protocol");
   1f88a:	483f      	ldr	r0, [pc, #252]	; (1f988 <handle_at_accept+0x150>)
   1f88c:	1ac9      	subs	r1, r1, r3
   1f88e:	08c9      	lsrs	r1, r1, #3
   1f890:	0189      	lsls	r1, r1, #6
   1f892:	f041 0101 	orr.w	r1, r1, #1
   1f896:	e7df      	b.n	1f858 <handle_at_accept+0x20>
	switch (cmd_type) {
   1f898:	2c01      	cmp	r4, #1
   1f89a:	d007      	beq.n	1f8ac <handle_at_accept+0x74>
   1f89c:	2c02      	cmp	r4, #2
   1f89e:	d1dd      	bne.n	1f85c <handle_at_accept+0x24>
		if (client.sock_peer != INVALID_SOCKET) {
   1f8a0:	68f3      	ldr	r3, [r6, #12]
   1f8a2:	1c5a      	adds	r2, r3, #1
   1f8a4:	d060      	beq.n	1f968 <handle_at_accept+0x130>
			sprintf(rsp_buf, "#XTCPACCEPT: %d\r\n",
   1f8a6:	9300      	str	r3, [sp, #0]
   1f8a8:	4b38      	ldr	r3, [pc, #224]	; (1f98c <handle_at_accept+0x154>)
   1f8aa:	e04e      	b.n	1f94a <handle_at_accept+0x112>
	socklen_t len = sizeof(struct sockaddr_in);
   1f8ac:	2308      	movs	r3, #8
   1f8ae:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_accept(sock, addr, addrlen);
   1f8b0:	4937      	ldr	r1, [pc, #220]	; (1f990 <handle_at_accept+0x158>)
   1f8b2:	aa03      	add	r2, sp, #12
   1f8b4:	f019 fa5e 	bl	38d74 <z_impl_zsock_accept>
	if (ret < 0) {
   1f8b8:	1e05      	subs	r5, r0, #0
   1f8ba:	da1b      	bge.n	1f8f4 <handle_at_accept+0xbc>
   1f8bc:	4b2f      	ldr	r3, [pc, #188]	; (1f97c <handle_at_accept+0x144>)
   1f8be:	4c2e      	ldr	r4, [pc, #184]	; (1f978 <handle_at_accept+0x140>)
   1f8c0:	1ae4      	subs	r4, r4, r3
		LOG_ERR("accept() failed: %d/%d", -errno, ret);
   1f8c2:	f019 fd00 	bl	392c6 <__errno>
   1f8c6:	08e4      	lsrs	r4, r4, #3
   1f8c8:	6801      	ldr	r1, [r0, #0]
   1f8ca:	01a4      	lsls	r4, r4, #6
   1f8cc:	f044 0401 	orr.w	r4, r4, #1
   1f8d0:	4623      	mov	r3, r4
   1f8d2:	462a      	mov	r2, r5
   1f8d4:	4249      	negs	r1, r1
   1f8d6:	482f      	ldr	r0, [pc, #188]	; (1f994 <handle_at_accept+0x15c>)
   1f8d8:	f018 fe18 	bl	3850c <log_2>
		do_socket_close(-errno);
   1f8dc:	f019 fcf3 	bl	392c6 <__errno>
   1f8e0:	6800      	ldr	r0, [r0, #0]
   1f8e2:	4240      	negs	r0, r0
   1f8e4:	f7ff fb52 	bl	1ef8c <do_socket_close>
		return -errno;
   1f8e8:	f019 fced 	bl	392c6 <__errno>
   1f8ec:	6800      	ldr	r0, [r0, #0]
   1f8ee:	4240      	negs	r0, r0
}
   1f8f0:	b009      	add	sp, #36	; 0x24
   1f8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f8f4:	af04      	add	r7, sp, #16
   1f8f6:	2310      	movs	r3, #16
   1f8f8:	463a      	mov	r2, r7
   1f8fa:	4620      	mov	r0, r4
   1f8fc:	4926      	ldr	r1, [pc, #152]	; (1f998 <handle_at_accept+0x160>)
   1f8fe:	f006 fff7 	bl	268f0 <z_impl_net_addr_ntop>
	if (inet_ntop(AF_INET, &remote.sin_addr, peer_addr, INET_ADDRSTRLEN)
   1f902:	b978      	cbnz	r0, 1f924 <handle_at_accept+0xec>
   1f904:	4a1d      	ldr	r2, [pc, #116]	; (1f97c <handle_at_accept+0x144>)
   1f906:	4c1c      	ldr	r4, [pc, #112]	; (1f978 <handle_at_accept+0x140>)
   1f908:	1aa4      	subs	r4, r4, r2
		LOG_WRN("Parse peer IP address failed: %d", -errno);
   1f90a:	f019 fcdc 	bl	392c6 <__errno>
   1f90e:	08e4      	lsrs	r4, r4, #3
   1f910:	6801      	ldr	r1, [r0, #0]
   1f912:	01a4      	lsls	r4, r4, #6
   1f914:	f044 0402 	orr.w	r4, r4, #2
   1f918:	4622      	mov	r2, r4
   1f91a:	4820      	ldr	r0, [pc, #128]	; (1f99c <handle_at_accept+0x164>)
   1f91c:	4249      	negs	r1, r1
   1f91e:	f018 fdde 	bl	384de <log_1>
   1f922:	e79b      	b.n	1f85c <handle_at_accept+0x24>
	sprintf(rsp_buf, "#XACCEPT: connected with %s\r\n",
   1f924:	4b1e      	ldr	r3, [pc, #120]	; (1f9a0 <handle_at_accept+0x168>)
   1f926:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f92a:	2100      	movs	r1, #0
   1f92c:	481d      	ldr	r0, [pc, #116]	; (1f9a4 <handle_at_accept+0x16c>)
   1f92e:	9700      	str	r7, [sp, #0]
   1f930:	f01b fe77 	bl	3b622 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1f934:	481b      	ldr	r0, [pc, #108]	; (1f9a4 <handle_at_accept+0x16c>)
   1f936:	f7fd fb9b 	bl	1d070 <strlen>
   1f93a:	4601      	mov	r1, r0
   1f93c:	4819      	ldr	r0, [pc, #100]	; (1f9a4 <handle_at_accept+0x16c>)
   1f93e:	f7fe fc53 	bl	1e1e8 <rsp_send>
	sprintf(rsp_buf, "#XACCEPT: %d\r\n", client.sock_peer);
   1f942:	4b19      	ldr	r3, [pc, #100]	; (1f9a8 <handle_at_accept+0x170>)
	client.sock_peer = ret;
   1f944:	60f5      	str	r5, [r6, #12]
	client.connected = true;
   1f946:	7534      	strb	r4, [r6, #20]
	sprintf(rsp_buf, "#XACCEPT: %d\r\n", client.sock_peer);
   1f948:	9500      	str	r5, [sp, #0]
			sprintf(rsp_buf, "#XTCPACCEPT: %d\r\n",
   1f94a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1f94e:	2100      	movs	r1, #0
   1f950:	4814      	ldr	r0, [pc, #80]	; (1f9a4 <handle_at_accept+0x16c>)
   1f952:	f01b fe66 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1f956:	4813      	ldr	r0, [pc, #76]	; (1f9a4 <handle_at_accept+0x16c>)
   1f958:	f7fd fb8a 	bl	1d070 <strlen>
   1f95c:	4601      	mov	r1, r0
   1f95e:	4811      	ldr	r0, [pc, #68]	; (1f9a4 <handle_at_accept+0x16c>)
   1f960:	f7fe fc42 	bl	1e1e8 <rsp_send>
		err = 0;
   1f964:	2000      	movs	r0, #0
		break;
   1f966:	e7c3      	b.n	1f8f0 <handle_at_accept+0xb8>
			sprintf(rsp_buf, "#XTCPACCEPT: 0\r\n");
   1f968:	4910      	ldr	r1, [pc, #64]	; (1f9ac <handle_at_accept+0x174>)
   1f96a:	480e      	ldr	r0, [pc, #56]	; (1f9a4 <handle_at_accept+0x16c>)
   1f96c:	f01b fe80 	bl	3b670 <strcpy>
   1f970:	e7f1      	b.n	1f956 <handle_at_accept+0x11e>
   1f972:	bf00      	nop
   1f974:	20023470 	.word	0x20023470
   1f978:	0003c3a4 	.word	0x0003c3a4
   1f97c:	0003c2cc 	.word	0x0003c2cc
   1f980:	0003d4d6 	.word	0x0003d4d6
   1f984:	0003d593 	.word	0x0003d593
   1f988:	0003d6bc 	.word	0x0003d6bc
   1f98c:	0003d7de 	.word	0x0003d7de
   1f990:	20023488 	.word	0x20023488
   1f994:	0003d779 	.word	0x0003d779
   1f998:	2002348c 	.word	0x2002348c
   1f99c:	0003d790 	.word	0x0003d790
   1f9a0:	0003d7b1 	.word	0x0003d7b1
   1f9a4:	20028950 	.word	0x20028950
   1f9a8:	0003d7cf 	.word	0x0003d7cf
   1f9ac:	0003d7f0 	.word	0x0003d7f0

0001f9b0 <handle_at_listen>:
	if (client.sock < 0) {
   1f9b0:	4b29      	ldr	r3, [pc, #164]	; (1fa58 <handle_at_listen+0xa8>)
{
   1f9b2:	4601      	mov	r1, r0
	if (client.sock < 0) {
   1f9b4:	6818      	ldr	r0, [r3, #0]
{
   1f9b6:	b510      	push	{r4, lr}
	if (client.sock < 0) {
   1f9b8:	2800      	cmp	r0, #0
   1f9ba:	461c      	mov	r4, r3
   1f9bc:	da0c      	bge.n	1f9d8 <handle_at_listen+0x28>
   1f9be:	4927      	ldr	r1, [pc, #156]	; (1fa5c <handle_at_listen+0xac>)
   1f9c0:	4b27      	ldr	r3, [pc, #156]	; (1fa60 <handle_at_listen+0xb0>)
		LOG_ERR("Socket not opened yet");
   1f9c2:	4828      	ldr	r0, [pc, #160]	; (1fa64 <handle_at_listen+0xb4>)
   1f9c4:	1ac9      	subs	r1, r1, r3
   1f9c6:	08c9      	lsrs	r1, r1, #3
   1f9c8:	0189      	lsls	r1, r1, #6
   1f9ca:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
   1f9ce:	f018 fd77 	bl	384c0 <log_0>
	int err = -EINVAL;
   1f9d2:	f06f 0015 	mvn.w	r0, #21
   1f9d6:	e039      	b.n	1fa4c <handle_at_listen+0x9c>
	if (client.role != AT_SOCKET_ROLE_SERVER) {
   1f9d8:	689a      	ldr	r2, [r3, #8]
   1f9da:	2a01      	cmp	r2, #1
   1f9dc:	d008      	beq.n	1f9f0 <handle_at_listen+0x40>
   1f9de:	491f      	ldr	r1, [pc, #124]	; (1fa5c <handle_at_listen+0xac>)
   1f9e0:	4b1f      	ldr	r3, [pc, #124]	; (1fa60 <handle_at_listen+0xb0>)
		LOG_ERR("Invalid role");
   1f9e2:	4821      	ldr	r0, [pc, #132]	; (1fa68 <handle_at_listen+0xb8>)
   1f9e4:	1ac9      	subs	r1, r1, r3
   1f9e6:	08c9      	lsrs	r1, r1, #3
   1f9e8:	0189      	lsls	r1, r1, #6
   1f9ea:	f041 0101 	orr.w	r1, r1, #1
   1f9ee:	e7ee      	b.n	1f9ce <handle_at_listen+0x1e>
	if (client.ip_proto != IPPROTO_TCP &&
   1f9f0:	691b      	ldr	r3, [r3, #16]
   1f9f2:	2b06      	cmp	r3, #6
   1f9f4:	d00b      	beq.n	1fa0e <handle_at_listen+0x5e>
   1f9f6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1f9fa:	d008      	beq.n	1fa0e <handle_at_listen+0x5e>
   1f9fc:	4917      	ldr	r1, [pc, #92]	; (1fa5c <handle_at_listen+0xac>)
   1f9fe:	4b18      	ldr	r3, [pc, #96]	; (1fa60 <handle_at_listen+0xb0>)
		LOG_ERR("Invalid protocol");
   1fa00:	481a      	ldr	r0, [pc, #104]	; (1fa6c <handle_at_listen+0xbc>)
   1fa02:	1ac9      	subs	r1, r1, r3
   1fa04:	08c9      	lsrs	r1, r1, #3
   1fa06:	0189      	lsls	r1, r1, #6
   1fa08:	f041 0101 	orr.w	r1, r1, #1
   1fa0c:	e7df      	b.n	1f9ce <handle_at_listen+0x1e>
	switch (cmd_type) {
   1fa0e:	2901      	cmp	r1, #1
   1fa10:	d1df      	bne.n	1f9d2 <handle_at_listen+0x22>
	return z_impl_zsock_listen(sock, backlog);
   1fa12:	f019 f99b 	bl	38d4c <z_impl_zsock_listen>
	if (ret < 0) {
   1fa16:	2800      	cmp	r0, #0
   1fa18:	da19      	bge.n	1fa4e <handle_at_listen+0x9e>
   1fa1a:	4a11      	ldr	r2, [pc, #68]	; (1fa60 <handle_at_listen+0xb0>)
   1fa1c:	4c0f      	ldr	r4, [pc, #60]	; (1fa5c <handle_at_listen+0xac>)
   1fa1e:	1aa4      	subs	r4, r4, r2
		LOG_ERR("listen() failed: %d", -errno);
   1fa20:	f019 fc51 	bl	392c6 <__errno>
   1fa24:	08e4      	lsrs	r4, r4, #3
   1fa26:	6801      	ldr	r1, [r0, #0]
   1fa28:	01a4      	lsls	r4, r4, #6
   1fa2a:	f044 0401 	orr.w	r4, r4, #1
   1fa2e:	4622      	mov	r2, r4
   1fa30:	4249      	negs	r1, r1
   1fa32:	480f      	ldr	r0, [pc, #60]	; (1fa70 <handle_at_listen+0xc0>)
   1fa34:	f018 fd53 	bl	384de <log_1>
		do_socket_close(-errno);
   1fa38:	f019 fc45 	bl	392c6 <__errno>
   1fa3c:	6800      	ldr	r0, [r0, #0]
   1fa3e:	4240      	negs	r0, r0
   1fa40:	f7ff faa4 	bl	1ef8c <do_socket_close>
		return -errno;
   1fa44:	f019 fc3f 	bl	392c6 <__errno>
   1fa48:	6800      	ldr	r0, [r0, #0]
   1fa4a:	4240      	negs	r0, r0
}
   1fa4c:	bd10      	pop	{r4, pc}
	client.sock_peer = INVALID_SOCKET;
   1fa4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return 0;
   1fa52:	2000      	movs	r0, #0
	client.sock_peer = INVALID_SOCKET;
   1fa54:	60e3      	str	r3, [r4, #12]
	return 0;
   1fa56:	e7f9      	b.n	1fa4c <handle_at_listen+0x9c>
   1fa58:	20023470 	.word	0x20023470
   1fa5c:	0003c3a4 	.word	0x0003c3a4
   1fa60:	0003c2cc 	.word	0x0003c2cc
   1fa64:	0003d4d6 	.word	0x0003d4d6
   1fa68:	0003d593 	.word	0x0003d593
   1fa6c:	0003d6bc 	.word	0x0003d6bc
   1fa70:	0003d801 	.word	0x0003d801

0001fa74 <handle_at_connect>:
	int size = TCPIP_MAX_URL;
   1fa74:	2380      	movs	r3, #128	; 0x80
{
   1fa76:	b570      	push	{r4, r5, r6, lr}
   1fa78:	b0a4      	sub	sp, #144	; 0x90
	int size = TCPIP_MAX_URL;
   1fa7a:	9303      	str	r3, [sp, #12]
	if (client.sock < 0) {
   1fa7c:	4b56      	ldr	r3, [pc, #344]	; (1fbd8 <handle_at_connect+0x164>)
{
   1fa7e:	4605      	mov	r5, r0
	if (client.sock < 0) {
   1fa80:	681a      	ldr	r2, [r3, #0]
   1fa82:	461e      	mov	r6, r3
   1fa84:	2a00      	cmp	r2, #0
   1fa86:	da0c      	bge.n	1faa2 <handle_at_connect+0x2e>
   1fa88:	4954      	ldr	r1, [pc, #336]	; (1fbdc <handle_at_connect+0x168>)
   1fa8a:	4b55      	ldr	r3, [pc, #340]	; (1fbe0 <handle_at_connect+0x16c>)
		LOG_ERR("Socket not opened yet");
   1fa8c:	4855      	ldr	r0, [pc, #340]	; (1fbe4 <handle_at_connect+0x170>)
   1fa8e:	1ac9      	subs	r1, r1, r3
   1fa90:	08c9      	lsrs	r1, r1, #3
   1fa92:	0189      	lsls	r1, r1, #6
   1fa94:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
   1fa98:	f018 fd12 	bl	384c0 <log_0>
			return -EINVAL;
   1fa9c:	f06f 0415 	mvn.w	r4, #21
   1faa0:	e049      	b.n	1fb36 <handle_at_connect+0xc2>
	if (client.role != AT_SOCKET_ROLE_CLIENT) {
   1faa2:	689c      	ldr	r4, [r3, #8]
   1faa4:	b144      	cbz	r4, 1fab8 <handle_at_connect+0x44>
   1faa6:	494d      	ldr	r1, [pc, #308]	; (1fbdc <handle_at_connect+0x168>)
   1faa8:	4b4d      	ldr	r3, [pc, #308]	; (1fbe0 <handle_at_connect+0x16c>)
		LOG_ERR("Invalid role");
   1faaa:	484f      	ldr	r0, [pc, #316]	; (1fbe8 <handle_at_connect+0x174>)
   1faac:	1ac9      	subs	r1, r1, r3
   1faae:	08c9      	lsrs	r1, r1, #3
   1fab0:	0189      	lsls	r1, r1, #6
   1fab2:	f041 0101 	orr.w	r1, r1, #1
   1fab6:	e7ef      	b.n	1fa98 <handle_at_connect+0x24>
	switch (cmd_type) {
   1fab8:	2801      	cmp	r0, #1
   1faba:	d007      	beq.n	1facc <handle_at_connect+0x58>
   1fabc:	2802      	cmp	r0, #2
   1fabe:	d1ed      	bne.n	1fa9c <handle_at_connect+0x28>
		if (client.connected) {
   1fac0:	7d1b      	ldrb	r3, [r3, #20]
   1fac2:	2b00      	cmp	r3, #0
   1fac4:	f000 8085 	beq.w	1fbd2 <handle_at_connect+0x15e>
			sprintf(rsp_buf, "+XCONNECT: 1\r\n");
   1fac8:	4948      	ldr	r1, [pc, #288]	; (1fbec <handle_at_connect+0x178>)
   1faca:	e077      	b.n	1fbbc <handle_at_connect+0x148>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1facc:	4848      	ldr	r0, [pc, #288]	; (1fbf0 <handle_at_connect+0x17c>)
   1face:	f01a fec2 	bl	3a856 <at_params_valid_count_get>
   1fad2:	2802      	cmp	r0, #2
   1fad4:	d9e2      	bls.n	1fa9c <handle_at_connect+0x28>
		err = at_params_string_get(&at_param_list, 1, url, &size);
   1fad6:	4629      	mov	r1, r5
   1fad8:	4845      	ldr	r0, [pc, #276]	; (1fbf0 <handle_at_connect+0x17c>)
   1fada:	ab03      	add	r3, sp, #12
   1fadc:	aa04      	add	r2, sp, #16
   1fade:	f01a fe97 	bl	3a810 <at_params_string_get>
		if (err) {
   1fae2:	4604      	mov	r4, r0
   1fae4:	bb38      	cbnz	r0, 1fb36 <handle_at_connect+0xc2>
		url[size] = '\0';
   1fae6:	9b03      	ldr	r3, [sp, #12]
   1fae8:	aa24      	add	r2, sp, #144	; 0x90
   1faea:	4413      	add	r3, r2
   1faec:	f803 0c80 	strb.w	r0, [r3, #-128]
		err = at_params_short_get(&at_param_list, 2, &port);
   1faf0:	2102      	movs	r1, #2
   1faf2:	483f      	ldr	r0, [pc, #252]	; (1fbf0 <handle_at_connect+0x17c>)
   1faf4:	f10d 020a 	add.w	r2, sp, #10
   1faf8:	f01a fe65 	bl	3a7c6 <at_params_short_get>
		if (err) {
   1fafc:	4604      	mov	r4, r0
   1fafe:	b9d0      	cbnz	r0, 1fb36 <handle_at_connect+0xc2>
	if (check_for_ipv4(url, strlen(url))) {
   1fb00:	a804      	add	r0, sp, #16
		err = do_connect(url, port);
   1fb02:	f8bd 400a 	ldrh.w	r4, [sp, #10]
	if (check_for_ipv4(url, strlen(url))) {
   1fb06:	f7fd fab3 	bl	1d070 <strlen>
   1fb0a:	b2c1      	uxtb	r1, r0
   1fb0c:	a804      	add	r0, sp, #16
   1fb0e:	f017 ffb9 	bl	37a84 <check_for_ipv4>
   1fb12:	b198      	cbz	r0, 1fb3c <handle_at_connect+0xc8>
		ret = parse_host_by_ipv4(url, port);
   1fb14:	4621      	mov	r1, r4
   1fb16:	a804      	add	r0, sp, #16
   1fb18:	f7ff f896 	bl	1ec48 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
   1fb1c:	4604      	mov	r4, r0
	if (ret) {
   1fb1e:	b198      	cbz	r0, 1fb48 <handle_at_connect+0xd4>
   1fb20:	4a2e      	ldr	r2, [pc, #184]	; (1fbdc <handle_at_connect+0x168>)
   1fb22:	4b2f      	ldr	r3, [pc, #188]	; (1fbe0 <handle_at_connect+0x16c>)
		LOG_ERR("Parse failed: %d", ret);
   1fb24:	4601      	mov	r1, r0
   1fb26:	1ad2      	subs	r2, r2, r3
   1fb28:	08d2      	lsrs	r2, r2, #3
   1fb2a:	0192      	lsls	r2, r2, #6
   1fb2c:	4831      	ldr	r0, [pc, #196]	; (1fbf4 <handle_at_connect+0x180>)
   1fb2e:	f042 0201 	orr.w	r2, r2, #1
   1fb32:	f018 fcd4 	bl	384de <log_1>
}
   1fb36:	4620      	mov	r0, r4
   1fb38:	b024      	add	sp, #144	; 0x90
   1fb3a:	bd70      	pop	{r4, r5, r6, pc}
		ret = parse_host_by_name(url, port, SOCK_STREAM);
   1fb3c:	462a      	mov	r2, r5
   1fb3e:	4621      	mov	r1, r4
   1fb40:	a804      	add	r0, sp, #16
   1fb42:	f7ff f895 	bl	1ec70 <parse_host_by_name>
   1fb46:	e7e9      	b.n	1fb1c <handle_at_connect+0xa8>
	if (client.sec_tag != INVALID_SEC_TAG) {
   1fb48:	6873      	ldr	r3, [r6, #4]
   1fb4a:	3301      	adds	r3, #1
   1fb4c:	d012      	beq.n	1fb74 <handle_at_connect+0x100>
		ret = setsockopt(client.sock, SOL_TLS,
   1fb4e:	a804      	add	r0, sp, #16
   1fb50:	6835      	ldr	r5, [r6, #0]
   1fb52:	f7fd fa8d 	bl	1d070 <strlen>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1fb56:	2202      	movs	r2, #2
   1fb58:	9000      	str	r0, [sp, #0]
   1fb5a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1fb5e:	4628      	mov	r0, r5
   1fb60:	ab04      	add	r3, sp, #16
   1fb62:	f019 f979 	bl	38e58 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   1fb66:	2800      	cmp	r0, #0
   1fb68:	da04      	bge.n	1fb74 <handle_at_connect+0x100>
			printk("Failed to set TLS_HOSTNAME\n");
   1fb6a:	4823      	ldr	r0, [pc, #140]	; (1fbf8 <handle_at_connect+0x184>)
   1fb6c:	f018 f836 	bl	37bdc <printk>
			ret = -errno;
   1fb70:	f019 fba9 	bl	392c6 <__errno>
	ret = connect(client.sock, (struct sockaddr *)&remote,
   1fb74:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   1fb76:	2208      	movs	r2, #8
   1fb78:	4920      	ldr	r1, [pc, #128]	; (1fbfc <handle_at_connect+0x188>)
   1fb7a:	f019 f8d1 	bl	38d20 <z_impl_zsock_connect>
	if (ret < 0) {
   1fb7e:	2800      	cmp	r0, #0
   1fb80:	da19      	bge.n	1fbb6 <handle_at_connect+0x142>
   1fb82:	4a17      	ldr	r2, [pc, #92]	; (1fbe0 <handle_at_connect+0x16c>)
   1fb84:	4c15      	ldr	r4, [pc, #84]	; (1fbdc <handle_at_connect+0x168>)
   1fb86:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect() failed: %d", -errno);
   1fb88:	f019 fb9d 	bl	392c6 <__errno>
   1fb8c:	08e4      	lsrs	r4, r4, #3
   1fb8e:	6801      	ldr	r1, [r0, #0]
   1fb90:	01a4      	lsls	r4, r4, #6
   1fb92:	f044 0401 	orr.w	r4, r4, #1
   1fb96:	4622      	mov	r2, r4
   1fb98:	4249      	negs	r1, r1
   1fb9a:	4819      	ldr	r0, [pc, #100]	; (1fc00 <handle_at_connect+0x18c>)
   1fb9c:	f018 fc9f 	bl	384de <log_1>
		do_socket_close(-errno);
   1fba0:	f019 fb91 	bl	392c6 <__errno>
   1fba4:	6800      	ldr	r0, [r0, #0]
   1fba6:	4240      	negs	r0, r0
   1fba8:	f7ff f9f0 	bl	1ef8c <do_socket_close>
		return -errno;
   1fbac:	f019 fb8b 	bl	392c6 <__errno>
   1fbb0:	6804      	ldr	r4, [r0, #0]
   1fbb2:	4264      	negs	r4, r4
   1fbb4:	e7bf      	b.n	1fb36 <handle_at_connect+0xc2>
	client.connected = true;
   1fbb6:	2301      	movs	r3, #1
	sprintf(rsp_buf, "#XCONNECT: 1\r\n");
   1fbb8:	4912      	ldr	r1, [pc, #72]	; (1fc04 <handle_at_connect+0x190>)
	client.connected = true;
   1fbba:	7533      	strb	r3, [r6, #20]
			sprintf(rsp_buf, "+XCONNECT: 0\r\n");
   1fbbc:	4812      	ldr	r0, [pc, #72]	; (1fc08 <handle_at_connect+0x194>)
   1fbbe:	f01b fd57 	bl	3b670 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1fbc2:	4811      	ldr	r0, [pc, #68]	; (1fc08 <handle_at_connect+0x194>)
   1fbc4:	f7fd fa54 	bl	1d070 <strlen>
   1fbc8:	4601      	mov	r1, r0
   1fbca:	480f      	ldr	r0, [pc, #60]	; (1fc08 <handle_at_connect+0x194>)
   1fbcc:	f7fe fb0c 	bl	1e1e8 <rsp_send>
		break;
   1fbd0:	e7b1      	b.n	1fb36 <handle_at_connect+0xc2>
			sprintf(rsp_buf, "+XCONNECT: 0\r\n");
   1fbd2:	490e      	ldr	r1, [pc, #56]	; (1fc0c <handle_at_connect+0x198>)
   1fbd4:	e7f2      	b.n	1fbbc <handle_at_connect+0x148>
   1fbd6:	bf00      	nop
   1fbd8:	20023470 	.word	0x20023470
   1fbdc:	0003c3a4 	.word	0x0003c3a4
   1fbe0:	0003c2cc 	.word	0x0003c2cc
   1fbe4:	0003d4d6 	.word	0x0003d4d6
   1fbe8:	0003d593 	.word	0x0003d593
   1fbec:	0003d855 	.word	0x0003d855
   1fbf0:	20023430 	.word	0x20023430
   1fbf4:	0003d6cd 	.word	0x0003d6cd
   1fbf8:	0003d815 	.word	0x0003d815
   1fbfc:	20023488 	.word	0x20023488
   1fc00:	0003d831 	.word	0x0003d831
   1fc04:	0003d846 	.word	0x0003d846
   1fc08:	20028950 	.word	0x20028950
   1fc0c:	0003d864 	.word	0x0003d864

0001fc10 <handle_at_bind>:
{
   1fc10:	b530      	push	{r4, r5, lr}
	if (client.sock < 0) {
   1fc12:	4d46      	ldr	r5, [pc, #280]	; (1fd2c <handle_at_bind+0x11c>)
{
   1fc14:	4604      	mov	r4, r0
	if (client.sock < 0) {
   1fc16:	682b      	ldr	r3, [r5, #0]
{
   1fc18:	b085      	sub	sp, #20
	if (client.sock < 0) {
   1fc1a:	2b00      	cmp	r3, #0
   1fc1c:	da03      	bge.n	1fc26 <handle_at_bind+0x16>
   1fc1e:	f7fe ff57 	bl	1ead0 <handle_at_bind.part.0>
}
   1fc22:	b005      	add	sp, #20
   1fc24:	bd30      	pop	{r4, r5, pc}
	switch (cmd_type) {
   1fc26:	2801      	cmp	r0, #1
   1fc28:	d002      	beq.n	1fc30 <handle_at_bind+0x20>
		return -EINVAL;
   1fc2a:	f06f 0015 	mvn.w	r0, #21
   1fc2e:	e7f8      	b.n	1fc22 <handle_at_bind+0x12>
		if (at_params_valid_count_get(&at_param_list) < 2) {
   1fc30:	483f      	ldr	r0, [pc, #252]	; (1fd30 <handle_at_bind+0x120>)
   1fc32:	f01a fe10 	bl	3a856 <at_params_valid_count_get>
   1fc36:	2801      	cmp	r0, #1
   1fc38:	d9f7      	bls.n	1fc2a <handle_at_bind+0x1a>
		err = at_params_short_get(&at_param_list, 1, &port);
   1fc3a:	4621      	mov	r1, r4
   1fc3c:	483c      	ldr	r0, [pc, #240]	; (1fd30 <handle_at_bind+0x120>)
   1fc3e:	f10d 0206 	add.w	r2, sp, #6
   1fc42:	f01a fdc0 	bl	3a7c6 <at_params_short_get>
		if (err < 0) {
   1fc46:	2800      	cmp	r0, #0
   1fc48:	dbeb      	blt.n	1fc22 <handle_at_bind+0x12>
		err = do_bind(port);
   1fc4a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	ret = modem_info_params_get(&modem_param);
   1fc4e:	4839      	ldr	r0, [pc, #228]	; (1fd34 <handle_at_bind+0x124>)
	local.sin_port = htons(port);
   1fc50:	0213      	lsls	r3, r2, #8
   1fc52:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	local.sin_family = AF_INET;
   1fc56:	f8ad 4008 	strh.w	r4, [sp, #8]
	local.sin_port = htons(port);
   1fc5a:	f8ad 300a 	strh.w	r3, [sp, #10]
	ret = modem_info_params_get(&modem_param);
   1fc5e:	f00b fa53 	bl	2b108 <modem_info_params_get>
	if (ret) {
   1fc62:	4601      	mov	r1, r0
   1fc64:	b160      	cbz	r0, 1fc80 <handle_at_bind+0x70>
   1fc66:	4a34      	ldr	r2, [pc, #208]	; (1fd38 <handle_at_bind+0x128>)
   1fc68:	4b34      	ldr	r3, [pc, #208]	; (1fd3c <handle_at_bind+0x12c>)
		LOG_ERR("Unable to obtain modem parameters (%d)", ret);
   1fc6a:	4835      	ldr	r0, [pc, #212]	; (1fd40 <handle_at_bind+0x130>)
   1fc6c:	1ad2      	subs	r2, r2, r3
   1fc6e:	08d2      	lsrs	r2, r2, #3
   1fc70:	0192      	lsls	r2, r2, #6
   1fc72:	f042 0201 	orr.w	r2, r2, #1
   1fc76:	f018 fc32 	bl	384de <log_1>
		return -1;
   1fc7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fc7e:	e7d0      	b.n	1fc22 <handle_at_bind+0x12>
	addr_len = strlen(modem_param.network.ip_address.value_string);
   1fc80:	4830      	ldr	r0, [pc, #192]	; (1fd44 <handle_at_bind+0x134>)
   1fc82:	f7fd f9f5 	bl	1d070 <strlen>
	if (addr_len == 0) {
   1fc86:	b950      	cbnz	r0, 1fc9e <handle_at_bind+0x8e>
   1fc88:	492b      	ldr	r1, [pc, #172]	; (1fd38 <handle_at_bind+0x128>)
   1fc8a:	4b2c      	ldr	r3, [pc, #176]	; (1fd3c <handle_at_bind+0x12c>)
		LOG_ERR("LTE not connected yet");
   1fc8c:	482e      	ldr	r0, [pc, #184]	; (1fd48 <handle_at_bind+0x138>)
   1fc8e:	1ac9      	subs	r1, r1, r3
   1fc90:	08c9      	lsrs	r1, r1, #3
   1fc92:	0189      	lsls	r1, r1, #6
   1fc94:	f041 0101 	orr.w	r1, r1, #1
   1fc98:	f018 fc12 	bl	384c0 <log_0>
   1fc9c:	e7ed      	b.n	1fc7a <handle_at_bind+0x6a>
	if (!check_for_ipv4(modem_param.network.ip_address.value_string,
   1fc9e:	b2c1      	uxtb	r1, r0
   1fca0:	4828      	ldr	r0, [pc, #160]	; (1fd44 <handle_at_bind+0x134>)
   1fca2:	f017 feef 	bl	37a84 <check_for_ipv4>
   1fca6:	b940      	cbnz	r0, 1fcba <handle_at_bind+0xaa>
   1fca8:	4923      	ldr	r1, [pc, #140]	; (1fd38 <handle_at_bind+0x128>)
   1fcaa:	4b24      	ldr	r3, [pc, #144]	; (1fd3c <handle_at_bind+0x12c>)
		LOG_ERR("Invalid local address");
   1fcac:	4827      	ldr	r0, [pc, #156]	; (1fd4c <handle_at_bind+0x13c>)
   1fcae:	1ac9      	subs	r1, r1, r3
   1fcb0:	08c9      	lsrs	r1, r1, #3
   1fcb2:	0189      	lsls	r1, r1, #6
   1fcb4:	f041 0101 	orr.w	r1, r1, #1
   1fcb8:	e7ee      	b.n	1fc98 <handle_at_bind+0x88>
	return z_impl_zsock_inet_pton(family, src, dst);
   1fcba:	4922      	ldr	r1, [pc, #136]	; (1fd44 <handle_at_bind+0x134>)
   1fcbc:	4620      	mov	r0, r4
   1fcbe:	aa03      	add	r2, sp, #12
   1fcc0:	f019 f8a8 	bl	38e14 <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, modem_param.network.ip_address.value_string,
   1fcc4:	2801      	cmp	r0, #1
   1fcc6:	d00f      	beq.n	1fce8 <handle_at_bind+0xd8>
   1fcc8:	4a1c      	ldr	r2, [pc, #112]	; (1fd3c <handle_at_bind+0x12c>)
   1fcca:	4c1b      	ldr	r4, [pc, #108]	; (1fd38 <handle_at_bind+0x128>)
   1fccc:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Parse local IP address failed: %d", -errno);
   1fcce:	f019 fafa 	bl	392c6 <__errno>
   1fcd2:	08e4      	lsrs	r4, r4, #3
   1fcd4:	6801      	ldr	r1, [r0, #0]
   1fcd6:	01a4      	lsls	r4, r4, #6
   1fcd8:	f044 0401 	orr.w	r4, r4, #1
   1fcdc:	4622      	mov	r2, r4
   1fcde:	481c      	ldr	r0, [pc, #112]	; (1fd50 <handle_at_bind+0x140>)
   1fce0:	4249      	negs	r1, r1
   1fce2:	f018 fbfc 	bl	384de <log_1>
   1fce6:	e7a0      	b.n	1fc2a <handle_at_bind+0x1a>
	ret = bind(client.sock, (struct sockaddr *)&local,
   1fce8:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_bind(sock, addr, addrlen);
   1fcea:	2208      	movs	r2, #8
   1fcec:	eb0d 0102 	add.w	r1, sp, r2
   1fcf0:	f019 f800 	bl	38cf4 <z_impl_zsock_bind>
	if (ret) {
   1fcf4:	2800      	cmp	r0, #0
   1fcf6:	d094      	beq.n	1fc22 <handle_at_bind+0x12>
   1fcf8:	4a10      	ldr	r2, [pc, #64]	; (1fd3c <handle_at_bind+0x12c>)
   1fcfa:	4c0f      	ldr	r4, [pc, #60]	; (1fd38 <handle_at_bind+0x128>)
   1fcfc:	1aa4      	subs	r4, r4, r2
		LOG_ERR("bind() failed: %d", -errno);
   1fcfe:	f019 fae2 	bl	392c6 <__errno>
   1fd02:	08e4      	lsrs	r4, r4, #3
   1fd04:	6801      	ldr	r1, [r0, #0]
   1fd06:	01a4      	lsls	r4, r4, #6
   1fd08:	f044 0401 	orr.w	r4, r4, #1
   1fd0c:	4622      	mov	r2, r4
   1fd0e:	4249      	negs	r1, r1
   1fd10:	4810      	ldr	r0, [pc, #64]	; (1fd54 <handle_at_bind+0x144>)
   1fd12:	f018 fbe4 	bl	384de <log_1>
		do_socket_close(-errno);
   1fd16:	f019 fad6 	bl	392c6 <__errno>
   1fd1a:	6800      	ldr	r0, [r0, #0]
   1fd1c:	4240      	negs	r0, r0
   1fd1e:	f7ff f935 	bl	1ef8c <do_socket_close>
		return -errno;
   1fd22:	f019 fad0 	bl	392c6 <__errno>
   1fd26:	6800      	ldr	r0, [r0, #0]
   1fd28:	4240      	negs	r0, r0
		break;
   1fd2a:	e77a      	b.n	1fc22 <handle_at_bind+0x12>
   1fd2c:	20023470 	.word	0x20023470
   1fd30:	20023430 	.word	0x20023430
   1fd34:	20020900 	.word	0x20020900
   1fd38:	0003c3a4 	.word	0x0003c3a4
   1fd3c:	0003c2cc 	.word	0x0003c2cc
   1fd40:	0003d873 	.word	0x0003d873
   1fd44:	20020c12 	.word	0x20020c12
   1fd48:	0003d89a 	.word	0x0003d89a
   1fd4c:	0003d8b0 	.word	0x0003d8b0
   1fd50:	0003d8c6 	.word	0x0003d8c6
   1fd54:	0003d8e8 	.word	0x0003d8e8

0001fd58 <handle_at_socket>:
{
   1fd58:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cmd_type) {
   1fd5a:	2802      	cmp	r0, #2
{
   1fd5c:	4604      	mov	r4, r0
   1fd5e:	b08b      	sub	sp, #44	; 0x2c
	switch (cmd_type) {
   1fd60:	f000 8101 	beq.w	1ff66 <handle_at_socket+0x20e>
   1fd64:	2803      	cmp	r0, #3
   1fd66:	f000 811c 	beq.w	1ffa2 <handle_at_socket+0x24a>
   1fd6a:	2801      	cmp	r0, #1
   1fd6c:	d144      	bne.n	1fdf8 <handle_at_socket+0xa0>
		if (at_params_valid_count_get(&at_param_list) < 2) {
   1fd6e:	489b      	ldr	r0, [pc, #620]	; (1ffdc <handle_at_socket+0x284>)
   1fd70:	f01a fd71 	bl	3a856 <at_params_valid_count_get>
   1fd74:	2801      	cmp	r0, #1
   1fd76:	d93f      	bls.n	1fdf8 <handle_at_socket+0xa0>
		err = at_params_short_get(&at_param_list, 1, &op);
   1fd78:	4621      	mov	r1, r4
   1fd7a:	4898      	ldr	r0, [pc, #608]	; (1ffdc <handle_at_socket+0x284>)
   1fd7c:	f10d 021a 	add.w	r2, sp, #26
   1fd80:	f01a fd21 	bl	3a7c6 <at_params_short_get>
		if (err) {
   1fd84:	4604      	mov	r4, r0
   1fd86:	2800      	cmp	r0, #0
   1fd88:	f040 808f 	bne.w	1feaa <handle_at_socket+0x152>
		if (op == AT_SOCKET_OPEN) {
   1fd8c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1fd90:	2b01      	cmp	r3, #1
   1fd92:	f040 80d5 	bne.w	1ff40 <handle_at_socket+0x1e8>
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   1fd96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (at_params_valid_count_get(&at_param_list) < 4) {
   1fd9a:	4890      	ldr	r0, [pc, #576]	; (1ffdc <handle_at_socket+0x284>)
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   1fd9c:	9308      	str	r3, [sp, #32]
			if (at_params_valid_count_get(&at_param_list) < 4) {
   1fd9e:	f01a fd5a 	bl	3a856 <at_params_valid_count_get>
   1fda2:	2803      	cmp	r0, #3
   1fda4:	d928      	bls.n	1fdf8 <handle_at_socket+0xa0>
			err = at_params_short_get(&at_param_list, 2, &type);
   1fda6:	2102      	movs	r1, #2
   1fda8:	488c      	ldr	r0, [pc, #560]	; (1ffdc <handle_at_socket+0x284>)
   1fdaa:	f10d 021e 	add.w	r2, sp, #30
   1fdae:	f01a fd0a 	bl	3a7c6 <at_params_short_get>
			if (err) {
   1fdb2:	4604      	mov	r4, r0
   1fdb4:	2800      	cmp	r0, #0
   1fdb6:	d178      	bne.n	1feaa <handle_at_socket+0x152>
			err = at_params_short_get(&at_param_list, 3, &role);
   1fdb8:	2103      	movs	r1, #3
   1fdba:	4888      	ldr	r0, [pc, #544]	; (1ffdc <handle_at_socket+0x284>)
   1fdbc:	aa07      	add	r2, sp, #28
   1fdbe:	f01a fd02 	bl	3a7c6 <at_params_short_get>
			if (err) {
   1fdc2:	4604      	mov	r4, r0
   1fdc4:	2800      	cmp	r0, #0
   1fdc6:	d170      	bne.n	1feaa <handle_at_socket+0x152>
			if (at_params_valid_count_get(&at_param_list) > 4) {
   1fdc8:	4884      	ldr	r0, [pc, #528]	; (1ffdc <handle_at_socket+0x284>)
   1fdca:	f01a fd44 	bl	3a856 <at_params_valid_count_get>
   1fdce:	2804      	cmp	r0, #4
   1fdd0:	d904      	bls.n	1fddc <handle_at_socket+0x84>
				at_params_int_get(&at_param_list, 4, &sec_tag);
   1fdd2:	2104      	movs	r1, #4
   1fdd4:	4881      	ldr	r0, [pc, #516]	; (1ffdc <handle_at_socket+0x284>)
   1fdd6:	aa08      	add	r2, sp, #32
   1fdd8:	f01a fd07 	bl	3a7ea <at_params_int_get>
			if (client.sock > 0) {
   1fddc:	4d80      	ldr	r5, [pc, #512]	; (1ffe0 <handle_at_socket+0x288>)
   1fdde:	682b      	ldr	r3, [r5, #0]
   1fde0:	2b00      	cmp	r3, #0
   1fde2:	dd0c      	ble.n	1fdfe <handle_at_socket+0xa6>
   1fde4:	497f      	ldr	r1, [pc, #508]	; (1ffe4 <handle_at_socket+0x28c>)
   1fde6:	4b80      	ldr	r3, [pc, #512]	; (1ffe8 <handle_at_socket+0x290>)
				LOG_WRN("Socket is already opened");
   1fde8:	4880      	ldr	r0, [pc, #512]	; (1ffec <handle_at_socket+0x294>)
   1fdea:	1ac9      	subs	r1, r1, r3
   1fdec:	08c9      	lsrs	r1, r1, #3
   1fdee:	0189      	lsls	r1, r1, #6
   1fdf0:	f041 0102 	orr.w	r1, r1, #2
				LOG_WRN("Socket is not opened yet");
   1fdf4:	f018 fb64 	bl	384c0 <log_0>
			return -EINVAL;
   1fdf8:	f06f 0415 	mvn.w	r4, #21
   1fdfc:	e055      	b.n	1feaa <handle_at_socket+0x152>
				err = do_socket_open(type, role, sec_tag);
   1fdfe:	f89d 601e 	ldrb.w	r6, [sp, #30]
   1fe02:	9b08      	ldr	r3, [sp, #32]
	if (type == SOCK_STREAM) {
   1fe04:	2e01      	cmp	r6, #1
				err = do_socket_open(type, role, sec_tag);
   1fe06:	f89d 701c 	ldrb.w	r7, [sp, #28]
	client.sec_tag = sec_tag;
   1fe0a:	606b      	str	r3, [r5, #4]
	if (type == SOCK_STREAM) {
   1fe0c:	d12a      	bne.n	1fe64 <handle_at_socket+0x10c>
		if (sec_tag == INVALID_SEC_TAG) {
   1fe0e:	3301      	adds	r3, #1
   1fe10:	d11e      	bne.n	1fe50 <handle_at_socket+0xf8>
	return z_impl_zsock_socket(family, type, proto);
   1fe12:	2206      	movs	r2, #6
   1fe14:	4631      	mov	r1, r6
   1fe16:	4630      	mov	r0, r6
   1fe18:	f004 ffce 	bl	24db8 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_TCP;
   1fe1c:	2306      	movs	r3, #6
			client.sock = socket(AF_INET, SOCK_STREAM,
   1fe1e:	6028      	str	r0, [r5, #0]
	if (client.sock < 0) {
   1fe20:	6828      	ldr	r0, [r5, #0]
			client.ip_proto = IPPROTO_DTLS_1_2;
   1fe22:	612b      	str	r3, [r5, #16]
	if (client.sock < 0) {
   1fe24:	2800      	cmp	r0, #0
   1fe26:	da43      	bge.n	1feb0 <handle_at_socket+0x158>
   1fe28:	4a6f      	ldr	r2, [pc, #444]	; (1ffe8 <handle_at_socket+0x290>)
   1fe2a:	4c6e      	ldr	r4, [pc, #440]	; (1ffe4 <handle_at_socket+0x28c>)
   1fe2c:	1aa4      	subs	r4, r4, r2
   1fe2e:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("socket() failed: %d", -errno);
   1fe30:	f019 fa49 	bl	392c6 <__errno>
   1fe34:	01a4      	lsls	r4, r4, #6
   1fe36:	f044 0401 	orr.w	r4, r4, #1
   1fe3a:	4622      	mov	r2, r4
   1fe3c:	6801      	ldr	r1, [r0, #0]
   1fe3e:	486c      	ldr	r0, [pc, #432]	; (1fff0 <handle_at_socket+0x298>)
   1fe40:	4249      	negs	r1, r1
			LOG_ERR("set (d)tls tag list failed: %d", -errno);
   1fe42:	f018 fb4c 	bl	384de <log_1>
			ret = -errno;
   1fe46:	f019 fa3e 	bl	392c6 <__errno>
   1fe4a:	6804      	ldr	r4, [r0, #0]
   1fe4c:	4264      	negs	r4, r4
			goto error_exit;
   1fe4e:	e042      	b.n	1fed6 <handle_at_socket+0x17e>
   1fe50:	f44f 7281 	mov.w	r2, #258	; 0x102
   1fe54:	4631      	mov	r1, r6
   1fe56:	4630      	mov	r0, r6
   1fe58:	f004 ffae 	bl	24db8 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_TLS_1_2;
   1fe5c:	f44f 7381 	mov.w	r3, #258	; 0x102
			client.sock = socket(AF_INET, SOCK_STREAM,
   1fe60:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_TLS_1_2;
   1fe62:	e7dd      	b.n	1fe20 <handle_at_socket+0xc8>
	} else if (type == SOCK_DGRAM) {
   1fe64:	2e02      	cmp	r6, #2
   1fe66:	d113      	bne.n	1fe90 <handle_at_socket+0x138>
		if (sec_tag == INVALID_SEC_TAG) {
   1fe68:	3301      	adds	r3, #1
   1fe6a:	d107      	bne.n	1fe7c <handle_at_socket+0x124>
   1fe6c:	2211      	movs	r2, #17
   1fe6e:	4631      	mov	r1, r6
   1fe70:	2001      	movs	r0, #1
   1fe72:	f004 ffa1 	bl	24db8 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_UDP;
   1fe76:	2311      	movs	r3, #17
			client.sock = socket(AF_INET, SOCK_DGRAM,
   1fe78:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_UDP;
   1fe7a:	e7d1      	b.n	1fe20 <handle_at_socket+0xc8>
   1fe7c:	f240 1211 	movw	r2, #273	; 0x111
   1fe80:	4631      	mov	r1, r6
   1fe82:	2001      	movs	r0, #1
   1fe84:	f004 ff98 	bl	24db8 <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_DTLS_1_2;
   1fe88:	f240 1311 	movw	r3, #273	; 0x111
			client.sock = socket(AF_INET, SOCK_DGRAM,
   1fe8c:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_DTLS_1_2;
   1fe8e:	e7c7      	b.n	1fe20 <handle_at_socket+0xc8>
   1fe90:	4b55      	ldr	r3, [pc, #340]	; (1ffe8 <handle_at_socket+0x290>)
   1fe92:	4a54      	ldr	r2, [pc, #336]	; (1ffe4 <handle_at_socket+0x28c>)
		LOG_ERR("socket type %d not supported", type);
   1fe94:	4631      	mov	r1, r6
   1fe96:	1ad2      	subs	r2, r2, r3
   1fe98:	08d2      	lsrs	r2, r2, #3
   1fe9a:	0192      	lsls	r2, r2, #6
   1fe9c:	4855      	ldr	r0, [pc, #340]	; (1fff4 <handle_at_socket+0x29c>)
   1fe9e:	f042 0201 	orr.w	r2, r2, #1
   1fea2:	f018 fb1c 	bl	384de <log_1>
		return -ENOTSUP;
   1fea6:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   1feaa:	4620      	mov	r0, r4
   1feac:	b00b      	add	sp, #44	; 0x2c
   1feae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (client.sec_tag != INVALID_SEC_TAG) {
   1feb0:	686b      	ldr	r3, [r5, #4]
   1feb2:	1c5a      	adds	r2, r3, #1
   1feb4:	d02e      	beq.n	1ff14 <handle_at_socket+0x1bc>
		if (role == AT_SOCKET_ROLE_SERVER) {
   1feb6:	2f01      	cmp	r7, #1
		sec_tag_t sec_tag_list[1] = { client.sec_tag };
   1feb8:	9309      	str	r3, [sp, #36]	; 0x24
		if (role == AT_SOCKET_ROLE_SERVER) {
   1feba:	d114      	bne.n	1fee6 <handle_at_socket+0x18e>
			sprintf(rsp_buf,
   1febc:	494e      	ldr	r1, [pc, #312]	; (1fff8 <handle_at_socket+0x2a0>)
   1febe:	484f      	ldr	r0, [pc, #316]	; (1fffc <handle_at_socket+0x2a4>)
   1fec0:	f01b fbd6 	bl	3b670 <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   1fec4:	484d      	ldr	r0, [pc, #308]	; (1fffc <handle_at_socket+0x2a4>)
   1fec6:	f7fd f8d3 	bl	1d070 <strlen>
   1feca:	4601      	mov	r1, r0
   1fecc:	484b      	ldr	r0, [pc, #300]	; (1fffc <handle_at_socket+0x2a4>)
   1fece:	f7fe f98b 	bl	1e1e8 <rsp_send>
			ret = -ENOTSUP;
   1fed2:	f06f 0485 	mvn.w	r4, #133	; 0x85
	if (client.sock >= 0) {
   1fed6:	6828      	ldr	r0, [r5, #0]
   1fed8:	2800      	cmp	r0, #0
   1feda:	db01      	blt.n	1fee0 <handle_at_socket+0x188>
	return z_impl_zsock_close(sock);
   1fedc:	f018 fef3 	bl	38cc6 <z_impl_zsock_close>
	slm_at_tcpip_init();
   1fee0:	f7ff f846 	bl	1ef70 <slm_at_tcpip_init>
	return ret;
   1fee4:	e7e1      	b.n	1feaa <handle_at_socket+0x152>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1fee6:	2304      	movs	r3, #4
   1fee8:	2201      	movs	r2, #1
   1feea:	9300      	str	r3, [sp, #0]
   1feec:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1fef0:	ab09      	add	r3, sp, #36	; 0x24
   1fef2:	f018 ffb1 	bl	38e58 <z_impl_zsock_setsockopt>
		if (ret) {
   1fef6:	b168      	cbz	r0, 1ff14 <handle_at_socket+0x1bc>
   1fef8:	4a3b      	ldr	r2, [pc, #236]	; (1ffe8 <handle_at_socket+0x290>)
   1fefa:	4c3a      	ldr	r4, [pc, #232]	; (1ffe4 <handle_at_socket+0x28c>)
   1fefc:	1aa4      	subs	r4, r4, r2
			LOG_ERR("set (d)tls tag list failed: %d", -errno);
   1fefe:	f019 f9e2 	bl	392c6 <__errno>
   1ff02:	08e4      	lsrs	r4, r4, #3
   1ff04:	6801      	ldr	r1, [r0, #0]
   1ff06:	01a4      	lsls	r4, r4, #6
   1ff08:	f044 0401 	orr.w	r4, r4, #1
   1ff0c:	4622      	mov	r2, r4
   1ff0e:	483c      	ldr	r0, [pc, #240]	; (20000 <handle_at_socket+0x2a8>)
   1ff10:	4249      	negs	r1, r1
   1ff12:	e796      	b.n	1fe42 <handle_at_socket+0xea>
	sprintf(rsp_buf, "#XSOCKET: %d, %d, %d, %d\r\n", client.sock,
   1ff14:	692b      	ldr	r3, [r5, #16]
   1ff16:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ff1a:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1ff1e:	682b      	ldr	r3, [r5, #0]
   1ff20:	2100      	movs	r1, #0
   1ff22:	9300      	str	r3, [sp, #0]
   1ff24:	4835      	ldr	r0, [pc, #212]	; (1fffc <handle_at_socket+0x2a4>)
   1ff26:	4b37      	ldr	r3, [pc, #220]	; (20004 <handle_at_socket+0x2ac>)
   1ff28:	9601      	str	r6, [sp, #4]
	client.role = role;
   1ff2a:	60af      	str	r7, [r5, #8]
	sprintf(rsp_buf, "#XSOCKET: %d, %d, %d, %d\r\n", client.sock,
   1ff2c:	f01b fb79 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ff30:	4832      	ldr	r0, [pc, #200]	; (1fffc <handle_at_socket+0x2a4>)
   1ff32:	f7fd f89d 	bl	1d070 <strlen>
   1ff36:	4601      	mov	r1, r0
   1ff38:	4830      	ldr	r0, [pc, #192]	; (1fffc <handle_at_socket+0x2a4>)
   1ff3a:	f7fe f955 	bl	1e1e8 <rsp_send>
		break;
   1ff3e:	e7b4      	b.n	1feaa <handle_at_socket+0x152>
		} else if (op == AT_SOCKET_CLOSE) {
   1ff40:	2b00      	cmp	r3, #0
   1ff42:	d1b2      	bne.n	1feaa <handle_at_socket+0x152>
			if (client.sock < 0) {
   1ff44:	4b26      	ldr	r3, [pc, #152]	; (1ffe0 <handle_at_socket+0x288>)
   1ff46:	681b      	ldr	r3, [r3, #0]
   1ff48:	2b00      	cmp	r3, #0
   1ff4a:	da08      	bge.n	1ff5e <handle_at_socket+0x206>
   1ff4c:	4925      	ldr	r1, [pc, #148]	; (1ffe4 <handle_at_socket+0x28c>)
   1ff4e:	4b26      	ldr	r3, [pc, #152]	; (1ffe8 <handle_at_socket+0x290>)
				LOG_WRN("Socket is not opened yet");
   1ff50:	482d      	ldr	r0, [pc, #180]	; (20008 <handle_at_socket+0x2b0>)
   1ff52:	1ac9      	subs	r1, r1, r3
   1ff54:	08c9      	lsrs	r1, r1, #3
   1ff56:	0189      	lsls	r1, r1, #6
   1ff58:	f041 0102 	orr.w	r1, r1, #2
   1ff5c:	e74a      	b.n	1fdf4 <handle_at_socket+0x9c>
				err = do_socket_close(0);
   1ff5e:	f7ff f815 	bl	1ef8c <do_socket_close>
   1ff62:	4604      	mov	r4, r0
   1ff64:	e7a1      	b.n	1feaa <handle_at_socket+0x152>
		if (client.sock != INVALID_SOCKET) {
   1ff66:	4b1e      	ldr	r3, [pc, #120]	; (1ffe0 <handle_at_socket+0x288>)
   1ff68:	681a      	ldr	r2, [r3, #0]
   1ff6a:	1c51      	adds	r1, r2, #1
   1ff6c:	d014      	beq.n	1ff98 <handle_at_socket+0x240>
			sprintf(rsp_buf, "#XSOCKET: %d, %d, %d\r\n",
   1ff6e:	6899      	ldr	r1, [r3, #8]
   1ff70:	4822      	ldr	r0, [pc, #136]	; (1fffc <handle_at_socket+0x2a4>)
   1ff72:	9102      	str	r1, [sp, #8]
   1ff74:	691b      	ldr	r3, [r3, #16]
   1ff76:	2100      	movs	r1, #0
   1ff78:	e9cd 2300 	strd	r2, r3, [sp]
   1ff7c:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ff80:	4b22      	ldr	r3, [pc, #136]	; (2000c <handle_at_socket+0x2b4>)
   1ff82:	f01b fb4e 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ff86:	481d      	ldr	r0, [pc, #116]	; (1fffc <handle_at_socket+0x2a4>)
   1ff88:	f7fd f872 	bl	1d070 <strlen>
   1ff8c:	4601      	mov	r1, r0
   1ff8e:	481b      	ldr	r0, [pc, #108]	; (1fffc <handle_at_socket+0x2a4>)
   1ff90:	f7fe f92a 	bl	1e1e8 <rsp_send>
		err = 0;
   1ff94:	2400      	movs	r4, #0
		break;
   1ff96:	e788      	b.n	1feaa <handle_at_socket+0x152>
			sprintf(rsp_buf, "#XSOCKET: 0\r\n");
   1ff98:	491d      	ldr	r1, [pc, #116]	; (20010 <handle_at_socket+0x2b8>)
   1ff9a:	4818      	ldr	r0, [pc, #96]	; (1fffc <handle_at_socket+0x2a4>)
   1ff9c:	f01b fb68 	bl	3b670 <strcpy>
   1ffa0:	e7f1      	b.n	1ff86 <handle_at_socket+0x22e>
		sprintf(rsp_buf, "#XSOCKET: (%d, %d), (%d, %d), (%d, %d)",
   1ffa2:	2400      	movs	r4, #0
   1ffa4:	2301      	movs	r3, #1
   1ffa6:	2202      	movs	r2, #2
   1ffa8:	4621      	mov	r1, r4
   1ffaa:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1ffae:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1ffb2:	f640 228c 	movw	r2, #2700	; 0xa8c
   1ffb6:	e9cd 4300 	strd	r4, r3, [sp]
   1ffba:	4810      	ldr	r0, [pc, #64]	; (1fffc <handle_at_socket+0x2a4>)
   1ffbc:	4b15      	ldr	r3, [pc, #84]	; (20014 <handle_at_socket+0x2bc>)
   1ffbe:	f01b fb30 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1ffc2:	480e      	ldr	r0, [pc, #56]	; (1fffc <handle_at_socket+0x2a4>)
   1ffc4:	f7fd f854 	bl	1d070 <strlen>
   1ffc8:	4601      	mov	r1, r0
   1ffca:	480c      	ldr	r0, [pc, #48]	; (1fffc <handle_at_socket+0x2a4>)
   1ffcc:	f7fe f90c 	bl	1e1e8 <rsp_send>
		sprintf(rsp_buf, ", <sec-tag>\r\n");
   1ffd0:	4911      	ldr	r1, [pc, #68]	; (20018 <handle_at_socket+0x2c0>)
   1ffd2:	480a      	ldr	r0, [pc, #40]	; (1fffc <handle_at_socket+0x2a4>)
   1ffd4:	f01b fb4c 	bl	3b670 <strcpy>
   1ffd8:	e7aa      	b.n	1ff30 <handle_at_socket+0x1d8>
   1ffda:	bf00      	nop
   1ffdc:	20023430 	.word	0x20023430
   1ffe0:	20023470 	.word	0x20023470
   1ffe4:	0003c3a4 	.word	0x0003c3a4
   1ffe8:	0003c2cc 	.word	0x0003c2cc
   1ffec:	0003d8fa 	.word	0x0003d8fa
   1fff0:	0003d930 	.word	0x0003d930
   1fff4:	0003d913 	.word	0x0003d913
   1fff8:	0003d944 	.word	0x0003d944
   1fffc:	20028950 	.word	0x20028950
   20000:	0003d96c 	.word	0x0003d96c
   20004:	0003d98b 	.word	0x0003d98b
   20008:	0003d9a6 	.word	0x0003d9a6
   2000c:	0003d9bf 	.word	0x0003d9bf
   20010:	0003d9d6 	.word	0x0003d9d6
   20014:	0003d9e4 	.word	0x0003d9e4
   20018:	0003da0b 	.word	0x0003da0b

0002001c <handle_at_tcp_recv>:
 *  AT#XTCPRECV[=<length>]
 *  AT#XTCPRECV? READ command not supported
 *  AT#XTCPRECV=? TEST command not supported
 */
static int handle_at_tcp_recv(enum at_cmd_type cmd_type)
{
   2001c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err = -EINVAL;
	uint16_t length = 0;
   2001e:	2300      	movs	r3, #0

	switch (cmd_type) {
   20020:	2801      	cmp	r0, #1
{
   20022:	4604      	mov	r4, r0
	uint16_t length = 0;
   20024:	f8ad 300e 	strh.w	r3, [sp, #14]
	switch (cmd_type) {
   20028:	d13a      	bne.n	200a0 <handle_at_tcp_recv+0x84>
	case AT_CMD_TYPE_SET_COMMAND:
	{
		uint32_t sz_send = 0;

		if (at_params_valid_count_get(&at_param_list) > 1) {
   2002a:	481f      	ldr	r0, [pc, #124]	; (200a8 <handle_at_tcp_recv+0x8c>)
   2002c:	f01a fc13 	bl	3a856 <at_params_valid_count_get>
   20030:	2801      	cmp	r0, #1
   20032:	d816      	bhi.n	20062 <handle_at_tcp_recv+0x46>
 *
 * @return 1 if the ring buffer is empty, or 0 if not.
 */
static inline int ring_buf_is_empty(struct ring_buf *buf)
{
	return (buf->head == buf->tail);
   20034:	481d      	ldr	r0, [pc, #116]	; (200ac <handle_at_tcp_recv+0x90>)
			err = at_params_short_get(&at_param_list, 1, &length);
			if (err) {
				return err;
			}
		}
		if (ring_buf_is_empty(&data_buf) == 0) {
   20036:	e9d0 2300 	ldrd	r2, r3, [r0]
   2003a:	429a      	cmp	r2, r3
   2003c:	d11b      	bne.n	20076 <handle_at_tcp_recv+0x5a>
		uint32_t sz_send = 0;
   2003e:	2400      	movs	r4, #0
				sz_send = length;
			}
			rsp_send(rsp_buf, sz_send);
			rsp_send("\r\n", 2);
		}
		sprintf(rsp_buf, "#XTCPRECV: %d\r\n", sz_send);
   20040:	f640 228c 	movw	r2, #2700	; 0xa8c
   20044:	2100      	movs	r1, #0
   20046:	4b1a      	ldr	r3, [pc, #104]	; (200b0 <handle_at_tcp_recv+0x94>)
   20048:	481a      	ldr	r0, [pc, #104]	; (200b4 <handle_at_tcp_recv+0x98>)
   2004a:	9400      	str	r4, [sp, #0]
   2004c:	f01b fae9 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20050:	4818      	ldr	r0, [pc, #96]	; (200b4 <handle_at_tcp_recv+0x98>)
   20052:	f7fd f80d 	bl	1d070 <strlen>
   20056:	4601      	mov	r1, r0
   20058:	4816      	ldr	r0, [pc, #88]	; (200b4 <handle_at_tcp_recv+0x98>)
   2005a:	f7fe f8c5 	bl	1e1e8 <rsp_send>
		err = 0;
   2005e:	2000      	movs	r0, #0
	} break;
   20060:	e007      	b.n	20072 <handle_at_tcp_recv+0x56>
			err = at_params_short_get(&at_param_list, 1, &length);
   20062:	4621      	mov	r1, r4
   20064:	4810      	ldr	r0, [pc, #64]	; (200a8 <handle_at_tcp_recv+0x8c>)
   20066:	f10d 020e 	add.w	r2, sp, #14
   2006a:	f01a fbac 	bl	3a7c6 <at_params_short_get>
			if (err) {
   2006e:	2800      	cmp	r0, #0
   20070:	d0e0      	beq.n	20034 <handle_at_tcp_recv+0x18>
	default:
		break;
	}

	return err;
}
   20072:	b004      	add	sp, #16
   20074:	bd10      	pop	{r4, pc}
			sz_send = ring_buf_get(&data_buf, rsp_buf,
   20076:	f640 228c 	movw	r2, #2700	; 0xa8c
   2007a:	490e      	ldr	r1, [pc, #56]	; (200b4 <handle_at_tcp_recv+0x98>)
   2007c:	f018 f9db 	bl	38436 <ring_buf_get>
			if (length > 0 && sz_send > length) {
   20080:	f8bd 300e 	ldrh.w	r3, [sp, #14]
			sz_send = ring_buf_get(&data_buf, rsp_buf,
   20084:	4604      	mov	r4, r0
			if (length > 0 && sz_send > length) {
   20086:	b113      	cbz	r3, 2008e <handle_at_tcp_recv+0x72>
   20088:	4298      	cmp	r0, r3
   2008a:	bf28      	it	cs
   2008c:	461c      	movcs	r4, r3
			rsp_send(rsp_buf, sz_send);
   2008e:	4621      	mov	r1, r4
   20090:	4808      	ldr	r0, [pc, #32]	; (200b4 <handle_at_tcp_recv+0x98>)
   20092:	f7fe f8a9 	bl	1e1e8 <rsp_send>
			rsp_send("\r\n", 2);
   20096:	2102      	movs	r1, #2
   20098:	4807      	ldr	r0, [pc, #28]	; (200b8 <handle_at_tcp_recv+0x9c>)
   2009a:	f7fe f8a5 	bl	1e1e8 <rsp_send>
   2009e:	e7cf      	b.n	20040 <handle_at_tcp_recv+0x24>
	int err = -EINVAL;
   200a0:	f06f 0015 	mvn.w	r0, #21
   200a4:	e7e5      	b.n	20072 <handle_at_tcp_recv+0x56>
   200a6:	bf00      	nop
   200a8:	20023430 	.word	0x20023430
   200ac:	200200c4 	.word	0x200200c4
   200b0:	0003da9d 	.word	0x0003da9d
   200b4:	20028950 	.word	0x20028950
   200b8:	00040191 	.word	0x00040191

000200bc <slm_at_tcp_proxy_parse>:

/**@brief API to handle TCP proxy AT commands
 */
int slm_at_tcp_proxy_parse(const char *at_cmd, uint16_t length)
{
   200bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   200c0:	4e41      	ldr	r6, [pc, #260]	; (201c8 <slm_at_tcp_proxy_parse+0x10c>)
   200c2:	4605      	mov	r5, r0
   200c4:	460f      	mov	r7, r1
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   200c6:	2400      	movs	r4, #0
   200c8:	46b0      	mov	r8, r6
		if (slm_util_cmd_casecmp(at_cmd,
   200ca:	4628      	mov	r0, r5
   200cc:	6871      	ldr	r1, [r6, #4]
   200ce:	f7fd ff25 	bl	1df1c <slm_util_cmd_casecmp>
   200d2:	2800      	cmp	r0, #0
   200d4:	d035      	beq.n	20142 <slm_at_tcp_proxy_parse+0x86>
			tcp_proxy_at_list[i].string)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
   200d6:	2100      	movs	r1, #0
   200d8:	4628      	mov	r0, r5
   200da:	4a3c      	ldr	r2, [pc, #240]	; (201cc <slm_at_tcp_proxy_parse+0x110>)
   200dc:	f01a fa73 	bl	3a5c6 <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
   200e0:	4601      	mov	r1, r0
   200e2:	b170      	cbz	r0, 20102 <slm_at_tcp_proxy_parse+0x46>
   200e4:	4a3a      	ldr	r2, [pc, #232]	; (201d0 <slm_at_tcp_proxy_parse+0x114>)
   200e6:	4b3b      	ldr	r3, [pc, #236]	; (201d4 <slm_at_tcp_proxy_parse+0x118>)
				LOG_ERR("Failed to parse AT command %d", ret);
   200e8:	483b      	ldr	r0, [pc, #236]	; (201d8 <slm_at_tcp_proxy_parse+0x11c>)
   200ea:	1ad2      	subs	r2, r2, r3
   200ec:	08d2      	lsrs	r2, r2, #3
   200ee:	0192      	lsls	r2, r2, #6
   200f0:	f042 0201 	orr.w	r2, r2, #1
   200f4:	f018 f9f3 	bl	384de <log_1>
		return -EINVAL;
   200f8:	f06f 0015 	mvn.w	r0, #21
	if (ret == -ENOENT && proxy.datamode) {
		ret = do_tcp_send_datamode(at_cmd, length);
	}

	return ret;
}
   200fc:	b003      	add	sp, #12
   200fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			type = at_parser_cmd_type_get(at_cmd);
   20102:	4628      	mov	r0, r5
   20104:	f01a fa62 	bl	3a5cc <at_parser_cmd_type_get>
			ret = tcp_proxy_at_list[i].handler(type);
   20108:	230c      	movs	r3, #12
   2010a:	fb03 8404 	mla	r4, r3, r4, r8
   2010e:	68a3      	ldr	r3, [r4, #8]
   20110:	4798      	blx	r3
	if (ret == -ENOENT && proxy.datamode) {
   20112:	1c83      	adds	r3, r0, #2
   20114:	d1f2      	bne.n	200fc <slm_at_tcp_proxy_parse+0x40>
   20116:	4e31      	ldr	r6, [pc, #196]	; (201dc <slm_at_tcp_proxy_parse+0x120>)
   20118:	7c33      	ldrb	r3, [r6, #16]
   2011a:	2b00      	cmp	r3, #0
   2011c:	d051      	beq.n	201c2 <slm_at_tcp_proxy_parse+0x106>
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   2011e:	68f3      	ldr	r3, [r6, #12]
   20120:	b9ab      	cbnz	r3, 2014e <slm_at_tcp_proxy_parse+0x92>
	    proxy.sock != INVALID_SOCKET) {
   20122:	f8d6 8000 	ldr.w	r8, [r6]
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   20126:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2012a:	d11a      	bne.n	20162 <slm_at_tcp_proxy_parse+0xa6>
   2012c:	4b29      	ldr	r3, [pc, #164]	; (201d4 <slm_at_tcp_proxy_parse+0x118>)
   2012e:	4928      	ldr	r1, [pc, #160]	; (201d0 <slm_at_tcp_proxy_parse+0x114>)
		LOG_ERR("Not connected yet");
   20130:	482b      	ldr	r0, [pc, #172]	; (201e0 <slm_at_tcp_proxy_parse+0x124>)
   20132:	1ac9      	subs	r1, r1, r3
   20134:	08c9      	lsrs	r1, r1, #3
   20136:	0189      	lsls	r1, r1, #6
   20138:	f041 0101 	orr.w	r1, r1, #1
   2013c:	f018 f9c0 	bl	384c0 <log_0>
   20140:	e7da      	b.n	200f8 <slm_at_tcp_proxy_parse+0x3c>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   20142:	3401      	adds	r4, #1
   20144:	2c04      	cmp	r4, #4
   20146:	f106 060c 	add.w	r6, r6, #12
   2014a:	d1be      	bne.n	200ca <slm_at_tcp_proxy_parse+0xe>
   2014c:	e7e3      	b.n	20116 <slm_at_tcp_proxy_parse+0x5a>
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   2014e:	2b01      	cmp	r3, #1
   20150:	d1ec      	bne.n	2012c <slm_at_tcp_proxy_parse+0x70>
		   proxy.sock_peer != INVALID_SOCKET) {
   20152:	f8d6 8008 	ldr.w	r8, [r6, #8]
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   20156:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2015a:	d0e7      	beq.n	2012c <slm_at_tcp_proxy_parse+0x70>
	z_impl_k_timer_stop(timer);
   2015c:	4821      	ldr	r0, [pc, #132]	; (201e4 <slm_at_tcp_proxy_parse+0x128>)
   2015e:	f01a ff5f 	bl	3b020 <z_impl_k_timer_stop>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   20162:	2400      	movs	r4, #0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   20164:	46a1      	mov	r9, r4
   20166:	e000      	b.n	2016a <slm_at_tcp_proxy_parse+0xae>
		offset += ret;
   20168:	4404      	add	r4, r0
	while (offset < datalen) {
   2016a:	42bc      	cmp	r4, r7
   2016c:	d21a      	bcs.n	201a4 <slm_at_tcp_proxy_parse+0xe8>
   2016e:	2300      	movs	r3, #0
   20170:	4640      	mov	r0, r8
   20172:	e9cd 9900 	strd	r9, r9, [sp]
   20176:	1b3a      	subs	r2, r7, r4
   20178:	1929      	adds	r1, r5, r4
   2017a:	f018 fe11 	bl	38da0 <z_impl_zsock_sendto>
		if (ret < 0) {
   2017e:	2800      	cmp	r0, #0
   20180:	daf2      	bge.n	20168 <slm_at_tcp_proxy_parse+0xac>
   20182:	4a14      	ldr	r2, [pc, #80]	; (201d4 <slm_at_tcp_proxy_parse+0x118>)
   20184:	4d12      	ldr	r5, [pc, #72]	; (201d0 <slm_at_tcp_proxy_parse+0x114>)
   20186:	1aad      	subs	r5, r5, r2
			LOG_ERR("send() failed: %d", -errno);
   20188:	f019 f89d 	bl	392c6 <__errno>
   2018c:	08ed      	lsrs	r5, r5, #3
   2018e:	6801      	ldr	r1, [r0, #0]
   20190:	01ad      	lsls	r5, r5, #6
   20192:	f045 0501 	orr.w	r5, r5, #1
   20196:	462a      	mov	r2, r5
   20198:	4813      	ldr	r0, [pc, #76]	; (201e8 <slm_at_tcp_proxy_parse+0x12c>)
   2019a:	4249      	negs	r1, r1
   2019c:	f018 f99f 	bl	384de <log_1>
			ret = -errno;
   201a0:	f019 f891 	bl	392c6 <__errno>
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   201a4:	68f3      	ldr	r3, [r6, #12]
   201a6:	2b01      	cmp	r3, #1
   201a8:	d109      	bne.n	201be <slm_at_tcp_proxy_parse+0x102>
	z_impl_k_timer_start(timer, duration, period);
   201aa:	2200      	movs	r2, #0
   201ac:	2300      	movs	r3, #0
   201ae:	480d      	ldr	r0, [pc, #52]	; (201e4 <slm_at_tcp_proxy_parse+0x128>)
   201b0:	e9cd 2300 	strd	r2, r3, [sp]
   201b4:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   201b8:	2300      	movs	r3, #0
   201ba:	f016 fbd9 	bl	36970 <z_impl_k_timer_start>
	return offset;
   201be:	4620      	mov	r0, r4
   201c0:	e79c      	b.n	200fc <slm_at_tcp_proxy_parse+0x40>
   201c2:	f06f 0001 	mvn.w	r0, #1
   201c6:	e799      	b.n	200fc <slm_at_tcp_proxy_parse+0x40>
   201c8:	0003c5ac 	.word	0x0003c5ac
   201cc:	20023430 	.word	0x20023430
   201d0:	0003c39c 	.word	0x0003c39c
   201d4:	0003c2cc 	.word	0x0003c2cc
   201d8:	0003d35e 	.word	0x0003d35e
   201dc:	20023490 	.word	0x20023490
   201e0:	0003d748 	.word	0x0003d748
   201e4:	20020750 	.word	0x20020750
   201e8:	0003d75a 	.word	0x0003d75a

000201ec <slm_at_tcp_proxy_clac>:

/**@brief API to list TCP proxy AT commands
 */
void slm_at_tcp_proxy_clac(void)
{
   201ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   201ee:	2400      	movs	r4, #0
   201f0:	4d0c      	ldr	r5, [pc, #48]	; (20224 <slm_at_tcp_proxy_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", tcp_proxy_at_list[i].string);
   201f2:	4f0d      	ldr	r7, [pc, #52]	; (20228 <slm_at_tcp_proxy_clac+0x3c>)
   201f4:	4e0d      	ldr	r6, [pc, #52]	; (2022c <slm_at_tcp_proxy_clac+0x40>)
   201f6:	686b      	ldr	r3, [r5, #4]
   201f8:	f640 228c 	movw	r2, #2700	; 0xa8c
   201fc:	2100      	movs	r1, #0
   201fe:	9300      	str	r3, [sp, #0]
   20200:	4630      	mov	r0, r6
   20202:	463b      	mov	r3, r7
   20204:	f01b fa0d 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20208:	4630      	mov	r0, r6
   2020a:	f7fc ff31 	bl	1d070 <strlen>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   2020e:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
   20210:	4601      	mov	r1, r0
   20212:	4630      	mov	r0, r6
   20214:	f7fd ffe8 	bl	1e1e8 <rsp_send>
	for (int i = 0; i < AT_TCP_PROXY_MAX; i++) {
   20218:	2c04      	cmp	r4, #4
   2021a:	f105 050c 	add.w	r5, r5, #12
   2021e:	d1ea      	bne.n	201f6 <slm_at_tcp_proxy_clac+0xa>
	}
}
   20220:	b003      	add	sp, #12
   20222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20224:	0003c5ac 	.word	0x0003c5ac
   20228:	0003d557 	.word	0x0003d557
   2022c:	20028950 	.word	0x20028950

00020230 <slm_at_tcp_proxy_init>:

/**@brief API to initialize TCP proxy AT commands handler
 */
int slm_at_tcp_proxy_init(void)
{
	proxy.sock = INVALID_SOCKET;
   20230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	proxy.sock_peer = INVALID_SOCKET;
	proxy.role = INVALID_ROLE;
	proxy.datamode = false;
   20234:	2000      	movs	r0, #0
	proxy.sock = INVALID_SOCKET;
   20236:	4b03      	ldr	r3, [pc, #12]	; (20244 <slm_at_tcp_proxy_init+0x14>)
	proxy.role = INVALID_ROLE;
   20238:	e9c3 2202 	strd	r2, r2, [r3, #8]
	proxy.sock = INVALID_SOCKET;
   2023c:	601a      	str	r2, [r3, #0]
	proxy.datamode = false;
   2023e:	7418      	strb	r0, [r3, #16]

	return 0;
}
   20240:	4770      	bx	lr
   20242:	bf00      	nop
   20244:	20023490 	.word	0x20023490

00020248 <do_tcp_client_disconnect>:
{
   20248:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (proxy.sock > 0) {
   2024a:	4c1e      	ldr	r4, [pc, #120]	; (202c4 <do_tcp_client_disconnect+0x7c>)
{
   2024c:	4605      	mov	r5, r0
	if (proxy.sock > 0) {
   2024e:	6823      	ldr	r3, [r4, #0]
   20250:	2b00      	cmp	r3, #0
   20252:	dd35      	ble.n	202c0 <do_tcp_client_disconnect+0x78>
		k_thread_abort(tcp_thread_id);
   20254:	4b1c      	ldr	r3, [pc, #112]	; (202c8 <do_tcp_client_disconnect+0x80>)
   20256:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   20258:	f006 f8ec 	bl	26434 <z_impl_k_thread_abort>
		ret = close(proxy.sock);
   2025c:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   2025e:	f018 fd32 	bl	38cc6 <z_impl_zsock_close>
		if (ret < 0) {
   20262:	1e04      	subs	r4, r0, #0
   20264:	da12      	bge.n	2028c <do_tcp_client_disconnect+0x44>
   20266:	4a19      	ldr	r2, [pc, #100]	; (202cc <do_tcp_client_disconnect+0x84>)
   20268:	4c19      	ldr	r4, [pc, #100]	; (202d0 <do_tcp_client_disconnect+0x88>)
   2026a:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   2026c:	f019 f82b 	bl	392c6 <__errno>
   20270:	08e4      	lsrs	r4, r4, #3
   20272:	6801      	ldr	r1, [r0, #0]
   20274:	01a4      	lsls	r4, r4, #6
   20276:	f044 0402 	orr.w	r4, r4, #2
   2027a:	4622      	mov	r2, r4
   2027c:	4815      	ldr	r0, [pc, #84]	; (202d4 <do_tcp_client_disconnect+0x8c>)
   2027e:	4249      	negs	r1, r1
   20280:	f018 f92d 	bl	384de <log_1>
			ret = -errno;
   20284:	f019 f81f 	bl	392c6 <__errno>
   20288:	6804      	ldr	r4, [r0, #0]
   2028a:	4264      	negs	r4, r4
		(void)slm_at_tcp_proxy_init();
   2028c:	f7ff ffd0 	bl	20230 <slm_at_tcp_proxy_init>
		if (error) {
   20290:	b18d      	cbz	r5, 202b6 <do_tcp_client_disconnect+0x6e>
			sprintf(rsp_buf, "#XTCPCLI: %d disconnected\r\n",
   20292:	f640 228c 	movw	r2, #2700	; 0xa8c
   20296:	2100      	movs	r1, #0
   20298:	4b0f      	ldr	r3, [pc, #60]	; (202d8 <do_tcp_client_disconnect+0x90>)
   2029a:	4810      	ldr	r0, [pc, #64]	; (202dc <do_tcp_client_disconnect+0x94>)
   2029c:	9500      	str	r5, [sp, #0]
   2029e:	f01b f9c0 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   202a2:	480e      	ldr	r0, [pc, #56]	; (202dc <do_tcp_client_disconnect+0x94>)
   202a4:	f7fc fee4 	bl	1d070 <strlen>
   202a8:	4601      	mov	r1, r0
   202aa:	480c      	ldr	r0, [pc, #48]	; (202dc <do_tcp_client_disconnect+0x94>)
   202ac:	f7fd ff9c 	bl	1e1e8 <rsp_send>
}
   202b0:	4620      	mov	r0, r4
   202b2:	b003      	add	sp, #12
   202b4:	bd30      	pop	{r4, r5, pc}
			sprintf(rsp_buf, "#XTCPCLI: disconnected\r\n");
   202b6:	490a      	ldr	r1, [pc, #40]	; (202e0 <do_tcp_client_disconnect+0x98>)
   202b8:	4808      	ldr	r0, [pc, #32]	; (202dc <do_tcp_client_disconnect+0x94>)
   202ba:	f01b f9d9 	bl	3b670 <strcpy>
   202be:	e7f0      	b.n	202a2 <do_tcp_client_disconnect+0x5a>
	int ret = 0;
   202c0:	2400      	movs	r4, #0
	return ret;
   202c2:	e7f5      	b.n	202b0 <do_tcp_client_disconnect+0x68>
   202c4:	20023490 	.word	0x20023490
   202c8:	200234ac 	.word	0x200234ac
   202cc:	0003c2cc 	.word	0x0003c2cc
   202d0:	0003c39c 	.word	0x0003c39c
   202d4:	0003d641 	.word	0x0003d641
   202d8:	0003daad 	.word	0x0003daad
   202dc:	20028950 	.word	0x20028950
   202e0:	0003dac9 	.word	0x0003dac9

000202e4 <handle_at_tcp_client>:
{
   202e4:	b570      	push	{r4, r5, r6, lr}
   202e6:	4604      	mov	r4, r0
   202e8:	b0c2      	sub	sp, #264	; 0x108
	int param_count = at_params_valid_count_get(&at_param_list);
   202ea:	48ab      	ldr	r0, [pc, #684]	; (20598 <handle_at_tcp_client+0x2b4>)
   202ec:	f01a fab3 	bl	3a856 <at_params_valid_count_get>
	switch (cmd_type) {
   202f0:	2c02      	cmp	r4, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   202f2:	4606      	mov	r6, r0
	switch (cmd_type) {
   202f4:	f000 8174 	beq.w	205e0 <handle_at_tcp_client+0x2fc>
   202f8:	2c03      	cmp	r4, #3
   202fa:	f000 8194 	beq.w	20626 <handle_at_tcp_client+0x342>
   202fe:	2c01      	cmp	r4, #1
   20300:	f040 80cf 	bne.w	204a2 <handle_at_tcp_client+0x1be>
		if (param_count < 2) {
   20304:	2801      	cmp	r0, #1
   20306:	f340 80cc 	ble.w	204a2 <handle_at_tcp_client+0x1be>
		err = at_params_short_get(&at_param_list, 1, &op);
   2030a:	4621      	mov	r1, r4
   2030c:	48a2      	ldr	r0, [pc, #648]	; (20598 <handle_at_tcp_client+0x2b4>)
   2030e:	aa0b      	add	r2, sp, #44	; 0x2c
   20310:	f01a fa59 	bl	3a7c6 <at_params_short_get>
		if (err) {
   20314:	4604      	mov	r4, r0
   20316:	2800      	cmp	r0, #0
   20318:	d16a      	bne.n	203f0 <handle_at_tcp_client+0x10c>
		if (op == AT_CLIENT_CONNECT ||
   2031a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   2031e:	1e5a      	subs	r2, r3, #1
   20320:	2a01      	cmp	r2, #1
   20322:	f200 8123 	bhi.w	2056c <handle_at_tcp_client+0x288>
			int size = TCPIP_MAX_URL;
   20326:	2380      	movs	r3, #128	; 0x80
   20328:	930c      	str	r3, [sp, #48]	; 0x30
			proxy.sec_tag = INVALID_SEC_TAG;
   2032a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2032e:	4d9b      	ldr	r5, [pc, #620]	; (2059c <handle_at_tcp_client+0x2b8>)
			if (param_count < 4) {
   20330:	2e03      	cmp	r6, #3
			proxy.sec_tag = INVALID_SEC_TAG;
   20332:	606b      	str	r3, [r5, #4]
			if (param_count < 4) {
   20334:	f340 80b5 	ble.w	204a2 <handle_at_tcp_client+0x1be>
			err = at_params_string_get(&at_param_list,
   20338:	2102      	movs	r1, #2
   2033a:	4897      	ldr	r0, [pc, #604]	; (20598 <handle_at_tcp_client+0x2b4>)
   2033c:	ab0c      	add	r3, sp, #48	; 0x30
   2033e:	aa22      	add	r2, sp, #136	; 0x88
   20340:	f01a fa66 	bl	3a810 <at_params_string_get>
			if (err) {
   20344:	4604      	mov	r4, r0
   20346:	2800      	cmp	r0, #0
   20348:	d152      	bne.n	203f0 <handle_at_tcp_client+0x10c>
			url[size] = '\0';
   2034a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2034c:	aa42      	add	r2, sp, #264	; 0x108
   2034e:	4413      	add	r3, r2
   20350:	f803 0c80 	strb.w	r0, [r3, #-128]
			err = at_params_short_get(&at_param_list, 3, &port);
   20354:	2103      	movs	r1, #3
   20356:	4890      	ldr	r0, [pc, #576]	; (20598 <handle_at_tcp_client+0x2b4>)
   20358:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
   2035c:	f01a fa33 	bl	3a7c6 <at_params_short_get>
			if (err) {
   20360:	4604      	mov	r4, r0
   20362:	2800      	cmp	r0, #0
   20364:	d144      	bne.n	203f0 <handle_at_tcp_client+0x10c>
			if (param_count > 4) {
   20366:	2e04      	cmp	r6, #4
   20368:	d004      	beq.n	20374 <handle_at_tcp_client+0x90>
				at_params_int_get(&at_param_list,
   2036a:	2104      	movs	r1, #4
   2036c:	488a      	ldr	r0, [pc, #552]	; (20598 <handle_at_tcp_client+0x2b4>)
   2036e:	1d2a      	adds	r2, r5, #4
   20370:	f01a fa3b 	bl	3a7ea <at_params_int_get>
			err = do_tcp_client_connect(url, port, proxy.sec_tag);
   20374:	686e      	ldr	r6, [r5, #4]
   20376:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
	if (sec_tag == INVALID_SEC_TAG) {
   2037a:	1c72      	adds	r2, r6, #1
	return z_impl_zsock_socket(family, type, proto);
   2037c:	f04f 0101 	mov.w	r1, #1
   20380:	bf0c      	ite	eq
   20382:	2206      	moveq	r2, #6
   20384:	f44f 7281 	movne.w	r2, #258	; 0x102
   20388:	4608      	mov	r0, r1
   2038a:	f004 fd15 	bl	24db8 <z_impl_zsock_socket>
		proxy.sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);
   2038e:	6028      	str	r0, [r5, #0]
	if (proxy.sock < 0) {
   20390:	6828      	ldr	r0, [r5, #0]
   20392:	2800      	cmp	r0, #0
   20394:	da2f      	bge.n	203f6 <handle_at_tcp_client+0x112>
   20396:	4a82      	ldr	r2, [pc, #520]	; (205a0 <handle_at_tcp_client+0x2bc>)
   20398:	4c82      	ldr	r4, [pc, #520]	; (205a4 <handle_at_tcp_client+0x2c0>)
   2039a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
   2039c:	f018 ff93 	bl	392c6 <__errno>
   203a0:	08e4      	lsrs	r4, r4, #3
   203a2:	6801      	ldr	r1, [r0, #0]
   203a4:	01a4      	lsls	r4, r4, #6
   203a6:	f044 0401 	orr.w	r4, r4, #1
   203aa:	4622      	mov	r2, r4
   203ac:	4249      	negs	r1, r1
   203ae:	487e      	ldr	r0, [pc, #504]	; (205a8 <handle_at_tcp_client+0x2c4>)
   203b0:	f018 f895 	bl	384de <log_1>
		sprintf(rsp_buf, "#XTCPCLI: %d\r\n", -errno);
   203b4:	f018 ff87 	bl	392c6 <__errno>
   203b8:	6803      	ldr	r3, [r0, #0]
   203ba:	2100      	movs	r1, #0
   203bc:	425b      	negs	r3, r3
   203be:	f640 228c 	movw	r2, #2700	; 0xa8c
   203c2:	9300      	str	r3, [sp, #0]
   203c4:	4879      	ldr	r0, [pc, #484]	; (205ac <handle_at_tcp_client+0x2c8>)
   203c6:	4b7a      	ldr	r3, [pc, #488]	; (205b0 <handle_at_tcp_client+0x2cc>)
   203c8:	f01b f92b 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   203cc:	4877      	ldr	r0, [pc, #476]	; (205ac <handle_at_tcp_client+0x2c8>)
   203ce:	f7fc fe4f 	bl	1d070 <strlen>
   203d2:	4601      	mov	r1, r0
   203d4:	4875      	ldr	r0, [pc, #468]	; (205ac <handle_at_tcp_client+0x2c8>)
   203d6:	f7fd ff07 	bl	1e1e8 <rsp_send>
		return -errno;
   203da:	f018 ff74 	bl	392c6 <__errno>
   203de:	6804      	ldr	r4, [r0, #0]
   203e0:	4264      	negs	r4, r4
			if (err == 0 &&
   203e2:	b92c      	cbnz	r4, 203f0 <handle_at_tcp_client+0x10c>
   203e4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   203e8:	2b02      	cmp	r3, #2
   203ea:	d101      	bne.n	203f0 <handle_at_tcp_client+0x10c>
				proxy.datamode = true;
   203ec:	2301      	movs	r3, #1
   203ee:	742b      	strb	r3, [r5, #16]
}
   203f0:	4620      	mov	r0, r4
   203f2:	b042      	add	sp, #264	; 0x108
   203f4:	bd70      	pop	{r4, r5, r6, pc}
	if (sec_tag != INVALID_SEC_TAG) {
   203f6:	1c73      	adds	r3, r6, #1
   203f8:	d02f      	beq.n	2045a <handle_at_tcp_client+0x176>
		sec_tag_t sec_tag_list[1] = { sec_tag };
   203fa:	960e      	str	r6, [sp, #56]	; 0x38
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   203fc:	2304      	movs	r3, #4
   203fe:	2201      	movs	r2, #1
   20400:	9300      	str	r3, [sp, #0]
   20402:	f44f 718d 	mov.w	r1, #282	; 0x11a
   20406:	ab0e      	add	r3, sp, #56	; 0x38
   20408:	f018 fd26 	bl	38e58 <z_impl_zsock_setsockopt>
		if (ret) {
   2040c:	b328      	cbz	r0, 2045a <handle_at_tcp_client+0x176>
   2040e:	4a64      	ldr	r2, [pc, #400]	; (205a0 <handle_at_tcp_client+0x2bc>)
   20410:	4c64      	ldr	r4, [pc, #400]	; (205a4 <handle_at_tcp_client+0x2c0>)
   20412:	1aa4      	subs	r4, r4, r2
   20414:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set tag list failed: %d", -errno);
   20416:	f018 ff56 	bl	392c6 <__errno>
   2041a:	01a4      	lsls	r4, r4, #6
   2041c:	f044 0401 	orr.w	r4, r4, #1
   20420:	4622      	mov	r2, r4
   20422:	6801      	ldr	r1, [r0, #0]
   20424:	4863      	ldr	r0, [pc, #396]	; (205b4 <handle_at_tcp_client+0x2d0>)
   20426:	4249      	negs	r1, r1
		LOG_ERR("connect() failed: %d", -errno);
   20428:	f018 f859 	bl	384de <log_1>
		sprintf(rsp_buf, "#XTCPCLI: %d\r\n", -errno);
   2042c:	f018 ff4b 	bl	392c6 <__errno>
   20430:	6803      	ldr	r3, [r0, #0]
   20432:	f640 228c 	movw	r2, #2700	; 0xa8c
   20436:	425b      	negs	r3, r3
   20438:	2100      	movs	r1, #0
   2043a:	9300      	str	r3, [sp, #0]
   2043c:	485b      	ldr	r0, [pc, #364]	; (205ac <handle_at_tcp_client+0x2c8>)
   2043e:	4b5c      	ldr	r3, [pc, #368]	; (205b0 <handle_at_tcp_client+0x2cc>)
   20440:	f01b f8ef 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20444:	4859      	ldr	r0, [pc, #356]	; (205ac <handle_at_tcp_client+0x2c8>)
   20446:	f7fc fe13 	bl	1d070 <strlen>
   2044a:	4601      	mov	r1, r0
   2044c:	4857      	ldr	r0, [pc, #348]	; (205ac <handle_at_tcp_client+0x2c8>)
   2044e:	f7fd fecb 	bl	1e1e8 <rsp_send>
		close(proxy.sock);
   20452:	6828      	ldr	r0, [r5, #0]
   20454:	f017 fb4a 	bl	37aec <close>
   20458:	e7bf      	b.n	203da <handle_at_tcp_client+0xf6>
	if (check_for_ipv4(url, strlen(url))) {
   2045a:	a822      	add	r0, sp, #136	; 0x88
   2045c:	f7fc fe08 	bl	1d070 <strlen>
   20460:	b2c1      	uxtb	r1, r0
   20462:	a822      	add	r0, sp, #136	; 0x88
   20464:	f017 fb0e 	bl	37a84 <check_for_ipv4>
   20468:	4601      	mov	r1, r0
   2046a:	b1e8      	cbz	r0, 204a8 <handle_at_tcp_client+0x1c4>
		remote.sin_family = AF_INET;
   2046c:	2001      	movs	r0, #1
   2046e:	4a52      	ldr	r2, [pc, #328]	; (205b8 <handle_at_tcp_client+0x2d4>)
		remote.sin_port = htons(port);
   20470:	0223      	lsls	r3, r4, #8
   20472:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
		remote.sin_family = AF_INET;
   20476:	8010      	strh	r0, [r2, #0]
		remote.sin_port = htons(port);
   20478:	8054      	strh	r4, [r2, #2]
	return z_impl_zsock_inet_pton(family, src, dst);
   2047a:	a922      	add	r1, sp, #136	; 0x88
   2047c:	3204      	adds	r2, #4
   2047e:	f018 fcc9 	bl	38e14 <z_impl_zsock_inet_pton>
		if (ret != 1) {
   20482:	2801      	cmp	r0, #1
   20484:	4601      	mov	r1, r0
   20486:	d035      	beq.n	204f4 <handle_at_tcp_client+0x210>
   20488:	4a46      	ldr	r2, [pc, #280]	; (205a4 <handle_at_tcp_client+0x2c0>)
   2048a:	4b45      	ldr	r3, [pc, #276]	; (205a0 <handle_at_tcp_client+0x2bc>)
			LOG_ERR("inet_pton() failed: %d", ret);
   2048c:	484b      	ldr	r0, [pc, #300]	; (205bc <handle_at_tcp_client+0x2d8>)
   2048e:	1ad2      	subs	r2, r2, r3
   20490:	08d2      	lsrs	r2, r2, #3
   20492:	0192      	lsls	r2, r2, #6
   20494:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("getaddrinfo() failed: %d", ret);
   20498:	f018 f821 	bl	384de <log_1>
			close(proxy.sock);
   2049c:	6828      	ldr	r0, [r5, #0]
   2049e:	f017 fb25 	bl	37aec <close>
			return -EINVAL;
   204a2:	f06f 0415 	mvn.w	r4, #21
   204a6:	e7a3      	b.n	203f0 <handle_at_tcp_client+0x10c>
		struct addrinfo hints = {
   204a8:	2601      	movs	r6, #1
   204aa:	2250      	movs	r2, #80	; 0x50
   204ac:	9009      	str	r0, [sp, #36]	; 0x24
   204ae:	a80e      	add	r0, sp, #56	; 0x38
   204b0:	f01a ff9f 	bl	3b3f2 <memset>
	return zsock_getaddrinfo(host, service, hints, res);
   204b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   204b6:	ab0d      	add	r3, sp, #52	; 0x34
   204b8:	aa0e      	add	r2, sp, #56	; 0x38
   204ba:	a822      	add	r0, sp, #136	; 0x88
   204bc:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
   204c0:	f018 fbee 	bl	38ca0 <zsock_getaddrinfo>
		if (ret || result == NULL) {
   204c4:	4601      	mov	r1, r0
   204c6:	b908      	cbnz	r0, 204cc <handle_at_tcp_client+0x1e8>
   204c8:	980d      	ldr	r0, [sp, #52]	; 0x34
   204ca:	b940      	cbnz	r0, 204de <handle_at_tcp_client+0x1fa>
   204cc:	4a35      	ldr	r2, [pc, #212]	; (205a4 <handle_at_tcp_client+0x2c0>)
   204ce:	4b34      	ldr	r3, [pc, #208]	; (205a0 <handle_at_tcp_client+0x2bc>)
			LOG_ERR("getaddrinfo() failed: %d", ret);
   204d0:	483b      	ldr	r0, [pc, #236]	; (205c0 <handle_at_tcp_client+0x2dc>)
   204d2:	1ad2      	subs	r2, r2, r3
   204d4:	08d2      	lsrs	r2, r2, #3
   204d6:	0192      	lsls	r2, r2, #6
   204d8:	f042 0201 	orr.w	r2, r2, #1
   204dc:	e7dc      	b.n	20498 <handle_at_tcp_client+0x1b4>
		remote.sin_port = htons(port);
   204de:	0222      	lsls	r2, r4, #8
   204e0:	ea42 2414 	orr.w	r4, r2, r4, lsr #8
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   204e4:	6982      	ldr	r2, [r0, #24]
		remote.sin_family = AF_INET;
   204e6:	4b34      	ldr	r3, [pc, #208]	; (205b8 <handle_at_tcp_client+0x2d4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   204e8:	6852      	ldr	r2, [r2, #4]
		remote.sin_family = AF_INET;
   204ea:	801e      	strh	r6, [r3, #0]
		remote.sin_port = htons(port);
   204ec:	805c      	strh	r4, [r3, #2]
		remote.sin_addr.s_addr =
   204ee:	605a      	str	r2, [r3, #4]
	zsock_freeaddrinfo(ai);
   204f0:	f018 fbd8 	bl	38ca4 <zsock_freeaddrinfo>
	ret = connect(proxy.sock, (struct sockaddr *)&remote,
   204f4:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   204f6:	2208      	movs	r2, #8
   204f8:	492f      	ldr	r1, [pc, #188]	; (205b8 <handle_at_tcp_client+0x2d4>)
   204fa:	f018 fc11 	bl	38d20 <z_impl_zsock_connect>
	if (ret < 0) {
   204fe:	1e04      	subs	r4, r0, #0
   20500:	da0d      	bge.n	2051e <handle_at_tcp_client+0x23a>
   20502:	4a27      	ldr	r2, [pc, #156]	; (205a0 <handle_at_tcp_client+0x2bc>)
   20504:	4c27      	ldr	r4, [pc, #156]	; (205a4 <handle_at_tcp_client+0x2c0>)
   20506:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect() failed: %d", -errno);
   20508:	f018 fedd 	bl	392c6 <__errno>
   2050c:	08e4      	lsrs	r4, r4, #3
   2050e:	6801      	ldr	r1, [r0, #0]
   20510:	01a4      	lsls	r4, r4, #6
   20512:	f044 0401 	orr.w	r4, r4, #1
   20516:	4622      	mov	r2, r4
   20518:	482a      	ldr	r0, [pc, #168]	; (205c4 <handle_at_tcp_client+0x2e0>)
   2051a:	4249      	negs	r1, r1
   2051c:	e784      	b.n	20428 <handle_at_tcp_client+0x144>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2051e:	2200      	movs	r2, #0
   20520:	2300      	movs	r3, #0
   20522:	2600      	movs	r6, #0
   20524:	e9cd 2306 	strd	r2, r3, [sp, #24]
   20528:	2004      	movs	r0, #4
   2052a:	230e      	movs	r3, #14
   2052c:	f44f 6264 	mov.w	r2, #3648	; 0xe40
   20530:	e9cd 3003 	strd	r3, r0, [sp, #12]
   20534:	e9cd 6601 	strd	r6, r6, [sp, #4]
   20538:	4b23      	ldr	r3, [pc, #140]	; (205c8 <handle_at_tcp_client+0x2e4>)
   2053a:	4924      	ldr	r1, [pc, #144]	; (205cc <handle_at_tcp_client+0x2e8>)
   2053c:	9600      	str	r6, [sp, #0]
   2053e:	4824      	ldr	r0, [pc, #144]	; (205d0 <handle_at_tcp_client+0x2ec>)
   20540:	f015 ff8c 	bl	3645c <z_impl_k_thread_create>
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   20544:	4b23      	ldr	r3, [pc, #140]	; (205d4 <handle_at_tcp_client+0x2f0>)
	sprintf(rsp_buf, "#XTCPCLI: %d connected\r\n", proxy.sock);
   20546:	4631      	mov	r1, r6
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   20548:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XTCPCLI: %d connected\r\n", proxy.sock);
   2054a:	682b      	ldr	r3, [r5, #0]
   2054c:	f640 228c 	movw	r2, #2700	; 0xa8c
   20550:	9300      	str	r3, [sp, #0]
   20552:	4816      	ldr	r0, [pc, #88]	; (205ac <handle_at_tcp_client+0x2c8>)
   20554:	4b20      	ldr	r3, [pc, #128]	; (205d8 <handle_at_tcp_client+0x2f4>)
	proxy.role = AT_TCP_ROLE_CLIENT;
   20556:	60ee      	str	r6, [r5, #12]
	sprintf(rsp_buf, "#XTCPCLI: %d connected\r\n", proxy.sock);
   20558:	f01b f863 	bl	3b622 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   2055c:	4813      	ldr	r0, [pc, #76]	; (205ac <handle_at_tcp_client+0x2c8>)
   2055e:	f7fc fd87 	bl	1d070 <strlen>
   20562:	4601      	mov	r1, r0
   20564:	4811      	ldr	r0, [pc, #68]	; (205ac <handle_at_tcp_client+0x2c8>)
   20566:	f7fd fe3f 	bl	1e1e8 <rsp_send>
	return ret;
   2056a:	e73a      	b.n	203e2 <handle_at_tcp_client+0xfe>
		} else if (op == AT_CLIENT_DISCONNECT) {
   2056c:	2b00      	cmp	r3, #0
   2056e:	f47f af3f 	bne.w	203f0 <handle_at_tcp_client+0x10c>
			if (proxy.sock < 0) {
   20572:	4b0a      	ldr	r3, [pc, #40]	; (2059c <handle_at_tcp_client+0x2b8>)
   20574:	681b      	ldr	r3, [r3, #0]
   20576:	2b00      	cmp	r3, #0
   20578:	da0a      	bge.n	20590 <handle_at_tcp_client+0x2ac>
   2057a:	4b09      	ldr	r3, [pc, #36]	; (205a0 <handle_at_tcp_client+0x2bc>)
   2057c:	4909      	ldr	r1, [pc, #36]	; (205a4 <handle_at_tcp_client+0x2c0>)
				LOG_WRN("Client is not connected");
   2057e:	4817      	ldr	r0, [pc, #92]	; (205dc <handle_at_tcp_client+0x2f8>)
   20580:	1ac9      	subs	r1, r1, r3
   20582:	08c9      	lsrs	r1, r1, #3
   20584:	0189      	lsls	r1, r1, #6
   20586:	f041 0102 	orr.w	r1, r1, #2
   2058a:	f017 ff99 	bl	384c0 <log_0>
				return -EINVAL;
   2058e:	e788      	b.n	204a2 <handle_at_tcp_client+0x1be>
			err = do_tcp_client_disconnect(0);
   20590:	f7ff fe5a 	bl	20248 <do_tcp_client_disconnect>
   20594:	4604      	mov	r4, r0
   20596:	e72b      	b.n	203f0 <handle_at_tcp_client+0x10c>
   20598:	20023430 	.word	0x20023430
   2059c:	20023490 	.word	0x20023490
   205a0:	0003c2cc 	.word	0x0003c2cc
   205a4:	0003c39c 	.word	0x0003c39c
   205a8:	0003d930 	.word	0x0003d930
   205ac:	20028950 	.word	0x20028950
   205b0:	0003dae2 	.word	0x0003dae2
   205b4:	0003daf1 	.word	0x0003daf1
   205b8:	200234a4 	.word	0x200234a4
   205bc:	0003db09 	.word	0x0003db09
   205c0:	0003db20 	.word	0x0003db20
   205c4:	0003d831 	.word	0x0003d831
   205c8:	000208ed 	.word	0x000208ed
   205cc:	2002d518 	.word	0x2002d518
   205d0:	200212c8 	.word	0x200212c8
   205d4:	200234ac 	.word	0x200234ac
   205d8:	0003db39 	.word	0x0003db39
   205dc:	0003db52 	.word	0x0003db52
		if (proxy.sock != INVALID_SOCKET &&
   205e0:	4b1b      	ldr	r3, [pc, #108]	; (20650 <handle_at_tcp_client+0x36c>)
   205e2:	681a      	ldr	r2, [r3, #0]
   205e4:	1c51      	adds	r1, r2, #1
   205e6:	d013      	beq.n	20610 <handle_at_tcp_client+0x32c>
   205e8:	68d9      	ldr	r1, [r3, #12]
   205ea:	b989      	cbnz	r1, 20610 <handle_at_tcp_client+0x32c>
			sprintf(rsp_buf, "#XTCPCLI: %d, %d\r\n",
   205ec:	7c1b      	ldrb	r3, [r3, #16]
   205ee:	4819      	ldr	r0, [pc, #100]	; (20654 <handle_at_tcp_client+0x370>)
   205f0:	e9cd 2300 	strd	r2, r3, [sp]
   205f4:	f640 228c 	movw	r2, #2700	; 0xa8c
   205f8:	4b17      	ldr	r3, [pc, #92]	; (20658 <handle_at_tcp_client+0x374>)
   205fa:	f01b f812 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   205fe:	4815      	ldr	r0, [pc, #84]	; (20654 <handle_at_tcp_client+0x370>)
   20600:	f7fc fd36 	bl	1d070 <strlen>
   20604:	4601      	mov	r1, r0
   20606:	4813      	ldr	r0, [pc, #76]	; (20654 <handle_at_tcp_client+0x370>)
   20608:	f7fd fdee 	bl	1e1e8 <rsp_send>
		err = 0;
   2060c:	2400      	movs	r4, #0
		break;
   2060e:	e6ef      	b.n	203f0 <handle_at_tcp_client+0x10c>
			sprintf(rsp_buf, "#XTCPCLI: %d\r\n", INVALID_SOCKET);
   20610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20614:	f640 228c 	movw	r2, #2700	; 0xa8c
   20618:	9300      	str	r3, [sp, #0]
   2061a:	2100      	movs	r1, #0
   2061c:	4b0f      	ldr	r3, [pc, #60]	; (2065c <handle_at_tcp_client+0x378>)
   2061e:	480d      	ldr	r0, [pc, #52]	; (20654 <handle_at_tcp_client+0x370>)
   20620:	f01a ffff 	bl	3b622 <__sprintf_chk>
   20624:	e7eb      	b.n	205fe <handle_at_tcp_client+0x31a>
		sprintf(rsp_buf,
   20626:	2400      	movs	r4, #0
   20628:	2301      	movs	r3, #1
   2062a:	2202      	movs	r2, #2
   2062c:	4621      	mov	r1, r4
   2062e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   20632:	9400      	str	r4, [sp, #0]
   20634:	f640 228c 	movw	r2, #2700	; 0xa8c
   20638:	4b09      	ldr	r3, [pc, #36]	; (20660 <handle_at_tcp_client+0x37c>)
   2063a:	4806      	ldr	r0, [pc, #24]	; (20654 <handle_at_tcp_client+0x370>)
   2063c:	f01a fff1 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20640:	4804      	ldr	r0, [pc, #16]	; (20654 <handle_at_tcp_client+0x370>)
   20642:	f7fc fd15 	bl	1d070 <strlen>
   20646:	4601      	mov	r1, r0
   20648:	4802      	ldr	r0, [pc, #8]	; (20654 <handle_at_tcp_client+0x370>)
   2064a:	f7fd fdcd 	bl	1e1e8 <rsp_send>
		break;
   2064e:	e6cf      	b.n	203f0 <handle_at_tcp_client+0x10c>
   20650:	20023490 	.word	0x20023490
   20654:	20028950 	.word	0x20028950
   20658:	0003db6a 	.word	0x0003db6a
   2065c:	0003dae2 	.word	0x0003dae2
   20660:	0003db7d 	.word	0x0003db7d

00020664 <do_tcp_server_stop>:
{
   20664:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (proxy.sock > 0) {
   20666:	4c22      	ldr	r4, [pc, #136]	; (206f0 <do_tcp_server_stop+0x8c>)
{
   20668:	4605      	mov	r5, r0
	if (proxy.sock > 0) {
   2066a:	6823      	ldr	r3, [r4, #0]
   2066c:	2b00      	cmp	r3, #0
   2066e:	dd3d      	ble.n	206ec <do_tcp_server_stop+0x88>
	z_impl_k_timer_stop(timer);
   20670:	4820      	ldr	r0, [pc, #128]	; (206f4 <do_tcp_server_stop+0x90>)
   20672:	f01a fcd5 	bl	3b020 <z_impl_k_timer_stop>
		k_thread_abort(tcp_thread_id);
   20676:	4b20      	ldr	r3, [pc, #128]	; (206f8 <do_tcp_server_stop+0x94>)
   20678:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   2067a:	f005 fedb 	bl	26434 <z_impl_k_thread_abort>
		if (proxy.sock_peer != INVALID_SOCKET) {
   2067e:	68a0      	ldr	r0, [r4, #8]
   20680:	1c43      	adds	r3, r0, #1
   20682:	d001      	beq.n	20688 <do_tcp_server_stop+0x24>
			close(proxy.sock_peer);
   20684:	f017 fa32 	bl	37aec <close>
		ret = close(proxy.sock);
   20688:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   2068a:	f018 fb1c 	bl	38cc6 <z_impl_zsock_close>
		if (ret < 0) {
   2068e:	1e04      	subs	r4, r0, #0
   20690:	da12      	bge.n	206b8 <do_tcp_server_stop+0x54>
   20692:	4a1a      	ldr	r2, [pc, #104]	; (206fc <do_tcp_server_stop+0x98>)
   20694:	4c1a      	ldr	r4, [pc, #104]	; (20700 <do_tcp_server_stop+0x9c>)
   20696:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   20698:	f018 fe15 	bl	392c6 <__errno>
   2069c:	08e4      	lsrs	r4, r4, #3
   2069e:	6801      	ldr	r1, [r0, #0]
   206a0:	01a4      	lsls	r4, r4, #6
   206a2:	f044 0402 	orr.w	r4, r4, #2
   206a6:	4622      	mov	r2, r4
   206a8:	4816      	ldr	r0, [pc, #88]	; (20704 <do_tcp_server_stop+0xa0>)
   206aa:	4249      	negs	r1, r1
   206ac:	f017 ff17 	bl	384de <log_1>
			ret = -errno;
   206b0:	f018 fe09 	bl	392c6 <__errno>
   206b4:	6804      	ldr	r4, [r0, #0]
   206b6:	4264      	negs	r4, r4
		(void)slm_at_tcp_proxy_init();
   206b8:	f7ff fdba 	bl	20230 <slm_at_tcp_proxy_init>
		if (error) {
   206bc:	b18d      	cbz	r5, 206e2 <do_tcp_server_stop+0x7e>
			sprintf(rsp_buf, "#XTCPSVR: %d stopped\r\n", error);
   206be:	f640 228c 	movw	r2, #2700	; 0xa8c
   206c2:	2100      	movs	r1, #0
   206c4:	4b10      	ldr	r3, [pc, #64]	; (20708 <do_tcp_server_stop+0xa4>)
   206c6:	4811      	ldr	r0, [pc, #68]	; (2070c <do_tcp_server_stop+0xa8>)
   206c8:	9500      	str	r5, [sp, #0]
   206ca:	f01a ffaa 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   206ce:	480f      	ldr	r0, [pc, #60]	; (2070c <do_tcp_server_stop+0xa8>)
   206d0:	f7fc fcce 	bl	1d070 <strlen>
   206d4:	4601      	mov	r1, r0
   206d6:	480d      	ldr	r0, [pc, #52]	; (2070c <do_tcp_server_stop+0xa8>)
   206d8:	f7fd fd86 	bl	1e1e8 <rsp_send>
}
   206dc:	4620      	mov	r0, r4
   206de:	b003      	add	sp, #12
   206e0:	bd30      	pop	{r4, r5, pc}
			sprintf(rsp_buf, "#XTCPSVR: stopped\r\n");
   206e2:	490b      	ldr	r1, [pc, #44]	; (20710 <do_tcp_server_stop+0xac>)
   206e4:	4809      	ldr	r0, [pc, #36]	; (2070c <do_tcp_server_stop+0xa8>)
   206e6:	f01a ffc3 	bl	3b670 <strcpy>
   206ea:	e7f0      	b.n	206ce <do_tcp_server_stop+0x6a>
	int ret = 0;
   206ec:	2400      	movs	r4, #0
	return ret;
   206ee:	e7f5      	b.n	206dc <do_tcp_server_stop+0x78>
   206f0:	20023490 	.word	0x20023490
   206f4:	20020750 	.word	0x20020750
   206f8:	200234ac 	.word	0x200234ac
   206fc:	0003c2cc 	.word	0x0003c2cc
   20700:	0003c39c 	.word	0x0003c39c
   20704:	0003d641 	.word	0x0003d641
   20708:	0003dbad 	.word	0x0003dbad
   2070c:	20028950 	.word	0x20028950
   20710:	0003dbc4 	.word	0x0003dbc4

00020714 <do_tcp_send>:
{
   20714:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   20718:	4e48      	ldr	r6, [pc, #288]	; (2083c <do_tcp_send+0x128>)
{
   2071a:	4682      	mov	sl, r0
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   2071c:	68f3      	ldr	r3, [r6, #12]
{
   2071e:	4689      	mov	r9, r1
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   20720:	b98b      	cbnz	r3, 20746 <do_tcp_send+0x32>
	    proxy.sock != INVALID_SOCKET) {
   20722:	6837      	ldr	r7, [r6, #0]
	if (proxy.role == AT_TCP_ROLE_CLIENT &&
   20724:	1c7a      	adds	r2, r7, #1
   20726:	d116      	bne.n	20756 <do_tcp_send+0x42>
   20728:	4b45      	ldr	r3, [pc, #276]	; (20840 <do_tcp_send+0x12c>)
   2072a:	4946      	ldr	r1, [pc, #280]	; (20844 <do_tcp_send+0x130>)
		LOG_ERR("Not connected yet");
   2072c:	4846      	ldr	r0, [pc, #280]	; (20848 <do_tcp_send+0x134>)
   2072e:	1ac9      	subs	r1, r1, r3
   20730:	08c9      	lsrs	r1, r1, #3
   20732:	0189      	lsls	r1, r1, #6
   20734:	f041 0101 	orr.w	r1, r1, #1
   20738:	f017 fec2 	bl	384c0 <log_0>
		return -EINVAL;
   2073c:	f06f 0015 	mvn.w	r0, #21
}
   20740:	b002      	add	sp, #8
   20742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   20746:	2b01      	cmp	r3, #1
   20748:	d1ee      	bne.n	20728 <do_tcp_send+0x14>
		   proxy.sock_peer != INVALID_SOCKET) {
   2074a:	68b7      	ldr	r7, [r6, #8]
	} else if (proxy.role == AT_TCP_ROLE_SERVER &&
   2074c:	1c7b      	adds	r3, r7, #1
   2074e:	d0eb      	beq.n	20728 <do_tcp_send+0x14>
	z_impl_k_timer_stop(timer);
   20750:	483e      	ldr	r0, [pc, #248]	; (2084c <do_tcp_send+0x138>)
   20752:	f01a fc65 	bl	3b020 <z_impl_k_timer_stop>
{
   20756:	2500      	movs	r5, #0
   20758:	462c      	mov	r4, r5
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2075a:	46a8      	mov	r8, r5
   2075c:	e01b      	b.n	20796 <do_tcp_send+0x82>
					do_tcp_server_stop(-errno);
   2075e:	f018 fdb2 	bl	392c6 <__errno>
   20762:	6800      	ldr	r0, [r0, #0]
   20764:	4240      	negs	r0, r0
   20766:	f7ff ff7d 	bl	20664 <do_tcp_server_stop>
   2076a:	e044      	b.n	207f6 <do_tcp_send+0xe2>
				sprintf(rsp_buf, "#XTCPSEND: %d\r\n", -errno);
   2076c:	f018 fdab 	bl	392c6 <__errno>
   20770:	6803      	ldr	r3, [r0, #0]
   20772:	f640 228c 	movw	r2, #2700	; 0xa8c
   20776:	425b      	negs	r3, r3
   20778:	2100      	movs	r1, #0
   2077a:	9300      	str	r3, [sp, #0]
   2077c:	4834      	ldr	r0, [pc, #208]	; (20850 <do_tcp_send+0x13c>)
   2077e:	4b35      	ldr	r3, [pc, #212]	; (20854 <do_tcp_send+0x140>)
   20780:	f01a ff4f 	bl	3b622 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   20784:	4832      	ldr	r0, [pc, #200]	; (20850 <do_tcp_send+0x13c>)
   20786:	f7fc fc73 	bl	1d070 <strlen>
   2078a:	4601      	mov	r1, r0
   2078c:	4830      	ldr	r0, [pc, #192]	; (20850 <do_tcp_send+0x13c>)
   2078e:	f7fd fd2b 	bl	1e1e8 <rsp_send>
   20792:	e030      	b.n	207f6 <do_tcp_send+0xe2>
		offset += ret;
   20794:	4425      	add	r5, r4
	while (offset < datalen) {
   20796:	454d      	cmp	r5, r9
   20798:	d231      	bcs.n	207fe <do_tcp_send+0xea>
   2079a:	2300      	movs	r3, #0
   2079c:	4638      	mov	r0, r7
   2079e:	e9cd 8800 	strd	r8, r8, [sp]
   207a2:	eba9 0205 	sub.w	r2, r9, r5
   207a6:	eb0a 0105 	add.w	r1, sl, r5
   207aa:	f018 faf9 	bl	38da0 <z_impl_zsock_sendto>
		if (ret < 0) {
   207ae:	1e04      	subs	r4, r0, #0
   207b0:	daf0      	bge.n	20794 <do_tcp_send+0x80>
   207b2:	4a23      	ldr	r2, [pc, #140]	; (20840 <do_tcp_send+0x12c>)
   207b4:	4c23      	ldr	r4, [pc, #140]	; (20844 <do_tcp_send+0x130>)
   207b6:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send() failed: %d", -errno);
   207b8:	f018 fd85 	bl	392c6 <__errno>
   207bc:	08e4      	lsrs	r4, r4, #3
   207be:	6801      	ldr	r1, [r0, #0]
   207c0:	01a4      	lsls	r4, r4, #6
   207c2:	f044 0401 	orr.w	r4, r4, #1
   207c6:	4622      	mov	r2, r4
   207c8:	4823      	ldr	r0, [pc, #140]	; (20858 <do_tcp_send+0x144>)
   207ca:	4249      	negs	r1, r1
   207cc:	f017 fe87 	bl	384de <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   207d0:	f018 fd79 	bl	392c6 <__errno>
   207d4:	6803      	ldr	r3, [r0, #0]
   207d6:	2b0b      	cmp	r3, #11
   207d8:	d0c8      	beq.n	2076c <do_tcp_send+0x58>
   207da:	f018 fd74 	bl	392c6 <__errno>
   207de:	6803      	ldr	r3, [r0, #0]
   207e0:	2b74      	cmp	r3, #116	; 0x74
   207e2:	d0c3      	beq.n	2076c <do_tcp_send+0x58>
				if (proxy.role == AT_TCP_ROLE_CLIENT) {
   207e4:	68f3      	ldr	r3, [r6, #12]
   207e6:	2b00      	cmp	r3, #0
   207e8:	d1b9      	bne.n	2075e <do_tcp_send+0x4a>
					do_tcp_client_disconnect(-errno);
   207ea:	f018 fd6c 	bl	392c6 <__errno>
   207ee:	6800      	ldr	r0, [r0, #0]
   207f0:	4240      	negs	r0, r0
   207f2:	f7ff fd29 	bl	20248 <do_tcp_client_disconnect>
			ret = -errno;
   207f6:	f018 fd66 	bl	392c6 <__errno>
   207fa:	6804      	ldr	r4, [r0, #0]
   207fc:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XTCPSEND: %d\r\n", offset);
   207fe:	4b15      	ldr	r3, [pc, #84]	; (20854 <do_tcp_send+0x140>)
   20800:	f640 228c 	movw	r2, #2700	; 0xa8c
   20804:	2100      	movs	r1, #0
   20806:	4812      	ldr	r0, [pc, #72]	; (20850 <do_tcp_send+0x13c>)
   20808:	9500      	str	r5, [sp, #0]
   2080a:	f01a ff0a 	bl	3b622 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   2080e:	4810      	ldr	r0, [pc, #64]	; (20850 <do_tcp_send+0x13c>)
   20810:	f7fc fc2e 	bl	1d070 <strlen>
   20814:	4601      	mov	r1, r0
   20816:	480e      	ldr	r0, [pc, #56]	; (20850 <do_tcp_send+0x13c>)
   20818:	f7fd fce6 	bl	1e1e8 <rsp_send>
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   2081c:	68f3      	ldr	r3, [r6, #12]
   2081e:	2b01      	cmp	r3, #1
   20820:	d109      	bne.n	20836 <do_tcp_send+0x122>
	z_impl_k_timer_start(timer, duration, period);
   20822:	2200      	movs	r2, #0
   20824:	2300      	movs	r3, #0
   20826:	4809      	ldr	r0, [pc, #36]	; (2084c <do_tcp_send+0x138>)
   20828:	e9cd 2300 	strd	r2, r3, [sp]
   2082c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   20830:	2300      	movs	r3, #0
   20832:	f016 f89d 	bl	36970 <z_impl_k_timer_start>
	if (ret >= 0) {
   20836:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   2083a:	e781      	b.n	20740 <do_tcp_send+0x2c>
   2083c:	20023490 	.word	0x20023490
   20840:	0003c2cc 	.word	0x0003c2cc
   20844:	0003c39c 	.word	0x0003c39c
   20848:	0003d748 	.word	0x0003d748
   2084c:	20020750 	.word	0x20020750
   20850:	20028950 	.word	0x20028950
   20854:	0003dbd8 	.word	0x0003dbd8
   20858:	0003d75a 	.word	0x0003d75a

0002085c <handle_at_tcp_send>:
	int size = NET_IPV4_MTU;
   2085c:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   20860:	b590      	push	{r4, r7, lr}
   20862:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	switch (cmd_type) {
   20866:	2801      	cmp	r0, #1
{
   20868:	af00      	add	r7, sp, #0
   2086a:	4604      	mov	r4, r0
	int size = NET_IPV4_MTU;
   2086c:	607b      	str	r3, [r7, #4]
	switch (cmd_type) {
   2086e:	d005      	beq.n	2087c <handle_at_tcp_send+0x20>
	int err = -EINVAL;
   20870:	f06f 0015 	mvn.w	r0, #21
}
   20874:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   20878:	46bd      	mov	sp, r7
   2087a:	bd90      	pop	{r4, r7, pc}
		if (at_params_valid_count_get(&at_param_list) < 3) {
   2087c:	481a      	ldr	r0, [pc, #104]	; (208e8 <handle_at_tcp_send+0x8c>)
   2087e:	f019 ffea 	bl	3a856 <at_params_valid_count_get>
   20882:	2802      	cmp	r0, #2
   20884:	d9f4      	bls.n	20870 <handle_at_tcp_send+0x14>
		err = at_params_short_get(&at_param_list, 1, &datatype);
   20886:	4621      	mov	r1, r4
   20888:	4817      	ldr	r0, [pc, #92]	; (208e8 <handle_at_tcp_send+0x8c>)
   2088a:	1cba      	adds	r2, r7, #2
   2088c:	f019 ff9b 	bl	3a7c6 <at_params_short_get>
		if (err) {
   20890:	2800      	cmp	r0, #0
   20892:	d1ef      	bne.n	20874 <handle_at_tcp_send+0x18>
		err = at_params_string_get(&at_param_list, 2, data, &size);
   20894:	2102      	movs	r1, #2
   20896:	4814      	ldr	r0, [pc, #80]	; (208e8 <handle_at_tcp_send+0x8c>)
   20898:	1d3b      	adds	r3, r7, #4
   2089a:	f107 0208 	add.w	r2, r7, #8
   2089e:	f019 ffb7 	bl	3a810 <at_params_string_get>
		if (err) {
   208a2:	2800      	cmp	r0, #0
   208a4:	d1e6      	bne.n	20874 <handle_at_tcp_send+0x18>
		if (datatype == DATATYPE_HEXADECIMAL) {
   208a6:	887b      	ldrh	r3, [r7, #2]
   208a8:	6879      	ldr	r1, [r7, #4]
   208aa:	b9bb      	cbnz	r3, 208dc <handle_at_tcp_send+0x80>
			uint8_t data_hex[size / 2];
   208ac:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   208b0:	105b      	asrs	r3, r3, #1
   208b2:	1dda      	adds	r2, r3, #7
   208b4:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   208b8:	466c      	mov	r4, sp
			uint8_t data_hex[size / 2];
   208ba:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   208be:	466a      	mov	r2, sp
   208c0:	b29b      	uxth	r3, r3
   208c2:	b289      	uxth	r1, r1
   208c4:	f107 0008 	add.w	r0, r7, #8
   208c8:	f017 f8b8 	bl	37a3c <slm_util_atoh>
			if (err > 0) {
   208cc:	2800      	cmp	r0, #0
   208ce:	dd03      	ble.n	208d8 <handle_at_tcp_send+0x7c>
				err = do_tcp_send(data_hex, err);
   208d0:	4601      	mov	r1, r0
   208d2:	4668      	mov	r0, sp
   208d4:	f7ff ff1e 	bl	20714 <do_tcp_send>
   208d8:	46a5      	mov	sp, r4
   208da:	e7cb      	b.n	20874 <handle_at_tcp_send+0x18>
			err = do_tcp_send(data, size);
   208dc:	f107 0008 	add.w	r0, r7, #8
   208e0:	f7ff ff18 	bl	20714 <do_tcp_send>
   208e4:	e7c6      	b.n	20874 <handle_at_tcp_send+0x18>
   208e6:	bf00      	nop
   208e8:	20023430 	.word	0x20023430

000208ec <tcp_thread_func>:
{
   208ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   208f0:	f8df 8284 	ldr.w	r8, [pc, #644]	; 20b78 <tcp_thread_func+0x28c>
   208f4:	4c8f      	ldr	r4, [pc, #572]	; (20b34 <tcp_thread_func+0x248>)
   208f6:	4646      	mov	r6, r8
   208f8:	4a8f      	ldr	r2, [pc, #572]	; (20b38 <tcp_thread_func+0x24c>)
{
   208fa:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   208fe:	1aa4      	subs	r4, r4, r2
   20900:	08e4      	lsrs	r4, r4, #3
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   20902:	f8d8 700c 	ldr.w	r7, [r8, #12]
   20906:	2f01      	cmp	r7, #1
   20908:	d178      	bne.n	209fc <tcp_thread_func+0x110>
		socklen_t len = sizeof(struct sockaddr_in);
   2090a:	2308      	movs	r3, #8
   2090c:	9307      	str	r3, [sp, #28]
		proxy.sock_peer = INVALID_SOCKET;
   2090e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20912:	f8d8 0000 	ldr.w	r0, [r8]
   20916:	f8c8 3008 	str.w	r3, [r8, #8]
	return z_impl_zsock_accept(sock, addr, addrlen);
   2091a:	4988      	ldr	r1, [pc, #544]	; (20b3c <tcp_thread_func+0x250>)
   2091c:	aa07      	add	r2, sp, #28
   2091e:	f018 fa29 	bl	38d74 <z_impl_zsock_accept>
		if (ret < 0) {
   20922:	f1b0 0900 	subs.w	r9, r0, #0
   20926:	da14      	bge.n	20952 <tcp_thread_func+0x66>
			LOG_ERR("accept() failed: %d", -errno);
   20928:	f018 fccd 	bl	392c6 <__errno>
   2092c:	01a4      	lsls	r4, r4, #6
   2092e:	6801      	ldr	r1, [r0, #0]
   20930:	f044 0401 	orr.w	r4, r4, #1
   20934:	4622      	mov	r2, r4
   20936:	4249      	negs	r1, r1
   20938:	4881      	ldr	r0, [pc, #516]	; (20b40 <tcp_thread_func+0x254>)
   2093a:	f017 fdd0 	bl	384de <log_1>
			do_tcp_server_stop(-errno);
   2093e:	f018 fcc2 	bl	392c6 <__errno>
   20942:	6800      	ldr	r0, [r0, #0]
   20944:	4240      	negs	r0, r0
   20946:	f7ff fe8d 	bl	20664 <do_tcp_server_stop>
}
   2094a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   2094e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20952:	ad0a      	add	r5, sp, #40	; 0x28
   20954:	2310      	movs	r3, #16
   20956:	462a      	mov	r2, r5
   20958:	4638      	mov	r0, r7
   2095a:	497a      	ldr	r1, [pc, #488]	; (20b44 <tcp_thread_func+0x258>)
   2095c:	f005 ffc8 	bl	268f0 <z_impl_net_addr_ntop>
		if (inet_ntop(AF_INET, &remote.sin_addr, peer_addr,
   20960:	b170      	cbz	r0, 20980 <tcp_thread_func+0x94>
			sprintf(rsp_buf, "#XTCPSVR: %s connected\r\n",
   20962:	2100      	movs	r1, #0
   20964:	f640 228c 	movw	r2, #2700	; 0xa8c
   20968:	4b77      	ldr	r3, [pc, #476]	; (20b48 <tcp_thread_func+0x25c>)
   2096a:	4878      	ldr	r0, [pc, #480]	; (20b4c <tcp_thread_func+0x260>)
   2096c:	9500      	str	r5, [sp, #0]
   2096e:	f01a fe58 	bl	3b622 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   20972:	4876      	ldr	r0, [pc, #472]	; (20b4c <tcp_thread_func+0x260>)
   20974:	f7fc fb7c 	bl	1d070 <strlen>
   20978:	4601      	mov	r1, r0
   2097a:	4874      	ldr	r0, [pc, #464]	; (20b4c <tcp_thread_func+0x260>)
   2097c:	f7fd fc34 	bl	1e1e8 <rsp_send>
		proxy.sock_peer = ret;
   20980:	f8c6 9008 	str.w	r9, [r6, #8]
   20984:	2200      	movs	r2, #0
   20986:	2300      	movs	r3, #0
   20988:	4871      	ldr	r0, [pc, #452]	; (20b50 <tcp_thread_func+0x264>)
   2098a:	e9cd 2300 	strd	r2, r3, [sp]
   2098e:	2300      	movs	r3, #0
   20990:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   20994:	f015 ffec 	bl	36970 <z_impl_k_timer_start>
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   20998:	68f3      	ldr	r3, [r6, #12]
   2099a:	2b01      	cmp	r3, #1
   2099c:	d12e      	bne.n	209fc <tcp_thread_func+0x110>
		sock = proxy.sock_peer;
   2099e:	68b3      	ldr	r3, [r6, #8]
		sock = proxy.sock;
   209a0:	9303      	str	r3, [sp, #12]
	fds.fd = sock;
   209a2:	9b03      	ldr	r3, [sp, #12]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
   209a4:	4d6b      	ldr	r5, [pc, #428]	; (20b54 <tcp_thread_func+0x268>)
   209a6:	9308      	str	r3, [sp, #32]
	fds.events = POLLIN;
   209a8:	2301      	movs	r3, #1
   209aa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   209ae:	2300      	movs	r3, #0
	buf->tail = 0;
   209b0:	e9c5 3300 	strd	r3, r3, [r5]
	memset(&buf->misc, 0, sizeof(buf->misc));
   209b4:	e9c5 3302 	strd	r3, r3, [r5, #8]
	return z_impl_k_timer_status_get(timer);
   209b8:	f8df a194 	ldr.w	sl, [pc, #404]	; 20b50 <tcp_thread_func+0x264>
				rsp_send(rsp_buf, strlen(rsp_buf));
   209bc:	4f63      	ldr	r7, [pc, #396]	; (20b4c <tcp_thread_func+0x260>)
		if (proxy.role == AT_TCP_ROLE_SERVER &&
   209be:	68f3      	ldr	r3, [r6, #12]
   209c0:	2b01      	cmp	r3, #1
   209c2:	d11d      	bne.n	20a00 <tcp_thread_func+0x114>
   209c4:	4650      	mov	r0, sl
   209c6:	f01a fb4d 	bl	3b064 <z_impl_k_timer_status_get>
   209ca:	b1c8      	cbz	r0, 20a00 <tcp_thread_func+0x114>
	z_impl_k_timer_stop(timer);
   209cc:	4860      	ldr	r0, [pc, #384]	; (20b50 <tcp_thread_func+0x264>)
   209ce:	f01a fb27 	bl	3b020 <z_impl_k_timer_stop>
			LOG_INF("Connecion timeout");
   209d2:	01a1      	lsls	r1, r4, #6
   209d4:	4860      	ldr	r0, [pc, #384]	; (20b58 <tcp_thread_func+0x26c>)
   209d6:	f041 0103 	orr.w	r1, r1, #3
   209da:	f017 fd71 	bl	384c0 <log_0>
			sprintf(rsp_buf, "#XTCPSVR: timeout\r\n");
   209de:	495f      	ldr	r1, [pc, #380]	; (20b5c <tcp_thread_func+0x270>)
   209e0:	485a      	ldr	r0, [pc, #360]	; (20b4c <tcp_thread_func+0x260>)
   209e2:	f01a fe45 	bl	3b670 <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   209e6:	4859      	ldr	r0, [pc, #356]	; (20b4c <tcp_thread_func+0x260>)
   209e8:	f7fc fb42 	bl	1d070 <strlen>
   209ec:	4601      	mov	r1, r0
   209ee:	4857      	ldr	r0, [pc, #348]	; (20b4c <tcp_thread_func+0x260>)
   209f0:	f7fd fbfa 	bl	1e1e8 <rsp_send>
			close(proxy.sock_peer);
   209f4:	68b0      	ldr	r0, [r6, #8]
   209f6:	f017 f879 	bl	37aec <close>
			goto thread_entry;
   209fa:	e782      	b.n	20902 <tcp_thread_func+0x16>
		sock = proxy.sock;
   209fc:	6833      	ldr	r3, [r6, #0]
   209fe:	e7cf      	b.n	209a0 <tcp_thread_func+0xb4>
	return z_impl_zsock_poll(fds, nfds, timeout);
   20a00:	2101      	movs	r1, #1
   20a02:	f242 7210 	movw	r2, #10000	; 0x2710
   20a06:	a808      	add	r0, sp, #32
   20a08:	f004 f9fc 	bl	24e04 <z_impl_zsock_poll>
		if (ret < 0) {  /* IO error */
   20a0c:	1e01      	subs	r1, r0, #0
   20a0e:	da06      	bge.n	20a1e <tcp_thread_func+0x132>
			LOG_WRN("poll() error: %d", ret);
   20a10:	01a2      	lsls	r2, r4, #6
   20a12:	4853      	ldr	r0, [pc, #332]	; (20b60 <tcp_thread_func+0x274>)
   20a14:	f042 0202 	orr.w	r2, r2, #2
					LOG_ERR("hex convert error: %d", ret);
   20a18:	f017 fd61 	bl	384de <log_1>
					continue;
   20a1c:	e7cf      	b.n	209be <tcp_thread_func+0xd2>
		if (ret == 0) {  /* timeout */
   20a1e:	d0ce      	beq.n	209be <tcp_thread_func+0xd2>
		if ((fds.revents & POLLIN) == POLLIN) {
   20a20:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   20a24:	07db      	lsls	r3, r3, #31
   20a26:	d5ca      	bpl.n	209be <tcp_thread_func+0xd2>
			if (proxy.role == AT_TCP_ROLE_SERVER) {
   20a28:	68f3      	ldr	r3, [r6, #12]
   20a2a:	2b01      	cmp	r3, #1
   20a2c:	d102      	bne.n	20a34 <tcp_thread_func+0x148>
   20a2e:	4650      	mov	r0, sl
   20a30:	f01a faf6 	bl	3b020 <z_impl_k_timer_stop>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   20a34:	2300      	movs	r3, #0
   20a36:	f44f 7210 	mov.w	r2, #576	; 0x240
   20a3a:	e9cd 3300 	strd	r3, r3, [sp]
   20a3e:	9803      	ldr	r0, [sp, #12]
   20a40:	a90a      	add	r1, sp, #40	; 0x28
   20a42:	f018 f9ca 	bl	38dda <z_impl_zsock_recvfrom>
			if (ret < 0) {
   20a46:	1e02      	subs	r2, r0, #0
   20a48:	da0a      	bge.n	20a60 <tcp_thread_func+0x174>
				LOG_WRN("recv() error: %d", -errno);
   20a4a:	f018 fc3c 	bl	392c6 <__errno>
   20a4e:	ea4f 1984 	mov.w	r9, r4, lsl #6
   20a52:	6801      	ldr	r1, [r0, #0]
   20a54:	f049 0902 	orr.w	r9, r9, #2
   20a58:	464a      	mov	r2, r9
   20a5a:	4842      	ldr	r0, [pc, #264]	; (20b64 <tcp_thread_func+0x278>)
   20a5c:	4249      	negs	r1, r1
   20a5e:	e7db      	b.n	20a18 <tcp_thread_func+0x12c>
			if (ret == 0) {
   20a60:	d0ad      	beq.n	209be <tcp_thread_func+0xd2>
			if (proxy.datamode) {
   20a62:	f896 b010 	ldrb.w	fp, [r6, #16]
   20a66:	f1bb 0f00 	cmp.w	fp, #0
   20a6a:	d011      	beq.n	20a90 <tcp_thread_func+0x1a4>
				rsp_send(data, ret);
   20a6c:	4611      	mov	r1, r2
   20a6e:	a80a      	add	r0, sp, #40	; 0x28
				rsp_send(rsp_buf, strlen(rsp_buf));
   20a70:	f7fd fbba 	bl	1e1e8 <rsp_send>
			if (proxy.role == AT_TCP_ROLE_SERVER) {
   20a74:	68f3      	ldr	r3, [r6, #12]
   20a76:	2b01      	cmp	r3, #1
   20a78:	d1a1      	bne.n	209be <tcp_thread_func+0xd2>
	z_impl_k_timer_start(timer, duration, period);
   20a7a:	2200      	movs	r2, #0
   20a7c:	2300      	movs	r3, #0
   20a7e:	4650      	mov	r0, sl
   20a80:	e9cd 2300 	strd	r2, r3, [sp]
   20a84:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   20a88:	2300      	movs	r3, #0
   20a8a:	f015 ff71 	bl	36970 <z_impl_k_timer_start>
   20a8e:	e796      	b.n	209be <tcp_thread_func+0xd2>
			} else if (slm_util_hex_check(data, ret)) {
   20a90:	b291      	uxth	r1, r2
   20a92:	a80a      	add	r0, sp, #40	; 0x28
   20a94:	e9cd 1204 	strd	r1, r2, [sp, #16]
   20a98:	f016 ffbd 	bl	37a16 <slm_util_hex_check>
   20a9c:	9a05      	ldr	r2, [sp, #20]
   20a9e:	4681      	mov	r9, r0
   20aa0:	b388      	cbz	r0, 20b06 <tcp_thread_func+0x21a>
				ret = slm_util_htoa(data, ret, data_hex,
   20aa2:	f44f 6390 	mov.w	r3, #1152	; 0x480
   20aa6:	4a30      	ldr	r2, [pc, #192]	; (20b68 <tcp_thread_func+0x27c>)
   20aa8:	9904      	ldr	r1, [sp, #16]
   20aaa:	a80a      	add	r0, sp, #40	; 0x28
   20aac:	f7fd fa6c 	bl	1df88 <slm_util_htoa>
				if (ret < 0) {
   20ab0:	f1b0 0900 	subs.w	r9, r0, #0
   20ab4:	da05      	bge.n	20ac2 <tcp_thread_func+0x1d6>
					LOG_ERR("hex convert error: %d", ret);
   20ab6:	01a2      	lsls	r2, r4, #6
   20ab8:	4649      	mov	r1, r9
   20aba:	482c      	ldr	r0, [pc, #176]	; (20b6c <tcp_thread_func+0x280>)
   20abc:	f042 0201 	orr.w	r2, r2, #1
   20ac0:	e7aa      	b.n	20a18 <tcp_thread_func+0x12c>
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->tail - buf->head);
   20ac2:	682a      	ldr	r2, [r5, #0]
   20ac4:	692b      	ldr	r3, [r5, #16]
   20ac6:	4413      	add	r3, r2
   20ac8:	686a      	ldr	r2, [r5, #4]
   20aca:	1a9b      	subs	r3, r3, r2
	if (ring_buf_space_get(&data_buf) < length) {
   20acc:	4599      	cmp	r9, r3
   20ace:	d909      	bls.n	20ae4 <tcp_thread_func+0x1f8>
					sprintf(rsp_buf,
   20ad0:	4638      	mov	r0, r7
   20ad2:	4927      	ldr	r1, [pc, #156]	; (20b70 <tcp_thread_func+0x284>)
   20ad4:	f01a fdcc 	bl	3b670 <strcpy>
				rsp_send(rsp_buf, strlen(rsp_buf));
   20ad8:	4638      	mov	r0, r7
   20ada:	f7fc fac9 	bl	1d070 <strlen>
   20ade:	4601      	mov	r1, r0
   20ae0:	4638      	mov	r0, r7
   20ae2:	e7c5      	b.n	20a70 <tcp_thread_func+0x184>
	return ring_buf_put(&data_buf, data, length);
   20ae4:	464a      	mov	r2, r9
   20ae6:	4920      	ldr	r1, [pc, #128]	; (20b68 <tcp_thread_func+0x27c>)
   20ae8:	481a      	ldr	r0, [pc, #104]	; (20b54 <tcp_thread_func+0x268>)
   20aea:	f017 fc3b 	bl	38364 <ring_buf_put>
				if (tcp_data_save(data_hex, ret) < 0) {
   20aee:	2800      	cmp	r0, #0
   20af0:	dbee      	blt.n	20ad0 <tcp_thread_func+0x1e4>
					sprintf(rsp_buf,
   20af2:	f640 228c 	movw	r2, #2700	; 0xa8c
   20af6:	4659      	mov	r1, fp
   20af8:	e9cd b900 	strd	fp, r9, [sp]
   20afc:	4b1d      	ldr	r3, [pc, #116]	; (20b74 <tcp_thread_func+0x288>)
					sprintf(rsp_buf,
   20afe:	4638      	mov	r0, r7
   20b00:	f01a fd8f 	bl	3b622 <__sprintf_chk>
   20b04:	e7e8      	b.n	20ad8 <tcp_thread_func+0x1ec>
   20b06:	6829      	ldr	r1, [r5, #0]
   20b08:	692b      	ldr	r3, [r5, #16]
   20b0a:	440b      	add	r3, r1
   20b0c:	6869      	ldr	r1, [r5, #4]
   20b0e:	1a5b      	subs	r3, r3, r1
	if (ring_buf_space_get(&data_buf) < length) {
   20b10:	429a      	cmp	r2, r3
   20b12:	d8dd      	bhi.n	20ad0 <tcp_thread_func+0x1e4>
	return ring_buf_put(&data_buf, data, length);
   20b14:	480f      	ldr	r0, [pc, #60]	; (20b54 <tcp_thread_func+0x268>)
   20b16:	a90a      	add	r1, sp, #40	; 0x28
   20b18:	9204      	str	r2, [sp, #16]
   20b1a:	f017 fc23 	bl	38364 <ring_buf_put>
				if (tcp_data_save(data, ret) < 0) {
   20b1e:	2800      	cmp	r0, #0
   20b20:	dbd6      	blt.n	20ad0 <tcp_thread_func+0x1e4>
					sprintf(rsp_buf,
   20b22:	2301      	movs	r3, #1
   20b24:	9a04      	ldr	r2, [sp, #16]
   20b26:	9300      	str	r3, [sp, #0]
   20b28:	9201      	str	r2, [sp, #4]
   20b2a:	4649      	mov	r1, r9
   20b2c:	f640 228c 	movw	r2, #2700	; 0xa8c
   20b30:	4b10      	ldr	r3, [pc, #64]	; (20b74 <tcp_thread_func+0x288>)
   20b32:	e7e4      	b.n	20afe <tcp_thread_func+0x212>
   20b34:	0003c39c 	.word	0x0003c39c
   20b38:	0003c2cc 	.word	0x0003c2cc
   20b3c:	200234a4 	.word	0x200234a4
   20b40:	0003dbe8 	.word	0x0003dbe8
   20b44:	200234a8 	.word	0x200234a8
   20b48:	0003dbfc 	.word	0x0003dbfc
   20b4c:	20028950 	.word	0x20028950
   20b50:	20020750 	.word	0x20020750
   20b54:	200200c4 	.word	0x200200c4
   20b58:	0003dc15 	.word	0x0003dc15
   20b5c:	0003dc27 	.word	0x0003dc27
   20b60:	0003dc3b 	.word	0x0003dc3b
   20b64:	0003d716 	.word	0x0003d716
   20b68:	2002b03c 	.word	0x2002b03c
   20b6c:	0003d6a6 	.word	0x0003d6a6
   20b70:	0003dc4c 	.word	0x0003dc4c
   20b74:	0003dc61 	.word	0x0003dc61
   20b78:	20023490 	.word	0x20023490

00020b7c <handle_at_tcp_server>:
{
   20b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20b7e:	4604      	mov	r4, r0
   20b80:	b08d      	sub	sp, #52	; 0x34
	int param_count = at_params_valid_count_get(&at_param_list);
   20b82:	48b2      	ldr	r0, [pc, #712]	; (20e4c <handle_at_tcp_server+0x2d0>)
   20b84:	f019 fe67 	bl	3a856 <at_params_valid_count_get>
	switch (cmd_type) {
   20b88:	2c02      	cmp	r4, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   20b8a:	4606      	mov	r6, r0
	switch (cmd_type) {
   20b8c:	f000 818a 	beq.w	20ea4 <handle_at_tcp_server+0x328>
   20b90:	2c03      	cmp	r4, #3
   20b92:	f000 81af 	beq.w	20ef4 <handle_at_tcp_server+0x378>
   20b96:	2c01      	cmp	r4, #1
   20b98:	f040 80ca 	bne.w	20d30 <handle_at_tcp_server+0x1b4>
		if (param_count < 2) {
   20b9c:	2801      	cmp	r0, #1
   20b9e:	f340 80c7 	ble.w	20d30 <handle_at_tcp_server+0x1b4>
		err = at_params_short_get(&at_param_list, 1, &op);
   20ba2:	4621      	mov	r1, r4
   20ba4:	48a9      	ldr	r0, [pc, #676]	; (20e4c <handle_at_tcp_server+0x2d0>)
   20ba6:	aa09      	add	r2, sp, #36	; 0x24
   20ba8:	f019 fe0d 	bl	3a7c6 <at_params_short_get>
		if (err) {
   20bac:	4604      	mov	r4, r0
   20bae:	2800      	cmp	r0, #0
   20bb0:	f040 80aa 	bne.w	20d08 <handle_at_tcp_server+0x18c>
		if (op == AT_SERVER_START ||
   20bb4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   20bb8:	1e5a      	subs	r2, r3, #1
   20bba:	2a01      	cmp	r2, #1
   20bbc:	f200 8130 	bhi.w	20e20 <handle_at_tcp_server+0x2a4>
			proxy.sec_tag = INVALID_SEC_TAG;
   20bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20bc4:	4da2      	ldr	r5, [pc, #648]	; (20e50 <handle_at_tcp_server+0x2d4>)
			if (param_count < 3) {
   20bc6:	2e02      	cmp	r6, #2
			proxy.sec_tag = INVALID_SEC_TAG;
   20bc8:	606b      	str	r3, [r5, #4]
			if (param_count < 3) {
   20bca:	f000 80b1 	beq.w	20d30 <handle_at_tcp_server+0x1b4>
			err = at_params_short_get(&at_param_list, 2, &port);
   20bce:	2102      	movs	r1, #2
   20bd0:	489e      	ldr	r0, [pc, #632]	; (20e4c <handle_at_tcp_server+0x2d0>)
   20bd2:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   20bd6:	f019 fdf6 	bl	3a7c6 <at_params_short_get>
			if (err) {
   20bda:	4604      	mov	r4, r0
   20bdc:	2800      	cmp	r0, #0
   20bde:	f040 8093 	bne.w	20d08 <handle_at_tcp_server+0x18c>
			if (param_count > 3) {
   20be2:	2e03      	cmp	r6, #3
   20be4:	d004      	beq.n	20bf0 <handle_at_tcp_server+0x74>
				at_params_int_get(&at_param_list, 3,
   20be6:	2103      	movs	r1, #3
   20be8:	4898      	ldr	r0, [pc, #608]	; (20e4c <handle_at_tcp_server+0x2d0>)
   20bea:	1d2a      	adds	r2, r5, #4
   20bec:	f019 fdfd 	bl	3a7ea <at_params_int_get>
			err = do_tcp_server_start(port, proxy.sec_tag);
   20bf0:	686c      	ldr	r4, [r5, #4]
   20bf2:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26
	if (sec_tag == INVALID_SEC_TAG) {
   20bf6:	1c63      	adds	r3, r4, #1
	return z_impl_zsock_socket(family, type, proto);
   20bf8:	f04f 0101 	mov.w	r1, #1
   20bfc:	bf0c      	ite	eq
   20bfe:	2206      	moveq	r2, #6
   20c00:	f44f 7281 	movne.w	r2, #258	; 0x102
   20c04:	4608      	mov	r0, r1
   20c06:	f004 f8d7 	bl	24db8 <z_impl_zsock_socket>
		proxy.sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);
   20c0a:	6028      	str	r0, [r5, #0]
	if (proxy.sock < 0) {
   20c0c:	6828      	ldr	r0, [r5, #0]
   20c0e:	2800      	cmp	r0, #0
   20c10:	da2e      	bge.n	20c70 <handle_at_tcp_server+0xf4>
   20c12:	4a90      	ldr	r2, [pc, #576]	; (20e54 <handle_at_tcp_server+0x2d8>)
   20c14:	4c90      	ldr	r4, [pc, #576]	; (20e58 <handle_at_tcp_server+0x2dc>)
   20c16:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
   20c18:	f018 fb55 	bl	392c6 <__errno>
   20c1c:	08e4      	lsrs	r4, r4, #3
   20c1e:	6801      	ldr	r1, [r0, #0]
   20c20:	01a4      	lsls	r4, r4, #6
   20c22:	f044 0401 	orr.w	r4, r4, #1
   20c26:	4622      	mov	r2, r4
   20c28:	4249      	negs	r1, r1
   20c2a:	488c      	ldr	r0, [pc, #560]	; (20e5c <handle_at_tcp_server+0x2e0>)
   20c2c:	f017 fc57 	bl	384de <log_1>
		sprintf(rsp_buf, "#XTCPSVR: %d\r\n", -errno);
   20c30:	f018 fb49 	bl	392c6 <__errno>
   20c34:	6803      	ldr	r3, [r0, #0]
   20c36:	2100      	movs	r1, #0
   20c38:	425b      	negs	r3, r3
   20c3a:	f640 228c 	movw	r2, #2700	; 0xa8c
   20c3e:	9300      	str	r3, [sp, #0]
   20c40:	4887      	ldr	r0, [pc, #540]	; (20e60 <handle_at_tcp_server+0x2e4>)
   20c42:	4b88      	ldr	r3, [pc, #544]	; (20e64 <handle_at_tcp_server+0x2e8>)
   20c44:	f01a fced 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20c48:	4885      	ldr	r0, [pc, #532]	; (20e60 <handle_at_tcp_server+0x2e4>)
   20c4a:	f7fc fa11 	bl	1d070 <strlen>
   20c4e:	4601      	mov	r1, r0
   20c50:	4883      	ldr	r0, [pc, #524]	; (20e60 <handle_at_tcp_server+0x2e4>)
   20c52:	f7fd fac9 	bl	1e1e8 <rsp_send>
			return -errno;
   20c56:	f018 fb36 	bl	392c6 <__errno>
   20c5a:	6804      	ldr	r4, [r0, #0]
   20c5c:	4264      	negs	r4, r4
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   20c5e:	2c00      	cmp	r4, #0
   20c60:	d152      	bne.n	20d08 <handle_at_tcp_server+0x18c>
   20c62:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   20c66:	2b02      	cmp	r3, #2
   20c68:	d14e      	bne.n	20d08 <handle_at_tcp_server+0x18c>
				proxy.datamode = true;
   20c6a:	2301      	movs	r3, #1
   20c6c:	742b      	strb	r3, [r5, #16]
   20c6e:	e04b      	b.n	20d08 <handle_at_tcp_server+0x18c>
	if (sec_tag != INVALID_SEC_TAG) {
   20c70:	1c66      	adds	r6, r4, #1
   20c72:	d02f      	beq.n	20cd4 <handle_at_tcp_server+0x158>
		sec_tag_t sec_tag_list[1] = { sec_tag };
   20c74:	940a      	str	r4, [sp, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   20c76:	2304      	movs	r3, #4
   20c78:	2201      	movs	r2, #1
   20c7a:	9300      	str	r3, [sp, #0]
   20c7c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   20c80:	ab0a      	add	r3, sp, #40	; 0x28
   20c82:	f018 f8e9 	bl	38e58 <z_impl_zsock_setsockopt>
		if (ret) {
   20c86:	b328      	cbz	r0, 20cd4 <handle_at_tcp_server+0x158>
   20c88:	4a72      	ldr	r2, [pc, #456]	; (20e54 <handle_at_tcp_server+0x2d8>)
   20c8a:	4c73      	ldr	r4, [pc, #460]	; (20e58 <handle_at_tcp_server+0x2dc>)
   20c8c:	1aa4      	subs	r4, r4, r2
   20c8e:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set tag list failed: %d", -errno);
   20c90:	f018 fb19 	bl	392c6 <__errno>
   20c94:	01a4      	lsls	r4, r4, #6
   20c96:	f044 0401 	orr.w	r4, r4, #1
   20c9a:	4622      	mov	r2, r4
   20c9c:	6801      	ldr	r1, [r0, #0]
   20c9e:	4872      	ldr	r0, [pc, #456]	; (20e68 <handle_at_tcp_server+0x2ec>)
   20ca0:	4249      	negs	r1, r1
   20ca2:	f017 fc1c 	bl	384de <log_1>
			sprintf(rsp_buf, "#XTCPSVR: %d\r\n", -errno);
   20ca6:	f018 fb0e 	bl	392c6 <__errno>
   20caa:	6803      	ldr	r3, [r0, #0]
   20cac:	f640 228c 	movw	r2, #2700	; 0xa8c
   20cb0:	425b      	negs	r3, r3
   20cb2:	2100      	movs	r1, #0
   20cb4:	9300      	str	r3, [sp, #0]
   20cb6:	486a      	ldr	r0, [pc, #424]	; (20e60 <handle_at_tcp_server+0x2e4>)
   20cb8:	4b6a      	ldr	r3, [pc, #424]	; (20e64 <handle_at_tcp_server+0x2e8>)
   20cba:	f01a fcb2 	bl	3b622 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   20cbe:	4868      	ldr	r0, [pc, #416]	; (20e60 <handle_at_tcp_server+0x2e4>)
   20cc0:	f7fc f9d6 	bl	1d070 <strlen>
   20cc4:	4601      	mov	r1, r0
   20cc6:	4866      	ldr	r0, [pc, #408]	; (20e60 <handle_at_tcp_server+0x2e4>)
   20cc8:	f7fd fa8e 	bl	1e1e8 <rsp_send>
			close(proxy.sock);
   20ccc:	6828      	ldr	r0, [r5, #0]
   20cce:	f016 ff0d 	bl	37aec <close>
   20cd2:	e7c0      	b.n	20c56 <handle_at_tcp_server+0xda>
	local.sin_family = AF_INET;
   20cd4:	2601      	movs	r6, #1
	local.sin_port = htons(port);
   20cd6:	023b      	lsls	r3, r7, #8
   20cd8:	ea43 2317 	orr.w	r3, r3, r7, lsr #8
	ret = modem_info_params_get(&modem_param);
   20cdc:	4863      	ldr	r0, [pc, #396]	; (20e6c <handle_at_tcp_server+0x2f0>)
	local.sin_family = AF_INET;
   20cde:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
	local.sin_port = htons(port);
   20ce2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	ret = modem_info_params_get(&modem_param);
   20ce6:	f00a fa0f 	bl	2b108 <modem_info_params_get>
	if (ret) {
   20cea:	4604      	mov	r4, r0
   20cec:	b178      	cbz	r0, 20d0e <handle_at_tcp_server+0x192>
   20cee:	4b59      	ldr	r3, [pc, #356]	; (20e54 <handle_at_tcp_server+0x2d8>)
   20cf0:	4a59      	ldr	r2, [pc, #356]	; (20e58 <handle_at_tcp_server+0x2dc>)
		LOG_ERR("Unable to obtain modem parameters (%d)", ret);
   20cf2:	4601      	mov	r1, r0
   20cf4:	1ad2      	subs	r2, r2, r3
   20cf6:	08d2      	lsrs	r2, r2, #3
   20cf8:	0192      	lsls	r2, r2, #6
   20cfa:	485d      	ldr	r0, [pc, #372]	; (20e70 <handle_at_tcp_server+0x2f4>)
   20cfc:	4332      	orrs	r2, r6
   20cfe:	f017 fbee 	bl	384de <log_1>
		close(proxy.sock);
   20d02:	6828      	ldr	r0, [r5, #0]
   20d04:	f016 fef2 	bl	37aec <close>
}
   20d08:	4620      	mov	r0, r4
   20d0a:	b00d      	add	sp, #52	; 0x34
   20d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	addr_len = strlen(modem_param.network.ip_address.value_string);
   20d0e:	4859      	ldr	r0, [pc, #356]	; (20e74 <handle_at_tcp_server+0x2f8>)
   20d10:	f7fc f9ae 	bl	1d070 <strlen>
	if (addr_len == 0) {
   20d14:	b978      	cbnz	r0, 20d36 <handle_at_tcp_server+0x1ba>
   20d16:	4950      	ldr	r1, [pc, #320]	; (20e58 <handle_at_tcp_server+0x2dc>)
   20d18:	4b4e      	ldr	r3, [pc, #312]	; (20e54 <handle_at_tcp_server+0x2d8>)
		LOG_ERR("LTE not connected yet");
   20d1a:	4857      	ldr	r0, [pc, #348]	; (20e78 <handle_at_tcp_server+0x2fc>)
   20d1c:	1ac9      	subs	r1, r1, r3
   20d1e:	08c9      	lsrs	r1, r1, #3
   20d20:	0189      	lsls	r1, r1, #6
   20d22:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid local address");
   20d26:	f017 fbcb 	bl	384c0 <log_0>
		close(proxy.sock);
   20d2a:	6828      	ldr	r0, [r5, #0]
   20d2c:	f016 fede 	bl	37aec <close>
			return -EINVAL;
   20d30:	f06f 0415 	mvn.w	r4, #21
   20d34:	e7e8      	b.n	20d08 <handle_at_tcp_server+0x18c>
	if (!check_for_ipv4(modem_param.network.ip_address.value_string,
   20d36:	b2c1      	uxtb	r1, r0
   20d38:	484e      	ldr	r0, [pc, #312]	; (20e74 <handle_at_tcp_server+0x2f8>)
   20d3a:	f016 fea3 	bl	37a84 <check_for_ipv4>
   20d3e:	b940      	cbnz	r0, 20d52 <handle_at_tcp_server+0x1d6>
   20d40:	4945      	ldr	r1, [pc, #276]	; (20e58 <handle_at_tcp_server+0x2dc>)
   20d42:	4b44      	ldr	r3, [pc, #272]	; (20e54 <handle_at_tcp_server+0x2d8>)
		LOG_ERR("Invalid local address");
   20d44:	484d      	ldr	r0, [pc, #308]	; (20e7c <handle_at_tcp_server+0x300>)
   20d46:	1ac9      	subs	r1, r1, r3
   20d48:	08c9      	lsrs	r1, r1, #3
   20d4a:	0189      	lsls	r1, r1, #6
   20d4c:	f041 0101 	orr.w	r1, r1, #1
   20d50:	e7e9      	b.n	20d26 <handle_at_tcp_server+0x1aa>
	return z_impl_zsock_inet_pton(family, src, dst);
   20d52:	4948      	ldr	r1, [pc, #288]	; (20e74 <handle_at_tcp_server+0x2f8>)
   20d54:	4630      	mov	r0, r6
   20d56:	aa0b      	add	r2, sp, #44	; 0x2c
   20d58:	f018 f85c 	bl	38e14 <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, modem_param.network.ip_address.value_string,
   20d5c:	2801      	cmp	r0, #1
   20d5e:	4607      	mov	r7, r0
   20d60:	d00f      	beq.n	20d82 <handle_at_tcp_server+0x206>
   20d62:	4a3c      	ldr	r2, [pc, #240]	; (20e54 <handle_at_tcp_server+0x2d8>)
   20d64:	4c3c      	ldr	r4, [pc, #240]	; (20e58 <handle_at_tcp_server+0x2dc>)
   20d66:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Parse local IP address failed: %d", -errno);
   20d68:	f018 faad 	bl	392c6 <__errno>
   20d6c:	08e4      	lsrs	r4, r4, #3
   20d6e:	6801      	ldr	r1, [r0, #0]
   20d70:	01a4      	lsls	r4, r4, #6
   20d72:	f044 0401 	orr.w	r4, r4, #1
   20d76:	4622      	mov	r2, r4
   20d78:	4841      	ldr	r0, [pc, #260]	; (20e80 <handle_at_tcp_server+0x304>)
   20d7a:	4249      	negs	r1, r1
   20d7c:	f017 fbaf 	bl	384de <log_1>
		close(proxy.sock);
   20d80:	e7d3      	b.n	20d2a <handle_at_tcp_server+0x1ae>
	ret = bind(proxy.sock, (struct sockaddr *)&local,
   20d82:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_bind(sock, addr, addrlen);
   20d84:	2208      	movs	r2, #8
   20d86:	a90a      	add	r1, sp, #40	; 0x28
   20d88:	f017 ffb4 	bl	38cf4 <z_impl_zsock_bind>
	if (ret) {
   20d8c:	4606      	mov	r6, r0
   20d8e:	b168      	cbz	r0, 20dac <handle_at_tcp_server+0x230>
   20d90:	4a30      	ldr	r2, [pc, #192]	; (20e54 <handle_at_tcp_server+0x2d8>)
   20d92:	4e31      	ldr	r6, [pc, #196]	; (20e58 <handle_at_tcp_server+0x2dc>)
   20d94:	1ab6      	subs	r6, r6, r2
		LOG_ERR("bind() failed: %d", -errno);
   20d96:	f018 fa96 	bl	392c6 <__errno>
   20d9a:	08f6      	lsrs	r6, r6, #3
   20d9c:	6801      	ldr	r1, [r0, #0]
   20d9e:	01b6      	lsls	r6, r6, #6
   20da0:	f046 0601 	orr.w	r6, r6, #1
   20da4:	4632      	mov	r2, r6
   20da6:	4837      	ldr	r0, [pc, #220]	; (20e84 <handle_at_tcp_server+0x308>)
   20da8:	4249      	negs	r1, r1
   20daa:	e77a      	b.n	20ca2 <handle_at_tcp_server+0x126>
	ret = listen(proxy.sock, 1);
   20dac:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_listen(sock, backlog);
   20dae:	4639      	mov	r1, r7
   20db0:	f017 ffcc 	bl	38d4c <z_impl_zsock_listen>
	if (ret < 0) {
   20db4:	1e04      	subs	r4, r0, #0
   20db6:	da0d      	bge.n	20dd4 <handle_at_tcp_server+0x258>
   20db8:	4a26      	ldr	r2, [pc, #152]	; (20e54 <handle_at_tcp_server+0x2d8>)
   20dba:	4c27      	ldr	r4, [pc, #156]	; (20e58 <handle_at_tcp_server+0x2dc>)
   20dbc:	1aa4      	subs	r4, r4, r2
		LOG_ERR("listen() failed: %d", -errno);
   20dbe:	f018 fa82 	bl	392c6 <__errno>
   20dc2:	08e4      	lsrs	r4, r4, #3
   20dc4:	6801      	ldr	r1, [r0, #0]
   20dc6:	01a4      	lsls	r4, r4, #6
   20dc8:	f044 0401 	orr.w	r4, r4, #1
   20dcc:	4622      	mov	r2, r4
   20dce:	482e      	ldr	r0, [pc, #184]	; (20e88 <handle_at_tcp_server+0x30c>)
   20dd0:	4249      	negs	r1, r1
   20dd2:	e766      	b.n	20ca2 <handle_at_tcp_server+0x126>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20dd4:	2200      	movs	r2, #0
   20dd6:	2300      	movs	r3, #0
   20dd8:	2004      	movs	r0, #4
   20dda:	e9cd 2306 	strd	r2, r3, [sp, #24]
   20dde:	230e      	movs	r3, #14
   20de0:	f44f 6264 	mov.w	r2, #3648	; 0xe40
   20de4:	e9cd 3003 	strd	r3, r0, [sp, #12]
   20de8:	e9cd 6601 	strd	r6, r6, [sp, #4]
   20dec:	4b27      	ldr	r3, [pc, #156]	; (20e8c <handle_at_tcp_server+0x310>)
   20dee:	4928      	ldr	r1, [pc, #160]	; (20e90 <handle_at_tcp_server+0x314>)
   20df0:	9600      	str	r6, [sp, #0]
   20df2:	4828      	ldr	r0, [pc, #160]	; (20e94 <handle_at_tcp_server+0x318>)
   20df4:	f015 fb32 	bl	3645c <z_impl_k_thread_create>
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   20df8:	4b27      	ldr	r3, [pc, #156]	; (20e98 <handle_at_tcp_server+0x31c>)
	sprintf(rsp_buf, "#XTCPSVR: %d started\r\n", proxy.sock);
   20dfa:	4631      	mov	r1, r6
	tcp_thread_id = k_thread_create(&tcp_thread, tcp_thread_stack,
   20dfc:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XTCPSVR: %d started\r\n", proxy.sock);
   20dfe:	682b      	ldr	r3, [r5, #0]
   20e00:	f640 228c 	movw	r2, #2700	; 0xa8c
   20e04:	9300      	str	r3, [sp, #0]
   20e06:	4816      	ldr	r0, [pc, #88]	; (20e60 <handle_at_tcp_server+0x2e4>)
   20e08:	4b24      	ldr	r3, [pc, #144]	; (20e9c <handle_at_tcp_server+0x320>)
	proxy.role = AT_TCP_ROLE_SERVER;
   20e0a:	60ef      	str	r7, [r5, #12]
	sprintf(rsp_buf, "#XTCPSVR: %d started\r\n", proxy.sock);
   20e0c:	f01a fc09 	bl	3b622 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   20e10:	4813      	ldr	r0, [pc, #76]	; (20e60 <handle_at_tcp_server+0x2e4>)
   20e12:	f7fc f92d 	bl	1d070 <strlen>
   20e16:	4601      	mov	r1, r0
   20e18:	4811      	ldr	r0, [pc, #68]	; (20e60 <handle_at_tcp_server+0x2e4>)
   20e1a:	f7fd f9e5 	bl	1e1e8 <rsp_send>
	return ret;
   20e1e:	e71e      	b.n	20c5e <handle_at_tcp_server+0xe2>
		} else if (op == AT_SERVER_STOP) {
   20e20:	2b00      	cmp	r3, #0
   20e22:	f47f af71 	bne.w	20d08 <handle_at_tcp_server+0x18c>
			if (proxy.sock < 0) {
   20e26:	4b0a      	ldr	r3, [pc, #40]	; (20e50 <handle_at_tcp_server+0x2d4>)
   20e28:	681b      	ldr	r3, [r3, #0]
   20e2a:	2b00      	cmp	r3, #0
   20e2c:	da0a      	bge.n	20e44 <handle_at_tcp_server+0x2c8>
   20e2e:	4b09      	ldr	r3, [pc, #36]	; (20e54 <handle_at_tcp_server+0x2d8>)
   20e30:	4909      	ldr	r1, [pc, #36]	; (20e58 <handle_at_tcp_server+0x2dc>)
				LOG_WRN("Server is not running");
   20e32:	481b      	ldr	r0, [pc, #108]	; (20ea0 <handle_at_tcp_server+0x324>)
   20e34:	1ac9      	subs	r1, r1, r3
   20e36:	08c9      	lsrs	r1, r1, #3
   20e38:	0189      	lsls	r1, r1, #6
   20e3a:	f041 0102 	orr.w	r1, r1, #2
   20e3e:	f017 fb3f 	bl	384c0 <log_0>
				return -EINVAL;
   20e42:	e775      	b.n	20d30 <handle_at_tcp_server+0x1b4>
			err = do_tcp_server_stop(0);
   20e44:	f7ff fc0e 	bl	20664 <do_tcp_server_stop>
   20e48:	4604      	mov	r4, r0
   20e4a:	e75d      	b.n	20d08 <handle_at_tcp_server+0x18c>
   20e4c:	20023430 	.word	0x20023430
   20e50:	20023490 	.word	0x20023490
   20e54:	0003c2cc 	.word	0x0003c2cc
   20e58:	0003c39c 	.word	0x0003c39c
   20e5c:	0003d930 	.word	0x0003d930
   20e60:	20028950 	.word	0x20028950
   20e64:	0003dc75 	.word	0x0003dc75
   20e68:	0003daf1 	.word	0x0003daf1
   20e6c:	20020900 	.word	0x20020900
   20e70:	0003d873 	.word	0x0003d873
   20e74:	20020c12 	.word	0x20020c12
   20e78:	0003d89a 	.word	0x0003d89a
   20e7c:	0003d8b0 	.word	0x0003d8b0
   20e80:	0003d8c6 	.word	0x0003d8c6
   20e84:	0003d8e8 	.word	0x0003d8e8
   20e88:	0003d801 	.word	0x0003d801
   20e8c:	000208ed 	.word	0x000208ed
   20e90:	2002d518 	.word	0x2002d518
   20e94:	200212c8 	.word	0x200212c8
   20e98:	200234ac 	.word	0x200234ac
   20e9c:	0003dc84 	.word	0x0003dc84
   20ea0:	0003dc9b 	.word	0x0003dc9b
		if (proxy.sock != INVALID_SOCKET &&
   20ea4:	4b1e      	ldr	r3, [pc, #120]	; (20f20 <handle_at_tcp_server+0x3a4>)
   20ea6:	681a      	ldr	r2, [r3, #0]
   20ea8:	1c51      	adds	r1, r2, #1
   20eaa:	d017      	beq.n	20edc <handle_at_tcp_server+0x360>
   20eac:	68d9      	ldr	r1, [r3, #12]
   20eae:	2901      	cmp	r1, #1
   20eb0:	d114      	bne.n	20edc <handle_at_tcp_server+0x360>
			sprintf(rsp_buf, "#XTCPSVR: %d, %d, %d\r\n",
   20eb2:	7c19      	ldrb	r1, [r3, #16]
   20eb4:	481b      	ldr	r0, [pc, #108]	; (20f24 <handle_at_tcp_server+0x3a8>)
   20eb6:	9102      	str	r1, [sp, #8]
   20eb8:	689b      	ldr	r3, [r3, #8]
   20eba:	2100      	movs	r1, #0
   20ebc:	e9cd 2300 	strd	r2, r3, [sp]
   20ec0:	f640 228c 	movw	r2, #2700	; 0xa8c
   20ec4:	4b18      	ldr	r3, [pc, #96]	; (20f28 <handle_at_tcp_server+0x3ac>)
   20ec6:	f01a fbac 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20eca:	4816      	ldr	r0, [pc, #88]	; (20f24 <handle_at_tcp_server+0x3a8>)
   20ecc:	f7fc f8d0 	bl	1d070 <strlen>
   20ed0:	4601      	mov	r1, r0
   20ed2:	4814      	ldr	r0, [pc, #80]	; (20f24 <handle_at_tcp_server+0x3a8>)
   20ed4:	f7fd f988 	bl	1e1e8 <rsp_send>
		err = 0;
   20ed8:	2400      	movs	r4, #0
		break;
   20eda:	e715      	b.n	20d08 <handle_at_tcp_server+0x18c>
			sprintf(rsp_buf, "#XTCPSVR: %d, %d\r\n",
   20edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20ee0:	f640 228c 	movw	r2, #2700	; 0xa8c
   20ee4:	e9cd 3300 	strd	r3, r3, [sp]
   20ee8:	2100      	movs	r1, #0
   20eea:	4b10      	ldr	r3, [pc, #64]	; (20f2c <handle_at_tcp_server+0x3b0>)
   20eec:	480d      	ldr	r0, [pc, #52]	; (20f24 <handle_at_tcp_server+0x3a8>)
   20eee:	f01a fb98 	bl	3b622 <__sprintf_chk>
   20ef2:	e7ea      	b.n	20eca <handle_at_tcp_server+0x34e>
		sprintf(rsp_buf, "#XTCPSVR: (%d, %d, %d),<port>,<sec_tag>\r\n",
   20ef4:	2400      	movs	r4, #0
   20ef6:	2301      	movs	r3, #1
   20ef8:	2202      	movs	r2, #2
   20efa:	4621      	mov	r1, r4
   20efc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   20f00:	9400      	str	r4, [sp, #0]
   20f02:	f640 228c 	movw	r2, #2700	; 0xa8c
   20f06:	4b0a      	ldr	r3, [pc, #40]	; (20f30 <handle_at_tcp_server+0x3b4>)
   20f08:	4806      	ldr	r0, [pc, #24]	; (20f24 <handle_at_tcp_server+0x3a8>)
   20f0a:	f01a fb8a 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   20f0e:	4805      	ldr	r0, [pc, #20]	; (20f24 <handle_at_tcp_server+0x3a8>)
   20f10:	f7fc f8ae 	bl	1d070 <strlen>
   20f14:	4601      	mov	r1, r0
   20f16:	4803      	ldr	r0, [pc, #12]	; (20f24 <handle_at_tcp_server+0x3a8>)
   20f18:	f7fd f966 	bl	1e1e8 <rsp_send>
		break;
   20f1c:	e6f4      	b.n	20d08 <handle_at_tcp_server+0x18c>
   20f1e:	bf00      	nop
   20f20:	20023490 	.word	0x20023490
   20f24:	20028950 	.word	0x20028950
   20f28:	0003dcb1 	.word	0x0003dcb1
   20f2c:	0003dcc8 	.word	0x0003dcc8
   20f30:	0003dcdb 	.word	0x0003dcdb

00020f34 <slm_at_tcp_proxy_uninit>:

/**@brief API to uninitialize TCP proxy AT commands handler
 */
int slm_at_tcp_proxy_uninit(void)
{
	if (proxy.role == AT_TCP_ROLE_CLIENT) {
   20f34:	4b05      	ldr	r3, [pc, #20]	; (20f4c <slm_at_tcp_proxy_uninit+0x18>)
   20f36:	68d8      	ldr	r0, [r3, #12]
   20f38:	b908      	cbnz	r0, 20f3e <slm_at_tcp_proxy_uninit+0xa>
		return do_tcp_client_disconnect(0);
   20f3a:	f7ff b985 	b.w	20248 <do_tcp_client_disconnect>
	}
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   20f3e:	2801      	cmp	r0, #1
		return do_tcp_server_stop(0);
   20f40:	f04f 0000 	mov.w	r0, #0
	if (proxy.role == AT_TCP_ROLE_SERVER) {
   20f44:	d101      	bne.n	20f4a <slm_at_tcp_proxy_uninit+0x16>
		return do_tcp_server_stop(0);
   20f46:	f7ff bb8d 	b.w	20664 <do_tcp_server_stop>
	}

	return 0;
}
   20f4a:	4770      	bx	lr
   20f4c:	20023490 	.word	0x20023490

00020f50 <udp_thread_func>:
}

static void udp_thread_func(void *p1, void *p2, void *p3)
{
	int ret;
	int size = sizeof(struct sockaddr_in);
   20f50:	2308      	movs	r3, #8
{
   20f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20f56:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
   20f5a:	4d36      	ldr	r5, [pc, #216]	; (21034 <udp_thread_func+0xe4>)
	int size = sizeof(struct sockaddr_in);
   20f5c:	9305      	str	r3, [sp, #20]
   20f5e:	4b36      	ldr	r3, [pc, #216]	; (21038 <udp_thread_func+0xe8>)
	ARG_UNUSED(p1);
	ARG_UNUSED(p2);
	ARG_UNUSED(p3);

	do {
		ret = recvfrom(udp_sock, data, NET_IPV4_MTU, 0,
   20f60:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 21054 <udp_thread_func+0x104>
   20f64:	1aed      	subs	r5, r5, r3
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   20f66:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 21058 <udp_thread_func+0x108>
			continue;
		}
		if (ret == 0) {
			continue;
		}
		if (udp_datamode) {
   20f6a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 2105c <udp_thread_func+0x10c>
	int size = sizeof(struct sockaddr_in);
   20f6e:	af05      	add	r7, sp, #20
   20f70:	08ed      	lsrs	r5, r5, #3
		ret = recvfrom(udp_sock, data, NET_IPV4_MTU, 0,
   20f72:	f8d8 0000 	ldr.w	r0, [r8]
   20f76:	2300      	movs	r3, #0
   20f78:	f44f 7210 	mov.w	r2, #576	; 0x240
   20f7c:	e9cd 9700 	strd	r9, r7, [sp]
   20f80:	a906      	add	r1, sp, #24
   20f82:	f017 ff2a 	bl	38dda <z_impl_zsock_recvfrom>
		if (ret < 0) {
   20f86:	1e04      	subs	r4, r0, #0
   20f88:	da0b      	bge.n	20fa2 <udp_thread_func+0x52>
			LOG_WRN("recv() error: %d", -errno);
   20f8a:	f018 f99c 	bl	392c6 <__errno>
   20f8e:	01ac      	lsls	r4, r5, #6
   20f90:	f044 0402 	orr.w	r4, r4, #2
   20f94:	4622      	mov	r2, r4
   20f96:	6801      	ldr	r1, [r0, #0]
   20f98:	4828      	ldr	r0, [pc, #160]	; (2103c <udp_thread_func+0xec>)
   20f9a:	4249      	negs	r1, r1
					DATATYPE_HEXADECIMAL, ret);
				rsp_send(rsp_buf, strlen(rsp_buf));
				rsp_send(data_hex, ret);
				rsp_send("\r\n", 2);
			} else {
				LOG_WRN("hex convert error: %d", ret);
   20f9c:	f017 fa9f 	bl	384de <log_1>
   20fa0:	e7e7      	b.n	20f72 <udp_thread_func+0x22>
		if (ret == 0) {
   20fa2:	d0e6      	beq.n	20f72 <udp_thread_func+0x22>
		if (udp_datamode) {
   20fa4:	f89a 6000 	ldrb.w	r6, [sl]
   20fa8:	b126      	cbz	r6, 20fb4 <udp_thread_func+0x64>
			rsp_send(data, ret);
   20faa:	4621      	mov	r1, r4
   20fac:	a806      	add	r0, sp, #24
		} else {
			sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
				DATATYPE_PLAINTEXT, ret);
			rsp_send(rsp_buf, strlen(rsp_buf));
			rsp_send(data, ret);
			rsp_send("\r\n", 2);
   20fae:	f7fd f91b 	bl	1e1e8 <rsp_send>
   20fb2:	e7de      	b.n	20f72 <udp_thread_func+0x22>
		} else if (slm_util_hex_check(data, ret)) {
   20fb4:	b2a1      	uxth	r1, r4
   20fb6:	a806      	add	r0, sp, #24
   20fb8:	9103      	str	r1, [sp, #12]
   20fba:	f016 fd2c 	bl	37a16 <slm_util_hex_check>
   20fbe:	b328      	cbz	r0, 2100c <udp_thread_func+0xbc>
			ret = slm_util_htoa(data, ret, data_hex,
   20fc0:	f44f 6390 	mov.w	r3, #1152	; 0x480
   20fc4:	4a1e      	ldr	r2, [pc, #120]	; (21040 <udp_thread_func+0xf0>)
   20fc6:	9903      	ldr	r1, [sp, #12]
   20fc8:	a806      	add	r0, sp, #24
   20fca:	f7fc ffdd 	bl	1df88 <slm_util_htoa>
			if (ret > 0) {
   20fce:	1e04      	subs	r4, r0, #0
   20fd0:	dd16      	ble.n	21000 <udp_thread_func+0xb0>
				sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
   20fd2:	f640 228c 	movw	r2, #2700	; 0xa8c
   20fd6:	4631      	mov	r1, r6
   20fd8:	4b1a      	ldr	r3, [pc, #104]	; (21044 <udp_thread_func+0xf4>)
   20fda:	e9cd 6400 	strd	r6, r4, [sp]
   20fde:	481a      	ldr	r0, [pc, #104]	; (21048 <udp_thread_func+0xf8>)
   20fe0:	f01a fb1f 	bl	3b622 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   20fe4:	4818      	ldr	r0, [pc, #96]	; (21048 <udp_thread_func+0xf8>)
   20fe6:	f7fc f843 	bl	1d070 <strlen>
   20fea:	4601      	mov	r1, r0
   20fec:	4816      	ldr	r0, [pc, #88]	; (21048 <udp_thread_func+0xf8>)
   20fee:	f7fd f8fb 	bl	1e1e8 <rsp_send>
				rsp_send(data_hex, ret);
   20ff2:	4621      	mov	r1, r4
   20ff4:	4812      	ldr	r0, [pc, #72]	; (21040 <udp_thread_func+0xf0>)
			rsp_send(data, ret);
   20ff6:	f7fd f8f7 	bl	1e1e8 <rsp_send>
			rsp_send("\r\n", 2);
   20ffa:	2102      	movs	r1, #2
   20ffc:	4813      	ldr	r0, [pc, #76]	; (2104c <udp_thread_func+0xfc>)
   20ffe:	e7d6      	b.n	20fae <udp_thread_func+0x5e>
				LOG_WRN("hex convert error: %d", ret);
   21000:	01aa      	lsls	r2, r5, #6
   21002:	4621      	mov	r1, r4
   21004:	4812      	ldr	r0, [pc, #72]	; (21050 <udp_thread_func+0x100>)
   21006:	f042 0202 	orr.w	r2, r2, #2
   2100a:	e7c7      	b.n	20f9c <udp_thread_func+0x4c>
			sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
   2100c:	2301      	movs	r3, #1
   2100e:	4601      	mov	r1, r0
   21010:	f640 228c 	movw	r2, #2700	; 0xa8c
   21014:	9300      	str	r3, [sp, #0]
   21016:	480c      	ldr	r0, [pc, #48]	; (21048 <udp_thread_func+0xf8>)
   21018:	4b0a      	ldr	r3, [pc, #40]	; (21044 <udp_thread_func+0xf4>)
   2101a:	9401      	str	r4, [sp, #4]
   2101c:	f01a fb01 	bl	3b622 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   21020:	4809      	ldr	r0, [pc, #36]	; (21048 <udp_thread_func+0xf8>)
   21022:	f7fc f825 	bl	1d070 <strlen>
   21026:	4601      	mov	r1, r0
   21028:	4807      	ldr	r0, [pc, #28]	; (21048 <udp_thread_func+0xf8>)
   2102a:	f7fd f8dd 	bl	1e1e8 <rsp_send>
			rsp_send(data, ret);
   2102e:	4621      	mov	r1, r4
   21030:	a806      	add	r0, sp, #24
   21032:	e7e0      	b.n	20ff6 <udp_thread_func+0xa6>
   21034:	0003c3b4 	.word	0x0003c3b4
   21038:	0003c2cc 	.word	0x0003c2cc
   2103c:	0003d716 	.word	0x0003d716
   21040:	2002b4bc 	.word	0x2002b4bc
   21044:	0003dd3d 	.word	0x0003dd3d
   21048:	20028950 	.word	0x20028950
   2104c:	00040191 	.word	0x00040191
   21050:	0003d6a6 	.word	0x0003d6a6
   21054:	200234b8 	.word	0x200234b8
   21058:	200234b0 	.word	0x200234b0
   2105c:	2002b93c 	.word	0x2002b93c

00021060 <slm_at_udp_proxy_parse>:
}

/**@brief API to handle UDP Proxy AT commands
 */
int slm_at_udp_proxy_parse(const char *at_cmd, uint16_t length)
{
   21060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21064:	460e      	mov	r6, r1
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
		if (slm_util_cmd_casecmp(at_cmd,
   21066:	4931      	ldr	r1, [pc, #196]	; (2112c <slm_at_udp_proxy_parse+0xcc>)
{
   21068:	4605      	mov	r5, r0
		if (slm_util_cmd_casecmp(at_cmd,
   2106a:	f7fc ff57 	bl	1df1c <slm_util_cmd_casecmp>
   2106e:	bb00      	cbnz	r0, 210b2 <slm_at_udp_proxy_parse+0x52>
   21070:	4628      	mov	r0, r5
   21072:	492f      	ldr	r1, [pc, #188]	; (21130 <slm_at_udp_proxy_parse+0xd0>)
   21074:	f7fc ff52 	bl	1df1c <slm_util_cmd_casecmp>
   21078:	b9e8      	cbnz	r0, 210b6 <slm_at_udp_proxy_parse+0x56>
   2107a:	4628      	mov	r0, r5
   2107c:	492d      	ldr	r1, [pc, #180]	; (21134 <slm_at_udp_proxy_parse+0xd4>)
   2107e:	f7fc ff4d 	bl	1df1c <slm_util_cmd_casecmp>
   21082:	b328      	cbz	r0, 210d0 <slm_at_udp_proxy_parse+0x70>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   21084:	2402      	movs	r4, #2
					udp_proxy_at_list[i].string)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
   21086:	2100      	movs	r1, #0
   21088:	4628      	mov	r0, r5
   2108a:	4a2b      	ldr	r2, [pc, #172]	; (21138 <slm_at_udp_proxy_parse+0xd8>)
   2108c:	f019 fa9b 	bl	3a5c6 <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
   21090:	4601      	mov	r1, r0
   21092:	b190      	cbz	r0, 210ba <slm_at_udp_proxy_parse+0x5a>
   21094:	4b29      	ldr	r3, [pc, #164]	; (2113c <slm_at_udp_proxy_parse+0xdc>)
   21096:	4a2a      	ldr	r2, [pc, #168]	; (21140 <slm_at_udp_proxy_parse+0xe0>)
				LOG_ERR("Failed to parse AT command %d", ret);
   21098:	482a      	ldr	r0, [pc, #168]	; (21144 <slm_at_udp_proxy_parse+0xe4>)
   2109a:	1ad2      	subs	r2, r2, r3
   2109c:	08d2      	lsrs	r2, r2, #3
   2109e:	0192      	lsls	r2, r2, #6
   210a0:	f042 0201 	orr.w	r2, r2, #1
   210a4:	f017 fa1b 	bl	384de <log_1>
				return -EINVAL;
   210a8:	f06f 0015 	mvn.w	r0, #21
	if (ret == -ENOENT && udp_datamode) {
		ret = do_udp_send_datamode(at_cmd, length);
	}

	return ret;
}
   210ac:	b003      	add	sp, #12
   210ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   210b2:	2400      	movs	r4, #0
   210b4:	e7e7      	b.n	21086 <slm_at_udp_proxy_parse+0x26>
   210b6:	2401      	movs	r4, #1
   210b8:	e7e5      	b.n	21086 <slm_at_udp_proxy_parse+0x26>
			type = at_parser_cmd_type_get(at_cmd);
   210ba:	4628      	mov	r0, r5
   210bc:	f019 fa86 	bl	3a5cc <at_parser_cmd_type_get>
			ret = udp_proxy_at_list[i].handler(type);
   210c0:	220c      	movs	r2, #12
   210c2:	4b21      	ldr	r3, [pc, #132]	; (21148 <slm_at_udp_proxy_parse+0xe8>)
   210c4:	fb02 3404 	mla	r4, r2, r4, r3
   210c8:	68a3      	ldr	r3, [r4, #8]
   210ca:	4798      	blx	r3
	if (ret == -ENOENT && udp_datamode) {
   210cc:	1c83      	adds	r3, r0, #2
   210ce:	d1ed      	bne.n	210ac <slm_at_udp_proxy_parse+0x4c>
   210d0:	4b1e      	ldr	r3, [pc, #120]	; (2114c <slm_at_udp_proxy_parse+0xec>)
   210d2:	781b      	ldrb	r3, [r3, #0]
   210d4:	bb13      	cbnz	r3, 2111c <slm_at_udp_proxy_parse+0xbc>
   210d6:	f06f 0001 	mvn.w	r0, #1
   210da:	e7e7      	b.n	210ac <slm_at_udp_proxy_parse+0x4c>
		offset += ret;
   210dc:	4404      	add	r4, r0
	while (offset < datalen) {
   210de:	42b4      	cmp	r4, r6
   210e0:	d21a      	bcs.n	21118 <slm_at_udp_proxy_parse+0xb8>
		ret = sendto(udp_sock, data + offset, datalen - offset, 0,
   210e2:	6838      	ldr	r0, [r7, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   210e4:	2300      	movs	r3, #0
   210e6:	e9cd 9800 	strd	r9, r8, [sp]
   210ea:	1b32      	subs	r2, r6, r4
   210ec:	1929      	adds	r1, r5, r4
   210ee:	f017 fe57 	bl	38da0 <z_impl_zsock_sendto>
		if (ret < 0) {
   210f2:	2800      	cmp	r0, #0
   210f4:	daf2      	bge.n	210dc <slm_at_udp_proxy_parse+0x7c>
   210f6:	4a11      	ldr	r2, [pc, #68]	; (2113c <slm_at_udp_proxy_parse+0xdc>)
   210f8:	4d11      	ldr	r5, [pc, #68]	; (21140 <slm_at_udp_proxy_parse+0xe0>)
   210fa:	1aad      	subs	r5, r5, r2
			LOG_ERR("send() failed: %d", -errno);
   210fc:	f018 f8e3 	bl	392c6 <__errno>
   21100:	08ed      	lsrs	r5, r5, #3
   21102:	6801      	ldr	r1, [r0, #0]
   21104:	01ad      	lsls	r5, r5, #6
   21106:	f045 0501 	orr.w	r5, r5, #1
   2110a:	462a      	mov	r2, r5
   2110c:	4810      	ldr	r0, [pc, #64]	; (21150 <slm_at_udp_proxy_parse+0xf0>)
   2110e:	4249      	negs	r1, r1
   21110:	f017 f9e5 	bl	384de <log_1>
			ret = -errno;
   21114:	f018 f8d7 	bl	392c6 <__errno>
	return offset;
   21118:	4620      	mov	r0, r4
   2111a:	e7c7      	b.n	210ac <slm_at_udp_proxy_parse+0x4c>
	uint32_t offset = 0;
   2111c:	2400      	movs	r4, #0
   2111e:	f04f 0808 	mov.w	r8, #8
		ret = sendto(udp_sock, data + offset, datalen - offset, 0,
   21122:	4f0c      	ldr	r7, [pc, #48]	; (21154 <slm_at_udp_proxy_parse+0xf4>)
   21124:	f8df 9030 	ldr.w	r9, [pc, #48]	; 21158 <slm_at_udp_proxy_parse+0xf8>
   21128:	e7d9      	b.n	210de <slm_at_udp_proxy_parse+0x7e>
   2112a:	bf00      	nop
   2112c:	0003dd51 	.word	0x0003dd51
   21130:	0003dd5c 	.word	0x0003dd5c
   21134:	0003dd67 	.word	0x0003dd67
   21138:	20023430 	.word	0x20023430
   2113c:	0003c2cc 	.word	0x0003c2cc
   21140:	0003c3b4 	.word	0x0003c3b4
   21144:	0003d35e 	.word	0x0003d35e
   21148:	0003c5dc 	.word	0x0003c5dc
   2114c:	2002b93c 	.word	0x2002b93c
   21150:	0003d75a 	.word	0x0003d75a
   21154:	200234b8 	.word	0x200234b8
   21158:	200234b0 	.word	0x200234b0

0002115c <slm_at_udp_proxy_clac>:

/**@brief API to list UDP Proxy AT commands
 */
void slm_at_udp_proxy_clac(void)
{
   2115c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   2115e:	2400      	movs	r4, #0
   21160:	4d0c      	ldr	r5, [pc, #48]	; (21194 <slm_at_udp_proxy_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", udp_proxy_at_list[i].string);
   21162:	4f0d      	ldr	r7, [pc, #52]	; (21198 <slm_at_udp_proxy_clac+0x3c>)
   21164:	4e0d      	ldr	r6, [pc, #52]	; (2119c <slm_at_udp_proxy_clac+0x40>)
   21166:	686b      	ldr	r3, [r5, #4]
   21168:	f640 228c 	movw	r2, #2700	; 0xa8c
   2116c:	2100      	movs	r1, #0
   2116e:	9300      	str	r3, [sp, #0]
   21170:	4630      	mov	r0, r6
   21172:	463b      	mov	r3, r7
   21174:	f01a fa55 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   21178:	4630      	mov	r0, r6
   2117a:	f7fb ff79 	bl	1d070 <strlen>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   2117e:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
   21180:	4601      	mov	r1, r0
   21182:	4630      	mov	r0, r6
   21184:	f7fd f830 	bl	1e1e8 <rsp_send>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   21188:	2c03      	cmp	r4, #3
   2118a:	f105 050c 	add.w	r5, r5, #12
   2118e:	d1ea      	bne.n	21166 <slm_at_udp_proxy_clac+0xa>
	}
}
   21190:	b003      	add	sp, #12
   21192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21194:	0003c5dc 	.word	0x0003c5dc
   21198:	0003d557 	.word	0x0003d557
   2119c:	20028950 	.word	0x20028950

000211a0 <slm_at_udp_proxy_init>:

/**@brief API to initialize UDP Proxy AT commands handler
 */
int slm_at_udp_proxy_init(void)
{
	udp_sock = INVALID_SOCKET;
   211a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	udp_datamode = false;
   211a4:	2000      	movs	r0, #0
	udp_sock = INVALID_SOCKET;
   211a6:	4b04      	ldr	r3, [pc, #16]	; (211b8 <slm_at_udp_proxy_init+0x18>)
   211a8:	601a      	str	r2, [r3, #0]
	udp_datamode = false;
   211aa:	4b04      	ldr	r3, [pc, #16]	; (211bc <slm_at_udp_proxy_init+0x1c>)
	remote.sin_family = AF_UNSPEC;
   211ac:	4a04      	ldr	r2, [pc, #16]	; (211c0 <slm_at_udp_proxy_init+0x20>)
	udp_datamode = false;
   211ae:	7018      	strb	r0, [r3, #0]
	remote.sin_family = AF_UNSPEC;
   211b0:	4b04      	ldr	r3, [pc, #16]	; (211c4 <slm_at_udp_proxy_init+0x24>)
   211b2:	601a      	str	r2, [r3, #0]
	remote.sin_port = INVALID_PORT;

	return 0;
}
   211b4:	4770      	bx	lr
   211b6:	bf00      	nop
   211b8:	200234b8 	.word	0x200234b8
   211bc:	2002b93c 	.word	0x2002b93c
   211c0:	ffff0000 	.word	0xffff0000
   211c4:	200234b0 	.word	0x200234b0

000211c8 <do_udp_server_stop.part.0>:
		k_thread_abort(udp_thread_id);
   211c8:	4b1c      	ldr	r3, [pc, #112]	; (2123c <do_udp_server_stop.part.0+0x74>)
static int do_udp_server_stop(int error)
   211ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   211cc:	4605      	mov	r5, r0
		k_thread_abort(udp_thread_id);
   211ce:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   211d0:	f005 f930 	bl	26434 <z_impl_k_thread_abort>
		ret = close(udp_sock);
   211d4:	4b1a      	ldr	r3, [pc, #104]	; (21240 <do_udp_server_stop.part.0+0x78>)
   211d6:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_close(sock);
   211d8:	f017 fd75 	bl	38cc6 <z_impl_zsock_close>
		if (ret < 0) {
   211dc:	1e04      	subs	r4, r0, #0
   211de:	da12      	bge.n	21206 <do_udp_server_stop.part.0+0x3e>
   211e0:	4a18      	ldr	r2, [pc, #96]	; (21244 <do_udp_server_stop.part.0+0x7c>)
   211e2:	4c19      	ldr	r4, [pc, #100]	; (21248 <do_udp_server_stop.part.0+0x80>)
   211e4:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   211e6:	f018 f86e 	bl	392c6 <__errno>
   211ea:	08e4      	lsrs	r4, r4, #3
   211ec:	6801      	ldr	r1, [r0, #0]
   211ee:	01a4      	lsls	r4, r4, #6
   211f0:	f044 0402 	orr.w	r4, r4, #2
   211f4:	4622      	mov	r2, r4
   211f6:	4815      	ldr	r0, [pc, #84]	; (2124c <do_udp_server_stop.part.0+0x84>)
   211f8:	4249      	negs	r1, r1
   211fa:	f017 f970 	bl	384de <log_1>
			ret = -errno;
   211fe:	f018 f862 	bl	392c6 <__errno>
   21202:	6804      	ldr	r4, [r0, #0]
   21204:	4264      	negs	r4, r4
		(void)slm_at_udp_proxy_init();
   21206:	f7ff ffcb 	bl	211a0 <slm_at_udp_proxy_init>
		if (error) {
   2120a:	b18d      	cbz	r5, 21230 <do_udp_server_stop.part.0+0x68>
			sprintf(rsp_buf, "#XUDPSVR: %d stopped\r\n", error);
   2120c:	f640 228c 	movw	r2, #2700	; 0xa8c
   21210:	2100      	movs	r1, #0
   21212:	4b0f      	ldr	r3, [pc, #60]	; (21250 <do_udp_server_stop.part.0+0x88>)
   21214:	480f      	ldr	r0, [pc, #60]	; (21254 <do_udp_server_stop.part.0+0x8c>)
   21216:	9500      	str	r5, [sp, #0]
   21218:	f01a fa03 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   2121c:	480d      	ldr	r0, [pc, #52]	; (21254 <do_udp_server_stop.part.0+0x8c>)
   2121e:	f7fb ff27 	bl	1d070 <strlen>
   21222:	4601      	mov	r1, r0
   21224:	480b      	ldr	r0, [pc, #44]	; (21254 <do_udp_server_stop.part.0+0x8c>)
   21226:	f7fc ffdf 	bl	1e1e8 <rsp_send>
}
   2122a:	4620      	mov	r0, r4
   2122c:	b003      	add	sp, #12
   2122e:	bd30      	pop	{r4, r5, pc}
			sprintf(rsp_buf, "#XUDPSVR: stopped\r\n");
   21230:	4909      	ldr	r1, [pc, #36]	; (21258 <do_udp_server_stop.part.0+0x90>)
   21232:	4808      	ldr	r0, [pc, #32]	; (21254 <do_udp_server_stop.part.0+0x8c>)
   21234:	f01a fa1c 	bl	3b670 <strcpy>
   21238:	e7f0      	b.n	2121c <do_udp_server_stop.part.0+0x54>
   2123a:	bf00      	nop
   2123c:	200234bc 	.word	0x200234bc
   21240:	200234b8 	.word	0x200234b8
   21244:	0003c2cc 	.word	0x0003c2cc
   21248:	0003c3b4 	.word	0x0003c3b4
   2124c:	0003d641 	.word	0x0003d641
   21250:	0003dd73 	.word	0x0003dd73
   21254:	20028950 	.word	0x20028950
   21258:	0003dd8a 	.word	0x0003dd8a

0002125c <handle_at_udp_server>:
{
   2125c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2125e:	4606      	mov	r6, r0
   21260:	b08d      	sub	sp, #52	; 0x34
	int param_count = at_params_valid_count_get(&at_param_list);
   21262:	48b5      	ldr	r0, [pc, #724]	; (21538 <handle_at_udp_server+0x2dc>)
   21264:	f019 faf7 	bl	3a856 <at_params_valid_count_get>
	switch (cmd_type) {
   21268:	2e02      	cmp	r6, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   2126a:	4605      	mov	r5, r0
	switch (cmd_type) {
   2126c:	f000 812e 	beq.w	214cc <handle_at_udp_server+0x270>
   21270:	2e03      	cmp	r6, #3
   21272:	f000 814c 	beq.w	2150e <handle_at_udp_server+0x2b2>
   21276:	2e01      	cmp	r6, #1
   21278:	f040 8096 	bne.w	213a8 <handle_at_udp_server+0x14c>
		if (param_count < 2) {
   2127c:	2801      	cmp	r0, #1
   2127e:	f340 8093 	ble.w	213a8 <handle_at_udp_server+0x14c>
		err = at_params_short_get(&at_param_list, 1, &op);
   21282:	4631      	mov	r1, r6
   21284:	48ac      	ldr	r0, [pc, #688]	; (21538 <handle_at_udp_server+0x2dc>)
   21286:	aa09      	add	r2, sp, #36	; 0x24
   21288:	f019 fa9d 	bl	3a7c6 <at_params_short_get>
		if (err) {
   2128c:	4604      	mov	r4, r0
   2128e:	2800      	cmp	r0, #0
   21290:	d176      	bne.n	21380 <handle_at_udp_server+0x124>
		if (op == AT_SERVER_START ||
   21292:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   21296:	1e5a      	subs	r2, r3, #1
   21298:	2a01      	cmp	r2, #1
   2129a:	f200 8101 	bhi.w	214a0 <handle_at_udp_server+0x244>
			if (param_count < 3) {
   2129e:	2d02      	cmp	r5, #2
   212a0:	f000 8082 	beq.w	213a8 <handle_at_udp_server+0x14c>
			err = at_params_short_get(&at_param_list, 2, &port);
   212a4:	2102      	movs	r1, #2
   212a6:	48a4      	ldr	r0, [pc, #656]	; (21538 <handle_at_udp_server+0x2dc>)
   212a8:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   212ac:	f019 fa8b 	bl	3a7c6 <at_params_short_get>
			if (err) {
   212b0:	4604      	mov	r4, r0
   212b2:	2800      	cmp	r0, #0
   212b4:	d164      	bne.n	21380 <handle_at_udp_server+0x124>
			if (udp_sock > 0) {
   212b6:	4da1      	ldr	r5, [pc, #644]	; (2153c <handle_at_udp_server+0x2e0>)
   212b8:	682b      	ldr	r3, [r5, #0]
   212ba:	2b00      	cmp	r3, #0
   212bc:	dd0a      	ble.n	212d4 <handle_at_udp_server+0x78>
   212be:	49a0      	ldr	r1, [pc, #640]	; (21540 <handle_at_udp_server+0x2e4>)
   212c0:	4ba0      	ldr	r3, [pc, #640]	; (21544 <handle_at_udp_server+0x2e8>)
				LOG_WRN("Server is running");
   212c2:	48a1      	ldr	r0, [pc, #644]	; (21548 <handle_at_udp_server+0x2ec>)
   212c4:	1ac9      	subs	r1, r1, r3
   212c6:	08c9      	lsrs	r1, r1, #3
   212c8:	0189      	lsls	r1, r1, #6
   212ca:	f041 0102 	orr.w	r1, r1, #2
				LOG_WRN("Server is not running");
   212ce:	f017 f8f7 	bl	384c0 <log_0>
				return -EINVAL;
   212d2:	e069      	b.n	213a8 <handle_at_udp_server+0x14c>
			err = do_udp_server_start(port);
   212d4:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26
	return z_impl_zsock_socket(family, type, proto);
   212d8:	2211      	movs	r2, #17
   212da:	2102      	movs	r1, #2
   212dc:	4630      	mov	r0, r6
   212de:	f003 fd6b 	bl	24db8 <z_impl_zsock_socket>
	if (udp_sock < 0) {
   212e2:	2800      	cmp	r0, #0
	udp_sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   212e4:	6028      	str	r0, [r5, #0]
	if (udp_sock < 0) {
   212e6:	da30      	bge.n	2134a <handle_at_udp_server+0xee>
   212e8:	4a96      	ldr	r2, [pc, #600]	; (21544 <handle_at_udp_server+0x2e8>)
   212ea:	4d95      	ldr	r5, [pc, #596]	; (21540 <handle_at_udp_server+0x2e4>)
   212ec:	1aad      	subs	r5, r5, r2
		LOG_ERR("socket() failed: %d", -errno);
   212ee:	f017 ffea 	bl	392c6 <__errno>
   212f2:	08ed      	lsrs	r5, r5, #3
   212f4:	6801      	ldr	r1, [r0, #0]
   212f6:	01ad      	lsls	r5, r5, #6
   212f8:	f045 0501 	orr.w	r5, r5, #1
   212fc:	462a      	mov	r2, r5
   212fe:	4249      	negs	r1, r1
   21300:	4892      	ldr	r0, [pc, #584]	; (2154c <handle_at_udp_server+0x2f0>)
   21302:	f017 f8ec 	bl	384de <log_1>
		sprintf(rsp_buf, "#XUDPSVR: %d\r\n", -errno);
   21306:	f017 ffde 	bl	392c6 <__errno>
   2130a:	6803      	ldr	r3, [r0, #0]
   2130c:	2100      	movs	r1, #0
   2130e:	425b      	negs	r3, r3
   21310:	f640 228c 	movw	r2, #2700	; 0xa8c
   21314:	9300      	str	r3, [sp, #0]
   21316:	488e      	ldr	r0, [pc, #568]	; (21550 <handle_at_udp_server+0x2f4>)
   21318:	4b8e      	ldr	r3, [pc, #568]	; (21554 <handle_at_udp_server+0x2f8>)
   2131a:	f01a f982 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   2131e:	488c      	ldr	r0, [pc, #560]	; (21550 <handle_at_udp_server+0x2f4>)
   21320:	f7fb fea6 	bl	1d070 <strlen>
   21324:	4601      	mov	r1, r0
   21326:	488a      	ldr	r0, [pc, #552]	; (21550 <handle_at_udp_server+0x2f4>)
   21328:	f7fc ff5e 	bl	1e1e8 <rsp_send>
		return -errno;
   2132c:	f017 ffcb 	bl	392c6 <__errno>
   21330:	6803      	ldr	r3, [r0, #0]
   21332:	425b      	negs	r3, r3
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   21334:	2b00      	cmp	r3, #0
   21336:	f040 80b1 	bne.w	2149c <handle_at_udp_server+0x240>
   2133a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2133e:	2b02      	cmp	r3, #2
   21340:	d11e      	bne.n	21380 <handle_at_udp_server+0x124>
				udp_datamode = true;
   21342:	2201      	movs	r2, #1
   21344:	4b84      	ldr	r3, [pc, #528]	; (21558 <handle_at_udp_server+0x2fc>)
   21346:	701a      	strb	r2, [r3, #0]
   21348:	e01a      	b.n	21380 <handle_at_udp_server+0x124>
	local.sin_family = AF_INET;
   2134a:	2601      	movs	r6, #1
	local.sin_port = htons(port);
   2134c:	023b      	lsls	r3, r7, #8
   2134e:	ea43 2317 	orr.w	r3, r3, r7, lsr #8
	ret = modem_info_params_get(&modem_param);
   21352:	4882      	ldr	r0, [pc, #520]	; (2155c <handle_at_udp_server+0x300>)
	local.sin_family = AF_INET;
   21354:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
	local.sin_port = htons(port);
   21358:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	ret = modem_info_params_get(&modem_param);
   2135c:	f009 fed4 	bl	2b108 <modem_info_params_get>
	if (ret) {
   21360:	4607      	mov	r7, r0
   21362:	b180      	cbz	r0, 21386 <handle_at_udp_server+0x12a>
   21364:	4b77      	ldr	r3, [pc, #476]	; (21544 <handle_at_udp_server+0x2e8>)
   21366:	4a76      	ldr	r2, [pc, #472]	; (21540 <handle_at_udp_server+0x2e4>)
		LOG_ERR("Unable to obtain modem parameters (%d)", ret);
   21368:	4601      	mov	r1, r0
   2136a:	1ad2      	subs	r2, r2, r3
   2136c:	08d2      	lsrs	r2, r2, #3
   2136e:	0192      	lsls	r2, r2, #6
   21370:	487b      	ldr	r0, [pc, #492]	; (21560 <handle_at_udp_server+0x304>)
   21372:	4332      	orrs	r2, r6
   21374:	f017 f8b3 	bl	384de <log_1>
		close(udp_sock);
   21378:	6828      	ldr	r0, [r5, #0]
   2137a:	f016 fbb9 	bl	37af0 <close>
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   2137e:	463c      	mov	r4, r7
}
   21380:	4620      	mov	r0, r4
   21382:	b00d      	add	sp, #52	; 0x34
   21384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	addr_len = strlen(modem_param.network.ip_address.value_string);
   21386:	4877      	ldr	r0, [pc, #476]	; (21564 <handle_at_udp_server+0x308>)
   21388:	f7fb fe72 	bl	1d070 <strlen>
	if (addr_len == 0) {
   2138c:	b978      	cbnz	r0, 213ae <handle_at_udp_server+0x152>
   2138e:	496c      	ldr	r1, [pc, #432]	; (21540 <handle_at_udp_server+0x2e4>)
   21390:	4b6c      	ldr	r3, [pc, #432]	; (21544 <handle_at_udp_server+0x2e8>)
		LOG_ERR("LTE not connected yet");
   21392:	4875      	ldr	r0, [pc, #468]	; (21568 <handle_at_udp_server+0x30c>)
   21394:	1ac9      	subs	r1, r1, r3
   21396:	08c9      	lsrs	r1, r1, #3
   21398:	0189      	lsls	r1, r1, #6
   2139a:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid local address");
   2139e:	f017 f88f 	bl	384c0 <log_0>
		close(udp_sock);
   213a2:	6828      	ldr	r0, [r5, #0]
   213a4:	f016 fba4 	bl	37af0 <close>
			return -EINVAL;
   213a8:	f06f 0415 	mvn.w	r4, #21
   213ac:	e7e8      	b.n	21380 <handle_at_udp_server+0x124>
	if (!check_for_ipv4(modem_param.network.ip_address.value_string,
   213ae:	b2c1      	uxtb	r1, r0
   213b0:	486c      	ldr	r0, [pc, #432]	; (21564 <handle_at_udp_server+0x308>)
   213b2:	f016 fb67 	bl	37a84 <check_for_ipv4>
   213b6:	b940      	cbnz	r0, 213ca <handle_at_udp_server+0x16e>
   213b8:	4961      	ldr	r1, [pc, #388]	; (21540 <handle_at_udp_server+0x2e4>)
   213ba:	4b62      	ldr	r3, [pc, #392]	; (21544 <handle_at_udp_server+0x2e8>)
		LOG_ERR("Invalid local address");
   213bc:	486b      	ldr	r0, [pc, #428]	; (2156c <handle_at_udp_server+0x310>)
   213be:	1ac9      	subs	r1, r1, r3
   213c0:	08c9      	lsrs	r1, r1, #3
   213c2:	0189      	lsls	r1, r1, #6
   213c4:	f041 0101 	orr.w	r1, r1, #1
   213c8:	e7e9      	b.n	2139e <handle_at_udp_server+0x142>
	return z_impl_zsock_inet_pton(family, src, dst);
   213ca:	4966      	ldr	r1, [pc, #408]	; (21564 <handle_at_udp_server+0x308>)
   213cc:	4630      	mov	r0, r6
   213ce:	aa0b      	add	r2, sp, #44	; 0x2c
   213d0:	f017 fd20 	bl	38e14 <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, modem_param.network.ip_address.value_string,
   213d4:	2801      	cmp	r0, #1
   213d6:	d00f      	beq.n	213f8 <handle_at_udp_server+0x19c>
   213d8:	4a5a      	ldr	r2, [pc, #360]	; (21544 <handle_at_udp_server+0x2e8>)
   213da:	4c59      	ldr	r4, [pc, #356]	; (21540 <handle_at_udp_server+0x2e4>)
   213dc:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Parse local IP address failed: %d", -errno);
   213de:	f017 ff72 	bl	392c6 <__errno>
   213e2:	08e4      	lsrs	r4, r4, #3
   213e4:	6801      	ldr	r1, [r0, #0]
   213e6:	01a4      	lsls	r4, r4, #6
   213e8:	f044 0401 	orr.w	r4, r4, #1
   213ec:	4622      	mov	r2, r4
   213ee:	4860      	ldr	r0, [pc, #384]	; (21570 <handle_at_udp_server+0x314>)
   213f0:	4249      	negs	r1, r1
   213f2:	f017 f874 	bl	384de <log_1>
		close(udp_sock);
   213f6:	e7d4      	b.n	213a2 <handle_at_udp_server+0x146>
	ret = bind(udp_sock, (struct sockaddr *)&local,
   213f8:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_bind(sock, addr, addrlen);
   213fa:	2208      	movs	r2, #8
   213fc:	a90a      	add	r1, sp, #40	; 0x28
   213fe:	f017 fc79 	bl	38cf4 <z_impl_zsock_bind>
	if (ret) {
   21402:	4606      	mov	r6, r0
   21404:	b328      	cbz	r0, 21452 <handle_at_udp_server+0x1f6>
   21406:	4a4f      	ldr	r2, [pc, #316]	; (21544 <handle_at_udp_server+0x2e8>)
   21408:	4e4d      	ldr	r6, [pc, #308]	; (21540 <handle_at_udp_server+0x2e4>)
   2140a:	1ab6      	subs	r6, r6, r2
		LOG_ERR("bind() failed: %d", -errno);
   2140c:	f017 ff5b 	bl	392c6 <__errno>
   21410:	08f6      	lsrs	r6, r6, #3
   21412:	6801      	ldr	r1, [r0, #0]
   21414:	01b6      	lsls	r6, r6, #6
   21416:	f046 0601 	orr.w	r6, r6, #1
   2141a:	4632      	mov	r2, r6
   2141c:	4249      	negs	r1, r1
   2141e:	4855      	ldr	r0, [pc, #340]	; (21574 <handle_at_udp_server+0x318>)
   21420:	f017 f85d 	bl	384de <log_1>
		sprintf(rsp_buf, "#XUDPSVR: %d\r\n", -errno);
   21424:	f017 ff4f 	bl	392c6 <__errno>
   21428:	6803      	ldr	r3, [r0, #0]
   2142a:	f640 228c 	movw	r2, #2700	; 0xa8c
   2142e:	425b      	negs	r3, r3
   21430:	4639      	mov	r1, r7
   21432:	9300      	str	r3, [sp, #0]
   21434:	4846      	ldr	r0, [pc, #280]	; (21550 <handle_at_udp_server+0x2f4>)
   21436:	4b47      	ldr	r3, [pc, #284]	; (21554 <handle_at_udp_server+0x2f8>)
   21438:	f01a f8f3 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   2143c:	4844      	ldr	r0, [pc, #272]	; (21550 <handle_at_udp_server+0x2f4>)
   2143e:	f7fb fe17 	bl	1d070 <strlen>
   21442:	4601      	mov	r1, r0
   21444:	4842      	ldr	r0, [pc, #264]	; (21550 <handle_at_udp_server+0x2f4>)
   21446:	f7fc fecf 	bl	1e1e8 <rsp_send>
		close(udp_sock);
   2144a:	6828      	ldr	r0, [r5, #0]
   2144c:	f016 fb50 	bl	37af0 <close>
   21450:	e76c      	b.n	2132c <handle_at_udp_server+0xd0>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21452:	2200      	movs	r2, #0
   21454:	2300      	movs	r3, #0
   21456:	2004      	movs	r0, #4
   21458:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2145c:	230e      	movs	r3, #14
   2145e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
   21462:	e9cd 3003 	strd	r3, r0, [sp, #12]
   21466:	e9cd 6601 	strd	r6, r6, [sp, #4]
   2146a:	4b43      	ldr	r3, [pc, #268]	; (21578 <handle_at_udp_server+0x31c>)
   2146c:	4943      	ldr	r1, [pc, #268]	; (2157c <handle_at_udp_server+0x320>)
   2146e:	9600      	str	r6, [sp, #0]
   21470:	4843      	ldr	r0, [pc, #268]	; (21580 <handle_at_udp_server+0x324>)
   21472:	f014 fff3 	bl	3645c <z_impl_k_thread_create>
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   21476:	4b43      	ldr	r3, [pc, #268]	; (21584 <handle_at_udp_server+0x328>)
	sprintf(rsp_buf, "#XUDPSVR: %d started\r\n", udp_sock);
   21478:	4631      	mov	r1, r6
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   2147a:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XUDPSVR: %d started\r\n", udp_sock);
   2147c:	682b      	ldr	r3, [r5, #0]
   2147e:	f640 228c 	movw	r2, #2700	; 0xa8c
   21482:	9300      	str	r3, [sp, #0]
   21484:	4832      	ldr	r0, [pc, #200]	; (21550 <handle_at_udp_server+0x2f4>)
   21486:	4b40      	ldr	r3, [pc, #256]	; (21588 <handle_at_udp_server+0x32c>)
   21488:	f01a f8cb 	bl	3b622 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   2148c:	4830      	ldr	r0, [pc, #192]	; (21550 <handle_at_udp_server+0x2f4>)
   2148e:	f7fb fdef 	bl	1d070 <strlen>
   21492:	4601      	mov	r1, r0
   21494:	482e      	ldr	r0, [pc, #184]	; (21550 <handle_at_udp_server+0x2f4>)
   21496:	f7fc fea7 	bl	1e1e8 <rsp_send>
			if (err == 0 && op == AT_SERVER_START_WITH_DATAMODE) {
   2149a:	e74e      	b.n	2133a <handle_at_udp_server+0xde>
   2149c:	461c      	mov	r4, r3
   2149e:	e76f      	b.n	21380 <handle_at_udp_server+0x124>
		} else if (op == AT_SERVER_STOP) {
   214a0:	2b00      	cmp	r3, #0
   214a2:	f47f af6d 	bne.w	21380 <handle_at_udp_server+0x124>
			if (udp_sock < 0) {
   214a6:	4b25      	ldr	r3, [pc, #148]	; (2153c <handle_at_udp_server+0x2e0>)
   214a8:	681c      	ldr	r4, [r3, #0]
   214aa:	2c00      	cmp	r4, #0
   214ac:	da08      	bge.n	214c0 <handle_at_udp_server+0x264>
   214ae:	4924      	ldr	r1, [pc, #144]	; (21540 <handle_at_udp_server+0x2e4>)
   214b0:	4b24      	ldr	r3, [pc, #144]	; (21544 <handle_at_udp_server+0x2e8>)
				LOG_WRN("Server is not running");
   214b2:	4836      	ldr	r0, [pc, #216]	; (2158c <handle_at_udp_server+0x330>)
   214b4:	1ac9      	subs	r1, r1, r3
   214b6:	08c9      	lsrs	r1, r1, #3
   214b8:	0189      	lsls	r1, r1, #6
   214ba:	f041 0102 	orr.w	r1, r1, #2
   214be:	e706      	b.n	212ce <handle_at_udp_server+0x72>
	if (udp_sock > 0) {
   214c0:	f43f af5e 	beq.w	21380 <handle_at_udp_server+0x124>
   214c4:	f7ff fe80 	bl	211c8 <do_udp_server_stop.part.0>
   214c8:	4604      	mov	r4, r0
   214ca:	e759      	b.n	21380 <handle_at_udp_server+0x124>
		if (udp_sock != INVALID_SOCKET) {
   214cc:	4b1b      	ldr	r3, [pc, #108]	; (2153c <handle_at_udp_server+0x2e0>)
   214ce:	681b      	ldr	r3, [r3, #0]
   214d0:	1c59      	adds	r1, r3, #1
   214d2:	d013      	beq.n	214fc <handle_at_udp_server+0x2a0>
			sprintf(rsp_buf, "#XUDPSVR: %d, %d\r\n",
   214d4:	4a20      	ldr	r2, [pc, #128]	; (21558 <handle_at_udp_server+0x2fc>)
   214d6:	2100      	movs	r1, #0
   214d8:	7812      	ldrb	r2, [r2, #0]
   214da:	481d      	ldr	r0, [pc, #116]	; (21550 <handle_at_udp_server+0x2f4>)
   214dc:	e9cd 3200 	strd	r3, r2, [sp]
   214e0:	f640 228c 	movw	r2, #2700	; 0xa8c
   214e4:	4b2a      	ldr	r3, [pc, #168]	; (21590 <handle_at_udp_server+0x334>)
   214e6:	f01a f89c 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   214ea:	4819      	ldr	r0, [pc, #100]	; (21550 <handle_at_udp_server+0x2f4>)
   214ec:	f7fb fdc0 	bl	1d070 <strlen>
   214f0:	4601      	mov	r1, r0
   214f2:	4817      	ldr	r0, [pc, #92]	; (21550 <handle_at_udp_server+0x2f4>)
   214f4:	f7fc fe78 	bl	1e1e8 <rsp_send>
		err = 0;
   214f8:	2400      	movs	r4, #0
		break;
   214fa:	e741      	b.n	21380 <handle_at_udp_server+0x124>
			sprintf(rsp_buf, "#XUDPSVR: %d\r\n",
   214fc:	9300      	str	r3, [sp, #0]
   214fe:	f640 228c 	movw	r2, #2700	; 0xa8c
   21502:	2100      	movs	r1, #0
   21504:	4b13      	ldr	r3, [pc, #76]	; (21554 <handle_at_udp_server+0x2f8>)
   21506:	4812      	ldr	r0, [pc, #72]	; (21550 <handle_at_udp_server+0x2f4>)
   21508:	f01a f88b 	bl	3b622 <__sprintf_chk>
   2150c:	e7ed      	b.n	214ea <handle_at_udp_server+0x28e>
		sprintf(rsp_buf, "#XUDPSVR: (%d, %d, %d),<port>,<sec_tag>\r\n",
   2150e:	2400      	movs	r4, #0
   21510:	2301      	movs	r3, #1
   21512:	2202      	movs	r2, #2
   21514:	4621      	mov	r1, r4
   21516:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2151a:	9400      	str	r4, [sp, #0]
   2151c:	f640 228c 	movw	r2, #2700	; 0xa8c
   21520:	4b1c      	ldr	r3, [pc, #112]	; (21594 <handle_at_udp_server+0x338>)
   21522:	480b      	ldr	r0, [pc, #44]	; (21550 <handle_at_udp_server+0x2f4>)
   21524:	f01a f87d 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   21528:	4809      	ldr	r0, [pc, #36]	; (21550 <handle_at_udp_server+0x2f4>)
   2152a:	f7fb fda1 	bl	1d070 <strlen>
   2152e:	4601      	mov	r1, r0
   21530:	4807      	ldr	r0, [pc, #28]	; (21550 <handle_at_udp_server+0x2f4>)
   21532:	f7fc fe59 	bl	1e1e8 <rsp_send>
		break;
   21536:	e723      	b.n	21380 <handle_at_udp_server+0x124>
   21538:	20023430 	.word	0x20023430
   2153c:	200234b8 	.word	0x200234b8
   21540:	0003c3b4 	.word	0x0003c3b4
   21544:	0003c2cc 	.word	0x0003c2cc
   21548:	0003dd9e 	.word	0x0003dd9e
   2154c:	0003d930 	.word	0x0003d930
   21550:	20028950 	.word	0x20028950
   21554:	0003ddb0 	.word	0x0003ddb0
   21558:	2002b93c 	.word	0x2002b93c
   2155c:	20020900 	.word	0x20020900
   21560:	0003d873 	.word	0x0003d873
   21564:	20020c12 	.word	0x20020c12
   21568:	0003d89a 	.word	0x0003d89a
   2156c:	0003d8b0 	.word	0x0003d8b0
   21570:	0003d8c6 	.word	0x0003d8c6
   21574:	0003d8e8 	.word	0x0003d8e8
   21578:	00020f51 	.word	0x00020f51
   2157c:	2002e358 	.word	0x2002e358
   21580:	20021390 	.word	0x20021390
   21584:	200234bc 	.word	0x200234bc
   21588:	0003ddbf 	.word	0x0003ddbf
   2158c:	0003dc9b 	.word	0x0003dc9b
   21590:	0003ddd6 	.word	0x0003ddd6
   21594:	0003dde9 	.word	0x0003dde9

00021598 <do_udp_send>:
{
   21598:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (udp_sock == INVALID_SOCKET) {
   2159c:	4e3a      	ldr	r6, [pc, #232]	; (21688 <do_udp_send+0xf0>)
{
   2159e:	4680      	mov	r8, r0
	if (udp_sock == INVALID_SOCKET) {
   215a0:	6833      	ldr	r3, [r6, #0]
{
   215a2:	460f      	mov	r7, r1
	if (udp_sock == INVALID_SOCKET) {
   215a4:	3301      	adds	r3, #1
   215a6:	d168      	bne.n	2167a <do_udp_send+0xe2>
   215a8:	4b38      	ldr	r3, [pc, #224]	; (2168c <do_udp_send+0xf4>)
   215aa:	4939      	ldr	r1, [pc, #228]	; (21690 <do_udp_send+0xf8>)
		LOG_ERR("Not connected yet");
   215ac:	4839      	ldr	r0, [pc, #228]	; (21694 <do_udp_send+0xfc>)
   215ae:	1ac9      	subs	r1, r1, r3
   215b0:	08c9      	lsrs	r1, r1, #3
   215b2:	0189      	lsls	r1, r1, #6
   215b4:	f041 0101 	orr.w	r1, r1, #1
   215b8:	f016 ff82 	bl	384c0 <log_0>
		return -EINVAL;
   215bc:	f06f 0015 	mvn.w	r0, #21
}
   215c0:	b002      	add	sp, #8
   215c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sprintf(rsp_buf, "#XUDPSEND: %d\r\n", -errno);
   215c6:	f017 fe7e 	bl	392c6 <__errno>
   215ca:	6803      	ldr	r3, [r0, #0]
   215cc:	f640 228c 	movw	r2, #2700	; 0xa8c
   215d0:	425b      	negs	r3, r3
   215d2:	2100      	movs	r1, #0
   215d4:	9300      	str	r3, [sp, #0]
   215d6:	4830      	ldr	r0, [pc, #192]	; (21698 <do_udp_send+0x100>)
   215d8:	4b30      	ldr	r3, [pc, #192]	; (2169c <do_udp_send+0x104>)
   215da:	f01a f822 	bl	3b622 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   215de:	482e      	ldr	r0, [pc, #184]	; (21698 <do_udp_send+0x100>)
   215e0:	f7fb fd46 	bl	1d070 <strlen>
   215e4:	4601      	mov	r1, r0
   215e6:	482c      	ldr	r0, [pc, #176]	; (21698 <do_udp_send+0x100>)
   215e8:	f7fc fdfe 	bl	1e1e8 <rsp_send>
   215ec:	e02f      	b.n	2164e <do_udp_send+0xb6>
		offset += ret;
   215ee:	4425      	add	r5, r4
	while (offset < datalen) {
   215f0:	42bd      	cmp	r5, r7
   215f2:	d230      	bcs.n	21656 <do_udp_send+0xbe>
		ret = sendto(udp_sock, data + offset, datalen - offset, 0,
   215f4:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   215f6:	2300      	movs	r3, #0
   215f8:	e9cd a900 	strd	sl, r9, [sp]
   215fc:	1b7a      	subs	r2, r7, r5
   215fe:	eb08 0105 	add.w	r1, r8, r5
   21602:	f017 fbcd 	bl	38da0 <z_impl_zsock_sendto>
		if (ret < 0) {
   21606:	1e04      	subs	r4, r0, #0
   21608:	daf1      	bge.n	215ee <do_udp_send+0x56>
   2160a:	4a20      	ldr	r2, [pc, #128]	; (2168c <do_udp_send+0xf4>)
   2160c:	4c20      	ldr	r4, [pc, #128]	; (21690 <do_udp_send+0xf8>)
   2160e:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send() failed: %d", -errno);
   21610:	f017 fe59 	bl	392c6 <__errno>
   21614:	08e4      	lsrs	r4, r4, #3
   21616:	6801      	ldr	r1, [r0, #0]
   21618:	01a4      	lsls	r4, r4, #6
   2161a:	f044 0401 	orr.w	r4, r4, #1
   2161e:	4622      	mov	r2, r4
   21620:	481f      	ldr	r0, [pc, #124]	; (216a0 <do_udp_send+0x108>)
   21622:	4249      	negs	r1, r1
   21624:	f016 ff5b 	bl	384de <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   21628:	f017 fe4d 	bl	392c6 <__errno>
   2162c:	6803      	ldr	r3, [r0, #0]
   2162e:	2b0b      	cmp	r3, #11
   21630:	d0c9      	beq.n	215c6 <do_udp_send+0x2e>
   21632:	f017 fe48 	bl	392c6 <__errno>
   21636:	6803      	ldr	r3, [r0, #0]
   21638:	2b74      	cmp	r3, #116	; 0x74
   2163a:	d0c4      	beq.n	215c6 <do_udp_send+0x2e>
				do_udp_server_stop(-errno);
   2163c:	f017 fe43 	bl	392c6 <__errno>
	if (udp_sock > 0) {
   21640:	6833      	ldr	r3, [r6, #0]
   21642:	2b00      	cmp	r3, #0
   21644:	dd03      	ble.n	2164e <do_udp_send+0xb6>
				do_udp_server_stop(-errno);
   21646:	6800      	ldr	r0, [r0, #0]
   21648:	4240      	negs	r0, r0
   2164a:	f7ff fdbd 	bl	211c8 <do_udp_server_stop.part.0>
			ret = -errno;
   2164e:	f017 fe3a 	bl	392c6 <__errno>
   21652:	6804      	ldr	r4, [r0, #0]
   21654:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XUDPSEND: %d\r\n", offset);
   21656:	f640 228c 	movw	r2, #2700	; 0xa8c
   2165a:	2100      	movs	r1, #0
   2165c:	4b0f      	ldr	r3, [pc, #60]	; (2169c <do_udp_send+0x104>)
   2165e:	480e      	ldr	r0, [pc, #56]	; (21698 <do_udp_send+0x100>)
   21660:	9500      	str	r5, [sp, #0]
   21662:	f019 ffde 	bl	3b622 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   21666:	480c      	ldr	r0, [pc, #48]	; (21698 <do_udp_send+0x100>)
   21668:	f7fb fd02 	bl	1d070 <strlen>
   2166c:	4601      	mov	r1, r0
   2166e:	480a      	ldr	r0, [pc, #40]	; (21698 <do_udp_send+0x100>)
   21670:	f7fc fdba 	bl	1e1e8 <rsp_send>
	if (ret >= 0) {
   21674:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   21678:	e7a2      	b.n	215c0 <do_udp_send+0x28>
	uint32_t offset = 0;
   2167a:	2500      	movs	r5, #0
   2167c:	f04f 0908 	mov.w	r9, #8
	int ret = 0;
   21680:	462c      	mov	r4, r5
   21682:	f8df a020 	ldr.w	sl, [pc, #32]	; 216a4 <do_udp_send+0x10c>
   21686:	e7b3      	b.n	215f0 <do_udp_send+0x58>
   21688:	200234b8 	.word	0x200234b8
   2168c:	0003c2cc 	.word	0x0003c2cc
   21690:	0003c3b4 	.word	0x0003c3b4
   21694:	0003d748 	.word	0x0003d748
   21698:	20028950 	.word	0x20028950
   2169c:	0003de13 	.word	0x0003de13
   216a0:	0003d75a 	.word	0x0003d75a
   216a4:	200234b0 	.word	0x200234b0

000216a8 <handle_at_udp_send>:
{
   216a8:	b590      	push	{r4, r7, lr}
	int size = NET_IPV4_MTU;
   216aa:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   216ae:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   216b2:	af00      	add	r7, sp, #0
	int size = NET_IPV4_MTU;
   216b4:	607b      	str	r3, [r7, #4]
	if (remote.sin_family == AF_UNSPEC || remote.sin_port == INVALID_PORT) {
   216b6:	4b20      	ldr	r3, [pc, #128]	; (21738 <handle_at_udp_send+0x90>)
{
   216b8:	4604      	mov	r4, r0
	if (remote.sin_family == AF_UNSPEC || remote.sin_port == INVALID_PORT) {
   216ba:	881b      	ldrh	r3, [r3, #0]
   216bc:	b92b      	cbnz	r3, 216ca <handle_at_udp_send+0x22>
		return err;
   216be:	f06f 0015 	mvn.w	r0, #21
}
   216c2:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   216c6:	46bd      	mov	sp, r7
   216c8:	bd90      	pop	{r4, r7, pc}
	switch (cmd_type) {
   216ca:	2801      	cmp	r0, #1
   216cc:	d1f7      	bne.n	216be <handle_at_udp_send+0x16>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   216ce:	481b      	ldr	r0, [pc, #108]	; (2173c <handle_at_udp_send+0x94>)
   216d0:	f019 f8c1 	bl	3a856 <at_params_valid_count_get>
   216d4:	2802      	cmp	r0, #2
   216d6:	d9f2      	bls.n	216be <handle_at_udp_send+0x16>
		err = at_params_short_get(&at_param_list, 1, &datatype);
   216d8:	4621      	mov	r1, r4
   216da:	4818      	ldr	r0, [pc, #96]	; (2173c <handle_at_udp_send+0x94>)
   216dc:	1cba      	adds	r2, r7, #2
   216de:	f019 f872 	bl	3a7c6 <at_params_short_get>
		if (err) {
   216e2:	2800      	cmp	r0, #0
   216e4:	d1ed      	bne.n	216c2 <handle_at_udp_send+0x1a>
		err = at_params_string_get(&at_param_list, 2, data, &size);
   216e6:	2102      	movs	r1, #2
   216e8:	4814      	ldr	r0, [pc, #80]	; (2173c <handle_at_udp_send+0x94>)
   216ea:	1d3b      	adds	r3, r7, #4
   216ec:	f107 0208 	add.w	r2, r7, #8
   216f0:	f019 f88e 	bl	3a810 <at_params_string_get>
		if (err) {
   216f4:	2800      	cmp	r0, #0
   216f6:	d1e4      	bne.n	216c2 <handle_at_udp_send+0x1a>
		if (datatype == DATATYPE_HEXADECIMAL) {
   216f8:	887b      	ldrh	r3, [r7, #2]
   216fa:	6879      	ldr	r1, [r7, #4]
   216fc:	b9bb      	cbnz	r3, 2172e <handle_at_udp_send+0x86>
			uint8_t data_hex[size / 2];
   216fe:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   21702:	105b      	asrs	r3, r3, #1
   21704:	1dda      	adds	r2, r3, #7
   21706:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   2170a:	466c      	mov	r4, sp
			uint8_t data_hex[size / 2];
   2170c:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   21710:	466a      	mov	r2, sp
   21712:	b29b      	uxth	r3, r3
   21714:	b289      	uxth	r1, r1
   21716:	f107 0008 	add.w	r0, r7, #8
   2171a:	f016 f98f 	bl	37a3c <slm_util_atoh>
			if (err > 0) {
   2171e:	2800      	cmp	r0, #0
   21720:	dd03      	ble.n	2172a <handle_at_udp_send+0x82>
				err = do_udp_send(data_hex, err);
   21722:	4601      	mov	r1, r0
   21724:	4668      	mov	r0, sp
   21726:	f7ff ff37 	bl	21598 <do_udp_send>
   2172a:	46a5      	mov	sp, r4
   2172c:	e7c9      	b.n	216c2 <handle_at_udp_send+0x1a>
			err = do_udp_send(data, size);
   2172e:	f107 0008 	add.w	r0, r7, #8
   21732:	f7ff ff31 	bl	21598 <do_udp_send>
   21736:	e7c4      	b.n	216c2 <handle_at_udp_send+0x1a>
   21738:	200234b0 	.word	0x200234b0
   2173c:	20023430 	.word	0x20023430

00021740 <handle_at_udp_client>:
{
   21740:	b570      	push	{r4, r5, r6, lr}
   21742:	4604      	mov	r4, r0
   21744:	b0c2      	sub	sp, #264	; 0x108
	int param_count = at_params_valid_count_get(&at_param_list);
   21746:	48aa      	ldr	r0, [pc, #680]	; (219f0 <handle_at_udp_client+0x2b0>)
   21748:	f019 f885 	bl	3a856 <at_params_valid_count_get>
	switch (cmd_type) {
   2174c:	2c02      	cmp	r4, #2
	int param_count = at_params_valid_count_get(&at_param_list);
   2174e:	4605      	mov	r5, r0
	switch (cmd_type) {
   21750:	f000 81a0 	beq.w	21a94 <handle_at_udp_client+0x354>
   21754:	2c03      	cmp	r4, #3
   21756:	f000 81be 	beq.w	21ad6 <handle_at_udp_client+0x396>
   2175a:	2c01      	cmp	r4, #1
   2175c:	f040 80d0 	bne.w	21900 <handle_at_udp_client+0x1c0>
		if (param_count < 2) {
   21760:	2801      	cmp	r0, #1
   21762:	f340 80cd 	ble.w	21900 <handle_at_udp_client+0x1c0>
		err = at_params_short_get(&at_param_list, 1, &op);
   21766:	4621      	mov	r1, r4
   21768:	48a1      	ldr	r0, [pc, #644]	; (219f0 <handle_at_udp_client+0x2b0>)
   2176a:	aa0a      	add	r2, sp, #40	; 0x28
   2176c:	f019 f82b 	bl	3a7c6 <at_params_short_get>
		if (err) {
   21770:	4604      	mov	r4, r0
   21772:	2800      	cmp	r0, #0
   21774:	d16b      	bne.n	2184e <handle_at_udp_client+0x10e>
		if (op == AT_CLIENT_CONNECT ||
   21776:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2177a:	1e5a      	subs	r2, r3, #1
   2177c:	2a01      	cmp	r2, #1
   2177e:	f200 8124 	bhi.w	219ca <handle_at_udp_client+0x28a>
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   21782:	2180      	movs	r1, #128	; 0x80
   21784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (param_count < 4) {
   21788:	2d03      	cmp	r5, #3
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   2178a:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
			if (param_count < 4) {
   2178e:	f340 80b7 	ble.w	21900 <handle_at_udp_client+0x1c0>
			err = at_params_string_get(&at_param_list,
   21792:	2102      	movs	r1, #2
   21794:	4896      	ldr	r0, [pc, #600]	; (219f0 <handle_at_udp_client+0x2b0>)
   21796:	ab0b      	add	r3, sp, #44	; 0x2c
   21798:	aa22      	add	r2, sp, #136	; 0x88
   2179a:	f019 f839 	bl	3a810 <at_params_string_get>
			if (err) {
   2179e:	4604      	mov	r4, r0
   217a0:	2800      	cmp	r0, #0
   217a2:	d154      	bne.n	2184e <handle_at_udp_client+0x10e>
			url[size] = '\0';
   217a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   217a6:	aa42      	add	r2, sp, #264	; 0x108
   217a8:	4413      	add	r3, r2
   217aa:	f803 0c80 	strb.w	r0, [r3, #-128]
			err = at_params_short_get(&at_param_list, 3, &port);
   217ae:	2103      	movs	r1, #3
   217b0:	488f      	ldr	r0, [pc, #572]	; (219f0 <handle_at_udp_client+0x2b0>)
   217b2:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   217b6:	f019 f806 	bl	3a7c6 <at_params_short_get>
			if (err) {
   217ba:	4604      	mov	r4, r0
   217bc:	2800      	cmp	r0, #0
   217be:	d146      	bne.n	2184e <handle_at_udp_client+0x10e>
			if (param_count > 4) {
   217c0:	2d04      	cmp	r5, #4
   217c2:	d004      	beq.n	217ce <handle_at_udp_client+0x8e>
				at_params_int_get(&at_param_list, 4, &sec_tag);
   217c4:	2104      	movs	r1, #4
   217c6:	488a      	ldr	r0, [pc, #552]	; (219f0 <handle_at_udp_client+0x2b0>)
   217c8:	aa0c      	add	r2, sp, #48	; 0x30
   217ca:	f019 f80e 	bl	3a7ea <at_params_int_get>
			err = do_udp_client_connect(url, port, sec_tag);
   217ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   217d0:	f8bd 402a 	ldrh.w	r4, [sp, #42]	; 0x2a
	if (sec_tag == INVALID_SEC_TAG) {
   217d4:	4d87      	ldr	r5, [pc, #540]	; (219f4 <handle_at_udp_client+0x2b4>)
   217d6:	1c72      	adds	r2, r6, #1
	return z_impl_zsock_socket(family, type, proto);
   217d8:	f04f 0102 	mov.w	r1, #2
   217dc:	bf0c      	ite	eq
   217de:	2211      	moveq	r2, #17
   217e0:	f240 1211 	movwne	r2, #273	; 0x111
   217e4:	2001      	movs	r0, #1
   217e6:	f003 fae7 	bl	24db8 <z_impl_zsock_socket>
		udp_sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_DTLS_1_2);
   217ea:	6028      	str	r0, [r5, #0]
	if (udp_sock < 0) {
   217ec:	6828      	ldr	r0, [r5, #0]
   217ee:	2800      	cmp	r0, #0
   217f0:	da30      	bge.n	21854 <handle_at_udp_client+0x114>
   217f2:	4a81      	ldr	r2, [pc, #516]	; (219f8 <handle_at_udp_client+0x2b8>)
   217f4:	4c81      	ldr	r4, [pc, #516]	; (219fc <handle_at_udp_client+0x2bc>)
   217f6:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
   217f8:	f017 fd65 	bl	392c6 <__errno>
   217fc:	08e4      	lsrs	r4, r4, #3
   217fe:	6801      	ldr	r1, [r0, #0]
   21800:	01a4      	lsls	r4, r4, #6
   21802:	f044 0401 	orr.w	r4, r4, #1
   21806:	4622      	mov	r2, r4
   21808:	4249      	negs	r1, r1
   2180a:	487d      	ldr	r0, [pc, #500]	; (21a00 <handle_at_udp_client+0x2c0>)
   2180c:	f016 fe67 	bl	384de <log_1>
		sprintf(rsp_buf, "#XUDPCLI: %d\r\n", -errno);
   21810:	f017 fd59 	bl	392c6 <__errno>
   21814:	6803      	ldr	r3, [r0, #0]
   21816:	2100      	movs	r1, #0
   21818:	425b      	negs	r3, r3
   2181a:	f640 228c 	movw	r2, #2700	; 0xa8c
   2181e:	9300      	str	r3, [sp, #0]
   21820:	4878      	ldr	r0, [pc, #480]	; (21a04 <handle_at_udp_client+0x2c4>)
   21822:	4b79      	ldr	r3, [pc, #484]	; (21a08 <handle_at_udp_client+0x2c8>)
   21824:	f019 fefd 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   21828:	4876      	ldr	r0, [pc, #472]	; (21a04 <handle_at_udp_client+0x2c4>)
   2182a:	f7fb fc21 	bl	1d070 <strlen>
   2182e:	4601      	mov	r1, r0
   21830:	4874      	ldr	r0, [pc, #464]	; (21a04 <handle_at_udp_client+0x2c4>)
   21832:	f7fc fcd9 	bl	1e1e8 <rsp_send>
		return -errno;
   21836:	f017 fd46 	bl	392c6 <__errno>
   2183a:	6804      	ldr	r4, [r0, #0]
   2183c:	4264      	negs	r4, r4
			if (err == 0 &&
   2183e:	b934      	cbnz	r4, 2184e <handle_at_udp_client+0x10e>
   21840:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   21844:	2b02      	cmp	r3, #2
   21846:	d102      	bne.n	2184e <handle_at_udp_client+0x10e>
				udp_datamode = true;
   21848:	2201      	movs	r2, #1
   2184a:	4b70      	ldr	r3, [pc, #448]	; (21a0c <handle_at_udp_client+0x2cc>)
   2184c:	701a      	strb	r2, [r3, #0]
}
   2184e:	4620      	mov	r0, r4
   21850:	b042      	add	sp, #264	; 0x108
   21852:	bd70      	pop	{r4, r5, r6, pc}
	if (sec_tag != INVALID_SEC_TAG) {
   21854:	1c73      	adds	r3, r6, #1
   21856:	d02f      	beq.n	218b8 <handle_at_udp_client+0x178>
		sec_tag_t sec_tag_list[1] = { sec_tag };
   21858:	960e      	str	r6, [sp, #56]	; 0x38
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2185a:	2304      	movs	r3, #4
   2185c:	2201      	movs	r2, #1
   2185e:	9300      	str	r3, [sp, #0]
   21860:	f44f 718d 	mov.w	r1, #282	; 0x11a
   21864:	ab0e      	add	r3, sp, #56	; 0x38
   21866:	f017 faf7 	bl	38e58 <z_impl_zsock_setsockopt>
		if (ret) {
   2186a:	b328      	cbz	r0, 218b8 <handle_at_udp_client+0x178>
   2186c:	4a62      	ldr	r2, [pc, #392]	; (219f8 <handle_at_udp_client+0x2b8>)
   2186e:	4c63      	ldr	r4, [pc, #396]	; (219fc <handle_at_udp_client+0x2bc>)
   21870:	1aa4      	subs	r4, r4, r2
   21872:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set tag list failed: %d", -errno);
   21874:	f017 fd27 	bl	392c6 <__errno>
   21878:	01a4      	lsls	r4, r4, #6
   2187a:	f044 0401 	orr.w	r4, r4, #1
   2187e:	4622      	mov	r2, r4
   21880:	6801      	ldr	r1, [r0, #0]
   21882:	4863      	ldr	r0, [pc, #396]	; (21a10 <handle_at_udp_client+0x2d0>)
   21884:	4249      	negs	r1, r1
		LOG_ERR("connect() failed: %d", -errno);
   21886:	f016 fe2a 	bl	384de <log_1>
		sprintf(rsp_buf, "#XUDPCLI: %d\r\n", -errno);
   2188a:	f017 fd1c 	bl	392c6 <__errno>
   2188e:	6803      	ldr	r3, [r0, #0]
   21890:	f640 228c 	movw	r2, #2700	; 0xa8c
   21894:	425b      	negs	r3, r3
   21896:	2100      	movs	r1, #0
   21898:	9300      	str	r3, [sp, #0]
   2189a:	485a      	ldr	r0, [pc, #360]	; (21a04 <handle_at_udp_client+0x2c4>)
   2189c:	4b5a      	ldr	r3, [pc, #360]	; (21a08 <handle_at_udp_client+0x2c8>)
   2189e:	f019 fec0 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   218a2:	4858      	ldr	r0, [pc, #352]	; (21a04 <handle_at_udp_client+0x2c4>)
   218a4:	f7fb fbe4 	bl	1d070 <strlen>
   218a8:	4601      	mov	r1, r0
   218aa:	4856      	ldr	r0, [pc, #344]	; (21a04 <handle_at_udp_client+0x2c4>)
   218ac:	f7fc fc9c 	bl	1e1e8 <rsp_send>
		close(udp_sock);
   218b0:	6828      	ldr	r0, [r5, #0]
   218b2:	f016 f91d 	bl	37af0 <close>
   218b6:	e7be      	b.n	21836 <handle_at_udp_client+0xf6>
	if (check_for_ipv4(url, strlen(url))) {
   218b8:	a822      	add	r0, sp, #136	; 0x88
   218ba:	f7fb fbd9 	bl	1d070 <strlen>
   218be:	b2c1      	uxtb	r1, r0
   218c0:	a822      	add	r0, sp, #136	; 0x88
   218c2:	f016 f8df 	bl	37a84 <check_for_ipv4>
   218c6:	4601      	mov	r1, r0
   218c8:	b1e8      	cbz	r0, 21906 <handle_at_udp_client+0x1c6>
		remote.sin_family = AF_INET;
   218ca:	2001      	movs	r0, #1
   218cc:	4a51      	ldr	r2, [pc, #324]	; (21a14 <handle_at_udp_client+0x2d4>)
		remote.sin_port = htons(port);
   218ce:	0223      	lsls	r3, r4, #8
   218d0:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
		remote.sin_family = AF_INET;
   218d4:	8010      	strh	r0, [r2, #0]
		remote.sin_port = htons(port);
   218d6:	8054      	strh	r4, [r2, #2]
	return z_impl_zsock_inet_pton(family, src, dst);
   218d8:	a922      	add	r1, sp, #136	; 0x88
   218da:	3204      	adds	r2, #4
   218dc:	f017 fa9a 	bl	38e14 <z_impl_zsock_inet_pton>
		if (ret != 1) {
   218e0:	2801      	cmp	r0, #1
   218e2:	4601      	mov	r1, r0
   218e4:	d036      	beq.n	21954 <handle_at_udp_client+0x214>
   218e6:	4a45      	ldr	r2, [pc, #276]	; (219fc <handle_at_udp_client+0x2bc>)
   218e8:	4b43      	ldr	r3, [pc, #268]	; (219f8 <handle_at_udp_client+0x2b8>)
			LOG_ERR("inet_pton() failed: %d", ret);
   218ea:	484b      	ldr	r0, [pc, #300]	; (21a18 <handle_at_udp_client+0x2d8>)
   218ec:	1ad2      	subs	r2, r2, r3
   218ee:	08d2      	lsrs	r2, r2, #3
   218f0:	0192      	lsls	r2, r2, #6
   218f2:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("getaddrinfo() failed: %d", ret);
   218f6:	f016 fdf2 	bl	384de <log_1>
			close(udp_sock);
   218fa:	6828      	ldr	r0, [r5, #0]
   218fc:	f016 f8f8 	bl	37af0 <close>
			return -EINVAL;
   21900:	f06f 0415 	mvn.w	r4, #21
   21904:	e7a3      	b.n	2184e <handle_at_udp_client+0x10e>
		struct addrinfo hints = {
   21906:	2250      	movs	r2, #80	; 0x50
   21908:	9009      	str	r0, [sp, #36]	; 0x24
   2190a:	a80e      	add	r0, sp, #56	; 0x38
   2190c:	f019 fd71 	bl	3b3f2 <memset>
   21910:	2601      	movs	r6, #1
   21912:	2302      	movs	r3, #2
	return zsock_getaddrinfo(host, service, hints, res);
   21914:	9909      	ldr	r1, [sp, #36]	; 0x24
   21916:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
   2191a:	aa0e      	add	r2, sp, #56	; 0x38
   2191c:	ab0d      	add	r3, sp, #52	; 0x34
   2191e:	a822      	add	r0, sp, #136	; 0x88
   21920:	f017 f9be 	bl	38ca0 <zsock_getaddrinfo>
		if (ret || result == NULL) {
   21924:	4601      	mov	r1, r0
   21926:	b908      	cbnz	r0, 2192c <handle_at_udp_client+0x1ec>
   21928:	980d      	ldr	r0, [sp, #52]	; 0x34
   2192a:	b940      	cbnz	r0, 2193e <handle_at_udp_client+0x1fe>
   2192c:	4a33      	ldr	r2, [pc, #204]	; (219fc <handle_at_udp_client+0x2bc>)
   2192e:	4b32      	ldr	r3, [pc, #200]	; (219f8 <handle_at_udp_client+0x2b8>)
			LOG_ERR("getaddrinfo() failed: %d", ret);
   21930:	483a      	ldr	r0, [pc, #232]	; (21a1c <handle_at_udp_client+0x2dc>)
   21932:	1ad2      	subs	r2, r2, r3
   21934:	08d2      	lsrs	r2, r2, #3
   21936:	0192      	lsls	r2, r2, #6
   21938:	f042 0201 	orr.w	r2, r2, #1
   2193c:	e7db      	b.n	218f6 <handle_at_udp_client+0x1b6>
		remote.sin_port = htons(port);
   2193e:	0222      	lsls	r2, r4, #8
   21940:	ea42 2414 	orr.w	r4, r2, r4, lsr #8
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   21944:	6982      	ldr	r2, [r0, #24]
		remote.sin_family = AF_INET;
   21946:	4b33      	ldr	r3, [pc, #204]	; (21a14 <handle_at_udp_client+0x2d4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   21948:	6852      	ldr	r2, [r2, #4]
		remote.sin_family = AF_INET;
   2194a:	801e      	strh	r6, [r3, #0]
		remote.sin_port = htons(port);
   2194c:	805c      	strh	r4, [r3, #2]
		remote.sin_addr.s_addr =
   2194e:	605a      	str	r2, [r3, #4]
	zsock_freeaddrinfo(ai);
   21950:	f017 f9a8 	bl	38ca4 <zsock_freeaddrinfo>
	ret = connect(udp_sock, (struct sockaddr *)&remote,
   21954:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   21956:	2208      	movs	r2, #8
   21958:	492e      	ldr	r1, [pc, #184]	; (21a14 <handle_at_udp_client+0x2d4>)
   2195a:	f017 f9e1 	bl	38d20 <z_impl_zsock_connect>
	if (ret < 0) {
   2195e:	1e04      	subs	r4, r0, #0
   21960:	da0d      	bge.n	2197e <handle_at_udp_client+0x23e>
   21962:	4a25      	ldr	r2, [pc, #148]	; (219f8 <handle_at_udp_client+0x2b8>)
   21964:	4c25      	ldr	r4, [pc, #148]	; (219fc <handle_at_udp_client+0x2bc>)
   21966:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect() failed: %d", -errno);
   21968:	f017 fcad 	bl	392c6 <__errno>
   2196c:	08e4      	lsrs	r4, r4, #3
   2196e:	6801      	ldr	r1, [r0, #0]
   21970:	01a4      	lsls	r4, r4, #6
   21972:	f044 0401 	orr.w	r4, r4, #1
   21976:	4622      	mov	r2, r4
   21978:	4829      	ldr	r0, [pc, #164]	; (21a20 <handle_at_udp_client+0x2e0>)
   2197a:	4249      	negs	r1, r1
   2197c:	e783      	b.n	21886 <handle_at_udp_client+0x146>
   2197e:	2200      	movs	r2, #0
   21980:	2300      	movs	r3, #0
   21982:	2600      	movs	r6, #0
   21984:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21988:	2004      	movs	r0, #4
   2198a:	230e      	movs	r3, #14
   2198c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
   21990:	e9cd 3003 	strd	r3, r0, [sp, #12]
   21994:	e9cd 6601 	strd	r6, r6, [sp, #4]
   21998:	4b22      	ldr	r3, [pc, #136]	; (21a24 <handle_at_udp_client+0x2e4>)
   2199a:	4923      	ldr	r1, [pc, #140]	; (21a28 <handle_at_udp_client+0x2e8>)
   2199c:	9600      	str	r6, [sp, #0]
   2199e:	4823      	ldr	r0, [pc, #140]	; (21a2c <handle_at_udp_client+0x2ec>)
   219a0:	f014 fd5c 	bl	3645c <z_impl_k_thread_create>
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   219a4:	4b22      	ldr	r3, [pc, #136]	; (21a30 <handle_at_udp_client+0x2f0>)
	sprintf(rsp_buf, "#XUDPCLI: %d connected\r\n", udp_sock);
   219a6:	4631      	mov	r1, r6
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   219a8:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XUDPCLI: %d connected\r\n", udp_sock);
   219aa:	682b      	ldr	r3, [r5, #0]
   219ac:	f640 228c 	movw	r2, #2700	; 0xa8c
   219b0:	9300      	str	r3, [sp, #0]
   219b2:	4814      	ldr	r0, [pc, #80]	; (21a04 <handle_at_udp_client+0x2c4>)
   219b4:	4b1f      	ldr	r3, [pc, #124]	; (21a34 <handle_at_udp_client+0x2f4>)
   219b6:	f019 fe34 	bl	3b622 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   219ba:	4812      	ldr	r0, [pc, #72]	; (21a04 <handle_at_udp_client+0x2c4>)
   219bc:	f7fb fb58 	bl	1d070 <strlen>
   219c0:	4601      	mov	r1, r0
   219c2:	4810      	ldr	r0, [pc, #64]	; (21a04 <handle_at_udp_client+0x2c4>)
   219c4:	f7fc fc10 	bl	1e1e8 <rsp_send>
	return ret;
   219c8:	e739      	b.n	2183e <handle_at_udp_client+0xfe>
		} else if (op == AT_CLIENT_DISCONNECT) {
   219ca:	2b00      	cmp	r3, #0
   219cc:	f47f af3f 	bne.w	2184e <handle_at_udp_client+0x10e>
			if (udp_sock < 0) {
   219d0:	4d08      	ldr	r5, [pc, #32]	; (219f4 <handle_at_udp_client+0x2b4>)
   219d2:	682c      	ldr	r4, [r5, #0]
   219d4:	2c00      	cmp	r4, #0
   219d6:	da31      	bge.n	21a3c <handle_at_udp_client+0x2fc>
   219d8:	4b07      	ldr	r3, [pc, #28]	; (219f8 <handle_at_udp_client+0x2b8>)
   219da:	4908      	ldr	r1, [pc, #32]	; (219fc <handle_at_udp_client+0x2bc>)
				LOG_WRN("Client is not connected");
   219dc:	4816      	ldr	r0, [pc, #88]	; (21a38 <handle_at_udp_client+0x2f8>)
   219de:	1ac9      	subs	r1, r1, r3
   219e0:	08c9      	lsrs	r1, r1, #3
   219e2:	0189      	lsls	r1, r1, #6
   219e4:	f041 0102 	orr.w	r1, r1, #2
   219e8:	f016 fd6a 	bl	384c0 <log_0>
				return -EINVAL;
   219ec:	e788      	b.n	21900 <handle_at_udp_client+0x1c0>
   219ee:	bf00      	nop
   219f0:	20023430 	.word	0x20023430
   219f4:	200234b8 	.word	0x200234b8
   219f8:	0003c2cc 	.word	0x0003c2cc
   219fc:	0003c3b4 	.word	0x0003c3b4
   21a00:	0003d930 	.word	0x0003d930
   21a04:	20028950 	.word	0x20028950
   21a08:	0003de23 	.word	0x0003de23
   21a0c:	2002b93c 	.word	0x2002b93c
   21a10:	0003daf1 	.word	0x0003daf1
   21a14:	200234b0 	.word	0x200234b0
   21a18:	0003db09 	.word	0x0003db09
   21a1c:	0003db20 	.word	0x0003db20
   21a20:	0003d831 	.word	0x0003d831
   21a24:	00020f51 	.word	0x00020f51
   21a28:	2002e358 	.word	0x2002e358
   21a2c:	20021390 	.word	0x20021390
   21a30:	200234bc 	.word	0x200234bc
   21a34:	0003de32 	.word	0x0003de32
   21a38:	0003db52 	.word	0x0003db52
	if (udp_sock > 0) {
   21a3c:	f43f af07 	beq.w	2184e <handle_at_udp_client+0x10e>
		k_thread_abort(udp_thread_id);
   21a40:	4b2c      	ldr	r3, [pc, #176]	; (21af4 <handle_at_udp_client+0x3b4>)
   21a42:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   21a44:	f004 fcf6 	bl	26434 <z_impl_k_thread_abort>
		ret = close(udp_sock);
   21a48:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   21a4a:	f017 f93c 	bl	38cc6 <z_impl_zsock_close>
		if (ret < 0) {
   21a4e:	1e04      	subs	r4, r0, #0
   21a50:	da12      	bge.n	21a78 <handle_at_udp_client+0x338>
   21a52:	4a29      	ldr	r2, [pc, #164]	; (21af8 <handle_at_udp_client+0x3b8>)
   21a54:	4c29      	ldr	r4, [pc, #164]	; (21afc <handle_at_udp_client+0x3bc>)
   21a56:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   21a58:	f017 fc35 	bl	392c6 <__errno>
   21a5c:	08e4      	lsrs	r4, r4, #3
   21a5e:	6801      	ldr	r1, [r0, #0]
   21a60:	01a4      	lsls	r4, r4, #6
   21a62:	f044 0402 	orr.w	r4, r4, #2
   21a66:	4622      	mov	r2, r4
   21a68:	4825      	ldr	r0, [pc, #148]	; (21b00 <handle_at_udp_client+0x3c0>)
   21a6a:	4249      	negs	r1, r1
   21a6c:	f016 fd37 	bl	384de <log_1>
			ret = -errno;
   21a70:	f017 fc29 	bl	392c6 <__errno>
   21a74:	6804      	ldr	r4, [r0, #0]
   21a76:	4264      	negs	r4, r4
		(void)slm_at_udp_proxy_init();
   21a78:	f7ff fb92 	bl	211a0 <slm_at_udp_proxy_init>
		sprintf(rsp_buf, "#XUDPCLI: disconnected\r\n");
   21a7c:	4921      	ldr	r1, [pc, #132]	; (21b04 <handle_at_udp_client+0x3c4>)
   21a7e:	4822      	ldr	r0, [pc, #136]	; (21b08 <handle_at_udp_client+0x3c8>)
   21a80:	f019 fdf6 	bl	3b670 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   21a84:	4820      	ldr	r0, [pc, #128]	; (21b08 <handle_at_udp_client+0x3c8>)
   21a86:	f7fb faf3 	bl	1d070 <strlen>
   21a8a:	4601      	mov	r1, r0
   21a8c:	481e      	ldr	r0, [pc, #120]	; (21b08 <handle_at_udp_client+0x3c8>)
   21a8e:	f7fc fbab 	bl	1e1e8 <rsp_send>
		break;
   21a92:	e6dc      	b.n	2184e <handle_at_udp_client+0x10e>
		if (udp_sock != INVALID_SOCKET) {
   21a94:	4b1d      	ldr	r3, [pc, #116]	; (21b0c <handle_at_udp_client+0x3cc>)
   21a96:	681b      	ldr	r3, [r3, #0]
   21a98:	1c59      	adds	r1, r3, #1
   21a9a:	d013      	beq.n	21ac4 <handle_at_udp_client+0x384>
			sprintf(rsp_buf, "#XUDPCLI: %d, %d\r\n",
   21a9c:	4a1c      	ldr	r2, [pc, #112]	; (21b10 <handle_at_udp_client+0x3d0>)
   21a9e:	2100      	movs	r1, #0
   21aa0:	7812      	ldrb	r2, [r2, #0]
   21aa2:	4819      	ldr	r0, [pc, #100]	; (21b08 <handle_at_udp_client+0x3c8>)
   21aa4:	e9cd 3200 	strd	r3, r2, [sp]
   21aa8:	f640 228c 	movw	r2, #2700	; 0xa8c
   21aac:	4b19      	ldr	r3, [pc, #100]	; (21b14 <handle_at_udp_client+0x3d4>)
   21aae:	f019 fdb8 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   21ab2:	4815      	ldr	r0, [pc, #84]	; (21b08 <handle_at_udp_client+0x3c8>)
   21ab4:	f7fb fadc 	bl	1d070 <strlen>
   21ab8:	4601      	mov	r1, r0
   21aba:	4813      	ldr	r0, [pc, #76]	; (21b08 <handle_at_udp_client+0x3c8>)
   21abc:	f7fc fb94 	bl	1e1e8 <rsp_send>
		err = 0;
   21ac0:	2400      	movs	r4, #0
		break;
   21ac2:	e6c4      	b.n	2184e <handle_at_udp_client+0x10e>
			sprintf(rsp_buf, "#XUDPCLI: %d\r\n",
   21ac4:	9300      	str	r3, [sp, #0]
   21ac6:	f640 228c 	movw	r2, #2700	; 0xa8c
   21aca:	2100      	movs	r1, #0
   21acc:	4b12      	ldr	r3, [pc, #72]	; (21b18 <handle_at_udp_client+0x3d8>)
   21ace:	480e      	ldr	r0, [pc, #56]	; (21b08 <handle_at_udp_client+0x3c8>)
   21ad0:	f019 fda7 	bl	3b622 <__sprintf_chk>
   21ad4:	e7ed      	b.n	21ab2 <handle_at_udp_client+0x372>
		sprintf(rsp_buf,
   21ad6:	2400      	movs	r4, #0
   21ad8:	2301      	movs	r3, #1
   21ada:	2202      	movs	r2, #2
   21adc:	4621      	mov	r1, r4
   21ade:	e9cd 3201 	strd	r3, r2, [sp, #4]
   21ae2:	9400      	str	r4, [sp, #0]
   21ae4:	f640 228c 	movw	r2, #2700	; 0xa8c
   21ae8:	4b0c      	ldr	r3, [pc, #48]	; (21b1c <handle_at_udp_client+0x3dc>)
   21aea:	4807      	ldr	r0, [pc, #28]	; (21b08 <handle_at_udp_client+0x3c8>)
   21aec:	f019 fd99 	bl	3b622 <__sprintf_chk>
   21af0:	e7c8      	b.n	21a84 <handle_at_udp_client+0x344>
   21af2:	bf00      	nop
   21af4:	200234bc 	.word	0x200234bc
   21af8:	0003c2cc 	.word	0x0003c2cc
   21afc:	0003c3b4 	.word	0x0003c3b4
   21b00:	0003d641 	.word	0x0003d641
   21b04:	0003de4b 	.word	0x0003de4b
   21b08:	20028950 	.word	0x20028950
   21b0c:	200234b8 	.word	0x200234b8
   21b10:	2002b93c 	.word	0x2002b93c
   21b14:	0003de64 	.word	0x0003de64
   21b18:	0003de23 	.word	0x0003de23
   21b1c:	0003de77 	.word	0x0003de77

00021b20 <slm_at_udp_proxy_uninit>:

/**@brief API to uninitialize UDP Proxy AT commands handler
 */
int slm_at_udp_proxy_uninit(void)
{
   21b20:	b538      	push	{r3, r4, r5, lr}
	int ret;

	if (udp_sock > 0) {
   21b22:	4d11      	ldr	r5, [pc, #68]	; (21b68 <slm_at_udp_proxy_uninit+0x48>)
   21b24:	682b      	ldr	r3, [r5, #0]
   21b26:	2b00      	cmp	r3, #0
   21b28:	dd1c      	ble.n	21b64 <slm_at_udp_proxy_uninit+0x44>
		k_thread_abort(udp_thread_id);
   21b2a:	4b10      	ldr	r3, [pc, #64]	; (21b6c <slm_at_udp_proxy_uninit+0x4c>)
   21b2c:	6818      	ldr	r0, [r3, #0]
   21b2e:	f004 fc81 	bl	26434 <z_impl_k_thread_abort>
		ret = close(udp_sock);
   21b32:	6828      	ldr	r0, [r5, #0]
   21b34:	f017 f8c7 	bl	38cc6 <z_impl_zsock_close>
		if (ret < 0) {
   21b38:	2800      	cmp	r0, #0
   21b3a:	da10      	bge.n	21b5e <slm_at_udp_proxy_uninit+0x3e>
   21b3c:	4a0c      	ldr	r2, [pc, #48]	; (21b70 <slm_at_udp_proxy_uninit+0x50>)
   21b3e:	4c0d      	ldr	r4, [pc, #52]	; (21b74 <slm_at_udp_proxy_uninit+0x54>)
   21b40:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   21b42:	f017 fbc0 	bl	392c6 <__errno>
   21b46:	08e4      	lsrs	r4, r4, #3
   21b48:	6801      	ldr	r1, [r0, #0]
   21b4a:	01a4      	lsls	r4, r4, #6
   21b4c:	f044 0402 	orr.w	r4, r4, #2
   21b50:	4622      	mov	r2, r4
   21b52:	4809      	ldr	r0, [pc, #36]	; (21b78 <slm_at_udp_proxy_uninit+0x58>)
   21b54:	4249      	negs	r1, r1
   21b56:	f016 fcc2 	bl	384de <log_1>
			ret = -errno;
   21b5a:	f017 fbb4 	bl	392c6 <__errno>
		}
		udp_sock = INVALID_SOCKET;
   21b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21b62:	602b      	str	r3, [r5, #0]
	}

	return 0;
}
   21b64:	2000      	movs	r0, #0
   21b66:	bd38      	pop	{r3, r4, r5, pc}
   21b68:	200234b8 	.word	0x200234b8
   21b6c:	200234bc 	.word	0x200234bc
   21b70:	0003c2cc 	.word	0x0003c2cc
   21b74:	0003c3b4 	.word	0x0003c3b4
   21b78:	0003d641 	.word	0x0003d641

00021b7c <handle_at_icmp_ping>:
 */
static int handle_at_icmp_ping(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[ICMP_MAX_URL];
	int size = ICMP_MAX_URL;
   21b7c:	2380      	movs	r3, #128	; 0x80
{
   21b7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t length, timeout, count, interval;

	switch (cmd_type) {
   21b82:	2801      	cmp	r0, #1
{
   21b84:	b0a5      	sub	sp, #148	; 0x94
   21b86:	4604      	mov	r4, r0
	int size = ICMP_MAX_URL;
   21b88:	9302      	str	r3, [sp, #8]
	switch (cmd_type) {
   21b8a:	d005      	beq.n	21b98 <handle_at_icmp_ping+0x1c>
	int err = -EINVAL;
   21b8c:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
   21b90:	4620      	mov	r0, r4
   21b92:	b025      	add	sp, #148	; 0x94
   21b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (at_params_valid_count_get(&at_param_list) < 4) {
   21b98:	4874      	ldr	r0, [pc, #464]	; (21d6c <handle_at_icmp_ping+0x1f0>)
   21b9a:	f018 fe5c 	bl	3a856 <at_params_valid_count_get>
   21b9e:	2803      	cmp	r0, #3
   21ba0:	d9f4      	bls.n	21b8c <handle_at_icmp_ping+0x10>
		err = at_params_string_get(&at_param_list, 1, url, &size);
   21ba2:	4621      	mov	r1, r4
   21ba4:	4871      	ldr	r0, [pc, #452]	; (21d6c <handle_at_icmp_ping+0x1f0>)
   21ba6:	ab02      	add	r3, sp, #8
   21ba8:	aa04      	add	r2, sp, #16
   21baa:	f018 fe31 	bl	3a810 <at_params_string_get>
		if (err < 0) {
   21bae:	1e04      	subs	r4, r0, #0
   21bb0:	dbee      	blt.n	21b90 <handle_at_icmp_ping+0x14>
		url[size] = '\0';
   21bb2:	2500      	movs	r5, #0
   21bb4:	9b02      	ldr	r3, [sp, #8]
   21bb6:	aa24      	add	r2, sp, #144	; 0x90
   21bb8:	4413      	add	r3, r2
		err = at_params_short_get(&at_param_list, 2, &length);
   21bba:	2102      	movs	r1, #2
   21bbc:	466a      	mov	r2, sp
   21bbe:	486b      	ldr	r0, [pc, #428]	; (21d6c <handle_at_icmp_ping+0x1f0>)
		url[size] = '\0';
   21bc0:	f803 5c80 	strb.w	r5, [r3, #-128]
		err = at_params_short_get(&at_param_list, 2, &length);
   21bc4:	f018 fdff 	bl	3a7c6 <at_params_short_get>
		if (err < 0) {
   21bc8:	1e04      	subs	r4, r0, #0
   21bca:	dbe1      	blt.n	21b90 <handle_at_icmp_ping+0x14>
		err = at_params_short_get(&at_param_list, 3, &timeout);
   21bcc:	2103      	movs	r1, #3
   21bce:	4867      	ldr	r0, [pc, #412]	; (21d6c <handle_at_icmp_ping+0x1f0>)
   21bd0:	f10d 0202 	add.w	r2, sp, #2
   21bd4:	f018 fdf7 	bl	3a7c6 <at_params_short_get>
		if (err < 0) {
   21bd8:	1e04      	subs	r4, r0, #0
   21bda:	dbd9      	blt.n	21b90 <handle_at_icmp_ping+0x14>
		if (at_params_valid_count_get(&at_param_list) > 4) {
   21bdc:	4863      	ldr	r0, [pc, #396]	; (21d6c <handle_at_icmp_ping+0x1f0>)
   21bde:	f018 fe3a 	bl	3a856 <at_params_valid_count_get>
   21be2:	2804      	cmp	r0, #4
   21be4:	d929      	bls.n	21c3a <handle_at_icmp_ping+0xbe>
			err = at_params_short_get(&at_param_list, 4, &count);
   21be6:	2104      	movs	r1, #4
   21be8:	4860      	ldr	r0, [pc, #384]	; (21d6c <handle_at_icmp_ping+0x1f0>)
   21bea:	aa01      	add	r2, sp, #4
   21bec:	f018 fdeb 	bl	3a7c6 <at_params_short_get>
			if (err < 0) {
   21bf0:	1e04      	subs	r4, r0, #0
   21bf2:	dbcd      	blt.n	21b90 <handle_at_icmp_ping+0x14>
		if (at_params_valid_count_get(&at_param_list) > 5) {
   21bf4:	485d      	ldr	r0, [pc, #372]	; (21d6c <handle_at_icmp_ping+0x1f0>)
   21bf6:	f018 fe2e 	bl	3a856 <at_params_valid_count_get>
   21bfa:	2805      	cmp	r0, #5
   21bfc:	d920      	bls.n	21c40 <handle_at_icmp_ping+0xc4>
			err = at_params_short_get(&at_param_list, 5, &interval);
   21bfe:	2105      	movs	r1, #5
   21c00:	485a      	ldr	r0, [pc, #360]	; (21d6c <handle_at_icmp_ping+0x1f0>)
   21c02:	f10d 0206 	add.w	r2, sp, #6
   21c06:	f018 fdde 	bl	3a7c6 <at_params_short_get>
			if (err < 0) {
   21c0a:	1e04      	subs	r4, r0, #0
   21c0c:	dbc0      	blt.n	21b90 <handle_at_icmp_ping+0x14>
		err = ping_test_handler(url, length, timeout, count, interval);
   21c0e:	f8bd 8000 	ldrh.w	r8, [sp]
   21c12:	f8bd 9002 	ldrh.w	r9, [sp, #2]
	if (length > ICMP_MAX_LEN) {
   21c16:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
		err = ping_test_handler(url, length, timeout, count, interval);
   21c1a:	f8bd 6004 	ldrh.w	r6, [sp, #4]
   21c1e:	f8bd 7006 	ldrh.w	r7, [sp, #6]
	if (length > ICMP_MAX_LEN) {
   21c22:	dd11      	ble.n	21c48 <handle_at_icmp_ping+0xcc>
   21c24:	4952      	ldr	r1, [pc, #328]	; (21d70 <handle_at_icmp_ping+0x1f4>)
   21c26:	4b53      	ldr	r3, [pc, #332]	; (21d74 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("Payload size exceeds limit");
   21c28:	4853      	ldr	r0, [pc, #332]	; (21d78 <handle_at_icmp_ping+0x1fc>)
   21c2a:	1ac9      	subs	r1, r1, r3
   21c2c:	08c9      	lsrs	r1, r1, #3
   21c2e:	0189      	lsls	r1, r1, #6
   21c30:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("LTE not connected yet");
   21c34:	f016 fc44 	bl	384c0 <log_0>
		return -1;
   21c38:	e015      	b.n	21c66 <handle_at_icmp_ping+0xea>
			count = 0;
   21c3a:	f8ad 5004 	strh.w	r5, [sp, #4]
   21c3e:	e7d9      	b.n	21bf4 <handle_at_icmp_ping+0x78>
			interval = 0;
   21c40:	2300      	movs	r3, #0
   21c42:	f8ad 3006 	strh.w	r3, [sp, #6]
   21c46:	e7e2      	b.n	21c0e <handle_at_icmp_ping+0x92>
	st = modem_info_params_get(&modem_param);
   21c48:	484c      	ldr	r0, [pc, #304]	; (21d7c <handle_at_icmp_ping+0x200>)
   21c4a:	f009 fa5d 	bl	2b108 <modem_info_params_get>
	if (st < 0) {
   21c4e:	1e01      	subs	r1, r0, #0
   21c50:	da0c      	bge.n	21c6c <handle_at_icmp_ping+0xf0>
   21c52:	4a47      	ldr	r2, [pc, #284]	; (21d70 <handle_at_icmp_ping+0x1f4>)
   21c54:	4b47      	ldr	r3, [pc, #284]	; (21d74 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("Unable to obtain modem parameters (%d)", st);
   21c56:	484a      	ldr	r0, [pc, #296]	; (21d80 <handle_at_icmp_ping+0x204>)
   21c58:	1ad2      	subs	r2, r2, r3
   21c5a:	08d2      	lsrs	r2, r2, #3
   21c5c:	0192      	lsls	r2, r2, #6
   21c5e:	f042 0201 	orr.w	r2, r2, #1
   21c62:	f016 fc3c 	bl	384de <log_1>
		return -1;
   21c66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21c6a:	e791      	b.n	21b90 <handle_at_icmp_ping+0x14>
	addr_len = strlen(modem_param.network.ip_address.value_string);
   21c6c:	4845      	ldr	r0, [pc, #276]	; (21d84 <handle_at_icmp_ping+0x208>)
   21c6e:	f7fb f9ff 	bl	1d070 <strlen>
	if (addr_len == 0) {
   21c72:	b940      	cbnz	r0, 21c86 <handle_at_icmp_ping+0x10a>
   21c74:	493e      	ldr	r1, [pc, #248]	; (21d70 <handle_at_icmp_ping+0x1f4>)
   21c76:	4b3f      	ldr	r3, [pc, #252]	; (21d74 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("LTE not connected yet");
   21c78:	4843      	ldr	r0, [pc, #268]	; (21d88 <handle_at_icmp_ping+0x20c>)
   21c7a:	1ac9      	subs	r1, r1, r3
   21c7c:	08c9      	lsrs	r1, r1, #3
   21c7e:	0189      	lsls	r1, r1, #6
   21c80:	f041 0101 	orr.w	r1, r1, #1
   21c84:	e7d6      	b.n	21c34 <handle_at_icmp_ping+0xb8>
	return zsock_getaddrinfo(host, service, hints, res);
   21c86:	2200      	movs	r2, #0
   21c88:	483e      	ldr	r0, [pc, #248]	; (21d84 <handle_at_icmp_ping+0x208>)
   21c8a:	4611      	mov	r1, r2
   21c8c:	ab03      	add	r3, sp, #12
   21c8e:	f017 f807 	bl	38ca0 <zsock_getaddrinfo>
	if (st != 0) {
   21c92:	4604      	mov	r4, r0
   21c94:	b160      	cbz	r0, 21cb0 <handle_at_icmp_ping+0x134>
   21c96:	4a36      	ldr	r2, [pc, #216]	; (21d70 <handle_at_icmp_ping+0x1f4>)
   21c98:	4b36      	ldr	r3, [pc, #216]	; (21d74 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("getaddrinfo(src) error: %d", st);
   21c9a:	4601      	mov	r1, r0
   21c9c:	1ad2      	subs	r2, r2, r3
   21c9e:	08d2      	lsrs	r2, r2, #3
   21ca0:	0192      	lsls	r2, r2, #6
   21ca2:	483a      	ldr	r0, [pc, #232]	; (21d8c <handle_at_icmp_ping+0x210>)
   21ca4:	f042 0201 	orr.w	r2, r2, #1
   21ca8:	f016 fc19 	bl	384de <log_1>
		return -st;
   21cac:	4264      	negs	r4, r4
   21cae:	e76f      	b.n	21b90 <handle_at_icmp_ping+0x14>
	ping_argv.src = res;
   21cb0:	9b03      	ldr	r3, [sp, #12]
   21cb2:	4d37      	ldr	r5, [pc, #220]	; (21d90 <handle_at_icmp_ping+0x214>)
   21cb4:	4602      	mov	r2, r0
   21cb6:	4601      	mov	r1, r0
   21cb8:	602b      	str	r3, [r5, #0]
	res = NULL;
   21cba:	9003      	str	r0, [sp, #12]
   21cbc:	ab03      	add	r3, sp, #12
   21cbe:	a804      	add	r0, sp, #16
   21cc0:	f016 ffee 	bl	38ca0 <zsock_getaddrinfo>
	if (st != 0) {
   21cc4:	4604      	mov	r4, r0
   21cc6:	b1c8      	cbz	r0, 21cfc <handle_at_icmp_ping+0x180>
   21cc8:	4b2a      	ldr	r3, [pc, #168]	; (21d74 <handle_at_icmp_ping+0x1f8>)
   21cca:	4a29      	ldr	r2, [pc, #164]	; (21d70 <handle_at_icmp_ping+0x1f4>)
		LOG_ERR("getaddrinfo(dest) error: %d", st);
   21ccc:	4601      	mov	r1, r0
   21cce:	1ad2      	subs	r2, r2, r3
   21cd0:	08d2      	lsrs	r2, r2, #3
   21cd2:	0192      	lsls	r2, r2, #6
   21cd4:	f042 0201 	orr.w	r2, r2, #1
   21cd8:	482e      	ldr	r0, [pc, #184]	; (21d94 <handle_at_icmp_ping+0x218>)
   21cda:	f016 fc00 	bl	384de <log_1>
		sprintf(rsp_buf, "Cannot resolve remote host\r\n");
   21cde:	492e      	ldr	r1, [pc, #184]	; (21d98 <handle_at_icmp_ping+0x21c>)
   21ce0:	482e      	ldr	r0, [pc, #184]	; (21d9c <handle_at_icmp_ping+0x220>)
   21ce2:	f019 fcc5 	bl	3b670 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   21ce6:	482d      	ldr	r0, [pc, #180]	; (21d9c <handle_at_icmp_ping+0x220>)
   21ce8:	f7fb f9c2 	bl	1d070 <strlen>
   21cec:	4601      	mov	r1, r0
   21cee:	482b      	ldr	r0, [pc, #172]	; (21d9c <handle_at_icmp_ping+0x220>)
   21cf0:	f7fc fa7a 	bl	1e1e8 <rsp_send>
	zsock_freeaddrinfo(ai);
   21cf4:	6828      	ldr	r0, [r5, #0]
   21cf6:	f016 ffd5 	bl	38ca4 <zsock_freeaddrinfo>
   21cfa:	e7d7      	b.n	21cac <handle_at_icmp_ping+0x130>
	ping_argv.dest = res;
   21cfc:	9b03      	ldr	r3, [sp, #12]
	if (ping_argv.src->ai_family != ping_argv.dest->ai_family) {
   21cfe:	682a      	ldr	r2, [r5, #0]
	ping_argv.dest = res;
   21d00:	606b      	str	r3, [r5, #4]
	if (ping_argv.src->ai_family != ping_argv.dest->ai_family) {
   21d02:	6892      	ldr	r2, [r2, #8]
   21d04:	689b      	ldr	r3, [r3, #8]
   21d06:	429a      	cmp	r2, r3
   21d08:	d010      	beq.n	21d2c <handle_at_icmp_ping+0x1b0>
   21d0a:	4b1a      	ldr	r3, [pc, #104]	; (21d74 <handle_at_icmp_ping+0x1f8>)
   21d0c:	4918      	ldr	r1, [pc, #96]	; (21d70 <handle_at_icmp_ping+0x1f4>)
		LOG_ERR("Source/Destination address family error");
   21d0e:	4824      	ldr	r0, [pc, #144]	; (21da0 <handle_at_icmp_ping+0x224>)
   21d10:	1ac9      	subs	r1, r1, r3
   21d12:	08c9      	lsrs	r1, r1, #3
   21d14:	0189      	lsls	r1, r1, #6
   21d16:	f041 0101 	orr.w	r1, r1, #1
   21d1a:	f016 fbd1 	bl	384c0 <log_0>
   21d1e:	6868      	ldr	r0, [r5, #4]
   21d20:	f016 ffc0 	bl	38ca4 <zsock_freeaddrinfo>
   21d24:	6828      	ldr	r0, [r5, #0]
   21d26:	f016 ffbd 	bl	38ca4 <zsock_freeaddrinfo>
		return -1;
   21d2a:	e79c      	b.n	21c66 <handle_at_icmp_ping+0xea>
		ping_argv.count = count;
   21d2c:	2e00      	cmp	r6, #0
   21d2e:	bf08      	it	eq
   21d30:	2601      	moveq	r6, #1
		ping_argv.interval = interval;
   21d32:	2f00      	cmp	r7, #0
	ping_argv.interval = 1000;	/* default 1s */
   21d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		ping_argv.interval = interval;
   21d38:	bf18      	it	ne
   21d3a:	463b      	movne	r3, r7
		err = ping_test_handler(url, length, timeout, count, interval);
   21d3c:	e9c5 8902 	strd	r8, r9, [r5, #8]
   21d40:	4918      	ldr	r1, [pc, #96]	; (21da4 <handle_at_icmp_ping+0x228>)
		ping_argv.count = count;
   21d42:	612e      	str	r6, [r5, #16]
		ping_argv.interval = interval;
   21d44:	616b      	str	r3, [r5, #20]
   21d46:	e8d1 3fef 	ldaex	r3, [r1]
   21d4a:	f043 0201 	orr.w	r2, r3, #1
   21d4e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   21d52:	2800      	cmp	r0, #0
   21d54:	d1f7      	bne.n	21d46 <handle_at_icmp_ping+0x1ca>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   21d56:	f013 0501 	ands.w	r5, r3, #1
   21d5a:	f47f af19 	bne.w	21b90 <handle_at_icmp_ping+0x14>
		k_queue_append(&work_q->queue, work);
   21d5e:	4812      	ldr	r0, [pc, #72]	; (21da8 <handle_at_icmp_ping+0x22c>)
   21d60:	3908      	subs	r1, #8
   21d62:	f018 ff3c 	bl	3abde <k_queue_append>
	return 0;
   21d66:	462c      	mov	r4, r5
		break;
   21d68:	e712      	b.n	21b90 <handle_at_icmp_ping+0x14>
   21d6a:	bf00      	nop
   21d6c:	20023430 	.word	0x20023430
   21d70:	0003c34c 	.word	0x0003c34c
   21d74:	0003c2cc 	.word	0x0003c2cc
   21d78:	0003deb1 	.word	0x0003deb1
   21d7c:	20020900 	.word	0x20020900
   21d80:	0003d873 	.word	0x0003d873
   21d84:	20020c12 	.word	0x20020c12
   21d88:	0003d89a 	.word	0x0003d89a
   21d8c:	0003decc 	.word	0x0003decc
   21d90:	200234cc 	.word	0x200234cc
   21d94:	0003dee7 	.word	0x0003dee7
   21d98:	0003df03 	.word	0x0003df03
   21d9c:	20028950 	.word	0x20028950
   21da0:	0003df20 	.word	0x0003df20
   21da4:	200234c8 	.word	0x200234c8
   21da8:	200211e8 	.word	0x200211e8

00021dac <send_ping_wait_reply>:
{
   21dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	total_length = ping_argv.len + header_len + icmp_hdr_len;
   21db0:	4d9e      	ldr	r5, [pc, #632]	; (2202c <send_ping_wait_reply+0x280>)
{
   21db2:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
	total_length = ping_argv.len + header_len + icmp_hdr_len;
   21db6:	68ab      	ldr	r3, [r5, #8]
	memset(ip_buf, 0x00, header_len);
   21db8:	2400      	movs	r4, #0
	total_length = ping_argv.len + header_len + icmp_hdr_len;
   21dba:	331c      	adds	r3, #28
   21dbc:	fa1f fb83 	uxth.w	fp, r3
	ip_buf[2] = total_length >> 8;           /* Total length */
   21dc0:	ba5b      	rev16	r3, r3
   21dc2:	f8ad 301a 	strh.w	r3, [sp, #26]
	ip_buf[8] = 64;                          /* TTL */
   21dc6:	f44f 73a0 	mov.w	r3, #320	; 0x140
	ip_buf[0] = (4 << 4) + (header_len / 4); /* Version & header length */
   21dca:	2245      	movs	r2, #69	; 0x45
	memset(ip_buf, 0x00, header_len);
   21dcc:	e9cd 4408 	strd	r4, r4, [sp, #32]
	ip_buf[8] = 64;                          /* TTL */
   21dd0:	f8ad 3020 	strh.w	r3, [sp, #32]
	sa = (struct sockaddr_in *)ping_argv.src->ai_addr;
   21dd4:	682b      	ldr	r3, [r5, #0]
	memset(ip_buf, 0x00, header_len);
   21dd6:	940a      	str	r4, [sp, #40]	; 0x28
	ip_buf[1] = 0x00;                        /* Type of service */
   21dd8:	699b      	ldr	r3, [r3, #24]
	ip_buf[4] = 0x00;                        /* Identification */
   21dda:	9407      	str	r4, [sp, #28]
   21ddc:	685b      	ldr	r3, [r3, #4]
	hcs = check_ics(buffer, len);
   21dde:	2114      	movs	r1, #20
	buffer[0] = ipaddr & 0xFF;
   21de0:	9309      	str	r3, [sp, #36]	; 0x24
	sa = (struct sockaddr_in *)ping_argv.dest->ai_addr;
   21de2:	686b      	ldr	r3, [r5, #4]
	hcs = check_ics(buffer, len);
   21de4:	a806      	add	r0, sp, #24
   21de6:	699b      	ldr	r3, [r3, #24]
	ip_buf[0] = (4 << 4) + (header_len / 4); /* Version & header length */
   21de8:	f8ad 2018 	strh.w	r2, [sp, #24]
	setip(ip_buf+16, sa->sin_addr.s_addr);     /* Destination */
   21dec:	685b      	ldr	r3, [r3, #4]
	*ptr_hcs = 0;   /* Clear checksum before calculation */
   21dee:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
	buffer[0] = ipaddr & 0xFF;
   21df2:	930a      	str	r3, [sp, #40]	; 0x28
	hcs = check_ics(buffer, len);
   21df4:	f015 fe7e 	bl	37af4 <check_ics>
	data[0] = ICMP_ECHO_REQ;                 /* Type (echo req) */
   21df8:	2308      	movs	r3, #8
		data[i] = (i + seqnr) % 10 + '0';
   21dfa:	260a      	movs	r6, #10
	data[6] = seqnr >> 8;                   /* seqnr */
   21dfc:	498c      	ldr	r1, [pc, #560]	; (22030 <send_ping_wait_reply+0x284>)
	data[4] = 0x00;                         /* Identifier */
   21dfe:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
	data[6] = seqnr >> 8;                   /* seqnr */
   21e02:	780a      	ldrb	r2, [r1, #0]
   21e04:	4689      	mov	r9, r1
	data[7] = ++seqnr;                      /* seqr */
   21e06:	3201      	adds	r2, #1
   21e08:	b2d2      	uxtb	r2, r2
	data[6] = seqnr >> 8;                   /* seqnr */
   21e0a:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
	data[7] = ++seqnr;                      /* seqr */
   21e0e:	700a      	strb	r2, [r1, #0]
	*ptr_hcs = hcs;
   21e10:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
	data[0] = ICMP_ECHO_REQ;                 /* Type (echo req) */
   21e14:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	data[7] = ++seqnr;                      /* seqr */
   21e18:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	for (int i = 8; i < total_length - header_len; i++) {
   21e1c:	ac0d      	add	r4, sp, #52	; 0x34
   21e1e:	9503      	str	r5, [sp, #12]
   21e20:	f1ab 0114 	sub.w	r1, fp, #20
   21e24:	4299      	cmp	r1, r3
   21e26:	dc40      	bgt.n	21eaa <send_ping_wait_reply+0xfe>
	*ptr_hcs = 0;   /* Clear checksum before calculation */
   21e28:	f04f 0a00 	mov.w	sl, #0
	hcs = check_ics(buffer, len);
   21e2c:	a80b      	add	r0, sp, #44	; 0x2c
	*ptr_hcs = 0;   /* Clear checksum before calculation */
   21e2e:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
	hcs = check_ics(buffer, len);
   21e32:	f015 fe5f 	bl	37af4 <check_ics>
	*ptr_hcs = hcs;
   21e36:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
	errno = 0;
   21e3a:	f017 fa44 	bl	392c6 <__errno>
	delta_t = 0;
   21e3e:	2200      	movs	r2, #0
   21e40:	2300      	movs	r3, #0
   21e42:	4d7c      	ldr	r5, [pc, #496]	; (22034 <send_ping_wait_reply+0x288>)
	errno = 0;
   21e44:	f8c0 a000 	str.w	sl, [r0]
	delta_t = 0;
   21e48:	e9c5 2300 	strd	r2, r3, [r5]
	return z_impl_k_uptime_ticks();
   21e4c:	f019 f8b1 	bl	3afb2 <z_impl_k_uptime_ticks>
   21e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21e54:	460a      	mov	r2, r1
   21e56:	fba0 0103 	umull	r0, r1, r0, r3
   21e5a:	fb03 1102 	mla	r1, r3, r2, r1
	start_t = k_uptime_get();
   21e5e:	4e76      	ldr	r6, [pc, #472]	; (22038 <send_ping_wait_reply+0x28c>)
   21e60:	0bc3      	lsrs	r3, r0, #15
   21e62:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   21e66:	0bca      	lsrs	r2, r1, #15
   21e68:	e9c6 3200 	strd	r3, r2, [r6]
	fd = nrf_socket(NRF_AF_PACKET, NRF_SOCK_RAW, 0);
   21e6c:	2103      	movs	r1, #3
   21e6e:	4652      	mov	r2, sl
   21e70:	2005      	movs	r0, #5
   21e72:	f011 fa11 	bl	33298 <nrf_socket>
	if (fd < 0) {
   21e76:	4c71      	ldr	r4, [pc, #452]	; (2203c <send_ping_wait_reply+0x290>)
   21e78:	4b71      	ldr	r3, [pc, #452]	; (22040 <send_ping_wait_reply+0x294>)
   21e7a:	f1b0 0800 	subs.w	r8, r0, #0
   21e7e:	eba4 0403 	sub.w	r4, r4, r3
   21e82:	462f      	mov	r7, r5
   21e84:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   21e88:	da19      	bge.n	21ebe <send_ping_wait_reply+0x112>
		LOG_ERR("socket() failed: (%d)", -errno);
   21e8a:	f017 fa1c 	bl	392c6 <__errno>
   21e8e:	01a4      	lsls	r4, r4, #6
   21e90:	6801      	ldr	r1, [r0, #0]
   21e92:	f044 0401 	orr.w	r4, r4, #1
   21e96:	486b      	ldr	r0, [pc, #428]	; (22044 <send_ping_wait_reply+0x298>)
   21e98:	4622      	mov	r2, r4
   21e9a:	4249      	negs	r1, r1
   21e9c:	f016 fb1f 	bl	384de <log_1>
		return (uint32_t)delta_t;
   21ea0:	6828      	ldr	r0, [r5, #0]
}
   21ea2:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   21ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		data[i] = (i + seqnr) % 10 + '0';
   21eaa:	18d7      	adds	r7, r2, r3
   21eac:	fbb7 f0f6 	udiv	r0, r7, r6
   21eb0:	fb06 7010 	mls	r0, r6, r0, r7
   21eb4:	3030      	adds	r0, #48	; 0x30
   21eb6:	f804 0b01 	strb.w	r0, [r4], #1
	for (int i = 8; i < total_length - header_len; i++) {
   21eba:	3301      	adds	r3, #1
   21ebc:	e7b2      	b.n	21e24 <send_ping_wait_reply+0x78>
	ret = nrf_send(fd, ip_buf, total_length, 0);
   21ebe:	4653      	mov	r3, sl
   21ec0:	465a      	mov	r2, fp
   21ec2:	a906      	add	r1, sp, #24
   21ec4:	f011 fa24 	bl	33310 <nrf_send>
	if (ret <= 0) {
   21ec8:	2800      	cmp	r0, #0
   21eca:	dc0f      	bgt.n	21eec <send_ping_wait_reply+0x140>
		LOG_ERR("nrf_send() failed: (%d)", -errno);
   21ecc:	f017 f9fb 	bl	392c6 <__errno>
   21ed0:	01a4      	lsls	r4, r4, #6
   21ed2:	6801      	ldr	r1, [r0, #0]
   21ed4:	f044 0401 	orr.w	r4, r4, #1
   21ed8:	4622      	mov	r2, r4
   21eda:	485b      	ldr	r0, [pc, #364]	; (22048 <send_ping_wait_reply+0x29c>)
   21edc:	4249      	negs	r1, r1
   21ede:	f016 fafe 	bl	384de <log_1>
	(void)nrf_close(fd);
   21ee2:	4640      	mov	r0, r8
   21ee4:	f011 f9ea 	bl	332bc <nrf_close>
	return (uint32_t)delta_t;
   21ee8:	6838      	ldr	r0, [r7, #0]
   21eea:	e7da      	b.n	21ea2 <send_ping_wait_reply+0xf6>
	fds[0].events = NRF_POLLIN;
   21eec:	2101      	movs	r1, #1
	ret = nrf_poll(fds, 1, ping_argv.waitms);
   21eee:	9b03      	ldr	r3, [sp, #12]
   21ef0:	a804      	add	r0, sp, #16
   21ef2:	68da      	ldr	r2, [r3, #12]
	fds[0].fd = fd;
   21ef4:	f8cd 8010 	str.w	r8, [sp, #16]
	fds[0].events = NRF_POLLIN;
   21ef8:	f8ad 1014 	strh.w	r1, [sp, #20]
	ret = nrf_poll(fds, 1, ping_argv.waitms);
   21efc:	f011 fade 	bl	334bc <nrf_poll>
	if (ret <= 0) {
   21f00:	1e02      	subs	r2, r0, #0
   21f02:	dd1b      	ble.n	21f3c <send_ping_wait_reply+0x190>
			LOG_INF("nrf_recv() wrong data (%d)", len);
   21f04:	ea4f 1a84 	mov.w	sl, r4, lsl #6
   21f08:	f8df b160 	ldr.w	fp, [pc, #352]	; 2206c <send_ping_wait_reply+0x2c0>
   21f0c:	f04a 0a03 	orr.w	sl, sl, #3
		len = nrf_recv(fd, ip_buf, NET_IPV4_MTU, 0);
   21f10:	2300      	movs	r3, #0
   21f12:	f44f 7210 	mov.w	r2, #576	; 0x240
   21f16:	4640      	mov	r0, r8
   21f18:	a906      	add	r1, sp, #24
   21f1a:	f011 fa2f 	bl	3337c <nrf_recv>
		if (len <= 0) {
   21f1e:	1e05      	subs	r5, r0, #0
   21f20:	dc25      	bgt.n	21f6e <send_ping_wait_reply+0x1c2>
			LOG_ERR("nrf_recv() failed: (%d) (%d)", -errno, len);
   21f22:	f017 f9d0 	bl	392c6 <__errno>
   21f26:	01a4      	lsls	r4, r4, #6
   21f28:	6801      	ldr	r1, [r0, #0]
   21f2a:	f044 0401 	orr.w	r4, r4, #1
   21f2e:	4623      	mov	r3, r4
   21f30:	462a      	mov	r2, r5
   21f32:	4846      	ldr	r0, [pc, #280]	; (2204c <send_ping_wait_reply+0x2a0>)
   21f34:	4249      	negs	r1, r1
   21f36:	f016 fae9 	bl	3850c <log_2>
			goto close_end;
   21f3a:	e7d2      	b.n	21ee2 <send_ping_wait_reply+0x136>
   21f3c:	9203      	str	r2, [sp, #12]
		LOG_ERR("nrf_poll() failed: (%d) (%d)", -errno, ret);
   21f3e:	f017 f9c2 	bl	392c6 <__errno>
   21f42:	01a4      	lsls	r4, r4, #6
   21f44:	6801      	ldr	r1, [r0, #0]
   21f46:	f044 0401 	orr.w	r4, r4, #1
   21f4a:	4841      	ldr	r0, [pc, #260]	; (22050 <send_ping_wait_reply+0x2a4>)
   21f4c:	4249      	negs	r1, r1
   21f4e:	4623      	mov	r3, r4
   21f50:	9a03      	ldr	r2, [sp, #12]
   21f52:	f016 fadb 	bl	3850c <log_2>
		sprintf(rsp_buf, "#XPING: timeout\r\n");
   21f56:	493f      	ldr	r1, [pc, #252]	; (22054 <send_ping_wait_reply+0x2a8>)
   21f58:	483f      	ldr	r0, [pc, #252]	; (22058 <send_ping_wait_reply+0x2ac>)
   21f5a:	f019 fb89 	bl	3b670 <strcpy>
	rsp_send(rsp_buf, strlen(rsp_buf));
   21f5e:	483e      	ldr	r0, [pc, #248]	; (22058 <send_ping_wait_reply+0x2ac>)
   21f60:	f7fb f886 	bl	1d070 <strlen>
   21f64:	4601      	mov	r1, r0
   21f66:	483c      	ldr	r0, [pc, #240]	; (22058 <send_ping_wait_reply+0x2ac>)
   21f68:	f7fc f93e 	bl	1e1e8 <rsp_send>
   21f6c:	e7b9      	b.n	21ee2 <send_ping_wait_reply+0x136>
		if (len < header_len) {
   21f6e:	2d13      	cmp	r5, #19
   21f70:	dc05      	bgt.n	21f7e <send_ping_wait_reply+0x1d2>
			LOG_INF("nrf_recv() wrong data (%d)", len);
   21f72:	4652      	mov	r2, sl
   21f74:	4629      	mov	r1, r5
   21f76:	4658      	mov	r0, fp
   21f78:	f016 fab1 	bl	384de <log_1>
			continue;
   21f7c:	e7c8      	b.n	21f10 <send_ping_wait_reply+0x164>
		if (ip_buf[IP_PROTOCOL_POS] != ICMP) {
   21f7e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   21f82:	2b01      	cmp	r3, #1
   21f84:	d1c4      	bne.n	21f10 <send_ping_wait_reply+0x164>
   21f86:	f019 f814 	bl	3afb2 <z_impl_k_uptime_ticks>
   21f8a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   21f8e:	460b      	mov	r3, r1
   21f90:	fba0 010a 	umull	r0, r1, r0, sl
   21f94:	fb0a 1103 	mla	r1, sl, r3, r1
   21f98:	0bc2      	lsrs	r2, r0, #15
   21f9a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   21f9e:	0bcb      	lsrs	r3, r1, #15
	delta = uptime - *reftime;
   21fa0:	e9d6 0100 	ldrd	r0, r1, [r6]
   21fa4:	ebb2 0b00 	subs.w	fp, r2, r0
   21fa8:	eb63 0101 	sbc.w	r1, r3, r1
	delta_t = k_uptime_delta(&start_t);
   21fac:	e9c7 b100 	strd	fp, r1, [r7]
	hcs = check_ics(data, len - header_len);
   21fb0:	a80b      	add	r0, sp, #44	; 0x2c
   21fb2:	f1a5 0114 	sub.w	r1, r5, #20
	*reftime = uptime;
   21fb6:	e9c6 2300 	strd	r2, r3, [r6]
   21fba:	f015 fd9b 	bl	37af4 <check_ics>
	if (hcs != 0) {
   21fbe:	4601      	mov	r1, r0
   21fc0:	b150      	cbz	r0, 21fd8 <send_ping_wait_reply+0x22c>
		LOG_WRN("HCS error %d", hcs);
   21fc2:	01a2      	lsls	r2, r4, #6
   21fc4:	4825      	ldr	r0, [pc, #148]	; (2205c <send_ping_wait_reply+0x2b0>)
   21fc6:	f042 0202 	orr.w	r2, r2, #2
   21fca:	f016 fa88 	bl	384de <log_1>
		delta_t = 0;
   21fce:	2200      	movs	r2, #0
   21fd0:	2300      	movs	r3, #0
   21fd2:	e9c7 2300 	strd	r2, r3, [r7]
		goto close_end;
   21fd6:	e784      	b.n	21ee2 <send_ping_wait_reply+0x136>
	plseqnr = data[7];
   21fd8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
	if (plseqnr != seqnr) {
   21fdc:	f899 2000 	ldrb.w	r2, [r9]
   21fe0:	4290      	cmp	r0, r2
   21fe2:	d007      	beq.n	21ff4 <send_ping_wait_reply+0x248>
		LOG_WRN("error sequence numbers %d %d", plseqnr, seqnr);
   21fe4:	4601      	mov	r1, r0
   21fe6:	01a3      	lsls	r3, r4, #6
   21fe8:	481d      	ldr	r0, [pc, #116]	; (22060 <send_ping_wait_reply+0x2b4>)
   21fea:	f043 0302 	orr.w	r3, r3, #2
		LOG_WRN("error length %d %d", pllen, len);
   21fee:	f016 fa8d 	bl	3850c <log_2>
   21ff2:	e7ec      	b.n	21fce <send_ping_wait_reply+0x222>
	pllen = (ip_buf[2] << 8) + ip_buf[3];
   21ff4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   21ff8:	f89d 601b 	ldrb.w	r6, [sp, #27]
   21ffc:	eb06 2603 	add.w	r6, r6, r3, lsl #8
	if (pllen != len) {
   22000:	42ae      	cmp	r6, r5
   22002:	d006      	beq.n	22012 <send_ping_wait_reply+0x266>
		LOG_WRN("error length %d %d", pllen, len);
   22004:	01a3      	lsls	r3, r4, #6
   22006:	462a      	mov	r2, r5
   22008:	4631      	mov	r1, r6
   2200a:	4816      	ldr	r0, [pc, #88]	; (22064 <send_ping_wait_reply+0x2b8>)
   2200c:	f043 0302 	orr.w	r3, r3, #2
   22010:	e7ed      	b.n	21fee <send_ping_wait_reply+0x242>
	sprintf(rsp_buf, "#XPING: %d.%03d\r\n",
   22012:	fbbb f2fa 	udiv	r2, fp, sl
   22016:	fb0a b312 	mls	r3, sl, r2, fp
   2201a:	480f      	ldr	r0, [pc, #60]	; (22058 <send_ping_wait_reply+0x2ac>)
   2201c:	e9cd 2300 	strd	r2, r3, [sp]
   22020:	f640 228c 	movw	r2, #2700	; 0xa8c
   22024:	4b10      	ldr	r3, [pc, #64]	; (22068 <send_ping_wait_reply+0x2bc>)
   22026:	f019 fafc 	bl	3b622 <__sprintf_chk>
   2202a:	e798      	b.n	21f5e <send_ping_wait_reply+0x1b2>
   2202c:	200234cc 	.word	0x200234cc
   22030:	2002b93d 	.word	0x2002b93d
   22034:	20021458 	.word	0x20021458
   22038:	20021460 	.word	0x20021460
   2203c:	0003c34c 	.word	0x0003c34c
   22040:	0003c2cc 	.word	0x0003c2cc
   22044:	0003df48 	.word	0x0003df48
   22048:	0003df5e 	.word	0x0003df5e
   2204c:	0003dfa5 	.word	0x0003dfa5
   22050:	0003df76 	.word	0x0003df76
   22054:	0003df93 	.word	0x0003df93
   22058:	20028950 	.word	0x20028950
   2205c:	0003dfdd 	.word	0x0003dfdd
   22060:	0003dfea 	.word	0x0003dfea
   22064:	0003e007 	.word	0x0003e007
   22068:	0003e01a 	.word	0x0003e01a
   2206c:	0003dfc2 	.word	0x0003dfc2

00022070 <ping_task>:
{
   22070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < ping_argv.count; i++) {
   22074:	2700      	movs	r7, #0
   22076:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
	uint32_t count = 0;
   2207a:	463e      	mov	r6, r7
	uint32_t sum = 0;
   2207c:	463c      	mov	r4, r7
	struct addrinfo *si = ping_argv.src;
   2207e:	4d27      	ldr	r5, [pc, #156]	; (2211c <ping_task+0xac>)
	struct addrinfo *di = ping_argv.dest;
   22080:	e9d5 9800 	ldrd	r9, r8, [r5]
	for (int i = 0; i < ping_argv.count; i++) {
   22084:	692b      	ldr	r3, [r5, #16]
   22086:	42bb      	cmp	r3, r7
   22088:	dc2f      	bgt.n	220ea <ping_task+0x7a>
	if (count > 1) {
   2208a:	2e01      	cmp	r6, #1
   2208c:	d919      	bls.n	220c2 <ping_task+0x52>
		uint32_t avg = (sum + count/2) / count;
   2208e:	eb04 0456 	add.w	r4, r4, r6, lsr #1
   22092:	fbb4 f6f6 	udiv	r6, r4, r6
		int avg_f = avg % 1000;
   22096:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2209a:	fbb6 f3f4 	udiv	r3, r6, r4
   2209e:	fb04 6613 	mls	r6, r4, r3, r6
		sprintf(rsp_buf, "#XPING: average %d.%03d\r\n", avg_s, avg_f);
   220a2:	2100      	movs	r1, #0
   220a4:	f640 228c 	movw	r2, #2700	; 0xa8c
   220a8:	e9cd 3600 	strd	r3, r6, [sp]
   220ac:	481c      	ldr	r0, [pc, #112]	; (22120 <ping_task+0xb0>)
   220ae:	4b1d      	ldr	r3, [pc, #116]	; (22124 <ping_task+0xb4>)
   220b0:	f019 fab7 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   220b4:	481a      	ldr	r0, [pc, #104]	; (22120 <ping_task+0xb0>)
   220b6:	f7fa ffdb 	bl	1d070 <strlen>
   220ba:	4601      	mov	r1, r0
   220bc:	4818      	ldr	r0, [pc, #96]	; (22120 <ping_task+0xb0>)
   220be:	f7fc f893 	bl	1e1e8 <rsp_send>
   220c2:	4648      	mov	r0, r9
   220c4:	f016 fdee 	bl	38ca4 <zsock_freeaddrinfo>
   220c8:	4640      	mov	r0, r8
   220ca:	f016 fdeb 	bl	38ca4 <zsock_freeaddrinfo>
	sprintf(rsp_buf, "OK\r\n");
   220ce:	4916      	ldr	r1, [pc, #88]	; (22128 <ping_task+0xb8>)
   220d0:	4813      	ldr	r0, [pc, #76]	; (22120 <ping_task+0xb0>)
   220d2:	f019 facd 	bl	3b670 <strcpy>
	rsp_send(rsp_buf, strlen(rsp_buf));
   220d6:	4812      	ldr	r0, [pc, #72]	; (22120 <ping_task+0xb0>)
   220d8:	f7fa ffca 	bl	1d070 <strlen>
   220dc:	4601      	mov	r1, r0
   220de:	4810      	ldr	r0, [pc, #64]	; (22120 <ping_task+0xb0>)
}
   220e0:	b003      	add	sp, #12
   220e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rsp_send(rsp_buf, strlen(rsp_buf));
   220e6:	f7fc b87f 	b.w	1e1e8 <rsp_send>
		uint32_t ping_t = send_ping_wait_reply();
   220ea:	f7ff fe5f 	bl	21dac <send_ping_wait_reply>
		if (ping_t > 0)  {
   220ee:	b108      	cbz	r0, 220f4 <ping_task+0x84>
			count++;
   220f0:	3601      	adds	r6, #1
			sum += ping_t;
   220f2:	4404      	add	r4, r0
   220f4:	f240 3be7 	movw	fp, #999	; 0x3e7
   220f8:	f04f 0c00 	mov.w	ip, #0
		k_sleep(K_MSEC(ping_argv.interval));
   220fc:	696b      	ldr	r3, [r5, #20]
   220fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22102:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   22106:	fbca bc01 	smlal	fp, ip, sl, r1
   2210a:	2300      	movs	r3, #0
   2210c:	4658      	mov	r0, fp
   2210e:	4661      	mov	r1, ip
   22110:	f7fa fb52 	bl	1c7b8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   22114:	f014 f8cc 	bl	362b0 <z_impl_k_sleep>
	for (int i = 0; i < ping_argv.count; i++) {
   22118:	3701      	adds	r7, #1
   2211a:	e7b3      	b.n	22084 <ping_task+0x14>
   2211c:	200234cc 	.word	0x200234cc
   22120:	20028950 	.word	0x20028950
   22124:	0003e02c 	.word	0x0003e02c
   22128:	0003d34d 	.word	0x0003d34d

0002212c <slm_at_icmp_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_icmp_parse(const char *at_cmd)
{
   2212c:	b510      	push	{r4, lr}
	int ret = -ENOENT;
	enum at_cmd_type type;

	for (int i = 0; i < AT_ICMP_MAX; i++) {
		if (slm_util_cmd_casecmp(at_cmd, icmp_at_list[i].string)) {
   2212e:	4911      	ldr	r1, [pc, #68]	; (22174 <slm_at_icmp_parse+0x48>)
{
   22130:	4604      	mov	r4, r0
		if (slm_util_cmd_casecmp(at_cmd, icmp_at_list[i].string)) {
   22132:	f7fb fef3 	bl	1df1c <slm_util_cmd_casecmp>
   22136:	b1d0      	cbz	r0, 2216e <slm_at_icmp_parse+0x42>
			ret = at_parser_params_from_str(at_cmd, NULL,
   22138:	2100      	movs	r1, #0
   2213a:	4620      	mov	r0, r4
   2213c:	4a0e      	ldr	r2, [pc, #56]	; (22178 <slm_at_icmp_parse+0x4c>)
   2213e:	f018 fa42 	bl	3a5c6 <at_parser_params_from_str>
						&at_param_list);
			if (ret < 0) {
   22142:	1e01      	subs	r1, r0, #0
   22144:	da0c      	bge.n	22160 <slm_at_icmp_parse+0x34>
   22146:	4b0d      	ldr	r3, [pc, #52]	; (2217c <slm_at_icmp_parse+0x50>)
   22148:	4a0d      	ldr	r2, [pc, #52]	; (22180 <slm_at_icmp_parse+0x54>)
				LOG_ERR("Failed to parse AT command %d", ret);
   2214a:	480e      	ldr	r0, [pc, #56]	; (22184 <slm_at_icmp_parse+0x58>)
   2214c:	1ad2      	subs	r2, r2, r3
   2214e:	08d2      	lsrs	r2, r2, #3
   22150:	0192      	lsls	r2, r2, #6
   22152:	f042 0201 	orr.w	r2, r2, #1
   22156:	f016 f9c2 	bl	384de <log_1>
				return -EINVAL;
   2215a:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
   2215e:	bd10      	pop	{r4, pc}
			type = at_parser_cmd_type_get(at_cmd);
   22160:	4620      	mov	r0, r4
   22162:	f018 fa33 	bl	3a5cc <at_parser_cmd_type_get>
}
   22166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			ret = icmp_at_list[i].handler(type);
   2216a:	f7ff bd07 	b.w	21b7c <handle_at_icmp_ping>
	int ret = -ENOENT;
   2216e:	f06f 0001 	mvn.w	r0, #1
   22172:	e7f4      	b.n	2215e <slm_at_icmp_parse+0x32>
   22174:	0003e046 	.word	0x0003e046
   22178:	20023430 	.word	0x20023430
   2217c:	0003c2cc 	.word	0x0003c2cc
   22180:	0003c34c 	.word	0x0003c34c
   22184:	0003d35e 	.word	0x0003d35e

00022188 <slm_at_icmp_clac>:

/**@brief API to list ICMP AT commands
 */
void slm_at_icmp_clac(void)
{
   22188:	b513      	push	{r0, r1, r4, lr}
	for (int i = 0; i < AT_ICMP_MAX; i++) {
		sprintf(rsp_buf, "%s\r\n", icmp_at_list[i].string);
   2218a:	4b0a      	ldr	r3, [pc, #40]	; (221b4 <slm_at_icmp_clac+0x2c>)
   2218c:	4c0a      	ldr	r4, [pc, #40]	; (221b8 <slm_at_icmp_clac+0x30>)
   2218e:	f640 228c 	movw	r2, #2700	; 0xa8c
   22192:	2100      	movs	r1, #0
   22194:	9300      	str	r3, [sp, #0]
   22196:	4620      	mov	r0, r4
   22198:	4b08      	ldr	r3, [pc, #32]	; (221bc <slm_at_icmp_clac+0x34>)
   2219a:	f019 fa42 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   2219e:	4620      	mov	r0, r4
   221a0:	f7fa ff66 	bl	1d070 <strlen>
   221a4:	4601      	mov	r1, r0
   221a6:	4620      	mov	r0, r4
	}
}
   221a8:	b002      	add	sp, #8
   221aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rsp_send(rsp_buf, strlen(rsp_buf));
   221ae:	f7fc b81b 	b.w	1e1e8 <rsp_send>
   221b2:	bf00      	nop
   221b4:	0003e046 	.word	0x0003e046
   221b8:	20028950 	.word	0x20028950
   221bc:	0003d557 	.word	0x0003d557

000221c0 <slm_at_icmp_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   221c0:	2000      	movs	r0, #0
   221c2:	4b03      	ldr	r3, [pc, #12]	; (221d0 <slm_at_icmp_init+0x10>)
   221c4:	4a03      	ldr	r2, [pc, #12]	; (221d4 <slm_at_icmp_init+0x14>)
   221c6:	6018      	str	r0, [r3, #0]
   221c8:	e9c3 2001 	strd	r2, r0, [r3, #4]
 */
int slm_at_icmp_init(void)
{
	k_work_init(&my_work, ping_task);
	return 0;
}
   221cc:	4770      	bx	lr
   221ce:	bf00      	nop
   221d0:	200234c0 	.word	0x200234c0
   221d4:	00022071 	.word	0x00022071

000221d8 <fota_dl_handler>:
	return ret;
}
#endif

static void fota_dl_handler(const struct fota_download_evt *evt)
{
   221d8:	b507      	push	{r0, r1, r2, lr}
   221da:	7803      	ldrb	r3, [r0, #0]
   221dc:	2b04      	cmp	r3, #4
   221de:	d834      	bhi.n	2224a <fota_dl_handler+0x72>
   221e0:	e8df f003 	tbb	[pc, r3]
   221e4:	281b1603 	.word	0x281b1603
   221e8:	31          	.byte	0x31
   221e9:	00          	.byte	0x00
	switch (evt->id) {
	case FOTA_DOWNLOAD_EVT_PROGRESS:
		sprintf(rsp_buf, "#XFOTA: %d%% downloaded\r\n",
   221ea:	6843      	ldr	r3, [r0, #4]
   221ec:	f640 228c 	movw	r2, #2700	; 0xa8c
   221f0:	9300      	str	r3, [sp, #0]
   221f2:	2100      	movs	r1, #0
   221f4:	4b16      	ldr	r3, [pc, #88]	; (22250 <fota_dl_handler+0x78>)
   221f6:	4817      	ldr	r0, [pc, #92]	; (22254 <fota_dl_handler+0x7c>)
   221f8:	f019 fa13 	bl	3b622 <__sprintf_chk>
	case FOTA_DOWNLOAD_EVT_ERASE_DONE:
		LOG_INF("FOTA_DOWNLOAD_EVT_ERASE_DONE");
		break;
	case FOTA_DOWNLOAD_EVT_ERROR:
		sprintf(rsp_buf, "#XFOTA: download error.\r\n");
		rsp_send(rsp_buf, strlen(rsp_buf));
   221fc:	4815      	ldr	r0, [pc, #84]	; (22254 <fota_dl_handler+0x7c>)
   221fe:	f7fa ff37 	bl	1d070 <strlen>
   22202:	4601      	mov	r1, r0
   22204:	4813      	ldr	r0, [pc, #76]	; (22254 <fota_dl_handler+0x7c>)
		break;

	default:
		break;
	}
}
   22206:	b003      	add	sp, #12
   22208:	f85d eb04 	ldr.w	lr, [sp], #4
		rsp_send(rsp_buf, strlen(rsp_buf));
   2220c:	f7fb bfec 	b.w	1e1e8 <rsp_send>
		sprintf(rsp_buf, "#XFOTA: downloaded, reset to apply.\r\n");
   22210:	4911      	ldr	r1, [pc, #68]	; (22258 <fota_dl_handler+0x80>)
		sprintf(rsp_buf, "#XFOTA: download error.\r\n");
   22212:	4810      	ldr	r0, [pc, #64]	; (22254 <fota_dl_handler+0x7c>)
   22214:	f019 fa2c 	bl	3b670 <strcpy>
   22218:	e7f0      	b.n	221fc <fota_dl_handler+0x24>
   2221a:	4910      	ldr	r1, [pc, #64]	; (2225c <fota_dl_handler+0x84>)
   2221c:	4b10      	ldr	r3, [pc, #64]	; (22260 <fota_dl_handler+0x88>)
		LOG_INF("FOTA_DOWNLOAD_EVT_ERASE_PENDING");
   2221e:	4811      	ldr	r0, [pc, #68]	; (22264 <fota_dl_handler+0x8c>)
   22220:	1ac9      	subs	r1, r1, r3
   22222:	08c9      	lsrs	r1, r1, #3
   22224:	0189      	lsls	r1, r1, #6
   22226:	f041 0103 	orr.w	r1, r1, #3
}
   2222a:	b003      	add	sp, #12
   2222c:	f85d eb04 	ldr.w	lr, [sp], #4
		LOG_INF("FOTA_DOWNLOAD_EVT_ERASE_DONE");
   22230:	f016 b946 	b.w	384c0 <log_0>
   22234:	4909      	ldr	r1, [pc, #36]	; (2225c <fota_dl_handler+0x84>)
   22236:	4b0a      	ldr	r3, [pc, #40]	; (22260 <fota_dl_handler+0x88>)
   22238:	480b      	ldr	r0, [pc, #44]	; (22268 <fota_dl_handler+0x90>)
   2223a:	1ac9      	subs	r1, r1, r3
   2223c:	08c9      	lsrs	r1, r1, #3
   2223e:	0189      	lsls	r1, r1, #6
   22240:	f041 0103 	orr.w	r1, r1, #3
   22244:	e7f1      	b.n	2222a <fota_dl_handler+0x52>
		sprintf(rsp_buf, "#XFOTA: download error.\r\n");
   22246:	4909      	ldr	r1, [pc, #36]	; (2226c <fota_dl_handler+0x94>)
   22248:	e7e3      	b.n	22212 <fota_dl_handler+0x3a>
}
   2224a:	b003      	add	sp, #12
   2224c:	f85d fb04 	ldr.w	pc, [sp], #4
   22250:	0003e054 	.word	0x0003e054
   22254:	20028950 	.word	0x20028950
   22258:	0003e06e 	.word	0x0003e06e
   2225c:	0003c334 	.word	0x0003c334
   22260:	0003c2cc 	.word	0x0003c2cc
   22264:	0003e094 	.word	0x0003e094
   22268:	0003e0b4 	.word	0x0003e0b4
   2226c:	0003e0d1 	.word	0x0003e0d1

00022270 <do_fota_start.isra.0>:
static int do_fota_start(int op, const char *file_uri, int sec_tag,
   22270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22274:	4605      	mov	r5, r0
   22276:	b0bc      	sub	sp, #240	; 0xf0
	http_parser_url_init(&parser);
   22278:	a804      	add	r0, sp, #16
static int do_fota_start(int op, const char *file_uri, int sec_tag,
   2227a:	460e      	mov	r6, r1
   2227c:	4690      	mov	r8, r2
	http_parser_url_init(&parser);
   2227e:	f017 f9ee 	bl	3965e <http_parser_url_init>
	ret = http_parser_parse_url(file_uri, strlen(file_uri), 0, &parser);
   22282:	4628      	mov	r0, r5
   22284:	f7fa fef4 	bl	1d070 <strlen>
   22288:	2200      	movs	r2, #0
   2228a:	4601      	mov	r1, r0
   2228c:	ab04      	add	r3, sp, #16
   2228e:	4628      	mov	r0, r5
   22290:	f005 fe7a 	bl	27f88 <http_parser_parse_url>
	if (ret) {
   22294:	4604      	mov	r4, r0
   22296:	b178      	cbz	r0, 222b8 <do_fota_start.isra.0+0x48>
   22298:	493a      	ldr	r1, [pc, #232]	; (22384 <do_fota_start.isra.0+0x114>)
   2229a:	4b3b      	ldr	r3, [pc, #236]	; (22388 <do_fota_start.isra.0+0x118>)
		LOG_ERR("Parse URL error");
   2229c:	483b      	ldr	r0, [pc, #236]	; (2238c <do_fota_start.isra.0+0x11c>)
   2229e:	1ac9      	subs	r1, r1, r3
   222a0:	08c9      	lsrs	r1, r1, #3
   222a2:	0189      	lsls	r1, r1, #6
   222a4:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Parse schema error");
   222a8:	f016 f90a 	bl	384c0 <log_0>
		return -EINVAL;
   222ac:	f06f 0415 	mvn.w	r4, #21
}
   222b0:	4620      	mov	r0, r4
   222b2:	b03c      	add	sp, #240	; 0xf0
   222b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (parser.field_set & (1 << UF_SCHEMA)) {
   222b8:	f8bd 7010 	ldrh.w	r7, [sp, #16]
	memset(schema, 0x00, 8);
   222bc:	e9cd 0002 	strd	r0, r0, [sp, #8]
	if (parser.field_set & (1 << UF_SCHEMA)) {
   222c0:	07f9      	lsls	r1, r7, #31
   222c2:	d519      	bpl.n	222f8 <do_fota_start.isra.0+0x88>
		strncpy(schema,
   222c4:	2308      	movs	r3, #8
   222c6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   222ca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   222ce:	4429      	add	r1, r5
   222d0:	eb0d 0003 	add.w	r0, sp, r3
   222d4:	f019 f9f9 	bl	3b6ca <__strncpy_chk>
	memset(path, 0x00, URI_PATH_MAX);
   222d8:	2280      	movs	r2, #128	; 0x80
   222da:	4621      	mov	r1, r4
   222dc:	a81c      	add	r0, sp, #112	; 0x70
   222de:	f019 f888 	bl	3b3f2 <memset>
	if (parser.field_set & (1 << UF_PATH)) {
   222e2:	073a      	lsls	r2, r7, #28
   222e4:	d411      	bmi.n	2230a <do_fota_start.isra.0+0x9a>
   222e6:	4927      	ldr	r1, [pc, #156]	; (22384 <do_fota_start.isra.0+0x114>)
   222e8:	4b27      	ldr	r3, [pc, #156]	; (22388 <do_fota_start.isra.0+0x118>)
		LOG_ERR("Parse path error");
   222ea:	4829      	ldr	r0, [pc, #164]	; (22390 <do_fota_start.isra.0+0x120>)
   222ec:	1ac9      	subs	r1, r1, r3
   222ee:	08c9      	lsrs	r1, r1, #3
   222f0:	0189      	lsls	r1, r1, #6
   222f2:	f041 0101 	orr.w	r1, r1, #1
   222f6:	e7d7      	b.n	222a8 <do_fota_start.isra.0+0x38>
   222f8:	4922      	ldr	r1, [pc, #136]	; (22384 <do_fota_start.isra.0+0x114>)
   222fa:	4b23      	ldr	r3, [pc, #140]	; (22388 <do_fota_start.isra.0+0x118>)
		LOG_ERR("Parse schema error");
   222fc:	4825      	ldr	r0, [pc, #148]	; (22394 <do_fota_start.isra.0+0x124>)
   222fe:	1ac9      	subs	r1, r1, r3
   22300:	08c9      	lsrs	r1, r1, #3
   22302:	0189      	lsls	r1, r1, #6
   22304:	f041 0101 	orr.w	r1, r1, #1
   22308:	e7ce      	b.n	222a8 <do_fota_start.isra.0+0x38>
		strncpy(path,
   2230a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   2230e:	2380      	movs	r3, #128	; 0x80
   22310:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   22314:	4429      	add	r1, r5
   22316:	a81c      	add	r0, sp, #112	; 0x70
   22318:	f019 f9d7 	bl	3b6ca <__strncpy_chk>
	memset(hostname, 0x00, URI_HOST_MAX);
   2231c:	2240      	movs	r2, #64	; 0x40
   2231e:	4621      	mov	r1, r4
   22320:	a80c      	add	r0, sp, #48	; 0x30
   22322:	f019 f866 	bl	3b3f2 <memset>
	strncpy(hostname, file_uri,
   22326:	4628      	mov	r0, r5
   22328:	f7fa fea2 	bl	1d070 <strlen>
   2232c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   22330:	4629      	mov	r1, r5
   22332:	1a82      	subs	r2, r0, r2
   22334:	2340      	movs	r3, #64	; 0x40
   22336:	a80c      	add	r0, sp, #48	; 0x30
   22338:	f019 f9c7 	bl	3b6ca <__strncpy_chk>
	if (slm_util_cmd_casecmp(schema, SCHEMA_HTTPS)) {
   2233c:	4916      	ldr	r1, [pc, #88]	; (22398 <do_fota_start.isra.0+0x128>)
   2233e:	a802      	add	r0, sp, #8
   22340:	f7fb fdec 	bl	1df1c <slm_util_cmd_casecmp>
   22344:	b950      	cbnz	r0, 2235c <do_fota_start.isra.0+0xec>
	} else if (slm_util_cmd_casecmp(schema, SCHEMA_HTTP)) {
   22346:	4915      	ldr	r1, [pc, #84]	; (2239c <do_fota_start.isra.0+0x12c>)
   22348:	a802      	add	r0, sp, #8
   2234a:	f7fb fde7 	bl	1df1c <slm_util_cmd_casecmp>
   2234e:	2800      	cmp	r0, #0
   22350:	d0ae      	beq.n	222b0 <do_fota_start.isra.0+0x40>
		ret = fota_download_start(hostname, path, -1, apn, 0);
   22352:	4643      	mov	r3, r8
   22354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22358:	9400      	str	r4, [sp, #0]
   2235a:	e00d      	b.n	22378 <do_fota_start.isra.0+0x108>
		if (sec_tag == INVALID_SEC_TAG) {
   2235c:	1c73      	adds	r3, r6, #1
   2235e:	d108      	bne.n	22372 <do_fota_start.isra.0+0x102>
   22360:	4908      	ldr	r1, [pc, #32]	; (22384 <do_fota_start.isra.0+0x114>)
   22362:	4b09      	ldr	r3, [pc, #36]	; (22388 <do_fota_start.isra.0+0x118>)
			LOG_ERR("Missing sec_tag");
   22364:	480e      	ldr	r0, [pc, #56]	; (223a0 <do_fota_start.isra.0+0x130>)
   22366:	1ac9      	subs	r1, r1, r3
   22368:	08c9      	lsrs	r1, r1, #3
   2236a:	0189      	lsls	r1, r1, #6
   2236c:	f041 0101 	orr.w	r1, r1, #1
   22370:	e79a      	b.n	222a8 <do_fota_start.isra.0+0x38>
		ret = fota_download_start(hostname, path, sec_tag, apn, 0);
   22372:	4643      	mov	r3, r8
   22374:	4632      	mov	r2, r6
   22376:	9400      	str	r4, [sp, #0]
		ret = fota_download_start(hostname, path, -1, apn, 0);
   22378:	a91c      	add	r1, sp, #112	; 0x70
   2237a:	a80c      	add	r0, sp, #48	; 0x30
   2237c:	f009 feaa 	bl	2c0d4 <fota_download_start>
   22380:	4604      	mov	r4, r0
   22382:	e795      	b.n	222b0 <do_fota_start.isra.0+0x40>
   22384:	0003c334 	.word	0x0003c334
   22388:	0003c2cc 	.word	0x0003c2cc
   2238c:	0003e0eb 	.word	0x0003e0eb
   22390:	0003e114 	.word	0x0003e114
   22394:	0003e0fb 	.word	0x0003e0fb
   22398:	0003e10e 	.word	0x0003e10e
   2239c:	0003e135 	.word	0x0003e135
   223a0:	0003e125 	.word	0x0003e125

000223a4 <handle_at_fota>:
 *  AT#XFOTA=<op>,<file_uri>[,<sec_tag>[,<apn>]]
 *  AT#XFOTA? TEST command not supported
 *  AT#XFOTA=?
 */
static int handle_at_fota(enum at_cmd_type cmd_type)
{
   223a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t op;
#if FOTA_FUTURE_FEATURE
	static bool paused;
#endif

	switch (cmd_type) {
   223a8:	2801      	cmp	r0, #1
{
   223aa:	4606      	mov	r6, r0
   223ac:	b0ce      	sub	sp, #312	; 0x138
	switch (cmd_type) {
   223ae:	d005      	beq.n	223bc <handle_at_fota+0x18>
   223b0:	2803      	cmp	r0, #3
   223b2:	f000 80a8 	beq.w	22506 <handle_at_fota+0x162>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&at_param_list) <= 1) {
			return -EINVAL;
   223b6:	f06f 0415 	mvn.w	r4, #21
   223ba:	e033      	b.n	22424 <handle_at_fota+0x80>
		if (at_params_valid_count_get(&at_param_list) <= 1) {
   223bc:	485b      	ldr	r0, [pc, #364]	; (2252c <handle_at_fota+0x188>)
   223be:	f018 fa4a 	bl	3a856 <at_params_valid_count_get>
   223c2:	2801      	cmp	r0, #1
   223c4:	d9f7      	bls.n	223b6 <handle_at_fota+0x12>
		}
		err = at_params_short_get(&at_param_list, 1, &op);
   223c6:	4631      	mov	r1, r6
   223c8:	4858      	ldr	r0, [pc, #352]	; (2252c <handle_at_fota+0x188>)
   223ca:	f10d 020e 	add.w	r2, sp, #14
   223ce:	f018 f9fa 	bl	3a7c6 <at_params_short_get>
		if (err < 0) {
   223d2:	1e04      	subs	r4, r0, #0
   223d4:	db26      	blt.n	22424 <handle_at_fota+0x80>
			return err;
		}
		if (op == AT_FOTA_ERASE) {
   223d6:	f8bd 800e 	ldrh.w	r8, [sp, #14]
   223da:	f1b8 0f00 	cmp.w	r8, #0
   223de:	d155      	bne.n	2248c <handle_at_fota+0xe8>
	nrf_socklen_t len = sizeof(offset);
   223e0:	2304      	movs	r3, #4
   223e2:	4a53      	ldr	r2, [pc, #332]	; (22530 <handle_at_fota+0x18c>)
   223e4:	4d53      	ldr	r5, [pc, #332]	; (22534 <handle_at_fota+0x190>)
	LOG_INF("Erasing scratch");
   223e6:	4854      	ldr	r0, [pc, #336]	; (22538 <handle_at_fota+0x194>)
   223e8:	1aad      	subs	r5, r5, r2
   223ea:	08ed      	lsrs	r5, r5, #3
   223ec:	01ad      	lsls	r5, r5, #6
   223ee:	f045 0103 	orr.w	r1, r5, #3
	nrf_socklen_t len = sizeof(offset);
   223f2:	930e      	str	r3, [sp, #56]	; 0x38
	LOG_INF("Erasing scratch");
   223f4:	f016 f864 	bl	384c0 <log_0>
	fd = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_STREAM, NRF_PROTO_DFU);
   223f8:	4631      	mov	r1, r6
   223fa:	4630      	mov	r0, r6
   223fc:	f240 2203 	movw	r2, #515	; 0x203
   22400:	f010 ff4a 	bl	33298 <nrf_socket>
	if (fd < 0) {
   22404:	1e06      	subs	r6, r0, #0
	nrf_socklen_t len = sizeof(offset);
   22406:	af0e      	add	r7, sp, #56	; 0x38
	if (fd < 0) {
   22408:	da10      	bge.n	2242c <handle_at_fota+0x88>
		LOG_ERR("nrf_socket error: %d", errno);
   2240a:	f016 ff5c 	bl	392c6 <__errno>
   2240e:	f045 0501 	orr.w	r5, r5, #1
   22412:	6801      	ldr	r1, [r0, #0]
   22414:	462a      	mov	r2, r5
   22416:	4849      	ldr	r0, [pc, #292]	; (2253c <handle_at_fota+0x198>)
   22418:	f016 f861 	bl	384de <log_1>
		return -errno;
   2241c:	f016 ff53 	bl	392c6 <__errno>
   22420:	6804      	ldr	r4, [r0, #0]
   22422:	4264      	negs	r4, r4
	default:
		break;
	}

	return err;
}
   22424:	4620      	mov	r0, r4
   22426:	b04e      	add	sp, #312	; 0x138
   22428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = nrf_setsockopt(fd, NRF_SOL_DFU, NRF_SO_DFU_BACKUP_DELETE,
   2242c:	4643      	mov	r3, r8
   2242e:	2206      	movs	r2, #6
   22430:	f240 2103 	movw	r1, #515	; 0x203
   22434:	f8cd 8000 	str.w	r8, [sp]
   22438:	f011 f804 	bl	33444 <nrf_setsockopt>
	if (err) {
   2243c:	4604      	mov	r4, r0
   2243e:	b160      	cbz	r0, 2245a <handle_at_fota+0xb6>
		LOG_ERR("nrf_setsockopt error: %d", errno);
   22440:	f016 ff41 	bl	392c6 <__errno>
   22444:	f045 0501 	orr.w	r5, r5, #1
   22448:	6801      	ldr	r1, [r0, #0]
   2244a:	462a      	mov	r2, r5
   2244c:	483c      	ldr	r0, [pc, #240]	; (22540 <handle_at_fota+0x19c>)
   2244e:	f016 f846 	bl	384de <log_1>
		nrf_close(fd);
   22452:	4630      	mov	r0, r6
   22454:	f010 ff32 	bl	332bc <nrf_close>
   22458:	e7e0      	b.n	2241c <handle_at_fota+0x78>
		err = nrf_getsockopt(fd, NRF_SOL_DFU, NRF_SO_DFU_OFFSET,
   2245a:	2207      	movs	r2, #7
   2245c:	f240 2103 	movw	r1, #515	; 0x203
   22460:	4630      	mov	r0, r6
   22462:	9700      	str	r7, [sp, #0]
   22464:	ab06      	add	r3, sp, #24
   22466:	f011 f809 	bl	3347c <nrf_getsockopt>
		if (err < 0) {
   2246a:	2800      	cmp	r0, #0
   2246c:	da05      	bge.n	2247a <handle_at_fota+0xd6>
   2246e:	2100      	movs	r1, #0
   22470:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   22474:	f013 ff1c 	bl	362b0 <z_impl_k_sleep>
		err = nrf_getsockopt(fd, NRF_SOL_DFU, NRF_SO_DFU_OFFSET,
   22478:	e7ef      	b.n	2245a <handle_at_fota+0xb6>
			LOG_INF("Erase completed");
   2247a:	4832      	ldr	r0, [pc, #200]	; (22544 <handle_at_fota+0x1a0>)
   2247c:	f045 0103 	orr.w	r1, r5, #3
   22480:	f016 f81e 	bl	384c0 <log_0>
	nrf_close(fd);
   22484:	4630      	mov	r0, r6
   22486:	f010 ff19 	bl	332bc <nrf_close>
	return 0;
   2248a:	e7cb      	b.n	22424 <handle_at_fota+0x80>
		} else if (op == AT_FOTA_START) {
   2248c:	f1b8 0f01 	cmp.w	r8, #1
   22490:	d1c8      	bne.n	22424 <handle_at_fota+0x80>
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   22492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (at_params_valid_count_get(&at_param_list) <= 2) {
   22496:	4825      	ldr	r0, [pc, #148]	; (2252c <handle_at_fota+0x188>)
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   22498:	9305      	str	r3, [sp, #20]
			if (at_params_valid_count_get(&at_param_list) <= 2) {
   2249a:	f018 f9dc 	bl	3a856 <at_params_valid_count_get>
   2249e:	2802      	cmp	r0, #2
   224a0:	d989      	bls.n	223b6 <handle_at_fota+0x12>
			size = FILE_URI_MAX;
   224a2:	f44f 7380 	mov.w	r3, #256	; 0x100
			err = at_params_string_get(&at_param_list, 2, uri,
   224a6:	ad0e      	add	r5, sp, #56	; 0x38
			size = FILE_URI_MAX;
   224a8:	9304      	str	r3, [sp, #16]
			err = at_params_string_get(&at_param_list, 2, uri,
   224aa:	462a      	mov	r2, r5
   224ac:	2102      	movs	r1, #2
   224ae:	481f      	ldr	r0, [pc, #124]	; (2252c <handle_at_fota+0x188>)
   224b0:	ab04      	add	r3, sp, #16
   224b2:	f018 f9ad 	bl	3a810 <at_params_string_get>
			if (err) {
   224b6:	4604      	mov	r4, r0
   224b8:	2800      	cmp	r0, #0
   224ba:	d1b3      	bne.n	22424 <handle_at_fota+0x80>
			uri[size] = '\0';
   224bc:	9b04      	ldr	r3, [sp, #16]
   224be:	54e8      	strb	r0, [r5, r3]
			if (at_params_valid_count_get(&at_param_list) > 3) {
   224c0:	481a      	ldr	r0, [pc, #104]	; (2252c <handle_at_fota+0x188>)
   224c2:	f018 f9c8 	bl	3a856 <at_params_valid_count_get>
   224c6:	2803      	cmp	r0, #3
   224c8:	d904      	bls.n	224d4 <handle_at_fota+0x130>
				at_params_int_get(&at_param_list, 3, &sec_tag);
   224ca:	2103      	movs	r1, #3
   224cc:	4817      	ldr	r0, [pc, #92]	; (2252c <handle_at_fota+0x188>)
   224ce:	aa05      	add	r2, sp, #20
   224d0:	f018 f98b 	bl	3a7ea <at_params_int_get>
			if (at_params_valid_count_get(&at_param_list) > 4) {
   224d4:	4815      	ldr	r0, [pc, #84]	; (2252c <handle_at_fota+0x188>)
   224d6:	f018 f9be 	bl	3a856 <at_params_valid_count_get>
   224da:	2804      	cmp	r0, #4
   224dc:	d911      	bls.n	22502 <handle_at_fota+0x15e>
				size = APN_MAX;
   224de:	2320      	movs	r3, #32
				at_params_string_get(&at_param_list, 4, apn,
   224e0:	2104      	movs	r1, #4
				size = APN_MAX;
   224e2:	9304      	str	r3, [sp, #16]
				at_params_string_get(&at_param_list, 4, apn,
   224e4:	aa06      	add	r2, sp, #24
   224e6:	ab04      	add	r3, sp, #16
   224e8:	4810      	ldr	r0, [pc, #64]	; (2252c <handle_at_fota+0x188>)
   224ea:	f018 f991 	bl	3a810 <at_params_string_get>
				apn[size] = '\0';
   224ee:	2100      	movs	r1, #0
   224f0:	9b04      	ldr	r3, [sp, #16]
   224f2:	aa06      	add	r2, sp, #24
   224f4:	54d1      	strb	r1, [r2, r3]
				err = do_fota_start(op, uri, sec_tag, NULL);
   224f6:	4628      	mov	r0, r5
   224f8:	9905      	ldr	r1, [sp, #20]
   224fa:	f7ff feb9 	bl	22270 <do_fota_start.isra.0>
   224fe:	4604      	mov	r4, r0
   22500:	e790      	b.n	22424 <handle_at_fota+0x80>
   22502:	2200      	movs	r2, #0
   22504:	e7f7      	b.n	224f6 <handle_at_fota+0x152>
		sprintf(rsp_buf,
   22506:	2400      	movs	r4, #0
   22508:	2301      	movs	r3, #1
   2250a:	4621      	mov	r1, r4
   2250c:	f640 228c 	movw	r2, #2700	; 0xa8c
   22510:	e9cd 4300 	strd	r4, r3, [sp]
   22514:	480c      	ldr	r0, [pc, #48]	; (22548 <handle_at_fota+0x1a4>)
   22516:	4b0d      	ldr	r3, [pc, #52]	; (2254c <handle_at_fota+0x1a8>)
   22518:	f019 f883 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   2251c:	480a      	ldr	r0, [pc, #40]	; (22548 <handle_at_fota+0x1a4>)
   2251e:	f7fa fda7 	bl	1d070 <strlen>
   22522:	4601      	mov	r1, r0
   22524:	4808      	ldr	r0, [pc, #32]	; (22548 <handle_at_fota+0x1a4>)
   22526:	f7fb fe5f 	bl	1e1e8 <rsp_send>
		break;
   2252a:	e77b      	b.n	22424 <handle_at_fota+0x80>
   2252c:	20023430 	.word	0x20023430
   22530:	0003c2cc 	.word	0x0003c2cc
   22534:	0003c334 	.word	0x0003c334
   22538:	0003e13a 	.word	0x0003e13a
   2253c:	0003e14a 	.word	0x0003e14a
   22540:	0003e15f 	.word	0x0003e15f
   22544:	0003e178 	.word	0x0003e178
   22548:	20028950 	.word	0x20028950
   2254c:	0003e188 	.word	0x0003e188

00022550 <slm_at_fota_parse>:

/**@brief API to handle FOTA AT commands
 */
int slm_at_fota_parse(const char *at_cmd)
{
   22550:	b510      	push	{r4, lr}
	int ret = -ENOENT;

	if (slm_util_cmd_casecmp(at_cmd, AT_FOTA)) {
   22552:	4911      	ldr	r1, [pc, #68]	; (22598 <slm_at_fota_parse+0x48>)
{
   22554:	4604      	mov	r4, r0
	if (slm_util_cmd_casecmp(at_cmd, AT_FOTA)) {
   22556:	f7fb fce1 	bl	1df1c <slm_util_cmd_casecmp>
   2255a:	b1d0      	cbz	r0, 22592 <slm_at_fota_parse+0x42>
		ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
   2255c:	2100      	movs	r1, #0
   2255e:	4620      	mov	r0, r4
   22560:	4a0e      	ldr	r2, [pc, #56]	; (2259c <slm_at_fota_parse+0x4c>)
   22562:	f018 f830 	bl	3a5c6 <at_parser_params_from_str>
		if (ret < 0) {
   22566:	1e01      	subs	r1, r0, #0
   22568:	da0c      	bge.n	22584 <slm_at_fota_parse+0x34>
   2256a:	4b0d      	ldr	r3, [pc, #52]	; (225a0 <slm_at_fota_parse+0x50>)
   2256c:	4a0d      	ldr	r2, [pc, #52]	; (225a4 <slm_at_fota_parse+0x54>)
			LOG_ERR("Failed to parse AT command %d", ret);
   2256e:	480e      	ldr	r0, [pc, #56]	; (225a8 <slm_at_fota_parse+0x58>)
   22570:	1ad2      	subs	r2, r2, r3
   22572:	08d2      	lsrs	r2, r2, #3
   22574:	0192      	lsls	r2, r2, #6
   22576:	f042 0201 	orr.w	r2, r2, #1
   2257a:	f015 ffb0 	bl	384de <log_1>
			return -EINVAL;
   2257e:	f06f 0015 	mvn.w	r0, #21
		}
		ret = handle_at_fota(at_parser_cmd_type_get(at_cmd));
	}

	return ret;
}
   22582:	bd10      	pop	{r4, pc}
		ret = handle_at_fota(at_parser_cmd_type_get(at_cmd));
   22584:	4620      	mov	r0, r4
   22586:	f018 f821 	bl	3a5cc <at_parser_cmd_type_get>
}
   2258a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = handle_at_fota(at_parser_cmd_type_get(at_cmd));
   2258e:	f7ff bf09 	b.w	223a4 <handle_at_fota>
	int ret = -ENOENT;
   22592:	f06f 0001 	mvn.w	r0, #1
   22596:	e7f4      	b.n	22582 <slm_at_fota_parse+0x32>
   22598:	0003e1b6 	.word	0x0003e1b6
   2259c:	20023430 	.word	0x20023430
   225a0:	0003c2cc 	.word	0x0003c2cc
   225a4:	0003c334 	.word	0x0003c334
   225a8:	0003d35e 	.word	0x0003d35e

000225ac <slm_at_fota_clac>:

/**@brief API to list FOTA AT commands
 */
void slm_at_fota_clac(void)
{
   225ac:	b513      	push	{r0, r1, r4, lr}
	sprintf(rsp_buf, "%s\r\n", AT_FOTA);
   225ae:	4b0a      	ldr	r3, [pc, #40]	; (225d8 <slm_at_fota_clac+0x2c>)
   225b0:	4c0a      	ldr	r4, [pc, #40]	; (225dc <slm_at_fota_clac+0x30>)
   225b2:	f640 228c 	movw	r2, #2700	; 0xa8c
   225b6:	2100      	movs	r1, #0
   225b8:	9300      	str	r3, [sp, #0]
   225ba:	4620      	mov	r0, r4
   225bc:	4b08      	ldr	r3, [pc, #32]	; (225e0 <slm_at_fota_clac+0x34>)
   225be:	f019 f830 	bl	3b622 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   225c2:	4620      	mov	r0, r4
   225c4:	f7fa fd54 	bl	1d070 <strlen>
   225c8:	4601      	mov	r1, r0
   225ca:	4620      	mov	r0, r4
}
   225cc:	b002      	add	sp, #8
   225ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rsp_send(rsp_buf, strlen(rsp_buf));
   225d2:	f7fb be09 	b.w	1e1e8 <rsp_send>
   225d6:	bf00      	nop
   225d8:	0003e1b6 	.word	0x0003e1b6
   225dc:	20028950 	.word	0x20028950
   225e0:	0003d557 	.word	0x0003d557

000225e4 <slm_at_fota_init>:

/**@brief API to initialize FOTA AT commands handler
 */
int slm_at_fota_init(void)
{
	return fota_download_init(fota_dl_handler);
   225e4:	4801      	ldr	r0, [pc, #4]	; (225ec <slm_at_fota_init+0x8>)
   225e6:	f009 bda1 	b.w	2c12c <fota_download_init>
   225ea:	bf00      	nop
   225ec:	000221d9 	.word	0x000221d9

000225f0 <handle_AT_HTTPC_REQUEST>:
 *  AT#XHTTPCREQ=<method>,<resource>,<header>[,<payload_length>]
 *  AT#XHTTPCREQ? READ command not supported
 *  AT#XHTTPCREQ=?
 */
static int handle_AT_HTTPC_REQUEST(enum at_cmd_type cmd_type)
{
   225f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int err = -EINVAL;
	int param_count;
	size_t method_sz = HTTPC_METHOD_LEN;
	size_t resource_sz = HTTPC_RES_LEN;
   225f4:	f44f 7380 	mov.w	r3, #256	; 0x100
   225f8:	2214      	movs	r2, #20
   225fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
	size_t headers_sz = HTTPC_HEADER_LEN;
   225fe:	f44f 7300 	mov.w	r3, #512	; 0x200
	size_t offset;

	if (httpc.fd == INVALID_SOCKET) {
   22602:	4f44      	ldr	r7, [pc, #272]	; (22714 <handle_AT_HTTPC_REQUEST+0x124>)
	size_t headers_sz = HTTPC_HEADER_LEN;
   22604:	9303      	str	r3, [sp, #12]
	if (httpc.fd == INVALID_SOCKET) {
   22606:	683b      	ldr	r3, [r7, #0]
{
   22608:	4604      	mov	r4, r0
	if (httpc.fd == INVALID_SOCKET) {
   2260a:	3301      	adds	r3, #1
   2260c:	d10f      	bne.n	2262e <handle_AT_HTTPC_REQUEST+0x3e>
   2260e:	4942      	ldr	r1, [pc, #264]	; (22718 <handle_AT_HTTPC_REQUEST+0x128>)
   22610:	4b42      	ldr	r3, [pc, #264]	; (2271c <handle_AT_HTTPC_REQUEST+0x12c>)
		LOG_ERR("Remote host is not connected.");
   22612:	4843      	ldr	r0, [pc, #268]	; (22720 <handle_AT_HTTPC_REQUEST+0x130>)
   22614:	1ac9      	subs	r1, r1, r3
   22616:	08c9      	lsrs	r1, r1, #3
   22618:	0189      	lsls	r1, r1, #6
   2261a:	f041 0101 	orr.w	r1, r1, #1
		return err;
	}

	if (httpc.pl_len > 0) {
		LOG_ERR("Another request is not finished.");
   2261e:	f015 ff4f 	bl	384c0 <log_0>
		return err;
   22622:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
   22626:	4620      	mov	r0, r4
   22628:	b004      	add	sp, #16
   2262a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (httpc.pl_len > 0) {
   2262e:	f8d7 9064 	ldr.w	r9, [r7, #100]	; 0x64
   22632:	f1b9 0f00 	cmp.w	r9, #0
   22636:	d008      	beq.n	2264a <handle_AT_HTTPC_REQUEST+0x5a>
   22638:	4937      	ldr	r1, [pc, #220]	; (22718 <handle_AT_HTTPC_REQUEST+0x128>)
   2263a:	4b38      	ldr	r3, [pc, #224]	; (2271c <handle_AT_HTTPC_REQUEST+0x12c>)
		LOG_ERR("Another request is not finished.");
   2263c:	4839      	ldr	r0, [pc, #228]	; (22724 <handle_AT_HTTPC_REQUEST+0x134>)
   2263e:	1ac9      	subs	r1, r1, r3
   22640:	08c9      	lsrs	r1, r1, #3
   22642:	0189      	lsls	r1, r1, #6
   22644:	f041 0101 	orr.w	r1, r1, #1
   22648:	e7e9      	b.n	2261e <handle_AT_HTTPC_REQUEST+0x2e>
	switch (cmd_type) {
   2264a:	2801      	cmp	r0, #1
   2264c:	d1e9      	bne.n	22622 <handle_AT_HTTPC_REQUEST+0x32>
		param_count = at_params_valid_count_get(&at_param_list);
   2264e:	4836      	ldr	r0, [pc, #216]	; (22728 <handle_AT_HTTPC_REQUEST+0x138>)
   22650:	f018 f901 	bl	3a856 <at_params_valid_count_get>
		if (param_count < 3) {
   22654:	2802      	cmp	r0, #2
		param_count = at_params_valid_count_get(&at_param_list);
   22656:	4680      	mov	r8, r0
		if (param_count < 3) {
   22658:	dde3      	ble.n	22622 <handle_AT_HTTPC_REQUEST+0x32>
		err = at_params_string_get(&at_param_list, 1,
   2265a:	4d34      	ldr	r5, [pc, #208]	; (2272c <handle_AT_HTTPC_REQUEST+0x13c>)
   2265c:	4621      	mov	r1, r4
   2265e:	462a      	mov	r2, r5
   22660:	4831      	ldr	r0, [pc, #196]	; (22728 <handle_AT_HTTPC_REQUEST+0x138>)
   22662:	ab01      	add	r3, sp, #4
   22664:	f018 f8d4 	bl	3a810 <at_params_string_get>
		if (err < 0) {
   22668:	1e04      	subs	r4, r0, #0
   2266a:	da0b      	bge.n	22684 <handle_AT_HTTPC_REQUEST+0x94>
			LOG_ERR("Fail to get method string: %d", err);
   2266c:	4621      	mov	r1, r4
   2266e:	4a2a      	ldr	r2, [pc, #168]	; (22718 <handle_AT_HTTPC_REQUEST+0x128>)
   22670:	4b2a      	ldr	r3, [pc, #168]	; (2271c <handle_AT_HTTPC_REQUEST+0x12c>)
   22672:	482f      	ldr	r0, [pc, #188]	; (22730 <handle_AT_HTTPC_REQUEST+0x140>)
   22674:	1ad2      	subs	r2, r2, r3
   22676:	08d2      	lsrs	r2, r2, #3
   22678:	0192      	lsls	r2, r2, #6
   2267a:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Fail to get option string: %d", err);
   2267e:	f015 ff2e 	bl	384de <log_1>
			return err;
   22682:	e7d0      	b.n	22626 <handle_AT_HTTPC_REQUEST+0x36>
		data_buf[method_sz] = '\0';
   22684:	9e01      	ldr	r6, [sp, #4]
		err = at_params_string_get(&at_param_list, 2,
   22686:	2102      	movs	r1, #2
		data_buf[method_sz] = '\0';
   22688:	f805 9006 	strb.w	r9, [r5, r6]
		offset = method_sz + 1;
   2268c:	3601      	adds	r6, #1
		err = at_params_string_get(&at_param_list, 2,
   2268e:	eb05 0a06 	add.w	sl, r5, r6
   22692:	4652      	mov	r2, sl
   22694:	4824      	ldr	r0, [pc, #144]	; (22728 <handle_AT_HTTPC_REQUEST+0x138>)
   22696:	ab02      	add	r3, sp, #8
		httpc.method_str = data_buf;
   22698:	657d      	str	r5, [r7, #84]	; 0x54
		err = at_params_string_get(&at_param_list, 2,
   2269a:	f018 f8b9 	bl	3a810 <at_params_string_get>
		if (err < 0) {
   2269e:	1e04      	subs	r4, r0, #0
   226a0:	da09      	bge.n	226b6 <handle_AT_HTTPC_REQUEST+0xc6>
   226a2:	4a1d      	ldr	r2, [pc, #116]	; (22718 <handle_AT_HTTPC_REQUEST+0x128>)
   226a4:	4b1d      	ldr	r3, [pc, #116]	; (2271c <handle_AT_HTTPC_REQUEST+0x12c>)
			LOG_ERR("Fail to get resource string: %d", err);
   226a6:	4621      	mov	r1, r4
   226a8:	1ad2      	subs	r2, r2, r3
   226aa:	08d2      	lsrs	r2, r2, #3
   226ac:	0192      	lsls	r2, r2, #6
   226ae:	4821      	ldr	r0, [pc, #132]	; (22734 <handle_AT_HTTPC_REQUEST+0x144>)
   226b0:	f042 0201 	orr.w	r2, r2, #1
   226b4:	e7e3      	b.n	2267e <handle_AT_HTTPC_REQUEST+0x8e>
		data_buf[offset + resource_sz] = '\0';
   226b6:	9a02      	ldr	r2, [sp, #8]
		err = at_params_string_get(&at_param_list, 3,
   226b8:	2103      	movs	r1, #3
		data_buf[offset + resource_sz] = '\0';
   226ba:	4416      	add	r6, r2
   226bc:	f805 9006 	strb.w	r9, [r5, r6]
		offset = offset + resource_sz + 1;
   226c0:	3601      	adds	r6, #1
		err = at_params_string_get(&at_param_list, 3,
   226c2:	4435      	add	r5, r6
   226c4:	462a      	mov	r2, r5
   226c6:	4818      	ldr	r0, [pc, #96]	; (22728 <handle_AT_HTTPC_REQUEST+0x138>)
   226c8:	ab03      	add	r3, sp, #12
		httpc.resource = data_buf + offset;
   226ca:	f8c7 a058 	str.w	sl, [r7, #88]	; 0x58
		err = at_params_string_get(&at_param_list, 3,
   226ce:	f018 f89f 	bl	3a810 <at_params_string_get>
		if (err < 0) {
   226d2:	1e04      	subs	r4, r0, #0
   226d4:	da09      	bge.n	226ea <handle_AT_HTTPC_REQUEST+0xfa>
   226d6:	4a10      	ldr	r2, [pc, #64]	; (22718 <handle_AT_HTTPC_REQUEST+0x128>)
   226d8:	4b10      	ldr	r3, [pc, #64]	; (2271c <handle_AT_HTTPC_REQUEST+0x12c>)
			LOG_ERR("Fail to get option string: %d", err);
   226da:	4621      	mov	r1, r4
   226dc:	1ad2      	subs	r2, r2, r3
   226de:	08d2      	lsrs	r2, r2, #3
   226e0:	0192      	lsls	r2, r2, #6
   226e2:	4815      	ldr	r0, [pc, #84]	; (22738 <handle_AT_HTTPC_REQUEST+0x148>)
   226e4:	f042 0201 	orr.w	r2, r2, #1
   226e8:	e7c9      	b.n	2267e <handle_AT_HTTPC_REQUEST+0x8e>
		data_buf[offset + headers_sz] = '\0';
   226ea:	9b03      	ldr	r3, [sp, #12]
		if (param_count >= 5) {
   226ec:	f1b8 0f04 	cmp.w	r8, #4
		data_buf[offset + headers_sz] = '\0';
   226f0:	f805 9003 	strb.w	r9, [r5, r3]
		httpc.headers = data_buf + offset;
   226f4:	65fd      	str	r5, [r7, #92]	; 0x5c
		if (param_count >= 5) {
   226f6:	dd08      	ble.n	2270a <handle_AT_HTTPC_REQUEST+0x11a>
			err = at_params_int_get(&at_param_list, 4,
   226f8:	2104      	movs	r1, #4
   226fa:	480b      	ldr	r0, [pc, #44]	; (22728 <handle_AT_HTTPC_REQUEST+0x138>)
   226fc:	f107 0264 	add.w	r2, r7, #100	; 0x64
   22700:	f018 f873 	bl	3a7ea <at_params_int_get>
			if (err != 0) {
   22704:	4604      	mov	r4, r0
   22706:	2800      	cmp	r0, #0
   22708:	d18d      	bne.n	22626 <handle_AT_HTTPC_REQUEST+0x36>
	z_impl_k_sem_give(sem);
   2270a:	480c      	ldr	r0, [pc, #48]	; (2273c <handle_AT_HTTPC_REQUEST+0x14c>)
   2270c:	f013 fdf6 	bl	362fc <z_impl_k_sem_give>
}
   22710:	e789      	b.n	22626 <handle_AT_HTTPC_REQUEST+0x36>
   22712:	bf00      	nop
   22714:	200234e8 	.word	0x200234e8
   22718:	0003c344 	.word	0x0003c344
   2271c:	0003c2cc 	.word	0x0003c2cc
   22720:	0003e1c4 	.word	0x0003e1c4
   22724:	0003e1e2 	.word	0x0003e1e2
   22728:	20023430 	.word	0x20023430
   2272c:	2002b93e 	.word	0x2002b93e
   22730:	0003e203 	.word	0x0003e203
   22734:	0003e221 	.word	0x0003e221
   22738:	0003e241 	.word	0x0003e241
   2273c:	20020894 	.word	0x20020894

00022740 <do_http_request>:
{
   22740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (httpc.fd == INVALID_SOCKET) {
   22744:	4d3b      	ldr	r5, [pc, #236]	; (22834 <do_http_request+0xf4>)
{
   22746:	b0c6      	sub	sp, #280	; 0x118
	if (httpc.fd == INVALID_SOCKET) {
   22748:	682b      	ldr	r3, [r5, #0]
   2274a:	3301      	adds	r3, #1
   2274c:	d10c      	bne.n	22768 <do_http_request+0x28>
   2274e:	493a      	ldr	r1, [pc, #232]	; (22838 <do_http_request+0xf8>)
   22750:	4b3a      	ldr	r3, [pc, #232]	; (2283c <do_http_request+0xfc>)
		LOG_ERR("Remote host is not connected.");
   22752:	483b      	ldr	r0, [pc, #236]	; (22840 <do_http_request+0x100>)
   22754:	1ac9      	subs	r1, r1, r3
   22756:	08c9      	lsrs	r1, r1, #3
   22758:	0189      	lsls	r1, r1, #6
   2275a:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Request method is not allowed.");
   2275e:	f015 feaf 	bl	384c0 <log_0>
		return -EINVAL;
   22762:	f06f 0415 	mvn.w	r4, #21
   22766:	e060      	b.n	2282a <do_http_request+0xea>
	for (int i = HTTP_DELETE; i <= HTTP_UNLINK; i++) {
   22768:	2600      	movs	r6, #0
	method = http_method_str_enum(httpc.method_str);
   2276a:	f8d5 8054 	ldr.w	r8, [r5, #84]	; 0x54
	for (int i = HTTP_DELETE; i <= HTTP_UNLINK; i++) {
   2276e:	4f35      	ldr	r7, [pc, #212]	; (22844 <do_http_request+0x104>)
		if (!strncmp(method_str, method_strings[i],
   22770:	2214      	movs	r2, #20
   22772:	4640      	mov	r0, r8
   22774:	f857 1b04 	ldr.w	r1, [r7], #4
   22778:	f018 ff82 	bl	3b680 <strncmp>
   2277c:	4604      	mov	r4, r0
   2277e:	b310      	cbz	r0, 227c6 <do_http_request+0x86>
	for (int i = HTTP_DELETE; i <= HTTP_UNLINK; i++) {
   22780:	3601      	adds	r6, #1
   22782:	2e21      	cmp	r6, #33	; 0x21
   22784:	d1f4      	bne.n	22770 <do_http_request+0x30>
   22786:	492c      	ldr	r1, [pc, #176]	; (22838 <do_http_request+0xf8>)
   22788:	4b2c      	ldr	r3, [pc, #176]	; (2283c <do_http_request+0xfc>)
		LOG_ERR("Request method is not allowed.");
   2278a:	482f      	ldr	r0, [pc, #188]	; (22848 <do_http_request+0x108>)
   2278c:	1ac9      	subs	r1, r1, r3
   2278e:	08c9      	lsrs	r1, r1, #3
   22790:	0189      	lsls	r1, r1, #6
   22792:	f041 0101 	orr.w	r1, r1, #1
   22796:	e7e2      	b.n	2275e <do_http_request+0x1e>
	} else if (httpc.rsp_completed == false) {
   22798:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   2279c:	2b00      	cmp	r3, #0
   2279e:	d144      	bne.n	2282a <do_http_request+0xea>
		sprintf(rsp_buf, "#XHTTPCRSP:0,%d\r\n", err);
   227a0:	f06f 0567 	mvn.w	r5, #103	; 0x67
   227a4:	4621      	mov	r1, r4
   227a6:	f640 228c 	movw	r2, #2700	; 0xa8c
   227aa:	4b28      	ldr	r3, [pc, #160]	; (2284c <do_http_request+0x10c>)
   227ac:	4828      	ldr	r0, [pc, #160]	; (22850 <do_http_request+0x110>)
   227ae:	9500      	str	r5, [sp, #0]
   227b0:	f018 ff37 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   227b4:	4826      	ldr	r0, [pc, #152]	; (22850 <do_http_request+0x110>)
   227b6:	f7fa fc5b 	bl	1d070 <strlen>
   227ba:	4601      	mov	r1, r0
   227bc:	4824      	ldr	r0, [pc, #144]	; (22850 <do_http_request+0x110>)
   227be:	f7fb fd13 	bl	1e1e8 <rsp_send>
		err = -ECONNRESET;
   227c2:	462c      	mov	r4, r5
   227c4:	e031      	b.n	2282a <do_http_request+0xea>
	memset(&req, 0, sizeof(req));
   227c6:	4601      	mov	r1, r0
   227c8:	f44f 7288 	mov.w	r2, #272	; 0x110
   227cc:	a802      	add	r0, sp, #8
   227ce:	f018 fe10 	bl	3b3f2 <memset>
	req.url = httpc.resource;
   227d2:	6dab      	ldr	r3, [r5, #88]	; 0x58
	err = http_client_req(httpc.fd, &req, timeout, "");
   227d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	req.url = httpc.resource;
   227d8:	933b      	str	r3, [sp, #236]	; 0xec
	req.host = httpc.host;
   227da:	4b1e      	ldr	r3, [pc, #120]	; (22854 <do_http_request+0x114>)
	err = http_client_req(httpc.fd, &req, timeout, "");
   227dc:	6828      	ldr	r0, [r5, #0]
	req.host = httpc.host;
   227de:	933f      	str	r3, [sp, #252]	; 0xfc
	req.protocol = "HTTP/1.1";
   227e0:	4b1d      	ldr	r3, [pc, #116]	; (22858 <do_http_request+0x118>)
	err = http_client_req(httpc.fd, &req, timeout, "");
   227e2:	a902      	add	r1, sp, #8
	req.protocol = "HTTP/1.1";
   227e4:	933c      	str	r3, [sp, #240]	; 0xf0
	req.response = response_cb;
   227e6:	4b1d      	ldr	r3, [pc, #116]	; (2285c <do_http_request+0x11c>)
	req.method = (enum http_method)method;
   227e8:	f88d 60d8 	strb.w	r6, [sp, #216]	; 0xd8
	req.response = response_cb;
   227ec:	9337      	str	r3, [sp, #220]	; 0xdc
	req.recv_buf = data_buf;
   227ee:	4b1c      	ldr	r3, [pc, #112]	; (22860 <do_http_request+0x120>)
   227f0:	9339      	str	r3, [sp, #228]	; 0xe4
	req.recv_buf_len = HTTPC_FRAG_SIZE;
   227f2:	f44f 7310 	mov.w	r3, #576	; 0x240
   227f6:	933a      	str	r3, [sp, #232]	; 0xe8
	req.payload_cb =  payload_cb;
   227f8:	4b1a      	ldr	r3, [pc, #104]	; (22864 <do_http_request+0x124>)
   227fa:	9341      	str	r3, [sp, #260]	; 0x104
	req.optional_headers_cb = headers_cb;
   227fc:	4b1a      	ldr	r3, [pc, #104]	; (22868 <do_http_request+0x128>)
   227fe:	9344      	str	r3, [sp, #272]	; 0x110
	err = http_client_req(httpc.fd, &req, timeout, "");
   22800:	4b1a      	ldr	r3, [pc, #104]	; (2286c <do_http_request+0x12c>)
   22802:	f005 fd39 	bl	28278 <http_client_req>
	if (err < 0) {
   22806:	1e06      	subs	r6, r0, #0
   22808:	dac6      	bge.n	22798 <do_http_request+0x58>
		sprintf(rsp_buf, "#XHTTPCREQ:%d\r\n", err);
   2280a:	4621      	mov	r1, r4
   2280c:	f640 228c 	movw	r2, #2700	; 0xa8c
   22810:	4b17      	ldr	r3, [pc, #92]	; (22870 <do_http_request+0x130>)
   22812:	480f      	ldr	r0, [pc, #60]	; (22850 <do_http_request+0x110>)
   22814:	9600      	str	r6, [sp, #0]
   22816:	f018 ff04 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   2281a:	480d      	ldr	r0, [pc, #52]	; (22850 <do_http_request+0x110>)
   2281c:	f7fa fc28 	bl	1d070 <strlen>
   22820:	4601      	mov	r1, r0
   22822:	480b      	ldr	r0, [pc, #44]	; (22850 <do_http_request+0x110>)
   22824:	f7fb fce0 	bl	1e1e8 <rsp_send>
   22828:	4634      	mov	r4, r6
}
   2282a:	4620      	mov	r0, r4
   2282c:	b046      	add	sp, #280	; 0x118
   2282e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22832:	bf00      	nop
   22834:	200234e8 	.word	0x200234e8
   22838:	0003c344 	.word	0x0003c344
   2283c:	0003c2cc 	.word	0x0003c2cc
   22840:	0003e1c4 	.word	0x0003e1c4
   22844:	0003c618 	.word	0x0003c618
   22848:	0003e281 	.word	0x0003e281
   2284c:	0003e26f 	.word	0x0003e26f
   22850:	20028950 	.word	0x20028950
   22854:	200234f4 	.word	0x200234f4
   22858:	0003e2a0 	.word	0x0003e2a0
   2285c:	00022875 	.word	0x00022875
   22860:	2002b93e 	.word	0x2002b93e
   22864:	00022c39 	.word	0x00022c39
   22868:	00022905 	.word	0x00022905
   2286c:	00040193 	.word	0x00040193
   22870:	0003e25f 	.word	0x0003e25f

00022874 <response_cb>:
{
   22874:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data_received += rsp->data_len;
   22876:	4e1d      	ldr	r6, [pc, #116]	; (228ec <response_cb+0x78>)
   22878:	6944      	ldr	r4, [r0, #20]
   2287a:	6833      	ldr	r3, [r6, #0]
	if (final_data == HTTP_DATA_MORE) {
   2287c:	460d      	mov	r5, r1
	data_received += rsp->data_len;
   2287e:	441c      	add	r4, r3
   22880:	6034      	str	r4, [r6, #0]
	if (final_data == HTTP_DATA_MORE) {
   22882:	b9b9      	cbnz	r1, 228b4 <response_cb+0x40>
		if (data_received == HTTPC_FRAG_SIZE) {
   22884:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
   22888:	d112      	bne.n	228b0 <response_cb+0x3c>
			sprintf(rsp_buf, "#XHTTPCRSP:%d,1\r\n",
   2288a:	f640 228c 	movw	r2, #2700	; 0xa8c
   2288e:	4b18      	ldr	r3, [pc, #96]	; (228f0 <response_cb+0x7c>)
   22890:	4818      	ldr	r0, [pc, #96]	; (228f4 <response_cb+0x80>)
   22892:	9400      	str	r4, [sp, #0]
   22894:	f018 fec5 	bl	3b622 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   22898:	4816      	ldr	r0, [pc, #88]	; (228f4 <response_cb+0x80>)
   2289a:	f7fa fbe9 	bl	1d070 <strlen>
   2289e:	4601      	mov	r1, r0
   228a0:	4814      	ldr	r0, [pc, #80]	; (228f4 <response_cb+0x80>)
   228a2:	f7fb fca1 	bl	1e1e8 <rsp_send>
			rsp_send(data_buf, HTTPC_FRAG_SIZE);
   228a6:	4621      	mov	r1, r4
   228a8:	4813      	ldr	r0, [pc, #76]	; (228f8 <response_cb+0x84>)
   228aa:	f7fb fc9d 	bl	1e1e8 <rsp_send>
			data_received = 0;
   228ae:	6035      	str	r5, [r6, #0]
}
   228b0:	b002      	add	sp, #8
   228b2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (final_data == HTTP_DATA_FINAL) {
   228b4:	2901      	cmp	r1, #1
   228b6:	d1fb      	bne.n	228b0 <response_cb+0x3c>
		sprintf(rsp_buf, "#XHTTPCRSP:%d,0\r\n", data_received);
   228b8:	4b10      	ldr	r3, [pc, #64]	; (228fc <response_cb+0x88>)
   228ba:	f640 228c 	movw	r2, #2700	; 0xa8c
   228be:	2100      	movs	r1, #0
   228c0:	480c      	ldr	r0, [pc, #48]	; (228f4 <response_cb+0x80>)
   228c2:	9400      	str	r4, [sp, #0]
   228c4:	f018 fead 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   228c8:	480a      	ldr	r0, [pc, #40]	; (228f4 <response_cb+0x80>)
   228ca:	f7fa fbd1 	bl	1d070 <strlen>
   228ce:	4601      	mov	r1, r0
   228d0:	4808      	ldr	r0, [pc, #32]	; (228f4 <response_cb+0x80>)
   228d2:	f7fb fc89 	bl	1e1e8 <rsp_send>
		rsp_send(data_buf, data_received);
   228d6:	6831      	ldr	r1, [r6, #0]
   228d8:	4807      	ldr	r0, [pc, #28]	; (228f8 <response_cb+0x84>)
   228da:	f7fb fc85 	bl	1e1e8 <rsp_send>
		httpc.rsp_completed = true;
   228de:	4b08      	ldr	r3, [pc, #32]	; (22900 <response_cb+0x8c>)
   228e0:	f883 5070 	strb.w	r5, [r3, #112]	; 0x70
		data_received = 0;
   228e4:	2300      	movs	r3, #0
   228e6:	6033      	str	r3, [r6, #0]
}
   228e8:	e7e2      	b.n	228b0 <response_cb+0x3c>
   228ea:	bf00      	nop
   228ec:	200234e4 	.word	0x200234e4
   228f0:	0003e2a9 	.word	0x0003e2a9
   228f4:	20028950 	.word	0x20028950
   228f8:	2002b93e 	.word	0x2002b93e
   228fc:	0003e2bb 	.word	0x0003e2bb
   22900:	200234e8 	.word	0x200234e8

00022904 <headers_cb>:
{
   22904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	len = strlen(httpc.headers);
   22908:	4e13      	ldr	r6, [pc, #76]	; (22958 <headers_cb+0x54>)
{
   2290a:	4607      	mov	r7, r0
	len = strlen(httpc.headers);
   2290c:	6df0      	ldr	r0, [r6, #92]	; 0x5c
   2290e:	f7fa fbaf 	bl	1d070 <strlen>
	int ret = 0;
   22912:	2400      	movs	r4, #0
	len = strlen(httpc.headers);
   22914:	4605      	mov	r5, r0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   22916:	46a0      	mov	r8, r4
	while (len > 0) {
   22918:	b90d      	cbnz	r5, 2291e <headers_cb+0x1a>
	return len;
   2291a:	462c      	mov	r4, r5
   2291c:	e015      	b.n	2294a <headers_cb+0x46>
		ret = send(sock, httpc.headers + ret, len, 0);
   2291e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   22920:	4421      	add	r1, r4
   22922:	2300      	movs	r3, #0
   22924:	462a      	mov	r2, r5
   22926:	4638      	mov	r0, r7
   22928:	e9cd 8800 	strd	r8, r8, [sp]
   2292c:	f016 fa38 	bl	38da0 <z_impl_zsock_sendto>
		if (ret < 0) {
   22930:	1e04      	subs	r4, r0, #0
   22932:	da0e      	bge.n	22952 <headers_cb+0x4e>
   22934:	4a09      	ldr	r2, [pc, #36]	; (2295c <headers_cb+0x58>)
   22936:	4b0a      	ldr	r3, [pc, #40]	; (22960 <headers_cb+0x5c>)
			LOG_ERR("send header fail: %d", ret);
   22938:	4621      	mov	r1, r4
   2293a:	1ad2      	subs	r2, r2, r3
   2293c:	08d2      	lsrs	r2, r2, #3
   2293e:	0192      	lsls	r2, r2, #6
   22940:	4808      	ldr	r0, [pc, #32]	; (22964 <headers_cb+0x60>)
   22942:	f042 0201 	orr.w	r2, r2, #1
   22946:	f015 fdca 	bl	384de <log_1>
}
   2294a:	4620      	mov	r0, r4
   2294c:	b002      	add	sp, #8
   2294e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len -= ret;
   22952:	1b2d      	subs	r5, r5, r4
   22954:	e7e0      	b.n	22918 <headers_cb+0x14>
   22956:	bf00      	nop
   22958:	200234e8 	.word	0x200234e8
   2295c:	0003c344 	.word	0x0003c344
   22960:	0003c2cc 	.word	0x0003c2cc
   22964:	0003e2cd 	.word	0x0003e2cd

00022968 <resolve_and_connect.constprop.0>:
static int resolve_and_connect(int family, const char *host, int sec_tag)
   22968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (httpc.sec_transport == false) {
   2296c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 22b64 <resolve_and_connect.constprop.0+0x1fc>
static int resolve_and_connect(int family, const char *host, int sec_tag)
   22970:	b09a      	sub	sp, #104	; 0x68
	if (httpc.sec_transport == false) {
   22972:	f89a 3004 	ldrb.w	r3, [sl, #4]
static int resolve_and_connect(int family, const char *host, int sec_tag)
   22976:	4606      	mov	r6, r0
		proto = IPPROTO_TLS_1_2;
   22978:	2b00      	cmp	r3, #0
	port = htons(httpc.port);
   2297a:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
	struct addrinfo hints = {
   2297e:	f04f 0250 	mov.w	r2, #80	; 0x50
	port = htons(httpc.port);
   22982:	f3c3 2707 	ubfx	r7, r3, #8, #8
static int resolve_and_connect(int family, const char *host, int sec_tag)
   22986:	4688      	mov	r8, r1
	struct addrinfo hints = {
   22988:	a806      	add	r0, sp, #24
   2298a:	f04f 0100 	mov.w	r1, #0
		proto = IPPROTO_TLS_1_2;
   2298e:	bf0c      	ite	eq
   22990:	f04f 0906 	moveq.w	r9, #6
   22994:	f44f 7981 	movne.w	r9, #258	; 0x102
	port = htons(httpc.port);
   22998:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	struct addrinfo hints = {
   2299c:	f018 fd29 	bl	3b3f2 <memset>
   229a0:	2301      	movs	r3, #1
	return zsock_getaddrinfo(host, service, hints, res);
   229a2:	2100      	movs	r1, #0
   229a4:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
   229a8:	aa06      	add	r2, sp, #24
   229aa:	ab03      	add	r3, sp, #12
   229ac:	f10a 000c 	add.w	r0, sl, #12
   229b0:	9608      	str	r6, [sp, #32]
   229b2:	f016 f975 	bl	38ca0 <zsock_getaddrinfo>
   229b6:	4c5e      	ldr	r4, [pc, #376]	; (22b30 <resolve_and_connect.constprop.0+0x1c8>)
   229b8:	4b5e      	ldr	r3, [pc, #376]	; (22b34 <resolve_and_connect.constprop.0+0x1cc>)
	if (err) {
   229ba:	4605      	mov	r5, r0
   229bc:	1ae4      	subs	r4, r4, r3
   229be:	08e4      	lsrs	r4, r4, #3
	port = htons(httpc.port);
   229c0:	b2bf      	uxth	r7, r7
	if (err) {
   229c2:	01a4      	lsls	r4, r4, #6
   229c4:	b1a8      	cbz	r0, 229f2 <resolve_and_connect.constprop.0+0x8a>
		LOG_ERR("Failed to resolve hostname %s on %s",
   229c6:	f10a 000c 	add.w	r0, sl, #12
   229ca:	f001 fd27 	bl	2441c <log_strdup>
   229ce:	4a5a      	ldr	r2, [pc, #360]	; (22b38 <resolve_and_connect.constprop.0+0x1d0>)
   229d0:	4601      	mov	r1, r0
   229d2:	485a      	ldr	r0, [pc, #360]	; (22b3c <resolve_and_connect.constprop.0+0x1d4>)
   229d4:	f044 0401 	orr.w	r4, r4, #1
   229d8:	2e01      	cmp	r6, #1
   229da:	bf08      	it	eq
   229dc:	4602      	moveq	r2, r0
   229de:	4623      	mov	r3, r4
   229e0:	4857      	ldr	r0, [pc, #348]	; (22b40 <resolve_and_connect.constprop.0+0x1d8>)
   229e2:	f015 fd93 	bl	3850c <log_2>
		fd = -1;
   229e6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
   229ea:	4630      	mov	r0, r6
   229ec:	b01a      	add	sp, #104	; 0x68
   229ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_INF("Attempting to connect over %s",
   229f2:	2e01      	cmp	r6, #1
   229f4:	bf0c      	ite	eq
   229f6:	4851      	ldreq	r0, [pc, #324]	; (22b3c <resolve_and_connect.constprop.0+0x1d4>)
   229f8:	484f      	ldrne	r0, [pc, #316]	; (22b38 <resolve_and_connect.constprop.0+0x1d0>)
   229fa:	f001 fd0f 	bl	2441c <log_strdup>
   229fe:	f044 0a03 	orr.w	sl, r4, #3
   22a02:	4601      	mov	r1, r0
   22a04:	4652      	mov	r2, sl
   22a06:	484f      	ldr	r0, [pc, #316]	; (22b44 <resolve_and_connect.constprop.0+0x1dc>)
   22a08:	f015 fd69 	bl	384de <log_1>
	return z_impl_zsock_socket(family, type, proto);
   22a0c:	2101      	movs	r1, #1
   22a0e:	4630      	mov	r0, r6
   22a10:	464a      	mov	r2, r9
   22a12:	f002 f9d1 	bl	24db8 <z_impl_zsock_socket>
	if (fd < 0) {
   22a16:	1e06      	subs	r6, r0, #0
   22a18:	da11      	bge.n	22a3e <resolve_and_connect.constprop.0+0xd6>
		LOG_ERR("Failed to create socket, errno %d", errno);
   22a1a:	f016 fc54 	bl	392c6 <__errno>
   22a1e:	f044 0401 	orr.w	r4, r4, #1
   22a22:	4622      	mov	r2, r4
   22a24:	6801      	ldr	r1, [r0, #0]
   22a26:	4848      	ldr	r0, [pc, #288]	; (22b48 <resolve_and_connect.constprop.0+0x1e0>)
			LOG_ERR("Fail to set up TLS credentials: %d", err);
   22a28:	f015 fd59 	bl	384de <log_1>
	zsock_freeaddrinfo(ai);
   22a2c:	9803      	ldr	r0, [sp, #12]
   22a2e:	f016 f939 	bl	38ca4 <zsock_freeaddrinfo>
	if (err) {
   22a32:	2d00      	cmp	r5, #0
   22a34:	d0d9      	beq.n	229ea <resolve_and_connect.constprop.0+0x82>
	return z_impl_zsock_close(sock);
   22a36:	4630      	mov	r0, r6
   22a38:	f016 f945 	bl	38cc6 <z_impl_zsock_close>
   22a3c:	e7d3      	b.n	229e6 <resolve_and_connect.constprop.0+0x7e>
	if (proto == IPPROTO_TLS_1_2) {
   22a3e:	f5b9 7f81 	cmp.w	r9, #258	; 0x102
   22a42:	d150      	bne.n	22ae6 <resolve_and_connect.constprop.0+0x17e>
	verify = TLS_PEER_VERIFY_REQUIRED;
   22a44:	2502      	movs	r5, #2
		LOG_INF("Setting up TLS credentials");
   22a46:	4841      	ldr	r0, [pc, #260]	; (22b4c <resolve_and_connect.constprop.0+0x1e4>)
   22a48:	f044 0103 	orr.w	r1, r4, #3
   22a4c:	f015 fd38 	bl	384c0 <log_0>
	sec_tag_t sec_tag_list[] = { sec_tag };
   22a50:	f8cd 8014 	str.w	r8, [sp, #20]
	verify = TLS_PEER_VERIFY_REQUIRED;
   22a54:	9504      	str	r5, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   22a56:	f04f 0804 	mov.w	r8, #4
   22a5a:	2205      	movs	r2, #5
   22a5c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   22a60:	4630      	mov	r0, r6
   22a62:	f8cd 8000 	str.w	r8, [sp]
   22a66:	ab04      	add	r3, sp, #16
   22a68:	f016 f9f6 	bl	38e58 <z_impl_zsock_setsockopt>
	if (err) {
   22a6c:	b178      	cbz	r0, 22a8e <resolve_and_connect.constprop.0+0x126>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   22a6e:	f016 fc2a 	bl	392c6 <__errno>
   22a72:	f044 0501 	orr.w	r5, r4, #1
   22a76:	462a      	mov	r2, r5
   22a78:	6801      	ldr	r1, [r0, #0]
   22a7a:	4835      	ldr	r0, [pc, #212]	; (22b50 <resolve_and_connect.constprop.0+0x1e8>)
		LOG_ERR("Failed to set socket security tag, errno %d", errno);
   22a7c:	f015 fd2f 	bl	384de <log_1>
		return -1;
   22a80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			LOG_ERR("Fail to set up TLS credentials: %d", err);
   22a84:	4629      	mov	r1, r5
   22a86:	4833      	ldr	r0, [pc, #204]	; (22b54 <resolve_and_connect.constprop.0+0x1ec>)
   22a88:	f044 0201 	orr.w	r2, r4, #1
   22a8c:	e7cc      	b.n	22a28 <resolve_and_connect.constprop.0+0xc0>
   22a8e:	2201      	movs	r2, #1
   22a90:	f44f 718d 	mov.w	r1, #282	; 0x11a
   22a94:	4630      	mov	r0, r6
   22a96:	f8cd 8000 	str.w	r8, [sp]
   22a9a:	ab05      	add	r3, sp, #20
   22a9c:	f016 f9dc 	bl	38e58 <z_impl_zsock_setsockopt>
	if (err) {
   22aa0:	b138      	cbz	r0, 22ab2 <resolve_and_connect.constprop.0+0x14a>
		LOG_ERR("Failed to set socket security tag, errno %d", errno);
   22aa2:	f016 fc10 	bl	392c6 <__errno>
   22aa6:	f044 0501 	orr.w	r5, r4, #1
   22aaa:	6801      	ldr	r1, [r0, #0]
   22aac:	462a      	mov	r2, r5
   22aae:	482a      	ldr	r0, [pc, #168]	; (22b58 <resolve_and_connect.constprop.0+0x1f0>)
   22ab0:	e7e4      	b.n	22a7c <resolve_and_connect.constprop.0+0x114>
   22ab2:	2341      	movs	r3, #65	; 0x41
   22ab4:	462a      	mov	r2, r5
   22ab6:	9300      	str	r3, [sp, #0]
   22ab8:	f44f 718d 	mov.w	r1, #282	; 0x11a
   22abc:	4630      	mov	r0, r6
   22abe:	4b27      	ldr	r3, [pc, #156]	; (22b5c <resolve_and_connect.constprop.0+0x1f4>)
   22ac0:	f016 f9ca 	bl	38e58 <z_impl_zsock_setsockopt>
	if (err < 0) {
   22ac4:	2800      	cmp	r0, #0
   22ac6:	da0e      	bge.n	22ae6 <resolve_and_connect.constprop.0+0x17e>
		LOG_ERR("Failed to set TLS_HOSTNAME option: %d", errno);
   22ac8:	f016 fbfd 	bl	392c6 <__errno>
   22acc:	f044 0501 	orr.w	r5, r4, #1
   22ad0:	462a      	mov	r2, r5
   22ad2:	6801      	ldr	r1, [r0, #0]
   22ad4:	4822      	ldr	r0, [pc, #136]	; (22b60 <resolve_and_connect.constprop.0+0x1f8>)
   22ad6:	f015 fd02 	bl	384de <log_1>
		return -errno;
   22ada:	f016 fbf4 	bl	392c6 <__errno>
   22ade:	6803      	ldr	r3, [r0, #0]
   22ae0:	425d      	negs	r5, r3
		if (err) {
   22ae2:	2b00      	cmp	r3, #0
   22ae4:	d1ce      	bne.n	22a84 <resolve_and_connect.constprop.0+0x11c>
	err = -1;
   22ae6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   22aea:	f8dd 800c 	ldr.w	r8, [sp, #12]
			LOG_ERR("Unable to connect, errno %d", errno);
   22aee:	f8df 9078 	ldr.w	r9, [pc, #120]	; 22b68 <resolve_and_connect.constprop.0+0x200>
   22af2:	f044 0401 	orr.w	r4, r4, #1
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   22af6:	f1b8 0f00 	cmp.w	r8, #0
   22afa:	d097      	beq.n	22a2c <resolve_and_connect.constprop.0+0xc4>
		struct sockaddr *const sa = addr->ai_addr;
   22afc:	f8d8 1018 	ldr.w	r1, [r8, #24]
		switch (sa->sa_family) {
   22b00:	880b      	ldrh	r3, [r1, #0]
   22b02:	2b01      	cmp	r3, #1
   22b04:	d001      	beq.n	22b0a <resolve_and_connect.constprop.0+0x1a2>
   22b06:	2b02      	cmp	r3, #2
   22b08:	d100      	bne.n	22b0c <resolve_and_connect.constprop.0+0x1a4>
			((struct sockaddr_in *)sa)->sin_port = port;
   22b0a:	804f      	strh	r7, [r1, #2]
		err = connect(fd, sa, addr->ai_addrlen);
   22b0c:	f8d8 2014 	ldr.w	r2, [r8, #20]
	return z_impl_zsock_connect(sock, addr, addrlen);
   22b10:	4630      	mov	r0, r6
   22b12:	f016 f905 	bl	38d20 <z_impl_zsock_connect>
		if (err) {
   22b16:	4605      	mov	r5, r0
   22b18:	2800      	cmp	r0, #0
   22b1a:	d087      	beq.n	22a2c <resolve_and_connect.constprop.0+0xc4>
			LOG_ERR("Unable to connect, errno %d", errno);
   22b1c:	f016 fbd3 	bl	392c6 <__errno>
   22b20:	4622      	mov	r2, r4
   22b22:	6801      	ldr	r1, [r0, #0]
   22b24:	4648      	mov	r0, r9
   22b26:	f015 fcda 	bl	384de <log_1>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   22b2a:	f8d8 8000 	ldr.w	r8, [r8]
   22b2e:	e7e2      	b.n	22af6 <resolve_and_connect.constprop.0+0x18e>
   22b30:	0003c344 	.word	0x0003c344
   22b34:	0003c2cc 	.word	0x0003c2cc
   22b38:	0003e2e7 	.word	0x0003e2e7
   22b3c:	0003e2e2 	.word	0x0003e2e2
   22b40:	0003e2ec 	.word	0x0003e2ec
   22b44:	0003e310 	.word	0x0003e310
   22b48:	0003e32e 	.word	0x0003e32e
   22b4c:	0003e350 	.word	0x0003e350
   22b50:	0003e36b 	.word	0x0003e36b
   22b54:	0003e3e9 	.word	0x0003e3e9
   22b58:	0003e397 	.word	0x0003e397
   22b5c:	200234f4 	.word	0x200234f4
   22b60:	0003e3c3 	.word	0x0003e3c3
   22b64:	200234e8 	.word	0x200234e8
   22b68:	0003e40c 	.word	0x0003e40c

00022b6c <do_http_disconnect>:
{
   22b6c:	b510      	push	{r4, lr}
	if (httpc.fd != INVALID_SOCKET) {
   22b6e:	4c15      	ldr	r4, [pc, #84]	; (22bc4 <do_http_disconnect+0x58>)
   22b70:	6820      	ldr	r0, [r4, #0]
   22b72:	1c43      	adds	r3, r0, #1
   22b74:	d022      	beq.n	22bbc <do_http_disconnect+0x50>
	return z_impl_zsock_close(sock);
   22b76:	f016 f8a6 	bl	38cc6 <z_impl_zsock_close>
		httpc.fd = INVALID_SOCKET;
   22b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22b7e:	6023      	str	r3, [r4, #0]
	if (httpc.pl_len > 0) {
   22b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22b82:	b173      	cbz	r3, 22ba2 <do_http_disconnect+0x36>
   22b84:	4b10      	ldr	r3, [pc, #64]	; (22bc8 <do_http_disconnect+0x5c>)
   22b86:	4911      	ldr	r1, [pc, #68]	; (22bcc <do_http_disconnect+0x60>)
		LOG_ERR("Exit request");
   22b88:	4811      	ldr	r0, [pc, #68]	; (22bd0 <do_http_disconnect+0x64>)
   22b8a:	1ac9      	subs	r1, r1, r3
   22b8c:	08c9      	lsrs	r1, r1, #3
   22b8e:	0189      	lsls	r1, r1, #6
   22b90:	f041 0101 	orr.w	r1, r1, #1
   22b94:	f015 fc94 	bl	384c0 <log_0>
		httpc.pl_len = 0;
   22b98:	2300      	movs	r3, #0
   22b9a:	6663      	str	r3, [r4, #100]	; 0x64
	z_impl_k_sem_give(sem);
   22b9c:	480d      	ldr	r0, [pc, #52]	; (22bd4 <do_http_disconnect+0x68>)
   22b9e:	f013 fbad 	bl	362fc <z_impl_k_sem_give>
	sprintf(rsp_buf, "#XHTTPCCON:0\r\n");
   22ba2:	490d      	ldr	r1, [pc, #52]	; (22bd8 <do_http_disconnect+0x6c>)
   22ba4:	480d      	ldr	r0, [pc, #52]	; (22bdc <do_http_disconnect+0x70>)
   22ba6:	f018 fd63 	bl	3b670 <strcpy>
	rsp_send(rsp_buf, strlen(rsp_buf));
   22baa:	480c      	ldr	r0, [pc, #48]	; (22bdc <do_http_disconnect+0x70>)
   22bac:	f7fa fa60 	bl	1d070 <strlen>
   22bb0:	4601      	mov	r1, r0
   22bb2:	480a      	ldr	r0, [pc, #40]	; (22bdc <do_http_disconnect+0x70>)
   22bb4:	f7fb fb18 	bl	1e1e8 <rsp_send>
	return err;
   22bb8:	2000      	movs	r0, #0
}
   22bba:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
   22bbc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22bc0:	e7fb      	b.n	22bba <do_http_disconnect+0x4e>
   22bc2:	bf00      	nop
   22bc4:	200234e8 	.word	0x200234e8
   22bc8:	0003c2cc 	.word	0x0003c2cc
   22bcc:	0003c344 	.word	0x0003c344
   22bd0:	0003e428 	.word	0x0003e428
   22bd4:	20020894 	.word	0x20020894
   22bd8:	0003e435 	.word	0x0003e435
   22bdc:	20028950 	.word	0x20028950

00022be0 <httpc_thread_fn>:
	}
	return 0;
}

static void httpc_thread_fn(void *arg1, void *arg2, void *arg3)
{
   22be0:	b538      	push	{r3, r4, r5, lr}
   22be2:	4c10      	ldr	r4, [pc, #64]	; (22c24 <httpc_thread_fn+0x44>)
   22be4:	4b10      	ldr	r3, [pc, #64]	; (22c28 <httpc_thread_fn+0x48>)
	return z_impl_k_sem_take(sem, timeout);
   22be6:	4d11      	ldr	r5, [pc, #68]	; (22c2c <httpc_thread_fn+0x4c>)
   22be8:	1ae4      	subs	r4, r4, r3
   22bea:	08e4      	lsrs	r4, r4, #3
	while (1) {
		/* Don't go any further until sending HTTP request */
		k_sem_take(&http_req_sem, K_FOREVER);
		err = do_http_request();
		if (err < 0) {
			LOG_ERR("do_http_request fail:%d", err);
   22bec:	01a4      	lsls	r4, r4, #6
   22bee:	f044 0401 	orr.w	r4, r4, #1
   22bf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22bfa:	4628      	mov	r0, r5
   22bfc:	f013 fba4 	bl	36348 <z_impl_k_sem_take>
		err = do_http_request();
   22c00:	f7ff fd9e 	bl	22740 <do_http_request>
		if (err < 0) {
   22c04:	1e01      	subs	r1, r0, #0
   22c06:	daf4      	bge.n	22bf2 <httpc_thread_fn+0x12>
			LOG_ERR("do_http_request fail:%d", err);
   22c08:	4622      	mov	r2, r4
   22c0a:	4809      	ldr	r0, [pc, #36]	; (22c30 <httpc_thread_fn+0x50>)
   22c0c:	f015 fc67 	bl	384de <log_1>
			/* Disconnect from server */
			err = do_http_disconnect();
   22c10:	f7ff ffac 	bl	22b6c <do_http_disconnect>
			if (err) {
   22c14:	4601      	mov	r1, r0
   22c16:	2800      	cmp	r0, #0
   22c18:	d0eb      	beq.n	22bf2 <httpc_thread_fn+0x12>
				LOG_ERR("Fail to disconnect. Error: %d", err);
   22c1a:	4622      	mov	r2, r4
   22c1c:	4805      	ldr	r0, [pc, #20]	; (22c34 <httpc_thread_fn+0x54>)
   22c1e:	f015 fc5e 	bl	384de <log_1>
	while (1) {
   22c22:	e7e6      	b.n	22bf2 <httpc_thread_fn+0x12>
   22c24:	0003c344 	.word	0x0003c344
   22c28:	0003c2cc 	.word	0x0003c2cc
   22c2c:	20020894 	.word	0x20020894
   22c30:	0003e444 	.word	0x0003e444
   22c34:	0003e45c 	.word	0x0003e45c

00022c38 <payload_cb>:
{
   22c38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (httpc.pl_len > 0) {
   22c3c:	4c3e      	ldr	r4, [pc, #248]	; (22d38 <payload_cb+0x100>)
{
   22c3e:	4680      	mov	r8, r0
	if (httpc.pl_len > 0) {
   22c40:	6e65      	ldr	r5, [r4, #100]	; 0x64
   22c42:	2d00      	cmp	r5, #0
   22c44:	d045      	beq.n	22cd2 <payload_cb+0x9a>
		sprintf(rsp_buf, "#XHTTPCREQ:1\r\n");
   22c46:	493d      	ldr	r1, [pc, #244]	; (22d3c <payload_cb+0x104>)
   22c48:	483d      	ldr	r0, [pc, #244]	; (22d40 <payload_cb+0x108>)
   22c4a:	f018 fd11 	bl	3b670 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   22c4e:	483c      	ldr	r0, [pc, #240]	; (22d40 <payload_cb+0x108>)
   22c50:	f7fa fa0e 	bl	1d070 <strlen>
	size_t total_sent = 0;
   22c54:	2500      	movs	r5, #0
		rsp_send(rsp_buf, strlen(rsp_buf));
   22c56:	4601      	mov	r1, r0
   22c58:	4839      	ldr	r0, [pc, #228]	; (22d40 <payload_cb+0x108>)
   22c5a:	f7fb fac5 	bl	1e1e8 <rsp_send>
   22c5e:	4e39      	ldr	r6, [pc, #228]	; (22d44 <payload_cb+0x10c>)
   22c60:	4939      	ldr	r1, [pc, #228]	; (22d48 <payload_cb+0x110>)
   22c62:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 22d60 <payload_cb+0x128>
   22c66:	1a76      	subs	r6, r6, r1
   22c68:	08f6      	lsrs	r6, r6, #3
				LOG_WRN("send unexpected payload");
   22c6a:	ea4f 1986 	mov.w	r9, r6, lsl #6
   22c6e:	f049 0902 	orr.w	r9, r9, #2
   22c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22c7a:	4650      	mov	r0, sl
   22c7c:	f013 fb64 	bl	36348 <z_impl_k_sem_take>
			if (httpc.pl_len == 0) {
   22c80:	6e67      	ldr	r7, [r4, #100]	; 0x64
   22c82:	b95f      	cbnz	r7, 22c9c <payload_cb+0x64>
				LOG_INF("abort sending payload");
   22c84:	01b1      	lsls	r1, r6, #6
   22c86:	4831      	ldr	r0, [pc, #196]	; (22d4c <payload_cb+0x114>)
   22c88:	f041 0103 	orr.w	r1, r1, #3
   22c8c:	f015 fc18 	bl	384c0 <log_0>
				return -ECONNABORTED;
   22c90:	f06f 0070 	mvn.w	r0, #112	; 0x70
				httpc.pl_sent = 0;
   22c94:	66e7      	str	r7, [r4, #108]	; 0x6c
}
   22c96:	b002      	add	sp, #8
   22c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (total_sent + httpc.pl_to_send > httpc.pl_len) {
   22c9c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   22c9e:	442b      	add	r3, r5
   22ca0:	429f      	cmp	r7, r3
   22ca2:	d206      	bcs.n	22cb2 <payload_cb+0x7a>
				LOG_WRN("send unexpected payload");
   22ca4:	4649      	mov	r1, r9
   22ca6:	482a      	ldr	r0, [pc, #168]	; (22d50 <payload_cb+0x118>)
   22ca8:	f015 fc0a 	bl	384c0 <log_0>
				httpc.pl_to_send = httpc.pl_len - total_sent;
   22cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22cae:	1b5b      	subs	r3, r3, r5
   22cb0:	66a3      	str	r3, [r4, #104]	; 0x68
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   22cb2:	2700      	movs	r7, #0
			while (httpc.pl_sent < httpc.pl_to_send) {
   22cb4:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   22cb8:	4293      	cmp	r3, r2
   22cba:	d317      	bcc.n	22cec <payload_cb+0xb4>
			if (total_sent == httpc.pl_len) {
   22cbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22cbe:	429d      	cmp	r5, r3
				httpc.pl_len = 0;
   22cc0:	bf04      	itt	eq
   22cc2:	2300      	moveq	r3, #0
   22cc4:	6663      	streq	r3, [r4, #100]	; 0x64
	z_impl_k_sem_give(sem);
   22cc6:	4823      	ldr	r0, [pc, #140]	; (22d54 <payload_cb+0x11c>)
   22cc8:	f013 fb18 	bl	362fc <z_impl_k_sem_give>
		} while (total_sent < httpc.pl_len);
   22ccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22cce:	429d      	cmp	r5, r3
   22cd0:	d3cf      	bcc.n	22c72 <payload_cb+0x3a>
		sprintf(rsp_buf, "#XHTTPCREQ:0\r\n");
   22cd2:	4921      	ldr	r1, [pc, #132]	; (22d58 <payload_cb+0x120>)
   22cd4:	481a      	ldr	r0, [pc, #104]	; (22d40 <payload_cb+0x108>)
   22cd6:	f018 fccb 	bl	3b670 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   22cda:	4819      	ldr	r0, [pc, #100]	; (22d40 <payload_cb+0x108>)
   22cdc:	f7fa f9c8 	bl	1d070 <strlen>
   22ce0:	4601      	mov	r1, r0
   22ce2:	4817      	ldr	r0, [pc, #92]	; (22d40 <payload_cb+0x108>)
   22ce4:	f7fb fa80 	bl	1e1e8 <rsp_send>
	return total_sent;
   22ce8:	4628      	mov	r0, r5
   22cea:	e7d4      	b.n	22c96 <payload_cb+0x5e>
				ret = send(sock, httpc.payload + httpc.pl_sent,
   22cec:	6e21      	ldr	r1, [r4, #96]	; 0x60
   22cee:	4419      	add	r1, r3
					   MIN(httpc.pl_to_send - httpc.pl_sent,
   22cf0:	1ad2      	subs	r2, r2, r3
   22cf2:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
   22cf6:	bf28      	it	cs
   22cf8:	f44f 7210 	movcs.w	r2, #576	; 0x240
   22cfc:	2300      	movs	r3, #0
   22cfe:	4640      	mov	r0, r8
   22d00:	e9cd 7700 	strd	r7, r7, [sp]
   22d04:	f016 f84c 	bl	38da0 <z_impl_zsock_sendto>
				if (ret < 0) {
   22d08:	1e01      	subs	r1, r0, #0
   22d0a:	da0f      	bge.n	22d2c <payload_cb+0xf4>
					LOG_ERR("send fail: %d", ret);
   22d0c:	01b2      	lsls	r2, r6, #6
   22d0e:	4813      	ldr	r0, [pc, #76]	; (22d5c <payload_cb+0x124>)
   22d10:	f042 0201 	orr.w	r2, r2, #1
   22d14:	f015 fbe3 	bl	384de <log_1>
					httpc.pl_len = 0;
   22d18:	6667      	str	r7, [r4, #100]	; 0x64
					httpc.pl_sent = 0;
   22d1a:	66e7      	str	r7, [r4, #108]	; 0x6c
   22d1c:	480d      	ldr	r0, [pc, #52]	; (22d54 <payload_cb+0x11c>)
   22d1e:	f013 faed 	bl	362fc <z_impl_k_sem_give>
					return -errno;
   22d22:	f016 fad0 	bl	392c6 <__errno>
   22d26:	6800      	ldr	r0, [r0, #0]
   22d28:	4240      	negs	r0, r0
   22d2a:	e7b4      	b.n	22c96 <payload_cb+0x5e>
				httpc.pl_sent += ret;
   22d2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
				total_sent += ret;
   22d2e:	440d      	add	r5, r1
				httpc.pl_sent += ret;
   22d30:	440b      	add	r3, r1
   22d32:	66e3      	str	r3, [r4, #108]	; 0x6c
				total_sent += ret;
   22d34:	e7be      	b.n	22cb4 <payload_cb+0x7c>
   22d36:	bf00      	nop
   22d38:	200234e8 	.word	0x200234e8
   22d3c:	0003e47a 	.word	0x0003e47a
   22d40:	20028950 	.word	0x20028950
   22d44:	0003c344 	.word	0x0003c344
   22d48:	0003c2cc 	.word	0x0003c2cc
   22d4c:	0003e489 	.word	0x0003e489
   22d50:	0003e49f 	.word	0x0003e49f
   22d54:	2002087c 	.word	0x2002087c
   22d58:	0003e4c5 	.word	0x0003e4c5
   22d5c:	0003e4b7 	.word	0x0003e4b7
   22d60:	20020894 	.word	0x20020894

00022d64 <handle_AT_HTTPC_CONNECT>:
	size_t host_sz = HTTPC_HOST_LEN;
   22d64:	2340      	movs	r3, #64	; 0x40
{
   22d66:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cmd_type) {
   22d68:	2802      	cmp	r0, #2
{
   22d6a:	b08b      	sub	sp, #44	; 0x2c
   22d6c:	4604      	mov	r4, r0
	size_t host_sz = HTTPC_HOST_LEN;
   22d6e:	9307      	str	r3, [sp, #28]
	switch (cmd_type) {
   22d70:	f000 80fc 	beq.w	22f6c <handle_AT_HTTPC_CONNECT+0x208>
   22d74:	2803      	cmp	r0, #3
   22d76:	f000 8121 	beq.w	22fbc <handle_AT_HTTPC_CONNECT+0x258>
   22d7a:	2801      	cmp	r0, #1
   22d7c:	d103      	bne.n	22d86 <handle_AT_HTTPC_CONNECT+0x22>
		if (at_params_valid_count_get(&at_param_list) == 0) {
   22d7e:	489a      	ldr	r0, [pc, #616]	; (22fe8 <handle_AT_HTTPC_CONNECT+0x284>)
   22d80:	f017 fd69 	bl	3a856 <at_params_valid_count_get>
   22d84:	b910      	cbnz	r0, 22d8c <handle_AT_HTTPC_CONNECT+0x28>
	switch (cmd_type) {
   22d86:	f06f 0415 	mvn.w	r4, #21
   22d8a:	e012      	b.n	22db2 <handle_AT_HTTPC_CONNECT+0x4e>
		err = at_params_short_get(&at_param_list, 1, &op);
   22d8c:	4621      	mov	r1, r4
   22d8e:	4896      	ldr	r0, [pc, #600]	; (22fe8 <handle_AT_HTTPC_CONNECT+0x284>)
   22d90:	f10d 021a 	add.w	r2, sp, #26
   22d94:	f017 fd17 	bl	3a7c6 <at_params_short_get>
		if (err < 0) {
   22d98:	1e04      	subs	r4, r0, #0
   22d9a:	da0d      	bge.n	22db8 <handle_AT_HTTPC_CONNECT+0x54>
			LOG_ERR("Fail to get op: %d", err);
   22d9c:	4621      	mov	r1, r4
   22d9e:	4a93      	ldr	r2, [pc, #588]	; (22fec <handle_AT_HTTPC_CONNECT+0x288>)
   22da0:	4b93      	ldr	r3, [pc, #588]	; (22ff0 <handle_AT_HTTPC_CONNECT+0x28c>)
   22da2:	4894      	ldr	r0, [pc, #592]	; (22ff4 <handle_AT_HTTPC_CONNECT+0x290>)
   22da4:	1ad2      	subs	r2, r2, r3
   22da6:	08d2      	lsrs	r2, r2, #3
   22da8:	0192      	lsls	r2, r2, #6
   22daa:	f042 0201 	orr.w	r2, r2, #1
				LOG_ERR("Fail to get host: %d", err);
   22dae:	f015 fb96 	bl	384de <log_1>
}
   22db2:	4620      	mov	r0, r4
   22db4:	b00b      	add	sp, #44	; 0x2c
   22db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (op == AT_HTTPCCON_CONNECT) {
   22db8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   22dbc:	2b01      	cmp	r3, #1
   22dbe:	f040 80c2 	bne.w	22f46 <handle_AT_HTTPC_CONNECT+0x1e2>
			if (at_params_valid_count_get(&at_param_list) <= 3) {
   22dc2:	4889      	ldr	r0, [pc, #548]	; (22fe8 <handle_AT_HTTPC_CONNECT+0x284>)
   22dc4:	f017 fd47 	bl	3a856 <at_params_valid_count_get>
   22dc8:	2803      	cmp	r0, #3
   22dca:	d9dc      	bls.n	22d86 <handle_AT_HTTPC_CONNECT+0x22>
			if (httpc.fd != INVALID_SOCKET) {
   22dcc:	4a8a      	ldr	r2, [pc, #552]	; (22ff8 <handle_AT_HTTPC_CONNECT+0x294>)
   22dce:	6813      	ldr	r3, [r2, #0]
   22dd0:	4617      	mov	r7, r2
   22dd2:	3301      	adds	r3, #1
   22dd4:	f040 8105 	bne.w	22fe2 <handle_AT_HTTPC_CONNECT+0x27e>
			err = at_params_string_get(&at_param_list, 2,
   22dd8:	ab07      	add	r3, sp, #28
   22dda:	2102      	movs	r1, #2
   22ddc:	4882      	ldr	r0, [pc, #520]	; (22fe8 <handle_AT_HTTPC_CONNECT+0x284>)
   22dde:	320c      	adds	r2, #12
   22de0:	f017 fd16 	bl	3a810 <at_params_string_get>
			if (err < 0) {
   22de4:	4d81      	ldr	r5, [pc, #516]	; (22fec <handle_AT_HTTPC_CONNECT+0x288>)
   22de6:	4b82      	ldr	r3, [pc, #520]	; (22ff0 <handle_AT_HTTPC_CONNECT+0x28c>)
   22de8:	1e04      	subs	r4, r0, #0
   22dea:	eba5 0503 	sub.w	r5, r5, r3
   22dee:	ea4f 05d5 	mov.w	r5, r5, lsr #3
   22df2:	ea4f 1585 	mov.w	r5, r5, lsl #6
   22df6:	da04      	bge.n	22e02 <handle_AT_HTTPC_CONNECT+0x9e>
				LOG_ERR("Fail to get host: %d", err);
   22df8:	4621      	mov	r1, r4
   22dfa:	4880      	ldr	r0, [pc, #512]	; (22ffc <handle_AT_HTTPC_CONNECT+0x298>)
   22dfc:	f045 0201 	orr.w	r2, r5, #1
   22e00:	e7d5      	b.n	22dae <handle_AT_HTTPC_CONNECT+0x4a>
			httpc.host[host_sz] = '\0';
   22e02:	2200      	movs	r2, #0
   22e04:	9b07      	ldr	r3, [sp, #28]
			err = at_params_int_get(&at_param_list, 3, &httpc.port);
   22e06:	2103      	movs	r1, #3
			httpc.host[host_sz] = '\0';
   22e08:	443b      	add	r3, r7
   22e0a:	731a      	strb	r2, [r3, #12]
			err = at_params_int_get(&at_param_list, 3, &httpc.port);
   22e0c:	4876      	ldr	r0, [pc, #472]	; (22fe8 <handle_AT_HTTPC_CONNECT+0x284>)
   22e0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
   22e12:	f017 fcea 	bl	3a7ea <at_params_int_get>
			if (err < 0) {
   22e16:	1e04      	subs	r4, r0, #0
   22e18:	da04      	bge.n	22e24 <handle_AT_HTTPC_CONNECT+0xc0>
				LOG_ERR("Fail to get port: %d", err);
   22e1a:	4621      	mov	r1, r4
   22e1c:	4878      	ldr	r0, [pc, #480]	; (23000 <handle_AT_HTTPC_CONNECT+0x29c>)
   22e1e:	f045 0201 	orr.w	r2, r5, #1
   22e22:	e7c4      	b.n	22dae <handle_AT_HTTPC_CONNECT+0x4a>
			if (at_params_valid_count_get(&at_param_list) == 5) {
   22e24:	4870      	ldr	r0, [pc, #448]	; (22fe8 <handle_AT_HTTPC_CONNECT+0x284>)
   22e26:	f017 fd16 	bl	3a856 <at_params_valid_count_get>
   22e2a:	2805      	cmp	r0, #5
   22e2c:	d10d      	bne.n	22e4a <handle_AT_HTTPC_CONNECT+0xe6>
				err = at_params_int_get(&at_param_list, 4,
   22e2e:	2104      	movs	r1, #4
   22e30:	4a74      	ldr	r2, [pc, #464]	; (23004 <handle_AT_HTTPC_CONNECT+0x2a0>)
   22e32:	486d      	ldr	r0, [pc, #436]	; (22fe8 <handle_AT_HTTPC_CONNECT+0x284>)
   22e34:	f017 fcd9 	bl	3a7ea <at_params_int_get>
				if (err < 0) {
   22e38:	1e04      	subs	r4, r0, #0
   22e3a:	da04      	bge.n	22e46 <handle_AT_HTTPC_CONNECT+0xe2>
					LOG_ERR("Fail to get sec_tag: %d", err);
   22e3c:	4621      	mov	r1, r4
   22e3e:	4872      	ldr	r0, [pc, #456]	; (23008 <handle_AT_HTTPC_CONNECT+0x2a4>)
   22e40:	f045 0201 	orr.w	r2, r5, #1
   22e44:	e7b3      	b.n	22dae <handle_AT_HTTPC_CONNECT+0x4a>
				httpc.sec_transport = true;
   22e46:	2301      	movs	r3, #1
   22e48:	713b      	strb	r3, [r7, #4]
	if (httpc.fd == INVALID_SOCKET) {
   22e4a:	683b      	ldr	r3, [r7, #0]
   22e4c:	3301      	adds	r3, #1
   22e4e:	d174      	bne.n	22f3a <handle_AT_HTTPC_CONNECT+0x1d6>
	if ((httpc.sec_transport == true) && (sec_tag == -1)) {
   22e50:	793b      	ldrb	r3, [r7, #4]
		httpc.fd = server_connect(httpc.host, httpc.sec_tag);
   22e52:	68b9      	ldr	r1, [r7, #8]
	if ((httpc.sec_transport == true) && (sec_tag == -1)) {
   22e54:	b313      	cbz	r3, 22e9c <handle_AT_HTTPC_CONNECT+0x138>
   22e56:	1c48      	adds	r0, r1, #1
   22e58:	d120      	bne.n	22e9c <handle_AT_HTTPC_CONNECT+0x138>
		LOG_ERR("Empty secure tag.");
   22e5a:	486c      	ldr	r0, [pc, #432]	; (2300c <handle_AT_HTTPC_CONNECT+0x2a8>)
   22e5c:	f045 0101 	orr.w	r1, r5, #1
		LOG_ERR("Fail to resolve and connect");
   22e60:	f015 fb2e 	bl	384c0 <log_0>
		httpc.fd = server_connect(httpc.host, httpc.sec_tag);
   22e64:	f06f 0315 	mvn.w	r3, #21
   22e68:	603b      	str	r3, [r7, #0]
			LOG_ERR("server_connect fail.");
   22e6a:	f045 0101 	orr.w	r1, r5, #1
   22e6e:	4868      	ldr	r0, [pc, #416]	; (23010 <handle_AT_HTTPC_CONNECT+0x2ac>)
   22e70:	f015 fb26 	bl	384c0 <log_0>
			httpc.fd = INVALID_SOCKET;
   22e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			sprintf(rsp_buf, "#XHTTPCCON:0\r\n");
   22e78:	4966      	ldr	r1, [pc, #408]	; (23014 <handle_AT_HTTPC_CONNECT+0x2b0>)
			httpc.fd = INVALID_SOCKET;
   22e7a:	603b      	str	r3, [r7, #0]
			sprintf(rsp_buf, "#XHTTPCCON:1\r\n");
   22e7c:	4866      	ldr	r0, [pc, #408]	; (23018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   22e7e:	f018 fbf7 	bl	3b670 <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   22e82:	4865      	ldr	r0, [pc, #404]	; (23018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   22e84:	f7fa f8f4 	bl	1d070 <strlen>
   22e88:	4601      	mov	r1, r0
   22e8a:	4863      	ldr	r0, [pc, #396]	; (23018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   22e8c:	f7fb f9ac 	bl	1e1e8 <rsp_send>
			if (do_http_connect() >= 0) {
   22e90:	683b      	ldr	r3, [r7, #0]
   22e92:	2b00      	cmp	r3, #0
   22e94:	f6ff af77 	blt.w	22d86 <handle_AT_HTTPC_CONNECT+0x22>
				err = 0;
   22e98:	2400      	movs	r4, #0
   22e9a:	e78a      	b.n	22db2 <handle_AT_HTTPC_CONNECT+0x4e>
	fd = resolve_and_connect(AF_INET6, host, sec_tag);
   22e9c:	2002      	movs	r0, #2
   22e9e:	9105      	str	r1, [sp, #20]
   22ea0:	f7ff fd62 	bl	22968 <resolve_and_connect.constprop.0>
	if (fd < 0) {
   22ea4:	1e04      	subs	r4, r0, #0
   22ea6:	9905      	ldr	r1, [sp, #20]
   22ea8:	da08      	bge.n	22ebc <handle_AT_HTTPC_CONNECT+0x158>
		fd = resolve_and_connect(AF_INET, host, sec_tag);
   22eaa:	2001      	movs	r0, #1
   22eac:	f7ff fd5c 	bl	22968 <resolve_and_connect.constprop.0>
	if (fd < 0) {
   22eb0:	1e04      	subs	r4, r0, #0
   22eb2:	da03      	bge.n	22ebc <handle_AT_HTTPC_CONNECT+0x158>
		LOG_ERR("Fail to resolve and connect");
   22eb4:	4859      	ldr	r0, [pc, #356]	; (2301c <handle_AT_HTTPC_CONNECT+0x2b8>)
   22eb6:	f045 0101 	orr.w	r1, r5, #1
   22eba:	e7d1      	b.n	22e60 <handle_AT_HTTPC_CONNECT+0xfc>
	LOG_INF("Connected to %s", log_strdup(host));
   22ebc:	4858      	ldr	r0, [pc, #352]	; (23020 <handle_AT_HTTPC_CONNECT+0x2bc>)
   22ebe:	f001 faad 	bl	2441c <log_strdup>
   22ec2:	f045 0603 	orr.w	r6, r5, #3
   22ec6:	4601      	mov	r1, r0
   22ec8:	4632      	mov	r2, r6
   22eca:	4856      	ldr	r0, [pc, #344]	; (23024 <handle_AT_HTTPC_CONNECT+0x2c0>)
   22ecc:	f015 fb07 	bl	384de <log_1>
	struct timeval timeo = {
   22ed0:	220a      	movs	r2, #10
   22ed2:	2300      	movs	r3, #0
   22ed4:	e9cd 2308 	strd	r2, r3, [sp, #32]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   22ed8:	2608      	movs	r6, #8
   22eda:	2215      	movs	r2, #21
   22edc:	2101      	movs	r1, #1
   22ede:	4620      	mov	r0, r4
   22ee0:	9600      	str	r6, [sp, #0]
   22ee2:	ab08      	add	r3, sp, #32
   22ee4:	f015 ffb8 	bl	38e58 <z_impl_zsock_setsockopt>
	if (err) {
   22ee8:	b1b0      	cbz	r0, 22f18 <handle_AT_HTTPC_CONNECT+0x1b4>
		LOG_WRN("Failed to set socket TX timeout, errno %d", errno);
   22eea:	f016 f9ec 	bl	392c6 <__errno>
   22eee:	f045 0602 	orr.w	r6, r5, #2
   22ef2:	4632      	mov	r2, r6
   22ef4:	6801      	ldr	r1, [r0, #0]
   22ef6:	484c      	ldr	r0, [pc, #304]	; (23028 <handle_AT_HTTPC_CONNECT+0x2c4>)
		LOG_WRN("Failed to set socket RX timeout, errno %d", errno);
   22ef8:	f015 faf1 	bl	384de <log_1>
		return -errno;
   22efc:	f016 f9e3 	bl	392c6 <__errno>
   22f00:	6806      	ldr	r6, [r0, #0]
   22f02:	4276      	negs	r6, r6
	if (err) {
   22f04:	b11e      	cbz	r6, 22f0e <handle_AT_HTTPC_CONNECT+0x1aa>
		close(httpc.fd);
   22f06:	6838      	ldr	r0, [r7, #0]
	return z_impl_zsock_close(sock);
   22f08:	f015 fedd 	bl	38cc6 <z_impl_zsock_close>
		return err;
   22f0c:	4634      	mov	r4, r6
		if (httpc.fd < 0) {
   22f0e:	2c00      	cmp	r4, #0
		httpc.fd = server_connect(httpc.host, httpc.sec_tag);
   22f10:	603c      	str	r4, [r7, #0]
		if (httpc.fd < 0) {
   22f12:	dbaa      	blt.n	22e6a <handle_AT_HTTPC_CONNECT+0x106>
			sprintf(rsp_buf, "#XHTTPCCON:1\r\n");
   22f14:	4945      	ldr	r1, [pc, #276]	; (2302c <handle_AT_HTTPC_CONNECT+0x2c8>)
   22f16:	e7b1      	b.n	22e7c <handle_AT_HTTPC_CONNECT+0x118>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   22f18:	2214      	movs	r2, #20
   22f1a:	2101      	movs	r1, #1
   22f1c:	4620      	mov	r0, r4
   22f1e:	9600      	str	r6, [sp, #0]
   22f20:	ab08      	add	r3, sp, #32
   22f22:	f015 ff99 	bl	38e58 <z_impl_zsock_setsockopt>
	if (err) {
   22f26:	2800      	cmp	r0, #0
   22f28:	d0f1      	beq.n	22f0e <handle_AT_HTTPC_CONNECT+0x1aa>
		LOG_WRN("Failed to set socket RX timeout, errno %d", errno);
   22f2a:	f016 f9cc 	bl	392c6 <__errno>
   22f2e:	f045 0602 	orr.w	r6, r5, #2
   22f32:	6801      	ldr	r1, [r0, #0]
   22f34:	4632      	mov	r2, r6
   22f36:	483e      	ldr	r0, [pc, #248]	; (23030 <handle_AT_HTTPC_CONNECT+0x2cc>)
   22f38:	e7de      	b.n	22ef8 <handle_AT_HTTPC_CONNECT+0x194>
		LOG_ERR("Already connected to server.");
   22f3a:	483e      	ldr	r0, [pc, #248]	; (23034 <handle_AT_HTTPC_CONNECT+0x2d0>)
   22f3c:	f045 0101 	orr.w	r1, r5, #1
   22f40:	f015 fabe 	bl	384c0 <log_0>
		return -EINVAL;
   22f44:	e71f      	b.n	22d86 <handle_AT_HTTPC_CONNECT+0x22>
		} else if (op == AT_HTTPCCON_DISCONNECT) {
   22f46:	2b00      	cmp	r3, #0
   22f48:	f47f af33 	bne.w	22db2 <handle_AT_HTTPC_CONNECT+0x4e>
			err = do_http_disconnect();
   22f4c:	f7ff fe0e 	bl	22b6c <do_http_disconnect>
			if (err) {
   22f50:	4604      	mov	r4, r0
   22f52:	2800      	cmp	r0, #0
   22f54:	f43f af2d 	beq.w	22db2 <handle_AT_HTTPC_CONNECT+0x4e>
   22f58:	4a24      	ldr	r2, [pc, #144]	; (22fec <handle_AT_HTTPC_CONNECT+0x288>)
   22f5a:	4b25      	ldr	r3, [pc, #148]	; (22ff0 <handle_AT_HTTPC_CONNECT+0x28c>)
				LOG_ERR("Fail to disconnect. Error: %d", err);
   22f5c:	4601      	mov	r1, r0
   22f5e:	1ad2      	subs	r2, r2, r3
   22f60:	08d2      	lsrs	r2, r2, #3
   22f62:	0192      	lsls	r2, r2, #6
   22f64:	4834      	ldr	r0, [pc, #208]	; (23038 <handle_AT_HTTPC_CONNECT+0x2d4>)
   22f66:	f042 0201 	orr.w	r2, r2, #1
   22f6a:	e720      	b.n	22dae <handle_AT_HTTPC_CONNECT+0x4a>
		if (httpc.sec_transport) {
   22f6c:	4b22      	ldr	r3, [pc, #136]	; (22ff8 <handle_AT_HTTPC_CONNECT+0x294>)
   22f6e:	681a      	ldr	r2, [r3, #0]
   22f70:	7919      	ldrb	r1, [r3, #4]
   22f72:	3201      	adds	r2, #1
   22f74:	bf18      	it	ne
   22f76:	2201      	movne	r2, #1
   22f78:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   22f7a:	f103 000c 	add.w	r0, r3, #12
   22f7e:	b199      	cbz	r1, 22fa8 <handle_AT_HTTPC_CONNECT+0x244>
			sprintf(rsp_buf, "#XHTTPCCON: %d,\"%s\",%d,%d\r\n",
   22f80:	689b      	ldr	r3, [r3, #8]
   22f82:	2100      	movs	r1, #0
   22f84:	e9cd 2000 	strd	r2, r0, [sp]
   22f88:	e9cd 4302 	strd	r4, r3, [sp, #8]
   22f8c:	f640 228c 	movw	r2, #2700	; 0xa8c
   22f90:	4b2a      	ldr	r3, [pc, #168]	; (2303c <handle_AT_HTTPC_CONNECT+0x2d8>)
   22f92:	4821      	ldr	r0, [pc, #132]	; (23018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   22f94:	f018 fb45 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   22f98:	481f      	ldr	r0, [pc, #124]	; (23018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   22f9a:	f7fa f869 	bl	1d070 <strlen>
   22f9e:	4601      	mov	r1, r0
   22fa0:	481d      	ldr	r0, [pc, #116]	; (23018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   22fa2:	f7fb f921 	bl	1e1e8 <rsp_send>
		break;
   22fa6:	e777      	b.n	22e98 <handle_AT_HTTPC_CONNECT+0x134>
			sprintf(rsp_buf, "#XHTTPCCON: %d,\"%s\",%d\r\n",
   22fa8:	e9cd 0401 	strd	r0, r4, [sp, #4]
   22fac:	9200      	str	r2, [sp, #0]
   22fae:	4b24      	ldr	r3, [pc, #144]	; (23040 <handle_AT_HTTPC_CONNECT+0x2dc>)
   22fb0:	f640 228c 	movw	r2, #2700	; 0xa8c
   22fb4:	4818      	ldr	r0, [pc, #96]	; (23018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   22fb6:	f018 fb34 	bl	3b622 <__sprintf_chk>
   22fba:	e7ed      	b.n	22f98 <handle_AT_HTTPC_CONNECT+0x234>
		sprintf(rsp_buf,
   22fbc:	2400      	movs	r4, #0
   22fbe:	2301      	movs	r3, #1
   22fc0:	4621      	mov	r1, r4
   22fc2:	f640 228c 	movw	r2, #2700	; 0xa8c
   22fc6:	e9cd 4300 	strd	r4, r3, [sp]
   22fca:	4813      	ldr	r0, [pc, #76]	; (23018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   22fcc:	4b1d      	ldr	r3, [pc, #116]	; (23044 <handle_AT_HTTPC_CONNECT+0x2e0>)
   22fce:	f018 fb28 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   22fd2:	4811      	ldr	r0, [pc, #68]	; (23018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   22fd4:	f7fa f84c 	bl	1d070 <strlen>
   22fd8:	4601      	mov	r1, r0
   22fda:	480f      	ldr	r0, [pc, #60]	; (23018 <handle_AT_HTTPC_CONNECT+0x2b4>)
   22fdc:	f7fb f904 	bl	1e1e8 <rsp_send>
		break;
   22fe0:	e6e7      	b.n	22db2 <handle_AT_HTTPC_CONNECT+0x4e>
				return -EINPROGRESS;
   22fe2:	f06f 0476 	mvn.w	r4, #118	; 0x76
   22fe6:	e6e4      	b.n	22db2 <handle_AT_HTTPC_CONNECT+0x4e>
   22fe8:	20023430 	.word	0x20023430
   22fec:	0003c344 	.word	0x0003c344
   22ff0:	0003c2cc 	.word	0x0003c2cc
   22ff4:	0003e4d4 	.word	0x0003e4d4
   22ff8:	200234e8 	.word	0x200234e8
   22ffc:	0003e4e7 	.word	0x0003e4e7
   23000:	0003e4fc 	.word	0x0003e4fc
   23004:	200234f0 	.word	0x200234f0
   23008:	0003e511 	.word	0x0003e511
   2300c:	0003e529 	.word	0x0003e529
   23010:	0003e5bb 	.word	0x0003e5bb
   23014:	0003e435 	.word	0x0003e435
   23018:	20028950 	.word	0x20028950
   2301c:	0003e53b 	.word	0x0003e53b
   23020:	200234f4 	.word	0x200234f4
   23024:	0003e557 	.word	0x0003e557
   23028:	0003e567 	.word	0x0003e567
   2302c:	0003e5d0 	.word	0x0003e5d0
   23030:	0003e591 	.word	0x0003e591
   23034:	0003e5df 	.word	0x0003e5df
   23038:	0003e45c 	.word	0x0003e45c
   2303c:	0003e5fc 	.word	0x0003e5fc
   23040:	0003e618 	.word	0x0003e618
   23044:	0003e631 	.word	0x0003e631

00023048 <slm_at_httpc_parse>:
{
   23048:	b570      	push	{r4, r5, r6, lr}
   2304a:	460e      	mov	r6, r1
		if (slm_util_cmd_casecmp(at_cmd, http_at_list[i].string)) {
   2304c:	4924      	ldr	r1, [pc, #144]	; (230e0 <slm_at_httpc_parse+0x98>)
{
   2304e:	4604      	mov	r4, r0
		if (slm_util_cmd_casecmp(at_cmd, http_at_list[i].string)) {
   23050:	f7fa ff64 	bl	1df1c <slm_util_cmd_casecmp>
   23054:	b9e8      	cbnz	r0, 23092 <slm_at_httpc_parse+0x4a>
   23056:	4620      	mov	r0, r4
   23058:	4922      	ldr	r1, [pc, #136]	; (230e4 <slm_at_httpc_parse+0x9c>)
   2305a:	f7fa ff5f 	bl	1df1c <slm_util_cmd_casecmp>
   2305e:	bb68      	cbnz	r0, 230bc <slm_at_httpc_parse+0x74>
	if (ret != -ENOENT || (httpc.pl_len == 0)) {
   23060:	4d21      	ldr	r5, [pc, #132]	; (230e8 <slm_at_httpc_parse+0xa0>)
   23062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   23064:	2b00      	cmp	r3, #0
   23066:	d037      	beq.n	230d8 <slm_at_httpc_parse+0x90>
	httpc.pl_sent = 0;
   23068:	2300      	movs	r3, #0
	httpc.payload = (char *)at_cmd;
   2306a:	662c      	str	r4, [r5, #96]	; 0x60
	httpc.pl_to_send = length;
   2306c:	66ae      	str	r6, [r5, #104]	; 0x68
	httpc.pl_sent = 0;
   2306e:	66eb      	str	r3, [r5, #108]	; 0x6c
   23070:	481e      	ldr	r0, [pc, #120]	; (230ec <slm_at_httpc_parse+0xa4>)
   23072:	f013 f943 	bl	362fc <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   23076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2307a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2307e:	481c      	ldr	r0, [pc, #112]	; (230f0 <slm_at_httpc_parse+0xa8>)
   23080:	f013 f962 	bl	36348 <z_impl_k_sem_take>
	if (httpc.pl_sent <= 0) {
   23084:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
		return -EINVAL;
   23086:	2b00      	cmp	r3, #0
   23088:	bfcc      	ite	gt
   2308a:	2000      	movgt	r0, #0
   2308c:	f06f 0015 	mvnle.w	r0, #21
   23090:	e013      	b.n	230ba <slm_at_httpc_parse+0x72>
	for (int i = 0; i < AT_HTTPC_MAX; i++) {
   23092:	2500      	movs	r5, #0
			ret = at_parser_params_from_str(at_cmd, NULL,
   23094:	2100      	movs	r1, #0
   23096:	4620      	mov	r0, r4
   23098:	4a16      	ldr	r2, [pc, #88]	; (230f4 <slm_at_httpc_parse+0xac>)
   2309a:	f017 fa94 	bl	3a5c6 <at_parser_params_from_str>
			if (ret) {
   2309e:	4601      	mov	r1, r0
   230a0:	b170      	cbz	r0, 230c0 <slm_at_httpc_parse+0x78>
   230a2:	4b15      	ldr	r3, [pc, #84]	; (230f8 <slm_at_httpc_parse+0xb0>)
   230a4:	4a15      	ldr	r2, [pc, #84]	; (230fc <slm_at_httpc_parse+0xb4>)
				LOG_ERR("Failed to parse AT command %d", ret);
   230a6:	4816      	ldr	r0, [pc, #88]	; (23100 <slm_at_httpc_parse+0xb8>)
   230a8:	1ad2      	subs	r2, r2, r3
   230aa:	08d2      	lsrs	r2, r2, #3
   230ac:	0192      	lsls	r2, r2, #6
   230ae:	f042 0201 	orr.w	r2, r2, #1
   230b2:	f015 fa14 	bl	384de <log_1>
				return -EINVAL;
   230b6:	f06f 0015 	mvn.w	r0, #21
}
   230ba:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < AT_HTTPC_MAX; i++) {
   230bc:	2501      	movs	r5, #1
   230be:	e7e9      	b.n	23094 <slm_at_httpc_parse+0x4c>
			type = at_parser_cmd_type_get(at_cmd);
   230c0:	4620      	mov	r0, r4
   230c2:	f017 fa83 	bl	3a5cc <at_parser_cmd_type_get>
			ret = http_at_list[i].handler(type);
   230c6:	220c      	movs	r2, #12
   230c8:	4b0e      	ldr	r3, [pc, #56]	; (23104 <slm_at_httpc_parse+0xbc>)
   230ca:	fb02 3505 	mla	r5, r2, r5, r3
   230ce:	68ab      	ldr	r3, [r5, #8]
   230d0:	4798      	blx	r3
	if (ret != -ENOENT || (httpc.pl_len == 0)) {
   230d2:	1c83      	adds	r3, r0, #2
   230d4:	d1f1      	bne.n	230ba <slm_at_httpc_parse+0x72>
   230d6:	e7c3      	b.n	23060 <slm_at_httpc_parse+0x18>
   230d8:	f06f 0001 	mvn.w	r0, #1
   230dc:	e7ed      	b.n	230ba <slm_at_httpc_parse+0x72>
   230de:	bf00      	nop
   230e0:	0003e660 	.word	0x0003e660
   230e4:	0003e66d 	.word	0x0003e66d
   230e8:	200234e8 	.word	0x200234e8
   230ec:	20020894 	.word	0x20020894
   230f0:	2002087c 	.word	0x2002087c
   230f4:	20023430 	.word	0x20023430
   230f8:	0003c2cc 	.word	0x0003c2cc
   230fc:	0003c344 	.word	0x0003c344
   23100:	0003d35e 	.word	0x0003d35e
   23104:	0003c600 	.word	0x0003c600

00023108 <slm_at_httpc_init>:
	}
}

int slm_at_httpc_init(void)
{
	httpc.fd = INVALID_SOCKET;
   23108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2310c:	4b01      	ldr	r3, [pc, #4]	; (23114 <slm_at_httpc_init+0xc>)

	return 0;
}
   2310e:	2000      	movs	r0, #0
	httpc.fd = INVALID_SOCKET;
   23110:	601a      	str	r2, [r3, #0]
}
   23112:	4770      	bx	lr
   23114:	200234e8 	.word	0x200234e8

00023118 <slm_at_httpc_uninit>:

int slm_at_httpc_uninit(void)
{
	int err = 0;

	if (httpc.fd != INVALID_SOCKET) {
   23118:	4b0b      	ldr	r3, [pc, #44]	; (23148 <slm_at_httpc_uninit+0x30>)
{
   2311a:	b510      	push	{r4, lr}
	if (httpc.fd != INVALID_SOCKET) {
   2311c:	681b      	ldr	r3, [r3, #0]
   2311e:	3301      	adds	r3, #1
   23120:	d010      	beq.n	23144 <slm_at_httpc_uninit+0x2c>
		err = do_http_disconnect();
   23122:	f7ff fd23 	bl	22b6c <do_http_disconnect>
		if (err != 0) {
   23126:	4604      	mov	r4, r0
   23128:	b150      	cbz	r0, 23140 <slm_at_httpc_uninit+0x28>
   2312a:	4a08      	ldr	r2, [pc, #32]	; (2314c <slm_at_httpc_uninit+0x34>)
   2312c:	4b08      	ldr	r3, [pc, #32]	; (23150 <slm_at_httpc_uninit+0x38>)
			LOG_ERR("Fail to disconnect. Error: %d", err);
   2312e:	4601      	mov	r1, r0
   23130:	1ad2      	subs	r2, r2, r3
   23132:	08d2      	lsrs	r2, r2, #3
   23134:	0192      	lsls	r2, r2, #6
   23136:	4807      	ldr	r0, [pc, #28]	; (23154 <slm_at_httpc_uninit+0x3c>)
   23138:	f042 0201 	orr.w	r2, r2, #1
   2313c:	f015 f9cf 	bl	384de <log_1>
		}
	}

	return err;
}
   23140:	4620      	mov	r0, r4
   23142:	bd10      	pop	{r4, pc}
	int err = 0;
   23144:	2400      	movs	r4, #0
	return err;
   23146:	e7fb      	b.n	23140 <slm_at_httpc_uninit+0x28>
   23148:	200234e8 	.word	0x200234e8
   2314c:	0003c344 	.word	0x0003c344
   23150:	0003c2cc 	.word	0x0003c2cc
   23154:	0003e45c 	.word	0x0003e45c

00023158 <slm_at_httpc_clac>:

/**@brief API to list HTTP AT commands
 */
void slm_at_httpc_clac(void)
{
   23158:	b513      	push	{r0, r1, r4, lr}
	for (int i = 0; i < AT_HTTPC_MAX; i++) {
		sprintf(rsp_buf, "%s\r\n", http_at_list[i].string);
   2315a:	4a12      	ldr	r2, [pc, #72]	; (231a4 <slm_at_httpc_clac+0x4c>)
   2315c:	4c12      	ldr	r4, [pc, #72]	; (231a8 <slm_at_httpc_clac+0x50>)
   2315e:	4b13      	ldr	r3, [pc, #76]	; (231ac <slm_at_httpc_clac+0x54>)
   23160:	2100      	movs	r1, #0
   23162:	9200      	str	r2, [sp, #0]
   23164:	4620      	mov	r0, r4
   23166:	f640 228c 	movw	r2, #2700	; 0xa8c
   2316a:	f018 fa5a 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   2316e:	4620      	mov	r0, r4
   23170:	f7f9 ff7e 	bl	1d070 <strlen>
   23174:	4601      	mov	r1, r0
   23176:	4620      	mov	r0, r4
   23178:	f7fb f836 	bl	1e1e8 <rsp_send>
		sprintf(rsp_buf, "%s\r\n", http_at_list[i].string);
   2317c:	4a0c      	ldr	r2, [pc, #48]	; (231b0 <slm_at_httpc_clac+0x58>)
   2317e:	2100      	movs	r1, #0
   23180:	4b0a      	ldr	r3, [pc, #40]	; (231ac <slm_at_httpc_clac+0x54>)
   23182:	9200      	str	r2, [sp, #0]
   23184:	4620      	mov	r0, r4
   23186:	f640 228c 	movw	r2, #2700	; 0xa8c
   2318a:	f018 fa4a 	bl	3b622 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   2318e:	4620      	mov	r0, r4
   23190:	f7f9 ff6e 	bl	1d070 <strlen>
   23194:	4601      	mov	r1, r0
   23196:	4620      	mov	r0, r4
	}
}
   23198:	b002      	add	sp, #8
   2319a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rsp_send(rsp_buf, strlen(rsp_buf));
   2319e:	f7fb b823 	b.w	1e1e8 <rsp_send>
   231a2:	bf00      	nop
   231a4:	0003e660 	.word	0x0003e660
   231a8:	20028950 	.word	0x20028950
   231ac:	0003d557 	.word	0x0003d557
   231b0:	0003e66d 	.word	0x0003e66d

000231b4 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   231b4:	2807      	cmp	r0, #7
{
   231b6:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   231b8:	d906      	bls.n	231c8 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   231ba:	f016 f884 	bl	392c6 <__errno>
   231be:	2309      	movs	r3, #9
   231c0:	6003      	str	r3, [r0, #0]
   231c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   231c6:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   231c8:	220c      	movs	r2, #12
   231ca:	4b05      	ldr	r3, [pc, #20]	; (231e0 <_check_fd+0x2c>)
   231cc:	fb02 3000 	mla	r0, r2, r0, r3
   231d0:	3008      	adds	r0, #8
   231d2:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   231d6:	2b00      	cmp	r3, #0
   231d8:	d0ef      	beq.n	231ba <_check_fd+0x6>
	return 0;
   231da:	2000      	movs	r0, #0
   231dc:	e7f3      	b.n	231c6 <_check_fd+0x12>
   231de:	bf00      	nop
   231e0:	2002355c 	.word	0x2002355c

000231e4 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   231e4:	b570      	push	{r4, r5, r6, lr}
   231e6:	4604      	mov	r4, r0
   231e8:	460d      	mov	r5, r1
   231ea:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   231ec:	f7ff ffe2 	bl	231b4 <_check_fd>
   231f0:	2800      	cmp	r0, #0
   231f2:	db0a      	blt.n	2320a <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   231f4:	4a08      	ldr	r2, [pc, #32]	; (23218 <z_get_fd_obj+0x34>)
   231f6:	b155      	cbz	r5, 2320e <z_get_fd_obj+0x2a>
   231f8:	230c      	movs	r3, #12
   231fa:	fb03 2304 	mla	r3, r3, r4, r2
   231fe:	685b      	ldr	r3, [r3, #4]
   23200:	42ab      	cmp	r3, r5
   23202:	d004      	beq.n	2320e <z_get_fd_obj+0x2a>
		errno = err;
   23204:	f016 f85f 	bl	392c6 <__errno>
   23208:	6006      	str	r6, [r0, #0]
		return NULL;
   2320a:	2000      	movs	r0, #0
   2320c:	e002      	b.n	23214 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   2320e:	200c      	movs	r0, #12
   23210:	4344      	muls	r4, r0
   23212:	5910      	ldr	r0, [r2, r4]
}
   23214:	bd70      	pop	{r4, r5, r6, pc}
   23216:	bf00      	nop
   23218:	2002355c 	.word	0x2002355c

0002321c <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   2321c:	b538      	push	{r3, r4, r5, lr}
   2321e:	4605      	mov	r5, r0
   23220:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   23222:	f7ff ffc7 	bl	231b4 <_check_fd>
   23226:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   23228:	bfa3      	ittte	ge
   2322a:	230c      	movge	r3, #12
   2322c:	fb03 f005 	mulge.w	r0, r3, r5
   23230:	4a03      	ldrge	r2, [pc, #12]	; (23240 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   23232:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   23234:	bfa1      	itttt	ge
   23236:	1813      	addge	r3, r2, r0
   23238:	685b      	ldrge	r3, [r3, #4]
   2323a:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
   2323c:	5810      	ldrge	r0, [r2, r0]
}
   2323e:	bd38      	pop	{r3, r4, r5, pc}
   23240:	2002355c 	.word	0x2002355c

00023244 <z_reserve_fd>:

int z_reserve_fd(void)
{
   23244:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   23246:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   23248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2324c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23250:	4812      	ldr	r0, [pc, #72]	; (2329c <z_reserve_fd+0x58>)
   23252:	f012 fbb1 	bl	359b8 <z_impl_k_mutex_lock>
   23256:	4b12      	ldr	r3, [pc, #72]	; (232a0 <z_reserve_fd+0x5c>)
   23258:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   2325c:	b17a      	cbz	r2, 2327e <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   2325e:	3401      	adds	r4, #1
   23260:	2c08      	cmp	r4, #8
   23262:	f103 030c 	add.w	r3, r3, #12
   23266:	d1f7      	bne.n	23258 <z_reserve_fd+0x14>
	errno = ENFILE;
   23268:	f016 f82d 	bl	392c6 <__errno>
   2326c:	2317      	movs	r3, #23
	return -1;
   2326e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   23272:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   23274:	4809      	ldr	r0, [pc, #36]	; (2329c <z_reserve_fd+0x58>)
   23276:	f012 fc17 	bl	35aa8 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   2327a:	4620      	mov	r0, r4
   2327c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2327e:	e8d3 1fef 	ldaex	r1, [r3]
   23282:	3101      	adds	r1, #1
   23284:	e8c3 1fe0 	stlex	r0, r1, [r3]
   23288:	2800      	cmp	r0, #0
   2328a:	d1f8      	bne.n	2327e <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   2328c:	230c      	movs	r3, #12
   2328e:	4363      	muls	r3, r4
   23290:	4904      	ldr	r1, [pc, #16]	; (232a4 <z_reserve_fd+0x60>)
   23292:	18c8      	adds	r0, r1, r3
   23294:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   23296:	6042      	str	r2, [r0, #4]
   23298:	e7ec      	b.n	23274 <z_reserve_fd+0x30>
   2329a:	bf00      	nop
   2329c:	200207b0 	.word	0x200207b0
   232a0:	20023564 	.word	0x20023564
   232a4:	2002355c 	.word	0x2002355c

000232a8 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   232a8:	230c      	movs	r3, #12
{
   232aa:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   232ac:	4358      	muls	r0, r3
   232ae:	4c02      	ldr	r4, [pc, #8]	; (232b8 <z_finalize_fd+0x10>)
   232b0:	1823      	adds	r3, r4, r0
   232b2:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   232b4:	605a      	str	r2, [r3, #4]
}
   232b6:	bd10      	pop	{r4, pc}
   232b8:	2002355c 	.word	0x2002355c

000232bc <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   232bc:	230c      	movs	r3, #12
   232be:	4a0e      	ldr	r2, [pc, #56]	; (232f8 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   232c0:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   232c2:	fb03 2300 	mla	r3, r3, r0, r2
   232c6:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   232c8:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   232cc:	b191      	cbz	r1, 232f4 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   232ce:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   232d0:	e8d3 5fef 	ldaex	r5, [r3]
   232d4:	428d      	cmp	r5, r1
   232d6:	d104      	bne.n	232e2 <z_free_fd+0x26>
   232d8:	e8c3 4fec 	stlex	ip, r4, [r3]
   232dc:	f1bc 0f00 	cmp.w	ip, #0
   232e0:	d1f6      	bne.n	232d0 <z_free_fd+0x14>
   232e2:	d1f1      	bne.n	232c8 <z_free_fd+0xc>
	if (old_rc != 1) {
   232e4:	2901      	cmp	r1, #1
   232e6:	d105      	bne.n	232f4 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   232e8:	230c      	movs	r3, #12
   232ea:	4358      	muls	r0, r3
   232ec:	2300      	movs	r3, #0
   232ee:	1811      	adds	r1, r2, r0
   232f0:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   232f2:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   232f4:	bd30      	pop	{r4, r5, pc}
   232f6:	bf00      	nop
   232f8:	2002355c 	.word	0x2002355c

000232fc <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
   232fc:	4b01      	ldr	r3, [pc, #4]	; (23304 <__printk_hook_install+0x8>)
   232fe:	6018      	str	r0, [r3, #0]
}
   23300:	4770      	bx	lr
   23302:	bf00      	nop
   23304:	200200e0 	.word	0x200200e0

00023308 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   23308:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   2330a:	2500      	movs	r5, #0
{
   2330c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   2330e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   23312:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   23314:	a901      	add	r1, sp, #4
   23316:	4805      	ldr	r0, [pc, #20]	; (2332c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   23318:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   2331a:	f000 fac1 	bl	238a0 <cbvprintf>

	if (ctx.count < ctx.max) {
   2331e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   23322:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   23324:	bfb8      	it	lt
   23326:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   23328:	b005      	add	sp, #20
   2332a:	bd30      	pop	{r4, r5, pc}
   2332c:	00037bb7 	.word	0x00037bb7

00023330 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   23330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   23334:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   23338:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2333a:	f019 0808 	ands.w	r8, r9, #8
{
   2333e:	4693      	mov	fp, r2
	if (processing) {
   23340:	d00e      	beq.n	23360 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
   23342:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   23344:	bf0c      	ite	eq
   23346:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   2334a:	f049 0920 	orrne.w	r9, r9, #32
   2334e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   23352:	f38b 8811 	msr	BASEPRI, fp
   23356:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   2335a:	b003      	add	sp, #12
   2335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
   23360:	f8df a198 	ldr.w	sl, [pc, #408]	; 234fc <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   23364:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   23368:	2902      	cmp	r1, #2
   2336a:	d107      	bne.n	2337c <process_event+0x4c>
			evt = process_recheck(mgr);
   2336c:	4620      	mov	r0, r4
   2336e:	f014 fc4f 	bl	37c10 <process_recheck>
		if (evt == EVT_NOP) {
   23372:	2800      	cmp	r0, #0
   23374:	d0ed      	beq.n	23352 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   23376:	2801      	cmp	r0, #1
   23378:	8b23      	ldrh	r3, [r4, #24]
   2337a:	d14d      	bne.n	23418 <process_event+0xe8>
			res = mgr->last_res;
   2337c:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2337e:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   23380:	2f00      	cmp	r7, #0
   23382:	da15      	bge.n	233b0 <process_event+0x80>
		*clients = mgr->clients;
   23384:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23386:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   2338a:	e9c4 8800 	strd	r8, r8, [r4]
   2338e:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   23392:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   23394:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   23396:	8b21      	ldrh	r1, [r4, #24]
   23398:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2339c:	454a      	cmp	r2, r9
   2339e:	d002      	beq.n	233a6 <process_event+0x76>
		if (do_monitors
   233a0:	68a3      	ldr	r3, [r4, #8]
   233a2:	2b00      	cmp	r3, #0
   233a4:	d159      	bne.n	2345a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   233a6:	b90d      	cbnz	r5, 233ac <process_event+0x7c>
		    || (transit != NULL)) {
   233a8:	2e00      	cmp	r6, #0
   233aa:	d071      	beq.n	23490 <process_event+0x160>
   233ac:	2300      	movs	r3, #0
   233ae:	e055      	b.n	2345c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   233b0:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   233b4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   233b6:	2a01      	cmp	r2, #1
   233b8:	d81f      	bhi.n	233fa <process_event+0xca>
		*clients = mgr->clients;
   233ba:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   233be:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   233c0:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   233c2:	b289      	uxth	r1, r1
	list->tail = NULL;
   233c4:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   233c8:	d10c      	bne.n	233e4 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   233ca:	2d00      	cmp	r5, #0
   233cc:	462b      	mov	r3, r5
   233ce:	bf38      	it	cc
   233d0:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   233d2:	b12b      	cbz	r3, 233e0 <process_event+0xb0>
				mgr->refs += 1U;
   233d4:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   233d6:	681b      	ldr	r3, [r3, #0]
   233d8:	3201      	adds	r2, #1
   233da:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   233dc:	2b00      	cmp	r3, #0
   233de:	d1f8      	bne.n	233d2 <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   233e0:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   233e4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   233e6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   233e8:	f014 fc12 	bl	37c10 <process_recheck>
   233ec:	2800      	cmp	r0, #0
   233ee:	d0d1      	beq.n	23394 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   233f0:	8b23      	ldrh	r3, [r4, #24]
   233f2:	f043 0320 	orr.w	r3, r3, #32
   233f6:	8323      	strh	r3, [r4, #24]
   233f8:	e7cc      	b.n	23394 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
   233fa:	2b04      	cmp	r3, #4
   233fc:	d10a      	bne.n	23414 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   233fe:	f021 0107 	bic.w	r1, r1, #7
   23402:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   23404:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   23406:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   23408:	f014 fc02 	bl	37c10 <process_recheck>
   2340c:	b110      	cbz	r0, 23414 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2340e:	f041 0120 	orr.w	r1, r1, #32
   23412:	8321      	strh	r1, [r4, #24]
   23414:	2500      	movs	r5, #0
   23416:	e7bd      	b.n	23394 <process_event+0x64>
		} else if (evt == EVT_START) {
   23418:	2803      	cmp	r0, #3
   2341a:	d109      	bne.n	23430 <process_event+0x100>
			transit = mgr->transitions->start;
   2341c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2341e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   23422:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23424:	f043 0306 	orr.w	r3, r3, #6
}
   23428:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   2342a:	8323      	strh	r3, [r4, #24]
		res = 0;
   2342c:	462f      	mov	r7, r5
   2342e:	e7b2      	b.n	23396 <process_event+0x66>
		} else if (evt == EVT_STOP) {
   23430:	2804      	cmp	r0, #4
   23432:	d106      	bne.n	23442 <process_event+0x112>
			transit = mgr->transitions->stop;
   23434:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23436:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   2343a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2343c:	f043 0304 	orr.w	r3, r3, #4
   23440:	e7f2      	b.n	23428 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   23442:	2805      	cmp	r0, #5
   23444:	d106      	bne.n	23454 <process_event+0x124>
			transit = mgr->transitions->reset;
   23446:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23448:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   2344c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2344e:	f043 0305 	orr.w	r3, r3, #5
   23452:	e7e9      	b.n	23428 <process_event+0xf8>
   23454:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   23456:	462e      	mov	r6, r5
   23458:	e7e8      	b.n	2342c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   2345a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2345c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   23460:	8321      	strh	r1, [r4, #24]
   23462:	f38b 8811 	msr	BASEPRI, fp
   23466:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   2346a:	bb03      	cbnz	r3, 234ae <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   2346c:	2d00      	cmp	r5, #0
   2346e:	d134      	bne.n	234da <process_event+0x1aa>
			if (transit != NULL) {
   23470:	b116      	cbz	r6, 23478 <process_event+0x148>
				transit(mgr, transition_complete);
   23472:	4651      	mov	r1, sl
   23474:	4620      	mov	r0, r4
   23476:	47b0      	blx	r6
	__asm__ volatile(
   23478:	f04f 0320 	mov.w	r3, #32
   2347c:	f3ef 8b11 	mrs	fp, BASEPRI
   23480:	f383 8811 	msr	BASEPRI, r3
   23484:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   23488:	8b23      	ldrh	r3, [r4, #24]
   2348a:	f023 0308 	bic.w	r3, r3, #8
   2348e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   23490:	8b23      	ldrh	r3, [r4, #24]
   23492:	06da      	lsls	r2, r3, #27
   23494:	d52a      	bpl.n	234ec <process_event+0x1bc>
			evt = EVT_COMPLETE;
   23496:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   23498:	f023 0310 	bic.w	r3, r3, #16
   2349c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   2349e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   234a2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   234a6:	2900      	cmp	r1, #0
   234a8:	f47f af5e 	bne.w	23368 <process_event+0x38>
out:
   234ac:	e751      	b.n	23352 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   234ae:	68a1      	ldr	r1, [r4, #8]
   234b0:	2900      	cmp	r1, #0
   234b2:	d0db      	beq.n	2346c <process_event+0x13c>
	return node->next;
   234b4:	680b      	ldr	r3, [r1, #0]
   234b6:	2b00      	cmp	r3, #0
   234b8:	bf38      	it	cc
   234ba:	2300      	movcc	r3, #0
   234bc:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   234be:	4620      	mov	r0, r4
   234c0:	463b      	mov	r3, r7
   234c2:	f8d1 b004 	ldr.w	fp, [r1, #4]
   234c6:	9201      	str	r2, [sp, #4]
   234c8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   234ca:	9a01      	ldr	r2, [sp, #4]
   234cc:	f1b9 0f00 	cmp.w	r9, #0
   234d0:	d0cc      	beq.n	2346c <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   234d2:	4649      	mov	r1, r9
   234d4:	f8d9 3000 	ldr.w	r3, [r9]
   234d8:	e7ed      	b.n	234b6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   234da:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   234dc:	463b      	mov	r3, r7
   234de:	4620      	mov	r0, r4
   234e0:	9201      	str	r2, [sp, #4]
   234e2:	682d      	ldr	r5, [r5, #0]
   234e4:	f014 fbb0 	bl	37c48 <notify_one>
	while (!sys_slist_is_empty(list)) {
   234e8:	9a01      	ldr	r2, [sp, #4]
   234ea:	e7bf      	b.n	2346c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   234ec:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   234f0:	bf1e      	ittt	ne
   234f2:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   234f6:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   234f8:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   234fa:	e7d0      	b.n	2349e <process_event+0x16e>
   234fc:	00037c75 	.word	0x00037c75

00023500 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   23500:	b5f0      	push	{r4, r5, r6, r7, lr}
   23502:	4602      	mov	r2, r0
   23504:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   23506:	270a      	movs	r7, #10
	size_t val = 0;
   23508:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   2350a:	4e07      	ldr	r6, [pc, #28]	; (23528 <extract_decimal+0x28>)
   2350c:	460c      	mov	r4, r1
   2350e:	7823      	ldrb	r3, [r4, #0]
   23510:	3101      	adds	r1, #1
   23512:	5d9d      	ldrb	r5, [r3, r6]
   23514:	076d      	lsls	r5, r5, #29
   23516:	d401      	bmi.n	2351c <extract_decimal+0x1c>
	}
	*str = sp;
   23518:	6014      	str	r4, [r2, #0]
	return val;
}
   2351a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   2351c:	fb07 3300 	mla	r3, r7, r0, r3
   23520:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   23524:	e7f2      	b.n	2350c <extract_decimal+0xc>
   23526:	bf00      	nop
   23528:	000409c7 	.word	0x000409c7

0002352c <extract_conversion>:
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
	*conv = (struct conversion) {
   2352c:	2300      	movs	r3, #0
{
   2352e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	*conv = (struct conversion) {
   23530:	e9c0 3300 	strd	r3, r3, [r0]
   23534:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   23536:	784b      	ldrb	r3, [r1, #1]
{
   23538:	4604      	mov	r4, r0
	if (*sp == '%') {
   2353a:	2b25      	cmp	r3, #37	; 0x25
   2353c:	d040      	beq.n	235c0 <extract_conversion+0x94>
	++sp;
   2353e:	3101      	adds	r1, #1
   23540:	460d      	mov	r5, r1
		switch (*sp) {
   23542:	f811 3b01 	ldrb.w	r3, [r1], #1
   23546:	2b2b      	cmp	r3, #43	; 0x2b
   23548:	d04b      	beq.n	235e2 <extract_conversion+0xb6>
   2354a:	d83d      	bhi.n	235c8 <extract_conversion+0x9c>
   2354c:	2b20      	cmp	r3, #32
   2354e:	d04c      	beq.n	235ea <extract_conversion+0xbe>
   23550:	2b23      	cmp	r3, #35	; 0x23
   23552:	d04e      	beq.n	235f2 <extract_conversion+0xc6>
	if (conv->flag_zero && conv->flag_dash) {
   23554:	7823      	ldrb	r3, [r4, #0]
   23556:	f003 0244 	and.w	r2, r3, #68	; 0x44
   2355a:	2a44      	cmp	r2, #68	; 0x44
   2355c:	d102      	bne.n	23564 <extract_conversion+0x38>
		conv->flag_zero = false;
   2355e:	f36f 1386 	bfc	r3, #6, #1
   23562:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
   23564:	782b      	ldrb	r3, [r5, #0]
   23566:	9501      	str	r5, [sp, #4]
   23568:	2b2a      	cmp	r3, #42	; 0x2a
   2356a:	d146      	bne.n	235fa <extract_conversion+0xce>
		conv->width_present = true;
   2356c:	8823      	ldrh	r3, [r4, #0]
   2356e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
   23572:	8023      	strh	r3, [r4, #0]
		return ++sp;
   23574:	1c6b      	adds	r3, r5, #1
		return sp;
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
	sp = extract_prec(conv, sp);
   23576:	9301      	str	r3, [sp, #4]
	if (*sp != '.') {
   23578:	781a      	ldrb	r2, [r3, #0]
   2357a:	2a2e      	cmp	r2, #46	; 0x2e
   2357c:	d10b      	bne.n	23596 <extract_conversion+0x6a>
   2357e:	1c5d      	adds	r5, r3, #1
	++sp;
   23580:	9501      	str	r5, [sp, #4]
	if (*sp == '*') {
   23582:	785a      	ldrb	r2, [r3, #1]
   23584:	2a2a      	cmp	r2, #42	; 0x2a
   23586:	d144      	bne.n	23612 <extract_conversion+0xe6>
		conv->prec_present = true;
   23588:	7862      	ldrb	r2, [r4, #1]
		return ++sp;
   2358a:	3302      	adds	r3, #2
		conv->prec_present = true;
   2358c:	f022 0206 	bic.w	r2, r2, #6
   23590:	f042 0206 	orr.w	r2, r2, #6
   23594:	7062      	strb	r2, [r4, #1]
	switch (*sp) {
   23596:	4619      	mov	r1, r3
   23598:	f811 0b01 	ldrb.w	r0, [r1], #1
   2359c:	286c      	cmp	r0, #108	; 0x6c
   2359e:	f000 8087 	beq.w	236b0 <extract_conversion+0x184>
   235a2:	d842      	bhi.n	2362a <extract_conversion+0xfe>
   235a4:	2868      	cmp	r0, #104	; 0x68
   235a6:	d048      	beq.n	2363a <extract_conversion+0x10e>
   235a8:	286a      	cmp	r0, #106	; 0x6a
   235aa:	f000 808a 	beq.w	236c2 <extract_conversion+0x196>
   235ae:	284c      	cmp	r0, #76	; 0x4c
   235b0:	f000 808d 	beq.w	236ce <extract_conversion+0x1a2>
		conv->length_mod = LENGTH_NONE;
   235b4:	7862      	ldrb	r2, [r4, #1]
		break;
   235b6:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   235b8:	f36f 02c6 	bfc	r2, #3, #4
   235bc:	7062      	strb	r2, [r4, #1]
		break;
   235be:	e045      	b.n	2364c <extract_conversion+0x120>
		conv->specifier = *sp++;
   235c0:	1c88      	adds	r0, r1, #2
   235c2:	70e3      	strb	r3, [r4, #3]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   235c4:	b003      	add	sp, #12
   235c6:	bd30      	pop	{r4, r5, pc}
		switch (*sp) {
   235c8:	2b2d      	cmp	r3, #45	; 0x2d
   235ca:	d005      	beq.n	235d8 <extract_conversion+0xac>
   235cc:	2b30      	cmp	r3, #48	; 0x30
   235ce:	d1c1      	bne.n	23554 <extract_conversion+0x28>
			conv->flag_zero = true;
   235d0:	7823      	ldrb	r3, [r4, #0]
   235d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   235d6:	e002      	b.n	235de <extract_conversion+0xb2>
			conv->flag_dash = true;
   235d8:	7823      	ldrb	r3, [r4, #0]
   235da:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   235de:	7023      	strb	r3, [r4, #0]
			break;
   235e0:	e7ae      	b.n	23540 <extract_conversion+0x14>
			conv->flag_plus = true;
   235e2:	7823      	ldrb	r3, [r4, #0]
   235e4:	f043 0308 	orr.w	r3, r3, #8
   235e8:	e7f9      	b.n	235de <extract_conversion+0xb2>
			conv->flag_space = true;
   235ea:	7823      	ldrb	r3, [r4, #0]
   235ec:	f043 0310 	orr.w	r3, r3, #16
   235f0:	e7f5      	b.n	235de <extract_conversion+0xb2>
			conv->flag_hash = true;
   235f2:	7823      	ldrb	r3, [r4, #0]
   235f4:	f043 0320 	orr.w	r3, r3, #32
   235f8:	e7f1      	b.n	235de <extract_conversion+0xb2>
	size_t width = extract_decimal(&sp);
   235fa:	a801      	add	r0, sp, #4
   235fc:	f7ff ff80 	bl	23500 <extract_decimal>
	if (sp != wp) {
   23600:	9b01      	ldr	r3, [sp, #4]
   23602:	42ab      	cmp	r3, r5
		conv->width_present = true;
   23604:	bf1f      	itttt	ne
   23606:	7822      	ldrbne	r2, [r4, #0]
		conv->width_value = width;
   23608:	6060      	strne	r0, [r4, #4]
		conv->width_present = true;
   2360a:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
   2360e:	7022      	strbne	r2, [r4, #0]
		if (width != conv->width_value) {
   23610:	e7b1      	b.n	23576 <extract_conversion+0x4a>
	size_t prec = extract_decimal(&sp);
   23612:	a801      	add	r0, sp, #4
   23614:	f7ff ff74 	bl	23500 <extract_decimal>
	if (sp != wp) {
   23618:	9b01      	ldr	r3, [sp, #4]
   2361a:	429d      	cmp	r5, r3
		conv->prec_present = true;
   2361c:	bf1f      	itttt	ne
   2361e:	7862      	ldrbne	r2, [r4, #1]
		conv->prec_value = prec;
   23620:	60a0      	strne	r0, [r4, #8]
		conv->prec_present = true;
   23622:	f042 0202 	orrne.w	r2, r2, #2
   23626:	7062      	strbne	r2, [r4, #1]
		if (prec != conv->prec_value) {
   23628:	e7b5      	b.n	23596 <extract_conversion+0x6a>
	switch (*sp) {
   2362a:	2874      	cmp	r0, #116	; 0x74
   2362c:	7862      	ldrb	r2, [r4, #1]
   2362e:	d04b      	beq.n	236c8 <extract_conversion+0x19c>
   23630:	287a      	cmp	r0, #122	; 0x7a
   23632:	d1bf      	bne.n	235b4 <extract_conversion+0x88>
		conv->length_mod = LENGTH_Z;
   23634:	4613      	mov	r3, r2
   23636:	2206      	movs	r2, #6
   23638:	e036      	b.n	236a8 <extract_conversion+0x17c>
		if (*++sp == 'h') {
   2363a:	785a      	ldrb	r2, [r3, #1]
   2363c:	2a68      	cmp	r2, #104	; 0x68
   2363e:	7862      	ldrb	r2, [r4, #1]
   23640:	d130      	bne.n	236a4 <extract_conversion+0x178>
			conv->length_mod = LENGTH_HH;
   23642:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   23644:	f361 02c6 	bfi	r2, r1, #3, #4
   23648:	7062      	strb	r2, [r4, #1]
			++sp;
   2364a:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   2364c:	4608      	mov	r0, r1
   2364e:	f810 2b01 	ldrb.w	r2, [r0], #1
	switch (conv->specifier) {
   23652:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   23654:	70e2      	strb	r2, [r4, #3]
	switch (conv->specifier) {
   23656:	f200 80b2 	bhi.w	237be <extract_conversion+0x292>
   2365a:	2a57      	cmp	r2, #87	; 0x57
   2365c:	d842      	bhi.n	236e4 <extract_conversion+0x1b8>
   2365e:	2a41      	cmp	r2, #65	; 0x41
   23660:	d004      	beq.n	2366c <extract_conversion+0x140>
   23662:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   23666:	2b02      	cmp	r3, #2
   23668:	f200 80a9 	bhi.w	237be <extract_conversion+0x292>
		conv->specifier_cat = SPECIFIER_FP;
   2366c:	2104      	movs	r1, #4
   2366e:	78a3      	ldrb	r3, [r4, #2]
			|| (conv->specifier == 'A');
   23670:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   23674:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   23678:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   2367c:	424a      	negs	r2, r1
   2367e:	414a      	adcs	r2, r1
		conv->specifier_a = (conv->specifier == 'a')
   23680:	7861      	ldrb	r1, [r4, #1]
		conv->specifier_cat = SPECIFIER_FP;
   23682:	70a3      	strb	r3, [r4, #2]
		conv->specifier_a = (conv->specifier == 'a')
   23684:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   23688:	060d      	lsls	r5, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   2368a:	7061      	strb	r1, [r4, #1]
		if (conv->specifier_a
   2368c:	b2cb      	uxtb	r3, r1
   2368e:	f100 80b4 	bmi.w	237fa <extract_conversion+0x2ce>
		if (conv->length_mod == LENGTH_L) {
   23692:	f003 0278 	and.w	r2, r3, #120	; 0x78
   23696:	2a18      	cmp	r2, #24
   23698:	f040 808e 	bne.w	237b8 <extract_conversion+0x28c>
			conv->length_mod = LENGTH_NONE;
   2369c:	f36f 03c6 	bfc	r3, #3, #4
   236a0:	7063      	strb	r3, [r4, #1]
   236a2:	e079      	b.n	23798 <extract_conversion+0x26c>
			conv->length_mod = LENGTH_H;
   236a4:	4613      	mov	r3, r2
   236a6:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   236a8:	f362 03c6 	bfi	r3, r2, #3, #4
   236ac:	7063      	strb	r3, [r4, #1]
   236ae:	e7cd      	b.n	2364c <extract_conversion+0x120>
		if (*++sp == 'l') {
   236b0:	785a      	ldrb	r2, [r3, #1]
   236b2:	2a6c      	cmp	r2, #108	; 0x6c
   236b4:	7862      	ldrb	r2, [r4, #1]
   236b6:	d101      	bne.n	236bc <extract_conversion+0x190>
			conv->length_mod = LENGTH_LL;
   236b8:	2104      	movs	r1, #4
   236ba:	e7c3      	b.n	23644 <extract_conversion+0x118>
			conv->length_mod = LENGTH_L;
   236bc:	4613      	mov	r3, r2
   236be:	2203      	movs	r2, #3
   236c0:	e7f2      	b.n	236a8 <extract_conversion+0x17c>
		conv->length_mod = LENGTH_J;
   236c2:	2205      	movs	r2, #5
   236c4:	7863      	ldrb	r3, [r4, #1]
   236c6:	e7ef      	b.n	236a8 <extract_conversion+0x17c>
		conv->length_mod = LENGTH_T;
   236c8:	4613      	mov	r3, r2
   236ca:	2207      	movs	r2, #7
   236cc:	e7ec      	b.n	236a8 <extract_conversion+0x17c>
		conv->unsupported = true;
   236ce:	8823      	ldrh	r3, [r4, #0]
   236d0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   236d4:	f023 0302 	bic.w	r3, r3, #2
   236d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   236dc:	f043 0302 	orr.w	r3, r3, #2
   236e0:	8023      	strh	r3, [r4, #0]
		break;
   236e2:	e7b3      	b.n	2364c <extract_conversion+0x120>
   236e4:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   236e8:	2b20      	cmp	r3, #32
   236ea:	d868      	bhi.n	237be <extract_conversion+0x292>
   236ec:	a101      	add	r1, pc, #4	; (adr r1, 236f4 <extract_conversion+0x1c8>)
   236ee:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   236f2:	bf00      	nop
   236f4:	0002379d 	.word	0x0002379d
   236f8:	000237bf 	.word	0x000237bf
   236fc:	000237bf 	.word	0x000237bf
   23700:	000237bf 	.word	0x000237bf
   23704:	000237bf 	.word	0x000237bf
   23708:	000237bf 	.word	0x000237bf
   2370c:	000237bf 	.word	0x000237bf
   23710:	000237bf 	.word	0x000237bf
   23714:	000237bf 	.word	0x000237bf
   23718:	0002366d 	.word	0x0002366d
   2371c:	000237bf 	.word	0x000237bf
   23720:	0002379d 	.word	0x0002379d
   23724:	00023779 	.word	0x00023779
   23728:	0002366d 	.word	0x0002366d
   2372c:	0002366d 	.word	0x0002366d
   23730:	0002366d 	.word	0x0002366d
   23734:	000237bf 	.word	0x000237bf
   23738:	00023779 	.word	0x00023779
   2373c:	000237bf 	.word	0x000237bf
   23740:	000237bf 	.word	0x000237bf
   23744:	000237bf 	.word	0x000237bf
   23748:	000237bf 	.word	0x000237bf
   2374c:	000237c9 	.word	0x000237c9
   23750:	0002379d 	.word	0x0002379d
   23754:	000237e3 	.word	0x000237e3
   23758:	000237bf 	.word	0x000237bf
   2375c:	000237bf 	.word	0x000237bf
   23760:	000237e3 	.word	0x000237e3
   23764:	000237bf 	.word	0x000237bf
   23768:	0002379d 	.word	0x0002379d
   2376c:	000237bf 	.word	0x000237bf
   23770:	000237bf 	.word	0x000237bf
   23774:	0002379d 	.word	0x0002379d
		conv->specifier_cat = SPECIFIER_SINT;
   23778:	2101      	movs	r1, #1
   2377a:	78a3      	ldrb	r3, [r4, #2]
		conv->specifier_cat = SPECIFIER_UINT;
   2377c:	f361 0302 	bfi	r3, r1, #0, #3
   23780:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   23782:	7863      	ldrb	r3, [r4, #1]
   23784:	f003 0378 	and.w	r3, r3, #120	; 0x78
   23788:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   2378a:	bf02      	ittt	eq
   2378c:	7821      	ldrbeq	r1, [r4, #0]
   2378e:	f041 0101 	orreq.w	r1, r1, #1
   23792:	7021      	strbeq	r1, [r4, #0]
		if (conv->specifier == 'c') {
   23794:	2a63      	cmp	r2, #99	; 0x63
   23796:	d004      	beq.n	237a2 <extract_conversion+0x276>
	bool unsupported = false;
   23798:	2300      	movs	r3, #0
   2379a:	e005      	b.n	237a8 <extract_conversion+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
   2379c:	2102      	movs	r1, #2
   2379e:	78a3      	ldrb	r3, [r4, #2]
   237a0:	e7ec      	b.n	2377c <extract_conversion+0x250>
			unsupported = (conv->length_mod != LENGTH_NONE);
   237a2:	3b00      	subs	r3, #0
   237a4:	bf18      	it	ne
   237a6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   237a8:	7822      	ldrb	r2, [r4, #0]
   237aa:	f3c2 0140 	ubfx	r1, r2, #1, #1
   237ae:	430b      	orrs	r3, r1
   237b0:	f363 0241 	bfi	r2, r3, #1, #1
   237b4:	7022      	strb	r2, [r4, #0]
	return sp;
   237b6:	e705      	b.n	235c4 <extract_conversion+0x98>
		} else if ((conv->length_mod != LENGTH_NONE)
   237b8:	f013 0f38 	tst.w	r3, #56	; 0x38
   237bc:	d0ec      	beq.n	23798 <extract_conversion+0x26c>
			conv->invalid = true;
   237be:	7823      	ldrb	r3, [r4, #0]
   237c0:	f043 0301 	orr.w	r3, r3, #1
   237c4:	7023      	strb	r3, [r4, #0]
   237c6:	e7e7      	b.n	23798 <extract_conversion+0x26c>
		conv->specifier_cat = SPECIFIER_PTR;
   237c8:	2203      	movs	r2, #3
   237ca:	78a3      	ldrb	r3, [r4, #2]
   237cc:	f362 0302 	bfi	r3, r2, #0, #3
   237d0:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   237d2:	7863      	ldrb	r3, [r4, #1]
   237d4:	f003 0378 	and.w	r3, r3, #120	; 0x78
   237d8:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   237dc:	4253      	negs	r3, r2
   237de:	4153      	adcs	r3, r2
   237e0:	e7e2      	b.n	237a8 <extract_conversion+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
   237e2:	2203      	movs	r2, #3
   237e4:	78a3      	ldrb	r3, [r4, #2]
   237e6:	f362 0302 	bfi	r3, r2, #0, #3
   237ea:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
   237ec:	7863      	ldrb	r3, [r4, #1]
   237ee:	f013 0f78 	tst.w	r3, #120	; 0x78
   237f2:	bf14      	ite	ne
   237f4:	2301      	movne	r3, #1
   237f6:	2300      	moveq	r3, #0
   237f8:	e7d6      	b.n	237a8 <extract_conversion+0x27c>
			unsupported = true;
   237fa:	2301      	movs	r3, #1
   237fc:	e7d4      	b.n	237a8 <extract_conversion+0x27c>
   237fe:	bf00      	nop

00023800 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   23800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23804:	4614      	mov	r4, r2
   23806:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   23808:	78d3      	ldrb	r3, [r2, #3]
   2380a:	4a24      	ldr	r2, [pc, #144]	; (2389c <encode_uint+0x9c>)
	switch (specifier) {
   2380c:	2b6f      	cmp	r3, #111	; 0x6f
   2380e:	f813 a002 	ldrb.w	sl, [r3, r2]
{
   23812:	4606      	mov	r6, r0
   23814:	f00a 0203 	and.w	r2, sl, #3
   23818:	460f      	mov	r7, r1
   2381a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   2381c:	d02d      	beq.n	2387a <encode_uint+0x7a>
   2381e:	d828      	bhi.n	23872 <encode_uint+0x72>
		return 16;
   23820:	2b58      	cmp	r3, #88	; 0x58
   23822:	bf14      	ite	ne
   23824:	250a      	movne	r5, #10
   23826:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   23828:	46aa      	mov	sl, r5
   2382a:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   2382e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   23832:	4652      	mov	r2, sl
   23834:	465b      	mov	r3, fp
   23836:	4630      	mov	r0, r6
   23838:	4639      	mov	r1, r7
   2383a:	f7f8 ffbd 	bl	1c7b8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   2383e:	2a09      	cmp	r2, #9
   23840:	b2d3      	uxtb	r3, r2
   23842:	d81f      	bhi.n	23884 <encode_uint+0x84>
   23844:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   23846:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23848:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   2384a:	bf08      	it	eq
   2384c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2384e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   23852:	d301      	bcc.n	23858 <encode_uint+0x58>
   23854:	45c8      	cmp	r8, r9
   23856:	d812      	bhi.n	2387e <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   23858:	7823      	ldrb	r3, [r4, #0]
   2385a:	069b      	lsls	r3, r3, #26
   2385c:	d505      	bpl.n	2386a <encode_uint+0x6a>
		if (radix == 8) {
   2385e:	2d08      	cmp	r5, #8
   23860:	d116      	bne.n	23890 <encode_uint+0x90>
			conv->altform_0 = true;
   23862:	78a3      	ldrb	r3, [r4, #2]
   23864:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   23868:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
   2386a:	4640      	mov	r0, r8
   2386c:	b003      	add	sp, #12
   2386e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   23872:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   23876:	2b70      	cmp	r3, #112	; 0x70
   23878:	e7d3      	b.n	23822 <encode_uint+0x22>
	switch (specifier) {
   2387a:	2508      	movs	r5, #8
   2387c:	e7d4      	b.n	23828 <encode_uint+0x28>
		value /= radix;
   2387e:	4606      	mov	r6, r0
   23880:	460f      	mov	r7, r1
   23882:	e7d6      	b.n	23832 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23884:	9a01      	ldr	r2, [sp, #4]
   23886:	2a01      	cmp	r2, #1
   23888:	bf0c      	ite	eq
   2388a:	3337      	addeq	r3, #55	; 0x37
   2388c:	3357      	addne	r3, #87	; 0x57
   2388e:	e7da      	b.n	23846 <encode_uint+0x46>
		} else if (radix == 16) {
   23890:	2d10      	cmp	r5, #16
   23892:	d1ea      	bne.n	2386a <encode_uint+0x6a>
			conv->altform_0c = true;
   23894:	78a3      	ldrb	r3, [r4, #2]
   23896:	f043 0310 	orr.w	r3, r3, #16
   2389a:	e7e5      	b.n	23868 <encode_uint+0x68>
   2389c:	000409c7 	.word	0x000409c7

000238a0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   238a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238a4:	468a      	mov	sl, r1
   238a6:	4614      	mov	r4, r2
   238a8:	469b      	mov	fp, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   238aa:	f04f 0900 	mov.w	r9, #0
{
   238ae:	b0a1      	sub	sp, #132	; 0x84
   238b0:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   238b2:	7820      	ldrb	r0, [r4, #0]
   238b4:	b908      	cbnz	r0, 238ba <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   238b6:	4648      	mov	r0, r9
   238b8:	e189      	b.n	23bce <cbvprintf+0x32e>
		if (*fp != '%') {
   238ba:	2825      	cmp	r0, #37	; 0x25
   238bc:	d00a      	beq.n	238d4 <cbvprintf+0x34>
			OUTC(*fp++);
   238be:	4651      	mov	r1, sl
   238c0:	9b03      	ldr	r3, [sp, #12]
   238c2:	4798      	blx	r3
   238c4:	2800      	cmp	r0, #0
   238c6:	f2c0 8182 	blt.w	23bce <cbvprintf+0x32e>
   238ca:	1c63      	adds	r3, r4, #1
   238cc:	930b      	str	r3, [sp, #44]	; 0x2c
			OUTC('%');
   238ce:	f109 0901 	add.w	r9, r9, #1
		if (bps == NULL) {
   238d2:	e067      	b.n	239a4 <cbvprintf+0x104>
		fp = extract_conversion(&conv, sp);
   238d4:	4621      	mov	r1, r4
   238d6:	a816      	add	r0, sp, #88	; 0x58
   238d8:	f7ff fe28 	bl	2352c <extract_conversion>
		if (conv.width_star) {
   238dc:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
		fp = extract_conversion(&conv, sp);
   238e0:	900b      	str	r0, [sp, #44]	; 0x2c
		if (conv.width_star) {
   238e2:	07d8      	lsls	r0, r3, #31
   238e4:	d51c      	bpl.n	23920 <cbvprintf+0x80>
			width = va_arg(ap, int);
   238e6:	f85b 2b04 	ldr.w	r2, [fp], #4
			if (width < 0) {
   238ea:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
   238ec:	920a      	str	r2, [sp, #40]	; 0x28
			if (width < 0) {
   238ee:	da08      	bge.n	23902 <cbvprintf+0x62>
				conv.flag_dash = true;
   238f0:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   238f4:	f042 0204 	orr.w	r2, r2, #4
   238f8:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
				width = -width;
   238fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   238fe:	4252      	negs	r2, r2
		int width = -1;
   23900:	920a      	str	r2, [sp, #40]	; 0x28
		if (conv.prec_star) {
   23902:	0759      	lsls	r1, r3, #29
   23904:	d514      	bpl.n	23930 <cbvprintf+0x90>
			int arg = va_arg(ap, int);
   23906:	f85b 5b04 	ldr.w	r5, [fp], #4
			if (arg < 0) {
   2390a:	2d00      	cmp	r5, #0
   2390c:	da13      	bge.n	23936 <cbvprintf+0x96>
				conv.prec_present = false;
   2390e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   23912:	f36f 0341 	bfc	r3, #1, #1
   23916:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
   2391a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2391e:	e00a      	b.n	23936 <cbvprintf+0x96>
		} else if (conv.width_present) {
   23920:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   23924:	2a00      	cmp	r2, #0
		int width = -1;
   23926:	bfac      	ite	ge
   23928:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
			width = conv.width_value;
   2392c:	9a17      	ldrlt	r2, [sp, #92]	; 0x5c
   2392e:	e7e7      	b.n	23900 <cbvprintf+0x60>
		} else if (conv.prec_present) {
   23930:	079a      	lsls	r2, r3, #30
   23932:	d5f2      	bpl.n	2391a <cbvprintf+0x7a>
			precision = conv.prec_value;
   23934:	9d18      	ldr	r5, [sp, #96]	; 0x60
		conv.pad0_value = 0;
   23936:	2300      	movs	r3, #0
		conv.pad0_pre_exp = 0;
   23938:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv.specifier_cat == SPECIFIER_FP)
   2393c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   23940:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   23944:	f003 0307 	and.w	r3, r3, #7
   23948:	2b04      	cmp	r3, #4
   2394a:	d107      	bne.n	2395c <cbvprintf+0xbc>
		    && !conv.prec_present) {
   2394c:	0793      	lsls	r3, r2, #30
   2394e:	d405      	bmi.n	2395c <cbvprintf+0xbc>
			if (conv.specifier_a) {
   23950:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
   23954:	2b00      	cmp	r3, #0
   23956:	bfb4      	ite	lt
   23958:	250d      	movlt	r5, #13
   2395a:	2506      	movge	r5, #6
			= (enum specifier_cat_enum)conv.specifier_cat;
   2395c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		union argument_value value = (union argument_value){
   23960:	2000      	movs	r0, #0
		enum specifier_cat_enum specifier_cat
   23962:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   23966:	2b01      	cmp	r3, #1
		union argument_value value = (union argument_value){
   23968:	f04f 0100 	mov.w	r1, #0
			= (enum length_mod_enum)conv.length_mod;
   2396c:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   23970:	d126      	bne.n	239c0 <cbvprintf+0x120>
			switch (length_mod) {
   23972:	1ed3      	subs	r3, r2, #3
   23974:	2b04      	cmp	r3, #4
   23976:	d817      	bhi.n	239a8 <cbvprintf+0x108>
   23978:	e8df f003 	tbb	[pc, r3]
   2397c:	16323203 	.word	0x16323203
   23980:	16          	.byte	0x16
   23981:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
   23982:	f85b 0b04 	ldr.w	r0, [fp], #4
				value.sint = (short)value.sint;
   23986:	17c1      	asrs	r1, r0, #31
		if (conv.invalid || conv.unsupported) {
   23988:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
   2398c:	07b7      	lsls	r7, r6, #30
   2398e:	d047      	beq.n	23a20 <cbvprintf+0x180>
			OUTS(sp, fp);
   23990:	4622      	mov	r2, r4
   23992:	4651      	mov	r1, sl
   23994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23996:	9803      	ldr	r0, [sp, #12]
   23998:	f014 fc9f 	bl	382da <outs>
   2399c:	2800      	cmp	r0, #0
   2399e:	f2c0 8116 	blt.w	23bce <cbvprintf+0x32e>
   239a2:	4481      	add	r9, r0
			continue;
   239a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   239a6:	e784      	b.n	238b2 <cbvprintf+0x12>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   239a8:	f85b 0b04 	ldr.w	r0, [fp], #4
			if (length_mod == LENGTH_HH) {
   239ac:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   239ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
			if (length_mod == LENGTH_HH) {
   239b2:	d101      	bne.n	239b8 <cbvprintf+0x118>
				value.uint = (unsigned char)value.uint;
   239b4:	b2c6      	uxtb	r6, r0
   239b6:	e00f      	b.n	239d8 <cbvprintf+0x138>
			} else if (length_mod == LENGTH_H) {
   239b8:	2a02      	cmp	r2, #2
   239ba:	d1e5      	bne.n	23988 <cbvprintf+0xe8>
				value.sint = (short)value.sint;
   239bc:	b200      	sxth	r0, r0
   239be:	e7e2      	b.n	23986 <cbvprintf+0xe6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   239c0:	2b02      	cmp	r3, #2
   239c2:	d11f      	bne.n	23a04 <cbvprintf+0x164>
			switch (length_mod) {
   239c4:	1ed3      	subs	r3, r2, #3
   239c6:	2b04      	cmp	r3, #4
   239c8:	d811      	bhi.n	239ee <cbvprintf+0x14e>
   239ca:	e8df f003 	tbb	[pc, r3]
   239ce:	0903      	.short	0x0903
   239d0:	1009      	.short	0x1009
   239d2:	10          	.byte	0x10
   239d3:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
   239d4:	f85b 6b04 	ldr.w	r6, [fp], #4
				value.uint = (unsigned short)value.uint;
   239d8:	2300      	movs	r3, #0
   239da:	4630      	mov	r0, r6
   239dc:	4619      	mov	r1, r3
   239de:	e7d3      	b.n	23988 <cbvprintf+0xe8>
					(uint_value_type)va_arg(ap,
   239e0:	f10b 0b07 	add.w	fp, fp, #7
   239e4:	f02b 0b07 	bic.w	fp, fp, #7
				value.uint =
   239e8:	e8fb 0102 	ldrd	r0, r1, [fp], #8
				break;
   239ec:	e7cc      	b.n	23988 <cbvprintf+0xe8>
				value.uint =
   239ee:	2300      	movs	r3, #0
   239f0:	f85b 6b04 	ldr.w	r6, [fp], #4
			if (length_mod == LENGTH_HH) {
   239f4:	2a01      	cmp	r2, #1
				value.uint =
   239f6:	4630      	mov	r0, r6
   239f8:	4619      	mov	r1, r3
			if (length_mod == LENGTH_HH) {
   239fa:	d0db      	beq.n	239b4 <cbvprintf+0x114>
			} else if (length_mod == LENGTH_H) {
   239fc:	2a02      	cmp	r2, #2
   239fe:	d1c3      	bne.n	23988 <cbvprintf+0xe8>
				value.uint = (unsigned short)value.uint;
   23a00:	b2b6      	uxth	r6, r6
   23a02:	e7e9      	b.n	239d8 <cbvprintf+0x138>
		} else if (specifier_cat == SPECIFIER_FP) {
   23a04:	2b04      	cmp	r3, #4
   23a06:	d106      	bne.n	23a16 <cbvprintf+0x176>
			if (length_mod == LENGTH_UPPER_L) {
   23a08:	f10b 0b07 	add.w	fp, fp, #7
   23a0c:	f02b 0b07 	bic.w	fp, fp, #7
   23a10:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   23a14:	e7b8      	b.n	23988 <cbvprintf+0xe8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   23a16:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
   23a18:	bf08      	it	eq
   23a1a:	f85b 0b04 	ldreq.w	r0, [fp], #4
   23a1e:	e7b3      	b.n	23988 <cbvprintf+0xe8>
		switch (conv.specifier) {
   23a20:	f89d 705b 	ldrb.w	r7, [sp, #91]	; 0x5b
   23a24:	2f78      	cmp	r7, #120	; 0x78
   23a26:	d8bd      	bhi.n	239a4 <cbvprintf+0x104>
   23a28:	2f57      	cmp	r7, #87	; 0x57
   23a2a:	d87f      	bhi.n	23b2c <cbvprintf+0x28c>
   23a2c:	2f25      	cmp	r7, #37	; 0x25
   23a2e:	f000 80c7 	beq.w	23bc0 <cbvprintf+0x320>
   23a32:	2f24      	cmp	r7, #36	; 0x24
   23a34:	d9b6      	bls.n	239a4 <cbvprintf+0x104>
   23a36:	2f41      	cmp	r7, #65	; 0x41
   23a38:	d003      	beq.n	23a42 <cbvprintf+0x1a2>
   23a3a:	f1a7 0345 	sub.w	r3, r7, #69	; 0x45
   23a3e:	2b02      	cmp	r3, #2
   23a40:	d8b0      	bhi.n	239a4 <cbvprintf+0x104>
	if ((u.u64 & SIGN_MASK) != 0U) {
   23a42:	2800      	cmp	r0, #0
   23a44:	f171 0300 	sbcs.w	r3, r1, #0
   23a48:	f2c0 815c 	blt.w	23d04 <cbvprintf+0x464>
	} else if (conv->flag_plus) {
   23a4c:	0732      	lsls	r2, r6, #28
   23a4e:	f100 815b 	bmi.w	23d08 <cbvprintf+0x468>
		*sign = ' ';
   23a52:	f016 0610 	ands.w	r6, r6, #16
   23a56:	bf18      	it	ne
   23a58:	2620      	movne	r6, #32
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   23a5a:	f3c1 0313 	ubfx	r3, r1, #0, #20
   23a5e:	9006      	str	r0, [sp, #24]
   23a60:	9307      	str	r3, [sp, #28]
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   23a62:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   23a66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   23a6a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (exp == 0) && (fract != 0);
   23a6e:	2c00      	cmp	r4, #0
   23a70:	f040 814c 	bne.w	23d0c <cbvprintf+0x46c>
   23a74:	4603      	mov	r3, r0
   23a76:	9a07      	ldr	r2, [sp, #28]
   23a78:	4313      	orrs	r3, r2
   23a7a:	bf14      	ite	ne
   23a7c:	f04f 0c01 	movne.w	ip, #1
   23a80:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
   23a84:	9907      	ldr	r1, [sp, #28]
		c = 'f';
   23a86:	2f46      	cmp	r7, #70	; 0x46
	fract <<= EXPONENT_BITS;
   23a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   23a8c:	9906      	ldr	r1, [sp, #24]
		c = 'f';
   23a8e:	bf08      	it	eq
   23a90:	2766      	moveq	r7, #102	; 0x66
	fract <<= EXPONENT_BITS;
   23a92:	02ca      	lsls	r2, r1, #11
   23a94:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
   23a98:	ea44 0102 	orr.w	r1, r4, r2
   23a9c:	910c      	str	r1, [sp, #48]	; 0x30
   23a9e:	17e1      	asrs	r1, r4, #31
   23aa0:	4319      	orrs	r1, r3
   23aa2:	910d      	str	r1, [sp, #52]	; 0x34
   23aa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   23aa8:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
   23aaa:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((exp | fract) != 0) {
   23aae:	f000 81d1 	beq.w	23e54 <cbvprintf+0x5b4>
		if (is_subnormal) {
   23ab2:	f1bc 0f00 	cmp.w	ip, #0
   23ab6:	f040 815f 	bne.w	23d78 <cbvprintf+0x4d8>
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   23aba:	f2a4 38fe 	subw	r8, r4, #1022	; 0x3fe
		fract |= BIT_63;
   23abe:	2400      	movs	r4, #0
   23ac0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   23ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   23ac6:	9313      	str	r3, [sp, #76]	; 0x4c
	while (exp <= -3) {
   23ac8:	f118 0f02 	cmn.w	r8, #2
   23acc:	f2c0 8160 	blt.w	23d90 <cbvprintf+0x4f0>
	while (exp > 0) {
   23ad0:	f1b8 0f00 	cmp.w	r8, #0
   23ad4:	f300 8198 	bgt.w	23e08 <cbvprintf+0x568>
		_rlrshift(&fract);
   23ad8:	a812      	add	r0, sp, #72	; 0x48
		exp++;
   23ada:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   23ade:	f014 fbb3 	bl	38248 <_rlrshift>
	while (exp < (0 + 4)) {
   23ae2:	f1b8 0f04 	cmp.w	r8, #4
   23ae6:	d1f7      	bne.n	23ad8 <cbvprintf+0x238>
	if ((c == 'g') || (c == 'G')) {
   23ae8:	f007 03df 	and.w	r3, r7, #223	; 0xdf
   23aec:	2b47      	cmp	r3, #71	; 0x47
   23aee:	f040 81b7 	bne.w	23e60 <cbvprintf+0x5c0>
		if (decexp < (-4 + 1) || decexp > precision) {
   23af2:	1ce3      	adds	r3, r4, #3
   23af4:	db02      	blt.n	23afc <cbvprintf+0x25c>
   23af6:	42ac      	cmp	r4, r5
   23af8:	f340 81af 	ble.w	23e5a <cbvprintf+0x5ba>
			c += 'e' - 'g';  /* e or E */
   23afc:	3f02      	subs	r7, #2
			if (precision > 0) {
   23afe:	2d00      	cmp	r5, #0
			c += 'e' - 'g';  /* e or E */
   23b00:	b2ff      	uxtb	r7, r7
			if (precision > 0) {
   23b02:	dd00      	ble.n	23b06 <cbvprintf+0x266>
				precision--;
   23b04:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
   23b06:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   23b0a:	0698      	lsls	r0, r3, #26
   23b0c:	f100 81a8 	bmi.w	23e60 <cbvprintf+0x5c0>
   23b10:	2d00      	cmp	r5, #0
   23b12:	bfd4      	ite	le
   23b14:	2300      	movle	r3, #0
   23b16:	2301      	movgt	r3, #1
	if (c == 'f') {
   23b18:	2f66      	cmp	r7, #102	; 0x66
	bool prune_zero = false;
   23b1a:	9304      	str	r3, [sp, #16]
	if (c == 'f') {
   23b1c:	f040 81a2 	bne.w	23e64 <cbvprintf+0x5c4>
		if (exp < 0) {
   23b20:	1961      	adds	r1, r4, r5
   23b22:	f140 81a0 	bpl.w	23e66 <cbvprintf+0x5c6>
			exp = 0;
   23b26:	f04f 0800 	mov.w	r8, #0
   23b2a:	e1a0      	b.n	23e6e <cbvprintf+0x5ce>
   23b2c:	f1a7 0358 	sub.w	r3, r7, #88	; 0x58
   23b30:	2b20      	cmp	r3, #32
   23b32:	f63f af37 	bhi.w	239a4 <cbvprintf+0x104>
   23b36:	a401      	add	r4, pc, #4	; (adr r4, 23b3c <cbvprintf+0x29c>)
   23b38:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
   23b3c:	00023ca3 	.word	0x00023ca3
   23b40:	000239a5 	.word	0x000239a5
   23b44:	000239a5 	.word	0x000239a5
   23b48:	000239a5 	.word	0x000239a5
   23b4c:	000239a5 	.word	0x000239a5
   23b50:	000239a5 	.word	0x000239a5
   23b54:	000239a5 	.word	0x000239a5
   23b58:	000239a5 	.word	0x000239a5
   23b5c:	000239a5 	.word	0x000239a5
   23b60:	00023a43 	.word	0x00023a43
   23b64:	000239a5 	.word	0x000239a5
   23b68:	00023bef 	.word	0x00023bef
   23b6c:	00023c51 	.word	0x00023c51
   23b70:	00023a43 	.word	0x00023a43
   23b74:	00023a43 	.word	0x00023a43
   23b78:	00023a43 	.word	0x00023a43
   23b7c:	000239a5 	.word	0x000239a5
   23b80:	00023c51 	.word	0x00023c51
   23b84:	000239a5 	.word	0x000239a5
   23b88:	000239a5 	.word	0x000239a5
   23b8c:	000239a5 	.word	0x000239a5
   23b90:	000239a5 	.word	0x000239a5
   23b94:	00023cd7 	.word	0x00023cd7
   23b98:	00023ca3 	.word	0x00023ca3
   23b9c:	00023ca7 	.word	0x00023ca7
   23ba0:	000239a5 	.word	0x000239a5
   23ba4:	000239a5 	.word	0x000239a5
   23ba8:	00023bd5 	.word	0x00023bd5
   23bac:	000239a5 	.word	0x000239a5
   23bb0:	00023ca3 	.word	0x00023ca3
   23bb4:	000239a5 	.word	0x000239a5
   23bb8:	000239a5 	.word	0x000239a5
   23bbc:	00023ca3 	.word	0x00023ca3
			OUTC('%');
   23bc0:	4651      	mov	r1, sl
   23bc2:	4638      	mov	r0, r7
   23bc4:	9b03      	ldr	r3, [sp, #12]
   23bc6:	4798      	blx	r3
   23bc8:	2800      	cmp	r0, #0
   23bca:	f6bf ae80 	bge.w	238ce <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
   23bce:	b021      	add	sp, #132	; 0x84
   23bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bps = (const char *)value.ptr;
   23bd4:	4604      	mov	r4, r0
			size_t len = strlen(bps);
   23bd6:	f7f9 fa4b 	bl	1d070 <strlen>
			if ((precision >= 0)
   23bda:	2d00      	cmp	r5, #0
   23bdc:	db02      	blt.n	23be4 <cbvprintf+0x344>
   23bde:	42a8      	cmp	r0, r5
   23be0:	bf28      	it	cs
   23be2:	4628      	movcs	r0, r5
		char sign = 0;
   23be4:	2600      	movs	r6, #0
			bpe = bps + len;
   23be6:	eb04 0800 	add.w	r8, r4, r0
		if (bps == NULL) {
   23bea:	b934      	cbnz	r4, 23bfa <cbvprintf+0x35a>
   23bec:	e6da      	b.n	239a4 <cbvprintf+0x104>
		char sign = 0;
   23bee:	2600      	movs	r6, #0
			buf[0] = value.uint;
   23bf0:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
			bpe = buf + 1;
   23bf4:	f10d 0865 	add.w	r8, sp, #101	; 0x65
				bps = encode_float(value.dbl, &conv, precision,
   23bf8:	ac19      	add	r4, sp, #100	; 0x64
		size_t nj_len = (bpe - bps);
   23bfa:	eba8 0704 	sub.w	r7, r8, r4
		if (sign != 0) {
   23bfe:	b106      	cbz	r6, 23c02 <cbvprintf+0x362>
			nj_len += 1U;
   23c00:	3701      	adds	r7, #1
		if (conv.altform_0c) {
   23c02:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   23c06:	06cb      	lsls	r3, r1, #27
   23c08:	f140 820a 	bpl.w	24020 <cbvprintf+0x780>
			nj_len += 2U;
   23c0c:	3702      	adds	r7, #2
		nj_len += conv.pad0_value;
   23c0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
		if (conv.pad_fp) {
   23c10:	0648      	lsls	r0, r1, #25
		nj_len += conv.pad0_value;
   23c12:	4417      	add	r7, r2
		if (width > 0) {
   23c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			nj_len += conv.pad0_pre_exp;
   23c16:	bf44      	itt	mi
   23c18:	9a18      	ldrmi	r2, [sp, #96]	; 0x60
   23c1a:	18bf      	addmi	r7, r7, r2
		if (width > 0) {
   23c1c:	2b00      	cmp	r3, #0
   23c1e:	f340 8212 	ble.w	24046 <cbvprintf+0x7a6>
			if (!conv.flag_dash) {
   23c22:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
			width -= (int)nj_len;
   23c26:	1bdf      	subs	r7, r3, r7
			if (!conv.flag_dash) {
   23c28:	0751      	lsls	r1, r2, #29
   23c2a:	f3c2 0580 	ubfx	r5, r2, #2, #1
   23c2e:	f100 8249 	bmi.w	240c4 <cbvprintf+0x824>
				if (conv.flag_zero) {
   23c32:	0653      	lsls	r3, r2, #25
   23c34:	f140 8242 	bpl.w	240bc <cbvprintf+0x81c>
					if (sign != 0) {
   23c38:	b146      	cbz	r6, 23c4c <cbvprintf+0x3ac>
						OUTC(sign);
   23c3a:	4651      	mov	r1, sl
   23c3c:	4630      	mov	r0, r6
   23c3e:	9b03      	ldr	r3, [sp, #12]
   23c40:	4798      	blx	r3
   23c42:	2800      	cmp	r0, #0
   23c44:	dbc3      	blt.n	23bce <cbvprintf+0x32e>
						sign = 0;
   23c46:	462e      	mov	r6, r5
						OUTC(sign);
   23c48:	f109 0901 	add.w	r9, r9, #1
					pad = '0';
   23c4c:	2530      	movs	r5, #48	; 0x30
   23c4e:	e236      	b.n	240be <cbvprintf+0x81e>
			if (conv.flag_plus) {
   23c50:	0734      	lsls	r4, r6, #28
   23c52:	d424      	bmi.n	23c9e <cbvprintf+0x3fe>
				sign = ' ';
   23c54:	f016 0610 	ands.w	r6, r6, #16
   23c58:	bf18      	it	ne
   23c5a:	2620      	movne	r6, #32
			if (value.sint < 0) {
   23c5c:	2800      	cmp	r0, #0
   23c5e:	f171 0300 	sbcs.w	r3, r1, #0
   23c62:	da03      	bge.n	23c6c <cbvprintf+0x3cc>
				sign = '-';
   23c64:	262d      	movs	r6, #45	; 0x2d
				value.uint = -value.sint;
   23c66:	4240      	negs	r0, r0
   23c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
			bps = encode_uint(value.uint, &conv, buf, bpe);
   23c6c:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   23c70:	9300      	str	r3, [sp, #0]
   23c72:	aa16      	add	r2, sp, #88	; 0x58
   23c74:	ab19      	add	r3, sp, #100	; 0x64
   23c76:	f7ff fdc3 	bl	23800 <encode_uint>
   23c7a:	4604      	mov	r4, r0
			if (precision >= 0) {
   23c7c:	2d00      	cmp	r5, #0
   23c7e:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   23c82:	db0a      	blt.n	23c9a <cbvprintf+0x3fa>
				conv.flag_zero = false;
   23c84:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
   23c88:	1b1a      	subs	r2, r3, r4
				conv.flag_zero = false;
   23c8a:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   23c8e:	4295      	cmp	r5, r2
				conv.flag_zero = false;
   23c90:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
   23c94:	d901      	bls.n	23c9a <cbvprintf+0x3fa>
					conv.pad0_value = precision - (int)len;
   23c96:	1aad      	subs	r5, r5, r2
   23c98:	9517      	str	r5, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
   23c9a:	4698      	mov	r8, r3
   23c9c:	e7a5      	b.n	23bea <cbvprintf+0x34a>
				sign = '+';
   23c9e:	262b      	movs	r6, #43	; 0x2b
   23ca0:	e7dc      	b.n	23c5c <cbvprintf+0x3bc>
		switch (conv.specifier) {
   23ca2:	2600      	movs	r6, #0
   23ca4:	e7e2      	b.n	23c6c <cbvprintf+0x3cc>
			if (value.ptr != NULL) {
   23ca6:	2800      	cmp	r0, #0
   23ca8:	f000 81b4 	beq.w	24014 <cbvprintf+0x774>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   23cac:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
   23cb0:	9300      	str	r3, [sp, #0]
   23cb2:	2100      	movs	r1, #0
   23cb4:	ab19      	add	r3, sp, #100	; 0x64
   23cb6:	aa16      	add	r2, sp, #88	; 0x58
   23cb8:	f7ff fda2 	bl	23800 <encode_uint>
				conv.altform_0c = true;
   23cbc:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   23cc0:	4604      	mov	r4, r0
				conv.altform_0c = true;
   23cc2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   23cc6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   23cca:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   23cce:	2600      	movs	r6, #0
				conv.altform_0c = true;
   23cd0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
				goto prec_int_pad0;
   23cd4:	e7d2      	b.n	23c7c <cbvprintf+0x3dc>
	switch ((enum length_mod_enum)conv->length_mod) {
   23cd6:	2a07      	cmp	r2, #7
   23cd8:	f63f ae64 	bhi.w	239a4 <cbvprintf+0x104>
   23cdc:	e8df f002 	tbb	[pc, r2]
   23ce0:	0f07040f 	.word	0x0f07040f
   23ce4:	0f0f0a0a 	.word	0x0f0f0a0a
		*(signed char *)dp = (signed char)count;
   23ce8:	f880 9000 	strb.w	r9, [r0]
		break;
   23cec:	e65a      	b.n	239a4 <cbvprintf+0x104>
		*(short *)dp = (short)count;
   23cee:	f8a0 9000 	strh.w	r9, [r0]
		break;
   23cf2:	e657      	b.n	239a4 <cbvprintf+0x104>
		*(intmax_t *)dp = (intmax_t)count;
   23cf4:	464a      	mov	r2, r9
   23cf6:	17d3      	asrs	r3, r2, #31
   23cf8:	e9c0 2300 	strd	r2, r3, [r0]
		break;
   23cfc:	e652      	b.n	239a4 <cbvprintf+0x104>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   23cfe:	f8c0 9000 	str.w	r9, [r0]
		break;
   23d02:	e64f      	b.n	239a4 <cbvprintf+0x104>
		*sign = '-';
   23d04:	262d      	movs	r6, #45	; 0x2d
   23d06:	e6a8      	b.n	23a5a <cbvprintf+0x1ba>
		*sign = '+';
   23d08:	262b      	movs	r6, #43	; 0x2b
   23d0a:	e6a6      	b.n	23a5a <cbvprintf+0x1ba>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
   23d0c:	f240 73ff 	movw	r3, #2047	; 0x7ff
   23d10:	429c      	cmp	r4, r3
   23d12:	d12d      	bne.n	23d70 <cbvprintf+0x4d0>
		if (fract == 0) {
   23d14:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   23d18:	4bbd      	ldr	r3, [pc, #756]	; (24010 <cbvprintf+0x770>)
   23d1a:	430a      	orrs	r2, r1
   23d1c:	5cfb      	ldrb	r3, [r7, r3]
   23d1e:	f003 0303 	and.w	r3, r3, #3
   23d22:	d117      	bne.n	23d54 <cbvprintf+0x4b4>
			if (isupper((int)c)) {
   23d24:	2b01      	cmp	r3, #1
				*buf++ = 'I';
   23d26:	bf0b      	itete	eq
   23d28:	f644 6349 	movweq	r3, #20041	; 0x4e49
				*buf++ = 'i';
   23d2c:	f646 6369 	movwne	r3, #28265	; 0x6e69
				*buf++ = 'I';
   23d30:	f8ad 3064 	strheq.w	r3, [sp, #100]	; 0x64
				*buf++ = 'i';
   23d34:	f8ad 3064 	strhne.w	r3, [sp, #100]	; 0x64
				*buf++ = 'F';
   23d38:	bf0c      	ite	eq
   23d3a:	2346      	moveq	r3, #70	; 0x46
				*buf++ = 'f';
   23d3c:	2366      	movne	r3, #102	; 0x66
				*buf++ = 'n';
   23d3e:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
		conv->flag_zero = false;
   23d42:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
   23d46:	f10d 0867 	add.w	r8, sp, #103	; 0x67
		conv->flag_zero = false;
   23d4a:	f36f 1386 	bfc	r3, #6, #1
   23d4e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		return bps;
   23d52:	e751      	b.n	23bf8 <cbvprintf+0x358>
			if (isupper((int)c)) {
   23d54:	2b01      	cmp	r3, #1
				*buf++ = 'N';
   23d56:	bf0b      	itete	eq
   23d58:	f244 134e 	movweq	r3, #16718	; 0x414e
				*buf++ = 'n';
   23d5c:	f246 136e 	movwne	r3, #24942	; 0x616e
				*buf++ = 'N';
   23d60:	f8ad 3064 	strheq.w	r3, [sp, #100]	; 0x64
				*buf++ = 'n';
   23d64:	f8ad 3064 	strhne.w	r3, [sp, #100]	; 0x64
				*buf++ = 'N';
   23d68:	bf0c      	ite	eq
   23d6a:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'n';
   23d6c:	236e      	movne	r3, #110	; 0x6e
   23d6e:	e7e6      	b.n	23d3e <cbvprintf+0x49e>
	bool is_subnormal = (exp == 0) && (fract != 0);
   23d70:	f04f 0c00 	mov.w	ip, #0
   23d74:	e686      	b.n	23a84 <cbvprintf+0x1e4>
				exp--;
   23d76:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   23d78:	1892      	adds	r2, r2, r2
   23d7a:	415b      	adcs	r3, r3
   23d7c:	2a00      	cmp	r2, #0
   23d7e:	f173 0100 	sbcs.w	r1, r3, #0
   23d82:	daf8      	bge.n	23d76 <cbvprintf+0x4d6>
   23d84:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   23d88:	e697      	b.n	23aba <cbvprintf+0x21a>
			_rlrshift(&fract);
   23d8a:	a812      	add	r0, sp, #72	; 0x48
   23d8c:	f014 fa5c 	bl	38248 <_rlrshift>
		while ((fract >> 32) >= (MAX_FP1 / 5)) {
   23d90:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
   23d94:	2300      	movs	r3, #0
   23d96:	f8cd c020 	str.w	ip, [sp, #32]
   23d9a:	9309      	str	r3, [sp, #36]	; 0x24
   23d9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   23da0:	2900      	cmp	r1, #0
   23da2:	bf08      	it	eq
   23da4:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
   23da8:	f108 0801 	add.w	r8, r8, #1
   23dac:	d2ed      	bcs.n	23d8a <cbvprintf+0x4ea>
		fract *= 5U;
   23dae:	2005      	movs	r0, #5
   23db0:	fba2 2300 	umull	r2, r3, r2, r0
   23db4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   23db8:	9b05      	ldr	r3, [sp, #20]
		decexp--;
   23dba:	3c01      	subs	r4, #1
		fract *= 5U;
   23dbc:	fb00 330c 	mla	r3, r0, ip, r3
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   23dc0:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   23dc4:	9305      	str	r3, [sp, #20]
   23dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23dca:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   23dce:	2100      	movs	r1, #0
   23dd0:	2300      	movs	r3, #0
   23dd2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   23dd6:	9805      	ldr	r0, [sp, #20]
   23dd8:	428b      	cmp	r3, r1
   23dda:	bf08      	it	eq
   23ddc:	4282      	cmpeq	r2, r0
   23dde:	d208      	bcs.n	23df2 <cbvprintf+0x552>
   23de0:	f1bc 0f00 	cmp.w	ip, #0
   23de4:	f43f ae70 	beq.w	23ac8 <cbvprintf+0x228>
   23de8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23dec:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   23df0:	e66a      	b.n	23ac8 <cbvprintf+0x228>
			fract <<= 1;
   23df2:	9b04      	ldr	r3, [sp, #16]
			exp--;
   23df4:	f04f 0c01 	mov.w	ip, #1
			fract <<= 1;
   23df8:	18db      	adds	r3, r3, r3
   23dfa:	9304      	str	r3, [sp, #16]
   23dfc:	9b05      	ldr	r3, [sp, #20]
			exp--;
   23dfe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
   23e02:	415b      	adcs	r3, r3
   23e04:	9305      	str	r3, [sp, #20]
			exp--;
   23e06:	e7e2      	b.n	23dce <cbvprintf+0x52e>
		_ldiv5(&fract);
   23e08:	a812      	add	r0, sp, #72	; 0x48
   23e0a:	f014 fa2e 	bl	3826a <_ldiv5>
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   23e0e:	f04f 0c00 	mov.w	ip, #0
   23e12:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23e14:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
		exp--;
   23e18:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   23e1c:	3401      	adds	r4, #1
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
   23e1e:	9304      	str	r3, [sp, #16]
   23e20:	2300      	movs	r3, #0
   23e22:	2100      	movs	r1, #0
   23e24:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   23e28:	4299      	cmp	r1, r3
   23e2a:	bf08      	it	eq
   23e2c:	4570      	cmpeq	r0, lr
   23e2e:	d207      	bcs.n	23e40 <cbvprintf+0x5a0>
   23e30:	f1bc 0f00 	cmp.w	ip, #0
   23e34:	f43f ae4c 	beq.w	23ad0 <cbvprintf+0x230>
   23e38:	9b04      	ldr	r3, [sp, #16]
   23e3a:	e9cd 3e12 	strd	r3, lr, [sp, #72]	; 0x48
   23e3e:	e647      	b.n	23ad0 <cbvprintf+0x230>
			fract <<= 1;
   23e40:	9b04      	ldr	r3, [sp, #16]
			exp--;
   23e42:	f04f 0c01 	mov.w	ip, #1
			fract <<= 1;
   23e46:	18db      	adds	r3, r3, r3
   23e48:	9304      	str	r3, [sp, #16]
   23e4a:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
   23e4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   23e52:	e7e5      	b.n	23e20 <cbvprintf+0x580>
   23e54:	2400      	movs	r4, #0
   23e56:	46a0      	mov	r8, r4
   23e58:	e63e      	b.n	23ad8 <cbvprintf+0x238>
			c = 'f';
   23e5a:	2766      	movs	r7, #102	; 0x66
			precision -= decexp;
   23e5c:	1b2d      	subs	r5, r5, r4
   23e5e:	e652      	b.n	23b06 <cbvprintf+0x266>
	bool prune_zero = false;
   23e60:	2300      	movs	r3, #0
   23e62:	e659      	b.n	23b18 <cbvprintf+0x278>
		exp = precision + 1;
   23e64:	1c69      	adds	r1, r5, #1
	if (exp > 16) {
   23e66:	2910      	cmp	r1, #16
   23e68:	bfa8      	it	ge
   23e6a:	2110      	movge	r1, #16
   23e6c:	4688      	mov	r8, r1
   23e6e:	2310      	movs	r3, #16
	uint64_t ltemp = BIT64(59);
   23e70:	2200      	movs	r2, #0
   23e72:	9311      	str	r3, [sp, #68]	; 0x44
   23e74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   23e78:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
   23e7c:	f1b8 0801 	subs.w	r8, r8, #1
   23e80:	d222      	bcs.n	23ec8 <cbvprintf+0x628>
	fract += ltemp;
   23e82:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23e84:	9a14      	ldr	r2, [sp, #80]	; 0x50
   23e86:	9915      	ldr	r1, [sp, #84]	; 0x54
   23e88:	189b      	adds	r3, r3, r2
   23e8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   23e8c:	eb41 0202 	adc.w	r2, r1, r2
   23e90:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & (0x0FU << 28)) {
   23e94:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
   23e98:	930e      	str	r3, [sp, #56]	; 0x38
   23e9a:	2300      	movs	r3, #0
   23e9c:	930f      	str	r3, [sp, #60]	; 0x3c
   23e9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   23ea2:	4313      	orrs	r3, r2
   23ea4:	d006      	beq.n	23eb4 <cbvprintf+0x614>
		_ldiv5(&fract);
   23ea6:	a812      	add	r0, sp, #72	; 0x48
   23ea8:	f014 f9df 	bl	3826a <_ldiv5>
		_rlrshift(&fract);
   23eac:	a812      	add	r0, sp, #72	; 0x48
   23eae:	f014 f9cb 	bl	38248 <_rlrshift>
		decexp++;
   23eb2:	3401      	adds	r4, #1
	if (c == 'f') {
   23eb4:	2f66      	cmp	r7, #102	; 0x66
   23eb6:	d17d      	bne.n	23fb4 <cbvprintf+0x714>
		if (decexp > 0) {
   23eb8:	2c00      	cmp	r4, #0
   23eba:	dc0c      	bgt.n	23ed6 <cbvprintf+0x636>
			*buf++ = '0';
   23ebc:	2330      	movs	r3, #48	; 0x30
   23ebe:	f10d 0865 	add.w	r8, sp, #101	; 0x65
   23ec2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
   23ec6:	e015      	b.n	23ef4 <cbvprintf+0x654>
		_ldiv5(&ltemp);
   23ec8:	a814      	add	r0, sp, #80	; 0x50
   23eca:	f014 f9ce 	bl	3826a <_ldiv5>
		_rlrshift(&ltemp);
   23ece:	a814      	add	r0, sp, #80	; 0x50
   23ed0:	f014 f9ba 	bl	38248 <_rlrshift>
   23ed4:	e7d2      	b.n	23e7c <cbvprintf+0x5dc>
	char *buf = bps;
   23ed6:	f10d 0864 	add.w	r8, sp, #100	; 0x64
			while (decexp > 0 && digit_count > 0) {
   23eda:	9a11      	ldr	r2, [sp, #68]	; 0x44
   23edc:	2a00      	cmp	r2, #0
   23ede:	dd07      	ble.n	23ef0 <cbvprintf+0x650>
				*buf++ = _get_digit(&fract, &digit_count);
   23ee0:	a911      	add	r1, sp, #68	; 0x44
   23ee2:	a812      	add	r0, sp, #72	; 0x48
   23ee4:	f014 f9e2 	bl	382ac <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   23ee8:	3c01      	subs	r4, #1
				*buf++ = _get_digit(&fract, &digit_count);
   23eea:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   23eee:	d1f4      	bne.n	23eda <cbvprintf+0x63a>
			conv->pad0_value = decexp;
   23ef0:	9417      	str	r4, [sp, #92]	; 0x5c
			decexp = 0;
   23ef2:	2400      	movs	r4, #0
		if (conv->flag_hash || (precision > 0)) {
   23ef4:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   23ef8:	0691      	lsls	r1, r2, #26
   23efa:	d401      	bmi.n	23f00 <cbvprintf+0x660>
   23efc:	2d00      	cmp	r5, #0
   23efe:	dd1b      	ble.n	23f38 <cbvprintf+0x698>
			*buf++ = '.';
   23f00:	222e      	movs	r2, #46	; 0x2e
   23f02:	f808 2b01 	strb.w	r2, [r8], #1
		if (decexp < 0 && precision > 0) {
   23f06:	b194      	cbz	r4, 23f2e <cbvprintf+0x68e>
   23f08:	2d00      	cmp	r5, #0
   23f0a:	dd15      	ble.n	23f38 <cbvprintf+0x698>
			conv->pad0_value = -decexp;
   23f0c:	4262      	negs	r2, r4
   23f0e:	42aa      	cmp	r2, r5
   23f10:	bfa8      	it	ge
   23f12:	462a      	movge	r2, r5
			conv->pad_postdp = (conv->pad0_value > 0);
   23f14:	2a00      	cmp	r2, #0
			conv->pad0_value = -decexp;
   23f16:	9217      	str	r2, [sp, #92]	; 0x5c
			precision -= conv->pad0_value;
   23f18:	eba5 0502 	sub.w	r5, r5, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   23f1c:	bfd4      	ite	le
   23f1e:	2200      	movle	r2, #0
   23f20:	2201      	movgt	r2, #1
   23f22:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   23f26:	f362 1145 	bfi	r1, r2, #5, #1
   23f2a:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	while (precision > 0 && digit_count > 0) {
   23f2e:	2d00      	cmp	r5, #0
   23f30:	dd02      	ble.n	23f38 <cbvprintf+0x698>
   23f32:	9a11      	ldr	r2, [sp, #68]	; 0x44
   23f34:	2a00      	cmp	r2, #0
   23f36:	dc53      	bgt.n	23fe0 <cbvprintf+0x740>
	if (prune_zero) {
   23f38:	9b04      	ldr	r3, [sp, #16]
   23f3a:	2b00      	cmp	r3, #0
   23f3c:	d15b      	bne.n	23ff6 <cbvprintf+0x756>
	conv->pad0_pre_exp = precision;
   23f3e:	9518      	str	r5, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
   23f40:	f007 02df 	and.w	r2, r7, #223	; 0xdf
   23f44:	2a45      	cmp	r2, #69	; 0x45
   23f46:	d123      	bne.n	23f90 <cbvprintf+0x6f0>
		if (decexp < 0) {
   23f48:	2c00      	cmp	r4, #0
			*buf++ = '-';
   23f4a:	bfb4      	ite	lt
   23f4c:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   23f4e:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
   23f50:	4641      	mov	r1, r8
			decexp = -decexp;
   23f52:	bfb8      	it	lt
   23f54:	4264      	neglt	r4, r4
		if (decexp >= 100) {
   23f56:	2c63      	cmp	r4, #99	; 0x63
		*buf++ = c;
   23f58:	f801 7b02 	strb.w	r7, [r1], #2
			*buf++ = '-';
   23f5c:	f888 2001 	strb.w	r2, [r8, #1]
		if (decexp >= 100) {
   23f60:	dd0a      	ble.n	23f78 <cbvprintf+0x6d8>
			*buf++ = (decexp / 100) + '0';
   23f62:	2064      	movs	r0, #100	; 0x64
   23f64:	fb94 f2f0 	sdiv	r2, r4, r0
			decexp %= 100;
   23f68:	fb00 4412 	mls	r4, r0, r2, r4
			*buf++ = (decexp / 100) + '0';
   23f6c:	f102 0530 	add.w	r5, r2, #48	; 0x30
   23f70:	f108 0103 	add.w	r1, r8, #3
   23f74:	f888 5002 	strb.w	r5, [r8, #2]
		*buf++ = (decexp / 10) + '0';
   23f78:	200a      	movs	r0, #10
   23f7a:	fb94 f2f0 	sdiv	r2, r4, r0
   23f7e:	4688      	mov	r8, r1
		*buf++ = (decexp % 10) + '0';
   23f80:	fb00 4412 	mls	r4, r0, r2, r4
		*buf++ = (decexp / 10) + '0';
   23f84:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   23f88:	3430      	adds	r4, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   23f8a:	f808 5b02 	strb.w	r5, [r8], #2
		*buf++ = (decexp % 10) + '0';
   23f8e:	704c      	strb	r4, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
   23f90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   23f92:	2a00      	cmp	r2, #0
   23f94:	dc3a      	bgt.n	2400c <cbvprintf+0x76c>
   23f96:	9a18      	ldr	r2, [sp, #96]	; 0x60
   23f98:	2a00      	cmp	r2, #0
   23f9a:	bfd4      	ite	le
   23f9c:	2200      	movle	r2, #0
   23f9e:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
   23fa0:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   23fa4:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
   23fa8:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
   23faa:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
   23fae:	f888 2000 	strb.w	r2, [r8]
	return bps;
   23fb2:	e621      	b.n	23bf8 <cbvprintf+0x358>
		*buf = _get_digit(&fract, &digit_count);
   23fb4:	a911      	add	r1, sp, #68	; 0x44
   23fb6:	a812      	add	r0, sp, #72	; 0x48
   23fb8:	f014 f978 	bl	382ac <_get_digit>
		if (conv->flag_hash || (precision > 0)) {
   23fbc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		if (*buf++ != '0') {
   23fc0:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   23fc2:	bf18      	it	ne
   23fc4:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
   23fc8:	069a      	lsls	r2, r3, #26
		*buf = _get_digit(&fract, &digit_count);
   23fca:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
		if (conv->flag_hash || (precision > 0)) {
   23fce:	d401      	bmi.n	23fd4 <cbvprintf+0x734>
   23fd0:	2d00      	cmp	r5, #0
   23fd2:	dd0d      	ble.n	23ff0 <cbvprintf+0x750>
			*buf++ = '.';
   23fd4:	232e      	movs	r3, #46	; 0x2e
   23fd6:	f10d 0866 	add.w	r8, sp, #102	; 0x66
   23fda:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
   23fde:	e7a6      	b.n	23f2e <cbvprintf+0x68e>
		*buf++ = _get_digit(&fract, &digit_count);
   23fe0:	a911      	add	r1, sp, #68	; 0x44
   23fe2:	a812      	add	r0, sp, #72	; 0x48
   23fe4:	f014 f962 	bl	382ac <_get_digit>
		precision--;
   23fe8:	3d01      	subs	r5, #1
		*buf++ = _get_digit(&fract, &digit_count);
   23fea:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   23fee:	e79e      	b.n	23f2e <cbvprintf+0x68e>
		if (*buf++ != '0') {
   23ff0:	f10d 0865 	add.w	r8, sp, #101	; 0x65
   23ff4:	e7a0      	b.n	23f38 <cbvprintf+0x698>
		conv->pad0_pre_exp = 0;
   23ff6:	2200      	movs	r2, #0
   23ff8:	9218      	str	r2, [sp, #96]	; 0x60
		while (*--buf == '0') {
   23ffa:	4641      	mov	r1, r8
   23ffc:	f818 2d01 	ldrb.w	r2, [r8, #-1]!
   24000:	2a30      	cmp	r2, #48	; 0x30
   24002:	d0fa      	beq.n	23ffa <cbvprintf+0x75a>
		if (*buf != '.') {
   24004:	2a2e      	cmp	r2, #46	; 0x2e
   24006:	bf18      	it	ne
   24008:	4688      	movne	r8, r1
   2400a:	e799      	b.n	23f40 <cbvprintf+0x6a0>
		|| (conv->pad0_pre_exp > 0);
   2400c:	2201      	movs	r2, #1
   2400e:	e7c7      	b.n	23fa0 <cbvprintf+0x700>
   24010:	000409c7 	.word	0x000409c7
			bpe = bps + 5;
   24014:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 241f4 <cbvprintf+0x954>
		char sign = 0;
   24018:	4606      	mov	r6, r0
			bps = "(nil)";
   2401a:	f1a8 0405 	sub.w	r4, r8, #5
   2401e:	e5ec      	b.n	23bfa <cbvprintf+0x35a>
		} else if (conv.altform_0) {
   24020:	070d      	lsls	r5, r1, #28
			nj_len += 1U;
   24022:	bf48      	it	mi
   24024:	3701      	addmi	r7, #1
   24026:	e5f2      	b.n	23c0e <cbvprintf+0x36e>
					OUTC(pad);
   24028:	4651      	mov	r1, sl
   2402a:	4628      	mov	r0, r5
   2402c:	9b03      	ldr	r3, [sp, #12]
   2402e:	4798      	blx	r3
   24030:	2800      	cmp	r0, #0
   24032:	f6ff adcc 	blt.w	23bce <cbvprintf+0x32e>
   24036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24038:	eba7 0903 	sub.w	r9, r7, r3
				while (width-- > 0) {
   2403c:	2b00      	cmp	r3, #0
   2403e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   24042:	930a      	str	r3, [sp, #40]	; 0x28
   24044:	dcf0      	bgt.n	24028 <cbvprintf+0x788>
		if (sign != 0) {
   24046:	b146      	cbz	r6, 2405a <cbvprintf+0x7ba>
			OUTC(sign);
   24048:	4651      	mov	r1, sl
   2404a:	4630      	mov	r0, r6
   2404c:	9b03      	ldr	r3, [sp, #12]
   2404e:	4798      	blx	r3
   24050:	2800      	cmp	r0, #0
   24052:	f6ff adbc 	blt.w	23bce <cbvprintf+0x32e>
   24056:	f109 0901 	add.w	r9, r9, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv.pad_fp) {
   2405a:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   2405e:	0650      	lsls	r0, r2, #25
   24060:	f140 8081 	bpl.w	24166 <cbvprintf+0x8c6>
			if (conv.specifier_a) {
   24064:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
   24068:	2a00      	cmp	r2, #0
   2406a:	db2d      	blt.n	240c8 <cbvprintf+0x828>
   2406c:	eba9 0904 	sub.w	r9, r9, r4
				while (isdigit((int)*cp)) {
   24070:	7820      	ldrb	r0, [r4, #0]
   24072:	4b5f      	ldr	r3, [pc, #380]	; (241f0 <cbvprintf+0x950>)
   24074:	4625      	mov	r5, r4
   24076:	5cc2      	ldrb	r2, [r0, r3]
   24078:	eb09 0604 	add.w	r6, r9, r4
   2407c:	0751      	lsls	r1, r2, #29
   2407e:	f104 0401 	add.w	r4, r4, #1
   24082:	d445      	bmi.n	24110 <cbvprintf+0x870>
				if (!conv.pad_postdp) {
   24084:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv.pad0_value;
   24088:	9c17      	ldr	r4, [sp, #92]	; 0x5c
				if (!conv.pad_postdp) {
   2408a:	0692      	lsls	r2, r2, #26
   2408c:	d406      	bmi.n	2409c <cbvprintf+0x7fc>
   2408e:	19a7      	adds	r7, r4, r6
					while (pad_len-- > 0) {
   24090:	2c00      	cmp	r4, #0
   24092:	eba7 0604 	sub.w	r6, r7, r4
   24096:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   2409a:	dc3f      	bgt.n	2411c <cbvprintf+0x87c>
				if (*cp == '.') {
   2409c:	7828      	ldrb	r0, [r5, #0]
   2409e:	282e      	cmp	r0, #46	; 0x2e
   240a0:	d10a      	bne.n	240b8 <cbvprintf+0x818>
					OUTC(*cp++);
   240a2:	4651      	mov	r1, sl
   240a4:	9b03      	ldr	r3, [sp, #12]
   240a6:	4798      	blx	r3
						OUTC('0');
   240a8:	2800      	cmp	r0, #0
   240aa:	f6ff ad90 	blt.w	23bce <cbvprintf+0x32e>
					while (pad_len-- > 0) {
   240ae:	2c00      	cmp	r4, #0
						OUTC('0');
   240b0:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   240b4:	dc39      	bgt.n	2412a <cbvprintf+0x88a>
					OUTC(*cp++);
   240b6:	3501      	adds	r5, #1
   240b8:	1b76      	subs	r6, r6, r5
   240ba:	e042      	b.n	24142 <cbvprintf+0x8a2>
				char pad = ' ';
   240bc:	2520      	movs	r5, #32
					pad = '0';
   240be:	970a      	str	r7, [sp, #40]	; 0x28
   240c0:	444f      	add	r7, r9
   240c2:	e7b8      	b.n	24036 <cbvprintf+0x796>
			width -= (int)nj_len;
   240c4:	970a      	str	r7, [sp, #40]	; 0x28
   240c6:	e7be      	b.n	24046 <cbvprintf+0x7a6>
			if (conv.specifier_a) {
   240c8:	4625      	mov	r5, r4
   240ca:	eba9 0904 	sub.w	r9, r9, r4
   240ce:	462f      	mov	r7, r5
   240d0:	eb09 0405 	add.w	r4, r9, r5
				while (*cp != 'p') {
   240d4:	f815 0b01 	ldrb.w	r0, [r5], #1
   240d8:	2870      	cmp	r0, #112	; 0x70
   240da:	d113      	bne.n	24104 <cbvprintf+0x864>
			while (pad_len-- > 0) {
   240dc:	9d18      	ldr	r5, [sp, #96]	; 0x60
   240de:	4425      	add	r5, r4
   240e0:	1b2a      	subs	r2, r5, r4
   240e2:	2a00      	cmp	r2, #0
   240e4:	dc36      	bgt.n	24154 <cbvprintf+0x8b4>
			OUTS(cp, bpe);
   240e6:	4643      	mov	r3, r8
   240e8:	463a      	mov	r2, r7
   240ea:	4651      	mov	r1, sl
   240ec:	9803      	ldr	r0, [sp, #12]
   240ee:	f014 f8f4 	bl	382da <outs>
   240f2:	2800      	cmp	r0, #0
   240f4:	f6ff ad6b 	blt.w	23bce <cbvprintf+0x32e>
   240f8:	4420      	add	r0, r4
   240fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			while (pad_len-- > 0) {
   240fc:	4681      	mov	r9, r0
   240fe:	4403      	add	r3, r0
   24100:	461d      	mov	r5, r3
   24102:	e06f      	b.n	241e4 <cbvprintf+0x944>
					OUTC(*cp++);
   24104:	4651      	mov	r1, sl
   24106:	9b03      	ldr	r3, [sp, #12]
   24108:	4798      	blx	r3
   2410a:	2800      	cmp	r0, #0
   2410c:	dadf      	bge.n	240ce <cbvprintf+0x82e>
   2410e:	e55e      	b.n	23bce <cbvprintf+0x32e>
					OUTC(*cp++);
   24110:	4651      	mov	r1, sl
   24112:	9b03      	ldr	r3, [sp, #12]
   24114:	4798      	blx	r3
   24116:	2800      	cmp	r0, #0
   24118:	daaa      	bge.n	24070 <cbvprintf+0x7d0>
   2411a:	e558      	b.n	23bce <cbvprintf+0x32e>
						OUTC('0');
   2411c:	4651      	mov	r1, sl
   2411e:	2030      	movs	r0, #48	; 0x30
   24120:	9b03      	ldr	r3, [sp, #12]
   24122:	4798      	blx	r3
   24124:	2800      	cmp	r0, #0
   24126:	dab3      	bge.n	24090 <cbvprintf+0x7f0>
   24128:	e551      	b.n	23bce <cbvprintf+0x32e>
						OUTC('0');
   2412a:	4651      	mov	r1, sl
   2412c:	2030      	movs	r0, #48	; 0x30
   2412e:	9b03      	ldr	r3, [sp, #12]
   24130:	4798      	blx	r3
   24132:	3c01      	subs	r4, #1
   24134:	e7b8      	b.n	240a8 <cbvprintf+0x808>
					OUTC(*cp++);
   24136:	4651      	mov	r1, sl
   24138:	9b03      	ldr	r3, [sp, #12]
   2413a:	4798      	blx	r3
   2413c:	2800      	cmp	r0, #0
   2413e:	f6ff ad46 	blt.w	23bce <cbvprintf+0x32e>
				while (isdigit((int)*cp)) {
   24142:	4b2b      	ldr	r3, [pc, #172]	; (241f0 <cbvprintf+0x950>)
   24144:	462f      	mov	r7, r5
   24146:	1974      	adds	r4, r6, r5
   24148:	f815 0b01 	ldrb.w	r0, [r5], #1
   2414c:	5cc2      	ldrb	r2, [r0, r3]
   2414e:	0753      	lsls	r3, r2, #29
   24150:	d4f1      	bmi.n	24136 <cbvprintf+0x896>
   24152:	e7c3      	b.n	240dc <cbvprintf+0x83c>
				OUTC('0');
   24154:	4651      	mov	r1, sl
   24156:	2030      	movs	r0, #48	; 0x30
   24158:	9b03      	ldr	r3, [sp, #12]
   2415a:	4798      	blx	r3
   2415c:	2800      	cmp	r0, #0
   2415e:	f6ff ad36 	blt.w	23bce <cbvprintf+0x32e>
   24162:	3401      	adds	r4, #1
   24164:	e7bc      	b.n	240e0 <cbvprintf+0x840>
			if (conv.altform_0c | conv.altform_0) {
   24166:	06d1      	lsls	r1, r2, #27
   24168:	d401      	bmi.n	2416e <cbvprintf+0x8ce>
   2416a:	0712      	lsls	r2, r2, #28
   2416c:	d508      	bpl.n	24180 <cbvprintf+0x8e0>
				OUTC('0');
   2416e:	4651      	mov	r1, sl
   24170:	2030      	movs	r0, #48	; 0x30
   24172:	9b03      	ldr	r3, [sp, #12]
   24174:	4798      	blx	r3
   24176:	2800      	cmp	r0, #0
   24178:	f6ff ad29 	blt.w	23bce <cbvprintf+0x32e>
   2417c:	f109 0901 	add.w	r9, r9, #1
			if (conv.altform_0c) {
   24180:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   24184:	06d3      	lsls	r3, r2, #27
   24186:	d509      	bpl.n	2419c <cbvprintf+0x8fc>
				OUTC(conv.specifier);
   24188:	4651      	mov	r1, sl
   2418a:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
   2418e:	9b03      	ldr	r3, [sp, #12]
   24190:	4798      	blx	r3
   24192:	2800      	cmp	r0, #0
   24194:	f6ff ad1b 	blt.w	23bce <cbvprintf+0x32e>
   24198:	f109 0901 	add.w	r9, r9, #1
			while (pad_len-- > 0) {
   2419c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   2419e:	444d      	add	r5, r9
   241a0:	eba5 0209 	sub.w	r2, r5, r9
   241a4:	2a00      	cmp	r2, #0
   241a6:	dc0a      	bgt.n	241be <cbvprintf+0x91e>
			OUTS(bps, bpe);
   241a8:	4643      	mov	r3, r8
   241aa:	4622      	mov	r2, r4
   241ac:	4651      	mov	r1, sl
   241ae:	9803      	ldr	r0, [sp, #12]
   241b0:	f014 f893 	bl	382da <outs>
   241b4:	2800      	cmp	r0, #0
   241b6:	f6ff ad0a 	blt.w	23bce <cbvprintf+0x32e>
   241ba:	4448      	add	r0, r9
   241bc:	e79d      	b.n	240fa <cbvprintf+0x85a>
				OUTC('0');
   241be:	4651      	mov	r1, sl
   241c0:	2030      	movs	r0, #48	; 0x30
   241c2:	9b03      	ldr	r3, [sp, #12]
   241c4:	4798      	blx	r3
   241c6:	2800      	cmp	r0, #0
   241c8:	f6ff ad01 	blt.w	23bce <cbvprintf+0x32e>
   241cc:	f109 0901 	add.w	r9, r9, #1
   241d0:	e7e6      	b.n	241a0 <cbvprintf+0x900>
			OUTC(' ');
   241d2:	4651      	mov	r1, sl
   241d4:	2020      	movs	r0, #32
   241d6:	9b03      	ldr	r3, [sp, #12]
   241d8:	4798      	blx	r3
   241da:	2800      	cmp	r0, #0
   241dc:	f6ff acf7 	blt.w	23bce <cbvprintf+0x32e>
   241e0:	f109 0901 	add.w	r9, r9, #1
		while (width > 0) {
   241e4:	eba5 0309 	sub.w	r3, r5, r9
   241e8:	2b00      	cmp	r3, #0
   241ea:	dcf2      	bgt.n	241d2 <cbvprintf+0x932>
   241ec:	f7ff bbda 	b.w	239a4 <cbvprintf+0x104>
   241f0:	000409c7 	.word	0x000409c7
   241f4:	0003e74a 	.word	0x0003e74a

000241f8 <nordicsemi_nrf91_init>:
   241f8:	f04f 0220 	mov.w	r2, #32
   241fc:	f3ef 8311 	mrs	r3, BASEPRI
   24200:	f382 8811 	msr	BASEPRI, r2
   24204:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   24208:	2101      	movs	r1, #1
   2420a:	4a04      	ldr	r2, [pc, #16]	; (2421c <nordicsemi_nrf91_init+0x24>)
   2420c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   24210:	f383 8811 	msr	BASEPRI, r3
   24214:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   24218:	2000      	movs	r0, #0
   2421a:	4770      	bx	lr
   2421c:	40039000 	.word	0x40039000

00024220 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   24220:	b120      	cbz	r0, 2422c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   24222:	4b03      	ldr	r3, [pc, #12]	; (24230 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   24224:	0180      	lsls	r0, r0, #6
   24226:	f043 0301 	orr.w	r3, r3, #1
   2422a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2422c:	4770      	bx	lr
   2422e:	bf00      	nop
   24230:	0003c430 	.word	0x0003c430

00024234 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   24234:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   24236:	2200      	movs	r2, #0
{
   24238:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   2423a:	490f      	ldr	r1, [pc, #60]	; (24278 <enable_logger+0x44>)
   2423c:	480f      	ldr	r0, [pc, #60]	; (2427c <enable_logger+0x48>)
   2423e:	f016 fee3 	bl	3b008 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24242:	2200      	movs	r2, #0
   24244:	2300      	movs	r3, #0
   24246:	2400      	movs	r4, #0
   24248:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2424c:	230e      	movs	r3, #14
   2424e:	4d0c      	ldr	r5, [pc, #48]	; (24280 <enable_logger+0x4c>)
   24250:	e9cd 3403 	strd	r3, r4, [sp, #12]
   24254:	f44f 7240 	mov.w	r2, #768	; 0x300
   24258:	4628      	mov	r0, r5
   2425a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2425e:	4b09      	ldr	r3, [pc, #36]	; (24284 <enable_logger+0x50>)
   24260:	4909      	ldr	r1, [pc, #36]	; (24288 <enable_logger+0x54>)
   24262:	9400      	str	r4, [sp, #0]
   24264:	f012 f8fa 	bl	3645c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   24268:	4908      	ldr	r1, [pc, #32]	; (2428c <enable_logger+0x58>)
   2426a:	4628      	mov	r0, r5
   2426c:	f016 fde1 	bl	3ae32 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   24270:	4620      	mov	r0, r4
   24272:	b009      	add	sp, #36	; 0x24
   24274:	bd30      	pop	{r4, r5, pc}
   24276:	bf00      	nop
   24278:	00024291 	.word	0x00024291
   2427c:	20021530 	.word	0x20021530
   24280:	20021568 	.word	0x20021568
   24284:	000246c5 	.word	0x000246c5
   24288:	2002f198 	.word	0x2002f198
   2428c:	0003e74f 	.word	0x0003e74f

00024290 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   24290:	4801      	ldr	r0, [pc, #4]	; (24298 <log_process_thread_timer_expiry_fn+0x8>)
   24292:	f012 b833 	b.w	362fc <z_impl_k_sem_give>
   24296:	bf00      	nop
   24298:	200208ac 	.word	0x200208ac

0002429c <z_log_get_s_mask>:
{
   2429c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2429e:	4605      	mov	r5, r0
	uint32_t mask = 0;
   242a0:	2000      	movs	r0, #0
				mask |= BIT(arg);
   242a2:	2701      	movs	r7, #1
	uint32_t arg = 0;
   242a4:	4603      	mov	r3, r0
	bool arm = false;
   242a6:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   242a8:	4e0d      	ldr	r6, [pc, #52]	; (242e0 <z_log_get_s_mask+0x44>)
	while ((curr = *str++) && arg < nargs) {
   242aa:	f815 4b01 	ldrb.w	r4, [r5], #1
   242ae:	b10c      	cbz	r4, 242b4 <z_log_get_s_mask+0x18>
   242b0:	428b      	cmp	r3, r1
   242b2:	d300      	bcc.n	242b6 <z_log_get_s_mask+0x1a>
}
   242b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   242b6:	2c25      	cmp	r4, #37	; 0x25
   242b8:	d102      	bne.n	242c0 <z_log_get_s_mask+0x24>
			arm = !arm;
   242ba:	f082 0201 	eor.w	r2, r2, #1
   242be:	e7f4      	b.n	242aa <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
   242c0:	2a00      	cmp	r2, #0
   242c2:	d0f2      	beq.n	242aa <z_log_get_s_mask+0xe>
   242c4:	f814 c006 	ldrb.w	ip, [r4, r6]
   242c8:	f01c 0f03 	tst.w	ip, #3
   242cc:	d0ed      	beq.n	242aa <z_log_get_s_mask+0xe>
			if (curr == 's') {
   242ce:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   242d0:	bf04      	itt	eq
   242d2:	fa07 f203 	lsleq.w	r2, r7, r3
   242d6:	4310      	orreq	r0, r2
			arg++;
   242d8:	3301      	adds	r3, #1
			arm = false;
   242da:	2200      	movs	r2, #0
   242dc:	e7e5      	b.n	242aa <z_log_get_s_mask+0xe>
   242de:	bf00      	nop
   242e0:	000409c7 	.word	0x000409c7

000242e4 <log_core_init>:
{
   242e4:	b508      	push	{r3, lr}
		log_msg_pool_init();
   242e6:	f000 fa4b 	bl	24780 <log_msg_pool_init>
		log_list_init(&list);
   242ea:	4809      	ldr	r0, [pc, #36]	; (24310 <log_core_init+0x2c>)
   242ec:	f014 f8c5 	bl	3847a <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   242f0:	2304      	movs	r3, #4
   242f2:	2234      	movs	r2, #52	; 0x34
   242f4:	4907      	ldr	r1, [pc, #28]	; (24314 <log_core_init+0x30>)
   242f6:	4808      	ldr	r0, [pc, #32]	; (24318 <log_core_init+0x34>)
   242f8:	f016 fbd2 	bl	3aaa0 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   242fc:	4b07      	ldr	r3, [pc, #28]	; (2431c <log_core_init+0x38>)
   242fe:	4a08      	ldr	r2, [pc, #32]	; (24320 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
   24300:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   24304:	601a      	str	r2, [r3, #0]
}
   24306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   2430a:	f000 bc85 	b.w	24c18 <log_output_timestamp_freq_set>
   2430e:	bf00      	nop
   24310:	200235c8 	.word	0x200235c8
   24314:	200331d8 	.word	0x200331d8
   24318:	200235d0 	.word	0x200235d0
   2431c:	200200e4 	.word	0x200200e4
   24320:	000384b9 	.word	0x000384b9

00024324 <dropped_notify>:
{
   24324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24326:	2500      	movs	r5, #0
   24328:	4b0c      	ldr	r3, [pc, #48]	; (2435c <dropped_notify+0x38>)
   2432a:	e8d3 7fef 	ldaex	r7, [r3]
   2432e:	e8c3 5fe2 	stlex	r2, r5, [r3]
   24332:	2a00      	cmp	r2, #0
   24334:	d1f9      	bne.n	2432a <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   24336:	4c0a      	ldr	r4, [pc, #40]	; (24360 <dropped_notify+0x3c>)
   24338:	4e0a      	ldr	r6, [pc, #40]	; (24364 <dropped_notify+0x40>)
   2433a:	1b36      	subs	r6, r6, r4
   2433c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   2433e:	42b5      	cmp	r5, r6
   24340:	db00      	blt.n	24344 <dropped_notify+0x20>
}
   24342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   24344:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   24346:	795b      	ldrb	r3, [r3, #5]
   24348:	b12b      	cbz	r3, 24356 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
   2434a:	6823      	ldr	r3, [r4, #0]
   2434c:	68db      	ldr	r3, [r3, #12]
   2434e:	b113      	cbz	r3, 24356 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
   24350:	4639      	mov	r1, r7
   24352:	4620      	mov	r0, r4
   24354:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   24356:	3501      	adds	r5, #1
   24358:	3410      	adds	r4, #16
   2435a:	e7f0      	b.n	2433e <dropped_notify+0x1a>
   2435c:	200235c0 	.word	0x200235c0
   24360:	0003c3bc 	.word	0x0003c3bc
   24364:	0003c3cc 	.word	0x0003c3cc

00024368 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24368:	4b04      	ldr	r3, [pc, #16]	; (2437c <log_dropped+0x14>)
   2436a:	e8d3 2fef 	ldaex	r2, [r3]
   2436e:	3201      	adds	r2, #1
   24370:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24374:	2900      	cmp	r1, #0
   24376:	d1f8      	bne.n	2436a <log_dropped+0x2>
}
   24378:	4770      	bx	lr
   2437a:	bf00      	nop
   2437c:	200235c0 	.word	0x200235c0

00024380 <log_source_name_get>:
   24380:	4a04      	ldr	r2, [pc, #16]	; (24394 <log_source_name_get+0x14>)
   24382:	4b05      	ldr	r3, [pc, #20]	; (24398 <log_source_name_get+0x18>)
   24384:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   24386:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   2438a:	bf34      	ite	cc
   2438c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   24390:	2000      	movcs	r0, #0
}
   24392:	4770      	bx	lr
   24394:	0003c2cc 	.word	0x0003c2cc
   24398:	0003c3bc 	.word	0x0003c3bc

0002439c <log_backend_enable>:
	id += backend - log_backend_get(0);
   2439c:	4b09      	ldr	r3, [pc, #36]	; (243c4 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   2439e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   243a0:	1ac3      	subs	r3, r0, r3
   243a2:	111b      	asrs	r3, r3, #4
   243a4:	3301      	adds	r3, #1
{
   243a6:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   243a8:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
   243aa:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
   243ac:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
   243ae:	4c06      	ldr	r4, [pc, #24]	; (243c8 <log_backend_enable+0x2c>)
   243b0:	715a      	strb	r2, [r3, #5]
   243b2:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   243b4:	6019      	str	r1, [r3, #0]
   243b6:	b912      	cbnz	r2, 243be <log_backend_enable+0x22>
   243b8:	4804      	ldr	r0, [pc, #16]	; (243cc <log_backend_enable+0x30>)
   243ba:	f011 ff9f 	bl	362fc <z_impl_k_sem_give>
	backend_attached = true;
   243be:	2301      	movs	r3, #1
   243c0:	7023      	strb	r3, [r4, #0]
}
   243c2:	bd10      	pop	{r4, pc}
   243c4:	0003c3bc 	.word	0x0003c3bc
   243c8:	2002bc56 	.word	0x2002bc56
   243cc:	200208ac 	.word	0x200208ac

000243d0 <log_init>:
{
   243d0:	b570      	push	{r4, r5, r6, lr}
   243d2:	4b0f      	ldr	r3, [pc, #60]	; (24410 <log_init+0x40>)
   243d4:	e8d3 5fef 	ldaex	r5, [r3]
   243d8:	1c6a      	adds	r2, r5, #1
   243da:	e8c3 2fe1 	stlex	r1, r2, [r3]
   243de:	2900      	cmp	r1, #0
   243e0:	d1f8      	bne.n	243d4 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
   243e2:	b92d      	cbnz	r5, 243f0 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
   243e4:	4c0b      	ldr	r4, [pc, #44]	; (24414 <log_init+0x44>)
   243e6:	4e0c      	ldr	r6, [pc, #48]	; (24418 <log_init+0x48>)
   243e8:	1b36      	subs	r6, r6, r4
   243ea:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   243ec:	42b5      	cmp	r5, r6
   243ee:	db00      	blt.n	243f2 <log_init+0x22>
}
   243f0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   243f2:	7b23      	ldrb	r3, [r4, #12]
   243f4:	b143      	cbz	r3, 24408 <log_init+0x38>
			if (backend->api->init != NULL) {
   243f6:	6823      	ldr	r3, [r4, #0]
   243f8:	695b      	ldr	r3, [r3, #20]
   243fa:	b103      	cbz	r3, 243fe <log_init+0x2e>
				backend->api->init();
   243fc:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   243fe:	2204      	movs	r2, #4
   24400:	2100      	movs	r1, #0
   24402:	4620      	mov	r0, r4
   24404:	f7ff ffca 	bl	2439c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   24408:	3501      	adds	r5, #1
   2440a:	3410      	adds	r4, #16
   2440c:	e7ee      	b.n	243ec <log_init+0x1c>
   2440e:	bf00      	nop
   24410:	200235c4 	.word	0x200235c4
   24414:	0003c3bc 	.word	0x0003c3bc
   24418:	0003c3cc 	.word	0x0003c3cc

0002441c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   2441c:	4b15      	ldr	r3, [pc, #84]	; (24474 <log_strdup+0x58>)
{
   2441e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   24420:	4298      	cmp	r0, r3
{
   24422:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   24424:	d302      	bcc.n	2442c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   24426:	4b14      	ldr	r3, [pc, #80]	; (24478 <log_strdup+0x5c>)
   24428:	4298      	cmp	r0, r3
   2442a:	d31d      	bcc.n	24468 <log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   2442c:	2200      	movs	r2, #0
   2442e:	2300      	movs	r3, #0
   24430:	4812      	ldr	r0, [pc, #72]	; (2447c <log_strdup+0x60>)
   24432:	a901      	add	r1, sp, #4
   24434:	f011 f9b2 	bl	3579c <k_mem_slab_alloc>
	if (err != 0) {
   24438:	4605      	mov	r5, r0
   2443a:	b9c0      	cbnz	r0, 2446e <log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2443c:	2201      	movs	r2, #1
   2443e:	9b01      	ldr	r3, [sp, #4]
   24440:	e8d3 1fef 	ldaex	r1, [r3]
   24444:	e8c3 2fe0 	stlex	r0, r2, [r3]
   24448:	2800      	cmp	r0, #0
   2444a:	d1f9      	bne.n	24440 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   2444c:	9e01      	ldr	r6, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2444e:	222d      	movs	r2, #45	; 0x2d
   24450:	1d33      	adds	r3, r6, #4
   24452:	4618      	mov	r0, r3
   24454:	4621      	mov	r1, r4
   24456:	f017 f925 	bl	3b6a4 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   2445a:	227e      	movs	r2, #126	; 0x7e
   2445c:	4603      	mov	r3, r0
   2445e:	f886 2031 	strb.w	r2, [r6, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   24462:	f886 5032 	strb.w	r5, [r6, #50]	; 0x32
	return dup->buf;
   24466:	461c      	mov	r4, r3
}
   24468:	4620      	mov	r0, r4
   2446a:	b002      	add	sp, #8
   2446c:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   2446e:	4b04      	ldr	r3, [pc, #16]	; (24480 <log_strdup+0x64>)
   24470:	e7f9      	b.n	24466 <log_strdup+0x4a>
   24472:	bf00      	nop
   24474:	0003bff8 	.word	0x0003bff8
   24478:	00040b20 	.word	0x00040b20
   2447c:	200235d0 	.word	0x200235d0
   24480:	0003e757 	.word	0x0003e757

00024484 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   24484:	b148      	cbz	r0, 2449a <log_is_strdup+0x16>
   24486:	4b05      	ldr	r3, [pc, #20]	; (2449c <log_is_strdup+0x18>)
   24488:	4298      	cmp	r0, r3
   2448a:	d305      	bcc.n	24498 <log_is_strdup+0x14>
   2448c:	33d0      	adds	r3, #208	; 0xd0
   2448e:	4298      	cmp	r0, r3
   24490:	bf2c      	ite	cs
   24492:	2000      	movcs	r0, #0
   24494:	2001      	movcc	r0, #1
   24496:	4770      	bx	lr
   24498:	2000      	movs	r0, #0
}
   2449a:	4770      	bx	lr
   2449c:	200331d8 	.word	0x200331d8

000244a0 <z_impl_log_process>:
{
   244a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   244a4:	4b4a      	ldr	r3, [pc, #296]	; (245d0 <z_impl_log_process+0x130>)
{
   244a6:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   244a8:	781b      	ldrb	r3, [r3, #0]
{
   244aa:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
   244ac:	b903      	cbnz	r3, 244b0 <z_impl_log_process+0x10>
   244ae:	b340      	cbz	r0, 24502 <z_impl_log_process+0x62>
	__asm__ volatile(
   244b0:	f04f 0320 	mov.w	r3, #32
   244b4:	f3ef 8611 	mrs	r6, BASEPRI
   244b8:	f383 8811 	msr	BASEPRI, r3
   244bc:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   244c0:	4844      	ldr	r0, [pc, #272]	; (245d4 <z_impl_log_process+0x134>)
   244c2:	f013 ffea 	bl	3849a <log_list_head_get>
   244c6:	4605      	mov	r5, r0
	__asm__ volatile(
   244c8:	f386 8811 	msr	BASEPRI, r6
   244cc:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   244d0:	b158      	cbz	r0, 244ea <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   244d2:	4b41      	ldr	r3, [pc, #260]	; (245d8 <z_impl_log_process+0x138>)
   244d4:	e8d3 2fef 	ldaex	r2, [r3]
   244d8:	3a01      	subs	r2, #1
   244da:	e8c3 2fe1 	stlex	r1, r2, [r3]
   244de:	2900      	cmp	r1, #0
   244e0:	d1f8      	bne.n	244d4 <z_impl_log_process+0x34>
	if (!bypass) {
   244e2:	b194      	cbz	r4, 2450a <z_impl_log_process+0x6a>
	log_msg_put(msg);
   244e4:	4628      	mov	r0, r5
   244e6:	f014 f8ed 	bl	386c4 <log_msg_put>
	if (!bypass && dropped_cnt) {
   244ea:	b924      	cbnz	r4, 244f6 <z_impl_log_process+0x56>
   244ec:	4b3b      	ldr	r3, [pc, #236]	; (245dc <z_impl_log_process+0x13c>)
   244ee:	681b      	ldr	r3, [r3, #0]
   244f0:	b10b      	cbz	r3, 244f6 <z_impl_log_process+0x56>
		dropped_notify();
   244f2:	f7ff ff17 	bl	24324 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   244f6:	4837      	ldr	r0, [pc, #220]	; (245d4 <z_impl_log_process+0x134>)
   244f8:	f013 ffcd 	bl	38496 <log_list_head_peek>
   244fc:	1e04      	subs	r4, r0, #0
   244fe:	bf18      	it	ne
   24500:	2401      	movne	r4, #1
}
   24502:	4620      	mov	r0, r4
   24504:	b005      	add	sp, #20
   24506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   2450a:	4b35      	ldr	r3, [pc, #212]	; (245e0 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   2450c:	781b      	ldrb	r3, [r3, #0]
   2450e:	b9cb      	cbnz	r3, 24544 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   24510:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   24512:	07db      	lsls	r3, r3, #31
   24514:	d416      	bmi.n	24544 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
   24516:	f014 f8e4 	bl	386e2 <log_msg_str_get>
   2451a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   2451c:	4628      	mov	r0, r5
   2451e:	f014 f8af 	bl	38680 <log_msg_nargs_get>
   24522:	4601      	mov	r1, r0
   24524:	4640      	mov	r0, r8
   24526:	f7ff feb9 	bl	2429c <z_log_get_s_mask>
   2452a:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   2452c:	4f2d      	ldr	r7, [pc, #180]	; (245e4 <z_impl_log_process+0x144>)
   2452e:	4b2e      	ldr	r3, [pc, #184]	; (245e8 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   24530:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 24604 <z_impl_log_process+0x164>
   24534:	1bdb      	subs	r3, r3, r7
   24536:	08db      	lsrs	r3, r3, #3
   24538:	9303      	str	r3, [sp, #12]
   2453a:	4b2c      	ldr	r3, [pc, #176]	; (245ec <z_impl_log_process+0x14c>)
   2453c:	1bdb      	subs	r3, r3, r7
   2453e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   24542:	b936      	cbnz	r6, 24552 <z_impl_log_process+0xb2>
   24544:	4e2a      	ldr	r6, [pc, #168]	; (245f0 <z_impl_log_process+0x150>)
   24546:	4f2b      	ldr	r7, [pc, #172]	; (245f4 <z_impl_log_process+0x154>)
   24548:	f04f 0800 	mov.w	r8, #0
   2454c:	1bbf      	subs	r7, r7, r6
   2454e:	113f      	asrs	r7, r7, #4
   24550:	e03a      	b.n	245c8 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
   24552:	fab6 f186 	clz	r1, r6
   24556:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   2455a:	4649      	mov	r1, r9
   2455c:	4628      	mov	r0, r5
   2455e:	f014 f892 	bl	38686 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   24562:	4b25      	ldr	r3, [pc, #148]	; (245f8 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   24564:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   24566:	4298      	cmp	r0, r3
   24568:	d302      	bcc.n	24570 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   2456a:	4a24      	ldr	r2, [pc, #144]	; (245fc <z_impl_log_process+0x15c>)
   2456c:	4290      	cmp	r0, r2
   2456e:	d31a      	bcc.n	245a6 <z_impl_log_process+0x106>
   24570:	4608      	mov	r0, r1
   24572:	f7ff ff87 	bl	24484 <log_is_strdup>
   24576:	4602      	mov	r2, r0
   24578:	b9a8      	cbnz	r0, 245a6 <z_impl_log_process+0x106>
   2457a:	4b21      	ldr	r3, [pc, #132]	; (24600 <z_impl_log_process+0x160>)
   2457c:	4299      	cmp	r1, r3
   2457e:	d012      	beq.n	245a6 <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
   24580:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   24582:	9903      	ldr	r1, [sp, #12]
   24584:	f3c3 1389 	ubfx	r3, r3, #6, #10
   24588:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   2458a:	bf38      	it	cc
   2458c:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   24590:	ea4f 138a 	mov.w	r3, sl, lsl #6
   24594:	f043 0301 	orr.w	r3, r3, #1
   24598:	f8ad 3000 	strh.w	r3, [sp]
   2459c:	4649      	mov	r1, r9
   2459e:	4643      	mov	r3, r8
   245a0:	4658      	mov	r0, fp
   245a2:	f013 ffcc 	bl	3853e <log_3>
		mask &= ~BIT(idx);
   245a6:	2301      	movs	r3, #1
   245a8:	fa03 f109 	lsl.w	r1, r3, r9
   245ac:	ea26 0601 	bic.w	r6, r6, r1
   245b0:	e7c7      	b.n	24542 <z_impl_log_process+0xa2>
	return backend->cb->active;
   245b2:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   245b4:	795b      	ldrb	r3, [r3, #5]
   245b6:	b123      	cbz	r3, 245c2 <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
   245b8:	6833      	ldr	r3, [r6, #0]
   245ba:	4629      	mov	r1, r5
   245bc:	4630      	mov	r0, r6
   245be:	681b      	ldr	r3, [r3, #0]
   245c0:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   245c2:	f108 0801 	add.w	r8, r8, #1
   245c6:	3610      	adds	r6, #16
   245c8:	45b8      	cmp	r8, r7
   245ca:	dbf2      	blt.n	245b2 <z_impl_log_process+0x112>
   245cc:	e78a      	b.n	244e4 <z_impl_log_process+0x44>
   245ce:	bf00      	nop
   245d0:	2002bc56 	.word	0x2002bc56
   245d4:	200235c8 	.word	0x200235c8
   245d8:	200235bc 	.word	0x200235bc
   245dc:	200235c0 	.word	0x200235c0
   245e0:	2002bc57 	.word	0x2002bc57
   245e4:	0003c2cc 	.word	0x0003c2cc
   245e8:	0003c3bc 	.word	0x0003c3bc
   245ec:	0003c354 	.word	0x0003c354
   245f0:	0003c3bc 	.word	0x0003c3bc
   245f4:	0003c3cc 	.word	0x0003c3cc
   245f8:	0003bff8 	.word	0x0003bff8
   245fc:	00040b20 	.word	0x00040b20
   24600:	0003e757 	.word	0x0003e757
   24604:	0003e771 	.word	0x0003e771

00024608 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   24608:	4b27      	ldr	r3, [pc, #156]	; (246a8 <msg_finalize+0xa0>)
{
   2460a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   2460c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   2460e:	8141      	strh	r1, [r0, #10]
{
   24610:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   24612:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24614:	4d25      	ldr	r5, [pc, #148]	; (246ac <msg_finalize+0xa4>)
   24616:	60e0      	str	r0, [r4, #12]
   24618:	e8d5 3fef 	ldaex	r3, [r5]
   2461c:	3301      	adds	r3, #1
   2461e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   24622:	2a00      	cmp	r2, #0
   24624:	d1f8      	bne.n	24618 <msg_finalize+0x10>
	__asm__ volatile(
   24626:	f04f 0320 	mov.w	r3, #32
   2462a:	f3ef 8611 	mrs	r6, BASEPRI
   2462e:	f383 8811 	msr	BASEPRI, r3
   24632:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   24636:	481e      	ldr	r0, [pc, #120]	; (246b0 <msg_finalize+0xa8>)
   24638:	4621      	mov	r1, r4
   2463a:	f013 ff22 	bl	38482 <log_list_add_tail>
	__asm__ volatile(
   2463e:	f386 8811 	msr	BASEPRI, r6
   24642:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   24646:	4b1b      	ldr	r3, [pc, #108]	; (246b4 <msg_finalize+0xac>)
   24648:	781b      	ldrb	r3, [r3, #0]
   2464a:	b183      	cbz	r3, 2466e <msg_finalize+0x66>
	__asm__ volatile(
   2464c:	f04f 0320 	mov.w	r3, #32
   24650:	f3ef 8411 	mrs	r4, BASEPRI
   24654:	f383 8811 	msr	BASEPRI, r3
   24658:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   2465c:	2000      	movs	r0, #0
   2465e:	f7ff ff1f 	bl	244a0 <z_impl_log_process>
	__asm__ volatile(
   24662:	f384 8811 	msr	BASEPRI, r4
   24666:	f3bf 8f6f 	isb	sy
}
   2466a:	b002      	add	sp, #8
   2466c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   2466e:	4a12      	ldr	r2, [pc, #72]	; (246b8 <msg_finalize+0xb0>)
   24670:	682b      	ldr	r3, [r5, #0]
   24672:	6812      	ldr	r2, [r2, #0]
   24674:	2a00      	cmp	r2, #0
   24676:	d0f8      	beq.n	2466a <msg_finalize+0x62>
   24678:	2b01      	cmp	r3, #1
   2467a:	d10a      	bne.n	24692 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   2467c:	2200      	movs	r2, #0
   2467e:	2300      	movs	r3, #0
   24680:	480e      	ldr	r0, [pc, #56]	; (246bc <msg_finalize+0xb4>)
   24682:	e9cd 2300 	strd	r2, r3, [sp]
   24686:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2468a:	2300      	movs	r3, #0
   2468c:	f012 f970 	bl	36970 <z_impl_k_timer_start>
   24690:	e7eb      	b.n	2466a <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   24692:	2b0a      	cmp	r3, #10
   24694:	d1e9      	bne.n	2466a <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   24696:	4809      	ldr	r0, [pc, #36]	; (246bc <msg_finalize+0xb4>)
   24698:	f016 fcc2 	bl	3b020 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   2469c:	4808      	ldr	r0, [pc, #32]	; (246c0 <msg_finalize+0xb8>)
}
   2469e:	b002      	add	sp, #8
   246a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   246a4:	f011 be2a 	b.w	362fc <z_impl_k_sem_give>
   246a8:	200200e4 	.word	0x200200e4
   246ac:	200235bc 	.word	0x200235bc
   246b0:	200235c8 	.word	0x200235c8
   246b4:	2002bc57 	.word	0x2002bc57
   246b8:	200235ec 	.word	0x200235ec
   246bc:	20021530 	.word	0x20021530
   246c0:	200208ac 	.word	0x200208ac

000246c4 <log_process_thread_func>:
{
   246c4:	b510      	push	{r4, lr}
	log_init();
   246c6:	f7ff fe83 	bl	243d0 <log_init>
	return z_impl_k_current_get();
   246ca:	f011 fe11 	bl	362f0 <z_impl_k_current_get>
	proc_tid = process_tid;
   246ce:	4b0c      	ldr	r3, [pc, #48]	; (24700 <log_process_thread_func+0x3c>)
   246d0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   246d2:	b130      	cbz	r0, 246e2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   246d4:	4b0b      	ldr	r3, [pc, #44]	; (24704 <log_process_thread_func+0x40>)
	    process_tid &&
   246d6:	681b      	ldr	r3, [r3, #0]
   246d8:	2b09      	cmp	r3, #9
   246da:	dd02      	ble.n	246e2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   246dc:	480a      	ldr	r0, [pc, #40]	; (24708 <log_process_thread_func+0x44>)
   246de:	f011 fe0d 	bl	362fc <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   246e2:	4c09      	ldr	r4, [pc, #36]	; (24708 <log_process_thread_func+0x44>)
   246e4:	2000      	movs	r0, #0
   246e6:	f7ff fedb 	bl	244a0 <z_impl_log_process>
		if (log_process(false) == false) {
   246ea:	2800      	cmp	r0, #0
   246ec:	d1fa      	bne.n	246e4 <log_process_thread_func+0x20>
   246ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   246f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   246f6:	4620      	mov	r0, r4
   246f8:	f011 fe26 	bl	36348 <z_impl_k_sem_take>
   246fc:	e7f2      	b.n	246e4 <log_process_thread_func+0x20>
   246fe:	bf00      	nop
   24700:	200235ec 	.word	0x200235ec
   24704:	200235bc 	.word	0x200235bc
   24708:	200208ac 	.word	0x200208ac

0002470c <z_impl_log_panic>:
{
   2470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   2470e:	4f0e      	ldr	r7, [pc, #56]	; (24748 <z_impl_log_panic+0x3c>)
   24710:	783d      	ldrb	r5, [r7, #0]
   24712:	b975      	cbnz	r5, 24732 <z_impl_log_panic+0x26>
	log_init();
   24714:	f7ff fe5c 	bl	243d0 <log_init>
	return __log_backends_end - __log_backends_start;
   24718:	4c0c      	ldr	r4, [pc, #48]	; (2474c <z_impl_log_panic+0x40>)
   2471a:	4e0d      	ldr	r6, [pc, #52]	; (24750 <z_impl_log_panic+0x44>)
   2471c:	1b36      	subs	r6, r6, r4
   2471e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   24720:	42b5      	cmp	r5, r6
   24722:	db07      	blt.n	24734 <z_impl_log_panic+0x28>
   24724:	2000      	movs	r0, #0
   24726:	f7ff febb 	bl	244a0 <z_impl_log_process>
		while (log_process(false) == true) {
   2472a:	2800      	cmp	r0, #0
   2472c:	d1fa      	bne.n	24724 <z_impl_log_panic+0x18>
	panic_mode = true;
   2472e:	2301      	movs	r3, #1
   24730:	703b      	strb	r3, [r7, #0]
}
   24732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   24734:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   24736:	795b      	ldrb	r3, [r3, #5]
   24738:	b11b      	cbz	r3, 24742 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   2473a:	6823      	ldr	r3, [r4, #0]
   2473c:	4620      	mov	r0, r4
   2473e:	691b      	ldr	r3, [r3, #16]
   24740:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   24742:	3501      	adds	r5, #1
   24744:	3410      	adds	r4, #16
   24746:	e7eb      	b.n	24720 <z_impl_log_panic+0x14>
   24748:	2002bc57 	.word	0x2002bc57
   2474c:	0003c3bc 	.word	0x0003c3bc
   24750:	0003c3cc 	.word	0x0003c3cc

00024754 <log_free>:
{
   24754:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   24756:	3804      	subs	r0, #4
   24758:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2475a:	e8d0 3fef 	ldaex	r3, [r0]
   2475e:	1e5a      	subs	r2, r3, #1
   24760:	e8c0 2fe1 	stlex	r1, r2, [r0]
   24764:	2900      	cmp	r1, #0
   24766:	d1f8      	bne.n	2475a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   24768:	2b01      	cmp	r3, #1
   2476a:	d103      	bne.n	24774 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   2476c:	4803      	ldr	r0, [pc, #12]	; (2477c <log_free+0x28>)
   2476e:	a901      	add	r1, sp, #4
   24770:	f011 f846 	bl	35800 <k_mem_slab_free>
}
   24774:	b003      	add	sp, #12
   24776:	f85d fb04 	ldr.w	pc, [sp], #4
   2477a:	bf00      	nop
   2477c:	200235d0 	.word	0x200235d0

00024780 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   24780:	2320      	movs	r3, #32
   24782:	4902      	ldr	r1, [pc, #8]	; (2478c <log_msg_pool_init+0xc>)
   24784:	461a      	mov	r2, r3
   24786:	4802      	ldr	r0, [pc, #8]	; (24790 <log_msg_pool_init+0x10>)
   24788:	f016 b98a 	b.w	3aaa0 <k_mem_slab_init>
   2478c:	200332a8 	.word	0x200332a8
   24790:	200235f0 	.word	0x200235f0

00024794 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   24794:	2300      	movs	r3, #0
{
   24796:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   24798:	4d09      	ldr	r5, [pc, #36]	; (247c0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   2479a:	9301      	str	r3, [sp, #4]
   2479c:	2001      	movs	r0, #1
   2479e:	f7ff fe7f 	bl	244a0 <z_impl_log_process>
   247a2:	4604      	mov	r4, r0
			log_dropped();
   247a4:	f7ff fde0 	bl	24368 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   247a8:	2200      	movs	r2, #0
   247aa:	2300      	movs	r3, #0
   247ac:	4628      	mov	r0, r5
   247ae:	a901      	add	r1, sp, #4
   247b0:	f010 fff4 	bl	3579c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   247b4:	b108      	cbz	r0, 247ba <log_msg_no_space_handle+0x26>
   247b6:	2c00      	cmp	r4, #0
   247b8:	d1f0      	bne.n	2479c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   247ba:	9801      	ldr	r0, [sp, #4]
   247bc:	b003      	add	sp, #12
   247be:	bd30      	pop	{r4, r5, pc}
   247c0:	200235f0 	.word	0x200235f0

000247c4 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   247c4:	2300      	movs	r3, #0
{
   247c6:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   247c8:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   247ca:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   247cc:	4806      	ldr	r0, [pc, #24]	; (247e8 <log_msg_chunk_alloc+0x24>)
   247ce:	2300      	movs	r3, #0
   247d0:	a901      	add	r1, sp, #4
   247d2:	f010 ffe3 	bl	3579c <k_mem_slab_alloc>
	if (err != 0) {
   247d6:	b110      	cbz	r0, 247de <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   247d8:	f7ff ffdc 	bl	24794 <log_msg_no_space_handle>
   247dc:	9001      	str	r0, [sp, #4]
}
   247de:	9801      	ldr	r0, [sp, #4]
   247e0:	b003      	add	sp, #12
   247e2:	f85d fb04 	ldr.w	pc, [sp], #4
   247e6:	bf00      	nop
   247e8:	200235f0 	.word	0x200235f0

000247ec <msg_free>:
{
   247ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   247ee:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   247f0:	7a45      	ldrb	r5, [r0, #9]
{
   247f2:	b085      	sub	sp, #20
   247f4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   247f6:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   247f8:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   247fc:	d41c      	bmi.n	24838 <msg_free+0x4c>
   247fe:	b1dd      	cbz	r5, 24838 <msg_free+0x4c>
		uint32_t smask = 0;
   24800:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   24802:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   24804:	4631      	mov	r1, r6
   24806:	9801      	ldr	r0, [sp, #4]
   24808:	f013 ff3d 	bl	38686 <log_msg_arg_get>
   2480c:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   2480e:	f7ff fe39 	bl	24484 <log_is_strdup>
   24812:	b170      	cbz	r0, 24832 <msg_free+0x46>
				if (smask == 0) {
   24814:	b934      	cbnz	r4, 24824 <msg_free+0x38>
					smask = z_log_get_s_mask(
   24816:	9b01      	ldr	r3, [sp, #4]
   24818:	4629      	mov	r1, r5
   2481a:	6918      	ldr	r0, [r3, #16]
   2481c:	f7ff fd3e 	bl	2429c <z_log_get_s_mask>
					if (smask == 0) {
   24820:	4604      	mov	r4, r0
   24822:	b148      	cbz	r0, 24838 <msg_free+0x4c>
				if (smask & BIT(i)) {
   24824:	fa24 f306 	lsr.w	r3, r4, r6
   24828:	07d9      	lsls	r1, r3, #31
   2482a:	d502      	bpl.n	24832 <msg_free+0x46>
					log_free(buf);
   2482c:	4638      	mov	r0, r7
   2482e:	f7ff ff91 	bl	24754 <log_free>
		for (i = 0; i < nargs; i++) {
   24832:	3601      	adds	r6, #1
   24834:	42ae      	cmp	r6, r5
   24836:	d3e5      	bcc.n	24804 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   24838:	9b01      	ldr	r3, [sp, #4]
   2483a:	7a1a      	ldrb	r2, [r3, #8]
   2483c:	0792      	lsls	r2, r2, #30
   2483e:	d504      	bpl.n	2484a <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   24840:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   24842:	4c08      	ldr	r4, [pc, #32]	; (24864 <msg_free+0x78>)
   24844:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   24846:	9b03      	ldr	r3, [sp, #12]
   24848:	b92b      	cbnz	r3, 24856 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   2484a:	4806      	ldr	r0, [pc, #24]	; (24864 <msg_free+0x78>)
   2484c:	a901      	add	r1, sp, #4
   2484e:	f010 ffd7 	bl	35800 <k_mem_slab_free>
}
   24852:	b005      	add	sp, #20
   24854:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   24856:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   24858:	4620      	mov	r0, r4
   2485a:	a903      	add	r1, sp, #12
   2485c:	f010 ffd0 	bl	35800 <k_mem_slab_free>
		cont = next;
   24860:	9503      	str	r5, [sp, #12]
   24862:	e7f0      	b.n	24846 <msg_free+0x5a>
   24864:	200235f0 	.word	0x200235f0

00024868 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   24868:	b40e      	push	{r1, r2, r3}
   2486a:	b503      	push	{r0, r1, lr}
   2486c:	ab03      	add	r3, sp, #12
   2486e:	f853 2b04 	ldr.w	r2, [r3], #4
   24872:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   24874:	4804      	ldr	r0, [pc, #16]	; (24888 <print_formatted+0x20>)
	va_start(args, fmt);
   24876:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   24878:	f7ff f812 	bl	238a0 <cbvprintf>
	va_end(args);

	return length;
}
   2487c:	b002      	add	sp, #8
   2487e:	f85d eb04 	ldr.w	lr, [sp], #4
   24882:	b003      	add	sp, #12
   24884:	4770      	bx	lr
   24886:	bf00      	nop
   24888:	00038b2f 	.word	0x00038b2f

0002488c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   2488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   24890:	f011 0402 	ands.w	r4, r1, #2
{
   24894:	b085      	sub	sp, #20
   24896:	4606      	mov	r6, r0
   24898:	4690      	mov	r8, r2
   2489a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   2489e:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   248a2:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   248a6:	d007      	beq.n	248b8 <prefix_print+0x2c>
	if (!format) {
   248a8:	f011 0f44 	tst.w	r1, #68	; 0x44
   248ac:	d137      	bne.n	2491e <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   248ae:	461a      	mov	r2, r3
   248b0:	4932      	ldr	r1, [pc, #200]	; (2497c <prefix_print+0xf0>)
   248b2:	f7ff ffd9 	bl	24868 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   248b6:	4604      	mov	r4, r0
	if (color) {
   248b8:	f1b9 0f00 	cmp.w	r9, #0
   248bc:	d00a      	beq.n	248d4 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   248be:	4b30      	ldr	r3, [pc, #192]	; (24980 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   248c0:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   248c2:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   248c6:	4b2f      	ldr	r3, [pc, #188]	; (24984 <prefix_print+0xf8>)
   248c8:	492f      	ldr	r1, [pc, #188]	; (24988 <prefix_print+0xfc>)
   248ca:	2a00      	cmp	r2, #0
   248cc:	bf08      	it	eq
   248ce:	461a      	moveq	r2, r3
   248d0:	f7ff ffca 	bl	24868 <print_formatted>
	if (level_on) {
   248d4:	b13d      	cbz	r5, 248e6 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   248d6:	4b2d      	ldr	r3, [pc, #180]	; (2498c <prefix_print+0x100>)
   248d8:	4630      	mov	r0, r6
   248da:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   248de:	492c      	ldr	r1, [pc, #176]	; (24990 <prefix_print+0x104>)
   248e0:	f7ff ffc2 	bl	24868 <print_formatted>
   248e4:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   248e6:	f1b8 0f00 	cmp.w	r8, #0
   248ea:	d044      	beq.n	24976 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   248ec:	2301      	movs	r3, #1
   248ee:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   248f2:	4b28      	ldr	r3, [pc, #160]	; (24994 <prefix_print+0x108>)
   248f4:	f017 0f10 	tst.w	r7, #16
   248f8:	4f27      	ldr	r7, [pc, #156]	; (24998 <prefix_print+0x10c>)
   248fa:	bf18      	it	ne
   248fc:	461f      	movne	r7, r3
   248fe:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   24902:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   24906:	f7ff fd3b 	bl	24380 <log_source_name_get>
   2490a:	4639      	mov	r1, r7
   2490c:	4602      	mov	r2, r0
   2490e:	4630      	mov	r0, r6
   24910:	f7ff ffaa 	bl	24868 <print_formatted>
   24914:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   24916:	4420      	add	r0, r4
   24918:	b005      	add	sp, #20
   2491a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   2491e:	4a1f      	ldr	r2, [pc, #124]	; (2499c <prefix_print+0x110>)
   24920:	6811      	ldr	r1, [r2, #0]
   24922:	b331      	cbz	r1, 24972 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   24924:	4a1e      	ldr	r2, [pc, #120]	; (249a0 <prefix_print+0x114>)
   24926:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   2492a:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   2492c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   24930:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   24934:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   24938:	fbb4 f2fe 	udiv	r2, r4, lr
   2493c:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   24940:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   24944:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24948:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   2494c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24950:	fb01 441b 	mls	r4, r1, fp, r4
   24954:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   24958:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   2495c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   24960:	e9cd b101 	strd	fp, r1, [sp, #4]
   24964:	fb0a e113 	mls	r1, sl, r3, lr
   24968:	9100      	str	r1, [sp, #0]
   2496a:	490e      	ldr	r1, [pc, #56]	; (249a4 <prefix_print+0x118>)
   2496c:	f7ff ff7c 	bl	24868 <print_formatted>
   24970:	e7a1      	b.n	248b6 <prefix_print+0x2a>
		length = 0;
   24972:	4608      	mov	r0, r1
   24974:	e79f      	b.n	248b6 <prefix_print+0x2a>
	total += print_formatted(log_output,
   24976:	4f08      	ldr	r7, [pc, #32]	; (24998 <prefix_print+0x10c>)
   24978:	e7c1      	b.n	248fe <prefix_print+0x72>
   2497a:	bf00      	nop
   2497c:	0003e7c2 	.word	0x0003e7c2
   24980:	0003c69c 	.word	0x0003c69c
   24984:	0003e7b4 	.word	0x0003e7b4
   24988:	0003ff8b 	.word	0x0003ff8b
   2498c:	0003c6b0 	.word	0x0003c6b0
   24990:	0003e7e7 	.word	0x0003e7e7
   24994:	0003e7be 	.word	0x0003e7be
   24998:	0003e7b9 	.word	0x0003e7b9
   2499c:	2002360c 	.word	0x2002360c
   249a0:	20023610 	.word	0x20023610
   249a4:	0003e7cb 	.word	0x0003e7cb

000249a8 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   249a8:	b538      	push	{r3, r4, r5, lr}
   249aa:	460c      	mov	r4, r1
	if (color) {
   249ac:	07e1      	lsls	r1, r4, #31
{
   249ae:	4605      	mov	r5, r0
	if (color) {
   249b0:	d503      	bpl.n	249ba <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   249b2:	4a08      	ldr	r2, [pc, #32]	; (249d4 <postfix_print+0x2c>)
   249b4:	4908      	ldr	r1, [pc, #32]	; (249d8 <postfix_print+0x30>)
   249b6:	f7ff ff57 	bl	24868 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   249ba:	06e2      	lsls	r2, r4, #27
   249bc:	d408      	bmi.n	249d0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   249be:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   249c0:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   249c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   249c6:	bf4c      	ite	mi
   249c8:	4904      	ldrmi	r1, [pc, #16]	; (249dc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   249ca:	4905      	ldrpl	r1, [pc, #20]	; (249e0 <postfix_print+0x38>)
   249cc:	f7ff bf4c 	b.w	24868 <print_formatted>
}
   249d0:	bd38      	pop	{r3, r4, r5, pc}
   249d2:	bf00      	nop
   249d4:	0003e7b4 	.word	0x0003e7b4
   249d8:	0003ff8b 	.word	0x0003ff8b
   249dc:	00040192 	.word	0x00040192
   249e0:	00040191 	.word	0x00040191

000249e4 <hexdump_line_print>:
{
   249e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   249e8:	461d      	mov	r5, r3
   249ea:	9b08      	ldr	r3, [sp, #32]
   249ec:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   249ee:	06da      	lsls	r2, r3, #27
{
   249f0:	4604      	mov	r4, r0
   249f2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   249f4:	d405      	bmi.n	24a02 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   249f6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   249f8:	bf4c      	ite	mi
   249fa:	492b      	ldrmi	r1, [pc, #172]	; (24aa8 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   249fc:	492b      	ldrpl	r1, [pc, #172]	; (24aac <hexdump_line_print+0xc8>)
   249fe:	f7ff ff33 	bl	24868 <print_formatted>
{
   24a02:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   24a06:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 24ab4 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   24a0a:	45a8      	cmp	r8, r5
   24a0c:	db2d      	blt.n	24a6a <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   24a0e:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   24a10:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 24ab8 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   24a14:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 24abc <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   24a18:	f8df a098 	ldr.w	sl, [pc, #152]	; 24ab4 <hexdump_line_print+0xd0>
		if (i < length) {
   24a1c:	42bd      	cmp	r5, r7
   24a1e:	d232      	bcs.n	24a86 <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   24a20:	4649      	mov	r1, r9
   24a22:	4620      	mov	r0, r4
   24a24:	5d72      	ldrb	r2, [r6, r5]
   24a26:	f7ff ff1f 	bl	24868 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   24a2a:	3501      	adds	r5, #1
   24a2c:	2d10      	cmp	r5, #16
   24a2e:	d123      	bne.n	24a78 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   24a30:	4620      	mov	r0, r4
   24a32:	491f      	ldr	r1, [pc, #124]	; (24ab0 <hexdump_line_print+0xcc>)
   24a34:	f7ff ff18 	bl	24868 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   24a38:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   24a3a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 24ab4 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   24a3e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 24ac0 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   24a42:	f8df a080 	ldr.w	sl, [pc, #128]	; 24ac4 <hexdump_line_print+0xe0>
		if (i < length) {
   24a46:	42af      	cmp	r7, r5
   24a48:	d929      	bls.n	24a9e <hexdump_line_print+0xba>
			char c = (char)data[i];
   24a4a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   24a4c:	4651      	mov	r1, sl
   24a4e:	f812 3009 	ldrb.w	r3, [r2, r9]
   24a52:	4620      	mov	r0, r4
   24a54:	f013 0f97 	tst.w	r3, #151	; 0x97
   24a58:	bf08      	it	eq
   24a5a:	222e      	moveq	r2, #46	; 0x2e
   24a5c:	f7ff ff04 	bl	24868 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   24a60:	3501      	adds	r5, #1
   24a62:	2d10      	cmp	r5, #16
   24a64:	d114      	bne.n	24a90 <hexdump_line_print+0xac>
}
   24a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   24a6a:	4649      	mov	r1, r9
   24a6c:	4620      	mov	r0, r4
   24a6e:	f7ff fefb 	bl	24868 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   24a72:	f108 0801 	add.w	r8, r8, #1
   24a76:	e7c8      	b.n	24a0a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   24a78:	076a      	lsls	r2, r5, #29
   24a7a:	d1cf      	bne.n	24a1c <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   24a7c:	4651      	mov	r1, sl
   24a7e:	4620      	mov	r0, r4
   24a80:	f7ff fef2 	bl	24868 <print_formatted>
   24a84:	e7ca      	b.n	24a1c <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   24a86:	4641      	mov	r1, r8
   24a88:	4620      	mov	r0, r4
   24a8a:	f7ff feed 	bl	24868 <print_formatted>
   24a8e:	e7cc      	b.n	24a2a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   24a90:	076b      	lsls	r3, r5, #29
   24a92:	d1d8      	bne.n	24a46 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   24a94:	4641      	mov	r1, r8
   24a96:	4620      	mov	r0, r4
   24a98:	f7ff fee6 	bl	24868 <print_formatted>
   24a9c:	e7d3      	b.n	24a46 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   24a9e:	4641      	mov	r1, r8
   24aa0:	4620      	mov	r0, r4
   24aa2:	f7ff fee1 	bl	24868 <print_formatted>
   24aa6:	e7db      	b.n	24a60 <hexdump_line_print+0x7c>
   24aa8:	00040192 	.word	0x00040192
   24aac:	00040191 	.word	0x00040191
   24ab0:	0003e7f7 	.word	0x0003e7f7
   24ab4:	0003e7f5 	.word	0x0003e7f5
   24ab8:	0003e7f3 	.word	0x0003e7f3
   24abc:	0003e7ed 	.word	0x0003e7ed
   24ac0:	000409c7 	.word	0x000409c7
   24ac4:	0003e7f9 	.word	0x0003e7f9

00024ac8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   24ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   24acc:	7a8b      	ldrb	r3, [r1, #10]
   24ace:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   24ad0:	f013 0807 	ands.w	r8, r3, #7
{
   24ad4:	4605      	mov	r5, r0
   24ad6:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   24ad8:	7a0a      	ldrb	r2, [r1, #8]
   24ada:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   24adc:	d021      	beq.n	24b22 <log_output_msg_process+0x5a>
   24ade:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   24ae0:	8949      	ldrh	r1, [r1, #10]
   24ae2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   24ae6:	f3c1 1189 	ubfx	r1, r1, #6, #10
   24aea:	e9cd 8300 	strd	r8, r3, [sp]
   24aee:	9102      	str	r1, [sp, #8]
   24af0:	68f3      	ldr	r3, [r6, #12]
   24af2:	4639      	mov	r1, r7
   24af4:	f002 0201 	and.w	r2, r2, #1
   24af8:	f7ff fec8 	bl	2488c <prefix_print>
   24afc:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   24afe:	7a34      	ldrb	r4, [r6, #8]
   24b00:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   24b02:	f014 0401 	ands.w	r4, r4, #1
   24b06:	d00e      	beq.n	24b26 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
   24b08:	4629      	mov	r1, r5
   24b0a:	4630      	mov	r0, r6
   24b0c:	f013 fea5 	bl	3885a <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   24b10:	f1b8 0f00 	cmp.w	r8, #0
   24b14:	d02b      	beq.n	24b6e <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
   24b16:	4642      	mov	r2, r8
   24b18:	4639      	mov	r1, r7
   24b1a:	4628      	mov	r0, r5
   24b1c:	f7ff ff44 	bl	249a8 <postfix_print>
   24b20:	e025      	b.n	24b6e <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   24b22:	46c1      	mov	r9, r8
   24b24:	e7eb      	b.n	24afe <log_output_msg_process+0x36>
	} else if (raw_string) {
   24b26:	f1b8 0f00 	cmp.w	r8, #0
   24b2a:	d126      	bne.n	24b7a <log_output_msg_process+0xb2>
	size_t offset = 0;
   24b2c:	4627      	mov	r7, r4
		length = log_output->size;
   24b2e:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   24b30:	aa06      	add	r2, sp, #24
		length = log_output->size;
   24b32:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   24b34:	4630      	mov	r0, r6
   24b36:	463b      	mov	r3, r7
   24b38:	68a9      	ldr	r1, [r5, #8]
   24b3a:	f013 fe7a 	bl	38832 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   24b3e:	9a06      	ldr	r2, [sp, #24]
   24b40:	686b      	ldr	r3, [r5, #4]
   24b42:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   24b44:	b13a      	cbz	r2, 24b56 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
   24b46:	68ab      	ldr	r3, [r5, #8]
   24b48:	4413      	add	r3, r2
   24b4a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   24b4e:	f1a4 030a 	sub.w	r3, r4, #10
   24b52:	425c      	negs	r4, r3
   24b54:	415c      	adcs	r4, r3
		log_output_flush(log_output);
   24b56:	4628      	mov	r0, r5
   24b58:	f013 ffdc 	bl	38b14 <log_output_flush>
		offset += length;
   24b5c:	9b06      	ldr	r3, [sp, #24]
   24b5e:	441f      	add	r7, r3
	} while (length > 0);
   24b60:	2b00      	cmp	r3, #0
   24b62:	d1e4      	bne.n	24b2e <log_output_msg_process+0x66>
	if (eol) {
   24b64:	b11c      	cbz	r4, 24b6e <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
   24b66:	4628      	mov	r0, r5
   24b68:	4913      	ldr	r1, [pc, #76]	; (24bb8 <log_output_msg_process+0xf0>)
   24b6a:	f7ff fe7d 	bl	24868 <print_formatted>
	}

	log_output_flush(log_output);
   24b6e:	4628      	mov	r0, r5
   24b70:	f013 ffd0 	bl	38b14 <log_output_flush>
}
   24b74:	b00a      	add	sp, #40	; 0x28
   24b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   24b7a:	4630      	mov	r0, r6
   24b7c:	f013 fdb1 	bl	386e2 <log_msg_str_get>
   24b80:	490e      	ldr	r1, [pc, #56]	; (24bbc <log_output_msg_process+0xf4>)
   24b82:	4602      	mov	r2, r0
   24b84:	4628      	mov	r0, r5
   24b86:	f7ff fe6f 	bl	24868 <print_formatted>
		length = sizeof(buf);
   24b8a:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   24b8e:	aa05      	add	r2, sp, #20
   24b90:	4623      	mov	r3, r4
   24b92:	4630      	mov	r0, r6
   24b94:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   24b96:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   24b9a:	f013 fe4a 	bl	38832 <log_msg_hexdump_data_get>
		if (length) {
   24b9e:	9a05      	ldr	r2, [sp, #20]
   24ba0:	2a00      	cmp	r2, #0
   24ba2:	d0b8      	beq.n	24b16 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
   24ba4:	464b      	mov	r3, r9
   24ba6:	4628      	mov	r0, r5
   24ba8:	9700      	str	r7, [sp, #0]
   24baa:	a906      	add	r1, sp, #24
   24bac:	f7ff ff1a 	bl	249e4 <hexdump_line_print>
			offset += length;
   24bb0:	9b05      	ldr	r3, [sp, #20]
   24bb2:	441c      	add	r4, r3
		length = sizeof(buf);
   24bb4:	e7eb      	b.n	24b8e <log_output_msg_process+0xc6>
   24bb6:	bf00      	nop
   24bb8:	0003e7fc 	.word	0x0003e7fc
   24bbc:	0003ff8b 	.word	0x0003ff8b

00024bc0 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   24bc0:	f242 730f 	movw	r3, #9999	; 0x270f
{
   24bc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   24bc6:	428b      	cmp	r3, r1
   24bc8:	bf28      	it	cs
   24bca:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   24bcc:	6805      	ldr	r5, [r0, #0]
{
   24bce:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   24bd0:	2105      	movs	r1, #5
   24bd2:	4668      	mov	r0, sp
   24bd4:	4a0d      	ldr	r2, [pc, #52]	; (24c0c <log_output_dropped_process+0x4c>)
   24bd6:	f013 f80e 	bl	37bf6 <snprintk>
   24bda:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   24bdc:	6863      	ldr	r3, [r4, #4]
   24bde:	4628      	mov	r0, r5
   24be0:	220b      	movs	r2, #11
   24be2:	685b      	ldr	r3, [r3, #4]
   24be4:	490a      	ldr	r1, [pc, #40]	; (24c10 <log_output_dropped_process+0x50>)
   24be6:	f013 fe2b 	bl	38840 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   24bea:	6863      	ldr	r3, [r4, #4]
   24bec:	4632      	mov	r2, r6
   24bee:	4669      	mov	r1, sp
   24bf0:	4628      	mov	r0, r5
   24bf2:	685b      	ldr	r3, [r3, #4]
   24bf4:	f013 fe24 	bl	38840 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   24bf8:	6863      	ldr	r3, [r4, #4]
   24bfa:	221b      	movs	r2, #27
   24bfc:	4628      	mov	r0, r5
   24bfe:	685b      	ldr	r3, [r3, #4]
   24c00:	4904      	ldr	r1, [pc, #16]	; (24c14 <log_output_dropped_process+0x54>)
   24c02:	f013 fe1d 	bl	38840 <buffer_write>
		     log_output->control_block->ctx);
}
   24c06:	b002      	add	sp, #8
   24c08:	bd70      	pop	{r4, r5, r6, pc}
   24c0a:	bf00      	nop
   24c0c:	0003fdcf 	.word	0x0003fdcf
   24c10:	0003e83a 	.word	0x0003e83a
   24c14:	0003e81e 	.word	0x0003e81e

00024c18 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   24c18:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   24c1a:	2100      	movs	r1, #0
	timestamp_div = 1U;
   24c1c:	4a07      	ldr	r2, [pc, #28]	; (24c3c <log_output_timestamp_freq_set+0x24>)
{
   24c1e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   24c20:	4c07      	ldr	r4, [pc, #28]	; (24c40 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   24c22:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   24c24:	42a0      	cmp	r0, r4
   24c26:	d804      	bhi.n	24c32 <log_output_timestamp_freq_set+0x1a>
   24c28:	b101      	cbz	r1, 24c2c <log_output_timestamp_freq_set+0x14>
   24c2a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   24c2c:	4b05      	ldr	r3, [pc, #20]	; (24c44 <log_output_timestamp_freq_set+0x2c>)
   24c2e:	6018      	str	r0, [r3, #0]
}
   24c30:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   24c32:	2101      	movs	r1, #1
		frequency /= 2U;
   24c34:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   24c36:	005b      	lsls	r3, r3, #1
   24c38:	e7f4      	b.n	24c24 <log_output_timestamp_freq_set+0xc>
   24c3a:	bf00      	nop
   24c3c:	20023610 	.word	0x20023610
   24c40:	000f4240 	.word	0x000f4240
   24c44:	2002360c 	.word	0x2002360c

00024c48 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   24c48:	2201      	movs	r2, #1
   24c4a:	4b01      	ldr	r3, [pc, #4]	; (24c50 <log_backend_rtt_init+0x8>)
   24c4c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   24c4e:	4770      	bx	lr
   24c50:	2002bc68 	.word	0x2002bc68

00024c54 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   24c54:	2201      	movs	r2, #1
   24c56:	4b02      	ldr	r3, [pc, #8]	; (24c60 <panic+0xc>)
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   24c58:	4802      	ldr	r0, [pc, #8]	; (24c64 <panic+0x10>)
   24c5a:	701a      	strb	r2, [r3, #0]
   24c5c:	f013 bf5a 	b.w	38b14 <log_output_flush>
   24c60:	2002bc69 	.word	0x2002bc69
   24c64:	0003c6dc 	.word	0x0003c6dc

00024c68 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   24c68:	4801      	ldr	r0, [pc, #4]	; (24c70 <dropped+0x8>)
   24c6a:	f7ff bfa9 	b.w	24bc0 <log_output_dropped_process>
   24c6e:	bf00      	nop
   24c70:	0003c6dc 	.word	0x0003c6dc

00024c74 <put>:
{
   24c74:	b510      	push	{r4, lr}
   24c76:	460c      	mov	r4, r1
	log_msg_get(msg);
   24c78:	4608      	mov	r0, r1
   24c7a:	f013 fcf8 	bl	3866e <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   24c7e:	4621      	mov	r1, r4
   24c80:	4804      	ldr	r0, [pc, #16]	; (24c94 <put+0x20>)
   24c82:	220f      	movs	r2, #15
   24c84:	f7ff ff20 	bl	24ac8 <log_output_msg_process>
	log_msg_put(msg);
   24c88:	4620      	mov	r0, r4
}
   24c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24c8e:	f013 bd19 	b.w	386c4 <log_msg_put>
   24c92:	bf00      	nop
   24c94:	0003c6dc 	.word	0x0003c6dc

00024c98 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   24c98:	4b05      	ldr	r3, [pc, #20]	; (24cb0 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   24c9a:	781b      	ldrb	r3, [r3, #0]
   24c9c:	b11b      	cbz	r3, 24ca6 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   24c9e:	f241 3088 	movw	r0, #5000	; 0x1388
   24ca2:	f016 b8c2 	b.w	3ae2a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   24ca6:	20a4      	movs	r0, #164	; 0xa4
   24ca8:	2100      	movs	r1, #0
   24caa:	f011 bb01 	b.w	362b0 <z_impl_k_sleep>
   24cae:	bf00      	nop
   24cb0:	2002bc69 	.word	0x2002bc69

00024cb4 <data_out_block_mode>:
{
   24cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   24cb8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 24d4c <data_out_block_mode+0x98>
{
   24cbc:	4607      	mov	r7, r0
   24cbe:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   24cc0:	2404      	movs	r4, #4
   24cc2:	46ca      	mov	sl, r9
	return z_impl_k_mutex_lock(mutex, timeout);
   24cc4:	f8df b088 	ldr.w	fp, [pc, #136]	; 24d50 <data_out_block_mode+0x9c>
		if (!is_sync_mode()) {
   24cc8:	f899 3000 	ldrb.w	r3, [r9]
   24ccc:	b933      	cbnz	r3, 24cdc <data_out_block_mode+0x28>
   24cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24cd6:	4658      	mov	r0, fp
   24cd8:	f010 fe6e 	bl	359b8 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   24cdc:	4632      	mov	r2, r6
   24cde:	4639      	mov	r1, r7
   24ce0:	2000      	movs	r0, #0
   24ce2:	f000 fe6d 	bl	259c0 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
   24ce6:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   24cea:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
   24cec:	b913      	cbnz	r3, 24cf4 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
   24cee:	4658      	mov	r0, fp
   24cf0:	f010 feda 	bl	35aa8 <z_impl_k_mutex_unlock>
		if (ret) {
   24cf4:	4d14      	ldr	r5, [pc, #80]	; (24d48 <data_out_block_mode+0x94>)
   24cf6:	f1b8 0f00 	cmp.w	r8, #0
   24cfa:	d018      	beq.n	24d2e <data_out_block_mode+0x7a>
	host_present = true;
   24cfc:	2301      	movs	r3, #1
   24cfe:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   24d00:	f89a 3000 	ldrb.w	r3, [sl]
   24d04:	b933      	cbnz	r3, 24d14 <data_out_block_mode+0x60>
}
   24d06:	4630      	mov	r0, r6
   24d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
   24d0c:	b95c      	cbnz	r4, 24d26 <data_out_block_mode+0x72>
		host_present = false;
   24d0e:	702c      	strb	r4, [r5, #0]
   24d10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   24d14:	2000      	movs	r0, #0
   24d16:	f000 fed3 	bl	25ac0 <SEGGER_RTT_HasDataUp>
   24d1a:	2800      	cmp	r0, #0
   24d1c:	d0f3      	beq.n	24d06 <data_out_block_mode+0x52>
   24d1e:	782b      	ldrb	r3, [r5, #0]
   24d20:	2b00      	cmp	r3, #0
   24d22:	d1f3      	bne.n	24d0c <data_out_block_mode+0x58>
   24d24:	e7ef      	b.n	24d06 <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
   24d26:	3c01      	subs	r4, #1
   24d28:	f7ff ffb6 	bl	24c98 <on_failed_write.part.0>
   24d2c:	e7f2      	b.n	24d14 <data_out_block_mode+0x60>
		} else if (host_present) {
   24d2e:	782b      	ldrb	r3, [r5, #0]
   24d30:	b113      	cbz	r3, 24d38 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
   24d32:	3c01      	subs	r4, #1
   24d34:	d104      	bne.n	24d40 <data_out_block_mode+0x8c>
		host_present = false;
   24d36:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   24d38:	782b      	ldrb	r3, [r5, #0]
   24d3a:	2b00      	cmp	r3, #0
   24d3c:	d1c4      	bne.n	24cc8 <data_out_block_mode+0x14>
   24d3e:	e7e2      	b.n	24d06 <data_out_block_mode+0x52>
   24d40:	f7ff ffaa 	bl	24c98 <on_failed_write.part.0>
   24d44:	e7f8      	b.n	24d38 <data_out_block_mode+0x84>
   24d46:	bf00      	nop
   24d48:	2002bc68 	.word	0x2002bc68
   24d4c:	2002bc69 	.word	0x2002bc69
   24d50:	200207ec 	.word	0x200207ec

00024d54 <boot_request_upgrade>:
#endif
	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   24d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24d56:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   24d58:	a901      	add	r1, sp, #4
   24d5a:	2007      	movs	r0, #7
   24d5c:	f000 f97c 	bl	25058 <flash_area_open>
	if (rc) {
   24d60:	4604      	mov	r4, r0
   24d62:	bb10      	cbnz	r0, 24daa <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   24d64:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   24d66:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   24d68:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   24d6a:	4a12      	ldr	r2, [pc, #72]	; (24db4 <boot_request_upgrade+0x60>)
   24d6c:	3910      	subs	r1, #16
   24d6e:	f014 f8b1 	bl	38ed4 <flash_area_write>
   24d72:	4604      	mov	r4, r0
	flash_area_close(fa);
   24d74:	9801      	ldr	r0, [sp, #4]
   24d76:	f014 f88f 	bl	38e98 <flash_area_close>
	uint8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   24d7a:	b9b4      	cbnz	r4, 24daa <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   24d7c:	b1c5      	cbz	r5, 24db0 <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   24d7e:	2007      	movs	r0, #7
   24d80:	f013 ff1e 	bl	38bc0 <boot_flag_write.constprop.0>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   24d84:	4604      	mov	r4, r0
   24d86:	b980      	cbnz	r0, 24daa <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   24d88:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   24d8a:	2007      	movs	r0, #7
   24d8c:	a901      	add	r1, sp, #4
   24d8e:	f000 f963 	bl	25058 <flash_area_open>
	if (rc) {
   24d92:	4604      	mov	r4, r0
   24d94:	b948      	cbnz	r0, 24daa <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   24d96:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   24d98:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   24d9a:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   24d9c:	3928      	subs	r1, #40	; 0x28
   24d9e:	f013 fedd 	bl	38b5c <boot_write_trailer_byte>
   24da2:	4604      	mov	r4, r0
	flash_area_close(fa);
   24da4:	9801      	ldr	r0, [sp, #4]
   24da6:	f014 f877 	bl	38e98 <flash_area_close>
	return rc;
#else
	return 0;
#endif /* FLASH_AREA_IMAGE_SECONDARY */

}
   24daa:	4620      	mov	r0, r4
   24dac:	b003      	add	sp, #12
   24dae:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   24db0:	2502      	movs	r5, #2
   24db2:	e7ea      	b.n	24d8a <boot_request_upgrade+0x36>
   24db4:	0003c6ec 	.word	0x0003c6ec

00024db8 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   24db8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24dba:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   24dbc:	4c0f      	ldr	r4, [pc, #60]	; (24dfc <z_impl_zsock_socket+0x44>)
   24dbe:	4e10      	ldr	r6, [pc, #64]	; (24e00 <z_impl_zsock_socket+0x48>)
   24dc0:	42b4      	cmp	r4, r6
   24dc2:	d307      	bcc.n	24dd4 <z_impl_zsock_socket+0x1c>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   24dc4:	f014 fa7f 	bl	392c6 <__errno>
   24dc8:	236a      	movs	r3, #106	; 0x6a
   24dca:	6003      	str	r3, [r0, #0]
	return -1;
}
   24dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24dd0:	b002      	add	sp, #8
   24dd2:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
   24dd4:	6823      	ldr	r3, [r4, #0]
   24dd6:	42ab      	cmp	r3, r5
   24dd8:	d000      	beq.n	24ddc <z_impl_zsock_socket+0x24>
   24dda:	b96b      	cbnz	r3, 24df8 <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
   24ddc:	4628      	mov	r0, r5
   24dde:	6863      	ldr	r3, [r4, #4]
   24de0:	e9cd 1200 	strd	r1, r2, [sp]
   24de4:	4798      	blx	r3
   24de6:	e9dd 1200 	ldrd	r1, r2, [sp]
   24dea:	b128      	cbz	r0, 24df8 <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
   24dec:	4628      	mov	r0, r5
   24dee:	68a3      	ldr	r3, [r4, #8]
}
   24df0:	b002      	add	sp, #8
   24df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
   24df6:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   24df8:	340c      	adds	r4, #12
   24dfa:	e7e1      	b.n	24dc0 <z_impl_zsock_socket+0x8>
   24dfc:	0003c2c0 	.word	0x0003c2c0
   24e00:	0003c2cc 	.word	0x0003c2cc

00024e04 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   24e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   24e08:	1e14      	subs	r4, r2, #0
{
   24e0a:	b09b      	sub	sp, #108	; 0x6c
   24e0c:	4606      	mov	r6, r0
   24e0e:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
   24e10:	db30      	blt.n	24e74 <z_impl_zsock_poll+0x70>
   24e12:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   24e16:	f240 30e7 	movw	r0, #999	; 0x3e7
   24e1a:	2100      	movs	r1, #0
   24e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24e20:	2300      	movs	r3, #0
   24e22:	fbc5 0104 	smlal	r0, r1, r5, r4
   24e26:	f7f7 fcc7 	bl	1c7b8 <__aeabi_uldivmod>
   24e2a:	4682      	mov	sl, r0
   24e2c:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   24e2e:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   24e30:	4650      	mov	r0, sl
   24e32:	4659      	mov	r1, fp
   24e34:	f016 f8bf 	bl	3afb6 <z_timeout_end_calc>

	pev = poll_events;
   24e38:	ab0b      	add	r3, sp, #44	; 0x2c
   24e3a:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
   24e3c:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
   24e3e:	4633      	mov	r3, r6
	bool offload = false;
   24e40:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
   24e42:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
   24e46:	f8dd 900c 	ldr.w	r9, [sp, #12]
   24e4a:	f1b9 0f00 	cmp.w	r9, #0
   24e4e:	d118      	bne.n	24e82 <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   24e50:	f1b8 0f00 	cmp.w	r8, #0
   24e54:	d049      	beq.n	24eea <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   24e56:	9b03      	ldr	r3, [sp, #12]
   24e58:	9401      	str	r4, [sp, #4]
   24e5a:	9300      	str	r3, [sp, #0]
   24e5c:	f44f 7282 	mov.w	r2, #260	; 0x104
   24e60:	4633      	mov	r3, r6
   24e62:	4629      	mov	r1, r5
   24e64:	4638      	mov	r0, r7
   24e66:	f013 ff1f 	bl	38ca8 <z_fdtable_call_ioctl>
   24e6a:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   24e6c:	4620      	mov	r0, r4
   24e6e:	b01b      	add	sp, #108	; 0x6c
   24e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   24e74:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   24e78:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
		poll_timeout = SYS_FOREVER_MS;
   24e7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24e80:	e7d5      	b.n	24e2e <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   24e82:	6818      	ldr	r0, [r3, #0]
   24e84:	2800      	cmp	r0, #0
   24e86:	db2c      	blt.n	24ee2 <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
   24e88:	a90a      	add	r1, sp, #40	; 0x28
   24e8a:	9306      	str	r3, [sp, #24]
   24e8c:	f7fe f9c6 	bl	2321c <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   24e90:	9b06      	ldr	r3, [sp, #24]
   24e92:	4601      	mov	r1, r0
   24e94:	b328      	cbz	r0, 24ee2 <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
   24e96:	aa1a      	add	r2, sp, #104	; 0x68
   24e98:	9201      	str	r2, [sp, #4]
   24e9a:	aa09      	add	r2, sp, #36	; 0x24
   24e9c:	9200      	str	r2, [sp, #0]
   24e9e:	9006      	str	r0, [sp, #24]
   24ea0:	f44f 7281 	mov.w	r2, #258	; 0x102
   24ea4:	980a      	ldr	r0, [sp, #40]	; 0x28
   24ea6:	9307      	str	r3, [sp, #28]
   24ea8:	f013 fefe 	bl	38ca8 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   24eac:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   24eb0:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   24eb2:	9b07      	ldr	r3, [sp, #28]
   24eb4:	d011      	beq.n	24eda <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
   24eb6:	f110 0f12 	cmn.w	r0, #18
   24eba:	9906      	ldr	r1, [sp, #24]
   24ebc:	d105      	bne.n	24eca <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   24ebe:	b90f      	cbnz	r7, 24ec4 <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
   24ec0:	460d      	mov	r5, r1
   24ec2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
   24ec4:	f04f 0801 	mov.w	r8, #1
   24ec8:	e00b      	b.n	24ee2 <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
   24eca:	b150      	cbz	r0, 24ee2 <z_impl_zsock_poll+0xde>
   24ecc:	9203      	str	r2, [sp, #12]
				errno = -result;
   24ece:	f014 f9fa 	bl	392c6 <__errno>
   24ed2:	9a03      	ldr	r2, [sp, #12]
   24ed4:	4252      	negs	r2, r2
   24ed6:	6002      	str	r2, [r0, #0]
				return -1;
   24ed8:	e03e      	b.n	24f58 <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
   24eda:	f04f 0a00 	mov.w	sl, #0
   24ede:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   24ee2:	3308      	adds	r3, #8
   24ee4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   24ee8:	e7af      	b.n	24e4a <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   24eea:	ea5a 030b 	orrs.w	r3, sl, fp
   24eee:	d016      	beq.n	24f1e <z_impl_zsock_poll+0x11a>
   24ef0:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   24ef4:	bf08      	it	eq
   24ef6:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   24efa:	d010      	beq.n	24f1e <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
   24efc:	f011 fcf8 	bl	368f0 <z_tick_get>
   24f00:	9b04      	ldr	r3, [sp, #16]
   24f02:	ebb3 0a00 	subs.w	sl, r3, r0
   24f06:	9b05      	ldr	r3, [sp, #20]
   24f08:	eb63 0b01 	sbc.w	fp, r3, r1
   24f0c:	f1ba 0f00 	cmp.w	sl, #0
   24f10:	f17b 0300 	sbcs.w	r3, fp, #0
   24f14:	bfbc      	itt	lt
   24f16:	f04f 0a00 	movlt.w	sl, #0
   24f1a:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   24f1e:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   24f22:	9909      	ldr	r1, [sp, #36]	; 0x24
   24f24:	ac0b      	add	r4, sp, #44	; 0x2c
   24f26:	4b34      	ldr	r3, [pc, #208]	; (24ff8 <z_impl_zsock_poll+0x1f4>)
   24f28:	1b09      	subs	r1, r1, r4
   24f2a:	1089      	asrs	r1, r1, #2
   24f2c:	4359      	muls	r1, r3
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   24f2e:	465b      	mov	r3, fp
   24f30:	4652      	mov	r2, sl
   24f32:	4620      	mov	r0, r4
   24f34:	f011 fd78 	bl	36a28 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   24f38:	f100 030b 	add.w	r3, r0, #11
   24f3c:	2b0b      	cmp	r3, #11
   24f3e:	4607      	mov	r7, r0
   24f40:	d806      	bhi.n	24f50 <z_impl_zsock_poll+0x14c>
   24f42:	f640 0581 	movw	r5, #2177	; 0x881
   24f46:	40dd      	lsrs	r5, r3
   24f48:	43ed      	mvns	r5, r5
   24f4a:	f015 0501 	ands.w	r5, r5, #1
   24f4e:	d006      	beq.n	24f5e <z_impl_zsock_poll+0x15a>
			errno = -ret;
   24f50:	f014 f9b9 	bl	392c6 <__errno>
   24f54:	427f      	negs	r7, r7
   24f56:	6007      	str	r7, [r0, #0]
			return -1;
   24f58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24f5c:	e786      	b.n	24e6c <z_impl_zsock_poll+0x68>
		pev = poll_events;
   24f5e:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   24f60:	46b0      	mov	r8, r6
		ret = 0;
   24f62:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   24f64:	9f03      	ldr	r7, [sp, #12]
   24f66:	b9ef      	cbnz	r7, 24fa4 <z_impl_zsock_poll+0x1a0>
		if (retry) {
   24f68:	2d00      	cmp	r5, #0
   24f6a:	f43f af7f 	beq.w	24e6c <z_impl_zsock_poll+0x68>
			if (ret > 0) {
   24f6e:	2c00      	cmp	r4, #0
   24f70:	f73f af7c 	bgt.w	24e6c <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24f74:	ea5a 030b 	orrs.w	r3, sl, fp
   24f78:	f43f af78 	beq.w	24e6c <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24f7c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   24f80:	bf08      	it	eq
   24f82:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   24f86:	d0cc      	beq.n	24f22 <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
   24f88:	f011 fcb2 	bl	368f0 <z_tick_get>
   24f8c:	9b04      	ldr	r3, [sp, #16]
   24f8e:	ebb3 0a00 	subs.w	sl, r3, r0
   24f92:	9b05      	ldr	r3, [sp, #20]
   24f94:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   24f98:	f1ba 0f01 	cmp.w	sl, #1
   24f9c:	f17b 0300 	sbcs.w	r3, fp, #0
   24fa0:	dabf      	bge.n	24f22 <z_impl_zsock_poll+0x11e>
   24fa2:	e763      	b.n	24e6c <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
   24fa4:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
   24fa8:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
   24fac:	2800      	cmp	r0, #0
   24fae:	db1c      	blt.n	24fea <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
   24fb0:	a90a      	add	r1, sp, #40	; 0x28
   24fb2:	f7fe f933 	bl	2321c <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   24fb6:	4601      	mov	r1, r0
   24fb8:	b920      	cbnz	r0, 24fc4 <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
   24fba:	2220      	movs	r2, #32
   24fbc:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
   24fc0:	3401      	adds	r4, #1
   24fc2:	e012      	b.n	24fea <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
   24fc4:	ab09      	add	r3, sp, #36	; 0x24
   24fc6:	f240 1203 	movw	r2, #259	; 0x103
   24fca:	9300      	str	r3, [sp, #0]
   24fcc:	980a      	ldr	r0, [sp, #40]	; 0x28
   24fce:	4643      	mov	r3, r8
   24fd0:	f013 fe6a 	bl	38ca8 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   24fd4:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   24fd8:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   24fda:	d00a      	beq.n	24ff2 <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
   24fdc:	2800      	cmp	r0, #0
   24fde:	f47f af75 	bne.w	24ecc <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
   24fe2:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   24fe6:	2a00      	cmp	r2, #0
   24fe8:	d1ea      	bne.n	24fc0 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   24fea:	f108 0808 	add.w	r8, r8, #8
   24fee:	3f01      	subs	r7, #1
   24ff0:	e7b9      	b.n	24f66 <z_impl_zsock_poll+0x162>
				retry = true;
   24ff2:	2501      	movs	r5, #1
   24ff4:	e7f9      	b.n	24fea <z_impl_zsock_poll+0x1e6>
   24ff6:	bf00      	nop
   24ff8:	cccccccd 	.word	0xcccccccd

00024ffc <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   24ffc:	4b01      	ldr	r3, [pc, #4]	; (25004 <socket_offload_dns_register+0x8>)
   24ffe:	6018      	str	r0, [r3, #0]
}
   25000:	4770      	bx	lr
   25002:	bf00      	nop
   25004:	20023628 	.word	0x20023628

00025008 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   25008:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   2500a:	4c03      	ldr	r4, [pc, #12]	; (25018 <socket_offload_getaddrinfo+0x10>)
   2500c:	6824      	ldr	r4, [r4, #0]
   2500e:	6824      	ldr	r4, [r4, #0]
   25010:	46a4      	mov	ip, r4
}
   25012:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
   25016:	4760      	bx	ip
   25018:	20023628 	.word	0x20023628

0002501c <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   2501c:	4b01      	ldr	r3, [pc, #4]	; (25024 <socket_offload_freeaddrinfo+0x8>)
   2501e:	681b      	ldr	r3, [r3, #0]
   25020:	685b      	ldr	r3, [r3, #4]
   25022:	4718      	bx	r3
   25024:	20023628 	.word	0x20023628

00025028 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   25028:	4b09      	ldr	r3, [pc, #36]	; (25050 <get_flash_area_from_id+0x28>)
{
   2502a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   2502c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   2502e:	4b09      	ldr	r3, [pc, #36]	; (25054 <get_flash_area_from_id+0x2c>)
   25030:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   25032:	2300      	movs	r3, #0
   25034:	429d      	cmp	r5, r3
   25036:	dc02      	bgt.n	2503e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   25038:	2100      	movs	r1, #0
}
   2503a:	4608      	mov	r0, r1
   2503c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   2503e:	011a      	lsls	r2, r3, #4
   25040:	5ca2      	ldrb	r2, [r4, r2]
   25042:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   25046:	4282      	cmp	r2, r0
   25048:	d0f7      	beq.n	2503a <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   2504a:	3301      	adds	r3, #1
   2504c:	e7f2      	b.n	25034 <get_flash_area_from_id+0xc>
   2504e:	bf00      	nop
   25050:	0003c77c 	.word	0x0003c77c
   25054:	200200e8 	.word	0x200200e8

00025058 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   25058:	4b08      	ldr	r3, [pc, #32]	; (2507c <flash_area_open+0x24>)
{
   2505a:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   2505c:	681b      	ldr	r3, [r3, #0]
{
   2505e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   25060:	b12b      	cbz	r3, 2506e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   25062:	f7ff ffe1 	bl	25028 <get_flash_area_from_id>
	if (area == NULL) {
   25066:	b128      	cbz	r0, 25074 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   25068:	6020      	str	r0, [r4, #0]
	return 0;
   2506a:	2000      	movs	r0, #0
}
   2506c:	bd10      	pop	{r4, pc}
		return -EACCES;
   2506e:	f06f 000c 	mvn.w	r0, #12
   25072:	e7fb      	b.n	2506c <flash_area_open+0x14>
		return -ENOENT;
   25074:	f06f 0001 	mvn.w	r0, #1
   25078:	e7f8      	b.n	2506c <flash_area_open+0x14>
   2507a:	bf00      	nop
   2507c:	200200e8 	.word	0x200200e8

00025080 <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   25080:	6842      	ldr	r2, [r0, #4]
   25082:	680b      	ldr	r3, [r1, #0]
{
   25084:	b510      	push	{r4, lr}
	if (ctx->buf_len > info->size) {
   25086:	4293      	cmp	r3, r2
{
   25088:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   2508a:	d90c      	bls.n	250a6 <find_flash_total_size+0x26>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   2508c:	4908      	ldr	r1, [pc, #32]	; (250b0 <find_flash_total_size+0x30>)
   2508e:	4b09      	ldr	r3, [pc, #36]	; (250b4 <find_flash_total_size+0x34>)
		LOG_ERR("Buffer size is bigger than page");
   25090:	4809      	ldr	r0, [pc, #36]	; (250b8 <find_flash_total_size+0x38>)
   25092:	1a5b      	subs	r3, r3, r1
   25094:	08db      	lsrs	r3, r3, #3
   25096:	019b      	lsls	r3, r3, #6
   25098:	f043 0101 	orr.w	r1, r3, #1
   2509c:	f013 fa10 	bl	384c0 <log_0>
		ctx->total_size = 0;
   250a0:	2000      	movs	r0, #0
   250a2:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   250a4:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   250a6:	684b      	ldr	r3, [r1, #4]
	return true;
   250a8:	2001      	movs	r0, #1
	ctx->total_size += info->size;
   250aa:	4413      	add	r3, r2
   250ac:	604b      	str	r3, [r1, #4]
	return true;
   250ae:	e7f9      	b.n	250a4 <find_flash_total_size+0x24>
   250b0:	0003c2cc 	.word	0x0003c2cc
   250b4:	0003c2cc 	.word	0x0003c2cc
   250b8:	0003e869 	.word	0x0003e869

000250bc <stream_flash_erase_page>:
{
   250bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   250be:	4606      	mov	r6, r0
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   250c0:	68c0      	ldr	r0, [r0, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   250c2:	aa01      	add	r2, sp, #4
   250c4:	f014 fca5 	bl	39a12 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   250c8:	4604      	mov	r4, r0
   250ca:	b168      	cbz	r0, 250e8 <stream_flash_erase_page+0x2c>
   250cc:	4a19      	ldr	r2, [pc, #100]	; (25134 <stream_flash_erase_page+0x78>)
   250ce:	4b1a      	ldr	r3, [pc, #104]	; (25138 <stream_flash_erase_page+0x7c>)
		LOG_ERR("Error %d while getting page info", rc);
   250d0:	4601      	mov	r1, r0
   250d2:	1ad2      	subs	r2, r2, r3
   250d4:	08d2      	lsrs	r2, r2, #3
   250d6:	0192      	lsls	r2, r2, #6
   250d8:	4818      	ldr	r0, [pc, #96]	; (2513c <stream_flash_erase_page+0x80>)
   250da:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Error %d while erasing page", rc);
   250de:	f013 f9fe 	bl	384de <log_1>
}
   250e2:	4620      	mov	r0, r4
   250e4:	b004      	add	sp, #16
   250e6:	bd70      	pop	{r4, r5, r6, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   250e8:	9901      	ldr	r1, [sp, #4]
   250ea:	6a33      	ldr	r3, [r6, #32]
   250ec:	428b      	cmp	r3, r1
   250ee:	d0f8      	beq.n	250e2 <stream_flash_erase_page+0x26>
   250f0:	4b11      	ldr	r3, [pc, #68]	; (25138 <stream_flash_erase_page+0x7c>)
   250f2:	4d10      	ldr	r5, [pc, #64]	; (25134 <stream_flash_erase_page+0x78>)
	ctx->last_erased_page_start_offset = page.start_offset;
   250f4:	6231      	str	r1, [r6, #32]
   250f6:	1aed      	subs	r5, r5, r3
   250f8:	08ed      	lsrs	r5, r5, #3
	LOG_INF("Erasing page at offset 0x%08lx", (long)page.start_offset);
   250fa:	01ad      	lsls	r5, r5, #6
   250fc:	f045 0203 	orr.w	r2, r5, #3
   25100:	480f      	ldr	r0, [pc, #60]	; (25140 <stream_flash_erase_page+0x84>)
   25102:	f013 f9ec 	bl	384de <log_1>
	flash_write_protection_set(ctx->fdev, false);
   25106:	4621      	mov	r1, r4
   25108:	68f0      	ldr	r0, [r6, #12]
   2510a:	f013 ff21 	bl	38f50 <flash_write_protection_set>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   2510e:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
   25112:	68f0      	ldr	r0, [r6, #12]
				     size_t size)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->erase(dev, offset, size);
   25114:	6883      	ldr	r3, [r0, #8]
   25116:	689b      	ldr	r3, [r3, #8]
   25118:	4798      	blx	r3
   2511a:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   2511c:	2101      	movs	r1, #1
   2511e:	68f0      	ldr	r0, [r6, #12]
   25120:	f013 ff16 	bl	38f50 <flash_write_protection_set>
	if (rc != 0) {
   25124:	2c00      	cmp	r4, #0
   25126:	d0dc      	beq.n	250e2 <stream_flash_erase_page+0x26>
		LOG_ERR("Error %d while erasing page", rc);
   25128:	4621      	mov	r1, r4
   2512a:	4806      	ldr	r0, [pc, #24]	; (25144 <stream_flash_erase_page+0x88>)
   2512c:	f045 0201 	orr.w	r2, r5, #1
   25130:	e7d5      	b.n	250de <stream_flash_erase_page+0x22>
   25132:	bf00      	nop
   25134:	0003c2cc 	.word	0x0003c2cc
   25138:	0003c2cc 	.word	0x0003c2cc
   2513c:	0003e889 	.word	0x0003e889
   25140:	0003e8aa 	.word	0x0003e8aa
   25144:	0003e8c9 	.word	0x0003e8c9

00025148 <flash_sync>:
{
   25148:	b570      	push	{r4, r5, r6, lr}
		if (ctx->buf_bytes == 0) {
   2514a:	6884      	ldr	r4, [r0, #8]
{
   2514c:	4605      	mov	r5, r0
		if (ctx->buf_bytes == 0) {
   2514e:	b1a4      	cbz	r4, 2517a <flash_sync+0x32>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   25150:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
   25154:	3c01      	subs	r4, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   25156:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   25158:	19a1      	adds	r1, r4, r6
   2515a:	f7ff ffaf 	bl	250bc <stream_flash_erase_page>
		if (rc < 0) {
   2515e:	1e04      	subs	r4, r0, #0
   25160:	da0d      	bge.n	2517e <flash_sync+0x36>
   25162:	4a31      	ldr	r2, [pc, #196]	; (25228 <_flash_used+0xc>)
   25164:	4b31      	ldr	r3, [pc, #196]	; (2522c <_flash_used+0x10>)
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   25166:	4621      	mov	r1, r4
   25168:	1a9b      	subs	r3, r3, r2
   2516a:	4632      	mov	r2, r6
   2516c:	08db      	lsrs	r3, r3, #3
   2516e:	019b      	lsls	r3, r3, #6
   25170:	482f      	ldr	r0, [pc, #188]	; (25230 <_flash_used+0x14>)
   25172:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   25176:	f013 f9c9 	bl	3850c <log_2>
}
   2517a:	4620      	mov	r0, r4
   2517c:	bd70      	pop	{r4, r5, r6, pc}
	flash_write_protection_set(ctx->fdev, false);
   2517e:	2100      	movs	r1, #0
   25180:	68e8      	ldr	r0, [r5, #12]
   25182:	f013 fee5 	bl	38f50 <flash_write_protection_set>
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, ctx->buf_bytes);
   25186:	68e8      	ldr	r0, [r5, #12]
   25188:	682a      	ldr	r2, [r5, #0]
   2518a:	68ab      	ldr	r3, [r5, #8]
	return api->write(dev, offset, data, len);
   2518c:	6881      	ldr	r1, [r0, #8]
   2518e:	684c      	ldr	r4, [r1, #4]
   25190:	4631      	mov	r1, r6
   25192:	47a0      	blx	r4
   25194:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   25196:	2101      	movs	r1, #1
   25198:	68e8      	ldr	r0, [r5, #12]
   2519a:	f013 fed9 	bl	38f50 <flash_write_protection_set>
	if (rc != 0) {
   2519e:	b154      	cbz	r4, 251b6 <flash_sync+0x6e>
   251a0:	4a21      	ldr	r2, [pc, #132]	; (25228 <_flash_used+0xc>)
   251a2:	4b22      	ldr	r3, [pc, #136]	; (2522c <_flash_used+0x10>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   251a4:	4621      	mov	r1, r4
   251a6:	1a9b      	subs	r3, r3, r2
   251a8:	08db      	lsrs	r3, r3, #3
   251aa:	019b      	lsls	r3, r3, #6
   251ac:	4632      	mov	r2, r6
   251ae:	4821      	ldr	r0, [pc, #132]	; (25234 <_flash_used+0x18>)
   251b0:	f043 0301 	orr.w	r3, r3, #1
   251b4:	e7df      	b.n	25176 <flash_sync+0x2e>
	if (ctx->callback) {
   251b6:	69eb      	ldr	r3, [r5, #28]
   251b8:	b953      	cbnz	r3, 251d0 <flash_sync+0x88>
	ctx->bytes_written += ctx->buf_bytes;
   251ba:	692b      	ldr	r3, [r5, #16]
   251bc:	68aa      	ldr	r2, [r5, #8]
   251be:	4413      	add	r3, r2
   251c0:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
   251c2:	2300      	movs	r3, #0
   251c4:	60ab      	str	r3, [r5, #8]
	return rc;
   251c6:	e7d8      	b.n	2517a <flash_sync+0x32>
			ctx->buf[i] = ~ctx->buf[i];
   251c8:	5d13      	ldrb	r3, [r2, r4]
   251ca:	43db      	mvns	r3, r3
   251cc:	5513      	strb	r3, [r2, r4]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   251ce:	3401      	adds	r4, #1
   251d0:	68ab      	ldr	r3, [r5, #8]
   251d2:	682a      	ldr	r2, [r5, #0]
   251d4:	429c      	cmp	r4, r3
   251d6:	d3f7      	bcc.n	251c8 <flash_sync+0x80>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   251d8:	68e8      	ldr	r0, [r5, #12]
	return api->read(dev, offset, data, len);
   251da:	6881      	ldr	r1, [r0, #8]
   251dc:	680c      	ldr	r4, [r1, #0]
   251de:	4631      	mov	r1, r6
   251e0:	47a0      	blx	r4
		if (rc != 0) {
   251e2:	4604      	mov	r4, r0
   251e4:	b158      	cbz	r0, 251fe <flash_sync+0xb6>
   251e6:	4b10      	ldr	r3, [pc, #64]	; (25228 <_flash_used+0xc>)
   251e8:	4a10      	ldr	r2, [pc, #64]	; (2522c <_flash_used+0x10>)
			LOG_ERR("flash read failed: %d", rc);
   251ea:	4601      	mov	r1, r0
   251ec:	1ad2      	subs	r2, r2, r3
   251ee:	08d2      	lsrs	r2, r2, #3
   251f0:	0192      	lsls	r2, r2, #6
   251f2:	4811      	ldr	r0, [pc, #68]	; (25238 <_flash_used+0x1c>)
   251f4:	f042 0201 	orr.w	r2, r2, #1
   251f8:	f013 f971 	bl	384de <log_1>
			return rc;
   251fc:	e7bd      	b.n	2517a <flash_sync+0x32>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   251fe:	4632      	mov	r2, r6
   25200:	69eb      	ldr	r3, [r5, #28]
   25202:	68a9      	ldr	r1, [r5, #8]
   25204:	6828      	ldr	r0, [r5, #0]
   25206:	4798      	blx	r3
		if (rc != 0) {
   25208:	4604      	mov	r4, r0
   2520a:	2800      	cmp	r0, #0
   2520c:	d0d5      	beq.n	251ba <flash_sync+0x72>
   2520e:	4b06      	ldr	r3, [pc, #24]	; (25228 <_flash_used+0xc>)
   25210:	4a06      	ldr	r2, [pc, #24]	; (2522c <_flash_used+0x10>)
			LOG_ERR("callback failed: %d", rc);
   25212:	4601      	mov	r1, r0
   25214:	1ad2      	subs	r2, r2, r3
   25216:	08d2      	lsrs	r2, r2, #3
   25218:	0192      	lsls	r2, r2, #6
   2521a:	4808      	ldr	r0, [pc, #32]	; (2523c <_flash_used+0x20>)
   2521c:	f042 0201 	orr.w	r2, r2, #1
   25220:	f013 f95d 	bl	384de <log_1>
   25224:	e7c9      	b.n	251ba <flash_sync+0x72>
   25226:	bf00      	nop
   25228:	0003c2cc 	.word	0x0003c2cc
   2522c:	0003c2cc 	.word	0x0003c2cc
   25230:	0003e8e5 	.word	0x0003e8e5
   25234:	0003e913 	.word	0x0003e913
   25238:	0003e937 	.word	0x0003e937
   2523c:	0003e94d 	.word	0x0003e94d

00025240 <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   25240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25244:	460d      	mov	r5, r1
   25246:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   2524a:	4691      	mov	r9, r2
   2524c:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   2524e:	4604      	mov	r4, r0
   25250:	b920      	cbnz	r0, 2525c <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
   25252:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   25256:	b003      	add	sp, #12
   25258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   2525c:	2900      	cmp	r1, #0
   2525e:	d0f8      	beq.n	25252 <stream_flash_init+0x12>
   25260:	2a00      	cmp	r2, #0
   25262:	d0f6      	beq.n	25252 <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   25264:	9300      	str	r3, [sp, #0]
   25266:	2300      	movs	r3, #0
	if (buf_len % flash_get_write_block_size(fdev)) {
   25268:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   2526a:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   2526c:	f013 fe73 	bl	38f56 <flash_get_write_block_size>
   25270:	fbb7 f3f0 	udiv	r3, r7, r0
   25274:	fb03 7010 	mls	r0, r3, r0, r7
   25278:	b150      	cbz	r0, 25290 <stream_flash_init+0x50>
   2527a:	491e      	ldr	r1, [pc, #120]	; (252f4 <stream_flash_init+0xb4>)
   2527c:	4b1e      	ldr	r3, [pc, #120]	; (252f8 <stream_flash_init+0xb8>)
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   2527e:	481f      	ldr	r0, [pc, #124]	; (252fc <stream_flash_init+0xbc>)
   25280:	1ac9      	subs	r1, r1, r3
   25282:	08c9      	lsrs	r1, r1, #3
   25284:	0189      	lsls	r1, r1, #6
   25286:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Incorrect parameter");
   2528a:	f013 f919 	bl	384c0 <log_0>
   2528e:	e7e0      	b.n	25252 <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   25290:	466a      	mov	r2, sp
   25292:	4628      	mov	r0, r5
   25294:	491a      	ldr	r1, [pc, #104]	; (25300 <stream_flash_init+0xc0>)
   25296:	f014 fbc0 	bl	39a1a <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   2529a:	9b01      	ldr	r3, [sp, #4]
   2529c:	2b00      	cmp	r3, #0
   2529e:	d0d8      	beq.n	25252 <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   252a0:	eb08 0206 	add.w	r2, r8, r6
   252a4:	4293      	cmp	r3, r2
   252a6:	d208      	bcs.n	252ba <stream_flash_init+0x7a>
   252a8:	4912      	ldr	r1, [pc, #72]	; (252f4 <stream_flash_init+0xb4>)
   252aa:	4b13      	ldr	r3, [pc, #76]	; (252f8 <stream_flash_init+0xb8>)
		LOG_ERR("Incorrect parameter");
   252ac:	4815      	ldr	r0, [pc, #84]	; (25304 <stream_flash_init+0xc4>)
   252ae:	1ac9      	subs	r1, r1, r3
   252b0:	08c9      	lsrs	r1, r1, #3
   252b2:	0189      	lsls	r1, r1, #6
   252b4:	f041 0101 	orr.w	r1, r1, #1
   252b8:	e7e7      	b.n	2528a <stream_flash_init+0x4a>
	    offset % flash_get_write_block_size(fdev)) {
   252ba:	4628      	mov	r0, r5
   252bc:	f013 fe4b 	bl	38f56 <flash_get_write_block_size>
   252c0:	fbb8 f3f0 	udiv	r3, r8, r0
   252c4:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   252c8:	2800      	cmp	r0, #0
   252ca:	d1ed      	bne.n	252a8 <stream_flash_init+0x68>
	ctx->buf_len = buf_len;
   252cc:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   252d0:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   252d2:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   252d4:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   252d6:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   252da:	b916      	cbnz	r6, 252e2 <stream_flash_init+0xa2>
   252dc:	9e01      	ldr	r6, [sp, #4]
   252de:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   252e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
   252e4:	2000      	movs	r0, #0
	ctx->callback = cb;
   252e6:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   252e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   252ec:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   252ee:	6223      	str	r3, [r4, #32]
	return 0;
   252f0:	e7b1      	b.n	25256 <stream_flash_init+0x16>
   252f2:	bf00      	nop
   252f4:	0003c2cc 	.word	0x0003c2cc
   252f8:	0003c2cc 	.word	0x0003c2cc
   252fc:	0003e961 	.word	0x0003e961
   25300:	00025081 	.word	0x00025081
   25304:	0003e998 	.word	0x0003e998

00025308 <sys_pm_create_device_list>:
		++pmi;
	}
}

void sys_pm_create_device_list(void)
{
   25308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t count = z_device_get_all_static(&all_devices);
   2530c:	481f      	ldr	r0, [pc, #124]	; (2538c <sys_pm_create_device_list+0x84>)
   2530e:	f010 f855 	bl	353bc <z_device_get_all_static>

	__ASSERT_NO_MSG(count <= DEVICE_IDX_MAX);

	/* Reserve initial slots for core devices. */
	core_dev = 0;
	while (z_pm_core_devices[core_dev]) {
   25312:	2300      	movs	r3, #0
   25314:	4a1e      	ldr	r2, [pc, #120]	; (25390 <sys_pm_create_device_list+0x88>)
	size_t count = z_device_get_all_static(&all_devices);
   25316:	9000      	str	r0, [sp, #0]
	while (z_pm_core_devices[core_dev]) {
   25318:	fa1f f983 	uxth.w	r9, r3
   2531c:	f852 4029 	ldr.w	r4, [r2, r9, lsl #2]
   25320:	3301      	adds	r3, #1
   25322:	2c00      	cmp	r4, #0
   25324:	d1f8      	bne.n	25318 <sys_pm_create_device_list+0x10>
		core_dev++;
	}

	num_pm = core_dev;
   25326:	4e1b      	ldr	r6, [pc, #108]	; (25394 <sys_pm_create_device_list+0x8c>)
	__ASSERT_NO_MSG(num_pm <= CONFIG_PM_MAX_DEVICES);

	for (pmi = 0; pmi < count; pmi++) {
		device_idx_t cdi = 0;
		const struct device *dev = &all_devices[pmi];
   25328:	4b18      	ldr	r3, [pc, #96]	; (2538c <sys_pm_create_device_list+0x84>)
			++cdi;
		}

		/* Append the device if it doesn't have a reserved slot. */
		if (cdi == core_dev) {
			pm_devices[num_pm++] = pmi;
   2532a:	f8df a070 	ldr.w	sl, [pc, #112]	; 2539c <sys_pm_create_device_list+0x94>
	num_pm = core_dev;
   2532e:	f8a6 9000 	strh.w	r9, [r6]
	for (pmi = 0; pmi < count; pmi++) {
   25332:	9a00      	ldr	r2, [sp, #0]
   25334:	fa1f f884 	uxth.w	r8, r4
   25338:	4542      	cmp	r2, r8
   2533a:	4645      	mov	r5, r8
   2533c:	d802      	bhi.n	25344 <sys_pm_create_device_list+0x3c>
		}
	}
}
   2533e:	b003      	add	sp, #12
   25340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct device *dev = &all_devices[pmi];
   25344:	2118      	movs	r1, #24
   25346:	681a      	ldr	r2, [r3, #0]
   25348:	fb01 2505 	mla	r5, r1, r5, r2
		if ((dev->device_pm_control == NULL) ||
   2534c:	692a      	ldr	r2, [r5, #16]
   2534e:	b1da      	cbz	r2, 25388 <sys_pm_create_device_list+0x80>
   25350:	4911      	ldr	r1, [pc, #68]	; (25398 <sys_pm_create_device_list+0x90>)
   25352:	428a      	cmp	r2, r1
   25354:	d018      	beq.n	25388 <sys_pm_create_device_list+0x80>
   25356:	2700      	movs	r7, #0
		while (z_pm_core_devices[cdi]) {
   25358:	490d      	ldr	r1, [pc, #52]	; (25390 <sys_pm_create_device_list+0x88>)
   2535a:	b2ba      	uxth	r2, r7
   2535c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   25360:	4693      	mov	fp, r2
   25362:	b151      	cbz	r1, 2537a <sys_pm_create_device_list+0x72>
			if (strcmp(dev->name, z_pm_core_devices[cdi]) == 0) {
   25364:	6828      	ldr	r0, [r5, #0]
   25366:	9201      	str	r2, [sp, #4]
   25368:	f7f7 fe78 	bl	1d05c <strcmp>
   2536c:	3701      	adds	r7, #1
   2536e:	9a01      	ldr	r2, [sp, #4]
   25370:	4b06      	ldr	r3, [pc, #24]	; (2538c <sys_pm_create_device_list+0x84>)
   25372:	2800      	cmp	r0, #0
   25374:	d1f0      	bne.n	25358 <sys_pm_create_device_list+0x50>
				pm_devices[cdi] = pmi;
   25376:	f82a 801b 	strh.w	r8, [sl, fp, lsl #1]
		if (cdi == core_dev) {
   2537a:	454a      	cmp	r2, r9
			pm_devices[num_pm++] = pmi;
   2537c:	bf01      	itttt	eq
   2537e:	8832      	ldrheq	r2, [r6, #0]
   25380:	1c51      	addeq	r1, r2, #1
   25382:	8031      	strheq	r1, [r6, #0]
   25384:	f82a 8012 	strheq.w	r8, [sl, r2, lsl #1]
	for (pmi = 0; pmi < count; pmi++) {
   25388:	3401      	adds	r4, #1
   2538a:	e7d2      	b.n	25332 <sys_pm_create_device_list+0x2a>
   2538c:	2002362c 	.word	0x2002362c
   25390:	0003c780 	.word	0x0003c780
   25394:	20028926 	.word	0x20028926
   25398:	0003a98d 	.word	0x0003a98d
   2539c:	20028928 	.word	0x20028928

000253a0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   253a0:	b507      	push	{r0, r1, r2, lr}
   253a2:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   253a4:	f04f 0220 	mov.w	r2, #32
   253a8:	f3ef 8311 	mrs	r3, BASEPRI
   253ac:	f382 8811 	msr	BASEPRI, r2
   253b0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   253b4:	f013 fedf 	bl	39176 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   253b8:	9801      	ldr	r0, [sp, #4]
   253ba:	f000 ffe7 	bl	2638c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   253be:	4803      	ldr	r0, [pc, #12]	; (253cc <sys_reboot+0x2c>)
   253c0:	f012 fc0c 	bl	37bdc <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   253c4:	f000 fca0 	bl	25d08 <arch_cpu_idle>
   253c8:	e7fc      	b.n	253c4 <sys_reboot+0x24>
   253ca:	bf00      	nop
   253cc:	0003e9f3 	.word	0x0003e9f3

000253d0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   253d0:	b508      	push	{r3, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   253d2:	4804      	ldr	r0, [pc, #16]	; (253e4 <rtt_console_init+0x14>)
   253d4:	f7fd ff92 	bl	232fc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   253d8:	4802      	ldr	r0, [pc, #8]	; (253e4 <rtt_console_init+0x14>)
   253da:	f001 f9f5 	bl	267c8 <__stdout_hook_install>

	return 0;
}
   253de:	2000      	movs	r0, #0
   253e0:	bd08      	pop	{r3, pc}
   253e2:	bf00      	nop
   253e4:	000253e9 	.word	0x000253e9

000253e8 <rtt_console_out>:
{
   253e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   253ec:	4604      	mov	r4, r0
	char c = (char)character;
   253ee:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
   253f0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 25450 <rtt_console_out+0x68>
   253f4:	4e15      	ldr	r6, [pc, #84]	; (2544c <rtt_console_out+0x64>)
   253f6:	f88d 0007 	strb.w	r0, [sp, #7]
   253fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   253fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25402:	4640      	mov	r0, r8
   25404:	f010 fad8 	bl	359b8 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   25408:	2201      	movs	r2, #1
   2540a:	f10d 0107 	add.w	r1, sp, #7
   2540e:	2000      	movs	r0, #0
   25410:	f000 fb22 	bl	25a58 <SEGGER_RTT_WriteNoLock>
   25414:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   25416:	4640      	mov	r0, r8
   25418:	f010 fb46 	bl	35aa8 <z_impl_k_mutex_unlock>
		if (cnt) {
   2541c:	b12f      	cbz	r7, 2542a <rtt_console_out+0x42>
			host_present = true;
   2541e:	2301      	movs	r3, #1
   25420:	7033      	strb	r3, [r6, #0]
}
   25422:	4620      	mov	r0, r4
   25424:	b002      	add	sp, #8
   25426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   2542a:	7833      	ldrb	r3, [r6, #0]
   2542c:	2b00      	cmp	r3, #0
   2542e:	d0f8      	beq.n	25422 <rtt_console_out+0x3a>
			if (max_cnt) {
   25430:	3d01      	subs	r5, #1
   25432:	d008      	beq.n	25446 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
   25434:	f015 fcf3 	bl	3ae1e <k_is_in_isr>
   25438:	2800      	cmp	r0, #0
   2543a:	d1de      	bne.n	253fa <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   2543c:	2100      	movs	r1, #0
   2543e:	2042      	movs	r0, #66	; 0x42
   25440:	f010 ff36 	bl	362b0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   25444:	e7d9      	b.n	253fa <rtt_console_out+0x12>
				host_present = false;
   25446:	7035      	strb	r5, [r6, #0]
   25448:	e7eb      	b.n	25422 <rtt_console_out+0x3a>
   2544a:	bf00      	nop
   2544c:	2002bc6a 	.word	0x2002bc6a
   25450:	200207ec 	.word	0x200207ec

00025454 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   25454:	b570      	push	{r4, r5, r6, lr}
   25456:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
   25458:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   2545a:	480d      	ldr	r0, [pc, #52]	; (25490 <onoff_stop+0x3c>)
{
   2545c:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
   2545e:	1a23      	subs	r3, r4, r0
   25460:	109a      	asrs	r2, r3, #2
   25462:	4b0c      	ldr	r3, [pc, #48]	; (25494 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
   25464:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   25466:	4353      	muls	r3, r2
   25468:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   2546a:	435d      	muls	r5, r3
   2546c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   25470:	4418      	add	r0, r3
   25472:	f013 fdf0 	bl	39056 <set_off_state>
	if (err < 0) {
   25476:	1e01      	subs	r1, r0, #0
   25478:	db04      	blt.n	25484 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   2547a:	4b07      	ldr	r3, [pc, #28]	; (25498 <onoff_stop+0x44>)
   2547c:	442b      	add	r3, r5
   2547e:	685b      	ldr	r3, [r3, #4]
   25480:	4798      	blx	r3
	return 0;
   25482:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   25484:	4620      	mov	r0, r4
   25486:	4633      	mov	r3, r6
}
   25488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2548c:	4718      	bx	r3
   2548e:	bf00      	nop
   25490:	20023640 	.word	0x20023640
   25494:	b6db6db7 	.word	0xb6db6db7
   25498:	0003c7a4 	.word	0x0003c7a4

0002549c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2549c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   254a0:	4c0f      	ldr	r4, [pc, #60]	; (254e0 <onoff_start+0x44>)
   254a2:	4d10      	ldr	r5, [pc, #64]	; (254e4 <onoff_start+0x48>)
   254a4:	1b03      	subs	r3, r0, r4
   254a6:	109b      	asrs	r3, r3, #2
   254a8:	435d      	muls	r5, r3
   254aa:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   254ac:	250c      	movs	r5, #12
   254ae:	435d      	muls	r5, r3
{
   254b0:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   254b2:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   254b6:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   254b8:	4420      	add	r0, r4
   254ba:	2140      	movs	r1, #64	; 0x40
   254bc:	f013 fde4 	bl	39088 <set_starting_state>
	if (err < 0) {
   254c0:	1e01      	subs	r1, r0, #0
   254c2:	db08      	blt.n	254d6 <onoff_start+0x3a>
	subdata->cb = cb;
   254c4:	4b08      	ldr	r3, [pc, #32]	; (254e8 <onoff_start+0x4c>)
   254c6:	442c      	add	r4, r5
	subdata->user_data = user_data;
   254c8:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   254cc:	4b07      	ldr	r3, [pc, #28]	; (254ec <onoff_start+0x50>)
   254ce:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   254d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   254d4:	4718      	bx	r3
		notify(mgr, err);
   254d6:	4638      	mov	r0, r7
   254d8:	4633      	mov	r3, r6
}
   254da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   254de:	4718      	bx	r3
   254e0:	20023640 	.word	0x20023640
   254e4:	b6db6db7 	.word	0xb6db6db7
   254e8:	000390eb 	.word	0x000390eb
   254ec:	0003c7a4 	.word	0x0003c7a4

000254f0 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   254f0:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   254f2:	2200      	movs	r2, #0
   254f4:	2101      	movs	r1, #1
{
   254f6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   254f8:	2005      	movs	r0, #5
   254fa:	f000 fb9b 	bl	25c34 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   254fe:	2005      	movs	r0, #5
   25500:	f000 fb66 	bl	25bd0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   25504:	480f      	ldr	r0, [pc, #60]	; (25544 <clk_init+0x54>)
   25506:	f00f fd8d 	bl	35024 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2550a:	4b0f      	ldr	r3, [pc, #60]	; (25548 <clk_init+0x58>)
   2550c:	4298      	cmp	r0, r3
   2550e:	d115      	bne.n	2553c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   25510:	f015 fa19 	bl	3a946 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   25514:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   25516:	490d      	ldr	r1, [pc, #52]	; (2554c <clk_init+0x5c>)
   25518:	4630      	mov	r0, r6
   2551a:	f012 fbc9 	bl	37cb0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2551e:	2800      	cmp	r0, #0
   25520:	db0b      	blt.n	2553a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   25522:	2501      	movs	r5, #1
   25524:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   25526:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   25528:	4908      	ldr	r1, [pc, #32]	; (2554c <clk_init+0x5c>)
   2552a:	f104 001c 	add.w	r0, r4, #28
   2552e:	f012 fbbf 	bl	37cb0 <onoff_manager_init>
		if (err < 0) {
   25532:	2800      	cmp	r0, #0
   25534:	db01      	blt.n	2553a <clk_init+0x4a>
	}

	return 0;
   25536:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   25538:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   2553a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2553c:	f06f 0004 	mvn.w	r0, #4
   25540:	e7fb      	b.n	2553a <clk_init+0x4a>
   25542:	bf00      	nop
   25544:	0002558d 	.word	0x0002558d
   25548:	0bad0000 	.word	0x0bad0000
   2554c:	0003c7bc 	.word	0x0003c7bc

00025550 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   25550:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   25552:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   25554:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   25556:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   25558:	434b      	muls	r3, r1
   2555a:	480a      	ldr	r0, [pc, #40]	; (25584 <clkstarted_handle.constprop.0+0x34>)
   2555c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   2555e:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   25560:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   25564:	4418      	add	r0, r3
	sub_data->cb = NULL;
   25566:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
   25568:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   2556a:	f013 fdab 	bl	390c4 <set_on_state>
	if (callback) {
   2556e:	b135      	cbz	r5, 2557e <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   25570:	462b      	mov	r3, r5
   25572:	9a01      	ldr	r2, [sp, #4]
   25574:	4804      	ldr	r0, [pc, #16]	; (25588 <clkstarted_handle.constprop.0+0x38>)
}
   25576:	b002      	add	sp, #8
   25578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   2557c:	4718      	bx	r3
}
   2557e:	b002      	add	sp, #8
   25580:	bd70      	pop	{r4, r5, r6, pc}
   25582:	bf00      	nop
   25584:	20023640 	.word	0x20023640
   25588:	2002063c 	.word	0x2002063c

0002558c <clock_event_handler>:
	switch (event) {
   2558c:	b110      	cbz	r0, 25594 <clock_event_handler+0x8>
   2558e:	2801      	cmp	r0, #1
   25590:	d004      	beq.n	2559c <clock_event_handler+0x10>
   25592:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   25594:	4b03      	ldr	r3, [pc, #12]	; (255a4 <clock_event_handler+0x18>)
   25596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   25598:	075b      	lsls	r3, r3, #29
   2559a:	d101      	bne.n	255a0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2559c:	f7ff bfd8 	b.w	25550 <clkstarted_handle.constprop.0>
}
   255a0:	4770      	bx	lr
   255a2:	bf00      	nop
   255a4:	20023640 	.word	0x20023640

000255a8 <generic_hfclk_start>:
{
   255a8:	b508      	push	{r3, lr}
   255aa:	f04f 0320 	mov.w	r3, #32
   255ae:	f3ef 8111 	mrs	r1, BASEPRI
   255b2:	f383 8811 	msr	BASEPRI, r3
   255b6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   255ba:	4a11      	ldr	r2, [pc, #68]	; (25600 <generic_hfclk_start+0x58>)
   255bc:	6813      	ldr	r3, [r2, #0]
   255be:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   255c2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   255c6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   255c8:	d00b      	beq.n	255e2 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   255ca:	4a0e      	ldr	r2, [pc, #56]	; (25604 <generic_hfclk_start+0x5c>)
   255cc:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   255d0:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   255d4:	f013 0301 	ands.w	r3, r3, #1
   255d8:	d003      	beq.n	255e2 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   255da:	480b      	ldr	r0, [pc, #44]	; (25608 <generic_hfclk_start+0x60>)
   255dc:	f013 fd72 	bl	390c4 <set_on_state>
			already_started = true;
   255e0:	2301      	movs	r3, #1
	__asm__ volatile(
   255e2:	f381 8811 	msr	BASEPRI, r1
   255e6:	f3bf 8f6f 	isb	sy
	if (already_started) {
   255ea:	b123      	cbz	r3, 255f6 <generic_hfclk_start+0x4e>
}
   255ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   255f0:	2000      	movs	r0, #0
   255f2:	f7ff bfad 	b.w	25550 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   255f6:	2001      	movs	r0, #1
}
   255f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   255fc:	f00f bd22 	b.w	35044 <nrfx_clock_start>
   25600:	20023690 	.word	0x20023690
   25604:	40005000 	.word	0x40005000
   25608:	20023680 	.word	0x20023680

0002560c <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2560c:	4b07      	ldr	r3, [pc, #28]	; (2562c <generic_hfclk_stop+0x20>)
   2560e:	e8d3 2fef 	ldaex	r2, [r3]
   25612:	f022 0102 	bic.w	r1, r2, #2
   25616:	e8c3 1fe0 	stlex	r0, r1, [r3]
   2561a:	2800      	cmp	r0, #0
   2561c:	d1f7      	bne.n	2560e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   2561e:	07d3      	lsls	r3, r2, #31
   25620:	d402      	bmi.n	25628 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   25622:	2001      	movs	r0, #1
   25624:	f00f bd40 	b.w	350a8 <nrfx_clock_stop>
}
   25628:	4770      	bx	lr
   2562a:	bf00      	nop
   2562c:	20023690 	.word	0x20023690

00025630 <api_blocking_start>:
{
   25630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   25632:	2200      	movs	r2, #0
   25634:	2301      	movs	r3, #1
   25636:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2563a:	ab04      	add	r3, sp, #16
   2563c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   25640:	4a09      	ldr	r2, [pc, #36]	; (25668 <api_blocking_start+0x38>)
   25642:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   25644:	f8cd d000 	str.w	sp, [sp]
   25648:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2564c:	f013 fd74 	bl	39138 <api_start>
	if (err < 0) {
   25650:	2800      	cmp	r0, #0
   25652:	db05      	blt.n	25660 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   25654:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   25658:	2300      	movs	r3, #0
   2565a:	4668      	mov	r0, sp
   2565c:	f010 fe74 	bl	36348 <z_impl_k_sem_take>
}
   25660:	b007      	add	sp, #28
   25662:	f85d fb04 	ldr.w	pc, [sp], #4
   25666:	bf00      	nop
   25668:	000390ff 	.word	0x000390ff

0002566c <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
   2566c:	b2c3      	uxtb	r3, r0
}
   2566e:	201c      	movs	r0, #28
   25670:	4a01      	ldr	r2, [pc, #4]	; (25678 <z_nrf_clock_control_get_onoff+0xc>)
   25672:	fb03 2000 	mla	r0, r3, r0, r2
   25676:	4770      	bx	lr
   25678:	20023640 	.word	0x20023640

0002567c <z_nrf_clock_control_lf_on>:
{
   2567c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25680:	2201      	movs	r2, #1
   25682:	4607      	mov	r7, r0
   25684:	4936      	ldr	r1, [pc, #216]	; (25760 <z_nrf_clock_control_lf_on+0xe4>)
   25686:	e8d1 3fef 	ldaex	r3, [r1]
   2568a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   2568e:	2800      	cmp	r0, #0
   25690:	d1f9      	bne.n	25686 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   25692:	b933      	cbnz	r3, 256a2 <z_nrf_clock_control_lf_on+0x26>
   25694:	4933      	ldr	r1, [pc, #204]	; (25764 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
   25696:	4834      	ldr	r0, [pc, #208]	; (25768 <z_nrf_clock_control_lf_on+0xec>)
   25698:	604b      	str	r3, [r1, #4]
   2569a:	60cb      	str	r3, [r1, #12]
   2569c:	608a      	str	r2, [r1, #8]
   2569e:	f012 fb1a 	bl	37cd6 <onoff_request>
	switch (start_mode) {
   256a2:	1e7b      	subs	r3, r7, #1
   256a4:	2b01      	cmp	r3, #1
   256a6:	d82e      	bhi.n	25706 <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   256a8:	2f01      	cmp	r7, #1
   256aa:	d106      	bne.n	256ba <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   256ac:	4b2f      	ldr	r3, [pc, #188]	; (2576c <z_nrf_clock_control_lf_on+0xf0>)
   256ae:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   256b2:	f003 0303 	and.w	r3, r3, #3
   256b6:	2b02      	cmp	r3, #2
   256b8:	d025      	beq.n	25706 <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   256ba:	f015 fbb0 	bl	3ae1e <k_is_in_isr>
   256be:	4604      	mov	r4, r0
   256c0:	b918      	cbnz	r0, 256ca <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
   256c2:	4b2b      	ldr	r3, [pc, #172]	; (25770 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
   256c4:	781b      	ldrb	r3, [r3, #0]
   256c6:	2b00      	cmp	r3, #0
   256c8:	d144      	bne.n	25754 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
   256ca:	f04f 0320 	mov.w	r3, #32
   256ce:	f3ef 8611 	mrs	r6, BASEPRI
   256d2:	f383 8811 	msr	BASEPRI, r3
   256d6:	f3bf 8f6f 	isb	sy
   256da:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   256dc:	4d23      	ldr	r5, [pc, #140]	; (2576c <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   256de:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2577c <z_nrf_clock_control_lf_on+0x100>
   256e2:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   256e4:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   256e8:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   256ec:	03d2      	lsls	r2, r2, #15
   256ee:	d50c      	bpl.n	2570a <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   256f0:	f003 0303 	and.w	r3, r3, #3
   256f4:	2b02      	cmp	r3, #2
   256f6:	d001      	beq.n	256fc <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   256f8:	2f01      	cmp	r7, #1
   256fa:	d106      	bne.n	2570a <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
   256fc:	b334      	cbz	r4, 2574c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   256fe:	f386 8811 	msr	BASEPRI, r6
   25702:	f3bf 8f6f 	isb	sy
}
   25706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   2570a:	b1d4      	cbz	r4, 25742 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2570c:	4630      	mov	r0, r6
   2570e:	f000 fb09 	bl	25d24 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   25712:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   25716:	b2db      	uxtb	r3, r3
   25718:	2b01      	cmp	r3, #1
   2571a:	d1e3      	bne.n	256e4 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2571c:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   25720:	2a00      	cmp	r2, #0
   25722:	d0df      	beq.n	256e4 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25724:	2200      	movs	r2, #0
   25726:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2572a:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   2572e:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25730:	2120      	movs	r1, #32
   25732:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   25736:	4a0f      	ldr	r2, [pc, #60]	; (25774 <z_nrf_clock_control_lf_on+0xf8>)
   25738:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2573c:	4a0e      	ldr	r2, [pc, #56]	; (25778 <z_nrf_clock_control_lf_on+0xfc>)
   2573e:	6013      	str	r3, [r2, #0]
}
   25740:	e7d0      	b.n	256e4 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   25742:	2100      	movs	r1, #0
   25744:	2021      	movs	r0, #33	; 0x21
   25746:	f010 fdb3 	bl	362b0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2574a:	e7e2      	b.n	25712 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
   2574c:	2302      	movs	r3, #2
   2574e:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   25752:	e7d8      	b.n	25706 <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
   25754:	2202      	movs	r2, #2
   25756:	4b05      	ldr	r3, [pc, #20]	; (2576c <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   25758:	4606      	mov	r6, r0
   2575a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2575e:	e7bd      	b.n	256dc <z_nrf_clock_control_lf_on+0x60>
   25760:	20023694 	.word	0x20023694
   25764:	20023630 	.word	0x20023630
   25768:	2002365c 	.word	0x2002365c
   2576c:	40005000 	.word	0x40005000
   25770:	2002cb9f 	.word	0x2002cb9f
   25774:	e000e100 	.word	0xe000e100
   25778:	40005008 	.word	0x40005008
   2577c:	40005104 	.word	0x40005104

00025780 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   25780:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   25782:	4b08      	ldr	r3, [pc, #32]	; (257a4 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   25784:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   25788:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   2578c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   25790:	4290      	cmp	r0, r2
   25792:	d100      	bne.n	25796 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   25794:	4770      	bx	lr
   25796:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   2579a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   2579c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   257a0:	e7f2      	b.n	25788 <handle_next_cycle_case+0x8>
   257a2:	bf00      	nop
   257a4:	40015000 	.word	0x40015000

000257a8 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   257a8:	2200      	movs	r2, #0
   257aa:	4b07      	ldr	r3, [pc, #28]	; (257c8 <rtc_nrf_isr+0x20>)
   257ac:	601a      	str	r2, [r3, #0]
   257ae:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   257b0:	4a06      	ldr	r2, [pc, #24]	; (257cc <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   257b2:	4b07      	ldr	r3, [pc, #28]	; (257d0 <rtc_nrf_isr+0x28>)
   257b4:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   257b8:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   257ba:	1ac0      	subs	r0, r0, r3
   257bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   257c0:	4403      	add	r3, r0
   257c2:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   257c4:	f011 b82a 	b.w	3681c <z_clock_announce>
   257c8:	40015140 	.word	0x40015140
   257cc:	20023698 	.word	0x20023698
   257d0:	40015000 	.word	0x40015000

000257d4 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   257d4:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   257d6:	2400      	movs	r4, #0
   257d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   257dc:	4d0e      	ldr	r5, [pc, #56]	; (25818 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   257de:	4b0f      	ldr	r3, [pc, #60]	; (2581c <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   257e0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   257e4:	601c      	str	r4, [r3, #0]
   257e6:	681b      	ldr	r3, [r3, #0]
   257e8:	4b0d      	ldr	r3, [pc, #52]	; (25820 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   257ea:	2101      	movs	r1, #1
   257ec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   257f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   257f4:	4622      	mov	r2, r4
   257f6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   257fa:	2015      	movs	r0, #21
   257fc:	f000 fa1a 	bl	25c34 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   25800:	2015      	movs	r0, #21
   25802:	f000 f9e5 	bl	25bd0 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   25806:	2301      	movs	r3, #1
   25808:	4a06      	ldr	r2, [pc, #24]	; (25824 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   2580a:	2002      	movs	r0, #2
   2580c:	6013      	str	r3, [r2, #0]
   2580e:	602b      	str	r3, [r5, #0]
   25810:	f7ff ff34 	bl	2567c <z_nrf_clock_control_lf_on>

	return 0;
}
   25814:	4620      	mov	r0, r4
   25816:	bd38      	pop	{r3, r4, r5, pc}
   25818:	40015000 	.word	0x40015000
   2581c:	40015140 	.word	0x40015140
   25820:	e000e100 	.word	0xe000e100
   25824:	40015008 	.word	0x40015008

00025828 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   25828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2582a:	4b2e      	ldr	r3, [pc, #184]	; (258e4 <z_clock_set_timeout+0xbc>)
   2582c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   25830:	bf08      	it	eq
   25832:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   25834:	3801      	subs	r0, #1
   25836:	2800      	cmp	r0, #0
   25838:	dd41      	ble.n	258be <z_clock_set_timeout+0x96>
   2583a:	4298      	cmp	r0, r3
   2583c:	bfa8      	it	ge
   2583e:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   25840:	4b29      	ldr	r3, [pc, #164]	; (258e8 <z_clock_set_timeout+0xc0>)

	uint32_t unannounced = counter_sub(counter(), last_count);
   25842:	492a      	ldr	r1, [pc, #168]	; (258ec <z_clock_set_timeout+0xc4>)
   25844:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   25848:	6809      	ldr	r1, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2584a:	2600      	movs	r6, #0
	return (a - b) & COUNTER_MAX;
   2584c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   2584e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   25852:	bf18      	it	ne
   25854:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   25856:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2585a:	3401      	adds	r4, #1
   2585c:	4420      	add	r0, r4
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   2585e:	4c21      	ldr	r4, [pc, #132]	; (258e4 <z_clock_set_timeout+0xbc>)
   25860:	4d23      	ldr	r5, [pc, #140]	; (258f0 <z_clock_set_timeout+0xc8>)
   25862:	42a0      	cmp	r0, r4
   25864:	bf94      	ite	ls
   25866:	180c      	addls	r4, r1, r0
   25868:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   2586a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   2586e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   25872:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   25876:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2587a:	602e      	str	r6, [r5, #0]
   2587c:	682f      	ldr	r7, [r5, #0]
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   2587e:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   25882:	f8c3 7540 	str.w	r7, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   25886:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	return (a - b) & COUNTER_MAX;
   2588a:	1a53      	subs	r3, r2, r1
   2588c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   25890:	2b01      	cmp	r3, #1
   25892:	d104      	bne.n	2589e <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
   25894:	200f      	movs	r0, #15
   25896:	f015 fac8 	bl	3ae2a <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2589a:	602e      	str	r6, [r5, #0]
   2589c:	682b      	ldr	r3, [r5, #0]
   2589e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   258a2:	4b14      	ldr	r3, [pc, #80]	; (258f4 <z_clock_set_timeout+0xcc>)
   258a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   258a8:	4b0f      	ldr	r3, [pc, #60]	; (258e8 <z_clock_set_timeout+0xc0>)
   258aa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   258ae:	1a22      	subs	r2, r4, r0
   258b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   258b4:	2a01      	cmp	r2, #1
   258b6:	d104      	bne.n	258c2 <z_clock_set_timeout+0x9a>
		handle_next_cycle_case(t);
   258b8:	f7ff ff62 	bl	25780 <handle_next_cycle_case>
   258bc:	e00b      	b.n	258d6 <z_clock_set_timeout+0xae>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   258be:	2000      	movs	r0, #0
   258c0:	e7be      	b.n	25840 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   258c2:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   258c6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   258ca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   258ce:	1a24      	subs	r4, r4, r0
   258d0:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   258d2:	0223      	lsls	r3, r4, #8
   258d4:	d4f0      	bmi.n	258b8 <z_clock_set_timeout+0x90>
    p_reg->INTENSET = mask;
   258d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   258da:	4b03      	ldr	r3, [pc, #12]	; (258e8 <z_clock_set_timeout+0xc0>)
   258dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   258e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   258e2:	bf00      	nop
   258e4:	007fffff 	.word	0x007fffff
   258e8:	40015000 	.word	0x40015000
   258ec:	20023698 	.word	0x20023698
   258f0:	40015140 	.word	0x40015140
   258f4:	e000e100 	.word	0xe000e100

000258f8 <z_clock_elapsed>:
	__asm__ volatile(
   258f8:	f04f 0220 	mov.w	r2, #32
   258fc:	f3ef 8311 	mrs	r3, BASEPRI
   25900:	f382 8811 	msr	BASEPRI, r2
   25904:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   25908:	4a06      	ldr	r2, [pc, #24]	; (25924 <z_clock_elapsed+0x2c>)
   2590a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   2590e:	4a06      	ldr	r2, [pc, #24]	; (25928 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   25910:	6812      	ldr	r2, [r2, #0]
   25912:	1a80      	subs	r0, r0, r2
   25914:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   25918:	f383 8811 	msr	BASEPRI, r3
   2591c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   25920:	4770      	bx	lr
   25922:	bf00      	nop
   25924:	40015000 	.word	0x40015000
   25928:	20023698 	.word	0x20023698

0002592c <z_timer_cycle_get_32>:
	__asm__ volatile(
   2592c:	f04f 0320 	mov.w	r3, #32
   25930:	f3ef 8211 	mrs	r2, BASEPRI
   25934:	f383 8811 	msr	BASEPRI, r3
   25938:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   2593c:	4906      	ldr	r1, [pc, #24]	; (25958 <z_timer_cycle_get_32+0x2c>)
   2593e:	4b07      	ldr	r3, [pc, #28]	; (2595c <z_timer_cycle_get_32+0x30>)
   25940:	6808      	ldr	r0, [r1, #0]
   25942:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   25946:	f382 8811 	msr	BASEPRI, r2
   2594a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   2594e:	1a1b      	subs	r3, r3, r0
   25950:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   25954:	4418      	add	r0, r3
   25956:	4770      	bx	lr
   25958:	20023698 	.word	0x20023698
   2595c:	40015000 	.word	0x40015000

00025960 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   25960:	2303      	movs	r3, #3
static void _DoInit(void) {
   25962:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   25964:	4c10      	ldr	r4, [pc, #64]	; (259a8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   25966:	4a11      	ldr	r2, [pc, #68]	; (259ac <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   25968:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2596c:	4b10      	ldr	r3, [pc, #64]	; (259b0 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   2596e:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   25970:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   25972:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   25976:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   25978:	4a0e      	ldr	r2, [pc, #56]	; (259b4 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   2597a:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   2597c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   2597e:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   25980:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   25982:	490d      	ldr	r1, [pc, #52]	; (259b8 <_DoInit+0x58>)
   25984:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   25986:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   25988:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2598a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   2598c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   2598e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   25990:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   25992:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   25994:	f015 fe6c 	bl	3b670 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   25998:	4620      	mov	r0, r4
   2599a:	4908      	ldr	r1, [pc, #32]	; (259bc <_DoInit+0x5c>)
   2599c:	f015 fe68 	bl	3b670 <strcpy>
  p->acID[6] = ' ';
   259a0:	2320      	movs	r3, #32
   259a2:	71a3      	strb	r3, [r4, #6]
}
   259a4:	bd10      	pop	{r4, pc}
   259a6:	bf00      	nop
   259a8:	2002369c 	.word	0x2002369c
   259ac:	0003ea36 	.word	0x0003ea36
   259b0:	2002bc7b 	.word	0x2002bc7b
   259b4:	2002bc6b 	.word	0x2002bc6b
   259b8:	0003ea3f 	.word	0x0003ea3f
   259bc:	0003ea43 	.word	0x0003ea43

000259c0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   259c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
   259c4:	f04f 0b18 	mov.w	fp, #24
   259c8:	4f22      	ldr	r7, [pc, #136]	; (25a54 <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   259ca:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   259cc:	fb0b 7200 	mla	r2, fp, r0, r7
   259d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   259d2:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   259d4:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   259d6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   259d8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   259da:	d834      	bhi.n	25a46 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   259dc:	f8d2 a020 	ldr.w	sl, [r2, #32]
   259e0:	ebaa 0905 	sub.w	r9, sl, r5
   259e4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   259e8:	4294      	cmp	r4, r2
   259ea:	d811      	bhi.n	25a10 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
   259ec:	f04f 0918 	mov.w	r9, #24
   259f0:	fb06 9309 	mla	r3, r6, r9, r9
   259f4:	443b      	add	r3, r7
   259f6:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   259f8:	4622      	mov	r2, r4
   259fa:	4641      	mov	r1, r8
   259fc:	4428      	add	r0, r5
   259fe:	f015 fcd8 	bl	3b3b2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   25a02:	fb09 7606 	mla	r6, r9, r6, r7
   25a06:	442c      	add	r4, r5
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
      return 1;
   25a08:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   25a0a:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   25a0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   25a10:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   25a12:	429c      	cmp	r4, r3
   25a14:	d81b      	bhi.n	25a4e <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
   25a16:	fb00 bb0b 	mla	fp, r0, fp, fp
   25a1a:	44bb      	add	fp, r7
   25a1c:	f8db 0004 	ldr.w	r0, [fp, #4]
   25a20:	464a      	mov	r2, r9
   25a22:	4428      	add	r0, r5
   25a24:	442c      	add	r4, r5
   25a26:	f015 fcc4 	bl	3b3b2 <memcpy>
      if (NumBytes) {
   25a2a:	ebb4 040a 	subs.w	r4, r4, sl
   25a2e:	d006      	beq.n	25a3e <SEGGER_RTT_WriteSkipNoLock+0x7e>
   25a30:	4622      	mov	r2, r4
   25a32:	f8db 0004 	ldr.w	r0, [fp, #4]
   25a36:	eb08 0109 	add.w	r1, r8, r9
   25a3a:	f015 fcba 	bl	3b3b2 <memcpy>
      pRing->WrOff = NumBytes;
   25a3e:	2018      	movs	r0, #24
   25a40:	fb00 7606 	mla	r6, r0, r6, r7
   25a44:	e7e0      	b.n	25a08 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   25a46:	3b01      	subs	r3, #1
   25a48:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   25a4a:	42a3      	cmp	r3, r4
   25a4c:	d2ce      	bcs.n	259ec <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   25a4e:	2000      	movs	r0, #0
   25a50:	e7dc      	b.n	25a0c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   25a52:	bf00      	nop
   25a54:	2002369c 	.word	0x2002369c

00025a58 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   25a5a:	2318      	movs	r3, #24
   25a5c:	4c17      	ldr	r4, [pc, #92]	; (25abc <SEGGER_RTT_WriteNoLock+0x64>)
   25a5e:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   25a62:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   25a66:	4425      	add	r5, r4
  switch (pRing->Flags) {
   25a68:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25a6a:	460f      	mov	r7, r1
  switch (pRing->Flags) {
   25a6c:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25a6e:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   25a70:	d00f      	beq.n	25a92 <SEGGER_RTT_WriteNoLock+0x3a>
   25a72:	2c02      	cmp	r4, #2
   25a74:	d01a      	beq.n	25aac <SEGGER_RTT_WriteNoLock+0x54>
   25a76:	b9f4      	cbnz	r4, 25ab6 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   25a78:	4628      	mov	r0, r5
   25a7a:	f013 fb95 	bl	391a8 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   25a7e:	4286      	cmp	r6, r0
   25a80:	d805      	bhi.n	25a8e <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   25a82:	4632      	mov	r2, r6
   25a84:	4639      	mov	r1, r7
   25a86:	4628      	mov	r0, r5
   25a88:	f013 fb9c 	bl	391c4 <_WriteNoCheck>
   25a8c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   25a8e:	4620      	mov	r0, r4
   25a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   25a92:	4628      	mov	r0, r5
   25a94:	f013 fb88 	bl	391a8 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   25a98:	4286      	cmp	r6, r0
   25a9a:	4634      	mov	r4, r6
   25a9c:	bf28      	it	cs
   25a9e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   25aa0:	4639      	mov	r1, r7
   25aa2:	4622      	mov	r2, r4
   25aa4:	4628      	mov	r0, r5
   25aa6:	f013 fb8d 	bl	391c4 <_WriteNoCheck>
    break;
   25aaa:	e7f0      	b.n	25a8e <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   25aac:	4628      	mov	r0, r5
}
   25aae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   25ab2:	f013 bba3 	b.w	391fc <_WriteBlocking>
  switch (pRing->Flags) {
   25ab6:	2400      	movs	r4, #0
  return Status;
   25ab8:	e7e9      	b.n	25a8e <SEGGER_RTT_WriteNoLock+0x36>
   25aba:	bf00      	nop
   25abc:	2002369c 	.word	0x2002369c

00025ac0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
   25ac0:	2218      	movs	r2, #24
   25ac2:	4b03      	ldr	r3, [pc, #12]	; (25ad0 <SEGGER_RTT_HasDataUp+0x10>)
   25ac4:	fb02 3000 	mla	r0, r2, r0, r3
   25ac8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  return pRing->WrOff - v;
   25aca:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   25acc:	1ac0      	subs	r0, r0, r3
   25ace:	4770      	bx	lr
   25ad0:	2002369c 	.word	0x2002369c

00025ad4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   25ad4:	4a0a      	ldr	r2, [pc, #40]	; (25b00 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   25ad6:	490b      	ldr	r1, [pc, #44]	; (25b04 <arch_swap+0x30>)
	_current->arch.basepri = key;
   25ad8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   25ada:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   25adc:	67d8      	str	r0, [r3, #124]	; 0x7c
	_current->arch.swap_return_value = _k_neg_eagain;
   25ade:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   25ae2:	4909      	ldr	r1, [pc, #36]	; (25b08 <arch_swap+0x34>)
   25ae4:	684b      	ldr	r3, [r1, #4]
   25ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   25aea:	604b      	str	r3, [r1, #4]
   25aec:	2300      	movs	r3, #0
   25aee:	f383 8811 	msr	BASEPRI, r3
   25af2:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   25af6:	6893      	ldr	r3, [r2, #8]
}
   25af8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   25afc:	4770      	bx	lr
   25afe:	bf00      	nop
   25b00:	20024098 	.word	0x20024098
   25b04:	0003ce1c 	.word	0x0003ce1c
   25b08:	e000ed00 	.word	0xe000ed00

00025b0c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   25b0c:	4926      	ldr	r1, [pc, #152]	; (25ba8 <in_fp_endif+0x20>)
    ldr r2, [r1, #_kernel_offset_to_current]
   25b0e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   25b10:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   25b14:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   25b16:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   25b1a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   25b1e:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   25b22:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   25b26:	d004      	beq.n	25b32 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   25b28:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   25b2c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   25b30:	e007      	b.n	25b42 <out_fp_endif>

00025b32 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   25b32:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vstmia r0, {s16-s31}
   25b36:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   25b3a:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   25b3e:	f050 0004 	orrs.w	r0, r0, #4

00025b42 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   25b42:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   25b46:	2020      	movs	r0, #32
    msr BASEPRI, r0
   25b48:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   25b4c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   25b50:	4f16      	ldr	r7, [pc, #88]	; (25bac <in_fp_endif+0x24>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   25b52:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   25b56:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   25b58:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   25b5a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   25b5c:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
   25b5e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   25b60:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   25b62:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   25b66:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   25b6a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   25b6e:	d105      	bne.n	25b7c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   25b70:	2300      	movs	r3, #0
    vmsr fpscr, r3
   25b72:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   25b76:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   25b7a:	e005      	b.n	25b88 <in_fp_endif>

00025b7c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   25b7c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   25b80:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vldmia r0, {s16-s31}
   25b84:	ec90 8a10 	vldmia	r0, {s16-s31}

00025b88 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   25b88:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   25b8c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   25b90:	f383 8814 	msr	CONTROL, r3
    isb
   25b94:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   25b98:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   25b9c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   25ba0:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   25ba4:	4770      	bx	lr
   25ba6:	0000      	.short	0x0000
    ldr r1, =_kernel
   25ba8:	20024098 	.word	0x20024098
    ldr v4, =_SCS_ICSR
   25bac:	e000ed04 	.word	0xe000ed04

00025bb0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   25bb0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   25bb4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   25bb6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   25bba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   25bbe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   25bc0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   25bc4:	2902      	cmp	r1, #2
    beq _oops
   25bc6:	d0ff      	beq.n	25bc8 <_oops>

00025bc8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   25bc8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   25bca:	f013 fb4b 	bl	39264 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   25bce:	bd01      	pop	{r0, pc}

00025bd0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   25bd0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   25bd2:	2b00      	cmp	r3, #0
   25bd4:	db08      	blt.n	25be8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25bd6:	2201      	movs	r2, #1
   25bd8:	f000 001f 	and.w	r0, r0, #31
   25bdc:	fa02 f000 	lsl.w	r0, r2, r0
   25be0:	4a02      	ldr	r2, [pc, #8]	; (25bec <arch_irq_enable+0x1c>)
   25be2:	095b      	lsrs	r3, r3, #5
   25be4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   25be8:	4770      	bx	lr
   25bea:	bf00      	nop
   25bec:	e000e100 	.word	0xe000e100

00025bf0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   25bf0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   25bf2:	2b00      	cmp	r3, #0
   25bf4:	db0d      	blt.n	25c12 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25bf6:	2201      	movs	r2, #1
   25bf8:	f000 001f 	and.w	r0, r0, #31
   25bfc:	fa02 f000 	lsl.w	r0, r2, r0
   25c00:	095b      	lsrs	r3, r3, #5
   25c02:	4a04      	ldr	r2, [pc, #16]	; (25c14 <arch_irq_disable+0x24>)
   25c04:	3320      	adds	r3, #32
   25c06:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   25c0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   25c0e:	f3bf 8f6f 	isb	sy
}
   25c12:	4770      	bx	lr
   25c14:	e000e100 	.word	0xe000e100

00025c18 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   25c18:	4b05      	ldr	r3, [pc, #20]	; (25c30 <arch_irq_is_enabled+0x18>)
   25c1a:	0942      	lsrs	r2, r0, #5
   25c1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   25c20:	2301      	movs	r3, #1
   25c22:	f000 001f 	and.w	r0, r0, #31
   25c26:	fa03 f000 	lsl.w	r0, r3, r0
}
   25c2a:	4010      	ands	r0, r2
   25c2c:	4770      	bx	lr
   25c2e:	bf00      	nop
   25c30:	e000e100 	.word	0xe000e100

00025c34 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   25c34:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   25c36:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   25c38:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25c3c:	bfac      	ite	ge
   25c3e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25c42:	4b06      	ldrlt	r3, [pc, #24]	; (25c5c <z_arm_irq_priority_set+0x28>)
   25c44:	ea4f 1141 	mov.w	r1, r1, lsl #5
   25c48:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25c4a:	bfab      	itete	ge
   25c4c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25c50:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25c54:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25c58:	5419      	strblt	r1, [r3, r0]
}
   25c5a:	4770      	bx	lr
   25c5c:	e000ed14 	.word	0xe000ed14

00025c60 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   25c60:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   25c62:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   25c64:	4b04      	ldr	r3, [pc, #16]	; (25c78 <_arch_isr_direct_pm+0x18>)
   25c66:	6a58      	ldr	r0, [r3, #36]	; 0x24
   25c68:	b118      	cbz	r0, 25c72 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   25c6a:	2200      	movs	r2, #0
   25c6c:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
   25c6e:	f014 fe90 	bl	3a992 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   25c72:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   25c74:	bd08      	pop	{r3, pc}
   25c76:	bf00      	nop
   25c78:	20024098 	.word	0x20024098

00025c7c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   25c7c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   25c80:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   25c82:	490c      	ldr	r1, [pc, #48]	; (25cb4 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   25c84:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   25c88:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   25c8a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   25c8e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   25c92:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   25c94:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   25c98:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   25c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   25ca0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   25ca4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   25ca6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   25ca8:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   25caa:	67c3      	str	r3, [r0, #124]	; 0x7c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   25cac:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   25cb0:	4770      	bx	lr
   25cb2:	bf00      	nop
   25cb4:	00037d91 	.word	0x00037d91

00025cb8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   25cb8:	b508      	push	{r3, lr}
   25cba:	4606      	mov	r6, r0
   25cbc:	460d      	mov	r5, r1
   25cbe:	4614      	mov	r4, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   25cc0:	2300      	movs	r3, #0
   25cc2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   25cc6:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   25cca:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   25cce:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   25cd2:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   25cd6:	f000 fbcf 	bl	26478 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   25cda:	4b07      	ldr	r3, [pc, #28]	; (25cf8 <arch_switch_to_main_thread+0x40>)
   25cdc:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   25cde:	4620      	mov	r0, r4
   25ce0:	f385 8809 	msr	PSP, r5
   25ce4:	2100      	movs	r1, #0
   25ce6:	b663      	cpsie	if
   25ce8:	f381 8811 	msr	BASEPRI, r1
   25cec:	f3bf 8f6f 	isb	sy
   25cf0:	2200      	movs	r2, #0
   25cf2:	2300      	movs	r3, #0
   25cf4:	f012 f84c 	bl	37d90 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   25cf8:	20024098 	.word	0x20024098

00025cfc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   25cfc:	4901      	ldr	r1, [pc, #4]	; (25d04 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   25cfe:	2210      	movs	r2, #16
	str	r2, [r1]
   25d00:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   25d02:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   25d04:	e000ed10 	.word	0xe000ed10

00025d08 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   25d08:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   25d0a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   25d0c:	f380 8811 	msr	BASEPRI, r0
	isb
   25d10:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   25d14:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   25d18:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   25d1a:	b662      	cpsie	i
	isb
   25d1c:	f3bf 8f6f 	isb	sy

	bx	lr
   25d20:	4770      	bx	lr
   25d22:	bf00      	nop

00025d24 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   25d24:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   25d26:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   25d28:	f381 8811 	msr	BASEPRI, r1

	wfe
   25d2c:	bf20      	wfe

	msr	BASEPRI, r0
   25d2e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   25d32:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   25d34:	4770      	bx	lr
   25d36:	bf00      	nop

00025d38 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   25d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25d3c:	4606      	mov	r6, r0

	if (esf != NULL) {
   25d3e:	460d      	mov	r5, r1
{
   25d40:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
   25d42:	2900      	cmp	r1, #0
   25d44:	d054      	beq.n	25df0 <z_arm_fatal_error+0xb8>
   25d46:	4b2e      	ldr	r3, [pc, #184]	; (25e00 <z_arm_fatal_error+0xc8>)
   25d48:	4c2e      	ldr	r4, [pc, #184]	; (25e04 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   25d4a:	482f      	ldr	r0, [pc, #188]	; (25e08 <z_arm_fatal_error+0xd0>)
   25d4c:	1ae4      	subs	r4, r4, r3
   25d4e:	08e4      	lsrs	r4, r4, #3
   25d50:	01a4      	lsls	r4, r4, #6
   25d52:	f044 0401 	orr.w	r4, r4, #1
   25d56:	f8ad 4000 	strh.w	r4, [sp]
   25d5a:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   25d5e:	6809      	ldr	r1, [r1, #0]
   25d60:	f012 fbed 	bl	3853e <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   25d64:	f8ad 4000 	strh.w	r4, [sp]
   25d68:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   25d6c:	68e9      	ldr	r1, [r5, #12]
   25d6e:	4827      	ldr	r0, [pc, #156]	; (25e0c <z_arm_fatal_error+0xd4>)
   25d70:	f012 fbe5 	bl	3853e <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   25d74:	4622      	mov	r2, r4
   25d76:	69e9      	ldr	r1, [r5, #28]
   25d78:	4825      	ldr	r0, [pc, #148]	; (25e10 <z_arm_fatal_error+0xd8>)
   25d7a:	f012 fbb0 	bl	384de <log_1>
	for (int i = 0; i < 16; i += 4) {
   25d7e:	46a8      	mov	r8, r5
   25d80:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   25d82:	f8df 9098 	ldr.w	r9, [pc, #152]	; 25e1c <z_arm_fatal_error+0xe4>
   25d86:	edd8 7a08 	vldr	s15, [r8, #32]
   25d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   25d8e:	edcd 7a03 	vstr	s15, [sp, #12]
   25d92:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   25d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   25d9a:	edcd 7a05 	vstr	s15, [sp, #20]
   25d9e:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   25da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   25da6:	edcd 7a07 	vstr	s15, [sp, #28]
   25daa:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   25dae:	2208      	movs	r2, #8
   25db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   25db4:	1c7b      	adds	r3, r7, #1
   25db6:	9304      	str	r3, [sp, #16]
   25db8:	1cbb      	adds	r3, r7, #2
   25dba:	9306      	str	r3, [sp, #24]
   25dbc:	1cfb      	adds	r3, r7, #3
   25dbe:	9702      	str	r7, [sp, #8]
   25dc0:	9308      	str	r3, [sp, #32]
   25dc2:	4648      	mov	r0, r9
   25dc4:	4623      	mov	r3, r4
   25dc6:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
   25dca:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   25dcc:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   25dd0:	f012 fbd4 	bl	3857c <log_n>
	for (int i = 0; i < 16; i += 4) {
   25dd4:	2f10      	cmp	r7, #16
   25dd6:	f108 0810 	add.w	r8, r8, #16
   25dda:	d1d4      	bne.n	25d86 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   25ddc:	4622      	mov	r2, r4
   25dde:	6e29      	ldr	r1, [r5, #96]	; 0x60
   25de0:	480c      	ldr	r0, [pc, #48]	; (25e14 <z_arm_fatal_error+0xdc>)
   25de2:	f012 fb7c 	bl	384de <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   25de6:	4622      	mov	r2, r4
   25de8:	69a9      	ldr	r1, [r5, #24]
   25dea:	480b      	ldr	r0, [pc, #44]	; (25e18 <z_arm_fatal_error+0xe0>)
   25dec:	f012 fb77 	bl	384de <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   25df0:	4629      	mov	r1, r5
   25df2:	4630      	mov	r0, r6
   25df4:	f00f fb38 	bl	35468 <z_fatal_error>
}
   25df8:	b00b      	add	sp, #44	; 0x2c
   25dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25dfe:	bf00      	nop
   25e00:	0003c2cc 	.word	0x0003c2cc
   25e04:	0003c384 	.word	0x0003c384
   25e08:	0003ea4a 	.word	0x0003ea4a
   25e0c:	0003ea79 	.word	0x0003ea79
   25e10:	0003eaa8 	.word	0x0003eaa8
   25e14:	0003eafa 	.word	0x0003eafa
   25e18:	0003eb09 	.word	0x0003eb09
   25e1c:	0003eab7 	.word	0x0003eab7

00025e20 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   25e20:	bf30      	wfi
    b z_SysNmiOnReset
   25e22:	f7ff bffd 	b.w	25e20 <z_SysNmiOnReset>
   25e26:	bf00      	nop

00025e28 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   25e28:	4a14      	ldr	r2, [pc, #80]	; (25e7c <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   25e2a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   25e2c:	4b14      	ldr	r3, [pc, #80]	; (25e80 <z_arm_prep_c+0x58>)
   25e2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   25e32:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   25e34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   25e38:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   25e3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   25e40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   25e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   25e48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   25e4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   25e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   25e54:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   25e58:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   25e5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   25e60:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   25e64:	2300      	movs	r3, #0
   25e66:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   25e6a:	f00f fb9b 	bl	355a4 <z_bss_zero>
	z_data_copy();
   25e6e:	f00f fba3 	bl	355b8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   25e72:	f000 fad3 	bl	2641c <z_arm_interrupt_init>
	z_cstart();
   25e76:	f00f fbdd 	bl	35634 <z_cstart>
   25e7a:	bf00      	nop
   25e7c:	0001c200 	.word	0x0001c200
   25e80:	e000ed00 	.word	0xe000ed00

00025e84 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   25e84:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   25e86:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   25e88:	4a0b      	ldr	r2, [pc, #44]	; (25eb8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   25e8a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   25e8c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   25e8e:	bf1e      	ittt	ne
	movne	r1, #0
   25e90:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   25e92:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
   25e94:	f014 fd7d 	blne	3a992 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   25e98:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   25e9a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   25e9e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   25ea2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   25ea6:	4905      	ldr	r1, [pc, #20]	; (25ebc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   25ea8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   25eaa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   25eac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   25eae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   25eb2:	4903      	ldr	r1, [pc, #12]	; (25ec0 <_isr_wrapper+0x3c>)
	bx r1
   25eb4:	4708      	bx	r1
   25eb6:	0000      	.short	0x0000
	ldr r2, =_kernel
   25eb8:	20024098 	.word	0x20024098
	ldr r1, =_sw_isr_table
   25ebc:	0003c0b8 	.word	0x0003c0b8
	ldr r1, =z_arm_int_exit
   25ec0:	00026365 	.word	0x00026365

00025ec4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   25ec4:	2000      	movs	r0, #0
    msr CONTROL, r0
   25ec6:	f380 8814 	msr	CONTROL, r0
    isb
   25eca:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   25ece:	2000      	movs	r0, #0
    msr MSPLIM, r0
   25ed0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   25ed4:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   25ed8:	f012 facd 	bl	38476 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   25edc:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   25ede:	490e      	ldr	r1, [pc, #56]	; (25f18 <__start+0x54>)
    str r0, [r1]
   25ee0:	6008      	str	r0, [r1, #0]
    dsb
   25ee2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   25ee6:	480d      	ldr	r0, [pc, #52]	; (25f1c <__start+0x58>)
    msr msp, r0
   25ee8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   25eec:	f000 fa70 	bl	263d0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   25ef0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   25ef2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   25ef6:	480a      	ldr	r0, [pc, #40]	; (25f20 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   25ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   25efc:	1840      	adds	r0, r0, r1
    msr PSP, r0
   25efe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   25f02:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   25f06:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   25f08:	4308      	orrs	r0, r1
    msr CONTROL, r0
   25f0a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   25f0e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   25f12:	f7ff ff89 	bl	25e28 <z_arm_prep_c>
   25f16:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   25f18:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   25f1c:	20030898 	.word	0x20030898
    ldr r0, =z_interrupt_stacks
   25f20:	200309d8 	.word	0x200309d8

00025f24 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   25f24:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   25f28:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   25f2c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   25f2e:	4672      	mov	r2, lr
	bl z_arm_fault
   25f30:	f000 f93c 	bl	261ac <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   25f34:	bd01      	pop	{r0, pc}
   25f36:	bf00      	nop

00025f38 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   25f38:	b570      	push	{r4, r5, r6, lr}
   25f3a:	4b27      	ldr	r3, [pc, #156]	; (25fd8 <usage_fault.isra.0+0xa0>)
   25f3c:	4c27      	ldr	r4, [pc, #156]	; (25fdc <usage_fault.isra.0+0xa4>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   25f3e:	4d28      	ldr	r5, [pc, #160]	; (25fe0 <usage_fault.isra.0+0xa8>)
   25f40:	1ae4      	subs	r4, r4, r3
   25f42:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   25f44:	01a4      	lsls	r4, r4, #6
   25f46:	f044 0601 	orr.w	r6, r4, #1
   25f4a:	4631      	mov	r1, r6
   25f4c:	4825      	ldr	r0, [pc, #148]	; (25fe4 <usage_fault.isra.0+0xac>)
   25f4e:	f012 fab7 	bl	384c0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   25f52:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   25f54:	0192      	lsls	r2, r2, #6
   25f56:	d503      	bpl.n	25f60 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   25f58:	4631      	mov	r1, r6
   25f5a:	4823      	ldr	r0, [pc, #140]	; (25fe8 <usage_fault.isra.0+0xb0>)
   25f5c:	f012 fab0 	bl	384c0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   25f60:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25f62:	01db      	lsls	r3, r3, #7
   25f64:	d504      	bpl.n	25f70 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   25f66:	4821      	ldr	r0, [pc, #132]	; (25fec <usage_fault.isra.0+0xb4>)
   25f68:	f044 0101 	orr.w	r1, r4, #1
   25f6c:	f012 faa8 	bl	384c0 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   25f70:	4d1b      	ldr	r5, [pc, #108]	; (25fe0 <usage_fault.isra.0+0xa8>)
   25f72:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   25f74:	02d6      	lsls	r6, r2, #11
   25f76:	d504      	bpl.n	25f82 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   25f78:	481d      	ldr	r0, [pc, #116]	; (25ff0 <usage_fault.isra.0+0xb8>)
   25f7a:	f044 0101 	orr.w	r1, r4, #1
   25f7e:	f012 fa9f 	bl	384c0 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   25f82:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25f84:	0318      	lsls	r0, r3, #12
   25f86:	d504      	bpl.n	25f92 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  No coprocessor instructions");
   25f88:	481a      	ldr	r0, [pc, #104]	; (25ff4 <usage_fault.isra.0+0xbc>)
   25f8a:	f044 0101 	orr.w	r1, r4, #1
   25f8e:	f012 fa97 	bl	384c0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   25f92:	4d13      	ldr	r5, [pc, #76]	; (25fe0 <usage_fault.isra.0+0xa8>)
   25f94:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   25f96:	0351      	lsls	r1, r2, #13
   25f98:	d504      	bpl.n	25fa4 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   25f9a:	4817      	ldr	r0, [pc, #92]	; (25ff8 <usage_fault.isra.0+0xc0>)
   25f9c:	f044 0101 	orr.w	r1, r4, #1
   25fa0:	f012 fa8e 	bl	384c0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   25fa4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25fa6:	039a      	lsls	r2, r3, #14
   25fa8:	d504      	bpl.n	25fb4 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   25faa:	4814      	ldr	r0, [pc, #80]	; (25ffc <usage_fault.isra.0+0xc4>)
   25fac:	f044 0101 	orr.w	r1, r4, #1
   25fb0:	f012 fa86 	bl	384c0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   25fb4:	4d0a      	ldr	r5, [pc, #40]	; (25fe0 <usage_fault.isra.0+0xa8>)
   25fb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25fb8:	03db      	lsls	r3, r3, #15
   25fba:	d504      	bpl.n	25fc6 <usage_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   25fbc:	4810      	ldr	r0, [pc, #64]	; (26000 <usage_fault.isra.0+0xc8>)
   25fbe:	f044 0101 	orr.w	r1, r4, #1
   25fc2:	f012 fa7d 	bl	384c0 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   25fc6:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   25fc8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   25fca:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   25fce:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   25fd2:	62ab      	str	r3, [r5, #40]	; 0x28
}
   25fd4:	bd70      	pop	{r4, r5, r6, pc}
   25fd6:	bf00      	nop
   25fd8:	0003c2cc 	.word	0x0003c2cc
   25fdc:	0003c384 	.word	0x0003c384
   25fe0:	e000ed00 	.word	0xe000ed00
   25fe4:	0003eb37 	.word	0x0003eb37
   25fe8:	0003eb4f 	.word	0x0003eb4f
   25fec:	0003eb62 	.word	0x0003eb62
   25ff0:	0003eb7c 	.word	0x0003eb7c
   25ff4:	0003eba6 	.word	0x0003eba6
   25ff8:	0003ebc4 	.word	0x0003ebc4
   25ffc:	0003ebe9 	.word	0x0003ebe9
   26000:	0003ec03 	.word	0x0003ec03

00026004 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   26004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26008:	4b27      	ldr	r3, [pc, #156]	; (260a8 <mem_manage_fault.isra.0+0xa4>)
   2600a:	4c28      	ldr	r4, [pc, #160]	; (260ac <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2600c:	4d28      	ldr	r5, [pc, #160]	; (260b0 <mem_manage_fault.isra.0+0xac>)
   2600e:	1ae4      	subs	r4, r4, r3
   26010:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   26012:	01a4      	lsls	r4, r4, #6
   26014:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   26018:	4607      	mov	r7, r0
   2601a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   2601c:	4825      	ldr	r0, [pc, #148]	; (260b4 <mem_manage_fault.isra.0+0xb0>)
   2601e:	4641      	mov	r1, r8
   26020:	f012 fa4e 	bl	384c0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   26024:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   26026:	06d1      	lsls	r1, r2, #27
   26028:	d503      	bpl.n	26032 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   2602a:	4641      	mov	r1, r8
   2602c:	4822      	ldr	r0, [pc, #136]	; (260b8 <mem_manage_fault.isra.0+0xb4>)
   2602e:	f012 fa47 	bl	384c0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   26032:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26034:	071a      	lsls	r2, r3, #28
   26036:	d504      	bpl.n	26042 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   26038:	4820      	ldr	r0, [pc, #128]	; (260bc <mem_manage_fault.isra.0+0xb8>)
   2603a:	f044 0101 	orr.w	r1, r4, #1
   2603e:	f012 fa3f 	bl	384c0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   26042:	4d1b      	ldr	r5, [pc, #108]	; (260b0 <mem_manage_fault.isra.0+0xac>)
   26044:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26046:	079b      	lsls	r3, r3, #30
   26048:	d512      	bpl.n	26070 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   2604a:	f044 0801 	orr.w	r8, r4, #1
   2604e:	4641      	mov	r1, r8
   26050:	481b      	ldr	r0, [pc, #108]	; (260c0 <mem_manage_fault.isra.0+0xbc>)
   26052:	f012 fa35 	bl	384c0 <log_0>
		mmfar = SCB->MMFAR;
   26056:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   26058:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2605a:	0618      	lsls	r0, r3, #24
   2605c:	d508      	bpl.n	26070 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   2605e:	4642      	mov	r2, r8
   26060:	4818      	ldr	r0, [pc, #96]	; (260c4 <mem_manage_fault.isra.0+0xc0>)
   26062:	f012 fa3c 	bl	384de <log_1>
			if (from_hard_fault) {
   26066:	b11f      	cbz	r7, 26070 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   26068:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2606a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2606e:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   26070:	4d0f      	ldr	r5, [pc, #60]	; (260b0 <mem_manage_fault.isra.0+0xac>)
   26072:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   26074:	07d2      	lsls	r2, r2, #31
   26076:	d504      	bpl.n	26082 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   26078:	4813      	ldr	r0, [pc, #76]	; (260c8 <mem_manage_fault.isra.0+0xc4>)
   2607a:	f044 0101 	orr.w	r1, r4, #1
   2607e:	f012 fa1f 	bl	384c0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   26082:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26084:	069b      	lsls	r3, r3, #26
   26086:	d504      	bpl.n	26092 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   26088:	4810      	ldr	r0, [pc, #64]	; (260cc <mem_manage_fault.isra.0+0xc8>)
   2608a:	f044 0101 	orr.w	r1, r4, #1
   2608e:	f012 fa17 	bl	384c0 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   26092:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   26094:	4b06      	ldr	r3, [pc, #24]	; (260b0 <mem_manage_fault.isra.0+0xac>)
   26096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   26098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2609a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   2609e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   260a0:	7030      	strb	r0, [r6, #0]
}
   260a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   260a6:	bf00      	nop
   260a8:	0003c2cc 	.word	0x0003c2cc
   260ac:	0003c384 	.word	0x0003c384
   260b0:	e000ed00 	.word	0xe000ed00
   260b4:	0003ec2e 	.word	0x0003ec2e
   260b8:	0003ec44 	.word	0x0003ec44
   260bc:	0003ec77 	.word	0x0003ec77
   260c0:	0003ec8a 	.word	0x0003ec8a
   260c4:	0003eca2 	.word	0x0003eca2
   260c8:	0003ecb8 	.word	0x0003ecb8
   260cc:	0003ecd7 	.word	0x0003ecd7

000260d0 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   260d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   260d4:	4b2a      	ldr	r3, [pc, #168]	; (26180 <bus_fault.isra.0+0xb0>)
   260d6:	4c2b      	ldr	r4, [pc, #172]	; (26184 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   260d8:	4d2b      	ldr	r5, [pc, #172]	; (26188 <bus_fault.isra.0+0xb8>)
   260da:	1ae4      	subs	r4, r4, r3
   260dc:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   260de:	01a4      	lsls	r4, r4, #6
   260e0:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   260e4:	4607      	mov	r7, r0
   260e6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   260e8:	4828      	ldr	r0, [pc, #160]	; (2618c <bus_fault.isra.0+0xbc>)
   260ea:	4641      	mov	r1, r8
   260ec:	f012 f9e8 	bl	384c0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   260f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   260f2:	04d1      	lsls	r1, r2, #19
   260f4:	d503      	bpl.n	260fe <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   260f6:	4641      	mov	r1, r8
   260f8:	4825      	ldr	r0, [pc, #148]	; (26190 <bus_fault.isra.0+0xc0>)
   260fa:	f012 f9e1 	bl	384c0 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   260fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26100:	051a      	lsls	r2, r3, #20
   26102:	d504      	bpl.n	2610e <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   26104:	4823      	ldr	r0, [pc, #140]	; (26194 <bus_fault.isra.0+0xc4>)
   26106:	f044 0101 	orr.w	r1, r4, #1
   2610a:	f012 f9d9 	bl	384c0 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2610e:	4d1e      	ldr	r5, [pc, #120]	; (26188 <bus_fault.isra.0+0xb8>)
   26110:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26112:	059b      	lsls	r3, r3, #22
   26114:	d512      	bpl.n	2613c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   26116:	f044 0801 	orr.w	r8, r4, #1
   2611a:	4641      	mov	r1, r8
   2611c:	481e      	ldr	r0, [pc, #120]	; (26198 <bus_fault.isra.0+0xc8>)
   2611e:	f012 f9cf 	bl	384c0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   26122:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   26124:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26126:	0418      	lsls	r0, r3, #16
   26128:	d508      	bpl.n	2613c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   2612a:	4642      	mov	r2, r8
   2612c:	481b      	ldr	r0, [pc, #108]	; (2619c <bus_fault.isra.0+0xcc>)
   2612e:	f012 f9d6 	bl	384de <log_1>
			if (from_hard_fault) {
   26132:	b11f      	cbz	r7, 2613c <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   26134:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26136:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   2613a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2613c:	4d12      	ldr	r5, [pc, #72]	; (26188 <bus_fault.isra.0+0xb8>)
   2613e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26140:	0559      	lsls	r1, r3, #21
   26142:	d504      	bpl.n	2614e <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   26144:	4816      	ldr	r0, [pc, #88]	; (261a0 <bus_fault.isra.0+0xd0>)
   26146:	f044 0101 	orr.w	r1, r4, #1
   2614a:	f012 f9b9 	bl	384c0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2614e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26150:	05da      	lsls	r2, r3, #23
   26152:	d50d      	bpl.n	26170 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   26154:	4813      	ldr	r0, [pc, #76]	; (261a4 <bus_fault.isra.0+0xd4>)
   26156:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   2615a:	f012 f9b1 	bl	384c0 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   2615e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   26160:	4a09      	ldr	r2, [pc, #36]	; (26188 <bus_fault.isra.0+0xb8>)
   26162:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26164:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   26168:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   2616a:	7030      	strb	r0, [r6, #0]
}
   2616c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   26170:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26172:	049b      	lsls	r3, r3, #18
   26174:	d5f3      	bpl.n	2615e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   26176:	480c      	ldr	r0, [pc, #48]	; (261a8 <bus_fault.isra.0+0xd8>)
   26178:	f044 0101 	orr.w	r1, r4, #1
   2617c:	e7ed      	b.n	2615a <bus_fault.isra.0+0x8a>
   2617e:	bf00      	nop
   26180:	0003c2cc 	.word	0x0003c2cc
   26184:	0003c384 	.word	0x0003c384
   26188:	e000ed00 	.word	0xe000ed00
   2618c:	0003ed06 	.word	0x0003ed06
   26190:	0003ed1c 	.word	0x0003ed1c
   26194:	0003ec77 	.word	0x0003ec77
   26198:	0003ed2d 	.word	0x0003ed2d
   2619c:	0003ed46 	.word	0x0003ed46
   261a0:	0003ed5b 	.word	0x0003ed5b
   261a4:	0003ed76 	.word	0x0003ed76
   261a8:	0003ecd7 	.word	0x0003ecd7

000261ac <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   261ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   261b0:	4b5a      	ldr	r3, [pc, #360]	; (2631c <z_arm_fault+0x170>)
{
   261b2:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   261b4:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   261b8:	460f      	mov	r7, r1
   261ba:	4614      	mov	r4, r2
   261bc:	2500      	movs	r5, #0
   261be:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   261c0:	f3c8 0608 	ubfx	r6, r8, #0, #9
   261c4:	f385 8811 	msr	BASEPRI, r5
   261c8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   261cc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   261d0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   261d4:	d123      	bne.n	2621e <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   261d6:	07d0      	lsls	r0, r2, #31
   261d8:	d421      	bmi.n	2621e <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   261da:	0651      	lsls	r1, r2, #25
   261dc:	d403      	bmi.n	261e6 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   261de:	0722      	lsls	r2, r4, #28
   261e0:	d40e      	bmi.n	26200 <z_arm_fault+0x54>
			*nested_exc = true;
   261e2:	2501      	movs	r5, #1
   261e4:	e00e      	b.n	26204 <z_arm_fault+0x58>
   261e6:	494e      	ldr	r1, [pc, #312]	; (26320 <z_arm_fault+0x174>)
   261e8:	4b4e      	ldr	r3, [pc, #312]	; (26324 <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   261ea:	484f      	ldr	r0, [pc, #316]	; (26328 <z_arm_fault+0x17c>)
   261ec:	1a5b      	subs	r3, r3, r1
   261ee:	08db      	lsrs	r3, r3, #3
   261f0:	019b      	lsls	r3, r3, #6
   261f2:	f043 0101 	orr.w	r1, r3, #1
   261f6:	f012 f963 	bl	384c0 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   261fa:	f014 0504 	ands.w	r5, r4, #4
   261fe:	d001      	beq.n	26204 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   26200:	46b9      	mov	r9, r7
	*nested_exc = false;
   26202:	2500      	movs	r5, #0
	*recoverable = false;
   26204:	2300      	movs	r3, #0
   26206:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   2620a:	1ef3      	subs	r3, r6, #3
   2620c:	2b09      	cmp	r3, #9
   2620e:	d86c      	bhi.n	262ea <z_arm_fault+0x13e>
   26210:	e8df f003 	tbb	[pc, r3]
   26214:	3e5e5a07 	.word	0x3e5e5a07
   26218:	6b6b6b6b 	.word	0x6b6b6b6b
   2621c:	626b      	.short	0x626b
		return NULL;
   2621e:	46a9      	mov	r9, r5
   26220:	e7f0      	b.n	26204 <z_arm_fault+0x58>
	*recoverable = false;
   26222:	f04f 0800 	mov.w	r8, #0
   26226:	4b3e      	ldr	r3, [pc, #248]	; (26320 <z_arm_fault+0x174>)
   26228:	4e3e      	ldr	r6, [pc, #248]	; (26324 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   2622a:	4840      	ldr	r0, [pc, #256]	; (2632c <z_arm_fault+0x180>)
   2622c:	1af6      	subs	r6, r6, r3
   2622e:	08f6      	lsrs	r6, r6, #3
   26230:	01b6      	lsls	r6, r6, #6
   26232:	f046 0601 	orr.w	r6, r6, #1
   26236:	4631      	mov	r1, r6
   26238:	f012 f942 	bl	384c0 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2623c:	4b37      	ldr	r3, [pc, #220]	; (2631c <z_arm_fault+0x170>)
	*recoverable = false;
   2623e:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   26242:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   26244:	f014 0402 	ands.w	r4, r4, #2
   26248:	d005      	beq.n	26256 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   2624a:	4631      	mov	r1, r6
   2624c:	4838      	ldr	r0, [pc, #224]	; (26330 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   2624e:	f012 f937 	bl	384c0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   26252:	2400      	movs	r4, #0
}
   26254:	e01f      	b.n	26296 <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   26256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26258:	005b      	lsls	r3, r3, #1
   2625a:	d51c      	bpl.n	26296 <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   2625c:	4631      	mov	r1, r6
   2625e:	4835      	ldr	r0, [pc, #212]	; (26334 <z_arm_fault+0x188>)
   26260:	f012 f92e 	bl	384c0 <log_0>
		if (SCB_MMFSR != 0) {
   26264:	4b34      	ldr	r3, [pc, #208]	; (26338 <z_arm_fault+0x18c>)
   26266:	781b      	ldrb	r3, [r3, #0]
   26268:	b12b      	cbz	r3, 26276 <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   2626a:	2001      	movs	r0, #1
   2626c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   26270:	f7ff fec8 	bl	26004 <mem_manage_fault.isra.0>
   26274:	e00e      	b.n	26294 <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   26276:	4b31      	ldr	r3, [pc, #196]	; (2633c <z_arm_fault+0x190>)
   26278:	781b      	ldrb	r3, [r3, #0]
   2627a:	b12b      	cbz	r3, 26288 <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   2627c:	2001      	movs	r0, #1
   2627e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   26282:	f7ff ff25 	bl	260d0 <bus_fault.isra.0>
   26286:	e005      	b.n	26294 <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   26288:	4b2d      	ldr	r3, [pc, #180]	; (26340 <z_arm_fault+0x194>)
   2628a:	881b      	ldrh	r3, [r3, #0]
   2628c:	b29b      	uxth	r3, r3
   2628e:	b113      	cbz	r3, 26296 <z_arm_fault+0xea>
			reason = usage_fault(esf);
   26290:	f7ff fe52 	bl	25f38 <usage_fault.isra.0>
   26294:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   26296:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2629a:	b993      	cbnz	r3, 262c2 <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2629c:	2268      	movs	r2, #104	; 0x68
   2629e:	4649      	mov	r1, r9
   262a0:	a802      	add	r0, sp, #8
   262a2:	f015 f886 	bl	3b3b2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   262a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   262a8:	b39d      	cbz	r5, 26312 <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   262aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
   262ae:	b922      	cbnz	r2, 262ba <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   262b0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   262b4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   262b8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   262ba:	4620      	mov	r0, r4
   262bc:	a902      	add	r1, sp, #8
   262be:	f7ff fd3b 	bl	25d38 <z_arm_fatal_error>
}
   262c2:	b01d      	add	sp, #116	; 0x74
   262c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   262c8:	2000      	movs	r0, #0
   262ca:	f10d 0107 	add.w	r1, sp, #7
   262ce:	e7cf      	b.n	26270 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   262d0:	2000      	movs	r0, #0
   262d2:	f10d 0107 	add.w	r1, sp, #7
   262d6:	e7d4      	b.n	26282 <z_arm_fault+0xd6>
   262d8:	4912      	ldr	r1, [pc, #72]	; (26324 <z_arm_fault+0x178>)
   262da:	4b11      	ldr	r3, [pc, #68]	; (26320 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
   262dc:	4819      	ldr	r0, [pc, #100]	; (26344 <z_arm_fault+0x198>)
   262de:	1ac9      	subs	r1, r1, r3
   262e0:	08c9      	lsrs	r1, r1, #3
   262e2:	0189      	lsls	r1, r1, #6
   262e4:	f041 0101 	orr.w	r1, r1, #1
   262e8:	e7b1      	b.n	2624e <z_arm_fault+0xa2>
   262ea:	4a0d      	ldr	r2, [pc, #52]	; (26320 <z_arm_fault+0x174>)
   262ec:	4b0d      	ldr	r3, [pc, #52]	; (26324 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
   262ee:	4816      	ldr	r0, [pc, #88]	; (26348 <z_arm_fault+0x19c>)
   262f0:	1a9b      	subs	r3, r3, r2
   262f2:	08db      	lsrs	r3, r3, #3
   262f4:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   262f8:	ea4f 1383 	mov.w	r3, r3, lsl #6
   262fc:	4913      	ldr	r1, [pc, #76]	; (2634c <z_arm_fault+0x1a0>)
   262fe:	f043 0301 	orr.w	r3, r3, #1
   26302:	bf18      	it	ne
   26304:	4601      	movne	r1, r0
   26306:	f1a6 0210 	sub.w	r2, r6, #16
   2630a:	4811      	ldr	r0, [pc, #68]	; (26350 <z_arm_fault+0x1a4>)
   2630c:	f012 f8fe 	bl	3850c <log_2>
   26310:	e79f      	b.n	26252 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   26312:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   26316:	f023 0301 	bic.w	r3, r3, #1
   2631a:	e7cd      	b.n	262b8 <z_arm_fault+0x10c>
   2631c:	e000ed00 	.word	0xe000ed00
   26320:	0003c2cc 	.word	0x0003c2cc
   26324:	0003c384 	.word	0x0003c384
   26328:	0003ed8e 	.word	0x0003ed8e
   2632c:	0003edb1 	.word	0x0003edb1
   26330:	0003edc8 	.word	0x0003edc8
   26334:	0003ede9 	.word	0x0003ede9
   26338:	e000ed28 	.word	0xe000ed28
   2633c:	e000ed29 	.word	0xe000ed29
   26340:	e000ed2a 	.word	0xe000ed2a
   26344:	0003ee08 	.word	0x0003ee08
   26348:	0003ee53 	.word	0x0003ee53
   2634c:	0003ee3e 	.word	0x0003ee3e
   26350:	0003ee6c 	.word	0x0003ee6c

00026354 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   26354:	4a02      	ldr	r2, [pc, #8]	; (26360 <z_arm_fault_init+0xc>)
   26356:	6953      	ldr	r3, [r2, #20]
   26358:	f043 0310 	orr.w	r3, r3, #16
   2635c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2635e:	4770      	bx	lr
   26360:	e000ed00 	.word	0xe000ed00

00026364 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   26364:	4b07      	ldr	r3, [pc, #28]	; (26384 <_EXIT_EXC+0xe>)

	ldr r1, [r3, #_kernel_offset_to_current]
   26366:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   26368:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   2636a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2636c:	d003      	beq.n	26376 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2636e:	4906      	ldr	r1, [pc, #24]	; (26388 <_EXIT_EXC+0x12>)
	ldr r2, =_SCS_ICSR_PENDSV
   26370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   26374:	600a      	str	r2, [r1, #0]

00026376 <_EXIT_EXC>:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
	push {r0, lr}
   26376:	b501      	push	{r0, lr}
	bl z_check_stack_sentinel
   26378:	f010 f828 	bl	363cc <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r1}
	mov lr, r1
#else
	pop {r0, lr}
   2637c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   26380:	4770      	bx	lr
   26382:	0000      	.short	0x0000
	ldr r3, =_kernel
   26384:	20024098 	.word	0x20024098
	ldr r1, =_SCS_ICSR
   26388:	e000ed04 	.word	0xe000ed04

0002638c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   2638c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   26390:	4905      	ldr	r1, [pc, #20]	; (263a8 <sys_arch_reboot+0x1c>)
   26392:	4b06      	ldr	r3, [pc, #24]	; (263ac <sys_arch_reboot+0x20>)
   26394:	68ca      	ldr	r2, [r1, #12]
   26396:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2639a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2639c:	60cb      	str	r3, [r1, #12]
   2639e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   263a2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   263a4:	e7fd      	b.n	263a2 <sys_arch_reboot+0x16>
   263a6:	bf00      	nop
   263a8:	e000ed00 	.word	0xe000ed00
   263ac:	05fa0004 	.word	0x05fa0004

000263b0 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   263b0:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   263b2:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   263b4:	4a05      	ldr	r2, [pc, #20]	; (263cc <z_arm_clear_arm_mpu_config+0x1c>)
   263b6:	6811      	ldr	r1, [r2, #0]
	int num_regions =
   263b8:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
   263bc:	428b      	cmp	r3, r1
   263be:	d100      	bne.n	263c2 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   263c0:	4770      	bx	lr
  mpu->RNR = rnr;
   263c2:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   263c4:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   263c6:	3301      	adds	r3, #1
   263c8:	e7f8      	b.n	263bc <z_arm_clear_arm_mpu_config+0xc>
   263ca:	bf00      	nop
   263cc:	e000ed90 	.word	0xe000ed90

000263d0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   263d0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   263d2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   263d4:	2400      	movs	r4, #0
   263d6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   263da:	f7ff ffe9 	bl	263b0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   263de:	4a0e      	ldr	r2, [pc, #56]	; (26418 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
   263e0:	4623      	mov	r3, r4
   263e2:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
   263e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   263e8:	f103 0020 	add.w	r0, r3, #32
   263ec:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   263ee:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   263f0:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   263f4:	d1f8      	bne.n	263e8 <z_arm_init_arch_hw_at_boot+0x18>
   263f6:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   263f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   263fc:	f103 0260 	add.w	r2, r3, #96	; 0x60
   26400:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   26402:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   26404:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   26408:	d1f8      	bne.n	263fc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   2640a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   2640c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   26410:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   26414:	bd10      	pop	{r4, pc}
   26416:	bf00      	nop
   26418:	e000e100 	.word	0xe000e100

0002641c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2641c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2641e:	2120      	movs	r1, #32
   26420:	4803      	ldr	r0, [pc, #12]	; (26430 <z_arm_interrupt_init+0x14>)
   26422:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   26424:	3301      	adds	r3, #1
   26426:	2b41      	cmp	r3, #65	; 0x41
   26428:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2642c:	d1f9      	bne.n	26422 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2642e:	4770      	bx	lr
   26430:	e000e100 	.word	0xe000e100

00026434 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   26434:	b508      	push	{r3, lr}
	if (_current == thread) {
   26436:	4b0e      	ldr	r3, [pc, #56]	; (26470 <z_impl_k_thread_abort+0x3c>)
   26438:	689b      	ldr	r3, [r3, #8]
   2643a:	4283      	cmp	r3, r0
   2643c:	d107      	bne.n	2644e <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2643e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   26442:	b193      	cbz	r3, 2646a <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   26444:	4a0b      	ldr	r2, [pc, #44]	; (26474 <z_impl_k_thread_abort+0x40>)
   26446:	6853      	ldr	r3, [r2, #4]
   26448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2644c:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   2644e:	f00f fd8d 	bl	35f6c <z_thread_single_abort>
	__asm__ volatile(
   26452:	f04f 0320 	mov.w	r3, #32
   26456:	f3ef 8011 	mrs	r0, BASEPRI
   2645a:	f383 8811 	msr	BASEPRI, r3
   2645e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   26462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   26466:	f014 bbf8 	b.w	3ac5a <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   2646a:	f010 f881 	bl	36570 <z_self_abort>
   2646e:	bf00      	nop
   26470:	20024098 	.word	0x20024098
   26474:	e000ed00 	.word	0xe000ed00

00026478 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   26478:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   2647a:	4b0e      	ldr	r3, [pc, #56]	; (264b4 <z_arm_configure_static_mpu_regions+0x3c>)
{
   2647c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   2647e:	9302      	str	r3, [sp, #8]
   26480:	4b0d      	ldr	r3, [pc, #52]	; (264b8 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   26482:	4c0e      	ldr	r4, [pc, #56]	; (264bc <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   26484:	9303      	str	r3, [sp, #12]
   26486:	4b0e      	ldr	r3, [pc, #56]	; (264c0 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   26488:	4a0e      	ldr	r2, [pc, #56]	; (264c4 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   2648a:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   2648c:	ab02      	add	r3, sp, #8
   2648e:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   26490:	a801      	add	r0, sp, #4
   26492:	4623      	mov	r3, r4
   26494:	2101      	movs	r1, #1
   26496:	f000 f937 	bl	26708 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   2649a:	2300      	movs	r3, #0
   2649c:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   2649e:	4b0a      	ldr	r3, [pc, #40]	; (264c8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   264a0:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   264a2:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   264a4:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   264a6:	9305      	str	r3, [sp, #20]
   264a8:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   264aa:	f000 f937 	bl	2671c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   264ae:	b008      	add	sp, #32
   264b0:	bd10      	pop	{r4, pc}
   264b2:	bf00      	nop
   264b4:	20020000 	.word	0x20020000
   264b8:	00000000 	.word	0x00000000
   264bc:	20040000 	.word	0x20040000
   264c0:	00010006 	.word	0x00010006
   264c4:	20020000 	.word	0x20020000
   264c8:	20020900 	.word	0x20020900

000264cc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   264cc:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   264ce:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   264d0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   264d2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   264d6:	f004 031f 	and.w	r3, r4, #31
   264da:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   264dc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   264de:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   264e0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   264e4:	4904      	ldr	r1, [pc, #16]	; (264f8 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   264e6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   264ea:	f043 0301 	orr.w	r3, r3, #1
   264ee:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   264f0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   264f2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   264f4:	bd10      	pop	{r4, pc}
   264f6:	bf00      	nop
   264f8:	e000ed90 	.word	0xe000ed90

000264fc <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   264fc:	280f      	cmp	r0, #15
{
   264fe:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   26500:	d90d      	bls.n	2651e <region_allocate_and_init+0x22>
   26502:	4b08      	ldr	r3, [pc, #32]	; (26524 <region_allocate_and_init+0x28>)
   26504:	4a08      	ldr	r2, [pc, #32]	; (26528 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   26506:	4601      	mov	r1, r0
   26508:	1ad2      	subs	r2, r2, r3
   2650a:	08d2      	lsrs	r2, r2, #3
   2650c:	0192      	lsls	r2, r2, #6
   2650e:	4807      	ldr	r0, [pc, #28]	; (2652c <region_allocate_and_init+0x30>)
   26510:	f042 0201 	orr.w	r2, r2, #1
   26514:	f011 ffe3 	bl	384de <log_1>
		return -EINVAL;
   26518:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   2651c:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   2651e:	f7ff ffd5 	bl	264cc <region_init>
	return index;
   26522:	e7fb      	b.n	2651c <region_allocate_and_init+0x20>
   26524:	0003c2cc 	.word	0x0003c2cc
   26528:	0003c374 	.word	0x0003c374
   2652c:	0003ee83 	.word	0x0003ee83

00026530 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   26530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26534:	4680      	mov	r8, r0
   26536:	4689      	mov	r9, r1
   26538:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2653a:	2700      	movs	r7, #0
	MPU->RNR = index;
   2653c:	4d51      	ldr	r5, [pc, #324]	; (26684 <mpu_configure_regions_and_partition.constprop.0+0x154>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   2653e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   26540:	454f      	cmp	r7, r9
   26542:	da35      	bge.n	265b0 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   26544:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   26548:	f8d3 a004 	ldr.w	sl, [r3, #4]
   2654c:	f1ba 0f00 	cmp.w	sl, #0
   26550:	d04e      	beq.n	265f0 <mpu_configure_regions_and_partition.constprop.0+0xc0>
		&&
   26552:	f1ba 0f1f 	cmp.w	sl, #31
   26556:	d91e      	bls.n	26596 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   26558:	f01a 0f1f 	tst.w	sl, #31
   2655c:	d11b      	bne.n	26596 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   2655e:	f8d3 b000 	ldr.w	fp, [r3]
		&&
   26562:	f01b 0f1f 	tst.w	fp, #31
   26566:	d116      	bne.n	26596 <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   26568:	4658      	mov	r0, fp
   2656a:	f012 fe9f 	bl	392ac <arm_cmse_mpu_region_get>
   2656e:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   26570:	eb0a 000b 	add.w	r0, sl, fp
   26574:	3801      	subs	r0, #1
   26576:	f012 fe99 	bl	392ac <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   2657a:	4286      	cmp	r6, r0
   2657c:	d01c      	beq.n	265b8 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   2657e:	f06f 0615 	mvn.w	r6, #21
   26582:	4a41      	ldr	r2, [pc, #260]	; (26688 <mpu_configure_regions_and_partition.constprop.0+0x158>)
   26584:	4b41      	ldr	r3, [pc, #260]	; (2668c <mpu_configure_regions_and_partition.constprop.0+0x15c>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   26586:	4631      	mov	r1, r6
   26588:	1ad2      	subs	r2, r2, r3
   2658a:	08d2      	lsrs	r2, r2, #3
   2658c:	0192      	lsls	r2, r2, #6
   2658e:	4840      	ldr	r0, [pc, #256]	; (26690 <mpu_configure_regions_and_partition.constprop.0+0x160>)
   26590:	f042 0201 	orr.w	r2, r2, #1
   26594:	e008      	b.n	265a8 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   26596:	4639      	mov	r1, r7
   26598:	4a3b      	ldr	r2, [pc, #236]	; (26688 <mpu_configure_regions_and_partition.constprop.0+0x158>)
   2659a:	4b3c      	ldr	r3, [pc, #240]	; (2668c <mpu_configure_regions_and_partition.constprop.0+0x15c>)
   2659c:	483d      	ldr	r0, [pc, #244]	; (26694 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   2659e:	1ad2      	subs	r2, r2, r3
   265a0:	08d2      	lsrs	r2, r2, #3
   265a2:	0192      	lsls	r2, r2, #6
   265a4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   265a8:	f011 ff99 	bl	384de <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   265ac:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   265b0:	4620      	mov	r0, r4
   265b2:	b005      	add	sp, #20
   265b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   265b8:	f116 0f16 	cmn.w	r6, #22
   265bc:	d0e1      	beq.n	26582 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   265be:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   265c0:	42b3      	cmp	r3, r6
   265c2:	dbde      	blt.n	26582 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   265c4:	60ae      	str	r6, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   265c6:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   265c8:	60ae      	str	r6, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   265ca:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   265cc:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   265d0:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   265d4:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   265d8:	e9d1 3200 	ldrd	r3, r2, [r1]
   265dc:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   265de:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   265e0:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   265e4:	d116      	bne.n	26614 <mpu_configure_regions_and_partition.constprop.0+0xe4>
   265e6:	45d3      	cmp	fp, sl
   265e8:	d104      	bne.n	265f4 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, regions[i]);
   265ea:	b2f0      	uxtb	r0, r6
   265ec:	f012 fe45 	bl	3927a <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   265f0:	3701      	adds	r7, #1
   265f2:	e7a5      	b.n	26540 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   265f4:	60ae      	str	r6, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   265f6:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   265f8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   265fc:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   26600:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   26602:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   26604:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   26606:	f012 fe38 	bl	3927a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   2660a:	f110 0f16 	cmn.w	r0, #22
   2660e:	d0cd      	beq.n	265ac <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   26610:	1c44      	adds	r4, r0, #1
   26612:	e7ed      	b.n	265f0 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RNR = index;
   26614:	60ae      	str	r6, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   26616:	692a      	ldr	r2, [r5, #16]
   26618:	3b01      	subs	r3, #1
   2661a:	f023 031f 	bic.w	r3, r3, #31
   2661e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   26622:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   26624:	45d3      	cmp	fp, sl
   26626:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   26628:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   2662a:	d0ec      	beq.n	26606 <mpu_configure_regions_and_partition.constprop.0+0xd6>
				mpu_configure_region(reg_index, regions[i]);
   2662c:	f012 fe25 	bl	3927a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   26630:	f110 0f16 	cmn.w	r0, #22
   26634:	d0ba      	beq.n	265ac <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   26636:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   26638:	68ea      	ldr	r2, [r5, #12]
   2663a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   2663e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   26642:	f362 0304 	bfi	r3, r2, #0, #5
   26646:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   2664a:	692b      	ldr	r3, [r5, #16]
   2664c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   26650:	085b      	lsrs	r3, r3, #1
   26652:	f363 1247 	bfi	r2, r3, #5, #3
   26656:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   2665a:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   2665e:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   26660:	e9d2 3200 	ldrd	r3, r2, [r2]
   26664:	4413      	add	r3, r2
   26666:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   26668:	f023 031f 	bic.w	r3, r3, #31
   2666c:	445b      	add	r3, fp
   2666e:	eba3 030a 	sub.w	r3, r3, sl
   26672:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   26676:	4669      	mov	r1, sp
   26678:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   2667a:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   2667c:	f7ff ff3e 	bl	264fc <region_allocate_and_init>
   26680:	e7c3      	b.n	2660a <mpu_configure_regions_and_partition.constprop.0+0xda>
   26682:	bf00      	nop
   26684:	e000ed90 	.word	0xe000ed90
   26688:	0003c374 	.word	0x0003c374
   2668c:	0003c2cc 	.word	0x0003c2cc
   26690:	0003eecc 	.word	0x0003eecc
   26694:	0003eea9 	.word	0x0003eea9

00026698 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   26698:	2205      	movs	r2, #5
   2669a:	4b03      	ldr	r3, [pc, #12]	; (266a8 <arm_core_mpu_enable+0x10>)
   2669c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   2669e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   266a2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   266a6:	4770      	bx	lr
   266a8:	e000ed90 	.word	0xe000ed90

000266ac <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   266ac:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   266b0:	2200      	movs	r2, #0
   266b2:	4b01      	ldr	r3, [pc, #4]	; (266b8 <arm_core_mpu_disable+0xc>)
   266b4:	605a      	str	r2, [r3, #4]
}
   266b6:	4770      	bx	lr
   266b8:	e000ed90 	.word	0xe000ed90

000266bc <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   266bc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   266be:	4c0e      	ldr	r4, [pc, #56]	; (266f8 <arm_mpu_init+0x3c>)
   266c0:	6825      	ldr	r5, [r4, #0]
   266c2:	2d10      	cmp	r5, #16
   266c4:	d814      	bhi.n	266f0 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   266c6:	f7ff fff1 	bl	266ac <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   266ca:	2000      	movs	r0, #0
	MPU->MAIR0 =
   266cc:	4b0b      	ldr	r3, [pc, #44]	; (266fc <arm_mpu_init+0x40>)
   266ce:	4a0c      	ldr	r2, [pc, #48]	; (26700 <arm_mpu_init+0x44>)
   266d0:	631a      	str	r2, [r3, #48]	; 0x30
   266d2:	4285      	cmp	r5, r0
   266d4:	d105      	bne.n	266e2 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   266d6:	4b0b      	ldr	r3, [pc, #44]	; (26704 <arm_mpu_init+0x48>)
   266d8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   266da:	f7ff ffdd 	bl	26698 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   266de:	2000      	movs	r0, #0
}
   266e0:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   266e2:	6861      	ldr	r1, [r4, #4]
   266e4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   266e8:	f7ff fef0 	bl	264cc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   266ec:	3001      	adds	r0, #1
   266ee:	e7f0      	b.n	266d2 <arm_mpu_init+0x16>
		return -1;
   266f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   266f4:	e7f4      	b.n	266e0 <arm_mpu_init+0x24>
   266f6:	bf00      	nop
   266f8:	0003c7c8 	.word	0x0003c7c8
   266fc:	e000ed90 	.word	0xe000ed90
   26700:	0044ffaa 	.word	0x0044ffaa
   26704:	2002c07b 	.word	0x2002c07b

00026708 <arm_core_mpu_configure_static_mpu_regions>:
{
   26708:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2670a:	4c03      	ldr	r4, [pc, #12]	; (26718 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   2670c:	7822      	ldrb	r2, [r4, #0]
   2670e:	f7ff ff0f 	bl	26530 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   26712:	7020      	strb	r0, [r4, #0]
}
   26714:	bd10      	pop	{r4, pc}
   26716:	bf00      	nop
   26718:	2002c07b 	.word	0x2002c07b

0002671c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   2671c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26720:	4d26      	ldr	r5, [pc, #152]	; (267bc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   26722:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   26724:	4606      	mov	r6, r0
   26726:	f04f 0800 	mov.w	r8, #0
   2672a:	46ab      	mov	fp, r5
	MPU->RNR = index;
   2672c:	4f24      	ldr	r7, [pc, #144]	; (267c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   2672e:	45d0      	cmp	r8, sl
   26730:	da1b      	bge.n	2676a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   26732:	f8d6 9004 	ldr.w	r9, [r6, #4]
   26736:	f1b9 0f00 	cmp.w	r9, #0
   2673a:	d039      	beq.n	267b0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   2673c:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2673e:	4608      	mov	r0, r1
   26740:	9101      	str	r1, [sp, #4]
   26742:	f012 fdb3 	bl	392ac <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   26746:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   26748:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   2674a:	eb09 0001 	add.w	r0, r9, r1
   2674e:	3801      	subs	r0, #1
   26750:	f012 fdac 	bl	392ac <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   26754:	4284      	cmp	r4, r0
   26756:	f04f 0214 	mov.w	r2, #20
   2675a:	4b1a      	ldr	r3, [pc, #104]	; (267c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   2675c:	d008      	beq.n	26770 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   2675e:	f06f 0315 	mvn.w	r3, #21
   26762:	fb02 f808 	mul.w	r8, r2, r8
   26766:	f84b 3008 	str.w	r3, [fp, r8]
}
   2676a:	b003      	add	sp, #12
   2676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   26770:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   26774:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   26776:	d0f8      	beq.n	2676a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   26778:	7819      	ldrb	r1, [r3, #0]
   2677a:	42a1      	cmp	r1, r4
   2677c:	ddf5      	ble.n	2676a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   2677e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   26782:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   26784:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   26786:	68fc      	ldr	r4, [r7, #12]
   26788:	f100 0108 	add.w	r1, r0, #8
   2678c:	7b00      	ldrb	r0, [r0, #12]
   2678e:	f364 0004 	bfi	r0, r4, #0, #5
   26792:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   26794:	6938      	ldr	r0, [r7, #16]
   26796:	790c      	ldrb	r4, [r1, #4]
   26798:	0840      	lsrs	r0, r0, #1
   2679a:	f360 1447 	bfi	r4, r0, #5, #3
   2679e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   267a0:	68f9      	ldr	r1, [r7, #12]
   267a2:	f021 011f 	bic.w	r1, r1, #31
   267a6:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   267a8:	6939      	ldr	r1, [r7, #16]
   267aa:	f021 011f 	bic.w	r1, r1, #31
   267ae:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   267b0:	f108 0801 	add.w	r8, r8, #1
   267b4:	3514      	adds	r5, #20
   267b6:	360c      	adds	r6, #12
   267b8:	e7b9      	b.n	2672e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   267ba:	bf00      	nop
   267bc:	20023744 	.word	0x20023744
   267c0:	e000ed90 	.word	0xe000ed90
   267c4:	2002c07b 	.word	0x2002c07b

000267c8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   267c8:	4b01      	ldr	r3, [pc, #4]	; (267d0 <__stdout_hook_install+0x8>)
   267ca:	6018      	str	r0, [r3, #0]
}
   267cc:	4770      	bx	lr
   267ce:	bf00      	nop
   267d0:	2002019c 	.word	0x2002019c

000267d4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   267d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   267d6:	460d      	mov	r5, r1
   267d8:	4f09      	ldr	r7, [pc, #36]	; (26800 <z_impl_zephyr_write_stdout+0x2c>)
   267da:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   267dc:	f1c0 0401 	rsb	r4, r0, #1
   267e0:	19a3      	adds	r3, r4, r6
   267e2:	429d      	cmp	r5, r3
   267e4:	dc01      	bgt.n	267ea <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   267e6:	4628      	mov	r0, r5
   267e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   267ea:	7873      	ldrb	r3, [r6, #1]
   267ec:	2b0a      	cmp	r3, #10
   267ee:	d102      	bne.n	267f6 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   267f0:	200d      	movs	r0, #13
   267f2:	683b      	ldr	r3, [r7, #0]
   267f4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   267f6:	683b      	ldr	r3, [r7, #0]
   267f8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   267fc:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   267fe:	e7ef      	b.n	267e0 <z_impl_zephyr_write_stdout+0xc>
   26800:	2002019c 	.word	0x2002019c

00026804 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   26804:	b510      	push	{r4, lr}
   26806:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   26808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2680c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26810:	480a      	ldr	r0, [pc, #40]	; (2683c <_sbrk+0x38>)
   26812:	f011 faae 	bl	37d72 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   26816:	490a      	ldr	r1, [pc, #40]	; (26840 <_sbrk+0x3c>)
   26818:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   2681a:	18e0      	adds	r0, r4, r3
   2681c:	4c09      	ldr	r4, [pc, #36]	; (26844 <_sbrk+0x40>)
   2681e:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   26822:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   26826:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   26828:	bf2e      	itee	cs
   2682a:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   2682e:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   26830:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   26832:	4802      	ldr	r0, [pc, #8]	; (2683c <_sbrk+0x38>)
   26834:	f011 fa98 	bl	37d68 <sys_sem_give>

	return ret;
}
   26838:	4620      	mov	r0, r4
   2683a:	bd10      	pop	{r4, pc}
   2683c:	20020864 	.word	0x20020864
   26840:	20023758 	.word	0x20023758
   26844:	200337f0 	.word	0x200337f0

00026848 <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   26848:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   2684a:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2684c:	4804      	ldr	r0, [pc, #16]	; (26860 <__chk_fail+0x18>)
   2684e:	f7ff ffc1 	bl	267d4 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   26852:	4040      	eors	r0, r0
   26854:	f380 8811 	msr	BASEPRI, r0
   26858:	f04f 0003 	mov.w	r0, #3
   2685c:	df02      	svc	2
	CODE_UNREACHABLE;
   2685e:	bf00      	nop
   26860:	0003eeef 	.word	0x0003eeef

00026864 <board_circuitdojo_feather_nrf9160_init>:

#define GPIO0 DT_LABEL(DT_NODELABEL(gpio0))
#define POWER_LATCH_PIN 31

static int board_circuitdojo_feather_nrf9160_init(struct device *dev)
{
   26864:	b510      	push	{r4, lr}
   26866:	480b      	ldr	r0, [pc, #44]	; (26894 <board_circuitdojo_feather_nrf9160_init+0x30>)
   26868:	f00e fdd0 	bl	3540c <z_impl_device_get_binding>
	ARG_UNUSED(dev);

	/* Get the device binding */
	struct device *gpio = device_get_binding(GPIO0);
	if (gpio == NULL) {
   2686c:	b160      	cbz	r0, 26888 <board_circuitdojo_feather_nrf9160_init+0x24>
	struct gpio_driver_data *data =
   2686e:	68c4      	ldr	r4, [r0, #12]
	return api->pin_configure(port, pin, flags);
   26870:	6883      	ldr	r3, [r0, #8]
   26872:	f44f 6220 	mov.w	r2, #2560	; 0xa00
   26876:	211f      	movs	r1, #31
   26878:	681b      	ldr	r3, [r3, #0]
   2687a:	4798      	blx	r3
	if (ret != 0) {
   2687c:	b938      	cbnz	r0, 2688e <board_circuitdojo_feather_nrf9160_init+0x2a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2687e:	6823      	ldr	r3, [r4, #0]
   26880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   26884:	6023      	str	r3, [r4, #0]

	/* Configure latch pin as output. */
	gpio_pin_configure(gpio, POWER_LATCH_PIN, GPIO_OUTPUT_HIGH);

	return 0;
}
   26886:	bd10      	pop	{r4, pc}
		return -ENODEV;
   26888:	f06f 0012 	mvn.w	r0, #18
   2688c:	e7fb      	b.n	26886 <board_circuitdojo_feather_nrf9160_init+0x22>
	return 0;
   2688e:	2000      	movs	r0, #0
   26890:	e7f9      	b.n	26886 <board_circuitdojo_feather_nrf9160_init+0x22>
   26892:	bf00      	nop
   26894:	0003ce82 	.word	0x0003ce82

00026898 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   26898:	b538      	push	{r3, r4, r5, lr}
   2689a:	4c08      	ldr	r4, [pc, #32]	; (268bc <net_if_init+0x24>)

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   2689c:	4d08      	ldr	r5, [pc, #32]	; (268c0 <net_if_init+0x28>)
   2689e:	42ac      	cmp	r4, r5
   268a0:	4620      	mov	r0, r4
   268a2:	d300      	bcc.n	268a6 <net_if_init+0xe>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   268a4:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   268a6:	6803      	ldr	r3, [r0, #0]
   268a8:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   268aa:	681b      	ldr	r3, [r3, #0]
   268ac:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   268ae:	2b00      	cmp	r3, #0
   268b0:	d0f5      	beq.n	2689e <net_if_init+0x6>
   268b2:	681b      	ldr	r3, [r3, #0]
   268b4:	2b00      	cmp	r3, #0
   268b6:	d0f2      	beq.n	2689e <net_if_init+0x6>
	api->init(iface);
   268b8:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   268ba:	e7f0      	b.n	2689e <net_if_init+0x6>
   268bc:	200208dc 	.word	0x200208dc
   268c0:	200208e0 	.word	0x200208e0

000268c4 <net_if_post_init>:

void net_if_post_init(void)
{
   268c4:	b538      	push	{r3, r4, r5, lr}
   268c6:	4c08      	ldr	r4, [pc, #32]	; (268e8 <net_if_post_init+0x24>)
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   268c8:	4d08      	ldr	r5, [pc, #32]	; (268ec <net_if_post_init+0x28>)
   268ca:	42ac      	cmp	r4, r5
   268cc:	4620      	mov	r0, r4
   268ce:	d300      	bcc.n	268d2 <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   268d0:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   268d2:	6803      	ldr	r3, [r0, #0]
   268d4:	3404      	adds	r4, #4
   268d6:	330c      	adds	r3, #12
   268d8:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   268dc:	071b      	lsls	r3, r3, #28
   268de:	d4f4      	bmi.n	268ca <net_if_post_init+0x6>
			net_if_up(iface);
   268e0:	f012 fd0c 	bl	392fc <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   268e4:	e7f1      	b.n	268ca <net_if_post_init+0x6>
   268e6:	bf00      	nop
   268e8:	200208dc 	.word	0x200208dc
   268ec:	200208e0 	.word	0x200208e0

000268f0 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   268f0:	2300      	movs	r3, #0
{
   268f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   268f6:	2802      	cmp	r0, #2
{
   268f8:	b089      	sub	sp, #36	; 0x24
   268fa:	4607      	mov	r7, r0
   268fc:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   268fe:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   26902:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   26904:	d13e      	bne.n	26984 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   26906:	a806      	add	r0, sp, #24
   26908:	9105      	str	r1, [sp, #20]
   2690a:	4601      	mov	r1, r0
{
   2690c:	461a      	mov	r2, r3
   2690e:	e006      	b.n	2691e <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   26910:	780c      	ldrb	r4, [r1, #0]
   26912:	3201      	adds	r2, #1
   26914:	3401      	adds	r4, #1
   26916:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   26918:	b2d4      	uxtb	r4, r2
   2691a:	2c07      	cmp	r4, #7
   2691c:	d804      	bhi.n	26928 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   2691e:	9c04      	ldr	r4, [sp, #16]
   26920:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   26924:	2c00      	cmp	r4, #0
   26926:	d0f3      	beq.n	26910 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   26928:	3301      	adds	r3, #1
   2692a:	2b08      	cmp	r3, #8
   2692c:	f101 0101 	add.w	r1, r1, #1
   26930:	d1ec      	bne.n	2690c <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   26932:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   26936:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   2693a:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   2693c:	f810 2b01 	ldrb.w	r2, [r0], #1
   26940:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   26942:	bf88      	it	hi
   26944:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   26948:	f103 0301 	add.w	r3, r3, #1
   2694c:	b2db      	uxtb	r3, r3
				pos = i;
   2694e:	bf88      	it	hi
   26950:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   26952:	2b08      	cmp	r3, #8
   26954:	d1f2      	bne.n	2693c <z_impl_net_addr_ntop+0x4c>
		len = 8;
   26956:	469b      	mov	fp, r3
   26958:	f1b9 0f01 	cmp.w	r9, #1
   2695c:	f04f 033a 	mov.w	r3, #58	; 0x3a
   26960:	bf08      	it	eq
   26962:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
   26966:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   26968:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   2696a:	4634      	mov	r4, r6
   2696c:	460d      	mov	r5, r1
   2696e:	455d      	cmp	r5, fp
   26970:	db17      	blt.n	269a2 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   26972:	42b4      	cmp	r4, r6
   26974:	d008      	beq.n	26988 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   26976:	2300      	movs	r3, #0
   26978:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   2697a:	bf0c      	ite	eq
   2697c:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   26980:	7023      	strbne	r3, [r4, #0]
   26982:	e002      	b.n	2698a <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   26984:	2801      	cmp	r0, #1
   26986:	d004      	beq.n	26992 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   26988:	2600      	movs	r6, #0
	}

	return dst;
}
   2698a:	4630      	mov	r0, r6
   2698c:	b009      	add	sp, #36	; 0x24
   2698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   26992:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   26994:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   26998:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   2699c:	4681      	mov	r9, r0
		delim = '.';
   2699e:	9303      	str	r3, [sp, #12]
   269a0:	e7e2      	b.n	26968 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   269a2:	f1bb 0f04 	cmp.w	fp, #4
   269a6:	d13b      	bne.n	26a20 <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   269a8:	9b04      	ldr	r3, [sp, #16]
   269aa:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   269ac:	b94a      	cbnz	r2, 269c2 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   269ae:	2330      	movs	r3, #48	; 0x30
   269b0:	4620      	mov	r0, r4
   269b2:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   269b6:	9b03      	ldr	r3, [sp, #12]
   269b8:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   269ba:	3501      	adds	r5, #1
   269bc:	4604      	mov	r4, r0
   269be:	b2ed      	uxtb	r5, r5
   269c0:	e7d5      	b.n	2696e <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   269c2:	f04f 0e09 	mov.w	lr, #9
   269c6:	f04f 0a00 	mov.w	sl, #0
   269ca:	e9cd 2401 	strd	r2, r4, [sp, #4]
   269ce:	483a      	ldr	r0, [pc, #232]	; (26ab8 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   269d0:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   269d4:	45f2      	cmp	sl, lr
		value = value % divisor;
   269d6:	fbbc f2f0 	udiv	r2, ip, r0
   269da:	fb00 c212 	mls	r2, r0, r2, ip
   269de:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   269e0:	dc01      	bgt.n	269e6 <z_impl_net_addr_ntop+0xf6>
   269e2:	4584      	cmp	ip, r0
   269e4:	d308      	bcc.n	269f8 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   269e6:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   269ea:	46f2      	mov	sl, lr
   269ec:	9b02      	ldr	r3, [sp, #8]
   269ee:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   269f2:	f803 cb01 	strb.w	ip, [r3], #1
   269f6:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   269f8:	220a      	movs	r2, #10
   269fa:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   269fe:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   26a02:	fbb0 f0f2 	udiv	r0, r0, r2
   26a06:	d1e3      	bne.n	269d0 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   26a08:	f04f 0200 	mov.w	r2, #0
   26a0c:	9b02      	ldr	r3, [sp, #8]
   26a0e:	701a      	strb	r2, [r3, #0]
	return buf - start;
   26a10:	1b1b      	subs	r3, r3, r4
			ptr += l;
   26a12:	b2da      	uxtb	r2, r3
   26a14:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   26a18:	1c58      	adds	r0, r3, #1
   26a1a:	9b03      	ldr	r3, [sp, #12]
   26a1c:	54a3      	strb	r3, [r4, r2]
			continue;
   26a1e:	e7cc      	b.n	269ba <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   26a20:	45a8      	cmp	r8, r5
   26a22:	d110      	bne.n	26a46 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   26a24:	b911      	cbnz	r1, 26a2c <z_impl_net_addr_ntop+0x13c>
   26a26:	f1b8 0f00 	cmp.w	r8, #0
   26a2a:	d102      	bne.n	26a32 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   26a2c:	233a      	movs	r3, #58	; 0x3a
   26a2e:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   26a32:	233a      	movs	r3, #58	; 0x3a
   26a34:	4620      	mov	r0, r4
   26a36:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   26a3a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   26a3e:	441d      	add	r5, r3
			needcolon = false;
   26a40:	2100      	movs	r1, #0
			i += longest - 1U;
   26a42:	b2ed      	uxtb	r5, r5
			continue;
   26a44:	e7b9      	b.n	269ba <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   26a46:	b111      	cbz	r1, 26a4e <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   26a48:	233a      	movs	r3, #58	; 0x3a
   26a4a:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   26a4e:	9b05      	ldr	r3, [sp, #20]
   26a50:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   26a54:	0219      	lsls	r1, r3, #8
   26a56:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   26a5a:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   26a5e:	b20a      	sxth	r2, r1
		bh = value >> 8;
   26a60:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   26a64:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   26a68:	d016      	beq.n	26a98 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   26a6a:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   26a6c:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   26a6e:	d90b      	bls.n	26a88 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   26a70:	2300      	movs	r3, #0
   26a72:	2261      	movs	r2, #97	; 0x61
   26a74:	4620      	mov	r0, r4
   26a76:	f012 fc72 	bl	3935e <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   26a7a:	2301      	movs	r3, #1
   26a7c:	2261      	movs	r2, #97	; 0x61
   26a7e:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   26a80:	f012 fc6d 	bl	3935e <net_byte_to_hex>
		needcolon = true;
   26a84:	2101      	movs	r1, #1
   26a86:	e798      	b.n	269ba <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   26a88:	b25b      	sxtb	r3, r3
   26a8a:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   26a8c:	bf94      	ite	ls
   26a8e:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   26a90:	3357      	addhi	r3, #87	; 0x57
   26a92:	1c60      	adds	r0, r4, #1
   26a94:	7023      	strb	r3, [r4, #0]
   26a96:	e7f0      	b.n	26a7a <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   26a98:	f1ba 0f0f 	cmp.w	sl, #15
   26a9c:	d903      	bls.n	26aa6 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   26a9e:	2261      	movs	r2, #97	; 0x61
   26aa0:	4651      	mov	r1, sl
   26aa2:	4620      	mov	r0, r4
   26aa4:	e7ec      	b.n	26a80 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   26aa6:	b253      	sxtb	r3, r2
   26aa8:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   26aac:	bf94      	ite	ls
   26aae:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   26ab0:	3357      	addhi	r3, #87	; 0x57
   26ab2:	1c60      	adds	r0, r4, #1
   26ab4:	7023      	strb	r3, [r4, #0]
   26ab6:	e7e5      	b.n	26a84 <z_impl_net_addr_ntop+0x194>
   26ab8:	3b9aca00 	.word	0x3b9aca00

00026abc <http_parser_execute>:
}

size_t http_parser_execute(struct http_parser *parser,
			   const struct http_parser_settings *settings,
			   const char *data, size_t len)
{
   26abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ac0:	b097      	sub	sp, #92	; 0x5c
   26ac2:	930a      	str	r3, [sp, #40]	; 0x28
	const unsigned int lenient = parser->lenient_http_headers;
   26ac4:	78c3      	ldrb	r3, [r0, #3]
{
   26ac6:	4690      	mov	r8, r2
	const unsigned int lenient = parser->lenient_http_headers;
   26ac8:	09db      	lsrs	r3, r3, #7
   26aca:	930b      	str	r3, [sp, #44]	; 0x2c
	enum state p_state = (enum state) parser->state;
   26acc:	6803      	ldr	r3, [r0, #0]
{
   26ace:	4604      	mov	r4, r0
	enum state p_state = (enum state) parser->state;
   26ad0:	f3c3 2286 	ubfx	r2, r3, #10, #7
   26ad4:	4613      	mov	r3, r2
   26ad6:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
	const char *header_field_mark = 0;
   26ada:	2200      	movs	r2, #0
	const char *header_value_mark = 0;
   26adc:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
	const char *body_mark = 0;
   26ae0:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
	const char *status_mark = 0;
   26ae4:	9215      	str	r2, [sp, #84]	; 0x54
	*parsed = 0;
   26ae6:	9210      	str	r2, [sp, #64]	; 0x40
	if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   26ae8:	7dc2      	ldrb	r2, [r0, #23]
{
   26aea:	4689      	mov	r9, r1
	if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   26aec:	0652      	lsls	r2, r2, #25
   26aee:	d10a      	bne.n	26b06 <http_parser_execute+0x4a>
	if (len == 0) {
   26af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26af2:	b9fa      	cbnz	r2, 26b34 <http_parser_execute+0x78>
		switch (CURRENT_STATE()) {
   26af4:	2b12      	cmp	r3, #18
   26af6:	d80a      	bhi.n	26b0e <http_parser_execute+0x52>
   26af8:	b1b3      	cbz	r3, 26b28 <http_parser_execute+0x6c>
   26afa:	2201      	movs	r2, #1
   26afc:	fa02 f303 	lsl.w	r3, r2, r3
   26b00:	4acf      	ldr	r2, [pc, #828]	; (26e40 <http_parser_execute+0x384>)
   26b02:	401a      	ands	r2, r3
   26b04:	b182      	cbz	r2, 26b28 <http_parser_execute+0x6c>
	size_t parsed;

	parser_execute(parser, settings, data, len, &parsed);
	return parsed;
   26b06:	9810      	ldr	r0, [sp, #64]	; 0x40
}
   26b08:	b017      	add	sp, #92	; 0x5c
   26b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (CURRENT_STATE()) {
   26b0e:	2b3d      	cmp	r3, #61	; 0x3d
   26b10:	d10a      	bne.n	26b28 <http_parser_execute+0x6c>
			cb_notify(parser, &p_state,
   26b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26b14:	9301      	str	r3, [sp, #4]
   26b16:	ab10      	add	r3, sp, #64	; 0x40
   26b18:	9300      	str	r3, [sp, #0]
   26b1a:	69ca      	ldr	r2, [r1, #28]
   26b1c:	2307      	movs	r3, #7
   26b1e:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
   26b22:	f012 fcf9 	bl	39518 <cb_notify>
			return 0;
   26b26:	e7ee      	b.n	26b06 <http_parser_execute+0x4a>
			SET_ERRNO(HPE_INVALID_EOF_STATE);
   26b28:	220b      	movs	r2, #11
   26b2a:	7de3      	ldrb	r3, [r4, #23]
   26b2c:	f362 0306 	bfi	r3, r2, #0, #7
   26b30:	75e3      	strb	r3, [r4, #23]
			return 1;
   26b32:	e7e8      	b.n	26b06 <http_parser_execute+0x4a>
	if (CURRENT_STATE() == s_header_field) {
   26b34:	2b2b      	cmp	r3, #43	; 0x2b
   26b36:	d103      	bne.n	26b40 <http_parser_execute+0x84>
		header_field_mark = data;
   26b38:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
	switch (CURRENT_STATE()) {
   26b3c:	4646      	mov	r6, r8
   26b3e:	e113      	b.n	26d68 <http_parser_execute+0x2ac>
	if (CURRENT_STATE() == s_header_value) {
   26b40:	2b30      	cmp	r3, #48	; 0x30
   26b42:	d009      	beq.n	26b58 <http_parser_execute+0x9c>
	switch (CURRENT_STATE()) {
   26b44:	2b10      	cmp	r3, #16
   26b46:	d00a      	beq.n	26b5e <http_parser_execute+0xa2>
   26b48:	336b      	adds	r3, #107	; 0x6b
   26b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26b4e:	2b0a      	cmp	r3, #10
   26b50:	d8f4      	bhi.n	26b3c <http_parser_execute+0x80>
		url_mark = data;
   26b52:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
		break;
   26b56:	e7f1      	b.n	26b3c <http_parser_execute+0x80>
		header_value_mark = data;
   26b58:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
	switch (CURRENT_STATE()) {
   26b5c:	e7ee      	b.n	26b3c <http_parser_execute+0x80>
		status_mark = data;
   26b5e:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
		break;
   26b62:	e7eb      	b.n	26b3c <http_parser_execute+0x80>
		if (PARSING_HEADER(CURRENT_STATE())) {
   26b64:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
		ch = *p;
   26b68:	7835      	ldrb	r5, [r6, #0]
		if (PARSING_HEADER(CURRENT_STATE())) {
   26b6a:	2b38      	cmp	r3, #56	; 0x38
   26b6c:	d85b      	bhi.n	26c26 <http_parser_execute+0x16a>
	parser->nread += bytes;
   26b6e:	6863      	ldr	r3, [r4, #4]
   26b70:	3301      	adds	r3, #1
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   26b72:	f5b3 3fa0 	cmp.w	r3, #81920	; 0x14000
	parser->nread += bytes;
   26b76:	6063      	str	r3, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   26b78:	d955      	bls.n	26c26 <http_parser_execute+0x16a>
		parser->http_errno = HPE_HEADER_OVERFLOW;
   26b7a:	220c      	movs	r2, #12
   26b7c:	7de3      	ldrb	r3, [r4, #23]
			SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
   26b7e:	f362 0306 	bfi	r3, r2, #0, #7
   26b82:	75e3      	strb	r3, [r4, #23]
			goto error;
   26b84:	e022      	b.n	26bcc <http_parser_execute+0x110>
   26b86:	4631      	mov	r1, r6
			parser->header_state = h_upgrade;
   26b88:	f04f 0c0c 	mov.w	ip, #12
			parser->header_state = h_transfer_encoding;
   26b8c:	200b      	movs	r0, #11
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
   26b8e:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 26e48 <http_parser_execute+0x38c>
		if (cond1 || c != CONNECTION[parser->index]) {
   26b92:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 26e4c <http_parser_execute+0x390>
			for (; p != data + len; p++) {
   26b96:	458b      	cmp	fp, r1
   26b98:	460f      	mov	r7, r1
   26b9a:	d009      	beq.n	26bb0 <http_parser_execute+0xf4>
				ch = *p;
   26b9c:	f811 5b01 	ldrb.w	r5, [r1], #1
				c = TOKEN(ch);
   26ba0:	2d20      	cmp	r5, #32
   26ba2:	f000 83e1 	beq.w	27368 <http_parser_execute+0x8ac>
   26ba6:	4ba7      	ldr	r3, [pc, #668]	; (26e44 <http_parser_execute+0x388>)
   26ba8:	5d5b      	ldrb	r3, [r3, r5]
				if (!c) {
   26baa:	2b00      	cmp	r3, #0
   26bac:	f040 83dd 	bne.w	2736a <http_parser_execute+0x8ae>
	parser->nread += bytes;
   26bb0:	6863      	ldr	r3, [r4, #4]
			rc = count_header_size(parser, p - start);
   26bb2:	1bbe      	subs	r6, r7, r6
	parser->nread += bytes;
   26bb4:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   26bb6:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   26bba:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   26bbc:	f240 8488 	bls.w	274d0 <http_parser_execute+0xa14>
		parser->http_errno = HPE_HEADER_OVERFLOW;
   26bc0:	220c      	movs	r2, #12
   26bc2:	7de3      	ldrb	r3, [r4, #23]
			goto error;
   26bc4:	463e      	mov	r6, r7
			SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   26bc6:	f362 0306 	bfi	r3, r2, #0, #7
   26bca:	75e3      	strb	r3, [r4, #23]
	if (HTTP_PARSER_ERRNO(parser) == HPE_OK) {
   26bcc:	7de3      	ldrb	r3, [r4, #23]
   26bce:	065a      	lsls	r2, r3, #25
   26bd0:	f040 872a 	bne.w	27a28 <http_parser_execute+0xf6c>
		SET_ERRNO(HPE_UNKNOWN);
   26bd4:	2220      	movs	r2, #32
   26bd6:	f000 bf3d 	b.w	27a54 <http_parser_execute+0xf98>
			if (LIKELY(ch == CR || ch == LF)) {
   26bda:	2d0d      	cmp	r5, #13
   26bdc:	f000 80c3 	beq.w	26d66 <http_parser_execute+0x2aa>
   26be0:	2d0a      	cmp	r5, #10
   26be2:	f000 80c0 	beq.w	26d66 <http_parser_execute+0x2aa>
			SET_ERRNO(HPE_CLOSED_CONNECTION);
   26be6:	220d      	movs	r2, #13
   26be8:	7de3      	ldrb	r3, [r4, #23]
   26bea:	e7c8      	b.n	26b7e <http_parser_execute+0xc2>
			if (ch == CR || ch == LF) {
   26bec:	2d0d      	cmp	r5, #13
   26bee:	f000 80ba 	beq.w	26d66 <http_parser_execute+0x2aa>
   26bf2:	2d0a      	cmp	r5, #10
   26bf4:	f000 80b7 	beq.w	26d66 <http_parser_execute+0x2aa>
			parser->flags = 0U;
   26bf8:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   26bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			parser->flags = 0U;
   26bfe:	f36f 0389 	bfc	r3, #2, #8
   26c02:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   26c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (ch == 'H') {
   26c08:	2d48      	cmp	r5, #72	; 0x48
			parser->content_length = ULLONG_MAX;
   26c0a:	e9c4 2302 	strd	r2, r3, [r4, #8]
			if (ch == 'H') {
   26c0e:	d103      	bne.n	26c18 <http_parser_execute+0x15c>
				UPDATE_STATE(s_res_or_resp_H);
   26c10:	2303      	movs	r3, #3
			UPDATE_STATE(s_req_method);
   26c12:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
   26c16:	e12c      	b.n	26e72 <http_parser_execute+0x3b6>
				parser->type = HTTP_REQUEST;
   26c18:	7823      	ldrb	r3, [r4, #0]
   26c1a:	f36f 0301 	bfc	r3, #0, #2
   26c1e:	7023      	strb	r3, [r4, #0]
				UPDATE_STATE(s_start_req);
   26c20:	2312      	movs	r3, #18
				UPDATE_STATE(s_headers_almost_done);
   26c22:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		switch (CURRENT_STATE()) {
   26c26:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
   26c2a:	1e43      	subs	r3, r0, #1
   26c2c:	2b3d      	cmp	r3, #61	; 0x3d
   26c2e:	f201 80b7 	bhi.w	27da0 <http_parser_execute+0x12e4>
   26c32:	a201      	add	r2, pc, #4	; (adr r2, 26c38 <http_parser_execute+0x17c>)
   26c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   26c38:	00026bdb 	.word	0x00026bdb
   26c3c:	00026bed 	.word	0x00026bed
   26c40:	00026d31 	.word	0x00026d31
   26c44:	00026e51 	.word	0x00026e51
   26c48:	00026d3f 	.word	0x00026d3f
   26c4c:	00026e95 	.word	0x00026e95
   26c50:	00026e99 	.word	0x00026e99
   26c54:	00026e9d 	.word	0x00026e9d
   26c58:	00026ea1 	.word	0x00026ea1
   26c5c:	00026eb5 	.word	0x00026eb5
   26c60:	00026ebf 	.word	0x00026ebf
   26c64:	00026ecd 	.word	0x00026ecd
   26c68:	00026ed7 	.word	0x00026ed7
   26c6c:	00026ef3 	.word	0x00026ef3
   26c70:	00026f29 	.word	0x00026f29
   26c74:	00026f4b 	.word	0x00026f4b
   26c78:	00026f07 	.word	0x00026f07
   26c7c:	00026f8d 	.word	0x00026f8d
   26c80:	00027065 	.word	0x00027065
   26c84:	00027187 	.word	0x00027187
   26c88:	000271b5 	.word	0x000271b5
   26c8c:	000271b5 	.word	0x000271b5
   26c90:	000271b5 	.word	0x000271b5
   26c94:	000271b5 	.word	0x000271b5
   26c98:	000271d1 	.word	0x000271d1
   26c9c:	000271d1 	.word	0x000271d1
   26ca0:	000271d1 	.word	0x000271d1
   26ca4:	000271d1 	.word	0x000271d1
   26ca8:	000271d1 	.word	0x000271d1
   26cac:	000271d1 	.word	0x000271d1
   26cb0:	000271d1 	.word	0x000271d1
   26cb4:	0002721b 	.word	0x0002721b
   26cb8:	0002722b 	.word	0x0002722b
   26cbc:	0002722f 	.word	0x0002722f
   26cc0:	00027233 	.word	0x00027233
   26cc4:	00027237 	.word	0x00027237
   26cc8:	0002723b 	.word	0x0002723b
   26ccc:	0002724d 	.word	0x0002724d
   26cd0:	00027279 	.word	0x00027279
   26cd4:	00027289 	.word	0x00027289
   26cd8:	000272b3 	.word	0x000272b3
   26cdc:	000272bf 	.word	0x000272bf
   26ce0:	00026b87 	.word	0x00026b87
   26ce4:	0002751d 	.word	0x0002751d
   26ce8:	00027535 	.word	0x00027535
   26cec:	0002793b 	.word	0x0002793b
   26cf0:	00027539 	.word	0x00027539
   26cf4:	000275e5 	.word	0x000275e5
   26cf8:	000278f5 	.word	0x000278f5
   26cfc:	000278e9 	.word	0x000278e9
   26d00:	00027c6b 	.word	0x00027c6b
   26d04:	00027c89 	.word	0x00027c89
   26d08:	00027cd9 	.word	0x00027cd9
   26d0c:	00027ce1 	.word	0x00027ce1
   26d10:	000279ad 	.word	0x000279ad
   26d14:	00027a75 	.word	0x00027a75
   26d18:	00027d15 	.word	0x00027d15
   26d1c:	00027d57 	.word	0x00027d57
   26d20:	00027d81 	.word	0x00027d81
   26d24:	00027ba9 	.word	0x00027ba9
   26d28:	00027c0d 	.word	0x00027c0d
   26d2c:	00027c1d 	.word	0x00027c1d
			if (ch == 'T') {
   26d30:	2d54      	cmp	r5, #84	; 0x54
   26d32:	d106      	bne.n	26d42 <http_parser_execute+0x286>
				parser->type = HTTP_RESPONSE;
   26d34:	2201      	movs	r2, #1
   26d36:	7823      	ldrb	r3, [r4, #0]
   26d38:	f362 0301 	bfi	r3, r2, #0, #2
   26d3c:	7023      	strb	r3, [r4, #0]
			UPDATE_STATE(s_res_HT);
   26d3e:	2306      	movs	r3, #6
   26d40:	e00f      	b.n	26d62 <http_parser_execute+0x2a6>
				if (UNLIKELY(ch != 'E')) {
   26d42:	2d45      	cmp	r5, #69	; 0x45
   26d44:	d002      	beq.n	26d4c <http_parser_execute+0x290>
				SET_ERRNO(HPE_INVALID_CONSTANT);
   26d46:	221c      	movs	r2, #28
   26d48:	7de3      	ldrb	r3, [r4, #23]
   26d4a:	e718      	b.n	26b7e <http_parser_execute+0xc2>
				parser->method = HTTP_HEAD;
   26d4c:	2302      	movs	r3, #2
   26d4e:	75a3      	strb	r3, [r4, #22]
				parser->type = HTTP_REQUEST;
   26d50:	6823      	ldr	r3, [r4, #0]
   26d52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
   26d56:	f023 0303 	bic.w	r3, r3, #3
   26d5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   26d5e:	6023      	str	r3, [r4, #0]
				UPDATE_STATE(s_req_method);
   26d60:	2313      	movs	r3, #19
   26d62:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	for (p = data; p != data + len; p++) {
   26d66:	3601      	adds	r6, #1
   26d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26d6a:	eb08 0b03 	add.w	fp, r8, r3
   26d6e:	45b3      	cmp	fp, r6
   26d70:	f47f aef8 	bne.w	26b64 <http_parser_execute+0xa8>
		     p - header_field_mark);
   26d74:	9b11      	ldr	r3, [sp, #68]	; 0x44
		     &p_state, parsed, p - data, &header_field_mark,
   26d76:	eba6 0708 	sub.w	r7, r6, r8
		     p - header_field_mark);
   26d7a:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_header_field, HPE_CB_header_field,
   26d7c:	9303      	str	r3, [sp, #12]
   26d7e:	ad10      	add	r5, sp, #64	; 0x40
   26d80:	ab11      	add	r3, sp, #68	; 0x44
   26d82:	e9cd 7301 	strd	r7, r3, [sp, #4]
   26d86:	2203      	movs	r2, #3
   26d88:	4620      	mov	r0, r4
   26d8a:	f8d9 100c 	ldr.w	r1, [r9, #12]
   26d8e:	9500      	str	r5, [sp, #0]
   26d90:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   26d94:	f012 fbe1 	bl	3955a <cb_data>
	if (rc != 0) {
   26d98:	2800      	cmp	r0, #0
   26d9a:	f47f aeb4 	bne.w	26b06 <http_parser_execute+0x4a>
		     p - header_value_mark);
   26d9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
	rc = cb_data(parser, settings->on_header_value, HPE_CB_header_value,
   26da0:	2204      	movs	r2, #4
		     p - header_value_mark);
   26da2:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_header_value, HPE_CB_header_value,
   26da4:	9303      	str	r3, [sp, #12]
   26da6:	ab12      	add	r3, sp, #72	; 0x48
   26da8:	e9cd 7301 	strd	r7, r3, [sp, #4]
   26dac:	4620      	mov	r0, r4
   26dae:	f8d9 1010 	ldr.w	r1, [r9, #16]
   26db2:	9500      	str	r5, [sp, #0]
   26db4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   26db8:	f012 fbcf 	bl	3955a <cb_data>
	if (rc != 0) {
   26dbc:	2800      	cmp	r0, #0
   26dbe:	f47f aea2 	bne.w	26b06 <http_parser_execute+0x4a>
		     p - data, &url_mark, p - url_mark);
   26dc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	rc = cb_data(parser, settings->on_url, HPE_CB_url, &p_state, parsed,
   26dc4:	2202      	movs	r2, #2
		     p - data, &url_mark, p - url_mark);
   26dc6:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_url, HPE_CB_url, &p_state, parsed,
   26dc8:	9303      	str	r3, [sp, #12]
   26dca:	ab13      	add	r3, sp, #76	; 0x4c
   26dcc:	e9cd 7301 	strd	r7, r3, [sp, #4]
   26dd0:	4620      	mov	r0, r4
   26dd2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   26dd6:	9500      	str	r5, [sp, #0]
   26dd8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   26ddc:	f012 fbbd 	bl	3955a <cb_data>
	if (rc != 0) {
   26de0:	2800      	cmp	r0, #0
   26de2:	f47f ae90 	bne.w	26b06 <http_parser_execute+0x4a>
		     p - data, &body_mark, p - body_mark);
   26de6:	9b14      	ldr	r3, [sp, #80]	; 0x50
	rc = cb_data(parser, settings->on_body, HPE_CB_body, &p_state, parsed,
   26de8:	2206      	movs	r2, #6
		     p - data, &body_mark, p - body_mark);
   26dea:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_body, HPE_CB_body, &p_state, parsed,
   26dec:	9303      	str	r3, [sp, #12]
   26dee:	ab14      	add	r3, sp, #80	; 0x50
   26df0:	e9cd 7301 	strd	r7, r3, [sp, #4]
   26df4:	4620      	mov	r0, r4
   26df6:	f8d9 1018 	ldr.w	r1, [r9, #24]
   26dfa:	9500      	str	r5, [sp, #0]
   26dfc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   26e00:	f012 fbab 	bl	3955a <cb_data>
	if (rc != 0) {
   26e04:	2800      	cmp	r0, #0
   26e06:	f47f ae7e 	bne.w	26b06 <http_parser_execute+0x4a>
		     parsed, p - data, &status_mark, p - status_mark);
   26e0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
	rc = cb_data(parser, settings->on_status, HPE_CB_status, &p_state,
   26e0c:	2208      	movs	r2, #8
		     parsed, p - data, &status_mark, p - status_mark);
   26e0e:	1af6      	subs	r6, r6, r3
	rc = cb_data(parser, settings->on_status, HPE_CB_status, &p_state,
   26e10:	ab15      	add	r3, sp, #84	; 0x54
   26e12:	e9cd 7301 	strd	r7, r3, [sp, #4]
   26e16:	4620      	mov	r0, r4
   26e18:	f8d9 1008 	ldr.w	r1, [r9, #8]
   26e1c:	9603      	str	r6, [sp, #12]
   26e1e:	9500      	str	r5, [sp, #0]
   26e20:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   26e24:	f012 fb99 	bl	3955a <cb_data>
	if (rc != 0) {
   26e28:	2800      	cmp	r0, #0
   26e2a:	f47f ae6c 	bne.w	26b06 <http_parser_execute+0x4a>
	parser->state = CURRENT_STATE();
   26e2e:	6823      	ldr	r3, [r4, #0]
   26e30:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
   26e34:	f362 2390 	bfi	r3, r2, #10, #7
   26e38:	6023      	str	r3, [r4, #0]
	*parsed = len;
   26e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26e3c:	9310      	str	r3, [sp, #64]	; 0x40
	return 0;
   26e3e:	e662      	b.n	26b06 <http_parser_execute+0x4a>
   26e40:	00040016 	.word	0x00040016
   26e44:	0003f5a7 	.word	0x0003f5a7
   26e48:	0003ef24 	.word	0x0003ef24
   26e4c:	0003d70b 	.word	0x0003d70b
			parser->flags = 0U;
   26e50:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   26e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			parser->flags = 0U;
   26e56:	f36f 0389 	bfc	r3, #2, #8
   26e5a:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   26e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26e60:	2d0d      	cmp	r5, #13
   26e62:	e9c4 2302 	strd	r2, r3, [r4, #8]
			switch (ch) {
   26e66:	d004      	beq.n	26e72 <http_parser_execute+0x3b6>
   26e68:	2d48      	cmp	r5, #72	; 0x48
   26e6a:	d011      	beq.n	26e90 <http_parser_execute+0x3d4>
   26e6c:	2d0a      	cmp	r5, #10
   26e6e:	f47f af6a 	bne.w	26d46 <http_parser_execute+0x28a>
				       p - data + 1);
   26e72:	eba6 0308 	sub.w	r3, r6, r8
   26e76:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   26e78:	9301      	str	r3, [sp, #4]
   26e7a:	ab10      	add	r3, sp, #64	; 0x40
   26e7c:	9300      	str	r3, [sp, #0]
   26e7e:	2301      	movs	r3, #1
   26e80:	f8d9 2000 	ldr.w	r2, [r9]
			rc = cb_notify(parser, &p_state,
   26e84:	4620      	mov	r0, r4
   26e86:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
   26e8a:	f012 fb45 	bl	39518 <cb_notify>
   26e8e:	e074      	b.n	26f7a <http_parser_execute+0x4be>
				UPDATE_STATE(s_res_H);
   26e90:	2305      	movs	r3, #5
   26e92:	e6be      	b.n	26c12 <http_parser_execute+0x156>
			UPDATE_STATE(s_res_HTT);
   26e94:	2307      	movs	r3, #7
   26e96:	e764      	b.n	26d62 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_res_HTTP);
   26e98:	2308      	movs	r3, #8
   26e9a:	e762      	b.n	26d62 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_res_first_http_major);
   26e9c:	2309      	movs	r3, #9
   26e9e:	e760      	b.n	26d62 <http_parser_execute+0x2a6>
			if (UNLIKELY(ch < '0' || ch > '9')) {
   26ea0:	3d30      	subs	r5, #48	; 0x30
   26ea2:	b2eb      	uxtb	r3, r5
   26ea4:	2b09      	cmp	r3, #9
   26ea6:	d902      	bls.n	26eae <http_parser_execute+0x3f2>
				SET_ERRNO(HPE_INVALID_VERSION);
   26ea8:	220e      	movs	r2, #14
   26eaa:	7de3      	ldrb	r3, [r4, #23]
   26eac:	e667      	b.n	26b7e <http_parser_execute+0xc2>
			UPDATE_STATE(s_res_http_major);
   26eae:	230a      	movs	r3, #10
			parser->http_major = ch - '0';
   26eb0:	8225      	strh	r5, [r4, #16]
			UPDATE_STATE(s_res_http_major);
   26eb2:	e756      	b.n	26d62 <http_parser_execute+0x2a6>
			if (ch == '.') {
   26eb4:	2d2e      	cmp	r5, #46	; 0x2e
   26eb6:	f040 81cd 	bne.w	27254 <http_parser_execute+0x798>
				UPDATE_STATE(s_res_first_http_minor);
   26eba:	230b      	movs	r3, #11
   26ebc:	e751      	b.n	26d62 <http_parser_execute+0x2a6>
			if (UNLIKELY(!IS_NUM(ch))) {
   26ebe:	3d30      	subs	r5, #48	; 0x30
   26ec0:	b2eb      	uxtb	r3, r5
   26ec2:	2b09      	cmp	r3, #9
   26ec4:	d8f0      	bhi.n	26ea8 <http_parser_execute+0x3ec>
			UPDATE_STATE(s_res_http_minor);
   26ec6:	230c      	movs	r3, #12
			parser->http_minor = ch - '0';
   26ec8:	8265      	strh	r5, [r4, #18]
			UPDATE_STATE(s_res_http_minor);
   26eca:	e74a      	b.n	26d62 <http_parser_execute+0x2a6>
			if (ch == ' ') {
   26ecc:	2d20      	cmp	r5, #32
   26ece:	f040 81e2 	bne.w	27296 <http_parser_execute+0x7da>
				UPDATE_STATE(s_res_first_status_code);
   26ed2:	230d      	movs	r3, #13
   26ed4:	e745      	b.n	26d62 <http_parser_execute+0x2a6>
			if (!IS_NUM(ch)) {
   26ed6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   26eda:	b2da      	uxtb	r2, r3
   26edc:	2a09      	cmp	r2, #9
   26ede:	d905      	bls.n	26eec <http_parser_execute+0x430>
				if (ch == ' ') {
   26ee0:	2d20      	cmp	r5, #32
   26ee2:	f43f af40 	beq.w	26d66 <http_parser_execute+0x2aa>
				SET_ERRNO(HPE_INVALID_STATUS);
   26ee6:	220f      	movs	r2, #15
   26ee8:	7de3      	ldrb	r3, [r4, #23]
   26eea:	e648      	b.n	26b7e <http_parser_execute+0xc2>
			parser->status_code = ch - '0';
   26eec:	82a3      	strh	r3, [r4, #20]
			UPDATE_STATE(s_res_status_code);
   26eee:	230e      	movs	r3, #14
   26ef0:	e737      	b.n	26d62 <http_parser_execute+0x2a6>
			if (!IS_NUM(ch)) {
   26ef2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   26ef6:	2b09      	cmp	r3, #9
   26ef8:	d909      	bls.n	26f0e <http_parser_execute+0x452>
				switch (ch) {
   26efa:	2d0d      	cmp	r5, #13
   26efc:	d016      	beq.n	26f2c <http_parser_execute+0x470>
   26efe:	2d20      	cmp	r5, #32
   26f00:	d003      	beq.n	26f0a <http_parser_execute+0x44e>
   26f02:	2d0a      	cmp	r5, #10
   26f04:	d1ef      	bne.n	26ee6 <http_parser_execute+0x42a>
			UPDATE_STATE(s_header_field_start);
   26f06:	232a      	movs	r3, #42	; 0x2a
   26f08:	e72b      	b.n	26d62 <http_parser_execute+0x2a6>
					UPDATE_STATE(s_res_status_start);
   26f0a:	230f      	movs	r3, #15
   26f0c:	e729      	b.n	26d62 <http_parser_execute+0x2a6>
			parser->status_code *= 10U;
   26f0e:	8aa3      	ldrh	r3, [r4, #20]
   26f10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->status_code += ch - '0';
   26f14:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   26f18:	3d30      	subs	r5, #48	; 0x30
   26f1a:	b2ad      	uxth	r5, r5
			if (UNLIKELY(parser->status_code > 999)) {
   26f1c:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
			parser->status_code += ch - '0';
   26f20:	82a5      	strh	r5, [r4, #20]
			if (UNLIKELY(parser->status_code > 999)) {
   26f22:	f4ff af20 	bcc.w	26d66 <http_parser_execute+0x2aa>
   26f26:	e7de      	b.n	26ee6 <http_parser_execute+0x42a>
			if (ch == CR) {
   26f28:	2d0d      	cmp	r5, #13
   26f2a:	d101      	bne.n	26f30 <http_parser_execute+0x474>
				UPDATE_STATE(s_res_line_almost_done);
   26f2c:	2311      	movs	r3, #17
   26f2e:	e718      	b.n	26d62 <http_parser_execute+0x2a6>
			if (ch == LF) {
   26f30:	2d0a      	cmp	r5, #10
   26f32:	d0e8      	beq.n	26f06 <http_parser_execute+0x44a>
			MARK(status);
   26f34:	9b15      	ldr	r3, [sp, #84]	; 0x54
   26f36:	b903      	cbnz	r3, 26f3a <http_parser_execute+0x47e>
   26f38:	9615      	str	r6, [sp, #84]	; 0x54
			UPDATE_STATE(s_res_status);
   26f3a:	2310      	movs	r3, #16
   26f3c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			parser->index = 0U;
   26f40:	78e3      	ldrb	r3, [r4, #3]
   26f42:	f36f 0306 	bfc	r3, #0, #7
			++parser->index;
   26f46:	70e3      	strb	r3, [r4, #3]
			break;
   26f48:	e70d      	b.n	26d66 <http_parser_execute+0x2aa>
			if (ch == CR) {
   26f4a:	2d0d      	cmp	r5, #13
   26f4c:	d119      	bne.n	26f82 <http_parser_execute+0x4c6>
				UPDATE_STATE(s_res_line_almost_done);
   26f4e:	2311      	movs	r3, #17
				rc = cb_data(parser, settings->on_status,
   26f50:	2208      	movs	r2, #8
				UPDATE_STATE(s_header_field_start);
   26f52:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
					     p - status_mark);
   26f56:	9b15      	ldr	r3, [sp, #84]	; 0x54
				rc = cb_data(parser, settings->on_status,
   26f58:	f8d9 1008 	ldr.w	r1, [r9, #8]
					     p - status_mark);
   26f5c:	1af3      	subs	r3, r6, r3
				rc = cb_data(parser, settings->on_status,
   26f5e:	9303      	str	r3, [sp, #12]
   26f60:	ab15      	add	r3, sp, #84	; 0x54
   26f62:	9302      	str	r3, [sp, #8]
					     p - data + 1, &status_mark,
   26f64:	eba6 0308 	sub.w	r3, r6, r8
   26f68:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_status,
   26f6a:	9301      	str	r3, [sp, #4]
   26f6c:	ab10      	add	r3, sp, #64	; 0x40
   26f6e:	9300      	str	r3, [sp, #0]
   26f70:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   26f74:	4620      	mov	r0, r4
   26f76:	f012 faf0 	bl	3955a <cb_data>
			if (rc != 0) {
   26f7a:	2800      	cmp	r0, #0
   26f7c:	f43f aef3 	beq.w	26d66 <http_parser_execute+0x2aa>
   26f80:	e5c1      	b.n	26b06 <http_parser_execute+0x4a>
			if (ch == LF) {
   26f82:	2d0a      	cmp	r5, #10
   26f84:	f47f aeef 	bne.w	26d66 <http_parser_execute+0x2aa>
				UPDATE_STATE(s_header_field_start);
   26f88:	232a      	movs	r3, #42	; 0x2a
   26f8a:	e7e1      	b.n	26f50 <http_parser_execute+0x494>
			if (ch == CR || ch == LF) {
   26f8c:	2d0d      	cmp	r5, #13
   26f8e:	f43f aeea 	beq.w	26d66 <http_parser_execute+0x2aa>
   26f92:	2d0a      	cmp	r5, #10
   26f94:	f43f aee7 	beq.w	26d66 <http_parser_execute+0x2aa>
			parser->flags = 0U;
   26f98:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   26f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			parser->flags = 0U;
   26f9e:	f36f 0389 	bfc	r3, #2, #8
   26fa2:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   26fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26fa8:	e9c4 2302 	strd	r2, r3, [r4, #8]
			if (UNLIKELY(!IS_ALPHA(ch))) {
   26fac:	f045 0320 	orr.w	r3, r5, #32
   26fb0:	3b61      	subs	r3, #97	; 0x61
   26fb2:	2b19      	cmp	r3, #25
   26fb4:	d902      	bls.n	26fbc <http_parser_execute+0x500>
				SET_ERRNO(HPE_INVALID_METHOD);
   26fb6:	2210      	movs	r2, #16
   26fb8:	7de3      	ldrb	r3, [r4, #23]
   26fba:	e5e0      	b.n	26b7e <http_parser_execute+0xc2>
			parser->method = (enum http_method) 0;
   26fbc:	2300      	movs	r3, #0
   26fbe:	75a3      	strb	r3, [r4, #22]
			parser->index = 1U;
   26fc0:	2301      	movs	r3, #1
   26fc2:	78e2      	ldrb	r2, [r4, #3]
   26fc4:	3d41      	subs	r5, #65	; 0x41
   26fc6:	f363 0206 	bfi	r2, r3, #0, #7
   26fca:	70e2      	strb	r2, [r4, #3]
			switch (ch) {
   26fcc:	2d14      	cmp	r5, #20
   26fce:	d8f2      	bhi.n	26fb6 <http_parser_execute+0x4fa>
   26fd0:	a201      	add	r2, pc, #4	; (adr r2, 26fd8 <http_parser_execute+0x51c>)
   26fd2:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
   26fd6:	bf00      	nop
   26fd8:	0002702d 	.word	0x0002702d
   26fdc:	00027035 	.word	0x00027035
   26fe0:	00027039 	.word	0x00027039
   26fe4:	00027031 	.word	0x00027031
   26fe8:	00026fb7 	.word	0x00026fb7
   26fec:	00026fb7 	.word	0x00026fb7
   26ff0:	0002702f 	.word	0x0002702f
   26ff4:	0002703d 	.word	0x0002703d
   26ff8:	00026fb7 	.word	0x00026fb7
   26ffc:	00026fb7 	.word	0x00026fb7
   27000:	00026fb7 	.word	0x00026fb7
   27004:	00027041 	.word	0x00027041
   27008:	00027045 	.word	0x00027045
   2700c:	00027049 	.word	0x00027049
   27010:	0002704d 	.word	0x0002704d
   27014:	00027051 	.word	0x00027051
   27018:	00026fb7 	.word	0x00026fb7
   2701c:	00027055 	.word	0x00027055
   27020:	00027059 	.word	0x00027059
   27024:	0002705d 	.word	0x0002705d
   27028:	00027061 	.word	0x00027061
				parser->method = HTTP_ACL;
   2702c:	2313      	movs	r3, #19
				parser->method = HTTP_UNLOCK;
   2702e:	75a3      	strb	r3, [r4, #22]
			UPDATE_STATE(s_req_method);
   27030:	2313      	movs	r3, #19
   27032:	e5ee      	b.n	26c12 <http_parser_execute+0x156>
				parser->method = HTTP_BIND;
   27034:	2310      	movs	r3, #16
   27036:	e7fa      	b.n	2702e <http_parser_execute+0x572>
				parser->method = HTTP_CONNECT;
   27038:	2305      	movs	r3, #5
   2703a:	e7f8      	b.n	2702e <http_parser_execute+0x572>
				parser->method = HTTP_HEAD;
   2703c:	2302      	movs	r3, #2
   2703e:	e7f6      	b.n	2702e <http_parser_execute+0x572>
				parser->method = HTTP_LOCK; /* or LINK */
   27040:	2309      	movs	r3, #9
   27042:	e7f4      	b.n	2702e <http_parser_execute+0x572>
				parser->method =
   27044:	230a      	movs	r3, #10
   27046:	e7f2      	b.n	2702e <http_parser_execute+0x572>
				parser->method = HTTP_NOTIFY;
   27048:	2319      	movs	r3, #25
   2704a:	e7f0      	b.n	2702e <http_parser_execute+0x572>
				parser->method = HTTP_OPTIONS;
   2704c:	2306      	movs	r3, #6
   2704e:	e7ee      	b.n	2702e <http_parser_execute+0x572>
				parser->method = HTTP_POST;
   27050:	2303      	movs	r3, #3
   27052:	e7ec      	b.n	2702e <http_parser_execute+0x572>
				parser->method = HTTP_REPORT; /* or REBIND */
   27054:	2314      	movs	r3, #20
   27056:	e7ea      	b.n	2702e <http_parser_execute+0x572>
				parser->method = HTTP_SUBSCRIBE; /* or SEARCH */
   27058:	231a      	movs	r3, #26
   2705a:	e7e8      	b.n	2702e <http_parser_execute+0x572>
				parser->method = HTTP_TRACE;
   2705c:	2307      	movs	r3, #7
   2705e:	e7e6      	b.n	2702e <http_parser_execute+0x572>
				parser->method = HTTP_UNLOCK;
   27060:	230f      	movs	r3, #15
   27062:	e7e4      	b.n	2702e <http_parser_execute+0x572>
			if (UNLIKELY(ch == '\0')) {
   27064:	2d00      	cmp	r5, #0
   27066:	d0a6      	beq.n	26fb6 <http_parser_execute+0x4fa>
			matcher = method_strings[parser->method];
   27068:	7da0      	ldrb	r0, [r4, #22]
   2706a:	4aae      	ldr	r2, [pc, #696]	; (27324 <http_parser_execute+0x868>)
   2706c:	78e3      	ldrb	r3, [r4, #3]
   2706e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   27072:	f003 017f 	and.w	r1, r3, #127	; 0x7f
			if (ch == ' ' && matcher[parser->index] == '\0') {
   27076:	2d20      	cmp	r5, #32
   27078:	5c52      	ldrb	r2, [r2, r1]
   2707a:	d10a      	bne.n	27092 <http_parser_execute+0x5d6>
   2707c:	2a00      	cmp	r2, #0
   2707e:	f040 869b 	bne.w	27db8 <http_parser_execute+0x12fc>
				UPDATE_STATE(s_req_spaces_before_url);
   27082:	2314      	movs	r3, #20
   27084:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			++parser->index;
   27088:	78e3      	ldrb	r3, [r4, #3]
   2708a:	3101      	adds	r1, #1
   2708c:	f361 0306 	bfi	r3, r1, #0, #7
   27090:	e759      	b.n	26f46 <http_parser_execute+0x48a>
			} else if (ch == matcher[parser->index]) {
   27092:	4295      	cmp	r5, r2
   27094:	d0f8      	beq.n	27088 <http_parser_execute+0x5cc>
			} else if (IS_ALPHA(ch)) {
   27096:	f045 0220 	orr.w	r2, r5, #32
   2709a:	3a61      	subs	r2, #97	; 0x61
   2709c:	2a19      	cmp	r2, #25
   2709e:	d865      	bhi.n	2716c <http_parser_execute+0x6b0>
						     parser->index << 8 | ch;
   270a0:	020b      	lsls	r3, r1, #8
				uint64_t sw_option = parser->method << 16 |
   270a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
						     parser->index << 8 | ch;
   270a6:	431d      	orrs	r5, r3
				switch (sw_option) {
   270a8:	4b9f      	ldr	r3, [pc, #636]	; (27328 <http_parser_execute+0x86c>)
   270aa:	429d      	cmp	r5, r3
   270ac:	d04e      	beq.n	2714c <http_parser_execute+0x690>
   270ae:	dc22      	bgt.n	270f6 <http_parser_execute+0x63a>
   270b0:	4b9e      	ldr	r3, [pc, #632]	; (2732c <http_parser_execute+0x870>)
   270b2:	429d      	cmp	r5, r3
   270b4:	d048      	beq.n	27148 <http_parser_execute+0x68c>
   270b6:	dc12      	bgt.n	270de <http_parser_execute+0x622>
   270b8:	4b9d      	ldr	r3, [pc, #628]	; (27330 <http_parser_execute+0x874>)
   270ba:	429d      	cmp	r5, r3
   270bc:	d03f      	beq.n	2713e <http_parser_execute+0x682>
   270be:	dc08      	bgt.n	270d2 <http_parser_execute+0x616>
   270c0:	3b14      	subs	r3, #20
   270c2:	429d      	cmp	r5, r3
   270c4:	d03e      	beq.n	27144 <http_parser_execute+0x688>
   270c6:	3311      	adds	r3, #17
   270c8:	429d      	cmp	r5, r3
   270ca:	f47f af74 	bne.w	26fb6 <http_parser_execute+0x4fa>
					parser->method = HTTP_PROPFIND;
   270ce:	230c      	movs	r3, #12
   270d0:	e036      	b.n	27140 <http_parser_execute+0x684>
   270d2:	4b98      	ldr	r3, [pc, #608]	; (27334 <http_parser_execute+0x878>)
   270d4:	429d      	cmp	r5, r3
   270d6:	f47f af6e 	bne.w	26fb6 <http_parser_execute+0x4fa>
					parser->method = HTTP_PURGE;
   270da:	231d      	movs	r3, #29
   270dc:	e030      	b.n	27140 <http_parser_execute+0x684>
   270de:	4b96      	ldr	r3, [pc, #600]	; (27338 <http_parser_execute+0x87c>)
   270e0:	429d      	cmp	r5, r3
   270e2:	d03f      	beq.n	27164 <http_parser_execute+0x6a8>
   270e4:	4b95      	ldr	r3, [pc, #596]	; (2733c <http_parser_execute+0x880>)
   270e6:	429d      	cmp	r5, r3
   270e8:	d032      	beq.n	27150 <http_parser_execute+0x694>
   270ea:	4b95      	ldr	r3, [pc, #596]	; (27340 <http_parser_execute+0x884>)
   270ec:	429d      	cmp	r5, r3
   270ee:	f47f af62 	bne.w	26fb6 <http_parser_execute+0x4fa>
					parser->method = HTTP_COPY;
   270f2:	2308      	movs	r3, #8
   270f4:	e024      	b.n	27140 <http_parser_execute+0x684>
   270f6:	4b93      	ldr	r3, [pc, #588]	; (27344 <http_parser_execute+0x888>)
   270f8:	429d      	cmp	r5, r3
   270fa:	d035      	beq.n	27168 <http_parser_execute+0x6ac>
   270fc:	dc13      	bgt.n	27126 <http_parser_execute+0x66a>
   270fe:	4b92      	ldr	r3, [pc, #584]	; (27348 <http_parser_execute+0x88c>)
   27100:	429d      	cmp	r5, r3
   27102:	d02d      	beq.n	27160 <http_parser_execute+0x6a4>
   27104:	dc09      	bgt.n	2711a <http_parser_execute+0x65e>
   27106:	4b91      	ldr	r3, [pc, #580]	; (2734c <http_parser_execute+0x890>)
   27108:	429d      	cmp	r5, r3
   2710a:	d023      	beq.n	27154 <http_parser_execute+0x698>
   2710c:	f503 7380 	add.w	r3, r3, #256	; 0x100
   27110:	429d      	cmp	r5, r3
   27112:	f47f af50 	bne.w	26fb6 <http_parser_execute+0x4fa>
					parser->method = HTTP_MKCALENDAR;
   27116:	231e      	movs	r3, #30
   27118:	e012      	b.n	27140 <http_parser_execute+0x684>
   2711a:	4b8d      	ldr	r3, [pc, #564]	; (27350 <http_parser_execute+0x894>)
   2711c:	429d      	cmp	r5, r3
   2711e:	f47f af4a 	bne.w	26fb6 <http_parser_execute+0x4fa>
					parser->method = HTTP_UNBIND;
   27122:	2312      	movs	r3, #18
   27124:	e00c      	b.n	27140 <http_parser_execute+0x684>
   27126:	4b8b      	ldr	r3, [pc, #556]	; (27354 <http_parser_execute+0x898>)
   27128:	429d      	cmp	r5, r3
   2712a:	d017      	beq.n	2715c <http_parser_execute+0x6a0>
   2712c:	4b8a      	ldr	r3, [pc, #552]	; (27358 <http_parser_execute+0x89c>)
   2712e:	429d      	cmp	r5, r3
   27130:	d012      	beq.n	27158 <http_parser_execute+0x69c>
   27132:	4b8a      	ldr	r3, [pc, #552]	; (2735c <http_parser_execute+0x8a0>)
   27134:	429d      	cmp	r5, r3
   27136:	f47f af3e 	bne.w	26fb6 <http_parser_execute+0x4fa>
					parser->method = HTTP_UNLINK;
   2713a:	2320      	movs	r3, #32
   2713c:	e000      	b.n	27140 <http_parser_execute+0x684>
					parser->method = HTTP_PUT;
   2713e:	2304      	movs	r3, #4
				parser->method = HTTP_MSEARCH;
   27140:	75a3      	strb	r3, [r4, #22]
   27142:	e7a1      	b.n	27088 <http_parser_execute+0x5cc>
					parser->method = HTTP_PATCH;
   27144:	231c      	movs	r3, #28
   27146:	e7fb      	b.n	27140 <http_parser_execute+0x684>
					parser->method = HTTP_CHECKOUT;
   27148:	2316      	movs	r3, #22
   2714a:	e7f9      	b.n	27140 <http_parser_execute+0x684>
					parser->method = HTTP_MOVE;
   2714c:	230b      	movs	r3, #11
   2714e:	e7f7      	b.n	27140 <http_parser_execute+0x684>
					parser->method = HTTP_MERGE;
   27150:	2317      	movs	r3, #23
   27152:	e7f5      	b.n	27140 <http_parser_execute+0x684>
					parser->method = HTTP_MKACTIVITY;
   27154:	2315      	movs	r3, #21
   27156:	e7f3      	b.n	27140 <http_parser_execute+0x684>
					parser->method = HTTP_SEARCH;
   27158:	230e      	movs	r3, #14
   2715a:	e7f1      	b.n	27140 <http_parser_execute+0x684>
					parser->method = HTTP_REBIND;
   2715c:	2311      	movs	r3, #17
   2715e:	e7ef      	b.n	27140 <http_parser_execute+0x684>
					parser->method = HTTP_PROPPATCH;
   27160:	230d      	movs	r3, #13
   27162:	e7ed      	b.n	27140 <http_parser_execute+0x684>
					parser->method = HTTP_LINK;
   27164:	231f      	movs	r3, #31
   27166:	e7eb      	b.n	27140 <http_parser_execute+0x684>
					parser->method = HTTP_UNSUBSCRIBE;
   27168:	231b      	movs	r3, #27
   2716a:	e7e9      	b.n	27140 <http_parser_execute+0x684>
			} else if (ch == '-' &&
   2716c:	2d2d      	cmp	r5, #45	; 0x2d
   2716e:	f47f af22 	bne.w	26fb6 <http_parser_execute+0x4fa>
   27172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27176:	2b01      	cmp	r3, #1
   27178:	f47f af1d 	bne.w	26fb6 <http_parser_execute+0x4fa>
					parser->index == 1U &&
   2717c:	280a      	cmp	r0, #10
   2717e:	f47f af1a 	bne.w	26fb6 <http_parser_execute+0x4fa>
				parser->method = HTTP_MSEARCH;
   27182:	2318      	movs	r3, #24
   27184:	e7dc      	b.n	27140 <http_parser_execute+0x684>
			if (ch == ' ') {
   27186:	2d20      	cmp	r5, #32
   27188:	f43f aded 	beq.w	26d66 <http_parser_execute+0x2aa>
			MARK(url);
   2718c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2718e:	b903      	cbnz	r3, 27192 <http_parser_execute+0x6d6>
   27190:	9613      	str	r6, [sp, #76]	; 0x4c
			if (parser->method == HTTP_CONNECT) {
   27192:	7da3      	ldrb	r3, [r4, #22]
			UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));
   27194:	4629      	mov	r1, r5
			if (parser->method == HTTP_CONNECT) {
   27196:	2b05      	cmp	r3, #5
				UPDATE_STATE(s_req_server_start);
   27198:	bf04      	itt	eq
   2719a:	2318      	moveq	r3, #24
   2719c:	f88d 303e 	strbeq.w	r3, [sp, #62]	; 0x3e
			UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));
   271a0:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
				UPDATE_STATE
   271a4:	f000 fe1c 	bl	27de0 <parse_url_char>
				if (UNLIKELY(CURRENT_STATE() == s_dead)) {
   271a8:	2801      	cmp	r0, #1
				UPDATE_STATE
   271aa:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
				if (UNLIKELY(CURRENT_STATE() == s_dead)) {
   271ae:	f47f adda 	bne.w	26d66 <http_parser_execute+0x2aa>
   271b2:	e00a      	b.n	271ca <http_parser_execute+0x70e>
			switch (ch) {
   271b4:	f1a5 030a 	sub.w	r3, r5, #10
   271b8:	b2db      	uxtb	r3, r3
   271ba:	2b16      	cmp	r3, #22
   271bc:	d82b      	bhi.n	27216 <http_parser_execute+0x75a>
   271be:	2201      	movs	r2, #1
   271c0:	fa02 f303 	lsl.w	r3, r2, r3
   271c4:	4a66      	ldr	r2, [pc, #408]	; (27360 <http_parser_execute+0x8a4>)
   271c6:	401a      	ands	r2, r3
   271c8:	b32a      	cbz	r2, 27216 <http_parser_execute+0x75a>
					SET_ERRNO(HPE_INVALID_URL);
   271ca:	2211      	movs	r2, #17
   271cc:	7de3      	ldrb	r3, [r4, #23]
   271ce:	e4d6      	b.n	26b7e <http_parser_execute+0xc2>
			switch (ch) {
   271d0:	2d0d      	cmp	r5, #13
   271d2:	d003      	beq.n	271dc <http_parser_execute+0x720>
   271d4:	2d20      	cmp	r5, #32
   271d6:	d00b      	beq.n	271f0 <http_parser_execute+0x734>
   271d8:	2d0a      	cmp	r5, #10
   271da:	d11c      	bne.n	27216 <http_parser_execute+0x75a>
				parser->http_major = 0U;
   271dc:	f44f 2310 	mov.w	r3, #589824	; 0x90000
				UPDATE_STATE((ch == CR) ?
   271e0:	2d0d      	cmp	r5, #13
				parser->http_major = 0U;
   271e2:	6123      	str	r3, [r4, #16]
				UPDATE_STATE((ch == CR) ?
   271e4:	bf0c      	ite	eq
   271e6:	2329      	moveq	r3, #41	; 0x29
   271e8:	232a      	movne	r3, #42	; 0x2a
   271ea:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
   271ee:	e001      	b.n	271f4 <http_parser_execute+0x738>
				UPDATE_STATE(s_req_http_start);
   271f0:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
					     p - url_mark);
   271f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
				rc = cb_data(parser, settings->on_url,
   271f6:	2202      	movs	r2, #2
					     p - url_mark);
   271f8:	1af3      	subs	r3, r6, r3
				rc = cb_data(parser, settings->on_url,
   271fa:	9303      	str	r3, [sp, #12]
   271fc:	ab13      	add	r3, sp, #76	; 0x4c
   271fe:	9302      	str	r3, [sp, #8]
					     p - data + 1, &url_mark,
   27200:	eba6 0308 	sub.w	r3, r6, r8
   27204:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_url,
   27206:	9301      	str	r3, [sp, #4]
   27208:	ab10      	add	r3, sp, #64	; 0x40
   2720a:	9300      	str	r3, [sp, #0]
   2720c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   27210:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   27214:	e6ae      	b.n	26f74 <http_parser_execute+0x4b8>
				UPDATE_STATE
   27216:	4629      	mov	r1, r5
   27218:	e7c4      	b.n	271a4 <http_parser_execute+0x6e8>
			switch (ch) {
   2721a:	2d20      	cmp	r5, #32
   2721c:	f43f ada3 	beq.w	26d66 <http_parser_execute+0x2aa>
   27220:	2d48      	cmp	r5, #72	; 0x48
   27222:	f47f ad90 	bne.w	26d46 <http_parser_execute+0x28a>
				UPDATE_STATE(s_req_http_H);
   27226:	2321      	movs	r3, #33	; 0x21
   27228:	e59b      	b.n	26d62 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_req_http_HT);
   2722a:	2322      	movs	r3, #34	; 0x22
   2722c:	e599      	b.n	26d62 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_req_http_HTT);
   2722e:	2323      	movs	r3, #35	; 0x23
   27230:	e597      	b.n	26d62 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_req_http_HTTP);
   27232:	2324      	movs	r3, #36	; 0x24
   27234:	e595      	b.n	26d62 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_req_first_http_major);
   27236:	2325      	movs	r3, #37	; 0x25
   27238:	e593      	b.n	26d62 <http_parser_execute+0x2a6>
			if (UNLIKELY(ch < '1' || ch > '9')) {
   2723a:	f1a5 0331 	sub.w	r3, r5, #49	; 0x31
   2723e:	2b08      	cmp	r3, #8
   27240:	f63f ae32 	bhi.w	26ea8 <http_parser_execute+0x3ec>
			parser->http_major = ch - '0';
   27244:	3d30      	subs	r5, #48	; 0x30
			UPDATE_STATE(s_req_http_major);
   27246:	2326      	movs	r3, #38	; 0x26
			parser->http_major = ch - '0';
   27248:	8225      	strh	r5, [r4, #16]
			UPDATE_STATE(s_req_http_major);
   2724a:	e58a      	b.n	26d62 <http_parser_execute+0x2a6>
			if (ch == '.') {
   2724c:	2d2e      	cmp	r5, #46	; 0x2e
   2724e:	d101      	bne.n	27254 <http_parser_execute+0x798>
				UPDATE_STATE(s_req_first_http_minor);
   27250:	2327      	movs	r3, #39	; 0x27
   27252:	e586      	b.n	26d62 <http_parser_execute+0x2a6>
			if (UNLIKELY(!IS_NUM(ch))) {
   27254:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   27258:	2b09      	cmp	r3, #9
   2725a:	f63f ae25 	bhi.w	26ea8 <http_parser_execute+0x3ec>
			parser->http_major *= 10U;
   2725e:	8a23      	ldrh	r3, [r4, #16]
   27260:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->http_major += ch - '0';
   27264:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   27268:	3d30      	subs	r5, #48	; 0x30
   2726a:	b2ad      	uxth	r5, r5
   2726c:	8225      	strh	r5, [r4, #16]
			if (UNLIKELY(parser->http_minor > 999)) {
   2726e:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   27272:	f4ff ad78 	bcc.w	26d66 <http_parser_execute+0x2aa>
   27276:	e617      	b.n	26ea8 <http_parser_execute+0x3ec>
			if (UNLIKELY(!IS_NUM(ch))) {
   27278:	3d30      	subs	r5, #48	; 0x30
   2727a:	b2eb      	uxtb	r3, r5
   2727c:	2b09      	cmp	r3, #9
   2727e:	f63f ae13 	bhi.w	26ea8 <http_parser_execute+0x3ec>
			UPDATE_STATE(s_req_http_minor);
   27282:	2328      	movs	r3, #40	; 0x28
			parser->http_minor = ch - '0';
   27284:	8265      	strh	r5, [r4, #18]
			UPDATE_STATE(s_req_http_minor);
   27286:	e56c      	b.n	26d62 <http_parser_execute+0x2a6>
			if (ch == CR) {
   27288:	2d0d      	cmp	r5, #13
   2728a:	d101      	bne.n	27290 <http_parser_execute+0x7d4>
				UPDATE_STATE(s_req_line_almost_done);
   2728c:	2329      	movs	r3, #41	; 0x29
   2728e:	e568      	b.n	26d62 <http_parser_execute+0x2a6>
			if (ch == LF) {
   27290:	2d0a      	cmp	r5, #10
   27292:	f43f ae38 	beq.w	26f06 <http_parser_execute+0x44a>
			if (UNLIKELY(!IS_NUM(ch))) {
   27296:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   2729a:	2b09      	cmp	r3, #9
   2729c:	f63f ae04 	bhi.w	26ea8 <http_parser_execute+0x3ec>
			parser->http_minor *= 10U;
   272a0:	8a63      	ldrh	r3, [r4, #18]
   272a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->http_minor += ch - '0';
   272a6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   272aa:	3d30      	subs	r5, #48	; 0x30
   272ac:	b2ad      	uxth	r5, r5
   272ae:	8265      	strh	r5, [r4, #18]
   272b0:	e7dd      	b.n	2726e <http_parser_execute+0x7b2>
			if (UNLIKELY(ch != LF)) {
   272b2:	2d0a      	cmp	r5, #10
   272b4:	f43f ae27 	beq.w	26f06 <http_parser_execute+0x44a>
				SET_ERRNO(HPE_LF_EXPECTED);
   272b8:	2217      	movs	r2, #23
   272ba:	7de3      	ldrb	r3, [r4, #23]
   272bc:	e45f      	b.n	26b7e <http_parser_execute+0xc2>
			if (ch == CR) {
   272be:	2d0d      	cmp	r5, #13
   272c0:	d101      	bne.n	272c6 <http_parser_execute+0x80a>
				UPDATE_STATE(s_headers_almost_done);
   272c2:	2337      	movs	r3, #55	; 0x37
   272c4:	e54d      	b.n	26d62 <http_parser_execute+0x2a6>
			if (ch == LF) {
   272c6:	2d0a      	cmp	r5, #10
   272c8:	d101      	bne.n	272ce <http_parser_execute+0x812>
				UPDATE_STATE(s_headers_almost_done);
   272ca:	2337      	movs	r3, #55	; 0x37
   272cc:	e4a9      	b.n	26c22 <http_parser_execute+0x166>
			c = TOKEN(ch);
   272ce:	2d20      	cmp	r5, #32
   272d0:	d005      	beq.n	272de <http_parser_execute+0x822>
   272d2:	4b24      	ldr	r3, [pc, #144]	; (27364 <http_parser_execute+0x8a8>)
   272d4:	5d5d      	ldrb	r5, [r3, r5]
			if (UNLIKELY(!c)) {
   272d6:	b915      	cbnz	r5, 272de <http_parser_execute+0x822>
				SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   272d8:	2218      	movs	r2, #24
   272da:	7de3      	ldrb	r3, [r4, #23]
   272dc:	e44f      	b.n	26b7e <http_parser_execute+0xc2>
			MARK(header_field);
   272de:	9b11      	ldr	r3, [sp, #68]	; 0x44
   272e0:	b903      	cbnz	r3, 272e4 <http_parser_execute+0x828>
   272e2:	9611      	str	r6, [sp, #68]	; 0x44
			parser->index = 0U;
   272e4:	78e3      	ldrb	r3, [r4, #3]
   272e6:	2d74      	cmp	r5, #116	; 0x74
   272e8:	f36f 0306 	bfc	r3, #0, #7
   272ec:	70e3      	strb	r3, [r4, #3]
			UPDATE_STATE(s_header_field);
   272ee:	f04f 032b 	mov.w	r3, #43	; 0x2b
   272f2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			switch (c) {
   272f6:	78a3      	ldrb	r3, [r4, #2]
   272f8:	d012      	beq.n	27320 <http_parser_execute+0x864>
   272fa:	d806      	bhi.n	2730a <http_parser_execute+0x84e>
   272fc:	2d63      	cmp	r5, #99	; 0x63
   272fe:	d008      	beq.n	27312 <http_parser_execute+0x856>
   27300:	2d70      	cmp	r5, #112	; 0x70
   27302:	d00b      	beq.n	2731c <http_parser_execute+0x860>
				parser->header_state = h_general;
   27304:	f36f 0347 	bfc	r3, #1, #7
   27308:	e006      	b.n	27318 <http_parser_execute+0x85c>
   2730a:	2d75      	cmp	r5, #117	; 0x75
   2730c:	d1fa      	bne.n	27304 <http_parser_execute+0x848>
				parser->header_state = h_matching_upgrade;
   2730e:	2208      	movs	r2, #8
   27310:	e000      	b.n	27314 <http_parser_execute+0x858>
				parser->header_state = h_C;
   27312:	2201      	movs	r2, #1
					parser->header_state =
   27314:	f362 0347 	bfi	r3, r2, #1, #7
				parser->header_state = h_general;
   27318:	70a3      	strb	r3, [r4, #2]
				break;
   2731a:	e524      	b.n	26d66 <http_parser_execute+0x2aa>
				parser->header_state =
   2731c:	2205      	movs	r2, #5
   2731e:	e7f9      	b.n	27314 <http_parser_execute+0x858>
				parser->header_state =
   27320:	2207      	movs	r2, #7
   27322:	e7f7      	b.n	27314 <http_parser_execute+0x858>
   27324:	0003c7f0 	.word	0x0003c7f0
   27328:	000a014f 	.word	0x000a014f
   2732c:	00050148 	.word	0x00050148
   27330:	00030155 	.word	0x00030155
   27334:	00040252 	.word	0x00040252
   27338:	00090149 	.word	0x00090149
   2733c:	000a0145 	.word	0x000a0145
   27340:	00050250 	.word	0x00050250
   27344:	000f0253 	.word	0x000f0253
   27348:	000c0450 	.word	0x000c0450
   2734c:	000a0241 	.word	0x000a0241
   27350:	000f0242 	.word	0x000f0242
   27354:	00140242 	.word	0x00140242
   27358:	001a0145 	.word	0x001a0145
   2735c:	000f0349 	.word	0x000f0349
   27360:	00400009 	.word	0x00400009
   27364:	0003f5a7 	.word	0x0003f5a7
				c = TOKEN(ch);
   27368:	462b      	mov	r3, r5
	switch (parser->header_state) {
   2736a:	78a2      	ldrb	r2, [r4, #2]
   2736c:	0852      	lsrs	r2, r2, #1
   2736e:	3a01      	subs	r2, #1
   27370:	2a0b      	cmp	r2, #11
   27372:	f63f ac10 	bhi.w	26b96 <http_parser_execute+0xda>
   27376:	e8df f002 	tbb	[pc, r2]
   2737a:	1706      	.short	0x1706
   2737c:	63513721 	.word	0x63513721
   27380:	a7a79079 	.word	0xa7a79079
   27384:	a7a7      	.short	0xa7a7
		parser->index++;
   27386:	78e2      	ldrb	r2, [r4, #3]
		parser->header_state = (c == 'o' ? h_CO : h_general);
   27388:	2b6f      	cmp	r3, #111	; 0x6f
		parser->index++;
   2738a:	f102 0701 	add.w	r7, r2, #1
   2738e:	f367 0206 	bfi	r2, r7, #0, #7
   27392:	70e2      	strb	r2, [r4, #3]
		parser->header_state = (c == 'o' ? h_CO : h_general);
   27394:	bf08      	it	eq
   27396:	2202      	moveq	r2, #2
		parser->header_state = (c == 'n' ? h_CON : h_general);
   27398:	bf18      	it	ne
   2739a:	2200      	movne	r2, #0
   2739c:	78a3      	ldrb	r3, [r4, #2]
   2739e:	f362 0347 	bfi	r3, r2, #1, #7
   273a2:	70a3      	strb	r3, [r4, #2]
		break;
   273a4:	f7ff bbf7 	b.w	26b96 <http_parser_execute+0xda>
		parser->index++;
   273a8:	78e2      	ldrb	r2, [r4, #3]
		parser->header_state = (c == 'n' ? h_CON : h_general);
   273aa:	2b6e      	cmp	r3, #110	; 0x6e
		parser->index++;
   273ac:	f102 0701 	add.w	r7, r2, #1
   273b0:	f367 0206 	bfi	r2, r7, #0, #7
   273b4:	70e2      	strb	r2, [r4, #3]
		parser->header_state = (c == 'n' ? h_CON : h_general);
   273b6:	bf08      	it	eq
   273b8:	2203      	moveq	r2, #3
   273ba:	e7ed      	b.n	27398 <http_parser_execute+0x8dc>
		parser->index++;
   273bc:	78e2      	ldrb	r2, [r4, #3]
   273be:	2b6e      	cmp	r3, #110	; 0x6e
   273c0:	f102 0701 	add.w	r7, r2, #1
   273c4:	f367 0206 	bfi	r2, r7, #0, #7
   273c8:	70e2      	strb	r2, [r4, #3]
		switch (c) {
   273ca:	78a2      	ldrb	r2, [r4, #2]
   273cc:	d004      	beq.n	273d8 <http_parser_execute+0x91c>
   273ce:	2b74      	cmp	r3, #116	; 0x74
   273d0:	d008      	beq.n	273e4 <http_parser_execute+0x928>
			parser->header_state = h_general;
   273d2:	f36f 0247 	bfc	r2, #1, #7
   273d6:	e002      	b.n	273de <http_parser_execute+0x922>
			parser->header_state = h_matching_connection;
   273d8:	2304      	movs	r3, #4
			parser->header_state = h_matching_content_length;
   273da:	f363 0247 	bfi	r2, r3, #1, #7
   273de:	70a2      	strb	r2, [r4, #2]
			break;
   273e0:	f7ff bbd9 	b.w	26b96 <http_parser_execute+0xda>
			parser->header_state = h_matching_content_length;
   273e4:	2306      	movs	r3, #6
   273e6:	e7f8      	b.n	273da <http_parser_execute+0x91e>
		parser->index++;
   273e8:	78e7      	ldrb	r7, [r4, #3]
   273ea:	1c7a      	adds	r2, r7, #1
   273ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   273f0:	f362 0706 	bfi	r7, r2, #0, #7
		if (cond1 || c != CONNECTION[parser->index]) {
   273f4:	2a0a      	cmp	r2, #10
		parser->index++;
   273f6:	70e7      	strb	r7, [r4, #3]
		if (cond1 || c != CONNECTION[parser->index]) {
   273f8:	d803      	bhi.n	27402 <http_parser_execute+0x946>
   273fa:	f81a 2002 	ldrb.w	r2, [sl, r2]
   273fe:	429a      	cmp	r2, r3
   27400:	d003      	beq.n	2740a <http_parser_execute+0x94e>
			parser->header_state = h_general;
   27402:	78a3      	ldrb	r3, [r4, #2]
   27404:	f36f 0347 	bfc	r3, #1, #7
   27408:	e7cb      	b.n	273a2 <http_parser_execute+0x8e6>
		} else if (parser->index == sizeof(CONNECTION) - 2) {
   2740a:	78e3      	ldrb	r3, [r4, #3]
   2740c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27410:	2b09      	cmp	r3, #9
   27412:	f47f abc0 	bne.w	26b96 <http_parser_execute+0xda>
			parser->header_state = h_connection;
   27416:	2209      	movs	r2, #9
   27418:	78a3      	ldrb	r3, [r4, #2]
   2741a:	e7c0      	b.n	2739e <http_parser_execute+0x8e2>
		parser->index++;
   2741c:	78e7      	ldrb	r7, [r4, #3]
   2741e:	1c7a      	adds	r2, r7, #1
   27420:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   27424:	f362 0706 	bfi	r7, r2, #0, #7
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
   27428:	2a10      	cmp	r2, #16
		parser->index++;
   2742a:	70e7      	strb	r7, [r4, #3]
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
   2742c:	d8e9      	bhi.n	27402 <http_parser_execute+0x946>
   2742e:	f81e 2002 	ldrb.w	r2, [lr, r2]
   27432:	429a      	cmp	r2, r3
   27434:	d1e5      	bne.n	27402 <http_parser_execute+0x946>
		} else if (parser->index == sizeof(PROXY_CONNECTION) - 2) {
   27436:	b2fb      	uxtb	r3, r7
   27438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2743c:	2b0f      	cmp	r3, #15
   2743e:	e7e8      	b.n	27412 <http_parser_execute+0x956>
		parser->index++;
   27440:	78e7      	ldrb	r7, [r4, #3]
   27442:	1c7a      	adds	r2, r7, #1
   27444:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   27448:	f362 0706 	bfi	r7, r2, #0, #7
		if (cond1 || c != CONTENT_LENGTH[parser->index]) {
   2744c:	2a0e      	cmp	r2, #14
		parser->index++;
   2744e:	70e7      	strb	r7, [r4, #3]
		if (cond1 || c != CONTENT_LENGTH[parser->index]) {
   27450:	d8d7      	bhi.n	27402 <http_parser_execute+0x946>
   27452:	4fab      	ldr	r7, [pc, #684]	; (27700 <http_parser_execute+0xc44>)
   27454:	5cba      	ldrb	r2, [r7, r2]
   27456:	429a      	cmp	r2, r3
   27458:	d1d3      	bne.n	27402 <http_parser_execute+0x946>
		} else if (parser->index == sizeof(CONTENT_LENGTH) - 2) {
   2745a:	78e3      	ldrb	r3, [r4, #3]
   2745c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27460:	2b0d      	cmp	r3, #13
   27462:	f47f ab98 	bne.w	26b96 <http_parser_execute+0xda>
			parser->header_state = h_content_length;
   27466:	220a      	movs	r2, #10
   27468:	78a3      	ldrb	r3, [r4, #2]
   2746a:	e798      	b.n	2739e <http_parser_execute+0x8e2>
		parser->index++;
   2746c:	78e7      	ldrb	r7, [r4, #3]
   2746e:	1c7a      	adds	r2, r7, #1
   27470:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   27474:	f362 0706 	bfi	r7, r2, #0, #7
		if (cond1 || c != TRANSFER_ENCODING[parser->index]) {
   27478:	2a11      	cmp	r2, #17
		parser->index++;
   2747a:	70e7      	strb	r7, [r4, #3]
		if (cond1 || c != TRANSFER_ENCODING[parser->index]) {
   2747c:	d8c1      	bhi.n	27402 <http_parser_execute+0x946>
   2747e:	4fa1      	ldr	r7, [pc, #644]	; (27704 <http_parser_execute+0xc48>)
   27480:	5cba      	ldrb	r2, [r7, r2]
   27482:	429a      	cmp	r2, r3
   27484:	d1bd      	bne.n	27402 <http_parser_execute+0x946>
		} else if (parser->index == sizeof(TRANSFER_ENCODING) - 2) {
   27486:	78e3      	ldrb	r3, [r4, #3]
   27488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2748c:	2b10      	cmp	r3, #16
   2748e:	f47f ab82 	bne.w	26b96 <http_parser_execute+0xda>
			parser->header_state = h_transfer_encoding;
   27492:	78a3      	ldrb	r3, [r4, #2]
   27494:	f360 0347 	bfi	r3, r0, #1, #7
   27498:	e783      	b.n	273a2 <http_parser_execute+0x8e6>
		parser->index++;
   2749a:	78e7      	ldrb	r7, [r4, #3]
   2749c:	1c7a      	adds	r2, r7, #1
   2749e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   274a2:	f362 0706 	bfi	r7, r2, #0, #7
		if (cond1 || c != UPGRADE[parser->index]) {
   274a6:	2a07      	cmp	r2, #7
		parser->index++;
   274a8:	70e7      	strb	r7, [r4, #3]
		if (cond1 || c != UPGRADE[parser->index]) {
   274aa:	d8aa      	bhi.n	27402 <http_parser_execute+0x946>
   274ac:	4f96      	ldr	r7, [pc, #600]	; (27708 <http_parser_execute+0xc4c>)
   274ae:	5cba      	ldrb	r2, [r7, r2]
   274b0:	429a      	cmp	r2, r3
   274b2:	d1a6      	bne.n	27402 <http_parser_execute+0x946>
		} else if (parser->index == sizeof(UPGRADE) - 2) {
   274b4:	78e3      	ldrb	r3, [r4, #3]
   274b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   274ba:	2b06      	cmp	r3, #6
   274bc:	f47f ab6b 	bne.w	26b96 <http_parser_execute+0xda>
			parser->header_state = h_upgrade;
   274c0:	78a3      	ldrb	r3, [r4, #2]
   274c2:	f36c 0347 	bfi	r3, ip, #1, #7
   274c6:	e76c      	b.n	273a2 <http_parser_execute+0x8e6>
		if (ch != ' ') {
   274c8:	2d20      	cmp	r5, #32
   274ca:	d19a      	bne.n	27402 <http_parser_execute+0x946>
   274cc:	f7ff bb63 	b.w	26b96 <http_parser_execute+0xda>
			if (p == data + len) {
   274d0:	45bb      	cmp	fp, r7
   274d2:	d102      	bne.n	274da <http_parser_execute+0xa1e>
				--p;
   274d4:	f10b 36ff 	add.w	r6, fp, #4294967295	; 0xffffffff
   274d8:	e445      	b.n	26d66 <http_parser_execute+0x2aa>
			if (ch == ':') {
   274da:	2d3a      	cmp	r5, #58	; 0x3a
   274dc:	eba7 0308 	sub.w	r3, r7, r8
   274e0:	d118      	bne.n	27514 <http_parser_execute+0xa58>
				UPDATE_STATE(s_header_value_discard_ws);
   274e2:	222c      	movs	r2, #44	; 0x2c
   274e4:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
					     p - header_field_mark);
   274e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
					     parsed, p - data + 1,
   274ea:	3301      	adds	r3, #1
					     p - header_field_mark);
   274ec:	1aba      	subs	r2, r7, r2
				rc = cb_data(parser, settings->on_header_field,
   274ee:	9203      	str	r2, [sp, #12]
   274f0:	9301      	str	r3, [sp, #4]
   274f2:	aa11      	add	r2, sp, #68	; 0x44
   274f4:	ab10      	add	r3, sp, #64	; 0x40
   274f6:	9202      	str	r2, [sp, #8]
   274f8:	9300      	str	r3, [sp, #0]
   274fa:	2203      	movs	r2, #3
   274fc:	4620      	mov	r0, r4
   274fe:	f8d9 100c 	ldr.w	r1, [r9, #12]
   27502:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   27506:	f012 f828 	bl	3955a <cb_data>
				if (rc != 0) {
   2750a:	2800      	cmp	r0, #0
   2750c:	f47f aafb 	bne.w	26b06 <http_parser_execute+0x4a>
   27510:	463e      	mov	r6, r7
   27512:	e428      	b.n	26d66 <http_parser_execute+0x2aa>
			SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   27514:	2218      	movs	r2, #24
   27516:	7de3      	ldrb	r3, [r4, #23]
   27518:	f7ff bb54 	b.w	26bc4 <http_parser_execute+0x108>
			if (ch == ' ' || ch == '\t') {
   2751c:	2d20      	cmp	r5, #32
   2751e:	f43f ac22 	beq.w	26d66 <http_parser_execute+0x2aa>
   27522:	2d09      	cmp	r5, #9
   27524:	f43f ac1f 	beq.w	26d66 <http_parser_execute+0x2aa>
			if (ch == CR) {
   27528:	2d0d      	cmp	r5, #13
   2752a:	d101      	bne.n	27530 <http_parser_execute+0xa74>
				UPDATE_STATE
   2752c:	232d      	movs	r3, #45	; 0x2d
   2752e:	e418      	b.n	26d62 <http_parser_execute+0x2a6>
			if (ch == LF) {
   27530:	2d0a      	cmp	r5, #10
   27532:	d101      	bne.n	27538 <http_parser_execute+0xa7c>
			UPDATE_STATE(s_header_value_discard_lws);
   27534:	232e      	movs	r3, #46	; 0x2e
   27536:	e414      	b.n	26d62 <http_parser_execute+0x2a6>
			MARK(header_value);
   27538:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2753a:	b903      	cbnz	r3, 2753e <http_parser_execute+0xa82>
   2753c:	9612      	str	r6, [sp, #72]	; 0x48
			UPDATE_STATE(s_header_value);
   2753e:	2330      	movs	r3, #48	; 0x30
   27540:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			parser->index = 0U;
   27544:	78e3      	ldrb	r3, [r4, #3]
			c = LOWER(ch);
   27546:	f045 0220 	orr.w	r2, r5, #32
			parser->index = 0U;
   2754a:	f36f 0306 	bfc	r3, #0, #7
   2754e:	70e3      	strb	r3, [r4, #3]
			switch (parser->header_state) {
   27550:	78a3      	ldrb	r3, [r4, #2]
   27552:	085b      	lsrs	r3, r3, #1
   27554:	3b09      	subs	r3, #9
   27556:	2b05      	cmp	r3, #5
   27558:	d812      	bhi.n	27580 <http_parser_execute+0xac4>
   2755a:	a101      	add	r1, pc, #4	; (adr r1, 27560 <http_parser_execute+0xaa4>)
   2755c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   27560:	000275c9 	.word	0x000275c9
   27564:	00027591 	.word	0x00027591
   27568:	00027585 	.word	0x00027585
   2756c:	00027579 	.word	0x00027579
   27570:	00027581 	.word	0x00027581
   27574:	00026d67 	.word	0x00026d67
				parser->flags |= F_UPGRADE;
   27578:	8823      	ldrh	r3, [r4, #0]
   2757a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2757e:	8023      	strh	r3, [r4, #0]
				parser->header_state = h_general;
   27580:	78a3      	ldrb	r3, [r4, #2]
   27582:	e6bf      	b.n	27304 <http_parser_execute+0x848>
				if ('c' == c) {
   27584:	2a63      	cmp	r2, #99	; 0x63
   27586:	78a3      	ldrb	r3, [r4, #2]
   27588:	f47f aebc 	bne.w	27304 <http_parser_execute+0x848>
					parser->header_state =
   2758c:	220d      	movs	r2, #13
   2758e:	e6c1      	b.n	27314 <http_parser_execute+0x858>
				if (UNLIKELY(!IS_NUM(ch))) {
   27590:	3d30      	subs	r5, #48	; 0x30
   27592:	b2eb      	uxtb	r3, r5
   27594:	2b09      	cmp	r3, #9
   27596:	d903      	bls.n	275a0 <http_parser_execute+0xae4>
				SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   27598:	2219      	movs	r2, #25
   2759a:	7de3      	ldrb	r3, [r4, #23]
   2759c:	f7ff baef 	b.w	26b7e <http_parser_execute+0xc2>
				if (parser->flags & F_CONTENTLENGTH) {
   275a0:	8823      	ldrh	r3, [r4, #0]
   275a2:	059f      	lsls	r7, r3, #22
   275a4:	f3c3 0287 	ubfx	r2, r3, #2, #8
   275a8:	d503      	bpl.n	275b2 <http_parser_execute+0xaf6>
					SET_ERRNO
   275aa:	7de3      	ldrb	r3, [r4, #23]
				SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);
   275ac:	221a      	movs	r2, #26
   275ae:	f7ff bae6 	b.w	26b7e <http_parser_execute+0xc2>
				parser->flags |= F_CONTENTLENGTH;
   275b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   275b6:	f362 0389 	bfi	r3, r2, #2, #8
				parser->content_length = ch - '0';
   275ba:	462a      	mov	r2, r5
				parser->flags |= F_CONTENTLENGTH;
   275bc:	8023      	strh	r3, [r4, #0]
				parser->content_length = ch - '0';
   275be:	17eb      	asrs	r3, r5, #31
   275c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
				break;
   275c4:	f7ff bbcf 	b.w	26d66 <http_parser_execute+0x2aa>
				if (c == 'k') {
   275c8:	2a6b      	cmp	r2, #107	; 0x6b
   275ca:	78a3      	ldrb	r3, [r4, #2]
   275cc:	d101      	bne.n	275d2 <http_parser_execute+0xb16>
					parser->header_state =
   275ce:	220f      	movs	r2, #15
   275d0:	e6a0      	b.n	27314 <http_parser_execute+0x858>
				} else if (c == 'c') {
   275d2:	2a63      	cmp	r2, #99	; 0x63
   275d4:	d101      	bne.n	275da <http_parser_execute+0xb1e>
					parser->header_state =
   275d6:	2210      	movs	r2, #16
   275d8:	e69c      	b.n	27314 <http_parser_execute+0x858>
				} else if (c == 'u') {
   275da:	2a75      	cmp	r2, #117	; 0x75
					parser->header_state =
   275dc:	bf0c      	ite	eq
   275de:	2211      	moveq	r2, #17
					parser->header_state =
   275e0:	2212      	movne	r2, #18
   275e2:	e697      	b.n	27314 <http_parser_execute+0x858>
			for (; p != data + len; p++) {
   275e4:	46b2      	mov	sl, r6
				(enum header_states)parser->header_state;
   275e6:	78a7      	ldrb	r7, [r4, #2]
   275e8:	087f      	lsrs	r7, r7, #1
			for (; p != data + len; p++) {
   275ea:	45d3      	cmp	fp, sl
   275ec:	d021      	beq.n	27632 <http_parser_execute+0xb76>
				ch = *p;
   275ee:	f89a 5000 	ldrb.w	r5, [sl]
				if (ch == CR) {
   275f2:	2d0d      	cmp	r5, #13
   275f4:	d12d      	bne.n	27652 <http_parser_execute+0xb96>
					UPDATE_STATE(s_header_almost_done);
   275f6:	2332      	movs	r3, #50	; 0x32
   275f8:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
					parser->header_state = h_state;
   275fc:	78a3      	ldrb	r3, [r4, #2]
					rc = cb_data(parser,
   275fe:	2204      	movs	r2, #4
					parser->header_state = h_state;
   27600:	f367 0347 	bfi	r3, r7, #1, #7
   27604:	70a3      	strb	r3, [r4, #2]
						     p - header_value_mark);
   27606:	9b12      	ldr	r3, [sp, #72]	; 0x48
					rc = cb_data(parser,
   27608:	4620      	mov	r0, r4
						     p - header_value_mark);
   2760a:	ebaa 0303 	sub.w	r3, sl, r3
					rc = cb_data(parser,
   2760e:	9303      	str	r3, [sp, #12]
   27610:	ab12      	add	r3, sp, #72	; 0x48
   27612:	9302      	str	r3, [sp, #8]
						     p - data + 1,
   27614:	ebaa 0308 	sub.w	r3, sl, r8
   27618:	3301      	adds	r3, #1
					rc = cb_data(parser,
   2761a:	9301      	str	r3, [sp, #4]
   2761c:	ab10      	add	r3, sp, #64	; 0x40
   2761e:	9300      	str	r3, [sp, #0]
   27620:	f8d9 1010 	ldr.w	r1, [r9, #16]
   27624:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   27628:	f011 ff97 	bl	3955a <cb_data>
					if (rc != 0) {
   2762c:	2800      	cmp	r0, #0
   2762e:	f47f aa6a 	bne.w	26b06 <http_parser_execute+0x4a>
			parser->header_state = h_state;
   27632:	78a3      	ldrb	r3, [r4, #2]
			rc = count_header_size(parser, p - start);
   27634:	ebaa 0606 	sub.w	r6, sl, r6
			parser->header_state = h_state;
   27638:	f367 0347 	bfi	r3, r7, #1, #7
   2763c:	70a3      	strb	r3, [r4, #2]
	parser->nread += bytes;
   2763e:	6863      	ldr	r3, [r4, #4]
   27640:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   27642:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   27646:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   27648:	f240 8148 	bls.w	278dc <http_parser_execute+0xe20>
		parser->http_errno = HPE_HEADER_OVERFLOW;
   2764c:	220c      	movs	r2, #12
   2764e:	7de3      	ldrb	r3, [r4, #23]
   27650:	e033      	b.n	276ba <http_parser_execute+0xbfe>
				if (ch == LF) {
   27652:	2d0a      	cmp	r5, #10
   27654:	d127      	bne.n	276a6 <http_parser_execute+0xbea>
					UPDATE_STATE(s_header_almost_done);
   27656:	2332      	movs	r3, #50	; 0x32
   27658:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	parser->nread += bytes;
   2765c:	6863      	ldr	r3, [r4, #4]
					rc = count_header_size(parser,
   2765e:	ebaa 0606 	sub.w	r6, sl, r6
	parser->nread += bytes;
   27662:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   27664:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   27668:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   2766a:	ebaa 0208 	sub.w	r2, sl, r8
   2766e:	d8ed      	bhi.n	2764c <http_parser_execute+0xb90>
					parser->header_state = h_state;
   27670:	78a3      	ldrb	r3, [r4, #2]
					rc = cb_data(parser,
   27672:	4620      	mov	r0, r4
					parser->header_state = h_state;
   27674:	f367 0347 	bfi	r3, r7, #1, #7
   27678:	70a3      	strb	r3, [r4, #2]
						     p - header_value_mark);
   2767a:	9b12      	ldr	r3, [sp, #72]	; 0x48
					rc = cb_data(parser,
   2767c:	f8d9 1010 	ldr.w	r1, [r9, #16]
						     p - header_value_mark);
   27680:	ebaa 0303 	sub.w	r3, sl, r3
					rc = cb_data(parser,
   27684:	9303      	str	r3, [sp, #12]
   27686:	ab12      	add	r3, sp, #72	; 0x48
   27688:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2768c:	ab10      	add	r3, sp, #64	; 0x40
   2768e:	9300      	str	r3, [sp, #0]
   27690:	2204      	movs	r2, #4
   27692:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   27696:	f011 ff60 	bl	3955a <cb_data>
					if (rc != 0) {
   2769a:	2800      	cmp	r0, #0
   2769c:	f47f aa33 	bne.w	26b06 <http_parser_execute+0x4a>
   276a0:	4656      	mov	r6, sl
   276a2:	f7ff bac0 	b.w	26c26 <http_parser_execute+0x16a>
				if (!lenient && !IS_HEADER_CHAR(ch)) {
   276a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   276a8:	b95b      	cbnz	r3, 276c2 <http_parser_execute+0xc06>
   276aa:	2d09      	cmp	r5, #9
   276ac:	d009      	beq.n	276c2 <http_parser_execute+0xc06>
   276ae:	2d1f      	cmp	r5, #31
   276b0:	d901      	bls.n	276b6 <http_parser_execute+0xbfa>
   276b2:	2d7f      	cmp	r5, #127	; 0x7f
   276b4:	d105      	bne.n	276c2 <http_parser_execute+0xc06>
					SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   276b6:	2218      	movs	r2, #24
   276b8:	7de3      	ldrb	r3, [r4, #23]
		parser->http_errno = HPE_HEADER_OVERFLOW;
   276ba:	f362 0306 	bfi	r3, r2, #0, #7
   276be:	75e3      	strb	r3, [r4, #23]
   276c0:	e055      	b.n	2776e <http_parser_execute+0xcb2>
				c = LOWER(ch);
   276c2:	f045 0320 	orr.w	r3, r5, #32
	switch (h_state) {
   276c6:	2f16      	cmp	r7, #22
   276c8:	f200 8103 	bhi.w	278d2 <http_parser_execute+0xe16>
   276cc:	e8df f017 	tbh	[pc, r7, lsl #1]
   276d0:	0101001e 	.word	0x0101001e
   276d4:	01010101 	.word	0x01010101
   276d8:	01010101 	.word	0x01010101
   276dc:	01010101 	.word	0x01010101
   276e0:	00370101 	.word	0x00370101
   276e4:	0037003f 	.word	0x0037003f
   276e8:	00740101 	.word	0x00740101
   276ec:	009c008a 	.word	0x009c008a
   276f0:	00c800b2 	.word	0x00c800b2
   276f4:	00e700de 	.word	0x00e700de
   276f8:	00e900e9 	.word	0x00e900e9
   276fc:	00e9      	.short	0x00e9
   276fe:	bf00      	nop
   27700:	0003ef35 	.word	0x0003ef35
   27704:	0003ef44 	.word	0x0003ef44
   27708:	0003ef56 	.word	0x0003ef56
		size_t limit = data + len - p;
   2770c:	ebab 020a 	sub.w	r2, fp, sl
		limit = MIN(limit, HTTP_MAX_HEADER_SIZE);
   27710:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   27714:	bf28      	it	cs
   27716:	f44f 32a0 	movcs.w	r2, #81920	; 0x14000
		p_cr = (const char *)memchr(p, CR, limit);
   2771a:	210d      	movs	r1, #13
   2771c:	4650      	mov	r0, sl
   2771e:	920c      	str	r2, [sp, #48]	; 0x30
   27720:	f013 fe2b 	bl	3b37a <memchr>
   27724:	4605      	mov	r5, r0
		p_lf = (const char *)memchr(p, LF, limit);
   27726:	210a      	movs	r1, #10
   27728:	4650      	mov	r0, sl
   2772a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2772c:	f013 fe25 	bl	3b37a <memchr>
		if (p_cr != NULL) {
   27730:	b145      	cbz	r5, 27744 <http_parser_execute+0xc88>
			if (p_lf != NULL && p_cr >= p_lf) {
   27732:	b110      	cbz	r0, 2773a <http_parser_execute+0xc7e>
   27734:	4285      	cmp	r5, r0
   27736:	bf28      	it	cs
   27738:	4605      	movcs	r5, r0
		--p;
   2773a:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
			for (; p != data + len; p++) {
   2773e:	f10a 0a01 	add.w	sl, sl, #1
   27742:	e752      	b.n	275ea <http_parser_execute+0xb2e>
		} else if (UNLIKELY(p_lf != NULL)) {
   27744:	2800      	cmp	r0, #0
   27746:	bf14      	ite	ne
   27748:	4605      	movne	r5, r0
   2774a:	465d      	moveq	r5, fp
   2774c:	e7f5      	b.n	2773a <http_parser_execute+0xc7e>
		if (ch == ' ') {
   2774e:	2d20      	cmp	r5, #32
   27750:	d0f5      	beq.n	2773e <http_parser_execute+0xc82>
		if (UNLIKELY(!IS_NUM(ch))) {
   27752:	3d30      	subs	r5, #48	; 0x30
   27754:	b2eb      	uxtb	r3, r5
   27756:	2b09      	cmp	r3, #9
   27758:	d90c      	bls.n	27774 <http_parser_execute+0xcb8>
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   2775a:	2219      	movs	r2, #25
   2775c:	7de3      	ldrb	r3, [r4, #23]
   2775e:	f362 0306 	bfi	r3, r2, #0, #7
			parser->header_state = h_state;
   27762:	220a      	movs	r2, #10
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   27764:	75e3      	strb	r3, [r4, #23]
			parser->header_state = h_state;
   27766:	78a3      	ldrb	r3, [r4, #2]
   27768:	f362 0347 	bfi	r3, r2, #1, #7
			parser->header_state = h_state;
   2776c:	70a3      	strb	r3, [r4, #2]
		parser->http_errno = HPE_HEADER_OVERFLOW;
   2776e:	4656      	mov	r6, sl
   27770:	f7ff ba2c 	b.w	26bcc <http_parser_execute+0x110>
		t *= 10U;
   27774:	f04f 0c0a 	mov.w	ip, #10
		t = parser->content_length;
   27778:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
		t *= 10U;
   2777c:	fba0 230c 	umull	r2, r3, r0, ip
   27780:	fb0c 3301 	mla	r3, ip, r1, r3
		t += ch - '0';
   27784:	1952      	adds	r2, r2, r5
   27786:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   2778a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (UNLIKELY(value < parser->content_length)) {
   2778e:	f04f 3299 	mov.w	r2, #2576980377	; 0x99999999
   27792:	4bb2      	ldr	r3, [pc, #712]	; (27a5c <http_parser_execute+0xfa0>)
   27794:	4299      	cmp	r1, r3
   27796:	bf08      	it	eq
   27798:	4290      	cmpeq	r0, r2
   2779a:	d308      	bcc.n	277ae <http_parser_execute+0xcf2>
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   2779c:	2219      	movs	r2, #25
   2779e:	7de3      	ldrb	r3, [r4, #23]
   277a0:	f362 0306 	bfi	r3, r2, #0, #7
   277a4:	75e3      	strb	r3, [r4, #23]
			parser->header_state = h_state;
   277a6:	78a3      	ldrb	r3, [r4, #2]
   277a8:	f36c 0347 	bfi	r3, ip, #1, #7
   277ac:	e7de      	b.n	2776c <http_parser_execute+0xcb0>
		parser->content_length = t;
   277ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   277b2:	e9c4 2302 	strd	r2, r3, [r4, #8]
		break;
   277b6:	e7c2      	b.n	2773e <http_parser_execute+0xc82>
		parser->index++;
   277b8:	78e1      	ldrb	r1, [r4, #3]
   277ba:	1c4a      	adds	r2, r1, #1
   277bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   277c0:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != CHUNKED[parser->index]) {
   277c4:	2a07      	cmp	r2, #7
		parser->index++;
   277c6:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != CHUNKED[parser->index]) {
   277c8:	f200 8086 	bhi.w	278d8 <http_parser_execute+0xe1c>
   277cc:	49a4      	ldr	r1, [pc, #656]	; (27a60 <http_parser_execute+0xfa4>)
   277ce:	5c8a      	ldrb	r2, [r1, r2]
   277d0:	429a      	cmp	r2, r3
   277d2:	f040 8081 	bne.w	278d8 <http_parser_execute+0xe1c>
		} else if (parser->index == sizeof(CHUNKED) - 2) {
   277d6:	78e3      	ldrb	r3, [r4, #3]
   277d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_transfer_encoding_chunked;
   277dc:	2b06      	cmp	r3, #6
   277de:	bf08      	it	eq
   277e0:	2713      	moveq	r7, #19
   277e2:	e7ac      	b.n	2773e <http_parser_execute+0xc82>
		if (c == 'k') {
   277e4:	2b6b      	cmp	r3, #107	; 0x6b
   277e6:	f000 82df 	beq.w	27da8 <http_parser_execute+0x12ec>
		} else if (c == 'c') {
   277ea:	2b63      	cmp	r3, #99	; 0x63
   277ec:	f000 82de 	beq.w	27dac <http_parser_execute+0x12f0>
		} else if (c == 'u') {
   277f0:	2b75      	cmp	r3, #117	; 0x75
   277f2:	f000 82dd 	beq.w	27db0 <http_parser_execute+0x12f4>
		} else if (STRICT_TOKEN(c)) {
   277f6:	4a9b      	ldr	r2, [pc, #620]	; (27a64 <http_parser_execute+0xfa8>)
   277f8:	5cd2      	ldrb	r2, [r2, r3]
   277fa:	2a00      	cmp	r2, #0
   277fc:	f040 82da 	bne.w	27db4 <http_parser_execute+0x12f8>
			h_state = h_general;
   27800:	2b20      	cmp	r3, #32
			h_state = h_general;
   27802:	bf18      	it	ne
   27804:	2700      	movne	r7, #0
   27806:	e79a      	b.n	2773e <http_parser_execute+0xc82>
		parser->index++;
   27808:	78e1      	ldrb	r1, [r4, #3]
   2780a:	1c4a      	adds	r2, r1, #1
   2780c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   27810:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != KEEP_ALIVE[parser->index]) {
   27814:	2a0a      	cmp	r2, #10
		parser->index++;
   27816:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != KEEP_ALIVE[parser->index]) {
   27818:	f200 82cc 	bhi.w	27db4 <http_parser_execute+0x12f8>
   2781c:	4992      	ldr	r1, [pc, #584]	; (27a68 <http_parser_execute+0xfac>)
   2781e:	5c8a      	ldrb	r2, [r1, r2]
   27820:	429a      	cmp	r2, r3
   27822:	f040 82c7 	bne.w	27db4 <http_parser_execute+0x12f8>
		} else if (parser->index == sizeof(KEEP_ALIVE) - 2) {
   27826:	78e3      	ldrb	r3, [r4, #3]
   27828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_keep_alive;
   2782c:	2b09      	cmp	r3, #9
   2782e:	bf08      	it	eq
   27830:	2714      	moveq	r7, #20
   27832:	e784      	b.n	2773e <http_parser_execute+0xc82>
		parser->index++;
   27834:	78e1      	ldrb	r1, [r4, #3]
   27836:	1c4a      	adds	r2, r1, #1
   27838:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2783c:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != CLOSE[parser->index]) {
   27840:	2a05      	cmp	r2, #5
		parser->index++;
   27842:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != CLOSE[parser->index]) {
   27844:	f200 82b6 	bhi.w	27db4 <http_parser_execute+0x12f8>
   27848:	4988      	ldr	r1, [pc, #544]	; (27a6c <http_parser_execute+0xfb0>)
   2784a:	5c8a      	ldrb	r2, [r1, r2]
   2784c:	429a      	cmp	r2, r3
   2784e:	f040 82b1 	bne.w	27db4 <http_parser_execute+0x12f8>
		} else if (parser->index == sizeof(CLOSE) - 2) {
   27852:	78e3      	ldrb	r3, [r4, #3]
   27854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_close;
   27858:	2b04      	cmp	r3, #4
   2785a:	bf08      	it	eq
   2785c:	2715      	moveq	r7, #21
   2785e:	e76e      	b.n	2773e <http_parser_execute+0xc82>
		parser->index++;
   27860:	78e1      	ldrb	r1, [r4, #3]
   27862:	1c4a      	adds	r2, r1, #1
   27864:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   27868:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != UPGRADE[parser->index]) {
   2786c:	2a07      	cmp	r2, #7
		parser->index++;
   2786e:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != UPGRADE[parser->index]) {
   27870:	f200 82a0 	bhi.w	27db4 <http_parser_execute+0x12f8>
   27874:	497e      	ldr	r1, [pc, #504]	; (27a70 <http_parser_execute+0xfb4>)
   27876:	5c8a      	ldrb	r2, [r1, r2]
   27878:	429a      	cmp	r2, r3
   2787a:	f040 829b 	bne.w	27db4 <http_parser_execute+0x12f8>
		} else if (parser->index == sizeof(UPGRADE) - 2) {
   2787e:	78e3      	ldrb	r3, [r4, #3]
   27880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_upgrade;
   27884:	2b06      	cmp	r3, #6
   27886:	bf08      	it	eq
   27888:	2716      	moveq	r7, #22
   2788a:	e758      	b.n	2773e <http_parser_execute+0xc82>
		if (ch == ',') {
   2788c:	2d2c      	cmp	r5, #44	; 0x2c
   2788e:	f47f af56 	bne.w	2773e <http_parser_execute+0xc82>
			parser->index = 0U;
   27892:	78e3      	ldrb	r3, [r4, #3]
			h_state = h_matching_connection_token_start;
   27894:	270e      	movs	r7, #14
			parser->index = 0U;
   27896:	f36f 0306 	bfc	r3, #0, #7
   2789a:	70e3      	strb	r3, [r4, #3]
   2789c:	e74f      	b.n	2773e <http_parser_execute+0xc82>
			h_state = h_general;
   2789e:	2d20      	cmp	r5, #32
   278a0:	e7af      	b.n	27802 <http_parser_execute+0xd46>
		if (ch == ',') {
   278a2:	2d2c      	cmp	r5, #44	; 0x2c
   278a4:	d111      	bne.n	278ca <http_parser_execute+0xe0e>
			if (h_state == h_connection_keep_alive) {
   278a6:	8823      	ldrh	r3, [r4, #0]
   278a8:	2f14      	cmp	r7, #20
   278aa:	f3c3 0287 	ubfx	r2, r3, #2, #8
   278ae:	d105      	bne.n	278bc <http_parser_execute+0xe00>
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   278b0:	f042 0202 	orr.w	r2, r2, #2
				parser->flags |= F_CONNECTION_UPGRADE;
   278b4:	f362 0389 	bfi	r3, r2, #2, #8
   278b8:	8023      	strh	r3, [r4, #0]
   278ba:	e7ea      	b.n	27892 <http_parser_execute+0xdd6>
			} else if (h_state == h_connection_close) {
   278bc:	2f15      	cmp	r7, #21
				parser->flags |= F_CONNECTION_CLOSE;
   278be:	bf0c      	ite	eq
   278c0:	f042 0204 	orreq.w	r2, r2, #4
				parser->flags |= F_CONNECTION_UPGRADE;
   278c4:	f042 0208 	orrne.w	r2, r2, #8
   278c8:	e7f4      	b.n	278b4 <http_parser_execute+0xdf8>
			h_state = h_matching_connection_token;
   278ca:	2d20      	cmp	r5, #32
   278cc:	bf18      	it	ne
   278ce:	2712      	movne	r7, #18
   278d0:	e735      	b.n	2773e <http_parser_execute+0xc82>
		*p_state = s_header_value;
   278d2:	2330      	movs	r3, #48	; 0x30
   278d4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			h_state = h_general;
   278d8:	2700      	movs	r7, #0
   278da:	e730      	b.n	2773e <http_parser_execute+0xc82>
			if (p == data + len) {
   278dc:	45d3      	cmp	fp, sl
   278de:	f43f adf9 	beq.w	274d4 <http_parser_execute+0xa18>
   278e2:	4656      	mov	r6, sl
   278e4:	f7ff ba3f 	b.w	26d66 <http_parser_execute+0x2aa>
			if (UNLIKELY(ch != LF)) {
   278e8:	2d0a      	cmp	r5, #10
   278ea:	f47f ace5 	bne.w	272b8 <http_parser_execute+0x7fc>
			UPDATE_STATE(s_header_value_lws);
   278ee:	2331      	movs	r3, #49	; 0x31
   278f0:	f7ff ba37 	b.w	26d62 <http_parser_execute+0x2a6>
			if (ch == ' ' || ch == '\t') {
   278f4:	2d20      	cmp	r5, #32
   278f6:	d001      	beq.n	278fc <http_parser_execute+0xe40>
   278f8:	2d09      	cmp	r5, #9
   278fa:	d102      	bne.n	27902 <http_parser_execute+0xe46>
				UPDATE_STATE(s_header_value_start);
   278fc:	232f      	movs	r3, #47	; 0x2f
   278fe:	f7ff b990 	b.w	26c22 <http_parser_execute+0x166>
			switch (parser->header_state) {
   27902:	78a3      	ldrb	r3, [r4, #2]
   27904:	085b      	lsrs	r3, r3, #1
   27906:	3b13      	subs	r3, #19
   27908:	2b03      	cmp	r3, #3
   2790a:	d807      	bhi.n	2791c <http_parser_execute+0xe60>
   2790c:	e8df f003 	tbb	[pc, r3]
   27910:	1109020d 	.word	0x1109020d
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   27914:	8823      	ldrh	r3, [r4, #0]
   27916:	f043 0308 	orr.w	r3, r3, #8
				parser->flags |= F_CONNECTION_UPGRADE;
   2791a:	8023      	strh	r3, [r4, #0]
			UPDATE_STATE(s_header_field_start);
   2791c:	232a      	movs	r3, #42	; 0x2a
   2791e:	f7ff b980 	b.w	26c22 <http_parser_execute+0x166>
				parser->flags |= F_CONNECTION_CLOSE;
   27922:	8823      	ldrh	r3, [r4, #0]
   27924:	f043 0310 	orr.w	r3, r3, #16
   27928:	e7f7      	b.n	2791a <http_parser_execute+0xe5e>
				parser->flags |= F_CHUNKED;
   2792a:	8823      	ldrh	r3, [r4, #0]
   2792c:	f043 0304 	orr.w	r3, r3, #4
   27930:	e7f3      	b.n	2791a <http_parser_execute+0xe5e>
				parser->flags |= F_CONNECTION_UPGRADE;
   27932:	8823      	ldrh	r3, [r4, #0]
   27934:	f043 0320 	orr.w	r3, r3, #32
   27938:	e7ef      	b.n	2791a <http_parser_execute+0xe5e>
			if (ch == ' ' || ch == '\t') {
   2793a:	2d20      	cmp	r5, #32
   2793c:	d001      	beq.n	27942 <http_parser_execute+0xe86>
   2793e:	2d09      	cmp	r5, #9
   27940:	d102      	bne.n	27948 <http_parser_execute+0xe8c>
				UPDATE_STATE(s_header_value_discard_ws);
   27942:	232c      	movs	r3, #44	; 0x2c
   27944:	f7ff ba0d 	b.w	26d62 <http_parser_execute+0x2a6>
			switch (parser->header_state) {
   27948:	78a3      	ldrb	r3, [r4, #2]
   2794a:	085b      	lsrs	r3, r3, #1
   2794c:	3b13      	subs	r3, #19
   2794e:	2b03      	cmp	r3, #3
   27950:	d807      	bhi.n	27962 <http_parser_execute+0xea6>
   27952:	e8df f003 	tbb	[pc, r3]
   27956:	0227      	.short	0x0227
   27958:	231f      	.short	0x231f
				parser->flags |=
   2795a:	8823      	ldrh	r3, [r4, #0]
   2795c:	f043 0308 	orr.w	r3, r3, #8
				parser->flags |= F_CHUNKED;
   27960:	8023      	strh	r3, [r4, #0]
			MARK(header_value);
   27962:	9b12      	ldr	r3, [sp, #72]	; 0x48
   27964:	b903      	cbnz	r3, 27968 <http_parser_execute+0xeac>
   27966:	9612      	str	r6, [sp, #72]	; 0x48
			UPDATE_STATE(s_header_field_start);
   27968:	232a      	movs	r3, #42	; 0x2a
			rc = cb_data(parser, settings->on_header_value,
   2796a:	2204      	movs	r2, #4
			UPDATE_STATE(s_header_field_start);
   2796c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
				     p - header_value_mark);
   27970:	9b12      	ldr	r3, [sp, #72]	; 0x48
			rc = cb_data(parser, settings->on_header_value,
   27972:	f8d9 1010 	ldr.w	r1, [r9, #16]
				     p - header_value_mark);
   27976:	1af3      	subs	r3, r6, r3
			rc = cb_data(parser, settings->on_header_value,
   27978:	9303      	str	r3, [sp, #12]
   2797a:	ab12      	add	r3, sp, #72	; 0x48
   2797c:	9302      	str	r3, [sp, #8]
				     p - data, &header_value_mark,
   2797e:	eba6 0308 	sub.w	r3, r6, r8
			rc = cb_data(parser, settings->on_header_value,
   27982:	9301      	str	r3, [sp, #4]
   27984:	ab10      	add	r3, sp, #64	; 0x40
   27986:	9300      	str	r3, [sp, #0]
   27988:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
				rc = cb_data(parser, settings->on_body,
   2798c:	4620      	mov	r0, r4
   2798e:	f011 fde4 	bl	3955a <cb_data>
   27992:	e021      	b.n	279d8 <http_parser_execute+0xf1c>
				parser->flags |= F_CONNECTION_CLOSE;
   27994:	8823      	ldrh	r3, [r4, #0]
   27996:	f043 0310 	orr.w	r3, r3, #16
   2799a:	e7e1      	b.n	27960 <http_parser_execute+0xea4>
				parser->flags |= F_CONNECTION_UPGRADE;
   2799c:	8823      	ldrh	r3, [r4, #0]
   2799e:	f043 0320 	orr.w	r3, r3, #32
   279a2:	e7dd      	b.n	27960 <http_parser_execute+0xea4>
				parser->flags |= F_CHUNKED;
   279a4:	8823      	ldrh	r3, [r4, #0]
   279a6:	f043 0304 	orr.w	r3, r3, #4
   279aa:	e7d9      	b.n	27960 <http_parser_execute+0xea4>
			if (parser->flags & F_TRAILING) {
   279ac:	8823      	ldrh	r3, [r4, #0]
   279ae:	f3c3 0187 	ubfx	r1, r3, #2, #8
   279b2:	0658      	lsls	r0, r3, #25
   279b4:	460a      	mov	r2, r1
   279b6:	d514      	bpl.n	279e2 <http_parser_execute+0xf26>
				UPDATE_STATE(s_message_done);
   279b8:	233e      	movs	r3, #62	; 0x3e
   279ba:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
					       p - data);
   279be:	eba6 0308 	sub.w	r3, r6, r8
				rc = cb_notify(parser, &p_state,
   279c2:	9301      	str	r3, [sp, #4]
   279c4:	ab10      	add	r3, sp, #64	; 0x40
   279c6:	9300      	str	r3, [sp, #0]
   279c8:	4620      	mov	r0, r4
   279ca:	230a      	movs	r3, #10
   279cc:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
   279d0:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
   279d4:	f011 fda0 	bl	39518 <cb_notify>
				if (rc != 0) {
   279d8:	2800      	cmp	r0, #0
   279da:	f43f a924 	beq.w	26c26 <http_parser_execute+0x16a>
   279de:	f7ff b892 	b.w	26b06 <http_parser_execute+0x4a>
			if ((parser->flags & F_CHUNKED) &&
   279e2:	f011 0f01 	tst.w	r1, #1
   279e6:	7de3      	ldrb	r3, [r4, #23]
   279e8:	d002      	beq.n	279f0 <http_parser_execute+0xf34>
   279ea:	0609      	lsls	r1, r1, #24
   279ec:	f53f adde 	bmi.w	275ac <http_parser_execute+0xaf0>
			UPDATE_STATE(s_headers_done);
   279f0:	2138      	movs	r1, #56	; 0x38
				((parser->flags & flags) == flags ||
   279f2:	f002 0228 	and.w	r2, r2, #40	; 0x28
   279f6:	2a28      	cmp	r2, #40	; 0x28
			UPDATE_STATE(s_headers_done);
   279f8:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
				((parser->flags & flags) == flags ||
   279fc:	d01d      	beq.n	27a3a <http_parser_execute+0xf7e>
   279fe:	7da2      	ldrb	r2, [r4, #22]
   27a00:	1f57      	subs	r7, r2, #5
   27a02:	427a      	negs	r2, r7
   27a04:	417a      	adcs	r2, r7
			parser->upgrade =
   27a06:	f362 13c7 	bfi	r3, r2, #7, #1
   27a0a:	75e3      	strb	r3, [r4, #23]
			if (settings->on_headers_complete) {
   27a0c:	f8d9 3014 	ldr.w	r3, [r9, #20]
   27a10:	b133      	cbz	r3, 27a20 <http_parser_execute+0xf64>
				switch (settings->on_headers_complete(parser)) {
   27a12:	4620      	mov	r0, r4
   27a14:	4798      	blx	r3
   27a16:	2801      	cmp	r0, #1
   27a18:	d015      	beq.n	27a46 <http_parser_execute+0xf8a>
   27a1a:	2802      	cmp	r0, #2
   27a1c:	d00f      	beq.n	27a3e <http_parser_execute+0xf82>
   27a1e:	b9b8      	cbnz	r0, 27a50 <http_parser_execute+0xf94>
			if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   27a20:	7de3      	ldrb	r3, [r4, #23]
   27a22:	0658      	lsls	r0, r3, #25
   27a24:	f43f a8ff 	beq.w	26c26 <http_parser_execute+0x16a>
	parser->state = CURRENT_STATE();
   27a28:	6823      	ldr	r3, [r4, #0]
   27a2a:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
	*parsed = p - data; /* Error */
   27a2e:	eba6 0608 	sub.w	r6, r6, r8
	parser->state = CURRENT_STATE();
   27a32:	f362 2390 	bfi	r3, r2, #10, #7
   27a36:	6023      	str	r3, [r4, #0]
	*parsed = p - data; /* Error */
   27a38:	e063      	b.n	27b02 <http_parser_execute+0x1046>
				((parser->flags & flags) == flags ||
   27a3a:	2201      	movs	r2, #1
   27a3c:	e7e3      	b.n	27a06 <http_parser_execute+0xf4a>
					parser->upgrade = 1U;
   27a3e:	7de3      	ldrb	r3, [r4, #23]
   27a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   27a44:	75e3      	strb	r3, [r4, #23]
					parser->flags |= F_SKIPBODY;
   27a46:	8823      	ldrh	r3, [r4, #0]
   27a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   27a4c:	8023      	strh	r3, [r4, #0]
					break;
   27a4e:	e7e7      	b.n	27a20 <http_parser_execute+0xf64>
					SET_ERRNO(HPE_CB_headers_complete);
   27a50:	2205      	movs	r2, #5
   27a52:	7de3      	ldrb	r3, [r4, #23]
		SET_ERRNO(HPE_UNKNOWN);
   27a54:	f362 0306 	bfi	r3, r2, #0, #7
   27a58:	75e3      	strb	r3, [r4, #23]
   27a5a:	e7e5      	b.n	27a28 <http_parser_execute+0xf6c>
   27a5c:	19999999 	.word	0x19999999
   27a60:	0003ef5e 	.word	0x0003ef5e
   27a64:	0003f5a7 	.word	0x0003f5a7
   27a68:	0003ef66 	.word	0x0003ef66
   27a6c:	00040257 	.word	0x00040257
   27a70:	0003ef56 	.word	0x0003ef56
			parser->nread = 0U;
   27a74:	2300      	movs	r3, #0
   27a76:	6063      	str	r3, [r4, #4]
			hasBody = parser->flags & F_CHUNKED ||
   27a78:	8823      	ldrh	r3, [r4, #0]
   27a7a:	0759      	lsls	r1, r3, #29
   27a7c:	f3c3 0287 	ubfx	r2, r3, #2, #8
   27a80:	f3c3 0580 	ubfx	r5, r3, #2, #1
   27a84:	d440      	bmi.n	27b08 <http_parser_execute+0x104c>
				  (parser->content_length > 0 &&
   27a86:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   27a8a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   27a8e:	9308      	str	r3, [sp, #32]
   27a90:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
			hasBody = parser->flags & F_CHUNKED ||
   27a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27a98:	f06f 0002 	mvn.w	r0, #2
				  (parser->content_length > 0 &&
   27a9c:	9309      	str	r3, [sp, #36]	; 0x24
			hasBody = parser->flags & F_CHUNKED ||
   27a9e:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
   27aa2:	4559      	cmp	r1, fp
   27aa4:	bf08      	it	eq
   27aa6:	4550      	cmpeq	r0, sl
   27aa8:	bf2c      	ite	cs
   27aaa:	2301      	movcs	r3, #1
   27aac:	2300      	movcc	r3, #0
			if (parser->upgrade &&
   27aae:	f994 1017 	ldrsb.w	r1, [r4, #23]
   27ab2:	2900      	cmp	r1, #0
   27ab4:	da2a      	bge.n	27b0c <http_parser_execute+0x1050>
   27ab6:	7da1      	ldrb	r1, [r4, #22]
   27ab8:	2905      	cmp	r1, #5
   27aba:	d003      	beq.n	27ac4 <http_parser_execute+0x1008>
				(parser->method == HTTP_CONNECT ||
   27abc:	0652      	lsls	r2, r2, #25
   27abe:	d401      	bmi.n	27ac4 <http_parser_execute+0x1008>
				 (parser->flags & F_SKIPBODY) || !hasBody)) {
   27ac0:	2b00      	cmp	r3, #0
   27ac2:	d138      	bne.n	27b36 <http_parser_execute+0x107a>
				UPDATE_STATE(NEW_MESSAGE());
   27ac4:	7823      	ldrb	r3, [r4, #0]
					       p - data + 1);
   27ac6:	eba6 0608 	sub.w	r6, r6, r8
				UPDATE_STATE(NEW_MESSAGE());
   27aca:	f013 0f03 	tst.w	r3, #3
   27ace:	bf0c      	ite	eq
   27ad0:	2312      	moveq	r3, #18
   27ad2:	2304      	movne	r3, #4
					       p - data + 1);
   27ad4:	3601      	adds	r6, #1
				UPDATE_STATE(NEW_MESSAGE());
   27ad6:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
				rc = cb_notify(parser, &p_state,
   27ada:	ab10      	add	r3, sp, #64	; 0x40
   27adc:	9300      	str	r3, [sp, #0]
   27ade:	4620      	mov	r0, r4
   27ae0:	2307      	movs	r3, #7
   27ae2:	f8d9 201c 	ldr.w	r2, [r9, #28]
   27ae6:	9601      	str	r6, [sp, #4]
   27ae8:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
   27aec:	f011 fd14 	bl	39518 <cb_notify>
				if (rc != 0) {
   27af0:	2800      	cmp	r0, #0
   27af2:	f47f a808 	bne.w	26b06 <http_parser_execute+0x4a>
				parser->state = CURRENT_STATE();
   27af6:	6823      	ldr	r3, [r4, #0]
   27af8:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
   27afc:	f362 2390 	bfi	r3, r2, #10, #7
   27b00:	6023      	str	r3, [r4, #0]
	*parsed = p - data; /* Error */
   27b02:	9610      	str	r6, [sp, #64]	; 0x40
	return -HTTP_PARSER_ERRNO(parser);
   27b04:	f7fe bfff 	b.w	26b06 <http_parser_execute+0x4a>
			hasBody = parser->flags & F_CHUNKED ||
   27b08:	2301      	movs	r3, #1
   27b0a:	e7d0      	b.n	27aae <http_parser_execute+0xff2>
			if (parser->flags & F_SKIPBODY) {
   27b0c:	0657      	lsls	r7, r2, #25
   27b0e:	d512      	bpl.n	27b36 <http_parser_execute+0x107a>
				UPDATE_STATE(NEW_MESSAGE());
   27b10:	7823      	ldrb	r3, [r4, #0]
				rc = cb_notify(parser, &p_state,
   27b12:	f8d9 201c 	ldr.w	r2, [r9, #28]
				UPDATE_STATE(NEW_MESSAGE());
   27b16:	f013 0f03 	tst.w	r3, #3
   27b1a:	bf0c      	ite	eq
   27b1c:	2312      	moveq	r3, #18
   27b1e:	2304      	movne	r3, #4
   27b20:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
					       p - data + 1);
   27b24:	eba6 0308 	sub.w	r3, r6, r8
   27b28:	3301      	adds	r3, #1
				rc = cb_notify(parser, &p_state,
   27b2a:	9301      	str	r3, [sp, #4]
   27b2c:	ab10      	add	r3, sp, #64	; 0x40
   27b2e:	9300      	str	r3, [sp, #0]
   27b30:	2307      	movs	r3, #7
   27b32:	f7ff b9a7 	b.w	26e84 <http_parser_execute+0x3c8>
			} else if (parser->flags & F_CHUNKED) {
   27b36:	b115      	cbz	r5, 27b3e <http_parser_execute+0x1082>
				UPDATE_STATE(s_chunk_size_start);
   27b38:	2333      	movs	r3, #51	; 0x33
   27b3a:	f7ff b912 	b.w	26d62 <http_parser_execute+0x2a6>
	enum state p_state = *current_state;
   27b3e:	2338      	movs	r3, #56	; 0x38
   27b40:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	if (parser->content_length == 0U) {
   27b44:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   27b48:	ea52 0103 	orrs.w	r1, r2, r3
   27b4c:	d11c      	bne.n	27b88 <http_parser_execute+0x10cc>
			UPDATE_STATE(NEW_MESSAGE());
   27b4e:	7823      	ldrb	r3, [r4, #0]
			rc = cb_notify(parser, &p_state,
   27b50:	4620      	mov	r0, r4
			UPDATE_STATE(NEW_MESSAGE());
   27b52:	f013 0f03 	tst.w	r3, #3
   27b56:	bf0c      	ite	eq
   27b58:	2312      	moveq	r3, #18
   27b5a:	2304      	movne	r3, #4
   27b5c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
				       p - data + 1);
   27b60:	eba6 0308 	sub.w	r3, r6, r8
   27b64:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   27b66:	9301      	str	r3, [sp, #4]
   27b68:	ab10      	add	r3, sp, #64	; 0x40
   27b6a:	9300      	str	r3, [sp, #0]
   27b6c:	f8d9 201c 	ldr.w	r2, [r9, #28]
   27b70:	2307      	movs	r3, #7
   27b72:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   27b76:	f011 fccf 	bl	39518 <cb_notify>
			if (rc != 0) {
   27b7a:	2800      	cmp	r0, #0
   27b7c:	f47e afc3 	bne.w	26b06 <http_parser_execute+0x4a>
	*current_state = p_state;
   27b80:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   27b84:	f7ff b8ed 	b.w	26d62 <http_parser_execute+0x2a6>
	} else if (parser->content_length != ULLONG_MAX) {
   27b88:	3301      	adds	r3, #1
   27b8a:	bf08      	it	eq
   27b8c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   27b90:	d003      	beq.n	27b9a <http_parser_execute+0x10de>
		UPDATE_STATE(s_body_identity);
   27b92:	233c      	movs	r3, #60	; 0x3c
			UPDATE_STATE(s_body_identity_eof);
   27b94:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
   27b98:	e7f2      	b.n	27b80 <http_parser_execute+0x10c4>
		if (!http_message_needs_eof(parser)) {
   27b9a:	4620      	mov	r0, r4
   27b9c:	f011 fd0d 	bl	395ba <http_message_needs_eof>
   27ba0:	2800      	cmp	r0, #0
   27ba2:	d0d4      	beq.n	27b4e <http_parser_execute+0x1092>
			UPDATE_STATE(s_body_identity_eof);
   27ba4:	233d      	movs	r3, #61	; 0x3d
   27ba6:	e7f5      	b.n	27b94 <http_parser_execute+0x10d8>
			uint64_t to_read = MIN(parser->content_length,
   27ba8:	ebab 0206 	sub.w	r2, fp, r6
   27bac:	17d3      	asrs	r3, r2, #31
   27bae:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
			MARK(body);
   27bb2:	9f14      	ldr	r7, [sp, #80]	; 0x50
			uint64_t to_read = MIN(parser->content_length,
   27bb4:	4299      	cmp	r1, r3
   27bb6:	bf08      	it	eq
   27bb8:	4290      	cmpeq	r0, r2
   27bba:	bf3c      	itt	cc
   27bbc:	4602      	movcc	r2, r0
   27bbe:	460b      	movcc	r3, r1
			MARK(body);
   27bc0:	b907      	cbnz	r7, 27bc4 <http_parser_execute+0x1108>
   27bc2:	9614      	str	r6, [sp, #80]	; 0x50
			parser->content_length -= to_read;
   27bc4:	1a87      	subs	r7, r0, r2
   27bc6:	eb61 0103 	sbc.w	r1, r1, r3
			p += to_read - 1;
   27bca:	3a01      	subs	r2, #1
			parser->content_length -= to_read;
   27bcc:	9704      	str	r7, [sp, #16]
   27bce:	9105      	str	r1, [sp, #20]
   27bd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
			p += to_read - 1;
   27bd4:	4416      	add	r6, r2
			if (parser->content_length == 0U) {
   27bd6:	460b      	mov	r3, r1
   27bd8:	4602      	mov	r2, r0
   27bda:	4313      	orrs	r3, r2
			parser->content_length -= to_read;
   27bdc:	e9c4 0102 	strd	r0, r1, [r4, #8]
			if (parser->content_length == 0U) {
   27be0:	f47f a8c1 	bne.w	26d66 <http_parser_execute+0x2aa>
				UPDATE_STATE(s_message_done);
   27be4:	233e      	movs	r3, #62	; 0x3e
   27be6:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
					     p - body_mark + 1);
   27bea:	9b14      	ldr	r3, [sp, #80]	; 0x50
				rc = cb_data(parser, settings->on_body,
   27bec:	2206      	movs	r2, #6
					     p - body_mark + 1);
   27bee:	1af3      	subs	r3, r6, r3
   27bf0:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_body,
   27bf2:	9303      	str	r3, [sp, #12]
   27bf4:	ab14      	add	r3, sp, #80	; 0x50
   27bf6:	9302      	str	r3, [sp, #8]
					     p - data, &body_mark,
   27bf8:	eba6 0308 	sub.w	r3, r6, r8
				rc = cb_data(parser, settings->on_body,
   27bfc:	9301      	str	r3, [sp, #4]
   27bfe:	ab10      	add	r3, sp, #64	; 0x40
   27c00:	9300      	str	r3, [sp, #0]
   27c02:	f8d9 1018 	ldr.w	r1, [r9, #24]
   27c06:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   27c0a:	e6bf      	b.n	2798c <http_parser_execute+0xed0>
			MARK(body);
   27c0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   27c0e:	b903      	cbnz	r3, 27c12 <http_parser_execute+0x1156>
   27c10:	9614      	str	r6, [sp, #80]	; 0x50
			p = data + len - 1;
   27c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27c14:	1e5e      	subs	r6, r3, #1
   27c16:	4446      	add	r6, r8
			break;
   27c18:	f7ff b8a5 	b.w	26d66 <http_parser_execute+0x2aa>
			UPDATE_STATE(NEW_MESSAGE());
   27c1c:	7823      	ldrb	r3, [r4, #0]
				       p - data + 1);
   27c1e:	eba6 0508 	sub.w	r5, r6, r8
			UPDATE_STATE(NEW_MESSAGE());
   27c22:	f013 0f03 	tst.w	r3, #3
   27c26:	bf0c      	ite	eq
   27c28:	2312      	moveq	r3, #18
   27c2a:	2304      	movne	r3, #4
				       p - data + 1);
   27c2c:	3501      	adds	r5, #1
			UPDATE_STATE(NEW_MESSAGE());
   27c2e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
			rc = cb_notify(parser, &p_state,
   27c32:	ab10      	add	r3, sp, #64	; 0x40
   27c34:	9300      	str	r3, [sp, #0]
   27c36:	4620      	mov	r0, r4
   27c38:	2307      	movs	r3, #7
   27c3a:	f8d9 201c 	ldr.w	r2, [r9, #28]
   27c3e:	9501      	str	r5, [sp, #4]
   27c40:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
   27c44:	f011 fc68 	bl	39518 <cb_notify>
			if (rc != 0) {
   27c48:	2800      	cmp	r0, #0
   27c4a:	f47e af5c 	bne.w	26b06 <http_parser_execute+0x4a>
			if (parser->upgrade) {
   27c4e:	f994 3017 	ldrsb.w	r3, [r4, #23]
   27c52:	2b00      	cmp	r3, #0
   27c54:	f6bf a887 	bge.w	26d66 <http_parser_execute+0x2aa>
				parser->state = CURRENT_STATE();
   27c58:	6823      	ldr	r3, [r4, #0]
   27c5a:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
				*parsed = p - data + 1;
   27c5e:	9510      	str	r5, [sp, #64]	; 0x40
				parser->state = CURRENT_STATE();
   27c60:	f362 2390 	bfi	r3, r2, #10, #7
   27c64:	6023      	str	r3, [r4, #0]
				return 0;
   27c66:	f7fe bf4e 	b.w	26b06 <http_parser_execute+0x4a>
			unhex_val = unhex[(unsigned char)ch];
   27c6a:	4b56      	ldr	r3, [pc, #344]	; (27dc4 <http_parser_execute+0x1308>)
   27c6c:	575a      	ldrsb	r2, [r3, r5]
			if (UNLIKELY(unhex_val == -1)) {
   27c6e:	1c50      	adds	r0, r2, #1
   27c70:	d103      	bne.n	27c7a <http_parser_execute+0x11be>
				SET_ERRNO(HPE_INVALID_CHUNK_SIZE);
   27c72:	221b      	movs	r2, #27
   27c74:	7de3      	ldrb	r3, [r4, #23]
   27c76:	f7fe bf82 	b.w	26b7e <http_parser_execute+0xc2>
			parser->content_length = unhex_val;
   27c7a:	b252      	sxtb	r2, r2
   27c7c:	17d3      	asrs	r3, r2, #31
   27c7e:	e9c4 2302 	strd	r2, r3, [r4, #8]
			UPDATE_STATE(s_chunk_size);
   27c82:	2334      	movs	r3, #52	; 0x34
   27c84:	f7ff b86d 	b.w	26d62 <http_parser_execute+0x2a6>
			if (ch == CR) {
   27c88:	2d0d      	cmp	r5, #13
   27c8a:	d102      	bne.n	27c92 <http_parser_execute+0x11d6>
				UPDATE_STATE(s_chunk_size_almost_done);
   27c8c:	2336      	movs	r3, #54	; 0x36
   27c8e:	f7ff b868 	b.w	26d62 <http_parser_execute+0x2a6>
			unhex_val = unhex[(unsigned char)ch];
   27c92:	4b4c      	ldr	r3, [pc, #304]	; (27dc4 <http_parser_execute+0x1308>)
   27c94:	575a      	ldrsb	r2, [r3, r5]
			if (unhex_val == -1) {
   27c96:	1c51      	adds	r1, r2, #1
   27c98:	d106      	bne.n	27ca8 <http_parser_execute+0x11ec>
				if (ch == ';' || ch == ' ') {
   27c9a:	2d3b      	cmp	r5, #59	; 0x3b
   27c9c:	d001      	beq.n	27ca2 <http_parser_execute+0x11e6>
   27c9e:	2d20      	cmp	r5, #32
   27ca0:	d1e7      	bne.n	27c72 <http_parser_execute+0x11b6>
					UPDATE_STATE(s_chunk_parameters);
   27ca2:	2335      	movs	r3, #53	; 0x35
   27ca4:	f7ff b85d 	b.w	26d62 <http_parser_execute+0x2a6>
			t = parser->content_length;
   27ca8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
			t += unhex_val;
   27cac:	b252      	sxtb	r2, r2
			t *= 16U;
   27cae:	010f      	lsls	r7, r1, #4
   27cb0:	0105      	lsls	r5, r0, #4
			t += unhex_val;
   27cb2:	17d3      	asrs	r3, r2, #31
   27cb4:	1955      	adds	r5, r2, r5
			t *= 16U;
   27cb6:	ea47 7710 	orr.w	r7, r7, r0, lsr #28
			t += unhex_val;
   27cba:	eb43 0707 	adc.w	r7, r3, r7
			if (UNLIKELY(ulong_value < parser->content_length)) {
   27cbe:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
   27cc2:	f06f 0201 	mvn.w	r2, #1
   27cc6:	428b      	cmp	r3, r1
   27cc8:	bf08      	it	eq
   27cca:	4282      	cmpeq	r2, r0
   27ccc:	f4ff ac64 	bcc.w	27598 <http_parser_execute+0xadc>
			parser->content_length = t;
   27cd0:	e9c4 5702 	strd	r5, r7, [r4, #8]
			break;
   27cd4:	f7ff b847 	b.w	26d66 <http_parser_execute+0x2aa>
			if (ch == CR) {
   27cd8:	2d0d      	cmp	r5, #13
   27cda:	f47f a844 	bne.w	26d66 <http_parser_execute+0x2aa>
   27cde:	e7d5      	b.n	27c8c <http_parser_execute+0x11d0>
			parser->nread = 0U;
   27ce0:	2300      	movs	r3, #0
   27ce2:	6063      	str	r3, [r4, #4]
			if (parser->content_length == 0U) {
   27ce4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   27ce8:	4313      	orrs	r3, r2
				parser->flags |= F_TRAILING;
   27cea:	bf09      	itett	eq
   27cec:	8823      	ldrheq	r3, [r4, #0]
				UPDATE_STATE(s_chunk_data);
   27cee:	2339      	movne	r3, #57	; 0x39
				parser->flags |= F_TRAILING;
   27cf0:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   27cf4:	8023      	strheq	r3, [r4, #0]
				UPDATE_STATE(s_header_field_start);
   27cf6:	bf08      	it	eq
   27cf8:	232a      	moveq	r3, #42	; 0x2a
				UPDATE_STATE(s_chunk_data);
   27cfa:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
				       p - data + 1);
   27cfe:	eba6 0308 	sub.w	r3, r6, r8
   27d02:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   27d04:	9301      	str	r3, [sp, #4]
   27d06:	ab10      	add	r3, sp, #64	; 0x40
   27d08:	9300      	str	r3, [sp, #0]
   27d0a:	f8d9 2020 	ldr.w	r2, [r9, #32]
   27d0e:	2309      	movs	r3, #9
   27d10:	f7ff b8b8 	b.w	26e84 <http_parser_execute+0x3c8>
			uint64_t to_read = MIN(parser->content_length,
   27d14:	ebab 0206 	sub.w	r2, fp, r6
   27d18:	17d3      	asrs	r3, r2, #31
   27d1a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
			MARK(body);
   27d1e:	9d14      	ldr	r5, [sp, #80]	; 0x50
			uint64_t to_read = MIN(parser->content_length,
   27d20:	4299      	cmp	r1, r3
   27d22:	bf08      	it	eq
   27d24:	4290      	cmpeq	r0, r2
   27d26:	bf3c      	itt	cc
   27d28:	4602      	movcc	r2, r0
   27d2a:	460b      	movcc	r3, r1
			MARK(body);
   27d2c:	b905      	cbnz	r5, 27d30 <http_parser_execute+0x1274>
   27d2e:	9614      	str	r6, [sp, #80]	; 0x50
			parser->content_length -= to_read;
   27d30:	1a85      	subs	r5, r0, r2
   27d32:	eb61 0103 	sbc.w	r1, r1, r3
			p += to_read - 1;
   27d36:	3a01      	subs	r2, #1
			parser->content_length -= to_read;
   27d38:	9506      	str	r5, [sp, #24]
   27d3a:	9107      	str	r1, [sp, #28]
   27d3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
			p += to_read - 1;
   27d40:	4416      	add	r6, r2
			if (parser->content_length == 0U) {
   27d42:	460b      	mov	r3, r1
   27d44:	4602      	mov	r2, r0
   27d46:	4313      	orrs	r3, r2
			parser->content_length -= to_read;
   27d48:	e9c4 0102 	strd	r0, r1, [r4, #8]
			if (parser->content_length == 0U) {
   27d4c:	f47f a80b 	bne.w	26d66 <http_parser_execute+0x2aa>
				UPDATE_STATE(s_chunk_data_almost_done);
   27d50:	233a      	movs	r3, #58	; 0x3a
   27d52:	f7ff b806 	b.w	26d62 <http_parser_execute+0x2a6>
			UPDATE_STATE(s_chunk_data_done);
   27d56:	233b      	movs	r3, #59	; 0x3b
   27d58:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
				     p - body_mark);
   27d5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   27d5e:	2206      	movs	r2, #6
				     p - body_mark);
   27d60:	1af3      	subs	r3, r6, r3
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   27d62:	9303      	str	r3, [sp, #12]
   27d64:	ab14      	add	r3, sp, #80	; 0x50
   27d66:	9302      	str	r3, [sp, #8]
				     &p_state, parsed, p - data + 1, &body_mark,
   27d68:	eba6 0308 	sub.w	r3, r6, r8
   27d6c:	3301      	adds	r3, #1
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   27d6e:	9301      	str	r3, [sp, #4]
   27d70:	ab10      	add	r3, sp, #64	; 0x40
   27d72:	9300      	str	r3, [sp, #0]
   27d74:	f8d9 1018 	ldr.w	r1, [r9, #24]
   27d78:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   27d7c:	f7ff b8fa 	b.w	26f74 <http_parser_execute+0x4b8>
			parser->nread = 0U;
   27d80:	2300      	movs	r3, #0
   27d82:	6063      	str	r3, [r4, #4]
			UPDATE_STATE(s_chunk_size_start);
   27d84:	2333      	movs	r3, #51	; 0x33
   27d86:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
				       p - data + 1);
   27d8a:	eba6 0308 	sub.w	r3, r6, r8
   27d8e:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   27d90:	9301      	str	r3, [sp, #4]
   27d92:	ab10      	add	r3, sp, #64	; 0x40
   27d94:	9300      	str	r3, [sp, #0]
   27d96:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
   27d9a:	230a      	movs	r3, #10
   27d9c:	f7ff b872 	b.w	26e84 <http_parser_execute+0x3c8>
			SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
   27da0:	221d      	movs	r2, #29
   27da2:	7de3      	ldrb	r3, [r4, #23]
   27da4:	f7fe beeb 	b.w	26b7e <http_parser_execute+0xc2>
			h_state = h_matching_connection_keep_alive;
   27da8:	270f      	movs	r7, #15
   27daa:	e4c8      	b.n	2773e <http_parser_execute+0xc82>
			h_state = h_matching_connection_close;
   27dac:	2710      	movs	r7, #16
   27dae:	e4c6      	b.n	2773e <http_parser_execute+0xc82>
			h_state = h_matching_connection_upgrade;
   27db0:	2711      	movs	r7, #17
   27db2:	e4c4      	b.n	2773e <http_parser_execute+0xc82>
			h_state = h_matching_connection_token;
   27db4:	2712      	movs	r7, #18
   27db6:	e4c2      	b.n	2773e <http_parser_execute+0xc82>
			} else if (ch == matcher[parser->index]) {
   27db8:	2a20      	cmp	r2, #32
   27dba:	f43f a965 	beq.w	27088 <http_parser_execute+0x5cc>
   27dbe:	f7ff b8fa 	b.w	26fb6 <http_parser_execute+0x4fa>
   27dc2:	bf00      	nop
   27dc4:	0003f6a7 	.word	0x0003f6a7

00027dc8 <http_method_str>:
}


const char *http_method_str(enum http_method m)
{
	return ELEM_AT(method_strings, m, "<unknown>");
   27dc8:	2820      	cmp	r0, #32
   27dca:	bf9a      	itte	ls
   27dcc:	4b02      	ldrls	r3, [pc, #8]	; (27dd8 <http_method_str+0x10>)
   27dce:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   27dd2:	4802      	ldrhi	r0, [pc, #8]	; (27ddc <http_method_str+0x14>)
}
   27dd4:	4770      	bx	lr
   27dd6:	bf00      	nop
   27dd8:	0003c7f0 	.word	0x0003c7f0
   27ddc:	0003ef71 	.word	0x0003ef71

00027de0 <parse_url_char>:
 * assumed that the caller cares about (and can detect) the transition between
 * URL and non-URL states by looking for these.
 */
enum state parse_url_char(enum state s, const char ch)
{
	if (ch == ' ' || ch == '\r' || ch == '\n') {
   27de0:	f1a1 030a 	sub.w	r3, r1, #10
   27de4:	b2db      	uxtb	r3, r3
   27de6:	2b16      	cmp	r3, #22
   27de8:	d90a      	bls.n	27e00 <parse_url_char+0x20>
	if (ch == '\t' || ch == '\f') {
		return s_dead;
	}
#endif

	switch (s) {
   27dea:	3814      	subs	r0, #20
   27dec:	280b      	cmp	r0, #11
   27dee:	d80d      	bhi.n	27e0c <parse_url_char+0x2c>
   27df0:	e8df f000 	tbb	[pc, r0]
   27df4:	2b261c0e 	.word	0x2b261c0e
   27df8:	54303232 	.word	0x54303232
   27dfc:	8a786666 	.word	0x8a786666
	if (ch == ' ' || ch == '\r' || ch == '\n') {
   27e00:	4a5e      	ldr	r2, [pc, #376]	; (27f7c <parse_url_char+0x19c>)
   27e02:	fa22 f303 	lsr.w	r3, r2, r3
   27e06:	07da      	lsls	r2, r3, #31
   27e08:	f140 8099 	bpl.w	27f3e <parse_url_char+0x15e>
   27e0c:	2001      	movs	r0, #1

	/* We should never fall out of the switch above unless there's
	 * an error
	 */
	return s_dead;
}
   27e0e:	4770      	bx	lr
		if (ch == '/' || ch == '*') {
   27e10:	292f      	cmp	r1, #47	; 0x2f
   27e12:	f000 808e 	beq.w	27f32 <parse_url_char+0x152>
   27e16:	292a      	cmp	r1, #42	; 0x2a
   27e18:	f000 808b 	beq.w	27f32 <parse_url_char+0x152>
		if (IS_ALPHA(ch)) {
   27e1c:	f041 0120 	orr.w	r1, r1, #32
   27e20:	3961      	subs	r1, #97	; 0x61
   27e22:	2919      	cmp	r1, #25
			return s_req_schema;
   27e24:	bf8c      	ite	hi
   27e26:	2001      	movhi	r0, #1
   27e28:	2015      	movls	r0, #21
   27e2a:	4770      	bx	lr
		if (IS_ALPHA(ch)) {
   27e2c:	f041 0320 	orr.w	r3, r1, #32
   27e30:	3b61      	subs	r3, #97	; 0x61
   27e32:	2b19      	cmp	r3, #25
   27e34:	d977      	bls.n	27f26 <parse_url_char+0x146>
		if (ch == ':') {
   27e36:	293a      	cmp	r1, #58	; 0x3a
			return s_req_schema_slash;
   27e38:	bf14      	ite	ne
   27e3a:	2001      	movne	r0, #1
   27e3c:	2016      	moveq	r0, #22
   27e3e:	4770      	bx	lr
		if (ch == '/') {
   27e40:	292f      	cmp	r1, #47	; 0x2f
			return s_req_schema_slash_slash;
   27e42:	bf14      	ite	ne
   27e44:	2001      	movne	r0, #1
   27e46:	2017      	moveq	r0, #23
   27e48:	4770      	bx	lr
		if (ch == '/') {
   27e4a:	292f      	cmp	r1, #47	; 0x2f
			return s_req_server_start;
   27e4c:	bf14      	ite	ne
   27e4e:	2001      	movne	r0, #1
   27e50:	2018      	moveq	r0, #24
   27e52:	4770      	bx	lr
		if (ch == '@') {
   27e54:	2940      	cmp	r1, #64	; 0x40
   27e56:	d0d9      	beq.n	27e0c <parse_url_char+0x2c>
		if (ch == '/') {
   27e58:	292f      	cmp	r1, #47	; 0x2f
   27e5a:	d06a      	beq.n	27f32 <parse_url_char+0x152>
		if (ch == '?') {
   27e5c:	293f      	cmp	r1, #63	; 0x3f
   27e5e:	d064      	beq.n	27f2a <parse_url_char+0x14a>
		if (ch == '@') {
   27e60:	2940      	cmp	r1, #64	; 0x40
   27e62:	d064      	beq.n	27f2e <parse_url_char+0x14e>
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
   27e64:	f041 0320 	orr.w	r3, r1, #32
   27e68:	3b61      	subs	r3, #97	; 0x61
   27e6a:	2b19      	cmp	r3, #25
   27e6c:	d906      	bls.n	27e7c <parse_url_char+0x9c>
   27e6e:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   27e72:	b2db      	uxtb	r3, r3
   27e74:	2b1c      	cmp	r3, #28
   27e76:	d903      	bls.n	27e80 <parse_url_char+0xa0>
   27e78:	297e      	cmp	r1, #126	; 0x7e
   27e7a:	d106      	bne.n	27e8a <parse_url_char+0xaa>
			return s_req_server;
   27e7c:	2019      	movs	r0, #25
   27e7e:	4770      	bx	lr
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
   27e80:	4a3f      	ldr	r2, [pc, #252]	; (27f80 <parse_url_char+0x1a0>)
   27e82:	fa22 f303 	lsr.w	r3, r2, r3
   27e86:	07db      	lsls	r3, r3, #31
   27e88:	d4f8      	bmi.n	27e7c <parse_url_char+0x9c>
   27e8a:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
   27e8e:	2b5b      	cmp	r3, #91	; 0x5b
   27e90:	d0f4      	beq.n	27e7c <parse_url_char+0x9c>
   27e92:	295d      	cmp	r1, #93	; 0x5d
			return s_req_server;
   27e94:	bf14      	ite	ne
   27e96:	2001      	movne	r0, #1
   27e98:	2019      	moveq	r0, #25
   27e9a:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   27e9c:	4a39      	ldr	r2, [pc, #228]	; (27f84 <parse_url_char+0x1a4>)
   27e9e:	08cb      	lsrs	r3, r1, #3
   27ea0:	5cd2      	ldrb	r2, [r2, r3]
   27ea2:	2301      	movs	r3, #1
   27ea4:	f001 0007 	and.w	r0, r1, #7
   27ea8:	4083      	lsls	r3, r0
   27eaa:	421a      	tst	r2, r3
   27eac:	d141      	bne.n	27f32 <parse_url_char+0x152>
   27eae:	060a      	lsls	r2, r1, #24
   27eb0:	d43f      	bmi.n	27f32 <parse_url_char+0x152>
		switch (ch) {
   27eb2:	2923      	cmp	r1, #35	; 0x23
   27eb4:	d041      	beq.n	27f3a <parse_url_char+0x15a>
   27eb6:	293f      	cmp	r1, #63	; 0x3f
			return s_req_query_string_start;
   27eb8:	bf14      	ite	ne
   27eba:	2001      	movne	r0, #1
   27ebc:	201c      	moveq	r0, #28
   27ebe:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   27ec0:	4a30      	ldr	r2, [pc, #192]	; (27f84 <parse_url_char+0x1a4>)
   27ec2:	08cb      	lsrs	r3, r1, #3
   27ec4:	5cd2      	ldrb	r2, [r2, r3]
   27ec6:	2301      	movs	r3, #1
   27ec8:	f001 0007 	and.w	r0, r1, #7
   27ecc:	4083      	lsls	r3, r0
   27ece:	421a      	tst	r2, r3
   27ed0:	d131      	bne.n	27f36 <parse_url_char+0x156>
   27ed2:	060b      	lsls	r3, r1, #24
   27ed4:	d42f      	bmi.n	27f36 <parse_url_char+0x156>
		switch (ch) {
   27ed6:	2923      	cmp	r1, #35	; 0x23
   27ed8:	d02f      	beq.n	27f3a <parse_url_char+0x15a>
   27eda:	293f      	cmp	r1, #63	; 0x3f
			return s_req_query_string;
   27edc:	bf14      	ite	ne
   27ede:	2001      	movne	r0, #1
   27ee0:	201d      	moveq	r0, #29
   27ee2:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   27ee4:	4a27      	ldr	r2, [pc, #156]	; (27f84 <parse_url_char+0x1a4>)
   27ee6:	08cb      	lsrs	r3, r1, #3
   27ee8:	5cd2      	ldrb	r2, [r2, r3]
   27eea:	2301      	movs	r3, #1
   27eec:	f001 0007 	and.w	r0, r1, #7
   27ef0:	4083      	lsls	r3, r0
   27ef2:	421a      	tst	r2, r3
   27ef4:	d115      	bne.n	27f22 <parse_url_char+0x142>
   27ef6:	060a      	lsls	r2, r1, #24
   27ef8:	d413      	bmi.n	27f22 <parse_url_char+0x142>
		switch (ch) {
   27efa:	2923      	cmp	r1, #35	; 0x23
   27efc:	d01d      	beq.n	27f3a <parse_url_char+0x15a>
   27efe:	293f      	cmp	r1, #63	; 0x3f
			return s_req_fragment;
   27f00:	bf14      	ite	ne
   27f02:	2001      	movne	r0, #1
   27f04:	201f      	moveq	r0, #31
   27f06:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   27f08:	4a1e      	ldr	r2, [pc, #120]	; (27f84 <parse_url_char+0x1a4>)
   27f0a:	08cb      	lsrs	r3, r1, #3
   27f0c:	5cd2      	ldrb	r2, [r2, r3]
   27f0e:	2301      	movs	r3, #1
   27f10:	f001 0007 	and.w	r0, r1, #7
   27f14:	4083      	lsls	r3, r0
   27f16:	421a      	tst	r2, r3
   27f18:	d103      	bne.n	27f22 <parse_url_char+0x142>
   27f1a:	060b      	lsls	r3, r1, #24
   27f1c:	d401      	bmi.n	27f22 <parse_url_char+0x142>
		switch (ch) {
   27f1e:	2923      	cmp	r1, #35	; 0x23
   27f20:	d1ed      	bne.n	27efe <parse_url_char+0x11e>
			return s_req_fragment;
   27f22:	201f      	movs	r0, #31
   27f24:	4770      	bx	lr
			return s_req_schema;
   27f26:	2015      	movs	r0, #21
   27f28:	4770      	bx	lr
			return s_req_query_string_start;
   27f2a:	201c      	movs	r0, #28
   27f2c:	4770      	bx	lr
			return s_req_server_with_at;
   27f2e:	201a      	movs	r0, #26
   27f30:	4770      	bx	lr
			return s_req_path;
   27f32:	201b      	movs	r0, #27
   27f34:	4770      	bx	lr
			return s_req_query_string;
   27f36:	201d      	movs	r0, #29
   27f38:	4770      	bx	lr
			return s_req_fragment_start;
   27f3a:	201e      	movs	r0, #30
   27f3c:	4770      	bx	lr
	switch (s) {
   27f3e:	3814      	subs	r0, #20
   27f40:	280b      	cmp	r0, #11
   27f42:	f63f af63 	bhi.w	27e0c <parse_url_char+0x2c>
   27f46:	a301      	add	r3, pc, #4	; (adr r3, 27f4c <parse_url_char+0x16c>)
   27f48:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   27f4c:	00027e1d 	.word	0x00027e1d
   27f50:	00027e2d 	.word	0x00027e2d
   27f54:	00027e41 	.word	0x00027e41
   27f58:	00027e4b 	.word	0x00027e4b
   27f5c:	00027e59 	.word	0x00027e59
   27f60:	00027e59 	.word	0x00027e59
   27f64:	00027e55 	.word	0x00027e55
   27f68:	00027e9d 	.word	0x00027e9d
   27f6c:	00027ec1 	.word	0x00027ec1
   27f70:	00027ec1 	.word	0x00027ec1
   27f74:	00027ee5 	.word	0x00027ee5
   27f78:	00027f09 	.word	0x00027f09
   27f7c:	00400009 	.word	0x00400009
   27f80:	17ffbff9 	.word	0x17ffbff9
   27f84:	0003f7a7 	.word	0x0003f7a7

00027f88 <http_parser_parse_url>:
}

int
http_parser_parse_url(const char *buf, size_t buflen, int is_connect,
		      struct http_parser_url *u)
{
   27f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27f8c:	4605      	mov	r5, r0
	enum http_parser_url_fields uf;
	int found_at = 0;
	const char *p;
	enum state s;

	u->port = u->field_set = 0U;
   27f8e:	2700      	movs	r7, #0
	s = is_connect ? s_req_server_start : s_req_spaces_before_url;
   27f90:	1e16      	subs	r6, r2, #0
{
   27f92:	461c      	mov	r4, r3
	s = is_connect ? s_req_server_start : s_req_spaces_before_url;
   27f94:	bf14      	ite	ne
   27f96:	2018      	movne	r0, #24
   27f98:	2014      	moveq	r0, #20
   27f9a:	46a8      	mov	r8, r5
		}

		u->field_data[uf].off = p - buf;
		u->field_data[uf].len = 1U;

		u->field_set |= (1 << uf);
   27f9c:	f04f 0b07 	mov.w	fp, #7
	u->port = u->field_set = 0U;
   27fa0:	801f      	strh	r7, [r3, #0]
   27fa2:	805f      	strh	r7, [r3, #2]
	for (p = buf; p < buf + buflen; p++) {
   27fa4:	eb05 0a01 	add.w	sl, r5, r1
   27fa8:	45d0      	cmp	r8, sl
   27faa:	46c1      	mov	r9, r8
   27fac:	d30a      	bcc.n	27fc4 <http_parser_parse_url+0x3c>
		old_uf = uf;
	}

	/* host must be present if there is a schema */
	/* parsing http:///toto will fail */
	if ((u->field_set & (1 << UF_SCHEMA)) &&
   27fae:	8822      	ldrh	r2, [r4, #0]
   27fb0:	f002 0302 	and.w	r3, r2, #2
   27fb4:	07d2      	lsls	r2, r2, #31
   27fb6:	d54b      	bpl.n	28050 <http_parser_parse_url+0xc8>
   27fb8:	2b00      	cmp	r3, #0
   27fba:	d14a      	bne.n	28052 <http_parser_parse_url+0xca>
			(u->field_set & (1 << UF_HOST)) == 0U) {
		return 1;
   27fbc:	2601      	movs	r6, #1

		u->port = (uint16_t) v;
	}

	return 0;
}
   27fbe:	4630      	mov	r0, r6
   27fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		s = parse_url_char(s, *p);
   27fc4:	f899 1000 	ldrb.w	r1, [r9]
   27fc8:	f7ff ff0a 	bl	27de0 <parse_url_char>
		switch (s) {
   27fcc:	f1a0 0315 	sub.w	r3, r0, #21
   27fd0:	2201      	movs	r2, #1
   27fd2:	f108 0801 	add.w	r8, r8, #1
   27fd6:	2b0a      	cmp	r3, #10
   27fd8:	d8f0      	bhi.n	27fbc <http_parser_parse_url+0x34>
   27fda:	a101      	add	r1, pc, #4	; (adr r1, 27fe0 <http_parser_parse_url+0x58>)
   27fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   27fe0:	0002802d 	.word	0x0002802d
   27fe4:	00027fa9 	.word	0x00027fa9
   27fe8:	00027fa9 	.word	0x00027fa9
   27fec:	00027fa9 	.word	0x00027fa9
   27ff0:	0002800f 	.word	0x0002800f
   27ff4:	0002800d 	.word	0x0002800d
   27ff8:	00028021 	.word	0x00028021
   27ffc:	00027fa9 	.word	0x00027fa9
   28000:	00028025 	.word	0x00028025
   28004:	00027fa9 	.word	0x00027fa9
   28008:	00028029 	.word	0x00028029
			found_at = 1;
   2800c:	2701      	movs	r7, #1
			uf = UF_HOST;
   2800e:	2301      	movs	r3, #1
		if (uf == old_uf) {
   28010:	459b      	cmp	fp, r3
   28012:	d10d      	bne.n	28030 <http_parser_parse_url+0xa8>
			u->field_data[uf].len++;
   28014:	eb04 018b 	add.w	r1, r4, fp, lsl #2
   28018:	88cb      	ldrh	r3, [r1, #6]
   2801a:	3301      	adds	r3, #1
   2801c:	80cb      	strh	r3, [r1, #6]
			continue;
   2801e:	e7c3      	b.n	27fa8 <http_parser_parse_url+0x20>
			uf = UF_PATH;
   28020:	2303      	movs	r3, #3
			break;
   28022:	e7f5      	b.n	28010 <http_parser_parse_url+0x88>
			uf = UF_QUERY;
   28024:	2304      	movs	r3, #4
			break;
   28026:	e7f3      	b.n	28010 <http_parser_parse_url+0x88>
			uf = UF_FRAGMENT;
   28028:	2305      	movs	r3, #5
			break;
   2802a:	e7f1      	b.n	28010 <http_parser_parse_url+0x88>
		s = parse_url_char(s, *p);
   2802c:	2300      	movs	r3, #0
   2802e:	e7ef      	b.n	28010 <http_parser_parse_url+0x88>
		u->field_data[uf].off = p - buf;
   28030:	eb04 0183 	add.w	r1, r4, r3, lsl #2
   28034:	eba9 0905 	sub.w	r9, r9, r5
   28038:	f8a1 9004 	strh.w	r9, [r1, #4]
		u->field_data[uf].len = 1U;
   2803c:	80ca      	strh	r2, [r1, #6]
		u->field_set |= (1 << uf);
   2803e:	f8b4 c000 	ldrh.w	ip, [r4]
   28042:	fa02 f103 	lsl.w	r1, r2, r3
   28046:	ea41 010c 	orr.w	r1, r1, ip
   2804a:	469b      	mov	fp, r3
   2804c:	8021      	strh	r1, [r4, #0]
	for (p = buf; p < buf + buflen; p++) {
   2804e:	e7ab      	b.n	27fa8 <http_parser_parse_url+0x20>
	if (u->field_set & (1 << UF_HOST)) {
   28050:	b303      	cbz	r3, 28094 <http_parser_parse_url+0x10c>
	u->field_data[UF_HOST].len = 0U;
   28052:	f04f 0e00 	mov.w	lr, #0
	s = found_at ? s_http_userinfo_start : s_http_host_start;
   28056:	4577      	cmp	r7, lr
   28058:	bf14      	ite	ne
   2805a:	2102      	movne	r1, #2
   2805c:	2104      	moveq	r1, #4
	buflen = u->field_data[UF_HOST].off + u->field_data[UF_HOST].len;
   2805e:	8922      	ldrh	r2, [r4, #8]
   28060:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   28064:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 2822c <http_parser_parse_url+0x2a4>
	buflen = u->field_data[UF_HOST].off + u->field_data[UF_HOST].len;
   28068:	4494      	add	ip, r2
		if (IS_USERINFO_CHAR(ch)) {
   2806a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 28230 <http_parser_parse_url+0x2a8>
	u->field_data[UF_HOST].len = 0U;
   2806e:	f8a4 e00a 	strh.w	lr, [r4, #10]
	for (p = buf + u->field_data[UF_HOST].off; p < buf + buflen; p++) {
   28072:	442a      	add	r2, r5
   28074:	44ac      	add	ip, r5
   28076:	4562      	cmp	r2, ip
   28078:	4610      	mov	r0, r2
   2807a:	f1a1 0702 	sub.w	r7, r1, #2
   2807e:	d31b      	bcc.n	280b8 <http_parser_parse_url+0x130>
	switch (s) {
   28080:	b2ff      	uxtb	r7, r7
   28082:	2f09      	cmp	r7, #9
   28084:	d806      	bhi.n	28094 <http_parser_parse_url+0x10c>
   28086:	2301      	movs	r3, #1
   28088:	fa03 f707 	lsl.w	r7, r3, r7
   2808c:	f240 33af 	movw	r3, #943	; 0x3af
   28090:	421f      	tst	r7, r3
   28092:	d193      	bne.n	27fbc <http_parser_parse_url+0x34>
	if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {
   28094:	8823      	ldrh	r3, [r4, #0]
   28096:	2e00      	cmp	r6, #0
   28098:	f000 80ba 	beq.w	28210 <http_parser_parse_url+0x288>
   2809c:	2b06      	cmp	r3, #6
   2809e:	d18d      	bne.n	27fbc <http_parser_parse_url+0x34>
		v = strtoul(buf + u->field_data[UF_PORT].off, NULL, 10);
   280a0:	89a0      	ldrh	r0, [r4, #12]
   280a2:	220a      	movs	r2, #10
   280a4:	2100      	movs	r1, #0
   280a6:	4428      	add	r0, r5
   280a8:	f00f fa30 	bl	3750c <strtoul>
		if (v > 0xffff) {
   280ac:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   280b0:	d284      	bcs.n	27fbc <http_parser_parse_url+0x34>
	return 0;
   280b2:	2600      	movs	r6, #0
		u->port = (uint16_t) v;
   280b4:	8060      	strh	r0, [r4, #2]
   280b6:	e782      	b.n	27fbe <http_parser_parse_url+0x36>
		enum http_host_state new_s = http_parse_host_char(s, *p);
   280b8:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (s) {
   280bc:	2f0a      	cmp	r7, #10
   280be:	f63f af7d 	bhi.w	27fbc <http_parser_parse_url+0x34>
   280c2:	e8df f007 	tbb	[pc, r7]
   280c6:	0606      	.short	0x0606
   280c8:	5a465c2d 	.word	0x5a465c2d
   280cc:	8c727455 	.word	0x8c727455
   280d0:	8c          	.byte	0x8c
   280d1:	00          	.byte	0x00
		if (ch == '@') {
   280d2:	2b40      	cmp	r3, #64	; 0x40
   280d4:	f000 8096 	beq.w	28204 <http_parser_parse_url+0x27c>
		if (IS_USERINFO_CHAR(ch)) {
   280d8:	f043 0720 	orr.w	r7, r3, #32
   280dc:	3f61      	subs	r7, #97	; 0x61
   280de:	2f19      	cmp	r7, #25
   280e0:	d909      	bls.n	280f6 <http_parser_parse_url+0x16e>
   280e2:	2b5f      	cmp	r3, #95	; 0x5f
   280e4:	d007      	beq.n	280f6 <http_parser_parse_url+0x16e>
   280e6:	f1a3 0721 	sub.w	r7, r3, #33	; 0x21
   280ea:	b2ff      	uxtb	r7, r7
   280ec:	2f1c      	cmp	r7, #28
   280ee:	d911      	bls.n	28114 <http_parser_parse_url+0x18c>
   280f0:	2b7e      	cmp	r3, #126	; 0x7e
   280f2:	f47f af63 	bne.w	27fbc <http_parser_parse_url+0x34>
			if (s != s_http_userinfo) {
   280f6:	2903      	cmp	r1, #3
   280f8:	d007      	beq.n	2810a <http_parser_parse_url+0x182>
				u->field_set |= (1 << UF_USERINFO);
   280fa:	8823      	ldrh	r3, [r4, #0]
				u->field_data[UF_USERINFO].off = p - buf;
   280fc:	1b40      	subs	r0, r0, r5
				u->field_set |= (1 << UF_USERINFO);
   280fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
				u->field_data[UF_USERINFO].off = p - buf;
   28102:	83a0      	strh	r0, [r4, #28]
				u->field_data[UF_USERINFO].len = 0U;
   28104:	f8a4 e01e 	strh.w	lr, [r4, #30]
				u->field_set |= (1 << UF_USERINFO);
   28108:	8023      	strh	r3, [r4, #0]
			u->field_data[UF_USERINFO].len++;
   2810a:	8be3      	ldrh	r3, [r4, #30]
			return s_http_userinfo;
   2810c:	2103      	movs	r1, #3
			u->field_data[UF_USERINFO].len++;
   2810e:	3301      	adds	r3, #1
   28110:	83e3      	strh	r3, [r4, #30]
			break;
   28112:	e7b0      	b.n	28076 <http_parser_parse_url+0xee>
		if (IS_USERINFO_CHAR(ch)) {
   28114:	fa29 f707 	lsr.w	r7, r9, r7
   28118:	07ff      	lsls	r7, r7, #31
   2811a:	f57f af4f 	bpl.w	27fbc <http_parser_parse_url+0x34>
   2811e:	e7ea      	b.n	280f6 <http_parser_parse_url+0x16e>
		if (ch == '[') {
   28120:	2b5b      	cmp	r3, #91	; 0x5b
   28122:	d071      	beq.n	28208 <http_parser_parse_url+0x280>
		if (IS_HOST_CHAR(ch)) {
   28124:	f043 0120 	orr.w	r1, r3, #32
   28128:	3961      	subs	r1, #97	; 0x61
   2812a:	2919      	cmp	r1, #25
   2812c:	d90a      	bls.n	28144 <http_parser_parse_url+0x1bc>
   2812e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   28132:	2909      	cmp	r1, #9
   28134:	d906      	bls.n	28144 <http_parser_parse_url+0x1bc>
   28136:	f1a3 012d 	sub.w	r1, r3, #45	; 0x2d
   2813a:	2901      	cmp	r1, #1
   2813c:	d902      	bls.n	28144 <http_parser_parse_url+0x1bc>
   2813e:	2b5f      	cmp	r3, #95	; 0x5f
   28140:	f47f af3c 	bne.w	27fbc <http_parser_parse_url+0x34>
				u->field_data[UF_HOST].off = p - buf;
   28144:	1b40      	subs	r0, r0, r5
   28146:	8120      	strh	r0, [r4, #8]
			u->field_data[UF_HOST].len++;
   28148:	8963      	ldrh	r3, [r4, #10]
			break;
   2814a:	2106      	movs	r1, #6
			u->field_data[UF_HOST].len++;
   2814c:	3301      	adds	r3, #1
   2814e:	8163      	strh	r3, [r4, #10]
			break;
   28150:	e791      	b.n	28076 <http_parser_parse_url+0xee>
		if (IS_HOST_CHAR(ch)) {
   28152:	f043 0120 	orr.w	r1, r3, #32
   28156:	3961      	subs	r1, #97	; 0x61
   28158:	2919      	cmp	r1, #25
   2815a:	d9f5      	bls.n	28148 <http_parser_parse_url+0x1c0>
   2815c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   28160:	2909      	cmp	r1, #9
   28162:	d9f1      	bls.n	28148 <http_parser_parse_url+0x1c0>
   28164:	f1a3 012d 	sub.w	r1, r3, #45	; 0x2d
   28168:	2901      	cmp	r1, #1
   2816a:	d9ed      	bls.n	28148 <http_parser_parse_url+0x1c0>
   2816c:	2b5f      	cmp	r3, #95	; 0x5f
   2816e:	d0eb      	beq.n	28148 <http_parser_parse_url+0x1c0>
		if (ch == ':') {
   28170:	2b3a      	cmp	r3, #58	; 0x3a
   28172:	f47f af23 	bne.w	27fbc <http_parser_parse_url+0x34>
			return s_http_host_port_start;
   28176:	210b      	movs	r1, #11
   28178:	e77d      	b.n	28076 <http_parser_parse_url+0xee>
		if (ch == ']') {
   2817a:	2b5d      	cmp	r3, #93	; 0x5d
   2817c:	d046      	beq.n	2820c <http_parser_parse_url+0x284>
		if (IS_HEX(ch) || ch == ':' || ch == '.') {
   2817e:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
   28182:	2f0a      	cmp	r7, #10
   28184:	d948      	bls.n	28218 <http_parser_parse_url+0x290>
   28186:	f043 0720 	orr.w	r7, r3, #32
   2818a:	3f61      	subs	r7, #97	; 0x61
   2818c:	2f05      	cmp	r7, #5
   2818e:	d943      	bls.n	28218 <http_parser_parse_url+0x290>
   28190:	2b2e      	cmp	r3, #46	; 0x2e
   28192:	d041      	beq.n	28218 <http_parser_parse_url+0x290>
		if (s == s_http_host_v6 && ch == '%') {
   28194:	2907      	cmp	r1, #7
   28196:	f47f af11 	bne.w	27fbc <http_parser_parse_url+0x34>
   2819a:	2b25      	cmp	r3, #37	; 0x25
   2819c:	f47f af0e 	bne.w	27fbc <http_parser_parse_url+0x34>
			return s_http_host_v6_zone_start;
   281a0:	2109      	movs	r1, #9
			u->field_data[UF_HOST].len++;
   281a2:	8963      	ldrh	r3, [r4, #10]
   281a4:	3301      	adds	r3, #1
   281a6:	8163      	strh	r3, [r4, #10]
			break;
   281a8:	e765      	b.n	28076 <http_parser_parse_url+0xee>
		if (ch == ']') {
   281aa:	2b5d      	cmp	r3, #93	; 0x5d
   281ac:	d02e      	beq.n	2820c <http_parser_parse_url+0x284>
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   281ae:	f043 0120 	orr.w	r1, r3, #32
   281b2:	3961      	subs	r1, #97	; 0x61
   281b4:	2919      	cmp	r1, #25
   281b6:	d906      	bls.n	281c6 <http_parser_parse_url+0x23e>
   281b8:	f1a3 0125 	sub.w	r1, r3, #37	; 0x25
   281bc:	b2c9      	uxtb	r1, r1
   281be:	2914      	cmp	r1, #20
   281c0:	d903      	bls.n	281ca <http_parser_parse_url+0x242>
   281c2:	2b5f      	cmp	r3, #95	; 0x5f
   281c4:	d107      	bne.n	281d6 <http_parser_parse_url+0x24e>
			return s_http_host_v6_zone;
   281c6:	210a      	movs	r1, #10
   281c8:	e7eb      	b.n	281a2 <http_parser_parse_url+0x21a>
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   281ca:	fa28 f101 	lsr.w	r1, r8, r1
   281ce:	07c9      	lsls	r1, r1, #31
   281d0:	f57f aef4 	bpl.w	27fbc <http_parser_parse_url+0x34>
   281d4:	e7f7      	b.n	281c6 <http_parser_parse_url+0x23e>
				ch == '_' ||
   281d6:	2b7e      	cmp	r3, #126	; 0x7e
   281d8:	f47f aef0 	bne.w	27fbc <http_parser_parse_url+0x34>
   281dc:	e7f3      	b.n	281c6 <http_parser_parse_url+0x23e>
		if (IS_NUM(ch)) {
   281de:	3b30      	subs	r3, #48	; 0x30
   281e0:	2b09      	cmp	r3, #9
   281e2:	f63f aeeb 	bhi.w	27fbc <http_parser_parse_url+0x34>
			if (s != s_http_host_port) {
   281e6:	290c      	cmp	r1, #12
   281e8:	d007      	beq.n	281fa <http_parser_parse_url+0x272>
				u->field_set |= (1 << UF_PORT);
   281ea:	8823      	ldrh	r3, [r4, #0]
				u->field_data[UF_PORT].off = p - buf;
   281ec:	1b40      	subs	r0, r0, r5
				u->field_set |= (1 << UF_PORT);
   281ee:	f043 0304 	orr.w	r3, r3, #4
				u->field_data[UF_PORT].off = p - buf;
   281f2:	81a0      	strh	r0, [r4, #12]
				u->field_data[UF_PORT].len = 0U;
   281f4:	f8a4 e00e 	strh.w	lr, [r4, #14]
				u->field_set |= (1 << UF_PORT);
   281f8:	8023      	strh	r3, [r4, #0]
			u->field_data[UF_PORT].len++;
   281fa:	89e3      	ldrh	r3, [r4, #14]
			return s_http_host_port;
   281fc:	210c      	movs	r1, #12
			u->field_data[UF_PORT].len++;
   281fe:	3301      	adds	r3, #1
   28200:	81e3      	strh	r3, [r4, #14]
			break;
   28202:	e738      	b.n	28076 <http_parser_parse_url+0xee>
			return s_http_host_start;
   28204:	2104      	movs	r1, #4
   28206:	e736      	b.n	28076 <http_parser_parse_url+0xee>
			return s_http_host_v6_start;
   28208:	2105      	movs	r1, #5
   2820a:	e734      	b.n	28076 <http_parser_parse_url+0xee>
			return s_http_host_v6_end;
   2820c:	2108      	movs	r1, #8
   2820e:	e732      	b.n	28076 <http_parser_parse_url+0xee>
	if (u->field_set & (1 << UF_PORT)) {
   28210:	075b      	lsls	r3, r3, #29
   28212:	f57f aed4 	bpl.w	27fbe <http_parser_parse_url+0x36>
   28216:	e743      	b.n	280a0 <http_parser_parse_url+0x118>
			if (s != s_http_host_v6) {
   28218:	2907      	cmp	r1, #7
   2821a:	d001      	beq.n	28220 <http_parser_parse_url+0x298>
				u->field_data[UF_HOST].off = p - buf;
   2821c:	1b40      	subs	r0, r0, r5
   2821e:	8120      	strh	r0, [r4, #8]
			u->field_data[UF_HOST].len++;
   28220:	8963      	ldrh	r3, [r4, #10]
			break;
   28222:	2107      	movs	r1, #7
			u->field_data[UF_HOST].len++;
   28224:	3301      	adds	r3, #1
   28226:	8163      	strh	r3, [r4, #10]
			break;
   28228:	e725      	b.n	28076 <http_parser_parse_url+0xee>
   2822a:	bf00      	nop
   2822c:	001ffb01 	.word	0x001ffb01
   28230:	17ffbff9 	.word	0x17ffbff9

00028234 <on_header_field>:
	return 0;
}

static int on_header_field(struct http_parser *parser, const char *at,
			   size_t length)
{
   28234:	b570      	push	{r4, r5, r6, lr}
   28236:	4604      	mov	r4, r0
						struct http_request,
						internal.parser);
	const char *content_len = "Content-Length";
	uint16_t len;

	len = strlen(content_len);
   28238:	480e      	ldr	r0, [pc, #56]	; (28274 <on_header_field+0x40>)
{
   2823a:	4616      	mov	r6, r2
   2823c:	460d      	mov	r5, r1
	len = strlen(content_len);
   2823e:	f7f4 ff17 	bl	1d070 <strlen>
	if (length >= len && strncasecmp(at, content_len, len) == 0) {
   28242:	b282      	uxth	r2, r0
   28244:	42b2      	cmp	r2, r6
   28246:	d80a      	bhi.n	2825e <on_header_field+0x2a>
   28248:	4628      	mov	r0, r5
   2824a:	490a      	ldr	r1, [pc, #40]	; (28274 <on_header_field+0x40>)
   2824c:	f00f f840 	bl	372d0 <strncasecmp>
   28250:	b928      	cbnz	r0, 2825e <on_header_field+0x2a>
		req->internal.response.cl_present = true;
   28252:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   28256:	f043 0301 	orr.w	r3, r3, #1
   2825a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	}

	print_header_field(length, at);

	if (req->internal.response.http_cb &&
   2825e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   28260:	b12b      	cbz	r3, 2826e <on_header_field+0x3a>
	    req->internal.response.http_cb->on_header_field) {
   28262:	68db      	ldr	r3, [r3, #12]
	if (req->internal.response.http_cb &&
   28264:	b11b      	cbz	r3, 2826e <on_header_field+0x3a>
		req->internal.response.http_cb->on_header_field(parser, at,
   28266:	4632      	mov	r2, r6
   28268:	4629      	mov	r1, r5
   2826a:	4620      	mov	r0, r4
   2826c:	4798      	blx	r3
								length);
	}

	return 0;
}
   2826e:	2000      	movs	r0, #0
   28270:	bd70      	pop	{r4, r5, r6, pc}
   28272:	bf00      	nop
   28274:	0003f7c7 	.word	0x0003f7c7

00028278 <http_client_req>:
	(void)close(data->sock);
}

int http_client_req(int sock, struct http_request *req,
		    int32_t timeout, void *user_data)
{
   28278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2827c:	460d      	mov	r5, r1
	/* Utilize the network usage by sending data in bigger blocks */
	char send_buf[MAX_SEND_BUF_LEN];
	const size_t send_buf_max_len = sizeof(send_buf);
	size_t send_buf_pos = 0;
   2827e:	2100      	movs	r1, #0
{
   28280:	b0c1      	sub	sp, #260	; 0x104
	int total_sent = 0;
	int ret, total_recv, i;
	const char *method;

	if (sock < 0 || req == NULL || req->response == NULL ||
   28282:	1e06      	subs	r6, r0, #0
{
   28284:	4614      	mov	r4, r2
   28286:	469a      	mov	sl, r3
	size_t send_buf_pos = 0;
   28288:	910d      	str	r1, [sp, #52]	; 0x34
	if (sock < 0 || req == NULL || req->response == NULL ||
   2828a:	f2c0 81ec 	blt.w	28666 <http_client_req+0x3ee>
   2828e:	2d00      	cmp	r5, #0
   28290:	f000 81e9 	beq.w	28666 <http_client_req+0x3ee>
   28294:	f8d5 90d4 	ldr.w	r9, [r5, #212]	; 0xd4
   28298:	f1b9 0f00 	cmp.w	r9, #0
   2829c:	f000 81e3 	beq.w	28666 <http_client_req+0x3ee>
	    req->recv_buf == NULL || req->recv_buf_len == 0) {
   282a0:	f8d5 80dc 	ldr.w	r8, [r5, #220]	; 0xdc
	if (sock < 0 || req == NULL || req->response == NULL ||
   282a4:	f1b8 0f00 	cmp.w	r8, #0
   282a8:	f000 81dd 	beq.w	28666 <http_client_req+0x3ee>
	    req->recv_buf == NULL || req->recv_buf_len == 0) {
   282ac:	f8d5 70e0 	ldr.w	r7, [r5, #224]	; 0xe0
   282b0:	2f00      	cmp	r7, #0
   282b2:	f000 81d8 	beq.w	28666 <http_client_req+0x3ee>
__ssp_bos_icheck3(memset, void *, int)
   282b6:	223c      	movs	r2, #60	; 0x3c
   282b8:	f105 0080 	add.w	r0, r5, #128	; 0x80
   282bc:	f013 f899 	bl	3b3f2 <memset>
		return -EINVAL;
	}

	memset(&req->internal.response, 0, sizeof(req->internal.response));

	req->internal.response.http_cb = req->http_cb;
   282c0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	req->internal.response.cb = req->response;
	req->internal.response.recv_buf = req->recv_buf;
	req->internal.response.recv_buf_len = req->recv_buf_len;
	req->internal.user_data = user_data;
	req->internal.sock = sock;
	req->internal.timeout = SYS_TIMEOUT_MS(timeout);
   282c4:	1c62      	adds	r2, r4, #1
	req->internal.response.cb = req->response;
   282c6:	e9c5 391e 	strd	r3, r9, [r5, #120]	; 0x78
	req->internal.response.recv_buf_len = req->recv_buf_len;
   282ca:	e9c5 8721 	strd	r8, r7, [r5, #132]	; 0x84
	req->internal.sock = sock;
   282ce:	e9c5 a62f 	strd	sl, r6, [r5, #188]	; 0xbc
	req->internal.timeout = SYS_TIMEOUT_MS(timeout);
   282d2:	f000 8096 	beq.w	28402 <http_client_req+0x18a>
   282d6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   282da:	f240 30e7 	movw	r0, #999	; 0x3e7
   282de:	2100      	movs	r1, #0
   282e0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   282e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   282e8:	2300      	movs	r3, #0
   282ea:	fbc7 0104 	smlal	r0, r1, r7, r4
   282ee:	f7f4 fa63 	bl	1c7b8 <__aeabi_uldivmod>
   282f2:	e9c5 0132 	strd	r0, r1, [r5, #200]	; 0xc8

	method = http_method_str(req->method);
   282f6:	f895 00d0 	ldrb.w	r0, [r5, #208]	; 0xd0
   282fa:	f7ff fd65 	bl	27dc8 <http_method_str>

	ret = http_send_data(sock, send_buf, send_buf_max_len, &send_buf_pos,
   282fe:	2400      	movs	r4, #0
   28300:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
   28304:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
   28308:	9304      	str	r3, [sp, #16]
   2830a:	f8df 8320 	ldr.w	r8, [pc, #800]	; 2862c <http_client_req+0x3b4>
   2830e:	4bb5      	ldr	r3, [pc, #724]	; (285e4 <http_client_req+0x36c>)
   28310:	9000      	str	r0, [sp, #0]
   28312:	e9cd 3201 	strd	r3, r2, [sp, #4]
   28316:	9303      	str	r3, [sp, #12]
   28318:	22c0      	movs	r2, #192	; 0xc0
   2831a:	4630      	mov	r0, r6
   2831c:	9406      	str	r4, [sp, #24]
   2831e:	f8cd 8014 	str.w	r8, [sp, #20]
   28322:	ab0d      	add	r3, sp, #52	; 0x34
   28324:	a910      	add	r1, sp, #64	; 0x40
   28326:	f011 fa8b 	bl	39840 <http_send_data.constprop.0>
			     method, " ", req->url, " ", req->protocol,
			     HTTP_CRLF, NULL);
	if (ret < 0) {
   2832a:	1e07      	subs	r7, r0, #0
   2832c:	f2c0 819e 	blt.w	2866c <http_client_req+0x3f4>
		goto out;
	}

	total_sent += ret;

	if (req->port) {
   28330:	e9d5 233d 	ldrd	r2, r3, [r5, #244]	; 0xf4
   28334:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 28630 <http_client_req+0x3b8>
   28338:	2b00      	cmp	r3, #0
   2833a:	d066      	beq.n	2840a <http_client_req+0x192>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   2833c:	9304      	str	r3, [sp, #16]
   2833e:	4baa      	ldr	r3, [pc, #680]	; (285e8 <http_client_req+0x370>)
   28340:	4630      	mov	r0, r6
   28342:	e9cd 2302 	strd	r2, r3, [sp, #8]
   28346:	4ba9      	ldr	r3, [pc, #676]	; (285ec <http_client_req+0x374>)
   28348:	22c0      	movs	r2, #192	; 0xc0
   2834a:	9300      	str	r3, [sp, #0]
   2834c:	e9cd 8405 	strd	r8, r4, [sp, #20]
   28350:	f8cd b004 	str.w	fp, [sp, #4]
   28354:	ab0d      	add	r3, sp, #52	; 0x34
   28356:	a910      	add	r1, sp, #64	; 0x40
   28358:	f011 fa72 	bl	39840 <http_send_data.constprop.0>
	} else {
		ret = http_send_data(sock, send_buf, send_buf_max_len,
				     &send_buf_pos, "Host", ": ", req->host,
				     HTTP_CRLF, NULL);

		if (ret < 0) {
   2835c:	1e04      	subs	r4, r0, #0
   2835e:	db4c      	blt.n	283fa <http_client_req+0x182>
		}

		total_sent += ret;
	}

	if (req->optional_headers_cb) {
   28360:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
		total_sent += ret;
   28364:	4427      	add	r7, r4
	if (req->optional_headers_cb) {
   28366:	2b00      	cmp	r3, #0
   28368:	d073      	beq.n	28452 <http_client_req+0x1da>
	return sendall(sock, send_buf, send_buf_len);
   2836a:	4630      	mov	r0, r6
   2836c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2836e:	a910      	add	r1, sp, #64	; 0x40
   28370:	f011 fa4b 	bl	3980a <sendall>
		ret = http_flush_data(sock, send_buf, send_buf_pos);
		if (ret < 0) {
   28374:	1e04      	subs	r4, r0, #0
   28376:	db40      	blt.n	283fa <http_client_req+0x182>
			goto out;
		}

		send_buf_pos = 0;
   28378:	2300      	movs	r3, #0
		total_sent += ret;

		ret = req->optional_headers_cb(sock, req, user_data);
   2837a:	4652      	mov	r2, sl
		send_buf_pos = 0;
   2837c:	930d      	str	r3, [sp, #52]	; 0x34
		ret = req->optional_headers_cb(sock, req, user_data);
   2837e:	4629      	mov	r1, r5
   28380:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   28384:	4630      	mov	r0, r6
   28386:	4798      	blx	r3
		if (ret < 0) {
   28388:	1e03      	subs	r3, r0, #0
   2838a:	f2c0 8171 	blt.w	28670 <http_client_req+0x3f8>
		total_sent += ret;
   2838e:	1938      	adds	r0, r7, r4
			goto out;
		}

		total_sent += ret;
   28390:	18c7      	adds	r7, r0, r3
   28392:	f04f 0900 	mov.w	r9, #0

			total_sent += ret;
		}
	}

	for (i = 0; req->header_fields && req->header_fields[i]; i++) {
   28396:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2839a:	b11b      	cbz	r3, 283a4 <http_client_req+0x12c>
   2839c:	f853 3009 	ldr.w	r3, [r3, r9]
   283a0:	2b00      	cmp	r3, #0
   283a2:	d158      	bne.n	28456 <http_client_req+0x1de>
		}

		total_sent += ret;
	}

	if (req->content_type_value) {
   283a4:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   283a8:	b17b      	cbz	r3, 283ca <http_client_req+0x152>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   283aa:	2200      	movs	r2, #0
   283ac:	e9cd b301 	strd	fp, r3, [sp, #4]
   283b0:	4b8f      	ldr	r3, [pc, #572]	; (285f0 <http_client_req+0x378>)
   283b2:	e9cd 8203 	strd	r8, r2, [sp, #12]
   283b6:	9300      	str	r3, [sp, #0]
   283b8:	22c0      	movs	r2, #192	; 0xc0
   283ba:	4630      	mov	r0, r6
   283bc:	ab0d      	add	r3, sp, #52	; 0x34
   283be:	a910      	add	r1, sp, #64	; 0x40
   283c0:	f011 fa3e 	bl	39840 <http_send_data.constprop.0>
				     &send_buf_pos, "Content-Type", ": ",
				     req->content_type_value, HTTP_CRLF, NULL);
		if (ret < 0) {
   283c4:	1e04      	subs	r4, r0, #0
   283c6:	db18      	blt.n	283fa <http_client_req+0x182>
			goto out;
		}

		total_sent += ret;
   283c8:	4427      	add	r7, r4
	}

	if (req->payload || req->payload_cb) {
   283ca:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   283ce:	b923      	cbnz	r3, 283da <http_client_req+0x162>
   283d0:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
   283d4:	2b00      	cmp	r3, #0
   283d6:	f000 80f8 	beq.w	285ca <http_client_req+0x352>
		if (req->payload_len) {
   283da:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   283de:	2b00      	cmp	r3, #0
   283e0:	f000 80d4 	beq.w	2858c <http_client_req+0x314>
			char content_len_str[HTTP_CONTENT_LEN_SIZE];

			ret = snprintk(content_len_str, HTTP_CONTENT_LEN_SIZE,
   283e4:	ac0e      	add	r4, sp, #56	; 0x38
   283e6:	2106      	movs	r1, #6
   283e8:	4620      	mov	r0, r4
   283ea:	4a82      	ldr	r2, [pc, #520]	; (285f4 <http_client_req+0x37c>)
   283ec:	f00f fc03 	bl	37bf6 <snprintk>
				       "%zd", req->payload_len);
			if (ret <= 0 || ret >= HTTP_CONTENT_LEN_SIZE) {
   283f0:	3801      	subs	r0, #1
   283f2:	2804      	cmp	r0, #4
   283f4:	d93e      	bls.n	28474 <http_client_req+0x1fc>
				ret = -ENOMEM;
   283f6:	f06f 040b 	mvn.w	r4, #11

	return total_sent;

out:
	return ret;
}
   283fa:	4620      	mov	r0, r4
   283fc:	b041      	add	sp, #260	; 0x104
   283fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	req->internal.timeout = SYS_TIMEOUT_MS(timeout);
   28402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28406:	4601      	mov	r1, r0
   28408:	e773      	b.n	282f2 <http_client_req+0x7a>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   2840a:	e9cd 8303 	strd	r8, r3, [sp, #12]
   2840e:	4b77      	ldr	r3, [pc, #476]	; (285ec <http_client_req+0x374>)
   28410:	e9cd b201 	strd	fp, r2, [sp, #4]
   28414:	9300      	str	r3, [sp, #0]
   28416:	22c0      	movs	r2, #192	; 0xc0
   28418:	4630      	mov	r0, r6
   2841a:	ab0d      	add	r3, sp, #52	; 0x34
   2841c:	a910      	add	r1, sp, #64	; 0x40
   2841e:	f011 fa0f 	bl	39840 <http_send_data.constprop.0>
   28422:	e79b      	b.n	2835c <http_client_req+0xe4>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   28424:	2200      	movs	r2, #0
   28426:	4630      	mov	r0, r6
   28428:	e9cd 3200 	strd	r3, r2, [sp]
   2842c:	a910      	add	r1, sp, #64	; 0x40
   2842e:	22c0      	movs	r2, #192	; 0xc0
   28430:	ab0d      	add	r3, sp, #52	; 0x34
   28432:	f011 fa05 	bl	39840 <http_send_data.constprop.0>
			if (ret < 0) {
   28436:	1e04      	subs	r4, r0, #0
   28438:	f109 0904 	add.w	r9, r9, #4
   2843c:	dbdd      	blt.n	283fa <http_client_req+0x182>
			total_sent += ret;
   2843e:	4427      	add	r7, r4
		for (i = 0; req->optional_headers && req->optional_headers[i];
   28440:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   28444:	2b00      	cmp	r3, #0
   28446:	d0a4      	beq.n	28392 <http_client_req+0x11a>
   28448:	f853 3009 	ldr.w	r3, [r3, r9]
   2844c:	2b00      	cmp	r3, #0
   2844e:	d1e9      	bne.n	28424 <http_client_req+0x1ac>
   28450:	e79f      	b.n	28392 <http_client_req+0x11a>
   28452:	4699      	mov	r9, r3
   28454:	e7f4      	b.n	28440 <http_client_req+0x1c8>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   28456:	2200      	movs	r2, #0
   28458:	4630      	mov	r0, r6
   2845a:	e9cd 3200 	strd	r3, r2, [sp]
   2845e:	a910      	add	r1, sp, #64	; 0x40
   28460:	22c0      	movs	r2, #192	; 0xc0
   28462:	ab0d      	add	r3, sp, #52	; 0x34
   28464:	f011 f9ec 	bl	39840 <http_send_data.constprop.0>
		if (ret < 0) {
   28468:	1e04      	subs	r4, r0, #0
   2846a:	f109 0904 	add.w	r9, r9, #4
   2846e:	dbc4      	blt.n	283fa <http_client_req+0x182>
		total_sent += ret;
   28470:	4427      	add	r7, r4
	for (i = 0; req->header_fields && req->header_fields[i]; i++) {
   28472:	e790      	b.n	28396 <http_client_req+0x11e>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   28474:	2300      	movs	r3, #0
   28476:	e9cd 8304 	strd	r8, r3, [sp, #16]
   2847a:	4b5f      	ldr	r3, [pc, #380]	; (285f8 <http_client_req+0x380>)
   2847c:	22c0      	movs	r2, #192	; 0xc0
   2847e:	9300      	str	r3, [sp, #0]
   28480:	4630      	mov	r0, r6
   28482:	e9cd 4802 	strd	r4, r8, [sp, #8]
   28486:	f8cd b004 	str.w	fp, [sp, #4]
   2848a:	ab0d      	add	r3, sp, #52	; 0x34
   2848c:	a910      	add	r1, sp, #64	; 0x40
   2848e:	f011 f9d7 	bl	39840 <http_send_data.constprop.0>
		if (ret < 0) {
   28492:	2800      	cmp	r0, #0
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   28494:	4604      	mov	r4, r0
		if (ret < 0) {
   28496:	dbb0      	blt.n	283fa <http_client_req+0x182>
	return sendall(sock, send_buf, send_buf_len);
   28498:	4630      	mov	r0, r6
   2849a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2849c:	a910      	add	r1, sp, #64	; 0x40
   2849e:	f011 f9b4 	bl	3980a <sendall>
		if (ret < 0) {
   284a2:	1e03      	subs	r3, r0, #0
   284a4:	f2c0 80e4 	blt.w	28670 <http_client_req+0x3f8>
		send_buf_pos = 0;
   284a8:	2200      	movs	r2, #0
		total_sent += ret;
   284aa:	19e0      	adds	r0, r4, r7
		total_sent += ret;
   284ac:	18c7      	adds	r7, r0, r3
		if (req->payload_cb) {
   284ae:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
		send_buf_pos = 0;
   284b2:	920d      	str	r2, [sp, #52]	; 0x34
		if (req->payload_cb) {
   284b4:	2b00      	cmp	r3, #0
   284b6:	d072      	beq.n	2859e <http_client_req+0x326>
			ret = req->payload_cb(sock, req, user_data);
   284b8:	4652      	mov	r2, sl
   284ba:	4629      	mov	r1, r5
   284bc:	4630      	mov	r0, r6
   284be:	4798      	blx	r3
			if (ret < 0) {
   284c0:	1e04      	subs	r4, r0, #0
   284c2:	db9a      	blt.n	283fa <http_client_req+0x182>
			total_sent += ret;
   284c4:	443c      	add	r4, r7
	if (send_buf_pos > 0) {
   284c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   284c8:	b13a      	cbz	r2, 284da <http_client_req+0x262>
	return sendall(sock, send_buf, send_buf_len);
   284ca:	4630      	mov	r0, r6
   284cc:	a910      	add	r1, sp, #64	; 0x40
   284ce:	f011 f99c 	bl	3980a <sendall>
		if (ret < 0) {
   284d2:	2800      	cmp	r0, #0
   284d4:	f2c0 80ce 	blt.w	28674 <http_client_req+0x3fc>
		total_sent += ret;
   284d8:	4404      	add	r4, r0
	http_client_init_parser(&req->internal.parser,
   284da:	f105 0830 	add.w	r8, r5, #48	; 0x30
	http_parser_init(parser, HTTP_RESPONSE);
   284de:	2101      	movs	r1, #1
   284e0:	4640      	mov	r0, r8
   284e2:	f011 f89e 	bl	39622 <http_parser_init>
	settings->on_body = on_body;
   284e6:	4b45      	ldr	r3, [pc, #276]	; (285fc <http_client_req+0x384>)
	http_client_init_parser(&req->internal.parser,
   284e8:	f105 0950 	add.w	r9, r5, #80	; 0x50
	settings->on_body = on_body;
   284ec:	66ab      	str	r3, [r5, #104]	; 0x68
	settings->on_chunk_complete = on_chunk_complete;
   284ee:	4b44      	ldr	r3, [pc, #272]	; (28600 <http_client_req+0x388>)
   284f0:	676b      	str	r3, [r5, #116]	; 0x74
	settings->on_chunk_header = on_chunk_header;
   284f2:	4b44      	ldr	r3, [pc, #272]	; (28604 <http_client_req+0x38c>)
   284f4:	672b      	str	r3, [r5, #112]	; 0x70
	settings->on_headers_complete = on_headers_complete;
   284f6:	4b44      	ldr	r3, [pc, #272]	; (28608 <http_client_req+0x390>)
   284f8:	666b      	str	r3, [r5, #100]	; 0x64
	settings->on_header_field = on_header_field;
   284fa:	4b44      	ldr	r3, [pc, #272]	; (2860c <http_client_req+0x394>)
   284fc:	65eb      	str	r3, [r5, #92]	; 0x5c
	settings->on_header_value = on_header_value;
   284fe:	4b44      	ldr	r3, [pc, #272]	; (28610 <http_client_req+0x398>)
   28500:	662b      	str	r3, [r5, #96]	; 0x60
	settings->on_message_begin = on_message_begin;
   28502:	4b44      	ldr	r3, [pc, #272]	; (28614 <http_client_req+0x39c>)
   28504:	652b      	str	r3, [r5, #80]	; 0x50
	settings->on_message_complete = on_message_complete;
   28506:	4b44      	ldr	r3, [pc, #272]	; (28618 <http_client_req+0x3a0>)
   28508:	66eb      	str	r3, [r5, #108]	; 0x6c
	settings->on_status = on_status;
   2850a:	4b44      	ldr	r3, [pc, #272]	; (2861c <http_client_req+0x3a4>)
   2850c:	65ab      	str	r3, [r5, #88]	; 0x58
	settings->on_url = on_url;
   2850e:	4b44      	ldr	r3, [pc, #272]	; (28620 <http_client_req+0x3a8>)
   28510:	656b      	str	r3, [r5, #84]	; 0x54
	if (!K_TIMEOUT_EQ(req->internal.timeout, K_FOREVER) &&
   28512:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	; 0xc8
   28516:	3301      	adds	r3, #1
   28518:	9308      	str	r3, [sp, #32]
   2851a:	f142 0300 	adc.w	r3, r2, #0
   2851e:	9309      	str	r3, [sp, #36]	; 0x24
   28520:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28524:	2b00      	cmp	r3, #0
   28526:	bf08      	it	eq
   28528:	2a02      	cmpeq	r2, #2
   2852a:	d309      	bcc.n	28540 <http_client_req+0x2c8>
		k_delayed_work_init(&req->internal.work, http_timeout);
   2852c:	4628      	mov	r0, r5
   2852e:	493d      	ldr	r1, [pc, #244]	; (28624 <http_client_req+0x3ac>)
   28530:	f012 fcdd 	bl	3aeee <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   28534:	e9d5 2332 	ldrd	r2, r3, [r5, #200]	; 0xc8
   28538:	4629      	mov	r1, r5
   2853a:	483b      	ldr	r0, [pc, #236]	; (28628 <http_client_req+0x3b0>)
   2853c:	f00e f856 	bl	365ec <k_delayed_work_submit_to_queue>
   28540:	2700      	movs	r7, #0
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   28542:	46ba      	mov	sl, r7
		received = recv(sock, req->internal.response.recv_buf + offset,
   28544:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
   28548:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
   2854c:	4439      	add	r1, r7
   2854e:	1bd2      	subs	r2, r2, r7
   28550:	2300      	movs	r3, #0
   28552:	4630      	mov	r0, r6
   28554:	e9cd aa00 	strd	sl, sl, [sp]
   28558:	f010 fc3f 	bl	38dda <z_impl_zsock_recvfrom>
		if (received == 0) {
   2855c:	f1b0 0b00 	subs.w	fp, r0, #0
   28560:	d002      	beq.n	28568 <http_client_req+0x2f0>
		} else if (received < 0) {
   28562:	da67      	bge.n	28634 <http_client_req+0x3bc>
			ret = -errno;
   28564:	f010 feaf 	bl	392c6 <__errno>
	if (!K_TIMEOUT_EQ(req->internal.timeout, K_FOREVER) &&
   28568:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	; 0xc8
   2856c:	3301      	adds	r3, #1
   2856e:	930a      	str	r3, [sp, #40]	; 0x28
   28570:	f142 0300 	adc.w	r3, r2, #0
   28574:	930b      	str	r3, [sp, #44]	; 0x2c
   28576:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   2857a:	2b00      	cmp	r3, #0
   2857c:	bf08      	it	eq
   2857e:	2a02      	cmpeq	r2, #2
   28580:	f4ff af3b 	bcc.w	283fa <http_client_req+0x182>
		(void)k_delayed_work_cancel(&req->internal.work);
   28584:	4628      	mov	r0, r5
   28586:	f012 fcba 	bl	3aefe <k_delayed_work_cancel>
   2858a:	e736      	b.n	283fa <http_client_req+0x182>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   2858c:	e9cd 8300 	strd	r8, r3, [sp]
   28590:	22c0      	movs	r2, #192	; 0xc0
   28592:	4630      	mov	r0, r6
   28594:	ab0d      	add	r3, sp, #52	; 0x34
   28596:	a910      	add	r1, sp, #64	; 0x40
   28598:	f011 f952 	bl	39840 <http_send_data.constprop.0>
   2859c:	e779      	b.n	28492 <http_client_req+0x21a>
			if (req->payload_len == 0) {
   2859e:	f8d5 8104 	ldr.w	r8, [r5, #260]	; 0x104
   285a2:	f1b8 0f00 	cmp.w	r8, #0
   285a6:	d104      	bne.n	285b2 <http_client_req+0x33a>
				length = strlen(req->payload);
   285a8:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   285ac:	f7f4 fd60 	bl	1d070 <strlen>
   285b0:	4680      	mov	r8, r0
			ret = sendall(sock, req->payload, length);
   285b2:	4642      	mov	r2, r8
   285b4:	4630      	mov	r0, r6
   285b6:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   285ba:	f011 f926 	bl	3980a <sendall>
			if (ret < 0) {
   285be:	1e04      	subs	r4, r0, #0
   285c0:	f6ff af1b 	blt.w	283fa <http_client_req+0x182>
			total_sent += length;
   285c4:	eb07 0408 	add.w	r4, r7, r8
   285c8:	e77d      	b.n	284c6 <http_client_req+0x24e>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   285ca:	e9cd 8300 	strd	r8, r3, [sp]
   285ce:	22c0      	movs	r2, #192	; 0xc0
   285d0:	4630      	mov	r0, r6
   285d2:	ab0d      	add	r3, sp, #52	; 0x34
   285d4:	a910      	add	r1, sp, #64	; 0x40
   285d6:	f011 f933 	bl	39840 <http_send_data.constprop.0>
		if (ret < 0) {
   285da:	1e04      	subs	r4, r0, #0
   285dc:	f6ff af0d 	blt.w	283fa <http_client_req+0x182>
   285e0:	463c      	mov	r4, r7
   285e2:	e770      	b.n	284c6 <http_client_req+0x24e>
   285e4:	0003e7f5 	.word	0x0003e7f5
   285e8:	0003faf1 	.word	0x0003faf1
   285ec:	0003f7d6 	.word	0x0003f7d6
   285f0:	0003f7db 	.word	0x0003f7db
   285f4:	0003f7e8 	.word	0x0003f7e8
   285f8:	0003f7c7 	.word	0x0003f7c7
   285fc:	000397af 	.word	0x000397af
   28600:	000396c5 	.word	0x000396c5
   28604:	000396b5 	.word	0x000396b5
   28608:	00039743 	.word	0x00039743
   2860c:	00028235 	.word	0x00028235
   28610:	000396dd 	.word	0x000396dd
   28614:	00039677 	.word	0x00039677
   28618:	00039687 	.word	0x00039687
   2861c:	0003977b 	.word	0x0003977b
   28620:	00039667 	.word	0x00039667
   28624:	000396d5 	.word	0x000396d5
   28628:	20023348 	.word	0x20023348
   2862c:	00040191 	.word	0x00040191
   28630:	0003e7bb 	.word	0x0003e7bb
			req->internal.response.data_len += received;
   28634:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
				req->internal.response.recv_buf + offset,
   28638:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
			req->internal.response.data_len += received;
   2863c:	445b      	add	r3, fp
   2863e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
			(void)http_parser_execute(
   28642:	443a      	add	r2, r7
   28644:	465b      	mov	r3, fp
   28646:	4649      	mov	r1, r9
   28648:	4640      	mov	r0, r8
   2864a:	f7fe fa37 	bl	26abc <http_parser_execute>
		if (offset >= req->internal.response.recv_buf_len) {
   2864e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
		offset += received;
   28652:	445f      	add	r7, fp
			offset = 0;
   28654:	429f      	cmp	r7, r3
   28656:	bf28      	it	cs
   28658:	2700      	movcs	r7, #0
		if (req->internal.response.message_complete) {
   2865a:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
   2865e:	075b      	lsls	r3, r3, #29
   28660:	f57f af70 	bpl.w	28544 <http_client_req+0x2cc>
   28664:	e780      	b.n	28568 <http_client_req+0x2f0>
		return -EINVAL;
   28666:	f06f 0415 	mvn.w	r4, #21
   2866a:	e6c6      	b.n	283fa <http_client_req+0x182>
   2866c:	463c      	mov	r4, r7
   2866e:	e6c4      	b.n	283fa <http_client_req+0x182>
   28670:	461c      	mov	r4, r3
   28672:	e6c2      	b.n	283fa <http_client_req+0x182>
   28674:	4604      	mov	r4, r0
   28676:	e6c0      	b.n	283fa <http_client_req+0x182>

00028678 <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   28678:	4a06      	ldr	r2, [pc, #24]	; (28694 <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   2867a:	f000 001f 	and.w	r0, r0, #31
   2867e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   28682:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   28686:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2868a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   2868e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   28692:	4770      	bx	lr
   28694:	40842500 	.word	0x40842500

00028698 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   28698:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   2869a:	4b09      	ldr	r3, [pc, #36]	; (286c0 <gpio_nrfx_init+0x28>)
   2869c:	781a      	ldrb	r2, [r3, #0]
   2869e:	b96a      	cbnz	r2, 286bc <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   286a0:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   286a2:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   286a4:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   286a6:	2105      	movs	r1, #5
   286a8:	f7fd fac4 	bl	25c34 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   286ac:	2031      	movs	r0, #49	; 0x31
   286ae:	f7fd fa8f 	bl	25bd0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   286b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   286b6:	4b03      	ldr	r3, [pc, #12]	; (286c4 <gpio_nrfx_init+0x2c>)
   286b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   286bc:	2000      	movs	r0, #0
   286be:	bd08      	pop	{r3, pc}
   286c0:	2002c07c 	.word	0x2002c07c
   286c4:	40031000 	.word	0x40031000

000286c8 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   286c8:	4b28      	ldr	r3, [pc, #160]	; (2876c <gpio_nrfx_config+0xa4>)
{
   286ca:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   286cc:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   286ce:	4828      	ldr	r0, [pc, #160]	; (28770 <gpio_nrfx_config+0xa8>)
   286d0:	4013      	ands	r3, r2
   286d2:	4283      	cmp	r3, r0
   286d4:	d03b      	beq.n	2874e <gpio_nrfx_config+0x86>
   286d6:	d80d      	bhi.n	286f4 <gpio_nrfx_config+0x2c>
   286d8:	2b06      	cmp	r3, #6
   286da:	d015      	beq.n	28708 <gpio_nrfx_config+0x40>
   286dc:	d805      	bhi.n	286ea <gpio_nrfx_config+0x22>
   286de:	b19b      	cbz	r3, 28708 <gpio_nrfx_config+0x40>
   286e0:	2b02      	cmp	r3, #2
   286e2:	d036      	beq.n	28752 <gpio_nrfx_config+0x8a>
   286e4:	f06f 0015 	mvn.w	r0, #21
   286e8:	e030      	b.n	2874c <gpio_nrfx_config+0x84>
   286ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   286ee:	d1f9      	bne.n	286e4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   286f0:	2301      	movs	r3, #1
   286f2:	e009      	b.n	28708 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   286f4:	481f      	ldr	r0, [pc, #124]	; (28774 <gpio_nrfx_config+0xac>)
   286f6:	4283      	cmp	r3, r0
   286f8:	d02d      	beq.n	28756 <gpio_nrfx_config+0x8e>
   286fa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   286fe:	d02c      	beq.n	2875a <gpio_nrfx_config+0x92>
   28700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   28704:	d1ee      	bne.n	286e4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   28706:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   28708:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   2870a:	bf4c      	ite	mi
   2870c:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   2870e:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   28712:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   28716:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   2871a:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   2871e:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   28722:	d006      	beq.n	28732 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   28724:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28728:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2872a:	d018      	beq.n	2875e <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
   2872c:	2201      	movs	r2, #1
   2872e:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   28730:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   28732:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   28736:	2000      	movs	r0, #0
   28738:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
   2873c:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   28740:	4a0d      	ldr	r2, [pc, #52]	; (28778 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   28742:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   28746:	3180      	adds	r1, #128	; 0x80
   28748:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   2874c:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   2874e:	2307      	movs	r3, #7
   28750:	e7da      	b.n	28708 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   28752:	2304      	movs	r3, #4
   28754:	e7d8      	b.n	28708 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   28756:	2305      	movs	r3, #5
   28758:	e7d6      	b.n	28708 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   2875a:	2303      	movs	r3, #3
   2875c:	e7d4      	b.n	28708 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   2875e:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   28760:	bf42      	ittt	mi
   28762:	2201      	movmi	r2, #1
   28764:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   28766:	60f2      	strmi	r2, [r6, #12]
}
   28768:	e7e3      	b.n	28732 <gpio_nrfx_config+0x6a>
   2876a:	bf00      	nop
   2876c:	00f00006 	.word	0x00f00006
   28770:	00100006 	.word	0x00100006
   28774:	00400002 	.word	0x00400002
   28778:	40842500 	.word	0x40842500

0002877c <gpio_nrfx_pin_interrupt_configure>:
{
   2877c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28780:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   28782:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   28784:	f8d0 800c 	ldr.w	r8, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   28788:	7a08      	ldrb	r0, [r1, #8]
   2878a:	f005 071f 	and.w	r7, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   2878e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   28792:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   28796:	d10a      	bne.n	287ae <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   28798:	486e      	ldr	r0, [pc, #440]	; (28954 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
    *p_pin = pin_number & 0x1F;
   2879a:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2879e:	3180      	adds	r1, #128	; 0x80
   287a0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   287a4:	07c8      	lsls	r0, r1, #31
   287a6:	d508      	bpl.n	287ba <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   287a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   287ac:	e0c2      	b.n	28934 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   287ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   287b2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   287b6:	f000 80ae 	beq.w	28916 <gpio_nrfx_pin_interrupt_configure+0x19a>
   287ba:	2101      	movs	r1, #1
   287bc:	f8d8 000c 	ldr.w	r0, [r8, #12]
   287c0:	40a9      	lsls	r1, r5
   287c2:	4301      	orrs	r1, r0
   287c4:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   287c8:	2101      	movs	r1, #1
   287ca:	f8d8 0014 	ldr.w	r0, [r8, #20]
   287ce:	40a9      	lsls	r1, r5
   287d0:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   287d4:	f8d8 2018 	ldr.w	r2, [r8, #24]
   287d8:	bf0c      	ite	eq
   287da:	4308      	orreq	r0, r1
   287dc:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   287de:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   287e2:	bf0c      	ite	eq
   287e4:	430a      	orreq	r2, r1
   287e6:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   287e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   287ec:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   287f0:	f8c8 2018 	str.w	r2, [r8, #24]
   287f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   287f8:	4e57      	ldr	r6, [pc, #348]	; (28958 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   287fa:	bf0c      	ite	eq
   287fc:	4311      	orreq	r1, r2
   287fe:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   28802:	f8c8 0014 	str.w	r0, [r8, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   28806:	f8c8 1010 	str.w	r1, [r8, #16]
   2880a:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   2880e:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   28810:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   28814:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   28818:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   2881c:	428f      	cmp	r7, r1
   2881e:	d17f      	bne.n	28920 <gpio_nrfx_pin_interrupt_configure+0x1a4>
		    && (intenset & BIT(i))) {
   28820:	fa22 f103 	lsr.w	r1, r2, r3
   28824:	07c9      	lsls	r1, r1, #31
   28826:	d57b      	bpl.n	28920 <gpio_nrfx_pin_interrupt_configure+0x1a4>
			(void)atomic_and(mask, ~BIT(i));
   28828:	2201      	movs	r2, #1
   2882a:	409a      	lsls	r2, r3
   2882c:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2882e:	494b      	ldr	r1, [pc, #300]	; (2895c <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   28830:	e8d1 4fef 	ldaex	r4, [r1]
   28834:	4004      	ands	r4, r0
   28836:	e8c1 4fec 	stlex	ip, r4, [r1]
   2883a:	f1bc 0f00 	cmp.w	ip, #0
   2883e:	d1f7      	bne.n	28830 <gpio_nrfx_pin_interrupt_configure+0xb4>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   28840:	009b      	lsls	r3, r3, #2
   28842:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   28846:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   2884a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   2884e:	f021 0101 	bic.w	r1, r1, #1
   28852:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   28856:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2885a:	2100      	movs	r1, #0
   2885c:	4638      	mov	r0, r7
   2885e:	f7ff ff0b 	bl	28678 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   28862:	f8d8 300c 	ldr.w	r3, [r8, #12]
   28866:	40eb      	lsrs	r3, r5
   28868:	f013 0301 	ands.w	r3, r3, #1
   2886c:	d051      	beq.n	28912 <gpio_nrfx_pin_interrupt_configure+0x196>
		if (data->trig_edge & BIT(pin)) {
   2886e:	f8d8 3014 	ldr.w	r3, [r8, #20]
   28872:	40eb      	lsrs	r3, r5
   28874:	f013 0401 	ands.w	r4, r3, #1
   28878:	d05e      	beq.n	28938 <gpio_nrfx_pin_interrupt_configure+0x1bc>
			if (data->double_edge & BIT(pin)) {
   2887a:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   2887e:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   28880:	40eb      	lsrs	r3, r5
   28882:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   28884:	bf48      	it	mi
   28886:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   28888:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   2888c:	bf5f      	itttt	pl
   2888e:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   28892:	fa21 f505 	lsrpl.w	r5, r1, r5
   28896:	f005 0501 	andpl.w	r5, r5, #1
   2889a:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2889e:	492f      	ldr	r1, [pc, #188]	; (2895c <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   288a0:	bf58      	it	pl
   288a2:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   288a4:	fa0c f402 	lsl.w	r4, ip, r2
   288a8:	e8d1 0fef 	ldaex	r0, [r1]
   288ac:	ea40 0304 	orr.w	r3, r0, r4
   288b0:	e8c1 3fee 	stlex	lr, r3, [r1]
   288b4:	f1be 0f00 	cmp.w	lr, #0
   288b8:	d1f6      	bne.n	288a8 <gpio_nrfx_pin_interrupt_configure+0x12c>
		if ((prev & BIT(channel)) == 0) {
   288ba:	40d0      	lsrs	r0, r2
   288bc:	f010 0301 	ands.w	r3, r0, #1
   288c0:	d133      	bne.n	2892a <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   288c2:	0091      	lsls	r1, r2, #2
   288c4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   288c8:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   288cc:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   288d0:	3240      	adds	r2, #64	; 0x40
   288d2:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   288d6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   288da:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   288de:	023f      	lsls	r7, r7, #8
   288e0:	0092      	lsls	r2, r2, #2
   288e2:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   288e6:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   288ea:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   288ec:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   288f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   288f4:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   288f8:	4307      	orrs	r7, r0
   288fa:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   288fe:	6013      	str	r3, [r2, #0]
   28900:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   28902:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   28906:	f042 0201 	orr.w	r2, r2, #1
   2890a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   2890e:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   28912:	4618      	mov	r0, r3
   28914:	e00e      	b.n	28934 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   28916:	2001      	movs	r0, #1
   28918:	40a8      	lsls	r0, r5
   2891a:	ea21 0100 	bic.w	r1, r1, r0
   2891e:	e751      	b.n	287c4 <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   28920:	3301      	adds	r3, #1
   28922:	2b08      	cmp	r3, #8
   28924:	f47f af74 	bne.w	28810 <gpio_nrfx_pin_interrupt_configure+0x94>
   28928:	e797      	b.n	2885a <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   2892a:	3201      	adds	r2, #1
   2892c:	2a08      	cmp	r2, #8
   2892e:	d1b9      	bne.n	288a4 <gpio_nrfx_pin_interrupt_configure+0x128>
	return -ENODEV;
   28930:	f06f 0012 	mvn.w	r0, #18
}
   28934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   28938:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2893c:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2893e:	40e9      	lsrs	r1, r5
   28940:	f001 0101 	and.w	r1, r1, #1
   28944:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   28948:	b2c9      	uxtb	r1, r1
   2894a:	f7ff fe95 	bl	28678 <nrf_gpio_cfg_sense_set>
	int res = 0;
   2894e:	4620      	mov	r0, r4
   28950:	e7f0      	b.n	28934 <gpio_nrfx_pin_interrupt_configure+0x1b8>
   28952:	bf00      	nop
   28954:	40842500 	.word	0x40842500
   28958:	40031000 	.word	0x40031000
   2895c:	20023778 	.word	0x20023778

00028960 <gpiote_event_handler>:
{
   28960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28964:	4f3f      	ldr	r7, [pc, #252]	; (28a64 <gpiote_event_handler+0x104>)
   28966:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   28968:	2e00      	cmp	r6, #0
   2896a:	d04f      	beq.n	28a0c <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
   2896c:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   28970:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   28974:	4b3c      	ldr	r3, [pc, #240]	; (28a68 <gpiote_event_handler+0x108>)
   28976:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   28978:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2897c:	430a      	orrs	r2, r1
   2897e:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   28982:	4a3a      	ldr	r2, [pc, #232]	; (28a6c <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   28984:	691b      	ldr	r3, [r3, #16]
   28986:	6914      	ldr	r4, [r2, #16]
   28988:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   2898a:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   2898e:	bb75      	cbnz	r5, 289ee <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   28990:	603d      	str	r5, [r7, #0]
   28992:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   28994:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   28996:	2501      	movs	r5, #1
   28998:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   2899a:	4835      	ldr	r0, [pc, #212]	; (28a70 <gpiote_event_handler+0x110>)
   2899c:	4935      	ldr	r1, [pc, #212]	; (28a74 <gpiote_event_handler+0x114>)
   2899e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   289a2:	fa05 fc03 	lsl.w	ip, r5, r3
   289a6:	ea1c 0f02 	tst.w	ip, r2
   289aa:	d00f      	beq.n	289cc <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   289ac:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   289b0:	b162      	cbz	r2, 289cc <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   289b2:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   289b6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   289ba:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   289be:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   289c2:	fa05 f202 	lsl.w	r2, r5, r2
   289c6:	4314      	orrs	r4, r2
   289c8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   289cc:	3301      	adds	r3, #1
   289ce:	2b08      	cmp	r3, #8
   289d0:	d1e5      	bne.n	2899e <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   289d2:	b9ec      	cbnz	r4, 28a10 <gpiote_event_handler+0xb0>
	if (port_event) {
   289d4:	b14e      	cbz	r6, 289ea <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
   289d6:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   289d8:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   289da:	4d23      	ldr	r5, [pc, #140]	; (28a68 <gpiote_event_handler+0x108>)
   289dc:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   289de:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   289e2:	430a      	orrs	r2, r1
   289e4:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   289e8:	bb54      	cbnz	r4, 28a40 <gpiote_event_handler+0xe0>
}
   289ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   289ee:	ea15 0f08 	tst.w	r5, r8
   289f2:	d006      	beq.n	28a02 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   289f4:	2100      	movs	r1, #0
   289f6:	f009 001f 	and.w	r0, r9, #31
   289fa:	f7ff fe3d 	bl	28678 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   289fe:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   28a02:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   28a06:	ea4f 0848 	mov.w	r8, r8, lsl #1
   28a0a:	e7c0      	b.n	2898e <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   28a0c:	4634      	mov	r4, r6
   28a0e:	e7c1      	b.n	28994 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   28a10:	4b15      	ldr	r3, [pc, #84]	; (28a68 <gpiote_event_handler+0x108>)
   28a12:	6859      	ldr	r1, [r3, #4]
   28a14:	2900      	cmp	r1, #0
   28a16:	d0dd      	beq.n	289d4 <gpiote_event_handler+0x74>
	return node->next;
   28a18:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   28a1a:	4f17      	ldr	r7, [pc, #92]	; (28a78 <gpiote_event_handler+0x118>)
   28a1c:	2d00      	cmp	r5, #0
   28a1e:	bf38      	it	cc
   28a20:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   28a22:	688a      	ldr	r2, [r1, #8]
   28a24:	4022      	ands	r2, r4
   28a26:	d002      	beq.n	28a2e <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
   28a28:	4638      	mov	r0, r7
   28a2a:	684b      	ldr	r3, [r1, #4]
   28a2c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   28a2e:	2d00      	cmp	r5, #0
   28a30:	d0d0      	beq.n	289d4 <gpiote_event_handler+0x74>
   28a32:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28a34:	4629      	mov	r1, r5
   28a36:	2b00      	cmp	r3, #0
   28a38:	bf38      	it	cc
   28a3a:	2300      	movcc	r3, #0
   28a3c:	461d      	mov	r5, r3
   28a3e:	e7f0      	b.n	28a22 <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
   28a40:	4226      	tst	r6, r4
   28a42:	d00c      	beq.n	28a5e <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   28a44:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   28a46:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   28a4a:	40f9      	lsrs	r1, r7
   28a4c:	f001 0101 	and.w	r1, r1, #1
   28a50:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   28a54:	b2c9      	uxtb	r1, r1
   28a56:	f7ff fe0f 	bl	28678 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   28a5a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   28a5e:	3701      	adds	r7, #1
		bit <<= 1;
   28a60:	0076      	lsls	r6, r6, #1
   28a62:	e7c1      	b.n	289e8 <gpiote_event_handler+0x88>
   28a64:	4003117c 	.word	0x4003117c
   28a68:	2002375c 	.word	0x2002375c
   28a6c:	40842500 	.word	0x40842500
   28a70:	40031000 	.word	0x40031000
   28a74:	40031100 	.word	0x40031100
   28a78:	200206cc 	.word	0x200206cc

00028a7c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   28a7c:	4b02      	ldr	r3, [pc, #8]	; (28a88 <flash_nrf_pages_layout+0xc>)
   28a7e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   28a80:	2301      	movs	r3, #1
   28a82:	6013      	str	r3, [r2, #0]
}
   28a84:	4770      	bx	lr
   28a86:	bf00      	nop
   28a88:	2002377c 	.word	0x2002377c

00028a8c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   28a8c:	4800      	ldr	r0, [pc, #0]	; (28a90 <flash_nrf_get_parameters+0x4>)
   28a8e:	4770      	bx	lr
   28a90:	0003c8bc 	.word	0x0003c8bc

00028a94 <flash_nrf_read>:
{
   28a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28a96:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   28a98:	4619      	mov	r1, r3
   28a9a:	4620      	mov	r0, r4
{
   28a9c:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   28a9e:	9301      	str	r3, [sp, #4]
   28aa0:	f010 ff64 	bl	3996c <is_regular_addr_valid>
   28aa4:	9a01      	ldr	r2, [sp, #4]
   28aa6:	b970      	cbnz	r0, 28ac6 <flash_nrf_read+0x32>
   28aa8:	490f      	ldr	r1, [pc, #60]	; (28ae8 <flash_nrf_read+0x54>)
   28aaa:	4b10      	ldr	r3, [pc, #64]	; (28aec <flash_nrf_read+0x58>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   28aac:	4810      	ldr	r0, [pc, #64]	; (28af0 <flash_nrf_read+0x5c>)
   28aae:	1a5b      	subs	r3, r3, r1
   28ab0:	08db      	lsrs	r3, r3, #3
   28ab2:	019b      	lsls	r3, r3, #6
   28ab4:	4621      	mov	r1, r4
   28ab6:	f043 0301 	orr.w	r3, r3, #1
   28aba:	f00f fd27 	bl	3850c <log_2>
		return -EINVAL;
   28abe:	f06f 0015 	mvn.w	r0, #21
}
   28ac2:	b003      	add	sp, #12
   28ac4:	bd30      	pop	{r4, r5, pc}
	if (!len) {
   28ac6:	b16a      	cbz	r2, 28ae4 <flash_nrf_read+0x50>
	if (addr < PM_APP_ADDRESS) {
   28ac8:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   28acc:	4621      	mov	r1, r4
   28ace:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   28ad0:	da04      	bge.n	28adc <flash_nrf_read+0x48>
}
   28ad2:	b003      	add	sp, #12
   28ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return spm_request_read(data, addr, len);
   28ad8:	f010 bb5a 	b.w	39190 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28adc:	f012 fc69 	bl	3b3b2 <memcpy>
	return 0;
   28ae0:	2000      	movs	r0, #0
   28ae2:	e7ee      	b.n	28ac2 <flash_nrf_read+0x2e>
		return 0;
   28ae4:	4610      	mov	r0, r2
   28ae6:	e7ec      	b.n	28ac2 <flash_nrf_read+0x2e>
   28ae8:	0003c2cc 	.word	0x0003c2cc
   28aec:	0003c32c 	.word	0x0003c32c
   28af0:	0003f7ec 	.word	0x0003f7ec

00028af4 <flash_nrf_erase>:
{
   28af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28af6:	460d      	mov	r5, r1
   28af8:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   28afa:	f011 ff32 	bl	3a962 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   28afe:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   28b00:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   28b02:	4628      	mov	r0, r5
   28b04:	f010 ff32 	bl	3996c <is_regular_addr_valid>
   28b08:	462f      	mov	r7, r5
   28b0a:	b378      	cbz	r0, 28b6c <flash_nrf_erase+0x78>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   28b0c:	fbb5 f3f6 	udiv	r3, r5, r6
   28b10:	fb06 5313 	mls	r3, r6, r3, r5
   28b14:	b923      	cbnz	r3, 28b20 <flash_nrf_erase+0x2c>
   28b16:	fbb4 f2f6 	udiv	r2, r4, r6
   28b1a:	fb06 4012 	mls	r0, r6, r2, r4
   28b1e:	b170      	cbz	r0, 28b3e <flash_nrf_erase+0x4a>
   28b20:	4a18      	ldr	r2, [pc, #96]	; (28b84 <flash_nrf_erase+0x90>)
   28b22:	4b19      	ldr	r3, [pc, #100]	; (28b88 <flash_nrf_erase+0x94>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   28b24:	4629      	mov	r1, r5
   28b26:	1a9b      	subs	r3, r3, r2
   28b28:	4622      	mov	r2, r4
   28b2a:	08db      	lsrs	r3, r3, #3
   28b2c:	019b      	lsls	r3, r3, #6
   28b2e:	4817      	ldr	r0, [pc, #92]	; (28b8c <flash_nrf_erase+0x98>)
   28b30:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("invalid address: 0x%08lx:%zu",
   28b34:	f00f fcea 	bl	3850c <log_2>
		return -EINVAL;
   28b38:	f06f 0015 	mvn.w	r0, #21
   28b3c:	e015      	b.n	28b6a <flash_nrf_erase+0x76>
		if (!n_pages) {
   28b3e:	42a6      	cmp	r6, r4
   28b40:	d813      	bhi.n	28b6a <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   28b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28b4a:	4811      	ldr	r0, [pc, #68]	; (28b90 <flash_nrf_erase+0x9c>)
   28b4c:	f00d fbfc 	bl	36348 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   28b50:	f011 ff07 	bl	3a962 <nrfx_nvmc_flash_page_size_get>
   28b54:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   28b56:	4638      	mov	r0, r7
   28b58:	f00c fb50 	bl	351fc <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   28b5c:	1b64      	subs	r4, r4, r5
   28b5e:	442f      	add	r7, r5
   28b60:	d1f9      	bne.n	28b56 <flash_nrf_erase+0x62>
	z_impl_k_sem_give(sem);
   28b62:	480b      	ldr	r0, [pc, #44]	; (28b90 <flash_nrf_erase+0x9c>)
   28b64:	f00d fbca 	bl	362fc <z_impl_k_sem_give>
	return ret;
   28b68:	4620      	mov	r0, r4
}
   28b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28b6c:	4a05      	ldr	r2, [pc, #20]	; (28b84 <flash_nrf_erase+0x90>)
   28b6e:	4b06      	ldr	r3, [pc, #24]	; (28b88 <flash_nrf_erase+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   28b70:	4629      	mov	r1, r5
   28b72:	1a9b      	subs	r3, r3, r2
   28b74:	08db      	lsrs	r3, r3, #3
   28b76:	019b      	lsls	r3, r3, #6
   28b78:	4622      	mov	r2, r4
   28b7a:	4806      	ldr	r0, [pc, #24]	; (28b94 <flash_nrf_erase+0xa0>)
   28b7c:	f043 0301 	orr.w	r3, r3, #1
   28b80:	e7d8      	b.n	28b34 <flash_nrf_erase+0x40>
   28b82:	bf00      	nop
   28b84:	0003c2cc 	.word	0x0003c2cc
   28b88:	0003c32c 	.word	0x0003c32c
   28b8c:	0003f809 	.word	0x0003f809
   28b90:	20023784 	.word	0x20023784
   28b94:	0003f7ec 	.word	0x0003f7ec

00028b98 <nrf_flash_init>:
{
   28b98:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   28b9a:	2201      	movs	r2, #1
   28b9c:	4806      	ldr	r0, [pc, #24]	; (28bb8 <nrf_flash_init+0x20>)
   28b9e:	4611      	mov	r1, r2
   28ba0:	f012 f92d 	bl	3adfe <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   28ba4:	f011 fee0 	bl	3a968 <nrfx_nvmc_flash_page_count_get>
   28ba8:	4c04      	ldr	r4, [pc, #16]	; (28bbc <nrf_flash_init+0x24>)
   28baa:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   28bac:	f011 fed9 	bl	3a962 <nrfx_nvmc_flash_page_size_get>
   28bb0:	6060      	str	r0, [r4, #4]
}
   28bb2:	2000      	movs	r0, #0
   28bb4:	bd10      	pop	{r4, pc}
   28bb6:	bf00      	nop
   28bb8:	20023784 	.word	0x20023784
   28bbc:	2002377c 	.word	0x2002377c

00028bc0 <flash_nrf_write>:
{
   28bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28bc2:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   28bc4:	4619      	mov	r1, r3
   28bc6:	4630      	mov	r0, r6
{
   28bc8:	4617      	mov	r7, r2
   28bca:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   28bcc:	f010 fece 	bl	3996c <is_regular_addr_valid>
   28bd0:	b970      	cbnz	r0, 28bf0 <flash_nrf_write+0x30>
   28bd2:	4a1f      	ldr	r2, [pc, #124]	; (28c50 <flash_nrf_write+0x90>)
   28bd4:	4b1f      	ldr	r3, [pc, #124]	; (28c54 <flash_nrf_write+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   28bd6:	4631      	mov	r1, r6
   28bd8:	1a9b      	subs	r3, r3, r2
   28bda:	4622      	mov	r2, r4
   28bdc:	08db      	lsrs	r3, r3, #3
   28bde:	019b      	lsls	r3, r3, #6
   28be0:	481d      	ldr	r0, [pc, #116]	; (28c58 <flash_nrf_write+0x98>)
   28be2:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   28be6:	f00f fc91 	bl	3850c <log_2>
		return -EINVAL;
   28bea:	f06f 0015 	mvn.w	r0, #21
}
   28bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   28bf0:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   28bf4:	f015 0503 	ands.w	r5, r5, #3
   28bf8:	d00a      	beq.n	28c10 <flash_nrf_write+0x50>
   28bfa:	4a15      	ldr	r2, [pc, #84]	; (28c50 <flash_nrf_write+0x90>)
   28bfc:	4b15      	ldr	r3, [pc, #84]	; (28c54 <flash_nrf_write+0x94>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   28bfe:	4631      	mov	r1, r6
   28c00:	1a9b      	subs	r3, r3, r2
   28c02:	08db      	lsrs	r3, r3, #3
   28c04:	019b      	lsls	r3, r3, #6
   28c06:	4622      	mov	r2, r4
   28c08:	4814      	ldr	r0, [pc, #80]	; (28c5c <flash_nrf_write+0x9c>)
   28c0a:	f043 0301 	orr.w	r3, r3, #1
   28c0e:	e7ea      	b.n	28be6 <flash_nrf_write+0x26>
	if (!len) {
   28c10:	b1dc      	cbz	r4, 28c4a <flash_nrf_write+0x8a>
	return z_impl_k_sem_take(sem, timeout);
   28c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28c1a:	4811      	ldr	r0, [pc, #68]	; (28c60 <flash_nrf_write+0xa0>)
   28c1c:	f00d fb94 	bl	36348 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   28c20:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   28c24:	42a5      	cmp	r5, r4
   28c26:	eb05 0006 	add.w	r0, r5, r6
   28c2a:	d109      	bne.n	28c40 <flash_nrf_write+0x80>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   28c2c:	4a0d      	ldr	r2, [pc, #52]	; (28c64 <flash_nrf_write+0xa4>)
   28c2e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   28c32:	07db      	lsls	r3, r3, #31
   28c34:	d5fb      	bpl.n	28c2e <flash_nrf_write+0x6e>
	z_impl_k_sem_give(sem);
   28c36:	480a      	ldr	r0, [pc, #40]	; (28c60 <flash_nrf_write+0xa0>)
   28c38:	f00d fb60 	bl	362fc <z_impl_k_sem_give>
	return ret;
   28c3c:	2000      	movs	r0, #0
}
   28c3e:	e7d6      	b.n	28bee <flash_nrf_write+0x2e>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   28c40:	5979      	ldr	r1, [r7, r5]
   28c42:	f00c faf7 	bl	35234 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   28c46:	3504      	adds	r5, #4
}
   28c48:	e7ec      	b.n	28c24 <flash_nrf_write+0x64>
		return 0;
   28c4a:	4620      	mov	r0, r4
   28c4c:	e7cf      	b.n	28bee <flash_nrf_write+0x2e>
   28c4e:	bf00      	nop
   28c50:	0003c2cc 	.word	0x0003c2cc
   28c54:	0003c32c 	.word	0x0003c32c
   28c58:	0003f7ec 	.word	0x0003f7ec
   28c5c:	0003f828 	.word	0x0003f828
   28c60:	20023784 	.word	0x20023784
   28c64:	40039000 	.word	0x40039000

00028c68 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   28c68:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   28c6a:	794b      	ldrb	r3, [r1, #5]
   28c6c:	2b01      	cmp	r3, #1
   28c6e:	d029      	beq.n	28cc4 <uarte_nrfx_configure+0x5c>
   28c70:	2b03      	cmp	r3, #3
   28c72:	d124      	bne.n	28cbe <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   28c74:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   28c76:	798b      	ldrb	r3, [r1, #6]
   28c78:	2b03      	cmp	r3, #3
   28c7a:	d120      	bne.n	28cbe <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   28c7c:	79cc      	ldrb	r4, [r1, #7]
   28c7e:	b124      	cbz	r4, 28c8a <uarte_nrfx_configure+0x22>
   28c80:	2c01      	cmp	r4, #1
   28c82:	d11c      	bne.n	28cbe <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   28c84:	6843      	ldr	r3, [r0, #4]
   28c86:	791b      	ldrb	r3, [r3, #4]
   28c88:	b1cb      	cbz	r3, 28cbe <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   28c8a:	790a      	ldrb	r2, [r1, #4]
   28c8c:	b112      	cbz	r2, 28c94 <uarte_nrfx_configure+0x2c>
   28c8e:	2a02      	cmp	r2, #2
   28c90:	d115      	bne.n	28cbe <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   28c92:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   28c94:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   28c96:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   28c98:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   28c9c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   28c9e:	d065      	beq.n	28d6c <uarte_nrfx_configure+0x104>
   28ca0:	d82d      	bhi.n	28cfe <uarte_nrfx_configure+0x96>
   28ca2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   28ca6:	d064      	beq.n	28d72 <uarte_nrfx_configure+0x10a>
   28ca8:	d816      	bhi.n	28cd8 <uarte_nrfx_configure+0x70>
   28caa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   28cae:	d062      	beq.n	28d76 <uarte_nrfx_configure+0x10e>
   28cb0:	d80a      	bhi.n	28cc8 <uarte_nrfx_configure+0x60>
   28cb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   28cb6:	d061      	beq.n	28d7c <uarte_nrfx_configure+0x114>
   28cb8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   28cbc:	d061      	beq.n	28d82 <uarte_nrfx_configure+0x11a>
   28cbe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28cc2:	e052      	b.n	28d6a <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   28cc4:	2600      	movs	r6, #0
   28cc6:	e7d6      	b.n	28c76 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   28cc8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   28ccc:	d05c      	beq.n	28d88 <uarte_nrfx_configure+0x120>
   28cce:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   28cd2:	d1f4      	bne.n	28cbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   28cd4:	4b37      	ldr	r3, [pc, #220]	; (28db4 <uarte_nrfx_configure+0x14c>)
   28cd6:	e03c      	b.n	28d52 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   28cd8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   28cdc:	d057      	beq.n	28d8e <uarte_nrfx_configure+0x126>
   28cde:	d807      	bhi.n	28cf0 <uarte_nrfx_configure+0x88>
   28ce0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   28ce4:	d055      	beq.n	28d92 <uarte_nrfx_configure+0x12a>
   28ce6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   28cea:	d1e8      	bne.n	28cbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   28cec:	4b32      	ldr	r3, [pc, #200]	; (28db8 <uarte_nrfx_configure+0x150>)
   28cee:	e030      	b.n	28d52 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   28cf0:	f647 2712 	movw	r7, #31250	; 0x7a12
   28cf4:	42bb      	cmp	r3, r7
   28cf6:	d1e2      	bne.n	28cbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   28cf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   28cfc:	e029      	b.n	28d52 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   28cfe:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   28d02:	d048      	beq.n	28d96 <uarte_nrfx_configure+0x12e>
   28d04:	d813      	bhi.n	28d2e <uarte_nrfx_configure+0xc6>
   28d06:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   28d0a:	d047      	beq.n	28d9c <uarte_nrfx_configure+0x134>
   28d0c:	d809      	bhi.n	28d22 <uarte_nrfx_configure+0xba>
   28d0e:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   28d12:	42bb      	cmp	r3, r7
   28d14:	d044      	beq.n	28da0 <uarte_nrfx_configure+0x138>
   28d16:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   28d1a:	d1d0      	bne.n	28cbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   28d1c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   28d20:	e017      	b.n	28d52 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   28d22:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   28d26:	d1ca      	bne.n	28cbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   28d28:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   28d2c:	e011      	b.n	28d52 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   28d2e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   28d32:	d038      	beq.n	28da6 <uarte_nrfx_configure+0x13e>
   28d34:	d808      	bhi.n	28d48 <uarte_nrfx_configure+0xe0>
   28d36:	4f21      	ldr	r7, [pc, #132]	; (28dbc <uarte_nrfx_configure+0x154>)
   28d38:	42bb      	cmp	r3, r7
   28d3a:	d037      	beq.n	28dac <uarte_nrfx_configure+0x144>
   28d3c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   28d40:	d1bd      	bne.n	28cbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   28d42:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   28d46:	e004      	b.n	28d52 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   28d48:	4f1d      	ldr	r7, [pc, #116]	; (28dc0 <uarte_nrfx_configure+0x158>)
   28d4a:	42bb      	cmp	r3, r7
   28d4c:	d1b7      	bne.n	28cbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   28d4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   28d52:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   28d56:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   28d58:	4334      	orrs	r4, r6
   28d5a:	4322      	orrs	r2, r4
   28d5c:	3304      	adds	r3, #4
   28d5e:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   28d60:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   28d64:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   28d68:	2000      	movs	r0, #0
}
   28d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   28d6c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   28d70:	e7ef      	b.n	28d52 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   28d72:	4b14      	ldr	r3, [pc, #80]	; (28dc4 <uarte_nrfx_configure+0x15c>)
   28d74:	e7ed      	b.n	28d52 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   28d76:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   28d7a:	e7ea      	b.n	28d52 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   28d7c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   28d80:	e7e7      	b.n	28d52 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   28d82:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   28d86:	e7e4      	b.n	28d52 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   28d88:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   28d8c:	e7e1      	b.n	28d52 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   28d8e:	4b0e      	ldr	r3, [pc, #56]	; (28dc8 <uarte_nrfx_configure+0x160>)
   28d90:	e7df      	b.n	28d52 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   28d92:	4b0e      	ldr	r3, [pc, #56]	; (28dcc <uarte_nrfx_configure+0x164>)
   28d94:	e7dd      	b.n	28d52 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   28d96:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   28d9a:	e7da      	b.n	28d52 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   28d9c:	4b0c      	ldr	r3, [pc, #48]	; (28dd0 <uarte_nrfx_configure+0x168>)
   28d9e:	e7d8      	b.n	28d52 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   28da0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   28da4:	e7d5      	b.n	28d52 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   28da6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   28daa:	e7d2      	b.n	28d52 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   28dac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   28db0:	e7cf      	b.n	28d52 <uarte_nrfx_configure+0xea>
   28db2:	bf00      	nop
   28db4:	0013b000 	.word	0x0013b000
   28db8:	004ea000 	.word	0x004ea000
   28dbc:	0003d090 	.word	0x0003d090
   28dc0:	000f4240 	.word	0x000f4240
   28dc4:	00275000 	.word	0x00275000
   28dc8:	0075c000 	.word	0x0075c000
   28dcc:	003af000 	.word	0x003af000
   28dd0:	013a9000 	.word	0x013a9000

00028dd4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   28dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28dd8:	4606      	mov	r6, r0
   28dda:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   28ddc:	68c5      	ldr	r5, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   28dde:	f012 f81e 	bl	3ae1e <k_is_in_isr>
   28de2:	2800      	cmp	r0, #0
   28de4:	d138      	bne.n	28e58 <uarte_nrfx_poll_out+0x84>
	return !z_sys_post_kernel;
   28de6:	4b31      	ldr	r3, [pc, #196]	; (28eac <uarte_nrfx_poll_out+0xd8>)
   28de8:	781b      	ldrb	r3, [r3, #0]
   28dea:	f083 0301 	eor.w	r3, r3, #1
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	int key;

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
   28dee:	692a      	ldr	r2, [r5, #16]
   28df0:	2a01      	cmp	r2, #1
   28df2:	d12f      	bne.n	28e54 <uarte_nrfx_poll_out+0x80>
	return config->uarte_regs;
   28df4:	6872      	ldr	r2, [r6, #4]
   28df6:	6814      	ldr	r4, [r2, #0]
		return;
	}
#endif
	if (isr_mode) {
   28df8:	b3ab      	cbz	r3, 28e66 <uarte_nrfx_poll_out+0x92>
   28dfa:	f04f 0320 	mov.w	r3, #32
   28dfe:	f3ef 8811 	mrs	r8, BASEPRI
   28e02:	f383 8811 	msr	BASEPRI, r3
   28e06:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   28e0a:	4630      	mov	r0, r6
			key = irq_lock();
   28e0c:	4641      	mov	r1, r8
			if (is_tx_ready(dev)) {
   28e0e:	f010 fe3f 	bl	39a90 <is_tx_ready>
   28e12:	b318      	cbz	r0, 28e5c <uarte_nrfx_poll_out+0x88>
#if CONFIG_UART_ASYNC_API
				if (data->async->tx_size &&
   28e14:	68eb      	ldr	r3, [r5, #12]
   28e16:	68da      	ldr	r2, [r3, #12]
   28e18:	b13a      	cbz	r2, 28e2a <uarte_nrfx_poll_out+0x56>
					data->async->tx_amount < 0) {
   28e1a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
				if (data->async->tx_size &&
   28e1e:	2a00      	cmp	r2, #0
   28e20:	da03      	bge.n	28e2a <uarte_nrfx_poll_out+0x56>
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
   28e22:	f8d4 254c 	ldr.w	r2, [r4, #1356]	; 0x54c
					data->async->tx_amount =
   28e26:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_reg->TXD.MAXCNT = length;
   28e2a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28e2c:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   28e2e:	f805 7f14 	strb.w	r7, [r5, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   28e32:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   28e36:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28e3a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   28e3e:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   28e42:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   28e46:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28e4a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   28e4c:	f381 8811 	msr	BASEPRI, r1
   28e50:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   28e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   28e58:	2301      	movs	r3, #1
   28e5a:	e7c8      	b.n	28dee <uarte_nrfx_poll_out+0x1a>
   28e5c:	f388 8811 	msr	BASEPRI, r8
   28e60:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   28e64:	e7c9      	b.n	28dfa <uarte_nrfx_poll_out+0x26>
   28e66:	f04f 0864 	mov.w	r8, #100	; 0x64
			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   28e6a:	4630      	mov	r0, r6
   28e6c:	f010 fe10 	bl	39a90 <is_tx_ready>
   28e70:	b950      	cbnz	r0, 28e88 <uarte_nrfx_poll_out+0xb4>
   28e72:	2001      	movs	r0, #1
   28e74:	f011 fd65 	bl	3a942 <nrfx_busy_wait>
   28e78:	f1b8 0801 	subs.w	r8, r8, #1
   28e7c:	d1f5      	bne.n	28e6a <uarte_nrfx_poll_out+0x96>
	return z_impl_k_sleep(timeout);
   28e7e:	2100      	movs	r1, #0
   28e80:	2021      	movs	r0, #33	; 0x21
   28e82:	f00d fa15 	bl	362b0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   28e86:	e7ee      	b.n	28e66 <uarte_nrfx_poll_out+0x92>
	__asm__ volatile(
   28e88:	f04f 0320 	mov.w	r3, #32
   28e8c:	f3ef 8111 	mrs	r1, BASEPRI
   28e90:	f383 8811 	msr	BASEPRI, r3
   28e94:	f3bf 8f6f 	isb	sy
				if (is_tx_ready(dev)) {
   28e98:	4630      	mov	r0, r6
   28e9a:	f010 fdf9 	bl	39a90 <is_tx_ready>
   28e9e:	2800      	cmp	r0, #0
   28ea0:	d1c3      	bne.n	28e2a <uarte_nrfx_poll_out+0x56>
	__asm__ volatile(
   28ea2:	f381 8811 	msr	BASEPRI, r1
   28ea6:	f3bf 8f6f 	isb	sy
}
   28eaa:	e7e8      	b.n	28e7e <uarte_nrfx_poll_out+0xaa>
   28eac:	2002cb9f 	.word	0x2002cb9f

00028eb0 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   28eb0:	6843      	ldr	r3, [r0, #4]
{
   28eb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return config->uarte_regs;
   28eb6:	681d      	ldr	r5, [r3, #0]
	if (!hw_rx_counting_enabled(data)
   28eb8:	68c3      	ldr	r3, [r0, #12]
{
   28eba:	4604      	mov	r4, r0
	if (!hw_rx_counting_enabled(data)
   28ebc:	68db      	ldr	r3, [r3, #12]
{
   28ebe:	b088      	sub	sp, #32
	if (!hw_rx_counting_enabled(data)
   28ec0:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   28ec4:	b972      	cbnz	r2, 28ee4 <uarte_nrfx_isr_async+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28ec6:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   28eca:	b159      	cbz	r1, 28ee4 <uarte_nrfx_isr_async+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28ecc:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   28ed0:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   28ed4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   28ed8:	3201      	adds	r2, #1
   28eda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
   28ede:	b008      	add	sp, #32
   28ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28ee4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   28ee8:	b31b      	cbz	r3, 28f32 <uarte_nrfx_isr_async+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28eea:	2100      	movs	r1, #0
   28eec:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   28ef0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   28ef4:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   28ef8:	2214      	movs	r2, #20
    p_reg->ERRORSRC = errsrc_mask;
   28efa:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
   28efe:	a803      	add	r0, sp, #12
   28f00:	f012 fa77 	bl	3b3f2 <memset>
   28f04:	2306      	movs	r3, #6
   28f06:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   28f0a:	07f3      	lsls	r3, r6, #31
   28f0c:	f100 80f1 	bmi.w	290f2 <uarte_nrfx_isr_async+0x242>
   28f10:	07b7      	lsls	r7, r6, #30
   28f12:	f100 80f0 	bmi.w	290f6 <uarte_nrfx_isr_async+0x246>
   28f16:	0770      	lsls	r0, r6, #29
   28f18:	f100 80ef 	bmi.w	290fa <uarte_nrfx_isr_async+0x24a>
   28f1c:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   28f20:	4620      	mov	r0, r4
   28f22:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   28f24:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   28f28:	f010 fe1e 	bl	39b68 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   28f2c:	4620      	mov	r0, r4
   28f2e:	f010 ff17 	bl	39d60 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28f32:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   28f36:	b1eb      	cbz	r3, 28f74 <uarte_nrfx_isr_async+0xc4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28f38:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   28f3a:	68e6      	ldr	r6, [r4, #12]
   28f3c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   28f40:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (!data->async->rx_enabled) {
   28f44:	68f0      	ldr	r0, [r6, #12]
	return config->uarte_regs;
   28f46:	6863      	ldr	r3, [r4, #4]
   28f48:	f8d3 8000 	ldr.w	r8, [r3]
	if (!data->async->rx_enabled) {
   28f4c:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
   28f50:	2b00      	cmp	r3, #0
   28f52:	f040 80d4 	bne.w	290fe <uarte_nrfx_isr_async+0x24e>
		if (data->async->rx_buf == NULL) {
   28f56:	6d01      	ldr	r1, [r0, #80]	; 0x50
   28f58:	2900      	cmp	r1, #0
   28f5a:	f040 80d0 	bne.w	290fe <uarte_nrfx_isr_async+0x24e>
			struct uart_event evt = {
   28f5e:	2214      	movs	r2, #20
   28f60:	a803      	add	r0, sp, #12
   28f62:	f012 fa46 	bl	3b3f2 <memset>
   28f66:	2305      	movs	r3, #5
			user_callback(dev, &evt);
   28f68:	4620      	mov	r0, r4
   28f6a:	a903      	add	r1, sp, #12
			struct uart_event evt = {
   28f6c:	f88d 300c 	strb.w	r3, [sp, #12]
			user_callback(dev, &evt);
   28f70:	f010 fdfa 	bl	39b68 <user_callback>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28f74:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   28f78:	b37b      	cbz	r3, 28fda <uarte_nrfx_isr_async+0x12a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28f7a:	2100      	movs	r1, #0
	struct uart_event evt = {
   28f7c:	2214      	movs	r2, #20
   28f7e:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
   28f82:	a803      	add	r0, sp, #12
   28f84:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   28f88:	68e6      	ldr	r6, [r4, #12]
	struct uart_event evt = {
   28f8a:	f012 fa32 	bl	3b3f2 <memset>
   28f8e:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   28f90:	a903      	add	r1, sp, #12
   28f92:	4620      	mov	r0, r4
	struct uart_event evt = {
   28f94:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   28f98:	f010 fde6 	bl	39b68 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_MS) {
   28f9c:	68f6      	ldr	r6, [r6, #12]
   28f9e:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   28fa0:	1c59      	adds	r1, r3, #1
   28fa2:	d01a      	beq.n	28fda <uarte_nrfx_isr_async+0x12a>
   28fa4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   28fa8:	f240 38e7 	movw	r8, #999	; 0x3e7
   28fac:	f04f 0900 	mov.w	r9, #0
		data->async->rx_timeout_left = data->async->rx_timeout;
   28fb0:	6773      	str	r3, [r6, #116]	; 0x74
			      K_MSEC(data->async->rx_timeout_slab),
   28fb2:	6f33      	ldr	r3, [r6, #112]	; 0x70
   28fb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28fb8:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   28fbc:	fbc0 8901 	smlal	r8, r9, r0, r1
   28fc0:	2300      	movs	r3, #0
   28fc2:	4640      	mov	r0, r8
   28fc4:	4649      	mov	r1, r9
   28fc6:	f7f3 fbf7 	bl	1c7b8 <__aeabi_uldivmod>
   28fca:	4602      	mov	r2, r0
   28fcc:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   28fce:	e9cd 0100 	strd	r0, r1, [sp]
   28fd2:	f106 0078 	add.w	r0, r6, #120	; 0x78
   28fd6:	f00d fccb 	bl	36970 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28fda:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO)) {
   28fde:	b363      	cbz	r3, 2903a <uarte_nrfx_isr_async+0x18a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28fe0:	2600      	movs	r6, #0
	struct uart_event evt = {
   28fe2:	f04f 0804 	mov.w	r8, #4
	struct uarte_nrfx_data *data = get_dev_data(dev);
   28fe6:	68e7      	ldr	r7, [r4, #12]
	struct uart_event evt = {
   28fe8:	2214      	movs	r2, #20
   28fea:	4631      	mov	r1, r6
   28fec:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
   28ff0:	a803      	add	r0, sp, #12
   28ff2:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   28ff6:	f012 f9fc 	bl	3b3f2 <memset>
   28ffa:	f88d 800c 	strb.w	r8, [sp, #12]
		.data.rx_buf.buf = data->async->rx_buf,
   28ffe:	68fb      	ldr	r3, [r7, #12]
	user_callback(dev, &evt);
   29000:	4620      	mov	r0, r4
	struct uart_event evt = {
   29002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
	user_callback(dev, &evt);
   29004:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   29006:	9304      	str	r3, [sp, #16]
	user_callback(dev, &evt);
   29008:	f010 fdae 	bl	39b68 <user_callback>
	data->async->rx_buf = NULL;
   2900c:	68fb      	ldr	r3, [r7, #12]
   2900e:	651e      	str	r6, [r3, #80]	; 0x50
	if (data->async->rx_next_buf) {
   29010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   29012:	b143      	cbz	r3, 29026 <uarte_nrfx_isr_async+0x176>
		user_callback(dev, &evt);
   29014:	4620      	mov	r0, r4
   29016:	a903      	add	r1, sp, #12
		evt.data.rx_buf.buf = data->async->rx_next_buf;
   29018:	9304      	str	r3, [sp, #16]
		evt.type = UART_RX_BUF_RELEASED;
   2901a:	f88d 800c 	strb.w	r8, [sp, #12]
		user_callback(dev, &evt);
   2901e:	f010 fda3 	bl	39b68 <user_callback>
		data->async->rx_next_buf = NULL;
   29022:	68fb      	ldr	r3, [r7, #12]
   29024:	65de      	str	r6, [r3, #92]	; 0x5c
	return config->uarte_regs;
   29026:	6863      	ldr	r3, [r4, #4]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   29028:	4a86      	ldr	r2, [pc, #536]	; (29244 <uarte_nrfx_isr_async+0x394>)
   2902a:	681b      	ldr	r3, [r3, #0]
   2902c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   29030:	2205      	movs	r2, #5
   29032:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29036:	2201      	movs	r2, #1
   29038:	62da      	str	r2, [r3, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2903a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   2903e:	b1db      	cbz	r3, 29078 <uarte_nrfx_isr_async+0x1c8>
    return p_reg->INTENSET & mask;
   29040:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   29044:	05da      	lsls	r2, r3, #23
   29046:	d517      	bpl.n	29078 <uarte_nrfx_isr_async+0x1c8>
	return config->uarte_regs;
   29048:	6863      	ldr	r3, [r4, #4]
   2904a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2904c:	f04f 0120 	mov.w	r1, #32
   29050:	f3ef 8211 	mrs	r2, BASEPRI
   29054:	f381 8811 	msr	BASEPRI, r1
   29058:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2905c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   29060:	b131      	cbz	r1, 29070 <uarte_nrfx_isr_async+0x1c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29062:	2100      	movs	r1, #0
   29064:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   29068:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2906c:	2101      	movs	r1, #1
   2906e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   29070:	f382 8811 	msr	BASEPRI, r2
   29074:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29078:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   2907c:	2b00      	cmp	r3, #0
   2907e:	f43f af2e 	beq.w	28ede <uarte_nrfx_isr_async+0x2e>
    return p_reg->INTENSET & mask;
   29082:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   29086:	025b      	lsls	r3, r3, #9
   29088:	f57f af29 	bpl.w	28ede <uarte_nrfx_isr_async+0x2e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2908c:	68e7      	ldr	r7, [r4, #12]
	return config->uarte_regs;
   2908e:	6863      	ldr	r3, [r4, #4]
	if (!data->async->tx_buf) {
   29090:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
   29092:	681d      	ldr	r5, [r3, #0]
	if (!data->async->tx_buf) {
   29094:	6882      	ldr	r2, [r0, #8]
   29096:	2a00      	cmp	r2, #0
   29098:	f040 80a1 	bne.w	291de <uarte_nrfx_isr_async+0x32e>
		if (data->async->pend_tx_buf) {
   2909c:	6903      	ldr	r3, [r0, #16]
   2909e:	2b00      	cmp	r3, #0
   290a0:	f43f af1d 	beq.w	28ede <uarte_nrfx_isr_async+0x2e>
	__asm__ volatile(
   290a4:	f04f 0320 	mov.w	r3, #32
   290a8:	f3ef 8011 	mrs	r0, BASEPRI
   290ac:	f383 8811 	msr	BASEPRI, r3
   290b0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   290b4:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
			if (nrf_uarte_event_check(uarte,
   290b8:	b1b3      	cbz	r3, 290e8 <uarte_nrfx_isr_async+0x238>
				data->async->tx_amount = -1;
   290ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
				data->async->tx_buf = data->async->pend_tx_buf;
   290be:	68fb      	ldr	r3, [r7, #12]
   290c0:	6919      	ldr	r1, [r3, #16]
				data->async->tx_amount = -1;
   290c2:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
				data->async->tx_buf = data->async->pend_tx_buf;
   290c6:	6099      	str	r1, [r3, #8]
				data->async->pend_tx_buf = NULL;
   290c8:	611a      	str	r2, [r3, #16]
				tx_start(uarte, data->async->tx_buf,
   290ca:	68db      	ldr	r3, [r3, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   290cc:	f8c5 1544 	str.w	r1, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   290d0:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   290d4:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   290d8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   290dc:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   290e0:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   290e4:	2301      	movs	r3, #1
   290e6:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   290e8:	f380 8811 	msr	BASEPRI, r0
   290ec:	f3bf 8f6f 	isb	sy
}
   290f0:	e6f5      	b.n	28ede <uarte_nrfx_isr_async+0x2e>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   290f2:	2601      	movs	r6, #1
   290f4:	e714      	b.n	28f20 <uarte_nrfx_isr_async+0x70>
   290f6:	2602      	movs	r6, #2
   290f8:	e712      	b.n	28f20 <uarte_nrfx_isr_async+0x70>
   290fa:	2604      	movs	r6, #4
   290fc:	e710      	b.n	28f20 <uarte_nrfx_isr_async+0x70>
	data->async->is_in_irq = true;
   290fe:	2301      	movs	r3, #1
   29100:	f880 30ba 	strb.w	r3, [r0, #186]	; 0xba
	z_impl_k_timer_stop(timer);
   29104:	3078      	adds	r0, #120	; 0x78
   29106:	f011 ff8b 	bl	3b020 <z_impl_k_timer_stop>
	int rx_len = rx_amount - data->async->rx_offset;
   2910a:	68f7      	ldr	r7, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   2910c:	f8d8 353c 	ldr.w	r3, [r8, #1340]	; 0x53c
   29110:	f8d7 9058 	ldr.w	r9, [r7, #88]	; 0x58
	data->async->rx_total_user_byte_cnt += rx_len;
   29114:	6eba      	ldr	r2, [r7, #104]	; 0x68
	int rx_len = rx_amount - data->async->rx_offset;
   29116:	eba3 0309 	sub.w	r3, r3, r9
	data->async->rx_total_user_byte_cnt += rx_len;
   2911a:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
	if (!hw_rx_counting_enabled(data)) {
   2911e:	f897 10b9 	ldrb.w	r1, [r7, #185]	; 0xb9
	data->async->rx_total_user_byte_cnt += rx_len;
   29122:	4452      	add	r2, sl
   29124:	66ba      	str	r2, [r7, #104]	; 0x68
	if (!hw_rx_counting_enabled(data)) {
   29126:	b909      	cbnz	r1, 2912c <uarte_nrfx_isr_async+0x27c>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   29128:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
	if (rx_len > 0) {
   2912c:	2b00      	cmp	r3, #0
   2912e:	dd10      	ble.n	29152 <uarte_nrfx_isr_async+0x2a2>
		struct uart_event evt = {
   29130:	2100      	movs	r1, #0
   29132:	2214      	movs	r2, #20
   29134:	a803      	add	r0, sp, #12
   29136:	f012 f95c 	bl	3b3f2 <memset>
   2913a:	2302      	movs	r3, #2
   2913c:	f88d 300c 	strb.w	r3, [sp, #12]
   29140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
		user_callback(dev, &evt);
   29142:	4620      	mov	r0, r4
   29144:	a903      	add	r1, sp, #12
		struct uart_event evt = {
   29146:	e9cd 3904 	strd	r3, r9, [sp, #16]
   2914a:	f8cd a018 	str.w	sl, [sp, #24]
		user_callback(dev, &evt);
   2914e:	f010 fd0b 	bl	39b68 <user_callback>
	if (!data->async->rx_enabled) {
   29152:	68f7      	ldr	r7, [r6, #12]
   29154:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
   29158:	b913      	cbnz	r3, 29160 <uarte_nrfx_isr_async+0x2b0>
		data->async->is_in_irq = false;
   2915a:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
		return;
   2915e:	e709      	b.n	28f74 <uarte_nrfx_isr_async+0xc4>
	struct uart_event evt = {
   29160:	2214      	movs	r2, #20
   29162:	2100      	movs	r1, #0
   29164:	a803      	add	r0, sp, #12
   29166:	f012 f944 	bl	3b3f2 <memset>
   2916a:	2304      	movs	r3, #4
   2916c:	f88d 300c 	strb.w	r3, [sp, #12]
   29170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	user_callback(dev, &evt);
   29172:	4620      	mov	r0, r4
   29174:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   29176:	9304      	str	r3, [sp, #16]
	user_callback(dev, &evt);
   29178:	f010 fcf6 	bl	39b68 <user_callback>
	__asm__ volatile(
   2917c:	f04f 0320 	mov.w	r3, #32
   29180:	f3ef 8111 	mrs	r1, BASEPRI
   29184:	f383 8811 	msr	BASEPRI, r3
   29188:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   2918c:	68f3      	ldr	r3, [r6, #12]
   2918e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
		data->async->rx_buf = data->async->rx_next_buf;
   29190:	651a      	str	r2, [r3, #80]	; 0x50
	if (data->async->rx_next_buf) {
   29192:	b18a      	cbz	r2, 291b8 <uarte_nrfx_isr_async+0x308>
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   29194:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   29196:	655a      	str	r2, [r3, #84]	; 0x54
		data->async->rx_next_buf = NULL;
   29198:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   2919a:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
		data->async->rx_offset = 0;
   2919e:	659a      	str	r2, [r3, #88]	; 0x58
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   291a0:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   291a4:	b913      	cbnz	r3, 291ac <uarte_nrfx_isr_async+0x2fc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   291a6:	2301      	movs	r3, #1
   291a8:	f8c8 3000 	str.w	r3, [r8]
    p_reg->SHORTS &= ~(mask);
   291ac:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
   291b0:	f023 0320 	bic.w	r3, r3, #32
   291b4:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	__asm__ volatile(
   291b8:	f381 8811 	msr	BASEPRI, r1
   291bc:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   291c0:	68f3      	ldr	r3, [r6, #12]
   291c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   291c4:	b933      	cbnz	r3, 291d4 <uarte_nrfx_isr_async+0x324>
		evt.type = UART_RX_DISABLED;
   291c6:	2305      	movs	r3, #5
		user_callback(dev, &evt);
   291c8:	4620      	mov	r0, r4
   291ca:	a903      	add	r1, sp, #12
		evt.type = UART_RX_DISABLED;
   291cc:	f88d 300c 	strb.w	r3, [sp, #12]
		user_callback(dev, &evt);
   291d0:	f010 fcca 	bl	39b68 <user_callback>
	data->async->is_in_irq = false;
   291d4:	2200      	movs	r2, #0
   291d6:	68f3      	ldr	r3, [r6, #12]
   291d8:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
   291dc:	e6ca      	b.n	28f74 <uarte_nrfx_isr_async+0xc4>
   291de:	3018      	adds	r0, #24
   291e0:	f011 ff1e 	bl	3b020 <z_impl_k_timer_stop>
	__asm__ volatile(
   291e4:	f04f 0320 	mov.w	r3, #32
   291e8:	f3ef 8211 	mrs	r2, BASEPRI
   291ec:	f383 8811 	msr	BASEPRI, r3
   291f0:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   291f4:	68fb      	ldr	r3, [r7, #12]
   291f6:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   291fa:	2900      	cmp	r1, #0
   291fc:	bfac      	ite	ge
   291fe:	f8d3 60b4 	ldrge.w	r6, [r3, #180]	; 0xb4
    return p_reg->TXD.AMOUNT;
   29202:	f8d5 654c 	ldrlt.w	r6, [r5, #1356]	; 0x54c
	__asm__ volatile(
   29206:	f382 8811 	msr	BASEPRI, r2
   2920a:	f3bf 8f6f 	isb	sy
	struct uart_event evt = {
   2920e:	2214      	movs	r2, #20
   29210:	2100      	movs	r1, #0
   29212:	a803      	add	r0, sp, #12
   29214:	f012 f8ed 	bl	3b3f2 <memset>
		.data.tx.buf = data->async->tx_buf,
   29218:	68fb      	ldr	r3, [r7, #12]
	user_callback(dev, &evt);
   2921a:	4620      	mov	r0, r4
	struct uart_event evt = {
   2921c:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   2921e:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   29220:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   29224:	68da      	ldr	r2, [r3, #12]
   29226:	1ab6      	subs	r6, r6, r2
   29228:	bf18      	it	ne
   2922a:	2601      	movne	r6, #1
    p_reg->INTENCLR = mask;
   2922c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   29230:	f88d 600c 	strb.w	r6, [sp, #12]
   29234:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	data->async->tx_buf = NULL;
   29238:	2200      	movs	r2, #0
   2923a:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   2923c:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   2923e:	f010 fc93 	bl	39b68 <user_callback>
   29242:	e64c      	b.n	28ede <uarte_nrfx_isr_async+0x2e>
   29244:	2002c07d 	.word	0x2002c07d

00029248 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   29248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2924c:	2700      	movs	r7, #0
	return config->uarte_regs;
   2924e:	6843      	ldr	r3, [r0, #4]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   29250:	f8d0 800c 	ldr.w	r8, [r0, #12]
	return config->uarte_regs;
   29254:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   29256:	460d      	mov	r5, r1
   29258:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
   2925c:	4606      	mov	r6, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   2925e:	f8c8 0000 	str.w	r0, [r8]

	nrf_gpio_pin_write(config->pseltxd, 1);
   29262:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   29264:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
   29266:	4b90      	ldr	r3, [pc, #576]	; (294a8 <uarte_instance_init.isra.0+0x260>)
    *p_pin = pin_number & 0x1F;
   29268:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2926c:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   2926e:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   29270:	2103      	movs	r1, #3
   29272:	3280      	adds	r2, #128	; 0x80
   29274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   29278:	686a      	ldr	r2, [r5, #4]
   2927a:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   2927c:	bf1e      	ittt	ne
   2927e:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   29282:	3180      	addne	r1, #128	; 0x80
   29284:	f843 7021 	strne.w	r7, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   29288:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
   2928a:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   2928e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   29292:	1c4a      	adds	r2, r1, #1
   29294:	bf1f      	itttt	ne
   29296:	2000      	movne	r0, #0
    *p_pin = pin_number & 0x1F;
   29298:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2929c:	3280      	addne	r2, #128	; 0x80
   2929e:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   292a2:	68e8      	ldr	r0, [r5, #12]
   292a4:	1c47      	adds	r7, r0, #1
   292a6:	d008      	beq.n	292ba <uarte_instance_init.isra.0+0x72>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   292a8:	2701      	movs	r7, #1
    *p_pin = pin_number & 0x1F;
   292aa:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   292ae:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
   292b0:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   292b2:	2703      	movs	r7, #3
   292b4:	3280      	adds	r2, #128	; 0x80
   292b6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   292ba:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   292be:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   292c2:	68f1      	ldr	r1, [r6, #12]
   292c4:	4630      	mov	r0, r6
   292c6:	3104      	adds	r1, #4
   292c8:	f7ff fcce 	bl	28c68 <uarte_nrfx_configure>
	if (err) {
   292cc:	4681      	mov	r9, r0
   292ce:	2800      	cmp	r0, #0
   292d0:	f040 80c7 	bne.w	29462 <uarte_instance_init.isra.0+0x21a>
		return err;
	}

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
   292d4:	2701      	movs	r7, #1
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   292d6:	6873      	ldr	r3, [r6, #4]
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
   292d8:	f8c8 7010 	str.w	r7, [r8, #16]
	if (get_dev_config(dev)->ppi_endtx) {
   292dc:	799b      	ldrb	r3, [r3, #6]
   292de:	b303      	cbz	r3, 29322 <uarte_instance_init.isra.0+0xda>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   292e0:	f108 0016 	add.w	r0, r8, #22
   292e4:	f00b ff54 	bl	35190 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   292e8:	4b70      	ldr	r3, [pc, #448]	; (294ac <uarte_instance_init.isra.0+0x264>)
   292ea:	4298      	cmp	r0, r3
   292ec:	d00b      	beq.n	29306 <uarte_instance_init.isra.0+0xbe>
   292ee:	4970      	ldr	r1, [pc, #448]	; (294b0 <uarte_instance_init.isra.0+0x268>)
   292f0:	4b70      	ldr	r3, [pc, #448]	; (294b4 <uarte_instance_init.isra.0+0x26c>)
		LOG_ERR("Failed to allocate PPI Channel");
   292f2:	4871      	ldr	r0, [pc, #452]	; (294b8 <uarte_instance_init.isra.0+0x270>)
   292f4:	1ac9      	subs	r1, r1, r3
   292f6:	08c9      	lsrs	r1, r1, #3
   292f8:	0189      	lsls	r1, r1, #6
   292fa:	4339      	orrs	r1, r7
   292fc:	f00f f8e0 	bl	384c0 <log_0>
		err = endtx_stoptx_ppi_init(uarte, data);
		if (err < 0) {
   29300:	f06f 0904 	mvn.w	r9, #4
   29304:	e0ad      	b.n	29462 <uarte_instance_init.isra.0+0x21a>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   29306:	f898 3016 	ldrb.w	r3, [r8, #22]
   2930a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2930e:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   29312:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   29316:	f898 3016 	ldrb.w	r3, [r8, #22]
   2931a:	409f      	lsls	r7, r3
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   2931c:	4b67      	ldr	r3, [pc, #412]	; (294bc <uarte_instance_init.isra.0+0x274>)
   2931e:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
   29322:	f8d8 300c 	ldr.w	r3, [r8, #12]
   29326:	2b00      	cmp	r3, #0
   29328:	f000 80aa 	beq.w	29480 <uarte_instance_init.isra.0+0x238>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2932c:	68f7      	ldr	r7, [r6, #12]
   2932e:	f8d6 a004 	ldr.w	sl, [r6, #4]
		return data->async->hw_rx_counting;
   29332:	68fb      	ldr	r3, [r7, #12]
	return config->uarte_regs;
   29334:	f8da 5000 	ldr.w	r5, [sl]
	if (hw_rx_counting_enabled(data)) {
   29338:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   2933c:	b1eb      	cbz	r3, 2937a <uarte_instance_init.isra.0+0x132>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   2933e:	2300      	movs	r3, #0
   29340:	4a5f      	ldr	r2, [pc, #380]	; (294c0 <uarte_instance_init.isra.0+0x278>)
		ret = nrfx_timer_init(&cfg->timer,
   29342:	f10a 0b08 	add.w	fp, sl, #8
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   29346:	e9cd 2300 	strd	r2, r3, [sp]
		ret = nrfx_timer_init(&cfg->timer,
   2934a:	4669      	mov	r1, sp
   2934c:	4a5d      	ldr	r2, [pc, #372]	; (294c4 <uarte_instance_init.isra.0+0x27c>)
   2934e:	4658      	mov	r0, fp
   29350:	f00b ff82 	bl	35258 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   29354:	4a55      	ldr	r2, [pc, #340]	; (294ac <uarte_instance_init.isra.0+0x264>)
   29356:	4290      	cmp	r0, r2
   29358:	f000 8087 	beq.w	2946a <uarte_instance_init.isra.0+0x222>
   2935c:	4b55      	ldr	r3, [pc, #340]	; (294b4 <uarte_instance_init.isra.0+0x26c>)
   2935e:	4954      	ldr	r1, [pc, #336]	; (294b0 <uarte_instance_init.isra.0+0x268>)
			LOG_ERR("Timer already initialized, "
   29360:	4859      	ldr	r0, [pc, #356]	; (294c8 <uarte_instance_init.isra.0+0x280>)
   29362:	1ac9      	subs	r1, r1, r3
   29364:	08c9      	lsrs	r1, r1, #3
   29366:	0189      	lsls	r1, r1, #6
   29368:	f041 0101 	orr.w	r1, r1, #1
   2936c:	f00f f8a8 	bl	384c0 <log_0>
			data->async->hw_rx_counting = false;
   29370:	f04f 0200 	mov.w	r2, #0
   29374:	68fb      	ldr	r3, [r7, #12]
   29376:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	if (hw_rx_counting_enabled(data)) {
   2937a:	68f8      	ldr	r0, [r7, #12]
   2937c:	f890 30b9 	ldrb.w	r3, [r0, #185]	; 0xb9
   29380:	b1bb      	cbz	r3, 293b2 <uarte_instance_init.isra.0+0x16a>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   29382:	30b0      	adds	r0, #176	; 0xb0
   29384:	f00b ff04 	bl	35190 <nrfx_dppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   29388:	4b48      	ldr	r3, [pc, #288]	; (294ac <uarte_instance_init.isra.0+0x264>)
   2938a:	4298      	cmp	r0, r3
   2938c:	d011      	beq.n	293b2 <uarte_instance_init.isra.0+0x16a>
   2938e:	4b49      	ldr	r3, [pc, #292]	; (294b4 <uarte_instance_init.isra.0+0x26c>)
   29390:	4947      	ldr	r1, [pc, #284]	; (294b0 <uarte_instance_init.isra.0+0x268>)
			LOG_ERR("Failed to allocate PPI Channel, "
   29392:	484e      	ldr	r0, [pc, #312]	; (294cc <uarte_instance_init.isra.0+0x284>)
   29394:	1ac9      	subs	r1, r1, r3
   29396:	08c9      	lsrs	r1, r1, #3
   29398:	0189      	lsls	r1, r1, #6
   2939a:	f041 0101 	orr.w	r1, r1, #1
   2939e:	f00f f88f 	bl	384c0 <log_0>
			data->async->hw_rx_counting = false;
   293a2:	2200      	movs	r2, #0
   293a4:	68fb      	ldr	r3, [r7, #12]
			nrfx_timer_uninit(&cfg->timer);
   293a6:	f10a 0008 	add.w	r0, sl, #8
			data->async->hw_rx_counting = false;
   293aa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			nrfx_timer_uninit(&cfg->timer);
   293ae:	f00b ffbb 	bl	35328 <nrfx_timer_uninit>
	if (hw_rx_counting_enabled(data)) {
   293b2:	68fb      	ldr	r3, [r7, #12]
   293b4:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   293b8:	2a00      	cmp	r2, #0
   293ba:	d05d      	beq.n	29478 <uarte_instance_init.isra.0+0x230>
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   293bc:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   293c0:	f8da 1008 	ldr.w	r1, [sl, #8]
   293c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   293c8:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   293cc:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
   293d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   293d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   293d8:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   293dc:	f00b fef6 	bl	351cc <nrfx_dppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   293e0:	4b32      	ldr	r3, [pc, #200]	; (294ac <uarte_instance_init.isra.0+0x264>)
   293e2:	4298      	cmp	r0, r3
   293e4:	d18c      	bne.n	29300 <uarte_instance_init.isra.0+0xb8>
    p_reg->INTENSET = mask;
   293e6:	4b3a      	ldr	r3, [pc, #232]	; (294d0 <uarte_instance_init.isra.0+0x288>)
   293e8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   293ec:	2308      	movs	r3, #8
   293ee:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   293f2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   293f6:	b193      	cbz	r3, 2941e <uarte_instance_init.isra.0+0x1d6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   293f8:	2301      	movs	r3, #1
   293fa:	606b      	str	r3, [r5, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   293fc:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO)) {
   29400:	2b00      	cmp	r3, #0
   29402:	d0fb      	beq.n	293fc <uarte_instance_init.isra.0+0x1b4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29404:	2300      	movs	r3, #0
   29406:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
   2940a:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
   2940e:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   29412:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   29416:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   2941a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   2941e:	68f8      	ldr	r0, [r7, #12]
   29420:	2200      	movs	r2, #0
   29422:	492c      	ldr	r1, [pc, #176]	; (294d4 <uarte_instance_init.isra.0+0x28c>)
   29424:	3078      	adds	r0, #120	; 0x78
   29426:	f011 fdef 	bl	3b008 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   2942a:	68fb      	ldr	r3, [r7, #12]
	timer->user_data = user_data;
   2942c:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   29430:	68f8      	ldr	r0, [r7, #12]
   29432:	2200      	movs	r2, #0
   29434:	4928      	ldr	r1, [pc, #160]	; (294d8 <uarte_instance_init.isra.0+0x290>)
   29436:	3018      	adds	r0, #24
   29438:	f011 fde6 	bl	3b008 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   2943c:	68fb      	ldr	r3, [r7, #12]
   2943e:	64df      	str	r7, [r3, #76]	; 0x4c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!get_dev_config(dev)->ppi_endtx) {
   29440:	6873      	ldr	r3, [r6, #4]
   29442:	799b      	ldrb	r3, [r3, #6]
   29444:	b91b      	cbnz	r3, 2944e <uarte_instance_init.isra.0+0x206>
    p_reg->INTENSET = mask;
   29446:	f44f 7380 	mov.w	r3, #256	; 0x100
   2944a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   2944e:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   29452:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   29456:	2300      	movs	r3, #0
   29458:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2945c:	2301      	movs	r3, #1
   2945e:	60a3      	str	r3, [r4, #8]
   29460:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   29462:	4648      	mov	r0, r9
   29464:	b003      	add	sp, #12
   29466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nrfx_timer_enable(&cfg->timer);
   2946a:	4658      	mov	r0, fp
   2946c:	f00b ff42 	bl	352f4 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   29470:	4658      	mov	r0, fp
   29472:	f011 fa7c 	bl	3a96e <nrfx_timer_clear>
   29476:	e780      	b.n	2937a <uarte_instance_init.isra.0+0x132>
    p_reg->INTENSET = mask;
   29478:	2304      	movs	r3, #4
   2947a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	if (ret != 0) {
   2947e:	e7b2      	b.n	293e6 <uarte_instance_init.isra.0+0x19e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   29480:	2208      	movs	r2, #8
   29482:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   29486:	686a      	ldr	r2, [r5, #4]
   29488:	3201      	adds	r2, #1
   2948a:	d0d9      	beq.n	29440 <uarte_instance_init.isra.0+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2948c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   29490:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   29494:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   29498:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2949c:	2301      	movs	r3, #1
   2949e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   294a2:	6023      	str	r3, [r4, #0]
}
   294a4:	e7cc      	b.n	29440 <uarte_instance_init.isra.0+0x1f8>
   294a6:	bf00      	nop
   294a8:	40842500 	.word	0x40842500
   294ac:	0bad0000 	.word	0x0bad0000
   294b0:	0003c3ac 	.word	0x0003c3ac
   294b4:	0003c2cc 	.word	0x0003c2cc
   294b8:	0003f850 	.word	0x0003f850
   294bc:	40017000 	.word	0x40017000
   294c0:	07030100 	.word	0x07030100
   294c4:	00039aaf 	.word	0x00039aaf
   294c8:	0003f86f 	.word	0x0003f86f
   294cc:	0003f8af 	.word	0x0003f8af
   294d0:	000a0210 	.word	0x000a0210
   294d4:	00039c77 	.word	0x00039c77
   294d8:	00039d59 	.word	0x00039d59

000294dc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   294dc:	b530      	push	{r4, r5, lr}
   294de:	b085      	sub	sp, #20
   294e0:	466c      	mov	r4, sp
   294e2:	4605      	mov	r5, r0
   294e4:	4b08      	ldr	r3, [pc, #32]	; (29508 <uarte_0_init+0x2c>)
   294e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   294e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   294ec:	2200      	movs	r2, #0
   294ee:	2101      	movs	r1, #1
   294f0:	2008      	movs	r0, #8
   294f2:	f7fc fb9f 	bl	25c34 <z_arm_irq_priority_set>
   294f6:	2008      	movs	r0, #8
   294f8:	f7fc fb6a 	bl	25bd0 <arch_irq_enable>
   294fc:	4621      	mov	r1, r4
   294fe:	4628      	mov	r0, r5
   29500:	f7ff fea2 	bl	29248 <uarte_instance_init.isra.0>
   29504:	b005      	add	sp, #20
   29506:	bd30      	pop	{r4, r5, pc}
   29508:	0003c3d0 	.word	0x0003c3d0

0002950c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2950c:	b530      	push	{r4, r5, lr}
   2950e:	b085      	sub	sp, #20
   29510:	466c      	mov	r4, sp
   29512:	4605      	mov	r5, r0
   29514:	4b08      	ldr	r3, [pc, #32]	; (29538 <uarte_1_init+0x2c>)
   29516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   29518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2951c:	2200      	movs	r2, #0
   2951e:	2101      	movs	r1, #1
   29520:	2009      	movs	r0, #9
   29522:	f7fc fb87 	bl	25c34 <z_arm_irq_priority_set>
   29526:	2009      	movs	r0, #9
   29528:	f7fc fb52 	bl	25bd0 <arch_irq_enable>
   2952c:	4621      	mov	r1, r4
   2952e:	4628      	mov	r0, r5
   29530:	f7ff fe8a 	bl	29248 <uarte_instance_init.isra.0>
   29534:	b005      	add	sp, #20
   29536:	bd30      	pop	{r4, r5, pc}
   29538:	0003c3e0 	.word	0x0003c3e0

0002953c <uarte_2_init>:
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2953c:	b530      	push	{r4, r5, lr}
   2953e:	b085      	sub	sp, #20
   29540:	466c      	mov	r4, sp
   29542:	4605      	mov	r5, r0
   29544:	4b08      	ldr	r3, [pc, #32]	; (29568 <uarte_2_init+0x2c>)
   29546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   29548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2954c:	2200      	movs	r2, #0
   2954e:	2101      	movs	r1, #1
   29550:	200a      	movs	r0, #10
   29552:	f7fc fb6f 	bl	25c34 <z_arm_irq_priority_set>
   29556:	200a      	movs	r0, #10
   29558:	f7fc fb3a 	bl	25bd0 <arch_irq_enable>
   2955c:	4621      	mov	r1, r4
   2955e:	4628      	mov	r0, r5
   29560:	f7ff fe72 	bl	29248 <uarte_instance_init.isra.0>
   29564:	b005      	add	sp, #20
   29566:	bd30      	pop	{r4, r5, pc}
   29568:	0003c3f0 	.word	0x0003c3f0

0002956c <uarte_nrfx_pins_enable>:
{
   2956c:	b570      	push	{r4, r5, r6, lr}
	if (!get_dev_config(dev)->gpio_mgmt) {
   2956e:	6846      	ldr	r6, [r0, #4]
   29570:	7973      	ldrb	r3, [r6, #5]
   29572:	b37b      	cbz	r3, 295d4 <uarte_nrfx_pins_enable+0x68>
	return config->uarte_regs;
   29574:	6830      	ldr	r0, [r6, #0]
    return p_reg->PSEL.TXD;
   29576:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
    return p_reg->PSEL.RXD;
   2957a:	f8d0 3514 	ldr.w	r3, [r0, #1300]	; 0x514
    return p_reg->PSEL.CTS;
   2957e:	f002 021f 	and.w	r2, r2, #31
   29582:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
    return p_reg->PSEL.RTS;
   29586:	f8d0 5508 	ldr.w	r5, [r0, #1288]	; 0x508
	if (enable) {
   2958a:	4820      	ldr	r0, [pc, #128]	; (2960c <uarte_nrfx_pins_enable+0xa0>)
   2958c:	b319      	cbz	r1, 295d6 <uarte_nrfx_pins_enable+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2958e:	2101      	movs	r1, #1
   29590:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   29592:	6081      	str	r1, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   29594:	2103      	movs	r1, #3
   29596:	3280      	adds	r2, #128	; 0x80
   29598:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2959c:	1c5a      	adds	r2, r3, #1
   2959e:	bf1f      	itttt	ne
   295a0:	2200      	movne	r2, #0
    *p_pin = pin_number & 0x1F;
   295a2:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   295a6:	3380      	addne	r3, #128	; 0x80
   295a8:	f840 2023 	strne.w	r2, [r0, r3, lsl #2]
		if (IS_RTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   295ac:	7931      	ldrb	r1, [r6, #4]
   295ae:	074e      	lsls	r6, r1, #29
   295b0:	d508      	bpl.n	295c4 <uarte_nrfx_pins_enable+0x58>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   295b2:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
   295b4:	f005 021f 	and.w	r2, r5, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   295b8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   295ba:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   295bc:	2303      	movs	r3, #3
   295be:	3280      	adds	r2, #128	; 0x80
   295c0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		if (IS_CTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   295c4:	0789      	lsls	r1, r1, #30
   295c6:	d505      	bpl.n	295d4 <uarte_nrfx_pins_enable+0x68>
   295c8:	2200      	movs	r2, #0
    *p_pin = pin_number & 0x1F;
   295ca:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   295ce:	3380      	adds	r3, #128	; 0x80
   295d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   295d4:	bd70      	pop	{r4, r5, r6, pc}
   295d6:	2102      	movs	r1, #2
   295d8:	3280      	adds	r2, #128	; 0x80
   295da:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   295de:	1c5a      	adds	r2, r3, #1
    *p_pin = pin_number & 0x1F;
   295e0:	bf1e      	ittt	ne
   295e2:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   295e6:	3380      	addne	r3, #128	; 0x80
   295e8:	f840 1023 	strne.w	r1, [r0, r3, lsl #2]
		if (IS_RTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   295ec:	7933      	ldrb	r3, [r6, #4]
   295ee:	075a      	lsls	r2, r3, #29
   295f0:	bf41      	itttt	mi
   295f2:	2102      	movmi	r1, #2
    *p_pin = pin_number & 0x1F;
   295f4:	f005 021f 	andmi.w	r2, r5, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   295f8:	3280      	addmi	r2, #128	; 0x80
   295fa:	f840 1022 	strmi.w	r1, [r0, r2, lsl #2]
		if (IS_CTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
   295fe:	079b      	lsls	r3, r3, #30
   29600:	d5e8      	bpl.n	295d4 <uarte_nrfx_pins_enable+0x68>
    *p_pin = pin_number & 0x1F;
   29602:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   29606:	2202      	movs	r2, #2
   29608:	3380      	adds	r3, #128	; 0x80
   2960a:	e7e1      	b.n	295d0 <uarte_nrfx_pins_enable+0x64>
   2960c:	40842500 	.word	0x40842500

00029610 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   29610:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   29612:	4d1c      	ldr	r5, [pc, #112]	; (29684 <_bsdlib_init+0x74>)
   29614:	4c1c      	ldr	r4, [pc, #112]	; (29688 <_bsdlib_init+0x78>)
   29616:	782b      	ldrb	r3, [r5, #0]
{
   29618:	b085      	sub	sp, #20
	if (!first_time_init) {
   2961a:	b933      	cbnz	r3, 2962a <_bsdlib_init+0x1a>
	list->tail = NULL;
   2961c:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   29620:	481a      	ldr	r0, [pc, #104]	; (2968c <_bsdlib_init+0x7c>)
   29622:	f011 fa58 	bl	3aad6 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   29626:	2301      	movs	r3, #1
   29628:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2962a:	2200      	movs	r2, #0
   2962c:	202a      	movs	r0, #42	; 0x2a
   2962e:	4611      	mov	r1, r2
   29630:	f7fc fb00 	bl	25c34 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   29634:	4a16      	ldr	r2, [pc, #88]	; (29690 <_bsdlib_init+0x80>)
   29636:	ab01      	add	r3, sp, #4
   29638:	ca07      	ldmia	r2, {r0, r1, r2}
   2963a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   2963e:	4618      	mov	r0, r3
   29640:	f009 fc14 	bl	32e6c <bsd_init>
   29644:	4b13      	ldr	r3, [pc, #76]	; (29694 <_bsdlib_init+0x84>)
   29646:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   29648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2964c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29650:	480e      	ldr	r0, [pc, #56]	; (2968c <_bsdlib_init+0x7c>)
   29652:	f00c f9b1 	bl	359b8 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   29656:	6820      	ldr	r0, [r4, #0]
   29658:	b170      	cbz	r0, 29678 <_bsdlib_init+0x68>
	return node->next;
   2965a:	6804      	ldr	r4, [r0, #0]
   2965c:	2c00      	cmp	r4, #0
   2965e:	bf38      	it	cc
   29660:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   29662:	3004      	adds	r0, #4
   29664:	f00c fe4a 	bl	362fc <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   29668:	b134      	cbz	r4, 29678 <_bsdlib_init+0x68>
   2966a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2966c:	4620      	mov	r0, r4
   2966e:	2b00      	cmp	r3, #0
   29670:	bf38      	it	cc
   29672:	2300      	movcc	r3, #0
   29674:	461c      	mov	r4, r3
   29676:	e7f4      	b.n	29662 <_bsdlib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   29678:	4804      	ldr	r0, [pc, #16]	; (2968c <_bsdlib_init+0x7c>)
   2967a:	f00c fa15 	bl	35aa8 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   2967e:	2000      	movs	r0, #0
   29680:	b005      	add	sp, #20
   29682:	bd30      	pop	{r4, r5, pc}
   29684:	2002c082 	.word	0x2002c082
   29688:	200237a0 	.word	0x200237a0
   2968c:	200237a8 	.word	0x200237a8
   29690:	0003c400 	.word	0x0003c400
   29694:	2002379c 	.word	0x2002379c

00029698 <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   29698:	b530      	push	{r4, r5, lr}
   2969a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   2969c:	2201      	movs	r2, #1
   2969e:	2100      	movs	r1, #0
   296a0:	a802      	add	r0, sp, #8
   296a2:	f011 fbac 	bl	3adfe <z_impl_k_sem_init>
   296a6:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   296a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   296ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   296b0:	481c      	ldr	r0, [pc, #112]	; (29724 <bsdlib_shutdown_wait+0x8c>)
   296b2:	f00c f981 	bl	359b8 <z_impl_k_mutex_lock>
	parent->next = child;
   296b6:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   296b8:	4c1b      	ldr	r4, [pc, #108]	; (29728 <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   296ba:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   296bc:	6863      	ldr	r3, [r4, #4]
   296be:	bb2b      	cbnz	r3, 2970c <bsdlib_shutdown_wait+0x74>
	list->head = node;
   296c0:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   296c4:	4817      	ldr	r0, [pc, #92]	; (29724 <bsdlib_shutdown_wait+0x8c>)
   296c6:	f00c f9ef 	bl	35aa8 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   296ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   296ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   296d2:	a802      	add	r0, sp, #8
   296d4:	f00c fe38 	bl	36348 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   296d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   296dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   296e0:	4810      	ldr	r0, [pc, #64]	; (29724 <bsdlib_shutdown_wait+0x8c>)
   296e2:	f00c f969 	bl	359b8 <z_impl_k_mutex_lock>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   296e6:	2200      	movs	r2, #0
   296e8:	6823      	ldr	r3, [r4, #0]
   296ea:	b153      	cbz	r3, 29702 <bsdlib_shutdown_wait+0x6a>
   296ec:	42ab      	cmp	r3, r5
   296ee:	d116      	bne.n	2971e <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   296f0:	9901      	ldr	r1, [sp, #4]
   296f2:	b972      	cbnz	r2, 29712 <bsdlib_shutdown_wait+0x7a>
   296f4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   296f6:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   296f8:	429a      	cmp	r2, r3
   296fa:	d100      	bne.n	296fe <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   296fc:	6061      	str	r1, [r4, #4]
	parent->next = child;
   296fe:	2300      	movs	r3, #0
   29700:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   29702:	4808      	ldr	r0, [pc, #32]	; (29724 <bsdlib_shutdown_wait+0x8c>)
   29704:	f00c f9d0 	bl	35aa8 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   29708:	b009      	add	sp, #36	; 0x24
   2970a:	bd30      	pop	{r4, r5, pc}
   2970c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2970e:	6065      	str	r5, [r4, #4]
}
   29710:	e7d8      	b.n	296c4 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   29712:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   29714:	6861      	ldr	r1, [r4, #4]
   29716:	4299      	cmp	r1, r3
	list->tail = node;
   29718:	bf08      	it	eq
   2971a:	6062      	streq	r2, [r4, #4]
}
   2971c:	e7ef      	b.n	296fe <bsdlib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2971e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29720:	681b      	ldr	r3, [r3, #0]
   29722:	e7e2      	b.n	296ea <bsdlib_shutdown_wait+0x52>
   29724:	200237a8 	.word	0x200237a8
   29728:	200237a0 	.word	0x200237a0

0002972c <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   2972c:	4b01      	ldr	r3, [pc, #4]	; (29734 <bsdlib_get_init_ret+0x8>)
   2972e:	6818      	ldr	r0, [r3, #0]
   29730:	4770      	bx	lr
   29732:	bf00      	nop
   29734:	2002379c 	.word	0x2002379c

00029738 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   29738:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   2973a:	4c0d      	ldr	r4, [pc, #52]	; (29770 <thread_monitor_entry_get+0x38>)
{
   2973c:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   2973e:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   29740:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   29742:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   29744:	4b0b      	ldr	r3, [pc, #44]	; (29774 <thread_monitor_entry_get+0x3c>)
   29746:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   29748:	6801      	ldr	r1, [r0, #0]
   2974a:	4291      	cmp	r1, r2
   2974c:	d00e      	beq.n	2976c <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   2974e:	b151      	cbz	r1, 29766 <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   29750:	6841      	ldr	r1, [r0, #4]
   29752:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   29754:	42b1      	cmp	r1, r6
   29756:	bfc4      	itt	gt
   29758:	4604      	movgt	r4, r0
   2975a:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   2975c:	3d01      	subs	r5, #1
   2975e:	f100 0008 	add.w	r0, r0, #8
   29762:	d1f1      	bne.n	29748 <thread_monitor_entry_get+0x10>
   29764:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   29766:	3b01      	subs	r3, #1
	new_entry->id = id;
   29768:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   2976a:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   2976c:	bd70      	pop	{r4, r5, r6, pc}
   2976e:	bf00      	nop
   29770:	200237c8 	.word	0x200237c8
   29774:	200237bc 	.word	0x200237bc

00029778 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   29778:	4668      	mov	r0, sp
   2977a:	f020 0107 	bic.w	r1, r0, #7
   2977e:	468d      	mov	sp, r1
   29780:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   29782:	4b0f      	ldr	r3, [pc, #60]	; (297c0 <rpc_proxy_irq_handler+0x48>)
   29784:	e8d3 2fef 	ldaex	r2, [r3]
   29788:	3201      	adds	r2, #1
   2978a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2978e:	2900      	cmp	r1, #0
   29790:	d1f8      	bne.n	29784 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   29792:	f003 ffcd 	bl	2d730 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   29796:	4b0b      	ldr	r3, [pc, #44]	; (297c4 <rpc_proxy_irq_handler+0x4c>)
   29798:	681c      	ldr	r4, [r3, #0]
   2979a:	2c00      	cmp	r4, #0
   2979c:	bf38      	it	cc
   2979e:	2400      	movcc	r4, #0
   297a0:	b12c      	cbz	r4, 297ae <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   297a2:	1d20      	adds	r0, r4, #4
   297a4:	f00c fdaa 	bl	362fc <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   297a8:	6824      	ldr	r4, [r4, #0]
   297aa:	2c00      	cmp	r4, #0
   297ac:	d1f8      	bne.n	297a0 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   297ae:	f7fc fa57 	bl	25c60 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   297b2:	f7fc fdd7 	bl	26364 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   297b6:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   297ba:	4685      	mov	sp, r0
   297bc:	4770      	bx	lr
   297be:	bf00      	nop
   297c0:	200237bc 	.word	0x200237bc
   297c4:	200237c0 	.word	0x200237c0

000297c8 <bsd_os_timedwait>:
{
   297c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297cc:	460c      	mov	r4, r1
   297ce:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   297d0:	f011 fbef 	bl	3afb2 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   297d4:	6823      	ldr	r3, [r4, #0]
   297d6:	4680      	mov	r8, r0
   297d8:	2b00      	cmp	r3, #0
   297da:	468a      	mov	sl, r1
   297dc:	d103      	bne.n	297e6 <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   297de:	f00c fd19 	bl	36214 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   297e2:	203c      	movs	r0, #60	; 0x3c
   297e4:	e091      	b.n	2990a <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   297e6:	bfbc      	itt	lt
   297e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   297ec:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   297ee:	2201      	movs	r2, #1
   297f0:	2100      	movs	r1, #0
   297f2:	a802      	add	r0, sp, #8
   297f4:	f011 fb03 	bl	3adfe <z_impl_k_sem_init>
   297f8:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   297fa:	f04f 0320 	mov.w	r3, #32
   297fe:	f3ef 8b11 	mrs	fp, BASEPRI
   29802:	f383 8811 	msr	BASEPRI, r3
   29806:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2980a:	f00c fd71 	bl	362f0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   2980e:	f7ff ff93 	bl	29738 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   29812:	4947      	ldr	r1, [pc, #284]	; (29930 <bsd_os_timedwait+0x168>)
   29814:	6843      	ldr	r3, [r0, #4]
   29816:	680a      	ldr	r2, [r1, #0]
   29818:	4689      	mov	r9, r1
   2981a:	4293      	cmp	r3, r2
   2981c:	f04f 0300 	mov.w	r3, #0
   29820:	d108      	bne.n	29834 <bsd_os_timedwait+0x6c>
	parent->next = child;
   29822:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   29824:	4b43      	ldr	r3, [pc, #268]	; (29934 <bsd_os_timedwait+0x16c>)
   29826:	685a      	ldr	r2, [r3, #4]
   29828:	2a00      	cmp	r2, #0
   2982a:	d171      	bne.n	29910 <bsd_os_timedwait+0x148>
	list->head = node;
   2982c:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   29830:	2301      	movs	r3, #1
}
   29832:	e000      	b.n	29836 <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   29834:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   29836:	f38b 8811 	msr	BASEPRI, fp
   2983a:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   2983e:	2b00      	cmp	r3, #0
   29840:	d062      	beq.n	29908 <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   29842:	6823      	ldr	r3, [r4, #0]
   29844:	1c5a      	adds	r2, r3, #1
   29846:	d066      	beq.n	29916 <bsd_os_timedwait+0x14e>
   29848:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   2984c:	f240 30e7 	movw	r0, #999	; 0x3e7
   29850:	2100      	movs	r1, #0
   29852:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   29856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2985a:	2300      	movs	r3, #0
   2985c:	fbce 010c 	smlal	r0, r1, lr, ip
   29860:	f7f2 ffaa 	bl	1c7b8 <__aeabi_uldivmod>
   29864:	4602      	mov	r2, r0
   29866:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   29868:	a802      	add	r0, sp, #8
   2986a:	f00c fd6d 	bl	36348 <z_impl_k_sem_take>
	__asm__ volatile(
   2986e:	f04f 0320 	mov.w	r3, #32
   29872:	f3ef 8b11 	mrs	fp, BASEPRI
   29876:	f383 8811 	msr	BASEPRI, r3
   2987a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2987e:	2000      	movs	r0, #0
   29880:	4b2c      	ldr	r3, [pc, #176]	; (29934 <bsd_os_timedwait+0x16c>)
   29882:	681a      	ldr	r2, [r3, #0]
   29884:	b15a      	cbz	r2, 2989e <bsd_os_timedwait+0xd6>
   29886:	42aa      	cmp	r2, r5
   29888:	d14f      	bne.n	2992a <bsd_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   2988a:	9d01      	ldr	r5, [sp, #4]
   2988c:	2800      	cmp	r0, #0
   2988e:	d146      	bne.n	2991e <bsd_os_timedwait+0x156>
   29890:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   29892:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   29894:	4291      	cmp	r1, r2
   29896:	d100      	bne.n	2989a <bsd_os_timedwait+0xd2>
	list->tail = node;
   29898:	605d      	str	r5, [r3, #4]
	parent->next = child;
   2989a:	2300      	movs	r3, #0
   2989c:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   2989e:	f00c fd27 	bl	362f0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   298a2:	f7ff ff49 	bl	29738 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   298a6:	f8d9 3000 	ldr.w	r3, [r9]
   298aa:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   298ac:	f38b 8811 	msr	BASEPRI, fp
   298b0:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   298b4:	6825      	ldr	r5, [r4, #0]
   298b6:	1c6b      	adds	r3, r5, #1
   298b8:	d026      	beq.n	29908 <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   298ba:	f011 fb7a 	bl	3afb2 <z_impl_k_uptime_ticks>
   298be:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   298c2:	468e      	mov	lr, r1
   298c4:	fba8 890c 	umull	r8, r9, r8, ip
   298c8:	fba0 010c 	umull	r0, r1, r0, ip
   298cc:	fb0c 990a 	mla	r9, ip, sl, r9
   298d0:	fb0c 110e 	mla	r1, ip, lr, r1
   298d4:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   298d8:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   298dc:	1952      	adds	r2, r2, r5
   298de:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   298e2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   298e6:	0bc5      	lsrs	r5, r0, #15
   298e8:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   298ec:	1b56      	subs	r6, r2, r5
   298ee:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   298f2:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   298f6:	2e00      	cmp	r6, #0
   298f8:	f177 0300 	sbcs.w	r3, r7, #0
   298fc:	bfb8      	it	lt
   298fe:	2600      	movlt	r6, #0
   29900:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   29902:	2e00      	cmp	r6, #0
   29904:	f43f af6d 	beq.w	297e2 <bsd_os_timedwait+0x1a>
	return 0;
   29908:	2000      	movs	r0, #0
}
   2990a:	b009      	add	sp, #36	; 0x24
   2990c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29910:	6015      	str	r5, [r2, #0]
	list->tail = node;
   29912:	605d      	str	r5, [r3, #4]
   29914:	e78c      	b.n	29830 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   29916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2991a:	4613      	mov	r3, r2
   2991c:	e7a4      	b.n	29868 <bsd_os_timedwait+0xa0>
	parent->next = child;
   2991e:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   29920:	6859      	ldr	r1, [r3, #4]
   29922:	4291      	cmp	r1, r2
	list->tail = node;
   29924:	bf08      	it	eq
   29926:	6058      	streq	r0, [r3, #4]
}
   29928:	e7b7      	b.n	2989a <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2992a:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2992c:	6812      	ldr	r2, [r2, #0]
   2992e:	e7a9      	b.n	29884 <bsd_os_timedwait+0xbc>
   29930:	200237bc 	.word	0x200237bc
   29934:	200237c0 	.word	0x200237c0

00029938 <bsd_os_errno_set>:
	switch (err_code) {
   29938:	283c      	cmp	r0, #60	; 0x3c
{
   2993a:	4601      	mov	r1, r0
   2993c:	b508      	push	{r3, lr}
	switch (err_code) {
   2993e:	f300 808f 	bgt.w	29a60 <bsd_os_errno_set+0x128>
   29942:	2800      	cmp	r0, #0
   29944:	dc0d      	bgt.n	29962 <bsd_os_errno_set+0x2a>
   29946:	4bb2      	ldr	r3, [pc, #712]	; (29c10 <bsd_os_errno_set+0x2d8>)
   29948:	4ab2      	ldr	r2, [pc, #712]	; (29c14 <bsd_os_errno_set+0x2dc>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   2994a:	48b3      	ldr	r0, [pc, #716]	; (29c18 <bsd_os_errno_set+0x2e0>)
   2994c:	1ad2      	subs	r2, r2, r3
   2994e:	08d2      	lsrs	r2, r2, #3
   29950:	0192      	lsls	r2, r2, #6
   29952:	f042 0201 	orr.w	r2, r2, #1
   29956:	f00e fdc2 	bl	384de <log_1>
		errno = 0xBAADBAAD;
   2995a:	f00f fcb4 	bl	392c6 <__errno>
   2995e:	4baf      	ldr	r3, [pc, #700]	; (29c1c <bsd_os_errno_set+0x2e4>)
   29960:	e0bf      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
   29962:	1e43      	subs	r3, r0, #1
   29964:	2b3b      	cmp	r3, #59	; 0x3b
   29966:	d8ee      	bhi.n	29946 <bsd_os_errno_set+0xe>
   29968:	a201      	add	r2, pc, #4	; (adr r2, 29970 <bsd_os_errno_set+0x38>)
   2996a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2996e:	bf00      	nop
   29970:	00029add 	.word	0x00029add
   29974:	00029ae7 	.word	0x00029ae7
   29978:	00029947 	.word	0x00029947
   2997c:	00029947 	.word	0x00029947
   29980:	00029aef 	.word	0x00029aef
   29984:	00029947 	.word	0x00029947
   29988:	00029947 	.word	0x00029947
   2998c:	00029af7 	.word	0x00029af7
   29990:	00029aff 	.word	0x00029aff
   29994:	00029947 	.word	0x00029947
   29998:	00029947 	.word	0x00029947
   2999c:	00029b07 	.word	0x00029b07
   299a0:	00029b0f 	.word	0x00029b0f
   299a4:	00029b17 	.word	0x00029b17
   299a8:	00029947 	.word	0x00029947
   299ac:	00029947 	.word	0x00029947
   299b0:	00029947 	.word	0x00029947
   299b4:	00029947 	.word	0x00029947
   299b8:	00029947 	.word	0x00029947
   299bc:	00029947 	.word	0x00029947
   299c0:	00029947 	.word	0x00029947
   299c4:	00029b1f 	.word	0x00029b1f
   299c8:	00029947 	.word	0x00029947
   299cc:	00029b27 	.word	0x00029b27
   299d0:	00029947 	.word	0x00029947
   299d4:	00029947 	.word	0x00029947
   299d8:	00029947 	.word	0x00029947
   299dc:	00029947 	.word	0x00029947
   299e0:	00029947 	.word	0x00029947
   299e4:	00029947 	.word	0x00029947
   299e8:	00029947 	.word	0x00029947
   299ec:	00029947 	.word	0x00029947
   299f0:	00029947 	.word	0x00029947
   299f4:	00029947 	.word	0x00029947
   299f8:	00029b2f 	.word	0x00029b2f
   299fc:	00029947 	.word	0x00029947
   29a00:	00029b37 	.word	0x00029b37
   29a04:	00029947 	.word	0x00029947
   29a08:	00029947 	.word	0x00029947
   29a0c:	00029bff 	.word	0x00029bff
   29a10:	00029b3f 	.word	0x00029b3f
   29a14:	00029b47 	.word	0x00029b47
   29a18:	00029b4f 	.word	0x00029b4f
   29a1c:	00029b57 	.word	0x00029b57
   29a20:	00029b5f 	.word	0x00029b5f
   29a24:	00029947 	.word	0x00029947
   29a28:	00029b67 	.word	0x00029b67
   29a2c:	00029b6f 	.word	0x00029b6f
   29a30:	00029947 	.word	0x00029947
   29a34:	00029b77 	.word	0x00029b77
   29a38:	00029b7f 	.word	0x00029b7f
   29a3c:	00029b87 	.word	0x00029b87
   29a40:	00029c07 	.word	0x00029c07
   29a44:	00029b8f 	.word	0x00029b8f
   29a48:	00029947 	.word	0x00029947
   29a4c:	00029b97 	.word	0x00029b97
   29a50:	00029b9f 	.word	0x00029b9f
   29a54:	00029947 	.word	0x00029947
   29a58:	00029947 	.word	0x00029947
   29a5c:	00029ba7 	.word	0x00029ba7
	switch (err_code) {
   29a60:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   29a64:	2b18      	cmp	r3, #24
   29a66:	f63f af6e 	bhi.w	29946 <bsd_os_errno_set+0xe>
   29a6a:	2b18      	cmp	r3, #24
   29a6c:	f63f af6b 	bhi.w	29946 <bsd_os_errno_set+0xe>
   29a70:	a201      	add	r2, pc, #4	; (adr r2, 29a78 <bsd_os_errno_set+0x140>)
   29a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   29a76:	bf00      	nop
   29a78:	00029baf 	.word	0x00029baf
   29a7c:	00029947 	.word	0x00029947
   29a80:	00029947 	.word	0x00029947
   29a84:	00029947 	.word	0x00029947
   29a88:	00029947 	.word	0x00029947
   29a8c:	00029947 	.word	0x00029947
   29a90:	00029947 	.word	0x00029947
   29a94:	00029bb7 	.word	0x00029bb7
   29a98:	00029947 	.word	0x00029947
   29a9c:	00029bc7 	.word	0x00029bc7
   29aa0:	00029bbf 	.word	0x00029bbf
   29aa4:	00029947 	.word	0x00029947
   29aa8:	00029947 	.word	0x00029947
   29aac:	00029947 	.word	0x00029947
   29ab0:	00029947 	.word	0x00029947
   29ab4:	00029947 	.word	0x00029947
   29ab8:	00029947 	.word	0x00029947
   29abc:	00029947 	.word	0x00029947
   29ac0:	00029947 	.word	0x00029947
   29ac4:	00029947 	.word	0x00029947
   29ac8:	00029bcf 	.word	0x00029bcf
   29acc:	00029bd7 	.word	0x00029bd7
   29ad0:	00029be1 	.word	0x00029be1
   29ad4:	00029beb 	.word	0x00029beb
   29ad8:	00029bf5 	.word	0x00029bf5
		errno = EPERM;
   29adc:	f00f fbf3 	bl	392c6 <__errno>
   29ae0:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   29ae2:	6003      	str	r3, [r0, #0]
}
   29ae4:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   29ae6:	f00f fbee 	bl	392c6 <__errno>
   29aea:	2302      	movs	r3, #2
   29aec:	e7f9      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EIO;
   29aee:	f00f fbea 	bl	392c6 <__errno>
   29af2:	2305      	movs	r3, #5
   29af4:	e7f5      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ENOEXEC;
   29af6:	f00f fbe6 	bl	392c6 <__errno>
   29afa:	2308      	movs	r3, #8
   29afc:	e7f1      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EBADF;
   29afe:	f00f fbe2 	bl	392c6 <__errno>
   29b02:	2309      	movs	r3, #9
   29b04:	e7ed      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ENOMEM;
   29b06:	f00f fbde 	bl	392c6 <__errno>
   29b0a:	230c      	movs	r3, #12
   29b0c:	e7e9      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EACCES;
   29b0e:	f00f fbda 	bl	392c6 <__errno>
   29b12:	230d      	movs	r3, #13
   29b14:	e7e5      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EFAULT;
   29b16:	f00f fbd6 	bl	392c6 <__errno>
   29b1a:	230e      	movs	r3, #14
   29b1c:	e7e1      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EINVAL;
   29b1e:	f00f fbd2 	bl	392c6 <__errno>
   29b22:	2316      	movs	r3, #22
   29b24:	e7dd      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EMFILE;
   29b26:	f00f fbce 	bl	392c6 <__errno>
   29b2a:	2318      	movs	r3, #24
   29b2c:	e7d9      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EAGAIN;
   29b2e:	f00f fbca 	bl	392c6 <__errno>
   29b32:	230b      	movs	r3, #11
   29b34:	e7d5      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EDOM;
   29b36:	f00f fbc6 	bl	392c6 <__errno>
   29b3a:	2321      	movs	r3, #33	; 0x21
   29b3c:	e7d1      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EPROTOTYPE;
   29b3e:	f00f fbc2 	bl	392c6 <__errno>
   29b42:	236b      	movs	r3, #107	; 0x6b
   29b44:	e7cd      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ENOPROTOOPT;
   29b46:	f00f fbbe 	bl	392c6 <__errno>
   29b4a:	236d      	movs	r3, #109	; 0x6d
   29b4c:	e7c9      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EPROTONOSUPPORT;
   29b4e:	f00f fbba 	bl	392c6 <__errno>
   29b52:	237b      	movs	r3, #123	; 0x7b
   29b54:	e7c5      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ESOCKTNOSUPPORT;
   29b56:	f00f fbb6 	bl	392c6 <__errno>
   29b5a:	237c      	movs	r3, #124	; 0x7c
   29b5c:	e7c1      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EOPNOTSUPP;
   29b5e:	f00f fbb2 	bl	392c6 <__errno>
   29b62:	235f      	movs	r3, #95	; 0x5f
   29b64:	e7bd      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EAFNOSUPPORT;
   29b66:	f00f fbae 	bl	392c6 <__errno>
   29b6a:	236a      	movs	r3, #106	; 0x6a
   29b6c:	e7b9      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EADDRINUSE;
   29b6e:	f00f fbaa 	bl	392c6 <__errno>
   29b72:	2370      	movs	r3, #112	; 0x70
   29b74:	e7b5      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ENETDOWN;
   29b76:	f00f fba6 	bl	392c6 <__errno>
   29b7a:	2373      	movs	r3, #115	; 0x73
   29b7c:	e7b1      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ENETUNREACH;
   29b7e:	f00f fba2 	bl	392c6 <__errno>
   29b82:	2372      	movs	r3, #114	; 0x72
   29b84:	e7ad      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ENETRESET;
   29b86:	f00f fb9e 	bl	392c6 <__errno>
   29b8a:	237e      	movs	r3, #126	; 0x7e
   29b8c:	e7a9      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ECONNRESET;
   29b8e:	f00f fb9a 	bl	392c6 <__errno>
   29b92:	2368      	movs	r3, #104	; 0x68
   29b94:	e7a5      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EISCONN;
   29b96:	f00f fb96 	bl	392c6 <__errno>
   29b9a:	237f      	movs	r3, #127	; 0x7f
   29b9c:	e7a1      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ENOTCONN;
   29b9e:	f00f fb92 	bl	392c6 <__errno>
   29ba2:	2380      	movs	r3, #128	; 0x80
   29ba4:	e79d      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ETIMEDOUT;
   29ba6:	f00f fb8e 	bl	392c6 <__errno>
   29baa:	2374      	movs	r3, #116	; 0x74
   29bac:	e799      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ENOBUFS;
   29bae:	f00f fb8a 	bl	392c6 <__errno>
   29bb2:	2369      	movs	r3, #105	; 0x69
   29bb4:	e795      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EHOSTDOWN;
   29bb6:	f00f fb86 	bl	392c6 <__errno>
   29bba:	2375      	movs	r3, #117	; 0x75
   29bbc:	e791      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EINPROGRESS;
   29bbe:	f00f fb82 	bl	392c6 <__errno>
   29bc2:	2377      	movs	r3, #119	; 0x77
   29bc4:	e78d      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EALREADY;
   29bc6:	f00f fb7e 	bl	392c6 <__errno>
   29bca:	2378      	movs	r3, #120	; 0x78
   29bcc:	e789      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ECANCELED;
   29bce:	f00f fb7a 	bl	392c6 <__errno>
   29bd2:	238c      	movs	r3, #140	; 0x8c
   29bd4:	e785      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ENOKEY;
   29bd6:	f00f fb76 	bl	392c6 <__errno>
   29bda:	f240 73d1 	movw	r3, #2001	; 0x7d1
   29bde:	e780      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EKEYEXPIRED;
   29be0:	f00f fb71 	bl	392c6 <__errno>
   29be4:	f240 73d2 	movw	r3, #2002	; 0x7d2
   29be8:	e77b      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EKEYREVOKED;
   29bea:	f00f fb6c 	bl	392c6 <__errno>
   29bee:	f240 73d3 	movw	r3, #2003	; 0x7d3
   29bf2:	e776      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EKEYREJECTED;
   29bf4:	f00f fb67 	bl	392c6 <__errno>
   29bf8:	f240 73d4 	movw	r3, #2004	; 0x7d4
   29bfc:	e771      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = EMSGSIZE;
   29bfe:	f00f fb62 	bl	392c6 <__errno>
   29c02:	237a      	movs	r3, #122	; 0x7a
   29c04:	e76d      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
		errno = ECONNABORTED;
   29c06:	f00f fb5e 	bl	392c6 <__errno>
   29c0a:	2371      	movs	r3, #113	; 0x71
   29c0c:	e769      	b.n	29ae2 <bsd_os_errno_set+0x1aa>
   29c0e:	bf00      	nop
   29c10:	0003c2cc 	.word	0x0003c2cc
   29c14:	0003c2f4 	.word	0x0003c2f4
   29c18:	0003f919 	.word	0x0003f919
   29c1c:	baadbaad 	.word	0xbaadbaad

00029c20 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   29c24:	4b01      	ldr	r3, [pc, #4]	; (29c2c <bsd_os_application_irq_set+0xc>)
   29c26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   29c2a:	4770      	bx	lr
   29c2c:	e000e100 	.word	0xe000e100

00029c30 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   29c34:	4b01      	ldr	r3, [pc, #4]	; (29c3c <bsd_os_application_irq_clear+0xc>)
   29c36:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   29c3a:	4770      	bx	lr
   29c3c:	e000e100 	.word	0xe000e100

00029c40 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29c40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   29c44:	4b01      	ldr	r3, [pc, #4]	; (29c4c <bsd_os_trace_irq_set+0xc>)
   29c46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   29c4a:	4770      	bx	lr
   29c4c:	e000e100 	.word	0xe000e100

00029c50 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29c50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   29c54:	4b01      	ldr	r3, [pc, #4]	; (29c5c <bsd_os_trace_irq_clear+0xc>)
   29c56:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   29c5a:	4770      	bx	lr
   29c5c:	e000e100 	.word	0xe000e100

00029c60 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   29c60:	b508      	push	{r3, lr}
	list->head = NULL;
   29c62:	2300      	movs	r3, #0
   29c64:	4a07      	ldr	r2, [pc, #28]	; (29c84 <bsd_os_init+0x24>)
	list->tail = NULL;
   29c66:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29c6a:	4a07      	ldr	r2, [pc, #28]	; (29c88 <bsd_os_init+0x28>)
   29c6c:	e8d2 1fef 	ldaex	r1, [r2]
   29c70:	e8c2 3fe0 	stlex	r0, r3, [r2]
   29c74:	2800      	cmp	r0, #0
   29c76:	d1f9      	bne.n	29c6c <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   29c78:	f010 f94c 	bl	39f14 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   29c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   29c80:	f010 b93d 	b.w	39efe <trace_task_create>
   29c84:	200237c0 	.word	0x200237c0
   29c88:	200237bc 	.word	0x200237bc

00029c8c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   29c8c:	f240 2302 	movw	r3, #514	; 0x202
   29c90:	4298      	cmp	r0, r3
   29c92:	f000 8093 	beq.w	29dbc <z_to_nrf_optname+0x130>
   29c96:	dc07      	bgt.n	29ca8 <z_to_nrf_optname+0x1c>
   29c98:	2801      	cmp	r0, #1
   29c9a:	d04d      	beq.n	29d38 <z_to_nrf_optname+0xac>
   29c9c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   29ca0:	d034      	beq.n	29d0c <z_to_nrf_optname+0x80>
   29ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		retval = -1;
		break;
	}

	return retval;
}
   29ca6:	4770      	bx	lr
	switch (z_in_level) {
   29ca8:	f240 2303 	movw	r3, #515	; 0x203
   29cac:	4298      	cmp	r0, r3
   29cae:	d1f8      	bne.n	29ca2 <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   29cb0:	3901      	subs	r1, #1
   29cb2:	2913      	cmp	r1, #19
   29cb4:	d8f5      	bhi.n	29ca2 <z_to_nrf_optname+0x16>
   29cb6:	a301      	add	r3, pc, #4	; (adr r3, 29cbc <z_to_nrf_optname+0x30>)
   29cb8:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   29cbc:	00029dcb 	.word	0x00029dcb
   29cc0:	00029da5 	.word	0x00029da5
   29cc4:	00029da9 	.word	0x00029da9
   29cc8:	00029d49 	.word	0x00029d49
   29ccc:	00029dad 	.word	0x00029dad
   29cd0:	00029db1 	.word	0x00029db1
   29cd4:	00029db5 	.word	0x00029db5
   29cd8:	00029ca3 	.word	0x00029ca3
   29cdc:	00029ca3 	.word	0x00029ca3
   29ce0:	00029ca3 	.word	0x00029ca3
   29ce4:	00029ca3 	.word	0x00029ca3
   29ce8:	00029ca3 	.word	0x00029ca3
   29cec:	00029ca3 	.word	0x00029ca3
   29cf0:	00029ca3 	.word	0x00029ca3
   29cf4:	00029ca3 	.word	0x00029ca3
   29cf8:	00029ca3 	.word	0x00029ca3
   29cfc:	00029ca3 	.word	0x00029ca3
   29d00:	00029ca3 	.word	0x00029ca3
   29d04:	00029ca3 	.word	0x00029ca3
   29d08:	00029db9 	.word	0x00029db9
		switch (z_in_optname) {
   29d0c:	3901      	subs	r1, #1
   29d0e:	2907      	cmp	r1, #7
   29d10:	d8c7      	bhi.n	29ca2 <z_to_nrf_optname+0x16>
   29d12:	a301      	add	r3, pc, #4	; (adr r3, 29d18 <z_to_nrf_optname+0x8c>)
   29d14:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   29d18:	00029da5 	.word	0x00029da5
   29d1c:	00029dad 	.word	0x00029dad
   29d20:	00029db1 	.word	0x00029db1
   29d24:	00029db5 	.word	0x00029db5
   29d28:	00029d49 	.word	0x00029d49
   29d2c:	00029dcb 	.word	0x00029dcb
   29d30:	00029ca3 	.word	0x00029ca3
   29d34:	00029da9 	.word	0x00029da9
		switch (z_in_optname) {
   29d38:	2920      	cmp	r1, #32
   29d3a:	dcb2      	bgt.n	29ca2 <z_to_nrf_optname+0x16>
   29d3c:	2913      	cmp	r1, #19
   29d3e:	dc05      	bgt.n	29d4c <z_to_nrf_optname+0xc0>
   29d40:	2902      	cmp	r1, #2
   29d42:	d027      	beq.n	29d94 <z_to_nrf_optname+0x108>
   29d44:	2904      	cmp	r1, #4
   29d46:	d1ac      	bne.n	29ca2 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   29d48:	2304      	movs	r3, #4
   29d4a:	e03f      	b.n	29dcc <z_to_nrf_optname+0x140>
   29d4c:	3914      	subs	r1, #20
   29d4e:	290c      	cmp	r1, #12
   29d50:	d8a7      	bhi.n	29ca2 <z_to_nrf_optname+0x16>
   29d52:	a301      	add	r3, pc, #4	; (adr r3, 29d58 <z_to_nrf_optname+0xcc>)
   29d54:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   29d58:	00029db9 	.word	0x00029db9
   29d5c:	00029d8d 	.word	0x00029d8d
   29d60:	00029ca3 	.word	0x00029ca3
   29d64:	00029ca3 	.word	0x00029ca3
   29d68:	00029ca3 	.word	0x00029ca3
   29d6c:	00029d91 	.word	0x00029d91
   29d70:	00029ca3 	.word	0x00029ca3
   29d74:	00029ca3 	.word	0x00029ca3
   29d78:	00029ca3 	.word	0x00029ca3
   29d7c:	00029ca3 	.word	0x00029ca3
   29d80:	00029d99 	.word	0x00029d99
   29d84:	00029d9d 	.word	0x00029d9d
   29d88:	00029da1 	.word	0x00029da1
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   29d8c:	2315      	movs	r3, #21
   29d8e:	e01d      	b.n	29dcc <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   29d90:	2319      	movs	r3, #25
   29d92:	e01b      	b.n	29dcc <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   29d94:	2328      	movs	r3, #40	; 0x28
   29d96:	e019      	b.n	29dcc <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   29d98:	231e      	movs	r3, #30
   29d9a:	e017      	b.n	29dcc <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   29d9c:	231f      	movs	r3, #31
   29d9e:	e015      	b.n	29dcc <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   29da0:	2320      	movs	r3, #32
   29da2:	e013      	b.n	29dcc <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   29da4:	2302      	movs	r3, #2
   29da6:	e011      	b.n	29dcc <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   29da8:	2303      	movs	r3, #3
   29daa:	e00f      	b.n	29dcc <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   29dac:	2305      	movs	r3, #5
   29dae:	e00d      	b.n	29dcc <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   29db0:	2306      	movs	r3, #6
   29db2:	e00b      	b.n	29dcc <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   29db4:	2307      	movs	r3, #7
   29db6:	e009      	b.n	29dcc <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   29db8:	2314      	movs	r3, #20
   29dba:	e007      	b.n	29dcc <z_to_nrf_optname+0x140>
		switch (z_in_optname) {
   29dbc:	2902      	cmp	r1, #2
   29dbe:	d0f1      	beq.n	29da4 <z_to_nrf_optname+0x118>
   29dc0:	2903      	cmp	r1, #3
   29dc2:	d0f1      	beq.n	29da8 <z_to_nrf_optname+0x11c>
   29dc4:	2901      	cmp	r1, #1
   29dc6:	f47f af6c 	bne.w	29ca2 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   29dca:	2301      	movs	r3, #1
	int retval = 0;
   29dcc:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   29dce:	6013      	str	r3, [r2, #0]
			break;
   29dd0:	4770      	bx	lr
   29dd2:	bf00      	nop

00029dd4 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   29dd4:	f240 1303 	movw	r3, #259	; 0x103
{
   29dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   29ddc:	4299      	cmp	r1, r3
{
   29dde:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   29de0:	f000 8097 	beq.w	29f12 <nrf91_socket_offload_ioctl+0x13e>
   29de4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   29de8:	d005      	beq.n	29df6 <nrf91_socket_offload_ioctl+0x22>
   29dea:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   29dee:	d171      	bne.n	29ed4 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   29df0:	f06f 0411 	mvn.w	r4, #17
   29df4:	e01d      	b.n	29e32 <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   29df6:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   29dfa:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   29dfe:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   29e00:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   29e04:	4668      	mov	r0, sp
   29e06:	2240      	movs	r2, #64	; 0x40
   29e08:	f011 faf3 	bl	3b3f2 <memset>
	for (int i = 0; i < nfds; i++) {
   29e0c:	466e      	mov	r6, sp
   29e0e:	4655      	mov	r5, sl
   29e10:	4657      	mov	r7, sl
	int retval = 0;
   29e12:	4644      	mov	r4, r8
		tmp[i].events = 0;
   29e14:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   29e16:	4940      	ldr	r1, [pc, #256]	; (29f18 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   29e18:	45c1      	cmp	r9, r8
   29e1a:	dc0e      	bgt.n	29e3a <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   29e1c:	2c00      	cmp	r4, #0
   29e1e:	dc08      	bgt.n	29e32 <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   29e20:	465a      	mov	r2, fp
   29e22:	4649      	mov	r1, r9
   29e24:	4668      	mov	r0, sp
   29e26:	f009 fb49 	bl	334bc <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   29e2a:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   29e2c:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   29e2e:	4599      	cmp	r9, r3
   29e30:	dc28      	bgt.n	29e84 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   29e32:	4620      	mov	r0, r4
   29e34:	b011      	add	sp, #68	; 0x44
   29e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   29e3a:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   29e3c:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   29e3e:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   29e40:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   29e42:	da05      	bge.n	29e50 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   29e44:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   29e46:	f108 0801 	add.w	r8, r8, #1
   29e4a:	3608      	adds	r6, #8
   29e4c:	3708      	adds	r7, #8
   29e4e:	e7e3      	b.n	29e18 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   29e50:	2286      	movs	r2, #134	; 0x86
   29e52:	f7f9 f9c7 	bl	231e4 <z_get_fd_obj>
			if (obj != NULL) {
   29e56:	2300      	movs	r3, #0
   29e58:	492f      	ldr	r1, [pc, #188]	; (29f18 <nrf91_socket_offload_ioctl+0x144>)
   29e5a:	b178      	cbz	r0, 29e7c <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   29e5c:	3801      	subs	r0, #1
   29e5e:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   29e60:	88b8      	ldrh	r0, [r7, #4]
   29e62:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   29e64:	bf42      	ittt	mi
   29e66:	88b2      	ldrhmi	r2, [r6, #4]
   29e68:	f042 0201 	orrmi.w	r2, r2, #1
   29e6c:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   29e6e:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   29e70:	bf42      	ittt	mi
   29e72:	88b2      	ldrhmi	r2, [r6, #4]
   29e74:	f042 0202 	orrmi.w	r2, r2, #2
   29e78:	80b2      	strhmi	r2, [r6, #4]
   29e7a:	e7e4      	b.n	29e46 <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   29e7c:	2220      	movs	r2, #32
				retval++;
   29e7e:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   29e80:	80fa      	strh	r2, [r7, #6]
				retval++;
   29e82:	e7ed      	b.n	29e60 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   29e84:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   29e88:	2a00      	cmp	r2, #0
   29e8a:	db20      	blt.n	29ece <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   29e8c:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   29e90:	88d2      	ldrh	r2, [r2, #6]
   29e92:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   29e94:	bf42      	ittt	mi
   29e96:	88e9      	ldrhmi	r1, [r5, #6]
   29e98:	f041 0101 	orrmi.w	r1, r1, #1
   29e9c:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   29e9e:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   29ea0:	bf42      	ittt	mi
   29ea2:	88e9      	ldrhmi	r1, [r5, #6]
   29ea4:	f041 0104 	orrmi.w	r1, r1, #4
   29ea8:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   29eaa:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   29eac:	bf42      	ittt	mi
   29eae:	88e9      	ldrhmi	r1, [r5, #6]
   29eb0:	f041 0108 	orrmi.w	r1, r1, #8
   29eb4:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   29eb6:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   29eb8:	bf42      	ittt	mi
   29eba:	88e9      	ldrhmi	r1, [r5, #6]
   29ebc:	f041 0120 	orrmi.w	r1, r1, #32
   29ec0:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   29ec2:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   29ec4:	bf42      	ittt	mi
   29ec6:	88ea      	ldrhmi	r2, [r5, #6]
   29ec8:	f042 0210 	orrmi.w	r2, r2, #16
   29ecc:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   29ece:	3301      	adds	r3, #1
   29ed0:	3508      	adds	r5, #8
   29ed2:	e7ac      	b.n	29e2e <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   29ed4:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   29ed6:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
	switch (cmd) {
   29eda:	d00b      	beq.n	29ef4 <nrf91_socket_offload_ioctl+0x120>
   29edc:	2904      	cmp	r1, #4
   29ede:	d111      	bne.n	29f04 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   29ee0:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   29ee2:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   29ee6:	d10d      	bne.n	29f04 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   29ee8:	2101      	movs	r1, #1
   29eea:	1392      	asrs	r2, r2, #14
   29eec:	f009 fae8 	bl	334c0 <nrf_fcntl>
   29ef0:	4604      	mov	r4, r0
		break;
   29ef2:	e79e      	b.n	29e32 <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   29ef4:	2200      	movs	r2, #0
   29ef6:	2102      	movs	r1, #2
   29ef8:	f009 fae2 	bl	334c0 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   29efc:	0380      	lsls	r0, r0, #14
   29efe:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   29f02:	e796      	b.n	29e32 <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   29f04:	f00f f9df 	bl	392c6 <__errno>
   29f08:	2316      	movs	r3, #22
	return retval;
   29f0a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   29f0e:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   29f10:	e78f      	b.n	29e32 <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   29f12:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   29f16:	e78c      	b.n	29e32 <nrf91_socket_offload_ioctl+0x5e>
   29f18:	0003c930 	.word	0x0003c930

00029f1c <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   29f1c:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   29f1e:	4b03      	ldr	r3, [pc, #12]	; (29f2c <nrf91_socket_iface_init+0x10>)
   29f20:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   29f22:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   29f24:	4802      	ldr	r0, [pc, #8]	; (29f30 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   29f26:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   29f28:	f7fb b868 	b.w	24ffc <socket_offload_dns_register>
   29f2c:	20023818 	.word	0x20023818
   29f30:	0003c928 	.word	0x0003c928

00029f34 <nrf91_socket_offload_accept>:
{
   29f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29f38:	b08a      	sub	sp, #40	; 0x28
   29f3a:	4607      	mov	r7, r0
   29f3c:	460c      	mov	r4, r1
   29f3e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   29f40:	f7f9 f980 	bl	23244 <z_reserve_fd>
   29f44:	4606      	mov	r6, r0
	if (fd < 0) {
   29f46:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   29f48:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
	if (fd < 0) {
   29f4c:	da05      	bge.n	29f5a <nrf91_socket_offload_accept+0x26>
	return -1;
   29f4e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
   29f52:	4630      	mov	r0, r6
   29f54:	b00a      	add	sp, #40	; 0x28
   29f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   29f5a:	b31c      	cbz	r4, 29fa4 <nrf91_socket_offload_accept+0x70>
   29f5c:	b32d      	cbz	r5, 29faa <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   29f5e:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   29f60:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   29f62:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   29f64:	bf0c      	ite	eq
   29f66:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   29f68:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   29f6a:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   29f6c:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   29f6e:	4639      	mov	r1, r7
   29f70:	f009 fa40 	bl	333f4 <nrf_accept>
	if (new_sd < 0) {
   29f74:	f1b0 0800 	subs.w	r8, r0, #0
   29f78:	dbe9      	blt.n	29f4e <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   29f7a:	b164      	cbz	r4, 29f96 <nrf91_socket_offload_accept+0x62>
   29f7c:	b15d      	cbz	r5, 29f96 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   29f7e:	687b      	ldr	r3, [r7, #4]
   29f80:	2b02      	cmp	r3, #2
   29f82:	d115      	bne.n	29fb0 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   29f84:	2308      	movs	r3, #8
   29f86:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   29f88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   29f8c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   29f8e:	2301      	movs	r3, #1
   29f90:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   29f92:	9b04      	ldr	r3, [sp, #16]
   29f94:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   29f96:	4630      	mov	r0, r6
   29f98:	4a0c      	ldr	r2, [pc, #48]	; (29fcc <nrf91_socket_offload_accept+0x98>)
   29f9a:	f108 0101 	add.w	r1, r8, #1
   29f9e:	f7f9 f983 	bl	232a8 <z_finalize_fd>
	return fd;
   29fa2:	e7d6      	b.n	29f52 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   29fa4:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   29fa6:	4627      	mov	r7, r4
   29fa8:	e7e1      	b.n	29f6e <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   29faa:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   29fac:	462f      	mov	r7, r5
   29fae:	e7de      	b.n	29f6e <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   29fb0:	2b0a      	cmp	r3, #10
   29fb2:	d106      	bne.n	29fc2 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   29fb4:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   29fb6:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   29fb8:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   29fba:	a901      	add	r1, sp, #4
   29fbc:	f010 f8ac 	bl	3a118 <nrf_to_z_ipv6>
   29fc0:	e7e9      	b.n	29f96 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   29fc2:	4630      	mov	r0, r6
   29fc4:	f7f9 f97a 	bl	232bc <z_free_fd>
   29fc8:	e7c1      	b.n	29f4e <nrf91_socket_offload_accept+0x1a>
   29fca:	bf00      	nop
   29fcc:	0003c930 	.word	0x0003c930

00029fd0 <nrf91_socket_offload_sendmsg>:
{
   29fd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   29fd4:	4680      	mov	r8, r0
   29fd6:	4691      	mov	r9, r2
	if (msg == NULL) {
   29fd8:	460c      	mov	r4, r1
   29fda:	b1f9      	cbz	r1, 2a01c <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   29fdc:	2300      	movs	r3, #0
	ssize_t len = 0;
   29fde:	461a      	mov	r2, r3
   29fe0:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   29fe2:	4283      	cmp	r3, r0
   29fe4:	d124      	bne.n	2a030 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   29fe6:	2a80      	cmp	r2, #128	; 0x80
   29fe8:	d86d      	bhi.n	2a0c6 <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   29fea:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   29fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29ff4:	4836      	ldr	r0, [pc, #216]	; (2a0d0 <nrf91_socket_offload_sendmsg+0x100>)
   29ff6:	f00b fcdf 	bl	359b8 <z_impl_k_mutex_lock>
		len = 0;
   29ffa:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   29ffc:	4e35      	ldr	r6, [pc, #212]	; (2a0d4 <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   29ffe:	68e3      	ldr	r3, [r4, #12]
   2a000:	429d      	cmp	r5, r3
   2a002:	d31c      	bcc.n	2a03e <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   2a004:	2600      	movs	r6, #0
		ret = 0;
   2a006:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   2a008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2a0d4 <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   2a00c:	42b7      	cmp	r7, r6
   2a00e:	dd01      	ble.n	2a014 <nrf91_socket_offload_sendmsg+0x44>
   2a010:	2d00      	cmp	r5, #0
   2a012:	da25      	bge.n	2a060 <nrf91_socket_offload_sendmsg+0x90>
	return z_impl_k_mutex_unlock(mutex);
   2a014:	482e      	ldr	r0, [pc, #184]	; (2a0d0 <nrf91_socket_offload_sendmsg+0x100>)
   2a016:	f00b fd47 	bl	35aa8 <z_impl_k_mutex_unlock>
		return ret;
   2a01a:	e005      	b.n	2a028 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   2a01c:	f00f f953 	bl	392c6 <__errno>
   2a020:	2316      	movs	r3, #22
		return -1;
   2a022:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		errno = EINVAL;
   2a026:	6003      	str	r3, [r0, #0]
}
   2a028:	4628      	mov	r0, r5
   2a02a:	b002      	add	sp, #8
   2a02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   2a030:	68a1      	ldr	r1, [r4, #8]
   2a032:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2a036:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   2a038:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   2a03a:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   2a03c:	e7d1      	b.n	29fe2 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   2a03e:	68a1      	ldr	r1, [r4, #8]
   2a040:	19f0      	adds	r0, r6, r7
   2a042:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   2a046:	685a      	ldr	r2, [r3, #4]
   2a048:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   2a04c:	f011 f9b1 	bl	3b3b2 <memcpy>
			len += msg->msg_iov[i].iov_len;
   2a050:	68a3      	ldr	r3, [r4, #8]
   2a052:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   2a056:	4453      	add	r3, sl
   2a058:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   2a05a:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   2a05c:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   2a05e:	e7ce      	b.n	29ffe <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   2a060:	6863      	ldr	r3, [r4, #4]
   2a062:	1bba      	subs	r2, r7, r6
   2a064:	9301      	str	r3, [sp, #4]
   2a066:	6823      	ldr	r3, [r4, #0]
   2a068:	eb0a 0106 	add.w	r1, sl, r6
   2a06c:	9300      	str	r3, [sp, #0]
   2a06e:	4640      	mov	r0, r8
   2a070:	464b      	mov	r3, r9
   2a072:	f010 f9af 	bl	3a3d4 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   2a076:	1e05      	subs	r5, r0, #0
				offset += ret;
   2a078:	bfc8      	it	gt
   2a07a:	1976      	addgt	r6, r6, r5
   2a07c:	e7c6      	b.n	2a00c <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   2a07e:	68a3      	ldr	r3, [r4, #8]
   2a080:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   2a084:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2a088:	685b      	ldr	r3, [r3, #4]
   2a08a:	b133      	cbz	r3, 2a09a <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   2a08c:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   2a08e:	68a3      	ldr	r3, [r4, #8]
   2a090:	eb03 020a 	add.w	r2, r3, sl
   2a094:	6852      	ldr	r2, [r2, #4]
   2a096:	4297      	cmp	r7, r2
   2a098:	d304      	bcc.n	2a0a4 <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   2a09a:	3601      	adds	r6, #1
   2a09c:	68e3      	ldr	r3, [r4, #12]
   2a09e:	429e      	cmp	r6, r3
   2a0a0:	d3ed      	bcc.n	2a07e <nrf91_socket_offload_sendmsg+0xae>
   2a0a2:	e7c1      	b.n	2a028 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   2a0a4:	f853 100a 	ldr.w	r1, [r3, sl]
   2a0a8:	6863      	ldr	r3, [r4, #4]
   2a0aa:	4640      	mov	r0, r8
   2a0ac:	9301      	str	r3, [sp, #4]
   2a0ae:	6823      	ldr	r3, [r4, #0]
   2a0b0:	1bd2      	subs	r2, r2, r7
   2a0b2:	9300      	str	r3, [sp, #0]
   2a0b4:	4439      	add	r1, r7
   2a0b6:	464b      	mov	r3, r9
   2a0b8:	f010 f98c 	bl	3a3d4 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   2a0bc:	1e03      	subs	r3, r0, #0
   2a0be:	db05      	blt.n	2a0cc <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   2a0c0:	441f      	add	r7, r3
			len += ret;
   2a0c2:	441d      	add	r5, r3
   2a0c4:	e7e3      	b.n	2a08e <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   2a0c6:	2600      	movs	r6, #0
	len = 0;
   2a0c8:	4635      	mov	r5, r6
   2a0ca:	e7e7      	b.n	2a09c <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   2a0cc:	461d      	mov	r5, r3
   2a0ce:	e7ab      	b.n	2a028 <nrf91_socket_offload_sendmsg+0x58>
   2a0d0:	20020800 	.word	0x20020800
   2a0d4:	2002c083 	.word	0x2002c083

0002a0d8 <nrf91_socket_create>:
{
   2a0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a0da:	4606      	mov	r6, r0
   2a0dc:	460d      	mov	r5, r1
   2a0de:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   2a0e0:	f7f9 f8b0 	bl	23244 <z_reserve_fd>
	if (fd < 0) {
   2a0e4:	1e04      	subs	r4, r0, #0
   2a0e6:	db0d      	blt.n	2a104 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   2a0e8:	b2b0      	uxth	r0, r6
   2a0ea:	f00f ff32 	bl	39f52 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2a0ee:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   2a0f2:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   2a0f4:	d109      	bne.n	2a10a <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   2a0f6:	f00f f8e6 	bl	392c6 <__errno>
   2a0fa:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   2a0fc:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   2a0fe:	4620      	mov	r0, r4
   2a100:	f7f9 f8dc 	bl	232bc <z_free_fd>
		return -1;
   2a104:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2a108:	e01b      	b.n	2a142 <nrf91_socket_create+0x6a>
	switch (socktype) {
   2a10a:	2d03      	cmp	r5, #3
   2a10c:	d003      	beq.n	2a116 <nrf91_socket_create+0x3e>
   2a10e:	2d04      	cmp	r5, #4
   2a110:	bf08      	it	eq
   2a112:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   2a116:	4638      	mov	r0, r7
   2a118:	f00f ff37 	bl	39f8a <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   2a11c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   2a120:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   2a122:	d103      	bne.n	2a12c <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   2a124:	f00f f8cf 	bl	392c6 <__errno>
   2a128:	237b      	movs	r3, #123	; 0x7b
   2a12a:	e7e7      	b.n	2a0fc <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   2a12c:	4629      	mov	r1, r5
   2a12e:	4630      	mov	r0, r6
   2a130:	f009 f8b2 	bl	33298 <nrf_socket>
	if (sd < 0) {
   2a134:	1e01      	subs	r1, r0, #0
   2a136:	dbe2      	blt.n	2a0fe <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   2a138:	4620      	mov	r0, r4
   2a13a:	4a03      	ldr	r2, [pc, #12]	; (2a148 <nrf91_socket_create+0x70>)
   2a13c:	3101      	adds	r1, #1
   2a13e:	f7f9 f8b3 	bl	232a8 <z_finalize_fd>
}
   2a142:	4620      	mov	r0, r4
   2a144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a146:	bf00      	nop
   2a148:	0003c930 	.word	0x0003c930

0002a14c <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   2a14c:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   2a14e:	f240 2201 	movw	r2, #513	; 0x201
   2a152:	2102      	movs	r1, #2
   2a154:	2066      	movs	r0, #102	; 0x66
   2a156:	f7fa fe2f 	bl	24db8 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   2a15a:	4b05      	ldr	r3, [pc, #20]	; (2a170 <open_socket+0x24>)
   2a15c:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   2a15e:	3001      	adds	r0, #1
   2a160:	d104      	bne.n	2a16c <open_socket+0x20>
		return -errno;
   2a162:	f00f f8b0 	bl	392c6 <__errno>
   2a166:	6800      	ldr	r0, [r0, #0]
   2a168:	4240      	negs	r0, r0
	}

	return 0;
}
   2a16a:	bd08      	pop	{r3, pc}
	return 0;
   2a16c:	2000      	movs	r0, #0
   2a16e:	e7fc      	b.n	2a16a <open_socket+0x1e>
   2a170:	20023820 	.word	0x20023820

0002a174 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   2a174:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   2a176:	4d17      	ldr	r5, [pc, #92]	; (2a1d4 <at_cmd_driver_init+0x60>)
{
   2a178:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   2a17a:	782b      	ldrb	r3, [r5, #0]
   2a17c:	bb43      	cbnz	r3, 2a1d0 <at_cmd_driver_init+0x5c>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   2a17e:	f7ff ffe5 	bl	2a14c <open_socket>
	if (err) {
   2a182:	4604      	mov	r4, r0
   2a184:	b168      	cbz	r0, 2a1a2 <at_cmd_driver_init+0x2e>
   2a186:	4a14      	ldr	r2, [pc, #80]	; (2a1d8 <at_cmd_driver_init+0x64>)
   2a188:	4b14      	ldr	r3, [pc, #80]	; (2a1dc <at_cmd_driver_init+0x68>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   2a18a:	4601      	mov	r1, r0
   2a18c:	1ad2      	subs	r2, r2, r3
   2a18e:	08d2      	lsrs	r2, r2, #3
   2a190:	0192      	lsls	r2, r2, #6
   2a192:	4813      	ldr	r0, [pc, #76]	; (2a1e0 <at_cmd_driver_init+0x6c>)
   2a194:	f042 0201 	orr.w	r2, r2, #1
   2a198:	f00e f9a1 	bl	384de <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   2a19c:	4620      	mov	r0, r4
   2a19e:	b009      	add	sp, #36	; 0x24
   2a1a0:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2a1a2:	2200      	movs	r2, #0
   2a1a4:	2300      	movs	r3, #0
   2a1a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a1aa:	230a      	movs	r3, #10
   2a1ac:	e9cd 0000 	strd	r0, r0, [sp]
   2a1b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2a1b4:	9004      	str	r0, [sp, #16]
   2a1b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2a1ba:	4b0a      	ldr	r3, [pc, #40]	; (2a1e4 <at_cmd_driver_init+0x70>)
   2a1bc:	490a      	ldr	r1, [pc, #40]	; (2a1e8 <at_cmd_driver_init+0x74>)
   2a1be:	480b      	ldr	r0, [pc, #44]	; (2a1ec <at_cmd_driver_init+0x78>)
   2a1c0:	f00c f94c 	bl	3645c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   2a1c4:	490a      	ldr	r1, [pc, #40]	; (2a1f0 <at_cmd_driver_init+0x7c>)
   2a1c6:	f010 fe34 	bl	3ae32 <z_impl_k_thread_name_set>
	initialized = true;
   2a1ca:	2301      	movs	r3, #1
   2a1cc:	702b      	strb	r3, [r5, #0]
	return 0;
   2a1ce:	e7e5      	b.n	2a19c <at_cmd_driver_init+0x28>
		return 0;
   2a1d0:	2400      	movs	r4, #0
   2a1d2:	e7e3      	b.n	2a19c <at_cmd_driver_init+0x28>
   2a1d4:	2002cb8f 	.word	0x2002cb8f
   2a1d8:	0003c2dc 	.word	0x0003c2dc
   2a1dc:	0003c2cc 	.word	0x0003c2cc
   2a1e0:	0003f952 	.word	0x0003f952
   2a1e4:	0002a315 	.word	0x0002a315
   2a1e8:	2002f498 	.word	0x2002f498
   2a1ec:	200217b0 	.word	0x200217b0
   2a1f0:	0003f974 	.word	0x0003f974

0002a1f4 <complete_cmd>:
{
   2a1f4:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2a1f6:	4c08      	ldr	r4, [pc, #32]	; (2a218 <complete_cmd+0x24>)
   2a1f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a1fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a200:	4620      	mov	r0, r4
   2a202:	f00b fbd9 	bl	359b8 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   2a206:	2200      	movs	r2, #0
   2a208:	4b04      	ldr	r3, [pc, #16]	; (2a21c <complete_cmd+0x28>)
   2a20a:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   2a20c:	4620      	mov	r0, r4
}
   2a20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a212:	f00b bc49 	b.w	35aa8 <z_impl_k_mutex_unlock>
   2a216:	bf00      	nop
   2a218:	2002079c 	.word	0x2002079c
   2a21c:	20023824 	.word	0x20023824

0002a220 <load_cmd_and_write>:
{
   2a220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a224:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   2a226:	4e32      	ldr	r6, [pc, #200]	; (2a2f0 <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2a228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a22c:	4637      	mov	r7, r6
   2a22e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a232:	4830      	ldr	r0, [pc, #192]	; (2a2f4 <load_cmd_and_write+0xd4>)
   2a234:	f00b fbc0 	bl	359b8 <z_impl_k_mutex_lock>
   2a238:	4d2f      	ldr	r5, [pc, #188]	; (2a2f8 <load_cmd_and_write+0xd8>)
   2a23a:	4b30      	ldr	r3, [pc, #192]	; (2a2fc <load_cmd_and_write+0xdc>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a23c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 2a310 <load_cmd_and_write+0xf0>
   2a240:	1aed      	subs	r5, r5, r3
   2a242:	08ed      	lsrs	r5, r5, #3
   2a244:	6833      	ldr	r3, [r6, #0]
   2a246:	2b00      	cmp	r3, #0
   2a248:	d14b      	bne.n	2a2e2 <load_cmd_and_write+0xc2>
   2a24a:	2200      	movs	r2, #0
   2a24c:	2300      	movs	r3, #0
   2a24e:	4631      	mov	r1, r6
   2a250:	4640      	mov	r0, r8
   2a252:	f00b fb53 	bl	358fc <z_impl_k_msgq_get>
   2a256:	4604      	mov	r4, r0
   2a258:	2800      	cmp	r0, #0
   2a25a:	d142      	bne.n	2a2e2 <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   2a25c:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   2a25e:	4608      	mov	r0, r1
   2a260:	9103      	str	r1, [sp, #12]
   2a262:	f7f2 ff05 	bl	1d070 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2a266:	4b26      	ldr	r3, [pc, #152]	; (2a300 <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   2a268:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2a26a:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2a26c:	9903      	ldr	r1, [sp, #12]
   2a26e:	4623      	mov	r3, r4
   2a270:	e9cd 4400 	strd	r4, r4, [sp]
   2a274:	9202      	str	r2, [sp, #8]
   2a276:	f00e fd93 	bl	38da0 <z_impl_zsock_sendto>
   2a27a:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   2a27c:	1c48      	adds	r0, r1, #1
   2a27e:	9a02      	ldr	r2, [sp, #8]
   2a280:	d126      	bne.n	2a2d0 <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   2a282:	f00f f820 	bl	392c6 <__errno>
   2a286:	01ac      	lsls	r4, r5, #6
   2a288:	f044 0401 	orr.w	r4, r4, #1
   2a28c:	4622      	mov	r2, r4
   2a28e:	6801      	ldr	r1, [r0, #0]
   2a290:	481c      	ldr	r0, [pc, #112]	; (2a304 <load_cmd_and_write+0xe4>)
   2a292:	f00e f924 	bl	384de <log_1>
		return -errno;
   2a296:	f00f f816 	bl	392c6 <__errno>
   2a29a:	6804      	ldr	r4, [r0, #0]
   2a29c:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   2a29e:	7c3b      	ldrb	r3, [r7, #16]
   2a2a0:	07da      	lsls	r2, r3, #31
   2a2a2:	d502      	bpl.n	2a2aa <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   2a2a4:	6838      	ldr	r0, [r7, #0]
   2a2a6:	f011 f847 	bl	3b338 <k_free>
		if (ret != 0) {
   2a2aa:	b1d4      	cbz	r4, 2a2e2 <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   2a2ac:	2305      	movs	r3, #5
   2a2ae:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2a2b2:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   2a2b4:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2a2b6:	079b      	lsls	r3, r3, #30
   2a2b8:	d507      	bpl.n	2a2ca <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a2ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a2be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a2c2:	4811      	ldr	r0, [pc, #68]	; (2a308 <load_cmd_and_write+0xe8>)
   2a2c4:	a904      	add	r1, sp, #16
   2a2c6:	f00b fac5 	bl	35854 <z_impl_k_msgq_put>
			complete_cmd();
   2a2ca:	f7ff ff93 	bl	2a1f4 <complete_cmd>
	} while (ret != 0);
   2a2ce:	e7b9      	b.n	2a244 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   2a2d0:	428a      	cmp	r2, r1
   2a2d2:	d0e4      	beq.n	2a29e <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   2a2d4:	01ab      	lsls	r3, r5, #6
   2a2d6:	480d      	ldr	r0, [pc, #52]	; (2a30c <load_cmd_and_write+0xec>)
   2a2d8:	f043 0302 	orr.w	r3, r3, #2
   2a2dc:	f00e f916 	bl	3850c <log_2>
   2a2e0:	e7dd      	b.n	2a29e <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   2a2e2:	4804      	ldr	r0, [pc, #16]	; (2a2f4 <load_cmd_and_write+0xd4>)
   2a2e4:	f00b fbe0 	bl	35aa8 <z_impl_k_mutex_unlock>
}
   2a2e8:	b006      	add	sp, #24
   2a2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a2ee:	bf00      	nop
   2a2f0:	20023824 	.word	0x20023824
   2a2f4:	2002079c 	.word	0x2002079c
   2a2f8:	0003c2dc 	.word	0x0003c2dc
   2a2fc:	0003c2cc 	.word	0x0003c2cc
   2a300:	20023820 	.word	0x20023820
   2a304:	0003f989 	.word	0x0003f989
   2a308:	2002083c 	.word	0x2002083c
   2a30c:	0003f9ac 	.word	0x0003f9ac
   2a310:	20020814 	.word	0x20020814

0002a314 <socket_thread_fn>:
{
   2a314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a318:	f8df 9260 	ldr.w	r9, [pc, #608]	; 2a57c <socket_thread_fn+0x268>
   2a31c:	4f83      	ldr	r7, [pc, #524]	; (2a52c <socket_thread_fn+0x218>)
   2a31e:	46ca      	mov	sl, r9
   2a320:	4b83      	ldr	r3, [pc, #524]	; (2a530 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2a322:	4e84      	ldr	r6, [pc, #528]	; (2a534 <socket_thread_fn+0x220>)
   2a324:	1aff      	subs	r7, r7, r3
   2a326:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   2a328:	f7ff ff7a 	bl	2a220 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a32c:	f8d9 0000 	ldr.w	r0, [r9]
   2a330:	2500      	movs	r5, #0
   2a332:	f640 228c 	movw	r2, #2700	; 0xa8c
   2a336:	462b      	mov	r3, r5
   2a338:	e9cd 5500 	strd	r5, r5, [sp]
   2a33c:	497d      	ldr	r1, [pc, #500]	; (2a534 <socket_thread_fn+0x220>)
   2a33e:	f00e fd4c 	bl	38dda <z_impl_zsock_recvfrom>
		ret.code  = 0;
   2a342:	4c7d      	ldr	r4, [pc, #500]	; (2a538 <socket_thread_fn+0x224>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a344:	f8df b238 	ldr.w	fp, [pc, #568]	; 2a580 <socket_thread_fn+0x26c>
		if (bytes_read < 0) {
   2a348:	42a8      	cmp	r0, r5
   2a34a:	4680      	mov	r8, r0
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a34c:	f8cb 0000 	str.w	r0, [fp]
		ret.code  = 0;
   2a350:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   2a352:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   2a354:	da6a      	bge.n	2a42c <socket_thread_fn+0x118>
			if (errno == EHOSTDOWN) {
   2a356:	f00e ffb6 	bl	392c6 <__errno>
   2a35a:	6803      	ldr	r3, [r0, #0]
   2a35c:	2b75      	cmp	r3, #117	; 0x75
   2a35e:	d122      	bne.n	2a3a6 <socket_thread_fn+0x92>
   2a360:	2301      	movs	r3, #1
   2a362:	4c76      	ldr	r4, [pc, #472]	; (2a53c <socket_thread_fn+0x228>)
   2a364:	e8d4 2fef 	ldaex	r2, [r4]
   2a368:	e8c4 3fe1 	stlex	r1, r3, [r4]
   2a36c:	2900      	cmp	r1, #0
   2a36e:	d1f9      	bne.n	2a364 <socket_thread_fn+0x50>
				close(common_socket_fd);
   2a370:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   2a374:	f00e fca7 	bl	38cc6 <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   2a378:	f7ff f98e 	bl	29698 <bsdlib_shutdown_wait>
   2a37c:	e8d4 3fef 	ldaex	r3, [r4]
   2a380:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2a384:	2a00      	cmp	r2, #0
   2a386:	d1f9      	bne.n	2a37c <socket_thread_fn+0x68>
				if (open_socket() != 0) {
   2a388:	f7ff fee0 	bl	2a14c <open_socket>
   2a38c:	2800      	cmp	r0, #0
   2a38e:	d0cb      	beq.n	2a328 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   2a390:	f00e ff99 	bl	392c6 <__errno>
   2a394:	01bc      	lsls	r4, r7, #6
   2a396:	f044 0401 	orr.w	r4, r4, #1
   2a39a:	6801      	ldr	r1, [r0, #0]
   2a39c:	4622      	mov	r2, r4
   2a39e:	4868      	ldr	r0, [pc, #416]	; (2a540 <socket_thread_fn+0x22c>)
   2a3a0:	f00e f89d 	bl	384de <log_1>
   2a3a4:	e7c0      	b.n	2a328 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   2a3a6:	01bd      	lsls	r5, r7, #6
   2a3a8:	f8db 1000 	ldr.w	r1, [fp]
   2a3ac:	4865      	ldr	r0, [pc, #404]	; (2a544 <socket_thread_fn+0x230>)
   2a3ae:	f045 0201 	orr.w	r2, r5, #1
   2a3b2:	f00e f894 	bl	384de <log_1>
			if ((close(common_socket_fd) == 0) &&
   2a3b6:	f8d9 0000 	ldr.w	r0, [r9]
   2a3ba:	f00e fc84 	bl	38cc6 <z_impl_zsock_close>
   2a3be:	bb28      	cbnz	r0, 2a40c <socket_thread_fn+0xf8>
			    (open_socket() == 0)) {
   2a3c0:	f7ff fec4 	bl	2a14c <open_socket>
			if ((close(common_socket_fd) == 0) &&
   2a3c4:	bb10      	cbnz	r0, 2a40c <socket_thread_fn+0xf8>
				LOG_INF("AT socket recovered");
   2a3c6:	4860      	ldr	r0, [pc, #384]	; (2a548 <socket_thread_fn+0x234>)
   2a3c8:	f045 0103 	orr.w	r1, r5, #3
   2a3cc:	f00e f878 	bl	384c0 <log_0>
				ret.state = AT_CMD_ERROR_READ;
   2a3d0:	2306      	movs	r3, #6
   2a3d2:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   2a3d4:	f00e ff77 	bl	392c6 <__errno>
   2a3d8:	6803      	ldr	r3, [r0, #0]
   2a3da:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   2a3dc:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   2a3de:	4b5b      	ldr	r3, [pc, #364]	; (2a54c <socket_thread_fn+0x238>)
   2a3e0:	681a      	ldr	r2, [r3, #0]
   2a3e2:	b16a      	cbz	r2, 2a400 <socket_thread_fn+0xec>
   2a3e4:	7c1b      	ldrb	r3, [r3, #16]
   2a3e6:	079b      	lsls	r3, r3, #30
   2a3e8:	d50a      	bpl.n	2a400 <socket_thread_fn+0xec>
		    current_cmd.flags & AT_CMD_SYNC &&
   2a3ea:	7923      	ldrb	r3, [r4, #4]
   2a3ec:	2b07      	cmp	r3, #7
   2a3ee:	d09b      	beq.n	2a328 <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a3f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a3f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a3f8:	494f      	ldr	r1, [pc, #316]	; (2a538 <socket_thread_fn+0x224>)
   2a3fa:	4855      	ldr	r0, [pc, #340]	; (2a550 <socket_thread_fn+0x23c>)
   2a3fc:	f00b fa2a 	bl	35854 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   2a400:	7923      	ldrb	r3, [r4, #4]
   2a402:	2b07      	cmp	r3, #7
   2a404:	d090      	beq.n	2a328 <socket_thread_fn+0x14>
			complete_cmd();
   2a406:	f7ff fef5 	bl	2a1f4 <complete_cmd>
   2a40a:	e78d      	b.n	2a328 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   2a40c:	f00e ff5b 	bl	392c6 <__errno>
   2a410:	f045 0501 	orr.w	r5, r5, #1
   2a414:	6801      	ldr	r1, [r0, #0]
   2a416:	462a      	mov	r2, r5
   2a418:	484e      	ldr	r0, [pc, #312]	; (2a554 <socket_thread_fn+0x240>)
   2a41a:	f00e f860 	bl	384de <log_1>
			close(common_socket_fd);
   2a41e:	f8da 0000 	ldr.w	r0, [sl]
}
   2a422:	b003      	add	sp, #12
   2a424:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a428:	f00e bc4d 	b.w	38cc6 <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   2a42c:	d10a      	bne.n	2a444 <socket_thread_fn+0x130>
			LOG_ERR("AT message empty");
   2a42e:	01b9      	lsls	r1, r7, #6
   2a430:	4849      	ldr	r0, [pc, #292]	; (2a558 <socket_thread_fn+0x244>)
   2a432:	f041 0101 	orr.w	r1, r1, #1
   2a436:	f00e f843 	bl	384c0 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   2a43a:	2306      	movs	r3, #6
   2a43c:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   2a43e:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   2a442:	e7cb      	b.n	2a3dc <socket_thread_fn+0xc8>
		} else if (buf[bytes_read - 1] != '\0') {
   2a444:	1833      	adds	r3, r6, r0
   2a446:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2a44a:	b153      	cbz	r3, 2a462 <socket_thread_fn+0x14e>
			LOG_ERR("AT message too large for reception buffer or "
   2a44c:	01b9      	lsls	r1, r7, #6
   2a44e:	4843      	ldr	r0, [pc, #268]	; (2a55c <socket_thread_fn+0x248>)
   2a450:	f041 0101 	orr.w	r1, r1, #1
   2a454:	f00e f834 	bl	384c0 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   2a458:	2306      	movs	r3, #6
   2a45a:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   2a45c:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2a460:	e7bc      	b.n	2a3dc <socket_thread_fn+0xc8>
	ret->state = AT_CMD_NOTIFICATION;
   2a462:	2307      	movs	r3, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   2a464:	1f45      	subs	r5, r0, #5
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a466:	483e      	ldr	r0, [pc, #248]	; (2a560 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   2a468:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a46a:	f7f2 fe01 	bl	1d070 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   2a46e:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a470:	4602      	mov	r2, r0
   2a472:	493b      	ldr	r1, [pc, #236]	; (2a560 <socket_thread_fn+0x24c>)
   2a474:	4628      	mov	r0, r5
   2a476:	f011 f903 	bl	3b680 <strncmp>
		if (match) {
   2a47a:	b9c0      	cbnz	r0, 2a4ae <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   2a47c:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a47e:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   2a480:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   2a482:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   2a484:	3201      	adds	r2, #1
   2a486:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   2a488:	4d30      	ldr	r5, [pc, #192]	; (2a54c <socket_thread_fn+0x238>)
   2a48a:	682b      	ldr	r3, [r5, #0]
   2a48c:	2b00      	cmp	r3, #0
   2a48e:	d043      	beq.n	2a518 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   2a490:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   2a492:	2800      	cmp	r0, #0
   2a494:	d040      	beq.n	2a518 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   2a496:	7923      	ldrb	r3, [r4, #4]
   2a498:	2b07      	cmp	r3, #7
   2a49a:	d12e      	bne.n	2a4fa <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   2a49c:	4b31      	ldr	r3, [pc, #196]	; (2a564 <socket_thread_fn+0x250>)
   2a49e:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   2a4a0:	b913      	cbnz	r3, 2a4a8 <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   2a4a2:	68ab      	ldr	r3, [r5, #8]
   2a4a4:	2b00      	cmp	r3, #0
   2a4a6:	d09a      	beq.n	2a3de <socket_thread_fn+0xca>
			current_cmd.callback(buf);
   2a4a8:	4630      	mov	r0, r6
   2a4aa:	4798      	blx	r3
   2a4ac:	e797      	b.n	2a3de <socket_thread_fn+0xca>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   2a4ae:	4630      	mov	r0, r6
   2a4b0:	492d      	ldr	r1, [pc, #180]	; (2a568 <socket_thread_fn+0x254>)
   2a4b2:	f011 f931 	bl	3b718 <strstr>
		if (tmpstr) {
   2a4b6:	4605      	mov	r5, r0
   2a4b8:	b128      	cbz	r0, 2a4c6 <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   2a4ba:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a4bc:	482b      	ldr	r0, [pc, #172]	; (2a56c <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   2a4be:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a4c0:	f010 ff57 	bl	3b372 <atoi>
   2a4c4:	e7db      	b.n	2a47e <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2a4c6:	4630      	mov	r0, r6
   2a4c8:	4929      	ldr	r1, [pc, #164]	; (2a570 <socket_thread_fn+0x25c>)
   2a4ca:	f011 f925 	bl	3b718 <strstr>
		if (tmpstr) {
   2a4ce:	4605      	mov	r5, r0
   2a4d0:	b108      	cbz	r0, 2a4d6 <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   2a4d2:	2303      	movs	r3, #3
   2a4d4:	e7f2      	b.n	2a4bc <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2a4d6:	4827      	ldr	r0, [pc, #156]	; (2a574 <socket_thread_fn+0x260>)
   2a4d8:	f7f2 fdca 	bl	1d070 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   2a4dc:	f1a8 0508 	sub.w	r5, r8, #8
   2a4e0:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2a4e2:	4602      	mov	r2, r0
   2a4e4:	4923      	ldr	r1, [pc, #140]	; (2a574 <socket_thread_fn+0x260>)
   2a4e6:	4628      	mov	r0, r5
   2a4e8:	f011 f8ca 	bl	3b680 <strncmp>
		if (match) {
   2a4ec:	b9c0      	cbnz	r0, 2a520 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   2a4ee:	2301      	movs	r3, #1
   2a4f0:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   2a4f2:	f06f 0307 	mvn.w	r3, #7
   2a4f6:	6023      	str	r3, [r4, #0]
			break;
   2a4f8:	e7c2      	b.n	2a480 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   2a4fa:	68eb      	ldr	r3, [r5, #12]
   2a4fc:	429a      	cmp	r2, r3
   2a4fe:	d908      	bls.n	2a512 <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   2a500:	01b9      	lsls	r1, r7, #6
   2a502:	481d      	ldr	r0, [pc, #116]	; (2a578 <socket_thread_fn+0x264>)
   2a504:	f041 0101 	orr.w	r1, r1, #1
   2a508:	f00d ffda 	bl	384c0 <log_0>
				ret.code  = -EMSGSIZE;
   2a50c:	f06f 0379 	mvn.w	r3, #121	; 0x79
   2a510:	e764      	b.n	2a3dc <socket_thread_fn+0xc8>
   2a512:	4631      	mov	r1, r6
   2a514:	f010 ff4d 	bl	3b3b2 <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   2a518:	7923      	ldrb	r3, [r4, #4]
   2a51a:	2b07      	cmp	r3, #7
   2a51c:	d1c1      	bne.n	2a4a2 <socket_thread_fn+0x18e>
   2a51e:	e7bd      	b.n	2a49c <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   2a520:	4630      	mov	r0, r6
   2a522:	f7f2 fda5 	bl	1d070 <strlen>
   2a526:	1c42      	adds	r2, r0, #1
   2a528:	e7ae      	b.n	2a488 <socket_thread_fn+0x174>
   2a52a:	bf00      	nop
   2a52c:	0003c2dc 	.word	0x0003c2dc
   2a530:	0003c2cc 	.word	0x0003c2cc
   2a534:	2002c103 	.word	0x2002c103
   2a538:	2002383c 	.word	0x2002383c
   2a53c:	20023844 	.word	0x20023844
   2a540:	0003f9de 	.word	0x0003f9de
   2a544:	0003fa12 	.word	0x0003fa12
   2a548:	0003fa34 	.word	0x0003fa34
   2a54c:	20023824 	.word	0x20023824
   2a550:	2002083c 	.word	0x2002083c
   2a554:	0003fa48 	.word	0x0003fa48
   2a558:	0003fa7f 	.word	0x0003fa7f
   2a55c:	0003fa90 	.word	0x0003fa90
   2a560:	0003d34d 	.word	0x0003d34d
   2a564:	20023838 	.word	0x20023838
   2a568:	0003fadb 	.word	0x0003fadb
   2a56c:	2002c10e 	.word	0x2002c10e
   2a570:	0003fae7 	.word	0x0003fae7
   2a574:	0003d45b 	.word	0x0003d45b
   2a578:	0003faf3 	.word	0x0003faf3
   2a57c:	20023820 	.word	0x20023820
   2a580:	2002381c 	.word	0x2002381c

0002a584 <at_cmd_write>:
{
   2a584:	b530      	push	{r4, r5, lr}
   2a586:	461c      	mov	r4, r3
   2a588:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a58a:	4b32      	ldr	r3, [pc, #200]	; (2a654 <at_cmd_write+0xd0>)
   2a58c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   2a590:	2b01      	cmp	r3, #1
   2a592:	d05c      	beq.n	2a64e <at_cmd_write+0xca>
	if (cmd == NULL) {
   2a594:	b160      	cbz	r0, 2a5b0 <at_cmd_write+0x2c>
   2a596:	1e45      	subs	r5, r0, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   2a598:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   2a59c:	b9d3      	cbnz	r3, 2a5d4 <at_cmd_write+0x50>
   2a59e:	492e      	ldr	r1, [pc, #184]	; (2a658 <at_cmd_write+0xd4>)
   2a5a0:	4b2e      	ldr	r3, [pc, #184]	; (2a65c <at_cmd_write+0xd8>)
		LOG_ERR("Invalid command");
   2a5a2:	482f      	ldr	r0, [pc, #188]	; (2a660 <at_cmd_write+0xdc>)
   2a5a4:	1ac9      	subs	r1, r1, r3
   2a5a6:	08c9      	lsrs	r1, r1, #3
   2a5a8:	0189      	lsls	r1, r1, #6
   2a5aa:	f041 0101 	orr.w	r1, r1, #1
   2a5ae:	e007      	b.n	2a5c0 <at_cmd_write+0x3c>
   2a5b0:	4929      	ldr	r1, [pc, #164]	; (2a658 <at_cmd_write+0xd4>)
   2a5b2:	4b2a      	ldr	r3, [pc, #168]	; (2a65c <at_cmd_write+0xd8>)
		LOG_ERR("cmd is NULL");
   2a5b4:	482b      	ldr	r0, [pc, #172]	; (2a664 <at_cmd_write+0xe0>)
   2a5b6:	1ac9      	subs	r1, r1, r3
   2a5b8:	08c9      	lsrs	r1, r1, #3
   2a5ba:	0189      	lsls	r1, r1, #6
   2a5bc:	f041 0101 	orr.w	r1, r1, #1
   2a5c0:	f00d ff7e 	bl	384c0 <log_0>
		if (state) {
   2a5c4:	b91c      	cbnz	r4, 2a5ce <at_cmd_write+0x4a>
		return -EINVAL;
   2a5c6:	f06f 0015 	mvn.w	r0, #21
}
   2a5ca:	b009      	add	sp, #36	; 0x24
   2a5cc:	bd30      	pop	{r4, r5, pc}
			*state = AT_CMD_ERROR_QUEUE;
   2a5ce:	2304      	movs	r3, #4
   2a5d0:	7023      	strb	r3, [r4, #0]
   2a5d2:	e7f8      	b.n	2a5c6 <at_cmd_write+0x42>
		if (*c > ' ') {
   2a5d4:	2b20      	cmp	r3, #32
   2a5d6:	d9df      	bls.n	2a598 <at_cmd_write+0x14>
	command.callback = NULL;
   2a5d8:	2300      	movs	r3, #0
   2a5da:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   2a5dc:	2302      	movs	r3, #2
	command.resp = buf;
   2a5de:	e9cd 0103 	strd	r0, r1, [sp, #12]
	command.resp_size = buf_len;
   2a5e2:	9206      	str	r2, [sp, #24]
	command.flags = AT_CMD_SYNC;
   2a5e4:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   2a5e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a5ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a5f0:	481d      	ldr	r0, [pc, #116]	; (2a668 <at_cmd_write+0xe4>)
   2a5f2:	f00b f9e1 	bl	359b8 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a5f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a5fa:	a903      	add	r1, sp, #12
   2a5fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a600:	481a      	ldr	r0, [pc, #104]	; (2a66c <at_cmd_write+0xe8>)
   2a602:	f00b f927 	bl	35854 <z_impl_k_msgq_put>
   2a606:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   2a608:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   2a60a:	b170      	cbz	r0, 2a62a <at_cmd_write+0xa6>
   2a60c:	4a12      	ldr	r2, [pc, #72]	; (2a658 <at_cmd_write+0xd4>)
   2a60e:	4b13      	ldr	r3, [pc, #76]	; (2a65c <at_cmd_write+0xd8>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   2a610:	4817      	ldr	r0, [pc, #92]	; (2a670 <at_cmd_write+0xec>)
   2a612:	1ad2      	subs	r2, r2, r3
   2a614:	08d2      	lsrs	r2, r2, #3
   2a616:	0192      	lsls	r2, r2, #6
   2a618:	f042 0201 	orr.w	r2, r2, #1
   2a61c:	f00d ff5f 	bl	384de <log_1>
		if (state) {
   2a620:	b10c      	cbz	r4, 2a626 <at_cmd_write+0xa2>
			*state = AT_CMD_ERROR_QUEUE;
   2a622:	2304      	movs	r3, #4
		*state = ret.state;
   2a624:	7023      	strb	r3, [r4, #0]
	return ret.code;
   2a626:	9801      	ldr	r0, [sp, #4]
   2a628:	e7cf      	b.n	2a5ca <at_cmd_write+0x46>
	load_cmd_and_write();
   2a62a:	f7ff fdf9 	bl	2a220 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a62e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a636:	a901      	add	r1, sp, #4
   2a638:	480e      	ldr	r0, [pc, #56]	; (2a674 <at_cmd_write+0xf0>)
   2a63a:	f00b f95f 	bl	358fc <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   2a63e:	480a      	ldr	r0, [pc, #40]	; (2a668 <at_cmd_write+0xe4>)
   2a640:	f00b fa32 	bl	35aa8 <z_impl_k_mutex_unlock>
	if (state) {
   2a644:	2c00      	cmp	r4, #0
   2a646:	d0ee      	beq.n	2a626 <at_cmd_write+0xa2>
		*state = ret.state;
   2a648:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2a64c:	e7ea      	b.n	2a624 <at_cmd_write+0xa0>
		return -EHOSTDOWN;
   2a64e:	f06f 0074 	mvn.w	r0, #116	; 0x74
   2a652:	e7ba      	b.n	2a5ca <at_cmd_write+0x46>
   2a654:	20023844 	.word	0x20023844
   2a658:	0003c2dc 	.word	0x0003c2dc
   2a65c:	0003c2cc 	.word	0x0003c2cc
   2a660:	0003fb20 	.word	0x0003fb20
   2a664:	0003fb14 	.word	0x0003fb14
   2a668:	200207d8 	.word	0x200207d8
   2a66c:	20020814 	.word	0x20020814
   2a670:	0003fb30 	.word	0x0003fb30
   2a674:	2002083c 	.word	0x2002083c

0002a678 <at_cmd_set_notification_handler>:
{
   2a678:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   2a67a:	4c09      	ldr	r4, [pc, #36]	; (2a6a0 <at_cmd_set_notification_handler+0x28>)
{
   2a67c:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   2a67e:	6821      	ldr	r1, [r4, #0]
   2a680:	b159      	cbz	r1, 2a69a <at_cmd_set_notification_handler+0x22>
   2a682:	4281      	cmp	r1, r0
   2a684:	d009      	beq.n	2a69a <at_cmd_set_notification_handler+0x22>
   2a686:	4a07      	ldr	r2, [pc, #28]	; (2a6a4 <at_cmd_set_notification_handler+0x2c>)
   2a688:	4b07      	ldr	r3, [pc, #28]	; (2a6a8 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   2a68a:	4808      	ldr	r0, [pc, #32]	; (2a6ac <at_cmd_set_notification_handler+0x34>)
   2a68c:	1ad2      	subs	r2, r2, r3
   2a68e:	08d2      	lsrs	r2, r2, #3
   2a690:	0192      	lsls	r2, r2, #6
   2a692:	f042 0202 	orr.w	r2, r2, #2
   2a696:	f00d ff22 	bl	384de <log_1>
	notification_handler = handler;
   2a69a:	6025      	str	r5, [r4, #0]
}
   2a69c:	bd38      	pop	{r3, r4, r5, pc}
   2a69e:	bf00      	nop
   2a6a0:	20023838 	.word	0x20023838
   2a6a4:	0003c2dc 	.word	0x0003c2dc
   2a6a8:	0003c2cc 	.word	0x0003c2cc
   2a6ac:	0003fb50 	.word	0x0003fb50

0002a6b0 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2a6b0:	4b0f      	ldr	r3, [pc, #60]	; (2a6f0 <find_node+0x40>)
{
   2a6b2:	b570      	push	{r4, r5, r6, lr}
   2a6b4:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2a6b6:	6818      	ldr	r0, [r3, #0]
   2a6b8:	b170      	cbz	r0, 2a6d8 <find_node+0x28>
	return node->next;
   2a6ba:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a6bc:	4603      	mov	r3, r0
   2a6be:	2d00      	cmp	r5, #0
   2a6c0:	4628      	mov	r0, r5
   2a6c2:	bf38      	it	cc
   2a6c4:	2000      	movcc	r0, #0
   2a6c6:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   2a6c8:	685e      	ldr	r6, [r3, #4]
   2a6ca:	428e      	cmp	r6, r1
   2a6cc:	d105      	bne.n	2a6da <find_node+0x2a>
   2a6ce:	689e      	ldr	r6, [r3, #8]
   2a6d0:	4296      	cmp	r6, r2
   2a6d2:	d102      	bne.n	2a6da <find_node+0x2a>
			*prev_out = prev;
			return curr;
   2a6d4:	4618      	mov	r0, r3
			*prev_out = prev;
   2a6d6:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   2a6d8:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2a6da:	2800      	cmp	r0, #0
   2a6dc:	d0fc      	beq.n	2a6d8 <find_node+0x28>
	return node->next;
   2a6de:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a6e0:	461d      	mov	r5, r3
   2a6e2:	2e00      	cmp	r6, #0
   2a6e4:	4603      	mov	r3, r0
   2a6e6:	4630      	mov	r0, r6
   2a6e8:	bf38      	it	cc
   2a6ea:	2000      	movcc	r0, #0
   2a6ec:	e7ec      	b.n	2a6c8 <find_node+0x18>
   2a6ee:	bf00      	nop
   2a6f0:	20023848 	.word	0x20023848

0002a6f4 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   2a6f4:	4a0c      	ldr	r2, [pc, #48]	; (2a728 <module_init+0x34>)
{
   2a6f6:	b508      	push	{r3, lr}
	if (initialized) {
   2a6f8:	7813      	ldrb	r3, [r2, #0]
   2a6fa:	b15b      	cbz	r3, 2a714 <module_init+0x20>
   2a6fc:	490b      	ldr	r1, [pc, #44]	; (2a72c <module_init+0x38>)
   2a6fe:	4b0c      	ldr	r3, [pc, #48]	; (2a730 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   2a700:	480c      	ldr	r0, [pc, #48]	; (2a734 <module_init+0x40>)
   2a702:	1ac9      	subs	r1, r1, r3
   2a704:	08c9      	lsrs	r1, r1, #3
   2a706:	0189      	lsls	r1, r1, #6
   2a708:	f041 0102 	orr.w	r1, r1, #2
   2a70c:	f00d fed8 	bl	384c0 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   2a710:	2000      	movs	r0, #0
   2a712:	bd08      	pop	{r3, pc}
	initialized = true;
   2a714:	2101      	movs	r1, #1
   2a716:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   2a718:	4a07      	ldr	r2, [pc, #28]	; (2a738 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   2a71a:	4808      	ldr	r0, [pc, #32]	; (2a73c <module_init+0x48>)
	list->tail = NULL;
   2a71c:	e9c2 3300 	strd	r3, r3, [r2]
   2a720:	f7ff ffaa 	bl	2a678 <at_cmd_set_notification_handler>
	return 0;
   2a724:	e7f4      	b.n	2a710 <module_init+0x1c>
   2a726:	bf00      	nop
   2a728:	2002cb90 	.word	0x2002cb90
   2a72c:	0003c2ec 	.word	0x0003c2ec
   2a730:	0003c2cc 	.word	0x0003c2cc
   2a734:	0003fb80 	.word	0x0003fb80
   2a738:	20023848 	.word	0x20023848
   2a73c:	0002a74d 	.word	0x0002a74d

0002a740 <k_mutex_unlock.constprop.0>:
   2a740:	4801      	ldr	r0, [pc, #4]	; (2a748 <k_mutex_unlock.constprop.0+0x8>)
   2a742:	f00b b9b1 	b.w	35aa8 <z_impl_k_mutex_unlock>
   2a746:	bf00      	nop
   2a748:	200207c4 	.word	0x200207c4

0002a74c <notif_dispatch>:
{
   2a74c:	b538      	push	{r3, r4, r5, lr}
   2a74e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2a750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a758:	480d      	ldr	r0, [pc, #52]	; (2a790 <notif_dispatch+0x44>)
   2a75a:	f00b f92d 	bl	359b8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2a75e:	4b0d      	ldr	r3, [pc, #52]	; (2a794 <notif_dispatch+0x48>)
   2a760:	681b      	ldr	r3, [r3, #0]
   2a762:	b91b      	cbnz	r3, 2a76c <notif_dispatch+0x20>
}
   2a764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   2a768:	f7ff bfea 	b.w	2a740 <k_mutex_unlock.constprop.0>
	return node->next;
   2a76c:	681c      	ldr	r4, [r3, #0]
   2a76e:	2c00      	cmp	r4, #0
   2a770:	bf38      	it	cc
   2a772:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   2a774:	4629      	mov	r1, r5
   2a776:	689a      	ldr	r2, [r3, #8]
   2a778:	6858      	ldr	r0, [r3, #4]
   2a77a:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2a77c:	2c00      	cmp	r4, #0
   2a77e:	d0f1      	beq.n	2a764 <notif_dispatch+0x18>
   2a780:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a782:	4623      	mov	r3, r4
   2a784:	2a00      	cmp	r2, #0
   2a786:	bf38      	it	cc
   2a788:	2200      	movcc	r2, #0
   2a78a:	4614      	mov	r4, r2
   2a78c:	e7f2      	b.n	2a774 <notif_dispatch+0x28>
   2a78e:	bf00      	nop
   2a790:	200207c4 	.word	0x200207c4
   2a794:	20023848 	.word	0x20023848

0002a798 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   2a798:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a79a:	4606      	mov	r6, r0
	if (handler == NULL) {
   2a79c:	460d      	mov	r5, r1
   2a79e:	b979      	cbnz	r1, 2a7c0 <at_notif_register_handler+0x28>
   2a7a0:	4a1d      	ldr	r2, [pc, #116]	; (2a818 <at_notif_register_handler+0x80>)
   2a7a2:	4b1e      	ldr	r3, [pc, #120]	; (2a81c <at_notif_register_handler+0x84>)
   2a7a4:	1a9b      	subs	r3, r3, r2
   2a7a6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   2a7a8:	019b      	lsls	r3, r3, #6
   2a7aa:	460a      	mov	r2, r1
   2a7ac:	f043 0301 	orr.w	r3, r3, #1
   2a7b0:	4601      	mov	r1, r0
   2a7b2:	481b      	ldr	r0, [pc, #108]	; (2a820 <at_notif_register_handler+0x88>)
   2a7b4:	f00d feaa 	bl	3850c <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   2a7b8:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   2a7bc:	b002      	add	sp, #8
   2a7be:	bd70      	pop	{r4, r5, r6, pc}
   2a7c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a7c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a7c8:	4816      	ldr	r0, [pc, #88]	; (2a824 <at_notif_register_handler+0x8c>)
   2a7ca:	f00b f8f5 	bl	359b8 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   2a7ce:	462a      	mov	r2, r5
   2a7d0:	4631      	mov	r1, r6
   2a7d2:	a801      	add	r0, sp, #4
   2a7d4:	f7ff ff6c 	bl	2a6b0 <find_node>
   2a7d8:	4604      	mov	r4, r0
   2a7da:	b118      	cbz	r0, 2a7e4 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   2a7dc:	f7ff ffb0 	bl	2a740 <k_mutex_unlock.constprop.0>
		return 0;
   2a7e0:	2000      	movs	r0, #0
   2a7e2:	e7eb      	b.n	2a7bc <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   2a7e4:	200c      	movs	r0, #12
   2a7e6:	f00c f9a3 	bl	36b30 <k_malloc>
   2a7ea:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   2a7ec:	b920      	cbnz	r0, 2a7f8 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   2a7ee:	f7ff ffa7 	bl	2a740 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   2a7f2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a7f6:	e7e1      	b.n	2a7bc <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   2a7f8:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   2a7fa:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   2a7fc:	4a0a      	ldr	r2, [pc, #40]	; (2a828 <at_notif_register_handler+0x90>)
   2a7fe:	6044      	str	r4, [r0, #4]
   2a800:	6084      	str	r4, [r0, #8]
	parent->next = child;
   2a802:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   2a804:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   2a806:	e9c3 6501 	strd	r6, r5, [r3, #4]
   2a80a:	b911      	cbnz	r1, 2a812 <at_notif_register_handler+0x7a>
	list->head = node;
   2a80c:	e9c2 3300 	strd	r3, r3, [r2]
}
   2a810:	e7e4      	b.n	2a7dc <at_notif_register_handler+0x44>
	parent->next = child;
   2a812:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2a814:	6053      	str	r3, [r2, #4]
}
   2a816:	e7e1      	b.n	2a7dc <at_notif_register_handler+0x44>
   2a818:	0003c2cc 	.word	0x0003c2cc
   2a81c:	0003c2ec 	.word	0x0003c2ec
   2a820:	0003fba3 	.word	0x0003fba3
   2a824:	200207c4 	.word	0x200207c4
   2a828:	20023848 	.word	0x20023848

0002a82c <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   2a82c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a82e:	4605      	mov	r5, r0
	if (handler == NULL) {
   2a830:	460c      	mov	r4, r1
   2a832:	b979      	cbnz	r1, 2a854 <at_notif_deregister_handler+0x28>
   2a834:	4a20      	ldr	r2, [pc, #128]	; (2a8b8 <at_notif_deregister_handler+0x8c>)
   2a836:	4b21      	ldr	r3, [pc, #132]	; (2a8bc <at_notif_deregister_handler+0x90>)
   2a838:	1a9b      	subs	r3, r3, r2
   2a83a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   2a83c:	019b      	lsls	r3, r3, #6
   2a83e:	460a      	mov	r2, r1
   2a840:	f043 0301 	orr.w	r3, r3, #1
   2a844:	4601      	mov	r1, r0
   2a846:	481e      	ldr	r0, [pc, #120]	; (2a8c0 <at_notif_deregister_handler+0x94>)
   2a848:	f00d fe60 	bl	3850c <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   2a84c:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   2a850:	b003      	add	sp, #12
   2a852:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   2a854:	2300      	movs	r3, #0
   2a856:	9301      	str	r3, [sp, #4]
   2a858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a85c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a860:	4818      	ldr	r0, [pc, #96]	; (2a8c4 <at_notif_deregister_handler+0x98>)
   2a862:	f00b f8a9 	bl	359b8 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   2a866:	4622      	mov	r2, r4
   2a868:	4629      	mov	r1, r5
   2a86a:	a801      	add	r0, sp, #4
   2a86c:	f7ff ff20 	bl	2a6b0 <find_node>
	if (curr == NULL) {
   2a870:	b968      	cbnz	r0, 2a88e <at_notif_deregister_handler+0x62>
   2a872:	4912      	ldr	r1, [pc, #72]	; (2a8bc <at_notif_deregister_handler+0x90>)
   2a874:	4b10      	ldr	r3, [pc, #64]	; (2a8b8 <at_notif_deregister_handler+0x8c>)
		LOG_WRN("Handler not registered. Nothing to do");
   2a876:	4814      	ldr	r0, [pc, #80]	; (2a8c8 <at_notif_deregister_handler+0x9c>)
   2a878:	1ac9      	subs	r1, r1, r3
   2a87a:	08c9      	lsrs	r1, r1, #3
   2a87c:	0189      	lsls	r1, r1, #6
   2a87e:	f041 0102 	orr.w	r1, r1, #2
   2a882:	f00d fe1d 	bl	384c0 <log_0>
	k_mutex_unlock(&list_mtx);
   2a886:	f7ff ff5b 	bl	2a740 <k_mutex_unlock.constprop.0>
	return remove_notif_handler(context, handler);
   2a88a:	2000      	movs	r0, #0
   2a88c:	e7e0      	b.n	2a850 <at_notif_deregister_handler+0x24>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   2a88e:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a890:	6801      	ldr	r1, [r0, #0]
   2a892:	4b0e      	ldr	r3, [pc, #56]	; (2a8cc <at_notif_deregister_handler+0xa0>)
   2a894:	b94a      	cbnz	r2, 2a8aa <at_notif_deregister_handler+0x7e>
   2a896:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2a898:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a89a:	4290      	cmp	r0, r2
   2a89c:	d100      	bne.n	2a8a0 <at_notif_deregister_handler+0x74>
	list->tail = node;
   2a89e:	6059      	str	r1, [r3, #4]
	parent->next = child;
   2a8a0:	2300      	movs	r3, #0
   2a8a2:	6003      	str	r3, [r0, #0]
	k_free(curr);
   2a8a4:	f010 fd48 	bl	3b338 <k_free>
   2a8a8:	e7ed      	b.n	2a886 <at_notif_deregister_handler+0x5a>
   2a8aa:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a8ac:	6859      	ldr	r1, [r3, #4]
   2a8ae:	4288      	cmp	r0, r1
	list->tail = node;
   2a8b0:	bf08      	it	eq
   2a8b2:	605a      	streq	r2, [r3, #4]
}
   2a8b4:	e7f4      	b.n	2a8a0 <at_notif_deregister_handler+0x74>
   2a8b6:	bf00      	nop
   2a8b8:	0003c2cc 	.word	0x0003c2cc
   2a8bc:	0003c2ec 	.word	0x0003c2ec
   2a8c0:	0003fba3 	.word	0x0003fba3
   2a8c4:	200207c4 	.word	0x200207c4
   2a8c8:	0003fbd4 	.word	0x0003fbd4
   2a8cc:	20023848 	.word	0x20023848

0002a8d0 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   2a8d0:	4b06      	ldr	r3, [pc, #24]	; (2a8ec <is_valid_notification_char+0x1c>)
   2a8d2:	5cc3      	ldrb	r3, [r0, r3]
   2a8d4:	f003 0303 	and.w	r3, r3, #3
   2a8d8:	2b02      	cmp	r3, #2
   2a8da:	bf08      	it	eq
   2a8dc:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   2a8de:	3841      	subs	r0, #65	; 0x41
   2a8e0:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   2a8e2:	2819      	cmp	r0, #25
   2a8e4:	bf8c      	ite	hi
   2a8e6:	2000      	movhi	r0, #0
   2a8e8:	2001      	movls	r0, #1
   2a8ea:	4770      	bx	lr
   2a8ec:	000409c7 	.word	0x000409c7

0002a8f0 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   2a8f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   2a8f4:	6805      	ldr	r5, [r0, #0]
{
   2a8f6:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   2a8f8:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2a8fa:	782b      	ldrb	r3, [r5, #0]
{
   2a8fc:	4680      	mov	r8, r0
   2a8fe:	460f      	mov	r7, r1
   2a900:	4616      	mov	r6, r2
   2a902:	2b00      	cmp	r3, #0
   2a904:	f000 80c8 	beq.w	2aa98 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   2a908:	4b65      	ldr	r3, [pc, #404]	; (2aaa0 <at_parse_process_element+0x1b0>)
   2a90a:	781c      	ldrb	r4, [r3, #0]
   2a90c:	2c06      	cmp	r4, #6
   2a90e:	d110      	bne.n	2a932 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   2a910:	1c6b      	adds	r3, r5, #1
   2a912:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   2a914:	9a00      	ldr	r2, [sp, #0]
   2a916:	7810      	ldrb	r0, [r2, #0]
   2a918:	f7ff ffda 	bl	2a8d0 <is_valid_notification_char>
   2a91c:	b930      	cbnz	r0, 2a92c <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2a91e:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2a920:	462a      	mov	r2, r5
   2a922:	4639      	mov	r1, r7
   2a924:	4630      	mov	r0, r6
   2a926:	f00f ff08 	bl	3a73a <at_params_string_put>
   2a92a:	e01b      	b.n	2a964 <at_parse_process_element+0x74>
			tmpstr++;
   2a92c:	3201      	adds	r2, #1
   2a92e:	9200      	str	r2, [sp, #0]
   2a930:	e7f0      	b.n	2a914 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   2a932:	2c07      	cmp	r4, #7
   2a934:	d124      	bne.n	2a980 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   2a936:	4668      	mov	r0, sp
   2a938:	f00f fe37 	bl	3a5aa <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   2a93c:	9a00      	ldr	r2, [sp, #0]
   2a93e:	7810      	ldrb	r0, [r2, #0]
   2a940:	f7ff ffc6 	bl	2a8d0 <is_valid_notification_char>
   2a944:	b9a8      	cbnz	r0, 2a972 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   2a946:	1b53      	subs	r3, r2, r5
   2a948:	4639      	mov	r1, r7
   2a94a:	462a      	mov	r2, r5
   2a94c:	4630      	mov	r0, r6
   2a94e:	f00f fef4 	bl	3a73a <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   2a952:	9b00      	ldr	r3, [sp, #0]
   2a954:	781a      	ldrb	r2, [r3, #0]
   2a956:	2a3d      	cmp	r2, #61	; 0x3d
   2a958:	d10e      	bne.n	2a978 <at_parse_process_element+0x88>
   2a95a:	785a      	ldrb	r2, [r3, #1]
   2a95c:	2a3f      	cmp	r2, #63	; 0x3f
   2a95e:	d101      	bne.n	2a964 <at_parse_process_element+0x74>
			tmpstr += 2;
   2a960:	3302      	adds	r3, #2
			tmpstr++;
   2a962:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   2a964:	2000      	movs	r0, #0
	*str = tmpstr;
   2a966:	9b00      	ldr	r3, [sp, #0]
   2a968:	f8c8 3000 	str.w	r3, [r8]
}
   2a96c:	b023      	add	sp, #140	; 0x8c
   2a96e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   2a972:	3201      	adds	r2, #1
   2a974:	9200      	str	r2, [sp, #0]
   2a976:	e7e1      	b.n	2a93c <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   2a978:	2a3f      	cmp	r2, #63	; 0x3f
   2a97a:	d1f3      	bne.n	2a964 <at_parse_process_element+0x74>
			tmpstr++;
   2a97c:	3301      	adds	r3, #1
   2a97e:	e7f0      	b.n	2a962 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   2a980:	2c08      	cmp	r4, #8
   2a982:	d103      	bne.n	2a98c <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   2a984:	4610      	mov	r0, r2
   2a986:	f00f feb3 	bl	3a6f0 <at_params_empty_put>
   2a98a:	e7eb      	b.n	2a964 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   2a98c:	2c02      	cmp	r4, #2
   2a98e:	d111      	bne.n	2a9b4 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   2a990:	9a00      	ldr	r2, [sp, #0]
   2a992:	7811      	ldrb	r1, [r2, #0]
   2a994:	4608      	mov	r0, r1
   2a996:	f00f fdff 	bl	3a598 <is_lfcr>
   2a99a:	b918      	cbnz	r0, 2a9a4 <at_parse_process_element+0xb4>
   2a99c:	b111      	cbz	r1, 2a9a4 <at_parse_process_element+0xb4>
			tmpstr++;
   2a99e:	3201      	adds	r2, #1
   2a9a0:	9200      	str	r2, [sp, #0]
   2a9a2:	e7f5      	b.n	2a990 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   2a9a4:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   2a9a6:	462a      	mov	r2, r5
   2a9a8:	4639      	mov	r1, r7
   2a9aa:	4630      	mov	r0, r6
   2a9ac:	f00f fec5 	bl	3a73a <at_params_string_put>
		tmpstr++;
   2a9b0:	9b00      	ldr	r3, [sp, #0]
   2a9b2:	e7e3      	b.n	2a97c <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   2a9b4:	2c03      	cmp	r4, #3
   2a9b6:	d109      	bne.n	2a9cc <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   2a9b8:	9b00      	ldr	r3, [sp, #0]
   2a9ba:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   2a9bc:	2a22      	cmp	r2, #34	; 0x22
   2a9be:	d003      	beq.n	2a9c8 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2a9c0:	b112      	cbz	r2, 2a9c8 <at_parse_process_element+0xd8>
			tmpstr++;
   2a9c2:	3301      	adds	r3, #1
   2a9c4:	9300      	str	r3, [sp, #0]
   2a9c6:	e7f7      	b.n	2a9b8 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   2a9c8:	1b5b      	subs	r3, r3, r5
   2a9ca:	e7ec      	b.n	2a9a6 <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   2a9cc:	2c01      	cmp	r4, #1
   2a9ce:	d13c      	bne.n	2aa4a <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2a9d0:	4628      	mov	r0, r5
   2a9d2:	220a      	movs	r2, #10
   2a9d4:	a901      	add	r1, sp, #4
   2a9d6:	f00c fd99 	bl	3750c <strtoul>
		tmpstr = next;
   2a9da:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2a9dc:	4d31      	ldr	r5, [pc, #196]	; (2aaa4 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2a9de:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   2a9e0:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   2a9e2:	9800      	ldr	r0, [sp, #0]
   2a9e4:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   2a9e6:	2b29      	cmp	r3, #41	; 0x29
   2a9e8:	d028      	beq.n	2aa3c <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2a9ea:	b33b      	cbz	r3, 2aa3c <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2a9ec:	3b2c      	subs	r3, #44	; 0x2c
   2a9ee:	b2db      	uxtb	r3, r3
   2a9f0:	3001      	adds	r0, #1
   2a9f2:	2b11      	cmp	r3, #17
				tmparray[i++] =
   2a9f4:	9000      	str	r0, [sp, #0]
   2a9f6:	d803      	bhi.n	2aa00 <at_parse_process_element+0x110>
   2a9f8:	fa25 f303 	lsr.w	r3, r5, r3
   2a9fc:	07db      	lsls	r3, r3, #31
   2a9fe:	d408      	bmi.n	2aa12 <at_parse_process_element+0x122>
				tmpstr++;
   2aa00:	46a1      	mov	r9, r4
   2aa02:	e004      	b.n	2aa0e <at_parse_process_element+0x11e>
					tmpstr = next;
   2aa04:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2aa06:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   2aa0a:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2aa0c:	d015      	beq.n	2aa3a <at_parse_process_element+0x14a>
				tmpstr++;
   2aa0e:	464c      	mov	r4, r9
   2aa10:	e7e7      	b.n	2a9e2 <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2aa12:	220a      	movs	r2, #10
   2aa14:	a901      	add	r1, sp, #4
   2aa16:	f00c fd79 	bl	3750c <strtoul>
				tmparray[i++] =
   2aa1a:	ab22      	add	r3, sp, #136	; 0x88
   2aa1c:	f104 0901 	add.w	r9, r4, #1
   2aa20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2aa24:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   2aa28:	9800      	ldr	r0, [sp, #0]
   2aa2a:	f7f2 fb21 	bl	1d070 <strlen>
   2aa2e:	4604      	mov	r4, r0
   2aa30:	9801      	ldr	r0, [sp, #4]
   2aa32:	f7f2 fb1d 	bl	1d070 <strlen>
   2aa36:	4284      	cmp	r4, r0
   2aa38:	d1e4      	bne.n	2aa04 <at_parse_process_element+0x114>
   2aa3a:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   2aa3c:	4639      	mov	r1, r7
   2aa3e:	4630      	mov	r0, r6
   2aa40:	00a3      	lsls	r3, r4, #2
   2aa42:	aa02      	add	r2, sp, #8
   2aa44:	f00f fe9c 	bl	3a780 <at_params_array_put>
   2aa48:	e7b2      	b.n	2a9b0 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   2aa4a:	2c04      	cmp	r4, #4
   2aa4c:	d115      	bne.n	2aa7a <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   2aa4e:	220a      	movs	r2, #10
   2aa50:	4628      	mov	r0, r5
   2aa52:	a902      	add	r1, sp, #8
   2aa54:	f00c fd5a 	bl	3750c <strtoul>
		tmpstr = next;
   2aa58:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   2aa5a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   2aa5e:	4602      	mov	r2, r0
		tmpstr = next;
   2aa60:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   2aa62:	da05      	bge.n	2aa70 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   2aa64:	b282      	uxth	r2, r0
   2aa66:	4639      	mov	r1, r7
   2aa68:	4630      	mov	r0, r6
   2aa6a:	f00f fe2e 	bl	3a6ca <at_params_short_put>
   2aa6e:	e779      	b.n	2a964 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   2aa70:	4639      	mov	r1, r7
   2aa72:	4630      	mov	r0, r6
   2aa74:	f00f fe4e 	bl	3a714 <at_params_int_put>
   2aa78:	e774      	b.n	2a964 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   2aa7a:	2c05      	cmp	r4, #5
   2aa7c:	f47f af72 	bne.w	2a964 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   2aa80:	4909      	ldr	r1, [pc, #36]	; (2aaa8 <at_parse_process_element+0x1b8>)
   2aa82:	9b00      	ldr	r3, [sp, #0]
   2aa84:	781a      	ldrb	r2, [r3, #0]
   2aa86:	5c52      	ldrb	r2, [r2, r1]
   2aa88:	f012 0f44 	tst.w	r2, #68	; 0x44
   2aa8c:	d101      	bne.n	2aa92 <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   2aa8e:	1b5b      	subs	r3, r3, r5
   2aa90:	e746      	b.n	2a920 <at_parse_process_element+0x30>
			tmpstr++;
   2aa92:	3301      	adds	r3, #1
   2aa94:	9300      	str	r3, [sp, #0]
   2aa96:	e7f4      	b.n	2aa82 <at_parse_process_element+0x192>
		return -1;
   2aa98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2aa9c:	e766      	b.n	2a96c <at_parse_process_element+0x7c>
   2aa9e:	bf00      	nop
   2aaa0:	2002cb91 	.word	0x2002cb91
   2aaa4:	00024001 	.word	0x00024001
   2aaa8:	000409c7 	.word	0x000409c7

0002aaac <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   2aaac:	b510      	push	{r4, lr}
   2aaae:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   2aab0:	f7f2 fade 	bl	1d070 <strlen>
   2aab4:	2801      	cmp	r0, #1
   2aab6:	d922      	bls.n	2aafe <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   2aab8:	7821      	ldrb	r1, [r4, #0]
   2aaba:	4b13      	ldr	r3, [pc, #76]	; (2ab08 <is_command+0x5c>)
   2aabc:	5cca      	ldrb	r2, [r1, r3]
   2aabe:	f002 0203 	and.w	r2, r2, #3
   2aac2:	2a02      	cmp	r2, #2
   2aac4:	bf08      	it	eq
   2aac6:	3920      	subeq	r1, #32
   2aac8:	2941      	cmp	r1, #65	; 0x41
   2aaca:	461a      	mov	r2, r3
   2aacc:	d117      	bne.n	2aafe <is_command+0x52>
   2aace:	7863      	ldrb	r3, [r4, #1]
   2aad0:	5cd2      	ldrb	r2, [r2, r3]
   2aad2:	f002 0203 	and.w	r2, r2, #3
   2aad6:	2a02      	cmp	r2, #2
   2aad8:	bf08      	it	eq
   2aada:	3b20      	subeq	r3, #32
   2aadc:	2b54      	cmp	r3, #84	; 0x54
   2aade:	d10e      	bne.n	2aafe <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2aae0:	78a2      	ldrb	r2, [r4, #2]
   2aae2:	2a25      	cmp	r2, #37	; 0x25
   2aae4:	d00d      	beq.n	2ab02 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   2aae6:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2aaea:	2b23      	cmp	r3, #35	; 0x23
   2aaec:	d009      	beq.n	2ab02 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   2aaee:	4610      	mov	r0, r2
   2aaf0:	f00f fd52 	bl	3a598 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   2aaf4:	b910      	cbnz	r0, 2aafc <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2aaf6:	fab2 f082 	clz	r0, r2
   2aafa:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2aafc:	bd10      	pop	{r4, pc}
		return false;
   2aafe:	2000      	movs	r0, #0
   2ab00:	e7fc      	b.n	2aafc <is_command+0x50>
		return true;
   2ab02:	2001      	movs	r0, #1
   2ab04:	e7fa      	b.n	2aafc <is_command+0x50>
   2ab06:	bf00      	nop
   2ab08:	000409c7 	.word	0x000409c7

0002ab0c <at_parse_detect_type>:
{
   2ab0c:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   2ab0e:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2ab10:	2900      	cmp	r1, #0
{
   2ab12:	4605      	mov	r5, r0
   2ab14:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2ab16:	d141      	bne.n	2ab9c <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2ab18:	2a2b      	cmp	r2, #43	; 0x2b
   2ab1a:	4e29      	ldr	r6, [pc, #164]	; (2abc0 <at_parse_detect_type+0xb4>)
   2ab1c:	d001      	beq.n	2ab22 <at_parse_detect_type+0x16>
   2ab1e:	2a25      	cmp	r2, #37	; 0x25
   2ab20:	d104      	bne.n	2ab2c <at_parse_detect_type+0x20>
	state = new_state;
   2ab22:	2306      	movs	r3, #6
   2ab24:	7033      	strb	r3, [r6, #0]
	return 0;
   2ab26:	2000      	movs	r0, #0
	*str = tmpstr;
   2ab28:	602c      	str	r4, [r5, #0]
}
   2ab2a:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   2ab2c:	4620      	mov	r0, r4
   2ab2e:	f7ff ffbd 	bl	2aaac <is_command>
   2ab32:	b388      	cbz	r0, 2ab98 <at_parse_detect_type+0x8c>
	state = new_state;
   2ab34:	2307      	movs	r3, #7
   2ab36:	e7f5      	b.n	2ab24 <at_parse_detect_type+0x18>
	if (chr == '"') {
   2ab38:	2a22      	cmp	r2, #34	; 0x22
   2ab3a:	d006      	beq.n	2ab4a <at_parse_detect_type+0x3e>
	if (chr == '(') {
   2ab3c:	2a28      	cmp	r2, #40	; 0x28
   2ab3e:	d109      	bne.n	2ab54 <at_parse_detect_type+0x48>
   2ab40:	2201      	movs	r2, #1
   2ab42:	4b1f      	ldr	r3, [pc, #124]	; (2abc0 <at_parse_detect_type+0xb4>)
		tmpstr++;
   2ab44:	4414      	add	r4, r2
	state = new_state;
   2ab46:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2ab48:	e7ed      	b.n	2ab26 <at_parse_detect_type+0x1a>
	state = new_state;
   2ab4a:	2203      	movs	r2, #3
   2ab4c:	4b1c      	ldr	r3, [pc, #112]	; (2abc0 <at_parse_detect_type+0xb4>)
		tmpstr++;
   2ab4e:	3401      	adds	r4, #1
	state = new_state;
   2ab50:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2ab52:	e7e8      	b.n	2ab26 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   2ab54:	4610      	mov	r0, r2
   2ab56:	f00f fd1f 	bl	3a598 <is_lfcr>
   2ab5a:	b170      	cbz	r0, 2ab7a <at_parse_detect_type+0x6e>
   2ab5c:	4918      	ldr	r1, [pc, #96]	; (2abc0 <at_parse_detect_type+0xb4>)
   2ab5e:	7808      	ldrb	r0, [r1, #0]
   2ab60:	2804      	cmp	r0, #4
   2ab62:	d108      	bne.n	2ab76 <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   2ab64:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2ab68:	f00f fd16 	bl	3a598 <is_lfcr>
   2ab6c:	2800      	cmp	r0, #0
   2ab6e:	d1f9      	bne.n	2ab64 <at_parse_detect_type+0x58>
	state = new_state;
   2ab70:	2305      	movs	r3, #5
   2ab72:	700b      	strb	r3, [r1, #0]
}
   2ab74:	e7d7      	b.n	2ab26 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   2ab76:	2808      	cmp	r0, #8
   2ab78:	d0d5      	beq.n	2ab26 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2ab7a:	3a2c      	subs	r2, #44	; 0x2c
   2ab7c:	b2d2      	uxtb	r2, r2
   2ab7e:	2a11      	cmp	r2, #17
   2ab80:	d807      	bhi.n	2ab92 <at_parse_detect_type+0x86>
   2ab82:	4b10      	ldr	r3, [pc, #64]	; (2abc4 <at_parse_detect_type+0xb8>)
   2ab84:	fa23 f202 	lsr.w	r2, r3, r2
   2ab88:	07d3      	lsls	r3, r2, #31
   2ab8a:	d502      	bpl.n	2ab92 <at_parse_detect_type+0x86>
	state = new_state;
   2ab8c:	2208      	movs	r2, #8
   2ab8e:	4b0c      	ldr	r3, [pc, #48]	; (2abc0 <at_parse_detect_type+0xb4>)
   2ab90:	e013      	b.n	2abba <at_parse_detect_type+0xae>
		return -1;
   2ab92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ab96:	e7c8      	b.n	2ab2a <at_parse_detect_type+0x1e>
	state = new_state;
   2ab98:	2302      	movs	r3, #2
   2ab9a:	e7c3      	b.n	2ab24 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   2ab9c:	dd03      	ble.n	2aba6 <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2ab9e:	2a2b      	cmp	r2, #43	; 0x2b
   2aba0:	d0f7      	beq.n	2ab92 <at_parse_detect_type+0x86>
   2aba2:	2a25      	cmp	r2, #37	; 0x25
   2aba4:	d0f5      	beq.n	2ab92 <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   2aba6:	4b08      	ldr	r3, [pc, #32]	; (2abc8 <at_parse_detect_type+0xbc>)
   2aba8:	5cd3      	ldrb	r3, [r2, r3]
   2abaa:	0759      	lsls	r1, r3, #29
   2abac:	d403      	bmi.n	2abb6 <at_parse_detect_type+0xaa>
   2abae:	2a2d      	cmp	r2, #45	; 0x2d
   2abb0:	d001      	beq.n	2abb6 <at_parse_detect_type+0xaa>
   2abb2:	2a2b      	cmp	r2, #43	; 0x2b
   2abb4:	d1c0      	bne.n	2ab38 <at_parse_detect_type+0x2c>
	state = new_state;
   2abb6:	2204      	movs	r2, #4
   2abb8:	4b01      	ldr	r3, [pc, #4]	; (2abc0 <at_parse_detect_type+0xb4>)
   2abba:	701a      	strb	r2, [r3, #0]
}
   2abbc:	e7b3      	b.n	2ab26 <at_parse_detect_type+0x1a>
   2abbe:	bf00      	nop
   2abc0:	2002cb91 	.word	0x2002cb91
   2abc4:	00024001 	.word	0x00024001
   2abc8:	000409c7 	.word	0x000409c7

0002abcc <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   2abcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2abd0:	4688      	mov	r8, r1
   2abd2:	4616      	mov	r6, r2
   2abd4:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   2abd6:	4604      	mov	r4, r0
   2abd8:	2800      	cmp	r0, #0
   2abda:	d07e      	beq.n	2acda <at_parser_max_params_from_str+0x10e>
   2abdc:	2a00      	cmp	r2, #0
   2abde:	d07c      	beq.n	2acda <at_parser_max_params_from_str+0x10e>
   2abe0:	6853      	ldr	r3, [r2, #4]
   2abe2:	2b00      	cmp	r3, #0
   2abe4:	d079      	beq.n	2acda <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   2abe6:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   2abe8:	4610      	mov	r0, r2
   2abea:	f00f fd50 	bl	3a68e <at_params_list_clear>
	const char *str = *at_params_str;
   2abee:	9401      	str	r4, [sp, #4]
	int index = 0;
   2abf0:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   2abf2:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   2abf4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 2ace4 <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   2abf8:	429f      	cmp	r7, r3
   2abfa:	bf28      	it	cs
   2abfc:	461f      	movcs	r7, r3
	state = IDLE;
   2abfe:	4b38      	ldr	r3, [pc, #224]	; (2ace0 <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2ac00:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2ace8 <at_parser_max_params_from_str+0x11c>
   2ac04:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   2ac06:	9b01      	ldr	r3, [sp, #4]
   2ac08:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2ac0a:	2a00      	cmp	r2, #0
   2ac0c:	d04b      	beq.n	2aca6 <at_parser_max_params_from_str+0xda>
   2ac0e:	42a7      	cmp	r7, r4
   2ac10:	d949      	bls.n	2aca6 <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   2ac12:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   2ac16:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   2ac18:	0711      	lsls	r1, r2, #28
			str++;
   2ac1a:	bf48      	it	mi
   2ac1c:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   2ac1e:	4621      	mov	r1, r4
			str++;
   2ac20:	bf48      	it	mi
   2ac22:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   2ac24:	f7ff ff72 	bl	2ab0c <at_parse_detect_type>
   2ac28:	1c42      	adds	r2, r0, #1
   2ac2a:	d03c      	beq.n	2aca6 <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   2ac2c:	4632      	mov	r2, r6
   2ac2e:	4621      	mov	r1, r4
   2ac30:	a801      	add	r0, sp, #4
   2ac32:	f7ff fe5d 	bl	2a8f0 <at_parse_process_element>
   2ac36:	1c43      	adds	r3, r0, #1
   2ac38:	d035      	beq.n	2aca6 <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   2ac3a:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2ac3c:	781a      	ldrb	r2, [r3, #0]
   2ac3e:	3a2c      	subs	r2, #44	; 0x2c
   2ac40:	b2d2      	uxtb	r2, r2
   2ac42:	2a11      	cmp	r2, #17
   2ac44:	d81a      	bhi.n	2ac7c <at_parser_max_params_from_str+0xb0>
   2ac46:	fa2a f202 	lsr.w	r2, sl, r2
   2ac4a:	07d1      	lsls	r1, r2, #31
   2ac4c:	d516      	bpl.n	2ac7c <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   2ac4e:	7858      	ldrb	r0, [r3, #1]
   2ac50:	f00f fca2 	bl	3a598 <is_lfcr>
   2ac54:	b178      	cbz	r0, 2ac76 <at_parser_max_params_from_str+0xaa>
				index++;
   2ac56:	3401      	adds	r4, #1
				if (index == max_params) {
   2ac58:	42bc      	cmp	r4, r7
   2ac5a:	d039      	beq.n	2acd0 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   2ac5c:	4621      	mov	r1, r4
   2ac5e:	a801      	add	r0, sp, #4
   2ac60:	f7ff ff54 	bl	2ab0c <at_parse_detect_type>
   2ac64:	1c42      	adds	r2, r0, #1
   2ac66:	d01e      	beq.n	2aca6 <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   2ac68:	4632      	mov	r2, r6
   2ac6a:	4621      	mov	r1, r4
   2ac6c:	a801      	add	r0, sp, #4
   2ac6e:	f7ff fe3f 	bl	2a8f0 <at_parse_process_element>
   2ac72:	1c43      	adds	r3, r0, #1
   2ac74:	d017      	beq.n	2aca6 <at_parser_max_params_from_str+0xda>
			str++;
   2ac76:	9b01      	ldr	r3, [sp, #4]
   2ac78:	3301      	adds	r3, #1
   2ac7a:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   2ac7c:	9a01      	ldr	r2, [sp, #4]
   2ac7e:	7810      	ldrb	r0, [r2, #0]
   2ac80:	f00f fc8a 	bl	3a598 <is_lfcr>
   2ac84:	b1f8      	cbz	r0, 2acc6 <at_parser_max_params_from_str+0xfa>
   2ac86:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   2ac88:	7811      	ldrb	r1, [r2, #0]
   2ac8a:	4693      	mov	fp, r2
   2ac8c:	4608      	mov	r0, r1
   2ac8e:	3201      	adds	r2, #1
   2ac90:	f00f fc82 	bl	3a598 <is_lfcr>
   2ac94:	2800      	cmp	r0, #0
   2ac96:	d1f7      	bne.n	2ac88 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2ac98:	b119      	cbz	r1, 2aca2 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2ac9a:	292b      	cmp	r1, #43	; 0x2b
   2ac9c:	d001      	beq.n	2aca2 <at_parser_max_params_from_str+0xd6>
   2ac9e:	2925      	cmp	r1, #37	; 0x25
   2aca0:	d111      	bne.n	2acc6 <at_parser_max_params_from_str+0xfa>
				str += i;
   2aca2:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   2aca6:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   2aca8:	b9a5      	cbnz	r5, 2acd4 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2acaa:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   2acac:	2a00      	cmp	r2, #0
   2acae:	bf0c      	ite	eq
   2acb0:	2000      	moveq	r0, #0
   2acb2:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   2acb6:	f1b8 0f00 	cmp.w	r8, #0
   2acba:	d001      	beq.n	2acc0 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   2acbc:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   2acc0:	b003      	add	sp, #12
   2acc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   2acc6:	3401      	adds	r4, #1
			oversized = true;
   2acc8:	42bc      	cmp	r4, r7
   2acca:	bf08      	it	eq
   2accc:	2501      	moveq	r5, #1
   2acce:	e79a      	b.n	2ac06 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   2acd0:	4605      	mov	r5, r0
   2acd2:	e7e8      	b.n	2aca6 <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   2acd4:	f06f 0006 	mvn.w	r0, #6
   2acd8:	e7ed      	b.n	2acb6 <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   2acda:	f06f 0015 	mvn.w	r0, #21
   2acde:	e7ef      	b.n	2acc0 <at_parser_max_params_from_str+0xf4>
   2ace0:	2002cb91 	.word	0x2002cb91
   2ace4:	000409c7 	.word	0x000409c7
   2ace8:	00024001 	.word	0x00024001

0002acec <lte_lc_power_off>:

	return 0;
}

int lte_lc_power_off(void)
{
   2acec:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   2acee:	2300      	movs	r3, #0
   2acf0:	4804      	ldr	r0, [pc, #16]	; (2ad04 <lte_lc_power_off+0x18>)
   2acf2:	461a      	mov	r2, r3
   2acf4:	4619      	mov	r1, r3
   2acf6:	f7ff fc45 	bl	2a584 <at_cmd_write>
   2acfa:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   2acfc:	bf18      	it	ne
   2acfe:	f06f 0004 	mvnne.w	r0, #4
   2ad02:	bd08      	pop	{r3, pc}
   2ad04:	0003fc41 	.word	0x0003fc41

0002ad08 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   2ad08:	b510      	push	{r4, lr}
   2ad0a:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2ad0c:	4a09      	ldr	r2, [pc, #36]	; (2ad34 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   2ad0e:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2ad10:	7823      	ldrb	r3, [r4, #0]
   2ad12:	2100      	movs	r1, #0
   2ad14:	f7ff ff5a 	bl	2abcc <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   2ad18:	f110 0f0b 	cmn.w	r0, #11
   2ad1c:	d000      	beq.n	2ad20 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   2ad1e:	b940      	cbnz	r0, 2ad32 <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   2ad20:	4804      	ldr	r0, [pc, #16]	; (2ad34 <modem_info_parse.isra.0+0x2c>)
   2ad22:	f00f fd98 	bl	3a856 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   2ad26:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   2ad28:	4298      	cmp	r0, r3
   2ad2a:	bf94      	ite	ls
   2ad2c:	2000      	movls	r0, #0
   2ad2e:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   2ad32:	bd10      	pop	{r4, pc}
   2ad34:	20023850 	.word	0x20023850

0002ad38 <modem_info_type_get>:

enum at_param_type modem_info_type_get(enum modem_info info_type)
{
	if (info_type >= MODEM_INFO_COUNT) {
   2ad38:	2815      	cmp	r0, #21
		return -EINVAL;
	}

	return modem_data[info_type]->data_type;
   2ad3a:	bf9d      	ittte	ls
   2ad3c:	4b02      	ldrls	r3, [pc, #8]	; (2ad48 <modem_info_type_get+0x10>)
   2ad3e:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   2ad42:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   2ad44:	20ea      	movhi	r0, #234	; 0xea
}
   2ad46:	4770      	bx	lr
   2ad48:	0003ca34 	.word	0x0003ca34

0002ad4c <modem_info_short_get>:
}

int modem_info_short_get(enum modem_info info, uint16_t *buf)
{
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2ad4c:	2300      	movs	r3, #0
{
   2ad4e:	b530      	push	{r4, r5, lr}
   2ad50:	460d      	mov	r5, r1
   2ad52:	b0a1      	sub	sp, #132	; 0x84
   2ad54:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2ad56:	227c      	movs	r2, #124	; 0x7c
   2ad58:	4619      	mov	r1, r3
   2ad5a:	a801      	add	r0, sp, #4
   2ad5c:	9300      	str	r3, [sp, #0]
   2ad5e:	f010 fb48 	bl	3b3f2 <memset>
	int cmd_length = 0;

	if (buf == NULL) {
   2ad62:	b1e5      	cbz	r5, 2ad9e <modem_info_short_get+0x52>
		return -EINVAL;
	}

	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2ad64:	4a11      	ldr	r2, [pc, #68]	; (2adac <modem_info_short_get+0x60>)
   2ad66:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   2ad6a:	7aa2      	ldrb	r2, [r4, #10]
   2ad6c:	2a03      	cmp	r2, #3
   2ad6e:	d016      	beq.n	2ad9e <modem_info_short_get+0x52>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   2ad70:	2300      	movs	r3, #0
   2ad72:	2280      	movs	r2, #128	; 0x80
   2ad74:	4669      	mov	r1, sp
   2ad76:	6820      	ldr	r0, [r4, #0]
   2ad78:	f7ff fc04 	bl	2a584 <at_cmd_write>
			   recv_buf,
			   CONFIG_MODEM_INFO_BUFFER_SIZE,
			   NULL);

	if (err != 0) {
   2ad7c:	b990      	cbnz	r0, 2ada4 <modem_info_short_get+0x58>
		return -EIO;
	}

	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   2ad7e:	4669      	mov	r1, sp
   2ad80:	f104 0009 	add.w	r0, r4, #9
   2ad84:	f7ff ffc0 	bl	2ad08 <modem_info_parse.isra.0>

	if (err) {
   2ad88:	b938      	cbnz	r0, 2ad9a <modem_info_short_get+0x4e>
		return err;
	}

	err = at_params_short_get(&m_param_list,
   2ad8a:	462a      	mov	r2, r5
   2ad8c:	7a21      	ldrb	r1, [r4, #8]
   2ad8e:	4808      	ldr	r0, [pc, #32]	; (2adb0 <modem_info_short_get+0x64>)
   2ad90:	f00f fd19 	bl	3a7c6 <at_params_short_get>

	if (err) {
		return err;
	}

	return sizeof(uint16_t);
   2ad94:	2800      	cmp	r0, #0
   2ad96:	bf08      	it	eq
   2ad98:	2002      	moveq	r0, #2
}
   2ad9a:	b021      	add	sp, #132	; 0x84
   2ad9c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2ad9e:	f06f 0015 	mvn.w	r0, #21
   2ada2:	e7fa      	b.n	2ad9a <modem_info_short_get+0x4e>
		return -EIO;
   2ada4:	f06f 0004 	mvn.w	r0, #4
   2ada8:	e7f7      	b.n	2ad9a <modem_info_short_get+0x4e>
   2adaa:	bf00      	nop
   2adac:	0003ca34 	.word	0x0003ca34
   2adb0:	20023850 	.word	0x20023850

0002adb4 <modem_info_string_get>:

int modem_info_string_get(enum modem_info info, char *buf,
				  const size_t buf_size)
{
   2adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2adb8:	2500      	movs	r5, #0
{
   2adba:	460e      	mov	r6, r1
   2adbc:	b0a5      	sub	sp, #148	; 0x94
   2adbe:	4680      	mov	r8, r0
   2adc0:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2adc2:	4629      	mov	r1, r5
   2adc4:	227c      	movs	r2, #124	; 0x7c
   2adc6:	a805      	add	r0, sp, #20
   2adc8:	9504      	str	r5, [sp, #16]
   2adca:	f010 fb12 	bl	3b3f2 <memset>
	/* length of each parsed IP address line */
	size_t ip_str_len = 0;
	/* tracks length of buf when parsing multiple IP addresses */
	size_t out_buf_len = 0;
	/* return value indicating length of the string written to buf */
	size_t len = 0;
   2adce:	9503      	str	r5, [sp, #12]

	if ((buf == NULL) || (buf_size == 0)) {
   2add0:	2e00      	cmp	r6, #0
   2add2:	f000 80e5 	beq.w	2afa0 <modem_info_string_get+0x1ec>
   2add6:	f1b9 0f00 	cmp.w	r9, #0
   2adda:	f000 80e1 	beq.w	2afa0 <modem_info_string_get+0x1ec>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   2adde:	4b75      	ldr	r3, [pc, #468]	; (2afb4 <modem_info_string_get+0x200>)
   2ade0:	2280      	movs	r2, #128	; 0x80
   2ade2:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   2ade6:	a904      	add	r1, sp, #16
   2ade8:	462b      	mov	r3, r5
   2adea:	f8da 0000 	ldr.w	r0, [sl]
   2adee:	f7ff fbc9 	bl	2a584 <at_cmd_write>
			  NULL);

	/* modem_info does not yet support array objects, so here we handle
	 * the supported bands independently as a string
	 */
	if (info == MODEM_INFO_SUP_BAND) {
   2adf2:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   2adf6:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   2adf8:	d10c      	bne.n	2ae14 <modem_info_string_get+0x60>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2adfa:	f10d 0119 	add.w	r1, sp, #25
   2adfe:	4630      	mov	r0, r6
   2ae00:	f010 fc36 	bl	3b670 <strcpy>
		strcpy(buf, recv_buf + sizeof("%XCBAND: ") - 1);
		return strlen(buf);
   2ae04:	4630      	mov	r0, r6
   2ae06:	f7f2 f933 	bl	1d070 <strlen>
   2ae0a:	4601      	mov	r1, r0
			len = out_buf_len;
		}
	}

	return len <= 0 ? -ENOTSUP : len;
}
   2ae0c:	4608      	mov	r0, r1
   2ae0e:	b025      	add	sp, #148	; 0x94
   2ae10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   2ae14:	f1b8 0f09 	cmp.w	r8, #9
   2ae18:	d038      	beq.n	2ae8c <modem_info_string_get+0xd8>
	if (err != 0) {
   2ae1a:	2c00      	cmp	r4, #0
   2ae1c:	f040 80c3 	bne.w	2afa6 <modem_info_string_get+0x1f2>
	size_t ip_str_len = 0;
   2ae20:	4627      	mov	r7, r4
		err = at_params_string_get(&m_param_list,
   2ae22:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 2afd8 <modem_info_string_get+0x224>
	size_t cmd_rsp_idx = 0;
   2ae26:	9400      	str	r4, [sp, #0]
	if (info == MODEM_INFO_IP_ADDRESS) {
   2ae28:	9a00      	ldr	r2, [sp, #0]
   2ae2a:	ab04      	add	r3, sp, #16
   2ae2c:	f1b8 0f09 	cmp.w	r8, #9
   2ae30:	4413      	add	r3, r2
   2ae32:	d10f      	bne.n	2ae54 <modem_info_string_get+0xa0>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   2ae34:	4618      	mov	r0, r3
   2ae36:	4960      	ldr	r1, [pc, #384]	; (2afb8 <modem_info_string_get+0x204>)
   2ae38:	9301      	str	r3, [sp, #4]
   2ae3a:	f010 fc6d 	bl	3b718 <strstr>
		if (ip_str_end == NULL) {
   2ae3e:	2800      	cmp	r0, #0
   2ae40:	f000 80b4 	beq.w	2afac <modem_info_string_get+0x1f8>
		recv_buf[++ip_str_len] = 0;
   2ae44:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   2ae46:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   2ae48:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   2ae4a:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   2ae4c:	1c47      	adds	r7, r0, #1
   2ae4e:	443a      	add	r2, r7
   2ae50:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   2ae54:	4619      	mov	r1, r3
   2ae56:	f10a 0009 	add.w	r0, sl, #9
   2ae5a:	f7ff ff55 	bl	2ad08 <modem_info_parse.isra.0>
	if (err) {
   2ae5e:	4601      	mov	r1, r0
   2ae60:	b1b8      	cbz	r0, 2ae92 <modem_info_string_get+0xde>
   2ae62:	4a56      	ldr	r2, [pc, #344]	; (2afbc <modem_info_string_get+0x208>)
   2ae64:	4b56      	ldr	r3, [pc, #344]	; (2afc0 <modem_info_string_get+0x20c>)
		LOG_ERR("Unable to parse data: %d", err);
   2ae66:	9000      	str	r0, [sp, #0]
   2ae68:	1ad2      	subs	r2, r2, r3
   2ae6a:	08d2      	lsrs	r2, r2, #3
   2ae6c:	0192      	lsls	r2, r2, #6
   2ae6e:	4855      	ldr	r0, [pc, #340]	; (2afc4 <modem_info_string_get+0x210>)
   2ae70:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Unable to obtain short: %d", err);
   2ae74:	f00d fb33 	bl	384de <log_1>
			return err;
   2ae78:	9900      	ldr	r1, [sp, #0]
   2ae7a:	e7c7      	b.n	2ae0c <modem_info_string_get+0x58>
			++ip_str_end;
   2ae7c:	3001      	adds	r0, #1
			++ip_cnt;
   2ae7e:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   2ae80:	4639      	mov	r1, r7
   2ae82:	f010 fc49 	bl	3b718 <strstr>
   2ae86:	2800      	cmp	r0, #0
   2ae88:	d1f8      	bne.n	2ae7c <modem_info_string_get+0xc8>
   2ae8a:	e7c6      	b.n	2ae1a <modem_info_string_get+0x66>
   2ae8c:	4f4a      	ldr	r7, [pc, #296]	; (2afb8 <modem_info_string_get+0x204>)
	char *ip_str_end = recv_buf;
   2ae8e:	a804      	add	r0, sp, #16
   2ae90:	e7f6      	b.n	2ae80 <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2ae92:	f89a 300a 	ldrb.w	r3, [sl, #10]
   2ae96:	2b01      	cmp	r3, #1
   2ae98:	d11f      	bne.n	2aeda <modem_info_string_get+0x126>
		err = at_params_short_get(&m_param_list,
   2ae9a:	f89a 1008 	ldrb.w	r1, [sl, #8]
   2ae9e:	4658      	mov	r0, fp
   2aea0:	f10d 020a 	add.w	r2, sp, #10
   2aea4:	f00f fc8f 	bl	3a7c6 <at_params_short_get>
		if (err) {
   2aea8:	4601      	mov	r1, r0
   2aeaa:	b148      	cbz	r0, 2aec0 <modem_info_string_get+0x10c>
   2aeac:	4a43      	ldr	r2, [pc, #268]	; (2afbc <modem_info_string_get+0x208>)
   2aeae:	4b44      	ldr	r3, [pc, #272]	; (2afc0 <modem_info_string_get+0x20c>)
			LOG_ERR("Unable to obtain short: %d", err);
   2aeb0:	9000      	str	r0, [sp, #0]
   2aeb2:	1ad2      	subs	r2, r2, r3
   2aeb4:	08d2      	lsrs	r2, r2, #3
   2aeb6:	0192      	lsls	r2, r2, #6
   2aeb8:	4843      	ldr	r0, [pc, #268]	; (2afc8 <modem_info_string_get+0x214>)
   2aeba:	f042 0201 	orr.w	r2, r2, #1
   2aebe:	e7d9      	b.n	2ae74 <modem_info_string_get+0xc0>
		len = snprintf(buf, buf_size, "%d", param_value);
   2aec0:	4649      	mov	r1, r9
   2aec2:	4630      	mov	r0, r6
   2aec4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2aec8:	4a40      	ldr	r2, [pc, #256]	; (2afcc <modem_info_string_get+0x218>)
   2aeca:	f00c f9ad 	bl	37228 <sniprintf>
		if ((len <= 0) || (len > buf_size)) {
   2aece:	4548      	cmp	r0, r9
		len = snprintf(buf, buf_size, "%d", param_value);
   2aed0:	9003      	str	r0, [sp, #12]
		if ((len <= 0) || (len > buf_size)) {
   2aed2:	d915      	bls.n	2af00 <modem_info_string_get+0x14c>
			return -EMSGSIZE;
   2aed4:	f06f 0179 	mvn.w	r1, #121	; 0x79
   2aed8:	e798      	b.n	2ae0c <modem_info_string_get+0x58>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2aeda:	2b03      	cmp	r3, #3
   2aedc:	d110      	bne.n	2af00 <modem_info_string_get+0x14c>
		len = buf_size - out_buf_len;
   2aede:	eba9 0304 	sub.w	r3, r9, r4
		err = at_params_string_get(&m_param_list,
   2aee2:	f89a 1008 	ldrb.w	r1, [sl, #8]
		len = buf_size - out_buf_len;
   2aee6:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   2aee8:	4658      	mov	r0, fp
   2aeea:	ab03      	add	r3, sp, #12
   2aeec:	1932      	adds	r2, r6, r4
   2aeee:	f00f fc8f 	bl	3a810 <at_params_string_get>
		if (err != 0) {
   2aef2:	4601      	mov	r1, r0
   2aef4:	2800      	cmp	r0, #0
   2aef6:	d189      	bne.n	2ae0c <modem_info_string_get+0x58>
		} else if (len >= buf_size) {
   2aef8:	9b03      	ldr	r3, [sp, #12]
   2aefa:	454b      	cmp	r3, r9
   2aefc:	d2ea      	bcs.n	2aed4 <modem_info_string_get+0x120>
		buf[len] = 0;
   2aefe:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   2af00:	f1b8 0f0e 	cmp.w	r8, #14
   2af04:	d121      	bne.n	2af4a <modem_info_string_get+0x196>
   2af06:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   2af08:	4630      	mov	r0, r6
   2af0a:	f7f2 f8b1 	bl	1d070 <strlen>
   2af0e:	1ca3      	adds	r3, r4, #2
   2af10:	1ba4      	subs	r4, r4, r6
   2af12:	42a0      	cmp	r0, r4
   2af14:	d80f      	bhi.n	2af36 <modem_info_string_get+0x182>
		if ((len == ICCID_LEN) &&
   2af16:	9b03      	ldr	r3, [sp, #12]
   2af18:	2b14      	cmp	r3, #20
   2af1a:	d106      	bne.n	2af2a <modem_info_string_get+0x176>
   2af1c:	7cf3      	ldrb	r3, [r6, #19]
   2af1e:	2b46      	cmp	r3, #70	; 0x46
   2af20:	d103      	bne.n	2af2a <modem_info_string_get+0x176>
			buf[len - 1] = '\0';
   2af22:	2300      	movs	r3, #0
   2af24:	74f3      	strb	r3, [r6, #19]
			--len;
   2af26:	2313      	movs	r3, #19
   2af28:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   2af2a:	9903      	ldr	r1, [sp, #12]
   2af2c:	2900      	cmp	r1, #0
   2af2e:	bf08      	it	eq
   2af30:	f06f 0185 	mvneq.w	r1, #133	; 0x85
   2af34:	e76a      	b.n	2ae0c <modem_info_string_get+0x58>
		current_char = buf[i];
   2af36:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   2af3a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   2af3e:	461c      	mov	r4, r3
		buf[i] = next_char;
   2af40:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   2af44:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   2af48:	e7de      	b.n	2af08 <modem_info_string_get+0x154>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   2af4a:	f1b8 0f09 	cmp.w	r8, #9
   2af4e:	d1ec      	bne.n	2af2a <modem_info_string_get+0x176>
   2af50:	2d00      	cmp	r5, #0
   2af52:	ddea      	ble.n	2af2a <modem_info_string_get+0x176>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   2af54:	1933      	adds	r3, r6, r4
   2af56:	4618      	mov	r0, r3
   2af58:	491d      	ldr	r1, [pc, #116]	; (2afd0 <modem_info_string_get+0x21c>)
   2af5a:	9301      	str	r3, [sp, #4]
   2af5c:	f010 fbdc 	bl	3b718 <strstr>
		if (ip_v6_str) {
   2af60:	b130      	cbz	r0, 2af70 <modem_info_string_get+0x1bc>
			*ip_v6_str = 0;
   2af62:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   2af64:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   2af66:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   2af68:	4618      	mov	r0, r3
   2af6a:	f7f2 f881 	bl	1d070 <strlen>
   2af6e:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   2af70:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   2af72:	2d01      	cmp	r5, #1
		out_buf_len += len;
   2af74:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   2af76:	d00e      	beq.n	2af96 <modem_info_string_get+0x1e2>
			err = snprintf(&buf[out_buf_len],
   2af78:	eba9 0104 	sub.w	r1, r9, r4
   2af7c:	4a15      	ldr	r2, [pc, #84]	; (2afd4 <modem_info_string_get+0x220>)
   2af7e:	1930      	adds	r0, r6, r4
   2af80:	9100      	str	r1, [sp, #0]
   2af82:	f00c f951 	bl	37228 <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   2af86:	2800      	cmp	r0, #0
   2af88:	dda4      	ble.n	2aed4 <modem_info_string_get+0x120>
   2af8a:	9900      	ldr	r1, [sp, #0]
   2af8c:	4281      	cmp	r1, r0
   2af8e:	d3a1      	bcc.n	2aed4 <modem_info_string_get+0x120>
			cmd_rsp_idx = ip_str_len + 1;
   2af90:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   2af92:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   2af94:	9300      	str	r3, [sp, #0]
		if (--ip_cnt) {
   2af96:	3d01      	subs	r5, #1
   2af98:	f47f af46 	bne.w	2ae28 <modem_info_string_get+0x74>
			len = out_buf_len;
   2af9c:	9403      	str	r4, [sp, #12]
   2af9e:	e7c4      	b.n	2af2a <modem_info_string_get+0x176>
		return -EINVAL;
   2afa0:	f06f 0115 	mvn.w	r1, #21
   2afa4:	e732      	b.n	2ae0c <modem_info_string_get+0x58>
		return -EIO;
   2afa6:	f06f 0104 	mvn.w	r1, #4
   2afaa:	e72f      	b.n	2ae0c <modem_info_string_get+0x58>
			return -EFAULT;
   2afac:	f06f 010d 	mvn.w	r1, #13
   2afb0:	e72c      	b.n	2ae0c <modem_info_string_get+0x58>
   2afb2:	bf00      	nop
   2afb4:	0003ca34 	.word	0x0003ca34
   2afb8:	00040191 	.word	0x00040191
   2afbc:	0003c364 	.word	0x0003c364
   2afc0:	0003c2cc 	.word	0x0003c2cc
   2afc4:	0003fdb9 	.word	0x0003fdb9
   2afc8:	0003fdd2 	.word	0x0003fdd2
   2afcc:	0003fdcf 	.word	0x0003fdcf
   2afd0:	0003e7f5 	.word	0x0003e7f5
   2afd4:	0003fded 	.word	0x0003fded
   2afd8:	20023850 	.word	0x20023850

0002afdc <modem_info_init>:
}

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   2afdc:	210a      	movs	r1, #10
   2afde:	4801      	ldr	r0, [pc, #4]	; (2afe4 <modem_info_init+0x8>)
   2afe0:	f00f bb42 	b.w	3a668 <at_params_list_init>
   2afe4:	20023850 	.word	0x20023850

0002afe8 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   2afe8:	b538      	push	{r3, r4, r5, lr}
   2afea:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   2afec:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   2aff0:	f7ff fea2 	bl	2ad38 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   2aff4:	2803      	cmp	r0, #3
   2aff6:	d118      	bne.n	2b02a <modem_data_get+0x42>
		ret = modem_info_string_get(param->type,
   2aff8:	2264      	movs	r2, #100	; 0x64
   2affa:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2affe:	1ca9      	adds	r1, r5, #2
   2b000:	f7ff fed8 	bl	2adb4 <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   2b004:	1e04      	subs	r4, r0, #0
   2b006:	db02      	blt.n	2b00e <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   2b008:	2400      	movs	r4, #0
}
   2b00a:	4620      	mov	r0, r4
   2b00c:	bd38      	pop	{r3, r4, r5, pc}
   2b00e:	4a11      	ldr	r2, [pc, #68]	; (2b054 <modem_data_get+0x6c>)
   2b010:	4b11      	ldr	r3, [pc, #68]	; (2b058 <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   2b012:	f895 106c 	ldrb.w	r1, [r5, #108]	; 0x6c
   2b016:	1a9b      	subs	r3, r3, r2
   2b018:	08db      	lsrs	r3, r3, #3
   2b01a:	019b      	lsls	r3, r3, #6
   2b01c:	4622      	mov	r2, r4
   2b01e:	480f      	ldr	r0, [pc, #60]	; (2b05c <modem_data_get+0x74>)
   2b020:	f043 0301 	orr.w	r3, r3, #1
   2b024:	f00d fa72 	bl	3850c <log_2>
			return ret;
   2b028:	e7ef      	b.n	2b00a <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2b02a:	2801      	cmp	r0, #1
   2b02c:	d1ec      	bne.n	2b008 <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   2b02e:	4629      	mov	r1, r5
   2b030:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2b034:	f7ff fe8a 	bl	2ad4c <modem_info_short_get>
		if (ret < 0) {
   2b038:	1e04      	subs	r4, r0, #0
   2b03a:	dae5      	bge.n	2b008 <modem_data_get+0x20>
   2b03c:	4b05      	ldr	r3, [pc, #20]	; (2b054 <modem_data_get+0x6c>)
   2b03e:	4a06      	ldr	r2, [pc, #24]	; (2b058 <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d", ret);
   2b040:	4621      	mov	r1, r4
   2b042:	1ad2      	subs	r2, r2, r3
   2b044:	08d2      	lsrs	r2, r2, #3
   2b046:	0192      	lsls	r2, r2, #6
   2b048:	4805      	ldr	r0, [pc, #20]	; (2b060 <modem_data_get+0x78>)
   2b04a:	f042 0201 	orr.w	r2, r2, #1
   2b04e:	f00d fa46 	bl	384de <log_1>
			return ret;
   2b052:	e7da      	b.n	2b00a <modem_data_get+0x22>
   2b054:	0003c2cc 	.word	0x0003c2cc
   2b058:	0003c36c 	.word	0x0003c36c
   2b05c:	0003fdf0 	.word	0x0003fdf0
   2b060:	0003fe0e 	.word	0x0003fe0e

0002b064 <modem_info_params_init>:
	if (modem == NULL) {
   2b064:	2800      	cmp	r0, #0
   2b066:	d046      	beq.n	2b0f6 <modem_info_params_init+0x92>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   2b068:	2301      	movs	r3, #1
   2b06a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   2b06e:	2302      	movs	r3, #2
   2b070:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   2b074:	2303      	movs	r3, #3
   2b076:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   2b07a:	2305      	movs	r3, #5
   2b07c:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   2b080:	2306      	movs	r3, #6
   2b082:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   2b086:	2307      	movs	r3, #7
   2b088:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   2b08c:	2308      	movs	r3, #8
   2b08e:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   2b092:	2309      	movs	r3, #9
   2b094:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   2b098:	2304      	movs	r3, #4
   2b09a:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   2b09e:	230f      	movs	r3, #15
   2b0a0:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   2b0a4:	2310      	movs	r3, #16
   2b0a6:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   2b0aa:	2311      	movs	r3, #17
   2b0ac:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   2b0b0:	2314      	movs	r3, #20
   2b0b2:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   2b0b6:	2315      	movs	r3, #21
   2b0b8:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   2b0bc:	230a      	movs	r3, #10
   2b0be:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   2b0c2:	230e      	movs	r3, #14
   2b0c4:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   2b0c8:	2312      	movs	r3, #18
   2b0ca:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   2b0ce:	230d      	movs	r3, #13
   2b0d0:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   2b0d4:	230b      	movs	r3, #11
   2b0d6:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.imei.type			= MODEM_INFO_IMEI;
   2b0da:	2313      	movs	r3, #19
   2b0dc:	f880 38d4 	strb.w	r3, [r0, #2260]	; 0x8d4
	modem->device.board			= CONFIG_BOARD;
   2b0e0:	4b06      	ldr	r3, [pc, #24]	; (2b0fc <modem_info_params_init+0x98>)
   2b0e2:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   2b0e6:	4b06      	ldr	r3, [pc, #24]	; (2b100 <modem_info_params_init+0x9c>)
   2b0e8:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   2b0ec:	4b05      	ldr	r3, [pc, #20]	; (2b104 <modem_info_params_init+0xa0>)
   2b0ee:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0
	return 0;
   2b0f2:	2000      	movs	r0, #0
   2b0f4:	4770      	bx	lr
		return -EINVAL;
   2b0f6:	f06f 0015 	mvn.w	r0, #21
}
   2b0fa:	4770      	bx	lr
   2b0fc:	0003fe29 	.word	0x0003fe29
   2b100:	0003fe45 	.word	0x0003fe45
   2b104:	0003fe52 	.word	0x0003fe52

0002b108 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   2b108:	e92d 4477 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, sl, lr}
	int ret;

	if (modem == NULL) {
   2b10c:	4604      	mov	r4, r0
   2b10e:	2800      	cmp	r0, #0
   2b110:	f000 80ce 	beq.w	2b2b0 <modem_info_params_get+0x1a8>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   2b114:	f7ff ff68 	bl	2afe8 <modem_data_get>
   2b118:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   2b11a:	f104 0070 	add.w	r0, r4, #112	; 0x70
   2b11e:	f7ff ff63 	bl	2afe8 <modem_data_get>
   2b122:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   2b124:	f504 7044 	add.w	r0, r4, #784	; 0x310
   2b128:	f7ff ff5e 	bl	2afe8 <modem_data_get>
   2b12c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   2b12e:	f504 7060 	add.w	r0, r4, #896	; 0x380
   2b132:	f7ff ff59 	bl	2afe8 <modem_data_get>
		ret += modem_data_get(&modem->network.current_operator);
   2b136:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		ret += modem_data_get(&modem->network.ue_mode);
   2b13a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   2b13c:	4618      	mov	r0, r3
   2b13e:	9301      	str	r3, [sp, #4]
   2b140:	f7ff ff52 	bl	2afe8 <modem_data_get>
   2b144:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   2b146:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   2b14a:	f7ff ff4d 	bl	2afe8 <modem_data_get>
		ret += modem_data_get(&modem->network.area_code);
   2b14e:	f104 0ae0 	add.w	sl, r4, #224	; 0xe0
		ret += modem_data_get(&modem->network.cellid_hex);
   2b152:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   2b154:	4650      	mov	r0, sl
   2b156:	f7ff ff47 	bl	2afe8 <modem_data_get>
   2b15a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   2b15c:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   2b160:	f7ff ff42 	bl	2afe8 <modem_data_get>
   2b164:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   2b166:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   2b16a:	f7ff ff3d 	bl	2afe8 <modem_data_get>
   2b16e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   2b170:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   2b174:	f7ff ff38 	bl	2afe8 <modem_data_get>
   2b178:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   2b17a:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   2b17e:	f7ff ff33 	bl	2afe8 <modem_data_get>
   2b182:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   2b184:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   2b188:	f7ff ff2e 	bl	2afe8 <modem_data_get>
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   2b18c:	9b01      	ldr	r3, [sp, #4]
			ret += modem_data_get(&modem->network.date_time);
   2b18e:	4405      	add	r5, r0
		}

		ret += mcc_mnc_parse(&modem->network.current_operator,
   2b190:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
   2b194:	f504 720c 	add.w	r2, r4, #560	; 0x230
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   2b198:	2b00      	cmp	r3, #0
   2b19a:	d050      	beq.n	2b23e <modem_info_params_get+0x136>
   2b19c:	2900      	cmp	r1, #0
   2b19e:	d04e      	beq.n	2b23e <modem_info_params_get+0x136>
   2b1a0:	2a00      	cmp	r2, #0
   2b1a2:	d04c      	beq.n	2b23e <modem_info_params_get+0x136>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b1a4:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
	memcpy(mcc->value_string, current_operator->value_string, 3);
   2b1a8:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   2b1ac:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   2b1b0:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2b1b4:	220a      	movs	r2, #10
   2b1b6:	7083      	strb	r3, [r0, #2]
   2b1b8:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   2b1bc:	2100      	movs	r1, #0
   2b1be:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   2b1c2:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   2b1c6:	f204 2632 	addw	r6, r4, #562	; 0x232
   2b1ca:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2b1ce:	f00c f919 	bl	37404 <strtol>
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2b1d2:	2100      	movs	r1, #0
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2b1d4:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2b1d8:	220a      	movs	r2, #10
   2b1da:	4630      	mov	r0, r6
   2b1dc:	f00c f912 	bl	37404 <strtol>
	return 0;
   2b1e0:	2100      	movs	r1, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2b1e2:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2b1e6:	2210      	movs	r2, #16
		ret += mcc_mnc_parse(&modem->network.current_operator,
   2b1e8:	440d      	add	r5, r1
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2b1ea:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   2b1ee:	2100      	movs	r1, #0
   2b1f0:	f00c f908 	bl	37404 <strtol>
   2b1f4:	f7f1 fa76 	bl	1c6e4 <__aeabi_i2d>
   2b1f8:	f504 66c4 	add.w	r6, r4, #1568	; 0x620
   2b1fc:	e9c6 0100 	strd	r0, r1, [r6]
	if (area_code == NULL) {
   2b200:	f1ba 0f00 	cmp.w	sl, #0
   2b204:	d01e      	beq.n	2b244 <modem_info_params_get+0x13c>
	area_code->value_string[4] = '\0';
   2b206:	2600      	movs	r6, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2b208:	2210      	movs	r2, #16
   2b20a:	4631      	mov	r1, r6
	area_code->value_string[4] = '\0';
   2b20c:	f884 60e6 	strb.w	r6, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2b210:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   2b214:	f00c f8f6 	bl	37404 <strtol>
   2b218:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   2b21c:	19a9      	adds	r1, r5, r6
   2b21e:	d014      	beq.n	2b24a <modem_info_params_get+0x142>
   2b220:	4a25      	ldr	r2, [pc, #148]	; (2b2b8 <modem_info_params_get+0x1b0>)
   2b222:	4b26      	ldr	r3, [pc, #152]	; (2b2bc <modem_info_params_get+0x1b4>)
			LOG_ERR("Network data not obtained: %d", ret);
   2b224:	4826      	ldr	r0, [pc, #152]	; (2b2c0 <modem_info_params_get+0x1b8>)
   2b226:	1ad2      	subs	r2, r2, r3
   2b228:	08d2      	lsrs	r2, r2, #3
   2b22a:	0192      	lsls	r2, r2, #6
   2b22c:	f042 0201 	orr.w	r2, r2, #1
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   2b230:	f00d f955 	bl	384de <log_1>
			return -EAGAIN;
   2b234:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   2b238:	b003      	add	sp, #12
   2b23a:	e8bd 8470 	ldmia.w	sp!, {r4, r5, r6, sl, pc}
		return -EINVAL;
   2b23e:	f06f 0115 	mvn.w	r1, #21
   2b242:	e7d0      	b.n	2b1e6 <modem_info_params_get+0xde>
		return -EINVAL;
   2b244:	f06f 0615 	mvn.w	r6, #21
   2b248:	e7e8      	b.n	2b21c <modem_info_params_get+0x114>
		ret = modem_data_get(&modem->sim.uicc);
   2b24a:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   2b24e:	f7ff fecb 	bl	2afe8 <modem_data_get>
   2b252:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   2b254:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   2b258:	f7ff fec6 	bl	2afe8 <modem_data_get>
   2b25c:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   2b25e:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   2b262:	f7ff fec1 	bl	2afe8 <modem_data_get>
		if (ret) {
   2b266:	1829      	adds	r1, r5, r0
   2b268:	d008      	beq.n	2b27c <modem_info_params_get+0x174>
   2b26a:	4a13      	ldr	r2, [pc, #76]	; (2b2b8 <modem_info_params_get+0x1b0>)
   2b26c:	4b13      	ldr	r3, [pc, #76]	; (2b2bc <modem_info_params_get+0x1b4>)
			LOG_ERR("Sim data not obtained: %d", ret);
   2b26e:	4815      	ldr	r0, [pc, #84]	; (2b2c4 <modem_info_params_get+0x1bc>)
   2b270:	1ad2      	subs	r2, r2, r3
   2b272:	08d2      	lsrs	r2, r2, #3
   2b274:	0192      	lsls	r2, r2, #6
   2b276:	f042 0201 	orr.w	r2, r2, #1
   2b27a:	e7d9      	b.n	2b230 <modem_info_params_get+0x128>
		ret = modem_data_get(&modem->device.modem_fw);
   2b27c:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   2b280:	f7ff feb2 	bl	2afe8 <modem_data_get>
   2b284:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   2b286:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   2b28a:	f7ff fead 	bl	2afe8 <modem_data_get>
   2b28e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   2b290:	f604 0068 	addw	r0, r4, #2152	; 0x868
   2b294:	f7ff fea8 	bl	2afe8 <modem_data_get>
		if (ret) {
   2b298:	1828      	adds	r0, r5, r0
   2b29a:	d0cd      	beq.n	2b238 <modem_info_params_get+0x130>
   2b29c:	4a06      	ldr	r2, [pc, #24]	; (2b2b8 <modem_info_params_get+0x1b0>)
   2b29e:	4b07      	ldr	r3, [pc, #28]	; (2b2bc <modem_info_params_get+0x1b4>)
			LOG_ERR("Device data not obtained: %d", ret);
   2b2a0:	4601      	mov	r1, r0
   2b2a2:	1ad2      	subs	r2, r2, r3
   2b2a4:	08d2      	lsrs	r2, r2, #3
   2b2a6:	0192      	lsls	r2, r2, #6
   2b2a8:	4807      	ldr	r0, [pc, #28]	; (2b2c8 <modem_info_params_get+0x1c0>)
   2b2aa:	f042 0201 	orr.w	r2, r2, #1
   2b2ae:	e7bf      	b.n	2b230 <modem_info_params_get+0x128>
		return -EINVAL;
   2b2b0:	f06f 0015 	mvn.w	r0, #21
   2b2b4:	e7c0      	b.n	2b238 <modem_info_params_get+0x130>
   2b2b6:	bf00      	nop
   2b2b8:	0003c36c 	.word	0x0003c36c
   2b2bc:	0003c2cc 	.word	0x0003c2cc
   2b2c0:	0003fe5f 	.word	0x0003fe5f
   2b2c4:	0003fe7d 	.word	0x0003fe7d
   2b2c8:	0003fe97 	.word	0x0003fe97

0002b2cc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2b2cc:	b508      	push	{r3, lr}
	z_impl_log_panic();
   2b2ce:	f7f9 fa1d 	bl	2470c <z_impl_log_panic>
   2b2d2:	4b06      	ldr	r3, [pc, #24]	; (2b2ec <k_sys_fatal_error_handler+0x20>)
   2b2d4:	4906      	ldr	r1, [pc, #24]	; (2b2f0 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   2b2d6:	4807      	ldr	r0, [pc, #28]	; (2b2f4 <k_sys_fatal_error_handler+0x28>)
   2b2d8:	1ac9      	subs	r1, r1, r3
   2b2da:	08c9      	lsrs	r1, r1, #3
   2b2dc:	0189      	lsls	r1, r1, #6
   2b2de:	f041 0101 	orr.w	r1, r1, #1
   2b2e2:	f00d f8ed 	bl	384c0 <log_0>
	sys_arch_reboot(0);
   2b2e6:	2000      	movs	r0, #0
   2b2e8:	f7fb f850 	bl	2638c <sys_arch_reboot>

	CODE_UNREACHABLE;
   2b2ec:	0003c2cc 	.word	0x0003c2cc
   2b2f0:	0003c324 	.word	0x0003c324
   2b2f4:	0003fec6 	.word	0x0003fec6

0002b2f8 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   2b2f8:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   2b2fa:	4604      	mov	r4, r0
{
   2b2fc:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   2b2fe:	b1f8      	cbz	r0, 2b340 <download_client_init+0x48>
   2b300:	b1f1      	cbz	r1, 2b340 <download_client_init+0x48>
		return -EINVAL;
	}

	client->fd = -1;
   2b302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b306:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   2b308:	f641 1308 	movw	r3, #6408	; 0x1908
   2b30c:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2b30e:	2200      	movs	r2, #0
   2b310:	2300      	movs	r3, #0
   2b312:	2500      	movs	r5, #0
   2b314:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2b318:	230e      	movs	r3, #14
   2b31a:	9000      	str	r0, [sp, #0]
   2b31c:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2b320:	f600 1108 	addw	r1, r0, #2312	; 0x908
   2b324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2b328:	e9cd 5501 	strd	r5, r5, [sp, #4]
   2b32c:	4b06      	ldr	r3, [pc, #24]	; (2b348 <download_client_init+0x50>)
   2b32e:	f500 6004 	add.w	r0, r0, #2112	; 0x840
   2b332:	f00b f893 	bl	3645c <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   2b336:	f8c4 0838 	str.w	r0, [r4, #2104]	; 0x838
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   2b33a:	4628      	mov	r0, r5
}
   2b33c:	b009      	add	sp, #36	; 0x24
   2b33e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2b340:	f06f 0015 	mvn.w	r0, #21
   2b344:	e7fa      	b.n	2b33c <download_client_init+0x44>
   2b346:	bf00      	nop
   2b348:	0002b7a5 	.word	0x0002b7a5

0002b34c <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   2b34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b350:	4688      	mov	r8, r1
   2b352:	4616      	mov	r6, r2
	int err;
	struct sockaddr sa;

	if (client == NULL || host == NULL || config == NULL) {
   2b354:	4604      	mov	r4, r0
{
   2b356:	b0c5      	sub	sp, #276	; 0x114
	if (client == NULL || host == NULL || config == NULL) {
   2b358:	2800      	cmp	r0, #0
   2b35a:	f000 81cd 	beq.w	2b6f8 <download_client_connect+0x3ac>
   2b35e:	2900      	cmp	r1, #0
   2b360:	f000 81ca 	beq.w	2b6f8 <download_client_connect+0x3ac>
   2b364:	2a00      	cmp	r2, #0
   2b366:	f000 81c7 	beq.w	2b6f8 <download_client_connect+0x3ac>
		return -EINVAL;
	}

	if (client->fd != -1) {
   2b36a:	6803      	ldr	r3, [r0, #0]
   2b36c:	3301      	adds	r3, #1
   2b36e:	f040 81c6 	bne.w	2b6fe <download_client_connect+0x3b2>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   2b372:	6893      	ldr	r3, [r2, #8]
   2b374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2b378:	d90f      	bls.n	2b39a <download_client_connect+0x4e>
   2b37a:	4bbb      	ldr	r3, [pc, #748]	; (2b668 <download_client_connect+0x31c>)
   2b37c:	49bb      	ldr	r1, [pc, #748]	; (2b66c <download_client_connect+0x320>)
		LOG_ERR("The configured fragment size is larger than buffer");
   2b37e:	48bc      	ldr	r0, [pc, #752]	; (2b670 <download_client_connect+0x324>)
   2b380:	1ac9      	subs	r1, r1, r3
   2b382:	08c9      	lsrs	r1, r1, #3
   2b384:	0189      	lsls	r1, r1, #6
   2b386:	f041 0101 	orr.w	r1, r1, #1
   2b38a:	f00d f899 	bl	384c0 <log_0>
		return -E2BIG;
   2b38e:	f06f 0506 	mvn.w	r5, #6
	if (client->fd < 0) {
		return err;
	}

	return 0;
}
   2b392:	4628      	mov	r0, r5
   2b394:	b045      	add	sp, #276	; 0x114
   2b396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = host_lookup(host, AF_INET, config->apn, &sa);
   2b39a:	6855      	ldr	r5, [r2, #4]
	struct addrinfo hints = {
   2b39c:	2100      	movs	r1, #0
   2b39e:	2250      	movs	r2, #80	; 0x50
   2b3a0:	a81c      	add	r0, sp, #112	; 0x70
   2b3a2:	f010 f826 	bl	3b3f2 <memset>
			} : NULL,
   2b3a6:	b16d      	cbz	r5, 2b3c4 <download_client_connect+0x78>
			&(struct addrinfo) {
   2b3a8:	2250      	movs	r2, #80	; 0x50
   2b3aa:	2100      	movs	r1, #0
   2b3ac:	a830      	add	r0, sp, #192	; 0xc0
   2b3ae:	f010 f820 	bl	3b3f2 <memset>
   2b3b2:	2304      	movs	r3, #4
   2b3b4:	2266      	movs	r2, #102	; 0x66
   2b3b6:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
   2b3ba:	f240 2302 	movw	r3, #514	; 0x202
   2b3be:	9537      	str	r5, [sp, #220]	; 0xdc
   2b3c0:	9334      	str	r3, [sp, #208]	; 0xd0
			} : NULL,
   2b3c2:	ad30      	add	r5, sp, #192	; 0xc0
	struct addrinfo hints = {
   2b3c4:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   2b3c6:	2240      	movs	r2, #64	; 0x40
   2b3c8:	4640      	mov	r0, r8
   2b3ca:	a90c      	add	r1, sp, #48	; 0x30
	struct addrinfo hints = {
   2b3cc:	951c      	str	r5, [sp, #112]	; 0x70
   2b3ce:	931e      	str	r3, [sp, #120]	; 0x78
	err = url_parse_host(host, hostname, sizeof(hostname));
   2b3d0:	f000 fb54 	bl	2ba7c <url_parse_host>
	if (err) {
   2b3d4:	4605      	mov	r5, r0
   2b3d6:	2800      	cmp	r0, #0
   2b3d8:	d1db      	bne.n	2b392 <download_client_connect+0x46>
	return zsock_getaddrinfo(host, service, hints, res);
   2b3da:	4601      	mov	r1, r0
   2b3dc:	ab05      	add	r3, sp, #20
   2b3de:	aa1c      	add	r2, sp, #112	; 0x70
   2b3e0:	a80c      	add	r0, sp, #48	; 0x30
   2b3e2:	f00d fc5d 	bl	38ca0 <zsock_getaddrinfo>
	if (err) {
   2b3e6:	4605      	mov	r5, r0
   2b3e8:	b190      	cbz	r0, 2b410 <download_client_connect+0xc4>
   2b3ea:	4b9f      	ldr	r3, [pc, #636]	; (2b668 <download_client_connect+0x31c>)
   2b3ec:	4c9f      	ldr	r4, [pc, #636]	; (2b66c <download_client_connect+0x320>)
		LOG_WRN("Failed to resolve hostname %s on %s",
   2b3ee:	a80c      	add	r0, sp, #48	; 0x30
   2b3f0:	1ae4      	subs	r4, r4, r3
   2b3f2:	f7f9 f813 	bl	2441c <log_strdup>
   2b3f6:	08e4      	lsrs	r4, r4, #3
   2b3f8:	01a4      	lsls	r4, r4, #6
   2b3fa:	f044 0402 	orr.w	r4, r4, #2
   2b3fe:	4601      	mov	r1, r0
   2b400:	4623      	mov	r3, r4
   2b402:	4a9c      	ldr	r2, [pc, #624]	; (2b674 <download_client_connect+0x328>)
   2b404:	489c      	ldr	r0, [pc, #624]	; (2b678 <download_client_connect+0x32c>)
   2b406:	f00d f881 	bl	3850c <log_2>
		return -EHOSTUNREACH;
   2b40a:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2b40e:	e7c0      	b.n	2b392 <download_client_connect+0x46>
	*sa = *(ai->ai_addr);
   2b410:	f8dd c014 	ldr.w	ip, [sp, #20]
   2b414:	aa06      	add	r2, sp, #24
   2b416:	f8dc 3018 	ldr.w	r3, [ip, #24]
   2b41a:	f103 0e18 	add.w	lr, r3, #24
   2b41e:	4617      	mov	r7, r2
   2b420:	6818      	ldr	r0, [r3, #0]
   2b422:	6859      	ldr	r1, [r3, #4]
   2b424:	3308      	adds	r3, #8
   2b426:	c703      	stmia	r7!, {r0, r1}
   2b428:	4573      	cmp	r3, lr
   2b42a:	463a      	mov	r2, r7
   2b42c:	d1f7      	bne.n	2b41e <download_client_connect+0xd2>
	zsock_freeaddrinfo(ai);
   2b42e:	4660      	mov	r0, ip
   2b430:	f00d fc38 	bl	38ca4 <zsock_freeaddrinfo>
	client->config = *config;
   2b434:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2b438:	f604 0318 	addw	r3, r4, #2072	; 0x818
   2b43c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = url_parse_proto(host, &dl->proto, &type);
   2b440:	4640      	mov	r0, r8
	client->host = host;
   2b442:	f8c4 8810 	str.w	r8, [r4, #2064]	; 0x810
	err = url_parse_proto(host, &dl->proto, &type);
   2b446:	aa0c      	add	r2, sp, #48	; 0x30
   2b448:	f604 0124 	addw	r1, r4, #2084	; 0x824
   2b44c:	f000 fae0 	bl	2ba10 <url_parse_proto>
	if (err) {
   2b450:	b150      	cbz	r0, 2b468 <download_client_connect+0x11c>
		type = SOCK_STREAM;
   2b452:	2301      	movs	r3, #1
   2b454:	930c      	str	r3, [sp, #48]	; 0x30
		if (dl->config.sec_tag != -1) {
   2b456:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   2b45a:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   2b45c:	bf14      	ite	ne
   2b45e:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   2b462:	2306      	moveq	r3, #6
   2b464:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   2b468:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   2b46c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   2b470:	2a11      	cmp	r2, #17
   2b472:	f000 813b 	beq.w	2b6ec <download_client_connect+0x3a0>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   2b476:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2b47a:	d115      	bne.n	2b4a8 <download_client_connect+0x15c>
		if (dl->config.sec_tag == -1) {
   2b47c:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   2b480:	3301      	adds	r3, #1
   2b482:	d111      	bne.n	2b4a8 <download_client_connect+0x15c>
   2b484:	4b78      	ldr	r3, [pc, #480]	; (2b668 <download_client_connect+0x31c>)
   2b486:	4979      	ldr	r1, [pc, #484]	; (2b66c <download_client_connect+0x320>)
			LOG_WRN("No security tag provided for TLS/DTLS");
   2b488:	487c      	ldr	r0, [pc, #496]	; (2b67c <download_client_connect+0x330>)
   2b48a:	1ac9      	subs	r1, r1, r3
   2b48c:	08c9      	lsrs	r1, r1, #3
   2b48e:	0189      	lsls	r1, r1, #6
   2b490:	f041 0102 	orr.w	r1, r1, #2
   2b494:	f00d f814 	bl	384c0 <log_0>
			return -EINVAL;
   2b498:	f06f 0715 	mvn.w	r7, #21
	if (client->fd < 0) {
   2b49c:	6823      	ldr	r3, [r4, #0]
		return err;
   2b49e:	ea35 0523 	bics.w	r5, r5, r3, asr #32
   2b4a2:	bf28      	it	cs
   2b4a4:	463d      	movcs	r5, r7
   2b4a6:	e774      	b.n	2b392 <download_client_connect+0x46>
	err = url_parse_port(host, &port);
   2b4a8:	4640      	mov	r0, r8
   2b4aa:	a905      	add	r1, sp, #20
   2b4ac:	f000 fb10 	bl	2bad0 <url_parse_port>
	if (err) {
   2b4b0:	b148      	cbz	r0, 2b4c6 <download_client_connect+0x17a>
		switch (dl->proto) {
   2b4b2:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   2b4b6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2b4ba:	d03a      	beq.n	2b532 <download_client_connect+0x1e6>
   2b4bc:	dc32      	bgt.n	2b524 <download_client_connect+0x1d8>
   2b4be:	2b06      	cmp	r3, #6
   2b4c0:	d03c      	beq.n	2b53c <download_client_connect+0x1f0>
   2b4c2:	2b11      	cmp	r3, #17
   2b4c4:	d03c      	beq.n	2b540 <download_client_connect+0x1f4>
	switch (sa->sa_family) {
   2b4c6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   2b4ca:	2801      	cmp	r0, #1
   2b4cc:	d03b      	beq.n	2b546 <download_client_connect+0x1fa>
   2b4ce:	2802      	cmp	r0, #2
   2b4d0:	f040 810f 	bne.w	2b6f2 <download_client_connect+0x3a6>
		addrlen = sizeof(struct sockaddr_in6);
   2b4d4:	f04f 0b18 	mov.w	fp, #24
		SIN6(sa)->sin6_port = htons(port);
   2b4d8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2b4dc:	0213      	lsls	r3, r2, #8
   2b4de:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2b4e2:	f8ad 301a 	strh.w	r3, [sp, #26]
	*fd = socket(sa->sa_family, type, dl->proto);
   2b4e6:	990c      	ldr	r1, [sp, #48]	; 0x30
   2b4e8:	f8d4 2824 	ldr.w	r2, [r4, #2084]	; 0x824
	return z_impl_zsock_socket(family, type, proto);
   2b4ec:	f7f9 fc64 	bl	24db8 <z_impl_zsock_socket>
   2b4f0:	4f5e      	ldr	r7, [pc, #376]	; (2b66c <download_client_connect+0x320>)
   2b4f2:	4a5d      	ldr	r2, [pc, #372]	; (2b668 <download_client_connect+0x31c>)
	if (*fd < 0) {
   2b4f4:	2800      	cmp	r0, #0
   2b4f6:	eba7 0702 	sub.w	r7, r7, r2
   2b4fa:	ea4f 03d7 	mov.w	r3, r7, lsr #3
	*fd = socket(sa->sa_family, type, dl->proto);
   2b4fe:	6020      	str	r0, [r4, #0]
	if (*fd < 0) {
   2b500:	9302      	str	r3, [sp, #8]
   2b502:	ea4f 1683 	mov.w	r6, r3, lsl #6
   2b506:	da28      	bge.n	2b55a <download_client_connect+0x20e>
		LOG_ERR("Failed to create socket, err %d", errno);
   2b508:	f00d fedd 	bl	392c6 <__errno>
   2b50c:	f046 0601 	orr.w	r6, r6, #1
   2b510:	6801      	ldr	r1, [r0, #0]
   2b512:	4632      	mov	r2, r6
   2b514:	485a      	ldr	r0, [pc, #360]	; (2b680 <download_client_connect+0x334>)
   2b516:	f00c ffe2 	bl	384de <log_1>
		return -errno;
   2b51a:	f00d fed4 	bl	392c6 <__errno>
   2b51e:	6807      	ldr	r7, [r0, #0]
   2b520:	427f      	negs	r7, r7
   2b522:	e7bb      	b.n	2b49c <download_client_connect+0x150>
		switch (dl->proto) {
   2b524:	f240 1211 	movw	r2, #273	; 0x111
   2b528:	4293      	cmp	r3, r2
   2b52a:	d1cc      	bne.n	2b4c6 <download_client_connect+0x17a>
			port = 5684;
   2b52c:	f241 6334 	movw	r3, #5684	; 0x1634
   2b530:	e001      	b.n	2b536 <download_client_connect+0x1ea>
			port = 443;
   2b532:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   2b536:	f8ad 3014 	strh.w	r3, [sp, #20]
			break;
   2b53a:	e7c4      	b.n	2b4c6 <download_client_connect+0x17a>
			port = 80;
   2b53c:	2350      	movs	r3, #80	; 0x50
   2b53e:	e7fa      	b.n	2b536 <download_client_connect+0x1ea>
			port = 5683;
   2b540:	f241 6333 	movw	r3, #5683	; 0x1633
   2b544:	e7f7      	b.n	2b536 <download_client_connect+0x1ea>
		SIN(sa)->sin_port = htons(port);
   2b546:	f8bd 2014 	ldrh.w	r2, [sp, #20]
		addrlen = sizeof(struct sockaddr_in);
   2b54a:	f04f 0b08 	mov.w	fp, #8
		SIN(sa)->sin_port = htons(port);
   2b54e:	0213      	lsls	r3, r2, #8
   2b550:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2b554:	f8ad 301a 	strh.w	r3, [sp, #26]
		break;
   2b558:	e7c5      	b.n	2b4e6 <download_client_connect+0x19a>
	if (dl->config.apn != NULL && strlen(dl->config.apn)) {
   2b55a:	f8d4 081c 	ldr.w	r0, [r4, #2076]	; 0x81c
   2b55e:	2800      	cmp	r0, #0
   2b560:	d040      	beq.n	2b5e4 <download_client_connect+0x298>
   2b562:	f7f1 fd85 	bl	1d070 <strlen>
   2b566:	2800      	cmp	r0, #0
   2b568:	d03c      	beq.n	2b5e4 <download_client_connect+0x298>
		err = socket_apn_set(*fd, dl->config.apn);
   2b56a:	f8d4 781c 	ldr.w	r7, [r4, #2076]	; 0x81c
   2b56e:	f8d4 9000 	ldr.w	r9, [r4]
	len = strlen(apn);
   2b572:	4638      	mov	r0, r7
   2b574:	f7f1 fd7c 	bl	1d070 <strlen>
	if (len >= IFNAMSIZ) {
   2b578:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   2b57a:	4682      	mov	sl, r0
	if (len >= IFNAMSIZ) {
   2b57c:	d90d      	bls.n	2b59a <download_client_connect+0x24e>
		LOG_ERR("Access point name is too long.");
   2b57e:	4841      	ldr	r0, [pc, #260]	; (2b684 <download_client_connect+0x338>)
   2b580:	f046 0101 	orr.w	r1, r6, #1
   2b584:	f00c ff9c 	bl	384c0 <log_0>
		return -EINVAL;
   2b588:	f06f 0715 	mvn.w	r7, #21
		close(*fd);
   2b58c:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   2b58e:	f00d fb9a 	bl	38cc6 <z_impl_zsock_close>
		*fd = -1;
   2b592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b596:	6023      	str	r3, [r4, #0]
   2b598:	e780      	b.n	2b49c <download_client_connect+0x150>
	LOG_INF("Setting up APN: %s", log_strdup(apn));
   2b59a:	f046 0203 	orr.w	r2, r6, #3
   2b59e:	4638      	mov	r0, r7
   2b5a0:	9203      	str	r2, [sp, #12]
   2b5a2:	f7f8 ff3b 	bl	2441c <log_strdup>
   2b5a6:	9a03      	ldr	r2, [sp, #12]
   2b5a8:	4601      	mov	r1, r0
   2b5aa:	4837      	ldr	r0, [pc, #220]	; (2b688 <download_client_connect+0x33c>)
   2b5ac:	f00c ff97 	bl	384de <log_1>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2b5b0:	2219      	movs	r2, #25
   2b5b2:	463b      	mov	r3, r7
   2b5b4:	2101      	movs	r1, #1
   2b5b6:	4648      	mov	r0, r9
   2b5b8:	f8cd a000 	str.w	sl, [sp]
   2b5bc:	f00d fc4c 	bl	38e58 <z_impl_zsock_setsockopt>
	if (err) {
   2b5c0:	b180      	cbz	r0, 2b5e4 <download_client_connect+0x298>
		LOG_ERR("Failed to bind socket to network \"%s\", err %d",
   2b5c2:	4638      	mov	r0, r7
   2b5c4:	f7f8 ff2a 	bl	2441c <log_strdup>
   2b5c8:	9002      	str	r0, [sp, #8]
   2b5ca:	f00d fe7c 	bl	392c6 <__errno>
   2b5ce:	f046 0601 	orr.w	r6, r6, #1
   2b5d2:	6802      	ldr	r2, [r0, #0]
   2b5d4:	4633      	mov	r3, r6
   2b5d6:	9902      	ldr	r1, [sp, #8]
   2b5d8:	482c      	ldr	r0, [pc, #176]	; (2b68c <download_client_connect+0x340>)
   2b5da:	f00c ff97 	bl	3850c <log_2>
		return -ENETUNREACH;
   2b5de:	f06f 0771 	mvn.w	r7, #113	; 0x71
   2b5e2:	e7d3      	b.n	2b58c <download_client_connect+0x240>
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   2b5e4:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   2b5e8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2b5ec:	d003      	beq.n	2b5f6 <download_client_connect+0x2aa>
   2b5ee:	f240 1211 	movw	r2, #273	; 0x111
   2b5f2:	4293      	cmp	r3, r2
   2b5f4:	d126      	bne.n	2b644 <download_client_connect+0x2f8>
	     && (dl->config.sec_tag != -1)) {
   2b5f6:	f8d4 9818 	ldr.w	r9, [r4, #2072]	; 0x818
   2b5fa:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2b5fe:	d021      	beq.n	2b644 <download_client_connect+0x2f8>
	verify = REQUIRED;
   2b600:	2302      	movs	r3, #2
		err = socket_sectag_set(*fd, dl->config.sec_tag);
   2b602:	f8d4 a000 	ldr.w	sl, [r4]
	sec_tag_t sec_tag_list[] = { sec_tag };
   2b606:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
	verify = REQUIRED;
   2b60a:	931c      	str	r3, [sp, #112]	; 0x70
   2b60c:	2304      	movs	r3, #4
   2b60e:	2205      	movs	r2, #5
   2b610:	9300      	str	r3, [sp, #0]
   2b612:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2b616:	ab1c      	add	r3, sp, #112	; 0x70
   2b618:	4650      	mov	r0, sl
   2b61a:	f00d fc1d 	bl	38e58 <z_impl_zsock_setsockopt>
	if (err) {
   2b61e:	9b02      	ldr	r3, [sp, #8]
   2b620:	019f      	lsls	r7, r3, #6
   2b622:	2800      	cmp	r0, #0
   2b624:	d038      	beq.n	2b698 <download_client_connect+0x34c>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   2b626:	f00d fe4e 	bl	392c6 <__errno>
   2b62a:	f047 0701 	orr.w	r7, r7, #1
   2b62e:	463a      	mov	r2, r7
   2b630:	6801      	ldr	r1, [r0, #0]
   2b632:	4817      	ldr	r0, [pc, #92]	; (2b690 <download_client_connect+0x344>)
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   2b634:	f00c ff53 	bl	384de <log_1>
		return -errno;
   2b638:	f00d fe45 	bl	392c6 <__errno>
   2b63c:	6807      	ldr	r7, [r0, #0]
   2b63e:	427f      	negs	r7, r7
		if (err) {
   2b640:	2f00      	cmp	r7, #0
   2b642:	d1a3      	bne.n	2b58c <download_client_connect+0x240>
	LOG_INF("Connecting to %s", log_strdup(host));
   2b644:	4640      	mov	r0, r8
   2b646:	f7f8 fee9 	bl	2441c <log_strdup>
   2b64a:	f046 0703 	orr.w	r7, r6, #3
   2b64e:	4601      	mov	r1, r0
   2b650:	463a      	mov	r2, r7
   2b652:	4810      	ldr	r0, [pc, #64]	; (2b694 <download_client_connect+0x348>)
   2b654:	f00c ff43 	bl	384de <log_1>
	err = connect(*fd, sa, addrlen);
   2b658:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   2b65a:	465a      	mov	r2, fp
   2b65c:	a906      	add	r1, sp, #24
   2b65e:	f00d fb5f 	bl	38d20 <z_impl_zsock_connect>
	if (err) {
   2b662:	bb90      	cbnz	r0, 2b6ca <download_client_connect+0x37e>
			return -EINVAL;
   2b664:	2700      	movs	r7, #0
   2b666:	e719      	b.n	2b49c <download_client_connect+0x150>
   2b668:	0003c2cc 	.word	0x0003c2cc
   2b66c:	0003c31c 	.word	0x0003c31c
   2b670:	0003fee3 	.word	0x0003fee3
   2b674:	0003e2e2 	.word	0x0003e2e2
   2b678:	0003e2ec 	.word	0x0003e2ec
   2b67c:	0003ff16 	.word	0x0003ff16
   2b680:	0003ff3c 	.word	0x0003ff3c
   2b684:	0003ff5c 	.word	0x0003ff5c
   2b688:	0003ff7b 	.word	0x0003ff7b
   2b68c:	0003ff8e 	.word	0x0003ff8e
   2b690:	0003e36b 	.word	0x0003e36b
   2b694:	0004000d 	.word	0x0004000d
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   2b698:	4649      	mov	r1, r9
   2b69a:	481a      	ldr	r0, [pc, #104]	; (2b704 <download_client_connect+0x3b8>)
   2b69c:	f047 0203 	orr.w	r2, r7, #3
   2b6a0:	f00c ff1d 	bl	384de <log_1>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2b6a4:	2304      	movs	r3, #4
   2b6a6:	2201      	movs	r2, #1
   2b6a8:	9300      	str	r3, [sp, #0]
   2b6aa:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2b6ae:	4650      	mov	r0, sl
   2b6b0:	ab30      	add	r3, sp, #192	; 0xc0
   2b6b2:	f00d fbd1 	bl	38e58 <z_impl_zsock_setsockopt>
	if (err) {
   2b6b6:	2800      	cmp	r0, #0
   2b6b8:	d0c4      	beq.n	2b644 <download_client_connect+0x2f8>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   2b6ba:	f00d fe04 	bl	392c6 <__errno>
   2b6be:	f047 0701 	orr.w	r7, r7, #1
   2b6c2:	6801      	ldr	r1, [r0, #0]
   2b6c4:	463a      	mov	r2, r7
   2b6c6:	4810      	ldr	r0, [pc, #64]	; (2b708 <download_client_connect+0x3bc>)
   2b6c8:	e7b4      	b.n	2b634 <download_client_connect+0x2e8>
		LOG_ERR("Unable to connect, errno %d", errno);
   2b6ca:	f00d fdfc 	bl	392c6 <__errno>
   2b6ce:	f046 0601 	orr.w	r6, r6, #1
   2b6d2:	6801      	ldr	r1, [r0, #0]
   2b6d4:	4632      	mov	r2, r6
   2b6d6:	480d      	ldr	r0, [pc, #52]	; (2b70c <download_client_connect+0x3c0>)
   2b6d8:	f00c ff01 	bl	384de <log_1>
		err = -errno;
   2b6dc:	f00d fdf3 	bl	392c6 <__errno>
   2b6e0:	6803      	ldr	r3, [r0, #0]
   2b6e2:	425f      	negs	r7, r3
	if (err) {
   2b6e4:	2b00      	cmp	r3, #0
   2b6e6:	f47f af51 	bne.w	2b58c <download_client_connect+0x240>
   2b6ea:	e7bb      	b.n	2b664 <download_client_connect+0x318>
			return -EPROTONOSUPPORT;
   2b6ec:	f06f 077a 	mvn.w	r7, #122	; 0x7a
   2b6f0:	e6d4      	b.n	2b49c <download_client_connect+0x150>
	switch (sa->sa_family) {
   2b6f2:	f06f 0769 	mvn.w	r7, #105	; 0x69
   2b6f6:	e6d1      	b.n	2b49c <download_client_connect+0x150>
		return -EINVAL;
   2b6f8:	f06f 0515 	mvn.w	r5, #21
   2b6fc:	e649      	b.n	2b392 <download_client_connect+0x46>
		return 0;
   2b6fe:	2500      	movs	r5, #0
   2b700:	e647      	b.n	2b392 <download_client_connect+0x46>
   2b702:	bf00      	nop
   2b704:	0003ffbc 	.word	0x0003ffbc
   2b708:	0003ffdf 	.word	0x0003ffdf
   2b70c:	0003e40c 	.word	0x0003e40c

0002b710 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   2b710:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   2b712:	4604      	mov	r4, r0
   2b714:	b1e0      	cbz	r0, 2b750 <download_client_disconnect+0x40>
   2b716:	6800      	ldr	r0, [r0, #0]
   2b718:	2800      	cmp	r0, #0
   2b71a:	db19      	blt.n	2b750 <download_client_disconnect+0x40>
	return z_impl_zsock_close(sock);
   2b71c:	f00d fad3 	bl	38cc6 <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   2b720:	b190      	cbz	r0, 2b748 <download_client_disconnect+0x38>
   2b722:	4a0d      	ldr	r2, [pc, #52]	; (2b758 <download_client_disconnect+0x48>)
   2b724:	4c0d      	ldr	r4, [pc, #52]	; (2b75c <download_client_disconnect+0x4c>)
   2b726:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Failed to close socket, errno %d", errno);
   2b728:	f00d fdcd 	bl	392c6 <__errno>
   2b72c:	08e4      	lsrs	r4, r4, #3
   2b72e:	01a4      	lsls	r4, r4, #6
   2b730:	f044 0401 	orr.w	r4, r4, #1
   2b734:	6801      	ldr	r1, [r0, #0]
   2b736:	4622      	mov	r2, r4
   2b738:	4809      	ldr	r0, [pc, #36]	; (2b760 <download_client_disconnect+0x50>)
   2b73a:	f00c fed0 	bl	384de <log_1>
		return -errno;
   2b73e:	f00d fdc2 	bl	392c6 <__errno>
   2b742:	6800      	ldr	r0, [r0, #0]
   2b744:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   2b746:	bd10      	pop	{r4, pc}
	client->fd = -1;
   2b748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b74c:	6023      	str	r3, [r4, #0]
	return 0;
   2b74e:	e7fa      	b.n	2b746 <download_client_disconnect+0x36>
		return -EINVAL;
   2b750:	f06f 0015 	mvn.w	r0, #21
   2b754:	e7f7      	b.n	2b746 <download_client_disconnect+0x36>
   2b756:	bf00      	nop
   2b758:	0003c2cc 	.word	0x0003c2cc
   2b75c:	0003c31c 	.word	0x0003c31c
   2b760:	0004001e 	.word	0x0004001e

0002b764 <reconnect>:
{
   2b764:	b510      	push	{r4, lr}
   2b766:	4604      	mov	r4, r0
   2b768:	4b0b      	ldr	r3, [pc, #44]	; (2b798 <reconnect+0x34>)
   2b76a:	490c      	ldr	r1, [pc, #48]	; (2b79c <reconnect+0x38>)
	LOG_INF("Reconnecting..");
   2b76c:	480c      	ldr	r0, [pc, #48]	; (2b7a0 <reconnect+0x3c>)
   2b76e:	1ac9      	subs	r1, r1, r3
   2b770:	08c9      	lsrs	r1, r1, #3
   2b772:	0189      	lsls	r1, r1, #6
   2b774:	f041 0103 	orr.w	r1, r1, #3
   2b778:	f00c fea2 	bl	384c0 <log_0>
	err = download_client_disconnect(dl);
   2b77c:	4620      	mov	r0, r4
   2b77e:	f7ff ffc7 	bl	2b710 <download_client_disconnect>
	if (err) {
   2b782:	b940      	cbnz	r0, 2b796 <reconnect+0x32>
	err = download_client_connect(dl, dl->host, &dl->config);
   2b784:	4620      	mov	r0, r4
   2b786:	f8d4 1810 	ldr.w	r1, [r4, #2064]	; 0x810
   2b78a:	f604 0218 	addw	r2, r4, #2072	; 0x818
}
   2b78e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   2b792:	f7ff bddb 	b.w	2b34c <download_client_connect>
}
   2b796:	bd10      	pop	{r4, pc}
   2b798:	0003c2cc 	.word	0x0003c2cc
   2b79c:	0003c31c 	.word	0x0003c31c
   2b7a0:	0004003f 	.word	0x0004003f

0002b7a4 <download_thread>:
{
   2b7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b7a8:	4605      	mov	r5, r0
	int rc = 0;
   2b7aa:	2400      	movs	r4, #0
   2b7ac:	4e72      	ldr	r6, [pc, #456]	; (2b978 <download_thread+0x1d4>)
   2b7ae:	4b73      	ldr	r3, [pc, #460]	; (2b97c <download_thread+0x1d8>)
				rc = error_evt_send(dl, ECONNRESET);
   2b7b0:	f500 57c8 	add.w	r7, r0, #6400	; 0x1900
   2b7b4:	1af6      	subs	r6, r6, r3
{
   2b7b6:	b086      	sub	sp, #24
   2b7b8:	08f6      	lsrs	r6, r6, #3
				rc = error_evt_send(dl, ECONNRESET);
   2b7ba:	3708      	adds	r7, #8
	k_thread_suspend(dl->tid);
   2b7bc:	f8d5 0838 	ldr.w	r0, [r5, #2104]	; 0x838
	z_impl_k_thread_suspend(thread);
   2b7c0:	f00a fba0 	bl	35f04 <z_impl_k_thread_suspend>
		if (sizeof(dl->buf) - dl->offset == 0) {
   2b7c4:	f8d5 1804 	ldr.w	r1, [r5, #2052]	; 0x804
   2b7c8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   2b7cc:	d10a      	bne.n	2b7e4 <download_thread+0x40>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   2b7ce:	01b2      	lsls	r2, r6, #6
   2b7d0:	486b      	ldr	r0, [pc, #428]	; (2b980 <download_thread+0x1dc>)
   2b7d2:	f042 0201 	orr.w	r2, r2, #1
   2b7d6:	f00c fe82 	bl	384de <log_1>
			error_evt_send(dl, E2BIG);
   2b7da:	2107      	movs	r1, #7
				error_evt_send(dl, EHOSTDOWN);
   2b7dc:	6838      	ldr	r0, [r7, #0]
   2b7de:	f00f f85a 	bl	3a896 <error_evt_send.isra.0>
				break;
   2b7e2:	e7eb      	b.n	2b7bc <download_thread+0x18>
		len = recv(dl->fd, dl->buf + dl->offset,
   2b7e4:	46a9      	mov	r9, r5
   2b7e6:	f859 0b04 	ldr.w	r0, [r9], #4
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2b7ea:	f04f 0a00 	mov.w	sl, #0
   2b7ee:	f5c1 6200 	rsb	r2, r1, #2048	; 0x800
   2b7f2:	4653      	mov	r3, sl
   2b7f4:	e9cd aa00 	strd	sl, sl, [sp]
   2b7f8:	4449      	add	r1, r9
   2b7fa:	f00d faee 	bl	38dda <z_impl_zsock_recvfrom>
		if ((len == 0) || (len == -1)) {
   2b7fe:	1e43      	subs	r3, r0, #1
   2b800:	3303      	adds	r3, #3
   2b802:	4680      	mov	r8, r0
   2b804:	d93d      	bls.n	2b882 <download_thread+0xde>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   2b806:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   2b80a:	b193      	cbz	r3, 2b832 <download_thread+0x8e>
   2b80c:	f895 2828 	ldrb.w	r2, [r5, #2088]	; 0x828
   2b810:	b17a      	cbz	r2, 2b832 <download_thread+0x8e>
	const struct download_client_evt evt = {
   2b812:	e9cd 9304 	strd	r9, r3, [sp, #16]
   2b816:	f88d a00c 	strb.w	sl, [sp, #12]
	return client->callback(&evt);
   2b81a:	683b      	ldr	r3, [r7, #0]
   2b81c:	a803      	add	r0, sp, #12
   2b81e:	4798      	blx	r3
				if (rc) {
   2b820:	4604      	mov	r4, r0
   2b822:	b130      	cbz	r0, 2b832 <download_thread+0x8e>
					LOG_INF("Fragment refused, download stopped.");
   2b824:	01b1      	lsls	r1, r6, #6
   2b826:	f041 0103 	orr.w	r1, r1, #3
			LOG_INF("Fragment refused, download stopped.");
   2b82a:	4856      	ldr	r0, [pc, #344]	; (2b984 <download_thread+0x1e0>)
   2b82c:	f00c fe48 	bl	384c0 <log_0>
   2b830:	e7c4      	b.n	2b7bc <download_thread+0x18>
			if (len == -1) {
   2b832:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2b836:	d11d      	bne.n	2b874 <download_thread+0xd0>
				if (errno == ETIMEDOUT) {
   2b838:	f00d fd45 	bl	392c6 <__errno>
   2b83c:	6803      	ldr	r3, [r0, #0]
   2b83e:	2b74      	cmp	r3, #116	; 0x74
   2b840:	d07d      	beq.n	2b93e <download_thread+0x19a>
				LOG_ERR("Error in recv(), errno %d", errno);
   2b842:	f00d fd40 	bl	392c6 <__errno>
   2b846:	01b4      	lsls	r4, r6, #6
   2b848:	f044 0401 	orr.w	r4, r4, #1
   2b84c:	6801      	ldr	r1, [r0, #0]
   2b84e:	4622      	mov	r2, r4
   2b850:	484d      	ldr	r0, [pc, #308]	; (2b988 <download_thread+0x1e4>)
   2b852:	f00c fe44 	bl	384de <log_1>
			rc = error_evt_send(dl, ECONNRESET);
   2b856:	2168      	movs	r1, #104	; 0x68
   2b858:	6838      	ldr	r0, [r7, #0]
   2b85a:	f00f f81c 	bl	3a896 <error_evt_send.isra.0>
			if (rc) {
   2b85e:	4604      	mov	r4, r0
   2b860:	2800      	cmp	r0, #0
   2b862:	d1ab      	bne.n	2b7bc <download_thread+0x18>
			rc = reconnect(dl);
   2b864:	4628      	mov	r0, r5
   2b866:	f7ff ff7d 	bl	2b764 <reconnect>
			if (rc) {
   2b86a:	4604      	mov	r4, r0
   2b86c:	2800      	cmp	r0, #0
   2b86e:	d066      	beq.n	2b93e <download_thread+0x19a>
				error_evt_send(dl, EHOSTDOWN);
   2b870:	2175      	movs	r1, #117	; 0x75
   2b872:	e7b3      	b.n	2b7dc <download_thread+0x38>
				LOG_WRN("Peer closed connection!");
   2b874:	01b1      	lsls	r1, r6, #6
   2b876:	4845      	ldr	r0, [pc, #276]	; (2b98c <download_thread+0x1e8>)
   2b878:	f041 0102 	orr.w	r1, r1, #2
   2b87c:	f00c fe20 	bl	384c0 <log_0>
   2b880:	e7e9      	b.n	2b856 <download_thread+0xb2>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   2b882:	f8d5 3824 	ldr.w	r3, [r5, #2084]	; 0x824
   2b886:	2b06      	cmp	r3, #6
   2b888:	d002      	beq.n	2b890 <download_thread+0xec>
   2b88a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2b88e:	d105      	bne.n	2b89c <download_thread+0xf8>
			rc = http_parse(client, len);
   2b890:	4641      	mov	r1, r8
   2b892:	4628      	mov	r0, r5
   2b894:	f000 f9d4 	bl	2bc40 <http_parse>
			if (rc > 0) {
   2b898:	1e04      	subs	r4, r0, #0
   2b89a:	dc93      	bgt.n	2b7c4 <download_thread+0x20>
		if (rc < 0) {
   2b89c:	f505 58c8 	add.w	r8, r5, #6400	; 0x1900
   2b8a0:	2c00      	cmp	r4, #0
   2b8a2:	f108 0808 	add.w	r8, r8, #8
   2b8a6:	da03      	bge.n	2b8b0 <download_thread+0x10c>
			error_evt_send(dl, EBADMSG);
   2b8a8:	214d      	movs	r1, #77	; 0x4d
   2b8aa:	f8d8 0000 	ldr.w	r0, [r8]
   2b8ae:	e796      	b.n	2b7de <download_thread+0x3a>
		if (dl->file_size) {
   2b8b0:	f8d5 2808 	ldr.w	r2, [r5, #2056]	; 0x808
   2b8b4:	f8d5 180c 	ldr.w	r1, [r5, #2060]	; 0x80c
   2b8b8:	ea4f 1a86 	mov.w	sl, r6, lsl #6
   2b8bc:	b1da      	cbz	r2, 2b8f6 <download_thread+0x152>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   2b8be:	2364      	movs	r3, #100	; 0x64
   2b8c0:	434b      	muls	r3, r1
   2b8c2:	f04a 0003 	orr.w	r0, sl, #3
   2b8c6:	f8ad 0000 	strh.w	r0, [sp]
   2b8ca:	fbb3 f3f2 	udiv	r3, r3, r2
   2b8ce:	4830      	ldr	r0, [pc, #192]	; (2b990 <download_thread+0x1ec>)
   2b8d0:	f00c fe35 	bl	3853e <log_3>
	const struct download_client_evt evt = {
   2b8d4:	2300      	movs	r3, #0
   2b8d6:	f88d 300c 	strb.w	r3, [sp, #12]
   2b8da:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   2b8de:	f8cd 9010 	str.w	r9, [sp, #16]
   2b8e2:	9305      	str	r3, [sp, #20]
	return client->callback(&evt);
   2b8e4:	a803      	add	r0, sp, #12
   2b8e6:	f8d8 3000 	ldr.w	r3, [r8]
   2b8ea:	4798      	blx	r3
		if (rc) {
   2b8ec:	4604      	mov	r4, r0
   2b8ee:	b140      	cbz	r0, 2b902 <download_thread+0x15e>
			LOG_INF("Fragment refused, download stopped.");
   2b8f0:	f04a 0103 	orr.w	r1, sl, #3
   2b8f4:	e799      	b.n	2b82a <download_thread+0x86>
			LOG_INF("Downloaded %u bytes", dl->progress);
   2b8f6:	4827      	ldr	r0, [pc, #156]	; (2b994 <download_thread+0x1f0>)
   2b8f8:	f04a 0203 	orr.w	r2, sl, #3
   2b8fc:	f00c fdef 	bl	384de <log_1>
   2b900:	e7e8      	b.n	2b8d4 <download_thread+0x130>
		if (dl->progress == dl->file_size) {
   2b902:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   2b906:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   2b90a:	429a      	cmp	r2, r3
   2b90c:	d10f      	bne.n	2b92e <download_thread+0x18a>
			LOG_INF("Download complete");
   2b90e:	4822      	ldr	r0, [pc, #136]	; (2b998 <download_thread+0x1f4>)
   2b910:	f04a 0103 	orr.w	r1, sl, #3
   2b914:	f00c fdd4 	bl	384c0 <log_0>
			const struct download_client_evt evt = {
   2b918:	2302      	movs	r3, #2
   2b91a:	e9cd 4403 	strd	r4, r4, [sp, #12]
   2b91e:	9405      	str	r4, [sp, #20]
   2b920:	f88d 300c 	strb.w	r3, [sp, #12]
			dl->callback(&evt);
   2b924:	a803      	add	r0, sp, #12
   2b926:	f8d8 3000 	ldr.w	r3, [r8]
   2b92a:	4798      	blx	r3
			break;
   2b92c:	e746      	b.n	2b7bc <download_thread+0x18>
		if (dl->http.connection_close) {
   2b92e:	f895 3829 	ldrb.w	r3, [r5, #2089]	; 0x829
   2b932:	b123      	cbz	r3, 2b93e <download_thread+0x19a>
			dl->http.connection_close = false;
   2b934:	f885 0829 	strb.w	r0, [r5, #2089]	; 0x829
			reconnect(dl);
   2b938:	4628      	mov	r0, r5
   2b93a:	f7ff ff13 	bl	2b764 <reconnect>
		dl->offset = 0;
   2b93e:	f04f 0800 	mov.w	r8, #0
			rc = request_send(dl);
   2b942:	4628      	mov	r0, r5
		dl->offset = 0;
   2b944:	f8c5 8804 	str.w	r8, [r5, #2052]	; 0x804
			dl->http.has_header = false;
   2b948:	f885 8828 	strb.w	r8, [r5, #2088]	; 0x828
			rc = request_send(dl);
   2b94c:	f00e ff98 	bl	3a880 <request_send>
			if (rc) {
   2b950:	4604      	mov	r4, r0
   2b952:	2800      	cmp	r0, #0
   2b954:	f43f af36 	beq.w	2b7c4 <download_thread+0x20>
				rc = error_evt_send(dl, ECONNRESET);
   2b958:	2168      	movs	r1, #104	; 0x68
   2b95a:	6838      	ldr	r0, [r7, #0]
   2b95c:	f00e ff9b 	bl	3a896 <error_evt_send.isra.0>
				if (rc) {
   2b960:	4604      	mov	r4, r0
   2b962:	2800      	cmp	r0, #0
   2b964:	f47f af2a 	bne.w	2b7bc <download_thread+0x18>
				rc = reconnect(dl);
   2b968:	4628      	mov	r0, r5
   2b96a:	f7ff fefb 	bl	2b764 <reconnect>
				if (rc) {
   2b96e:	4604      	mov	r4, r0
   2b970:	2800      	cmp	r0, #0
   2b972:	d0e6      	beq.n	2b942 <download_thread+0x19e>
   2b974:	e77c      	b.n	2b870 <download_thread+0xcc>
   2b976:	bf00      	nop
   2b978:	0003c31c 	.word	0x0003c31c
   2b97c:	0003c2cc 	.word	0x0003c2cc
   2b980:	0004004e 	.word	0x0004004e
   2b984:	0004007b 	.word	0x0004007b
   2b988:	0004009f 	.word	0x0004009f
   2b98c:	000400b9 	.word	0x000400b9
   2b990:	000400d1 	.word	0x000400d1
   2b994:	000400ef 	.word	0x000400ef
   2b998:	00040103 	.word	0x00040103

0002b99c <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   2b99c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL) {
   2b99e:	4604      	mov	r4, r0
   2b9a0:	b348      	cbz	r0, 2b9f6 <download_client_start+0x5a>
		return -EINVAL;
	}

	if (client->fd < 0) {
   2b9a2:	6803      	ldr	r3, [r0, #0]
   2b9a4:	2b00      	cmp	r3, #0
   2b9a6:	db29      	blt.n	2b9fc <download_client_start+0x60>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   2b9a8:	2300      	movs	r3, #0
	client->file = file;
   2b9aa:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
	client->file_size = 0;
   2b9ae:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
	client->progress = from;
   2b9b2:	f8c0 280c 	str.w	r2, [r0, #2060]	; 0x80c

	client->offset = 0;
   2b9b6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
	client->http.has_header = false;
   2b9ba:	f880 3828 	strb.w	r3, [r0, #2088]	; 0x828
		if (err) {
			return err;
		}
	}

	err = request_send(client);
   2b9be:	f00e ff5f 	bl	3a880 <request_send>
	if (err) {
   2b9c2:	4606      	mov	r6, r0
   2b9c4:	b9a8      	cbnz	r0, 2b9f2 <download_client_start+0x56>
   2b9c6:	4b0f      	ldr	r3, [pc, #60]	; (2ba04 <download_client_start+0x68>)
   2b9c8:	4d0f      	ldr	r5, [pc, #60]	; (2ba08 <download_client_start+0x6c>)
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   2b9ca:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   2b9ce:	1aed      	subs	r5, r5, r3
   2b9d0:	f7f8 fd24 	bl	2441c <log_strdup>
   2b9d4:	08ed      	lsrs	r5, r5, #3
   2b9d6:	01ad      	lsls	r5, r5, #6
   2b9d8:	f045 0503 	orr.w	r5, r5, #3
   2b9dc:	4601      	mov	r1, r0
   2b9de:	462b      	mov	r3, r5
   2b9e0:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   2b9e4:	4809      	ldr	r0, [pc, #36]	; (2ba0c <download_client_start+0x70>)
   2b9e6:	f00c fd91 	bl	3850c <log_2>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   2b9ea:	f8d4 0838 	ldr.w	r0, [r4, #2104]	; 0x838
	z_impl_k_thread_resume(thread);
   2b9ee:	f00a f9ef 	bl	35dd0 <z_impl_k_thread_resume>

	return 0;
}
   2b9f2:	4630      	mov	r0, r6
   2b9f4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2b9f6:	f06f 0615 	mvn.w	r6, #21
   2b9fa:	e7fa      	b.n	2b9f2 <download_client_start+0x56>
		return -ENOTCONN;
   2b9fc:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   2ba00:	e7f7      	b.n	2b9f2 <download_client_start+0x56>
   2ba02:	bf00      	nop
   2ba04:	0003c2cc 	.word	0x0003c2cc
   2ba08:	0003c31c 	.word	0x0003c31c
   2ba0c:	00040115 	.word	0x00040115

0002ba10 <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   2ba10:	b570      	push	{r4, r5, r6, lr}
   2ba12:	460d      	mov	r5, r1
   2ba14:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   2ba16:	4915      	ldr	r1, [pc, #84]	; (2ba6c <url_parse_proto+0x5c>)
   2ba18:	2205      	movs	r2, #5
{
   2ba1a:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   2ba1c:	f00f fe30 	bl	3b680 <strncmp>
   2ba20:	b928      	cbnz	r0, 2ba2e <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   2ba22:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   2ba26:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   2ba28:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   2ba2a:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   2ba2c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   2ba2e:	2204      	movs	r2, #4
   2ba30:	4630      	mov	r0, r6
   2ba32:	490f      	ldr	r1, [pc, #60]	; (2ba70 <url_parse_proto+0x60>)
   2ba34:	f00f fe24 	bl	3b680 <strncmp>
   2ba38:	b908      	cbnz	r0, 2ba3e <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   2ba3a:	2306      	movs	r3, #6
   2ba3c:	e7f3      	b.n	2ba26 <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   2ba3e:	2205      	movs	r2, #5
   2ba40:	4630      	mov	r0, r6
   2ba42:	490c      	ldr	r1, [pc, #48]	; (2ba74 <url_parse_proto+0x64>)
   2ba44:	f00f fe1c 	bl	3b680 <strncmp>
   2ba48:	b920      	cbnz	r0, 2ba54 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   2ba4a:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   2ba4e:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   2ba50:	2302      	movs	r3, #2
   2ba52:	e7ea      	b.n	2ba2a <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   2ba54:	2204      	movs	r2, #4
   2ba56:	4630      	mov	r0, r6
   2ba58:	4907      	ldr	r1, [pc, #28]	; (2ba78 <url_parse_proto+0x68>)
   2ba5a:	f00f fe11 	bl	3b680 <strncmp>
   2ba5e:	b908      	cbnz	r0, 2ba64 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   2ba60:	2311      	movs	r3, #17
   2ba62:	e7f4      	b.n	2ba4e <url_parse_proto+0x3e>
		return -EINVAL;
   2ba64:	f06f 0015 	mvn.w	r0, #21
   2ba68:	e7e0      	b.n	2ba2c <url_parse_proto+0x1c>
   2ba6a:	bf00      	nop
   2ba6c:	0003e10e 	.word	0x0003e10e
   2ba70:	0003e135 	.word	0x0003e135
   2ba74:	0004013a 	.word	0x0004013a
   2ba78:	00040140 	.word	0x00040140

0002ba7c <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   2ba7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ba7e:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   2ba80:	9001      	str	r0, [sp, #4]
{
   2ba82:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   2ba84:	a801      	add	r0, sp, #4
   2ba86:	4911      	ldr	r1, [pc, #68]	; (2bacc <url_parse_host+0x50>)
{
   2ba88:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   2ba8a:	f00e ff3d 	bl	3a908 <swallow>

	end = strchr(cur, ':');
   2ba8e:	213a      	movs	r1, #58	; 0x3a
   2ba90:	9801      	ldr	r0, [sp, #4]
   2ba92:	f00f fde0 	bl	3b656 <strchr>
	if (!end) {
   2ba96:	b948      	cbnz	r0, 2baac <url_parse_host+0x30>
		end = strchr(cur, '/');
   2ba98:	212f      	movs	r1, #47	; 0x2f
   2ba9a:	9801      	ldr	r0, [sp, #4]
   2ba9c:	f00f fddb 	bl	3b656 <strchr>
		if (!end) {
   2baa0:	b920      	cbnz	r0, 2baac <url_parse_host+0x30>
			end = url + strlen(url) + 1;
   2baa2:	4620      	mov	r0, r4
   2baa4:	f7f1 fae4 	bl	1d070 <strlen>
   2baa8:	1c43      	adds	r3, r0, #1
   2baaa:	18e0      	adds	r0, r4, r3
		}
	}

	if (end - cur + 1 > len) {
   2baac:	9901      	ldr	r1, [sp, #4]
   2baae:	1a44      	subs	r4, r0, r1
   2bab0:	1c63      	adds	r3, r4, #1
   2bab2:	42b3      	cmp	r3, r6
   2bab4:	d807      	bhi.n	2bac6 <url_parse_host+0x4a>
   2bab6:	4622      	mov	r2, r4
   2bab8:	4628      	mov	r0, r5
   2baba:	f00f fc7a 	bl	3b3b2 <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   2babe:	2000      	movs	r0, #0
   2bac0:	5528      	strb	r0, [r5, r4]

	return 0;
}
   2bac2:	b002      	add	sp, #8
   2bac4:	bd70      	pop	{r4, r5, r6, pc}
		return -E2BIG;
   2bac6:	f06f 0006 	mvn.w	r0, #6
   2baca:	e7fa      	b.n	2bac2 <url_parse_host+0x46>
   2bacc:	00040145 	.word	0x00040145

0002bad0 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   2bad0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2bad2:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   2bad4:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   2bad6:	4917      	ldr	r1, [pc, #92]	; (2bb34 <url_parse_port+0x64>)
   2bad8:	a801      	add	r0, sp, #4
   2bada:	f00e ff15 	bl	3a908 <swallow>

	err = swallow(&cur, ":");
   2bade:	4916      	ldr	r1, [pc, #88]	; (2bb38 <url_parse_port+0x68>)
   2bae0:	a801      	add	r0, sp, #4
   2bae2:	f00e ff11 	bl	3a908 <swallow>
	if (err) {
   2bae6:	4605      	mov	r5, r0
   2bae8:	bb08      	cbnz	r0, 2bb2e <url_parse_port+0x5e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   2baea:	212f      	movs	r1, #47	; 0x2f
   2baec:	9801      	ldr	r0, [sp, #4]
   2baee:	f00f fdb2 	bl	3b656 <strchr>
	if (!end) {
   2baf2:	4604      	mov	r4, r0
		len = strlen(cur);
   2baf4:	9801      	ldr	r0, [sp, #4]
	if (!end) {
   2baf6:	b9c4      	cbnz	r4, 2bb2a <url_parse_port+0x5a>
		len = strlen(cur);
   2baf8:	f7f1 faba 	bl	1d070 <strlen>
   2bafc:	4604      	mov	r4, r0
	} else {
		len = end - cur;
	}

	len = MAX(len, sizeof(aport) - 1);
   2bafe:	2c07      	cmp	r4, #7
   2bb00:	bf38      	it	cc
   2bb02:	2407      	movcc	r4, #7

	memcpy(aport, cur, len);
   2bb04:	2308      	movs	r3, #8
   2bb06:	4622      	mov	r2, r4
   2bb08:	9901      	ldr	r1, [sp, #4]
   2bb0a:	eb0d 0003 	add.w	r0, sp, r3
   2bb0e:	f00f fc5d 	bl	3b3cc <__memcpy_chk>
	aport[len] = '\0';
   2bb12:	ab04      	add	r3, sp, #16
   2bb14:	441c      	add	r4, r3
   2bb16:	2300      	movs	r3, #0

	*port = atoi(aport);
   2bb18:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   2bb1a:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   2bb1e:	f00f fc28 	bl	3b372 <atoi>
   2bb22:	8030      	strh	r0, [r6, #0]

	return 0;
}
   2bb24:	4628      	mov	r0, r5
   2bb26:	b004      	add	sp, #16
   2bb28:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   2bb2a:	1a24      	subs	r4, r4, r0
   2bb2c:	e7e7      	b.n	2bafe <url_parse_port+0x2e>
		return -EINVAL;
   2bb2e:	f06f 0515 	mvn.w	r5, #21
   2bb32:	e7f7      	b.n	2bb24 <url_parse_port+0x54>
   2bb34:	00040145 	.word	0x00040145
   2bb38:	0003faf1 	.word	0x0003faf1

0002bb3c <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   2bb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bb3e:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   2bb40:	4915      	ldr	r1, [pc, #84]	; (2bb98 <url_parse_file+0x5c>)
{
   2bb42:	4614      	mov	r4, r2
	cur = url;
   2bb44:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   2bb46:	f00f fde7 	bl	3b718 <strstr>
   2bb4a:	b940      	cbnz	r0, 2bb5e <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   2bb4c:	9801      	ldr	r0, [sp, #4]
   2bb4e:	f7f1 fa8f 	bl	1d070 <strlen>
   2bb52:	3001      	adds	r0, #1
   2bb54:	42a0      	cmp	r0, r4
   2bb56:	d912      	bls.n	2bb7e <url_parse_file+0x42>
		return -E2BIG;
   2bb58:	f06f 0006 	mvn.w	r0, #6
   2bb5c:	e006      	b.n	2bb6c <url_parse_file+0x30>
		err = swallow(&cur, "://");
   2bb5e:	490f      	ldr	r1, [pc, #60]	; (2bb9c <url_parse_file+0x60>)
   2bb60:	a801      	add	r0, sp, #4
   2bb62:	f00e fed1 	bl	3a908 <swallow>
		if (err) {
   2bb66:	b118      	cbz	r0, 2bb70 <url_parse_file+0x34>
			return -EINVAL;
   2bb68:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   2bb6c:	b003      	add	sp, #12
   2bb6e:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   2bb70:	490b      	ldr	r1, [pc, #44]	; (2bba0 <url_parse_file+0x64>)
   2bb72:	a801      	add	r0, sp, #4
   2bb74:	f00e fec8 	bl	3a908 <swallow>
		if (err) {
   2bb78:	2800      	cmp	r0, #0
   2bb7a:	d0e7      	beq.n	2bb4c <url_parse_file+0x10>
   2bb7c:	e7f4      	b.n	2bb68 <url_parse_file+0x2c>
	len = strlen(cur);
   2bb7e:	9801      	ldr	r0, [sp, #4]
   2bb80:	f7f1 fa76 	bl	1d070 <strlen>
   2bb84:	9901      	ldr	r1, [sp, #4]
   2bb86:	4604      	mov	r4, r0
   2bb88:	4602      	mov	r2, r0
   2bb8a:	4628      	mov	r0, r5
   2bb8c:	f00f fc11 	bl	3b3b2 <memcpy>
	file[len] = '\0';
   2bb90:	2300      	movs	r3, #0
	return 0;
   2bb92:	4618      	mov	r0, r3
	file[len] = '\0';
   2bb94:	552b      	strb	r3, [r5, r4]
	return 0;
   2bb96:	e7e9      	b.n	2bb6c <url_parse_file+0x30>
   2bb98:	00040146 	.word	0x00040146
   2bb9c:	00040145 	.word	0x00040145
   2bba0:	00040147 	.word	0x00040147

0002bba4 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len);

int http_get_request_send(struct download_client *client)
{
   2bba4:	b570      	push	{r4, r5, r6, lr}
   2bba6:	b0c4      	sub	sp, #272	; 0x110
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
	__ASSERT_NO_MSG(client->file);

	err = url_parse_host(client->host, host, sizeof(host));
   2bba8:	ae04      	add	r6, sp, #16
{
   2bbaa:	4605      	mov	r5, r0
	err = url_parse_host(client->host, host, sizeof(host));
   2bbac:	2240      	movs	r2, #64	; 0x40
   2bbae:	4631      	mov	r1, r6
   2bbb0:	f8d0 0810 	ldr.w	r0, [r0, #2064]	; 0x810
   2bbb4:	f7ff ff62 	bl	2ba7c <url_parse_host>
	if (err) {
   2bbb8:	4604      	mov	r4, r0
   2bbba:	bb90      	cbnz	r0, 2bc22 <http_get_request_send+0x7e>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   2bbbc:	22c0      	movs	r2, #192	; 0xc0
   2bbbe:	f8d5 0814 	ldr.w	r0, [r5, #2068]	; 0x814
   2bbc2:	a914      	add	r1, sp, #80	; 0x50
   2bbc4:	f7ff ffba 	bl	2bb3c <url_parse_file>
	if (err) {
   2bbc8:	4604      	mov	r4, r0
   2bbca:	bb50      	cbnz	r0, 2bc22 <http_get_request_send+0x7e>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   2bbcc:	f8d5 3820 	ldr.w	r3, [r5, #2080]	; 0x820
   2bbd0:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   2bbd4:	b343      	cbz	r3, 2bc28 <http_get_request_send+0x84>
		off = client->progress + client->config.frag_size_override - 1;
   2bbd6:	4413      	add	r3, r2
   2bbd8:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   2bbda:	f8d5 1808 	ldr.w	r1, [r5, #2056]	; 0x808
   2bbde:	b111      	cbz	r1, 2bbe6 <http_get_request_send+0x42>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size);
   2bbe0:	428b      	cmp	r3, r1
   2bbe2:	bf28      	it	cs
   2bbe4:	460b      	movcs	r3, r1
	 * When using HTTP, we request the whole resource to minimize
	 * network usage (only one request/response are sent).
	 */
	if (client->proto == IPPROTO_TLS_1_2
	   || IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS)) {
		len = snprintf(client->buf,
   2bbe6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2bbea:	f44f 6100 	mov.w	r1, #2048	; 0x800
   2bbee:	4a10      	ldr	r2, [pc, #64]	; (2bc30 <http_get_request_send+0x8c>)
   2bbf0:	ab14      	add	r3, sp, #80	; 0x50
   2bbf2:	9600      	str	r6, [sp, #0]
   2bbf4:	1d28      	adds	r0, r5, #4
   2bbf6:	f00b fb17 	bl	37228 <sniprintf>
   2bbfa:	4601      	mov	r1, r0

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len);
   2bbfc:	4628      	mov	r0, r5
   2bbfe:	f00e fe59 	bl	3a8b4 <socket_send>
	if (err) {
   2bc02:	4604      	mov	r4, r0
   2bc04:	b168      	cbz	r0, 2bc22 <http_get_request_send+0x7e>
   2bc06:	4a0b      	ldr	r2, [pc, #44]	; (2bc34 <http_get_request_send+0x90>)
   2bc08:	4d0b      	ldr	r5, [pc, #44]	; (2bc38 <http_get_request_send+0x94>)
   2bc0a:	1aad      	subs	r5, r5, r2
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   2bc0c:	f00d fb5b 	bl	392c6 <__errno>
   2bc10:	08ed      	lsrs	r5, r5, #3
   2bc12:	01ad      	lsls	r5, r5, #6
   2bc14:	f045 0501 	orr.w	r5, r5, #1
   2bc18:	6801      	ldr	r1, [r0, #0]
   2bc1a:	462a      	mov	r2, r5
   2bc1c:	4807      	ldr	r0, [pc, #28]	; (2bc3c <http_get_request_send+0x98>)
   2bc1e:	f00c fc5e 	bl	384de <log_1>
		return err;
	}

	return 0;
}
   2bc22:	4620      	mov	r0, r4
   2bc24:	b044      	add	sp, #272	; 0x110
   2bc26:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   2bc28:	f202 73ff 	addw	r3, r2, #2047	; 0x7ff
   2bc2c:	e7d5      	b.n	2bbda <http_get_request_send+0x36>
   2bc2e:	bf00      	nop
   2bc30:	00040149 	.word	0x00040149
   2bc34:	0003c2cc 	.word	0x0003c2cc
   2bc38:	0003c31c 	.word	0x0003c31c
   2bc3c:	00040194 	.word	0x00040194

0002bc40 <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   2bc40:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   2bc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	client->offset += len;
   2bc48:	440b      	add	r3, r1
   2bc4a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

	if (!client->http.has_header) {
   2bc4e:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
{
   2bc52:	4604      	mov	r4, r0
   2bc54:	460f      	mov	r7, r1
	if (!client->http.has_header) {
   2bc56:	2b00      	cmp	r3, #0
   2bc58:	d17d      	bne.n	2bd56 <http_parse+0x116>
	p = strstr(client->buf, "\r\n\r\n");
   2bc5a:	1d06      	adds	r6, r0, #4
   2bc5c:	4630      	mov	r0, r6
   2bc5e:	494d      	ldr	r1, [pc, #308]	; (2bd94 <http_parse+0x154>)
   2bc60:	f00f fd5a 	bl	3b718 <strstr>
	if (!p) {
   2bc64:	4605      	mov	r5, r0
   2bc66:	2800      	cmp	r0, #0
   2bc68:	f000 8090 	beq.w	2bd8c <http_parse+0x14c>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   2bc6c:	4849      	ldr	r0, [pc, #292]	; (2bd94 <http_parse+0x154>)
   2bc6e:	f7f1 f9ff 	bl	1d070 <strlen>
   2bc72:	4405      	add	r5, r0
   2bc74:	4633      	mov	r3, r6
   2bc76:	4628      	mov	r0, r5
		client->buf[i] = tolower(client->buf[i]);
   2bc78:	f8df c144 	ldr.w	ip, [pc, #324]	; 2bdc0 <http_parse+0x180>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   2bc7c:	eba5 0806 	sub.w	r8, r5, r6
	for (size_t i = 0; i < *hdr_len; i++) {
   2bc80:	4298      	cmp	r0, r3
   2bc82:	d112      	bne.n	2bcaa <http_parse+0x6a>
	p = strstr(client->buf, "http/1.1 206");
   2bc84:	4630      	mov	r0, r6
   2bc86:	4944      	ldr	r1, [pc, #272]	; (2bd98 <http_parse+0x158>)
   2bc88:	f00f fd46 	bl	3b718 <strstr>
	if (!p) {
   2bc8c:	b9c0      	cbnz	r0, 2bcc0 <http_parse+0x80>
   2bc8e:	4943      	ldr	r1, [pc, #268]	; (2bd9c <http_parse+0x15c>)
   2bc90:	4b43      	ldr	r3, [pc, #268]	; (2bda0 <http_parse+0x160>)
			LOG_ERR("Server did not honor partial content request");
   2bc92:	4844      	ldr	r0, [pc, #272]	; (2bda4 <http_parse+0x164>)
   2bc94:	1ac9      	subs	r1, r1, r3
   2bc96:	08c9      	lsrs	r1, r1, #3
   2bc98:	0189      	lsls	r1, r1, #6
   2bc9a:	f041 0101 	orr.w	r1, r1, #1
				LOG_ERR("Server did not send "
   2bc9e:	f00c fc0f 	bl	384c0 <log_0>
			/* Wait for header */
			return 1;
		}
		if (rc < 0) {
			/* Something is wrong with the header */
			return -1;
   2bca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
}
   2bca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		client->buf[i] = tolower(client->buf[i]);
   2bcaa:	781a      	ldrb	r2, [r3, #0]
   2bcac:	f812 100c 	ldrb.w	r1, [r2, ip]
   2bcb0:	f001 0103 	and.w	r1, r1, #3
   2bcb4:	2901      	cmp	r1, #1
   2bcb6:	bf08      	it	eq
   2bcb8:	3220      	addeq	r2, #32
   2bcba:	f803 2b01 	strb.w	r2, [r3], #1
	for (size_t i = 0; i < *hdr_len; i++) {
   2bcbe:	e7df      	b.n	2bc80 <http_parse+0x40>
	if (client->file_size == 0) {
   2bcc0:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   2bcc4:	bb13      	cbnz	r3, 2bd0c <http_parse+0xcc>
			p = strstr(client->buf, "content-range");
   2bcc6:	4630      	mov	r0, r6
   2bcc8:	4937      	ldr	r1, [pc, #220]	; (2bda8 <http_parse+0x168>)
   2bcca:	f00f fd25 	bl	3b718 <strstr>
			if (!p) {
   2bcce:	b940      	cbnz	r0, 2bce2 <http_parse+0xa2>
   2bcd0:	4932      	ldr	r1, [pc, #200]	; (2bd9c <http_parse+0x15c>)
   2bcd2:	4b33      	ldr	r3, [pc, #204]	; (2bda0 <http_parse+0x160>)
				LOG_ERR("Server did not send "
   2bcd4:	4835      	ldr	r0, [pc, #212]	; (2bdac <http_parse+0x16c>)
   2bcd6:	1ac9      	subs	r1, r1, r3
   2bcd8:	08c9      	lsrs	r1, r1, #3
   2bcda:	0189      	lsls	r1, r1, #6
   2bcdc:	f041 0101 	orr.w	r1, r1, #1
   2bce0:	e7dd      	b.n	2bc9e <http_parse+0x5e>
			p = strstr(p, "/");
   2bce2:	4933      	ldr	r1, [pc, #204]	; (2bdb0 <http_parse+0x170>)
   2bce4:	f00f fd18 	bl	3b718 <strstr>
			if (!p) {
   2bce8:	b940      	cbnz	r0, 2bcfc <http_parse+0xbc>
   2bcea:	492c      	ldr	r1, [pc, #176]	; (2bd9c <http_parse+0x15c>)
   2bcec:	4b2c      	ldr	r3, [pc, #176]	; (2bda0 <http_parse+0x160>)
				LOG_ERR("No file size in response");
   2bcee:	4831      	ldr	r0, [pc, #196]	; (2bdb4 <http_parse+0x174>)
   2bcf0:	1ac9      	subs	r1, r1, r3
   2bcf2:	08c9      	lsrs	r1, r1, #3
   2bcf4:	0189      	lsls	r1, r1, #6
   2bcf6:	f041 0101 	orr.w	r1, r1, #1
   2bcfa:	e7d0      	b.n	2bc9e <http_parse+0x5e>
		client->file_size += atoi(p + 1);
   2bcfc:	3001      	adds	r0, #1
   2bcfe:	f00f fb38 	bl	3b372 <atoi>
   2bd02:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   2bd06:	4418      	add	r0, r3
   2bd08:	f8c4 0808 	str.w	r0, [r4, #2056]	; 0x808
	p = strstr(client->buf, "connection: close");
   2bd0c:	4630      	mov	r0, r6
   2bd0e:	492a      	ldr	r1, [pc, #168]	; (2bdb8 <http_parse+0x178>)
   2bd10:	f00f fd02 	bl	3b718 <strstr>
	if (p) {
   2bd14:	b160      	cbz	r0, 2bd30 <http_parse+0xf0>
   2bd16:	4922      	ldr	r1, [pc, #136]	; (2bda0 <http_parse+0x160>)
   2bd18:	4b20      	ldr	r3, [pc, #128]	; (2bd9c <http_parse+0x15c>)
		LOG_WRN("Peer closed connection, will re-connect");
   2bd1a:	4828      	ldr	r0, [pc, #160]	; (2bdbc <http_parse+0x17c>)
   2bd1c:	1a5b      	subs	r3, r3, r1
   2bd1e:	08db      	lsrs	r3, r3, #3
   2bd20:	019b      	lsls	r3, r3, #6
   2bd22:	f043 0102 	orr.w	r1, r3, #2
   2bd26:	f00c fbcb 	bl	384c0 <log_0>
		client->http.connection_close = true;
   2bd2a:	2301      	movs	r3, #1
   2bd2c:	f884 3829 	strb.w	r3, [r4, #2089]	; 0x829
	client->http.has_header = true;
   2bd30:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   2bd32:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
	client->http.has_header = true;
   2bd36:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
		if (client->offset != hdr_len) {
   2bd3a:	4542      	cmp	r2, r8
   2bd3c:	d024      	beq.n	2bd88 <http_parse+0x148>
   2bd3e:	4629      	mov	r1, r5
   2bd40:	4630      	mov	r0, r6
   2bd42:	eba2 0208 	sub.w	r2, r2, r8
   2bd46:	f00f fb34 	bl	3b3b2 <memcpy>
			client->offset -= hdr_len;
   2bd4a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   2bd4e:	eba3 0308 	sub.w	r3, r3, r8
			client->offset = 0;
   2bd52:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
	client->progress += MIN(client->offset, len);
   2bd56:	f8d4 180c 	ldr.w	r1, [r4, #2060]	; 0x80c
   2bd5a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
	if (client->progress != client->file_size &&
   2bd5e:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
	client->progress += MIN(client->offset, len);
   2bd62:	429f      	cmp	r7, r3
   2bd64:	bf94      	ite	ls
   2bd66:	19cf      	addls	r7, r1, r7
   2bd68:	18cf      	addhi	r7, r1, r3
	if (client->progress != client->file_size &&
   2bd6a:	4297      	cmp	r7, r2
	client->progress += MIN(client->offset, len);
   2bd6c:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
	if (client->progress != client->file_size &&
   2bd70:	d00e      	beq.n	2bd90 <http_parse+0x150>
	    client->offset < (client->config.frag_size_override != 0 ?
   2bd72:	f8d4 0820 	ldr.w	r0, [r4, #2080]	; 0x820
			      client->config.frag_size_override :
   2bd76:	2800      	cmp	r0, #0
   2bd78:	bf08      	it	eq
   2bd7a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
	if (client->progress != client->file_size &&
   2bd7e:	4298      	cmp	r0, r3
   2bd80:	bf94      	ite	ls
   2bd82:	2000      	movls	r0, #0
   2bd84:	2001      	movhi	r0, #1
   2bd86:	e78e      	b.n	2bca6 <http_parse+0x66>
			client->offset = 0;
   2bd88:	2300      	movs	r3, #0
   2bd8a:	e7e2      	b.n	2bd52 <http_parse+0x112>
			return 1;
   2bd8c:	2001      	movs	r0, #1
   2bd8e:	e78a      	b.n	2bca6 <http_parse+0x66>
	return 0;
   2bd90:	2000      	movs	r0, #0
   2bd92:	e788      	b.n	2bca6 <http_parse+0x66>
   2bd94:	0004018f 	.word	0x0004018f
   2bd98:	000401ba 	.word	0x000401ba
   2bd9c:	0003c31c 	.word	0x0003c31c
   2bda0:	0003c2cc 	.word	0x0003c2cc
   2bda4:	000401c7 	.word	0x000401c7
   2bda8:	000401f4 	.word	0x000401f4
   2bdac:	00040202 	.word	0x00040202
   2bdb0:	00040147 	.word	0x00040147
   2bdb4:	00040232 	.word	0x00040232
   2bdb8:	0004024b 	.word	0x0004024b
   2bdbc:	0004025d 	.word	0x0004025d
   2bdc0:	000409c7 	.word	0x000409c7

0002bdc4 <send_evt>:

static void send_evt(enum fota_download_evt_id id)
{
	__ASSERT(id != FOTA_DOWNLOAD_EVT_PROGRESS, "use send_progress");
	__ASSERT(id != FOTA_DOWNLOAD_EVT_ERROR, "use send_error_evt");
	const struct fota_download_evt evt = {
   2bdc4:	2300      	movs	r3, #0
{
   2bdc6:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   2bdc8:	e9cd 3300 	strd	r3, r3, [sp]
		.id = id
	};
	callback(&evt);
   2bdcc:	4b04      	ldr	r3, [pc, #16]	; (2bde0 <send_evt+0x1c>)
	const struct fota_download_evt evt = {
   2bdce:	f88d 0000 	strb.w	r0, [sp]
	callback(&evt);
   2bdd2:	681b      	ldr	r3, [r3, #0]
   2bdd4:	4668      	mov	r0, sp
   2bdd6:	4798      	blx	r3
}
   2bdd8:	b003      	add	sp, #12
   2bdda:	f85d fb04 	ldr.w	pc, [sp], #4
   2bdde:	bf00      	nop
   2bde0:	20023858 	.word	0x20023858

0002bde4 <send_error_evt>:

static void send_error_evt(enum fota_download_error_cause cause)
{
	__ASSERT(cause != FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR, "use a valid error cause");
	const struct fota_download_evt evt = {
   2bde4:	2300      	movs	r3, #0
{
   2bde6:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   2bde8:	e9cd 3300 	strd	r3, r3, [sp]
   2bdec:	2304      	movs	r3, #4
   2bdee:	f88d 3000 	strb.w	r3, [sp]
		.id = FOTA_DOWNLOAD_EVT_ERROR,
		.cause = cause
	};
	callback(&evt);
   2bdf2:	4b04      	ldr	r3, [pc, #16]	; (2be04 <send_error_evt+0x20>)
	const struct fota_download_evt evt = {
   2bdf4:	f88d 0004 	strb.w	r0, [sp, #4]
	callback(&evt);
   2bdf8:	681b      	ldr	r3, [r3, #0]
   2bdfa:	4668      	mov	r0, sp
   2bdfc:	4798      	blx	r3
}
   2bdfe:	b003      	add	sp, #12
   2be00:	f85d fb04 	ldr.w	pc, [sp], #4
   2be04:	20023858 	.word	0x20023858

0002be08 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   2be08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   2be0a:	a801      	add	r0, sp, #4
   2be0c:	f000 fa02 	bl	2c214 <dfu_target_offset_get>
	if (err != 0) {
   2be10:	4c18      	ldr	r4, [pc, #96]	; (2be74 <download_with_offset+0x6c>)
   2be12:	4b19      	ldr	r3, [pc, #100]	; (2be78 <download_with_offset+0x70>)
   2be14:	4602      	mov	r2, r0
   2be16:	1ae4      	subs	r4, r4, r3
   2be18:	08e4      	lsrs	r4, r4, #3
   2be1a:	01a4      	lsls	r4, r4, #6
   2be1c:	b138      	cbz	r0, 2be2e <download_with_offset+0x26>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   2be1e:	4917      	ldr	r1, [pc, #92]	; (2be7c <download_with_offset+0x74>)
   2be20:	4817      	ldr	r0, [pc, #92]	; (2be80 <download_with_offset+0x78>)
   2be22:	f044 0301 	orr.w	r3, r4, #1
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   2be26:	f00c fb71 	bl	3850c <log_2>
			err);
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	return;
}
   2be2a:	b003      	add	sp, #12
   2be2c:	bd30      	pop	{r4, r5, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   2be2e:	4d15      	ldr	r5, [pc, #84]	; (2be84 <download_with_offset+0x7c>)
   2be30:	f605 0218 	addw	r2, r5, #2072	; 0x818
   2be34:	4628      	mov	r0, r5
   2be36:	f8d5 1810 	ldr.w	r1, [r5, #2064]	; 0x810
   2be3a:	f7ff fa87 	bl	2b34c <download_client_connect>
	if (err != 0) {
   2be3e:	4602      	mov	r2, r0
   2be40:	b120      	cbz	r0, 2be4c <download_with_offset+0x44>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   2be42:	490e      	ldr	r1, [pc, #56]	; (2be7c <download_with_offset+0x74>)
   2be44:	4810      	ldr	r0, [pc, #64]	; (2be88 <download_with_offset+0x80>)
   2be46:	f044 0301 	orr.w	r3, r4, #1
   2be4a:	e7ec      	b.n	2be26 <download_with_offset+0x1e>
	err = download_client_start(&dlc, dlc.file, offset);
   2be4c:	9a01      	ldr	r2, [sp, #4]
   2be4e:	4628      	mov	r0, r5
   2be50:	f8d5 1814 	ldr.w	r1, [r5, #2068]	; 0x814
   2be54:	f7ff fda2 	bl	2b99c <download_client_start>
	if (err != 0) {
   2be58:	4602      	mov	r2, r0
   2be5a:	b120      	cbz	r0, 2be66 <download_with_offset+0x5e>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   2be5c:	4907      	ldr	r1, [pc, #28]	; (2be7c <download_with_offset+0x74>)
   2be5e:	480b      	ldr	r0, [pc, #44]	; (2be8c <download_with_offset+0x84>)
   2be60:	f044 0301 	orr.w	r3, r4, #1
   2be64:	e7df      	b.n	2be26 <download_with_offset+0x1e>
	LOG_INF("Downloading from offset: 0x%x", offset);
   2be66:	9901      	ldr	r1, [sp, #4]
   2be68:	4809      	ldr	r0, [pc, #36]	; (2be90 <download_with_offset+0x88>)
   2be6a:	f044 0203 	orr.w	r2, r4, #3
   2be6e:	f00c fb36 	bl	384de <log_1>
   2be72:	e7da      	b.n	2be2a <download_with_offset+0x22>
   2be74:	0003c33c 	.word	0x0003c33c
   2be78:	0003c2cc 	.word	0x0003c2cc
   2be7c:	0004044a 	.word	0x0004044a
   2be80:	00040285 	.word	0x00040285
   2be84:	20021878 	.word	0x20021878
   2be88:	000402ab 	.word	0x000402ab
   2be8c:	000402ce 	.word	0x000402ce
   2be90:	000402f9 	.word	0x000402f9

0002be94 <download_client_callback>:
{
   2be94:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (event == NULL) {
   2be96:	4605      	mov	r5, r0
{
   2be98:	b085      	sub	sp, #20
	if (event == NULL) {
   2be9a:	2800      	cmp	r0, #0
   2be9c:	f000 80f1 	beq.w	2c082 <download_client_callback+0x1ee>
	switch (event->id) {
   2bea0:	7803      	ldrb	r3, [r0, #0]
   2bea2:	2b01      	cmp	r3, #1
   2bea4:	f000 80b7 	beq.w	2c016 <download_client_callback+0x182>
   2bea8:	2b02      	cmp	r3, #2
   2beaa:	f000 8096 	beq.w	2bfda <download_client_callback+0x146>
   2beae:	2b00      	cmp	r3, #0
   2beb0:	f040 80c7 	bne.w	2c042 <download_client_callback+0x1ae>
		if (first_fragment) {
   2beb4:	4e74      	ldr	r6, [pc, #464]	; (2c088 <download_client_callback+0x1f4>)
   2beb6:	7833      	ldrb	r3, [r6, #0]
   2beb8:	2b00      	cmp	r3, #0
   2beba:	d051      	beq.n	2bf60 <download_client_callback+0xcc>
			err = download_client_file_size_get(&dlc, &file_size);
   2bebc:	4f73      	ldr	r7, [pc, #460]	; (2c08c <download_client_callback+0x1f8>)
   2bebe:	4874      	ldr	r0, [pc, #464]	; (2c090 <download_client_callback+0x1fc>)
   2bec0:	4639      	mov	r1, r7
   2bec2:	f00e fd17 	bl	3a8f4 <download_client_file_size_get>
			if (err != 0) {
   2bec6:	4604      	mov	r4, r0
   2bec8:	b108      	cbz	r0, 2bece <download_client_callback+0x3a>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2beca:	2001      	movs	r0, #1
   2becc:	e068      	b.n	2bfa0 <download_client_callback+0x10c>
			first_fragment = false;
   2bece:	7030      	strb	r0, [r6, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   2bed0:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2bed4:	f000 f946 	bl	2c164 <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size,
   2bed8:	4a6e      	ldr	r2, [pc, #440]	; (2c094 <download_client_callback+0x200>)
   2beda:	6839      	ldr	r1, [r7, #0]
   2bedc:	f000 f968 	bl	2c1b0 <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   2bee0:	1e04      	subs	r4, r0, #0
   2bee2:	da1d      	bge.n	2bf20 <download_client_callback+0x8c>
   2bee4:	f114 0f10 	cmn.w	r4, #16
   2bee8:	d01a      	beq.n	2bf20 <download_client_callback+0x8c>
   2beea:	4b6b      	ldr	r3, [pc, #428]	; (2c098 <download_client_callback+0x204>)
   2beec:	4d6b      	ldr	r5, [pc, #428]	; (2c09c <download_client_callback+0x208>)
				LOG_ERR("dfu_target_init error %d", err);
   2beee:	4621      	mov	r1, r4
   2bef0:	1aed      	subs	r5, r5, r3
   2bef2:	08ed      	lsrs	r5, r5, #3
   2bef4:	01ad      	lsls	r5, r5, #6
   2bef6:	f045 0501 	orr.w	r5, r5, #1
   2befa:	462a      	mov	r2, r5
   2befc:	4868      	ldr	r0, [pc, #416]	; (2c0a0 <download_client_callback+0x20c>)
   2befe:	f00c faee 	bl	384de <log_1>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2bf02:	2001      	movs	r0, #1
   2bf04:	f7ff ff6e 	bl	2bde4 <send_error_evt>
				int res = dfu_target_reset();
   2bf08:	f000 f9be 	bl	2c288 <dfu_target_reset>
				if (res != 0) {
   2bf0c:	b118      	cbz	r0, 2bf16 <download_client_callback+0x82>
					LOG_ERR("Unable to reset DFU target");
   2bf0e:	4629      	mov	r1, r5
   2bf10:	4864      	ldr	r0, [pc, #400]	; (2c0a4 <download_client_callback+0x210>)
   2bf12:	f00c fad5 	bl	384c0 <log_0>
				first_fragment = true;
   2bf16:	2301      	movs	r3, #1
   2bf18:	7033      	strb	r3, [r6, #0]
}
   2bf1a:	4620      	mov	r0, r4
   2bf1c:	b005      	add	sp, #20
   2bf1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = dfu_target_offset_get(&offset);
   2bf20:	a801      	add	r0, sp, #4
   2bf22:	f000 f977 	bl	2c214 <dfu_target_offset_get>
			if (err != 0) {
   2bf26:	b110      	cbz	r0, 2bf2e <download_client_callback+0x9a>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2bf28:	2001      	movs	r0, #1
   2bf2a:	f7ff ff5b 	bl	2bde4 <send_error_evt>
			if (offset != 0) {
   2bf2e:	9b01      	ldr	r3, [sp, #4]
   2bf30:	b1b3      	cbz	r3, 2bf60 <download_client_callback+0xcc>
				(void)download_client_disconnect(&dlc);
   2bf32:	4857      	ldr	r0, [pc, #348]	; (2c090 <download_client_callback+0x1fc>)
   2bf34:	f7ff fbec 	bl	2b710 <download_client_disconnect>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2bf38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2bf3c:	2300      	movs	r3, #0
   2bf3e:	495a      	ldr	r1, [pc, #360]	; (2c0a8 <download_client_callback+0x214>)
   2bf40:	485a      	ldr	r0, [pc, #360]	; (2c0ac <download_client_callback+0x218>)
   2bf42:	f00a fb53 	bl	365ec <k_delayed_work_submit_to_queue>
   2bf46:	4b54      	ldr	r3, [pc, #336]	; (2c098 <download_client_callback+0x204>)
   2bf48:	4954      	ldr	r1, [pc, #336]	; (2c09c <download_client_callback+0x208>)
				LOG_INF("Refuse fragment, restart with offset");
   2bf4a:	4859      	ldr	r0, [pc, #356]	; (2c0b0 <download_client_callback+0x21c>)
   2bf4c:	1ac9      	subs	r1, r1, r3
   2bf4e:	08c9      	lsrs	r1, r1, #3
   2bf50:	0189      	lsls	r1, r1, #6
   2bf52:	f041 0103 	orr.w	r1, r1, #3
   2bf56:	f00c fab3 	bl	384c0 <log_0>
				return -1;
   2bf5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2bf5e:	e7dc      	b.n	2bf1a <download_client_callback+0x86>
		err = dfu_target_write(event->fragment.buf,
   2bf60:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2bf64:	f000 f960 	bl	2c228 <dfu_target_write>
		if (err != 0) {
   2bf68:	4604      	mov	r4, r0
   2bf6a:	b1e0      	cbz	r0, 2bfa6 <download_client_callback+0x112>
   2bf6c:	4b4a      	ldr	r3, [pc, #296]	; (2c098 <download_client_callback+0x204>)
   2bf6e:	4d4b      	ldr	r5, [pc, #300]	; (2c09c <download_client_callback+0x208>)
			LOG_ERR("dfu_target_write error %d", err);
   2bf70:	4601      	mov	r1, r0
   2bf72:	1aed      	subs	r5, r5, r3
   2bf74:	08ed      	lsrs	r5, r5, #3
   2bf76:	01ad      	lsls	r5, r5, #6
   2bf78:	f045 0501 	orr.w	r5, r5, #1
   2bf7c:	484d      	ldr	r0, [pc, #308]	; (2c0b4 <download_client_callback+0x220>)
   2bf7e:	462a      	mov	r2, r5
   2bf80:	f00c faad 	bl	384de <log_1>
			int res = dfu_target_done(false);
   2bf84:	2000      	movs	r0, #0
   2bf86:	f000 f95b 	bl	2c240 <dfu_target_done>
			if (res != 0) {
   2bf8a:	b118      	cbz	r0, 2bf94 <download_client_callback+0x100>
				LOG_ERR("Unable to free DFU target resources");
   2bf8c:	4629      	mov	r1, r5
   2bf8e:	484a      	ldr	r0, [pc, #296]	; (2c0b8 <download_client_callback+0x224>)
   2bf90:	f00c fa96 	bl	384c0 <log_0>
			first_fragment = true;
   2bf94:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   2bf96:	483e      	ldr	r0, [pc, #248]	; (2c090 <download_client_callback+0x1fc>)
			first_fragment = true;
   2bf98:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   2bf9a:	f7ff fbb9 	bl	2b710 <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   2bf9e:	2002      	movs	r0, #2
   2bfa0:	f7ff ff20 	bl	2bde4 <send_error_evt>
			return err;
   2bfa4:	e7b9      	b.n	2bf1a <download_client_callback+0x86>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   2bfa6:	7833      	ldrb	r3, [r6, #0]
   2bfa8:	2b00      	cmp	r3, #0
   2bfaa:	d1b6      	bne.n	2bf1a <download_client_callback+0x86>
			err = dfu_target_offset_get(&offset);
   2bfac:	a801      	add	r0, sp, #4
   2bfae:	f000 f931 	bl	2c214 <dfu_target_offset_get>
			if (err != 0) {
   2bfb2:	4604      	mov	r4, r0
   2bfb4:	2800      	cmp	r0, #0
   2bfb6:	d188      	bne.n	2beca <download_client_callback+0x36>
			if (file_size == 0) {
   2bfb8:	4b34      	ldr	r3, [pc, #208]	; (2c08c <download_client_callback+0x1f8>)
   2bfba:	681a      	ldr	r2, [r3, #0]
   2bfbc:	2a00      	cmp	r2, #0
   2bfbe:	d084      	beq.n	2beca <download_client_callback+0x36>
			send_progress((offset * 100) / file_size);
   2bfc0:	2364      	movs	r3, #100	; 0x64
   2bfc2:	9901      	ldr	r1, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   2bfc4:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   2bfc8:	434b      	muls	r3, r1
   2bfca:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   2bfce:	9303      	str	r3, [sp, #12]
	callback(&evt);
   2bfd0:	4b3a      	ldr	r3, [pc, #232]	; (2c0bc <download_client_callback+0x228>)
   2bfd2:	a802      	add	r0, sp, #8
   2bfd4:	681b      	ldr	r3, [r3, #0]
   2bfd6:	4798      	blx	r3
}
   2bfd8:	e79f      	b.n	2bf1a <download_client_callback+0x86>
		err = dfu_target_done(true);
   2bfda:	2001      	movs	r0, #1
   2bfdc:	f000 f930 	bl	2c240 <dfu_target_done>
		if (err != 0) {
   2bfe0:	4604      	mov	r4, r0
   2bfe2:	b158      	cbz	r0, 2bffc <download_client_callback+0x168>
   2bfe4:	4b2c      	ldr	r3, [pc, #176]	; (2c098 <download_client_callback+0x204>)
   2bfe6:	4a2d      	ldr	r2, [pc, #180]	; (2c09c <download_client_callback+0x208>)
			LOG_ERR("dfu_target_done error: %d", err);
   2bfe8:	4601      	mov	r1, r0
   2bfea:	1ad2      	subs	r2, r2, r3
   2bfec:	08d2      	lsrs	r2, r2, #3
   2bfee:	0192      	lsls	r2, r2, #6
   2bff0:	4833      	ldr	r0, [pc, #204]	; (2c0c0 <download_client_callback+0x22c>)
   2bff2:	f042 0201 	orr.w	r2, r2, #1
   2bff6:	f00c fa72 	bl	384de <log_1>
   2bffa:	e766      	b.n	2beca <download_client_callback+0x36>
		err = download_client_disconnect(&dlc);
   2bffc:	4824      	ldr	r0, [pc, #144]	; (2c090 <download_client_callback+0x1fc>)
   2bffe:	f7ff fb87 	bl	2b710 <download_client_disconnect>
		if (err != 0) {
   2c002:	4604      	mov	r4, r0
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2c004:	2001      	movs	r0, #1
		if (err != 0) {
   2c006:	2c00      	cmp	r4, #0
   2c008:	d1ca      	bne.n	2bfa0 <download_client_callback+0x10c>
		send_evt(FOTA_DOWNLOAD_EVT_FINISHED);
   2c00a:	f7ff fedb 	bl	2bdc4 <send_evt>
		first_fragment = true;
   2c00e:	2201      	movs	r2, #1
   2c010:	4b1d      	ldr	r3, [pc, #116]	; (2c088 <download_client_callback+0x1f4>)
   2c012:	701a      	strb	r2, [r3, #0]
		break;
   2c014:	e781      	b.n	2bf1a <download_client_callback+0x86>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   2c016:	4e2b      	ldr	r6, [pc, #172]	; (2c0c4 <download_client_callback+0x230>)
   2c018:	4c20      	ldr	r4, [pc, #128]	; (2c09c <download_client_callback+0x208>)
   2c01a:	6831      	ldr	r1, [r6, #0]
   2c01c:	4f1e      	ldr	r7, [pc, #120]	; (2c098 <download_client_callback+0x204>)
   2c01e:	b191      	cbz	r1, 2c046 <download_client_callback+0x1b2>
   2c020:	6843      	ldr	r3, [r0, #4]
   2c022:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2c026:	d001      	beq.n	2c02c <download_client_callback+0x198>
   2c028:	3368      	adds	r3, #104	; 0x68
   2c02a:	d10c      	bne.n	2c046 <download_client_callback+0x1b2>
   2c02c:	1be2      	subs	r2, r4, r7
   2c02e:	08d2      	lsrs	r2, r2, #3
			LOG_WRN("Download socket error. %d retries left...",
   2c030:	0192      	lsls	r2, r2, #6
   2c032:	4825      	ldr	r0, [pc, #148]	; (2c0c8 <download_client_callback+0x234>)
   2c034:	f042 0202 	orr.w	r2, r2, #2
   2c038:	f00c fa51 	bl	384de <log_1>
			socket_retries_left--;
   2c03c:	6833      	ldr	r3, [r6, #0]
   2c03e:	3b01      	subs	r3, #1
   2c040:	6033      	str	r3, [r6, #0]
	switch (event->id) {
   2c042:	2400      	movs	r4, #0
   2c044:	e769      	b.n	2bf1a <download_client_callback+0x86>
   2c046:	1be4      	subs	r4, r4, r7
   2c048:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("Download client error");
   2c04a:	01a4      	lsls	r4, r4, #6
			download_client_disconnect(&dlc);
   2c04c:	4810      	ldr	r0, [pc, #64]	; (2c090 <download_client_callback+0x1fc>)
			LOG_ERR("Download client error");
   2c04e:	f044 0401 	orr.w	r4, r4, #1
			download_client_disconnect(&dlc);
   2c052:	f7ff fb5d 	bl	2b710 <download_client_disconnect>
			LOG_ERR("Download client error");
   2c056:	4621      	mov	r1, r4
   2c058:	481c      	ldr	r0, [pc, #112]	; (2c0cc <download_client_callback+0x238>)
   2c05a:	f00c fa31 	bl	384c0 <log_0>
			err = dfu_target_done(false);
   2c05e:	2000      	movs	r0, #0
   2c060:	f000 f8ee 	bl	2c240 <dfu_target_done>
			if (err == -EACCES) {
   2c064:	f110 0f0d 	cmn.w	r0, #13
   2c068:	d004      	beq.n	2c074 <download_client_callback+0x1e0>
			} else if (err != 0) {
   2c06a:	b118      	cbz	r0, 2c074 <download_client_callback+0x1e0>
				LOG_ERR("Unable to deinitialze resources "
   2c06c:	4621      	mov	r1, r4
   2c06e:	4818      	ldr	r0, [pc, #96]	; (2c0d0 <download_client_callback+0x23c>)
   2c070:	f00c fa26 	bl	384c0 <log_0>
			first_fragment = true;
   2c074:	2001      	movs	r0, #1
   2c076:	4b04      	ldr	r3, [pc, #16]	; (2c088 <download_client_callback+0x1f4>)
   2c078:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2c07a:	f7ff feb3 	bl	2bde4 <send_error_evt>
			return event->error;
   2c07e:	686c      	ldr	r4, [r5, #4]
   2c080:	e74b      	b.n	2bf1a <download_client_callback+0x86>
		return -EINVAL;
   2c082:	f06f 0415 	mvn.w	r4, #21
   2c086:	e748      	b.n	2bf1a <download_client_callback+0x86>
   2c088:	20020638 	.word	0x20020638
   2c08c:	2002385c 	.word	0x2002385c
   2c090:	20021878 	.word	0x20021878
   2c094:	0003a92b 	.word	0x0003a92b
   2c098:	0003c2cc 	.word	0x0003c2cc
   2c09c:	0003c33c 	.word	0x0003c33c
   2c0a0:	00040317 	.word	0x00040317
   2c0a4:	00040330 	.word	0x00040330
   2c0a8:	20023188 	.word	0x20023188
   2c0ac:	20023348 	.word	0x20023348
   2c0b0:	0004034b 	.word	0x0004034b
   2c0b4:	00040370 	.word	0x00040370
   2c0b8:	0004038a 	.word	0x0004038a
   2c0bc:	20023858 	.word	0x20023858
   2c0c0:	000403ae 	.word	0x000403ae
   2c0c4:	20023860 	.word	0x20023860
   2c0c8:	000403c8 	.word	0x000403c8
   2c0cc:	000403f2 	.word	0x000403f2
   2c0d0:	00040408 	.word	0x00040408

0002c0d4 <fota_download_start>:

int fota_download_start(const char *host, const char *file, int sec_tag,
			const char *apn, size_t fragment_size)
{
   2c0d4:	b530      	push	{r4, r5, lr}
   2c0d6:	b085      	sub	sp, #20
	int err = -1;

	struct download_client_cfg config = {
   2c0d8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2c0dc:	9b08      	ldr	r3, [sp, #32]
{
   2c0de:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   2c0e0:	9303      	str	r3, [sp, #12]
		.sec_tag = sec_tag,
		.apn = apn,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   2c0e2:	4601      	mov	r1, r0
   2c0e4:	b1c8      	cbz	r0, 2c11a <fota_download_start+0x46>
   2c0e6:	b1c5      	cbz	r5, 2c11a <fota_download_start+0x46>
   2c0e8:	4b0d      	ldr	r3, [pc, #52]	; (2c120 <fota_download_start+0x4c>)
   2c0ea:	681b      	ldr	r3, [r3, #0]
   2c0ec:	b1ab      	cbz	r3, 2c11a <fota_download_start+0x46>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   2c0ee:	2202      	movs	r2, #2
   2c0f0:	4b0c      	ldr	r3, [pc, #48]	; (2c124 <fota_download_start+0x50>)
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   2c0f2:	480d      	ldr	r0, [pc, #52]	; (2c128 <fota_download_start+0x54>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   2c0f4:	601a      	str	r2, [r3, #0]
	err = download_client_connect(&dlc, host, &config);
   2c0f6:	aa01      	add	r2, sp, #4
   2c0f8:	f7ff f928 	bl	2b34c <download_client_connect>
	if (err != 0) {
   2c0fc:	4604      	mov	r4, r0
   2c0fe:	b948      	cbnz	r0, 2c114 <fota_download_start+0x40>
		return err;
	}

	err = download_client_start(&dlc, file, 0);
   2c100:	4602      	mov	r2, r0
   2c102:	4629      	mov	r1, r5
   2c104:	4808      	ldr	r0, [pc, #32]	; (2c128 <fota_download_start+0x54>)
   2c106:	f7ff fc49 	bl	2b99c <download_client_start>
	if (err != 0) {
   2c10a:	4604      	mov	r4, r0
   2c10c:	b110      	cbz	r0, 2c114 <fota_download_start+0x40>
		download_client_disconnect(&dlc);
   2c10e:	4806      	ldr	r0, [pc, #24]	; (2c128 <fota_download_start+0x54>)
   2c110:	f7ff fafe 	bl	2b710 <download_client_disconnect>
		return err;
	}

	return 0;
}
   2c114:	4620      	mov	r0, r4
   2c116:	b005      	add	sp, #20
   2c118:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c11a:	f06f 0415 	mvn.w	r4, #21
   2c11e:	e7f9      	b.n	2c114 <fota_download_start+0x40>
   2c120:	20023858 	.word	0x20023858
   2c124:	20023860 	.word	0x20023860
   2c128:	20021878 	.word	0x20021878

0002c12c <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   2c12c:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   2c12e:	b158      	cbz	r0, 2c148 <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   2c130:	4b07      	ldr	r3, [pc, #28]	; (2c150 <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   2c132:	4908      	ldr	r1, [pc, #32]	; (2c154 <fota_download_init+0x28>)
	callback = client_callback;
   2c134:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   2c136:	4808      	ldr	r0, [pc, #32]	; (2c158 <fota_download_init+0x2c>)
   2c138:	f00e fed9 	bl	3aeee <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   2c13c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   2c140:	4906      	ldr	r1, [pc, #24]	; (2c15c <fota_download_init+0x30>)
   2c142:	4807      	ldr	r0, [pc, #28]	; (2c160 <fota_download_init+0x34>)
   2c144:	f7ff b8d8 	b.w	2b2f8 <download_client_init>
}
   2c148:	f06f 0015 	mvn.w	r0, #21
   2c14c:	bd08      	pop	{r3, pc}
   2c14e:	bf00      	nop
   2c150:	20023858 	.word	0x20023858
   2c154:	0002be09 	.word	0x0002be09
   2c158:	20023188 	.word	0x20023188
   2c15c:	0002be95 	.word	0x0002be95
   2c160:	20021878 	.word	0x20021878

0002c164 <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   2c164:	b538      	push	{r3, r4, r5, lr}
   2c166:	4605      	mov	r5, r0
   2c168:	460c      	mov	r4, r1
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   2c16a:	f000 faf7 	bl	2c75c <dfu_target_mcuboot_identify>
   2c16e:	b990      	cbnz	r0, 2c196 <dfu_target_img_type+0x32>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (dfu_target_modem_identify(buf)) {
   2c170:	4628      	mov	r0, r5
   2c172:	f000 f947 	bl	2c404 <dfu_target_modem_identify>
   2c176:	b980      	cbnz	r0, 2c19a <dfu_target_img_type+0x36>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}
#endif
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   2c178:	2c1f      	cmp	r4, #31
   2c17a:	d910      	bls.n	2c19e <dfu_target_img_type+0x3a>
   2c17c:	4b09      	ldr	r3, [pc, #36]	; (2c1a4 <dfu_target_img_type+0x40>)
   2c17e:	490a      	ldr	r1, [pc, #40]	; (2c1a8 <dfu_target_img_type+0x44>)
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   2c180:	480a      	ldr	r0, [pc, #40]	; (2c1ac <dfu_target_img_type+0x48>)
   2c182:	1ac9      	subs	r1, r1, r3
   2c184:	08c9      	lsrs	r1, r1, #3
   2c186:	0189      	lsls	r1, r1, #6
   2c188:	f041 0101 	orr.w	r1, r1, #1
   2c18c:	f00c f998 	bl	384c0 <log_0>
	return -ENOTSUP;
   2c190:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2c194:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   2c196:	2001      	movs	r0, #1
   2c198:	e7fc      	b.n	2c194 <dfu_target_img_type+0x30>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   2c19a:	2002      	movs	r0, #2
   2c19c:	e7fa      	b.n	2c194 <dfu_target_img_type+0x30>
		return -EAGAIN;
   2c19e:	f06f 000a 	mvn.w	r0, #10
   2c1a2:	e7f7      	b.n	2c194 <dfu_target_img_type+0x30>
   2c1a4:	0003c2cc 	.word	0x0003c2cc
   2c1a8:	0003c304 	.word	0x0003c304
   2c1ac:	0004045f 	.word	0x0004045f

0002c1b0 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
   2c1b0:	4603      	mov	r3, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   2c1b2:	2b01      	cmp	r3, #1
{
   2c1b4:	4608      	mov	r0, r1
   2c1b6:	b570      	push	{r4, r5, r6, lr}
   2c1b8:	4611      	mov	r1, r2
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   2c1ba:	d00e      	beq.n	2c1da <dfu_target_init+0x2a>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   2c1bc:	2b02      	cmp	r3, #2
   2c1be:	d018      	beq.n	2c1f2 <dfu_target_init+0x42>
   2c1c0:	4b0e      	ldr	r3, [pc, #56]	; (2c1fc <dfu_target_init+0x4c>)
   2c1c2:	490f      	ldr	r1, [pc, #60]	; (2c200 <dfu_target_init+0x50>)
		new_target = &dfu_target_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   2c1c4:	480f      	ldr	r0, [pc, #60]	; (2c204 <dfu_target_init+0x54>)
   2c1c6:	1ac9      	subs	r1, r1, r3
   2c1c8:	08c9      	lsrs	r1, r1, #3
   2c1ca:	0189      	lsls	r1, r1, #6
   2c1cc:	f041 0101 	orr.w	r1, r1, #1
   2c1d0:	f00c f976 	bl	384c0 <log_0>
		return -ENOTSUP;
   2c1d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size, cb);
}
   2c1d8:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   2c1da:	4c0b      	ldr	r4, [pc, #44]	; (2c208 <dfu_target_init+0x58>)
	if (new_target == current_target
   2c1dc:	4d0b      	ldr	r5, [pc, #44]	; (2c20c <dfu_target_init+0x5c>)
   2c1de:	682a      	ldr	r2, [r5, #0]
   2c1e0:	42a2      	cmp	r2, r4
   2c1e2:	d101      	bne.n	2c1e8 <dfu_target_init+0x38>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   2c1e4:	2b02      	cmp	r3, #2
   2c1e6:	d106      	bne.n	2c1f6 <dfu_target_init+0x46>
	return current_target->init(file_size, cb);
   2c1e8:	6823      	ldr	r3, [r4, #0]
	current_target = new_target;
   2c1ea:	602c      	str	r4, [r5, #0]
}
   2c1ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, cb);
   2c1f0:	4718      	bx	r3
		new_target = &dfu_target_modem;
   2c1f2:	4c07      	ldr	r4, [pc, #28]	; (2c210 <dfu_target_init+0x60>)
   2c1f4:	e7f2      	b.n	2c1dc <dfu_target_init+0x2c>
		return 0;
   2c1f6:	2000      	movs	r0, #0
   2c1f8:	e7ee      	b.n	2c1d8 <dfu_target_init+0x28>
   2c1fa:	bf00      	nop
   2c1fc:	0003c2cc 	.word	0x0003c2cc
   2c200:	0003c304 	.word	0x0003c304
   2c204:	0004047d 	.word	0x0004047d
   2c208:	0003cac8 	.word	0x0003cac8
   2c20c:	20023864 	.word	0x20023864
   2c210:	0003cad8 	.word	0x0003cad8

0002c214 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   2c214:	4b03      	ldr	r3, [pc, #12]	; (2c224 <dfu_target_offset_get+0x10>)
   2c216:	681b      	ldr	r3, [r3, #0]
   2c218:	b10b      	cbz	r3, 2c21e <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   2c21a:	685b      	ldr	r3, [r3, #4]
   2c21c:	4718      	bx	r3
}
   2c21e:	f06f 000c 	mvn.w	r0, #12
   2c222:	4770      	bx	lr
   2c224:	20023864 	.word	0x20023864

0002c228 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   2c228:	4a04      	ldr	r2, [pc, #16]	; (2c23c <dfu_target_write+0x14>)
   2c22a:	6812      	ldr	r2, [r2, #0]
   2c22c:	b112      	cbz	r2, 2c234 <dfu_target_write+0xc>
   2c22e:	b108      	cbz	r0, 2c234 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   2c230:	6893      	ldr	r3, [r2, #8]
   2c232:	4718      	bx	r3
}
   2c234:	f06f 000c 	mvn.w	r0, #12
   2c238:	4770      	bx	lr
   2c23a:	bf00      	nop
   2c23c:	20023864 	.word	0x20023864

0002c240 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   2c240:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   2c242:	4e0d      	ldr	r6, [pc, #52]	; (2c278 <dfu_target_done+0x38>)
{
   2c244:	4605      	mov	r5, r0
	if (current_target == NULL) {
   2c246:	6833      	ldr	r3, [r6, #0]
   2c248:	b19b      	cbz	r3, 2c272 <dfu_target_done+0x32>
		return -EACCES;
	}

	err = current_target->done(successful);
   2c24a:	68db      	ldr	r3, [r3, #12]
   2c24c:	4798      	blx	r3
	if (err != 0) {
   2c24e:	4604      	mov	r4, r0
   2c250:	b158      	cbz	r0, 2c26a <dfu_target_done+0x2a>
   2c252:	490a      	ldr	r1, [pc, #40]	; (2c27c <dfu_target_done+0x3c>)
   2c254:	4b0a      	ldr	r3, [pc, #40]	; (2c280 <dfu_target_done+0x40>)
		LOG_ERR("Unable to clean up dfu_target");
   2c256:	480b      	ldr	r0, [pc, #44]	; (2c284 <dfu_target_done+0x44>)
   2c258:	1ac9      	subs	r1, r1, r3
   2c25a:	08c9      	lsrs	r1, r1, #3
   2c25c:	0189      	lsls	r1, r1, #6
   2c25e:	f041 0101 	orr.w	r1, r1, #1
   2c262:	f00c f92d 	bl	384c0 <log_0>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   2c266:	4620      	mov	r0, r4
   2c268:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   2c26a:	2d00      	cmp	r5, #0
   2c26c:	d0fb      	beq.n	2c266 <dfu_target_done+0x26>
		current_target = NULL;
   2c26e:	6030      	str	r0, [r6, #0]
   2c270:	e7f9      	b.n	2c266 <dfu_target_done+0x26>
		return -EACCES;
   2c272:	f06f 040c 	mvn.w	r4, #12
   2c276:	e7f6      	b.n	2c266 <dfu_target_done+0x26>
   2c278:	20023864 	.word	0x20023864
   2c27c:	0003c304 	.word	0x0003c304
   2c280:	0003c2cc 	.word	0x0003c2cc
   2c284:	00040490 	.word	0x00040490

0002c288 <dfu_target_reset>:

int dfu_target_reset(void)
{
   2c288:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   2c28a:	4d0b      	ldr	r5, [pc, #44]	; (2c2b8 <dfu_target_reset+0x30>)
   2c28c:	682a      	ldr	r2, [r5, #0]
   2c28e:	b182      	cbz	r2, 2c2b2 <dfu_target_reset+0x2a>
		int err = current_target->done(false);
   2c290:	2000      	movs	r0, #0
   2c292:	68d3      	ldr	r3, [r2, #12]
   2c294:	4798      	blx	r3

		if (err != 0) {
   2c296:	4604      	mov	r4, r0
   2c298:	b158      	cbz	r0, 2c2b2 <dfu_target_reset+0x2a>
   2c29a:	4908      	ldr	r1, [pc, #32]	; (2c2bc <dfu_target_reset+0x34>)
   2c29c:	4b08      	ldr	r3, [pc, #32]	; (2c2c0 <dfu_target_reset+0x38>)
			LOG_ERR("Unable to clean up dfu_target");
   2c29e:	4809      	ldr	r0, [pc, #36]	; (2c2c4 <dfu_target_reset+0x3c>)
   2c2a0:	1ac9      	subs	r1, r1, r3
   2c2a2:	08c9      	lsrs	r1, r1, #3
   2c2a4:	0189      	lsls	r1, r1, #6
   2c2a6:	f041 0101 	orr.w	r1, r1, #1
   2c2aa:	f00c f909 	bl	384c0 <log_0>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   2c2ae:	4620      	mov	r0, r4
   2c2b0:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   2c2b2:	2400      	movs	r4, #0
   2c2b4:	602c      	str	r4, [r5, #0]
	return 0;
   2c2b6:	e7fa      	b.n	2c2ae <dfu_target_reset+0x26>
   2c2b8:	20023864 	.word	0x20023864
   2c2bc:	0003c304 	.word	0x0003c304
   2c2c0:	0003c2cc 	.word	0x0003c2cc
   2c2c4:	00040490 	.word	0x00040490

0002c2c8 <get_modem_error>:
static int  fd;
static int  offset;
static dfu_target_callback_t callback;

static int get_modem_error(void)
{
   2c2c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   2c2ca:	2200      	movs	r2, #0
   2c2cc:	2304      	movs	r3, #4
   2c2ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2c2d2:	4b0e      	ldr	r3, [pc, #56]	; (2c30c <get_modem_error+0x44>)
   2c2d4:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   2c2d6:	ab03      	add	r3, sp, #12
   2c2d8:	9300      	str	r3, [sp, #0]
   2c2da:	2214      	movs	r2, #20
   2c2dc:	f240 2103 	movw	r1, #515	; 0x203
   2c2e0:	ab02      	add	r3, sp, #8
   2c2e2:	f00c fd9e 	bl	38e22 <z_impl_zsock_getsockopt>
	if (rc) {
   2c2e6:	b168      	cbz	r0, 2c304 <get_modem_error+0x3c>
   2c2e8:	4a09      	ldr	r2, [pc, #36]	; (2c310 <get_modem_error+0x48>)
   2c2ea:	4c0a      	ldr	r4, [pc, #40]	; (2c314 <get_modem_error+0x4c>)
   2c2ec:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   2c2ee:	f00c ffea 	bl	392c6 <__errno>
   2c2f2:	08e4      	lsrs	r4, r4, #3
   2c2f4:	01a4      	lsls	r4, r4, #6
   2c2f6:	f044 0401 	orr.w	r4, r4, #1
   2c2fa:	6801      	ldr	r1, [r0, #0]
   2c2fc:	4622      	mov	r2, r4
   2c2fe:	4806      	ldr	r0, [pc, #24]	; (2c318 <get_modem_error+0x50>)
   2c300:	f00c f8ed 	bl	384de <log_1>
	}

	return err;
}
   2c304:	9802      	ldr	r0, [sp, #8]
   2c306:	b004      	add	sp, #16
   2c308:	bd10      	pop	{r4, pc}
   2c30a:	bf00      	nop
   2c30c:	2002386c 	.word	0x2002386c
   2c310:	0003c2cc 	.word	0x0003c2cc
   2c314:	0003c314 	.word	0x0003c314
   2c318:	000404ae 	.word	0x000404ae

0002c31c <delete_banked_modem_fw>:
}
#define SLEEP_TIME 1
static int delete_banked_modem_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   2c31c:	2304      	movs	r3, #4
{
   2c31e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c322:	4a2f      	ldr	r2, [pc, #188]	; (2c3e0 <delete_banked_modem_fw+0xc4>)
   2c324:	4c2f      	ldr	r4, [pc, #188]	; (2c3e4 <delete_banked_modem_fw+0xc8>)
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   2c326:	4e30      	ldr	r6, [pc, #192]	; (2c3e8 <delete_banked_modem_fw+0xcc>)
   2c328:	1aa4      	subs	r4, r4, r2
   2c32a:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Deleting firmware image, this can take several minutes");
   2c32c:	01a4      	lsls	r4, r4, #6
{
   2c32e:	b085      	sub	sp, #20
	LOG_INF("Deleting firmware image, this can take several minutes");
   2c330:	482e      	ldr	r0, [pc, #184]	; (2c3ec <delete_banked_modem_fw+0xd0>)
   2c332:	f044 0103 	orr.w	r1, r4, #3
	socklen_t len = sizeof(offset);
   2c336:	9303      	str	r3, [sp, #12]
	LOG_INF("Deleting firmware image, this can take several minutes");
   2c338:	f00c f8c2 	bl	384c0 <log_0>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   2c33c:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2c33e:	2300      	movs	r3, #0
   2c340:	2206      	movs	r2, #6
   2c342:	f240 2103 	movw	r1, #515	; 0x203
   2c346:	9300      	str	r3, [sp, #0]
   2c348:	f00c fd86 	bl	38e58 <z_impl_zsock_setsockopt>
	if (err < 0) {
   2c34c:	2800      	cmp	r0, #0
   2c34e:	da0d      	bge.n	2c36c <delete_banked_modem_fw+0x50>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   2c350:	f00c ffb9 	bl	392c6 <__errno>
   2c354:	f044 0401 	orr.w	r4, r4, #1
   2c358:	6801      	ldr	r1, [r0, #0]
   2c35a:	4622      	mov	r2, r4
   2c35c:	4824      	ldr	r0, [pc, #144]	; (2c3f0 <delete_banked_modem_fw+0xd4>)
   2c35e:	f00c f8be 	bl	384de <log_1>
		return -EFAULT;
   2c362:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   2c366:	b005      	add	sp, #20
   2c368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   2c36c:	253c      	movs	r5, #60	; 0x3c
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   2c36e:	4f21      	ldr	r7, [pc, #132]	; (2c3f4 <delete_banked_modem_fw+0xd8>)
				callback(DFU_TARGET_EVT_TIMEOUT);
   2c370:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2c3f8 <delete_banked_modem_fw+0xdc>
					LOG_ERR("DFU error: %d", err);
   2c374:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2c400 <delete_banked_modem_fw+0xe4>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2c378:	6830      	ldr	r0, [r6, #0]
   2c37a:	ab03      	add	r3, sp, #12
   2c37c:	9300      	str	r3, [sp, #0]
   2c37e:	2207      	movs	r2, #7
   2c380:	463b      	mov	r3, r7
   2c382:	f240 2103 	movw	r1, #515	; 0x203
   2c386:	f00c fd4c 	bl	38e22 <z_impl_zsock_getsockopt>
		if (err < 0) {
   2c38a:	2800      	cmp	r0, #0
   2c38c:	da1d      	bge.n	2c3ca <delete_banked_modem_fw+0xae>
			if (timeout < 0) {
   2c38e:	2d00      	cmp	r5, #0
   2c390:	da04      	bge.n	2c39c <delete_banked_modem_fw+0x80>
				callback(DFU_TARGET_EVT_TIMEOUT);
   2c392:	2000      	movs	r0, #0
   2c394:	f8d8 3000 	ldr.w	r3, [r8]
   2c398:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   2c39a:	253c      	movs	r5, #60	; 0x3c
			if (errno == ENOEXEC) {
   2c39c:	f00c ff93 	bl	392c6 <__errno>
   2c3a0:	6803      	ldr	r3, [r0, #0]
   2c3a2:	2b08      	cmp	r3, #8
   2c3a4:	d10f      	bne.n	2c3c6 <delete_banked_modem_fw+0xaa>
				err = get_modem_error();
   2c3a6:	f7ff ff8f 	bl	2c2c8 <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   2c3aa:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   2c3ae:	4601      	mov	r1, r0
				if (err != DFU_ERASE_PENDING) {
   2c3b0:	d004      	beq.n	2c3bc <delete_banked_modem_fw+0xa0>
					LOG_ERR("DFU error: %d", err);
   2c3b2:	4648      	mov	r0, r9
   2c3b4:	f044 0201 	orr.w	r2, r4, #1
   2c3b8:	f00c f891 	bl	384de <log_1>
	return z_impl_k_sleep(timeout);
   2c3bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2c3c0:	2100      	movs	r1, #0
   2c3c2:	f009 ff75 	bl	362b0 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   2c3c6:	3d01      	subs	r5, #1
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2c3c8:	e7d6      	b.n	2c378 <delete_banked_modem_fw+0x5c>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   2c3ca:	4b0b      	ldr	r3, [pc, #44]	; (2c3f8 <delete_banked_modem_fw+0xdc>)
   2c3cc:	2001      	movs	r0, #1
   2c3ce:	681b      	ldr	r3, [r3, #0]
   2c3d0:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   2c3d2:	480a      	ldr	r0, [pc, #40]	; (2c3fc <delete_banked_modem_fw+0xe0>)
   2c3d4:	f044 0103 	orr.w	r1, r4, #3
   2c3d8:	f00c f872 	bl	384c0 <log_0>
	return 0;
   2c3dc:	2000      	movs	r0, #0
   2c3de:	e7c2      	b.n	2c366 <delete_banked_modem_fw+0x4a>
   2c3e0:	0003c2cc 	.word	0x0003c2cc
   2c3e4:	0003c314 	.word	0x0003c314
   2c3e8:	2002386c 	.word	0x2002386c
   2c3ec:	000404d4 	.word	0x000404d4
   2c3f0:	0004050b 	.word	0x0004050b
   2c3f4:	20023870 	.word	0x20023870
   2c3f8:	20023868 	.word	0x20023868
   2c3fc:	0004053b 	.word	0x0004053b
   2c400:	0004052d 	.word	0x0004052d

0002c404 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   2c404:	6840      	ldr	r0, [r0, #4]

}
   2c406:	4b02      	ldr	r3, [pc, #8]	; (2c410 <dfu_target_modem_identify+0xc>)
   2c408:	1ac3      	subs	r3, r0, r3
   2c40a:	4258      	negs	r0, r3
   2c40c:	4158      	adcs	r0, r3
   2c40e:	4770      	bx	lr
   2c410:	7544656d 	.word	0x7544656d

0002c414 <dfu_target_modem_init>:

int dfu_target_modem_init(size_t file_size, dfu_target_callback_t cb)
{
	int err;
	size_t scratch_space;
	socklen_t len = sizeof(offset);
   2c414:	2304      	movs	r3, #4
{
   2c416:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c41a:	b099      	sub	sp, #100	; 0x64
	socklen_t len = sizeof(offset);
   2c41c:	9303      	str	r3, [sp, #12]

	callback = cb;
   2c41e:	4b5e      	ldr	r3, [pc, #376]	; (2c598 <dfu_target_modem_init+0x184>)
{
   2c420:	4606      	mov	r6, r0
	callback = cb;
   2c422:	6019      	str	r1, [r3, #0]
	return z_impl_zsock_socket(family, type, proto);
   2c424:	f240 2203 	movw	r2, #515	; 0x203
   2c428:	2101      	movs	r1, #1
   2c42a:	2006      	movs	r0, #6
   2c42c:	f7f8 fcc4 	bl	24db8 <z_impl_zsock_socket>
   2c430:	4c5a      	ldr	r4, [pc, #360]	; (2c59c <dfu_target_modem_init+0x188>)
   2c432:	4a5b      	ldr	r2, [pc, #364]	; (2c5a0 <dfu_target_modem_init+0x18c>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2c434:	4f5b      	ldr	r7, [pc, #364]	; (2c5a4 <dfu_target_modem_init+0x190>)
   2c436:	1aa4      	subs	r4, r4, r2
   2c438:	08e4      	lsrs	r4, r4, #3
	if (fd < 0) {
   2c43a:	2800      	cmp	r0, #0
   2c43c:	463d      	mov	r5, r7
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2c43e:	6038      	str	r0, [r7, #0]
	if (fd < 0) {
   2c440:	ea4f 1484 	mov.w	r4, r4, lsl #6
   2c444:	da2c      	bge.n	2c4a0 <dfu_target_modem_init+0x8c>
		LOG_ERR("Failed to open Modem DFU socket.");
   2c446:	4858      	ldr	r0, [pc, #352]	; (2c5a8 <dfu_target_modem_init+0x194>)
   2c448:	f044 0101 	orr.w	r1, r4, #1
   2c44c:	f00c f838 	bl	384c0 <log_0>
		return fd;
   2c450:	6838      	ldr	r0, [r7, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   2c452:	2800      	cmp	r0, #0
   2c454:	db45      	blt.n	2c4e2 <dfu_target_modem_init+0xce>
		return err;
	}

	err = getsockopt(fd, SOL_DFU, SO_DFU_RESOURCES, &scratch_space, &len);
   2c456:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   2c458:	af03      	add	r7, sp, #12
   2c45a:	2202      	movs	r2, #2
   2c45c:	f240 2103 	movw	r1, #515	; 0x203
   2c460:	9700      	str	r7, [sp, #0]
   2c462:	ab0e      	add	r3, sp, #56	; 0x38
   2c464:	f00c fcdd 	bl	38e22 <z_impl_zsock_getsockopt>
	if (err < 0) {
   2c468:	2800      	cmp	r0, #0
   2c46a:	da0d      	bge.n	2c488 <dfu_target_modem_init+0x74>
		if (errno == ENOEXEC) {
   2c46c:	f00c ff2b 	bl	392c6 <__errno>
   2c470:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2c472:	f044 0801 	orr.w	r8, r4, #1
		if (errno == ENOEXEC) {
   2c476:	2b08      	cmp	r3, #8
   2c478:	d146      	bne.n	2c508 <dfu_target_modem_init+0xf4>
			LOG_ERR("Modem error: %d", get_modem_error());
   2c47a:	f7ff ff25 	bl	2c2c8 <get_modem_error>
   2c47e:	4642      	mov	r2, r8
   2c480:	4601      	mov	r1, r0
   2c482:	484a      	ldr	r0, [pc, #296]	; (2c5ac <dfu_target_modem_init+0x198>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2c484:	f00c f82b 	bl	384de <log_1>
		}
	}

	if (file_size > scratch_space) {
   2c488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2c48a:	42b2      	cmp	r2, r6
   2c48c:	d242      	bcs.n	2c514 <dfu_target_modem_init+0x100>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   2c48e:	4848      	ldr	r0, [pc, #288]	; (2c5b0 <dfu_target_modem_init+0x19c>)
   2c490:	4631      	mov	r1, r6
   2c492:	f044 0301 	orr.w	r3, r4, #1
   2c496:	f00c f839 	bl	3850c <log_2>
			file_size, scratch_space);
		return -EFBIG;
   2c49a:	f06f 001a 	mvn.w	r0, #26
   2c49e:	e020      	b.n	2c4e2 <dfu_target_modem_init+0xce>
	len = sizeof(version);
   2c4a0:	f04f 0924 	mov.w	r9, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   2c4a4:	f044 0803 	orr.w	r8, r4, #3
   2c4a8:	4641      	mov	r1, r8
   2c4aa:	4842      	ldr	r0, [pc, #264]	; (2c5b4 <dfu_target_modem_init+0x1a0>)
   2c4ac:	f00c f808 	bl	384c0 <log_0>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2c4b0:	6838      	ldr	r0, [r7, #0]
	len = sizeof(version);
   2c4b2:	f8cd 9010 	str.w	r9, [sp, #16]
   2c4b6:	ab04      	add	r3, sp, #16
   2c4b8:	af05      	add	r7, sp, #20
   2c4ba:	9300      	str	r3, [sp, #0]
   2c4bc:	2201      	movs	r2, #1
   2c4be:	463b      	mov	r3, r7
   2c4c0:	f240 2103 	movw	r1, #515	; 0x203
   2c4c4:	f00c fcad 	bl	38e22 <z_impl_zsock_getsockopt>
	if (err < 0) {
   2c4c8:	2800      	cmp	r0, #0
   2c4ca:	da0d      	bge.n	2c4e8 <dfu_target_modem_init+0xd4>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   2c4cc:	f00c fefb 	bl	392c6 <__errno>
   2c4d0:	f044 0401 	orr.w	r4, r4, #1
   2c4d4:	6801      	ldr	r1, [r0, #0]
   2c4d6:	4622      	mov	r2, r4
   2c4d8:	4837      	ldr	r0, [pc, #220]	; (2c5b8 <dfu_target_modem_init+0x1a4>)
   2c4da:	f00c f800 	bl	384de <log_1>
		return -1;
   2c4de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
}
   2c4e2:	b019      	add	sp, #100	; 0x64
   2c4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   2c4e8:	464b      	mov	r3, r9
   2c4ea:	2125      	movs	r1, #37	; 0x25
   2c4ec:	4a33      	ldr	r2, [pc, #204]	; (2c5bc <dfu_target_modem_init+0x1a8>)
   2c4ee:	9700      	str	r7, [sp, #0]
   2c4f0:	a80e      	add	r0, sp, #56	; 0x38
   2c4f2:	f00a fe99 	bl	37228 <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   2c4f6:	a80e      	add	r0, sp, #56	; 0x38
   2c4f8:	f7f7 ff90 	bl	2441c <log_strdup>
   2c4fc:	4642      	mov	r2, r8
   2c4fe:	4601      	mov	r1, r0
   2c500:	482f      	ldr	r0, [pc, #188]	; (2c5c0 <dfu_target_modem_init+0x1ac>)
   2c502:	f00b ffec 	bl	384de <log_1>
	if (err < 0) {
   2c506:	e7a6      	b.n	2c456 <dfu_target_modem_init+0x42>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2c508:	f00c fedd 	bl	392c6 <__errno>
   2c50c:	4642      	mov	r2, r8
   2c50e:	6801      	ldr	r1, [r0, #0]
   2c510:	482c      	ldr	r0, [pc, #176]	; (2c5c4 <dfu_target_modem_init+0x1b0>)
   2c512:	e7b7      	b.n	2c484 <dfu_target_modem_init+0x70>
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2c514:	6828      	ldr	r0, [r5, #0]
   2c516:	2207      	movs	r2, #7
   2c518:	f240 2103 	movw	r1, #515	; 0x203
   2c51c:	4b2a      	ldr	r3, [pc, #168]	; (2c5c8 <dfu_target_modem_init+0x1b4>)
   2c51e:	9700      	str	r7, [sp, #0]
   2c520:	f00c fc7f 	bl	38e22 <z_impl_zsock_getsockopt>
	if (err < 0) {
   2c524:	2800      	cmp	r0, #0
   2c526:	da0d      	bge.n	2c544 <dfu_target_modem_init+0x130>
		if (errno == ENOEXEC) {
   2c528:	f00c fecd 	bl	392c6 <__errno>
   2c52c:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2c52e:	f044 0601 	orr.w	r6, r4, #1
		if (errno == ENOEXEC) {
   2c532:	2b08      	cmp	r3, #8
   2c534:	d10f      	bne.n	2c556 <dfu_target_modem_init+0x142>
			LOG_ERR("Modem error: %d", get_modem_error());
   2c536:	f7ff fec7 	bl	2c2c8 <get_modem_error>
   2c53a:	4632      	mov	r2, r6
   2c53c:	4601      	mov	r1, r0
   2c53e:	481b      	ldr	r0, [pc, #108]	; (2c5ac <dfu_target_modem_init+0x198>)
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2c540:	f00b ffcd 	bl	384de <log_1>
	if (offset == DIRTY_IMAGE) {
   2c544:	4e20      	ldr	r6, [pc, #128]	; (2c5c8 <dfu_target_modem_init+0x1b4>)
   2c546:	6831      	ldr	r1, [r6, #0]
   2c548:	f5b1 1f20 	cmp.w	r1, #2621440	; 0x280000
   2c54c:	d109      	bne.n	2c562 <dfu_target_modem_init+0x14e>
		delete_banked_modem_fw();
   2c54e:	f7ff fee5 	bl	2c31c <delete_banked_modem_fw>
	return 0;
   2c552:	2000      	movs	r0, #0
   2c554:	e7c5      	b.n	2c4e2 <dfu_target_modem_init+0xce>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2c556:	f00c feb6 	bl	392c6 <__errno>
   2c55a:	4632      	mov	r2, r6
   2c55c:	6801      	ldr	r1, [r0, #0]
   2c55e:	4819      	ldr	r0, [pc, #100]	; (2c5c4 <dfu_target_modem_init+0x1b0>)
   2c560:	e7ee      	b.n	2c540 <dfu_target_modem_init+0x12c>
	} else if (offset != 0) {
   2c562:	2900      	cmp	r1, #0
   2c564:	d0f5      	beq.n	2c552 <dfu_target_modem_init+0x13e>
		LOG_INF("Setting offset to 0x%x", offset);
   2c566:	f044 0403 	orr.w	r4, r4, #3
   2c56a:	4622      	mov	r2, r4
   2c56c:	4817      	ldr	r0, [pc, #92]	; (2c5cc <dfu_target_modem_init+0x1b8>)
   2c56e:	f00b ffb6 	bl	384de <log_1>
		len = sizeof(offset);
   2c572:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2c574:	6828      	ldr	r0, [r5, #0]
		len = sizeof(offset);
   2c576:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2c578:	2207      	movs	r2, #7
   2c57a:	9300      	str	r3, [sp, #0]
   2c57c:	f240 2103 	movw	r1, #515	; 0x203
   2c580:	4633      	mov	r3, r6
   2c582:	f00c fc69 	bl	38e58 <z_impl_zsock_setsockopt>
		if (err != 0) {
   2c586:	2800      	cmp	r0, #0
   2c588:	d0e3      	beq.n	2c552 <dfu_target_modem_init+0x13e>
			LOG_INF("Error while setting offset: %d", offset);
   2c58a:	4622      	mov	r2, r4
   2c58c:	6831      	ldr	r1, [r6, #0]
   2c58e:	4810      	ldr	r0, [pc, #64]	; (2c5d0 <dfu_target_modem_init+0x1bc>)
   2c590:	f00b ffa5 	bl	384de <log_1>
   2c594:	e7dd      	b.n	2c552 <dfu_target_modem_init+0x13e>
   2c596:	bf00      	nop
   2c598:	20023868 	.word	0x20023868
   2c59c:	0003c314 	.word	0x0003c314
   2c5a0:	0003c2cc 	.word	0x0003c2cc
   2c5a4:	2002386c 	.word	0x2002386c
   2c5a8:	00040554 	.word	0x00040554
   2c5ac:	000405d8 	.word	0x000405d8
   2c5b0:	00040605 	.word	0x00040605
   2c5b4:	00040575 	.word	0x00040575
   2c5b8:	0004058e 	.word	0x0004058e
   2c5bc:	000405b8 	.word	0x000405b8
   2c5c0:	000405bd 	.word	0x000405bd
   2c5c4:	000405e8 	.word	0x000405e8
   2c5c8:	20023870 	.word	0x20023870
   2c5cc:	00040634 	.word	0x00040634
   2c5d0:	0004064b 	.word	0x0004064b

0002c5d4 <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   2c5d4:	4b02      	ldr	r3, [pc, #8]	; (2c5e0 <dfu_target_modem_offset_get+0xc>)
   2c5d6:	681b      	ldr	r3, [r3, #0]
   2c5d8:	6003      	str	r3, [r0, #0]
	return 0;
}
   2c5da:	2000      	movs	r0, #0
   2c5dc:	4770      	bx	lr
   2c5de:	bf00      	nop
   2c5e0:	20023870 	.word	0x20023870

0002c5e4 <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   2c5e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int err = 0;
	int sent = 0;
   2c5e8:	2400      	movs	r4, #0
{
   2c5ea:	4607      	mov	r7, r0
   2c5ec:	460d      	mov	r5, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2c5ee:	4626      	mov	r6, r4
	int modem_error = 0;
	int send_result = 0;

	while (send_result >= 0) {
		send_result = send(fd, (((uint8_t *)buf) + sent),
   2c5f0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2c694 <dfu_target_modem_write+0xb0>
   2c5f4:	f8d8 0000 	ldr.w	r0, [r8]
   2c5f8:	2300      	movs	r3, #0
   2c5fa:	e9cd 6600 	strd	r6, r6, [sp]
   2c5fe:	1b2a      	subs	r2, r5, r4
   2c600:	1939      	adds	r1, r7, r4
   2c602:	f00c fbcd 	bl	38da0 <z_impl_zsock_sendto>
				   (len - sent), 0);
		if (send_result > 0) {
   2c606:	2800      	cmp	r0, #0
   2c608:	dd0a      	ble.n	2c620 <dfu_target_modem_write+0x3c>
			sent += send_result;
   2c60a:	4404      	add	r4, r0
			if (sent >= len) {
   2c60c:	42ac      	cmp	r4, r5
   2c60e:	d3f1      	bcc.n	2c5f4 <dfu_target_modem_write+0x10>
				offset += len;
				return 0;
   2c610:	2000      	movs	r0, #0
				offset += len;
   2c612:	4b1c      	ldr	r3, [pc, #112]	; (2c684 <dfu_target_modem_write+0xa0>)
   2c614:	6819      	ldr	r1, [r3, #0]
   2c616:	4429      	add	r1, r5
   2c618:	6019      	str	r1, [r3, #0]
			return 0;
		}
	default:
		return -EFAULT;
	}
}
   2c61a:	b002      	add	sp, #8
   2c61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (send_result >= 0) {
   2c620:	d0e8      	beq.n	2c5f4 <dfu_target_modem_write+0x10>
	if (errno != ENOEXEC) {
   2c622:	f00c fe50 	bl	392c6 <__errno>
   2c626:	6803      	ldr	r3, [r0, #0]
   2c628:	2b08      	cmp	r3, #8
   2c62a:	d128      	bne.n	2c67e <dfu_target_modem_write+0x9a>
	modem_error = get_modem_error();
   2c62c:	f7ff fe4c 	bl	2c2c8 <get_modem_error>
   2c630:	4c15      	ldr	r4, [pc, #84]	; (2c688 <dfu_target_modem_write+0xa4>)
   2c632:	4b16      	ldr	r3, [pc, #88]	; (2c68c <dfu_target_modem_write+0xa8>)
   2c634:	4606      	mov	r6, r0
   2c636:	1ae4      	subs	r4, r4, r3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2c638:	f00c fe45 	bl	392c6 <__errno>
   2c63c:	08e4      	lsrs	r4, r4, #3
   2c63e:	01a4      	lsls	r4, r4, #6
   2c640:	f044 0401 	orr.w	r4, r4, #1
   2c644:	6801      	ldr	r1, [r0, #0]
   2c646:	4623      	mov	r3, r4
   2c648:	4632      	mov	r2, r6
   2c64a:	4811      	ldr	r0, [pc, #68]	; (2c690 <dfu_target_modem_write+0xac>)
   2c64c:	f00b ff5e 	bl	3850c <log_2>
	switch (modem_error) {
   2c650:	f116 0f0b 	cmn.w	r6, #11
   2c654:	d004      	beq.n	2c660 <dfu_target_modem_write+0x7c>
   2c656:	f116 0f09 	cmn.w	r6, #9
   2c65a:	d00d      	beq.n	2c678 <dfu_target_modem_write+0x94>
   2c65c:	360e      	adds	r6, #14
   2c65e:	d10e      	bne.n	2c67e <dfu_target_modem_write+0x9a>
		delete_banked_modem_fw();
   2c660:	f7ff fe5c 	bl	2c31c <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   2c664:	4629      	mov	r1, r5
   2c666:	4638      	mov	r0, r7
   2c668:	f7ff ffbc 	bl	2c5e4 <dfu_target_modem_write>
			return 0;
   2c66c:	2800      	cmp	r0, #0
   2c66e:	bfb4      	ite	lt
   2c670:	f06f 0015 	mvnlt.w	r0, #21
   2c674:	2000      	movge	r0, #0
   2c676:	e7d0      	b.n	2c61a <dfu_target_modem_write+0x36>
		return -EINVAL;
   2c678:	f06f 0015 	mvn.w	r0, #21
   2c67c:	e7cd      	b.n	2c61a <dfu_target_modem_write+0x36>
	switch (modem_error) {
   2c67e:	f06f 000d 	mvn.w	r0, #13
   2c682:	e7ca      	b.n	2c61a <dfu_target_modem_write+0x36>
   2c684:	20023870 	.word	0x20023870
   2c688:	0003c314 	.word	0x0003c314
   2c68c:	0003c2cc 	.word	0x0003c2cc
   2c690:	0004066a 	.word	0x0004066a
   2c694:	2002386c 	.word	0x2002386c

0002c698 <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   2c698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2c69a:	4c1c      	ldr	r4, [pc, #112]	; (2c70c <dfu_target_modem_done+0x74>)
   2c69c:	4b1c      	ldr	r3, [pc, #112]	; (2c710 <dfu_target_modem_done+0x78>)
   2c69e:	4d1d      	ldr	r5, [pc, #116]	; (2c714 <dfu_target_modem_done+0x7c>)
   2c6a0:	1ae4      	subs	r4, r4, r3
   2c6a2:	08e4      	lsrs	r4, r4, #3
   2c6a4:	01a4      	lsls	r4, r4, #6
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   2c6a6:	f044 0103 	orr.w	r1, r4, #3
	int err = 0;

	if (successful) {
   2c6aa:	b348      	cbz	r0, 2c700 <dfu_target_modem_done+0x68>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   2c6ac:	481a      	ldr	r0, [pc, #104]	; (2c718 <dfu_target_modem_done+0x80>)
   2c6ae:	f00b ff07 	bl	384c0 <log_0>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   2c6b2:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2c6b4:	2300      	movs	r3, #0
   2c6b6:	f240 2103 	movw	r1, #515	; 0x203
   2c6ba:	2204      	movs	r2, #4
   2c6bc:	9300      	str	r3, [sp, #0]
   2c6be:	f00c fbcb 	bl	38e58 <z_impl_zsock_setsockopt>
	if (err < 0) {
   2c6c2:	1e01      	subs	r1, r0, #0
   2c6c4:	da0f      	bge.n	2c6e6 <dfu_target_modem_done+0x4e>
   2c6c6:	9103      	str	r1, [sp, #12]
		if (errno == ENOEXEC) {
   2c6c8:	f00c fdfd 	bl	392c6 <__errno>
   2c6cc:	6803      	ldr	r3, [r0, #0]
   2c6ce:	9903      	ldr	r1, [sp, #12]
   2c6d0:	2b08      	cmp	r3, #8
   2c6d2:	f044 0601 	orr.w	r6, r4, #1
   2c6d6:	d102      	bne.n	2c6de <dfu_target_modem_done+0x46>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   2c6d8:	f7ff fdf6 	bl	2c2c8 <get_modem_error>
   2c6dc:	4601      	mov	r1, r0
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   2c6de:	4632      	mov	r2, r6
   2c6e0:	480e      	ldr	r0, [pc, #56]	; (2c71c <dfu_target_modem_done+0x84>)
   2c6e2:	f00b fefc 	bl	384de <log_1>
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   2c6e6:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   2c6e8:	f00c faed 	bl	38cc6 <z_impl_zsock_close>
	if (err < 0) {
   2c6ec:	1e05      	subs	r5, r0, #0
   2c6ee:	da0b      	bge.n	2c708 <dfu_target_modem_done+0x70>
		LOG_ERR("Failed to close modem DFU socket.");
   2c6f0:	480b      	ldr	r0, [pc, #44]	; (2c720 <dfu_target_modem_done+0x88>)
   2c6f2:	f044 0101 	orr.w	r1, r4, #1
   2c6f6:	f00b fee3 	bl	384c0 <log_0>
		return err;
	}

	return 0;
}
   2c6fa:	4628      	mov	r0, r5
   2c6fc:	b004      	add	sp, #16
   2c6fe:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Modem upgrade aborted.");
   2c700:	4808      	ldr	r0, [pc, #32]	; (2c724 <dfu_target_modem_done+0x8c>)
   2c702:	f00b fedd 	bl	384c0 <log_0>
   2c706:	e7ee      	b.n	2c6e6 <dfu_target_modem_done+0x4e>
	return 0;
   2c708:	2500      	movs	r5, #0
   2c70a:	e7f6      	b.n	2c6fa <dfu_target_modem_done+0x62>
   2c70c:	0003c314 	.word	0x0003c314
   2c710:	0003c2cc 	.word	0x0003c2cc
   2c714:	2002386c 	.word	0x2002386c
   2c718:	00040692 	.word	0x00040692
   2c71c:	000406c1 	.word	0x000406c1
   2c720:	000406fc 	.word	0x000406fc
   2c724:	000406e5 	.word	0x000406e5

0002c728 <reset_flash_context>:

	return 0;
}

static void reset_flash_context(void)
{
   2c728:	b508      	push	{r3, lr}
	/* Need to set bytes_written to 0 */
	int err = flash_img_init(&flash_img);
   2c72a:	4808      	ldr	r0, [pc, #32]	; (2c74c <reset_flash_context+0x24>)
   2c72c:	f00c fab5 	bl	38c9a <flash_img_init>

	if (err) {
   2c730:	b158      	cbz	r0, 2c74a <reset_flash_context+0x22>
   2c732:	4b07      	ldr	r3, [pc, #28]	; (2c750 <reset_flash_context+0x28>)
   2c734:	4907      	ldr	r1, [pc, #28]	; (2c754 <reset_flash_context+0x2c>)
		LOG_ERR("Unable to re-initialize flash_img");
   2c736:	4808      	ldr	r0, [pc, #32]	; (2c758 <reset_flash_context+0x30>)
   2c738:	1ac9      	subs	r1, r1, r3
   2c73a:	08c9      	lsrs	r1, r1, #3
   2c73c:	0189      	lsls	r1, r1, #6
   2c73e:	f041 0101 	orr.w	r1, r1, #1
	}
	err = store_flash_img_context();
	if (err != 0) {
		LOG_ERR("Unable to reset write progress: %d", err);
	}
}
   2c742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Unable to re-initialize flash_img");
   2c746:	f00b bebb 	b.w	384c0 <log_0>
}
   2c74a:	bd08      	pop	{r3, pc}
   2c74c:	20023874 	.word	0x20023874
   2c750:	0003c2cc 	.word	0x0003c2cc
   2c754:	0003c30c 	.word	0x0003c30c
   2c758:	0004072f 	.word	0x0004072f

0002c75c <dfu_target_mcuboot_identify>:
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   2c75c:	6800      	ldr	r0, [r0, #0]
}
   2c75e:	4b02      	ldr	r3, [pc, #8]	; (2c768 <dfu_target_mcuboot_identify+0xc>)
   2c760:	1ac3      	subs	r3, r0, r3
   2c762:	4258      	negs	r0, r3
   2c764:	4158      	adcs	r0, r3
   2c766:	4770      	bx	lr
   2c768:	96f3b83d 	.word	0x96f3b83d

0002c76c <dfu_target_mcuboot_init>:
{
   2c76c:	b538      	push	{r3, r4, r5, lr}
   2c76e:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   2c770:	4812      	ldr	r0, [pc, #72]	; (2c7bc <dfu_target_mcuboot_init+0x50>)
   2c772:	f00c fa92 	bl	38c9a <flash_img_init>
	if (err != 0) {
   2c776:	4604      	mov	r4, r0
   2c778:	b160      	cbz	r0, 2c794 <dfu_target_mcuboot_init+0x28>
   2c77a:	4a11      	ldr	r2, [pc, #68]	; (2c7c0 <dfu_target_mcuboot_init+0x54>)
   2c77c:	4b11      	ldr	r3, [pc, #68]	; (2c7c4 <dfu_target_mcuboot_init+0x58>)
		LOG_ERR("flash_img_init error %d", err);
   2c77e:	4601      	mov	r1, r0
   2c780:	1ad2      	subs	r2, r2, r3
   2c782:	08d2      	lsrs	r2, r2, #3
   2c784:	0192      	lsls	r2, r2, #6
   2c786:	4810      	ldr	r0, [pc, #64]	; (2c7c8 <dfu_target_mcuboot_init+0x5c>)
   2c788:	f042 0201 	orr.w	r2, r2, #1
   2c78c:	f00b fea7 	bl	384de <log_1>
}
   2c790:	4620      	mov	r0, r4
   2c792:	bd38      	pop	{r3, r4, r5, pc}
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   2c794:	f5b5 2ff0 	cmp.w	r5, #491520	; 0x78000
   2c798:	d9fa      	bls.n	2c790 <dfu_target_mcuboot_init+0x24>
   2c79a:	4a0a      	ldr	r2, [pc, #40]	; (2c7c4 <dfu_target_mcuboot_init+0x58>)
   2c79c:	4b08      	ldr	r3, [pc, #32]	; (2c7c0 <dfu_target_mcuboot_init+0x54>)
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   2c79e:	4629      	mov	r1, r5
   2c7a0:	1a9b      	subs	r3, r3, r2
   2c7a2:	08db      	lsrs	r3, r3, #3
   2c7a4:	019b      	lsls	r3, r3, #6
   2c7a6:	f44f 22f0 	mov.w	r2, #491520	; 0x78000
   2c7aa:	4808      	ldr	r0, [pc, #32]	; (2c7cc <dfu_target_mcuboot_init+0x60>)
   2c7ac:	f043 0301 	orr.w	r3, r3, #1
   2c7b0:	f00b feac 	bl	3850c <log_2>
		return -EFBIG;
   2c7b4:	f06f 041a 	mvn.w	r4, #26
   2c7b8:	e7ea      	b.n	2c790 <dfu_target_mcuboot_init+0x24>
   2c7ba:	bf00      	nop
   2c7bc:	20023874 	.word	0x20023874
   2c7c0:	0003c30c 	.word	0x0003c30c
   2c7c4:	0003c2cc 	.word	0x0003c2cc
   2c7c8:	00040751 	.word	0x00040751
   2c7cc:	00040769 	.word	0x00040769

0002c7d0 <dfu_target_mcuboot_offset_get>:
{
   2c7d0:	b510      	push	{r4, lr}
   2c7d2:	4604      	mov	r4, r0
	*out = flash_img_bytes_written(&flash_img);
   2c7d4:	4802      	ldr	r0, [pc, #8]	; (2c7e0 <dfu_target_mcuboot_offset_get+0x10>)
   2c7d6:	f00c fa3b 	bl	38c50 <flash_img_bytes_written>
   2c7da:	6020      	str	r0, [r4, #0]
}
   2c7dc:	2000      	movs	r0, #0
   2c7de:	bd10      	pop	{r4, pc}
   2c7e0:	20023874 	.word	0x20023874

0002c7e4 <dfu_target_mcuboot_write>:
{
   2c7e4:	460a      	mov	r2, r1
   2c7e6:	b510      	push	{r4, lr}
	int err = flash_img_buffered_write(&flash_img, (uint8_t *)buf, len, false);
   2c7e8:	4601      	mov	r1, r0
   2c7ea:	2300      	movs	r3, #0
   2c7ec:	4808      	ldr	r0, [pc, #32]	; (2c810 <dfu_target_mcuboot_write+0x2c>)
   2c7ee:	f00c fa12 	bl	38c16 <flash_img_buffered_write>
	if (err != 0) {
   2c7f2:	4604      	mov	r4, r0
   2c7f4:	b150      	cbz	r0, 2c80c <dfu_target_mcuboot_write+0x28>
   2c7f6:	4a07      	ldr	r2, [pc, #28]	; (2c814 <dfu_target_mcuboot_write+0x30>)
   2c7f8:	4b07      	ldr	r3, [pc, #28]	; (2c818 <dfu_target_mcuboot_write+0x34>)
		LOG_ERR("flash_img_buffered_write error %d", err);
   2c7fa:	4601      	mov	r1, r0
   2c7fc:	1ad2      	subs	r2, r2, r3
   2c7fe:	08d2      	lsrs	r2, r2, #3
   2c800:	0192      	lsls	r2, r2, #6
   2c802:	4806      	ldr	r0, [pc, #24]	; (2c81c <dfu_target_mcuboot_write+0x38>)
   2c804:	f042 0201 	orr.w	r2, r2, #1
   2c808:	f00b fe69 	bl	384de <log_1>
}
   2c80c:	4620      	mov	r0, r4
   2c80e:	bd10      	pop	{r4, pc}
   2c810:	20023874 	.word	0x20023874
   2c814:	0003c30c 	.word	0x0003c30c
   2c818:	0003c2cc 	.word	0x0003c2cc
   2c81c:	0004079b 	.word	0x0004079b

0002c820 <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   2c820:	b538      	push	{r3, r4, r5, lr}
   2c822:	4d17      	ldr	r5, [pc, #92]	; (2c880 <dfu_target_mcuboot_done+0x60>)
   2c824:	4b17      	ldr	r3, [pc, #92]	; (2c884 <dfu_target_mcuboot_done+0x64>)
   2c826:	1aed      	subs	r5, r5, r3
   2c828:	08ed      	lsrs	r5, r5, #3
   2c82a:	01ad      	lsls	r5, r5, #6
	int err = 0;

	if (successful) {
   2c82c:	b318      	cbz	r0, 2c876 <dfu_target_mcuboot_done+0x56>
		err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   2c82e:	2200      	movs	r2, #0
   2c830:	2301      	movs	r3, #1
   2c832:	4611      	mov	r1, r2
   2c834:	4814      	ldr	r0, [pc, #80]	; (2c888 <dfu_target_mcuboot_done+0x68>)
   2c836:	f00c f9ee 	bl	38c16 <flash_img_buffered_write>
		if (err != 0) {
   2c83a:	4604      	mov	r4, r0
   2c83c:	b148      	cbz	r0, 2c852 <dfu_target_mcuboot_done+0x32>
			LOG_ERR("flash_img_buffered_write error %d", err);
   2c83e:	4601      	mov	r1, r0
   2c840:	4812      	ldr	r0, [pc, #72]	; (2c88c <dfu_target_mcuboot_done+0x6c>)
   2c842:	f045 0201 	orr.w	r2, r5, #1
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   2c846:	f00b fe4a 	bl	384de <log_1>
			reset_flash_context();
   2c84a:	f7ff ff6d 	bl	2c728 <reset_flash_context>
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	reset_flash_context();
	return err;
}
   2c84e:	4620      	mov	r0, r4
   2c850:	bd38      	pop	{r3, r4, r5, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   2c852:	f7f8 fa7f 	bl	24d54 <boot_request_upgrade>
		if (err != 0) {
   2c856:	4604      	mov	r4, r0
   2c858:	b120      	cbz	r0, 2c864 <dfu_target_mcuboot_done+0x44>
			LOG_ERR("boot_request_upgrade error %d", err);
   2c85a:	4601      	mov	r1, r0
   2c85c:	f045 0201 	orr.w	r2, r5, #1
   2c860:	480b      	ldr	r0, [pc, #44]	; (2c890 <dfu_target_mcuboot_done+0x70>)
   2c862:	e7f0      	b.n	2c846 <dfu_target_mcuboot_done+0x26>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   2c864:	480b      	ldr	r0, [pc, #44]	; (2c894 <dfu_target_mcuboot_done+0x74>)
   2c866:	f045 0103 	orr.w	r1, r5, #3
		LOG_INF("MCUBoot image upgrade aborted.");
   2c86a:	f00b fe29 	bl	384c0 <log_0>
	return err;
   2c86e:	2400      	movs	r4, #0
	reset_flash_context();
   2c870:	f7ff ff5a 	bl	2c728 <reset_flash_context>
	return err;
   2c874:	e7eb      	b.n	2c84e <dfu_target_mcuboot_done+0x2e>
		LOG_INF("MCUBoot image upgrade aborted.");
   2c876:	4808      	ldr	r0, [pc, #32]	; (2c898 <dfu_target_mcuboot_done+0x78>)
   2c878:	f045 0103 	orr.w	r1, r5, #3
   2c87c:	e7f5      	b.n	2c86a <dfu_target_mcuboot_done+0x4a>
   2c87e:	bf00      	nop
   2c880:	0003c30c 	.word	0x0003c30c
   2c884:	0003c2cc 	.word	0x0003c2cc
   2c888:	20023874 	.word	0x20023874
   2c88c:	0004079b 	.word	0x0004079b
   2c890:	000407bd 	.word	0x000407bd
   2c894:	000407db 	.word	0x000407db
   2c898:	00040816 	.word	0x00040816

0002c89c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   2c89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2c8a0:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   2c8a2:	4c21      	ldr	r4, [pc, #132]	; (2c928 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   2c8a4:	4e21      	ldr	r6, [pc, #132]	; (2c92c <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2c8a6:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   2c8aa:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2c934 <check_ext_api_requests+0x98>
{
   2c8ae:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2c8b0:	45a8      	cmp	r8, r5
   2c8b2:	d803      	bhi.n	2c8bc <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   2c8b4:	2000      	movs	r0, #0
   2c8b6:	b005      	add	sp, #20
   2c8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   2c8bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c8be:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2c8c2:	681f      	ldr	r7, [r3, #0]
   2c8c4:	ab01      	add	r3, sp, #4
   2c8c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   2c8ca:	220c      	movs	r2, #12
   2c8cc:	4619      	mov	r1, r3
   2c8ce:	4638      	mov	r0, r7
   2c8d0:	f00e fd61 	bl	3b396 <memcmp>
   2c8d4:	b990      	cbnz	r0, 2c8fc <check_ext_api_requests+0x60>
   2c8d6:	b18f      	cbz	r7, 2c8fc <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2c8d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   2c8da:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2c8dc:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   2c8de:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2c8e0:	4291      	cmp	r1, r2
   2c8e2:	d10b      	bne.n	2c8fc <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   2c8e4:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   2c8e6:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   2c8e8:	4291      	cmp	r1, r2
   2c8ea:	d807      	bhi.n	2c8fc <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   2c8ec:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   2c8ee:	4291      	cmp	r1, r2
   2c8f0:	d904      	bls.n	2c8fc <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   2c8f2:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2c8f4:	695b      	ldr	r3, [r3, #20]
   2c8f6:	ea32 0303 	bics.w	r3, r2, r3
   2c8fa:	d00a      	beq.n	2c912 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   2c8fc:	6a27      	ldr	r7, [r4, #32]
   2c8fe:	b167      	cbz	r7, 2c91a <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   2c900:	480b      	ldr	r0, [pc, #44]	; (2c930 <check_ext_api_requests+0x94>)
   2c902:	f00b f96b 	bl	37bdc <printk>
			k_panic();
   2c906:	4040      	eors	r0, r0
   2c908:	f380 8811 	msr	BASEPRI, r0
   2c90c:	f04f 0004 	mov.w	r0, #4
   2c910:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   2c912:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2c914:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   2c916:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2c918:	e7ca      	b.n	2c8b0 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   2c91a:	4648      	mov	r0, r9
   2c91c:	f00b f95e 	bl	37bdc <printk>
			*ext_api_req->ext_api = NULL;
   2c920:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c922:	601f      	str	r7, [r3, #0]
   2c924:	e7f5      	b.n	2c912 <check_ext_api_requests+0x76>
   2c926:	bf00      	nop
   2c928:	0001c43c 	.word	0x0001c43c
   2c92c:	0003c40c 	.word	0x0003c40c
   2c930:	00040848 	.word	0x00040848
   2c934:	00040871 	.word	0x00040871

0002c938 <packet_free_cb>:
   2c938:	b510      	push	{r4, lr}
   2c93a:	4604      	mov	r4, r0
   2c93c:	6800      	ldr	r0, [r0, #0]
   2c93e:	f004 fef7 	bl	31730 <rpc_logobj_client_data_free>
   2c942:	68a0      	ldr	r0, [r4, #8]
   2c944:	b118      	cbz	r0, 2c94e <packet_free_cb+0x16>
   2c946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c94a:	f007 bd21 	b.w	34390 <nrf_free>
   2c94e:	bd10      	pop	{r4, pc}

0002c950 <logobj_event_handler>:
   2c950:	b530      	push	{r4, r5, lr}
   2c952:	4b3b      	ldr	r3, [pc, #236]	; (2ca40 <logobj_event_handler+0xf0>)
   2c954:	b085      	sub	sp, #20
   2c956:	681d      	ldr	r5, [r3, #0]
   2c958:	2d00      	cmp	r5, #0
   2c95a:	d04c      	beq.n	2c9f6 <logobj_event_handler+0xa6>
   2c95c:	f248 0302 	movw	r3, #32770	; 0x8002
   2c960:	4299      	cmp	r1, r3
   2c962:	d053      	beq.n	2ca0c <logobj_event_handler+0xbc>
   2c964:	d91c      	bls.n	2c9a0 <logobj_event_handler+0x50>
   2c966:	f248 0303 	movw	r3, #32771	; 0x8003
   2c96a:	4299      	cmp	r1, r3
   2c96c:	d05a      	beq.n	2ca24 <logobj_event_handler+0xd4>
   2c96e:	f249 0301 	movw	r3, #36865	; 0x9001
   2c972:	4299      	cmp	r1, r3
   2c974:	d147      	bne.n	2ca06 <logobj_event_handler+0xb6>
   2c976:	2400      	movs	r4, #0
   2c978:	6843      	ldr	r3, [r0, #4]
   2c97a:	6802      	ldr	r2, [r0, #0]
   2c97c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   2c980:	e9cd 2300 	strd	r2, r3, [sp]
   2c984:	69e8      	ldr	r0, [r5, #28]
   2c986:	4669      	mov	r1, sp
   2c988:	6803      	ldr	r3, [r0, #0]
   2c98a:	685b      	ldr	r3, [r3, #4]
   2c98c:	4798      	blx	r3
   2c98e:	3001      	adds	r0, #1
   2c990:	d04e      	beq.n	2ca30 <logobj_event_handler+0xe0>
   2c992:	4620      	mov	r0, r4
   2c994:	682b      	ldr	r3, [r5, #0]
   2c996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2c99a:	602b      	str	r3, [r5, #0]
   2c99c:	b005      	add	sp, #20
   2c99e:	bd30      	pop	{r4, r5, pc}
   2c9a0:	f248 0301 	movw	r3, #32769	; 0x8001
   2c9a4:	4299      	cmp	r1, r3
   2c9a6:	d12e      	bne.n	2ca06 <logobj_event_handler+0xb6>
   2c9a8:	68c3      	ldr	r3, [r0, #12]
   2c9aa:	2b00      	cmp	r3, #0
   2c9ac:	d135      	bne.n	2ca1a <logobj_event_handler+0xca>
   2c9ae:	6828      	ldr	r0, [r5, #0]
   2c9b0:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2c9b4:	d03e      	beq.n	2ca34 <logobj_event_handler+0xe4>
   2c9b6:	682b      	ldr	r3, [r5, #0]
   2c9b8:	b29b      	uxth	r3, r3
   2c9ba:	2b01      	cmp	r3, #1
   2c9bc:	d105      	bne.n	2c9ca <logobj_event_handler+0x7a>
   2c9be:	682b      	ldr	r3, [r5, #0]
   2c9c0:	0c1b      	lsrs	r3, r3, #16
   2c9c2:	041b      	lsls	r3, r3, #16
   2c9c4:	f043 0302 	orr.w	r3, r3, #2
   2c9c8:	602b      	str	r3, [r5, #0]
   2c9ca:	4b1e      	ldr	r3, [pc, #120]	; (2ca44 <logobj_event_handler+0xf4>)
   2c9cc:	781a      	ldrb	r2, [r3, #0]
   2c9ce:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2c9d2:	2a00      	cmp	r2, #0
   2c9d4:	d031      	beq.n	2ca3a <logobj_event_handler+0xea>
   2c9d6:	4a1c      	ldr	r2, [pc, #112]	; (2ca48 <logobj_event_handler+0xf8>)
   2c9d8:	7811      	ldrb	r1, [r2, #0]
   2c9da:	b909      	cbnz	r1, 2c9e0 <logobj_event_handler+0x90>
   2c9dc:	2101      	movs	r1, #1
   2c9de:	7011      	strb	r1, [r2, #0]
   2c9e0:	2000      	movs	r0, #0
   2c9e2:	7018      	strb	r0, [r3, #0]
   2c9e4:	682b      	ldr	r3, [r5, #0]
   2c9e6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2c9ea:	602b      	str	r3, [r5, #0]
   2c9ec:	682b      	ldr	r3, [r5, #0]
   2c9ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2c9f2:	602b      	str	r3, [r5, #0]
   2c9f4:	e7d2      	b.n	2c99c <logobj_event_handler+0x4c>
   2c9f6:	6800      	ldr	r0, [r0, #0]
   2c9f8:	2800      	cmp	r0, #0
   2c9fa:	d0cf      	beq.n	2c99c <logobj_event_handler+0x4c>
   2c9fc:	f004 fe98 	bl	31730 <rpc_logobj_client_data_free>
   2ca00:	4628      	mov	r0, r5
   2ca02:	b005      	add	sp, #20
   2ca04:	bd30      	pop	{r4, r5, pc}
   2ca06:	2000      	movs	r0, #0
   2ca08:	b005      	add	sp, #20
   2ca0a:	bd30      	pop	{r4, r5, pc}
   2ca0c:	682b      	ldr	r3, [r5, #0]
   2ca0e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   2ca12:	d00b      	beq.n	2ca2c <logobj_event_handler+0xdc>
   2ca14:	68c0      	ldr	r0, [r0, #12]
   2ca16:	2800      	cmp	r0, #0
   2ca18:	d0e4      	beq.n	2c9e4 <logobj_event_handler+0x94>
   2ca1a:	230e      	movs	r3, #14
   2ca1c:	2000      	movs	r0, #0
   2ca1e:	606b      	str	r3, [r5, #4]
   2ca20:	b005      	add	sp, #20
   2ca22:	bd30      	pop	{r4, r5, pc}
   2ca24:	68c3      	ldr	r3, [r0, #12]
   2ca26:	2b01      	cmp	r3, #1
   2ca28:	d1a5      	bne.n	2c976 <logobj_event_handler+0x26>
   2ca2a:	e7f6      	b.n	2ca1a <logobj_event_handler+0xca>
   2ca2c:	4618      	mov	r0, r3
   2ca2e:	e7b5      	b.n	2c99c <logobj_event_handler+0x4c>
   2ca30:	2002      	movs	r0, #2
   2ca32:	e7b3      	b.n	2c99c <logobj_event_handler+0x4c>
   2ca34:	230e      	movs	r3, #14
   2ca36:	606b      	str	r3, [r5, #4]
   2ca38:	e7b0      	b.n	2c99c <logobj_event_handler+0x4c>
   2ca3a:	4a03      	ldr	r2, [pc, #12]	; (2ca48 <logobj_event_handler+0xf8>)
   2ca3c:	7011      	strb	r1, [r2, #0]
   2ca3e:	e7cf      	b.n	2c9e0 <logobj_event_handler+0x90>
   2ca40:	20023aa0 	.word	0x20023aa0
   2ca44:	2002cb92 	.word	0x2002cb92
   2ca48:	2002cb93 	.word	0x2002cb93

0002ca4c <logobj_interface_init>:
   2ca4c:	2300      	movs	r3, #0
   2ca4e:	b510      	push	{r4, lr}
   2ca50:	4808      	ldr	r0, [pc, #32]	; (2ca74 <logobj_interface_init+0x28>)
   2ca52:	4c09      	ldr	r4, [pc, #36]	; (2ca78 <logobj_interface_init+0x2c>)
   2ca54:	4909      	ldr	r1, [pc, #36]	; (2ca7c <logobj_interface_init+0x30>)
   2ca56:	4a0a      	ldr	r2, [pc, #40]	; (2ca80 <logobj_interface_init+0x34>)
   2ca58:	7023      	strb	r3, [r4, #0]
   2ca5a:	6003      	str	r3, [r0, #0]
   2ca5c:	700b      	strb	r3, [r1, #0]
   2ca5e:	6013      	str	r3, [r2, #0]
   2ca60:	f004 fe2a 	bl	316b8 <rpc_logobj_client_init>
   2ca64:	b918      	cbnz	r0, 2ca6e <logobj_interface_init+0x22>
   2ca66:	2201      	movs	r2, #1
   2ca68:	4b06      	ldr	r3, [pc, #24]	; (2ca84 <logobj_interface_init+0x38>)
   2ca6a:	701a      	strb	r2, [r3, #0]
   2ca6c:	bd10      	pop	{r4, pc}
   2ca6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ca72:	bd10      	pop	{r4, pc}
   2ca74:	20023aa0 	.word	0x20023aa0
   2ca78:	2002cb93 	.word	0x2002cb93
   2ca7c:	2002cb92 	.word	0x2002cb92
   2ca80:	20023a9c 	.word	0x20023a9c
   2ca84:	2002cb94 	.word	0x2002cb94

0002ca88 <logobj_interface_open>:
   2ca88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ca8c:	2400      	movs	r4, #0
   2ca8e:	4b5b      	ldr	r3, [pc, #364]	; (2cbfc <logobj_interface_open+0x174>)
   2ca90:	b084      	sub	sp, #16
   2ca92:	781b      	ldrb	r3, [r3, #0]
   2ca94:	9401      	str	r4, [sp, #4]
   2ca96:	2b00      	cmp	r3, #0
   2ca98:	f000 809f 	beq.w	2cbda <logobj_interface_open+0x152>
   2ca9c:	2866      	cmp	r0, #102	; 0x66
   2ca9e:	4680      	mov	r8, r0
   2caa0:	f040 808f 	bne.w	2cbc2 <logobj_interface_open+0x13a>
   2caa4:	2902      	cmp	r1, #2
   2caa6:	4689      	mov	r9, r1
   2caa8:	f040 808b 	bne.w	2cbc2 <logobj_interface_open+0x13a>
   2caac:	f240 2305 	movw	r3, #517	; 0x205
   2cab0:	429a      	cmp	r2, r3
   2cab2:	4692      	mov	sl, r2
   2cab4:	f040 8085 	bne.w	2cbc2 <logobj_interface_open+0x13a>
   2cab8:	4f51      	ldr	r7, [pc, #324]	; (2cc00 <logobj_interface_open+0x178>)
   2caba:	683d      	ldr	r5, [r7, #0]
   2cabc:	2d00      	cmp	r5, #0
   2cabe:	f040 8086 	bne.w	2cbce <logobj_interface_open+0x146>
   2cac2:	4a50      	ldr	r2, [pc, #320]	; (2cc04 <logobj_interface_open+0x17c>)
   2cac4:	a801      	add	r0, sp, #4
   2cac6:	f008 f83b 	bl	34b40 <interface_socket_allocate>
   2caca:	9b01      	ldr	r3, [sp, #4]
   2cacc:	4606      	mov	r6, r0
   2cace:	2b00      	cmp	r3, #0
   2cad0:	f000 808d 	beq.w	2cbee <logobj_interface_open+0x166>
   2cad4:	4629      	mov	r1, r5
   2cad6:	2204      	movs	r2, #4
   2cad8:	484b      	ldr	r0, [pc, #300]	; (2cc08 <logobj_interface_open+0x180>)
   2cada:	603b      	str	r3, [r7, #0]
   2cadc:	f00e fc89 	bl	3b3f2 <memset>
   2cae0:	9c01      	ldr	r4, [sp, #4]
   2cae2:	4629      	mov	r1, r5
   2cae4:	e9c4 8903 	strd	r8, r9, [r4, #12]
   2cae8:	f8c4 a014 	str.w	sl, [r4, #20]
   2caec:	a802      	add	r0, sp, #8
   2caee:	f004 fde9 	bl	316c4 <rpc_logobj_client_request_alloc>
   2caf2:	2800      	cmp	r0, #0
   2caf4:	d142      	bne.n	2cb7c <logobj_interface_open+0xf4>
   2caf6:	2201      	movs	r2, #1
   2caf8:	2104      	movs	r1, #4
   2cafa:	9b02      	ldr	r3, [sp, #8]
   2cafc:	4d43      	ldr	r5, [pc, #268]	; (2cc0c <logobj_interface_open+0x184>)
   2cafe:	7358      	strb	r0, [r3, #13]
   2cb00:	7398      	strb	r0, [r3, #14]
   2cb02:	73d8      	strb	r0, [r3, #15]
   2cb04:	7258      	strb	r0, [r3, #9]
   2cb06:	7298      	strb	r0, [r3, #10]
   2cb08:	72d8      	strb	r0, [r3, #11]
   2cb0a:	7219      	strb	r1, [r3, #8]
   2cb0c:	702a      	strb	r2, [r5, #0]
   2cb0e:	731a      	strb	r2, [r3, #12]
   2cb10:	6822      	ldr	r2, [r4, #0]
   2cb12:	4618      	mov	r0, r3
   2cb14:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   2cb18:	6022      	str	r2, [r4, #0]
   2cb1a:	f247 0101 	movw	r1, #28673	; 0x7001
   2cb1e:	f004 fde9 	bl	316f4 <rpc_logobj_client_request_send>
   2cb22:	bb68      	cbnz	r0, 2cb80 <logobj_interface_open+0xf8>
   2cb24:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2cb26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2cb2a:	2900      	cmp	r1, #0
   2cb2c:	bf08      	it	eq
   2cb2e:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2cb32:	ab04      	add	r3, sp, #16
   2cb34:	f843 1d04 	str.w	r1, [r3, #-4]!
   2cb38:	4630      	mov	r0, r6
   2cb3a:	4611      	mov	r1, r2
   2cb3c:	f008 f8b2 	bl	34ca4 <interface_socket_wait>
   2cb40:	4604      	mov	r4, r0
   2cb42:	b310      	cbz	r0, 2cb8a <logobj_interface_open+0x102>
   2cb44:	9a01      	ldr	r2, [sp, #4]
   2cb46:	2e00      	cmp	r6, #0
   2cb48:	6813      	ldr	r3, [r2, #0]
   2cb4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2cb4e:	6013      	str	r3, [r2, #0]
   2cb50:	9a01      	ldr	r2, [sp, #4]
   2cb52:	6813      	ldr	r3, [r2, #0]
   2cb54:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2cb58:	6013      	str	r3, [r2, #0]
   2cb5a:	9a01      	ldr	r2, [sp, #4]
   2cb5c:	6813      	ldr	r3, [r2, #0]
   2cb5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2cb62:	6013      	str	r3, [r2, #0]
   2cb64:	da3f      	bge.n	2cbe6 <logobj_interface_open+0x15e>
   2cb66:	2300      	movs	r3, #0
   2cb68:	4620      	mov	r0, r4
   2cb6a:	603b      	str	r3, [r7, #0]
   2cb6c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2cb70:	f7fc fee2 	bl	29938 <bsd_os_errno_set>
   2cb74:	4630      	mov	r0, r6
   2cb76:	b004      	add	sp, #16
   2cb78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2cb7c:	240c      	movs	r4, #12
   2cb7e:	e7e1      	b.n	2cb44 <logobj_interface_open+0xbc>
   2cb80:	9802      	ldr	r0, [sp, #8]
   2cb82:	f004 fdcd 	bl	31720 <rpc_logobj_client_message_free>
   2cb86:	2405      	movs	r4, #5
   2cb88:	e7dc      	b.n	2cb44 <logobj_interface_open+0xbc>
   2cb8a:	4630      	mov	r0, r6
   2cb8c:	f008 f8fe 	bl	34d8c <interface_socket_from_handle_get>
   2cb90:	b120      	cbz	r0, 2cb9c <logobj_interface_open+0x114>
   2cb92:	6844      	ldr	r4, [r0, #4]
   2cb94:	b114      	cbz	r4, 2cb9c <logobj_interface_open+0x114>
   2cb96:	2300      	movs	r3, #0
   2cb98:	6043      	str	r3, [r0, #4]
   2cb9a:	e7d3      	b.n	2cb44 <logobj_interface_open+0xbc>
   2cb9c:	4630      	mov	r0, r6
   2cb9e:	9a01      	ldr	r2, [sp, #4]
   2cba0:	6813      	ldr	r3, [r2, #0]
   2cba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2cba6:	6013      	str	r3, [r2, #0]
   2cba8:	9a01      	ldr	r2, [sp, #4]
   2cbaa:	6813      	ldr	r3, [r2, #0]
   2cbac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2cbb0:	6013      	str	r3, [r2, #0]
   2cbb2:	9a01      	ldr	r2, [sp, #4]
   2cbb4:	6813      	ldr	r3, [r2, #0]
   2cbb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2cbba:	6013      	str	r3, [r2, #0]
   2cbbc:	b004      	add	sp, #16
   2cbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2cbc2:	2016      	movs	r0, #22
   2cbc4:	f7fc feb8 	bl	29938 <bsd_os_errno_set>
   2cbc8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2cbcc:	e7d2      	b.n	2cb74 <logobj_interface_open+0xec>
   2cbce:	2001      	movs	r0, #1
   2cbd0:	f7fc feb2 	bl	29938 <bsd_os_errno_set>
   2cbd4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2cbd8:	e7cc      	b.n	2cb74 <logobj_interface_open+0xec>
   2cbda:	2070      	movs	r0, #112	; 0x70
   2cbdc:	f7fc feac 	bl	29938 <bsd_os_errno_set>
   2cbe0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2cbe4:	e7c6      	b.n	2cb74 <logobj_interface_open+0xec>
   2cbe6:	4630      	mov	r0, r6
   2cbe8:	f008 f80e 	bl	34c08 <interface_socket_free>
   2cbec:	e7bb      	b.n	2cb66 <logobj_interface_open+0xde>
   2cbee:	2018      	movs	r0, #24
   2cbf0:	f7fc fea2 	bl	29938 <bsd_os_errno_set>
   2cbf4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2cbf8:	e7bc      	b.n	2cb74 <logobj_interface_open+0xec>
   2cbfa:	bf00      	nop
   2cbfc:	2002cb94 	.word	0x2002cb94
   2cc00:	20023aa0 	.word	0x20023aa0
   2cc04:	0002c939 	.word	0x0002c939
   2cc08:	20023a9c 	.word	0x20023a9c
   2cc0c:	2002cb92 	.word	0x2002cb92

0002cc10 <logobj_interface_read>:
   2cc10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2cc14:	b087      	sub	sp, #28
   2cc16:	2900      	cmp	r1, #0
   2cc18:	d06b      	beq.n	2ccf2 <logobj_interface_read+0xe2>
   2cc1a:	2a00      	cmp	r2, #0
   2cc1c:	4617      	mov	r7, r2
   2cc1e:	dd68      	ble.n	2ccf2 <logobj_interface_read+0xe2>
   2cc20:	461d      	mov	r5, r3
   2cc22:	4680      	mov	r8, r0
   2cc24:	460e      	mov	r6, r1
   2cc26:	f008 f8b1 	bl	34d8c <interface_socket_from_handle_get>
   2cc2a:	4604      	mov	r4, r0
   2cc2c:	2800      	cmp	r0, #0
   2cc2e:	d066      	beq.n	2ccfe <logobj_interface_read+0xee>
   2cc30:	bb4d      	cbnz	r5, 2cc86 <logobj_interface_read+0x76>
   2cc32:	69e0      	ldr	r0, [r4, #28]
   2cc34:	07aa      	lsls	r2, r5, #30
   2cc36:	6803      	ldr	r3, [r0, #0]
   2cc38:	68db      	ldr	r3, [r3, #12]
   2cc3a:	d52d      	bpl.n	2cc98 <logobj_interface_read+0x88>
   2cc3c:	4798      	blx	r3
   2cc3e:	3001      	adds	r0, #1
   2cc40:	d047      	beq.n	2ccd2 <logobj_interface_read+0xc2>
   2cc42:	6823      	ldr	r3, [r4, #0]
   2cc44:	69e0      	ldr	r0, [r4, #28]
   2cc46:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   2cc4a:	d044      	beq.n	2ccd6 <logobj_interface_read+0xc6>
   2cc4c:	2100      	movs	r1, #0
   2cc4e:	6823      	ldr	r3, [r4, #0]
   2cc50:	462a      	mov	r2, r5
   2cc52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2cc56:	6023      	str	r3, [r4, #0]
   2cc58:	e9cd 1104 	strd	r1, r1, [sp, #16]
   2cc5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   2cc60:	6803      	ldr	r3, [r0, #0]
   2cc62:	a902      	add	r1, sp, #8
   2cc64:	689b      	ldr	r3, [r3, #8]
   2cc66:	4798      	blx	r3
   2cc68:	4605      	mov	r5, r0
   2cc6a:	69e0      	ldr	r0, [r4, #28]
   2cc6c:	6803      	ldr	r3, [r0, #0]
   2cc6e:	68db      	ldr	r3, [r3, #12]
   2cc70:	4798      	blx	r3
   2cc72:	3001      	adds	r0, #1
   2cc74:	d003      	beq.n	2cc7e <logobj_interface_read+0x6e>
   2cc76:	6823      	ldr	r3, [r4, #0]
   2cc78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2cc7c:	6023      	str	r3, [r4, #0]
   2cc7e:	4628      	mov	r0, r5
   2cc80:	b007      	add	sp, #28
   2cc82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2cc86:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   2cc8a:	d1d2      	bne.n	2cc32 <logobj_interface_read+0x22>
   2cc8c:	202d      	movs	r0, #45	; 0x2d
   2cc8e:	f7fc fe53 	bl	29938 <bsd_os_errno_set>
   2cc92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2cc96:	e7f2      	b.n	2cc7e <logobj_interface_read+0x6e>
   2cc98:	6822      	ldr	r2, [r4, #0]
   2cc9a:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   2cc9e:	d1cd      	bne.n	2cc3c <logobj_interface_read+0x2c>
   2cca0:	4798      	blx	r3
   2cca2:	1c43      	adds	r3, r0, #1
   2cca4:	d1cd      	bne.n	2cc42 <logobj_interface_read+0x32>
   2cca6:	6a22      	ldr	r2, [r4, #32]
   2cca8:	ab06      	add	r3, sp, #24
   2ccaa:	2a00      	cmp	r2, #0
   2ccac:	bf18      	it	ne
   2ccae:	4610      	movne	r0, r2
   2ccb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2ccb4:	f843 0d14 	str.w	r0, [r3, #-20]!
   2ccb8:	4611      	mov	r1, r2
   2ccba:	4640      	mov	r0, r8
   2ccbc:	f007 fff2 	bl	34ca4 <interface_socket_wait>
   2ccc0:	b158      	cbz	r0, 2ccda <logobj_interface_read+0xca>
   2ccc2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ccc6:	f7fc fe37 	bl	29938 <bsd_os_errno_set>
   2ccca:	4628      	mov	r0, r5
   2cccc:	b007      	add	sp, #28
   2ccce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2ccd2:	2023      	movs	r0, #35	; 0x23
   2ccd4:	e7f5      	b.n	2ccc2 <logobj_interface_read+0xb2>
   2ccd6:	461d      	mov	r5, r3
   2ccd8:	e7c8      	b.n	2cc6c <logobj_interface_read+0x5c>
   2ccda:	4640      	mov	r0, r8
   2ccdc:	f008 f856 	bl	34d8c <interface_socket_from_handle_get>
   2cce0:	4603      	mov	r3, r0
   2cce2:	2800      	cmp	r0, #0
   2cce4:	d0ad      	beq.n	2cc42 <logobj_interface_read+0x32>
   2cce6:	6840      	ldr	r0, [r0, #4]
   2cce8:	2800      	cmp	r0, #0
   2ccea:	d0aa      	beq.n	2cc42 <logobj_interface_read+0x32>
   2ccec:	f8c3 9004 	str.w	r9, [r3, #4]
   2ccf0:	e7e7      	b.n	2ccc2 <logobj_interface_read+0xb2>
   2ccf2:	2016      	movs	r0, #22
   2ccf4:	f7fc fe20 	bl	29938 <bsd_os_errno_set>
   2ccf8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ccfc:	e7bf      	b.n	2cc7e <logobj_interface_read+0x6e>
   2ccfe:	2009      	movs	r0, #9
   2cd00:	f7fc fe1a 	bl	29938 <bsd_os_errno_set>
   2cd04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2cd08:	e7b9      	b.n	2cc7e <logobj_interface_read+0x6e>
   2cd0a:	bf00      	nop

0002cd0c <logobj_interface_write>:
   2cd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cd10:	b082      	sub	sp, #8
   2cd12:	2900      	cmp	r1, #0
   2cd14:	d06b      	beq.n	2cdee <logobj_interface_write+0xe2>
   2cd16:	2a04      	cmp	r2, #4
   2cd18:	d169      	bne.n	2cdee <logobj_interface_write+0xe2>
   2cd1a:	461f      	mov	r7, r3
   2cd1c:	4606      	mov	r6, r0
   2cd1e:	460d      	mov	r5, r1
   2cd20:	f008 f834 	bl	34d8c <interface_socket_from_handle_get>
   2cd24:	4604      	mov	r4, r0
   2cd26:	2800      	cmp	r0, #0
   2cd28:	d074      	beq.n	2ce14 <logobj_interface_write+0x108>
   2cd2a:	b1e7      	cbz	r7, 2cd66 <logobj_interface_write+0x5a>
   2cd2c:	07b8      	lsls	r0, r7, #30
   2cd2e:	d56b      	bpl.n	2ce08 <logobj_interface_write+0xfc>
   2cd30:	6823      	ldr	r3, [r4, #0]
   2cd32:	039b      	lsls	r3, r3, #14
   2cd34:	d564      	bpl.n	2ce00 <logobj_interface_write+0xf4>
   2cd36:	2700      	movs	r7, #0
   2cd38:	6823      	ldr	r3, [r4, #0]
   2cd3a:	2100      	movs	r1, #0
   2cd3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2cd40:	6023      	str	r3, [r4, #0]
   2cd42:	4668      	mov	r0, sp
   2cd44:	f8d5 8000 	ldr.w	r8, [r5]
   2cd48:	f004 fcbc 	bl	316c4 <rpc_logobj_client_request_alloc>
   2cd4c:	b198      	cbz	r0, 2cd76 <logobj_interface_write+0x6a>
   2cd4e:	200c      	movs	r0, #12
   2cd50:	6823      	ldr	r3, [r4, #0]
   2cd52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2cd56:	6023      	str	r3, [r4, #0]
   2cd58:	f7fc fdee 	bl	29938 <bsd_os_errno_set>
   2cd5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cd60:	b002      	add	sp, #8
   2cd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cd66:	6803      	ldr	r3, [r0, #0]
   2cd68:	00d9      	lsls	r1, r3, #3
   2cd6a:	d4e1      	bmi.n	2cd30 <logobj_interface_write+0x24>
   2cd6c:	6803      	ldr	r3, [r0, #0]
   2cd6e:	039a      	lsls	r2, r3, #14
   2cd70:	d548      	bpl.n	2ce04 <logobj_interface_write+0xf8>
   2cd72:	2701      	movs	r7, #1
   2cd74:	e7e0      	b.n	2cd38 <logobj_interface_write+0x2c>
   2cd76:	2504      	movs	r5, #4
   2cd78:	9b00      	ldr	r3, [sp, #0]
   2cd7a:	f247 0103 	movw	r1, #28675	; 0x7003
   2cd7e:	f8c3 800c 	str.w	r8, [r3, #12]
   2cd82:	7258      	strb	r0, [r3, #9]
   2cd84:	7298      	strb	r0, [r3, #10]
   2cd86:	72d8      	strb	r0, [r3, #11]
   2cd88:	721d      	strb	r5, [r3, #8]
   2cd8a:	4618      	mov	r0, r3
   2cd8c:	f004 fcb2 	bl	316f4 <rpc_logobj_client_request_send>
   2cd90:	4680      	mov	r8, r0
   2cd92:	bb18      	cbnz	r0, 2cddc <logobj_interface_write+0xd0>
   2cd94:	b1d7      	cbz	r7, 2cdcc <logobj_interface_write+0xc0>
   2cd96:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2cd98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2cd9c:	2900      	cmp	r1, #0
   2cd9e:	bf08      	it	eq
   2cda0:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2cda4:	ab02      	add	r3, sp, #8
   2cda6:	f843 1d04 	str.w	r1, [r3, #-4]!
   2cdaa:	4630      	mov	r0, r6
   2cdac:	4611      	mov	r1, r2
   2cdae:	f007 ff79 	bl	34ca4 <interface_socket_wait>
   2cdb2:	b120      	cbz	r0, 2cdbe <logobj_interface_write+0xb2>
   2cdb4:	6823      	ldr	r3, [r4, #0]
   2cdb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2cdba:	6023      	str	r3, [r4, #0]
   2cdbc:	e7cc      	b.n	2cd58 <logobj_interface_write+0x4c>
   2cdbe:	4630      	mov	r0, r6
   2cdc0:	f007 ffe4 	bl	34d8c <interface_socket_from_handle_get>
   2cdc4:	4603      	mov	r3, r0
   2cdc6:	b108      	cbz	r0, 2cdcc <logobj_interface_write+0xc0>
   2cdc8:	6840      	ldr	r0, [r0, #4]
   2cdca:	b9b0      	cbnz	r0, 2cdfa <logobj_interface_write+0xee>
   2cdcc:	4628      	mov	r0, r5
   2cdce:	6823      	ldr	r3, [r4, #0]
   2cdd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2cdd4:	6023      	str	r3, [r4, #0]
   2cdd6:	b002      	add	sp, #8
   2cdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cddc:	9800      	ldr	r0, [sp, #0]
   2cdde:	f004 fc9f 	bl	31720 <rpc_logobj_client_message_free>
   2cde2:	6823      	ldr	r3, [r4, #0]
   2cde4:	2005      	movs	r0, #5
   2cde6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2cdea:	6023      	str	r3, [r4, #0]
   2cdec:	e7b4      	b.n	2cd58 <logobj_interface_write+0x4c>
   2cdee:	2016      	movs	r0, #22
   2cdf0:	f7fc fda2 	bl	29938 <bsd_os_errno_set>
   2cdf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cdf8:	e7b2      	b.n	2cd60 <logobj_interface_write+0x54>
   2cdfa:	f8c3 8004 	str.w	r8, [r3, #4]
   2cdfe:	e7d9      	b.n	2cdb4 <logobj_interface_write+0xa8>
   2ce00:	2073      	movs	r0, #115	; 0x73
   2ce02:	e7a9      	b.n	2cd58 <logobj_interface_write+0x4c>
   2ce04:	2009      	movs	r0, #9
   2ce06:	e7a7      	b.n	2cd58 <logobj_interface_write+0x4c>
   2ce08:	202d      	movs	r0, #45	; 0x2d
   2ce0a:	f7fc fd95 	bl	29938 <bsd_os_errno_set>
   2ce0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ce12:	e7a5      	b.n	2cd60 <logobj_interface_write+0x54>
   2ce14:	2009      	movs	r0, #9
   2ce16:	f7fc fd8f 	bl	29938 <bsd_os_errno_set>
   2ce1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ce1e:	e79f      	b.n	2cd60 <logobj_interface_write+0x54>

0002ce20 <logobj_interface_setopt>:
   2ce20:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ce22:	2901      	cmp	r1, #1
   2ce24:	b085      	sub	sp, #20
   2ce26:	d06d      	beq.n	2cf04 <logobj_interface_setopt+0xe4>
   2ce28:	461e      	mov	r6, r3
   2ce2a:	f240 2305 	movw	r3, #517	; 0x205
   2ce2e:	4299      	cmp	r1, r3
   2ce30:	f040 80a0 	bne.w	2cf74 <logobj_interface_setopt+0x154>
   2ce34:	4607      	mov	r7, r0
   2ce36:	4615      	mov	r5, r2
   2ce38:	f007 ffa8 	bl	34d8c <interface_socket_from_handle_get>
   2ce3c:	4604      	mov	r4, r0
   2ce3e:	2800      	cmp	r0, #0
   2ce40:	f000 80c3 	beq.w	2cfca <logobj_interface_setopt+0x1aa>
   2ce44:	2d01      	cmp	r5, #1
   2ce46:	d019      	beq.n	2ce7c <logobj_interface_setopt+0x5c>
   2ce48:	2d02      	cmp	r5, #2
   2ce4a:	d010      	beq.n	2ce6e <logobj_interface_setopt+0x4e>
   2ce4c:	252a      	movs	r5, #42	; 0x2a
   2ce4e:	6803      	ldr	r3, [r0, #0]
   2ce50:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2ce54:	6023      	str	r3, [r4, #0]
   2ce56:	6823      	ldr	r3, [r4, #0]
   2ce58:	4628      	mov	r0, r5
   2ce5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2ce5e:	6023      	str	r3, [r4, #0]
   2ce60:	f7fc fd6a 	bl	29938 <bsd_os_errno_set>
   2ce64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ce68:	4628      	mov	r0, r5
   2ce6a:	b005      	add	sp, #20
   2ce6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ce6e:	b116      	cbz	r6, 2ce76 <logobj_interface_setopt+0x56>
   2ce70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ce72:	2b01      	cmp	r3, #1
   2ce74:	d04e      	beq.n	2cf14 <logobj_interface_setopt+0xf4>
   2ce76:	6823      	ldr	r3, [r4, #0]
   2ce78:	2516      	movs	r5, #22
   2ce7a:	e7e9      	b.n	2ce50 <logobj_interface_setopt+0x30>
   2ce7c:	2e00      	cmp	r6, #0
   2ce7e:	d0fa      	beq.n	2ce76 <logobj_interface_setopt+0x56>
   2ce80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ce82:	2b04      	cmp	r3, #4
   2ce84:	d1f7      	bne.n	2ce76 <logobj_interface_setopt+0x56>
   2ce86:	2100      	movs	r1, #0
   2ce88:	a803      	add	r0, sp, #12
   2ce8a:	f004 fc1b 	bl	316c4 <rpc_logobj_client_request_alloc>
   2ce8e:	4605      	mov	r5, r0
   2ce90:	2800      	cmp	r0, #0
   2ce92:	d175      	bne.n	2cf80 <logobj_interface_setopt+0x160>
   2ce94:	9803      	ldr	r0, [sp, #12]
   2ce96:	2208      	movs	r2, #8
   2ce98:	4629      	mov	r1, r5
   2ce9a:	300c      	adds	r0, #12
   2ce9c:	f00e faa9 	bl	3b3f2 <memset>
   2cea0:	9803      	ldr	r0, [sp, #12]
   2cea2:	4631      	mov	r1, r6
   2cea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2cea6:	300c      	adds	r0, #12
   2cea8:	f00e fa83 	bl	3b3b2 <memcpy>
   2ceac:	2308      	movs	r3, #8
   2ceae:	9803      	ldr	r0, [sp, #12]
   2ceb0:	f247 0102 	movw	r1, #28674	; 0x7002
   2ceb4:	7203      	strb	r3, [r0, #8]
   2ceb6:	7245      	strb	r5, [r0, #9]
   2ceb8:	7285      	strb	r5, [r0, #10]
   2ceba:	72c5      	strb	r5, [r0, #11]
   2cebc:	6823      	ldr	r3, [r4, #0]
   2cebe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2cec2:	6023      	str	r3, [r4, #0]
   2cec4:	f004 fc16 	bl	316f4 <rpc_logobj_client_request_send>
   2cec8:	2800      	cmp	r0, #0
   2ceca:	d178      	bne.n	2cfbe <logobj_interface_setopt+0x19e>
   2cecc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2cece:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2ced2:	2900      	cmp	r1, #0
   2ced4:	bf08      	it	eq
   2ced6:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2ceda:	ab04      	add	r3, sp, #16
   2cedc:	f843 1d08 	str.w	r1, [r3, #-8]!
   2cee0:	4638      	mov	r0, r7
   2cee2:	4611      	mov	r1, r2
   2cee4:	f007 fede 	bl	34ca4 <interface_socket_wait>
   2cee8:	4605      	mov	r5, r0
   2ceea:	2800      	cmp	r0, #0
   2ceec:	d140      	bne.n	2cf70 <logobj_interface_setopt+0x150>
   2ceee:	4638      	mov	r0, r7
   2cef0:	f007 ff4c 	bl	34d8c <interface_socket_from_handle_get>
   2cef4:	2800      	cmp	r0, #0
   2cef6:	d04e      	beq.n	2cf96 <logobj_interface_setopt+0x176>
   2cef8:	6843      	ldr	r3, [r0, #4]
   2cefa:	2b00      	cmp	r3, #0
   2cefc:	d04b      	beq.n	2cf96 <logobj_interface_setopt+0x176>
   2cefe:	6045      	str	r5, [r0, #4]
   2cf00:	461d      	mov	r5, r3
   2cf02:	e035      	b.n	2cf70 <logobj_interface_setopt+0x150>
   2cf04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2cf06:	9400      	str	r4, [sp, #0]
   2cf08:	f007 ff68 	bl	34ddc <interface_socket_setopt>
   2cf0c:	4605      	mov	r5, r0
   2cf0e:	4628      	mov	r0, r5
   2cf10:	b005      	add	sp, #20
   2cf12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cf14:	2100      	movs	r1, #0
   2cf16:	a802      	add	r0, sp, #8
   2cf18:	7835      	ldrb	r5, [r6, #0]
   2cf1a:	f004 fbd3 	bl	316c4 <rpc_logobj_client_request_alloc>
   2cf1e:	bb78      	cbnz	r0, 2cf80 <logobj_interface_setopt+0x160>
   2cf20:	2d01      	cmp	r5, #1
   2cf22:	bf08      	it	eq
   2cf24:	4b2c      	ldreq	r3, [pc, #176]	; (2cfd8 <logobj_interface_setopt+0x1b8>)
   2cf26:	f04f 0204 	mov.w	r2, #4
   2cf2a:	bf08      	it	eq
   2cf2c:	701d      	strbeq	r5, [r3, #0]
   2cf2e:	2300      	movs	r3, #0
   2cf30:	9802      	ldr	r0, [sp, #8]
   2cf32:	f247 0101 	movw	r1, #28673	; 0x7001
   2cf36:	7243      	strb	r3, [r0, #9]
   2cf38:	60c5      	str	r5, [r0, #12]
   2cf3a:	7283      	strb	r3, [r0, #10]
   2cf3c:	72c3      	strb	r3, [r0, #11]
   2cf3e:	7202      	strb	r2, [r0, #8]
   2cf40:	6823      	ldr	r3, [r4, #0]
   2cf42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2cf46:	6023      	str	r3, [r4, #0]
   2cf48:	f004 fbd4 	bl	316f4 <rpc_logobj_client_request_send>
   2cf4c:	4606      	mov	r6, r0
   2cf4e:	bb80      	cbnz	r0, 2cfb2 <logobj_interface_setopt+0x192>
   2cf50:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2cf52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2cf56:	2900      	cmp	r1, #0
   2cf58:	bf08      	it	eq
   2cf5a:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   2cf5e:	ab04      	add	r3, sp, #16
   2cf60:	f843 1d04 	str.w	r1, [r3, #-4]!
   2cf64:	4638      	mov	r0, r7
   2cf66:	4611      	mov	r1, r2
   2cf68:	f007 fe9c 	bl	34ca4 <interface_socket_wait>
   2cf6c:	4605      	mov	r5, r0
   2cf6e:	b150      	cbz	r0, 2cf86 <logobj_interface_setopt+0x166>
   2cf70:	6823      	ldr	r3, [r4, #0]
   2cf72:	e76d      	b.n	2ce50 <logobj_interface_setopt+0x30>
   2cf74:	202a      	movs	r0, #42	; 0x2a
   2cf76:	f7fc fcdf 	bl	29938 <bsd_os_errno_set>
   2cf7a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2cf7e:	e773      	b.n	2ce68 <logobj_interface_setopt+0x48>
   2cf80:	6823      	ldr	r3, [r4, #0]
   2cf82:	250c      	movs	r5, #12
   2cf84:	e764      	b.n	2ce50 <logobj_interface_setopt+0x30>
   2cf86:	4638      	mov	r0, r7
   2cf88:	f007 ff00 	bl	34d8c <interface_socket_from_handle_get>
   2cf8c:	b140      	cbz	r0, 2cfa0 <logobj_interface_setopt+0x180>
   2cf8e:	6845      	ldr	r5, [r0, #4]
   2cf90:	b135      	cbz	r5, 2cfa0 <logobj_interface_setopt+0x180>
   2cf92:	6046      	str	r6, [r0, #4]
   2cf94:	e7ec      	b.n	2cf70 <logobj_interface_setopt+0x150>
   2cf96:	4631      	mov	r1, r6
   2cf98:	2204      	movs	r2, #4
   2cf9a:	4810      	ldr	r0, [pc, #64]	; (2cfdc <logobj_interface_setopt+0x1bc>)
   2cf9c:	f00e fa09 	bl	3b3b2 <memcpy>
   2cfa0:	6823      	ldr	r3, [r4, #0]
   2cfa2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2cfa6:	6023      	str	r3, [r4, #0]
   2cfa8:	6823      	ldr	r3, [r4, #0]
   2cfaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2cfae:	6023      	str	r3, [r4, #0]
   2cfb0:	e75a      	b.n	2ce68 <logobj_interface_setopt+0x48>
   2cfb2:	9802      	ldr	r0, [sp, #8]
   2cfb4:	f004 fbb4 	bl	31720 <rpc_logobj_client_message_free>
   2cfb8:	2505      	movs	r5, #5
   2cfba:	6823      	ldr	r3, [r4, #0]
   2cfbc:	e748      	b.n	2ce50 <logobj_interface_setopt+0x30>
   2cfbe:	9803      	ldr	r0, [sp, #12]
   2cfc0:	f004 fbae 	bl	31720 <rpc_logobj_client_message_free>
   2cfc4:	2505      	movs	r5, #5
   2cfc6:	6823      	ldr	r3, [r4, #0]
   2cfc8:	e742      	b.n	2ce50 <logobj_interface_setopt+0x30>
   2cfca:	2009      	movs	r0, #9
   2cfcc:	f7fc fcb4 	bl	29938 <bsd_os_errno_set>
   2cfd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2cfd4:	e748      	b.n	2ce68 <logobj_interface_setopt+0x48>
   2cfd6:	bf00      	nop
   2cfd8:	2002cb92 	.word	0x2002cb92
   2cfdc:	20023a9c 	.word	0x20023a9c

0002cfe0 <logobj_interface_getopt>:
   2cfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cfe2:	2901      	cmp	r1, #1
   2cfe4:	b083      	sub	sp, #12
   2cfe6:	9e08      	ldr	r6, [sp, #32]
   2cfe8:	d030      	beq.n	2d04c <logobj_interface_getopt+0x6c>
   2cfea:	461f      	mov	r7, r3
   2cfec:	f240 2305 	movw	r3, #517	; 0x205
   2cff0:	4299      	cmp	r1, r3
   2cff2:	d134      	bne.n	2d05e <logobj_interface_getopt+0x7e>
   2cff4:	4615      	mov	r5, r2
   2cff6:	f007 fec9 	bl	34d8c <interface_socket_from_handle_get>
   2cffa:	2800      	cmp	r0, #0
   2cffc:	d037      	beq.n	2d06e <logobj_interface_getopt+0x8e>
   2cffe:	2d01      	cmp	r5, #1
   2d000:	d015      	beq.n	2d02e <logobj_interface_getopt+0x4e>
   2d002:	2d02      	cmp	r5, #2
   2d004:	d10b      	bne.n	2d01e <logobj_interface_getopt+0x3e>
   2d006:	b387      	cbz	r7, 2d06a <logobj_interface_getopt+0x8a>
   2d008:	6833      	ldr	r3, [r6, #0]
   2d00a:	b373      	cbz	r3, 2d06a <logobj_interface_getopt+0x8a>
   2d00c:	2300      	movs	r3, #0
   2d00e:	2201      	movs	r2, #1
   2d010:	4618      	mov	r0, r3
   2d012:	491a      	ldr	r1, [pc, #104]	; (2d07c <logobj_interface_getopt+0x9c>)
   2d014:	7809      	ldrb	r1, [r1, #0]
   2d016:	7039      	strb	r1, [r7, #0]
   2d018:	6032      	str	r2, [r6, #0]
   2d01a:	b003      	add	sp, #12
   2d01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d01e:	2009      	movs	r0, #9
   2d020:	f7fc fc8a 	bl	29938 <bsd_os_errno_set>
   2d024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d028:	4618      	mov	r0, r3
   2d02a:	b003      	add	sp, #12
   2d02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d02e:	b1e7      	cbz	r7, 2d06a <logobj_interface_getopt+0x8a>
   2d030:	6833      	ldr	r3, [r6, #0]
   2d032:	2b03      	cmp	r3, #3
   2d034:	d919      	bls.n	2d06a <logobj_interface_getopt+0x8a>
   2d036:	4638      	mov	r0, r7
   2d038:	2204      	movs	r2, #4
   2d03a:	4911      	ldr	r1, [pc, #68]	; (2d080 <logobj_interface_getopt+0xa0>)
   2d03c:	f00e f9b9 	bl	3b3b2 <memcpy>
   2d040:	2300      	movs	r3, #0
   2d042:	2204      	movs	r2, #4
   2d044:	4618      	mov	r0, r3
   2d046:	6032      	str	r2, [r6, #0]
   2d048:	b003      	add	sp, #12
   2d04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d04c:	9600      	str	r6, [sp, #0]
   2d04e:	f007 ff0b 	bl	34e68 <interface_socket_getopt>
   2d052:	4603      	mov	r3, r0
   2d054:	2800      	cmp	r0, #0
   2d056:	d1e3      	bne.n	2d020 <logobj_interface_getopt+0x40>
   2d058:	4618      	mov	r0, r3
   2d05a:	b003      	add	sp, #12
   2d05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d05e:	202a      	movs	r0, #42	; 0x2a
   2d060:	f7fc fc6a 	bl	29938 <bsd_os_errno_set>
   2d064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d068:	e7de      	b.n	2d028 <logobj_interface_getopt+0x48>
   2d06a:	2016      	movs	r0, #22
   2d06c:	e7d8      	b.n	2d020 <logobj_interface_getopt+0x40>
   2d06e:	2009      	movs	r0, #9
   2d070:	f7fc fc62 	bl	29938 <bsd_os_errno_set>
   2d074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d078:	e7d6      	b.n	2d028 <logobj_interface_getopt+0x48>
   2d07a:	bf00      	nop
   2d07c:	2002cb93 	.word	0x2002cb93
   2d080:	20023a9c 	.word	0x20023a9c

0002d084 <logobj_interface_close>:
   2d084:	b510      	push	{r4, lr}
   2d086:	4604      	mov	r4, r0
   2d088:	f007 fe80 	bl	34d8c <interface_socket_from_handle_get>
   2d08c:	b138      	cbz	r0, 2d09e <logobj_interface_close+0x1a>
   2d08e:	4620      	mov	r0, r4
   2d090:	f007 fdba 	bl	34c08 <interface_socket_free>
   2d094:	2300      	movs	r3, #0
   2d096:	4a05      	ldr	r2, [pc, #20]	; (2d0ac <logobj_interface_close+0x28>)
   2d098:	4618      	mov	r0, r3
   2d09a:	6013      	str	r3, [r2, #0]
   2d09c:	bd10      	pop	{r4, pc}
   2d09e:	2009      	movs	r0, #9
   2d0a0:	f7fc fc4a 	bl	29938 <bsd_os_errno_set>
   2d0a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d0a8:	bd10      	pop	{r4, pc}
   2d0aa:	bf00      	nop
   2d0ac:	20023aa0 	.word	0x20023aa0

0002d0b0 <rpc_transport_send>:
   2d0b0:	f000 bed8 	b.w	2de64 <rpc_transport_ipc_send>

0002d0b4 <rpc_transport_rpc_alloc>:
   2d0b4:	f000 bf58 	b.w	2df68 <rpc_transport_ipc_tx_rpc_data_alloc>

0002d0b8 <rpc_transport_data_alloc>:
   2d0b8:	f000 bfbe 	b.w	2e038 <rpc_transport_ipc_tx_data_alloc>

0002d0bc <rpc_transport_rpc_free>:
   2d0bc:	f000 bdb6 	b.w	2dc2c <rpc_transport_ipc_msg_free>

0002d0c0 <rpc_transport_data_free>:
   2d0c0:	f000 ba64 	b.w	2d58c <rpc_transport_ipc_data_free>

0002d0c4 <ipc_trace_init>:
   2d0c4:	4b01      	ldr	r3, [pc, #4]	; (2d0cc <ipc_trace_init+0x8>)
   2d0c6:	6018      	str	r0, [r3, #0]
   2d0c8:	4770      	bx	lr
   2d0ca:	bf00      	nop
   2d0cc:	20023ab0 	.word	0x20023ab0

0002d0d0 <bsd_os_trace_irq_handler>:
   2d0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d0d2:	4b6e      	ldr	r3, [pc, #440]	; (2d28c <bsd_os_trace_irq_handler+0x1bc>)
   2d0d4:	b083      	sub	sp, #12
   2d0d6:	781b      	ldrb	r3, [r3, #0]
   2d0d8:	2b00      	cmp	r3, #0
   2d0da:	f000 80d3 	beq.w	2d284 <bsd_os_trace_irq_handler+0x1b4>
   2d0de:	4b6c      	ldr	r3, [pc, #432]	; (2d290 <bsd_os_trace_irq_handler+0x1c0>)
   2d0e0:	681c      	ldr	r4, [r3, #0]
   2d0e2:	b124      	cbz	r4, 2d0ee <bsd_os_trace_irq_handler+0x1e>
   2d0e4:	68a3      	ldr	r3, [r4, #8]
   2d0e6:	6862      	ldr	r2, [r4, #4]
   2d0e8:	4293      	cmp	r3, r2
   2d0ea:	f040 808c 	bne.w	2d206 <bsd_os_trace_irq_handler+0x136>
   2d0ee:	4b69      	ldr	r3, [pc, #420]	; (2d294 <bsd_os_trace_irq_handler+0x1c4>)
   2d0f0:	681c      	ldr	r4, [r3, #0]
   2d0f2:	b11c      	cbz	r4, 2d0fc <bsd_os_trace_irq_handler+0x2c>
   2d0f4:	68a3      	ldr	r3, [r4, #8]
   2d0f6:	6862      	ldr	r2, [r4, #4]
   2d0f8:	4293      	cmp	r3, r2
   2d0fa:	d146      	bne.n	2d18a <bsd_os_trace_irq_handler+0xba>
   2d0fc:	4b66      	ldr	r3, [pc, #408]	; (2d298 <bsd_os_trace_irq_handler+0x1c8>)
   2d0fe:	681c      	ldr	r4, [r3, #0]
   2d100:	b11c      	cbz	r4, 2d10a <bsd_os_trace_irq_handler+0x3a>
   2d102:	68a3      	ldr	r3, [r4, #8]
   2d104:	6862      	ldr	r2, [r4, #4]
   2d106:	4293      	cmp	r3, r2
   2d108:	d101      	bne.n	2d10e <bsd_os_trace_irq_handler+0x3e>
   2d10a:	b003      	add	sp, #12
   2d10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d10e:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2d112:	f8ad 2000 	strh.w	r2, [sp]
   2d116:	7822      	ldrb	r2, [r4, #0]
   2d118:	466e      	mov	r6, sp
   2d11a:	f88d 2004 	strb.w	r2, [sp, #4]
   2d11e:	6862      	ldr	r2, [r4, #4]
   2d120:	2105      	movs	r1, #5
   2d122:	4293      	cmp	r3, r2
   2d124:	bf2a      	itet	cs
   2d126:	6927      	ldrcs	r7, [r4, #16]
   2d128:	1ad7      	subcc	r7, r2, r3
   2d12a:	1aff      	subcs	r7, r7, r3
   2d12c:	4293      	cmp	r3, r2
   2d12e:	bf94      	ite	ls
   2d130:	2500      	movls	r5, #0
   2d132:	68e5      	ldrhi	r5, [r4, #12]
   2d134:	b2bf      	uxth	r7, r7
   2d136:	bf88      	it	hi
   2d138:	1b52      	subhi	r2, r2, r5
   2d13a:	4630      	mov	r0, r6
   2d13c:	bf88      	it	hi
   2d13e:	b295      	uxthhi	r5, r2
   2d140:	f8ad 7002 	strh.w	r7, [sp, #2]
   2d144:	f00c fef1 	bl	39f2a <bsd_os_trace_put>
   2d148:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d14c:	68a0      	ldr	r0, [r4, #8]
   2d14e:	f00c feec 	bl	39f2a <bsd_os_trace_put>
   2d152:	68a3      	ldr	r3, [r4, #8]
   2d154:	6922      	ldr	r2, [r4, #16]
   2d156:	441f      	add	r7, r3
   2d158:	4297      	cmp	r7, r2
   2d15a:	bf08      	it	eq
   2d15c:	68e3      	ldreq	r3, [r4, #12]
   2d15e:	60a7      	str	r7, [r4, #8]
   2d160:	bf08      	it	eq
   2d162:	60a3      	streq	r3, [r4, #8]
   2d164:	2d00      	cmp	r5, #0
   2d166:	d0d0      	beq.n	2d10a <bsd_os_trace_irq_handler+0x3a>
   2d168:	2105      	movs	r1, #5
   2d16a:	4630      	mov	r0, r6
   2d16c:	f8ad 5002 	strh.w	r5, [sp, #2]
   2d170:	f00c fedb 	bl	39f2a <bsd_os_trace_put>
   2d174:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d178:	68e0      	ldr	r0, [r4, #12]
   2d17a:	f00c fed6 	bl	39f2a <bsd_os_trace_put>
   2d17e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2d182:	68e3      	ldr	r3, [r4, #12]
   2d184:	4413      	add	r3, r2
   2d186:	60a3      	str	r3, [r4, #8]
   2d188:	e7bf      	b.n	2d10a <bsd_os_trace_irq_handler+0x3a>
   2d18a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2d18e:	f8ad 2000 	strh.w	r2, [sp]
   2d192:	7822      	ldrb	r2, [r4, #0]
   2d194:	466e      	mov	r6, sp
   2d196:	f88d 2004 	strb.w	r2, [sp, #4]
   2d19a:	6862      	ldr	r2, [r4, #4]
   2d19c:	2105      	movs	r1, #5
   2d19e:	4293      	cmp	r3, r2
   2d1a0:	bf2a      	itet	cs
   2d1a2:	6927      	ldrcs	r7, [r4, #16]
   2d1a4:	1ad7      	subcc	r7, r2, r3
   2d1a6:	1aff      	subcs	r7, r7, r3
   2d1a8:	4293      	cmp	r3, r2
   2d1aa:	bf94      	ite	ls
   2d1ac:	2500      	movls	r5, #0
   2d1ae:	68e5      	ldrhi	r5, [r4, #12]
   2d1b0:	b2bf      	uxth	r7, r7
   2d1b2:	bf88      	it	hi
   2d1b4:	1b52      	subhi	r2, r2, r5
   2d1b6:	4630      	mov	r0, r6
   2d1b8:	bf88      	it	hi
   2d1ba:	b295      	uxthhi	r5, r2
   2d1bc:	f8ad 7002 	strh.w	r7, [sp, #2]
   2d1c0:	f00c feb3 	bl	39f2a <bsd_os_trace_put>
   2d1c4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d1c8:	68a0      	ldr	r0, [r4, #8]
   2d1ca:	f00c feae 	bl	39f2a <bsd_os_trace_put>
   2d1ce:	68a3      	ldr	r3, [r4, #8]
   2d1d0:	6922      	ldr	r2, [r4, #16]
   2d1d2:	441f      	add	r7, r3
   2d1d4:	4297      	cmp	r7, r2
   2d1d6:	bf08      	it	eq
   2d1d8:	68e3      	ldreq	r3, [r4, #12]
   2d1da:	60a7      	str	r7, [r4, #8]
   2d1dc:	bf08      	it	eq
   2d1de:	60a3      	streq	r3, [r4, #8]
   2d1e0:	2d00      	cmp	r5, #0
   2d1e2:	d08b      	beq.n	2d0fc <bsd_os_trace_irq_handler+0x2c>
   2d1e4:	2105      	movs	r1, #5
   2d1e6:	4630      	mov	r0, r6
   2d1e8:	f8ad 5002 	strh.w	r5, [sp, #2]
   2d1ec:	f00c fe9d 	bl	39f2a <bsd_os_trace_put>
   2d1f0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d1f4:	68e0      	ldr	r0, [r4, #12]
   2d1f6:	f00c fe98 	bl	39f2a <bsd_os_trace_put>
   2d1fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2d1fe:	68e3      	ldr	r3, [r4, #12]
   2d200:	4413      	add	r3, r2
   2d202:	60a3      	str	r3, [r4, #8]
   2d204:	e77a      	b.n	2d0fc <bsd_os_trace_irq_handler+0x2c>
   2d206:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2d20a:	f8ad 2000 	strh.w	r2, [sp]
   2d20e:	7822      	ldrb	r2, [r4, #0]
   2d210:	466e      	mov	r6, sp
   2d212:	f88d 2004 	strb.w	r2, [sp, #4]
   2d216:	6862      	ldr	r2, [r4, #4]
   2d218:	2105      	movs	r1, #5
   2d21a:	4293      	cmp	r3, r2
   2d21c:	bf2a      	itet	cs
   2d21e:	6927      	ldrcs	r7, [r4, #16]
   2d220:	1ad7      	subcc	r7, r2, r3
   2d222:	1aff      	subcs	r7, r7, r3
   2d224:	4293      	cmp	r3, r2
   2d226:	bf94      	ite	ls
   2d228:	2500      	movls	r5, #0
   2d22a:	68e5      	ldrhi	r5, [r4, #12]
   2d22c:	b2bf      	uxth	r7, r7
   2d22e:	bf88      	it	hi
   2d230:	1b52      	subhi	r2, r2, r5
   2d232:	4630      	mov	r0, r6
   2d234:	bf88      	it	hi
   2d236:	b295      	uxthhi	r5, r2
   2d238:	f8ad 7002 	strh.w	r7, [sp, #2]
   2d23c:	f00c fe75 	bl	39f2a <bsd_os_trace_put>
   2d240:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d244:	68a0      	ldr	r0, [r4, #8]
   2d246:	f00c fe70 	bl	39f2a <bsd_os_trace_put>
   2d24a:	68a3      	ldr	r3, [r4, #8]
   2d24c:	6922      	ldr	r2, [r4, #16]
   2d24e:	441f      	add	r7, r3
   2d250:	4297      	cmp	r7, r2
   2d252:	bf08      	it	eq
   2d254:	68e3      	ldreq	r3, [r4, #12]
   2d256:	60a7      	str	r7, [r4, #8]
   2d258:	bf08      	it	eq
   2d25a:	60a3      	streq	r3, [r4, #8]
   2d25c:	2d00      	cmp	r5, #0
   2d25e:	f43f af46 	beq.w	2d0ee <bsd_os_trace_irq_handler+0x1e>
   2d262:	2105      	movs	r1, #5
   2d264:	4630      	mov	r0, r6
   2d266:	f8ad 5002 	strh.w	r5, [sp, #2]
   2d26a:	f00c fe5e 	bl	39f2a <bsd_os_trace_put>
   2d26e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d272:	68e0      	ldr	r0, [r4, #12]
   2d274:	f00c fe59 	bl	39f2a <bsd_os_trace_put>
   2d278:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2d27c:	68e3      	ldr	r3, [r4, #12]
   2d27e:	4413      	add	r3, r2
   2d280:	60a3      	str	r3, [r4, #8]
   2d282:	e734      	b.n	2d0ee <bsd_os_trace_irq_handler+0x1e>
   2d284:	f7fc fce4 	bl	29c50 <bsd_os_trace_irq_clear>
   2d288:	e729      	b.n	2d0de <bsd_os_trace_irq_handler+0xe>
   2d28a:	bf00      	nop
   2d28c:	2002cb95 	.word	0x2002cb95
   2d290:	20023aac 	.word	0x20023aac
   2d294:	20023aa4 	.word	0x20023aa4
   2d298:	20023aa8 	.word	0x20023aa8

0002d29c <ipc_trace_handle>:
   2d29c:	2200      	movs	r2, #0
   2d29e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d2a2:	4bb2      	ldr	r3, [pc, #712]	; (2d56c <ipc_trace_handle+0x2d0>)
   2d2a4:	b083      	sub	sp, #12
   2d2a6:	681b      	ldr	r3, [r3, #0]
   2d2a8:	6919      	ldr	r1, [r3, #16]
   2d2aa:	695c      	ldr	r4, [r3, #20]
   2d2ac:	7c18      	ldrb	r0, [r3, #16]
   2d2ae:	741a      	strb	r2, [r3, #16]
   2d2b0:	7c58      	ldrb	r0, [r3, #17]
   2d2b2:	745a      	strb	r2, [r3, #17]
   2d2b4:	7c98      	ldrb	r0, [r3, #18]
   2d2b6:	749a      	strb	r2, [r3, #18]
   2d2b8:	7cd8      	ldrb	r0, [r3, #19]
   2d2ba:	74da      	strb	r2, [r3, #19]
   2d2bc:	7d18      	ldrb	r0, [r3, #20]
   2d2be:	751a      	strb	r2, [r3, #20]
   2d2c0:	7d58      	ldrb	r0, [r3, #21]
   2d2c2:	755a      	strb	r2, [r3, #21]
   2d2c4:	7d98      	ldrb	r0, [r3, #22]
   2d2c6:	759a      	strb	r2, [r3, #22]
   2d2c8:	7dd8      	ldrb	r0, [r3, #23]
   2d2ca:	75da      	strb	r2, [r3, #23]
   2d2cc:	b1a9      	cbz	r1, 2d2fa <ipc_trace_handle+0x5e>
   2d2ce:	3901      	subs	r1, #1
   2d2d0:	2903      	cmp	r1, #3
   2d2d2:	d812      	bhi.n	2d2fa <ipc_trace_handle+0x5e>
   2d2d4:	e8df f001 	tbb	[pc, r1]
   2d2d8:	1402a97c 	.word	0x1402a97c
   2d2dc:	2501      	movs	r5, #1
   2d2de:	2003      	movs	r0, #3
   2d2e0:	2200      	movs	r2, #0
   2d2e2:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   2d2e6:	4ca2      	ldr	r4, [pc, #648]	; (2d570 <ipc_trace_handle+0x2d4>)
   2d2e8:	7025      	strb	r5, [r4, #0]
   2d2ea:	7a1c      	ldrb	r4, [r3, #8]
   2d2ec:	7218      	strb	r0, [r3, #8]
   2d2ee:	7a58      	ldrb	r0, [r3, #9]
   2d2f0:	725a      	strb	r2, [r3, #9]
   2d2f2:	7a98      	ldrb	r0, [r3, #10]
   2d2f4:	729a      	strb	r2, [r3, #10]
   2d2f6:	7ada      	ldrb	r2, [r3, #11]
   2d2f8:	72d9      	strb	r1, [r3, #11]
   2d2fa:	b003      	add	sp, #12
   2d2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d300:	2104      	movs	r1, #4
   2d302:	2200      	movs	r2, #0
   2d304:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2d308:	7a1c      	ldrb	r4, [r3, #8]
   2d30a:	7219      	strb	r1, [r3, #8]
   2d30c:	7a59      	ldrb	r1, [r3, #9]
   2d30e:	725a      	strb	r2, [r3, #9]
   2d310:	4997      	ldr	r1, [pc, #604]	; (2d570 <ipc_trace_handle+0x2d4>)
   2d312:	7a9c      	ldrb	r4, [r3, #10]
   2d314:	729a      	strb	r2, [r3, #10]
   2d316:	7adc      	ldrb	r4, [r3, #11]
   2d318:	72d8      	strb	r0, [r3, #11]
   2d31a:	700a      	strb	r2, [r1, #0]
   2d31c:	780b      	ldrb	r3, [r1, #0]
   2d31e:	2b00      	cmp	r3, #0
   2d320:	f000 809f 	beq.w	2d462 <ipc_trace_handle+0x1c6>
   2d324:	4b93      	ldr	r3, [pc, #588]	; (2d574 <ipc_trace_handle+0x2d8>)
   2d326:	681c      	ldr	r4, [r3, #0]
   2d328:	b124      	cbz	r4, 2d334 <ipc_trace_handle+0x98>
   2d32a:	68a3      	ldr	r3, [r4, #8]
   2d32c:	6862      	ldr	r2, [r4, #4]
   2d32e:	4293      	cmp	r3, r2
   2d330:	f040 80d9 	bne.w	2d4e6 <ipc_trace_handle+0x24a>
   2d334:	4b90      	ldr	r3, [pc, #576]	; (2d578 <ipc_trace_handle+0x2dc>)
   2d336:	681c      	ldr	r4, [r3, #0]
   2d338:	b124      	cbz	r4, 2d344 <ipc_trace_handle+0xa8>
   2d33a:	68a3      	ldr	r3, [r4, #8]
   2d33c:	6862      	ldr	r2, [r4, #4]
   2d33e:	4293      	cmp	r3, r2
   2d340:	f040 8092 	bne.w	2d468 <ipc_trace_handle+0x1cc>
   2d344:	4b8d      	ldr	r3, [pc, #564]	; (2d57c <ipc_trace_handle+0x2e0>)
   2d346:	681c      	ldr	r4, [r3, #0]
   2d348:	2c00      	cmp	r4, #0
   2d34a:	d0d6      	beq.n	2d2fa <ipc_trace_handle+0x5e>
   2d34c:	68a3      	ldr	r3, [r4, #8]
   2d34e:	6862      	ldr	r2, [r4, #4]
   2d350:	4293      	cmp	r3, r2
   2d352:	d0d2      	beq.n	2d2fa <ipc_trace_handle+0x5e>
   2d354:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2d358:	f8ad 2000 	strh.w	r2, [sp]
   2d35c:	7822      	ldrb	r2, [r4, #0]
   2d35e:	466e      	mov	r6, sp
   2d360:	f88d 2004 	strb.w	r2, [sp, #4]
   2d364:	6862      	ldr	r2, [r4, #4]
   2d366:	2105      	movs	r1, #5
   2d368:	4293      	cmp	r3, r2
   2d36a:	bf2a      	itet	cs
   2d36c:	6927      	ldrcs	r7, [r4, #16]
   2d36e:	1ad7      	subcc	r7, r2, r3
   2d370:	1aff      	subcs	r7, r7, r3
   2d372:	4293      	cmp	r3, r2
   2d374:	bf94      	ite	ls
   2d376:	2500      	movls	r5, #0
   2d378:	68e5      	ldrhi	r5, [r4, #12]
   2d37a:	b2bf      	uxth	r7, r7
   2d37c:	bf88      	it	hi
   2d37e:	1b52      	subhi	r2, r2, r5
   2d380:	4630      	mov	r0, r6
   2d382:	bf88      	it	hi
   2d384:	b295      	uxthhi	r5, r2
   2d386:	f8ad 7002 	strh.w	r7, [sp, #2]
   2d38a:	f00c fdce 	bl	39f2a <bsd_os_trace_put>
   2d38e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d392:	68a0      	ldr	r0, [r4, #8]
   2d394:	f00c fdc9 	bl	39f2a <bsd_os_trace_put>
   2d398:	68a3      	ldr	r3, [r4, #8]
   2d39a:	6922      	ldr	r2, [r4, #16]
   2d39c:	441f      	add	r7, r3
   2d39e:	4297      	cmp	r7, r2
   2d3a0:	bf08      	it	eq
   2d3a2:	68e3      	ldreq	r3, [r4, #12]
   2d3a4:	60a7      	str	r7, [r4, #8]
   2d3a6:	bf08      	it	eq
   2d3a8:	60a3      	streq	r3, [r4, #8]
   2d3aa:	2d00      	cmp	r5, #0
   2d3ac:	d0a5      	beq.n	2d2fa <ipc_trace_handle+0x5e>
   2d3ae:	2105      	movs	r1, #5
   2d3b0:	4630      	mov	r0, r6
   2d3b2:	f8ad 5002 	strh.w	r5, [sp, #2]
   2d3b6:	f00c fdb8 	bl	39f2a <bsd_os_trace_put>
   2d3ba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d3be:	68e0      	ldr	r0, [r4, #12]
   2d3c0:	f00c fdb3 	bl	39f2a <bsd_os_trace_put>
   2d3c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2d3c8:	68e3      	ldr	r3, [r4, #12]
   2d3ca:	4413      	add	r3, r2
   2d3cc:	60a3      	str	r3, [r4, #8]
   2d3ce:	e794      	b.n	2d2fa <ipc_trace_handle+0x5e>
   2d3d0:	4a67      	ldr	r2, [pc, #412]	; (2d570 <ipc_trace_handle+0x2d4>)
   2d3d2:	7811      	ldrb	r1, [r2, #0]
   2d3d4:	b109      	cbz	r1, 2d3da <ipc_trace_handle+0x13e>
   2d3d6:	2100      	movs	r1, #0
   2d3d8:	7011      	strb	r1, [r2, #0]
   2d3da:	68a5      	ldr	r5, [r4, #8]
   2d3dc:	2d00      	cmp	r5, #0
   2d3de:	d03b      	beq.n	2d458 <ipc_trace_handle+0x1bc>
   2d3e0:	f04f 0c00 	mov.w	ip, #0
   2d3e4:	f8df a190 	ldr.w	sl, [pc, #400]	; 2d578 <ipc_trace_handle+0x2dc>
   2d3e8:	f8df b188 	ldr.w	fp, [pc, #392]	; 2d574 <ipc_trace_handle+0x2d8>
   2d3ec:	4963      	ldr	r1, [pc, #396]	; (2d57c <ipc_trace_handle+0x2e0>)
   2d3ee:	46e1      	mov	r9, ip
   2d3f0:	4666      	mov	r6, ip
   2d3f2:	4662      	mov	r2, ip
   2d3f4:	f8d1 e000 	ldr.w	lr, [r1]
   2d3f8:	f8da 8000 	ldr.w	r8, [sl]
   2d3fc:	f8db 7000 	ldr.w	r7, [fp]
   2d400:	e008      	b.n	2d414 <ipc_trace_handle+0x178>
   2d402:	2963      	cmp	r1, #99	; 0x63
   2d404:	d016      	beq.n	2d434 <ipc_trace_handle+0x198>
   2d406:	2961      	cmp	r1, #97	; 0x61
   2d408:	bf04      	itt	eq
   2d40a:	4607      	moveq	r7, r0
   2d40c:	2601      	moveq	r6, #1
   2d40e:	3201      	adds	r2, #1
   2d410:	42aa      	cmp	r2, r5
   2d412:	d013      	beq.n	2d43c <ipc_trace_handle+0x1a0>
   2d414:	1c91      	adds	r1, r2, #2
   2d416:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   2d41a:	6848      	ldr	r0, [r1, #4]
   2d41c:	7801      	ldrb	r1, [r0, #0]
   2d41e:	2962      	cmp	r1, #98	; 0x62
   2d420:	d1ef      	bne.n	2d402 <ipc_trace_handle+0x166>
   2d422:	4680      	mov	r8, r0
   2d424:	f04f 0901 	mov.w	r9, #1
   2d428:	e7f1      	b.n	2d40e <ipc_trace_handle+0x172>
   2d42a:	f7fc fc09 	bl	29c40 <bsd_os_trace_irq_set>
   2d42e:	b003      	add	sp, #12
   2d430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d434:	4686      	mov	lr, r0
   2d436:	f04f 0c01 	mov.w	ip, #1
   2d43a:	e7e8      	b.n	2d40e <ipc_trace_handle+0x172>
   2d43c:	2e00      	cmp	r6, #0
   2d43e:	f040 8091 	bne.w	2d564 <ipc_trace_handle+0x2c8>
   2d442:	f1b9 0f00 	cmp.w	r9, #0
   2d446:	d001      	beq.n	2d44c <ipc_trace_handle+0x1b0>
   2d448:	f8ca 8000 	str.w	r8, [sl]
   2d44c:	f1bc 0f00 	cmp.w	ip, #0
   2d450:	d002      	beq.n	2d458 <ipc_trace_handle+0x1bc>
   2d452:	4a4a      	ldr	r2, [pc, #296]	; (2d57c <ipc_trace_handle+0x2e0>)
   2d454:	f8c2 e000 	str.w	lr, [r2]
   2d458:	2001      	movs	r0, #1
   2d45a:	2200      	movs	r2, #0
   2d45c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   2d460:	e743      	b.n	2d2ea <ipc_trace_handle+0x4e>
   2d462:	f7fc fbf5 	bl	29c50 <bsd_os_trace_irq_clear>
   2d466:	e75d      	b.n	2d324 <ipc_trace_handle+0x88>
   2d468:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2d46c:	f8ad 2000 	strh.w	r2, [sp]
   2d470:	7822      	ldrb	r2, [r4, #0]
   2d472:	466e      	mov	r6, sp
   2d474:	f88d 2004 	strb.w	r2, [sp, #4]
   2d478:	6862      	ldr	r2, [r4, #4]
   2d47a:	2105      	movs	r1, #5
   2d47c:	4293      	cmp	r3, r2
   2d47e:	bf2a      	itet	cs
   2d480:	6927      	ldrcs	r7, [r4, #16]
   2d482:	1ad7      	subcc	r7, r2, r3
   2d484:	1aff      	subcs	r7, r7, r3
   2d486:	4293      	cmp	r3, r2
   2d488:	bf94      	ite	ls
   2d48a:	2500      	movls	r5, #0
   2d48c:	68e5      	ldrhi	r5, [r4, #12]
   2d48e:	b2bf      	uxth	r7, r7
   2d490:	bf88      	it	hi
   2d492:	1b52      	subhi	r2, r2, r5
   2d494:	4630      	mov	r0, r6
   2d496:	bf88      	it	hi
   2d498:	b295      	uxthhi	r5, r2
   2d49a:	f8ad 7002 	strh.w	r7, [sp, #2]
   2d49e:	f00c fd44 	bl	39f2a <bsd_os_trace_put>
   2d4a2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d4a6:	68a0      	ldr	r0, [r4, #8]
   2d4a8:	f00c fd3f 	bl	39f2a <bsd_os_trace_put>
   2d4ac:	68a3      	ldr	r3, [r4, #8]
   2d4ae:	6922      	ldr	r2, [r4, #16]
   2d4b0:	441f      	add	r7, r3
   2d4b2:	4297      	cmp	r7, r2
   2d4b4:	bf08      	it	eq
   2d4b6:	68e3      	ldreq	r3, [r4, #12]
   2d4b8:	60a7      	str	r7, [r4, #8]
   2d4ba:	bf08      	it	eq
   2d4bc:	60a3      	streq	r3, [r4, #8]
   2d4be:	2d00      	cmp	r5, #0
   2d4c0:	f43f af40 	beq.w	2d344 <ipc_trace_handle+0xa8>
   2d4c4:	2105      	movs	r1, #5
   2d4c6:	4630      	mov	r0, r6
   2d4c8:	f8ad 5002 	strh.w	r5, [sp, #2]
   2d4cc:	f00c fd2d 	bl	39f2a <bsd_os_trace_put>
   2d4d0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d4d4:	68e0      	ldr	r0, [r4, #12]
   2d4d6:	f00c fd28 	bl	39f2a <bsd_os_trace_put>
   2d4da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2d4de:	68e3      	ldr	r3, [r4, #12]
   2d4e0:	4413      	add	r3, r2
   2d4e2:	60a3      	str	r3, [r4, #8]
   2d4e4:	e72e      	b.n	2d344 <ipc_trace_handle+0xa8>
   2d4e6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2d4ea:	f8ad 2000 	strh.w	r2, [sp]
   2d4ee:	7822      	ldrb	r2, [r4, #0]
   2d4f0:	466e      	mov	r6, sp
   2d4f2:	f88d 2004 	strb.w	r2, [sp, #4]
   2d4f6:	6862      	ldr	r2, [r4, #4]
   2d4f8:	2105      	movs	r1, #5
   2d4fa:	4293      	cmp	r3, r2
   2d4fc:	bf2a      	itet	cs
   2d4fe:	6927      	ldrcs	r7, [r4, #16]
   2d500:	1ad7      	subcc	r7, r2, r3
   2d502:	1aff      	subcs	r7, r7, r3
   2d504:	4293      	cmp	r3, r2
   2d506:	bf94      	ite	ls
   2d508:	2500      	movls	r5, #0
   2d50a:	68e5      	ldrhi	r5, [r4, #12]
   2d50c:	b2bf      	uxth	r7, r7
   2d50e:	bf88      	it	hi
   2d510:	1b52      	subhi	r2, r2, r5
   2d512:	4630      	mov	r0, r6
   2d514:	bf88      	it	hi
   2d516:	b295      	uxthhi	r5, r2
   2d518:	f8ad 7002 	strh.w	r7, [sp, #2]
   2d51c:	f00c fd05 	bl	39f2a <bsd_os_trace_put>
   2d520:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d524:	68a0      	ldr	r0, [r4, #8]
   2d526:	f00c fd00 	bl	39f2a <bsd_os_trace_put>
   2d52a:	68a3      	ldr	r3, [r4, #8]
   2d52c:	6922      	ldr	r2, [r4, #16]
   2d52e:	441f      	add	r7, r3
   2d530:	4297      	cmp	r7, r2
   2d532:	bf08      	it	eq
   2d534:	68e3      	ldreq	r3, [r4, #12]
   2d536:	60a7      	str	r7, [r4, #8]
   2d538:	bf08      	it	eq
   2d53a:	60a3      	streq	r3, [r4, #8]
   2d53c:	2d00      	cmp	r5, #0
   2d53e:	f43f aef9 	beq.w	2d334 <ipc_trace_handle+0x98>
   2d542:	2105      	movs	r1, #5
   2d544:	4630      	mov	r0, r6
   2d546:	f8ad 5002 	strh.w	r5, [sp, #2]
   2d54a:	f00c fcee 	bl	39f2a <bsd_os_trace_put>
   2d54e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2d552:	68e0      	ldr	r0, [r4, #12]
   2d554:	f00c fce9 	bl	39f2a <bsd_os_trace_put>
   2d558:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2d55c:	68e3      	ldr	r3, [r4, #12]
   2d55e:	4413      	add	r3, r2
   2d560:	60a3      	str	r3, [r4, #8]
   2d562:	e6e7      	b.n	2d334 <ipc_trace_handle+0x98>
   2d564:	f8cb 7000 	str.w	r7, [fp]
   2d568:	e76b      	b.n	2d442 <ipc_trace_handle+0x1a6>
   2d56a:	bf00      	nop
   2d56c:	20023ab0 	.word	0x20023ab0
   2d570:	2002cb95 	.word	0x2002cb95
   2d574:	20023aac 	.word	0x20023aac
   2d578:	20023aa4 	.word	0x20023aa4
   2d57c:	20023aa8 	.word	0x20023aa8

0002d580 <rpc_trace_coredump_in_progress>:
   2d580:	4b01      	ldr	r3, [pc, #4]	; (2d588 <rpc_trace_coredump_in_progress+0x8>)
   2d582:	7818      	ldrb	r0, [r3, #0]
   2d584:	4770      	bx	lr
   2d586:	bf00      	nop
   2d588:	2002cb95 	.word	0x2002cb95

0002d58c <rpc_transport_ipc_data_free>:
   2d58c:	b510      	push	{r4, lr}
   2d58e:	4b0e      	ldr	r3, [pc, #56]	; (2d5c8 <rpc_transport_ipc_data_free+0x3c>)
   2d590:	4604      	mov	r4, r0
   2d592:	e9d3 2300 	ldrd	r2, r3, [r3]
   2d596:	4413      	add	r3, r2
   2d598:	4298      	cmp	r0, r3
   2d59a:	d20d      	bcs.n	2d5b8 <rpc_transport_ipc_data_free+0x2c>
   2d59c:	4282      	cmp	r2, r0
   2d59e:	d80b      	bhi.n	2d5b8 <rpc_transport_ipc_data_free+0x2c>
   2d5a0:	f000 fd1a 	bl	2dfd8 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   2d5a4:	b158      	cbz	r0, 2d5be <rpc_transport_ipc_data_free+0x32>
   2d5a6:	4a09      	ldr	r2, [pc, #36]	; (2d5cc <rpc_transport_ipc_data_free+0x40>)
   2d5a8:	6084      	str	r4, [r0, #8]
   2d5aa:	6002      	str	r2, [r0, #0]
   2d5ac:	f7ff fd80 	bl	2d0b0 <rpc_transport_send>
   2d5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d5b4:	f7fc bb34 	b.w	29c20 <bsd_os_application_irq_set>
   2d5b8:	4620      	mov	r0, r4
   2d5ba:	f006 ffaf 	bl	3451c <nrf_shared_free>
   2d5be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d5c2:	f7fc bb2d 	b.w	29c20 <bsd_os_application_irq_set>
   2d5c6:	bf00      	nop
   2d5c8:	20023ab4 	.word	0x20023ab4
   2d5cc:	00020001 	.word	0x00020001

0002d5d0 <rpc_transport_ipc_init>:
   2d5d0:	b188      	cbz	r0, 2d5f6 <rpc_transport_ipc_init+0x26>
   2d5d2:	b510      	push	{r4, lr}
   2d5d4:	b082      	sub	sp, #8
   2d5d6:	aa01      	add	r2, sp, #4
   2d5d8:	4669      	mov	r1, sp
   2d5da:	4604      	mov	r4, r0
   2d5dc:	f000 fb58 	bl	2dc90 <rpc_transport_ipc_tx_init>
   2d5e0:	4602      	mov	r2, r0
   2d5e2:	b148      	cbz	r0, 2d5f8 <rpc_transport_ipc_init+0x28>
   2d5e4:	4b12      	ldr	r3, [pc, #72]	; (2d630 <rpc_transport_ipc_init+0x60>)
   2d5e6:	3428      	adds	r4, #40	; 0x28
   2d5e8:	e894 0003 	ldmia.w	r4, {r0, r1}
   2d5ec:	e883 0003 	stmia.w	r3, {r0, r1}
   2d5f0:	4610      	mov	r0, r2
   2d5f2:	b002      	add	sp, #8
   2d5f4:	bd10      	pop	{r4, pc}
   2d5f6:	e7fe      	b.n	2d5f6 <rpc_transport_ipc_init+0x26>
   2d5f8:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d5fc:	4620      	mov	r0, r4
   2d5fe:	f000 f9ef 	bl	2d9e0 <rpc_transport_ipc_rx_init>
   2d602:	4602      	mov	r2, r0
   2d604:	4b0a      	ldr	r3, [pc, #40]	; (2d630 <rpc_transport_ipc_init+0x60>)
   2d606:	f104 0128 	add.w	r1, r4, #40	; 0x28
   2d60a:	c903      	ldmia	r1, {r0, r1}
   2d60c:	e883 0003 	stmia.w	r3, {r0, r1}
   2d610:	2a00      	cmp	r2, #0
   2d612:	d1ed      	bne.n	2d5f0 <rpc_transport_ipc_init+0x20>
   2d614:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2d618:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2d61a:	4906      	ldr	r1, [pc, #24]	; (2d634 <rpc_transport_ipc_init+0x64>)
   2d61c:	015b      	lsls	r3, r3, #5
   2d61e:	b2db      	uxtb	r3, r3
   2d620:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   2d624:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   2d628:	6048      	str	r0, [r1, #4]
   2d62a:	4610      	mov	r0, r2
   2d62c:	b002      	add	sp, #8
   2d62e:	bd10      	pop	{r4, pc}
   2d630:	20023ab4 	.word	0x20023ab4
   2d634:	e000e100 	.word	0xe000e100

0002d638 <rpc_transport_ipc_shutdown>:
   2d638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d63c:	b08c      	sub	sp, #48	; 0x30
   2d63e:	f000 fd05 	bl	2e04c <rpc_transport_ipc_tx_suspend>
   2d642:	2200      	movs	r2, #0
   2d644:	2010      	movs	r0, #16
   2d646:	4b31      	ldr	r3, [pc, #196]	; (2d70c <rpc_transport_ipc_shutdown+0xd4>)
   2d648:	f04f 0c01 	mov.w	ip, #1
   2d64c:	4c30      	ldr	r4, [pc, #192]	; (2d710 <rpc_transport_ipc_shutdown+0xd8>)
   2d64e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   2d652:	6821      	ldr	r1, [r4, #0]
   2d654:	2704      	movs	r7, #4
   2d656:	910a      	str	r1, [sp, #40]	; 0x28
   2d658:	492e      	ldr	r1, [pc, #184]	; (2d714 <rpc_transport_ipc_shutdown+0xdc>)
   2d65a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2d65c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2d660:	680d      	ldr	r5, [r1, #0]
   2d662:	950b      	str	r5, [sp, #44]	; 0x2c
   2d664:	4d2c      	ldr	r5, [pc, #176]	; (2d718 <rpc_transport_ipc_shutdown+0xe0>)
   2d666:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2d668:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   2d66c:	682d      	ldr	r5, [r5, #0]
   2d66e:	2640      	movs	r6, #64	; 0x40
   2d670:	9509      	str	r5, [sp, #36]	; 0x24
   2d672:	4d2a      	ldr	r5, [pc, #168]	; (2d71c <rpc_transport_ipc_shutdown+0xe4>)
   2d674:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   2d678:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   2d67c:	f8d5 e000 	ldr.w	lr, [r5]
   2d680:	2580      	movs	r5, #128	; 0x80
   2d682:	f8cd e020 	str.w	lr, [sp, #32]
   2d686:	f8dd e020 	ldr.w	lr, [sp, #32]
   2d68a:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   2d68e:	f8d4 e000 	ldr.w	lr, [r4]
   2d692:	2405      	movs	r4, #5
   2d694:	f8cd e01c 	str.w	lr, [sp, #28]
   2d698:	f8df e08c 	ldr.w	lr, [pc, #140]	; 2d728 <rpc_transport_ipc_shutdown+0xf0>
   2d69c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   2d6a0:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   2d6a4:	f8de e000 	ldr.w	lr, [lr]
   2d6a8:	f8cd e018 	str.w	lr, [sp, #24]
   2d6ac:	f8df e07c 	ldr.w	lr, [pc, #124]	; 2d72c <rpc_transport_ipc_shutdown+0xf4>
   2d6b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2d6b4:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   2d6b8:	f8de e000 	ldr.w	lr, [lr]
   2d6bc:	f8cd e014 	str.w	lr, [sp, #20]
   2d6c0:	f8dd e014 	ldr.w	lr, [sp, #20]
   2d6c4:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   2d6c8:	f8d1 c000 	ldr.w	ip, [r1]
   2d6cc:	f8cd c010 	str.w	ip, [sp, #16]
   2d6d0:	f8dd c010 	ldr.w	ip, [sp, #16]
   2d6d4:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   2d6d8:	680f      	ldr	r7, [r1, #0]
   2d6da:	9703      	str	r7, [sp, #12]
   2d6dc:	9f03      	ldr	r7, [sp, #12]
   2d6de:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2d6e2:	6808      	ldr	r0, [r1, #0]
   2d6e4:	9002      	str	r0, [sp, #8]
   2d6e6:	9802      	ldr	r0, [sp, #8]
   2d6e8:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   2d6ec:	680e      	ldr	r6, [r1, #0]
   2d6ee:	480c      	ldr	r0, [pc, #48]	; (2d720 <rpc_transport_ipc_shutdown+0xe8>)
   2d6f0:	9601      	str	r6, [sp, #4]
   2d6f2:	9e01      	ldr	r6, [sp, #4]
   2d6f4:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   2d6f8:	6809      	ldr	r1, [r1, #0]
   2d6fa:	4b0a      	ldr	r3, [pc, #40]	; (2d724 <rpc_transport_ipc_shutdown+0xec>)
   2d6fc:	9100      	str	r1, [sp, #0]
   2d6fe:	9900      	ldr	r1, [sp, #0]
   2d700:	8002      	strh	r2, [r0, #0]
   2d702:	601c      	str	r4, [r3, #0]
   2d704:	b00c      	add	sp, #48	; 0x30
   2d706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d70a:	bf00      	nop
   2d70c:	4002a000 	.word	0x4002a000
   2d710:	4002a5a0 	.word	0x4002a5a0
   2d714:	4002a308 	.word	0x4002a308
   2d718:	4002a590 	.word	0x4002a590
   2d71c:	4002a598 	.word	0x4002a598
   2d720:	20028946 	.word	0x20028946
   2d724:	20023acc 	.word	0x20023acc
   2d728:	4002a5a8 	.word	0x4002a5a8
   2d72c:	4002a5ac 	.word	0x4002a5ac

0002d730 <bsd_os_application_irq_handler>:
   2d730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d734:	f7fc fa7c 	bl	29c30 <bsd_os_application_irq_clear>
   2d738:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 2d810 <bsd_os_application_irq_handler+0xe0>
   2d73c:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 2d814 <bsd_os_application_irq_handler+0xe4>
   2d740:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 2d818 <bsd_os_application_irq_handler+0xe8>
   2d744:	f108 0908 	add.w	r9, r8, #8
   2d748:	f858 7b04 	ldr.w	r7, [r8], #4
   2d74c:	6839      	ldr	r1, [r7, #0]
   2d74e:	b361      	cbz	r1, 2d7aa <bsd_os_application_irq_handler+0x7a>
   2d750:	2400      	movs	r4, #0
   2d752:	e002      	b.n	2d75a <bsd_os_application_irq_handler+0x2a>
   2d754:	3401      	adds	r4, #1
   2d756:	428c      	cmp	r4, r1
   2d758:	d227      	bcs.n	2d7aa <bsd_os_application_irq_handler+0x7a>
   2d75a:	00e6      	lsls	r6, r4, #3
   2d75c:	19bd      	adds	r5, r7, r6
   2d75e:	68aa      	ldr	r2, [r5, #8]
   2d760:	2a00      	cmp	r2, #0
   2d762:	d0f7      	beq.n	2d754 <bsd_os_application_irq_handler+0x24>
   2d764:	686a      	ldr	r2, [r5, #4]
   2d766:	b2d2      	uxtb	r2, r2
   2d768:	2a01      	cmp	r2, #1
   2d76a:	d1f3      	bne.n	2d754 <bsd_os_application_irq_handler+0x24>
   2d76c:	6868      	ldr	r0, [r5, #4]
   2d76e:	f8bb 2000 	ldrh.w	r2, [fp]
   2d772:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   2d776:	d1ed      	bne.n	2d754 <bsd_os_application_irq_handler+0x24>
   2d778:	68a8      	ldr	r0, [r5, #8]
   2d77a:	6841      	ldr	r1, [r0, #4]
   2d77c:	b2c9      	uxtb	r1, r1
   2d77e:	2902      	cmp	r1, #2
   2d780:	d02c      	beq.n	2d7dc <bsd_os_application_irq_handler+0xac>
   2d782:	2901      	cmp	r1, #1
   2d784:	d015      	beq.n	2d7b2 <bsd_os_application_irq_handler+0x82>
   2d786:	3604      	adds	r6, #4
   2d788:	59b9      	ldr	r1, [r7, r6]
   2d78a:	3201      	adds	r2, #1
   2d78c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   2d790:	f041 0103 	orr.w	r1, r1, #3
   2d794:	51b9      	str	r1, [r7, r6]
   2d796:	f8ab 2000 	strh.w	r2, [fp]
   2d79a:	f7fc fa41 	bl	29c20 <bsd_os_application_irq_set>
   2d79e:	f858 7c04 	ldr.w	r7, [r8, #-4]
   2d7a2:	3401      	adds	r4, #1
   2d7a4:	6839      	ldr	r1, [r7, #0]
   2d7a6:	428c      	cmp	r4, r1
   2d7a8:	d3d7      	bcc.n	2d75a <bsd_os_application_irq_handler+0x2a>
   2d7aa:	45c1      	cmp	r9, r8
   2d7ac:	d1cc      	bne.n	2d748 <bsd_os_application_irq_handler+0x18>
   2d7ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d7b2:	6801      	ldr	r1, [r0, #0]
   2d7b4:	0c09      	lsrs	r1, r1, #16
   2d7b6:	f002 ff45 	bl	30644 <rpc_handle_ctrl_message>
   2d7ba:	2801      	cmp	r0, #1
   2d7bc:	d014      	beq.n	2d7e8 <bsd_os_application_irq_handler+0xb8>
   2d7be:	d310      	bcc.n	2d7e2 <bsd_os_application_irq_handler+0xb2>
   2d7c0:	2802      	cmp	r0, #2
   2d7c2:	d007      	beq.n	2d7d4 <bsd_os_application_irq_handler+0xa4>
   2d7c4:	2203      	movs	r2, #3
   2d7c6:	4b11      	ldr	r3, [pc, #68]	; (2d80c <bsd_os_application_irq_handler+0xdc>)
   2d7c8:	4610      	mov	r0, r2
   2d7ca:	f8ca 2000 	str.w	r2, [sl]
   2d7ce:	601a      	str	r2, [r3, #0]
   2d7d0:	f005 fb6c 	bl	32eac <rpc_transport_ipc_fault_handler>
   2d7d4:	f858 7c04 	ldr.w	r7, [r8, #-4]
   2d7d8:	6839      	ldr	r1, [r7, #0]
   2d7da:	e7bb      	b.n	2d754 <bsd_os_application_irq_handler+0x24>
   2d7dc:	f002 ff4a 	bl	30674 <rpc_handle_data_message>
   2d7e0:	e7eb      	b.n	2d7ba <bsd_os_application_irq_handler+0x8a>
   2d7e2:	f8bb 2000 	ldrh.w	r2, [fp]
   2d7e6:	e7ce      	b.n	2d786 <bsd_os_application_irq_handler+0x56>
   2d7e8:	686a      	ldr	r2, [r5, #4]
   2d7ea:	f8bb 1000 	ldrh.w	r1, [fp]
   2d7ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2d7f2:	f042 0202 	orr.w	r2, r2, #2
   2d7f6:	606a      	str	r2, [r5, #4]
   2d7f8:	1c4a      	adds	r2, r1, #1
   2d7fa:	f8ab 2000 	strh.w	r2, [fp]
   2d7fe:	f7fc fa0f 	bl	29c20 <bsd_os_application_irq_set>
   2d802:	f858 7c04 	ldr.w	r7, [r8, #-4]
   2d806:	6839      	ldr	r1, [r7, #0]
   2d808:	e7a4      	b.n	2d754 <bsd_os_application_irq_handler+0x24>
   2d80a:	bf00      	nop
   2d80c:	20023abc 	.word	0x20023abc
   2d810:	20023ac4 	.word	0x20023ac4
   2d814:	20028946 	.word	0x20028946
   2d818:	20023acc 	.word	0x20023acc

0002d81c <IPC_IRQHandler>:
   2d81c:	b570      	push	{r4, r5, r6, lr}
   2d81e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   2d822:	4d62      	ldr	r5, [pc, #392]	; (2d9ac <IPC_IRQHandler+0x190>)
   2d824:	4c62      	ldr	r4, [pc, #392]	; (2d9b0 <IPC_IRQHandler+0x194>)
   2d826:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   2d82a:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   2d82e:	b086      	sub	sp, #24
   2d830:	061b      	lsls	r3, r3, #24
   2d832:	d50b      	bpl.n	2d84c <IPC_IRQHandler+0x30>
   2d834:	f7ff fd32 	bl	2d29c <ipc_trace_handle>
   2d838:	f7ff fea2 	bl	2d580 <rpc_trace_coredump_in_progress>
   2d83c:	2800      	cmp	r0, #0
   2d83e:	d151      	bne.n	2d8e4 <IPC_IRQHandler+0xc8>
   2d840:	4b5c      	ldr	r3, [pc, #368]	; (2d9b4 <IPC_IRQHandler+0x198>)
   2d842:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   2d846:	681b      	ldr	r3, [r3, #0]
   2d848:	9301      	str	r3, [sp, #4]
   2d84a:	9b01      	ldr	r3, [sp, #4]
   2d84c:	4b58      	ldr	r3, [pc, #352]	; (2d9b0 <IPC_IRQHandler+0x194>)
   2d84e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   2d852:	f012 0201 	ands.w	r2, r2, #1
   2d856:	d11c      	bne.n	2d892 <IPC_IRQHandler+0x76>
   2d858:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   2d85c:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   2d860:	d145      	bne.n	2d8ee <IPC_IRQHandler+0xd2>
   2d862:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   2d866:	0750      	lsls	r0, r2, #29
   2d868:	d50c      	bpl.n	2d884 <IPC_IRQHandler+0x68>
   2d86a:	4a53      	ldr	r2, [pc, #332]	; (2d9b8 <IPC_IRQHandler+0x19c>)
   2d86c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   2d870:	6812      	ldr	r2, [r2, #0]
   2d872:	4b52      	ldr	r3, [pc, #328]	; (2d9bc <IPC_IRQHandler+0x1a0>)
   2d874:	9204      	str	r2, [sp, #16]
   2d876:	9a04      	ldr	r2, [sp, #16]
   2d878:	681a      	ldr	r2, [r3, #0]
   2d87a:	2a02      	cmp	r2, #2
   2d87c:	d079      	beq.n	2d972 <IPC_IRQHandler+0x156>
   2d87e:	681a      	ldr	r2, [r3, #0]
   2d880:	2a01      	cmp	r2, #1
   2d882:	d05b      	beq.n	2d93c <IPC_IRQHandler+0x120>
   2d884:	4b4a      	ldr	r3, [pc, #296]	; (2d9b0 <IPC_IRQHandler+0x194>)
   2d886:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   2d88a:	06d2      	lsls	r2, r2, #27
   2d88c:	d41e      	bmi.n	2d8cc <IPC_IRQHandler+0xb0>
   2d88e:	b006      	add	sp, #24
   2d890:	bd70      	pop	{r4, r5, r6, pc}
   2d892:	2000      	movs	r0, #0
   2d894:	f248 0202 	movw	r2, #32770	; 0x8002
   2d898:	4949      	ldr	r1, [pc, #292]	; (2d9c0 <IPC_IRQHandler+0x1a4>)
   2d89a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   2d89e:	6809      	ldr	r1, [r1, #0]
   2d8a0:	9102      	str	r1, [sp, #8]
   2d8a2:	9902      	ldr	r1, [sp, #8]
   2d8a4:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   2d8a8:	4293      	cmp	r3, r2
   2d8aa:	d06b      	beq.n	2d984 <IPC_IRQHandler+0x168>
   2d8ac:	d82a      	bhi.n	2d904 <IPC_IRQHandler+0xe8>
   2d8ae:	2b00      	cmp	r3, #0
   2d8b0:	d062      	beq.n	2d978 <IPC_IRQHandler+0x15c>
   2d8b2:	2b02      	cmp	r3, #2
   2d8b4:	d937      	bls.n	2d926 <IPC_IRQHandler+0x10a>
   2d8b6:	f248 0201 	movw	r2, #32769	; 0x8001
   2d8ba:	4293      	cmp	r3, r2
   2d8bc:	d15c      	bne.n	2d978 <IPC_IRQHandler+0x15c>
   2d8be:	2003      	movs	r0, #3
   2d8c0:	2207      	movs	r2, #7
   2d8c2:	493e      	ldr	r1, [pc, #248]	; (2d9bc <IPC_IRQHandler+0x1a0>)
   2d8c4:	4b3f      	ldr	r3, [pc, #252]	; (2d9c4 <IPC_IRQHandler+0x1a8>)
   2d8c6:	6008      	str	r0, [r1, #0]
   2d8c8:	601a      	str	r2, [r3, #0]
   2d8ca:	e7e0      	b.n	2d88e <IPC_IRQHandler+0x72>
   2d8cc:	2100      	movs	r1, #0
   2d8ce:	4a3e      	ldr	r2, [pc, #248]	; (2d9c8 <IPC_IRQHandler+0x1ac>)
   2d8d0:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   2d8d4:	6813      	ldr	r3, [r2, #0]
   2d8d6:	9305      	str	r3, [sp, #20]
   2d8d8:	9b05      	ldr	r3, [sp, #20]
   2d8da:	b006      	add	sp, #24
   2d8dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2d8e0:	f7fc b99e 	b.w	29c20 <bsd_os_application_irq_set>
   2d8e4:	23e0      	movs	r3, #224	; 0xe0
   2d8e6:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   2d8ea:	606e      	str	r6, [r5, #4]
   2d8ec:	e7cf      	b.n	2d88e <IPC_IRQHandler+0x72>
   2d8ee:	4937      	ldr	r1, [pc, #220]	; (2d9cc <IPC_IRQHandler+0x1b0>)
   2d8f0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2d8f4:	680b      	ldr	r3, [r1, #0]
   2d8f6:	9303      	str	r3, [sp, #12]
   2d8f8:	9b03      	ldr	r3, [sp, #12]
   2d8fa:	b006      	add	sp, #24
   2d8fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2d900:	f7ff be9a 	b.w	2d638 <rpc_transport_ipc_shutdown>
   2d904:	4a32      	ldr	r2, [pc, #200]	; (2d9d0 <IPC_IRQHandler+0x1b4>)
   2d906:	4293      	cmp	r3, r2
   2d908:	d82a      	bhi.n	2d960 <IPC_IRQHandler+0x144>
   2d90a:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   2d90e:	d82a      	bhi.n	2d966 <IPC_IRQHandler+0x14a>
   2d910:	f248 0203 	movw	r2, #32771	; 0x8003
   2d914:	4293      	cmp	r3, r2
   2d916:	d12f      	bne.n	2d978 <IPC_IRQHandler+0x15c>
   2d918:	2003      	movs	r0, #3
   2d91a:	2204      	movs	r2, #4
   2d91c:	4927      	ldr	r1, [pc, #156]	; (2d9bc <IPC_IRQHandler+0x1a0>)
   2d91e:	4b29      	ldr	r3, [pc, #164]	; (2d9c4 <IPC_IRQHandler+0x1a8>)
   2d920:	6008      	str	r0, [r1, #0]
   2d922:	601a      	str	r2, [r3, #0]
   2d924:	e7b3      	b.n	2d88e <IPC_IRQHandler+0x72>
   2d926:	2303      	movs	r3, #3
   2d928:	4618      	mov	r0, r3
   2d92a:	4924      	ldr	r1, [pc, #144]	; (2d9bc <IPC_IRQHandler+0x1a0>)
   2d92c:	4a25      	ldr	r2, [pc, #148]	; (2d9c4 <IPC_IRQHandler+0x1a8>)
   2d92e:	600b      	str	r3, [r1, #0]
   2d930:	6013      	str	r3, [r2, #0]
   2d932:	b006      	add	sp, #24
   2d934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2d938:	f005 bab8 	b.w	32eac <rpc_transport_ipc_fault_handler>
   2d93c:	4a25      	ldr	r2, [pc, #148]	; (2d9d4 <IPC_IRQHandler+0x1b8>)
   2d93e:	4826      	ldr	r0, [pc, #152]	; (2d9d8 <IPC_IRQHandler+0x1bc>)
   2d940:	6811      	ldr	r1, [r2, #0]
   2d942:	688a      	ldr	r2, [r1, #8]
   2d944:	6002      	str	r2, [r0, #0]
   2d946:	6849      	ldr	r1, [r1, #4]
   2d948:	6041      	str	r1, [r0, #4]
   2d94a:	b312      	cbz	r2, 2d992 <IPC_IRQHandler+0x176>
   2d94c:	b309      	cbz	r1, 2d992 <IPC_IRQHandler+0x176>
   2d94e:	6812      	ldr	r2, [r2, #0]
   2d950:	2a10      	cmp	r2, #16
   2d952:	d824      	bhi.n	2d99e <IPC_IRQHandler+0x182>
   2d954:	680a      	ldr	r2, [r1, #0]
   2d956:	2a10      	cmp	r2, #16
   2d958:	d821      	bhi.n	2d99e <IPC_IRQHandler+0x182>
   2d95a:	2202      	movs	r2, #2
   2d95c:	601a      	str	r2, [r3, #0]
   2d95e:	e791      	b.n	2d884 <IPC_IRQHandler+0x68>
   2d960:	4a1e      	ldr	r2, [pc, #120]	; (2d9dc <IPC_IRQHandler+0x1c0>)
   2d962:	4293      	cmp	r3, r2
   2d964:	d108      	bne.n	2d978 <IPC_IRQHandler+0x15c>
   2d966:	2003      	movs	r0, #3
   2d968:	4914      	ldr	r1, [pc, #80]	; (2d9bc <IPC_IRQHandler+0x1a0>)
   2d96a:	4a16      	ldr	r2, [pc, #88]	; (2d9c4 <IPC_IRQHandler+0x1a8>)
   2d96c:	6008      	str	r0, [r1, #0]
   2d96e:	6013      	str	r3, [r2, #0]
   2d970:	e78d      	b.n	2d88e <IPC_IRQHandler+0x72>
   2d972:	f7fc f955 	bl	29c20 <bsd_os_application_irq_set>
   2d976:	e785      	b.n	2d884 <IPC_IRQHandler+0x68>
   2d978:	2303      	movs	r3, #3
   2d97a:	4910      	ldr	r1, [pc, #64]	; (2d9bc <IPC_IRQHandler+0x1a0>)
   2d97c:	4a11      	ldr	r2, [pc, #68]	; (2d9c4 <IPC_IRQHandler+0x1a8>)
   2d97e:	600b      	str	r3, [r1, #0]
   2d980:	6013      	str	r3, [r2, #0]
   2d982:	e784      	b.n	2d88e <IPC_IRQHandler+0x72>
   2d984:	2003      	movs	r0, #3
   2d986:	2206      	movs	r2, #6
   2d988:	490c      	ldr	r1, [pc, #48]	; (2d9bc <IPC_IRQHandler+0x1a0>)
   2d98a:	4b0e      	ldr	r3, [pc, #56]	; (2d9c4 <IPC_IRQHandler+0x1a8>)
   2d98c:	6008      	str	r0, [r1, #0]
   2d98e:	601a      	str	r2, [r3, #0]
   2d990:	e77d      	b.n	2d88e <IPC_IRQHandler+0x72>
   2d992:	2003      	movs	r0, #3
   2d994:	2110      	movs	r1, #16
   2d996:	4a0b      	ldr	r2, [pc, #44]	; (2d9c4 <IPC_IRQHandler+0x1a8>)
   2d998:	6018      	str	r0, [r3, #0]
   2d99a:	6011      	str	r1, [r2, #0]
   2d99c:	e772      	b.n	2d884 <IPC_IRQHandler+0x68>
   2d99e:	2003      	movs	r0, #3
   2d9a0:	f24c 0106 	movw	r1, #49158	; 0xc006
   2d9a4:	4a07      	ldr	r2, [pc, #28]	; (2d9c4 <IPC_IRQHandler+0x1a8>)
   2d9a6:	6018      	str	r0, [r3, #0]
   2d9a8:	6011      	str	r1, [r2, #0]
   2d9aa:	e76b      	b.n	2d884 <IPC_IRQHandler+0x68>
   2d9ac:	e000e100 	.word	0xe000e100
   2d9b0:	4002a000 	.word	0x4002a000
   2d9b4:	4002a11c 	.word	0x4002a11c
   2d9b8:	4002a108 	.word	0x4002a108
   2d9bc:	20023acc 	.word	0x20023acc
   2d9c0:	4002a100 	.word	0x4002a100
   2d9c4:	20023abc 	.word	0x20023abc
   2d9c8:	4002a110 	.word	0x4002a110
   2d9cc:	4002a118 	.word	0x4002a118
   2d9d0:	04400004 	.word	0x04400004
   2d9d4:	20023ad0 	.word	0x20023ad0
   2d9d8:	20023ac4 	.word	0x20023ac4
   2d9dc:	05500001 	.word	0x05500001

0002d9e0 <rpc_transport_ipc_rx_init>:
   2d9e0:	2800      	cmp	r0, #0
   2d9e2:	f000 8109 	beq.w	2dbf8 <rpc_transport_ipc_rx_init+0x218>
   2d9e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d9ea:	6805      	ldr	r5, [r0, #0]
   2d9ec:	b097      	sub	sp, #92	; 0x5c
   2d9ee:	2d00      	cmp	r5, #0
   2d9f0:	f000 80f8 	beq.w	2dbe4 <rpc_transport_ipc_rx_init+0x204>
   2d9f4:	6883      	ldr	r3, [r0, #8]
   2d9f6:	2b00      	cmp	r3, #0
   2d9f8:	f000 80f4 	beq.w	2dbe4 <rpc_transport_ipc_rx_init+0x204>
   2d9fc:	6906      	ldr	r6, [r0, #16]
   2d9fe:	2e00      	cmp	r6, #0
   2da00:	f000 80f0 	beq.w	2dbe4 <rpc_transport_ipc_rx_init+0x204>
   2da04:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2da06:	2c00      	cmp	r4, #0
   2da08:	f000 80ec 	beq.w	2dbe4 <rpc_transport_ipc_rx_init+0x204>
   2da0c:	6844      	ldr	r4, [r0, #4]
   2da0e:	2c1b      	cmp	r4, #27
   2da10:	f240 80ed 	bls.w	2dbee <rpc_transport_ipc_rx_init+0x20e>
   2da14:	68c4      	ldr	r4, [r0, #12]
   2da16:	2c0b      	cmp	r4, #11
   2da18:	f240 80e9 	bls.w	2dbee <rpc_transport_ipc_rx_init+0x20e>
   2da1c:	f8d0 e014 	ldr.w	lr, [r0, #20]
   2da20:	f1be 0f17 	cmp.w	lr, #23
   2da24:	f240 80e3 	bls.w	2dbee <rpc_transport_ipc_rx_init+0x20e>
   2da28:	4604      	mov	r4, r0
   2da2a:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 2dc20 <rpc_transport_ipc_rx_init+0x240>
   2da2e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   2da30:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 2dc24 <rpc_transport_ipc_rx_init+0x244>
   2da34:	4690      	mov	r8, r2
   2da36:	9101      	str	r1, [sp, #4]
   2da38:	4672      	mov	r2, lr
   2da3a:	2100      	movs	r1, #0
   2da3c:	4630      	mov	r0, r6
   2da3e:	f8ca 7000 	str.w	r7, [sl]
   2da42:	f8cb 3000 	str.w	r3, [fp]
   2da46:	f00d fcd4 	bl	3b3f2 <memset>
   2da4a:	69e3      	ldr	r3, [r4, #28]
   2da4c:	4630      	mov	r0, r6
   2da4e:	6033      	str	r3, [r6, #0]
   2da50:	69a3      	ldr	r3, [r4, #24]
   2da52:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 2dc28 <rpc_transport_ipc_rx_init+0x248>
   2da56:	6073      	str	r3, [r6, #4]
   2da58:	f7ff fb34 	bl	2d0c4 <ipc_trace_init>
   2da5c:	2200      	movs	r2, #0
   2da5e:	2001      	movs	r0, #1
   2da60:	4b67      	ldr	r3, [pc, #412]	; (2dc00 <rpc_transport_ipc_rx_init+0x220>)
   2da62:	4968      	ldr	r1, [pc, #416]	; (2dc04 <rpc_transport_ipc_rx_init+0x224>)
   2da64:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   2da68:	6809      	ldr	r1, [r1, #0]
   2da6a:	f04f 0c80 	mov.w	ip, #128	; 0x80
   2da6e:	9106      	str	r1, [sp, #24]
   2da70:	4965      	ldr	r1, [pc, #404]	; (2dc08 <rpc_transport_ipc_rx_init+0x228>)
   2da72:	f8dd e018 	ldr.w	lr, [sp, #24]
   2da76:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   2da7a:	6809      	ldr	r1, [r1, #0]
   2da7c:	702a      	strb	r2, [r5, #0]
   2da7e:	9105      	str	r1, [sp, #20]
   2da80:	706a      	strb	r2, [r5, #1]
   2da82:	70ea      	strb	r2, [r5, #3]
   2da84:	70a8      	strb	r0, [r5, #2]
   2da86:	9905      	ldr	r1, [sp, #20]
   2da88:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2da8a:	f8db e000 	ldr.w	lr, [fp]
   2da8e:	6069      	str	r1, [r5, #4]
   2da90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   2da92:	61ae      	str	r6, [r5, #24]
   2da94:	60a9      	str	r1, [r5, #8]
   2da96:	9901      	ldr	r1, [sp, #4]
   2da98:	f8c5 e014 	str.w	lr, [r5, #20]
   2da9c:	6129      	str	r1, [r5, #16]
   2da9e:	495b      	ldr	r1, [pc, #364]	; (2dc0c <rpc_transport_ipc_rx_init+0x22c>)
   2daa0:	f8c5 800c 	str.w	r8, [r5, #12]
   2daa4:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   2daa8:	680c      	ldr	r4, [r1, #0]
   2daaa:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   2daae:	9407      	str	r4, [sp, #28]
   2dab0:	9c07      	ldr	r4, [sp, #28]
   2dab2:	2404      	movs	r4, #4
   2dab4:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   2dab8:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   2dabc:	4f54      	ldr	r7, [pc, #336]	; (2dc10 <rpc_transport_ipc_rx_init+0x230>)
   2dabe:	9408      	str	r4, [sp, #32]
   2dac0:	9c08      	ldr	r4, [sp, #32]
   2dac2:	2410      	movs	r4, #16
   2dac4:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   2dac8:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   2dacc:	9409      	str	r4, [sp, #36]	; 0x24
   2dace:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2dad0:	2440      	movs	r4, #64	; 0x40
   2dad2:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   2dad6:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   2dada:	940a      	str	r4, [sp, #40]	; 0x28
   2dadc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2dade:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   2dae2:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   2dae6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   2daea:	940b      	str	r4, [sp, #44]	; 0x2c
   2daec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2daee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2daf2:	680c      	ldr	r4, [r1, #0]
   2daf4:	940c      	str	r4, [sp, #48]	; 0x30
   2daf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2daf8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   2dafc:	688c      	ldr	r4, [r1, #8]
   2dafe:	940d      	str	r4, [sp, #52]	; 0x34
   2db00:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   2db02:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2db06:	690c      	ldr	r4, [r1, #16]
   2db08:	940e      	str	r4, [sp, #56]	; 0x38
   2db0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2db0c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2db10:	698c      	ldr	r4, [r1, #24]
   2db12:	940f      	str	r4, [sp, #60]	; 0x3c
   2db14:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2db16:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   2db1a:	69cc      	ldr	r4, [r1, #28]
   2db1c:	f501 7101 	add.w	r1, r1, #516	; 0x204
   2db20:	9410      	str	r4, [sp, #64]	; 0x40
   2db22:	9c10      	ldr	r4, [sp, #64]	; 0x40
   2db24:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   2db28:	4304      	orrs	r4, r0
   2db2a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   2db2e:	680d      	ldr	r5, [r1, #0]
   2db30:	4c38      	ldr	r4, [pc, #224]	; (2dc14 <rpc_transport_ipc_rx_init+0x234>)
   2db32:	9511      	str	r5, [sp, #68]	; 0x44
   2db34:	9d11      	ldr	r5, [sp, #68]	; 0x44
   2db36:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   2db3a:	4d37      	ldr	r5, [pc, #220]	; (2dc18 <rpc_transport_ipc_rx_init+0x238>)
   2db3c:	f046 0604 	orr.w	r6, r6, #4
   2db40:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   2db44:	680e      	ldr	r6, [r1, #0]
   2db46:	9612      	str	r6, [sp, #72]	; 0x48
   2db48:	9e12      	ldr	r6, [sp, #72]	; 0x48
   2db4a:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   2db4e:	f046 0610 	orr.w	r6, r6, #16
   2db52:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   2db56:	680e      	ldr	r6, [r1, #0]
   2db58:	9613      	str	r6, [sp, #76]	; 0x4c
   2db5a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   2db5c:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   2db60:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   2db64:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   2db68:	680e      	ldr	r6, [r1, #0]
   2db6a:	9614      	str	r6, [sp, #80]	; 0x50
   2db6c:	9e14      	ldr	r6, [sp, #80]	; 0x50
   2db6e:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   2db72:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   2db76:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   2db7a:	f8da 3000 	ldr.w	r3, [sl]
   2db7e:	6809      	ldr	r1, [r1, #0]
   2db80:	015b      	lsls	r3, r3, #5
   2db82:	9115      	str	r1, [sp, #84]	; 0x54
   2db84:	b2db      	uxtb	r3, r3
   2db86:	9915      	ldr	r1, [sp, #84]	; 0x54
   2db88:	6022      	str	r2, [r4, #0]
   2db8a:	f8c9 0000 	str.w	r0, [r9]
   2db8e:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   2db92:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   2db96:	f8c5 c004 	str.w	ip, [r5, #4]
   2db9a:	9204      	str	r2, [sp, #16]
   2db9c:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   2dba0:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   2dba4:	9304      	str	r3, [sp, #16]
   2dba6:	9b04      	ldr	r3, [sp, #16]
   2dba8:	f8d9 3000 	ldr.w	r3, [r9]
   2dbac:	4283      	cmp	r3, r0
   2dbae:	d10f      	bne.n	2dbd0 <rpc_transport_ipc_rx_init+0x1f0>
   2dbb0:	2614      	movs	r6, #20
   2dbb2:	4d1a      	ldr	r5, [pc, #104]	; (2dc1c <rpc_transport_ipc_rx_init+0x23c>)
   2dbb4:	e000      	b.n	2dbb8 <rpc_transport_ipc_rx_init+0x1d8>
   2dbb6:	b15d      	cbz	r5, 2dbd0 <rpc_transport_ipc_rx_init+0x1f0>
   2dbb8:	a903      	add	r1, sp, #12
   2dbba:	2000      	movs	r0, #0
   2dbbc:	9603      	str	r6, [sp, #12]
   2dbbe:	f7fb fe03 	bl	297c8 <bsd_os_timedwait>
   2dbc2:	9b03      	ldr	r3, [sp, #12]
   2dbc4:	f8d9 2000 	ldr.w	r2, [r9]
   2dbc8:	3b14      	subs	r3, #20
   2dbca:	2a01      	cmp	r2, #1
   2dbcc:	441d      	add	r5, r3
   2dbce:	d0f2      	beq.n	2dbb6 <rpc_transport_ipc_rx_init+0x1d6>
   2dbd0:	f8d9 3000 	ldr.w	r3, [r9]
   2dbd4:	2b01      	cmp	r3, #1
   2dbd6:	bf0a      	itet	eq
   2dbd8:	200d      	moveq	r0, #13
   2dbda:	6820      	ldrne	r0, [r4, #0]
   2dbdc:	6020      	streq	r0, [r4, #0]
   2dbde:	b017      	add	sp, #92	; 0x5c
   2dbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dbe4:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2dbe8:	b017      	add	sp, #92	; 0x5c
   2dbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dbee:	f24c 0009 	movw	r0, #49161	; 0xc009
   2dbf2:	b017      	add	sp, #92	; 0x5c
   2dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dbf8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2dbfc:	4770      	bx	lr
   2dbfe:	bf00      	nop
   2dc00:	4002a000 	.word	0x4002a000
   2dc04:	4002a610 	.word	0x4002a610
   2dc08:	4002a614 	.word	0x4002a614
   2dc0c:	4002a590 	.word	0x4002a590
   2dc10:	40005000 	.word	0x40005000
   2dc14:	20023abc 	.word	0x20023abc
   2dc18:	e000e100 	.word	0xe000e100
   2dc1c:	000249f0 	.word	0x000249f0
   2dc20:	20023ac0 	.word	0x20023ac0
   2dc24:	20023ad0 	.word	0x20023ad0
   2dc28:	20023acc 	.word	0x20023acc

0002dc2c <rpc_transport_ipc_msg_free>:
   2dc2c:	b470      	push	{r4, r5, r6}
   2dc2e:	4e17      	ldr	r6, [pc, #92]	; (2dc8c <rpc_transport_ipc_msg_free+0x60>)
   2dc30:	6831      	ldr	r1, [r6, #0]
   2dc32:	680d      	ldr	r5, [r1, #0]
   2dc34:	b1ad      	cbz	r5, 2dc62 <rpc_transport_ipc_msg_free+0x36>
   2dc36:	688b      	ldr	r3, [r1, #8]
   2dc38:	4283      	cmp	r3, r0
   2dc3a:	d024      	beq.n	2dc86 <rpc_transport_ipc_msg_free+0x5a>
   2dc3c:	2300      	movs	r3, #0
   2dc3e:	3301      	adds	r3, #1
   2dc40:	00da      	lsls	r2, r3, #3
   2dc42:	429d      	cmp	r5, r3
   2dc44:	eb01 0402 	add.w	r4, r1, r2
   2dc48:	d00b      	beq.n	2dc62 <rpc_transport_ipc_msg_free+0x36>
   2dc4a:	68a4      	ldr	r4, [r4, #8]
   2dc4c:	42a0      	cmp	r0, r4
   2dc4e:	d1f6      	bne.n	2dc3e <rpc_transport_ipc_msg_free+0x12>
   2dc50:	3204      	adds	r2, #4
   2dc52:	588b      	ldr	r3, [r1, r2]
   2dc54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2dc58:	f043 0303 	orr.w	r3, r3, #3
   2dc5c:	508b      	str	r3, [r1, r2]
   2dc5e:	bc70      	pop	{r4, r5, r6}
   2dc60:	4770      	bx	lr
   2dc62:	6871      	ldr	r1, [r6, #4]
   2dc64:	680d      	ldr	r5, [r1, #0]
   2dc66:	2d00      	cmp	r5, #0
   2dc68:	d0f9      	beq.n	2dc5e <rpc_transport_ipc_msg_free+0x32>
   2dc6a:	688b      	ldr	r3, [r1, #8]
   2dc6c:	4283      	cmp	r3, r0
   2dc6e:	d00a      	beq.n	2dc86 <rpc_transport_ipc_msg_free+0x5a>
   2dc70:	2300      	movs	r3, #0
   2dc72:	3301      	adds	r3, #1
   2dc74:	00da      	lsls	r2, r3, #3
   2dc76:	429d      	cmp	r5, r3
   2dc78:	eb01 0402 	add.w	r4, r1, r2
   2dc7c:	d0ef      	beq.n	2dc5e <rpc_transport_ipc_msg_free+0x32>
   2dc7e:	68a4      	ldr	r4, [r4, #8]
   2dc80:	42a0      	cmp	r0, r4
   2dc82:	d1f6      	bne.n	2dc72 <rpc_transport_ipc_msg_free+0x46>
   2dc84:	e7e4      	b.n	2dc50 <rpc_transport_ipc_msg_free+0x24>
   2dc86:	2204      	movs	r2, #4
   2dc88:	e7e3      	b.n	2dc52 <rpc_transport_ipc_msg_free+0x26>
   2dc8a:	bf00      	nop
   2dc8c:	20023ac4 	.word	0x20023ac4

0002dc90 <rpc_transport_ipc_tx_init>:
   2dc90:	2800      	cmp	r0, #0
   2dc92:	f000 80b8 	beq.w	2de06 <rpc_transport_ipc_tx_init+0x176>
   2dc96:	2900      	cmp	r1, #0
   2dc98:	f000 80b5 	beq.w	2de06 <rpc_transport_ipc_tx_init+0x176>
   2dc9c:	2a00      	cmp	r2, #0
   2dc9e:	f000 80b2 	beq.w	2de06 <rpc_transport_ipc_tx_init+0x176>
   2dca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dca6:	6a04      	ldr	r4, [r0, #32]
   2dca8:	b085      	sub	sp, #20
   2dcaa:	2c00      	cmp	r4, #0
   2dcac:	f000 80a6 	beq.w	2ddfc <rpc_transport_ipc_tx_init+0x16c>
   2dcb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   2dcb2:	2800      	cmp	r0, #0
   2dcb4:	f000 80a2 	beq.w	2ddfc <rpc_transport_ipc_tx_init+0x16c>
   2dcb8:	f642 4587 	movw	r5, #11399	; 0x2c87
   2dcbc:	f04f 0a00 	mov.w	sl, #0
   2dcc0:	4e55      	ldr	r6, [pc, #340]	; (2de18 <rpc_transport_ipc_tx_init+0x188>)
   2dcc2:	42a8      	cmp	r0, r5
   2dcc4:	f886 a000 	strb.w	sl, [r6]
   2dcc8:	f240 80a0 	bls.w	2de0c <rpc_transport_ipc_tx_init+0x17c>
   2dccc:	2708      	movs	r7, #8
   2dcce:	f8df 9180 	ldr.w	r9, [pc, #384]	; 2de50 <rpc_transport_ipc_tx_init+0x1c0>
   2dcd2:	4620      	mov	r0, r4
   2dcd4:	4616      	mov	r6, r2
   2dcd6:	460d      	mov	r5, r1
   2dcd8:	2244      	movs	r2, #68	; 0x44
   2dcda:	4651      	mov	r1, sl
   2dcdc:	f8c9 4000 	str.w	r4, [r9]
   2dce0:	f00d fb87 	bl	3b3f2 <memset>
   2dce4:	f8d9 2000 	ldr.w	r2, [r9]
   2dce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2dcec:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2de54 <rpc_transport_ipc_tx_init+0x1c4>
   2dcf0:	f882 a001 	strb.w	sl, [r2, #1]
   2dcf4:	f882 a002 	strb.w	sl, [r2, #2]
   2dcf8:	f882 a003 	strb.w	sl, [r2, #3]
   2dcfc:	7017      	strb	r7, [r2, #0]
   2dcfe:	4618      	mov	r0, r3
   2dd00:	2244      	movs	r2, #68	; 0x44
   2dd02:	4651      	mov	r1, sl
   2dd04:	f8c8 3000 	str.w	r3, [r8]
   2dd08:	f00d fb73 	bl	3b3f2 <memset>
   2dd0c:	f8d8 2000 	ldr.w	r2, [r8]
   2dd10:	f104 0388 	add.w	r3, r4, #136	; 0x88
   2dd14:	f8df b140 	ldr.w	fp, [pc, #320]	; 2de58 <rpc_transport_ipc_tx_init+0x1c8>
   2dd18:	7017      	strb	r7, [r2, #0]
   2dd1a:	f882 a001 	strb.w	sl, [r2, #1]
   2dd1e:	f882 a002 	strb.w	sl, [r2, #2]
   2dd22:	f882 a003 	strb.w	sl, [r2, #3]
   2dd26:	4618      	mov	r0, r3
   2dd28:	f44f 7200 	mov.w	r2, #512	; 0x200
   2dd2c:	4651      	mov	r1, sl
   2dd2e:	f8cb 3000 	str.w	r3, [fp]
   2dd32:	f00d fb5e 	bl	3b3f2 <memset>
   2dd36:	4b39      	ldr	r3, [pc, #228]	; (2de1c <rpc_transport_ipc_tx_init+0x18c>)
   2dd38:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   2dd3c:	f8c3 c000 	str.w	ip, [r3]
   2dd40:	4651      	mov	r1, sl
   2dd42:	4660      	mov	r0, ip
   2dd44:	f44f 7200 	mov.w	r2, #512	; 0x200
   2dd48:	f00d fb53 	bl	3b3f2 <memset>
   2dd4c:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   2dd50:	2106      	movs	r1, #6
   2dd52:	f04f 0e01 	mov.w	lr, #1
   2dd56:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   2dd5a:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   2dd5e:	4b30      	ldr	r3, [pc, #192]	; (2de20 <rpc_transport_ipc_tx_init+0x190>)
   2dd60:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   2dd64:	605c      	str	r4, [r3, #4]
   2dd66:	4c2f      	ldr	r4, [pc, #188]	; (2de24 <rpc_transport_ipc_tx_init+0x194>)
   2dd68:	f8c3 c008 	str.w	ip, [r3, #8]
   2dd6c:	8199      	strh	r1, [r3, #12]
   2dd6e:	f8a3 e000 	strh.w	lr, [r3]
   2dd72:	4619      	mov	r1, r3
   2dd74:	611c      	str	r4, [r3, #16]
   2dd76:	4b2c      	ldr	r3, [pc, #176]	; (2de28 <rpc_transport_ipc_tx_init+0x198>)
   2dd78:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 2de5c <rpc_transport_ipc_tx_init+0x1cc>
   2dd7c:	6120      	str	r0, [r4, #16]
   2dd7e:	482b      	ldr	r0, [pc, #172]	; (2de2c <rpc_transport_ipc_tx_init+0x19c>)
   2dd80:	6063      	str	r3, [r4, #4]
   2dd82:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   2dd86:	60a0      	str	r0, [r4, #8]
   2dd88:	f8c4 c000 	str.w	ip, [r4]
   2dd8c:	4828      	ldr	r0, [pc, #160]	; (2de30 <rpc_transport_ipc_tx_init+0x1a0>)
   2dd8e:	60e3      	str	r3, [r4, #12]
   2dd90:	6162      	str	r2, [r4, #20]
   2dd92:	f006 f9d9 	bl	34148 <nrf_mem_register>
   2dd96:	2800      	cmp	r0, #0
   2dd98:	d132      	bne.n	2de00 <rpc_transport_ipc_tx_init+0x170>
   2dd9a:	f04f 0c02 	mov.w	ip, #2
   2dd9e:	2420      	movs	r4, #32
   2dda0:	f8d9 1000 	ldr.w	r1, [r9]
   2dda4:	f8db 2000 	ldr.w	r2, [fp]
   2dda8:	6029      	str	r1, [r5, #0]
   2ddaa:	4b1c      	ldr	r3, [pc, #112]	; (2de1c <rpc_transport_ipc_tx_init+0x18c>)
   2ddac:	f8d8 1000 	ldr.w	r1, [r8]
   2ddb0:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 2de60 <rpc_transport_ipc_tx_init+0x1d0>
   2ddb4:	4d1f      	ldr	r5, [pc, #124]	; (2de34 <rpc_transport_ipc_tx_init+0x1a4>)
   2ddb6:	6031      	str	r1, [r6, #0]
   2ddb8:	f8ce 2000 	str.w	r2, [lr]
   2ddbc:	681b      	ldr	r3, [r3, #0]
   2ddbe:	491e      	ldr	r1, [pc, #120]	; (2de38 <rpc_transport_ipc_tx_init+0x1a8>)
   2ddc0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   2ddc4:	602a      	str	r2, [r5, #0]
   2ddc6:	4e1d      	ldr	r6, [pc, #116]	; (2de3c <rpc_transport_ipc_tx_init+0x1ac>)
   2ddc8:	4a1d      	ldr	r2, [pc, #116]	; (2de40 <rpc_transport_ipc_tx_init+0x1b0>)
   2ddca:	4d1e      	ldr	r5, [pc, #120]	; (2de44 <rpc_transport_ipc_tx_init+0x1b4>)
   2ddcc:	600b      	str	r3, [r1, #0]
   2ddce:	f503 7300 	add.w	r3, r3, #512	; 0x200
   2ddd2:	491d      	ldr	r1, [pc, #116]	; (2de48 <rpc_transport_ipc_tx_init+0x1b8>)
   2ddd4:	6033      	str	r3, [r6, #0]
   2ddd6:	8028      	strh	r0, [r5, #0]
   2ddd8:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   2dddc:	6809      	ldr	r1, [r1, #0]
   2ddde:	4b1b      	ldr	r3, [pc, #108]	; (2de4c <rpc_transport_ipc_tx_init+0x1bc>)
   2dde0:	9103      	str	r1, [sp, #12]
   2dde2:	9903      	ldr	r1, [sp, #12]
   2dde4:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   2dde8:	6819      	ldr	r1, [r3, #0]
   2ddea:	443b      	add	r3, r7
   2ddec:	9102      	str	r1, [sp, #8]
   2ddee:	9902      	ldr	r1, [sp, #8]
   2ddf0:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   2ddf4:	681b      	ldr	r3, [r3, #0]
   2ddf6:	9301      	str	r3, [sp, #4]
   2ddf8:	9b01      	ldr	r3, [sp, #4]
   2ddfa:	e001      	b.n	2de00 <rpc_transport_ipc_tx_init+0x170>
   2ddfc:	f24c 0007 	movw	r0, #49159	; 0xc007
   2de00:	b005      	add	sp, #20
   2de02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2de06:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2de0a:	4770      	bx	lr
   2de0c:	f24c 0004 	movw	r0, #49156	; 0xc004
   2de10:	b005      	add	sp, #20
   2de12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2de16:	bf00      	nop
   2de18:	2002cb96 	.word	0x2002cb96
   2de1c:	20023afc 	.word	0x20023afc
   2de20:	20023ae8 	.word	0x20023ae8
   2de24:	20023b0c 	.word	0x20023b0c
   2de28:	00040080 	.word	0x00040080
   2de2c:	00040100 	.word	0x00040100
   2de30:	20023ad4 	.word	0x20023ad4
   2de34:	20023ae0 	.word	0x20023ae0
   2de38:	20023adc 	.word	0x20023adc
   2de3c:	20023ad8 	.word	0x20023ad8
   2de40:	4002a000 	.word	0x4002a000
   2de44:	20028948 	.word	0x20028948
   2de48:	4002a514 	.word	0x4002a514
   2de4c:	4002a51c 	.word	0x4002a51c
   2de50:	20023b08 	.word	0x20023b08
   2de54:	20023b00 	.word	0x20023b00
   2de58:	20023b04 	.word	0x20023b04
   2de5c:	00080040 	.word	0x00080040
   2de60:	20023ae4 	.word	0x20023ae4

0002de64 <rpc_transport_ipc_send>:
   2de64:	2800      	cmp	r0, #0
   2de66:	d061      	beq.n	2df2c <rpc_transport_ipc_send+0xc8>
   2de68:	b4f0      	push	{r4, r5, r6, r7}
   2de6a:	4b34      	ldr	r3, [pc, #208]	; (2df3c <rpc_transport_ipc_send+0xd8>)
   2de6c:	b082      	sub	sp, #8
   2de6e:	681a      	ldr	r2, [r3, #0]
   2de70:	4b33      	ldr	r3, [pc, #204]	; (2df40 <rpc_transport_ipc_send+0xdc>)
   2de72:	4282      	cmp	r2, r0
   2de74:	d81e      	bhi.n	2deb4 <rpc_transport_ipc_send+0x50>
   2de76:	681b      	ldr	r3, [r3, #0]
   2de78:	4932      	ldr	r1, [pc, #200]	; (2df44 <rpc_transport_ipc_send+0xe0>)
   2de7a:	4283      	cmp	r3, r0
   2de7c:	6809      	ldr	r1, [r1, #0]
   2de7e:	d803      	bhi.n	2de88 <rpc_transport_ipc_send+0x24>
   2de80:	4c31      	ldr	r4, [pc, #196]	; (2df48 <rpc_transport_ipc_send+0xe4>)
   2de82:	6824      	ldr	r4, [r4, #0]
   2de84:	4284      	cmp	r4, r0
   2de86:	d849      	bhi.n	2df1c <rpc_transport_ipc_send+0xb8>
   2de88:	4281      	cmp	r1, r0
   2de8a:	d90e      	bls.n	2deaa <rpc_transport_ipc_send+0x46>
   2de8c:	4b2f      	ldr	r3, [pc, #188]	; (2df4c <rpc_transport_ipc_send+0xe8>)
   2de8e:	781b      	ldrb	r3, [r3, #0]
   2de90:	2b00      	cmp	r3, #0
   2de92:	d14e      	bne.n	2df32 <rpc_transport_ipc_send+0xce>
   2de94:	1a83      	subs	r3, r0, r2
   2de96:	492e      	ldr	r1, [pc, #184]	; (2df50 <rpc_transport_ipc_send+0xec>)
   2de98:	099f      	lsrs	r7, r3, #6
   2de9a:	069b      	lsls	r3, r3, #26
   2de9c:	680a      	ldr	r2, [r1, #0]
   2de9e:	4d2d      	ldr	r5, [pc, #180]	; (2df54 <rpc_transport_ipc_send+0xf0>)
   2dea0:	f04f 0403 	mov.w	r4, #3
   2dea4:	f04f 0602 	mov.w	r6, #2
   2dea8:	d014      	beq.n	2ded4 <rpc_transport_ipc_send+0x70>
   2deaa:	f24c 0010 	movw	r0, #49168	; 0xc010
   2deae:	b002      	add	sp, #8
   2deb0:	bcf0      	pop	{r4, r5, r6, r7}
   2deb2:	4770      	bx	lr
   2deb4:	681b      	ldr	r3, [r3, #0]
   2deb6:	4298      	cmp	r0, r3
   2deb8:	d3f7      	bcc.n	2deaa <rpc_transport_ipc_send+0x46>
   2deba:	4a23      	ldr	r2, [pc, #140]	; (2df48 <rpc_transport_ipc_send+0xe4>)
   2debc:	6812      	ldr	r2, [r2, #0]
   2debe:	4290      	cmp	r0, r2
   2dec0:	d2f3      	bcs.n	2deaa <rpc_transport_ipc_send+0x46>
   2dec2:	2401      	movs	r4, #1
   2dec4:	1ac3      	subs	r3, r0, r3
   2dec6:	4a24      	ldr	r2, [pc, #144]	; (2df58 <rpc_transport_ipc_send+0xf4>)
   2dec8:	099f      	lsrs	r7, r3, #6
   2deca:	069b      	lsls	r3, r3, #26
   2decc:	4626      	mov	r6, r4
   2dece:	6812      	ldr	r2, [r2, #0]
   2ded0:	4d22      	ldr	r5, [pc, #136]	; (2df5c <rpc_transport_ipc_send+0xf8>)
   2ded2:	d1ea      	bne.n	2deaa <rpc_transport_ipc_send+0x46>
   2ded4:	6841      	ldr	r1, [r0, #4]
   2ded6:	b2c9      	uxtb	r1, r1
   2ded8:	428e      	cmp	r6, r1
   2deda:	d122      	bne.n	2df22 <rpc_transport_ipc_send+0xbe>
   2dedc:	2020      	movs	r0, #32
   2dede:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   2dee2:	491f      	ldr	r1, [pc, #124]	; (2df60 <rpc_transport_ipc_send+0xfc>)
   2dee4:	685a      	ldr	r2, [r3, #4]
   2dee6:	880e      	ldrh	r6, [r1, #0]
   2dee8:	b292      	uxth	r2, r2
   2deea:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   2deee:	605a      	str	r2, [r3, #4]
   2def0:	685a      	ldr	r2, [r3, #4]
   2def2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2def6:	f042 0201 	orr.w	r2, r2, #1
   2defa:	605a      	str	r2, [r3, #4]
   2defc:	bf00      	nop
   2defe:	3801      	subs	r0, #1
   2df00:	d1fc      	bne.n	2defc <rpc_transport_ipc_send+0x98>
   2df02:	2201      	movs	r2, #1
   2df04:	4b17      	ldr	r3, [pc, #92]	; (2df64 <rpc_transport_ipc_send+0x100>)
   2df06:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2df0a:	682a      	ldr	r2, [r5, #0]
   2df0c:	880b      	ldrh	r3, [r1, #0]
   2df0e:	9201      	str	r2, [sp, #4]
   2df10:	9a01      	ldr	r2, [sp, #4]
   2df12:	3301      	adds	r3, #1
   2df14:	800b      	strh	r3, [r1, #0]
   2df16:	b002      	add	sp, #8
   2df18:	bcf0      	pop	{r4, r5, r6, r7}
   2df1a:	4770      	bx	lr
   2df1c:	4281      	cmp	r1, r0
   2df1e:	d9d0      	bls.n	2dec2 <rpc_transport_ipc_send+0x5e>
   2df20:	e7b4      	b.n	2de8c <rpc_transport_ipc_send+0x28>
   2df22:	f24c 0007 	movw	r0, #49159	; 0xc007
   2df26:	b002      	add	sp, #8
   2df28:	bcf0      	pop	{r4, r5, r6, r7}
   2df2a:	4770      	bx	lr
   2df2c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2df30:	4770      	bx	lr
   2df32:	f24c 000f 	movw	r0, #49167	; 0xc00f
   2df36:	b002      	add	sp, #8
   2df38:	bcf0      	pop	{r4, r5, r6, r7}
   2df3a:	4770      	bx	lr
   2df3c:	20023ae4 	.word	0x20023ae4
   2df40:	20023adc 	.word	0x20023adc
   2df44:	20023ae0 	.word	0x20023ae0
   2df48:	20023ad8 	.word	0x20023ad8
   2df4c:	2002cb96 	.word	0x2002cb96
   2df50:	20023b08 	.word	0x20023b08
   2df54:	4002a00c 	.word	0x4002a00c
   2df58:	20023b00 	.word	0x20023b00
   2df5c:	4002a004 	.word	0x4002a004
   2df60:	20028948 	.word	0x20028948
   2df64:	4002a000 	.word	0x4002a000

0002df68 <rpc_transport_ipc_tx_rpc_data_alloc>:
   2df68:	4b18      	ldr	r3, [pc, #96]	; (2dfcc <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   2df6a:	781b      	ldrb	r3, [r3, #0]
   2df6c:	bb63      	cbnz	r3, 2dfc8 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   2df6e:	b4f0      	push	{r4, r5, r6, r7}
   2df70:	4a17      	ldr	r2, [pc, #92]	; (2dfd0 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   2df72:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   2df76:	6814      	ldr	r4, [r2, #0]
   2df78:	4b16      	ldr	r3, [pc, #88]	; (2dfd4 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   2df7a:	6825      	ldr	r5, [r4, #0]
   2df7c:	681e      	ldr	r6, [r3, #0]
   2df7e:	b1a5      	cbz	r5, 2dfaa <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   2df80:	4607      	mov	r7, r0
   2df82:	00c1      	lsls	r1, r0, #3
   2df84:	1863      	adds	r3, r4, r1
   2df86:	685a      	ldr	r2, [r3, #4]
   2df88:	b2d2      	uxtb	r2, r2
   2df8a:	2a03      	cmp	r2, #3
   2df8c:	d104      	bne.n	2df98 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   2df8e:	609f      	str	r7, [r3, #8]
   2df90:	685a      	ldr	r2, [r3, #4]
   2df92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2df96:	605a      	str	r2, [r3, #4]
   2df98:	685a      	ldr	r2, [r3, #4]
   2df9a:	f012 0fff 	tst.w	r2, #255	; 0xff
   2df9e:	d101      	bne.n	2dfa4 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   2dfa0:	689b      	ldr	r3, [r3, #8]
   2dfa2:	b12b      	cbz	r3, 2dfb0 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   2dfa4:	3001      	adds	r0, #1
   2dfa6:	42a8      	cmp	r0, r5
   2dfa8:	d1eb      	bne.n	2df82 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   2dfaa:	2000      	movs	r0, #0
   2dfac:	bcf0      	pop	{r4, r5, r6, r7}
   2dfae:	4770      	bx	lr
   2dfb0:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   2dfb4:	4421      	add	r1, r4
   2dfb6:	6088      	str	r0, [r1, #8]
   2dfb8:	6843      	ldr	r3, [r0, #4]
   2dfba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2dfbe:	f043 0302 	orr.w	r3, r3, #2
   2dfc2:	6043      	str	r3, [r0, #4]
   2dfc4:	bcf0      	pop	{r4, r5, r6, r7}
   2dfc6:	4770      	bx	lr
   2dfc8:	2000      	movs	r0, #0
   2dfca:	4770      	bx	lr
   2dfcc:	2002cb96 	.word	0x2002cb96
   2dfd0:	20023b08 	.word	0x20023b08
   2dfd4:	20023b04 	.word	0x20023b04

0002dfd8 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   2dfd8:	b4f0      	push	{r4, r5, r6, r7}
   2dfda:	4a15      	ldr	r2, [pc, #84]	; (2e030 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   2dfdc:	4b15      	ldr	r3, [pc, #84]	; (2e034 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   2dfde:	6814      	ldr	r4, [r2, #0]
   2dfe0:	681e      	ldr	r6, [r3, #0]
   2dfe2:	6825      	ldr	r5, [r4, #0]
   2dfe4:	b1ad      	cbz	r5, 2e012 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   2dfe6:	2000      	movs	r0, #0
   2dfe8:	4607      	mov	r7, r0
   2dfea:	00c1      	lsls	r1, r0, #3
   2dfec:	1863      	adds	r3, r4, r1
   2dfee:	685a      	ldr	r2, [r3, #4]
   2dff0:	b2d2      	uxtb	r2, r2
   2dff2:	2a03      	cmp	r2, #3
   2dff4:	d104      	bne.n	2e000 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   2dff6:	609f      	str	r7, [r3, #8]
   2dff8:	685a      	ldr	r2, [r3, #4]
   2dffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2dffe:	605a      	str	r2, [r3, #4]
   2e000:	685a      	ldr	r2, [r3, #4]
   2e002:	f012 0fff 	tst.w	r2, #255	; 0xff
   2e006:	d101      	bne.n	2e00c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   2e008:	689b      	ldr	r3, [r3, #8]
   2e00a:	b12b      	cbz	r3, 2e018 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   2e00c:	3001      	adds	r0, #1
   2e00e:	4285      	cmp	r5, r0
   2e010:	d1eb      	bne.n	2dfea <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   2e012:	2000      	movs	r0, #0
   2e014:	bcf0      	pop	{r4, r5, r6, r7}
   2e016:	4770      	bx	lr
   2e018:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   2e01c:	4421      	add	r1, r4
   2e01e:	6088      	str	r0, [r1, #8]
   2e020:	6843      	ldr	r3, [r0, #4]
   2e022:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2e026:	f043 0301 	orr.w	r3, r3, #1
   2e02a:	6043      	str	r3, [r0, #4]
   2e02c:	bcf0      	pop	{r4, r5, r6, r7}
   2e02e:	4770      	bx	lr
   2e030:	20023b00 	.word	0x20023b00
   2e034:	20023afc 	.word	0x20023afc

0002e038 <rpc_transport_ipc_tx_data_alloc>:
   2e038:	4b03      	ldr	r3, [pc, #12]	; (2e048 <rpc_transport_ipc_tx_data_alloc+0x10>)
   2e03a:	781b      	ldrb	r3, [r3, #0]
   2e03c:	b90b      	cbnz	r3, 2e042 <rpc_transport_ipc_tx_data_alloc+0xa>
   2e03e:	f006 ba63 	b.w	34508 <nrf_shared_malloc>
   2e042:	2000      	movs	r0, #0
   2e044:	4770      	bx	lr
   2e046:	bf00      	nop
   2e048:	2002cb96 	.word	0x2002cb96

0002e04c <rpc_transport_ipc_tx_suspend>:
   2e04c:	2201      	movs	r2, #1
   2e04e:	4b01      	ldr	r3, [pc, #4]	; (2e054 <rpc_transport_ipc_tx_suspend+0x8>)
   2e050:	701a      	strb	r2, [r3, #0]
   2e052:	4770      	bx	lr
   2e054:	2002cb96 	.word	0x2002cb96

0002e058 <secure_client_socket>:
   2e058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e05c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2e060:	460c      	mov	r4, r1
   2e062:	680b      	ldr	r3, [r1, #0]
   2e064:	4f45      	ldr	r7, [pc, #276]	; (2e17c <secure_client_socket+0x124>)
   2e066:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2e06a:	600b      	str	r3, [r1, #0]
   2e06c:	680b      	ldr	r3, [r1, #0]
   2e06e:	00c6      	lsls	r6, r0, #3
   2e070:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2e074:	600b      	str	r3, [r1, #0]
   2e076:	eb07 0a06 	add.w	sl, r7, r6
   2e07a:	b084      	sub	sp, #16
   2e07c:	f8da 3004 	ldr.w	r3, [sl, #4]
   2e080:	6989      	ldr	r1, [r1, #24]
   2e082:	f247 0281 	movw	r2, #28801	; 0x7081
   2e086:	4605      	mov	r5, r0
   2e088:	f8d4 8000 	ldr.w	r8, [r4]
   2e08c:	e9cd cc02 	strd	ip, ip, [sp, #8]
   2e090:	f000 fd76 	bl	2eb80 <ip_interface_request_create>
   2e094:	2800      	cmp	r0, #0
   2e096:	d06c      	beq.n	2e172 <secure_client_socket+0x11a>
   2e098:	f8da 2004 	ldr.w	r2, [sl, #4]
   2e09c:	4681      	mov	r9, r0
   2e09e:	2a00      	cmp	r2, #0
   2e0a0:	d15c      	bne.n	2e15c <secure_client_socket+0x104>
   2e0a2:	4b37      	ldr	r3, [pc, #220]	; (2e180 <secure_client_socket+0x128>)
   2e0a4:	1971      	adds	r1, r6, r5
   2e0a6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2e0aa:	2224      	movs	r2, #36	; 0x24
   2e0ac:	f109 0014 	add.w	r0, r9, #20
   2e0b0:	f00d f97f 	bl	3b3b2 <memcpy>
   2e0b4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2e0b8:	4649      	mov	r1, r9
   2e0ba:	3324      	adds	r3, #36	; 0x24
   2e0bc:	f8c9 3008 	str.w	r3, [r9, #8]
   2e0c0:	6822      	ldr	r2, [r4, #0]
   2e0c2:	4643      	mov	r3, r8
   2e0c4:	0c12      	lsrs	r2, r2, #16
   2e0c6:	0412      	lsls	r2, r2, #16
   2e0c8:	f042 020a 	orr.w	r2, r2, #10
   2e0cc:	6022      	str	r2, [r4, #0]
   2e0ce:	4620      	mov	r0, r4
   2e0d0:	f247 0281 	movw	r2, #28801	; 0x7081
   2e0d4:	f000 fd74 	bl	2ebc0 <ip_interface_request_send>
   2e0d8:	4603      	mov	r3, r0
   2e0da:	b968      	cbnz	r0, 2e0f8 <secure_client_socket+0xa0>
   2e0dc:	6823      	ldr	r3, [r4, #0]
   2e0de:	00db      	lsls	r3, r3, #3
   2e0e0:	d40e      	bmi.n	2e100 <secure_client_socket+0xa8>
   2e0e2:	ab03      	add	r3, sp, #12
   2e0e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2e0e8:	210b      	movs	r1, #11
   2e0ea:	4628      	mov	r0, r5
   2e0ec:	f000 fd7c 	bl	2ebe8 <ip_interface_wait>
   2e0f0:	4603      	mov	r3, r0
   2e0f2:	b150      	cbz	r0, 2e10a <secure_client_socket+0xb2>
   2e0f4:	f8c4 8000 	str.w	r8, [r4]
   2e0f8:	4618      	mov	r0, r3
   2e0fa:	b004      	add	sp, #16
   2e0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e100:	2373      	movs	r3, #115	; 0x73
   2e102:	4618      	mov	r0, r3
   2e104:	b004      	add	sp, #16
   2e106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e10a:	220c      	movs	r2, #12
   2e10c:	ab02      	add	r3, sp, #8
   2e10e:	4611      	mov	r1, r2
   2e110:	4628      	mov	r0, r5
   2e112:	f000 fd69 	bl	2ebe8 <ip_interface_wait>
   2e116:	4603      	mov	r3, r0
   2e118:	bb30      	cbnz	r0, 2e168 <secure_client_socket+0x110>
   2e11a:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   2e11e:	b138      	cbz	r0, 2e130 <secure_client_socket+0xd8>
   2e120:	9301      	str	r3, [sp, #4]
   2e122:	f006 f935 	bl	34390 <nrf_free>
   2e126:	9b01      	ldr	r3, [sp, #4]
   2e128:	443e      	add	r6, r7
   2e12a:	6073      	str	r3, [r6, #4]
   2e12c:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   2e130:	4618      	mov	r0, r3
   2e132:	6822      	ldr	r2, [r4, #0]
   2e134:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   2e138:	6022      	str	r2, [r4, #0]
   2e13a:	6822      	ldr	r2, [r4, #0]
   2e13c:	0c12      	lsrs	r2, r2, #16
   2e13e:	0412      	lsls	r2, r2, #16
   2e140:	f042 020c 	orr.w	r2, r2, #12
   2e144:	6022      	str	r2, [r4, #0]
   2e146:	6822      	ldr	r2, [r4, #0]
   2e148:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   2e14c:	6022      	str	r2, [r4, #0]
   2e14e:	6822      	ldr	r2, [r4, #0]
   2e150:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2e154:	6022      	str	r2, [r4, #0]
   2e156:	b004      	add	sp, #16
   2e158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e15c:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   2e160:	6800      	ldr	r0, [r0, #0]
   2e162:	f00d f926 	bl	3b3b2 <memcpy>
   2e166:	e79c      	b.n	2e0a2 <secure_client_socket+0x4a>
   2e168:	2b73      	cmp	r3, #115	; 0x73
   2e16a:	d0c5      	beq.n	2e0f8 <secure_client_socket+0xa0>
   2e16c:	f8c4 8000 	str.w	r8, [r4]
   2e170:	e7c2      	b.n	2e0f8 <secure_client_socket+0xa0>
   2e172:	230c      	movs	r3, #12
   2e174:	4618      	mov	r0, r3
   2e176:	b004      	add	sp, #16
   2e178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e17c:	20023c68 	.word	0x20023c68
   2e180:	20023b24 	.word	0x20023b24

0002e184 <tls_interface_init>:
   2e184:	2201      	movs	r2, #1
   2e186:	4b02      	ldr	r3, [pc, #8]	; (2e190 <tls_interface_init+0xc>)
   2e188:	2000      	movs	r0, #0
   2e18a:	701a      	strb	r2, [r3, #0]
   2e18c:	4770      	bx	lr
   2e18e:	bf00      	nop
   2e190:	2002cb97 	.word	0x2002cb97

0002e194 <tls_interface_open>:
   2e194:	b538      	push	{r3, r4, r5, lr}
   2e196:	4b23      	ldr	r3, [pc, #140]	; (2e224 <tls_interface_open+0x90>)
   2e198:	781b      	ldrb	r3, [r3, #0]
   2e19a:	2b00      	cmp	r3, #0
   2e19c:	d03c      	beq.n	2e218 <tls_interface_open+0x84>
   2e19e:	1e4b      	subs	r3, r1, #1
   2e1a0:	2b01      	cmp	r3, #1
   2e1a2:	d808      	bhi.n	2e1b6 <tls_interface_open+0x22>
   2e1a4:	4614      	mov	r4, r2
   2e1a6:	b162      	cbz	r2, 2e1c2 <tls_interface_open+0x2e>
   2e1a8:	2901      	cmp	r1, #1
   2e1aa:	d02d      	beq.n	2e208 <tls_interface_open+0x74>
   2e1ac:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2e1b0:	bf08      	it	eq
   2e1b2:	2202      	moveq	r2, #2
   2e1b4:	d00d      	beq.n	2e1d2 <tls_interface_open+0x3e>
   2e1b6:	2029      	movs	r0, #41	; 0x29
   2e1b8:	f7fb fbbe 	bl	29938 <bsd_os_errno_set>
   2e1bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2e1c0:	e020      	b.n	2e204 <tls_interface_open+0x70>
   2e1c2:	2901      	cmp	r1, #1
   2e1c4:	bf0b      	itete	eq
   2e1c6:	2201      	moveq	r2, #1
   2e1c8:	2202      	movne	r2, #2
   2e1ca:	f44f 7482 	moveq.w	r4, #260	; 0x104
   2e1ce:	f44f 7487 	movne.w	r4, #270	; 0x10e
   2e1d2:	f000 fd3b 	bl	2ec4c <ip_interface_open>
   2e1d6:	1e05      	subs	r5, r0, #0
   2e1d8:	db1b      	blt.n	2e212 <tls_interface_open+0x7e>
   2e1da:	4b13      	ldr	r3, [pc, #76]	; (2e228 <tls_interface_open+0x94>)
   2e1dc:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   2e1e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2e1e4:	2224      	movs	r2, #36	; 0x24
   2e1e6:	4911      	ldr	r1, [pc, #68]	; (2e22c <tls_interface_open+0x98>)
   2e1e8:	f00d f8e3 	bl	3b3b2 <memcpy>
   2e1ec:	4628      	mov	r0, r5
   2e1ee:	f006 fdcd 	bl	34d8c <interface_socket_from_handle_get>
   2e1f2:	6803      	ldr	r3, [r0, #0]
   2e1f4:	6144      	str	r4, [r0, #20]
   2e1f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2e1fa:	6003      	str	r3, [r0, #0]
   2e1fc:	6803      	ldr	r3, [r0, #0]
   2e1fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2e202:	6003      	str	r3, [r0, #0]
   2e204:	4628      	mov	r0, r5
   2e206:	bd38      	pop	{r3, r4, r5, pc}
   2e208:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2e20c:	d1d3      	bne.n	2e1b6 <tls_interface_open+0x22>
   2e20e:	460a      	mov	r2, r1
   2e210:	e7df      	b.n	2e1d2 <tls_interface_open+0x3e>
   2e212:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2e216:	e7f5      	b.n	2e204 <tls_interface_open+0x70>
   2e218:	2070      	movs	r0, #112	; 0x70
   2e21a:	f7fb fb8d 	bl	29938 <bsd_os_errno_set>
   2e21e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2e222:	e7ef      	b.n	2e204 <tls_interface_open+0x70>
   2e224:	2002cb97 	.word	0x2002cb97
   2e228:	20023b24 	.word	0x20023b24
   2e22c:	0003cae8 	.word	0x0003cae8

0002e230 <tls_interface_close>:
   2e230:	b538      	push	{r3, r4, r5, lr}
   2e232:	4604      	mov	r4, r0
   2e234:	f006 fdaa 	bl	34d8c <interface_socket_from_handle_get>
   2e238:	b180      	cbz	r0, 2e25c <tls_interface_close+0x2c>
   2e23a:	4d0b      	ldr	r5, [pc, #44]	; (2e268 <tls_interface_close+0x38>)
   2e23c:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   2e240:	b138      	cbz	r0, 2e252 <tls_interface_close+0x22>
   2e242:	f006 f8a5 	bl	34390 <nrf_free>
   2e246:	2300      	movs	r3, #0
   2e248:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   2e24c:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   2e250:	6053      	str	r3, [r2, #4]
   2e252:	4620      	mov	r0, r4
   2e254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e258:	f000 bdbe 	b.w	2edd8 <ip_interface_close>
   2e25c:	2009      	movs	r0, #9
   2e25e:	f7fb fb6b 	bl	29938 <bsd_os_errno_set>
   2e262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e266:	bd38      	pop	{r3, r4, r5, pc}
   2e268:	20023c68 	.word	0x20023c68

0002e26c <tls_interface_sendto>:
   2e26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e270:	b087      	sub	sp, #28
   2e272:	9103      	str	r1, [sp, #12]
   2e274:	4616      	mov	r6, r2
   2e276:	469b      	mov	fp, r3
   2e278:	4682      	mov	sl, r0
   2e27a:	f006 fd87 	bl	34d8c <interface_socket_from_handle_get>
   2e27e:	2800      	cmp	r0, #0
   2e280:	f000 8082 	beq.w	2e388 <tls_interface_sendto+0x11c>
   2e284:	2400      	movs	r4, #0
   2e286:	f01b 0f02 	tst.w	fp, #2
   2e28a:	bf08      	it	eq
   2e28c:	6807      	ldreq	r7, [r0, #0]
   2e28e:	4a40      	ldr	r2, [pc, #256]	; (2e390 <tls_interface_sendto+0x124>)
   2e290:	bf08      	it	eq
   2e292:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   2e296:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   2e29a:	4605      	mov	r5, r0
   2e29c:	bf0c      	ite	eq
   2e29e:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   2e2a2:	2700      	movne	r7, #0
   2e2a4:	46a0      	mov	r8, r4
   2e2a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e2aa:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   2e2ae:	e00f      	b.n	2e2d0 <tls_interface_sendto+0x64>
   2e2b0:	f899 2000 	ldrb.w	r2, [r9]
   2e2b4:	2a02      	cmp	r2, #2
   2e2b6:	d061      	beq.n	2e37c <tls_interface_sendto+0x110>
   2e2b8:	692a      	ldr	r2, [r5, #16]
   2e2ba:	2a01      	cmp	r2, #1
   2e2bc:	d061      	beq.n	2e382 <tls_interface_sendto+0x116>
   2e2be:	2b00      	cmp	r3, #0
   2e2c0:	db30      	blt.n	2e324 <tls_interface_sendto+0xb8>
   2e2c2:	f1b8 0f00 	cmp.w	r8, #0
   2e2c6:	dc18      	bgt.n	2e2fa <tls_interface_sendto+0x8e>
   2e2c8:	441c      	add	r4, r3
   2e2ca:	b1df      	cbz	r7, 2e304 <tls_interface_sendto+0x98>
   2e2cc:	42a6      	cmp	r6, r4
   2e2ce:	dd19      	ble.n	2e304 <tls_interface_sendto+0x98>
   2e2d0:	6829      	ldr	r1, [r5, #0]
   2e2d2:	1b32      	subs	r2, r6, r4
   2e2d4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2e2d8:	b289      	uxth	r1, r1
   2e2da:	bfa8      	it	ge
   2e2dc:	f44f 6200 	movge.w	r2, #2048	; 0x800
   2e2e0:	290c      	cmp	r1, #12
   2e2e2:	d013      	beq.n	2e30c <tls_interface_sendto+0xa0>
   2e2e4:	6829      	ldr	r1, [r5, #0]
   2e2e6:	b289      	uxth	r1, r1
   2e2e8:	290b      	cmp	r1, #11
   2e2ea:	d0e1      	beq.n	2e2b0 <tls_interface_sendto+0x44>
   2e2ec:	6929      	ldr	r1, [r5, #16]
   2e2ee:	2901      	cmp	r1, #1
   2e2f0:	d024      	beq.n	2e33c <tls_interface_sendto+0xd0>
   2e2f2:	2902      	cmp	r1, #2
   2e2f4:	d01a      	beq.n	2e32c <tls_interface_sendto+0xc0>
   2e2f6:	f04f 0839 	mov.w	r8, #57	; 0x39
   2e2fa:	4640      	mov	r0, r8
   2e2fc:	f7fb fb1c 	bl	29938 <bsd_os_errno_set>
   2e300:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2e304:	4620      	mov	r0, r4
   2e306:	b007      	add	sp, #28
   2e308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e30c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2e30e:	9903      	ldr	r1, [sp, #12]
   2e310:	9301      	str	r3, [sp, #4]
   2e312:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2e314:	4421      	add	r1, r4
   2e316:	9300      	str	r3, [sp, #0]
   2e318:	4650      	mov	r0, sl
   2e31a:	465b      	mov	r3, fp
   2e31c:	f000 fdce 	bl	2eebc <ip_interface_sendto>
   2e320:	1e03      	subs	r3, r0, #0
   2e322:	dad1      	bge.n	2e2c8 <tls_interface_sendto+0x5c>
   2e324:	f1b8 0f00 	cmp.w	r8, #0
   2e328:	ddea      	ble.n	2e300 <tls_interface_sendto+0x94>
   2e32a:	e7e6      	b.n	2e2fa <tls_interface_sendto+0x8e>
   2e32c:	6829      	ldr	r1, [r5, #0]
   2e32e:	b289      	uxth	r1, r1
   2e330:	2902      	cmp	r1, #2
   2e332:	d007      	beq.n	2e344 <tls_interface_sendto+0xd8>
   2e334:	6829      	ldr	r1, [r5, #0]
   2e336:	b289      	uxth	r1, r1
   2e338:	2904      	cmp	r1, #4
   2e33a:	d003      	beq.n	2e344 <tls_interface_sendto+0xd8>
   2e33c:	6829      	ldr	r1, [r5, #0]
   2e33e:	b289      	uxth	r1, r1
   2e340:	2905      	cmp	r1, #5
   2e342:	d1d8      	bne.n	2e2f6 <tls_interface_sendto+0x8a>
   2e344:	f899 1000 	ldrb.w	r1, [r9]
   2e348:	2902      	cmp	r1, #2
   2e34a:	d1b8      	bne.n	2e2be <tls_interface_sendto+0x52>
   2e34c:	4629      	mov	r1, r5
   2e34e:	4650      	mov	r0, sl
   2e350:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2e354:	f7ff fe80 	bl	2e058 <secure_client_socket>
   2e358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2e35c:	4680      	mov	r8, r0
   2e35e:	2800      	cmp	r0, #0
   2e360:	d1ad      	bne.n	2e2be <tls_interface_sendto+0x52>
   2e362:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2e364:	9903      	ldr	r1, [sp, #12]
   2e366:	9301      	str	r3, [sp, #4]
   2e368:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2e36a:	4421      	add	r1, r4
   2e36c:	9300      	str	r3, [sp, #0]
   2e36e:	4650      	mov	r0, sl
   2e370:	465b      	mov	r3, fp
   2e372:	f000 fda3 	bl	2eebc <ip_interface_sendto>
   2e376:	1e03      	subs	r3, r0, #0
   2e378:	daa6      	bge.n	2e2c8 <tls_interface_sendto+0x5c>
   2e37a:	e7c1      	b.n	2e300 <tls_interface_sendto+0x94>
   2e37c:	f04f 0823 	mov.w	r8, #35	; 0x23
   2e380:	e7bb      	b.n	2e2fa <tls_interface_sendto+0x8e>
   2e382:	f04f 082a 	mov.w	r8, #42	; 0x2a
   2e386:	e7b8      	b.n	2e2fa <tls_interface_sendto+0x8e>
   2e388:	f04f 0809 	mov.w	r8, #9
   2e38c:	e7b5      	b.n	2e2fa <tls_interface_sendto+0x8e>
   2e38e:	bf00      	nop
   2e390:	20023b24 	.word	0x20023b24

0002e394 <tls_interface_recvfrom>:
   2e394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e398:	460d      	mov	r5, r1
   2e39a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2e39e:	4616      	mov	r6, r2
   2e3a0:	461f      	mov	r7, r3
   2e3a2:	4604      	mov	r4, r0
   2e3a4:	f006 fcf2 	bl	34d8c <interface_socket_from_handle_get>
   2e3a8:	2800      	cmp	r0, #0
   2e3aa:	d038      	beq.n	2e41e <tls_interface_recvfrom+0x8a>
   2e3ac:	6803      	ldr	r3, [r0, #0]
   2e3ae:	b29b      	uxth	r3, r3
   2e3b0:	2b0c      	cmp	r3, #12
   2e3b2:	d00f      	beq.n	2e3d4 <tls_interface_recvfrom+0x40>
   2e3b4:	6803      	ldr	r3, [r0, #0]
   2e3b6:	b29b      	uxth	r3, r3
   2e3b8:	2b0d      	cmp	r3, #13
   2e3ba:	d00b      	beq.n	2e3d4 <tls_interface_recvfrom+0x40>
   2e3bc:	6903      	ldr	r3, [r0, #16]
   2e3be:	2b01      	cmp	r3, #1
   2e3c0:	d01a      	beq.n	2e3f8 <tls_interface_recvfrom+0x64>
   2e3c2:	2b02      	cmp	r3, #2
   2e3c4:	d010      	beq.n	2e3e8 <tls_interface_recvfrom+0x54>
   2e3c6:	2023      	movs	r0, #35	; 0x23
   2e3c8:	f7fb fab6 	bl	29938 <bsd_os_errno_set>
   2e3cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e3d4:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2e3d8:	463b      	mov	r3, r7
   2e3da:	4632      	mov	r2, r6
   2e3dc:	4629      	mov	r1, r5
   2e3de:	4620      	mov	r0, r4
   2e3e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e3e4:	f000 bee6 	b.w	2f1b4 <ip_interface_recvfrom>
   2e3e8:	6803      	ldr	r3, [r0, #0]
   2e3ea:	b29b      	uxth	r3, r3
   2e3ec:	2b02      	cmp	r3, #2
   2e3ee:	d007      	beq.n	2e400 <tls_interface_recvfrom+0x6c>
   2e3f0:	6803      	ldr	r3, [r0, #0]
   2e3f2:	b29b      	uxth	r3, r3
   2e3f4:	2b04      	cmp	r3, #4
   2e3f6:	d003      	beq.n	2e400 <tls_interface_recvfrom+0x6c>
   2e3f8:	6803      	ldr	r3, [r0, #0]
   2e3fa:	b29b      	uxth	r3, r3
   2e3fc:	2b05      	cmp	r3, #5
   2e3fe:	d1e2      	bne.n	2e3c6 <tls_interface_recvfrom+0x32>
   2e400:	4b08      	ldr	r3, [pc, #32]	; (2e424 <tls_interface_recvfrom+0x90>)
   2e402:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2e406:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2e40a:	2b02      	cmp	r3, #2
   2e40c:	d1db      	bne.n	2e3c6 <tls_interface_recvfrom+0x32>
   2e40e:	4601      	mov	r1, r0
   2e410:	4620      	mov	r0, r4
   2e412:	f7ff fe21 	bl	2e058 <secure_client_socket>
   2e416:	2800      	cmp	r0, #0
   2e418:	d0dc      	beq.n	2e3d4 <tls_interface_recvfrom+0x40>
   2e41a:	dcd5      	bgt.n	2e3c8 <tls_interface_recvfrom+0x34>
   2e41c:	e7d6      	b.n	2e3cc <tls_interface_recvfrom+0x38>
   2e41e:	2009      	movs	r0, #9
   2e420:	e7d2      	b.n	2e3c8 <tls_interface_recvfrom+0x34>
   2e422:	bf00      	nop
   2e424:	20023b24 	.word	0x20023b24

0002e428 <tls_interface_bind>:
   2e428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e42c:	b082      	sub	sp, #8
   2e42e:	460e      	mov	r6, r1
   2e430:	4617      	mov	r7, r2
   2e432:	4605      	mov	r5, r0
   2e434:	f006 fcaa 	bl	34d8c <interface_socket_from_handle_get>
   2e438:	2800      	cmp	r0, #0
   2e43a:	d069      	beq.n	2e510 <tls_interface_bind+0xe8>
   2e43c:	6803      	ldr	r3, [r0, #0]
   2e43e:	4604      	mov	r4, r0
   2e440:	b29b      	uxth	r3, r3
   2e442:	2b02      	cmp	r3, #2
   2e444:	d158      	bne.n	2e4f8 <tls_interface_bind+0xd0>
   2e446:	463a      	mov	r2, r7
   2e448:	4631      	mov	r1, r6
   2e44a:	4628      	mov	r0, r5
   2e44c:	f001 f9c2 	bl	2f7d4 <ip_interface_bind>
   2e450:	2800      	cmp	r0, #0
   2e452:	d148      	bne.n	2e4e6 <tls_interface_bind+0xbe>
   2e454:	00ee      	lsls	r6, r5, #3
   2e456:	4f2f      	ldr	r7, [pc, #188]	; (2e514 <tls_interface_bind+0xec>)
   2e458:	1973      	adds	r3, r6, r5
   2e45a:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   2e45e:	2b01      	cmp	r3, #1
   2e460:	d002      	beq.n	2e468 <tls_interface_bind+0x40>
   2e462:	b002      	add	sp, #8
   2e464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e468:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2e46c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2e518 <tls_interface_bind+0xf0>
   2e470:	f247 0281 	movw	r2, #28801	; 0x7081
   2e474:	eb0a 0906 	add.w	r9, sl, r6
   2e478:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2e47c:	69a1      	ldr	r1, [r4, #24]
   2e47e:	4628      	mov	r0, r5
   2e480:	f8cd c004 	str.w	ip, [sp, #4]
   2e484:	f000 fb7c 	bl	2eb80 <ip_interface_request_create>
   2e488:	4680      	mov	r8, r0
   2e48a:	2800      	cmp	r0, #0
   2e48c:	d03e      	beq.n	2e50c <tls_interface_bind+0xe4>
   2e48e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2e492:	bbaa      	cbnz	r2, 2e500 <tls_interface_bind+0xd8>
   2e494:	1971      	adds	r1, r6, r5
   2e496:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   2e49a:	2224      	movs	r2, #36	; 0x24
   2e49c:	f108 0014 	add.w	r0, r8, #20
   2e4a0:	f00c ff87 	bl	3b3b2 <memcpy>
   2e4a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2e4a8:	4641      	mov	r1, r8
   2e4aa:	3324      	adds	r3, #36	; 0x24
   2e4ac:	f8c8 3008 	str.w	r3, [r8, #8]
   2e4b0:	6822      	ldr	r2, [r4, #0]
   2e4b2:	2304      	movs	r3, #4
   2e4b4:	0c12      	lsrs	r2, r2, #16
   2e4b6:	0412      	lsls	r2, r2, #16
   2e4b8:	f042 020a 	orr.w	r2, r2, #10
   2e4bc:	6022      	str	r2, [r4, #0]
   2e4be:	4620      	mov	r0, r4
   2e4c0:	f247 0281 	movw	r2, #28801	; 0x7081
   2e4c4:	f000 fb7c 	bl	2ebc0 <ip_interface_request_send>
   2e4c8:	b968      	cbnz	r0, 2e4e6 <tls_interface_bind+0xbe>
   2e4ca:	6823      	ldr	r3, [r4, #0]
   2e4cc:	00db      	lsls	r3, r3, #3
   2e4ce:	d415      	bmi.n	2e4fc <tls_interface_bind+0xd4>
   2e4d0:	4628      	mov	r0, r5
   2e4d2:	ab01      	add	r3, sp, #4
   2e4d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2e4d8:	210b      	movs	r1, #11
   2e4da:	f000 fb85 	bl	2ebe8 <ip_interface_wait>
   2e4de:	2800      	cmp	r0, #0
   2e4e0:	d0bf      	beq.n	2e462 <tls_interface_bind+0x3a>
   2e4e2:	2304      	movs	r3, #4
   2e4e4:	6023      	str	r3, [r4, #0]
   2e4e6:	2800      	cmp	r0, #0
   2e4e8:	ddbb      	ble.n	2e462 <tls_interface_bind+0x3a>
   2e4ea:	f7fb fa25 	bl	29938 <bsd_os_errno_set>
   2e4ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e4f2:	b002      	add	sp, #8
   2e4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e4f8:	202d      	movs	r0, #45	; 0x2d
   2e4fa:	e7f6      	b.n	2e4ea <tls_interface_bind+0xc2>
   2e4fc:	2073      	movs	r0, #115	; 0x73
   2e4fe:	e7f4      	b.n	2e4ea <tls_interface_bind+0xc2>
   2e500:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   2e504:	6800      	ldr	r0, [r0, #0]
   2e506:	f00c ff54 	bl	3b3b2 <memcpy>
   2e50a:	e7c3      	b.n	2e494 <tls_interface_bind+0x6c>
   2e50c:	200c      	movs	r0, #12
   2e50e:	e7ec      	b.n	2e4ea <tls_interface_bind+0xc2>
   2e510:	2009      	movs	r0, #9
   2e512:	e7ea      	b.n	2e4ea <tls_interface_bind+0xc2>
   2e514:	20023b24 	.word	0x20023b24
   2e518:	20023c68 	.word	0x20023c68

0002e51c <tls_interface_connect>:
   2e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e51e:	460e      	mov	r6, r1
   2e520:	4617      	mov	r7, r2
   2e522:	4604      	mov	r4, r0
   2e524:	f006 fc32 	bl	34d8c <interface_socket_from_handle_get>
   2e528:	b1e8      	cbz	r0, 2e566 <tls_interface_connect+0x4a>
   2e52a:	4b13      	ldr	r3, [pc, #76]	; (2e578 <tls_interface_connect+0x5c>)
   2e52c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2e530:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2e534:	2b02      	cmp	r3, #2
   2e536:	d11c      	bne.n	2e572 <tls_interface_connect+0x56>
   2e538:	6803      	ldr	r3, [r0, #0]
   2e53a:	4605      	mov	r5, r0
   2e53c:	b29b      	uxth	r3, r3
   2e53e:	2b02      	cmp	r3, #2
   2e540:	d003      	beq.n	2e54a <tls_interface_connect+0x2e>
   2e542:	6803      	ldr	r3, [r0, #0]
   2e544:	b29b      	uxth	r3, r3
   2e546:	2b04      	cmp	r3, #4
   2e548:	d113      	bne.n	2e572 <tls_interface_connect+0x56>
   2e54a:	463a      	mov	r2, r7
   2e54c:	4631      	mov	r1, r6
   2e54e:	4620      	mov	r0, r4
   2e550:	f000 ff58 	bl	2f404 <ip_interface_connect>
   2e554:	b110      	cbz	r0, 2e55c <tls_interface_connect+0x40>
   2e556:	2800      	cmp	r0, #0
   2e558:	dc06      	bgt.n	2e568 <tls_interface_connect+0x4c>
   2e55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e55c:	4629      	mov	r1, r5
   2e55e:	4620      	mov	r0, r4
   2e560:	f7ff fd7a 	bl	2e058 <secure_client_socket>
   2e564:	e7f7      	b.n	2e556 <tls_interface_connect+0x3a>
   2e566:	2009      	movs	r0, #9
   2e568:	f7fb f9e6 	bl	29938 <bsd_os_errno_set>
   2e56c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e572:	202d      	movs	r0, #45	; 0x2d
   2e574:	e7f8      	b.n	2e568 <tls_interface_connect+0x4c>
   2e576:	bf00      	nop
   2e578:	20023b24 	.word	0x20023b24

0002e57c <tls_interface_listen>:
   2e57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e580:	b085      	sub	sp, #20
   2e582:	4689      	mov	r9, r1
   2e584:	4605      	mov	r5, r0
   2e586:	f006 fc01 	bl	34d8c <interface_socket_from_handle_get>
   2e58a:	2800      	cmp	r0, #0
   2e58c:	f000 8084 	beq.w	2e698 <tls_interface_listen+0x11c>
   2e590:	6803      	ldr	r3, [r0, #0]
   2e592:	4604      	mov	r4, r0
   2e594:	00da      	lsls	r2, r3, #3
   2e596:	d47d      	bmi.n	2e694 <tls_interface_listen+0x118>
   2e598:	6903      	ldr	r3, [r0, #16]
   2e59a:	2b01      	cmp	r3, #1
   2e59c:	d17a      	bne.n	2e694 <tls_interface_listen+0x118>
   2e59e:	6803      	ldr	r3, [r0, #0]
   2e5a0:	b29b      	uxth	r3, r3
   2e5a2:	2b04      	cmp	r3, #4
   2e5a4:	d05d      	beq.n	2e662 <tls_interface_listen+0xe6>
   2e5a6:	6823      	ldr	r3, [r4, #0]
   2e5a8:	b29b      	uxth	r3, r3
   2e5aa:	2b0b      	cmp	r3, #11
   2e5ac:	d172      	bne.n	2e694 <tls_interface_listen+0x118>
   2e5ae:	4a3b      	ldr	r2, [pc, #236]	; (2e69c <tls_interface_listen+0x120>)
   2e5b0:	00ee      	lsls	r6, r5, #3
   2e5b2:	1973      	adds	r3, r6, r5
   2e5b4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   2e5b8:	9201      	str	r2, [sp, #4]
   2e5ba:	2b01      	cmp	r3, #1
   2e5bc:	d16a      	bne.n	2e694 <tls_interface_listen+0x118>
   2e5be:	2201      	movs	r2, #1
   2e5c0:	9901      	ldr	r1, [sp, #4]
   2e5c2:	1973      	adds	r3, r6, r5
   2e5c4:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   2e5c8:	6823      	ldr	r3, [r4, #0]
   2e5ca:	2b0b      	cmp	r3, #11
   2e5cc:	d040      	beq.n	2e650 <tls_interface_listen+0xd4>
   2e5ce:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2e5d2:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 2e6a0 <tls_interface_listen+0x124>
   2e5d6:	f247 0281 	movw	r2, #28801	; 0x7081
   2e5da:	eb0a 0806 	add.w	r8, sl, r6
   2e5de:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2e5e2:	69a1      	ldr	r1, [r4, #24]
   2e5e4:	4628      	mov	r0, r5
   2e5e6:	6827      	ldr	r7, [r4, #0]
   2e5e8:	f8cd c00c 	str.w	ip, [sp, #12]
   2e5ec:	f000 fac8 	bl	2eb80 <ip_interface_request_create>
   2e5f0:	4683      	mov	fp, r0
   2e5f2:	2800      	cmp	r0, #0
   2e5f4:	d046      	beq.n	2e684 <tls_interface_listen+0x108>
   2e5f6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2e5fa:	2a00      	cmp	r2, #0
   2e5fc:	d144      	bne.n	2e688 <tls_interface_listen+0x10c>
   2e5fe:	9b01      	ldr	r3, [sp, #4]
   2e600:	1971      	adds	r1, r6, r5
   2e602:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2e606:	2224      	movs	r2, #36	; 0x24
   2e608:	f10b 0014 	add.w	r0, fp, #20
   2e60c:	f00c fed1 	bl	3b3b2 <memcpy>
   2e610:	f8db 2008 	ldr.w	r2, [fp, #8]
   2e614:	4659      	mov	r1, fp
   2e616:	3224      	adds	r2, #36	; 0x24
   2e618:	f8cb 2008 	str.w	r2, [fp, #8]
   2e61c:	6822      	ldr	r2, [r4, #0]
   2e61e:	463b      	mov	r3, r7
   2e620:	0c12      	lsrs	r2, r2, #16
   2e622:	0412      	lsls	r2, r2, #16
   2e624:	f042 020a 	orr.w	r2, r2, #10
   2e628:	6022      	str	r2, [r4, #0]
   2e62a:	4620      	mov	r0, r4
   2e62c:	f247 0281 	movw	r2, #28801	; 0x7081
   2e630:	f000 fac6 	bl	2ebc0 <ip_interface_request_send>
   2e634:	b980      	cbnz	r0, 2e658 <tls_interface_listen+0xdc>
   2e636:	6823      	ldr	r3, [r4, #0]
   2e638:	00db      	lsls	r3, r3, #3
   2e63a:	d41b      	bmi.n	2e674 <tls_interface_listen+0xf8>
   2e63c:	ab03      	add	r3, sp, #12
   2e63e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2e642:	210b      	movs	r1, #11
   2e644:	4628      	mov	r0, r5
   2e646:	f000 facf 	bl	2ebe8 <ip_interface_wait>
   2e64a:	b108      	cbz	r0, 2e650 <tls_interface_listen+0xd4>
   2e64c:	6027      	str	r7, [r4, #0]
   2e64e:	e003      	b.n	2e658 <tls_interface_listen+0xdc>
   2e650:	4649      	mov	r1, r9
   2e652:	4628      	mov	r0, r5
   2e654:	f001 f960 	bl	2f918 <ip_interface_listen>
   2e658:	2800      	cmp	r0, #0
   2e65a:	dc0c      	bgt.n	2e676 <tls_interface_listen+0xfa>
   2e65c:	b005      	add	sp, #20
   2e65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e662:	4a0e      	ldr	r2, [pc, #56]	; (2e69c <tls_interface_listen+0x120>)
   2e664:	00ee      	lsls	r6, r5, #3
   2e666:	1973      	adds	r3, r6, r5
   2e668:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   2e66c:	9201      	str	r2, [sp, #4]
   2e66e:	2b02      	cmp	r3, #2
   2e670:	d199      	bne.n	2e5a6 <tls_interface_listen+0x2a>
   2e672:	e7a4      	b.n	2e5be <tls_interface_listen+0x42>
   2e674:	2073      	movs	r0, #115	; 0x73
   2e676:	f7fb f95f 	bl	29938 <bsd_os_errno_set>
   2e67a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e67e:	b005      	add	sp, #20
   2e680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e684:	200c      	movs	r0, #12
   2e686:	e7f6      	b.n	2e676 <tls_interface_listen+0xfa>
   2e688:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   2e68c:	6800      	ldr	r0, [r0, #0]
   2e68e:	f00c fe90 	bl	3b3b2 <memcpy>
   2e692:	e7b4      	b.n	2e5fe <tls_interface_listen+0x82>
   2e694:	202d      	movs	r0, #45	; 0x2d
   2e696:	e7ee      	b.n	2e676 <tls_interface_listen+0xfa>
   2e698:	2009      	movs	r0, #9
   2e69a:	e7ec      	b.n	2e676 <tls_interface_listen+0xfa>
   2e69c:	20023b24 	.word	0x20023b24
   2e6a0:	20023c68 	.word	0x20023c68

0002e6a4 <tls_interface_accept>:
   2e6a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e6a8:	b083      	sub	sp, #12
   2e6aa:	460f      	mov	r7, r1
   2e6ac:	4690      	mov	r8, r2
   2e6ae:	4699      	mov	r9, r3
   2e6b0:	4606      	mov	r6, r0
   2e6b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2e6b6:	f006 fb69 	bl	34d8c <interface_socket_from_handle_get>
   2e6ba:	9401      	str	r4, [sp, #4]
   2e6bc:	2800      	cmp	r0, #0
   2e6be:	d048      	beq.n	2e752 <tls_interface_accept+0xae>
   2e6c0:	6805      	ldr	r5, [r0, #0]
   2e6c2:	b2ad      	uxth	r5, r5
   2e6c4:	2d07      	cmp	r5, #7
   2e6c6:	d144      	bne.n	2e752 <tls_interface_accept+0xae>
   2e6c8:	6803      	ldr	r3, [r0, #0]
   2e6ca:	00db      	lsls	r3, r3, #3
   2e6cc:	d443      	bmi.n	2e756 <tls_interface_accept+0xb2>
   2e6ce:	464b      	mov	r3, r9
   2e6d0:	4642      	mov	r2, r8
   2e6d2:	4639      	mov	r1, r7
   2e6d4:	4630      	mov	r0, r6
   2e6d6:	f001 f99b 	bl	2fa10 <ip_interface_accept>
   2e6da:	1e04      	subs	r4, r0, #0
   2e6dc:	da08      	bge.n	2e6f0 <tls_interface_accept+0x4c>
   2e6de:	4620      	mov	r0, r4
   2e6e0:	f7fb f92a 	bl	29938 <bsd_os_errno_set>
   2e6e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2e6e8:	4620      	mov	r0, r4
   2e6ea:	b003      	add	sp, #12
   2e6ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e6f0:	f006 fb4c 	bl	34d8c <interface_socket_from_handle_get>
   2e6f4:	6803      	ldr	r3, [r0, #0]
   2e6f6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 2e760 <tls_interface_accept+0xbc>
   2e6fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2e6fe:	6003      	str	r3, [r0, #0]
   2e700:	6803      	ldr	r3, [r0, #0]
   2e702:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   2e706:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2e70a:	00bf      	lsls	r7, r7, #2
   2e70c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2e710:	4605      	mov	r5, r0
   2e712:	6003      	str	r3, [r0, #0]
   2e714:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   2e718:	2224      	movs	r2, #36	; 0x24
   2e71a:	eb08 0007 	add.w	r0, r8, r7
   2e71e:	f00c fe48 	bl	3b3b2 <memcpy>
   2e722:	2302      	movs	r3, #2
   2e724:	f808 3007 	strb.w	r3, [r8, r7]
   2e728:	682a      	ldr	r2, [r5, #0]
   2e72a:	ab01      	add	r3, sp, #4
   2e72c:	0c12      	lsrs	r2, r2, #16
   2e72e:	0412      	lsls	r2, r2, #16
   2e730:	f042 020b 	orr.w	r2, r2, #11
   2e734:	602a      	str	r2, [r5, #0]
   2e736:	210c      	movs	r1, #12
   2e738:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2e73c:	4620      	mov	r0, r4
   2e73e:	f000 fa53 	bl	2ebe8 <ip_interface_wait>
   2e742:	4605      	mov	r5, r0
   2e744:	2800      	cmp	r0, #0
   2e746:	d0cf      	beq.n	2e6e8 <tls_interface_accept+0x44>
   2e748:	4620      	mov	r0, r4
   2e74a:	f000 fb45 	bl	2edd8 <ip_interface_close>
   2e74e:	462c      	mov	r4, r5
   2e750:	e7c5      	b.n	2e6de <tls_interface_accept+0x3a>
   2e752:	2409      	movs	r4, #9
   2e754:	e7c3      	b.n	2e6de <tls_interface_accept+0x3a>
   2e756:	202d      	movs	r0, #45	; 0x2d
   2e758:	f7fb f8ee 	bl	29938 <bsd_os_errno_set>
   2e75c:	e7c4      	b.n	2e6e8 <tls_interface_accept+0x44>
   2e75e:	bf00      	nop
   2e760:	20023b24 	.word	0x20023b24

0002e764 <tls_interface_setopt>:
   2e764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e768:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2e76c:	b082      	sub	sp, #8
   2e76e:	9e08      	ldr	r6, [sp, #32]
   2e770:	d120      	bne.n	2e7b4 <tls_interface_setopt+0x50>
   2e772:	4698      	mov	r8, r3
   2e774:	4617      	mov	r7, r2
   2e776:	4605      	mov	r5, r0
   2e778:	2b00      	cmp	r3, #0
   2e77a:	f000 80a0 	beq.w	2e8be <tls_interface_setopt+0x15a>
   2e77e:	f006 fb05 	bl	34d8c <interface_socket_from_handle_get>
   2e782:	2800      	cmp	r0, #0
   2e784:	f000 8097 	beq.w	2e8b6 <tls_interface_setopt+0x152>
   2e788:	6804      	ldr	r4, [r0, #0]
   2e78a:	b2a4      	uxth	r4, r4
   2e78c:	2c02      	cmp	r4, #2
   2e78e:	d008      	beq.n	2e7a2 <tls_interface_setopt+0x3e>
   2e790:	6803      	ldr	r3, [r0, #0]
   2e792:	b29b      	uxth	r3, r3
   2e794:	2b04      	cmp	r3, #4
   2e796:	d004      	beq.n	2e7a2 <tls_interface_setopt+0x3e>
   2e798:	6803      	ldr	r3, [r0, #0]
   2e79a:	b29b      	uxth	r3, r3
   2e79c:	2b05      	cmp	r3, #5
   2e79e:	f040 808a 	bne.w	2e8b6 <tls_interface_setopt+0x152>
   2e7a2:	1e7a      	subs	r2, r7, #1
   2e7a4:	2a05      	cmp	r2, #5
   2e7a6:	f200 8090 	bhi.w	2e8ca <tls_interface_setopt+0x166>
   2e7aa:	e8df f002 	tbb	[pc, r2]
   2e7ae:	2718      	.short	0x2718
   2e7b0:	08594b3c 	.word	0x08594b3c
   2e7b4:	b002      	add	sp, #8
   2e7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e7ba:	f001 ba6b 	b.w	2fc94 <ip_interface_setopt>
   2e7be:	4601      	mov	r1, r0
   2e7c0:	e9cd 8600 	strd	r8, r6, [sp]
   2e7c4:	4628      	mov	r0, r5
   2e7c6:	f247 0301 	movw	r3, #28673	; 0x7001
   2e7ca:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e7ce:	f000 ff8b 	bl	2f6e8 <ip_interface_socketoption_send>
   2e7d2:	2800      	cmp	r0, #0
   2e7d4:	d161      	bne.n	2e89a <tls_interface_setopt+0x136>
   2e7d6:	2000      	movs	r0, #0
   2e7d8:	b002      	add	sp, #8
   2e7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e7de:	2e04      	cmp	r6, #4
   2e7e0:	d15a      	bne.n	2e898 <tls_interface_setopt+0x134>
   2e7e2:	f8d8 0000 	ldr.w	r0, [r8]
   2e7e6:	2800      	cmp	r0, #0
   2e7e8:	d05e      	beq.n	2e8a8 <tls_interface_setopt+0x144>
   2e7ea:	2801      	cmp	r0, #1
   2e7ec:	d154      	bne.n	2e898 <tls_interface_setopt+0x134>
   2e7ee:	4b38      	ldr	r3, [pc, #224]	; (2e8d0 <tls_interface_setopt+0x16c>)
   2e7f0:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2e7f4:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   2e7f8:	2000      	movs	r0, #0
   2e7fa:	e7ed      	b.n	2e7d8 <tls_interface_setopt+0x74>
   2e7fc:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   2e800:	d04a      	beq.n	2e898 <tls_interface_setopt+0x134>
   2e802:	f016 0703 	ands.w	r7, r6, #3
   2e806:	d147      	bne.n	2e898 <tls_interface_setopt+0x134>
   2e808:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2e80c:	00a4      	lsls	r4, r4, #2
   2e80e:	4b30      	ldr	r3, [pc, #192]	; (2e8d0 <tls_interface_setopt+0x16c>)
   2e810:	1d20      	adds	r0, r4, #4
   2e812:	4418      	add	r0, r3
   2e814:	4423      	add	r3, r4
   2e816:	4632      	mov	r2, r6
   2e818:	4641      	mov	r1, r8
   2e81a:	f883 c003 	strb.w	ip, [r3, #3]
   2e81e:	f00c fdc8 	bl	3b3b2 <memcpy>
   2e822:	4638      	mov	r0, r7
   2e824:	e7d8      	b.n	2e7d8 <tls_interface_setopt+0x74>
   2e826:	2e01      	cmp	r6, #1
   2e828:	d136      	bne.n	2e898 <tls_interface_setopt+0x134>
   2e82a:	f898 2000 	ldrb.w	r2, [r8]
   2e82e:	4b28      	ldr	r3, [pc, #160]	; (2e8d0 <tls_interface_setopt+0x16c>)
   2e830:	3200      	adds	r2, #0
   2e832:	bf18      	it	ne
   2e834:	2201      	movne	r2, #1
   2e836:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2e83a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2e83e:	7062      	strb	r2, [r4, #1]
   2e840:	2000      	movs	r0, #0
   2e842:	e7c9      	b.n	2e7d8 <tls_interface_setopt+0x74>
   2e844:	2e04      	cmp	r6, #4
   2e846:	d127      	bne.n	2e898 <tls_interface_setopt+0x134>
   2e848:	f8d8 2000 	ldr.w	r2, [r8]
   2e84c:	2a02      	cmp	r2, #2
   2e84e:	d823      	bhi.n	2e898 <tls_interface_setopt+0x134>
   2e850:	4b1f      	ldr	r3, [pc, #124]	; (2e8d0 <tls_interface_setopt+0x16c>)
   2e852:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2e856:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2e85a:	70a2      	strb	r2, [r4, #2]
   2e85c:	2000      	movs	r0, #0
   2e85e:	e7bb      	b.n	2e7d8 <tls_interface_setopt+0x74>
   2e860:	4c1c      	ldr	r4, [pc, #112]	; (2e8d4 <tls_interface_setopt+0x170>)
   2e862:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   2e866:	b138      	cbz	r0, 2e878 <tls_interface_setopt+0x114>
   2e868:	f005 fd92 	bl	34390 <nrf_free>
   2e86c:	2200      	movs	r2, #0
   2e86e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   2e872:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   2e876:	605a      	str	r2, [r3, #4]
   2e878:	2e00      	cmp	r6, #0
   2e87a:	d0ac      	beq.n	2e7d6 <tls_interface_setopt+0x72>
   2e87c:	4630      	mov	r0, r6
   2e87e:	f005 fd7d 	bl	3437c <nrf_malloc>
   2e882:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   2e886:	b1c0      	cbz	r0, 2e8ba <tls_interface_setopt+0x156>
   2e888:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2e88c:	4632      	mov	r2, r6
   2e88e:	4641      	mov	r1, r8
   2e890:	6066      	str	r6, [r4, #4]
   2e892:	f00c fd8e 	bl	3b3b2 <memcpy>
   2e896:	e79e      	b.n	2e7d6 <tls_interface_setopt+0x72>
   2e898:	2016      	movs	r0, #22
   2e89a:	f7fb f84d 	bl	29938 <bsd_os_errno_set>
   2e89e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e8a2:	b002      	add	sp, #8
   2e8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e8a8:	2202      	movs	r2, #2
   2e8aa:	4b09      	ldr	r3, [pc, #36]	; (2e8d0 <tls_interface_setopt+0x16c>)
   2e8ac:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2e8b0:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   2e8b4:	e790      	b.n	2e7d8 <tls_interface_setopt+0x74>
   2e8b6:	2009      	movs	r0, #9
   2e8b8:	e7ef      	b.n	2e89a <tls_interface_setopt+0x136>
   2e8ba:	200c      	movs	r0, #12
   2e8bc:	e7ed      	b.n	2e89a <tls_interface_setopt+0x136>
   2e8be:	200e      	movs	r0, #14
   2e8c0:	f7fb f83a 	bl	29938 <bsd_os_errno_set>
   2e8c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e8c8:	e786      	b.n	2e7d8 <tls_interface_setopt+0x74>
   2e8ca:	202a      	movs	r0, #42	; 0x2a
   2e8cc:	e7e5      	b.n	2e89a <tls_interface_setopt+0x136>
   2e8ce:	bf00      	nop
   2e8d0:	20023b24 	.word	0x20023b24
   2e8d4:	20023c68 	.word	0x20023c68

0002e8d8 <tls_interface_getopt>:
   2e8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e8da:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2e8de:	b083      	sub	sp, #12
   2e8e0:	9f08      	ldr	r7, [sp, #32]
   2e8e2:	d112      	bne.n	2e90a <tls_interface_getopt+0x32>
   2e8e4:	461d      	mov	r5, r3
   2e8e6:	b16b      	cbz	r3, 2e904 <tls_interface_getopt+0x2c>
   2e8e8:	b167      	cbz	r7, 2e904 <tls_interface_getopt+0x2c>
   2e8ea:	4606      	mov	r6, r0
   2e8ec:	4614      	mov	r4, r2
   2e8ee:	f006 fa4d 	bl	34d8c <interface_socket_from_handle_get>
   2e8f2:	b178      	cbz	r0, 2e914 <tls_interface_getopt+0x3c>
   2e8f4:	3c01      	subs	r4, #1
   2e8f6:	2c05      	cmp	r4, #5
   2e8f8:	d859      	bhi.n	2e9ae <tls_interface_getopt+0xd6>
   2e8fa:	e8df f004 	tbb	[pc, r4]
   2e8fe:	2818      	.short	0x2818
   2e900:	0d584c40 	.word	0x0d584c40
   2e904:	200e      	movs	r0, #14
   2e906:	b003      	add	sp, #12
   2e908:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e90a:	b003      	add	sp, #12
   2e90c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2e910:	f001 ba62 	b.w	2fdd8 <ip_interface_getopt>
   2e914:	2009      	movs	r0, #9
   2e916:	e7f6      	b.n	2e906 <tls_interface_getopt+0x2e>
   2e918:	4601      	mov	r1, r0
   2e91a:	e9cd 5700 	strd	r5, r7, [sp]
   2e91e:	4630      	mov	r0, r6
   2e920:	f247 0301 	movw	r3, #28673	; 0x7001
   2e924:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e928:	f000 fe2e 	bl	2f588 <ip_interface_socketoption_get>
   2e92c:	e7eb      	b.n	2e906 <tls_interface_getopt+0x2e>
   2e92e:	683b      	ldr	r3, [r7, #0]
   2e930:	2b04      	cmp	r3, #4
   2e932:	d13e      	bne.n	2e9b2 <tls_interface_getopt+0xda>
   2e934:	4b22      	ldr	r3, [pc, #136]	; (2e9c0 <tls_interface_getopt+0xe8>)
   2e936:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2e93a:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   2e93e:	2000      	movs	r0, #0
   2e940:	f1a3 0301 	sub.w	r3, r3, #1
   2e944:	fab3 f383 	clz	r3, r3
   2e948:	095b      	lsrs	r3, r3, #5
   2e94a:	602b      	str	r3, [r5, #0]
   2e94c:	e7db      	b.n	2e906 <tls_interface_getopt+0x2e>
   2e94e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2e952:	491b      	ldr	r1, [pc, #108]	; (2e9c0 <tls_interface_getopt+0xe8>)
   2e954:	683b      	ldr	r3, [r7, #0]
   2e956:	00b6      	lsls	r6, r6, #2
   2e958:	198a      	adds	r2, r1, r6
   2e95a:	f013 0403 	ands.w	r4, r3, #3
   2e95e:	78d0      	ldrb	r0, [r2, #3]
   2e960:	d129      	bne.n	2e9b6 <tls_interface_getopt+0xde>
   2e962:	089b      	lsrs	r3, r3, #2
   2e964:	4283      	cmp	r3, r0
   2e966:	bf28      	it	cs
   2e968:	4603      	movcs	r3, r0
   2e96a:	009a      	lsls	r2, r3, #2
   2e96c:	b31b      	cbz	r3, 2e9b6 <tls_interface_getopt+0xde>
   2e96e:	3604      	adds	r6, #4
   2e970:	4431      	add	r1, r6
   2e972:	603a      	str	r2, [r7, #0]
   2e974:	4628      	mov	r0, r5
   2e976:	f00c fd1c 	bl	3b3b2 <memcpy>
   2e97a:	4620      	mov	r0, r4
   2e97c:	e7c3      	b.n	2e906 <tls_interface_getopt+0x2e>
   2e97e:	683b      	ldr	r3, [r7, #0]
   2e980:	2b01      	cmp	r3, #1
   2e982:	d116      	bne.n	2e9b2 <tls_interface_getopt+0xda>
   2e984:	4b0e      	ldr	r3, [pc, #56]	; (2e9c0 <tls_interface_getopt+0xe8>)
   2e986:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2e98a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2e98e:	7873      	ldrb	r3, [r6, #1]
   2e990:	2000      	movs	r0, #0
   2e992:	702b      	strb	r3, [r5, #0]
   2e994:	e7b7      	b.n	2e906 <tls_interface_getopt+0x2e>
   2e996:	683b      	ldr	r3, [r7, #0]
   2e998:	2b04      	cmp	r3, #4
   2e99a:	d10a      	bne.n	2e9b2 <tls_interface_getopt+0xda>
   2e99c:	4b08      	ldr	r3, [pc, #32]	; (2e9c0 <tls_interface_getopt+0xe8>)
   2e99e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2e9a2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2e9a6:	78b3      	ldrb	r3, [r6, #2]
   2e9a8:	2000      	movs	r0, #0
   2e9aa:	602b      	str	r3, [r5, #0]
   2e9ac:	e7ab      	b.n	2e906 <tls_interface_getopt+0x2e>
   2e9ae:	202a      	movs	r0, #42	; 0x2a
   2e9b0:	e7a9      	b.n	2e906 <tls_interface_getopt+0x2e>
   2e9b2:	2016      	movs	r0, #22
   2e9b4:	e7a7      	b.n	2e906 <tls_interface_getopt+0x2e>
   2e9b6:	2800      	cmp	r0, #0
   2e9b8:	d1fb      	bne.n	2e9b2 <tls_interface_getopt+0xda>
   2e9ba:	6038      	str	r0, [r7, #0]
   2e9bc:	e7a3      	b.n	2e906 <tls_interface_getopt+0x2e>
   2e9be:	bf00      	nop
   2e9c0:	20023b24 	.word	0x20023b24

0002e9c4 <tls_rpc_ip_event_handler>:
   2e9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e9c6:	f248 0581 	movw	r5, #32897	; 0x8081
   2e9ca:	42ab      	cmp	r3, r5
   2e9cc:	460c      	mov	r4, r1
   2e9ce:	d044      	beq.n	2ea5a <tls_rpc_ip_event_handler+0x96>
   2e9d0:	f249 0182 	movw	r1, #36994	; 0x9082
   2e9d4:	428b      	cmp	r3, r1
   2e9d6:	4606      	mov	r6, r0
   2e9d8:	d02d      	beq.n	2ea36 <tls_rpc_ip_event_handler+0x72>
   2e9da:	f248 0102 	movw	r1, #32770	; 0x8002
   2e9de:	428b      	cmp	r3, r1
   2e9e0:	d001      	beq.n	2e9e6 <tls_rpc_ip_event_handler+0x22>
   2e9e2:	2001      	movs	r0, #1
   2e9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e9e6:	2c00      	cmp	r4, #0
   2e9e8:	d0fb      	beq.n	2e9e2 <tls_rpc_ip_event_handler+0x1e>
   2e9ea:	6963      	ldr	r3, [r4, #20]
   2e9ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   2e9f0:	d002      	beq.n	2e9f8 <tls_rpc_ip_event_handler+0x34>
   2e9f2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   2e9f6:	d1f4      	bne.n	2e9e2 <tls_rpc_ip_event_handler+0x1e>
   2e9f8:	6823      	ldr	r3, [r4, #0]
   2e9fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   2e9fe:	6023      	str	r3, [r4, #0]
   2ea00:	6955      	ldr	r5, [r2, #20]
   2ea02:	bb05      	cbnz	r5, 2ea46 <tls_rpc_ip_event_handler+0x82>
   2ea04:	6823      	ldr	r3, [r4, #0]
   2ea06:	0c1b      	lsrs	r3, r3, #16
   2ea08:	041b      	lsls	r3, r3, #16
   2ea0a:	f043 0305 	orr.w	r3, r3, #5
   2ea0e:	6023      	str	r3, [r4, #0]
   2ea10:	6823      	ldr	r3, [r4, #0]
   2ea12:	00db      	lsls	r3, r3, #3
   2ea14:	d50d      	bpl.n	2ea32 <tls_rpc_ip_event_handler+0x6e>
   2ea16:	4b2a      	ldr	r3, [pc, #168]	; (2eac0 <tls_rpc_ip_event_handler+0xfc>)
   2ea18:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   2ea1c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2ea20:	2b02      	cmp	r3, #2
   2ea22:	d106      	bne.n	2ea32 <tls_rpc_ip_event_handler+0x6e>
   2ea24:	4630      	mov	r0, r6
   2ea26:	4621      	mov	r1, r4
   2ea28:	f7ff fb16 	bl	2e058 <secure_client_socket>
   2ea2c:	b108      	cbz	r0, 2ea32 <tls_rpc_ip_event_handler+0x6e>
   2ea2e:	2873      	cmp	r0, #115	; 0x73
   2ea30:	d10c      	bne.n	2ea4c <tls_rpc_ip_event_handler+0x88>
   2ea32:	2000      	movs	r0, #0
   2ea34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ea36:	2c00      	cmp	r4, #0
   2ea38:	d0fb      	beq.n	2ea32 <tls_rpc_ip_event_handler+0x6e>
   2ea3a:	6823      	ldr	r3, [r4, #0]
   2ea3c:	b29b      	uxth	r3, r3
   2ea3e:	2b0b      	cmp	r3, #11
   2ea40:	d1f7      	bne.n	2ea32 <tls_rpc_ip_event_handler+0x6e>
   2ea42:	6915      	ldr	r5, [r2, #16]
   2ea44:	b1cd      	cbz	r5, 2ea7a <tls_rpc_ip_event_handler+0xb6>
   2ea46:	4628      	mov	r0, r5
   2ea48:	f000 f890 	bl	2eb6c <rpc_error_to_nrf_bsd_error>
   2ea4c:	6060      	str	r0, [r4, #4]
   2ea4e:	6823      	ldr	r3, [r4, #0]
   2ea50:	2000      	movs	r0, #0
   2ea52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   2ea56:	6023      	str	r3, [r4, #0]
   2ea58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ea5a:	2900      	cmp	r1, #0
   2ea5c:	d0e9      	beq.n	2ea32 <tls_rpc_ip_event_handler+0x6e>
   2ea5e:	680b      	ldr	r3, [r1, #0]
   2ea60:	b29b      	uxth	r3, r3
   2ea62:	2b0a      	cmp	r3, #10
   2ea64:	d1e5      	bne.n	2ea32 <tls_rpc_ip_event_handler+0x6e>
   2ea66:	6950      	ldr	r0, [r2, #20]
   2ea68:	2800      	cmp	r0, #0
   2ea6a:	d1ed      	bne.n	2ea48 <tls_rpc_ip_event_handler+0x84>
   2ea6c:	680b      	ldr	r3, [r1, #0]
   2ea6e:	0c1b      	lsrs	r3, r3, #16
   2ea70:	041b      	lsls	r3, r3, #16
   2ea72:	f043 030b 	orr.w	r3, r3, #11
   2ea76:	600b      	str	r3, [r1, #0]
   2ea78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ea7a:	6823      	ldr	r3, [r4, #0]
   2ea7c:	4f11      	ldr	r7, [pc, #68]	; (2eac4 <tls_rpc_ip_event_handler+0x100>)
   2ea7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   2ea82:	6023      	str	r3, [r4, #0]
   2ea84:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   2ea88:	b130      	cbz	r0, 2ea98 <tls_rpc_ip_event_handler+0xd4>
   2ea8a:	f005 fc81 	bl	34390 <nrf_free>
   2ea8e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   2ea92:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   2ea96:	605d      	str	r5, [r3, #4]
   2ea98:	6823      	ldr	r3, [r4, #0]
   2ea9a:	2000      	movs	r0, #0
   2ea9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2eaa0:	6023      	str	r3, [r4, #0]
   2eaa2:	6823      	ldr	r3, [r4, #0]
   2eaa4:	0c1b      	lsrs	r3, r3, #16
   2eaa6:	041b      	lsls	r3, r3, #16
   2eaa8:	f043 030c 	orr.w	r3, r3, #12
   2eaac:	6023      	str	r3, [r4, #0]
   2eaae:	6823      	ldr	r3, [r4, #0]
   2eab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2eab4:	6023      	str	r3, [r4, #0]
   2eab6:	6823      	ldr	r3, [r4, #0]
   2eab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2eabc:	6023      	str	r3, [r4, #0]
   2eabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2eac0:	20023b24 	.word	0x20023b24
   2eac4:	20023c68 	.word	0x20023c68

0002eac8 <ip_client_event_handler>:
   2eac8:	f850 1b08 	ldr.w	r1, [r0], #8
   2eacc:	0c09      	lsrs	r1, r1, #16
   2eace:	f001 bb23 	b.w	30118 <rpc_ip_event_handler>
   2ead2:	bf00      	nop

0002ead4 <rpc_ip_client_init>:
   2ead4:	4801      	ldr	r0, [pc, #4]	; (2eadc <rpc_ip_client_init+0x8>)
   2ead6:	f001 be21 	b.w	3071c <rpc_client_register>
   2eada:	bf00      	nop
   2eadc:	0003cb0c 	.word	0x0003cb0c

0002eae0 <rpc_ip_client_request_alloc>:
   2eae0:	2300      	movs	r3, #0
   2eae2:	b510      	push	{r4, lr}
   2eae4:	b082      	sub	sp, #8
   2eae6:	9301      	str	r3, [sp, #4]
   2eae8:	b158      	cbz	r0, 2eb02 <rpc_ip_client_request_alloc+0x22>
   2eaea:	4604      	mov	r4, r0
   2eaec:	aa01      	add	r2, sp, #4
   2eaee:	2004      	movs	r0, #4
   2eaf0:	f001 fe8e 	bl	30810 <rpc_message_alloc>
   2eaf4:	b918      	cbnz	r0, 2eafe <rpc_ip_client_request_alloc+0x1e>
   2eaf6:	9b01      	ldr	r3, [sp, #4]
   2eaf8:	b10b      	cbz	r3, 2eafe <rpc_ip_client_request_alloc+0x1e>
   2eafa:	3308      	adds	r3, #8
   2eafc:	6023      	str	r3, [r4, #0]
   2eafe:	b002      	add	sp, #8
   2eb00:	bd10      	pop	{r4, pc}
   2eb02:	2007      	movs	r0, #7
   2eb04:	b002      	add	sp, #8
   2eb06:	bd10      	pop	{r4, pc}

0002eb08 <rpc_ip_client_request_send>:
   2eb08:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2eb0c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   2eb10:	d10b      	bne.n	2eb2a <rpc_ip_client_request_send+0x22>
   2eb12:	b160      	cbz	r0, 2eb2e <rpc_ip_client_request_send+0x26>
   2eb14:	4603      	mov	r3, r0
   2eb16:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2eb1a:	2004      	movs	r0, #4
   2eb1c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2eb20:	f843 1d08 	str.w	r1, [r3, #-8]!
   2eb24:	4619      	mov	r1, r3
   2eb26:	f001 be63 	b.w	307f0 <rpc_message_send>
   2eb2a:	200f      	movs	r0, #15
   2eb2c:	4770      	bx	lr
   2eb2e:	2007      	movs	r0, #7
   2eb30:	4770      	bx	lr
   2eb32:	bf00      	nop

0002eb34 <rpc_ip_client_message_free>:
   2eb34:	b120      	cbz	r0, 2eb40 <rpc_ip_client_message_free+0xc>
   2eb36:	f1a0 0108 	sub.w	r1, r0, #8
   2eb3a:	2004      	movs	r0, #4
   2eb3c:	f001 be94 	b.w	30868 <rpc_message_free>
   2eb40:	2007      	movs	r0, #7
   2eb42:	4770      	bx	lr

0002eb44 <rpc_ip_client_data_free>:
   2eb44:	b118      	cbz	r0, 2eb4e <rpc_ip_client_data_free+0xa>
   2eb46:	4601      	mov	r1, r0
   2eb48:	2004      	movs	r0, #4
   2eb4a:	f001 be99 	b.w	30880 <rpc_message_data_free>
   2eb4e:	2007      	movs	r0, #7
   2eb50:	4770      	bx	lr
   2eb52:	bf00      	nop

0002eb54 <ip_recvd_packet_free_cb>:
   2eb54:	b510      	push	{r4, lr}
   2eb56:	4604      	mov	r4, r0
   2eb58:	6800      	ldr	r0, [r0, #0]
   2eb5a:	f7ff fff3 	bl	2eb44 <rpc_ip_client_data_free>
   2eb5e:	68a0      	ldr	r0, [r4, #8]
   2eb60:	b118      	cbz	r0, 2eb6a <ip_recvd_packet_free_cb+0x16>
   2eb62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2eb66:	f005 bc13 	b.w	34390 <nrf_free>
   2eb6a:	bd10      	pop	{r4, pc}

0002eb6c <rpc_error_to_nrf_bsd_error>:
   2eb6c:	2810      	cmp	r0, #16
   2eb6e:	bf9a      	itte	ls
   2eb70:	4b02      	ldrls	r3, [pc, #8]	; (2eb7c <rpc_error_to_nrf_bsd_error+0x10>)
   2eb72:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   2eb76:	202d      	movhi	r0, #45	; 0x2d
   2eb78:	4770      	bx	lr
   2eb7a:	bf00      	nop
   2eb7c:	0003cb1c 	.word	0x0003cb1c

0002eb80 <ip_interface_request_create>:
   2eb80:	b570      	push	{r4, r5, r6, lr}
   2eb82:	2500      	movs	r5, #0
   2eb84:	b082      	sub	sp, #8
   2eb86:	ac02      	add	r4, sp, #8
   2eb88:	f844 5d04 	str.w	r5, [r4, #-4]!
   2eb8c:	4606      	mov	r6, r0
   2eb8e:	460d      	mov	r5, r1
   2eb90:	4620      	mov	r0, r4
   2eb92:	4619      	mov	r1, r3
   2eb94:	4614      	mov	r4, r2
   2eb96:	f7ff ffa3 	bl	2eae0 <rpc_ip_client_request_alloc>
   2eb9a:	b960      	cbnz	r0, 2ebb6 <ip_interface_request_create+0x36>
   2eb9c:	9b01      	ldr	r3, [sp, #4]
   2eb9e:	2208      	movs	r2, #8
   2eba0:	7258      	strb	r0, [r3, #9]
   2eba2:	7298      	strb	r0, [r3, #10]
   2eba4:	72d8      	strb	r0, [r3, #11]
   2eba6:	4618      	mov	r0, r3
   2eba8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   2ebac:	60dc      	str	r4, [r3, #12]
   2ebae:	611d      	str	r5, [r3, #16]
   2ebb0:	721a      	strb	r2, [r3, #8]
   2ebb2:	b002      	add	sp, #8
   2ebb4:	bd70      	pop	{r4, r5, r6, pc}
   2ebb6:	9b01      	ldr	r3, [sp, #4]
   2ebb8:	4618      	mov	r0, r3
   2ebba:	b002      	add	sp, #8
   2ebbc:	bd70      	pop	{r4, r5, r6, pc}
   2ebbe:	bf00      	nop

0002ebc0 <ip_interface_request_send>:
   2ebc0:	b570      	push	{r4, r5, r6, lr}
   2ebc2:	460c      	mov	r4, r1
   2ebc4:	4605      	mov	r5, r0
   2ebc6:	4611      	mov	r1, r2
   2ebc8:	4620      	mov	r0, r4
   2ebca:	461e      	mov	r6, r3
   2ebcc:	f7ff ff9c 	bl	2eb08 <rpc_ip_client_request_send>
   2ebd0:	b900      	cbnz	r0, 2ebd4 <ip_interface_request_send+0x14>
   2ebd2:	bd70      	pop	{r4, r5, r6, pc}
   2ebd4:	6820      	ldr	r0, [r4, #0]
   2ebd6:	b108      	cbz	r0, 2ebdc <ip_interface_request_send+0x1c>
   2ebd8:	f7ff ffb4 	bl	2eb44 <rpc_ip_client_data_free>
   2ebdc:	4620      	mov	r0, r4
   2ebde:	f7ff ffa9 	bl	2eb34 <rpc_ip_client_message_free>
   2ebe2:	602e      	str	r6, [r5, #0]
   2ebe4:	2023      	movs	r0, #35	; 0x23
   2ebe6:	bd70      	pop	{r4, r5, r6, pc}

0002ebe8 <ip_interface_wait>:
   2ebe8:	b538      	push	{r3, r4, r5, lr}
   2ebea:	4605      	mov	r5, r0
   2ebec:	f006 f85a 	bl	34ca4 <interface_socket_wait>
   2ebf0:	4604      	mov	r4, r0
   2ebf2:	b108      	cbz	r0, 2ebf8 <ip_interface_wait+0x10>
   2ebf4:	4620      	mov	r0, r4
   2ebf6:	bd38      	pop	{r3, r4, r5, pc}
   2ebf8:	4628      	mov	r0, r5
   2ebfa:	f006 f8c7 	bl	34d8c <interface_socket_from_handle_get>
   2ebfe:	2800      	cmp	r0, #0
   2ec00:	d0f8      	beq.n	2ebf4 <ip_interface_wait+0xc>
   2ec02:	6844      	ldr	r4, [r0, #4]
   2ec04:	2c00      	cmp	r4, #0
   2ec06:	d0f5      	beq.n	2ebf4 <ip_interface_wait+0xc>
   2ec08:	2300      	movs	r3, #0
   2ec0a:	6043      	str	r3, [r0, #4]
   2ec0c:	4620      	mov	r0, r4
   2ec0e:	bd38      	pop	{r3, r4, r5, pc}

0002ec10 <ip_interface_init>:
   2ec10:	b538      	push	{r3, r4, r5, lr}
   2ec12:	2300      	movs	r3, #0
   2ec14:	4d09      	ldr	r5, [pc, #36]	; (2ec3c <ip_interface_init+0x2c>)
   2ec16:	4c0a      	ldr	r4, [pc, #40]	; (2ec40 <ip_interface_init+0x30>)
   2ec18:	4619      	mov	r1, r3
   2ec1a:	2224      	movs	r2, #36	; 0x24
   2ec1c:	4809      	ldr	r0, [pc, #36]	; (2ec44 <ip_interface_init+0x34>)
   2ec1e:	602b      	str	r3, [r5, #0]
   2ec20:	6023      	str	r3, [r4, #0]
   2ec22:	f00c fbe6 	bl	3b3f2 <memset>
   2ec26:	f7ff ff55 	bl	2ead4 <rpc_ip_client_init>
   2ec2a:	b918      	cbnz	r0, 2ec34 <ip_interface_init+0x24>
   2ec2c:	2201      	movs	r2, #1
   2ec2e:	4b06      	ldr	r3, [pc, #24]	; (2ec48 <ip_interface_init+0x38>)
   2ec30:	701a      	strb	r2, [r3, #0]
   2ec32:	bd38      	pop	{r3, r4, r5, pc}
   2ec34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ec38:	bd38      	pop	{r3, r4, r5, pc}
   2ec3a:	bf00      	nop
   2ec3c:	20023cb8 	.word	0x20023cb8
   2ec40:	20023cb4 	.word	0x20023cb4
   2ec44:	20023cbc 	.word	0x20023cbc
   2ec48:	2002cb98 	.word	0x2002cb98

0002ec4c <ip_interface_open>:
   2ec4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ec50:	2500      	movs	r5, #0
   2ec52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2ec56:	4c5e      	ldr	r4, [pc, #376]	; (2edd0 <ip_interface_open+0x184>)
   2ec58:	4606      	mov	r6, r0
   2ec5a:	7820      	ldrb	r0, [r4, #0]
   2ec5c:	b084      	sub	sp, #16
   2ec5e:	e9cd 5701 	strd	r5, r7, [sp, #4]
   2ec62:	2800      	cmp	r0, #0
   2ec64:	f000 80b0 	beq.w	2edc8 <ip_interface_open+0x17c>
   2ec68:	4690      	mov	r8, r2
   2ec6a:	f026 0208 	bic.w	r2, r6, #8
   2ec6e:	2a02      	cmp	r2, #2
   2ec70:	460c      	mov	r4, r1
   2ec72:	d002      	beq.n	2ec7a <ip_interface_open+0x2e>
   2ec74:	2e05      	cmp	r6, #5
   2ec76:	f040 808d 	bne.w	2ed94 <ip_interface_open+0x148>
   2ec7a:	1e63      	subs	r3, r4, #1
   2ec7c:	2b02      	cmp	r3, #2
   2ec7e:	f200 809d 	bhi.w	2edbc <ip_interface_open+0x170>
   2ec82:	f1b8 0f00 	cmp.w	r8, #0
   2ec86:	d159      	bne.n	2ed3c <ip_interface_open+0xf0>
   2ec88:	2c01      	cmp	r4, #1
   2ec8a:	d06f      	beq.n	2ed6c <ip_interface_open+0x120>
   2ec8c:	2c03      	cmp	r4, #3
   2ec8e:	bf18      	it	ne
   2ec90:	f04f 0802 	movne.w	r8, #2
   2ec94:	4a4f      	ldr	r2, [pc, #316]	; (2edd4 <ip_interface_open+0x188>)
   2ec96:	4621      	mov	r1, r4
   2ec98:	a801      	add	r0, sp, #4
   2ec9a:	f005 ff51 	bl	34b40 <interface_socket_allocate>
   2ec9e:	9b01      	ldr	r3, [sp, #4]
   2eca0:	4607      	mov	r7, r0
   2eca2:	2b00      	cmp	r3, #0
   2eca4:	d060      	beq.n	2ed68 <ip_interface_open+0x11c>
   2eca6:	2100      	movs	r1, #0
   2eca8:	a804      	add	r0, sp, #16
   2ecaa:	f840 1d04 	str.w	r1, [r0, #-4]!
   2ecae:	e9c3 6403 	strd	r6, r4, [r3, #12]
   2ecb2:	f8c3 8014 	str.w	r8, [r3, #20]
   2ecb6:	f7ff ff13 	bl	2eae0 <rpc_ip_client_request_alloc>
   2ecba:	2800      	cmp	r0, #0
   2ecbc:	d151      	bne.n	2ed62 <ip_interface_open+0x116>
   2ecbe:	f247 0201 	movw	r2, #28673	; 0x7001
   2ecc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ecc6:	2108      	movs	r1, #8
   2ecc8:	9d03      	ldr	r5, [sp, #12]
   2ecca:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   2ecce:	60ea      	str	r2, [r5, #12]
   2ecd0:	7268      	strb	r0, [r5, #9]
   2ecd2:	72a8      	strb	r0, [r5, #10]
   2ecd4:	72e8      	strb	r0, [r5, #11]
   2ecd6:	7229      	strb	r1, [r5, #8]
   2ecd8:	742b      	strb	r3, [r5, #16]
   2ecda:	746b      	strb	r3, [r5, #17]
   2ecdc:	74ab      	strb	r3, [r5, #18]
   2ecde:	74eb      	strb	r3, [r5, #19]
   2ece0:	68ab      	ldr	r3, [r5, #8]
   2ece2:	2e05      	cmp	r6, #5
   2ece4:	f103 030c 	add.w	r3, r3, #12
   2ece8:	60ab      	str	r3, [r5, #8]
   2ecea:	d003      	beq.n	2ecf4 <ip_interface_open+0xa8>
   2ecec:	2e0a      	cmp	r6, #10
   2ecee:	bf14      	ite	ne
   2ecf0:	2601      	movne	r6, #1
   2ecf2:	2602      	moveq	r6, #2
   2ecf4:	616e      	str	r6, [r5, #20]
   2ecf6:	f8c5 801c 	str.w	r8, [r5, #28]
   2ecfa:	61ac      	str	r4, [r5, #24]
   2ecfc:	f247 0101 	movw	r1, #28673	; 0x7001
   2ed00:	4628      	mov	r0, r5
   2ed02:	f8dd 8004 	ldr.w	r8, [sp, #4]
   2ed06:	f7ff feff 	bl	2eb08 <rpc_ip_client_request_send>
   2ed0a:	4606      	mov	r6, r0
   2ed0c:	b380      	cbz	r0, 2ed70 <ip_interface_open+0x124>
   2ed0e:	6828      	ldr	r0, [r5, #0]
   2ed10:	b108      	cbz	r0, 2ed16 <ip_interface_open+0xca>
   2ed12:	f7ff ff17 	bl	2eb44 <rpc_ip_client_data_free>
   2ed16:	4628      	mov	r0, r5
   2ed18:	f7ff ff0c 	bl	2eb34 <rpc_ip_client_message_free>
   2ed1c:	2301      	movs	r3, #1
   2ed1e:	2523      	movs	r5, #35	; 0x23
   2ed20:	f8c8 3000 	str.w	r3, [r8]
   2ed24:	4638      	mov	r0, r7
   2ed26:	f005 ff6f 	bl	34c08 <interface_socket_free>
   2ed2a:	4628      	mov	r0, r5
   2ed2c:	f7fa fe04 	bl	29938 <bsd_os_errno_set>
   2ed30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2ed34:	4638      	mov	r0, r7
   2ed36:	b004      	add	sp, #16
   2ed38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ed3c:	2c01      	cmp	r4, #1
   2ed3e:	d00a      	beq.n	2ed56 <ip_interface_open+0x10a>
   2ed40:	2c02      	cmp	r4, #2
   2ed42:	d10b      	bne.n	2ed5c <ip_interface_open+0x110>
   2ed44:	f1b8 0f02 	cmp.w	r8, #2
   2ed48:	d0a4      	beq.n	2ec94 <ip_interface_open+0x48>
   2ed4a:	2029      	movs	r0, #41	; 0x29
   2ed4c:	f7fa fdf4 	bl	29938 <bsd_os_errno_set>
   2ed50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2ed54:	e7ee      	b.n	2ed34 <ip_interface_open+0xe8>
   2ed56:	f1b8 0f01 	cmp.w	r8, #1
   2ed5a:	d1f6      	bne.n	2ed4a <ip_interface_open+0xfe>
   2ed5c:	f04f 0802 	mov.w	r8, #2
   2ed60:	e798      	b.n	2ec94 <ip_interface_open+0x48>
   2ed62:	9d03      	ldr	r5, [sp, #12]
   2ed64:	2d00      	cmp	r5, #0
   2ed66:	d1bb      	bne.n	2ece0 <ip_interface_open+0x94>
   2ed68:	2569      	movs	r5, #105	; 0x69
   2ed6a:	e7db      	b.n	2ed24 <ip_interface_open+0xd8>
   2ed6c:	46a0      	mov	r8, r4
   2ed6e:	e791      	b.n	2ec94 <ip_interface_open+0x48>
   2ed70:	ab02      	add	r3, sp, #8
   2ed72:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2ed76:	2102      	movs	r1, #2
   2ed78:	4638      	mov	r0, r7
   2ed7a:	f005 ff93 	bl	34ca4 <interface_socket_wait>
   2ed7e:	4605      	mov	r5, r0
   2ed80:	2800      	cmp	r0, #0
   2ed82:	d1cf      	bne.n	2ed24 <ip_interface_open+0xd8>
   2ed84:	4638      	mov	r0, r7
   2ed86:	f006 f801 	bl	34d8c <interface_socket_from_handle_get>
   2ed8a:	b138      	cbz	r0, 2ed9c <ip_interface_open+0x150>
   2ed8c:	6845      	ldr	r5, [r0, #4]
   2ed8e:	b12d      	cbz	r5, 2ed9c <ip_interface_open+0x150>
   2ed90:	6046      	str	r6, [r0, #4]
   2ed92:	e7c7      	b.n	2ed24 <ip_interface_open+0xd8>
   2ed94:	202f      	movs	r0, #47	; 0x2f
   2ed96:	f7fa fdcf 	bl	29938 <bsd_os_errno_set>
   2ed9a:	e7cb      	b.n	2ed34 <ip_interface_open+0xe8>
   2ed9c:	3c02      	subs	r4, #2
   2ed9e:	2c01      	cmp	r4, #1
   2eda0:	d8c8      	bhi.n	2ed34 <ip_interface_open+0xe8>
   2eda2:	4638      	mov	r0, r7
   2eda4:	9b01      	ldr	r3, [sp, #4]
   2eda6:	681a      	ldr	r2, [r3, #0]
   2eda8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   2edac:	601a      	str	r2, [r3, #0]
   2edae:	681a      	ldr	r2, [r3, #0]
   2edb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2edb4:	601a      	str	r2, [r3, #0]
   2edb6:	b004      	add	sp, #16
   2edb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2edbc:	2016      	movs	r0, #22
   2edbe:	f7fa fdbb 	bl	29938 <bsd_os_errno_set>
   2edc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2edc6:	e7b5      	b.n	2ed34 <ip_interface_open+0xe8>
   2edc8:	2070      	movs	r0, #112	; 0x70
   2edca:	f7fa fdb5 	bl	29938 <bsd_os_errno_set>
   2edce:	e7b1      	b.n	2ed34 <ip_interface_open+0xe8>
   2edd0:	2002cb98 	.word	0x2002cb98
   2edd4:	0002eb55 	.word	0x0002eb55

0002edd8 <ip_interface_close>:
   2edd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2eddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ede0:	b082      	sub	sp, #8
   2ede2:	4606      	mov	r6, r0
   2ede4:	9300      	str	r3, [sp, #0]
   2ede6:	f005 ffd1 	bl	34d8c <interface_socket_from_handle_get>
   2edea:	2800      	cmp	r0, #0
   2edec:	d062      	beq.n	2eeb4 <ip_interface_close+0xdc>
   2edee:	4604      	mov	r4, r0
   2edf0:	2100      	movs	r1, #0
   2edf2:	a802      	add	r0, sp, #8
   2edf4:	6827      	ldr	r7, [r4, #0]
   2edf6:	f840 1d04 	str.w	r1, [r0, #-4]!
   2edfa:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2edfe:	f7ff fe6f 	bl	2eae0 <rpc_ip_client_request_alloc>
   2ee02:	2800      	cmp	r0, #0
   2ee04:	d139      	bne.n	2ee7a <ip_interface_close+0xa2>
   2ee06:	f247 0309 	movw	r3, #28681	; 0x7009
   2ee0a:	2208      	movs	r2, #8
   2ee0c:	9d01      	ldr	r5, [sp, #4]
   2ee0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2ee12:	60eb      	str	r3, [r5, #12]
   2ee14:	f8c5 8010 	str.w	r8, [r5, #16]
   2ee18:	7268      	strb	r0, [r5, #9]
   2ee1a:	72a8      	strb	r0, [r5, #10]
   2ee1c:	72e8      	strb	r0, [r5, #11]
   2ee1e:	722a      	strb	r2, [r5, #8]
   2ee20:	6823      	ldr	r3, [r4, #0]
   2ee22:	f247 0109 	movw	r1, #28681	; 0x7009
   2ee26:	0c1b      	lsrs	r3, r3, #16
   2ee28:	041b      	lsls	r3, r3, #16
   2ee2a:	f043 030d 	orr.w	r3, r3, #13
   2ee2e:	6023      	str	r3, [r4, #0]
   2ee30:	6823      	ldr	r3, [r4, #0]
   2ee32:	4628      	mov	r0, r5
   2ee34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2ee38:	6023      	str	r3, [r4, #0]
   2ee3a:	6823      	ldr	r3, [r4, #0]
   2ee3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2ee40:	6023      	str	r3, [r4, #0]
   2ee42:	f7ff fe61 	bl	2eb08 <rpc_ip_client_request_send>
   2ee46:	bb38      	cbnz	r0, 2ee98 <ip_interface_close+0xc0>
   2ee48:	466b      	mov	r3, sp
   2ee4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2ee4e:	210e      	movs	r1, #14
   2ee50:	4630      	mov	r0, r6
   2ee52:	f005 ff27 	bl	34ca4 <interface_socket_wait>
   2ee56:	4604      	mov	r4, r0
   2ee58:	b1a0      	cbz	r0, 2ee84 <ip_interface_close+0xac>
   2ee5a:	4c17      	ldr	r4, [pc, #92]	; (2eeb8 <ip_interface_close+0xe0>)
   2ee5c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   2ee60:	b120      	cbz	r0, 2ee6c <ip_interface_close+0x94>
   2ee62:	f7ff fe67 	bl	2eb34 <rpc_ip_client_message_free>
   2ee66:	2300      	movs	r3, #0
   2ee68:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   2ee6c:	4630      	mov	r0, r6
   2ee6e:	f005 fecb 	bl	34c08 <interface_socket_free>
   2ee72:	2000      	movs	r0, #0
   2ee74:	b002      	add	sp, #8
   2ee76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ee7a:	9d01      	ldr	r5, [sp, #4]
   2ee7c:	200c      	movs	r0, #12
   2ee7e:	2d00      	cmp	r5, #0
   2ee80:	d1ce      	bne.n	2ee20 <ip_interface_close+0x48>
   2ee82:	e012      	b.n	2eeaa <ip_interface_close+0xd2>
   2ee84:	4630      	mov	r0, r6
   2ee86:	f005 ff81 	bl	34d8c <interface_socket_from_handle_get>
   2ee8a:	2800      	cmp	r0, #0
   2ee8c:	d0e5      	beq.n	2ee5a <ip_interface_close+0x82>
   2ee8e:	6843      	ldr	r3, [r0, #4]
   2ee90:	2b00      	cmp	r3, #0
   2ee92:	d0e2      	beq.n	2ee5a <ip_interface_close+0x82>
   2ee94:	6044      	str	r4, [r0, #4]
   2ee96:	e7e0      	b.n	2ee5a <ip_interface_close+0x82>
   2ee98:	6828      	ldr	r0, [r5, #0]
   2ee9a:	b108      	cbz	r0, 2eea0 <ip_interface_close+0xc8>
   2ee9c:	f7ff fe52 	bl	2eb44 <rpc_ip_client_data_free>
   2eea0:	4628      	mov	r0, r5
   2eea2:	f7ff fe47 	bl	2eb34 <rpc_ip_client_message_free>
   2eea6:	2023      	movs	r0, #35	; 0x23
   2eea8:	6027      	str	r7, [r4, #0]
   2eeaa:	f7fa fd45 	bl	29938 <bsd_os_errno_set>
   2eeae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eeb2:	e7df      	b.n	2ee74 <ip_interface_close+0x9c>
   2eeb4:	2009      	movs	r0, #9
   2eeb6:	e7f8      	b.n	2eeaa <ip_interface_close+0xd2>
   2eeb8:	20023cbc 	.word	0x20023cbc

0002eebc <ip_interface_sendto>:
   2eebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eec0:	2400      	movs	r4, #0
   2eec2:	b08b      	sub	sp, #44	; 0x2c
   2eec4:	9102      	str	r1, [sp, #8]
   2eec6:	4615      	mov	r5, r2
   2eec8:	4699      	mov	r9, r3
   2eeca:	9407      	str	r4, [sp, #28]
   2eecc:	4607      	mov	r7, r0
   2eece:	9e14      	ldr	r6, [sp, #80]	; 0x50
   2eed0:	f005 ff5c 	bl	34d8c <interface_socket_from_handle_get>
   2eed4:	2800      	cmp	r0, #0
   2eed6:	f000 8163 	beq.w	2f1a0 <ip_interface_sendto+0x2e4>
   2eeda:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2eede:	f300 8150 	bgt.w	2f182 <ip_interface_sendto+0x2c6>
   2eee2:	6903      	ldr	r3, [r0, #16]
   2eee4:	4604      	mov	r4, r0
   2eee6:	2b01      	cmp	r3, #1
   2eee8:	f000 8109 	beq.w	2f0fe <ip_interface_sendto+0x242>
   2eeec:	6822      	ldr	r2, [r4, #0]
   2eeee:	0391      	lsls	r1, r2, #14
   2eef0:	d569      	bpl.n	2efc6 <ip_interface_sendto+0x10a>
   2eef2:	f1b9 0f00 	cmp.w	r9, #0
   2eef6:	f000 8112 	beq.w	2f11e <ip_interface_sendto+0x262>
   2eefa:	f019 0f02 	tst.w	r9, #2
   2eefe:	f000 814a 	beq.w	2f196 <ip_interface_sendto+0x2da>
   2ef02:	2300      	movs	r3, #0
   2ef04:	9303      	str	r3, [sp, #12]
   2ef06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ef08:	f247 0806 	movw	r8, #28678	; 0x7006
   2ef0c:	2b00      	cmp	r3, #0
   2ef0e:	bf08      	it	eq
   2ef10:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   2ef14:	f04f 0b0c 	mov.w	fp, #12
   2ef18:	4aa5      	ldr	r2, [pc, #660]	; (2f1b0 <ip_interface_sendto+0x2f4>)
   2ef1a:	9308      	str	r3, [sp, #32]
   2ef1c:	043b      	lsls	r3, r7, #16
   2ef1e:	9200      	str	r2, [sp, #0]
   2ef20:	9304      	str	r3, [sp, #16]
   2ef22:	4629      	mov	r1, r5
   2ef24:	a807      	add	r0, sp, #28
   2ef26:	f7ff fddb 	bl	2eae0 <rpc_ip_client_request_alloc>
   2ef2a:	2804      	cmp	r0, #4
   2ef2c:	d05e      	beq.n	2efec <ip_interface_sendto+0x130>
   2ef2e:	2800      	cmp	r0, #0
   2ef30:	f040 813b 	bne.w	2f1aa <ip_interface_sendto+0x2ee>
   2ef34:	9b07      	ldr	r3, [sp, #28]
   2ef36:	f883 b008 	strb.w	fp, [r3, #8]
   2ef3a:	7258      	strb	r0, [r3, #9]
   2ef3c:	7298      	strb	r0, [r3, #10]
   2ef3e:	72d8      	strb	r0, [r3, #11]
   2ef40:	2e00      	cmp	r6, #0
   2ef42:	d06b      	beq.n	2f01c <ip_interface_sendto+0x160>
   2ef44:	68e2      	ldr	r2, [r4, #12]
   2ef46:	6871      	ldr	r1, [r6, #4]
   2ef48:	428a      	cmp	r2, r1
   2ef4a:	f040 80a8 	bne.w	2f09e <ip_interface_sendto+0x1e2>
   2ef4e:	7831      	ldrb	r1, [r6, #0]
   2ef50:	9815      	ldr	r0, [sp, #84]	; 0x54
   2ef52:	4288      	cmp	r0, r1
   2ef54:	d10a      	bne.n	2ef6c <ip_interface_sendto+0xb0>
   2ef56:	2a02      	cmp	r2, #2
   2ef58:	f103 001c 	add.w	r0, r3, #28
   2ef5c:	f000 80ff 	beq.w	2f15e <ip_interface_sendto+0x2a2>
   2ef60:	2a0a      	cmp	r2, #10
   2ef62:	d103      	bne.n	2ef6c <ip_interface_sendto+0xb0>
   2ef64:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2ef66:	2a24      	cmp	r2, #36	; 0x24
   2ef68:	f000 80e6 	beq.w	2f138 <ip_interface_sendto+0x27c>
   2ef6c:	f04f 0a16 	mov.w	sl, #22
   2ef70:	6818      	ldr	r0, [r3, #0]
   2ef72:	b110      	cbz	r0, 2ef7a <ip_interface_sendto+0xbe>
   2ef74:	f7ff fde6 	bl	2eb44 <rpc_ip_client_data_free>
   2ef78:	9b07      	ldr	r3, [sp, #28]
   2ef7a:	4618      	mov	r0, r3
   2ef7c:	f7ff fdda 	bl	2eb34 <rpc_ip_client_message_free>
   2ef80:	6823      	ldr	r3, [r4, #0]
   2ef82:	0318      	lsls	r0, r3, #12
   2ef84:	d40b      	bmi.n	2ef9e <ip_interface_sendto+0xe2>
   2ef86:	6823      	ldr	r3, [r4, #0]
   2ef88:	b29b      	uxth	r3, r3
   2ef8a:	2b0d      	cmp	r3, #13
   2ef8c:	d007      	beq.n	2ef9e <ip_interface_sendto+0xe2>
   2ef8e:	6823      	ldr	r3, [r4, #0]
   2ef90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2ef94:	6023      	str	r3, [r4, #0]
   2ef96:	6823      	ldr	r3, [r4, #0]
   2ef98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2ef9c:	6023      	str	r3, [r4, #0]
   2ef9e:	f1ba 0f00 	cmp.w	sl, #0
   2efa2:	f040 80b3 	bne.w	2f10c <ip_interface_sendto+0x250>
   2efa6:	6823      	ldr	r3, [r4, #0]
   2efa8:	0119      	lsls	r1, r3, #4
   2efaa:	d57b      	bpl.n	2f0a4 <ip_interface_sendto+0x1e8>
   2efac:	6823      	ldr	r3, [r4, #0]
   2efae:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   2efb2:	6023      	str	r3, [r4, #0]
   2efb4:	9b00      	ldr	r3, [sp, #0]
   2efb6:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2efba:	2800      	cmp	r0, #0
   2efbc:	d176      	bne.n	2f0ac <ip_interface_sendto+0x1f0>
   2efbe:	4628      	mov	r0, r5
   2efc0:	b00b      	add	sp, #44	; 0x2c
   2efc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2efc6:	6822      	ldr	r2, [r4, #0]
   2efc8:	0092      	lsls	r2, r2, #2
   2efca:	d406      	bmi.n	2efda <ip_interface_sendto+0x11e>
   2efcc:	2b01      	cmp	r3, #1
   2efce:	f000 80ad 	beq.w	2f12c <ip_interface_sendto+0x270>
   2efd2:	6823      	ldr	r3, [r4, #0]
   2efd4:	031b      	lsls	r3, r3, #12
   2efd6:	f140 80cf 	bpl.w	2f178 <ip_interface_sendto+0x2bc>
   2efda:	6823      	ldr	r3, [r4, #0]
   2efdc:	031e      	lsls	r6, r3, #12
   2efde:	f140 80d5 	bpl.w	2f18c <ip_interface_sendto+0x2d0>
   2efe2:	4b73      	ldr	r3, [pc, #460]	; (2f1b0 <ip_interface_sendto+0x2f4>)
   2efe4:	f8d4 a008 	ldr.w	sl, [r4, #8]
   2efe8:	9300      	str	r3, [sp, #0]
   2efea:	e7d8      	b.n	2ef9e <ip_interface_sendto+0xe2>
   2efec:	9b03      	ldr	r3, [sp, #12]
   2efee:	2b00      	cmp	r3, #0
   2eff0:	d052      	beq.n	2f098 <ip_interface_sendto+0x1dc>
   2eff2:	9b08      	ldr	r3, [sp, #32]
   2eff4:	3301      	adds	r3, #1
   2eff6:	d094      	beq.n	2ef22 <ip_interface_sendto+0x66>
   2eff8:	230a      	movs	r3, #10
   2effa:	a90a      	add	r1, sp, #40	; 0x28
   2effc:	f841 3d04 	str.w	r3, [r1, #-4]!
   2f000:	2000      	movs	r0, #0
   2f002:	f7fa fbe1 	bl	297c8 <bsd_os_timedwait>
   2f006:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2f00a:	f1c2 020a 	rsb	r2, r2, #10
   2f00e:	1a9b      	subs	r3, r3, r2
   2f010:	2b00      	cmp	r3, #0
   2f012:	9308      	str	r3, [sp, #32]
   2f014:	dc85      	bgt.n	2ef22 <ip_interface_sendto+0x66>
   2f016:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   2f01a:	e7b1      	b.n	2ef80 <ip_interface_sendto+0xc4>
   2f01c:	4642      	mov	r2, r8
   2f01e:	f8c3 9014 	str.w	r9, [r3, #20]
   2f022:	69a1      	ldr	r1, [r4, #24]
   2f024:	9804      	ldr	r0, [sp, #16]
   2f026:	6119      	str	r1, [r3, #16]
   2f028:	9902      	ldr	r1, [sp, #8]
   2f02a:	4302      	orrs	r2, r0
   2f02c:	60da      	str	r2, [r3, #12]
   2f02e:	605d      	str	r5, [r3, #4]
   2f030:	b119      	cbz	r1, 2f03a <ip_interface_sendto+0x17e>
   2f032:	6818      	ldr	r0, [r3, #0]
   2f034:	462a      	mov	r2, r5
   2f036:	f00c f9bc 	bl	3b3b2 <memcpy>
   2f03a:	6823      	ldr	r3, [r4, #0]
   2f03c:	4641      	mov	r1, r8
   2f03e:	9305      	str	r3, [sp, #20]
   2f040:	6823      	ldr	r3, [r4, #0]
   2f042:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2f046:	6023      	str	r3, [r4, #0]
   2f048:	6823      	ldr	r3, [r4, #0]
   2f04a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2f04e:	6023      	str	r3, [r4, #0]
   2f050:	9b07      	ldr	r3, [sp, #28]
   2f052:	4618      	mov	r0, r3
   2f054:	9301      	str	r3, [sp, #4]
   2f056:	f7ff fd57 	bl	2eb08 <rpc_ip_client_request_send>
   2f05a:	9b01      	ldr	r3, [sp, #4]
   2f05c:	4682      	mov	sl, r0
   2f05e:	bb78      	cbnz	r0, 2f0c0 <ip_interface_sendto+0x204>
   2f060:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2f064:	ab08      	add	r3, sp, #32
   2f066:	4611      	mov	r1, r2
   2f068:	4638      	mov	r0, r7
   2f06a:	f005 fe1b 	bl	34ca4 <interface_socket_wait>
   2f06e:	4603      	mov	r3, r0
   2f070:	b398      	cbz	r0, 2f0da <ip_interface_sendto+0x21e>
   2f072:	6822      	ldr	r2, [r4, #0]
   2f074:	0312      	lsls	r2, r2, #12
   2f076:	d43f      	bmi.n	2f0f8 <ip_interface_sendto+0x23c>
   2f078:	2b3c      	cmp	r3, #60	; 0x3c
   2f07a:	d001      	beq.n	2f080 <ip_interface_sendto+0x1c4>
   2f07c:	2b0c      	cmp	r3, #12
   2f07e:	d001      	beq.n	2f084 <ip_interface_sendto+0x1c8>
   2f080:	469a      	mov	sl, r3
   2f082:	e77d      	b.n	2ef80 <ip_interface_sendto+0xc4>
   2f084:	9b00      	ldr	r3, [sp, #0]
   2f086:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2f08a:	b108      	cbz	r0, 2f090 <ip_interface_sendto+0x1d4>
   2f08c:	f7ff fd52 	bl	2eb34 <rpc_ip_client_message_free>
   2f090:	9b03      	ldr	r3, [sp, #12]
   2f092:	2b00      	cmp	r3, #0
   2f094:	f47f af45 	bne.w	2ef22 <ip_interface_sendto+0x66>
   2f098:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2f09c:	e770      	b.n	2ef80 <ip_interface_sendto+0xc4>
   2f09e:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   2f0a2:	e765      	b.n	2ef70 <ip_interface_sendto+0xb4>
   2f0a4:	9b00      	ldr	r3, [sp, #0]
   2f0a6:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2f0aa:	6985      	ldr	r5, [r0, #24]
   2f0ac:	f7ff fd42 	bl	2eb34 <rpc_ip_client_message_free>
   2f0b0:	2300      	movs	r3, #0
   2f0b2:	4628      	mov	r0, r5
   2f0b4:	9a00      	ldr	r2, [sp, #0]
   2f0b6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   2f0ba:	b00b      	add	sp, #44	; 0x2c
   2f0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f0c0:	6818      	ldr	r0, [r3, #0]
   2f0c2:	469a      	mov	sl, r3
   2f0c4:	b108      	cbz	r0, 2f0ca <ip_interface_sendto+0x20e>
   2f0c6:	f7ff fd3d 	bl	2eb44 <rpc_ip_client_data_free>
   2f0ca:	4650      	mov	r0, sl
   2f0cc:	f7ff fd32 	bl	2eb34 <rpc_ip_client_message_free>
   2f0d0:	9b05      	ldr	r3, [sp, #20]
   2f0d2:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2f0d6:	6023      	str	r3, [r4, #0]
   2f0d8:	e752      	b.n	2ef80 <ip_interface_sendto+0xc4>
   2f0da:	9001      	str	r0, [sp, #4]
   2f0dc:	4638      	mov	r0, r7
   2f0de:	f005 fe55 	bl	34d8c <interface_socket_from_handle_get>
   2f0e2:	9b01      	ldr	r3, [sp, #4]
   2f0e4:	2800      	cmp	r0, #0
   2f0e6:	d0cb      	beq.n	2f080 <ip_interface_sendto+0x1c4>
   2f0e8:	6843      	ldr	r3, [r0, #4]
   2f0ea:	2b00      	cmp	r3, #0
   2f0ec:	d0c8      	beq.n	2f080 <ip_interface_sendto+0x1c4>
   2f0ee:	f8c0 a004 	str.w	sl, [r0, #4]
   2f0f2:	6822      	ldr	r2, [r4, #0]
   2f0f4:	0312      	lsls	r2, r2, #12
   2f0f6:	d5bf      	bpl.n	2f078 <ip_interface_sendto+0x1bc>
   2f0f8:	f8d4 a008 	ldr.w	sl, [r4, #8]
   2f0fc:	e740      	b.n	2ef80 <ip_interface_sendto+0xc4>
   2f0fe:	2e00      	cmp	r6, #0
   2f100:	f43f aef4 	beq.w	2eeec <ip_interface_sendto+0x30>
   2f104:	f04f 0a38 	mov.w	sl, #56	; 0x38
   2f108:	4b29      	ldr	r3, [pc, #164]	; (2f1b0 <ip_interface_sendto+0x2f4>)
   2f10a:	9300      	str	r3, [sp, #0]
   2f10c:	4650      	mov	r0, sl
   2f10e:	f7fa fc13 	bl	29938 <bsd_os_errno_set>
   2f112:	9b00      	ldr	r3, [sp, #0]
   2f114:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f118:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2f11c:	e74d      	b.n	2efba <ip_interface_sendto+0xfe>
   2f11e:	6823      	ldr	r3, [r4, #0]
   2f120:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   2f124:	f3c3 7300 	ubfx	r3, r3, #28, #1
   2f128:	9303      	str	r3, [sp, #12]
   2f12a:	e6ec      	b.n	2ef06 <ip_interface_sendto+0x4a>
   2f12c:	6823      	ldr	r3, [r4, #0]
   2f12e:	b29b      	uxth	r3, r3
   2f130:	2b05      	cmp	r3, #5
   2f132:	f47f af52 	bne.w	2efda <ip_interface_sendto+0x11e>
   2f136:	e74c      	b.n	2efd2 <ip_interface_sendto+0x116>
   2f138:	2210      	movs	r2, #16
   2f13a:	8931      	ldrh	r1, [r6, #8]
   2f13c:	835a      	strh	r2, [r3, #26]
   2f13e:	8319      	strh	r1, [r3, #24]
   2f140:	18b1      	adds	r1, r6, r2
   2f142:	f00c f936 	bl	3b3b2 <memcpy>
   2f146:	f247 0207 	movw	r2, #28679	; 0x7007
   2f14a:	9b07      	ldr	r3, [sp, #28]
   2f14c:	4690      	mov	r8, r2
   2f14e:	6899      	ldr	r1, [r3, #8]
   2f150:	8b58      	ldrh	r0, [r3, #26]
   2f152:	3104      	adds	r1, #4
   2f154:	4401      	add	r1, r0
   2f156:	f8c3 9014 	str.w	r9, [r3, #20]
   2f15a:	6099      	str	r1, [r3, #8]
   2f15c:	e761      	b.n	2f022 <ip_interface_sendto+0x166>
   2f15e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2f160:	2a10      	cmp	r2, #16
   2f162:	f47f af03 	bne.w	2ef6c <ip_interface_sendto+0xb0>
   2f166:	2204      	movs	r2, #4
   2f168:	8931      	ldrh	r1, [r6, #8]
   2f16a:	835a      	strh	r2, [r3, #26]
   2f16c:	8319      	strh	r1, [r3, #24]
   2f16e:	f106 010c 	add.w	r1, r6, #12
   2f172:	f00c f91e 	bl	3b3b2 <memcpy>
   2f176:	e7e6      	b.n	2f146 <ip_interface_sendto+0x28a>
   2f178:	4b0d      	ldr	r3, [pc, #52]	; (2f1b0 <ip_interface_sendto+0x2f4>)
   2f17a:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2f17e:	9300      	str	r3, [sp, #0]
   2f180:	e7c4      	b.n	2f10c <ip_interface_sendto+0x250>
   2f182:	4b0b      	ldr	r3, [pc, #44]	; (2f1b0 <ip_interface_sendto+0x2f4>)
   2f184:	f04f 0a28 	mov.w	sl, #40	; 0x28
   2f188:	9300      	str	r3, [sp, #0]
   2f18a:	e7bf      	b.n	2f10c <ip_interface_sendto+0x250>
   2f18c:	4b08      	ldr	r3, [pc, #32]	; (2f1b0 <ip_interface_sendto+0x2f4>)
   2f18e:	f04f 0a39 	mov.w	sl, #57	; 0x39
   2f192:	9300      	str	r3, [sp, #0]
   2f194:	e7ba      	b.n	2f10c <ip_interface_sendto+0x250>
   2f196:	4b06      	ldr	r3, [pc, #24]	; (2f1b0 <ip_interface_sendto+0x2f4>)
   2f198:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   2f19c:	9300      	str	r3, [sp, #0]
   2f19e:	e7b5      	b.n	2f10c <ip_interface_sendto+0x250>
   2f1a0:	4b03      	ldr	r3, [pc, #12]	; (2f1b0 <ip_interface_sendto+0x2f4>)
   2f1a2:	f04f 0a09 	mov.w	sl, #9
   2f1a6:	9300      	str	r3, [sp, #0]
   2f1a8:	e7b0      	b.n	2f10c <ip_interface_sendto+0x250>
   2f1aa:	f04f 0a0c 	mov.w	sl, #12
   2f1ae:	e6e7      	b.n	2ef80 <ip_interface_sendto+0xc4>
   2f1b0:	20023cbc 	.word	0x20023cbc

0002f1b4 <ip_interface_recvfrom>:
   2f1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f1b8:	b087      	sub	sp, #28
   2f1ba:	2a00      	cmp	r2, #0
   2f1bc:	f000 8112 	beq.w	2f3e4 <ip_interface_recvfrom+0x230>
   2f1c0:	4680      	mov	r8, r0
   2f1c2:	468b      	mov	fp, r1
   2f1c4:	469a      	mov	sl, r3
   2f1c6:	4691      	mov	r9, r2
   2f1c8:	b11b      	cbz	r3, 2f1d2 <ip_interface_recvfrom+0x1e>
   2f1ca:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   2f1ce:	f000 8107 	beq.w	2f3e0 <ip_interface_recvfrom+0x22c>
   2f1d2:	4640      	mov	r0, r8
   2f1d4:	f005 fdda 	bl	34d8c <interface_socket_from_handle_get>
   2f1d8:	4604      	mov	r4, r0
   2f1da:	2800      	cmp	r0, #0
   2f1dc:	f000 8104 	beq.w	2f3e8 <ip_interface_recvfrom+0x234>
   2f1e0:	6803      	ldr	r3, [r0, #0]
   2f1e2:	02db      	lsls	r3, r3, #11
   2f1e4:	d562      	bpl.n	2f2ac <ip_interface_recvfrom+0xf8>
   2f1e6:	f01a 0f02 	tst.w	sl, #2
   2f1ea:	bf18      	it	ne
   2f1ec:	2600      	movne	r6, #0
   2f1ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f1f2:	bf08      	it	eq
   2f1f4:	6806      	ldreq	r6, [r0, #0]
   2f1f6:	f00a 0310 	and.w	r3, sl, #16
   2f1fa:	bf04      	itt	eq
   2f1fc:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   2f200:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   2f204:	9301      	str	r3, [sp, #4]
   2f206:	6823      	ldr	r3, [r4, #0]
   2f208:	03df      	lsls	r7, r3, #15
   2f20a:	d567      	bpl.n	2f2dc <ip_interface_recvfrom+0x128>
   2f20c:	6823      	ldr	r3, [r4, #0]
   2f20e:	69e0      	ldr	r0, [r4, #28]
   2f210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2f214:	6023      	str	r3, [r4, #0]
   2f216:	6803      	ldr	r3, [r0, #0]
   2f218:	68db      	ldr	r3, [r3, #12]
   2f21a:	4798      	blx	r3
   2f21c:	4605      	mov	r5, r0
   2f21e:	3001      	adds	r0, #1
   2f220:	d07d      	beq.n	2f31e <ip_interface_recvfrom+0x16a>
   2f222:	45a9      	cmp	r9, r5
   2f224:	dd03      	ble.n	2f22e <ip_interface_recvfrom+0x7a>
   2f226:	6923      	ldr	r3, [r4, #16]
   2f228:	2b01      	cmp	r3, #1
   2f22a:	f000 80a3 	beq.w	2f374 <ip_interface_recvfrom+0x1c0>
   2f22e:	f04f 0800 	mov.w	r8, #0
   2f232:	af02      	add	r7, sp, #8
   2f234:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2f236:	b103      	cbz	r3, 2f23a <ip_interface_recvfrom+0x86>
   2f238:	681b      	ldr	r3, [r3, #0]
   2f23a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2f23c:	e9cd b902 	strd	fp, r9, [sp, #8]
   2f240:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2f244:	69e0      	ldr	r0, [r4, #28]
   2f246:	4639      	mov	r1, r7
   2f248:	6803      	ldr	r3, [r0, #0]
   2f24a:	4652      	mov	r2, sl
   2f24c:	689b      	ldr	r3, [r3, #8]
   2f24e:	4798      	blx	r3
   2f250:	4605      	mov	r5, r0
   2f252:	69e0      	ldr	r0, [r4, #28]
   2f254:	1c6b      	adds	r3, r5, #1
   2f256:	6803      	ldr	r3, [r0, #0]
   2f258:	bf18      	it	ne
   2f25a:	2701      	movne	r7, #1
   2f25c:	68db      	ldr	r3, [r3, #12]
   2f25e:	bf0a      	itet	eq
   2f260:	2700      	moveq	r7, #0
   2f262:	2600      	movne	r6, #0
   2f264:	2623      	moveq	r6, #35	; 0x23
   2f266:	4798      	blx	r3
   2f268:	3001      	adds	r0, #1
   2f26a:	d132      	bne.n	2f2d2 <ip_interface_recvfrom+0x11e>
   2f26c:	f1b8 0f00 	cmp.w	r8, #0
   2f270:	f000 80b0 	beq.w	2f3d4 <ip_interface_recvfrom+0x220>
   2f274:	2f00      	cmp	r7, #0
   2f276:	f000 80a1 	beq.w	2f3bc <ip_interface_recvfrom+0x208>
   2f27a:	6823      	ldr	r3, [r4, #0]
   2f27c:	0318      	lsls	r0, r3, #12
   2f27e:	d506      	bpl.n	2f28e <ip_interface_recvfrom+0xda>
   2f280:	6823      	ldr	r3, [r4, #0]
   2f282:	b29b      	uxth	r3, r3
   2f284:	2b0d      	cmp	r3, #13
   2f286:	d002      	beq.n	2f28e <ip_interface_recvfrom+0xda>
   2f288:	6923      	ldr	r3, [r4, #16]
   2f28a:	2b01      	cmp	r3, #1
   2f28c:	d021      	beq.n	2f2d2 <ip_interface_recvfrom+0x11e>
   2f28e:	6823      	ldr	r3, [r4, #0]
   2f290:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2f294:	6823      	ldr	r3, [r4, #0]
   2f296:	f040 80a9 	bne.w	2f3ec <ip_interface_recvfrom+0x238>
   2f29a:	0319      	lsls	r1, r3, #12
   2f29c:	d473      	bmi.n	2f386 <ip_interface_recvfrom+0x1d2>
   2f29e:	2e00      	cmp	r6, #0
   2f2a0:	f040 8086 	bne.w	2f3b0 <ip_interface_recvfrom+0x1fc>
   2f2a4:	4628      	mov	r0, r5
   2f2a6:	b007      	add	sp, #28
   2f2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f2ac:	6803      	ldr	r3, [r0, #0]
   2f2ae:	b29b      	uxth	r3, r3
   2f2b0:	2b06      	cmp	r3, #6
   2f2b2:	d071      	beq.n	2f398 <ip_interface_recvfrom+0x1e4>
   2f2b4:	6803      	ldr	r3, [r0, #0]
   2f2b6:	b29b      	uxth	r3, r3
   2f2b8:	2b07      	cmp	r3, #7
   2f2ba:	bf0c      	ite	eq
   2f2bc:	2609      	moveq	r6, #9
   2f2be:	2639      	movne	r6, #57	; 0x39
   2f2c0:	69e0      	ldr	r0, [r4, #28]
   2f2c2:	6803      	ldr	r3, [r0, #0]
   2f2c4:	68db      	ldr	r3, [r3, #12]
   2f2c6:	4798      	blx	r3
   2f2c8:	1c43      	adds	r3, r0, #1
   2f2ca:	4605      	mov	r5, r0
   2f2cc:	d0df      	beq.n	2f28e <ip_interface_recvfrom+0xda>
   2f2ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f2d2:	6823      	ldr	r3, [r4, #0]
   2f2d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2f2d8:	6023      	str	r3, [r4, #0]
   2f2da:	e7e0      	b.n	2f29e <ip_interface_recvfrom+0xea>
   2f2dc:	2e00      	cmp	r6, #0
   2f2de:	d07d      	beq.n	2f3dc <ip_interface_recvfrom+0x228>
   2f2e0:	6a26      	ldr	r6, [r4, #32]
   2f2e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2f2e6:	2e00      	cmp	r6, #0
   2f2e8:	bf08      	it	eq
   2f2ea:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   2f2ee:	af02      	add	r7, sp, #8
   2f2f0:	463b      	mov	r3, r7
   2f2f2:	4611      	mov	r1, r2
   2f2f4:	4640      	mov	r0, r8
   2f2f6:	9602      	str	r6, [sp, #8]
   2f2f8:	f005 fcd4 	bl	34ca4 <interface_socket_wait>
   2f2fc:	4606      	mov	r6, r0
   2f2fe:	b350      	cbz	r0, 2f356 <ip_interface_recvfrom+0x1a2>
   2f300:	6823      	ldr	r3, [r4, #0]
   2f302:	031a      	lsls	r2, r3, #12
   2f304:	d532      	bpl.n	2f36c <ip_interface_recvfrom+0x1b8>
   2f306:	6823      	ldr	r3, [r4, #0]
   2f308:	b29b      	uxth	r3, r3
   2f30a:	2b0d      	cmp	r3, #13
   2f30c:	d02e      	beq.n	2f36c <ip_interface_recvfrom+0x1b8>
   2f30e:	6923      	ldr	r3, [r4, #16]
   2f310:	f1a3 0801 	sub.w	r8, r3, #1
   2f314:	fab8 f888 	clz	r8, r8
   2f318:	ea4f 1858 	mov.w	r8, r8, lsr #5
   2f31c:	e78a      	b.n	2f234 <ip_interface_recvfrom+0x80>
   2f31e:	6823      	ldr	r3, [r4, #0]
   2f320:	031a      	lsls	r2, r3, #12
   2f322:	d5db      	bpl.n	2f2dc <ip_interface_recvfrom+0x128>
   2f324:	6823      	ldr	r3, [r4, #0]
   2f326:	b29b      	uxth	r3, r3
   2f328:	2b0d      	cmp	r3, #13
   2f32a:	d0d7      	beq.n	2f2dc <ip_interface_recvfrom+0x128>
   2f32c:	6923      	ldr	r3, [r4, #16]
   2f32e:	69e0      	ldr	r0, [r4, #28]
   2f330:	2b01      	cmp	r3, #1
   2f332:	d033      	beq.n	2f39c <ip_interface_recvfrom+0x1e8>
   2f334:	2639      	movs	r6, #57	; 0x39
   2f336:	6823      	ldr	r3, [r4, #0]
   2f338:	0c1b      	lsrs	r3, r3, #16
   2f33a:	041b      	lsls	r3, r3, #16
   2f33c:	f043 030d 	orr.w	r3, r3, #13
   2f340:	6023      	str	r3, [r4, #0]
   2f342:	6823      	ldr	r3, [r4, #0]
   2f344:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2f348:	6023      	str	r3, [r4, #0]
   2f34a:	6803      	ldr	r3, [r0, #0]
   2f34c:	68db      	ldr	r3, [r3, #12]
   2f34e:	4798      	blx	r3
   2f350:	3001      	adds	r0, #1
   2f352:	d1be      	bne.n	2f2d2 <ip_interface_recvfrom+0x11e>
   2f354:	e79b      	b.n	2f28e <ip_interface_recvfrom+0xda>
   2f356:	4640      	mov	r0, r8
   2f358:	f005 fd18 	bl	34d8c <interface_socket_from_handle_get>
   2f35c:	b140      	cbz	r0, 2f370 <ip_interface_recvfrom+0x1bc>
   2f35e:	6846      	ldr	r6, [r0, #4]
   2f360:	b136      	cbz	r6, 2f370 <ip_interface_recvfrom+0x1bc>
   2f362:	2300      	movs	r3, #0
   2f364:	6043      	str	r3, [r0, #4]
   2f366:	6823      	ldr	r3, [r4, #0]
   2f368:	031a      	lsls	r2, r3, #12
   2f36a:	d4cc      	bmi.n	2f306 <ip_interface_recvfrom+0x152>
   2f36c:	69e0      	ldr	r0, [r4, #28]
   2f36e:	e7ec      	b.n	2f34a <ip_interface_recvfrom+0x196>
   2f370:	2601      	movs	r6, #1
   2f372:	e748      	b.n	2f206 <ip_interface_recvfrom+0x52>
   2f374:	9b01      	ldr	r3, [sp, #4]
   2f376:	b11b      	cbz	r3, 2f380 <ip_interface_recvfrom+0x1cc>
   2f378:	6823      	ldr	r3, [r4, #0]
   2f37a:	00d9      	lsls	r1, r3, #3
   2f37c:	d5b0      	bpl.n	2f2e0 <ip_interface_recvfrom+0x12c>
   2f37e:	e756      	b.n	2f22e <ip_interface_recvfrom+0x7a>
   2f380:	4698      	mov	r8, r3
   2f382:	af02      	add	r7, sp, #8
   2f384:	e756      	b.n	2f234 <ip_interface_recvfrom+0x80>
   2f386:	6823      	ldr	r3, [r4, #0]
   2f388:	b29b      	uxth	r3, r3
   2f38a:	2b0d      	cmp	r3, #13
   2f38c:	d187      	bne.n	2f29e <ip_interface_recvfrom+0xea>
   2f38e:	68a3      	ldr	r3, [r4, #8]
   2f390:	2b00      	cmp	r3, #0
   2f392:	d084      	beq.n	2f29e <ip_interface_recvfrom+0xea>
   2f394:	68a6      	ldr	r6, [r4, #8]
   2f396:	e782      	b.n	2f29e <ip_interface_recvfrom+0xea>
   2f398:	2609      	movs	r6, #9
   2f39a:	e791      	b.n	2f2c0 <ip_interface_recvfrom+0x10c>
   2f39c:	6803      	ldr	r3, [r0, #0]
   2f39e:	68db      	ldr	r3, [r3, #12]
   2f3a0:	4798      	blx	r3
   2f3a2:	3001      	adds	r0, #1
   2f3a4:	d00a      	beq.n	2f3bc <ip_interface_recvfrom+0x208>
   2f3a6:	2623      	movs	r6, #35	; 0x23
   2f3a8:	6823      	ldr	r3, [r4, #0]
   2f3aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2f3ae:	6023      	str	r3, [r4, #0]
   2f3b0:	4630      	mov	r0, r6
   2f3b2:	f7fa fac1 	bl	29938 <bsd_os_errno_set>
   2f3b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f3ba:	e773      	b.n	2f2a4 <ip_interface_recvfrom+0xf0>
   2f3bc:	6823      	ldr	r3, [r4, #0]
   2f3be:	2500      	movs	r5, #0
   2f3c0:	0c1b      	lsrs	r3, r3, #16
   2f3c2:	041b      	lsls	r3, r3, #16
   2f3c4:	f043 030d 	orr.w	r3, r3, #13
   2f3c8:	6023      	str	r3, [r4, #0]
   2f3ca:	6823      	ldr	r3, [r4, #0]
   2f3cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2f3d0:	6023      	str	r3, [r4, #0]
   2f3d2:	e767      	b.n	2f2a4 <ip_interface_recvfrom+0xf0>
   2f3d4:	2f00      	cmp	r7, #0
   2f3d6:	f47f af50 	bne.w	2f27a <ip_interface_recvfrom+0xc6>
   2f3da:	e758      	b.n	2f28e <ip_interface_recvfrom+0xda>
   2f3dc:	2623      	movs	r6, #35	; 0x23
   2f3de:	e7c5      	b.n	2f36c <ip_interface_recvfrom+0x1b8>
   2f3e0:	262d      	movs	r6, #45	; 0x2d
   2f3e2:	e7e5      	b.n	2f3b0 <ip_interface_recvfrom+0x1fc>
   2f3e4:	2616      	movs	r6, #22
   2f3e6:	e7e3      	b.n	2f3b0 <ip_interface_recvfrom+0x1fc>
   2f3e8:	2609      	movs	r6, #9
   2f3ea:	e7e1      	b.n	2f3b0 <ip_interface_recvfrom+0x1fc>
   2f3ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   2f3f0:	6023      	str	r3, [r4, #0]
   2f3f2:	6823      	ldr	r3, [r4, #0]
   2f3f4:	2669      	movs	r6, #105	; 0x69
   2f3f6:	0c1b      	lsrs	r3, r3, #16
   2f3f8:	041b      	lsls	r3, r3, #16
   2f3fa:	f043 030d 	orr.w	r3, r3, #13
   2f3fe:	6023      	str	r3, [r4, #0]
   2f400:	e7d6      	b.n	2f3b0 <ip_interface_recvfrom+0x1fc>
   2f402:	bf00      	nop

0002f404 <ip_interface_connect>:
   2f404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f408:	b082      	sub	sp, #8
   2f40a:	2900      	cmp	r1, #0
   2f40c:	d04b      	beq.n	2f4a6 <ip_interface_connect+0xa2>
   2f40e:	4617      	mov	r7, r2
   2f410:	2a00      	cmp	r2, #0
   2f412:	d048      	beq.n	2f4a6 <ip_interface_connect+0xa2>
   2f414:	4680      	mov	r8, r0
   2f416:	4689      	mov	r9, r1
   2f418:	f005 fcb8 	bl	34d8c <interface_socket_from_handle_get>
   2f41c:	4605      	mov	r5, r0
   2f41e:	2800      	cmp	r0, #0
   2f420:	f000 80af 	beq.w	2f582 <ip_interface_connect+0x17e>
   2f424:	6803      	ldr	r3, [r0, #0]
   2f426:	b29b      	uxth	r3, r3
   2f428:	2b02      	cmp	r3, #2
   2f42a:	d004      	beq.n	2f436 <ip_interface_connect+0x32>
   2f42c:	6803      	ldr	r3, [r0, #0]
   2f42e:	b29b      	uxth	r3, r3
   2f430:	2b04      	cmp	r3, #4
   2f432:	f040 809d 	bne.w	2f570 <ip_interface_connect+0x16c>
   2f436:	6829      	ldr	r1, [r5, #0]
   2f438:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   2f43c:	f040 8089 	bne.w	2f552 <ip_interface_connect+0x14e>
   2f440:	ae02      	add	r6, sp, #8
   2f442:	f8d5 a018 	ldr.w	sl, [r5, #24]
   2f446:	f846 1d04 	str.w	r1, [r6, #-4]!
   2f44a:	4630      	mov	r0, r6
   2f44c:	f7ff fb48 	bl	2eae0 <rpc_ip_client_request_alloc>
   2f450:	bb98      	cbnz	r0, 2f4ba <ip_interface_connect+0xb6>
   2f452:	2108      	movs	r1, #8
   2f454:	ea4f 4208 	mov.w	r2, r8, lsl #16
   2f458:	9c01      	ldr	r4, [sp, #4]
   2f45a:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   2f45e:	f043 0302 	orr.w	r3, r3, #2
   2f462:	60e3      	str	r3, [r4, #12]
   2f464:	f8c4 a010 	str.w	sl, [r4, #16]
   2f468:	7260      	strb	r0, [r4, #9]
   2f46a:	72a0      	strb	r0, [r4, #10]
   2f46c:	72e0      	strb	r0, [r4, #11]
   2f46e:	7221      	strb	r1, [r4, #8]
   2f470:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   2f474:	f042 0202 	orr.w	r2, r2, #2
   2f478:	60e2      	str	r2, [r4, #12]
   2f47a:	68a3      	ldr	r3, [r4, #8]
   2f47c:	69aa      	ldr	r2, [r5, #24]
   2f47e:	3304      	adds	r3, #4
   2f480:	6122      	str	r2, [r4, #16]
   2f482:	60a3      	str	r3, [r4, #8]
   2f484:	68eb      	ldr	r3, [r5, #12]
   2f486:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2f48a:	4293      	cmp	r3, r2
   2f48c:	d11b      	bne.n	2f4c6 <ip_interface_connect+0xc2>
   2f48e:	f899 2000 	ldrb.w	r2, [r9]
   2f492:	4297      	cmp	r7, r2
   2f494:	d107      	bne.n	2f4a6 <ip_interface_connect+0xa2>
   2f496:	2b02      	cmp	r3, #2
   2f498:	f104 0018 	add.w	r0, r4, #24
   2f49c:	d015      	beq.n	2f4ca <ip_interface_connect+0xc6>
   2f49e:	2b0a      	cmp	r3, #10
   2f4a0:	d101      	bne.n	2f4a6 <ip_interface_connect+0xa2>
   2f4a2:	2f24      	cmp	r7, #36	; 0x24
   2f4a4:	d01d      	beq.n	2f4e2 <ip_interface_connect+0xde>
   2f4a6:	2416      	movs	r4, #22
   2f4a8:	4620      	mov	r0, r4
   2f4aa:	f7fa fa45 	bl	29938 <bsd_os_errno_set>
   2f4ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2f4b2:	4620      	mov	r0, r4
   2f4b4:	b002      	add	sp, #8
   2f4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f4ba:	9c01      	ldr	r4, [sp, #4]
   2f4bc:	2c00      	cmp	r4, #0
   2f4be:	d05e      	beq.n	2f57e <ip_interface_connect+0x17a>
   2f4c0:	ea4f 4208 	mov.w	r2, r8, lsl #16
   2f4c4:	e7d4      	b.n	2f470 <ip_interface_connect+0x6c>
   2f4c6:	242f      	movs	r4, #47	; 0x2f
   2f4c8:	e7ee      	b.n	2f4a8 <ip_interface_connect+0xa4>
   2f4ca:	2f10      	cmp	r7, #16
   2f4cc:	d1eb      	bne.n	2f4a6 <ip_interface_connect+0xa2>
   2f4ce:	2204      	movs	r2, #4
   2f4d0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   2f4d4:	f109 010c 	add.w	r1, r9, #12
   2f4d8:	82e2      	strh	r2, [r4, #22]
   2f4da:	82a3      	strh	r3, [r4, #20]
   2f4dc:	f00b ff69 	bl	3b3b2 <memcpy>
   2f4e0:	e008      	b.n	2f4f4 <ip_interface_connect+0xf0>
   2f4e2:	2210      	movs	r2, #16
   2f4e4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   2f4e8:	eb09 0102 	add.w	r1, r9, r2
   2f4ec:	82e2      	strh	r2, [r4, #22]
   2f4ee:	82a3      	strh	r3, [r4, #20]
   2f4f0:	f00b ff5f 	bl	3b3b2 <memcpy>
   2f4f4:	68a3      	ldr	r3, [r4, #8]
   2f4f6:	8ae2      	ldrh	r2, [r4, #22]
   2f4f8:	f247 0102 	movw	r1, #28674	; 0x7002
   2f4fc:	4413      	add	r3, r2
   2f4fe:	60a3      	str	r3, [r4, #8]
   2f500:	682f      	ldr	r7, [r5, #0]
   2f502:	682b      	ldr	r3, [r5, #0]
   2f504:	4620      	mov	r0, r4
   2f506:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   2f50a:	602b      	str	r3, [r5, #0]
   2f50c:	f7ff fafc 	bl	2eb08 <rpc_ip_client_request_send>
   2f510:	b9a8      	cbnz	r0, 2f53e <ip_interface_connect+0x13a>
   2f512:	682b      	ldr	r3, [r5, #0]
   2f514:	00db      	lsls	r3, r3, #3
   2f516:	d429      	bmi.n	2f56c <ip_interface_connect+0x168>
   2f518:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   2f51a:	4633      	mov	r3, r6
   2f51c:	2c00      	cmp	r4, #0
   2f51e:	bf08      	it	eq
   2f520:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   2f524:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2f528:	2105      	movs	r1, #5
   2f52a:	4640      	mov	r0, r8
   2f52c:	9401      	str	r4, [sp, #4]
   2f52e:	f005 fbb9 	bl	34ca4 <interface_socket_wait>
   2f532:	4604      	mov	r4, r0
   2f534:	b178      	cbz	r0, 2f556 <ip_interface_connect+0x152>
   2f536:	2c73      	cmp	r4, #115	; 0x73
   2f538:	d0b6      	beq.n	2f4a8 <ip_interface_connect+0xa4>
   2f53a:	602f      	str	r7, [r5, #0]
   2f53c:	e7b4      	b.n	2f4a8 <ip_interface_connect+0xa4>
   2f53e:	6820      	ldr	r0, [r4, #0]
   2f540:	b108      	cbz	r0, 2f546 <ip_interface_connect+0x142>
   2f542:	f7ff faff 	bl	2eb44 <rpc_ip_client_data_free>
   2f546:	4620      	mov	r0, r4
   2f548:	f7ff faf4 	bl	2eb34 <rpc_ip_client_message_free>
   2f54c:	2423      	movs	r4, #35	; 0x23
   2f54e:	602f      	str	r7, [r5, #0]
   2f550:	e7aa      	b.n	2f4a8 <ip_interface_connect+0xa4>
   2f552:	2472      	movs	r4, #114	; 0x72
   2f554:	e7a8      	b.n	2f4a8 <ip_interface_connect+0xa4>
   2f556:	4640      	mov	r0, r8
   2f558:	f005 fc18 	bl	34d8c <interface_socket_from_handle_get>
   2f55c:	2800      	cmp	r0, #0
   2f55e:	d0a8      	beq.n	2f4b2 <ip_interface_connect+0xae>
   2f560:	6843      	ldr	r3, [r0, #4]
   2f562:	2b00      	cmp	r3, #0
   2f564:	d0a5      	beq.n	2f4b2 <ip_interface_connect+0xae>
   2f566:	6044      	str	r4, [r0, #4]
   2f568:	461c      	mov	r4, r3
   2f56a:	e7e4      	b.n	2f536 <ip_interface_connect+0x132>
   2f56c:	2473      	movs	r4, #115	; 0x73
   2f56e:	e79b      	b.n	2f4a8 <ip_interface_connect+0xa4>
   2f570:	6803      	ldr	r3, [r0, #0]
   2f572:	b29b      	uxth	r3, r3
   2f574:	2b05      	cmp	r3, #5
   2f576:	bf14      	ite	ne
   2f578:	2409      	movne	r4, #9
   2f57a:	2438      	moveq	r4, #56	; 0x38
   2f57c:	e794      	b.n	2f4a8 <ip_interface_connect+0xa4>
   2f57e:	240c      	movs	r4, #12
   2f580:	e792      	b.n	2f4a8 <ip_interface_connect+0xa4>
   2f582:	2409      	movs	r4, #9
   2f584:	e790      	b.n	2f4a8 <ip_interface_connect+0xa4>
   2f586:	bf00      	nop

0002f588 <ip_interface_socketoption_get>:
   2f588:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   2f58c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2f590:	b082      	sub	sp, #8
   2f592:	9400      	str	r4, [sp, #0]
   2f594:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2f596:	2c00      	cmp	r4, #0
   2f598:	d05b      	beq.n	2f652 <ip_interface_socketoption_get+0xca>
   2f59a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2f59c:	6824      	ldr	r4, [r4, #0]
   2f59e:	2c00      	cmp	r4, #0
   2f5a0:	d057      	beq.n	2f652 <ip_interface_socketoption_get+0xca>
   2f5a2:	680c      	ldr	r4, [r1, #0]
   2f5a4:	0266      	lsls	r6, r4, #9
   2f5a6:	d44f      	bmi.n	2f648 <ip_interface_socketoption_get+0xc0>
   2f5a8:	680c      	ldr	r4, [r1, #0]
   2f5aa:	0225      	lsls	r5, r4, #8
   2f5ac:	d44c      	bmi.n	2f648 <ip_interface_socketoption_get+0xc0>
   2f5ae:	680c      	ldr	r4, [r1, #0]
   2f5b0:	01e4      	lsls	r4, r4, #7
   2f5b2:	d449      	bmi.n	2f648 <ip_interface_socketoption_get+0xc0>
   2f5b4:	680c      	ldr	r4, [r1, #0]
   2f5b6:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   2f5ba:	d145      	bne.n	2f648 <ip_interface_socketoption_get+0xc0>
   2f5bc:	460c      	mov	r4, r1
   2f5be:	680e      	ldr	r6, [r1, #0]
   2f5c0:	461f      	mov	r7, r3
   2f5c2:	680b      	ldr	r3, [r1, #0]
   2f5c4:	4681      	mov	r9, r0
   2f5c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2f5ca:	600b      	str	r3, [r1, #0]
   2f5cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2f5ce:	a802      	add	r0, sp, #8
   2f5d0:	f840 cd04 	str.w	ip, [r0, #-4]!
   2f5d4:	6819      	ldr	r1, [r3, #0]
   2f5d6:	4615      	mov	r5, r2
   2f5d8:	f8d4 b018 	ldr.w	fp, [r4, #24]
   2f5dc:	f7ff fa80 	bl	2eae0 <rpc_ip_client_request_alloc>
   2f5e0:	2800      	cmp	r0, #0
   2f5e2:	d146      	bne.n	2f672 <ip_interface_socketoption_get+0xea>
   2f5e4:	f247 0304 	movw	r3, #28676	; 0x7004
   2f5e8:	2208      	movs	r2, #8
   2f5ea:	f8dd a004 	ldr.w	sl, [sp, #4]
   2f5ee:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   2f5f2:	f8ca 300c 	str.w	r3, [sl, #12]
   2f5f6:	f8ca b010 	str.w	fp, [sl, #16]
   2f5fa:	f88a 0009 	strb.w	r0, [sl, #9]
   2f5fe:	f88a 000a 	strb.w	r0, [sl, #10]
   2f602:	f88a 000b 	strb.w	r0, [sl, #11]
   2f606:	f88a 2008 	strb.w	r2, [sl, #8]
   2f60a:	f8da 3008 	ldr.w	r3, [sl, #8]
   2f60e:	f8ca 7018 	str.w	r7, [sl, #24]
   2f612:	3308      	adds	r3, #8
   2f614:	f8ca 5014 	str.w	r5, [sl, #20]
   2f618:	f8ca 3008 	str.w	r3, [sl, #8]
   2f61c:	f247 0104 	movw	r1, #28676	; 0x7004
   2f620:	4650      	mov	r0, sl
   2f622:	f8da 7000 	ldr.w	r7, [sl]
   2f626:	f7ff fa6f 	bl	2eb08 <rpc_ip_client_request_send>
   2f62a:	b9b8      	cbnz	r0, 2f65c <ip_interface_socketoption_get+0xd4>
   2f62c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   2f630:	466b      	mov	r3, sp
   2f632:	4611      	mov	r1, r2
   2f634:	4648      	mov	r0, r9
   2f636:	f005 fb35 	bl	34ca4 <interface_socket_wait>
   2f63a:	4605      	mov	r5, r0
   2f63c:	b300      	cbz	r0, 2f680 <ip_interface_socketoption_get+0xf8>
   2f63e:	4638      	mov	r0, r7
   2f640:	f7ff fa80 	bl	2eb44 <rpc_ip_client_data_free>
   2f644:	6026      	str	r6, [r4, #0]
   2f646:	e000      	b.n	2f64a <ip_interface_socketoption_get+0xc2>
   2f648:	2523      	movs	r5, #35	; 0x23
   2f64a:	4628      	mov	r0, r5
   2f64c:	b002      	add	sp, #8
   2f64e:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   2f652:	2516      	movs	r5, #22
   2f654:	4628      	mov	r0, r5
   2f656:	b002      	add	sp, #8
   2f658:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   2f65c:	f8da 0000 	ldr.w	r0, [sl]
   2f660:	b108      	cbz	r0, 2f666 <ip_interface_socketoption_get+0xde>
   2f662:	f7ff fa6f 	bl	2eb44 <rpc_ip_client_data_free>
   2f666:	4650      	mov	r0, sl
   2f668:	f7ff fa64 	bl	2eb34 <rpc_ip_client_message_free>
   2f66c:	2523      	movs	r5, #35	; 0x23
   2f66e:	6026      	str	r6, [r4, #0]
   2f670:	e7e5      	b.n	2f63e <ip_interface_socketoption_get+0xb6>
   2f672:	f8dd a004 	ldr.w	sl, [sp, #4]
   2f676:	f1ba 0f00 	cmp.w	sl, #0
   2f67a:	d1c6      	bne.n	2f60a <ip_interface_socketoption_get+0x82>
   2f67c:	250c      	movs	r5, #12
   2f67e:	e7e1      	b.n	2f644 <ip_interface_socketoption_get+0xbc>
   2f680:	4648      	mov	r0, r9
   2f682:	f005 fb83 	bl	34d8c <interface_socket_from_handle_get>
   2f686:	b120      	cbz	r0, 2f692 <ip_interface_socketoption_get+0x10a>
   2f688:	6843      	ldr	r3, [r0, #4]
   2f68a:	b113      	cbz	r3, 2f692 <ip_interface_socketoption_get+0x10a>
   2f68c:	6045      	str	r5, [r0, #4]
   2f68e:	461d      	mov	r5, r3
   2f690:	e7d5      	b.n	2f63e <ip_interface_socketoption_get+0xb6>
   2f692:	f8df b050 	ldr.w	fp, [pc, #80]	; 2f6e4 <ip_interface_socketoption_get+0x15c>
   2f696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2f698:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   2f69c:	681b      	ldr	r3, [r3, #0]
   2f69e:	b1b0      	cbz	r0, 2f6ce <ip_interface_socketoption_get+0x146>
   2f6a0:	6842      	ldr	r2, [r0, #4]
   2f6a2:	429a      	cmp	r2, r3
   2f6a4:	d811      	bhi.n	2f6ca <ip_interface_socketoption_get+0x142>
   2f6a6:	6801      	ldr	r1, [r0, #0]
   2f6a8:	b179      	cbz	r1, 2f6ca <ip_interface_socketoption_get+0x142>
   2f6aa:	980a      	ldr	r0, [sp, #40]	; 0x28
   2f6ac:	f00b fe81 	bl	3b3b2 <memcpy>
   2f6b0:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   2f6b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2f6b6:	685b      	ldr	r3, [r3, #4]
   2f6b8:	6013      	str	r3, [r2, #0]
   2f6ba:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   2f6be:	f7ff fa39 	bl	2eb34 <rpc_ip_client_message_free>
   2f6c2:	2300      	movs	r3, #0
   2f6c4:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   2f6c8:	e7b9      	b.n	2f63e <ip_interface_socketoption_get+0xb6>
   2f6ca:	2516      	movs	r5, #22
   2f6cc:	e7f7      	b.n	2f6be <ip_interface_socketoption_get+0x136>
   2f6ce:	461a      	mov	r2, r3
   2f6d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   2f6d2:	4639      	mov	r1, r7
   2f6d4:	f00b fe6d 	bl	3b3b2 <memcpy>
   2f6d8:	f8da 3004 	ldr.w	r3, [sl, #4]
   2f6dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2f6de:	6013      	str	r3, [r2, #0]
   2f6e0:	e7ad      	b.n	2f63e <ip_interface_socketoption_get+0xb6>
   2f6e2:	bf00      	nop
   2f6e4:	20023cbc 	.word	0x20023cbc

0002f6e8 <ip_interface_socketoption_send>:
   2f6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f6ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f6f0:	680c      	ldr	r4, [r1, #0]
   2f6f2:	b082      	sub	sp, #8
   2f6f4:	0266      	lsls	r6, r4, #9
   2f6f6:	9500      	str	r5, [sp, #0]
   2f6f8:	d44d      	bmi.n	2f796 <ip_interface_socketoption_send+0xae>
   2f6fa:	680c      	ldr	r4, [r1, #0]
   2f6fc:	0225      	lsls	r5, r4, #8
   2f6fe:	d44a      	bmi.n	2f796 <ip_interface_socketoption_send+0xae>
   2f700:	680c      	ldr	r4, [r1, #0]
   2f702:	01e4      	lsls	r4, r4, #7
   2f704:	d447      	bmi.n	2f796 <ip_interface_socketoption_send+0xae>
   2f706:	680c      	ldr	r4, [r1, #0]
   2f708:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   2f70c:	d143      	bne.n	2f796 <ip_interface_socketoption_send+0xae>
   2f70e:	4688      	mov	r8, r1
   2f710:	f8d1 9000 	ldr.w	r9, [r1]
   2f714:	461f      	mov	r7, r3
   2f716:	680b      	ldr	r3, [r1, #0]
   2f718:	4605      	mov	r5, r0
   2f71a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2f71e:	a802      	add	r0, sp, #8
   2f720:	600b      	str	r3, [r1, #0]
   2f722:	f840 4d04 	str.w	r4, [r0, #-4]!
   2f726:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2f728:	4616      	mov	r6, r2
   2f72a:	f8d8 a018 	ldr.w	sl, [r8, #24]
   2f72e:	f7ff f9d7 	bl	2eae0 <rpc_ip_client_request_alloc>
   2f732:	bba8      	cbnz	r0, 2f7a0 <ip_interface_socketoption_send+0xb8>
   2f734:	f247 0303 	movw	r3, #28675	; 0x7003
   2f738:	2208      	movs	r2, #8
   2f73a:	9c01      	ldr	r4, [sp, #4]
   2f73c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   2f740:	60e3      	str	r3, [r4, #12]
   2f742:	f8c4 a010 	str.w	sl, [r4, #16]
   2f746:	7260      	strb	r0, [r4, #9]
   2f748:	72a0      	strb	r0, [r4, #10]
   2f74a:	72e0      	strb	r0, [r4, #11]
   2f74c:	7222      	strb	r2, [r4, #8]
   2f74e:	68a3      	ldr	r3, [r4, #8]
   2f750:	6166      	str	r6, [r4, #20]
   2f752:	3308      	adds	r3, #8
   2f754:	60a3      	str	r3, [r4, #8]
   2f756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2f758:	61a7      	str	r7, [r4, #24]
   2f75a:	b133      	cbz	r3, 2f76a <ip_interface_socketoption_send+0x82>
   2f75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f75e:	b123      	cbz	r3, 2f76a <ip_interface_socketoption_send+0x82>
   2f760:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2f762:	4619      	mov	r1, r3
   2f764:	6820      	ldr	r0, [r4, #0]
   2f766:	f00b fe24 	bl	3b3b2 <memcpy>
   2f76a:	f247 0103 	movw	r1, #28675	; 0x7003
   2f76e:	4620      	mov	r0, r4
   2f770:	f7ff f9ca 	bl	2eb08 <rpc_ip_client_request_send>
   2f774:	4606      	mov	r6, r0
   2f776:	b9c0      	cbnz	r0, 2f7aa <ip_interface_socketoption_send+0xc2>
   2f778:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2f77c:	466b      	mov	r3, sp
   2f77e:	4611      	mov	r1, r2
   2f780:	4628      	mov	r0, r5
   2f782:	f005 fa8f 	bl	34ca4 <interface_socket_wait>
   2f786:	4604      	mov	r4, r0
   2f788:	b1d0      	cbz	r0, 2f7c0 <ip_interface_socketoption_send+0xd8>
   2f78a:	4620      	mov	r0, r4
   2f78c:	f8c8 9000 	str.w	r9, [r8]
   2f790:	b002      	add	sp, #8
   2f792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f796:	2423      	movs	r4, #35	; 0x23
   2f798:	4620      	mov	r0, r4
   2f79a:	b002      	add	sp, #8
   2f79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f7a0:	9c01      	ldr	r4, [sp, #4]
   2f7a2:	2c00      	cmp	r4, #0
   2f7a4:	d1d3      	bne.n	2f74e <ip_interface_socketoption_send+0x66>
   2f7a6:	240c      	movs	r4, #12
   2f7a8:	e7ef      	b.n	2f78a <ip_interface_socketoption_send+0xa2>
   2f7aa:	6820      	ldr	r0, [r4, #0]
   2f7ac:	b108      	cbz	r0, 2f7b2 <ip_interface_socketoption_send+0xca>
   2f7ae:	f7ff f9c9 	bl	2eb44 <rpc_ip_client_data_free>
   2f7b2:	4620      	mov	r0, r4
   2f7b4:	f7ff f9be 	bl	2eb34 <rpc_ip_client_message_free>
   2f7b8:	2423      	movs	r4, #35	; 0x23
   2f7ba:	f8c8 9000 	str.w	r9, [r8]
   2f7be:	e7e4      	b.n	2f78a <ip_interface_socketoption_send+0xa2>
   2f7c0:	4628      	mov	r0, r5
   2f7c2:	f005 fae3 	bl	34d8c <interface_socket_from_handle_get>
   2f7c6:	2800      	cmp	r0, #0
   2f7c8:	d0df      	beq.n	2f78a <ip_interface_socketoption_send+0xa2>
   2f7ca:	6844      	ldr	r4, [r0, #4]
   2f7cc:	2c00      	cmp	r4, #0
   2f7ce:	d0dc      	beq.n	2f78a <ip_interface_socketoption_send+0xa2>
   2f7d0:	6046      	str	r6, [r0, #4]
   2f7d2:	e7da      	b.n	2f78a <ip_interface_socketoption_send+0xa2>

0002f7d4 <ip_interface_bind>:
   2f7d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f7d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f7dc:	b083      	sub	sp, #12
   2f7de:	9300      	str	r3, [sp, #0]
   2f7e0:	b3b1      	cbz	r1, 2f850 <ip_interface_bind+0x7c>
   2f7e2:	4616      	mov	r6, r2
   2f7e4:	b3a2      	cbz	r2, 2f850 <ip_interface_bind+0x7c>
   2f7e6:	4607      	mov	r7, r0
   2f7e8:	4688      	mov	r8, r1
   2f7ea:	f005 facf 	bl	34d8c <interface_socket_from_handle_get>
   2f7ee:	4605      	mov	r5, r0
   2f7f0:	2800      	cmp	r0, #0
   2f7f2:	d04a      	beq.n	2f88a <ip_interface_bind+0xb6>
   2f7f4:	6803      	ldr	r3, [r0, #0]
   2f7f6:	b29b      	uxth	r3, r3
   2f7f8:	2b02      	cmp	r3, #2
   2f7fa:	d146      	bne.n	2f88a <ip_interface_bind+0xb6>
   2f7fc:	2100      	movs	r1, #0
   2f7fe:	a802      	add	r0, sp, #8
   2f800:	f840 1d04 	str.w	r1, [r0, #-4]!
   2f804:	f8d5 9018 	ldr.w	r9, [r5, #24]
   2f808:	f7ff f96a 	bl	2eae0 <rpc_ip_client_request_alloc>
   2f80c:	bb50      	cbnz	r0, 2f864 <ip_interface_bind+0x90>
   2f80e:	f247 0305 	movw	r3, #28677	; 0x7005
   2f812:	2208      	movs	r2, #8
   2f814:	9c01      	ldr	r4, [sp, #4]
   2f816:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2f81a:	60e3      	str	r3, [r4, #12]
   2f81c:	f8c4 9010 	str.w	r9, [r4, #16]
   2f820:	7260      	strb	r0, [r4, #9]
   2f822:	72a0      	strb	r0, [r4, #10]
   2f824:	72e0      	strb	r0, [r4, #11]
   2f826:	7222      	strb	r2, [r4, #8]
   2f828:	68a3      	ldr	r3, [r4, #8]
   2f82a:	3304      	adds	r3, #4
   2f82c:	60a3      	str	r3, [r4, #8]
   2f82e:	68eb      	ldr	r3, [r5, #12]
   2f830:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2f834:	4293      	cmp	r3, r2
   2f836:	d11a      	bne.n	2f86e <ip_interface_bind+0x9a>
   2f838:	f898 2000 	ldrb.w	r2, [r8]
   2f83c:	4296      	cmp	r6, r2
   2f83e:	d107      	bne.n	2f850 <ip_interface_bind+0x7c>
   2f840:	2b02      	cmp	r3, #2
   2f842:	f104 0018 	add.w	r0, r4, #24
   2f846:	d014      	beq.n	2f872 <ip_interface_bind+0x9e>
   2f848:	2b0a      	cmp	r3, #10
   2f84a:	d101      	bne.n	2f850 <ip_interface_bind+0x7c>
   2f84c:	2e24      	cmp	r6, #36	; 0x24
   2f84e:	d01e      	beq.n	2f88e <ip_interface_bind+0xba>
   2f850:	2416      	movs	r4, #22
   2f852:	4620      	mov	r0, r4
   2f854:	f7fa f870 	bl	29938 <bsd_os_errno_set>
   2f858:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2f85c:	4620      	mov	r0, r4
   2f85e:	b003      	add	sp, #12
   2f860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f864:	9c01      	ldr	r4, [sp, #4]
   2f866:	2c00      	cmp	r4, #0
   2f868:	d1de      	bne.n	2f828 <ip_interface_bind+0x54>
   2f86a:	240c      	movs	r4, #12
   2f86c:	e7f1      	b.n	2f852 <ip_interface_bind+0x7e>
   2f86e:	242f      	movs	r4, #47	; 0x2f
   2f870:	e7ef      	b.n	2f852 <ip_interface_bind+0x7e>
   2f872:	2e10      	cmp	r6, #16
   2f874:	d1ec      	bne.n	2f850 <ip_interface_bind+0x7c>
   2f876:	2204      	movs	r2, #4
   2f878:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2f87c:	f108 010c 	add.w	r1, r8, #12
   2f880:	82e2      	strh	r2, [r4, #22]
   2f882:	82a3      	strh	r3, [r4, #20]
   2f884:	f00b fd95 	bl	3b3b2 <memcpy>
   2f888:	e00a      	b.n	2f8a0 <ip_interface_bind+0xcc>
   2f88a:	2409      	movs	r4, #9
   2f88c:	e7e1      	b.n	2f852 <ip_interface_bind+0x7e>
   2f88e:	2210      	movs	r2, #16
   2f890:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2f894:	eb08 0102 	add.w	r1, r8, r2
   2f898:	82e2      	strh	r2, [r4, #22]
   2f89a:	82a3      	strh	r3, [r4, #20]
   2f89c:	f00b fd89 	bl	3b3b2 <memcpy>
   2f8a0:	68a3      	ldr	r3, [r4, #8]
   2f8a2:	8ae2      	ldrh	r2, [r4, #22]
   2f8a4:	f247 0105 	movw	r1, #28677	; 0x7005
   2f8a8:	4413      	add	r3, r2
   2f8aa:	60a3      	str	r3, [r4, #8]
   2f8ac:	682b      	ldr	r3, [r5, #0]
   2f8ae:	4620      	mov	r0, r4
   2f8b0:	0c1b      	lsrs	r3, r3, #16
   2f8b2:	041b      	lsls	r3, r3, #16
   2f8b4:	f043 0303 	orr.w	r3, r3, #3
   2f8b8:	602b      	str	r3, [r5, #0]
   2f8ba:	682e      	ldr	r6, [r5, #0]
   2f8bc:	f7ff f924 	bl	2eb08 <rpc_ip_client_request_send>
   2f8c0:	4680      	mov	r8, r0
   2f8c2:	b978      	cbnz	r0, 2f8e4 <ip_interface_bind+0x110>
   2f8c4:	466b      	mov	r3, sp
   2f8c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2f8ca:	2104      	movs	r1, #4
   2f8cc:	4638      	mov	r0, r7
   2f8ce:	f005 f9e9 	bl	34ca4 <interface_socket_wait>
   2f8d2:	4604      	mov	r4, r0
   2f8d4:	b1a0      	cbz	r0, 2f900 <ip_interface_bind+0x12c>
   2f8d6:	682b      	ldr	r3, [r5, #0]
   2f8d8:	0c1b      	lsrs	r3, r3, #16
   2f8da:	041b      	lsls	r3, r3, #16
   2f8dc:	f043 0302 	orr.w	r3, r3, #2
   2f8e0:	602b      	str	r3, [r5, #0]
   2f8e2:	e7b6      	b.n	2f852 <ip_interface_bind+0x7e>
   2f8e4:	6820      	ldr	r0, [r4, #0]
   2f8e6:	b108      	cbz	r0, 2f8ec <ip_interface_bind+0x118>
   2f8e8:	f7ff f92c 	bl	2eb44 <rpc_ip_client_data_free>
   2f8ec:	0c36      	lsrs	r6, r6, #16
   2f8ee:	0436      	lsls	r6, r6, #16
   2f8f0:	4620      	mov	r0, r4
   2f8f2:	f046 0602 	orr.w	r6, r6, #2
   2f8f6:	f7ff f91d 	bl	2eb34 <rpc_ip_client_message_free>
   2f8fa:	2423      	movs	r4, #35	; 0x23
   2f8fc:	602e      	str	r6, [r5, #0]
   2f8fe:	e7a8      	b.n	2f852 <ip_interface_bind+0x7e>
   2f900:	4638      	mov	r0, r7
   2f902:	f005 fa43 	bl	34d8c <interface_socket_from_handle_get>
   2f906:	2800      	cmp	r0, #0
   2f908:	d0a8      	beq.n	2f85c <ip_interface_bind+0x88>
   2f90a:	6844      	ldr	r4, [r0, #4]
   2f90c:	2c00      	cmp	r4, #0
   2f90e:	d0a5      	beq.n	2f85c <ip_interface_bind+0x88>
   2f910:	f8c0 8004 	str.w	r8, [r0, #4]
   2f914:	e7df      	b.n	2f8d6 <ip_interface_bind+0x102>
   2f916:	bf00      	nop

0002f918 <ip_interface_listen>:
   2f918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f920:	b082      	sub	sp, #8
   2f922:	4606      	mov	r6, r0
   2f924:	9300      	str	r3, [sp, #0]
   2f926:	f005 fa31 	bl	34d8c <interface_socket_from_handle_get>
   2f92a:	2800      	cmp	r0, #0
   2f92c:	d06c      	beq.n	2fa08 <ip_interface_listen+0xf0>
   2f92e:	6803      	ldr	r3, [r0, #0]
   2f930:	4604      	mov	r4, r0
   2f932:	b29b      	uxth	r3, r3
   2f934:	2b04      	cmp	r3, #4
   2f936:	d003      	beq.n	2f940 <ip_interface_listen+0x28>
   2f938:	6803      	ldr	r3, [r0, #0]
   2f93a:	b29b      	uxth	r3, r3
   2f93c:	2b0b      	cmp	r3, #11
   2f93e:	d163      	bne.n	2fa08 <ip_interface_listen+0xf0>
   2f940:	2100      	movs	r1, #0
   2f942:	4a32      	ldr	r2, [pc, #200]	; (2fa0c <ip_interface_listen+0xf4>)
   2f944:	4630      	mov	r0, r6
   2f946:	f005 f975 	bl	34c34 <interface_socket_packet_handler_update>
   2f94a:	4601      	mov	r1, r0
   2f94c:	2800      	cmp	r0, #0
   2f94e:	d159      	bne.n	2fa04 <ip_interface_listen+0xec>
   2f950:	a802      	add	r0, sp, #8
   2f952:	f840 1d04 	str.w	r1, [r0, #-4]!
   2f956:	69a7      	ldr	r7, [r4, #24]
   2f958:	f7ff f8c2 	bl	2eae0 <rpc_ip_client_request_alloc>
   2f95c:	bba0      	cbnz	r0, 2f9c8 <ip_interface_listen+0xb0>
   2f95e:	f247 0308 	movw	r3, #28680	; 0x7008
   2f962:	2208      	movs	r2, #8
   2f964:	9d01      	ldr	r5, [sp, #4]
   2f966:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2f96a:	60eb      	str	r3, [r5, #12]
   2f96c:	612f      	str	r7, [r5, #16]
   2f96e:	7268      	strb	r0, [r5, #9]
   2f970:	72a8      	strb	r0, [r5, #10]
   2f972:	72e8      	strb	r0, [r5, #11]
   2f974:	722a      	strb	r2, [r5, #8]
   2f976:	68ab      	ldr	r3, [r5, #8]
   2f978:	f247 0108 	movw	r1, #28680	; 0x7008
   2f97c:	3304      	adds	r3, #4
   2f97e:	60ab      	str	r3, [r5, #8]
   2f980:	6823      	ldr	r3, [r4, #0]
   2f982:	4628      	mov	r0, r5
   2f984:	0c1b      	lsrs	r3, r3, #16
   2f986:	041b      	lsls	r3, r3, #16
   2f988:	f043 0306 	orr.w	r3, r3, #6
   2f98c:	6023      	str	r3, [r4, #0]
   2f98e:	6827      	ldr	r7, [r4, #0]
   2f990:	f7ff f8ba 	bl	2eb08 <rpc_ip_client_request_send>
   2f994:	4680      	mov	r8, r0
   2f996:	b9e0      	cbnz	r0, 2f9d2 <ip_interface_listen+0xba>
   2f998:	466b      	mov	r3, sp
   2f99a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2f99e:	2107      	movs	r1, #7
   2f9a0:	4630      	mov	r0, r6
   2f9a2:	f005 f97f 	bl	34ca4 <interface_socket_wait>
   2f9a6:	4605      	mov	r5, r0
   2f9a8:	b308      	cbz	r0, 2f9ee <ip_interface_listen+0xd6>
   2f9aa:	6823      	ldr	r3, [r4, #0]
   2f9ac:	0c1b      	lsrs	r3, r3, #16
   2f9ae:	041b      	lsls	r3, r3, #16
   2f9b0:	f043 0304 	orr.w	r3, r3, #4
   2f9b4:	6023      	str	r3, [r4, #0]
   2f9b6:	4628      	mov	r0, r5
   2f9b8:	f7f9 ffbe 	bl	29938 <bsd_os_errno_set>
   2f9bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f9c0:	4628      	mov	r0, r5
   2f9c2:	b002      	add	sp, #8
   2f9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f9c8:	9d01      	ldr	r5, [sp, #4]
   2f9ca:	2d00      	cmp	r5, #0
   2f9cc:	d1d3      	bne.n	2f976 <ip_interface_listen+0x5e>
   2f9ce:	250c      	movs	r5, #12
   2f9d0:	e7f1      	b.n	2f9b6 <ip_interface_listen+0x9e>
   2f9d2:	6828      	ldr	r0, [r5, #0]
   2f9d4:	b108      	cbz	r0, 2f9da <ip_interface_listen+0xc2>
   2f9d6:	f7ff f8b5 	bl	2eb44 <rpc_ip_client_data_free>
   2f9da:	0c3f      	lsrs	r7, r7, #16
   2f9dc:	043f      	lsls	r7, r7, #16
   2f9de:	4628      	mov	r0, r5
   2f9e0:	f047 0704 	orr.w	r7, r7, #4
   2f9e4:	f7ff f8a6 	bl	2eb34 <rpc_ip_client_message_free>
   2f9e8:	2523      	movs	r5, #35	; 0x23
   2f9ea:	6027      	str	r7, [r4, #0]
   2f9ec:	e7e3      	b.n	2f9b6 <ip_interface_listen+0x9e>
   2f9ee:	4630      	mov	r0, r6
   2f9f0:	f005 f9cc 	bl	34d8c <interface_socket_from_handle_get>
   2f9f4:	2800      	cmp	r0, #0
   2f9f6:	d0e3      	beq.n	2f9c0 <ip_interface_listen+0xa8>
   2f9f8:	6845      	ldr	r5, [r0, #4]
   2f9fa:	2d00      	cmp	r5, #0
   2f9fc:	d0e0      	beq.n	2f9c0 <ip_interface_listen+0xa8>
   2f9fe:	f8c0 8004 	str.w	r8, [r0, #4]
   2fa02:	e7d2      	b.n	2f9aa <ip_interface_listen+0x92>
   2fa04:	2523      	movs	r5, #35	; 0x23
   2fa06:	e7d6      	b.n	2f9b6 <ip_interface_listen+0x9e>
   2fa08:	2509      	movs	r5, #9
   2fa0a:	e7d4      	b.n	2f9b6 <ip_interface_listen+0x9e>
   2fa0c:	0002eb55 	.word	0x0002eb55

0002fa10 <ip_interface_accept>:
   2fa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fa14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2fa18:	2500      	movs	r5, #0
   2fa1a:	b087      	sub	sp, #28
   2fa1c:	460f      	mov	r7, r1
   2fa1e:	4690      	mov	r8, r2
   2fa20:	e9cd 5303 	strd	r5, r3, [sp, #12]
   2fa24:	4606      	mov	r6, r0
   2fa26:	f005 f9b1 	bl	34d8c <interface_socket_from_handle_get>
   2fa2a:	4604      	mov	r4, r0
   2fa2c:	2800      	cmp	r0, #0
   2fa2e:	f000 8123 	beq.w	2fc78 <ip_interface_accept+0x268>
   2fa32:	6803      	ldr	r3, [r0, #0]
   2fa34:	b29b      	uxth	r3, r3
   2fa36:	2b07      	cmp	r3, #7
   2fa38:	d10a      	bne.n	2fa50 <ip_interface_accept+0x40>
   2fa3a:	6803      	ldr	r3, [r0, #0]
   2fa3c:	6805      	ldr	r5, [r0, #0]
   2fa3e:	00db      	lsls	r3, r3, #3
   2fa40:	d416      	bmi.n	2fa70 <ip_interface_accept+0x60>
   2fa42:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2fa46:	d019      	beq.n	2fa7c <ip_interface_accept+0x6c>
   2fa48:	6805      	ldr	r5, [r0, #0]
   2fa4a:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2fa4e:	d124      	bne.n	2fa9a <ip_interface_accept+0x8a>
   2fa50:	f04f 0909 	mov.w	r9, #9
   2fa54:	9b03      	ldr	r3, [sp, #12]
   2fa56:	b113      	cbz	r3, 2fa5e <ip_interface_accept+0x4e>
   2fa58:	4628      	mov	r0, r5
   2fa5a:	f005 f8d5 	bl	34c08 <interface_socket_free>
   2fa5e:	4648      	mov	r0, r9
   2fa60:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2fa64:	f7f9 ff68 	bl	29938 <bsd_os_errno_set>
   2fa68:	4648      	mov	r0, r9
   2fa6a:	b007      	add	sp, #28
   2fa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa70:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2fa74:	d170      	bne.n	2fb58 <ip_interface_accept+0x148>
   2fa76:	f04f 0923 	mov.w	r9, #35	; 0x23
   2fa7a:	e7eb      	b.n	2fa54 <ip_interface_accept+0x44>
   2fa7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2fa80:	ab04      	add	r3, sp, #16
   2fa82:	4611      	mov	r1, r2
   2fa84:	4630      	mov	r0, r6
   2fa86:	f005 f90d 	bl	34ca4 <interface_socket_wait>
   2fa8a:	4681      	mov	r9, r0
   2fa8c:	2800      	cmp	r0, #0
   2fa8e:	f000 8082 	beq.w	2fb96 <ip_interface_accept+0x186>
   2fa92:	6825      	ldr	r5, [r4, #0]
   2fa94:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2fa98:	d0dc      	beq.n	2fa54 <ip_interface_accept+0x44>
   2fa9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fa9e:	2300      	movs	r3, #0
   2faa0:	e9cd 0300 	strd	r0, r3, [sp]
   2faa4:	4a78      	ldr	r2, [pc, #480]	; (2fc88 <ip_interface_accept+0x278>)
   2faa6:	6921      	ldr	r1, [r4, #16]
   2faa8:	a803      	add	r0, sp, #12
   2faaa:	f005 f849 	bl	34b40 <interface_socket_allocate>
   2faae:	9b03      	ldr	r3, [sp, #12]
   2fab0:	4605      	mov	r5, r0
   2fab2:	2b00      	cmp	r3, #0
   2fab4:	f000 80e4 	beq.w	2fc80 <ip_interface_accept+0x270>
   2fab8:	2100      	movs	r1, #0
   2faba:	6962      	ldr	r2, [r4, #20]
   2fabc:	a806      	add	r0, sp, #24
   2fabe:	615a      	str	r2, [r3, #20]
   2fac0:	68e2      	ldr	r2, [r4, #12]
   2fac2:	f840 1d04 	str.w	r1, [r0, #-4]!
   2fac6:	60da      	str	r2, [r3, #12]
   2fac8:	6922      	ldr	r2, [r4, #16]
   2faca:	611a      	str	r2, [r3, #16]
   2facc:	f8d4 9018 	ldr.w	r9, [r4, #24]
   2fad0:	f7ff f806 	bl	2eae0 <rpc_ip_client_request_alloc>
   2fad4:	2800      	cmp	r0, #0
   2fad6:	d146      	bne.n	2fb66 <ip_interface_accept+0x156>
   2fad8:	f247 030c 	movw	r3, #28684	; 0x700c
   2fadc:	2108      	movs	r1, #8
   2fade:	f8dd b014 	ldr.w	fp, [sp, #20]
   2fae2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2fae6:	f8cb 300c 	str.w	r3, [fp, #12]
   2faea:	f8cb 9010 	str.w	r9, [fp, #16]
   2faee:	f88b 0009 	strb.w	r0, [fp, #9]
   2faf2:	f88b 000a 	strb.w	r0, [fp, #10]
   2faf6:	f88b 000b 	strb.w	r0, [fp, #11]
   2fafa:	f88b 1008 	strb.w	r1, [fp, #8]
   2fafe:	6823      	ldr	r3, [r4, #0]
   2fb00:	f247 010c 	movw	r1, #28684	; 0x700c
   2fb04:	0c1b      	lsrs	r3, r3, #16
   2fb06:	041b      	lsls	r3, r3, #16
   2fb08:	f043 0308 	orr.w	r3, r3, #8
   2fb0c:	6023      	str	r3, [r4, #0]
   2fb0e:	4658      	mov	r0, fp
   2fb10:	f8d4 9000 	ldr.w	r9, [r4]
   2fb14:	f7fe fff8 	bl	2eb08 <rpc_ip_client_request_send>
   2fb18:	4682      	mov	sl, r0
   2fb1a:	bb60      	cbnz	r0, 2fb76 <ip_interface_accept+0x166>
   2fb1c:	6822      	ldr	r2, [r4, #0]
   2fb1e:	9900      	ldr	r1, [sp, #0]
   2fb20:	ab04      	add	r3, sp, #16
   2fb22:	400a      	ands	r2, r1
   2fb24:	6022      	str	r2, [r4, #0]
   2fb26:	2109      	movs	r1, #9
   2fb28:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2fb2c:	4630      	mov	r0, r6
   2fb2e:	f005 f8b9 	bl	34ca4 <interface_socket_wait>
   2fb32:	4681      	mov	r9, r0
   2fb34:	2800      	cmp	r0, #0
   2fb36:	f000 808d 	beq.w	2fc54 <ip_interface_accept+0x244>
   2fb3a:	6823      	ldr	r3, [r4, #0]
   2fb3c:	9a01      	ldr	r2, [sp, #4]
   2fb3e:	431a      	orrs	r2, r3
   2fb40:	6022      	str	r2, [r4, #0]
   2fb42:	6823      	ldr	r3, [r4, #0]
   2fb44:	0c1b      	lsrs	r3, r3, #16
   2fb46:	041b      	lsls	r3, r3, #16
   2fb48:	f043 0307 	orr.w	r3, r3, #7
   2fb4c:	6023      	str	r3, [r4, #0]
   2fb4e:	6823      	ldr	r3, [r4, #0]
   2fb50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2fb54:	6023      	str	r3, [r4, #0]
   2fb56:	e77d      	b.n	2fa54 <ip_interface_accept+0x44>
   2fb58:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   2fb5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2fb60:	e9cd 2300 	strd	r2, r3, [sp]
   2fb64:	e79e      	b.n	2faa4 <ip_interface_accept+0x94>
   2fb66:	f8dd b014 	ldr.w	fp, [sp, #20]
   2fb6a:	f04f 090c 	mov.w	r9, #12
   2fb6e:	f1bb 0f00 	cmp.w	fp, #0
   2fb72:	d1c4      	bne.n	2fafe <ip_interface_accept+0xee>
   2fb74:	e76e      	b.n	2fa54 <ip_interface_accept+0x44>
   2fb76:	f8db 0000 	ldr.w	r0, [fp]
   2fb7a:	b108      	cbz	r0, 2fb80 <ip_interface_accept+0x170>
   2fb7c:	f7fe ffe2 	bl	2eb44 <rpc_ip_client_data_free>
   2fb80:	ea4f 4919 	mov.w	r9, r9, lsr #16
   2fb84:	4658      	mov	r0, fp
   2fb86:	ea4f 4909 	mov.w	r9, r9, lsl #16
   2fb8a:	f7fe ffd3 	bl	2eb34 <rpc_ip_client_message_free>
   2fb8e:	f049 0307 	orr.w	r3, r9, #7
   2fb92:	6023      	str	r3, [r4, #0]
   2fb94:	e76f      	b.n	2fa76 <ip_interface_accept+0x66>
   2fb96:	4630      	mov	r0, r6
   2fb98:	f005 f8f8 	bl	34d8c <interface_socket_from_handle_get>
   2fb9c:	b130      	cbz	r0, 2fbac <ip_interface_accept+0x19c>
   2fb9e:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2fba2:	f1b9 0f00 	cmp.w	r9, #0
   2fba6:	d001      	beq.n	2fbac <ip_interface_accept+0x19c>
   2fba8:	6045      	str	r5, [r0, #4]
   2fbaa:	e772      	b.n	2fa92 <ip_interface_accept+0x82>
   2fbac:	6823      	ldr	r3, [r4, #0]
   2fbae:	03d9      	lsls	r1, r3, #15
   2fbb0:	f53f af73 	bmi.w	2fa9a <ip_interface_accept+0x8a>
   2fbb4:	4d35      	ldr	r5, [pc, #212]	; (2fc8c <ip_interface_accept+0x27c>)
   2fbb6:	9903      	ldr	r1, [sp, #12]
   2fbb8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2fbbc:	699b      	ldr	r3, [r3, #24]
   2fbbe:	618b      	str	r3, [r1, #24]
   2fbc0:	b147      	cbz	r7, 2fbd4 <ip_interface_accept+0x1c4>
   2fbc2:	68cb      	ldr	r3, [r1, #12]
   2fbc4:	2b0a      	cmp	r3, #10
   2fbc6:	d028      	beq.n	2fc1a <ip_interface_accept+0x20a>
   2fbc8:	2b02      	cmp	r3, #2
   2fbca:	d103      	bne.n	2fbd4 <ip_interface_accept+0x1c4>
   2fbcc:	f8d8 2000 	ldr.w	r2, [r8]
   2fbd0:	2a10      	cmp	r2, #16
   2fbd2:	d036      	beq.n	2fc42 <ip_interface_accept+0x232>
   2fbd4:	680a      	ldr	r2, [r1, #0]
   2fbd6:	482e      	ldr	r0, [pc, #184]	; (2fc90 <ip_interface_accept+0x280>)
   2fbd8:	4002      	ands	r2, r0
   2fbda:	f042 0205 	orr.w	r2, r2, #5
   2fbde:	600a      	str	r2, [r1, #0]
   2fbe0:	9a03      	ldr	r2, [sp, #12]
   2fbe2:	6811      	ldr	r1, [r2, #0]
   2fbe4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   2fbe8:	6011      	str	r1, [r2, #0]
   2fbea:	6811      	ldr	r1, [r2, #0]
   2fbec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   2fbf0:	6011      	str	r1, [r2, #0]
   2fbf2:	6823      	ldr	r3, [r4, #0]
   2fbf4:	4003      	ands	r3, r0
   2fbf6:	f043 0307 	orr.w	r3, r3, #7
   2fbfa:	6023      	str	r3, [r4, #0]
   2fbfc:	6823      	ldr	r3, [r4, #0]
   2fbfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2fc02:	6023      	str	r3, [r4, #0]
   2fc04:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   2fc08:	f7fe ff94 	bl	2eb34 <rpc_ip_client_message_free>
   2fc0c:	2300      	movs	r3, #0
   2fc0e:	4648      	mov	r0, r9
   2fc10:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   2fc14:	b007      	add	sp, #28
   2fc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc1a:	f8d8 2000 	ldr.w	r2, [r8]
   2fc1e:	2a24      	cmp	r2, #36	; 0x24
   2fc20:	d1d8      	bne.n	2fbd4 <ip_interface_accept+0x1c4>
   2fc22:	703a      	strb	r2, [r7, #0]
   2fc24:	2210      	movs	r2, #16
   2fc26:	607b      	str	r3, [r7, #4]
   2fc28:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2fc2c:	f107 0010 	add.w	r0, r7, #16
   2fc30:	8b9b      	ldrh	r3, [r3, #28]
   2fc32:	813b      	strh	r3, [r7, #8]
   2fc34:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   2fc38:	3120      	adds	r1, #32
   2fc3a:	f00b fbba 	bl	3b3b2 <memcpy>
   2fc3e:	9903      	ldr	r1, [sp, #12]
   2fc40:	e7c8      	b.n	2fbd4 <ip_interface_accept+0x1c4>
   2fc42:	703a      	strb	r2, [r7, #0]
   2fc44:	607b      	str	r3, [r7, #4]
   2fc46:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2fc4a:	f107 000c 	add.w	r0, r7, #12
   2fc4e:	8b9b      	ldrh	r3, [r3, #28]
   2fc50:	2204      	movs	r2, #4
   2fc52:	e7ee      	b.n	2fc32 <ip_interface_accept+0x222>
   2fc54:	4630      	mov	r0, r6
   2fc56:	f005 f899 	bl	34d8c <interface_socket_from_handle_get>
   2fc5a:	b138      	cbz	r0, 2fc6c <ip_interface_accept+0x25c>
   2fc5c:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2fc60:	f1b9 0f00 	cmp.w	r9, #0
   2fc64:	d002      	beq.n	2fc6c <ip_interface_accept+0x25c>
   2fc66:	f8c0 a004 	str.w	sl, [r0, #4]
   2fc6a:	e766      	b.n	2fb3a <ip_interface_accept+0x12a>
   2fc6c:	6823      	ldr	r3, [r4, #0]
   2fc6e:	9a01      	ldr	r2, [sp, #4]
   2fc70:	46a9      	mov	r9, r5
   2fc72:	4313      	orrs	r3, r2
   2fc74:	6023      	str	r3, [r4, #0]
   2fc76:	e79d      	b.n	2fbb4 <ip_interface_accept+0x1a4>
   2fc78:	4605      	mov	r5, r0
   2fc7a:	f04f 0909 	mov.w	r9, #9
   2fc7e:	e6e9      	b.n	2fa54 <ip_interface_accept+0x44>
   2fc80:	f04f 090c 	mov.w	r9, #12
   2fc84:	e6eb      	b.n	2fa5e <ip_interface_accept+0x4e>
   2fc86:	bf00      	nop
   2fc88:	0002eb55 	.word	0x0002eb55
   2fc8c:	20023cbc 	.word	0x20023cbc
   2fc90:	ffff0000 	.word	0xffff0000

0002fc94 <ip_interface_setopt>:
   2fc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fc98:	2901      	cmp	r1, #1
   2fc9a:	b084      	sub	sp, #16
   2fc9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2fc9e:	f040 808a 	bne.w	2fdb6 <ip_interface_setopt+0x122>
   2fca2:	4617      	mov	r7, r2
   2fca4:	461d      	mov	r5, r3
   2fca6:	4680      	mov	r8, r0
   2fca8:	f005 f870 	bl	34d8c <interface_socket_from_handle_get>
   2fcac:	4604      	mov	r4, r0
   2fcae:	2800      	cmp	r0, #0
   2fcb0:	f000 808d 	beq.w	2fdce <ip_interface_setopt+0x13a>
   2fcb4:	f1a7 0119 	sub.w	r1, r7, #25
   2fcb8:	290f      	cmp	r1, #15
   2fcba:	d872      	bhi.n	2fda2 <ip_interface_setopt+0x10e>
   2fcbc:	e8df f001 	tbb	[pc, r1]
   2fcc0:	7171711a 	.word	0x7171711a
   2fcc4:	61514071 	.word	0x61514071
   2fcc8:	71717171 	.word	0x71717171
   2fccc:	08717171 	.word	0x08717171
   2fcd0:	2e04      	cmp	r6, #4
   2fcd2:	d176      	bne.n	2fdc2 <ip_interface_setopt+0x12e>
   2fcd4:	2d00      	cmp	r5, #0
   2fcd6:	d074      	beq.n	2fdc2 <ip_interface_setopt+0x12e>
   2fcd8:	4601      	mov	r1, r0
   2fcda:	e9cd 5600 	strd	r5, r6, [sp]
   2fcde:	4640      	mov	r0, r8
   2fce0:	f241 0304 	movw	r3, #4100	; 0x1004
   2fce4:	2208      	movs	r2, #8
   2fce6:	f7ff fcff 	bl	2f6e8 <ip_interface_socketoption_send>
   2fcea:	bb20      	cbnz	r0, 2fd36 <ip_interface_setopt+0xa2>
   2fcec:	2000      	movs	r0, #0
   2fcee:	b004      	add	sp, #16
   2fcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fcf4:	2d00      	cmp	r5, #0
   2fcf6:	d06c      	beq.n	2fdd2 <ip_interface_setopt+0x13e>
   2fcf8:	4628      	mov	r0, r5
   2fcfa:	f7ed f9b9 	bl	1d070 <strlen>
   2fcfe:	42b0      	cmp	r0, r6
   2fd00:	d167      	bne.n	2fdd2 <ip_interface_setopt+0x13e>
   2fd02:	6823      	ldr	r3, [r4, #0]
   2fd04:	b29b      	uxth	r3, r3
   2fd06:	2b02      	cmp	r3, #2
   2fd08:	d161      	bne.n	2fdce <ip_interface_setopt+0x13a>
   2fd0a:	4629      	mov	r1, r5
   2fd0c:	68e0      	ldr	r0, [r4, #12]
   2fd0e:	f002 fdc1 	bl	32894 <pdn_interface_pdn_id_get>
   2fd12:	9003      	str	r0, [sp, #12]
   2fd14:	3001      	adds	r0, #1
   2fd16:	bf08      	it	eq
   2fd18:	2016      	moveq	r0, #22
   2fd1a:	d00c      	beq.n	2fd36 <ip_interface_setopt+0xa2>
   2fd1c:	2204      	movs	r2, #4
   2fd1e:	ab03      	add	r3, sp, #12
   2fd20:	e9cd 3200 	strd	r3, r2, [sp]
   2fd24:	4621      	mov	r1, r4
   2fd26:	4640      	mov	r0, r8
   2fd28:	f243 0310 	movw	r3, #12304	; 0x3010
   2fd2c:	2208      	movs	r2, #8
   2fd2e:	f7ff fcdb 	bl	2f6e8 <ip_interface_socketoption_send>
   2fd32:	2800      	cmp	r0, #0
   2fd34:	d0da      	beq.n	2fcec <ip_interface_setopt+0x58>
   2fd36:	f7f9 fdff 	bl	29938 <bsd_os_errno_set>
   2fd3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fd3e:	e7d6      	b.n	2fcee <ip_interface_setopt+0x5a>
   2fd40:	2e04      	cmp	r6, #4
   2fd42:	d13e      	bne.n	2fdc2 <ip_interface_setopt+0x12e>
   2fd44:	2d00      	cmp	r5, #0
   2fd46:	d03c      	beq.n	2fdc2 <ip_interface_setopt+0x12e>
   2fd48:	4601      	mov	r1, r0
   2fd4a:	e9cd 5600 	strd	r5, r6, [sp]
   2fd4e:	4640      	mov	r0, r8
   2fd50:	f248 0301 	movw	r3, #32769	; 0x8001
   2fd54:	f44f 7200 	mov.w	r2, #512	; 0x200
   2fd58:	f7ff fcc6 	bl	2f6e8 <ip_interface_socketoption_send>
   2fd5c:	2800      	cmp	r0, #0
   2fd5e:	d0c5      	beq.n	2fcec <ip_interface_setopt+0x58>
   2fd60:	e7e9      	b.n	2fd36 <ip_interface_setopt+0xa2>
   2fd62:	2e04      	cmp	r6, #4
   2fd64:	d12d      	bne.n	2fdc2 <ip_interface_setopt+0x12e>
   2fd66:	b365      	cbz	r5, 2fdc2 <ip_interface_setopt+0x12e>
   2fd68:	4601      	mov	r1, r0
   2fd6a:	e9cd 5600 	strd	r5, r6, [sp]
   2fd6e:	4640      	mov	r0, r8
   2fd70:	f244 0310 	movw	r3, #16400	; 0x4010
   2fd74:	f44f 7200 	mov.w	r2, #512	; 0x200
   2fd78:	f7ff fcb6 	bl	2f6e8 <ip_interface_socketoption_send>
   2fd7c:	2800      	cmp	r0, #0
   2fd7e:	d0b5      	beq.n	2fcec <ip_interface_setopt+0x58>
   2fd80:	e7d9      	b.n	2fd36 <ip_interface_setopt+0xa2>
   2fd82:	2e04      	cmp	r6, #4
   2fd84:	d11d      	bne.n	2fdc2 <ip_interface_setopt+0x12e>
   2fd86:	b1e5      	cbz	r5, 2fdc2 <ip_interface_setopt+0x12e>
   2fd88:	4601      	mov	r1, r0
   2fd8a:	e9cd 5600 	strd	r5, r6, [sp]
   2fd8e:	4640      	mov	r0, r8
   2fd90:	f246 0310 	movw	r3, #24592	; 0x6010
   2fd94:	f44f 7200 	mov.w	r2, #512	; 0x200
   2fd98:	f7ff fca6 	bl	2f6e8 <ip_interface_socketoption_send>
   2fd9c:	2800      	cmp	r0, #0
   2fd9e:	d0a5      	beq.n	2fcec <ip_interface_setopt+0x58>
   2fda0:	e7c9      	b.n	2fd36 <ip_interface_setopt+0xa2>
   2fda2:	9600      	str	r6, [sp, #0]
   2fda4:	462b      	mov	r3, r5
   2fda6:	463a      	mov	r2, r7
   2fda8:	4640      	mov	r0, r8
   2fdaa:	2101      	movs	r1, #1
   2fdac:	f005 f816 	bl	34ddc <interface_socket_setopt>
   2fdb0:	b004      	add	sp, #16
   2fdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fdb6:	202a      	movs	r0, #42	; 0x2a
   2fdb8:	f7f9 fdbe 	bl	29938 <bsd_os_errno_set>
   2fdbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fdc0:	e795      	b.n	2fcee <ip_interface_setopt+0x5a>
   2fdc2:	2016      	movs	r0, #22
   2fdc4:	f7f9 fdb8 	bl	29938 <bsd_os_errno_set>
   2fdc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fdcc:	e78f      	b.n	2fcee <ip_interface_setopt+0x5a>
   2fdce:	2009      	movs	r0, #9
   2fdd0:	e7b1      	b.n	2fd36 <ip_interface_setopt+0xa2>
   2fdd2:	200e      	movs	r0, #14
   2fdd4:	e7af      	b.n	2fd36 <ip_interface_setopt+0xa2>
   2fdd6:	bf00      	nop

0002fdd8 <ip_interface_getopt>:
   2fdd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fddc:	2901      	cmp	r1, #1
   2fdde:	b082      	sub	sp, #8
   2fde0:	9c08      	ldr	r4, [sp, #32]
   2fde2:	d173      	bne.n	2fecc <ip_interface_getopt+0xf4>
   2fde4:	4617      	mov	r7, r2
   2fde6:	461e      	mov	r6, r3
   2fde8:	4680      	mov	r8, r0
   2fdea:	f004 ffcf 	bl	34d8c <interface_socket_from_handle_get>
   2fdee:	2800      	cmp	r0, #0
   2fdf0:	d072      	beq.n	2fed8 <ip_interface_getopt+0x100>
   2fdf2:	f1a7 051e 	sub.w	r5, r7, #30
   2fdf6:	2d0a      	cmp	r5, #10
   2fdf8:	d858      	bhi.n	2feac <ip_interface_getopt+0xd4>
   2fdfa:	e8df f005 	tbb	[pc, r5]
   2fdfe:	331b      	.short	0x331b
   2fe00:	57575745 	.word	0x57575745
   2fe04:	57575757 	.word	0x57575757
   2fe08:	06          	.byte	0x06
   2fe09:	00          	.byte	0x00
   2fe0a:	2c00      	cmp	r4, #0
   2fe0c:	d058      	beq.n	2fec0 <ip_interface_getopt+0xe8>
   2fe0e:	6823      	ldr	r3, [r4, #0]
   2fe10:	2b04      	cmp	r3, #4
   2fe12:	d155      	bne.n	2fec0 <ip_interface_getopt+0xe8>
   2fe14:	2e00      	cmp	r6, #0
   2fe16:	d053      	beq.n	2fec0 <ip_interface_getopt+0xe8>
   2fe18:	4601      	mov	r1, r0
   2fe1a:	e9cd 6400 	strd	r6, r4, [sp]
   2fe1e:	4640      	mov	r0, r8
   2fe20:	f241 0304 	movw	r3, #4100	; 0x1004
   2fe24:	2208      	movs	r2, #8
   2fe26:	f7ff fbaf 	bl	2f588 <ip_interface_socketoption_get>
   2fe2a:	b9b0      	cbnz	r0, 2fe5a <ip_interface_getopt+0x82>
   2fe2c:	2000      	movs	r0, #0
   2fe2e:	b002      	add	sp, #8
   2fe30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fe34:	2c00      	cmp	r4, #0
   2fe36:	d043      	beq.n	2fec0 <ip_interface_getopt+0xe8>
   2fe38:	6823      	ldr	r3, [r4, #0]
   2fe3a:	2b04      	cmp	r3, #4
   2fe3c:	d140      	bne.n	2fec0 <ip_interface_getopt+0xe8>
   2fe3e:	2e00      	cmp	r6, #0
   2fe40:	d03e      	beq.n	2fec0 <ip_interface_getopt+0xe8>
   2fe42:	4601      	mov	r1, r0
   2fe44:	e9cd 6400 	strd	r6, r4, [sp]
   2fe48:	4640      	mov	r0, r8
   2fe4a:	f248 0301 	movw	r3, #32769	; 0x8001
   2fe4e:	f44f 7200 	mov.w	r2, #512	; 0x200
   2fe52:	f7ff fb99 	bl	2f588 <ip_interface_socketoption_get>
   2fe56:	2800      	cmp	r0, #0
   2fe58:	d0e8      	beq.n	2fe2c <ip_interface_getopt+0x54>
   2fe5a:	f7f9 fd6d 	bl	29938 <bsd_os_errno_set>
   2fe5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fe62:	e7e4      	b.n	2fe2e <ip_interface_getopt+0x56>
   2fe64:	b364      	cbz	r4, 2fec0 <ip_interface_getopt+0xe8>
   2fe66:	6823      	ldr	r3, [r4, #0]
   2fe68:	2b04      	cmp	r3, #4
   2fe6a:	d129      	bne.n	2fec0 <ip_interface_getopt+0xe8>
   2fe6c:	b346      	cbz	r6, 2fec0 <ip_interface_getopt+0xe8>
   2fe6e:	4601      	mov	r1, r0
   2fe70:	e9cd 6400 	strd	r6, r4, [sp]
   2fe74:	4640      	mov	r0, r8
   2fe76:	f244 0310 	movw	r3, #16400	; 0x4010
   2fe7a:	f44f 7200 	mov.w	r2, #512	; 0x200
   2fe7e:	f7ff fb83 	bl	2f588 <ip_interface_socketoption_get>
   2fe82:	2800      	cmp	r0, #0
   2fe84:	d0d2      	beq.n	2fe2c <ip_interface_getopt+0x54>
   2fe86:	e7e8      	b.n	2fe5a <ip_interface_getopt+0x82>
   2fe88:	b1d4      	cbz	r4, 2fec0 <ip_interface_getopt+0xe8>
   2fe8a:	6823      	ldr	r3, [r4, #0]
   2fe8c:	2b04      	cmp	r3, #4
   2fe8e:	d117      	bne.n	2fec0 <ip_interface_getopt+0xe8>
   2fe90:	b1b6      	cbz	r6, 2fec0 <ip_interface_getopt+0xe8>
   2fe92:	4601      	mov	r1, r0
   2fe94:	e9cd 6400 	strd	r6, r4, [sp]
   2fe98:	4640      	mov	r0, r8
   2fe9a:	f246 0310 	movw	r3, #24592	; 0x6010
   2fe9e:	f44f 7200 	mov.w	r2, #512	; 0x200
   2fea2:	f7ff fb71 	bl	2f588 <ip_interface_socketoption_get>
   2fea6:	2800      	cmp	r0, #0
   2fea8:	d0c0      	beq.n	2fe2c <ip_interface_getopt+0x54>
   2feaa:	e7d6      	b.n	2fe5a <ip_interface_getopt+0x82>
   2feac:	4633      	mov	r3, r6
   2feae:	463a      	mov	r2, r7
   2feb0:	4640      	mov	r0, r8
   2feb2:	2101      	movs	r1, #1
   2feb4:	9408      	str	r4, [sp, #32]
   2feb6:	b002      	add	sp, #8
   2feb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2febc:	f004 bfd4 	b.w	34e68 <interface_socket_getopt>
   2fec0:	2016      	movs	r0, #22
   2fec2:	f7f9 fd39 	bl	29938 <bsd_os_errno_set>
   2fec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2feca:	e7b0      	b.n	2fe2e <ip_interface_getopt+0x56>
   2fecc:	202a      	movs	r0, #42	; 0x2a
   2fece:	f7f9 fd33 	bl	29938 <bsd_os_errno_set>
   2fed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fed6:	e7aa      	b.n	2fe2e <ip_interface_getopt+0x56>
   2fed8:	2009      	movs	r0, #9
   2feda:	f7f9 fd2d 	bl	29938 <bsd_os_errno_set>
   2fede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fee2:	e7a4      	b.n	2fe2e <ip_interface_getopt+0x56>

0002fee4 <ip_interface_getaddrinfo>:
   2fee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fee8:	f04f 0c00 	mov.w	ip, #0
   2feec:	2401      	movs	r4, #1
   2feee:	4e75      	ldr	r6, [pc, #468]	; (300c4 <ip_interface_getaddrinfo+0x1e0>)
   2fef0:	4d75      	ldr	r5, [pc, #468]	; (300c8 <ip_interface_getaddrinfo+0x1e4>)
   2fef2:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 300d8 <ip_interface_getaddrinfo+0x1f4>
   2fef6:	4f75      	ldr	r7, [pc, #468]	; (300cc <ip_interface_getaddrinfo+0x1e8>)
   2fef8:	7836      	ldrb	r6, [r6, #0]
   2fefa:	b085      	sub	sp, #20
   2fefc:	f8a5 c000 	strh.w	ip, [r5]
   2ff00:	f8c8 4000 	str.w	r4, [r8]
   2ff04:	603c      	str	r4, [r7, #0]
   2ff06:	2e00      	cmp	r6, #0
   2ff08:	d05b      	beq.n	2ffc2 <ip_interface_getaddrinfo+0xde>
   2ff0a:	9301      	str	r3, [sp, #4]
   2ff0c:	4614      	mov	r4, r2
   2ff0e:	460b      	mov	r3, r1
   2ff10:	4606      	mov	r6, r0
   2ff12:	b171      	cbz	r1, 2ff32 <ip_interface_getaddrinfo+0x4e>
   2ff14:	4618      	mov	r0, r3
   2ff16:	220a      	movs	r2, #10
   2ff18:	4661      	mov	r1, ip
   2ff1a:	f007 fa73 	bl	37404 <strtol>
   2ff1e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   2ff22:	1e42      	subs	r2, r0, #1
   2ff24:	429a      	cmp	r2, r3
   2ff26:	f200 8097 	bhi.w	30058 <ip_interface_getaddrinfo+0x174>
   2ff2a:	0203      	lsls	r3, r0, #8
   2ff2c:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   2ff30:	8028      	strh	r0, [r5, #0]
   2ff32:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 300dc <ip_interface_getaddrinfo+0x1f8>
   2ff36:	f8da 3000 	ldr.w	r3, [sl]
   2ff3a:	2b00      	cmp	r3, #0
   2ff3c:	d145      	bne.n	2ffca <ip_interface_getaddrinfo+0xe6>
   2ff3e:	4a64      	ldr	r2, [pc, #400]	; (300d0 <ip_interface_getaddrinfo+0x1ec>)
   2ff40:	6013      	str	r3, [r2, #0]
   2ff42:	4a64      	ldr	r2, [pc, #400]	; (300d4 <ip_interface_getaddrinfo+0x1f0>)
   2ff44:	6013      	str	r3, [r2, #0]
   2ff46:	2e00      	cmp	r6, #0
   2ff48:	d07a      	beq.n	30040 <ip_interface_getaddrinfo+0x15c>
   2ff4a:	4630      	mov	r0, r6
   2ff4c:	f7ed f890 	bl	1d070 <strlen>
   2ff50:	4683      	mov	fp, r0
   2ff52:	b144      	cbz	r4, 2ff66 <ip_interface_getaddrinfo+0x82>
   2ff54:	69e2      	ldr	r2, [r4, #28]
   2ff56:	b132      	cbz	r2, 2ff66 <ip_interface_getaddrinfo+0x82>
   2ff58:	6851      	ldr	r1, [r2, #4]
   2ff5a:	2966      	cmp	r1, #102	; 0x66
   2ff5c:	d103      	bne.n	2ff66 <ip_interface_getaddrinfo+0x82>
   2ff5e:	6891      	ldr	r1, [r2, #8]
   2ff60:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2ff64:	d07e      	beq.n	30064 <ip_interface_getaddrinfo+0x180>
   2ff66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ff6a:	2100      	movs	r1, #0
   2ff6c:	f10d 0910 	add.w	r9, sp, #16
   2ff70:	f849 1d04 	str.w	r1, [r9, #-4]!
   2ff74:	4648      	mov	r0, r9
   2ff76:	4659      	mov	r1, fp
   2ff78:	9200      	str	r2, [sp, #0]
   2ff7a:	f7fe fdb1 	bl	2eae0 <rpc_ip_client_request_alloc>
   2ff7e:	9a00      	ldr	r2, [sp, #0]
   2ff80:	2800      	cmp	r0, #0
   2ff82:	d15f      	bne.n	30044 <ip_interface_getaddrinfo+0x160>
   2ff84:	f247 010d 	movw	r1, #28685	; 0x700d
   2ff88:	f04f 0c08 	mov.w	ip, #8
   2ff8c:	9d03      	ldr	r5, [sp, #12]
   2ff8e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   2ff92:	60e9      	str	r1, [r5, #12]
   2ff94:	612a      	str	r2, [r5, #16]
   2ff96:	7268      	strb	r0, [r5, #9]
   2ff98:	72a8      	strb	r0, [r5, #10]
   2ff9a:	72e8      	strb	r0, [r5, #11]
   2ff9c:	f885 c008 	strb.w	ip, [r5, #8]
   2ffa0:	2c00      	cmp	r4, #0
   2ffa2:	d076      	beq.n	30092 <ip_interface_getaddrinfo+0x1ae>
   2ffa4:	6862      	ldr	r2, [r4, #4]
   2ffa6:	f022 0108 	bic.w	r1, r2, #8
   2ffaa:	2902      	cmp	r1, #2
   2ffac:	d011      	beq.n	2ffd2 <ip_interface_getaddrinfo+0xee>
   2ffae:	2a05      	cmp	r2, #5
   2ffb0:	d176      	bne.n	300a0 <ip_interface_getaddrinfo+0x1bc>
   2ffb2:	68a1      	ldr	r1, [r4, #8]
   2ffb4:	2902      	cmp	r1, #2
   2ffb6:	6039      	str	r1, [r7, #0]
   2ffb8:	d115      	bne.n	2ffe6 <ip_interface_getaddrinfo+0x102>
   2ffba:	2102      	movs	r1, #2
   2ffbc:	f8c8 1000 	str.w	r1, [r8]
   2ffc0:	e00b      	b.n	2ffda <ip_interface_getaddrinfo+0xf6>
   2ffc2:	2070      	movs	r0, #112	; 0x70
   2ffc4:	b005      	add	sp, #20
   2ffc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ffca:	2073      	movs	r0, #115	; 0x73
   2ffcc:	b005      	add	sp, #20
   2ffce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ffd2:	68a1      	ldr	r1, [r4, #8]
   2ffd4:	2902      	cmp	r1, #2
   2ffd6:	6039      	str	r1, [r7, #0]
   2ffd8:	d0ef      	beq.n	2ffba <ip_interface_getaddrinfo+0xd6>
   2ffda:	2a05      	cmp	r2, #5
   2ffdc:	d003      	beq.n	2ffe6 <ip_interface_getaddrinfo+0x102>
   2ffde:	2a0a      	cmp	r2, #10
   2ffe0:	bf14      	ite	ne
   2ffe2:	2201      	movne	r2, #1
   2ffe4:	2202      	moveq	r2, #2
   2ffe6:	61aa      	str	r2, [r5, #24]
   2ffe8:	68e2      	ldr	r2, [r4, #12]
   2ffea:	622a      	str	r2, [r5, #32]
   2ffec:	68a2      	ldr	r2, [r4, #8]
   2ffee:	61ea      	str	r2, [r5, #28]
   2fff0:	6822      	ldr	r2, [r4, #0]
   2fff2:	616a      	str	r2, [r5, #20]
   2fff4:	68aa      	ldr	r2, [r5, #8]
   2fff6:	3210      	adds	r2, #16
   2fff8:	60aa      	str	r2, [r5, #8]
   2fffa:	b12e      	cbz	r6, 30008 <ip_interface_getaddrinfo+0x124>
   2fffc:	6828      	ldr	r0, [r5, #0]
   2fffe:	b118      	cbz	r0, 30008 <ip_interface_getaddrinfo+0x124>
   30000:	465a      	mov	r2, fp
   30002:	4631      	mov	r1, r6
   30004:	f00b f9d5 	bl	3b3b2 <memcpy>
   30008:	2301      	movs	r3, #1
   3000a:	f247 010d 	movw	r1, #28685	; 0x700d
   3000e:	4628      	mov	r0, r5
   30010:	f8ca 3000 	str.w	r3, [sl]
   30014:	f7fe fd78 	bl	2eb08 <rpc_ip_client_request_send>
   30018:	bb10      	cbnz	r0, 30060 <ip_interface_getaddrinfo+0x17c>
   3001a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3001e:	9303      	str	r3, [sp, #12]
   30020:	4649      	mov	r1, r9
   30022:	4628      	mov	r0, r5
   30024:	f7f9 fbd0 	bl	297c8 <bsd_os_timedwait>
   30028:	f8da 3000 	ldr.w	r3, [sl]
   3002c:	2b01      	cmp	r3, #1
   3002e:	d0f7      	beq.n	30020 <ip_interface_getaddrinfo+0x13c>
   30030:	4b28      	ldr	r3, [pc, #160]	; (300d4 <ip_interface_getaddrinfo+0x1f0>)
   30032:	6818      	ldr	r0, [r3, #0]
   30034:	bb40      	cbnz	r0, 30088 <ip_interface_getaddrinfo+0x1a4>
   30036:	4b26      	ldr	r3, [pc, #152]	; (300d0 <ip_interface_getaddrinfo+0x1ec>)
   30038:	9a01      	ldr	r2, [sp, #4]
   3003a:	681b      	ldr	r3, [r3, #0]
   3003c:	6013      	str	r3, [r2, #0]
   3003e:	e7c1      	b.n	2ffc4 <ip_interface_getaddrinfo+0xe0>
   30040:	46b3      	mov	fp, r6
   30042:	e786      	b.n	2ff52 <ip_interface_getaddrinfo+0x6e>
   30044:	9d03      	ldr	r5, [sp, #12]
   30046:	2d00      	cmp	r5, #0
   30048:	d1aa      	bne.n	2ffa0 <ip_interface_getaddrinfo+0xbc>
   3004a:	200c      	movs	r0, #12
   3004c:	2300      	movs	r3, #0
   3004e:	f8ca 3000 	str.w	r3, [sl]
   30052:	b005      	add	sp, #20
   30054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30058:	2016      	movs	r0, #22
   3005a:	b005      	add	sp, #20
   3005c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30060:	2023      	movs	r0, #35	; 0x23
   30062:	e7f3      	b.n	3004c <ip_interface_getaddrinfo+0x168>
   30064:	f240 2002 	movw	r0, #514	; 0x202
   30068:	68d1      	ldr	r1, [r2, #12]
   3006a:	4281      	cmp	r1, r0
   3006c:	f47f af7b 	bne.w	2ff66 <ip_interface_getaddrinfo+0x82>
   30070:	6991      	ldr	r1, [r2, #24]
   30072:	2900      	cmp	r1, #0
   30074:	f43f af77 	beq.w	2ff66 <ip_interface_getaddrinfo+0x82>
   30078:	6860      	ldr	r0, [r4, #4]
   3007a:	f002 fc0b 	bl	32894 <pdn_interface_pdn_id_get>
   3007e:	1c43      	adds	r3, r0, #1
   30080:	f43f af71 	beq.w	2ff66 <ip_interface_getaddrinfo+0x82>
   30084:	4602      	mov	r2, r0
   30086:	e770      	b.n	2ff6a <ip_interface_getaddrinfo+0x86>
   30088:	4b12      	ldr	r3, [pc, #72]	; (300d4 <ip_interface_getaddrinfo+0x1f0>)
   3008a:	6818      	ldr	r0, [r3, #0]
   3008c:	2800      	cmp	r0, #0
   3008e:	d099      	beq.n	2ffc4 <ip_interface_getaddrinfo+0xe0>
   30090:	e7dc      	b.n	3004c <ip_interface_getaddrinfo+0x168>
   30092:	4621      	mov	r1, r4
   30094:	2210      	movs	r2, #16
   30096:	f105 0014 	add.w	r0, r5, #20
   3009a:	f00b f9aa 	bl	3b3f2 <memset>
   3009e:	e7a9      	b.n	2fff4 <ip_interface_getaddrinfo+0x110>
   300a0:	202f      	movs	r0, #47	; 0x2f
   300a2:	f7f9 fc49 	bl	29938 <bsd_os_errno_set>
   300a6:	68aa      	ldr	r2, [r5, #8]
   300a8:	3210      	adds	r2, #16
   300aa:	60aa      	str	r2, [r5, #8]
   300ac:	b916      	cbnz	r6, 300b4 <ip_interface_getaddrinfo+0x1d0>
   300ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   300b2:	e7cb      	b.n	3004c <ip_interface_getaddrinfo+0x168>
   300b4:	6828      	ldr	r0, [r5, #0]
   300b6:	2800      	cmp	r0, #0
   300b8:	d0f9      	beq.n	300ae <ip_interface_getaddrinfo+0x1ca>
   300ba:	465a      	mov	r2, fp
   300bc:	4631      	mov	r1, r6
   300be:	f00b f978 	bl	3b3b2 <memcpy>
   300c2:	e7f4      	b.n	300ae <ip_interface_getaddrinfo+0x1ca>
   300c4:	2002cb98 	.word	0x2002cb98
   300c8:	2002894a 	.word	0x2002894a
   300cc:	20023cac 	.word	0x20023cac
   300d0:	20023cb8 	.word	0x20023cb8
   300d4:	20023cb0 	.word	0x20023cb0
   300d8:	20023ca8 	.word	0x20023ca8
   300dc:	20023cb4 	.word	0x20023cb4

000300e0 <ip_interface_freeaddrinfo>:
   300e0:	b538      	push	{r3, r4, r5, lr}
   300e2:	4d0b      	ldr	r5, [pc, #44]	; (30110 <ip_interface_freeaddrinfo+0x30>)
   300e4:	682b      	ldr	r3, [r5, #0]
   300e6:	2b02      	cmp	r3, #2
   300e8:	d000      	beq.n	300ec <ip_interface_freeaddrinfo+0xc>
   300ea:	bd38      	pop	{r3, r4, r5, pc}
   300ec:	b150      	cbz	r0, 30104 <ip_interface_freeaddrinfo+0x24>
   300ee:	4604      	mov	r4, r0
   300f0:	6940      	ldr	r0, [r0, #20]
   300f2:	f004 f94d 	bl	34390 <nrf_free>
   300f6:	69a0      	ldr	r0, [r4, #24]
   300f8:	b108      	cbz	r0, 300fe <ip_interface_freeaddrinfo+0x1e>
   300fa:	f004 f949 	bl	34390 <nrf_free>
   300fe:	4620      	mov	r0, r4
   30100:	f004 f946 	bl	34390 <nrf_free>
   30104:	2300      	movs	r3, #0
   30106:	4a03      	ldr	r2, [pc, #12]	; (30114 <ip_interface_freeaddrinfo+0x34>)
   30108:	602b      	str	r3, [r5, #0]
   3010a:	6013      	str	r3, [r2, #0]
   3010c:	bd38      	pop	{r3, r4, r5, pc}
   3010e:	bf00      	nop
   30110:	20023cb4 	.word	0x20023cb4
   30114:	20023cb0 	.word	0x20023cb0

00030118 <rpc_ip_event_handler>:
   30118:	f248 030d 	movw	r3, #32781	; 0x800d
   3011c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30120:	4299      	cmp	r1, r3
   30122:	b089      	sub	sp, #36	; 0x24
   30124:	4604      	mov	r4, r0
   30126:	d05c      	beq.n	301e2 <rpc_ip_event_handler+0xca>
   30128:	f248 030f 	movw	r3, #32783	; 0x800f
   3012c:	4299      	cmp	r1, r3
   3012e:	460d      	mov	r5, r1
   30130:	d045      	beq.n	301be <rpc_ip_event_handler+0xa6>
   30132:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   30136:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   3013a:	68c0      	ldr	r0, [r0, #12]
   3013c:	d075      	beq.n	3022a <rpc_ip_event_handler+0x112>
   3013e:	0c06      	lsrs	r6, r0, #16
   30140:	4630      	mov	r0, r6
   30142:	f004 fe23 	bl	34d8c <interface_socket_from_handle_get>
   30146:	4607      	mov	r7, r0
   30148:	2800      	cmp	r0, #0
   3014a:	d059      	beq.n	30200 <rpc_ip_event_handler+0xe8>
   3014c:	4601      	mov	r1, r0
   3014e:	462b      	mov	r3, r5
   30150:	4622      	mov	r2, r4
   30152:	4630      	mov	r0, r6
   30154:	f7fe fc36 	bl	2e9c4 <tls_rpc_ip_event_handler>
   30158:	2800      	cmp	r0, #0
   3015a:	d04d      	beq.n	301f8 <rpc_ip_event_handler+0xe0>
   3015c:	f248 0307 	movw	r3, #32775	; 0x8007
   30160:	429d      	cmp	r5, r3
   30162:	d866      	bhi.n	30232 <rpc_ip_event_handler+0x11a>
   30164:	f248 0306 	movw	r3, #32774	; 0x8006
   30168:	429d      	cmp	r5, r3
   3016a:	f080 81e7 	bcs.w	3053c <rpc_ip_event_handler+0x424>
   3016e:	f248 0303 	movw	r3, #32771	; 0x8003
   30172:	429d      	cmp	r5, r3
   30174:	f000 81c5 	beq.w	30502 <rpc_ip_event_handler+0x3ea>
   30178:	f200 811b 	bhi.w	303b2 <rpc_ip_event_handler+0x29a>
   3017c:	f248 0301 	movw	r3, #32769	; 0x8001
   30180:	429d      	cmp	r5, r3
   30182:	f000 8154 	beq.w	3042e <rpc_ip_event_handler+0x316>
   30186:	f248 0302 	movw	r3, #32770	; 0x8002
   3018a:	429d      	cmp	r5, r3
   3018c:	d138      	bne.n	30200 <rpc_ip_event_handler+0xe8>
   3018e:	683b      	ldr	r3, [r7, #0]
   30190:	0098      	lsls	r0, r3, #2
   30192:	d531      	bpl.n	301f8 <rpc_ip_event_handler+0xe0>
   30194:	683b      	ldr	r3, [r7, #0]
   30196:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   3019a:	603b      	str	r3, [r7, #0]
   3019c:	6963      	ldr	r3, [r4, #20]
   3019e:	2b00      	cmp	r3, #0
   301a0:	f000 81ea 	beq.w	30578 <rpc_ip_event_handler+0x460>
   301a4:	2b10      	cmp	r3, #16
   301a6:	bf8e      	itee	hi
   301a8:	232d      	movhi	r3, #45	; 0x2d
   301aa:	4ab9      	ldrls	r2, [pc, #740]	; (30490 <rpc_ip_event_handler+0x378>)
   301ac:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   301b0:	607b      	str	r3, [r7, #4]
   301b2:	683b      	ldr	r3, [r7, #0]
   301b4:	2000      	movs	r0, #0
   301b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   301ba:	603b      	str	r3, [r7, #0]
   301bc:	e00e      	b.n	301dc <rpc_ip_event_handler+0xc4>
   301be:	6943      	ldr	r3, [r0, #20]
   301c0:	2001      	movs	r0, #1
   301c2:	2b10      	cmp	r3, #16
   301c4:	49b3      	ldr	r1, [pc, #716]	; (30494 <rpc_ip_event_handler+0x37c>)
   301c6:	bf88      	it	hi
   301c8:	222d      	movhi	r2, #45	; 0x2d
   301ca:	7008      	strb	r0, [r1, #0]
   301cc:	f04f 0000 	mov.w	r0, #0
   301d0:	bf9c      	itt	ls
   301d2:	4aaf      	ldrls	r2, [pc, #700]	; (30490 <rpc_ip_event_handler+0x378>)
   301d4:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   301d8:	4baf      	ldr	r3, [pc, #700]	; (30498 <rpc_ip_event_handler+0x380>)
   301da:	601a      	str	r2, [r3, #0]
   301dc:	b009      	add	sp, #36	; 0x24
   301de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   301e2:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 304ac <rpc_ip_event_handler+0x394>
   301e6:	6807      	ldr	r7, [r0, #0]
   301e8:	f8da 2000 	ldr.w	r2, [sl]
   301ec:	2a01      	cmp	r2, #1
   301ee:	d00b      	beq.n	30208 <rpc_ip_event_handler+0xf0>
   301f0:	b117      	cbz	r7, 301f8 <rpc_ip_event_handler+0xe0>
   301f2:	4638      	mov	r0, r7
   301f4:	f7fe fca6 	bl	2eb44 <rpc_ip_client_data_free>
   301f8:	2000      	movs	r0, #0
   301fa:	b009      	add	sp, #36	; 0x24
   301fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30200:	6820      	ldr	r0, [r4, #0]
   30202:	2800      	cmp	r0, #0
   30204:	d1f6      	bne.n	301f4 <rpc_ip_event_handler+0xdc>
   30206:	e7f7      	b.n	301f8 <rpc_ip_event_handler+0xe0>
   30208:	6942      	ldr	r2, [r0, #20]
   3020a:	2a00      	cmp	r2, #0
   3020c:	d045      	beq.n	3029a <rpc_ip_event_handler+0x182>
   3020e:	2a10      	cmp	r2, #16
   30210:	bf8e      	itee	hi
   30212:	222d      	movhi	r2, #45	; 0x2d
   30214:	499e      	ldrls	r1, [pc, #632]	; (30490 <rpc_ip_event_handler+0x378>)
   30216:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   3021a:	49a0      	ldr	r1, [pc, #640]	; (3049c <rpc_ip_event_handler+0x384>)
   3021c:	600a      	str	r2, [r1, #0]
   3021e:	2202      	movs	r2, #2
   30220:	f8ca 2000 	str.w	r2, [sl]
   30224:	2f00      	cmp	r7, #0
   30226:	d1e4      	bne.n	301f2 <rpc_ip_event_handler+0xda>
   30228:	e7e6      	b.n	301f8 <rpc_ip_event_handler+0xe0>
   3022a:	f004 fd5d 	bl	34ce8 <interface_from_internal_id_search>
   3022e:	4606      	mov	r6, r0
   30230:	e786      	b.n	30140 <rpc_ip_event_handler+0x28>
   30232:	f248 030c 	movw	r3, #32780	; 0x800c
   30236:	429d      	cmp	r5, r3
   30238:	f000 813c 	beq.w	304b4 <rpc_ip_event_handler+0x39c>
   3023c:	f240 80d5 	bls.w	303ea <rpc_ip_event_handler+0x2d2>
   30240:	f249 0302 	movw	r3, #36866	; 0x9002
   30244:	429d      	cmp	r5, r3
   30246:	f000 811d 	beq.w	30484 <rpc_ip_event_handler+0x36c>
   3024a:	f249 0303 	movw	r3, #36867	; 0x9003
   3024e:	429d      	cmp	r5, r3
   30250:	f000 80f9 	beq.w	30446 <rpc_ip_event_handler+0x32e>
   30254:	f249 0301 	movw	r3, #36865	; 0x9001
   30258:	429d      	cmp	r5, r3
   3025a:	d1d1      	bne.n	30200 <rpc_ip_event_handler+0xe8>
   3025c:	683d      	ldr	r5, [r7, #0]
   3025e:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   30262:	f000 8184 	beq.w	3056e <rpc_ip_event_handler+0x456>
   30266:	68a3      	ldr	r3, [r4, #8]
   30268:	2b04      	cmp	r3, #4
   3026a:	f200 81af 	bhi.w	305cc <rpc_ip_event_handler+0x4b4>
   3026e:	2500      	movs	r5, #0
   30270:	462e      	mov	r6, r5
   30272:	6821      	ldr	r1, [r4, #0]
   30274:	6862      	ldr	r2, [r4, #4]
   30276:	e9cd 6506 	strd	r6, r5, [sp, #24]
   3027a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   3027e:	69f8      	ldr	r0, [r7, #28]
   30280:	a904      	add	r1, sp, #16
   30282:	6803      	ldr	r3, [r0, #0]
   30284:	685b      	ldr	r3, [r3, #4]
   30286:	4798      	blx	r3
   30288:	3001      	adds	r0, #1
   3028a:	f000 818e 	beq.w	305aa <rpc_ip_event_handler+0x492>
   3028e:	683b      	ldr	r3, [r7, #0]
   30290:	2000      	movs	r0, #0
   30292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   30296:	603b      	str	r3, [r7, #0]
   30298:	e7a0      	b.n	301dc <rpc_ip_event_handler+0xc4>
   3029a:	6985      	ldr	r5, [r0, #24]
   3029c:	016b      	lsls	r3, r5, #5
   3029e:	4618      	mov	r0, r3
   302a0:	9303      	str	r3, [sp, #12]
   302a2:	f004 f86b 	bl	3437c <nrf_malloc>
   302a6:	9002      	str	r0, [sp, #8]
   302a8:	2800      	cmp	r0, #0
   302aa:	d078      	beq.n	3039e <rpc_ip_event_handler+0x286>
   302ac:	00ee      	lsls	r6, r5, #3
   302ae:	1970      	adds	r0, r6, r5
   302b0:	0080      	lsls	r0, r0, #2
   302b2:	f004 f863 	bl	3437c <nrf_malloc>
   302b6:	2800      	cmp	r0, #0
   302b8:	d073      	beq.n	303a2 <rpc_ip_event_handler+0x28a>
   302ba:	2d00      	cmp	r5, #0
   302bc:	d074      	beq.n	303a8 <rpc_ip_event_handler+0x290>
   302be:	3610      	adds	r6, #16
   302c0:	1983      	adds	r3, r0, r6
   302c2:	9301      	str	r3, [sp, #4]
   302c4:	9b02      	ldr	r3, [sp, #8]
   302c6:	2204      	movs	r2, #4
   302c8:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 304b0 <rpc_ip_event_handler+0x398>
   302cc:	f100 0810 	add.w	r8, r0, #16
   302d0:	f103 0520 	add.w	r5, r3, #32
   302d4:	e013      	b.n	302fe <rpc_ip_event_handler+0x1e6>
   302d6:	464a      	mov	r2, r9
   302d8:	f00b f86b 	bl	3b3b2 <memcpy>
   302dc:	2100      	movs	r1, #0
   302de:	f855 3c08 	ldr.w	r3, [r5, #-8]
   302e2:	f108 0808 	add.w	r8, r8, #8
   302e6:	eb09 0206 	add.w	r2, r9, r6
   302ea:	f803 1009 	strb.w	r1, [r3, r9]
   302ee:	9b01      	ldr	r3, [sp, #4]
   302f0:	f845 5c04 	str.w	r5, [r5, #-4]
   302f4:	4598      	cmp	r8, r3
   302f6:	f105 0520 	add.w	r5, r5, #32
   302fa:	f000 8090 	beq.w	3041e <rpc_ip_event_handler+0x306>
   302fe:	58bb      	ldr	r3, [r7, r2]
   30300:	18b9      	adds	r1, r7, r2
   30302:	f845 3c20 	str.w	r3, [r5, #-32]
   30306:	684b      	ldr	r3, [r1, #4]
   30308:	f8db 0000 	ldr.w	r0, [fp]
   3030c:	2b02      	cmp	r3, #2
   3030e:	bf14      	ite	ne
   30310:	2602      	movne	r6, #2
   30312:	260a      	moveq	r6, #10
   30314:	4b62      	ldr	r3, [pc, #392]	; (304a0 <rpc_ip_event_handler+0x388>)
   30316:	e945 6007 	strd	r6, r0, [r5, #-28]
   3031a:	681b      	ldr	r3, [r3, #0]
   3031c:	f102 0614 	add.w	r6, r2, #20
   30320:	f845 3c14 	str.w	r3, [r5, #-20]
   30324:	8a08      	ldrh	r0, [r1, #16]
   30326:	f1a8 0310 	sub.w	r3, r8, #16
   3032a:	f845 0c10 	str.w	r0, [r5, #-16]
   3032e:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   30332:	f845 3c0c 	str.w	r3, [r5, #-12]
   30336:	4b5b      	ldr	r3, [pc, #364]	; (304a4 <rpc_ip_event_handler+0x38c>)
   30338:	2804      	cmp	r0, #4
   3033a:	eb07 0106 	add.w	r1, r7, r6
   3033e:	881b      	ldrh	r3, [r3, #0]
   30340:	d01e      	beq.n	30380 <rpc_ip_event_handler+0x268>
   30342:	220a      	movs	r2, #10
   30344:	f848 2c0c 	str.w	r2, [r8, #-12]
   30348:	f04f 0224 	mov.w	r2, #36	; 0x24
   3034c:	f828 3c08 	strh.w	r3, [r8, #-8]
   30350:	f808 2c10 	strb.w	r2, [r8, #-16]
   30354:	f855 2c10 	ldr.w	r2, [r5, #-16]
   30358:	4640      	mov	r0, r8
   3035a:	f00b f82a 	bl	3b3b2 <memcpy>
   3035e:	f855 3c10 	ldr.w	r3, [r5, #-16]
   30362:	f109 0001 	add.w	r0, r9, #1
   30366:	441e      	add	r6, r3
   30368:	f004 f808 	bl	3437c <nrf_malloc>
   3036c:	19b9      	adds	r1, r7, r6
   3036e:	eb09 0206 	add.w	r2, r9, r6
   30372:	f845 0c08 	str.w	r0, [r5, #-8]
   30376:	2800      	cmp	r0, #0
   30378:	d1ad      	bne.n	302d6 <rpc_ip_event_handler+0x1be>
   3037a:	f108 0808 	add.w	r8, r8, #8
   3037e:	e7b6      	b.n	302ee <rpc_ip_event_handler+0x1d6>
   30380:	2210      	movs	r2, #16
   30382:	2002      	movs	r0, #2
   30384:	f828 3c08 	strh.w	r3, [r8, #-8]
   30388:	f848 0c0c 	str.w	r0, [r8, #-12]
   3038c:	f808 2c10 	strb.w	r2, [r8, #-16]
   30390:	f855 2c10 	ldr.w	r2, [r5, #-16]
   30394:	f1a8 0004 	sub.w	r0, r8, #4
   30398:	f00b f80b 	bl	3b3b2 <memcpy>
   3039c:	e7df      	b.n	3035e <rpc_ip_event_handler+0x246>
   3039e:	f003 fff7 	bl	34390 <nrf_free>
   303a2:	210c      	movs	r1, #12
   303a4:	4a3d      	ldr	r2, [pc, #244]	; (3049c <rpc_ip_event_handler+0x384>)
   303a6:	6011      	str	r1, [r2, #0]
   303a8:	9b02      	ldr	r3, [sp, #8]
   303aa:	4a3f      	ldr	r2, [pc, #252]	; (304a8 <rpc_ip_event_handler+0x390>)
   303ac:	6827      	ldr	r7, [r4, #0]
   303ae:	6013      	str	r3, [r2, #0]
   303b0:	e735      	b.n	3021e <rpc_ip_event_handler+0x106>
   303b2:	f248 0304 	movw	r3, #32772	; 0x8004
   303b6:	429d      	cmp	r5, r3
   303b8:	f000 808f 	beq.w	304da <rpc_ip_event_handler+0x3c2>
   303bc:	f248 0305 	movw	r3, #32773	; 0x8005
   303c0:	429d      	cmp	r5, r3
   303c2:	f47f af1d 	bne.w	30200 <rpc_ip_event_handler+0xe8>
   303c6:	683b      	ldr	r3, [r7, #0]
   303c8:	b29b      	uxth	r3, r3
   303ca:	2b03      	cmp	r3, #3
   303cc:	f47f af14 	bne.w	301f8 <rpc_ip_event_handler+0xe0>
   303d0:	6963      	ldr	r3, [r4, #20]
   303d2:	2b00      	cmp	r3, #0
   303d4:	f000 80eb 	beq.w	305ae <rpc_ip_event_handler+0x496>
   303d8:	2b10      	cmp	r3, #16
   303da:	f200 80bd 	bhi.w	30558 <rpc_ip_event_handler+0x440>
   303de:	4a2c      	ldr	r2, [pc, #176]	; (30490 <rpc_ip_event_handler+0x378>)
   303e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   303e4:	607b      	str	r3, [r7, #4]
   303e6:	2000      	movs	r0, #0
   303e8:	e6f8      	b.n	301dc <rpc_ip_event_handler+0xc4>
   303ea:	f248 0308 	movw	r3, #32776	; 0x8008
   303ee:	429d      	cmp	r5, r3
   303f0:	f000 8094 	beq.w	3051c <rpc_ip_event_handler+0x404>
   303f4:	f248 0309 	movw	r3, #32777	; 0x8009
   303f8:	429d      	cmp	r5, r3
   303fa:	f47f af01 	bne.w	30200 <rpc_ip_event_handler+0xe8>
   303fe:	683b      	ldr	r3, [r7, #0]
   30400:	b29b      	uxth	r3, r3
   30402:	2b0d      	cmp	r3, #13
   30404:	f47f aef8 	bne.w	301f8 <rpc_ip_event_handler+0xe0>
   30408:	6960      	ldr	r0, [r4, #20]
   3040a:	2800      	cmp	r0, #0
   3040c:	f000 80d7 	beq.w	305be <rpc_ip_event_handler+0x4a6>
   30410:	2810      	cmp	r0, #16
   30412:	f200 80a1 	bhi.w	30558 <rpc_ip_event_handler+0x440>
   30416:	4b1e      	ldr	r3, [pc, #120]	; (30490 <rpc_ip_event_handler+0x378>)
   30418:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   3041c:	e7e2      	b.n	303e4 <rpc_ip_event_handler+0x2cc>
   3041e:	2100      	movs	r1, #0
   30420:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   30424:	4403      	add	r3, r0
   30426:	f843 1c04 	str.w	r1, [r3, #-4]
   3042a:	4603      	mov	r3, r0
   3042c:	e7bd      	b.n	303aa <rpc_ip_event_handler+0x292>
   3042e:	683b      	ldr	r3, [r7, #0]
   30430:	2b01      	cmp	r3, #1
   30432:	f47f aee1 	bne.w	301f8 <rpc_ip_event_handler+0xe0>
   30436:	6960      	ldr	r0, [r4, #20]
   30438:	2800      	cmp	r0, #0
   3043a:	d1e9      	bne.n	30410 <rpc_ip_event_handler+0x2f8>
   3043c:	2302      	movs	r3, #2
   3043e:	603b      	str	r3, [r7, #0]
   30440:	69a3      	ldr	r3, [r4, #24]
   30442:	61bb      	str	r3, [r7, #24]
   30444:	e6ca      	b.n	301dc <rpc_ip_event_handler+0xc4>
   30446:	683b      	ldr	r3, [r7, #0]
   30448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   3044c:	603b      	str	r3, [r7, #0]
   3044e:	683b      	ldr	r3, [r7, #0]
   30450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   30454:	603b      	str	r3, [r7, #0]
   30456:	683b      	ldr	r3, [r7, #0]
   30458:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   3045c:	603b      	str	r3, [r7, #0]
   3045e:	683b      	ldr	r3, [r7, #0]
   30460:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   30464:	603b      	str	r3, [r7, #0]
   30466:	6923      	ldr	r3, [r4, #16]
   30468:	2b6c      	cmp	r3, #108	; 0x6c
   3046a:	d077      	beq.n	3055c <rpc_ip_event_handler+0x444>
   3046c:	2b10      	cmp	r3, #16
   3046e:	bf8c      	ite	hi
   30470:	232d      	movhi	r3, #45	; 0x2d
   30472:	4a07      	ldrls	r2, [pc, #28]	; (30490 <rpc_ip_event_handler+0x378>)
   30474:	f04f 0000 	mov.w	r0, #0
   30478:	bf98      	it	ls
   3047a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   3047e:	607b      	str	r3, [r7, #4]
   30480:	60bb      	str	r3, [r7, #8]
   30482:	e6ab      	b.n	301dc <rpc_ip_event_handler+0xc4>
   30484:	683b      	ldr	r3, [r7, #0]
   30486:	b29b      	uxth	r3, r3
   30488:	2b07      	cmp	r3, #7
   3048a:	f47f aeb5 	bne.w	301f8 <rpc_ip_event_handler+0xe0>
   3048e:	e6fe      	b.n	3028e <rpc_ip_event_handler+0x176>
   30490:	0003cb1c 	.word	0x0003cb1c
   30494:	2002cb99 	.word	0x2002cb99
   30498:	20023ce0 	.word	0x20023ce0
   3049c:	20023cb0 	.word	0x20023cb0
   304a0:	20023ca8 	.word	0x20023ca8
   304a4:	2002894a 	.word	0x2002894a
   304a8:	20023cb8 	.word	0x20023cb8
   304ac:	20023cb4 	.word	0x20023cb4
   304b0:	20023cac 	.word	0x20023cac
   304b4:	683b      	ldr	r3, [r7, #0]
   304b6:	b29b      	uxth	r3, r3
   304b8:	2b08      	cmp	r3, #8
   304ba:	f47f ae9d 	bne.w	301f8 <rpc_ip_event_handler+0xe0>
   304be:	6963      	ldr	r3, [r4, #20]
   304c0:	2b00      	cmp	r3, #0
   304c2:	d189      	bne.n	303d8 <rpc_ip_event_handler+0x2c0>
   304c4:	4b5e      	ldr	r3, [pc, #376]	; (30640 <rpc_ip_event_handler+0x528>)
   304c6:	2001      	movs	r0, #1
   304c8:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   304cc:	683b      	ldr	r3, [r7, #0]
   304ce:	0c1b      	lsrs	r3, r3, #16
   304d0:	041b      	lsls	r3, r3, #16
   304d2:	f043 0309 	orr.w	r3, r3, #9
   304d6:	603b      	str	r3, [r7, #0]
   304d8:	e680      	b.n	301dc <rpc_ip_event_handler+0xc4>
   304da:	683b      	ldr	r3, [r7, #0]
   304dc:	01db      	lsls	r3, r3, #7
   304de:	f57f ae8b 	bpl.w	301f8 <rpc_ip_event_handler+0xe0>
   304e2:	6963      	ldr	r3, [r4, #20]
   304e4:	2b00      	cmp	r3, #0
   304e6:	f47f af77 	bne.w	303d8 <rpc_ip_event_handler+0x2c0>
   304ea:	6823      	ldr	r3, [r4, #0]
   304ec:	2b00      	cmp	r3, #0
   304ee:	d071      	beq.n	305d4 <rpc_ip_event_handler+0x4bc>
   304f0:	2001      	movs	r0, #1
   304f2:	4b53      	ldr	r3, [pc, #332]	; (30640 <rpc_ip_event_handler+0x528>)
   304f4:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   304f8:	683b      	ldr	r3, [r7, #0]
   304fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   304fe:	603b      	str	r3, [r7, #0]
   30500:	e66c      	b.n	301dc <rpc_ip_event_handler+0xc4>
   30502:	683b      	ldr	r3, [r7, #0]
   30504:	025a      	lsls	r2, r3, #9
   30506:	f57f ae77 	bpl.w	301f8 <rpc_ip_event_handler+0xe0>
   3050a:	6960      	ldr	r0, [r4, #20]
   3050c:	2800      	cmp	r0, #0
   3050e:	f47f af7f 	bne.w	30410 <rpc_ip_event_handler+0x2f8>
   30512:	683b      	ldr	r3, [r7, #0]
   30514:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   30518:	603b      	str	r3, [r7, #0]
   3051a:	e65f      	b.n	301dc <rpc_ip_event_handler+0xc4>
   3051c:	683b      	ldr	r3, [r7, #0]
   3051e:	b29b      	uxth	r3, r3
   30520:	2b06      	cmp	r3, #6
   30522:	f47f ae69 	bne.w	301f8 <rpc_ip_event_handler+0xe0>
   30526:	6960      	ldr	r0, [r4, #20]
   30528:	2800      	cmp	r0, #0
   3052a:	f47f af71 	bne.w	30410 <rpc_ip_event_handler+0x2f8>
   3052e:	683b      	ldr	r3, [r7, #0]
   30530:	0c1b      	lsrs	r3, r3, #16
   30532:	041b      	lsls	r3, r3, #16
   30534:	f043 0307 	orr.w	r3, r3, #7
   30538:	603b      	str	r3, [r7, #0]
   3053a:	e64f      	b.n	301dc <rpc_ip_event_handler+0xc4>
   3053c:	683b      	ldr	r3, [r7, #0]
   3053e:	0299      	lsls	r1, r3, #10
   30540:	f57f ae5a 	bpl.w	301f8 <rpc_ip_event_handler+0xe0>
   30544:	6963      	ldr	r3, [r4, #20]
   30546:	b33b      	cbz	r3, 30598 <rpc_ip_event_handler+0x480>
   30548:	2b6b      	cmp	r3, #107	; 0x6b
   3054a:	f47f ae2b 	bne.w	301a4 <rpc_ip_event_handler+0x8c>
   3054e:	693b      	ldr	r3, [r7, #16]
   30550:	2b01      	cmp	r3, #1
   30552:	d041      	beq.n	305d8 <rpc_ip_event_handler+0x4c0>
   30554:	230c      	movs	r3, #12
   30556:	e62b      	b.n	301b0 <rpc_ip_event_handler+0x98>
   30558:	232d      	movs	r3, #45	; 0x2d
   3055a:	e743      	b.n	303e4 <rpc_ip_event_handler+0x2cc>
   3055c:	2239      	movs	r2, #57	; 0x39
   3055e:	683b      	ldr	r3, [r7, #0]
   30560:	2000      	movs	r0, #0
   30562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   30566:	603b      	str	r3, [r7, #0]
   30568:	607a      	str	r2, [r7, #4]
   3056a:	60ba      	str	r2, [r7, #8]
   3056c:	e636      	b.n	301dc <rpc_ip_event_handler+0xc4>
   3056e:	6820      	ldr	r0, [r4, #0]
   30570:	f7fe fae8 	bl	2eb44 <rpc_ip_client_data_free>
   30574:	4628      	mov	r0, r5
   30576:	e631      	b.n	301dc <rpc_ip_event_handler+0xc4>
   30578:	683b      	ldr	r3, [r7, #0]
   3057a:	2000      	movs	r0, #0
   3057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   30580:	603b      	str	r3, [r7, #0]
   30582:	683b      	ldr	r3, [r7, #0]
   30584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   30588:	603b      	str	r3, [r7, #0]
   3058a:	683b      	ldr	r3, [r7, #0]
   3058c:	0c1b      	lsrs	r3, r3, #16
   3058e:	041b      	lsls	r3, r3, #16
   30590:	f043 0305 	orr.w	r3, r3, #5
   30594:	603b      	str	r3, [r7, #0]
   30596:	e621      	b.n	301dc <rpc_ip_event_handler+0xc4>
   30598:	683b      	ldr	r3, [r7, #0]
   3059a:	4a29      	ldr	r2, [pc, #164]	; (30640 <rpc_ip_event_handler+0x528>)
   3059c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   305a0:	603b      	str	r3, [r7, #0]
   305a2:	2001      	movs	r0, #1
   305a4:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   305a8:	e618      	b.n	301dc <rpc_ip_event_handler+0xc4>
   305aa:	2002      	movs	r0, #2
   305ac:	e616      	b.n	301dc <rpc_ip_event_handler+0xc4>
   305ae:	683b      	ldr	r3, [r7, #0]
   305b0:	2000      	movs	r0, #0
   305b2:	0c1b      	lsrs	r3, r3, #16
   305b4:	041b      	lsls	r3, r3, #16
   305b6:	f043 0304 	orr.w	r3, r3, #4
   305ba:	603b      	str	r3, [r7, #0]
   305bc:	e60e      	b.n	301dc <rpc_ip_event_handler+0xc4>
   305be:	683b      	ldr	r3, [r7, #0]
   305c0:	0c1b      	lsrs	r3, r3, #16
   305c2:	041b      	lsls	r3, r3, #16
   305c4:	f043 030e 	orr.w	r3, r3, #14
   305c8:	603b      	str	r3, [r7, #0]
   305ca:	e607      	b.n	301dc <rpc_ip_event_handler+0xc4>
   305cc:	8a65      	ldrh	r5, [r4, #18]
   305ce:	b95d      	cbnz	r5, 305e8 <rpc_ip_event_handler+0x4d0>
   305d0:	462e      	mov	r6, r5
   305d2:	e64e      	b.n	30272 <rpc_ip_event_handler+0x15a>
   305d4:	2000      	movs	r0, #0
   305d6:	e78f      	b.n	304f8 <rpc_ip_event_handler+0x3e0>
   305d8:	220c      	movs	r2, #12
   305da:	683b      	ldr	r3, [r7, #0]
   305dc:	2000      	movs	r0, #0
   305de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   305e2:	603b      	str	r3, [r7, #0]
   305e4:	607a      	str	r2, [r7, #4]
   305e6:	e5f9      	b.n	301dc <rpc_ip_event_handler+0xc4>
   305e8:	2024      	movs	r0, #36	; 0x24
   305ea:	f003 fec7 	bl	3437c <nrf_malloc>
   305ee:	4606      	mov	r6, r0
   305f0:	2800      	cmp	r0, #0
   305f2:	d0da      	beq.n	305aa <rpc_ip_event_handler+0x492>
   305f4:	8a62      	ldrh	r2, [r4, #18]
   305f6:	2a10      	cmp	r2, #16
   305f8:	d009      	beq.n	3060e <rpc_ip_event_handler+0x4f6>
   305fa:	2a04      	cmp	r2, #4
   305fc:	d013      	beq.n	30626 <rpc_ip_event_handler+0x50e>
   305fe:	6820      	ldr	r0, [r4, #0]
   30600:	f7fe faa0 	bl	2eb44 <rpc_ip_client_data_free>
   30604:	4630      	mov	r0, r6
   30606:	f003 fec3 	bl	34390 <nrf_free>
   3060a:	2000      	movs	r0, #0
   3060c:	e5e6      	b.n	301dc <rpc_ip_event_handler+0xc4>
   3060e:	230a      	movs	r3, #10
   30610:	2524      	movs	r5, #36	; 0x24
   30612:	6043      	str	r3, [r0, #4]
   30614:	7005      	strb	r5, [r0, #0]
   30616:	8a23      	ldrh	r3, [r4, #16]
   30618:	f104 0114 	add.w	r1, r4, #20
   3061c:	8103      	strh	r3, [r0, #8]
   3061e:	3010      	adds	r0, #16
   30620:	f00a fec7 	bl	3b3b2 <memcpy>
   30624:	e625      	b.n	30272 <rpc_ip_event_handler+0x15a>
   30626:	2302      	movs	r3, #2
   30628:	2510      	movs	r5, #16
   3062a:	6043      	str	r3, [r0, #4]
   3062c:	7005      	strb	r5, [r0, #0]
   3062e:	8a23      	ldrh	r3, [r4, #16]
   30630:	f104 0114 	add.w	r1, r4, #20
   30634:	8103      	strh	r3, [r0, #8]
   30636:	300c      	adds	r0, #12
   30638:	f00a febb 	bl	3b3b2 <memcpy>
   3063c:	e619      	b.n	30272 <rpc_ip_event_handler+0x15a>
   3063e:	bf00      	nop
   30640:	20023cbc 	.word	0x20023cbc

00030644 <rpc_handle_ctrl_message>:
   30644:	2902      	cmp	r1, #2
   30646:	b510      	push	{r4, lr}
   30648:	4604      	mov	r4, r0
   3064a:	d00c      	beq.n	30666 <rpc_handle_ctrl_message+0x22>
   3064c:	2904      	cmp	r1, #4
   3064e:	d008      	beq.n	30662 <rpc_handle_ctrl_message+0x1e>
   30650:	2901      	cmp	r1, #1
   30652:	d006      	beq.n	30662 <rpc_handle_ctrl_message+0x1e>
   30654:	6880      	ldr	r0, [r0, #8]
   30656:	b108      	cbz	r0, 3065c <rpc_handle_ctrl_message+0x18>
   30658:	f7fc fd32 	bl	2d0c0 <rpc_transport_data_free>
   3065c:	4620      	mov	r0, r4
   3065e:	f7fc fd2d 	bl	2d0bc <rpc_transport_rpc_free>
   30662:	2000      	movs	r0, #0
   30664:	bd10      	pop	{r4, pc}
   30666:	6880      	ldr	r0, [r0, #8]
   30668:	2800      	cmp	r0, #0
   3066a:	d0fa      	beq.n	30662 <rpc_handle_ctrl_message+0x1e>
   3066c:	f7fc fd28 	bl	2d0c0 <rpc_transport_data_free>
   30670:	2000      	movs	r0, #0
   30672:	bd10      	pop	{r4, pc}

00030674 <rpc_handle_data_message>:
   30674:	4b23      	ldr	r3, [pc, #140]	; (30704 <rpc_handle_data_message+0x90>)
   30676:	6802      	ldr	r2, [r0, #0]
   30678:	8819      	ldrh	r1, [r3, #0]
   3067a:	b292      	uxth	r2, r2
   3067c:	4291      	cmp	r1, r2
   3067e:	d027      	beq.n	306d0 <rpc_handle_data_message+0x5c>
   30680:	8a19      	ldrh	r1, [r3, #16]
   30682:	4291      	cmp	r1, r2
   30684:	d02a      	beq.n	306dc <rpc_handle_data_message+0x68>
   30686:	8c19      	ldrh	r1, [r3, #32]
   30688:	4291      	cmp	r1, r2
   3068a:	d02b      	beq.n	306e4 <rpc_handle_data_message+0x70>
   3068c:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   3068e:	4291      	cmp	r1, r2
   30690:	d02a      	beq.n	306e8 <rpc_handle_data_message+0x74>
   30692:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   30696:	4291      	cmp	r1, r2
   30698:	d028      	beq.n	306ec <rpc_handle_data_message+0x78>
   3069a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   3069e:	4291      	cmp	r1, r2
   306a0:	d026      	beq.n	306f0 <rpc_handle_data_message+0x7c>
   306a2:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   306a6:	4291      	cmp	r1, r2
   306a8:	d026      	beq.n	306f8 <rpc_handle_data_message+0x84>
   306aa:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   306ae:	4291      	cmp	r1, r2
   306b0:	d024      	beq.n	306fc <rpc_handle_data_message+0x88>
   306b2:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   306b6:	4291      	cmp	r1, r2
   306b8:	d01c      	beq.n	306f4 <rpc_handle_data_message+0x80>
   306ba:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   306be:	4291      	cmp	r1, r2
   306c0:	d01e      	beq.n	30700 <rpc_handle_data_message+0x8c>
   306c2:	6880      	ldr	r0, [r0, #8]
   306c4:	b160      	cbz	r0, 306e0 <rpc_handle_data_message+0x6c>
   306c6:	b510      	push	{r4, lr}
   306c8:	f7fc fcfa 	bl	2d0c0 <rpc_transport_data_free>
   306cc:	2000      	movs	r0, #0
   306ce:	bd10      	pop	{r4, pc}
   306d0:	2200      	movs	r2, #0
   306d2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   306d6:	685a      	ldr	r2, [r3, #4]
   306d8:	68d9      	ldr	r1, [r3, #12]
   306da:	4710      	bx	r2
   306dc:	2201      	movs	r2, #1
   306de:	e7f8      	b.n	306d2 <rpc_handle_data_message+0x5e>
   306e0:	2000      	movs	r0, #0
   306e2:	4770      	bx	lr
   306e4:	2202      	movs	r2, #2
   306e6:	e7f4      	b.n	306d2 <rpc_handle_data_message+0x5e>
   306e8:	2203      	movs	r2, #3
   306ea:	e7f2      	b.n	306d2 <rpc_handle_data_message+0x5e>
   306ec:	2204      	movs	r2, #4
   306ee:	e7f0      	b.n	306d2 <rpc_handle_data_message+0x5e>
   306f0:	2205      	movs	r2, #5
   306f2:	e7ee      	b.n	306d2 <rpc_handle_data_message+0x5e>
   306f4:	2208      	movs	r2, #8
   306f6:	e7ec      	b.n	306d2 <rpc_handle_data_message+0x5e>
   306f8:	2206      	movs	r2, #6
   306fa:	e7ea      	b.n	306d2 <rpc_handle_data_message+0x5e>
   306fc:	2207      	movs	r2, #7
   306fe:	e7e8      	b.n	306d2 <rpc_handle_data_message+0x5e>
   30700:	2209      	movs	r2, #9
   30702:	e7e6      	b.n	306d2 <rpc_handle_data_message+0x5e>
   30704:	20023ce4 	.word	0x20023ce4

00030708 <rpc_framework_init>:
   30708:	b508      	push	{r3, lr}
   3070a:	22a0      	movs	r2, #160	; 0xa0
   3070c:	2100      	movs	r1, #0
   3070e:	4802      	ldr	r0, [pc, #8]	; (30718 <rpc_framework_init+0x10>)
   30710:	f00a fe6f 	bl	3b3f2 <memset>
   30714:	2000      	movs	r0, #0
   30716:	bd08      	pop	{r3, pc}
   30718:	20023ce4 	.word	0x20023ce4

0003071c <rpc_client_register>:
   3071c:	8803      	ldrh	r3, [r0, #0]
   3071e:	2b00      	cmp	r3, #0
   30720:	d045      	beq.n	307ae <rpc_client_register+0x92>
   30722:	6842      	ldr	r2, [r0, #4]
   30724:	4601      	mov	r1, r0
   30726:	2a00      	cmp	r2, #0
   30728:	d050      	beq.n	307cc <rpc_client_register+0xb0>
   3072a:	4a30      	ldr	r2, [pc, #192]	; (307ec <rpc_client_register+0xd0>)
   3072c:	8810      	ldrh	r0, [r2, #0]
   3072e:	4283      	cmp	r3, r0
   30730:	d03d      	beq.n	307ae <rpc_client_register+0x92>
   30732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30736:	8a14      	ldrh	r4, [r2, #16]
   30738:	42a3      	cmp	r3, r4
   3073a:	d035      	beq.n	307a8 <rpc_client_register+0x8c>
   3073c:	8c15      	ldrh	r5, [r2, #32]
   3073e:	42ab      	cmp	r3, r5
   30740:	d032      	beq.n	307a8 <rpc_client_register+0x8c>
   30742:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   30744:	42b3      	cmp	r3, r6
   30746:	d02f      	beq.n	307a8 <rpc_client_register+0x8c>
   30748:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   3074c:	42bb      	cmp	r3, r7
   3074e:	d02b      	beq.n	307a8 <rpc_client_register+0x8c>
   30750:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   30754:	4563      	cmp	r3, ip
   30756:	d027      	beq.n	307a8 <rpc_client_register+0x8c>
   30758:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   3075c:	4573      	cmp	r3, lr
   3075e:	d023      	beq.n	307a8 <rpc_client_register+0x8c>
   30760:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   30764:	4543      	cmp	r3, r8
   30766:	d01f      	beq.n	307a8 <rpc_client_register+0x8c>
   30768:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   3076c:	454b      	cmp	r3, r9
   3076e:	d01b      	beq.n	307a8 <rpc_client_register+0x8c>
   30770:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   30774:	4553      	cmp	r3, sl
   30776:	d017      	beq.n	307a8 <rpc_client_register+0x8c>
   30778:	b1e0      	cbz	r0, 307b4 <rpc_client_register+0x98>
   3077a:	b35c      	cbz	r4, 307d4 <rpc_client_register+0xb8>
   3077c:	b365      	cbz	r5, 307d8 <rpc_client_register+0xbc>
   3077e:	b36e      	cbz	r6, 307dc <rpc_client_register+0xc0>
   30780:	b377      	cbz	r7, 307e0 <rpc_client_register+0xc4>
   30782:	f1bc 0f00 	cmp.w	ip, #0
   30786:	d02d      	beq.n	307e4 <rpc_client_register+0xc8>
   30788:	f1be 0f00 	cmp.w	lr, #0
   3078c:	d020      	beq.n	307d0 <rpc_client_register+0xb4>
   3078e:	f1b8 0f00 	cmp.w	r8, #0
   30792:	d029      	beq.n	307e8 <rpc_client_register+0xcc>
   30794:	f1b9 0f00 	cmp.w	r9, #0
   30798:	d00b      	beq.n	307b2 <rpc_client_register+0x96>
   3079a:	2009      	movs	r0, #9
   3079c:	f1ba 0f00 	cmp.w	sl, #0
   307a0:	d008      	beq.n	307b4 <rpc_client_register+0x98>
   307a2:	2004      	movs	r0, #4
   307a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   307a8:	2007      	movs	r0, #7
   307aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   307ae:	2007      	movs	r0, #7
   307b0:	4770      	bx	lr
   307b2:	2008      	movs	r0, #8
   307b4:	0100      	lsls	r0, r0, #4
   307b6:	5213      	strh	r3, [r2, r0]
   307b8:	684b      	ldr	r3, [r1, #4]
   307ba:	4402      	add	r2, r0
   307bc:	6053      	str	r3, [r2, #4]
   307be:	688b      	ldr	r3, [r1, #8]
   307c0:	2000      	movs	r0, #0
   307c2:	6093      	str	r3, [r2, #8]
   307c4:	68cb      	ldr	r3, [r1, #12]
   307c6:	60d3      	str	r3, [r2, #12]
   307c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   307cc:	200e      	movs	r0, #14
   307ce:	4770      	bx	lr
   307d0:	2006      	movs	r0, #6
   307d2:	e7ef      	b.n	307b4 <rpc_client_register+0x98>
   307d4:	2001      	movs	r0, #1
   307d6:	e7ed      	b.n	307b4 <rpc_client_register+0x98>
   307d8:	2002      	movs	r0, #2
   307da:	e7eb      	b.n	307b4 <rpc_client_register+0x98>
   307dc:	2003      	movs	r0, #3
   307de:	e7e9      	b.n	307b4 <rpc_client_register+0x98>
   307e0:	2004      	movs	r0, #4
   307e2:	e7e7      	b.n	307b4 <rpc_client_register+0x98>
   307e4:	2005      	movs	r0, #5
   307e6:	e7e5      	b.n	307b4 <rpc_client_register+0x98>
   307e8:	2007      	movs	r0, #7
   307ea:	e7e3      	b.n	307b4 <rpc_client_register+0x98>
   307ec:	20023ce4 	.word	0x20023ce4

000307f0 <rpc_message_send>:
   307f0:	b150      	cbz	r0, 30808 <rpc_message_send+0x18>
   307f2:	b159      	cbz	r1, 3080c <rpc_message_send+0x1c>
   307f4:	684b      	ldr	r3, [r1, #4]
   307f6:	8008      	strh	r0, [r1, #0]
   307f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   307fc:	f043 0302 	orr.w	r3, r3, #2
   30800:	604b      	str	r3, [r1, #4]
   30802:	4608      	mov	r0, r1
   30804:	f7fc bc54 	b.w	2d0b0 <rpc_transport_send>
   30808:	2007      	movs	r0, #7
   3080a:	4770      	bx	lr
   3080c:	200e      	movs	r0, #14
   3080e:	4770      	bx	lr

00030810 <rpc_message_alloc>:
   30810:	b342      	cbz	r2, 30864 <rpc_message_alloc+0x54>
   30812:	b328      	cbz	r0, 30860 <rpc_message_alloc+0x50>
   30814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30816:	2300      	movs	r3, #0
   30818:	4616      	mov	r6, r2
   3081a:	460c      	mov	r4, r1
   3081c:	4605      	mov	r5, r0
   3081e:	6013      	str	r3, [r2, #0]
   30820:	b171      	cbz	r1, 30840 <rpc_message_alloc+0x30>
   30822:	4608      	mov	r0, r1
   30824:	f7fc fc48 	bl	2d0b8 <rpc_transport_data_alloc>
   30828:	4607      	mov	r7, r0
   3082a:	b1b8      	cbz	r0, 3085c <rpc_message_alloc+0x4c>
   3082c:	f7fc fc42 	bl	2d0b4 <rpc_transport_rpc_alloc>
   30830:	4603      	mov	r3, r0
   30832:	b180      	cbz	r0, 30856 <rpc_message_alloc+0x46>
   30834:	2000      	movs	r0, #0
   30836:	60dc      	str	r4, [r3, #12]
   30838:	609f      	str	r7, [r3, #8]
   3083a:	801d      	strh	r5, [r3, #0]
   3083c:	6033      	str	r3, [r6, #0]
   3083e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30840:	f7fc fc38 	bl	2d0b4 <rpc_transport_rpc_alloc>
   30844:	4603      	mov	r3, r0
   30846:	b148      	cbz	r0, 3085c <rpc_message_alloc+0x4c>
   30848:	4627      	mov	r7, r4
   3084a:	60dc      	str	r4, [r3, #12]
   3084c:	609f      	str	r7, [r3, #8]
   3084e:	801d      	strh	r5, [r3, #0]
   30850:	2000      	movs	r0, #0
   30852:	6033      	str	r3, [r6, #0]
   30854:	e7f3      	b.n	3083e <rpc_message_alloc+0x2e>
   30856:	4638      	mov	r0, r7
   30858:	f7fc fc32 	bl	2d0c0 <rpc_transport_data_free>
   3085c:	2004      	movs	r0, #4
   3085e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30860:	2007      	movs	r0, #7
   30862:	4770      	bx	lr
   30864:	200e      	movs	r0, #14
   30866:	4770      	bx	lr

00030868 <rpc_message_free>:
   30868:	b130      	cbz	r0, 30878 <rpc_message_free+0x10>
   3086a:	b139      	cbz	r1, 3087c <rpc_message_free+0x14>
   3086c:	b508      	push	{r3, lr}
   3086e:	4608      	mov	r0, r1
   30870:	f7fc fc24 	bl	2d0bc <rpc_transport_rpc_free>
   30874:	2000      	movs	r0, #0
   30876:	bd08      	pop	{r3, pc}
   30878:	2007      	movs	r0, #7
   3087a:	4770      	bx	lr
   3087c:	200e      	movs	r0, #14
   3087e:	4770      	bx	lr

00030880 <rpc_message_data_free>:
   30880:	b130      	cbz	r0, 30890 <rpc_message_data_free+0x10>
   30882:	b139      	cbz	r1, 30894 <rpc_message_data_free+0x14>
   30884:	b508      	push	{r3, lr}
   30886:	4608      	mov	r0, r1
   30888:	f7fc fc1a 	bl	2d0c0 <rpc_transport_data_free>
   3088c:	2000      	movs	r0, #0
   3088e:	bd08      	pop	{r3, pc}
   30890:	2007      	movs	r0, #7
   30892:	4770      	bx	lr
   30894:	200e      	movs	r0, #14
   30896:	4770      	bx	lr

00030898 <packet_free_cb>:
   30898:	b510      	push	{r4, lr}
   3089a:	4604      	mov	r4, r0
   3089c:	b118      	cbz	r0, 308a6 <packet_free_cb+0xe>
   3089e:	6800      	ldr	r0, [r0, #0]
   308a0:	b108      	cbz	r0, 308a6 <packet_free_cb+0xe>
   308a2:	f002 ff87 	bl	337b4 <rpc_gnss_client_data_free>
   308a6:	68a0      	ldr	r0, [r4, #8]
   308a8:	b118      	cbz	r0, 308b2 <packet_free_cb+0x1a>
   308aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   308ae:	f003 bd6f 	b.w	34390 <nrf_free>
   308b2:	bd10      	pop	{r4, pc}

000308b4 <rpc_gnss_event_handler>:
   308b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   308b6:	4b64      	ldr	r3, [pc, #400]	; (30a48 <rpc_gnss_event_handler+0x194>)
   308b8:	4606      	mov	r6, r0
   308ba:	6800      	ldr	r0, [r0, #0]
   308bc:	881b      	ldrh	r3, [r3, #0]
   308be:	6802      	ldr	r2, [r0, #0]
   308c0:	b085      	sub	sp, #20
   308c2:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   308c6:	460d      	mov	r5, r1
   308c8:	d037      	beq.n	3093a <rpc_gnss_event_handler+0x86>
   308ca:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   308ce:	33ff      	adds	r3, #255	; 0xff
   308d0:	b29b      	uxth	r3, r3
   308d2:	2b02      	cmp	r3, #2
   308d4:	d811      	bhi.n	308fa <rpc_gnss_event_handler+0x46>
   308d6:	4c5d      	ldr	r4, [pc, #372]	; (30a4c <rpc_gnss_event_handler+0x198>)
   308d8:	6823      	ldr	r3, [r4, #0]
   308da:	075a      	lsls	r2, r3, #29
   308dc:	d410      	bmi.n	30900 <rpc_gnss_event_handler+0x4c>
   308de:	6823      	ldr	r3, [r4, #0]
   308e0:	079b      	lsls	r3, r3, #30
   308e2:	d503      	bpl.n	308ec <rpc_gnss_event_handler+0x38>
   308e4:	f244 0303 	movw	r3, #16387	; 0x4003
   308e8:	429d      	cmp	r5, r3
   308ea:	d009      	beq.n	30900 <rpc_gnss_event_handler+0x4c>
   308ec:	6830      	ldr	r0, [r6, #0]
   308ee:	b120      	cbz	r0, 308fa <rpc_gnss_event_handler+0x46>
   308f0:	f002 ff60 	bl	337b4 <rpc_gnss_client_data_free>
   308f4:	2200      	movs	r2, #0
   308f6:	4b56      	ldr	r3, [pc, #344]	; (30a50 <rpc_gnss_event_handler+0x19c>)
   308f8:	601a      	str	r2, [r3, #0]
   308fa:	2000      	movs	r0, #0
   308fc:	b005      	add	sp, #20
   308fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30900:	2002      	movs	r0, #2
   30902:	f003 fd3b 	bl	3437c <nrf_malloc>
   30906:	4607      	mov	r7, r0
   30908:	2800      	cmp	r0, #0
   3090a:	f000 8094 	beq.w	30a36 <rpc_gnss_event_handler+0x182>
   3090e:	2302      	movs	r3, #2
   30910:	8005      	strh	r5, [r0, #0]
   30912:	6831      	ldr	r1, [r6, #0]
   30914:	6872      	ldr	r2, [r6, #4]
   30916:	484f      	ldr	r0, [pc, #316]	; (30a54 <rpc_gnss_event_handler+0x1a0>)
   30918:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   3091c:	6800      	ldr	r0, [r0, #0]
   3091e:	9303      	str	r3, [sp, #12]
   30920:	6803      	ldr	r3, [r0, #0]
   30922:	4669      	mov	r1, sp
   30924:	685b      	ldr	r3, [r3, #4]
   30926:	4798      	blx	r3
   30928:	3001      	adds	r0, #1
   3092a:	d071      	beq.n	30a10 <rpc_gnss_event_handler+0x15c>
   3092c:	2000      	movs	r0, #0
   3092e:	6823      	ldr	r3, [r4, #0]
   30930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   30934:	6023      	str	r3, [r4, #0]
   30936:	b005      	add	sp, #20
   30938:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3093a:	4c44      	ldr	r4, [pc, #272]	; (30a4c <rpc_gnss_event_handler+0x198>)
   3093c:	4f44      	ldr	r7, [pc, #272]	; (30a50 <rpc_gnss_event_handler+0x19c>)
   3093e:	6823      	ldr	r3, [r4, #0]
   30940:	6038      	str	r0, [r7, #0]
   30942:	01d9      	lsls	r1, r3, #7
   30944:	d523      	bpl.n	3098e <rpc_gnss_event_handler+0xda>
   30946:	f242 1302 	movw	r3, #8450	; 0x2102
   3094a:	429d      	cmp	r5, r3
   3094c:	d11f      	bne.n	3098e <rpc_gnss_event_handler+0xda>
   3094e:	6843      	ldr	r3, [r0, #4]
   30950:	b91b      	cbnz	r3, 3095a <rpc_gnss_event_handler+0xa6>
   30952:	6823      	ldr	r3, [r4, #0]
   30954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   30958:	6023      	str	r3, [r4, #0]
   3095a:	6823      	ldr	r3, [r4, #0]
   3095c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   30960:	6023      	str	r3, [r4, #0]
   30962:	6823      	ldr	r3, [r4, #0]
   30964:	025a      	lsls	r2, r3, #9
   30966:	d430      	bmi.n	309ca <rpc_gnss_event_handler+0x116>
   30968:	f242 0305 	movw	r3, #8197	; 0x2005
   3096c:	429d      	cmp	r5, r3
   3096e:	d12c      	bne.n	309ca <rpc_gnss_event_handler+0x116>
   30970:	6823      	ldr	r3, [r4, #0]
   30972:	0299      	lsls	r1, r3, #10
   30974:	d529      	bpl.n	309ca <rpc_gnss_event_handler+0x116>
   30976:	6843      	ldr	r3, [r0, #4]
   30978:	2b00      	cmp	r3, #0
   3097a:	d157      	bne.n	30a2c <rpc_gnss_event_handler+0x178>
   3097c:	6823      	ldr	r3, [r4, #0]
   3097e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   30982:	6023      	str	r3, [r4, #0]
   30984:	6823      	ldr	r3, [r4, #0]
   30986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3098a:	6023      	str	r3, [r4, #0]
   3098c:	e01d      	b.n	309ca <rpc_gnss_event_handler+0x116>
   3098e:	6823      	ldr	r3, [r4, #0]
   30990:	025b      	lsls	r3, r3, #9
   30992:	d50e      	bpl.n	309b2 <rpc_gnss_event_handler+0xfe>
   30994:	f242 1303 	movw	r3, #8451	; 0x2103
   30998:	429d      	cmp	r5, r3
   3099a:	d10a      	bne.n	309b2 <rpc_gnss_event_handler+0xfe>
   3099c:	6843      	ldr	r3, [r0, #4]
   3099e:	b91b      	cbnz	r3, 309a8 <rpc_gnss_event_handler+0xf4>
   309a0:	6823      	ldr	r3, [r4, #0]
   309a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   309a6:	6023      	str	r3, [r4, #0]
   309a8:	6823      	ldr	r3, [r4, #0]
   309aa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   309ae:	6023      	str	r3, [r4, #0]
   309b0:	e00b      	b.n	309ca <rpc_gnss_event_handler+0x116>
   309b2:	f242 0301 	movw	r3, #8193	; 0x2001
   309b6:	429d      	cmp	r5, r3
   309b8:	d10c      	bne.n	309d4 <rpc_gnss_event_handler+0x120>
   309ba:	6843      	ldr	r3, [r0, #4]
   309bc:	b92b      	cbnz	r3, 309ca <rpc_gnss_event_handler+0x116>
   309be:	6823      	ldr	r3, [r4, #0]
   309c0:	0c1b      	lsrs	r3, r3, #16
   309c2:	041b      	lsls	r3, r3, #16
   309c4:	f043 0302 	orr.w	r3, r3, #2
   309c8:	6023      	str	r3, [r4, #0]
   309ca:	f002 fef3 	bl	337b4 <rpc_gnss_client_data_free>
   309ce:	2300      	movs	r3, #0
   309d0:	603b      	str	r3, [r7, #0]
   309d2:	e77a      	b.n	308ca <rpc_gnss_event_handler+0x16>
   309d4:	f242 0304 	movw	r3, #8196	; 0x2004
   309d8:	429d      	cmp	r5, r3
   309da:	d1c5      	bne.n	30968 <rpc_gnss_event_handler+0xb4>
   309dc:	6843      	ldr	r3, [r0, #4]
   309de:	b993      	cbnz	r3, 30a06 <rpc_gnss_event_handler+0x152>
   309e0:	6823      	ldr	r3, [r4, #0]
   309e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   309e6:	6023      	str	r3, [r4, #0]
   309e8:	6823      	ldr	r3, [r4, #0]
   309ea:	b29b      	uxth	r3, r3
   309ec:	2b03      	cmp	r3, #3
   309ee:	6823      	ldr	r3, [r4, #0]
   309f0:	d016      	beq.n	30a20 <rpc_gnss_event_handler+0x16c>
   309f2:	b29b      	uxth	r3, r3
   309f4:	2b04      	cmp	r3, #4
   309f6:	d1d7      	bne.n	309a8 <rpc_gnss_event_handler+0xf4>
   309f8:	6823      	ldr	r3, [r4, #0]
   309fa:	0c1b      	lsrs	r3, r3, #16
   309fc:	041b      	lsls	r3, r3, #16
   309fe:	f043 0302 	orr.w	r3, r3, #2
   30a02:	6023      	str	r3, [r4, #0]
   30a04:	e7d0      	b.n	309a8 <rpc_gnss_event_handler+0xf4>
   30a06:	6823      	ldr	r3, [r4, #0]
   30a08:	b29b      	uxth	r3, r3
   30a0a:	2b03      	cmp	r3, #3
   30a0c:	d1cc      	bne.n	309a8 <rpc_gnss_event_handler+0xf4>
   30a0e:	e7f3      	b.n	309f8 <rpc_gnss_event_handler+0x144>
   30a10:	4638      	mov	r0, r7
   30a12:	f003 fcbd 	bl	34390 <nrf_free>
   30a16:	6830      	ldr	r0, [r6, #0]
   30a18:	2800      	cmp	r0, #0
   30a1a:	f47f af69 	bne.w	308f0 <rpc_gnss_event_handler+0x3c>
   30a1e:	e76c      	b.n	308fa <rpc_gnss_event_handler+0x46>
   30a20:	0c1b      	lsrs	r3, r3, #16
   30a22:	041b      	lsls	r3, r3, #16
   30a24:	f043 0304 	orr.w	r3, r3, #4
   30a28:	6023      	str	r3, [r4, #0]
   30a2a:	e7bd      	b.n	309a8 <rpc_gnss_event_handler+0xf4>
   30a2c:	6823      	ldr	r3, [r4, #0]
   30a2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   30a32:	6023      	str	r3, [r4, #0]
   30a34:	e7c9      	b.n	309ca <rpc_gnss_event_handler+0x116>
   30a36:	6830      	ldr	r0, [r6, #0]
   30a38:	2800      	cmp	r0, #0
   30a3a:	f43f af5e 	beq.w	308fa <rpc_gnss_event_handler+0x46>
   30a3e:	f002 feb9 	bl	337b4 <rpc_gnss_client_data_free>
   30a42:	4b03      	ldr	r3, [pc, #12]	; (30a50 <rpc_gnss_event_handler+0x19c>)
   30a44:	601f      	str	r7, [r3, #0]
   30a46:	e758      	b.n	308fa <rpc_gnss_event_handler+0x46>
   30a48:	2002894c 	.word	0x2002894c
   30a4c:	20023d84 	.word	0x20023d84
   30a50:	20023d88 	.word	0x20023d88
   30a54:	20023d8c 	.word	0x20023d8c

00030a58 <gnss_interface_write>:
   30a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30a5c:	4a74      	ldr	r2, [pc, #464]	; (30c30 <gnss_interface_write+0x1d8>)
   30a5e:	b09f      	sub	sp, #124	; 0x7c
   30a60:	4290      	cmp	r0, r2
   30a62:	9d26      	ldr	r5, [sp, #152]	; 0x98
   30a64:	f040 80d7 	bne.w	30c16 <gnss_interface_write+0x1be>
   30a68:	2900      	cmp	r1, #0
   30a6a:	f000 80c6 	beq.w	30bfa <gnss_interface_write+0x1a2>
   30a6e:	2d00      	cmp	r5, #0
   30a70:	f000 80c3 	beq.w	30bfa <gnss_interface_write+0x1a2>
   30a74:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   30a76:	2a02      	cmp	r2, #2
   30a78:	f040 80bf 	bne.w	30bfa <gnss_interface_write+0x1a2>
   30a7c:	4c6d      	ldr	r4, [pc, #436]	; (30c34 <gnss_interface_write+0x1dc>)
   30a7e:	6822      	ldr	r2, [r4, #0]
   30a80:	b292      	uxth	r2, r2
   30a82:	2a02      	cmp	r2, #2
   30a84:	d004      	beq.n	30a90 <gnss_interface_write+0x38>
   30a86:	6822      	ldr	r2, [r4, #0]
   30a88:	b292      	uxth	r2, r2
   30a8a:	2a04      	cmp	r2, #4
   30a8c:	f040 80bd 	bne.w	30c0a <gnss_interface_write+0x1b2>
   30a90:	2b00      	cmp	r3, #0
   30a92:	f040 80c6 	bne.w	30c22 <gnss_interface_write+0x1ca>
   30a96:	6822      	ldr	r2, [r4, #0]
   30a98:	0390      	lsls	r0, r2, #14
   30a9a:	d512      	bpl.n	30ac2 <gnss_interface_write+0x6a>
   30a9c:	6822      	ldr	r2, [r4, #0]
   30a9e:	882b      	ldrh	r3, [r5, #0]
   30aa0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   30aa4:	6022      	str	r2, [r4, #0]
   30aa6:	6822      	ldr	r2, [r4, #0]
   30aa8:	3b01      	subs	r3, #1
   30aaa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   30aae:	6022      	str	r2, [r4, #0]
   30ab0:	2b07      	cmp	r3, #7
   30ab2:	f200 80a2 	bhi.w	30bfa <gnss_interface_write+0x1a2>
   30ab6:	e8df f003 	tbb	[pc, r3]
   30aba:	7d82      	.short	0x7d82
   30abc:	646e7378 	.word	0x646e7378
   30ac0:	0869      	.short	0x0869
   30ac2:	2000      	movs	r0, #0
   30ac4:	b01f      	add	sp, #124	; 0x7c
   30ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30aca:	4608      	mov	r0, r1
   30acc:	a902      	add	r1, sp, #8
   30ace:	f002 fe25 	bl	3371c <rpc_gnss_serialize_integrity>
   30ad2:	2172      	movs	r1, #114	; 0x72
   30ad4:	4668      	mov	r0, sp
   30ad6:	f002 fe3b 	bl	33750 <rpc_gnss_client_request_alloc>
   30ada:	4605      	mov	r5, r0
   30adc:	9800      	ldr	r0, [sp, #0]
   30ade:	2d00      	cmp	r5, #0
   30ae0:	d172      	bne.n	30bc8 <gnss_interface_write+0x170>
   30ae2:	2800      	cmp	r0, #0
   30ae4:	d077      	beq.n	30bd6 <gnss_interface_write+0x17e>
   30ae6:	f241 0605 	movw	r6, #4101	; 0x1005
   30aea:	f04f 0c49 	mov.w	ip, #73	; 0x49
   30aee:	2272      	movs	r2, #114	; 0x72
   30af0:	f04f 0e76 	mov.w	lr, #118	; 0x76
   30af4:	f04f 0943 	mov.w	r9, #67	; 0x43
   30af8:	f04f 0854 	mov.w	r8, #84	; 0x54
   30afc:	4f4e      	ldr	r7, [pc, #312]	; (30c38 <gnss_interface_write+0x1e0>)
   30afe:	a91e      	add	r1, sp, #120	; 0x78
   30b00:	883b      	ldrh	r3, [r7, #0]
   30b02:	f880 c00f 	strb.w	ip, [r0, #15]
   30b06:	3301      	adds	r3, #1
   30b08:	b29b      	uxth	r3, r3
   30b0a:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   30b0e:	f841 cd74 	str.w	ip, [r1, #-116]!
   30b12:	7145      	strb	r5, [r0, #5]
   30b14:	7185      	strb	r5, [r0, #6]
   30b16:	71c5      	strb	r5, [r0, #7]
   30b18:	7205      	strb	r5, [r0, #8]
   30b1a:	7245      	strb	r5, [r0, #9]
   30b1c:	7285      	strb	r5, [r0, #10]
   30b1e:	72c5      	strb	r5, [r0, #11]
   30b20:	7102      	strb	r2, [r0, #4]
   30b22:	f880 900c 	strb.w	r9, [r0, #12]
   30b26:	f880 800d 	strb.w	r8, [r0, #13]
   30b2a:	f880 e00e 	strb.w	lr, [r0, #14]
   30b2e:	6800      	ldr	r0, [r0, #0]
   30b30:	803b      	strh	r3, [r7, #0]
   30b32:	f00a fc3e 	bl	3b3b2 <memcpy>
   30b36:	4b41      	ldr	r3, [pc, #260]	; (30c3c <gnss_interface_write+0x1e4>)
   30b38:	4631      	mov	r1, r6
   30b3a:	9800      	ldr	r0, [sp, #0]
   30b3c:	601d      	str	r5, [r3, #0]
   30b3e:	f002 fe1b 	bl	33778 <rpc_gnss_client_request_send>
   30b42:	2800      	cmp	r0, #0
   30b44:	d14e      	bne.n	30be4 <gnss_interface_write+0x18c>
   30b46:	6823      	ldr	r3, [r4, #0]
   30b48:	0299      	lsls	r1, r3, #10
   30b4a:	d50b      	bpl.n	30b64 <gnss_interface_write+0x10c>
   30b4c:	4e3c      	ldr	r6, [pc, #240]	; (30c40 <gnss_interface_write+0x1e8>)
   30b4e:	4d38      	ldr	r5, [pc, #224]	; (30c30 <gnss_interface_write+0x1d8>)
   30b50:	e000      	b.n	30b54 <gnss_interface_write+0xfc>
   30b52:	b978      	cbnz	r0, 30b74 <gnss_interface_write+0x11c>
   30b54:	4631      	mov	r1, r6
   30b56:	4628      	mov	r0, r5
   30b58:	f7f8 fe36 	bl	297c8 <bsd_os_timedwait>
   30b5c:	6823      	ldr	r3, [r4, #0]
   30b5e:	029a      	lsls	r2, r3, #10
   30b60:	d4f7      	bmi.n	30b52 <gnss_interface_write+0xfa>
   30b62:	b938      	cbnz	r0, 30b74 <gnss_interface_write+0x11c>
   30b64:	6823      	ldr	r3, [r4, #0]
   30b66:	039b      	lsls	r3, r3, #14
   30b68:	d4ab      	bmi.n	30ac2 <gnss_interface_write+0x6a>
   30b6a:	2005      	movs	r0, #5
   30b6c:	6823      	ldr	r3, [r4, #0]
   30b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   30b72:	6023      	str	r3, [r4, #0]
   30b74:	f7f8 fee0 	bl	29938 <bsd_os_errno_set>
   30b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30b7c:	b01f      	add	sp, #124	; 0x7c
   30b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30b82:	4608      	mov	r0, r1
   30b84:	a902      	add	r1, sp, #8
   30b86:	f002 fd81 	bl	3368c <rpc_gnss_serialize_time_and_sv_tow>
   30b8a:	e7a2      	b.n	30ad2 <gnss_interface_write+0x7a>
   30b8c:	4608      	mov	r0, r1
   30b8e:	a902      	add	r1, sp, #8
   30b90:	f002 fda4 	bl	336dc <rpc_gnss_serialize_location>
   30b94:	e79d      	b.n	30ad2 <gnss_interface_write+0x7a>
   30b96:	4608      	mov	r0, r1
   30b98:	a902      	add	r1, sp, #8
   30b9a:	f002 fd5d 	bl	33658 <rpc_gnss_serialize_nequick>
   30b9e:	e798      	b.n	30ad2 <gnss_interface_write+0x7a>
   30ba0:	4608      	mov	r0, r1
   30ba2:	a902      	add	r1, sp, #8
   30ba4:	f002 fd34 	bl	33610 <rpc_gnss_serialize_klob>
   30ba8:	e793      	b.n	30ad2 <gnss_interface_write+0x7a>
   30baa:	4608      	mov	r0, r1
   30bac:	a902      	add	r1, sp, #8
   30bae:	f002 fcfd 	bl	335ac <rpc_gnss_serialize_alm>
   30bb2:	e78e      	b.n	30ad2 <gnss_interface_write+0x7a>
   30bb4:	4608      	mov	r0, r1
   30bb6:	a902      	add	r1, sp, #8
   30bb8:	f002 fca6 	bl	33508 <rpc_gnss_serialize_ephe>
   30bbc:	e789      	b.n	30ad2 <gnss_interface_write+0x7a>
   30bbe:	4608      	mov	r0, r1
   30bc0:	a902      	add	r1, sp, #8
   30bc2:	f002 fc7f 	bl	334c4 <rpc_gnss_serialize_utc>
   30bc6:	e784      	b.n	30ad2 <gnss_interface_write+0x7a>
   30bc8:	b128      	cbz	r0, 30bd6 <gnss_interface_write+0x17e>
   30bca:	6803      	ldr	r3, [r0, #0]
   30bcc:	b11b      	cbz	r3, 30bd6 <gnss_interface_write+0x17e>
   30bce:	4618      	mov	r0, r3
   30bd0:	f002 fdf0 	bl	337b4 <rpc_gnss_client_data_free>
   30bd4:	9800      	ldr	r0, [sp, #0]
   30bd6:	f002 fde5 	bl	337a4 <rpc_gnss_client_message_free>
   30bda:	2023      	movs	r0, #35	; 0x23
   30bdc:	f7f8 feac 	bl	29938 <bsd_os_errno_set>
   30be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30be4:	6823      	ldr	r3, [r4, #0]
   30be6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   30bea:	6023      	str	r3, [r4, #0]
   30bec:	6823      	ldr	r3, [r4, #0]
   30bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   30bf2:	6023      	str	r3, [r4, #0]
   30bf4:	b01f      	add	sp, #124	; 0x7c
   30bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30bfa:	2016      	movs	r0, #22
   30bfc:	f7f8 fe9c 	bl	29938 <bsd_os_errno_set>
   30c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30c04:	b01f      	add	sp, #124	; 0x7c
   30c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30c0a:	2039      	movs	r0, #57	; 0x39
   30c0c:	f7f8 fe94 	bl	29938 <bsd_os_errno_set>
   30c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30c14:	e756      	b.n	30ac4 <gnss_interface_write+0x6c>
   30c16:	2009      	movs	r0, #9
   30c18:	f7f8 fe8e 	bl	29938 <bsd_os_errno_set>
   30c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30c20:	e750      	b.n	30ac4 <gnss_interface_write+0x6c>
   30c22:	202d      	movs	r0, #45	; 0x2d
   30c24:	f7f8 fe88 	bl	29938 <bsd_os_errno_set>
   30c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30c2c:	e74a      	b.n	30ac4 <gnss_interface_write+0x6c>
   30c2e:	bf00      	nop
   30c30:	49765443 	.word	0x49765443
   30c34:	20023d84 	.word	0x20023d84
   30c38:	2002894c 	.word	0x2002894c
   30c3c:	20023d88 	.word	0x20023d88
   30c40:	20020454 	.word	0x20020454

00030c44 <gnss_interface_read>:
   30c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30c48:	4c55      	ldr	r4, [pc, #340]	; (30da0 <gnss_interface_read+0x15c>)
   30c4a:	b0b7      	sub	sp, #220	; 0xdc
   30c4c:	42a0      	cmp	r0, r4
   30c4e:	f040 81fa 	bne.w	31046 <gnss_interface_read+0x402>
   30c52:	460e      	mov	r6, r1
   30c54:	2900      	cmp	r1, #0
   30c56:	f000 81f0 	beq.w	3103a <gnss_interface_read+0x3f6>
   30c5a:	2ad7      	cmp	r2, #215	; 0xd7
   30c5c:	f240 81ed 	bls.w	3103a <gnss_interface_read+0x3f6>
   30c60:	4d50      	ldr	r5, [pc, #320]	; (30da4 <gnss_interface_read+0x160>)
   30c62:	469a      	mov	sl, r3
   30c64:	682b      	ldr	r3, [r5, #0]
   30c66:	b29b      	uxth	r3, r3
   30c68:	2b04      	cmp	r3, #4
   30c6a:	d004      	beq.n	30c76 <gnss_interface_read+0x32>
   30c6c:	682b      	ldr	r3, [r5, #0]
   30c6e:	b29b      	uxth	r3, r3
   30c70:	2b02      	cmp	r3, #2
   30c72:	f040 81dc 	bne.w	3102e <gnss_interface_read+0x3ea>
   30c76:	f1ba 0f00 	cmp.w	sl, #0
   30c7a:	d178      	bne.n	30d6e <gnss_interface_read+0x12a>
   30c7c:	2102      	movs	r1, #2
   30c7e:	20b6      	movs	r0, #182	; 0xb6
   30c80:	2400      	movs	r4, #0
   30c82:	682b      	ldr	r3, [r5, #0]
   30c84:	f10d 020e 	add.w	r2, sp, #14
   30c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   30c8c:	602b      	str	r3, [r5, #0]
   30c8e:	ab08      	add	r3, sp, #32
   30c90:	9304      	str	r3, [sp, #16]
   30c92:	f8df b118 	ldr.w	fp, [pc, #280]	; 30dac <gnss_interface_read+0x168>
   30c96:	ea0a 0301 	and.w	r3, sl, r1
   30c9a:	4f43      	ldr	r7, [pc, #268]	; (30da8 <gnss_interface_read+0x164>)
   30c9c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 30db0 <gnss_interface_read+0x16c>
   30ca0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 30da0 <gnss_interface_read+0x15c>
   30ca4:	9005      	str	r0, [sp, #20]
   30ca6:	9107      	str	r1, [sp, #28]
   30ca8:	9206      	str	r2, [sp, #24]
   30caa:	9301      	str	r3, [sp, #4]
   30cac:	f8db 0000 	ldr.w	r0, [fp]
   30cb0:	4652      	mov	r2, sl
   30cb2:	6803      	ldr	r3, [r0, #0]
   30cb4:	a904      	add	r1, sp, #16
   30cb6:	689b      	ldr	r3, [r3, #8]
   30cb8:	4798      	blx	r3
   30cba:	2800      	cmp	r0, #0
   30cbc:	da2a      	bge.n	30d14 <gnss_interface_read+0xd0>
   30cbe:	9b01      	ldr	r3, [sp, #4]
   30cc0:	b15b      	cbz	r3, 30cda <gnss_interface_read+0x96>
   30cc2:	1c42      	adds	r2, r0, #1
   30cc4:	4603      	mov	r3, r0
   30cc6:	d125      	bne.n	30d14 <gnss_interface_read+0xd0>
   30cc8:	b9dc      	cbnz	r4, 30d02 <gnss_interface_read+0xbe>
   30cca:	2023      	movs	r0, #35	; 0x23
   30ccc:	461c      	mov	r4, r3
   30cce:	f7f8 fe33 	bl	29938 <bsd_os_errno_set>
   30cd2:	4620      	mov	r0, r4
   30cd4:	b037      	add	sp, #220	; 0xdc
   30cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30cda:	682a      	ldr	r2, [r5, #0]
   30cdc:	783b      	ldrb	r3, [r7, #0]
   30cde:	03d1      	lsls	r1, r2, #15
   30ce0:	d40c      	bmi.n	30cfc <gnss_interface_read+0xb8>
   30ce2:	b95c      	cbnz	r4, 30cfc <gnss_interface_read+0xb8>
   30ce4:	b163      	cbz	r3, 30d00 <gnss_interface_read+0xbc>
   30ce6:	4649      	mov	r1, r9
   30ce8:	4640      	mov	r0, r8
   30cea:	f7f8 fd6d 	bl	297c8 <bsd_os_timedwait>
   30cee:	682b      	ldr	r3, [r5, #0]
   30cf0:	03db      	lsls	r3, r3, #15
   30cf2:	d437      	bmi.n	30d64 <gnss_interface_read+0x120>
   30cf4:	783b      	ldrb	r3, [r7, #0]
   30cf6:	2800      	cmp	r0, #0
   30cf8:	d0f4      	beq.n	30ce4 <gnss_interface_read+0xa0>
   30cfa:	4604      	mov	r4, r0
   30cfc:	2b00      	cmp	r3, #0
   30cfe:	d1d5      	bne.n	30cac <gnss_interface_read+0x68>
   30d00:	2470      	movs	r4, #112	; 0x70
   30d02:	4620      	mov	r0, r4
   30d04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   30d08:	f7f8 fe16 	bl	29938 <bsd_os_errno_set>
   30d0c:	4620      	mov	r0, r4
   30d0e:	b037      	add	sp, #220	; 0xdc
   30d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d14:	f244 0202 	movw	r2, #16386	; 0x4002
   30d18:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   30d1c:	4293      	cmp	r3, r2
   30d1e:	d02f      	beq.n	30d80 <gnss_interface_read+0x13c>
   30d20:	f244 0201 	movw	r2, #16385	; 0x4001
   30d24:	4293      	cmp	r3, r2
   30d26:	d045      	beq.n	30db4 <gnss_interface_read+0x170>
   30d28:	f244 0203 	movw	r2, #16387	; 0x4003
   30d2c:	4293      	cmp	r3, r2
   30d2e:	f040 8184 	bne.w	3103a <gnss_interface_read+0x3f6>
   30d32:	2203      	movs	r2, #3
   30d34:	2414      	movs	r4, #20
   30d36:	9b08      	ldr	r3, [sp, #32]
   30d38:	7032      	strb	r2, [r6, #0]
   30d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   30d3c:	60b3      	str	r3, [r6, #8]
   30d3e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   30d42:	e9c6 2303 	strd	r2, r3, [r6, #12]
   30d46:	f8db 0000 	ldr.w	r0, [fp]
   30d4a:	6803      	ldr	r3, [r0, #0]
   30d4c:	68db      	ldr	r3, [r3, #12]
   30d4e:	4798      	blx	r3
   30d50:	2800      	cmp	r0, #0
   30d52:	ddbe      	ble.n	30cd2 <gnss_interface_read+0x8e>
   30d54:	4620      	mov	r0, r4
   30d56:	682b      	ldr	r3, [r5, #0]
   30d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   30d5c:	602b      	str	r3, [r5, #0]
   30d5e:	b037      	add	sp, #220	; 0xdc
   30d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d64:	783b      	ldrb	r3, [r7, #0]
   30d66:	4604      	mov	r4, r0
   30d68:	2b00      	cmp	r3, #0
   30d6a:	d19f      	bne.n	30cac <gnss_interface_read+0x68>
   30d6c:	e7c8      	b.n	30d00 <gnss_interface_read+0xbc>
   30d6e:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   30d72:	d183      	bne.n	30c7c <gnss_interface_read+0x38>
   30d74:	202d      	movs	r0, #45	; 0x2d
   30d76:	f7f8 fddf 	bl	29938 <bsd_os_errno_set>
   30d7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   30d7e:	e7a8      	b.n	30cd2 <gnss_interface_read+0x8e>
   30d80:	a808      	add	r0, sp, #32
   30d82:	f7ec f975 	bl	1d070 <strlen>
   30d86:	2302      	movs	r3, #2
   30d88:	1c44      	adds	r4, r0, #1
   30d8a:	b2a4      	uxth	r4, r4
   30d8c:	f806 3b08 	strb.w	r3, [r6], #8
   30d90:	4622      	mov	r2, r4
   30d92:	a908      	add	r1, sp, #32
   30d94:	4630      	mov	r0, r6
   30d96:	f00a fb0c 	bl	3b3b2 <memcpy>
   30d9a:	3408      	adds	r4, #8
   30d9c:	e7d3      	b.n	30d46 <gnss_interface_read+0x102>
   30d9e:	bf00      	nop
   30da0:	49765443 	.word	0x49765443
   30da4:	20023d84 	.word	0x20023d84
   30da8:	2002cb9a 	.word	0x2002cb9a
   30dac:	20023d8c 	.word	0x20023d8c
   30db0:	20020454 	.word	0x20020454
   30db4:	2401      	movs	r4, #1
   30db6:	a809      	add	r0, sp, #36	; 0x24
   30db8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   30dba:	e9c6 0102 	strd	r0, r1, [r6, #8]
   30dbe:	e9c6 2304 	strd	r2, r3, [r6, #16]
   30dc2:	990d      	ldr	r1, [sp, #52]	; 0x34
   30dc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   30dc6:	7034      	strb	r4, [r6, #0]
   30dc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   30dca:	61b1      	str	r1, [r6, #24]
   30dcc:	9910      	ldr	r1, [sp, #64]	; 0x40
   30dce:	61f2      	str	r2, [r6, #28]
   30dd0:	6233      	str	r3, [r6, #32]
   30dd2:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   30dd6:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   30dda:	6271      	str	r1, [r6, #36]	; 0x24
   30ddc:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   30de0:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   30de4:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   30de8:	6373      	str	r3, [r6, #52]	; 0x34
   30dea:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   30dee:	63b1      	str	r1, [r6, #56]	; 0x38
   30df0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   30df4:	63f2      	str	r2, [r6, #60]	; 0x3c
   30df6:	6433      	str	r3, [r6, #64]	; 0x40
   30df8:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   30dfc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   30e00:	8531      	strh	r1, [r6, #40]	; 0x28
   30e02:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   30e06:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   30e0a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   30e0e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   30e12:	9b18      	ldr	r3, [sp, #96]	; 0x60
   30e14:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   30e18:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   30e1c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   30e20:	f3c3 210f 	ubfx	r1, r3, #8, #16
   30e24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   30e26:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   30e2a:	8630      	strh	r0, [r6, #48]	; 0x30
   30e2c:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   30e30:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   30e34:	f3c3 230f 	ubfx	r3, r3, #8, #16
   30e38:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   30e3c:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   30e40:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   30e44:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   30e48:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   30e4c:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   30e50:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   30e54:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   30e58:	64f3      	str	r3, [r6, #76]	; 0x4c
   30e5a:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   30e5e:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   30e62:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   30e66:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   30e6a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   30e6e:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   30e72:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   30e76:	65b1      	str	r1, [r6, #88]	; 0x58
   30e78:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   30e7c:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   30e80:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   30e84:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   30e88:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   30e8c:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   30e90:	6672      	str	r2, [r6, #100]	; 0x64
   30e92:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   30e96:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   30e9a:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   30e9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   30ea0:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   30ea4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   30ea8:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   30eac:	f3c2 220f 	ubfx	r2, r2, #8, #16
   30eb0:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   30eb4:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   30eb8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   30ebc:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   30ec0:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   30ec4:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   30ec8:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   30ecc:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   30ed0:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   30ed4:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   30ed8:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   30edc:	6733      	str	r3, [r6, #112]	; 0x70
   30ede:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   30ee2:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   30ee6:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   30eea:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   30eee:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   30ef2:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   30ef6:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   30efa:	67f1      	str	r1, [r6, #124]	; 0x7c
   30efc:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   30f00:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   30f04:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   30f08:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   30f0c:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   30f10:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   30f14:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   30f18:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   30f1c:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   30f20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   30f22:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   30f26:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   30f2a:	f3c3 210f 	ubfx	r1, r3, #8, #16
   30f2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   30f30:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   30f34:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   30f38:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   30f3c:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   30f40:	f3c3 230f 	ubfx	r3, r3, #8, #16
   30f44:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   30f48:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   30f4c:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   30f50:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   30f54:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   30f58:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   30f5c:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   30f60:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   30f64:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   30f68:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   30f6c:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   30f70:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   30f74:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   30f78:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   30f7c:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   30f80:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   30f84:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   30f88:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   30f8c:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   30f90:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   30f94:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   30f98:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   30f9c:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   30fa0:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   30fa4:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   30fa8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   30fac:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   30fb0:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   30fb4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   30fb6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   30fba:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   30fbe:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   30fc2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   30fc6:	f3c2 220f 	ubfx	r2, r2, #8, #16
   30fca:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   30fce:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   30fd2:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   30fd6:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   30fda:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   30fde:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   30fe2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   30fe6:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   30fea:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   30fee:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   30ff2:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   30ff6:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   30ffa:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   30ffe:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   31002:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   31006:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   3100a:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   3100e:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   31012:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   31016:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   3101a:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   3101e:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   31022:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   31026:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   3102a:	24d8      	movs	r4, #216	; 0xd8
   3102c:	e68b      	b.n	30d46 <gnss_interface_read+0x102>
   3102e:	2039      	movs	r0, #57	; 0x39
   31030:	f7f8 fc82 	bl	29938 <bsd_os_errno_set>
   31034:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   31038:	e64b      	b.n	30cd2 <gnss_interface_read+0x8e>
   3103a:	2016      	movs	r0, #22
   3103c:	f7f8 fc7c 	bl	29938 <bsd_os_errno_set>
   31040:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   31044:	e645      	b.n	30cd2 <gnss_interface_read+0x8e>
   31046:	2009      	movs	r0, #9
   31048:	f7f8 fc76 	bl	29938 <bsd_os_errno_set>
   3104c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   31050:	e63f      	b.n	30cd2 <gnss_interface_read+0x8e>
   31052:	bf00      	nop

00031054 <gnss_interface_setopt>:
   31054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31058:	4db9      	ldr	r5, [pc, #740]	; (31340 <gnss_interface_setopt+0x2ec>)
   3105a:	b087      	sub	sp, #28
   3105c:	682c      	ldr	r4, [r5, #0]
   3105e:	4690      	mov	r8, r2
   31060:	b2a4      	uxth	r4, r4
   31062:	2c02      	cmp	r4, #2
   31064:	d00c      	beq.n	31080 <gnss_interface_setopt+0x2c>
   31066:	2a08      	cmp	r2, #8
   31068:	d00a      	beq.n	31080 <gnss_interface_setopt+0x2c>
   3106a:	3a0a      	subs	r2, #10
   3106c:	2a01      	cmp	r2, #1
   3106e:	d907      	bls.n	31080 <gnss_interface_setopt+0x2c>
   31070:	200e      	movs	r0, #14
   31072:	f7f8 fc61 	bl	29938 <bsd_os_errno_set>
   31076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3107a:	b007      	add	sp, #28
   3107c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31080:	682a      	ldr	r2, [r5, #0]
   31082:	0252      	lsls	r2, r2, #9
   31084:	f100 8155 	bmi.w	31332 <gnss_interface_setopt+0x2de>
   31088:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   3108c:	f040 8145 	bne.w	3131a <gnss_interface_setopt+0x2c6>
   31090:	4aac      	ldr	r2, [pc, #688]	; (31344 <gnss_interface_setopt+0x2f0>)
   31092:	4290      	cmp	r0, r2
   31094:	f040 8147 	bne.w	31326 <gnss_interface_setopt+0x2d2>
   31098:	f1a8 020a 	sub.w	r2, r8, #10
   3109c:	2a01      	cmp	r2, #1
   3109e:	d902      	bls.n	310a6 <gnss_interface_setopt+0x52>
   310a0:	2b00      	cmp	r3, #0
   310a2:	f000 811e 	beq.w	312e2 <gnss_interface_setopt+0x28e>
   310a6:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   310aa:	2a0a      	cmp	r2, #10
   310ac:	f200 8119 	bhi.w	312e2 <gnss_interface_setopt+0x28e>
   310b0:	e8df f012 	tbh	[pc, r2, lsl #1]
   310b4:	00950088 	.word	0x00950088
   310b8:	00ab00a1 	.word	0x00ab00a1
   310bc:	00c200b7 	.word	0x00c200b7
   310c0:	00e600ce 	.word	0x00e600ce
   310c4:	010800fc 	.word	0x010800fc
   310c8:	000b      	.short	0x000b
   310ca:	682b      	ldr	r3, [r5, #0]
   310cc:	b29b      	uxth	r3, r3
   310ce:	2b04      	cmp	r3, #4
   310d0:	d1ce      	bne.n	31070 <gnss_interface_setopt+0x1c>
   310d2:	2203      	movs	r2, #3
   310d4:	f241 0604 	movw	r6, #4100	; 0x1004
   310d8:	2300      	movs	r3, #0
   310da:	4637      	mov	r7, r6
   310dc:	f88d 2008 	strb.w	r2, [sp, #8]
   310e0:	f88d 3009 	strb.w	r3, [sp, #9]
   310e4:	f88d 300a 	strb.w	r3, [sp, #10]
   310e8:	f88d 300b 	strb.w	r3, [sp, #11]
   310ec:	f88d 300c 	strb.w	r3, [sp, #12]
   310f0:	682b      	ldr	r3, [r5, #0]
   310f2:	2112      	movs	r1, #18
   310f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   310f8:	4668      	mov	r0, sp
   310fa:	602b      	str	r3, [r5, #0]
   310fc:	f002 fb28 	bl	33750 <rpc_gnss_client_request_alloc>
   31100:	4604      	mov	r4, r0
   31102:	9800      	ldr	r0, [sp, #0]
   31104:	2c00      	cmp	r4, #0
   31106:	f040 80f2 	bne.w	312ee <gnss_interface_setopt+0x29a>
   3110a:	2800      	cmp	r0, #0
   3110c:	f000 80f6 	beq.w	312fc <gnss_interface_setopt+0x2a8>
   31110:	2212      	movs	r2, #18
   31112:	f04f 0976 	mov.w	r9, #118	; 0x76
   31116:	f04f 0e49 	mov.w	lr, #73	; 0x49
   3111a:	f04f 0b43 	mov.w	fp, #67	; 0x43
   3111e:	f04f 0a54 	mov.w	sl, #84	; 0x54
   31122:	f8df c22c 	ldr.w	ip, [pc, #556]	; 31350 <gnss_interface_setopt+0x2fc>
   31126:	a906      	add	r1, sp, #24
   31128:	f8bc 3000 	ldrh.w	r3, [ip]
   3112c:	f880 900e 	strb.w	r9, [r0, #14]
   31130:	3301      	adds	r3, #1
   31132:	b29b      	uxth	r3, r3
   31134:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   31138:	f841 6d14 	str.w	r6, [r1, #-20]!
   3113c:	7144      	strb	r4, [r0, #5]
   3113e:	7184      	strb	r4, [r0, #6]
   31140:	71c4      	strb	r4, [r0, #7]
   31142:	7204      	strb	r4, [r0, #8]
   31144:	7244      	strb	r4, [r0, #9]
   31146:	7284      	strb	r4, [r0, #10]
   31148:	72c4      	strb	r4, [r0, #11]
   3114a:	7102      	strb	r2, [r0, #4]
   3114c:	f880 b00c 	strb.w	fp, [r0, #12]
   31150:	f880 a00d 	strb.w	sl, [r0, #13]
   31154:	f880 e00f 	strb.w	lr, [r0, #15]
   31158:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 31354 <gnss_interface_setopt+0x300>
   3115c:	6800      	ldr	r0, [r0, #0]
   3115e:	f8ac 3000 	strh.w	r3, [ip]
   31162:	f00a f926 	bl	3b3b2 <memcpy>
   31166:	4639      	mov	r1, r7
   31168:	9800      	ldr	r0, [sp, #0]
   3116a:	f8c9 4000 	str.w	r4, [r9]
   3116e:	f002 fb03 	bl	33778 <rpc_gnss_client_request_send>
   31172:	2800      	cmp	r0, #0
   31174:	f040 80c7 	bne.w	31306 <gnss_interface_setopt+0x2b2>
   31178:	4f73      	ldr	r7, [pc, #460]	; (31348 <gnss_interface_setopt+0x2f4>)
   3117a:	4e72      	ldr	r6, [pc, #456]	; (31344 <gnss_interface_setopt+0x2f0>)
   3117c:	4639      	mov	r1, r7
   3117e:	4630      	mov	r0, r6
   31180:	f7f8 fb22 	bl	297c8 <bsd_os_timedwait>
   31184:	682c      	ldr	r4, [r5, #0]
   31186:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   3118a:	d1f7      	bne.n	3117c <gnss_interface_setopt+0x128>
   3118c:	f8d9 0000 	ldr.w	r0, [r9]
   31190:	b118      	cbz	r0, 3119a <gnss_interface_setopt+0x146>
   31192:	f002 fb0f 	bl	337b4 <rpc_gnss_client_data_free>
   31196:	f8c9 4000 	str.w	r4, [r9]
   3119a:	682b      	ldr	r3, [r5, #0]
   3119c:	021b      	lsls	r3, r3, #8
   3119e:	f140 8098 	bpl.w	312d2 <gnss_interface_setopt+0x27e>
   311a2:	f1b8 0f08 	cmp.w	r8, #8
   311a6:	f040 809a 	bne.w	312de <gnss_interface_setopt+0x28a>
   311aa:	4b68      	ldr	r3, [pc, #416]	; (3134c <gnss_interface_setopt+0x2f8>)
   311ac:	6818      	ldr	r0, [r3, #0]
   311ae:	6803      	ldr	r3, [r0, #0]
   311b0:	691b      	ldr	r3, [r3, #16]
   311b2:	4798      	blx	r3
   311b4:	2000      	movs	r0, #0
   311b6:	682b      	ldr	r3, [r5, #0]
   311b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   311bc:	602b      	str	r3, [r5, #0]
   311be:	b007      	add	sp, #28
   311c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   311c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   311c6:	2a02      	cmp	r2, #2
   311c8:	f040 808b 	bne.w	312e2 <gnss_interface_setopt+0x28e>
   311cc:	2208      	movs	r2, #8
   311ce:	f241 1603 	movw	r6, #4355	; 0x1103
   311d2:	881b      	ldrh	r3, [r3, #0]
   311d4:	9202      	str	r2, [sp, #8]
   311d6:	f8ad 300f 	strh.w	r3, [sp, #15]
   311da:	4637      	mov	r7, r6
   311dc:	e788      	b.n	310f0 <gnss_interface_setopt+0x9c>
   311de:	9a10      	ldr	r2, [sp, #64]	; 0x40
   311e0:	2a02      	cmp	r2, #2
   311e2:	d17e      	bne.n	312e2 <gnss_interface_setopt+0x28e>
   311e4:	2210      	movs	r2, #16
   311e6:	f241 1603 	movw	r6, #4355	; 0x1103
   311ea:	881b      	ldrh	r3, [r3, #0]
   311ec:	9202      	str	r2, [sp, #8]
   311ee:	f8ad 3011 	strh.w	r3, [sp, #17]
   311f2:	4637      	mov	r7, r6
   311f4:	e77c      	b.n	310f0 <gnss_interface_setopt+0x9c>
   311f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   311f8:	2a01      	cmp	r2, #1
   311fa:	d172      	bne.n	312e2 <gnss_interface_setopt+0x28e>
   311fc:	781b      	ldrb	r3, [r3, #0]
   311fe:	2b01      	cmp	r3, #1
   31200:	d16f      	bne.n	312e2 <gnss_interface_setopt+0x28e>
   31202:	f241 1603 	movw	r6, #4355	; 0x1103
   31206:	4637      	mov	r7, r6
   31208:	e772      	b.n	310f0 <gnss_interface_setopt+0x9c>
   3120a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3120c:	2a02      	cmp	r2, #2
   3120e:	d168      	bne.n	312e2 <gnss_interface_setopt+0x28e>
   31210:	2220      	movs	r2, #32
   31212:	f241 1603 	movw	r6, #4355	; 0x1103
   31216:	881b      	ldrh	r3, [r3, #0]
   31218:	9202      	str	r2, [sp, #8]
   3121a:	f8ad 3013 	strh.w	r3, [sp, #19]
   3121e:	4637      	mov	r7, r6
   31220:	e766      	b.n	310f0 <gnss_interface_setopt+0x9c>
   31222:	9a10      	ldr	r2, [sp, #64]	; 0x40
   31224:	2a01      	cmp	r2, #1
   31226:	d15c      	bne.n	312e2 <gnss_interface_setopt+0x28e>
   31228:	f241 1603 	movw	r6, #4355	; 0x1103
   3122c:	781b      	ldrb	r3, [r3, #0]
   3122e:	9202      	str	r2, [sp, #8]
   31230:	f88d 300c 	strb.w	r3, [sp, #12]
   31234:	4637      	mov	r7, r6
   31236:	e75b      	b.n	310f0 <gnss_interface_setopt+0x9c>
   31238:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3123a:	2a01      	cmp	r2, #1
   3123c:	d151      	bne.n	312e2 <gnss_interface_setopt+0x28e>
   3123e:	2202      	movs	r2, #2
   31240:	f241 1603 	movw	r6, #4355	; 0x1103
   31244:	781b      	ldrb	r3, [r3, #0]
   31246:	9202      	str	r2, [sp, #8]
   31248:	f88d 300d 	strb.w	r3, [sp, #13]
   3124c:	4637      	mov	r7, r6
   3124e:	e74f      	b.n	310f0 <gnss_interface_setopt+0x9c>
   31250:	682a      	ldr	r2, [r5, #0]
   31252:	b292      	uxth	r2, r2
   31254:	2a02      	cmp	r2, #2
   31256:	f47f af0b 	bne.w	31070 <gnss_interface_setopt+0x1c>
   3125a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3125c:	2a04      	cmp	r2, #4
   3125e:	d140      	bne.n	312e2 <gnss_interface_setopt+0x28e>
   31260:	2101      	movs	r1, #1
   31262:	f241 0604 	movw	r6, #4100	; 0x1004
   31266:	682a      	ldr	r2, [r5, #0]
   31268:	6818      	ldr	r0, [r3, #0]
   3126a:	0c13      	lsrs	r3, r2, #16
   3126c:	041b      	lsls	r3, r3, #16
   3126e:	f043 0303 	orr.w	r3, r3, #3
   31272:	f8cd 0009 	str.w	r0, [sp, #9]
   31276:	602b      	str	r3, [r5, #0]
   31278:	f88d 1008 	strb.w	r1, [sp, #8]
   3127c:	4637      	mov	r7, r6
   3127e:	e737      	b.n	310f0 <gnss_interface_setopt+0x9c>
   31280:	682a      	ldr	r2, [r5, #0]
   31282:	b292      	uxth	r2, r2
   31284:	2a04      	cmp	r2, #4
   31286:	d004      	beq.n	31292 <gnss_interface_setopt+0x23e>
   31288:	682a      	ldr	r2, [r5, #0]
   3128a:	b292      	uxth	r2, r2
   3128c:	2a02      	cmp	r2, #2
   3128e:	f47f aeef 	bne.w	31070 <gnss_interface_setopt+0x1c>
   31292:	2200      	movs	r2, #0
   31294:	f88d 2008 	strb.w	r2, [sp, #8]
   31298:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3129a:	2a04      	cmp	r2, #4
   3129c:	d121      	bne.n	312e2 <gnss_interface_setopt+0x28e>
   3129e:	f241 0604 	movw	r6, #4100	; 0x1004
   312a2:	681b      	ldr	r3, [r3, #0]
   312a4:	4637      	mov	r7, r6
   312a6:	f8cd 3009 	str.w	r3, [sp, #9]
   312aa:	e721      	b.n	310f0 <gnss_interface_setopt+0x9c>
   312ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
   312ae:	2a01      	cmp	r2, #1
   312b0:	d117      	bne.n	312e2 <gnss_interface_setopt+0x28e>
   312b2:	2240      	movs	r2, #64	; 0x40
   312b4:	f241 1603 	movw	r6, #4355	; 0x1103
   312b8:	781b      	ldrb	r3, [r3, #0]
   312ba:	9202      	str	r2, [sp, #8]
   312bc:	f88d 3015 	strb.w	r3, [sp, #21]
   312c0:	4637      	mov	r7, r6
   312c2:	e715      	b.n	310f0 <gnss_interface_setopt+0x9c>
   312c4:	682b      	ldr	r3, [r5, #0]
   312c6:	b29b      	uxth	r3, r3
   312c8:	2b04      	cmp	r3, #4
   312ca:	f47f aed1 	bne.w	31070 <gnss_interface_setopt+0x1c>
   312ce:	2202      	movs	r2, #2
   312d0:	e700      	b.n	310d4 <gnss_interface_setopt+0x80>
   312d2:	200e      	movs	r0, #14
   312d4:	f7f8 fb30 	bl	29938 <bsd_os_errno_set>
   312d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   312dc:	e76b      	b.n	311b6 <gnss_interface_setopt+0x162>
   312de:	2000      	movs	r0, #0
   312e0:	e769      	b.n	311b6 <gnss_interface_setopt+0x162>
   312e2:	2016      	movs	r0, #22
   312e4:	f7f8 fb28 	bl	29938 <bsd_os_errno_set>
   312e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   312ec:	e6c5      	b.n	3107a <gnss_interface_setopt+0x26>
   312ee:	b128      	cbz	r0, 312fc <gnss_interface_setopt+0x2a8>
   312f0:	6803      	ldr	r3, [r0, #0]
   312f2:	b11b      	cbz	r3, 312fc <gnss_interface_setopt+0x2a8>
   312f4:	4618      	mov	r0, r3
   312f6:	f002 fa5d 	bl	337b4 <rpc_gnss_client_data_free>
   312fa:	9800      	ldr	r0, [sp, #0]
   312fc:	f002 fa52 	bl	337a4 <rpc_gnss_client_message_free>
   31300:	2023      	movs	r0, #35	; 0x23
   31302:	f7f8 fb19 	bl	29938 <bsd_os_errno_set>
   31306:	682b      	ldr	r3, [r5, #0]
   31308:	200e      	movs	r0, #14
   3130a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   3130e:	602b      	str	r3, [r5, #0]
   31310:	f7f8 fb12 	bl	29938 <bsd_os_errno_set>
   31314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31318:	e6af      	b.n	3107a <gnss_interface_setopt+0x26>
   3131a:	202a      	movs	r0, #42	; 0x2a
   3131c:	f7f8 fb0c 	bl	29938 <bsd_os_errno_set>
   31320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31324:	e6a9      	b.n	3107a <gnss_interface_setopt+0x26>
   31326:	2009      	movs	r0, #9
   31328:	f7f8 fb06 	bl	29938 <bsd_os_errno_set>
   3132c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31330:	e6a3      	b.n	3107a <gnss_interface_setopt+0x26>
   31332:	2073      	movs	r0, #115	; 0x73
   31334:	f7f8 fb00 	bl	29938 <bsd_os_errno_set>
   31338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3133c:	e69d      	b.n	3107a <gnss_interface_setopt+0x26>
   3133e:	bf00      	nop
   31340:	20023d84 	.word	0x20023d84
   31344:	49765443 	.word	0x49765443
   31348:	20020454 	.word	0x20020454
   3134c:	20023d8c 	.word	0x20023d8c
   31350:	2002894c 	.word	0x2002894c
   31354:	20023d88 	.word	0x20023d88

00031358 <gnss_interface_getopt>:
   31358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3135c:	4c81      	ldr	r4, [pc, #516]	; (31564 <gnss_interface_getopt+0x20c>)
   3135e:	b087      	sub	sp, #28
   31360:	6825      	ldr	r5, [r4, #0]
   31362:	4698      	mov	r8, r3
   31364:	b2ad      	uxth	r5, r5
   31366:	2d02      	cmp	r5, #2
   31368:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3136a:	f040 80dd 	bne.w	31528 <gnss_interface_getopt+0x1d0>
   3136e:	6825      	ldr	r5, [r4, #0]
   31370:	03ee      	lsls	r6, r5, #15
   31372:	f100 80eb 	bmi.w	3154c <gnss_interface_getopt+0x1f4>
   31376:	6825      	ldr	r5, [r4, #0]
   31378:	01ed      	lsls	r5, r5, #7
   3137a:	f100 80ed 	bmi.w	31558 <gnss_interface_getopt+0x200>
   3137e:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   31382:	f040 80d7 	bne.w	31534 <gnss_interface_getopt+0x1dc>
   31386:	4978      	ldr	r1, [pc, #480]	; (31568 <gnss_interface_getopt+0x210>)
   31388:	4288      	cmp	r0, r1
   3138a:	f040 80d9 	bne.w	31540 <gnss_interface_getopt+0x1e8>
   3138e:	f1b8 0f00 	cmp.w	r8, #0
   31392:	d00b      	beq.n	313ac <gnss_interface_getopt+0x54>
   31394:	b153      	cbz	r3, 313ac <gnss_interface_getopt+0x54>
   31396:	1e57      	subs	r7, r2, #1
   31398:	2f05      	cmp	r7, #5
   3139a:	d807      	bhi.n	313ac <gnss_interface_getopt+0x54>
   3139c:	e8df f007 	tbb	[pc, r7]
   313a0:	0f030f0f 	.word	0x0f030f0f
   313a4:	0303      	.short	0x0303
   313a6:	681b      	ldr	r3, [r3, #0]
   313a8:	2b01      	cmp	r3, #1
   313aa:	d00b      	beq.n	313c4 <gnss_interface_getopt+0x6c>
   313ac:	2016      	movs	r0, #22
   313ae:	f7f8 fac3 	bl	29938 <bsd_os_errno_set>
   313b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   313b6:	4628      	mov	r0, r5
   313b8:	b007      	add	sp, #28
   313ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   313be:	681b      	ldr	r3, [r3, #0]
   313c0:	2b02      	cmp	r3, #2
   313c2:	d1f3      	bne.n	313ac <gnss_interface_getopt+0x54>
   313c4:	6823      	ldr	r3, [r4, #0]
   313c6:	2212      	movs	r2, #18
   313c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   313cc:	2100      	movs	r1, #0
   313ce:	a801      	add	r0, sp, #4
   313d0:	6023      	str	r3, [r4, #0]
   313d2:	f00a f80e 	bl	3b3f2 <memset>
   313d6:	2112      	movs	r1, #18
   313d8:	4668      	mov	r0, sp
   313da:	f002 f9b9 	bl	33750 <rpc_gnss_client_request_alloc>
   313de:	4605      	mov	r5, r0
   313e0:	9800      	ldr	r0, [sp, #0]
   313e2:	2d00      	cmp	r5, #0
   313e4:	f040 808a 	bne.w	314fc <gnss_interface_getopt+0x1a4>
   313e8:	2800      	cmp	r0, #0
   313ea:	f000 808e 	beq.w	3150a <gnss_interface_getopt+0x1b2>
   313ee:	f241 1602 	movw	r6, #4354	; 0x1102
   313f2:	f04f 0e49 	mov.w	lr, #73	; 0x49
   313f6:	2212      	movs	r2, #18
   313f8:	f04f 0976 	mov.w	r9, #118	; 0x76
   313fc:	f04f 0b43 	mov.w	fp, #67	; 0x43
   31400:	f04f 0a54 	mov.w	sl, #84	; 0x54
   31404:	f8df c168 	ldr.w	ip, [pc, #360]	; 31570 <gnss_interface_getopt+0x218>
   31408:	f880 e00f 	strb.w	lr, [r0, #15]
   3140c:	f8bc 3000 	ldrh.w	r3, [ip]
   31410:	f880 900e 	strb.w	r9, [r0, #14]
   31414:	3301      	adds	r3, #1
   31416:	b29b      	uxth	r3, r3
   31418:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   3141c:	f8cd e004 	str.w	lr, [sp, #4]
   31420:	7145      	strb	r5, [r0, #5]
   31422:	7185      	strb	r5, [r0, #6]
   31424:	71c5      	strb	r5, [r0, #7]
   31426:	7205      	strb	r5, [r0, #8]
   31428:	7245      	strb	r5, [r0, #9]
   3142a:	7285      	strb	r5, [r0, #10]
   3142c:	72c5      	strb	r5, [r0, #11]
   3142e:	a901      	add	r1, sp, #4
   31430:	7102      	strb	r2, [r0, #4]
   31432:	f880 b00c 	strb.w	fp, [r0, #12]
   31436:	f880 a00d 	strb.w	sl, [r0, #13]
   3143a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 31574 <gnss_interface_getopt+0x21c>
   3143e:	6800      	ldr	r0, [r0, #0]
   31440:	f8ac 3000 	strh.w	r3, [ip]
   31444:	f009 ffb5 	bl	3b3b2 <memcpy>
   31448:	4631      	mov	r1, r6
   3144a:	9800      	ldr	r0, [sp, #0]
   3144c:	f8c9 5000 	str.w	r5, [r9]
   31450:	f002 f992 	bl	33778 <rpc_gnss_client_request_send>
   31454:	2800      	cmp	r0, #0
   31456:	d15d      	bne.n	31514 <gnss_interface_getopt+0x1bc>
   31458:	4e44      	ldr	r6, [pc, #272]	; (3156c <gnss_interface_getopt+0x214>)
   3145a:	4d43      	ldr	r5, [pc, #268]	; (31568 <gnss_interface_getopt+0x210>)
   3145c:	4631      	mov	r1, r6
   3145e:	4628      	mov	r0, r5
   31460:	f7f8 f9b2 	bl	297c8 <bsd_os_timedwait>
   31464:	6823      	ldr	r3, [r4, #0]
   31466:	01db      	lsls	r3, r3, #7
   31468:	d4f8      	bmi.n	3145c <gnss_interface_getopt+0x104>
   3146a:	f8d9 0000 	ldr.w	r0, [r9]
   3146e:	b1d8      	cbz	r0, 314a8 <gnss_interface_getopt+0x150>
   31470:	6825      	ldr	r5, [r4, #0]
   31472:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   31476:	d00f      	beq.n	31498 <gnss_interface_getopt+0x140>
   31478:	2f05      	cmp	r7, #5
   3147a:	d837      	bhi.n	314ec <gnss_interface_getopt+0x194>
   3147c:	e8df f007 	tbb	[pc, r7]
   31480:	2b26201a 	.word	0x2b26201a
   31484:	0331      	.short	0x0331
   31486:	2500      	movs	r5, #0
   31488:	7b43      	ldrb	r3, [r0, #13]
   3148a:	f888 3000 	strb.w	r3, [r8]
   3148e:	f002 f991 	bl	337b4 <rpc_gnss_client_data_free>
   31492:	2300      	movs	r3, #0
   31494:	f8c9 3000 	str.w	r3, [r9]
   31498:	6823      	ldr	r3, [r4, #0]
   3149a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   3149e:	6023      	str	r3, [r4, #0]
   314a0:	4628      	mov	r0, r5
   314a2:	b007      	add	sp, #28
   314a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   314a8:	6823      	ldr	r3, [r4, #0]
   314aa:	4605      	mov	r5, r0
   314ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   314b0:	6023      	str	r3, [r4, #0]
   314b2:	e7f5      	b.n	314a0 <gnss_interface_getopt+0x148>
   314b4:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   314b8:	2500      	movs	r5, #0
   314ba:	f8a8 3000 	strh.w	r3, [r8]
   314be:	e7e6      	b.n	3148e <gnss_interface_getopt+0x136>
   314c0:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   314c4:	2500      	movs	r5, #0
   314c6:	f8a8 3000 	strh.w	r3, [r8]
   314ca:	e7e0      	b.n	3148e <gnss_interface_getopt+0x136>
   314cc:	7b83      	ldrb	r3, [r0, #14]
   314ce:	2500      	movs	r5, #0
   314d0:	f888 3000 	strb.w	r3, [r8]
   314d4:	e7db      	b.n	3148e <gnss_interface_getopt+0x136>
   314d6:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   314da:	2500      	movs	r5, #0
   314dc:	f8a8 3000 	strh.w	r3, [r8]
   314e0:	e7d5      	b.n	3148e <gnss_interface_getopt+0x136>
   314e2:	7b03      	ldrb	r3, [r0, #12]
   314e4:	2500      	movs	r5, #0
   314e6:	f888 3000 	strb.w	r3, [r8]
   314ea:	e7d0      	b.n	3148e <gnss_interface_getopt+0x136>
   314ec:	2016      	movs	r0, #22
   314ee:	f7f8 fa23 	bl	29938 <bsd_os_errno_set>
   314f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   314f6:	f8d9 0000 	ldr.w	r0, [r9]
   314fa:	e7c8      	b.n	3148e <gnss_interface_getopt+0x136>
   314fc:	b128      	cbz	r0, 3150a <gnss_interface_getopt+0x1b2>
   314fe:	6803      	ldr	r3, [r0, #0]
   31500:	b11b      	cbz	r3, 3150a <gnss_interface_getopt+0x1b2>
   31502:	4618      	mov	r0, r3
   31504:	f002 f956 	bl	337b4 <rpc_gnss_client_data_free>
   31508:	9800      	ldr	r0, [sp, #0]
   3150a:	f002 f94b 	bl	337a4 <rpc_gnss_client_message_free>
   3150e:	2023      	movs	r0, #35	; 0x23
   31510:	f7f8 fa12 	bl	29938 <bsd_os_errno_set>
   31514:	6823      	ldr	r3, [r4, #0]
   31516:	200e      	movs	r0, #14
   31518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   3151c:	6023      	str	r3, [r4, #0]
   3151e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   31522:	f7f8 fa09 	bl	29938 <bsd_os_errno_set>
   31526:	e746      	b.n	313b6 <gnss_interface_getopt+0x5e>
   31528:	200e      	movs	r0, #14
   3152a:	f7f8 fa05 	bl	29938 <bsd_os_errno_set>
   3152e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   31532:	e740      	b.n	313b6 <gnss_interface_getopt+0x5e>
   31534:	202a      	movs	r0, #42	; 0x2a
   31536:	f7f8 f9ff 	bl	29938 <bsd_os_errno_set>
   3153a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3153e:	e73a      	b.n	313b6 <gnss_interface_getopt+0x5e>
   31540:	2009      	movs	r0, #9
   31542:	f7f8 f9f9 	bl	29938 <bsd_os_errno_set>
   31546:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3154a:	e734      	b.n	313b6 <gnss_interface_getopt+0x5e>
   3154c:	2005      	movs	r0, #5
   3154e:	f7f8 f9f3 	bl	29938 <bsd_os_errno_set>
   31552:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   31556:	e72e      	b.n	313b6 <gnss_interface_getopt+0x5e>
   31558:	2073      	movs	r0, #115	; 0x73
   3155a:	f7f8 f9ed 	bl	29938 <bsd_os_errno_set>
   3155e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   31562:	e728      	b.n	313b6 <gnss_interface_getopt+0x5e>
   31564:	20023d84 	.word	0x20023d84
   31568:	49765443 	.word	0x49765443
   3156c:	20020454 	.word	0x20020454
   31570:	2002894c 	.word	0x2002894c
   31574:	20023d88 	.word	0x20023d88

00031578 <gnss_interface_init>:
   31578:	2100      	movs	r1, #0
   3157a:	b538      	push	{r3, r4, r5, lr}
   3157c:	4c0a      	ldr	r4, [pc, #40]	; (315a8 <gnss_interface_init+0x30>)
   3157e:	4d0b      	ldr	r5, [pc, #44]	; (315ac <gnss_interface_init+0x34>)
   31580:	6822      	ldr	r2, [r4, #0]
   31582:	480b      	ldr	r0, [pc, #44]	; (315b0 <gnss_interface_init+0x38>)
   31584:	4b0b      	ldr	r3, [pc, #44]	; (315b4 <gnss_interface_init+0x3c>)
   31586:	402a      	ands	r2, r5
   31588:	6022      	str	r2, [r4, #0]
   3158a:	8001      	strh	r1, [r0, #0]
   3158c:	6019      	str	r1, [r3, #0]
   3158e:	f002 f8d9 	bl	33744 <rpc_gnss_client_init>
   31592:	b938      	cbnz	r0, 315a4 <gnss_interface_init+0x2c>
   31594:	2101      	movs	r1, #1
   31596:	6823      	ldr	r3, [r4, #0]
   31598:	4a07      	ldr	r2, [pc, #28]	; (315b8 <gnss_interface_init+0x40>)
   3159a:	402b      	ands	r3, r5
   3159c:	430b      	orrs	r3, r1
   3159e:	7011      	strb	r1, [r2, #0]
   315a0:	6023      	str	r3, [r4, #0]
   315a2:	bd38      	pop	{r3, r4, r5, pc}
   315a4:	2003      	movs	r0, #3
   315a6:	bd38      	pop	{r3, r4, r5, pc}
   315a8:	20023d84 	.word	0x20023d84
   315ac:	ffff0000 	.word	0xffff0000
   315b0:	2002894c 	.word	0x2002894c
   315b4:	20023d88 	.word	0x20023d88
   315b8:	2002cb9a 	.word	0x2002cb9a

000315bc <gnss_interface_open>:
   315bc:	b510      	push	{r4, lr}
   315be:	4b1c      	ldr	r3, [pc, #112]	; (31630 <gnss_interface_open+0x74>)
   315c0:	781b      	ldrb	r3, [r3, #0]
   315c2:	b34b      	cbz	r3, 31618 <gnss_interface_open+0x5c>
   315c4:	2902      	cmp	r1, #2
   315c6:	d121      	bne.n	3160c <gnss_interface_open+0x50>
   315c8:	4c1a      	ldr	r4, [pc, #104]	; (31634 <gnss_interface_open+0x78>)
   315ca:	6823      	ldr	r3, [r4, #0]
   315cc:	b29b      	uxth	r3, r3
   315ce:	2b01      	cmp	r3, #1
   315d0:	d116      	bne.n	31600 <gnss_interface_open+0x44>
   315d2:	6823      	ldr	r3, [r4, #0]
   315d4:	4608      	mov	r0, r1
   315d6:	0c1b      	lsrs	r3, r3, #16
   315d8:	041b      	lsls	r3, r3, #16
   315da:	f043 0302 	orr.w	r3, r3, #2
   315de:	2200      	movs	r2, #0
   315e0:	4915      	ldr	r1, [pc, #84]	; (31638 <gnss_interface_open+0x7c>)
   315e2:	6023      	str	r3, [r4, #0]
   315e4:	f002 f9d0 	bl	33988 <packet_handler_create>
   315e8:	4a14      	ldr	r2, [pc, #80]	; (3163c <gnss_interface_open+0x80>)
   315ea:	6010      	str	r0, [r2, #0]
   315ec:	b1d0      	cbz	r0, 31624 <gnss_interface_open+0x68>
   315ee:	6823      	ldr	r3, [r4, #0]
   315f0:	6802      	ldr	r2, [r0, #0]
   315f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   315f6:	6812      	ldr	r2, [r2, #0]
   315f8:	6023      	str	r3, [r4, #0]
   315fa:	4790      	blx	r2
   315fc:	4810      	ldr	r0, [pc, #64]	; (31640 <gnss_interface_open+0x84>)
   315fe:	bd10      	pop	{r4, pc}
   31600:	2005      	movs	r0, #5
   31602:	f7f8 f999 	bl	29938 <bsd_os_errno_set>
   31606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3160a:	bd10      	pop	{r4, pc}
   3160c:	2029      	movs	r0, #41	; 0x29
   3160e:	f7f8 f993 	bl	29938 <bsd_os_errno_set>
   31612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31616:	bd10      	pop	{r4, pc}
   31618:	2070      	movs	r0, #112	; 0x70
   3161a:	f7f8 f98d 	bl	29938 <bsd_os_errno_set>
   3161e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31622:	bd10      	pop	{r4, pc}
   31624:	200e      	movs	r0, #14
   31626:	f7f8 f987 	bl	29938 <bsd_os_errno_set>
   3162a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3162e:	bd10      	pop	{r4, pc}
   31630:	2002cb9a 	.word	0x2002cb9a
   31634:	20023d84 	.word	0x20023d84
   31638:	00030899 	.word	0x00030899
   3163c:	20023d8c 	.word	0x20023d8c
   31640:	49765443 	.word	0x49765443

00031644 <gnss_interface_close>:
   31644:	b530      	push	{r4, r5, lr}
   31646:	4b15      	ldr	r3, [pc, #84]	; (3169c <gnss_interface_close+0x58>)
   31648:	b085      	sub	sp, #20
   3164a:	4298      	cmp	r0, r3
   3164c:	d11f      	bne.n	3168e <gnss_interface_close+0x4a>
   3164e:	4c14      	ldr	r4, [pc, #80]	; (316a0 <gnss_interface_close+0x5c>)
   31650:	6822      	ldr	r2, [r4, #0]
   31652:	b292      	uxth	r2, r2
   31654:	2a04      	cmp	r2, #4
   31656:	d00f      	beq.n	31678 <gnss_interface_close+0x34>
   31658:	4d12      	ldr	r5, [pc, #72]	; (316a4 <gnss_interface_close+0x60>)
   3165a:	6828      	ldr	r0, [r5, #0]
   3165c:	b118      	cbz	r0, 31666 <gnss_interface_close+0x22>
   3165e:	f002 f9b3 	bl	339c8 <packet_handler_delete>
   31662:	2300      	movs	r3, #0
   31664:	602b      	str	r3, [r5, #0]
   31666:	2000      	movs	r0, #0
   31668:	6823      	ldr	r3, [r4, #0]
   3166a:	0c1b      	lsrs	r3, r3, #16
   3166c:	041b      	lsls	r3, r3, #16
   3166e:	f043 0301 	orr.w	r3, r3, #1
   31672:	6023      	str	r3, [r4, #0]
   31674:	b005      	add	sp, #20
   31676:	bd30      	pop	{r4, r5, pc}
   31678:	2100      	movs	r1, #0
   3167a:	ab04      	add	r3, sp, #16
   3167c:	f843 1d04 	str.w	r1, [r3, #-4]!
   31680:	9200      	str	r2, [sp, #0]
   31682:	f44f 7101 	mov.w	r1, #516	; 0x204
   31686:	2208      	movs	r2, #8
   31688:	f001 fedc 	bl	33444 <nrf_setsockopt>
   3168c:	e7e4      	b.n	31658 <gnss_interface_close+0x14>
   3168e:	2009      	movs	r0, #9
   31690:	f7f8 f952 	bl	29938 <bsd_os_errno_set>
   31694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31698:	e7ec      	b.n	31674 <gnss_interface_close+0x30>
   3169a:	bf00      	nop
   3169c:	49765443 	.word	0x49765443
   316a0:	20023d84 	.word	0x20023d84
   316a4:	20023d8c 	.word	0x20023d8c

000316a8 <rpc_logobj_client_evt_handler>:
   316a8:	b120      	cbz	r0, 316b4 <rpc_logobj_client_evt_handler+0xc>
   316aa:	f850 1b08 	ldr.w	r1, [r0], #8
   316ae:	0c09      	lsrs	r1, r1, #16
   316b0:	f7fb b94e 	b.w	2c950 <logobj_event_handler>
   316b4:	4770      	bx	lr
   316b6:	bf00      	nop

000316b8 <rpc_logobj_client_init>:
   316b8:	4801      	ldr	r0, [pc, #4]	; (316c0 <rpc_logobj_client_init+0x8>)
   316ba:	f7ff b82f 	b.w	3071c <rpc_client_register>
   316be:	bf00      	nop
   316c0:	0003cb60 	.word	0x0003cb60

000316c4 <rpc_logobj_client_request_alloc>:
   316c4:	2300      	movs	r3, #0
   316c6:	b510      	push	{r4, lr}
   316c8:	b082      	sub	sp, #8
   316ca:	9301      	str	r3, [sp, #4]
   316cc:	b961      	cbnz	r1, 316e8 <rpc_logobj_client_request_alloc+0x24>
   316ce:	b170      	cbz	r0, 316ee <rpc_logobj_client_request_alloc+0x2a>
   316d0:	4604      	mov	r4, r0
   316d2:	aa01      	add	r2, sp, #4
   316d4:	2009      	movs	r0, #9
   316d6:	f7ff f89b 	bl	30810 <rpc_message_alloc>
   316da:	b918      	cbnz	r0, 316e4 <rpc_logobj_client_request_alloc+0x20>
   316dc:	9b01      	ldr	r3, [sp, #4]
   316de:	b10b      	cbz	r3, 316e4 <rpc_logobj_client_request_alloc+0x20>
   316e0:	3308      	adds	r3, #8
   316e2:	6023      	str	r3, [r4, #0]
   316e4:	b002      	add	sp, #8
   316e6:	bd10      	pop	{r4, pc}
   316e8:	200f      	movs	r0, #15
   316ea:	b002      	add	sp, #8
   316ec:	bd10      	pop	{r4, pc}
   316ee:	200e      	movs	r0, #14
   316f0:	b002      	add	sp, #8
   316f2:	bd10      	pop	{r4, pc}

000316f4 <rpc_logobj_client_request_send>:
   316f4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   316f8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   316fc:	d10b      	bne.n	31716 <rpc_logobj_client_request_send+0x22>
   316fe:	b160      	cbz	r0, 3171a <rpc_logobj_client_request_send+0x26>
   31700:	4603      	mov	r3, r0
   31702:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   31706:	2009      	movs	r0, #9
   31708:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3170c:	f843 1d08 	str.w	r1, [r3, #-8]!
   31710:	4619      	mov	r1, r3
   31712:	f7ff b86d 	b.w	307f0 <rpc_message_send>
   31716:	200f      	movs	r0, #15
   31718:	4770      	bx	lr
   3171a:	200e      	movs	r0, #14
   3171c:	4770      	bx	lr
   3171e:	bf00      	nop

00031720 <rpc_logobj_client_message_free>:
   31720:	b120      	cbz	r0, 3172c <rpc_logobj_client_message_free+0xc>
   31722:	f1a0 0108 	sub.w	r1, r0, #8
   31726:	2009      	movs	r0, #9
   31728:	f7ff b89e 	b.w	30868 <rpc_message_free>
   3172c:	200e      	movs	r0, #14
   3172e:	4770      	bx	lr

00031730 <rpc_logobj_client_data_free>:
   31730:	b118      	cbz	r0, 3173a <rpc_logobj_client_data_free+0xa>
   31732:	4601      	mov	r1, r0
   31734:	2009      	movs	r0, #9
   31736:	f7ff b8a3 	b.w	30880 <rpc_message_data_free>
   3173a:	200e      	movs	r0, #14
   3173c:	4770      	bx	lr
   3173e:	bf00      	nop

00031740 <dfu_client_event_handler>:
   31740:	f850 1b08 	ldr.w	r1, [r0], #8
   31744:	0c09      	lsrs	r1, r1, #16
   31746:	f002 bef5 	b.w	34534 <rpc_dfu_event_handler>
   3174a:	bf00      	nop

0003174c <rpc_dfu_client_init>:
   3174c:	4801      	ldr	r0, [pc, #4]	; (31754 <rpc_dfu_client_init+0x8>)
   3174e:	f7fe bfe5 	b.w	3071c <rpc_client_register>
   31752:	bf00      	nop
   31754:	0003cb70 	.word	0x0003cb70

00031758 <rpc_dfu_client_request_alloc>:
   31758:	2300      	movs	r3, #0
   3175a:	b510      	push	{r4, lr}
   3175c:	b082      	sub	sp, #8
   3175e:	9301      	str	r3, [sp, #4]
   31760:	b158      	cbz	r0, 3177a <rpc_dfu_client_request_alloc+0x22>
   31762:	4604      	mov	r4, r0
   31764:	aa01      	add	r2, sp, #4
   31766:	2006      	movs	r0, #6
   31768:	f7ff f852 	bl	30810 <rpc_message_alloc>
   3176c:	b918      	cbnz	r0, 31776 <rpc_dfu_client_request_alloc+0x1e>
   3176e:	9b01      	ldr	r3, [sp, #4]
   31770:	b10b      	cbz	r3, 31776 <rpc_dfu_client_request_alloc+0x1e>
   31772:	3308      	adds	r3, #8
   31774:	6023      	str	r3, [r4, #0]
   31776:	b002      	add	sp, #8
   31778:	bd10      	pop	{r4, pc}
   3177a:	2007      	movs	r0, #7
   3177c:	b002      	add	sp, #8
   3177e:	bd10      	pop	{r4, pc}

00031780 <rpc_dfu_client_request_send>:
   31780:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   31784:	d10b      	bne.n	3179e <rpc_dfu_client_request_send+0x1e>
   31786:	b160      	cbz	r0, 317a2 <rpc_dfu_client_request_send+0x22>
   31788:	4603      	mov	r3, r0
   3178a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3178e:	2006      	movs	r0, #6
   31790:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   31794:	f843 1d08 	str.w	r1, [r3, #-8]!
   31798:	4619      	mov	r1, r3
   3179a:	f7ff b829 	b.w	307f0 <rpc_message_send>
   3179e:	200f      	movs	r0, #15
   317a0:	4770      	bx	lr
   317a2:	2007      	movs	r0, #7
   317a4:	4770      	bx	lr
   317a6:	bf00      	nop

000317a8 <rpc_dfu_client_message_free>:
   317a8:	b120      	cbz	r0, 317b4 <rpc_dfu_client_message_free+0xc>
   317aa:	f1a0 0108 	sub.w	r1, r0, #8
   317ae:	2006      	movs	r0, #6
   317b0:	f7ff b85a 	b.w	30868 <rpc_message_free>
   317b4:	2007      	movs	r0, #7
   317b6:	4770      	bx	lr

000317b8 <rpc_dfu_client_data_free>:
   317b8:	b118      	cbz	r0, 317c2 <rpc_dfu_client_data_free+0xa>
   317ba:	4601      	mov	r1, r0
   317bc:	2006      	movs	r0, #6
   317be:	f7ff b85f 	b.w	30880 <rpc_message_data_free>
   317c2:	2007      	movs	r0, #7
   317c4:	4770      	bx	lr
   317c6:	bf00      	nop

000317c8 <packet_free_cb>:
   317c8:	6800      	ldr	r0, [r0, #0]
   317ca:	f003 bc0d 	b.w	34fe8 <rpc_at_client_data_free>
   317ce:	bf00      	nop

000317d0 <at_interface_write>:
   317d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   317d4:	b083      	sub	sp, #12
   317d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   317d8:	2c00      	cmp	r4, #0
   317da:	d16c      	bne.n	318b6 <at_interface_write+0xe6>
   317dc:	4688      	mov	r8, r1
   317de:	4615      	mov	r5, r2
   317e0:	461e      	mov	r6, r3
   317e2:	4607      	mov	r7, r0
   317e4:	f003 fad2 	bl	34d8c <interface_socket_from_handle_get>
   317e8:	4604      	mov	r4, r0
   317ea:	2e00      	cmp	r6, #0
   317ec:	d137      	bne.n	3185e <at_interface_write+0x8e>
   317ee:	2800      	cmp	r0, #0
   317f0:	d067      	beq.n	318c2 <at_interface_write+0xf2>
   317f2:	6803      	ldr	r3, [r0, #0]
   317f4:	039b      	lsls	r3, r3, #14
   317f6:	d564      	bpl.n	318c2 <at_interface_write+0xf2>
   317f8:	6803      	ldr	r3, [r0, #0]
   317fa:	4629      	mov	r1, r5
   317fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   31800:	6003      	str	r3, [r0, #0]
   31802:	6803      	ldr	r3, [r0, #0]
   31804:	4668      	mov	r0, sp
   31806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   3180a:	6023      	str	r3, [r4, #0]
   3180c:	f003 fbc2 	bl	34f94 <rpc_at_client_request_alloc>
   31810:	4606      	mov	r6, r0
   31812:	4638      	mov	r0, r7
   31814:	f003 faba 	bl	34d8c <interface_socket_from_handle_get>
   31818:	4681      	mov	r9, r0
   3181a:	bb56      	cbnz	r6, 31872 <at_interface_write+0xa2>
   3181c:	2304      	movs	r3, #4
   3181e:	9800      	ldr	r0, [sp, #0]
   31820:	7203      	strb	r3, [r0, #8]
   31822:	7246      	strb	r6, [r0, #9]
   31824:	7286      	strb	r6, [r0, #10]
   31826:	72c6      	strb	r6, [r0, #11]
   31828:	60c7      	str	r7, [r0, #12]
   3182a:	bb25      	cbnz	r5, 31876 <at_interface_write+0xa6>
   3182c:	2101      	movs	r1, #1
   3182e:	f003 fbc5 	bl	34fbc <rpc_at_client_request_send>
   31832:	bb78      	cbnz	r0, 31894 <at_interface_write+0xc4>
   31834:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   31838:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   3183c:	2900      	cmp	r1, #0
   3183e:	bf08      	it	eq
   31840:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   31844:	ab02      	add	r3, sp, #8
   31846:	f843 1d04 	str.w	r1, [r3, #-4]!
   3184a:	4638      	mov	r0, r7
   3184c:	4611      	mov	r1, r2
   3184e:	f003 fa29 	bl	34ca4 <interface_socket_wait>
   31852:	b320      	cbz	r0, 3189e <at_interface_write+0xce>
   31854:	6823      	ldr	r3, [r4, #0]
   31856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3185a:	6023      	str	r3, [r4, #0]
   3185c:	e002      	b.n	31864 <at_interface_write+0x94>
   3185e:	b390      	cbz	r0, 318c6 <at_interface_write+0xf6>
   31860:	6803      	ldr	r3, [r0, #0]
   31862:	202d      	movs	r0, #45	; 0x2d
   31864:	f7f8 f868 	bl	29938 <bsd_os_errno_set>
   31868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3186c:	b003      	add	sp, #12
   3186e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31872:	200c      	movs	r0, #12
   31874:	e7ee      	b.n	31854 <at_interface_write+0x84>
   31876:	4641      	mov	r1, r8
   31878:	6800      	ldr	r0, [r0, #0]
   3187a:	462a      	mov	r2, r5
   3187c:	f009 fd99 	bl	3b3b2 <memcpy>
   31880:	2101      	movs	r1, #1
   31882:	9800      	ldr	r0, [sp, #0]
   31884:	f003 fb9a 	bl	34fbc <rpc_at_client_request_send>
   31888:	2800      	cmp	r0, #0
   3188a:	d0d3      	beq.n	31834 <at_interface_write+0x64>
   3188c:	9b00      	ldr	r3, [sp, #0]
   3188e:	6818      	ldr	r0, [r3, #0]
   31890:	f003 fbaa 	bl	34fe8 <rpc_at_client_data_free>
   31894:	9800      	ldr	r0, [sp, #0]
   31896:	f003 fb9f 	bl	34fd8 <rpc_at_client_message_free>
   3189a:	2023      	movs	r0, #35	; 0x23
   3189c:	e7da      	b.n	31854 <at_interface_write+0x84>
   3189e:	4638      	mov	r0, r7
   318a0:	f003 fa74 	bl	34d8c <interface_socket_from_handle_get>
   318a4:	4603      	mov	r3, r0
   318a6:	b120      	cbz	r0, 318b2 <at_interface_write+0xe2>
   318a8:	6840      	ldr	r0, [r0, #4]
   318aa:	b110      	cbz	r0, 318b2 <at_interface_write+0xe2>
   318ac:	2200      	movs	r2, #0
   318ae:	605a      	str	r2, [r3, #4]
   318b0:	e7d0      	b.n	31854 <at_interface_write+0x84>
   318b2:	4628      	mov	r0, r5
   318b4:	e7da      	b.n	3186c <at_interface_write+0x9c>
   318b6:	2038      	movs	r0, #56	; 0x38
   318b8:	f7f8 f83e 	bl	29938 <bsd_os_errno_set>
   318bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   318c0:	e7d4      	b.n	3186c <at_interface_write+0x9c>
   318c2:	2016      	movs	r0, #22
   318c4:	e7ce      	b.n	31864 <at_interface_write+0x94>
   318c6:	202d      	movs	r0, #45	; 0x2d
   318c8:	e7cc      	b.n	31864 <at_interface_write+0x94>
   318ca:	bf00      	nop

000318cc <at_interface_init>:
   318cc:	b508      	push	{r3, lr}
   318ce:	f003 fb5b 	bl	34f88 <rpc_at_client_init>
   318d2:	b910      	cbnz	r0, 318da <at_interface_init+0xe>
   318d4:	2201      	movs	r2, #1
   318d6:	4b01      	ldr	r3, [pc, #4]	; (318dc <at_interface_init+0x10>)
   318d8:	701a      	strb	r2, [r3, #0]
   318da:	bd08      	pop	{r3, pc}
   318dc:	2002cb9b 	.word	0x2002cb9b

000318e0 <at_interface_open>:
   318e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   318e4:	2600      	movs	r6, #0
   318e6:	4b34      	ldr	r3, [pc, #208]	; (319b8 <at_interface_open+0xd8>)
   318e8:	b084      	sub	sp, #16
   318ea:	781b      	ldrb	r3, [r3, #0]
   318ec:	9601      	str	r6, [sp, #4]
   318ee:	2b00      	cmp	r3, #0
   318f0:	d05c      	beq.n	319ac <at_interface_open+0xcc>
   318f2:	2902      	cmp	r1, #2
   318f4:	460d      	mov	r5, r1
   318f6:	d153      	bne.n	319a0 <at_interface_open+0xc0>
   318f8:	4680      	mov	r8, r0
   318fa:	4617      	mov	r7, r2
   318fc:	a801      	add	r0, sp, #4
   318fe:	4a2f      	ldr	r2, [pc, #188]	; (319bc <at_interface_open+0xdc>)
   31900:	f003 f91e 	bl	34b40 <interface_socket_allocate>
   31904:	9b01      	ldr	r3, [sp, #4]
   31906:	4604      	mov	r4, r0
   31908:	b3c3      	cbz	r3, 3197c <at_interface_open+0x9c>
   3190a:	615f      	str	r7, [r3, #20]
   3190c:	4631      	mov	r1, r6
   3190e:	e9c3 8503 	strd	r8, r5, [r3, #12]
   31912:	a802      	add	r0, sp, #8
   31914:	f003 fb3e 	bl	34f94 <rpc_at_client_request_alloc>
   31918:	4606      	mov	r6, r0
   3191a:	4620      	mov	r0, r4
   3191c:	f003 fa36 	bl	34d8c <interface_socket_from_handle_get>
   31920:	4607      	mov	r7, r0
   31922:	bb16      	cbnz	r6, 3196a <at_interface_open+0x8a>
   31924:	2304      	movs	r3, #4
   31926:	9802      	ldr	r0, [sp, #8]
   31928:	2105      	movs	r1, #5
   3192a:	7246      	strb	r6, [r0, #9]
   3192c:	7286      	strb	r6, [r0, #10]
   3192e:	72c6      	strb	r6, [r0, #11]
   31930:	7203      	strb	r3, [r0, #8]
   31932:	60c4      	str	r4, [r0, #12]
   31934:	f003 fb42 	bl	34fbc <rpc_at_client_request_send>
   31938:	4606      	mov	r6, r0
   3193a:	bb60      	cbnz	r0, 31996 <at_interface_open+0xb6>
   3193c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3193e:	ab04      	add	r3, sp, #16
   31940:	2a00      	cmp	r2, #0
   31942:	bf08      	it	eq
   31944:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   31948:	4629      	mov	r1, r5
   3194a:	f843 2d04 	str.w	r2, [r3, #-4]!
   3194e:	4620      	mov	r0, r4
   31950:	462a      	mov	r2, r5
   31952:	f003 f9a7 	bl	34ca4 <interface_socket_wait>
   31956:	4605      	mov	r5, r0
   31958:	b940      	cbnz	r0, 3196c <at_interface_open+0x8c>
   3195a:	4620      	mov	r0, r4
   3195c:	f003 fa16 	bl	34d8c <interface_socket_from_handle_get>
   31960:	b180      	cbz	r0, 31984 <at_interface_open+0xa4>
   31962:	6845      	ldr	r5, [r0, #4]
   31964:	b175      	cbz	r5, 31984 <at_interface_open+0xa4>
   31966:	6046      	str	r6, [r0, #4]
   31968:	e000      	b.n	3196c <at_interface_open+0x8c>
   3196a:	250c      	movs	r5, #12
   3196c:	4620      	mov	r0, r4
   3196e:	f003 f94b 	bl	34c08 <interface_socket_free>
   31972:	4628      	mov	r0, r5
   31974:	f7f7 ffe0 	bl	29938 <bsd_os_errno_set>
   31978:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3197c:	4620      	mov	r0, r4
   3197e:	b004      	add	sp, #16
   31980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31984:	4620      	mov	r0, r4
   31986:	9a01      	ldr	r2, [sp, #4]
   31988:	6813      	ldr	r3, [r2, #0]
   3198a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3198e:	6013      	str	r3, [r2, #0]
   31990:	b004      	add	sp, #16
   31992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31996:	9802      	ldr	r0, [sp, #8]
   31998:	f003 fb1e 	bl	34fd8 <rpc_at_client_message_free>
   3199c:	2523      	movs	r5, #35	; 0x23
   3199e:	e7e5      	b.n	3196c <at_interface_open+0x8c>
   319a0:	2029      	movs	r0, #41	; 0x29
   319a2:	f7f7 ffc9 	bl	29938 <bsd_os_errno_set>
   319a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   319aa:	e7e7      	b.n	3197c <at_interface_open+0x9c>
   319ac:	2070      	movs	r0, #112	; 0x70
   319ae:	f7f7 ffc3 	bl	29938 <bsd_os_errno_set>
   319b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   319b6:	e7e1      	b.n	3197c <at_interface_open+0x9c>
   319b8:	2002cb9b 	.word	0x2002cb9b
   319bc:	000317c9 	.word	0x000317c9

000319c0 <at_interface_close>:
   319c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   319c4:	b082      	sub	sp, #8
   319c6:	4606      	mov	r6, r0
   319c8:	f003 f9e0 	bl	34d8c <interface_socket_from_handle_get>
   319cc:	2800      	cmp	r0, #0
   319ce:	d051      	beq.n	31a74 <at_interface_close+0xb4>
   319d0:	230d      	movs	r3, #13
   319d2:	6807      	ldr	r7, [r0, #0]
   319d4:	6003      	str	r3, [r0, #0]
   319d6:	6803      	ldr	r3, [r0, #0]
   319d8:	4604      	mov	r4, r0
   319da:	039b      	lsls	r3, r3, #14
   319dc:	d42e      	bmi.n	31a3c <at_interface_close+0x7c>
   319de:	2100      	movs	r1, #0
   319e0:	4668      	mov	r0, sp
   319e2:	f003 fad7 	bl	34f94 <rpc_at_client_request_alloc>
   319e6:	4605      	mov	r5, r0
   319e8:	4630      	mov	r0, r6
   319ea:	f003 f9cf 	bl	34d8c <interface_socket_from_handle_get>
   319ee:	4680      	mov	r8, r0
   319f0:	bb75      	cbnz	r5, 31a50 <at_interface_close+0x90>
   319f2:	2304      	movs	r3, #4
   319f4:	9800      	ldr	r0, [sp, #0]
   319f6:	2106      	movs	r1, #6
   319f8:	7203      	strb	r3, [r0, #8]
   319fa:	7245      	strb	r5, [r0, #9]
   319fc:	7285      	strb	r5, [r0, #10]
   319fe:	72c5      	strb	r5, [r0, #11]
   31a00:	60c6      	str	r6, [r0, #12]
   31a02:	f003 fadb 	bl	34fbc <rpc_at_client_request_send>
   31a06:	b9f0      	cbnz	r0, 31a46 <at_interface_close+0x86>
   31a08:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   31a0c:	220e      	movs	r2, #14
   31a0e:	2900      	cmp	r1, #0
   31a10:	bf08      	it	eq
   31a12:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   31a16:	ab02      	add	r3, sp, #8
   31a18:	f843 1d04 	str.w	r1, [r3, #-4]!
   31a1c:	4630      	mov	r0, r6
   31a1e:	4611      	mov	r1, r2
   31a20:	f003 f940 	bl	34ca4 <interface_socket_wait>
   31a24:	4605      	mov	r5, r0
   31a26:	b1a8      	cbz	r0, 31a54 <at_interface_close+0x94>
   31a28:	6027      	str	r7, [r4, #0]
   31a2a:	4628      	mov	r0, r5
   31a2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   31a30:	f7f7 ff82 	bl	29938 <bsd_os_errno_set>
   31a34:	4628      	mov	r0, r5
   31a36:	b002      	add	sp, #8
   31a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31a3c:	6803      	ldr	r3, [r0, #0]
   31a3e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   31a42:	6003      	str	r3, [r0, #0]
   31a44:	e7cb      	b.n	319de <at_interface_close+0x1e>
   31a46:	9800      	ldr	r0, [sp, #0]
   31a48:	f003 fac6 	bl	34fd8 <rpc_at_client_message_free>
   31a4c:	2523      	movs	r5, #35	; 0x23
   31a4e:	e7eb      	b.n	31a28 <at_interface_close+0x68>
   31a50:	250c      	movs	r5, #12
   31a52:	e7e9      	b.n	31a28 <at_interface_close+0x68>
   31a54:	4630      	mov	r0, r6
   31a56:	f003 f999 	bl	34d8c <interface_socket_from_handle_get>
   31a5a:	b120      	cbz	r0, 31a66 <at_interface_close+0xa6>
   31a5c:	6843      	ldr	r3, [r0, #4]
   31a5e:	b113      	cbz	r3, 31a66 <at_interface_close+0xa6>
   31a60:	6045      	str	r5, [r0, #4]
   31a62:	461d      	mov	r5, r3
   31a64:	e7e0      	b.n	31a28 <at_interface_close+0x68>
   31a66:	4630      	mov	r0, r6
   31a68:	f003 f8ce 	bl	34c08 <interface_socket_free>
   31a6c:	4628      	mov	r0, r5
   31a6e:	b002      	add	sp, #8
   31a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31a74:	2516      	movs	r5, #22
   31a76:	e7d8      	b.n	31a2a <at_interface_close+0x6a>

00031a78 <at_interface_read>:
   31a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31a7c:	b087      	sub	sp, #28
   31a7e:	4688      	mov	r8, r1
   31a80:	4615      	mov	r5, r2
   31a82:	461e      	mov	r6, r3
   31a84:	4607      	mov	r7, r0
   31a86:	f003 f981 	bl	34d8c <interface_socket_from_handle_get>
   31a8a:	2800      	cmp	r0, #0
   31a8c:	f000 8084 	beq.w	31b98 <at_interface_read+0x120>
   31a90:	2300      	movs	r3, #0
   31a92:	4604      	mov	r4, r0
   31a94:	e9cd 8502 	strd	r8, r5, [sp, #8]
   31a98:	e9cd 3304 	strd	r3, r3, [sp, #16]
   31a9c:	2e00      	cmp	r6, #0
   31a9e:	d12d      	bne.n	31afc <at_interface_read+0x84>
   31aa0:	f016 0502 	ands.w	r5, r6, #2
   31aa4:	d148      	bne.n	31b38 <at_interface_read+0xc0>
   31aa6:	46a8      	mov	r8, r5
   31aa8:	6823      	ldr	r3, [r4, #0]
   31aaa:	69e0      	ldr	r0, [r4, #28]
   31aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   31ab0:	6023      	str	r3, [r4, #0]
   31ab2:	6803      	ldr	r3, [r0, #0]
   31ab4:	4632      	mov	r2, r6
   31ab6:	689b      	ldr	r3, [r3, #8]
   31ab8:	a902      	add	r1, sp, #8
   31aba:	4798      	blx	r3
   31abc:	f1b0 0900 	subs.w	r9, r0, #0
   31ac0:	da2a      	bge.n	31b18 <at_interface_read+0xa0>
   31ac2:	2d00      	cmp	r5, #0
   31ac4:	d15e      	bne.n	31b84 <at_interface_read+0x10c>
   31ac6:	6a25      	ldr	r5, [r4, #32]
   31ac8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   31acc:	2d00      	cmp	r5, #0
   31ace:	bf08      	it	eq
   31ad0:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   31ad4:	4611      	mov	r1, r2
   31ad6:	ab01      	add	r3, sp, #4
   31ad8:	4638      	mov	r0, r7
   31ada:	9501      	str	r5, [sp, #4]
   31adc:	f003 f8e2 	bl	34ca4 <interface_socket_wait>
   31ae0:	4605      	mov	r5, r0
   31ae2:	2800      	cmp	r0, #0
   31ae4:	d1e0      	bne.n	31aa8 <at_interface_read+0x30>
   31ae6:	4638      	mov	r0, r7
   31ae8:	f003 f950 	bl	34d8c <interface_socket_from_handle_get>
   31aec:	2800      	cmp	r0, #0
   31aee:	d0db      	beq.n	31aa8 <at_interface_read+0x30>
   31af0:	6845      	ldr	r5, [r0, #4]
   31af2:	2d00      	cmp	r5, #0
   31af4:	d0d8      	beq.n	31aa8 <at_interface_read+0x30>
   31af6:	f8c0 8004 	str.w	r8, [r0, #4]
   31afa:	e7d5      	b.n	31aa8 <at_interface_read+0x30>
   31afc:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   31b00:	d1ce      	bne.n	31aa0 <at_interface_read+0x28>
   31b02:	252d      	movs	r5, #45	; 0x2d
   31b04:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   31b08:	4628      	mov	r0, r5
   31b0a:	f7f7 ff15 	bl	29938 <bsd_os_errno_set>
   31b0e:	4648      	mov	r0, r9
   31b10:	b007      	add	sp, #28
   31b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31b16:	2500      	movs	r5, #0
   31b18:	69e0      	ldr	r0, [r4, #28]
   31b1a:	6803      	ldr	r3, [r0, #0]
   31b1c:	68db      	ldr	r3, [r3, #12]
   31b1e:	4798      	blx	r3
   31b20:	3001      	adds	r0, #1
   31b22:	d003      	beq.n	31b2c <at_interface_read+0xb4>
   31b24:	6823      	ldr	r3, [r4, #0]
   31b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   31b2a:	6023      	str	r3, [r4, #0]
   31b2c:	2d00      	cmp	r5, #0
   31b2e:	d1eb      	bne.n	31b08 <at_interface_read+0x90>
   31b30:	4648      	mov	r0, r9
   31b32:	b007      	add	sp, #28
   31b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31b38:	6823      	ldr	r3, [r4, #0]
   31b3a:	69e0      	ldr	r0, [r4, #28]
   31b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   31b40:	6023      	str	r3, [r4, #0]
   31b42:	6803      	ldr	r3, [r0, #0]
   31b44:	4632      	mov	r2, r6
   31b46:	689b      	ldr	r3, [r3, #8]
   31b48:	a902      	add	r1, sp, #8
   31b4a:	4798      	blx	r3
   31b4c:	f1b0 0900 	subs.w	r9, r0, #0
   31b50:	dae1      	bge.n	31b16 <at_interface_read+0x9e>
   31b52:	69e0      	ldr	r0, [r4, #28]
   31b54:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   31b58:	6803      	ldr	r3, [r0, #0]
   31b5a:	68db      	ldr	r3, [r3, #12]
   31b5c:	d10a      	bne.n	31b74 <at_interface_read+0xfc>
   31b5e:	2523      	movs	r5, #35	; 0x23
   31b60:	4798      	blx	r3
   31b62:	3001      	adds	r0, #1
   31b64:	d0ce      	beq.n	31b04 <at_interface_read+0x8c>
   31b66:	6823      	ldr	r3, [r4, #0]
   31b68:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   31b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   31b70:	6023      	str	r3, [r4, #0]
   31b72:	e7db      	b.n	31b2c <at_interface_read+0xb4>
   31b74:	4798      	blx	r3
   31b76:	3001      	adds	r0, #1
   31b78:	d0c9      	beq.n	31b0e <at_interface_read+0x96>
   31b7a:	6823      	ldr	r3, [r4, #0]
   31b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   31b80:	6023      	str	r3, [r4, #0]
   31b82:	e7c4      	b.n	31b0e <at_interface_read+0x96>
   31b84:	69e0      	ldr	r0, [r4, #28]
   31b86:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   31b8a:	6803      	ldr	r3, [r0, #0]
   31b8c:	68db      	ldr	r3, [r3, #12]
   31b8e:	d0e7      	beq.n	31b60 <at_interface_read+0xe8>
   31b90:	4798      	blx	r3
   31b92:	3001      	adds	r0, #1
   31b94:	d1c6      	bne.n	31b24 <at_interface_read+0xac>
   31b96:	e7b7      	b.n	31b08 <at_interface_read+0x90>
   31b98:	2516      	movs	r5, #22
   31b9a:	e7b3      	b.n	31b04 <at_interface_read+0x8c>

00031b9c <at_interface_getopt>:
   31b9c:	f003 b964 	b.w	34e68 <interface_socket_getopt>

00031ba0 <at_interface_setopt>:
   31ba0:	f003 b91c 	b.w	34ddc <interface_socket_setopt>

00031ba4 <rpc_at_event_handler>:
   31ba4:	b570      	push	{r4, r5, r6, lr}
   31ba6:	4606      	mov	r6, r0
   31ba8:	b084      	sub	sp, #16
   31baa:	68c0      	ldr	r0, [r0, #12]
   31bac:	460d      	mov	r5, r1
   31bae:	f003 f8ed 	bl	34d8c <interface_socket_from_handle_get>
   31bb2:	4604      	mov	r4, r0
   31bb4:	b348      	cbz	r0, 31c0a <rpc_at_event_handler+0x66>
   31bb6:	6803      	ldr	r3, [r0, #0]
   31bb8:	b29b      	uxth	r3, r3
   31bba:	2b01      	cmp	r3, #1
   31bbc:	d01f      	beq.n	31bfe <rpc_at_event_handler+0x5a>
   31bbe:	6803      	ldr	r3, [r0, #0]
   31bc0:	b29b      	uxth	r3, r3
   31bc2:	2b0d      	cmp	r3, #13
   31bc4:	d029      	beq.n	31c1a <rpc_at_event_handler+0x76>
   31bc6:	6803      	ldr	r3, [r0, #0]
   31bc8:	b29b      	uxth	r3, r3
   31bca:	2b02      	cmp	r3, #2
   31bcc:	d02d      	beq.n	31c2a <rpc_at_event_handler+0x86>
   31bce:	3d03      	subs	r5, #3
   31bd0:	2d01      	cmp	r5, #1
   31bd2:	d817      	bhi.n	31c04 <rpc_at_event_handler+0x60>
   31bd4:	2500      	movs	r5, #0
   31bd6:	6873      	ldr	r3, [r6, #4]
   31bd8:	6832      	ldr	r2, [r6, #0]
   31bda:	e9cd 5502 	strd	r5, r5, [sp, #8]
   31bde:	e9cd 2300 	strd	r2, r3, [sp]
   31be2:	69e0      	ldr	r0, [r4, #28]
   31be4:	4669      	mov	r1, sp
   31be6:	6803      	ldr	r3, [r0, #0]
   31be8:	685b      	ldr	r3, [r3, #4]
   31bea:	4798      	blx	r3
   31bec:	3001      	adds	r0, #1
   31bee:	d019      	beq.n	31c24 <rpc_at_event_handler+0x80>
   31bf0:	4628      	mov	r0, r5
   31bf2:	6823      	ldr	r3, [r4, #0]
   31bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   31bf8:	6023      	str	r3, [r4, #0]
   31bfa:	b004      	add	sp, #16
   31bfc:	bd70      	pop	{r4, r5, r6, pc}
   31bfe:	2d02      	cmp	r5, #2
   31c00:	d1e5      	bne.n	31bce <rpc_at_event_handler+0x2a>
   31c02:	6005      	str	r5, [r0, #0]
   31c04:	2000      	movs	r0, #0
   31c06:	b004      	add	sp, #16
   31c08:	bd70      	pop	{r4, r5, r6, pc}
   31c0a:	6830      	ldr	r0, [r6, #0]
   31c0c:	2800      	cmp	r0, #0
   31c0e:	d0f9      	beq.n	31c04 <rpc_at_event_handler+0x60>
   31c10:	f003 f9ea 	bl	34fe8 <rpc_at_client_data_free>
   31c14:	4620      	mov	r0, r4
   31c16:	b004      	add	sp, #16
   31c18:	bd70      	pop	{r4, r5, r6, pc}
   31c1a:	2d02      	cmp	r5, #2
   31c1c:	d1d7      	bne.n	31bce <rpc_at_event_handler+0x2a>
   31c1e:	230e      	movs	r3, #14
   31c20:	6003      	str	r3, [r0, #0]
   31c22:	e7ef      	b.n	31c04 <rpc_at_event_handler+0x60>
   31c24:	2002      	movs	r0, #2
   31c26:	b004      	add	sp, #16
   31c28:	bd70      	pop	{r4, r5, r6, pc}
   31c2a:	6803      	ldr	r3, [r0, #0]
   31c2c:	029b      	lsls	r3, r3, #10
   31c2e:	d5ce      	bpl.n	31bce <rpc_at_event_handler+0x2a>
   31c30:	2d02      	cmp	r5, #2
   31c32:	d1cc      	bne.n	31bce <rpc_at_event_handler+0x2a>
   31c34:	6803      	ldr	r3, [r0, #0]
   31c36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   31c3a:	6003      	str	r3, [r0, #0]
   31c3c:	6803      	ldr	r3, [r0, #0]
   31c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   31c42:	6003      	str	r3, [r0, #0]
   31c44:	e7de      	b.n	31c04 <rpc_at_event_handler+0x60>
   31c46:	bf00      	nop

00031c48 <ok_rsp_parser>:
   31c48:	2000      	movs	r0, #0
   31c4a:	4770      	bx	lr

00031c4c <pdn_state_get_parser>:
   31c4c:	2200      	movs	r2, #0
   31c4e:	b570      	push	{r4, r5, r6, lr}
   31c50:	780b      	ldrb	r3, [r1, #0]
   31c52:	b084      	sub	sp, #16
   31c54:	460e      	mov	r6, r1
   31c56:	e9cd 2200 	strd	r2, r2, [sp]
   31c5a:	e9cd 2202 	strd	r2, r2, [sp, #8]
   31c5e:	b323      	cbz	r3, 31caa <pdn_state_get_parser+0x5e>
   31c60:	460c      	mov	r4, r1
   31c62:	2b20      	cmp	r3, #32
   31c64:	460d      	mov	r5, r1
   31c66:	d01b      	beq.n	31ca0 <pdn_state_get_parser+0x54>
   31c68:	700b      	strb	r3, [r1, #0]
   31c6a:	3201      	adds	r2, #1
   31c6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   31c70:	18b1      	adds	r1, r6, r2
   31c72:	460d      	mov	r5, r1
   31c74:	2b00      	cmp	r3, #0
   31c76:	d1f4      	bne.n	31c62 <pdn_state_get_parser+0x16>
   31c78:	2200      	movs	r2, #0
   31c7a:	4b0d      	ldr	r3, [pc, #52]	; (31cb0 <pdn_state_get_parser+0x64>)
   31c7c:	702a      	strb	r2, [r5, #0]
   31c7e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   31c82:	4a0c      	ldr	r2, [pc, #48]	; (31cb4 <pdn_state_get_parser+0x68>)
   31c84:	681b      	ldr	r3, [r3, #0]
   31c86:	2110      	movs	r1, #16
   31c88:	4668      	mov	r0, sp
   31c8a:	f005 facd 	bl	37228 <sniprintf>
   31c8e:	4669      	mov	r1, sp
   31c90:	4630      	mov	r0, r6
   31c92:	f009 fd41 	bl	3b718 <strstr>
   31c96:	3000      	adds	r0, #0
   31c98:	bf18      	it	ne
   31c9a:	2001      	movne	r0, #1
   31c9c:	b004      	add	sp, #16
   31c9e:	bd70      	pop	{r4, r5, r6, pc}
   31ca0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   31ca4:	2b00      	cmp	r3, #0
   31ca6:	d1dc      	bne.n	31c62 <pdn_state_get_parser+0x16>
   31ca8:	e7e6      	b.n	31c78 <pdn_state_get_parser+0x2c>
   31caa:	460d      	mov	r5, r1
   31cac:	e7e4      	b.n	31c78 <pdn_state_get_parser+0x2c>
   31cae:	bf00      	nop
   31cb0:	20023e94 	.word	0x20023e94
   31cb4:	0003cc3c 	.word	0x0003cc3c

00031cb8 <pdn_id_get_parser>:
   31cb8:	b570      	push	{r4, r5, r6, lr}
   31cba:	780b      	ldrb	r3, [r1, #0]
   31cbc:	4606      	mov	r6, r0
   31cbe:	b313      	cbz	r3, 31d06 <pdn_id_get_parser+0x4e>
   31cc0:	4608      	mov	r0, r1
   31cc2:	2400      	movs	r4, #0
   31cc4:	460a      	mov	r2, r1
   31cc6:	2b20      	cmp	r3, #32
   31cc8:	4615      	mov	r5, r2
   31cca:	d017      	beq.n	31cfc <pdn_id_get_parser+0x44>
   31ccc:	7013      	strb	r3, [r2, #0]
   31cce:	3401      	adds	r4, #1
   31cd0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   31cd4:	190a      	adds	r2, r1, r4
   31cd6:	4615      	mov	r5, r2
   31cd8:	2b00      	cmp	r3, #0
   31cda:	d1f4      	bne.n	31cc6 <pdn_id_get_parser+0xe>
   31cdc:	2300      	movs	r3, #0
   31cde:	4608      	mov	r0, r1
   31ce0:	702b      	strb	r3, [r5, #0]
   31ce2:	213a      	movs	r1, #58	; 0x3a
   31ce4:	f009 fcb7 	bl	3b656 <strchr>
   31ce8:	b130      	cbz	r0, 31cf8 <pdn_id_get_parser+0x40>
   31cea:	3001      	adds	r0, #1
   31cec:	f009 fb41 	bl	3b372 <atoi>
   31cf0:	4b06      	ldr	r3, [pc, #24]	; (31d0c <pdn_id_get_parser+0x54>)
   31cf2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   31cf6:	6058      	str	r0, [r3, #4]
   31cf8:	2000      	movs	r0, #0
   31cfa:	bd70      	pop	{r4, r5, r6, pc}
   31cfc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   31d00:	2b00      	cmp	r3, #0
   31d02:	d1e0      	bne.n	31cc6 <pdn_id_get_parser+0xe>
   31d04:	e7ea      	b.n	31cdc <pdn_id_get_parser+0x24>
   31d06:	460d      	mov	r5, r1
   31d08:	e7e8      	b.n	31cdc <pdn_id_get_parser+0x24>
   31d0a:	bf00      	nop
   31d0c:	20023e94 	.word	0x20023e94

00031d10 <context_create_parser>:
   31d10:	b570      	push	{r4, r5, r6, lr}
   31d12:	780b      	ldrb	r3, [r1, #0]
   31d14:	4606      	mov	r6, r0
   31d16:	b313      	cbz	r3, 31d5e <context_create_parser+0x4e>
   31d18:	4608      	mov	r0, r1
   31d1a:	2400      	movs	r4, #0
   31d1c:	460a      	mov	r2, r1
   31d1e:	2b20      	cmp	r3, #32
   31d20:	4615      	mov	r5, r2
   31d22:	d017      	beq.n	31d54 <context_create_parser+0x44>
   31d24:	7013      	strb	r3, [r2, #0]
   31d26:	3401      	adds	r4, #1
   31d28:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   31d2c:	190a      	adds	r2, r1, r4
   31d2e:	4615      	mov	r5, r2
   31d30:	2b00      	cmp	r3, #0
   31d32:	d1f4      	bne.n	31d1e <context_create_parser+0xe>
   31d34:	2300      	movs	r3, #0
   31d36:	4608      	mov	r0, r1
   31d38:	702b      	strb	r3, [r5, #0]
   31d3a:	213a      	movs	r1, #58	; 0x3a
   31d3c:	f009 fc8b 	bl	3b656 <strchr>
   31d40:	b130      	cbz	r0, 31d50 <context_create_parser+0x40>
   31d42:	4b08      	ldr	r3, [pc, #32]	; (31d64 <context_create_parser+0x54>)
   31d44:	3001      	adds	r0, #1
   31d46:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   31d4a:	f009 fb12 	bl	3b372 <atoi>
   31d4e:	6020      	str	r0, [r4, #0]
   31d50:	2000      	movs	r0, #0
   31d52:	bd70      	pop	{r4, r5, r6, pc}
   31d54:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   31d58:	2b00      	cmp	r3, #0
   31d5a:	d1e0      	bne.n	31d1e <context_create_parser+0xe>
   31d5c:	e7ea      	b.n	31d34 <context_create_parser+0x24>
   31d5e:	460d      	mov	r5, r1
   31d60:	e7e8      	b.n	31d34 <context_create_parser+0x24>
   31d62:	bf00      	nop
   31d64:	20023e94 	.word	0x20023e94

00031d68 <pdn_interface_init>:
   31d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31d6c:	b510      	push	{r4, lr}
   31d6e:	4c0b      	ldr	r4, [pc, #44]	; (31d9c <pdn_interface_init+0x34>)
   31d70:	2228      	movs	r2, #40	; 0x28
   31d72:	2100      	movs	r1, #0
   31d74:	480a      	ldr	r0, [pc, #40]	; (31da0 <pdn_interface_init+0x38>)
   31d76:	6023      	str	r3, [r4, #0]
   31d78:	f009 fb3b 	bl	3b3f2 <memset>
   31d7c:	f240 2201 	movw	r2, #513	; 0x201
   31d80:	2102      	movs	r1, #2
   31d82:	2066      	movs	r0, #102	; 0x66
   31d84:	f7ff fdac 	bl	318e0 <at_interface_open>
   31d88:	2800      	cmp	r0, #0
   31d8a:	6020      	str	r0, [r4, #0]
   31d8c:	db04      	blt.n	31d98 <pdn_interface_init+0x30>
   31d8e:	2201      	movs	r2, #1
   31d90:	4b04      	ldr	r3, [pc, #16]	; (31da4 <pdn_interface_init+0x3c>)
   31d92:	2000      	movs	r0, #0
   31d94:	701a      	strb	r2, [r3, #0]
   31d96:	bd10      	pop	{r4, pc}
   31d98:	2003      	movs	r0, #3
   31d9a:	bd10      	pop	{r4, pc}
   31d9c:	20023d90 	.word	0x20023d90
   31da0:	20023e94 	.word	0x20023e94
   31da4:	2002cb9c 	.word	0x2002cb9c

00031da8 <pdn_interface_open>:
   31da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31dac:	4b68      	ldr	r3, [pc, #416]	; (31f50 <pdn_interface_open+0x1a8>)
   31dae:	b083      	sub	sp, #12
   31db0:	781b      	ldrb	r3, [r3, #0]
   31db2:	2b00      	cmp	r3, #0
   31db4:	f000 80c5 	beq.w	31f42 <pdn_interface_open+0x19a>
   31db8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   31dbc:	f040 80b0 	bne.w	31f20 <pdn_interface_open+0x178>
   31dc0:	4c64      	ldr	r4, [pc, #400]	; (31f54 <pdn_interface_open+0x1ac>)
   31dc2:	6825      	ldr	r5, [r4, #0]
   31dc4:	b34d      	cbz	r5, 31e1a <pdn_interface_open+0x72>
   31dc6:	6863      	ldr	r3, [r4, #4]
   31dc8:	2b00      	cmp	r3, #0
   31dca:	f000 809b 	beq.w	31f04 <pdn_interface_open+0x15c>
   31dce:	68a3      	ldr	r3, [r4, #8]
   31dd0:	2b00      	cmp	r3, #0
   31dd2:	f000 8099 	beq.w	31f08 <pdn_interface_open+0x160>
   31dd6:	68e3      	ldr	r3, [r4, #12]
   31dd8:	2b00      	cmp	r3, #0
   31dda:	f000 8097 	beq.w	31f0c <pdn_interface_open+0x164>
   31dde:	6923      	ldr	r3, [r4, #16]
   31de0:	2b00      	cmp	r3, #0
   31de2:	f000 8095 	beq.w	31f10 <pdn_interface_open+0x168>
   31de6:	6963      	ldr	r3, [r4, #20]
   31de8:	2b00      	cmp	r3, #0
   31dea:	f000 8093 	beq.w	31f14 <pdn_interface_open+0x16c>
   31dee:	69a3      	ldr	r3, [r4, #24]
   31df0:	2b00      	cmp	r3, #0
   31df2:	f000 8091 	beq.w	31f18 <pdn_interface_open+0x170>
   31df6:	69e3      	ldr	r3, [r4, #28]
   31df8:	2b00      	cmp	r3, #0
   31dfa:	f000 808f 	beq.w	31f1c <pdn_interface_open+0x174>
   31dfe:	6a23      	ldr	r3, [r4, #32]
   31e00:	b153      	cbz	r3, 31e18 <pdn_interface_open+0x70>
   31e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   31e04:	2509      	movs	r5, #9
   31e06:	b143      	cbz	r3, 31e1a <pdn_interface_open+0x72>
   31e08:	200c      	movs	r0, #12
   31e0a:	f7f7 fd95 	bl	29938 <bsd_os_errno_set>
   31e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31e12:	b003      	add	sp, #12
   31e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31e18:	2508      	movs	r5, #8
   31e1a:	2020      	movs	r0, #32
   31e1c:	f002 faae 	bl	3437c <nrf_malloc>
   31e20:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   31e24:	2800      	cmp	r0, #0
   31e26:	d0ef      	beq.n	31e08 <pdn_interface_open+0x60>
   31e28:	2220      	movs	r2, #32
   31e2a:	2100      	movs	r1, #0
   31e2c:	f009 fae1 	bl	3b3f2 <memset>
   31e30:	2101      	movs	r1, #1
   31e32:	2003      	movs	r0, #3
   31e34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   31e38:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   31e3c:	4b46      	ldr	r3, [pc, #280]	; (31f58 <pdn_interface_open+0x1b0>)
   31e3e:	6091      	str	r1, [r2, #8]
   31e40:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
   31e44:	4a45      	ldr	r2, [pc, #276]	; (31f5c <pdn_interface_open+0x1b4>)
   31e46:	60c8      	str	r0, [r1, #12]
   31e48:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   31e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
   31e50:	6047      	str	r7, [r0, #4]
   31e52:	f8df 8118 	ldr.w	r8, [pc, #280]	; 31f6c <pdn_interface_open+0x1c4>
   31e56:	4842      	ldr	r0, [pc, #264]	; (31f60 <pdn_interface_open+0x1b8>)
   31e58:	f005 f9e6 	bl	37228 <sniprintf>
   31e5c:	4840      	ldr	r0, [pc, #256]	; (31f60 <pdn_interface_open+0x1b8>)
   31e5e:	f8d8 9000 	ldr.w	r9, [r8]
   31e62:	2600      	movs	r6, #0
   31e64:	f7eb f904 	bl	1d070 <strlen>
   31e68:	4633      	mov	r3, r6
   31e6a:	4602      	mov	r2, r0
   31e6c:	493c      	ldr	r1, [pc, #240]	; (31f60 <pdn_interface_open+0x1b8>)
   31e6e:	4648      	mov	r0, r9
   31e70:	9601      	str	r6, [sp, #4]
   31e72:	9600      	str	r6, [sp, #0]
   31e74:	f7ff fcac 	bl	317d0 <at_interface_write>
   31e78:	4681      	mov	r9, r0
   31e7a:	4839      	ldr	r0, [pc, #228]	; (31f60 <pdn_interface_open+0x1b8>)
   31e7c:	f7eb f8f8 	bl	1d070 <strlen>
   31e80:	4548      	cmp	r0, r9
   31e82:	d153      	bne.n	31f2c <pdn_interface_open+0x184>
   31e84:	4633      	mov	r3, r6
   31e86:	e9cd 6600 	strd	r6, r6, [sp]
   31e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
   31e8e:	4934      	ldr	r1, [pc, #208]	; (31f60 <pdn_interface_open+0x1b8>)
   31e90:	f8d8 0000 	ldr.w	r0, [r8]
   31e94:	f7ff fdf0 	bl	31a78 <at_interface_read>
   31e98:	4606      	mov	r6, r0
   31e9a:	4832      	ldr	r0, [pc, #200]	; (31f64 <pdn_interface_open+0x1bc>)
   31e9c:	f7eb f8e8 	bl	1d070 <strlen>
   31ea0:	4286      	cmp	r6, r0
   31ea2:	db15      	blt.n	31ed0 <pdn_interface_open+0x128>
   31ea4:	4602      	mov	r2, r0
   31ea6:	492e      	ldr	r1, [pc, #184]	; (31f60 <pdn_interface_open+0x1b8>)
   31ea8:	482e      	ldr	r0, [pc, #184]	; (31f64 <pdn_interface_open+0x1bc>)
   31eaa:	f009 fbe9 	bl	3b680 <strncmp>
   31eae:	b978      	cbnz	r0, 31ed0 <pdn_interface_open+0x128>
   31eb0:	492b      	ldr	r1, [pc, #172]	; (31f60 <pdn_interface_open+0x1b8>)
   31eb2:	4628      	mov	r0, r5
   31eb4:	f7ff ff2c 	bl	31d10 <context_create_parser>
   31eb8:	b9b0      	cbnz	r0, 31ee8 <pdn_interface_open+0x140>
   31eba:	2202      	movs	r2, #2
   31ebc:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   31ec0:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   31ec4:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   31ec8:	609a      	str	r2, [r3, #8]
   31eca:	b003      	add	sp, #12
   31ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31ed0:	4825      	ldr	r0, [pc, #148]	; (31f68 <pdn_interface_open+0x1c0>)
   31ed2:	f7eb f8cd 	bl	1d070 <strlen>
   31ed6:	4922      	ldr	r1, [pc, #136]	; (31f60 <pdn_interface_open+0x1b8>)
   31ed8:	4602      	mov	r2, r0
   31eda:	4823      	ldr	r0, [pc, #140]	; (31f68 <pdn_interface_open+0x1c0>)
   31edc:	f009 fbd0 	bl	3b680 <strncmp>
   31ee0:	b960      	cbnz	r0, 31efc <pdn_interface_open+0x154>
   31ee2:	2008      	movs	r0, #8
   31ee4:	f7f7 fd28 	bl	29938 <bsd_os_errno_set>
   31ee8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   31eec:	f002 fa50 	bl	34390 <nrf_free>
   31ef0:	2300      	movs	r3, #0
   31ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31ef6:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   31efa:	e78a      	b.n	31e12 <pdn_interface_open+0x6a>
   31efc:	2005      	movs	r0, #5
   31efe:	f7f7 fd1b 	bl	29938 <bsd_os_errno_set>
   31f02:	e7f1      	b.n	31ee8 <pdn_interface_open+0x140>
   31f04:	2501      	movs	r5, #1
   31f06:	e788      	b.n	31e1a <pdn_interface_open+0x72>
   31f08:	2502      	movs	r5, #2
   31f0a:	e786      	b.n	31e1a <pdn_interface_open+0x72>
   31f0c:	2503      	movs	r5, #3
   31f0e:	e784      	b.n	31e1a <pdn_interface_open+0x72>
   31f10:	2504      	movs	r5, #4
   31f12:	e782      	b.n	31e1a <pdn_interface_open+0x72>
   31f14:	2505      	movs	r5, #5
   31f16:	e780      	b.n	31e1a <pdn_interface_open+0x72>
   31f18:	2506      	movs	r5, #6
   31f1a:	e77e      	b.n	31e1a <pdn_interface_open+0x72>
   31f1c:	2507      	movs	r5, #7
   31f1e:	e77c      	b.n	31e1a <pdn_interface_open+0x72>
   31f20:	2029      	movs	r0, #41	; 0x29
   31f22:	f7f7 fd09 	bl	29938 <bsd_os_errno_set>
   31f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31f2a:	e772      	b.n	31e12 <pdn_interface_open+0x6a>
   31f2c:	2005      	movs	r0, #5
   31f2e:	f7f7 fd03 	bl	29938 <bsd_os_errno_set>
   31f32:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   31f36:	f002 fa2b 	bl	34390 <nrf_free>
   31f3a:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   31f3e:	4638      	mov	r0, r7
   31f40:	e767      	b.n	31e12 <pdn_interface_open+0x6a>
   31f42:	2070      	movs	r0, #112	; 0x70
   31f44:	f7f7 fcf8 	bl	29938 <bsd_os_errno_set>
   31f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31f4c:	e761      	b.n	31e12 <pdn_interface_open+0x6a>
   31f4e:	bf00      	nop
   31f50:	2002cb9c 	.word	0x2002cb9c
   31f54:	20023e94 	.word	0x20023e94
   31f58:	0003cc18 	.word	0x0003cc18
   31f5c:	0003cc24 	.word	0x0003cc24
   31f60:	20023d94 	.word	0x20023d94
   31f64:	0003cc28 	.word	0x0003cc28
   31f68:	0003cc34 	.word	0x0003cc34
   31f6c:	20023d90 	.word	0x20023d90

00031f70 <pdn_interface_connect>:
   31f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31f74:	b085      	sub	sp, #20
   31f76:	2900      	cmp	r1, #0
   31f78:	f000 81f3 	beq.w	32362 <pdn_interface_connect+0x3f2>
   31f7c:	2a64      	cmp	r2, #100	; 0x64
   31f7e:	4690      	mov	r8, r2
   31f80:	f200 81ef 	bhi.w	32362 <pdn_interface_connect+0x3f2>
   31f84:	0c03      	lsrs	r3, r0, #16
   31f86:	4ab1      	ldr	r2, [pc, #708]	; (3224c <pdn_interface_connect+0x2dc>)
   31f88:	041b      	lsls	r3, r3, #16
   31f8a:	4293      	cmp	r3, r2
   31f8c:	f040 8154 	bne.w	32238 <pdn_interface_connect+0x2c8>
   31f90:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   31f94:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   31f98:	2c09      	cmp	r4, #9
   31f9a:	f300 814d 	bgt.w	32238 <pdn_interface_connect+0x2c8>
   31f9e:	4fac      	ldr	r7, [pc, #688]	; (32250 <pdn_interface_connect+0x2e0>)
   31fa0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   31fa4:	2b00      	cmp	r3, #0
   31fa6:	f000 8147 	beq.w	32238 <pdn_interface_connect+0x2c8>
   31faa:	689a      	ldr	r2, [r3, #8]
   31fac:	2a00      	cmp	r2, #0
   31fae:	f000 8143 	beq.w	32238 <pdn_interface_connect+0x2c8>
   31fb2:	689b      	ldr	r3, [r3, #8]
   31fb4:	2b02      	cmp	r3, #2
   31fb6:	f040 813f 	bne.w	32238 <pdn_interface_connect+0x2c8>
   31fba:	4da6      	ldr	r5, [pc, #664]	; (32254 <pdn_interface_connect+0x2e4>)
   31fbc:	4ba6      	ldr	r3, [pc, #664]	; (32258 <pdn_interface_connect+0x2e8>)
   31fbe:	4aa7      	ldr	r2, [pc, #668]	; (3225c <pdn_interface_connect+0x2ec>)
   31fc0:	4689      	mov	r9, r1
   31fc2:	4628      	mov	r0, r5
   31fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
   31fc8:	f005 f92e 	bl	37228 <sniprintf>
   31fcc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   31fd0:	4606      	mov	r6, r0
   31fd2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   31fd6:	681b      	ldr	r3, [r3, #0]
   31fd8:	4aa1      	ldr	r2, [pc, #644]	; (32260 <pdn_interface_connect+0x2f0>)
   31fda:	1828      	adds	r0, r5, r0
   31fdc:	f005 f924 	bl	37228 <sniprintf>
   31fe0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   31fe4:	4406      	add	r6, r0
   31fe6:	68db      	ldr	r3, [r3, #12]
   31fe8:	f003 0203 	and.w	r2, r3, #3
   31fec:	2a03      	cmp	r2, #3
   31fee:	f000 811a 	beq.w	32226 <pdn_interface_connect+0x2b6>
   31ff2:	079b      	lsls	r3, r3, #30
   31ff4:	bf4c      	ite	mi
   31ff6:	4b9b      	ldrmi	r3, [pc, #620]	; (32264 <pdn_interface_connect+0x2f4>)
   31ff8:	4b9b      	ldrpl	r3, [pc, #620]	; (32268 <pdn_interface_connect+0x2f8>)
   31ffa:	19a8      	adds	r0, r5, r6
   31ffc:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   32000:	4a9a      	ldr	r2, [pc, #616]	; (3226c <pdn_interface_connect+0x2fc>)
   32002:	f005 f911 	bl	37228 <sniprintf>
   32006:	1833      	adds	r3, r6, r0
   32008:	eb08 0203 	add.w	r2, r8, r3
   3200c:	2afd      	cmp	r2, #253	; 0xfd
   3200e:	f300 81a5 	bgt.w	3235c <pdn_interface_connect+0x3ec>
   32012:	2122      	movs	r1, #34	; 0x22
   32014:	1c5e      	adds	r6, r3, #1
   32016:	54e9      	strb	r1, [r5, r3]
   32018:	4642      	mov	r2, r8
   3201a:	19a8      	adds	r0, r5, r6
   3201c:	4649      	mov	r1, r9
   3201e:	f009 fb41 	bl	3b6a4 <strncpy>
   32022:	eb08 0306 	add.w	r3, r8, r6
   32026:	18ea      	adds	r2, r5, r3
   32028:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   3202c:	b902      	cbnz	r2, 32030 <pdn_interface_connect+0xc0>
   3202e:	3b01      	subs	r3, #1
   32030:	2600      	movs	r6, #0
   32032:	2122      	movs	r1, #34	; 0x22
   32034:	18ea      	adds	r2, r5, r3
   32036:	f8df a254 	ldr.w	sl, [pc, #596]	; 3228c <pdn_interface_connect+0x31c>
   3203a:	54e9      	strb	r1, [r5, r3]
   3203c:	4885      	ldr	r0, [pc, #532]	; (32254 <pdn_interface_connect+0x2e4>)
   3203e:	7056      	strb	r6, [r2, #1]
   32040:	f8da b000 	ldr.w	fp, [sl]
   32044:	f7eb f814 	bl	1d070 <strlen>
   32048:	4633      	mov	r3, r6
   3204a:	4602      	mov	r2, r0
   3204c:	4981      	ldr	r1, [pc, #516]	; (32254 <pdn_interface_connect+0x2e4>)
   3204e:	4658      	mov	r0, fp
   32050:	9601      	str	r6, [sp, #4]
   32052:	9600      	str	r6, [sp, #0]
   32054:	f7ff fbbc 	bl	317d0 <at_interface_write>
   32058:	4683      	mov	fp, r0
   3205a:	487e      	ldr	r0, [pc, #504]	; (32254 <pdn_interface_connect+0x2e4>)
   3205c:	f7eb f808 	bl	1d070 <strlen>
   32060:	4558      	cmp	r0, fp
   32062:	d008      	beq.n	32076 <pdn_interface_connect+0x106>
   32064:	2005      	movs	r0, #5
   32066:	f7f7 fc67 	bl	29938 <bsd_os_errno_set>
   3206a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   3206e:	4658      	mov	r0, fp
   32070:	b005      	add	sp, #20
   32072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32076:	4633      	mov	r3, r6
   32078:	e9cd 6600 	strd	r6, r6, [sp]
   3207c:	f44f 7280 	mov.w	r2, #256	; 0x100
   32080:	4974      	ldr	r1, [pc, #464]	; (32254 <pdn_interface_connect+0x2e4>)
   32082:	f8da 0000 	ldr.w	r0, [sl]
   32086:	f7ff fcf7 	bl	31a78 <at_interface_read>
   3208a:	4606      	mov	r6, r0
   3208c:	4878      	ldr	r0, [pc, #480]	; (32270 <pdn_interface_connect+0x300>)
   3208e:	f7ea ffef 	bl	1d070 <strlen>
   32092:	4286      	cmp	r6, r0
   32094:	da0f      	bge.n	320b6 <pdn_interface_connect+0x146>
   32096:	4877      	ldr	r0, [pc, #476]	; (32274 <pdn_interface_connect+0x304>)
   32098:	f7ea ffea 	bl	1d070 <strlen>
   3209c:	496d      	ldr	r1, [pc, #436]	; (32254 <pdn_interface_connect+0x2e4>)
   3209e:	4602      	mov	r2, r0
   320a0:	4874      	ldr	r0, [pc, #464]	; (32274 <pdn_interface_connect+0x304>)
   320a2:	f009 faed 	bl	3b680 <strncmp>
   320a6:	2800      	cmp	r0, #0
   320a8:	d1dc      	bne.n	32064 <pdn_interface_connect+0xf4>
   320aa:	2008      	movs	r0, #8
   320ac:	f7f7 fc44 	bl	29938 <bsd_os_errno_set>
   320b0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   320b4:	e7db      	b.n	3206e <pdn_interface_connect+0xfe>
   320b6:	4602      	mov	r2, r0
   320b8:	4966      	ldr	r1, [pc, #408]	; (32254 <pdn_interface_connect+0x2e4>)
   320ba:	486d      	ldr	r0, [pc, #436]	; (32270 <pdn_interface_connect+0x300>)
   320bc:	f009 fae0 	bl	3b680 <strncmp>
   320c0:	2800      	cmp	r0, #0
   320c2:	d1e8      	bne.n	32096 <pdn_interface_connect+0x126>
   320c4:	4963      	ldr	r1, [pc, #396]	; (32254 <pdn_interface_connect+0x2e4>)
   320c6:	4620      	mov	r0, r4
   320c8:	f7ff fdbe 	bl	31c48 <ok_rsp_parser>
   320cc:	4683      	mov	fp, r0
   320ce:	2800      	cmp	r0, #0
   320d0:	d1cd      	bne.n	3206e <pdn_interface_connect+0xfe>
   320d2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   320d6:	7c1b      	ldrb	r3, [r3, #16]
   320d8:	2b00      	cmp	r3, #0
   320da:	f040 80d9 	bne.w	32290 <pdn_interface_connect+0x320>
   320de:	4b66      	ldr	r3, [pc, #408]	; (32278 <pdn_interface_connect+0x308>)
   320e0:	4a5e      	ldr	r2, [pc, #376]	; (3225c <pdn_interface_connect+0x2ec>)
   320e2:	f44f 7180 	mov.w	r1, #256	; 0x100
   320e6:	485b      	ldr	r0, [pc, #364]	; (32254 <pdn_interface_connect+0x2e4>)
   320e8:	f005 f89e 	bl	37228 <sniprintf>
   320ec:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   320f0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   320f4:	4a61      	ldr	r2, [pc, #388]	; (3227c <pdn_interface_connect+0x30c>)
   320f6:	681b      	ldr	r3, [r3, #0]
   320f8:	4428      	add	r0, r5
   320fa:	f005 f895 	bl	37228 <sniprintf>
   320fe:	f8da 3000 	ldr.w	r3, [sl]
   32102:	4854      	ldr	r0, [pc, #336]	; (32254 <pdn_interface_connect+0x2e4>)
   32104:	2600      	movs	r6, #0
   32106:	9303      	str	r3, [sp, #12]
   32108:	f7ea ffb2 	bl	1d070 <strlen>
   3210c:	9b03      	ldr	r3, [sp, #12]
   3210e:	4602      	mov	r2, r0
   32110:	4950      	ldr	r1, [pc, #320]	; (32254 <pdn_interface_connect+0x2e4>)
   32112:	4618      	mov	r0, r3
   32114:	9601      	str	r6, [sp, #4]
   32116:	4633      	mov	r3, r6
   32118:	9600      	str	r6, [sp, #0]
   3211a:	f7ff fb59 	bl	317d0 <at_interface_write>
   3211e:	9003      	str	r0, [sp, #12]
   32120:	484c      	ldr	r0, [pc, #304]	; (32254 <pdn_interface_connect+0x2e4>)
   32122:	f7ea ffa5 	bl	1d070 <strlen>
   32126:	9b03      	ldr	r3, [sp, #12]
   32128:	4298      	cmp	r0, r3
   3212a:	d19b      	bne.n	32064 <pdn_interface_connect+0xf4>
   3212c:	4633      	mov	r3, r6
   3212e:	e9cd 6600 	strd	r6, r6, [sp]
   32132:	f44f 7280 	mov.w	r2, #256	; 0x100
   32136:	4947      	ldr	r1, [pc, #284]	; (32254 <pdn_interface_connect+0x2e4>)
   32138:	f8da 0000 	ldr.w	r0, [sl]
   3213c:	f7ff fc9c 	bl	31a78 <at_interface_read>
   32140:	4606      	mov	r6, r0
   32142:	484b      	ldr	r0, [pc, #300]	; (32270 <pdn_interface_connect+0x300>)
   32144:	f7ea ff94 	bl	1d070 <strlen>
   32148:	4286      	cmp	r6, r0
   3214a:	dba4      	blt.n	32096 <pdn_interface_connect+0x126>
   3214c:	4602      	mov	r2, r0
   3214e:	4941      	ldr	r1, [pc, #260]	; (32254 <pdn_interface_connect+0x2e4>)
   32150:	4847      	ldr	r0, [pc, #284]	; (32270 <pdn_interface_connect+0x300>)
   32152:	f009 fa95 	bl	3b680 <strncmp>
   32156:	4606      	mov	r6, r0
   32158:	2800      	cmp	r0, #0
   3215a:	d19c      	bne.n	32096 <pdn_interface_connect+0x126>
   3215c:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   32160:	f108 0320 	add.w	r3, r8, #32
   32164:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   32168:	4413      	add	r3, r2
   3216a:	4419      	add	r1, r3
   3216c:	f002 f91c 	bl	343a8 <nrf_realloc>
   32170:	2800      	cmp	r0, #0
   32172:	f000 80fc 	beq.w	3236e <pdn_interface_connect+0x3fe>
   32176:	2303      	movs	r3, #3
   32178:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   3217c:	6083      	str	r3, [r0, #8]
   3217e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   32182:	4649      	mov	r1, r9
   32184:	f8c3 801c 	str.w	r8, [r3, #28]
   32188:	f857 c024 	ldr.w	ip, [r7, r4, lsl #2]
   3218c:	4642      	mov	r2, r8
   3218e:	e9dc 0305 	ldrd	r0, r3, [ip, #20]
   32192:	4418      	add	r0, r3
   32194:	4603      	mov	r3, r0
   32196:	3320      	adds	r3, #32
   32198:	eb0c 0003 	add.w	r0, ip, r3
   3219c:	f009 f909 	bl	3b3b2 <memcpy>
   321a0:	4b37      	ldr	r3, [pc, #220]	; (32280 <pdn_interface_connect+0x310>)
   321a2:	4a2e      	ldr	r2, [pc, #184]	; (3225c <pdn_interface_connect+0x2ec>)
   321a4:	f44f 7180 	mov.w	r1, #256	; 0x100
   321a8:	482a      	ldr	r0, [pc, #168]	; (32254 <pdn_interface_connect+0x2e4>)
   321aa:	f005 f83d 	bl	37228 <sniprintf>
   321ae:	4601      	mov	r1, r0
   321b0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   321b4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   321b8:	681b      	ldr	r3, [r3, #0]
   321ba:	4a30      	ldr	r2, [pc, #192]	; (3227c <pdn_interface_connect+0x30c>)
   321bc:	1828      	adds	r0, r5, r0
   321be:	f005 f833 	bl	37228 <sniprintf>
   321c2:	4824      	ldr	r0, [pc, #144]	; (32254 <pdn_interface_connect+0x2e4>)
   321c4:	f8da 5000 	ldr.w	r5, [sl]
   321c8:	f7ea ff52 	bl	1d070 <strlen>
   321cc:	4633      	mov	r3, r6
   321ce:	4602      	mov	r2, r0
   321d0:	4920      	ldr	r1, [pc, #128]	; (32254 <pdn_interface_connect+0x2e4>)
   321d2:	4628      	mov	r0, r5
   321d4:	9601      	str	r6, [sp, #4]
   321d6:	9600      	str	r6, [sp, #0]
   321d8:	f7ff fafa 	bl	317d0 <at_interface_write>
   321dc:	4605      	mov	r5, r0
   321de:	481d      	ldr	r0, [pc, #116]	; (32254 <pdn_interface_connect+0x2e4>)
   321e0:	f7ea ff46 	bl	1d070 <strlen>
   321e4:	42a8      	cmp	r0, r5
   321e6:	f040 80d2 	bne.w	3238e <pdn_interface_connect+0x41e>
   321ea:	4633      	mov	r3, r6
   321ec:	f44f 7280 	mov.w	r2, #256	; 0x100
   321f0:	4918      	ldr	r1, [pc, #96]	; (32254 <pdn_interface_connect+0x2e4>)
   321f2:	f8da 0000 	ldr.w	r0, [sl]
   321f6:	e9cd 6600 	strd	r6, r6, [sp]
   321fa:	f7ff fc3d 	bl	31a78 <at_interface_read>
   321fe:	4605      	mov	r5, r0
   32200:	4820      	ldr	r0, [pc, #128]	; (32284 <pdn_interface_connect+0x314>)
   32202:	f7ea ff35 	bl	1d070 <strlen>
   32206:	4285      	cmp	r5, r0
   32208:	f2c0 80b4 	blt.w	32374 <pdn_interface_connect+0x404>
   3220c:	4602      	mov	r2, r0
   3220e:	4911      	ldr	r1, [pc, #68]	; (32254 <pdn_interface_connect+0x2e4>)
   32210:	481c      	ldr	r0, [pc, #112]	; (32284 <pdn_interface_connect+0x314>)
   32212:	f009 fa35 	bl	3b680 <strncmp>
   32216:	2800      	cmp	r0, #0
   32218:	f040 80ac 	bne.w	32374 <pdn_interface_connect+0x404>
   3221c:	4620      	mov	r0, r4
   3221e:	490d      	ldr	r1, [pc, #52]	; (32254 <pdn_interface_connect+0x2e4>)
   32220:	f7ff fd4a 	bl	31cb8 <pdn_id_get_parser>
   32224:	e723      	b.n	3206e <pdn_interface_connect+0xfe>
   32226:	4b18      	ldr	r3, [pc, #96]	; (32288 <pdn_interface_connect+0x318>)
   32228:	4a10      	ldr	r2, [pc, #64]	; (3226c <pdn_interface_connect+0x2fc>)
   3222a:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   3222e:	19a8      	adds	r0, r5, r6
   32230:	f004 fffa 	bl	37228 <sniprintf>
   32234:	1833      	adds	r3, r6, r0
   32236:	e6e7      	b.n	32008 <pdn_interface_connect+0x98>
   32238:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   3223c:	2009      	movs	r0, #9
   3223e:	f7f7 fb7b 	bl	29938 <bsd_os_errno_set>
   32242:	4658      	mov	r0, fp
   32244:	b005      	add	sp, #20
   32246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3224a:	bf00      	nop
   3224c:	789a0000 	.word	0x789a0000
   32250:	20023e94 	.word	0x20023e94
   32254:	20023d94 	.word	0x20023d94
   32258:	0003cb8c 	.word	0x0003cb8c
   3225c:	0003cc24 	.word	0x0003cc24
   32260:	0003cb98 	.word	0x0003cb98
   32264:	0003cbac 	.word	0x0003cbac
   32268:	0003cbb4 	.word	0x0003cbb4
   3226c:	0003cba4 	.word	0x0003cba4
   32270:	0003cbb8 	.word	0x0003cbb8
   32274:	0003cc34 	.word	0x0003cc34
   32278:	0003cbd8 	.word	0x0003cbd8
   3227c:	0003cbe4 	.word	0x0003cbe4
   32280:	0003cbe8 	.word	0x0003cbe8
   32284:	0003cbf8 	.word	0x0003cbf8
   32288:	0003cb9c 	.word	0x0003cb9c
   3228c:	20023d90 	.word	0x20023d90
   32290:	4b41      	ldr	r3, [pc, #260]	; (32398 <pdn_interface_connect+0x428>)
   32292:	4a42      	ldr	r2, [pc, #264]	; (3239c <pdn_interface_connect+0x42c>)
   32294:	f44f 7180 	mov.w	r1, #256	; 0x100
   32298:	4841      	ldr	r0, [pc, #260]	; (323a0 <pdn_interface_connect+0x430>)
   3229a:	f004 ffc5 	bl	37228 <sniprintf>
   3229e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   322a2:	4a40      	ldr	r2, [pc, #256]	; (323a4 <pdn_interface_connect+0x434>)
   322a4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   322a8:	4606      	mov	r6, r0
   322aa:	681b      	ldr	r3, [r3, #0]
   322ac:	1828      	adds	r0, r5, r0
   322ae:	f004 ffbb 	bl	37228 <sniprintf>
   322b2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   322b6:	4406      	add	r6, r0
   322b8:	7c1b      	ldrb	r3, [r3, #16]
   322ba:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   322be:	2b01      	cmp	r3, #1
   322c0:	bf0c      	ite	eq
   322c2:	4a39      	ldreq	r2, [pc, #228]	; (323a8 <pdn_interface_connect+0x438>)
   322c4:	4a39      	ldrne	r2, [pc, #228]	; (323ac <pdn_interface_connect+0x43c>)
   322c6:	19a8      	adds	r0, r5, r6
   322c8:	f004 ffae 	bl	37228 <sniprintf>
   322cc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   322d0:	4406      	add	r6, r0
   322d2:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   322d6:	4a36      	ldr	r2, [pc, #216]	; (323b0 <pdn_interface_connect+0x440>)
   322d8:	3320      	adds	r3, #32
   322da:	19a8      	adds	r0, r5, r6
   322dc:	f004 ffa4 	bl	37228 <sniprintf>
   322e0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   322e4:	4430      	add	r0, r6
   322e6:	695a      	ldr	r2, [r3, #20]
   322e8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   322ec:	3220      	adds	r2, #32
   322ee:	4413      	add	r3, r2
   322f0:	4428      	add	r0, r5
   322f2:	4a30      	ldr	r2, [pc, #192]	; (323b4 <pdn_interface_connect+0x444>)
   322f4:	f004 ff98 	bl	37228 <sniprintf>
   322f8:	f8da 3000 	ldr.w	r3, [sl]
   322fc:	4828      	ldr	r0, [pc, #160]	; (323a0 <pdn_interface_connect+0x430>)
   322fe:	2600      	movs	r6, #0
   32300:	9303      	str	r3, [sp, #12]
   32302:	f7ea feb5 	bl	1d070 <strlen>
   32306:	9b03      	ldr	r3, [sp, #12]
   32308:	4602      	mov	r2, r0
   3230a:	4925      	ldr	r1, [pc, #148]	; (323a0 <pdn_interface_connect+0x430>)
   3230c:	4618      	mov	r0, r3
   3230e:	9601      	str	r6, [sp, #4]
   32310:	4633      	mov	r3, r6
   32312:	9600      	str	r6, [sp, #0]
   32314:	f7ff fa5c 	bl	317d0 <at_interface_write>
   32318:	9003      	str	r0, [sp, #12]
   3231a:	4821      	ldr	r0, [pc, #132]	; (323a0 <pdn_interface_connect+0x430>)
   3231c:	f7ea fea8 	bl	1d070 <strlen>
   32320:	9b03      	ldr	r3, [sp, #12]
   32322:	4298      	cmp	r0, r3
   32324:	f47f ae9e 	bne.w	32064 <pdn_interface_connect+0xf4>
   32328:	4633      	mov	r3, r6
   3232a:	e9cd 6600 	strd	r6, r6, [sp]
   3232e:	f44f 7280 	mov.w	r2, #256	; 0x100
   32332:	491b      	ldr	r1, [pc, #108]	; (323a0 <pdn_interface_connect+0x430>)
   32334:	f8da 0000 	ldr.w	r0, [sl]
   32338:	f7ff fb9e 	bl	31a78 <at_interface_read>
   3233c:	4606      	mov	r6, r0
   3233e:	481e      	ldr	r0, [pc, #120]	; (323b8 <pdn_interface_connect+0x448>)
   32340:	f7ea fe96 	bl	1d070 <strlen>
   32344:	4286      	cmp	r6, r0
   32346:	f6ff aea6 	blt.w	32096 <pdn_interface_connect+0x126>
   3234a:	4602      	mov	r2, r0
   3234c:	4914      	ldr	r1, [pc, #80]	; (323a0 <pdn_interface_connect+0x430>)
   3234e:	481a      	ldr	r0, [pc, #104]	; (323b8 <pdn_interface_connect+0x448>)
   32350:	f009 f996 	bl	3b680 <strncmp>
   32354:	2800      	cmp	r0, #0
   32356:	f43f aec2 	beq.w	320de <pdn_interface_connect+0x16e>
   3235a:	e69c      	b.n	32096 <pdn_interface_connect+0x126>
   3235c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   32360:	e685      	b.n	3206e <pdn_interface_connect+0xfe>
   32362:	2016      	movs	r0, #22
   32364:	f7f7 fae8 	bl	29938 <bsd_os_errno_set>
   32368:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   3236c:	e67f      	b.n	3206e <pdn_interface_connect+0xfe>
   3236e:	f04f 0b0c 	mov.w	fp, #12
   32372:	e67c      	b.n	3206e <pdn_interface_connect+0xfe>
   32374:	4811      	ldr	r0, [pc, #68]	; (323bc <pdn_interface_connect+0x44c>)
   32376:	f7ea fe7b 	bl	1d070 <strlen>
   3237a:	4909      	ldr	r1, [pc, #36]	; (323a0 <pdn_interface_connect+0x430>)
   3237c:	4602      	mov	r2, r0
   3237e:	480f      	ldr	r0, [pc, #60]	; (323bc <pdn_interface_connect+0x44c>)
   32380:	f009 f97e 	bl	3b680 <strncmp>
   32384:	b918      	cbnz	r0, 3238e <pdn_interface_connect+0x41e>
   32386:	2008      	movs	r0, #8
   32388:	f7f7 fad6 	bl	29938 <bsd_os_errno_set>
   3238c:	e66f      	b.n	3206e <pdn_interface_connect+0xfe>
   3238e:	2005      	movs	r0, #5
   32390:	f7f7 fad2 	bl	29938 <bsd_os_errno_set>
   32394:	e66b      	b.n	3206e <pdn_interface_connect+0xfe>
   32396:	bf00      	nop
   32398:	0003cbbc 	.word	0x0003cbbc
   3239c:	0003cc24 	.word	0x0003cc24
   323a0:	20023d94 	.word	0x20023d94
   323a4:	0003cb98 	.word	0x0003cb98
   323a8:	0003cbc8 	.word	0x0003cbc8
   323ac:	0003cbcc 	.word	0x0003cbcc
   323b0:	0003cba4 	.word	0x0003cba4
   323b4:	0003cbd0 	.word	0x0003cbd0
   323b8:	0003cbb8 	.word	0x0003cbb8
   323bc:	0003cc34 	.word	0x0003cc34

000323c0 <pdn_interface_close>:
   323c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   323c4:	4a6c      	ldr	r2, [pc, #432]	; (32578 <pdn_interface_close+0x1b8>)
   323c6:	0c03      	lsrs	r3, r0, #16
   323c8:	041b      	lsls	r3, r3, #16
   323ca:	4293      	cmp	r3, r2
   323cc:	b083      	sub	sp, #12
   323ce:	f040 80ae 	bne.w	3252e <pdn_interface_close+0x16e>
   323d2:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   323d6:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   323da:	2c09      	cmp	r4, #9
   323dc:	f300 80a7 	bgt.w	3252e <pdn_interface_close+0x16e>
   323e0:	4d66      	ldr	r5, [pc, #408]	; (3257c <pdn_interface_close+0x1bc>)
   323e2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   323e6:	2800      	cmp	r0, #0
   323e8:	f000 80a1 	beq.w	3252e <pdn_interface_close+0x16e>
   323ec:	6883      	ldr	r3, [r0, #8]
   323ee:	2b00      	cmp	r3, #0
   323f0:	f000 809d 	beq.w	3252e <pdn_interface_close+0x16e>
   323f4:	6883      	ldr	r3, [r0, #8]
   323f6:	2b03      	cmp	r3, #3
   323f8:	d00b      	beq.n	32412 <pdn_interface_close+0x52>
   323fa:	6883      	ldr	r3, [r0, #8]
   323fc:	2b02      	cmp	r3, #2
   323fe:	d056      	beq.n	324ae <pdn_interface_close+0xee>
   32400:	f001 ffc6 	bl	34390 <nrf_free>
   32404:	2300      	movs	r3, #0
   32406:	4618      	mov	r0, r3
   32408:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   3240c:	b003      	add	sp, #12
   3240e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32412:	4e5b      	ldr	r6, [pc, #364]	; (32580 <pdn_interface_close+0x1c0>)
   32414:	4b5b      	ldr	r3, [pc, #364]	; (32584 <pdn_interface_close+0x1c4>)
   32416:	4a5c      	ldr	r2, [pc, #368]	; (32588 <pdn_interface_close+0x1c8>)
   32418:	f44f 7180 	mov.w	r1, #256	; 0x100
   3241c:	4630      	mov	r0, r6
   3241e:	f004 ff03 	bl	37228 <sniprintf>
   32422:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   32426:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3242a:	681b      	ldr	r3, [r3, #0]
   3242c:	4a57      	ldr	r2, [pc, #348]	; (3258c <pdn_interface_close+0x1cc>)
   3242e:	4430      	add	r0, r6
   32430:	f8df 8168 	ldr.w	r8, [pc, #360]	; 3259c <pdn_interface_close+0x1dc>
   32434:	f004 fef8 	bl	37228 <sniprintf>
   32438:	4630      	mov	r0, r6
   3243a:	f8d8 9000 	ldr.w	r9, [r8]
   3243e:	2700      	movs	r7, #0
   32440:	f7ea fe16 	bl	1d070 <strlen>
   32444:	4631      	mov	r1, r6
   32446:	4602      	mov	r2, r0
   32448:	463b      	mov	r3, r7
   3244a:	4648      	mov	r0, r9
   3244c:	9701      	str	r7, [sp, #4]
   3244e:	9700      	str	r7, [sp, #0]
   32450:	f7ff f9be 	bl	317d0 <at_interface_write>
   32454:	4681      	mov	r9, r0
   32456:	4630      	mov	r0, r6
   32458:	f7ea fe0a 	bl	1d070 <strlen>
   3245c:	4548      	cmp	r0, r9
   3245e:	f040 8083 	bne.w	32568 <pdn_interface_close+0x1a8>
   32462:	463b      	mov	r3, r7
   32464:	e9cd 7700 	strd	r7, r7, [sp]
   32468:	f44f 7280 	mov.w	r2, #256	; 0x100
   3246c:	4631      	mov	r1, r6
   3246e:	f8d8 0000 	ldr.w	r0, [r8]
   32472:	f7ff fb01 	bl	31a78 <at_interface_read>
   32476:	4607      	mov	r7, r0
   32478:	4845      	ldr	r0, [pc, #276]	; (32590 <pdn_interface_close+0x1d0>)
   3247a:	f7ea fdf9 	bl	1d070 <strlen>
   3247e:	4287      	cmp	r7, r0
   32480:	da5b      	bge.n	3253a <pdn_interface_close+0x17a>
   32482:	4844      	ldr	r0, [pc, #272]	; (32594 <pdn_interface_close+0x1d4>)
   32484:	f7ea fdf4 	bl	1d070 <strlen>
   32488:	493d      	ldr	r1, [pc, #244]	; (32580 <pdn_interface_close+0x1c0>)
   3248a:	4602      	mov	r2, r0
   3248c:	4841      	ldr	r0, [pc, #260]	; (32594 <pdn_interface_close+0x1d4>)
   3248e:	f009 f8f7 	bl	3b680 <strncmp>
   32492:	2800      	cmp	r0, #0
   32494:	d168      	bne.n	32568 <pdn_interface_close+0x1a8>
   32496:	2008      	movs	r0, #8
   32498:	f7f7 fa4e 	bl	29938 <bsd_os_errno_set>
   3249c:	2202      	movs	r2, #2
   3249e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   324a2:	609a      	str	r2, [r3, #8]
   324a4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   324a8:	6883      	ldr	r3, [r0, #8]
   324aa:	2b02      	cmp	r3, #2
   324ac:	d1a8      	bne.n	32400 <pdn_interface_close+0x40>
   324ae:	4e34      	ldr	r6, [pc, #208]	; (32580 <pdn_interface_close+0x1c0>)
   324b0:	4b39      	ldr	r3, [pc, #228]	; (32598 <pdn_interface_close+0x1d8>)
   324b2:	4a35      	ldr	r2, [pc, #212]	; (32588 <pdn_interface_close+0x1c8>)
   324b4:	f44f 7180 	mov.w	r1, #256	; 0x100
   324b8:	4630      	mov	r0, r6
   324ba:	f004 feb5 	bl	37228 <sniprintf>
   324be:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   324c2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   324c6:	681b      	ldr	r3, [r3, #0]
   324c8:	4a30      	ldr	r2, [pc, #192]	; (3258c <pdn_interface_close+0x1cc>)
   324ca:	4430      	add	r0, r6
   324cc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 3259c <pdn_interface_close+0x1dc>
   324d0:	f004 feaa 	bl	37228 <sniprintf>
   324d4:	4630      	mov	r0, r6
   324d6:	f8d8 9000 	ldr.w	r9, [r8]
   324da:	2700      	movs	r7, #0
   324dc:	f7ea fdc8 	bl	1d070 <strlen>
   324e0:	4631      	mov	r1, r6
   324e2:	4602      	mov	r2, r0
   324e4:	463b      	mov	r3, r7
   324e6:	4648      	mov	r0, r9
   324e8:	9701      	str	r7, [sp, #4]
   324ea:	9700      	str	r7, [sp, #0]
   324ec:	f7ff f970 	bl	317d0 <at_interface_write>
   324f0:	4681      	mov	r9, r0
   324f2:	4630      	mov	r0, r6
   324f4:	f7ea fdbc 	bl	1d070 <strlen>
   324f8:	4548      	cmp	r0, r9
   324fa:	d139      	bne.n	32570 <pdn_interface_close+0x1b0>
   324fc:	463b      	mov	r3, r7
   324fe:	e9cd 7700 	strd	r7, r7, [sp]
   32502:	f44f 7280 	mov.w	r2, #256	; 0x100
   32506:	4631      	mov	r1, r6
   32508:	f8d8 0000 	ldr.w	r0, [r8]
   3250c:	f7ff fab4 	bl	31a78 <at_interface_read>
   32510:	4607      	mov	r7, r0
   32512:	481f      	ldr	r0, [pc, #124]	; (32590 <pdn_interface_close+0x1d0>)
   32514:	f7ea fdac 	bl	1d070 <strlen>
   32518:	4287      	cmp	r7, r0
   3251a:	db16      	blt.n	3254a <pdn_interface_close+0x18a>
   3251c:	4602      	mov	r2, r0
   3251e:	4631      	mov	r1, r6
   32520:	481b      	ldr	r0, [pc, #108]	; (32590 <pdn_interface_close+0x1d0>)
   32522:	f009 f8ad 	bl	3b680 <strncmp>
   32526:	b980      	cbnz	r0, 3254a <pdn_interface_close+0x18a>
   32528:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   3252c:	e768      	b.n	32400 <pdn_interface_close+0x40>
   3252e:	2009      	movs	r0, #9
   32530:	f7f7 fa02 	bl	29938 <bsd_os_errno_set>
   32534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32538:	e768      	b.n	3240c <pdn_interface_close+0x4c>
   3253a:	4602      	mov	r2, r0
   3253c:	4631      	mov	r1, r6
   3253e:	4814      	ldr	r0, [pc, #80]	; (32590 <pdn_interface_close+0x1d0>)
   32540:	f009 f89e 	bl	3b680 <strncmp>
   32544:	2800      	cmp	r0, #0
   32546:	d0a9      	beq.n	3249c <pdn_interface_close+0xdc>
   32548:	e79b      	b.n	32482 <pdn_interface_close+0xc2>
   3254a:	4812      	ldr	r0, [pc, #72]	; (32594 <pdn_interface_close+0x1d4>)
   3254c:	f7ea fd90 	bl	1d070 <strlen>
   32550:	490b      	ldr	r1, [pc, #44]	; (32580 <pdn_interface_close+0x1c0>)
   32552:	4602      	mov	r2, r0
   32554:	480f      	ldr	r0, [pc, #60]	; (32594 <pdn_interface_close+0x1d4>)
   32556:	f009 f893 	bl	3b680 <strncmp>
   3255a:	b948      	cbnz	r0, 32570 <pdn_interface_close+0x1b0>
   3255c:	2008      	movs	r0, #8
   3255e:	f7f7 f9eb 	bl	29938 <bsd_os_errno_set>
   32562:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   32566:	e74b      	b.n	32400 <pdn_interface_close+0x40>
   32568:	2005      	movs	r0, #5
   3256a:	f7f7 f9e5 	bl	29938 <bsd_os_errno_set>
   3256e:	e795      	b.n	3249c <pdn_interface_close+0xdc>
   32570:	2005      	movs	r0, #5
   32572:	f7f7 f9e1 	bl	29938 <bsd_os_errno_set>
   32576:	e7d7      	b.n	32528 <pdn_interface_close+0x168>
   32578:	789a0000 	.word	0x789a0000
   3257c:	20023e94 	.word	0x20023e94
   32580:	20023d94 	.word	0x20023d94
   32584:	0003cb80 	.word	0x0003cb80
   32588:	0003cc24 	.word	0x0003cc24
   3258c:	0003cbe4 	.word	0x0003cbe4
   32590:	0003cbb8 	.word	0x0003cbb8
   32594:	0003cc34 	.word	0x0003cc34
   32598:	0003cb8c 	.word	0x0003cb8c
   3259c:	20023d90 	.word	0x20023d90

000325a0 <pdn_interface_setopt>:
   325a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   325a2:	f240 2402 	movw	r4, #514	; 0x202
   325a6:	42a1      	cmp	r1, r4
   325a8:	9e06      	ldr	r6, [sp, #24]
   325aa:	f040 8090 	bne.w	326ce <pdn_interface_setopt+0x12e>
   325ae:	461d      	mov	r5, r3
   325b0:	2b00      	cmp	r3, #0
   325b2:	f000 808c 	beq.w	326ce <pdn_interface_setopt+0x12e>
   325b6:	2e00      	cmp	r6, #0
   325b8:	f000 8089 	beq.w	326ce <pdn_interface_setopt+0x12e>
   325bc:	0c03      	lsrs	r3, r0, #16
   325be:	494d      	ldr	r1, [pc, #308]	; (326f4 <pdn_interface_setopt+0x154>)
   325c0:	041b      	lsls	r3, r3, #16
   325c2:	428b      	cmp	r3, r1
   325c4:	d005      	beq.n	325d2 <pdn_interface_setopt+0x32>
   325c6:	2009      	movs	r0, #9
   325c8:	f7f7 f9b6 	bl	29938 <bsd_os_errno_set>
   325cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   325d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   325d2:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   325d6:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   325da:	2c09      	cmp	r4, #9
   325dc:	dcf3      	bgt.n	325c6 <pdn_interface_setopt+0x26>
   325de:	4f46      	ldr	r7, [pc, #280]	; (326f8 <pdn_interface_setopt+0x158>)
   325e0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   325e4:	2b00      	cmp	r3, #0
   325e6:	d0ee      	beq.n	325c6 <pdn_interface_setopt+0x26>
   325e8:	6899      	ldr	r1, [r3, #8]
   325ea:	2900      	cmp	r1, #0
   325ec:	d0eb      	beq.n	325c6 <pdn_interface_setopt+0x26>
   325ee:	2a01      	cmp	r2, #1
   325f0:	d049      	beq.n	32686 <pdn_interface_setopt+0xe6>
   325f2:	2a04      	cmp	r2, #4
   325f4:	d145      	bne.n	32682 <pdn_interface_setopt+0xe2>
   325f6:	689a      	ldr	r2, [r3, #8]
   325f8:	2a00      	cmp	r2, #0
   325fa:	d04c      	beq.n	32696 <pdn_interface_setopt+0xf6>
   325fc:	689a      	ldr	r2, [r3, #8]
   325fe:	2a03      	cmp	r2, #3
   32600:	d049      	beq.n	32696 <pdn_interface_setopt+0xf6>
   32602:	689b      	ldr	r3, [r3, #8]
   32604:	2b04      	cmp	r3, #4
   32606:	d046      	beq.n	32696 <pdn_interface_setopt+0xf6>
   32608:	4628      	mov	r0, r5
   3260a:	f7ea fd31 	bl	1d070 <strlen>
   3260e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   32612:	3001      	adds	r0, #1
   32614:	f105 0664 	add.w	r6, r5, #100	; 0x64
   32618:	6158      	str	r0, [r3, #20]
   3261a:	4630      	mov	r0, r6
   3261c:	f7ea fd28 	bl	1d070 <strlen>
   32620:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   32624:	3001      	adds	r0, #1
   32626:	6198      	str	r0, [r3, #24]
   32628:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
   3262c:	3b01      	subs	r3, #1
   3262e:	2b01      	cmp	r3, #1
   32630:	d84b      	bhi.n	326ca <pdn_interface_setopt+0x12a>
   32632:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   32636:	6943      	ldr	r3, [r0, #20]
   32638:	2b63      	cmp	r3, #99	; 0x63
   3263a:	dc46      	bgt.n	326ca <pdn_interface_setopt+0x12a>
   3263c:	6982      	ldr	r2, [r0, #24]
   3263e:	2a63      	cmp	r2, #99	; 0x63
   32640:	dc43      	bgt.n	326ca <pdn_interface_setopt+0x12a>
   32642:	4413      	add	r3, r2
   32644:	f103 0120 	add.w	r1, r3, #32
   32648:	f001 feae 	bl	343a8 <nrf_realloc>
   3264c:	4603      	mov	r3, r0
   3264e:	2800      	cmp	r0, #0
   32650:	d048      	beq.n	326e4 <pdn_interface_setopt+0x144>
   32652:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   32656:	6941      	ldr	r1, [r0, #20]
   32658:	462b      	mov	r3, r5
   3265a:	4a28      	ldr	r2, [pc, #160]	; (326fc <pdn_interface_setopt+0x15c>)
   3265c:	3020      	adds	r0, #32
   3265e:	f004 fde3 	bl	37228 <sniprintf>
   32662:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   32666:	3021      	adds	r0, #33	; 0x21
   32668:	4633      	mov	r3, r6
   3266a:	6991      	ldr	r1, [r2, #24]
   3266c:	4410      	add	r0, r2
   3266e:	4a23      	ldr	r2, [pc, #140]	; (326fc <pdn_interface_setopt+0x15c>)
   32670:	f004 fdda 	bl	37228 <sniprintf>
   32674:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   32678:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   3267c:	2000      	movs	r0, #0
   3267e:	741a      	strb	r2, [r3, #16]
   32680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32682:	202d      	movs	r0, #45	; 0x2d
   32684:	e7a0      	b.n	325c8 <pdn_interface_setopt+0x28>
   32686:	689a      	ldr	r2, [r3, #8]
   32688:	b12a      	cbz	r2, 32696 <pdn_interface_setopt+0xf6>
   3268a:	689a      	ldr	r2, [r3, #8]
   3268c:	2a03      	cmp	r2, #3
   3268e:	d002      	beq.n	32696 <pdn_interface_setopt+0xf6>
   32690:	689a      	ldr	r2, [r3, #8]
   32692:	2a04      	cmp	r2, #4
   32694:	d101      	bne.n	3269a <pdn_interface_setopt+0xfa>
   32696:	200e      	movs	r0, #14
   32698:	e796      	b.n	325c8 <pdn_interface_setopt+0x28>
   3269a:	08b2      	lsrs	r2, r6, #2
   3269c:	1e51      	subs	r1, r2, #1
   3269e:	2901      	cmp	r1, #1
   326a0:	d813      	bhi.n	326ca <pdn_interface_setopt+0x12a>
   326a2:	07b1      	lsls	r1, r6, #30
   326a4:	d111      	bne.n	326ca <pdn_interface_setopt+0x12a>
   326a6:	6829      	ldr	r1, [r5, #0]
   326a8:	2902      	cmp	r1, #2
   326aa:	d016      	beq.n	326da <pdn_interface_setopt+0x13a>
   326ac:	290a      	cmp	r1, #10
   326ae:	d10c      	bne.n	326ca <pdn_interface_setopt+0x12a>
   326b0:	2102      	movs	r1, #2
   326b2:	2a02      	cmp	r2, #2
   326b4:	d106      	bne.n	326c4 <pdn_interface_setopt+0x124>
   326b6:	686a      	ldr	r2, [r5, #4]
   326b8:	2a02      	cmp	r2, #2
   326ba:	d010      	beq.n	326de <pdn_interface_setopt+0x13e>
   326bc:	2a0a      	cmp	r2, #10
   326be:	d104      	bne.n	326ca <pdn_interface_setopt+0x12a>
   326c0:	f041 0102 	orr.w	r1, r1, #2
   326c4:	60d9      	str	r1, [r3, #12]
   326c6:	2000      	movs	r0, #0
   326c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   326ca:	2016      	movs	r0, #22
   326cc:	e77c      	b.n	325c8 <pdn_interface_setopt+0x28>
   326ce:	2016      	movs	r0, #22
   326d0:	f7f7 f932 	bl	29938 <bsd_os_errno_set>
   326d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   326d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   326da:	2101      	movs	r1, #1
   326dc:	e7e9      	b.n	326b2 <pdn_interface_setopt+0x112>
   326de:	f041 0101 	orr.w	r1, r1, #1
   326e2:	e7ef      	b.n	326c4 <pdn_interface_setopt+0x124>
   326e4:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   326e8:	200c      	movs	r0, #12
   326ea:	6153      	str	r3, [r2, #20]
   326ec:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   326f0:	6193      	str	r3, [r2, #24]
   326f2:	e769      	b.n	325c8 <pdn_interface_setopt+0x28>
   326f4:	789a0000 	.word	0x789a0000
   326f8:	20023e94 	.word	0x20023e94
   326fc:	0003cc24 	.word	0x0003cc24

00032700 <pdn_interface_getopt>:
   32700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32704:	f240 2402 	movw	r4, #514	; 0x202
   32708:	b083      	sub	sp, #12
   3270a:	42a1      	cmp	r1, r4
   3270c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   3270e:	f040 808f 	bne.w	32830 <pdn_interface_getopt+0x130>
   32712:	461e      	mov	r6, r3
   32714:	2b00      	cmp	r3, #0
   32716:	f000 808b 	beq.w	32830 <pdn_interface_getopt+0x130>
   3271a:	2d00      	cmp	r5, #0
   3271c:	f000 8088 	beq.w	32830 <pdn_interface_getopt+0x130>
   32720:	0c03      	lsrs	r3, r0, #16
   32722:	4954      	ldr	r1, [pc, #336]	; (32874 <pdn_interface_getopt+0x174>)
   32724:	041b      	lsls	r3, r3, #16
   32726:	428b      	cmp	r3, r1
   32728:	f040 8084 	bne.w	32834 <pdn_interface_getopt+0x134>
   3272c:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   32730:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   32734:	2c09      	cmp	r4, #9
   32736:	dc7d      	bgt.n	32834 <pdn_interface_getopt+0x134>
   32738:	4b4f      	ldr	r3, [pc, #316]	; (32878 <pdn_interface_getopt+0x178>)
   3273a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   3273e:	2b00      	cmp	r3, #0
   32740:	d078      	beq.n	32834 <pdn_interface_getopt+0x134>
   32742:	6899      	ldr	r1, [r3, #8]
   32744:	2900      	cmp	r1, #0
   32746:	d075      	beq.n	32834 <pdn_interface_getopt+0x134>
   32748:	2a02      	cmp	r2, #2
   3274a:	d04e      	beq.n	327ea <pdn_interface_getopt+0xea>
   3274c:	2a03      	cmp	r2, #3
   3274e:	d009      	beq.n	32764 <pdn_interface_getopt+0x64>
   32750:	2a01      	cmp	r2, #1
   32752:	d054      	beq.n	327fe <pdn_interface_getopt+0xfe>
   32754:	202d      	movs	r0, #45	; 0x2d
   32756:	f7f7 f8ef 	bl	29938 <bsd_os_errno_set>
   3275a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3275e:	b003      	add	sp, #12
   32760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32764:	682b      	ldr	r3, [r5, #0]
   32766:	2b00      	cmp	r3, #0
   32768:	d062      	beq.n	32830 <pdn_interface_getopt+0x130>
   3276a:	4b44      	ldr	r3, [pc, #272]	; (3287c <pdn_interface_getopt+0x17c>)
   3276c:	4a44      	ldr	r2, [pc, #272]	; (32880 <pdn_interface_getopt+0x180>)
   3276e:	f44f 7180 	mov.w	r1, #256	; 0x100
   32772:	4844      	ldr	r0, [pc, #272]	; (32884 <pdn_interface_getopt+0x184>)
   32774:	f8df 8118 	ldr.w	r8, [pc, #280]	; 32890 <pdn_interface_getopt+0x190>
   32778:	f004 fd56 	bl	37228 <sniprintf>
   3277c:	4841      	ldr	r0, [pc, #260]	; (32884 <pdn_interface_getopt+0x184>)
   3277e:	f8d8 9000 	ldr.w	r9, [r8]
   32782:	2700      	movs	r7, #0
   32784:	f7ea fc74 	bl	1d070 <strlen>
   32788:	463b      	mov	r3, r7
   3278a:	4602      	mov	r2, r0
   3278c:	493d      	ldr	r1, [pc, #244]	; (32884 <pdn_interface_getopt+0x184>)
   3278e:	4648      	mov	r0, r9
   32790:	9701      	str	r7, [sp, #4]
   32792:	9700      	str	r7, [sp, #0]
   32794:	f7ff f81c 	bl	317d0 <at_interface_write>
   32798:	4681      	mov	r9, r0
   3279a:	483a      	ldr	r0, [pc, #232]	; (32884 <pdn_interface_getopt+0x184>)
   3279c:	f7ea fc68 	bl	1d070 <strlen>
   327a0:	4548      	cmp	r0, r9
   327a2:	d161      	bne.n	32868 <pdn_interface_getopt+0x168>
   327a4:	463b      	mov	r3, r7
   327a6:	e9cd 7700 	strd	r7, r7, [sp]
   327aa:	f44f 7280 	mov.w	r2, #256	; 0x100
   327ae:	4935      	ldr	r1, [pc, #212]	; (32884 <pdn_interface_getopt+0x184>)
   327b0:	f8d8 0000 	ldr.w	r0, [r8]
   327b4:	f7ff f960 	bl	31a78 <at_interface_read>
   327b8:	4607      	mov	r7, r0
   327ba:	4833      	ldr	r0, [pc, #204]	; (32888 <pdn_interface_getopt+0x188>)
   327bc:	f7ea fc58 	bl	1d070 <strlen>
   327c0:	4287      	cmp	r7, r0
   327c2:	db3d      	blt.n	32840 <pdn_interface_getopt+0x140>
   327c4:	4602      	mov	r2, r0
   327c6:	492f      	ldr	r1, [pc, #188]	; (32884 <pdn_interface_getopt+0x184>)
   327c8:	482f      	ldr	r0, [pc, #188]	; (32888 <pdn_interface_getopt+0x188>)
   327ca:	f008 ff59 	bl	3b680 <strncmp>
   327ce:	4607      	mov	r7, r0
   327d0:	2800      	cmp	r0, #0
   327d2:	d135      	bne.n	32840 <pdn_interface_getopt+0x140>
   327d4:	4620      	mov	r0, r4
   327d6:	492b      	ldr	r1, [pc, #172]	; (32884 <pdn_interface_getopt+0x184>)
   327d8:	f7ff fa38 	bl	31c4c <pdn_state_get_parser>
   327dc:	2800      	cmp	r0, #0
   327de:	dbba      	blt.n	32756 <pdn_interface_getopt+0x56>
   327e0:	2301      	movs	r3, #1
   327e2:	7030      	strb	r0, [r6, #0]
   327e4:	4638      	mov	r0, r7
   327e6:	602b      	str	r3, [r5, #0]
   327e8:	e7b9      	b.n	3275e <pdn_interface_getopt+0x5e>
   327ea:	682a      	ldr	r2, [r5, #0]
   327ec:	b302      	cbz	r2, 32830 <pdn_interface_getopt+0x130>
   327ee:	2201      	movs	r2, #1
   327f0:	2000      	movs	r0, #0
   327f2:	681b      	ldr	r3, [r3, #0]
   327f4:	7033      	strb	r3, [r6, #0]
   327f6:	602a      	str	r2, [r5, #0]
   327f8:	b003      	add	sp, #12
   327fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   327fe:	689a      	ldr	r2, [r3, #8]
   32800:	b1a2      	cbz	r2, 3282c <pdn_interface_getopt+0x12c>
   32802:	689a      	ldr	r2, [r3, #8]
   32804:	2a04      	cmp	r2, #4
   32806:	d011      	beq.n	3282c <pdn_interface_getopt+0x12c>
   32808:	682a      	ldr	r2, [r5, #0]
   3280a:	2a07      	cmp	r2, #7
   3280c:	d910      	bls.n	32830 <pdn_interface_getopt+0x130>
   3280e:	f012 0203 	ands.w	r2, r2, #3
   32812:	d10d      	bne.n	32830 <pdn_interface_getopt+0x130>
   32814:	68db      	ldr	r3, [r3, #12]
   32816:	0799      	lsls	r1, r3, #30
   32818:	d421      	bmi.n	3285e <pdn_interface_getopt+0x15e>
   3281a:	2104      	movs	r1, #4
   3281c:	07db      	lsls	r3, r3, #31
   3281e:	d502      	bpl.n	32826 <pdn_interface_getopt+0x126>
   32820:	2302      	movs	r3, #2
   32822:	50b3      	str	r3, [r6, r2]
   32824:	460a      	mov	r2, r1
   32826:	602a      	str	r2, [r5, #0]
   32828:	2000      	movs	r0, #0
   3282a:	e798      	b.n	3275e <pdn_interface_getopt+0x5e>
   3282c:	200e      	movs	r0, #14
   3282e:	e792      	b.n	32756 <pdn_interface_getopt+0x56>
   32830:	2016      	movs	r0, #22
   32832:	e790      	b.n	32756 <pdn_interface_getopt+0x56>
   32834:	2009      	movs	r0, #9
   32836:	f7f7 f87f 	bl	29938 <bsd_os_errno_set>
   3283a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3283e:	e78e      	b.n	3275e <pdn_interface_getopt+0x5e>
   32840:	4812      	ldr	r0, [pc, #72]	; (3288c <pdn_interface_getopt+0x18c>)
   32842:	f7ea fc15 	bl	1d070 <strlen>
   32846:	490f      	ldr	r1, [pc, #60]	; (32884 <pdn_interface_getopt+0x184>)
   32848:	4602      	mov	r2, r0
   3284a:	4810      	ldr	r0, [pc, #64]	; (3288c <pdn_interface_getopt+0x18c>)
   3284c:	f008 ff18 	bl	3b680 <strncmp>
   32850:	b950      	cbnz	r0, 32868 <pdn_interface_getopt+0x168>
   32852:	2008      	movs	r0, #8
   32854:	f7f7 f870 	bl	29938 <bsd_os_errno_set>
   32858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3285c:	e77b      	b.n	32756 <pdn_interface_getopt+0x56>
   3285e:	220a      	movs	r2, #10
   32860:	2108      	movs	r1, #8
   32862:	6032      	str	r2, [r6, #0]
   32864:	2204      	movs	r2, #4
   32866:	e7d9      	b.n	3281c <pdn_interface_getopt+0x11c>
   32868:	2005      	movs	r0, #5
   3286a:	f7f7 f865 	bl	29938 <bsd_os_errno_set>
   3286e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32872:	e770      	b.n	32756 <pdn_interface_getopt+0x56>
   32874:	789a0000 	.word	0x789a0000
   32878:	20023e94 	.word	0x20023e94
   3287c:	0003cc04 	.word	0x0003cc04
   32880:	0003cc24 	.word	0x0003cc24
   32884:	20023d94 	.word	0x20023d94
   32888:	0003cc10 	.word	0x0003cc10
   3288c:	0003cc34 	.word	0x0003cc34
   32890:	20023d90 	.word	0x20023d90

00032894 <pdn_interface_pdn_id_get>:
   32894:	2900      	cmp	r1, #0
   32896:	f000 82ba 	beq.w	32e0e <pdn_interface_pdn_id_get+0x57a>
   3289a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3289e:	2802      	cmp	r0, #2
   328a0:	b083      	sub	sp, #12
   328a2:	460e      	mov	r6, r1
   328a4:	d067      	beq.n	32976 <pdn_interface_pdn_id_get+0xe2>
   328a6:	280a      	cmp	r0, #10
   328a8:	d040      	beq.n	3292c <pdn_interface_pdn_id_get+0x98>
   328aa:	4cae      	ldr	r4, [pc, #696]	; (32b64 <pdn_interface_pdn_id_get+0x2d0>)
   328ac:	6823      	ldr	r3, [r4, #0]
   328ae:	b11b      	cbz	r3, 328b8 <pdn_interface_pdn_id_get+0x24>
   328b0:	689b      	ldr	r3, [r3, #8]
   328b2:	2b03      	cmp	r3, #3
   328b4:	f000 80fc 	beq.w	32ab0 <pdn_interface_pdn_id_get+0x21c>
   328b8:	6863      	ldr	r3, [r4, #4]
   328ba:	b11b      	cbz	r3, 328c4 <pdn_interface_pdn_id_get+0x30>
   328bc:	689b      	ldr	r3, [r3, #8]
   328be:	2b03      	cmp	r3, #3
   328c0:	f000 80e4 	beq.w	32a8c <pdn_interface_pdn_id_get+0x1f8>
   328c4:	68a3      	ldr	r3, [r4, #8]
   328c6:	b11b      	cbz	r3, 328d0 <pdn_interface_pdn_id_get+0x3c>
   328c8:	689b      	ldr	r3, [r3, #8]
   328ca:	2b03      	cmp	r3, #3
   328cc:	f000 80cc 	beq.w	32a68 <pdn_interface_pdn_id_get+0x1d4>
   328d0:	68e3      	ldr	r3, [r4, #12]
   328d2:	b11b      	cbz	r3, 328dc <pdn_interface_pdn_id_get+0x48>
   328d4:	689b      	ldr	r3, [r3, #8]
   328d6:	2b03      	cmp	r3, #3
   328d8:	f000 80b4 	beq.w	32a44 <pdn_interface_pdn_id_get+0x1b0>
   328dc:	6923      	ldr	r3, [r4, #16]
   328de:	b11b      	cbz	r3, 328e8 <pdn_interface_pdn_id_get+0x54>
   328e0:	689b      	ldr	r3, [r3, #8]
   328e2:	2b03      	cmp	r3, #3
   328e4:	f000 80f5 	beq.w	32ad2 <pdn_interface_pdn_id_get+0x23e>
   328e8:	6963      	ldr	r3, [r4, #20]
   328ea:	b11b      	cbz	r3, 328f4 <pdn_interface_pdn_id_get+0x60>
   328ec:	689b      	ldr	r3, [r3, #8]
   328ee:	2b03      	cmp	r3, #3
   328f0:	f000 813c 	beq.w	32b6c <pdn_interface_pdn_id_get+0x2d8>
   328f4:	69a3      	ldr	r3, [r4, #24]
   328f6:	b11b      	cbz	r3, 32900 <pdn_interface_pdn_id_get+0x6c>
   328f8:	689b      	ldr	r3, [r3, #8]
   328fa:	2b03      	cmp	r3, #3
   328fc:	f000 811f 	beq.w	32b3e <pdn_interface_pdn_id_get+0x2aa>
   32900:	69e3      	ldr	r3, [r4, #28]
   32902:	b11b      	cbz	r3, 3290c <pdn_interface_pdn_id_get+0x78>
   32904:	689b      	ldr	r3, [r3, #8]
   32906:	2b03      	cmp	r3, #3
   32908:	f000 8107 	beq.w	32b1a <pdn_interface_pdn_id_get+0x286>
   3290c:	6a23      	ldr	r3, [r4, #32]
   3290e:	b11b      	cbz	r3, 32918 <pdn_interface_pdn_id_get+0x84>
   32910:	689b      	ldr	r3, [r3, #8]
   32912:	2b03      	cmp	r3, #3
   32914:	f000 80ef 	beq.w	32af6 <pdn_interface_pdn_id_get+0x262>
   32918:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3291a:	b113      	cbz	r3, 32922 <pdn_interface_pdn_id_get+0x8e>
   3291c:	689b      	ldr	r3, [r3, #8]
   3291e:	2b03      	cmp	r3, #3
   32920:	d07e      	beq.n	32a20 <pdn_interface_pdn_id_get+0x18c>
   32922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32926:	b003      	add	sp, #12
   32928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3292c:	2500      	movs	r5, #0
   3292e:	4c8e      	ldr	r4, [pc, #568]	; (32b68 <pdn_interface_pdn_id_get+0x2d4>)
   32930:	e002      	b.n	32938 <pdn_interface_pdn_id_get+0xa4>
   32932:	3501      	adds	r5, #1
   32934:	2d0a      	cmp	r5, #10
   32936:	d0f4      	beq.n	32922 <pdn_interface_pdn_id_get+0x8e>
   32938:	f854 3f04 	ldr.w	r3, [r4, #4]!
   3293c:	2b00      	cmp	r3, #0
   3293e:	d0f8      	beq.n	32932 <pdn_interface_pdn_id_get+0x9e>
   32940:	689b      	ldr	r3, [r3, #8]
   32942:	2b03      	cmp	r3, #3
   32944:	d1f5      	bne.n	32932 <pdn_interface_pdn_id_get+0x9e>
   32946:	4630      	mov	r0, r6
   32948:	f7ea fb92 	bl	1d070 <strlen>
   3294c:	6823      	ldr	r3, [r4, #0]
   3294e:	69da      	ldr	r2, [r3, #28]
   32950:	4290      	cmp	r0, r2
   32952:	d1ee      	bne.n	32932 <pdn_interface_pdn_id_get+0x9e>
   32954:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   32958:	4439      	add	r1, r7
   3295a:	3120      	adds	r1, #32
   3295c:	4602      	mov	r2, r0
   3295e:	4419      	add	r1, r3
   32960:	4630      	mov	r0, r6
   32962:	f008 fe8d 	bl	3b680 <strncmp>
   32966:	2800      	cmp	r0, #0
   32968:	d1e3      	bne.n	32932 <pdn_interface_pdn_id_get+0x9e>
   3296a:	6823      	ldr	r3, [r4, #0]
   3296c:	68da      	ldr	r2, [r3, #12]
   3296e:	0792      	lsls	r2, r2, #30
   32970:	f100 8128 	bmi.w	32bc4 <pdn_interface_pdn_id_get+0x330>
   32974:	e7dd      	b.n	32932 <pdn_interface_pdn_id_get+0x9e>
   32976:	4c7b      	ldr	r4, [pc, #492]	; (32b64 <pdn_interface_pdn_id_get+0x2d0>)
   32978:	6823      	ldr	r3, [r4, #0]
   3297a:	b11b      	cbz	r3, 32984 <pdn_interface_pdn_id_get+0xf0>
   3297c:	689b      	ldr	r3, [r3, #8]
   3297e:	2b03      	cmp	r3, #3
   32980:	f000 822a 	beq.w	32dd8 <pdn_interface_pdn_id_get+0x544>
   32984:	6863      	ldr	r3, [r4, #4]
   32986:	b11b      	cbz	r3, 32990 <pdn_interface_pdn_id_get+0xfc>
   32988:	689b      	ldr	r3, [r3, #8]
   3298a:	2b03      	cmp	r3, #3
   3298c:	f000 8209 	beq.w	32da2 <pdn_interface_pdn_id_get+0x50e>
   32990:	68a3      	ldr	r3, [r4, #8]
   32992:	b11b      	cbz	r3, 3299c <pdn_interface_pdn_id_get+0x108>
   32994:	689b      	ldr	r3, [r3, #8]
   32996:	2b03      	cmp	r3, #3
   32998:	f000 81b3 	beq.w	32d02 <pdn_interface_pdn_id_get+0x46e>
   3299c:	68e3      	ldr	r3, [r4, #12]
   3299e:	b11b      	cbz	r3, 329a8 <pdn_interface_pdn_id_get+0x114>
   329a0:	689d      	ldr	r5, [r3, #8]
   329a2:	2d03      	cmp	r5, #3
   329a4:	f000 81c8 	beq.w	32d38 <pdn_interface_pdn_id_get+0x4a4>
   329a8:	6923      	ldr	r3, [r4, #16]
   329aa:	b11b      	cbz	r3, 329b4 <pdn_interface_pdn_id_get+0x120>
   329ac:	689b      	ldr	r3, [r3, #8]
   329ae:	2b03      	cmp	r3, #3
   329b0:	f000 80ee 	beq.w	32b90 <pdn_interface_pdn_id_get+0x2fc>
   329b4:	6963      	ldr	r3, [r4, #20]
   329b6:	b11b      	cbz	r3, 329c0 <pdn_interface_pdn_id_get+0x12c>
   329b8:	689b      	ldr	r3, [r3, #8]
   329ba:	2b03      	cmp	r3, #3
   329bc:	f000 8150 	beq.w	32c60 <pdn_interface_pdn_id_get+0x3cc>
   329c0:	69a3      	ldr	r3, [r4, #24]
   329c2:	b11b      	cbz	r3, 329cc <pdn_interface_pdn_id_get+0x138>
   329c4:	689b      	ldr	r3, [r3, #8]
   329c6:	2b03      	cmp	r3, #3
   329c8:	f000 8165 	beq.w	32c96 <pdn_interface_pdn_id_get+0x402>
   329cc:	69e3      	ldr	r3, [r4, #28]
   329ce:	b11b      	cbz	r3, 329d8 <pdn_interface_pdn_id_get+0x144>
   329d0:	689b      	ldr	r3, [r3, #8]
   329d2:	2b03      	cmp	r3, #3
   329d4:	f000 817a 	beq.w	32ccc <pdn_interface_pdn_id_get+0x438>
   329d8:	6a23      	ldr	r3, [r4, #32]
   329da:	b11b      	cbz	r3, 329e4 <pdn_interface_pdn_id_get+0x150>
   329dc:	689b      	ldr	r3, [r3, #8]
   329de:	2b03      	cmp	r3, #3
   329e0:	f000 81c4 	beq.w	32d6c <pdn_interface_pdn_id_get+0x4d8>
   329e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   329e6:	2b00      	cmp	r3, #0
   329e8:	d09b      	beq.n	32922 <pdn_interface_pdn_id_get+0x8e>
   329ea:	689b      	ldr	r3, [r3, #8]
   329ec:	2b03      	cmp	r3, #3
   329ee:	d198      	bne.n	32922 <pdn_interface_pdn_id_get+0x8e>
   329f0:	4630      	mov	r0, r6
   329f2:	f7ea fb3d 	bl	1d070 <strlen>
   329f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   329f8:	69da      	ldr	r2, [r3, #28]
   329fa:	4290      	cmp	r0, r2
   329fc:	d191      	bne.n	32922 <pdn_interface_pdn_id_get+0x8e>
   329fe:	e9d3 5105 	ldrd	r5, r1, [r3, #20]
   32a02:	4429      	add	r1, r5
   32a04:	3120      	adds	r1, #32
   32a06:	4602      	mov	r2, r0
   32a08:	4419      	add	r1, r3
   32a0a:	4630      	mov	r0, r6
   32a0c:	f008 fe38 	bl	3b680 <strncmp>
   32a10:	2800      	cmp	r0, #0
   32a12:	d186      	bne.n	32922 <pdn_interface_pdn_id_get+0x8e>
   32a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   32a16:	68da      	ldr	r2, [r3, #12]
   32a18:	07d2      	lsls	r2, r2, #31
   32a1a:	d582      	bpl.n	32922 <pdn_interface_pdn_id_get+0x8e>
   32a1c:	2509      	movs	r5, #9
   32a1e:	e0d1      	b.n	32bc4 <pdn_interface_pdn_id_get+0x330>
   32a20:	4630      	mov	r0, r6
   32a22:	f7ea fb25 	bl	1d070 <strlen>
   32a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
   32a28:	69da      	ldr	r2, [r3, #28]
   32a2a:	4290      	cmp	r0, r2
   32a2c:	f47f af79 	bne.w	32922 <pdn_interface_pdn_id_get+0x8e>
   32a30:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
   32a34:	4421      	add	r1, r4
   32a36:	3120      	adds	r1, #32
   32a38:	4602      	mov	r2, r0
   32a3a:	4419      	add	r1, r3
   32a3c:	4630      	mov	r0, r6
   32a3e:	f008 fe1f 	bl	3b680 <strncmp>
   32a42:	e76e      	b.n	32922 <pdn_interface_pdn_id_get+0x8e>
   32a44:	4630      	mov	r0, r6
   32a46:	f7ea fb13 	bl	1d070 <strlen>
   32a4a:	68e3      	ldr	r3, [r4, #12]
   32a4c:	69da      	ldr	r2, [r3, #28]
   32a4e:	4290      	cmp	r0, r2
   32a50:	f47f af44 	bne.w	328dc <pdn_interface_pdn_id_get+0x48>
   32a54:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32a58:	4429      	add	r1, r5
   32a5a:	3120      	adds	r1, #32
   32a5c:	4602      	mov	r2, r0
   32a5e:	4419      	add	r1, r3
   32a60:	4630      	mov	r0, r6
   32a62:	f008 fe0d 	bl	3b680 <strncmp>
   32a66:	e739      	b.n	328dc <pdn_interface_pdn_id_get+0x48>
   32a68:	4630      	mov	r0, r6
   32a6a:	f7ea fb01 	bl	1d070 <strlen>
   32a6e:	68a3      	ldr	r3, [r4, #8]
   32a70:	69da      	ldr	r2, [r3, #28]
   32a72:	4290      	cmp	r0, r2
   32a74:	f47f af2c 	bne.w	328d0 <pdn_interface_pdn_id_get+0x3c>
   32a78:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32a7c:	4429      	add	r1, r5
   32a7e:	3120      	adds	r1, #32
   32a80:	4602      	mov	r2, r0
   32a82:	4419      	add	r1, r3
   32a84:	4630      	mov	r0, r6
   32a86:	f008 fdfb 	bl	3b680 <strncmp>
   32a8a:	e721      	b.n	328d0 <pdn_interface_pdn_id_get+0x3c>
   32a8c:	4630      	mov	r0, r6
   32a8e:	f7ea faef 	bl	1d070 <strlen>
   32a92:	6863      	ldr	r3, [r4, #4]
   32a94:	69da      	ldr	r2, [r3, #28]
   32a96:	4290      	cmp	r0, r2
   32a98:	f47f af14 	bne.w	328c4 <pdn_interface_pdn_id_get+0x30>
   32a9c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32aa0:	4429      	add	r1, r5
   32aa2:	3120      	adds	r1, #32
   32aa4:	4602      	mov	r2, r0
   32aa6:	4419      	add	r1, r3
   32aa8:	4630      	mov	r0, r6
   32aaa:	f008 fde9 	bl	3b680 <strncmp>
   32aae:	e709      	b.n	328c4 <pdn_interface_pdn_id_get+0x30>
   32ab0:	4608      	mov	r0, r1
   32ab2:	f7ea fadd 	bl	1d070 <strlen>
   32ab6:	6823      	ldr	r3, [r4, #0]
   32ab8:	69da      	ldr	r2, [r3, #28]
   32aba:	4282      	cmp	r2, r0
   32abc:	f47f aefc 	bne.w	328b8 <pdn_interface_pdn_id_get+0x24>
   32ac0:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   32ac4:	4401      	add	r1, r0
   32ac6:	3120      	adds	r1, #32
   32ac8:	4419      	add	r1, r3
   32aca:	4630      	mov	r0, r6
   32acc:	f008 fdd8 	bl	3b680 <strncmp>
   32ad0:	e6f2      	b.n	328b8 <pdn_interface_pdn_id_get+0x24>
   32ad2:	4630      	mov	r0, r6
   32ad4:	f7ea facc 	bl	1d070 <strlen>
   32ad8:	6923      	ldr	r3, [r4, #16]
   32ada:	69da      	ldr	r2, [r3, #28]
   32adc:	4290      	cmp	r0, r2
   32ade:	f47f af03 	bne.w	328e8 <pdn_interface_pdn_id_get+0x54>
   32ae2:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32ae6:	4429      	add	r1, r5
   32ae8:	3120      	adds	r1, #32
   32aea:	4602      	mov	r2, r0
   32aec:	4419      	add	r1, r3
   32aee:	4630      	mov	r0, r6
   32af0:	f008 fdc6 	bl	3b680 <strncmp>
   32af4:	e6f8      	b.n	328e8 <pdn_interface_pdn_id_get+0x54>
   32af6:	4630      	mov	r0, r6
   32af8:	f7ea faba 	bl	1d070 <strlen>
   32afc:	6a23      	ldr	r3, [r4, #32]
   32afe:	69da      	ldr	r2, [r3, #28]
   32b00:	4290      	cmp	r0, r2
   32b02:	f47f af09 	bne.w	32918 <pdn_interface_pdn_id_get+0x84>
   32b06:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32b0a:	4429      	add	r1, r5
   32b0c:	3120      	adds	r1, #32
   32b0e:	4602      	mov	r2, r0
   32b10:	4419      	add	r1, r3
   32b12:	4630      	mov	r0, r6
   32b14:	f008 fdb4 	bl	3b680 <strncmp>
   32b18:	e6fe      	b.n	32918 <pdn_interface_pdn_id_get+0x84>
   32b1a:	4630      	mov	r0, r6
   32b1c:	f7ea faa8 	bl	1d070 <strlen>
   32b20:	69e3      	ldr	r3, [r4, #28]
   32b22:	69da      	ldr	r2, [r3, #28]
   32b24:	4290      	cmp	r0, r2
   32b26:	f47f aef1 	bne.w	3290c <pdn_interface_pdn_id_get+0x78>
   32b2a:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32b2e:	4429      	add	r1, r5
   32b30:	3120      	adds	r1, #32
   32b32:	4602      	mov	r2, r0
   32b34:	4419      	add	r1, r3
   32b36:	4630      	mov	r0, r6
   32b38:	f008 fda2 	bl	3b680 <strncmp>
   32b3c:	e6e6      	b.n	3290c <pdn_interface_pdn_id_get+0x78>
   32b3e:	4630      	mov	r0, r6
   32b40:	f7ea fa96 	bl	1d070 <strlen>
   32b44:	69a3      	ldr	r3, [r4, #24]
   32b46:	69da      	ldr	r2, [r3, #28]
   32b48:	4290      	cmp	r0, r2
   32b4a:	f47f aed9 	bne.w	32900 <pdn_interface_pdn_id_get+0x6c>
   32b4e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32b52:	4429      	add	r1, r5
   32b54:	3120      	adds	r1, #32
   32b56:	4602      	mov	r2, r0
   32b58:	4419      	add	r1, r3
   32b5a:	4630      	mov	r0, r6
   32b5c:	f008 fd90 	bl	3b680 <strncmp>
   32b60:	e6ce      	b.n	32900 <pdn_interface_pdn_id_get+0x6c>
   32b62:	bf00      	nop
   32b64:	20023e94 	.word	0x20023e94
   32b68:	20023e90 	.word	0x20023e90
   32b6c:	4630      	mov	r0, r6
   32b6e:	f7ea fa7f 	bl	1d070 <strlen>
   32b72:	6963      	ldr	r3, [r4, #20]
   32b74:	69da      	ldr	r2, [r3, #28]
   32b76:	4290      	cmp	r0, r2
   32b78:	f47f aebc 	bne.w	328f4 <pdn_interface_pdn_id_get+0x60>
   32b7c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32b80:	4429      	add	r1, r5
   32b82:	3120      	adds	r1, #32
   32b84:	4602      	mov	r2, r0
   32b86:	4419      	add	r1, r3
   32b88:	4630      	mov	r0, r6
   32b8a:	f008 fd79 	bl	3b680 <strncmp>
   32b8e:	e6b1      	b.n	328f4 <pdn_interface_pdn_id_get+0x60>
   32b90:	4630      	mov	r0, r6
   32b92:	f7ea fa6d 	bl	1d070 <strlen>
   32b96:	6923      	ldr	r3, [r4, #16]
   32b98:	69da      	ldr	r2, [r3, #28]
   32b9a:	4290      	cmp	r0, r2
   32b9c:	f47f af0a 	bne.w	329b4 <pdn_interface_pdn_id_get+0x120>
   32ba0:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32ba4:	4429      	add	r1, r5
   32ba6:	3120      	adds	r1, #32
   32ba8:	4602      	mov	r2, r0
   32baa:	4419      	add	r1, r3
   32bac:	4630      	mov	r0, r6
   32bae:	f008 fd67 	bl	3b680 <strncmp>
   32bb2:	2800      	cmp	r0, #0
   32bb4:	f47f aefe 	bne.w	329b4 <pdn_interface_pdn_id_get+0x120>
   32bb8:	6923      	ldr	r3, [r4, #16]
   32bba:	68da      	ldr	r2, [r3, #12]
   32bbc:	07d2      	lsls	r2, r2, #31
   32bbe:	f57f aef9 	bpl.w	329b4 <pdn_interface_pdn_id_get+0x120>
   32bc2:	2504      	movs	r5, #4
   32bc4:	6858      	ldr	r0, [r3, #4]
   32bc6:	1c43      	adds	r3, r0, #1
   32bc8:	f47f aead 	bne.w	32926 <pdn_interface_pdn_id_get+0x92>
   32bcc:	4e9d      	ldr	r6, [pc, #628]	; (32e44 <pdn_interface_pdn_id_get+0x5b0>)
   32bce:	4b9e      	ldr	r3, [pc, #632]	; (32e48 <pdn_interface_pdn_id_get+0x5b4>)
   32bd0:	4a9e      	ldr	r2, [pc, #632]	; (32e4c <pdn_interface_pdn_id_get+0x5b8>)
   32bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
   32bd6:	4630      	mov	r0, r6
   32bd8:	f004 fb26 	bl	37228 <sniprintf>
   32bdc:	4c9c      	ldr	r4, [pc, #624]	; (32e50 <pdn_interface_pdn_id_get+0x5bc>)
   32bde:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   32be2:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   32be6:	4a9b      	ldr	r2, [pc, #620]	; (32e54 <pdn_interface_pdn_id_get+0x5c0>)
   32be8:	681b      	ldr	r3, [r3, #0]
   32bea:	4430      	add	r0, r6
   32bec:	f8df 8270 	ldr.w	r8, [pc, #624]	; 32e60 <pdn_interface_pdn_id_get+0x5cc>
   32bf0:	f004 fb1a 	bl	37228 <sniprintf>
   32bf4:	4630      	mov	r0, r6
   32bf6:	f8d8 9000 	ldr.w	r9, [r8]
   32bfa:	2700      	movs	r7, #0
   32bfc:	f7ea fa38 	bl	1d070 <strlen>
   32c00:	4631      	mov	r1, r6
   32c02:	4602      	mov	r2, r0
   32c04:	463b      	mov	r3, r7
   32c06:	4648      	mov	r0, r9
   32c08:	9701      	str	r7, [sp, #4]
   32c0a:	9700      	str	r7, [sp, #0]
   32c0c:	f7fe fde0 	bl	317d0 <at_interface_write>
   32c10:	4681      	mov	r9, r0
   32c12:	4630      	mov	r0, r6
   32c14:	f7ea fa2c 	bl	1d070 <strlen>
   32c18:	4548      	cmp	r0, r9
   32c1a:	f040 810b 	bne.w	32e34 <pdn_interface_pdn_id_get+0x5a0>
   32c1e:	463b      	mov	r3, r7
   32c20:	f44f 7280 	mov.w	r2, #256	; 0x100
   32c24:	e9cd 7700 	strd	r7, r7, [sp]
   32c28:	4631      	mov	r1, r6
   32c2a:	f8d8 0000 	ldr.w	r0, [r8]
   32c2e:	f7fe ff23 	bl	31a78 <at_interface_read>
   32c32:	4607      	mov	r7, r0
   32c34:	4888      	ldr	r0, [pc, #544]	; (32e58 <pdn_interface_pdn_id_get+0x5c4>)
   32c36:	f7ea fa1b 	bl	1d070 <strlen>
   32c3a:	4287      	cmp	r7, r0
   32c3c:	4602      	mov	r2, r0
   32c3e:	f2c0 80e9 	blt.w	32e14 <pdn_interface_pdn_id_get+0x580>
   32c42:	4631      	mov	r1, r6
   32c44:	4884      	ldr	r0, [pc, #528]	; (32e58 <pdn_interface_pdn_id_get+0x5c4>)
   32c46:	f008 fd1b 	bl	3b680 <strncmp>
   32c4a:	2800      	cmp	r0, #0
   32c4c:	f040 80e2 	bne.w	32e14 <pdn_interface_pdn_id_get+0x580>
   32c50:	4631      	mov	r1, r6
   32c52:	4628      	mov	r0, r5
   32c54:	f7ff f830 	bl	31cb8 <pdn_id_get_parser>
   32c58:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   32c5c:	6858      	ldr	r0, [r3, #4]
   32c5e:	e662      	b.n	32926 <pdn_interface_pdn_id_get+0x92>
   32c60:	4630      	mov	r0, r6
   32c62:	f7ea fa05 	bl	1d070 <strlen>
   32c66:	6963      	ldr	r3, [r4, #20]
   32c68:	69da      	ldr	r2, [r3, #28]
   32c6a:	4290      	cmp	r0, r2
   32c6c:	f47f aea8 	bne.w	329c0 <pdn_interface_pdn_id_get+0x12c>
   32c70:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32c74:	4429      	add	r1, r5
   32c76:	3120      	adds	r1, #32
   32c78:	4602      	mov	r2, r0
   32c7a:	4419      	add	r1, r3
   32c7c:	4630      	mov	r0, r6
   32c7e:	f008 fcff 	bl	3b680 <strncmp>
   32c82:	2800      	cmp	r0, #0
   32c84:	f47f ae9c 	bne.w	329c0 <pdn_interface_pdn_id_get+0x12c>
   32c88:	6963      	ldr	r3, [r4, #20]
   32c8a:	68da      	ldr	r2, [r3, #12]
   32c8c:	07d7      	lsls	r7, r2, #31
   32c8e:	f57f ae97 	bpl.w	329c0 <pdn_interface_pdn_id_get+0x12c>
   32c92:	2505      	movs	r5, #5
   32c94:	e796      	b.n	32bc4 <pdn_interface_pdn_id_get+0x330>
   32c96:	4630      	mov	r0, r6
   32c98:	f7ea f9ea 	bl	1d070 <strlen>
   32c9c:	69a3      	ldr	r3, [r4, #24]
   32c9e:	69da      	ldr	r2, [r3, #28]
   32ca0:	4290      	cmp	r0, r2
   32ca2:	f47f ae93 	bne.w	329cc <pdn_interface_pdn_id_get+0x138>
   32ca6:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32caa:	4429      	add	r1, r5
   32cac:	3120      	adds	r1, #32
   32cae:	4602      	mov	r2, r0
   32cb0:	4419      	add	r1, r3
   32cb2:	4630      	mov	r0, r6
   32cb4:	f008 fce4 	bl	3b680 <strncmp>
   32cb8:	2800      	cmp	r0, #0
   32cba:	f47f ae87 	bne.w	329cc <pdn_interface_pdn_id_get+0x138>
   32cbe:	69a3      	ldr	r3, [r4, #24]
   32cc0:	68da      	ldr	r2, [r3, #12]
   32cc2:	07d5      	lsls	r5, r2, #31
   32cc4:	f57f ae82 	bpl.w	329cc <pdn_interface_pdn_id_get+0x138>
   32cc8:	2506      	movs	r5, #6
   32cca:	e77b      	b.n	32bc4 <pdn_interface_pdn_id_get+0x330>
   32ccc:	4630      	mov	r0, r6
   32cce:	f7ea f9cf 	bl	1d070 <strlen>
   32cd2:	69e3      	ldr	r3, [r4, #28]
   32cd4:	69da      	ldr	r2, [r3, #28]
   32cd6:	4290      	cmp	r0, r2
   32cd8:	f47f ae7e 	bne.w	329d8 <pdn_interface_pdn_id_get+0x144>
   32cdc:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32ce0:	4429      	add	r1, r5
   32ce2:	3120      	adds	r1, #32
   32ce4:	4602      	mov	r2, r0
   32ce6:	4419      	add	r1, r3
   32ce8:	4630      	mov	r0, r6
   32cea:	f008 fcc9 	bl	3b680 <strncmp>
   32cee:	2800      	cmp	r0, #0
   32cf0:	f47f ae72 	bne.w	329d8 <pdn_interface_pdn_id_get+0x144>
   32cf4:	69e3      	ldr	r3, [r4, #28]
   32cf6:	68da      	ldr	r2, [r3, #12]
   32cf8:	07d0      	lsls	r0, r2, #31
   32cfa:	f57f ae6d 	bpl.w	329d8 <pdn_interface_pdn_id_get+0x144>
   32cfe:	2507      	movs	r5, #7
   32d00:	e760      	b.n	32bc4 <pdn_interface_pdn_id_get+0x330>
   32d02:	4630      	mov	r0, r6
   32d04:	f7ea f9b4 	bl	1d070 <strlen>
   32d08:	68a3      	ldr	r3, [r4, #8]
   32d0a:	69da      	ldr	r2, [r3, #28]
   32d0c:	4290      	cmp	r0, r2
   32d0e:	f47f ae45 	bne.w	3299c <pdn_interface_pdn_id_get+0x108>
   32d12:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32d16:	4429      	add	r1, r5
   32d18:	3120      	adds	r1, #32
   32d1a:	4602      	mov	r2, r0
   32d1c:	4419      	add	r1, r3
   32d1e:	4630      	mov	r0, r6
   32d20:	f008 fcae 	bl	3b680 <strncmp>
   32d24:	2800      	cmp	r0, #0
   32d26:	f47f ae39 	bne.w	3299c <pdn_interface_pdn_id_get+0x108>
   32d2a:	68a3      	ldr	r3, [r4, #8]
   32d2c:	68da      	ldr	r2, [r3, #12]
   32d2e:	07d0      	lsls	r0, r2, #31
   32d30:	f57f ae34 	bpl.w	3299c <pdn_interface_pdn_id_get+0x108>
   32d34:	2502      	movs	r5, #2
   32d36:	e745      	b.n	32bc4 <pdn_interface_pdn_id_get+0x330>
   32d38:	4630      	mov	r0, r6
   32d3a:	f7ea f999 	bl	1d070 <strlen>
   32d3e:	68e3      	ldr	r3, [r4, #12]
   32d40:	69da      	ldr	r2, [r3, #28]
   32d42:	4290      	cmp	r0, r2
   32d44:	f47f ae30 	bne.w	329a8 <pdn_interface_pdn_id_get+0x114>
   32d48:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   32d4c:	4439      	add	r1, r7
   32d4e:	3120      	adds	r1, #32
   32d50:	4602      	mov	r2, r0
   32d52:	4419      	add	r1, r3
   32d54:	4630      	mov	r0, r6
   32d56:	f008 fc93 	bl	3b680 <strncmp>
   32d5a:	2800      	cmp	r0, #0
   32d5c:	f47f ae24 	bne.w	329a8 <pdn_interface_pdn_id_get+0x114>
   32d60:	68e3      	ldr	r3, [r4, #12]
   32d62:	68da      	ldr	r2, [r3, #12]
   32d64:	07d1      	lsls	r1, r2, #31
   32d66:	f53f af2d 	bmi.w	32bc4 <pdn_interface_pdn_id_get+0x330>
   32d6a:	e61d      	b.n	329a8 <pdn_interface_pdn_id_get+0x114>
   32d6c:	4630      	mov	r0, r6
   32d6e:	f7ea f97f 	bl	1d070 <strlen>
   32d72:	6a23      	ldr	r3, [r4, #32]
   32d74:	69da      	ldr	r2, [r3, #28]
   32d76:	4290      	cmp	r0, r2
   32d78:	f47f ae34 	bne.w	329e4 <pdn_interface_pdn_id_get+0x150>
   32d7c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32d80:	4429      	add	r1, r5
   32d82:	3120      	adds	r1, #32
   32d84:	4602      	mov	r2, r0
   32d86:	4419      	add	r1, r3
   32d88:	4630      	mov	r0, r6
   32d8a:	f008 fc79 	bl	3b680 <strncmp>
   32d8e:	2800      	cmp	r0, #0
   32d90:	f47f ae28 	bne.w	329e4 <pdn_interface_pdn_id_get+0x150>
   32d94:	6a23      	ldr	r3, [r4, #32]
   32d96:	68da      	ldr	r2, [r3, #12]
   32d98:	07d1      	lsls	r1, r2, #31
   32d9a:	f57f ae23 	bpl.w	329e4 <pdn_interface_pdn_id_get+0x150>
   32d9e:	2508      	movs	r5, #8
   32da0:	e710      	b.n	32bc4 <pdn_interface_pdn_id_get+0x330>
   32da2:	4630      	mov	r0, r6
   32da4:	f7ea f964 	bl	1d070 <strlen>
   32da8:	6863      	ldr	r3, [r4, #4]
   32daa:	69da      	ldr	r2, [r3, #28]
   32dac:	4290      	cmp	r0, r2
   32dae:	f47f adef 	bne.w	32990 <pdn_interface_pdn_id_get+0xfc>
   32db2:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32db6:	4429      	add	r1, r5
   32db8:	3120      	adds	r1, #32
   32dba:	4602      	mov	r2, r0
   32dbc:	4419      	add	r1, r3
   32dbe:	4630      	mov	r0, r6
   32dc0:	f008 fc5e 	bl	3b680 <strncmp>
   32dc4:	2800      	cmp	r0, #0
   32dc6:	f47f ade3 	bne.w	32990 <pdn_interface_pdn_id_get+0xfc>
   32dca:	6863      	ldr	r3, [r4, #4]
   32dcc:	68da      	ldr	r2, [r3, #12]
   32dce:	07d5      	lsls	r5, r2, #31
   32dd0:	f57f adde 	bpl.w	32990 <pdn_interface_pdn_id_get+0xfc>
   32dd4:	2501      	movs	r5, #1
   32dd6:	e6f5      	b.n	32bc4 <pdn_interface_pdn_id_get+0x330>
   32dd8:	4608      	mov	r0, r1
   32dda:	f7ea f949 	bl	1d070 <strlen>
   32dde:	6823      	ldr	r3, [r4, #0]
   32de0:	69da      	ldr	r2, [r3, #28]
   32de2:	4290      	cmp	r0, r2
   32de4:	f47f adce 	bne.w	32984 <pdn_interface_pdn_id_get+0xf0>
   32de8:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   32dec:	4429      	add	r1, r5
   32dee:	3120      	adds	r1, #32
   32df0:	4602      	mov	r2, r0
   32df2:	4419      	add	r1, r3
   32df4:	4630      	mov	r0, r6
   32df6:	f008 fc43 	bl	3b680 <strncmp>
   32dfa:	4605      	mov	r5, r0
   32dfc:	2800      	cmp	r0, #0
   32dfe:	f47f adc1 	bne.w	32984 <pdn_interface_pdn_id_get+0xf0>
   32e02:	6823      	ldr	r3, [r4, #0]
   32e04:	68da      	ldr	r2, [r3, #12]
   32e06:	07d7      	lsls	r7, r2, #31
   32e08:	f53f aedc 	bmi.w	32bc4 <pdn_interface_pdn_id_get+0x330>
   32e0c:	e5ba      	b.n	32984 <pdn_interface_pdn_id_get+0xf0>
   32e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32e12:	4770      	bx	lr
   32e14:	4811      	ldr	r0, [pc, #68]	; (32e5c <pdn_interface_pdn_id_get+0x5c8>)
   32e16:	f7ea f92b 	bl	1d070 <strlen>
   32e1a:	490a      	ldr	r1, [pc, #40]	; (32e44 <pdn_interface_pdn_id_get+0x5b0>)
   32e1c:	4602      	mov	r2, r0
   32e1e:	480f      	ldr	r0, [pc, #60]	; (32e5c <pdn_interface_pdn_id_get+0x5c8>)
   32e20:	f008 fc2e 	bl	3b680 <strncmp>
   32e24:	b930      	cbnz	r0, 32e34 <pdn_interface_pdn_id_get+0x5a0>
   32e26:	2008      	movs	r0, #8
   32e28:	f7f6 fd86 	bl	29938 <bsd_os_errno_set>
   32e2c:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   32e30:	6858      	ldr	r0, [r3, #4]
   32e32:	e578      	b.n	32926 <pdn_interface_pdn_id_get+0x92>
   32e34:	2005      	movs	r0, #5
   32e36:	f7f6 fd7f 	bl	29938 <bsd_os_errno_set>
   32e3a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   32e3e:	6858      	ldr	r0, [r3, #4]
   32e40:	e571      	b.n	32926 <pdn_interface_pdn_id_get+0x92>
   32e42:	bf00      	nop
   32e44:	20023d94 	.word	0x20023d94
   32e48:	0003cbe8 	.word	0x0003cbe8
   32e4c:	0003cc24 	.word	0x0003cc24
   32e50:	20023e94 	.word	0x20023e94
   32e54:	0003cbe4 	.word	0x0003cbe4
   32e58:	0003cbf8 	.word	0x0003cbf8
   32e5c:	0003cc34 	.word	0x0003cc34
   32e60:	20023d90 	.word	0x20023d90

00032e64 <bsd_platform_error_handler>:
   32e64:	b508      	push	{r3, lr}
   32e66:	f7ea ff31 	bl	1dccc <bsd_recoverable_error_handler>
   32e6a:	bd08      	pop	{r3, pc}

00032e6c <bsd_init>:
   32e6c:	b160      	cbz	r0, 32e88 <bsd_init+0x1c>
   32e6e:	b510      	push	{r4, lr}
   32e70:	4c07      	ldr	r4, [pc, #28]	; (32e90 <bsd_init+0x24>)
   32e72:	7823      	ldrb	r3, [r4, #0]
   32e74:	b92b      	cbnz	r3, 32e82 <bsd_init+0x16>
   32e76:	f000 f81b 	bl	32eb0 <bsd_platform_init>
   32e7a:	b908      	cbnz	r0, 32e80 <bsd_init+0x14>
   32e7c:	2301      	movs	r3, #1
   32e7e:	7023      	strb	r3, [r4, #0]
   32e80:	bd10      	pop	{r4, pc}
   32e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32e86:	bd10      	pop	{r4, pc}
   32e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32e8c:	4770      	bx	lr
   32e8e:	bf00      	nop
   32e90:	2002cb9d 	.word	0x2002cb9d

00032e94 <unimplemented_method>:
   32e94:	b40f      	push	{r0, r1, r2, r3}
   32e96:	b508      	push	{r3, lr}
   32e98:	202d      	movs	r0, #45	; 0x2d
   32e9a:	f7f6 fd4d 	bl	29938 <bsd_os_errno_set>
   32e9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   32ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32ea6:	b004      	add	sp, #16
   32ea8:	4770      	bx	lr
   32eaa:	bf00      	nop

00032eac <rpc_transport_ipc_fault_handler>:
   32eac:	f7ff bfda 	b.w	32e64 <bsd_platform_error_handler>

00032eb0 <bsd_platform_init>:
   32eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   32eb2:	f04f 0c00 	mov.w	ip, #0
   32eb6:	f247 0660 	movw	r6, #28768	; 0x7060
   32eba:	f24b 0260 	movw	r2, #45152	; 0xb060
   32ebe:	6843      	ldr	r3, [r0, #4]
   32ec0:	4d3a      	ldr	r5, [pc, #232]	; (32fac <bsd_platform_init+0xfc>)
   32ec2:	4607      	mov	r7, r0
   32ec4:	602b      	str	r3, [r5, #0]
   32ec6:	7801      	ldrb	r1, [r0, #0]
   32ec8:	2006      	movs	r0, #6
   32eca:	4561      	cmp	r1, ip
   32ecc:	bf08      	it	eq
   32ece:	4632      	moveq	r2, r6
   32ed0:	4413      	add	r3, r2
   32ed2:	4c37      	ldr	r4, [pc, #220]	; (32fb0 <bsd_platform_init+0x100>)
   32ed4:	60ab      	str	r3, [r5, #8]
   32ed6:	68b9      	ldr	r1, [r7, #8]
   32ed8:	6063      	str	r3, [r4, #4]
   32eda:	4b36      	ldr	r3, [pc, #216]	; (32fb4 <bsd_platform_init+0x104>)
   32edc:	b093      	sub	sp, #76	; 0x4c
   32ede:	606a      	str	r2, [r5, #4]
   32ee0:	f8a4 c000 	strh.w	ip, [r4]
   32ee4:	1a8a      	subs	r2, r1, r2
   32ee6:	60ea      	str	r2, [r5, #12]
   32ee8:	60a2      	str	r2, [r4, #8]
   32eea:	81a0      	strh	r0, [r4, #12]
   32eec:	6123      	str	r3, [r4, #16]
   32eee:	f001 f8b7 	bl	34060 <nrf_mem_init>
   32ef2:	2800      	cmp	r0, #0
   32ef4:	d156      	bne.n	32fa4 <bsd_platform_init+0xf4>
   32ef6:	4621      	mov	r1, r4
   32ef8:	a801      	add	r0, sp, #4
   32efa:	f001 f925 	bl	34148 <nrf_mem_register>
   32efe:	2800      	cmp	r0, #0
   32f00:	d150      	bne.n	32fa4 <bsd_platform_init+0xf4>
   32f02:	f7f6 fead 	bl	29c60 <bsd_os_init>
   32f06:	f7fd fbff 	bl	30708 <rpc_framework_init>
   32f0a:	2800      	cmp	r0, #0
   32f0c:	d14a      	bne.n	32fa4 <bsd_platform_init+0xf4>
   32f0e:	783a      	ldrb	r2, [r7, #0]
   32f10:	682b      	ldr	r3, [r5, #0]
   32f12:	bb32      	cbnz	r2, 32f62 <bsd_platform_init+0xb2>
   32f14:	4606      	mov	r6, r0
   32f16:	2220      	movs	r2, #32
   32f18:	2408      	movs	r4, #8
   32f1a:	2500      	movs	r5, #0
   32f1c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   32f20:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   32f24:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   32f28:	4411      	add	r1, r2
   32f2a:	9302      	str	r3, [sp, #8]
   32f2c:	e9cd 6008 	strd	r6, r0, [sp, #32]
   32f30:	910c      	str	r1, [sp, #48]	; 0x30
   32f32:	9203      	str	r2, [sp, #12]
   32f34:	f103 0140 	add.w	r1, r3, #64	; 0x40
   32f38:	9205      	str	r2, [sp, #20]
   32f3a:	9207      	str	r2, [sp, #28]
   32f3c:	eb0d 0004 	add.w	r0, sp, r4
   32f40:	189a      	adds	r2, r3, r2
   32f42:	3360      	adds	r3, #96	; 0x60
   32f44:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   32f48:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   32f4c:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   32f50:	940f      	str	r4, [sp, #60]	; 0x3c
   32f52:	9104      	str	r1, [sp, #16]
   32f54:	9206      	str	r2, [sp, #24]
   32f56:	930a      	str	r3, [sp, #40]	; 0x28
   32f58:	f7fa fb3a 	bl	2d5d0 <rpc_transport_ipc_init>
   32f5c:	b128      	cbz	r0, 32f6a <bsd_platform_init+0xba>
   32f5e:	b013      	add	sp, #76	; 0x4c
   32f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32f62:	441e      	add	r6, r3
   32f64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   32f68:	e7d5      	b.n	32f16 <bsd_platform_init+0x66>
   32f6a:	f001 fddd 	bl	34b28 <interface_init>
   32f6e:	b9c8      	cbnz	r0, 32fa4 <bsd_platform_init+0xf4>
   32f70:	f7fe fcac 	bl	318cc <at_interface_init>
   32f74:	b9b0      	cbnz	r0, 32fa4 <bsd_platform_init+0xf4>
   32f76:	f7fb fe4b 	bl	2ec10 <ip_interface_init>
   32f7a:	b998      	cbnz	r0, 32fa4 <bsd_platform_init+0xf4>
   32f7c:	f7fb f902 	bl	2e184 <tls_interface_init>
   32f80:	b980      	cbnz	r0, 32fa4 <bsd_platform_init+0xf4>
   32f82:	f001 faed 	bl	34560 <mfu_interface_init>
   32f86:	b968      	cbnz	r0, 32fa4 <bsd_platform_init+0xf4>
   32f88:	f7fe feee 	bl	31d68 <pdn_interface_init>
   32f8c:	b950      	cbnz	r0, 32fa4 <bsd_platform_init+0xf4>
   32f8e:	f7fe faf3 	bl	31578 <gnss_interface_init>
   32f92:	b938      	cbnz	r0, 32fa4 <bsd_platform_init+0xf4>
   32f94:	f7f9 fd5a 	bl	2ca4c <logobj_interface_init>
   32f98:	1b40      	subs	r0, r0, r5
   32f9a:	bf18      	it	ne
   32f9c:	2001      	movne	r0, #1
   32f9e:	4240      	negs	r0, r0
   32fa0:	b013      	add	sp, #76	; 0x4c
   32fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32fa8:	b013      	add	sp, #76	; 0x4c
   32faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32fac:	20023ed0 	.word	0x20023ed0
   32fb0:	20023ebc 	.word	0x20023ebc
   32fb4:	0003cd88 	.word	0x0003cd88

00032fb8 <bsd_platform_af_method_table_get>:
   32fb8:	2805      	cmp	r0, #5
   32fba:	d02a      	beq.n	33012 <bsd_platform_af_method_table_get+0x5a>
   32fbc:	b508      	push	{r3, lr}
   32fbe:	d914      	bls.n	32fea <bsd_platform_af_method_table_get+0x32>
   32fc0:	280a      	cmp	r0, #10
   32fc2:	d016      	beq.n	32ff2 <bsd_platform_af_method_table_get+0x3a>
   32fc4:	2866      	cmp	r0, #102	; 0x66
   32fc6:	d11f      	bne.n	33008 <bsd_platform_af_method_table_get+0x50>
   32fc8:	f240 2302 	movw	r3, #514	; 0x202
   32fcc:	429a      	cmp	r2, r3
   32fce:	d035      	beq.n	3303c <bsd_platform_af_method_table_get+0x84>
   32fd0:	f240 2305 	movw	r3, #517	; 0x205
   32fd4:	429a      	cmp	r2, r3
   32fd6:	d035      	beq.n	33044 <bsd_platform_af_method_table_get+0x8c>
   32fd8:	f240 2301 	movw	r3, #513	; 0x201
   32fdc:	429a      	cmp	r2, r3
   32fde:	d02f      	beq.n	33040 <bsd_platform_af_method_table_get+0x88>
   32fe0:	202b      	movs	r0, #43	; 0x2b
   32fe2:	f7f6 fca9 	bl	29938 <bsd_os_errno_set>
   32fe6:	2000      	movs	r0, #0
   32fe8:	bd08      	pop	{r3, pc}
   32fea:	2801      	cmp	r0, #1
   32fec:	d016      	beq.n	3301c <bsd_platform_af_method_table_get+0x64>
   32fee:	2802      	cmp	r0, #2
   32ff0:	d10a      	bne.n	33008 <bsd_platform_af_method_table_get+0x50>
   32ff2:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   32ff6:	d21a      	bcs.n	3302e <bsd_platform_af_method_table_get+0x76>
   32ff8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   32ffc:	d21a      	bcs.n	33034 <bsd_platform_af_method_table_get+0x7c>
   32ffe:	3a01      	subs	r2, #1
   33000:	2a01      	cmp	r2, #1
   33002:	d8ed      	bhi.n	32fe0 <bsd_platform_af_method_table_get+0x28>
   33004:	4810      	ldr	r0, [pc, #64]	; (33048 <bsd_platform_af_method_table_get+0x90>)
   33006:	bd08      	pop	{r3, pc}
   33008:	2016      	movs	r0, #22
   3300a:	f7f6 fc95 	bl	29938 <bsd_os_errno_set>
   3300e:	2000      	movs	r0, #0
   33010:	bd08      	pop	{r3, pc}
   33012:	2903      	cmp	r1, #3
   33014:	480d      	ldr	r0, [pc, #52]	; (3304c <bsd_platform_af_method_table_get+0x94>)
   33016:	bf18      	it	ne
   33018:	2000      	movne	r0, #0
   3301a:	4770      	bx	lr
   3301c:	f240 2303 	movw	r3, #515	; 0x203
   33020:	429a      	cmp	r2, r3
   33022:	d009      	beq.n	33038 <bsd_platform_af_method_table_get+0x80>
   33024:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   33028:	d1da      	bne.n	32fe0 <bsd_platform_af_method_table_get+0x28>
   3302a:	4809      	ldr	r0, [pc, #36]	; (33050 <bsd_platform_af_method_table_get+0x98>)
   3302c:	bd08      	pop	{r3, pc}
   3302e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   33032:	d1d5      	bne.n	32fe0 <bsd_platform_af_method_table_get+0x28>
   33034:	4807      	ldr	r0, [pc, #28]	; (33054 <bsd_platform_af_method_table_get+0x9c>)
   33036:	bd08      	pop	{r3, pc}
   33038:	4807      	ldr	r0, [pc, #28]	; (33058 <bsd_platform_af_method_table_get+0xa0>)
   3303a:	bd08      	pop	{r3, pc}
   3303c:	4807      	ldr	r0, [pc, #28]	; (3305c <bsd_platform_af_method_table_get+0xa4>)
   3303e:	bd08      	pop	{r3, pc}
   33040:	4807      	ldr	r0, [pc, #28]	; (33060 <bsd_platform_af_method_table_get+0xa8>)
   33042:	bd08      	pop	{r3, pc}
   33044:	4807      	ldr	r0, [pc, #28]	; (33064 <bsd_platform_af_method_table_get+0xac>)
   33046:	bd08      	pop	{r3, pc}
   33048:	0003cc70 	.word	0x0003cc70
   3304c:	0003cd60 	.word	0x0003cd60
   33050:	0003cd10 	.word	0x0003cd10
   33054:	0003cc98 	.word	0x0003cc98
   33058:	0003ccc0 	.word	0x0003ccc0
   3305c:	0003cce8 	.word	0x0003cce8
   33060:	0003cc48 	.word	0x0003cc48
   33064:	0003cd38 	.word	0x0003cd38

00033068 <bsd_platform_fd_method_table_get>:
   33068:	b538      	push	{r3, r4, r5, lr}
   3306a:	4605      	mov	r5, r0
   3306c:	f001 fe8e 	bl	34d8c <interface_socket_from_handle_get>
   33070:	4604      	mov	r4, r0
   33072:	b960      	cbnz	r0, 3308e <bsd_platform_fd_method_table_get+0x26>
   33074:	4b2c      	ldr	r3, [pc, #176]	; (33128 <bsd_platform_fd_method_table_get+0xc0>)
   33076:	429d      	cmp	r5, r3
   33078:	d02f      	beq.n	330da <bsd_platform_fd_method_table_get+0x72>
   3307a:	0c2b      	lsrs	r3, r5, #16
   3307c:	4a2b      	ldr	r2, [pc, #172]	; (3312c <bsd_platform_fd_method_table_get+0xc4>)
   3307e:	041b      	lsls	r3, r3, #16
   33080:	4293      	cmp	r3, r2
   33082:	d03d      	beq.n	33100 <bsd_platform_fd_method_table_get+0x98>
   33084:	4b2a      	ldr	r3, [pc, #168]	; (33130 <bsd_platform_fd_method_table_get+0xc8>)
   33086:	429d      	cmp	r5, r3
   33088:	d149      	bne.n	3311e <bsd_platform_fd_method_table_get+0xb6>
   3308a:	482a      	ldr	r0, [pc, #168]	; (33134 <bsd_platform_fd_method_table_get+0xcc>)
   3308c:	bd38      	pop	{r3, r4, r5, pc}
   3308e:	68c3      	ldr	r3, [r0, #12]
   33090:	6942      	ldr	r2, [r0, #20]
   33092:	2b05      	cmp	r3, #5
   33094:	d036      	beq.n	33104 <bsd_platform_fd_method_table_get+0x9c>
   33096:	d911      	bls.n	330bc <bsd_platform_fd_method_table_get+0x54>
   33098:	2b0a      	cmp	r3, #10
   3309a:	d013      	beq.n	330c4 <bsd_platform_fd_method_table_get+0x5c>
   3309c:	2b66      	cmp	r3, #102	; 0x66
   3309e:	d11e      	bne.n	330de <bsd_platform_fd_method_table_get+0x76>
   330a0:	f240 2302 	movw	r3, #514	; 0x202
   330a4:	429a      	cmp	r2, r3
   330a6:	d02b      	beq.n	33100 <bsd_platform_fd_method_table_get+0x98>
   330a8:	f240 2305 	movw	r3, #517	; 0x205
   330ac:	429a      	cmp	r2, r3
   330ae:	d02f      	beq.n	33110 <bsd_platform_fd_method_table_get+0xa8>
   330b0:	f240 2301 	movw	r3, #513	; 0x201
   330b4:	429a      	cmp	r2, r3
   330b6:	d11e      	bne.n	330f6 <bsd_platform_fd_method_table_get+0x8e>
   330b8:	481f      	ldr	r0, [pc, #124]	; (33138 <bsd_platform_fd_method_table_get+0xd0>)
   330ba:	bd38      	pop	{r3, r4, r5, pc}
   330bc:	2b01      	cmp	r3, #1
   330be:	d013      	beq.n	330e8 <bsd_platform_fd_method_table_get+0x80>
   330c0:	2b02      	cmp	r3, #2
   330c2:	d10c      	bne.n	330de <bsd_platform_fd_method_table_get+0x76>
   330c4:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   330c8:	d224      	bcs.n	33114 <bsd_platform_fd_method_table_get+0xac>
   330ca:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   330ce:	d224      	bcs.n	3311a <bsd_platform_fd_method_table_get+0xb2>
   330d0:	3a01      	subs	r2, #1
   330d2:	2a01      	cmp	r2, #1
   330d4:	d80f      	bhi.n	330f6 <bsd_platform_fd_method_table_get+0x8e>
   330d6:	4819      	ldr	r0, [pc, #100]	; (3313c <bsd_platform_fd_method_table_get+0xd4>)
   330d8:	bd38      	pop	{r3, r4, r5, pc}
   330da:	4819      	ldr	r0, [pc, #100]	; (33140 <bsd_platform_fd_method_table_get+0xd8>)
   330dc:	bd38      	pop	{r3, r4, r5, pc}
   330de:	2016      	movs	r0, #22
   330e0:	f7f6 fc2a 	bl	29938 <bsd_os_errno_set>
   330e4:	2000      	movs	r0, #0
   330e6:	bd38      	pop	{r3, r4, r5, pc}
   330e8:	f240 2303 	movw	r3, #515	; 0x203
   330ec:	429a      	cmp	r2, r3
   330ee:	d0f4      	beq.n	330da <bsd_platform_fd_method_table_get+0x72>
   330f0:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   330f4:	d0c9      	beq.n	3308a <bsd_platform_fd_method_table_get+0x22>
   330f6:	202b      	movs	r0, #43	; 0x2b
   330f8:	f7f6 fc1e 	bl	29938 <bsd_os_errno_set>
   330fc:	2000      	movs	r0, #0
   330fe:	bd38      	pop	{r3, r4, r5, pc}
   33100:	4810      	ldr	r0, [pc, #64]	; (33144 <bsd_platform_fd_method_table_get+0xdc>)
   33102:	bd38      	pop	{r3, r4, r5, pc}
   33104:	6903      	ldr	r3, [r0, #16]
   33106:	4810      	ldr	r0, [pc, #64]	; (33148 <bsd_platform_fd_method_table_get+0xe0>)
   33108:	2b03      	cmp	r3, #3
   3310a:	bf18      	it	ne
   3310c:	2000      	movne	r0, #0
   3310e:	bd38      	pop	{r3, r4, r5, pc}
   33110:	480e      	ldr	r0, [pc, #56]	; (3314c <bsd_platform_fd_method_table_get+0xe4>)
   33112:	bd38      	pop	{r3, r4, r5, pc}
   33114:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   33118:	d1ed      	bne.n	330f6 <bsd_platform_fd_method_table_get+0x8e>
   3311a:	480d      	ldr	r0, [pc, #52]	; (33150 <bsd_platform_fd_method_table_get+0xe8>)
   3311c:	bd38      	pop	{r3, r4, r5, pc}
   3311e:	2009      	movs	r0, #9
   33120:	f7f6 fc0a 	bl	29938 <bsd_os_errno_set>
   33124:	4620      	mov	r0, r4
   33126:	bd38      	pop	{r3, r4, r5, pc}
   33128:	49765432 	.word	0x49765432
   3312c:	789a0000 	.word	0x789a0000
   33130:	49765443 	.word	0x49765443
   33134:	0003cd10 	.word	0x0003cd10
   33138:	0003cc48 	.word	0x0003cc48
   3313c:	0003cc70 	.word	0x0003cc70
   33140:	0003ccc0 	.word	0x0003ccc0
   33144:	0003cce8 	.word	0x0003cce8
   33148:	0003cd60 	.word	0x0003cd60
   3314c:	0003cd38 	.word	0x0003cd38
   33150:	0003cc98 	.word	0x0003cc98

00033154 <bsd_platform_getaddrinfo>:
   33154:	f7fc bec6 	b.w	2fee4 <ip_interface_getaddrinfo>

00033158 <bsd_platform_freeaddrinfo>:
   33158:	f7fc bfc2 	b.w	300e0 <ip_interface_freeaddrinfo>

0003315c <bsd_platform_poll>:
   3315c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33160:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   33164:	b083      	sub	sp, #12
   33166:	9200      	str	r2, [sp, #0]
   33168:	2800      	cmp	r0, #0
   3316a:	d048      	beq.n	331fe <bsd_platform_poll+0xa2>
   3316c:	1e4b      	subs	r3, r1, #1
   3316e:	2b08      	cmp	r3, #8
   33170:	d845      	bhi.n	331fe <bsd_platform_poll+0xa2>
   33172:	4680      	mov	r8, r0
   33174:	4605      	mov	r5, r0
   33176:	2400      	movs	r4, #0
   33178:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   3317c:	88ab      	ldrh	r3, [r5, #4]
   3317e:	6828      	ldr	r0, [r5, #0]
   33180:	f003 0303 	and.w	r3, r3, #3
   33184:	a901      	add	r1, sp, #4
   33186:	f043 061c 	orr.w	r6, r3, #28
   3318a:	f001 fe0d 	bl	34da8 <interface_socket_event_get>
   3318e:	9b01      	ldr	r3, [sp, #4]
   33190:	3508      	adds	r5, #8
   33192:	4033      	ands	r3, r6
   33194:	f825 3c02 	strh.w	r3, [r5, #-2]
   33198:	b103      	cbz	r3, 3319c <bsd_platform_poll+0x40>
   3319a:	3401      	adds	r4, #1
   3319c:	42af      	cmp	r7, r5
   3319e:	d1ed      	bne.n	3317c <bsd_platform_poll+0x20>
   331a0:	bb9c      	cbnz	r4, 3320a <bsd_platform_poll+0xae>
   331a2:	4669      	mov	r1, sp
   331a4:	4640      	mov	r0, r8
   331a6:	f7f6 fb0f 	bl	297c8 <bsd_os_timedwait>
   331aa:	4607      	mov	r7, r0
   331ac:	b108      	cbz	r0, 331b2 <bsd_platform_poll+0x56>
   331ae:	283c      	cmp	r0, #60	; 0x3c
   331b0:	d11d      	bne.n	331ee <bsd_platform_poll+0x92>
   331b2:	46c1      	mov	r9, r8
   331b4:	2600      	movs	r6, #0
   331b6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   331ba:	f8d9 0000 	ldr.w	r0, [r9]
   331be:	f003 0303 	and.w	r3, r3, #3
   331c2:	a901      	add	r1, sp, #4
   331c4:	f043 041c 	orr.w	r4, r3, #28
   331c8:	f001 fdee 	bl	34da8 <interface_socket_event_get>
   331cc:	9b01      	ldr	r3, [sp, #4]
   331ce:	f109 0908 	add.w	r9, r9, #8
   331d2:	4023      	ands	r3, r4
   331d4:	f829 3c02 	strh.w	r3, [r9, #-2]
   331d8:	b103      	cbz	r3, 331dc <bsd_platform_poll+0x80>
   331da:	3601      	adds	r6, #1
   331dc:	454d      	cmp	r5, r9
   331de:	d1ea      	bne.n	331b6 <bsd_platform_poll+0x5a>
   331e0:	b90e      	cbnz	r6, 331e6 <bsd_platform_poll+0x8a>
   331e2:	2f00      	cmp	r7, #0
   331e4:	d0dd      	beq.n	331a2 <bsd_platform_poll+0x46>
   331e6:	4630      	mov	r0, r6
   331e8:	b003      	add	sp, #12
   331ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   331ee:	2023      	movs	r0, #35	; 0x23
   331f0:	f7f6 fba2 	bl	29938 <bsd_os_errno_set>
   331f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   331f8:	b003      	add	sp, #12
   331fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   331fe:	2016      	movs	r0, #22
   33200:	f7f6 fb9a 	bl	29938 <bsd_os_errno_set>
   33204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33208:	e7ee      	b.n	331e8 <bsd_platform_poll+0x8c>
   3320a:	4620      	mov	r0, r4
   3320c:	e7ec      	b.n	331e8 <bsd_platform_poll+0x8c>
   3320e:	bf00      	nop

00033210 <bsd_platform_fcntl>:
   33210:	b508      	push	{r3, lr}
   33212:	4b06      	ldr	r3, [pc, #24]	; (3322c <bsd_platform_fcntl+0x1c>)
   33214:	4298      	cmp	r0, r3
   33216:	d003      	beq.n	33220 <bsd_platform_fcntl+0x10>
   33218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3321c:	f001 be6e 	b.w	34efc <interface_socket_fcntl>
   33220:	202d      	movs	r0, #45	; 0x2d
   33222:	f7f6 fb89 	bl	29938 <bsd_os_errno_set>
   33226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3322a:	bd08      	pop	{r3, pc}
   3322c:	49765432 	.word	0x49765432

00033230 <linked_list_init>:
   33230:	b128      	cbz	r0, 3323e <linked_list_init+0xe>
   33232:	2300      	movs	r3, #0
   33234:	6003      	str	r3, [r0, #0]
   33236:	e9c0 3301 	strd	r3, r3, [r0, #4]
   3323a:	4618      	mov	r0, r3
   3323c:	4770      	bx	lr
   3323e:	2007      	movs	r0, #7
   33240:	4770      	bx	lr
   33242:	bf00      	nop

00033244 <linked_list_push>:
   33244:	6802      	ldr	r2, [r0, #0]
   33246:	4603      	mov	r3, r0
   33248:	3201      	adds	r2, #1
   3324a:	d00e      	beq.n	3326a <linked_list_push+0x26>
   3324c:	2200      	movs	r2, #0
   3324e:	600a      	str	r2, [r1, #0]
   33250:	6802      	ldr	r2, [r0, #0]
   33252:	b13a      	cbz	r2, 33264 <linked_list_push+0x20>
   33254:	6882      	ldr	r2, [r0, #8]
   33256:	6011      	str	r1, [r2, #0]
   33258:	6081      	str	r1, [r0, #8]
   3325a:	681a      	ldr	r2, [r3, #0]
   3325c:	2000      	movs	r0, #0
   3325e:	3201      	adds	r2, #1
   33260:	601a      	str	r2, [r3, #0]
   33262:	4770      	bx	lr
   33264:	e9c0 1101 	strd	r1, r1, [r0, #4]
   33268:	e7f7      	b.n	3325a <linked_list_push+0x16>
   3326a:	2004      	movs	r0, #4
   3326c:	4770      	bx	lr
   3326e:	bf00      	nop

00033270 <linked_list_pop>:
   33270:	4603      	mov	r3, r0
   33272:	6800      	ldr	r0, [r0, #0]
   33274:	b128      	cbz	r0, 33282 <linked_list_pop+0x12>
   33276:	6858      	ldr	r0, [r3, #4]
   33278:	681a      	ldr	r2, [r3, #0]
   3327a:	6801      	ldr	r1, [r0, #0]
   3327c:	3a01      	subs	r2, #1
   3327e:	6059      	str	r1, [r3, #4]
   33280:	601a      	str	r2, [r3, #0]
   33282:	4770      	bx	lr

00033284 <linked_list_peek>:
   33284:	6803      	ldr	r3, [r0, #0]
   33286:	b10b      	cbz	r3, 3328c <linked_list_peek+0x8>
   33288:	6840      	ldr	r0, [r0, #4]
   3328a:	4770      	bx	lr
   3328c:	4618      	mov	r0, r3
   3328e:	4770      	bx	lr

00033290 <linked_list_size_get>:
   33290:	6800      	ldr	r0, [r0, #0]
   33292:	4770      	bx	lr

00033294 <linked_list_get_next>:
   33294:	6800      	ldr	r0, [r0, #0]
   33296:	4770      	bx	lr

00033298 <nrf_socket>:
   33298:	b570      	push	{r4, r5, r6, lr}
   3329a:	4604      	mov	r4, r0
   3329c:	460d      	mov	r5, r1
   3329e:	4616      	mov	r6, r2
   332a0:	f7ff fe8a 	bl	32fb8 <bsd_platform_af_method_table_get>
   332a4:	b130      	cbz	r0, 332b4 <nrf_socket+0x1c>
   332a6:	6803      	ldr	r3, [r0, #0]
   332a8:	4632      	mov	r2, r6
   332aa:	4629      	mov	r1, r5
   332ac:	4620      	mov	r0, r4
   332ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   332b2:	4718      	bx	r3
   332b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   332b8:	bd70      	pop	{r4, r5, r6, pc}
   332ba:	bf00      	nop

000332bc <nrf_close>:
   332bc:	b510      	push	{r4, lr}
   332be:	4604      	mov	r4, r0
   332c0:	f7ff fed2 	bl	33068 <bsd_platform_fd_method_table_get>
   332c4:	b120      	cbz	r0, 332d0 <nrf_close+0x14>
   332c6:	6843      	ldr	r3, [r0, #4]
   332c8:	4620      	mov	r0, r4
   332ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   332ce:	4718      	bx	r3
   332d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   332d4:	bd10      	pop	{r4, pc}
   332d6:	bf00      	nop

000332d8 <nrf_sendto>:
   332d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   332dc:	460d      	mov	r5, r1
   332de:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   332e2:	4616      	mov	r6, r2
   332e4:	461f      	mov	r7, r3
   332e6:	4604      	mov	r4, r0
   332e8:	f7ff febe 	bl	33068 <bsd_platform_fd_method_table_get>
   332ec:	b158      	cbz	r0, 33306 <nrf_sendto+0x2e>
   332ee:	e9cd 8908 	strd	r8, r9, [sp, #32]
   332f2:	f8d0 e008 	ldr.w	lr, [r0, #8]
   332f6:	463b      	mov	r3, r7
   332f8:	4632      	mov	r2, r6
   332fa:	4629      	mov	r1, r5
   332fc:	4620      	mov	r0, r4
   332fe:	46f4      	mov	ip, lr
   33300:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33304:	4760      	bx	ip
   33306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3330a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3330e:	bf00      	nop

00033310 <nrf_send>:
   33310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33314:	b082      	sub	sp, #8
   33316:	460e      	mov	r6, r1
   33318:	4617      	mov	r7, r2
   3331a:	4698      	mov	r8, r3
   3331c:	4605      	mov	r5, r0
   3331e:	f7ff fea3 	bl	33068 <bsd_platform_fd_method_table_get>
   33322:	b160      	cbz	r0, 3333e <nrf_send+0x2e>
   33324:	4604      	mov	r4, r0
   33326:	2000      	movs	r0, #0
   33328:	e9cd 0000 	strd	r0, r0, [sp]
   3332c:	4643      	mov	r3, r8
   3332e:	463a      	mov	r2, r7
   33330:	4631      	mov	r1, r6
   33332:	4628      	mov	r0, r5
   33334:	68a4      	ldr	r4, [r4, #8]
   33336:	47a0      	blx	r4
   33338:	b002      	add	sp, #8
   3333a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3333e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33342:	e7f9      	b.n	33338 <nrf_send+0x28>

00033344 <nrf_recvfrom>:
   33344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33348:	460d      	mov	r5, r1
   3334a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3334e:	4616      	mov	r6, r2
   33350:	461f      	mov	r7, r3
   33352:	4604      	mov	r4, r0
   33354:	f7ff fe88 	bl	33068 <bsd_platform_fd_method_table_get>
   33358:	b158      	cbz	r0, 33372 <nrf_recvfrom+0x2e>
   3335a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   3335e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   33362:	463b      	mov	r3, r7
   33364:	4632      	mov	r2, r6
   33366:	4629      	mov	r1, r5
   33368:	4620      	mov	r0, r4
   3336a:	46f4      	mov	ip, lr
   3336c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33370:	4760      	bx	ip
   33372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3337a:	bf00      	nop

0003337c <nrf_recv>:
   3337c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33380:	b082      	sub	sp, #8
   33382:	460e      	mov	r6, r1
   33384:	4617      	mov	r7, r2
   33386:	4698      	mov	r8, r3
   33388:	4605      	mov	r5, r0
   3338a:	f7ff fe6d 	bl	33068 <bsd_platform_fd_method_table_get>
   3338e:	b160      	cbz	r0, 333aa <nrf_recv+0x2e>
   33390:	4604      	mov	r4, r0
   33392:	2000      	movs	r0, #0
   33394:	e9cd 0000 	strd	r0, r0, [sp]
   33398:	4643      	mov	r3, r8
   3339a:	463a      	mov	r2, r7
   3339c:	4631      	mov	r1, r6
   3339e:	4628      	mov	r0, r5
   333a0:	68e4      	ldr	r4, [r4, #12]
   333a2:	47a0      	blx	r4
   333a4:	b002      	add	sp, #8
   333a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   333aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   333ae:	e7f9      	b.n	333a4 <nrf_recv+0x28>

000333b0 <nrf_connect>:
   333b0:	b570      	push	{r4, r5, r6, lr}
   333b2:	460d      	mov	r5, r1
   333b4:	4616      	mov	r6, r2
   333b6:	4604      	mov	r4, r0
   333b8:	f7ff fe56 	bl	33068 <bsd_platform_fd_method_table_get>
   333bc:	b130      	cbz	r0, 333cc <nrf_connect+0x1c>
   333be:	6943      	ldr	r3, [r0, #20]
   333c0:	4632      	mov	r2, r6
   333c2:	4629      	mov	r1, r5
   333c4:	4620      	mov	r0, r4
   333c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   333ca:	4718      	bx	r3
   333cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   333d0:	bd70      	pop	{r4, r5, r6, pc}
   333d2:	bf00      	nop

000333d4 <nrf_listen>:
   333d4:	b570      	push	{r4, r5, r6, lr}
   333d6:	460d      	mov	r5, r1
   333d8:	4604      	mov	r4, r0
   333da:	f7ff fe45 	bl	33068 <bsd_platform_fd_method_table_get>
   333de:	b128      	cbz	r0, 333ec <nrf_listen+0x18>
   333e0:	6983      	ldr	r3, [r0, #24]
   333e2:	4629      	mov	r1, r5
   333e4:	4620      	mov	r0, r4
   333e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   333ea:	4718      	bx	r3
   333ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   333f0:	bd70      	pop	{r4, r5, r6, pc}
   333f2:	bf00      	nop

000333f4 <nrf_accept>:
   333f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   333f8:	460d      	mov	r5, r1
   333fa:	4616      	mov	r6, r2
   333fc:	4604      	mov	r4, r0
   333fe:	f7ff fe33 	bl	33068 <bsd_platform_fd_method_table_get>
   33402:	b140      	cbz	r0, 33416 <nrf_accept+0x22>
   33404:	69c7      	ldr	r7, [r0, #28]
   33406:	4632      	mov	r2, r6
   33408:	4629      	mov	r1, r5
   3340a:	4620      	mov	r0, r4
   3340c:	46bc      	mov	ip, r7
   3340e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   33412:	2300      	movs	r3, #0
   33414:	4760      	bx	ip
   33416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3341a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3341e:	bf00      	nop

00033420 <nrf_bind>:
   33420:	b570      	push	{r4, r5, r6, lr}
   33422:	460d      	mov	r5, r1
   33424:	4616      	mov	r6, r2
   33426:	4604      	mov	r4, r0
   33428:	f7ff fe1e 	bl	33068 <bsd_platform_fd_method_table_get>
   3342c:	b130      	cbz	r0, 3343c <nrf_bind+0x1c>
   3342e:	6903      	ldr	r3, [r0, #16]
   33430:	4632      	mov	r2, r6
   33432:	4629      	mov	r1, r5
   33434:	4620      	mov	r0, r4
   33436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3343a:	4718      	bx	r3
   3343c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33440:	bd70      	pop	{r4, r5, r6, pc}
   33442:	bf00      	nop

00033444 <nrf_setsockopt>:
   33444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33448:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3344c:	460d      	mov	r5, r1
   3344e:	4616      	mov	r6, r2
   33450:	461f      	mov	r7, r3
   33452:	4604      	mov	r4, r0
   33454:	f7ff fe08 	bl	33068 <bsd_platform_fd_method_table_get>
   33458:	b158      	cbz	r0, 33472 <nrf_setsockopt+0x2e>
   3345a:	f8cd 8018 	str.w	r8, [sp, #24]
   3345e:	f8d0 e020 	ldr.w	lr, [r0, #32]
   33462:	463b      	mov	r3, r7
   33464:	4632      	mov	r2, r6
   33466:	4629      	mov	r1, r5
   33468:	4620      	mov	r0, r4
   3346a:	46f4      	mov	ip, lr
   3346c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   33470:	4760      	bx	ip
   33472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3347a:	bf00      	nop

0003347c <nrf_getsockopt>:
   3347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33480:	f8dd 8018 	ldr.w	r8, [sp, #24]
   33484:	460d      	mov	r5, r1
   33486:	4616      	mov	r6, r2
   33488:	461f      	mov	r7, r3
   3348a:	4604      	mov	r4, r0
   3348c:	f7ff fdec 	bl	33068 <bsd_platform_fd_method_table_get>
   33490:	b158      	cbz	r0, 334aa <nrf_getsockopt+0x2e>
   33492:	f8cd 8018 	str.w	r8, [sp, #24]
   33496:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   3349a:	463b      	mov	r3, r7
   3349c:	4632      	mov	r2, r6
   3349e:	4629      	mov	r1, r5
   334a0:	4620      	mov	r0, r4
   334a2:	46f4      	mov	ip, lr
   334a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   334a8:	4760      	bx	ip
   334aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   334ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   334b2:	bf00      	nop

000334b4 <nrf_getaddrinfo>:
   334b4:	f7ff be4e 	b.w	33154 <bsd_platform_getaddrinfo>

000334b8 <nrf_freeaddrinfo>:
   334b8:	f7ff be4e 	b.w	33158 <bsd_platform_freeaddrinfo>

000334bc <nrf_poll>:
   334bc:	f7ff be4e 	b.w	3315c <bsd_platform_poll>

000334c0 <nrf_fcntl>:
   334c0:	f7ff bea6 	b.w	33210 <bsd_platform_fcntl>

000334c4 <rpc_gnss_serialize_utc>:
   334c4:	4603      	mov	r3, r0
   334c6:	b1d8      	cbz	r0, 33500 <rpc_gnss_serialize_utc+0x3c>
   334c8:	b1d1      	cbz	r1, 33500 <rpc_gnss_serialize_utc+0x3c>
   334ca:	2000      	movs	r0, #0
   334cc:	2201      	movs	r2, #1
   334ce:	7048      	strb	r0, [r1, #1]
   334d0:	700a      	strb	r2, [r1, #0]
   334d2:	685a      	ldr	r2, [r3, #4]
   334d4:	2010      	movs	r0, #16
   334d6:	f8c1 2006 	str.w	r2, [r1, #6]
   334da:	681a      	ldr	r2, [r3, #0]
   334dc:	f8c1 2002 	str.w	r2, [r1, #2]
   334e0:	f993 200a 	ldrsb.w	r2, [r3, #10]
   334e4:	730a      	strb	r2, [r1, #12]
   334e6:	f993 200d 	ldrsb.w	r2, [r3, #13]
   334ea:	73ca      	strb	r2, [r1, #15]
   334ec:	f993 200c 	ldrsb.w	r2, [r3, #12]
   334f0:	738a      	strb	r2, [r1, #14]
   334f2:	7a1a      	ldrb	r2, [r3, #8]
   334f4:	728a      	strb	r2, [r1, #10]
   334f6:	7ada      	ldrb	r2, [r3, #11]
   334f8:	734a      	strb	r2, [r1, #13]
   334fa:	7a5b      	ldrb	r3, [r3, #9]
   334fc:	72cb      	strb	r3, [r1, #11]
   334fe:	4770      	bx	lr
   33500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33504:	4770      	bx	lr
   33506:	bf00      	nop

00033508 <rpc_gnss_serialize_ephe>:
   33508:	4603      	mov	r3, r0
   3350a:	2800      	cmp	r0, #0
   3350c:	d04b      	beq.n	335a6 <rpc_gnss_serialize_ephe+0x9e>
   3350e:	2900      	cmp	r1, #0
   33510:	d049      	beq.n	335a6 <rpc_gnss_serialize_ephe+0x9e>
   33512:	2000      	movs	r0, #0
   33514:	2202      	movs	r2, #2
   33516:	7048      	strb	r0, [r1, #1]
   33518:	700a      	strb	r2, [r1, #0]
   3351a:	68da      	ldr	r2, [r3, #12]
   3351c:	2040      	movs	r0, #64	; 0x40
   3351e:	f8c1 200b 	str.w	r2, [r1, #11]
   33522:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   33526:	f8a1 2009 	strh.w	r2, [r1, #9]
   3352a:	f993 2006 	ldrsb.w	r2, [r3, #6]
   3352e:	720a      	strb	r2, [r1, #8]
   33530:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   33534:	878a      	strh	r2, [r1, #60]	; 0x3c
   33536:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   3353a:	86ca      	strh	r2, [r1, #54]	; 0x36
   3353c:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   33540:	874a      	strh	r2, [r1, #58]	; 0x3a
   33542:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   33546:	868a      	strh	r2, [r1, #52]	; 0x34
   33548:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   3354c:	87ca      	strh	r2, [r1, #62]	; 0x3e
   3354e:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   33552:	870a      	strh	r2, [r1, #56]	; 0x38
   33554:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   33558:	830a      	strh	r2, [r1, #24]
   3355a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3355c:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   33560:	7c9a      	ldrb	r2, [r3, #18]
   33562:	744a      	strb	r2, [r1, #17]
   33564:	785a      	ldrb	r2, [r3, #1]
   33566:	70ca      	strb	r2, [r1, #3]
   33568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3356a:	62ca      	str	r2, [r1, #44]	; 0x2c
   3356c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   33570:	84ca      	strh	r2, [r1, #38]	; 0x26
   33572:	885a      	ldrh	r2, [r3, #2]
   33574:	808a      	strh	r2, [r1, #4]
   33576:	6a1a      	ldr	r2, [r3, #32]
   33578:	f8c1 201a 	str.w	r2, [r1, #26]
   3357c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   3357e:	630a      	str	r2, [r1, #48]	; 0x30
   33580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   33582:	f8c1 201e 	str.w	r2, [r1, #30]
   33586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   33588:	628a      	str	r2, [r1, #40]	; 0x28
   3358a:	781a      	ldrb	r2, [r3, #0]
   3358c:	708a      	strb	r2, [r1, #2]
   3358e:	f993 2010 	ldrsb.w	r2, [r3, #16]
   33592:	73ca      	strb	r2, [r1, #15]
   33594:	889a      	ldrh	r2, [r3, #4]
   33596:	80ca      	strh	r2, [r1, #6]
   33598:	8a9a      	ldrh	r2, [r3, #20]
   3359a:	824a      	strh	r2, [r1, #18]
   3359c:	7c5a      	ldrb	r2, [r3, #17]
   3359e:	740a      	strb	r2, [r1, #16]
   335a0:	699b      	ldr	r3, [r3, #24]
   335a2:	614b      	str	r3, [r1, #20]
   335a4:	4770      	bx	lr
   335a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   335aa:	4770      	bx	lr

000335ac <rpc_gnss_serialize_alm>:
   335ac:	4603      	mov	r3, r0
   335ae:	b360      	cbz	r0, 3360a <rpc_gnss_serialize_alm+0x5e>
   335b0:	b359      	cbz	r1, 3360a <rpc_gnss_serialize_alm+0x5e>
   335b2:	2000      	movs	r0, #0
   335b4:	2203      	movs	r2, #3
   335b6:	7048      	strb	r0, [r1, #1]
   335b8:	700a      	strb	r2, [r1, #0]
   335ba:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   335be:	2021      	movs	r0, #33	; 0x21
   335c0:	f8a1 201d 	strh.w	r2, [r1, #29]
   335c4:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   335c8:	f8a1 201f 	strh.w	r2, [r1, #31]
   335cc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   335d0:	810a      	strh	r2, [r1, #8]
   335d2:	889a      	ldrh	r2, [r3, #4]
   335d4:	80ca      	strh	r2, [r1, #6]
   335d6:	78da      	ldrb	r2, [r3, #3]
   335d8:	714a      	strb	r2, [r1, #5]
   335da:	699a      	ldr	r2, [r3, #24]
   335dc:	f8c1 2019 	str.w	r2, [r1, #25]
   335e0:	691a      	ldr	r2, [r3, #16]
   335e2:	f8c1 2011 	str.w	r2, [r1, #17]
   335e6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   335ea:	814a      	strh	r2, [r1, #10]
   335ec:	68da      	ldr	r2, [r3, #12]
   335ee:	f8c1 200d 	str.w	r2, [r1, #13]
   335f2:	7a9a      	ldrb	r2, [r3, #10]
   335f4:	730a      	strb	r2, [r1, #12]
   335f6:	781a      	ldrb	r2, [r3, #0]
   335f8:	708a      	strb	r2, [r1, #2]
   335fa:	789a      	ldrb	r2, [r3, #2]
   335fc:	710a      	strb	r2, [r1, #4]
   335fe:	695a      	ldr	r2, [r3, #20]
   33600:	f8c1 2015 	str.w	r2, [r1, #21]
   33604:	785b      	ldrb	r3, [r3, #1]
   33606:	70cb      	strb	r3, [r1, #3]
   33608:	4770      	bx	lr
   3360a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3360e:	4770      	bx	lr

00033610 <rpc_gnss_serialize_klob>:
   33610:	4603      	mov	r3, r0
   33612:	b1f0      	cbz	r0, 33652 <rpc_gnss_serialize_klob+0x42>
   33614:	b1e9      	cbz	r1, 33652 <rpc_gnss_serialize_klob+0x42>
   33616:	2000      	movs	r0, #0
   33618:	2204      	movs	r2, #4
   3361a:	7048      	strb	r0, [r1, #1]
   3361c:	700a      	strb	r2, [r1, #0]
   3361e:	f993 2000 	ldrsb.w	r2, [r3]
   33622:	200a      	movs	r0, #10
   33624:	708a      	strb	r2, [r1, #2]
   33626:	f993 2001 	ldrsb.w	r2, [r3, #1]
   3362a:	70ca      	strb	r2, [r1, #3]
   3362c:	f993 2002 	ldrsb.w	r2, [r3, #2]
   33630:	710a      	strb	r2, [r1, #4]
   33632:	f993 2003 	ldrsb.w	r2, [r3, #3]
   33636:	714a      	strb	r2, [r1, #5]
   33638:	f993 2004 	ldrsb.w	r2, [r3, #4]
   3363c:	718a      	strb	r2, [r1, #6]
   3363e:	f993 2005 	ldrsb.w	r2, [r3, #5]
   33642:	71ca      	strb	r2, [r1, #7]
   33644:	f993 2006 	ldrsb.w	r2, [r3, #6]
   33648:	720a      	strb	r2, [r1, #8]
   3364a:	f993 3007 	ldrsb.w	r3, [r3, #7]
   3364e:	724b      	strb	r3, [r1, #9]
   33650:	4770      	bx	lr
   33652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33656:	4770      	bx	lr

00033658 <rpc_gnss_serialize_nequick>:
   33658:	4603      	mov	r3, r0
   3365a:	b198      	cbz	r0, 33684 <rpc_gnss_serialize_nequick+0x2c>
   3365c:	b191      	cbz	r1, 33684 <rpc_gnss_serialize_nequick+0x2c>
   3365e:	2000      	movs	r0, #0
   33660:	2205      	movs	r2, #5
   33662:	7048      	strb	r0, [r1, #1]
   33664:	700a      	strb	r2, [r1, #0]
   33666:	f9b3 2000 	ldrsh.w	r2, [r3]
   3366a:	200a      	movs	r0, #10
   3366c:	804a      	strh	r2, [r1, #2]
   3366e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   33672:	808a      	strh	r2, [r1, #4]
   33674:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   33678:	80ca      	strh	r2, [r1, #6]
   3367a:	799a      	ldrb	r2, [r3, #6]
   3367c:	720a      	strb	r2, [r1, #8]
   3367e:	79db      	ldrb	r3, [r3, #7]
   33680:	724b      	strb	r3, [r1, #9]
   33682:	4770      	bx	lr
   33684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33688:	4770      	bx	lr
   3368a:	bf00      	nop

0003368c <rpc_gnss_serialize_time_and_sv_tow>:
   3368c:	b310      	cbz	r0, 336d4 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   3368e:	b309      	cbz	r1, 336d4 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   33690:	b470      	push	{r4, r5, r6}
   33692:	2500      	movs	r5, #0
   33694:	2606      	movs	r6, #6
   33696:	460c      	mov	r4, r1
   33698:	704d      	strb	r5, [r1, #1]
   3369a:	700e      	strb	r6, [r1, #0]
   3369c:	462b      	mov	r3, r5
   3369e:	8805      	ldrh	r5, [r0, #0]
   336a0:	4602      	mov	r2, r0
   336a2:	804d      	strh	r5, [r1, #2]
   336a4:	68c5      	ldr	r5, [r0, #12]
   336a6:	f8c1 500a 	str.w	r5, [r1, #10]
   336aa:	8905      	ldrh	r5, [r0, #8]
   336ac:	810d      	strh	r5, [r1, #8]
   336ae:	6840      	ldr	r0, [r0, #4]
   336b0:	6048      	str	r0, [r1, #4]
   336b2:	8a15      	ldrh	r5, [r2, #16]
   336b4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   336b8:	4408      	add	r0, r1
   336ba:	81c5      	strh	r5, [r0, #14]
   336bc:	7c90      	ldrb	r0, [r2, #18]
   336be:	3301      	adds	r3, #1
   336c0:	2b20      	cmp	r3, #32
   336c2:	7420      	strb	r0, [r4, #16]
   336c4:	f102 0204 	add.w	r2, r2, #4
   336c8:	f104 0403 	add.w	r4, r4, #3
   336cc:	d1f1      	bne.n	336b2 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   336ce:	206e      	movs	r0, #110	; 0x6e
   336d0:	bc70      	pop	{r4, r5, r6}
   336d2:	4770      	bx	lr
   336d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   336d8:	4770      	bx	lr
   336da:	bf00      	nop

000336dc <rpc_gnss_serialize_location>:
   336dc:	4603      	mov	r3, r0
   336de:	b1c8      	cbz	r0, 33714 <rpc_gnss_serialize_location+0x38>
   336e0:	b1c1      	cbz	r1, 33714 <rpc_gnss_serialize_location+0x38>
   336e2:	2000      	movs	r0, #0
   336e4:	2207      	movs	r2, #7
   336e6:	7048      	strb	r0, [r1, #1]
   336e8:	700a      	strb	r2, [r1, #0]
   336ea:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   336ee:	2011      	movs	r0, #17
   336f0:	814a      	strh	r2, [r1, #10]
   336f2:	7b9a      	ldrb	r2, [r3, #14]
   336f4:	740a      	strb	r2, [r1, #16]
   336f6:	681a      	ldr	r2, [r3, #0]
   336f8:	f8c1 2002 	str.w	r2, [r1, #2]
   336fc:	685a      	ldr	r2, [r3, #4]
   336fe:	f8c1 2006 	str.w	r2, [r1, #6]
   33702:	7b1a      	ldrb	r2, [r3, #12]
   33704:	738a      	strb	r2, [r1, #14]
   33706:	7b5a      	ldrb	r2, [r3, #13]
   33708:	73ca      	strb	r2, [r1, #15]
   3370a:	7a9a      	ldrb	r2, [r3, #10]
   3370c:	730a      	strb	r2, [r1, #12]
   3370e:	7adb      	ldrb	r3, [r3, #11]
   33710:	734b      	strb	r3, [r1, #13]
   33712:	4770      	bx	lr
   33714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33718:	4770      	bx	lr
   3371a:	bf00      	nop

0003371c <rpc_gnss_serialize_integrity>:
   3371c:	b148      	cbz	r0, 33732 <rpc_gnss_serialize_integrity+0x16>
   3371e:	b141      	cbz	r1, 33732 <rpc_gnss_serialize_integrity+0x16>
   33720:	2200      	movs	r2, #0
   33722:	2308      	movs	r3, #8
   33724:	704a      	strb	r2, [r1, #1]
   33726:	700b      	strb	r3, [r1, #0]
   33728:	6803      	ldr	r3, [r0, #0]
   3372a:	2006      	movs	r0, #6
   3372c:	f8c1 3002 	str.w	r3, [r1, #2]
   33730:	4770      	bx	lr
   33732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33736:	4770      	bx	lr

00033738 <gnss_client_event_handler>:
   33738:	f850 1b08 	ldr.w	r1, [r0], #8
   3373c:	0c09      	lsrs	r1, r1, #16
   3373e:	f7fd b8b9 	b.w	308b4 <rpc_gnss_event_handler>
   33742:	bf00      	nop

00033744 <rpc_gnss_client_init>:
   33744:	4801      	ldr	r0, [pc, #4]	; (3374c <rpc_gnss_client_init+0x8>)
   33746:	f7fc bfe9 	b.w	3071c <rpc_client_register>
   3374a:	bf00      	nop
   3374c:	0003cda0 	.word	0x0003cda0

00033750 <rpc_gnss_client_request_alloc>:
   33750:	2300      	movs	r3, #0
   33752:	b510      	push	{r4, lr}
   33754:	b082      	sub	sp, #8
   33756:	9301      	str	r3, [sp, #4]
   33758:	b158      	cbz	r0, 33772 <rpc_gnss_client_request_alloc+0x22>
   3375a:	4604      	mov	r4, r0
   3375c:	aa01      	add	r2, sp, #4
   3375e:	2007      	movs	r0, #7
   33760:	f7fd f856 	bl	30810 <rpc_message_alloc>
   33764:	b918      	cbnz	r0, 3376e <rpc_gnss_client_request_alloc+0x1e>
   33766:	9b01      	ldr	r3, [sp, #4]
   33768:	b10b      	cbz	r3, 3376e <rpc_gnss_client_request_alloc+0x1e>
   3376a:	3308      	adds	r3, #8
   3376c:	6023      	str	r3, [r4, #0]
   3376e:	b002      	add	sp, #8
   33770:	bd10      	pop	{r4, pc}
   33772:	2007      	movs	r0, #7
   33774:	b002      	add	sp, #8
   33776:	bd10      	pop	{r4, pc}

00033778 <rpc_gnss_client_request_send>:
   33778:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   3377c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   33780:	d10b      	bne.n	3379a <rpc_gnss_client_request_send+0x22>
   33782:	b160      	cbz	r0, 3379e <rpc_gnss_client_request_send+0x26>
   33784:	4603      	mov	r3, r0
   33786:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3378a:	2007      	movs	r0, #7
   3378c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   33790:	f843 1d08 	str.w	r1, [r3, #-8]!
   33794:	4619      	mov	r1, r3
   33796:	f7fd b82b 	b.w	307f0 <rpc_message_send>
   3379a:	200f      	movs	r0, #15
   3379c:	4770      	bx	lr
   3379e:	2007      	movs	r0, #7
   337a0:	4770      	bx	lr
   337a2:	bf00      	nop

000337a4 <rpc_gnss_client_message_free>:
   337a4:	b120      	cbz	r0, 337b0 <rpc_gnss_client_message_free+0xc>
   337a6:	f1a0 0108 	sub.w	r1, r0, #8
   337aa:	2007      	movs	r0, #7
   337ac:	f7fd b85c 	b.w	30868 <rpc_message_free>
   337b0:	2007      	movs	r0, #7
   337b2:	4770      	bx	lr

000337b4 <rpc_gnss_client_data_free>:
   337b4:	b118      	cbz	r0, 337be <rpc_gnss_client_data_free+0xa>
   337b6:	4601      	mov	r1, r0
   337b8:	2007      	movs	r0, #7
   337ba:	f7fd b861 	b.w	30880 <rpc_message_data_free>
   337be:	2007      	movs	r0, #7
   337c0:	4770      	bx	lr
   337c2:	bf00      	nop

000337c4 <datagram_handler_init>:
   337c4:	b510      	push	{r4, lr}
   337c6:	4604      	mov	r4, r0
   337c8:	200c      	movs	r0, #12
   337ca:	f000 fdd7 	bl	3437c <nrf_malloc>
   337ce:	60e0      	str	r0, [r4, #12]
   337d0:	b118      	cbz	r0, 337da <datagram_handler_init+0x16>
   337d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   337d6:	f7ff bd2b 	b.w	33230 <linked_list_init>
   337da:	2004      	movs	r0, #4
   337dc:	bd10      	pop	{r4, pc}
   337de:	bf00      	nop

000337e0 <datagram_handler_put>:
   337e0:	b570      	push	{r4, r5, r6, lr}
   337e2:	4606      	mov	r6, r0
   337e4:	2014      	movs	r0, #20
   337e6:	460d      	mov	r5, r1
   337e8:	f000 fdc8 	bl	3437c <nrf_malloc>
   337ec:	b178      	cbz	r0, 3380e <datagram_handler_put+0x2e>
   337ee:	682b      	ldr	r3, [r5, #0]
   337f0:	4604      	mov	r4, r0
   337f2:	6043      	str	r3, [r0, #4]
   337f4:	686b      	ldr	r3, [r5, #4]
   337f6:	4601      	mov	r1, r0
   337f8:	6083      	str	r3, [r0, #8]
   337fa:	68eb      	ldr	r3, [r5, #12]
   337fc:	60c3      	str	r3, [r0, #12]
   337fe:	68ab      	ldr	r3, [r5, #8]
   33800:	6103      	str	r3, [r0, #16]
   33802:	68f0      	ldr	r0, [r6, #12]
   33804:	f7ff fd1e 	bl	33244 <linked_list_push>
   33808:	b920      	cbnz	r0, 33814 <datagram_handler_put+0x34>
   3380a:	6868      	ldr	r0, [r5, #4]
   3380c:	bd70      	pop	{r4, r5, r6, pc}
   3380e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33812:	bd70      	pop	{r4, r5, r6, pc}
   33814:	4620      	mov	r0, r4
   33816:	f000 fdbb 	bl	34390 <nrf_free>
   3381a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3381e:	bd70      	pop	{r4, r5, r6, pc}

00033820 <datagram_handler_get>:
   33820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33824:	4607      	mov	r7, r0
   33826:	b084      	sub	sp, #16
   33828:	68c0      	ldr	r0, [r0, #12]
   3382a:	460c      	mov	r4, r1
   3382c:	4616      	mov	r6, r2
   3382e:	f7ff fd29 	bl	33284 <linked_list_peek>
   33832:	2800      	cmp	r0, #0
   33834:	d03b      	beq.n	338ae <datagram_handler_get+0x8e>
   33836:	6882      	ldr	r2, [r0, #8]
   33838:	4605      	mov	r5, r0
   3383a:	e9d4 0300 	ldrd	r0, r3, [r4]
   3383e:	429a      	cmp	r2, r3
   33840:	bf28      	it	cs
   33842:	461a      	movcs	r2, r3
   33844:	6062      	str	r2, [r4, #4]
   33846:	b110      	cbz	r0, 3384e <datagram_handler_get+0x2e>
   33848:	6869      	ldr	r1, [r5, #4]
   3384a:	f007 fdb2 	bl	3b3b2 <memcpy>
   3384e:	68a0      	ldr	r0, [r4, #8]
   33850:	b118      	cbz	r0, 3385a <datagram_handler_get+0x3a>
   33852:	692b      	ldr	r3, [r5, #16]
   33854:	b10b      	cbz	r3, 3385a <datagram_handler_get+0x3a>
   33856:	68ea      	ldr	r2, [r5, #12]
   33858:	bb02      	cbnz	r2, 3389c <datagram_handler_get+0x7c>
   3385a:	2300      	movs	r3, #0
   3385c:	60e3      	str	r3, [r4, #12]
   3385e:	0732      	lsls	r2, r6, #28
   33860:	d506      	bpl.n	33870 <datagram_handler_get+0x50>
   33862:	06b3      	lsls	r3, r6, #26
   33864:	bf4c      	ite	mi
   33866:	68a8      	ldrmi	r0, [r5, #8]
   33868:	6860      	ldrpl	r0, [r4, #4]
   3386a:	b004      	add	sp, #16
   3386c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33870:	68f8      	ldr	r0, [r7, #12]
   33872:	f7ff fcfd 	bl	33270 <linked_list_pop>
   33876:	4680      	mov	r8, r0
   33878:	2800      	cmp	r0, #0
   3387a:	d0f2      	beq.n	33862 <datagram_handler_get+0x42>
   3387c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   33880:	6902      	ldr	r2, [r0, #16]
   33882:	9300      	str	r3, [sp, #0]
   33884:	68c3      	ldr	r3, [r0, #12]
   33886:	e9cd 1201 	strd	r1, r2, [sp, #4]
   3388a:	9303      	str	r3, [sp, #12]
   3388c:	4668      	mov	r0, sp
   3388e:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   33892:	4798      	blx	r3
   33894:	4640      	mov	r0, r8
   33896:	f000 fd7b 	bl	34390 <nrf_free>
   3389a:	e7e2      	b.n	33862 <datagram_handler_get+0x42>
   3389c:	68e3      	ldr	r3, [r4, #12]
   3389e:	429a      	cmp	r2, r3
   338a0:	bf28      	it	cs
   338a2:	461a      	movcs	r2, r3
   338a4:	60e2      	str	r2, [r4, #12]
   338a6:	6929      	ldr	r1, [r5, #16]
   338a8:	f007 fd83 	bl	3b3b2 <memcpy>
   338ac:	e7d7      	b.n	3385e <datagram_handler_get+0x3e>
   338ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   338b2:	e7da      	b.n	3386a <datagram_handler_get+0x4a>

000338b4 <datagram_handler_available>:
   338b4:	b508      	push	{r3, lr}
   338b6:	68c0      	ldr	r0, [r0, #12]
   338b8:	f7ff fce4 	bl	33284 <linked_list_peek>
   338bc:	b108      	cbz	r0, 338c2 <datagram_handler_available+0xe>
   338be:	6880      	ldr	r0, [r0, #8]
   338c0:	bd08      	pop	{r3, pc}
   338c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   338c6:	bd08      	pop	{r3, pc}

000338c8 <datagram_handler_flush>:
   338c8:	b530      	push	{r4, r5, lr}
   338ca:	4605      	mov	r5, r0
   338cc:	68c0      	ldr	r0, [r0, #12]
   338ce:	b085      	sub	sp, #20
   338d0:	b9a8      	cbnz	r0, 338fe <datagram_handler_flush+0x36>
   338d2:	e01a      	b.n	3390a <datagram_handler_flush+0x42>
   338d4:	68e8      	ldr	r0, [r5, #12]
   338d6:	f7ff fccb 	bl	33270 <linked_list_pop>
   338da:	4604      	mov	r4, r0
   338dc:	b170      	cbz	r0, 338fc <datagram_handler_flush+0x34>
   338de:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   338e2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   338e6:	e9cd 0100 	strd	r0, r1, [sp]
   338ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
   338ee:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   338f2:	4668      	mov	r0, sp
   338f4:	4798      	blx	r3
   338f6:	4620      	mov	r0, r4
   338f8:	f000 fd4a 	bl	34390 <nrf_free>
   338fc:	68e8      	ldr	r0, [r5, #12]
   338fe:	f7ff fcc7 	bl	33290 <linked_list_size_get>
   33902:	2800      	cmp	r0, #0
   33904:	d1e6      	bne.n	338d4 <datagram_handler_flush+0xc>
   33906:	b005      	add	sp, #20
   33908:	bd30      	pop	{r4, r5, pc}
   3390a:	2008      	movs	r0, #8
   3390c:	b005      	add	sp, #20
   3390e:	bd30      	pop	{r4, r5, pc}

00033910 <datagram_handler_free>:
   33910:	b530      	push	{r4, r5, lr}
   33912:	4605      	mov	r5, r0
   33914:	68c0      	ldr	r0, [r0, #12]
   33916:	b085      	sub	sp, #20
   33918:	b9a0      	cbnz	r0, 33944 <datagram_handler_free+0x34>
   3391a:	e01c      	b.n	33956 <datagram_handler_free+0x46>
   3391c:	f7ff fca8 	bl	33270 <linked_list_pop>
   33920:	4604      	mov	r4, r0
   33922:	b170      	cbz	r0, 33942 <datagram_handler_free+0x32>
   33924:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   33928:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3392c:	e9cd 0100 	strd	r0, r1, [sp]
   33930:	e9cd 2302 	strd	r2, r3, [sp, #8]
   33934:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   33938:	4668      	mov	r0, sp
   3393a:	4798      	blx	r3
   3393c:	4620      	mov	r0, r4
   3393e:	f000 fd27 	bl	34390 <nrf_free>
   33942:	68e8      	ldr	r0, [r5, #12]
   33944:	f7ff fca4 	bl	33290 <linked_list_size_get>
   33948:	4604      	mov	r4, r0
   3394a:	68e8      	ldr	r0, [r5, #12]
   3394c:	2c00      	cmp	r4, #0
   3394e:	d1e5      	bne.n	3391c <datagram_handler_free+0xc>
   33950:	f000 fd1e 	bl	34390 <nrf_free>
   33954:	60ec      	str	r4, [r5, #12]
   33956:	b005      	add	sp, #20
   33958:	bd30      	pop	{r4, r5, pc}
   3395a:	bf00      	nop

0003395c <null_handler_init>:
   3395c:	2000      	movs	r0, #0
   3395e:	4770      	bx	lr

00033960 <null_handler_put>:
   33960:	b510      	push	{r4, lr}
   33962:	460c      	mov	r4, r1
   33964:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   33968:	4620      	mov	r0, r4
   3396a:	4798      	blx	r3
   3396c:	6860      	ldr	r0, [r4, #4]
   3396e:	bd10      	pop	{r4, pc}

00033970 <null_handler_get>:
   33970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33974:	4770      	bx	lr
   33976:	bf00      	nop

00033978 <null_handler_available>:
   33978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3397c:	4770      	bx	lr
   3397e:	bf00      	nop

00033980 <null_handler_flush>:
   33980:	2000      	movs	r0, #0
   33982:	4770      	bx	lr

00033984 <null_handler_free>:
   33984:	4770      	bx	lr
   33986:	bf00      	nop

00033988 <packet_handler_create>:
   33988:	2801      	cmp	r0, #1
   3398a:	b538      	push	{r3, r4, r5, lr}
   3398c:	460d      	mov	r5, r1
   3398e:	4614      	mov	r4, r2
   33990:	d00d      	beq.n	339ae <packet_handler_create+0x26>
   33992:	db11      	blt.n	339b8 <packet_handler_create+0x30>
   33994:	2803      	cmp	r0, #3
   33996:	dc0f      	bgt.n	339b8 <packet_handler_create+0x30>
   33998:	2010      	movs	r0, #16
   3399a:	f000 fcef 	bl	3437c <nrf_malloc>
   3399e:	2218      	movs	r2, #24
   339a0:	b120      	cbz	r0, 339ac <packet_handler_create+0x24>
   339a2:	4b08      	ldr	r3, [pc, #32]	; (339c4 <packet_handler_create+0x3c>)
   339a4:	6045      	str	r5, [r0, #4]
   339a6:	4413      	add	r3, r2
   339a8:	6084      	str	r4, [r0, #8]
   339aa:	6003      	str	r3, [r0, #0]
   339ac:	bd38      	pop	{r3, r4, r5, pc}
   339ae:	2014      	movs	r0, #20
   339b0:	f000 fce4 	bl	3437c <nrf_malloc>
   339b4:	2230      	movs	r2, #48	; 0x30
   339b6:	e7f3      	b.n	339a0 <packet_handler_create+0x18>
   339b8:	200c      	movs	r0, #12
   339ba:	f000 fcdf 	bl	3437c <nrf_malloc>
   339be:	2200      	movs	r2, #0
   339c0:	e7ee      	b.n	339a0 <packet_handler_create+0x18>
   339c2:	bf00      	nop
   339c4:	0003cdb0 	.word	0x0003cdb0

000339c8 <packet_handler_delete>:
   339c8:	b510      	push	{r4, lr}
   339ca:	4604      	mov	r4, r0
   339cc:	6803      	ldr	r3, [r0, #0]
   339ce:	691b      	ldr	r3, [r3, #16]
   339d0:	4798      	blx	r3
   339d2:	6823      	ldr	r3, [r4, #0]
   339d4:	4620      	mov	r0, r4
   339d6:	695b      	ldr	r3, [r3, #20]
   339d8:	4798      	blx	r3
   339da:	4620      	mov	r0, r4
   339dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   339e0:	f000 bcd6 	b.w	34390 <nrf_free>

000339e4 <stream_handler_init>:
   339e4:	b510      	push	{r4, lr}
   339e6:	4604      	mov	r4, r0
   339e8:	200c      	movs	r0, #12
   339ea:	f000 fcc7 	bl	3437c <nrf_malloc>
   339ee:	60e0      	str	r0, [r4, #12]
   339f0:	b128      	cbz	r0, 339fe <stream_handler_init+0x1a>
   339f2:	2300      	movs	r3, #0
   339f4:	6123      	str	r3, [r4, #16]
   339f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   339fa:	f7ff bc19 	b.w	33230 <linked_list_init>
   339fe:	2004      	movs	r0, #4
   33a00:	bd10      	pop	{r4, pc}
   33a02:	bf00      	nop

00033a04 <stream_handler_put>:
   33a04:	b570      	push	{r4, r5, r6, lr}
   33a06:	4606      	mov	r6, r0
   33a08:	2014      	movs	r0, #20
   33a0a:	460d      	mov	r5, r1
   33a0c:	f000 fcb6 	bl	3437c <nrf_malloc>
   33a10:	b178      	cbz	r0, 33a32 <stream_handler_put+0x2e>
   33a12:	682b      	ldr	r3, [r5, #0]
   33a14:	4604      	mov	r4, r0
   33a16:	6043      	str	r3, [r0, #4]
   33a18:	686b      	ldr	r3, [r5, #4]
   33a1a:	4601      	mov	r1, r0
   33a1c:	6083      	str	r3, [r0, #8]
   33a1e:	68eb      	ldr	r3, [r5, #12]
   33a20:	60c3      	str	r3, [r0, #12]
   33a22:	68ab      	ldr	r3, [r5, #8]
   33a24:	6103      	str	r3, [r0, #16]
   33a26:	68f0      	ldr	r0, [r6, #12]
   33a28:	f7ff fc0c 	bl	33244 <linked_list_push>
   33a2c:	b920      	cbnz	r0, 33a38 <stream_handler_put+0x34>
   33a2e:	6868      	ldr	r0, [r5, #4]
   33a30:	bd70      	pop	{r4, r5, r6, pc}
   33a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33a36:	bd70      	pop	{r4, r5, r6, pc}
   33a38:	4620      	mov	r0, r4
   33a3a:	f000 fca9 	bl	34390 <nrf_free>
   33a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33a42:	bd70      	pop	{r4, r5, r6, pc}

00033a44 <stream_handler_get>:
   33a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33a48:	4682      	mov	sl, r0
   33a4a:	b089      	sub	sp, #36	; 0x24
   33a4c:	68c0      	ldr	r0, [r0, #12]
   33a4e:	4689      	mov	r9, r1
   33a50:	4693      	mov	fp, r2
   33a52:	f7ff fc17 	bl	33284 <linked_list_peek>
   33a56:	2800      	cmp	r0, #0
   33a58:	d071      	beq.n	33b3e <stream_handler_get+0xfa>
   33a5a:	4605      	mov	r5, r0
   33a5c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   33a60:	b120      	cbz	r0, 33a6c <stream_handler_get+0x28>
   33a62:	692b      	ldr	r3, [r5, #16]
   33a64:	b113      	cbz	r3, 33a6c <stream_handler_get+0x28>
   33a66:	68ea      	ldr	r2, [r5, #12]
   33a68:	2a00      	cmp	r2, #0
   33a6a:	d15d      	bne.n	33b28 <stream_handler_get+0xe4>
   33a6c:	2300      	movs	r3, #0
   33a6e:	f8c9 300c 	str.w	r3, [r9, #12]
   33a72:	f8d9 2000 	ldr.w	r2, [r9]
   33a76:	f8d9 8004 	ldr.w	r8, [r9, #4]
   33a7a:	f8da 1010 	ldr.w	r1, [sl, #16]
   33a7e:	9203      	str	r2, [sp, #12]
   33a80:	f1b8 0f00 	cmp.w	r8, #0
   33a84:	d030      	beq.n	33ae8 <stream_handler_get+0xa4>
   33a86:	2400      	movs	r4, #0
   33a88:	f00b 0320 	and.w	r3, fp, #32
   33a8c:	9301      	str	r3, [sp, #4]
   33a8e:	f00b 0b08 	and.w	fp, fp, #8
   33a92:	68ae      	ldr	r6, [r5, #8]
   33a94:	eba8 0304 	sub.w	r3, r8, r4
   33a98:	1a76      	subs	r6, r6, r1
   33a9a:	429e      	cmp	r6, r3
   33a9c:	4637      	mov	r7, r6
   33a9e:	bf28      	it	cs
   33aa0:	461f      	movcs	r7, r3
   33aa2:	b10a      	cbz	r2, 33aa8 <stream_handler_get+0x64>
   33aa4:	9a01      	ldr	r2, [sp, #4]
   33aa6:	b1aa      	cbz	r2, 33ad4 <stream_handler_get+0x90>
   33aa8:	f1bb 0f00 	cmp.w	fp, #0
   33aac:	d106      	bne.n	33abc <stream_handler_get+0x78>
   33aae:	429e      	cmp	r6, r3
   33ab0:	d921      	bls.n	33af6 <stream_handler_get+0xb2>
   33ab2:	f8da 3010 	ldr.w	r3, [sl, #16]
   33ab6:	443b      	add	r3, r7
   33ab8:	f8ca 3010 	str.w	r3, [sl, #16]
   33abc:	4628      	mov	r0, r5
   33abe:	f7ff fbe9 	bl	33294 <linked_list_get_next>
   33ac2:	443c      	add	r4, r7
   33ac4:	4605      	mov	r5, r0
   33ac6:	b180      	cbz	r0, 33aea <stream_handler_get+0xa6>
   33ac8:	45a0      	cmp	r8, r4
   33aca:	d90e      	bls.n	33aea <stream_handler_get+0xa6>
   33acc:	f8d9 2000 	ldr.w	r2, [r9]
   33ad0:	2100      	movs	r1, #0
   33ad2:	e7de      	b.n	33a92 <stream_handler_get+0x4e>
   33ad4:	6868      	ldr	r0, [r5, #4]
   33ad6:	9302      	str	r3, [sp, #8]
   33ad8:	9b03      	ldr	r3, [sp, #12]
   33ada:	4401      	add	r1, r0
   33adc:	463a      	mov	r2, r7
   33ade:	1918      	adds	r0, r3, r4
   33ae0:	f007 fc67 	bl	3b3b2 <memcpy>
   33ae4:	9b02      	ldr	r3, [sp, #8]
   33ae6:	e7df      	b.n	33aa8 <stream_handler_get+0x64>
   33ae8:	4644      	mov	r4, r8
   33aea:	4620      	mov	r0, r4
   33aec:	f8c9 4004 	str.w	r4, [r9, #4]
   33af0:	b009      	add	sp, #36	; 0x24
   33af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33af6:	f8da 000c 	ldr.w	r0, [sl, #12]
   33afa:	f7ff fbb9 	bl	33270 <linked_list_pop>
   33afe:	4606      	mov	r6, r0
   33b00:	b170      	cbz	r0, 33b20 <stream_handler_get+0xdc>
   33b02:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   33b06:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   33b0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   33b0e:	e9cd 1006 	strd	r1, r0, [sp, #24]
   33b12:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   33b16:	a804      	add	r0, sp, #16
   33b18:	4798      	blx	r3
   33b1a:	4630      	mov	r0, r6
   33b1c:	f000 fc38 	bl	34390 <nrf_free>
   33b20:	2300      	movs	r3, #0
   33b22:	f8ca 3010 	str.w	r3, [sl, #16]
   33b26:	e7c9      	b.n	33abc <stream_handler_get+0x78>
   33b28:	f8d9 300c 	ldr.w	r3, [r9, #12]
   33b2c:	429a      	cmp	r2, r3
   33b2e:	bf28      	it	cs
   33b30:	461a      	movcs	r2, r3
   33b32:	f8c9 200c 	str.w	r2, [r9, #12]
   33b36:	6929      	ldr	r1, [r5, #16]
   33b38:	f007 fc3b 	bl	3b3b2 <memcpy>
   33b3c:	e799      	b.n	33a72 <stream_handler_get+0x2e>
   33b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33b42:	e7d5      	b.n	33af0 <stream_handler_get+0xac>

00033b44 <stream_handler_available>:
   33b44:	b510      	push	{r4, lr}
   33b46:	4604      	mov	r4, r0
   33b48:	68c0      	ldr	r0, [r0, #12]
   33b4a:	f7ff fb9b 	bl	33284 <linked_list_peek>
   33b4e:	b150      	cbz	r0, 33b66 <stream_handler_available+0x22>
   33b50:	6924      	ldr	r4, [r4, #16]
   33b52:	4264      	negs	r4, r4
   33b54:	6883      	ldr	r3, [r0, #8]
   33b56:	441c      	add	r4, r3
   33b58:	f7ff fb9c 	bl	33294 <linked_list_get_next>
   33b5c:	2800      	cmp	r0, #0
   33b5e:	d1f9      	bne.n	33b54 <stream_handler_available+0x10>
   33b60:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   33b64:	bd10      	pop	{r4, pc}
   33b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33b6a:	bd10      	pop	{r4, pc}

00033b6c <stream_handler_flush>:
   33b6c:	b530      	push	{r4, r5, lr}
   33b6e:	4605      	mov	r5, r0
   33b70:	68c0      	ldr	r0, [r0, #12]
   33b72:	b085      	sub	sp, #20
   33b74:	b9a8      	cbnz	r0, 33ba2 <stream_handler_flush+0x36>
   33b76:	e01a      	b.n	33bae <stream_handler_flush+0x42>
   33b78:	68e8      	ldr	r0, [r5, #12]
   33b7a:	f7ff fb79 	bl	33270 <linked_list_pop>
   33b7e:	4604      	mov	r4, r0
   33b80:	b170      	cbz	r0, 33ba0 <stream_handler_flush+0x34>
   33b82:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   33b86:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   33b8a:	e9cd 0100 	strd	r0, r1, [sp]
   33b8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   33b92:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   33b96:	4668      	mov	r0, sp
   33b98:	4798      	blx	r3
   33b9a:	4620      	mov	r0, r4
   33b9c:	f000 fbf8 	bl	34390 <nrf_free>
   33ba0:	68e8      	ldr	r0, [r5, #12]
   33ba2:	f7ff fb75 	bl	33290 <linked_list_size_get>
   33ba6:	2800      	cmp	r0, #0
   33ba8:	d1e6      	bne.n	33b78 <stream_handler_flush+0xc>
   33baa:	b005      	add	sp, #20
   33bac:	bd30      	pop	{r4, r5, pc}
   33bae:	2008      	movs	r0, #8
   33bb0:	b005      	add	sp, #20
   33bb2:	bd30      	pop	{r4, r5, pc}

00033bb4 <stream_handler_free>:
   33bb4:	b530      	push	{r4, r5, lr}
   33bb6:	4605      	mov	r5, r0
   33bb8:	68c0      	ldr	r0, [r0, #12]
   33bba:	b085      	sub	sp, #20
   33bbc:	b9a0      	cbnz	r0, 33be8 <stream_handler_free+0x34>
   33bbe:	e01c      	b.n	33bfa <stream_handler_free+0x46>
   33bc0:	f7ff fb56 	bl	33270 <linked_list_pop>
   33bc4:	4604      	mov	r4, r0
   33bc6:	b170      	cbz	r0, 33be6 <stream_handler_free+0x32>
   33bc8:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   33bcc:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   33bd0:	e9cd 0100 	strd	r0, r1, [sp]
   33bd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   33bd8:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   33bdc:	4668      	mov	r0, sp
   33bde:	4798      	blx	r3
   33be0:	4620      	mov	r0, r4
   33be2:	f000 fbd5 	bl	34390 <nrf_free>
   33be6:	68e8      	ldr	r0, [r5, #12]
   33be8:	f7ff fb52 	bl	33290 <linked_list_size_get>
   33bec:	4604      	mov	r4, r0
   33bee:	68e8      	ldr	r0, [r5, #12]
   33bf0:	2c00      	cmp	r4, #0
   33bf2:	d1e5      	bne.n	33bc0 <stream_handler_free+0xc>
   33bf4:	f000 fbcc 	bl	34390 <nrf_free>
   33bf8:	60ec      	str	r4, [r5, #12]
   33bfa:	b005      	add	sp, #20
   33bfc:	bd30      	pop	{r4, r5, pc}
   33bfe:	bf00      	nop

00033c00 <mem_free>:
   33c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33c04:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 33cd4 <mem_free+0xd4>
   33c08:	b083      	sub	sp, #12
   33c0a:	9000      	str	r0, [sp, #0]
   33c0c:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   33c10:	f8dc 3008 	ldr.w	r3, [ip, #8]
   33c14:	b12b      	cbz	r3, 33c22 <mem_free+0x22>
   33c16:	f8dc 2000 	ldr.w	r2, [ip]
   33c1a:	9c00      	ldr	r4, [sp, #0]
   33c1c:	7810      	ldrb	r0, [r2, #0]
   33c1e:	42a0      	cmp	r0, r4
   33c20:	d006      	beq.n	33c30 <mem_free+0x30>
   33c22:	f10c 0c0c 	add.w	ip, ip, #12
   33c26:	45e3      	cmp	fp, ip
   33c28:	d1f2      	bne.n	33c10 <mem_free+0x10>
   33c2a:	b003      	add	sp, #12
   33c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c30:	f8dc a004 	ldr.w	sl, [ip, #4]
   33c34:	eb03 080a 	add.w	r8, r3, sl
   33c38:	45c2      	cmp	sl, r8
   33c3a:	d2f2      	bcs.n	33c22 <mem_free+0x22>
   33c3c:	6853      	ldr	r3, [r2, #4]
   33c3e:	f8cd c004 	str.w	ip, [sp, #4]
   33c42:	46d6      	mov	lr, sl
   33c44:	469c      	mov	ip, r3
   33c46:	f8d2 9010 	ldr.w	r9, [r2, #16]
   33c4a:	8997      	ldrh	r7, [r2, #12]
   33c4c:	ebae 000a 	sub.w	r0, lr, sl
   33c50:	b3df      	cbz	r7, 33cca <mem_free+0xca>
   33c52:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   33c56:	4290      	cmp	r0, r2
   33c58:	d31c      	bcc.n	33c94 <mem_free+0x94>
   33c5a:	4665      	mov	r5, ip
   33c5c:	2400      	movs	r4, #0
   33c5e:	f109 0304 	add.w	r3, r9, #4
   33c62:	e003      	b.n	33c6c <mem_free+0x6c>
   33c64:	885a      	ldrh	r2, [r3, #2]
   33c66:	3304      	adds	r3, #4
   33c68:	4282      	cmp	r2, r0
   33c6a:	d815      	bhi.n	33c98 <mem_free+0x98>
   33c6c:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   33c70:	3401      	adds	r4, #1
   33c72:	42a7      	cmp	r7, r4
   33c74:	fb02 5506 	mla	r5, r2, r6, r5
   33c78:	eba0 0002 	sub.w	r0, r0, r2
   33c7c:	461e      	mov	r6, r3
   33c7e:	d1f1      	bne.n	33c64 <mem_free+0x64>
   33c80:	2000      	movs	r0, #0
   33c82:	4281      	cmp	r1, r0
   33c84:	d00d      	beq.n	33ca2 <mem_free+0xa2>
   33c86:	f10e 0e01 	add.w	lr, lr, #1
   33c8a:	45f0      	cmp	r8, lr
   33c8c:	d1de      	bne.n	33c4c <mem_free+0x4c>
   33c8e:	f8dd c004 	ldr.w	ip, [sp, #4]
   33c92:	e7c6      	b.n	33c22 <mem_free+0x22>
   33c94:	4665      	mov	r5, ip
   33c96:	464e      	mov	r6, r9
   33c98:	8833      	ldrh	r3, [r6, #0]
   33c9a:	fb00 5003 	mla	r0, r0, r3, r5
   33c9e:	4281      	cmp	r1, r0
   33ca0:	d1f1      	bne.n	33c86 <mem_free+0x86>
   33ca2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   33ca6:	f8dd c004 	ldr.w	ip, [sp, #4]
   33caa:	d0ba      	beq.n	33c22 <mem_free+0x22>
   33cac:	2301      	movs	r3, #1
   33cae:	4a08      	ldr	r2, [pc, #32]	; (33cd0 <mem_free+0xd0>)
   33cb0:	ea4f 115e 	mov.w	r1, lr, lsr #5
   33cb4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   33cb8:	f00e 0e1f 	and.w	lr, lr, #31
   33cbc:	fa03 fe0e 	lsl.w	lr, r3, lr
   33cc0:	ea4e 0000 	orr.w	r0, lr, r0
   33cc4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   33cc8:	e7af      	b.n	33c2a <mem_free+0x2a>
   33cca:	4638      	mov	r0, r7
   33ccc:	e7d9      	b.n	33c82 <mem_free+0x82>
   33cce:	bf00      	nop
   33cd0:	20023ee0 	.word	0x20023ee0
   33cd4:	20023f24 	.word	0x20023f24

00033cd8 <mem_alloc.constprop.5>:
   33cd8:	2800      	cmp	r0, #0
   33cda:	d050      	beq.n	33d7e <mem_alloc.constprop.5+0xa6>
   33cdc:	4b6d      	ldr	r3, [pc, #436]	; (33e94 <mem_alloc.constprop.5+0x1bc>)
   33cde:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   33ce2:	4290      	cmp	r0, r2
   33ce4:	d84b      	bhi.n	33d7e <mem_alloc.constprop.5+0xa6>
   33ce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33cea:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   33cee:	b083      	sub	sp, #12
   33cf0:	f1bb 0f00 	cmp.w	fp, #0
   33cf4:	d054      	beq.n	33da0 <mem_alloc.constprop.5+0xc8>
   33cf6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   33cfa:	4691      	mov	r9, r2
   33cfc:	2600      	movs	r6, #0
   33cfe:	f04f 0812 	mov.w	r8, #18
   33d02:	4f65      	ldr	r7, [pc, #404]	; (33e98 <mem_alloc.constprop.5+0x1c0>)
   33d04:	9201      	str	r2, [sp, #4]
   33d06:	f10b 0e11 	add.w	lr, fp, #17
   33d0a:	eb06 0209 	add.w	r2, r6, r9
   33d0e:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   33d12:	3201      	adds	r2, #1
   33d14:	0852      	lsrs	r2, r2, #1
   33d16:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   33d1a:	f102 0112 	add.w	r1, r2, #18
   33d1e:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   33d22:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   33d26:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   33d2a:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   33d2e:	f8dc c004 	ldr.w	ip, [ip, #4]
   33d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   33d36:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   33d3a:	f8da a010 	ldr.w	sl, [sl, #16]
   33d3e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   33d42:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   33d46:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   33d4a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   33d4e:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   33d52:	6849      	ldr	r1, [r1, #4]
   33d54:	692d      	ldr	r5, [r5, #16]
   33d56:	6924      	ldr	r4, [r4, #16]
   33d58:	f8dc c004 	ldr.w	ip, [ip, #4]
   33d5c:	4550      	cmp	r0, sl
   33d5e:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   33d62:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   33d66:	d915      	bls.n	33d94 <mem_alloc.constprop.5+0xbc>
   33d68:	4288      	cmp	r0, r1
   33d6a:	d211      	bcs.n	33d90 <mem_alloc.constprop.5+0xb8>
   33d6c:	42a8      	cmp	r0, r5
   33d6e:	d908      	bls.n	33d82 <mem_alloc.constprop.5+0xaa>
   33d70:	1c56      	adds	r6, r2, #1
   33d72:	45b1      	cmp	r9, r6
   33d74:	f0c0 8087 	bcc.w	33e86 <mem_alloc.constprop.5+0x1ae>
   33d78:	f102 0813 	add.w	r8, r2, #19
   33d7c:	e7c5      	b.n	33d0a <mem_alloc.constprop.5+0x32>
   33d7e:	2000      	movs	r0, #0
   33d80:	4770      	bx	lr
   33d82:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   33d86:	454e      	cmp	r6, r9
   33d88:	d87d      	bhi.n	33e86 <mem_alloc.constprop.5+0x1ae>
   33d8a:	f102 0e11 	add.w	lr, r2, #17
   33d8e:	e7bc      	b.n	33d0a <mem_alloc.constprop.5+0x32>
   33d90:	f109 0601 	add.w	r6, r9, #1
   33d94:	45b3      	cmp	fp, r6
   33d96:	d007      	beq.n	33da8 <mem_alloc.constprop.5+0xd0>
   33d98:	2e10      	cmp	r6, #16
   33d9a:	d001      	beq.n	33da0 <mem_alloc.constprop.5+0xc8>
   33d9c:	45b3      	cmp	fp, r6
   33d9e:	d808      	bhi.n	33db2 <mem_alloc.constprop.5+0xda>
   33da0:	2000      	movs	r0, #0
   33da2:	b003      	add	sp, #12
   33da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33da8:	9a01      	ldr	r2, [sp, #4]
   33daa:	2a10      	cmp	r2, #16
   33dac:	bf18      	it	ne
   33dae:	4616      	movne	r6, r2
   33db0:	d0f6      	beq.n	33da0 <mem_alloc.constprop.5+0xc8>
   33db2:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 33e9c <mem_alloc.constprop.5+0x1c4>
   33db6:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   33dba:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   33dbe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   33dc2:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   33dc6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   33dca:	f8d2 e004 	ldr.w	lr, [r2, #4]
   33dce:	691d      	ldr	r5, [r3, #16]
   33dd0:	2c00      	cmp	r4, #0
   33dd2:	d056      	beq.n	33e82 <mem_alloc.constprop.5+0x1aa>
   33dd4:	462a      	mov	r2, r5
   33dd6:	4670      	mov	r0, lr
   33dd8:	00a4      	lsls	r4, r4, #2
   33dda:	eb05 0904 	add.w	r9, r5, r4
   33dde:	8851      	ldrh	r1, [r2, #2]
   33de0:	3204      	adds	r2, #4
   33de2:	4591      	cmp	r9, r2
   33de4:	4408      	add	r0, r1
   33de6:	d1fa      	bne.n	33dde <mem_alloc.constprop.5+0x106>
   33de8:	1929      	adds	r1, r5, r4
   33dea:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   33dee:	4482      	add	sl, r0
   33df0:	4582      	cmp	sl, r0
   33df2:	d918      	bls.n	33e26 <mem_alloc.constprop.5+0x14e>
   33df4:	0941      	lsrs	r1, r0, #5
   33df6:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   33dfa:	f000 041f 	and.w	r4, r0, #31
   33dfe:	fa22 f904 	lsr.w	r9, r2, r4
   33e02:	f019 0f01 	tst.w	r9, #1
   33e06:	d007      	beq.n	33e18 <mem_alloc.constprop.5+0x140>
   33e08:	e013      	b.n	33e32 <mem_alloc.constprop.5+0x15a>
   33e0a:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   33e0e:	fa22 f904 	lsr.w	r9, r2, r4
   33e12:	f019 0f01 	tst.w	r9, #1
   33e16:	d10c      	bne.n	33e32 <mem_alloc.constprop.5+0x15a>
   33e18:	3001      	adds	r0, #1
   33e1a:	4582      	cmp	sl, r0
   33e1c:	ea4f 1150 	mov.w	r1, r0, lsr #5
   33e20:	f000 041f 	and.w	r4, r0, #31
   33e24:	d1f1      	bne.n	33e0a <mem_alloc.constprop.5+0x132>
   33e26:	3601      	adds	r6, #1
   33e28:	455e      	cmp	r6, fp
   33e2a:	f108 0808 	add.w	r8, r8, #8
   33e2e:	d3c4      	bcc.n	33dba <mem_alloc.constprop.5+0xe2>
   33e30:	e7b6      	b.n	33da0 <mem_alloc.constprop.5+0xc8>
   33e32:	2601      	movs	r6, #1
   33e34:	fa06 f404 	lsl.w	r4, r6, r4
   33e38:	899e      	ldrh	r6, [r3, #12]
   33e3a:	ea22 0204 	bic.w	r2, r2, r4
   33e3e:	eba0 000e 	sub.w	r0, r0, lr
   33e42:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   33e46:	685c      	ldr	r4, [r3, #4]
   33e48:	2e00      	cmp	r6, #0
   33e4a:	d0a9      	beq.n	33da0 <mem_alloc.constprop.5+0xc8>
   33e4c:	886a      	ldrh	r2, [r5, #2]
   33e4e:	4282      	cmp	r2, r0
   33e50:	d811      	bhi.n	33e76 <mem_alloc.constprop.5+0x19e>
   33e52:	2100      	movs	r1, #0
   33e54:	1d2b      	adds	r3, r5, #4
   33e56:	e003      	b.n	33e60 <mem_alloc.constprop.5+0x188>
   33e58:	885a      	ldrh	r2, [r3, #2]
   33e5a:	3304      	adds	r3, #4
   33e5c:	4282      	cmp	r2, r0
   33e5e:	d80a      	bhi.n	33e76 <mem_alloc.constprop.5+0x19e>
   33e60:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   33e64:	3101      	adds	r1, #1
   33e66:	428e      	cmp	r6, r1
   33e68:	fb02 4405 	mla	r4, r2, r5, r4
   33e6c:	eba0 0002 	sub.w	r0, r0, r2
   33e70:	461d      	mov	r5, r3
   33e72:	d1f1      	bne.n	33e58 <mem_alloc.constprop.5+0x180>
   33e74:	e794      	b.n	33da0 <mem_alloc.constprop.5+0xc8>
   33e76:	882b      	ldrh	r3, [r5, #0]
   33e78:	fb00 4003 	mla	r0, r0, r3, r4
   33e7c:	b003      	add	sp, #12
   33e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33e82:	4670      	mov	r0, lr
   33e84:	e7b0      	b.n	33de8 <mem_alloc.constprop.5+0x110>
   33e86:	f1bb 0f10 	cmp.w	fp, #16
   33e8a:	bf08      	it	eq
   33e8c:	260f      	moveq	r6, #15
   33e8e:	d090      	beq.n	33db2 <mem_alloc.constprop.5+0xda>
   33e90:	e786      	b.n	33da0 <mem_alloc.constprop.5+0xc8>
   33e92:	bf00      	nop
   33e94:	20023f60 	.word	0x20023f60
   33e98:	20023f24 	.word	0x20023f24
   33e9c:	20023ee0 	.word	0x20023ee0

00033ea0 <mem_alloc.constprop.4>:
   33ea0:	2800      	cmp	r0, #0
   33ea2:	d04c      	beq.n	33f3e <mem_alloc.constprop.4+0x9e>
   33ea4:	4b6b      	ldr	r3, [pc, #428]	; (34054 <mem_alloc.constprop.4+0x1b4>)
   33ea6:	681a      	ldr	r2, [r3, #0]
   33ea8:	4290      	cmp	r0, r2
   33eaa:	d848      	bhi.n	33f3e <mem_alloc.constprop.4+0x9e>
   33eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33eb0:	685f      	ldr	r7, [r3, #4]
   33eb2:	b083      	sub	sp, #12
   33eb4:	9700      	str	r7, [sp, #0]
   33eb6:	2f00      	cmp	r7, #0
   33eb8:	d051      	beq.n	33f5e <mem_alloc.constprop.4+0xbe>
   33eba:	1e7a      	subs	r2, r7, #1
   33ebc:	4696      	mov	lr, r2
   33ebe:	2100      	movs	r1, #0
   33ec0:	f04f 0c01 	mov.w	ip, #1
   33ec4:	4c64      	ldr	r4, [pc, #400]	; (34058 <mem_alloc.constprop.4+0x1b8>)
   33ec6:	9201      	str	r2, [sp, #4]
   33ec8:	eb01 020e 	add.w	r2, r1, lr
   33ecc:	3201      	adds	r2, #1
   33ece:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   33ed2:	0852      	lsrs	r2, r2, #1
   33ed4:	f102 0801 	add.w	r8, r2, #1
   33ed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   33edc:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   33ee0:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   33ee4:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   33ee8:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   33eec:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   33ef0:	f8d9 9004 	ldr.w	r9, [r9, #4]
   33ef4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   33ef8:	f8da a010 	ldr.w	sl, [sl, #16]
   33efc:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   33f00:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   33f04:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   33f08:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   33f0c:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   33f10:	6936      	ldr	r6, [r6, #16]
   33f12:	f8db b004 	ldr.w	fp, [fp, #4]
   33f16:	692d      	ldr	r5, [r5, #16]
   33f18:	f8d9 9004 	ldr.w	r9, [r9, #4]
   33f1c:	4550      	cmp	r0, sl
   33f1e:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   33f22:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   33f26:	d913      	bls.n	33f50 <mem_alloc.constprop.4+0xb0>
   33f28:	42a8      	cmp	r0, r5
   33f2a:	d210      	bcs.n	33f4e <mem_alloc.constprop.4+0xae>
   33f2c:	42b0      	cmp	r0, r6
   33f2e:	d908      	bls.n	33f42 <mem_alloc.constprop.4+0xa2>
   33f30:	45c6      	cmp	lr, r8
   33f32:	4641      	mov	r1, r8
   33f34:	f0c0 8087 	bcc.w	34046 <mem_alloc.constprop.4+0x1a6>
   33f38:	f108 0c01 	add.w	ip, r8, #1
   33f3c:	e7c4      	b.n	33ec8 <mem_alloc.constprop.4+0x28>
   33f3e:	2000      	movs	r0, #0
   33f40:	4770      	bx	lr
   33f42:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   33f46:	4571      	cmp	r1, lr
   33f48:	d87d      	bhi.n	34046 <mem_alloc.constprop.4+0x1a6>
   33f4a:	4617      	mov	r7, r2
   33f4c:	e7bc      	b.n	33ec8 <mem_alloc.constprop.4+0x28>
   33f4e:	4639      	mov	r1, r7
   33f50:	9a00      	ldr	r2, [sp, #0]
   33f52:	428a      	cmp	r2, r1
   33f54:	d007      	beq.n	33f66 <mem_alloc.constprop.4+0xc6>
   33f56:	2910      	cmp	r1, #16
   33f58:	d001      	beq.n	33f5e <mem_alloc.constprop.4+0xbe>
   33f5a:	428a      	cmp	r2, r1
   33f5c:	d808      	bhi.n	33f70 <mem_alloc.constprop.4+0xd0>
   33f5e:	2000      	movs	r0, #0
   33f60:	b003      	add	sp, #12
   33f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33f66:	9a01      	ldr	r2, [sp, #4]
   33f68:	2a10      	cmp	r2, #16
   33f6a:	bf18      	it	ne
   33f6c:	4611      	movne	r1, r2
   33f6e:	d0f6      	beq.n	33f5e <mem_alloc.constprop.4+0xbe>
   33f70:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 3405c <mem_alloc.constprop.4+0x1bc>
   33f74:	f8dd 9000 	ldr.w	r9, [sp]
   33f78:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   33f7c:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   33f80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   33f84:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   33f88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   33f8c:	f8d2 e004 	ldr.w	lr, [r2, #4]
   33f90:	691f      	ldr	r7, [r3, #16]
   33f92:	2e00      	cmp	r6, #0
   33f94:	d055      	beq.n	34042 <mem_alloc.constprop.4+0x1a2>
   33f96:	463a      	mov	r2, r7
   33f98:	4670      	mov	r0, lr
   33f9a:	00b6      	lsls	r6, r6, #2
   33f9c:	eb07 0a06 	add.w	sl, r7, r6
   33fa0:	8855      	ldrh	r5, [r2, #2]
   33fa2:	3204      	adds	r2, #4
   33fa4:	4592      	cmp	sl, r2
   33fa6:	4428      	add	r0, r5
   33fa8:	d1fa      	bne.n	33fa0 <mem_alloc.constprop.4+0x100>
   33faa:	19bd      	adds	r5, r7, r6
   33fac:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   33fb0:	4483      	add	fp, r0
   33fb2:	4583      	cmp	fp, r0
   33fb4:	d918      	bls.n	33fe8 <mem_alloc.constprop.4+0x148>
   33fb6:	0945      	lsrs	r5, r0, #5
   33fb8:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   33fbc:	f000 061f 	and.w	r6, r0, #31
   33fc0:	fa22 fa06 	lsr.w	sl, r2, r6
   33fc4:	f01a 0f01 	tst.w	sl, #1
   33fc8:	d007      	beq.n	33fda <mem_alloc.constprop.4+0x13a>
   33fca:	e013      	b.n	33ff4 <mem_alloc.constprop.4+0x154>
   33fcc:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   33fd0:	fa22 fa06 	lsr.w	sl, r2, r6
   33fd4:	f01a 0f01 	tst.w	sl, #1
   33fd8:	d10c      	bne.n	33ff4 <mem_alloc.constprop.4+0x154>
   33fda:	3001      	adds	r0, #1
   33fdc:	4583      	cmp	fp, r0
   33fde:	ea4f 1550 	mov.w	r5, r0, lsr #5
   33fe2:	f000 061f 	and.w	r6, r0, #31
   33fe6:	d1f1      	bne.n	33fcc <mem_alloc.constprop.4+0x12c>
   33fe8:	3101      	adds	r1, #1
   33fea:	4549      	cmp	r1, r9
   33fec:	f108 0808 	add.w	r8, r8, #8
   33ff0:	d3c4      	bcc.n	33f7c <mem_alloc.constprop.4+0xdc>
   33ff2:	e7b4      	b.n	33f5e <mem_alloc.constprop.4+0xbe>
   33ff4:	2101      	movs	r1, #1
   33ff6:	40b1      	lsls	r1, r6
   33ff8:	899e      	ldrh	r6, [r3, #12]
   33ffa:	ea22 0201 	bic.w	r2, r2, r1
   33ffe:	eba0 000e 	sub.w	r0, r0, lr
   34002:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   34006:	685c      	ldr	r4, [r3, #4]
   34008:	2e00      	cmp	r6, #0
   3400a:	d0a8      	beq.n	33f5e <mem_alloc.constprop.4+0xbe>
   3400c:	887a      	ldrh	r2, [r7, #2]
   3400e:	4282      	cmp	r2, r0
   34010:	d811      	bhi.n	34036 <mem_alloc.constprop.4+0x196>
   34012:	2100      	movs	r1, #0
   34014:	1d3b      	adds	r3, r7, #4
   34016:	e003      	b.n	34020 <mem_alloc.constprop.4+0x180>
   34018:	885a      	ldrh	r2, [r3, #2]
   3401a:	3304      	adds	r3, #4
   3401c:	4282      	cmp	r2, r0
   3401e:	d80a      	bhi.n	34036 <mem_alloc.constprop.4+0x196>
   34020:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   34024:	3101      	adds	r1, #1
   34026:	428e      	cmp	r6, r1
   34028:	eba0 0002 	sub.w	r0, r0, r2
   3402c:	fb02 4405 	mla	r4, r2, r5, r4
   34030:	461f      	mov	r7, r3
   34032:	d1f1      	bne.n	34018 <mem_alloc.constprop.4+0x178>
   34034:	e793      	b.n	33f5e <mem_alloc.constprop.4+0xbe>
   34036:	883b      	ldrh	r3, [r7, #0]
   34038:	fb00 4003 	mla	r0, r0, r3, r4
   3403c:	b003      	add	sp, #12
   3403e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34042:	4670      	mov	r0, lr
   34044:	e7b1      	b.n	33faa <mem_alloc.constprop.4+0x10a>
   34046:	9a00      	ldr	r2, [sp, #0]
   34048:	2a10      	cmp	r2, #16
   3404a:	bf08      	it	eq
   3404c:	210f      	moveq	r1, #15
   3404e:	d08f      	beq.n	33f70 <mem_alloc.constprop.4+0xd0>
   34050:	e785      	b.n	33f5e <mem_alloc.constprop.4+0xbe>
   34052:	bf00      	nop
   34054:	20023f60 	.word	0x20023f60
   34058:	20023f24 	.word	0x20023f24
   3405c:	20023ee0 	.word	0x20023ee0

00034060 <nrf_mem_init>:
   34060:	b570      	push	{r4, r5, r6, lr}
   34062:	2200      	movs	r2, #0
   34064:	2501      	movs	r5, #1
   34066:	4833      	ldr	r0, [pc, #204]	; (34134 <nrf_mem_init+0xd4>)
   34068:	0951      	lsrs	r1, r2, #5
   3406a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   3406e:	f002 031f 	and.w	r3, r2, #31
   34072:	fa05 f303 	lsl.w	r3, r5, r3
   34076:	3201      	adds	r2, #1
   34078:	4323      	orrs	r3, r4
   3407a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   3407e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   34082:	d1f1      	bne.n	34068 <nrf_mem_init+0x8>
   34084:	2400      	movs	r4, #0
   34086:	4b2c      	ldr	r3, [pc, #176]	; (34138 <nrf_mem_init+0xd8>)
   34088:	4621      	mov	r1, r4
   3408a:	223c      	movs	r2, #60	; 0x3c
   3408c:	482b      	ldr	r0, [pc, #172]	; (3413c <nrf_mem_init+0xdc>)
   3408e:	601c      	str	r4, [r3, #0]
   34090:	f007 f9af 	bl	3b3f2 <memset>
   34094:	2110      	movs	r1, #16
   34096:	2205      	movs	r2, #5
   34098:	4b29      	ldr	r3, [pc, #164]	; (34140 <nrf_mem_init+0xe0>)
   3409a:	4e2a      	ldr	r6, [pc, #168]	; (34144 <nrf_mem_init+0xe4>)
   3409c:	e9c3 4400 	strd	r4, r4, [r3]
   340a0:	60d9      	str	r1, [r3, #12]
   340a2:	6159      	str	r1, [r3, #20]
   340a4:	61d9      	str	r1, [r3, #28]
   340a6:	6259      	str	r1, [r3, #36]	; 0x24
   340a8:	62d9      	str	r1, [r3, #44]	; 0x2c
   340aa:	6359      	str	r1, [r3, #52]	; 0x34
   340ac:	63d9      	str	r1, [r3, #60]	; 0x3c
   340ae:	6459      	str	r1, [r3, #68]	; 0x44
   340b0:	64d9      	str	r1, [r3, #76]	; 0x4c
   340b2:	6559      	str	r1, [r3, #84]	; 0x54
   340b4:	65d9      	str	r1, [r3, #92]	; 0x5c
   340b6:	6659      	str	r1, [r3, #100]	; 0x64
   340b8:	66d9      	str	r1, [r3, #108]	; 0x6c
   340ba:	6759      	str	r1, [r3, #116]	; 0x74
   340bc:	67d9      	str	r1, [r3, #124]	; 0x7c
   340be:	609a      	str	r2, [r3, #8]
   340c0:	611a      	str	r2, [r3, #16]
   340c2:	619a      	str	r2, [r3, #24]
   340c4:	621a      	str	r2, [r3, #32]
   340c6:	629a      	str	r2, [r3, #40]	; 0x28
   340c8:	631a      	str	r2, [r3, #48]	; 0x30
   340ca:	639a      	str	r2, [r3, #56]	; 0x38
   340cc:	641a      	str	r2, [r3, #64]	; 0x40
   340ce:	649a      	str	r2, [r3, #72]	; 0x48
   340d0:	651a      	str	r2, [r3, #80]	; 0x50
   340d2:	659a      	str	r2, [r3, #88]	; 0x58
   340d4:	661a      	str	r2, [r3, #96]	; 0x60
   340d6:	669a      	str	r2, [r3, #104]	; 0x68
   340d8:	671a      	str	r2, [r3, #112]	; 0x70
   340da:	679a      	str	r2, [r3, #120]	; 0x78
   340dc:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   340e0:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   340e4:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   340e8:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   340ec:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   340f0:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   340f4:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   340f8:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   340fc:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   34100:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   34104:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   34108:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   3410c:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   34110:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   34114:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   34118:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   3411c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   34120:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   34124:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   34128:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   3412c:	4620      	mov	r0, r4
   3412e:	7035      	strb	r5, [r6, #0]
   34130:	bd70      	pop	{r4, r5, r6, pc}
   34132:	bf00      	nop
   34134:	20023ee0 	.word	0x20023ee0
   34138:	20023f20 	.word	0x20023f20
   3413c:	20023f24 	.word	0x20023f24
   34140:	20023f60 	.word	0x20023f60
   34144:	2002cb9e 	.word	0x2002cb9e

00034148 <nrf_mem_register>:
   34148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3414c:	4b87      	ldr	r3, [pc, #540]	; (3436c <nrf_mem_register+0x224>)
   3414e:	b087      	sub	sp, #28
   34150:	781b      	ldrb	r3, [r3, #0]
   34152:	2b00      	cmp	r3, #0
   34154:	f000 808c 	beq.w	34270 <nrf_mem_register+0x128>
   34158:	b328      	cbz	r0, 341a6 <nrf_mem_register+0x5e>
   3415a:	b321      	cbz	r1, 341a6 <nrf_mem_register+0x5e>
   3415c:	780b      	ldrb	r3, [r1, #0]
   3415e:	f8df 8218 	ldr.w	r8, [pc, #536]	; 34378 <nrf_mem_register+0x230>
   34162:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   34166:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   3416a:	685b      	ldr	r3, [r3, #4]
   3416c:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   34170:	4463      	add	r3, ip
   34172:	2b10      	cmp	r3, #16
   34174:	d811      	bhi.n	3419a <nrf_mem_register+0x52>
   34176:	f04f 0a00 	mov.w	sl, #0
   3417a:	4689      	mov	r9, r1
   3417c:	4b7c      	ldr	r3, [pc, #496]	; (34370 <nrf_mem_register+0x228>)
   3417e:	4f7d      	ldr	r7, [pc, #500]	; (34374 <nrf_mem_register+0x22c>)
   34180:	681b      	ldr	r3, [r3, #0]
   34182:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   34186:	9300      	str	r3, [sp, #0]
   34188:	68b9      	ldr	r1, [r7, #8]
   3418a:	b191      	cbz	r1, 341b2 <nrf_mem_register+0x6a>
   3418c:	f10a 0a01 	add.w	sl, sl, #1
   34190:	f1ba 0f05 	cmp.w	sl, #5
   34194:	f107 070c 	add.w	r7, r7, #12
   34198:	d1f6      	bne.n	34188 <nrf_mem_register+0x40>
   3419a:	f248 1b07 	movw	fp, #33031	; 0x8107
   3419e:	4658      	mov	r0, fp
   341a0:	b007      	add	sp, #28
   341a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   341a6:	f248 1b0e 	movw	fp, #33038	; 0x810e
   341aa:	4658      	mov	r0, fp
   341ac:	b007      	add	sp, #28
   341ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   341b2:	f1bc 0f00 	cmp.w	ip, #0
   341b6:	d061      	beq.n	3427c <nrf_mem_register+0x134>
   341b8:	460d      	mov	r5, r1
   341ba:	460c      	mov	r4, r1
   341bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   341c0:	eb0e 0b03 	add.w	fp, lr, r3
   341c4:	885a      	ldrh	r2, [r3, #2]
   341c6:	f833 6b04 	ldrh.w	r6, [r3], #4
   341ca:	4415      	add	r5, r2
   341cc:	459b      	cmp	fp, r3
   341ce:	fb02 4406 	mla	r4, r2, r6, r4
   341d2:	d1f7      	bne.n	341c4 <nrf_mem_register+0x7c>
   341d4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   341d8:	42a3      	cmp	r3, r4
   341da:	d3d7      	bcc.n	3418c <nrf_mem_register+0x44>
   341dc:	9b00      	ldr	r3, [sp, #0]
   341de:	442b      	add	r3, r5
   341e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   341e4:	d2d2      	bcs.n	3418c <nrf_mem_register+0x44>
   341e6:	4c63      	ldr	r4, [pc, #396]	; (34374 <nrf_mem_register+0x22c>)
   341e8:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   341ec:	0092      	lsls	r2, r2, #2
   341ee:	f8c0 a000 	str.w	sl, [r0]
   341f2:	18a0      	adds	r0, r4, r2
   341f4:	f844 9002 	str.w	r9, [r4, r2]
   341f8:	9a00      	ldr	r2, [sp, #0]
   341fa:	468b      	mov	fp, r1
   341fc:	e9c0 2501 	strd	r2, r5, [r0, #4]
   34200:	f899 2001 	ldrb.w	r2, [r9, #1]
   34204:	485a      	ldr	r0, [pc, #360]	; (34370 <nrf_mem_register+0x228>)
   34206:	2a01      	cmp	r2, #1
   34208:	6003      	str	r3, [r0, #0]
   3420a:	d0c8      	beq.n	3419e <nrf_mem_register+0x56>
   3420c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   34210:	2b00      	cmp	r3, #0
   34212:	d0c4      	beq.n	3419e <nrf_mem_register+0x56>
   34214:	2500      	movs	r5, #0
   34216:	f8cd 9004 	str.w	r9, [sp, #4]
   3421a:	f8cd a00c 	str.w	sl, [sp, #12]
   3421e:	f8cd b014 	str.w	fp, [sp, #20]
   34222:	9b01      	ldr	r3, [sp, #4]
   34224:	781f      	ldrb	r7, [r3, #0]
   34226:	691a      	ldr	r2, [r3, #16]
   34228:	013b      	lsls	r3, r7, #4
   3422a:	eb03 0907 	add.w	r9, r3, r7
   3422e:	9300      	str	r3, [sp, #0]
   34230:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   34234:	6859      	ldr	r1, [r3, #4]
   34236:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   3423a:	9102      	str	r1, [sp, #8]
   3423c:	bb39      	cbnz	r1, 3428e <nrf_mem_register+0x146>
   3423e:	9a03      	ldr	r2, [sp, #12]
   34240:	60dd      	str	r5, [r3, #12]
   34242:	609a      	str	r2, [r3, #8]
   34244:	9b00      	ldr	r3, [sp, #0]
   34246:	443b      	add	r3, r7
   34248:	461f      	mov	r7, r3
   3424a:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   3424e:	684b      	ldr	r3, [r1, #4]
   34250:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   34254:	3301      	adds	r3, #1
   34256:	4294      	cmp	r4, r2
   34258:	604b      	str	r3, [r1, #4]
   3425a:	d912      	bls.n	34282 <nrf_mem_register+0x13a>
   3425c:	9b01      	ldr	r3, [sp, #4]
   3425e:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   34262:	899b      	ldrh	r3, [r3, #12]
   34264:	3501      	adds	r5, #1
   34266:	429d      	cmp	r5, r3
   34268:	d3db      	bcc.n	34222 <nrf_mem_register+0xda>
   3426a:	f8dd b014 	ldr.w	fp, [sp, #20]
   3426e:	e796      	b.n	3419e <nrf_mem_register+0x56>
   34270:	f248 1b08 	movw	fp, #33032	; 0x8108
   34274:	4658      	mov	r0, fp
   34276:	b007      	add	sp, #28
   34278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3427c:	9b00      	ldr	r3, [sp, #0]
   3427e:	4665      	mov	r5, ip
   34280:	e7ae      	b.n	341e0 <nrf_mem_register+0x98>
   34282:	9b01      	ldr	r3, [sp, #4]
   34284:	3501      	adds	r5, #1
   34286:	899b      	ldrh	r3, [r3, #12]
   34288:	42ab      	cmp	r3, r5
   3428a:	d8ca      	bhi.n	34222 <nrf_mem_register+0xda>
   3428c:	e7ed      	b.n	3426a <nrf_mem_register+0x122>
   3428e:	2600      	movs	r6, #0
   34290:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   34294:	9504      	str	r5, [sp, #16]
   34296:	eb06 000a 	add.w	r0, r6, sl
   3429a:	eb09 0206 	add.w	r2, r9, r6
   3429e:	3201      	adds	r2, #1
   342a0:	3001      	adds	r0, #1
   342a2:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   342a6:	0840      	lsrs	r0, r0, #1
   342a8:	4d32      	ldr	r5, [pc, #200]	; (34374 <nrf_mem_register+0x22c>)
   342aa:	eb09 0100 	add.w	r1, r9, r0
   342ae:	eb09 030a 	add.w	r3, r9, sl
   342b2:	3101      	adds	r1, #1
   342b4:	3301      	adds	r3, #1
   342b6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   342ba:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   342be:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   342c2:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   342c6:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   342ca:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   342ce:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   342d2:	f8db b010 	ldr.w	fp, [fp, #16]
   342d6:	6852      	ldr	r2, [r2, #4]
   342d8:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   342dc:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   342e0:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   342e4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   342e8:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   342ec:	f8de e010 	ldr.w	lr, [lr, #16]
   342f0:	6849      	ldr	r1, [r1, #4]
   342f2:	f8dc c010 	ldr.w	ip, [ip, #16]
   342f6:	685b      	ldr	r3, [r3, #4]
   342f8:	4294      	cmp	r4, r2
   342fa:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   342fe:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   34302:	d92d      	bls.n	34360 <nrf_mem_register+0x218>
   34304:	429c      	cmp	r4, r3
   34306:	d22d      	bcs.n	34364 <nrf_mem_register+0x21c>
   34308:	428c      	cmp	r4, r1
   3430a:	d924      	bls.n	34356 <nrf_mem_register+0x20e>
   3430c:	1c46      	adds	r6, r0, #1
   3430e:	45b2      	cmp	sl, r6
   34310:	d2c1      	bcs.n	34296 <nrf_mem_register+0x14e>
   34312:	2610      	movs	r6, #16
   34314:	9d04      	ldr	r5, [sp, #16]
   34316:	9a02      	ldr	r2, [sp, #8]
   34318:	42b2      	cmp	r2, r6
   3431a:	d911      	bls.n	34340 <nrf_mem_register+0x1f8>
   3431c:	9b00      	ldr	r3, [sp, #0]
   3431e:	443b      	add	r3, r7
   34320:	441a      	add	r2, r3
   34322:	4433      	add	r3, r6
   34324:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   34328:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   3432c:	2208      	movs	r2, #8
   3432e:	4651      	mov	r1, sl
   34330:	eb0a 0002 	add.w	r0, sl, r2
   34334:	f1aa 0a08 	sub.w	sl, sl, #8
   34338:	f007 f83b 	bl	3b3b2 <memcpy>
   3433c:	45d1      	cmp	r9, sl
   3433e:	d1f5      	bne.n	3432c <nrf_mem_register+0x1e4>
   34340:	9b00      	ldr	r3, [sp, #0]
   34342:	9903      	ldr	r1, [sp, #12]
   34344:	443b      	add	r3, r7
   34346:	4433      	add	r3, r6
   34348:	3301      	adds	r3, #1
   3434a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   3434e:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   34352:	6055      	str	r5, [r2, #4]
   34354:	e776      	b.n	34244 <nrf_mem_register+0xfc>
   34356:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   3435a:	4556      	cmp	r6, sl
   3435c:	d99b      	bls.n	34296 <nrf_mem_register+0x14e>
   3435e:	e7d8      	b.n	34312 <nrf_mem_register+0x1ca>
   34360:	9d04      	ldr	r5, [sp, #16]
   34362:	e7d8      	b.n	34316 <nrf_mem_register+0x1ce>
   34364:	9d04      	ldr	r5, [sp, #16]
   34366:	f10a 0601 	add.w	r6, sl, #1
   3436a:	e7d4      	b.n	34316 <nrf_mem_register+0x1ce>
   3436c:	2002cb9e 	.word	0x2002cb9e
   34370:	20023f20 	.word	0x20023f20
   34374:	20023f24 	.word	0x20023f24
   34378:	20023f60 	.word	0x20023f60

0003437c <nrf_malloc>:
   3437c:	4b03      	ldr	r3, [pc, #12]	; (3438c <nrf_malloc+0x10>)
   3437e:	781b      	ldrb	r3, [r3, #0]
   34380:	b10b      	cbz	r3, 34386 <nrf_malloc+0xa>
   34382:	f7ff bd8d 	b.w	33ea0 <mem_alloc.constprop.4>
   34386:	4618      	mov	r0, r3
   34388:	4770      	bx	lr
   3438a:	bf00      	nop
   3438c:	2002cb9e 	.word	0x2002cb9e

00034390 <nrf_free>:
   34390:	4b04      	ldr	r3, [pc, #16]	; (343a4 <nrf_free+0x14>)
   34392:	781b      	ldrb	r3, [r3, #0]
   34394:	b123      	cbz	r3, 343a0 <nrf_free+0x10>
   34396:	b118      	cbz	r0, 343a0 <nrf_free+0x10>
   34398:	4601      	mov	r1, r0
   3439a:	2000      	movs	r0, #0
   3439c:	f7ff bc30 	b.w	33c00 <mem_free>
   343a0:	4770      	bx	lr
   343a2:	bf00      	nop
   343a4:	2002cb9e 	.word	0x2002cb9e

000343a8 <nrf_realloc>:
   343a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   343ac:	4b52      	ldr	r3, [pc, #328]	; (344f8 <nrf_realloc+0x150>)
   343ae:	b087      	sub	sp, #28
   343b0:	781b      	ldrb	r3, [r3, #0]
   343b2:	b173      	cbz	r3, 343d2 <nrf_realloc+0x2a>
   343b4:	b168      	cbz	r0, 343d2 <nrf_realloc+0x2a>
   343b6:	e9cd 0101 	strd	r0, r1, [sp, #4]
   343ba:	f8df a148 	ldr.w	sl, [pc, #328]	; 34504 <nrf_realloc+0x15c>
   343be:	f8da 3000 	ldr.w	r3, [sl]
   343c2:	b10b      	cbz	r3, 343c8 <nrf_realloc+0x20>
   343c4:	781a      	ldrb	r2, [r3, #0]
   343c6:	b14a      	cbz	r2, 343dc <nrf_realloc+0x34>
   343c8:	4b4c      	ldr	r3, [pc, #304]	; (344fc <nrf_realloc+0x154>)
   343ca:	f10a 0a0c 	add.w	sl, sl, #12
   343ce:	4553      	cmp	r3, sl
   343d0:	d1f5      	bne.n	343be <nrf_realloc+0x16>
   343d2:	2400      	movs	r4, #0
   343d4:	4620      	mov	r0, r4
   343d6:	b007      	add	sp, #28
   343d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   343dc:	e9da 9201 	ldrd	r9, r2, [sl, #4]
   343e0:	444a      	add	r2, r9
   343e2:	4591      	cmp	r9, r2
   343e4:	9200      	str	r2, [sp, #0]
   343e6:	d2ef      	bcs.n	343c8 <nrf_realloc+0x20>
   343e8:	685a      	ldr	r2, [r3, #4]
   343ea:	f8cd a00c 	str.w	sl, [sp, #12]
   343ee:	46cb      	mov	fp, r9
   343f0:	4692      	mov	sl, r2
   343f2:	f8d3 8010 	ldr.w	r8, [r3, #16]
   343f6:	899f      	ldrh	r7, [r3, #12]
   343f8:	ebab 0e09 	sub.w	lr, fp, r9
   343fc:	b1d7      	cbz	r7, 34434 <nrf_realloc+0x8c>
   343fe:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   34402:	45e6      	cmp	lr, ip
   34404:	4662      	mov	r2, ip
   34406:	d31d      	bcc.n	34444 <nrf_realloc+0x9c>
   34408:	4654      	mov	r4, sl
   3440a:	4671      	mov	r1, lr
   3440c:	4665      	mov	r5, ip
   3440e:	2000      	movs	r0, #0
   34410:	f108 0304 	add.w	r3, r8, #4
   34414:	e004      	b.n	34420 <nrf_realloc+0x78>
   34416:	885a      	ldrh	r2, [r3, #2]
   34418:	3304      	adds	r3, #4
   3441a:	428a      	cmp	r2, r1
   3441c:	4615      	mov	r5, r2
   3441e:	d814      	bhi.n	3444a <nrf_realloc+0xa2>
   34420:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   34424:	3001      	adds	r0, #1
   34426:	4287      	cmp	r7, r0
   34428:	fb02 4406 	mla	r4, r2, r6, r4
   3442c:	eba1 0105 	sub.w	r1, r1, r5
   34430:	461e      	mov	r6, r3
   34432:	d1f0      	bne.n	34416 <nrf_realloc+0x6e>
   34434:	9b00      	ldr	r3, [sp, #0]
   34436:	f10b 0b01 	add.w	fp, fp, #1
   3443a:	455b      	cmp	r3, fp
   3443c:	d1dc      	bne.n	343f8 <nrf_realloc+0x50>
   3443e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   34442:	e7c1      	b.n	343c8 <nrf_realloc+0x20>
   34444:	4654      	mov	r4, sl
   34446:	4671      	mov	r1, lr
   34448:	4646      	mov	r6, r8
   3444a:	8833      	ldrh	r3, [r6, #0]
   3444c:	fb01 4103 	mla	r1, r1, r3, r4
   34450:	9b01      	ldr	r3, [sp, #4]
   34452:	428b      	cmp	r3, r1
   34454:	d1ee      	bne.n	34434 <nrf_realloc+0x8c>
   34456:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   3445a:	f8dd a00c 	ldr.w	sl, [sp, #12]
   3445e:	d0b3      	beq.n	343c8 <nrf_realloc+0x20>
   34460:	45e6      	cmp	lr, ip
   34462:	d334      	bcc.n	344ce <nrf_realloc+0x126>
   34464:	2200      	movs	r2, #0
   34466:	f108 0304 	add.w	r3, r8, #4
   3446a:	e006      	b.n	3447a <nrf_realloc+0xd2>
   3446c:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   34470:	4698      	mov	r8, r3
   34472:	45f4      	cmp	ip, lr
   34474:	f103 0304 	add.w	r3, r3, #4
   34478:	d829      	bhi.n	344ce <nrf_realloc+0x126>
   3447a:	3201      	adds	r2, #1
   3447c:	42ba      	cmp	r2, r7
   3447e:	ebae 0e0c 	sub.w	lr, lr, ip
   34482:	d1f3      	bne.n	3446c <nrf_realloc+0xc4>
   34484:	2300      	movs	r3, #0
   34486:	9a02      	ldr	r2, [sp, #8]
   34488:	429a      	cmp	r2, r3
   3448a:	d923      	bls.n	344d4 <nrf_realloc+0x12c>
   3448c:	4610      	mov	r0, r2
   3448e:	f7ff fd07 	bl	33ea0 <mem_alloc.constprop.4>
   34492:	4604      	mov	r4, r0
   34494:	2800      	cmp	r0, #0
   34496:	d097      	beq.n	343c8 <nrf_realloc+0x20>
   34498:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
   3449c:	462a      	mov	r2, r5
   3449e:	f006 ff88 	bl	3b3b2 <memcpy>
   344a2:	462b      	mov	r3, r5
   344a4:	2201      	movs	r2, #1
   344a6:	3303      	adds	r3, #3
   344a8:	4915      	ldr	r1, [pc, #84]	; (34500 <nrf_realloc+0x158>)
   344aa:	4423      	add	r3, r4
   344ac:	f023 0303 	bic.w	r3, r3, #3
   344b0:	ea4f 105b 	mov.w	r0, fp, lsr #5
   344b4:	681e      	ldr	r6, [r3, #0]
   344b6:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   344ba:	f00b 031f 	and.w	r3, fp, #31
   344be:	fa02 f303 	lsl.w	r3, r2, r3
   344c2:	9605      	str	r6, [sp, #20]
   344c4:	432b      	orrs	r3, r5
   344c6:	9a05      	ldr	r2, [sp, #20]
   344c8:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   344cc:	e782      	b.n	343d4 <nrf_realloc+0x2c>
   344ce:	f8b8 3000 	ldrh.w	r3, [r8]
   344d2:	e7d8      	b.n	34486 <nrf_realloc+0xde>
   344d4:	4615      	mov	r5, r2
   344d6:	b96a      	cbnz	r2, 344f4 <nrf_realloc+0x14c>
   344d8:	2301      	movs	r3, #1
   344da:	4a09      	ldr	r2, [pc, #36]	; (34500 <nrf_realloc+0x158>)
   344dc:	ea4f 115b 	mov.w	r1, fp, lsr #5
   344e0:	f00b 041f 	and.w	r4, fp, #31
   344e4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   344e8:	40a3      	lsls	r3, r4
   344ea:	4303      	orrs	r3, r0
   344ec:	462c      	mov	r4, r5
   344ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   344f2:	e76f      	b.n	343d4 <nrf_realloc+0x2c>
   344f4:	9c01      	ldr	r4, [sp, #4]
   344f6:	e76d      	b.n	343d4 <nrf_realloc+0x2c>
   344f8:	2002cb9e 	.word	0x2002cb9e
   344fc:	20023f60 	.word	0x20023f60
   34500:	20023ee0 	.word	0x20023ee0
   34504:	20023f24 	.word	0x20023f24

00034508 <nrf_shared_malloc>:
   34508:	4b03      	ldr	r3, [pc, #12]	; (34518 <nrf_shared_malloc+0x10>)
   3450a:	781b      	ldrb	r3, [r3, #0]
   3450c:	b10b      	cbz	r3, 34512 <nrf_shared_malloc+0xa>
   3450e:	f7ff bbe3 	b.w	33cd8 <mem_alloc.constprop.5>
   34512:	4618      	mov	r0, r3
   34514:	4770      	bx	lr
   34516:	bf00      	nop
   34518:	2002cb9e 	.word	0x2002cb9e

0003451c <nrf_shared_free>:
   3451c:	4b04      	ldr	r3, [pc, #16]	; (34530 <nrf_shared_free+0x14>)
   3451e:	781b      	ldrb	r3, [r3, #0]
   34520:	b123      	cbz	r3, 3452c <nrf_shared_free+0x10>
   34522:	b118      	cbz	r0, 3452c <nrf_shared_free+0x10>
   34524:	4601      	mov	r1, r0
   34526:	2001      	movs	r0, #1
   34528:	f7ff bb6a 	b.w	33c00 <mem_free>
   3452c:	4770      	bx	lr
   3452e:	bf00      	nop
   34530:	2002cb9e 	.word	0x2002cb9e

00034534 <rpc_dfu_event_handler>:
   34534:	b508      	push	{r3, lr}
   34536:	4a08      	ldr	r2, [pc, #32]	; (34558 <rpc_dfu_event_handler+0x24>)
   34538:	68c1      	ldr	r1, [r0, #12]
   3453a:	8812      	ldrh	r2, [r2, #0]
   3453c:	4603      	mov	r3, r0
   3453e:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   34542:	d005      	beq.n	34550 <rpc_dfu_event_handler+0x1c>
   34544:	6800      	ldr	r0, [r0, #0]
   34546:	b110      	cbz	r0, 3454e <rpc_dfu_event_handler+0x1a>
   34548:	f7fd f936 	bl	317b8 <rpc_dfu_client_data_free>
   3454c:	2000      	movs	r0, #0
   3454e:	bd08      	pop	{r3, pc}
   34550:	4a02      	ldr	r2, [pc, #8]	; (3455c <rpc_dfu_event_handler+0x28>)
   34552:	2001      	movs	r0, #1
   34554:	6013      	str	r3, [r2, #0]
   34556:	bd08      	pop	{r3, pc}
   34558:	2002894e 	.word	0x2002894e
   3455c:	2002407c 	.word	0x2002407c

00034560 <mfu_interface_init>:
   34560:	2300      	movs	r3, #0
   34562:	b510      	push	{r4, lr}
   34564:	4808      	ldr	r0, [pc, #32]	; (34588 <mfu_interface_init+0x28>)
   34566:	4909      	ldr	r1, [pc, #36]	; (3458c <mfu_interface_init+0x2c>)
   34568:	4a09      	ldr	r2, [pc, #36]	; (34590 <mfu_interface_init+0x30>)
   3456a:	4c0a      	ldr	r4, [pc, #40]	; (34594 <mfu_interface_init+0x34>)
   3456c:	8003      	strh	r3, [r0, #0]
   3456e:	600b      	str	r3, [r1, #0]
   34570:	6013      	str	r3, [r2, #0]
   34572:	6023      	str	r3, [r4, #0]
   34574:	f7fd f8ea 	bl	3174c <rpc_dfu_client_init>
   34578:	b910      	cbnz	r0, 34580 <mfu_interface_init+0x20>
   3457a:	2301      	movs	r3, #1
   3457c:	6023      	str	r3, [r4, #0]
   3457e:	bd10      	pop	{r4, pc}
   34580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34584:	bd10      	pop	{r4, pc}
   34586:	bf00      	nop
   34588:	2002894e 	.word	0x2002894e
   3458c:	2002407c 	.word	0x2002407c
   34590:	20024078 	.word	0x20024078
   34594:	20024070 	.word	0x20024070

00034598 <mfu_interface_open>:
   34598:	b508      	push	{r3, lr}
   3459a:	4b07      	ldr	r3, [pc, #28]	; (345b8 <mfu_interface_open+0x20>)
   3459c:	681a      	ldr	r2, [r3, #0]
   3459e:	2a01      	cmp	r2, #1
   345a0:	d103      	bne.n	345aa <mfu_interface_open+0x12>
   345a2:	2202      	movs	r2, #2
   345a4:	601a      	str	r2, [r3, #0]
   345a6:	4805      	ldr	r0, [pc, #20]	; (345bc <mfu_interface_open+0x24>)
   345a8:	bd08      	pop	{r3, pc}
   345aa:	2001      	movs	r0, #1
   345ac:	f7f5 f9c4 	bl	29938 <bsd_os_errno_set>
   345b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   345b4:	bd08      	pop	{r3, pc}
   345b6:	bf00      	nop
   345b8:	20024070 	.word	0x20024070
   345bc:	49765432 	.word	0x49765432

000345c0 <mfu_interface_close>:
   345c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   345c2:	4c32      	ldr	r4, [pc, #200]	; (3468c <mfu_interface_close+0xcc>)
   345c4:	b083      	sub	sp, #12
   345c6:	6823      	ldr	r3, [r4, #0]
   345c8:	1e9a      	subs	r2, r3, #2
   345ca:	2a01      	cmp	r2, #1
   345cc:	d857      	bhi.n	3467e <mfu_interface_close+0xbe>
   345ce:	2b03      	cmp	r3, #3
   345d0:	d004      	beq.n	345dc <mfu_interface_close+0x1c>
   345d2:	2301      	movs	r3, #1
   345d4:	2000      	movs	r0, #0
   345d6:	6023      	str	r3, [r4, #0]
   345d8:	b003      	add	sp, #12
   345da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   345dc:	2100      	movs	r1, #0
   345de:	4668      	mov	r0, sp
   345e0:	f7fd f8ba 	bl	31758 <rpc_dfu_client_request_alloc>
   345e4:	4603      	mov	r3, r0
   345e6:	2800      	cmp	r0, #0
   345e8:	d13d      	bne.n	34666 <mfu_interface_close+0xa6>
   345ea:	2104      	movs	r1, #4
   345ec:	4e28      	ldr	r6, [pc, #160]	; (34690 <mfu_interface_close+0xd0>)
   345ee:	9800      	ldr	r0, [sp, #0]
   345f0:	8832      	ldrh	r2, [r6, #0]
   345f2:	7201      	strb	r1, [r0, #8]
   345f4:	3201      	adds	r2, #1
   345f6:	b292      	uxth	r2, r2
   345f8:	0411      	lsls	r1, r2, #16
   345fa:	f041 0106 	orr.w	r1, r1, #6
   345fe:	4d25      	ldr	r5, [pc, #148]	; (34694 <mfu_interface_close+0xd4>)
   34600:	60c1      	str	r1, [r0, #12]
   34602:	7103      	strb	r3, [r0, #4]
   34604:	7143      	strb	r3, [r0, #5]
   34606:	7183      	strb	r3, [r0, #6]
   34608:	71c3      	strb	r3, [r0, #7]
   3460a:	7243      	strb	r3, [r0, #9]
   3460c:	7283      	strb	r3, [r0, #10]
   3460e:	72c3      	strb	r3, [r0, #11]
   34610:	2106      	movs	r1, #6
   34612:	8032      	strh	r2, [r6, #0]
   34614:	602b      	str	r3, [r5, #0]
   34616:	f7fd f8b3 	bl	31780 <rpc_dfu_client_request_send>
   3461a:	b9d8      	cbnz	r0, 34654 <mfu_interface_close+0x94>
   3461c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   34620:	ae02      	add	r6, sp, #8
   34622:	4627      	mov	r7, r4
   34624:	f846 3d04 	str.w	r3, [r6, #-4]!
   34628:	e004      	b.n	34634 <mfu_interface_close+0x74>
   3462a:	4631      	mov	r1, r6
   3462c:	4638      	mov	r0, r7
   3462e:	f7f5 f8cb 	bl	297c8 <bsd_os_timedwait>
   34632:	b9f0      	cbnz	r0, 34672 <mfu_interface_close+0xb2>
   34634:	6828      	ldr	r0, [r5, #0]
   34636:	2800      	cmp	r0, #0
   34638:	d0f7      	beq.n	3462a <mfu_interface_close+0x6a>
   3463a:	6905      	ldr	r5, [r0, #16]
   3463c:	f7fd f8b4 	bl	317a8 <rpc_dfu_client_message_free>
   34640:	2d00      	cmp	r5, #0
   34642:	d0c6      	beq.n	345d2 <mfu_interface_close+0x12>
   34644:	4b14      	ldr	r3, [pc, #80]	; (34698 <mfu_interface_close+0xd8>)
   34646:	2008      	movs	r0, #8
   34648:	601d      	str	r5, [r3, #0]
   3464a:	f7f5 f975 	bl	29938 <bsd_os_errno_set>
   3464e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34652:	e7c1      	b.n	345d8 <mfu_interface_close+0x18>
   34654:	9800      	ldr	r0, [sp, #0]
   34656:	6803      	ldr	r3, [r0, #0]
   34658:	b11b      	cbz	r3, 34662 <mfu_interface_close+0xa2>
   3465a:	4618      	mov	r0, r3
   3465c:	f7fd f8ac 	bl	317b8 <rpc_dfu_client_data_free>
   34660:	9800      	ldr	r0, [sp, #0]
   34662:	f7fd f8a1 	bl	317a8 <rpc_dfu_client_message_free>
   34666:	200c      	movs	r0, #12
   34668:	f7f5 f966 	bl	29938 <bsd_os_errno_set>
   3466c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34670:	e7b2      	b.n	345d8 <mfu_interface_close+0x18>
   34672:	203c      	movs	r0, #60	; 0x3c
   34674:	f7f5 f960 	bl	29938 <bsd_os_errno_set>
   34678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3467c:	e7ac      	b.n	345d8 <mfu_interface_close+0x18>
   3467e:	2001      	movs	r0, #1
   34680:	f7f5 f95a 	bl	29938 <bsd_os_errno_set>
   34684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34688:	e7a6      	b.n	345d8 <mfu_interface_close+0x18>
   3468a:	bf00      	nop
   3468c:	20024070 	.word	0x20024070
   34690:	2002894e 	.word	0x2002894e
   34694:	2002407c 	.word	0x2002407c
   34698:	20024074 	.word	0x20024074

0003469c <mfu_interface_sendto>:
   3469c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   346a0:	4e64      	ldr	r6, [pc, #400]	; (34834 <mfu_interface_sendto+0x198>)
   346a2:	460f      	mov	r7, r1
   346a4:	6831      	ldr	r1, [r6, #0]
   346a6:	4615      	mov	r5, r2
   346a8:	1e8a      	subs	r2, r1, #2
   346aa:	2a01      	cmp	r2, #1
   346ac:	b082      	sub	sp, #8
   346ae:	f200 80b4 	bhi.w	3481a <mfu_interface_sendto+0x17e>
   346b2:	2f00      	cmp	r7, #0
   346b4:	f000 80a5 	beq.w	34802 <mfu_interface_sendto+0x166>
   346b8:	2d00      	cmp	r5, #0
   346ba:	f000 80a2 	beq.w	34802 <mfu_interface_sendto+0x166>
   346be:	2b00      	cmp	r3, #0
   346c0:	f040 80b1 	bne.w	34826 <mfu_interface_sendto+0x18a>
   346c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   346c6:	2b00      	cmp	r3, #0
   346c8:	f040 80a1 	bne.w	3480e <mfu_interface_sendto+0x172>
   346cc:	2902      	cmp	r1, #2
   346ce:	d04f      	beq.n	34770 <mfu_interface_sendto+0xd4>
   346d0:	46e8      	mov	r8, sp
   346d2:	4640      	mov	r0, r8
   346d4:	4629      	mov	r1, r5
   346d6:	f7fd f83f 	bl	31758 <rpc_dfu_client_request_alloc>
   346da:	4606      	mov	r6, r0
   346dc:	b140      	cbz	r0, 346f0 <mfu_interface_sendto+0x54>
   346de:	200c      	movs	r0, #12
   346e0:	f7f5 f92a 	bl	29938 <bsd_os_errno_set>
   346e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   346e8:	4628      	mov	r0, r5
   346ea:	b002      	add	sp, #8
   346ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   346f0:	9b00      	ldr	r3, [sp, #0]
   346f2:	4639      	mov	r1, r7
   346f4:	6818      	ldr	r0, [r3, #0]
   346f6:	462a      	mov	r2, r5
   346f8:	f006 fe5b 	bl	3b3b2 <memcpy>
   346fc:	2104      	movs	r1, #4
   346fe:	4c4e      	ldr	r4, [pc, #312]	; (34838 <mfu_interface_sendto+0x19c>)
   34700:	9800      	ldr	r0, [sp, #0]
   34702:	8823      	ldrh	r3, [r4, #0]
   34704:	6045      	str	r5, [r0, #4]
   34706:	3301      	adds	r3, #1
   34708:	b29b      	uxth	r3, r3
   3470a:	041a      	lsls	r2, r3, #16
   3470c:	8023      	strh	r3, [r4, #0]
   3470e:	430a      	orrs	r2, r1
   34710:	4c4a      	ldr	r4, [pc, #296]	; (3483c <mfu_interface_sendto+0x1a0>)
   34712:	60c2      	str	r2, [r0, #12]
   34714:	7246      	strb	r6, [r0, #9]
   34716:	7286      	strb	r6, [r0, #10]
   34718:	72c6      	strb	r6, [r0, #11]
   3471a:	7201      	strb	r1, [r0, #8]
   3471c:	6026      	str	r6, [r4, #0]
   3471e:	f7fd f82f 	bl	31780 <rpc_dfu_client_request_send>
   34722:	2800      	cmp	r0, #0
   34724:	d163      	bne.n	347ee <mfu_interface_sendto+0x152>
   34726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3472a:	ae02      	add	r6, sp, #8
   3472c:	4f41      	ldr	r7, [pc, #260]	; (34834 <mfu_interface_sendto+0x198>)
   3472e:	f846 3d04 	str.w	r3, [r6, #-4]!
   34732:	e004      	b.n	3473e <mfu_interface_sendto+0xa2>
   34734:	4631      	mov	r1, r6
   34736:	4638      	mov	r0, r7
   34738:	f7f5 f846 	bl	297c8 <bsd_os_timedwait>
   3473c:	b978      	cbnz	r0, 3475e <mfu_interface_sendto+0xc2>
   3473e:	6820      	ldr	r0, [r4, #0]
   34740:	2800      	cmp	r0, #0
   34742:	d0f7      	beq.n	34734 <mfu_interface_sendto+0x98>
   34744:	6904      	ldr	r4, [r0, #16]
   34746:	f7fd f82f 	bl	317a8 <rpc_dfu_client_message_free>
   3474a:	2c00      	cmp	r4, #0
   3474c:	d0cc      	beq.n	346e8 <mfu_interface_sendto+0x4c>
   3474e:	4b3c      	ldr	r3, [pc, #240]	; (34840 <mfu_interface_sendto+0x1a4>)
   34750:	2008      	movs	r0, #8
   34752:	601c      	str	r4, [r3, #0]
   34754:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   34758:	f7f5 f8ee 	bl	29938 <bsd_os_errno_set>
   3475c:	e7c4      	b.n	346e8 <mfu_interface_sendto+0x4c>
   3475e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   34762:	203c      	movs	r0, #60	; 0x3c
   34764:	f7f5 f8e8 	bl	29938 <bsd_os_errno_set>
   34768:	4628      	mov	r0, r5
   3476a:	b002      	add	sp, #8
   3476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34770:	46e8      	mov	r8, sp
   34772:	4619      	mov	r1, r3
   34774:	4640      	mov	r0, r8
   34776:	f7fc ffef 	bl	31758 <rpc_dfu_client_request_alloc>
   3477a:	4602      	mov	r2, r0
   3477c:	2800      	cmp	r0, #0
   3477e:	d1ae      	bne.n	346de <mfu_interface_sendto+0x42>
   34780:	f04f 0c08 	mov.w	ip, #8
   34784:	492c      	ldr	r1, [pc, #176]	; (34838 <mfu_interface_sendto+0x19c>)
   34786:	482f      	ldr	r0, [pc, #188]	; (34844 <mfu_interface_sendto+0x1a8>)
   34788:	880b      	ldrh	r3, [r1, #0]
   3478a:	6804      	ldr	r4, [r0, #0]
   3478c:	3301      	adds	r3, #1
   3478e:	9800      	ldr	r0, [sp, #0]
   34790:	b29b      	uxth	r3, r3
   34792:	800b      	strh	r3, [r1, #0]
   34794:	041b      	lsls	r3, r3, #16
   34796:	f043 0303 	orr.w	r3, r3, #3
   3479a:	6104      	str	r4, [r0, #16]
   3479c:	4c27      	ldr	r4, [pc, #156]	; (3483c <mfu_interface_sendto+0x1a0>)
   3479e:	60c3      	str	r3, [r0, #12]
   347a0:	7102      	strb	r2, [r0, #4]
   347a2:	7142      	strb	r2, [r0, #5]
   347a4:	7182      	strb	r2, [r0, #6]
   347a6:	71c2      	strb	r2, [r0, #7]
   347a8:	7242      	strb	r2, [r0, #9]
   347aa:	7282      	strb	r2, [r0, #10]
   347ac:	72c2      	strb	r2, [r0, #11]
   347ae:	f880 c008 	strb.w	ip, [r0, #8]
   347b2:	2103      	movs	r1, #3
   347b4:	6022      	str	r2, [r4, #0]
   347b6:	f7fc ffe3 	bl	31780 <rpc_dfu_client_request_send>
   347ba:	b9c0      	cbnz	r0, 347ee <mfu_interface_sendto+0x152>
   347bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   347c0:	f10d 0908 	add.w	r9, sp, #8
   347c4:	f849 3d04 	str.w	r3, [r9, #-4]!
   347c8:	46b2      	mov	sl, r6
   347ca:	e005      	b.n	347d8 <mfu_interface_sendto+0x13c>
   347cc:	4649      	mov	r1, r9
   347ce:	4650      	mov	r0, sl
   347d0:	f7f4 fffa 	bl	297c8 <bsd_os_timedwait>
   347d4:	2800      	cmp	r0, #0
   347d6:	d1c2      	bne.n	3475e <mfu_interface_sendto+0xc2>
   347d8:	6820      	ldr	r0, [r4, #0]
   347da:	2800      	cmp	r0, #0
   347dc:	d0f6      	beq.n	347cc <mfu_interface_sendto+0x130>
   347de:	6904      	ldr	r4, [r0, #16]
   347e0:	f7fc ffe2 	bl	317a8 <rpc_dfu_client_message_free>
   347e4:	2c00      	cmp	r4, #0
   347e6:	d1b2      	bne.n	3474e <mfu_interface_sendto+0xb2>
   347e8:	2303      	movs	r3, #3
   347ea:	6033      	str	r3, [r6, #0]
   347ec:	e771      	b.n	346d2 <mfu_interface_sendto+0x36>
   347ee:	9800      	ldr	r0, [sp, #0]
   347f0:	6803      	ldr	r3, [r0, #0]
   347f2:	b11b      	cbz	r3, 347fc <mfu_interface_sendto+0x160>
   347f4:	4618      	mov	r0, r3
   347f6:	f7fc ffdf 	bl	317b8 <rpc_dfu_client_data_free>
   347fa:	9800      	ldr	r0, [sp, #0]
   347fc:	f7fc ffd4 	bl	317a8 <rpc_dfu_client_message_free>
   34800:	e76d      	b.n	346de <mfu_interface_sendto+0x42>
   34802:	2016      	movs	r0, #22
   34804:	f7f5 f898 	bl	29938 <bsd_os_errno_set>
   34808:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3480c:	e76c      	b.n	346e8 <mfu_interface_sendto+0x4c>
   3480e:	2038      	movs	r0, #56	; 0x38
   34810:	f7f5 f892 	bl	29938 <bsd_os_errno_set>
   34814:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   34818:	e766      	b.n	346e8 <mfu_interface_sendto+0x4c>
   3481a:	2001      	movs	r0, #1
   3481c:	f7f5 f88c 	bl	29938 <bsd_os_errno_set>
   34820:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   34824:	e760      	b.n	346e8 <mfu_interface_sendto+0x4c>
   34826:	202d      	movs	r0, #45	; 0x2d
   34828:	f7f5 f886 	bl	29938 <bsd_os_errno_set>
   3482c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   34830:	e75a      	b.n	346e8 <mfu_interface_sendto+0x4c>
   34832:	bf00      	nop
   34834:	20024070 	.word	0x20024070
   34838:	2002894e 	.word	0x2002894e
   3483c:	2002407c 	.word	0x2002407c
   34840:	20024074 	.word	0x20024074
   34844:	20024078 	.word	0x20024078

00034848 <mfu_interface_setopt>:
   34848:	b5f0      	push	{r4, r5, r6, r7, lr}
   3484a:	4846      	ldr	r0, [pc, #280]	; (34964 <mfu_interface_setopt+0x11c>)
   3484c:	b083      	sub	sp, #12
   3484e:	6800      	ldr	r0, [r0, #0]
   34850:	3802      	subs	r0, #2
   34852:	2801      	cmp	r0, #1
   34854:	d877      	bhi.n	34946 <mfu_interface_setopt+0xfe>
   34856:	f240 2003 	movw	r0, #515	; 0x203
   3485a:	4281      	cmp	r1, r0
   3485c:	d16d      	bne.n	3493a <mfu_interface_setopt+0xf2>
   3485e:	3a04      	subs	r2, #4
   34860:	2a03      	cmp	r2, #3
   34862:	d85c      	bhi.n	3491e <mfu_interface_setopt+0xd6>
   34864:	e8df f002 	tbb	[pc, r2]
   34868:	514e024b 	.word	0x514e024b
   3486c:	2407      	movs	r4, #7
   3486e:	4625      	mov	r5, r4
   34870:	2100      	movs	r1, #0
   34872:	4668      	mov	r0, sp
   34874:	f7fc ff70 	bl	31758 <rpc_dfu_client_request_alloc>
   34878:	4603      	mov	r3, r0
   3487a:	2800      	cmp	r0, #0
   3487c:	d138      	bne.n	348f0 <mfu_interface_setopt+0xa8>
   3487e:	2704      	movs	r7, #4
   34880:	4e39      	ldr	r6, [pc, #228]	; (34968 <mfu_interface_setopt+0x120>)
   34882:	9800      	ldr	r0, [sp, #0]
   34884:	8832      	ldrh	r2, [r6, #0]
   34886:	4629      	mov	r1, r5
   34888:	3201      	adds	r2, #1
   3488a:	b292      	uxth	r2, r2
   3488c:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   34890:	4c36      	ldr	r4, [pc, #216]	; (3496c <mfu_interface_setopt+0x124>)
   34892:	60c5      	str	r5, [r0, #12]
   34894:	7103      	strb	r3, [r0, #4]
   34896:	7143      	strb	r3, [r0, #5]
   34898:	7183      	strb	r3, [r0, #6]
   3489a:	71c3      	strb	r3, [r0, #7]
   3489c:	7243      	strb	r3, [r0, #9]
   3489e:	7283      	strb	r3, [r0, #10]
   348a0:	72c3      	strb	r3, [r0, #11]
   348a2:	7207      	strb	r7, [r0, #8]
   348a4:	8032      	strh	r2, [r6, #0]
   348a6:	6023      	str	r3, [r4, #0]
   348a8:	f7fc ff6a 	bl	31780 <rpc_dfu_client_request_send>
   348ac:	b9b8      	cbnz	r0, 348de <mfu_interface_setopt+0x96>
   348ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   348b2:	ad02      	add	r5, sp, #8
   348b4:	4e2b      	ldr	r6, [pc, #172]	; (34964 <mfu_interface_setopt+0x11c>)
   348b6:	f845 3d04 	str.w	r3, [r5, #-4]!
   348ba:	e005      	b.n	348c8 <mfu_interface_setopt+0x80>
   348bc:	4629      	mov	r1, r5
   348be:	4630      	mov	r0, r6
   348c0:	f7f4 ff82 	bl	297c8 <bsd_os_timedwait>
   348c4:	2800      	cmp	r0, #0
   348c6:	d131      	bne.n	3492c <mfu_interface_setopt+0xe4>
   348c8:	6820      	ldr	r0, [r4, #0]
   348ca:	2800      	cmp	r0, #0
   348cc:	d0f6      	beq.n	348bc <mfu_interface_setopt+0x74>
   348ce:	6904      	ldr	r4, [r0, #16]
   348d0:	f7fc ff6a 	bl	317a8 <rpc_dfu_client_message_free>
   348d4:	2c00      	cmp	r4, #0
   348d6:	d13c      	bne.n	34952 <mfu_interface_setopt+0x10a>
   348d8:	4620      	mov	r0, r4
   348da:	b003      	add	sp, #12
   348dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   348de:	9800      	ldr	r0, [sp, #0]
   348e0:	6803      	ldr	r3, [r0, #0]
   348e2:	b11b      	cbz	r3, 348ec <mfu_interface_setopt+0xa4>
   348e4:	4618      	mov	r0, r3
   348e6:	f7fc ff67 	bl	317b8 <rpc_dfu_client_data_free>
   348ea:	9800      	ldr	r0, [sp, #0]
   348ec:	f7fc ff5c 	bl	317a8 <rpc_dfu_client_message_free>
   348f0:	200c      	movs	r0, #12
   348f2:	f7f5 f821 	bl	29938 <bsd_os_errno_set>
   348f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   348fa:	b003      	add	sp, #12
   348fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   348fe:	2405      	movs	r4, #5
   34900:	4625      	mov	r5, r4
   34902:	e7b5      	b.n	34870 <mfu_interface_setopt+0x28>
   34904:	2408      	movs	r4, #8
   34906:	4625      	mov	r5, r4
   34908:	e7b2      	b.n	34870 <mfu_interface_setopt+0x28>
   3490a:	b1b3      	cbz	r3, 3493a <mfu_interface_setopt+0xf2>
   3490c:	9a08      	ldr	r2, [sp, #32]
   3490e:	2a04      	cmp	r2, #4
   34910:	d113      	bne.n	3493a <mfu_interface_setopt+0xf2>
   34912:	2000      	movs	r0, #0
   34914:	681a      	ldr	r2, [r3, #0]
   34916:	4b16      	ldr	r3, [pc, #88]	; (34970 <mfu_interface_setopt+0x128>)
   34918:	601a      	str	r2, [r3, #0]
   3491a:	b003      	add	sp, #12
   3491c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3491e:	202a      	movs	r0, #42	; 0x2a
   34920:	f7f5 f80a 	bl	29938 <bsd_os_errno_set>
   34924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34928:	b003      	add	sp, #12
   3492a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3492c:	203c      	movs	r0, #60	; 0x3c
   3492e:	f7f5 f803 	bl	29938 <bsd_os_errno_set>
   34932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34936:	b003      	add	sp, #12
   34938:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3493a:	2016      	movs	r0, #22
   3493c:	f7f4 fffc 	bl	29938 <bsd_os_errno_set>
   34940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34944:	e7c9      	b.n	348da <mfu_interface_setopt+0x92>
   34946:	2001      	movs	r0, #1
   34948:	f7f4 fff6 	bl	29938 <bsd_os_errno_set>
   3494c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34950:	e7c3      	b.n	348da <mfu_interface_setopt+0x92>
   34952:	4b08      	ldr	r3, [pc, #32]	; (34974 <mfu_interface_setopt+0x12c>)
   34954:	2008      	movs	r0, #8
   34956:	601c      	str	r4, [r3, #0]
   34958:	f7f4 ffee 	bl	29938 <bsd_os_errno_set>
   3495c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34960:	e7bb      	b.n	348da <mfu_interface_setopt+0x92>
   34962:	bf00      	nop
   34964:	20024070 	.word	0x20024070
   34968:	2002894e 	.word	0x2002894e
   3496c:	2002407c 	.word	0x2002407c
   34970:	20024078 	.word	0x20024078
   34974:	20024074 	.word	0x20024074

00034978 <mfu_interface_getopt>:
   34978:	f240 2003 	movw	r0, #515	; 0x203
   3497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34980:	4281      	cmp	r1, r0
   34982:	b082      	sub	sp, #8
   34984:	9e08      	ldr	r6, [sp, #32]
   34986:	f040 80ae 	bne.w	34ae6 <mfu_interface_getopt+0x16e>
   3498a:	461d      	mov	r5, r3
   3498c:	2b00      	cmp	r3, #0
   3498e:	f000 80aa 	beq.w	34ae6 <mfu_interface_getopt+0x16e>
   34992:	2e00      	cmp	r6, #0
   34994:	f000 80a7 	beq.w	34ae6 <mfu_interface_getopt+0x16e>
   34998:	4b5e      	ldr	r3, [pc, #376]	; (34b14 <mfu_interface_getopt+0x19c>)
   3499a:	681b      	ldr	r3, [r3, #0]
   3499c:	3b02      	subs	r3, #2
   3499e:	2b01      	cmp	r3, #1
   349a0:	f200 80a7 	bhi.w	34af2 <mfu_interface_getopt+0x17a>
   349a4:	3a01      	subs	r2, #1
   349a6:	2a13      	cmp	r2, #19
   349a8:	d879      	bhi.n	34a9e <mfu_interface_getopt+0x126>
   349aa:	e8df f002 	tbb	[pc, r2]
   349ae:	5f17      	.short	0x5f17
   349b0:	78787878 	.word	0x78787878
   349b4:	78787872 	.word	0x78787872
   349b8:	78787878 	.word	0x78787878
   349bc:	78787878 	.word	0x78787878
   349c0:	0a78      	.short	0x0a78
   349c2:	6833      	ldr	r3, [r6, #0]
   349c4:	2b04      	cmp	r3, #4
   349c6:	f040 808e 	bne.w	34ae6 <mfu_interface_getopt+0x16e>
   349ca:	2200      	movs	r2, #0
   349cc:	4610      	mov	r0, r2
   349ce:	4b52      	ldr	r3, [pc, #328]	; (34b18 <mfu_interface_getopt+0x1a0>)
   349d0:	6819      	ldr	r1, [r3, #0]
   349d2:	601a      	str	r2, [r3, #0]
   349d4:	6029      	str	r1, [r5, #0]
   349d6:	b002      	add	sp, #8
   349d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   349dc:	6833      	ldr	r3, [r6, #0]
   349de:	2b24      	cmp	r3, #36	; 0x24
   349e0:	f040 8081 	bne.w	34ae6 <mfu_interface_getopt+0x16e>
   349e4:	2401      	movs	r4, #1
   349e6:	46a0      	mov	r8, r4
   349e8:	2100      	movs	r1, #0
   349ea:	4668      	mov	r0, sp
   349ec:	f7fc feb4 	bl	31758 <rpc_dfu_client_request_alloc>
   349f0:	2800      	cmp	r0, #0
   349f2:	d146      	bne.n	34a82 <mfu_interface_getopt+0x10a>
   349f4:	4949      	ldr	r1, [pc, #292]	; (34b1c <mfu_interface_getopt+0x1a4>)
   349f6:	9b00      	ldr	r3, [sp, #0]
   349f8:	880a      	ldrh	r2, [r1, #0]
   349fa:	f1b8 0f03 	cmp.w	r8, #3
   349fe:	f102 0201 	add.w	r2, r2, #1
   34a02:	b292      	uxth	r2, r2
   34a04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   34a08:	7118      	strb	r0, [r3, #4]
   34a0a:	800a      	strh	r2, [r1, #0]
   34a0c:	60dc      	str	r4, [r3, #12]
   34a0e:	7158      	strb	r0, [r3, #5]
   34a10:	7198      	strb	r0, [r3, #6]
   34a12:	71d8      	strb	r0, [r3, #7]
   34a14:	d04b      	beq.n	34aae <mfu_interface_getopt+0x136>
   34a16:	2104      	movs	r1, #4
   34a18:	2200      	movs	r2, #0
   34a1a:	4f41      	ldr	r7, [pc, #260]	; (34b20 <mfu_interface_getopt+0x1a8>)
   34a1c:	6099      	str	r1, [r3, #8]
   34a1e:	4618      	mov	r0, r3
   34a20:	4641      	mov	r1, r8
   34a22:	603a      	str	r2, [r7, #0]
   34a24:	f7fc feac 	bl	31780 <rpc_dfu_client_request_send>
   34a28:	2800      	cmp	r0, #0
   34a2a:	d14d      	bne.n	34ac8 <mfu_interface_getopt+0x150>
   34a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   34a30:	ac02      	add	r4, sp, #8
   34a32:	f844 3d04 	str.w	r3, [r4, #-4]!
   34a36:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 34b14 <mfu_interface_getopt+0x19c>
   34a3a:	e005      	b.n	34a48 <mfu_interface_getopt+0xd0>
   34a3c:	4621      	mov	r1, r4
   34a3e:	4640      	mov	r0, r8
   34a40:	f7f4 fec2 	bl	297c8 <bsd_os_timedwait>
   34a44:	2800      	cmp	r0, #0
   34a46:	d137      	bne.n	34ab8 <mfu_interface_getopt+0x140>
   34a48:	6839      	ldr	r1, [r7, #0]
   34a4a:	2900      	cmp	r1, #0
   34a4c:	d0f6      	beq.n	34a3c <mfu_interface_getopt+0xc4>
   34a4e:	690c      	ldr	r4, [r1, #16]
   34a50:	2c00      	cmp	r4, #0
   34a52:	d154      	bne.n	34afe <mfu_interface_getopt+0x186>
   34a54:	6832      	ldr	r2, [r6, #0]
   34a56:	3114      	adds	r1, #20
   34a58:	4628      	mov	r0, r5
   34a5a:	f006 fcaa 	bl	3b3b2 <memcpy>
   34a5e:	6838      	ldr	r0, [r7, #0]
   34a60:	f7fc fea2 	bl	317a8 <rpc_dfu_client_message_free>
   34a64:	4620      	mov	r0, r4
   34a66:	b002      	add	sp, #8
   34a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34a6c:	6833      	ldr	r3, [r6, #0]
   34a6e:	2b04      	cmp	r3, #4
   34a70:	d139      	bne.n	34ae6 <mfu_interface_getopt+0x16e>
   34a72:	2402      	movs	r4, #2
   34a74:	2100      	movs	r1, #0
   34a76:	4668      	mov	r0, sp
   34a78:	46a0      	mov	r8, r4
   34a7a:	f7fc fe6d 	bl	31758 <rpc_dfu_client_request_alloc>
   34a7e:	2800      	cmp	r0, #0
   34a80:	d0b8      	beq.n	349f4 <mfu_interface_getopt+0x7c>
   34a82:	200c      	movs	r0, #12
   34a84:	f7f4 ff58 	bl	29938 <bsd_os_errno_set>
   34a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34a8c:	b002      	add	sp, #8
   34a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34a92:	6833      	ldr	r3, [r6, #0]
   34a94:	2b04      	cmp	r3, #4
   34a96:	d126      	bne.n	34ae6 <mfu_interface_getopt+0x16e>
   34a98:	2409      	movs	r4, #9
   34a9a:	46a0      	mov	r8, r4
   34a9c:	e7a4      	b.n	349e8 <mfu_interface_getopt+0x70>
   34a9e:	202a      	movs	r0, #42	; 0x2a
   34aa0:	f7f4 ff4a 	bl	29938 <bsd_os_errno_set>
   34aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34aa8:	b002      	add	sp, #8
   34aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34aae:	4a1d      	ldr	r2, [pc, #116]	; (34b24 <mfu_interface_getopt+0x1ac>)
   34ab0:	2108      	movs	r1, #8
   34ab2:	6812      	ldr	r2, [r2, #0]
   34ab4:	611a      	str	r2, [r3, #16]
   34ab6:	e7af      	b.n	34a18 <mfu_interface_getopt+0xa0>
   34ab8:	203c      	movs	r0, #60	; 0x3c
   34aba:	f7f4 ff3d 	bl	29938 <bsd_os_errno_set>
   34abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34ac2:	b002      	add	sp, #8
   34ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34ac8:	9800      	ldr	r0, [sp, #0]
   34aca:	6803      	ldr	r3, [r0, #0]
   34acc:	b11b      	cbz	r3, 34ad6 <mfu_interface_getopt+0x15e>
   34ace:	4618      	mov	r0, r3
   34ad0:	f7fc fe72 	bl	317b8 <rpc_dfu_client_data_free>
   34ad4:	9800      	ldr	r0, [sp, #0]
   34ad6:	f7fc fe67 	bl	317a8 <rpc_dfu_client_message_free>
   34ada:	200c      	movs	r0, #12
   34adc:	f7f4 ff2c 	bl	29938 <bsd_os_errno_set>
   34ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34ae4:	e7d2      	b.n	34a8c <mfu_interface_getopt+0x114>
   34ae6:	2016      	movs	r0, #22
   34ae8:	f7f4 ff26 	bl	29938 <bsd_os_errno_set>
   34aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34af0:	e771      	b.n	349d6 <mfu_interface_getopt+0x5e>
   34af2:	2001      	movs	r0, #1
   34af4:	f7f4 ff20 	bl	29938 <bsd_os_errno_set>
   34af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34afc:	e76b      	b.n	349d6 <mfu_interface_getopt+0x5e>
   34afe:	4b06      	ldr	r3, [pc, #24]	; (34b18 <mfu_interface_getopt+0x1a0>)
   34b00:	2008      	movs	r0, #8
   34b02:	601c      	str	r4, [r3, #0]
   34b04:	f7f4 ff18 	bl	29938 <bsd_os_errno_set>
   34b08:	6838      	ldr	r0, [r7, #0]
   34b0a:	f7fc fe4d 	bl	317a8 <rpc_dfu_client_message_free>
   34b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34b12:	e760      	b.n	349d6 <mfu_interface_getopt+0x5e>
   34b14:	20024070 	.word	0x20024070
   34b18:	20024074 	.word	0x20024074
   34b1c:	2002894e 	.word	0x2002894e
   34b20:	2002407c 	.word	0x2002407c
   34b24:	20024078 	.word	0x20024078

00034b28 <interface_init>:
   34b28:	b508      	push	{r3, lr}
   34b2a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   34b2e:	2100      	movs	r1, #0
   34b30:	4802      	ldr	r0, [pc, #8]	; (34b3c <interface_init+0x14>)
   34b32:	f006 fc5e 	bl	3b3f2 <memset>
   34b36:	2000      	movs	r0, #0
   34b38:	bd08      	pop	{r3, pc}
   34b3a:	bf00      	nop
   34b3c:	2002cba0 	.word	0x2002cba0

00034b40 <interface_socket_allocate>:
   34b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34b42:	4b30      	ldr	r3, [pc, #192]	; (34c04 <interface_socket_allocate+0xc4>)
   34b44:	4606      	mov	r6, r0
   34b46:	681d      	ldr	r5, [r3, #0]
   34b48:	4608      	mov	r0, r1
   34b4a:	b31d      	cbz	r5, 34b94 <interface_socket_allocate+0x54>
   34b4c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   34b4e:	2c00      	cmp	r4, #0
   34b50:	d04a      	beq.n	34be8 <interface_socket_allocate+0xa8>
   34b52:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   34b54:	2c00      	cmp	r4, #0
   34b56:	d049      	beq.n	34bec <interface_socket_allocate+0xac>
   34b58:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   34b5a:	2c00      	cmp	r4, #0
   34b5c:	d048      	beq.n	34bf0 <interface_socket_allocate+0xb0>
   34b5e:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   34b62:	2900      	cmp	r1, #0
   34b64:	d046      	beq.n	34bf4 <interface_socket_allocate+0xb4>
   34b66:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   34b6a:	b191      	cbz	r1, 34b92 <interface_socket_allocate+0x52>
   34b6c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   34b70:	2900      	cmp	r1, #0
   34b72:	d043      	beq.n	34bfc <interface_socket_allocate+0xbc>
   34b74:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   34b78:	2900      	cmp	r1, #0
   34b7a:	d041      	beq.n	34c00 <interface_socket_allocate+0xc0>
   34b7c:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   34b80:	2900      	cmp	r1, #0
   34b82:	d039      	beq.n	34bf8 <interface_socket_allocate+0xb8>
   34b84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   34b88:	2069      	movs	r0, #105	; 0x69
   34b8a:	f7f4 fed5 	bl	29938 <bsd_os_errno_set>
   34b8e:	4628      	mov	r0, r5
   34b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34b92:	2505      	movs	r5, #5
   34b94:	f04f 0c01 	mov.w	ip, #1
   34b98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   34b9c:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   34ba0:	00e4      	lsls	r4, r4, #3
   34ba2:	f843 c004 	str.w	ip, [r3, r4]
   34ba6:	441c      	add	r4, r3
   34ba8:	4611      	mov	r1, r2
   34baa:	61a7      	str	r7, [r4, #24]
   34bac:	4622      	mov	r2, r4
   34bae:	f7fe feeb 	bl	33988 <packet_handler_create>
   34bb2:	4603      	mov	r3, r0
   34bb4:	61e0      	str	r0, [r4, #28]
   34bb6:	b158      	cbz	r0, 34bd0 <interface_socket_allocate+0x90>
   34bb8:	681b      	ldr	r3, [r3, #0]
   34bba:	681b      	ldr	r3, [r3, #0]
   34bbc:	4798      	blx	r3
   34bbe:	b910      	cbnz	r0, 34bc6 <interface_socket_allocate+0x86>
   34bc0:	6034      	str	r4, [r6, #0]
   34bc2:	4628      	mov	r0, r5
   34bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34bc6:	69e0      	ldr	r0, [r4, #28]
   34bc8:	f7fe fefe 	bl	339c8 <packet_handler_delete>
   34bcc:	2300      	movs	r3, #0
   34bce:	61e3      	str	r3, [r4, #28]
   34bd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   34bd4:	2228      	movs	r2, #40	; 0x28
   34bd6:	2100      	movs	r1, #0
   34bd8:	4620      	mov	r0, r4
   34bda:	f006 fc0a 	bl	3b3f2 <memset>
   34bde:	200c      	movs	r0, #12
   34be0:	f7f4 feaa 	bl	29938 <bsd_os_errno_set>
   34be4:	4628      	mov	r0, r5
   34be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34be8:	2501      	movs	r5, #1
   34bea:	e7d3      	b.n	34b94 <interface_socket_allocate+0x54>
   34bec:	2502      	movs	r5, #2
   34bee:	e7d1      	b.n	34b94 <interface_socket_allocate+0x54>
   34bf0:	2503      	movs	r5, #3
   34bf2:	e7cf      	b.n	34b94 <interface_socket_allocate+0x54>
   34bf4:	2504      	movs	r5, #4
   34bf6:	e7cd      	b.n	34b94 <interface_socket_allocate+0x54>
   34bf8:	2508      	movs	r5, #8
   34bfa:	e7cb      	b.n	34b94 <interface_socket_allocate+0x54>
   34bfc:	2506      	movs	r5, #6
   34bfe:	e7c9      	b.n	34b94 <interface_socket_allocate+0x54>
   34c00:	2507      	movs	r5, #7
   34c02:	e7c7      	b.n	34b94 <interface_socket_allocate+0x54>
   34c04:	2002cba0 	.word	0x2002cba0

00034c08 <interface_socket_free>:
   34c08:	2808      	cmp	r0, #8
   34c0a:	d900      	bls.n	34c0e <interface_socket_free+0x6>
   34c0c:	4770      	bx	lr
   34c0e:	b510      	push	{r4, lr}
   34c10:	4c07      	ldr	r4, [pc, #28]	; (34c30 <interface_socket_free+0x28>)
   34c12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   34c16:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   34c1a:	69e0      	ldr	r0, [r4, #28]
   34c1c:	b108      	cbz	r0, 34c22 <interface_socket_free+0x1a>
   34c1e:	f7fe fed3 	bl	339c8 <packet_handler_delete>
   34c22:	4620      	mov	r0, r4
   34c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34c28:	2228      	movs	r2, #40	; 0x28
   34c2a:	2100      	movs	r1, #0
   34c2c:	f006 bbe1 	b.w	3b3f2 <memset>
   34c30:	2002cba0 	.word	0x2002cba0

00034c34 <interface_socket_packet_handler_update>:
   34c34:	2808      	cmp	r0, #8
   34c36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   34c3a:	d81e      	bhi.n	34c7a <interface_socket_packet_handler_update+0x46>
   34c3c:	ea4f 0880 	mov.w	r8, r0, lsl #2
   34c40:	4e17      	ldr	r6, [pc, #92]	; (34ca0 <interface_socket_packet_handler_update+0x6c>)
   34c42:	eb08 0300 	add.w	r3, r8, r0
   34c46:	00db      	lsls	r3, r3, #3
   34c48:	58f4      	ldr	r4, [r6, r3]
   34c4a:	18f5      	adds	r5, r6, r3
   34c4c:	b1ac      	cbz	r4, 34c7a <interface_socket_packet_handler_update+0x46>
   34c4e:	460b      	mov	r3, r1
   34c50:	4604      	mov	r4, r0
   34c52:	4611      	mov	r1, r2
   34c54:	4618      	mov	r0, r3
   34c56:	462a      	mov	r2, r5
   34c58:	f8d5 901c 	ldr.w	r9, [r5, #28]
   34c5c:	f7fe fe94 	bl	33988 <packet_handler_create>
   34c60:	61e8      	str	r0, [r5, #28]
   34c62:	b1d0      	cbz	r0, 34c9a <interface_socket_packet_handler_update+0x66>
   34c64:	6803      	ldr	r3, [r0, #0]
   34c66:	681b      	ldr	r3, [r3, #0]
   34c68:	4798      	blx	r3
   34c6a:	4607      	mov	r7, r0
   34c6c:	b948      	cbnz	r0, 34c82 <interface_socket_packet_handler_update+0x4e>
   34c6e:	4648      	mov	r0, r9
   34c70:	f7fe feaa 	bl	339c8 <packet_handler_delete>
   34c74:	4638      	mov	r0, r7
   34c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   34c7a:	2705      	movs	r7, #5
   34c7c:	4638      	mov	r0, r7
   34c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   34c82:	69e8      	ldr	r0, [r5, #28]
   34c84:	f7fe fea0 	bl	339c8 <packet_handler_delete>
   34c88:	eb08 0004 	add.w	r0, r8, r4
   34c8c:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   34c90:	f8c6 901c 	str.w	r9, [r6, #28]
   34c94:	4638      	mov	r0, r7
   34c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   34c9a:	2704      	movs	r7, #4
   34c9c:	e7f4      	b.n	34c88 <interface_socket_packet_handler_update+0x54>
   34c9e:	bf00      	nop
   34ca0:	2002cba0 	.word	0x2002cba0

00034ca4 <interface_socket_wait>:
   34ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34ca8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   34cac:	4c0d      	ldr	r4, [pc, #52]	; (34ce4 <interface_socket_wait+0x40>)
   34cae:	00c0      	lsls	r0, r0, #3
   34cb0:	5825      	ldr	r5, [r4, r0]
   34cb2:	4404      	add	r4, r0
   34cb4:	4015      	ands	r5, r2
   34cb6:	428d      	cmp	r5, r1
   34cb8:	d011      	beq.n	34cde <interface_socket_wait+0x3a>
   34cba:	6860      	ldr	r0, [r4, #4]
   34cbc:	b978      	cbnz	r0, 34cde <interface_socket_wait+0x3a>
   34cbe:	4698      	mov	r8, r3
   34cc0:	460f      	mov	r7, r1
   34cc2:	4616      	mov	r6, r2
   34cc4:	4625      	mov	r5, r4
   34cc6:	e006      	b.n	34cd6 <interface_socket_wait+0x32>
   34cc8:	686b      	ldr	r3, [r5, #4]
   34cca:	b943      	cbnz	r3, 34cde <interface_socket_wait+0x3a>
   34ccc:	4641      	mov	r1, r8
   34cce:	4620      	mov	r0, r4
   34cd0:	f7f4 fd7a 	bl	297c8 <bsd_os_timedwait>
   34cd4:	b920      	cbnz	r0, 34ce0 <interface_socket_wait+0x3c>
   34cd6:	6828      	ldr	r0, [r5, #0]
   34cd8:	4030      	ands	r0, r6
   34cda:	42b8      	cmp	r0, r7
   34cdc:	d1f4      	bne.n	34cc8 <interface_socket_wait+0x24>
   34cde:	2000      	movs	r0, #0
   34ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34ce4:	2002cba0 	.word	0x2002cba0

00034ce8 <interface_from_internal_id_search>:
   34ce8:	4b27      	ldr	r3, [pc, #156]	; (34d88 <interface_from_internal_id_search+0xa0>)
   34cea:	681a      	ldr	r2, [r3, #0]
   34cec:	b112      	cbz	r2, 34cf4 <interface_from_internal_id_search+0xc>
   34cee:	699a      	ldr	r2, [r3, #24]
   34cf0:	4282      	cmp	r2, r0
   34cf2:	d039      	beq.n	34d68 <interface_from_internal_id_search+0x80>
   34cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   34cf6:	b112      	cbz	r2, 34cfe <interface_from_internal_id_search+0x16>
   34cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   34cfa:	4282      	cmp	r2, r0
   34cfc:	d036      	beq.n	34d6c <interface_from_internal_id_search+0x84>
   34cfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   34d00:	b112      	cbz	r2, 34d08 <interface_from_internal_id_search+0x20>
   34d02:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   34d04:	4282      	cmp	r2, r0
   34d06:	d033      	beq.n	34d70 <interface_from_internal_id_search+0x88>
   34d08:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   34d0a:	b11a      	cbz	r2, 34d14 <interface_from_internal_id_search+0x2c>
   34d0c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   34d10:	4282      	cmp	r2, r0
   34d12:	d02f      	beq.n	34d74 <interface_from_internal_id_search+0x8c>
   34d14:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   34d18:	b11a      	cbz	r2, 34d22 <interface_from_internal_id_search+0x3a>
   34d1a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   34d1e:	4282      	cmp	r2, r0
   34d20:	d02a      	beq.n	34d78 <interface_from_internal_id_search+0x90>
   34d22:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   34d26:	b11a      	cbz	r2, 34d30 <interface_from_internal_id_search+0x48>
   34d28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   34d2c:	4282      	cmp	r2, r0
   34d2e:	d025      	beq.n	34d7c <interface_from_internal_id_search+0x94>
   34d30:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   34d34:	b11a      	cbz	r2, 34d3e <interface_from_internal_id_search+0x56>
   34d36:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   34d3a:	4282      	cmp	r2, r0
   34d3c:	d020      	beq.n	34d80 <interface_from_internal_id_search+0x98>
   34d3e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   34d42:	b11a      	cbz	r2, 34d4c <interface_from_internal_id_search+0x64>
   34d44:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   34d48:	4282      	cmp	r2, r0
   34d4a:	d01b      	beq.n	34d84 <interface_from_internal_id_search+0x9c>
   34d4c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   34d50:	b13a      	cbz	r2, 34d62 <interface_from_internal_id_search+0x7a>
   34d52:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   34d56:	4283      	cmp	r3, r0
   34d58:	bf14      	ite	ne
   34d5a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   34d5e:	2008      	moveq	r0, #8
   34d60:	4770      	bx	lr
   34d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34d66:	4770      	bx	lr
   34d68:	2000      	movs	r0, #0
   34d6a:	4770      	bx	lr
   34d6c:	2001      	movs	r0, #1
   34d6e:	4770      	bx	lr
   34d70:	2002      	movs	r0, #2
   34d72:	4770      	bx	lr
   34d74:	2003      	movs	r0, #3
   34d76:	4770      	bx	lr
   34d78:	2004      	movs	r0, #4
   34d7a:	4770      	bx	lr
   34d7c:	2005      	movs	r0, #5
   34d7e:	4770      	bx	lr
   34d80:	2006      	movs	r0, #6
   34d82:	4770      	bx	lr
   34d84:	2007      	movs	r0, #7
   34d86:	4770      	bx	lr
   34d88:	2002cba0 	.word	0x2002cba0

00034d8c <interface_socket_from_handle_get>:
   34d8c:	2808      	cmp	r0, #8
   34d8e:	d807      	bhi.n	34da0 <interface_socket_from_handle_get+0x14>
   34d90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   34d94:	4b03      	ldr	r3, [pc, #12]	; (34da4 <interface_socket_from_handle_get+0x18>)
   34d96:	00c0      	lsls	r0, r0, #3
   34d98:	581a      	ldr	r2, [r3, r0]
   34d9a:	b10a      	cbz	r2, 34da0 <interface_socket_from_handle_get+0x14>
   34d9c:	4418      	add	r0, r3
   34d9e:	4770      	bx	lr
   34da0:	2000      	movs	r0, #0
   34da2:	4770      	bx	lr
   34da4:	2002cba0 	.word	0x2002cba0

00034da8 <interface_socket_event_get>:
   34da8:	b119      	cbz	r1, 34db2 <interface_socket_event_get+0xa>
   34daa:	2808      	cmp	r0, #8
   34dac:	d902      	bls.n	34db4 <interface_socket_event_get+0xc>
   34dae:	2310      	movs	r3, #16
   34db0:	600b      	str	r3, [r1, #0]
   34db2:	4770      	bx	lr
   34db4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   34db8:	4b07      	ldr	r3, [pc, #28]	; (34dd8 <interface_socket_event_get+0x30>)
   34dba:	00c0      	lsls	r0, r0, #3
   34dbc:	581a      	ldr	r2, [r3, r0]
   34dbe:	2a00      	cmp	r2, #0
   34dc0:	d0f5      	beq.n	34dae <interface_socket_event_get+0x6>
   34dc2:	581b      	ldr	r3, [r3, r0]
   34dc4:	0c1b      	lsrs	r3, r3, #16
   34dc6:	f003 020a 	and.w	r2, r3, #10
   34dca:	2a0a      	cmp	r2, #10
   34dcc:	bf14      	ite	ne
   34dce:	f003 030f 	andne.w	r3, r3, #15
   34dd2:	f003 030d 	andeq.w	r3, r3, #13
   34dd6:	e7eb      	b.n	34db0 <interface_socket_event_get+0x8>
   34dd8:	2002cba0 	.word	0x2002cba0

00034ddc <interface_socket_setopt>:
   34ddc:	2808      	cmp	r0, #8
   34dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34de0:	d82c      	bhi.n	34e3c <interface_socket_setopt+0x60>
   34de2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   34de6:	4e1e      	ldr	r6, [pc, #120]	; (34e60 <interface_socket_setopt+0x84>)
   34de8:	00c0      	lsls	r0, r0, #3
   34dea:	5834      	ldr	r4, [r6, r0]
   34dec:	b334      	cbz	r4, 34e3c <interface_socket_setopt+0x60>
   34dee:	2901      	cmp	r1, #1
   34df0:	d11e      	bne.n	34e30 <interface_socket_setopt+0x54>
   34df2:	f1a2 0114 	sub.w	r1, r2, #20
   34df6:	2901      	cmp	r1, #1
   34df8:	d81a      	bhi.n	34e30 <interface_socket_setopt+0x54>
   34dfa:	9906      	ldr	r1, [sp, #24]
   34dfc:	2908      	cmp	r1, #8
   34dfe:	d123      	bne.n	34e48 <interface_socket_setopt+0x6c>
   34e00:	b313      	cbz	r3, 34e48 <interface_socket_setopt+0x6c>
   34e02:	6859      	ldr	r1, [r3, #4]
   34e04:	4c17      	ldr	r4, [pc, #92]	; (34e64 <interface_socket_setopt+0x88>)
   34e06:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   34e0a:	fba4 4101 	umull	r4, r1, r4, r1
   34e0e:	0989      	lsrs	r1, r1, #6
   34e10:	460c      	mov	r4, r1
   34e12:	2500      	movs	r5, #0
   34e14:	681b      	ldr	r3, [r3, #0]
   34e16:	fbe7 4503 	umlal	r4, r5, r7, r3
   34e1a:	2d01      	cmp	r5, #1
   34e1c:	bf08      	it	eq
   34e1e:	2c00      	cmpeq	r4, #0
   34e20:	d218      	bcs.n	34e54 <interface_socket_setopt+0x78>
   34e22:	4430      	add	r0, r6
   34e24:	2a14      	cmp	r2, #20
   34e26:	bf0c      	ite	eq
   34e28:	6204      	streq	r4, [r0, #32]
   34e2a:	6244      	strne	r4, [r0, #36]	; 0x24
   34e2c:	2000      	movs	r0, #0
   34e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34e30:	202a      	movs	r0, #42	; 0x2a
   34e32:	f7f4 fd81 	bl	29938 <bsd_os_errno_set>
   34e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34e3c:	2009      	movs	r0, #9
   34e3e:	f7f4 fd7b 	bl	29938 <bsd_os_errno_set>
   34e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34e48:	2016      	movs	r0, #22
   34e4a:	f7f4 fd75 	bl	29938 <bsd_os_errno_set>
   34e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34e54:	2025      	movs	r0, #37	; 0x25
   34e56:	f7f4 fd6f 	bl	29938 <bsd_os_errno_set>
   34e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34e60:	2002cba0 	.word	0x2002cba0
   34e64:	10624dd3 	.word	0x10624dd3

00034e68 <interface_socket_getopt>:
   34e68:	b570      	push	{r4, r5, r6, lr}
   34e6a:	2808      	cmp	r0, #8
   34e6c:	9d04      	ldr	r5, [sp, #16]
   34e6e:	d835      	bhi.n	34edc <interface_socket_getopt+0x74>
   34e70:	4c20      	ldr	r4, [pc, #128]	; (34ef4 <interface_socket_getopt+0x8c>)
   34e72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   34e76:	00c0      	lsls	r0, r0, #3
   34e78:	5826      	ldr	r6, [r4, r0]
   34e7a:	4404      	add	r4, r0
   34e7c:	b376      	cbz	r6, 34edc <interface_socket_getopt+0x74>
   34e7e:	2901      	cmp	r1, #1
   34e80:	d132      	bne.n	34ee8 <interface_socket_getopt+0x80>
   34e82:	b32b      	cbz	r3, 34ed0 <interface_socket_getopt+0x68>
   34e84:	b325      	cbz	r5, 34ed0 <interface_socket_getopt+0x68>
   34e86:	2a04      	cmp	r2, #4
   34e88:	d019      	beq.n	34ebe <interface_socket_getopt+0x56>
   34e8a:	f1a2 0114 	sub.w	r1, r2, #20
   34e8e:	2901      	cmp	r1, #1
   34e90:	d82a      	bhi.n	34ee8 <interface_socket_getopt+0x80>
   34e92:	6829      	ldr	r1, [r5, #0]
   34e94:	2908      	cmp	r1, #8
   34e96:	d11b      	bne.n	34ed0 <interface_socket_getopt+0x68>
   34e98:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   34e9c:	2a14      	cmp	r2, #20
   34e9e:	bf18      	it	ne
   34ea0:	4601      	movne	r1, r0
   34ea2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   34ea6:	4a14      	ldr	r2, [pc, #80]	; (34ef8 <interface_socket_getopt+0x90>)
   34ea8:	2000      	movs	r0, #0
   34eaa:	fba2 5201 	umull	r5, r2, r2, r1
   34eae:	0992      	lsrs	r2, r2, #6
   34eb0:	fb04 1112 	mls	r1, r4, r2, r1
   34eb4:	fb04 f101 	mul.w	r1, r4, r1
   34eb8:	e9c3 2100 	strd	r2, r1, [r3]
   34ebc:	bd70      	pop	{r4, r5, r6, pc}
   34ebe:	682a      	ldr	r2, [r5, #0]
   34ec0:	2a04      	cmp	r2, #4
   34ec2:	d105      	bne.n	34ed0 <interface_socket_getopt+0x68>
   34ec4:	2200      	movs	r2, #0
   34ec6:	6861      	ldr	r1, [r4, #4]
   34ec8:	4610      	mov	r0, r2
   34eca:	6019      	str	r1, [r3, #0]
   34ecc:	6062      	str	r2, [r4, #4]
   34ece:	bd70      	pop	{r4, r5, r6, pc}
   34ed0:	2016      	movs	r0, #22
   34ed2:	f7f4 fd31 	bl	29938 <bsd_os_errno_set>
   34ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34eda:	bd70      	pop	{r4, r5, r6, pc}
   34edc:	2009      	movs	r0, #9
   34ede:	f7f4 fd2b 	bl	29938 <bsd_os_errno_set>
   34ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34ee6:	bd70      	pop	{r4, r5, r6, pc}
   34ee8:	202a      	movs	r0, #42	; 0x2a
   34eea:	f7f4 fd25 	bl	29938 <bsd_os_errno_set>
   34eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34ef2:	bd70      	pop	{r4, r5, r6, pc}
   34ef4:	2002cba0 	.word	0x2002cba0
   34ef8:	10624dd3 	.word	0x10624dd3

00034efc <interface_socket_fcntl>:
   34efc:	2808      	cmp	r0, #8
   34efe:	b510      	push	{r4, lr}
   34f00:	d826      	bhi.n	34f50 <interface_socket_fcntl+0x54>
   34f02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   34f06:	4c1b      	ldr	r4, [pc, #108]	; (34f74 <interface_socket_fcntl+0x78>)
   34f08:	00c3      	lsls	r3, r0, #3
   34f0a:	58e0      	ldr	r0, [r4, r3]
   34f0c:	b300      	cbz	r0, 34f50 <interface_socket_fcntl+0x54>
   34f0e:	2901      	cmp	r1, #1
   34f10:	d005      	beq.n	34f1e <interface_socket_fcntl+0x22>
   34f12:	2902      	cmp	r1, #2
   34f14:	d122      	bne.n	34f5c <interface_socket_fcntl+0x60>
   34f16:	58e0      	ldr	r0, [r4, r3]
   34f18:	f3c0 7000 	ubfx	r0, r0, #28, #1
   34f1c:	bd10      	pop	{r4, pc}
   34f1e:	07d2      	lsls	r2, r2, #31
   34f20:	d410      	bmi.n	34f44 <interface_socket_fcntl+0x48>
   34f22:	58e0      	ldr	r0, [r4, r3]
   34f24:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   34f28:	d11e      	bne.n	34f68 <interface_socket_fcntl+0x6c>
   34f2a:	58e2      	ldr	r2, [r4, r3]
   34f2c:	b292      	uxth	r2, r2
   34f2e:	2a0a      	cmp	r2, #10
   34f30:	d01a      	beq.n	34f68 <interface_socket_fcntl+0x6c>
   34f32:	58e2      	ldr	r2, [r4, r3]
   34f34:	b292      	uxth	r2, r2
   34f36:	2a0b      	cmp	r2, #11
   34f38:	d016      	beq.n	34f68 <interface_socket_fcntl+0x6c>
   34f3a:	58e2      	ldr	r2, [r4, r3]
   34f3c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   34f40:	50e2      	str	r2, [r4, r3]
   34f42:	bd10      	pop	{r4, pc}
   34f44:	58e2      	ldr	r2, [r4, r3]
   34f46:	2000      	movs	r0, #0
   34f48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   34f4c:	50e2      	str	r2, [r4, r3]
   34f4e:	bd10      	pop	{r4, pc}
   34f50:	2009      	movs	r0, #9
   34f52:	f7f4 fcf1 	bl	29938 <bsd_os_errno_set>
   34f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34f5a:	bd10      	pop	{r4, pc}
   34f5c:	2016      	movs	r0, #22
   34f5e:	f7f4 fceb 	bl	29938 <bsd_os_errno_set>
   34f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34f66:	bd10      	pop	{r4, pc}
   34f68:	2023      	movs	r0, #35	; 0x23
   34f6a:	f7f4 fce5 	bl	29938 <bsd_os_errno_set>
   34f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34f72:	bd10      	pop	{r4, pc}
   34f74:	2002cba0 	.word	0x2002cba0

00034f78 <at_client_evt_handler>:
   34f78:	b120      	cbz	r0, 34f84 <at_client_evt_handler+0xc>
   34f7a:	f850 1b08 	ldr.w	r1, [r0], #8
   34f7e:	0c09      	lsrs	r1, r1, #16
   34f80:	f7fc be10 	b.w	31ba4 <rpc_at_event_handler>
   34f84:	4770      	bx	lr
   34f86:	bf00      	nop

00034f88 <rpc_at_client_init>:
   34f88:	4801      	ldr	r0, [pc, #4]	; (34f90 <rpc_at_client_init+0x8>)
   34f8a:	f7fb bbc7 	b.w	3071c <rpc_client_register>
   34f8e:	bf00      	nop
   34f90:	0003cdf8 	.word	0x0003cdf8

00034f94 <rpc_at_client_request_alloc>:
   34f94:	b180      	cbz	r0, 34fb8 <rpc_at_client_request_alloc+0x24>
   34f96:	2300      	movs	r3, #0
   34f98:	b510      	push	{r4, lr}
   34f9a:	b082      	sub	sp, #8
   34f9c:	aa02      	add	r2, sp, #8
   34f9e:	4604      	mov	r4, r0
   34fa0:	f842 3d04 	str.w	r3, [r2, #-4]!
   34fa4:	2003      	movs	r0, #3
   34fa6:	f7fb fc33 	bl	30810 <rpc_message_alloc>
   34faa:	b918      	cbnz	r0, 34fb4 <rpc_at_client_request_alloc+0x20>
   34fac:	9b01      	ldr	r3, [sp, #4]
   34fae:	b10b      	cbz	r3, 34fb4 <rpc_at_client_request_alloc+0x20>
   34fb0:	3308      	adds	r3, #8
   34fb2:	6023      	str	r3, [r4, #0]
   34fb4:	b002      	add	sp, #8
   34fb6:	bd10      	pop	{r4, pc}
   34fb8:	200e      	movs	r0, #14
   34fba:	4770      	bx	lr

00034fbc <rpc_at_client_request_send>:
   34fbc:	b150      	cbz	r0, 34fd4 <rpc_at_client_request_send+0x18>
   34fbe:	4603      	mov	r3, r0
   34fc0:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   34fc4:	2003      	movs	r0, #3
   34fc6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   34fca:	f843 1d08 	str.w	r1, [r3, #-8]!
   34fce:	4619      	mov	r1, r3
   34fd0:	f7fb bc0e 	b.w	307f0 <rpc_message_send>
   34fd4:	200e      	movs	r0, #14
   34fd6:	4770      	bx	lr

00034fd8 <rpc_at_client_message_free>:
   34fd8:	b120      	cbz	r0, 34fe4 <rpc_at_client_message_free+0xc>
   34fda:	f1a0 0108 	sub.w	r1, r0, #8
   34fde:	2003      	movs	r0, #3
   34fe0:	f7fb bc42 	b.w	30868 <rpc_message_free>
   34fe4:	200e      	movs	r0, #14
   34fe6:	4770      	bx	lr

00034fe8 <rpc_at_client_data_free>:
   34fe8:	b118      	cbz	r0, 34ff2 <rpc_at_client_data_free+0xa>
   34fea:	4601      	mov	r1, r0
   34fec:	2003      	movs	r0, #3
   34fee:	f7fb bc47 	b.w	30880 <rpc_message_data_free>
   34ff2:	200e      	movs	r0, #14
   34ff4:	4770      	bx	lr
   34ff6:	bf00      	nop

00034ff8 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   34ff8:	4a07      	ldr	r2, [pc, #28]	; (35018 <SystemInit+0x20>)
   34ffa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   34ffe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   35002:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   35006:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3500a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   3500e:	4b03      	ldr	r3, [pc, #12]	; (3501c <SystemInit+0x24>)
   35010:	4a03      	ldr	r2, [pc, #12]	; (35020 <SystemInit+0x28>)
   35012:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   35014:	4770      	bx	lr
   35016:	bf00      	nop
   35018:	e000ed00 	.word	0xe000ed00
   3501c:	20020458 	.word	0x20020458
   35020:	03d09000 	.word	0x03d09000

00035024 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   35024:	4b04      	ldr	r3, [pc, #16]	; (35038 <nrfx_clock_init+0x14>)
   35026:	791a      	ldrb	r2, [r3, #4]
   35028:	b922      	cbnz	r2, 35034 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   3502a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   3502c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   3502e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   35030:	4802      	ldr	r0, [pc, #8]	; (3503c <nrfx_clock_init+0x18>)
   35032:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   35034:	4802      	ldr	r0, [pc, #8]	; (35040 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   35036:	4770      	bx	lr
   35038:	20024080 	.word	0x20024080
   3503c:	0bad0000 	.word	0x0bad0000
   35040:	0bad000c 	.word	0x0bad000c

00035044 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   35044:	b110      	cbz	r0, 3504c <nrfx_clock_start+0x8>
   35046:	2801      	cmp	r0, #1
   35048:	d01e      	beq.n	35088 <nrfx_clock_start+0x44>
   3504a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3504c:	4b13      	ldr	r3, [pc, #76]	; (3509c <nrfx_clock_start+0x58>)
   3504e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   35052:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   35056:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   3505a:	4619      	mov	r1, r3
   3505c:	d010      	beq.n	35080 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   3505e:	f002 0203 	and.w	r2, r2, #3
   35062:	2a02      	cmp	r2, #2
   35064:	d10c      	bne.n	35080 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   35066:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3506a:	2200      	movs	r2, #0
   3506c:	4b0c      	ldr	r3, [pc, #48]	; (350a0 <nrfx_clock_start+0x5c>)
   3506e:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   35070:	2202      	movs	r2, #2
   35072:	681b      	ldr	r3, [r3, #0]
   35074:	4b09      	ldr	r3, [pc, #36]	; (3509c <nrfx_clock_start+0x58>)
   35076:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3507a:	2201      	movs	r2, #1
   3507c:	609a      	str	r2, [r3, #8]
}
   3507e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   35080:	2301      	movs	r3, #1
   35082:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   35086:	e7f0      	b.n	3506a <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   35088:	2200      	movs	r2, #0
   3508a:	4b06      	ldr	r3, [pc, #24]	; (350a4 <nrfx_clock_start+0x60>)
   3508c:	601a      	str	r2, [r3, #0]
   3508e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   35090:	4b02      	ldr	r3, [pc, #8]	; (3509c <nrfx_clock_start+0x58>)
   35092:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   35096:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   35098:	4770      	bx	lr
   3509a:	bf00      	nop
   3509c:	40005000 	.word	0x40005000
   350a0:	40005104 	.word	0x40005104
   350a4:	40005100 	.word	0x40005100

000350a8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   350a8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   350aa:	b110      	cbz	r0, 350b2 <nrfx_clock_stop+0xa>
   350ac:	2801      	cmp	r0, #1
   350ae:	d016      	beq.n	350de <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   350b0:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   350b2:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   350b4:	2101      	movs	r1, #1
   350b6:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   350ba:	4c16      	ldr	r4, [pc, #88]	; (35114 <nrfx_clock_stop+0x6c>)
   350bc:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   350c0:	4a15      	ldr	r2, [pc, #84]	; (35118 <nrfx_clock_stop+0x70>)
   350c2:	6010      	str	r0, [r2, #0]
   350c4:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   350c6:	4a15      	ldr	r2, [pc, #84]	; (3511c <nrfx_clock_stop+0x74>)
   350c8:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   350ca:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   350ce:	03db      	lsls	r3, r3, #15
   350d0:	d5ee      	bpl.n	350b0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   350d2:	2001      	movs	r0, #1
   350d4:	f005 fc35 	bl	3a942 <nrfx_busy_wait>
   350d8:	3d01      	subs	r5, #1
   350da:	d1f6      	bne.n	350ca <nrfx_clock_stop+0x22>
   350dc:	e7e8      	b.n	350b0 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   350de:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   350e0:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   350e4:	4b0e      	ldr	r3, [pc, #56]	; (35120 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   350e6:	4c0b      	ldr	r4, [pc, #44]	; (35114 <nrfx_clock_stop+0x6c>)
   350e8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   350ec:	601a      	str	r2, [r3, #0]
   350ee:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   350f0:	4b0c      	ldr	r3, [pc, #48]	; (35124 <nrfx_clock_stop+0x7c>)
   350f2:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   350f4:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   350f8:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   350fc:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   35100:	03d2      	lsls	r2, r2, #15
   35102:	d5d5      	bpl.n	350b0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   35104:	2b00      	cmp	r3, #0
   35106:	d0d3      	beq.n	350b0 <nrfx_clock_stop+0x8>
   35108:	2001      	movs	r0, #1
   3510a:	f005 fc1a 	bl	3a942 <nrfx_busy_wait>
   3510e:	3d01      	subs	r5, #1
   35110:	d1f0      	bne.n	350f4 <nrfx_clock_stop+0x4c>
   35112:	e7cd      	b.n	350b0 <nrfx_clock_stop+0x8>
   35114:	40005000 	.word	0x40005000
   35118:	40005104 	.word	0x40005104
   3511c:	4000500c 	.word	0x4000500c
   35120:	40005100 	.word	0x40005100
   35124:	40005004 	.word	0x40005004

00035128 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   35128:	4b15      	ldr	r3, [pc, #84]	; (35180 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3512a:	b510      	push	{r4, lr}
   3512c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   3512e:	b14a      	cbz	r2, 35144 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   35130:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   35132:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   35134:	6018      	str	r0, [r3, #0]
   35136:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   35138:	4b12      	ldr	r3, [pc, #72]	; (35184 <nrfx_power_clock_irq_handler+0x5c>)
   3513a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   3513e:	4b12      	ldr	r3, [pc, #72]	; (35188 <nrfx_power_clock_irq_handler+0x60>)
   35140:	681b      	ldr	r3, [r3, #0]
   35142:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   35144:	4b11      	ldr	r3, [pc, #68]	; (3518c <nrfx_power_clock_irq_handler+0x64>)
   35146:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   35148:	b182      	cbz	r2, 3516c <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3514a:	2200      	movs	r2, #0
   3514c:	601a      	str	r2, [r3, #0]
   3514e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   35150:	4b0c      	ldr	r3, [pc, #48]	; (35184 <nrfx_power_clock_irq_handler+0x5c>)
   35152:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   35156:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   3515a:	f002 0203 	and.w	r2, r2, #3
   3515e:	2a01      	cmp	r2, #1
   35160:	f04f 0102 	mov.w	r1, #2
   35164:	d103      	bne.n	3516e <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   35166:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3516a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   3516c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   3516e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   35172:	4b05      	ldr	r3, [pc, #20]	; (35188 <nrfx_power_clock_irq_handler+0x60>)
   35174:	2001      	movs	r0, #1
}
   35176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3517a:	681b      	ldr	r3, [r3, #0]
   3517c:	4718      	bx	r3
   3517e:	bf00      	nop
   35180:	40005100 	.word	0x40005100
   35184:	40005000 	.word	0x40005000
   35188:	20024080 	.word	0x20024080
   3518c:	40005104 	.word	0x40005104

00035190 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   35190:	4a0b      	ldr	r2, [pc, #44]	; (351c0 <nrfx_dppi_channel_alloc+0x30>)
{
   35192:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   35194:	6816      	ldr	r6, [r2, #0]
   35196:	43f1      	mvns	r1, r6
   35198:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   3519a:	b171      	cbz	r1, 351ba <nrfx_dppi_channel_alloc+0x2a>
   3519c:	2500      	movs	r5, #0
   3519e:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   351a0:	fa21 f304 	lsr.w	r3, r1, r4
   351a4:	07db      	lsls	r3, r3, #31
   351a6:	f105 0501 	add.w	r5, r5, #1
   351aa:	d5f8      	bpl.n	3519e <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   351ac:	2301      	movs	r3, #1
   351ae:	40a3      	lsls	r3, r4
   351b0:	4333      	orrs	r3, r6
    *p_channel = channel;
   351b2:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   351b4:	4803      	ldr	r0, [pc, #12]	; (351c4 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   351b6:	6013      	str	r3, [r2, #0]
}
   351b8:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   351ba:	4803      	ldr	r0, [pc, #12]	; (351c8 <nrfx_dppi_channel_alloc+0x38>)
   351bc:	e7fc      	b.n	351b8 <nrfx_dppi_channel_alloc+0x28>
   351be:	bf00      	nop
   351c0:	20024088 	.word	0x20024088
   351c4:	0bad0000 	.word	0x0bad0000
   351c8:	0bad0002 	.word	0x0bad0002

000351cc <nrfx_dppi_channel_enable>:
    return ((m_allocated_channels & DPPI_BIT_SET(channel)) != 0);
   351cc:	4b07      	ldr	r3, [pc, #28]	; (351ec <nrfx_dppi_channel_enable+0x20>)
   351ce:	681b      	ldr	r3, [r3, #0]
   351d0:	40c3      	lsrs	r3, r0

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!channel_is_allocated(channel))
   351d2:	07db      	lsls	r3, r3, #31
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
   351d4:	bf41      	itttt	mi
   351d6:	2301      	movmi	r3, #1
   351d8:	fa03 f000 	lslmi.w	r0, r3, r0
   351dc:	4b04      	ldrmi	r3, [pc, #16]	; (351f0 <nrfx_dppi_channel_enable+0x24>)
   351de:	f8c3 0504 	strmi.w	r0, [r3, #1284]	; 0x504
    nrfx_err_t err_code = NRFX_SUCCESS;
   351e2:	bf4c      	ite	mi
   351e4:	4803      	ldrmi	r0, [pc, #12]	; (351f4 <nrfx_dppi_channel_enable+0x28>)
        err_code = NRFX_ERROR_INVALID_PARAM;
   351e6:	4804      	ldrpl	r0, [pc, #16]	; (351f8 <nrfx_dppi_channel_enable+0x2c>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   351e8:	4770      	bx	lr
   351ea:	bf00      	nop
   351ec:	20024088 	.word	0x20024088
   351f0:	40017000 	.word	0x40017000
   351f4:	0bad0000 	.word	0x0bad0000
   351f8:	0bad0004 	.word	0x0bad0004

000351fc <nrfx_nvmc_page_erase>:
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   351fc:	f3c0 030b 	ubfx	r3, r0, #0, #12

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   35200:	b97b      	cbnz	r3, 35222 <nrfx_nvmc_page_erase+0x26>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   35202:	2202      	movs	r2, #2
   35204:	4b08      	ldr	r3, [pc, #32]	; (35228 <nrfx_nvmc_page_erase+0x2c>)
   35206:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   3520a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3520e:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   35210:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   35214:	07d2      	lsls	r2, r2, #31
   35216:	d5fb      	bpl.n	35210 <nrfx_nvmc_page_erase+0x14>
    p_reg->CONFIGNS = (uint32_t)mode;
   35218:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3521a:	4804      	ldr	r0, [pc, #16]	; (3522c <nrfx_nvmc_page_erase+0x30>)
   3521c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
   35220:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   35222:	4803      	ldr	r0, [pc, #12]	; (35230 <nrfx_nvmc_page_erase+0x34>)
}
   35224:	4770      	bx	lr
   35226:	bf00      	nop
   35228:	40039000 	.word	0x40039000
   3522c:	0bad0000 	.word	0x0bad0000
   35230:	0bad000a 	.word	0x0bad000a

00035234 <nrfx_nvmc_word_write>:
   35234:	2201      	movs	r2, #1
   35236:	4b07      	ldr	r3, [pc, #28]	; (35254 <nrfx_nvmc_word_write+0x20>)
   35238:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   3523c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   35240:	07d2      	lsls	r2, r2, #31
   35242:	d5fb      	bpl.n	3523c <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   35244:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   35246:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIGNS = (uint32_t)mode;
   3524a:	2200      	movs	r2, #0
   3524c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   35250:	4770      	bx	lr
   35252:	bf00      	nop
   35254:	40039000 	.word	0x40039000

00035258 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   35258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3525a:	460c      	mov	r4, r1
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(timer_event_handler);

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   3525c:	210c      	movs	r1, #12
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   3525e:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   35260:	4e21      	ldr	r6, [pc, #132]	; (352e8 <nrfx_timer_init+0x90>)
   35262:	4379      	muls	r1, r7
{
   35264:	4605      	mov	r5, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   35266:	1870      	adds	r0, r6, r1
   35268:	7a03      	ldrb	r3, [r0, #8]
   3526a:	2b00      	cmp	r3, #0
   3526c:	d13a      	bne.n	352e4 <nrfx_timer_init+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3526e:	469c      	mov	ip, r3
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));

    p_cb->handler = timer_event_handler;
   35270:	5072      	str	r2, [r6, r1]
    p_cb->context = p_config->p_context;
   35272:	6862      	ldr	r2, [r4, #4]
   35274:	6042      	str	r2, [r0, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   35276:	7969      	ldrb	r1, [r5, #5]
   35278:	6828      	ldr	r0, [r5, #0]
   3527a:	b2da      	uxtb	r2, r3
   3527c:	4291      	cmp	r1, r2
   3527e:	d829      	bhi.n	352d4 <nrfx_timer_init+0x7c>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   35280:	f340 3007 	sbfx	r0, r0, #12, #8
   35284:	f7f0 fca4 	bl	25bd0 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   35288:	682b      	ldr	r3, [r5, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   3528a:	7862      	ldrb	r2, [r4, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   3528c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   35290:	f002 0203 	and.w	r2, r2, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   35294:	f021 0103 	bic.w	r1, r1, #3
   35298:	430a      	orrs	r2, r1
   3529a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   3529e:	f8d3 1508 	ldr.w	r1, [r3, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   352a2:	78a2      	ldrb	r2, [r4, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   352a4:	f021 0103 	bic.w	r1, r1, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   352a8:	f002 0203 	and.w	r2, r2, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   352ac:	430a      	orrs	r2, r1
   352ae:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_frequency_t frequency)
{
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   352b2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   352b6:	7822      	ldrb	r2, [r4, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   352b8:	f021 010f 	bic.w	r1, r1, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   352bc:	f002 020f 	and.w	r2, r2, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   352c0:	430a      	orrs	r2, r1
   352c2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   352c6:	230c      	movs	r3, #12
   352c8:	fb03 6607 	mla	r6, r3, r7, r6
   352cc:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   352ce:	4807      	ldr	r0, [pc, #28]	; (352ec <nrfx_timer_init+0x94>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   352d0:	7233      	strb	r3, [r6, #8]
}
   352d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   352d4:	009a      	lsls	r2, r3, #2
   352d6:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   352da:	f840 c002 	str.w	ip, [r0, r2]
   352de:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   352e0:	3301      	adds	r3, #1
   352e2:	e7ca      	b.n	3527a <nrfx_timer_init+0x22>
        return err_code;
   352e4:	4802      	ldr	r0, [pc, #8]	; (352f0 <nrfx_timer_init+0x98>)
   352e6:	e7f4      	b.n	352d2 <nrfx_timer_init+0x7a>
   352e8:	2002408c 	.word	0x2002408c
   352ec:	0bad0000 	.word	0x0bad0000
   352f0:	0bad0005 	.word	0x0bad0005

000352f4 <nrfx_timer_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   352f4:	2201      	movs	r2, #1

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   352f6:	210c      	movs	r1, #12
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   352f8:	6803      	ldr	r3, [r0, #0]
   352fa:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   352fc:	7903      	ldrb	r3, [r0, #4]
   352fe:	4a03      	ldr	r2, [pc, #12]	; (3530c <nrfx_timer_enable+0x18>)
   35300:	fb01 2303 	mla	r3, r1, r3, r2
   35304:	2202      	movs	r2, #2
   35306:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   35308:	4770      	bx	lr
   3530a:	bf00      	nop
   3530c:	2002408c 	.word	0x2002408c

00035310 <nrfx_timer_disable>:
   35310:	2201      	movs	r2, #1

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   35312:	6803      	ldr	r3, [r0, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   35314:	4903      	ldr	r1, [pc, #12]	; (35324 <nrfx_timer_disable+0x14>)
   35316:	611a      	str	r2, [r3, #16]
   35318:	7903      	ldrb	r3, [r0, #4]
   3531a:	200c      	movs	r0, #12
   3531c:	fb00 1303 	mla	r3, r0, r3, r1
   35320:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   35322:	4770      	bx	lr
   35324:	2002408c 	.word	0x2002408c

00035328 <nrfx_timer_uninit>:
{
   35328:	b538      	push	{r3, r4, r5, lr}
   3532a:	4604      	mov	r4, r0
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   3532c:	6800      	ldr	r0, [r0, #0]
    p_reg->SHORTS &= ~(mask);
   3532e:	2500      	movs	r5, #0
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   35330:	f340 3007 	sbfx	r0, r0, #12, #8
   35334:	f7f0 fc5c 	bl	25bf0 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   35338:	6823      	ldr	r3, [r4, #0]
    nrfx_timer_disable(p_instance);
   3533a:	4620      	mov	r0, r4
   3533c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   35340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    p_reg->SHORTS &= ~(mask);
   35344:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   35348:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   3534c:	f7ff ffe0 	bl	35310 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   35350:	210c      	movs	r1, #12
   35352:	7923      	ldrb	r3, [r4, #4]
   35354:	4a02      	ldr	r2, [pc, #8]	; (35360 <nrfx_timer_uninit+0x38>)
   35356:	fb01 2303 	mla	r3, r1, r3, r2
   3535a:	721d      	strb	r5, [r3, #8]
}
   3535c:	bd38      	pop	{r3, r4, r5, pc}
   3535e:	bf00      	nop
   35360:	2002408c 	.word	0x2002408c

00035364 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   35364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   35366:	4b11      	ldr	r3, [pc, #68]	; (353ac <z_sys_init_run_level+0x48>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   35368:	4f11      	ldr	r7, [pc, #68]	; (353b0 <z_sys_init_run_level+0x4c>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3536a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   3536e:	3001      	adds	r0, #1
   35370:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   35374:	42ae      	cmp	r6, r5
   35376:	d800      	bhi.n	3537a <z_sys_init_run_level+0x16>
		}
	}
}
   35378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   3537a:	e9d5 3400 	ldrd	r3, r4, [r5]
   3537e:	4620      	mov	r0, r4
   35380:	4798      	blx	r3
   35382:	b180      	cbz	r0, 353a6 <z_sys_init_run_level+0x42>
   35384:	b17c      	cbz	r4, 353a6 <z_sys_init_run_level+0x42>
				(dev - __device_start));
   35386:	4b0b      	ldr	r3, [pc, #44]	; (353b4 <z_sys_init_run_level+0x50>)
   35388:	1be4      	subs	r4, r4, r7
   3538a:	10e4      	asrs	r4, r4, #3
   3538c:	435c      	muls	r4, r3

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   3538e:	2301      	movs	r3, #1
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   35390:	4a09      	ldr	r2, [pc, #36]	; (353b8 <z_sys_init_run_level+0x54>)
   35392:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   35394:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   35398:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   3539c:	fa03 f404 	lsl.w	r4, r3, r4
   353a0:	4304      	orrs	r4, r0
   353a2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   353a6:	3508      	adds	r5, #8
   353a8:	e7e4      	b.n	35374 <z_sys_init_run_level+0x10>
   353aa:	bf00      	nop
   353ac:	0003ce08 	.word	0x0003ce08
   353b0:	2002063c 	.word	0x2002063c
   353b4:	aaaaaaab 	.word	0xaaaaaaab
   353b8:	20020714 	.word	0x20020714

000353bc <z_device_get_all_static>:
#include <syscalls/device_get_binding_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   353bc:	4a03      	ldr	r2, [pc, #12]	; (353cc <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   353be:	4b04      	ldr	r3, [pc, #16]	; (353d0 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   353c0:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   353c2:	1a9b      	subs	r3, r3, r2
}
   353c4:	4803      	ldr	r0, [pc, #12]	; (353d4 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   353c6:	10db      	asrs	r3, r3, #3
}
   353c8:	4358      	muls	r0, r3
   353ca:	4770      	bx	lr
   353cc:	2002063c 	.word	0x2002063c
   353d0:	20020714 	.word	0x20020714
   353d4:	aaaaaaab 	.word	0xaaaaaaab

000353d8 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   353d8:	4b09      	ldr	r3, [pc, #36]	; (35400 <z_device_ready+0x28>)
   353da:	1ac0      	subs	r0, r0, r3
   353dc:	10c3      	asrs	r3, r0, #3
   353de:	4809      	ldr	r0, [pc, #36]	; (35404 <z_device_ready+0x2c>)
   353e0:	4358      	muls	r0, r3
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   353e2:	4b09      	ldr	r3, [pc, #36]	; (35408 <z_device_ready+0x30>)
   353e4:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   353e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   353ea:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   353ec:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   353f0:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   353f4:	4210      	tst	r0, r2
}
   353f6:	bf0c      	ite	eq
   353f8:	4618      	moveq	r0, r3
   353fa:	2000      	movne	r0, #0
   353fc:	4770      	bx	lr
   353fe:	bf00      	nop
   35400:	2002063c 	.word	0x2002063c
   35404:	aaaaaaab 	.word	0xaaaaaaab
   35408:	20020714 	.word	0x20020714

0003540c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   3540c:	4911      	ldr	r1, [pc, #68]	; (35454 <z_impl_device_get_binding+0x48>)
{
   3540e:	b570      	push	{r4, r5, r6, lr}
   35410:	4605      	mov	r5, r0
   35412:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   35414:	4c10      	ldr	r4, [pc, #64]	; (35458 <z_impl_device_get_binding+0x4c>)
   35416:	428c      	cmp	r4, r1
   35418:	d104      	bne.n	35424 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   3541a:	4c0f      	ldr	r4, [pc, #60]	; (35458 <z_impl_device_get_binding+0x4c>)
   3541c:	42b4      	cmp	r4, r6
   3541e:	d10a      	bne.n	35436 <z_impl_device_get_binding+0x2a>
	return NULL;
   35420:	2400      	movs	r4, #0
   35422:	e014      	b.n	3544e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   35424:	4620      	mov	r0, r4
   35426:	f7ff ffd7 	bl	353d8 <z_device_ready>
   3542a:	b110      	cbz	r0, 35432 <z_impl_device_get_binding+0x26>
   3542c:	6823      	ldr	r3, [r4, #0]
   3542e:	42ab      	cmp	r3, r5
   35430:	d00d      	beq.n	3544e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   35432:	3418      	adds	r4, #24
   35434:	e7ef      	b.n	35416 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   35436:	4620      	mov	r0, r4
   35438:	f7ff ffce 	bl	353d8 <z_device_ready>
   3543c:	b908      	cbnz	r0, 35442 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   3543e:	3418      	adds	r4, #24
   35440:	e7ec      	b.n	3541c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   35442:	4628      	mov	r0, r5
   35444:	6821      	ldr	r1, [r4, #0]
   35446:	f7e7 fe09 	bl	1d05c <strcmp>
   3544a:	2800      	cmp	r0, #0
   3544c:	d1f7      	bne.n	3543e <z_impl_device_get_binding+0x32>
}
   3544e:	4620      	mov	r0, r4
   35450:	bd70      	pop	{r4, r5, r6, pc}
   35452:	bf00      	nop
   35454:	20020714 	.word	0x20020714
   35458:	2002063c 	.word	0x2002063c

0003545c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   3545c:	4b01      	ldr	r3, [pc, #4]	; (35464 <z_impl_z_errno+0x8>)
   3545e:	6898      	ldr	r0, [r3, #8]
}
   35460:	3068      	adds	r0, #104	; 0x68
   35462:	4770      	bx	lr
   35464:	20024098 	.word	0x20024098

00035468 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   35468:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3546c:	4606      	mov	r6, r0
   3546e:	460f      	mov	r7, r1
	__asm__ volatile(
   35470:	f04f 0320 	mov.w	r3, #32
   35474:	f3ef 8811 	mrs	r8, BASEPRI
   35478:	f383 8811 	msr	BASEPRI, r3
   3547c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   35480:	f000 ff36 	bl	362f0 <z_impl_k_current_get>
   35484:	4c21      	ldr	r4, [pc, #132]	; (3550c <z_fatal_error+0xa4>)
   35486:	4b22      	ldr	r3, [pc, #136]	; (35510 <z_fatal_error+0xa8>)
   35488:	2e04      	cmp	r6, #4
   3548a:	eba4 0403 	sub.w	r4, r4, r3
   3548e:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   35492:	bf98      	it	ls
   35494:	4a1f      	ldrls	r2, [pc, #124]	; (35514 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   35496:	ea4f 1484 	mov.w	r4, r4, lsl #6
   3549a:	f044 0301 	orr.w	r3, r4, #1
   3549e:	4605      	mov	r5, r0
	switch (reason) {
   354a0:	bf94      	ite	ls
   354a2:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   354a6:	4a1c      	ldrhi	r2, [pc, #112]	; (35518 <z_fatal_error+0xb0>)
   354a8:	f8ad 3000 	strh.w	r3, [sp]
   354ac:	4631      	mov	r1, r6
   354ae:	2300      	movs	r3, #0
   354b0:	481a      	ldr	r0, [pc, #104]	; (3551c <z_fatal_error+0xb4>)
   354b2:	f003 f844 	bl	3853e <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   354b6:	b147      	cbz	r7, 354ca <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   354b8:	69fb      	ldr	r3, [r7, #28]
   354ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   354be:	b123      	cbz	r3, 354ca <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   354c0:	4817      	ldr	r0, [pc, #92]	; (35520 <z_fatal_error+0xb8>)
   354c2:	f044 0101 	orr.w	r1, r4, #1
   354c6:	f002 fffb 	bl	384c0 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   354ca:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   354ce:	b12d      	cbz	r5, 354dc <z_fatal_error+0x74>
   354d0:	4628      	mov	r0, r5
   354d2:	f005 fcb1 	bl	3ae38 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   354d6:	b108      	cbz	r0, 354dc <z_fatal_error+0x74>
   354d8:	7803      	ldrb	r3, [r0, #0]
   354da:	b903      	cbnz	r3, 354de <z_fatal_error+0x76>
		thread_name = "unknown";
   354dc:	4811      	ldr	r0, [pc, #68]	; (35524 <z_fatal_error+0xbc>)
	LOG_ERR("Current thread: %p (%s)", thread,
   354de:	f7ee ff9d 	bl	2441c <log_strdup>
   354e2:	4623      	mov	r3, r4
   354e4:	4602      	mov	r2, r0
   354e6:	4629      	mov	r1, r5
   354e8:	480f      	ldr	r0, [pc, #60]	; (35528 <z_fatal_error+0xc0>)
   354ea:	f003 f80f 	bl	3850c <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   354ee:	4639      	mov	r1, r7
   354f0:	4630      	mov	r0, r6
   354f2:	f7f5 feeb 	bl	2b2cc <k_sys_fatal_error_handler>
	__asm__ volatile(
   354f6:	f388 8811 	msr	BASEPRI, r8
   354fa:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   354fe:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   35500:	b002      	add	sp, #8
   35502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   35506:	f7f0 bf95 	b.w	26434 <z_impl_k_thread_abort>
   3550a:	bf00      	nop
   3550c:	0003c384 	.word	0x0003c384
   35510:	0003c2cc 	.word	0x0003c2cc
   35514:	0003ce20 	.word	0x0003ce20
   35518:	000408a4 	.word	0x000408a4
   3551c:	000408ba 	.word	0x000408ba
   35520:	000408e2 	.word	0x000408e2
   35524:	000408b2 	.word	0x000408b2
   35528:	00040903 	.word	0x00040903

0003552c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   3552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3552e:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   35530:	2700      	movs	r7, #0
	_kernel.idle = ticks;
   35532:	4e1b      	ldr	r6, [pc, #108]	; (355a0 <idle+0x74>)
	__asm__ volatile(
   35534:	f04f 0220 	mov.w	r2, #32
   35538:	f3ef 8311 	mrs	r3, BASEPRI
   3553c:	f382 8811 	msr	BASEPRI, r2
   35540:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   35544:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   35546:	b188      	cbz	r0, 3556c <idle+0x40>
			cpu->pending_abort = NULL;
   35548:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   3554a:	f383 8811 	msr	BASEPRI, r3
   3554e:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   35552:	f000 fd0b 	bl	35f6c <z_thread_single_abort>
	__asm__ volatile(
   35556:	f04f 0320 	mov.w	r3, #32
   3555a:	f3ef 8011 	mrs	r0, BASEPRI
   3555e:	f383 8811 	msr	BASEPRI, r3
   35562:	f3bf 8f6f 	isb	sy
   35566:	f005 fb78 	bl	3ac5a <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   3556a:	e7e3      	b.n	35534 <idle+0x8>
	__asm__ volatile(
   3556c:	f383 8811 	msr	BASEPRI, r3
   35570:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   35574:	f04f 0220 	mov.w	r2, #32
   35578:	f3ef 8311 	mrs	r3, BASEPRI
   3557c:	f382 8811 	msr	BASEPRI, r2
   35580:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   35584:	f005 fce6 	bl	3af54 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   35588:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   3558a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3558c:	2802      	cmp	r0, #2
   3558e:	bfd8      	it	le
   35590:	4608      	movle	r0, r1
   35592:	f005 fcef 	bl	3af74 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   35596:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   35598:	f7f0 fbb6 	bl	25d08 <arch_cpu_idle>
}
   3559c:	e7ca      	b.n	35534 <idle+0x8>
   3559e:	bf00      	nop
   355a0:	20024098 	.word	0x20024098

000355a4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   355a4:	4802      	ldr	r0, [pc, #8]	; (355b0 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   355a6:	4a03      	ldr	r2, [pc, #12]	; (355b4 <z_bss_zero+0x10>)
   355a8:	2100      	movs	r1, #0
   355aa:	1a12      	subs	r2, r2, r0
   355ac:	f005 bf21 	b.w	3b3f2 <memset>
   355b0:	20020900 	.word	0x20020900
   355b4:	2002cd18 	.word	0x2002cd18

000355b8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   355b8:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   355ba:	4806      	ldr	r0, [pc, #24]	; (355d4 <z_data_copy+0x1c>)
   355bc:	4a06      	ldr	r2, [pc, #24]	; (355d8 <z_data_copy+0x20>)
   355be:	4907      	ldr	r1, [pc, #28]	; (355dc <z_data_copy+0x24>)
   355c0:	1a12      	subs	r2, r2, r0
   355c2:	f005 fef6 	bl	3b3b2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   355c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   355ca:	4a05      	ldr	r2, [pc, #20]	; (355e0 <z_data_copy+0x28>)
   355cc:	4905      	ldr	r1, [pc, #20]	; (355e4 <z_data_copy+0x2c>)
   355ce:	4806      	ldr	r0, [pc, #24]	; (355e8 <z_data_copy+0x30>)
   355d0:	f005 beef 	b.w	3b3b2 <memcpy>
   355d4:	20020000 	.word	0x20020000
   355d8:	200208fc 	.word	0x200208fc
   355dc:	00040b20 	.word	0x00040b20
   355e0:	00000000 	.word	0x00000000
   355e4:	00040b20 	.word	0x00040b20
   355e8:	20020000 	.word	0x20020000

000355ec <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   355ec:	2201      	movs	r2, #1
{
   355ee:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   355f0:	4b0b      	ldr	r3, [pc, #44]	; (35620 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   355f2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   355f4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   355f6:	f7ff feb5 	bl	35364 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   355fa:	4a0a      	ldr	r2, [pc, #40]	; (35624 <bg_thread_main+0x38>)
   355fc:	490a      	ldr	r1, [pc, #40]	; (35628 <bg_thread_main+0x3c>)
   355fe:	480b      	ldr	r0, [pc, #44]	; (3562c <bg_thread_main+0x40>)
   35600:	f002 faec 	bl	37bdc <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   35604:	2003      	movs	r0, #3
   35606:	f7ff fead 	bl	35364 <z_sys_init_run_level>

	z_init_static_threads();
   3560a:	f000 ff53 	bl	364b4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   3560e:	f002 fa00 	bl	37a12 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   35612:	4a07      	ldr	r2, [pc, #28]	; (35630 <bg_thread_main+0x44>)
   35614:	7b13      	ldrb	r3, [r2, #12]
   35616:	f023 0301 	bic.w	r3, r3, #1
   3561a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   3561c:	bd08      	pop	{r3, pc}
   3561e:	bf00      	nop
   35620:	2002cb9f 	.word	0x2002cb9f
   35624:	00040193 	.word	0x00040193
   35628:	00040965 	.word	0x00040965
   3562c:	00040984 	.word	0x00040984
   35630:	20023280 	.word	0x20023280

00035634 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   35634:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   35638:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   3563a:	f7ee fe53 	bl	242e4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   3563e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 3572c <z_cstart+0xf8>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   35642:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   35646:	2400      	movs	r4, #0
   35648:	23e0      	movs	r3, #224	; 0xe0
   3564a:	4d30      	ldr	r5, [pc, #192]	; (3570c <z_cstart+0xd8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3564c:	f04f 0b01 	mov.w	fp, #1
   35650:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   35654:	77ec      	strb	r4, [r5, #31]
   35656:	762c      	strb	r4, [r5, #24]
   35658:	766c      	strb	r4, [r5, #25]
   3565a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   3565c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   3565e:	4e2c      	ldr	r6, [pc, #176]	; (35710 <z_cstart+0xdc>)
   35660:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   35664:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   35666:	f7f0 fe75 	bl	26354 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   3566a:	f7f0 fb47 	bl	25cfc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   3566e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35672:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   35674:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   35676:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   3567a:	4d26      	ldr	r5, [pc, #152]	; (35714 <z_cstart+0xe0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   3567c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   35680:	ab06      	add	r3, sp, #24
   35682:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   35684:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   35686:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   3568a:	f7ff fe6b 	bl	35364 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   3568e:	2001      	movs	r0, #1
   35690:	f7ff fe68 	bl	35364 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   35694:	f8df a098 	ldr.w	sl, [pc, #152]	; 35730 <z_cstart+0xfc>
	z_sched_init();
   35698:	f000 fdb0 	bl	361fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3569c:	4b1e      	ldr	r3, [pc, #120]	; (35718 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   3569e:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   356a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   356a4:	491d      	ldr	r1, [pc, #116]	; (3571c <z_cstart+0xe8>)
   356a6:	9305      	str	r3, [sp, #20]
   356a8:	4630      	mov	r0, r6
   356aa:	4653      	mov	r3, sl
   356ac:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   356b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   356b4:	9400      	str	r4, [sp, #0]
   356b6:	f000 fe9f 	bl	363f8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   356ba:	7b73      	ldrb	r3, [r6, #13]
   356bc:	4680      	mov	r8, r0
   356be:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   356c2:	4630      	mov	r0, r6
   356c4:	7373      	strb	r3, [r6, #13]
   356c6:	f005 fb0a 	bl	3acde <z_ready_thread>
	z_setup_new_thread(thread, stack,
   356ca:	230f      	movs	r3, #15
   356cc:	4f14      	ldr	r7, [pc, #80]	; (35720 <z_cstart+0xec>)
   356ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
   356d2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   356d6:	4913      	ldr	r1, [pc, #76]	; (35724 <z_cstart+0xf0>)
   356d8:	4b13      	ldr	r3, [pc, #76]	; (35728 <z_cstart+0xf4>)
   356da:	4638      	mov	r0, r7
   356dc:	e9cd b404 	strd	fp, r4, [sp, #16]
   356e0:	e9cd 5400 	strd	r5, r4, [sp]
   356e4:	f000 fe88 	bl	363f8 <z_setup_new_thread>
   356e8:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   356ea:	4652      	mov	r2, sl
   356ec:	f023 0304 	bic.w	r3, r3, #4
   356f0:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   356f2:	f105 031c 	add.w	r3, r5, #28
   356f6:	4641      	mov	r1, r8
   356f8:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   356fa:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   356fe:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   35700:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   35702:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   35706:	f7f0 fad7 	bl	25cb8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   3570a:	bf00      	nop
   3570c:	e000ed00 	.word	0xe000ed00
   35710:	20023280 	.word	0x20023280
   35714:	20024098 	.word	0x20024098
   35718:	000409ab 	.word	0x000409ab
   3571c:	2002f898 	.word	0x2002f898
   35720:	200231b8 	.word	0x200231b8
   35724:	20030898 	.word	0x20030898
   35728:	0003552d 	.word	0x0003552d
   3572c:	200311d8 	.word	0x200311d8
   35730:	000355ed 	.word	0x000355ed

00035734 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   35734:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   35736:	4c06      	ldr	r4, [pc, #24]	; (35750 <statics_init+0x1c>)
   35738:	4d06      	ldr	r5, [pc, #24]	; (35754 <statics_init+0x20>)
   3573a:	42ac      	cmp	r4, r5
   3573c:	d301      	bcc.n	35742 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   3573e:	2000      	movs	r0, #0
   35740:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   35742:	4620      	mov	r0, r4
   35744:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   35748:	f005 f925 	bl	3a996 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   3574c:	3414      	adds	r4, #20
   3574e:	e7f4      	b.n	3573a <statics_init+0x6>
   35750:	20020788 	.word	0x20020788
   35754:	2002079c 	.word	0x2002079c

00035758 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   35758:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3575a:	4b0e      	ldr	r3, [pc, #56]	; (35794 <init_mem_slab_module+0x3c>)
   3575c:	4c0e      	ldr	r4, [pc, #56]	; (35798 <init_mem_slab_module+0x40>)
   3575e:	42a3      	cmp	r3, r4
   35760:	d301      	bcc.n	35766 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   35762:	2000      	movs	r0, #0
	return rc;
}
   35764:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   35766:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   3576a:	ea41 0200 	orr.w	r2, r1, r0
   3576e:	f012 0203 	ands.w	r2, r2, #3
   35772:	d10b      	bne.n	3578c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   35774:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   35776:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   35778:	42aa      	cmp	r2, r5
   3577a:	d101      	bne.n	35780 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3577c:	331c      	adds	r3, #28
   3577e:	e7ee      	b.n	3575e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   35780:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   35782:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   35784:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   35786:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   35788:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   3578a:	e7f5      	b.n	35778 <init_mem_slab_module+0x20>
		return -EINVAL;
   3578c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   35790:	e7e8      	b.n	35764 <init_mem_slab_module+0xc>
   35792:	bf00      	nop
   35794:	20020788 	.word	0x20020788
   35798:	20020788 	.word	0x20020788

0003579c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   3579c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   3579e:	460c      	mov	r4, r1
   357a0:	4616      	mov	r6, r2
   357a2:	461f      	mov	r7, r3
   357a4:	f04f 0320 	mov.w	r3, #32
   357a8:	f3ef 8111 	mrs	r1, BASEPRI
   357ac:	f383 8811 	msr	BASEPRI, r3
   357b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   357b4:	6943      	ldr	r3, [r0, #20]
   357b6:	b15b      	cbz	r3, 357d0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   357b8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   357ba:	681b      	ldr	r3, [r3, #0]
   357bc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   357be:	6983      	ldr	r3, [r0, #24]
   357c0:	3301      	adds	r3, #1
   357c2:	6183      	str	r3, [r0, #24]
		result = 0;
   357c4:	2000      	movs	r0, #0
	__asm__ volatile(
   357c6:	f381 8811 	msr	BASEPRI, r1
   357ca:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   357ce:	e011      	b.n	357f4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   357d0:	ea56 0207 	orrs.w	r2, r6, r7
   357d4:	d103      	bne.n	357de <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   357d6:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   357da:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   357dc:	e7f3      	b.n	357c6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   357de:	4602      	mov	r2, r0
   357e0:	e9cd 6700 	strd	r6, r7, [sp]
   357e4:	4804      	ldr	r0, [pc, #16]	; (357f8 <k_mem_slab_alloc+0x5c>)
   357e6:	f000 fc83 	bl	360f0 <z_pend_curr>
		if (result == 0) {
   357ea:	b918      	cbnz	r0, 357f4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   357ec:	4b03      	ldr	r3, [pc, #12]	; (357fc <k_mem_slab_alloc+0x60>)
   357ee:	689b      	ldr	r3, [r3, #8]
   357f0:	695b      	ldr	r3, [r3, #20]
   357f2:	6023      	str	r3, [r4, #0]
}
   357f4:	b002      	add	sp, #8
   357f6:	bdd0      	pop	{r4, r6, r7, pc}
   357f8:	2002cba0 	.word	0x2002cba0
   357fc:	20024098 	.word	0x20024098

00035800 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   35800:	b570      	push	{r4, r5, r6, lr}
   35802:	4604      	mov	r4, r0
   35804:	460d      	mov	r5, r1
	__asm__ volatile(
   35806:	f04f 0320 	mov.w	r3, #32
   3580a:	f3ef 8611 	mrs	r6, BASEPRI
   3580e:	f383 8811 	msr	BASEPRI, r3
   35812:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   35816:	f005 fabd 	bl	3ad94 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   3581a:	b160      	cbz	r0, 35836 <k_mem_slab_free+0x36>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   3581c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   3581e:	682a      	ldr	r2, [r5, #0]
   35820:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   35824:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   35826:	f005 fa5a 	bl	3acde <z_ready_thread>
		z_reschedule(&lock, key);
   3582a:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   3582c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   35830:	4807      	ldr	r0, [pc, #28]	; (35850 <k_mem_slab_free+0x50>)
   35832:	f000 b9f7 	b.w	35c24 <z_reschedule>
		**(char ***)mem = slab->free_list;
   35836:	682b      	ldr	r3, [r5, #0]
   35838:	6962      	ldr	r2, [r4, #20]
   3583a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   3583c:	682b      	ldr	r3, [r5, #0]
   3583e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   35840:	69a3      	ldr	r3, [r4, #24]
   35842:	3b01      	subs	r3, #1
   35844:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   35846:	f386 8811 	msr	BASEPRI, r6
   3584a:	f3bf 8f6f 	isb	sy
}
   3584e:	bd70      	pop	{r4, r5, r6, pc}
   35850:	2002cba0 	.word	0x2002cba0

00035854 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   35854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35858:	4604      	mov	r4, r0
   3585a:	4616      	mov	r6, r2
   3585c:	461f      	mov	r7, r3
   3585e:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   35860:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   35864:	f04f 0320 	mov.w	r3, #32
   35868:	f3ef 8811 	mrs	r8, BASEPRI
   3586c:	f383 8811 	msr	BASEPRI, r3
   35870:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   35874:	6a02      	ldr	r2, [r0, #32]
   35876:	68c3      	ldr	r3, [r0, #12]
   35878:	429a      	cmp	r2, r3
   3587a:	d22c      	bcs.n	358d6 <z_impl_k_msgq_put+0x82>
   3587c:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3587e:	f005 fa89 	bl	3ad94 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   35882:	68a2      	ldr	r2, [r4, #8]
   35884:	4605      	mov	r5, r0
   35886:	9903      	ldr	r1, [sp, #12]
   35888:	b180      	cbz	r0, 358ac <z_impl_k_msgq_put+0x58>
   3588a:	2400      	movs	r4, #0
   3588c:	6940      	ldr	r0, [r0, #20]
   3588e:	f005 fd90 	bl	3b3b2 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   35892:	4628      	mov	r0, r5
   35894:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
   35898:	f005 fa21 	bl	3acde <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   3589c:	4648      	mov	r0, r9
   3589e:	4641      	mov	r1, r8
   358a0:	f000 f9c0 	bl	35c24 <z_reschedule>
			return 0;
   358a4:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   358a6:	b005      	add	sp, #20
   358a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   358ac:	69e0      	ldr	r0, [r4, #28]
   358ae:	f005 fd80 	bl	3b3b2 <memcpy>
		result = 0;
   358b2:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   358b4:	69e3      	ldr	r3, [r4, #28]
   358b6:	68a2      	ldr	r2, [r4, #8]
   358b8:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   358ba:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   358bc:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   358be:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   358c0:	bf04      	itt	eq
   358c2:	6923      	ldreq	r3, [r4, #16]
   358c4:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   358c6:	6a23      	ldr	r3, [r4, #32]
   358c8:	3301      	adds	r3, #1
   358ca:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   358cc:	f388 8811 	msr	BASEPRI, r8
   358d0:	f3bf 8f6f 	isb	sy
	return result;
   358d4:	e7e7      	b.n	358a6 <z_impl_k_msgq_put+0x52>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   358d6:	ea56 0307 	orrs.w	r3, r6, r7
   358da:	d00a      	beq.n	358f2 <z_impl_k_msgq_put+0x9e>
		_current->base.swap_data = (void *) data;
   358dc:	4b06      	ldr	r3, [pc, #24]	; (358f8 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   358de:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   358e0:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   358e2:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   358e4:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   358e6:	4641      	mov	r1, r8
   358e8:	e9cd 6700 	strd	r6, r7, [sp]
   358ec:	f000 fc00 	bl	360f0 <z_pend_curr>
   358f0:	e7d9      	b.n	358a6 <z_impl_k_msgq_put+0x52>
		result = -ENOMSG;
   358f2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   358f6:	e7e9      	b.n	358cc <z_impl_k_msgq_put+0x78>
   358f8:	20024098 	.word	0x20024098

000358fc <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   358fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   35900:	4604      	mov	r4, r0
   35902:	4616      	mov	r6, r2
   35904:	4608      	mov	r0, r1
   35906:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   35908:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   3590c:	f04f 0320 	mov.w	r3, #32
   35910:	f3ef 8811 	mrs	r8, BASEPRI
   35914:	f383 8811 	msr	BASEPRI, r3
   35918:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   3591c:	6a23      	ldr	r3, [r4, #32]
   3591e:	2b00      	cmp	r3, #0
   35920:	d033      	beq.n	3598a <z_impl_k_msgq_get+0x8e>
   35922:	68a2      	ldr	r2, [r4, #8]
   35924:	69a1      	ldr	r1, [r4, #24]
   35926:	f005 fd44 	bl	3b3b2 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   3592a:	69a3      	ldr	r3, [r4, #24]
   3592c:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3592e:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   35930:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   35932:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   35934:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   35936:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   35938:	bf04      	itt	eq
   3593a:	6923      	ldreq	r3, [r4, #16]
   3593c:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   3593e:	6a23      	ldr	r3, [r4, #32]
   35940:	3b01      	subs	r3, #1
   35942:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   35944:	f005 fa26 	bl	3ad94 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   35948:	4605      	mov	r5, r0
   3594a:	b370      	cbz	r0, 359aa <z_impl_k_msgq_get+0xae>
   3594c:	6941      	ldr	r1, [r0, #20]
   3594e:	68a2      	ldr	r2, [r4, #8]
   35950:	69e0      	ldr	r0, [r4, #28]
   35952:	f005 fd2e 	bl	3b3b2 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   35956:	69e3      	ldr	r3, [r4, #28]
   35958:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   3595a:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   3595c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3595e:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   35960:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   35962:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   35964:	bf04      	itt	eq
   35966:	6923      	ldreq	r3, [r4, #16]
   35968:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   3596a:	6a23      	ldr	r3, [r4, #32]
   3596c:	3301      	adds	r3, #1
   3596e:	6223      	str	r3, [r4, #32]
   35970:	2400      	movs	r4, #0
   35972:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
			z_ready_thread(pending_thread);
   35976:	f005 f9b2 	bl	3acde <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   3597a:	4648      	mov	r0, r9
   3597c:	4641      	mov	r1, r8
   3597e:	f000 f951 	bl	35c24 <z_reschedule>
			return 0;
   35982:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   35984:	b003      	add	sp, #12
   35986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3598a:	ea56 0307 	orrs.w	r3, r6, r7
   3598e:	d00a      	beq.n	359a6 <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   35990:	4b08      	ldr	r3, [pc, #32]	; (359b4 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   35992:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   35994:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   35996:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   35998:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3599a:	4641      	mov	r1, r8
   3599c:	e9cd 6700 	strd	r6, r7, [sp]
   359a0:	f000 fba6 	bl	360f0 <z_pend_curr>
   359a4:	e7ee      	b.n	35984 <z_impl_k_msgq_get+0x88>
		result = -ENOMSG;
   359a6:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   359aa:	f388 8811 	msr	BASEPRI, r8
   359ae:	f3bf 8f6f 	isb	sy
	return result;
   359b2:	e7e7      	b.n	35984 <z_impl_k_msgq_get+0x88>
   359b4:	20024098 	.word	0x20024098

000359b8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   359b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   359bc:	4604      	mov	r4, r0
   359be:	4616      	mov	r6, r2
   359c0:	461f      	mov	r7, r3
	__asm__ volatile(
   359c2:	f04f 0320 	mov.w	r3, #32
   359c6:	f3ef 8811 	mrs	r8, BASEPRI
   359ca:	f383 8811 	msr	BASEPRI, r3
   359ce:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   359d2:	68c3      	ldr	r3, [r0, #12]
   359d4:	4a32      	ldr	r2, [pc, #200]	; (35aa0 <z_impl_k_mutex_lock+0xe8>)
   359d6:	b16b      	cbz	r3, 359f4 <z_impl_k_mutex_lock+0x3c>
   359d8:	6880      	ldr	r0, [r0, #8]
   359da:	6891      	ldr	r1, [r2, #8]
   359dc:	4288      	cmp	r0, r1
   359de:	d019      	beq.n	35a14 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   359e0:	ea56 0307 	orrs.w	r3, r6, r7
   359e4:	d118      	bne.n	35a18 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   359e6:	f388 8811 	msr	BASEPRI, r8
   359ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   359ee:	f06f 000f 	mvn.w	r0, #15
   359f2:	e00c      	b.n	35a0e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   359f4:	6891      	ldr	r1, [r2, #8]
   359f6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   359fa:	3301      	adds	r3, #1
   359fc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   359fe:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   35a00:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   35a02:	60a3      	str	r3, [r4, #8]
   35a04:	f388 8811 	msr	BASEPRI, r8
   35a08:	f3bf 8f6f 	isb	sy
		return 0;
   35a0c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   35a0e:	b002      	add	sp, #8
   35a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   35a14:	6921      	ldr	r1, [r4, #16]
   35a16:	e7f0      	b.n	359fa <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   35a18:	f990 300e 	ldrsb.w	r3, [r0, #14]
   35a1c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   35a20:	4299      	cmp	r1, r3
   35a22:	bfa8      	it	ge
   35a24:	4619      	movge	r1, r3
   35a26:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   35a2a:	428b      	cmp	r3, r1
   35a2c:	dd2c      	ble.n	35a88 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   35a2e:	f000 fba1 	bl	36174 <z_set_prio>
   35a32:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   35a34:	4622      	mov	r2, r4
   35a36:	4641      	mov	r1, r8
   35a38:	e9cd 6700 	strd	r6, r7, [sp]
   35a3c:	4819      	ldr	r0, [pc, #100]	; (35aa4 <z_impl_k_mutex_lock+0xec>)
   35a3e:	f000 fb57 	bl	360f0 <z_pend_curr>
	if (got_mutex == 0) {
   35a42:	2800      	cmp	r0, #0
   35a44:	d0e3      	beq.n	35a0e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   35a46:	f04f 0320 	mov.w	r3, #32
   35a4a:	f3ef 8611 	mrs	r6, BASEPRI
   35a4e:	f383 8811 	msr	BASEPRI, r3
   35a52:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   35a56:	6823      	ldr	r3, [r4, #0]
   35a58:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35a5a:	42a3      	cmp	r3, r4
   35a5c:	d007      	beq.n	35a6e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   35a5e:	b133      	cbz	r3, 35a6e <z_impl_k_mutex_lock+0xb6>
   35a60:	f993 300e 	ldrsb.w	r3, [r3, #14]
   35a64:	4299      	cmp	r1, r3
   35a66:	bfa8      	it	ge
   35a68:	4619      	movge	r1, r3
   35a6a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   35a6e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   35a70:	f990 300e 	ldrsb.w	r3, [r0, #14]
   35a74:	4299      	cmp	r1, r3
   35a76:	d109      	bne.n	35a8c <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   35a78:	b16d      	cbz	r5, 35a96 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   35a7a:	4631      	mov	r1, r6
   35a7c:	4809      	ldr	r0, [pc, #36]	; (35aa4 <z_impl_k_mutex_lock+0xec>)
   35a7e:	f000 f8d1 	bl	35c24 <z_reschedule>
	return -EAGAIN;
   35a82:	f06f 000a 	mvn.w	r0, #10
   35a86:	e7c2      	b.n	35a0e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   35a88:	2500      	movs	r5, #0
   35a8a:	e7d3      	b.n	35a34 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   35a8c:	f000 fb72 	bl	36174 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   35a90:	2800      	cmp	r0, #0
   35a92:	d1f2      	bne.n	35a7a <z_impl_k_mutex_lock+0xc2>
   35a94:	e7f0      	b.n	35a78 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   35a96:	f386 8811 	msr	BASEPRI, r6
   35a9a:	f3bf 8f6f 	isb	sy
   35a9e:	e7f0      	b.n	35a82 <z_impl_k_mutex_lock+0xca>
   35aa0:	20024098 	.word	0x20024098
   35aa4:	2002cba0 	.word	0x2002cba0

00035aa8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   35aa8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   35aaa:	6883      	ldr	r3, [r0, #8]
{
   35aac:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   35aae:	2b00      	cmp	r3, #0
   35ab0:	d037      	beq.n	35b22 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   35ab2:	4a1f      	ldr	r2, [pc, #124]	; (35b30 <z_impl_k_mutex_unlock+0x88>)
   35ab4:	6892      	ldr	r2, [r2, #8]
   35ab6:	4293      	cmp	r3, r2
   35ab8:	d136      	bne.n	35b28 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   35aba:	7bda      	ldrb	r2, [r3, #15]
   35abc:	3a01      	subs	r2, #1
   35abe:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   35ac0:	68c3      	ldr	r3, [r0, #12]
   35ac2:	2b01      	cmp	r3, #1
   35ac4:	d005      	beq.n	35ad2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   35ac6:	3b01      	subs	r3, #1
   35ac8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   35aca:	f000 f90f 	bl	35cec <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   35ace:	2000      	movs	r0, #0
}
   35ad0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   35ad2:	f04f 0320 	mov.w	r3, #32
   35ad6:	f3ef 8511 	mrs	r5, BASEPRI
   35ada:	f383 8811 	msr	BASEPRI, r3
   35ade:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   35ae2:	6901      	ldr	r1, [r0, #16]
   35ae4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   35ae6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   35aea:	4299      	cmp	r1, r3
   35aec:	d001      	beq.n	35af2 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   35aee:	f000 fb41 	bl	36174 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   35af2:	4620      	mov	r0, r4
   35af4:	f005 f94e 	bl	3ad94 <z_unpend_first_thread>
	mutex->owner = new_owner;
   35af8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   35afa:	b160      	cbz	r0, 35b16 <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   35afc:	f990 200e 	ldrsb.w	r2, [r0, #14]
   35b00:	6122      	str	r2, [r4, #16]
   35b02:	2200      	movs	r2, #0
   35b04:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   35b08:	f005 f8e9 	bl	3acde <z_ready_thread>
		z_reschedule(&lock, key);
   35b0c:	4629      	mov	r1, r5
   35b0e:	4809      	ldr	r0, [pc, #36]	; (35b34 <z_impl_k_mutex_unlock+0x8c>)
   35b10:	f000 f888 	bl	35c24 <z_reschedule>
   35b14:	e7d9      	b.n	35aca <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   35b16:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   35b18:	f385 8811 	msr	BASEPRI, r5
   35b1c:	f3bf 8f6f 	isb	sy
   35b20:	e7d3      	b.n	35aca <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   35b22:	f06f 0015 	mvn.w	r0, #21
   35b26:	e7d3      	b.n	35ad0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   35b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35b2c:	e7d0      	b.n	35ad0 <z_impl_k_mutex_unlock+0x28>
   35b2e:	bf00      	nop
   35b30:	20024098 	.word	0x20024098
   35b34:	2002cba0 	.word	0x2002cba0

00035b38 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   35b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35b3a:	4616      	mov	r6, r2
   35b3c:	461f      	mov	r7, r3
	__asm__ volatile(
   35b3e:	f04f 0320 	mov.w	r3, #32
   35b42:	f3ef 8511 	mrs	r5, BASEPRI
   35b46:	f383 8811 	msr	BASEPRI, r3
   35b4a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   35b4e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   35b50:	b19c      	cbz	r4, 35b7a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   35b52:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   35b54:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   35b56:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   35b5a:	4294      	cmp	r4, r2
	list->head = node;
   35b5c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   35b5e:	bf08      	it	eq
   35b60:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   35b62:	2101      	movs	r1, #1
   35b64:	4620      	mov	r0, r4
   35b66:	f005 f822 	bl	3abae <z_queue_node_peek>
   35b6a:	4604      	mov	r4, r0
	__asm__ volatile(
   35b6c:	f385 8811 	msr	BASEPRI, r5
   35b70:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   35b74:	4620      	mov	r0, r4
   35b76:	b003      	add	sp, #12
   35b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   35b7a:	ea56 0307 	orrs.w	r3, r6, r7
   35b7e:	d0f5      	beq.n	35b6c <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   35b80:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   35b84:	4629      	mov	r1, r5
   35b86:	4610      	mov	r0, r2
   35b88:	e9cd 6700 	strd	r6, r7, [sp]
   35b8c:	f000 fab0 	bl	360f0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   35b90:	2800      	cmp	r0, #0
   35b92:	d1ef      	bne.n	35b74 <z_impl_k_queue_get+0x3c>
   35b94:	4b01      	ldr	r3, [pc, #4]	; (35b9c <z_impl_k_queue_get+0x64>)
   35b96:	689b      	ldr	r3, [r3, #8]
   35b98:	695c      	ldr	r4, [r3, #20]
   35b9a:	e7eb      	b.n	35b74 <z_impl_k_queue_get+0x3c>
   35b9c:	20024098 	.word	0x20024098

00035ba0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   35ba0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   35ba2:	4c08      	ldr	r4, [pc, #32]	; (35bc4 <z_reset_time_slice+0x24>)
   35ba4:	6823      	ldr	r3, [r4, #0]
   35ba6:	b15b      	cbz	r3, 35bc0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   35ba8:	f7ef fea6 	bl	258f8 <z_clock_elapsed>
   35bac:	6822      	ldr	r2, [r4, #0]
   35bae:	4906      	ldr	r1, [pc, #24]	; (35bc8 <z_reset_time_slice+0x28>)
   35bb0:	4410      	add	r0, r2
   35bb2:	6148      	str	r0, [r1, #20]
		z_set_timeout_expiry(slice_time, false);
	}
}
   35bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   35bb8:	2100      	movs	r1, #0
   35bba:	4610      	mov	r0, r2
   35bbc:	f005 b9da 	b.w	3af74 <z_set_timeout_expiry>
}
   35bc0:	bd10      	pop	{r4, pc}
   35bc2:	bf00      	nop
   35bc4:	200240d8 	.word	0x200240d8
   35bc8:	20024098 	.word	0x20024098

00035bcc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   35bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35bce:	460c      	mov	r4, r1
	__asm__ volatile(
   35bd0:	f04f 0320 	mov.w	r3, #32
   35bd4:	f3ef 8511 	mrs	r5, BASEPRI
   35bd8:	f383 8811 	msr	BASEPRI, r3
   35bdc:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   35be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   35be4:	f240 36e7 	movw	r6, #999	; 0x3e7
   35be8:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   35bea:	2200      	movs	r2, #0
   35bec:	fbe1 6700 	umlal	r6, r7, r1, r0
   35bf0:	4b09      	ldr	r3, [pc, #36]	; (35c18 <k_sched_time_slice_set+0x4c>)
   35bf2:	4630      	mov	r0, r6
   35bf4:	615a      	str	r2, [r3, #20]
   35bf6:	4639      	mov	r1, r7
   35bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   35bfc:	2300      	movs	r3, #0
   35bfe:	f7e6 fddb 	bl	1c7b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   35c02:	4b06      	ldr	r3, [pc, #24]	; (35c1c <k_sched_time_slice_set+0x50>)
   35c04:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   35c06:	4b06      	ldr	r3, [pc, #24]	; (35c20 <k_sched_time_slice_set+0x54>)
   35c08:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   35c0a:	f7ff ffc9 	bl	35ba0 <z_reset_time_slice>
	__asm__ volatile(
   35c0e:	f385 8811 	msr	BASEPRI, r5
   35c12:	f3bf 8f6f 	isb	sy
	}
}
   35c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35c18:	20024098 	.word	0x20024098
   35c1c:	200240d8 	.word	0x200240d8
   35c20:	200240d4 	.word	0x200240d4

00035c24 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   35c24:	b949      	cbnz	r1, 35c3a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   35c26:	f3ef 8005 	mrs	r0, IPSR
   35c2a:	b930      	cbnz	r0, 35c3a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   35c2c:	4b05      	ldr	r3, [pc, #20]	; (35c44 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   35c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   35c30:	689b      	ldr	r3, [r3, #8]
   35c32:	429a      	cmp	r2, r3
   35c34:	d001      	beq.n	35c3a <z_reschedule+0x16>
	return z_swap_irqlock(key.key);
   35c36:	f004 bfdd 	b.w	3abf4 <z_swap_irqlock>
   35c3a:	f381 8811 	msr	BASEPRI, r1
   35c3e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   35c42:	4770      	bx	lr
   35c44:	20024098 	.word	0x20024098

00035c48 <k_sched_lock>:
	__asm__ volatile(
   35c48:	f04f 0320 	mov.w	r3, #32
   35c4c:	f3ef 8111 	mrs	r1, BASEPRI
   35c50:	f383 8811 	msr	BASEPRI, r3
   35c54:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   35c58:	4b04      	ldr	r3, [pc, #16]	; (35c6c <k_sched_lock+0x24>)
   35c5a:	689a      	ldr	r2, [r3, #8]
   35c5c:	7bd3      	ldrb	r3, [r2, #15]
   35c5e:	3b01      	subs	r3, #1
   35c60:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   35c62:	f381 8811 	msr	BASEPRI, r1
   35c66:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   35c6a:	4770      	bx	lr
   35c6c:	20024098 	.word	0x20024098

00035c70 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   35c70:	4b09      	ldr	r3, [pc, #36]	; (35c98 <z_priq_dumb_remove+0x28>)
   35c72:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   35c76:	4282      	cmp	r2, r0
   35c78:	d105      	bne.n	35c86 <z_priq_dumb_remove+0x16>
   35c7a:	689b      	ldr	r3, [r3, #8]
   35c7c:	428b      	cmp	r3, r1
   35c7e:	d102      	bne.n	35c86 <z_priq_dumb_remove+0x16>
   35c80:	7b4b      	ldrb	r3, [r1, #13]
   35c82:	06db      	lsls	r3, r3, #27
   35c84:	d106      	bne.n	35c94 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   35c86:	e9d1 3200 	ldrd	r3, r2, [r1]
   35c8a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   35c8c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   35c8e:	2300      	movs	r3, #0
	node->prev = NULL;
   35c90:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   35c94:	4770      	bx	lr
   35c96:	bf00      	nop
   35c98:	20024098 	.word	0x20024098

00035c9c <update_cache>:
{
   35c9c:	b538      	push	{r3, r4, r5, lr}
   35c9e:	4c12      	ldr	r4, [pc, #72]	; (35ce8 <update_cache+0x4c>)
   35ca0:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   35ca2:	6923      	ldr	r3, [r4, #16]
   35ca4:	68a2      	ldr	r2, [r4, #8]
   35ca6:	b10b      	cbz	r3, 35cac <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   35ca8:	68e5      	ldr	r5, [r4, #12]
   35caa:	e00c      	b.n	35cc6 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   35cac:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   35cb0:	f005 f80b 	bl	3acca <z_priq_dumb_best>
   35cb4:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   35cb6:	7b53      	ldrb	r3, [r2, #13]
   35cb8:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   35cba:	bf44      	itt	mi
   35cbc:	f043 0308 	orrmi.w	r3, r3, #8
   35cc0:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   35cc2:	2d00      	cmp	r5, #0
   35cc4:	d0f0      	beq.n	35ca8 <update_cache+0xc>
	if (preempt_ok != 0) {
   35cc6:	b949      	cbnz	r1, 35cdc <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   35cc8:	7b53      	ldrb	r3, [r2, #13]
   35cca:	06db      	lsls	r3, r3, #27
   35ccc:	d106      	bne.n	35cdc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   35cce:	69ab      	ldr	r3, [r5, #24]
   35cd0:	b923      	cbnz	r3, 35cdc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   35cd2:	89d3      	ldrh	r3, [r2, #14]
   35cd4:	2b7f      	cmp	r3, #127	; 0x7f
   35cd6:	d901      	bls.n	35cdc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   35cd8:	62a2      	str	r2, [r4, #40]	; 0x28
}
   35cda:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   35cdc:	4295      	cmp	r5, r2
   35cde:	d001      	beq.n	35ce4 <update_cache+0x48>
			z_reset_time_slice();
   35ce0:	f7ff ff5e 	bl	35ba0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   35ce4:	62a5      	str	r5, [r4, #40]	; 0x28
}
   35ce6:	e7f8      	b.n	35cda <update_cache+0x3e>
   35ce8:	20024098 	.word	0x20024098

00035cec <k_sched_unlock>:
{
   35cec:	b510      	push	{r4, lr}
	__asm__ volatile(
   35cee:	f04f 0320 	mov.w	r3, #32
   35cf2:	f3ef 8411 	mrs	r4, BASEPRI
   35cf6:	f383 8811 	msr	BASEPRI, r3
   35cfa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   35cfe:	4b08      	ldr	r3, [pc, #32]	; (35d20 <k_sched_unlock+0x34>)
		update_cache(0);
   35d00:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   35d02:	689a      	ldr	r2, [r3, #8]
   35d04:	7bd3      	ldrb	r3, [r2, #15]
   35d06:	3301      	adds	r3, #1
   35d08:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   35d0a:	f7ff ffc7 	bl	35c9c <update_cache>
	__asm__ volatile(
   35d0e:	f384 8811 	msr	BASEPRI, r4
   35d12:	f3bf 8f6f 	isb	sy
}
   35d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   35d1a:	f004 bfaa 	b.w	3ac72 <z_reschedule_unlocked>
   35d1e:	bf00      	nop
   35d20:	20024098 	.word	0x20024098

00035d24 <ready_thread>:
{
   35d24:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   35d26:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   35d2a:	7b43      	ldrb	r3, [r0, #13]
   35d2c:	2a00      	cmp	r2, #0
   35d2e:	db2c      	blt.n	35d8a <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   35d30:	06db      	lsls	r3, r3, #27
   35d32:	d12a      	bne.n	35d8a <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   35d34:	6983      	ldr	r3, [r0, #24]
   35d36:	bb43      	cbnz	r3, 35d8a <ready_thread+0x66>
	return list->head == list;
   35d38:	4a15      	ldr	r2, [pc, #84]	; (35d90 <ready_thread+0x6c>)
   35d3a:	4611      	mov	r1, r2
   35d3c:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35d40:	428c      	cmp	r4, r1
   35d42:	bf18      	it	ne
   35d44:	4623      	movne	r3, r4
   35d46:	2b00      	cmp	r3, #0
   35d48:	bf38      	it	cc
   35d4a:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   35d4c:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   35d4e:	b1b3      	cbz	r3, 35d7e <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   35d50:	f990 600e 	ldrsb.w	r6, [r0, #14]
   35d54:	f993 500e 	ldrsb.w	r5, [r3, #14]
   35d58:	42ae      	cmp	r6, r5
   35d5a:	db03      	blt.n	35d64 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   35d5c:	42a3      	cmp	r3, r4
   35d5e:	d00e      	beq.n	35d7e <ready_thread+0x5a>
   35d60:	681b      	ldr	r3, [r3, #0]
   35d62:	e7f4      	b.n	35d4e <ready_thread+0x2a>
	node->prev = successor->prev;
   35d64:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   35d66:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   35d6a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   35d6c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   35d6e:	7b43      	ldrb	r3, [r0, #13]
   35d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
   35d74:	7343      	strb	r3, [r0, #13]
}
   35d76:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   35d78:	2000      	movs	r0, #0
   35d7a:	f7ff bf8f 	b.w	35c9c <update_cache>
	node->prev = list->tail;
   35d7e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   35d82:	6b13      	ldr	r3, [r2, #48]	; 0x30
   35d84:	6018      	str	r0, [r3, #0]
	list->tail = node;
   35d86:	6310      	str	r0, [r2, #48]	; 0x30
}
   35d88:	e7f1      	b.n	35d6e <ready_thread+0x4a>
}
   35d8a:	bc70      	pop	{r4, r5, r6}
   35d8c:	4770      	bx	lr
   35d8e:	bf00      	nop
   35d90:	20024098 	.word	0x20024098

00035d94 <z_sched_start>:
{
   35d94:	b510      	push	{r4, lr}
	__asm__ volatile(
   35d96:	f04f 0220 	mov.w	r2, #32
   35d9a:	f3ef 8411 	mrs	r4, BASEPRI
   35d9e:	f382 8811 	msr	BASEPRI, r2
   35da2:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   35da6:	7b42      	ldrb	r2, [r0, #13]
   35da8:	0751      	lsls	r1, r2, #29
   35daa:	d404      	bmi.n	35db6 <z_sched_start+0x22>
	__asm__ volatile(
   35dac:	f384 8811 	msr	BASEPRI, r4
   35db0:	f3bf 8f6f 	isb	sy
}
   35db4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   35db6:	f022 0204 	bic.w	r2, r2, #4
   35dba:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   35dbc:	f7ff ffb2 	bl	35d24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   35dc0:	4621      	mov	r1, r4
}
   35dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   35dc6:	4801      	ldr	r0, [pc, #4]	; (35dcc <z_sched_start+0x38>)
   35dc8:	f7ff bf2c 	b.w	35c24 <z_reschedule>
   35dcc:	2002cba0 	.word	0x2002cba0

00035dd0 <z_impl_k_thread_resume>:
{
   35dd0:	b510      	push	{r4, lr}
	__asm__ volatile(
   35dd2:	f04f 0220 	mov.w	r2, #32
   35dd6:	f3ef 8411 	mrs	r4, BASEPRI
   35dda:	f382 8811 	msr	BASEPRI, r2
   35dde:	f3bf 8f6f 	isb	sy
	if (!z_is_thread_suspended(thread)) {
   35de2:	7b42      	ldrb	r2, [r0, #13]
   35de4:	06d1      	lsls	r1, r2, #27
   35de6:	d404      	bmi.n	35df2 <z_impl_k_thread_resume+0x22>
	__asm__ volatile(
   35de8:	f384 8811 	msr	BASEPRI, r4
   35dec:	f3bf 8f6f 	isb	sy
}
   35df0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   35df2:	f022 0210 	bic.w	r2, r2, #16
   35df6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   35df8:	f7ff ff94 	bl	35d24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   35dfc:	4621      	mov	r1, r4
}
   35dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   35e02:	4801      	ldr	r0, [pc, #4]	; (35e08 <z_impl_k_thread_resume+0x38>)
   35e04:	f7ff bf0e 	b.w	35c24 <z_reschedule>
   35e08:	2002cba0 	.word	0x2002cba0

00035e0c <move_thread_to_end_of_prio_q>:
{
   35e0c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   35e0e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   35e12:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   35e14:	2b00      	cmp	r3, #0
   35e16:	da02      	bge.n	35e1e <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   35e18:	4817      	ldr	r0, [pc, #92]	; (35e78 <move_thread_to_end_of_prio_q+0x6c>)
   35e1a:	f7ff ff29 	bl	35c70 <z_priq_dumb_remove>
	return list->head == list;
   35e1e:	4a17      	ldr	r2, [pc, #92]	; (35e7c <move_thread_to_end_of_prio_q+0x70>)
   35e20:	4610      	mov	r0, r2
   35e22:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   35e26:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35e28:	4283      	cmp	r3, r0
   35e2a:	bf08      	it	eq
   35e2c:	2300      	moveq	r3, #0
   35e2e:	2b00      	cmp	r3, #0
   35e30:	bf38      	it	cc
   35e32:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   35e34:	b1d3      	cbz	r3, 35e6c <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   35e36:	f991 600e 	ldrsb.w	r6, [r1, #14]
   35e3a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   35e3e:	42ae      	cmp	r6, r5
   35e40:	db03      	blt.n	35e4a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   35e42:	42a3      	cmp	r3, r4
   35e44:	d012      	beq.n	35e6c <move_thread_to_end_of_prio_q+0x60>
   35e46:	681b      	ldr	r3, [r3, #0]
   35e48:	e7f4      	b.n	35e34 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   35e4a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   35e4c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   35e50:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   35e52:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   35e54:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   35e56:	6890      	ldr	r0, [r2, #8]
   35e58:	f063 037f 	orn	r3, r3, #127	; 0x7f
   35e5c:	734b      	strb	r3, [r1, #13]
   35e5e:	1a43      	subs	r3, r0, r1
   35e60:	4258      	negs	r0, r3
   35e62:	4158      	adcs	r0, r3
}
   35e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   35e68:	f7ff bf18 	b.w	35c9c <update_cache>
	node->prev = list->tail;
   35e6c:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   35e70:	6b13      	ldr	r3, [r2, #48]	; 0x30
   35e72:	6019      	str	r1, [r3, #0]
	list->tail = node;
   35e74:	6311      	str	r1, [r2, #48]	; 0x30
}
   35e76:	e7ed      	b.n	35e54 <move_thread_to_end_of_prio_q+0x48>
   35e78:	200240c4 	.word	0x200240c4
   35e7c:	20024098 	.word	0x20024098

00035e80 <z_time_slice>:
{
   35e80:	4601      	mov	r1, r0
   35e82:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   35e84:	f04f 0320 	mov.w	r3, #32
   35e88:	f3ef 8411 	mrs	r4, BASEPRI
   35e8c:	f383 8811 	msr	BASEPRI, r3
   35e90:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   35e94:	4b16      	ldr	r3, [pc, #88]	; (35ef0 <z_time_slice+0x70>)
   35e96:	4a17      	ldr	r2, [pc, #92]	; (35ef4 <z_time_slice+0x74>)
   35e98:	6898      	ldr	r0, [r3, #8]
   35e9a:	6815      	ldr	r5, [r2, #0]
   35e9c:	42a8      	cmp	r0, r5
   35e9e:	461d      	mov	r5, r3
   35ea0:	d106      	bne.n	35eb0 <z_time_slice+0x30>
			z_reset_time_slice();
   35ea2:	f7ff fe7d 	bl	35ba0 <z_reset_time_slice>
	__asm__ volatile(
   35ea6:	f384 8811 	msr	BASEPRI, r4
   35eaa:	f3bf 8f6f 	isb	sy
}
   35eae:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   35eb0:	2600      	movs	r6, #0
   35eb2:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   35eb4:	4a10      	ldr	r2, [pc, #64]	; (35ef8 <z_time_slice+0x78>)
   35eb6:	6812      	ldr	r2, [r2, #0]
   35eb8:	b1ba      	cbz	r2, 35eea <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   35eba:	89c2      	ldrh	r2, [r0, #14]
   35ebc:	2a7f      	cmp	r2, #127	; 0x7f
   35ebe:	d814      	bhi.n	35eea <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   35ec0:	7b42      	ldrb	r2, [r0, #13]
   35ec2:	06d2      	lsls	r2, r2, #27
   35ec4:	d111      	bne.n	35eea <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   35ec6:	4a0d      	ldr	r2, [pc, #52]	; (35efc <z_time_slice+0x7c>)
   35ec8:	f990 600e 	ldrsb.w	r6, [r0, #14]
   35ecc:	6812      	ldr	r2, [r2, #0]
   35ece:	4296      	cmp	r6, r2
   35ed0:	db0b      	blt.n	35eea <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   35ed2:	4a0b      	ldr	r2, [pc, #44]	; (35f00 <z_time_slice+0x80>)
   35ed4:	4290      	cmp	r0, r2
   35ed6:	d008      	beq.n	35eea <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   35ed8:	695a      	ldr	r2, [r3, #20]
   35eda:	428a      	cmp	r2, r1
   35edc:	dc02      	bgt.n	35ee4 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   35ede:	f7ff ff95 	bl	35e0c <move_thread_to_end_of_prio_q>
   35ee2:	e7de      	b.n	35ea2 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   35ee4:	1a52      	subs	r2, r2, r1
   35ee6:	615a      	str	r2, [r3, #20]
   35ee8:	e7dd      	b.n	35ea6 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   35eea:	2300      	movs	r3, #0
   35eec:	616b      	str	r3, [r5, #20]
   35eee:	e7da      	b.n	35ea6 <z_time_slice+0x26>
   35ef0:	20024098 	.word	0x20024098
   35ef4:	200240d0 	.word	0x200240d0
   35ef8:	200240d8 	.word	0x200240d8
   35efc:	200240d4 	.word	0x200240d4
   35f00:	200231b8 	.word	0x200231b8

00035f04 <z_impl_k_thread_suspend>:
{
   35f04:	b570      	push	{r4, r5, r6, lr}
   35f06:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   35f08:	3018      	adds	r0, #24
   35f0a:	f005 f80d 	bl	3af28 <z_abort_timeout>
	__asm__ volatile(
   35f0e:	f04f 0320 	mov.w	r3, #32
   35f12:	f3ef 8611 	mrs	r6, BASEPRI
   35f16:	f383 8811 	msr	BASEPRI, r3
   35f1a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   35f1e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   35f22:	2b00      	cmp	r3, #0
   35f24:	da07      	bge.n	35f36 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   35f26:	4621      	mov	r1, r4
   35f28:	480e      	ldr	r0, [pc, #56]	; (35f64 <z_impl_k_thread_suspend+0x60>)
   35f2a:	f7ff fea1 	bl	35c70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   35f2e:	7b63      	ldrb	r3, [r4, #13]
   35f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   35f34:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   35f36:	4d0c      	ldr	r5, [pc, #48]	; (35f68 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   35f38:	7b63      	ldrb	r3, [r4, #13]
   35f3a:	68a8      	ldr	r0, [r5, #8]
   35f3c:	f043 0310 	orr.w	r3, r3, #16
   35f40:	7363      	strb	r3, [r4, #13]
   35f42:	1b03      	subs	r3, r0, r4
   35f44:	4258      	negs	r0, r3
   35f46:	4158      	adcs	r0, r3
   35f48:	f7ff fea8 	bl	35c9c <update_cache>
	__asm__ volatile(
   35f4c:	f386 8811 	msr	BASEPRI, r6
   35f50:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   35f54:	68ab      	ldr	r3, [r5, #8]
   35f56:	42a3      	cmp	r3, r4
   35f58:	d103      	bne.n	35f62 <z_impl_k_thread_suspend+0x5e>
}
   35f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   35f5e:	f004 be88 	b.w	3ac72 <z_reschedule_unlocked>
}
   35f62:	bd70      	pop	{r4, r5, r6, pc}
   35f64:	200240c4 	.word	0x200240c4
   35f68:	20024098 	.word	0x20024098

00035f6c <z_thread_single_abort>:
{
   35f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35f70:	4604      	mov	r4, r0
	__asm__ volatile(
   35f72:	f04f 0320 	mov.w	r3, #32
   35f76:	f3ef 8211 	mrs	r2, BASEPRI
   35f7a:	f383 8811 	msr	BASEPRI, r3
   35f7e:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   35f82:	7b43      	ldrb	r3, [r0, #13]
   35f84:	f013 0f28 	tst.w	r3, #40	; 0x28
   35f88:	d005      	beq.n	35f96 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   35f8a:	f382 8811 	msr	BASEPRI, r2
   35f8e:	f3bf 8f6f 	isb	sy
}
   35f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   35f96:	f043 0320 	orr.w	r3, r3, #32
   35f9a:	7343      	strb	r3, [r0, #13]
   35f9c:	f382 8811 	msr	BASEPRI, r2
   35fa0:	f3bf 8f6f 	isb	sy
   35fa4:	3018      	adds	r0, #24
   35fa6:	f004 ffbf 	bl	3af28 <z_abort_timeout>
	__asm__ volatile(
   35faa:	f04f 0320 	mov.w	r3, #32
   35fae:	f3ef 8611 	mrs	r6, BASEPRI
   35fb2:	f383 8811 	msr	BASEPRI, r3
   35fb6:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   35fba:	7b63      	ldrb	r3, [r4, #13]
   35fbc:	06d8      	lsls	r0, r3, #27
   35fbe:	d116      	bne.n	35fee <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   35fc0:	69a2      	ldr	r2, [r4, #24]
   35fc2:	b9a2      	cbnz	r2, 35fee <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   35fc4:	0619      	lsls	r1, r3, #24
   35fc6:	d507      	bpl.n	35fd8 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   35fc8:	4621      	mov	r1, r4
   35fca:	4826      	ldr	r0, [pc, #152]	; (36064 <z_thread_single_abort+0xf8>)
   35fcc:	f7ff fe50 	bl	35c70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   35fd0:	7b63      	ldrb	r3, [r4, #13]
   35fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   35fd6:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   35fd8:	4b23      	ldr	r3, [pc, #140]	; (36068 <z_thread_single_abort+0xfc>)
   35fda:	6898      	ldr	r0, [r3, #8]
   35fdc:	1b02      	subs	r2, r0, r4
   35fde:	4250      	negs	r0, r2
   35fe0:	4150      	adcs	r0, r2
   35fe2:	f7ff fe5b 	bl	35c9c <update_cache>
			waiter->base.pended_on = NULL;
   35fe6:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   35fe8:	f104 0830 	add.w	r8, r4, #48	; 0x30
   35fec:	e01e      	b.n	3602c <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   35fee:	079b      	lsls	r3, r3, #30
   35ff0:	d5f9      	bpl.n	35fe6 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   35ff2:	4621      	mov	r1, r4
   35ff4:	68a0      	ldr	r0, [r4, #8]
   35ff6:	f7ff fe3b 	bl	35c70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   35ffa:	7b63      	ldrb	r3, [r4, #13]
   35ffc:	f023 0302 	bic.w	r3, r3, #2
   36000:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   36002:	2300      	movs	r3, #0
   36004:	60a3      	str	r3, [r4, #8]
   36006:	e7ee      	b.n	35fe6 <z_thread_single_abort+0x7a>
   36008:	f105 0018 	add.w	r0, r5, #24
   3600c:	f004 ff8c 	bl	3af28 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   36010:	68a8      	ldr	r0, [r5, #8]
   36012:	4629      	mov	r1, r5
   36014:	f7ff fe2c 	bl	35c70 <z_priq_dumb_remove>
   36018:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   3601a:	4628      	mov	r0, r5
   3601c:	f023 0302 	bic.w	r3, r3, #2
   36020:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   36022:	60af      	str	r7, [r5, #8]
   36024:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   36028:	f7ff fe7c 	bl	35d24 <ready_thread>
	return list->head == list;
   3602c:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3602e:	4545      	cmp	r5, r8
   36030:	d001      	beq.n	36036 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   36032:	2d00      	cmp	r5, #0
   36034:	d1e8      	bne.n	36008 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   36036:	4b0c      	ldr	r3, [pc, #48]	; (36068 <z_thread_single_abort+0xfc>)
   36038:	689a      	ldr	r2, [r3, #8]
   3603a:	4b0c      	ldr	r3, [pc, #48]	; (3606c <z_thread_single_abort+0x100>)
   3603c:	429a      	cmp	r2, r3
   3603e:	d102      	bne.n	36046 <z_thread_single_abort+0xda>
			update_cache(1);
   36040:	2001      	movs	r0, #1
   36042:	f7ff fe2b 	bl	35c9c <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   36046:	7b63      	ldrb	r3, [r4, #13]
   36048:	f043 0308 	orr.w	r3, r3, #8
   3604c:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   3604e:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   36050:	f386 8811 	msr	BASEPRI, r6
   36054:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   36058:	2b00      	cmp	r3, #0
   3605a:	d09a      	beq.n	35f92 <z_thread_single_abort+0x26>
		fn_abort(thread);
   3605c:	4620      	mov	r0, r4
}
   3605e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   36062:	4718      	bx	r3
   36064:	200240c4 	.word	0x200240c4
   36068:	20024098 	.word	0x20024098
   3606c:	200231b8 	.word	0x200231b8

00036070 <unready_thread>:
{
   36070:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   36072:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   36076:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   36078:	2b00      	cmp	r3, #0
   3607a:	da06      	bge.n	3608a <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   3607c:	4807      	ldr	r0, [pc, #28]	; (3609c <unready_thread+0x2c>)
   3607e:	f7ff fdf7 	bl	35c70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   36082:	7b4b      	ldrb	r3, [r1, #13]
   36084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   36088:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   3608a:	4b05      	ldr	r3, [pc, #20]	; (360a0 <unready_thread+0x30>)
   3608c:	6898      	ldr	r0, [r3, #8]
   3608e:	1a43      	subs	r3, r0, r1
   36090:	4258      	negs	r0, r3
   36092:	4158      	adcs	r0, r3
}
   36094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   36098:	f7ff be00 	b.w	35c9c <update_cache>
   3609c:	200240c4 	.word	0x200240c4
   360a0:	20024098 	.word	0x20024098

000360a4 <pend>:
{
   360a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   360a8:	4606      	mov	r6, r0
   360aa:	4614      	mov	r4, r2
   360ac:	461d      	mov	r5, r3
	__asm__ volatile(
   360ae:	f04f 0320 	mov.w	r3, #32
   360b2:	f3ef 8711 	mrs	r7, BASEPRI
   360b6:	f383 8811 	msr	BASEPRI, r3
   360ba:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   360be:	f004 fe3e 	bl	3ad3e <add_to_waitq_locked>
	__asm__ volatile(
   360c2:	f387 8811 	msr	BASEPRI, r7
   360c6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   360ca:	1c6b      	adds	r3, r5, #1
   360cc:	bf08      	it	eq
   360ce:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   360d2:	d008      	beq.n	360e6 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   360d4:	4622      	mov	r2, r4
   360d6:	462b      	mov	r3, r5
   360d8:	f106 0018 	add.w	r0, r6, #24
   360dc:	4903      	ldr	r1, [pc, #12]	; (360ec <pend+0x48>)
}
   360de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   360e2:	f000 bb13 	b.w	3670c <z_add_timeout>
   360e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   360ea:	bf00      	nop
   360ec:	0003acff 	.word	0x0003acff

000360f0 <z_pend_curr>:
{
   360f0:	b510      	push	{r4, lr}
   360f2:	460c      	mov	r4, r1
	pending_current = _current;
   360f4:	4b06      	ldr	r3, [pc, #24]	; (36110 <z_pend_curr+0x20>)
{
   360f6:	4611      	mov	r1, r2
	pending_current = _current;
   360f8:	6898      	ldr	r0, [r3, #8]
   360fa:	4b06      	ldr	r3, [pc, #24]	; (36114 <z_pend_curr+0x24>)
   360fc:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   360fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   36102:	f7ff ffcf 	bl	360a4 <pend>
   36106:	4620      	mov	r0, r4
}
   36108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3610c:	f004 bd72 	b.w	3abf4 <z_swap_irqlock>
   36110:	20024098 	.word	0x20024098
   36114:	200240d0 	.word	0x200240d0

00036118 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   36118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3611a:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   3611c:	f004 ff45 	bl	3afaa <z_tick_get_32>
   36120:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   36122:	f04f 0320 	mov.w	r3, #32
   36126:	f3ef 8711 	mrs	r7, BASEPRI
   3612a:	f383 8811 	msr	BASEPRI, r3
   3612e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   36132:	4e0d      	ldr	r6, [pc, #52]	; (36168 <z_tick_sleep.part.0+0x50>)
   36134:	4b0d      	ldr	r3, [pc, #52]	; (3616c <z_tick_sleep.part.0+0x54>)
   36136:	68b0      	ldr	r0, [r6, #8]
   36138:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   3613a:	f7ff ff99 	bl	36070 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   3613e:	68b0      	ldr	r0, [r6, #8]
   36140:	490b      	ldr	r1, [pc, #44]	; (36170 <z_tick_sleep.part.0+0x58>)
   36142:	462a      	mov	r2, r5
   36144:	17eb      	asrs	r3, r5, #31
   36146:	3018      	adds	r0, #24
   36148:	f000 fae0 	bl	3670c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   3614c:	68b2      	ldr	r2, [r6, #8]
   3614e:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   36150:	7b53      	ldrb	r3, [r2, #13]
   36152:	f043 0310 	orr.w	r3, r3, #16
   36156:	7353      	strb	r3, [r2, #13]
   36158:	f004 fd4c 	bl	3abf4 <z_swap_irqlock>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   3615c:	f004 ff25 	bl	3afaa <z_tick_get_32>
   36160:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   36162:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   36166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36168:	20024098 	.word	0x20024098
   3616c:	200240d0 	.word	0x200240d0
   36170:	0003acff 	.word	0x0003acff

00036174 <z_set_prio>:
{
   36174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36178:	4604      	mov	r4, r0
   3617a:	f04f 0320 	mov.w	r3, #32
   3617e:	f3ef 8811 	mrs	r8, BASEPRI
   36182:	f383 8811 	msr	BASEPRI, r3
   36186:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3618a:	7b43      	ldrb	r3, [r0, #13]
   3618c:	b24e      	sxtb	r6, r1
   3618e:	06db      	lsls	r3, r3, #27
   36190:	d12e      	bne.n	361f0 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   36192:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   36194:	bb65      	cbnz	r5, 361f0 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   36196:	4f18      	ldr	r7, [pc, #96]	; (361f8 <z_set_prio+0x84>)
   36198:	4621      	mov	r1, r4
   3619a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   3619e:	f7ff fd67 	bl	35c70 <z_priq_dumb_remove>
	return list->head == list;
   361a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   361a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   361a6:	4283      	cmp	r3, r0
   361a8:	bf18      	it	ne
   361aa:	461d      	movne	r5, r3
   361ac:	2d00      	cmp	r5, #0
   361ae:	bf38      	it	cc
   361b0:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   361b2:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   361b4:	b1b5      	cbz	r5, 361e4 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   361b6:	f995 100e 	ldrsb.w	r1, [r5, #14]
   361ba:	42b1      	cmp	r1, r6
   361bc:	dc03      	bgt.n	361c6 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   361be:	42aa      	cmp	r2, r5
   361c0:	d010      	beq.n	361e4 <z_set_prio+0x70>
   361c2:	682d      	ldr	r5, [r5, #0]
   361c4:	e7f6      	b.n	361b4 <z_set_prio+0x40>
	node->prev = successor->prev;
   361c6:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   361c8:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   361cc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   361ce:	606c      	str	r4, [r5, #4]
			update_cache(1);
   361d0:	2001      	movs	r0, #1
   361d2:	f7ff fd63 	bl	35c9c <update_cache>
   361d6:	2001      	movs	r0, #1
	__asm__ volatile(
   361d8:	f388 8811 	msr	BASEPRI, r8
   361dc:	f3bf 8f6f 	isb	sy
}
   361e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   361e4:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   361e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   361ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   361ec:	633c      	str	r4, [r7, #48]	; 0x30
}
   361ee:	e7ef      	b.n	361d0 <z_set_prio+0x5c>
			thread->base.prio = prio;
   361f0:	2000      	movs	r0, #0
   361f2:	73a6      	strb	r6, [r4, #14]
   361f4:	e7f0      	b.n	361d8 <z_set_prio+0x64>
   361f6:	bf00      	nop
   361f8:	20024098 	.word	0x20024098

000361fc <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   361fc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   361fe:	4b04      	ldr	r3, [pc, #16]	; (36210 <z_sched_init+0x14>)
   36200:	4608      	mov	r0, r1
   36202:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   36206:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   3620a:	f7ff bcdf 	b.w	35bcc <k_sched_time_slice_set>
   3620e:	bf00      	nop
   36210:	20024098 	.word	0x20024098

00036214 <z_impl_k_yield>:
{
   36214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   36216:	4c24      	ldr	r4, [pc, #144]	; (362a8 <z_impl_k_yield+0x94>)
   36218:	4b24      	ldr	r3, [pc, #144]	; (362ac <z_impl_k_yield+0x98>)
   3621a:	68a2      	ldr	r2, [r4, #8]
   3621c:	429a      	cmp	r2, r3
   3621e:	d030      	beq.n	36282 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   36220:	f04f 0320 	mov.w	r3, #32
   36224:	f3ef 8511 	mrs	r5, BASEPRI
   36228:	f383 8811 	msr	BASEPRI, r3
   3622c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   36230:	68a1      	ldr	r1, [r4, #8]
   36232:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   36236:	f7ff fd1b 	bl	35c70 <z_priq_dumb_remove>
	return list->head == list;
   3623a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   3623c:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3623e:	4283      	cmp	r3, r0
   36240:	bf08      	it	eq
   36242:	2300      	moveq	r3, #0
   36244:	2b00      	cmp	r3, #0
   36246:	bf38      	it	cc
   36248:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3624a:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3624c:	b32b      	cbz	r3, 3629a <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   3624e:	f992 700e 	ldrsb.w	r7, [r2, #14]
   36252:	f993 600e 	ldrsb.w	r6, [r3, #14]
   36256:	42b7      	cmp	r7, r6
   36258:	db03      	blt.n	36262 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   3625a:	428b      	cmp	r3, r1
   3625c:	d01d      	beq.n	3629a <z_impl_k_yield+0x86>
   3625e:	681b      	ldr	r3, [r3, #0]
   36260:	e7f4      	b.n	3624c <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   36262:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   36264:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   36268:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   3626a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   3626c:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   3626e:	2001      	movs	r0, #1
   36270:	f063 037f 	orn	r3, r3, #127	; 0x7f
   36274:	7353      	strb	r3, [r2, #13]
   36276:	f7ff fd11 	bl	35c9c <update_cache>
	__asm__ volatile(
   3627a:	f385 8811 	msr	BASEPRI, r5
   3627e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   36282:	f04f 0320 	mov.w	r3, #32
   36286:	f3ef 8011 	mrs	r0, BASEPRI
   3628a:	f383 8811 	msr	BASEPRI, r3
   3628e:	f3bf 8f6f 	isb	sy
}
   36292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void) z_swap_irqlock(arch_irq_lock());
   36296:	f004 bcad 	b.w	3abf4 <z_swap_irqlock>
	node->prev = list->tail;
   3629a:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   3629e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   362a0:	601a      	str	r2, [r3, #0]
	list->tail = node;
   362a2:	6322      	str	r2, [r4, #48]	; 0x30
}
   362a4:	e7e2      	b.n	3626c <z_impl_k_yield+0x58>
   362a6:	bf00      	nop
   362a8:	20024098 	.word	0x20024098
   362ac:	200231b8 	.word	0x200231b8

000362b0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   362b0:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   362b2:	3301      	adds	r3, #1
   362b4:	bf08      	it	eq
   362b6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   362ba:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   362bc:	d106      	bne.n	362cc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   362be:	4b0b      	ldr	r3, [pc, #44]	; (362ec <z_impl_k_sleep+0x3c>)
   362c0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   362c2:	f7ff fe1f 	bl	35f04 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   362c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   362ca:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   362cc:	4604      	mov	r4, r0
	if (ticks == 0) {
   362ce:	b948      	cbnz	r0, 362e4 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   362d0:	f7ff ffa0 	bl	36214 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   362d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   362d8:	fb84 3400 	smull	r3, r4, r4, r0
   362dc:	0bd8      	lsrs	r0, r3, #15
   362de:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   362e2:	e7f2      	b.n	362ca <z_impl_k_sleep+0x1a>
   362e4:	f7ff ff18 	bl	36118 <z_tick_sleep.part.0>
   362e8:	4604      	mov	r4, r0
   362ea:	e7f3      	b.n	362d4 <z_impl_k_sleep+0x24>
   362ec:	20024098 	.word	0x20024098

000362f0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   362f0:	4b01      	ldr	r3, [pc, #4]	; (362f8 <z_impl_k_current_get+0x8>)
   362f2:	6898      	ldr	r0, [r3, #8]
   362f4:	4770      	bx	lr
   362f6:	bf00      	nop
   362f8:	20024098 	.word	0x20024098

000362fc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   362fc:	b538      	push	{r3, r4, r5, lr}
   362fe:	4604      	mov	r4, r0
   36300:	f04f 0320 	mov.w	r3, #32
   36304:	f3ef 8511 	mrs	r5, BASEPRI
   36308:	f383 8811 	msr	BASEPRI, r3
   3630c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   36310:	f004 fd40 	bl	3ad94 <z_unpend_first_thread>

	if (thread != NULL) {
   36314:	b150      	cbz	r0, 3632c <z_impl_k_sem_give+0x30>
   36316:	2200      	movs	r2, #0
   36318:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   3631c:	f004 fcdf 	bl	3acde <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   36320:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   36322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   36326:	4807      	ldr	r0, [pc, #28]	; (36344 <z_impl_k_sem_give+0x48>)
   36328:	f7ff bc7c 	b.w	35c24 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3632c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   36330:	429a      	cmp	r2, r3
   36332:	bf18      	it	ne
   36334:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   36336:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   36338:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3633a:	f104 0010 	add.w	r0, r4, #16
   3633e:	f004 ffd5 	bl	3b2ec <z_handle_obj_poll_events>
}
   36342:	e7ed      	b.n	36320 <z_impl_k_sem_give+0x24>
   36344:	2002cba0 	.word	0x2002cba0

00036348 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   36348:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3634a:	4614      	mov	r4, r2
   3634c:	461d      	mov	r5, r3
   3634e:	f04f 0320 	mov.w	r3, #32
   36352:	f3ef 8111 	mrs	r1, BASEPRI
   36356:	f383 8811 	msr	BASEPRI, r3
   3635a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   3635e:	6883      	ldr	r3, [r0, #8]
   36360:	b143      	cbz	r3, 36374 <z_impl_k_sem_take+0x2c>
		sem->count--;
   36362:	3b01      	subs	r3, #1
   36364:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   36366:	f381 8811 	msr	BASEPRI, r1
   3636a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   3636e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   36370:	b003      	add	sp, #12
   36372:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36374:	ea54 0305 	orrs.w	r3, r4, r5
   36378:	d106      	bne.n	36388 <z_impl_k_sem_take+0x40>
   3637a:	f381 8811 	msr	BASEPRI, r1
   3637e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   36382:	f06f 000f 	mvn.w	r0, #15
   36386:	e7f3      	b.n	36370 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   36388:	4602      	mov	r2, r0
   3638a:	e9cd 4500 	strd	r4, r5, [sp]
   3638e:	4802      	ldr	r0, [pc, #8]	; (36398 <z_impl_k_sem_take+0x50>)
   36390:	f7ff feae 	bl	360f0 <z_pend_curr>
	return ret;
   36394:	e7ec      	b.n	36370 <z_impl_k_sem_take+0x28>
   36396:	bf00      	nop
   36398:	2002cba0 	.word	0x2002cba0

0003639c <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   3639c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   3639e:	4c08      	ldr	r4, [pc, #32]	; (363c0 <k_sys_work_q_init+0x24>)
   363a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   363a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   363a8:	4620      	mov	r0, r4
   363aa:	4906      	ldr	r1, [pc, #24]	; (363c4 <k_sys_work_q_init+0x28>)
   363ac:	f000 f8f6 	bl	3659c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   363b0:	4905      	ldr	r1, [pc, #20]	; (363c8 <k_sys_work_q_init+0x2c>)
   363b2:	f104 0018 	add.w	r0, r4, #24
   363b6:	f004 fd3c 	bl	3ae32 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   363ba:	2000      	movs	r0, #0
   363bc:	bd10      	pop	{r4, pc}
   363be:	bf00      	nop
   363c0:	20023348 	.word	0x20023348
   363c4:	200311d8 	.word	0x200311d8
   363c8:	000409b3 	.word	0x000409b3

000363cc <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	uint32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   363cc:	4b09      	ldr	r3, [pc, #36]	; (363f4 <z_check_stack_sentinel+0x28>)
   363ce:	689b      	ldr	r3, [r3, #8]
   363d0:	7b5a      	ldrb	r2, [r3, #13]
   363d2:	07d2      	lsls	r2, r2, #31
   363d4:	d40d      	bmi.n	363f2 <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (uint32_t *)_current->stack_info.start;
   363d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
	if (*stack != STACK_SENTINEL) {
   363d8:	681a      	ldr	r2, [r3, #0]
   363da:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   363de:	d008      	beq.n	363f2 <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   363e0:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   363e4:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   363e6:	4040      	eors	r0, r0
   363e8:	f380 8811 	msr	BASEPRI, r0
   363ec:	f04f 0002 	mov.w	r0, #2
   363f0:	df02      	svc	2
	}
}
   363f2:	4770      	bx	lr
   363f4:	20024098 	.word	0x20024098

000363f8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   363f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   363fc:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   36400:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   36404:	9d0e      	ldr	r5, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   36406:	3207      	adds	r2, #7
	thread_base->user_options = (uint8_t)options;
   36408:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   3640a:	2504      	movs	r5, #4
   3640c:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   3640e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   36410:	f022 0607 	bic.w	r6, r2, #7
	thread_base->prio = priority;
   36414:	7385      	strb	r5, [r0, #14]
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
   36416:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0

	thread_base->sched_locked = 0U;
   3641a:	2500      	movs	r5, #0
{
   3641c:	4604      	mov	r4, r0
	node->prev = NULL;
   3641e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   36422:	73c5      	strb	r5, [r0, #15]
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
   36424:	600a      	str	r2, [r1, #0]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   36426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	new_thread->stack_info.size = stack_buf_size;
   36428:	e9c0 161b 	strd	r1, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   3642c:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3642e:	9202      	str	r2, [sp, #8]
   36430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   36432:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   36436:	9201      	str	r2, [sp, #4]
   36438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3643a:	9200      	str	r2, [sp, #0]
   3643c:	4642      	mov	r2, r8
   3643e:	f7ef fc1d 	bl	25c7c <arch_new_thread>
	if (!_current) {
   36442:	4b05      	ldr	r3, [pc, #20]	; (36458 <z_setup_new_thread+0x60>)
	new_thread->fn_abort = NULL;
   36444:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   36448:	689b      	ldr	r3, [r3, #8]
   3644a:	b103      	cbz	r3, 3644e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   3644c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
   3644e:	4640      	mov	r0, r8
   36450:	67a3      	str	r3, [r4, #120]	; 0x78
   36452:	b004      	add	sp, #16
   36454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36458:	20024098 	.word	0x20024098

0003645c <z_impl_k_thread_create>:
{
   3645c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3645e:	2500      	movs	r5, #0
{
   36460:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   36462:	9505      	str	r5, [sp, #20]
   36464:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   36466:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3646a:	9504      	str	r5, [sp, #16]
   3646c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   3646e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   36470:	9503      	str	r5, [sp, #12]
   36472:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   36474:	9502      	str	r5, [sp, #8]
   36476:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   36478:	9501      	str	r5, [sp, #4]
   3647a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3647c:	9500      	str	r5, [sp, #0]
   3647e:	f7ff ffbb 	bl	363f8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   36482:	1c7b      	adds	r3, r7, #1
   36484:	bf08      	it	eq
   36486:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   3648a:	d005      	beq.n	36498 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3648c:	ea56 0307 	orrs.w	r3, r6, r7
   36490:	d105      	bne.n	3649e <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   36492:	4620      	mov	r0, r4
   36494:	f7ff fc7e 	bl	35d94 <z_sched_start>
}
   36498:	4620      	mov	r0, r4
   3649a:	b007      	add	sp, #28
   3649c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3649e:	4632      	mov	r2, r6
   364a0:	463b      	mov	r3, r7
   364a2:	4903      	ldr	r1, [pc, #12]	; (364b0 <z_impl_k_thread_create+0x54>)
   364a4:	f104 0018 	add.w	r0, r4, #24
   364a8:	f000 f930 	bl	3670c <z_add_timeout>
   364ac:	e7f4      	b.n	36498 <z_impl_k_thread_create+0x3c>
   364ae:	bf00      	nop
   364b0:	0003acff 	.word	0x0003acff

000364b4 <z_init_static_threads>:
{
   364b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   364b8:	4e2a      	ldr	r6, [pc, #168]	; (36564 <z_init_static_threads+0xb0>)
   364ba:	4d2b      	ldr	r5, [pc, #172]	; (36568 <z_init_static_threads+0xb4>)
   364bc:	46b0      	mov	r8, r6
{
   364be:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   364c0:	42b5      	cmp	r5, r6
   364c2:	f105 0430 	add.w	r4, r5, #48	; 0x30
   364c6:	d310      	bcc.n	364ea <z_init_static_threads+0x36>
	k_sched_lock();
   364c8:	f7ff fbbe 	bl	35c48 <k_sched_lock>
   364cc:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   364d0:	f240 36e7 	movw	r6, #999	; 0x3e7
   364d4:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   364d6:	4c24      	ldr	r4, [pc, #144]	; (36568 <z_init_static_threads+0xb4>)
   364d8:	f8df a090 	ldr.w	sl, [pc, #144]	; 3656c <z_init_static_threads+0xb8>
   364dc:	4544      	cmp	r4, r8
   364de:	d321      	bcc.n	36524 <z_init_static_threads+0x70>
}
   364e0:	b006      	add	sp, #24
   364e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   364e6:	f7ff bc01 	b.w	35cec <k_sched_unlock>
		z_setup_new_thread(
   364ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
   364ee:	9305      	str	r3, [sp, #20]
   364f0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   364f4:	9304      	str	r3, [sp, #16]
   364f6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   364fa:	9303      	str	r3, [sp, #12]
   364fc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   36500:	9302      	str	r3, [sp, #8]
   36502:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   36506:	9301      	str	r3, [sp, #4]
   36508:	f854 3c20 	ldr.w	r3, [r4, #-32]
   3650c:	9300      	str	r3, [sp, #0]
   3650e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   36512:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   36516:	f7ff ff6f 	bl	363f8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   3651a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   3651e:	65dd      	str	r5, [r3, #92]	; 0x5c
   36520:	4625      	mov	r5, r4
   36522:	e7cd      	b.n	364c0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   36524:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36526:	1c5a      	adds	r2, r3, #1
   36528:	d00d      	beq.n	36546 <z_init_static_threads+0x92>
   3652a:	4630      	mov	r0, r6
   3652c:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   3652e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   36532:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   36536:	42b9      	cmp	r1, r7
   36538:	bf08      	it	eq
   3653a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   3653c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3653e:	d104      	bne.n	3654a <z_init_static_threads+0x96>
	z_sched_start(thread);
   36540:	4628      	mov	r0, r5
   36542:	f7ff fc27 	bl	35d94 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   36546:	3430      	adds	r4, #48	; 0x30
   36548:	e7c8      	b.n	364dc <z_init_static_threads+0x28>
   3654a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3654e:	2300      	movs	r3, #0
   36550:	f7e6 f932 	bl	1c7b8 <__aeabi_uldivmod>
   36554:	4602      	mov	r2, r0
   36556:	460b      	mov	r3, r1
   36558:	f105 0018 	add.w	r0, r5, #24
   3655c:	4651      	mov	r1, sl
   3655e:	f000 f8d5 	bl	3670c <z_add_timeout>
   36562:	e7f0      	b.n	36546 <z_init_static_threads+0x92>
   36564:	2002074c 	.word	0x2002074c
   36568:	2002071c 	.word	0x2002071c
   3656c:	0003acff 	.word	0x0003acff

00036570 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   36570:	b508      	push	{r3, lr}
	__asm__ volatile(
   36572:	f04f 0320 	mov.w	r3, #32
   36576:	f3ef 8411 	mrs	r4, BASEPRI
   3657a:	f383 8811 	msr	BASEPRI, r3
   3657e:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   36582:	4b05      	ldr	r3, [pc, #20]	; (36598 <z_self_abort+0x28>)
   36584:	6898      	ldr	r0, [r3, #8]
   36586:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   36588:	f7ff fcbc 	bl	35f04 <z_impl_k_thread_suspend>
	z_check_stack_sentinel();
   3658c:	f7ff ff1e 	bl	363cc <z_check_stack_sentinel>
	ret = arch_swap(key);
   36590:	4620      	mov	r0, r4
   36592:	f7ef fa9f 	bl	25ad4 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   36596:	bf00      	nop
   36598:	20024098 	.word	0x20024098

0003659c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   3659c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   365a0:	b08a      	sub	sp, #40	; 0x28
   365a2:	4604      	mov	r4, r0
   365a4:	461d      	mov	r5, r3
   365a6:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   365aa:	f004 fb0c 	bl	3abc6 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   365ae:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   365b2:	2000      	movs	r0, #0
   365b4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   365b8:	f04f 0800 	mov.w	r8, #0
   365bc:	f04f 0900 	mov.w	r9, #0
   365c0:	e9cd 5003 	strd	r5, r0, [sp, #12]
   365c4:	e9cd 0001 	strd	r0, r0, [sp, #4]
   365c8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   365cc:	4630      	mov	r0, r6
   365ce:	4b05      	ldr	r3, [pc, #20]	; (365e4 <k_work_q_start+0x48>)
   365d0:	9400      	str	r4, [sp, #0]
   365d2:	f7ff ff43 	bl	3645c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   365d6:	4630      	mov	r0, r6
   365d8:	4903      	ldr	r1, [pc, #12]	; (365e8 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   365da:	b00a      	add	sp, #40	; 0x28
   365dc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   365e0:	f004 bc27 	b.w	3ae32 <z_impl_k_thread_name_set>
   365e4:	00037da5 	.word	0x00037da5
   365e8:	000409bc 	.word	0x000409bc

000365ec <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   365ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   365f0:	4606      	mov	r6, r0
   365f2:	460d      	mov	r5, r1
   365f4:	4690      	mov	r8, r2
   365f6:	4699      	mov	r9, r3
   365f8:	f04f 0320 	mov.w	r3, #32
   365fc:	f3ef 8711 	mrs	r7, BASEPRI
   36600:	f383 8811 	msr	BASEPRI, r3
   36604:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   36608:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   3660a:	b17b      	cbz	r3, 3662c <k_delayed_work_submit_to_queue+0x40>
   3660c:	4283      	cmp	r3, r0
   3660e:	d128      	bne.n	36662 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   36610:	4628      	mov	r0, r5
   36612:	f004 fc2c 	bl	3ae6e <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   36616:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   3661a:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   3661c:	d008      	beq.n	36630 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   3661e:	2800      	cmp	r0, #0
   36620:	da07      	bge.n	36632 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   36622:	f387 8811 	msr	BASEPRI, r7
   36626:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   3662a:	e00f      	b.n	3664c <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   3662c:	2800      	cmp	r0, #0
   3662e:	d0ef      	beq.n	36610 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   36630:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   36632:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   36636:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   36638:	d10b      	bne.n	36652 <k_delayed_work_submit_to_queue+0x66>
   3663a:	f387 8811 	msr	BASEPRI, r7
   3663e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   36642:	4629      	mov	r1, r5
   36644:	4630      	mov	r0, r6
   36646:	f004 fbf9 	bl	3ae3c <k_work_submit_to_queue>
		return 0;
   3664a:	2400      	movs	r4, #0
}
   3664c:	4620      	mov	r0, r4
   3664e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   36652:	4642      	mov	r2, r8
   36654:	464b      	mov	r3, r9
   36656:	4904      	ldr	r1, [pc, #16]	; (36668 <k_delayed_work_submit_to_queue+0x7c>)
   36658:	f105 0010 	add.w	r0, r5, #16
   3665c:	f000 f856 	bl	3670c <z_add_timeout>
   36660:	e7df      	b.n	36622 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   36662:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   36666:	e7dc      	b.n	36622 <k_delayed_work_submit_to_queue+0x36>
   36668:	0003ae65 	.word	0x0003ae65

0003666c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   3666c:	4b03      	ldr	r3, [pc, #12]	; (3667c <elapsed+0x10>)
   3666e:	681b      	ldr	r3, [r3, #0]
   36670:	b90b      	cbnz	r3, 36676 <elapsed+0xa>
   36672:	f7ef b941 	b.w	258f8 <z_clock_elapsed>
}
   36676:	2000      	movs	r0, #0
   36678:	4770      	bx	lr
   3667a:	bf00      	nop
   3667c:	200240dc 	.word	0x200240dc

00036680 <remove_timeout>:
{
   36680:	b530      	push	{r4, r5, lr}
   36682:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   36684:	b168      	cbz	r0, 366a2 <remove_timeout+0x22>
   36686:	4a0a      	ldr	r2, [pc, #40]	; (366b0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   36688:	6852      	ldr	r2, [r2, #4]
   3668a:	4290      	cmp	r0, r2
   3668c:	d009      	beq.n	366a2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   3668e:	b143      	cbz	r3, 366a2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   36690:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   36694:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   36698:	1912      	adds	r2, r2, r4
   3669a:	eb45 0101 	adc.w	r1, r5, r1
   3669e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   366a2:	6842      	ldr	r2, [r0, #4]
   366a4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   366a6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   366a8:	2300      	movs	r3, #0
	node->prev = NULL;
   366aa:	e9c0 3300 	strd	r3, r3, [r0]
}
   366ae:	bd30      	pop	{r4, r5, pc}
   366b0:	2002045c 	.word	0x2002045c

000366b4 <next_timeout>:
	return list->head == list;
   366b4:	4b13      	ldr	r3, [pc, #76]	; (36704 <next_timeout+0x50>)

static int32_t next_timeout(void)
{
   366b6:	b510      	push	{r4, lr}
   366b8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   366ba:	429c      	cmp	r4, r3
   366bc:	bf08      	it	eq
   366be:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   366c0:	f7ff ffd4 	bl	3666c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   366c4:	b1cc      	cbz	r4, 366fa <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   366c6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   366ca:	1a12      	subs	r2, r2, r0
   366cc:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   366d0:	2a01      	cmp	r2, #1
   366d2:	f173 0100 	sbcs.w	r1, r3, #0
   366d6:	db13      	blt.n	36700 <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   366d8:	4610      	mov	r0, r2
   366da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   366de:	4619      	mov	r1, r3
   366e0:	2300      	movs	r3, #0
   366e2:	4282      	cmp	r2, r0
   366e4:	eb73 0401 	sbcs.w	r4, r3, r1
   366e8:	da00      	bge.n	366ec <next_timeout+0x38>
   366ea:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   366ec:	4b06      	ldr	r3, [pc, #24]	; (36708 <next_timeout+0x54>)
   366ee:	695b      	ldr	r3, [r3, #20]
   366f0:	b113      	cbz	r3, 366f8 <next_timeout+0x44>
   366f2:	4298      	cmp	r0, r3
   366f4:	bfa8      	it	ge
   366f6:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   366f8:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   366fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   366fe:	e7f5      	b.n	366ec <next_timeout+0x38>
   36700:	2000      	movs	r0, #0
   36702:	e7f3      	b.n	366ec <next_timeout+0x38>
   36704:	2002045c 	.word	0x2002045c
   36708:	20024098 	.word	0x20024098

0003670c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   3670c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36710:	9101      	str	r1, [sp, #4]
   36712:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   36714:	1c4b      	adds	r3, r1, #1
   36716:	bf08      	it	eq
   36718:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   3671c:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3671e:	d06b      	beq.n	367f8 <z_add_timeout+0xec>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   36720:	f06f 0301 	mvn.w	r3, #1
   36724:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
   36728:	1c54      	adds	r4, r2, #1
   3672a:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   3672e:	ebb3 0804 	subs.w	r8, r3, r4
   36732:	eb6b 0905 	sbc.w	r9, fp, r5
   36736:	f1b8 0f00 	cmp.w	r8, #0
   3673a:	f179 0300 	sbcs.w	r3, r9, #0
   3673e:	db0f      	blt.n	36760 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   36740:	f7ff ff94 	bl	3666c <elapsed>
   36744:	f06f 0301 	mvn.w	r3, #1
   36748:	4a32      	ldr	r2, [pc, #200]	; (36814 <z_add_timeout+0x108>)
   3674a:	e9d2 1c00 	ldrd	r1, ip, [r2]
   3674e:	1a5b      	subs	r3, r3, r1
   36750:	eb6b 020c 	sbc.w	r2, fp, ip
   36754:	1b1e      	subs	r6, r3, r4
   36756:	eb62 0705 	sbc.w	r7, r2, r5
   3675a:	1a34      	subs	r4, r6, r0
   3675c:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   36760:	9b01      	ldr	r3, [sp, #4]
   36762:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   36766:	f04f 0320 	mov.w	r3, #32
   3676a:	f3ef 8611 	mrs	r6, BASEPRI
   3676e:	f383 8811 	msr	BASEPRI, r3
   36772:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   36776:	f7ff ff79 	bl	3666c <elapsed>
	ticks = MAX(1, ticks);
   3677a:	2c01      	cmp	r4, #1
   3677c:	f175 0300 	sbcs.w	r3, r5, #0
   36780:	bfbc      	itt	lt
   36782:	2401      	movlt	r4, #1
   36784:	2500      	movlt	r5, #0
	return list->head == list;
   36786:	4b24      	ldr	r3, [pc, #144]	; (36818 <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
   36788:	1824      	adds	r4, r4, r0
   3678a:	681a      	ldr	r2, [r3, #0]
   3678c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36790:	429a      	cmp	r2, r3
   36792:	e9ca 4504 	strd	r4, r5, [sl, #16]
   36796:	d001      	beq.n	3679c <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   36798:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   3679a:	b952      	cbnz	r2, 367b2 <z_add_timeout+0xa6>
	node->prev = list->tail;
   3679c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   3679e:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   367a2:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   367a6:	685a      	ldr	r2, [r3, #4]
   367a8:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   367ac:	f8c3 a004 	str.w	sl, [r3, #4]
}
   367b0:	e014      	b.n	367dc <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   367b2:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   367b6:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   367ba:	4544      	cmp	r4, r8
   367bc:	eb75 0109 	sbcs.w	r1, r5, r9
   367c0:	da1d      	bge.n	367fe <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
   367c2:	ebb8 0004 	subs.w	r0, r8, r4
   367c6:	eb69 0105 	sbc.w	r1, r9, r5
   367ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   367ce:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   367d0:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   367d4:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   367d8:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   367dc:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   367de:	429a      	cmp	r2, r3
   367e0:	d006      	beq.n	367f0 <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   367e2:	4592      	cmp	sl, r2
   367e4:	d104      	bne.n	367f0 <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
   367e6:	f7ff ff65 	bl	366b4 <next_timeout>
   367ea:	2100      	movs	r1, #0
   367ec:	f7ef f81c 	bl	25828 <z_clock_set_timeout>
	__asm__ volatile(
   367f0:	f386 8811 	msr	BASEPRI, r6
   367f4:	f3bf 8f6f 	isb	sy
		}
	}
}
   367f8:	b003      	add	sp, #12
   367fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   367fe:	ebb4 0008 	subs.w	r0, r4, r8
   36802:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   36806:	42ba      	cmp	r2, r7
   36808:	e9ca 0104 	strd	r0, r1, [sl, #16]
   3680c:	d0c6      	beq.n	3679c <z_add_timeout+0x90>
   3680e:	6812      	ldr	r2, [r2, #0]
   36810:	e7c3      	b.n	3679a <z_add_timeout+0x8e>
   36812:	bf00      	nop
   36814:	20023428 	.word	0x20023428
   36818:	2002045c 	.word	0x2002045c

0003681c <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   3681c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36820:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   36822:	f7ff fb2d 	bl	35e80 <z_time_slice>
	__asm__ volatile(
   36826:	f04f 0320 	mov.w	r3, #32
   3682a:	f3ef 8411 	mrs	r4, BASEPRI
   3682e:	f383 8811 	msr	BASEPRI, r3
   36832:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   36836:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 368e8 <z_clock_announce+0xcc>
   3683a:	4d2a      	ldr	r5, [pc, #168]	; (368e4 <z_clock_announce+0xc8>)
   3683c:	4651      	mov	r1, sl
	return list->head == list;
   3683e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 368ec <z_clock_announce+0xd0>
   36842:	602e      	str	r6, [r5, #0]
   36844:	f8d5 c000 	ldr.w	ip, [r5]
   36848:	f8db 0000 	ldr.w	r0, [fp]
   3684c:	4662      	mov	r2, ip
   3684e:	e9da 8900 	ldrd	r8, r9, [sl]
   36852:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36854:	4558      	cmp	r0, fp
   36856:	e9cd 2300 	strd	r2, r3, [sp]
   3685a:	d00d      	beq.n	36878 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   3685c:	b160      	cbz	r0, 36878 <z_clock_announce+0x5c>
   3685e:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   36862:	45b4      	cmp	ip, r6
   36864:	41bb      	sbcs	r3, r7
   36866:	da1d      	bge.n	368a4 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   36868:	9b00      	ldr	r3, [sp, #0]
   3686a:	ebb6 0c03 	subs.w	ip, r6, r3
   3686e:	9b01      	ldr	r3, [sp, #4]
   36870:	eb67 0603 	sbc.w	r6, r7, r3
   36874:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   36878:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   3687a:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   3687c:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   3687e:	eb13 0208 	adds.w	r2, r3, r8
   36882:	9b01      	ldr	r3, [sp, #4]
   36884:	eb43 0309 	adc.w	r3, r3, r9
   36888:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   3688c:	f7ff ff12 	bl	366b4 <next_timeout>
   36890:	4631      	mov	r1, r6
   36892:	f7ee ffc9 	bl	25828 <z_clock_set_timeout>
	__asm__ volatile(
   36896:	f384 8811 	msr	BASEPRI, r4
   3689a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3689e:	b003      	add	sp, #12
   368a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   368a4:	2200      	movs	r2, #0
   368a6:	2300      	movs	r3, #0
		curr_tick += dt;
   368a8:	eb18 0806 	adds.w	r8, r8, r6
   368ac:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   368b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   368b4:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   368b8:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   368bc:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   368be:	f7ff fedf 	bl	36680 <remove_timeout>
   368c2:	f384 8811 	msr	BASEPRI, r4
   368c6:	f3bf 8f6f 	isb	sy
		t->fn(t);
   368ca:	6883      	ldr	r3, [r0, #8]
   368cc:	4798      	blx	r3
	__asm__ volatile(
   368ce:	f04f 0320 	mov.w	r3, #32
   368d2:	f3ef 8411 	mrs	r4, BASEPRI
   368d6:	f383 8811 	msr	BASEPRI, r3
   368da:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   368de:	4902      	ldr	r1, [pc, #8]	; (368e8 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   368e0:	e7b0      	b.n	36844 <z_clock_announce+0x28>
   368e2:	bf00      	nop
   368e4:	200240dc 	.word	0x200240dc
   368e8:	20023428 	.word	0x20023428
   368ec:	2002045c 	.word	0x2002045c

000368f0 <z_tick_get>:

int64_t z_tick_get(void)
{
   368f0:	b510      	push	{r4, lr}
   368f2:	f04f 0320 	mov.w	r3, #32
   368f6:	f3ef 8411 	mrs	r4, BASEPRI
   368fa:	f383 8811 	msr	BASEPRI, r3
   368fe:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   36902:	f7ee fff9 	bl	258f8 <z_clock_elapsed>
   36906:	4b06      	ldr	r3, [pc, #24]	; (36920 <z_tick_get+0x30>)
   36908:	e9d3 2300 	ldrd	r2, r3, [r3]
   3690c:	1812      	adds	r2, r2, r0
   3690e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   36912:	f384 8811 	msr	BASEPRI, r4
   36916:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   3691a:	4610      	mov	r0, r2
   3691c:	4619      	mov	r1, r3
   3691e:	bd10      	pop	{r4, pc}
   36920:	20023428 	.word	0x20023428

00036924 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   36924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   36926:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   3692a:	1c56      	adds	r6, r2, #1
   3692c:	f143 0700 	adc.w	r7, r3, #0
   36930:	2f00      	cmp	r7, #0
   36932:	bf08      	it	eq
   36934:	2e02      	cmpeq	r6, #2
{
   36936:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   36938:	d302      	bcc.n	36940 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3693a:	490c      	ldr	r1, [pc, #48]	; (3696c <z_timer_expiration_handler+0x48>)
   3693c:	f7ff fee6 	bl	3670c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   36940:	6b23      	ldr	r3, [r4, #48]	; 0x30
   36942:	3301      	adds	r3, #1
   36944:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   36946:	6a23      	ldr	r3, [r4, #32]
   36948:	b10b      	cbz	r3, 3694e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   3694a:	4620      	mov	r0, r4
   3694c:	4798      	blx	r3
	return list->head == list;
   3694e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36952:	42a5      	cmp	r5, r4
   36954:	d009      	beq.n	3696a <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   36956:	b145      	cbz	r5, 3696a <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   36958:	4628      	mov	r0, r5
   3695a:	f004 f96e 	bl	3ac3a <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   3695e:	4628      	mov	r0, r5
   36960:	f004 f9bd 	bl	3acde <z_ready_thread>
   36964:	2300      	movs	r3, #0
   36966:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   3696a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3696c:	00036925 	.word	0x00036925

00036970 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   36970:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   36974:	4619      	mov	r1, r3
   36976:	4606      	mov	r6, r0
   36978:	4610      	mov	r0, r2
   3697a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   3697e:	1c4c      	adds	r4, r1, #1
   36980:	bf08      	it	eq
   36982:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   36986:	4680      	mov	r8, r0
   36988:	4689      	mov	r9, r1
   3698a:	d047      	beq.n	36a1c <z_impl_k_timer_start+0xac>
   3698c:	4614      	mov	r4, r2
   3698e:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   36990:	ea54 0305 	orrs.w	r3, r4, r5
   36994:	d016      	beq.n	369c4 <z_impl_k_timer_start+0x54>
   36996:	f06f 0301 	mvn.w	r3, #1
   3699a:	ebb3 0a02 	subs.w	sl, r3, r2
   3699e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   369a2:	eb63 0b05 	sbc.w	fp, r3, r5
   369a6:	f1ba 0f00 	cmp.w	sl, #0
   369aa:	f17b 0300 	sbcs.w	r3, fp, #0
   369ae:	da09      	bge.n	369c4 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   369b0:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   369b4:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   369b8:	2c01      	cmp	r4, #1
   369ba:	f175 0300 	sbcs.w	r3, r5, #0
   369be:	bfbc      	itt	lt
   369c0:	2401      	movlt	r4, #1
   369c2:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   369c4:	f06f 0301 	mvn.w	r3, #1
   369c8:	1a1b      	subs	r3, r3, r0
   369ca:	9300      	str	r3, [sp, #0]
   369cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   369d0:	eb63 0301 	sbc.w	r3, r3, r1
   369d4:	9301      	str	r3, [sp, #4]
   369d6:	e9dd 2300 	ldrd	r2, r3, [sp]
   369da:	2a00      	cmp	r2, #0
   369dc:	f173 0300 	sbcs.w	r3, r3, #0
   369e0:	da0c      	bge.n	369fc <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   369e2:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   369e6:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   369ea:	f1b8 0f00 	cmp.w	r8, #0
   369ee:	f179 0300 	sbcs.w	r3, r9, #0
   369f2:	bfbc      	itt	lt
   369f4:	f04f 0800 	movlt.w	r8, #0
   369f8:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   369fc:	4630      	mov	r0, r6
   369fe:	f004 fa93 	bl	3af28 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   36a02:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   36a04:	4642      	mov	r2, r8
	timer->status = 0U;
   36a06:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   36a08:	4630      	mov	r0, r6
   36a0a:	464b      	mov	r3, r9
   36a0c:	4905      	ldr	r1, [pc, #20]	; (36a24 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   36a0e:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   36a12:	b002      	add	sp, #8
   36a14:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   36a18:	f7ff be78 	b.w	3670c <z_add_timeout>
}
   36a1c:	b002      	add	sp, #8
   36a1e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   36a22:	bf00      	nop
   36a24:	00036925 	.word	0x00036925

00036a28 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   36a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   36a2c:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   36a2e:	4b2a      	ldr	r3, [pc, #168]	; (36ad8 <z_impl_k_poll+0xb0>)
{
   36a30:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   36a32:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   36a34:	2301      	movs	r3, #1
   36a36:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   36a3a:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   36a3e:	ea52 0307 	orrs.w	r3, r2, r7
   36a42:	bf0c      	ite	eq
   36a44:	2301      	moveq	r3, #1
   36a46:	2300      	movne	r3, #0
   36a48:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   36a4c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   36a4e:	f004 fbec 	bl	3b22a <register_events>
   36a52:	4681      	mov	r9, r0
	__asm__ volatile(
   36a54:	f04f 0320 	mov.w	r3, #32
   36a58:	f3ef 8a11 	mrs	sl, BASEPRI
   36a5c:	f383 8811 	msr	BASEPRI, r3
   36a60:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   36a64:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   36a68:	b964      	cbnz	r4, 36a84 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   36a6a:	4601      	mov	r1, r0
   36a6c:	4652      	mov	r2, sl
   36a6e:	4640      	mov	r0, r8
   36a70:	f004 fb09 	bl	3b086 <clear_event_registrations>
	__asm__ volatile(
   36a74:	f38a 8811 	msr	BASEPRI, sl
   36a78:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   36a7c:	4620      	mov	r0, r4
   36a7e:	b004      	add	sp, #16
   36a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   36a84:	2300      	movs	r3, #0
   36a86:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36a8a:	ea56 0307 	orrs.w	r3, r6, r7
   36a8e:	d106      	bne.n	36a9e <z_impl_k_poll+0x76>
   36a90:	f38a 8811 	msr	BASEPRI, sl
   36a94:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   36a98:	f06f 040a 	mvn.w	r4, #10
   36a9c:	e7ee      	b.n	36a7c <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   36a9e:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   36aa0:	4651      	mov	r1, sl
   36aa2:	e9cd 6700 	strd	r6, r7, [sp]
   36aa6:	480d      	ldr	r0, [pc, #52]	; (36adc <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   36aa8:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   36aac:	f7ff fb20 	bl	360f0 <z_pend_curr>
   36ab0:	4604      	mov	r4, r0
	__asm__ volatile(
   36ab2:	f04f 0320 	mov.w	r3, #32
   36ab6:	f3ef 8511 	mrs	r5, BASEPRI
   36aba:	f383 8811 	msr	BASEPRI, r3
   36abe:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   36ac2:	462a      	mov	r2, r5
   36ac4:	4649      	mov	r1, r9
   36ac6:	4640      	mov	r0, r8
   36ac8:	f004 fadd 	bl	3b086 <clear_event_registrations>
	__asm__ volatile(
   36acc:	f385 8811 	msr	BASEPRI, r5
   36ad0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   36ad4:	e7d2      	b.n	36a7c <z_impl_k_poll+0x54>
   36ad6:	bf00      	nop
   36ad8:	20024098 	.word	0x20024098
   36adc:	2002cba0 	.word	0x2002cba0

00036ae0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   36ae0:	b538      	push	{r3, r4, r5, lr}
   36ae2:	4603      	mov	r3, r0
	__asm__ volatile(
   36ae4:	f04f 0220 	mov.w	r2, #32
   36ae8:	f3ef 8511 	mrs	r5, BASEPRI
   36aec:	f382 8811 	msr	BASEPRI, r2
   36af0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   36af4:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   36af6:	2101      	movs	r1, #1
   36af8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   36afa:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   36afc:	4283      	cmp	r3, r0
   36afe:	d106      	bne.n	36b0e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   36b00:	f385 8811 	msr	BASEPRI, r5
   36b04:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   36b08:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   36b0a:	4620      	mov	r0, r4
   36b0c:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   36b0e:	e9d0 3200 	ldrd	r3, r2, [r0]
   36b12:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   36b14:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   36b16:	2300      	movs	r3, #0
	node->prev = NULL;
   36b18:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   36b1c:	f004 faf2 	bl	3b104 <signal_poll_event>
	z_reschedule(&lock, key);
   36b20:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   36b22:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   36b24:	4801      	ldr	r0, [pc, #4]	; (36b2c <z_impl_k_poll_signal_raise+0x4c>)
   36b26:	f7ff f87d 	bl	35c24 <z_reschedule>
	return rc;
   36b2a:	e7ee      	b.n	36b0a <z_impl_k_poll_signal_raise+0x2a>
   36b2c:	2002cba0 	.word	0x2002cba0

00036b30 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   36b30:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   36b32:	4801      	ldr	r0, [pc, #4]	; (36b38 <k_malloc+0x8>)
   36b34:	f004 bbe8 	b.w	3b308 <k_mem_pool_malloc>
   36b38:	20020464 	.word	0x20020464

00036b3c <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   36b3c:	b507      	push	{r0, r1, r2, lr}
   36b3e:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   36b40:	f004 f96d 	bl	3ae1e <k_is_in_isr>
   36b44:	9901      	ldr	r1, [sp, #4]
   36b46:	b948      	cbnz	r0, 36b5c <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   36b48:	4b07      	ldr	r3, [pc, #28]	; (36b68 <z_thread_malloc+0x2c>)
   36b4a:	689b      	ldr	r3, [r3, #8]
   36b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (pool) {
   36b4e:	b13b      	cbz	r3, 36b60 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   36b50:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   36b52:	b003      	add	sp, #12
   36b54:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   36b58:	f004 bbd6 	b.w	3b308 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   36b5c:	4b03      	ldr	r3, [pc, #12]	; (36b6c <z_thread_malloc+0x30>)
   36b5e:	e7f7      	b.n	36b50 <z_thread_malloc+0x14>
}
   36b60:	b003      	add	sp, #12
   36b62:	f85d fb04 	ldr.w	pc, [sp], #4
   36b66:	bf00      	nop
   36b68:	20024098 	.word	0x20024098
   36b6c:	20020464 	.word	0x20020464

00036b70 <_printf_float>:
   36b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36b74:	ed2d 8b02 	vpush	{d8}
   36b78:	b08d      	sub	sp, #52	; 0x34
   36b7a:	460c      	mov	r4, r1
   36b7c:	4616      	mov	r6, r2
   36b7e:	461f      	mov	r7, r3
   36b80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   36b84:	4605      	mov	r5, r0
   36b86:	f000 fcf9 	bl	3757c <_localeconv_r>
   36b8a:	f8d0 a000 	ldr.w	sl, [r0]
   36b8e:	4650      	mov	r0, sl
   36b90:	f7e6 fa6e 	bl	1d070 <strlen>
   36b94:	2300      	movs	r3, #0
   36b96:	f894 b018 	ldrb.w	fp, [r4, #24]
   36b9a:	ee08 0a10 	vmov	s16, r0
   36b9e:	930a      	str	r3, [sp, #40]	; 0x28
   36ba0:	6823      	ldr	r3, [r4, #0]
   36ba2:	9305      	str	r3, [sp, #20]
   36ba4:	f8d8 3000 	ldr.w	r3, [r8]
   36ba8:	3307      	adds	r3, #7
   36baa:	f023 0307 	bic.w	r3, r3, #7
   36bae:	f103 0208 	add.w	r2, r3, #8
   36bb2:	f8c8 2000 	str.w	r2, [r8]
   36bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   36bba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   36bbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   36bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   36bc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   36bca:	f8cd 8018 	str.w	r8, [sp, #24]
   36bce:	9307      	str	r3, [sp, #28]
   36bd0:	4b9e      	ldr	r3, [pc, #632]	; (36e4c <_printf_float+0x2dc>)
   36bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   36bd6:	f7e6 fa03 	bl	1cfe0 <__aeabi_dcmpun>
   36bda:	bb88      	cbnz	r0, 36c40 <_printf_float+0xd0>
   36bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   36be0:	4b9a      	ldr	r3, [pc, #616]	; (36e4c <_printf_float+0x2dc>)
   36be2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   36be6:	f7e6 f9dd 	bl	1cfa4 <__aeabi_dcmple>
   36bea:	bb48      	cbnz	r0, 36c40 <_printf_float+0xd0>
   36bec:	2200      	movs	r2, #0
   36bee:	2300      	movs	r3, #0
   36bf0:	4640      	mov	r0, r8
   36bf2:	4649      	mov	r1, r9
   36bf4:	f7e6 f9cc 	bl	1cf90 <__aeabi_dcmplt>
   36bf8:	b110      	cbz	r0, 36c00 <_printf_float+0x90>
   36bfa:	232d      	movs	r3, #45	; 0x2d
   36bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   36c00:	4b93      	ldr	r3, [pc, #588]	; (36e50 <_printf_float+0x2e0>)
   36c02:	4894      	ldr	r0, [pc, #592]	; (36e54 <_printf_float+0x2e4>)
   36c04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   36c08:	bf94      	ite	ls
   36c0a:	4698      	movls	r8, r3
   36c0c:	4680      	movhi	r8, r0
   36c0e:	2303      	movs	r3, #3
   36c10:	f04f 0900 	mov.w	r9, #0
   36c14:	6123      	str	r3, [r4, #16]
   36c16:	9b05      	ldr	r3, [sp, #20]
   36c18:	f023 0204 	bic.w	r2, r3, #4
   36c1c:	6022      	str	r2, [r4, #0]
   36c1e:	4633      	mov	r3, r6
   36c20:	aa0b      	add	r2, sp, #44	; 0x2c
   36c22:	4621      	mov	r1, r4
   36c24:	4628      	mov	r0, r5
   36c26:	9700      	str	r7, [sp, #0]
   36c28:	f004 fc8b 	bl	3b542 <_printf_common>
   36c2c:	3001      	adds	r0, #1
   36c2e:	f040 8090 	bne.w	36d52 <_printf_float+0x1e2>
   36c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   36c36:	b00d      	add	sp, #52	; 0x34
   36c38:	ecbd 8b02 	vpop	{d8}
   36c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36c40:	4642      	mov	r2, r8
   36c42:	464b      	mov	r3, r9
   36c44:	4640      	mov	r0, r8
   36c46:	4649      	mov	r1, r9
   36c48:	f7e6 f9ca 	bl	1cfe0 <__aeabi_dcmpun>
   36c4c:	b140      	cbz	r0, 36c60 <_printf_float+0xf0>
   36c4e:	464b      	mov	r3, r9
   36c50:	4881      	ldr	r0, [pc, #516]	; (36e58 <_printf_float+0x2e8>)
   36c52:	2b00      	cmp	r3, #0
   36c54:	bfbc      	itt	lt
   36c56:	232d      	movlt	r3, #45	; 0x2d
   36c58:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   36c5c:	4b7f      	ldr	r3, [pc, #508]	; (36e5c <_printf_float+0x2ec>)
   36c5e:	e7d1      	b.n	36c04 <_printf_float+0x94>
   36c60:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   36c64:	6863      	ldr	r3, [r4, #4]
   36c66:	9206      	str	r2, [sp, #24]
   36c68:	1c5a      	adds	r2, r3, #1
   36c6a:	d13f      	bne.n	36cec <_printf_float+0x17c>
   36c6c:	2306      	movs	r3, #6
   36c6e:	6063      	str	r3, [r4, #4]
   36c70:	9b05      	ldr	r3, [sp, #20]
   36c72:	4628      	mov	r0, r5
   36c74:	6861      	ldr	r1, [r4, #4]
   36c76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   36c7a:	2300      	movs	r3, #0
   36c7c:	9303      	str	r3, [sp, #12]
   36c7e:	ab0a      	add	r3, sp, #40	; 0x28
   36c80:	6022      	str	r2, [r4, #0]
   36c82:	e9cd b301 	strd	fp, r3, [sp, #4]
   36c86:	ab09      	add	r3, sp, #36	; 0x24
   36c88:	ec49 8b10 	vmov	d0, r8, r9
   36c8c:	9300      	str	r3, [sp, #0]
   36c8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   36c92:	f004 fbb6 	bl	3b402 <__cvt>
   36c96:	9b06      	ldr	r3, [sp, #24]
   36c98:	4680      	mov	r8, r0
   36c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
   36c9c:	2b47      	cmp	r3, #71	; 0x47
   36c9e:	d108      	bne.n	36cb2 <_printf_float+0x142>
   36ca0:	1cc8      	adds	r0, r1, #3
   36ca2:	db02      	blt.n	36caa <_printf_float+0x13a>
   36ca4:	6863      	ldr	r3, [r4, #4]
   36ca6:	4299      	cmp	r1, r3
   36ca8:	dd41      	ble.n	36d2e <_printf_float+0x1be>
   36caa:	f1ab 0b02 	sub.w	fp, fp, #2
   36cae:	fa5f fb8b 	uxtb.w	fp, fp
   36cb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   36cb6:	d820      	bhi.n	36cfa <_printf_float+0x18a>
   36cb8:	3901      	subs	r1, #1
   36cba:	465a      	mov	r2, fp
   36cbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
   36cc0:	9109      	str	r1, [sp, #36]	; 0x24
   36cc2:	f004 fc00 	bl	3b4c6 <__exponent>
   36cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   36cc8:	4681      	mov	r9, r0
   36cca:	1813      	adds	r3, r2, r0
   36ccc:	2a01      	cmp	r2, #1
   36cce:	6123      	str	r3, [r4, #16]
   36cd0:	dc02      	bgt.n	36cd8 <_printf_float+0x168>
   36cd2:	6822      	ldr	r2, [r4, #0]
   36cd4:	07d2      	lsls	r2, r2, #31
   36cd6:	d501      	bpl.n	36cdc <_printf_float+0x16c>
   36cd8:	3301      	adds	r3, #1
   36cda:	6123      	str	r3, [r4, #16]
   36cdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   36ce0:	2b00      	cmp	r3, #0
   36ce2:	d09c      	beq.n	36c1e <_printf_float+0xae>
   36ce4:	232d      	movs	r3, #45	; 0x2d
   36ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   36cea:	e798      	b.n	36c1e <_printf_float+0xae>
   36cec:	9a06      	ldr	r2, [sp, #24]
   36cee:	2a47      	cmp	r2, #71	; 0x47
   36cf0:	d1be      	bne.n	36c70 <_printf_float+0x100>
   36cf2:	2b00      	cmp	r3, #0
   36cf4:	d1bc      	bne.n	36c70 <_printf_float+0x100>
   36cf6:	2301      	movs	r3, #1
   36cf8:	e7b9      	b.n	36c6e <_printf_float+0xfe>
   36cfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   36cfe:	d118      	bne.n	36d32 <_printf_float+0x1c2>
   36d00:	2900      	cmp	r1, #0
   36d02:	6863      	ldr	r3, [r4, #4]
   36d04:	dd0b      	ble.n	36d1e <_printf_float+0x1ae>
   36d06:	6121      	str	r1, [r4, #16]
   36d08:	b913      	cbnz	r3, 36d10 <_printf_float+0x1a0>
   36d0a:	6822      	ldr	r2, [r4, #0]
   36d0c:	07d0      	lsls	r0, r2, #31
   36d0e:	d502      	bpl.n	36d16 <_printf_float+0x1a6>
   36d10:	3301      	adds	r3, #1
   36d12:	440b      	add	r3, r1
   36d14:	6123      	str	r3, [r4, #16]
   36d16:	f04f 0900 	mov.w	r9, #0
   36d1a:	65a1      	str	r1, [r4, #88]	; 0x58
   36d1c:	e7de      	b.n	36cdc <_printf_float+0x16c>
   36d1e:	b913      	cbnz	r3, 36d26 <_printf_float+0x1b6>
   36d20:	6822      	ldr	r2, [r4, #0]
   36d22:	07d2      	lsls	r2, r2, #31
   36d24:	d501      	bpl.n	36d2a <_printf_float+0x1ba>
   36d26:	3302      	adds	r3, #2
   36d28:	e7f4      	b.n	36d14 <_printf_float+0x1a4>
   36d2a:	2301      	movs	r3, #1
   36d2c:	e7f2      	b.n	36d14 <_printf_float+0x1a4>
   36d2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
   36d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   36d34:	4299      	cmp	r1, r3
   36d36:	db05      	blt.n	36d44 <_printf_float+0x1d4>
   36d38:	6823      	ldr	r3, [r4, #0]
   36d3a:	6121      	str	r1, [r4, #16]
   36d3c:	07d8      	lsls	r0, r3, #31
   36d3e:	d5ea      	bpl.n	36d16 <_printf_float+0x1a6>
   36d40:	1c4b      	adds	r3, r1, #1
   36d42:	e7e7      	b.n	36d14 <_printf_float+0x1a4>
   36d44:	2900      	cmp	r1, #0
   36d46:	bfd4      	ite	le
   36d48:	f1c1 0202 	rsble	r2, r1, #2
   36d4c:	2201      	movgt	r2, #1
   36d4e:	4413      	add	r3, r2
   36d50:	e7e0      	b.n	36d14 <_printf_float+0x1a4>
   36d52:	6823      	ldr	r3, [r4, #0]
   36d54:	055a      	lsls	r2, r3, #21
   36d56:	d407      	bmi.n	36d68 <_printf_float+0x1f8>
   36d58:	6923      	ldr	r3, [r4, #16]
   36d5a:	4642      	mov	r2, r8
   36d5c:	4631      	mov	r1, r6
   36d5e:	4628      	mov	r0, r5
   36d60:	47b8      	blx	r7
   36d62:	3001      	adds	r0, #1
   36d64:	d12c      	bne.n	36dc0 <_printf_float+0x250>
   36d66:	e764      	b.n	36c32 <_printf_float+0xc2>
   36d68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   36d6c:	f240 80e0 	bls.w	36f30 <_printf_float+0x3c0>
   36d70:	2200      	movs	r2, #0
   36d72:	2300      	movs	r3, #0
   36d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   36d78:	f7e6 f900 	bl	1cf7c <__aeabi_dcmpeq>
   36d7c:	2800      	cmp	r0, #0
   36d7e:	d034      	beq.n	36dea <_printf_float+0x27a>
   36d80:	2301      	movs	r3, #1
   36d82:	4a37      	ldr	r2, [pc, #220]	; (36e60 <_printf_float+0x2f0>)
   36d84:	4631      	mov	r1, r6
   36d86:	4628      	mov	r0, r5
   36d88:	47b8      	blx	r7
   36d8a:	3001      	adds	r0, #1
   36d8c:	f43f af51 	beq.w	36c32 <_printf_float+0xc2>
   36d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   36d94:	429a      	cmp	r2, r3
   36d96:	db02      	blt.n	36d9e <_printf_float+0x22e>
   36d98:	6823      	ldr	r3, [r4, #0]
   36d9a:	07d8      	lsls	r0, r3, #31
   36d9c:	d510      	bpl.n	36dc0 <_printf_float+0x250>
   36d9e:	ee18 3a10 	vmov	r3, s16
   36da2:	4652      	mov	r2, sl
   36da4:	4631      	mov	r1, r6
   36da6:	4628      	mov	r0, r5
   36da8:	47b8      	blx	r7
   36daa:	3001      	adds	r0, #1
   36dac:	f43f af41 	beq.w	36c32 <_printf_float+0xc2>
   36db0:	f04f 0800 	mov.w	r8, #0
   36db4:	f104 091a 	add.w	r9, r4, #26
   36db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   36dba:	3b01      	subs	r3, #1
   36dbc:	4543      	cmp	r3, r8
   36dbe:	dc09      	bgt.n	36dd4 <_printf_float+0x264>
   36dc0:	6823      	ldr	r3, [r4, #0]
   36dc2:	079b      	lsls	r3, r3, #30
   36dc4:	f100 8105 	bmi.w	36fd2 <_printf_float+0x462>
   36dc8:	68e0      	ldr	r0, [r4, #12]
   36dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   36dcc:	4298      	cmp	r0, r3
   36dce:	bfb8      	it	lt
   36dd0:	4618      	movlt	r0, r3
   36dd2:	e730      	b.n	36c36 <_printf_float+0xc6>
   36dd4:	2301      	movs	r3, #1
   36dd6:	464a      	mov	r2, r9
   36dd8:	4631      	mov	r1, r6
   36dda:	4628      	mov	r0, r5
   36ddc:	47b8      	blx	r7
   36dde:	3001      	adds	r0, #1
   36de0:	f43f af27 	beq.w	36c32 <_printf_float+0xc2>
   36de4:	f108 0801 	add.w	r8, r8, #1
   36de8:	e7e6      	b.n	36db8 <_printf_float+0x248>
   36dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   36dec:	2b00      	cmp	r3, #0
   36dee:	dc39      	bgt.n	36e64 <_printf_float+0x2f4>
   36df0:	2301      	movs	r3, #1
   36df2:	4a1b      	ldr	r2, [pc, #108]	; (36e60 <_printf_float+0x2f0>)
   36df4:	4631      	mov	r1, r6
   36df6:	4628      	mov	r0, r5
   36df8:	47b8      	blx	r7
   36dfa:	3001      	adds	r0, #1
   36dfc:	f43f af19 	beq.w	36c32 <_printf_float+0xc2>
   36e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   36e04:	4313      	orrs	r3, r2
   36e06:	d102      	bne.n	36e0e <_printf_float+0x29e>
   36e08:	6823      	ldr	r3, [r4, #0]
   36e0a:	07d9      	lsls	r1, r3, #31
   36e0c:	d5d8      	bpl.n	36dc0 <_printf_float+0x250>
   36e0e:	ee18 3a10 	vmov	r3, s16
   36e12:	4652      	mov	r2, sl
   36e14:	4631      	mov	r1, r6
   36e16:	4628      	mov	r0, r5
   36e18:	47b8      	blx	r7
   36e1a:	3001      	adds	r0, #1
   36e1c:	f43f af09 	beq.w	36c32 <_printf_float+0xc2>
   36e20:	f04f 0900 	mov.w	r9, #0
   36e24:	f104 0a1a 	add.w	sl, r4, #26
   36e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   36e2a:	425b      	negs	r3, r3
   36e2c:	454b      	cmp	r3, r9
   36e2e:	dc01      	bgt.n	36e34 <_printf_float+0x2c4>
   36e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   36e32:	e792      	b.n	36d5a <_printf_float+0x1ea>
   36e34:	2301      	movs	r3, #1
   36e36:	4652      	mov	r2, sl
   36e38:	4631      	mov	r1, r6
   36e3a:	4628      	mov	r0, r5
   36e3c:	47b8      	blx	r7
   36e3e:	3001      	adds	r0, #1
   36e40:	f43f aef7 	beq.w	36c32 <_printf_float+0xc2>
   36e44:	f109 0901 	add.w	r9, r9, #1
   36e48:	e7ee      	b.n	36e28 <_printf_float+0x2b8>
   36e4a:	bf00      	nop
   36e4c:	7fefffff 	.word	0x7fefffff
   36e50:	00040ac7 	.word	0x00040ac7
   36e54:	0003e816 	.word	0x0003e816
   36e58:	00040acf 	.word	0x00040acf
   36e5c:	00040acb 	.word	0x00040acb
   36e60:	0003d735 	.word	0x0003d735
   36e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   36e66:	6da3      	ldr	r3, [r4, #88]	; 0x58
   36e68:	429a      	cmp	r2, r3
   36e6a:	bfa8      	it	ge
   36e6c:	461a      	movge	r2, r3
   36e6e:	2a00      	cmp	r2, #0
   36e70:	4691      	mov	r9, r2
   36e72:	dc37      	bgt.n	36ee4 <_printf_float+0x374>
   36e74:	f04f 0b00 	mov.w	fp, #0
   36e78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   36e7c:	f104 021a 	add.w	r2, r4, #26
   36e80:	6da3      	ldr	r3, [r4, #88]	; 0x58
   36e82:	9305      	str	r3, [sp, #20]
   36e84:	eba3 0309 	sub.w	r3, r3, r9
   36e88:	455b      	cmp	r3, fp
   36e8a:	dc33      	bgt.n	36ef4 <_printf_float+0x384>
   36e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   36e90:	429a      	cmp	r2, r3
   36e92:	db3b      	blt.n	36f0c <_printf_float+0x39c>
   36e94:	6823      	ldr	r3, [r4, #0]
   36e96:	07da      	lsls	r2, r3, #31
   36e98:	d438      	bmi.n	36f0c <_printf_float+0x39c>
   36e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   36e9c:	9b05      	ldr	r3, [sp, #20]
   36e9e:	9909      	ldr	r1, [sp, #36]	; 0x24
   36ea0:	1ad3      	subs	r3, r2, r3
   36ea2:	eba2 0901 	sub.w	r9, r2, r1
   36ea6:	4599      	cmp	r9, r3
   36ea8:	bfa8      	it	ge
   36eaa:	4699      	movge	r9, r3
   36eac:	f1b9 0f00 	cmp.w	r9, #0
   36eb0:	dc35      	bgt.n	36f1e <_printf_float+0x3ae>
   36eb2:	f04f 0800 	mov.w	r8, #0
   36eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   36eba:	f104 0a1a 	add.w	sl, r4, #26
   36ebe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   36ec2:	1a9b      	subs	r3, r3, r2
   36ec4:	eba3 0309 	sub.w	r3, r3, r9
   36ec8:	4543      	cmp	r3, r8
   36eca:	f77f af79 	ble.w	36dc0 <_printf_float+0x250>
   36ece:	2301      	movs	r3, #1
   36ed0:	4652      	mov	r2, sl
   36ed2:	4631      	mov	r1, r6
   36ed4:	4628      	mov	r0, r5
   36ed6:	47b8      	blx	r7
   36ed8:	3001      	adds	r0, #1
   36eda:	f43f aeaa 	beq.w	36c32 <_printf_float+0xc2>
   36ede:	f108 0801 	add.w	r8, r8, #1
   36ee2:	e7ec      	b.n	36ebe <_printf_float+0x34e>
   36ee4:	4613      	mov	r3, r2
   36ee6:	4631      	mov	r1, r6
   36ee8:	4642      	mov	r2, r8
   36eea:	4628      	mov	r0, r5
   36eec:	47b8      	blx	r7
   36eee:	3001      	adds	r0, #1
   36ef0:	d1c0      	bne.n	36e74 <_printf_float+0x304>
   36ef2:	e69e      	b.n	36c32 <_printf_float+0xc2>
   36ef4:	2301      	movs	r3, #1
   36ef6:	4631      	mov	r1, r6
   36ef8:	4628      	mov	r0, r5
   36efa:	9205      	str	r2, [sp, #20]
   36efc:	47b8      	blx	r7
   36efe:	3001      	adds	r0, #1
   36f00:	f43f ae97 	beq.w	36c32 <_printf_float+0xc2>
   36f04:	f10b 0b01 	add.w	fp, fp, #1
   36f08:	9a05      	ldr	r2, [sp, #20]
   36f0a:	e7b9      	b.n	36e80 <_printf_float+0x310>
   36f0c:	ee18 3a10 	vmov	r3, s16
   36f10:	4652      	mov	r2, sl
   36f12:	4631      	mov	r1, r6
   36f14:	4628      	mov	r0, r5
   36f16:	47b8      	blx	r7
   36f18:	3001      	adds	r0, #1
   36f1a:	d1be      	bne.n	36e9a <_printf_float+0x32a>
   36f1c:	e689      	b.n	36c32 <_printf_float+0xc2>
   36f1e:	9a05      	ldr	r2, [sp, #20]
   36f20:	464b      	mov	r3, r9
   36f22:	4631      	mov	r1, r6
   36f24:	4628      	mov	r0, r5
   36f26:	4442      	add	r2, r8
   36f28:	47b8      	blx	r7
   36f2a:	3001      	adds	r0, #1
   36f2c:	d1c1      	bne.n	36eb2 <_printf_float+0x342>
   36f2e:	e680      	b.n	36c32 <_printf_float+0xc2>
   36f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   36f32:	2a01      	cmp	r2, #1
   36f34:	dc01      	bgt.n	36f3a <_printf_float+0x3ca>
   36f36:	07db      	lsls	r3, r3, #31
   36f38:	d538      	bpl.n	36fac <_printf_float+0x43c>
   36f3a:	2301      	movs	r3, #1
   36f3c:	4642      	mov	r2, r8
   36f3e:	4631      	mov	r1, r6
   36f40:	4628      	mov	r0, r5
   36f42:	47b8      	blx	r7
   36f44:	3001      	adds	r0, #1
   36f46:	f43f ae74 	beq.w	36c32 <_printf_float+0xc2>
   36f4a:	ee18 3a10 	vmov	r3, s16
   36f4e:	4652      	mov	r2, sl
   36f50:	4631      	mov	r1, r6
   36f52:	4628      	mov	r0, r5
   36f54:	47b8      	blx	r7
   36f56:	3001      	adds	r0, #1
   36f58:	f43f ae6b 	beq.w	36c32 <_printf_float+0xc2>
   36f5c:	2200      	movs	r2, #0
   36f5e:	2300      	movs	r3, #0
   36f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   36f64:	f7e6 f80a 	bl	1cf7c <__aeabi_dcmpeq>
   36f68:	b9d8      	cbnz	r0, 36fa2 <_printf_float+0x432>
   36f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   36f6c:	f108 0201 	add.w	r2, r8, #1
   36f70:	3b01      	subs	r3, #1
   36f72:	4631      	mov	r1, r6
   36f74:	4628      	mov	r0, r5
   36f76:	47b8      	blx	r7
   36f78:	3001      	adds	r0, #1
   36f7a:	d10e      	bne.n	36f9a <_printf_float+0x42a>
   36f7c:	e659      	b.n	36c32 <_printf_float+0xc2>
   36f7e:	2301      	movs	r3, #1
   36f80:	4652      	mov	r2, sl
   36f82:	4631      	mov	r1, r6
   36f84:	4628      	mov	r0, r5
   36f86:	47b8      	blx	r7
   36f88:	3001      	adds	r0, #1
   36f8a:	f43f ae52 	beq.w	36c32 <_printf_float+0xc2>
   36f8e:	f108 0801 	add.w	r8, r8, #1
   36f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   36f94:	3b01      	subs	r3, #1
   36f96:	4543      	cmp	r3, r8
   36f98:	dcf1      	bgt.n	36f7e <_printf_float+0x40e>
   36f9a:	464b      	mov	r3, r9
   36f9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
   36fa0:	e6dc      	b.n	36d5c <_printf_float+0x1ec>
   36fa2:	f04f 0800 	mov.w	r8, #0
   36fa6:	f104 0a1a 	add.w	sl, r4, #26
   36faa:	e7f2      	b.n	36f92 <_printf_float+0x422>
   36fac:	2301      	movs	r3, #1
   36fae:	4642      	mov	r2, r8
   36fb0:	e7df      	b.n	36f72 <_printf_float+0x402>
   36fb2:	2301      	movs	r3, #1
   36fb4:	464a      	mov	r2, r9
   36fb6:	4631      	mov	r1, r6
   36fb8:	4628      	mov	r0, r5
   36fba:	47b8      	blx	r7
   36fbc:	3001      	adds	r0, #1
   36fbe:	f43f ae38 	beq.w	36c32 <_printf_float+0xc2>
   36fc2:	f108 0801 	add.w	r8, r8, #1
   36fc6:	68e3      	ldr	r3, [r4, #12]
   36fc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   36fca:	1a5b      	subs	r3, r3, r1
   36fcc:	4543      	cmp	r3, r8
   36fce:	dcf0      	bgt.n	36fb2 <_printf_float+0x442>
   36fd0:	e6fa      	b.n	36dc8 <_printf_float+0x258>
   36fd2:	f04f 0800 	mov.w	r8, #0
   36fd6:	f104 0919 	add.w	r9, r4, #25
   36fda:	e7f4      	b.n	36fc6 <_printf_float+0x456>

00036fdc <_printf_i>:
   36fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   36fe0:	460c      	mov	r4, r1
   36fe2:	4691      	mov	r9, r2
   36fe4:	4680      	mov	r8, r0
   36fe6:	469a      	mov	sl, r3
   36fe8:	7e27      	ldrb	r7, [r4, #24]
   36fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
   36fee:	990c      	ldr	r1, [sp, #48]	; 0x30
   36ff0:	2f78      	cmp	r7, #120	; 0x78
   36ff2:	d807      	bhi.n	37004 <_printf_i+0x28>
   36ff4:	2f62      	cmp	r7, #98	; 0x62
   36ff6:	d80a      	bhi.n	3700e <_printf_i+0x32>
   36ff8:	2f00      	cmp	r7, #0
   36ffa:	f000 80d8 	beq.w	371ae <_printf_i+0x1d2>
   36ffe:	2f58      	cmp	r7, #88	; 0x58
   37000:	f000 80a3 	beq.w	3714a <_printf_i+0x16e>
   37004:	f104 0642 	add.w	r6, r4, #66	; 0x42
   37008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   3700c:	e03a      	b.n	37084 <_printf_i+0xa8>
   3700e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   37012:	2b15      	cmp	r3, #21
   37014:	d8f6      	bhi.n	37004 <_printf_i+0x28>
   37016:	a001      	add	r0, pc, #4	; (adr r0, 3701c <_printf_i+0x40>)
   37018:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   3701c:	00037075 	.word	0x00037075
   37020:	00037089 	.word	0x00037089
   37024:	00037005 	.word	0x00037005
   37028:	00037005 	.word	0x00037005
   3702c:	00037005 	.word	0x00037005
   37030:	00037005 	.word	0x00037005
   37034:	00037089 	.word	0x00037089
   37038:	00037005 	.word	0x00037005
   3703c:	00037005 	.word	0x00037005
   37040:	00037005 	.word	0x00037005
   37044:	00037005 	.word	0x00037005
   37048:	00037195 	.word	0x00037195
   3704c:	000370b9 	.word	0x000370b9
   37050:	00037177 	.word	0x00037177
   37054:	00037005 	.word	0x00037005
   37058:	00037005 	.word	0x00037005
   3705c:	000371b7 	.word	0x000371b7
   37060:	00037005 	.word	0x00037005
   37064:	000370b9 	.word	0x000370b9
   37068:	00037005 	.word	0x00037005
   3706c:	00037005 	.word	0x00037005
   37070:	0003717f 	.word	0x0003717f
   37074:	680b      	ldr	r3, [r1, #0]
   37076:	f104 0642 	add.w	r6, r4, #66	; 0x42
   3707a:	1d1a      	adds	r2, r3, #4
   3707c:	681b      	ldr	r3, [r3, #0]
   3707e:	600a      	str	r2, [r1, #0]
   37080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   37084:	2301      	movs	r3, #1
   37086:	e0a3      	b.n	371d0 <_printf_i+0x1f4>
   37088:	6825      	ldr	r5, [r4, #0]
   3708a:	6808      	ldr	r0, [r1, #0]
   3708c:	062e      	lsls	r6, r5, #24
   3708e:	f100 0304 	add.w	r3, r0, #4
   37092:	d50a      	bpl.n	370aa <_printf_i+0xce>
   37094:	6805      	ldr	r5, [r0, #0]
   37096:	600b      	str	r3, [r1, #0]
   37098:	2d00      	cmp	r5, #0
   3709a:	da03      	bge.n	370a4 <_printf_i+0xc8>
   3709c:	232d      	movs	r3, #45	; 0x2d
   3709e:	426d      	negs	r5, r5
   370a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   370a4:	485e      	ldr	r0, [pc, #376]	; (37220 <_printf_i+0x244>)
   370a6:	230a      	movs	r3, #10
   370a8:	e019      	b.n	370de <_printf_i+0x102>
   370aa:	f015 0f40 	tst.w	r5, #64	; 0x40
   370ae:	6805      	ldr	r5, [r0, #0]
   370b0:	600b      	str	r3, [r1, #0]
   370b2:	bf18      	it	ne
   370b4:	b22d      	sxthne	r5, r5
   370b6:	e7ef      	b.n	37098 <_printf_i+0xbc>
   370b8:	680b      	ldr	r3, [r1, #0]
   370ba:	6825      	ldr	r5, [r4, #0]
   370bc:	1d18      	adds	r0, r3, #4
   370be:	6008      	str	r0, [r1, #0]
   370c0:	0628      	lsls	r0, r5, #24
   370c2:	d501      	bpl.n	370c8 <_printf_i+0xec>
   370c4:	681d      	ldr	r5, [r3, #0]
   370c6:	e002      	b.n	370ce <_printf_i+0xf2>
   370c8:	0669      	lsls	r1, r5, #25
   370ca:	d5fb      	bpl.n	370c4 <_printf_i+0xe8>
   370cc:	881d      	ldrh	r5, [r3, #0]
   370ce:	2f6f      	cmp	r7, #111	; 0x6f
   370d0:	4853      	ldr	r0, [pc, #332]	; (37220 <_printf_i+0x244>)
   370d2:	bf0c      	ite	eq
   370d4:	2308      	moveq	r3, #8
   370d6:	230a      	movne	r3, #10
   370d8:	2100      	movs	r1, #0
   370da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   370de:	6866      	ldr	r6, [r4, #4]
   370e0:	2e00      	cmp	r6, #0
   370e2:	60a6      	str	r6, [r4, #8]
   370e4:	bfa2      	ittt	ge
   370e6:	6821      	ldrge	r1, [r4, #0]
   370e8:	f021 0104 	bicge.w	r1, r1, #4
   370ec:	6021      	strge	r1, [r4, #0]
   370ee:	b90d      	cbnz	r5, 370f4 <_printf_i+0x118>
   370f0:	2e00      	cmp	r6, #0
   370f2:	d04d      	beq.n	37190 <_printf_i+0x1b4>
   370f4:	4616      	mov	r6, r2
   370f6:	fbb5 f1f3 	udiv	r1, r5, r3
   370fa:	fb03 5711 	mls	r7, r3, r1, r5
   370fe:	5dc7      	ldrb	r7, [r0, r7]
   37100:	f806 7d01 	strb.w	r7, [r6, #-1]!
   37104:	462f      	mov	r7, r5
   37106:	460d      	mov	r5, r1
   37108:	42bb      	cmp	r3, r7
   3710a:	d9f4      	bls.n	370f6 <_printf_i+0x11a>
   3710c:	2b08      	cmp	r3, #8
   3710e:	d10b      	bne.n	37128 <_printf_i+0x14c>
   37110:	6823      	ldr	r3, [r4, #0]
   37112:	07df      	lsls	r7, r3, #31
   37114:	d508      	bpl.n	37128 <_printf_i+0x14c>
   37116:	6923      	ldr	r3, [r4, #16]
   37118:	6861      	ldr	r1, [r4, #4]
   3711a:	4299      	cmp	r1, r3
   3711c:	bfde      	ittt	le
   3711e:	2330      	movle	r3, #48	; 0x30
   37120:	f806 3c01 	strble.w	r3, [r6, #-1]
   37124:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   37128:	1b92      	subs	r2, r2, r6
   3712a:	6122      	str	r2, [r4, #16]
   3712c:	464b      	mov	r3, r9
   3712e:	aa03      	add	r2, sp, #12
   37130:	4621      	mov	r1, r4
   37132:	4640      	mov	r0, r8
   37134:	f8cd a000 	str.w	sl, [sp]
   37138:	f004 fa03 	bl	3b542 <_printf_common>
   3713c:	3001      	adds	r0, #1
   3713e:	d14c      	bne.n	371da <_printf_i+0x1fe>
   37140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37144:	b004      	add	sp, #16
   37146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3714a:	4835      	ldr	r0, [pc, #212]	; (37220 <_printf_i+0x244>)
   3714c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   37150:	6823      	ldr	r3, [r4, #0]
   37152:	680e      	ldr	r6, [r1, #0]
   37154:	061f      	lsls	r7, r3, #24
   37156:	f856 5b04 	ldr.w	r5, [r6], #4
   3715a:	600e      	str	r6, [r1, #0]
   3715c:	d514      	bpl.n	37188 <_printf_i+0x1ac>
   3715e:	07d9      	lsls	r1, r3, #31
   37160:	bf44      	itt	mi
   37162:	f043 0320 	orrmi.w	r3, r3, #32
   37166:	6023      	strmi	r3, [r4, #0]
   37168:	b91d      	cbnz	r5, 37172 <_printf_i+0x196>
   3716a:	6823      	ldr	r3, [r4, #0]
   3716c:	f023 0320 	bic.w	r3, r3, #32
   37170:	6023      	str	r3, [r4, #0]
   37172:	2310      	movs	r3, #16
   37174:	e7b0      	b.n	370d8 <_printf_i+0xfc>
   37176:	6823      	ldr	r3, [r4, #0]
   37178:	f043 0320 	orr.w	r3, r3, #32
   3717c:	6023      	str	r3, [r4, #0]
   3717e:	2378      	movs	r3, #120	; 0x78
   37180:	4828      	ldr	r0, [pc, #160]	; (37224 <_printf_i+0x248>)
   37182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   37186:	e7e3      	b.n	37150 <_printf_i+0x174>
   37188:	065e      	lsls	r6, r3, #25
   3718a:	bf48      	it	mi
   3718c:	b2ad      	uxthmi	r5, r5
   3718e:	e7e6      	b.n	3715e <_printf_i+0x182>
   37190:	4616      	mov	r6, r2
   37192:	e7bb      	b.n	3710c <_printf_i+0x130>
   37194:	680b      	ldr	r3, [r1, #0]
   37196:	6826      	ldr	r6, [r4, #0]
   37198:	1d1d      	adds	r5, r3, #4
   3719a:	6960      	ldr	r0, [r4, #20]
   3719c:	600d      	str	r5, [r1, #0]
   3719e:	0635      	lsls	r5, r6, #24
   371a0:	681b      	ldr	r3, [r3, #0]
   371a2:	d501      	bpl.n	371a8 <_printf_i+0x1cc>
   371a4:	6018      	str	r0, [r3, #0]
   371a6:	e002      	b.n	371ae <_printf_i+0x1d2>
   371a8:	0671      	lsls	r1, r6, #25
   371aa:	d5fb      	bpl.n	371a4 <_printf_i+0x1c8>
   371ac:	8018      	strh	r0, [r3, #0]
   371ae:	2300      	movs	r3, #0
   371b0:	4616      	mov	r6, r2
   371b2:	6123      	str	r3, [r4, #16]
   371b4:	e7ba      	b.n	3712c <_printf_i+0x150>
   371b6:	680b      	ldr	r3, [r1, #0]
   371b8:	1d1a      	adds	r2, r3, #4
   371ba:	600a      	str	r2, [r1, #0]
   371bc:	2100      	movs	r1, #0
   371be:	681e      	ldr	r6, [r3, #0]
   371c0:	6862      	ldr	r2, [r4, #4]
   371c2:	4630      	mov	r0, r6
   371c4:	f004 f8d9 	bl	3b37a <memchr>
   371c8:	b108      	cbz	r0, 371ce <_printf_i+0x1f2>
   371ca:	1b80      	subs	r0, r0, r6
   371cc:	6060      	str	r0, [r4, #4]
   371ce:	6863      	ldr	r3, [r4, #4]
   371d0:	6123      	str	r3, [r4, #16]
   371d2:	2300      	movs	r3, #0
   371d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   371d8:	e7a8      	b.n	3712c <_printf_i+0x150>
   371da:	6923      	ldr	r3, [r4, #16]
   371dc:	4632      	mov	r2, r6
   371de:	4649      	mov	r1, r9
   371e0:	4640      	mov	r0, r8
   371e2:	47d0      	blx	sl
   371e4:	3001      	adds	r0, #1
   371e6:	d0ab      	beq.n	37140 <_printf_i+0x164>
   371e8:	6823      	ldr	r3, [r4, #0]
   371ea:	079b      	lsls	r3, r3, #30
   371ec:	d413      	bmi.n	37216 <_printf_i+0x23a>
   371ee:	68e0      	ldr	r0, [r4, #12]
   371f0:	9b03      	ldr	r3, [sp, #12]
   371f2:	4298      	cmp	r0, r3
   371f4:	bfb8      	it	lt
   371f6:	4618      	movlt	r0, r3
   371f8:	e7a4      	b.n	37144 <_printf_i+0x168>
   371fa:	2301      	movs	r3, #1
   371fc:	4632      	mov	r2, r6
   371fe:	4649      	mov	r1, r9
   37200:	4640      	mov	r0, r8
   37202:	47d0      	blx	sl
   37204:	3001      	adds	r0, #1
   37206:	d09b      	beq.n	37140 <_printf_i+0x164>
   37208:	3501      	adds	r5, #1
   3720a:	68e3      	ldr	r3, [r4, #12]
   3720c:	9903      	ldr	r1, [sp, #12]
   3720e:	1a5b      	subs	r3, r3, r1
   37210:	42ab      	cmp	r3, r5
   37212:	dcf2      	bgt.n	371fa <_printf_i+0x21e>
   37214:	e7eb      	b.n	371ee <_printf_i+0x212>
   37216:	2500      	movs	r5, #0
   37218:	f104 0619 	add.w	r6, r4, #25
   3721c:	e7f5      	b.n	3720a <_printf_i+0x22e>
   3721e:	bf00      	nop
   37220:	00040ad3 	.word	0x00040ad3
   37224:	00040ae4 	.word	0x00040ae4

00037228 <sniprintf>:
   37228:	b40c      	push	{r2, r3}
   3722a:	4b18      	ldr	r3, [pc, #96]	; (3728c <sniprintf+0x64>)
   3722c:	b530      	push	{r4, r5, lr}
   3722e:	1e0c      	subs	r4, r1, #0
   37230:	b09d      	sub	sp, #116	; 0x74
   37232:	681d      	ldr	r5, [r3, #0]
   37234:	da08      	bge.n	37248 <sniprintf+0x20>
   37236:	238b      	movs	r3, #139	; 0x8b
   37238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3723c:	602b      	str	r3, [r5, #0]
   3723e:	b01d      	add	sp, #116	; 0x74
   37240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   37244:	b002      	add	sp, #8
   37246:	4770      	bx	lr
   37248:	f44f 7302 	mov.w	r3, #520	; 0x208
   3724c:	9002      	str	r0, [sp, #8]
   3724e:	9006      	str	r0, [sp, #24]
   37250:	a902      	add	r1, sp, #8
   37252:	f8ad 3014 	strh.w	r3, [sp, #20]
   37256:	bf14      	ite	ne
   37258:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   3725c:	4623      	moveq	r3, r4
   3725e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   37260:	4628      	mov	r0, r5
   37262:	9304      	str	r3, [sp, #16]
   37264:	9307      	str	r3, [sp, #28]
   37266:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3726a:	f8ad 3016 	strh.w	r3, [sp, #22]
   3726e:	ab21      	add	r3, sp, #132	; 0x84
   37270:	9301      	str	r3, [sp, #4]
   37272:	f000 fa87 	bl	37784 <_svfiprintf_r>
   37276:	1c43      	adds	r3, r0, #1
   37278:	bfbc      	itt	lt
   3727a:	238b      	movlt	r3, #139	; 0x8b
   3727c:	602b      	strlt	r3, [r5, #0]
   3727e:	2c00      	cmp	r4, #0
   37280:	d0dd      	beq.n	3723e <sniprintf+0x16>
   37282:	9b02      	ldr	r3, [sp, #8]
   37284:	2200      	movs	r2, #0
   37286:	701a      	strb	r2, [r3, #0]
   37288:	e7d9      	b.n	3723e <sniprintf+0x16>
   3728a:	bf00      	nop
   3728c:	20020468 	.word	0x20020468

00037290 <siprintf>:
   37290:	b40e      	push	{r1, r2, r3}
   37292:	b500      	push	{lr}
   37294:	b09c      	sub	sp, #112	; 0x70
   37296:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3729a:	ab1d      	add	r3, sp, #116	; 0x74
   3729c:	9002      	str	r0, [sp, #8]
   3729e:	9006      	str	r0, [sp, #24]
   372a0:	9107      	str	r1, [sp, #28]
   372a2:	9104      	str	r1, [sp, #16]
   372a4:	4808      	ldr	r0, [pc, #32]	; (372c8 <siprintf+0x38>)
   372a6:	4909      	ldr	r1, [pc, #36]	; (372cc <siprintf+0x3c>)
   372a8:	f853 2b04 	ldr.w	r2, [r3], #4
   372ac:	9105      	str	r1, [sp, #20]
   372ae:	a902      	add	r1, sp, #8
   372b0:	6800      	ldr	r0, [r0, #0]
   372b2:	9301      	str	r3, [sp, #4]
   372b4:	f000 fa66 	bl	37784 <_svfiprintf_r>
   372b8:	9b02      	ldr	r3, [sp, #8]
   372ba:	2200      	movs	r2, #0
   372bc:	701a      	strb	r2, [r3, #0]
   372be:	b01c      	add	sp, #112	; 0x70
   372c0:	f85d eb04 	ldr.w	lr, [sp], #4
   372c4:	b003      	add	sp, #12
   372c6:	4770      	bx	lr
   372c8:	20020468 	.word	0x20020468
   372cc:	ffff0208 	.word	0xffff0208

000372d0 <strncasecmp>:
   372d0:	b570      	push	{r4, r5, r6, lr}
   372d2:	440a      	add	r2, r1
   372d4:	4604      	mov	r4, r0
   372d6:	4e0e      	ldr	r6, [pc, #56]	; (37310 <strncasecmp+0x40>)
   372d8:	428a      	cmp	r2, r1
   372da:	d101      	bne.n	372e0 <strncasecmp+0x10>
   372dc:	2000      	movs	r0, #0
   372de:	e013      	b.n	37308 <strncasecmp+0x38>
   372e0:	f814 3b01 	ldrb.w	r3, [r4], #1
   372e4:	5d98      	ldrb	r0, [r3, r6]
   372e6:	f000 0003 	and.w	r0, r0, #3
   372ea:	2801      	cmp	r0, #1
   372ec:	f811 0b01 	ldrb.w	r0, [r1], #1
   372f0:	5c35      	ldrb	r5, [r6, r0]
   372f2:	bf08      	it	eq
   372f4:	3320      	addeq	r3, #32
   372f6:	f005 0503 	and.w	r5, r5, #3
   372fa:	2d01      	cmp	r5, #1
   372fc:	bf08      	it	eq
   372fe:	3020      	addeq	r0, #32
   37300:	1a1b      	subs	r3, r3, r0
   37302:	d102      	bne.n	3730a <strncasecmp+0x3a>
   37304:	2800      	cmp	r0, #0
   37306:	d1e7      	bne.n	372d8 <strncasecmp+0x8>
   37308:	bd70      	pop	{r4, r5, r6, pc}
   3730a:	4618      	mov	r0, r3
   3730c:	e7fc      	b.n	37308 <strncasecmp+0x38>
   3730e:	bf00      	nop
   37310:	000409c7 	.word	0x000409c7

00037314 <_strtol_l.isra.0>:
   37314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37318:	468c      	mov	ip, r1
   3731a:	4686      	mov	lr, r0
   3731c:	4e38      	ldr	r6, [pc, #224]	; (37400 <_strtol_l.isra.0+0xec>)
   3731e:	4660      	mov	r0, ip
   37320:	f81c 4b01 	ldrb.w	r4, [ip], #1
   37324:	5da5      	ldrb	r5, [r4, r6]
   37326:	f015 0508 	ands.w	r5, r5, #8
   3732a:	d1f8      	bne.n	3731e <_strtol_l.isra.0+0xa>
   3732c:	2c2d      	cmp	r4, #45	; 0x2d
   3732e:	d133      	bne.n	37398 <_strtol_l.isra.0+0x84>
   37330:	f89c 4000 	ldrb.w	r4, [ip]
   37334:	f04f 0801 	mov.w	r8, #1
   37338:	f100 0c02 	add.w	ip, r0, #2
   3733c:	2b00      	cmp	r3, #0
   3733e:	d05b      	beq.n	373f8 <_strtol_l.isra.0+0xe4>
   37340:	2b10      	cmp	r3, #16
   37342:	d10c      	bne.n	3735e <_strtol_l.isra.0+0x4a>
   37344:	2c30      	cmp	r4, #48	; 0x30
   37346:	d10a      	bne.n	3735e <_strtol_l.isra.0+0x4a>
   37348:	f89c 0000 	ldrb.w	r0, [ip]
   3734c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   37350:	2858      	cmp	r0, #88	; 0x58
   37352:	d14c      	bne.n	373ee <_strtol_l.isra.0+0xda>
   37354:	f89c 4001 	ldrb.w	r4, [ip, #1]
   37358:	2310      	movs	r3, #16
   3735a:	f10c 0c02 	add.w	ip, ip, #2
   3735e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   37362:	2600      	movs	r6, #0
   37364:	3f01      	subs	r7, #1
   37366:	4630      	mov	r0, r6
   37368:	fbb7 f9f3 	udiv	r9, r7, r3
   3736c:	fb03 7a19 	mls	sl, r3, r9, r7
   37370:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   37374:	2d09      	cmp	r5, #9
   37376:	d817      	bhi.n	373a8 <_strtol_l.isra.0+0x94>
   37378:	462c      	mov	r4, r5
   3737a:	42a3      	cmp	r3, r4
   3737c:	dd23      	ble.n	373c6 <_strtol_l.isra.0+0xb2>
   3737e:	1c75      	adds	r5, r6, #1
   37380:	d007      	beq.n	37392 <_strtol_l.isra.0+0x7e>
   37382:	4581      	cmp	r9, r0
   37384:	d31c      	bcc.n	373c0 <_strtol_l.isra.0+0xac>
   37386:	d101      	bne.n	3738c <_strtol_l.isra.0+0x78>
   37388:	45a2      	cmp	sl, r4
   3738a:	db19      	blt.n	373c0 <_strtol_l.isra.0+0xac>
   3738c:	fb00 4003 	mla	r0, r0, r3, r4
   37390:	2601      	movs	r6, #1
   37392:	f81c 4b01 	ldrb.w	r4, [ip], #1
   37396:	e7eb      	b.n	37370 <_strtol_l.isra.0+0x5c>
   37398:	2c2b      	cmp	r4, #43	; 0x2b
   3739a:	46a8      	mov	r8, r5
   3739c:	bf04      	itt	eq
   3739e:	f89c 4000 	ldrbeq.w	r4, [ip]
   373a2:	f100 0c02 	addeq.w	ip, r0, #2
   373a6:	e7c9      	b.n	3733c <_strtol_l.isra.0+0x28>
   373a8:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   373ac:	2d19      	cmp	r5, #25
   373ae:	d801      	bhi.n	373b4 <_strtol_l.isra.0+0xa0>
   373b0:	3c37      	subs	r4, #55	; 0x37
   373b2:	e7e2      	b.n	3737a <_strtol_l.isra.0+0x66>
   373b4:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   373b8:	2d19      	cmp	r5, #25
   373ba:	d804      	bhi.n	373c6 <_strtol_l.isra.0+0xb2>
   373bc:	3c57      	subs	r4, #87	; 0x57
   373be:	e7dc      	b.n	3737a <_strtol_l.isra.0+0x66>
   373c0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   373c4:	e7e5      	b.n	37392 <_strtol_l.isra.0+0x7e>
   373c6:	1c73      	adds	r3, r6, #1
   373c8:	d106      	bne.n	373d8 <_strtol_l.isra.0+0xc4>
   373ca:	2322      	movs	r3, #34	; 0x22
   373cc:	4638      	mov	r0, r7
   373ce:	f8ce 3000 	str.w	r3, [lr]
   373d2:	b942      	cbnz	r2, 373e6 <_strtol_l.isra.0+0xd2>
   373d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   373d8:	f1b8 0f00 	cmp.w	r8, #0
   373dc:	d000      	beq.n	373e0 <_strtol_l.isra.0+0xcc>
   373de:	4240      	negs	r0, r0
   373e0:	2a00      	cmp	r2, #0
   373e2:	d0f7      	beq.n	373d4 <_strtol_l.isra.0+0xc0>
   373e4:	b10e      	cbz	r6, 373ea <_strtol_l.isra.0+0xd6>
   373e6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   373ea:	6011      	str	r1, [r2, #0]
   373ec:	e7f2      	b.n	373d4 <_strtol_l.isra.0+0xc0>
   373ee:	2430      	movs	r4, #48	; 0x30
   373f0:	2b00      	cmp	r3, #0
   373f2:	d1b4      	bne.n	3735e <_strtol_l.isra.0+0x4a>
   373f4:	2308      	movs	r3, #8
   373f6:	e7b2      	b.n	3735e <_strtol_l.isra.0+0x4a>
   373f8:	2c30      	cmp	r4, #48	; 0x30
   373fa:	d0a5      	beq.n	37348 <_strtol_l.isra.0+0x34>
   373fc:	230a      	movs	r3, #10
   373fe:	e7ae      	b.n	3735e <_strtol_l.isra.0+0x4a>
   37400:	000409c7 	.word	0x000409c7

00037404 <strtol>:
   37404:	4613      	mov	r3, r2
   37406:	460a      	mov	r2, r1
   37408:	4601      	mov	r1, r0
   3740a:	4802      	ldr	r0, [pc, #8]	; (37414 <strtol+0x10>)
   3740c:	6800      	ldr	r0, [r0, #0]
   3740e:	f7ff bf81 	b.w	37314 <_strtol_l.isra.0>
   37412:	bf00      	nop
   37414:	20020468 	.word	0x20020468

00037418 <_strtoul_l.isra.0>:
   37418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3741c:	468c      	mov	ip, r1
   3741e:	4686      	mov	lr, r0
   37420:	4e39      	ldr	r6, [pc, #228]	; (37508 <_strtoul_l.isra.0+0xf0>)
   37422:	4660      	mov	r0, ip
   37424:	f81c 4b01 	ldrb.w	r4, [ip], #1
   37428:	5da5      	ldrb	r5, [r4, r6]
   3742a:	f015 0508 	ands.w	r5, r5, #8
   3742e:	d1f8      	bne.n	37422 <_strtoul_l.isra.0+0xa>
   37430:	2c2d      	cmp	r4, #45	; 0x2d
   37432:	d134      	bne.n	3749e <_strtoul_l.isra.0+0x86>
   37434:	f89c 4000 	ldrb.w	r4, [ip]
   37438:	f04f 0801 	mov.w	r8, #1
   3743c:	f100 0c02 	add.w	ip, r0, #2
   37440:	2b00      	cmp	r3, #0
   37442:	d05d      	beq.n	37500 <_strtoul_l.isra.0+0xe8>
   37444:	2b10      	cmp	r3, #16
   37446:	d10c      	bne.n	37462 <_strtoul_l.isra.0+0x4a>
   37448:	2c30      	cmp	r4, #48	; 0x30
   3744a:	d10a      	bne.n	37462 <_strtoul_l.isra.0+0x4a>
   3744c:	f89c 0000 	ldrb.w	r0, [ip]
   37450:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   37454:	2858      	cmp	r0, #88	; 0x58
   37456:	d14e      	bne.n	374f6 <_strtoul_l.isra.0+0xde>
   37458:	f89c 4001 	ldrb.w	r4, [ip, #1]
   3745c:	2310      	movs	r3, #16
   3745e:	f10c 0c02 	add.w	ip, ip, #2
   37462:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   37466:	2500      	movs	r5, #0
   37468:	fbb7 f7f3 	udiv	r7, r7, r3
   3746c:	fb03 f907 	mul.w	r9, r3, r7
   37470:	4628      	mov	r0, r5
   37472:	ea6f 0909 	mvn.w	r9, r9
   37476:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   3747a:	2e09      	cmp	r6, #9
   3747c:	d817      	bhi.n	374ae <_strtoul_l.isra.0+0x96>
   3747e:	4634      	mov	r4, r6
   37480:	42a3      	cmp	r3, r4
   37482:	dd23      	ble.n	374cc <_strtoul_l.isra.0+0xb4>
   37484:	2d00      	cmp	r5, #0
   37486:	db1e      	blt.n	374c6 <_strtoul_l.isra.0+0xae>
   37488:	4287      	cmp	r7, r0
   3748a:	d31c      	bcc.n	374c6 <_strtoul_l.isra.0+0xae>
   3748c:	d101      	bne.n	37492 <_strtoul_l.isra.0+0x7a>
   3748e:	45a1      	cmp	r9, r4
   37490:	db19      	blt.n	374c6 <_strtoul_l.isra.0+0xae>
   37492:	fb00 4003 	mla	r0, r0, r3, r4
   37496:	2501      	movs	r5, #1
   37498:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3749c:	e7eb      	b.n	37476 <_strtoul_l.isra.0+0x5e>
   3749e:	2c2b      	cmp	r4, #43	; 0x2b
   374a0:	46a8      	mov	r8, r5
   374a2:	bf04      	itt	eq
   374a4:	f89c 4000 	ldrbeq.w	r4, [ip]
   374a8:	f100 0c02 	addeq.w	ip, r0, #2
   374ac:	e7c8      	b.n	37440 <_strtoul_l.isra.0+0x28>
   374ae:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   374b2:	2e19      	cmp	r6, #25
   374b4:	d801      	bhi.n	374ba <_strtoul_l.isra.0+0xa2>
   374b6:	3c37      	subs	r4, #55	; 0x37
   374b8:	e7e2      	b.n	37480 <_strtoul_l.isra.0+0x68>
   374ba:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   374be:	2e19      	cmp	r6, #25
   374c0:	d804      	bhi.n	374cc <_strtoul_l.isra.0+0xb4>
   374c2:	3c57      	subs	r4, #87	; 0x57
   374c4:	e7dc      	b.n	37480 <_strtoul_l.isra.0+0x68>
   374c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   374ca:	e7e5      	b.n	37498 <_strtoul_l.isra.0+0x80>
   374cc:	2d00      	cmp	r5, #0
   374ce:	da07      	bge.n	374e0 <_strtoul_l.isra.0+0xc8>
   374d0:	2322      	movs	r3, #34	; 0x22
   374d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   374d6:	f8ce 3000 	str.w	r3, [lr]
   374da:	b942      	cbnz	r2, 374ee <_strtoul_l.isra.0+0xd6>
   374dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   374e0:	f1b8 0f00 	cmp.w	r8, #0
   374e4:	d000      	beq.n	374e8 <_strtoul_l.isra.0+0xd0>
   374e6:	4240      	negs	r0, r0
   374e8:	2a00      	cmp	r2, #0
   374ea:	d0f7      	beq.n	374dc <_strtoul_l.isra.0+0xc4>
   374ec:	b10d      	cbz	r5, 374f2 <_strtoul_l.isra.0+0xda>
   374ee:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   374f2:	6011      	str	r1, [r2, #0]
   374f4:	e7f2      	b.n	374dc <_strtoul_l.isra.0+0xc4>
   374f6:	2430      	movs	r4, #48	; 0x30
   374f8:	2b00      	cmp	r3, #0
   374fa:	d1b2      	bne.n	37462 <_strtoul_l.isra.0+0x4a>
   374fc:	2308      	movs	r3, #8
   374fe:	e7b0      	b.n	37462 <_strtoul_l.isra.0+0x4a>
   37500:	2c30      	cmp	r4, #48	; 0x30
   37502:	d0a3      	beq.n	3744c <_strtoul_l.isra.0+0x34>
   37504:	230a      	movs	r3, #10
   37506:	e7ac      	b.n	37462 <_strtoul_l.isra.0+0x4a>
   37508:	000409c7 	.word	0x000409c7

0003750c <strtoul>:
   3750c:	4613      	mov	r3, r2
   3750e:	460a      	mov	r2, r1
   37510:	4601      	mov	r1, r0
   37512:	4802      	ldr	r0, [pc, #8]	; (3751c <strtoul+0x10>)
   37514:	6800      	ldr	r0, [r0, #0]
   37516:	f7ff bf7f 	b.w	37418 <_strtoul_l.isra.0>
   3751a:	bf00      	nop
   3751c:	20020468 	.word	0x20020468

00037520 <vsniprintf>:
   37520:	b507      	push	{r0, r1, r2, lr}
   37522:	9300      	str	r3, [sp, #0]
   37524:	4613      	mov	r3, r2
   37526:	460a      	mov	r2, r1
   37528:	4601      	mov	r1, r0
   3752a:	4803      	ldr	r0, [pc, #12]	; (37538 <vsniprintf+0x18>)
   3752c:	6800      	ldr	r0, [r0, #0]
   3752e:	f004 f90a 	bl	3b746 <_vsniprintf_r>
   37532:	b003      	add	sp, #12
   37534:	f85d fb04 	ldr.w	pc, [sp], #4
   37538:	20020468 	.word	0x20020468

0003753c <_vsiprintf_r>:
   3753c:	b500      	push	{lr}
   3753e:	b09b      	sub	sp, #108	; 0x6c
   37540:	9100      	str	r1, [sp, #0]
   37542:	9104      	str	r1, [sp, #16]
   37544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   37548:	9105      	str	r1, [sp, #20]
   3754a:	9102      	str	r1, [sp, #8]
   3754c:	4905      	ldr	r1, [pc, #20]	; (37564 <_vsiprintf_r+0x28>)
   3754e:	9103      	str	r1, [sp, #12]
   37550:	4669      	mov	r1, sp
   37552:	f000 f917 	bl	37784 <_svfiprintf_r>
   37556:	9b00      	ldr	r3, [sp, #0]
   37558:	2200      	movs	r2, #0
   3755a:	701a      	strb	r2, [r3, #0]
   3755c:	b01b      	add	sp, #108	; 0x6c
   3755e:	f85d fb04 	ldr.w	pc, [sp], #4
   37562:	bf00      	nop
   37564:	ffff0208 	.word	0xffff0208

00037568 <vsiprintf>:
   37568:	4613      	mov	r3, r2
   3756a:	460a      	mov	r2, r1
   3756c:	4601      	mov	r1, r0
   3756e:	4802      	ldr	r0, [pc, #8]	; (37578 <vsiprintf+0x10>)
   37570:	6800      	ldr	r0, [r0, #0]
   37572:	f7ff bfe3 	b.w	3753c <_vsiprintf_r>
   37576:	bf00      	nop
   37578:	20020468 	.word	0x20020468

0003757c <_localeconv_r>:
   3757c:	4800      	ldr	r0, [pc, #0]	; (37580 <_localeconv_r+0x4>)
   3757e:	4770      	bx	lr
   37580:	200205bc 	.word	0x200205bc

00037584 <malloc>:
   37584:	4b02      	ldr	r3, [pc, #8]	; (37590 <malloc+0xc>)
   37586:	4601      	mov	r1, r0
   37588:	6818      	ldr	r0, [r3, #0]
   3758a:	f000 b8a1 	b.w	376d0 <_malloc_r>
   3758e:	bf00      	nop
   37590:	20020468 	.word	0x20020468

00037594 <__pow5mult>:
   37594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   37598:	4615      	mov	r5, r2
   3759a:	f012 0203 	ands.w	r2, r2, #3
   3759e:	4606      	mov	r6, r0
   375a0:	460f      	mov	r7, r1
   375a2:	d007      	beq.n	375b4 <__pow5mult+0x20>
   375a4:	3a01      	subs	r2, #1
   375a6:	4c21      	ldr	r4, [pc, #132]	; (3762c <__pow5mult+0x98>)
   375a8:	2300      	movs	r3, #0
   375aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   375ae:	f004 f9d0 	bl	3b952 <__multadd>
   375b2:	4607      	mov	r7, r0
   375b4:	10ad      	asrs	r5, r5, #2
   375b6:	d035      	beq.n	37624 <__pow5mult+0x90>
   375b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   375ba:	b93c      	cbnz	r4, 375cc <__pow5mult+0x38>
   375bc:	2010      	movs	r0, #16
   375be:	f7ff ffe1 	bl	37584 <malloc>
   375c2:	6270      	str	r0, [r6, #36]	; 0x24
   375c4:	6004      	str	r4, [r0, #0]
   375c6:	60c4      	str	r4, [r0, #12]
   375c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   375cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   375d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   375d4:	b94c      	cbnz	r4, 375ea <__pow5mult+0x56>
   375d6:	f240 2171 	movw	r1, #625	; 0x271
   375da:	4630      	mov	r0, r6
   375dc:	f004 fa48 	bl	3ba70 <__i2b>
   375e0:	2300      	movs	r3, #0
   375e2:	4604      	mov	r4, r0
   375e4:	f8c8 0008 	str.w	r0, [r8, #8]
   375e8:	6003      	str	r3, [r0, #0]
   375ea:	f04f 0900 	mov.w	r9, #0
   375ee:	07eb      	lsls	r3, r5, #31
   375f0:	d50a      	bpl.n	37608 <__pow5mult+0x74>
   375f2:	4639      	mov	r1, r7
   375f4:	4622      	mov	r2, r4
   375f6:	4630      	mov	r0, r6
   375f8:	f004 fa43 	bl	3ba82 <__multiply>
   375fc:	4680      	mov	r8, r0
   375fe:	4639      	mov	r1, r7
   37600:	4630      	mov	r0, r6
   37602:	4647      	mov	r7, r8
   37604:	f004 f98e 	bl	3b924 <_Bfree>
   37608:	106d      	asrs	r5, r5, #1
   3760a:	d00b      	beq.n	37624 <__pow5mult+0x90>
   3760c:	6820      	ldr	r0, [r4, #0]
   3760e:	b938      	cbnz	r0, 37620 <__pow5mult+0x8c>
   37610:	4622      	mov	r2, r4
   37612:	4621      	mov	r1, r4
   37614:	4630      	mov	r0, r6
   37616:	f004 fa34 	bl	3ba82 <__multiply>
   3761a:	6020      	str	r0, [r4, #0]
   3761c:	f8c0 9000 	str.w	r9, [r0]
   37620:	4604      	mov	r4, r0
   37622:	e7e4      	b.n	375ee <__pow5mult+0x5a>
   37624:	4638      	mov	r0, r7
   37626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3762a:	bf00      	nop
   3762c:	0003ce34 	.word	0x0003ce34

00037630 <_free_r>:
   37630:	b537      	push	{r0, r1, r2, r4, r5, lr}
   37632:	2900      	cmp	r1, #0
   37634:	d047      	beq.n	376c6 <_free_r+0x96>
   37636:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3763a:	1f0c      	subs	r4, r1, #4
   3763c:	9001      	str	r0, [sp, #4]
   3763e:	2b00      	cmp	r3, #0
   37640:	bfb8      	it	lt
   37642:	18e4      	addlt	r4, r4, r3
   37644:	f000 f9ae 	bl	379a4 <__malloc_lock>
   37648:	4a20      	ldr	r2, [pc, #128]	; (376cc <_free_r+0x9c>)
   3764a:	9801      	ldr	r0, [sp, #4]
   3764c:	6813      	ldr	r3, [r2, #0]
   3764e:	4615      	mov	r5, r2
   37650:	b933      	cbnz	r3, 37660 <_free_r+0x30>
   37652:	6063      	str	r3, [r4, #4]
   37654:	6014      	str	r4, [r2, #0]
   37656:	b003      	add	sp, #12
   37658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3765c:	f000 b9a8 	b.w	379b0 <__malloc_unlock>
   37660:	42a3      	cmp	r3, r4
   37662:	d90b      	bls.n	3767c <_free_r+0x4c>
   37664:	6821      	ldr	r1, [r4, #0]
   37666:	1862      	adds	r2, r4, r1
   37668:	4293      	cmp	r3, r2
   3766a:	bf02      	ittt	eq
   3766c:	681a      	ldreq	r2, [r3, #0]
   3766e:	685b      	ldreq	r3, [r3, #4]
   37670:	1852      	addeq	r2, r2, r1
   37672:	6063      	str	r3, [r4, #4]
   37674:	bf08      	it	eq
   37676:	6022      	streq	r2, [r4, #0]
   37678:	602c      	str	r4, [r5, #0]
   3767a:	e7ec      	b.n	37656 <_free_r+0x26>
   3767c:	461a      	mov	r2, r3
   3767e:	685b      	ldr	r3, [r3, #4]
   37680:	b10b      	cbz	r3, 37686 <_free_r+0x56>
   37682:	42a3      	cmp	r3, r4
   37684:	d9fa      	bls.n	3767c <_free_r+0x4c>
   37686:	6811      	ldr	r1, [r2, #0]
   37688:	1855      	adds	r5, r2, r1
   3768a:	42a5      	cmp	r5, r4
   3768c:	d10b      	bne.n	376a6 <_free_r+0x76>
   3768e:	6824      	ldr	r4, [r4, #0]
   37690:	4421      	add	r1, r4
   37692:	1854      	adds	r4, r2, r1
   37694:	6011      	str	r1, [r2, #0]
   37696:	42a3      	cmp	r3, r4
   37698:	d1dd      	bne.n	37656 <_free_r+0x26>
   3769a:	681c      	ldr	r4, [r3, #0]
   3769c:	685b      	ldr	r3, [r3, #4]
   3769e:	4421      	add	r1, r4
   376a0:	6053      	str	r3, [r2, #4]
   376a2:	6011      	str	r1, [r2, #0]
   376a4:	e7d7      	b.n	37656 <_free_r+0x26>
   376a6:	d902      	bls.n	376ae <_free_r+0x7e>
   376a8:	230c      	movs	r3, #12
   376aa:	6003      	str	r3, [r0, #0]
   376ac:	e7d3      	b.n	37656 <_free_r+0x26>
   376ae:	6825      	ldr	r5, [r4, #0]
   376b0:	1961      	adds	r1, r4, r5
   376b2:	428b      	cmp	r3, r1
   376b4:	bf02      	ittt	eq
   376b6:	6819      	ldreq	r1, [r3, #0]
   376b8:	685b      	ldreq	r3, [r3, #4]
   376ba:	1949      	addeq	r1, r1, r5
   376bc:	6063      	str	r3, [r4, #4]
   376be:	bf08      	it	eq
   376c0:	6021      	streq	r1, [r4, #0]
   376c2:	6054      	str	r4, [r2, #4]
   376c4:	e7c7      	b.n	37656 <_free_r+0x26>
   376c6:	b003      	add	sp, #12
   376c8:	bd30      	pop	{r4, r5, pc}
   376ca:	bf00      	nop
   376cc:	2002891c 	.word	0x2002891c

000376d0 <_malloc_r>:
   376d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   376d2:	1ccd      	adds	r5, r1, #3
   376d4:	4606      	mov	r6, r0
   376d6:	f025 0503 	bic.w	r5, r5, #3
   376da:	3508      	adds	r5, #8
   376dc:	2d0c      	cmp	r5, #12
   376de:	bf38      	it	cc
   376e0:	250c      	movcc	r5, #12
   376e2:	2d00      	cmp	r5, #0
   376e4:	db01      	blt.n	376ea <_malloc_r+0x1a>
   376e6:	42a9      	cmp	r1, r5
   376e8:	d903      	bls.n	376f2 <_malloc_r+0x22>
   376ea:	230c      	movs	r3, #12
   376ec:	6033      	str	r3, [r6, #0]
   376ee:	2000      	movs	r0, #0
   376f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   376f2:	f000 f957 	bl	379a4 <__malloc_lock>
   376f6:	4921      	ldr	r1, [pc, #132]	; (3777c <_malloc_r+0xac>)
   376f8:	680a      	ldr	r2, [r1, #0]
   376fa:	4614      	mov	r4, r2
   376fc:	b99c      	cbnz	r4, 37726 <_malloc_r+0x56>
   376fe:	4f20      	ldr	r7, [pc, #128]	; (37780 <_malloc_r+0xb0>)
   37700:	683b      	ldr	r3, [r7, #0]
   37702:	b923      	cbnz	r3, 3770e <_malloc_r+0x3e>
   37704:	4621      	mov	r1, r4
   37706:	4630      	mov	r0, r6
   37708:	f000 f93c 	bl	37984 <_sbrk_r>
   3770c:	6038      	str	r0, [r7, #0]
   3770e:	4629      	mov	r1, r5
   37710:	4630      	mov	r0, r6
   37712:	f000 f937 	bl	37984 <_sbrk_r>
   37716:	1c43      	adds	r3, r0, #1
   37718:	d123      	bne.n	37762 <_malloc_r+0x92>
   3771a:	230c      	movs	r3, #12
   3771c:	4630      	mov	r0, r6
   3771e:	6033      	str	r3, [r6, #0]
   37720:	f000 f946 	bl	379b0 <__malloc_unlock>
   37724:	e7e3      	b.n	376ee <_malloc_r+0x1e>
   37726:	6823      	ldr	r3, [r4, #0]
   37728:	1b5b      	subs	r3, r3, r5
   3772a:	d417      	bmi.n	3775c <_malloc_r+0x8c>
   3772c:	2b0b      	cmp	r3, #11
   3772e:	d903      	bls.n	37738 <_malloc_r+0x68>
   37730:	6023      	str	r3, [r4, #0]
   37732:	441c      	add	r4, r3
   37734:	6025      	str	r5, [r4, #0]
   37736:	e004      	b.n	37742 <_malloc_r+0x72>
   37738:	6863      	ldr	r3, [r4, #4]
   3773a:	42a2      	cmp	r2, r4
   3773c:	bf0c      	ite	eq
   3773e:	600b      	streq	r3, [r1, #0]
   37740:	6053      	strne	r3, [r2, #4]
   37742:	4630      	mov	r0, r6
   37744:	f000 f934 	bl	379b0 <__malloc_unlock>
   37748:	f104 000b 	add.w	r0, r4, #11
   3774c:	1d23      	adds	r3, r4, #4
   3774e:	f020 0007 	bic.w	r0, r0, #7
   37752:	1ac2      	subs	r2, r0, r3
   37754:	d0cc      	beq.n	376f0 <_malloc_r+0x20>
   37756:	1a1b      	subs	r3, r3, r0
   37758:	50a3      	str	r3, [r4, r2]
   3775a:	e7c9      	b.n	376f0 <_malloc_r+0x20>
   3775c:	4622      	mov	r2, r4
   3775e:	6864      	ldr	r4, [r4, #4]
   37760:	e7cc      	b.n	376fc <_malloc_r+0x2c>
   37762:	1cc4      	adds	r4, r0, #3
   37764:	f024 0403 	bic.w	r4, r4, #3
   37768:	42a0      	cmp	r0, r4
   3776a:	d0e3      	beq.n	37734 <_malloc_r+0x64>
   3776c:	1a21      	subs	r1, r4, r0
   3776e:	4630      	mov	r0, r6
   37770:	f000 f908 	bl	37984 <_sbrk_r>
   37774:	3001      	adds	r0, #1
   37776:	d1dd      	bne.n	37734 <_malloc_r+0x64>
   37778:	e7cf      	b.n	3771a <_malloc_r+0x4a>
   3777a:	bf00      	nop
   3777c:	2002891c 	.word	0x2002891c
   37780:	20028920 	.word	0x20028920

00037784 <_svfiprintf_r>:
   37784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37788:	4698      	mov	r8, r3
   3778a:	898b      	ldrh	r3, [r1, #12]
   3778c:	b09d      	sub	sp, #116	; 0x74
   3778e:	4607      	mov	r7, r0
   37790:	061b      	lsls	r3, r3, #24
   37792:	460d      	mov	r5, r1
   37794:	4614      	mov	r4, r2
   37796:	d50e      	bpl.n	377b6 <_svfiprintf_r+0x32>
   37798:	690b      	ldr	r3, [r1, #16]
   3779a:	b963      	cbnz	r3, 377b6 <_svfiprintf_r+0x32>
   3779c:	2140      	movs	r1, #64	; 0x40
   3779e:	f7ff ff97 	bl	376d0 <_malloc_r>
   377a2:	6028      	str	r0, [r5, #0]
   377a4:	6128      	str	r0, [r5, #16]
   377a6:	b920      	cbnz	r0, 377b2 <_svfiprintf_r+0x2e>
   377a8:	230c      	movs	r3, #12
   377aa:	603b      	str	r3, [r7, #0]
   377ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   377b0:	e0d1      	b.n	37956 <_svfiprintf_r+0x1d2>
   377b2:	2340      	movs	r3, #64	; 0x40
   377b4:	616b      	str	r3, [r5, #20]
   377b6:	2300      	movs	r3, #0
   377b8:	f8cd 800c 	str.w	r8, [sp, #12]
   377bc:	f04f 0901 	mov.w	r9, #1
   377c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 37970 <_svfiprintf_r+0x1ec>
   377c4:	9309      	str	r3, [sp, #36]	; 0x24
   377c6:	2320      	movs	r3, #32
   377c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   377cc:	2330      	movs	r3, #48	; 0x30
   377ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   377d2:	4623      	mov	r3, r4
   377d4:	469a      	mov	sl, r3
   377d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   377da:	b10a      	cbz	r2, 377e0 <_svfiprintf_r+0x5c>
   377dc:	2a25      	cmp	r2, #37	; 0x25
   377de:	d1f9      	bne.n	377d4 <_svfiprintf_r+0x50>
   377e0:	ebba 0b04 	subs.w	fp, sl, r4
   377e4:	d00b      	beq.n	377fe <_svfiprintf_r+0x7a>
   377e6:	465b      	mov	r3, fp
   377e8:	4622      	mov	r2, r4
   377ea:	4629      	mov	r1, r5
   377ec:	4638      	mov	r0, r7
   377ee:	f004 fb3a 	bl	3be66 <__ssputs_r>
   377f2:	3001      	adds	r0, #1
   377f4:	f000 80aa 	beq.w	3794c <_svfiprintf_r+0x1c8>
   377f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   377fa:	445a      	add	r2, fp
   377fc:	9209      	str	r2, [sp, #36]	; 0x24
   377fe:	f89a 3000 	ldrb.w	r3, [sl]
   37802:	2b00      	cmp	r3, #0
   37804:	f000 80a2 	beq.w	3794c <_svfiprintf_r+0x1c8>
   37808:	2300      	movs	r3, #0
   3780a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3780e:	f10a 0a01 	add.w	sl, sl, #1
   37812:	9304      	str	r3, [sp, #16]
   37814:	9307      	str	r3, [sp, #28]
   37816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3781a:	931a      	str	r3, [sp, #104]	; 0x68
   3781c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   37820:	4654      	mov	r4, sl
   37822:	2205      	movs	r2, #5
   37824:	4852      	ldr	r0, [pc, #328]	; (37970 <_svfiprintf_r+0x1ec>)
   37826:	f814 1b01 	ldrb.w	r1, [r4], #1
   3782a:	f003 fda6 	bl	3b37a <memchr>
   3782e:	9a04      	ldr	r2, [sp, #16]
   37830:	b9d8      	cbnz	r0, 3786a <_svfiprintf_r+0xe6>
   37832:	06d0      	lsls	r0, r2, #27
   37834:	bf44      	itt	mi
   37836:	2320      	movmi	r3, #32
   37838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3783c:	0711      	lsls	r1, r2, #28
   3783e:	bf44      	itt	mi
   37840:	232b      	movmi	r3, #43	; 0x2b
   37842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   37846:	f89a 3000 	ldrb.w	r3, [sl]
   3784a:	2b2a      	cmp	r3, #42	; 0x2a
   3784c:	d015      	beq.n	3787a <_svfiprintf_r+0xf6>
   3784e:	9a07      	ldr	r2, [sp, #28]
   37850:	4654      	mov	r4, sl
   37852:	2000      	movs	r0, #0
   37854:	f04f 0c0a 	mov.w	ip, #10
   37858:	4621      	mov	r1, r4
   3785a:	f811 3b01 	ldrb.w	r3, [r1], #1
   3785e:	3b30      	subs	r3, #48	; 0x30
   37860:	2b09      	cmp	r3, #9
   37862:	d94e      	bls.n	37902 <_svfiprintf_r+0x17e>
   37864:	b1b0      	cbz	r0, 37894 <_svfiprintf_r+0x110>
   37866:	9207      	str	r2, [sp, #28]
   37868:	e014      	b.n	37894 <_svfiprintf_r+0x110>
   3786a:	eba0 0308 	sub.w	r3, r0, r8
   3786e:	46a2      	mov	sl, r4
   37870:	fa09 f303 	lsl.w	r3, r9, r3
   37874:	4313      	orrs	r3, r2
   37876:	9304      	str	r3, [sp, #16]
   37878:	e7d2      	b.n	37820 <_svfiprintf_r+0x9c>
   3787a:	9b03      	ldr	r3, [sp, #12]
   3787c:	1d19      	adds	r1, r3, #4
   3787e:	681b      	ldr	r3, [r3, #0]
   37880:	2b00      	cmp	r3, #0
   37882:	9103      	str	r1, [sp, #12]
   37884:	bfbb      	ittet	lt
   37886:	425b      	neglt	r3, r3
   37888:	f042 0202 	orrlt.w	r2, r2, #2
   3788c:	9307      	strge	r3, [sp, #28]
   3788e:	9307      	strlt	r3, [sp, #28]
   37890:	bfb8      	it	lt
   37892:	9204      	strlt	r2, [sp, #16]
   37894:	7823      	ldrb	r3, [r4, #0]
   37896:	2b2e      	cmp	r3, #46	; 0x2e
   37898:	d10c      	bne.n	378b4 <_svfiprintf_r+0x130>
   3789a:	7863      	ldrb	r3, [r4, #1]
   3789c:	2b2a      	cmp	r3, #42	; 0x2a
   3789e:	d135      	bne.n	3790c <_svfiprintf_r+0x188>
   378a0:	9b03      	ldr	r3, [sp, #12]
   378a2:	3402      	adds	r4, #2
   378a4:	1d1a      	adds	r2, r3, #4
   378a6:	681b      	ldr	r3, [r3, #0]
   378a8:	2b00      	cmp	r3, #0
   378aa:	9203      	str	r2, [sp, #12]
   378ac:	bfb8      	it	lt
   378ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   378b2:	9305      	str	r3, [sp, #20]
   378b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 37980 <_svfiprintf_r+0x1fc>
   378b8:	2203      	movs	r2, #3
   378ba:	7821      	ldrb	r1, [r4, #0]
   378bc:	4650      	mov	r0, sl
   378be:	f003 fd5c 	bl	3b37a <memchr>
   378c2:	b140      	cbz	r0, 378d6 <_svfiprintf_r+0x152>
   378c4:	2340      	movs	r3, #64	; 0x40
   378c6:	eba0 000a 	sub.w	r0, r0, sl
   378ca:	3401      	adds	r4, #1
   378cc:	fa03 f000 	lsl.w	r0, r3, r0
   378d0:	9b04      	ldr	r3, [sp, #16]
   378d2:	4303      	orrs	r3, r0
   378d4:	9304      	str	r3, [sp, #16]
   378d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   378da:	2206      	movs	r2, #6
   378dc:	4825      	ldr	r0, [pc, #148]	; (37974 <_svfiprintf_r+0x1f0>)
   378de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   378e2:	f003 fd4a 	bl	3b37a <memchr>
   378e6:	2800      	cmp	r0, #0
   378e8:	d038      	beq.n	3795c <_svfiprintf_r+0x1d8>
   378ea:	4b23      	ldr	r3, [pc, #140]	; (37978 <_svfiprintf_r+0x1f4>)
   378ec:	bb1b      	cbnz	r3, 37936 <_svfiprintf_r+0x1b2>
   378ee:	9b03      	ldr	r3, [sp, #12]
   378f0:	3307      	adds	r3, #7
   378f2:	f023 0307 	bic.w	r3, r3, #7
   378f6:	3308      	adds	r3, #8
   378f8:	9303      	str	r3, [sp, #12]
   378fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   378fc:	4433      	add	r3, r6
   378fe:	9309      	str	r3, [sp, #36]	; 0x24
   37900:	e767      	b.n	377d2 <_svfiprintf_r+0x4e>
   37902:	fb0c 3202 	mla	r2, ip, r2, r3
   37906:	460c      	mov	r4, r1
   37908:	2001      	movs	r0, #1
   3790a:	e7a5      	b.n	37858 <_svfiprintf_r+0xd4>
   3790c:	2300      	movs	r3, #0
   3790e:	3401      	adds	r4, #1
   37910:	f04f 0c0a 	mov.w	ip, #10
   37914:	4619      	mov	r1, r3
   37916:	9305      	str	r3, [sp, #20]
   37918:	4620      	mov	r0, r4
   3791a:	f810 2b01 	ldrb.w	r2, [r0], #1
   3791e:	3a30      	subs	r2, #48	; 0x30
   37920:	2a09      	cmp	r2, #9
   37922:	d903      	bls.n	3792c <_svfiprintf_r+0x1a8>
   37924:	2b00      	cmp	r3, #0
   37926:	d0c5      	beq.n	378b4 <_svfiprintf_r+0x130>
   37928:	9105      	str	r1, [sp, #20]
   3792a:	e7c3      	b.n	378b4 <_svfiprintf_r+0x130>
   3792c:	fb0c 2101 	mla	r1, ip, r1, r2
   37930:	4604      	mov	r4, r0
   37932:	2301      	movs	r3, #1
   37934:	e7f0      	b.n	37918 <_svfiprintf_r+0x194>
   37936:	ab03      	add	r3, sp, #12
   37938:	462a      	mov	r2, r5
   3793a:	a904      	add	r1, sp, #16
   3793c:	4638      	mov	r0, r7
   3793e:	9300      	str	r3, [sp, #0]
   37940:	4b0e      	ldr	r3, [pc, #56]	; (3797c <_svfiprintf_r+0x1f8>)
   37942:	f7ff f915 	bl	36b70 <_printf_float>
   37946:	1c42      	adds	r2, r0, #1
   37948:	4606      	mov	r6, r0
   3794a:	d1d6      	bne.n	378fa <_svfiprintf_r+0x176>
   3794c:	89ab      	ldrh	r3, [r5, #12]
   3794e:	065b      	lsls	r3, r3, #25
   37950:	f53f af2c 	bmi.w	377ac <_svfiprintf_r+0x28>
   37954:	9809      	ldr	r0, [sp, #36]	; 0x24
   37956:	b01d      	add	sp, #116	; 0x74
   37958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3795c:	ab03      	add	r3, sp, #12
   3795e:	462a      	mov	r2, r5
   37960:	a904      	add	r1, sp, #16
   37962:	4638      	mov	r0, r7
   37964:	9300      	str	r3, [sp, #0]
   37966:	4b05      	ldr	r3, [pc, #20]	; (3797c <_svfiprintf_r+0x1f8>)
   37968:	f7ff fb38 	bl	36fdc <_printf_i>
   3796c:	e7eb      	b.n	37946 <_svfiprintf_r+0x1c2>
   3796e:	bf00      	nop
   37970:	00040b02 	.word	0x00040b02
   37974:	00040b0c 	.word	0x00040b0c
   37978:	00036b71 	.word	0x00036b71
   3797c:	0003be67 	.word	0x0003be67
   37980:	00040b08 	.word	0x00040b08

00037984 <_sbrk_r>:
   37984:	b538      	push	{r3, r4, r5, lr}
   37986:	2300      	movs	r3, #0
   37988:	4d05      	ldr	r5, [pc, #20]	; (379a0 <_sbrk_r+0x1c>)
   3798a:	4604      	mov	r4, r0
   3798c:	4608      	mov	r0, r1
   3798e:	602b      	str	r3, [r5, #0]
   37990:	f7ee ff38 	bl	26804 <_sbrk>
   37994:	1c43      	adds	r3, r0, #1
   37996:	d102      	bne.n	3799e <_sbrk_r+0x1a>
   37998:	682b      	ldr	r3, [r5, #0]
   3799a:	b103      	cbz	r3, 3799e <_sbrk_r+0x1a>
   3799c:	6023      	str	r3, [r4, #0]
   3799e:	bd38      	pop	{r3, r4, r5, pc}
   379a0:	2002cd08 	.word	0x2002cd08

000379a4 <__malloc_lock>:
   379a4:	4801      	ldr	r0, [pc, #4]	; (379ac <__malloc_lock+0x8>)
   379a6:	f004 bb18 	b.w	3bfda <__retarget_lock_acquire_recursive>
   379aa:	bf00      	nop
   379ac:	2002cd10 	.word	0x2002cd10

000379b0 <__malloc_unlock>:
   379b0:	4801      	ldr	r0, [pc, #4]	; (379b8 <__malloc_unlock+0x8>)
   379b2:	f004 bb13 	b.w	3bfdc <__retarget_lock_release_recursive>
   379b6:	bf00      	nop
   379b8:	2002cd10 	.word	0x2002cd10

000379bc <z_impl_gpio_pin_interrupt_configure.constprop.0>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   379bc:	040a      	lsls	r2, r1, #16
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
   379be:	b410      	push	{r4}
	const struct gpio_driver_api *api =
   379c0:	6883      	ldr	r3, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   379c2:	d505      	bpl.n	379d0 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x14>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   379c4:	68c2      	ldr	r2, [r0, #12]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   379c6:	6812      	ldr	r2, [r2, #0]
   379c8:	2a00      	cmp	r2, #0
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   379ca:	bfb8      	it	lt
   379cc:	f481 21c0 	eorlt.w	r1, r1, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   379d0:	699c      	ldr	r4, [r3, #24]
   379d2:	f401 32b0 	and.w	r2, r1, #90112	; 0x16000
   379d6:	46a4      	mov	ip, r4
   379d8:	f401 23c0 	and.w	r3, r1, #393216	; 0x60000
}
   379dc:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->pin_interrupt_configure(port, pin, mode, trig);
   379e0:	211f      	movs	r1, #31
   379e2:	4760      	bx	ip

000379e4 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   379e4:	b510      	push	{r4, lr}
   379e6:	460a      	mov	r2, r1
	struct gpio_driver_data *data =
   379e8:	68c4      	ldr	r4, [r0, #12]
	return api->pin_configure(port, pin, flags);
   379ea:	6883      	ldr	r3, [r0, #8]
   379ec:	211f      	movs	r1, #31
   379ee:	681b      	ldr	r3, [r3, #0]
   379f0:	4798      	blx	r3
	if (ret != 0) {
   379f2:	b918      	cbnz	r0, 379fc <gpio_pin_configure.constprop.0+0x18>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   379f4:	6823      	ldr	r3, [r4, #0]
   379f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   379fa:	6023      	str	r3, [r4, #0]
}
   379fc:	bd10      	pop	{r4, pc}

000379fe <enter_sleep>:
{
   379fe:	b508      	push	{r3, lr}
	lte_lc_power_off();
   37a00:	f7f3 f974 	bl	2acec <lte_lc_power_off>
}
   37a04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   37a08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   37a0c:	2100      	movs	r1, #0
   37a0e:	f7fe bc4f 	b.w	362b0 <z_impl_k_sleep>

00037a12 <main>:
	}
}
#else
void main(void)
{
	start_execute();
   37a12:	f7e6 ba15 	b.w	1de40 <start_execute>

00037a16 <slm_util_hex_check>:
	for (int i = 0; i < data_len; i++) {
   37a16:	2300      	movs	r3, #0
{
   37a18:	b510      	push	{r4, lr}
	for (int i = 0; i < data_len; i++) {
   37a1a:	4299      	cmp	r1, r3
   37a1c:	dc01      	bgt.n	37a22 <slm_util_hex_check+0xc>
	return false;
   37a1e:	2000      	movs	r0, #0
}
   37a20:	bd10      	pop	{r4, pc}
		char ch = *(data + i);
   37a22:	5cc2      	ldrb	r2, [r0, r3]
		if (!PRINTABLE_ASCII(ch) && ch != '\r' && ch != '\n') {
   37a24:	f1a2 0420 	sub.w	r4, r2, #32
   37a28:	2c5e      	cmp	r4, #94	; 0x5e
   37a2a:	d903      	bls.n	37a34 <slm_util_hex_check+0x1e>
   37a2c:	2a0d      	cmp	r2, #13
   37a2e:	d001      	beq.n	37a34 <slm_util_hex_check+0x1e>
   37a30:	2a0a      	cmp	r2, #10
   37a32:	d101      	bne.n	37a38 <slm_util_hex_check+0x22>
	for (int i = 0; i < data_len; i++) {
   37a34:	3301      	adds	r3, #1
   37a36:	e7f0      	b.n	37a1a <slm_util_hex_check+0x4>
			return true;
   37a38:	2001      	movs	r0, #1
   37a3a:	e7f1      	b.n	37a20 <slm_util_hex_check+0xa>

00037a3c <slm_util_atoh>:
/**
 * @brief Decode hexdecimal string (ASCII text) to hex array
 */
int slm_util_atoh(const char *ascii, uint16_t ascii_len,
		uint8_t *hex, uint16_t hex_len)
{
   37a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37a3e:	4607      	mov	r7, r0
   37a40:	460c      	mov	r4, r1
	char hex_str[3];

	if (hex == NULL || ascii == NULL) {
   37a42:	b1e2      	cbz	r2, 37a7e <slm_util_atoh+0x42>
   37a44:	b1d8      	cbz	r0, 37a7e <slm_util_atoh+0x42>
		return -EINVAL;
	}
	if ((ascii_len % 2) > 0) {
   37a46:	f011 0501 	ands.w	r5, r1, #1
   37a4a:	d118      	bne.n	37a7e <slm_util_atoh+0x42>
		return -EINVAL;
	}
	if (ascii_len > (hex_len * 2)) {
   37a4c:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
   37a50:	dc15      	bgt.n	37a7e <slm_util_atoh+0x42>
		return -EINVAL;
	}

	hex_str[2] = '\0';
   37a52:	f88d 5006 	strb.w	r5, [sp, #6]
	for (int i = 0; (i * 2) < ascii_len; i++) {
   37a56:	1e56      	subs	r6, r2, #1
   37a58:	42ac      	cmp	r4, r5
   37a5a:	dc02      	bgt.n	37a62 <slm_util_atoh+0x26>
		strncpy(&hex_str[0], ascii + (i * 2), 2);
		*(hex + i) = (uint8_t)strtoul(hex_str, NULL, 16);
	}

	return (ascii_len / 2);
   37a5c:	0860      	lsrs	r0, r4, #1
}
   37a5e:	b003      	add	sp, #12
   37a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strncpy(&hex_str[0], ascii + (i * 2), 2);
   37a62:	1979      	adds	r1, r7, r5
   37a64:	2202      	movs	r2, #2
   37a66:	a801      	add	r0, sp, #4
   37a68:	f003 fe1c 	bl	3b6a4 <strncpy>
		*(hex + i) = (uint8_t)strtoul(hex_str, NULL, 16);
   37a6c:	2210      	movs	r2, #16
   37a6e:	2100      	movs	r1, #0
   37a70:	a801      	add	r0, sp, #4
   37a72:	f7ff fd4b 	bl	3750c <strtoul>
   37a76:	3502      	adds	r5, #2
   37a78:	f806 0f01 	strb.w	r0, [r6, #1]!
	for (int i = 0; (i * 2) < ascii_len; i++) {
   37a7c:	e7ec      	b.n	37a58 <slm_util_atoh+0x1c>
		return -EINVAL;
   37a7e:	f06f 0015 	mvn.w	r0, #21
   37a82:	e7ec      	b.n	37a5e <slm_util_atoh+0x22>

00037a84 <check_for_ipv4>:
 */
bool check_for_ipv4(const char *address, uint8_t length)
{
	int index;

	for (index = 0; index < length; index++) {
   37a84:	2300      	movs	r3, #0
   37a86:	4299      	cmp	r1, r3
   37a88:	dc01      	bgt.n	37a8e <check_for_ipv4+0xa>
		} else {
			return false;
		}
	}

	return true;
   37a8a:	2001      	movs	r0, #1
   37a8c:	4770      	bx	lr
		char ch = *(address + index);
   37a8e:	5cc2      	ldrb	r2, [r0, r3]
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
   37a90:	2a2e      	cmp	r2, #46	; 0x2e
   37a92:	d002      	beq.n	37a9a <check_for_ipv4+0x16>
   37a94:	3a30      	subs	r2, #48	; 0x30
   37a96:	2a09      	cmp	r2, #9
   37a98:	d801      	bhi.n	37a9e <check_for_ipv4+0x1a>
	for (index = 0; index < length; index++) {
   37a9a:	3301      	adds	r3, #1
   37a9c:	e7f3      	b.n	37a86 <check_for_ipv4+0x2>
			return false;
   37a9e:	2000      	movs	r0, #0
}
   37aa0:	4770      	bx	lr

00037aa2 <uart_rx_disable>:
	return api->rx_disable(dev);
   37aa2:	6883      	ldr	r3, [r0, #8]
   37aa4:	695b      	ldr	r3, [r3, #20]
   37aa6:	4718      	bx	r3

00037aa8 <device_set_power_state.constprop.0>:
 * @param arg Caller passed argument to callback function
 *
 * @retval 0 If successful in queuing the request or changing the state.
 * @retval Errno Negative errno code if failure. Callback will not be called.
 */
static inline int device_set_power_state(const struct device *dev,
   37aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
					 uint32_t device_power_state,
					 device_pm_cb cb, void *arg)
{
	if (dev->device_pm_control) {
   37aaa:	6904      	ldr	r4, [r0, #16]
static inline int device_set_power_state(const struct device *dev,
   37aac:	9103      	str	r1, [sp, #12]
	if (dev->device_pm_control) {
   37aae:	b134      	cbz	r4, 37abe <device_set_power_state.constprop.0+0x16>
		return dev->device_pm_control(dev,
   37ab0:	2300      	movs	r3, #0
   37ab2:	2101      	movs	r1, #1
   37ab4:	9300      	str	r3, [sp, #0]
   37ab6:	aa03      	add	r2, sp, #12
   37ab8:	47a0      	blx	r4
	} else {
		return device_pm_control_nop(dev,
						 DEVICE_PM_SET_POWER_STATE,
						 &device_power_state, cb, arg);
	}
}
   37aba:	b004      	add	sp, #16
   37abc:	bd10      	pop	{r4, pc}
		return device_pm_control_nop(dev,
   37abe:	4623      	mov	r3, r4
   37ac0:	2101      	movs	r1, #1
   37ac2:	9400      	str	r4, [sp, #0]
   37ac4:	aa03      	add	r2, sp, #12
   37ac6:	f002 ff61 	bl	3a98c <device_pm_control_nop>
   37aca:	e7f6      	b.n	37aba <device_set_power_state.constprop.0+0x12>

00037acc <response_handler>:
	int len = strlen(response);
   37acc:	4608      	mov	r0, r1
{
   37ace:	b510      	push	{r4, lr}
   37ad0:	460c      	mov	r4, r1
	int len = strlen(response);
   37ad2:	f7e5 facd 	bl	1d070 <strlen>
	if (len > 0) {
   37ad6:	1e01      	subs	r1, r0, #0
   37ad8:	dd04      	ble.n	37ae4 <response_handler+0x18>
		rsp_send(response, len);
   37ada:	4620      	mov	r0, r4
}
   37adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rsp_send(response, len);
   37ae0:	f7e6 bb82 	b.w	1e1e8 <rsp_send>
}
   37ae4:	bd10      	pop	{r4, pc}

00037ae6 <slm_at_tcpip_uninit>:

/**@brief API to uninitialize TCP/IP AT commands handler
 */
int slm_at_tcpip_uninit(void)
{
	return do_socket_close(0);
   37ae6:	2000      	movs	r0, #0
   37ae8:	f7e7 ba50 	b.w	1ef8c <do_socket_close>

00037aec <close>:
   37aec:	f001 b8eb 	b.w	38cc6 <z_impl_zsock_close>

00037af0 <close>:
   37af0:	f001 b8e9 	b.w	38cc6 <z_impl_zsock_close>

00037af4 <check_ics>:
	for (int i = len / 4; i > 0; i--) {
   37af4:	460a      	mov	r2, r1
   37af6:	2900      	cmp	r1, #0
   37af8:	bfb8      	it	lt
   37afa:	1cca      	addlt	r2, r1, #3
   37afc:	1092      	asrs	r2, r2, #2
{
   37afe:	b570      	push	{r4, r5, r6, lr}
	uint32_t hcs = 0;
   37b00:	2300      	movs	r3, #0
	for (int i = len / 4; i > 0; i--) {
   37b02:	4614      	mov	r4, r2
	const uint32_t *ptr32 = (const uint32_t *)buffer;
   37b04:	4606      	mov	r6, r0
	for (int i = len / 4; i > 0; i--) {
   37b06:	2c00      	cmp	r4, #0
   37b08:	dc14      	bgt.n	37b34 <check_ics+0x40>
   37b0a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (len & 2) {
   37b0e:	078d      	lsls	r5, r1, #30
   37b10:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   37b14:	d505      	bpl.n	37b22 <check_ics+0x2e>
		hcs += s;
   37b16:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
		uint16_t s = *ptr16++;
   37b1a:	3402      	adds	r4, #2
		hcs += s;
   37b1c:	18c3      	adds	r3, r0, r3
			hcs++;
   37b1e:	bf28      	it	cs
   37b20:	3301      	addcs	r3, #1
	if (len & 1) {
   37b22:	07ca      	lsls	r2, r1, #31
   37b24:	d510      	bpl.n	37b48 <check_ics+0x54>
		hcs += s;
   37b26:	7820      	ldrb	r0, [r4, #0]
   37b28:	18c3      	adds	r3, r0, r3
		if (hcs < s) {
   37b2a:	d30d      	bcc.n	37b48 <check_ics+0x54>
			hcs++;
   37b2c:	3301      	adds	r3, #1
	return ~hcs;    /* One's complement */
   37b2e:	43d8      	mvns	r0, r3
}
   37b30:	b280      	uxth	r0, r0
   37b32:	bd70      	pop	{r4, r5, r6, pc}
		hcs += s;
   37b34:	f856 5b04 	ldr.w	r5, [r6], #4
	for (int i = len / 4; i > 0; i--) {
   37b38:	3c01      	subs	r4, #1
   37b3a:	195b      	adds	r3, r3, r5
			hcs++;
   37b3c:	bf28      	it	cs
   37b3e:	3301      	addcs	r3, #1
	for (int i = len / 4; i > 0; i--) {
   37b40:	e7e1      	b.n	37b06 <check_ics+0x12>
		hcs = (hcs & 0xFFFF) + (hcs >> 16);
   37b42:	0c1a      	lsrs	r2, r3, #16
   37b44:	fa12 f383 	uxtah	r3, r2, r3
	while (hcs > 0xFFFF) {
   37b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   37b4c:	d2f9      	bcs.n	37b42 <check_ics+0x4e>
   37b4e:	e7ee      	b.n	37b2e <check_ics+0x3a>

00037b50 <slm_at_icmp_uninit>:
/**@brief API to uninitialize ICMP AT commands handler
 */
int slm_at_icmp_uninit(void)
{
	return 0;
}
   37b50:	2000      	movs	r0, #0
   37b52:	4770      	bx	lr

00037b54 <slm_at_fota_uninit>:
/**@brief API to uninitialize FOTA AT commands handler
 */
int slm_at_fota_uninit(void)
{
	return 0;
}
   37b54:	2000      	movs	r0, #0
   37b56:	4770      	bx	lr

00037b58 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   37b58:	b140      	cbz	r0, 37b6c <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   37b5a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   37b5c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   37b60:	2b02      	cmp	r3, #2
   37b62:	d006      	beq.n	37b72 <sys_notify_validate+0x1a>
   37b64:	2b03      	cmp	r3, #3
   37b66:	d004      	beq.n	37b72 <sys_notify_validate+0x1a>
   37b68:	2b01      	cmp	r3, #1
   37b6a:	d005      	beq.n	37b78 <sys_notify_validate+0x20>
		return -EINVAL;
   37b6c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   37b70:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   37b72:	6803      	ldr	r3, [r0, #0]
   37b74:	2b00      	cmp	r3, #0
   37b76:	d0f9      	beq.n	37b6c <sys_notify_validate+0x14>
		notify->result = 0;
   37b78:	2300      	movs	r3, #0
   37b7a:	6083      	str	r3, [r0, #8]
   37b7c:	4618      	mov	r0, r3
   37b7e:	4770      	bx	lr

00037b80 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   37b80:	6843      	ldr	r3, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   37b82:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   37b84:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   37b88:	2b02      	cmp	r3, #2
	notify->result = res;
   37b8a:	6081      	str	r1, [r0, #8]
	switch (method) {
   37b8c:	d00b      	beq.n	37ba6 <sys_notify_finalize+0x26>
   37b8e:	2b03      	cmp	r3, #3
   37b90:	d10c      	bne.n	37bac <sys_notify_finalize+0x2c>
	struct k_poll_signal *sig = NULL;
   37b92:	2300      	movs	r3, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   37b94:	6804      	ldr	r4, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   37b96:	2200      	movs	r2, #0
   37b98:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   37b9a:	b113      	cbz	r3, 37ba2 <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   37b9c:	4618      	mov	r0, r3
   37b9e:	f7fe ff9f 	bl	36ae0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   37ba2:	4620      	mov	r0, r4
   37ba4:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   37ba6:	2400      	movs	r4, #0
		sig = notify->method.signal;
   37ba8:	6803      	ldr	r3, [r0, #0]
		break;
   37baa:	e7f4      	b.n	37b96 <sys_notify_finalize+0x16>
	switch (method) {
   37bac:	2400      	movs	r4, #0
   37bae:	4623      	mov	r3, r4
   37bb0:	e7f1      	b.n	37b96 <sys_notify_finalize+0x16>

00037bb2 <arch_printk_char_out>:
}
   37bb2:	2000      	movs	r0, #0
   37bb4:	4770      	bx	lr

00037bb6 <str_out>:
{
   37bb6:	b530      	push	{r4, r5, lr}
   37bb8:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   37bba:	680c      	ldr	r4, [r1, #0]
   37bbc:	1c55      	adds	r5, r2, #1
   37bbe:	b114      	cbz	r4, 37bc6 <str_out+0x10>
   37bc0:	684b      	ldr	r3, [r1, #4]
   37bc2:	4293      	cmp	r3, r2
   37bc4:	dc01      	bgt.n	37bca <str_out+0x14>
		ctx->count++;
   37bc6:	608d      	str	r5, [r1, #8]
}
   37bc8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   37bca:	3b01      	subs	r3, #1
   37bcc:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   37bce:	bf08      	it	eq
   37bd0:	2200      	moveq	r2, #0
   37bd2:	608d      	str	r5, [r1, #8]
   37bd4:	bf0c      	ite	eq
   37bd6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   37bd8:	54a0      	strbne	r0, [r4, r2]
   37bda:	e7f5      	b.n	37bc8 <str_out+0x12>

00037bdc <printk>:
{
   37bdc:	b40f      	push	{r0, r1, r2, r3}
   37bde:	b507      	push	{r0, r1, r2, lr}
   37be0:	a904      	add	r1, sp, #16
   37be2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   37be6:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   37be8:	f000 fcd3 	bl	38592 <log_printk>
}
   37bec:	b003      	add	sp, #12
   37bee:	f85d eb04 	ldr.w	lr, [sp], #4
   37bf2:	b004      	add	sp, #16
   37bf4:	4770      	bx	lr

00037bf6 <snprintk>:
{
   37bf6:	b40c      	push	{r2, r3}
   37bf8:	b507      	push	{r0, r1, r2, lr}
   37bfa:	ab04      	add	r3, sp, #16
   37bfc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   37c00:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   37c02:	f7eb fb81 	bl	23308 <vsnprintk>
}
   37c06:	b003      	add	sp, #12
   37c08:	f85d eb04 	ldr.w	lr, [sp], #4
   37c0c:	b002      	add	sp, #8
   37c0e:	4770      	bx	lr

00037c10 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   37c10:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   37c12:	f013 0307 	ands.w	r3, r3, #7
   37c16:	d105      	bne.n	37c24 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   37c18:	6803      	ldr	r3, [r0, #0]
   37c1a:	2b00      	cmp	r3, #0
		evt = EVT_START;
   37c1c:	bf0c      	ite	eq
   37c1e:	2000      	moveq	r0, #0
   37c20:	2003      	movne	r0, #3
   37c22:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   37c24:	2b02      	cmp	r3, #2
   37c26:	d105      	bne.n	37c34 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   37c28:	8b43      	ldrh	r3, [r0, #26]
   37c2a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   37c2c:	bf14      	ite	ne
   37c2e:	2000      	movne	r0, #0
   37c30:	2004      	moveq	r0, #4
   37c32:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   37c34:	2b01      	cmp	r3, #1
   37c36:	d105      	bne.n	37c44 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   37c38:	6803      	ldr	r3, [r0, #0]
   37c3a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   37c3c:	bf0c      	ite	eq
   37c3e:	2000      	moveq	r0, #0
   37c40:	2005      	movne	r0, #5
   37c42:	4770      	bx	lr
	int evt = EVT_NOP;
   37c44:	2000      	movs	r0, #0
}
   37c46:	4770      	bx	lr

00037c48 <notify_one>:
{
   37c48:	b573      	push	{r0, r1, r4, r5, r6, lr}
   37c4a:	460d      	mov	r5, r1
   37c4c:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   37c4e:	4619      	mov	r1, r3
   37c50:	1d28      	adds	r0, r5, #4
{
   37c52:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   37c54:	9300      	str	r3, [sp, #0]
   37c56:	f7ff ff93 	bl	37b80 <sys_notify_finalize>
	if (cb) {
   37c5a:	4604      	mov	r4, r0
   37c5c:	b140      	cbz	r0, 37c70 <notify_one+0x28>
		cb(mgr, cli, state, res);
   37c5e:	e9dd 3200 	ldrd	r3, r2, [sp]
   37c62:	4629      	mov	r1, r5
   37c64:	4630      	mov	r0, r6
   37c66:	46a4      	mov	ip, r4
}
   37c68:	b002      	add	sp, #8
   37c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   37c6e:	4760      	bx	ip
}
   37c70:	b002      	add	sp, #8
   37c72:	bd70      	pop	{r4, r5, r6, pc}

00037c74 <transition_complete>:
{
   37c74:	b410      	push	{r4}
	__asm__ volatile(
   37c76:	f04f 0420 	mov.w	r4, #32
   37c7a:	f3ef 8211 	mrs	r2, BASEPRI
   37c7e:	f384 8811 	msr	BASEPRI, r4
   37c82:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   37c86:	6141      	str	r1, [r0, #20]
}
   37c88:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   37c8c:	2101      	movs	r1, #1
   37c8e:	f7eb bb4f 	b.w	23330 <process_event>

00037c92 <validate_args>:
{
   37c92:	b510      	push	{r4, lr}
   37c94:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   37c96:	b140      	cbz	r0, 37caa <validate_args+0x18>
   37c98:	b139      	cbz	r1, 37caa <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   37c9a:	1d08      	adds	r0, r1, #4
   37c9c:	f7ff ff5c 	bl	37b58 <sys_notify_validate>
	if ((rv == 0)
   37ca0:	b928      	cbnz	r0, 37cae <validate_args+0x1c>
	    && ((cli->notify.flags
   37ca2:	68a3      	ldr	r3, [r4, #8]
   37ca4:	f033 0303 	bics.w	r3, r3, #3
   37ca8:	d001      	beq.n	37cae <validate_args+0x1c>
		rv = -EINVAL;
   37caa:	f06f 0015 	mvn.w	r0, #21
}
   37cae:	bd10      	pop	{r4, pc}

00037cb0 <onoff_manager_init>:
{
   37cb0:	b538      	push	{r3, r4, r5, lr}
   37cb2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   37cb4:	4605      	mov	r5, r0
   37cb6:	b158      	cbz	r0, 37cd0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   37cb8:	b151      	cbz	r1, 37cd0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   37cba:	680b      	ldr	r3, [r1, #0]
   37cbc:	b143      	cbz	r3, 37cd0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   37cbe:	684b      	ldr	r3, [r1, #4]
   37cc0:	b133      	cbz	r3, 37cd0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   37cc2:	221c      	movs	r2, #28
   37cc4:	2100      	movs	r1, #0
   37cc6:	f003 fb94 	bl	3b3f2 <memset>
	return 0;
   37cca:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   37ccc:	612c      	str	r4, [r5, #16]
}
   37cce:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   37cd0:	f06f 0015 	mvn.w	r0, #21
   37cd4:	e7fb      	b.n	37cce <onoff_manager_init+0x1e>

00037cd6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   37cd6:	b570      	push	{r4, r5, r6, lr}
   37cd8:	4604      	mov	r4, r0
   37cda:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   37cdc:	f7ff ffd9 	bl	37c92 <validate_args>

	if (rv < 0) {
   37ce0:	1e05      	subs	r5, r0, #0
   37ce2:	db31      	blt.n	37d48 <onoff_request+0x72>
   37ce4:	f04f 0320 	mov.w	r3, #32
   37ce8:	f3ef 8111 	mrs	r1, BASEPRI
   37cec:	f383 8811 	msr	BASEPRI, r3
   37cf0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   37cf4:	f64f 75ff 	movw	r5, #65535	; 0xffff
   37cf8:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   37cfa:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   37cfc:	42ab      	cmp	r3, r5
   37cfe:	f000 0207 	and.w	r2, r0, #7
   37d02:	d02e      	beq.n	37d62 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   37d04:	2a02      	cmp	r2, #2
   37d06:	d10e      	bne.n	37d26 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   37d08:	3301      	adds	r3, #1
   37d0a:	8363      	strh	r3, [r4, #26]
	rv = state;
   37d0c:	4615      	mov	r5, r2
		notify = true;
   37d0e:	2301      	movs	r3, #1
	__asm__ volatile(
   37d10:	f381 8811 	msr	BASEPRI, r1
   37d14:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   37d18:	b1b3      	cbz	r3, 37d48 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   37d1a:	2300      	movs	r3, #0
   37d1c:	4631      	mov	r1, r6
   37d1e:	4620      	mov	r0, r4
   37d20:	f7ff ff92 	bl	37c48 <notify_one>
   37d24:	e010      	b.n	37d48 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   37d26:	0783      	lsls	r3, r0, #30
   37d28:	d001      	beq.n	37d2e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   37d2a:	2a06      	cmp	r2, #6
   37d2c:	d10e      	bne.n	37d4c <onoff_request+0x76>
	parent->next = child;
   37d2e:	2300      	movs	r3, #0
   37d30:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   37d32:	6863      	ldr	r3, [r4, #4]
   37d34:	b993      	cbnz	r3, 37d5c <onoff_request+0x86>
	list->head = node;
   37d36:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   37d3a:	4615      	mov	r5, r2
   37d3c:	b962      	cbnz	r2, 37d58 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   37d3e:	460a      	mov	r2, r1
   37d40:	4620      	mov	r0, r4
   37d42:	2102      	movs	r1, #2
   37d44:	f7eb faf4 	bl	23330 <process_event>
		}
	}

	return rv;
}
   37d48:	4628      	mov	r0, r5
   37d4a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   37d4c:	2a05      	cmp	r2, #5
   37d4e:	bf0c      	ite	eq
   37d50:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   37d54:	f06f 0504 	mvnne.w	r5, #4
   37d58:	2300      	movs	r3, #0
   37d5a:	e7d9      	b.n	37d10 <onoff_request+0x3a>
	parent->next = child;
   37d5c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   37d5e:	6066      	str	r6, [r4, #4]
}
   37d60:	e7eb      	b.n	37d3a <onoff_request+0x64>
		rv = -EAGAIN;
   37d62:	f06f 050a 	mvn.w	r5, #10
   37d66:	e7f7      	b.n	37d58 <onoff_request+0x82>

00037d68 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   37d68:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   37d6a:	f7fe fac7 	bl	362fc <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   37d6e:	2000      	movs	r0, #0
   37d70:	bd08      	pop	{r3, pc}

00037d72 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   37d72:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   37d74:	f7fe fae8 	bl	36348 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   37d78:	f110 0f0b 	cmn.w	r0, #11
   37d7c:	d005      	beq.n	37d8a <sys_sem_take+0x18>
   37d7e:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   37d82:	bf08      	it	eq
   37d84:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   37d88:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   37d8a:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   37d8e:	e7fb      	b.n	37d88 <sys_sem_take+0x16>

00037d90 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   37d90:	4604      	mov	r4, r0
   37d92:	b508      	push	{r3, lr}
   37d94:	4608      	mov	r0, r1
   37d96:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   37d98:	461a      	mov	r2, r3
   37d9a:	47a0      	blx	r4
	return z_impl_k_current_get();
   37d9c:	f7fe faa8 	bl	362f0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   37da0:	f7ee fb48 	bl	26434 <z_impl_k_thread_abort>

00037da4 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   37da4:	b510      	push	{r4, lr}
   37da6:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   37da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37db0:	4620      	mov	r0, r4
   37db2:	f7fd fec1 	bl	35b38 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   37db6:	4603      	mov	r3, r0
   37db8:	2800      	cmp	r0, #0
   37dba:	d0f5      	beq.n	37da8 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   37dbc:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   37dbe:	3308      	adds	r3, #8
   37dc0:	e8d3 1fef 	ldaex	r1, [r3]
   37dc4:	f021 0c01 	bic.w	ip, r1, #1
   37dc8:	e8c3 cfee 	stlex	lr, ip, [r3]
   37dcc:	f1be 0f00 	cmp.w	lr, #0
   37dd0:	d1f6      	bne.n	37dc0 <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   37dd2:	07cb      	lsls	r3, r1, #31
   37dd4:	d500      	bpl.n	37dd8 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   37dd6:	4790      	blx	r2
	z_impl_k_yield();
   37dd8:	f7fe fa1c 	bl	36214 <z_impl_k_yield>
   37ddc:	e7e4      	b.n	37da8 <z_work_q_main+0x4>

00037dde <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   37dde:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   37de0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   37de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   37de8:	bf2c      	ite	cs
   37dea:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   37dee:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   37df2:	4770      	bx	lr

00037df4 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   37df4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   37df8:	6880      	ldr	r0, [r0, #8]
   37dfa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   37dfe:	bf2c      	ite	cs
   37e00:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   37e04:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   37e08:	4770      	bx	lr

00037e0a <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   37e0a:	2201      	movs	r2, #1
{
   37e0c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   37e0e:	f7ff ffe6 	bl	37dde <chunk_field>
}
   37e12:	0840      	lsrs	r0, r0, #1
   37e14:	bd08      	pop	{r3, pc}

00037e16 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   37e16:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   37e18:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   37e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   37e20:	d308      	bcc.n	37e34 <set_chunk_used+0x1e>
		if (used) {
   37e22:	684b      	ldr	r3, [r1, #4]
   37e24:	b11a      	cbz	r2, 37e2e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   37e26:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   37e2a:	604b      	str	r3, [r1, #4]
   37e2c:	4770      	bx	lr
   37e2e:	f023 0301 	bic.w	r3, r3, #1
   37e32:	e7fa      	b.n	37e2a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   37e34:	884b      	ldrh	r3, [r1, #2]
   37e36:	b11a      	cbz	r2, 37e40 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   37e38:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   37e3c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   37e3e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   37e40:	f023 0301 	bic.w	r3, r3, #1
   37e44:	e7fa      	b.n	37e3c <set_chunk_used+0x26>

00037e46 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   37e46:	0053      	lsls	r3, r2, #1
   37e48:	2201      	movs	r2, #1
   37e4a:	f7ff bfd3 	b.w	37df4 <chunk_set>

00037e4e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   37e4e:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   37e50:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   37e52:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   37e56:	bf2c      	ite	cs
   37e58:	2002      	movcs	r0, #2
   37e5a:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   37e5c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   37e5e:	fab0 f080 	clz	r0, r0
}
   37e62:	f1c0 001f 	rsb	r0, r0, #31
   37e66:	4770      	bx	lr

00037e68 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   37e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37e6a:	4616      	mov	r6, r2
   37e6c:	4604      	mov	r4, r0
   37e6e:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   37e70:	f7ff ffcb 	bl	37e0a <chunk_size>
   37e74:	4631      	mov	r1, r6
   37e76:	4605      	mov	r5, r0
   37e78:	4620      	mov	r0, r4
   37e7a:	f7ff ffc6 	bl	37e0a <chunk_size>
   37e7e:	182b      	adds	r3, r5, r0

	set_chunk_size(h, lc, newsz);
   37e80:	461a      	mov	r2, r3
   37e82:	4639      	mov	r1, r7
   37e84:	4620      	mov	r0, r4
   37e86:	9301      	str	r3, [sp, #4]
   37e88:	f7ff ffdd 	bl	37e46 <set_chunk_size>
	return c + chunk_size(h, c);
   37e8c:	4631      	mov	r1, r6
   37e8e:	4620      	mov	r0, r4
   37e90:	f7ff ffbb 	bl	37e0a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   37e94:	2200      	movs	r2, #0
   37e96:	1831      	adds	r1, r6, r0
   37e98:	4620      	mov	r0, r4
   37e9a:	9b01      	ldr	r3, [sp, #4]
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   37e9c:	b003      	add	sp, #12
   37e9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   37ea2:	f7ff bfa7 	b.w	37df4 <chunk_set>

00037ea6 <split_chunks>:
{
   37ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37ea8:	4614      	mov	r4, r2
   37eaa:	460e      	mov	r6, r1
   37eac:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   37eae:	f7ff ffac 	bl	37e0a <chunk_size>
	size_t lsz = rc - lc;
   37eb2:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   37eb4:	1b32      	subs	r2, r6, r4
   37eb6:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   37eb8:	4631      	mov	r1, r6
   37eba:	461a      	mov	r2, r3
   37ebc:	4628      	mov	r0, r5
   37ebe:	9301      	str	r3, [sp, #4]
   37ec0:	f7ff ffc1 	bl	37e46 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   37ec4:	463a      	mov	r2, r7
   37ec6:	4621      	mov	r1, r4
   37ec8:	4628      	mov	r0, r5
   37eca:	f7ff ffbc 	bl	37e46 <set_chunk_size>
   37ece:	9b01      	ldr	r3, [sp, #4]
   37ed0:	2200      	movs	r2, #0
   37ed2:	4621      	mov	r1, r4
   37ed4:	4628      	mov	r0, r5
   37ed6:	f7ff ff8d 	bl	37df4 <chunk_set>
	return c + chunk_size(h, c);
   37eda:	4621      	mov	r1, r4
   37edc:	4628      	mov	r0, r5
   37ede:	f7ff ff94 	bl	37e0a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   37ee2:	463b      	mov	r3, r7
   37ee4:	1821      	adds	r1, r4, r0
   37ee6:	2200      	movs	r2, #0
   37ee8:	4628      	mov	r0, r5
}
   37eea:	b003      	add	sp, #12
   37eec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   37ef0:	f7ff bf80 	b.w	37df4 <chunk_set>

00037ef4 <free_list_remove_bidx>:
{
   37ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37ef8:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   37efa:	2203      	movs	r2, #3
   37efc:	460e      	mov	r6, r1
   37efe:	4604      	mov	r4, r0
   37f00:	f7ff ff6d 	bl	37dde <chunk_field>
	if (next_free_chunk(h, c) == c) {
   37f04:	4286      	cmp	r6, r0
   37f06:	4605      	mov	r5, r0
   37f08:	f107 0804 	add.w	r8, r7, #4
   37f0c:	d10b      	bne.n	37f26 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   37f0e:	2301      	movs	r3, #1
   37f10:	fa03 f707 	lsl.w	r7, r3, r7
   37f14:	68e3      	ldr	r3, [r4, #12]
   37f16:	ea23 0307 	bic.w	r3, r3, r7
   37f1a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   37f1c:	2300      	movs	r3, #0
   37f1e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   37f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   37f26:	4631      	mov	r1, r6
   37f28:	2202      	movs	r2, #2
   37f2a:	4620      	mov	r0, r4
   37f2c:	f7ff ff57 	bl	37dde <chunk_field>
   37f30:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   37f32:	462b      	mov	r3, r5
   37f34:	4601      	mov	r1, r0
   37f36:	2203      	movs	r2, #3
   37f38:	4620      	mov	r0, r4
		b->next = second;
   37f3a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   37f3e:	f7ff ff59 	bl	37df4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   37f42:	4633      	mov	r3, r6
   37f44:	4629      	mov	r1, r5
   37f46:	4620      	mov	r0, r4
}
   37f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   37f4c:	2202      	movs	r2, #2
   37f4e:	f7ff bf51 	b.w	37df4 <chunk_set>

00037f52 <free_list_remove>:
{
   37f52:	b538      	push	{r3, r4, r5, lr}
   37f54:	4604      	mov	r4, r0
   37f56:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   37f58:	f7ff ff57 	bl	37e0a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   37f5c:	68a3      	ldr	r3, [r4, #8]
   37f5e:	4601      	mov	r1, r0
   37f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   37f64:	d301      	bcc.n	37f6a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   37f66:	2801      	cmp	r0, #1
   37f68:	d009      	beq.n	37f7e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   37f6a:	4620      	mov	r0, r4
   37f6c:	f7ff ff6f 	bl	37e4e <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   37f70:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   37f72:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   37f74:	4620      	mov	r0, r4
}
   37f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   37f7a:	f7ff bfbb 	b.w	37ef4 <free_list_remove_bidx>
}
   37f7e:	bd38      	pop	{r3, r4, r5, pc}

00037f80 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   37f80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   37f84:	4604      	mov	r4, r0
   37f86:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   37f88:	f7ff ff61 	bl	37e4e <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   37f8c:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   37f8e:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   37f90:	4620      	mov	r0, r4
   37f92:	f7ff ff5c 	bl	37e4e <bucket_idx>
   37f96:	42a8      	cmp	r0, r5
   37f98:	da04      	bge.n	37fa4 <alloc_chunk+0x24>
		return 0;
   37f9a:	2100      	movs	r1, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   37f9c:	4608      	mov	r0, r1
   37f9e:	b003      	add	sp, #12
   37fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   37fa4:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   37fa8:	f8d9 8010 	ldr.w	r8, [r9, #16]
   37fac:	f1b8 0f00 	cmp.w	r8, #0
   37fb0:	d019      	beq.n	37fe6 <alloc_chunk+0x66>
   37fb2:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   37fb4:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   37fb8:	4620      	mov	r0, r4
   37fba:	9101      	str	r1, [sp, #4]
   37fbc:	f7ff ff25 	bl	37e0a <chunk_size>
   37fc0:	42b8      	cmp	r0, r7
   37fc2:	9901      	ldr	r1, [sp, #4]
   37fc4:	d305      	bcc.n	37fd2 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   37fc6:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   37fc8:	4620      	mov	r0, r4
   37fca:	f7ff ff93 	bl	37ef4 <free_list_remove_bidx>
   37fce:	9901      	ldr	r1, [sp, #4]
		return c;
   37fd0:	e7e4      	b.n	37f9c <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   37fd2:	2203      	movs	r2, #3
   37fd4:	4620      	mov	r0, r4
   37fd6:	f7ff ff02 	bl	37dde <chunk_field>
		} while (--i && b->next != first);
   37fda:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   37fdc:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   37fe0:	d001      	beq.n	37fe6 <alloc_chunk+0x66>
   37fe2:	4580      	cmp	r8, r0
   37fe4:	d1e6      	bne.n	37fb4 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   37fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37fea:	68e3      	ldr	r3, [r4, #12]
   37fec:	3501      	adds	r5, #1
   37fee:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   37ff0:	401a      	ands	r2, r3
   37ff2:	d0d2      	beq.n	37f9a <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   37ff4:	fa92 f2a2 	rbit	r2, r2
   37ff8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   37ffc:	1d13      	adds	r3, r2, #4
   37ffe:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   38002:	9101      	str	r1, [sp, #4]
   38004:	e7e0      	b.n	37fc8 <alloc_chunk+0x48>

00038006 <free_list_add>:
{
   38006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3800a:	4604      	mov	r4, r0
   3800c:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   3800e:	f7ff fefc 	bl	37e0a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   38012:	68a3      	ldr	r3, [r4, #8]
   38014:	4601      	mov	r1, r0
   38016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   3801a:	d301      	bcc.n	38020 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   3801c:	2801      	cmp	r0, #1
   3801e:	d035      	beq.n	3808c <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   38020:	4620      	mov	r0, r4
   38022:	f7ff ff14 	bl	37e4e <bucket_idx>
	if (b->next == 0U) {
   38026:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   3802a:	6916      	ldr	r6, [r2, #16]
   3802c:	b99e      	cbnz	r6, 38056 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   3802e:	2301      	movs	r3, #1
   38030:	fa03 f000 	lsl.w	r0, r3, r0
   38034:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   38036:	4629      	mov	r1, r5
   38038:	4303      	orrs	r3, r0
   3803a:	60e3      	str	r3, [r4, #12]
   3803c:	4620      	mov	r0, r4
		b->next = c;
   3803e:	6115      	str	r5, [r2, #16]
   38040:	462b      	mov	r3, r5
   38042:	2202      	movs	r2, #2
   38044:	f7ff fed6 	bl	37df4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   38048:	2203      	movs	r2, #3
   3804a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   3804c:	4620      	mov	r0, r4
}
   3804e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   38052:	f7ff becf 	b.w	37df4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   38056:	2202      	movs	r2, #2
   38058:	4631      	mov	r1, r6
   3805a:	4620      	mov	r0, r4
   3805c:	f7ff febf 	bl	37dde <chunk_field>
   38060:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   38062:	4603      	mov	r3, r0
   38064:	2202      	movs	r2, #2
   38066:	4629      	mov	r1, r5
   38068:	4620      	mov	r0, r4
   3806a:	f7ff fec3 	bl	37df4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   3806e:	4633      	mov	r3, r6
   38070:	2203      	movs	r2, #3
   38072:	4629      	mov	r1, r5
   38074:	4620      	mov	r0, r4
   38076:	f7ff febd 	bl	37df4 <chunk_set>
   3807a:	2203      	movs	r2, #3
   3807c:	4639      	mov	r1, r7
   3807e:	462b      	mov	r3, r5
   38080:	4620      	mov	r0, r4
   38082:	f7ff feb7 	bl	37df4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   38086:	2202      	movs	r2, #2
   38088:	4631      	mov	r1, r6
   3808a:	e7df      	b.n	3804c <free_list_add+0x46>
   3808c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00038090 <sys_heap_free>:
{
   38090:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (mem == NULL) {
   38092:	2900      	cmp	r1, #0
   38094:	d050      	beq.n	38138 <sys_heap_free+0xa8>
	struct z_heap *h = heap->heap;
   38096:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
   38098:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   3809a:	68ab      	ldr	r3, [r5, #8]
   3809c:	4628      	mov	r0, r5
   3809e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   380a2:	bf2c      	ite	cs
   380a4:	2408      	movcs	r4, #8
   380a6:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   380a8:	1b0c      	subs	r4, r1, r4
   380aa:	1b64      	subs	r4, r4, r5
   380ac:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   380ae:	4621      	mov	r1, r4
   380b0:	f7ff feb1 	bl	37e16 <set_chunk_used>
	return c + chunk_size(h, c);
   380b4:	4621      	mov	r1, r4
   380b6:	f7ff fea8 	bl	37e0a <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   380ba:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   380bc:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   380be:	4628      	mov	r0, r5
   380c0:	9101      	str	r1, [sp, #4]
   380c2:	f7ff fe8c 	bl	37dde <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   380c6:	f010 0f01 	tst.w	r0, #1
   380ca:	9901      	ldr	r1, [sp, #4]
   380cc:	d10b      	bne.n	380e6 <sys_heap_free+0x56>
		free_list_remove(h, right_chunk(h, c));
   380ce:	4628      	mov	r0, r5
   380d0:	f7ff ff3f 	bl	37f52 <free_list_remove>
	return c + chunk_size(h, c);
   380d4:	4621      	mov	r1, r4
   380d6:	4628      	mov	r0, r5
   380d8:	f7ff fe97 	bl	37e0a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   380dc:	4621      	mov	r1, r4
   380de:	1822      	adds	r2, r4, r0
   380e0:	4628      	mov	r0, r5
   380e2:	f7ff fec1 	bl	37e68 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   380e6:	2200      	movs	r2, #0
   380e8:	4621      	mov	r1, r4
   380ea:	4628      	mov	r0, r5
   380ec:	f7ff fe77 	bl	37dde <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   380f0:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   380f2:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   380f4:	4628      	mov	r0, r5
   380f6:	9101      	str	r1, [sp, #4]
   380f8:	f7ff fe71 	bl	37dde <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   380fc:	f010 0601 	ands.w	r6, r0, #1
   38100:	9901      	ldr	r1, [sp, #4]
   38102:	d112      	bne.n	3812a <sys_heap_free+0x9a>
		free_list_remove(h, left_chunk(h, c));
   38104:	4628      	mov	r0, r5
   38106:	f7ff ff24 	bl	37f52 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   3810a:	4621      	mov	r1, r4
   3810c:	4632      	mov	r2, r6
   3810e:	4628      	mov	r0, r5
   38110:	f7ff fe65 	bl	37dde <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   38114:	4622      	mov	r2, r4
   38116:	1a21      	subs	r1, r4, r0
   38118:	4628      	mov	r0, r5
   3811a:	f7ff fea5 	bl	37e68 <merge_chunks>
   3811e:	4621      	mov	r1, r4
   38120:	4632      	mov	r2, r6
   38122:	4628      	mov	r0, r5
   38124:	f7ff fe5b 	bl	37dde <chunk_field>
   38128:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   3812a:	4621      	mov	r1, r4
   3812c:	4628      	mov	r0, r5
}
   3812e:	b002      	add	sp, #8
   38130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   38134:	f7ff bf67 	b.w	38006 <free_list_add>
}
   38138:	b002      	add	sp, #8
   3813a:	bd70      	pop	{r4, r5, r6, pc}

0003813c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   3813c:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   3813e:	b909      	cbnz	r1, 38144 <sys_heap_alloc+0x8>
		return NULL;
   38140:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   38142:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   38144:	6805      	ldr	r5, [r0, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   38146:	1dcc      	adds	r4, r1, #7
	return big_heap(h) ? 8 : 4;
   38148:	68ab      	ldr	r3, [r5, #8]
	chunkid_t c = alloc_chunk(h, chunk_sz);
   3814a:	4628      	mov	r0, r5
   3814c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   38150:	bf2c      	ite	cs
   38152:	2208      	movcs	r2, #8
   38154:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   38156:	4414      	add	r4, r2
   38158:	08e4      	lsrs	r4, r4, #3
   3815a:	4621      	mov	r1, r4
   3815c:	f7ff ff10 	bl	37f80 <alloc_chunk>
	if (c == 0U) {
   38160:	4606      	mov	r6, r0
   38162:	2800      	cmp	r0, #0
   38164:	d0ec      	beq.n	38140 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   38166:	4601      	mov	r1, r0
   38168:	4628      	mov	r0, r5
   3816a:	f7ff fe4e 	bl	37e0a <chunk_size>
   3816e:	42a0      	cmp	r0, r4
   38170:	d909      	bls.n	38186 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   38172:	4434      	add	r4, r6
   38174:	4631      	mov	r1, r6
   38176:	4628      	mov	r0, r5
   38178:	4622      	mov	r2, r4
   3817a:	f7ff fe94 	bl	37ea6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   3817e:	4621      	mov	r1, r4
   38180:	4628      	mov	r0, r5
   38182:	f7ff ff40 	bl	38006 <free_list_add>
	set_chunk_used(h, c, true);
   38186:	4628      	mov	r0, r5
   38188:	2201      	movs	r2, #1
   3818a:	4631      	mov	r1, r6
   3818c:	f7ff fe43 	bl	37e16 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   38190:	68ab      	ldr	r3, [r5, #8]
   38192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   38196:	bf2c      	ite	cs
   38198:	2008      	movcs	r0, #8
   3819a:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   3819c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   381a0:	4428      	add	r0, r5
	return chunk_mem(h, c);
   381a2:	e7ce      	b.n	38142 <sys_heap_alloc+0x6>

000381a4 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   381a4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   381a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   381aa:	bf2c      	ite	cs
   381ac:	2508      	movcs	r5, #8
   381ae:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   381b0:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   381b2:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   381b4:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   381b6:	1dcc      	adds	r4, r1, #7
   381b8:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   381bc:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   381be:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   381c2:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   381c4:	440d      	add	r5, r1
   381c6:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   381ca:	1b2d      	subs	r5, r5, r4
   381cc:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   381ce:	4629      	mov	r1, r5
   381d0:	4620      	mov	r0, r4
	h->len = buf_sz;
   381d2:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   381d4:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   381d6:	f7ff fe3a 	bl	37e4e <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   381da:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   381dc:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   381de:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   381e0:	361b      	adds	r6, #27
   381e2:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   381e4:	f104 0210 	add.w	r2, r4, #16
   381e8:	428b      	cmp	r3, r1
   381ea:	db29      	blt.n	38240 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   381ec:	4632      	mov	r2, r6
   381ee:	4620      	mov	r0, r4
   381f0:	2100      	movs	r1, #0
   381f2:	f7ff fe28 	bl	37e46 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   381f6:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   381f8:	4620      	mov	r0, r4
   381fa:	2201      	movs	r2, #1
   381fc:	2100      	movs	r1, #0
   381fe:	f7ff fe0a 	bl	37e16 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   38202:	463a      	mov	r2, r7
   38204:	4631      	mov	r1, r6
   38206:	f7ff fe1e 	bl	37e46 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   3820a:	4633      	mov	r3, r6
   3820c:	4631      	mov	r1, r6
   3820e:	4620      	mov	r0, r4
   38210:	2200      	movs	r2, #0
   38212:	f7ff fdef 	bl	37df4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   38216:	4629      	mov	r1, r5
   38218:	4620      	mov	r0, r4
   3821a:	2200      	movs	r2, #0
   3821c:	f7ff fe13 	bl	37e46 <set_chunk_size>
   38220:	463b      	mov	r3, r7
   38222:	4629      	mov	r1, r5
   38224:	4620      	mov	r0, r4
   38226:	2200      	movs	r2, #0
   38228:	f7ff fde4 	bl	37df4 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   3822c:	4629      	mov	r1, r5
   3822e:	4620      	mov	r0, r4
   38230:	2201      	movs	r2, #1
   38232:	f7ff fdf0 	bl	37e16 <set_chunk_used>

	free_list_add(h, chunk0_size);
   38236:	4631      	mov	r1, r6
}
   38238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   3823c:	f7ff bee3 	b.w	38006 <free_list_add>
		h->buckets[i].next = 0;
   38240:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   38244:	3301      	adds	r3, #1
   38246:	e7cf      	b.n	381e8 <sys_heap_init+0x44>

00038248 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   38248:	2100      	movs	r1, #0
{
   3824a:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   3824c:	e9d0 6500 	ldrd	r6, r5, [r0]
   38250:	0872      	lsrs	r2, r6, #1
   38252:	f006 0301 	and.w	r3, r6, #1
   38256:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   3825a:	189b      	adds	r3, r3, r2
   3825c:	ea4f 0455 	mov.w	r4, r5, lsr #1
   38260:	eb44 0101 	adc.w	r1, r4, r1
   38264:	e9c0 3100 	strd	r3, r1, [r0]
}
   38268:	bd70      	pop	{r4, r5, r6, pc}

0003826a <_ldiv5>:
	__asm__ ("" : "+r" (m));
   3826a:	f04f 3133 	mov.w	r1, #858993459	; 0x33333333
	result = ((uint64_t)(m * 3U) << 32) | (m * 3U);
   3826e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
{
   38272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t v_lo = *v;
   38276:	e9d0 2400 	ldrd	r2, r4, [r0]
	result = ((uint64_t)(m * 3U) << 32) | (m * 3U);
   3827a:	461d      	mov	r5, r3
	result >>= 32;
   3827c:	2700      	movs	r7, #0
	result += (uint64_t)v_lo * m;
   3827e:	fba2 8901 	umull	r8, r9, r2, r1
   38282:	eb18 0505 	adds.w	r5, r8, r5
	result += (uint64_t)v_hi * m;
   38286:	fba4 4501 	umull	r4, r5, r4, r1
	result += (uint64_t)v_lo * m;
   3828a:	eb49 0603 	adc.w	r6, r9, r3
	result += (uint64_t)v_hi * m;
   3828e:	eb18 0204 	adds.w	r2, r8, r4
   38292:	eb49 0105 	adc.w	r1, r9, r5
   38296:	1992      	adds	r2, r2, r6
	result >>= 32;
   38298:	463a      	mov	r2, r7
	result += (uint64_t)v_hi * m;
   3829a:	eb47 0101 	adc.w	r1, r7, r1
	result += (uint64_t)v_hi * m;
   3829e:	1863      	adds	r3, r4, r1
   382a0:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   382a4:	e9c0 3200 	strd	r3, r2, [r0]
}
   382a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000382ac <_get_digit>:
	if (*digit_count > 0) {
   382ac:	680b      	ldr	r3, [r1, #0]
{
   382ae:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   382b0:	2b00      	cmp	r3, #0
   382b2:	dd10      	ble.n	382d6 <_get_digit+0x2a>
		--*digit_count;
   382b4:	3b01      	subs	r3, #1
   382b6:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   382b8:	210a      	movs	r1, #10
   382ba:	6802      	ldr	r2, [r0, #0]
   382bc:	6844      	ldr	r4, [r0, #4]
   382be:	fba2 5601 	umull	r5, r6, r2, r1
   382c2:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   382c6:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   382ca:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   382ce:	0f31      	lsrs	r1, r6, #28
   382d0:	3130      	adds	r1, #48	; 0x30
}
   382d2:	4608      	mov	r0, r1
   382d4:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   382d6:	2130      	movs	r1, #48	; 0x30
   382d8:	e7fb      	b.n	382d2 <_get_digit+0x26>

000382da <outs>:
{
   382da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   382de:	4680      	mov	r8, r0
   382e0:	4689      	mov	r9, r1
   382e2:	4616      	mov	r6, r2
   382e4:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   382e6:	4615      	mov	r5, r2
   382e8:	42bd      	cmp	r5, r7
   382ea:	eba5 0406 	sub.w	r4, r5, r6
   382ee:	d305      	bcc.n	382fc <outs+0x22>
   382f0:	b10f      	cbz	r7, 382f6 <outs+0x1c>
	return (int)count;
   382f2:	4620      	mov	r0, r4
   382f4:	e008      	b.n	38308 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   382f6:	782b      	ldrb	r3, [r5, #0]
   382f8:	2b00      	cmp	r3, #0
   382fa:	d0fa      	beq.n	382f2 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   382fc:	4649      	mov	r1, r9
   382fe:	f815 0b01 	ldrb.w	r0, [r5], #1
   38302:	47c0      	blx	r8
		if (rc < 0) {
   38304:	2800      	cmp	r0, #0
   38306:	daef      	bge.n	382e8 <outs+0xe>
}
   38308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003830c <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   3830c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   38310:	4770      	bx	lr

00038312 <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   38312:	b570      	push	{r4, r5, r6, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   38314:	6984      	ldr	r4, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   38316:	6885      	ldr	r5, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   38318:	6906      	ldr	r6, [r0, #16]
   3831a:	b18c      	cbz	r4, 38340 <ring_buf_put_claim+0x2e>
   3831c:	402c      	ands	r4, r5
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   3831e:	6803      	ldr	r3, [r0, #0]
   38320:	4433      	add	r3, r6
   38322:	1b5b      	subs	r3, r3, r5
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   38324:	429a      	cmp	r2, r3
   38326:	bf28      	it	cs
   38328:	461a      	movcs	r2, r3
	trail_size = buf->size - tmp_trail_mod;
   3832a:	1b36      	subs	r6, r6, r4

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   3832c:	42b2      	cmp	r2, r6
   3832e:	bf28      	it	cs
   38330:	4632      	movcs	r2, r6
	*data = &buf->buf.buf8[tmp_trail_mod];
   38332:	6943      	ldr	r3, [r0, #20]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   38334:	4415      	add	r5, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
   38336:	441c      	add	r4, r3
   38338:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   3833a:	6085      	str	r5, [r0, #8]

	return allocated;
}
   3833c:	4610      	mov	r0, r2
   3833e:	bd70      	pop	{r4, r5, r6, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   38340:	fbb5 f4f6 	udiv	r4, r5, r6
   38344:	fb06 5414 	mls	r4, r6, r4, r5
   38348:	e7e9      	b.n	3831e <ring_buf_put_claim+0xc>

0003834a <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->tail + size) > (buf->head + buf->size)) {
   3834a:	6843      	ldr	r3, [r0, #4]
   3834c:	6902      	ldr	r2, [r0, #16]
   3834e:	4419      	add	r1, r3
   38350:	6803      	ldr	r3, [r0, #0]
   38352:	4413      	add	r3, r2
   38354:	4299      	cmp	r1, r3
		return -EINVAL;
	}

	buf->tail += size;
	buf->misc.byte_mode.tmp_tail = buf->tail;
   38356:	bf9a      	itte	ls
   38358:	e9c0 1101 	strdls	r1, r1, [r0, #4]

	return 0;
   3835c:	2000      	movls	r0, #0
		return -EINVAL;
   3835e:	f06f 0015 	mvnhi.w	r0, #21
}
   38362:	4770      	bx	lr

00038364 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   38364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   38368:	4680      	mov	r8, r0
   3836a:	460e      	mov	r6, r1
   3836c:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   3836e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   38370:	462a      	mov	r2, r5
   38372:	a901      	add	r1, sp, #4
   38374:	4640      	mov	r0, r8
   38376:	f7ff ffcc 	bl	38312 <ring_buf_put_claim>
   3837a:	4604      	mov	r4, r0
   3837c:	4602      	mov	r2, r0
   3837e:	4631      	mov	r1, r6
   38380:	9801      	ldr	r0, [sp, #4]
   38382:	f003 f816 	bl	3b3b2 <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   38386:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   38388:	4427      	add	r7, r4
		data += partial_size;
   3838a:	4426      	add	r6, r4
	} while (size && partial_size);
   3838c:	d001      	beq.n	38392 <ring_buf_put+0x2e>
   3838e:	2c00      	cmp	r4, #0
   38390:	d1ee      	bne.n	38370 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   38392:	4639      	mov	r1, r7
   38394:	4640      	mov	r0, r8
   38396:	f7ff ffd8 	bl	3834a <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   3839a:	4638      	mov	r0, r7
   3839c:	b002      	add	sp, #8
   3839e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000383a2 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   383a2:	b570      	push	{r4, r5, r6, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   383a4:	6984      	ldr	r4, [r0, #24]
	uint32_t space, granted_size, trail_size, tmp_head_mod;

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   383a6:	68c5      	ldr	r5, [r0, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   383a8:	6903      	ldr	r3, [r0, #16]
   383aa:	b184      	cbz	r4, 383ce <ring_buf_get_claim+0x2c>
   383ac:	402c      	ands	r4, r5
	space = buf->tail - buf->misc.byte_mode.tmp_head;
   383ae:	6846      	ldr	r6, [r0, #4]
	trail_size = buf->size - tmp_head_mod;
   383b0:	1b1b      	subs	r3, r3, r4
	space = buf->tail - buf->misc.byte_mode.tmp_head;
   383b2:	1b76      	subs	r6, r6, r5

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   383b4:	42b2      	cmp	r2, r6
   383b6:	bf28      	it	cs
   383b8:	4632      	movcs	r2, r6

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   383ba:	4293      	cmp	r3, r2
   383bc:	bf28      	it	cs
   383be:	4613      	movcs	r3, r2

	*data = &buf->buf.buf8[tmp_head_mod];
   383c0:	6942      	ldr	r2, [r0, #20]
	buf->misc.byte_mode.tmp_head += granted_size;
   383c2:	441d      	add	r5, r3
	*data = &buf->buf.buf8[tmp_head_mod];
   383c4:	4414      	add	r4, r2
   383c6:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   383c8:	60c5      	str	r5, [r0, #12]

	return granted_size;
}
   383ca:	4618      	mov	r0, r3
   383cc:	bd70      	pop	{r4, r5, r6, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   383ce:	fbb5 f4f3 	udiv	r4, r5, r3
   383d2:	fb03 5414 	mls	r4, r3, r4, r5
   383d6:	e7ea      	b.n	383ae <ring_buf_get_claim+0xc>

000383d8 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->head + size) > buf->tail) {
   383d8:	6803      	ldr	r3, [r0, #0]
{
   383da:	b510      	push	{r4, lr}
	if ((buf->head + size) > buf->tail) {
   383dc:	4419      	add	r1, r3
   383de:	6843      	ldr	r3, [r0, #4]
{
   383e0:	4604      	mov	r4, r0
	if ((buf->head + size) > buf->tail) {
   383e2:	4299      	cmp	r1, r3
   383e4:	d824      	bhi.n	38430 <ring_buf_get_finish+0x58>
		return -EINVAL;
	}

	buf->head += size;
   383e6:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   383e8:	60c1      	str	r1, [r0, #12]
	uint32_t threshold = ring_buf_get_rewind_threshold();
   383ea:	f7ff ff8f 	bl	3830c <ring_buf_get_rewind_threshold>
	if (buf->head < threshold) {
   383ee:	6823      	ldr	r3, [r4, #0]
   383f0:	4298      	cmp	r0, r3
   383f2:	d81b      	bhi.n	3842c <ring_buf_get_finish+0x54>
	rewind = buf->size * (threshold / buf->size);
   383f4:	6923      	ldr	r3, [r4, #16]
   383f6:	fbb0 f0f3 	udiv	r0, r0, r3
   383fa:	4358      	muls	r0, r3
	__asm__ volatile(
   383fc:	f04f 0320 	mov.w	r3, #32
   38400:	f3ef 8211 	mrs	r2, BASEPRI
   38404:	f383 8811 	msr	BASEPRI, r3
   38408:	f3bf 8f6f 	isb	sy
	buf->tail -= rewind;
   3840c:	6863      	ldr	r3, [r4, #4]
   3840e:	1a1b      	subs	r3, r3, r0
   38410:	6063      	str	r3, [r4, #4]
	buf->head -= rewind;
   38412:	6823      	ldr	r3, [r4, #0]
   38414:	1a1b      	subs	r3, r3, r0
   38416:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head -= rewind;
   38418:	68e3      	ldr	r3, [r4, #12]
   3841a:	1a1b      	subs	r3, r3, r0
   3841c:	60e3      	str	r3, [r4, #12]
	buf->misc.byte_mode.tmp_tail -= rewind;
   3841e:	68a3      	ldr	r3, [r4, #8]
   38420:	1a18      	subs	r0, r3, r0
   38422:	60a0      	str	r0, [r4, #8]
	__asm__ volatile(
   38424:	f382 8811 	msr	BASEPRI, r2
   38428:	f3bf 8f6f 	isb	sy

	byte_indexes_rewind(buf);

	return 0;
   3842c:	2000      	movs	r0, #0
   3842e:	e001      	b.n	38434 <ring_buf_get_finish+0x5c>
		return -EINVAL;
   38430:	f06f 0015 	mvn.w	r0, #21
}
   38434:	bd10      	pop	{r4, pc}

00038436 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   38436:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3843a:	4680      	mov	r8, r0
   3843c:	460e      	mov	r6, r1
   3843e:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   38440:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   38442:	462a      	mov	r2, r5
   38444:	a901      	add	r1, sp, #4
   38446:	4640      	mov	r0, r8
   38448:	f7ff ffab 	bl	383a2 <ring_buf_get_claim>
   3844c:	4604      	mov	r4, r0
   3844e:	4602      	mov	r2, r0
   38450:	9901      	ldr	r1, [sp, #4]
   38452:	4630      	mov	r0, r6
   38454:	f002 ffad 	bl	3b3b2 <memcpy>
		memcpy(data, src, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   38458:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   3845a:	4427      	add	r7, r4
		data += partial_size;
   3845c:	4426      	add	r6, r4
	} while (size && partial_size);
   3845e:	d001      	beq.n	38464 <ring_buf_get+0x2e>
   38460:	2c00      	cmp	r4, #0
   38462:	d1ee      	bne.n	38442 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   38464:	4639      	mov	r1, r7
   38466:	4640      	mov	r0, r8
   38468:	f7ff ffb6 	bl	383d8 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   3846c:	4638      	mov	r0, r7
   3846e:	b002      	add	sp, #8
   38470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00038474 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_TCP_CONN_TIME, 60);
GEN_ABSOLUTE_SYM(CONFIG_SLM_HTTPC, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   38474:	4770      	bx	lr

00038476 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   38476:	f7fc bdbf 	b.w	34ff8 <SystemInit>

0003847a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   3847a:	2300      	movs	r3, #0
	list->head = NULL;
   3847c:	e9c0 3300 	strd	r3, r3, [r0]
}
   38480:	4770      	bx	lr

00038482 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   38482:	6803      	ldr	r3, [r0, #0]
   38484:	b923      	cbnz	r3, 38490 <log_list_add_tail+0xe>
		list->head = msg;
   38486:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   38488:	2300      	movs	r3, #0
	list->tail = msg;
   3848a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   3848c:	600b      	str	r3, [r1, #0]
}
   3848e:	4770      	bx	lr
		list->tail->next = msg;
   38490:	6843      	ldr	r3, [r0, #4]
   38492:	6019      	str	r1, [r3, #0]
   38494:	e7f8      	b.n	38488 <log_list_add_tail+0x6>

00038496 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   38496:	6800      	ldr	r0, [r0, #0]
   38498:	4770      	bx	lr

0003849a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   3849a:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   3849c:	b10b      	cbz	r3, 384a2 <log_list_head_get+0x8>
		list->head = list->head->next;
   3849e:	681a      	ldr	r2, [r3, #0]
   384a0:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   384a2:	4618      	mov	r0, r3
   384a4:	4770      	bx	lr

000384a6 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   384a6:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   384a8:	f7ec f98c 	bl	247c4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   384ac:	b118      	cbz	r0, 384b6 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   384ae:	2301      	movs	r3, #1
   384b0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   384b2:	2300      	movs	r3, #0
   384b4:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   384b6:	bd08      	pop	{r3, pc}

000384b8 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   384b8:	f7ed ba38 	b.w	2592c <z_timer_cycle_get_32>

000384bc <dummy_timestamp>:
   384bc:	2000      	movs	r0, #0
   384be:	4770      	bx	lr

000384c0 <log_0>:
{
   384c0:	b513      	push	{r0, r1, r4, lr}
   384c2:	4604      	mov	r4, r0
   384c4:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   384c6:	f7ff ffee 	bl	384a6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   384ca:	b130      	cbz	r0, 384da <log_0+0x1a>
		msg_finalize(msg, src_level);
   384cc:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   384ce:	6104      	str	r4, [r0, #16]
}
   384d0:	b002      	add	sp, #8
   384d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   384d6:	f7ec b897 	b.w	24608 <msg_finalize>
}
   384da:	b002      	add	sp, #8
   384dc:	bd10      	pop	{r4, pc}

000384de <log_1>:
{
   384de:	b537      	push	{r0, r1, r2, r4, r5, lr}
   384e0:	460c      	mov	r4, r1
   384e2:	4611      	mov	r1, r2
   384e4:	4605      	mov	r5, r0
   384e6:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   384e8:	f7ff ffdd 	bl	384a6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   384ec:	b160      	cbz	r0, 38508 <log_1+0x2a>
		msg->str = str;
   384ee:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   384f0:	2501      	movs	r5, #1
   384f2:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   384f4:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   384f6:	f365 1207 	bfi	r2, r5, #4, #4
   384fa:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   384fc:	9901      	ldr	r1, [sp, #4]
}
   384fe:	b003      	add	sp, #12
   38500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   38504:	f7ec b880 	b.w	24608 <msg_finalize>
}
   38508:	b003      	add	sp, #12
   3850a:	bd30      	pop	{r4, r5, pc}

0003850c <log_2>:
{
   3850c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3850e:	460e      	mov	r6, r1
   38510:	4619      	mov	r1, r3
   38512:	4607      	mov	r7, r0
   38514:	4615      	mov	r5, r2
   38516:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   38518:	f7ff ffc5 	bl	384a6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   3851c:	b168      	cbz	r0, 3853a <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   3851e:	2202      	movs	r2, #2
   38520:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   38522:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   38526:	f362 1307 	bfi	r3, r2, #4, #4
   3852a:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   3852c:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   3852e:	6107      	str	r7, [r0, #16]
}
   38530:	b003      	add	sp, #12
   38532:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   38536:	f7ec b867 	b.w	24608 <msg_finalize>
}
   3853a:	b003      	add	sp, #12
   3853c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003853e <log_3>:
{
   3853e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   38542:	460f      	mov	r7, r1
   38544:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   38548:	4680      	mov	r8, r0
   3854a:	4616      	mov	r6, r2
   3854c:	461d      	mov	r5, r3
   3854e:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   38550:	f7ff ffa9 	bl	384a6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   38554:	b178      	cbz	r0, 38576 <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   38556:	2203      	movs	r2, #3
   38558:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   3855a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   3855e:	f362 1307 	bfi	r3, r2, #4, #4
   38562:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   38564:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   38566:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   3856a:	61c5      	str	r5, [r0, #28]
}
   3856c:	b002      	add	sp, #8
   3856e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   38572:	f7ec b849 	b.w	24608 <msg_finalize>
}
   38576:	b002      	add	sp, #8
   38578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003857c <log_n>:
{
   3857c:	b510      	push	{r4, lr}
   3857e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   38580:	f000 f8b1 	bl	386e6 <log_msg_create_n>
		if (msg == NULL) {
   38584:	b120      	cbz	r0, 38590 <log_n+0x14>
		msg_finalize(msg, src_level);
   38586:	4621      	mov	r1, r4
}
   38588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   3858c:	f7ec b83c 	b.w	24608 <msg_finalize>
}
   38590:	bd10      	pop	{r4, pc}

00038592 <log_printk>:
{
   38592:	b500      	push	{lr}
   38594:	b0a3      	sub	sp, #140	; 0x8c
   38596:	4602      	mov	r2, r0
   38598:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   3859a:	a801      	add	r0, sp, #4
   3859c:	2181      	movs	r1, #129	; 0x81
   3859e:	f7ea feb3 	bl	23308 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   385a2:	2881      	cmp	r0, #129	; 0x81
   385a4:	4602      	mov	r2, r0
   385a6:	a901      	add	r1, sp, #4
   385a8:	bf28      	it	cs
   385aa:	2281      	movcs	r2, #129	; 0x81
   385ac:	2000      	movs	r0, #0
   385ae:	f000 f8ee 	bl	3878e <log_msg_hexdump_create>
			if (msg == NULL) {
   385b2:	b118      	cbz	r0, 385bc <log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   385b4:	f04f 0100 	mov.w	r1, #0
   385b8:	f7ec f826 	bl	24608 <msg_finalize>
}
   385bc:	b023      	add	sp, #140	; 0x8c
   385be:	f85d fb04 	ldr.w	pc, [sp], #4

000385c2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   385c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   385c6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   385c8:	8903      	ldrh	r3, [r0, #8]
{
   385ca:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   385cc:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   385d0:	42a3      	cmp	r3, r4
{
   385d2:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   385d6:	d803      	bhi.n	385e0 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   385d8:	2300      	movs	r3, #0
   385da:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   385dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   385e0:	6811      	ldr	r1, [r2, #0]
   385e2:	4421      	add	r1, r4
   385e4:	4299      	cmp	r1, r3
		*length = available_len - offset;
   385e6:	bf84      	itt	hi
   385e8:	1b19      	subhi	r1, r3, r4
   385ea:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   385ec:	2b0c      	cmp	r3, #12
	req_len = *length;
   385ee:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   385f2:	d92b      	bls.n	3864c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   385f4:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   385f6:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   385fa:	d82e      	bhi.n	3865a <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   385fc:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   385fe:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   38600:	454b      	cmp	r3, r9
   38602:	bf28      	it	cs
   38604:	464b      	movcs	r3, r9
   38606:	4420      	add	r0, r4
   38608:	461d      	mov	r5, r3
   3860a:	461a      	mov	r2, r3
		if (put_op) {
   3860c:	b317      	cbz	r7, 38654 <log_msg_hexdump_data_op+0x92>
   3860e:	4631      	mov	r1, r6
   38610:	f002 fecf 	bl	3b3b2 <memcpy>
		req_len -= cpy_len;
   38614:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   38618:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   3861a:	f1b9 0f00 	cmp.w	r9, #0
   3861e:	d0dd      	beq.n	385dc <log_msg_hexdump_data_op+0x1a>
   38620:	f1b8 0f00 	cmp.w	r8, #0
   38624:	d0da      	beq.n	385dc <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   38626:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   3862a:	454d      	cmp	r5, r9
   3862c:	bf28      	it	cs
   3862e:	464d      	movcs	r5, r9
		if (put_op) {
   38630:	1d20      	adds	r0, r4, #4
   38632:	462a      	mov	r2, r5
   38634:	4440      	add	r0, r8
   38636:	b1bf      	cbz	r7, 38668 <log_msg_hexdump_data_op+0xa6>
   38638:	4631      	mov	r1, r6
   3863a:	f002 feba 	bl	3b3b2 <memcpy>
		offset = 0;
   3863e:	2400      	movs	r4, #0
		cont = cont->next;
   38640:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   38644:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   38648:	442e      	add	r6, r5
   3864a:	e7e6      	b.n	3861a <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   3864c:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   38650:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   38652:	e7d5      	b.n	38600 <log_msg_hexdump_data_op+0x3e>
   38654:	4601      	mov	r1, r0
   38656:	4630      	mov	r0, r6
   38658:	e7da      	b.n	38610 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   3865a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   3865c:	2c1b      	cmp	r4, #27
   3865e:	d9dc      	bls.n	3861a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   38660:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   38664:	3c1c      	subs	r4, #28
   38666:	e7f9      	b.n	3865c <log_msg_hexdump_data_op+0x9a>
   38668:	4601      	mov	r1, r0
   3866a:	4630      	mov	r0, r6
   3866c:	e7e5      	b.n	3863a <log_msg_hexdump_data_op+0x78>

0003866e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   3866e:	3004      	adds	r0, #4
   38670:	e8d0 3fef 	ldaex	r3, [r0]
   38674:	3301      	adds	r3, #1
   38676:	e8c0 3fe2 	stlex	r2, r3, [r0]
   3867a:	2a00      	cmp	r2, #0
   3867c:	d1f8      	bne.n	38670 <log_msg_get+0x2>
}
   3867e:	4770      	bx	lr

00038680 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   38680:	7a40      	ldrb	r0, [r0, #9]
}
   38682:	0900      	lsrs	r0, r0, #4
   38684:	4770      	bx	lr

00038686 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   38686:	7a43      	ldrb	r3, [r0, #9]
   38688:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   3868c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   38690:	d216      	bcs.n	386c0 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   38692:	2a03      	cmp	r2, #3
   38694:	d803      	bhi.n	3869e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   38696:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   3869a:	6948      	ldr	r0, [r1, #20]
   3869c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   3869e:	2901      	cmp	r1, #1
   386a0:	d803      	bhi.n	386aa <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   386a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   386a6:	6988      	ldr	r0, [r1, #24]
   386a8:	4770      	bx	lr
	cont = msg->payload.ext.next;
   386aa:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   386ac:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   386ae:	2906      	cmp	r1, #6
   386b0:	d803      	bhi.n	386ba <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   386b2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   386b6:	6848      	ldr	r0, [r1, #4]
   386b8:	4770      	bx	lr
		cont = cont->next;
   386ba:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   386bc:	3907      	subs	r1, #7
		cont = cont->next;
   386be:	e7f6      	b.n	386ae <log_msg_arg_get+0x28>
		return 0;
   386c0:	2000      	movs	r0, #0
}
   386c2:	4770      	bx	lr

000386c4 <log_msg_put>:
{
   386c4:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   386c6:	1d02      	adds	r2, r0, #4
   386c8:	e8d2 1fef 	ldaex	r1, [r2]
   386cc:	3901      	subs	r1, #1
   386ce:	e8c2 1fec 	stlex	ip, r1, [r2]
   386d2:	f1bc 0f00 	cmp.w	ip, #0
   386d6:	d1f7      	bne.n	386c8 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   386d8:	685b      	ldr	r3, [r3, #4]
   386da:	b90b      	cbnz	r3, 386e0 <log_msg_put+0x1c>
		msg_free(msg);
   386dc:	f7ec b886 	b.w	247ec <msg_free>
}
   386e0:	4770      	bx	lr

000386e2 <log_msg_str_get>:
}
   386e2:	6900      	ldr	r0, [r0, #16]
   386e4:	4770      	bx	lr

000386e6 <log_msg_create_n>:
{
   386e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   386ea:	4681      	mov	r9, r0
   386ec:	4688      	mov	r8, r1
   386ee:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   386f0:	f7ec f868 	bl	247c4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   386f4:	4604      	mov	r4, r0
   386f6:	b330      	cbz	r0, 38746 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   386f8:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   386fa:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   386fc:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   386fe:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   38700:	8107      	strh	r7, [r0, #8]
   38702:	d909      	bls.n	38718 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   38704:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   38706:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   3870a:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   3870c:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   38710:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   38712:	f1ba 0f00 	cmp.w	sl, #0
   38716:	dc0e      	bgt.n	38736 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   38718:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   3871a:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   3871c:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   38720:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   38724:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   38726:	d818      	bhi.n	3875a <log_msg_create_n+0x74>
   38728:	4641      	mov	r1, r8
   3872a:	00aa      	lsls	r2, r5, #2
   3872c:	f104 0014 	add.w	r0, r4, #20
   38730:	f002 fe3f 	bl	3b3b2 <memcpy>
	while (nargs != 0U) {
   38734:	e007      	b.n	38746 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   38736:	f7ec f845 	bl	247c4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   3873a:	4606      	mov	r6, r0
   3873c:	b930      	cbnz	r0, 3874c <log_msg_create_n+0x66>
			msg_free(msg);
   3873e:	4620      	mov	r0, r4
   38740:	f7ec f854 	bl	247ec <msg_free>
			return NULL;
   38744:	4634      	mov	r4, r6
}
   38746:	4620      	mov	r0, r4
   38748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   3874c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   38750:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   38754:	4683      	mov	fp, r0
		cont->next = NULL;
   38756:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   38758:	e7db      	b.n	38712 <log_msg_create_n+0x2c>
   3875a:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   3875e:	6967      	ldr	r7, [r4, #20]
   38760:	61a3      	str	r3, [r4, #24]
   38762:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   38766:	3d02      	subs	r5, #2
   38768:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   3876a:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   3876e:	2d07      	cmp	r5, #7
   38770:	462e      	mov	r6, r5
   38772:	bf28      	it	cs
   38774:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   38776:	ea4f 0986 	mov.w	r9, r6, lsl #2
   3877a:	4641      	mov	r1, r8
   3877c:	1d38      	adds	r0, r7, #4
   3877e:	464a      	mov	r2, r9
   38780:	f002 fe17 	bl	3b3b2 <memcpy>
	while (nargs != 0U) {
   38784:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   38786:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   38788:	44c8      	add	r8, r9
	while (nargs != 0U) {
   3878a:	d1f0      	bne.n	3876e <log_msg_create_n+0x88>
   3878c:	e7db      	b.n	38746 <log_msg_create_n+0x60>

0003878e <log_msg_hexdump_create>:
{
   3878e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   38792:	f643 75ff 	movw	r5, #16383	; 0x3fff
   38796:	4295      	cmp	r5, r2
{
   38798:	4680      	mov	r8, r0
   3879a:	460e      	mov	r6, r1
   3879c:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   3879e:	bf28      	it	cs
   387a0:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   387a2:	f7ec f80f 	bl	247c4 <log_msg_chunk_alloc>
	if (msg == NULL) {
   387a6:	4604      	mov	r4, r0
   387a8:	b378      	cbz	r0, 3880a <log_msg_hexdump_create+0x7c>
	msg->hdr.ref_cnt = 1;
   387aa:	2301      	movs	r3, #1
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   387ac:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.ref_cnt = 1;
   387ae:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   387b0:	00ab      	lsls	r3, r5, #2
   387b2:	f043 0301 	orr.w	r3, r3, #1
   387b6:	f002 0202 	and.w	r2, r2, #2
   387ba:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   387bc:	2f0c      	cmp	r7, #12
	msg->str = str;
   387be:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   387c2:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   387c4:	f100 0814 	add.w	r8, r0, #20
   387c8:	d916      	bls.n	387f8 <log_msg_hexdump_create+0x6a>
   387ca:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   387cc:	7a02      	ldrb	r2, [r0, #8]
   387ce:	6183      	str	r3, [r0, #24]
   387d0:	6873      	ldr	r3, [r6, #4]
   387d2:	f042 0202 	orr.w	r2, r2, #2
   387d6:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
   387d8:	2300      	movs	r3, #0
   387da:	4699      	mov	r9, r3
   387dc:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   387de:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   387e0:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   387e2:	3d08      	subs	r5, #8
	while (length > 0) {
   387e4:	b18d      	cbz	r5, 3880a <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   387e6:	f7eb ffed 	bl	247c4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   387ea:	4607      	mov	r7, r0
   387ec:	b980      	cbnz	r0, 38810 <log_msg_hexdump_create+0x82>
			msg_free(msg);
   387ee:	4620      	mov	r0, r4
   387f0:	f7eb fffc 	bl	247ec <msg_free>
			return NULL;
   387f4:	463c      	mov	r4, r7
   387f6:	e008      	b.n	3880a <log_msg_hexdump_create+0x7c>
   387f8:	462a      	mov	r2, r5
   387fa:	4631      	mov	r1, r6
   387fc:	4640      	mov	r0, r8
   387fe:	f002 fdd8 	bl	3b3b2 <memcpy>
		msg->hdr.params.generic.ext = 0;
   38802:	7a23      	ldrb	r3, [r4, #8]
   38804:	f36f 0341 	bfc	r3, #1, #1
   38808:	7223      	strb	r3, [r4, #8]
}
   3880a:	4620      	mov	r0, r4
   3880c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   38810:	2d1c      	cmp	r5, #28
   38812:	462f      	mov	r7, r5
   38814:	bf28      	it	cs
   38816:	271c      	movcs	r7, #28
		*prev_cont = cont;
   38818:	f8c8 0000 	str.w	r0, [r8]
   3881c:	4631      	mov	r1, r6
		cont->next = NULL;
   3881e:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   38822:	4680      	mov	r8, r0
   38824:	463a      	mov	r2, r7
   38826:	3004      	adds	r0, #4
   38828:	f002 fdc3 	bl	3b3b2 <memcpy>
		data += chunk_length;
   3882c:	443e      	add	r6, r7
		length -= chunk_length;
   3882e:	1bed      	subs	r5, r5, r7
   38830:	e7d8      	b.n	387e4 <log_msg_hexdump_create+0x56>

00038832 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   38832:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   38834:	2400      	movs	r4, #0
   38836:	9400      	str	r4, [sp, #0]
   38838:	f7ff fec3 	bl	385c2 <log_msg_hexdump_data_op>
}
   3883c:	b002      	add	sp, #8
   3883e:	bd10      	pop	{r4, pc}

00038840 <buffer_write>:
{
   38840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38842:	4606      	mov	r6, r0
   38844:	460d      	mov	r5, r1
   38846:	4614      	mov	r4, r2
   38848:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   3884a:	4621      	mov	r1, r4
   3884c:	4628      	mov	r0, r5
   3884e:	463a      	mov	r2, r7
   38850:	47b0      	blx	r6
	} while (len != 0);
   38852:	1a24      	subs	r4, r4, r0
		buf += processed;
   38854:	4405      	add	r5, r0
	} while (len != 0);
   38856:	d1f8      	bne.n	3884a <buffer_write+0xa>
}
   38858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003885a <std_print>:
{
   3885a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3885e:	b08e      	sub	sp, #56	; 0x38
   38860:	af0e      	add	r7, sp, #56	; 0x38
   38862:	4680      	mov	r8, r0
   38864:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   38866:	f7ff ff3c 	bl	386e2 <log_msg_str_get>
   3886a:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   3886c:	4640      	mov	r0, r8
   3886e:	f7ff ff07 	bl	38680 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   38872:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   38876:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   38878:	0083      	lsls	r3, r0, #2
   3887a:	3307      	adds	r3, #7
   3887c:	f023 0307 	bic.w	r3, r3, #7
   38880:	ebad 0d03 	sub.w	sp, sp, r3
   38884:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   38886:	45d1      	cmp	r9, sl
   38888:	d116      	bne.n	388b8 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   3888a:	4640      	mov	r0, r8
   3888c:	f7ff fef8 	bl	38680 <log_msg_nargs_get>
   38890:	280f      	cmp	r0, #15
   38892:	d81e      	bhi.n	388d2 <std_print+0x78>
   38894:	e8df f010 	tbh	[pc, r0, lsl #1]
   38898:	00200019 	.word	0x00200019
   3889c:	002d0026 	.word	0x002d0026
   388a0:	00410036 	.word	0x00410036
   388a4:	005d004e 	.word	0x005d004e
   388a8:	0081006e 	.word	0x0081006e
   388ac:	00ad0096 	.word	0x00ad0096
   388b0:	00e100c6 	.word	0x00e100c6
   388b4:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   388b8:	4649      	mov	r1, r9
   388ba:	4640      	mov	r0, r8
   388bc:	f7ff fee3 	bl	38686 <log_msg_arg_get>
   388c0:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   388c4:	f109 0901 	add.w	r9, r9, #1
   388c8:	e7dd      	b.n	38886 <std_print+0x2c>
		print_formatted(log_output, str);
   388ca:	4631      	mov	r1, r6
   388cc:	4628      	mov	r0, r5
   388ce:	f7eb ffcb 	bl	24868 <print_formatted>
}
   388d2:	46bd      	mov	sp, r7
   388d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   388d8:	4631      	mov	r1, r6
   388da:	4628      	mov	r0, r5
   388dc:	6822      	ldr	r2, [r4, #0]
   388de:	f7eb ffc3 	bl	24868 <print_formatted>
		break;
   388e2:	e7f6      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   388e4:	4631      	mov	r1, r6
   388e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   388ea:	4628      	mov	r0, r5
   388ec:	f7eb ffbc 	bl	24868 <print_formatted>
		break;
   388f0:	e7ef      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   388f2:	68a3      	ldr	r3, [r4, #8]
   388f4:	4631      	mov	r1, r6
   388f6:	9300      	str	r3, [sp, #0]
   388f8:	4628      	mov	r0, r5
   388fa:	e9d4 2300 	ldrd	r2, r3, [r4]
   388fe:	f7eb ffb3 	bl	24868 <print_formatted>
		break;
   38902:	e7e6      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   38904:	68e3      	ldr	r3, [r4, #12]
   38906:	4631      	mov	r1, r6
   38908:	9301      	str	r3, [sp, #4]
   3890a:	68a3      	ldr	r3, [r4, #8]
   3890c:	4628      	mov	r0, r5
   3890e:	9300      	str	r3, [sp, #0]
   38910:	e9d4 2300 	ldrd	r2, r3, [r4]
   38914:	f7eb ffa8 	bl	24868 <print_formatted>
		break;
   38918:	e7db      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   3891a:	6923      	ldr	r3, [r4, #16]
   3891c:	4631      	mov	r1, r6
   3891e:	9302      	str	r3, [sp, #8]
   38920:	68e3      	ldr	r3, [r4, #12]
   38922:	4628      	mov	r0, r5
   38924:	9301      	str	r3, [sp, #4]
   38926:	68a3      	ldr	r3, [r4, #8]
   38928:	9300      	str	r3, [sp, #0]
   3892a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3892e:	f7eb ff9b 	bl	24868 <print_formatted>
		break;
   38932:	e7ce      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   38934:	6963      	ldr	r3, [r4, #20]
   38936:	4631      	mov	r1, r6
   38938:	9303      	str	r3, [sp, #12]
   3893a:	6923      	ldr	r3, [r4, #16]
   3893c:	4628      	mov	r0, r5
   3893e:	9302      	str	r3, [sp, #8]
   38940:	68e3      	ldr	r3, [r4, #12]
   38942:	9301      	str	r3, [sp, #4]
   38944:	68a3      	ldr	r3, [r4, #8]
   38946:	9300      	str	r3, [sp, #0]
   38948:	e9d4 2300 	ldrd	r2, r3, [r4]
   3894c:	f7eb ff8c 	bl	24868 <print_formatted>
		break;
   38950:	e7bf      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   38952:	69a3      	ldr	r3, [r4, #24]
   38954:	4631      	mov	r1, r6
   38956:	9304      	str	r3, [sp, #16]
   38958:	6963      	ldr	r3, [r4, #20]
   3895a:	4628      	mov	r0, r5
   3895c:	9303      	str	r3, [sp, #12]
   3895e:	6923      	ldr	r3, [r4, #16]
   38960:	9302      	str	r3, [sp, #8]
   38962:	68e3      	ldr	r3, [r4, #12]
   38964:	9301      	str	r3, [sp, #4]
   38966:	68a3      	ldr	r3, [r4, #8]
   38968:	9300      	str	r3, [sp, #0]
   3896a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3896e:	f7eb ff7b 	bl	24868 <print_formatted>
		break;
   38972:	e7ae      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   38974:	69e3      	ldr	r3, [r4, #28]
   38976:	4631      	mov	r1, r6
   38978:	9305      	str	r3, [sp, #20]
   3897a:	69a3      	ldr	r3, [r4, #24]
   3897c:	4628      	mov	r0, r5
   3897e:	9304      	str	r3, [sp, #16]
   38980:	6963      	ldr	r3, [r4, #20]
   38982:	9303      	str	r3, [sp, #12]
   38984:	6923      	ldr	r3, [r4, #16]
   38986:	9302      	str	r3, [sp, #8]
   38988:	68e3      	ldr	r3, [r4, #12]
   3898a:	9301      	str	r3, [sp, #4]
   3898c:	68a3      	ldr	r3, [r4, #8]
   3898e:	9300      	str	r3, [sp, #0]
   38990:	e9d4 2300 	ldrd	r2, r3, [r4]
   38994:	f7eb ff68 	bl	24868 <print_formatted>
		break;
   38998:	e79b      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   3899a:	6a23      	ldr	r3, [r4, #32]
   3899c:	4631      	mov	r1, r6
   3899e:	9306      	str	r3, [sp, #24]
   389a0:	69e3      	ldr	r3, [r4, #28]
   389a2:	4628      	mov	r0, r5
   389a4:	9305      	str	r3, [sp, #20]
   389a6:	69a3      	ldr	r3, [r4, #24]
   389a8:	9304      	str	r3, [sp, #16]
   389aa:	6963      	ldr	r3, [r4, #20]
   389ac:	9303      	str	r3, [sp, #12]
   389ae:	6923      	ldr	r3, [r4, #16]
   389b0:	9302      	str	r3, [sp, #8]
   389b2:	68e3      	ldr	r3, [r4, #12]
   389b4:	9301      	str	r3, [sp, #4]
   389b6:	68a3      	ldr	r3, [r4, #8]
   389b8:	9300      	str	r3, [sp, #0]
   389ba:	e9d4 2300 	ldrd	r2, r3, [r4]
   389be:	f7eb ff53 	bl	24868 <print_formatted>
		break;
   389c2:	e786      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   389c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   389c6:	4631      	mov	r1, r6
   389c8:	9307      	str	r3, [sp, #28]
   389ca:	6a23      	ldr	r3, [r4, #32]
   389cc:	4628      	mov	r0, r5
   389ce:	9306      	str	r3, [sp, #24]
   389d0:	69e3      	ldr	r3, [r4, #28]
   389d2:	9305      	str	r3, [sp, #20]
   389d4:	69a3      	ldr	r3, [r4, #24]
   389d6:	9304      	str	r3, [sp, #16]
   389d8:	6963      	ldr	r3, [r4, #20]
   389da:	9303      	str	r3, [sp, #12]
   389dc:	6923      	ldr	r3, [r4, #16]
   389de:	9302      	str	r3, [sp, #8]
   389e0:	68e3      	ldr	r3, [r4, #12]
   389e2:	9301      	str	r3, [sp, #4]
   389e4:	68a3      	ldr	r3, [r4, #8]
   389e6:	9300      	str	r3, [sp, #0]
   389e8:	e9d4 2300 	ldrd	r2, r3, [r4]
   389ec:	f7eb ff3c 	bl	24868 <print_formatted>
		break;
   389f0:	e76f      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   389f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   389f4:	4631      	mov	r1, r6
   389f6:	9308      	str	r3, [sp, #32]
   389f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   389fa:	4628      	mov	r0, r5
   389fc:	9307      	str	r3, [sp, #28]
   389fe:	6a23      	ldr	r3, [r4, #32]
   38a00:	9306      	str	r3, [sp, #24]
   38a02:	69e3      	ldr	r3, [r4, #28]
   38a04:	9305      	str	r3, [sp, #20]
   38a06:	69a3      	ldr	r3, [r4, #24]
   38a08:	9304      	str	r3, [sp, #16]
   38a0a:	6963      	ldr	r3, [r4, #20]
   38a0c:	9303      	str	r3, [sp, #12]
   38a0e:	6923      	ldr	r3, [r4, #16]
   38a10:	9302      	str	r3, [sp, #8]
   38a12:	68e3      	ldr	r3, [r4, #12]
   38a14:	9301      	str	r3, [sp, #4]
   38a16:	68a3      	ldr	r3, [r4, #8]
   38a18:	9300      	str	r3, [sp, #0]
   38a1a:	e9d4 2300 	ldrd	r2, r3, [r4]
   38a1e:	f7eb ff23 	bl	24868 <print_formatted>
		break;
   38a22:	e756      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   38a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   38a26:	4631      	mov	r1, r6
   38a28:	9309      	str	r3, [sp, #36]	; 0x24
   38a2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   38a2c:	4628      	mov	r0, r5
   38a2e:	9308      	str	r3, [sp, #32]
   38a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38a32:	9307      	str	r3, [sp, #28]
   38a34:	6a23      	ldr	r3, [r4, #32]
   38a36:	9306      	str	r3, [sp, #24]
   38a38:	69e3      	ldr	r3, [r4, #28]
   38a3a:	9305      	str	r3, [sp, #20]
   38a3c:	69a3      	ldr	r3, [r4, #24]
   38a3e:	9304      	str	r3, [sp, #16]
   38a40:	6963      	ldr	r3, [r4, #20]
   38a42:	9303      	str	r3, [sp, #12]
   38a44:	6923      	ldr	r3, [r4, #16]
   38a46:	9302      	str	r3, [sp, #8]
   38a48:	68e3      	ldr	r3, [r4, #12]
   38a4a:	9301      	str	r3, [sp, #4]
   38a4c:	68a3      	ldr	r3, [r4, #8]
   38a4e:	9300      	str	r3, [sp, #0]
   38a50:	e9d4 2300 	ldrd	r2, r3, [r4]
   38a54:	f7eb ff08 	bl	24868 <print_formatted>
		break;
   38a58:	e73b      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   38a5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   38a5c:	4631      	mov	r1, r6
   38a5e:	930a      	str	r3, [sp, #40]	; 0x28
   38a60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   38a62:	4628      	mov	r0, r5
   38a64:	9309      	str	r3, [sp, #36]	; 0x24
   38a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   38a68:	9308      	str	r3, [sp, #32]
   38a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38a6c:	9307      	str	r3, [sp, #28]
   38a6e:	6a23      	ldr	r3, [r4, #32]
   38a70:	9306      	str	r3, [sp, #24]
   38a72:	69e3      	ldr	r3, [r4, #28]
   38a74:	9305      	str	r3, [sp, #20]
   38a76:	69a3      	ldr	r3, [r4, #24]
   38a78:	9304      	str	r3, [sp, #16]
   38a7a:	6963      	ldr	r3, [r4, #20]
   38a7c:	9303      	str	r3, [sp, #12]
   38a7e:	6923      	ldr	r3, [r4, #16]
   38a80:	9302      	str	r3, [sp, #8]
   38a82:	68e3      	ldr	r3, [r4, #12]
   38a84:	9301      	str	r3, [sp, #4]
   38a86:	68a3      	ldr	r3, [r4, #8]
   38a88:	9300      	str	r3, [sp, #0]
   38a8a:	e9d4 2300 	ldrd	r2, r3, [r4]
   38a8e:	f7eb feeb 	bl	24868 <print_formatted>
		break;
   38a92:	e71e      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   38a94:	6b63      	ldr	r3, [r4, #52]	; 0x34
   38a96:	4631      	mov	r1, r6
   38a98:	930b      	str	r3, [sp, #44]	; 0x2c
   38a9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   38a9c:	4628      	mov	r0, r5
   38a9e:	930a      	str	r3, [sp, #40]	; 0x28
   38aa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   38aa2:	9309      	str	r3, [sp, #36]	; 0x24
   38aa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   38aa6:	9308      	str	r3, [sp, #32]
   38aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38aaa:	9307      	str	r3, [sp, #28]
   38aac:	6a23      	ldr	r3, [r4, #32]
   38aae:	9306      	str	r3, [sp, #24]
   38ab0:	69e3      	ldr	r3, [r4, #28]
   38ab2:	9305      	str	r3, [sp, #20]
   38ab4:	69a3      	ldr	r3, [r4, #24]
   38ab6:	9304      	str	r3, [sp, #16]
   38ab8:	6963      	ldr	r3, [r4, #20]
   38aba:	9303      	str	r3, [sp, #12]
   38abc:	6923      	ldr	r3, [r4, #16]
   38abe:	9302      	str	r3, [sp, #8]
   38ac0:	68e3      	ldr	r3, [r4, #12]
   38ac2:	9301      	str	r3, [sp, #4]
   38ac4:	68a3      	ldr	r3, [r4, #8]
   38ac6:	9300      	str	r3, [sp, #0]
   38ac8:	e9d4 2300 	ldrd	r2, r3, [r4]
   38acc:	f7eb fecc 	bl	24868 <print_formatted>
		break;
   38ad0:	e6ff      	b.n	388d2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   38ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   38ad4:	4631      	mov	r1, r6
   38ad6:	930c      	str	r3, [sp, #48]	; 0x30
   38ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   38ada:	4628      	mov	r0, r5
   38adc:	930b      	str	r3, [sp, #44]	; 0x2c
   38ade:	6b23      	ldr	r3, [r4, #48]	; 0x30
   38ae0:	930a      	str	r3, [sp, #40]	; 0x28
   38ae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   38ae4:	9309      	str	r3, [sp, #36]	; 0x24
   38ae6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   38ae8:	9308      	str	r3, [sp, #32]
   38aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38aec:	9307      	str	r3, [sp, #28]
   38aee:	6a23      	ldr	r3, [r4, #32]
   38af0:	9306      	str	r3, [sp, #24]
   38af2:	69e3      	ldr	r3, [r4, #28]
   38af4:	9305      	str	r3, [sp, #20]
   38af6:	69a3      	ldr	r3, [r4, #24]
   38af8:	9304      	str	r3, [sp, #16]
   38afa:	6963      	ldr	r3, [r4, #20]
   38afc:	9303      	str	r3, [sp, #12]
   38afe:	6923      	ldr	r3, [r4, #16]
   38b00:	9302      	str	r3, [sp, #8]
   38b02:	68e3      	ldr	r3, [r4, #12]
   38b04:	9301      	str	r3, [sp, #4]
   38b06:	68a3      	ldr	r3, [r4, #8]
   38b08:	9300      	str	r3, [sp, #0]
   38b0a:	e9d4 2300 	ldrd	r2, r3, [r4]
   38b0e:	f7eb feab 	bl	24868 <print_formatted>
}
   38b12:	e6de      	b.n	388d2 <std_print+0x78>

00038b14 <log_output_flush>:
		     log_output->control_block->offset,
   38b14:	6842      	ldr	r2, [r0, #4]
{
   38b16:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   38b18:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   38b1c:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   38b1e:	6881      	ldr	r1, [r0, #8]
   38b20:	6800      	ldr	r0, [r0, #0]
   38b22:	f7ff fe8d 	bl	38840 <buffer_write>
	log_output->control_block->offset = 0;
   38b26:	2200      	movs	r2, #0
   38b28:	6863      	ldr	r3, [r4, #4]
   38b2a:	601a      	str	r2, [r3, #0]
}
   38b2c:	bd10      	pop	{r4, pc}

00038b2e <out_func>:
{
   38b2e:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   38b30:	684b      	ldr	r3, [r1, #4]
{
   38b32:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   38b34:	681a      	ldr	r2, [r3, #0]
   38b36:	68cb      	ldr	r3, [r1, #12]
{
   38b38:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   38b3a:	429a      	cmp	r2, r3
   38b3c:	d102      	bne.n	38b44 <out_func+0x16>
		log_output_flush(out_ctx);
   38b3e:	4608      	mov	r0, r1
   38b40:	f7ff ffe8 	bl	38b14 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   38b44:	6863      	ldr	r3, [r4, #4]
   38b46:	e8d3 2fef 	ldaex	r2, [r3]
   38b4a:	1c51      	adds	r1, r2, #1
   38b4c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   38b50:	2800      	cmp	r0, #0
   38b52:	d1f8      	bne.n	38b46 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   38b54:	68a3      	ldr	r3, [r4, #8]
}
   38b56:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   38b58:	549d      	strb	r5, [r3, r2]
}
   38b5a:	bd38      	pop	{r3, r4, r5, pc}

00038b5c <boot_write_trailer_byte>:
{
   38b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   38b5e:	460d      	mov	r5, r1
   38b60:	4616      	mov	r6, r2
   38b62:	4604      	mov	r4, r0
	align = flash_area_align(fa);
   38b64:	f000 f9df 	bl	38f26 <flash_area_align>
   38b68:	9001      	str	r0, [sp, #4]
	erased_val = flash_area_erased_val(fa);
   38b6a:	4620      	mov	r0, r4
   38b6c:	f000 f9e7 	bl	38f3e <flash_area_erased_val>
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   38b70:	2208      	movs	r2, #8
	erased_val = flash_area_erased_val(fa);
   38b72:	4601      	mov	r1, r0
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   38b74:	eb0d 0002 	add.w	r0, sp, r2
   38b78:	f002 fc3b 	bl	3b3f2 <memset>
	rc = flash_area_write(fa, off, buf, align);
   38b7c:	4629      	mov	r1, r5
   38b7e:	4620      	mov	r0, r4
   38b80:	9b01      	ldr	r3, [sp, #4]
   38b82:	aa02      	add	r2, sp, #8
	buf[0] = val;
   38b84:	f88d 6008 	strb.w	r6, [sp, #8]
	rc = flash_area_write(fa, off, buf, align);
   38b88:	f000 f9a4 	bl	38ed4 <flash_area_write>
	if (rc != 0) {
   38b8c:	2800      	cmp	r0, #0
}
   38b8e:	bf18      	it	ne
   38b90:	f06f 0004 	mvnne.w	r0, #4
   38b94:	b004      	add	sp, #16
   38b96:	bd70      	pop	{r4, r5, r6, pc}

00038b98 <boot_flag_read.constprop.0>:
static int boot_flag_read(int flag, uint8_t bank_id)
   38b98:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   38b9a:	2003      	movs	r0, #3
   38b9c:	a901      	add	r1, sp, #4
   38b9e:	f7ec fa5b 	bl	25058 <flash_area_open>
	if (rc) {
   38ba2:	b950      	cbnz	r0, 38bba <boot_flag_read.constprop.0+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   38ba4:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   38ba6:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   38ba8:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   38baa:	f10d 0203 	add.w	r2, sp, #3
   38bae:	3918      	subs	r1, #24
   38bb0:	f000 f973 	bl	38e9a <flash_area_read>
	if (rc != 0) {
   38bb4:	b908      	cbnz	r0, 38bba <boot_flag_read.constprop.0+0x22>
	return flag_val;
   38bb6:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   38bba:	b003      	add	sp, #12
   38bbc:	f85d fb04 	ldr.w	pc, [sp], #4

00038bc0 <boot_flag_write.constprop.0>:
static int boot_flag_write(int flag, uint8_t bank_id)
   38bc0:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   38bc2:	a901      	add	r1, sp, #4
   38bc4:	f7ec fa48 	bl	25058 <flash_area_open>
	if (rc) {
   38bc8:	4604      	mov	r4, r0
   38bca:	b948      	cbnz	r0, 38be0 <boot_flag_write.constprop.0+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   38bcc:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   38bce:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   38bd0:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   38bd2:	3918      	subs	r1, #24
   38bd4:	f7ff ffc2 	bl	38b5c <boot_write_trailer_byte>
   38bd8:	4604      	mov	r4, r0
	flash_area_close(fa);
   38bda:	9801      	ldr	r0, [sp, #4]
   38bdc:	f000 f95c 	bl	38e98 <flash_area_close>
}
   38be0:	4620      	mov	r0, r4
   38be2:	b002      	add	sp, #8
   38be4:	bd10      	pop	{r4, pc}

00038be6 <boot_write_img_confirmed>:
{
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   38be6:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   38be8:	f7ff ffd6 	bl	38b98 <boot_flag_read.constprop.0>
	rc = flash_area_open(bank_id, &fa);
   38bec:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   38bee:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   38bf0:	2003      	movs	r0, #3
   38bf2:	f7ec fa31 	bl	25058 <flash_area_open>
	if (rc) {
   38bf6:	b948      	cbnz	r0, 38c0c <boot_write_img_confirmed+0x26>
	return flash_area_erased_val(fa);
   38bf8:	9801      	ldr	r0, [sp, #4]
   38bfa:	f000 f9a0 	bl	38f3e <flash_area_erased_val>
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   38bfe:	42a0      	cmp	r0, r4
   38c00:	d107      	bne.n	38c12 <boot_write_img_confirmed+0x2c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   38c02:	2003      	movs	r0, #3
   38c04:	f7ff ffdc 	bl	38bc0 <boot_flag_write.constprop.0>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   38c08:	b002      	add	sp, #8
   38c0a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   38c0c:	f06f 0015 	mvn.w	r0, #21
   38c10:	e7f5      	b.n	38bfe <boot_write_img_confirmed+0x18>
		return 0;
   38c12:	2000      	movs	r0, #0
   38c14:	e7f8      	b.n	38c08 <boot_write_img_confirmed+0x22>

00038c16 <flash_img_buffered_write>:
	     "CONFIG_IMG_BLOCK_BUF_SIZE is not a multiple of "
	     "FLASH_WRITE_BLOCK_SIZE");

int flash_img_buffered_write(struct flash_img_context *ctx, const uint8_t *data,
			     size_t len, bool flush)
{
   38c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;

	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   38c18:	f500 7701 	add.w	r7, r0, #516	; 0x204
{
   38c1c:	4605      	mov	r5, r0
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   38c1e:	4638      	mov	r0, r7
{
   38c20:	461e      	mov	r6, r3
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   38c22:	f000 f99e 	bl	38f62 <stream_flash_buffered_write>
   38c26:	4604      	mov	r4, r0
	if (!flush) {
   38c28:	b186      	cbz	r6, 38c4c <flash_img_buffered_write+0x36>
		return rc;
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	rc = stream_flash_erase_page(&ctx->stream,
				ctx->flash_area->fa_off +
   38c2a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	rc = stream_flash_erase_page(&ctx->stream,
   38c2e:	4638      	mov	r0, r7
				ctx->flash_area->fa_off +
   38c30:	6899      	ldr	r1, [r3, #8]
   38c32:	685b      	ldr	r3, [r3, #4]
   38c34:	3920      	subs	r1, #32
	rc = stream_flash_erase_page(&ctx->stream,
   38c36:	4419      	add	r1, r3
   38c38:	f7ec fa40 	bl	250bc <stream_flash_erase_page>
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
	if (rc) {
   38c3c:	4604      	mov	r4, r0
   38c3e:	b928      	cbnz	r0, 38c4c <flash_img_buffered_write+0x36>
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   38c40:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   38c44:	f000 f928 	bl	38e98 <flash_area_close>
	ctx->flash_area = NULL;
   38c48:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200

	return rc;
}
   38c4c:	4620      	mov	r0, r4
   38c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00038c50 <flash_img_bytes_written>:

size_t flash_img_bytes_written(struct flash_img_context *ctx)
{
	return stream_flash_bytes_written(&ctx->stream);
   38c50:	f500 7001 	add.w	r0, r0, #516	; 0x204
   38c54:	f000 b9ef 	b.w	39036 <stream_flash_bytes_written>

00038c58 <flash_img_init_id>:
}

int flash_img_init_id(struct flash_img_context *ctx, uint8_t area_id)
{
   38c58:	b530      	push	{r4, r5, lr}
   38c5a:	4605      	mov	r5, r0
   38c5c:	b085      	sub	sp, #20
   38c5e:	4608      	mov	r0, r1
	int rc;
	const struct device *flash_dev;

	rc = flash_area_open(area_id,
   38c60:	f505 7100 	add.w	r1, r5, #512	; 0x200
   38c64:	f7ec f9f8 	bl	25058 <flash_area_open>
			       (const struct flash_area **)&(ctx->flash_area));
	if (rc) {
   38c68:	4604      	mov	r4, r0
   38c6a:	b998      	cbnz	r0, 38c94 <flash_img_init_id+0x3c>
		return rc;
	}

	flash_dev = flash_area_get_device(ctx->flash_area);
   38c6c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   38c70:	f000 f962 	bl	38f38 <flash_area_get_device>

	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
			CONFIG_IMG_BLOCK_BUF_SIZE, ctx->flash_area->fa_off,
   38c74:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   38c78:	9402      	str	r4, [sp, #8]
   38c7a:	689a      	ldr	r2, [r3, #8]
	flash_dev = flash_area_get_device(ctx->flash_area);
   38c7c:	4601      	mov	r1, r0
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   38c7e:	9201      	str	r2, [sp, #4]
   38c80:	685b      	ldr	r3, [r3, #4]
   38c82:	462a      	mov	r2, r5
   38c84:	9300      	str	r3, [sp, #0]
   38c86:	f505 7001 	add.w	r0, r5, #516	; 0x204
   38c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
   38c8e:	f7ec fad7 	bl	25240 <stream_flash_init>
   38c92:	4604      	mov	r4, r0
			ctx->flash_area->fa_size, NULL);
}
   38c94:	4620      	mov	r0, r4
   38c96:	b005      	add	sp, #20
   38c98:	bd30      	pop	{r4, r5, pc}

00038c9a <flash_img_init>:

int flash_img_init(struct flash_img_context *ctx)
{
	return flash_img_init_id(ctx, UPLOAD_FLASH_AREA_ID);
   38c9a:	2107      	movs	r1, #7
   38c9c:	f7ff bfdc 	b.w	38c58 <flash_img_init_id>

00038ca0 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   38ca0:	f7ec b9b2 	b.w	25008 <socket_offload_getaddrinfo>

00038ca4 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   38ca4:	f7ec b9ba 	b.w	2501c <socket_offload_freeaddrinfo>

00038ca8 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   38ca8:	b40c      	push	{r2, r3}
   38caa:	4603      	mov	r3, r0
   38cac:	b507      	push	{r0, r1, r2, lr}
   38cae:	aa04      	add	r2, sp, #16
   38cb0:	4608      	mov	r0, r1
   38cb2:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   38cb6:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   38cb8:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   38cba:	4798      	blx	r3
	va_end(args);

	return res;
}
   38cbc:	b003      	add	sp, #12
   38cbe:	f85d eb04 	ldr.w	lr, [sp], #4
   38cc2:	b002      	add	sp, #8
   38cc4:	4770      	bx	lr

00038cc6 <z_impl_zsock_close>:
{
   38cc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   38cc8:	a901      	add	r1, sp, #4
{
   38cca:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   38ccc:	f7ea faa6 	bl	2321c <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   38cd0:	b940      	cbnz	r0, 38ce4 <z_impl_zsock_close+0x1e>
		errno = EBADF;
   38cd2:	f000 faf8 	bl	392c6 <__errno>
   38cd6:	2309      	movs	r3, #9
		return -1;
   38cd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		errno = EBADF;
   38cdc:	6003      	str	r3, [r0, #0]
}
   38cde:	4620      	mov	r0, r4
   38ce0:	b003      	add	sp, #12
   38ce2:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   38ce4:	9b01      	ldr	r3, [sp, #4]
   38ce6:	689b      	ldr	r3, [r3, #8]
   38ce8:	4798      	blx	r3
   38cea:	4604      	mov	r4, r0
	z_free_fd(sock);
   38cec:	4628      	mov	r0, r5
   38cee:	f7ea fae5 	bl	232bc <z_free_fd>
	return ret;
   38cf2:	e7f4      	b.n	38cde <z_impl_zsock_close+0x18>

00038cf4 <z_impl_zsock_bind>:
{
   38cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   38cf6:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   38cf8:	a903      	add	r1, sp, #12
{
   38cfa:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   38cfc:	f7ea fa8e 	bl	2321c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(bind, sock, addr, addrlen);
   38d00:	b118      	cbz	r0, 38d0a <z_impl_zsock_bind+0x16>
   38d02:	9b03      	ldr	r3, [sp, #12]
   38d04:	9a01      	ldr	r2, [sp, #4]
   38d06:	691b      	ldr	r3, [r3, #16]
   38d08:	b93b      	cbnz	r3, 38d1a <z_impl_zsock_bind+0x26>
   38d0a:	f000 fadc 	bl	392c6 <__errno>
   38d0e:	2309      	movs	r3, #9
   38d10:	6003      	str	r3, [r0, #0]
   38d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   38d16:	b004      	add	sp, #16
   38d18:	bd10      	pop	{r4, pc}
	VTABLE_CALL(bind, sock, addr, addrlen);
   38d1a:	4621      	mov	r1, r4
   38d1c:	4798      	blx	r3
   38d1e:	e7fa      	b.n	38d16 <z_impl_zsock_bind+0x22>

00038d20 <z_impl_zsock_connect>:
{
   38d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   38d22:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   38d24:	a903      	add	r1, sp, #12
{
   38d26:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   38d28:	f7ea fa78 	bl	2321c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   38d2c:	b118      	cbz	r0, 38d36 <z_impl_zsock_connect+0x16>
   38d2e:	9b03      	ldr	r3, [sp, #12]
   38d30:	9a01      	ldr	r2, [sp, #4]
   38d32:	695b      	ldr	r3, [r3, #20]
   38d34:	b93b      	cbnz	r3, 38d46 <z_impl_zsock_connect+0x26>
   38d36:	f000 fac6 	bl	392c6 <__errno>
   38d3a:	2309      	movs	r3, #9
   38d3c:	6003      	str	r3, [r0, #0]
   38d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   38d42:	b004      	add	sp, #16
   38d44:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   38d46:	4621      	mov	r1, r4
   38d48:	4798      	blx	r3
   38d4a:	e7fa      	b.n	38d42 <z_impl_zsock_connect+0x22>

00038d4c <z_impl_zsock_listen>:
{
   38d4c:	b513      	push	{r0, r1, r4, lr}
   38d4e:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   38d50:	a901      	add	r1, sp, #4
   38d52:	f7ea fa63 	bl	2321c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(listen, sock, backlog);
   38d56:	b110      	cbz	r0, 38d5e <z_impl_zsock_listen+0x12>
   38d58:	9b01      	ldr	r3, [sp, #4]
   38d5a:	699b      	ldr	r3, [r3, #24]
   38d5c:	b93b      	cbnz	r3, 38d6e <z_impl_zsock_listen+0x22>
   38d5e:	f000 fab2 	bl	392c6 <__errno>
   38d62:	2309      	movs	r3, #9
   38d64:	6003      	str	r3, [r0, #0]
   38d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   38d6a:	b002      	add	sp, #8
   38d6c:	bd10      	pop	{r4, pc}
	VTABLE_CALL(listen, sock, backlog);
   38d6e:	4621      	mov	r1, r4
   38d70:	4798      	blx	r3
   38d72:	e7fa      	b.n	38d6a <z_impl_zsock_listen+0x1e>

00038d74 <z_impl_zsock_accept>:
{
   38d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   38d76:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   38d78:	a903      	add	r1, sp, #12
{
   38d7a:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   38d7c:	f7ea fa4e 	bl	2321c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(accept, sock, addr, addrlen);
   38d80:	b118      	cbz	r0, 38d8a <z_impl_zsock_accept+0x16>
   38d82:	9b03      	ldr	r3, [sp, #12]
   38d84:	9a01      	ldr	r2, [sp, #4]
   38d86:	69db      	ldr	r3, [r3, #28]
   38d88:	b93b      	cbnz	r3, 38d9a <z_impl_zsock_accept+0x26>
   38d8a:	f000 fa9c 	bl	392c6 <__errno>
   38d8e:	2309      	movs	r3, #9
   38d90:	6003      	str	r3, [r0, #0]
   38d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   38d96:	b004      	add	sp, #16
   38d98:	bd10      	pop	{r4, pc}
	VTABLE_CALL(accept, sock, addr, addrlen);
   38d9a:	4621      	mov	r1, r4
   38d9c:	4798      	blx	r3
   38d9e:	e7fa      	b.n	38d96 <z_impl_zsock_accept+0x22>

00038da0 <z_impl_zsock_sendto>:
{
   38da0:	b530      	push	{r4, r5, lr}
   38da2:	b087      	sub	sp, #28
   38da4:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   38da6:	a905      	add	r1, sp, #20
{
   38da8:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   38dac:	f7ea fa36 	bl	2321c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   38db0:	b120      	cbz	r0, 38dbc <z_impl_zsock_sendto+0x1c>
   38db2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   38db6:	9905      	ldr	r1, [sp, #20]
   38db8:	6a0d      	ldr	r5, [r1, #32]
   38dba:	b93d      	cbnz	r5, 38dcc <z_impl_zsock_sendto+0x2c>
   38dbc:	f000 fa83 	bl	392c6 <__errno>
   38dc0:	2309      	movs	r3, #9
   38dc2:	6003      	str	r3, [r0, #0]
   38dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   38dc8:	b007      	add	sp, #28
   38dca:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   38dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   38dce:	9101      	str	r1, [sp, #4]
   38dd0:	990a      	ldr	r1, [sp, #40]	; 0x28
   38dd2:	9100      	str	r1, [sp, #0]
   38dd4:	4621      	mov	r1, r4
   38dd6:	47a8      	blx	r5
   38dd8:	e7f6      	b.n	38dc8 <z_impl_zsock_sendto+0x28>

00038dda <z_impl_zsock_recvfrom>:
{
   38dda:	b530      	push	{r4, r5, lr}
   38ddc:	b087      	sub	sp, #28
   38dde:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   38de0:	a905      	add	r1, sp, #20
{
   38de2:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   38de6:	f7ea fa19 	bl	2321c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   38dea:	b120      	cbz	r0, 38df6 <z_impl_zsock_recvfrom+0x1c>
   38dec:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   38df0:	9905      	ldr	r1, [sp, #20]
   38df2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   38df4:	b93d      	cbnz	r5, 38e06 <z_impl_zsock_recvfrom+0x2c>
   38df6:	f000 fa66 	bl	392c6 <__errno>
   38dfa:	2309      	movs	r3, #9
   38dfc:	6003      	str	r3, [r0, #0]
   38dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   38e02:	b007      	add	sp, #28
   38e04:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   38e06:	990b      	ldr	r1, [sp, #44]	; 0x2c
   38e08:	9101      	str	r1, [sp, #4]
   38e0a:	990a      	ldr	r1, [sp, #40]	; 0x28
   38e0c:	9100      	str	r1, [sp, #0]
   38e0e:	4621      	mov	r1, r4
   38e10:	47a8      	blx	r5
   38e12:	e7f6      	b.n	38e02 <z_impl_zsock_recvfrom+0x28>

00038e14 <z_impl_zsock_inet_pton>:
}
#include <syscalls/zsock_poll_mrsh.c>
#endif

int z_impl_zsock_inet_pton(sa_family_t family, const char *src, void *dst)
{
   38e14:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   38e16:	f000 fac1 	bl	3939c <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
		return 1;
	} else {
		return 0;
	}
}
   38e1a:	fab0 f080 	clz	r0, r0
   38e1e:	0940      	lsrs	r0, r0, #5
   38e20:	bd08      	pop	{r3, pc}

00038e22 <z_impl_zsock_getsockopt>:
	return -1;
}

int z_impl_zsock_getsockopt(int sock, int level, int optname,
			    void *optval, socklen_t *optlen)
{
   38e22:	b530      	push	{r4, r5, lr}
   38e24:	b087      	sub	sp, #28
   38e26:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   38e28:	a905      	add	r1, sp, #20
{
   38e2a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   38e2e:	f7ea f9f5 	bl	2321c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   38e32:	b120      	cbz	r0, 38e3e <z_impl_zsock_getsockopt+0x1c>
   38e34:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   38e38:	9905      	ldr	r1, [sp, #20]
   38e3a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   38e3c:	b93d      	cbnz	r5, 38e4e <z_impl_zsock_getsockopt+0x2c>
   38e3e:	f000 fa42 	bl	392c6 <__errno>
   38e42:	2309      	movs	r3, #9
   38e44:	6003      	str	r3, [r0, #0]
   38e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   38e4a:	b007      	add	sp, #28
   38e4c:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   38e4e:	990a      	ldr	r1, [sp, #40]	; 0x28
   38e50:	9100      	str	r1, [sp, #0]
   38e52:	4621      	mov	r1, r4
   38e54:	47a8      	blx	r5
   38e56:	e7f8      	b.n	38e4a <z_impl_zsock_getsockopt+0x28>

00038e58 <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   38e58:	b530      	push	{r4, r5, lr}
   38e5a:	b087      	sub	sp, #28
   38e5c:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   38e5e:	a905      	add	r1, sp, #20
{
   38e60:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   38e64:	f7ea f9da 	bl	2321c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   38e68:	b120      	cbz	r0, 38e74 <z_impl_zsock_setsockopt+0x1c>
   38e6a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   38e6e:	9905      	ldr	r1, [sp, #20]
   38e70:	6acd      	ldr	r5, [r1, #44]	; 0x2c
   38e72:	b93d      	cbnz	r5, 38e84 <z_impl_zsock_setsockopt+0x2c>
   38e74:	f000 fa27 	bl	392c6 <__errno>
   38e78:	2309      	movs	r3, #9
   38e7a:	6003      	str	r3, [r0, #0]
   38e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   38e80:	b007      	add	sp, #28
   38e82:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   38e84:	990a      	ldr	r1, [sp, #40]	; 0x28
   38e86:	9100      	str	r1, [sp, #0]
   38e88:	4621      	mov	r1, r4
   38e8a:	47a8      	blx	r5
   38e8c:	e7f8      	b.n	38e80 <z_impl_zsock_setsockopt+0x28>

00038e8e <z_impl_flash_write_protection_set>:
						    bool enable)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
   38e8e:	6883      	ldr	r3, [r0, #8]
   38e90:	68db      	ldr	r3, [r3, #12]
   38e92:	4718      	bx	r3

00038e94 <device_get_binding>:
   38e94:	f7fc baba 	b.w	3540c <z_impl_device_get_binding>

00038e98 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   38e98:	4770      	bx	lr

00038e9a <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   38e9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   38e9c:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   38e9e:	6883      	ldr	r3, [r0, #8]
{
   38ea0:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   38ea2:	428b      	cmp	r3, r1
{
   38ea4:	460c      	mov	r4, r1
   38ea6:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   38ea8:	d310      	bcc.n	38ecc <flash_area_read+0x32>
   38eaa:	1871      	adds	r1, r6, r1
   38eac:	428b      	cmp	r3, r1
   38eae:	d30d      	bcc.n	38ecc <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   38eb0:	68c0      	ldr	r0, [r0, #12]
   38eb2:	f7ff ffef 	bl	38e94 <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   38eb6:	6869      	ldr	r1, [r5, #4]
   38eb8:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   38eba:	6883      	ldr	r3, [r0, #8]
   38ebc:	9a01      	ldr	r2, [sp, #4]
   38ebe:	681c      	ldr	r4, [r3, #0]
   38ec0:	4633      	mov	r3, r6
   38ec2:	46a4      	mov	ip, r4
}
   38ec4:	b002      	add	sp, #8
   38ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   38eca:	4760      	bx	ip
   38ecc:	f06f 0015 	mvn.w	r0, #21
   38ed0:	b002      	add	sp, #8
   38ed2:	bd70      	pop	{r4, r5, r6, pc}

00038ed4 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   38ed4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   38ed8:	4698      	mov	r8, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   38eda:	6883      	ldr	r3, [r0, #8]
{
   38edc:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   38ede:	428b      	cmp	r3, r1
{
   38ee0:	460d      	mov	r5, r1
   38ee2:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   38ee4:	d31c      	bcc.n	38f20 <flash_area_write+0x4c>
   38ee6:	4441      	add	r1, r8
   38ee8:	428b      	cmp	r3, r1
   38eea:	d319      	bcc.n	38f20 <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   38eec:	68c0      	ldr	r0, [r0, #12]
   38eee:	f7ff ffd1 	bl	38e94 <device_get_binding>
   38ef2:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   38ef4:	2100      	movs	r1, #0
   38ef6:	f7ff ffca 	bl	38e8e <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   38efa:	4604      	mov	r4, r0
   38efc:	b960      	cbnz	r0, 38f18 <flash_area_write+0x44>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   38efe:	6879      	ldr	r1, [r7, #4]
   38f00:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   38f02:	68b3      	ldr	r3, [r6, #8]
   38f04:	4630      	mov	r0, r6
   38f06:	685c      	ldr	r4, [r3, #4]
   38f08:	9a01      	ldr	r2, [sp, #4]
   38f0a:	4643      	mov	r3, r8
   38f0c:	47a0      	blx	r4
   38f0e:	4604      	mov	r4, r0
   38f10:	2101      	movs	r1, #1
   38f12:	4630      	mov	r0, r6
   38f14:	f7ff ffbb 	bl	38e8e <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   38f18:	4620      	mov	r0, r4
   38f1a:	b002      	add	sp, #8
   38f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   38f20:	f06f 0415 	mvn.w	r4, #21
   38f24:	e7f8      	b.n	38f18 <flash_area_write+0x44>

00038f26 <flash_area_align>:

	return rc;
}

uint8_t flash_area_align(const struct flash_area *fa)
{
   38f26:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   38f28:	68c0      	ldr	r0, [r0, #12]
   38f2a:	f7ff ffb3 	bl	38e94 <device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
   38f2e:	6883      	ldr	r3, [r0, #8]
   38f30:	691b      	ldr	r3, [r3, #16]
   38f32:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   38f34:	7800      	ldrb	r0, [r0, #0]
   38f36:	bd08      	pop	{r3, pc}

00038f38 <flash_area_get_device>:
	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   38f38:	68c0      	ldr	r0, [r0, #12]
   38f3a:	f7ff bfab 	b.w	38e94 <device_get_binding>

00038f3e <flash_area_erased_val>:
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   38f3e:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   38f40:	68c0      	ldr	r0, [r0, #12]
   38f42:	f7ff ffa7 	bl	38e94 <device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   38f46:	6883      	ldr	r3, [r0, #8]
   38f48:	691b      	ldr	r3, [r3, #16]
   38f4a:	4798      	blx	r3

	return param->erase_value;
}
   38f4c:	7900      	ldrb	r0, [r0, #4]
   38f4e:	bd08      	pop	{r3, pc}

00038f50 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   38f50:	6883      	ldr	r3, [r0, #8]
   38f52:	68db      	ldr	r3, [r3, #12]
   38f54:	4718      	bx	r3

00038f56 <flash_get_write_block_size>:
}


extern size_t z_impl_flash_get_write_block_size(const struct device * dev);
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   38f56:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   38f58:	6883      	ldr	r3, [r0, #8]
   38f5a:	691b      	ldr	r3, [r3, #16]
   38f5c:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   38f5e:	6800      	ldr	r0, [r0, #0]
   38f60:	bd08      	pop	{r3, pc}

00038f62 <stream_flash_buffered_write>:
{
   38f62:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   38f66:	4688      	mov	r8, r1
   38f68:	4616      	mov	r6, r2
   38f6a:	461f      	mov	r7, r3
	if (!ctx) {
   38f6c:	4604      	mov	r4, r0
   38f6e:	2800      	cmp	r0, #0
   38f70:	d059      	beq.n	39026 <stream_flash_buffered_write+0xc4>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   38f72:	6882      	ldr	r2, [r0, #8]
   38f74:	6903      	ldr	r3, [r0, #16]
   38f76:	4413      	add	r3, r2
   38f78:	6982      	ldr	r2, [r0, #24]
   38f7a:	4433      	add	r3, r6
   38f7c:	4293      	cmp	r3, r2
   38f7e:	d855      	bhi.n	3902c <stream_flash_buffered_write+0xca>
	int processed = 0;
   38f80:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   38f82:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
	while ((len - processed) >=
   38f86:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   38f8a:	eba2 0900 	sub.w	r9, r2, r0
	while ((len - processed) >=
   38f8e:	45ca      	cmp	sl, r9
   38f90:	d239      	bcs.n	39006 <stream_flash_buffered_write+0xa4>
	if (processed < len) {
   38f92:	42b5      	cmp	r5, r6
   38f94:	d209      	bcs.n	38faa <stream_flash_buffered_write+0x48>
		memcpy(ctx->buf + ctx->buf_bytes,
   38f96:	6823      	ldr	r3, [r4, #0]
   38f98:	4652      	mov	r2, sl
   38f9a:	4418      	add	r0, r3
   38f9c:	eb08 0105 	add.w	r1, r8, r5
   38fa0:	f002 fa07 	bl	3b3b2 <memcpy>
		ctx->buf_bytes += len - processed;
   38fa4:	68a3      	ldr	r3, [r4, #8]
   38fa6:	4453      	add	r3, sl
   38fa8:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   38faa:	2f00      	cmp	r7, #0
   38fac:	d041      	beq.n	39032 <stream_flash_buffered_write+0xd0>
   38fae:	68a0      	ldr	r0, [r4, #8]
   38fb0:	b330      	cbz	r0, 39000 <stream_flash_buffered_write+0x9e>
		fill_length = flash_get_write_block_size(ctx->fdev);
   38fb2:	68e0      	ldr	r0, [r4, #12]
   38fb4:	f7ff ffcf 	bl	38f56 <flash_get_write_block_size>
		if (ctx->buf_bytes % fill_length) {
   38fb8:	68a3      	ldr	r3, [r4, #8]
		fill_length = flash_get_write_block_size(ctx->fdev);
   38fba:	4606      	mov	r6, r0
		if (ctx->buf_bytes % fill_length) {
   38fbc:	fbb3 f5f0 	udiv	r5, r3, r0
   38fc0:	fb00 3515 	mls	r5, r0, r5, r3
   38fc4:	b1b5      	cbz	r5, 38ff4 <stream_flash_buffered_write+0x92>
					ctx->offset + ctx->bytes_written,
   38fc6:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
			rc = flash_read(ctx->fdev,
   38fca:	68e0      	ldr	r0, [r4, #12]
					ctx->offset + ctx->bytes_written,
   38fcc:	4419      	add	r1, r3
	return api->read(dev, offset, data, len);
   38fce:	6883      	ldr	r3, [r0, #8]
   38fd0:	f10d 0207 	add.w	r2, sp, #7
   38fd4:	681f      	ldr	r7, [r3, #0]
   38fd6:	2301      	movs	r3, #1
   38fd8:	47b8      	blx	r7
			if (rc != 0) {
   38fda:	b988      	cbnz	r0, 39000 <stream_flash_buffered_write+0x9e>
			memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   38fdc:	68a3      	ldr	r3, [r4, #8]
   38fde:	6820      	ldr	r0, [r4, #0]
			fill_length -= ctx->buf_bytes % fill_length;
   38fe0:	1b75      	subs	r5, r6, r5
__ssp_bos_icheck3(memset, void *, int)
   38fe2:	4418      	add	r0, r3
   38fe4:	462a      	mov	r2, r5
   38fe6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   38fea:	f002 fa02 	bl	3b3f2 <memset>
			ctx->buf_bytes += fill_length;
   38fee:	68a3      	ldr	r3, [r4, #8]
   38ff0:	442b      	add	r3, r5
   38ff2:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   38ff4:	4620      	mov	r0, r4
   38ff6:	f7ec f8a7 	bl	25148 <flash_sync>
		ctx->bytes_written -= fill_length;
   38ffa:	6923      	ldr	r3, [r4, #16]
   38ffc:	1b5d      	subs	r5, r3, r5
   38ffe:	6125      	str	r5, [r4, #16]
}
   39000:	b002      	add	sp, #8
   39002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   39006:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   39008:	464a      	mov	r2, r9
   3900a:	4418      	add	r0, r3
   3900c:	eb08 0105 	add.w	r1, r8, r5
   39010:	f002 f9cf 	bl	3b3b2 <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   39014:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
   39016:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
   39018:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   3901a:	f7ec f895 	bl	25148 <flash_sync>
		if (rc != 0) {
   3901e:	2800      	cmp	r0, #0
   39020:	d1ee      	bne.n	39000 <stream_flash_buffered_write+0x9e>
		processed += buf_empty_bytes;
   39022:	444d      	add	r5, r9
   39024:	e7ad      	b.n	38f82 <stream_flash_buffered_write+0x20>
		return -EFAULT;
   39026:	f06f 000d 	mvn.w	r0, #13
   3902a:	e7e9      	b.n	39000 <stream_flash_buffered_write+0x9e>
		return -ENOMEM;
   3902c:	f06f 000b 	mvn.w	r0, #11
   39030:	e7e6      	b.n	39000 <stream_flash_buffered_write+0x9e>
   39032:	4638      	mov	r0, r7
   39034:	e7e4      	b.n	39000 <stream_flash_buffered_write+0x9e>

00039036 <stream_flash_bytes_written>:
}
   39036:	6900      	ldr	r0, [r0, #16]
   39038:	4770      	bx	lr

0003903a <sys_pm_init>:
	}
}

#if CONFIG_DEVICE_POWER_MANAGEMENT
static int sys_pm_init(const struct device *dev)
{
   3903a:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	sys_pm_create_device_list();
   3903c:	f7ec f964 	bl	25308 <sys_pm_create_device_list>
	return 0;
}
   39040:	2000      	movs	r0, #0
   39042:	bd08      	pop	{r3, pc}

00039044 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   39044:	b2cb      	uxtb	r3, r1
   39046:	210c      	movs	r1, #12
   39048:	68c2      	ldr	r2, [r0, #12]
   3904a:	fb03 2101 	mla	r1, r3, r1, r2
   3904e:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   39050:	f000 0007 	and.w	r0, r0, #7
   39054:	4770      	bx	lr

00039056 <set_off_state>:
	__asm__ volatile(
   39056:	f04f 0320 	mov.w	r3, #32
   3905a:	f3ef 8211 	mrs	r2, BASEPRI
   3905e:	f383 8811 	msr	BASEPRI, r3
   39062:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   39066:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   39068:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   3906c:	d001      	beq.n	39072 <set_off_state+0x1c>
   3906e:	428b      	cmp	r3, r1
   39070:	d107      	bne.n	39082 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   39072:	2301      	movs	r3, #1
   39074:	6003      	str	r3, [r0, #0]
	int err = 0;
   39076:	2000      	movs	r0, #0
	__asm__ volatile(
   39078:	f382 8811 	msr	BASEPRI, r2
   3907c:	f3bf 8f6f 	isb	sy
}
   39080:	4770      	bx	lr
		err = -EPERM;
   39082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39086:	e7f7      	b.n	39078 <set_off_state+0x22>

00039088 <set_starting_state>:
{
   39088:	b510      	push	{r4, lr}
	__asm__ volatile(
   3908a:	f04f 0320 	mov.w	r3, #32
   3908e:	f3ef 8211 	mrs	r2, BASEPRI
   39092:	f383 8811 	msr	BASEPRI, r3
   39096:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3909a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3909c:	f003 0407 	and.w	r4, r3, #7
   390a0:	2c01      	cmp	r4, #1
   390a2:	d106      	bne.n	390b2 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   390a4:	6001      	str	r1, [r0, #0]
	int err = 0;
   390a6:	2000      	movs	r0, #0
	__asm__ volatile(
   390a8:	f382 8811 	msr	BASEPRI, r2
   390ac:	f3bf 8f6f 	isb	sy
}
   390b0:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   390b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   390b6:	428b      	cmp	r3, r1
		err = -EALREADY;
   390b8:	bf14      	ite	ne
   390ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   390be:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   390c2:	e7f1      	b.n	390a8 <set_starting_state+0x20>

000390c4 <set_on_state>:
	__asm__ volatile(
   390c4:	f04f 0320 	mov.w	r3, #32
   390c8:	f3ef 8211 	mrs	r2, BASEPRI
   390cc:	f383 8811 	msr	BASEPRI, r3
   390d0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   390d4:	6803      	ldr	r3, [r0, #0]
   390d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   390da:	f043 0302 	orr.w	r3, r3, #2
   390de:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   390e0:	f382 8811 	msr	BASEPRI, r2
   390e4:	f3bf 8f6f 	isb	sy
}
   390e8:	4770      	bx	lr

000390ea <onoff_started_callback>:
{
   390ea:	b410      	push	{r4}
	notify(mgr, 0);
   390ec:	241c      	movs	r4, #28
	return &data->mgr[type];
   390ee:	68c0      	ldr	r0, [r0, #12]
   390f0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   390f2:	fb03 0004 	mla	r0, r3, r4, r0
   390f6:	2100      	movs	r1, #0
}
   390f8:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   390fc:	4710      	bx	r2

000390fe <blocking_start_callback>:
{
   390fe:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   39100:	f7fd b8fc 	b.w	362fc <z_impl_k_sem_give>

00039104 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   39104:	2000      	movs	r0, #0
   39106:	f7fb bfcf 	b.w	350a8 <nrfx_clock_stop>

0003910a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3910a:	2000      	movs	r0, #0
   3910c:	f7fb bf9a 	b.w	35044 <nrfx_clock_start>

00039110 <api_stop>:
{
   39110:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   39112:	240c      	movs	r4, #12
   39114:	b2c9      	uxtb	r1, r1
   39116:	434c      	muls	r4, r1
{
   39118:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   3911a:	68c0      	ldr	r0, [r0, #12]
   3911c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   39120:	2180      	movs	r1, #128	; 0x80
   39122:	4418      	add	r0, r3
   39124:	f7ff ff97 	bl	39056 <set_off_state>
	if (err < 0) {
   39128:	2800      	cmp	r0, #0
   3912a:	db04      	blt.n	39136 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   3912c:	6869      	ldr	r1, [r5, #4]
   3912e:	440c      	add	r4, r1
   39130:	6863      	ldr	r3, [r4, #4]
   39132:	4798      	blx	r3
	return 0;
   39134:	2000      	movs	r0, #0
}
   39136:	bd38      	pop	{r3, r4, r5, pc}

00039138 <api_start>:
{
   39138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   3913c:	240c      	movs	r4, #12
   3913e:	b2c9      	uxtb	r1, r1
   39140:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   39142:	68c5      	ldr	r5, [r0, #12]
{
   39144:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   39146:	f104 0040 	add.w	r0, r4, #64	; 0x40
   3914a:	2180      	movs	r1, #128	; 0x80
   3914c:	4428      	add	r0, r5
{
   3914e:	4690      	mov	r8, r2
   39150:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   39152:	f7ff ff99 	bl	39088 <set_starting_state>
	if (err < 0) {
   39156:	2800      	cmp	r0, #0
   39158:	db06      	blt.n	39168 <api_start+0x30>
	subdata->cb = cb;
   3915a:	4425      	add	r5, r4
	subdata->user_data = user_data;
   3915c:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   39160:	6873      	ldr	r3, [r6, #4]
   39162:	591b      	ldr	r3, [r3, r4]
   39164:	4798      	blx	r3
	return 0;
   39166:	2000      	movs	r0, #0
}
   39168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003916c <z_clock_device_ctrl>:
int __weak z_clock_device_ctrl(const struct device *device,
			       uint32_t ctrl_command,
			       void *context, device_pm_cb cb, void *arg)
{
	return -ENOTSUP;
}
   3916c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   39170:	4770      	bx	lr

00039172 <z_clock_isr>:
}
   39172:	4770      	bx	lr

00039174 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   39174:	4770      	bx	lr

00039176 <sys_clock_disable>:
   39176:	4770      	bx	lr

00039178 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   39178:	b510      	push	{r4, lr}
   3917a:	b40f      	push	{r0, r1, r2, r3}
   3917c:	f7fc fd64 	bl	35c48 <k_sched_lock>
   39180:	bc0f      	pop	{r0, r1, r2, r3}
   39182:	f7de ff31 	bl	17fe8 <spm_request_random_number_nse>
   39186:	b40f      	push	{r0, r1, r2, r3}
   39188:	f7fc fdb0 	bl	35cec <k_sched_unlock>
   3918c:	bc0f      	pop	{r0, r1, r2, r3}
   3918e:	bd10      	pop	{r4, pc}

00039190 <spm_request_read>:
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   39190:	b510      	push	{r4, lr}
   39192:	b40f      	push	{r0, r1, r2, r3}
   39194:	f7fc fd58 	bl	35c48 <k_sched_lock>
   39198:	bc0f      	pop	{r0, r1, r2, r3}
   3919a:	f7de ff29 	bl	17ff0 <spm_request_read_nse>
   3919e:	b40f      	push	{r0, r1, r2, r3}
   391a0:	f7fc fda4 	bl	35cec <k_sched_unlock>
   391a4:	bc0f      	pop	{r0, r1, r2, r3}
   391a6:	bd10      	pop	{r4, pc}

000391a8 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   391a8:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   391aa:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   391ac:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   391ae:	bf97      	itett	ls
   391b0:	6882      	ldrls	r2, [r0, #8]
    r = RdOff - WrOff - 1u;
   391b2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   391b6:	18d2      	addls	r2, r2, r3
   391b8:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
   391bc:	bf94      	ite	ls
   391be:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   391c0:	1a58      	subhi	r0, r3, r1
}
   391c2:	4770      	bx	lr

000391c4 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   391c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   391c8:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   391cc:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   391ce:	eba9 0804 	sub.w	r8, r9, r4
   391d2:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   391d4:	4590      	cmp	r8, r2
   391d6:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   391d8:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
   391da:	4414      	add	r4, r2
   391dc:	d904      	bls.n	391e8 <_WriteNoCheck+0x24>
   391de:	f002 f8e8 	bl	3b3b2 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   391e2:	60ec      	str	r4, [r5, #12]
}
   391e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   391e8:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   391ea:	eba4 0409 	sub.w	r4, r4, r9
   391ee:	f002 f8e0 	bl	3b3b2 <memcpy>
   391f2:	4622      	mov	r2, r4
   391f4:	6868      	ldr	r0, [r5, #4]
   391f6:	eb07 0108 	add.w	r1, r7, r8
   391fa:	e7f0      	b.n	391de <_WriteNoCheck+0x1a>

000391fc <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   391fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39200:	4606      	mov	r6, r0
   39202:	4689      	mov	r9, r1
   39204:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   39206:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   3920a:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   3920c:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   3920e:	68b3      	ldr	r3, [r6, #8]
   39210:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   39212:	bf28      	it	cs
   39214:	18e4      	addcs	r4, r4, r3
   39216:	3c01      	subs	r4, #1
   39218:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   3921a:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   3921c:	42bc      	cmp	r4, r7
   3921e:	bf28      	it	cs
   39220:	463c      	movcs	r4, r7
   39222:	4294      	cmp	r4, r2
   39224:	bf28      	it	cs
   39226:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   39228:	6870      	ldr	r0, [r6, #4]
   3922a:	4649      	mov	r1, r9
   3922c:	4428      	add	r0, r5
   3922e:	4622      	mov	r2, r4
   39230:	f002 f8bf 	bl	3b3b2 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   39234:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   39236:	4425      	add	r5, r4
      WrOff = 0u;
   39238:	42ab      	cmp	r3, r5
   3923a:	bf08      	it	eq
   3923c:	2500      	moveq	r5, #0
  } while (NumBytes);
   3923e:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   39240:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   39242:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   39244:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   39246:	d1e1      	bne.n	3920c <_WriteBlocking+0x10>
}
   39248:	4640      	mov	r0, r8
   3924a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003924e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   3924e:	f7ec bb87 	b.w	25960 <_DoInit>

00039252 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   39252:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   39254:	f7ff fffb 	bl	3924e <SEGGER_RTT_Init>

	return 0;
}
   39258:	2000      	movs	r0, #0
   3925a:	bd08      	pop	{r3, pc}

0003925c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3925c:	2100      	movs	r1, #0
   3925e:	2001      	movs	r0, #1
   39260:	f7ec bd6a 	b.w	25d38 <z_arm_fatal_error>

00039264 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   39264:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   39266:	6800      	ldr	r0, [r0, #0]
   39268:	f7ec bd66 	b.w	25d38 <z_arm_fatal_error>

0003926c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   3926c:	b508      	push	{r3, lr}
	handler();
   3926e:	f7ec fdd7 	bl	25e20 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   39272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   39276:	f7ed b875 	b.w	26364 <z_arm_exc_exit>

0003927a <mpu_configure_region>:
{
   3927a:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   3927c:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   3927e:	680c      	ldr	r4, [r1, #0]
{
   39280:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   39282:	890a      	ldrh	r2, [r1, #8]
   39284:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   39286:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   39288:	3b01      	subs	r3, #1
   3928a:	f024 041f 	bic.w	r4, r4, #31
   3928e:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   39290:	f002 021f 	and.w	r2, r2, #31
   39294:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   39298:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   3929c:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   3929e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   392a2:	9303      	str	r3, [sp, #12]
   392a4:	f7ed f92a 	bl	264fc <region_allocate_and_init>
}
   392a8:	b005      	add	sp, #20
   392aa:	bd30      	pop	{r4, r5, pc}

000392ac <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   392ac:	e840 f000 	tt	r0, r0
   392b0:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   392b2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   392b6:	bf14      	ite	ne
   392b8:	4618      	movne	r0, r3
   392ba:	f06f 0015 	mvneq.w	r0, #21
   392be:	4770      	bx	lr

000392c0 <_stdout_hook_default>:
}
   392c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   392c4:	4770      	bx	lr

000392c6 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   392c6:	f7fc b8c9 	b.w	3545c <z_impl_z_errno>

000392ca <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   392ca:	b508      	push	{r3, lr}
	net_if_init();
   392cc:	f7ed fae4 	bl	26898 <net_if_init>
	net_if_post_init();
   392d0:	f7ed faf8 	bl	268c4 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   392d4:	2000      	movs	r0, #0
   392d6:	bd08      	pop	{r3, pc}

000392d8 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   392d8:	b110      	cbz	r0, 392e0 <net_if_l2+0x8>
   392da:	6800      	ldr	r0, [r0, #0]
   392dc:	b100      	cbz	r0, 392e0 <net_if_l2+0x8>
	return iface->if_dev->l2;
   392de:	6840      	ldr	r0, [r0, #4]
}
   392e0:	4770      	bx	lr

000392e2 <l2_flags_get>:
{
   392e2:	b510      	push	{r4, lr}
   392e4:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   392e6:	f7ff fff7 	bl	392d8 <net_if_l2>
   392ea:	b128      	cbz	r0, 392f8 <l2_flags_get+0x16>
   392ec:	68c2      	ldr	r2, [r0, #12]
   392ee:	b11a      	cbz	r2, 392f8 <l2_flags_get+0x16>
}
   392f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   392f4:	4618      	mov	r0, r3
   392f6:	4710      	bx	r2
}
   392f8:	2000      	movs	r0, #0
   392fa:	bd10      	pop	{r4, pc}

000392fc <net_if_up>:
{
   392fc:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   392fe:	6803      	ldr	r3, [r0, #0]
   39300:	4604      	mov	r4, r0
   39302:	330c      	adds	r3, #12
   39304:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   39308:	f013 0301 	ands.w	r3, r3, #1
   3930c:	d10b      	bne.n	39326 <net_if_up+0x2a>
	     net_if_is_socket_offloaded(iface))) {
   3930e:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   39310:	7e91      	ldrb	r1, [r2, #26]
   39312:	b151      	cbz	r1, 3932a <net_if_up+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   39314:	320c      	adds	r2, #12
   39316:	e8d2 1fef 	ldaex	r1, [r2]
   3931a:	f041 0101 	orr.w	r1, r1, #1
   3931e:	e8c2 1fe0 	stlex	r0, r1, [r2]
   39322:	2800      	cmp	r0, #0
   39324:	d1f7      	bne.n	39316 <net_if_up+0x1a>
		return 0;
   39326:	2000      	movs	r0, #0
   39328:	e018      	b.n	3935c <net_if_up+0x60>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   3932a:	f7ff ffd5 	bl	392d8 <net_if_l2>
   3932e:	b968      	cbnz	r0, 3934c <net_if_up+0x50>
   39330:	6823      	ldr	r3, [r4, #0]
   39332:	330c      	adds	r3, #12
   39334:	e8d3 2fef 	ldaex	r2, [r3]
   39338:	f042 0201 	orr.w	r2, r2, #1
   3933c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   39340:	2900      	cmp	r1, #0
   39342:	d1f7      	bne.n	39334 <net_if_up+0x38>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   39344:	4620      	mov	r0, r4
   39346:	f7ff ffcc 	bl	392e2 <l2_flags_get>
   3934a:	e7ec      	b.n	39326 <net_if_up+0x2a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   3934c:	6883      	ldr	r3, [r0, #8]
   3934e:	2b00      	cmp	r3, #0
   39350:	d0ee      	beq.n	39330 <net_if_up+0x34>
	status = net_if_l2(iface)->enable(iface, true);
   39352:	2101      	movs	r1, #1
   39354:	4620      	mov	r0, r4
   39356:	4798      	blx	r3
	if (status < 0) {
   39358:	2800      	cmp	r0, #0
   3935a:	dae9      	bge.n	39330 <net_if_up+0x34>
}
   3935c:	bd10      	pop	{r4, pc}

0003935e <net_byte_to_hex>:
{
   3935e:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   39360:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   39362:	b1bb      	cbz	r3, 39394 <net_byte_to_hex+0x36>
		if (val < 10) {
   39364:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   39366:	b26b      	sxtb	r3, r5
   39368:	bf86      	itte	hi
   3936a:	f1a2 050a 	subhi.w	r5, r2, #10
   3936e:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   39370:	3330      	addls	r3, #48	; 0x30
   39372:	1c44      	adds	r4, r0, #1
   39374:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   39376:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   3937a:	4619      	mov	r1, r3
   3937c:	2b09      	cmp	r3, #9
	*ptr = '\0';
   3937e:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   39382:	bf83      	ittte	hi
   39384:	3a0a      	subhi	r2, #10
   39386:	1889      	addhi	r1, r1, r2
   39388:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   3938a:	3130      	addls	r1, #48	; 0x30
   3938c:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   3938e:	7063      	strb	r3, [r4, #1]
   39390:	1c60      	adds	r0, r4, #1
}
   39392:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   39394:	2d00      	cmp	r5, #0
   39396:	d1e5      	bne.n	39364 <net_byte_to_hex+0x6>
   39398:	4604      	mov	r4, r0
   3939a:	e7ec      	b.n	39376 <net_byte_to_hex+0x18>

0003939c <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   3939c:	2801      	cmp	r0, #1
{
   3939e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   393a2:	460c      	mov	r4, r1
   393a4:	4616      	mov	r6, r2
	if (family == AF_INET) {
   393a6:	d126      	bne.n	393f6 <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   393a8:	4608      	mov	r0, r1
   393aa:	f7e3 fe61 	bl	1d070 <strlen>
		for (i = 0; i < len; i++) {
   393ae:	4623      	mov	r3, r4
   393b0:	4420      	add	r0, r4
   393b2:	4298      	cmp	r0, r3
   393b4:	d112      	bne.n	393dc <z_impl_net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
   393b6:	4635      	mov	r5, r6
   393b8:	2300      	movs	r3, #0
   393ba:	3603      	adds	r6, #3
   393bc:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   393c0:	4620      	mov	r0, r4
   393c2:	220a      	movs	r2, #10
   393c4:	a901      	add	r1, sp, #4
   393c6:	f7fe f81d 	bl	37404 <strtol>

			src = ++endptr;
   393ca:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   393cc:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   393d0:	42ae      	cmp	r6, r5
			src = ++endptr;
   393d2:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   393d6:	d1f3      	bne.n	393c0 <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   393d8:	2000      	movs	r0, #0
   393da:	e009      	b.n	393f0 <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   393dc:	f813 2b01 	ldrb.w	r2, [r3], #1
   393e0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   393e4:	2909      	cmp	r1, #9
   393e6:	d9e4      	bls.n	393b2 <z_impl_net_addr_pton+0x16>
   393e8:	2a2e      	cmp	r2, #46	; 0x2e
   393ea:	d0e2      	beq.n	393b2 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   393ec:	f06f 0015 	mvn.w	r0, #21
}
   393f0:	b003      	add	sp, #12
   393f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   393f6:	2802      	cmp	r0, #2
   393f8:	d1f8      	bne.n	393ec <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   393fa:	212e      	movs	r1, #46	; 0x2e
   393fc:	4620      	mov	r0, r4
   393fe:	f002 f92a 	bl	3b656 <strchr>
		if (*src == ':') {
   39402:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   39404:	2800      	cmp	r0, #0
   39406:	bf14      	ite	ne
   39408:	2706      	movne	r7, #6
   3940a:	2708      	moveq	r7, #8
		if (*src == ':') {
   3940c:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   3940e:	bf08      	it	eq
   39410:	3401      	addeq	r4, #1
		len = strlen(src);
   39412:	4620      	mov	r0, r4
   39414:	f7e3 fe2c 	bl	1d070 <strlen>
		for (i = 0; i < len; i++) {
   39418:	2300      	movs	r3, #0
   3941a:	4283      	cmp	r3, r0
   3941c:	db21      	blt.n	39462 <z_impl_net_addr_pton+0xc6>
		for (i = 0; i < expected_groups; i++) {
   3941e:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   39420:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   39422:	2c00      	cmp	r4, #0
   39424:	d0e2      	beq.n	393ec <z_impl_net_addr_pton+0x50>
   39426:	7823      	ldrb	r3, [r4, #0]
   39428:	2b00      	cmp	r3, #0
   3942a:	d0df      	beq.n	393ec <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
   3942c:	2b3a      	cmp	r3, #58	; 0x3a
   3942e:	d02d      	beq.n	3948c <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   39430:	2210      	movs	r2, #16
   39432:	2100      	movs	r1, #0
   39434:	4620      	mov	r0, r4
   39436:	f7fd ffe5 	bl	37404 <strtol>
   3943a:	2210      	movs	r2, #16
   3943c:	4681      	mov	r9, r0
   3943e:	2100      	movs	r1, #0
   39440:	4620      	mov	r0, r4
   39442:	f7fd ffdf 	bl	37404 <strtol>
   39446:	f3c9 2907 	ubfx	r9, r9, #8, #8
   3944a:	ea49 2000 	orr.w	r0, r9, r0, lsl #8
   3944e:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
				src = strchr(src, ':');
   39452:	213a      	movs	r1, #58	; 0x3a
   39454:	4620      	mov	r0, r4
   39456:	f002 f8fe 	bl	3b656 <strchr>
				if (src) {
   3945a:	4604      	mov	r4, r0
   3945c:	b178      	cbz	r0, 3947e <z_impl_net_addr_pton+0xe2>
			src++;
   3945e:	3401      	adds	r4, #1
   39460:	e010      	b.n	39484 <z_impl_net_addr_pton+0xe8>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   39462:	5ce2      	ldrb	r2, [r4, r3]
   39464:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   39468:	290a      	cmp	r1, #10
   3946a:	d906      	bls.n	3947a <z_impl_net_addr_pton+0xde>
   3946c:	f022 0120 	bic.w	r1, r2, #32
   39470:	3941      	subs	r1, #65	; 0x41
   39472:	2905      	cmp	r1, #5
   39474:	d901      	bls.n	3947a <z_impl_net_addr_pton+0xde>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   39476:	2a2e      	cmp	r2, #46	; 0x2e
   39478:	d1b8      	bne.n	393ec <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   3947a:	3301      	adds	r3, #1
   3947c:	e7cd      	b.n	3941a <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
   3947e:	1e7b      	subs	r3, r7, #1
   39480:	42ab      	cmp	r3, r5
   39482:	dcb3      	bgt.n	393ec <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   39484:	3501      	adds	r5, #1
   39486:	42af      	cmp	r7, r5
   39488:	dccb      	bgt.n	39422 <z_impl_net_addr_pton+0x86>
   3948a:	e013      	b.n	394b4 <z_impl_net_addr_pton+0x118>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   3948c:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   39490:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
   39494:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   39498:	3501      	adds	r5, #1
   3949a:	42af      	cmp	r7, r5
   3949c:	dcf6      	bgt.n	3948c <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
   3949e:	213a      	movs	r1, #58	; 0x3a
   394a0:	4620      	mov	r0, r4
   394a2:	f002 f925 	bl	3b6f0 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   394a6:	42a0      	cmp	r0, r4
   394a8:	d11f      	bne.n	394ea <z_impl_net_addr_pton+0x14e>
   394aa:	2f06      	cmp	r7, #6
   394ac:	d001      	beq.n	394b2 <z_impl_net_addr_pton+0x116>
   394ae:	7863      	ldrb	r3, [r4, #1]
   394b0:	bb63      	cbnz	r3, 3950c <z_impl_net_addr_pton+0x170>
				src++;
   394b2:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   394b4:	2f06      	cmp	r7, #6
   394b6:	d18f      	bne.n	393d8 <z_impl_net_addr_pton+0x3c>
			for (i = 0; i < 4; i++) {
   394b8:	2500      	movs	r5, #0
   394ba:	360c      	adds	r6, #12
				if (!src || !*src) {
   394bc:	2c00      	cmp	r4, #0
   394be:	d095      	beq.n	393ec <z_impl_net_addr_pton+0x50>
   394c0:	7823      	ldrb	r3, [r4, #0]
   394c2:	2b00      	cmp	r3, #0
   394c4:	d092      	beq.n	393ec <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   394c6:	220a      	movs	r2, #10
   394c8:	2100      	movs	r1, #0
   394ca:	4620      	mov	r0, r4
   394cc:	f7fd ff9a 	bl	37404 <strtol>
				src = strchr(src, '.');
   394d0:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   394d2:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   394d6:	4620      	mov	r0, r4
   394d8:	f002 f8bd 	bl	3b656 <strchr>
				if (src) {
   394dc:	4604      	mov	r4, r0
   394de:	b1b8      	cbz	r0, 39510 <z_impl_net_addr_pton+0x174>
					src++;
   394e0:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   394e2:	3501      	adds	r5, #1
   394e4:	2d04      	cmp	r5, #4
   394e6:	d1e9      	bne.n	394bc <z_impl_net_addr_pton+0x120>
   394e8:	e776      	b.n	393d8 <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
   394ea:	2f06      	cmp	r7, #6
   394ec:	d100      	bne.n	394f0 <z_impl_net_addr_pton+0x154>
				tmp--;
   394ee:	3801      	subs	r0, #1
			i = expected_groups - 1;
   394f0:	1e7d      	subs	r5, r7, #1
   394f2:	3001      	adds	r0, #1
				if (*tmp == ':') {
   394f4:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   394f8:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   394fa:	bf08      	it	eq
   394fc:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   39500:	2d00      	cmp	r5, #0
   39502:	f6ff af73 	blt.w	393ec <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
   39506:	42a0      	cmp	r0, r4
   39508:	d1f4      	bne.n	394f4 <z_impl_net_addr_pton+0x158>
   3950a:	e7a8      	b.n	3945e <z_impl_net_addr_pton+0xc2>
   3950c:	4620      	mov	r0, r4
   3950e:	e7ef      	b.n	394f0 <z_impl_net_addr_pton+0x154>
					if (i < 3) {
   39510:	2d03      	cmp	r5, #3
   39512:	f47f af6b 	bne.w	393ec <z_impl_net_addr_pton+0x50>
   39516:	e7e4      	b.n	394e2 <z_impl_net_addr_pton+0x146>

00039518 <cb_notify>:
{
   39518:	b570      	push	{r4, r5, r6, lr}
   3951a:	4604      	mov	r4, r0
   3951c:	460d      	mov	r5, r1
   3951e:	461e      	mov	r6, r3
	if (cb == NULL) {
   39520:	b90a      	cbnz	r2, 39526 <cb_notify+0xe>
		return 0;
   39522:	2000      	movs	r0, #0
}
   39524:	bd70      	pop	{r4, r5, r6, pc}
	parser->state = *current_state;
   39526:	6803      	ldr	r3, [r0, #0]
   39528:	7809      	ldrb	r1, [r1, #0]
   3952a:	f361 2390 	bfi	r3, r1, #10, #7
   3952e:	6003      	str	r3, [r0, #0]
	if (UNLIKELY(cb(parser) != 0)) {
   39530:	4790      	blx	r2
   39532:	b118      	cbz	r0, 3953c <cb_notify+0x24>
		SET_ERRNO(cb_error);
   39534:	7de3      	ldrb	r3, [r4, #23]
   39536:	f366 0306 	bfi	r3, r6, #0, #7
   3953a:	75e3      	strb	r3, [r4, #23]
	*current_state = parser->state;
   3953c:	6823      	ldr	r3, [r4, #0]
   3953e:	f3c3 2386 	ubfx	r3, r3, #10, #7
   39542:	702b      	strb	r3, [r5, #0]
	if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {
   39544:	7de3      	ldrb	r3, [r4, #23]
   39546:	065b      	lsls	r3, r3, #25
   39548:	d0eb      	beq.n	39522 <cb_notify+0xa>
		*parsed = already_parsed;
   3954a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   3954e:	601a      	str	r2, [r3, #0]
		return -HTTP_PARSER_ERRNO(parser);
   39550:	7de0      	ldrb	r0, [r4, #23]
   39552:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   39556:	4240      	negs	r0, r0
   39558:	e7e4      	b.n	39524 <cb_notify+0xc>

0003955a <cb_data>:
{
   3955a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3955e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   39562:	4605      	mov	r5, r0
	if (*mark == NULL) {
   39564:	f8d8 4000 	ldr.w	r4, [r8]
{
   39568:	460f      	mov	r7, r1
   3956a:	4691      	mov	r9, r2
   3956c:	461e      	mov	r6, r3
	if (*mark == NULL) {
   3956e:	b314      	cbz	r4, 395b6 <cb_data+0x5c>
	if (cb == NULL) {
   39570:	b1e9      	cbz	r1, 395ae <cb_data+0x54>
	parser->state = *current_state;
   39572:	7832      	ldrb	r2, [r6, #0]
   39574:	6803      	ldr	r3, [r0, #0]
   39576:	f362 2390 	bfi	r3, r2, #10, #7
   3957a:	6003      	str	r3, [r0, #0]
	rc = cb(parser, *mark, len);
   3957c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3957e:	f8d8 1000 	ldr.w	r1, [r8]
   39582:	47b8      	blx	r7
	if (UNLIKELY(rc != 0)) {
   39584:	b118      	cbz	r0, 3958e <cb_data+0x34>
		SET_ERRNO(cb_error);
   39586:	7deb      	ldrb	r3, [r5, #23]
   39588:	f369 0306 	bfi	r3, r9, #0, #7
   3958c:	75eb      	strb	r3, [r5, #23]
	*current_state = parser->state;
   3958e:	682b      	ldr	r3, [r5, #0]
   39590:	f3c3 2386 	ubfx	r3, r3, #10, #7
   39594:	7033      	strb	r3, [r6, #0]
	if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {
   39596:	7deb      	ldrb	r3, [r5, #23]
   39598:	065b      	lsls	r3, r3, #25
   3959a:	d008      	beq.n	395ae <cb_data+0x54>
		*parsed = already_parsed;
   3959c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   395a0:	601a      	str	r2, [r3, #0]
		return -HTTP_PARSER_ERRNO(parser);
   395a2:	7de8      	ldrb	r0, [r5, #23]
   395a4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   395a8:	4240      	negs	r0, r0
}
   395aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*mark = NULL;
   395ae:	2000      	movs	r0, #0
   395b0:	f8c8 0000 	str.w	r0, [r8]
	return 0;
   395b4:	e7f9      	b.n	395aa <cb_data+0x50>
		return 0;
   395b6:	4620      	mov	r0, r4
   395b8:	e7f7      	b.n	395aa <cb_data+0x50>

000395ba <http_message_needs_eof>:
	if (parser->type == HTTP_REQUEST) {
   395ba:	7803      	ldrb	r3, [r0, #0]
   395bc:	f013 0303 	ands.w	r3, r3, #3
   395c0:	d016      	beq.n	395f0 <http_message_needs_eof+0x36>
	if (parser->status_code / 100 == 1U || /* 1xx e.g. Continue */
   395c2:	8a83      	ldrh	r3, [r0, #20]
   395c4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
   395c8:	2a63      	cmp	r2, #99	; 0x63
   395ca:	d911      	bls.n	395f0 <http_message_needs_eof+0x36>
   395cc:	2bcc      	cmp	r3, #204	; 0xcc
   395ce:	d00f      	beq.n	395f0 <http_message_needs_eof+0x36>
			parser->status_code == 204U ||     /* No Content */
   395d0:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   395d4:	d00c      	beq.n	395f0 <http_message_needs_eof+0x36>
			parser->flags & F_SKIPBODY) {     /* response to a HEAD
   395d6:	8803      	ldrh	r3, [r0, #0]
   395d8:	f3c3 0387 	ubfx	r3, r3, #2, #8
	if ((parser->flags & F_CHUNKED) ||
   395dc:	f003 0341 	and.w	r3, r3, #65	; 0x41
   395e0:	b933      	cbnz	r3, 395f0 <http_message_needs_eof+0x36>
   395e2:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   395e6:	4018      	ands	r0, r3
   395e8:	1c43      	adds	r3, r0, #1
   395ea:	4258      	negs	r0, r3
   395ec:	4158      	adcs	r0, r3
   395ee:	4770      	bx	lr
		return 0;
   395f0:	2000      	movs	r0, #0
}
   395f2:	4770      	bx	lr

000395f4 <http_should_keep_alive>:
{
   395f4:	b508      	push	{r3, lr}
	if (parser->http_major > 0 && parser->http_minor > 0) {
   395f6:	8a02      	ldrh	r2, [r0, #16]
   395f8:	8803      	ldrh	r3, [r0, #0]
   395fa:	f3c3 0387 	ubfx	r3, r3, #2, #8
   395fe:	b12a      	cbz	r2, 3960c <http_should_keep_alive+0x18>
   39600:	8a42      	ldrh	r2, [r0, #18]
   39602:	b11a      	cbz	r2, 3960c <http_should_keep_alive+0x18>
		if (parser->flags & F_CONNECTION_CLOSE) {
   39604:	075b      	lsls	r3, r3, #29
   39606:	d504      	bpl.n	39612 <http_should_keep_alive+0x1e>
			return 0;
   39608:	2000      	movs	r0, #0
   3960a:	e007      	b.n	3961c <http_should_keep_alive+0x28>
		if (!(parser->flags & F_CONNECTION_KEEP_ALIVE)) {
   3960c:	f013 0302 	ands.w	r3, r3, #2
   39610:	d005      	beq.n	3961e <http_should_keep_alive+0x2a>
	return !http_message_needs_eof(parser);
   39612:	f7ff ffd2 	bl	395ba <http_message_needs_eof>
   39616:	fab0 f080 	clz	r0, r0
   3961a:	0940      	lsrs	r0, r0, #5
}
   3961c:	bd08      	pop	{r3, pc}
			return 0;
   3961e:	4618      	mov	r0, r3
   39620:	e7fc      	b.n	3961c <http_should_keep_alive+0x28>

00039622 <http_parser_init>:


void http_parser_init(struct http_parser *parser, enum http_parser_type t)
{
   39622:	b570      	push	{r4, r5, r6, lr}
   39624:	2220      	movs	r2, #32
   39626:	460d      	mov	r5, r1
   39628:	2100      	movs	r1, #0
   3962a:	4604      	mov	r4, r0
	void *data = parser->data; /* preserve application data */
   3962c:	6986      	ldr	r6, [r0, #24]
   3962e:	f001 fee0 	bl	3b3f2 <memset>

	(void)memset(parser, 0, sizeof(*parser));
	parser->data = data;
	parser->type = t;
   39632:	f04f 0300 	mov.w	r3, #0
   39636:	f365 0301 	bfi	r3, r5, #0, #2
	parser->data = data;
   3963a:	61a6      	str	r6, [r4, #24]
	parser->type = t;
   3963c:	7023      	strb	r3, [r4, #0]
	parser->state =
		(t == HTTP_REQUEST ? s_start_req :
   3963e:	b165      	cbz	r5, 3965a <http_parser_init+0x38>
   39640:	2d01      	cmp	r5, #1
   39642:	bf0c      	ite	eq
   39644:	2204      	moveq	r2, #4
   39646:	2202      	movne	r2, #2
	parser->state =
   39648:	6823      	ldr	r3, [r4, #0]
   3964a:	f362 2390 	bfi	r3, r2, #10, #7
   3964e:	6023      	str	r3, [r4, #0]
		 (t == HTTP_RESPONSE ? s_start_res : s_start_req_or_res));
	parser->http_errno = HPE_OK;
   39650:	7de3      	ldrb	r3, [r4, #23]
   39652:	f36f 0306 	bfc	r3, #0, #7
   39656:	75e3      	strb	r3, [r4, #23]
}
   39658:	bd70      	pop	{r4, r5, r6, pc}
		(t == HTTP_REQUEST ? s_start_req :
   3965a:	2212      	movs	r2, #18
   3965c:	e7f4      	b.n	39648 <http_parser_init+0x26>

0003965e <http_parser_url_init>:
   3965e:	2220      	movs	r2, #32
   39660:	2100      	movs	r1, #0
   39662:	f001 bec6 	b.w	3b3f2 <memset>

00039666 <on_url>:
{
   39666:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   39668:	6c83      	ldr	r3, [r0, #72]	; 0x48
   3966a:	b113      	cbz	r3, 39672 <on_url+0xc>
	    req->internal.response.http_cb->on_url) {
   3966c:	685b      	ldr	r3, [r3, #4]
	if (req->internal.response.http_cb &&
   3966e:	b103      	cbz	r3, 39672 <on_url+0xc>
		req->internal.response.http_cb->on_url(parser, at, length);
   39670:	4798      	blx	r3
}
   39672:	2000      	movs	r0, #0
   39674:	bd08      	pop	{r3, pc}

00039676 <on_message_begin>:
{
   39676:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   39678:	6c83      	ldr	r3, [r0, #72]	; 0x48
   3967a:	b113      	cbz	r3, 39682 <on_message_begin+0xc>
	    req->internal.response.http_cb->on_message_begin) {
   3967c:	681b      	ldr	r3, [r3, #0]
	if (req->internal.response.http_cb &&
   3967e:	b103      	cbz	r3, 39682 <on_message_begin+0xc>
		req->internal.response.http_cb->on_message_begin(parser);
   39680:	4798      	blx	r3
}
   39682:	2000      	movs	r0, #0
   39684:	bd08      	pop	{r3, pc}

00039686 <on_message_complete>:
	if (req->internal.response.http_cb &&
   39686:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   39688:	b510      	push	{r4, lr}
   3968a:	4604      	mov	r4, r0
	if (req->internal.response.http_cb &&
   3968c:	b113      	cbz	r3, 39694 <on_message_complete+0xe>
	    req->internal.response.http_cb->on_message_complete) {
   3968e:	69db      	ldr	r3, [r3, #28]
	if (req->internal.response.http_cb &&
   39690:	b103      	cbz	r3, 39694 <on_message_complete+0xe>
		req->internal.response.http_cb->on_message_complete(parser);
   39692:	4798      	blx	r3
	req->internal.response.message_complete = 1;
   39694:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   39698:	f043 0304 	orr.w	r3, r3, #4
   3969c:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	if (req->internal.response.cb) {
   396a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   396a2:	b12b      	cbz	r3, 396b0 <on_message_complete+0x2a>
		req->internal.response.cb(&req->internal.response,
   396a4:	2101      	movs	r1, #1
   396a6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   396aa:	f104 0048 	add.w	r0, r4, #72	; 0x48
   396ae:	4798      	blx	r3
}
   396b0:	2000      	movs	r0, #0
   396b2:	bd10      	pop	{r4, pc}

000396b4 <on_chunk_header>:
{
   396b4:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   396b6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   396b8:	b113      	cbz	r3, 396c0 <on_chunk_header+0xc>
	    req->internal.response.http_cb->on_chunk_header) {
   396ba:	6a1b      	ldr	r3, [r3, #32]
	if (req->internal.response.http_cb &&
   396bc:	b103      	cbz	r3, 396c0 <on_chunk_header+0xc>
		req->internal.response.http_cb->on_chunk_header(parser);
   396be:	4798      	blx	r3
}
   396c0:	2000      	movs	r0, #0
   396c2:	bd08      	pop	{r3, pc}

000396c4 <on_chunk_complete>:
{
   396c4:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   396c6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   396c8:	b113      	cbz	r3, 396d0 <on_chunk_complete+0xc>
	    req->internal.response.http_cb->on_chunk_complete) {
   396ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	if (req->internal.response.http_cb &&
   396cc:	b103      	cbz	r3, 396d0 <on_chunk_complete+0xc>
		req->internal.response.http_cb->on_chunk_complete(parser);
   396ce:	4798      	blx	r3
}
   396d0:	2000      	movs	r0, #0
   396d2:	bd08      	pop	{r3, pc}

000396d4 <http_timeout>:
	(void)close(data->sock);
   396d4:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
   396d8:	f7ff baf5 	b.w	38cc6 <z_impl_zsock_close>

000396dc <on_header_value>:
{
   396dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (req->internal.response.cl_present) {
   396de:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
{
   396e2:	4604      	mov	r4, r0
	if (req->internal.response.cl_present) {
   396e4:	07db      	lsls	r3, r3, #31
{
   396e6:	460e      	mov	r6, r1
   396e8:	4615      	mov	r5, r2
	if (req->internal.response.cl_present) {
   396ea:	d51a      	bpl.n	39722 <on_header_value+0x46>
		if (length <= MAX_NUM_DIGITS - 1) {
   396ec:	2a0f      	cmp	r2, #15
   396ee:	d812      	bhi.n	39716 <on_header_value+0x3a>
			memcpy(str, at, length);
   396f0:	2310      	movs	r3, #16
   396f2:	4668      	mov	r0, sp
   396f4:	f001 fe6a 	bl	3b3cc <__memcpy_chk>
			str[length] = 0;
   396f8:	2100      	movs	r1, #0
   396fa:	ab04      	add	r3, sp, #16
   396fc:	442b      	add	r3, r5
			num = strtol(str, NULL, 10);
   396fe:	220a      	movs	r2, #10
   39700:	4668      	mov	r0, sp
			str[length] = 0;
   39702:	f803 1c10 	strb.w	r1, [r3, #-16]
			num = strtol(str, NULL, 10);
   39706:	f7fd fe7d 	bl	37404 <strtol>
			if (num == LONG_MIN || num == LONG_MAX) {
   3970a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   3970e:	3b01      	subs	r3, #1
   39710:	3303      	adds	r3, #3
   39712:	d811      	bhi.n	39738 <on_header_value+0x5c>
			req->internal.response.content_length = num;
   39714:	6620      	str	r0, [r4, #96]	; 0x60
		req->internal.response.cl_present = false;
   39716:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   3971a:	f36f 0300 	bfc	r3, #0, #1
   3971e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	if (req->internal.response.http_cb &&
   39722:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   39724:	b130      	cbz	r0, 39734 <on_header_value+0x58>
	    req->internal.response.http_cb->on_header_value) {
   39726:	6903      	ldr	r3, [r0, #16]
	if (req->internal.response.http_cb &&
   39728:	b14b      	cbz	r3, 3973e <on_header_value+0x62>
		req->internal.response.http_cb->on_header_value(parser, at,
   3972a:	462a      	mov	r2, r5
   3972c:	4631      	mov	r1, r6
   3972e:	4620      	mov	r0, r4
   39730:	4798      	blx	r3
	return 0;
   39732:	2000      	movs	r0, #0
}
   39734:	b004      	add	sp, #16
   39736:	bd70      	pop	{r4, r5, r6, pc}
				return -EINVAL;
   39738:	f06f 0015 	mvn.w	r0, #21
   3973c:	e7fa      	b.n	39734 <on_header_value+0x58>
	return 0;
   3973e:	4618      	mov	r0, r3
   39740:	e7f8      	b.n	39734 <on_header_value+0x58>

00039742 <on_headers_complete>:
	if (req->internal.response.http_cb &&
   39742:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   39744:	b510      	push	{r4, lr}
   39746:	4604      	mov	r4, r0
	if (req->internal.response.http_cb &&
   39748:	b113      	cbz	r3, 39750 <on_headers_complete+0xe>
	    req->internal.response.http_cb->on_headers_complete) {
   3974a:	695b      	ldr	r3, [r3, #20]
	if (req->internal.response.http_cb &&
   3974c:	b103      	cbz	r3, 39750 <on_headers_complete+0xe>
		req->internal.response.http_cb->on_headers_complete(parser);
   3974e:	4798      	blx	r3
	if (parser->status_code >= 500 && parser->status_code < 600) {
   39750:	8aa3      	ldrh	r3, [r4, #20]
   39752:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   39756:	b29b      	uxth	r3, r3
   39758:	2b63      	cmp	r3, #99	; 0x63
   3975a:	d90a      	bls.n	39772 <on_headers_complete+0x30>
	if ((req->method == HTTP_HEAD || req->method == HTTP_OPTIONS) &&
   3975c:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   39760:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   39764:	2b02      	cmp	r3, #2
   39766:	d106      	bne.n	39776 <on_headers_complete+0x34>
   39768:	6e20      	ldr	r0, [r4, #96]	; 0x60
   3976a:	3800      	subs	r0, #0
   3976c:	bf18      	it	ne
   3976e:	2001      	movne	r0, #1
}
   39770:	bd10      	pop	{r4, pc}
		return 1;
   39772:	2001      	movs	r0, #1
   39774:	e7fc      	b.n	39770 <on_headers_complete+0x2e>
	return 0;
   39776:	2000      	movs	r0, #0
   39778:	e7fa      	b.n	39770 <on_headers_complete+0x2e>

0003977a <on_status>:
	len = MIN(length, sizeof(req->internal.response.http_status) - 1);
   3977a:	2a1f      	cmp	r2, #31
{
   3977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	len = MIN(length, sizeof(req->internal.response.http_status) - 1);
   3977e:	4616      	mov	r6, r2
   39780:	bf28      	it	cs
   39782:	261f      	movcs	r6, #31
{
   39784:	4604      	mov	r4, r0
   39786:	4615      	mov	r5, r2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   39788:	3068      	adds	r0, #104	; 0x68
   3978a:	4632      	mov	r2, r6
   3978c:	460f      	mov	r7, r1
   3978e:	f001 fe10 	bl	3b3b2 <memcpy>
	req->internal.response.http_status[len] = 0;
   39792:	2300      	movs	r3, #0
   39794:	4426      	add	r6, r4
   39796:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
	if (req->internal.response.http_cb &&
   3979a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   3979c:	b12b      	cbz	r3, 397aa <on_status+0x30>
	    req->internal.response.http_cb->on_status) {
   3979e:	689b      	ldr	r3, [r3, #8]
	if (req->internal.response.http_cb &&
   397a0:	b11b      	cbz	r3, 397aa <on_status+0x30>
		req->internal.response.http_cb->on_status(parser, at, length);
   397a2:	462a      	mov	r2, r5
   397a4:	4639      	mov	r1, r7
   397a6:	4620      	mov	r0, r4
   397a8:	4798      	blx	r3
}
   397aa:	2000      	movs	r0, #0
   397ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000397ae <on_body>:
	req->internal.response.processed += length;
   397ae:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   397b0:	b570      	push	{r4, r5, r6, lr}
	req->internal.response.processed += length;
   397b2:	4413      	add	r3, r2
	req->internal.response.body_found = 1;
   397b4:	f890 6088 	ldrb.w	r6, [r0, #136]	; 0x88
	req->internal.response.processed += length;
   397b8:	6643      	str	r3, [r0, #100]	; 0x64
	if (req->internal.response.http_cb &&
   397ba:	6c83      	ldr	r3, [r0, #72]	; 0x48
	req->internal.response.body_found = 1;
   397bc:	f046 0602 	orr.w	r6, r6, #2
{
   397c0:	4604      	mov	r4, r0
   397c2:	460d      	mov	r5, r1
	req->internal.response.body_found = 1;
   397c4:	f880 6088 	strb.w	r6, [r0, #136]	; 0x88
	if (req->internal.response.http_cb &&
   397c8:	b113      	cbz	r3, 397d0 <on_body+0x22>
	    req->internal.response.http_cb->on_body) {
   397ca:	699b      	ldr	r3, [r3, #24]
	if (req->internal.response.http_cb &&
   397cc:	b103      	cbz	r3, 397d0 <on_body+0x22>
		req->internal.response.http_cb->on_body(parser, at, length);
   397ce:	4798      	blx	r3
	if (!req->internal.response.body_start &&
   397d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   397d2:	b91b      	cbnz	r3, 397dc <on_body+0x2e>
   397d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   397d6:	42ab      	cmp	r3, r5
		req->internal.response.body_start = (uint8_t *)at;
   397d8:	bf18      	it	ne
   397da:	6525      	strne	r5, [r4, #80]	; 0x50
	if (req->internal.response.cb) {
   397dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   397de:	b173      	cbz	r3, 397fe <on_body+0x50>
		if (http_should_keep_alive(parser)) {
   397e0:	4620      	mov	r0, r4
   397e2:	f7ff ff07 	bl	395f4 <http_should_keep_alive>
   397e6:	4602      	mov	r2, r0
   397e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   397ea:	f104 0048 	add.w	r0, r4, #72	; 0x48
   397ee:	b142      	cbz	r2, 39802 <on_body+0x54>
			req->internal.response.cb(&req->internal.response,
   397f0:	2100      	movs	r1, #0
   397f2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
			req->internal.response.cb(&req->internal.response,
   397f6:	4798      	blx	r3
		req->internal.response.data_len = 0;
   397f8:	2300      	movs	r3, #0
   397fa:	65e3      	str	r3, [r4, #92]	; 0x5c
		req->internal.response.body_start = NULL;
   397fc:	6523      	str	r3, [r4, #80]	; 0x50
}
   397fe:	2000      	movs	r0, #0
   39800:	bd70      	pop	{r4, r5, r6, pc}
			req->internal.response.cb(&req->internal.response,
   39802:	2101      	movs	r1, #1
   39804:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   39808:	e7f5      	b.n	397f6 <on_body+0x48>

0003980a <sendall>:
{
   3980a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3980c:	4606      	mov	r6, r0
   3980e:	460d      	mov	r5, r1
   39810:	4614      	mov	r4, r2
   39812:	2700      	movs	r7, #0
	while (len) {
   39814:	b90c      	cbnz	r4, 3981a <sendall+0x10>
	return 0;
   39816:	4620      	mov	r0, r4
   39818:	e00d      	b.n	39836 <sendall+0x2c>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3981a:	2300      	movs	r3, #0
   3981c:	4622      	mov	r2, r4
   3981e:	4629      	mov	r1, r5
   39820:	4630      	mov	r0, r6
   39822:	e9cd 7700 	strd	r7, r7, [sp]
   39826:	f7ff fabb 	bl	38da0 <z_impl_zsock_sendto>
		if (out_len < 0) {
   3982a:	1e03      	subs	r3, r0, #0
   3982c:	da05      	bge.n	3983a <sendall+0x30>
			return -errno;
   3982e:	f7ff fd4a 	bl	392c6 <__errno>
   39832:	6800      	ldr	r0, [r0, #0]
   39834:	4240      	negs	r0, r0
}
   39836:	b003      	add	sp, #12
   39838:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = (const char *)buf + out_len;
   3983a:	441d      	add	r5, r3
		len -= out_len;
   3983c:	1ae4      	subs	r4, r4, r3
   3983e:	e7e9      	b.n	39814 <sendall+0xa>

00039840 <http_send_data.constprop.0>:
static int http_send_data(int sock, char *send_buf,
   39840:	b408      	push	{r3}
   39842:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39846:	4607      	mov	r7, r0
   39848:	460e      	mov	r6, r1
   3984a:	ab0d      	add	r3, sp, #52	; 0x34
   3984c:	f853 8b04 	ldr.w	r8, [r3], #4
	data = va_arg(va, const char *);
   39850:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   39854:	3304      	adds	r3, #4
	int ret, end_of_send = *send_buf_pos;
   39856:	f8d8 4000 	ldr.w	r4, [r8]
	data = va_arg(va, const char *);
   3985a:	9303      	str	r3, [sp, #12]
	while (data) {
   3985c:	f1bb 0f00 	cmp.w	fp, #0
   39860:	d106      	bne.n	39870 <http_send_data.constprop.0+0x30>
	if (end_of_send > (int)send_buf_max_len) {
   39862:	2cc0      	cmp	r4, #192	; 0xc0
		return -EMSGSIZE;
   39864:	bfcc      	ite	gt
   39866:	f06f 0479 	mvngt.w	r4, #121	; 0x79
	*send_buf_pos = end_of_send;
   3986a:	f8c8 4000 	strle.w	r4, [r8]
	return end_of_send;
   3986e:	e01c      	b.n	398aa <http_send_data.constprop.0+0x6a>
		end_of_data = 0;
   39870:	f04f 0a00 	mov.w	sl, #0
			remaining_len = strlen(data + end_of_data);
   39874:	eb0b 010a 	add.w	r1, fp, sl
   39878:	4608      	mov	r0, r1
   3987a:	9101      	str	r1, [sp, #4]
   3987c:	f7e3 fbf8 	bl	1d070 <strlen>
   39880:	4605      	mov	r5, r0
			to_be_copied = send_buf_max_len - end_of_send;
   39882:	f1c4 09c0 	rsb	r9, r4, #192	; 0xc0
			if (remaining_len > to_be_copied) {
   39886:	454d      	cmp	r5, r9
   39888:	9901      	ldr	r1, [sp, #4]
   3988a:	eb06 0004 	add.w	r0, r6, r4
   3988e:	dd12      	ble.n	398b6 <http_send_data.constprop.0+0x76>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   39890:	464a      	mov	r2, r9
   39892:	f001 ff07 	bl	3b6a4 <strncpy>
				ret = sendall(sock, send_buf, end_of_send);
   39896:	22c0      	movs	r2, #192	; 0xc0
   39898:	4631      	mov	r1, r6
   3989a:	4638      	mov	r0, r7
   3989c:	f7ff ffb5 	bl	3980a <sendall>
				if (ret < 0) {
   398a0:	1e04      	subs	r4, r0, #0
				end_of_data += to_be_copied;
   398a2:	44ca      	add	sl, r9
				remaining_len -= to_be_copied;
   398a4:	eba5 0509 	sub.w	r5, r5, r9
				if (ret < 0) {
   398a8:	da0f      	bge.n	398ca <http_send_data.constprop.0+0x8a>
}
   398aa:	4620      	mov	r0, r4
   398ac:	b004      	add	sp, #16
   398ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   398b2:	b001      	add	sp, #4
   398b4:	4770      	bx	lr
   398b6:	462a      	mov	r2, r5
   398b8:	f001 fef4 	bl	3b6a4 <strncpy>
				end_of_send += remaining_len;
   398bc:	442c      	add	r4, r5
		data = va_arg(va, const char *);
   398be:	9b03      	ldr	r3, [sp, #12]
   398c0:	1d1a      	adds	r2, r3, #4
   398c2:	f8d3 b000 	ldr.w	fp, [r3]
   398c6:	9203      	str	r2, [sp, #12]
   398c8:	e7c8      	b.n	3985c <http_send_data.constprop.0+0x1c>
				end_of_send = 0;
   398ca:	2400      	movs	r4, #0
		} while (remaining_len > 0);
   398cc:	42a5      	cmp	r5, r4
   398ce:	dcd1      	bgt.n	39874 <http_send_data.constprop.0+0x34>
   398d0:	e7f5      	b.n	398be <http_send_data.constprop.0+0x7e>

000398d2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   398d2:	6843      	ldr	r3, [r0, #4]
}
   398d4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   398d6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   398d8:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   398da:	600b      	str	r3, [r1, #0]
}
   398dc:	4770      	bx	lr

000398de <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   398de:	6843      	ldr	r3, [r0, #4]
   398e0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   398e2:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   398e4:	4042      	eors	r2, r0
   398e6:	400a      	ands	r2, r1
   398e8:	4042      	eors	r2, r0
    p_reg->OUT = value;
   398ea:	605a      	str	r2, [r3, #4]
}
   398ec:	2000      	movs	r0, #0
   398ee:	4770      	bx	lr

000398f0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   398f0:	6843      	ldr	r3, [r0, #4]
}
   398f2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   398f4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   398f6:	6099      	str	r1, [r3, #8]
}
   398f8:	4770      	bx	lr

000398fa <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   398fa:	6843      	ldr	r3, [r0, #4]
}
   398fc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   398fe:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   39900:	60d9      	str	r1, [r3, #12]
}
   39902:	4770      	bx	lr

00039904 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   39904:	6843      	ldr	r3, [r0, #4]
}
   39906:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   39908:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3990a:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3990c:	4059      	eors	r1, r3
    p_reg->OUT = value;
   3990e:	6051      	str	r1, [r2, #4]
}
   39910:	4770      	bx	lr

00039912 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   39912:	68c3      	ldr	r3, [r0, #12]
{
   39914:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   39916:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   39918:	b158      	cbz	r0, 39932 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3991a:	2400      	movs	r4, #0
   3991c:	4281      	cmp	r1, r0
   3991e:	d113      	bne.n	39948 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   39920:	6808      	ldr	r0, [r1, #0]
   39922:	b95c      	cbnz	r4, 3993c <gpio_nrfx_manage_callback+0x2a>
   39924:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   39926:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   39928:	42a1      	cmp	r1, r4
   3992a:	d100      	bne.n	3992e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   3992c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   3992e:	2000      	movs	r0, #0
   39930:	6008      	str	r0, [r1, #0]
	if (set) {
   39932:	b972      	cbnz	r2, 39952 <gpio_nrfx_manage_callback+0x40>
	return 0;
   39934:	2000      	movs	r0, #0
}
   39936:	bd30      	pop	{r4, r5, pc}
   39938:	4628      	mov	r0, r5
   3993a:	e7ef      	b.n	3991c <gpio_nrfx_manage_callback+0xa>
   3993c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   3993e:	6898      	ldr	r0, [r3, #8]
   39940:	4281      	cmp	r1, r0
	list->tail = node;
   39942:	bf08      	it	eq
   39944:	609c      	streq	r4, [r3, #8]
}
   39946:	e7f2      	b.n	3992e <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   39948:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3994a:	4604      	mov	r4, r0
   3994c:	2d00      	cmp	r5, #0
   3994e:	d1f3      	bne.n	39938 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   39950:	b13a      	cbz	r2, 39962 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   39952:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   39954:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   39956:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   39958:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   3995a:	2800      	cmp	r0, #0
   3995c:	d1ea      	bne.n	39934 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   3995e:	6099      	str	r1, [r3, #8]
}
   39960:	e7e9      	b.n	39936 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   39962:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   39966:	e7e6      	b.n	39936 <gpio_nrfx_manage_callback+0x24>

00039968 <flash_nrf_write_protection>:
}
   39968:	2000      	movs	r0, #0
   3996a:	4770      	bx	lr

0003996c <is_regular_addr_valid>:
{
   3996c:	b538      	push	{r3, r4, r5, lr}
   3996e:	4604      	mov	r4, r0
   39970:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   39972:	f000 fff3 	bl	3a95c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   39976:	4284      	cmp	r4, r0
   39978:	d209      	bcs.n	3998e <is_regular_addr_valid+0x22>
   3997a:	2c00      	cmp	r4, #0
   3997c:	db07      	blt.n	3998e <is_regular_addr_valid+0x22>
	    addr < 0 ||
   3997e:	42a8      	cmp	r0, r5
   39980:	d305      	bcc.n	3998e <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   39982:	1961      	adds	r1, r4, r5
	    len > flash_size ||
   39984:	4281      	cmp	r1, r0
   39986:	bf8c      	ite	hi
   39988:	2000      	movhi	r0, #0
   3998a:	2001      	movls	r0, #1
}
   3998c:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   3998e:	2000      	movs	r0, #0
   39990:	e7fc      	b.n	3998c <is_regular_addr_valid+0x20>

00039992 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   39992:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   39996:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   39998:	6883      	ldr	r3, [r0, #8]
{
   3999a:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   3999c:	695b      	ldr	r3, [r3, #20]
   3999e:	4669      	mov	r1, sp
{
   399a0:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   399a2:	aa01      	add	r2, sp, #4
   399a4:	4798      	blx	r3

	while (layout_size--) {
   399a6:	e9dd 1000 	ldrd	r1, r0, [sp]
   399aa:	2300      	movs	r3, #0
	off_t end = 0;
   399ac:	461d      	mov	r5, r3
	off_t group_offs = 0;
   399ae:	469e      	mov	lr, r3
	size_t page_count = 0;
   399b0:	469c      	mov	ip, r3
   399b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	while (layout_size--) {
   399b6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   399ba:	d102      	bne.n	399c2 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   399bc:	f06f 0015 	mvn.w	r0, #21
   399c0:	e018      	b.n	399f4 <flash_get_page_info+0x62>
		if (use_addr) {
   399c2:	680a      	ldr	r2, [r1, #0]
   399c4:	b1cf      	cbz	r7, 399fa <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   399c6:	6848      	ldr	r0, [r1, #4]
   399c8:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   399cc:	42a5      	cmp	r5, r4
   399ce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   399d2:	dd17      	ble.n	39a04 <flash_get_page_info+0x72>
   399d4:	b103      	cbz	r3, 399d8 <flash_get_page_info+0x46>
   399d6:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   399d8:	9b00      	ldr	r3, [sp, #0]
   399da:	685b      	ldr	r3, [r3, #4]
   399dc:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   399de:	b177      	cbz	r7, 399fe <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   399e0:	eba4 040e 	sub.w	r4, r4, lr
   399e4:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   399e8:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   399ea:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   399ee:	4464      	add	r4, ip
			info->start_offset = group_offs +
   399f0:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   399f2:	60b4      	str	r4, [r6, #8]
}
   399f4:	b002      	add	sp, #8
   399f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   399fa:	4415      	add	r5, r2
   399fc:	e7e6      	b.n	399cc <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   399fe:	eba4 040c 	sub.w	r4, r4, ip
   39a02:	e7f1      	b.n	399e8 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   39a04:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   39a06:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   39a08:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   39a0c:	3108      	adds	r1, #8
   39a0e:	2301      	movs	r3, #1
   39a10:	e7d1      	b.n	399b6 <flash_get_page_info+0x24>

00039a12 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   39a12:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   39a14:	2201      	movs	r2, #1
   39a16:	f7ff bfbc 	b.w	39992 <flash_get_page_info>

00039a1a <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   39a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   39a1e:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   39a20:	6883      	ldr	r3, [r0, #8]
{
   39a22:	b086      	sub	sp, #24
   39a24:	4688      	mov	r8, r1
   39a26:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   39a28:	695b      	ldr	r3, [r3, #20]
   39a2a:	aa02      	add	r2, sp, #8
   39a2c:	a901      	add	r1, sp, #4
   39a2e:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   39a30:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   39a32:	4625      	mov	r5, r4
   39a34:	9b02      	ldr	r3, [sp, #8]
   39a36:	42ab      	cmp	r3, r5
   39a38:	d802      	bhi.n	39a40 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   39a3a:	b006      	add	sp, #24
   39a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   39a40:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   39a42:	9f01      	ldr	r7, [sp, #4]
   39a44:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   39a48:	687b      	ldr	r3, [r7, #4]
   39a4a:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   39a4c:	683a      	ldr	r2, [r7, #0]
   39a4e:	eb0a 0306 	add.w	r3, sl, r6
   39a52:	42b2      	cmp	r2, r6
   39a54:	d802      	bhi.n	39a5c <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   39a56:	469a      	mov	sl, r3
   39a58:	3501      	adds	r5, #1
   39a5a:	e7eb      	b.n	39a34 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   39a5c:	4649      	mov	r1, r9
   39a5e:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   39a60:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   39a62:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   39a64:	47c0      	blx	r8
   39a66:	2800      	cmp	r0, #0
   39a68:	d0e7      	beq.n	39a3a <flash_page_foreach+0x20>
			off += page_info.size;
   39a6a:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   39a6c:	3601      	adds	r6, #1
			off += page_info.size;
   39a6e:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   39a70:	e7ec      	b.n	39a4c <flash_page_foreach+0x32>

00039a72 <uarte_nrfx_config_get>:
{
   39a72:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   39a74:	68c2      	ldr	r2, [r0, #12]
   39a76:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   39a7a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   39a7e:	2000      	movs	r0, #0
   39a80:	4770      	bx	lr

00039a82 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   39a82:	6843      	ldr	r3, [r0, #4]
   39a84:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   39a86:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   39a8a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   39a8e:	4770      	bx	lr

00039a90 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   39a90:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   39a92:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   39a94:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   39a98:	b938      	cbnz	r0, 39aaa <is_tx_ready+0x1a>
   39a9a:	7992      	ldrb	r2, [r2, #6]
   39a9c:	b932      	cbnz	r2, 39aac <is_tx_ready+0x1c>
   39a9e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   39aa2:	3800      	subs	r0, #0
   39aa4:	bf18      	it	ne
   39aa6:	2001      	movne	r0, #1
   39aa8:	4770      	bx	lr
   39aaa:	2001      	movs	r0, #1
}
   39aac:	4770      	bx	lr

00039aae <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   39aae:	4770      	bx	lr

00039ab0 <uarte_nrfx_rx_enable>:
{
   39ab0:	b530      	push	{r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   39ab2:	68c5      	ldr	r5, [r0, #12]
	return config->uarte_regs;
   39ab4:	6840      	ldr	r0, [r0, #4]
   39ab6:	6804      	ldr	r4, [r0, #0]
    return p_reg->PSEL.RXD;
   39ab8:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   39abc:	3001      	adds	r0, #1
   39abe:	d022      	beq.n	39b06 <uarte_nrfx_rx_enable+0x56>
		MAX(timeout / RX_TIMEOUT_DIV,
   39ac0:	2b09      	cmp	r3, #9
   39ac2:	bfc8      	it	gt
   39ac4:	2005      	movgt	r0, #5
	data->async->rx_timeout = timeout;
   39ac6:	68ed      	ldr	r5, [r5, #12]
   39ac8:	66eb      	str	r3, [r5, #108]	; 0x6c
		MAX(timeout / RX_TIMEOUT_DIV,
   39aca:	bfc8      	it	gt
   39acc:	fb93 f3f0 	sdivgt	r3, r3, r0
	data->async->rx_offset = 0;
   39ad0:	f04f 0000 	mov.w	r0, #0
		MAX(timeout / RX_TIMEOUT_DIV,
   39ad4:	bfd8      	it	le
   39ad6:	2301      	movle	r3, #1
	data->async->rx_buf_len = len;
   39ad8:	e9c5 1214 	strd	r1, r2, [r5, #80]	; 0x50
	data->async->rx_next_buf = NULL;
   39adc:	e9c5 0016 	strd	r0, r0, [r5, #88]	; 0x58
	data->async->rx_timeout_slab =
   39ae0:	672b      	str	r3, [r5, #112]	; 0x70
	data->async->rx_next_buf_len = 0;
   39ae2:	6628      	str	r0, [r5, #96]	; 0x60
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   39ae4:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   39ae8:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   39aec:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   39af0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   39af4:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
   39af8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	data->async->rx_enabled = true;
   39afc:	2301      	movs	r3, #1
   39afe:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39b02:	6023      	str	r3, [r4, #0]
}
   39b04:	bd30      	pop	{r4, r5, pc}
		return -ENOTSUP;
   39b06:	f06f 0085 	mvn.w	r0, #133	; 0x85
   39b0a:	e7fb      	b.n	39b04 <uarte_nrfx_rx_enable+0x54>

00039b0c <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   39b0c:	6843      	ldr	r3, [r0, #4]
{
   39b0e:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   39b10:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   39b12:	68c4      	ldr	r4, [r0, #12]
	__asm__ volatile(
   39b14:	f04f 0020 	mov.w	r0, #32
   39b18:	f3ef 8511 	mrs	r5, BASEPRI
   39b1c:	f380 8811 	msr	BASEPRI, r0
   39b20:	f3bf 8f6f 	isb	sy
	if ((data->async->rx_buf == NULL)) {
   39b24:	68e4      	ldr	r4, [r4, #12]
   39b26:	6d20      	ldr	r0, [r4, #80]	; 0x50
   39b28:	b190      	cbz	r0, 39b50 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   39b2a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   39b2c:	b998      	cbnz	r0, 39b56 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   39b2e:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   39b32:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   39b36:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   39b3a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   39b3e:	f042 0220 	orr.w	r2, r2, #32
   39b42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   39b46:	f385 8811 	msr	BASEPRI, r5
   39b4a:	f3bf 8f6f 	isb	sy
}
   39b4e:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   39b50:	f06f 000c 	mvn.w	r0, #12
   39b54:	e7f7      	b.n	39b46 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   39b56:	f06f 000f 	mvn.w	r0, #15
   39b5a:	e7f4      	b.n	39b46 <uarte_nrfx_rx_buf_rsp+0x3a>

00039b5c <uarte_nrfx_callback_set>:
	data->async->user_callback = callback;
   39b5c:	68c3      	ldr	r3, [r0, #12]
}
   39b5e:	2000      	movs	r0, #0
	data->async->user_callback = callback;
   39b60:	68db      	ldr	r3, [r3, #12]
	data->async->user_data = user_data;
   39b62:	e9c3 1200 	strd	r1, r2, [r3]
}
   39b66:	4770      	bx	lr

00039b68 <user_callback>:
	if (data->async->user_callback) {
   39b68:	68c3      	ldr	r3, [r0, #12]
   39b6a:	68da      	ldr	r2, [r3, #12]
   39b6c:	6813      	ldr	r3, [r2, #0]
   39b6e:	b10b      	cbz	r3, 39b74 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   39b70:	6852      	ldr	r2, [r2, #4]
   39b72:	4718      	bx	r3
}
   39b74:	4770      	bx	lr

00039b76 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   39b76:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   39b78:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   39b7a:	68d0      	ldr	r0, [r2, #12]
{
   39b7c:	b510      	push	{r4, lr}
	return config->uarte_regs;
   39b7e:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   39b80:	b958      	cbnz	r0, 39b9a <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   39b82:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   39b86:	b15c      	cbz	r4, 39ba0 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   39b88:	7d52      	ldrb	r2, [r2, #21]
   39b8a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   39b8c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   39b90:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39b94:	2201      	movs	r2, #1
   39b96:	601a      	str	r2, [r3, #0]
}
   39b98:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   39b9a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   39b9e:	e7fb      	b.n	39b98 <uarte_nrfx_poll_in+0x22>
		return -1;
   39ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39ba4:	e7f8      	b.n	39b98 <uarte_nrfx_poll_in+0x22>

00039ba6 <uarte_nrfx_tx>:
{
   39ba6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   39baa:	461d      	mov	r5, r3
	return config->uarte_regs;
   39bac:	6843      	ldr	r3, [r0, #4]
{
   39bae:	4617      	mov	r7, r2
	return config->uarte_regs;
   39bb0:	681c      	ldr	r4, [r3, #0]
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   39bb2:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (!nrfx_is_in_ram(buf)) {
   39bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
	struct uarte_nrfx_data *data = get_dev_data(dev);
   39bba:	68c6      	ldr	r6, [r0, #12]
	if (!nrfx_is_in_ram(buf)) {
   39bbc:	d158      	bne.n	39c70 <uarte_nrfx_tx+0xca>
	__asm__ volatile(
   39bbe:	f04f 0320 	mov.w	r3, #32
   39bc2:	f3ef 8911 	mrs	r9, BASEPRI
   39bc6:	f383 8811 	msr	BASEPRI, r3
   39bca:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   39bce:	68f3      	ldr	r3, [r6, #12]
   39bd0:	f8d3 800c 	ldr.w	r8, [r3, #12]
   39bd4:	f1b8 0f00 	cmp.w	r8, #0
   39bd8:	d008      	beq.n	39bec <uarte_nrfx_tx+0x46>
	__asm__ volatile(
   39bda:	f389 8811 	msr	BASEPRI, r9
   39bde:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   39be2:	f06f 000f 	mvn.w	r0, #15
}
   39be6:	b003      	add	sp, #12
   39be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data->async->tx_size = len;
   39bec:	60da      	str	r2, [r3, #12]
    p_reg->INTENSET = mask;
   39bee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   39bf2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	if (!is_tx_ready(dev)) {
   39bf6:	f7ff ff4b 	bl	39a90 <is_tx_ready>
   39bfa:	68f3      	ldr	r3, [r6, #12]
   39bfc:	bb20      	cbnz	r0, 39c48 <uarte_nrfx_tx+0xa2>
		data->async->pend_tx_buf = (uint8_t *)buf;
   39bfe:	6119      	str	r1, [r3, #16]
   39c00:	f389 8811 	msr	BASEPRI, r9
   39c04:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   39c08:	7af3      	ldrb	r3, [r6, #11]
   39c0a:	2b01      	cmp	r3, #1
   39c0c:	d11a      	bne.n	39c44 <uarte_nrfx_tx+0x9e>
	    && timeout != SYS_FOREVER_MS) {
   39c0e:	1c6b      	adds	r3, r5, #1
   39c10:	d018      	beq.n	39c44 <uarte_nrfx_tx+0x9e>
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   39c12:	68f4      	ldr	r4, [r6, #12]
   39c14:	f240 30e7 	movw	r0, #999	; 0x3e7
   39c18:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   39c1c:	2100      	movs	r1, #0
   39c1e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   39c22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39c26:	2300      	movs	r3, #0
   39c28:	fbc6 0105 	smlal	r0, r1, r6, r5
   39c2c:	f7e2 fdc4 	bl	1c7b8 <__aeabi_uldivmod>
   39c30:	3418      	adds	r4, #24
   39c32:	4602      	mov	r2, r0
   39c34:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   39c36:	2000      	movs	r0, #0
   39c38:	2100      	movs	r1, #0
   39c3a:	e9cd 0100 	strd	r0, r1, [sp]
   39c3e:	4620      	mov	r0, r4
   39c40:	f7fc fe96 	bl	36970 <z_impl_k_timer_start>
	return 0;
   39c44:	2000      	movs	r0, #0
   39c46:	e7ce      	b.n	39be6 <uarte_nrfx_tx+0x40>
		data->async->tx_amount = -1;
   39c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		data->async->tx_buf = buf;
   39c4c:	6099      	str	r1, [r3, #8]
		data->async->tx_amount = -1;
   39c4e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   39c52:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   39c56:	f8c4 7548 	str.w	r7, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   39c5a:	f8c4 8120 	str.w	r8, [r4, #288]	; 0x120
   39c5e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   39c62:	f8c4 8158 	str.w	r8, [r4, #344]	; 0x158
   39c66:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39c6a:	2301      	movs	r3, #1
   39c6c:	60a3      	str	r3, [r4, #8]
}
   39c6e:	e7c7      	b.n	39c00 <uarte_nrfx_tx+0x5a>
		return -ENOTSUP;
   39c70:	f06f 0085 	mvn.w	r0, #133	; 0x85
   39c74:	e7b7      	b.n	39be6 <uarte_nrfx_tx+0x40>

00039c76 <rx_timeout>:
{
   39c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39c7a:	b086      	sub	sp, #24
	return z_impl_k_timer_user_data_get(timer);
   39c7c:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   39c7e:	68f3      	ldr	r3, [r6, #12]
   39c80:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
   39c84:	f002 08ff 	and.w	r8, r2, #255	; 0xff
   39c88:	bb7a      	cbnz	r2, 39cea <rx_timeout+0x74>
    p_reg->INTENCLR = mask;
   39c8a:	2110      	movs	r1, #16
	const struct device *dev = data->dev;
   39c8c:	6837      	ldr	r7, [r6, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   39c8e:	6878      	ldr	r0, [r7, #4]
	return config->uarte_regs;
   39c90:	6802      	ldr	r2, [r0, #0]
   39c92:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	if (hw_rx_counting_enabled(data)) {
   39c96:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   39c9a:	b1e2      	cbz	r2, 39cd6 <rx_timeout+0x60>
		read = nrfx_timer_capture(&cfg->timer, 0);
   39c9c:	4641      	mov	r1, r8
   39c9e:	3008      	adds	r0, #8
   39ca0:	f000 fe69 	bl	3a976 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   39ca4:	68f4      	ldr	r4, [r6, #12]
   39ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   39ca8:	4283      	cmp	r3, r0
		data->async->rx_timeout_left = data->async->rx_timeout;
   39caa:	bf1c      	itt	ne
   39cac:	6ee3      	ldrne	r3, [r4, #108]	; 0x6c
		data->async->rx_total_byte_cnt = read;
   39cae:	6660      	strne	r0, [r4, #100]	; 0x64
		    - data->async->rx_total_user_byte_cnt;
   39cb0:	e9d4 5a19 	ldrd	r5, sl, [r4, #100]	; 0x64
   39cb4:	eba5 050a 	sub.w	r5, r5, sl
		data->async->rx_timeout_left = data->async->rx_timeout;
   39cb8:	bf18      	it	ne
   39cba:	6763      	strne	r3, [r4, #116]	; 0x74
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   39cbc:	e9d4 3915 	ldrd	r3, r9, [r4, #84]	; 0x54
   39cc0:	eb05 0209 	add.w	r2, r5, r9
   39cc4:	429a      	cmp	r2, r3
   39cc6:	d913      	bls.n	39cf0 <rx_timeout+0x7a>
		len = data->async->rx_buf_len - data->async->rx_offset;
   39cc8:	eba3 0509 	sub.w	r5, r3, r9
	if (len > 0) {
   39ccc:	2d00      	cmp	r5, #0
   39cce:	dd07      	ble.n	39ce0 <rx_timeout+0x6a>
		clipped = true;
   39cd0:	f04f 0801 	mov.w	r8, #1
   39cd4:	e012      	b.n	39cfc <rx_timeout+0x86>
		read = data->async->rx_cnt.cnt;
   39cd6:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   39cda:	e7e3      	b.n	39ca4 <rx_timeout+0x2e>
			data->async->rx_timeout_left -=
   39cdc:	1a9b      	subs	r3, r3, r2
   39cde:	6763      	str	r3, [r4, #116]	; 0x74
    p_reg->INTENSET = mask;
   39ce0:	2210      	movs	r2, #16
	return config->uarte_regs;
   39ce2:	687b      	ldr	r3, [r7, #4]
   39ce4:	681b      	ldr	r3, [r3, #0]
   39ce6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   39cea:	b006      	add	sp, #24
   39cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len > 0) {
   39cf0:	2d00      	cmp	r5, #0
   39cf2:	ddf5      	ble.n	39ce0 <rx_timeout+0x6a>
				< data->async->rx_timeout_slab)) {
   39cf4:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
		if (clipped ||
   39cf8:	4293      	cmp	r3, r2
   39cfa:	daef      	bge.n	39cdc <rx_timeout+0x66>
			struct uart_event evt = {
   39cfc:	2100      	movs	r1, #0
   39cfe:	2214      	movs	r2, #20
   39d00:	a801      	add	r0, sp, #4
   39d02:	f001 fb76 	bl	3b3f2 <memset>
   39d06:	2302      	movs	r3, #2
   39d08:	f88d 3004 	strb.w	r3, [sp, #4]
   39d0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   39d0e:	9504      	str	r5, [sp, #16]
   39d10:	e9cd 3902 	strd	r3, r9, [sp, #8]
			data->async->rx_offset += len;
   39d14:	eb09 0305 	add.w	r3, r9, r5
			data->async->rx_total_user_byte_cnt += len;
   39d18:	4455      	add	r5, sl
			user_callback(dev, &evt);
   39d1a:	4638      	mov	r0, r7
			data->async->rx_offset += len;
   39d1c:	65a3      	str	r3, [r4, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   39d1e:	66a5      	str	r5, [r4, #104]	; 0x68
			user_callback(dev, &evt);
   39d20:	a901      	add	r1, sp, #4
   39d22:	f7ff ff21 	bl	39b68 <user_callback>
		if (clipped) {
   39d26:	f1b8 0f00 	cmp.w	r8, #0
   39d2a:	d0d9      	beq.n	39ce0 <rx_timeout+0x6a>
			k_timer_stop(&data->async->rx_timeout_timer);
   39d2c:	68f0      	ldr	r0, [r6, #12]
   39d2e:	3078      	adds	r0, #120	; 0x78
	z_impl_k_timer_stop(timer);
   39d30:	f001 f976 	bl	3b020 <z_impl_k_timer_stop>
}
   39d34:	e7d4      	b.n	39ce0 <rx_timeout+0x6a>

00039d36 <uarte_nrfx_tx_abort>:
	return config->uarte_regs;
   39d36:	6843      	ldr	r3, [r0, #4]
{
   39d38:	b510      	push	{r4, lr}
	return config->uarte_regs;
   39d3a:	681c      	ldr	r4, [r3, #0]
	if (data->async->tx_buf == NULL) {
   39d3c:	68c3      	ldr	r3, [r0, #12]
   39d3e:	68d8      	ldr	r0, [r3, #12]
   39d40:	6883      	ldr	r3, [r0, #8]
   39d42:	b133      	cbz	r3, 39d52 <uarte_nrfx_tx_abort+0x1c>
	z_impl_k_timer_stop(timer);
   39d44:	3018      	adds	r0, #24
   39d46:	f001 f96b 	bl	3b020 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39d4a:	2301      	movs	r3, #1
	return 0;
   39d4c:	2000      	movs	r0, #0
   39d4e:	60e3      	str	r3, [r4, #12]
}
   39d50:	bd10      	pop	{r4, pc}
		return -EFAULT;
   39d52:	f06f 000d 	mvn.w	r0, #13
   39d56:	e7fb      	b.n	39d50 <uarte_nrfx_tx_abort+0x1a>

00039d58 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   39d58:	6b43      	ldr	r3, [r0, #52]	; 0x34
   39d5a:	6818      	ldr	r0, [r3, #0]
   39d5c:	f7ff bfeb 	b.w	39d36 <uarte_nrfx_tx_abort>

00039d60 <uarte_nrfx_rx_disable>:
{
   39d60:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   39d62:	68c5      	ldr	r5, [r0, #12]
	return config->uarte_regs;
   39d64:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   39d66:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   39d68:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   39d6a:	6d03      	ldr	r3, [r0, #80]	; 0x50
   39d6c:	b1b3      	cbz	r3, 39d9c <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   39d6e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   39d70:	b153      	cbz	r3, 39d88 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   39d72:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   39d76:	f023 0320 	bic.w	r3, r3, #32
   39d7a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   39d7e:	2300      	movs	r3, #0
   39d80:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   39d84:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   39d88:	3078      	adds	r0, #120	; 0x78
   39d8a:	f001 f949 	bl	3b020 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   39d8e:	2000      	movs	r0, #0
   39d90:	68eb      	ldr	r3, [r5, #12]
   39d92:	f883 00b8 	strb.w	r0, [r3, #184]	; 0xb8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39d96:	2301      	movs	r3, #1
   39d98:	6063      	str	r3, [r4, #4]
}
   39d9a:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   39d9c:	f06f 000d 	mvn.w	r0, #13
   39da0:	e7fb      	b.n	39d9a <uarte_nrfx_rx_disable+0x3a>

00039da2 <uarte_nrfx_pm_control>:
{
   39da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   39da6:	68c7      	ldr	r7, [r0, #12]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   39da8:	2901      	cmp	r1, #1
{
   39daa:	4698      	mov	r8, r3
   39dac:	4605      	mov	r5, r0
   39dae:	4616      	mov	r6, r2
   39db0:	693b      	ldr	r3, [r7, #16]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   39db2:	d159      	bne.n	39e68 <uarte_nrfx_pm_control+0xc6>
		uint32_t new_state = *((const uint32_t *)context);
   39db4:	6812      	ldr	r2, [r2, #0]
		if (new_state != data->pm_state) {
   39db6:	429a      	cmp	r2, r3
   39db8:	d01e      	beq.n	39df8 <uarte_nrfx_pm_control+0x56>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   39dba:	f8d0 c004 	ldr.w	ip, [r0, #4]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
   39dbe:	2a01      	cmp	r2, #1
	return config->uarte_regs;
   39dc0:	f8dc 4000 	ldr.w	r4, [ip]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
   39dc4:	d123      	bne.n	39e0e <uarte_nrfx_pm_control+0x6c>
		uarte_nrfx_pins_enable(dev, true);
   39dc6:	f7ef fbd1 	bl	2956c <uarte_nrfx_pins_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   39dca:	2308      	movs	r3, #8
   39dcc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   39dd0:	68eb      	ldr	r3, [r5, #12]
		return data->async->hw_rx_counting;
   39dd2:	68db      	ldr	r3, [r3, #12]
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   39dd4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   39dd8:	b11b      	cbz	r3, 39de2 <uarte_nrfx_pm_control+0x40>
			nrfx_timer_enable(&get_dev_config(dev)->timer);
   39dda:	6868      	ldr	r0, [r5, #4]
   39ddc:	3008      	adds	r0, #8
   39dde:	f7fb fa89 	bl	352f4 <nrfx_timer_enable>
		if (get_dev_data(dev)->async) {
   39de2:	68eb      	ldr	r3, [r5, #12]
   39de4:	68db      	ldr	r3, [r3, #12]
   39de6:	b93b      	cbnz	r3, 39df8 <uarte_nrfx_pm_control+0x56>
    return p_reg->PSEL.RXD;
   39de8:	f8d4 3514 	ldr.w	r3, [r4, #1300]	; 0x514
		if (nrf_uarte_rx_pin_get(uarte) !=
   39dec:	3301      	adds	r3, #1
   39dee:	f04f 0301 	mov.w	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39df2:	bf18      	it	ne
   39df4:	6023      	strne	r3, [r4, #0]
		data->pm_state = new_state;
   39df6:	613b      	str	r3, [r7, #16]
	if (cb) {
   39df8:	f1b8 0f00 	cmp.w	r8, #0
   39dfc:	d004      	beq.n	39e08 <uarte_nrfx_pm_control+0x66>
		cb(dev, 0, context, arg);
   39dfe:	4632      	mov	r2, r6
   39e00:	2100      	movs	r1, #0
   39e02:	4628      	mov	r0, r5
   39e04:	9b06      	ldr	r3, [sp, #24]
   39e06:	47c0      	blx	r8
}
   39e08:	2000      	movs	r0, #0
   39e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
   39e0e:	2b01      	cmp	r3, #1
   39e10:	d1f2      	bne.n	39df8 <uarte_nrfx_pm_control+0x56>
		return data->async->hw_rx_counting;
   39e12:	68fb      	ldr	r3, [r7, #12]
		data->pm_state = new_state;
   39e14:	613a      	str	r2, [r7, #16]
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   39e16:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   39e1a:	b13b      	cbz	r3, 39e2c <uarte_nrfx_pm_control+0x8a>
			nrfx_timer_disable(&get_dev_config(dev)->timer);
   39e1c:	f10c 0008 	add.w	r0, ip, #8
   39e20:	f7fb fa76 	bl	35310 <nrfx_timer_disable>
			data->async->rx_total_byte_cnt = 0;
   39e24:	2200      	movs	r2, #0
   39e26:	68fb      	ldr	r3, [r7, #12]
			data->async->rx_total_user_byte_cnt = 0;
   39e28:	e9c3 2219 	strd	r2, r2, [r3, #100]	; 0x64
		if (get_dev_data(dev)->async) {
   39e2c:	68eb      	ldr	r3, [r5, #12]
   39e2e:	68db      	ldr	r3, [r3, #12]
   39e30:	b133      	cbz	r3, 39e40 <uarte_nrfx_pm_control+0x9e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   39e32:	2100      	movs	r1, #0
		uarte_nrfx_pins_enable(dev, false);
   39e34:	4628      	mov	r0, r5
   39e36:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   39e3a:	f7ef fb97 	bl	2956c <uarte_nrfx_pins_enable>
   39e3e:	e7db      	b.n	39df8 <uarte_nrfx_pm_control+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   39e40:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   39e44:	2b00      	cmp	r3, #0
   39e46:	d0f4      	beq.n	39e32 <uarte_nrfx_pm_control+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39e48:	2301      	movs	r3, #1
   39e4a:	6063      	str	r3, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   39e4c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
			while (!nrf_uarte_event_check(uarte,
   39e50:	2b00      	cmp	r3, #0
   39e52:	d0fb      	beq.n	39e4c <uarte_nrfx_pm_control+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   39e54:	2300      	movs	r3, #0
   39e56:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   39e5a:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   39e5e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   39e62:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
}
   39e66:	e7e4      	b.n	39e32 <uarte_nrfx_pm_control+0x90>
		*((uint32_t *)context) = data->pm_state;
   39e68:	6013      	str	r3, [r2, #0]
   39e6a:	e7c5      	b.n	39df8 <uarte_nrfx_pm_control+0x56>

00039e6c <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   39e6c:	2000      	movs	r0, #0
   39e6e:	4770      	bx	lr

00039e70 <entropy_cc3xx_rng_get_entropy>:
{
   39e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39e74:	460f      	mov	r7, r1
   39e76:	4614      	mov	r4, r2
	size_t offset = 0;
   39e78:	2600      	movs	r6, #0
	int res = -EINVAL;
   39e7a:	f06f 0515 	mvn.w	r5, #21
{
   39e7e:	b0a6      	sub	sp, #152	; 0x98
	while (length > 0) {
   39e80:	b91c      	cbnz	r4, 39e8a <entropy_cc3xx_rng_get_entropy+0x1a>
}
   39e82:	4628      	mov	r0, r5
   39e84:	b026      	add	sp, #152	; 0x98
   39e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   39e8a:	2190      	movs	r1, #144	; 0x90
   39e8c:	aa01      	add	r2, sp, #4
   39e8e:	a802      	add	r0, sp, #8
   39e90:	f7ff f972 	bl	39178 <spm_request_random_number>
		if (res < 0) {
   39e94:	1e05      	subs	r5, r0, #0
   39e96:	dbf4      	blt.n	39e82 <entropy_cc3xx_rng_get_entropy+0x12>
		if (olen != sizeof(spm_buf)) {
   39e98:	9b01      	ldr	r3, [sp, #4]
   39e9a:	2b90      	cmp	r3, #144	; 0x90
   39e9c:	d10e      	bne.n	39ebc <entropy_cc3xx_rng_get_entropy+0x4c>
		to_copy = MIN(length, sizeof(spm_buf));
   39e9e:	2c90      	cmp	r4, #144	; 0x90
   39ea0:	46a0      	mov	r8, r4
   39ea2:	bf28      	it	cs
   39ea4:	f04f 0890 	movcs.w	r8, #144	; 0x90
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   39ea8:	19b8      	adds	r0, r7, r6
   39eaa:	4642      	mov	r2, r8
   39eac:	a902      	add	r1, sp, #8
		length -= to_copy;
   39eae:	eba4 0408 	sub.w	r4, r4, r8
   39eb2:	f001 fa7e 	bl	3b3b2 <memcpy>
   39eb6:	b2a4      	uxth	r4, r4
		offset += to_copy;
   39eb8:	4446      	add	r6, r8
   39eba:	e7e1      	b.n	39e80 <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   39ebc:	f06f 0515 	mvn.w	r5, #21
   39ec0:	e7df      	b.n	39e82 <entropy_cc3xx_rng_get_entropy+0x12>

00039ec2 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   39ec2:	4668      	mov	r0, sp
   39ec4:	f020 0107 	bic.w	r1, r0, #7
   39ec8:	468d      	mov	sp, r1
   39eca:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   39ecc:	f7f3 f900 	bl	2d0d0 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   39ed0:	f7eb fec6 	bl	25c60 <_arch_isr_direct_pm>
   39ed4:	f7ec fa46 	bl	26364 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   39ed8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   39edc:	4685      	mov	sp, r0
   39ede:	4770      	bx	lr

00039ee0 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   39ee0:	4668      	mov	r0, sp
   39ee2:	f020 0107 	bic.w	r1, r0, #7
   39ee6:	468d      	mov	sp, r1
   39ee8:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   39eea:	f7f3 fc97 	bl	2d81c <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   39eee:	f7eb feb7 	bl	25c60 <_arch_isr_direct_pm>
   39ef2:	f7ec fa37 	bl	26364 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   39ef6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   39efa:	4685      	mov	sp, r0
   39efc:	4770      	bx	lr

00039efe <trace_task_create>:
{
   39efe:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   39f00:	201d      	movs	r0, #29
   39f02:	2200      	movs	r2, #0
   39f04:	2106      	movs	r1, #6
   39f06:	f7eb fe95 	bl	25c34 <z_arm_irq_priority_set>
}
   39f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   39f0e:	201d      	movs	r0, #29
   39f10:	f7eb be5e 	b.w	25bd0 <arch_irq_enable>

00039f14 <read_task_create>:
{
   39f14:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   39f16:	201c      	movs	r0, #28
   39f18:	2200      	movs	r2, #0
   39f1a:	2106      	movs	r1, #6
   39f1c:	f7eb fe8a 	bl	25c34 <z_arm_irq_priority_set>
}
   39f20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   39f24:	201c      	movs	r0, #28
   39f26:	f7eb be53 	b.w	25bd0 <arch_irq_enable>

00039f2a <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   39f2a:	2000      	movs	r0, #0
   39f2c:	4770      	bx	lr

00039f2e <z_to_nrf_flags>:
{
   39f2e:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   39f30:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   39f34:	bf18      	it	ne
   39f36:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   39f38:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   39f3a:	bf48      	it	mi
   39f3c:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   39f40:	06da      	lsls	r2, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   39f42:	bf48      	it	mi
   39f44:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   39f48:	069b      	lsls	r3, r3, #26
		nrf_flags |= NRF_MSG_WAITALL;
   39f4a:	bf48      	it	mi
   39f4c:	f040 0010 	orrmi.w	r0, r0, #16
}
   39f50:	4770      	bx	lr

00039f52 <z_to_nrf_family>:
	switch (z_family) {
   39f52:	2806      	cmp	r0, #6
   39f54:	d80a      	bhi.n	39f6c <z_to_nrf_family+0x1a>
   39f56:	b198      	cbz	r0, 39f80 <z_to_nrf_family+0x2e>
   39f58:	3801      	subs	r0, #1
   39f5a:	2805      	cmp	r0, #5
   39f5c:	d810      	bhi.n	39f80 <z_to_nrf_family+0x2e>
   39f5e:	e8df f000 	tbb	[pc, r0]
   39f62:	0312      	.short	0x0312
   39f64:	0b0f0f0d 	.word	0x0b0f0f0d
   39f68:	200a      	movs	r0, #10
   39f6a:	4770      	bx	lr
   39f6c:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   39f6e:	bf14      	ite	ne
   39f70:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   39f74:	2066      	moveq	r0, #102	; 0x66
   39f76:	4770      	bx	lr
		return NRF_AF_LOCAL;
   39f78:	2001      	movs	r0, #1
   39f7a:	4770      	bx	lr
		return NRF_AF_PACKET;
   39f7c:	2005      	movs	r0, #5
   39f7e:	4770      	bx	lr
		return -EAFNOSUPPORT;
   39f80:	f06f 0069 	mvn.w	r0, #105	; 0x69
   39f84:	4770      	bx	lr
		return NRF_AF_INET;
   39f86:	2002      	movs	r0, #2
}
   39f88:	4770      	bx	lr

00039f8a <z_to_nrf_protocol>:
	switch (proto) {
   39f8a:	f240 1311 	movw	r3, #273	; 0x111
   39f8e:	4298      	cmp	r0, r3
   39f90:	d023      	beq.n	39fda <z_to_nrf_protocol+0x50>
   39f92:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   39f96:	da11      	bge.n	39fbc <z_to_nrf_protocol+0x32>
   39f98:	2811      	cmp	r0, #17
   39f9a:	d021      	beq.n	39fe0 <z_to_nrf_protocol+0x56>
   39f9c:	dc06      	bgt.n	39fac <z_to_nrf_protocol+0x22>
   39f9e:	b300      	cbz	r0, 39fe2 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   39fa0:	2806      	cmp	r0, #6
   39fa2:	bf14      	ite	ne
   39fa4:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   39fa8:	2001      	moveq	r0, #1
   39faa:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   39fac:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   39fb0:	bf14      	ite	ne
   39fb2:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   39fb6:	f44f 7082 	moveq.w	r0, #260	; 0x104
   39fba:	4770      	bx	lr
	switch (proto) {
   39fbc:	f240 2302 	movw	r3, #514	; 0x202
   39fc0:	4298      	cmp	r0, r3
   39fc2:	d00e      	beq.n	39fe2 <z_to_nrf_protocol+0x58>
   39fc4:	f240 2303 	movw	r3, #515	; 0x203
   39fc8:	4298      	cmp	r0, r3
   39fca:	d00a      	beq.n	39fe2 <z_to_nrf_protocol+0x58>
   39fcc:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   39fd0:	4298      	cmp	r0, r3
   39fd2:	bf18      	it	ne
   39fd4:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   39fd8:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   39fda:	f44f 7087 	mov.w	r0, #270	; 0x10e
   39fde:	4770      	bx	lr
	switch (proto) {
   39fe0:	2002      	movs	r0, #2
}
   39fe2:	4770      	bx	lr

00039fe4 <nrf91_socket_is_supported>:
}
   39fe4:	2001      	movs	r0, #1
   39fe6:	4770      	bx	lr

00039fe8 <nrf91_bsdlib_socket_offload_init>:
}
   39fe8:	2000      	movs	r0, #0
   39fea:	4770      	bx	lr

00039fec <nrf91_socket_offload_getsockopt>:
{
   39fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39ff0:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   39ff2:	2300      	movs	r3, #0
{
   39ff4:	b086      	sub	sp, #24
   39ff6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   39ffa:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   39ffe:	f8d8 3000 	ldr.w	r3, [r8]
{
   3a002:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3a004:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3a006:	f240 2302 	movw	r3, #514	; 0x202
   3a00a:	4299      	cmp	r1, r3
{
   3a00c:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   3a00e:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   3a012:	d005      	beq.n	3a020 <nrf91_socket_offload_getsockopt+0x34>
   3a014:	dc30      	bgt.n	3a078 <nrf91_socket_offload_getsockopt+0x8c>
   3a016:	2901      	cmp	r1, #1
   3a018:	d002      	beq.n	3a020 <nrf91_socket_offload_getsockopt+0x34>
   3a01a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3a01e:	d13c      	bne.n	3a09a <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3a020:	4631      	mov	r1, r6
   3a022:	4620      	mov	r0, r4
   3a024:	aa02      	add	r2, sp, #8
   3a026:	f7ef fe31 	bl	29c8c <z_to_nrf_optname>
   3a02a:	2800      	cmp	r0, #0
   3a02c:	db35      	blt.n	3a09a <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3a02e:	2c01      	cmp	r4, #1
   3a030:	d126      	bne.n	3a080 <nrf91_socket_offload_getsockopt+0x94>
   3a032:	f1a6 0314 	sub.w	r3, r6, #20
   3a036:	2b01      	cmp	r3, #1
   3a038:	d822      	bhi.n	3a080 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   3a03a:	2308      	movs	r3, #8
   3a03c:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   3a03e:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3a040:	aa03      	add	r2, sp, #12
   3a042:	4638      	mov	r0, r7
   3a044:	9200      	str	r2, [sp, #0]
   3a046:	4621      	mov	r1, r4
   3a048:	9a02      	ldr	r2, [sp, #8]
   3a04a:	f7f9 fa17 	bl	3347c <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3a04e:	4607      	mov	r7, r0
   3a050:	b970      	cbnz	r0, 3a070 <nrf91_socket_offload_getsockopt+0x84>
   3a052:	b16d      	cbz	r5, 3a070 <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   3a054:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3a056:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   3a058:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3a05c:	d108      	bne.n	3a070 <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   3a05e:	2e04      	cmp	r6, #4
   3a060:	d110      	bne.n	3a084 <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   3a062:	6828      	ldr	r0, [r5, #0]
   3a064:	f7ef fc68 	bl	29938 <bsd_os_errno_set>
				*(int *)optval = errno;
   3a068:	f7ff f92d 	bl	392c6 <__errno>
   3a06c:	6803      	ldr	r3, [r0, #0]
   3a06e:	602b      	str	r3, [r5, #0]
}
   3a070:	4638      	mov	r0, r7
   3a072:	b006      	add	sp, #24
   3a074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3a078:	f240 2303 	movw	r3, #515	; 0x203
   3a07c:	4299      	cmp	r1, r3
   3a07e:	e7ce      	b.n	3a01e <nrf91_socket_offload_getsockopt+0x32>
   3a080:	462b      	mov	r3, r5
   3a082:	e7dd      	b.n	3a040 <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   3a084:	3e14      	subs	r6, #20
   3a086:	2e01      	cmp	r6, #1
   3a088:	d8f2      	bhi.n	3a070 <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   3a08a:	9b04      	ldr	r3, [sp, #16]
   3a08c:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   3a08e:	9b05      	ldr	r3, [sp, #20]
   3a090:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   3a092:	2308      	movs	r3, #8
   3a094:	f8c8 3000 	str.w	r3, [r8]
   3a098:	e7ea      	b.n	3a070 <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   3a09a:	f7ff f914 	bl	392c6 <__errno>
   3a09e:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3a0a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   3a0a4:	6003      	str	r3, [r0, #0]
	return retval;
   3a0a6:	e7e3      	b.n	3a070 <nrf91_socket_offload_getsockopt+0x84>

0003a0a8 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3a0a8:	3801      	subs	r0, #1
   3a0aa:	f7f9 b993 	b.w	333d4 <nrf_listen>

0003a0ae <nrf91_socket_offload_close>:
	return nrf_close(sd);
   3a0ae:	3801      	subs	r0, #1
   3a0b0:	f7f9 b904 	b.w	332bc <nrf_close>

0003a0b4 <nrf91_socket_offload_freeaddrinfo>:
{
   3a0b4:	b538      	push	{r3, r4, r5, lr}
   3a0b6:	4604      	mov	r4, r0
	while (next != NULL) {
   3a0b8:	b904      	cbnz	r4, 3a0bc <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3a0ba:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3a0bc:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   3a0be:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   3a0c0:	f001 f93a 	bl	3b338 <k_free>
		k_free(this);
   3a0c4:	4620      	mov	r0, r4
   3a0c6:	f001 f937 	bl	3b338 <k_free>
		next = next->ai_next;
   3a0ca:	462c      	mov	r4, r5
   3a0cc:	e7f4      	b.n	3a0b8 <nrf91_socket_offload_freeaddrinfo+0x4>

0003a0ce <z_to_nrf_addrinfo_hints>:
{
   3a0ce:	b538      	push	{r3, r4, r5, lr}
   3a0d0:	460c      	mov	r4, r1
   3a0d2:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   3a0d4:	221c      	movs	r2, #28
   3a0d6:	2100      	movs	r1, #0
   3a0d8:	1d20      	adds	r0, r4, #4
   3a0da:	f001 f98a 	bl	3b3f2 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3a0de:	2300      	movs	r3, #0
   3a0e0:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3a0e2:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   3a0e4:	2b03      	cmp	r3, #3
   3a0e6:	d003      	beq.n	3a0f0 <z_to_nrf_addrinfo_hints+0x22>
   3a0e8:	2b04      	cmp	r3, #4
   3a0ea:	bf08      	it	eq
   3a0ec:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   3a0f0:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3a0f2:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   3a0f4:	f7ff ff2d 	bl	39f52 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3a0f8:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   3a0fc:	d00b      	beq.n	3a116 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   3a0fe:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3a100:	6928      	ldr	r0, [r5, #16]
   3a102:	f7ff ff42 	bl	39f8a <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3a106:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3a10a:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3a10c:	d003      	beq.n	3a116 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   3a10e:	69e8      	ldr	r0, [r5, #28]
   3a110:	b108      	cbz	r0, 3a116 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   3a112:	61a0      	str	r0, [r4, #24]
	return 0;
   3a114:	2000      	movs	r0, #0
}
   3a116:	bd38      	pop	{r3, r4, r5, pc}

0003a118 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3a118:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3a11a:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3a11c:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3a11e:	4603      	mov	r3, r0
{
   3a120:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3a122:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3a126:	f101 0420 	add.w	r4, r1, #32
   3a12a:	f101 0210 	add.w	r2, r1, #16
   3a12e:	f852 5b04 	ldr.w	r5, [r2], #4
   3a132:	42a2      	cmp	r2, r4
   3a134:	f843 5b04 	str.w	r5, [r3], #4
   3a138:	d1f9      	bne.n	3a12e <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   3a13a:	6a0b      	ldr	r3, [r1, #32]
   3a13c:	7503      	strb	r3, [r0, #20]
}
   3a13e:	bd30      	pop	{r4, r5, pc}

0003a140 <nrf91_socket_offload_recvfrom>:
{
   3a140:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   3a142:	1e45      	subs	r5, r0, #1
{
   3a144:	b08f      	sub	sp, #60	; 0x3c
   3a146:	4618      	mov	r0, r3
   3a148:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   3a14c:	e9cd 2102 	strd	r2, r1, [sp, #8]
   3a150:	f7ff feed 	bl	39f2e <z_to_nrf_flags>
	if (from == NULL) {
   3a154:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   3a158:	4603      	mov	r3, r0
   3a15a:	b944      	cbnz	r4, 3a16e <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3a15c:	4628      	mov	r0, r5
   3a15e:	e9cd 4400 	strd	r4, r4, [sp]
   3a162:	f7f9 f8ef 	bl	33344 <nrf_recvfrom>
   3a166:	4605      	mov	r5, r0
}
   3a168:	4628      	mov	r0, r5
   3a16a:	b00f      	add	sp, #60	; 0x3c
   3a16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3a16e:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3a170:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3a172:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3a174:	a804      	add	r0, sp, #16
   3a176:	9001      	str	r0, [sp, #4]
   3a178:	9700      	str	r7, [sp, #0]
   3a17a:	4628      	mov	r0, r5
   3a17c:	f7f9 f8e2 	bl	33344 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   3a180:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3a182:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   3a184:	2b02      	cmp	r3, #2
   3a186:	d109      	bne.n	3a19c <nrf91_socket_offload_recvfrom+0x5c>
	ptr->sin_port = nrf_in->sin_port;
   3a188:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   3a18c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   3a18e:	2301      	movs	r3, #1
   3a190:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3a192:	9b08      	ldr	r3, [sp, #32]
   3a194:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3a196:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   3a198:	6033      	str	r3, [r6, #0]
	return retval;
   3a19a:	e7e5      	b.n	3a168 <nrf91_socket_offload_recvfrom+0x28>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3a19c:	2b0a      	cmp	r3, #10
   3a19e:	d1e3      	bne.n	3a168 <nrf91_socket_offload_recvfrom+0x28>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3a1a0:	4639      	mov	r1, r7
   3a1a2:	4620      	mov	r0, r4
   3a1a4:	f7ff ffb8 	bl	3a118 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3a1a8:	2318      	movs	r3, #24
   3a1aa:	e7f5      	b.n	3a198 <nrf91_socket_offload_recvfrom+0x58>

0003a1ac <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3a1ac:	2300      	movs	r3, #0
{
   3a1ae:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3a1b0:	e9cd 3300 	strd	r3, r3, [sp]
   3a1b4:	f7ff ffc4 	bl	3a140 <nrf91_socket_offload_recvfrom>
}
   3a1b8:	b003      	add	sp, #12
   3a1ba:	f85d fb04 	ldr.w	pc, [sp], #4

0003a1be <nrf91_socket_offload_getaddrinfo>:
{
   3a1be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3a1c2:	4614      	mov	r4, r2
   3a1c4:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   3a1c6:	2100      	movs	r1, #0
{
   3a1c8:	b093      	sub	sp, #76	; 0x4c
   3a1ca:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   3a1cc:	2220      	movs	r2, #32
   3a1ce:	a802      	add	r0, sp, #8
{
   3a1d0:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   3a1d2:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   3a1d4:	f001 f90d 	bl	3b3f2 <memset>
	if (hints != NULL) {
   3a1d8:	b194      	cbz	r4, 3a200 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   3a1da:	4620      	mov	r0, r4
   3a1dc:	a902      	add	r1, sp, #8
   3a1de:	f7ff ff76 	bl	3a0ce <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   3a1e2:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   3a1e6:	f000 80d0 	beq.w	3a38a <nrf91_socket_offload_getaddrinfo+0x1cc>
		} else if (error == -EAFNOSUPPORT) {
   3a1ea:	306a      	adds	r0, #106	; 0x6a
   3a1ec:	f000 80d0 	beq.w	3a390 <nrf91_socket_offload_getaddrinfo+0x1d2>
		if (hints->ai_next != NULL) {
   3a1f0:	6820      	ldr	r0, [r4, #0]
   3a1f2:	b120      	cbz	r0, 3a1fe <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   3a1f4:	ac0a      	add	r4, sp, #40	; 0x28
   3a1f6:	4621      	mov	r1, r4
   3a1f8:	f7ff ff69 	bl	3a0ce <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   3a1fc:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   3a1fe:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   3a200:	4628      	mov	r0, r5
   3a202:	4622      	mov	r2, r4
   3a204:	4631      	mov	r1, r6
   3a206:	ab01      	add	r3, sp, #4
   3a208:	f7f9 f954 	bl	334b4 <nrf_getaddrinfo>
	if (retval != 0) {
   3a20c:	4605      	mov	r5, r0
   3a20e:	b300      	cbz	r0, 3a252 <nrf91_socket_offload_getaddrinfo+0x94>
	switch (nrf_error) {
   3a210:	282f      	cmp	r0, #47	; 0x2f
   3a212:	f000 80c0 	beq.w	3a396 <nrf91_socket_offload_getaddrinfo+0x1d8>
   3a216:	dc0c      	bgt.n	3a232 <nrf91_socket_offload_getaddrinfo+0x74>
   3a218:	280c      	cmp	r0, #12
   3a21a:	f000 80bf 	beq.w	3a39c <nrf91_socket_offload_getaddrinfo+0x1de>
		return DNS_EAI_AGAIN;
   3a21e:	2823      	cmp	r0, #35	; 0x23
   3a220:	bf14      	ite	ne
   3a222:	f06f 050a 	mvnne.w	r5, #10
   3a226:	f06f 0502 	mvneq.w	r5, #2
}
   3a22a:	4628      	mov	r0, r5
   3a22c:	b013      	add	sp, #76	; 0x4c
   3a22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   3a232:	2833      	cmp	r0, #51	; 0x33
   3a234:	d006      	beq.n	3a244 <nrf91_socket_offload_getaddrinfo+0x86>
		return DNS_EAI_INPROGRESS;
   3a236:	2873      	cmp	r0, #115	; 0x73
   3a238:	bf14      	ite	ne
   3a23a:	f06f 050a 	mvnne.w	r5, #10
   3a23e:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   3a242:	e7f2      	b.n	3a22a <nrf91_socket_offload_getaddrinfo+0x6c>
		errno = ENETUNREACH;
   3a244:	f7ff f83f 	bl	392c6 <__errno>
   3a248:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   3a24a:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   3a24e:	6003      	str	r3, [r0, #0]
   3a250:	e7eb      	b.n	3a22a <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   3a252:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   3a254:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   3a256:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   3a258:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   3a25a:	b91e      	cbnz	r6, 3a264 <nrf91_socket_offload_getaddrinfo+0xa6>
	nrf_freeaddrinfo(nrf_res);
   3a25c:	9801      	ldr	r0, [sp, #4]
   3a25e:	f7f9 f92b 	bl	334b8 <nrf_freeaddrinfo>
	return retval;
   3a262:	e7e2      	b.n	3a22a <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   3a264:	2050      	movs	r0, #80	; 0x50
   3a266:	f7fc fc63 	bl	36b30 <k_malloc>
		if (next_z_res == NULL) {
   3a26a:	4604      	mov	r4, r0
   3a26c:	2800      	cmp	r0, #0
   3a26e:	f000 8081 	beq.w	3a374 <nrf91_socket_offload_getaddrinfo+0x1b6>
	family = nrf_to_z_family(nrf_in->ai_family);
   3a272:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   3a274:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   3a276:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   3a278:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   3a27c:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   3a280:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   3a284:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   3a286:	dc23      	bgt.n	3a2d0 <nrf91_socket_offload_getaddrinfo+0x112>
   3a288:	2900      	cmp	r1, #0
   3a28a:	dd23      	ble.n	3a2d4 <nrf91_socket_offload_getaddrinfo+0x116>
   3a28c:	1e4b      	subs	r3, r1, #1
   3a28e:	2b09      	cmp	r3, #9
   3a290:	d820      	bhi.n	3a2d4 <nrf91_socket_offload_getaddrinfo+0x116>
   3a292:	e8df f003 	tbb	[pc, r3]
   3a296:	2905      	.short	0x2905
   3a298:	1f251f1f 	.word	0x1f251f1f
   3a29c:	271f1f1f 	.word	0x271f1f1f
		return AF_LOCAL;
   3a2a0:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3a2a2:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   3a2a4:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   3a2a6:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   3a2aa:	d04b      	beq.n	3a344 <nrf91_socket_offload_getaddrinfo+0x186>
   3a2ac:	dc26      	bgt.n	3a2fc <nrf91_socket_offload_getaddrinfo+0x13e>
   3a2ae:	2a02      	cmp	r2, #2
   3a2b0:	d04c      	beq.n	3a34c <nrf91_socket_offload_getaddrinfo+0x18e>
   3a2b2:	dc1d      	bgt.n	3a2f0 <nrf91_socket_offload_getaddrinfo+0x132>
   3a2b4:	b372      	cbz	r2, 3a314 <nrf91_socket_offload_getaddrinfo+0x156>
   3a2b6:	2a01      	cmp	r2, #1
   3a2b8:	d04a      	beq.n	3a350 <nrf91_socket_offload_getaddrinfo+0x192>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3a2ba:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   3a2be:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   3a2c0:	2300      	movs	r3, #0
   3a2c2:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   3a2c4:	4620      	mov	r0, r4
   3a2c6:	f001 f837 	bl	3b338 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   3a2ca:	f06f 0506 	mvn.w	r5, #6
   3a2ce:	e053      	b.n	3a378 <nrf91_socket_offload_getaddrinfo+0x1ba>
	switch (nrf_family) {
   3a2d0:	2966      	cmp	r1, #102	; 0x66
   3a2d2:	d00b      	beq.n	3a2ec <nrf91_socket_offload_getaddrinfo+0x12e>
			k_free(next_z_res);
   3a2d4:	4620      	mov	r0, r4
   3a2d6:	f001 f82f 	bl	3b338 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   3a2da:	f06f 0508 	mvn.w	r5, #8
   3a2de:	e04b      	b.n	3a378 <nrf91_socket_offload_getaddrinfo+0x1ba>
		return AF_PACKET;
   3a2e0:	2303      	movs	r3, #3
   3a2e2:	e7de      	b.n	3a2a2 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_INET6;
   3a2e4:	2302      	movs	r3, #2
   3a2e6:	e7dc      	b.n	3a2a2 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (nrf_family) {
   3a2e8:	2301      	movs	r3, #1
   3a2ea:	e7da      	b.n	3a2a2 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_LTE;
   3a2ec:	460b      	mov	r3, r1
   3a2ee:	e7d8      	b.n	3a2a2 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (proto) {
   3a2f0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   3a2f4:	d1e1      	bne.n	3a2ba <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3a2f6:	f44f 7381 	mov.w	r3, #258	; 0x102
   3a2fa:	e025      	b.n	3a348 <nrf91_socket_offload_getaddrinfo+0x18a>
	switch (proto) {
   3a2fc:	f240 2302 	movw	r3, #514	; 0x202
   3a300:	429a      	cmp	r2, r3
   3a302:	d007      	beq.n	3a314 <nrf91_socket_offload_getaddrinfo+0x156>
   3a304:	f240 2303 	movw	r3, #515	; 0x203
   3a308:	429a      	cmp	r2, r3
   3a30a:	d003      	beq.n	3a314 <nrf91_socket_offload_getaddrinfo+0x156>
   3a30c:	f240 2301 	movw	r3, #513	; 0x201
   3a310:	429a      	cmp	r2, r3
   3a312:	d1d2      	bne.n	3a2ba <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3a314:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   3a316:	2902      	cmp	r1, #2
   3a318:	d11c      	bne.n	3a354 <nrf91_socket_offload_getaddrinfo+0x196>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   3a31a:	2008      	movs	r0, #8
   3a31c:	f7fc fc08 	bl	36b30 <k_malloc>
   3a320:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   3a322:	b320      	cbz	r0, 3a36e <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   3a324:	2308      	movs	r3, #8
   3a326:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   3a328:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   3a32a:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3a32c:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   3a32e:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   3a330:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3a332:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   3a334:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   3a336:	f1b8 0f00 	cmp.w	r8, #0
   3a33a:	d123      	bne.n	3a384 <nrf91_socket_offload_getaddrinfo+0x1c6>
			*res = next_z_res;
   3a33c:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   3a33e:	46a0      	mov	r8, r4
   3a340:	69f6      	ldr	r6, [r6, #28]
   3a342:	e78a      	b.n	3a25a <nrf91_socket_offload_getaddrinfo+0x9c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3a344:	f240 1311 	movw	r3, #273	; 0x111
   3a348:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   3a34a:	e7e4      	b.n	3a316 <nrf91_socket_offload_getaddrinfo+0x158>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3a34c:	2311      	movs	r3, #17
   3a34e:	e7fb      	b.n	3a348 <nrf91_socket_offload_getaddrinfo+0x18a>
   3a350:	2306      	movs	r3, #6
   3a352:	e7f9      	b.n	3a348 <nrf91_socket_offload_getaddrinfo+0x18a>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   3a354:	290a      	cmp	r1, #10
   3a356:	d1b5      	bne.n	3a2c4 <nrf91_socket_offload_getaddrinfo+0x106>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   3a358:	2018      	movs	r0, #24
   3a35a:	f7fc fbe9 	bl	36b30 <k_malloc>
   3a35e:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   3a360:	b128      	cbz	r0, 3a36e <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   3a362:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   3a364:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   3a366:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   3a368:	f7ff fed6 	bl	3a118 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   3a36c:	e7e3      	b.n	3a336 <nrf91_socket_offload_getaddrinfo+0x178>
			k_free(next_z_res);
   3a36e:	4620      	mov	r0, r4
   3a370:	f000 ffe2 	bl	3b338 <k_free>
			retval = DNS_EAI_MEMORY;
   3a374:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   3a378:	6838      	ldr	r0, [r7, #0]
   3a37a:	f7ff fe9b 	bl	3a0b4 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   3a37e:	2300      	movs	r3, #0
   3a380:	603b      	str	r3, [r7, #0]
   3a382:	e76b      	b.n	3a25c <nrf91_socket_offload_getaddrinfo+0x9e>
			latest_z_res->ai_next = next_z_res;
   3a384:	f8c8 4000 	str.w	r4, [r8]
   3a388:	e7d9      	b.n	3a33e <nrf91_socket_offload_getaddrinfo+0x180>
			return DNS_EAI_SOCKTYPE;
   3a38a:	f06f 0506 	mvn.w	r5, #6
   3a38e:	e74c      	b.n	3a22a <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   3a390:	f06f 0508 	mvn.w	r5, #8
   3a394:	e749      	b.n	3a22a <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   3a396:	f06f 0501 	mvn.w	r5, #1
   3a39a:	e746      	b.n	3a22a <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   3a39c:	f06f 0509 	mvn.w	r5, #9
   3a3a0:	e743      	b.n	3a22a <nrf91_socket_offload_getaddrinfo+0x6c>

0003a3a2 <z_to_nrf_ipv6>:
{
   3a3a2:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3a3a4:	2124      	movs	r1, #36	; 0x24
   3a3a6:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3a3a8:	8841      	ldrh	r1, [r0, #2]
{
   3a3aa:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3a3ac:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3a3ae:	210a      	movs	r1, #10
{
   3a3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   3a3b2:	6059      	str	r1, [r3, #4]
   3a3b4:	1d04      	adds	r4, r0, #4
   3a3b6:	f103 0610 	add.w	r6, r3, #16
   3a3ba:	f100 0714 	add.w	r7, r0, #20
   3a3be:	4635      	mov	r5, r6
   3a3c0:	6820      	ldr	r0, [r4, #0]
   3a3c2:	6861      	ldr	r1, [r4, #4]
   3a3c4:	3408      	adds	r4, #8
   3a3c6:	c503      	stmia	r5!, {r0, r1}
   3a3c8:	42bc      	cmp	r4, r7
   3a3ca:	462e      	mov	r6, r5
   3a3cc:	d1f7      	bne.n	3a3be <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   3a3ce:	7d12      	ldrb	r2, [r2, #20]
   3a3d0:	621a      	str	r2, [r3, #32]
}
   3a3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003a3d4 <nrf91_socket_offload_sendto>:
{
   3a3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a3d8:	b08e      	sub	sp, #56	; 0x38
   3a3da:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3a3dc:	460e      	mov	r6, r1
   3a3de:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   3a3e0:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   3a3e2:	b974      	cbnz	r4, 3a402 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3a3e4:	4618      	mov	r0, r3
   3a3e6:	9203      	str	r2, [sp, #12]
   3a3e8:	f7ff fda1 	bl	39f2e <z_to_nrf_flags>
   3a3ec:	4603      	mov	r3, r0
   3a3ee:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3a3f2:	4631      	mov	r1, r6
   3a3f4:	4628      	mov	r0, r5
   3a3f6:	9a03      	ldr	r2, [sp, #12]
   3a3f8:	f7f8 ff6e 	bl	332d8 <nrf_sendto>
}
   3a3fc:	b00e      	add	sp, #56	; 0x38
   3a3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   3a402:	8823      	ldrh	r3, [r4, #0]
   3a404:	9203      	str	r2, [sp, #12]
   3a406:	2b01      	cmp	r3, #1
   3a408:	d113      	bne.n	3a432 <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   3a40a:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3a40c:	f04f 0810 	mov.w	r8, #16
	nrf_out->sin_port = ptr->sin_port;
   3a410:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   3a414:	2302      	movs	r3, #2
   3a416:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3a418:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3a41a:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3a41c:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3a41e:	f88d 8014 	strb.w	r8, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3a422:	f7ff fd84 	bl	39f2e <z_to_nrf_flags>
   3a426:	a905      	add	r1, sp, #20
   3a428:	4603      	mov	r3, r0
   3a42a:	f8cd 8004 	str.w	r8, [sp, #4]
   3a42e:	9100      	str	r1, [sp, #0]
   3a430:	e7df      	b.n	3a3f2 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   3a432:	2b02      	cmp	r3, #2
   3a434:	d10d      	bne.n	3a452 <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   3a436:	f10d 0814 	add.w	r8, sp, #20
   3a43a:	4641      	mov	r1, r8
   3a43c:	4620      	mov	r0, r4
   3a43e:	f7ff ffb0 	bl	3a3a2 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3a442:	4638      	mov	r0, r7
   3a444:	f7ff fd73 	bl	39f2e <z_to_nrf_flags>
   3a448:	2124      	movs	r1, #36	; 0x24
   3a44a:	4603      	mov	r3, r0
   3a44c:	e9cd 8100 	strd	r8, r1, [sp]
   3a450:	e7cf      	b.n	3a3f2 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   3a452:	f7fe ff38 	bl	392c6 <__errno>
   3a456:	2386      	movs	r3, #134	; 0x86
   3a458:	6003      	str	r3, [r0, #0]
	return retval;
   3a45a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a45e:	e7cd      	b.n	3a3fc <nrf91_socket_offload_sendto+0x28>

0003a460 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3a460:	2300      	movs	r3, #0
{
   3a462:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3a464:	e9cd 3300 	strd	r3, r3, [sp]
   3a468:	f7ff ffb4 	bl	3a3d4 <nrf91_socket_offload_sendto>
}
   3a46c:	b003      	add	sp, #12
   3a46e:	f85d fb04 	ldr.w	pc, [sp], #4

0003a472 <nrf91_socket_offload_connect>:
{
   3a472:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3a474:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   3a476:	8808      	ldrh	r0, [r1, #0]
{
   3a478:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3a47a:	2801      	cmp	r0, #1
{
   3a47c:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3a47e:	d10f      	bne.n	3a4a0 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   3a480:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3a482:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3a484:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3a488:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3a48a:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3a48c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3a490:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3a492:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3a494:	4620      	mov	r0, r4
   3a496:	a901      	add	r1, sp, #4
   3a498:	f7f8 ff8a 	bl	333b0 <nrf_connect>
}
   3a49c:	b00a      	add	sp, #40	; 0x28
   3a49e:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3a4a0:	2802      	cmp	r0, #2
   3a4a2:	d105      	bne.n	3a4b0 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   3a4a4:	4618      	mov	r0, r3
   3a4a6:	a901      	add	r1, sp, #4
   3a4a8:	f7ff ff7b 	bl	3a3a2 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3a4ac:	2224      	movs	r2, #36	; 0x24
   3a4ae:	e7f1      	b.n	3a494 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3a4b0:	4620      	mov	r0, r4
   3a4b2:	f7f8 ff7d 	bl	333b0 <nrf_connect>
		if (retval < 0) {
   3a4b6:	2800      	cmp	r0, #0
   3a4b8:	daf0      	bge.n	3a49c <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   3a4ba:	f7fe ff04 	bl	392c6 <__errno>
   3a4be:	2386      	movs	r3, #134	; 0x86
   3a4c0:	6003      	str	r3, [r0, #0]
   3a4c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a4c6:	e7e9      	b.n	3a49c <nrf91_socket_offload_connect+0x2a>

0003a4c8 <nrf91_socket_offload_setsockopt>:
{
   3a4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a4cc:	461e      	mov	r6, r3
	switch (z_in_level) {
   3a4ce:	f240 2302 	movw	r3, #514	; 0x202
{
   3a4d2:	b086      	sub	sp, #24
	switch (z_in_level) {
   3a4d4:	4299      	cmp	r1, r3
{
   3a4d6:	460c      	mov	r4, r1
   3a4d8:	4615      	mov	r5, r2
   3a4da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   3a4dc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   3a4e0:	d005      	beq.n	3a4ee <nrf91_socket_offload_setsockopt+0x26>
   3a4e2:	dc20      	bgt.n	3a526 <nrf91_socket_offload_setsockopt+0x5e>
   3a4e4:	2901      	cmp	r1, #1
   3a4e6:	d002      	beq.n	3a4ee <nrf91_socket_offload_setsockopt+0x26>
   3a4e8:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3a4ec:	d126      	bne.n	3a53c <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3a4ee:	4629      	mov	r1, r5
   3a4f0:	4620      	mov	r0, r4
   3a4f2:	aa03      	add	r2, sp, #12
   3a4f4:	f7ef fbca 	bl	29c8c <z_to_nrf_optname>
   3a4f8:	2800      	cmp	r0, #0
   3a4fa:	db1f      	blt.n	3a53c <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3a4fc:	2c01      	cmp	r4, #1
   3a4fe:	d116      	bne.n	3a52e <nrf91_socket_offload_setsockopt+0x66>
   3a500:	3d14      	subs	r5, #20
   3a502:	2d01      	cmp	r5, #1
   3a504:	d805      	bhi.n	3a512 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   3a506:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3a508:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3a50a:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3a50c:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3a50e:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   3a510:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3a512:	4633      	mov	r3, r6
   3a514:	4621      	mov	r1, r4
   3a516:	4640      	mov	r0, r8
   3a518:	9a03      	ldr	r2, [sp, #12]
   3a51a:	9700      	str	r7, [sp, #0]
   3a51c:	f7f8 ff92 	bl	33444 <nrf_setsockopt>
}
   3a520:	b006      	add	sp, #24
   3a522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3a526:	f240 2303 	movw	r3, #515	; 0x203
   3a52a:	4299      	cmp	r1, r3
   3a52c:	e7de      	b.n	3a4ec <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3a52e:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   3a532:	d1ee      	bne.n	3a512 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   3a534:	2d08      	cmp	r5, #8
   3a536:	bf08      	it	eq
   3a538:	2701      	moveq	r7, #1
   3a53a:	e7ea      	b.n	3a512 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   3a53c:	f7fe fec3 	bl	392c6 <__errno>
   3a540:	236d      	movs	r3, #109	; 0x6d
   3a542:	6003      	str	r3, [r0, #0]
   3a544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a548:	e7ea      	b.n	3a520 <nrf91_socket_offload_setsockopt+0x58>

0003a54a <nrf91_socket_offload_bind>:
{
   3a54a:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   3a54c:	880a      	ldrh	r2, [r1, #0]
{
   3a54e:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3a550:	2a01      	cmp	r2, #1
{
   3a552:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   3a554:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
	if (addr->sa_family == AF_INET) {
   3a558:	d10f      	bne.n	3a57a <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   3a55a:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3a55c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3a55e:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3a562:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3a564:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3a566:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3a56a:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3a56c:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3a56e:	4620      	mov	r0, r4
   3a570:	a901      	add	r1, sp, #4
   3a572:	f7f8 ff55 	bl	33420 <nrf_bind>
}
   3a576:	b00a      	add	sp, #40	; 0x28
   3a578:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3a57a:	2a02      	cmp	r2, #2
   3a57c:	d105      	bne.n	3a58a <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   3a57e:	4618      	mov	r0, r3
   3a580:	a901      	add	r1, sp, #4
   3a582:	f7ff ff0e 	bl	3a3a2 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3a586:	2224      	movs	r2, #36	; 0x24
   3a588:	e7f1      	b.n	3a56e <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   3a58a:	f7fe fe9c 	bl	392c6 <__errno>
   3a58e:	2386      	movs	r3, #134	; 0x86
   3a590:	6003      	str	r3, [r0, #0]
   3a592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a596:	e7ee      	b.n	3a576 <nrf91_socket_offload_bind+0x2c>

0003a598 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   3a598:	280d      	cmp	r0, #13
   3a59a:	d004      	beq.n	3a5a6 <is_lfcr+0xe>
   3a59c:	f1a0 030a 	sub.w	r3, r0, #10
   3a5a0:	4258      	negs	r0, r3
   3a5a2:	4158      	adcs	r0, r3
   3a5a4:	4770      	bx	lr
		return true;
   3a5a6:	2001      	movs	r0, #1
}
   3a5a8:	4770      	bx	lr

0003a5aa <skip_command_prefix>:
{
   3a5aa:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   3a5ac:	6801      	ldr	r1, [r0, #0]
{
   3a5ae:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   3a5b0:	1c8b      	adds	r3, r1, #2
   3a5b2:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   3a5b4:	788c      	ldrb	r4, [r1, #2]
   3a5b6:	4620      	mov	r0, r4
   3a5b8:	f7ff ffee 	bl	3a598 <is_lfcr>
   3a5bc:	b910      	cbnz	r0, 3a5c4 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3a5be:	b10c      	cbz	r4, 3a5c4 <skip_command_prefix+0x1a>
	(*cmd)++;
   3a5c0:	3103      	adds	r1, #3
   3a5c2:	6011      	str	r1, [r2, #0]
}
   3a5c4:	bd10      	pop	{r4, pc}

0003a5c6 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   3a5c6:	6813      	ldr	r3, [r2, #0]
   3a5c8:	f7f0 bb00 	b.w	2abcc <at_parser_max_params_from_str>

0003a5cc <at_parser_cmd_type_get>:

enum at_cmd_type at_parser_cmd_type_get(const char *at_cmd)
{
   3a5cc:	b507      	push	{r0, r1, r2, lr}
   3a5ce:	9001      	str	r0, [sp, #4]
	enum at_cmd_type type;

	if (!is_command(at_cmd)) {
   3a5d0:	f7f0 fa6c 	bl	2aaac <is_command>
   3a5d4:	b178      	cbz	r0, 3a5f6 <at_parser_cmd_type_get+0x2a>
		return AT_CMD_TYPE_UNKNOWN;
	}

	skip_command_prefix(&at_cmd);
   3a5d6:	a801      	add	r0, sp, #4
   3a5d8:	f7ff ffe7 	bl	3a5aa <skip_command_prefix>

	while (is_valid_notification_char(*at_cmd)) {
   3a5dc:	9901      	ldr	r1, [sp, #4]
   3a5de:	780a      	ldrb	r2, [r1, #0]
   3a5e0:	4610      	mov	r0, r2
   3a5e2:	f7f0 f975 	bl	2a8d0 <is_valid_notification_char>
   3a5e6:	b948      	cbnz	r0, 3a5fc <at_parser_cmd_type_get+0x30>
		at_cmd++;
	}

	if ((*at_cmd == AT_CMD_SEPARATOR) &&
   3a5e8:	2a3d      	cmp	r2, #61	; 0x3d
   3a5ea:	d114      	bne.n	3a616 <at_parser_cmd_type_get+0x4a>
   3a5ec:	784b      	ldrb	r3, [r1, #1]
	    (*(at_cmd + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
		type = AT_CMD_TYPE_TEST_COMMAND;
   3a5ee:	2b3f      	cmp	r3, #63	; 0x3f
   3a5f0:	bf14      	ite	ne
   3a5f2:	2001      	movne	r0, #1
   3a5f4:	2003      	moveq	r0, #3
	} else {
		type = AT_CMD_TYPE_UNKNOWN;
	}

	return type;
}
   3a5f6:	b003      	add	sp, #12
   3a5f8:	f85d fb04 	ldr.w	pc, [sp], #4
		at_cmd++;
   3a5fc:	3101      	adds	r1, #1
   3a5fe:	9101      	str	r1, [sp, #4]
   3a600:	e7ec      	b.n	3a5dc <at_parser_cmd_type_get+0x10>
	} else if ((*at_cmd == AT_CMD_SEPARATOR) || is_lfcr(*at_cmd) ||
   3a602:	4610      	mov	r0, r2
   3a604:	f7ff ffc8 	bl	3a598 <is_lfcr>
   3a608:	b918      	cbnz	r0, 3a612 <at_parser_cmd_type_get+0x46>
		return AT_CMD_TYPE_UNKNOWN;
   3a60a:	fab2 f082 	clz	r0, r2
   3a60e:	0940      	lsrs	r0, r0, #5
   3a610:	e7f1      	b.n	3a5f6 <at_parser_cmd_type_get+0x2a>
		type = AT_CMD_TYPE_SET_COMMAND;
   3a612:	2001      	movs	r0, #1
   3a614:	e7ef      	b.n	3a5f6 <at_parser_cmd_type_get+0x2a>
	} else if (*at_cmd == AT_CMD_READ_TEST_IDENTIFIER) {
   3a616:	2a3f      	cmp	r2, #63	; 0x3f
   3a618:	d1f3      	bne.n	3a602 <at_parser_cmd_type_get+0x36>
		type = AT_CMD_TYPE_READ_COMMAND;
   3a61a:	2002      	movs	r0, #2
   3a61c:	e7eb      	b.n	3a5f6 <at_parser_cmd_type_get+0x2a>

0003a61e <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   3a61e:	6803      	ldr	r3, [r0, #0]
   3a620:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   3a622:	bf83      	ittte	hi
   3a624:	230c      	movhi	r3, #12
   3a626:	6840      	ldrhi	r0, [r0, #4]
   3a628:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   3a62c:	2000      	movls	r0, #0
}
   3a62e:	4770      	bx	lr

0003a630 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   3a630:	7803      	ldrb	r3, [r0, #0]
   3a632:	2b01      	cmp	r3, #1
   3a634:	d006      	beq.n	3a644 <at_param_size+0x14>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   3a636:	2b02      	cmp	r3, #2
   3a638:	d006      	beq.n	3a648 <at_param_size+0x18>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   3a63a:	3b03      	subs	r3, #3
   3a63c:	2b01      	cmp	r3, #1
   3a63e:	d805      	bhi.n	3a64c <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   3a640:	6840      	ldr	r0, [r0, #4]
   3a642:	4770      	bx	lr
		return sizeof(uint16_t);
   3a644:	2002      	movs	r0, #2
   3a646:	4770      	bx	lr
		return sizeof(uint32_t);
   3a648:	2004      	movs	r0, #4
   3a64a:	4770      	bx	lr
	}

	return 0;
   3a64c:	2000      	movs	r0, #0
}
   3a64e:	4770      	bx	lr

0003a650 <at_param_clear>:
{
   3a650:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   3a652:	7803      	ldrb	r3, [r0, #0]
{
   3a654:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   3a656:	3b03      	subs	r3, #3
   3a658:	2b01      	cmp	r3, #1
   3a65a:	d802      	bhi.n	3a662 <at_param_clear+0x12>
		k_free(param->value.str_val);
   3a65c:	6880      	ldr	r0, [r0, #8]
   3a65e:	f000 fe6b 	bl	3b338 <k_free>
	param->value.int_val = 0;
   3a662:	2300      	movs	r3, #0
   3a664:	60a3      	str	r3, [r4, #8]
}
   3a666:	bd10      	pop	{r4, pc}

0003a668 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   3a668:	b538      	push	{r3, r4, r5, lr}
   3a66a:	460d      	mov	r5, r1
	if (list == NULL) {
   3a66c:	4604      	mov	r4, r0
   3a66e:	b140      	cbz	r0, 3a682 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3a670:	210c      	movs	r1, #12
   3a672:	4628      	mov	r0, r5
   3a674:	f000 fe65 	bl	3b342 <k_calloc>
   3a678:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   3a67a:	b128      	cbz	r0, 3a688 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   3a67c:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3a67e:	6025      	str	r5, [r4, #0]
}
   3a680:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3a682:	f06f 0015 	mvn.w	r0, #21
   3a686:	e7fb      	b.n	3a680 <at_params_list_init+0x18>
		return -ENOMEM;
   3a688:	f06f 000b 	mvn.w	r0, #11
   3a68c:	e7f8      	b.n	3a680 <at_params_list_init+0x18>

0003a68e <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   3a68e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (list == NULL || list->params == NULL) {
   3a692:	4604      	mov	r4, r0
   3a694:	b140      	cbz	r0, 3a6a8 <at_params_list_clear+0x1a>
   3a696:	6843      	ldr	r3, [r0, #4]
   3a698:	b133      	cbz	r3, 3a6a8 <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   3a69a:	2500      	movs	r5, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   3a69c:	f04f 0a0c 	mov.w	sl, #12
__ssp_bos_icheck3(memset, void *, int)
   3a6a0:	462e      	mov	r6, r5
	for (size_t i = 0; i < list->param_count; ++i) {
   3a6a2:	6823      	ldr	r3, [r4, #0]
   3a6a4:	429d      	cmp	r5, r3
   3a6a6:	d301      	bcc.n	3a6ac <at_params_list_clear+0x1e>
		at_param_init(&params[i]);
	}
}
   3a6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		at_param_clear(&params[i]);
   3a6ac:	fb0a f805 	mul.w	r8, sl, r5
   3a6b0:	f8d4 9004 	ldr.w	r9, [r4, #4]
	for (size_t i = 0; i < list->param_count; ++i) {
   3a6b4:	3501      	adds	r5, #1
		at_param_clear(&params[i]);
   3a6b6:	eb09 0708 	add.w	r7, r9, r8
   3a6ba:	4638      	mov	r0, r7
   3a6bc:	f7ff ffc8 	bl	3a650 <at_param_clear>
   3a6c0:	f849 6008 	str.w	r6, [r9, r8]
   3a6c4:	607e      	str	r6, [r7, #4]
   3a6c6:	60be      	str	r6, [r7, #8]
	for (size_t i = 0; i < list->param_count; ++i) {
   3a6c8:	e7eb      	b.n	3a6a2 <at_params_list_clear+0x14>

0003a6ca <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   3a6ca:	b538      	push	{r3, r4, r5, lr}
   3a6cc:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3a6ce:	b160      	cbz	r0, 3a6ea <at_params_short_put+0x20>
   3a6d0:	6843      	ldr	r3, [r0, #4]
   3a6d2:	b153      	cbz	r3, 3a6ea <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3a6d4:	f7ff ffa3 	bl	3a61e <at_params_get>

	if (param == NULL) {
   3a6d8:	4604      	mov	r4, r0
   3a6da:	b130      	cbz	r0, 3a6ea <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   3a6dc:	f7ff ffb8 	bl	3a650 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   3a6e0:	2301      	movs	r3, #1
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
   3a6e2:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   3a6e4:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   3a6e6:	60a5      	str	r5, [r4, #8]
}
   3a6e8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3a6ea:	f06f 0015 	mvn.w	r0, #21
   3a6ee:	e7fb      	b.n	3a6e8 <at_params_short_put+0x1e>

0003a6f0 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   3a6f0:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   3a6f2:	b160      	cbz	r0, 3a70e <at_params_empty_put+0x1e>
   3a6f4:	6843      	ldr	r3, [r0, #4]
   3a6f6:	b153      	cbz	r3, 3a70e <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3a6f8:	f7ff ff91 	bl	3a61e <at_params_get>

	if (param == NULL) {
   3a6fc:	4604      	mov	r4, r0
   3a6fe:	b130      	cbz	r0, 3a70e <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   3a700:	f7ff ffa6 	bl	3a650 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   3a704:	2305      	movs	r3, #5
	param->value.int_val = 0;
   3a706:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   3a708:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3a70a:	60a0      	str	r0, [r4, #8]

	return 0;
}
   3a70c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3a70e:	f06f 0015 	mvn.w	r0, #21
   3a712:	e7fb      	b.n	3a70c <at_params_empty_put+0x1c>

0003a714 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   3a714:	b538      	push	{r3, r4, r5, lr}
   3a716:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3a718:	b160      	cbz	r0, 3a734 <at_params_int_put+0x20>
   3a71a:	6843      	ldr	r3, [r0, #4]
   3a71c:	b153      	cbz	r3, 3a734 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3a71e:	f7ff ff7e 	bl	3a61e <at_params_get>

	if (param == NULL) {
   3a722:	4604      	mov	r4, r0
   3a724:	b130      	cbz	r0, 3a734 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   3a726:	f7ff ff93 	bl	3a650 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   3a72a:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   3a72c:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   3a72e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   3a730:	60a5      	str	r5, [r4, #8]
}
   3a732:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3a734:	f06f 0015 	mvn.w	r0, #21
   3a738:	e7fb      	b.n	3a732 <at_params_int_put+0x1e>

0003a73a <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   3a73a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a73c:	4617      	mov	r7, r2
   3a73e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3a740:	b1c0      	cbz	r0, 3a774 <at_params_string_put+0x3a>
   3a742:	6843      	ldr	r3, [r0, #4]
   3a744:	b1b3      	cbz	r3, 3a774 <at_params_string_put+0x3a>
   3a746:	b1aa      	cbz	r2, 3a774 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3a748:	f7ff ff69 	bl	3a61e <at_params_get>

	if (param == NULL) {
   3a74c:	4604      	mov	r4, r0
   3a74e:	b188      	cbz	r0, 3a774 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   3a750:	1c68      	adds	r0, r5, #1
   3a752:	f7fc f9ed 	bl	36b30 <k_malloc>

	if (param_value == NULL) {
   3a756:	4606      	mov	r6, r0
   3a758:	b178      	cbz	r0, 3a77a <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3a75a:	462a      	mov	r2, r5
   3a75c:	4639      	mov	r1, r7
   3a75e:	f000 fe28 	bl	3b3b2 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   3a762:	4620      	mov	r0, r4
   3a764:	f7ff ff74 	bl	3a650 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   3a768:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   3a76a:	2000      	movs	r0, #0
	param->size = str_len;
   3a76c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   3a76e:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   3a770:	60a6      	str	r6, [r4, #8]
}
   3a772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   3a774:	f06f 0015 	mvn.w	r0, #21
   3a778:	e7fb      	b.n	3a772 <at_params_string_put+0x38>
		return -ENOMEM;
   3a77a:	f06f 000b 	mvn.w	r0, #11
   3a77e:	e7f8      	b.n	3a772 <at_params_string_put+0x38>

0003a780 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   3a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a782:	4617      	mov	r7, r2
   3a784:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3a786:	b1c0      	cbz	r0, 3a7ba <at_params_array_put+0x3a>
   3a788:	6843      	ldr	r3, [r0, #4]
   3a78a:	b1b3      	cbz	r3, 3a7ba <at_params_array_put+0x3a>
   3a78c:	b1aa      	cbz	r2, 3a7ba <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3a78e:	f7ff ff46 	bl	3a61e <at_params_get>

	if (param == NULL) {
   3a792:	4604      	mov	r4, r0
   3a794:	b188      	cbz	r0, 3a7ba <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   3a796:	4628      	mov	r0, r5
   3a798:	f7fc f9ca 	bl	36b30 <k_malloc>

	if (param_value == NULL) {
   3a79c:	4606      	mov	r6, r0
   3a79e:	b178      	cbz	r0, 3a7c0 <at_params_array_put+0x40>
   3a7a0:	462a      	mov	r2, r5
   3a7a2:	4639      	mov	r1, r7
   3a7a4:	f000 fe05 	bl	3b3b2 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   3a7a8:	4620      	mov	r0, r4
   3a7aa:	f7ff ff51 	bl	3a650 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   3a7ae:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   3a7b0:	2000      	movs	r0, #0
	param->size = array_len;
   3a7b2:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   3a7b4:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   3a7b6:	60a6      	str	r6, [r4, #8]
}
   3a7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   3a7ba:	f06f 0015 	mvn.w	r0, #21
   3a7be:	e7fb      	b.n	3a7b8 <at_params_array_put+0x38>
		return -ENOMEM;
   3a7c0:	f06f 000b 	mvn.w	r0, #11
   3a7c4:	e7f8      	b.n	3a7b8 <at_params_array_put+0x38>

0003a7c6 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   3a7c6:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   3a7c8:	b160      	cbz	r0, 3a7e4 <at_params_short_get+0x1e>
   3a7ca:	6843      	ldr	r3, [r0, #4]
   3a7cc:	b153      	cbz	r3, 3a7e4 <at_params_short_get+0x1e>
   3a7ce:	b14a      	cbz	r2, 3a7e4 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3a7d0:	f7ff ff25 	bl	3a61e <at_params_get>

	if (param == NULL) {
   3a7d4:	b130      	cbz	r0, 3a7e4 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   3a7d6:	7803      	ldrb	r3, [r0, #0]
   3a7d8:	2b01      	cmp	r3, #1
   3a7da:	d103      	bne.n	3a7e4 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
   3a7dc:	6883      	ldr	r3, [r0, #8]
	return 0;
   3a7de:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   3a7e0:	8013      	strh	r3, [r2, #0]
}
   3a7e2:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3a7e4:	f06f 0015 	mvn.w	r0, #21
   3a7e8:	e7fb      	b.n	3a7e2 <at_params_short_get+0x1c>

0003a7ea <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   3a7ea:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   3a7ec:	b168      	cbz	r0, 3a80a <at_params_int_get+0x20>
   3a7ee:	6843      	ldr	r3, [r0, #4]
   3a7f0:	b15b      	cbz	r3, 3a80a <at_params_int_get+0x20>
   3a7f2:	b152      	cbz	r2, 3a80a <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3a7f4:	f7ff ff13 	bl	3a61e <at_params_get>

	if (param == NULL) {
   3a7f8:	b138      	cbz	r0, 3a80a <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   3a7fa:	7803      	ldrb	r3, [r0, #0]
   3a7fc:	3b01      	subs	r3, #1
   3a7fe:	2b01      	cmp	r3, #1
   3a800:	d803      	bhi.n	3a80a <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   3a802:	6883      	ldr	r3, [r0, #8]
	return 0;
   3a804:	2000      	movs	r0, #0
	*value = param->value.int_val;
   3a806:	6013      	str	r3, [r2, #0]
}
   3a808:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3a80a:	f06f 0015 	mvn.w	r0, #21
   3a80e:	e7fb      	b.n	3a808 <at_params_int_get+0x1e>

0003a810 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   3a810:	b570      	push	{r4, r5, r6, lr}
   3a812:	4616      	mov	r6, r2
   3a814:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   3a816:	b1c0      	cbz	r0, 3a84a <at_params_string_get+0x3a>
   3a818:	6843      	ldr	r3, [r0, #4]
   3a81a:	b1b3      	cbz	r3, 3a84a <at_params_string_get+0x3a>
   3a81c:	b1aa      	cbz	r2, 3a84a <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   3a81e:	b1a4      	cbz	r4, 3a84a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3a820:	f7ff fefd 	bl	3a61e <at_params_get>

	if (param == NULL) {
   3a824:	4601      	mov	r1, r0
   3a826:	b180      	cbz	r0, 3a84a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   3a828:	7803      	ldrb	r3, [r0, #0]
   3a82a:	2b03      	cmp	r3, #3
   3a82c:	d10d      	bne.n	3a84a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   3a82e:	f7ff feff 	bl	3a630 <at_param_size>

	if (*len < param_len) {
   3a832:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3a834:	4605      	mov	r5, r0
	if (*len < param_len) {
   3a836:	4283      	cmp	r3, r0
   3a838:	d30a      	bcc.n	3a850 <at_params_string_get+0x40>
   3a83a:	4602      	mov	r2, r0
   3a83c:	6889      	ldr	r1, [r1, #8]
   3a83e:	4630      	mov	r0, r6
   3a840:	f000 fdb7 	bl	3b3b2 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   3a844:	2000      	movs	r0, #0
	*len = param_len;
   3a846:	6025      	str	r5, [r4, #0]
}
   3a848:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3a84a:	f06f 0015 	mvn.w	r0, #21
   3a84e:	e7fb      	b.n	3a848 <at_params_string_get+0x38>
		return -ENOMEM;
   3a850:	f06f 000b 	mvn.w	r0, #11
   3a854:	e7f8      	b.n	3a848 <at_params_string_get+0x38>

0003a856 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   3a856:	4602      	mov	r2, r0
{
   3a858:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   3a85a:	b170      	cbz	r0, 3a87a <at_params_valid_count_get+0x24>
   3a85c:	6840      	ldr	r0, [r0, #4]
   3a85e:	b160      	cbz	r0, 3a87a <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   3a860:	6811      	ldr	r1, [r2, #0]
   3a862:	b141      	cbz	r1, 3a876 <at_params_valid_count_get+0x20>
   3a864:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3a866:	7803      	ldrb	r3, [r0, #0]
   3a868:	b12b      	cbz	r3, 3a876 <at_params_valid_count_get+0x20>
		valid_i += 1;
		param = at_params_get(list, valid_i);
   3a86a:	4610      	mov	r0, r2
		valid_i += 1;
   3a86c:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   3a86e:	f7ff fed6 	bl	3a61e <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3a872:	2800      	cmp	r0, #0
   3a874:	d1f7      	bne.n	3a866 <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   3a876:	4608      	mov	r0, r1
   3a878:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3a87a:	f06f 0115 	mvn.w	r1, #21
   3a87e:	e7fa      	b.n	3a876 <at_params_valid_count_get+0x20>

0003a880 <request_send>:
	switch (dl->proto) {
   3a880:	f8d0 3824 	ldr.w	r3, [r0, #2084]	; 0x824
   3a884:	2b06      	cmp	r3, #6
   3a886:	d002      	beq.n	3a88e <request_send+0xe>
   3a888:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3a88c:	d101      	bne.n	3a892 <request_send+0x12>
		return http_get_request_send(dl);
   3a88e:	f7f1 b989 	b.w	2bba4 <http_get_request_send>
}
   3a892:	2000      	movs	r0, #0
   3a894:	4770      	bx	lr

0003a896 <error_evt_send.isra.0>:
static int error_evt_send(const struct download_client *dl, int error)
   3a896:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   3a898:	2300      	movs	r3, #0
   3a89a:	9301      	str	r3, [sp, #4]
   3a89c:	9303      	str	r3, [sp, #12]
   3a89e:	2301      	movs	r3, #1
static int error_evt_send(const struct download_client *dl, int error)
   3a8a0:	4602      	mov	r2, r0
		.error = -error
   3a8a2:	4249      	negs	r1, r1
	return dl->callback(&evt);
   3a8a4:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   3a8a6:	f88d 3004 	strb.w	r3, [sp, #4]
   3a8aa:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   3a8ac:	4790      	blx	r2
}
   3a8ae:	b005      	add	sp, #20
   3a8b0:	f85d fb04 	ldr.w	pc, [sp], #4

0003a8b4 <socket_send>:
{
   3a8b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	size_t off = 0;
   3a8b8:	2500      	movs	r5, #0
{
   3a8ba:	4606      	mov	r6, r0
   3a8bc:	460c      	mov	r4, r1
   3a8be:	462f      	mov	r7, r5
		sent = send(client->fd, client->buf + off, len, 0);
   3a8c0:	f100 0804 	add.w	r8, r0, #4
	while (len) {
   3a8c4:	b90c      	cbnz	r4, 3a8ca <socket_send+0x16>
	return 0;
   3a8c6:	4620      	mov	r0, r4
   3a8c8:	e00e      	b.n	3a8e8 <socket_send+0x34>
		sent = send(client->fd, client->buf + off, len, 0);
   3a8ca:	6830      	ldr	r0, [r6, #0]
   3a8cc:	2300      	movs	r3, #0
   3a8ce:	4622      	mov	r2, r4
   3a8d0:	e9cd 7700 	strd	r7, r7, [sp]
   3a8d4:	eb08 0105 	add.w	r1, r8, r5
   3a8d8:	f7fe fa62 	bl	38da0 <z_impl_zsock_sendto>
		if (sent <= 0) {
   3a8dc:	1e03      	subs	r3, r0, #0
   3a8de:	dc06      	bgt.n	3a8ee <socket_send+0x3a>
			return -errno;
   3a8e0:	f7fe fcf1 	bl	392c6 <__errno>
   3a8e4:	6800      	ldr	r0, [r0, #0]
   3a8e6:	4240      	negs	r0, r0
}
   3a8e8:	b002      	add	sp, #8
   3a8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		off += sent;
   3a8ee:	441d      	add	r5, r3
		len -= sent;
   3a8f0:	1ae4      	subs	r4, r4, r3
   3a8f2:	e7e7      	b.n	3a8c4 <socket_send+0x10>

0003a8f4 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   3a8f4:	b128      	cbz	r0, 3a902 <download_client_file_size_get+0xe>
   3a8f6:	b121      	cbz	r1, 3a902 <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   3a8f8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

	return 0;
   3a8fc:	2000      	movs	r0, #0
	*size = client->file_size;
   3a8fe:	600b      	str	r3, [r1, #0]
	return 0;
   3a900:	4770      	bx	lr
		return -EINVAL;
   3a902:	f06f 0015 	mvn.w	r0, #21
}
   3a906:	4770      	bx	lr

0003a908 <swallow>:
{
   3a908:	b570      	push	{r4, r5, r6, lr}
   3a90a:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   3a90c:	6800      	ldr	r0, [r0, #0]
{
   3a90e:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   3a910:	f000 ff02 	bl	3b718 <strstr>
	if (!p) {
   3a914:	4604      	mov	r4, r0
   3a916:	b130      	cbz	r0, 3a926 <swallow+0x1e>
	*str = p + strlen(swallow);
   3a918:	4630      	mov	r0, r6
   3a91a:	f7e2 fba9 	bl	1d070 <strlen>
   3a91e:	4404      	add	r4, r0
	return 0;
   3a920:	2000      	movs	r0, #0
	*str = p + strlen(swallow);
   3a922:	602c      	str	r4, [r5, #0]
}
   3a924:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   3a926:	2001      	movs	r0, #1
   3a928:	e7fc      	b.n	3a924 <swallow+0x1c>

0003a92a <dfu_target_callback_handler>:
	switch (evt) {
   3a92a:	b120      	cbz	r0, 3a936 <dfu_target_callback_handler+0xc>
   3a92c:	2801      	cmp	r0, #1
   3a92e:	d005      	beq.n	3a93c <dfu_target_callback_handler+0x12>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   3a930:	2001      	movs	r0, #1
   3a932:	f7f1 ba57 	b.w	2bde4 <send_error_evt>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_PENDING);
   3a936:	2002      	movs	r0, #2
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_DONE);
   3a938:	f7f1 ba44 	b.w	2bdc4 <send_evt>
   3a93c:	2003      	movs	r0, #3
   3a93e:	e7fb      	b.n	3a938 <dfu_target_callback_handler+0xe>

0003a940 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   3a940:	4700      	bx	r0

0003a942 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   3a942:	f000 ba72 	b.w	3ae2a <z_impl_k_busy_wait>

0003a946 <nrfx_clock_enable>:
{
   3a946:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3a948:	2005      	movs	r0, #5
   3a94a:	f7eb f965 	bl	25c18 <arch_irq_is_enabled>
   3a94e:	b920      	cbnz	r0, 3a95a <nrfx_clock_enable+0x14>
}
   3a950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3a954:	2005      	movs	r0, #5
   3a956:	f7eb b93b 	b.w	25bd0 <arch_irq_enable>
   3a95a:	bd08      	pop	{r3, pc}

0003a95c <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   3a95c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   3a960:	4770      	bx	lr

0003a962 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   3a962:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   3a966:	4770      	bx	lr

0003a968 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   3a968:	f44f 7080 	mov.w	r0, #256	; 0x100
   3a96c:	4770      	bx	lr

0003a96e <nrfx_timer_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3a96e:	2201      	movs	r2, #1
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   3a970:	6803      	ldr	r3, [r0, #0]
   3a972:	60da      	str	r2, [r3, #12]
}
   3a974:	4770      	bx	lr

0003a976 <nrfx_timer_capture>:
                            nrf_timer_cc_channel_t cc_channel)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);

    nrf_timer_task_trigger(p_instance->p_reg,
   3a976:	6802      	ldr	r2, [r0, #0]
   3a978:	2001      	movs	r0, #1
    return (uint32_t)p_reg->CC[cc_channel];
}

NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get(uint32_t channel)
{
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   3a97a:	008b      	lsls	r3, r1, #2
   3a97c:	3340      	adds	r3, #64	; 0x40
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3a97e:	b2db      	uxtb	r3, r3
   3a980:	50d0      	str	r0, [r2, r3]
    return (uint32_t)p_reg->CC[cc_channel];
   3a982:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   3a986:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
}
   3a98a:	4770      	bx	lr

0003a98c <device_pm_control_nop>:
			  void *unused_context,
			  device_pm_cb cb,
			  void *unused_arg)
{
	return -ENOTSUP;
}
   3a98c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3a990:	4770      	bx	lr

0003a992 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   3a992:	f7fe bbef 	b.w	39174 <z_clock_idle_exit>

0003a996 <k_heap_init>:
{
   3a996:	b410      	push	{r4}
   3a998:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   3a99c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   3a9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   3a9a4:	f7fd bbfe 	b.w	381a4 <sys_heap_init>

0003a9a8 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   3a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a9ac:	4605      	mov	r5, r0
   3a9ae:	b085      	sub	sp, #20
   3a9b0:	460f      	mov	r7, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   3a9b2:	4610      	mov	r0, r2
   3a9b4:	4619      	mov	r1, r3
   3a9b6:	f000 fafe 	bl	3afb6 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3a9ba:	f105 0b14 	add.w	fp, r5, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   3a9be:	9002      	str	r0, [sp, #8]
   3a9c0:	468a      	mov	sl, r1
	__asm__ volatile(
   3a9c2:	f04f 0320 	mov.w	r3, #32
   3a9c6:	f3ef 8411 	mrs	r4, BASEPRI
   3a9ca:	f383 8811 	msr	BASEPRI, r3
   3a9ce:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3a9d2:	f105 060c 	add.w	r6, r5, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   3a9d6:	4639      	mov	r1, r7
   3a9d8:	4628      	mov	r0, r5
   3a9da:	f7fd fbaf 	bl	3813c <sys_heap_alloc>
   3a9de:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   3a9e0:	f7fb ff86 	bl	368f0 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   3a9e4:	9b03      	ldr	r3, [sp, #12]
   3a9e6:	b13b      	cbz	r3, 3a9f8 <k_heap_alloc+0x50>
	__asm__ volatile(
   3a9e8:	f384 8811 	msr	BASEPRI, r4
   3a9ec:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   3a9f0:	4618      	mov	r0, r3
   3a9f2:	b005      	add	sp, #20
   3a9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   3a9f8:	9a02      	ldr	r2, [sp, #8]
   3a9fa:	ebb2 0800 	subs.w	r8, r2, r0
   3a9fe:	eb6a 0901 	sbc.w	r9, sl, r1
   3aa02:	f1b8 0f01 	cmp.w	r8, #1
   3aa06:	f179 0200 	sbcs.w	r2, r9, #0
   3aa0a:	dbed      	blt.n	3a9e8 <k_heap_alloc+0x40>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3aa0c:	4632      	mov	r2, r6
   3aa0e:	4621      	mov	r1, r4
   3aa10:	4658      	mov	r0, fp
   3aa12:	e9cd 8900 	strd	r8, r9, [sp]
   3aa16:	f7fb fb6b 	bl	360f0 <z_pend_curr>
	__asm__ volatile(
   3aa1a:	f04f 0320 	mov.w	r3, #32
   3aa1e:	f3ef 8411 	mrs	r4, BASEPRI
   3aa22:	f383 8811 	msr	BASEPRI, r3
   3aa26:	f3bf 8f6f 	isb	sy
   3aa2a:	e7d4      	b.n	3a9d6 <k_heap_alloc+0x2e>

0003aa2c <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   3aa2c:	b538      	push	{r3, r4, r5, lr}
   3aa2e:	4604      	mov	r4, r0
   3aa30:	f04f 0320 	mov.w	r3, #32
   3aa34:	f3ef 8511 	mrs	r5, BASEPRI
   3aa38:	f383 8811 	msr	BASEPRI, r3
   3aa3c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   3aa40:	f7fd fb26 	bl	38090 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   3aa44:	f104 000c 	add.w	r0, r4, #12
   3aa48:	f000 f9c9 	bl	3adde <z_unpend_all>
   3aa4c:	b130      	cbz	r0, 3aa5c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   3aa4e:	4629      	mov	r1, r5
   3aa50:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   3aa54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   3aa58:	f7fb b8e4 	b.w	35c24 <z_reschedule>
	__asm__ volatile(
   3aa5c:	f385 8811 	msr	BASEPRI, r5
   3aa60:	f3bf 8f6f 	isb	sy
}
   3aa64:	bd38      	pop	{r3, r4, r5, pc}

0003aa66 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   3aa66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3aa68:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   3aa6c:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   3aa6e:	6800      	ldr	r0, [r0, #0]
{
   3aa70:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   3aa72:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   3aa74:	4632      	mov	r2, r6
   3aa76:	463b      	mov	r3, r7
   3aa78:	4621      	mov	r1, r4
   3aa7a:	f7ff ff95 	bl	3a9a8 <k_heap_alloc>
   3aa7e:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   3aa80:	b144      	cbz	r4, 3aa94 <k_mem_pool_alloc+0x2e>
   3aa82:	b938      	cbnz	r0, 3aa94 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   3aa84:	ea56 0307 	orrs.w	r3, r6, r7
   3aa88:	bf0c      	ite	eq
   3aa8a:	f06f 000b 	mvneq.w	r0, #11
   3aa8e:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   3aa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   3aa94:	2000      	movs	r0, #0
   3aa96:	e7fc      	b.n	3aa92 <k_mem_pool_alloc+0x2c>

0003aa98 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   3aa98:	e9d0 1000 	ldrd	r1, r0, [r0]
   3aa9c:	f7ff bfc6 	b.w	3aa2c <k_heap_free>

0003aaa0 <k_mem_slab_init>:
{
   3aaa0:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   3aaa2:	2400      	movs	r4, #0
   3aaa4:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3aaa6:	ea41 0402 	orr.w	r4, r1, r2
   3aaaa:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   3aaae:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   3aab2:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3aab4:	d10c      	bne.n	3aad0 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   3aab6:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3aab8:	42a3      	cmp	r3, r4
   3aaba:	d103      	bne.n	3aac4 <k_mem_slab_init+0x24>
   3aabc:	e9c0 0000 	strd	r0, r0, [r0]
}
   3aac0:	2000      	movs	r0, #0
}
   3aac2:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   3aac4:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3aac6:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   3aac8:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   3aaca:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   3aacc:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   3aace:	e7f3      	b.n	3aab8 <k_mem_slab_init+0x18>
		return -EINVAL;
   3aad0:	f06f 0015 	mvn.w	r0, #21
	return rc;
   3aad4:	e7f5      	b.n	3aac2 <k_mem_slab_init+0x22>

0003aad6 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   3aad6:	2300      	movs	r3, #0
   3aad8:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   3aadc:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   3aae0:	4618      	mov	r0, r3
   3aae2:	4770      	bx	lr

0003aae4 <queue_insert>:
{
   3aae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3aae8:	4699      	mov	r9, r3
   3aaea:	4604      	mov	r4, r0
   3aaec:	460d      	mov	r5, r1
   3aaee:	4690      	mov	r8, r2
   3aaf0:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3aaf4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   3aaf8:	f04f 0220 	mov.w	r2, #32
   3aafc:	f3ef 8711 	mrs	r7, BASEPRI
   3ab00:	f382 8811 	msr	BASEPRI, r2
   3ab04:	f3bf 8f6f 	isb	sy
	if (is_append) {
   3ab08:	b103      	cbz	r3, 3ab0c <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   3ab0a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   3ab0c:	4630      	mov	r0, r6
   3ab0e:	f000 f941 	bl	3ad94 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   3ab12:	b160      	cbz	r0, 3ab2e <queue_insert+0x4a>
   3ab14:	2400      	movs	r4, #0
   3ab16:	f8c0 8014 	str.w	r8, [r0, #20]
   3ab1a:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
	z_ready_thread(thread);
   3ab1e:	f000 f8de 	bl	3acde <z_ready_thread>
	z_reschedule(&queue->lock, key);
   3ab22:	4630      	mov	r0, r6
   3ab24:	4639      	mov	r1, r7
   3ab26:	f7fb f87d 	bl	35c24 <z_reschedule>
	return 0;
   3ab2a:	2000      	movs	r0, #0
   3ab2c:	e00c      	b.n	3ab48 <queue_insert+0x64>
	if (alloc) {
   3ab2e:	f1b9 0f00 	cmp.w	r9, #0
   3ab32:	d01b      	beq.n	3ab6c <queue_insert+0x88>
		anode = z_thread_malloc(sizeof(*anode));
   3ab34:	2008      	movs	r0, #8
   3ab36:	f7fc f801 	bl	36b3c <z_thread_malloc>
		if (anode == NULL) {
   3ab3a:	b938      	cbnz	r0, 3ab4c <queue_insert+0x68>
	__asm__ volatile(
   3ab3c:	f387 8811 	msr	BASEPRI, r7
   3ab40:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   3ab44:	f06f 000b 	mvn.w	r0, #11
}
   3ab48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   3ab4c:	2301      	movs	r3, #1
		anode->data = data;
   3ab4e:	f8c0 8004 	str.w	r8, [r0, #4]
   3ab52:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3ab54:	6803      	ldr	r3, [r0, #0]
   3ab56:	f003 0203 	and.w	r2, r3, #3
   3ab5a:	b95d      	cbnz	r5, 3ab74 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3ab5c:	6823      	ldr	r3, [r4, #0]
   3ab5e:	4313      	orrs	r3, r2
   3ab60:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3ab62:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   3ab64:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3ab66:	b973      	cbnz	r3, 3ab86 <queue_insert+0xa2>
	list->tail = node;
   3ab68:	6060      	str	r0, [r4, #4]
}
   3ab6a:	e00c      	b.n	3ab86 <queue_insert+0xa2>
}
   3ab6c:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   3ab6e:	f8c8 9000 	str.w	r9, [r8]
}
   3ab72:	e7ef      	b.n	3ab54 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3ab74:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3ab76:	f033 0303 	bics.w	r3, r3, #3
   3ab7a:	d110      	bne.n	3ab9e <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3ab7c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   3ab7e:	6862      	ldr	r2, [r4, #4]
   3ab80:	b93a      	cbnz	r2, 3ab92 <queue_insert+0xae>
	list->head = node;
   3ab82:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3ab86:	2104      	movs	r1, #4
   3ab88:	f104 0010 	add.w	r0, r4, #16
   3ab8c:	f000 fbae 	bl	3b2ec <z_handle_obj_poll_events>
   3ab90:	e7c7      	b.n	3ab22 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3ab92:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3ab94:	f003 0303 	and.w	r3, r3, #3
   3ab98:	4303      	orrs	r3, r0
   3ab9a:	6013      	str	r3, [r2, #0]
   3ab9c:	e7e4      	b.n	3ab68 <queue_insert+0x84>
   3ab9e:	4313      	orrs	r3, r2
   3aba0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3aba2:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3aba4:	f003 0303 	and.w	r3, r3, #3
   3aba8:	4303      	orrs	r3, r0
   3abaa:	602b      	str	r3, [r5, #0]
}
   3abac:	e7eb      	b.n	3ab86 <queue_insert+0xa2>

0003abae <z_queue_node_peek>:
{
   3abae:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3abb0:	4604      	mov	r4, r0
   3abb2:	b130      	cbz	r0, 3abc2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3abb4:	6802      	ldr	r2, [r0, #0]
   3abb6:	0793      	lsls	r3, r2, #30
   3abb8:	d003      	beq.n	3abc2 <z_queue_node_peek+0x14>
		ret = anode->data;
   3abba:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3abbc:	b109      	cbz	r1, 3abc2 <z_queue_node_peek+0x14>
			k_free(anode);
   3abbe:	f000 fbbb 	bl	3b338 <k_free>
}
   3abc2:	4620      	mov	r0, r4
   3abc4:	bd10      	pop	{r4, pc}

0003abc6 <z_impl_k_queue_init>:
	list->head = NULL;
   3abc6:	2300      	movs	r3, #0
	list->tail = NULL;
   3abc8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   3abcc:	f100 0308 	add.w	r3, r0, #8
   3abd0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   3abd4:	f100 0310 	add.w	r3, r0, #16
   3abd8:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   3abdc:	4770      	bx	lr

0003abde <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   3abde:	2301      	movs	r3, #1
{
   3abe0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3abe2:	9300      	str	r3, [sp, #0]
   3abe4:	2300      	movs	r3, #0
{
   3abe6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3abe8:	4619      	mov	r1, r3
   3abea:	f7ff ff7b 	bl	3aae4 <queue_insert>
}
   3abee:	b003      	add	sp, #12
   3abf0:	f85d fb04 	ldr.w	pc, [sp], #4

0003abf4 <z_swap_irqlock>:
{
   3abf4:	b507      	push	{r0, r1, r2, lr}
   3abf6:	9001      	str	r0, [sp, #4]
	z_check_stack_sentinel();
   3abf8:	f7fb fbe8 	bl	363cc <z_check_stack_sentinel>
	ret = arch_swap(key);
   3abfc:	9801      	ldr	r0, [sp, #4]
}
   3abfe:	b003      	add	sp, #12
   3ac00:	f85d eb04 	ldr.w	lr, [sp], #4
	ret = arch_swap(key);
   3ac04:	f7ea bf66 	b.w	25ad4 <arch_swap>

0003ac08 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   3ac08:	f990 000e 	ldrsb.w	r0, [r0, #14]
   3ac0c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   3ac10:	4298      	cmp	r0, r3
   3ac12:	bfac      	ite	ge
   3ac14:	2000      	movge	r0, #0
   3ac16:	2001      	movlt	r0, #1
   3ac18:	4770      	bx	lr

0003ac1a <z_find_first_thread_to_unpend>:
{
   3ac1a:	b510      	push	{r4, lr}
	__asm__ volatile(
   3ac1c:	f04f 0320 	mov.w	r3, #32
   3ac20:	f3ef 8411 	mrs	r4, BASEPRI
   3ac24:	f383 8811 	msr	BASEPRI, r3
   3ac28:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   3ac2c:	f000 f84d 	bl	3acca <z_priq_dumb_best>
	__asm__ volatile(
   3ac30:	f384 8811 	msr	BASEPRI, r4
   3ac34:	f3bf 8f6f 	isb	sy
}
   3ac38:	bd10      	pop	{r4, pc}

0003ac3a <z_unpend_thread_no_timeout>:
{
   3ac3a:	b510      	push	{r4, lr}
	__asm__ volatile(
   3ac3c:	f04f 0320 	mov.w	r3, #32
   3ac40:	f3ef 8411 	mrs	r4, BASEPRI
   3ac44:	f383 8811 	msr	BASEPRI, r3
   3ac48:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   3ac4c:	f000 f81b 	bl	3ac86 <unpend_thread_no_timeout>
	__asm__ volatile(
   3ac50:	f384 8811 	msr	BASEPRI, r4
   3ac54:	f3bf 8f6f 	isb	sy
}
   3ac58:	bd10      	pop	{r4, pc}

0003ac5a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3ac5a:	4603      	mov	r3, r0
   3ac5c:	b920      	cbnz	r0, 3ac68 <z_reschedule_irqlock+0xe>
   3ac5e:	f3ef 8205 	mrs	r2, IPSR
   3ac62:	b90a      	cbnz	r2, 3ac68 <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   3ac64:	f7ff bfc6 	b.w	3abf4 <z_swap_irqlock>
   3ac68:	f383 8811 	msr	BASEPRI, r3
   3ac6c:	f3bf 8f6f 	isb	sy
}
   3ac70:	4770      	bx	lr

0003ac72 <z_reschedule_unlocked>:
	__asm__ volatile(
   3ac72:	f04f 0320 	mov.w	r3, #32
   3ac76:	f3ef 8011 	mrs	r0, BASEPRI
   3ac7a:	f383 8811 	msr	BASEPRI, r3
   3ac7e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3ac82:	f7ff bfea 	b.w	3ac5a <z_reschedule_irqlock>

0003ac86 <unpend_thread_no_timeout>:
{
   3ac86:	4601      	mov	r1, r0
   3ac88:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3ac8a:	6880      	ldr	r0, [r0, #8]
   3ac8c:	f7fa fff0 	bl	35c70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3ac90:	7b4b      	ldrb	r3, [r1, #13]
   3ac92:	f023 0302 	bic.w	r3, r3, #2
   3ac96:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   3ac98:	2300      	movs	r3, #0
   3ac9a:	608b      	str	r3, [r1, #8]
}
   3ac9c:	bd08      	pop	{r3, pc}

0003ac9e <z_unpend_thread>:
{
   3ac9e:	b538      	push	{r3, r4, r5, lr}
   3aca0:	4604      	mov	r4, r0
   3aca2:	f04f 0320 	mov.w	r3, #32
   3aca6:	f3ef 8511 	mrs	r5, BASEPRI
   3acaa:	f383 8811 	msr	BASEPRI, r3
   3acae:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   3acb2:	f7ff ffe8 	bl	3ac86 <unpend_thread_no_timeout>
	__asm__ volatile(
   3acb6:	f385 8811 	msr	BASEPRI, r5
   3acba:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   3acbe:	f104 0018 	add.w	r0, r4, #24
}
   3acc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3acc6:	f000 b92f 	b.w	3af28 <z_abort_timeout>

0003acca <z_priq_dumb_best>:
	return list->head == list;
   3acca:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3accc:	4298      	cmp	r0, r3
   3acce:	d004      	beq.n	3acda <z_priq_dumb_best+0x10>
	if (n != NULL) {
   3acd0:	2b00      	cmp	r3, #0
   3acd2:	bf38      	it	cc
   3acd4:	2300      	movcc	r3, #0
   3acd6:	4618      	mov	r0, r3
   3acd8:	4770      	bx	lr
	struct k_thread *thread = NULL;
   3acda:	2000      	movs	r0, #0
}
   3acdc:	4770      	bx	lr

0003acde <z_ready_thread>:
{
   3acde:	b510      	push	{r4, lr}
	__asm__ volatile(
   3ace0:	f04f 0320 	mov.w	r3, #32
   3ace4:	f3ef 8411 	mrs	r4, BASEPRI
   3ace8:	f383 8811 	msr	BASEPRI, r3
   3acec:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   3acf0:	f7fb f818 	bl	35d24 <ready_thread>
	__asm__ volatile(
   3acf4:	f384 8811 	msr	BASEPRI, r4
   3acf8:	f3bf 8f6f 	isb	sy
}
   3acfc:	bd10      	pop	{r4, pc}

0003acfe <z_thread_timeout>:
{
   3acfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3ad00:	4604      	mov	r4, r0
	__asm__ volatile(
   3ad02:	f04f 0320 	mov.w	r3, #32
   3ad06:	f3ef 8511 	mrs	r5, BASEPRI
   3ad0a:	f383 8811 	msr	BASEPRI, r3
   3ad0e:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   3ad12:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   3ad16:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   3ad18:	b11b      	cbz	r3, 3ad22 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   3ad1a:	9001      	str	r0, [sp, #4]
   3ad1c:	f7ff ffb3 	bl	3ac86 <unpend_thread_no_timeout>
   3ad20:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3ad22:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   3ad26:	f023 0314 	bic.w	r3, r3, #20
   3ad2a:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   3ad2e:	f7fa fff9 	bl	35d24 <ready_thread>
	__asm__ volatile(
   3ad32:	f385 8811 	msr	BASEPRI, r5
   3ad36:	f3bf 8f6f 	isb	sy
}
   3ad3a:	b003      	add	sp, #12
   3ad3c:	bd30      	pop	{r4, r5, pc}

0003ad3e <add_to_waitq_locked>:
{
   3ad3e:	b538      	push	{r3, r4, r5, lr}
   3ad40:	4604      	mov	r4, r0
   3ad42:	460d      	mov	r5, r1
	unready_thread(thread);
   3ad44:	f7fb f994 	bl	36070 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   3ad48:	7b63      	ldrb	r3, [r4, #13]
   3ad4a:	f043 0302 	orr.w	r3, r3, #2
   3ad4e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3ad50:	b1c5      	cbz	r5, 3ad84 <add_to_waitq_locked+0x46>
	return list->head == list;
   3ad52:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   3ad54:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ad56:	429d      	cmp	r5, r3
   3ad58:	bf08      	it	eq
   3ad5a:	2300      	moveq	r3, #0
   3ad5c:	2b00      	cmp	r3, #0
   3ad5e:	bf38      	it	cc
   3ad60:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3ad62:	b183      	cbz	r3, 3ad86 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   3ad64:	f994 100e 	ldrsb.w	r1, [r4, #14]
   3ad68:	f993 200e 	ldrsb.w	r2, [r3, #14]
   3ad6c:	4291      	cmp	r1, r2
   3ad6e:	db04      	blt.n	3ad7a <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   3ad70:	686a      	ldr	r2, [r5, #4]
   3ad72:	429a      	cmp	r2, r3
   3ad74:	d007      	beq.n	3ad86 <add_to_waitq_locked+0x48>
   3ad76:	681b      	ldr	r3, [r3, #0]
   3ad78:	e7f3      	b.n	3ad62 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   3ad7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3ad7c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3ad80:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3ad82:	605c      	str	r4, [r3, #4]
}
   3ad84:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   3ad86:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3ad88:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   3ad8a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3ad8c:	686b      	ldr	r3, [r5, #4]
   3ad8e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3ad90:	606c      	str	r4, [r5, #4]
   3ad92:	e7f7      	b.n	3ad84 <add_to_waitq_locked+0x46>

0003ad94 <z_unpend_first_thread>:
{
   3ad94:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3ad96:	f04f 0320 	mov.w	r3, #32
   3ad9a:	f3ef 8211 	mrs	r2, BASEPRI
   3ad9e:	f383 8811 	msr	BASEPRI, r3
   3ada2:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   3ada6:	f7ff ff90 	bl	3acca <z_priq_dumb_best>
   3adaa:	4604      	mov	r4, r0
	__asm__ volatile(
   3adac:	f382 8811 	msr	BASEPRI, r2
   3adb0:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   3adb4:	b188      	cbz	r0, 3adda <z_unpend_first_thread+0x46>
	__asm__ volatile(
   3adb6:	f04f 0320 	mov.w	r3, #32
   3adba:	f3ef 8511 	mrs	r5, BASEPRI
   3adbe:	f383 8811 	msr	BASEPRI, r3
   3adc2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   3adc6:	f7ff ff5e 	bl	3ac86 <unpend_thread_no_timeout>
	__asm__ volatile(
   3adca:	f385 8811 	msr	BASEPRI, r5
   3adce:	f3bf 8f6f 	isb	sy
   3add2:	f104 0018 	add.w	r0, r4, #24
   3add6:	f000 f8a7 	bl	3af28 <z_abort_timeout>
}
   3adda:	4620      	mov	r0, r4
   3addc:	bd38      	pop	{r3, r4, r5, pc}

0003adde <z_unpend_all>:
{
   3adde:	b538      	push	{r3, r4, r5, lr}
   3ade0:	4605      	mov	r5, r0
	int need_sched = 0;
   3ade2:	2000      	movs	r0, #0
	return list->head == list;
   3ade4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ade6:	42a5      	cmp	r5, r4
   3ade8:	d000      	beq.n	3adec <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3adea:	b904      	cbnz	r4, 3adee <z_unpend_all+0x10>
}
   3adec:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   3adee:	4620      	mov	r0, r4
   3adf0:	f7ff ff55 	bl	3ac9e <z_unpend_thread>
		z_ready_thread(thread);
   3adf4:	4620      	mov	r0, r4
   3adf6:	f7ff ff72 	bl	3acde <z_ready_thread>
		need_sched = 1;
   3adfa:	2001      	movs	r0, #1
   3adfc:	e7f2      	b.n	3ade4 <z_unpend_all+0x6>

0003adfe <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   3adfe:	b15a      	cbz	r2, 3ae18 <z_impl_k_sem_init+0x1a>
   3ae00:	428a      	cmp	r2, r1
   3ae02:	d309      	bcc.n	3ae18 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   3ae04:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3ae08:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   3ae0c:	e9c0 0000 	strd	r0, r0, [r0]
   3ae10:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   3ae14:	2000      	movs	r0, #0
   3ae16:	4770      	bx	lr
		return -EINVAL;
   3ae18:	f06f 0015 	mvn.w	r0, #21
}
   3ae1c:	4770      	bx	lr

0003ae1e <k_is_in_isr>:
   3ae1e:	f3ef 8005 	mrs	r0, IPSR
}
   3ae22:	3800      	subs	r0, #0
   3ae24:	bf18      	it	ne
   3ae26:	2001      	movne	r0, #1
   3ae28:	4770      	bx	lr

0003ae2a <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   3ae2a:	b108      	cbz	r0, 3ae30 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   3ae2c:	f7e9 b9f8 	b.w	24220 <arch_busy_wait>
}
   3ae30:	4770      	bx	lr

0003ae32 <z_impl_k_thread_name_set>:
}
   3ae32:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3ae36:	4770      	bx	lr

0003ae38 <k_thread_name_get>:
}
   3ae38:	2000      	movs	r0, #0
   3ae3a:	4770      	bx	lr

0003ae3c <k_work_submit_to_queue>:
{
   3ae3c:	b500      	push	{lr}
   3ae3e:	f101 0308 	add.w	r3, r1, #8
   3ae42:	e8d3 2fef 	ldaex	r2, [r3]
   3ae46:	f042 0c01 	orr.w	ip, r2, #1
   3ae4a:	e8c3 cfee 	stlex	lr, ip, [r3]
   3ae4e:	f1be 0f00 	cmp.w	lr, #0
   3ae52:	d1f6      	bne.n	3ae42 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   3ae54:	07d3      	lsls	r3, r2, #31
   3ae56:	d403      	bmi.n	3ae60 <k_work_submit_to_queue+0x24>
}
   3ae58:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   3ae5c:	f7ff bebf 	b.w	3abde <k_queue_append>
}
   3ae60:	f85d fb04 	ldr.w	pc, [sp], #4

0003ae64 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   3ae64:	f1a0 0110 	sub.w	r1, r0, #16
   3ae68:	6980      	ldr	r0, [r0, #24]
   3ae6a:	f7ff bfe7 	b.w	3ae3c <k_work_submit_to_queue>

0003ae6e <work_cancel>:
{
   3ae6e:	b570      	push	{r4, r5, r6, lr}
   3ae70:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   3ae72:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3ae76:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   3ae7a:	07db      	lsls	r3, r3, #31
   3ae7c:	d52f      	bpl.n	3aede <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3ae7e:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   3ae80:	6a82      	ldr	r2, [r0, #40]	; 0x28
   3ae82:	6813      	ldr	r3, [r2, #0]
   3ae84:	b913      	cbnz	r3, 3ae8c <work_cancel+0x1e>
			return -EINVAL;
   3ae86:	f06f 0015 	mvn.w	r0, #21
}
   3ae8a:	bd70      	pop	{r4, r5, r6, pc}
   3ae8c:	429c      	cmp	r4, r3
   3ae8e:	d121      	bne.n	3aed4 <work_cancel+0x66>
Z_GENLIST_REMOVE(sflist, sfnode)
   3ae90:	6823      	ldr	r3, [r4, #0]
   3ae92:	6856      	ldr	r6, [r2, #4]
   3ae94:	f023 0003 	bic.w	r0, r3, #3
   3ae98:	b991      	cbnz	r1, 3aec0 <work_cancel+0x52>
   3ae9a:	42b4      	cmp	r4, r6
	list->head = node;
   3ae9c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3ae9e:	d100      	bne.n	3aea2 <work_cancel+0x34>
	list->tail = node;
   3aea0:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3aea2:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3aea4:	f003 0303 	and.w	r3, r3, #3
   3aea8:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   3aeaa:	2000      	movs	r0, #0
   3aeac:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3aeae:	e8d5 3fef 	ldaex	r3, [r5]
   3aeb2:	f023 0301 	bic.w	r3, r3, #1
   3aeb6:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3aeba:	2a00      	cmp	r2, #0
   3aebc:	d0e5      	beq.n	3ae8a <work_cancel+0x1c>
   3aebe:	e7f6      	b.n	3aeae <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3aec0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3aec2:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   3aec4:	f003 0303 	and.w	r3, r3, #3
   3aec8:	ea43 0300 	orr.w	r3, r3, r0
   3aecc:	600b      	str	r3, [r1, #0]
	list->tail = node;
   3aece:	bf08      	it	eq
   3aed0:	6051      	streq	r1, [r2, #4]
}
   3aed2:	e7e6      	b.n	3aea2 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3aed4:	6818      	ldr	r0, [r3, #0]
   3aed6:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3aed8:	f020 0303 	bic.w	r3, r0, #3
   3aedc:	e7d2      	b.n	3ae84 <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   3aede:	3010      	adds	r0, #16
   3aee0:	f000 f822 	bl	3af28 <z_abort_timeout>
		if (err) {
   3aee4:	2800      	cmp	r0, #0
   3aee6:	d0e0      	beq.n	3aeaa <work_cancel+0x3c>
			return -EALREADY;
   3aee8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3aeec:	e7cd      	b.n	3ae8a <work_cancel+0x1c>

0003aeee <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   3aeee:	2300      	movs	r3, #0
   3aef0:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   3aef4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3aef8:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   3aefa:	6283      	str	r3, [r0, #40]	; 0x28
}
   3aefc:	4770      	bx	lr

0003aefe <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   3aefe:	b510      	push	{r4, lr}
	__asm__ volatile(
   3af00:	f04f 0220 	mov.w	r2, #32
   3af04:	f3ef 8411 	mrs	r4, BASEPRI
   3af08:	f382 8811 	msr	BASEPRI, r2
   3af0c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   3af10:	6a83      	ldr	r3, [r0, #40]	; 0x28
   3af12:	b133      	cbz	r3, 3af22 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   3af14:	f7ff ffab 	bl	3ae6e <work_cancel>
	__asm__ volatile(
   3af18:	f384 8811 	msr	BASEPRI, r4
   3af1c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   3af20:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   3af22:	f06f 0015 	mvn.w	r0, #21
   3af26:	e7f7      	b.n	3af18 <k_delayed_work_cancel+0x1a>

0003af28 <z_abort_timeout>:
{
   3af28:	b510      	push	{r4, lr}
	__asm__ volatile(
   3af2a:	f04f 0220 	mov.w	r2, #32
   3af2e:	f3ef 8411 	mrs	r4, BASEPRI
   3af32:	f382 8811 	msr	BASEPRI, r2
   3af36:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   3af3a:	6803      	ldr	r3, [r0, #0]
   3af3c:	b13b      	cbz	r3, 3af4e <z_abort_timeout+0x26>
			remove_timeout(to);
   3af3e:	f7fb fb9f 	bl	36680 <remove_timeout>
			ret = 0;
   3af42:	2000      	movs	r0, #0
	__asm__ volatile(
   3af44:	f384 8811 	msr	BASEPRI, r4
   3af48:	f3bf 8f6f 	isb	sy
}
   3af4c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   3af4e:	f06f 0015 	mvn.w	r0, #21
   3af52:	e7f7      	b.n	3af44 <z_abort_timeout+0x1c>

0003af54 <z_get_next_timeout_expiry>:
{
   3af54:	b510      	push	{r4, lr}
	__asm__ volatile(
   3af56:	f04f 0320 	mov.w	r3, #32
   3af5a:	f3ef 8411 	mrs	r4, BASEPRI
   3af5e:	f383 8811 	msr	BASEPRI, r3
   3af62:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   3af66:	f7fb fba5 	bl	366b4 <next_timeout>
	__asm__ volatile(
   3af6a:	f384 8811 	msr	BASEPRI, r4
   3af6e:	f3bf 8f6f 	isb	sy
}
   3af72:	bd10      	pop	{r4, pc}

0003af74 <z_set_timeout_expiry>:
{
   3af74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3af76:	4604      	mov	r4, r0
   3af78:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   3af7a:	f04f 0320 	mov.w	r3, #32
   3af7e:	f3ef 8511 	mrs	r5, BASEPRI
   3af82:	f383 8811 	msr	BASEPRI, r3
   3af86:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   3af8a:	f7fb fb93 	bl	366b4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3af8e:	2801      	cmp	r0, #1
   3af90:	dd05      	ble.n	3af9e <z_set_timeout_expiry+0x2a>
   3af92:	42a0      	cmp	r0, r4
   3af94:	9901      	ldr	r1, [sp, #4]
   3af96:	dd02      	ble.n	3af9e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   3af98:	4620      	mov	r0, r4
   3af9a:	f7ea fc45 	bl	25828 <z_clock_set_timeout>
	__asm__ volatile(
   3af9e:	f385 8811 	msr	BASEPRI, r5
   3afa2:	f3bf 8f6f 	isb	sy
}
   3afa6:	b003      	add	sp, #12
   3afa8:	bd30      	pop	{r4, r5, pc}

0003afaa <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   3afaa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   3afac:	f7fb fca0 	bl	368f0 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3afb0:	bd08      	pop	{r3, pc}

0003afb2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   3afb2:	f7fb bc9d 	b.w	368f0 <z_tick_get>

0003afb6 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   3afb6:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3afb8:	1c4b      	adds	r3, r1, #1
   3afba:	bf08      	it	eq
   3afbc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   3afc0:	4604      	mov	r4, r0
   3afc2:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3afc4:	d013      	beq.n	3afee <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3afc6:	ea54 0105 	orrs.w	r1, r4, r5
   3afca:	d103      	bne.n	3afd4 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   3afcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   3afd0:	f7fb bc8e 	b.w	368f0 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3afd4:	f06f 0101 	mvn.w	r1, #1
   3afd8:	1a0a      	subs	r2, r1, r0
   3afda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3afde:	eb61 0305 	sbc.w	r3, r1, r5
   3afe2:	2a00      	cmp	r2, #0
   3afe4:	f173 0100 	sbcs.w	r1, r3, #0
   3afe8:	db02      	blt.n	3aff0 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   3afea:	4610      	mov	r0, r2
   3afec:	4619      	mov	r1, r3
}
   3afee:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   3aff0:	f7fb fc7e 	bl	368f0 <z_tick_get>
   3aff4:	2c01      	cmp	r4, #1
   3aff6:	f175 0300 	sbcs.w	r3, r5, #0
   3affa:	bfbc      	itt	lt
   3affc:	2401      	movlt	r4, #1
   3affe:	2500      	movlt	r5, #0
   3b000:	1820      	adds	r0, r4, r0
   3b002:	eb45 0101 	adc.w	r1, r5, r1
   3b006:	e7f2      	b.n	3afee <z_timeout_end_calc+0x38>

0003b008 <k_timer_init>:
	timer->status = 0U;
   3b008:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   3b00a:	e9c0 1208 	strd	r1, r2, [r0, #32]
   3b00e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   3b012:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   3b016:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   3b01a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   3b01c:	6343      	str	r3, [r0, #52]	; 0x34
}
   3b01e:	4770      	bx	lr

0003b020 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   3b020:	b510      	push	{r4, lr}
   3b022:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   3b024:	f7ff ff80 	bl	3af28 <z_abort_timeout>

	if (inactive) {
   3b028:	b9d8      	cbnz	r0, 3b062 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   3b02a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b02c:	b10b      	cbz	r3, 3b032 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3b02e:	4620      	mov	r0, r4
   3b030:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   3b032:	f104 0018 	add.w	r0, r4, #24
   3b036:	2100      	movs	r1, #0
   3b038:	f7ff fdef 	bl	3ac1a <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   3b03c:	4604      	mov	r4, r0
   3b03e:	b180      	cbz	r0, 3b062 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   3b040:	f7ff fdfb 	bl	3ac3a <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   3b044:	4620      	mov	r0, r4
   3b046:	f7ff fe4a 	bl	3acde <z_ready_thread>
	__asm__ volatile(
   3b04a:	f04f 0320 	mov.w	r3, #32
   3b04e:	f3ef 8011 	mrs	r0, BASEPRI
   3b052:	f383 8811 	msr	BASEPRI, r3
   3b056:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   3b05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   3b05e:	f7ff bdfc 	b.w	3ac5a <z_reschedule_irqlock>
   3b062:	bd10      	pop	{r4, pc}

0003b064 <z_impl_k_timer_status_get>:
}
#include <syscalls/k_timer_stop_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_get(struct k_timer *timer)
{
   3b064:	4603      	mov	r3, r0
   3b066:	f04f 0120 	mov.w	r1, #32
   3b06a:	f3ef 8211 	mrs	r2, BASEPRI
   3b06e:	f381 8811 	msr	BASEPRI, r1
   3b072:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;

	timer->status = 0U;
   3b076:	2100      	movs	r1, #0
	uint32_t result = timer->status;
   3b078:	6b00      	ldr	r0, [r0, #48]	; 0x30
	timer->status = 0U;
   3b07a:	6319      	str	r1, [r3, #48]	; 0x30
	__asm__ volatile(
   3b07c:	f382 8811 	msr	BASEPRI, r2
   3b080:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return result;
}
   3b084:	4770      	bx	lr

0003b086 <clear_event_registrations>:
	while (num_events--) {
   3b086:	2314      	movs	r3, #20
{
   3b088:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   3b08a:	2400      	movs	r4, #0
   3b08c:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   3b090:	4281      	cmp	r1, r0
   3b092:	d100      	bne.n	3b096 <clear_event_registrations+0x10>
}
   3b094:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   3b096:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   3b09a:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   3b09e:	f003 030f 	and.w	r3, r3, #15
   3b0a2:	2b02      	cmp	r3, #2
   3b0a4:	d80a      	bhi.n	3b0bc <clear_event_registrations+0x36>
   3b0a6:	b15b      	cbz	r3, 3b0c0 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   3b0a8:	f851 3c14 	ldr.w	r3, [r1, #-20]
   3b0ac:	b143      	cbz	r3, 3b0c0 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   3b0ae:	f851 5c10 	ldr.w	r5, [r1, #-16]
   3b0b2:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   3b0b4:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   3b0b6:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   3b0ba:	e001      	b.n	3b0c0 <clear_event_registrations+0x3a>
	switch (event->type) {
   3b0bc:	2b04      	cmp	r3, #4
   3b0be:	d0f3      	beq.n	3b0a8 <clear_event_registrations+0x22>
   3b0c0:	f382 8811 	msr	BASEPRI, r2
   3b0c4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3b0c8:	f04f 0320 	mov.w	r3, #32
   3b0cc:	f3ef 8211 	mrs	r2, BASEPRI
   3b0d0:	f383 8811 	msr	BASEPRI, r3
   3b0d4:	f3bf 8f6f 	isb	sy
   3b0d8:	3914      	subs	r1, #20
   3b0da:	e7d9      	b.n	3b090 <clear_event_registrations+0xa>

0003b0dc <k_work_submit_to_queue>:
{
   3b0dc:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3b0de:	f101 0308 	add.w	r3, r1, #8
   3b0e2:	e8d3 2fef 	ldaex	r2, [r3]
   3b0e6:	f042 0c01 	orr.w	ip, r2, #1
   3b0ea:	e8c3 cfee 	stlex	lr, ip, [r3]
   3b0ee:	f1be 0f00 	cmp.w	lr, #0
   3b0f2:	d1f6      	bne.n	3b0e2 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   3b0f4:	07d3      	lsls	r3, r2, #31
   3b0f6:	d403      	bmi.n	3b100 <k_work_submit_to_queue+0x24>
}
   3b0f8:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   3b0fc:	f7ff bd6f 	b.w	3abde <k_queue_append>
}
   3b100:	f85d fb04 	ldr.w	pc, [sp], #4

0003b104 <signal_poll_event>:
{
   3b104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   3b108:	6884      	ldr	r4, [r0, #8]
{
   3b10a:	4605      	mov	r5, r0
   3b10c:	460e      	mov	r6, r1
	if (poller) {
   3b10e:	b144      	cbz	r4, 3b122 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   3b110:	7863      	ldrb	r3, [r4, #1]
   3b112:	2b01      	cmp	r3, #1
   3b114:	d139      	bne.n	3b18a <signal_poll_event+0x86>
	if (!z_is_thread_pending(thread)) {
   3b116:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   3b11a:	f013 0302 	ands.w	r3, r3, #2
   3b11e:	d10a      	bne.n	3b136 <signal_poll_event+0x32>
		poller->is_polling = false;
   3b120:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   3b122:	2000      	movs	r0, #0
	event->state |= state;
   3b124:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   3b126:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   3b128:	f3c3 3104 	ubfx	r1, r3, #12, #5
   3b12c:	430e      	orrs	r6, r1
   3b12e:	f366 3310 	bfi	r3, r6, #12, #5
   3b132:	60eb      	str	r3, [r5, #12]
	return retcode;
   3b134:	e00d      	b.n	3b152 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   3b136:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3b13a:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   3b13e:	f06f 0001 	mvn.w	r0, #1
   3b142:	428b      	cmp	r3, r1
   3b144:	bf08      	it	eq
   3b146:	4282      	cmpeq	r2, r0
   3b148:	d106      	bne.n	3b158 <signal_poll_event+0x54>
		poller->is_polling = false;
   3b14a:	2300      	movs	r3, #0
		return -EAGAIN;
   3b14c:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   3b150:	7023      	strb	r3, [r4, #0]
}
   3b152:	b002      	add	sp, #8
   3b154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3b158:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
	z_unpend_thread(thread);
   3b15c:	9001      	str	r0, [sp, #4]
   3b15e:	f7ff fd9e 	bl	3ac9e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3b162:	2e08      	cmp	r6, #8
   3b164:	bf0c      	ite	eq
   3b166:	f06f 0303 	mvneq.w	r3, #3
   3b16a:	2300      	movne	r3, #0
   3b16c:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3b16e:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   3b172:	06db      	lsls	r3, r3, #27
   3b174:	d103      	bne.n	3b17e <signal_poll_event+0x7a>
	if (!z_is_thread_ready(thread)) {
   3b176:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   3b17a:	9801      	ldr	r0, [sp, #4]
   3b17c:	b10f      	cbz	r7, 3b182 <signal_poll_event+0x7e>
		poller->is_polling = false;
   3b17e:	2300      	movs	r3, #0
   3b180:	e7ce      	b.n	3b120 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   3b182:	f7ff fdac 	bl	3acde <z_ready_thread>
		poller->is_polling = false;
   3b186:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   3b188:	e7cb      	b.n	3b122 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   3b18a:	2b02      	cmp	r3, #2
   3b18c:	d1f7      	bne.n	3b17e <signal_poll_event+0x7a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   3b18e:	7823      	ldrb	r3, [r4, #0]
   3b190:	2b00      	cmp	r3, #0
   3b192:	d0c6      	beq.n	3b122 <signal_poll_event+0x1e>
   3b194:	f854 7c04 	ldr.w	r7, [r4, #-4]
   3b198:	2f00      	cmp	r7, #0
   3b19a:	d0f4      	beq.n	3b186 <signal_poll_event+0x82>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   3b19c:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   3b1a0:	f1a4 0110 	sub.w	r1, r4, #16
   3b1a4:	f104 0010 	add.w	r0, r4, #16
   3b1a8:	9101      	str	r1, [sp, #4]
   3b1aa:	f7ff febd 	bl	3af28 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   3b1ae:	4638      	mov	r0, r7
   3b1b0:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   3b1b2:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   3b1b6:	f7ff ff91 	bl	3b0dc <k_work_submit_to_queue>
		poller->is_polling = false;
   3b1ba:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   3b1be:	e7b0      	b.n	3b122 <signal_poll_event+0x1e>

0003b1c0 <add_event>:
{
   3b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b1c2:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3b1c4:	e9d0 2300 	ldrd	r2, r3, [r0]
   3b1c8:	4290      	cmp	r0, r2
   3b1ca:	4604      	mov	r4, r0
   3b1cc:	460d      	mov	r5, r1
   3b1ce:	d106      	bne.n	3b1de <add_event+0x1e>
	node->prev = list->tail;
   3b1d0:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   3b1d2:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   3b1d4:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   3b1d6:	6863      	ldr	r3, [r4, #4]
   3b1d8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3b1da:	6065      	str	r5, [r4, #4]
}
   3b1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   3b1de:	2b00      	cmp	r3, #0
   3b1e0:	d0f6      	beq.n	3b1d0 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   3b1e2:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3b1e4:	b100      	cbz	r0, 3b1e8 <add_event+0x28>
   3b1e6:	3864      	subs	r0, #100	; 0x64
   3b1e8:	b107      	cbz	r7, 3b1ec <add_event+0x2c>
   3b1ea:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   3b1ec:	4639      	mov	r1, r7
   3b1ee:	f7ff fd0b 	bl	3ac08 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   3b1f2:	2800      	cmp	r0, #0
   3b1f4:	d1ec      	bne.n	3b1d0 <add_event+0x10>
	return list->head == list;
   3b1f6:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3b1f8:	42b4      	cmp	r4, r6
   3b1fa:	d0e9      	beq.n	3b1d0 <add_event+0x10>
   3b1fc:	2e00      	cmp	r6, #0
   3b1fe:	bf38      	it	cc
   3b200:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3b202:	2e00      	cmp	r6, #0
   3b204:	d0e4      	beq.n	3b1d0 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   3b206:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3b208:	b101      	cbz	r1, 3b20c <add_event+0x4c>
   3b20a:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   3b20c:	4638      	mov	r0, r7
   3b20e:	f7ff fcfb 	bl	3ac08 <z_is_t1_higher_prio_than_t2>
   3b212:	b128      	cbz	r0, 3b220 <add_event+0x60>
	node->prev = successor->prev;
   3b214:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3b216:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   3b21a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   3b21c:	6075      	str	r5, [r6, #4]
			return;
   3b21e:	e7dd      	b.n	3b1dc <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   3b220:	6863      	ldr	r3, [r4, #4]
   3b222:	42b3      	cmp	r3, r6
   3b224:	d0d4      	beq.n	3b1d0 <add_event+0x10>
   3b226:	6836      	ldr	r6, [r6, #0]
   3b228:	e7eb      	b.n	3b202 <add_event+0x42>

0003b22a <register_events>:
{
   3b22a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   3b22e:	f04f 0a00 	mov.w	sl, #0
{
   3b232:	460e      	mov	r6, r1
   3b234:	4614      	mov	r4, r2
   3b236:	461f      	mov	r7, r3
   3b238:	4683      	mov	fp, r0
	int events_registered = 0;
   3b23a:	4655      	mov	r5, sl
	event->poller = NULL;
   3b23c:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   3b23e:	45b2      	cmp	sl, r6
   3b240:	db02      	blt.n	3b248 <register_events+0x1e>
}
   3b242:	4628      	mov	r0, r5
   3b244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b248:	f04f 0320 	mov.w	r3, #32
   3b24c:	f3ef 8911 	mrs	r9, BASEPRI
   3b250:	f383 8811 	msr	BASEPRI, r3
   3b254:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   3b258:	f89b 200d 	ldrb.w	r2, [fp, #13]
   3b25c:	f002 020f 	and.w	r2, r2, #15
   3b260:	2a02      	cmp	r2, #2
   3b262:	d006      	beq.n	3b272 <register_events+0x48>
   3b264:	2a04      	cmp	r2, #4
   3b266:	d008      	beq.n	3b27a <register_events+0x50>
   3b268:	2a01      	cmp	r2, #1
   3b26a:	d120      	bne.n	3b2ae <register_events+0x84>
		if (event->signal->signaled != 0U) {
   3b26c:	f8db 3010 	ldr.w	r3, [fp, #16]
   3b270:	e001      	b.n	3b276 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   3b272:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   3b276:	689b      	ldr	r3, [r3, #8]
   3b278:	e002      	b.n	3b280 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   3b27a:	f8db 3010 	ldr.w	r3, [fp, #16]
   3b27e:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   3b280:	b1ab      	cbz	r3, 3b2ae <register_events+0x84>
	event->state |= state;
   3b282:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   3b286:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   3b28a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   3b28e:	430a      	orrs	r2, r1
   3b290:	f362 3310 	bfi	r3, r2, #12, #5
   3b294:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   3b298:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   3b29c:	f389 8811 	msr	BASEPRI, r9
   3b2a0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3b2a4:	f10a 0a01 	add.w	sl, sl, #1
   3b2a8:	f10b 0b14 	add.w	fp, fp, #20
   3b2ac:	e7c7      	b.n	3b23e <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   3b2ae:	2f00      	cmp	r7, #0
   3b2b0:	d1f4      	bne.n	3b29c <register_events+0x72>
   3b2b2:	7823      	ldrb	r3, [r4, #0]
   3b2b4:	2b00      	cmp	r3, #0
   3b2b6:	d0f1      	beq.n	3b29c <register_events+0x72>
	switch (event->type) {
   3b2b8:	f89b 300d 	ldrb.w	r3, [fp, #13]
   3b2bc:	f003 030f 	and.w	r3, r3, #15
   3b2c0:	2b02      	cmp	r3, #2
   3b2c2:	d008      	beq.n	3b2d6 <register_events+0xac>
   3b2c4:	2b04      	cmp	r3, #4
   3b2c6:	d006      	beq.n	3b2d6 <register_events+0xac>
   3b2c8:	2b01      	cmp	r3, #1
   3b2ca:	d10b      	bne.n	3b2e4 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   3b2cc:	4622      	mov	r2, r4
   3b2ce:	4659      	mov	r1, fp
   3b2d0:	f8db 0010 	ldr.w	r0, [fp, #16]
   3b2d4:	e004      	b.n	3b2e0 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   3b2d6:	4622      	mov	r2, r4
   3b2d8:	4659      	mov	r1, fp
   3b2da:	f8db 0010 	ldr.w	r0, [fp, #16]
   3b2de:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   3b2e0:	f7ff ff6e 	bl	3b1c0 <add_event>
	event->poller = poller;
   3b2e4:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   3b2e8:	3501      	adds	r5, #1
   3b2ea:	e7d7      	b.n	3b29c <register_events+0x72>

0003b2ec <z_handle_obj_poll_events>:
{
   3b2ec:	4603      	mov	r3, r0
	return list->head == list;
   3b2ee:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3b2f0:	4283      	cmp	r3, r0
   3b2f2:	d008      	beq.n	3b306 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   3b2f4:	e9d0 3200 	ldrd	r3, r2, [r0]
   3b2f8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3b2fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3b2fc:	2300      	movs	r3, #0
	node->prev = NULL;
   3b2fe:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   3b302:	f7ff beff 	b.w	3b104 <signal_poll_event>
}
   3b306:	4770      	bx	lr

0003b308 <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   3b308:	2208      	movs	r2, #8
{
   3b30a:	b530      	push	{r4, r5, lr}
   3b30c:	188a      	adds	r2, r1, r2
   3b30e:	b085      	sub	sp, #20
   3b310:	d207      	bcs.n	3b322 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   3b312:	2400      	movs	r4, #0
   3b314:	2500      	movs	r5, #0
   3b316:	a902      	add	r1, sp, #8
   3b318:	e9cd 4500 	strd	r4, r5, [sp]
   3b31c:	f7ff fba3 	bl	3aa66 <k_mem_pool_alloc>
   3b320:	b110      	cbz	r0, 3b328 <k_mem_pool_malloc+0x20>
		return NULL;
   3b322:	2000      	movs	r0, #0
}
   3b324:	b005      	add	sp, #20
   3b326:	bd30      	pop	{r4, r5, pc}
   3b328:	9a02      	ldr	r2, [sp, #8]
   3b32a:	ab02      	add	r3, sp, #8
   3b32c:	cb03      	ldmia	r3!, {r0, r1}
   3b32e:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   3b330:	9802      	ldr	r0, [sp, #8]
   3b332:	6051      	str	r1, [r2, #4]
   3b334:	3008      	adds	r0, #8
   3b336:	e7f5      	b.n	3b324 <k_mem_pool_malloc+0x1c>

0003b338 <k_free>:
	if (ptr != NULL) {
   3b338:	b110      	cbz	r0, 3b340 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   3b33a:	3808      	subs	r0, #8
   3b33c:	f7ff bbac 	b.w	3aa98 <k_mem_pool_free_id>
}
   3b340:	4770      	bx	lr

0003b342 <k_calloc>:
{
   3b342:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   3b344:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   3b348:	b118      	cbz	r0, 3b352 <k_calloc+0x10>
   3b34a:	fbb2 f0f0 	udiv	r0, r2, r0
   3b34e:	4281      	cmp	r1, r0
   3b350:	d10c      	bne.n	3b36c <k_calloc+0x2a>
	ret = k_malloc(bounds);
   3b352:	4610      	mov	r0, r2
   3b354:	9201      	str	r2, [sp, #4]
   3b356:	f7fb fbeb 	bl	36b30 <k_malloc>
	if (ret != NULL) {
   3b35a:	4604      	mov	r4, r0
   3b35c:	b118      	cbz	r0, 3b366 <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   3b35e:	2100      	movs	r1, #0
   3b360:	9a01      	ldr	r2, [sp, #4]
   3b362:	f000 f846 	bl	3b3f2 <memset>
}
   3b366:	4620      	mov	r0, r4
   3b368:	b002      	add	sp, #8
   3b36a:	bd10      	pop	{r4, pc}
		return NULL;
   3b36c:	2400      	movs	r4, #0
   3b36e:	e7fa      	b.n	3b366 <k_calloc+0x24>

0003b370 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   3b370:	4770      	bx	lr

0003b372 <atoi>:
   3b372:	220a      	movs	r2, #10
   3b374:	2100      	movs	r1, #0
   3b376:	f7fc b845 	b.w	37404 <strtol>

0003b37a <memchr>:
   3b37a:	b2c9      	uxtb	r1, r1
   3b37c:	4402      	add	r2, r0
   3b37e:	b510      	push	{r4, lr}
   3b380:	4290      	cmp	r0, r2
   3b382:	4603      	mov	r3, r0
   3b384:	d101      	bne.n	3b38a <memchr+0x10>
   3b386:	2300      	movs	r3, #0
   3b388:	e003      	b.n	3b392 <memchr+0x18>
   3b38a:	781c      	ldrb	r4, [r3, #0]
   3b38c:	3001      	adds	r0, #1
   3b38e:	428c      	cmp	r4, r1
   3b390:	d1f6      	bne.n	3b380 <memchr+0x6>
   3b392:	4618      	mov	r0, r3
   3b394:	bd10      	pop	{r4, pc}

0003b396 <memcmp>:
   3b396:	b530      	push	{r4, r5, lr}
   3b398:	3901      	subs	r1, #1
   3b39a:	2400      	movs	r4, #0
   3b39c:	42a2      	cmp	r2, r4
   3b39e:	d101      	bne.n	3b3a4 <memcmp+0xe>
   3b3a0:	2000      	movs	r0, #0
   3b3a2:	e005      	b.n	3b3b0 <memcmp+0x1a>
   3b3a4:	5d03      	ldrb	r3, [r0, r4]
   3b3a6:	3401      	adds	r4, #1
   3b3a8:	5d0d      	ldrb	r5, [r1, r4]
   3b3aa:	42ab      	cmp	r3, r5
   3b3ac:	d0f6      	beq.n	3b39c <memcmp+0x6>
   3b3ae:	1b58      	subs	r0, r3, r5
   3b3b0:	bd30      	pop	{r4, r5, pc}

0003b3b2 <memcpy>:
   3b3b2:	440a      	add	r2, r1
   3b3b4:	1e43      	subs	r3, r0, #1
   3b3b6:	4291      	cmp	r1, r2
   3b3b8:	d100      	bne.n	3b3bc <memcpy+0xa>
   3b3ba:	4770      	bx	lr
   3b3bc:	b510      	push	{r4, lr}
   3b3be:	f811 4b01 	ldrb.w	r4, [r1], #1
   3b3c2:	4291      	cmp	r1, r2
   3b3c4:	f803 4f01 	strb.w	r4, [r3, #1]!
   3b3c8:	d1f9      	bne.n	3b3be <memcpy+0xc>
   3b3ca:	bd10      	pop	{r4, pc}

0003b3cc <__memcpy_chk>:
   3b3cc:	429a      	cmp	r2, r3
   3b3ce:	b508      	push	{r3, lr}
   3b3d0:	d901      	bls.n	3b3d6 <__memcpy_chk+0xa>
   3b3d2:	f7eb fa39 	bl	26848 <__chk_fail>
   3b3d6:	4281      	cmp	r1, r0
   3b3d8:	d804      	bhi.n	3b3e4 <__memcpy_chk+0x18>
   3b3da:	188b      	adds	r3, r1, r2
   3b3dc:	4298      	cmp	r0, r3
   3b3de:	d3f8      	bcc.n	3b3d2 <__memcpy_chk+0x6>
   3b3e0:	4281      	cmp	r1, r0
   3b3e2:	d102      	bne.n	3b3ea <__memcpy_chk+0x1e>
   3b3e4:	1883      	adds	r3, r0, r2
   3b3e6:	4299      	cmp	r1, r3
   3b3e8:	d3f3      	bcc.n	3b3d2 <__memcpy_chk+0x6>
   3b3ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3b3ee:	f7ff bfe0 	b.w	3b3b2 <memcpy>

0003b3f2 <memset>:
   3b3f2:	4402      	add	r2, r0
   3b3f4:	4603      	mov	r3, r0
   3b3f6:	4293      	cmp	r3, r2
   3b3f8:	d100      	bne.n	3b3fc <memset+0xa>
   3b3fa:	4770      	bx	lr
   3b3fc:	f803 1b01 	strb.w	r1, [r3], #1
   3b400:	e7f9      	b.n	3b3f6 <memset+0x4>

0003b402 <__cvt>:
   3b402:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   3b406:	ec55 4b10 	vmov	r4, r5, d0
   3b40a:	2d00      	cmp	r5, #0
   3b40c:	460e      	mov	r6, r1
   3b40e:	4619      	mov	r1, r3
   3b410:	462b      	mov	r3, r5
   3b412:	bfb4      	ite	lt
   3b414:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   3b418:	2300      	movge	r3, #0
   3b41a:	4691      	mov	r9, r2
   3b41c:	bfbf      	itttt	lt
   3b41e:	4622      	movlt	r2, r4
   3b420:	461d      	movlt	r5, r3
   3b422:	232d      	movlt	r3, #45	; 0x2d
   3b424:	4614      	movlt	r4, r2
   3b426:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   3b42a:	700b      	strb	r3, [r1, #0]
   3b42c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3b42e:	f023 0820 	bic.w	r8, r3, #32
   3b432:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   3b436:	d005      	beq.n	3b444 <__cvt+0x42>
   3b438:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   3b43c:	d100      	bne.n	3b440 <__cvt+0x3e>
   3b43e:	3601      	adds	r6, #1
   3b440:	2102      	movs	r1, #2
   3b442:	e000      	b.n	3b446 <__cvt+0x44>
   3b444:	2103      	movs	r1, #3
   3b446:	ab03      	add	r3, sp, #12
   3b448:	4632      	mov	r2, r6
   3b44a:	9301      	str	r3, [sp, #4]
   3b44c:	ab02      	add	r3, sp, #8
   3b44e:	ec45 4b10 	vmov	d0, r4, r5
   3b452:	9300      	str	r3, [sp, #0]
   3b454:	4653      	mov	r3, sl
   3b456:	f7e1 fe13 	bl	1d080 <_dtoa_r>
   3b45a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   3b45e:	4607      	mov	r7, r0
   3b460:	d102      	bne.n	3b468 <__cvt+0x66>
   3b462:	f019 0f01 	tst.w	r9, #1
   3b466:	d022      	beq.n	3b4ae <__cvt+0xac>
   3b468:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   3b46c:	eb07 0906 	add.w	r9, r7, r6
   3b470:	d110      	bne.n	3b494 <__cvt+0x92>
   3b472:	783b      	ldrb	r3, [r7, #0]
   3b474:	2b30      	cmp	r3, #48	; 0x30
   3b476:	d10a      	bne.n	3b48e <__cvt+0x8c>
   3b478:	2200      	movs	r2, #0
   3b47a:	2300      	movs	r3, #0
   3b47c:	4620      	mov	r0, r4
   3b47e:	4629      	mov	r1, r5
   3b480:	f7e1 fd7c 	bl	1cf7c <__aeabi_dcmpeq>
   3b484:	b918      	cbnz	r0, 3b48e <__cvt+0x8c>
   3b486:	f1c6 0601 	rsb	r6, r6, #1
   3b48a:	f8ca 6000 	str.w	r6, [sl]
   3b48e:	f8da 3000 	ldr.w	r3, [sl]
   3b492:	4499      	add	r9, r3
   3b494:	2200      	movs	r2, #0
   3b496:	2300      	movs	r3, #0
   3b498:	4620      	mov	r0, r4
   3b49a:	4629      	mov	r1, r5
   3b49c:	f7e1 fd6e 	bl	1cf7c <__aeabi_dcmpeq>
   3b4a0:	b108      	cbz	r0, 3b4a6 <__cvt+0xa4>
   3b4a2:	f8cd 900c 	str.w	r9, [sp, #12]
   3b4a6:	2230      	movs	r2, #48	; 0x30
   3b4a8:	9b03      	ldr	r3, [sp, #12]
   3b4aa:	454b      	cmp	r3, r9
   3b4ac:	d307      	bcc.n	3b4be <__cvt+0xbc>
   3b4ae:	9b03      	ldr	r3, [sp, #12]
   3b4b0:	4638      	mov	r0, r7
   3b4b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3b4b4:	1bdb      	subs	r3, r3, r7
   3b4b6:	6013      	str	r3, [r2, #0]
   3b4b8:	b004      	add	sp, #16
   3b4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3b4be:	1c59      	adds	r1, r3, #1
   3b4c0:	9103      	str	r1, [sp, #12]
   3b4c2:	701a      	strb	r2, [r3, #0]
   3b4c4:	e7f0      	b.n	3b4a8 <__cvt+0xa6>

0003b4c6 <__exponent>:
   3b4c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3b4c8:	2900      	cmp	r1, #0
   3b4ca:	4603      	mov	r3, r0
   3b4cc:	bfb8      	it	lt
   3b4ce:	4249      	neglt	r1, r1
   3b4d0:	f803 2b02 	strb.w	r2, [r3], #2
   3b4d4:	bfb4      	ite	lt
   3b4d6:	222d      	movlt	r2, #45	; 0x2d
   3b4d8:	222b      	movge	r2, #43	; 0x2b
   3b4da:	2909      	cmp	r1, #9
   3b4dc:	7042      	strb	r2, [r0, #1]
   3b4de:	dd2a      	ble.n	3b536 <__exponent+0x70>
   3b4e0:	f10d 0407 	add.w	r4, sp, #7
   3b4e4:	270a      	movs	r7, #10
   3b4e6:	46a4      	mov	ip, r4
   3b4e8:	460a      	mov	r2, r1
   3b4ea:	46a6      	mov	lr, r4
   3b4ec:	3c01      	subs	r4, #1
   3b4ee:	2a63      	cmp	r2, #99	; 0x63
   3b4f0:	fb91 f6f7 	sdiv	r6, r1, r7
   3b4f4:	fb07 1516 	mls	r5, r7, r6, r1
   3b4f8:	4631      	mov	r1, r6
   3b4fa:	f105 0530 	add.w	r5, r5, #48	; 0x30
   3b4fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
   3b502:	dcf1      	bgt.n	3b4e8 <__exponent+0x22>
   3b504:	3130      	adds	r1, #48	; 0x30
   3b506:	f1ae 0502 	sub.w	r5, lr, #2
   3b50a:	f804 1c01 	strb.w	r1, [r4, #-1]
   3b50e:	1c44      	adds	r4, r0, #1
   3b510:	4629      	mov	r1, r5
   3b512:	4561      	cmp	r1, ip
   3b514:	d30a      	bcc.n	3b52c <__exponent+0x66>
   3b516:	f10d 0209 	add.w	r2, sp, #9
   3b51a:	eba2 020e 	sub.w	r2, r2, lr
   3b51e:	4565      	cmp	r5, ip
   3b520:	bf88      	it	hi
   3b522:	2200      	movhi	r2, #0
   3b524:	4413      	add	r3, r2
   3b526:	1a18      	subs	r0, r3, r0
   3b528:	b003      	add	sp, #12
   3b52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3b52c:	f811 2b01 	ldrb.w	r2, [r1], #1
   3b530:	f804 2f01 	strb.w	r2, [r4, #1]!
   3b534:	e7ed      	b.n	3b512 <__exponent+0x4c>
   3b536:	2330      	movs	r3, #48	; 0x30
   3b538:	3130      	adds	r1, #48	; 0x30
   3b53a:	7083      	strb	r3, [r0, #2]
   3b53c:	1d03      	adds	r3, r0, #4
   3b53e:	70c1      	strb	r1, [r0, #3]
   3b540:	e7f1      	b.n	3b526 <__exponent+0x60>

0003b542 <_printf_common>:
   3b542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b546:	4616      	mov	r6, r2
   3b548:	4699      	mov	r9, r3
   3b54a:	688a      	ldr	r2, [r1, #8]
   3b54c:	4607      	mov	r7, r0
   3b54e:	690b      	ldr	r3, [r1, #16]
   3b550:	460c      	mov	r4, r1
   3b552:	f8dd 8020 	ldr.w	r8, [sp, #32]
   3b556:	4293      	cmp	r3, r2
   3b558:	bfb8      	it	lt
   3b55a:	4613      	movlt	r3, r2
   3b55c:	6033      	str	r3, [r6, #0]
   3b55e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   3b562:	b10a      	cbz	r2, 3b568 <_printf_common+0x26>
   3b564:	3301      	adds	r3, #1
   3b566:	6033      	str	r3, [r6, #0]
   3b568:	6823      	ldr	r3, [r4, #0]
   3b56a:	0699      	lsls	r1, r3, #26
   3b56c:	bf42      	ittt	mi
   3b56e:	6833      	ldrmi	r3, [r6, #0]
   3b570:	3302      	addmi	r3, #2
   3b572:	6033      	strmi	r3, [r6, #0]
   3b574:	6825      	ldr	r5, [r4, #0]
   3b576:	f015 0506 	ands.w	r5, r5, #6
   3b57a:	d106      	bne.n	3b58a <_printf_common+0x48>
   3b57c:	f104 0a19 	add.w	sl, r4, #25
   3b580:	68e3      	ldr	r3, [r4, #12]
   3b582:	6832      	ldr	r2, [r6, #0]
   3b584:	1a9b      	subs	r3, r3, r2
   3b586:	42ab      	cmp	r3, r5
   3b588:	dc29      	bgt.n	3b5de <_printf_common+0x9c>
   3b58a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   3b58e:	1e13      	subs	r3, r2, #0
   3b590:	6822      	ldr	r2, [r4, #0]
   3b592:	bf18      	it	ne
   3b594:	2301      	movne	r3, #1
   3b596:	0692      	lsls	r2, r2, #26
   3b598:	d42e      	bmi.n	3b5f8 <_printf_common+0xb6>
   3b59a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3b59e:	4649      	mov	r1, r9
   3b5a0:	4638      	mov	r0, r7
   3b5a2:	47c0      	blx	r8
   3b5a4:	3001      	adds	r0, #1
   3b5a6:	d021      	beq.n	3b5ec <_printf_common+0xaa>
   3b5a8:	6823      	ldr	r3, [r4, #0]
   3b5aa:	341a      	adds	r4, #26
   3b5ac:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   3b5b0:	f003 0306 	and.w	r3, r3, #6
   3b5b4:	6832      	ldr	r2, [r6, #0]
   3b5b6:	2600      	movs	r6, #0
   3b5b8:	2b04      	cmp	r3, #4
   3b5ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
   3b5be:	bf08      	it	eq
   3b5c0:	1aad      	subeq	r5, r5, r2
   3b5c2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   3b5c6:	bf14      	ite	ne
   3b5c8:	2500      	movne	r5, #0
   3b5ca:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3b5ce:	4293      	cmp	r3, r2
   3b5d0:	bfc4      	itt	gt
   3b5d2:	1a9b      	subgt	r3, r3, r2
   3b5d4:	18ed      	addgt	r5, r5, r3
   3b5d6:	42b5      	cmp	r5, r6
   3b5d8:	d11a      	bne.n	3b610 <_printf_common+0xce>
   3b5da:	2000      	movs	r0, #0
   3b5dc:	e008      	b.n	3b5f0 <_printf_common+0xae>
   3b5de:	2301      	movs	r3, #1
   3b5e0:	4652      	mov	r2, sl
   3b5e2:	4649      	mov	r1, r9
   3b5e4:	4638      	mov	r0, r7
   3b5e6:	47c0      	blx	r8
   3b5e8:	3001      	adds	r0, #1
   3b5ea:	d103      	bne.n	3b5f4 <_printf_common+0xb2>
   3b5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3b5f4:	3501      	adds	r5, #1
   3b5f6:	e7c3      	b.n	3b580 <_printf_common+0x3e>
   3b5f8:	18e1      	adds	r1, r4, r3
   3b5fa:	1c5a      	adds	r2, r3, #1
   3b5fc:	2030      	movs	r0, #48	; 0x30
   3b5fe:	3302      	adds	r3, #2
   3b600:	4422      	add	r2, r4
   3b602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   3b606:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   3b60a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   3b60e:	e7c4      	b.n	3b59a <_printf_common+0x58>
   3b610:	2301      	movs	r3, #1
   3b612:	4622      	mov	r2, r4
   3b614:	4649      	mov	r1, r9
   3b616:	4638      	mov	r0, r7
   3b618:	47c0      	blx	r8
   3b61a:	3001      	adds	r0, #1
   3b61c:	d0e6      	beq.n	3b5ec <_printf_common+0xaa>
   3b61e:	3601      	adds	r6, #1
   3b620:	e7d9      	b.n	3b5d6 <_printf_common+0x94>

0003b622 <__sprintf_chk>:
   3b622:	b408      	push	{r3}
   3b624:	b517      	push	{r0, r1, r2, r4, lr}
   3b626:	ab05      	add	r3, sp, #20
   3b628:	1e14      	subs	r4, r2, #0
   3b62a:	f853 1b04 	ldr.w	r1, [r3], #4
   3b62e:	9301      	str	r3, [sp, #4]
   3b630:	da07      	bge.n	3b642 <__sprintf_chk+0x20>
   3b632:	461a      	mov	r2, r3
   3b634:	f7fb ff98 	bl	37568 <vsiprintf>
   3b638:	b003      	add	sp, #12
   3b63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3b63e:	b001      	add	sp, #4
   3b640:	4770      	bx	lr
   3b642:	460a      	mov	r2, r1
   3b644:	4621      	mov	r1, r4
   3b646:	f7fb ff6b 	bl	37520 <vsniprintf>
   3b64a:	2800      	cmp	r0, #0
   3b64c:	dbf4      	blt.n	3b638 <__sprintf_chk+0x16>
   3b64e:	42a0      	cmp	r0, r4
   3b650:	d3f2      	bcc.n	3b638 <__sprintf_chk+0x16>
   3b652:	f7eb f8f9 	bl	26848 <__chk_fail>

0003b656 <strchr>:
   3b656:	b2c9      	uxtb	r1, r1
   3b658:	4603      	mov	r3, r0
   3b65a:	f810 2b01 	ldrb.w	r2, [r0], #1
   3b65e:	b11a      	cbz	r2, 3b668 <strchr+0x12>
   3b660:	428a      	cmp	r2, r1
   3b662:	d1f9      	bne.n	3b658 <strchr+0x2>
   3b664:	4618      	mov	r0, r3
   3b666:	4770      	bx	lr
   3b668:	2900      	cmp	r1, #0
   3b66a:	bf18      	it	ne
   3b66c:	2300      	movne	r3, #0
   3b66e:	e7f9      	b.n	3b664 <strchr+0xe>

0003b670 <strcpy>:
   3b670:	4603      	mov	r3, r0
   3b672:	f811 2b01 	ldrb.w	r2, [r1], #1
   3b676:	f803 2b01 	strb.w	r2, [r3], #1
   3b67a:	2a00      	cmp	r2, #0
   3b67c:	d1f9      	bne.n	3b672 <strcpy+0x2>
   3b67e:	4770      	bx	lr

0003b680 <strncmp>:
   3b680:	b510      	push	{r4, lr}
   3b682:	b16a      	cbz	r2, 3b6a0 <strncmp+0x20>
   3b684:	3901      	subs	r1, #1
   3b686:	1884      	adds	r4, r0, r2
   3b688:	f810 3b01 	ldrb.w	r3, [r0], #1
   3b68c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   3b690:	4293      	cmp	r3, r2
   3b692:	d103      	bne.n	3b69c <strncmp+0x1c>
   3b694:	42a0      	cmp	r0, r4
   3b696:	d001      	beq.n	3b69c <strncmp+0x1c>
   3b698:	2b00      	cmp	r3, #0
   3b69a:	d1f5      	bne.n	3b688 <strncmp+0x8>
   3b69c:	1a98      	subs	r0, r3, r2
   3b69e:	bd10      	pop	{r4, pc}
   3b6a0:	4610      	mov	r0, r2
   3b6a2:	e7fc      	b.n	3b69e <strncmp+0x1e>

0003b6a4 <strncpy>:
   3b6a4:	3901      	subs	r1, #1
   3b6a6:	4603      	mov	r3, r0
   3b6a8:	b510      	push	{r4, lr}
   3b6aa:	b132      	cbz	r2, 3b6ba <strncpy+0x16>
   3b6ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   3b6b0:	3a01      	subs	r2, #1
   3b6b2:	f803 4b01 	strb.w	r4, [r3], #1
   3b6b6:	2c00      	cmp	r4, #0
   3b6b8:	d1f7      	bne.n	3b6aa <strncpy+0x6>
   3b6ba:	441a      	add	r2, r3
   3b6bc:	2100      	movs	r1, #0
   3b6be:	4293      	cmp	r3, r2
   3b6c0:	d100      	bne.n	3b6c4 <strncpy+0x20>
   3b6c2:	bd10      	pop	{r4, pc}
   3b6c4:	f803 1b01 	strb.w	r1, [r3], #1
   3b6c8:	e7f9      	b.n	3b6be <strncpy+0x1a>

0003b6ca <__strncpy_chk>:
   3b6ca:	429a      	cmp	r2, r3
   3b6cc:	b508      	push	{r3, lr}
   3b6ce:	d901      	bls.n	3b6d4 <__strncpy_chk+0xa>
   3b6d0:	f7eb f8ba 	bl	26848 <__chk_fail>
   3b6d4:	4281      	cmp	r1, r0
   3b6d6:	d804      	bhi.n	3b6e2 <__strncpy_chk+0x18>
   3b6d8:	188b      	adds	r3, r1, r2
   3b6da:	4298      	cmp	r0, r3
   3b6dc:	d3f8      	bcc.n	3b6d0 <__strncpy_chk+0x6>
   3b6de:	4281      	cmp	r1, r0
   3b6e0:	d102      	bne.n	3b6e8 <__strncpy_chk+0x1e>
   3b6e2:	1883      	adds	r3, r0, r2
   3b6e4:	4299      	cmp	r1, r3
   3b6e6:	d3f3      	bcc.n	3b6d0 <__strncpy_chk+0x6>
   3b6e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3b6ec:	f7ff bfda 	b.w	3b6a4 <strncpy>

0003b6f0 <strrchr>:
   3b6f0:	b538      	push	{r3, r4, r5, lr}
   3b6f2:	4603      	mov	r3, r0
   3b6f4:	460c      	mov	r4, r1
   3b6f6:	b969      	cbnz	r1, 3b714 <strrchr+0x24>
   3b6f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3b6fc:	f7ff bfab 	b.w	3b656 <strchr>
   3b700:	1c43      	adds	r3, r0, #1
   3b702:	4605      	mov	r5, r0
   3b704:	4621      	mov	r1, r4
   3b706:	4618      	mov	r0, r3
   3b708:	f7ff ffa5 	bl	3b656 <strchr>
   3b70c:	2800      	cmp	r0, #0
   3b70e:	d1f7      	bne.n	3b700 <strrchr+0x10>
   3b710:	4628      	mov	r0, r5
   3b712:	bd38      	pop	{r3, r4, r5, pc}
   3b714:	2500      	movs	r5, #0
   3b716:	e7f5      	b.n	3b704 <strrchr+0x14>

0003b718 <strstr>:
   3b718:	b5f0      	push	{r4, r5, r6, r7, lr}
   3b71a:	780c      	ldrb	r4, [r1, #0]
   3b71c:	b164      	cbz	r4, 3b738 <strstr+0x20>
   3b71e:	4603      	mov	r3, r0
   3b720:	781a      	ldrb	r2, [r3, #0]
   3b722:	4618      	mov	r0, r3
   3b724:	1c5e      	adds	r6, r3, #1
   3b726:	b90a      	cbnz	r2, 3b72c <strstr+0x14>
   3b728:	4610      	mov	r0, r2
   3b72a:	e005      	b.n	3b738 <strstr+0x20>
   3b72c:	4294      	cmp	r4, r2
   3b72e:	d108      	bne.n	3b742 <strstr+0x2a>
   3b730:	460d      	mov	r5, r1
   3b732:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   3b736:	b902      	cbnz	r2, 3b73a <strstr+0x22>
   3b738:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3b73a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   3b73e:	4297      	cmp	r7, r2
   3b740:	d0f7      	beq.n	3b732 <strstr+0x1a>
   3b742:	4633      	mov	r3, r6
   3b744:	e7ec      	b.n	3b720 <strstr+0x8>

0003b746 <_vsniprintf_r>:
   3b746:	b530      	push	{r4, r5, lr}
   3b748:	1e14      	subs	r4, r2, #0
   3b74a:	4605      	mov	r5, r0
   3b74c:	b09b      	sub	sp, #108	; 0x6c
   3b74e:	4618      	mov	r0, r3
   3b750:	da05      	bge.n	3b75e <_vsniprintf_r+0x18>
   3b752:	238b      	movs	r3, #139	; 0x8b
   3b754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b758:	602b      	str	r3, [r5, #0]
   3b75a:	b01b      	add	sp, #108	; 0x6c
   3b75c:	bd30      	pop	{r4, r5, pc}
   3b75e:	f44f 7302 	mov.w	r3, #520	; 0x208
   3b762:	4602      	mov	r2, r0
   3b764:	9100      	str	r1, [sp, #0]
   3b766:	4628      	mov	r0, r5
   3b768:	f8ad 300c 	strh.w	r3, [sp, #12]
   3b76c:	bf14      	ite	ne
   3b76e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   3b772:	4623      	moveq	r3, r4
   3b774:	9104      	str	r1, [sp, #16]
   3b776:	4669      	mov	r1, sp
   3b778:	9302      	str	r3, [sp, #8]
   3b77a:	9305      	str	r3, [sp, #20]
   3b77c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3b780:	f8ad 300e 	strh.w	r3, [sp, #14]
   3b784:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   3b786:	f7fb fffd 	bl	37784 <_svfiprintf_r>
   3b78a:	1c43      	adds	r3, r0, #1
   3b78c:	bfbc      	itt	lt
   3b78e:	238b      	movlt	r3, #139	; 0x8b
   3b790:	602b      	strlt	r3, [r5, #0]
   3b792:	2c00      	cmp	r4, #0
   3b794:	d0e1      	beq.n	3b75a <_vsniprintf_r+0x14>
   3b796:	9b00      	ldr	r3, [sp, #0]
   3b798:	2200      	movs	r2, #0
   3b79a:	701a      	strb	r2, [r3, #0]
   3b79c:	e7dd      	b.n	3b75a <_vsniprintf_r+0x14>

0003b79e <quorem>:
   3b79e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b7a2:	6903      	ldr	r3, [r0, #16]
   3b7a4:	4607      	mov	r7, r0
   3b7a6:	690c      	ldr	r4, [r1, #16]
   3b7a8:	42a3      	cmp	r3, r4
   3b7aa:	f2c0 8085 	blt.w	3b8b8 <quorem+0x11a>
   3b7ae:	3c01      	subs	r4, #1
   3b7b0:	f100 0514 	add.w	r5, r0, #20
   3b7b4:	f101 0814 	add.w	r8, r1, #20
   3b7b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3b7bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3b7c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   3b7c4:	9301      	str	r3, [sp, #4]
   3b7c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   3b7ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   3b7ce:	3301      	adds	r3, #1
   3b7d0:	429a      	cmp	r2, r3
   3b7d2:	fbb2 f6f3 	udiv	r6, r2, r3
   3b7d6:	d333      	bcc.n	3b840 <quorem+0xa2>
   3b7d8:	f04f 0e00 	mov.w	lr, #0
   3b7dc:	4640      	mov	r0, r8
   3b7de:	46ac      	mov	ip, r5
   3b7e0:	46f2      	mov	sl, lr
   3b7e2:	f850 2b04 	ldr.w	r2, [r0], #4
   3b7e6:	b293      	uxth	r3, r2
   3b7e8:	4581      	cmp	r9, r0
   3b7ea:	ea4f 4212 	mov.w	r2, r2, lsr #16
   3b7ee:	fb06 e303 	mla	r3, r6, r3, lr
   3b7f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   3b7f6:	b29b      	uxth	r3, r3
   3b7f8:	fb06 e202 	mla	r2, r6, r2, lr
   3b7fc:	ebaa 0303 	sub.w	r3, sl, r3
   3b800:	f8dc a000 	ldr.w	sl, [ip]
   3b804:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   3b808:	fa1f fa8a 	uxth.w	sl, sl
   3b80c:	4453      	add	r3, sl
   3b80e:	fa1f fa82 	uxth.w	sl, r2
   3b812:	f8dc 2000 	ldr.w	r2, [ip]
   3b816:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   3b81a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   3b81e:	b29b      	uxth	r3, r3
   3b820:	ea4f 4a22 	mov.w	sl, r2, asr #16
   3b824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3b828:	f84c 3b04 	str.w	r3, [ip], #4
   3b82c:	d2d9      	bcs.n	3b7e2 <quorem+0x44>
   3b82e:	f855 300b 	ldr.w	r3, [r5, fp]
   3b832:	b92b      	cbnz	r3, 3b840 <quorem+0xa2>
   3b834:	9b01      	ldr	r3, [sp, #4]
   3b836:	3b04      	subs	r3, #4
   3b838:	429d      	cmp	r5, r3
   3b83a:	461a      	mov	r2, r3
   3b83c:	d330      	bcc.n	3b8a0 <quorem+0x102>
   3b83e:	613c      	str	r4, [r7, #16]
   3b840:	4638      	mov	r0, r7
   3b842:	f000 fa18 	bl	3bc76 <__mcmp>
   3b846:	2800      	cmp	r0, #0
   3b848:	db26      	blt.n	3b898 <quorem+0xfa>
   3b84a:	3601      	adds	r6, #1
   3b84c:	4628      	mov	r0, r5
   3b84e:	f04f 0c00 	mov.w	ip, #0
   3b852:	f858 1b04 	ldr.w	r1, [r8], #4
   3b856:	f8d0 e000 	ldr.w	lr, [r0]
   3b85a:	b28b      	uxth	r3, r1
   3b85c:	45c1      	cmp	r9, r8
   3b85e:	fa1f f28e 	uxth.w	r2, lr
   3b862:	ebac 0303 	sub.w	r3, ip, r3
   3b866:	4413      	add	r3, r2
   3b868:	ea4f 4211 	mov.w	r2, r1, lsr #16
   3b86c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   3b870:	eb02 4223 	add.w	r2, r2, r3, asr #16
   3b874:	b29b      	uxth	r3, r3
   3b876:	ea4f 4c22 	mov.w	ip, r2, asr #16
   3b87a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3b87e:	f840 3b04 	str.w	r3, [r0], #4
   3b882:	d2e6      	bcs.n	3b852 <quorem+0xb4>
   3b884:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3b888:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3b88c:	b922      	cbnz	r2, 3b898 <quorem+0xfa>
   3b88e:	3b04      	subs	r3, #4
   3b890:	429d      	cmp	r5, r3
   3b892:	461a      	mov	r2, r3
   3b894:	d30a      	bcc.n	3b8ac <quorem+0x10e>
   3b896:	613c      	str	r4, [r7, #16]
   3b898:	4630      	mov	r0, r6
   3b89a:	b003      	add	sp, #12
   3b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b8a0:	6812      	ldr	r2, [r2, #0]
   3b8a2:	3b04      	subs	r3, #4
   3b8a4:	2a00      	cmp	r2, #0
   3b8a6:	d1ca      	bne.n	3b83e <quorem+0xa0>
   3b8a8:	3c01      	subs	r4, #1
   3b8aa:	e7c5      	b.n	3b838 <quorem+0x9a>
   3b8ac:	6812      	ldr	r2, [r2, #0]
   3b8ae:	3b04      	subs	r3, #4
   3b8b0:	2a00      	cmp	r2, #0
   3b8b2:	d1f0      	bne.n	3b896 <quorem+0xf8>
   3b8b4:	3c01      	subs	r4, #1
   3b8b6:	e7eb      	b.n	3b890 <quorem+0xf2>
   3b8b8:	2000      	movs	r0, #0
   3b8ba:	e7ee      	b.n	3b89a <quorem+0xfc>

0003b8bc <_Balloc>:
   3b8bc:	b570      	push	{r4, r5, r6, lr}
   3b8be:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3b8c0:	4604      	mov	r4, r0
   3b8c2:	460d      	mov	r5, r1
   3b8c4:	b93e      	cbnz	r6, 3b8d6 <_Balloc+0x1a>
   3b8c6:	2010      	movs	r0, #16
   3b8c8:	f7fb fe5c 	bl	37584 <malloc>
   3b8cc:	6260      	str	r0, [r4, #36]	; 0x24
   3b8ce:	6006      	str	r6, [r0, #0]
   3b8d0:	60c6      	str	r6, [r0, #12]
   3b8d2:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3b8d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   3b8d8:	68f3      	ldr	r3, [r6, #12]
   3b8da:	b183      	cbz	r3, 3b8fe <_Balloc+0x42>
   3b8dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b8de:	68db      	ldr	r3, [r3, #12]
   3b8e0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   3b8e4:	b9b8      	cbnz	r0, 3b916 <_Balloc+0x5a>
   3b8e6:	2101      	movs	r1, #1
   3b8e8:	4620      	mov	r0, r4
   3b8ea:	fa01 f605 	lsl.w	r6, r1, r5
   3b8ee:	1d72      	adds	r2, r6, #5
   3b8f0:	0092      	lsls	r2, r2, #2
   3b8f2:	f000 faa9 	bl	3be48 <_calloc_r>
   3b8f6:	b160      	cbz	r0, 3b912 <_Balloc+0x56>
   3b8f8:	e9c0 5601 	strd	r5, r6, [r0, #4]
   3b8fc:	e00e      	b.n	3b91c <_Balloc+0x60>
   3b8fe:	2221      	movs	r2, #33	; 0x21
   3b900:	2104      	movs	r1, #4
   3b902:	4620      	mov	r0, r4
   3b904:	f000 faa0 	bl	3be48 <_calloc_r>
   3b908:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b90a:	60f0      	str	r0, [r6, #12]
   3b90c:	68db      	ldr	r3, [r3, #12]
   3b90e:	2b00      	cmp	r3, #0
   3b910:	d1e4      	bne.n	3b8dc <_Balloc+0x20>
   3b912:	2000      	movs	r0, #0
   3b914:	bd70      	pop	{r4, r5, r6, pc}
   3b916:	6802      	ldr	r2, [r0, #0]
   3b918:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   3b91c:	2300      	movs	r3, #0
   3b91e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   3b922:	e7f7      	b.n	3b914 <_Balloc+0x58>

0003b924 <_Bfree>:
   3b924:	b570      	push	{r4, r5, r6, lr}
   3b926:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3b928:	4605      	mov	r5, r0
   3b92a:	460c      	mov	r4, r1
   3b92c:	b93e      	cbnz	r6, 3b93e <_Bfree+0x1a>
   3b92e:	2010      	movs	r0, #16
   3b930:	f7fb fe28 	bl	37584 <malloc>
   3b934:	6268      	str	r0, [r5, #36]	; 0x24
   3b936:	6006      	str	r6, [r0, #0]
   3b938:	60c6      	str	r6, [r0, #12]
   3b93a:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3b93e:	b13c      	cbz	r4, 3b950 <_Bfree+0x2c>
   3b940:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3b942:	6862      	ldr	r2, [r4, #4]
   3b944:	68db      	ldr	r3, [r3, #12]
   3b946:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3b94a:	6021      	str	r1, [r4, #0]
   3b94c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   3b950:	bd70      	pop	{r4, r5, r6, pc}

0003b952 <__multadd>:
   3b952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b956:	4607      	mov	r7, r0
   3b958:	4698      	mov	r8, r3
   3b95a:	460c      	mov	r4, r1
   3b95c:	690e      	ldr	r6, [r1, #16]
   3b95e:	f101 0014 	add.w	r0, r1, #20
   3b962:	2300      	movs	r3, #0
   3b964:	6805      	ldr	r5, [r0, #0]
   3b966:	3301      	adds	r3, #1
   3b968:	b2a9      	uxth	r1, r5
   3b96a:	429e      	cmp	r6, r3
   3b96c:	ea4f 4515 	mov.w	r5, r5, lsr #16
   3b970:	fb02 8101 	mla	r1, r2, r1, r8
   3b974:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   3b978:	b289      	uxth	r1, r1
   3b97a:	fb02 c505 	mla	r5, r2, r5, ip
   3b97e:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   3b982:	ea4f 4815 	mov.w	r8, r5, lsr #16
   3b986:	f840 1b04 	str.w	r1, [r0], #4
   3b98a:	dceb      	bgt.n	3b964 <__multadd+0x12>
   3b98c:	f1b8 0f00 	cmp.w	r8, #0
   3b990:	d01b      	beq.n	3b9ca <__multadd+0x78>
   3b992:	68a3      	ldr	r3, [r4, #8]
   3b994:	42b3      	cmp	r3, r6
   3b996:	dc12      	bgt.n	3b9be <__multadd+0x6c>
   3b998:	6861      	ldr	r1, [r4, #4]
   3b99a:	4638      	mov	r0, r7
   3b99c:	3101      	adds	r1, #1
   3b99e:	f7ff ff8d 	bl	3b8bc <_Balloc>
   3b9a2:	6922      	ldr	r2, [r4, #16]
   3b9a4:	4605      	mov	r5, r0
   3b9a6:	f104 010c 	add.w	r1, r4, #12
   3b9aa:	3202      	adds	r2, #2
   3b9ac:	300c      	adds	r0, #12
   3b9ae:	0092      	lsls	r2, r2, #2
   3b9b0:	f7ff fcff 	bl	3b3b2 <memcpy>
   3b9b4:	4621      	mov	r1, r4
   3b9b6:	462c      	mov	r4, r5
   3b9b8:	4638      	mov	r0, r7
   3b9ba:	f7ff ffb3 	bl	3b924 <_Bfree>
   3b9be:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   3b9c2:	3601      	adds	r6, #1
   3b9c4:	f8c3 8014 	str.w	r8, [r3, #20]
   3b9c8:	6126      	str	r6, [r4, #16]
   3b9ca:	4620      	mov	r0, r4
   3b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003b9d0 <__hi0bits>:
   3b9d0:	0c03      	lsrs	r3, r0, #16
   3b9d2:	041b      	lsls	r3, r3, #16
   3b9d4:	b9d3      	cbnz	r3, 3ba0c <__hi0bits+0x3c>
   3b9d6:	0400      	lsls	r0, r0, #16
   3b9d8:	2310      	movs	r3, #16
   3b9da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   3b9de:	bf04      	itt	eq
   3b9e0:	0200      	lsleq	r0, r0, #8
   3b9e2:	3308      	addeq	r3, #8
   3b9e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   3b9e8:	bf04      	itt	eq
   3b9ea:	0100      	lsleq	r0, r0, #4
   3b9ec:	3304      	addeq	r3, #4
   3b9ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   3b9f2:	bf04      	itt	eq
   3b9f4:	0080      	lsleq	r0, r0, #2
   3b9f6:	3302      	addeq	r3, #2
   3b9f8:	2800      	cmp	r0, #0
   3b9fa:	db05      	blt.n	3ba08 <__hi0bits+0x38>
   3b9fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   3ba00:	f103 0301 	add.w	r3, r3, #1
   3ba04:	bf08      	it	eq
   3ba06:	2320      	moveq	r3, #32
   3ba08:	4618      	mov	r0, r3
   3ba0a:	4770      	bx	lr
   3ba0c:	2300      	movs	r3, #0
   3ba0e:	e7e4      	b.n	3b9da <__hi0bits+0xa>

0003ba10 <__lo0bits>:
   3ba10:	6803      	ldr	r3, [r0, #0]
   3ba12:	4601      	mov	r1, r0
   3ba14:	f013 0207 	ands.w	r2, r3, #7
   3ba18:	d00b      	beq.n	3ba32 <__lo0bits+0x22>
   3ba1a:	07da      	lsls	r2, r3, #31
   3ba1c:	d424      	bmi.n	3ba68 <__lo0bits+0x58>
   3ba1e:	0798      	lsls	r0, r3, #30
   3ba20:	bf47      	ittee	mi
   3ba22:	085b      	lsrmi	r3, r3, #1
   3ba24:	2001      	movmi	r0, #1
   3ba26:	089b      	lsrpl	r3, r3, #2
   3ba28:	2002      	movpl	r0, #2
   3ba2a:	bf4c      	ite	mi
   3ba2c:	600b      	strmi	r3, [r1, #0]
   3ba2e:	600b      	strpl	r3, [r1, #0]
   3ba30:	4770      	bx	lr
   3ba32:	b298      	uxth	r0, r3
   3ba34:	b9b0      	cbnz	r0, 3ba64 <__lo0bits+0x54>
   3ba36:	0c1b      	lsrs	r3, r3, #16
   3ba38:	2010      	movs	r0, #16
   3ba3a:	f013 0fff 	tst.w	r3, #255	; 0xff
   3ba3e:	bf04      	itt	eq
   3ba40:	0a1b      	lsreq	r3, r3, #8
   3ba42:	3008      	addeq	r0, #8
   3ba44:	071a      	lsls	r2, r3, #28
   3ba46:	bf04      	itt	eq
   3ba48:	091b      	lsreq	r3, r3, #4
   3ba4a:	3004      	addeq	r0, #4
   3ba4c:	079a      	lsls	r2, r3, #30
   3ba4e:	bf04      	itt	eq
   3ba50:	089b      	lsreq	r3, r3, #2
   3ba52:	3002      	addeq	r0, #2
   3ba54:	07da      	lsls	r2, r3, #31
   3ba56:	d403      	bmi.n	3ba60 <__lo0bits+0x50>
   3ba58:	085b      	lsrs	r3, r3, #1
   3ba5a:	f100 0001 	add.w	r0, r0, #1
   3ba5e:	d005      	beq.n	3ba6c <__lo0bits+0x5c>
   3ba60:	600b      	str	r3, [r1, #0]
   3ba62:	4770      	bx	lr
   3ba64:	4610      	mov	r0, r2
   3ba66:	e7e8      	b.n	3ba3a <__lo0bits+0x2a>
   3ba68:	2000      	movs	r0, #0
   3ba6a:	4770      	bx	lr
   3ba6c:	2020      	movs	r0, #32
   3ba6e:	4770      	bx	lr

0003ba70 <__i2b>:
   3ba70:	b510      	push	{r4, lr}
   3ba72:	460c      	mov	r4, r1
   3ba74:	2101      	movs	r1, #1
   3ba76:	f7ff ff21 	bl	3b8bc <_Balloc>
   3ba7a:	2201      	movs	r2, #1
   3ba7c:	6144      	str	r4, [r0, #20]
   3ba7e:	6102      	str	r2, [r0, #16]
   3ba80:	bd10      	pop	{r4, pc}

0003ba82 <__multiply>:
   3ba82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ba86:	4615      	mov	r5, r2
   3ba88:	690a      	ldr	r2, [r1, #16]
   3ba8a:	460c      	mov	r4, r1
   3ba8c:	b085      	sub	sp, #20
   3ba8e:	692b      	ldr	r3, [r5, #16]
   3ba90:	429a      	cmp	r2, r3
   3ba92:	bfbe      	ittt	lt
   3ba94:	460b      	movlt	r3, r1
   3ba96:	462c      	movlt	r4, r5
   3ba98:	461d      	movlt	r5, r3
   3ba9a:	6927      	ldr	r7, [r4, #16]
   3ba9c:	68a3      	ldr	r3, [r4, #8]
   3ba9e:	f8d5 9010 	ldr.w	r9, [r5, #16]
   3baa2:	6861      	ldr	r1, [r4, #4]
   3baa4:	eb07 0609 	add.w	r6, r7, r9
   3baa8:	42b3      	cmp	r3, r6
   3baaa:	bfb8      	it	lt
   3baac:	3101      	addlt	r1, #1
   3baae:	f7ff ff05 	bl	3b8bc <_Balloc>
   3bab2:	f100 0114 	add.w	r1, r0, #20
   3bab6:	2200      	movs	r2, #0
   3bab8:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   3babc:	460b      	mov	r3, r1
   3babe:	4543      	cmp	r3, r8
   3bac0:	d31d      	bcc.n	3bafe <__multiply+0x7c>
   3bac2:	f104 0314 	add.w	r3, r4, #20
   3bac6:	f105 0214 	add.w	r2, r5, #20
   3baca:	f104 0515 	add.w	r5, r4, #21
   3bace:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   3bad2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   3bad6:	9302      	str	r3, [sp, #8]
   3bad8:	1b3b      	subs	r3, r7, r4
   3bada:	3b15      	subs	r3, #21
   3badc:	f023 0303 	bic.w	r3, r3, #3
   3bae0:	3304      	adds	r3, #4
   3bae2:	42af      	cmp	r7, r5
   3bae4:	bf38      	it	cc
   3bae6:	2304      	movcc	r3, #4
   3bae8:	9301      	str	r3, [sp, #4]
   3baea:	9b02      	ldr	r3, [sp, #8]
   3baec:	9203      	str	r2, [sp, #12]
   3baee:	4293      	cmp	r3, r2
   3baf0:	d808      	bhi.n	3bb04 <__multiply+0x82>
   3baf2:	2e00      	cmp	r6, #0
   3baf4:	dc5a      	bgt.n	3bbac <__multiply+0x12a>
   3baf6:	6106      	str	r6, [r0, #16]
   3baf8:	b005      	add	sp, #20
   3bafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bafe:	f843 2b04 	str.w	r2, [r3], #4
   3bb02:	e7dc      	b.n	3babe <__multiply+0x3c>
   3bb04:	f8b2 a000 	ldrh.w	sl, [r2]
   3bb08:	f1ba 0f00 	cmp.w	sl, #0
   3bb0c:	d024      	beq.n	3bb58 <__multiply+0xd6>
   3bb0e:	f104 0e14 	add.w	lr, r4, #20
   3bb12:	4689      	mov	r9, r1
   3bb14:	f04f 0c00 	mov.w	ip, #0
   3bb18:	f85e 5b04 	ldr.w	r5, [lr], #4
   3bb1c:	f8d9 b000 	ldr.w	fp, [r9]
   3bb20:	b2ab      	uxth	r3, r5
   3bb22:	4577      	cmp	r7, lr
   3bb24:	fa1f fb8b 	uxth.w	fp, fp
   3bb28:	fb0a b303 	mla	r3, sl, r3, fp
   3bb2c:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   3bb30:	f8d9 5000 	ldr.w	r5, [r9]
   3bb34:	4463      	add	r3, ip
   3bb36:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   3bb3a:	fb0a c50b 	mla	r5, sl, fp, ip
   3bb3e:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   3bb42:	b29b      	uxth	r3, r3
   3bb44:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   3bb48:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   3bb4c:	f849 3b04 	str.w	r3, [r9], #4
   3bb50:	d8e2      	bhi.n	3bb18 <__multiply+0x96>
   3bb52:	9b01      	ldr	r3, [sp, #4]
   3bb54:	f841 c003 	str.w	ip, [r1, r3]
   3bb58:	9b03      	ldr	r3, [sp, #12]
   3bb5a:	3204      	adds	r2, #4
   3bb5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   3bb60:	f1b9 0f00 	cmp.w	r9, #0
   3bb64:	d020      	beq.n	3bba8 <__multiply+0x126>
   3bb66:	680b      	ldr	r3, [r1, #0]
   3bb68:	f104 0c14 	add.w	ip, r4, #20
   3bb6c:	468e      	mov	lr, r1
   3bb6e:	f04f 0a00 	mov.w	sl, #0
   3bb72:	f8bc 5000 	ldrh.w	r5, [ip]
   3bb76:	b29b      	uxth	r3, r3
   3bb78:	f8be b002 	ldrh.w	fp, [lr, #2]
   3bb7c:	fb09 b505 	mla	r5, r9, r5, fp
   3bb80:	44aa      	add	sl, r5
   3bb82:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   3bb86:	f84e 3b04 	str.w	r3, [lr], #4
   3bb8a:	f85c 3b04 	ldr.w	r3, [ip], #4
   3bb8e:	f8be 5000 	ldrh.w	r5, [lr]
   3bb92:	0c1b      	lsrs	r3, r3, #16
   3bb94:	4567      	cmp	r7, ip
   3bb96:	fb09 5303 	mla	r3, r9, r3, r5
   3bb9a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   3bb9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   3bba2:	d8e6      	bhi.n	3bb72 <__multiply+0xf0>
   3bba4:	9d01      	ldr	r5, [sp, #4]
   3bba6:	514b      	str	r3, [r1, r5]
   3bba8:	3104      	adds	r1, #4
   3bbaa:	e79e      	b.n	3baea <__multiply+0x68>
   3bbac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   3bbb0:	2b00      	cmp	r3, #0
   3bbb2:	d1a0      	bne.n	3baf6 <__multiply+0x74>
   3bbb4:	3e01      	subs	r6, #1
   3bbb6:	e79c      	b.n	3baf2 <__multiply+0x70>

0003bbb8 <__lshift>:
   3bbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3bbbc:	460c      	mov	r4, r1
   3bbbe:	4607      	mov	r7, r0
   3bbc0:	4691      	mov	r9, r2
   3bbc2:	ea4f 1a62 	mov.w	sl, r2, asr #5
   3bbc6:	6923      	ldr	r3, [r4, #16]
   3bbc8:	6849      	ldr	r1, [r1, #4]
   3bbca:	eb03 1862 	add.w	r8, r3, r2, asr #5
   3bbce:	68a3      	ldr	r3, [r4, #8]
   3bbd0:	f108 0601 	add.w	r6, r8, #1
   3bbd4:	42b3      	cmp	r3, r6
   3bbd6:	db3f      	blt.n	3bc58 <__lshift+0xa0>
   3bbd8:	4638      	mov	r0, r7
   3bbda:	f7ff fe6f 	bl	3b8bc <_Balloc>
   3bbde:	2300      	movs	r3, #0
   3bbe0:	4605      	mov	r5, r0
   3bbe2:	f100 0114 	add.w	r1, r0, #20
   3bbe6:	f100 0210 	add.w	r2, r0, #16
   3bbea:	4618      	mov	r0, r3
   3bbec:	4553      	cmp	r3, sl
   3bbee:	db36      	blt.n	3bc5e <__lshift+0xa6>
   3bbf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   3bbf4:	f104 0314 	add.w	r3, r4, #20
   3bbf8:	6920      	ldr	r0, [r4, #16]
   3bbfa:	f019 091f 	ands.w	r9, r9, #31
   3bbfe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   3bc02:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   3bc06:	d02e      	beq.n	3bc66 <__lshift+0xae>
   3bc08:	f1c9 0e20 	rsb	lr, r9, #32
   3bc0c:	468a      	mov	sl, r1
   3bc0e:	2200      	movs	r2, #0
   3bc10:	6818      	ldr	r0, [r3, #0]
   3bc12:	fa00 f009 	lsl.w	r0, r0, r9
   3bc16:	4302      	orrs	r2, r0
   3bc18:	f84a 2b04 	str.w	r2, [sl], #4
   3bc1c:	f853 2b04 	ldr.w	r2, [r3], #4
   3bc20:	459c      	cmp	ip, r3
   3bc22:	fa22 f20e 	lsr.w	r2, r2, lr
   3bc26:	d8f3      	bhi.n	3bc10 <__lshift+0x58>
   3bc28:	ebac 0304 	sub.w	r3, ip, r4
   3bc2c:	f104 0015 	add.w	r0, r4, #21
   3bc30:	3b15      	subs	r3, #21
   3bc32:	f023 0303 	bic.w	r3, r3, #3
   3bc36:	3304      	adds	r3, #4
   3bc38:	4560      	cmp	r0, ip
   3bc3a:	bf88      	it	hi
   3bc3c:	2304      	movhi	r3, #4
   3bc3e:	50ca      	str	r2, [r1, r3]
   3bc40:	b10a      	cbz	r2, 3bc46 <__lshift+0x8e>
   3bc42:	f108 0602 	add.w	r6, r8, #2
   3bc46:	3e01      	subs	r6, #1
   3bc48:	4638      	mov	r0, r7
   3bc4a:	4621      	mov	r1, r4
   3bc4c:	612e      	str	r6, [r5, #16]
   3bc4e:	f7ff fe69 	bl	3b924 <_Bfree>
   3bc52:	4628      	mov	r0, r5
   3bc54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3bc58:	3101      	adds	r1, #1
   3bc5a:	005b      	lsls	r3, r3, #1
   3bc5c:	e7ba      	b.n	3bbd4 <__lshift+0x1c>
   3bc5e:	3301      	adds	r3, #1
   3bc60:	f842 0f04 	str.w	r0, [r2, #4]!
   3bc64:	e7c2      	b.n	3bbec <__lshift+0x34>
   3bc66:	3904      	subs	r1, #4
   3bc68:	f853 2b04 	ldr.w	r2, [r3], #4
   3bc6c:	459c      	cmp	ip, r3
   3bc6e:	f841 2f04 	str.w	r2, [r1, #4]!
   3bc72:	d8f9      	bhi.n	3bc68 <__lshift+0xb0>
   3bc74:	e7e7      	b.n	3bc46 <__lshift+0x8e>

0003bc76 <__mcmp>:
   3bc76:	6902      	ldr	r2, [r0, #16]
   3bc78:	b530      	push	{r4, r5, lr}
   3bc7a:	690c      	ldr	r4, [r1, #16]
   3bc7c:	1b12      	subs	r2, r2, r4
   3bc7e:	d10e      	bne.n	3bc9e <__mcmp+0x28>
   3bc80:	f100 0314 	add.w	r3, r0, #20
   3bc84:	3114      	adds	r1, #20
   3bc86:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   3bc8a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   3bc8e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   3bc92:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   3bc96:	42a5      	cmp	r5, r4
   3bc98:	d003      	beq.n	3bca2 <__mcmp+0x2c>
   3bc9a:	d305      	bcc.n	3bca8 <__mcmp+0x32>
   3bc9c:	2201      	movs	r2, #1
   3bc9e:	4610      	mov	r0, r2
   3bca0:	bd30      	pop	{r4, r5, pc}
   3bca2:	4283      	cmp	r3, r0
   3bca4:	d3f3      	bcc.n	3bc8e <__mcmp+0x18>
   3bca6:	e7fa      	b.n	3bc9e <__mcmp+0x28>
   3bca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3bcac:	e7f7      	b.n	3bc9e <__mcmp+0x28>

0003bcae <__mdiff>:
   3bcae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bcb2:	460c      	mov	r4, r1
   3bcb4:	4606      	mov	r6, r0
   3bcb6:	4611      	mov	r1, r2
   3bcb8:	4692      	mov	sl, r2
   3bcba:	4620      	mov	r0, r4
   3bcbc:	f7ff ffdb 	bl	3bc76 <__mcmp>
   3bcc0:	1e05      	subs	r5, r0, #0
   3bcc2:	d108      	bne.n	3bcd6 <__mdiff+0x28>
   3bcc4:	4629      	mov	r1, r5
   3bcc6:	4630      	mov	r0, r6
   3bcc8:	f7ff fdf8 	bl	3b8bc <_Balloc>
   3bccc:	2301      	movs	r3, #1
   3bcce:	e9c0 3504 	strd	r3, r5, [r0, #16]
   3bcd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bcd6:	bfa3      	ittte	ge
   3bcd8:	4653      	movge	r3, sl
   3bcda:	46a2      	movge	sl, r4
   3bcdc:	2500      	movge	r5, #0
   3bcde:	2501      	movlt	r5, #1
   3bce0:	bfa8      	it	ge
   3bce2:	461c      	movge	r4, r3
   3bce4:	f8da 1004 	ldr.w	r1, [sl, #4]
   3bce8:	4630      	mov	r0, r6
   3bcea:	f7ff fde7 	bl	3b8bc <_Balloc>
   3bcee:	f104 0914 	add.w	r9, r4, #20
   3bcf2:	f8da 7010 	ldr.w	r7, [sl, #16]
   3bcf6:	f100 0814 	add.w	r8, r0, #20
   3bcfa:	6926      	ldr	r6, [r4, #16]
   3bcfc:	f10a 0210 	add.w	r2, sl, #16
   3bd00:	60c5      	str	r5, [r0, #12]
   3bd02:	f10a 0514 	add.w	r5, sl, #20
   3bd06:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   3bd0a:	46c2      	mov	sl, r8
   3bd0c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   3bd10:	f04f 0c00 	mov.w	ip, #0
   3bd14:	f852 bf04 	ldr.w	fp, [r2, #4]!
   3bd18:	f859 3b04 	ldr.w	r3, [r9], #4
   3bd1c:	fa1f f18b 	uxth.w	r1, fp
   3bd20:	454e      	cmp	r6, r9
   3bd22:	4461      	add	r1, ip
   3bd24:	fa1f fc83 	uxth.w	ip, r3
   3bd28:	ea4f 4313 	mov.w	r3, r3, lsr #16
   3bd2c:	eba1 010c 	sub.w	r1, r1, ip
   3bd30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   3bd34:	eb03 4321 	add.w	r3, r3, r1, asr #16
   3bd38:	b289      	uxth	r1, r1
   3bd3a:	ea4f 4c23 	mov.w	ip, r3, asr #16
   3bd3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   3bd42:	f84a 3b04 	str.w	r3, [sl], #4
   3bd46:	d8e5      	bhi.n	3bd14 <__mdiff+0x66>
   3bd48:	1b33      	subs	r3, r6, r4
   3bd4a:	3415      	adds	r4, #21
   3bd4c:	3b15      	subs	r3, #21
   3bd4e:	f023 0303 	bic.w	r3, r3, #3
   3bd52:	3304      	adds	r3, #4
   3bd54:	42a6      	cmp	r6, r4
   3bd56:	bf38      	it	cc
   3bd58:	2304      	movcc	r3, #4
   3bd5a:	441d      	add	r5, r3
   3bd5c:	4443      	add	r3, r8
   3bd5e:	462c      	mov	r4, r5
   3bd60:	461e      	mov	r6, r3
   3bd62:	4574      	cmp	r4, lr
   3bd64:	d30e      	bcc.n	3bd84 <__mdiff+0xd6>
   3bd66:	f10e 0203 	add.w	r2, lr, #3
   3bd6a:	1b52      	subs	r2, r2, r5
   3bd6c:	3d03      	subs	r5, #3
   3bd6e:	f022 0203 	bic.w	r2, r2, #3
   3bd72:	45ae      	cmp	lr, r5
   3bd74:	bf38      	it	cc
   3bd76:	2200      	movcc	r2, #0
   3bd78:	441a      	add	r2, r3
   3bd7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   3bd7e:	b18b      	cbz	r3, 3bda4 <__mdiff+0xf6>
   3bd80:	6107      	str	r7, [r0, #16]
   3bd82:	e7a6      	b.n	3bcd2 <__mdiff+0x24>
   3bd84:	f854 8b04 	ldr.w	r8, [r4], #4
   3bd88:	fa1f f288 	uxth.w	r2, r8
   3bd8c:	4462      	add	r2, ip
   3bd8e:	1411      	asrs	r1, r2, #16
   3bd90:	b292      	uxth	r2, r2
   3bd92:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   3bd96:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   3bd9a:	ea4f 4c21 	mov.w	ip, r1, asr #16
   3bd9e:	f846 2b04 	str.w	r2, [r6], #4
   3bda2:	e7de      	b.n	3bd62 <__mdiff+0xb4>
   3bda4:	3f01      	subs	r7, #1
   3bda6:	e7e8      	b.n	3bd7a <__mdiff+0xcc>

0003bda8 <__d2b>:
   3bda8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3bdac:	ec57 6b10 	vmov	r6, r7, d0
   3bdb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
   3bdb4:	4689      	mov	r9, r1
   3bdb6:	2101      	movs	r1, #1
   3bdb8:	4690      	mov	r8, r2
   3bdba:	f7ff fd7f 	bl	3b8bc <_Balloc>
   3bdbe:	f3c7 0313 	ubfx	r3, r7, #0, #20
   3bdc2:	4604      	mov	r4, r0
   3bdc4:	bb35      	cbnz	r5, 3be14 <__d2b+0x6c>
   3bdc6:	2e00      	cmp	r6, #0
   3bdc8:	9301      	str	r3, [sp, #4]
   3bdca:	d028      	beq.n	3be1e <__d2b+0x76>
   3bdcc:	4668      	mov	r0, sp
   3bdce:	9600      	str	r6, [sp, #0]
   3bdd0:	f7ff fe1e 	bl	3ba10 <__lo0bits>
   3bdd4:	9900      	ldr	r1, [sp, #0]
   3bdd6:	b300      	cbz	r0, 3be1a <__d2b+0x72>
   3bdd8:	9a01      	ldr	r2, [sp, #4]
   3bdda:	f1c0 0320 	rsb	r3, r0, #32
   3bdde:	fa02 f303 	lsl.w	r3, r2, r3
   3bde2:	40c2      	lsrs	r2, r0
   3bde4:	430b      	orrs	r3, r1
   3bde6:	9201      	str	r2, [sp, #4]
   3bde8:	6163      	str	r3, [r4, #20]
   3bdea:	9b01      	ldr	r3, [sp, #4]
   3bdec:	2b00      	cmp	r3, #0
   3bdee:	61a3      	str	r3, [r4, #24]
   3bdf0:	bf14      	ite	ne
   3bdf2:	2202      	movne	r2, #2
   3bdf4:	2201      	moveq	r2, #1
   3bdf6:	6122      	str	r2, [r4, #16]
   3bdf8:	b1d5      	cbz	r5, 3be30 <__d2b+0x88>
   3bdfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   3bdfe:	4405      	add	r5, r0
   3be00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   3be04:	f8c9 5000 	str.w	r5, [r9]
   3be08:	f8c8 0000 	str.w	r0, [r8]
   3be0c:	4620      	mov	r0, r4
   3be0e:	b003      	add	sp, #12
   3be10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3be14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3be18:	e7d5      	b.n	3bdc6 <__d2b+0x1e>
   3be1a:	6161      	str	r1, [r4, #20]
   3be1c:	e7e5      	b.n	3bdea <__d2b+0x42>
   3be1e:	a801      	add	r0, sp, #4
   3be20:	f7ff fdf6 	bl	3ba10 <__lo0bits>
   3be24:	9b01      	ldr	r3, [sp, #4]
   3be26:	2201      	movs	r2, #1
   3be28:	3020      	adds	r0, #32
   3be2a:	6163      	str	r3, [r4, #20]
   3be2c:	6122      	str	r2, [r4, #16]
   3be2e:	e7e3      	b.n	3bdf8 <__d2b+0x50>
   3be30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   3be34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   3be38:	f8c9 0000 	str.w	r0, [r9]
   3be3c:	6918      	ldr	r0, [r3, #16]
   3be3e:	f7ff fdc7 	bl	3b9d0 <__hi0bits>
   3be42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   3be46:	e7df      	b.n	3be08 <__d2b+0x60>

0003be48 <_calloc_r>:
   3be48:	434a      	muls	r2, r1
   3be4a:	b513      	push	{r0, r1, r4, lr}
   3be4c:	4611      	mov	r1, r2
   3be4e:	9201      	str	r2, [sp, #4]
   3be50:	f7fb fc3e 	bl	376d0 <_malloc_r>
   3be54:	4604      	mov	r4, r0
   3be56:	b118      	cbz	r0, 3be60 <_calloc_r+0x18>
   3be58:	9a01      	ldr	r2, [sp, #4]
   3be5a:	2100      	movs	r1, #0
   3be5c:	f7ff fac9 	bl	3b3f2 <memset>
   3be60:	4620      	mov	r0, r4
   3be62:	b002      	add	sp, #8
   3be64:	bd10      	pop	{r4, pc}

0003be66 <__ssputs_r>:
   3be66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3be6a:	688e      	ldr	r6, [r1, #8]
   3be6c:	4682      	mov	sl, r0
   3be6e:	460c      	mov	r4, r1
   3be70:	4690      	mov	r8, r2
   3be72:	429e      	cmp	r6, r3
   3be74:	461f      	mov	r7, r3
   3be76:	d838      	bhi.n	3beea <__ssputs_r+0x84>
   3be78:	898a      	ldrh	r2, [r1, #12]
   3be7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
   3be7e:	d032      	beq.n	3bee6 <__ssputs_r+0x80>
   3be80:	6825      	ldr	r5, [r4, #0]
   3be82:	3301      	adds	r3, #1
   3be84:	6909      	ldr	r1, [r1, #16]
   3be86:	eba5 0901 	sub.w	r9, r5, r1
   3be8a:	6965      	ldr	r5, [r4, #20]
   3be8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3be90:	444b      	add	r3, r9
   3be92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   3be96:	106d      	asrs	r5, r5, #1
   3be98:	429d      	cmp	r5, r3
   3be9a:	bf38      	it	cc
   3be9c:	461d      	movcc	r5, r3
   3be9e:	0553      	lsls	r3, r2, #21
   3bea0:	d531      	bpl.n	3bf06 <__ssputs_r+0xa0>
   3bea2:	4629      	mov	r1, r5
   3bea4:	f7fb fc14 	bl	376d0 <_malloc_r>
   3bea8:	4606      	mov	r6, r0
   3beaa:	b950      	cbnz	r0, 3bec2 <__ssputs_r+0x5c>
   3beac:	230c      	movs	r3, #12
   3beae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3beb2:	f8ca 3000 	str.w	r3, [sl]
   3beb6:	89a3      	ldrh	r3, [r4, #12]
   3beb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3bebc:	81a3      	strh	r3, [r4, #12]
   3bebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3bec2:	464a      	mov	r2, r9
   3bec4:	6921      	ldr	r1, [r4, #16]
   3bec6:	f7ff fa74 	bl	3b3b2 <memcpy>
   3beca:	89a3      	ldrh	r3, [r4, #12]
   3becc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   3bed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3bed4:	81a3      	strh	r3, [r4, #12]
   3bed6:	6126      	str	r6, [r4, #16]
   3bed8:	444e      	add	r6, r9
   3beda:	6165      	str	r5, [r4, #20]
   3bedc:	eba5 0509 	sub.w	r5, r5, r9
   3bee0:	6026      	str	r6, [r4, #0]
   3bee2:	463e      	mov	r6, r7
   3bee4:	60a5      	str	r5, [r4, #8]
   3bee6:	42be      	cmp	r6, r7
   3bee8:	d900      	bls.n	3beec <__ssputs_r+0x86>
   3beea:	463e      	mov	r6, r7
   3beec:	4632      	mov	r2, r6
   3beee:	4641      	mov	r1, r8
   3bef0:	6820      	ldr	r0, [r4, #0]
   3bef2:	f000 f825 	bl	3bf40 <memmove>
   3bef6:	68a3      	ldr	r3, [r4, #8]
   3bef8:	6822      	ldr	r2, [r4, #0]
   3befa:	2000      	movs	r0, #0
   3befc:	1b9b      	subs	r3, r3, r6
   3befe:	4432      	add	r2, r6
   3bf00:	60a3      	str	r3, [r4, #8]
   3bf02:	6022      	str	r2, [r4, #0]
   3bf04:	e7db      	b.n	3bebe <__ssputs_r+0x58>
   3bf06:	462a      	mov	r2, r5
   3bf08:	f000 f834 	bl	3bf74 <_realloc_r>
   3bf0c:	4606      	mov	r6, r0
   3bf0e:	2800      	cmp	r0, #0
   3bf10:	d1e1      	bne.n	3bed6 <__ssputs_r+0x70>
   3bf12:	6921      	ldr	r1, [r4, #16]
   3bf14:	4650      	mov	r0, sl
   3bf16:	f7fb fb8b 	bl	37630 <_free_r>
   3bf1a:	e7c7      	b.n	3beac <__ssputs_r+0x46>

0003bf1c <__ascii_mbtowc>:
   3bf1c:	b082      	sub	sp, #8
   3bf1e:	b901      	cbnz	r1, 3bf22 <__ascii_mbtowc+0x6>
   3bf20:	a901      	add	r1, sp, #4
   3bf22:	b142      	cbz	r2, 3bf36 <__ascii_mbtowc+0x1a>
   3bf24:	b14b      	cbz	r3, 3bf3a <__ascii_mbtowc+0x1e>
   3bf26:	7813      	ldrb	r3, [r2, #0]
   3bf28:	600b      	str	r3, [r1, #0]
   3bf2a:	7812      	ldrb	r2, [r2, #0]
   3bf2c:	1e10      	subs	r0, r2, #0
   3bf2e:	bf18      	it	ne
   3bf30:	2001      	movne	r0, #1
   3bf32:	b002      	add	sp, #8
   3bf34:	4770      	bx	lr
   3bf36:	4610      	mov	r0, r2
   3bf38:	e7fb      	b.n	3bf32 <__ascii_mbtowc+0x16>
   3bf3a:	f06f 0001 	mvn.w	r0, #1
   3bf3e:	e7f8      	b.n	3bf32 <__ascii_mbtowc+0x16>

0003bf40 <memmove>:
   3bf40:	4288      	cmp	r0, r1
   3bf42:	b510      	push	{r4, lr}
   3bf44:	eb01 0402 	add.w	r4, r1, r2
   3bf48:	d902      	bls.n	3bf50 <memmove+0x10>
   3bf4a:	4284      	cmp	r4, r0
   3bf4c:	4623      	mov	r3, r4
   3bf4e:	d807      	bhi.n	3bf60 <memmove+0x20>
   3bf50:	1e43      	subs	r3, r0, #1
   3bf52:	42a1      	cmp	r1, r4
   3bf54:	d008      	beq.n	3bf68 <memmove+0x28>
   3bf56:	f811 2b01 	ldrb.w	r2, [r1], #1
   3bf5a:	f803 2f01 	strb.w	r2, [r3, #1]!
   3bf5e:	e7f8      	b.n	3bf52 <memmove+0x12>
   3bf60:	4402      	add	r2, r0
   3bf62:	4601      	mov	r1, r0
   3bf64:	428a      	cmp	r2, r1
   3bf66:	d100      	bne.n	3bf6a <memmove+0x2a>
   3bf68:	bd10      	pop	{r4, pc}
   3bf6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   3bf6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   3bf72:	e7f7      	b.n	3bf64 <memmove+0x24>

0003bf74 <_realloc_r>:
   3bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3bf76:	4607      	mov	r7, r0
   3bf78:	4614      	mov	r4, r2
   3bf7a:	460e      	mov	r6, r1
   3bf7c:	b921      	cbnz	r1, 3bf88 <_realloc_r+0x14>
   3bf7e:	4611      	mov	r1, r2
   3bf80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3bf84:	f7fb bba4 	b.w	376d0 <_malloc_r>
   3bf88:	b922      	cbnz	r2, 3bf94 <_realloc_r+0x20>
   3bf8a:	4625      	mov	r5, r4
   3bf8c:	f7fb fb50 	bl	37630 <_free_r>
   3bf90:	4628      	mov	r0, r5
   3bf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3bf94:	f000 f823 	bl	3bfde <_malloc_usable_size_r>
   3bf98:	42a0      	cmp	r0, r4
   3bf9a:	d20f      	bcs.n	3bfbc <_realloc_r+0x48>
   3bf9c:	4621      	mov	r1, r4
   3bf9e:	4638      	mov	r0, r7
   3bfa0:	f7fb fb96 	bl	376d0 <_malloc_r>
   3bfa4:	4605      	mov	r5, r0
   3bfa6:	2800      	cmp	r0, #0
   3bfa8:	d0f2      	beq.n	3bf90 <_realloc_r+0x1c>
   3bfaa:	4631      	mov	r1, r6
   3bfac:	4622      	mov	r2, r4
   3bfae:	f7ff fa00 	bl	3b3b2 <memcpy>
   3bfb2:	4631      	mov	r1, r6
   3bfb4:	4638      	mov	r0, r7
   3bfb6:	f7fb fb3b 	bl	37630 <_free_r>
   3bfba:	e7e9      	b.n	3bf90 <_realloc_r+0x1c>
   3bfbc:	4635      	mov	r5, r6
   3bfbe:	e7e7      	b.n	3bf90 <_realloc_r+0x1c>

0003bfc0 <__ascii_wctomb>:
   3bfc0:	b149      	cbz	r1, 3bfd6 <__ascii_wctomb+0x16>
   3bfc2:	2aff      	cmp	r2, #255	; 0xff
   3bfc4:	bf8d      	iteet	hi
   3bfc6:	238a      	movhi	r3, #138	; 0x8a
   3bfc8:	2001      	movls	r0, #1
   3bfca:	700a      	strbls	r2, [r1, #0]
   3bfcc:	6003      	strhi	r3, [r0, #0]
   3bfce:	bf88      	it	hi
   3bfd0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   3bfd4:	4770      	bx	lr
   3bfd6:	4608      	mov	r0, r1
   3bfd8:	4770      	bx	lr

0003bfda <__retarget_lock_acquire_recursive>:
   3bfda:	4770      	bx	lr

0003bfdc <__retarget_lock_release_recursive>:
   3bfdc:	4770      	bx	lr

0003bfde <_malloc_usable_size_r>:
   3bfde:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3bfe2:	1f18      	subs	r0, r3, #4
   3bfe4:	2b00      	cmp	r3, #0
   3bfe6:	bfbc      	itt	lt
   3bfe8:	580b      	ldrlt	r3, [r1, r0]
   3bfea:	18c0      	addlt	r0, r0, r3
   3bfec:	4770      	bx	lr
