
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20025a90 	.word	0x20025a90
}
   4:	00003351 	.word	0x00003351
   8:	00007c45 	.word	0x00007c45
   c:	00003381 	.word	0x00003381
  10:	00003381 	.word	0x00003381
  14:	00003381 	.word	0x00003381
  18:	00003381 	.word	0x00003381
  1c:	00003381 	.word	0x00003381
	...
  2c:	000031f9 	.word	0x000031f9
  30:	00003381 	.word	0x00003381
  34:	00000000 	.word	0x00000000
  38:	000031b1 	.word	0x000031b1
  3c:	00007ac7 	.word	0x00007ac7

00000040 <_irq_vector_table>:
  40:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
  50:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
  60:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
  70:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
  80:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
  90:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
  a0:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
  b0:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
  c0:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
  d0:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
  e0:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
  f0:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
 100:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
 110:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
 120:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
 130:	00003329 00003329 00003329 00003329     )3..)3..)3..)3..
 140:	00003329                                )3..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     158:	f000 b970 	b.w	43c <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     178:	9e08      	ldr	r6, [sp, #32]
     17a:	460d      	mov	r5, r1
     17c:	4604      	mov	r4, r0
     17e:	468a      	mov	sl, r1
     180:	2b00      	cmp	r3, #0
     182:	d17f      	bne.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     184:	428a      	cmp	r2, r1
     186:	4617      	mov	r7, r2
     188:	d941      	bls.n	20e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xe>
     18a:	fab2 f282 	clz	r2, r2
     18e:	b14a      	cbz	r2, 1a4 <__udivmoddi4+0x30>
     190:	f1c2 0120 	rsb	r1, r2, #32
     194:	fa05 f302 	lsl.w	r3, r5, r2
     198:	4097      	lsls	r7, r2
     19a:	4094      	lsls	r4, r2
     19c:	fa20 f101 	lsr.w	r1, r0, r1
     1a0:	ea41 0a03 	orr.w	sl, r1, r3
     1a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1a8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1ac:	fa1f f987 	uxth.w	r9, r7
     1b0:	fbba fef8 	udiv	lr, sl, r8
     1b4:	fb08 a31e 	mls	r3, r8, lr, sl
     1b8:	fb0e f109 	mul.w	r1, lr, r9
     1bc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1c0:	4299      	cmp	r1, r3
     1c2:	d906      	bls.n	1d2 <__udivmoddi4+0x5e>
     1c4:	18fb      	adds	r3, r7, r3
     1c6:	d202      	bcs.n	1ce <__udivmoddi4+0x5a>
     1c8:	4299      	cmp	r1, r3
     1ca:	f200 8124 	bhi.w	416 <CONFIG_FLASH_SIZE+0x16>
     1ce:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
     1d2:	1a59      	subs	r1, r3, r1
     1d4:	b2a3      	uxth	r3, r4
     1d6:	fbb1 f0f8 	udiv	r0, r1, r8
     1da:	fb08 1110 	mls	r1, r8, r0, r1
     1de:	fb00 f909 	mul.w	r9, r0, r9
     1e2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1e6:	45a1      	cmp	r9, r4
     1e8:	d905      	bls.n	1f6 <__udivmoddi4+0x82>
     1ea:	193c      	adds	r4, r7, r4
     1ec:	d202      	bcs.n	1f4 <__udivmoddi4+0x80>
     1ee:	45a1      	cmp	r9, r4
     1f0:	f200 810e 	bhi.w	410 <CONFIG_FLASH_SIZE+0x10>
     1f4:	3801      	subs	r0, #1
     1f6:	eba4 0409 	sub.w	r4, r4, r9
     1fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1fe:	2100      	movs	r1, #0
     200:	b11e      	cbz	r6, 20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     202:	40d4      	lsrs	r4, r2
     204:	2300      	movs	r3, #0
     206:	e9c6 4300 	strd	r4, r3, [r6]
     20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     20e:	b902      	cbnz	r2, 212 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x12>
     210:	deff      	udf	#255	; 0xff
     212:	fab2 f282 	clz	r2, r2
     216:	2a00      	cmp	r2, #0
     218:	d14f      	bne.n	2ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x3a>
     21a:	1bcb      	subs	r3, r1, r7
     21c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     220:	fa1f f887 	uxth.w	r8, r7
     224:	2101      	movs	r1, #1
     226:	0c25      	lsrs	r5, r4, #16
     228:	fbb3 fcfe 	udiv	ip, r3, lr
     22c:	fb0e 301c 	mls	r0, lr, ip, r3
     230:	462b      	mov	r3, r5
     232:	fb08 f90c 	mul.w	r9, r8, ip
     236:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     23a:	45a9      	cmp	r9, r5
     23c:	d90a      	bls.n	254 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x54>
     23e:	197d      	adds	r5, r7, r5
     240:	bf2c      	ite	cs
     242:	2301      	movcs	r3, #1
     244:	2300      	movcc	r3, #0
     246:	45a9      	cmp	r9, r5
     248:	d902      	bls.n	250 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x50>
     24a:	2b00      	cmp	r3, #0
     24c:	f000 80d9 	beq.w	402 <CONFIG_FLASH_SIZE+0x2>
     250:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     254:	eba5 0509 	sub.w	r5, r5, r9
     258:	b2a3      	uxth	r3, r4
     25a:	fbb5 f0fe 	udiv	r0, r5, lr
     25e:	fb0e 5510 	mls	r5, lr, r0, r5
     262:	fb08 f800 	mul.w	r8, r8, r0
     266:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     26a:	45a0      	cmp	r8, r4
     26c:	d905      	bls.n	27a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x7a>
     26e:	193c      	adds	r4, r7, r4
     270:	d202      	bcs.n	278 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x78>
     272:	45a0      	cmp	r8, r4
     274:	f200 80c9 	bhi.w	40a <CONFIG_FLASH_SIZE+0xa>
     278:	3801      	subs	r0, #1
     27a:	eba4 0408 	sub.w	r4, r4, r8
     27e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     282:	e7bd      	b.n	200 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD>
     284:	428b      	cmp	r3, r1
     286:	d908      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     288:	2e00      	cmp	r6, #0
     28a:	f000 80b1 	beq.w	3f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x170>
     28e:	2100      	movs	r1, #0
     290:	e9c6 0500 	strd	r0, r5, [r6]
     294:	4608      	mov	r0, r1
     296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     29a:	fab3 f183 	clz	r1, r3
     29e:	2900      	cmp	r1, #0
     2a0:	d146      	bne.n	330 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb0>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f0c0 80a7 	bcc.w	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     2a8:	4282      	cmp	r2, r0
     2aa:	f240 80a4 	bls.w	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     2ae:	4608      	mov	r0, r1
     2b0:	2e00      	cmp	r6, #0
     2b2:	d0aa      	beq.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     2b4:	e9c6 4a00 	strd	r4, sl, [r6]
     2b8:	e7a7      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     2ba:	f1c2 0020 	rsb	r0, r2, #32
     2be:	4097      	lsls	r7, r2
     2c0:	fa01 f302 	lsl.w	r3, r1, r2
     2c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2c8:	40c1      	lsrs	r1, r0
     2ca:	fa24 f500 	lsr.w	r5, r4, r0
     2ce:	fa1f f887 	uxth.w	r8, r7
     2d2:	4094      	lsls	r4, r2
     2d4:	431d      	orrs	r5, r3
     2d6:	fbb1 f0fe 	udiv	r0, r1, lr
     2da:	0c2b      	lsrs	r3, r5, #16
     2dc:	fb0e 1110 	mls	r1, lr, r0, r1
     2e0:	fb00 fc08 	mul.w	ip, r0, r8
     2e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2e8:	459c      	cmp	ip, r3
     2ea:	d909      	bls.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     2ec:	18fb      	adds	r3, r7, r3
     2ee:	bf2c      	ite	cs
     2f0:	2101      	movcs	r1, #1
     2f2:	2100      	movcc	r1, #0
     2f4:	459c      	cmp	ip, r3
     2f6:	d902      	bls.n	2fe <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7e>
     2f8:	2900      	cmp	r1, #0
     2fa:	f000 8095 	beq.w	428 <CONFIG_FLASH_SIZE+0x28>
     2fe:	3801      	subs	r0, #1
     300:	eba3 030c 	sub.w	r3, r3, ip
     304:	b2ad      	uxth	r5, r5
     306:	fbb3 f1fe 	udiv	r1, r3, lr
     30a:	fb0e 3311 	mls	r3, lr, r1, r3
     30e:	fb01 fc08 	mul.w	ip, r1, r8
     312:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     316:	45ac      	cmp	ip, r5
     318:	d905      	bls.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>
     31a:	197d      	adds	r5, r7, r5
     31c:	d202      	bcs.n	324 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa4>
     31e:	45ac      	cmp	ip, r5
     320:	f200 8089 	bhi.w	436 <CONFIG_FLASH_SIZE+0x36>
     324:	3901      	subs	r1, #1
     326:	eba5 030c 	sub.w	r3, r5, ip
     32a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     32e:	e77a      	b.n	226 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x26>
     330:	f1c1 0420 	rsb	r4, r1, #32
     334:	408b      	lsls	r3, r1
     336:	fa02 f701 	lsl.w	r7, r2, r1
     33a:	fa05 fc01 	lsl.w	ip, r5, r1
     33e:	40e2      	lsrs	r2, r4
     340:	fa20 f804 	lsr.w	r8, r0, r4
     344:	40e5      	lsrs	r5, r4
     346:	fa00 fe01 	lsl.w	lr, r0, r1
     34a:	4313      	orrs	r3, r2
     34c:	ea48 020c 	orr.w	r2, r8, ip
     350:	ea4f 4813 	mov.w	r8, r3, lsr #16
     354:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     358:	fa1f f983 	uxth.w	r9, r3
     35c:	fbb5 faf8 	udiv	sl, r5, r8
     360:	fb08 551a 	mls	r5, r8, sl, r5
     364:	fb0a f009 	mul.w	r0, sl, r9
     368:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     36c:	4560      	cmp	r0, ip
     36e:	d90a      	bls.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     370:	eb13 0c0c 	adds.w	ip, r3, ip
     374:	bf2c      	ite	cs
     376:	2501      	movcs	r5, #1
     378:	2500      	movcc	r5, #0
     37a:	4560      	cmp	r0, ip
     37c:	d901      	bls.n	382 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x102>
     37e:	2d00      	cmp	r5, #0
     380:	d055      	beq.n	42e <CONFIG_FLASH_SIZE+0x2e>
     382:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     386:	ebac 0c00 	sub.w	ip, ip, r0
     38a:	b292      	uxth	r2, r2
     38c:	fbbc f0f8 	udiv	r0, ip, r8
     390:	fb08 cc10 	mls	ip, r8, r0, ip
     394:	fb00 f909 	mul.w	r9, r0, r9
     398:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     39c:	45e1      	cmp	r9, ip
     39e:	d905      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a0:	eb13 0c0c 	adds.w	ip, r3, ip
     3a4:	d201      	bcs.n	3aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12a>
     3a6:	45e1      	cmp	r9, ip
     3a8:	d83b      	bhi.n	422 <CONFIG_FLASH_SIZE+0x22>
     3aa:	3801      	subs	r0, #1
     3ac:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3b0:	ebac 0c09 	sub.w	ip, ip, r9
     3b4:	fba0 8907 	umull	r8, r9, r0, r7
     3b8:	45cc      	cmp	ip, r9
     3ba:	4645      	mov	r5, r8
     3bc:	464a      	mov	r2, r9
     3be:	d302      	bcc.n	3c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x146>
     3c0:	d106      	bne.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c2:	45c6      	cmp	lr, r8
     3c4:	d204      	bcs.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c6:	3801      	subs	r0, #1
     3c8:	ebb8 0507 	subs.w	r5, r8, r7
     3cc:	eb69 0203 	sbc.w	r2, r9, r3
     3d0:	b32e      	cbz	r6, 41e <CONFIG_FLASH_SIZE+0x1e>
     3d2:	ebbe 0305 	subs.w	r3, lr, r5
     3d6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3da:	fa23 f201 	lsr.w	r2, r3, r1
     3de:	fa0c f404 	lsl.w	r4, ip, r4
     3e2:	fa2c f301 	lsr.w	r3, ip, r1
     3e6:	2100      	movs	r1, #0
     3e8:	4314      	orrs	r4, r2
     3ea:	e9c6 4300 	strd	r4, r3, [r6]
     3ee:	e70c      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     3f0:	4631      	mov	r1, r6
     3f2:	4630      	mov	r0, r6
     3f4:	e709      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     3f6:	1a84      	subs	r4, r0, r2
     3f8:	eb65 0303 	sbc.w	r3, r5, r3
     3fc:	2001      	movs	r0, #1
     3fe:	469a      	mov	sl, r3
     400:	e756      	b.n	2b0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x30>
     402:	f1ac 0c02 	sub.w	ip, ip, #2
     406:	443d      	add	r5, r7
     408:	e724      	b.n	254 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x54>
     40a:	3802      	subs	r0, #2
     40c:	443c      	add	r4, r7
     40e:	e734      	b.n	27a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x7a>
     410:	3802      	subs	r0, #2
     412:	443c      	add	r4, r7
     414:	e6ef      	b.n	1f6 <__udivmoddi4+0x82>
     416:	f1ae 0e02 	sub.w	lr, lr, #2
     41a:	443b      	add	r3, r7
     41c:	e6d9      	b.n	1d2 <__udivmoddi4+0x5e>
     41e:	4631      	mov	r1, r6
     420:	e6f3      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     422:	3802      	subs	r0, #2
     424:	449c      	add	ip, r3
     426:	e7c1      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     428:	3802      	subs	r0, #2
     42a:	443b      	add	r3, r7
     42c:	e768      	b.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     42e:	f1aa 0a02 	sub.w	sl, sl, #2
     432:	449c      	add	ip, r3
     434:	e7a7      	b.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     436:	3902      	subs	r1, #2
     438:	443d      	add	r5, r7
     43a:	e774      	b.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>

0000043c <__aeabi_idiv0>:
     43c:	4770      	bx	lr
     43e:	bf00      	nop

00000440 <main>:
}
#endif/* defined(CONFIG_LOG) && !defined(CONFIG_LOG_IMMEDIATE) &&\
        !defined(CONFIG_LOG_PROCESS_THREAD) */

void main(void)
{
     440:	b530      	push	{r4, r5, lr}
     442:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();
     444:	2300      	movs	r3, #0
     446:	e007      	b.n	458 <main+0x18>
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     448:	f503 71c0 	add.w	r1, r3, #384	; 0x180
     44c:	4a46      	ldr	r2, [pc, #280]	; (568 <FIH_LABEL_FIH_CALL_END_221+0xd8>)
     44e:	4847      	ldr	r0, [pc, #284]	; (56c <FIH_LABEL_FIH_CALL_END_221+0xdc>)
     450:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
     454:	3301      	adds	r3, #1
     456:	b2db      	uxtb	r3, r3
     458:	2b07      	cmp	r3, #7
     45a:	d9f5      	bls.n	448 <main+0x8>

    BOOT_LOG_INF("Starting bootloader");
     45c:	f04f 0000 	mov.w	r0, #0
     460:	2303      	movs	r3, #3
     462:	f363 0002 	bfi	r0, r3, #0, #3
     466:	f36f 00c5 	bfc	r0, #3, #3
     46a:	4b41      	ldr	r3, [pc, #260]	; (570 <FIH_LABEL_FIH_CALL_END_221+0xe0>)
     46c:	4a41      	ldr	r2, [pc, #260]	; (574 <FIH_LABEL_FIH_CALL_END_221+0xe4>)
     46e:	1a9b      	subs	r3, r3, r2
     470:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     474:	f363 108f 	bfi	r0, r3, #6, #10
     478:	493f      	ldr	r1, [pc, #252]	; (578 <FIH_LABEL_FIH_CALL_END_221+0xe8>)
     47a:	f007 f8cc 	bl	7616 <log_string_sync>

    os_heap_init();
     47e:	f000 f8bd 	bl	5fc <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     482:	483e      	ldr	r0, [pc, #248]	; (57c <FIH_LABEL_FIH_CALL_END_221+0xec>)
     484:	f000 f88a 	bl	59c <flash_device_get_binding>
     488:	b1c0      	cbz	r0, 4bc <FIH_LABEL_FIH_CALL_END_221+0x2c>

0000048a <FIH_LABEL_FIH_CALL_START_207>:
        wait_for_usb_dfu();
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     48a:	a801      	add	r0, sp, #4
     48c:	f000 fe2e 	bl	10ec <boot_go>

00000490 <FIH_LABEL_FIH_CALL_END_221>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     490:	4a3b      	ldr	r2, [pc, #236]	; (580 <FIH_LABEL_FIH_CALL_END_221+0xf0>)
     492:	6812      	ldr	r2, [r2, #0]
     494:	4282      	cmp	r2, r0
     496:	d022      	beq.n	4de <FIH_LABEL_FIH_CALL_END_221+0x4e>
        BOOT_LOG_ERR("Unable to find bootable image");
     498:	f04f 0000 	mov.w	r0, #0
     49c:	2301      	movs	r3, #1
     49e:	f363 0002 	bfi	r0, r3, #0, #3
     4a2:	f36f 00c5 	bfc	r0, #3, #3
     4a6:	4b32      	ldr	r3, [pc, #200]	; (570 <FIH_LABEL_FIH_CALL_END_221+0xe0>)
     4a8:	4a32      	ldr	r2, [pc, #200]	; (574 <FIH_LABEL_FIH_CALL_END_221+0xe4>)
     4aa:	1a9b      	subs	r3, r3, r2
     4ac:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     4b0:	f363 108f 	bfi	r0, r3, #6, #10
     4b4:	4933      	ldr	r1, [pc, #204]	; (584 <FIH_LABEL_FIH_CALL_END_221+0xf4>)
     4b6:	f007 f8ae 	bl	7616 <log_string_sync>
        FIH_PANIC;
     4ba:	e7fe      	b.n	4ba <FIH_LABEL_FIH_CALL_END_221+0x2a>
        BOOT_LOG_ERR("Flash device %s not found",
     4bc:	2301      	movs	r3, #1
     4be:	f363 0002 	bfi	r0, r3, #0, #3
     4c2:	f36f 00c5 	bfc	r0, #3, #3
     4c6:	4b2a      	ldr	r3, [pc, #168]	; (570 <FIH_LABEL_FIH_CALL_END_221+0xe0>)
     4c8:	4a2a      	ldr	r2, [pc, #168]	; (574 <FIH_LABEL_FIH_CALL_END_221+0xe4>)
     4ca:	1a9b      	subs	r3, r3, r2
     4cc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     4d0:	f363 108f 	bfi	r0, r3, #6, #10
     4d4:	4a29      	ldr	r2, [pc, #164]	; (57c <FIH_LABEL_FIH_CALL_END_221+0xec>)
     4d6:	492c      	ldr	r1, [pc, #176]	; (588 <FIH_LABEL_FIH_CALL_END_221+0xf8>)
     4d8:	f007 f89d 	bl	7616 <log_string_sync>
        while (1)
     4dc:	e7fe      	b.n	4dc <FIH_LABEL_FIH_CALL_END_221+0x4c>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     4de:	2503      	movs	r5, #3
     4e0:	f04f 0000 	mov.w	r0, #0
     4e4:	f365 0002 	bfi	r0, r5, #0, #3
     4e8:	f36f 00c5 	bfc	r0, #3, #3
     4ec:	4c20      	ldr	r4, [pc, #128]	; (570 <FIH_LABEL_FIH_CALL_END_221+0xe0>)
     4ee:	4b21      	ldr	r3, [pc, #132]	; (574 <FIH_LABEL_FIH_CALL_END_221+0xe4>)
     4f0:	1ae4      	subs	r4, r4, r3
     4f2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
     4f6:	f364 108f 	bfi	r0, r4, #6, #10
     4fa:	9a03      	ldr	r2, [sp, #12]
     4fc:	4923      	ldr	r1, [pc, #140]	; (58c <FIH_LABEL_FIH_CALL_END_221+0xfc>)
     4fe:	f007 f88a 	bl	7616 <log_string_sync>
                 rsp.br_image_off);

    BOOT_LOG_INF("Jumping to the first image slot");
     502:	f04f 0000 	mov.w	r0, #0
     506:	f365 0002 	bfi	r0, r5, #0, #3
     50a:	f36f 00c5 	bfc	r0, #3, #3
     50e:	f364 108f 	bfi	r0, r4, #6, #10
     512:	491f      	ldr	r1, [pc, #124]	; (590 <FIH_LABEL_FIH_CALL_END_221+0x100>)
     514:	f007 f87f 	bl	7616 <log_string_sync>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     518:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     51c:	2000      	movs	r0, #0
     51e:	f003 ff53 	bl	43c8 <fprotect_area>

    if (rc != 0) {
     522:	b160      	cbz	r0, 53e <FIH_LABEL_FIH_CALL_END_221+0xae>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     524:	f04f 0000 	mov.w	r0, #0
     528:	2301      	movs	r3, #1
     52a:	f363 0002 	bfi	r0, r3, #0, #3
     52e:	f36f 00c5 	bfc	r0, #3, #3
     532:	f364 108f 	bfi	r0, r4, #6, #10
     536:	4917      	ldr	r1, [pc, #92]	; (594 <FIH_LABEL_FIH_CALL_END_221+0x104>)
     538:	f007 f86d 	bl	7616 <log_string_sync>
        while (1)
     53c:	e7fe      	b.n	53c <FIH_LABEL_FIH_CALL_END_221+0xac>
    pcd_lock_ram();
#endif

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);
     53e:	a801      	add	r0, sp, #4
     540:	f006 f802 	bl	6548 <do_boot>

    BOOT_LOG_ERR("Never should get here");
     544:	f04f 0000 	mov.w	r0, #0
     548:	2301      	movs	r3, #1
     54a:	f363 0002 	bfi	r0, r3, #0, #3
     54e:	f36f 00c5 	bfc	r0, #3, #3
     552:	4b07      	ldr	r3, [pc, #28]	; (570 <FIH_LABEL_FIH_CALL_END_221+0xe0>)
     554:	4a07      	ldr	r2, [pc, #28]	; (574 <FIH_LABEL_FIH_CALL_END_221+0xe4>)
     556:	1a9b      	subs	r3, r3, r2
     558:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     55c:	f363 108f 	bfi	r0, r3, #6, #10
     560:	490d      	ldr	r1, [pc, #52]	; (598 <FIH_LABEL_FIH_CALL_END_221+0x108>)
     562:	f007 f858 	bl	7616 <log_string_sync>
    while (1)
     566:	e7fe      	b.n	566 <FIH_LABEL_FIH_CALL_END_221+0xd6>
     568:	50018000 	.word	0x50018000
     56c:	6e524635 	.word	0x6e524635
     570:	0000a09c 	.word	0x0000a09c
     574:	0000a08c 	.word	0x0000a08c
     578:	0000a0f8 	.word	0x0000a0f8
     57c:	0000a10c 	.word	0x0000a10c
     580:	20021a2c 	.word	0x20021a2c
     584:	0000a13c 	.word	0x0000a13c
     588:	0000a120 	.word	0x0000a120
     58c:	0000a15c 	.word	0x0000a15c
     590:	0000a188 	.word	0x0000a188
     594:	0000a1a8 	.word	0x0000a1a8
     598:	0000a1d8 	.word	0x0000a1d8

0000059c <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     59c:	b508      	push	{r3, lr}
    if (!flash_dev) {
     59e:	4b05      	ldr	r3, [pc, #20]	; (5b4 <flash_device_get_binding+0x18>)
     5a0:	681b      	ldr	r3, [r3, #0]
     5a2:	b113      	cbz	r3, 5aa <flash_device_get_binding+0xe>
        flash_dev = device_get_binding(dev_name);
    }
    return flash_dev;
}
     5a4:	4b03      	ldr	r3, [pc, #12]	; (5b4 <flash_device_get_binding+0x18>)
     5a6:	6818      	ldr	r0, [r3, #0]
     5a8:	bd08      	pop	{r3, pc}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     5aa:	f005 f8cf 	bl	574c <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     5ae:	4b01      	ldr	r3, [pc, #4]	; (5b4 <flash_device_get_binding+0x18>)
     5b0:	6018      	str	r0, [r3, #0]
     5b2:	e7f7      	b.n	5a4 <flash_device_get_binding+0x8>
     5b4:	20020228 	.word	0x20020228

000005b8 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     5b8:	b910      	cbnz	r0, 5c0 <flash_device_base+0x8>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
    }
    *ret = FLASH_DEVICE_BASE;
     5ba:	2000      	movs	r0, #0
     5bc:	6008      	str	r0, [r1, #0]
    return 0;
}
     5be:	4770      	bx	lr
{
     5c0:	b508      	push	{r3, lr}
     5c2:	4602      	mov	r2, r0
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     5c4:	f04f 0000 	mov.w	r0, #0
     5c8:	2301      	movs	r3, #1
     5ca:	f363 0002 	bfi	r0, r3, #0, #3
     5ce:	f36f 00c5 	bfc	r0, #3, #3
     5d2:	4b07      	ldr	r3, [pc, #28]	; (5f0 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x14>)
     5d4:	4907      	ldr	r1, [pc, #28]	; (5f4 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x18>)
     5d6:	1a5b      	subs	r3, r3, r1
     5d8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     5dc:	f363 108f 	bfi	r0, r3, #6, #10
     5e0:	2300      	movs	r3, #0
     5e2:	4905      	ldr	r1, [pc, #20]	; (5f8 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x1c>)
     5e4:	f007 f817 	bl	7616 <log_string_sync>
        return -EINVAL;
     5e8:	f06f 0015 	mvn.w	r0, #21
}
     5ec:	bd08      	pop	{r3, pc}
     5ee:	bf00      	nop
     5f0:	0000a09c 	.word	0x0000a09c
     5f4:	0000a08c 	.word	0x0000a08c
     5f8:	0000a1f8 	.word	0x0000a1f8

000005fc <os_heap_init>:

/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
     5fc:	b508      	push	{r3, lr}
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     5fe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     602:	4802      	ldr	r0, [pc, #8]	; (60c <os_heap_init+0x10>)
     604:	f004 fb0c 	bl	4c20 <mbedtls_memory_buffer_alloc_init>
}
     608:	bd08      	pop	{r3, pc}
     60a:	bf00      	nop
     60c:	2002022c 	.word	0x2002022c

00000610 <bootutil_find_key>:

#ifdef EXPECTED_SIG_TLV
#if !defined(MCUBOOT_HW_KEY)
static int
bootutil_find_key(uint8_t *keyhash, uint8_t keyhash_len)
{
     610:	b570      	push	{r4, r5, r6, lr}
     612:	b0a4      	sub	sp, #144	; 0x90
    bootutil_sha256_context sha256_ctx;
    int i;
    const struct bootutil_key *key;
    uint8_t hash[32];

    if (keyhash_len > 32) {
     614:	2920      	cmp	r1, #32
     616:	d828      	bhi.n	66a <bootutil_find_key+0x5a>
     618:	4606      	mov	r6, r0
     61a:	460d      	mov	r5, r1
        return -1;
    }

    for (i = 0; i < bootutil_key_cnt; i++) {
     61c:	2400      	movs	r4, #0
     61e:	4b14      	ldr	r3, [pc, #80]	; (670 <bootutil_find_key+0x60>)
     620:	681b      	ldr	r3, [r3, #0]
     622:	42a3      	cmp	r3, r4
     624:	dd1c      	ble.n	660 <bootutil_find_key+0x50>
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     626:	a809      	add	r0, sp, #36	; 0x24
     628:	f009 f940 	bl	98ac <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     62c:	2100      	movs	r1, #0
     62e:	a809      	add	r0, sp, #36	; 0x24
     630:	f004 fc24 	bl	4e7c <mbedtls_sha256_starts_ret>
        key = &bootutil_keys[i];
        bootutil_sha256_init(&sha256_ctx);
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     634:	4b0f      	ldr	r3, [pc, #60]	; (674 <bootutil_find_key+0x64>)
     636:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
     63a:	6852      	ldr	r2, [r2, #4]

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     63c:	6812      	ldr	r2, [r2, #0]
     63e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
     642:	a809      	add	r0, sp, #36	; 0x24
     644:	f009 f938 	bl	98b8 <mbedtls_sha256_update_ret>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     648:	a901      	add	r1, sp, #4
     64a:	a809      	add	r0, sp, #36	; 0x24
     64c:	f009 f977 	bl	993e <mbedtls_sha256_finish_ret>
        bootutil_sha256_finish(&sha256_ctx, hash);
        if (!memcmp(hash, keyhash, keyhash_len)) {
     650:	462a      	mov	r2, r5
     652:	4631      	mov	r1, r6
     654:	a801      	add	r0, sp, #4
     656:	f007 fb6e 	bl	7d36 <memcmp>
     65a:	b118      	cbz	r0, 664 <bootutil_find_key+0x54>
    for (i = 0; i < bootutil_key_cnt; i++) {
     65c:	3401      	adds	r4, #1
     65e:	e7de      	b.n	61e <bootutil_find_key+0xe>
            bootutil_sha256_drop(&sha256_ctx);
            return i;
        }
    }
    bootutil_sha256_drop(&sha256_ctx);
    return -1;
     660:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
     664:	4620      	mov	r0, r4
     666:	b024      	add	sp, #144	; 0x90
     668:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
     66a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     66e:	e7f9      	b.n	664 <bootutil_find_key+0x54>
     670:	0000a21c 	.word	0x0000a21c
     674:	0000a220 	.word	0x0000a220

00000678 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     67c:	b0d6      	sub	sp, #344	; 0x158
     67e:	4615      	mov	r5, r2
     680:	461f      	mov	r7, r3
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     682:	4c5a      	ldr	r4, [pc, #360]	; (7ec <FIH_LABEL_FIH_CALL_END_687+0x80>)
     684:	f8d4 8000 	ldr.w	r8, [r4]
    fih_int security_cnt = fih_int_encode(INT_MAX);
    uint32_t img_security_cnt = 0;
    fih_int security_counter_valid = FIH_FAILURE;
#endif

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
     688:	9c5f      	ldr	r4, [sp, #380]	; 0x17c
     68a:	9404      	str	r4, [sp, #16]
     68c:	9c5e      	ldr	r4, [sp, #376]	; 0x178
     68e:	9403      	str	r4, [sp, #12]
     690:	ac06      	add	r4, sp, #24
     692:	9402      	str	r4, [sp, #8]
     694:	9c5d      	ldr	r4, [sp, #372]	; 0x174
     696:	9401      	str	r4, [sp, #4]
     698:	9c5c      	ldr	r4, [sp, #368]	; 0x170
     69a:	9400      	str	r4, [sp, #0]
     69c:	f005 ff7e 	bl	659c <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
     6a0:	4604      	mov	r4, r0
     6a2:	2800      	cmp	r0, #0
     6a4:	f040 8085 	bne.w	7b2 <FIH_LABEL_FIH_CALL_END_687+0x46>
        goto out;
    }

    if (out_hash) {
     6a8:	9b60      	ldr	r3, [sp, #384]	; 0x180
     6aa:	b123      	cbz	r3, 6b6 <bootutil_img_validate+0x3e>
        memcpy(out_hash, hash, 32);
     6ac:	2220      	movs	r2, #32
     6ae:	a906      	add	r1, sp, #24
     6b0:	4618      	mov	r0, r3
     6b2:	f007 fb57 	bl	7d64 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     6b6:	2300      	movs	r3, #0
     6b8:	9300      	str	r3, [sp, #0]
     6ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
     6be:	463a      	mov	r2, r7
     6c0:	4629      	mov	r1, r5
     6c2:	a84e      	add	r0, sp, #312	; 0x138
     6c4:	f005 ffa9 	bl	661a <bootutil_tlv_iter_begin>
    if (rc) {
     6c8:	4604      	mov	r4, r0
     6ca:	2800      	cmp	r0, #0
     6cc:	d171      	bne.n	7b2 <FIH_LABEL_FIH_CALL_END_687+0x46>
    fih_int fih_rc = FIH_FAILURE;
     6ce:	4645      	mov	r5, r8
    int key_id = -1;
     6d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     6d4:	e01c      	b.n	710 <FIH_LABEL_FIH_CALL_END_569+0xa>
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
                key_id = -1;
     6d6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     6da:	e019      	b.n	710 <FIH_LABEL_FIH_CALL_END_569+0xa>
     6dc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     6e0:	e016      	b.n	710 <FIH_LABEL_FIH_CALL_END_569+0xa>
            if (len != sizeof(hash)) {
     6e2:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     6e6:	2b20      	cmp	r3, #32
     6e8:	d177      	bne.n	7da <FIH_LABEL_FIH_CALL_END_687+0x6e>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     6ea:	aa0e      	add	r2, sp, #56	; 0x38
     6ec:	9955      	ldr	r1, [sp, #340]	; 0x154
     6ee:	4638      	mov	r0, r7
     6f0:	f007 f87a 	bl	77e8 <flash_area_read>
            if (rc) {
     6f4:	4604      	mov	r4, r0
     6f6:	2800      	cmp	r0, #0
     6f8:	d161      	bne.n	7be <FIH_LABEL_FIH_CALL_END_687+0x52>

000006fa <FIH_LABEL_FIH_CALL_START_549>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     6fa:	2220      	movs	r2, #32
     6fc:	a90e      	add	r1, sp, #56	; 0x38
     6fe:	a806      	add	r0, sp, #24
     700:	f006 f911 	bl	6926 <boot_fih_memequal>
     704:	4605      	mov	r5, r0

00000706 <FIH_LABEL_FIH_CALL_END_569>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     706:	4b3a      	ldr	r3, [pc, #232]	; (7f0 <FIH_LABEL_FIH_CALL_END_687+0x84>)
     708:	681b      	ldr	r3, [r3, #0]
     70a:	4283      	cmp	r3, r0
     70c:	d159      	bne.n	7c2 <FIH_LABEL_FIH_CALL_END_687+0x56>
            sha256_valid = 1;
     70e:	2401      	movs	r4, #1
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     710:	ab54      	add	r3, sp, #336	; 0x150
     712:	f50d 72a9 	add.w	r2, sp, #338	; 0x152
     716:	a955      	add	r1, sp, #340	; 0x154
     718:	a84e      	add	r0, sp, #312	; 0x138
     71a:	f005 ffe3 	bl	66e4 <bootutil_tlv_iter_next>
        if (rc < 0) {
     71e:	2800      	cmp	r0, #0
     720:	db45      	blt.n	7ae <FIH_LABEL_FIH_CALL_END_687+0x42>
        } else if (rc > 0) {
     722:	dc37      	bgt.n	794 <FIH_LABEL_FIH_CALL_END_687+0x28>
        if (type == IMAGE_TLV_SHA256) {
     724:	f8bd 2150 	ldrh.w	r2, [sp, #336]	; 0x150
     728:	2a10      	cmp	r2, #16
     72a:	d0da      	beq.n	6e2 <bootutil_img_validate+0x6a>
        } else if (type == IMAGE_TLV_KEYHASH) {
     72c:	2a01      	cmp	r2, #1
     72e:	d020      	beq.n	772 <FIH_LABEL_FIH_CALL_END_687+0x6>
        } else if (type == EXPECTED_SIG_TLV) {
     730:	2a20      	cmp	r2, #32
     732:	d1ed      	bne.n	710 <FIH_LABEL_FIH_CALL_END_569+0xa>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     734:	2e00      	cmp	r6, #0
     736:	dbce      	blt.n	6d6 <bootutil_img_validate+0x5e>
     738:	4b2e      	ldr	r3, [pc, #184]	; (7f4 <FIH_LABEL_FIH_CALL_END_687+0x88>)
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	42b3      	cmp	r3, r6
     73e:	ddcd      	ble.n	6dc <bootutil_img_validate+0x64>
                continue;
            }
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     740:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     748:	d14d      	bne.n	7e6 <FIH_LABEL_FIH_CALL_END_687+0x7a>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     74a:	aa0e      	add	r2, sp, #56	; 0x38
     74c:	9955      	ldr	r1, [sp, #340]	; 0x154
     74e:	4638      	mov	r0, r7
     750:	f007 f84a 	bl	77e8 <flash_area_read>
            if (rc) {
     754:	2800      	cmp	r0, #0
     756:	d139      	bne.n	7cc <FIH_LABEL_FIH_CALL_END_687+0x60>

00000758 <FIH_LABEL_FIH_CALL_START_662>:
                goto out;
            }
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     758:	b2f6      	uxtb	r6, r6
     75a:	9600      	str	r6, [sp, #0]
     75c:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     760:	aa0e      	add	r2, sp, #56	; 0x38
     762:	2120      	movs	r1, #32
     764:	a806      	add	r0, sp, #24
     766:	f000 f8b7 	bl	8d8 <bootutil_verify_sig>
     76a:	4680      	mov	r8, r0

0000076c <FIH_LABEL_FIH_CALL_END_687>:
                                                           buf, len, key_id);
            key_id = -1;
     76c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     770:	e7ce      	b.n	710 <FIH_LABEL_FIH_CALL_END_569+0xa>
            if (len > 32) {
     772:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     776:	2b20      	cmp	r3, #32
     778:	d832      	bhi.n	7e0 <FIH_LABEL_FIH_CALL_END_687+0x74>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     77a:	aa0e      	add	r2, sp, #56	; 0x38
     77c:	9955      	ldr	r1, [sp, #340]	; 0x154
     77e:	4638      	mov	r0, r7
     780:	f007 f832 	bl	77e8 <flash_area_read>
            if (rc) {
     784:	b9f8      	cbnz	r0, 7c6 <FIH_LABEL_FIH_CALL_END_687+0x5a>
            key_id = bootutil_find_key(buf, len);
     786:	f89d 1152 	ldrb.w	r1, [sp, #338]	; 0x152
     78a:	a80e      	add	r0, sp, #56	; 0x38
     78c:	f7ff ff40 	bl	610 <bootutil_find_key>
     790:	4606      	mov	r6, r0
     792:	e7bd      	b.n	710 <FIH_LABEL_FIH_CALL_END_569+0xa>
            security_counter_valid = fih_rc;
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
     794:	2c00      	cmp	r4, #0
     796:	bf0c      	ite	eq
     798:	2401      	moveq	r4, #1
     79a:	2400      	movne	r4, #0
    if (rc) {
     79c:	d019      	beq.n	7d2 <FIH_LABEL_FIH_CALL_END_687+0x66>
        goto out;
    }
#ifdef EXPECTED_SIG_TLV
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     79e:	4b14      	ldr	r3, [pc, #80]	; (7f0 <FIH_LABEL_FIH_CALL_END_687+0x84>)
     7a0:	681b      	ldr	r3, [r3, #0]
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     7a2:	4543      	cmp	r3, r8
     7a4:	d017      	beq.n	7d6 <FIH_LABEL_FIH_CALL_END_687+0x6a>
        return FIH_FAILURE;
     7a6:	4b11      	ldr	r3, [pc, #68]	; (7ec <FIH_LABEL_FIH_CALL_END_687+0x80>)
     7a8:	f8d3 8000 	ldr.w	r8, [r3]
     7ac:	e001      	b.n	7b2 <FIH_LABEL_FIH_CALL_END_687+0x46>
     7ae:	46a8      	mov	r8, r5
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     7b0:	4604      	mov	r4, r0
        goto out;
    }
#endif

out:
    if (rc) {
     7b2:	b904      	cbnz	r4, 7b6 <FIH_LABEL_FIH_CALL_END_687+0x4a>
     7b4:	4644      	mov	r4, r8
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     7b6:	4620      	mov	r0, r4
     7b8:	b056      	add	sp, #344	; 0x158
     7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     7be:	46a8      	mov	r8, r5
     7c0:	e7f7      	b.n	7b2 <FIH_LABEL_FIH_CALL_END_687+0x46>
     7c2:	4680      	mov	r8, r0
     7c4:	e7f5      	b.n	7b2 <FIH_LABEL_FIH_CALL_END_687+0x46>
     7c6:	46a8      	mov	r8, r5
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     7c8:	4604      	mov	r4, r0
     7ca:	e7f2      	b.n	7b2 <FIH_LABEL_FIH_CALL_END_687+0x46>
     7cc:	46a8      	mov	r8, r5
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     7ce:	4604      	mov	r4, r0
     7d0:	e7ef      	b.n	7b2 <FIH_LABEL_FIH_CALL_END_687+0x46>
     7d2:	46a8      	mov	r8, r5
     7d4:	e7ed      	b.n	7b2 <FIH_LABEL_FIH_CALL_END_687+0x46>
    } else {
        return FIH_SUCCESS;
     7d6:	4698      	mov	r8, r3
     7d8:	e7eb      	b.n	7b2 <FIH_LABEL_FIH_CALL_END_687+0x46>
                rc = -1;
     7da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     7de:	e7ea      	b.n	7b6 <FIH_LABEL_FIH_CALL_END_687+0x4a>
                rc = -1;
     7e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     7e4:	e7e7      	b.n	7b6 <FIH_LABEL_FIH_CALL_END_687+0x4a>
                rc = -1;
     7e6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    FIH_RET(fih_rc);
     7ea:	e7e4      	b.n	7b6 <FIH_LABEL_FIH_CALL_END_687+0x4a>
     7ec:	20020000 	.word	0x20020000
     7f0:	20021a2c 	.word	0x20021a2c
     7f4:	0000a21c 	.word	0x0000a21c

000007f8 <bootutil_cmp_rsasig>:
 * values.
 */
static fih_int
bootutil_cmp_rsasig(mbedtls_rsa_context *ctx, uint8_t *hash, uint32_t hlen,
  uint8_t *sig)
{
     7f8:	b570      	push	{r4, r5, r6, lr}
     7fa:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
     7fe:	460e      	mov	r6, r1
     800:	4619      	mov	r1, r3
    uint8_t h2[PSS_HLEN];
    int i;
    int rc = 0;
    fih_int fih_rc = FIH_FAILURE;

    if (ctx->len != PSS_EMLEN || PSS_EMLEN > MBEDTLS_MPI_MAX_SIZE) {
     802:	6843      	ldr	r3, [r0, #4]
     804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     808:	d14f      	bne.n	8aa <FIH_LABEL_FIH_CALL_END_594+0x2>
        rc = -1;
        goto out;
    }

    if (hlen != PSS_HLEN) {
     80a:	2a20      	cmp	r2, #32
     80c:	d150      	bne.n	8b0 <FIH_LABEL_FIH_CALL_END_594+0x8>
        rc = -1;
        goto out;
    }

    if (mbedtls_rsa_public(ctx, sig, em)) {
     80e:	aa41      	add	r2, sp, #260	; 0x104
     810:	f004 faf2 	bl	4df8 <mbedtls_rsa_public>
     814:	4605      	mov	r5, r0
     816:	2800      	cmp	r0, #0
     818:	d14d      	bne.n	8b6 <FIH_LABEL_FIH_CALL_END_594+0xe>
     */

    /* Step 4.  If the rightmost octet of EM does have the value
     * 0xbc, output inconsistent and stop.
     */
    if (em[PSS_EMLEN - 1] != 0xbc) {
     81a:	f89d 3203 	ldrb.w	r3, [sp, #515]	; 0x203
     81e:	2bbc      	cmp	r3, #188	; 0xbc
     820:	d14c      	bne.n	8bc <FIH_LABEL_FIH_CALL_END_594+0x14>
     *
     * 8emLen - emBits is zero, so there is nothing to test here.
     */

    /* Step 7.  let dbMask = MGF(H, emLen - hLen - 1). */
    pss_mgf1(db_mask, &em[PSS_HASH_OFFSET]);
     822:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
     826:	a809      	add	r0, sp, #36	; 0x24
     828:	f006 f80a 	bl	6840 <pss_mgf1>

    /* Step 8.  let DB = maskedDB xor dbMask.
     * To avoid needing an additional buffer, store the 'db' in the
     * same buffer as db_mask.  From now, to the end of this function,
     * db_mask refers to the unmasked 'db'. */
    for (i = 0; i < PSS_MASK_LEN; i++) {
     82c:	462b      	mov	r3, r5
     82e:	2bde      	cmp	r3, #222	; 0xde
     830:	dc07      	bgt.n	842 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x42>
        db_mask[i] ^= em[i];
     832:	aa41      	add	r2, sp, #260	; 0x104
     834:	5cd2      	ldrb	r2, [r2, r3]
     836:	a809      	add	r0, sp, #36	; 0x24
     838:	5cc4      	ldrb	r4, [r0, r3]
     83a:	4062      	eors	r2, r4
     83c:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < PSS_MASK_LEN; i++) {
     83e:	3301      	adds	r3, #1
     840:	e7f5      	b.n	82e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2e>

    /* Step 9.  Set the leftmost 8emLen - emBits bits of the leftmost
     * octet in DB to zero.
     * pycrypto seems to always make the emBits 2047, so we need to
     * clear the top bit. */
    db_mask[0] &= 0x7F;
     842:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
     846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     84a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

    /* Step 10.  If the emLen - hLen - sLen - 2 leftmost octets of DB
     * are not zero or if the octet at position emLen - hLen - sLen -
     * 1 (the leftmost position is "position 1") does not have
     * hexadecimal value 0x01, output "inconsistent" and stop. */
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     84e:	2dbd      	cmp	r5, #189	; 0xbd
     850:	dc05      	bgt.n	85e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x5e>
        if (db_mask[i] != 0) {
     852:	ab09      	add	r3, sp, #36	; 0x24
     854:	5d5b      	ldrb	r3, [r3, r5]
     856:	2b00      	cmp	r3, #0
     858:	d133      	bne.n	8c2 <FIH_LABEL_FIH_CALL_END_594+0x1a>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     85a:	3501      	adds	r5, #1
     85c:	e7f7      	b.n	84e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4e>
            rc = -1;
            goto out;
        }
    }

    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     85e:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
     862:	2b01      	cmp	r3, #1
     864:	d132      	bne.n	8cc <FIH_LABEL_FIH_CALL_END_594+0x24>
    mbedtls_sha256_init(ctx);
     866:	a881      	add	r0, sp, #516	; 0x204
     868:	f009 f820 	bl	98ac <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     86c:	2100      	movs	r1, #0
     86e:	a881      	add	r0, sp, #516	; 0x204
     870:	f004 fb04 	bl	4e7c <mbedtls_sha256_starts_ret>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     874:	2208      	movs	r2, #8
     876:	4917      	ldr	r1, [pc, #92]	; (8d4 <FIH_LABEL_FIH_CALL_END_594+0x2c>)
     878:	a881      	add	r0, sp, #516	; 0x204
     87a:	f009 f81d 	bl	98b8 <mbedtls_sha256_update_ret>
     87e:	2220      	movs	r2, #32
     880:	4631      	mov	r1, r6
     882:	a881      	add	r0, sp, #516	; 0x204
     884:	f009 f818 	bl	98b8 <mbedtls_sha256_update_ret>
     888:	2220      	movs	r2, #32
     88a:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
     88e:	a881      	add	r0, sp, #516	; 0x204
     890:	f009 f812 	bl	98b8 <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     894:	a901      	add	r1, sp, #4
     896:	a881      	add	r0, sp, #516	; 0x204
     898:	f009 f851 	bl	993e <mbedtls_sha256_finish_ret>

0000089c <FIH_LABEL_FIH_CALL_START_578>:
    bootutil_sha256_finish(&shactx, h2);
    bootutil_sha256_drop(&shactx);

    /* Step 14.  If H = H', output "consistent".  Otherwise, output
     * "inconsistent". */
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     89c:	2220      	movs	r2, #32
     89e:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
     8a2:	a801      	add	r0, sp, #4
     8a4:	f006 f83f 	bl	6926 <boot_fih_memequal>

000008a8 <FIH_LABEL_FIH_CALL_END_594>:

out:
    if (rc) {
     8a8:	e00d      	b.n	8c6 <FIH_LABEL_FIH_CALL_END_594+0x1e>
     8aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     8ae:	e00a      	b.n	8c6 <FIH_LABEL_FIH_CALL_END_594+0x1e>
     8b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     8b4:	e007      	b.n	8c6 <FIH_LABEL_FIH_CALL_END_594+0x1e>
     8b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     8ba:	e004      	b.n	8c6 <FIH_LABEL_FIH_CALL_END_594+0x1e>
     8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     8c0:	e001      	b.n	8c6 <FIH_LABEL_FIH_CALL_END_594+0x1e>
     8c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     8c6:	f50d 7d1c 	add.w	sp, sp, #624	; 0x270
     8ca:	bd70      	pop	{r4, r5, r6, pc}
     8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    FIH_RET(fih_rc);
     8d0:	e7f9      	b.n	8c6 <FIH_LABEL_FIH_CALL_END_594+0x1e>
     8d2:	bf00      	nop
     8d4:	0000a228 	.word	0x0000a228

000008d8 <bootutil_verify_sig>:

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     8dc:	b0ac      	sub	sp, #176	; 0xb0
     8de:	4606      	mov	r6, r0
     8e0:	460f      	mov	r7, r1
     8e2:	4690      	mov	r8, r2
     8e4:	461d      	mov	r5, r3
     8e6:	f89d a0d0 	ldrb.w	sl, [sp, #208]	; 0xd0
    mbedtls_rsa_context ctx;
    int rc;
    fih_int fih_rc = FIH_FAILURE;
     8ea:	4b15      	ldr	r3, [pc, #84]	; (940 <FIH_LABEL_FIH_CALL_END_820+0x2>)
     8ec:	f8d3 9000 	ldr.w	r9, [r3]
    uint8_t *cp;
    uint8_t *end;

    mbedtls_rsa_init(&ctx, 0, 0);
     8f0:	2200      	movs	r2, #0
     8f2:	4611      	mov	r1, r2
     8f4:	a801      	add	r0, sp, #4
     8f6:	f008 ff93 	bl	9820 <mbedtls_rsa_init>

    cp = (uint8_t *)bootutil_keys[key_id].key;
     8fa:	4c12      	ldr	r4, [pc, #72]	; (944 <FIH_LABEL_FIH_CALL_END_820+0x6>)
     8fc:	f854 303a 	ldr.w	r3, [r4, sl, lsl #3]
     900:	9300      	str	r3, [sp, #0]
    end = cp + *bootutil_keys[key_id].len;
     902:	eb04 04ca 	add.w	r4, r4, sl, lsl #3
     906:	6862      	ldr	r2, [r4, #4]
     908:	6812      	ldr	r2, [r2, #0]

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
     90a:	441a      	add	r2, r3
     90c:	4669      	mov	r1, sp
     90e:	a801      	add	r0, sp, #4
     910:	f005 ff44 	bl	679c <bootutil_parse_rsakey>
    if (rc || slen != ctx.len) {
     914:	b910      	cbnz	r0, 91c <bootutil_verify_sig+0x44>
     916:	9b02      	ldr	r3, [sp, #8]
     918:	42ab      	cmp	r3, r5
     91a:	d009      	beq.n	930 <FIH_LABEL_FIH_CALL_START_800>
        mbedtls_rsa_free(&ctx);
     91c:	a801      	add	r0, sp, #4
     91e:	f008 ff8d 	bl	983c <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     922:	a801      	add	r0, sp, #4
     924:	f008 ff8a 	bl	983c <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     928:	4648      	mov	r0, r9
     92a:	b02c      	add	sp, #176	; 0xb0
     92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00000930 <FIH_LABEL_FIH_CALL_START_800>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     930:	4643      	mov	r3, r8
     932:	463a      	mov	r2, r7
     934:	4631      	mov	r1, r6
     936:	a801      	add	r0, sp, #4
     938:	f7ff ff5e 	bl	7f8 <bootutil_cmp_rsasig>
     93c:	4681      	mov	r9, r0

0000093e <FIH_LABEL_FIH_CALL_END_820>:
     93e:	e7f0      	b.n	922 <bootutil_verify_sig+0x4a>
     940:	20020000 	.word	0x20020000
     944:	0000a220 	.word	0x0000a220

00000948 <boot_magic_decode>:
}
#endif

static int
boot_magic_decode(const uint32_t *magic)
{
     948:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     94a:	2210      	movs	r2, #16
     94c:	4903      	ldr	r1, [pc, #12]	; (95c <boot_magic_decode+0x14>)
     94e:	f007 f9f2 	bl	7d36 <memcmp>
     952:	b108      	cbz	r0, 958 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    }
    return BOOT_MAGIC_BAD;
     954:	2002      	movs	r0, #2
}
     956:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
     958:	2001      	movs	r0, #1
     95a:	e7fc      	b.n	956 <boot_magic_decode+0xe>
     95c:	0000a27c 	.word	0x0000a27c

00000960 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
     960:	b570      	push	{r4, r5, r6, lr}
     962:	b086      	sub	sp, #24
     964:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
     966:	2303      	movs	r3, #3
     968:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     96c:	2400      	movs	r4, #0
     96e:	e007      	b.n	980 <boot_find_status+0x20>
        }

        off = boot_magic_off(*fap);
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
        if (rc != 0) {
            flash_area_close(*fap);
     970:	6828      	ldr	r0, [r5, #0]
     972:	f006 ff38 	bl	77e6 <flash_area_close>
            return rc;
     976:	e023      	b.n	9c0 <boot_find_status+0x60>

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
            return 0;
        }

        flash_area_close(*fap);
     978:	6828      	ldr	r0, [r5, #0]
     97a:	f006 ff34 	bl	77e6 <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     97e:	3401      	adds	r4, #1
     980:	2c01      	cmp	r4, #1
     982:	d81b      	bhi.n	9bc <boot_find_status+0x5c>
        rc = flash_area_open(areas[i], fap);
     984:	4629      	mov	r1, r5
     986:	ab06      	add	r3, sp, #24
     988:	4423      	add	r3, r4
     98a:	f813 0c14 	ldrb.w	r0, [r3, #-20]
     98e:	f001 ffcb 	bl	2928 <flash_area_open>
        if (rc != 0) {
     992:	4606      	mov	r6, r0
     994:	b9a0      	cbnz	r0, 9c0 <boot_find_status+0x60>
        off = boot_magic_off(*fap);
     996:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
     998:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     99a:	2310      	movs	r3, #16
     99c:	aa02      	add	r2, sp, #8
     99e:	3910      	subs	r1, #16
     9a0:	f006 ff22 	bl	77e8 <flash_area_read>
        if (rc != 0) {
     9a4:	4606      	mov	r6, r0
     9a6:	2800      	cmp	r0, #0
     9a8:	d1e2      	bne.n	970 <boot_find_status+0x10>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     9aa:	2210      	movs	r2, #16
     9ac:	4906      	ldr	r1, [pc, #24]	; (9c8 <boot_find_status+0x68>)
     9ae:	a802      	add	r0, sp, #8
     9b0:	f007 f9c1 	bl	7d36 <memcmp>
     9b4:	4606      	mov	r6, r0
     9b6:	2800      	cmp	r0, #0
     9b8:	d1de      	bne.n	978 <boot_find_status+0x18>
     9ba:	e001      	b.n	9c0 <boot_find_status+0x60>
    }

    /* If we got here, no magic was found */
    return -1;
     9bc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
     9c0:	4630      	mov	r0, r6
     9c2:	b006      	add	sp, #24
     9c4:	bd70      	pop	{r4, r5, r6, pc}
     9c6:	bf00      	nop
     9c8:	0000a27c 	.word	0x0000a27c

000009cc <boot_write_magic>:
}
#endif

int
boot_write_magic(const struct flash_area *fap)
{
     9cc:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
     9ce:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
     9d0:	2310      	movs	r3, #16
     9d2:	4a04      	ldr	r2, [pc, #16]	; (9e4 <boot_write_magic+0x18>)
     9d4:	3910      	subs	r1, #16
     9d6:	f006 ff26 	bl	7826 <flash_area_write>
    if (rc != 0) {
     9da:	b900      	cbnz	r0, 9de <boot_write_magic+0x12>
        return BOOT_EFLASH;
    }

    return 0;
}
     9dc:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
     9de:	2001      	movs	r0, #1
     9e0:	e7fc      	b.n	9dc <boot_write_magic+0x10>
     9e2:	bf00      	nop
     9e4:	0000a27c 	.word	0x0000a27c

000009e8 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
     9e8:	b530      	push	{r4, r5, lr}
     9ea:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     9ec:	a902      	add	r1, sp, #8
     9ee:	2003      	movs	r0, #3
     9f0:	f006 f85b 	bl	6aaa <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
     9f4:	2800      	cmp	r0, #0
     9f6:	d16e      	bne.n	ad6 <boot_swap_type_multi+0xee>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     9f8:	4669      	mov	r1, sp
     9fa:	2007      	movs	r0, #7
     9fc:	f006 f855 	bl	6aaa <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
     a00:	2800      	cmp	r0, #0
     a02:	d16a      	bne.n	ada <boot_swap_type_multi+0xf2>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
     a04:	2400      	movs	r4, #0
     a06:	e007      	b.n	a18 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
     a08:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
     a0a:	2b04      	cmp	r3, #4
     a0c:	d029      	beq.n	a62 <boot_swap_type_multi+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
     a0e:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
     a12:	4293      	cmp	r3, r2
     a14:	d025      	beq.n	a62 <boot_swap_type_multi+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
     a16:	3401      	adds	r4, #1
     a18:	2c02      	cmp	r4, #2
     a1a:	d848      	bhi.n	aae <boot_swap_type_multi+0xc6>
        table = boot_swap_tables + i;
     a1c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     a20:	4a2f      	ldr	r2, [pc, #188]	; (ae0 <boot_swap_type_multi+0xf8>)
     a22:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
     a26:	f89d 1008 	ldrb.w	r1, [sp, #8]
     a2a:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
     a2e:	f005 ff7e 	bl	692e <boot_magic_compatible_check>
     a32:	2800      	cmp	r0, #0
     a34:	d0ef      	beq.n	a16 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
     a36:	f89d 1000 	ldrb.w	r1, [sp]
     a3a:	7868      	ldrb	r0, [r5, #1]
     a3c:	f005 ff77 	bl	692e <boot_magic_compatible_check>
                                        primary_slot.magic) &&
     a40:	2800      	cmp	r0, #0
     a42:	d0e8      	beq.n	a16 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
     a44:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
     a46:	2b04      	cmp	r3, #4
     a48:	d003      	beq.n	a52 <boot_swap_type_multi+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
     a4a:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
     a4e:	4293      	cmp	r3, r2
     a50:	d1e1      	bne.n	a16 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
     a52:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
     a54:	2b04      	cmp	r3, #4
     a56:	d0d7      	beq.n	a08 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
     a58:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
     a5c:	4293      	cmp	r3, r2
     a5e:	d1da      	bne.n	a16 <boot_swap_type_multi+0x2e>
     a60:	e7d2      	b.n	a08 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
     a62:	f04f 0000 	mov.w	r0, #0
     a66:	2303      	movs	r3, #3
     a68:	f363 0002 	bfi	r0, r3, #0, #3
     a6c:	f36f 00c5 	bfc	r0, #3, #3
     a70:	4b1c      	ldr	r3, [pc, #112]	; (ae4 <boot_swap_type_multi+0xfc>)
     a72:	4a1d      	ldr	r2, [pc, #116]	; (ae8 <boot_swap_type_multi+0x100>)
     a74:	1a9b      	subs	r3, r3, r2
     a76:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     a7a:	f363 108f 	bfi	r0, r3, #6, #10
     a7e:	796b      	ldrb	r3, [r5, #5]
     a80:	2b02      	cmp	r3, #2
     a82:	d007      	beq.n	a94 <boot_swap_type_multi+0xac>
     a84:	2b03      	cmp	r3, #3
     a86:	d010      	beq.n	aaa <boot_swap_type_multi+0xc2>
     a88:	2b04      	cmp	r3, #4
     a8a:	d001      	beq.n	a90 <boot_swap_type_multi+0xa8>
     a8c:	4a17      	ldr	r2, [pc, #92]	; (aec <boot_swap_type_multi+0x104>)
     a8e:	e002      	b.n	a96 <boot_swap_type_multi+0xae>
     a90:	4a17      	ldr	r2, [pc, #92]	; (af0 <boot_swap_type_multi+0x108>)
     a92:	e000      	b.n	a96 <boot_swap_type_multi+0xae>
     a94:	4a17      	ldr	r2, [pc, #92]	; (af4 <boot_swap_type_multi+0x10c>)
     a96:	4918      	ldr	r1, [pc, #96]	; (af8 <boot_swap_type_multi+0x110>)
     a98:	f006 fdbd 	bl	7616 <log_string_sync>
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
     a9c:	7968      	ldrb	r0, [r5, #5]
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
     a9e:	1e83      	subs	r3, r0, #2
     aa0:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
     aa2:	2b02      	cmp	r3, #2
     aa4:	d915      	bls.n	ad2 <boot_swap_type_multi+0xea>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
     aa6:	20ff      	movs	r0, #255	; 0xff
     aa8:	e013      	b.n	ad2 <boot_swap_type_multi+0xea>
            BOOT_LOG_INF("Swap type: %s",
     aaa:	4a14      	ldr	r2, [pc, #80]	; (afc <boot_swap_type_multi+0x114>)
     aac:	e7f3      	b.n	a96 <boot_swap_type_multi+0xae>
            }
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
     aae:	f04f 0000 	mov.w	r0, #0
     ab2:	2303      	movs	r3, #3
     ab4:	f363 0002 	bfi	r0, r3, #0, #3
     ab8:	f36f 00c5 	bfc	r0, #3, #3
     abc:	4b09      	ldr	r3, [pc, #36]	; (ae4 <boot_swap_type_multi+0xfc>)
     abe:	4a0a      	ldr	r2, [pc, #40]	; (ae8 <boot_swap_type_multi+0x100>)
     ac0:	1a9b      	subs	r3, r3, r2
     ac2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     ac6:	f363 108f 	bfi	r0, r3, #6, #10
     aca:	490d      	ldr	r1, [pc, #52]	; (b00 <boot_swap_type_multi+0x118>)
     acc:	f006 fda3 	bl	7616 <log_string_sync>
    return BOOT_SWAP_TYPE_NONE;
     ad0:	2001      	movs	r0, #1
}
     ad2:	b005      	add	sp, #20
     ad4:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
     ad6:	20ff      	movs	r0, #255	; 0xff
     ad8:	e7fb      	b.n	ad2 <boot_swap_type_multi+0xea>
        return BOOT_SWAP_TYPE_PANIC;
     ada:	20ff      	movs	r0, #255	; 0xff
     adc:	e7f9      	b.n	ad2 <boot_swap_type_multi+0xea>
     ade:	bf00      	nop
     ae0:	0000a28c 	.word	0x0000a28c
     ae4:	0000a09c 	.word	0x0000a09c
     ae8:	0000a08c 	.word	0x0000a08c
     aec:	0000a240 	.word	0x0000a240
     af0:	0000a254 	.word	0x0000a254
     af4:	0000a230 	.word	0x0000a230
     af8:	0000a25c 	.word	0x0000a25c
     afc:	0000a238 	.word	0x0000a238
     b00:	0000a26c 	.word	0x0000a26c

00000b04 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
     b04:	6802      	ldr	r2, [r0, #0]
     b06:	4b0e      	ldr	r3, [pc, #56]	; (b40 <boot_is_header_valid+0x3c>)
     b08:	429a      	cmp	r2, r3
     b0a:	d10d      	bne.n	b28 <boot_is_header_valid+0x24>
        return false;
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     b0c:	68c2      	ldr	r2, [r0, #12]
     b0e:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
     b10:	43d8      	mvns	r0, r3
     b12:	4282      	cmp	r2, r0
     b14:	d80c      	bhi.n	b30 <boot_is_header_valid+0x2c>
{
     b16:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
     b18:	18d4      	adds	r4, r2, r3
        return true;
     b1a:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     b1c:	b110      	cbz	r0, b24 <boot_is_header_valid+0x20>
        return false;
    }

    if (size >= fap->fa_size) {
     b1e:	688b      	ldr	r3, [r1, #8]
     b20:	42a3      	cmp	r3, r4
     b22:	d903      	bls.n	b2c <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
     b24:	bc10      	pop	{r4}
     b26:	4770      	bx	lr
        return false;
     b28:	2000      	movs	r0, #0
     b2a:	4770      	bx	lr
        return false;
     b2c:	2000      	movs	r0, #0
     b2e:	e7f9      	b.n	b24 <boot_is_header_valid+0x20>
        return false;
     b30:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     b32:	b110      	cbz	r0, b3a <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
     b34:	688b      	ldr	r3, [r1, #8]
     b36:	42a3      	cmp	r3, r4
     b38:	d900      	bls.n	b3c <boot_is_header_valid+0x38>
}
     b3a:	4770      	bx	lr
        return false;
     b3c:	2000      	movs	r0, #0
     b3e:	4770      	bx	lr
     b40:	96f3b83d 	.word	0x96f3b83d

00000b44 <boot_image_check>:
{
     b44:	b500      	push	{lr}
     b46:	b087      	sub	sp, #28
     b48:	4613      	mov	r3, r2

00000b4a <FIH_LABEL_FIH_CALL_START_817>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     b4a:	2000      	movs	r0, #0
     b4c:	9004      	str	r0, [sp, #16]
     b4e:	9003      	str	r0, [sp, #12]
     b50:	9002      	str	r0, [sp, #8]
     b52:	f44f 7280 	mov.w	r2, #256	; 0x100
     b56:	9201      	str	r2, [sp, #4]
     b58:	4a04      	ldr	r2, [pc, #16]	; (b6c <FIH_LABEL_FIH_CALL_END_844+0x8>)
     b5a:	9200      	str	r2, [sp, #0]
     b5c:	460a      	mov	r2, r1
     b5e:	4601      	mov	r1, r0
     b60:	f7ff fd8a 	bl	678 <bootutil_img_validate>

00000b64 <FIH_LABEL_FIH_CALL_END_844>:
}
     b64:	b007      	add	sp, #28
     b66:	f85d fb04 	ldr.w	pc, [sp], #4
     b6a:	bf00      	nop
     b6c:	20022690 	.word	0x20022690

00000b70 <boot_validate_slot>:
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
     b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b74:	b082      	sub	sp, #8
     b76:	4605      	mov	r5, r0
     b78:	460c      	mov	r4, r1
     b7a:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     b7c:	4b2a      	ldr	r3, [pc, #168]	; (c28 <FIH_LABEL_FIH_CALL_END_1034+0x52>)
     b7e:	681e      	ldr	r6, [r3, #0]
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     b80:	2000      	movs	r0, #0
     b82:	f005 fd01 	bl	6588 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     b86:	a901      	add	r1, sp, #4
     b88:	b2c0      	uxtb	r0, r0
     b8a:	f001 fecd 	bl	2928 <flash_area_open>
    if (rc != 0) {
     b8e:	b118      	cbz	r0, b98 <boot_validate_slot+0x28>

out:
    flash_area_close(fap);

    FIH_RET(fih_rc);
}
     b90:	4630      	mov	r0, r6
     b92:	b002      	add	sp, #8
     b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     b98:	202c      	movs	r0, #44	; 0x2c
     b9a:	fb00 5804 	mla	r8, r0, r4, r5
    if (boot_check_header_erased(state, slot) == 0 ||
     b9e:	4621      	mov	r1, r4
     ba0:	4628      	mov	r0, r5
     ba2:	f006 f83e 	bl	6c22 <boot_check_header_erased>
     ba6:	b120      	cbz	r0, bb2 <boot_validate_slot+0x42>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     ba8:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     bac:	f013 0f10 	tst.w	r3, #16
     bb0:	d00a      	beq.n	bc8 <FIH_LABEL_FIH_CALL_START_1015>
        if (slot != BOOT_PRIMARY_SLOT) {
     bb2:	b924      	cbnz	r4, bbe <boot_validate_slot+0x4e>
        fih_rc = fih_int_encode(1);
     bb4:	2601      	movs	r6, #1
    flash_area_close(fap);
     bb6:	9801      	ldr	r0, [sp, #4]
     bb8:	f006 fe15 	bl	77e6 <flash_area_close>
    FIH_RET(fih_rc);
     bbc:	e7e8      	b.n	b90 <boot_validate_slot+0x20>
            swap_erase_trailer_sectors(state, fap);
     bbe:	9901      	ldr	r1, [sp, #4]
     bc0:	4628      	mov	r0, r5
     bc2:	f006 f91a 	bl	6dfa <swap_erase_trailer_sectors>
     bc6:	e7f5      	b.n	bb4 <boot_validate_slot+0x44>

00000bc8 <FIH_LABEL_FIH_CALL_START_1015>:
    FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     bc8:	463b      	mov	r3, r7
     bca:	9a01      	ldr	r2, [sp, #4]
     bcc:	4641      	mov	r1, r8
     bce:	4628      	mov	r0, r5
     bd0:	f7ff ffb8 	bl	b44 <boot_image_check>
     bd4:	4606      	mov	r6, r0

00000bd6 <FIH_LABEL_FIH_CALL_END_1034>:
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     bd6:	9d01      	ldr	r5, [sp, #4]
     bd8:	4629      	mov	r1, r5
     bda:	4640      	mov	r0, r8
     bdc:	f7ff ff92 	bl	b04 <boot_is_header_valid>
     be0:	b118      	cbz	r0, bea <FIH_LABEL_FIH_CALL_END_1034+0x14>
     be2:	4b12      	ldr	r3, [pc, #72]	; (c2c <FIH_LABEL_FIH_CALL_END_1034+0x56>)
     be4:	681b      	ldr	r3, [r3, #0]
     be6:	42b3      	cmp	r3, r6
     be8:	d0e5      	beq.n	bb6 <boot_validate_slot+0x46>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     bea:	b9a4      	cbnz	r4, c16 <FIH_LABEL_FIH_CALL_END_1034+0x40>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     bec:	f04f 0000 	mov.w	r0, #0
     bf0:	2301      	movs	r3, #1
     bf2:	f363 0002 	bfi	r0, r3, #0, #3
     bf6:	f36f 00c5 	bfc	r0, #3, #3
     bfa:	4b0d      	ldr	r3, [pc, #52]	; (c30 <FIH_LABEL_FIH_CALL_END_1034+0x5a>)
     bfc:	4a0d      	ldr	r2, [pc, #52]	; (c34 <FIH_LABEL_FIH_CALL_END_1034+0x5e>)
     bfe:	1a9b      	subs	r3, r3, r2
     c00:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     c04:	f363 108f 	bfi	r0, r3, #6, #10
     c08:	b95c      	cbnz	r4, c22 <FIH_LABEL_FIH_CALL_END_1034+0x4c>
     c0a:	4a0b      	ldr	r2, [pc, #44]	; (c38 <FIH_LABEL_FIH_CALL_END_1034+0x62>)
     c0c:	490b      	ldr	r1, [pc, #44]	; (c3c <FIH_LABEL_FIH_CALL_END_1034+0x66>)
     c0e:	f006 fd02 	bl	7616 <log_string_sync>
        fih_rc = fih_int_encode(1);
     c12:	2601      	movs	r6, #1
        goto out;
     c14:	e7cf      	b.n	bb6 <boot_validate_slot+0x46>
            flash_area_erase(fap, 0, fap->fa_size);
     c16:	68aa      	ldr	r2, [r5, #8]
     c18:	2100      	movs	r1, #0
     c1a:	4628      	mov	r0, r5
     c1c:	f006 fe33 	bl	7886 <flash_area_erase>
     c20:	e7e4      	b.n	bec <FIH_LABEL_FIH_CALL_END_1034+0x16>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     c22:	4a07      	ldr	r2, [pc, #28]	; (c40 <FIH_LABEL_FIH_CALL_END_1034+0x6a>)
     c24:	e7f2      	b.n	c0c <FIH_LABEL_FIH_CALL_END_1034+0x36>
     c26:	bf00      	nop
     c28:	20020000 	.word	0x20020000
     c2c:	20021a2c 	.word	0x20021a2c
     c30:	0000a09c 	.word	0x0000a09c
     c34:	0000a08c 	.word	0x0000a08c
     c38:	0000a2ac 	.word	0x0000a2ac
     c3c:	0000a2b4 	.word	0x0000a2b4
     c40:	0000a2a0 	.word	0x0000a2a0

00000c44 <boot_validated_swap_type>:
 * @return                      The type of swap to perform (BOOT_SWAP_TYPE...)
 */
static int
boot_validated_swap_type(struct boot_loader_state *state,
                         struct boot_status *bs)
{
     c44:	b570      	push	{r4, r5, r6, lr}
     c46:	4605      	mov	r5, r0
     c48:	460e      	mov	r6, r1
        }
#endif /* PM_S1_ADDRESS */
    }
#endif /* PM_S1_ADDRESS || CONFIG_SOC_NRF5340_CPUAPP */

    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c4a:	2000      	movs	r0, #0
     c4c:	f7ff fecc 	bl	9e8 <boot_swap_type_multi>
     c50:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     c52:	2802      	cmp	r0, #2
     c54:	d005      	beq.n	c62 <FIH_LABEL_FIH_CALL_START_1223>
     c56:	2804      	cmp	r0, #4
     c58:	d003      	beq.n	c62 <FIH_LABEL_FIH_CALL_START_1223>
     c5a:	2803      	cmp	r0, #3
     c5c:	d001      	beq.n	c62 <FIH_LABEL_FIH_CALL_START_1223>
        }
#endif /* CONFIG_SOC_NRF5340_CPUAPP */
    }

    return swap_type;
}
     c5e:	4620      	mov	r0, r4
     c60:	bd70      	pop	{r4, r5, r6, pc}

00000c62 <FIH_LABEL_FIH_CALL_START_1223>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     c62:	4632      	mov	r2, r6
     c64:	2101      	movs	r1, #1
     c66:	4628      	mov	r0, r5
     c68:	f7ff ff82 	bl	b70 <boot_validate_slot>

00000c6c <FIH_LABEL_FIH_CALL_END_1240>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c6c:	4b04      	ldr	r3, [pc, #16]	; (c80 <FIH_LABEL_FIH_CALL_END_1240+0x14>)
     c6e:	681b      	ldr	r3, [r3, #0]
     c70:	4283      	cmp	r3, r0
     c72:	d0f4      	beq.n	c5e <boot_validated_swap_type+0x1a>
            if (fih_eq(fih_rc, fih_int_encode(1))) {
     c74:	2801      	cmp	r0, #1
     c76:	d001      	beq.n	c7c <FIH_LABEL_FIH_CALL_END_1240+0x10>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     c78:	2405      	movs	r4, #5
    return swap_type;
     c7a:	e7f0      	b.n	c5e <boot_validated_swap_type+0x1a>
                swap_type = BOOT_SWAP_TYPE_NONE;
     c7c:	4604      	mov	r4, r0
     c7e:	e7ee      	b.n	c5e <boot_validated_swap_type+0x1a>
     c80:	20021a2c 	.word	0x20021a2c

00000c84 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     c84:	b530      	push	{r4, r5, lr}
     c86:	b083      	sub	sp, #12
     c88:	4605      	mov	r5, r0
     c8a:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     c8c:	2300      	movs	r3, #0
     c8e:	9300      	str	r3, [sp, #0]
     c90:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     c92:	4608      	mov	r0, r1
     c94:	f006 f848 	bl	6d28 <boot_status_is_reset>
     c98:	b330      	cbz	r0, ce8 <boot_swap_image+0x64>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     c9a:	682a      	ldr	r2, [r5, #0]
     c9c:	4b1f      	ldr	r3, [pc, #124]	; (d1c <boot_swap_image+0x98>)
     c9e:	429a      	cmp	r2, r3
     ca0:	d016      	beq.n	cd0 <boot_swap_image+0x4c>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     ca2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     ca4:	4b1d      	ldr	r3, [pc, #116]	; (d1c <boot_swap_image+0x98>)
     ca6:	429a      	cmp	r2, r3
     ca8:	d018      	beq.n	cdc <boot_swap_image+0x58>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	9a00      	ldr	r2, [sp, #0]
     cae:	4293      	cmp	r3, r2
     cb0:	d900      	bls.n	cb4 <boot_swap_image+0x30>
            copy_size = size;
     cb2:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
     cb4:	9b00      	ldr	r3, [sp, #0]
     cb6:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     cb8:	9a00      	ldr	r2, [sp, #0]
     cba:	4621      	mov	r1, r4
     cbc:	4628      	mov	r0, r5
     cbe:	f000 fd15 	bl	16ec <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     cc2:	4b17      	ldr	r3, [pc, #92]	; (d20 <boot_swap_image+0x9c>)
     cc4:	681a      	ldr	r2, [r3, #0]
     cc6:	2a00      	cmp	r2, #0
     cc8:	dc16      	bgt.n	cf8 <boot_swap_image+0x74>
                     boot_status_fails);
    }
#endif

    return 0;
}
     cca:	2000      	movs	r0, #0
     ccc:	b003      	add	sp, #12
     cce:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     cd0:	466a      	mov	r2, sp
     cd2:	2100      	movs	r1, #0
     cd4:	4628      	mov	r0, r5
     cd6:	f005 ff4d 	bl	6b74 <boot_read_image_size>
     cda:	e7e2      	b.n	ca2 <boot_swap_image+0x1e>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     cdc:	aa01      	add	r2, sp, #4
     cde:	2101      	movs	r1, #1
     ce0:	4628      	mov	r0, r5
     ce2:	f005 ff47 	bl	6b74 <boot_read_image_size>
     ce6:	e7e0      	b.n	caa <boot_swap_image+0x26>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     ce8:	f104 0108 	add.w	r1, r4, #8
     cec:	2000      	movs	r0, #0
     cee:	f005 fef1 	bl	6ad4 <boot_read_swap_size>
        copy_size = bs->swap_size;
     cf2:	68a3      	ldr	r3, [r4, #8]
     cf4:	9300      	str	r3, [sp, #0]
     cf6:	e7df      	b.n	cb8 <boot_swap_image+0x34>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     cf8:	f04f 0000 	mov.w	r0, #0
     cfc:	2302      	movs	r3, #2
     cfe:	f363 0002 	bfi	r0, r3, #0, #3
     d02:	f36f 00c5 	bfc	r0, #3, #3
     d06:	4b07      	ldr	r3, [pc, #28]	; (d24 <boot_swap_image+0xa0>)
     d08:	4907      	ldr	r1, [pc, #28]	; (d28 <boot_swap_image+0xa4>)
     d0a:	1a5b      	subs	r3, r3, r1
     d0c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     d10:	f363 108f 	bfi	r0, r3, #6, #10
     d14:	4905      	ldr	r1, [pc, #20]	; (d2c <boot_swap_image+0xa8>)
     d16:	f006 fc7e 	bl	7616 <log_string_sync>
     d1a:	e7d6      	b.n	cca <boot_swap_image+0x46>
     d1c:	96f3b83d 	.word	0x96f3b83d
     d20:	20022790 	.word	0x20022790
     d24:	0000a09c 	.word	0x0000a09c
     d28:	0000a08c 	.word	0x0000a08c
     d2c:	0000a2d8 	.word	0x0000a2d8

00000d30 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
     d30:	b538      	push	{r3, r4, r5, lr}
     d32:	4604      	mov	r4, r0
     d34:	460d      	mov	r5, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
     d36:	f7ff ffa5 	bl	c84 <boot_swap_image>
     d3a:	4602      	mov	r2, r0
    assert(rc == 0);

    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d3c:	79eb      	ldrb	r3, [r5, #7]
     d3e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     d42:	3b03      	subs	r3, #3
     d44:	b2db      	uxtb	r3, r3
     d46:	2b01      	cmp	r3, #1
     d48:	d90c      	bls.n	d64 <boot_complete_partial_swap+0x34>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     d4a:	79eb      	ldrb	r3, [r5, #7]
     d4c:	2b02      	cmp	r3, #2
     d4e:	d013      	beq.n	d78 <boot_complete_partial_swap+0x48>
     d50:	2b04      	cmp	r3, #4
     d52:	d011      	beq.n	d78 <boot_complete_partial_swap+0x48>
     d54:	2b03      	cmp	r3, #3
     d56:	d00f      	beq.n	d78 <boot_complete_partial_swap+0x48>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d58:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d5c:	2bff      	cmp	r3, #255	; 0xff
     d5e:	d015      	beq.n	d8c <boot_complete_partial_swap+0x5c>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
     d60:	4610      	mov	r0, r2
     d62:	bd38      	pop	{r3, r4, r5, pc}
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d64:	2000      	movs	r0, #0
     d66:	f006 f8f3 	bl	6f50 <swap_set_image_ok>
        if (rc != 0) {
     d6a:	4602      	mov	r2, r0
     d6c:	2800      	cmp	r0, #0
     d6e:	d0ec      	beq.n	d4a <boot_complete_partial_swap+0x1a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d70:	23ff      	movs	r3, #255	; 0xff
     d72:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d76:	e7e8      	b.n	d4a <boot_complete_partial_swap+0x1a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d78:	2000      	movs	r0, #0
     d7a:	f006 f8d6 	bl	6f2a <swap_set_copy_done>
        if (rc != 0) {
     d7e:	4602      	mov	r2, r0
     d80:	2800      	cmp	r0, #0
     d82:	d0e9      	beq.n	d58 <boot_complete_partial_swap+0x28>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d84:	23ff      	movs	r3, #255	; 0xff
     d86:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d8a:	e7e5      	b.n	d58 <boot_complete_partial_swap+0x28>
        BOOT_LOG_ERR("panic!");
     d8c:	f04f 0000 	mov.w	r0, #0
     d90:	2301      	movs	r3, #1
     d92:	f363 0002 	bfi	r0, r3, #0, #3
     d96:	f36f 00c5 	bfc	r0, #3, #3
     d9a:	4b05      	ldr	r3, [pc, #20]	; (db0 <boot_complete_partial_swap+0x80>)
     d9c:	4a05      	ldr	r2, [pc, #20]	; (db4 <boot_complete_partial_swap+0x84>)
     d9e:	1a9b      	subs	r3, r3, r2
     da0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     da4:	f363 108f 	bfi	r0, r3, #6, #10
     da8:	4903      	ldr	r1, [pc, #12]	; (db8 <boot_complete_partial_swap+0x88>)
     daa:	f006 fc34 	bl	7616 <log_string_sync>
        while (1) {}
     dae:	e7fe      	b.n	dae <boot_complete_partial_swap+0x7e>
     db0:	0000a09c 	.word	0x0000a09c
     db4:	0000a08c 	.word	0x0000a08c
     db8:	0000a304 	.word	0x0000a304

00000dbc <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
     dbc:	b538      	push	{r3, r4, r5, lr}
     dbe:	4604      	mov	r4, r0
     dc0:	460d      	mov	r5, r1
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
     dc2:	f005 ff76 	bl	6cb2 <boot_read_sectors>
    if (rc != 0) {
     dc6:	b968      	cbnz	r0, de4 <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
        return;
    }

    /* Attempt to read an image header from each slot. */
    rc = boot_read_image_headers(state, false, NULL);
     dc8:	2200      	movs	r2, #0
     dca:	4611      	mov	r1, r2
     dcc:	4620      	mov	r0, r4
     dce:	f005 ff86 	bl	6cde <boot_read_image_headers>
    if (rc != 0) {
     dd2:	b9e8      	cbnz	r0, e10 <boot_prepare_image_for_update+0x54>
    }

    /* If the current image's slots aren't compatible, no swap is possible.
     * Just boot into primary slot.
     */
    if (boot_slots_compatible(state)) {
     dd4:	4620      	mov	r0, r4
     dd6:	f000 fb11 	bl	13fc <boot_slots_compatible>
     dda:	bb78      	cbnz	r0, e3c <boot_prepare_image_for_update+0x80>
            }
#endif
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     ddc:	2301      	movs	r3, #1
     dde:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     de2:	e014      	b.n	e0e <boot_prepare_image_for_update+0x52>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     de4:	f04f 0000 	mov.w	r0, #0
     de8:	2302      	movs	r3, #2
     dea:	f363 0002 	bfi	r0, r3, #0, #3
     dee:	f36f 00c5 	bfc	r0, #3, #3
     df2:	4b48      	ldr	r3, [pc, #288]	; (f14 <FIH_LABEL_FIH_CALL_END_2292+0x98>)
     df4:	4a48      	ldr	r2, [pc, #288]	; (f18 <FIH_LABEL_FIH_CALL_END_2292+0x9c>)
     df6:	1a9b      	subs	r3, r3, r2
     df8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     dfc:	f363 108f 	bfi	r0, r3, #6, #10
     e00:	2280      	movs	r2, #128	; 0x80
     e02:	4946      	ldr	r1, [pc, #280]	; (f1c <FIH_LABEL_FIH_CALL_END_2292+0xa0>)
     e04:	f006 fc07 	bl	7616 <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     e08:	2301      	movs	r3, #1
     e0a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    }
}
     e0e:	bd38      	pop	{r3, r4, r5, pc}
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     e10:	f04f 0000 	mov.w	r0, #0
     e14:	2302      	movs	r3, #2
     e16:	f363 0002 	bfi	r0, r3, #0, #3
     e1a:	f36f 00c5 	bfc	r0, #3, #3
     e1e:	4b3d      	ldr	r3, [pc, #244]	; (f14 <FIH_LABEL_FIH_CALL_END_2292+0x98>)
     e20:	4a3d      	ldr	r2, [pc, #244]	; (f18 <FIH_LABEL_FIH_CALL_END_2292+0x9c>)
     e22:	1a9b      	subs	r3, r3, r2
     e24:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     e28:	f363 108f 	bfi	r0, r3, #6, #10
     e2c:	2200      	movs	r2, #0
     e2e:	493c      	ldr	r1, [pc, #240]	; (f20 <FIH_LABEL_FIH_CALL_END_2292+0xa4>)
     e30:	f006 fbf1 	bl	7616 <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     e34:	2301      	movs	r3, #1
     e36:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return;
     e3a:	e7e8      	b.n	e0e <boot_prepare_image_for_update+0x52>
        boot_status_reset(bs);
     e3c:	4628      	mov	r0, r5
     e3e:	f005 ff69 	bl	6d14 <boot_status_reset>
        rc = swap_read_status(state, bs);
     e42:	4629      	mov	r1, r5
     e44:	4620      	mov	r0, r4
     e46:	f006 f832 	bl	6eae <swap_read_status>
        if (rc != 0) {
     e4a:	b9f8      	cbnz	r0, e8c <FIH_LABEL_FIH_CALL_END_2292+0x10>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     e4c:	4628      	mov	r0, r5
     e4e:	f005 ff6b 	bl	6d28 <boot_status_is_reset>
     e52:	f080 0101 	eor.w	r1, r0, #1
     e56:	462a      	mov	r2, r5
     e58:	b2c9      	uxtb	r1, r1
     e5a:	4620      	mov	r0, r4
     e5c:	f005 ff3f 	bl	6cde <boot_read_image_headers>
        if (rc != 0) {
     e60:	bb50      	cbnz	r0, eb8 <FIH_LABEL_FIH_CALL_END_2292+0x3c>
        if (!boot_status_is_reset(bs)) {
     e62:	4628      	mov	r0, r5
     e64:	f005 ff60 	bl	6d28 <boot_status_is_reset>
     e68:	2800      	cmp	r0, #0
     e6a:	d03b      	beq.n	ee4 <FIH_LABEL_FIH_CALL_END_2292+0x68>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     e6c:	79eb      	ldrb	r3, [r5, #7]
     e6e:	2b01      	cmp	r3, #1
     e70:	d045      	beq.n	efe <FIH_LABEL_FIH_CALL_END_2292+0x82>

00000e72 <FIH_LABEL_FIH_CALL_START_2276>:
                FIH_CALL(boot_validate_slot, fih_rc,
     e72:	462a      	mov	r2, r5
     e74:	2101      	movs	r1, #1
     e76:	4620      	mov	r0, r4
     e78:	f7ff fe7a 	bl	b70 <boot_validate_slot>

00000e7c <FIH_LABEL_FIH_CALL_END_2292>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     e7c:	4b29      	ldr	r3, [pc, #164]	; (f24 <FIH_LABEL_FIH_CALL_END_2292+0xa8>)
     e7e:	681b      	ldr	r3, [r3, #0]
     e80:	4283      	cmp	r3, r0
     e82:	d043      	beq.n	f0c <FIH_LABEL_FIH_CALL_END_2292+0x90>
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     e84:	2305      	movs	r3, #5
     e86:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     e8a:	e7c0      	b.n	e0e <boot_prepare_image_for_update+0x52>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     e8c:	f04f 0000 	mov.w	r0, #0
     e90:	2302      	movs	r3, #2
     e92:	f363 0002 	bfi	r0, r3, #0, #3
     e96:	f36f 00c5 	bfc	r0, #3, #3
     e9a:	4b1e      	ldr	r3, [pc, #120]	; (f14 <FIH_LABEL_FIH_CALL_END_2292+0x98>)
     e9c:	4a1e      	ldr	r2, [pc, #120]	; (f18 <FIH_LABEL_FIH_CALL_END_2292+0x9c>)
     e9e:	1a9b      	subs	r3, r3, r2
     ea0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     ea4:	f363 108f 	bfi	r0, r3, #6, #10
     ea8:	2200      	movs	r2, #0
     eaa:	491f      	ldr	r1, [pc, #124]	; (f28 <FIH_LABEL_FIH_CALL_END_2292+0xac>)
     eac:	f006 fbb3 	bl	7616 <log_string_sync>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     eb0:	2301      	movs	r3, #1
     eb2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            return;
     eb6:	e7aa      	b.n	e0e <boot_prepare_image_for_update+0x52>
            BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     eb8:	f04f 0000 	mov.w	r0, #0
     ebc:	2302      	movs	r3, #2
     ebe:	f363 0002 	bfi	r0, r3, #0, #3
     ec2:	f36f 00c5 	bfc	r0, #3, #3
     ec6:	4b13      	ldr	r3, [pc, #76]	; (f14 <FIH_LABEL_FIH_CALL_END_2292+0x98>)
     ec8:	4a13      	ldr	r2, [pc, #76]	; (f18 <FIH_LABEL_FIH_CALL_END_2292+0x9c>)
     eca:	1a9b      	subs	r3, r3, r2
     ecc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     ed0:	f363 108f 	bfi	r0, r3, #6, #10
     ed4:	2200      	movs	r2, #0
     ed6:	4912      	ldr	r1, [pc, #72]	; (f20 <FIH_LABEL_FIH_CALL_END_2292+0xa4>)
     ed8:	f006 fb9d 	bl	7616 <log_string_sync>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     edc:	2301      	movs	r3, #1
     ede:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            return;
     ee2:	e794      	b.n	e0e <boot_prepare_image_for_update+0x52>
            rc = boot_complete_partial_swap(state, bs);
     ee4:	4629      	mov	r1, r5
     ee6:	4620      	mov	r0, r4
     ee8:	f7ff ff22 	bl	d30 <boot_complete_partial_swap>
            rc = boot_read_image_headers(state, false, bs);
     eec:	462a      	mov	r2, r5
     eee:	2100      	movs	r1, #0
     ef0:	4620      	mov	r0, r4
     ef2:	f005 fef4 	bl	6cde <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     ef6:	2301      	movs	r3, #1
     ef8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     efc:	e787      	b.n	e0e <boot_prepare_image_for_update+0x52>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     efe:	4629      	mov	r1, r5
     f00:	4620      	mov	r0, r4
     f02:	f7ff fe9f 	bl	c44 <boot_validated_swap_type>
     f06:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
     f0a:	e780      	b.n	e0e <boot_prepare_image_for_update+0x52>
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     f0c:	79eb      	ldrb	r3, [r5, #7]
     f0e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     f12:	e77c      	b.n	e0e <boot_prepare_image_for_update+0x52>
     f14:	0000a09c 	.word	0x0000a09c
     f18:	0000a08c 	.word	0x0000a08c
     f1c:	0000a30c 	.word	0x0000a30c
     f20:	0000a34c 	.word	0x0000a34c
     f24:	20021a2c 	.word	0x20021a2c
     f28:	0000a374 	.word	0x0000a374

00000f2c <boot_copy_region>:
{
     f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f30:	460f      	mov	r7, r1
     f32:	4690      	mov	r8, r2
     f34:	461e      	mov	r6, r3
     f36:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     f3a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    bytes_copied = 0;
     f3c:	2400      	movs	r4, #0
    while (bytes_copied < sz) {
     f3e:	e009      	b.n	f54 <boot_copy_region+0x28>
     f40:	f500 72c0 	add.w	r2, r0, #384	; 0x180
     f44:	4b14      	ldr	r3, [pc, #80]	; (f98 <boot_copy_region+0x6c>)
     f46:	4915      	ldr	r1, [pc, #84]	; (f9c <boot_copy_region+0x70>)
     f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        MCUBOOT_WATCHDOG_FEED();
     f4c:	3001      	adds	r0, #1
     f4e:	b2c0      	uxtb	r0, r0
     f50:	2807      	cmp	r0, #7
     f52:	d9f5      	bls.n	f40 <boot_copy_region+0x14>
    while (bytes_copied < sz) {
     f54:	42ac      	cmp	r4, r5
     f56:	d217      	bcs.n	f88 <boot_copy_region+0x5c>
        if (sz - bytes_copied > sizeof buf) {
     f58:	eba5 0a04 	sub.w	sl, r5, r4
     f5c:	f5ba 6f80 	cmp.w	sl, #1024	; 0x400
     f60:	d901      	bls.n	f66 <boot_copy_region+0x3a>
            chunk_sz = sizeof buf;
     f62:	f44f 6a80 	mov.w	sl, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     f66:	4653      	mov	r3, sl
     f68:	4a0d      	ldr	r2, [pc, #52]	; (fa0 <boot_copy_region+0x74>)
     f6a:	19a1      	adds	r1, r4, r6
     f6c:	4638      	mov	r0, r7
     f6e:	f006 fc3b 	bl	77e8 <flash_area_read>
        if (rc != 0) {
     f72:	b960      	cbnz	r0, f8e <boot_copy_region+0x62>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     f74:	4653      	mov	r3, sl
     f76:	4a0a      	ldr	r2, [pc, #40]	; (fa0 <boot_copy_region+0x74>)
     f78:	eb04 0109 	add.w	r1, r4, r9
     f7c:	4640      	mov	r0, r8
     f7e:	f006 fc52 	bl	7826 <flash_area_write>
        if (rc != 0) {
     f82:	b930      	cbnz	r0, f92 <boot_copy_region+0x66>
        bytes_copied += chunk_sz;
     f84:	4454      	add	r4, sl
        MCUBOOT_WATCHDOG_FEED();
     f86:	e7e3      	b.n	f50 <boot_copy_region+0x24>
    return 0;
     f88:	2000      	movs	r0, #0
}
     f8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
     f8e:	2001      	movs	r0, #1
     f90:	e7fb      	b.n	f8a <boot_copy_region+0x5e>
            return BOOT_EFLASH;
     f92:	2001      	movs	r0, #1
     f94:	e7f9      	b.n	f8a <boot_copy_region+0x5e>
     f96:	bf00      	nop
     f98:	50018000 	.word	0x50018000
     f9c:	6e524635 	.word	0x6e524635
     fa0:	20021a90 	.word	0x20021a90

00000fa4 <context_boot_go>:

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     fa8:	b084      	sub	sp, #16
     faa:	4604      	mov	r4, r0
     fac:	460f      	mov	r7, r1
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
     fae:	4b48      	ldr	r3, [pc, #288]	; (10d0 <FIH_LABEL_FIH_CALL_END_3000+0x9e>)
     fb0:	681e      	ldr	r6, [r3, #0]
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
     fb2:	2260      	movs	r2, #96	; 0x60
     fb4:	2100      	movs	r1, #0
     fb6:	f006 fef9 	bl	7dac <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     fba:	4b46      	ldr	r3, [pc, #280]	; (10d4 <FIH_LABEL_FIH_CALL_END_3000+0xa2>)
     fbc:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     fbe:	4b46      	ldr	r3, [pc, #280]	; (10d8 <FIH_LABEL_FIH_CALL_END_3000+0xa6>)
     fc0:	6523      	str	r3, [r4, #80]	; 0x50
    int rc = -1;
     fc2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     fc6:	f04f 0800 	mov.w	r8, #0
     fca:	e00e      	b.n	fea <context_boot_go+0x46>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     fcc:	4641      	mov	r1, r8
     fce:	2000      	movs	r0, #0
     fd0:	f005 fada 	bl	6588 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     fd4:	212c      	movs	r1, #44	; 0x2c
     fd6:	fb01 f108 	mul.w	r1, r1, r8
     fda:	3120      	adds	r1, #32
     fdc:	4421      	add	r1, r4
     fde:	b2c0      	uxtb	r0, r0
     fe0:	f001 fca2 	bl	2928 <flash_area_open>
     fe4:	4605      	mov	r5, r0
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     fe6:	f108 0801 	add.w	r8, r8, #1
     fea:	f1b8 0f01 	cmp.w	r8, #1
     fee:	d9ed      	bls.n	fcc <context_boot_go+0x28>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
     ff0:	4669      	mov	r1, sp
     ff2:	4620      	mov	r0, r4
     ff4:	f7ff fee2 	bl	dbc <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     ff8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     ffc:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    1000:	2b04      	cmp	r3, #4
    1002:	d81c      	bhi.n	103e <FIH_LABEL_FIH_CALL_END_3000+0xc>
    1004:	2b02      	cmp	r3, #2
    1006:	d226      	bcs.n	1056 <FIH_LABEL_FIH_CALL_END_3000+0x24>
    1008:	2b01      	cmp	r3, #1
    100a:	d12a      	bne.n	1062 <FIH_LABEL_FIH_CALL_END_3000+0x30>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    100c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    1010:	2bff      	cmp	r3, #255	; 0xff
    1012:	d02a      	beq.n	106a <FIH_LABEL_FIH_CALL_END_3000+0x38>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    1014:	2b01      	cmp	r3, #1
    1016:	d006      	beq.n	1026 <FIH_LABEL_FIH_CALL_START_2983>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
    1018:	466a      	mov	r2, sp
    101a:	2100      	movs	r1, #0
    101c:	4620      	mov	r0, r4
    101e:	f005 fe5e 	bl	6cde <boot_read_image_headers>
            if (rc != 0) {
    1022:	4605      	mov	r5, r0
    1024:	b948      	cbnz	r0, 103a <FIH_LABEL_FIH_CALL_END_3000+0x8>

00001026 <FIH_LABEL_FIH_CALL_START_2983>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
    1026:	2200      	movs	r2, #0
    1028:	4611      	mov	r1, r2
    102a:	4620      	mov	r0, r4
    102c:	f7ff fda0 	bl	b70 <boot_validate_slot>
    1030:	4606      	mov	r6, r0

00001032 <FIH_LABEL_FIH_CALL_END_3000>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    1032:	4b2a      	ldr	r3, [pc, #168]	; (10dc <FIH_LABEL_FIH_CALL_END_3000+0xaa>)
    1034:	681b      	ldr	r3, [r3, #0]
    1036:	4283      	cmp	r3, r0
    1038:	d029      	beq.n	108e <FIH_LABEL_FIH_CALL_END_3000+0x5c>
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    103a:	2700      	movs	r7, #0
    103c:	e03f      	b.n	10be <FIH_LABEL_FIH_CALL_END_3000+0x8c>
        switch (BOOT_SWAP_TYPE(state)) {
    103e:	2b05      	cmp	r3, #5
    1040:	d10f      	bne.n	1062 <FIH_LABEL_FIH_CALL_END_3000+0x30>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    1042:	2000      	movs	r0, #0
    1044:	f005 ff84 	bl	6f50 <swap_set_image_ok>
            if (rc != 0) {
    1048:	4605      	mov	r5, r0
    104a:	2800      	cmp	r0, #0
    104c:	d0de      	beq.n	100c <context_boot_go+0x68>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    104e:	23ff      	movs	r3, #255	; 0xff
    1050:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    1054:	e7da      	b.n	100c <context_boot_go+0x68>
            rc = boot_perform_update(state, &bs);
    1056:	4669      	mov	r1, sp
    1058:	4620      	mov	r0, r4
    105a:	f005 fe76 	bl	6d4a <boot_perform_update>
    105e:	4605      	mov	r5, r0
            break;
    1060:	e7d4      	b.n	100c <context_boot_go+0x68>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    1062:	23ff      	movs	r3, #255	; 0xff
    1064:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    1068:	e7d0      	b.n	100c <context_boot_go+0x68>
            BOOT_LOG_ERR("panic!");
    106a:	f04f 0000 	mov.w	r0, #0
    106e:	2301      	movs	r3, #1
    1070:	f363 0002 	bfi	r0, r3, #0, #3
    1074:	f36f 00c5 	bfc	r0, #3, #3
    1078:	4b19      	ldr	r3, [pc, #100]	; (10e0 <FIH_LABEL_FIH_CALL_END_3000+0xae>)
    107a:	4a1a      	ldr	r2, [pc, #104]	; (10e4 <FIH_LABEL_FIH_CALL_END_3000+0xb2>)
    107c:	1a9b      	subs	r3, r3, r2
    107e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1082:	f363 108f 	bfi	r0, r3, #6, #10
    1086:	4918      	ldr	r1, [pc, #96]	; (10e8 <FIH_LABEL_FIH_CALL_END_3000+0xb6>)
    1088:	f006 fac5 	bl	7616 <log_string_sync>
            FIH_PANIC;
    108c:	e7fe      	b.n	108c <FIH_LABEL_FIH_CALL_END_3000+0x5a>
    memset(&bs, 0, sizeof(struct boot_status));
    108e:	2210      	movs	r2, #16
    1090:	2100      	movs	r1, #0
    1092:	4668      	mov	r0, sp
    1094:	f006 fe8a 	bl	7dac <memset>
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    1098:	6a23      	ldr	r3, [r4, #32]
    109a:	785b      	ldrb	r3, [r3, #1]
    109c:	713b      	strb	r3, [r7, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
    109e:	6a23      	ldr	r3, [r4, #32]
    10a0:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    10a2:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    10a4:	603c      	str	r4, [r7, #0]
    fih_rc = FIH_SUCCESS;
    10a6:	4b0d      	ldr	r3, [pc, #52]	; (10dc <FIH_LABEL_FIH_CALL_END_3000+0xaa>)
    10a8:	681e      	ldr	r6, [r3, #0]
    10aa:	e7c6      	b.n	103a <FIH_LABEL_FIH_CALL_END_3000+0x8>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    10ac:	f1c7 0301 	rsb	r3, r7, #1
    10b0:	222c      	movs	r2, #44	; 0x2c
    10b2:	fb02 4303 	mla	r3, r2, r3, r4
    10b6:	6a18      	ldr	r0, [r3, #32]
    10b8:	f006 fb95 	bl	77e6 <flash_area_close>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    10bc:	3701      	adds	r7, #1
    10be:	2f01      	cmp	r7, #1
    10c0:	d9f4      	bls.n	10ac <FIH_LABEL_FIH_CALL_END_3000+0x7a>
        }
    }

    if (rc) {
    10c2:	b905      	cbnz	r5, 10c6 <FIH_LABEL_FIH_CALL_END_3000+0x94>
    10c4:	4635      	mov	r5, r6
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
    10c6:	4628      	mov	r0, r5
    10c8:	b004      	add	sp, #16
    10ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10ce:	bf00      	nop
    10d0:	20020000 	.word	0x20020000
    10d4:	20021e90 	.word	0x20021e90
    10d8:	20022290 	.word	0x20022290
    10dc:	20021a2c 	.word	0x20021a2c
    10e0:	0000a09c 	.word	0x0000a09c
    10e4:	0000a08c 	.word	0x0000a08c
    10e8:	0000a304 	.word	0x0000a304

000010ec <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
    10ec:	b508      	push	{r3, lr}
    10ee:	4601      	mov	r1, r0

000010f0 <FIH_LABEL_FIH_CALL_START_3549>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
    10f0:	4801      	ldr	r0, [pc, #4]	; (10f8 <FIH_LABEL_FIH_CALL_END_3566+0x2>)
    10f2:	f7ff ff57 	bl	fa4 <context_boot_go>

000010f6 <FIH_LABEL_FIH_CALL_END_3566>:
    FIH_RET(fih_rc);
}
    10f6:	bd08      	pop	{r3, pc}
    10f8:	20021a30 	.word	0x20021a30

000010fc <boot_move_sector_up>:
 */
static void
boot_move_sector_up(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs, const struct flash_area *fap_pri,
        const struct flash_area *fap_sec)
{
    10fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1100:	b083      	sub	sp, #12
    1102:	460f      	mov	r7, r1
    1104:	4615      	mov	r5, r2
    1106:	461c      	mov	r4, r3
    1108:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    110c:	6a53      	ldr	r3, [r2, #36]	; 0x24
    110e:	f853 6030 	ldr.w	r6, [r3, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    1112:	681a      	ldr	r2, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1114:	1ab6      	subs	r6, r6, r2
     * would be enough
     */

    /* Calculate offset from start of image area. */
    new_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);
    old_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx - 1);
    1116:	3801      	subs	r0, #1
    1118:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    111c:	eba3 0902 	sub.w	r9, r3, r2

    if (bs->idx == BOOT_STATUS_IDX_0) {
    1120:	6823      	ldr	r3, [r4, #0]
    1122:	2b01      	cmp	r3, #1
    1124:	d01b      	beq.n	115e <boot_move_sector_up+0x62>

        rc = swap_erase_trailer_sectors(state, fap_sec);
        assert(rc == 0);
    }

    rc = boot_erase_region(fap_pri, new_off, sz);
    1126:	463a      	mov	r2, r7
    1128:	4631      	mov	r1, r6
    112a:	4640      	mov	r0, r8
    112c:	f005 fe61 	bl	6df2 <boot_erase_region>
    assert(rc == 0);

    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    1130:	9701      	str	r7, [sp, #4]
    1132:	9600      	str	r6, [sp, #0]
    1134:	464b      	mov	r3, r9
    1136:	4642      	mov	r2, r8
    1138:	4641      	mov	r1, r8
    113a:	4628      	mov	r0, r5
    113c:	f7ff fef6 	bl	f2c <boot_copy_region>
    assert(rc == 0);

    rc = boot_write_status(state, bs);
    1140:	4621      	mov	r1, r4
    1142:	4628      	mov	r0, r5
    1144:	f005 fe22 	bl	6d8c <boot_write_status>

    bs->idx++;
    1148:	6823      	ldr	r3, [r4, #0]
    114a:	3301      	adds	r3, #1
    114c:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    114e:	b118      	cbz	r0, 1158 <boot_move_sector_up+0x5c>
    1150:	4a0c      	ldr	r2, [pc, #48]	; (1184 <boot_move_sector_up+0x88>)
    1152:	6813      	ldr	r3, [r2, #0]
    1154:	3301      	adds	r3, #1
    1156:	6013      	str	r3, [r2, #0]
}
    1158:	b003      	add	sp, #12
    115a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    115e:	68e3      	ldr	r3, [r4, #12]
    1160:	2b02      	cmp	r3, #2
    1162:	d104      	bne.n	116e <boot_move_sector_up+0x72>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1164:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1166:	4628      	mov	r0, r5
    1168:	f005 fe47 	bl	6dfa <swap_erase_trailer_sectors>
    116c:	e7db      	b.n	1126 <boot_move_sector_up+0x2a>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    116e:	4641      	mov	r1, r8
    1170:	4628      	mov	r0, r5
    1172:	f005 fe42 	bl	6dfa <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    1176:	4622      	mov	r2, r4
    1178:	4641      	mov	r1, r8
    117a:	4628      	mov	r0, r5
    117c:	f005 fe75 	bl	6e6a <swap_status_init>
    1180:	e7f0      	b.n	1164 <boot_move_sector_up+0x68>
    1182:	bf00      	nop
    1184:	20022790 	.word	0x20022790

00001188 <boot_swap_sectors>:

static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs, const struct flash_area *fap_pri,
        const struct flash_area *fap_sec)
{
    1188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    118c:	b083      	sub	sp, #12
    118e:	460e      	mov	r6, r1
    1190:	4615      	mov	r5, r2
    1192:	461c      	mov	r4, r3
    1194:	6a52      	ldr	r2, [r2, #36]	; 0x24
    1196:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    119a:	6813      	ldr	r3, [r2, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    119c:	eba1 0803 	sub.w	r8, r1, r3
    uint32_t pri_up_off;
    uint32_t sec_off;
    int rc;

    pri_up_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);
    pri_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx - 1);
    11a0:	3801      	subs	r0, #1
    11a2:	f852 7030 	ldr.w	r7, [r2, r0, lsl #3]
    11a6:	1aff      	subs	r7, r7, r3
    11a8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    11aa:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    11ae:	6813      	ldr	r3, [r2, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    11b0:	eba1 0903 	sub.w	r9, r1, r3
    sec_off = boot_img_sector_off(state, BOOT_SECONDARY_SLOT, idx - 1);

    if (bs->state == BOOT_STATUS_STATE_0) {
    11b4:	7923      	ldrb	r3, [r4, #4]
    11b6:	2b01      	cmp	r3, #1
    11b8:	d005      	beq.n	11c6 <boot_swap_sectors+0x3e>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    11ba:	7923      	ldrb	r3, [r4, #4]
    11bc:	2b02      	cmp	r3, #2
    11be:	d01c      	beq.n	11fa <boot_swap_sectors+0x72>
        rc = boot_write_status(state, bs);
        bs->idx++;
        bs->state = BOOT_STATUS_STATE_0;
        BOOT_STATUS_ASSERT(rc == 0);
    }
}
    11c0:	b003      	add	sp, #12
    11c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = boot_erase_region(fap_pri, pri_off, sz);
    11c6:	4632      	mov	r2, r6
    11c8:	4639      	mov	r1, r7
    11ca:	980a      	ldr	r0, [sp, #40]	; 0x28
    11cc:	f005 fe11 	bl	6df2 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    11d0:	9601      	str	r6, [sp, #4]
    11d2:	9700      	str	r7, [sp, #0]
    11d4:	464b      	mov	r3, r9
    11d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    11d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    11da:	4628      	mov	r0, r5
    11dc:	f7ff fea6 	bl	f2c <boot_copy_region>
        rc = boot_write_status(state, bs);
    11e0:	4621      	mov	r1, r4
    11e2:	4628      	mov	r0, r5
    11e4:	f005 fdd2 	bl	6d8c <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    11e8:	2302      	movs	r3, #2
    11ea:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    11ec:	2800      	cmp	r0, #0
    11ee:	d0e4      	beq.n	11ba <boot_swap_sectors+0x32>
    11f0:	4a11      	ldr	r2, [pc, #68]	; (1238 <boot_swap_sectors+0xb0>)
    11f2:	6813      	ldr	r3, [r2, #0]
    11f4:	3301      	adds	r3, #1
    11f6:	6013      	str	r3, [r2, #0]
    11f8:	e7df      	b.n	11ba <boot_swap_sectors+0x32>
        rc = boot_erase_region(fap_sec, sec_off, sz);
    11fa:	4632      	mov	r2, r6
    11fc:	4649      	mov	r1, r9
    11fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1200:	f005 fdf7 	bl	6df2 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1204:	9601      	str	r6, [sp, #4]
    1206:	f8cd 9000 	str.w	r9, [sp]
    120a:	4643      	mov	r3, r8
    120c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    120e:	990a      	ldr	r1, [sp, #40]	; 0x28
    1210:	4628      	mov	r0, r5
    1212:	f7ff fe8b 	bl	f2c <boot_copy_region>
        rc = boot_write_status(state, bs);
    1216:	4621      	mov	r1, r4
    1218:	4628      	mov	r0, r5
    121a:	f005 fdb7 	bl	6d8c <boot_write_status>
        bs->idx++;
    121e:	6823      	ldr	r3, [r4, #0]
    1220:	3301      	adds	r3, #1
    1222:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1224:	2301      	movs	r3, #1
    1226:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1228:	2800      	cmp	r0, #0
    122a:	d0c9      	beq.n	11c0 <boot_swap_sectors+0x38>
    122c:	4a02      	ldr	r2, [pc, #8]	; (1238 <boot_swap_sectors+0xb0>)
    122e:	6813      	ldr	r3, [r2, #0]
    1230:	3301      	adds	r3, #1
    1232:	6013      	str	r3, [r2, #0]
}
    1234:	e7c4      	b.n	11c0 <boot_swap_sectors+0x38>
    1236:	bf00      	nop
    1238:	20022790 	.word	0x20022790

0000123c <boot_read_image_header>:
{
    123c:	b570      	push	{r4, r5, r6, lr}
    123e:	b082      	sub	sp, #8
    1240:	4615      	mov	r5, r2
    if (bs) {
    1242:	461e      	mov	r6, r3
    1244:	2b00      	cmp	r3, #0
    1246:	d036      	beq.n	12b6 <boot_read_image_header+0x7a>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    1248:	6a43      	ldr	r3, [r0, #36]	; 0x24
    124a:	685c      	ldr	r4, [r3, #4]
        if (bs->op == BOOT_STATUS_OP_MOVE) {
    124c:	7973      	ldrb	r3, [r6, #5]
    124e:	2b01      	cmp	r3, #1
    1250:	d011      	beq.n	1276 <boot_read_image_header+0x3a>
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
    1252:	2b02      	cmp	r3, #2
    1254:	d017      	beq.n	1286 <boot_read_image_header+0x4a>
    off = 0;
    1256:	2400      	movs	r4, #0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1258:	2000      	movs	r0, #0
    125a:	f005 f995 	bl	6588 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    125e:	a901      	add	r1, sp, #4
    1260:	b2c0      	uxtb	r0, r0
    1262:	f001 fb61 	bl	2928 <flash_area_open>
    if (rc != 0) {
    1266:	b368      	cbz	r0, 12c4 <boot_read_image_header+0x88>
        rc = BOOT_EFLASH;
    1268:	2401      	movs	r4, #1
    flash_area_close(fap);
    126a:	9801      	ldr	r0, [sp, #4]
    126c:	f006 fabb 	bl	77e6 <flash_area_close>
}
    1270:	4620      	mov	r0, r4
    1272:	b002      	add	sp, #8
    1274:	bd70      	pop	{r4, r5, r6, pc}
            if (slot == 0 && bs->idx > g_last_idx) {
    1276:	bb01      	cbnz	r1, 12ba <boot_read_image_header+0x7e>
    1278:	6832      	ldr	r2, [r6, #0]
    127a:	4b1c      	ldr	r3, [pc, #112]	; (12ec <boot_read_image_header+0xb0>)
    127c:	681b      	ldr	r3, [r3, #0]
    127e:	429a      	cmp	r2, r3
    1280:	d8ea      	bhi.n	1258 <boot_read_image_header+0x1c>
    off = 0;
    1282:	2400      	movs	r4, #0
    1284:	e7e8      	b.n	1258 <boot_read_image_header+0x1c>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
    1286:	6833      	ldr	r3, [r6, #0]
    1288:	2b01      	cmp	r3, #1
    128a:	d907      	bls.n	129c <boot_read_image_header+0x60>
    128c:	4a17      	ldr	r2, [pc, #92]	; (12ec <boot_read_image_header+0xb0>)
    128e:	6812      	ldr	r2, [r2, #0]
    1290:	4293      	cmp	r3, r2
    1292:	d803      	bhi.n	129c <boot_read_image_header+0x60>
                if (slot == 0) {
    1294:	b999      	cbnz	r1, 12be <boot_read_image_header+0x82>
    off = 0;
    1296:	2400      	movs	r4, #0
                    slot = 1;
    1298:	2101      	movs	r1, #1
    129a:	e7dd      	b.n	1258 <boot_read_image_header+0x1c>
            } else if (bs->idx == 1) {
    129c:	2b01      	cmp	r3, #1
    129e:	d001      	beq.n	12a4 <boot_read_image_header+0x68>
    off = 0;
    12a0:	2400      	movs	r4, #0
    12a2:	e7d9      	b.n	1258 <boot_read_image_header+0x1c>
                if (slot == 0) {
    12a4:	b101      	cbz	r1, 12a8 <boot_read_image_header+0x6c>
    off = 0;
    12a6:	2400      	movs	r4, #0
                if (slot == 1 && bs->state == 2) {
    12a8:	2901      	cmp	r1, #1
    12aa:	d1d5      	bne.n	1258 <boot_read_image_header+0x1c>
    12ac:	7933      	ldrb	r3, [r6, #4]
    12ae:	2b02      	cmp	r3, #2
    12b0:	d1d2      	bne.n	1258 <boot_read_image_header+0x1c>
                    slot = 0;
    12b2:	2100      	movs	r1, #0
    12b4:	e7d0      	b.n	1258 <boot_read_image_header+0x1c>
    off = 0;
    12b6:	2400      	movs	r4, #0
    12b8:	e7ce      	b.n	1258 <boot_read_image_header+0x1c>
    12ba:	2400      	movs	r4, #0
    12bc:	e7cc      	b.n	1258 <boot_read_image_header+0x1c>
    12be:	2400      	movs	r4, #0
                    slot = 0;
    12c0:	4621      	mov	r1, r4
    12c2:	e7c9      	b.n	1258 <boot_read_image_header+0x1c>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
    12c4:	2320      	movs	r3, #32
    12c6:	462a      	mov	r2, r5
    12c8:	4621      	mov	r1, r4
    12ca:	9801      	ldr	r0, [sp, #4]
    12cc:	f006 fa8c 	bl	77e8 <flash_area_read>
    if (rc != 0) {
    12d0:	4604      	mov	r4, r0
    12d2:	b940      	cbnz	r0, 12e6 <boot_read_image_header+0xaa>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
    12d4:	2e00      	cmp	r6, #0
    12d6:	d0c8      	beq.n	126a <boot_read_image_header+0x2e>
    12d8:	682a      	ldr	r2, [r5, #0]
    12da:	4b05      	ldr	r3, [pc, #20]	; (12f0 <boot_read_image_header+0xb4>)
    12dc:	429a      	cmp	r2, r3
    12de:	d0c4      	beq.n	126a <boot_read_image_header+0x2e>
        rc = -1;
    12e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    12e4:	e7c1      	b.n	126a <boot_read_image_header+0x2e>
        rc = BOOT_EFLASH;
    12e6:	2401      	movs	r4, #1
    12e8:	e7bf      	b.n	126a <boot_read_image_header+0x2e>
    12ea:	bf00      	nop
    12ec:	20020004 	.word	0x20020004
    12f0:	96f3b83d 	.word	0x96f3b83d

000012f4 <swap_read_status_bytes>:
{
    12f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12f8:	b085      	sub	sp, #20
    12fa:	4607      	mov	r7, r0
    12fc:	460c      	mov	r4, r1
    12fe:	9201      	str	r2, [sp, #4]
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    1300:	4601      	mov	r1, r0
    1302:	2000      	movs	r0, #0
    1304:	f005 fb2b 	bl	695e <boot_status_entries>
    if (max_entries < 0) {
    1308:	1e05      	subs	r5, r0, #0
    130a:	db69      	blt.n	13e0 <swap_read_status_bytes+0xec>
    write_sz = BOOT_WRITE_SZ(state);
    130c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    130e:	9300      	str	r3, [sp, #0]
    off = boot_status_off(fap);
    1310:	4638      	mov	r0, r7
    1312:	f005 fb32 	bl	697a <boot_status_off>
    1316:	4681      	mov	r9, r0
    erased_sections = 0;
    1318:	f04f 0b00 	mov.w	fp, #0
    last_rc = 1;
    131c:	f04f 0801 	mov.w	r8, #1
    found_idx = -1;
    1320:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    for (i = max_entries; i > 0; i--) {
    1324:	e003      	b.n	132e <swap_read_status_bytes+0x3a>
                erased_sections++;
    1326:	f10b 0b01 	add.w	fp, fp, #1
                found_idx = i;
    132a:	4625      	mov	r5, r4
    132c:	46b0      	mov	r8, r6
    for (i = max_entries; i > 0; i--) {
    132e:	2d00      	cmp	r5, #0
    1330:	dd1b      	ble.n	136a <swap_read_status_bytes+0x76>
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
    1332:	1e6c      	subs	r4, r5, #1
    1334:	f89d 1000 	ldrb.w	r1, [sp]
    1338:	2301      	movs	r3, #1
    133a:	f10d 020f 	add.w	r2, sp, #15
    133e:	fb04 9101 	mla	r1, r4, r1, r9
    1342:	4638      	mov	r0, r7
    1344:	f006 fa50 	bl	77e8 <flash_area_read>
        if (rc < 0) {
    1348:	1e06      	subs	r6, r0, #0
    134a:	db4b      	blt.n	13e4 <swap_read_status_bytes+0xf0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
    134c:	2201      	movs	r2, #1
    134e:	f10d 010f 	add.w	r1, sp, #15
    1352:	4638      	mov	r0, r7
    1354:	f005 fb1d 	bl	6992 <bootutil_buffer_is_erased>
    1358:	b110      	cbz	r0, 1360 <swap_read_status_bytes+0x6c>
            if (rc != last_rc) {
    135a:	45b0      	cmp	r8, r6
    135c:	d1e3      	bne.n	1326 <swap_read_status_bytes+0x32>
    135e:	e7e4      	b.n	132a <swap_read_status_bytes+0x36>
            if (found_idx == -1) {
    1360:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    1364:	d1e1      	bne.n	132a <swap_read_status_bytes+0x36>
                found_idx = i;
    1366:	46aa      	mov	sl, r5
    1368:	e7df      	b.n	132a <swap_read_status_bytes+0x36>
    if (erased_sections > 1) {
    136a:	f1bb 0f01 	cmp.w	fp, #1
    136e:	dc0e      	bgt.n	138e <swap_read_status_bytes+0x9a>
    if (found_idx == -1) {
    1370:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    1374:	d03a      	beq.n	13ec <swap_read_status_bytes+0xf8>
    } else if (found_idx < move_entries) {
    1376:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
    137a:	dc1a      	bgt.n	13b2 <swap_read_status_bytes+0xbe>
        bs->op = BOOT_STATUS_OP_MOVE;
    137c:	2301      	movs	r3, #1
    137e:	9901      	ldr	r1, [sp, #4]
    1380:	714b      	strb	r3, [r1, #5]
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
    1382:	eb0a 0203 	add.w	r2, sl, r3
    1386:	600a      	str	r2, [r1, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
    1388:	710b      	strb	r3, [r1, #4]
    return 0;
    138a:	2000      	movs	r0, #0
    138c:	e02b      	b.n	13e6 <swap_read_status_bytes+0xf2>
        BOOT_LOG_ERR("Detected inconsistent status!");
    138e:	f04f 0000 	mov.w	r0, #0
    1392:	2301      	movs	r3, #1
    1394:	f363 0002 	bfi	r0, r3, #0, #3
    1398:	f36f 00c5 	bfc	r0, #3, #3
    139c:	4b14      	ldr	r3, [pc, #80]	; (13f0 <swap_read_status_bytes+0xfc>)
    139e:	4a15      	ldr	r2, [pc, #84]	; (13f4 <swap_read_status_bytes+0x100>)
    13a0:	1a9b      	subs	r3, r3, r2
    13a2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    13a6:	f363 108f 	bfi	r0, r3, #6, #10
    13aa:	4913      	ldr	r1, [pc, #76]	; (13f8 <swap_read_status_bytes+0x104>)
    13ac:	f006 f933 	bl	7616 <log_string_sync>
    13b0:	e7de      	b.n	1370 <swap_read_status_bytes+0x7c>
        bs->op = BOOT_STATUS_OP_SWAP;
    13b2:	2302      	movs	r3, #2
    13b4:	9a01      	ldr	r2, [sp, #4]
    13b6:	7153      	strb	r3, [r2, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    13b8:	f1aa 0a80 	sub.w	sl, sl, #128	; 0x80
    13bc:	eb0a 73da 	add.w	r3, sl, sl, lsr #31
    13c0:	105b      	asrs	r3, r3, #1
    13c2:	3301      	adds	r3, #1
    13c4:	6013      	str	r3, [r2, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    13c6:	f1ba 0f00 	cmp.w	sl, #0
    13ca:	f00a 0a01 	and.w	sl, sl, #1
    13ce:	bfb8      	it	lt
    13d0:	f1ca 0a00 	rsblt	sl, sl, #0
    13d4:	f10a 0a01 	add.w	sl, sl, #1
    13d8:	f882 a004 	strb.w	sl, [r2, #4]
    return 0;
    13dc:	2000      	movs	r0, #0
    13de:	e002      	b.n	13e6 <swap_read_status_bytes+0xf2>
        return BOOT_EBADARGS;
    13e0:	2007      	movs	r0, #7
    13e2:	e000      	b.n	13e6 <swap_read_status_bytes+0xf2>
            return BOOT_EFLASH;
    13e4:	2001      	movs	r0, #1
}
    13e6:	b005      	add	sp, #20
    13e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
    13ec:	2000      	movs	r0, #0
    13ee:	e7fa      	b.n	13e6 <swap_read_status_bytes+0xf2>
    13f0:	0000a09c 	.word	0x0000a09c
    13f4:	0000a08c 	.word	0x0000a08c
    13f8:	0000a39c 	.word	0x0000a39c

000013fc <boot_slots_compatible>:
{
    13fc:	b538      	push	{r3, r4, r5, lr}
    return BOOT_IMG(state, slot).num_sectors;
    13fe:	6a85      	ldr	r5, [r0, #40]	; 0x28
    1400:	6d44      	ldr	r4, [r0, #84]	; 0x54
    if ((num_sectors_pri != num_sectors_sec) &&
    1402:	42a5      	cmp	r5, r4
    1404:	d002      	beq.n	140c <boot_slots_compatible+0x10>
            (num_sectors_pri != (num_sectors_sec + 1))) {
    1406:	1c63      	adds	r3, r4, #1
    if ((num_sectors_pri != num_sectors_sec) &&
    1408:	42ab      	cmp	r3, r5
    140a:	d111      	bne.n	1430 <boot_slots_compatible+0x34>
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
    140c:	2d80      	cmp	r5, #128	; 0x80
    140e:	d822      	bhi.n	1456 <boot_slots_compatible+0x5a>
    for (i = 0; i < num_sectors_sec; i++) {
    1410:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    1412:	4619      	mov	r1, r3
    for (i = 0; i < num_sectors_sec; i++) {
    1414:	42a3      	cmp	r3, r4
    1416:	d244      	bcs.n	14a2 <boot_slots_compatible+0xa6>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    1418:	6a42      	ldr	r2, [r0, #36]	; 0x24
    141a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    141e:	6851      	ldr	r1, [r2, #4]
    1420:	6d02      	ldr	r2, [r0, #80]	; 0x50
    1422:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1426:	6852      	ldr	r2, [r2, #4]
        if (sector_sz_pri != sector_sz_sec) {
    1428:	428a      	cmp	r2, r1
    142a:	d127      	bne.n	147c <boot_slots_compatible+0x80>
    for (i = 0; i < num_sectors_sec; i++) {
    142c:	3301      	adds	r3, #1
    142e:	e7f1      	b.n	1414 <boot_slots_compatible+0x18>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
    1430:	f04f 0000 	mov.w	r0, #0
    1434:	2302      	movs	r3, #2
    1436:	f363 0002 	bfi	r0, r3, #0, #3
    143a:	f36f 00c5 	bfc	r0, #3, #3
    143e:	4b28      	ldr	r3, [pc, #160]	; (14e0 <boot_slots_compatible+0xe4>)
    1440:	4a28      	ldr	r2, [pc, #160]	; (14e4 <boot_slots_compatible+0xe8>)
    1442:	1a9b      	subs	r3, r3, r2
    1444:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1448:	f363 108f 	bfi	r0, r3, #6, #10
    144c:	4926      	ldr	r1, [pc, #152]	; (14e8 <boot_slots_compatible+0xec>)
    144e:	f006 f8e2 	bl	7616 <log_string_sync>
        return 0;
    1452:	2000      	movs	r0, #0
    1454:	e024      	b.n	14a0 <boot_slots_compatible+0xa4>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
    1456:	f04f 0000 	mov.w	r0, #0
    145a:	2302      	movs	r3, #2
    145c:	f363 0002 	bfi	r0, r3, #0, #3
    1460:	f36f 00c5 	bfc	r0, #3, #3
    1464:	4b1e      	ldr	r3, [pc, #120]	; (14e0 <boot_slots_compatible+0xe4>)
    1466:	4a1f      	ldr	r2, [pc, #124]	; (14e4 <boot_slots_compatible+0xe8>)
    1468:	1a9b      	subs	r3, r3, r2
    146a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    146e:	f363 108f 	bfi	r0, r3, #6, #10
    1472:	491e      	ldr	r1, [pc, #120]	; (14ec <boot_slots_compatible+0xf0>)
    1474:	f006 f8cf 	bl	7616 <log_string_sync>
        return 0;
    1478:	2000      	movs	r0, #0
    147a:	e011      	b.n	14a0 <boot_slots_compatible+0xa4>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    147c:	f04f 0000 	mov.w	r0, #0
    1480:	2302      	movs	r3, #2
    1482:	f363 0002 	bfi	r0, r3, #0, #3
    1486:	f36f 00c5 	bfc	r0, #3, #3
    148a:	4b15      	ldr	r3, [pc, #84]	; (14e0 <boot_slots_compatible+0xe4>)
    148c:	4a15      	ldr	r2, [pc, #84]	; (14e4 <boot_slots_compatible+0xe8>)
    148e:	1a9b      	subs	r3, r3, r2
    1490:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1494:	f363 108f 	bfi	r0, r3, #6, #10
    1498:	4915      	ldr	r1, [pc, #84]	; (14f0 <boot_slots_compatible+0xf4>)
    149a:	f006 f8bc 	bl	7616 <log_string_sync>
            return 0;
    149e:	2000      	movs	r0, #0
}
    14a0:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > num_sectors_sec) {
    14a2:	42a5      	cmp	r5, r4
    14a4:	d91a      	bls.n	14dc <boot_slots_compatible+0xe0>
    14a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
    14a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    14ac:	685b      	ldr	r3, [r3, #4]
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    14ae:	4299      	cmp	r1, r3
    14b0:	d101      	bne.n	14b6 <boot_slots_compatible+0xba>
    return 1;
    14b2:	2001      	movs	r0, #1
    14b4:	e7f4      	b.n	14a0 <boot_slots_compatible+0xa4>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    14b6:	f04f 0000 	mov.w	r0, #0
    14ba:	2302      	movs	r3, #2
    14bc:	f363 0002 	bfi	r0, r3, #0, #3
    14c0:	f36f 00c5 	bfc	r0, #3, #3
    14c4:	4b06      	ldr	r3, [pc, #24]	; (14e0 <boot_slots_compatible+0xe4>)
    14c6:	4a07      	ldr	r2, [pc, #28]	; (14e4 <boot_slots_compatible+0xe8>)
    14c8:	1a9b      	subs	r3, r3, r2
    14ca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    14ce:	f363 108f 	bfi	r0, r3, #6, #10
    14d2:	4907      	ldr	r1, [pc, #28]	; (14f0 <boot_slots_compatible+0xf4>)
    14d4:	f006 f89f 	bl	7616 <log_string_sync>
            return 0;
    14d8:	2000      	movs	r0, #0
    14da:	e7e1      	b.n	14a0 <boot_slots_compatible+0xa4>
    return 1;
    14dc:	2001      	movs	r0, #1
    14de:	e7df      	b.n	14a0 <boot_slots_compatible+0xa4>
    14e0:	0000a09c 	.word	0x0000a09c
    14e4:	0000a08c 	.word	0x0000a08c
    14e8:	0000a3bc 	.word	0x0000a3bc
    14ec:	0000a3f0 	.word	0x0000a3f0
    14f0:	0000a41c 	.word	0x0000a41c

000014f4 <swap_status_source>:
{
    14f4:	b510      	push	{r4, lr}
    14f6:	b088      	sub	sp, #32
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    14f8:	a906      	add	r1, sp, #24
    14fa:	2003      	movs	r0, #3
    14fc:	f005 fad5 	bl	6aaa <boot_read_swap_state_by_id>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1500:	f04f 0000 	mov.w	r0, #0
    1504:	2303      	movs	r3, #3
    1506:	f363 0002 	bfi	r0, r3, #0, #3
    150a:	f36f 00c5 	bfc	r0, #3, #3
    150e:	4b3e      	ldr	r3, [pc, #248]	; (1608 <swap_status_source+0x114>)
    1510:	4a3e      	ldr	r2, [pc, #248]	; (160c <swap_status_source+0x118>)
    1512:	1a9b      	subs	r3, r3, r2
    1514:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1518:	f363 108f 	bfi	r0, r3, #6, #10
    151c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1520:	2b01      	cmp	r3, #1
    1522:	d053      	beq.n	15cc <swap_status_source+0xd8>
    1524:	2b03      	cmp	r3, #3
    1526:	d04f      	beq.n	15c8 <swap_status_source+0xd4>
    1528:	4b39      	ldr	r3, [pc, #228]	; (1610 <swap_status_source+0x11c>)
    152a:	f89d 2019 	ldrb.w	r2, [sp, #25]
    152e:	f89d 101a 	ldrb.w	r1, [sp, #26]
    1532:	f89d 401b 	ldrb.w	r4, [sp, #27]
    1536:	9402      	str	r4, [sp, #8]
    1538:	9101      	str	r1, [sp, #4]
    153a:	9200      	str	r2, [sp, #0]
    153c:	4a35      	ldr	r2, [pc, #212]	; (1614 <swap_status_source+0x120>)
    153e:	4936      	ldr	r1, [pc, #216]	; (1618 <swap_status_source+0x124>)
    1540:	f006 f869 	bl	7616 <log_string_sync>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1544:	a904      	add	r1, sp, #16
    1546:	2007      	movs	r0, #7
    1548:	f005 faaf 	bl	6aaa <boot_read_swap_state_by_id>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    154c:	f04f 0000 	mov.w	r0, #0
    1550:	2303      	movs	r3, #3
    1552:	f363 0002 	bfi	r0, r3, #0, #3
    1556:	f36f 00c5 	bfc	r0, #3, #3
    155a:	4b2b      	ldr	r3, [pc, #172]	; (1608 <swap_status_source+0x114>)
    155c:	4a2b      	ldr	r2, [pc, #172]	; (160c <swap_status_source+0x118>)
    155e:	1a9b      	subs	r3, r3, r2
    1560:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1564:	f363 108f 	bfi	r0, r3, #6, #10
    1568:	f89d 3010 	ldrb.w	r3, [sp, #16]
    156c:	2b01      	cmp	r3, #1
    156e:	d031      	beq.n	15d4 <swap_status_source+0xe0>
    1570:	2b03      	cmp	r3, #3
    1572:	d02d      	beq.n	15d0 <swap_status_source+0xdc>
    1574:	4b26      	ldr	r3, [pc, #152]	; (1610 <swap_status_source+0x11c>)
    1576:	f89d 2011 	ldrb.w	r2, [sp, #17]
    157a:	f89d 1012 	ldrb.w	r1, [sp, #18]
    157e:	f89d 4013 	ldrb.w	r4, [sp, #19]
    1582:	9402      	str	r4, [sp, #8]
    1584:	9101      	str	r1, [sp, #4]
    1586:	9200      	str	r2, [sp, #0]
    1588:	4a24      	ldr	r2, [pc, #144]	; (161c <swap_status_source+0x128>)
    158a:	4923      	ldr	r1, [pc, #140]	; (1618 <swap_status_source+0x124>)
    158c:	f006 f843 	bl	7616 <log_string_sync>
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    1590:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1594:	2b01      	cmp	r3, #1
    1596:	d103      	bne.n	15a0 <swap_status_source+0xac>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    1598:	f89d 301a 	ldrb.w	r3, [sp, #26]
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    159c:	2b03      	cmp	r3, #3
    159e:	d01b      	beq.n	15d8 <swap_status_source+0xe4>
    BOOT_LOG_INF("Boot source: none");
    15a0:	f04f 0000 	mov.w	r0, #0
    15a4:	2303      	movs	r3, #3
    15a6:	f363 0002 	bfi	r0, r3, #0, #3
    15aa:	f36f 00c5 	bfc	r0, #3, #3
    15ae:	4b16      	ldr	r3, [pc, #88]	; (1608 <swap_status_source+0x114>)
    15b0:	4a16      	ldr	r2, [pc, #88]	; (160c <swap_status_source+0x118>)
    15b2:	1a9b      	subs	r3, r3, r2
    15b4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    15b8:	f363 108f 	bfi	r0, r3, #6, #10
    15bc:	4918      	ldr	r1, [pc, #96]	; (1620 <swap_status_source+0x12c>)
    15be:	f006 f82a 	bl	7616 <log_string_sync>
    return BOOT_STATUS_SOURCE_NONE;
    15c2:	2000      	movs	r0, #0
}
    15c4:	b008      	add	sp, #32
    15c6:	bd10      	pop	{r4, pc}
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    15c8:	4b16      	ldr	r3, [pc, #88]	; (1624 <swap_status_source+0x130>)
    15ca:	e7ae      	b.n	152a <swap_status_source+0x36>
    15cc:	4b16      	ldr	r3, [pc, #88]	; (1628 <swap_status_source+0x134>)
    15ce:	e7ac      	b.n	152a <swap_status_source+0x36>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    15d0:	4b14      	ldr	r3, [pc, #80]	; (1624 <swap_status_source+0x130>)
    15d2:	e7d0      	b.n	1576 <swap_status_source+0x82>
    15d4:	4b14      	ldr	r3, [pc, #80]	; (1628 <swap_status_source+0x134>)
    15d6:	e7ce      	b.n	1576 <swap_status_source+0x82>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {
    15d8:	f89d 3010 	ldrb.w	r3, [sp, #16]
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    15dc:	2b01      	cmp	r3, #1
    15de:	d0df      	beq.n	15a0 <swap_status_source+0xac>
        BOOT_LOG_INF("Boot source: primary slot");
    15e0:	f04f 0000 	mov.w	r0, #0
    15e4:	2303      	movs	r3, #3
    15e6:	f363 0002 	bfi	r0, r3, #0, #3
    15ea:	f36f 00c5 	bfc	r0, #3, #3
    15ee:	4b06      	ldr	r3, [pc, #24]	; (1608 <swap_status_source+0x114>)
    15f0:	4a06      	ldr	r2, [pc, #24]	; (160c <swap_status_source+0x118>)
    15f2:	1a9b      	subs	r3, r3, r2
    15f4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    15f8:	f363 108f 	bfi	r0, r3, #6, #10
    15fc:	490b      	ldr	r1, [pc, #44]	; (162c <swap_status_source+0x138>)
    15fe:	f006 f80a 	bl	7616 <log_string_sync>
        return source;
    1602:	2002      	movs	r0, #2
    1604:	e7de      	b.n	15c4 <swap_status_source+0xd0>
    1606:	bf00      	nop
    1608:	0000a09c 	.word	0x0000a09c
    160c:	0000a08c 	.word	0x0000a08c
    1610:	0000a444 	.word	0x0000a444
    1614:	0000a458 	.word	0x0000a458
    1618:	0000a468 	.word	0x0000a468
    161c:	0000a4a4 	.word	0x0000a4a4
    1620:	0000a4d0 	.word	0x0000a4d0
    1624:	0000a450 	.word	0x0000a450
    1628:	0000a448 	.word	0x0000a448
    162c:	0000a4b4 	.word	0x0000a4b4

00001630 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec, uint8_t sec_id)
{
    1630:	b5f0      	push	{r4, r5, r6, r7, lr}
    1632:	b087      	sub	sp, #28
    1634:	460c      	mov	r4, r1
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1636:	6849      	ldr	r1, [r1, #4]
    1638:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
    163c:	4d23      	ldr	r5, [pc, #140]	; (16cc <fixup_revert+0x9c>)
    163e:	42a9      	cmp	r1, r5
    1640:	d104      	bne.n	164c <fixup_revert+0x1c>
    1642:	4606      	mov	r6, r0
    1644:	4617      	mov	r7, r2
        bs->op != BOOT_STATUS_OP_MOVE ||
        bs->idx != BOOT_STATUS_IDX_0) {
    1646:	6822      	ldr	r2, [r4, #0]
        bs->op != BOOT_STATUS_OP_MOVE ||
    1648:	2a01      	cmp	r2, #1
    164a:	d001      	beq.n	1650 <fixup_revert+0x20>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
        assert(rc == 0);
    }
}
    164c:	b007      	add	sp, #28
    164e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = boot_read_swap_state_by_id(sec_id, &swap_state);
    1650:	a904      	add	r1, sp, #16
    1652:	4618      	mov	r0, r3
    1654:	f005 fa29 	bl	6aaa <boot_read_swap_state_by_id>
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1658:	f04f 0000 	mov.w	r0, #0
    165c:	2303      	movs	r3, #3
    165e:	f363 0002 	bfi	r0, r3, #0, #3
    1662:	f36f 00c5 	bfc	r0, #3, #3
    1666:	4b1a      	ldr	r3, [pc, #104]	; (16d0 <fixup_revert+0xa0>)
    1668:	4a1a      	ldr	r2, [pc, #104]	; (16d4 <fixup_revert+0xa4>)
    166a:	1a9b      	subs	r3, r3, r2
    166c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1670:	f363 108f 	bfi	r0, r3, #6, #10
    1674:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1678:	2b01      	cmp	r3, #1
    167a:	d024      	beq.n	16c6 <fixup_revert+0x96>
    167c:	2b03      	cmp	r3, #3
    167e:	d020      	beq.n	16c2 <fixup_revert+0x92>
    1680:	4b15      	ldr	r3, [pc, #84]	; (16d8 <fixup_revert+0xa8>)
    1682:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1686:	f89d 1012 	ldrb.w	r1, [sp, #18]
    168a:	f89d 5013 	ldrb.w	r5, [sp, #19]
    168e:	9502      	str	r5, [sp, #8]
    1690:	9101      	str	r1, [sp, #4]
    1692:	9200      	str	r2, [sp, #0]
    1694:	4a11      	ldr	r2, [pc, #68]	; (16dc <fixup_revert+0xac>)
    1696:	4912      	ldr	r1, [pc, #72]	; (16e0 <fixup_revert+0xb0>)
    1698:	f005 ffbd 	bl	7616 <log_string_sync>
    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    169c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    16a0:	2b03      	cmp	r3, #3
    16a2:	d1d3      	bne.n	164c <fixup_revert+0x1c>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    16a4:	4639      	mov	r1, r7
    16a6:	4630      	mov	r0, r6
    16a8:	f005 fba7 	bl	6dfa <swap_erase_trailer_sectors>
        rc = boot_write_image_ok(fap_sec);
    16ac:	4638      	mov	r0, r7
    16ae:	f005 fa33 	bl	6b18 <boot_write_image_ok>
        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    16b2:	68a1      	ldr	r1, [r4, #8]
    16b4:	4638      	mov	r0, r7
    16b6:	f005 fa48 	bl	6b4a <boot_write_swap_size>
        rc = boot_write_magic(fap_sec);
    16ba:	4638      	mov	r0, r7
    16bc:	f7ff f986 	bl	9cc <boot_write_magic>
        assert(rc == 0);
    16c0:	e7c4      	b.n	164c <fixup_revert+0x1c>
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    16c2:	4b08      	ldr	r3, [pc, #32]	; (16e4 <fixup_revert+0xb4>)
    16c4:	e7dd      	b.n	1682 <fixup_revert+0x52>
    16c6:	4b08      	ldr	r3, [pc, #32]	; (16e8 <fixup_revert+0xb8>)
    16c8:	e7db      	b.n	1682 <fixup_revert+0x52>
    16ca:	bf00      	nop
    16cc:	04000100 	.word	0x04000100
    16d0:	0000a09c 	.word	0x0000a09c
    16d4:	0000a08c 	.word	0x0000a08c
    16d8:	0000a444 	.word	0x0000a444
    16dc:	0000a4a4 	.word	0x0000a4a4
    16e0:	0000a468 	.word	0x0000a468
    16e4:	0000a450 	.word	0x0000a450
    16e8:	0000a448 	.word	0x0000a448

000016ec <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    16ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ee:	b085      	sub	sp, #20
    16f0:	4607      	mov	r7, r0
    16f2:	460d      	mov	r5, r1
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    g_last_idx = 0;
    16f4:	2400      	movs	r4, #0
    16f6:	4b3e      	ldr	r3, [pc, #248]	; (17f0 <swap_run+0x104>)
    16f8:	601c      	str	r4, [r3, #0]
    16fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    16fc:	685e      	ldr	r6, [r3, #4]

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    16fe:	4434      	add	r4, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
    1700:	493b      	ldr	r1, [pc, #236]	; (17f0 <swap_run+0x104>)
    1702:	680b      	ldr	r3, [r1, #0]
    1704:	3301      	adds	r3, #1
    1706:	600b      	str	r3, [r1, #0]
        if (sz >= copy_size) {
    1708:	4294      	cmp	r4, r2
    170a:	d3f8      	bcc.n	16fe <swap_run+0x12>
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    170c:	4628      	mov	r0, r5
    170e:	f005 fb0b 	bl	6d28 <boot_status_is_reset>
    1712:	b170      	cbz	r0, 1732 <swap_run+0x46>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1714:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1716:	f005 f91d 	bl	6954 <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    171a:	6aba      	ldr	r2, [r7, #40]	; 0x28
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    171c:	3a01      	subs	r2, #1
        sz = 0;
    171e:	2300      	movs	r3, #0

        while (1) {
            sz += sector_sz;
    1720:	4433      	add	r3, r6
            if  (sz >= trailer_sz) {
    1722:	4298      	cmp	r0, r3
    1724:	d901      	bls.n	172a <swap_run+0x3e>
                break;
            }
            first_trailer_idx--;
    1726:	3a01      	subs	r2, #1
            sz += sector_sz;
    1728:	e7fa      	b.n	1720 <swap_run+0x34>
        }

        if (g_last_idx >= first_trailer_idx) {
    172a:	4b31      	ldr	r3, [pc, #196]	; (17f0 <swap_run+0x104>)
    172c:	681b      	ldr	r3, [r3, #0]
    172e:	4293      	cmp	r3, r2
    1730:	d214      	bcs.n	175c <swap_run+0x70>
        }
    }

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    1732:	a903      	add	r1, sp, #12
    1734:	2003      	movs	r0, #3
    1736:	f001 f8f7 	bl	2928 <flash_area_open>
    assert (rc == 0);

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    173a:	a902      	add	r1, sp, #8
    173c:	2007      	movs	r0, #7
    173e:	f001 f8f3 	bl	2928 <flash_area_open>
    assert (rc == 0);

    fixup_revert(state, bs, fap_sec, FLASH_AREA_IMAGE_SECONDARY(image_index));
    1742:	2307      	movs	r3, #7
    1744:	9a02      	ldr	r2, [sp, #8]
    1746:	4629      	mov	r1, r5
    1748:	4638      	mov	r0, r7
    174a:	f7ff ff71 	bl	1630 <fixup_revert>

    if (bs->op == BOOT_STATUS_OP_MOVE) {
    174e:	796b      	ldrb	r3, [r5, #5]
    1750:	2b01      	cmp	r3, #1
    1752:	d017      	beq.n	1784 <swap_run+0x98>
            idx--;
        }
        bs->idx = BOOT_STATUS_IDX_0;
    }

    bs->op = BOOT_STATUS_OP_SWAP;
    1754:	2302      	movs	r3, #2
    1756:	716b      	strb	r3, [r5, #5]

    idx = 1;
    1758:	2401      	movs	r4, #1
    while (idx <= g_last_idx) {
    175a:	e038      	b.n	17ce <swap_run+0xe2>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    175c:	f04f 0000 	mov.w	r0, #0
    1760:	2302      	movs	r3, #2
    1762:	f363 0002 	bfi	r0, r3, #0, #3
    1766:	f36f 00c5 	bfc	r0, #3, #3
    176a:	4b22      	ldr	r3, [pc, #136]	; (17f4 <swap_run+0x108>)
    176c:	4a22      	ldr	r2, [pc, #136]	; (17f8 <swap_run+0x10c>)
    176e:	1a9b      	subs	r3, r3, r2
    1770:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1774:	f363 108f 	bfi	r0, r3, #6, #10
    1778:	4920      	ldr	r1, [pc, #128]	; (17fc <swap_run+0x110>)
    177a:	f005 ff4c 	bl	7616 <log_string_sync>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    177e:	2301      	movs	r3, #1
    1780:	71eb      	strb	r3, [r5, #7]
            return;
    1782:	e032      	b.n	17ea <swap_run+0xfe>
        idx = g_last_idx;
    1784:	4b1a      	ldr	r3, [pc, #104]	; (17f0 <swap_run+0x104>)
    1786:	681c      	ldr	r4, [r3, #0]
        while (idx > 0) {
    1788:	e00a      	b.n	17a0 <swap_run+0xb4>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    178a:	9b02      	ldr	r3, [sp, #8]
    178c:	9301      	str	r3, [sp, #4]
    178e:	9b03      	ldr	r3, [sp, #12]
    1790:	9300      	str	r3, [sp, #0]
    1792:	462b      	mov	r3, r5
    1794:	463a      	mov	r2, r7
    1796:	4631      	mov	r1, r6
    1798:	4620      	mov	r0, r4
    179a:	f7ff fcaf 	bl	10fc <boot_move_sector_up>
            idx--;
    179e:	3c01      	subs	r4, #1
        while (idx > 0) {
    17a0:	b13c      	cbz	r4, 17b2 <swap_run+0xc6>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    17a2:	682a      	ldr	r2, [r5, #0]
    17a4:	4b12      	ldr	r3, [pc, #72]	; (17f0 <swap_run+0x104>)
    17a6:	681b      	ldr	r3, [r3, #0]
    17a8:	1a9b      	subs	r3, r3, r2
    17aa:	3301      	adds	r3, #1
    17ac:	429c      	cmp	r4, r3
    17ae:	d8f6      	bhi.n	179e <swap_run+0xb2>
    17b0:	e7eb      	b.n	178a <swap_run+0x9e>
        bs->idx = BOOT_STATUS_IDX_0;
    17b2:	2301      	movs	r3, #1
    17b4:	602b      	str	r3, [r5, #0]
    17b6:	e7cd      	b.n	1754 <swap_run+0x68>
        if (idx >= bs->idx) {
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    17b8:	9b02      	ldr	r3, [sp, #8]
    17ba:	9301      	str	r3, [sp, #4]
    17bc:	9b03      	ldr	r3, [sp, #12]
    17be:	9300      	str	r3, [sp, #0]
    17c0:	462b      	mov	r3, r5
    17c2:	463a      	mov	r2, r7
    17c4:	4631      	mov	r1, r6
    17c6:	4620      	mov	r0, r4
    17c8:	f7ff fcde 	bl	1188 <boot_swap_sectors>
        }
        idx++;
    17cc:	3401      	adds	r4, #1
    while (idx <= g_last_idx) {
    17ce:	4b08      	ldr	r3, [pc, #32]	; (17f0 <swap_run+0x104>)
    17d0:	681b      	ldr	r3, [r3, #0]
    17d2:	42a3      	cmp	r3, r4
    17d4:	d303      	bcc.n	17de <swap_run+0xf2>
        if (idx >= bs->idx) {
    17d6:	682b      	ldr	r3, [r5, #0]
    17d8:	42a3      	cmp	r3, r4
    17da:	d8f7      	bhi.n	17cc <swap_run+0xe0>
    17dc:	e7ec      	b.n	17b8 <swap_run+0xcc>
    }

    flash_area_close(fap_pri);
    17de:	9803      	ldr	r0, [sp, #12]
    17e0:	f006 f801 	bl	77e6 <flash_area_close>
    flash_area_close(fap_sec);
    17e4:	9802      	ldr	r0, [sp, #8]
    17e6:	f005 fffe 	bl	77e6 <flash_area_close>
}
    17ea:	b005      	add	sp, #20
    17ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17ee:	bf00      	nop
    17f0:	20020004 	.word	0x20020004
    17f4:	0000a09c 	.word	0x0000a09c
    17f8:	0000a08c 	.word	0x0000a08c
    17fc:	0000a4e4 	.word	0x0000a4e4

00001800 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    1800:	b508      	push	{r3, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1802:	2201      	movs	r2, #1
    1804:	4b10      	ldr	r3, [pc, #64]	; (1848 <nrf_cleanup_peripheral+0x48>)
    1806:	601a      	str	r2, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1808:	4910      	ldr	r1, [pc, #64]	; (184c <nrf_cleanup_peripheral+0x4c>)
    180a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    180e:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1812:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1816:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    181a:	3104      	adds	r1, #4
    181c:	600a      	str	r2, [r1, #0]
    p_reg->EVTENCLR = mask;
    181e:	4a0c      	ldr	r2, [pc, #48]	; (1850 <nrf_cleanup_peripheral+0x50>)
    1820:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1824:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1828:	f5a2 4250 	sub.w	r2, r2, #53248	; 0xd000
    182c:	2100      	movs	r1, #0
    182e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1832:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1836:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    183a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    183e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#endif
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#endif
    nrf_cleanup_clock();
    1842:	f005 fbbe 	bl	6fc2 <nrf_cleanup_clock>
}
    1846:	bd08      	pop	{r3, pc}
    1848:	50014004 	.word	0x50014004
    184c:	50014000 	.word	0x50014000
    1850:	50015000 	.word	0x50015000

00001854 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1854:	4b01      	ldr	r3, [pc, #4]	; (185c <__printk_hook_install+0x8>)
    1856:	6018      	str	r0, [r3, #0]
}
    1858:	4770      	bx	lr
    185a:	bf00      	nop
    185c:	20020008 	.word	0x20020008

00001860 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1864:	b083      	sub	sp, #12
    1866:	4604      	mov	r4, r0
    1868:	4608      	mov	r0, r1
    186a:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    186c:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    186e:	f013 0f08 	tst.w	r3, #8
    1872:	d105      	bne.n	1880 <process_event+0x20>
    1874:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1878:	2300      	movs	r3, #0
    187a:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    187c:	9301      	str	r3, [sp, #4]
}
    187e:	e069      	b.n	1954 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    1880:	2901      	cmp	r1, #1
    1882:	d009      	beq.n	1898 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1884:	f043 0320 	orr.w	r3, r3, #32
    1888:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    188a:	f385 8811 	msr	BASEPRI, r5
    188e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1892:	b003      	add	sp, #12
    1894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1898:	f043 0310 	orr.w	r3, r3, #16
    189c:	8323      	strh	r3, [r4, #24]
    189e:	e7f4      	b.n	188a <process_event+0x2a>
			evt = process_recheck(mgr);
    18a0:	4620      	mov	r0, r4
    18a2:	f005 fbf0 	bl	7086 <process_recheck>
    18a6:	e057      	b.n	1958 <process_event+0xf8>
			res = mgr->last_res;
    18a8:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    18ac:	464a      	mov	r2, r9
    18ae:	4669      	mov	r1, sp
    18b0:	4620      	mov	r0, r4
    18b2:	f005 fc01 	bl	70b8 <process_complete>
		onoff_transition_fn transit = NULL;
    18b6:	2700      	movs	r7, #0
    18b8:	e05a      	b.n	1970 <process_event+0x110>
			transit = mgr->transitions->start;
    18ba:	6923      	ldr	r3, [r4, #16]
    18bc:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    18be:	2106      	movs	r1, #6
    18c0:	4620      	mov	r0, r4
    18c2:	f005 fbb9 	bl	7038 <set_state>
		res = 0;
    18c6:	f04f 0900 	mov.w	r9, #0
    18ca:	e051      	b.n	1970 <process_event+0x110>
			transit = mgr->transitions->stop;
    18cc:	6923      	ldr	r3, [r4, #16]
    18ce:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    18d0:	2104      	movs	r1, #4
    18d2:	4620      	mov	r0, r4
    18d4:	f005 fbb0 	bl	7038 <set_state>
		res = 0;
    18d8:	f04f 0900 	mov.w	r9, #0
    18dc:	e048      	b.n	1970 <process_event+0x110>
			transit = mgr->transitions->reset;
    18de:	6923      	ldr	r3, [r4, #16]
    18e0:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    18e2:	2105      	movs	r1, #5
    18e4:	4620      	mov	r0, r4
    18e6:	f005 fba7 	bl	7038 <set_state>
		res = 0;
    18ea:	f04f 0900 	mov.w	r9, #0
    18ee:	e03f      	b.n	1970 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    18f0:	2200      	movs	r2, #0
    18f2:	e046      	b.n	1982 <process_event+0x122>
    18f4:	2200      	movs	r2, #0
    18f6:	e044      	b.n	1982 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    18f8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    18fc:	8323      	strh	r3, [r4, #24]
    18fe:	f385 8811 	msr	BASEPRI, r5
    1902:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1906:	2900      	cmp	r1, #0
    1908:	d144      	bne.n	1994 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    190a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    190c:	b12b      	cbz	r3, 191a <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    190e:	464b      	mov	r3, r9
    1910:	4642      	mov	r2, r8
    1912:	4669      	mov	r1, sp
    1914:	4620      	mov	r0, r4
    1916:	f005 fc45 	bl	71a4 <notify_all>
			if (transit != NULL) {
    191a:	b117      	cbz	r7, 1922 <process_event+0xc2>
				transit(mgr, transition_complete);
    191c:	4925      	ldr	r1, [pc, #148]	; (19b4 <process_event+0x154>)
    191e:	4620      	mov	r0, r4
    1920:	47b8      	blx	r7
	__asm__ volatile(
    1922:	f04f 0320 	mov.w	r3, #32
    1926:	f3ef 8511 	mrs	r5, BASEPRI
    192a:	f383 8811 	msr	BASEPRI, r3
    192e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1932:	8b23      	ldrh	r3, [r4, #24]
    1934:	f023 0308 	bic.w	r3, r3, #8
    1938:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    193a:	8b23      	ldrh	r3, [r4, #24]
    193c:	f013 0f10 	tst.w	r3, #16
    1940:	d02e      	beq.n	19a0 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1942:	f023 0310 	bic.w	r3, r3, #16
    1946:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1948:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    194a:	8b26      	ldrh	r6, [r4, #24]
    194c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    1950:	2800      	cmp	r0, #0
    1952:	d09a      	beq.n	188a <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    1954:	2802      	cmp	r0, #2
    1956:	d0a3      	beq.n	18a0 <process_event+0x40>
		if (evt == EVT_NOP) {
    1958:	2800      	cmp	r0, #0
    195a:	d096      	beq.n	188a <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    195c:	2801      	cmp	r0, #1
    195e:	d0a3      	beq.n	18a8 <process_event+0x48>
		} else if (evt == EVT_START) {
    1960:	2803      	cmp	r0, #3
    1962:	d0aa      	beq.n	18ba <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    1964:	2804      	cmp	r0, #4
    1966:	d0b1      	beq.n	18cc <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    1968:	2805      	cmp	r0, #5
    196a:	d0b8      	beq.n	18de <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    196c:	2700      	movs	r7, #0
		res = 0;
    196e:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1970:	8b23      	ldrh	r3, [r4, #24]
    1972:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1976:	45b0      	cmp	r8, r6
    1978:	d0ba      	beq.n	18f0 <process_event+0x90>
    197a:	68a2      	ldr	r2, [r4, #8]
    197c:	2a00      	cmp	r2, #0
    197e:	d0b9      	beq.n	18f4 <process_event+0x94>
    1980:	2201      	movs	r2, #1
		if (do_monitors
    1982:	4611      	mov	r1, r2
    1984:	2a00      	cmp	r2, #0
    1986:	d1b7      	bne.n	18f8 <process_event+0x98>
    1988:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    198a:	2a00      	cmp	r2, #0
    198c:	d1b4      	bne.n	18f8 <process_event+0x98>
		    || (transit != NULL)) {
    198e:	2f00      	cmp	r7, #0
    1990:	d1b2      	bne.n	18f8 <process_event+0x98>
    1992:	e7d2      	b.n	193a <process_event+0xda>
				notify_monitors(mgr, state, res);
    1994:	464a      	mov	r2, r9
    1996:	4641      	mov	r1, r8
    1998:	4620      	mov	r0, r4
    199a:	f005 fb55 	bl	7048 <notify_monitors>
    199e:	e7b4      	b.n	190a <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    19a0:	f013 0f20 	tst.w	r3, #32
    19a4:	d004      	beq.n	19b0 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    19a6:	f023 0320 	bic.w	r3, r3, #32
    19aa:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    19ac:	2002      	movs	r0, #2
    19ae:	e7cc      	b.n	194a <process_event+0xea>
		evt = EVT_NOP;
    19b0:	2000      	movs	r0, #0
    19b2:	e7ca      	b.n	194a <process_event+0xea>
    19b4:	000071d3 	.word	0x000071d3

000019b8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    19b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19bc:	b08f      	sub	sp, #60	; 0x3c
    19be:	4606      	mov	r6, r0
    19c0:	460d      	mov	r5, r1
    19c2:	4692      	mov	sl, r2
    19c4:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    19c6:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    19c8:	f89a 0000 	ldrb.w	r0, [sl]
    19cc:	2800      	cmp	r0, #0
    19ce:	f000 8495 	beq.w	22fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fc>
		if (*fp != '%') {
    19d2:	2825      	cmp	r0, #37	; 0x25
    19d4:	d008      	beq.n	19e8 <cbvprintf+0x30>
			OUTC(*fp++);
    19d6:	f10a 0a01 	add.w	sl, sl, #1
    19da:	4629      	mov	r1, r5
    19dc:	47b0      	blx	r6
    19de:	2800      	cmp	r0, #0
    19e0:	f2c0 848d 	blt.w	22fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fe>
    19e4:	3401      	adds	r4, #1
			continue;
    19e6:	e7ef      	b.n	19c8 <cbvprintf+0x10>
	*conv = (struct conversion) {
    19e8:	2300      	movs	r3, #0
    19ea:	9305      	str	r3, [sp, #20]
    19ec:	9306      	str	r3, [sp, #24]
    19ee:	9307      	str	r3, [sp, #28]
	++sp;
    19f0:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    19f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
    19f8:	2b25      	cmp	r3, #37	; 0x25
    19fa:	d001      	beq.n	1a00 <cbvprintf+0x48>
	bool loop = true;
    19fc:	2701      	movs	r7, #1
    19fe:	e02c      	b.n	1a5a <cbvprintf+0xa2>
		conv->specifier = *sp++;
    1a00:	f10a 0802 	add.w	r8, sl, #2
    1a04:	f88d 3017 	strb.w	r3, [sp, #23]
		return sp;
    1a08:	e189      	b.n	1d1e <cbvprintf+0x366>
			conv->flag_dash = true;
    1a0a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1a0e:	f043 0304 	orr.w	r3, r3, #4
    1a12:	f88d 3014 	strb.w	r3, [sp, #20]
		if (loop) {
    1a16:	b1ff      	cbz	r7, 1a58 <cbvprintf+0xa0>
			++sp;
    1a18:	f108 0801 	add.w	r8, r8, #1
    1a1c:	e01c      	b.n	1a58 <cbvprintf+0xa0>
			conv->flag_plus = true;
    1a1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1a22:	f043 0308 	orr.w	r3, r3, #8
    1a26:	f88d 3014 	strb.w	r3, [sp, #20]
			break;
    1a2a:	e7f4      	b.n	1a16 <cbvprintf+0x5e>
			conv->flag_space = true;
    1a2c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1a30:	f043 0310 	orr.w	r3, r3, #16
    1a34:	f88d 3014 	strb.w	r3, [sp, #20]
			break;
    1a38:	e7ed      	b.n	1a16 <cbvprintf+0x5e>
			conv->flag_hash = true;
    1a3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1a3e:	f043 0320 	orr.w	r3, r3, #32
    1a42:	f88d 3014 	strb.w	r3, [sp, #20]
			break;
    1a46:	e7e6      	b.n	1a16 <cbvprintf+0x5e>
			conv->flag_zero = true;
    1a48:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a50:	f88d 3014 	strb.w	r3, [sp, #20]
			break;
    1a54:	e7df      	b.n	1a16 <cbvprintf+0x5e>
		switch (*sp) {
    1a56:	2700      	movs	r7, #0
	} while (loop);
    1a58:	b357      	cbz	r7, 1ab0 <cbvprintf+0xf8>
		switch (*sp) {
    1a5a:	f898 3000 	ldrb.w	r3, [r8]
    1a5e:	3b20      	subs	r3, #32
    1a60:	2b10      	cmp	r3, #16
    1a62:	d8f8      	bhi.n	1a56 <cbvprintf+0x9e>
    1a64:	a201      	add	r2, pc, #4	; (adr r2, 1a6c <cbvprintf+0xb4>)
    1a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1a6a:	bf00      	nop
    1a6c:	00001a2d 	.word	0x00001a2d
    1a70:	00001a57 	.word	0x00001a57
    1a74:	00001a57 	.word	0x00001a57
    1a78:	00001a3b 	.word	0x00001a3b
    1a7c:	00001a57 	.word	0x00001a57
    1a80:	00001a57 	.word	0x00001a57
    1a84:	00001a57 	.word	0x00001a57
    1a88:	00001a57 	.word	0x00001a57
    1a8c:	00001a57 	.word	0x00001a57
    1a90:	00001a57 	.word	0x00001a57
    1a94:	00001a57 	.word	0x00001a57
    1a98:	00001a1f 	.word	0x00001a1f
    1a9c:	00001a57 	.word	0x00001a57
    1aa0:	00001a0b 	.word	0x00001a0b
    1aa4:	00001a57 	.word	0x00001a57
    1aa8:	00001a57 	.word	0x00001a57
    1aac:	00001a49 	.word	0x00001a49
	if (conv->flag_zero && conv->flag_dash) {
    1ab0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1ab4:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1ab8:	2b44      	cmp	r3, #68	; 0x44
    1aba:	d04e      	beq.n	1b5a <cbvprintf+0x1a2>
	sp = extract_width(conv, sp);
    1abc:	f8cd 8010 	str.w	r8, [sp, #16]
	if (*sp == '*') {
    1ac0:	f898 3000 	ldrb.w	r3, [r8]
    1ac4:	2b2a      	cmp	r3, #42	; 0x2a
    1ac6:	d04f      	beq.n	1b68 <cbvprintf+0x1b0>
	size_t width = extract_decimal(&sp);
    1ac8:	a804      	add	r0, sp, #16
    1aca:	f005 fcfa 	bl	74c2 <extract_decimal>
	if (sp != wp) {
    1ace:	9b04      	ldr	r3, [sp, #16]
    1ad0:	4598      	cmp	r8, r3
    1ad2:	d006      	beq.n	1ae2 <cbvprintf+0x12a>
		conv->width_present = true;
    1ad4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1adc:	f88d 3014 	strb.w	r3, [sp, #20]
		conv->width_value = width;
    1ae0:	9006      	str	r0, [sp, #24]
	return sp;
    1ae2:	9b04      	ldr	r3, [sp, #16]
	sp = extract_prec(conv, sp);
    1ae4:	9304      	str	r3, [sp, #16]
	if (*sp != '.') {
    1ae6:	4698      	mov	r8, r3
    1ae8:	781a      	ldrb	r2, [r3, #0]
    1aea:	2a2e      	cmp	r2, #46	; 0x2e
    1aec:	d115      	bne.n	1b1a <cbvprintf+0x162>
	++sp;
    1aee:	f103 0801 	add.w	r8, r3, #1
    1af2:	f8cd 8010 	str.w	r8, [sp, #16]
	if (*sp == '*') {
    1af6:	785b      	ldrb	r3, [r3, #1]
    1af8:	2b2a      	cmp	r3, #42	; 0x2a
    1afa:	d044      	beq.n	1b86 <cbvprintf+0x1ce>
	size_t prec = extract_decimal(&sp);
    1afc:	a804      	add	r0, sp, #16
    1afe:	f005 fce0 	bl	74c2 <extract_decimal>
	if (sp != wp) {
    1b02:	9b04      	ldr	r3, [sp, #16]
    1b04:	4598      	cmp	r8, r3
    1b06:	d006      	beq.n	1b16 <cbvprintf+0x15e>
		conv->prec_present = true;
    1b08:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1b0c:	f043 0302 	orr.w	r3, r3, #2
    1b10:	f88d 3015 	strb.w	r3, [sp, #21]
		conv->prec_value = prec;
    1b14:	9007      	str	r0, [sp, #28]
	return sp;
    1b16:	f8dd 8010 	ldr.w	r8, [sp, #16]
	switch (*sp) {
    1b1a:	f898 3000 	ldrb.w	r3, [r8]
    1b1e:	3b4c      	subs	r3, #76	; 0x4c
    1b20:	2b2e      	cmp	r3, #46	; 0x2e
    1b22:	f200 80db 	bhi.w	1cdc <cbvprintf+0x324>
    1b26:	e8df f003 	tbb	[pc, r3]
    1b2a:	d9c9      	.short	0xd9c9
    1b2c:	d9d9d9d9 	.word	0xd9d9d9d9
    1b30:	d9d9d9d9 	.word	0xd9d9d9d9
    1b34:	d9d9d9d9 	.word	0xd9d9d9d9
    1b38:	d9d9d9d9 	.word	0xd9d9d9d9
    1b3c:	d9d9d9d9 	.word	0xd9d9d9d9
    1b40:	d9d9d9d9 	.word	0xd9d9d9d9
    1b44:	d937d9d9 	.word	0xd937d9d9
    1b48:	d950d969 	.word	0xd950d969
    1b4c:	d9d9d9d9 	.word	0xd9d9d9d9
    1b50:	d9bfd9d9 	.word	0xd9bfd9d9
    1b54:	d9d9d9d9 	.word	0xd9d9d9d9
    1b58:	b5          	.byte	0xb5
    1b59:	00          	.byte	0x00
		conv->flag_zero = false;
    1b5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1b5e:	f36f 1386 	bfc	r3, #6, #1
    1b62:	f88d 3014 	strb.w	r3, [sp, #20]
    1b66:	e7a9      	b.n	1abc <cbvprintf+0x104>
		conv->width_present = true;
    1b68:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1b70:	f88d 3014 	strb.w	r3, [sp, #20]
		conv->width_star = true;
    1b74:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1b78:	f043 0301 	orr.w	r3, r3, #1
    1b7c:	f88d 3015 	strb.w	r3, [sp, #21]
		return ++sp;
    1b80:	4643      	mov	r3, r8
    1b82:	3301      	adds	r3, #1
    1b84:	e7ae      	b.n	1ae4 <cbvprintf+0x12c>
		conv->prec_present = true;
    1b86:	f89d 3015 	ldrb.w	r3, [sp, #21]
		conv->prec_star = true;
    1b8a:	f043 0306 	orr.w	r3, r3, #6
    1b8e:	f88d 3015 	strb.w	r3, [sp, #21]
		return ++sp;
    1b92:	f108 0801 	add.w	r8, r8, #1
    1b96:	e7c0      	b.n	1b1a <cbvprintf+0x162>
		if (*++sp == 'h') {
    1b98:	f108 0201 	add.w	r2, r8, #1
    1b9c:	f898 3001 	ldrb.w	r3, [r8, #1]
    1ba0:	2b68      	cmp	r3, #104	; 0x68
    1ba2:	d008      	beq.n	1bb6 <cbvprintf+0x1fe>
			conv->length_mod = LENGTH_H;
    1ba4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1ba8:	2102      	movs	r1, #2
    1baa:	f361 03c6 	bfi	r3, r1, #3, #4
    1bae:	f88d 3015 	strb.w	r3, [sp, #21]
		if (*++sp == 'h') {
    1bb2:	4690      	mov	r8, r2
    1bb4:	e02b      	b.n	1c0e <cbvprintf+0x256>
			conv->length_mod = LENGTH_HH;
    1bb6:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1bba:	2201      	movs	r2, #1
    1bbc:	f362 03c6 	bfi	r3, r2, #3, #4
    1bc0:	f88d 3015 	strb.w	r3, [sp, #21]
			++sp;
    1bc4:	f108 0802 	add.w	r8, r8, #2
    1bc8:	e021      	b.n	1c0e <cbvprintf+0x256>
		if (*++sp == 'l') {
    1bca:	f108 0201 	add.w	r2, r8, #1
    1bce:	f898 3001 	ldrb.w	r3, [r8, #1]
    1bd2:	2b6c      	cmp	r3, #108	; 0x6c
    1bd4:	d008      	beq.n	1be8 <cbvprintf+0x230>
			conv->length_mod = LENGTH_L;
    1bd6:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1bda:	2103      	movs	r1, #3
    1bdc:	f361 03c6 	bfi	r3, r1, #3, #4
    1be0:	f88d 3015 	strb.w	r3, [sp, #21]
		if (*++sp == 'l') {
    1be4:	4690      	mov	r8, r2
    1be6:	e012      	b.n	1c0e <cbvprintf+0x256>
			conv->length_mod = LENGTH_LL;
    1be8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1bec:	2204      	movs	r2, #4
    1bee:	f362 03c6 	bfi	r3, r2, #3, #4
    1bf2:	f88d 3015 	strb.w	r3, [sp, #21]
			++sp;
    1bf6:	f108 0802 	add.w	r8, r8, #2
    1bfa:	e008      	b.n	1c0e <cbvprintf+0x256>
		conv->length_mod = LENGTH_J;
    1bfc:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1c00:	2205      	movs	r2, #5
    1c02:	f362 03c6 	bfi	r3, r2, #3, #4
    1c06:	f88d 3015 	strb.w	r3, [sp, #21]
		++sp;
    1c0a:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    1c0e:	f818 3b01 	ldrb.w	r3, [r8], #1
    1c12:	f88d 3017 	strb.w	r3, [sp, #23]
	switch (conv->specifier) {
    1c16:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    1c1a:	2a37      	cmp	r2, #55	; 0x37
    1c1c:	f200 8151 	bhi.w	1ec2 <cbvprintf+0x50a>
    1c20:	e8df f012 	tbh	[pc, r2, lsl #1]
    1c24:	014f0127 	.word	0x014f0127
    1c28:	014f014f 	.word	0x014f014f
    1c2c:	01270127 	.word	0x01270127
    1c30:	014f0127 	.word	0x014f0127
    1c34:	014f014f 	.word	0x014f014f
    1c38:	014f014f 	.word	0x014f014f
    1c3c:	014f014f 	.word	0x014f014f
    1c40:	014f014f 	.word	0x014f014f
    1c44:	014f014f 	.word	0x014f014f
    1c48:	014f014f 	.word	0x014f014f
    1c4c:	014f014f 	.word	0x014f014f
    1c50:	0114014f 	.word	0x0114014f
    1c54:	014f014f 	.word	0x014f014f
    1c58:	014f014f 	.word	0x014f014f
    1c5c:	014f014f 	.word	0x014f014f
    1c60:	014f014f 	.word	0x014f014f
    1c64:	014f0127 	.word	0x014f0127
    1c68:	00630114 	.word	0x00630114
    1c6c:	01270127 	.word	0x01270127
    1c70:	014f0127 	.word	0x014f0127
    1c74:	014f0063 	.word	0x014f0063
    1c78:	014f014f 	.word	0x014f014f
    1c7c:	0130014f 	.word	0x0130014f
    1c80:	01400114 	.word	0x01400114
    1c84:	014f014f 	.word	0x014f014f
    1c88:	014f0140 	.word	0x014f0140
    1c8c:	014f0114 	.word	0x014f0114
    1c90:	0114014f 	.word	0x0114014f
		conv->length_mod = LENGTH_Z;
    1c94:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1c98:	2206      	movs	r2, #6
    1c9a:	f362 03c6 	bfi	r3, r2, #3, #4
    1c9e:	f88d 3015 	strb.w	r3, [sp, #21]
		++sp;
    1ca2:	f108 0801 	add.w	r8, r8, #1
		break;
    1ca6:	e7b2      	b.n	1c0e <cbvprintf+0x256>
		conv->length_mod = LENGTH_T;
    1ca8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1cac:	2207      	movs	r2, #7
    1cae:	f362 03c6 	bfi	r3, r2, #3, #4
    1cb2:	f88d 3015 	strb.w	r3, [sp, #21]
		++sp;
    1cb6:	f108 0801 	add.w	r8, r8, #1
		break;
    1cba:	e7a8      	b.n	1c0e <cbvprintf+0x256>
		conv->length_mod = LENGTH_UPPER_L;
    1cbc:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1cc0:	2208      	movs	r2, #8
    1cc2:	f362 03c6 	bfi	r3, r2, #3, #4
    1cc6:	f88d 3015 	strb.w	r3, [sp, #21]
		++sp;
    1cca:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    1cce:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1cd2:	f043 0302 	orr.w	r3, r3, #2
    1cd6:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    1cda:	e798      	b.n	1c0e <cbvprintf+0x256>
		conv->length_mod = LENGTH_NONE;
    1cdc:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1ce0:	f36f 03c6 	bfc	r3, #3, #4
    1ce4:	f88d 3015 	strb.w	r3, [sp, #21]
		break;
    1ce8:	e791      	b.n	1c0e <cbvprintf+0x256>
		conv->specifier_cat = SPECIFIER_SINT;
    1cea:	f89d 2016 	ldrb.w	r2, [sp, #22]
    1cee:	2101      	movs	r1, #1
    1cf0:	f361 0202 	bfi	r2, r1, #0, #3
    1cf4:	f88d 2016 	strb.w	r2, [sp, #22]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1cf8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    1cfc:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1d00:	2a40      	cmp	r2, #64	; 0x40
    1d02:	f000 80ab 	beq.w	1e5c <cbvprintf+0x4a4>
		if (conv->specifier == 'c') {
    1d06:	2b63      	cmp	r3, #99	; 0x63
    1d08:	f000 80af 	beq.w	1e6a <cbvprintf+0x4b2>
	conv->unsupported |= unsupported;
    1d0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1d10:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1d14:	4317      	orrs	r7, r2
    1d16:	f367 0341 	bfi	r3, r7, #1, #1
    1d1a:	f88d 3014 	strb.w	r3, [sp, #20]
		fp = extract_conversion(&conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set with if present.
		 */
		if (conv.width_star) {
    1d1e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1d22:	f013 0f01 	tst.w	r3, #1
    1d26:	f000 80db 	beq.w	1ee0 <cbvprintf+0x528>
			width = va_arg(ap, int);
    1d2a:	9b03      	ldr	r3, [sp, #12]
    1d2c:	1d1a      	adds	r2, r3, #4
    1d2e:	9203      	str	r2, [sp, #12]
    1d30:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    1d32:	2f00      	cmp	r7, #0
    1d34:	f2c0 80cc 	blt.w	1ed0 <cbvprintf+0x518>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv.prec_star) {
    1d38:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1d3c:	f013 0f04 	tst.w	r3, #4
    1d40:	f000 80e0 	beq.w	1f04 <cbvprintf+0x54c>
			int arg = va_arg(ap, int);
    1d44:	9b03      	ldr	r3, [sp, #12]
    1d46:	1d1a      	adds	r2, r3, #4
    1d48:	9203      	str	r2, [sp, #12]
    1d4a:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    1d4e:	f1bb 0f00 	cmp.w	fp, #0
    1d52:	f2c0 80ce 	blt.w	1ef2 <cbvprintf+0x53a>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv.pad0_value = 0;
    1d56:	2100      	movs	r1, #0
    1d58:	9106      	str	r1, [sp, #24]
		conv.pad0_pre_exp = 0;
    1d5a:	9107      	str	r1, [sp, #28]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv.specifier_cat;
    1d5c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1d60:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv.length_mod;
    1d64:	f89d 2015 	ldrb.w	r2, [sp, #21]
    1d68:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		union argument_value value = (union argument_value){
    1d6c:	468c      	mov	ip, r1
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    1d6e:	2b01      	cmp	r3, #1
    1d70:	f000 80d1 	beq.w	1f16 <cbvprintf+0x55e>
			if (length_mod == LENGTH_HH) {
				value.sint = (char)value.sint;
			} else if (length_mod == LENGTH_H) {
				value.sint = (short)value.sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1d74:	2b02      	cmp	r3, #2
    1d76:	f000 810e 	beq.w	1f96 <cbvprintf+0x5de>
			if (length_mod == LENGTH_HH) {
				value.uint = (unsigned char)value.uint;
			} else if (length_mod == LENGTH_H) {
				value.uint = (unsigned short)value.uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1d7a:	2b04      	cmp	r3, #4
    1d7c:	f000 814a 	beq.w	2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>
			if (length_mod == LENGTH_UPPER_L) {
				value.ldbl = va_arg(ap, long double);
			} else {
				value.dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    1d80:	2b03      	cmp	r3, #3
    1d82:	f000 815f 	beq.w	2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv.invalid || conv.unsupported) {
    1d86:	f89d 9014 	ldrb.w	r9, [sp, #20]
    1d8a:	f019 0303 	ands.w	r3, r9, #3
    1d8e:	9302      	str	r3, [sp, #8]
    1d90:	f040 815e 	bne.w	2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv.specifier) {
    1d94:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1d98:	3b25      	subs	r3, #37	; 0x25
    1d9a:	2b53      	cmp	r3, #83	; 0x53
    1d9c:	f200 8213 	bhi.w	21c6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c6>
    1da0:	e8df f013 	tbh	[pc, r3, lsl #1]
    1da4:	02110162 	.word	0x02110162
    1da8:	02110211 	.word	0x02110211
    1dac:	02110211 	.word	0x02110211
    1db0:	02110211 	.word	0x02110211
    1db4:	02110211 	.word	0x02110211
    1db8:	02110211 	.word	0x02110211
    1dbc:	02110211 	.word	0x02110211
    1dc0:	02110211 	.word	0x02110211
    1dc4:	02110211 	.word	0x02110211
    1dc8:	02110211 	.word	0x02110211
    1dcc:	02110211 	.word	0x02110211
    1dd0:	02110211 	.word	0x02110211
    1dd4:	02110211 	.word	0x02110211
    1dd8:	02110211 	.word	0x02110211
    1ddc:	02110211 	.word	0x02110211
    1de0:	02110211 	.word	0x02110211
    1de4:	02110211 	.word	0x02110211
    1de8:	02110211 	.word	0x02110211
    1dec:	02110211 	.word	0x02110211
    1df0:	02110211 	.word	0x02110211
    1df4:	02110211 	.word	0x02110211
    1df8:	02110211 	.word	0x02110211
    1dfc:	02110211 	.word	0x02110211
    1e00:	02110211 	.word	0x02110211
    1e04:	02110211 	.word	0x02110211
    1e08:	01a10211 	.word	0x01a10211
    1e0c:	02110211 	.word	0x02110211
    1e10:	02110211 	.word	0x02110211
    1e14:	02110211 	.word	0x02110211
    1e18:	02110211 	.word	0x02110211
    1e1c:	02110211 	.word	0x02110211
    1e20:	0188017f 	.word	0x0188017f
    1e24:	02110211 	.word	0x02110211
    1e28:	02110211 	.word	0x02110211
    1e2c:	02110188 	.word	0x02110188
    1e30:	02110211 	.word	0x02110211
    1e34:	01e30211 	.word	0x01e30211
    1e38:	01c301a1 	.word	0x01c301a1
    1e3c:	02110211 	.word	0x02110211
    1e40:	02110170 	.word	0x02110170
    1e44:	021101a1 	.word	0x021101a1
    1e48:	01a10211 	.word	0x01a10211
		conv->specifier_cat = SPECIFIER_UINT;
    1e4c:	f89d 2016 	ldrb.w	r2, [sp, #22]
    1e50:	2102      	movs	r1, #2
    1e52:	f361 0202 	bfi	r2, r1, #0, #3
    1e56:	f88d 2016 	strb.w	r2, [sp, #22]
    1e5a:	e74d      	b.n	1cf8 <cbvprintf+0x340>
			conv->invalid = true;
    1e5c:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1e60:	f041 0101 	orr.w	r1, r1, #1
    1e64:	f88d 1014 	strb.w	r1, [sp, #20]
    1e68:	e74d      	b.n	1d06 <cbvprintf+0x34e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1e6a:	1e17      	subs	r7, r2, #0
    1e6c:	bf18      	it	ne
    1e6e:	2701      	movne	r7, #1
    1e70:	e74c      	b.n	1d0c <cbvprintf+0x354>
		conv->specifier_cat = SPECIFIER_FP;
    1e72:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1e76:	2204      	movs	r2, #4
    1e78:	f362 0302 	bfi	r3, r2, #0, #3
    1e7c:	f88d 3016 	strb.w	r3, [sp, #22]
			unsupported = true;
    1e80:	2701      	movs	r7, #1
			break;
    1e82:	e743      	b.n	1d0c <cbvprintf+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
    1e84:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1e88:	2203      	movs	r2, #3
    1e8a:	f362 0302 	bfi	r3, r2, #0, #3
    1e8e:	f88d 3016 	strb.w	r3, [sp, #22]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1e92:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1e96:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1e9a:	2b40      	cmp	r3, #64	; 0x40
    1e9c:	f47f af36 	bne.w	1d0c <cbvprintf+0x354>
			unsupported = true;
    1ea0:	2701      	movs	r7, #1
    1ea2:	e733      	b.n	1d0c <cbvprintf+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
    1ea4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1ea8:	2203      	movs	r2, #3
    1eaa:	f362 0302 	bfi	r3, r2, #0, #3
    1eae:	f88d 3016 	strb.w	r3, [sp, #22]
		if (conv->length_mod != LENGTH_NONE) {
    1eb2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1eb6:	f013 0f78 	tst.w	r3, #120	; 0x78
    1eba:	f43f af27 	beq.w	1d0c <cbvprintf+0x354>
			unsupported = true;
    1ebe:	2701      	movs	r7, #1
    1ec0:	e724      	b.n	1d0c <cbvprintf+0x354>
		conv->invalid = true;
    1ec2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1ec6:	f043 0301 	orr.w	r3, r3, #1
    1eca:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    1ece:	e71d      	b.n	1d0c <cbvprintf+0x354>
				conv.flag_dash = true;
    1ed0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    1ed4:	f043 0304 	orr.w	r3, r3, #4
    1ed8:	f88d 3014 	strb.w	r3, [sp, #20]
				width = -width;
    1edc:	427f      	negs	r7, r7
    1ede:	e72b      	b.n	1d38 <cbvprintf+0x380>
		} else if (conv.width_present) {
    1ee0:	f99d 3014 	ldrsb.w	r3, [sp, #20]
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	db02      	blt.n	1eee <cbvprintf+0x536>
		int width = -1;
    1ee8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1eec:	e724      	b.n	1d38 <cbvprintf+0x380>
			width = conv.width_value;
    1eee:	9f06      	ldr	r7, [sp, #24]
    1ef0:	e722      	b.n	1d38 <cbvprintf+0x380>
				conv.prec_present = false;
    1ef2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1ef6:	f36f 0341 	bfc	r3, #1, #1
    1efa:	f88d 3015 	strb.w	r3, [sp, #21]
		int precision = -1;
    1efe:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    1f02:	e728      	b.n	1d56 <cbvprintf+0x39e>
		} else if (conv.prec_present) {
    1f04:	f013 0f02 	tst.w	r3, #2
    1f08:	d002      	beq.n	1f10 <cbvprintf+0x558>
			precision = conv.prec_value;
    1f0a:	f8dd b01c 	ldr.w	fp, [sp, #28]
    1f0e:	e722      	b.n	1d56 <cbvprintf+0x39e>
		int precision = -1;
    1f10:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    1f14:	e71f      	b.n	1d56 <cbvprintf+0x39e>
			switch (length_mod) {
    1f16:	1ed3      	subs	r3, r2, #3
    1f18:	2b04      	cmp	r3, #4
    1f1a:	d804      	bhi.n	1f26 <cbvprintf+0x56e>
    1f1c:	e8df f003 	tbb	[pc, r3]
    1f20:	30251a0a 	.word	0x30251a0a
    1f24:	30          	.byte	0x30
    1f25:	00          	.byte	0x00
				value.sint = va_arg(ap, int);
    1f26:	9b03      	ldr	r3, [sp, #12]
    1f28:	1d19      	adds	r1, r3, #4
    1f2a:	9103      	str	r1, [sp, #12]
    1f2c:	681b      	ldr	r3, [r3, #0]
    1f2e:	17d9      	asrs	r1, r3, #31
    1f30:	469c      	mov	ip, r3
				break;
    1f32:	e005      	b.n	1f40 <cbvprintf+0x588>
				value.sint = va_arg(ap, long);
    1f34:	9b03      	ldr	r3, [sp, #12]
    1f36:	1d19      	adds	r1, r3, #4
    1f38:	9103      	str	r1, [sp, #12]
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	17d9      	asrs	r1, r3, #31
    1f3e:	469c      	mov	ip, r3
			if (length_mod == LENGTH_HH) {
    1f40:	2a01      	cmp	r2, #1
    1f42:	d024      	beq.n	1f8e <cbvprintf+0x5d6>
			} else if (length_mod == LENGTH_H) {
    1f44:	2a02      	cmp	r2, #2
    1f46:	f47f af1e 	bne.w	1d86 <cbvprintf+0x3ce>
				value.sint = (short)value.sint;
    1f4a:	fa0f f08c 	sxth.w	r0, ip
    1f4e:	17c1      	asrs	r1, r0, #31
    1f50:	4684      	mov	ip, r0
    1f52:	e718      	b.n	1d86 <cbvprintf+0x3ce>
					(sint_value_type)va_arg(ap, long long);
    1f54:	9b03      	ldr	r3, [sp, #12]
    1f56:	3307      	adds	r3, #7
    1f58:	f023 0307 	bic.w	r3, r3, #7
    1f5c:	f103 0108 	add.w	r1, r3, #8
    1f60:	9103      	str	r1, [sp, #12]
    1f62:	6818      	ldr	r0, [r3, #0]
    1f64:	6859      	ldr	r1, [r3, #4]
				value.sint =
    1f66:	4684      	mov	ip, r0
				break;
    1f68:	e7ea      	b.n	1f40 <cbvprintf+0x588>
					(sint_value_type)va_arg(ap, intmax_t);
    1f6a:	9b03      	ldr	r3, [sp, #12]
    1f6c:	3307      	adds	r3, #7
    1f6e:	f023 0307 	bic.w	r3, r3, #7
    1f72:	f103 0108 	add.w	r1, r3, #8
    1f76:	9103      	str	r1, [sp, #12]
    1f78:	6818      	ldr	r0, [r3, #0]
    1f7a:	6859      	ldr	r1, [r3, #4]
				value.sint =
    1f7c:	4684      	mov	ip, r0
				break;
    1f7e:	e7df      	b.n	1f40 <cbvprintf+0x588>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1f80:	9b03      	ldr	r3, [sp, #12]
    1f82:	1d19      	adds	r1, r3, #4
    1f84:	9103      	str	r1, [sp, #12]
    1f86:	681b      	ldr	r3, [r3, #0]
    1f88:	17d9      	asrs	r1, r3, #31
				value.sint =
    1f8a:	469c      	mov	ip, r3
				break;
    1f8c:	e7d8      	b.n	1f40 <cbvprintf+0x588>
				value.sint = (char)value.sint;
    1f8e:	fa5f fc8c 	uxtb.w	ip, ip
    1f92:	2100      	movs	r1, #0
    1f94:	e6f7      	b.n	1d86 <cbvprintf+0x3ce>
			switch (length_mod) {
    1f96:	1ed3      	subs	r3, r2, #3
    1f98:	2b04      	cmp	r3, #4
    1f9a:	d804      	bhi.n	1fa6 <cbvprintf+0x5ee>
    1f9c:	e8df f003 	tbb	[pc, r3]
    1fa0:	2f24190a 	.word	0x2f24190a
    1fa4:	2f          	.byte	0x2f
    1fa5:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned int);
    1fa6:	9b03      	ldr	r3, [sp, #12]
    1fa8:	1d19      	adds	r1, r3, #4
    1faa:	9103      	str	r1, [sp, #12]
    1fac:	f8d3 c000 	ldr.w	ip, [r3]
    1fb0:	2100      	movs	r1, #0
				break;
    1fb2:	e005      	b.n	1fc0 <cbvprintf+0x608>
				value.uint = va_arg(ap, unsigned long);
    1fb4:	9b03      	ldr	r3, [sp, #12]
    1fb6:	1d19      	adds	r1, r3, #4
    1fb8:	9103      	str	r1, [sp, #12]
    1fba:	f8d3 c000 	ldr.w	ip, [r3]
    1fbe:	2100      	movs	r1, #0
			if (length_mod == LENGTH_HH) {
    1fc0:	2a01      	cmp	r2, #1
    1fc2:	d023      	beq.n	200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>
			} else if (length_mod == LENGTH_H) {
    1fc4:	2a02      	cmp	r2, #2
    1fc6:	f47f aede 	bne.w	1d86 <cbvprintf+0x3ce>
				value.uint = (unsigned short)value.uint;
    1fca:	fa1f fc8c 	uxth.w	ip, ip
    1fce:	2100      	movs	r1, #0
    1fd0:	e6d9      	b.n	1d86 <cbvprintf+0x3ce>
					(uint_value_type)va_arg(ap,
    1fd2:	9b03      	ldr	r3, [sp, #12]
    1fd4:	3307      	adds	r3, #7
    1fd6:	f023 0307 	bic.w	r3, r3, #7
    1fda:	f103 0108 	add.w	r1, r3, #8
    1fde:	9103      	str	r1, [sp, #12]
    1fe0:	6818      	ldr	r0, [r3, #0]
    1fe2:	6859      	ldr	r1, [r3, #4]
				value.uint =
    1fe4:	4684      	mov	ip, r0
				break;
    1fe6:	e7eb      	b.n	1fc0 <cbvprintf+0x608>
					(uint_value_type)va_arg(ap,
    1fe8:	9b03      	ldr	r3, [sp, #12]
    1fea:	3307      	adds	r3, #7
    1fec:	f023 0307 	bic.w	r3, r3, #7
    1ff0:	f103 0108 	add.w	r1, r3, #8
    1ff4:	9103      	str	r1, [sp, #12]
    1ff6:	6818      	ldr	r0, [r3, #0]
    1ff8:	6859      	ldr	r1, [r3, #4]
				value.uint =
    1ffa:	4684      	mov	ip, r0
				break;
    1ffc:	e7e0      	b.n	1fc0 <cbvprintf+0x608>
					(uint_value_type)va_arg(ap, size_t);
    1ffe:	9b03      	ldr	r3, [sp, #12]
    2000:	1d19      	adds	r1, r3, #4
    2002:	9103      	str	r1, [sp, #12]
				value.uint =
    2004:	f8d3 c000 	ldr.w	ip, [r3]
    2008:	2100      	movs	r1, #0
				break;
    200a:	e7d9      	b.n	1fc0 <cbvprintf+0x608>
				value.uint = (unsigned char)value.uint;
    200c:	fa5f fc8c 	uxtb.w	ip, ip
    2010:	2100      	movs	r1, #0
    2012:	e6b8      	b.n	1d86 <cbvprintf+0x3ce>
			if (length_mod == LENGTH_UPPER_L) {
    2014:	2a08      	cmp	r2, #8
    2016:	d00a      	beq.n	202e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e>
				value.dbl = va_arg(ap, double);
    2018:	9b03      	ldr	r3, [sp, #12]
    201a:	3307      	adds	r3, #7
    201c:	f023 0307 	bic.w	r3, r3, #7
    2020:	f103 0208 	add.w	r2, r3, #8
    2024:	9203      	str	r2, [sp, #12]
    2026:	6818      	ldr	r0, [r3, #0]
    2028:	6859      	ldr	r1, [r3, #4]
    202a:	4684      	mov	ip, r0
    202c:	e6ab      	b.n	1d86 <cbvprintf+0x3ce>
				value.ldbl = va_arg(ap, long double);
    202e:	9b03      	ldr	r3, [sp, #12]
    2030:	3307      	adds	r3, #7
    2032:	f023 0307 	bic.w	r3, r3, #7
    2036:	f103 0208 	add.w	r2, r3, #8
    203a:	9203      	str	r2, [sp, #12]
    203c:	6818      	ldr	r0, [r3, #0]
    203e:	6859      	ldr	r1, [r3, #4]
    2040:	4684      	mov	ip, r0
    2042:	e6a0      	b.n	1d86 <cbvprintf+0x3ce>
			value.ptr = va_arg(ap, void *);
    2044:	9b03      	ldr	r3, [sp, #12]
    2046:	1d1a      	adds	r2, r3, #4
    2048:	9203      	str	r2, [sp, #12]
    204a:	f8d3 c000 	ldr.w	ip, [r3]
    204e:	e69a      	b.n	1d86 <cbvprintf+0x3ce>
			OUTS(sp, fp);
    2050:	4643      	mov	r3, r8
    2052:	4652      	mov	r2, sl
    2054:	4629      	mov	r1, r5
    2056:	4630      	mov	r0, r6
    2058:	f005 fab0 	bl	75bc <outs>
    205c:	2800      	cmp	r0, #0
    205e:	f2c0 814e 	blt.w	22fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fe>
    2062:	4404      	add	r4, r0
		fp = extract_conversion(&conv, sp);
    2064:	46c2      	mov	sl, r8
			continue;
    2066:	e4af      	b.n	19c8 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    2068:	4629      	mov	r1, r5
    206a:	2025      	movs	r0, #37	; 0x25
    206c:	47b0      	blx	r6
    206e:	2800      	cmp	r0, #0
    2070:	f2c0 8145 	blt.w	22fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fe>
    2074:	3401      	adds	r4, #1
		char sign = 0;
    2076:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    207a:	f10d 0b36 	add.w	fp, sp, #54	; 0x36
		const char *bps = NULL;
    207e:	f04f 0a00 	mov.w	sl, #0
			break;
    2082:	e0a6      	b.n	21d2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1d2>
		case 's': {
			bps = (const char *)value.ptr;
    2084:	46e2      	mov	sl, ip

			size_t len = strlen(bps);
    2086:	4660      	mov	r0, ip
    2088:	f005 fe43 	bl	7d12 <strlen>

			if ((precision >= 0)
    208c:	f1bb 0f00 	cmp.w	fp, #0
    2090:	db02      	blt.n	2098 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x98>
			    && ((size_t)precision < len)) {
    2092:	4583      	cmp	fp, r0
    2094:	d200      	bcs.n	2098 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x98>
				len = (size_t)precision;
    2096:	4658      	mov	r0, fp
			}

			bpe = bps + len;
    2098:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    209c:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    20a0:	e097      	b.n	21d2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1d2>
		}
		case 'c':
			bps = buf;
			buf[0] = value.uint;
    20a2:	f88d c020 	strb.w	ip, [sp, #32]
		char sign = 0;
    20a6:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    20aa:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
			bps = buf;
    20ae:	f10d 0a20 	add.w	sl, sp, #32
			break;
    20b2:	e08e      	b.n	21d2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1d2>
		case 'd':
		case 'i':
			if (conv.flag_plus) {
    20b4:	f019 0f08 	tst.w	r9, #8
    20b8:	d105      	bne.n	20c6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc6>
				sign = '+';
			} else if (conv.flag_space) {
    20ba:	f019 0910 	ands.w	r9, r9, #16
    20be:	d004      	beq.n	20ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xca>
				sign = ' ';
    20c0:	f04f 0920 	mov.w	r9, #32
    20c4:	e001      	b.n	20ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xca>
				sign = '+';
    20c6:	f04f 092b 	mov.w	r9, #43	; 0x2b
			}

			if (value.sint < 0) {
    20ca:	4662      	mov	r2, ip
    20cc:	2a00      	cmp	r2, #0
    20ce:	f171 0000 	sbcs.w	r0, r1, #0
    20d2:	da0a      	bge.n	20ea <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xea>
				sign = '-';
				value.uint = -value.sint;
    20d4:	f1dc 0200 	rsbs	r2, ip, #0
    20d8:	eb61 0341 	sbc.w	r3, r1, r1, lsl #1
    20dc:	4694      	mov	ip, r2
    20de:	4619      	mov	r1, r3
				sign = '-';
    20e0:	f04f 092d 	mov.w	r9, #45	; 0x2d
    20e4:	e001      	b.n	20ea <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xea>
		switch (conv.specifier) {
    20e6:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value.uint, &conv, buf, bpe);
    20ea:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    20ee:	9300      	str	r3, [sp, #0]
    20f0:	ab08      	add	r3, sp, #32
    20f2:	aa05      	add	r2, sp, #20
    20f4:	4660      	mov	r0, ip
    20f6:	f005 f9f7 	bl	74e8 <encode_uint>
    20fa:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    20fc:	f1bb 0f00 	cmp.w	fp, #0
    2100:	f2c0 8097 	blt.w	2232 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x232>
				size_t len = bpe - bps;
    2104:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2108:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv.flag_zero = false;
    210c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    2110:	f36f 1286 	bfc	r2, #6, #1
    2114:	f88d 2014 	strb.w	r2, [sp, #20]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    2118:	459b      	cmp	fp, r3
    211a:	f240 808d 	bls.w	2238 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x238>
					conv.pad0_value = precision - (int)len;
    211e:	ebab 0303 	sub.w	r3, fp, r3
    2122:	9306      	str	r3, [sp, #24]
		const char *bpe = buf + sizeof(buf);
    2124:	f10d 0b36 	add.w	fp, sp, #54	; 0x36
    2128:	e053      	b.n	21d2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1d2>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value.ptr != NULL) {
    212a:	f1bc 0f00 	cmp.w	ip, #0
    212e:	d106      	bne.n	213e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x13e>
		char sign = 0;
    2130:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    2134:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 2304 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x304>
			bps = "(nil)";
    2138:	f1ab 0a05 	sub.w	sl, fp, #5
    213c:	e049      	b.n	21d2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1d2>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
    213e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2142:	9300      	str	r3, [sp, #0]
    2144:	ab08      	add	r3, sp, #32
    2146:	aa05      	add	r2, sp, #20
    2148:	4660      	mov	r0, ip
    214a:	2100      	movs	r1, #0
    214c:	f005 f9cc 	bl	74e8 <encode_uint>
    2150:	4682      	mov	sl, r0
				conv.altform_0c = true;
    2152:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2156:	f043 0310 	orr.w	r3, r3, #16
    215a:	f88d 3016 	strb.w	r3, [sp, #22]
				conv.specifier = 'x';
    215e:	2378      	movs	r3, #120	; 0x78
    2160:	f88d 3017 	strb.w	r3, [sp, #23]
		char sign = 0;
    2164:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    2168:	e7c8      	b.n	20fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xfc>
	switch ((enum length_mod_enum)conv->length_mod) {
    216a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    216e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    2172:	2b07      	cmp	r3, #7
    2174:	d807      	bhi.n	2186 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x186>
    2176:	e8df f003 	tbb	[pc, r3]
    217a:	0d04      	.short	0x0d04
    217c:	1b161310 	.word	0x1b161310
    2180:	2320      	.short	0x2320
		*(int *)dp = count;
    2182:	f8cc 4000 	str.w	r4, [ip]
		char sign = 0;
    2186:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    218a:	f10d 0b36 	add.w	fp, sp, #54	; 0x36
		const char *bps = NULL;
    218e:	f04f 0a00 	mov.w	sl, #0
}
    2192:	e01e      	b.n	21d2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1d2>
		*(signed char *)dp = (signed char)count;
    2194:	f88c 4000 	strb.w	r4, [ip]
		break;
    2198:	e7f5      	b.n	2186 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x186>
		*(short *)dp = (short)count;
    219a:	f8ac 4000 	strh.w	r4, [ip]
		break;
    219e:	e7f2      	b.n	2186 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x186>
		*(long *)dp = (long)count;
    21a0:	f8cc 4000 	str.w	r4, [ip]
		break;
    21a4:	e7ef      	b.n	2186 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x186>
		*(long long *)dp = (long long)count;
    21a6:	4622      	mov	r2, r4
    21a8:	17e3      	asrs	r3, r4, #31
    21aa:	e9cc 2300 	strd	r2, r3, [ip]
		break;
    21ae:	e7ea      	b.n	2186 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x186>
		*(intmax_t *)dp = (intmax_t)count;
    21b0:	4622      	mov	r2, r4
    21b2:	17e3      	asrs	r3, r4, #31
    21b4:	e9cc 2300 	strd	r2, r3, [ip]
		break;
    21b8:	e7e5      	b.n	2186 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x186>
		*(size_t *)dp = (size_t)count;
    21ba:	f8cc 4000 	str.w	r4, [ip]
		break;
    21be:	e7e2      	b.n	2186 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x186>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    21c0:	f8cc 4000 	str.w	r4, [ip]
		break;
    21c4:	e7df      	b.n	2186 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x186>
		switch (conv.specifier) {
    21c6:	f8dd 9008 	ldr.w	r9, [sp, #8]
    21ca:	f10d 0b36 	add.w	fp, sp, #54	; 0x36
    21ce:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    21d2:	f1ba 0f00 	cmp.w	sl, #0
    21d6:	f000 808e 	beq.w	22f6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2f6>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    21da:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    21de:	f1b9 0f00 	cmp.w	r9, #0
    21e2:	d000      	beq.n	21e6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e6>
			nj_len += 1U;
    21e4:	3201      	adds	r2, #1
		}

		if (conv.altform_0c) {
    21e6:	f89d 1016 	ldrb.w	r1, [sp, #22]
    21ea:	f011 0f10 	tst.w	r1, #16
    21ee:	d026      	beq.n	223e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x23e>
			nj_len += 2U;
    21f0:	3202      	adds	r2, #2
		} else if (conv.altform_0) {
			nj_len += 1U;
		}

		nj_len += conv.pad0_value;
    21f2:	9b06      	ldr	r3, [sp, #24]
    21f4:	4413      	add	r3, r2
		if (conv.pad_fp) {
    21f6:	f011 0f40 	tst.w	r1, #64	; 0x40
    21fa:	d001      	beq.n	2200 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x200>
			nj_len += conv.pad0_pre_exp;
    21fc:	9a07      	ldr	r2, [sp, #28]
    21fe:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    2200:	2f00      	cmp	r7, #0
    2202:	dd32      	ble.n	226a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x26a>
			width -= (int)nj_len;
    2204:	1aff      	subs	r7, r7, r3

			if (!conv.flag_dash) {
    2206:	f89d 3014 	ldrb.w	r3, [sp, #20]
    220a:	f013 0f04 	tst.w	r3, #4
    220e:	d12c      	bne.n	226a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x26a>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv.flag_zero) {
    2210:	f013 0f40 	tst.w	r3, #64	; 0x40
    2214:	d018      	beq.n	2248 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x248>
					if (sign != 0) {
    2216:	f1b9 0f00 	cmp.w	r9, #0
    221a:	d018      	beq.n	224e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24e>
						OUTC(sign);
    221c:	4629      	mov	r1, r5
    221e:	4648      	mov	r0, r9
    2220:	47b0      	blx	r6
    2222:	2800      	cmp	r0, #0
    2224:	db6b      	blt.n	22fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fe>
    2226:	3401      	adds	r4, #1
						sign = 0;
    2228:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    222c:	2330      	movs	r3, #48	; 0x30
    222e:	9302      	str	r3, [sp, #8]
    2230:	e00f      	b.n	2252 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x252>
		const char *bpe = buf + sizeof(buf);
    2232:	f10d 0b36 	add.w	fp, sp, #54	; 0x36
    2236:	e7cc      	b.n	21d2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1d2>
    2238:	f10d 0b36 	add.w	fp, sp, #54	; 0x36
    223c:	e7c9      	b.n	21d2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1d2>
		} else if (conv.altform_0) {
    223e:	f011 0f08 	tst.w	r1, #8
    2242:	d0d6      	beq.n	21f2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f2>
			nj_len += 1U;
    2244:	3201      	adds	r2, #1
    2246:	e7d4      	b.n	21f2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f2>
				char pad = ' ';
    2248:	2320      	movs	r3, #32
    224a:	9302      	str	r3, [sp, #8]
    224c:	e001      	b.n	2252 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x252>
					pad = '0';
    224e:	2330      	movs	r3, #48	; 0x30
    2250:	9302      	str	r3, [sp, #8]
    2252:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    2254:	1e5f      	subs	r7, r3, #1
    2256:	2b00      	cmp	r3, #0
    2258:	dd07      	ble.n	226a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x26a>
					OUTC(pad);
    225a:	4629      	mov	r1, r5
    225c:	9802      	ldr	r0, [sp, #8]
    225e:	47b0      	blx	r6
    2260:	2800      	cmp	r0, #0
    2262:	db4c      	blt.n	22fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fe>
    2264:	3401      	adds	r4, #1
				while (width-- > 0) {
    2266:	463b      	mov	r3, r7
    2268:	e7f4      	b.n	2254 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x254>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    226a:	f1b9 0f00 	cmp.w	r9, #0
    226e:	d005      	beq.n	227c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x27c>
			OUTC(sign);
    2270:	4629      	mov	r1, r5
    2272:	4648      	mov	r0, r9
    2274:	47b0      	blx	r6
    2276:	2800      	cmp	r0, #0
    2278:	db41      	blt.n	22fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fe>
    227a:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv.altform_0c | conv.altform_0) {
    227c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2280:	f3c3 1200 	ubfx	r2, r3, #4, #1
    2284:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    2288:	4313      	orrs	r3, r2
    228a:	d005      	beq.n	2298 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x298>
				OUTC('0');
    228c:	4629      	mov	r1, r5
    228e:	2030      	movs	r0, #48	; 0x30
    2290:	47b0      	blx	r6
    2292:	2800      	cmp	r0, #0
    2294:	db33      	blt.n	22fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fe>
    2296:	3401      	adds	r4, #1
			}

			if (conv.altform_0c) {
    2298:	f89d 3016 	ldrb.w	r3, [sp, #22]
    229c:	f013 0f10 	tst.w	r3, #16
    22a0:	d006      	beq.n	22b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2b0>
				OUTC(conv.specifier);
    22a2:	4629      	mov	r1, r5
    22a4:	f89d 0017 	ldrb.w	r0, [sp, #23]
    22a8:	47b0      	blx	r6
    22aa:	2800      	cmp	r0, #0
    22ac:	db27      	blt.n	22fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fe>
    22ae:	3401      	adds	r4, #1
			}

			pad_len = conv.pad0_value;
    22b0:	9b06      	ldr	r3, [sp, #24]
			while (pad_len-- > 0) {
    22b2:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    22b6:	2b00      	cmp	r3, #0
    22b8:	dd07      	ble.n	22ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ca>
				OUTC('0');
    22ba:	4629      	mov	r1, r5
    22bc:	2030      	movs	r0, #48	; 0x30
    22be:	47b0      	blx	r6
    22c0:	2800      	cmp	r0, #0
    22c2:	db1c      	blt.n	22fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fe>
    22c4:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    22c6:	464b      	mov	r3, r9
    22c8:	e7f3      	b.n	22b2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2b2>
			}

			OUTS(bps, bpe);
    22ca:	465b      	mov	r3, fp
    22cc:	4652      	mov	r2, sl
    22ce:	4629      	mov	r1, r5
    22d0:	4630      	mov	r0, r6
    22d2:	f005 f973 	bl	75bc <outs>
    22d6:	2800      	cmp	r0, #0
    22d8:	db11      	blt.n	22fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fe>
    22da:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    22dc:	2f00      	cmp	r7, #0
    22de:	dd07      	ble.n	22f0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2f0>
			OUTC(' ');
    22e0:	4629      	mov	r1, r5
    22e2:	2020      	movs	r0, #32
    22e4:	47b0      	blx	r6
    22e6:	2800      	cmp	r0, #0
    22e8:	db09      	blt.n	22fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fe>
    22ea:	3401      	adds	r4, #1
			--width;
    22ec:	3f01      	subs	r7, #1
    22ee:	e7f5      	b.n	22dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2dc>
		fp = extract_conversion(&conv, sp);
    22f0:	46c2      	mov	sl, r8
    22f2:	f7ff bb69 	b.w	19c8 <cbvprintf+0x10>
    22f6:	46c2      	mov	sl, r8
    22f8:	f7ff bb66 	b.w	19c8 <cbvprintf+0x10>
		}
	}

	return count;
    22fc:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    22fe:	b00f      	add	sp, #60	; 0x3c
    2300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2304:	0000a629 	.word	0x0000a629

00002308 <nordicsemi_nrf91_init>:
    2308:	f04f 0220 	mov.w	r2, #32
    230c:	f3ef 8311 	mrs	r3, BASEPRI
    2310:	f382 8811 	msr	BASEPRI, r2
    2314:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2318:	4a04      	ldr	r2, [pc, #16]	; (232c <nordicsemi_nrf91_init+0x24>)
    231a:	2101      	movs	r1, #1
    231c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    2320:	f383 8811 	msr	BASEPRI, r3
    2324:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2328:	2000      	movs	r0, #0
    232a:	4770      	bx	lr
    232c:	50039000 	.word	0x50039000

00002330 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2330:	b130      	cbz	r0, 2340 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    2332:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2334:	0180      	lsls	r0, r0, #6
    2336:	4b03      	ldr	r3, [pc, #12]	; (2344 <arch_busy_wait+0x14>)
    2338:	f043 0301 	orr.w	r3, r3, #1
    233c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    233e:	bd08      	pop	{r3, pc}
    2340:	4770      	bx	lr
    2342:	bf00      	nop
    2344:	0000a0f0 	.word	0x0000a0f0

00002348 <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
    2348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    234c:	b085      	sub	sp, #20
    234e:	4680      	mov	r8, r0
    2350:	460f      	mov	r7, r1
    2352:	4615      	mov	r5, r2
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
    2354:	4b12      	ldr	r3, [pc, #72]	; (23a0 <log_generic+0x58>)
    2356:	681b      	ldr	r3, [r3, #0]
    2358:	4798      	blx	r3
    235a:	4606      	mov	r6, r0

		for (int i = 0; i < log_backend_count_get(); i++) {
    235c:	2400      	movs	r4, #0
    235e:	e000      	b.n	2362 <log_generic+0x1a>
    2360:	3401      	adds	r4, #1
    2362:	4b10      	ldr	r3, [pc, #64]	; (23a4 <log_generic+0x5c>)
    2364:	4a10      	ldr	r2, [pc, #64]	; (23a8 <log_generic+0x60>)
    2366:	1a9b      	subs	r3, r3, r2
    2368:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    236c:	da15      	bge.n	239a <log_generic+0x52>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    236e:	480e      	ldr	r0, [pc, #56]	; (23a8 <log_generic+0x60>)
    2370:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2374:	6843      	ldr	r3, [r0, #4]
    2376:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);

			if (log_backend_is_active(backend)) {
    2378:	2b00      	cmp	r3, #0
    237a:	d0f1      	beq.n	2360 <log_generic+0x18>
				va_list ap_tmp;

				va_copy(ap_tmp, ap);
    237c:	9503      	str	r5, [sp, #12]
	if (backend->api->put_sync_string) {
    237e:	0123      	lsls	r3, r4, #4
    2380:	4a09      	ldr	r2, [pc, #36]	; (23a8 <log_generic+0x60>)
    2382:	58d3      	ldr	r3, [r2, r3]
    2384:	f8d3 9004 	ldr.w	r9, [r3, #4]
    2388:	f1b9 0f00 	cmp.w	r9, #0
    238c:	d0e8      	beq.n	2360 <log_generic+0x18>
		backend->api->put_sync_string(backend, src_level,
    238e:	9500      	str	r5, [sp, #0]
    2390:	463b      	mov	r3, r7
    2392:	4632      	mov	r2, r6
    2394:	4641      	mov	r1, r8
    2396:	47c8      	blx	r9
				log_backend_put_sync_string(backend, src_level,
						     timestamp, fmt, ap_tmp);
				va_end(ap_tmp);
    2398:	e7e2      	b.n	2360 <log_generic+0x18>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
    239a:	b005      	add	sp, #20
    239c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    23a0:	2002000c 	.word	0x2002000c
    23a4:	0000a0d4 	.word	0x0000a0d4
    23a8:	0000a0c4 	.word	0x0000a0c4

000023ac <log_core_init>:
	 */
	return k_cycle_get_32();
}

void log_core_init(void)
{
    23ac:	b508      	push	{r3, lr}
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
    23ae:	4b04      	ldr	r3, [pc, #16]	; (23c0 <log_core_init+0x14>)
    23b0:	4a04      	ldr	r2, [pc, #16]	; (23c4 <log_core_init+0x18>)
    23b2:	601a      	str	r2, [r3, #0]
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
    23b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    23b8:	f000 fa08 	bl	27cc <log_output_timestamp_freq_set>
			LOG_FILTER_SLOT_SET(filters,
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
    23bc:	bd08      	pop	{r3, pc}
    23be:	bf00      	nop
    23c0:	2002000c 	.word	0x2002000c
    23c4:	000075ff 	.word	0x000075ff

000023c8 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    23c8:	4b05      	ldr	r3, [pc, #20]	; (23e0 <log_source_name_get+0x18>)
    23ca:	4a06      	ldr	r2, [pc, #24]	; (23e4 <log_source_name_get+0x1c>)
    23cc:	1a9b      	subs	r3, r3, r2
    23ce:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    23d2:	d202      	bcs.n	23da <log_source_name_get+0x12>
 * @param source_id Source ID.
 * @return Name.
 */
static inline const char *log_name_get(uint32_t source_id)
{
	return __log_const_start[source_id].name;
    23d4:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    23d8:	4770      	bx	lr
    23da:	2000      	movs	r0, #0
}
    23dc:	4770      	bx	lr
    23de:	bf00      	nop
    23e0:	0000a0c4 	.word	0x0000a0c4
    23e4:	0000a08c 	.word	0x0000a08c

000023e8 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    23e8:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    23ea:	4b0b      	ldr	r3, [pc, #44]	; (2418 <log_backend_enable+0x30>)
    23ec:	1ac3      	subs	r3, r0, r3
    23ee:	111b      	asrs	r3, r3, #4
    23f0:	3301      	adds	r3, #1
	backend->cb->id = id;
    23f2:	6842      	ldr	r2, [r0, #4]
    23f4:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    23f6:	6843      	ldr	r3, [r0, #4]
    23f8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    23fa:	6843      	ldr	r3, [r0, #4]
    23fc:	2201      	movs	r2, #1
    23fe:	715a      	strb	r2, [r3, #5]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
    2400:	4b06      	ldr	r3, [pc, #24]	; (241c <log_backend_enable+0x34>)
    2402:	781b      	ldrb	r3, [r3, #0]
    2404:	b11b      	cbz	r3, 240e <log_backend_enable+0x26>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    2406:	4b05      	ldr	r3, [pc, #20]	; (241c <log_backend_enable+0x34>)
    2408:	2201      	movs	r2, #1
    240a:	701a      	strb	r2, [r3, #0]
}
    240c:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    240e:	4804      	ldr	r0, [pc, #16]	; (2420 <log_backend_enable+0x38>)
    2410:	f003 fda0 	bl	5f54 <z_impl_k_sem_give>
}
    2414:	e7f7      	b.n	2406 <log_backend_enable+0x1e>
    2416:	bf00      	nop
    2418:	0000a0c4 	.word	0x0000a0c4
    241c:	20023288 	.word	0x20023288
    2420:	2002018c 	.word	0x2002018c

00002424 <log_init>:
{
    2424:	b538      	push	{r3, r4, r5, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2426:	4b13      	ldr	r3, [pc, #76]	; (2474 <log_init+0x50>)
    2428:	e8d3 2fef 	ldaex	r2, [r3]
    242c:	1c51      	adds	r1, r2, #1
    242e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    2432:	2800      	cmp	r0, #0
    2434:	d1f8      	bne.n	2428 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    2436:	b9da      	cbnz	r2, 2470 <log_init+0x4c>
	for (i = 0; i < log_backend_count_get(); i++) {
    2438:	2400      	movs	r4, #0
    243a:	e005      	b.n	2448 <log_init+0x24>
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    243c:	2204      	movs	r2, #4
    243e:	2100      	movs	r1, #0
    2440:	4628      	mov	r0, r5
    2442:	f7ff ffd1 	bl	23e8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2446:	3401      	adds	r4, #1
    2448:	4b0b      	ldr	r3, [pc, #44]	; (2478 <log_init+0x54>)
    244a:	4a0c      	ldr	r2, [pc, #48]	; (247c <log_init+0x58>)
    244c:	1a9b      	subs	r3, r3, r2
    244e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    2452:	da0d      	bge.n	2470 <log_init+0x4c>
	return &__log_backends_start[idx];
    2454:	4d09      	ldr	r5, [pc, #36]	; (247c <log_init+0x58>)
    2456:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    245a:	7b2b      	ldrb	r3, [r5, #12]
    245c:	2b00      	cmp	r3, #0
    245e:	d0f2      	beq.n	2446 <log_init+0x22>
			if (backend->api->init != NULL) {
    2460:	0123      	lsls	r3, r4, #4
    2462:	4a06      	ldr	r2, [pc, #24]	; (247c <log_init+0x58>)
    2464:	58d3      	ldr	r3, [r2, r3]
    2466:	695b      	ldr	r3, [r3, #20]
    2468:	2b00      	cmp	r3, #0
    246a:	d0e7      	beq.n	243c <log_init+0x18>
				backend->api->init();
    246c:	4798      	blx	r3
    246e:	e7e5      	b.n	243c <log_init+0x18>
}
    2470:	bd38      	pop	{r3, r4, r5, pc}
    2472:	bf00      	nop
    2474:	20022794 	.word	0x20022794
    2478:	0000a0d4 	.word	0x0000a0d4
    247c:	0000a0c4 	.word	0x0000a0c4

00002480 <z_impl_log_panic>:
	if (panic_mode) {
    2480:	4b10      	ldr	r3, [pc, #64]	; (24c4 <z_impl_log_panic+0x44>)
    2482:	781b      	ldrb	r3, [r3, #0]
    2484:	b103      	cbz	r3, 2488 <z_impl_log_panic+0x8>
    2486:	4770      	bx	lr
{
    2488:	b510      	push	{r4, lr}
	log_init();
    248a:	f7ff ffcb 	bl	2424 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    248e:	2400      	movs	r4, #0
    2490:	e000      	b.n	2494 <z_impl_log_panic+0x14>
    2492:	3401      	adds	r4, #1
    2494:	4b0c      	ldr	r3, [pc, #48]	; (24c8 <z_impl_log_panic+0x48>)
    2496:	4a0d      	ldr	r2, [pc, #52]	; (24cc <z_impl_log_panic+0x4c>)
    2498:	1a9b      	subs	r3, r3, r2
    249a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    249e:	da0c      	bge.n	24ba <z_impl_log_panic+0x3a>
    24a0:	480a      	ldr	r0, [pc, #40]	; (24cc <z_impl_log_panic+0x4c>)
    24a2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    24a6:	6843      	ldr	r3, [r0, #4]
    24a8:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    24aa:	2b00      	cmp	r3, #0
    24ac:	d0f1      	beq.n	2492 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    24ae:	0123      	lsls	r3, r4, #4
    24b0:	4a06      	ldr	r2, [pc, #24]	; (24cc <z_impl_log_panic+0x4c>)
    24b2:	58d3      	ldr	r3, [r2, r3]
    24b4:	691b      	ldr	r3, [r3, #16]
    24b6:	4798      	blx	r3
}
    24b8:	e7eb      	b.n	2492 <z_impl_log_panic+0x12>
	panic_mode = true;
    24ba:	4b02      	ldr	r3, [pc, #8]	; (24c4 <z_impl_log_panic+0x44>)
    24bc:	2201      	movs	r2, #1
    24be:	701a      	strb	r2, [r3, #0]
}
    24c0:	bd10      	pop	{r4, pc}
    24c2:	bf00      	nop
    24c4:	20023289 	.word	0x20023289
    24c8:	0000a0d4 	.word	0x0000a0d4
    24cc:	0000a0c4 	.word	0x0000a0c4

000024d0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    24d0:	b40e      	push	{r1, r2, r3}
    24d2:	b500      	push	{lr}
    24d4:	b082      	sub	sp, #8
    24d6:	4601      	mov	r1, r0
    24d8:	ab03      	add	r3, sp, #12
    24da:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    24de:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    24e0:	4803      	ldr	r0, [pc, #12]	; (24f0 <print_formatted+0x20>)
    24e2:	f7ff fa69 	bl	19b8 <cbvprintf>
	va_end(args);

	return length;
}
    24e6:	b002      	add	sp, #8
    24e8:	f85d eb04 	ldr.w	lr, [sp], #4
    24ec:	b003      	add	sp, #12
    24ee:	4770      	bx	lr
    24f0:	0000763f 	.word	0x0000763f

000024f4 <timestamp_print>:
	log_output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *log_output,
			   uint32_t flags, uint32_t timestamp)
{
    24f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24f6:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    24f8:	f011 0f44 	tst.w	r1, #68	; 0x44
    24fc:	d005      	beq.n	250a <timestamp_print+0x16>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    24fe:	4b1a      	ldr	r3, [pc, #104]	; (2568 <timestamp_print+0x74>)
    2500:	681c      	ldr	r4, [r3, #0]
    2502:	b934      	cbnz	r4, 2512 <timestamp_print+0x1e>
			length = print_formatted(log_output,
						 "[%02d:%02d:%02d.%03d,%03d] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    2504:	2000      	movs	r0, #0
	}

	return length;
}
    2506:	b005      	add	sp, #20
    2508:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    250a:	4918      	ldr	r1, [pc, #96]	; (256c <timestamp_print+0x78>)
    250c:	f7ff ffe0 	bl	24d0 <print_formatted>
    2510:	e7f9      	b.n	2506 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    2512:	4b17      	ldr	r3, [pc, #92]	; (2570 <timestamp_print+0x7c>)
    2514:	6819      	ldr	r1, [r3, #0]
    2516:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    251a:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    251e:	4a15      	ldr	r2, [pc, #84]	; (2574 <timestamp_print+0x80>)
    2520:	fba2 3205 	umull	r3, r2, r2, r5
    2524:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    2526:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    252a:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    252e:	4b12      	ldr	r3, [pc, #72]	; (2578 <timestamp_print+0x84>)
    2530:	fba3 7306 	umull	r7, r3, r3, r6
    2534:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    2536:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    253a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    253e:	fb05 f101 	mul.w	r1, r5, r1
    2542:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2546:	fb07 1114 	mls	r1, r7, r4, r1
    254a:	fb05 f101 	mul.w	r1, r5, r1
    254e:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(log_output,
    2552:	9402      	str	r4, [sp, #8]
    2554:	9701      	str	r7, [sp, #4]
    2556:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    255a:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    255e:	9100      	str	r1, [sp, #0]
    2560:	4906      	ldr	r1, [pc, #24]	; (257c <timestamp_print+0x88>)
    2562:	f7ff ffb5 	bl	24d0 <print_formatted>
    2566:	e7ce      	b.n	2506 <timestamp_print+0x12>
    2568:	20022798 	.word	0x20022798
    256c:	0000a630 	.word	0x0000a630
    2570:	2002279c 	.word	0x2002279c
    2574:	91a2b3c5 	.word	0x91a2b3c5
    2578:	88888889 	.word	0x88888889
    257c:	0000a63c 	.word	0x0000a63c

00002580 <color_print>:

static void color_print(const struct log_output *log_output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    2580:	b161      	cbz	r1, 259c <color_print+0x1c>
{
    2582:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    2584:	b12a      	cbz	r2, 2592 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    2586:	4a06      	ldr	r2, [pc, #24]	; (25a0 <color_print+0x20>)
    2588:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    258c:	b912      	cbnz	r2, 2594 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    258e:	4a05      	ldr	r2, [pc, #20]	; (25a4 <color_print+0x24>)
    2590:	e000      	b.n	2594 <color_print+0x14>
    2592:	4a04      	ldr	r2, [pc, #16]	; (25a4 <color_print+0x24>)
		print_formatted(log_output, "%s", log_color);
    2594:	4904      	ldr	r1, [pc, #16]	; (25a8 <color_print+0x28>)
    2596:	f7ff ff9b 	bl	24d0 <print_formatted>
	}
}
    259a:	bd08      	pop	{r3, pc}
    259c:	4770      	bx	lr
    259e:	bf00      	nop
    25a0:	0000a6b0 	.word	0x0000a6b0
    25a4:	0000a658 	.word	0x0000a658
    25a8:	0000a660 	.word	0x0000a660

000025ac <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    25ac:	f011 0f10 	tst.w	r1, #16
    25b0:	d10b      	bne.n	25ca <newline_print+0x1e>
{
    25b2:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    25b4:	f011 0f20 	tst.w	r1, #32
    25b8:	d003      	beq.n	25c2 <newline_print+0x16>
		print_formatted(ctx, "\n");
    25ba:	4904      	ldr	r1, [pc, #16]	; (25cc <newline_print+0x20>)
    25bc:	f7ff ff88 	bl	24d0 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    25c0:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    25c2:	4903      	ldr	r1, [pc, #12]	; (25d0 <newline_print+0x24>)
    25c4:	f7ff ff84 	bl	24d0 <print_formatted>
    25c8:	e7fa      	b.n	25c0 <newline_print+0x14>
    25ca:	4770      	bx	lr
    25cc:	0000a8c4 	.word	0x0000a8c4
    25d0:	0000ac34 	.word	0x0000ac34

000025d4 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    25d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25d8:	4605      	mov	r5, r0
    25da:	460f      	mov	r7, r1
    25dc:	4616      	mov	r6, r2
    25de:	4698      	mov	r8, r3
	newline_print(log_output, flags);
    25e0:	9906      	ldr	r1, [sp, #24]
    25e2:	f7ff ffe3 	bl	25ac <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    25e6:	2400      	movs	r4, #0
    25e8:	4544      	cmp	r4, r8
    25ea:	da05      	bge.n	25f8 <hexdump_line_print+0x24>
		print_formatted(log_output, " ");
    25ec:	4923      	ldr	r1, [pc, #140]	; (267c <hexdump_line_print+0xa8>)
    25ee:	4628      	mov	r0, r5
    25f0:	f7ff ff6e 	bl	24d0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    25f4:	3401      	adds	r4, #1
    25f6:	e7f7      	b.n	25e8 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    25f8:	2400      	movs	r4, #0
    25fa:	e009      	b.n	2610 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    25fc:	491f      	ldr	r1, [pc, #124]	; (267c <hexdump_line_print+0xa8>)
    25fe:	4628      	mov	r0, r5
    2600:	f7ff ff66 	bl	24d0 <print_formatted>
    2604:	e00b      	b.n	261e <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    2606:	491e      	ldr	r1, [pc, #120]	; (2680 <hexdump_line_print+0xac>)
    2608:	4628      	mov	r0, r5
    260a:	f7ff ff61 	bl	24d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    260e:	3401      	adds	r4, #1
    2610:	2c0f      	cmp	r4, #15
    2612:	dc0c      	bgt.n	262e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    2614:	2c00      	cmp	r4, #0
    2616:	dd02      	ble.n	261e <hexdump_line_print+0x4a>
    2618:	f014 0f07 	tst.w	r4, #7
    261c:	d0ee      	beq.n	25fc <hexdump_line_print+0x28>
		if (i < length) {
    261e:	42b4      	cmp	r4, r6
    2620:	d2f1      	bcs.n	2606 <hexdump_line_print+0x32>
			print_formatted(log_output, "%02x ", data[i]);
    2622:	5d3a      	ldrb	r2, [r7, r4]
    2624:	4917      	ldr	r1, [pc, #92]	; (2684 <hexdump_line_print+0xb0>)
    2626:	4628      	mov	r0, r5
    2628:	f7ff ff52 	bl	24d0 <print_formatted>
    262c:	e7ef      	b.n	260e <hexdump_line_print+0x3a>
		}
	}

	print_formatted(log_output, "|");
    262e:	4916      	ldr	r1, [pc, #88]	; (2688 <hexdump_line_print+0xb4>)
    2630:	4628      	mov	r0, r5
    2632:	f7ff ff4d 	bl	24d0 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2636:	2400      	movs	r4, #0
    2638:	e009      	b.n	264e <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    263a:	4910      	ldr	r1, [pc, #64]	; (267c <hexdump_line_print+0xa8>)
    263c:	4628      	mov	r0, r5
    263e:	f7ff ff47 	bl	24d0 <print_formatted>
    2642:	e00b      	b.n	265c <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(log_output, "%c",
    2644:	4911      	ldr	r1, [pc, #68]	; (268c <hexdump_line_print+0xb8>)
    2646:	4628      	mov	r0, r5
    2648:	f7ff ff42 	bl	24d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    264c:	3401      	adds	r4, #1
    264e:	2c0f      	cmp	r4, #15
    2650:	dc12      	bgt.n	2678 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    2652:	2c00      	cmp	r4, #0
    2654:	dd02      	ble.n	265c <hexdump_line_print+0x88>
    2656:	f014 0f07 	tst.w	r4, #7
    265a:	d0ee      	beq.n	263a <hexdump_line_print+0x66>
		if (i < length) {
    265c:	42b4      	cmp	r4, r6
    265e:	d206      	bcs.n	266e <hexdump_line_print+0x9a>
			char c = (char)data[i];
    2660:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    2662:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    2666:	2b5e      	cmp	r3, #94	; 0x5e
    2668:	d9ec      	bls.n	2644 <hexdump_line_print+0x70>
    266a:	222e      	movs	r2, #46	; 0x2e
    266c:	e7ea      	b.n	2644 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    266e:	4903      	ldr	r1, [pc, #12]	; (267c <hexdump_line_print+0xa8>)
    2670:	4628      	mov	r0, r5
    2672:	f7ff ff2d 	bl	24d0 <print_formatted>
    2676:	e7e9      	b.n	264c <hexdump_line_print+0x78>
		}
	}
}
    2678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    267c:	0000a688 	.word	0x0000a688
    2680:	0000a66c 	.word	0x0000a66c
    2684:	0000a664 	.word	0x0000a664
    2688:	0000a670 	.word	0x0000a670
    268c:	0000a674 	.word	0x0000a674

00002690 <ids_print>:
{
    2690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2692:	4604      	mov	r4, r0
    2694:	4616      	mov	r6, r2
    2696:	461d      	mov	r5, r3
	if (level_on) {
    2698:	b949      	cbnz	r1, 26ae <ids_print+0x1e>
	int total = 0;
    269a:	2700      	movs	r7, #0
	total += print_formatted(log_output,
    269c:	b186      	cbz	r6, 26c0 <ids_print+0x30>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    269e:	2301      	movs	r3, #1
    26a0:	9a07      	ldr	r2, [sp, #28]
    26a2:	4093      	lsls	r3, r2
				(func_on &&
    26a4:	f013 0f10 	tst.w	r3, #16
    26a8:	d116      	bne.n	26d8 <ids_print+0x48>
	total += print_formatted(log_output,
    26aa:	4e0c      	ldr	r6, [pc, #48]	; (26dc <ids_print+0x4c>)
    26ac:	e009      	b.n	26c2 <ids_print+0x32>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    26ae:	4b0c      	ldr	r3, [pc, #48]	; (26e0 <ids_print+0x50>)
    26b0:	9a07      	ldr	r2, [sp, #28]
    26b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    26b6:	490b      	ldr	r1, [pc, #44]	; (26e4 <ids_print+0x54>)
    26b8:	f7ff ff0a 	bl	24d0 <print_formatted>
    26bc:	4607      	mov	r7, r0
    26be:	e7ed      	b.n	269c <ids_print+0xc>
	total += print_formatted(log_output,
    26c0:	4e06      	ldr	r6, [pc, #24]	; (26dc <ids_print+0x4c>)
    26c2:	9906      	ldr	r1, [sp, #24]
    26c4:	4628      	mov	r0, r5
    26c6:	f7ff fe7f 	bl	23c8 <log_source_name_get>
    26ca:	4602      	mov	r2, r0
    26cc:	4631      	mov	r1, r6
    26ce:	4620      	mov	r0, r4
    26d0:	f7ff fefe 	bl	24d0 <print_formatted>
}
    26d4:	4438      	add	r0, r7
    26d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	total += print_formatted(log_output,
    26d8:	4e03      	ldr	r6, [pc, #12]	; (26e8 <ids_print+0x58>)
    26da:	e7f2      	b.n	26c2 <ids_print+0x32>
    26dc:	0000a678 	.word	0x0000a678
    26e0:	0000a6c4 	.word	0x0000a6c4
    26e4:	0000a684 	.word	0x0000a684
    26e8:	0000a680 	.word	0x0000a680

000026ec <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
    26ec:	b570      	push	{r4, r5, r6, lr}
    26ee:	b084      	sub	sp, #16
    26f0:	4605      	mov	r5, r0
    26f2:	461e      	mov	r6, r3
	int length;
	uint8_t level = (uint8_t)src_level.level;
	uint8_t domain_id = (uint8_t)src_level.domain_id;
    26f4:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	uint16_t source_id = (uint16_t)src_level.source_id;
    26f8:	f3c1 1089 	ubfx	r0, r1, #6, #10
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
    26fc:	f011 0407 	ands.w	r4, r1, #7
    2700:	d10f      	bne.n	2722 <log_output_string+0x36>
		prefix_print(log_output, flags, true, timestamp,
				level, domain_id, source_id);
	}

	length = cbvprintf(out_func, (void *)log_output, fmt, ap);
    2702:	9b08      	ldr	r3, [sp, #32]
    2704:	4632      	mov	r2, r6
    2706:	4629      	mov	r1, r5
    2708:	4810      	ldr	r0, [pc, #64]	; (274c <log_output_string+0x60>)
    270a:	f7ff f955 	bl	19b8 <cbvprintf>

	(void)length;

	if (raw_string) {
    270e:	b994      	cbnz	r4, 2736 <log_output_string+0x4a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
    2710:	4630      	mov	r0, r6
    2712:	f004 ffae 	bl	7672 <ends_with_newline>
    2716:	b198      	cbz	r0, 2740 <log_output_string+0x54>
			print_formatted(log_output, "\r");
    2718:	490d      	ldr	r1, [pc, #52]	; (2750 <log_output_string+0x64>)
    271a:	4628      	mov	r0, r5
    271c:	f7ff fed8 	bl	24d0 <print_formatted>
    2720:	e00e      	b.n	2740 <log_output_string+0x54>
		prefix_print(log_output, flags, true, timestamp,
    2722:	9002      	str	r0, [sp, #8]
    2724:	9301      	str	r3, [sp, #4]
    2726:	9400      	str	r4, [sp, #0]
    2728:	4613      	mov	r3, r2
    272a:	2201      	movs	r2, #1
    272c:	9909      	ldr	r1, [sp, #36]	; 0x24
    272e:	4628      	mov	r0, r5
    2730:	f004 ffc2 	bl	76b8 <prefix_print>
    2734:	e7e5      	b.n	2702 <log_output_string+0x16>
		}
	} else {
		postfix_print(log_output, flags, level);
    2736:	4622      	mov	r2, r4
    2738:	9909      	ldr	r1, [sp, #36]	; 0x24
    273a:	4628      	mov	r0, r5
    273c:	f004 ffb0 	bl	76a0 <postfix_print>
	}

	log_output_flush(log_output);
    2740:	4628      	mov	r0, r5
    2742:	f004 ffe0 	bl	7706 <log_output_flush>
}
    2746:	b004      	add	sp, #16
    2748:	bd70      	pop	{r4, r5, r6, pc}
    274a:	bf00      	nop
    274c:	0000763f 	.word	0x0000763f
    2750:	0000a68c 	.word	0x0000a68c

00002754 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
    2754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2758:	b084      	sub	sp, #16
    275a:	4607      	mov	r7, r0
    275c:	461d      	mov	r5, r3
    275e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    2760:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    2762:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	uint32_t prefix_offset;
	uint8_t level = (uint8_t)src_level.level;
    2766:	f001 0a07 	and.w	sl, r1, #7
	uint8_t domain_id = (uint8_t)src_level.domain_id;
    276a:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	uint16_t source_id = (uint16_t)src_level.source_id;
    276e:	f3c1 1189 	ubfx	r1, r1, #6, #10
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    2772:	9102      	str	r1, [sp, #8]
    2774:	9301      	str	r3, [sp, #4]
    2776:	f8cd a000 	str.w	sl, [sp]
    277a:	4613      	mov	r3, r2
    277c:	2201      	movs	r2, #1
    277e:	4641      	mov	r1, r8
    2780:	f004 ff9a 	bl	76b8 <prefix_print>
    2784:	4681      	mov	r9, r0
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
    2786:	462a      	mov	r2, r5
    2788:	490f      	ldr	r1, [pc, #60]	; (27c8 <log_output_hexdump+0x74>)
    278a:	4638      	mov	r0, r7
    278c:	f7ff fea0 	bl	24d0 <print_formatted>

	while (length) {
    2790:	b174      	cbz	r4, 27b0 <log_output_hexdump+0x5c>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
    2792:	4625      	mov	r5, r4
    2794:	2c10      	cmp	r4, #16
    2796:	bf28      	it	cs
    2798:	2510      	movcs	r5, #16
				HEXDUMP_BYTES_IN_LINE : length;

		hexdump_line_print(log_output, data, part_len,
    279a:	f8cd 8000 	str.w	r8, [sp]
    279e:	464b      	mov	r3, r9
    27a0:	462a      	mov	r2, r5
    27a2:	4631      	mov	r1, r6
    27a4:	4638      	mov	r0, r7
    27a6:	f7ff ff15 	bl	25d4 <hexdump_line_print>
				   prefix_offset, flags);

		data += part_len;
    27aa:	442e      	add	r6, r5
		length -= part_len;
    27ac:	1b64      	subs	r4, r4, r5
    27ae:	e7ef      	b.n	2790 <log_output_hexdump+0x3c>
	};

	postfix_print(log_output, flags, level);
    27b0:	4652      	mov	r2, sl
    27b2:	4641      	mov	r1, r8
    27b4:	4638      	mov	r0, r7
    27b6:	f004 ff73 	bl	76a0 <postfix_print>
	log_output_flush(log_output);
    27ba:	4638      	mov	r0, r7
    27bc:	f004 ffa3 	bl	7706 <log_output_flush>
}
    27c0:	b004      	add	sp, #16
    27c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    27c6:	bf00      	nop
    27c8:	0000a660 	.word	0x0000a660

000027cc <log_output_timestamp_freq_set>:
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    27cc:	4b07      	ldr	r3, [pc, #28]	; (27ec <log_output_timestamp_freq_set+0x20>)
    27ce:	2201      	movs	r2, #1
    27d0:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    27d2:	4b07      	ldr	r3, [pc, #28]	; (27f0 <log_output_timestamp_freq_set+0x24>)
    27d4:	4298      	cmp	r0, r3
    27d6:	d905      	bls.n	27e4 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    27d8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    27da:	4a04      	ldr	r2, [pc, #16]	; (27ec <log_output_timestamp_freq_set+0x20>)
    27dc:	6813      	ldr	r3, [r2, #0]
    27de:	005b      	lsls	r3, r3, #1
    27e0:	6013      	str	r3, [r2, #0]
    27e2:	e7f6      	b.n	27d2 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    27e4:	4b03      	ldr	r3, [pc, #12]	; (27f4 <log_output_timestamp_freq_set+0x28>)
    27e6:	6018      	str	r0, [r3, #0]
}
    27e8:	4770      	bx	lr
    27ea:	bf00      	nop
    27ec:	2002279c 	.word	0x2002279c
    27f0:	000f4240 	.word	0x000f4240
    27f4:	20022798 	.word	0x20022798

000027f8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    27f8:	4b01      	ldr	r3, [pc, #4]	; (2800 <CONFIG_MAIN_STACK_SIZE>)
    27fa:	2201      	movs	r2, #1
    27fc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    27fe:	4770      	bx	lr
    2800:	2002328a 	.word	0x2002328a

00002804 <on_failed_write>:
{
    2804:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    2806:	b918      	cbnz	r0, 2810 <on_failed_write+0xc>
		host_present = false;
    2808:	4b04      	ldr	r3, [pc, #16]	; (281c <on_failed_write+0x18>)
    280a:	2200      	movs	r2, #0
    280c:	701a      	strb	r2, [r3, #0]
}
    280e:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    2810:	f241 3088 	movw	r0, #5000	; 0x1388
    2814:	f007 fa92 	bl	9d3c <z_impl_k_busy_wait>
    2818:	e7f9      	b.n	280e <on_failed_write+0xa>
    281a:	bf00      	nop
    281c:	2002328a 	.word	0x2002328a

00002820 <on_write>:
{
    2820:	b538      	push	{r3, r4, r5, lr}
    2822:	4604      	mov	r4, r0
	host_present = true;
    2824:	4b0a      	ldr	r3, [pc, #40]	; (2850 <on_write+0x30>)
    2826:	2201      	movs	r2, #1
    2828:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    282a:	4b0a      	ldr	r3, [pc, #40]	; (2854 <on_write+0x34>)
    282c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    282e:	b903      	cbnz	r3, 2832 <on_write+0x12>
}
    2830:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2832:	2000      	movs	r0, #0
    2834:	f000 fc92 	bl	315c <SEGGER_RTT_HasDataUp>
    2838:	2800      	cmp	r0, #0
    283a:	d0f9      	beq.n	2830 <on_write+0x10>
    283c:	4b04      	ldr	r3, [pc, #16]	; (2850 <on_write+0x30>)
    283e:	781b      	ldrb	r3, [r3, #0]
    2840:	2b00      	cmp	r3, #0
    2842:	d0f5      	beq.n	2830 <on_write+0x10>
			on_failed_write(retry_cnt--);
    2844:	1e65      	subs	r5, r4, #1
    2846:	4620      	mov	r0, r4
    2848:	f7ff ffdc 	bl	2804 <on_failed_write>
    284c:	462c      	mov	r4, r5
    284e:	e7f0      	b.n	2832 <on_write+0x12>
    2850:	2002328a 	.word	0x2002328a
    2854:	2002328b 	.word	0x2002328b

00002858 <data_out_block_mode>:
{
    2858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    285a:	4606      	mov	r6, r0
    285c:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    285e:	2704      	movs	r7, #4
    2860:	e006      	b.n	2870 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    2862:	4638      	mov	r0, r7
    2864:	f7ff ffdc 	bl	2820 <on_write>
	} while ((ret == 0) && host_present);
    2868:	b99c      	cbnz	r4, 2892 <data_out_block_mode+0x3a>
    286a:	4b0d      	ldr	r3, [pc, #52]	; (28a0 <data_out_block_mode+0x48>)
    286c:	781b      	ldrb	r3, [r3, #0]
    286e:	b183      	cbz	r3, 2892 <data_out_block_mode+0x3a>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2870:	462a      	mov	r2, r5
    2872:	4631      	mov	r1, r6
    2874:	2000      	movs	r0, #0
    2876:	f000 fbd7 	bl	3028 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    287a:	4604      	mov	r4, r0
    287c:	2800      	cmp	r0, #0
    287e:	d1f0      	bne.n	2862 <data_out_block_mode+0xa>
		} else if (host_present) {
    2880:	4b07      	ldr	r3, [pc, #28]	; (28a0 <data_out_block_mode+0x48>)
    2882:	781b      	ldrb	r3, [r3, #0]
    2884:	2b00      	cmp	r3, #0
    2886:	d0ef      	beq.n	2868 <data_out_block_mode+0x10>
			retry_cnt--;
    2888:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    288a:	4638      	mov	r0, r7
    288c:	f7ff ffba 	bl	2804 <on_failed_write>
    2890:	e7ea      	b.n	2868 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    2892:	b914      	cbnz	r4, 289a <data_out_block_mode+0x42>
    2894:	4b02      	ldr	r3, [pc, #8]	; (28a0 <data_out_block_mode+0x48>)
    2896:	781b      	ldrb	r3, [r3, #0]
    2898:	b903      	cbnz	r3, 289c <data_out_block_mode+0x44>
    289a:	462c      	mov	r4, r5
}
    289c:	4620      	mov	r0, r4
    289e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28a0:	2002328a 	.word	0x2002328a

000028a4 <panic>:

static void panic(struct log_backend const *const backend)
{
    28a4:	b508      	push	{r3, lr}
	panic_mode = true;
    28a6:	4b03      	ldr	r3, [pc, #12]	; (28b4 <panic+0x10>)
    28a8:	2201      	movs	r2, #1
    28aa:	701a      	strb	r2, [r3, #0]
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    28ac:	4802      	ldr	r0, [pc, #8]	; (28b8 <panic+0x14>)
    28ae:	f004 ff2a 	bl	7706 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
    28b2:	bd08      	pop	{r3, pc}
    28b4:	2002328b 	.word	0x2002328b
    28b8:	0000a700 	.word	0x0000a700

000028bc <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
    28bc:	b500      	push	{lr}
    28be:	b085      	sub	sp, #20
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
    28c0:	200f      	movs	r0, #15
    28c2:	9002      	str	r0, [sp, #8]
    28c4:	9807      	ldr	r0, [sp, #28]
    28c6:	9001      	str	r0, [sp, #4]
    28c8:	9806      	ldr	r0, [sp, #24]
    28ca:	9000      	str	r0, [sp, #0]
    28cc:	4802      	ldr	r0, [pc, #8]	; (28d8 <sync_hexdump+0x1c>)
    28ce:	f7ff ff41 	bl	2754 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_rtt, flag, src_level,
				     timestamp, metadata, data, length);
}
    28d2:	b005      	add	sp, #20
    28d4:	f85d fb04 	ldr.w	pc, [sp], #4
    28d8:	0000a700 	.word	0x0000a700

000028dc <sync_string>:
{
    28dc:	b500      	push	{lr}
    28de:	b083      	sub	sp, #12
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
    28e0:	200f      	movs	r0, #15
    28e2:	9001      	str	r0, [sp, #4]
    28e4:	9804      	ldr	r0, [sp, #16]
    28e6:	9000      	str	r0, [sp, #0]
    28e8:	4802      	ldr	r0, [pc, #8]	; (28f4 <sync_string+0x18>)
    28ea:	f7ff feff 	bl	26ec <log_output_string>
}
    28ee:	b003      	add	sp, #12
    28f0:	f85d fb04 	ldr.w	pc, [sp], #4
    28f4:	0000a700 	.word	0x0000a700

000028f8 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
    28f8:	b410      	push	{r4}
    28fa:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
    28fc:	2300      	movs	r3, #0
    28fe:	4a08      	ldr	r2, [pc, #32]	; (2920 <get_flash_area_from_id+0x28>)
    2900:	6812      	ldr	r2, [r2, #0]
    2902:	429a      	cmp	r2, r3
    2904:	dd09      	ble.n	291a <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
    2906:	011a      	lsls	r2, r3, #4
    2908:	4906      	ldr	r1, [pc, #24]	; (2924 <get_flash_area_from_id+0x2c>)
    290a:	6809      	ldr	r1, [r1, #0]
    290c:	eb01 1003 	add.w	r0, r1, r3, lsl #4
    2910:	5c8a      	ldrb	r2, [r1, r2]
    2912:	42a2      	cmp	r2, r4
    2914:	d002      	beq.n	291c <get_flash_area_from_id+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
    2916:	3301      	adds	r3, #1
    2918:	e7f1      	b.n	28fe <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
    291a:	2000      	movs	r0, #0
}
    291c:	bc10      	pop	{r4}
    291e:	4770      	bx	lr
    2920:	0000a790 	.word	0x0000a790
    2924:	20020010 	.word	0x20020010

00002928 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    2928:	4b08      	ldr	r3, [pc, #32]	; (294c <flash_area_open+0x24>)
    292a:	681b      	ldr	r3, [r3, #0]
    292c:	b13b      	cbz	r3, 293e <flash_area_open+0x16>
{
    292e:	b510      	push	{r4, lr}
    2930:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    2932:	f7ff ffe1 	bl	28f8 <get_flash_area_from_id>
	if (area == NULL) {
    2936:	b128      	cbz	r0, 2944 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    2938:	6020      	str	r0, [r4, #0]
	return 0;
    293a:	2000      	movs	r0, #0
}
    293c:	bd10      	pop	{r4, pc}
		return -EACCES;
    293e:	f06f 000c 	mvn.w	r0, #12
}
    2942:	4770      	bx	lr
		return -ENOENT;
    2944:	f06f 0001 	mvn.w	r0, #1
    2948:	e7f8      	b.n	293c <flash_area_open+0x14>
    294a:	bf00      	nop
    294c:	20020010 	.word	0x20020010

00002950 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    2950:	b500      	push	{lr}
    2952:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    2954:	ab03      	add	r3, sp, #12
    2956:	9300      	str	r3, [sp, #0]
    2958:	4b02      	ldr	r3, [pc, #8]	; (2964 <flash_area_get_sectors+0x14>)
    295a:	f004 ff1d 	bl	7798 <flash_area_layout>
}
    295e:	b00b      	add	sp, #44	; 0x2c
    2960:	f85d fb04 	ldr.w	pc, [sp], #4
    2964:	0000775d 	.word	0x0000775d

00002968 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    2968:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    296a:	4c04      	ldr	r4, [pc, #16]	; (297c <rtt_console_init+0x14>)
    296c:	4620      	mov	r0, r4
    296e:	f7fe ff71 	bl	1854 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    2972:	4620      	mov	r0, r4
    2974:	f000 ffc0 	bl	38f8 <__stdout_hook_install>

	return 0;
}
    2978:	2000      	movs	r0, #0
    297a:	bd10      	pop	{r4, pc}
    297c:	00002981 	.word	0x00002981

00002980 <rtt_console_out>:
{
    2980:	b5f0      	push	{r4, r5, r6, r7, lr}
    2982:	b083      	sub	sp, #12
    2984:	4607      	mov	r7, r0
	char c = (char)character;
    2986:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
    298a:	2602      	movs	r6, #2
    298c:	e006      	b.n	299c <rtt_console_out+0x1c>
			host_present = true;
    298e:	4b13      	ldr	r3, [pc, #76]	; (29dc <rtt_console_out+0x5c>)
    2990:	2201      	movs	r2, #1
    2992:	701a      	strb	r2, [r3, #0]
    2994:	e01e      	b.n	29d4 <rtt_console_out+0x54>
				wait();
    2996:	f004 ffb6 	bl	7906 <wait>
				max_cnt--;
    299a:	3e01      	subs	r6, #1
	return z_impl_k_mutex_lock(mutex, timeout);
    299c:	4d10      	ldr	r5, [pc, #64]	; (29e0 <rtt_console_out+0x60>)
    299e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    29a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    29a6:	4628      	mov	r0, r5
    29a8:	f002 ffe0 	bl	596c <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    29ac:	2201      	movs	r2, #1
    29ae:	f10d 0107 	add.w	r1, sp, #7
    29b2:	2000      	movs	r0, #0
    29b4:	f000 fb9c 	bl	30f0 <SEGGER_RTT_WriteNoLock>
    29b8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    29ba:	4628      	mov	r0, r5
    29bc:	f003 f860 	bl	5a80 <z_impl_k_mutex_unlock>
		if (cnt) {
    29c0:	2c00      	cmp	r4, #0
    29c2:	d1e4      	bne.n	298e <rtt_console_out+0xe>
		} else if (host_present) {
    29c4:	4b05      	ldr	r3, [pc, #20]	; (29dc <rtt_console_out+0x5c>)
    29c6:	781b      	ldrb	r3, [r3, #0]
    29c8:	b123      	cbz	r3, 29d4 <rtt_console_out+0x54>
			if (max_cnt) {
    29ca:	2e00      	cmp	r6, #0
    29cc:	d1e3      	bne.n	2996 <rtt_console_out+0x16>
				host_present = false;
    29ce:	4b03      	ldr	r3, [pc, #12]	; (29dc <rtt_console_out+0x5c>)
    29d0:	2200      	movs	r2, #0
    29d2:	701a      	strb	r2, [r3, #0]
}
    29d4:	4638      	mov	r0, r7
    29d6:	b003      	add	sp, #12
    29d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29da:	bf00      	nop
    29dc:	2002328c 	.word	0x2002328c
    29e0:	20020164 	.word	0x20020164

000029e4 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    29e4:	4800      	ldr	r0, [pc, #0]	; (29e8 <get_hf_flags+0x4>)
    29e6:	4770      	bx	lr
    29e8:	20022808 	.word	0x20022808

000029ec <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
    29ec:	4b03      	ldr	r3, [pc, #12]	; (29fc <get_subsys+0x10>)
    29ee:	1ac0      	subs	r0, r0, r3
    29f0:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    29f2:	4b03      	ldr	r3, [pc, #12]	; (2a00 <get_subsys+0x14>)
    29f4:	fb03 f000 	mul.w	r0, r3, r0
    29f8:	4770      	bx	lr
    29fa:	bf00      	nop
    29fc:	200227c8 	.word	0x200227c8
    2a00:	b6db6db7 	.word	0xb6db6db7

00002a04 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2a04:	b538      	push	{r3, r4, r5, lr}
    2a06:	4605      	mov	r5, r0
    2a08:	460c      	mov	r4, r1
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
    2a0a:	f7ff ffef 	bl	29ec <get_subsys>
    2a0e:	4601      	mov	r1, r0
    2a10:	2240      	movs	r2, #64	; 0x40
    2a12:	4803      	ldr	r0, [pc, #12]	; (2a20 <onoff_stop+0x1c>)
    2a14:	f004 fffa 	bl	7a0c <stop>
    2a18:	4601      	mov	r1, r0
	notify(mgr, res);
    2a1a:	4628      	mov	r0, r5
    2a1c:	47a0      	blx	r4
}
    2a1e:	bd38      	pop	{r3, r4, r5, pc}
    2a20:	200200c4 	.word	0x200200c4

00002a24 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2a24:	b530      	push	{r4, r5, lr}
    2a26:	b083      	sub	sp, #12
    2a28:	4605      	mov	r5, r0
    2a2a:	460c      	mov	r4, r1
	int err;

	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
    2a2c:	f7ff ffde 	bl	29ec <get_subsys>
    2a30:	4601      	mov	r1, r0
    2a32:	2340      	movs	r3, #64	; 0x40
    2a34:	9300      	str	r3, [sp, #0]
    2a36:	4623      	mov	r3, r4
    2a38:	4a05      	ldr	r2, [pc, #20]	; (2a50 <onoff_start+0x2c>)
    2a3a:	4806      	ldr	r0, [pc, #24]	; (2a54 <onoff_start+0x30>)
    2a3c:	f005 f800 	bl	7a40 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2a40:	1e01      	subs	r1, r0, #0
    2a42:	db01      	blt.n	2a48 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    2a44:	b003      	add	sp, #12
    2a46:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    2a48:	4628      	mov	r0, r5
    2a4a:	47a0      	blx	r4
}
    2a4c:	e7fa      	b.n	2a44 <onoff_start+0x20>
    2a4e:	bf00      	nop
    2a50:	00007a8f 	.word	0x00007a8f
    2a54:	200200c4 	.word	0x200200c4

00002a58 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    2a58:	b508      	push	{r3, lr}
	const struct device *dev = DEVICE_GET(clock_nrf);

	switch (event) {
    2a5a:	b110      	cbz	r0, 2a62 <clock_event_handler+0xa>
    2a5c:	2801      	cmp	r0, #1
    2a5e:	d00d      	beq.n	2a7c <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    2a60:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2a62:	2100      	movs	r1, #0
    2a64:	4808      	ldr	r0, [pc, #32]	; (2a88 <clock_event_handler+0x30>)
    2a66:	f004 ff58 	bl	791a <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2a6a:	6883      	ldr	r3, [r0, #8]
    2a6c:	f013 0f07 	tst.w	r3, #7
    2a70:	d1f6      	bne.n	2a60 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2a72:	2100      	movs	r1, #0
    2a74:	4804      	ldr	r0, [pc, #16]	; (2a88 <clock_event_handler+0x30>)
    2a76:	f004 ffb7 	bl	79e8 <clkstarted_handle>
    2a7a:	e7f1      	b.n	2a60 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2a7c:	2101      	movs	r1, #1
    2a7e:	4802      	ldr	r0, [pc, #8]	; (2a88 <clock_event_handler+0x30>)
    2a80:	f004 ffb2 	bl	79e8 <clkstarted_handle>
}
    2a84:	e7ec      	b.n	2a60 <clock_event_handler+0x8>
    2a86:	bf00      	nop
    2a88:	200200c4 	.word	0x200200c4

00002a8c <generic_hfclk_start>:
{
    2a8c:	b510      	push	{r4, lr}
	__asm__ volatile(
    2a8e:	f04f 0320 	mov.w	r3, #32
    2a92:	f3ef 8411 	mrs	r4, BASEPRI
    2a96:	f383 8811 	msr	BASEPRI, r3
    2a9a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2a9e:	4a13      	ldr	r2, [pc, #76]	; (2aec <generic_hfclk_start+0x60>)
    2aa0:	6813      	ldr	r3, [r2, #0]
    2aa2:	f043 0302 	orr.w	r3, r3, #2
    2aa6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2aa8:	f013 0f01 	tst.w	r3, #1
    2aac:	d108      	bne.n	2ac0 <generic_hfclk_start+0x34>
	bool already_started = false;
    2aae:	2300      	movs	r3, #0
	__asm__ volatile(
    2ab0:	f384 8811 	msr	BASEPRI, r4
    2ab4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2ab8:	b99b      	cbnz	r3, 2ae2 <generic_hfclk_start+0x56>
	hfclk_start();
    2aba:	f004 ffff 	bl	7abc <hfclk_start>
}
    2abe:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2ac0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ac4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2ac8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2acc:	f012 0f01 	tst.w	r2, #1
    2ad0:	d101      	bne.n	2ad6 <generic_hfclk_start+0x4a>
	bool already_started = false;
    2ad2:	2300      	movs	r3, #0
    2ad4:	e7ec      	b.n	2ab0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    2ad6:	f7ff ff85 	bl	29e4 <get_hf_flags>
    2ada:	f004 ff72 	bl	79c2 <set_on_state>
			already_started = true;
    2ade:	2301      	movs	r3, #1
    2ae0:	e7e6      	b.n	2ab0 <generic_hfclk_start+0x24>
		clkstarted_handle(DEVICE_GET(clock_nrf),
    2ae2:	2100      	movs	r1, #0
    2ae4:	4802      	ldr	r0, [pc, #8]	; (2af0 <generic_hfclk_start+0x64>)
    2ae6:	f004 ff7f 	bl	79e8 <clkstarted_handle>
		return;
    2aea:	e7e8      	b.n	2abe <generic_hfclk_start+0x32>
    2aec:	20022818 	.word	0x20022818
    2af0:	200200c4 	.word	0x200200c4

00002af4 <generic_hfclk_stop>:
{
    2af4:	b508      	push	{r3, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2af6:	4b08      	ldr	r3, [pc, #32]	; (2b18 <generic_hfclk_stop+0x24>)
    2af8:	e8d3 2fef 	ldaex	r2, [r3]
    2afc:	f022 0102 	bic.w	r1, r2, #2
    2b00:	e8c3 1fe0 	stlex	r0, r1, [r3]
    2b04:	2800      	cmp	r0, #0
    2b06:	d1f7      	bne.n	2af8 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2b08:	f012 0f01 	tst.w	r2, #1
    2b0c:	d000      	beq.n	2b10 <generic_hfclk_stop+0x1c>
}
    2b0e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    2b10:	f004 ffca 	bl	7aa8 <hfclk_stop>
    2b14:	e7fb      	b.n	2b0e <generic_hfclk_stop+0x1a>
    2b16:	bf00      	nop
    2b18:	20022818 	.word	0x20022818

00002b1c <clk_init>:

static int clk_init(const struct device *dev)
{
    2b1c:	b570      	push	{r4, r5, r6, lr}
    2b1e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2b20:	2200      	movs	r2, #0
    2b22:	2101      	movs	r1, #1
    2b24:	2005      	movs	r0, #5
    2b26:	f000 fb95 	bl	3254 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2b2a:	2005      	movs	r0, #5
    2b2c:	f000 fb74 	bl	3218 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2b30:	4811      	ldr	r0, [pc, #68]	; (2b78 <clk_init+0x5c>)
    2b32:	f001 fd7d 	bl	4630 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2b36:	4b11      	ldr	r3, [pc, #68]	; (2b7c <clk_init+0x60>)
    2b38:	4298      	cmp	r0, r3
    2b3a:	d11a      	bne.n	2b72 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2b3c:	f005 faf0 	bl	8120 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    2b40:	2400      	movs	r4, #0
    2b42:	e003      	b.n	2b4c <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2b44:	2301      	movs	r3, #1
    2b46:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2b48:	441c      	add	r4, r3
    2b4a:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    2b4c:	2c01      	cmp	r4, #1
    2b4e:	d80e      	bhi.n	2b6e <clk_init+0x52>
						get_sub_data(dev, i);
    2b50:	4621      	mov	r1, r4
    2b52:	4630      	mov	r0, r6
    2b54:	f004 fee1 	bl	791a <get_sub_data>
    2b58:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2b5a:	4621      	mov	r1, r4
    2b5c:	4630      	mov	r0, r6
    2b5e:	f004 fee9 	bl	7934 <get_onoff_manager>
    2b62:	4907      	ldr	r1, [pc, #28]	; (2b80 <clk_init+0x64>)
    2b64:	f004 fb43 	bl	71ee <onoff_manager_init>
		if (err < 0) {
    2b68:	2800      	cmp	r0, #0
    2b6a:	daeb      	bge.n	2b44 <clk_init+0x28>
    2b6c:	e000      	b.n	2b70 <clk_init+0x54>
	}

	return 0;
    2b6e:	2000      	movs	r0, #0
}
    2b70:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2b72:	f06f 0004 	mvn.w	r0, #4
    2b76:	e7fb      	b.n	2b70 <clk_init+0x54>
    2b78:	00002a59 	.word	0x00002a59
    2b7c:	0bad0000 	.word	0x0bad0000
    2b80:	0000a7e8 	.word	0x0000a7e8

00002b84 <lfclk_spinwait>:
{
    2b84:	b570      	push	{r4, r5, r6, lr}
    2b86:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2b88:	2801      	cmp	r0, #1
    2b8a:	d107      	bne.n	2b9c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2b8c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b90:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2b94:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2b98:	2b02      	cmp	r3, #2
    2b9a:	d03f      	beq.n	2c1c <lfclk_spinwait+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2b9c:	f007 f8c8 	bl	9d30 <k_is_in_isr>
    2ba0:	b920      	cbnz	r0, 2bac <lfclk_spinwait+0x28>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    2ba2:	4b30      	ldr	r3, [pc, #192]	; (2c64 <lfclk_spinwait+0xe0>)
    2ba4:	781b      	ldrb	r3, [r3, #0]
    2ba6:	b19b      	cbz	r3, 2bd0 <lfclk_spinwait+0x4c>
    2ba8:	2300      	movs	r3, #0
    2baa:	e000      	b.n	2bae <lfclk_spinwait+0x2a>
    2bac:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    2bae:	461c      	mov	r4, r3
    2bb0:	b183      	cbz	r3, 2bd4 <lfclk_spinwait+0x50>
	__asm__ volatile(
    2bb2:	f04f 0320 	mov.w	r3, #32
    2bb6:	f3ef 8611 	mrs	r6, BASEPRI
    2bba:	f383 8811 	msr	BASEPRI, r3
    2bbe:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    2bc2:	b9a4      	cbnz	r4, 2bee <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    2bc4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2bc8:	2202      	movs	r2, #2
    2bca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    2bce:	e00e      	b.n	2bee <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2bd0:	2301      	movs	r3, #1
    2bd2:	e7ec      	b.n	2bae <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    2bd4:	2600      	movs	r6, #0
    2bd6:	e7f4      	b.n	2bc2 <lfclk_spinwait+0x3e>
			if (isr_mode) {
    2bd8:	b30c      	cbz	r4, 2c1e <lfclk_spinwait+0x9a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2bda:	4630      	mov	r0, r6
    2bdc:	f000 fb74 	bl	32c8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2be0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2be4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2be8:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2bea:	2b01      	cmp	r3, #1
    2bec:	d01c      	beq.n	2c28 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2bee:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2bf2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    2bf6:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2bfa:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2bfe:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    2c02:	d126      	bne.n	2c52 <lfclk_spinwait+0xce>
    return false;
    2c04:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2c06:	2a00      	cmp	r2, #0
    2c08:	d0e6      	beq.n	2bd8 <lfclk_spinwait+0x54>
    2c0a:	2b02      	cmp	r3, #2
    2c0c:	d001      	beq.n	2c12 <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2c0e:	2d01      	cmp	r5, #1
    2c10:	d1e2      	bne.n	2bd8 <lfclk_spinwait+0x54>
	if (isr_mode) {
    2c12:	b304      	cbz	r4, 2c56 <lfclk_spinwait+0xd2>
	__asm__ volatile(
    2c14:	f386 8811 	msr	BASEPRI, r6
    2c18:	f3bf 8f6f 	isb	sy
}
    2c1c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    2c1e:	2021      	movs	r0, #33	; 0x21
    2c20:	2100      	movs	r1, #0
    2c22:	f003 f965 	bl	5ef0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2c26:	e7db      	b.n	2be0 <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2c28:	4b0f      	ldr	r3, [pc, #60]	; (2c68 <lfclk_spinwait+0xe4>)
    2c2a:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d0de      	beq.n	2bee <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c30:	4b0d      	ldr	r3, [pc, #52]	; (2c68 <lfclk_spinwait+0xe4>)
    2c32:	2200      	movs	r2, #0
    2c34:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2c36:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2c38:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c3c:	2202      	movs	r2, #2
    2c3e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c42:	4b0a      	ldr	r3, [pc, #40]	; (2c6c <lfclk_spinwait+0xe8>)
    2c44:	2220      	movs	r2, #32
    2c46:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c4a:	4b09      	ldr	r3, [pc, #36]	; (2c70 <lfclk_spinwait+0xec>)
    2c4c:	2201      	movs	r2, #1
    2c4e:	601a      	str	r2, [r3, #0]
}
    2c50:	e7cd      	b.n	2bee <lfclk_spinwait+0x6a>
                return true;
    2c52:	2201      	movs	r2, #1
    2c54:	e7d7      	b.n	2c06 <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    2c56:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c5a:	2202      	movs	r2, #2
    2c5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2c60:	e7dc      	b.n	2c1c <lfclk_spinwait+0x98>
    2c62:	bf00      	nop
    2c64:	2002328f 	.word	0x2002328f
    2c68:	50005104 	.word	0x50005104
    2c6c:	e000e100 	.word	0xe000e100
    2c70:	50005008 	.word	0x50005008

00002c74 <z_nrf_clock_control_lf_on>:
{
    2c74:	b510      	push	{r4, lr}
    2c76:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2c78:	4b0e      	ldr	r3, [pc, #56]	; (2cb4 <z_nrf_clock_control_lf_on+0x40>)
    2c7a:	2101      	movs	r1, #1
    2c7c:	e8d3 2fef 	ldaex	r2, [r3]
    2c80:	e8c3 1fe0 	stlex	r0, r1, [r3]
    2c84:	2800      	cmp	r0, #0
    2c86:	d1f9      	bne.n	2c7c <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    2c88:	b11a      	cbz	r2, 2c92 <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    2c8a:	1e63      	subs	r3, r4, #1
    2c8c:	2b01      	cmp	r3, #1
    2c8e:	d90c      	bls.n	2caa <z_nrf_clock_control_lf_on+0x36>
}
    2c90:	bd10      	pop	{r4, pc}
				get_onoff_manager(DEVICE_GET(clock_nrf),
    2c92:	4809      	ldr	r0, [pc, #36]	; (2cb8 <z_nrf_clock_control_lf_on+0x44>)
    2c94:	f004 fe4e 	bl	7934 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2c98:	4908      	ldr	r1, [pc, #32]	; (2cbc <z_nrf_clock_control_lf_on+0x48>)
    2c9a:	2300      	movs	r3, #0
    2c9c:	604b      	str	r3, [r1, #4]
    2c9e:	60cb      	str	r3, [r1, #12]
    2ca0:	2301      	movs	r3, #1
    2ca2:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    2ca4:	f004 fabf 	bl	7226 <onoff_request>
    2ca8:	e7ef      	b.n	2c8a <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    2caa:	4620      	mov	r0, r4
    2cac:	f7ff ff6a 	bl	2b84 <lfclk_spinwait>
		break;
    2cb0:	e7ee      	b.n	2c90 <z_nrf_clock_control_lf_on+0x1c>
    2cb2:	bf00      	nop
    2cb4:	2002281c 	.word	0x2002281c
    2cb8:	200200c4 	.word	0x200200c4
    2cbc:	200227b8 	.word	0x200227b8

00002cc0 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2cc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2cc4:	4b01      	ldr	r3, [pc, #4]	; (2ccc <set_comparator+0xc>)
    2cc6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
}
    2cca:	4770      	bx	lr
    2ccc:	50015000 	.word	0x50015000

00002cd0 <get_comparator>:
    return p_reg->CC[ch];
    2cd0:	4b01      	ldr	r3, [pc, #4]	; (2cd8 <get_comparator+0x8>)
    2cd2:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540

static uint32_t get_comparator(void)
{
	return nrf_rtc_cc_get(RTC, 0);
}
    2cd6:	4770      	bx	lr
    2cd8:	50015000 	.word	0x50015000

00002cdc <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2cdc:	4b02      	ldr	r3, [pc, #8]	; (2ce8 <event_clear+0xc>)
    2cde:	2200      	movs	r2, #0
    2ce0:	601a      	str	r2, [r3, #0]
    2ce2:	681b      	ldr	r3, [r3, #0]

static void event_clear(void)
{
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
}
    2ce4:	4770      	bx	lr
    2ce6:	bf00      	nop
    2ce8:	50015140 	.word	0x50015140

00002cec <event_enable>:
    p_reg->EVTENSET = mask;
    2cec:	4b02      	ldr	r3, [pc, #8]	; (2cf8 <event_enable+0xc>)
    2cee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2cf2:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

static void event_enable(void)
{
	nrf_rtc_event_enable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    2cf6:	4770      	bx	lr
    2cf8:	50015000 	.word	0x50015000

00002cfc <int_disable>:
    p_reg->INTENCLR = mask;
    2cfc:	4b02      	ldr	r3, [pc, #8]	; (2d08 <int_disable+0xc>)
    2cfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2d02:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

static void int_disable(void)
{
	nrf_rtc_int_disable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    2d06:	4770      	bx	lr
    2d08:	50015000 	.word	0x50015000

00002d0c <int_enable>:
    p_reg->INTENSET = mask;
    2d0c:	4b02      	ldr	r3, [pc, #8]	; (2d18 <int_enable+0xc>)
    2d0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2d12:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

static void int_enable(void)
{
	nrf_rtc_int_enable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    2d16:	4770      	bx	lr
    2d18:	50015000 	.word	0x50015000

00002d1c <counter>:
     return p_reg->COUNTER;
    2d1c:	4b01      	ldr	r3, [pc, #4]	; (2d24 <counter+0x8>)
    2d1e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    2d22:	4770      	bx	lr
    2d24:	50015000 	.word	0x50015000

00002d28 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    2d28:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(arg);
	event_clear();
    2d2a:	f7ff ffd7 	bl	2cdc <event_clear>

	uint32_t t = get_comparator();
    2d2e:	f7ff ffcf 	bl	2cd0 <get_comparator>
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    2d32:	4d05      	ldr	r5, [pc, #20]	; (2d48 <rtc_nrf_isr+0x20>)
    2d34:	682c      	ldr	r4, [r5, #0]
    2d36:	4621      	mov	r1, r4
    2d38:	f004 fec7 	bl	7aca <counter_sub>

	last_count += dticks * CYC_PER_TICK;
    2d3c:	4404      	add	r4, r0
    2d3e:	602c      	str	r4, [r5, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    2d40:	f003 f9f0 	bl	6124 <z_clock_announce>
}
    2d44:	bd38      	pop	{r3, r4, r5, pc}
    2d46:	bf00      	nop
    2d48:	20022820 	.word	0x20022820

00002d4c <prevent_false_prev_evt>:
{
    2d4c:	b538      	push	{r3, r4, r5, lr}
	uint32_t now = counter();
    2d4e:	f7ff ffe5 	bl	2d1c <counter>
    2d52:	4604      	mov	r4, r0
	prev_val = get_comparator();
    2d54:	f7ff ffbc 	bl	2cd0 <get_comparator>
    2d58:	4605      	mov	r5, r0
	event_clear();
    2d5a:	f7ff ffbf 	bl	2cdc <event_clear>
	set_comparator(now);
    2d5e:	4620      	mov	r0, r4
    2d60:	f7ff ffae 	bl	2cc0 <set_comparator>
	event_enable();
    2d64:	f7ff ffc2 	bl	2cec <event_enable>
	if (counter_sub(prev_val, now) == 1) {
    2d68:	4621      	mov	r1, r4
    2d6a:	4628      	mov	r0, r5
    2d6c:	f004 fead 	bl	7aca <counter_sub>
    2d70:	2801      	cmp	r0, #1
    2d72:	d005      	beq.n	2d80 <prevent_false_prev_evt+0x34>
    2d74:	4b05      	ldr	r3, [pc, #20]	; (2d8c <prevent_false_prev_evt+0x40>)
    2d76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2d7a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    2d7e:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_busy_wait(usec_to_wait);
    2d80:	200f      	movs	r0, #15
    2d82:	f006 ffdb 	bl	9d3c <z_impl_k_busy_wait>
		event_clear();
    2d86:	f7ff ffa9 	bl	2cdc <event_clear>
    2d8a:	e7f3      	b.n	2d74 <prevent_false_prev_evt+0x28>
    2d8c:	e000e100 	.word	0xe000e100

00002d90 <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
    2d90:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    2d92:	4d0f      	ldr	r5, [pc, #60]	; (2dd0 <z_clock_driver_init+0x40>)
    2d94:	2400      	movs	r4, #0
    2d96:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    2d9a:	f7ff ff9f 	bl	2cdc <event_clear>
    2d9e:	4b0d      	ldr	r3, [pc, #52]	; (2dd4 <z_clock_driver_init+0x44>)
    2da0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2da4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();
    2da8:	f7ff ffb0 	bl	2d0c <int_enable>

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2dac:	4622      	mov	r2, r4
    2dae:	2101      	movs	r1, #1
    2db0:	2015      	movs	r0, #21
    2db2:	f000 fa4f 	bl	3254 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2db6:	2015      	movs	r0, #21
    2db8:	f000 fa2e 	bl	3218 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2dbc:	2301      	movs	r3, #1
    2dbe:	4a06      	ldr	r2, [pc, #24]	; (2dd8 <z_clock_driver_init+0x48>)
    2dc0:	6013      	str	r3, [r2, #0]
    2dc2:	602b      	str	r3, [r5, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    2dc4:	2002      	movs	r0, #2
    2dc6:	f7ff ff55 	bl	2c74 <z_nrf_clock_control_lf_on>

	return 0;
}
    2dca:	4620      	mov	r0, r4
    2dcc:	bd38      	pop	{r3, r4, r5, pc}
    2dce:	bf00      	nop
    2dd0:	50015000 	.word	0x50015000
    2dd4:	e000e100 	.word	0xe000e100
    2dd8:	50015008 	.word	0x50015008

00002ddc <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    2ddc:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2dde:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2de2:	d007      	beq.n	2df4 <z_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2de4:	1e44      	subs	r4, r0, #1
    2de6:	2c00      	cmp	r4, #0
    2de8:	dd07      	ble.n	2dfa <z_clock_set_timeout+0x1e>
    2dea:	4b0f      	ldr	r3, [pc, #60]	; (2e28 <z_clock_set_timeout+0x4c>)
    2dec:	429c      	cmp	r4, r3
    2dee:	dd05      	ble.n	2dfc <z_clock_set_timeout+0x20>
    2df0:	4c0e      	ldr	r4, [pc, #56]	; (2e2c <z_clock_set_timeout+0x50>)
    2df2:	e003      	b.n	2dfc <z_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2df4:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    2df8:	e7f4      	b.n	2de4 <z_clock_set_timeout+0x8>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2dfa:	2400      	movs	r4, #0

	uint32_t unannounced = counter_sub(counter(), last_count);
    2dfc:	f7ff ff8e 	bl	2d1c <counter>
    2e00:	4b0b      	ldr	r3, [pc, #44]	; (2e30 <z_clock_set_timeout+0x54>)
    2e02:	681d      	ldr	r5, [r3, #0]
    2e04:	4629      	mov	r1, r5
    2e06:	f004 fe60 	bl	7aca <counter_sub>
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    2e0a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e0e:	d300      	bcc.n	2e12 <z_clock_set_timeout+0x36>
		ticks = 0;
    2e10:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2e12:	4420      	add	r0, r4
    2e14:	3001      	adds	r0, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    2e16:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e1a:	d300      	bcc.n	2e1e <z_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2e1c:	4803      	ldr	r0, [pc, #12]	; (2e2c <z_clock_set_timeout+0x50>)
	}

	cyc += last_count;
	set_protected_absolute_alarm(cyc);
    2e1e:	4428      	add	r0, r5
    2e20:	f004 fe89 	bl	7b36 <set_protected_absolute_alarm>
}
    2e24:	bd38      	pop	{r3, r4, r5, pc}
    2e26:	bf00      	nop
    2e28:	007ffffe 	.word	0x007ffffe
    2e2c:	007fffff 	.word	0x007fffff
    2e30:	20022820 	.word	0x20022820

00002e34 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
    2e34:	b510      	push	{r4, lr}
	__asm__ volatile(
    2e36:	f04f 0320 	mov.w	r3, #32
    2e3a:	f3ef 8411 	mrs	r4, BASEPRI
    2e3e:	f383 8811 	msr	BASEPRI, r3
    2e42:	f3bf 8f6f 	isb	sy
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    2e46:	f7ff ff69 	bl	2d1c <counter>
    2e4a:	4b04      	ldr	r3, [pc, #16]	; (2e5c <z_clock_elapsed+0x28>)
    2e4c:	6819      	ldr	r1, [r3, #0]
    2e4e:	f004 fe3c 	bl	7aca <counter_sub>
	__asm__ volatile(
    2e52:	f384 8811 	msr	BASEPRI, r4
    2e56:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    2e5a:	bd10      	pop	{r4, pc}
    2e5c:	20022820 	.word	0x20022820

00002e60 <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
    2e60:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2e62:	f04f 0320 	mov.w	r3, #32
    2e66:	f3ef 8511 	mrs	r5, BASEPRI
    2e6a:	f383 8811 	msr	BASEPRI, r3
    2e6e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    2e72:	f7ff ff53 	bl	2d1c <counter>
    2e76:	4b05      	ldr	r3, [pc, #20]	; (2e8c <z_timer_cycle_get_32+0x2c>)
    2e78:	681c      	ldr	r4, [r3, #0]
    2e7a:	4621      	mov	r1, r4
    2e7c:	f004 fe25 	bl	7aca <counter_sub>
    2e80:	4420      	add	r0, r4
	__asm__ volatile(
    2e82:	f385 8811 	msr	BASEPRI, r5
    2e86:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    2e8a:	bd38      	pop	{r3, r4, r5, pc}
    2e8c:	20022820 	.word	0x20022820

00002e90 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    2e90:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    2e92:	4802      	ldr	r0, [pc, #8]	; (2e9c <nrf_cc3xx_platform_abort_init+0xc>)
    2e94:	f003 f9ea 	bl	626c <nrf_cc3xx_platform_set_abort>
}
    2e98:	bd08      	pop	{r3, pc}
    2e9a:	bf00      	nop
    2e9c:	0000a800 	.word	0x0000a800

00002ea0 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2ea0:	b138      	cbz	r0, 2eb2 <mutex_unlock_platform+0x12>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2ea2:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2ea4:	6842      	ldr	r2, [r0, #4]
    2ea6:	b13a      	cbz	r2, 2eb8 <mutex_unlock_platform+0x18>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
    2ea8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2eaa:	f002 fde9 	bl	5a80 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC3XX_PLATFORM_SUCCESS;
    2eae:	2000      	movs	r0, #0
}
    2eb0:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2eb2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2eb6:	4770      	bx	lr
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2eb8:	4800      	ldr	r0, [pc, #0]	; (2ebc <mutex_unlock_platform+0x1c>)
    2eba:	e7f9      	b.n	2eb0 <mutex_unlock_platform+0x10>
    2ebc:	ffff8fea 	.word	0xffff8fea

00002ec0 <mutex_lock_platform>:
    if(mutex == NULL) {
    2ec0:	b158      	cbz	r0, 2eda <mutex_lock_platform+0x1a>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2ec2:	b508      	push	{r3, lr}
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2ec4:	6842      	ldr	r2, [r0, #4]
    2ec6:	b15a      	cbz	r2, 2ee0 <mutex_lock_platform+0x20>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2ec8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2ed2:	f002 fd4b 	bl	596c <z_impl_k_mutex_lock>
    if (ret == 0) {
    2ed6:	b928      	cbnz	r0, 2ee4 <mutex_lock_platform+0x24>
}
    2ed8:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2eda:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2ede:	4770      	bx	lr
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2ee0:	4801      	ldr	r0, [pc, #4]	; (2ee8 <mutex_lock_platform+0x28>)
    2ee2:	e7f9      	b.n	2ed8 <mutex_lock_platform+0x18>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    2ee4:	4801      	ldr	r0, [pc, #4]	; (2eec <mutex_lock_platform+0x2c>)
    2ee6:	e7f7      	b.n	2ed8 <mutex_lock_platform+0x18>
    2ee8:	ffff8fea 	.word	0xffff8fea
    2eec:	ffff8fe9 	.word	0xffff8fe9

00002ef0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2ef0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2ef2:	4604      	mov	r4, r0
    2ef4:	b168      	cbz	r0, 2f12 <mutex_free_platform+0x22>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2ef6:	6863      	ldr	r3, [r4, #4]
    2ef8:	b153      	cbz	r3, 2f10 <mutex_free_platform+0x20>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2efa:	f013 0f02 	tst.w	r3, #2
    2efe:	d00d      	beq.n	2f1c <mutex_free_platform+0x2c>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
    2f00:	6821      	ldr	r1, [r4, #0]
    2f02:	4809      	ldr	r0, [pc, #36]	; (2f28 <mutex_free_platform+0x38>)
    2f04:	f002 fd0a 	bl	591c <k_mem_slab_free>
        mutex->mutex = NULL;
    2f08:	2300      	movs	r3, #0
    2f0a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2f0c:	2300      	movs	r3, #0
    2f0e:	6063      	str	r3, [r4, #4]
}
    2f10:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2f12:	4b06      	ldr	r3, [pc, #24]	; (2f2c <mutex_free_platform+0x3c>)
    2f14:	685b      	ldr	r3, [r3, #4]
    2f16:	4806      	ldr	r0, [pc, #24]	; (2f30 <mutex_free_platform+0x40>)
    2f18:	4798      	blx	r3
    2f1a:	e7ec      	b.n	2ef6 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2f1c:	2214      	movs	r2, #20
    2f1e:	2100      	movs	r1, #0
    2f20:	6820      	ldr	r0, [r4, #0]
    2f22:	f004 ff43 	bl	7dac <memset>
    2f26:	e7f1      	b.n	2f0c <mutex_free_platform+0x1c>
    2f28:	20022824 	.word	0x20022824
    2f2c:	20020064 	.word	0x20020064
    2f30:	0000a808 	.word	0x0000a808

00002f34 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2f34:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2f36:	4604      	mov	r4, r0
    2f38:	b158      	cbz	r0, 2f52 <mutex_init_platform+0x1e>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2f3a:	6863      	ldr	r3, [r4, #4]
    2f3c:	b90b      	cbnz	r3, 2f42 <mutex_init_platform+0xe>
        mutex->mutex == NULL) {
    2f3e:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2f40:	b163      	cbz	r3, 2f5c <mutex_init_platform+0x28>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2f42:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2f44:	f006 fdfe 	bl	9b44 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2f48:	6863      	ldr	r3, [r4, #4]
    2f4a:	f043 0301 	orr.w	r3, r3, #1
    2f4e:	6063      	str	r3, [r4, #4]
}
    2f50:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2f52:	4b0f      	ldr	r3, [pc, #60]	; (2f90 <mutex_init_platform+0x5c>)
    2f54:	685b      	ldr	r3, [r3, #4]
    2f56:	480f      	ldr	r0, [pc, #60]	; (2f94 <mutex_init_platform+0x60>)
    2f58:	4798      	blx	r3
    2f5a:	e7ee      	b.n	2f3a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f64:	4621      	mov	r1, r4
    2f66:	480c      	ldr	r0, [pc, #48]	; (2f98 <mutex_init_platform+0x64>)
    2f68:	f002 fca2 	bl	58b0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2f6c:	b908      	cbnz	r0, 2f72 <mutex_init_platform+0x3e>
    2f6e:	6823      	ldr	r3, [r4, #0]
    2f70:	b91b      	cbnz	r3, 2f7a <mutex_init_platform+0x46>
            platform_abort_apis.abort_fn(
    2f72:	4b07      	ldr	r3, [pc, #28]	; (2f90 <mutex_init_platform+0x5c>)
    2f74:	685b      	ldr	r3, [r3, #4]
    2f76:	4809      	ldr	r0, [pc, #36]	; (2f9c <mutex_init_platform+0x68>)
    2f78:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2f7a:	2214      	movs	r2, #20
    2f7c:	2100      	movs	r1, #0
    2f7e:	6820      	ldr	r0, [r4, #0]
    2f80:	f004 ff14 	bl	7dac <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2f84:	6863      	ldr	r3, [r4, #4]
    2f86:	f043 0302 	orr.w	r3, r3, #2
    2f8a:	6063      	str	r3, [r4, #4]
    2f8c:	e7d9      	b.n	2f42 <mutex_init_platform+0xe>
    2f8e:	bf00      	nop
    2f90:	20020064 	.word	0x20020064
    2f94:	0000a808 	.word	0x0000a808
    2f98:	20022824 	.word	0x20022824
    2f9c:	0000a830 	.word	0x0000a830

00002fa0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2fa0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2fa2:	2340      	movs	r3, #64	; 0x40
    2fa4:	2214      	movs	r2, #20
    2fa6:	4904      	ldr	r1, [pc, #16]	; (2fb8 <nrf_cc3xx_platform_mutex_init+0x18>)
    2fa8:	4804      	ldr	r0, [pc, #16]	; (2fbc <nrf_cc3xx_platform_mutex_init+0x1c>)
    2faa:	f006 fda9 	bl	9b00 <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2fae:	4904      	ldr	r1, [pc, #16]	; (2fc0 <nrf_cc3xx_platform_mutex_init+0x20>)
    2fb0:	4804      	ldr	r0, [pc, #16]	; (2fc4 <nrf_cc3xx_platform_mutex_init+0x24>)
    2fb2:	f003 f9ad 	bl	6310 <nrf_cc3xx_platform_set_mutexes>
}
    2fb6:	bd08      	pop	{r3, pc}
    2fb8:	20022840 	.word	0x20022840
    2fbc:	20022824 	.word	0x20022824
    2fc0:	0000a870 	.word	0x0000a870
    2fc4:	0000a860 	.word	0x0000a860

00002fc8 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    2fc8:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2fca:	4c11      	ldr	r4, [pc, #68]	; (3010 <_DoInit+0x48>)
    2fcc:	2303      	movs	r3, #3
    2fce:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    2fd0:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    2fd2:	4a10      	ldr	r2, [pc, #64]	; (3014 <_DoInit+0x4c>)
    2fd4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2fd6:	4b10      	ldr	r3, [pc, #64]	; (3018 <_DoInit+0x50>)
    2fd8:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    2fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2fde:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    2fe0:	2300      	movs	r3, #0
    2fe2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    2fe4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2fe6:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    2fe8:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    2fea:	4a0c      	ldr	r2, [pc, #48]	; (301c <_DoInit+0x54>)
    2fec:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    2fee:	2210      	movs	r2, #16
    2ff0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    2ff2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    2ff4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2ff6:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    2ff8:	4909      	ldr	r1, [pc, #36]	; (3020 <_DoInit+0x58>)
    2ffa:	1de0      	adds	r0, r4, #7
    2ffc:	f004 fe80 	bl	7d00 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    3000:	4908      	ldr	r1, [pc, #32]	; (3024 <_DoInit+0x5c>)
    3002:	4620      	mov	r0, r4
    3004:	f004 fe7c 	bl	7d00 <strcpy>
  p->acID[6] = ' ';
    3008:	2320      	movs	r3, #32
    300a:	71a3      	strb	r3, [r4, #6]
}
    300c:	bd10      	pop	{r4, pc}
    300e:	bf00      	nop
    3010:	20022d40 	.word	0x20022d40
    3014:	0000a884 	.word	0x0000a884
    3018:	20022df8 	.word	0x20022df8
    301c:	20022de8 	.word	0x20022de8
    3020:	0000a890 	.word	0x0000a890
    3024:	0000a894 	.word	0x0000a894

00003028 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    302c:	4604      	mov	r4, r0
    302e:	460e      	mov	r6, r1
    3030:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    3032:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3036:	4a2d      	ldr	r2, [pc, #180]	; (30ec <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    3038:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    303c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    303e:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    3040:	42bb      	cmp	r3, r7
    3042:	d84b      	bhi.n	30dc <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    3044:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    3048:	4928      	ldr	r1, [pc, #160]	; (30ec <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    304a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    304e:	f8d2 8020 	ldr.w	r8, [r2, #32]
    3052:	eba8 0907 	sub.w	r9, r8, r7
    3056:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    305a:	4295      	cmp	r5, r2
    305c:	d904      	bls.n	3068 <SEGGER_RTT_WriteSkipNoLock+0x40>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    305e:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    3060:	429d      	cmp	r5, r3
    3062:	d916      	bls.n	3092 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    3064:	2000      	movs	r0, #0
    3066:	e03e      	b.n	30e6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    3068:	f8df 8080 	ldr.w	r8, [pc, #128]	; 30ec <SEGGER_RTT_WriteSkipNoLock+0xc4>
    306c:	1c63      	adds	r3, r4, #1
    306e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3072:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    3076:	6858      	ldr	r0, [r3, #4]
    3078:	462a      	mov	r2, r5
    307a:	4631      	mov	r1, r6
    307c:	4438      	add	r0, r7
    307e:	f004 fe71 	bl	7d64 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    3082:	443d      	add	r5, r7
    3084:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3088:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    308c:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    308e:	2001      	movs	r0, #1
    3090:	e029      	b.n	30e6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    3092:	1c43      	adds	r3, r0, #1
    3094:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3098:	4a14      	ldr	r2, [pc, #80]	; (30ec <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    309a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    309e:	6858      	ldr	r0, [r3, #4]
    30a0:	464a      	mov	r2, r9
    30a2:	4631      	mov	r1, r6
    30a4:	4438      	add	r0, r7
    30a6:	f004 fe5d 	bl	7d64 <memcpy>
      NumBytes -= Rem;
    30aa:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    30ae:	197f      	adds	r7, r7, r5
    30b0:	d107      	bne.n	30c2 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    30b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    30b6:	4b0d      	ldr	r3, [pc, #52]	; (30ec <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    30b8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    30bc:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    30be:	2001      	movs	r0, #1
    30c0:	e011      	b.n	30e6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    30c2:	1c63      	adds	r3, r4, #1
    30c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30c8:	4a08      	ldr	r2, [pc, #32]	; (30ec <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    30ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    30ce:	463a      	mov	r2, r7
    30d0:	eb06 0109 	add.w	r1, r6, r9
    30d4:	6858      	ldr	r0, [r3, #4]
    30d6:	f004 fe45 	bl	7d64 <memcpy>
    30da:	e7ea      	b.n	30b2 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    30dc:	1bdb      	subs	r3, r3, r7
    30de:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    30e0:	42ab      	cmp	r3, r5
    30e2:	d2c1      	bcs.n	3068 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    30e4:	2000      	movs	r0, #0
}
    30e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30ea:	bf00      	nop
    30ec:	20022d40 	.word	0x20022d40

000030f0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    30f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30f2:	460f      	mov	r7, r1
    30f4:	4616      	mov	r6, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    30f6:	4b18      	ldr	r3, [pc, #96]	; (3158 <SEGGER_RTT_WriteNoLock+0x68>)
    30f8:	1c45      	adds	r5, r0, #1
    30fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    30fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    3102:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3106:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    310a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    310c:	2c01      	cmp	r4, #1
    310e:	d011      	beq.n	3134 <SEGGER_RTT_WriteNoLock+0x44>
    3110:	2c02      	cmp	r4, #2
    3112:	d01c      	beq.n	314e <SEGGER_RTT_WriteNoLock+0x5e>
    3114:	b114      	cbz	r4, 311c <SEGGER_RTT_WriteNoLock+0x2c>
    3116:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    3118:	4620      	mov	r0, r4
    311a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    311c:	4628      	mov	r0, r5
    311e:	f004 fd17 	bl	7b50 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    3122:	4286      	cmp	r6, r0
    3124:	d8f8      	bhi.n	3118 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
    3126:	4632      	mov	r2, r6
    3128:	4639      	mov	r1, r7
    312a:	4628      	mov	r0, r5
    312c:	f004 fd1c 	bl	7b68 <_WriteNoCheck>
      Status = NumBytes;
    3130:	4634      	mov	r4, r6
    3132:	e7f1      	b.n	3118 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
    3134:	4628      	mov	r0, r5
    3136:	f004 fd0b 	bl	7b50 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    313a:	4634      	mov	r4, r6
    313c:	4286      	cmp	r6, r0
    313e:	bf28      	it	cs
    3140:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    3142:	4622      	mov	r2, r4
    3144:	4639      	mov	r1, r7
    3146:	4628      	mov	r0, r5
    3148:	f004 fd0e 	bl	7b68 <_WriteNoCheck>
    break;
    314c:	e7e4      	b.n	3118 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    314e:	4628      	mov	r0, r5
    3150:	f004 fd2c 	bl	7bac <_WriteBlocking>
    3154:	4604      	mov	r4, r0
    break;
    3156:	e7df      	b.n	3118 <SEGGER_RTT_WriteNoLock+0x28>
    3158:	20022d40 	.word	0x20022d40

0000315c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    315c:	4b06      	ldr	r3, [pc, #24]	; (3178 <SEGGER_RTT_HasDataUp+0x1c>)
    315e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    3162:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    3166:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    3168:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    316c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3170:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    3172:	1a80      	subs	r0, r0, r2
    3174:	4770      	bx	lr
    3176:	bf00      	nop
    3178:	20022d40 	.word	0x20022d40

0000317c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    317c:	4a09      	ldr	r2, [pc, #36]	; (31a4 <arch_swap+0x28>)
    317e:	6893      	ldr	r3, [r2, #8]
    3180:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    3182:	4909      	ldr	r1, [pc, #36]	; (31a8 <arch_swap+0x2c>)
    3184:	6809      	ldr	r1, [r1, #0]
    3186:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3188:	4908      	ldr	r1, [pc, #32]	; (31ac <arch_swap+0x30>)
    318a:	684b      	ldr	r3, [r1, #4]
    318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3190:	604b      	str	r3, [r1, #4]
    3192:	2300      	movs	r3, #0
    3194:	f383 8811 	msr	BASEPRI, r3
    3198:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    319c:	6893      	ldr	r3, [r2, #8]
}
    319e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    31a0:	4770      	bx	lr
    31a2:	bf00      	nop
    31a4:	20023240 	.word	0x20023240
    31a8:	0000ab80 	.word	0x0000ab80
    31ac:	e000ed00 	.word	0xe000ed00

000031b0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    31b0:	490f      	ldr	r1, [pc, #60]	; (31f0 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    31b2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    31b4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    31b8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    31ba:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    31be:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    31c2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    31c4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    31c8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    31cc:	4f09      	ldr	r7, [pc, #36]	; (31f4 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    31ce:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    31d2:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    31d4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    31d6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    31d8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    31da:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    31dc:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    31de:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    31e2:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    31e6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    31ea:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    31ee:	4770      	bx	lr
    ldr r1, =_kernel
    31f0:	20023240 	.word	0x20023240
    ldr v4, =_SCS_ICSR
    31f4:	e000ed04 	.word	0xe000ed04

000031f8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    31f8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    31fc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    31fe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3202:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3206:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3208:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    320c:	2902      	cmp	r1, #2
    beq _oops
    320e:	d0ff      	beq.n	3210 <_oops>

00003210 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3210:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3212:	f004 fd11 	bl	7c38 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3216:	bd01      	pop	{r0, pc}

00003218 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3218:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    321a:	2b00      	cmp	r3, #0
    321c:	db08      	blt.n	3230 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    321e:	f000 001f 	and.w	r0, r0, #31
    3222:	095b      	lsrs	r3, r3, #5
    3224:	2201      	movs	r2, #1
    3226:	fa02 f000 	lsl.w	r0, r2, r0
    322a:	4a02      	ldr	r2, [pc, #8]	; (3234 <arch_irq_enable+0x1c>)
    322c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3230:	4770      	bx	lr
    3232:	bf00      	nop
    3234:	e000e100 	.word	0xe000e100

00003238 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3238:	0942      	lsrs	r2, r0, #5
    323a:	4b05      	ldr	r3, [pc, #20]	; (3250 <arch_irq_is_enabled+0x18>)
    323c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3240:	f000 001f 	and.w	r0, r0, #31
    3244:	2301      	movs	r3, #1
    3246:	fa03 f000 	lsl.w	r0, r3, r0
}
    324a:	4010      	ands	r0, r2
    324c:	4770      	bx	lr
    324e:	bf00      	nop
    3250:	e000e100 	.word	0xe000e100

00003254 <z_arm_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    3254:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3256:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3258:	2b00      	cmp	r3, #0
    325a:	db08      	blt.n	326e <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    325c:	0149      	lsls	r1, r1, #5
    325e:	b2c9      	uxtb	r1, r1
    3260:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3264:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3268:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    326c:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    326e:	f000 000f 	and.w	r0, r0, #15
    3272:	0149      	lsls	r1, r1, #5
    3274:	b2c9      	uxtb	r1, r1
    3276:	4b01      	ldr	r3, [pc, #4]	; (327c <z_arm_irq_priority_set+0x28>)
    3278:	5419      	strb	r1, [r3, r0]
}
    327a:	4770      	bx	lr
    327c:	e000ed14 	.word	0xe000ed14

00003280 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    3280:	b580      	push	{r7, lr}
    3282:	4604      	mov	r4, r0
    3284:	460f      	mov	r7, r1
    3286:	4616      	mov	r6, r2
    3288:	461d      	mov	r5, r3
	z_arm_prepare_switch_to_main();
    328a:	f004 fccd 	bl	7c28 <z_arm_prepare_switch_to_main>
	/* Store all required input in registers, to be accesible
	 * after stack pointer change. The function is not going
	 * to return, so callee-saved registers do not need to be
	 * stacked.
	 */
	register void *p1_inreg __asm__("r0") = p1;
    328e:	4638      	mov	r0, r7
	register void *p2_inreg __asm__("r1") = p2;
    3290:	4631      	mov	r1, r6
	register void *p3_inreg __asm__("r2") = p3;
    3292:	462a      	mov	r2, r5

	__asm__ volatile (
    3294:	4b08      	ldr	r3, [pc, #32]	; (32b8 <loop+0x4>)
    3296:	2520      	movs	r5, #32
    3298:	f383 8809 	msr	PSP, r3
    329c:	b663      	cpsie	if
    329e:	f04f 0300 	mov.w	r3, #0
    32a2:	f383 8811 	msr	BASEPRI, r3
    32a6:	f3bf 8f6f 	isb	sy
    32aa:	47a0      	blx	r4
    32ac:	f385 8811 	msr	BASEPRI, r5
    32b0:	f3bf 8f6f 	isb	sy

000032b4 <loop>:
    32b4:	e7fe      	b.n	32b4 <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    32b6:	bf00      	nop
    32b8:	20025a90 	.word	0x20025a90

000032bc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    32bc:	4901      	ldr	r1, [pc, #4]	; (32c4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    32be:	2210      	movs	r2, #16
	str	r2, [r1]
    32c0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    32c2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    32c4:	e000ed10 	.word	0xe000ed10

000032c8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    32c8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    32ca:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    32cc:	f381 8811 	msr	BASEPRI, r1

	wfe
    32d0:	bf20      	wfe

	msr	BASEPRI, r0
    32d2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    32d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    32d8:	4770      	bx	lr
    32da:	bf00      	nop

000032dc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    32dc:	bf30      	wfi
    b z_SysNmiOnReset
    32de:	f7ff bffd 	b.w	32dc <z_SysNmiOnReset>
    32e2:	bf00      	nop

000032e4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    32e4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    32e6:	4b0e      	ldr	r3, [pc, #56]	; (3320 <z_arm_prep_c+0x3c>)
    32e8:	4a0e      	ldr	r2, [pc, #56]	; (3324 <z_arm_prep_c+0x40>)
    32ea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    32ee:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    32f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32f4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    32f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    32fc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3304:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3308:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    330c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3310:	f002 fa46 	bl	57a0 <z_bss_zero>
	z_data_copy();
    3314:	f002 fa50 	bl	57b8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3318:	f000 f922 	bl	3560 <z_arm_interrupt_init>
	z_cstart();
    331c:	f002 fa88 	bl	5830 <z_cstart>
    3320:	e000ed00 	.word	0xe000ed00
    3324:	00000000 	.word	0x00000000

00003328 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3328:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    332a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    332e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3332:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3336:	4904      	ldr	r1, [pc, #16]	; (3348 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3338:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    333a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    333c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    333e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3342:	4902      	ldr	r1, [pc, #8]	; (334c <_isr_wrapper+0x24>)
	bx r1
    3344:	4708      	bx	r1
    3346:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    3348:	00009e84 	.word	0x00009e84
	ldr r1, =z_arm_int_exit
    334c:	0000355d 	.word	0x0000355d

00003350 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    3350:	f004 f94f 	bl	75f2 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3354:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3356:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    335a:	4808      	ldr	r0, [pc, #32]	; (337c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    335c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3360:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3362:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3366:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    336a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    336c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    336e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3372:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3376:	f7ff ffb5 	bl	32e4 <z_arm_prep_c>
    337a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    337c:	20025a90 	.word	0x20025a90

00003380 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3380:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3384:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3388:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    338a:	4672      	mov	r2, lr
	bl z_arm_fault
    338c:	f000 f894 	bl	34b8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3390:	bd01      	pop	{r0, pc}
    3392:	bf00      	nop

00003394 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3394:	b510      	push	{r4, lr}
    3396:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3398:	4b0f      	ldr	r3, [pc, #60]	; (33d8 <mem_manage_fault+0x44>)
    339a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    339c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33a0:	f013 0f02 	tst.w	r3, #2
    33a4:	d00b      	beq.n	33be <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    33a6:	4b0c      	ldr	r3, [pc, #48]	; (33d8 <mem_manage_fault+0x44>)
    33a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    33aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33ac:	f013 0f80 	tst.w	r3, #128	; 0x80
    33b0:	d005      	beq.n	33be <mem_manage_fault+0x2a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    33b2:	b121      	cbz	r1, 33be <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    33b4:	4a08      	ldr	r2, [pc, #32]	; (33d8 <mem_manage_fault+0x44>)
    33b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    33b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    33bc:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    33be:	4b06      	ldr	r3, [pc, #24]	; (33d8 <mem_manage_fault+0x44>)
    33c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    33c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    33c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    33c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    33c8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    33cc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    33ce:	f004 fc3f 	bl	7c50 <memory_fault_recoverable>
    33d2:	7020      	strb	r0, [r4, #0]

	return reason;
}
    33d4:	2000      	movs	r0, #0
    33d6:	bd10      	pop	{r4, pc}
    33d8:	e000ed00 	.word	0xe000ed00

000033dc <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    33dc:	b510      	push	{r4, lr}
    33de:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    33e0:	4b12      	ldr	r3, [pc, #72]	; (342c <bus_fault+0x50>)
    33e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    33e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    33e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33e8:	f413 7f00 	tst.w	r3, #512	; 0x200
    33ec:	d00b      	beq.n	3406 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    33ee:	4b0f      	ldr	r3, [pc, #60]	; (342c <bus_fault+0x50>)
    33f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    33f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    33f8:	d005      	beq.n	3406 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    33fa:	b121      	cbz	r1, 3406 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    33fc:	4a0b      	ldr	r2, [pc, #44]	; (342c <bus_fault+0x50>)
    33fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3400:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3404:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3406:	4b09      	ldr	r3, [pc, #36]	; (342c <bus_fault+0x50>)
    3408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    340c:	f413 7f80 	tst.w	r3, #256	; 0x100
    3410:	d101      	bne.n	3416 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3412:	4b06      	ldr	r3, [pc, #24]	; (342c <bus_fault+0x50>)
    3414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3416:	4a05      	ldr	r2, [pc, #20]	; (342c <bus_fault+0x50>)
    3418:	6a93      	ldr	r3, [r2, #40]	; 0x28
    341a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    341e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    3420:	f004 fc16 	bl	7c50 <memory_fault_recoverable>
    3424:	7020      	strb	r0, [r4, #0]

	return reason;
}
    3426:	2000      	movs	r0, #0
    3428:	bd10      	pop	{r4, pc}
    342a:	bf00      	nop
    342c:	e000ed00 	.word	0xe000ed00

00003430 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3430:	4b07      	ldr	r3, [pc, #28]	; (3450 <usage_fault+0x20>)
    3432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    343a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    343c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    343e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3442:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3446:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    344a:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    344c:	2000      	movs	r0, #0
    344e:	4770      	bx	lr
    3450:	e000ed00 	.word	0xe000ed00

00003454 <hard_fault>:
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    3454:	2300      	movs	r3, #0
    3456:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3458:	4b14      	ldr	r3, [pc, #80]	; (34ac <hard_fault+0x58>)
    345a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    345c:	f012 0202 	ands.w	r2, r2, #2
    3460:	d121      	bne.n	34a6 <hard_fault+0x52>
{
    3462:	b510      	push	{r4, lr}
    3464:	4604      	mov	r4, r0
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3466:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    3468:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    346c:	d010      	beq.n	3490 <hard_fault+0x3c>
		PR_EXC("  Fault escalation (see below)");
		if (SCB_MMFSR != 0) {
    346e:	3328      	adds	r3, #40	; 0x28
    3470:	781b      	ldrb	r3, [r3, #0]
    3472:	b943      	cbnz	r3, 3486 <hard_fault+0x32>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    3474:	4b0e      	ldr	r3, [pc, #56]	; (34b0 <hard_fault+0x5c>)
    3476:	781b      	ldrb	r3, [r3, #0]
    3478:	b95b      	cbnz	r3, 3492 <hard_fault+0x3e>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    347a:	4b0e      	ldr	r3, [pc, #56]	; (34b4 <hard_fault+0x60>)
    347c:	881b      	ldrh	r3, [r3, #0]
    347e:	b29b      	uxth	r3, r3
    3480:	b96b      	cbnz	r3, 349e <hard_fault+0x4a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3482:	4610      	mov	r0, r2
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
    3484:	e004      	b.n	3490 <hard_fault+0x3c>
			reason = mem_manage_fault(esf, 1, recoverable);
    3486:	460a      	mov	r2, r1
    3488:	2101      	movs	r1, #1
    348a:	4620      	mov	r0, r4
    348c:	f7ff ff82 	bl	3394 <mem_manage_fault>
}
    3490:	bd10      	pop	{r4, pc}
			reason = bus_fault(esf, 1, recoverable);
    3492:	460a      	mov	r2, r1
    3494:	2101      	movs	r1, #1
    3496:	4620      	mov	r0, r4
    3498:	f7ff ffa0 	bl	33dc <bus_fault>
    349c:	e7f8      	b.n	3490 <hard_fault+0x3c>
			reason = usage_fault(esf);
    349e:	4620      	mov	r0, r4
    34a0:	f7ff ffc6 	bl	3430 <usage_fault>
    34a4:	e7f4      	b.n	3490 <hard_fault+0x3c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    34a6:	2000      	movs	r0, #0
}
    34a8:	4770      	bx	lr
    34aa:	bf00      	nop
    34ac:	e000ed00 	.word	0xe000ed00
    34b0:	e000ed29 	.word	0xe000ed29
    34b4:	e000ed2a 	.word	0xe000ed2a

000034b8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    34b8:	b570      	push	{r4, r5, r6, lr}
    34ba:	b08a      	sub	sp, #40	; 0x28
    34bc:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    34be:	4b22      	ldr	r3, [pc, #136]	; (3548 <z_arm_fault+0x90>)
    34c0:	6859      	ldr	r1, [r3, #4]
    34c2:	f3c1 0108 	ubfx	r1, r1, #0, #9
    34c6:	2300      	movs	r3, #0
    34c8:	f383 8811 	msr	BASEPRI, r3
    34cc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    34d0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    34d4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    34d8:	d115      	bne.n	3506 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    34da:	f002 030c 	and.w	r3, r2, #12
    34de:	2b08      	cmp	r3, #8
    34e0:	d014      	beq.n	350c <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    34e2:	f012 0f08 	tst.w	r2, #8
    34e6:	d00b      	beq.n	3500 <z_arm_fault+0x48>
	*nested_exc = false;
    34e8:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    34ea:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    34ee:	4620      	mov	r0, r4
    34f0:	f004 fbb0 	bl	7c54 <fault_handle>
    34f4:	4605      	mov	r5, r0
	if (recoverable) {
    34f6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    34fa:	b153      	cbz	r3, 3512 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    34fc:	b00a      	add	sp, #40	; 0x28
    34fe:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    3500:	4604      	mov	r4, r0
			*nested_exc = true;
    3502:	2601      	movs	r6, #1
    3504:	e7f1      	b.n	34ea <z_arm_fault+0x32>
	*nested_exc = false;
    3506:	2600      	movs	r6, #0
		return NULL;
    3508:	4634      	mov	r4, r6
    350a:	e7ee      	b.n	34ea <z_arm_fault+0x32>
	*nested_exc = false;
    350c:	2600      	movs	r6, #0
		return NULL;
    350e:	4634      	mov	r4, r6
    3510:	e7eb      	b.n	34ea <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3512:	2220      	movs	r2, #32
    3514:	4621      	mov	r1, r4
    3516:	a801      	add	r0, sp, #4
    3518:	f004 fc24 	bl	7d64 <memcpy>
	if (nested_exc) {
    351c:	b14e      	cbz	r6, 3532 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    351e:	9b08      	ldr	r3, [sp, #32]
    3520:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3524:	b95a      	cbnz	r2, 353e <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3526:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    352a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    352e:	9308      	str	r3, [sp, #32]
    3530:	e005      	b.n	353e <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3532:	9b08      	ldr	r3, [sp, #32]
    3534:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3538:	f023 0301 	bic.w	r3, r3, #1
    353c:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    353e:	a901      	add	r1, sp, #4
    3540:	4628      	mov	r0, r5
    3542:	f004 fb75 	bl	7c30 <z_arm_fatal_error>
    3546:	e7d9      	b.n	34fc <z_arm_fault+0x44>
    3548:	e000ed00 	.word	0xe000ed00

0000354c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    354c:	4a02      	ldr	r2, [pc, #8]	; (3558 <z_arm_fault_init+0xc>)
    354e:	6953      	ldr	r3, [r2, #20]
    3550:	f043 0310 	orr.w	r3, r3, #16
    3554:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3556:	4770      	bx	lr
    3558:	e000ed00 	.word	0xe000ed00

0000355c <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    355c:	4770      	bx	lr
    355e:	bf00      	nop

00003560 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3560:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3562:	e006      	b.n	3572 <z_arm_interrupt_init+0x12>
    3564:	f002 010f 	and.w	r1, r2, #15
    3568:	4b09      	ldr	r3, [pc, #36]	; (3590 <z_arm_interrupt_init+0x30>)
    356a:	440b      	add	r3, r1
    356c:	2120      	movs	r1, #32
    356e:	7619      	strb	r1, [r3, #24]
    3570:	3201      	adds	r2, #1
    3572:	2a40      	cmp	r2, #64	; 0x40
    3574:	dc0a      	bgt.n	358c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    3576:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    3578:	2b00      	cmp	r3, #0
    357a:	dbf3      	blt.n	3564 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    357c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3580:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3584:	2120      	movs	r1, #32
    3586:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    358a:	e7f1      	b.n	3570 <z_arm_interrupt_init+0x10>
	}
}
    358c:	4770      	bx	lr
    358e:	bf00      	nop
    3590:	e000ecfc 	.word	0xe000ecfc

00003594 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    3594:	b508      	push	{r3, lr}
	if (_current == thread) {
    3596:	4b0e      	ldr	r3, [pc, #56]	; (35d0 <z_impl_k_thread_abort+0x3c>)
    3598:	689b      	ldr	r3, [r3, #8]
    359a:	4283      	cmp	r3, r0
    359c:	d00c      	beq.n	35b8 <z_impl_k_thread_abort+0x24>
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    359e:	f002 fb9b 	bl	5cd8 <z_thread_single_abort>
	__asm__ volatile(
    35a2:	f04f 0320 	mov.w	r3, #32
    35a6:	f3ef 8011 	mrs	r0, BASEPRI
    35aa:	f383 8811 	msr	BASEPRI, r3
    35ae:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    35b2:	f006 fadc 	bl	9b6e <z_reschedule_irqlock>

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    35b6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    35b8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    35bc:	b12b      	cbz	r3, 35ca <z_impl_k_thread_abort+0x36>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    35be:	4a05      	ldr	r2, [pc, #20]	; (35d4 <z_impl_k_thread_abort+0x40>)
    35c0:	6853      	ldr	r3, [r2, #4]
    35c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    35c6:	6053      	str	r3, [r2, #4]
    35c8:	e7e9      	b.n	359e <z_impl_k_thread_abort+0xa>
			z_self_abort(); /* Never returns */
    35ca:	f002 fce5 	bl	5f98 <z_self_abort>
    35ce:	bf00      	nop
    35d0:	20023240 	.word	0x20023240
    35d4:	e000ed00 	.word	0xe000ed00

000035d8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    35d8:	b500      	push	{lr}
    35da:	b085      	sub	sp, #20
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
		{
		.start = (uint32_t)&_ramfunc_ram_start,
    35dc:	4b09      	ldr	r3, [pc, #36]	; (3604 <z_arm_configure_static_mpu_regions+0x2c>)
		const struct k_mem_partition ramfunc_region =
    35de:	9301      	str	r3, [sp, #4]
		.size = (uint32_t)&_ramfunc_ram_size,
    35e0:	4b09      	ldr	r3, [pc, #36]	; (3608 <z_arm_configure_static_mpu_regions+0x30>)
		const struct k_mem_partition ramfunc_region =
    35e2:	9302      	str	r3, [sp, #8]
    35e4:	2306      	movs	r3, #6
    35e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    35ea:	2101      	movs	r1, #1
    35ec:	f8ad 100e 	strh.w	r1, [sp, #14]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    35f0:	ab01      	add	r3, sp, #4
    35f2:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    35f4:	4b05      	ldr	r3, [pc, #20]	; (360c <z_arm_configure_static_mpu_regions+0x34>)
    35f6:	4a06      	ldr	r2, [pc, #24]	; (3610 <z_arm_configure_static_mpu_regions+0x38>)
    35f8:	4668      	mov	r0, sp
    35fa:	f004 fb73 	bl	7ce4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    35fe:	b005      	add	sp, #20
    3600:	f85d fb04 	ldr.w	pc, [sp], #4
    3604:	20020000 	.word	0x20020000
    3608:	00000000 	.word	0x00000000
    360c:	20040000 	.word	0x20040000
    3610:	20020000 	.word	0x20020000

00003614 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    3614:	4b01      	ldr	r3, [pc, #4]	; (361c <mpu_init+0x8>)
    3616:	4a02      	ldr	r2, [pc, #8]	; (3620 <mpu_init+0xc>)
    3618:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    361a:	4770      	bx	lr
    361c:	e000ed90 	.word	0xe000ed90
    3620:	0044ffaa 	.word	0x0044ffaa

00003624 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    3624:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    3626:	680b      	ldr	r3, [r1, #0]
    3628:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    362c:	7a0c      	ldrb	r4, [r1, #8]
    362e:	f004 031f 	and.w	r3, r4, #31
    3632:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    3634:	68cb      	ldr	r3, [r1, #12]
    3636:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    363a:	0964      	lsrs	r4, r4, #5
    363c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    3640:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    3644:	4902      	ldr	r1, [pc, #8]	; (3650 <region_init+0x2c>)
    3646:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    3648:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    364a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    364c:	bc10      	pop	{r4}
    364e:	4770      	bx	lr
    3650:	e000ed90 	.word	0xe000ed90

00003654 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    3654:	b510      	push	{r4, lr}
    3656:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    3658:	280f      	cmp	r0, #15
    365a:	d803      	bhi.n	3664 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    365c:	f7ff ffe2 	bl	3624 <region_init>

	return index;
    3660:	4620      	mov	r0, r4
}
    3662:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3664:	f04f 0000 	mov.w	r0, #0
    3668:	2301      	movs	r3, #1
    366a:	f363 0002 	bfi	r0, r3, #0, #3
    366e:	f36f 00c5 	bfc	r0, #3, #3
    3672:	4b07      	ldr	r3, [pc, #28]	; (3690 <region_allocate_and_init+0x3c>)
    3674:	4a07      	ldr	r2, [pc, #28]	; (3694 <region_allocate_and_init+0x40>)
    3676:	1a9b      	subs	r3, r3, r2
    3678:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    367c:	f363 108f 	bfi	r0, r3, #6, #10
    3680:	4622      	mov	r2, r4
    3682:	4905      	ldr	r1, [pc, #20]	; (3698 <region_allocate_and_init+0x44>)
    3684:	f003 ffc7 	bl	7616 <log_string_sync>
		return -EINVAL;
    3688:	f06f 0015 	mvn.w	r0, #21
    368c:	e7e9      	b.n	3662 <region_allocate_and_init+0xe>
    368e:	bf00      	nop
    3690:	0000a0a4 	.word	0x0000a0a4
    3694:	0000a08c 	.word	0x0000a08c
    3698:	0000a8a0 	.word	0x0000a8a0

0000369c <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36a0:	b087      	sub	sp, #28
    36a2:	4680      	mov	r8, r0
    36a4:	468b      	mov	fp, r1
    36a6:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    36a8:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    36aa:	2600      	movs	r6, #0
    36ac:	e060      	b.n	3770 <mpu_configure_regions_and_partition+0xd4>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    36ae:	2301      	movs	r3, #1
    36b0:	f363 0002 	bfi	r0, r3, #0, #3
    36b4:	f36f 00c5 	bfc	r0, #3, #3
    36b8:	4b6b      	ldr	r3, [pc, #428]	; (3868 <mpu_configure_regions_and_partition+0x1cc>)
    36ba:	4a6c      	ldr	r2, [pc, #432]	; (386c <mpu_configure_regions_and_partition+0x1d0>)
    36bc:	1a9b      	subs	r3, r3, r2
    36be:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    36c2:	f363 108f 	bfi	r0, r3, #6, #10
    36c6:	4632      	mov	r2, r6
    36c8:	4969      	ldr	r1, [pc, #420]	; (3870 <mpu_configure_regions_and_partition+0x1d4>)
    36ca:	f003 ffa4 	bl	7616 <log_string_sync>
			return -EINVAL;
    36ce:	f06f 0415 	mvn.w	r4, #21
    36d2:	e016      	b.n	3702 <mpu_configure_regions_and_partition+0x66>
	return -EINVAL;
    36d4:	f06f 0515 	mvn.w	r5, #21
    36d8:	e067      	b.n	37aa <mpu_configure_regions_and_partition+0x10e>
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    36da:	f04f 0000 	mov.w	r0, #0
    36de:	2301      	movs	r3, #1
    36e0:	f363 0002 	bfi	r0, r3, #0, #3
    36e4:	f36f 00c5 	bfc	r0, #3, #3
    36e8:	4b5f      	ldr	r3, [pc, #380]	; (3868 <mpu_configure_regions_and_partition+0x1cc>)
    36ea:	4a60      	ldr	r2, [pc, #384]	; (386c <mpu_configure_regions_and_partition+0x1d0>)
    36ec:	1a9b      	subs	r3, r3, r2
    36ee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    36f2:	f363 108f 	bfi	r0, r3, #6, #10
    36f6:	462a      	mov	r2, r5
    36f8:	495e      	ldr	r1, [pc, #376]	; (3874 <mpu_configure_regions_and_partition+0x1d8>)
    36fa:	f003 ff8c 	bl	7616 <log_string_sync>
				u_reg_index);
			return -EINVAL;
    36fe:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    3702:	4620      	mov	r0, r4
    3704:	b007      	add	sp, #28
    3706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i]->start == u_reg_base) &&
    370a:	45ba      	cmp	sl, r7
    370c:	d166      	bne.n	37dc <mpu_configure_regions_and_partition+0x140>
			mpu_configure_region(u_reg_index, regions[i]);
    370e:	b2e8      	uxtb	r0, r5
    3710:	f004 facd 	bl	7cae <mpu_configure_region>
    3714:	e02b      	b.n	376e <mpu_configure_regions_and_partition+0xd2>
	MPU->RNR = index;
    3716:	4a58      	ldr	r2, [pc, #352]	; (3878 <mpu_configure_regions_and_partition+0x1dc>)
    3718:	f8c2 c008 	str.w	ip, [r2, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    371c:	68d3      	ldr	r3, [r2, #12]
    371e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    3722:	f020 001f 	bic.w	r0, r0, #31
    3726:	4318      	orrs	r0, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3728:	60d0      	str	r0, [r2, #12]
				mpu_configure_region(reg_index, regions[i]);
    372a:	f858 1009 	ldr.w	r1, [r8, r9]
    372e:	b2e0      	uxtb	r0, r4
    3730:	f004 fabd 	bl	7cae <mpu_configure_region>
    3734:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    3736:	f110 0f16 	cmn.w	r0, #22
    373a:	d0e2      	beq.n	3702 <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    373c:	3401      	adds	r4, #1
    373e:	e016      	b.n	376e <mpu_configure_regions_and_partition+0xd2>
				regions[i]->start - 1);
    3740:	3b01      	subs	r3, #1
	MPU->RNR = index;
    3742:	494d      	ldr	r1, [pc, #308]	; (3878 <mpu_configure_regions_and_partition+0x1dc>)
    3744:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3748:	690a      	ldr	r2, [r1, #16]
    374a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    374e:	f023 031f 	bic.w	r3, r3, #31
    3752:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3754:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, regions[i]);
    3756:	f858 1009 	ldr.w	r1, [r8, r9]
    375a:	b2e0      	uxtb	r0, r4
    375c:	f004 faa7 	bl	7cae <mpu_configure_region>
    3760:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    3762:	f110 0f16 	cmn.w	r0, #22
    3766:	d0cc      	beq.n	3702 <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    3768:	3401      	adds	r4, #1
    376a:	e000      	b.n	376e <mpu_configure_regions_and_partition+0xd2>
			reg_index++;
    376c:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    376e:	3601      	adds	r6, #1
    3770:	455e      	cmp	r6, fp
    3772:	dac6      	bge.n	3702 <mpu_configure_regions_and_partition+0x66>
		if (regions[i]->size == 0U) {
    3774:	ea4f 0986 	mov.w	r9, r6, lsl #2
    3778:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
    377c:	686f      	ldr	r7, [r5, #4]
    377e:	2f00      	cmp	r7, #0
    3780:	d0f5      	beq.n	376e <mpu_configure_regions_and_partition+0xd2>
		if (do_sanity_check &&
    3782:	9b01      	ldr	r3, [sp, #4]
    3784:	b123      	cbz	r3, 3790 <mpu_configure_regions_and_partition+0xf4>
			(!mpu_partition_is_valid(regions[i]))) {
    3786:	4628      	mov	r0, r5
    3788:	f004 fa7f 	bl	7c8a <mpu_partition_is_valid>
		if (do_sanity_check &&
    378c:	2800      	cmp	r0, #0
    378e:	d08e      	beq.n	36ae <mpu_configure_regions_and_partition+0x12>
			get_region_index(regions[i]->start, regions[i]->size);
    3790:	f8d5 a000 	ldr.w	sl, [r5]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    3794:	4650      	mov	r0, sl
    3796:	f004 faa9 	bl	7cec <arm_cmse_mpu_region_get>
    379a:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    379c:	eb07 000a 	add.w	r0, r7, sl
    37a0:	3801      	subs	r0, #1
    37a2:	f004 faa3 	bl	7cec <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    37a6:	4285      	cmp	r5, r0
    37a8:	d194      	bne.n	36d4 <mpu_configure_regions_and_partition+0x38>
		if ((u_reg_index == -EINVAL) ||
    37aa:	f115 0f16 	cmn.w	r5, #22
    37ae:	d094      	beq.n	36da <mpu_configure_regions_and_partition+0x3e>
			(u_reg_index > (reg_index - 1))) {
    37b0:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    37b2:	42ab      	cmp	r3, r5
    37b4:	db91      	blt.n	36da <mpu_configure_regions_and_partition+0x3e>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    37b6:	46ac      	mov	ip, r5
	MPU->RNR = index;
    37b8:	4b2f      	ldr	r3, [pc, #188]	; (3878 <mpu_configure_regions_and_partition+0x1dc>)
    37ba:	609d      	str	r5, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    37bc:	68da      	ldr	r2, [r3, #12]
    37be:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = index;
    37c2:	609d      	str	r5, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    37c4:	691f      	ldr	r7, [r3, #16]
    37c6:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    37ca:	f858 1009 	ldr.w	r1, [r8, r9]
    37ce:	680b      	ldr	r3, [r1, #0]
    37d0:	6848      	ldr	r0, [r1, #4]
    37d2:	4418      	add	r0, r3
    37d4:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    37d8:	4293      	cmp	r3, r2
    37da:	d096      	beq.n	370a <mpu_configure_regions_and_partition+0x6e>
		} else if (regions[i]->start == u_reg_base) {
    37dc:	4293      	cmp	r3, r2
    37de:	d09a      	beq.n	3716 <mpu_configure_regions_and_partition+0x7a>
		} else if (reg_last == u_reg_last) {
    37e0:	45ba      	cmp	sl, r7
    37e2:	d0ad      	beq.n	3740 <mpu_configure_regions_and_partition+0xa4>
				regions[i]->start - 1);
    37e4:	3b01      	subs	r3, #1
	MPU->RNR = index;
    37e6:	4924      	ldr	r1, [pc, #144]	; (3878 <mpu_configure_regions_and_partition+0x1dc>)
    37e8:	4665      	mov	r5, ip
    37ea:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    37ee:	690a      	ldr	r2, [r1, #16]
    37f0:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    37f4:	f023 031f 	bic.w	r3, r3, #31
    37f8:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    37fa:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, regions[i]);
    37fc:	f858 1009 	ldr.w	r1, [r8, r9]
    3800:	b2e0      	uxtb	r0, r4
    3802:	f004 fa54 	bl	7cae <mpu_configure_region>
    3806:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    3808:	f110 0f16 	cmn.w	r0, #22
    380c:	f43f af79 	beq.w	3702 <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    3810:	3001      	adds	r0, #1
	MPU->RNR = index;
    3812:	4b19      	ldr	r3, [pc, #100]	; (3878 <mpu_configure_regions_and_partition+0x1dc>)
    3814:	609d      	str	r5, [r3, #8]
	attr->rbar = MPU->RBAR &
    3816:	68d9      	ldr	r1, [r3, #12]
    3818:	f89d 2010 	ldrb.w	r2, [sp, #16]
    381c:	f361 0204 	bfi	r2, r1, #0, #5
    3820:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    3824:	691b      	ldr	r3, [r3, #16]
    3826:	f3c3 0342 	ubfx	r3, r3, #1, #3
    382a:	b2d2      	uxtb	r2, r2
    382c:	f363 1247 	bfi	r2, r3, #5, #3
    3830:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i]->start +
    3834:	f858 2009 	ldr.w	r2, [r8, r9]
    3838:	6811      	ldr	r1, [r2, #0]
				regions[i]->size;
    383a:	6854      	ldr	r4, [r2, #4]
			fill_region.base = regions[i]->start +
    383c:	4421      	add	r1, r4
    383e:	9102      	str	r1, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    3840:	6813      	ldr	r3, [r2, #0]
    3842:	4423      	add	r3, r4
    3844:	f023 031f 	bic.w	r3, r3, #31
    3848:	eba7 070a 	sub.w	r7, r7, sl
    384c:	441f      	add	r7, r3
    384e:	3f01      	subs	r7, #1
    3850:	f027 071f 	bic.w	r7, r7, #31
			fill_region.attr.r_limit =
    3854:	9705      	str	r7, [sp, #20]
				region_allocate_and_init(reg_index,
    3856:	a902      	add	r1, sp, #8
    3858:	b2c0      	uxtb	r0, r0
    385a:	f7ff fefb 	bl	3654 <region_allocate_and_init>
    385e:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    3860:	f110 0f16 	cmn.w	r0, #22
    3864:	d182      	bne.n	376c <mpu_configure_regions_and_partition+0xd0>
    3866:	e74c      	b.n	3702 <mpu_configure_regions_and_partition+0x66>
    3868:	0000a0a4 	.word	0x0000a0a4
    386c:	0000a08c 	.word	0x0000a08c
    3870:	0000a8c8 	.word	0x0000a8c8
    3874:	0000a8ec 	.word	0x0000a8ec
    3878:	e000ed90 	.word	0xe000ed90

0000387c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    387c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    387e:	4c03      	ldr	r4, [pc, #12]	; (388c <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    3880:	2301      	movs	r3, #1
    3882:	7822      	ldrb	r2, [r4, #0]
    3884:	f7ff ff0a 	bl	369c <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3888:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    388a:	bd10      	pop	{r4, pc}
    388c:	2002328d 	.word	0x2002328d

00003890 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3890:	4b03      	ldr	r3, [pc, #12]	; (38a0 <arm_core_mpu_enable+0x10>)
    3892:	2205      	movs	r2, #5
    3894:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    3896:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    389a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    389e:	4770      	bx	lr
    38a0:	e000ed90 	.word	0xe000ed90

000038a4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    38a4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    38a8:	4b01      	ldr	r3, [pc, #4]	; (38b0 <arm_core_mpu_disable+0xc>)
    38aa:	2200      	movs	r2, #0
    38ac:	605a      	str	r2, [r3, #4]
}
    38ae:	4770      	bx	lr
    38b0:	e000ed90 	.word	0xe000ed90

000038b4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    38b4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    38b6:	4b0e      	ldr	r3, [pc, #56]	; (38f0 <arm_mpu_init+0x3c>)
    38b8:	681d      	ldr	r5, [r3, #0]
    38ba:	2d10      	cmp	r5, #16
    38bc:	d815      	bhi.n	38ea <arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    38be:	f7ff fff1 	bl	38a4 <arm_core_mpu_disable>
	SCB_CleanInvalidateDCache();
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    38c2:	f7ff fea7 	bl	3614 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    38c6:	2400      	movs	r4, #0
    38c8:	42a5      	cmp	r5, r4
    38ca:	d908      	bls.n	38de <arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    38cc:	4b08      	ldr	r3, [pc, #32]	; (38f0 <arm_mpu_init+0x3c>)
    38ce:	6859      	ldr	r1, [r3, #4]
    38d0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    38d4:	4620      	mov	r0, r4
    38d6:	f7ff fea5 	bl	3624 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    38da:	3401      	adds	r4, #1
    38dc:	e7f4      	b.n	38c8 <arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    38de:	4b05      	ldr	r3, [pc, #20]	; (38f4 <arm_mpu_init+0x40>)
    38e0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    38e2:	f7ff ffd5 	bl	3890 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    38e6:	2000      	movs	r0, #0
}
    38e8:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    38ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    38ee:	e7fb      	b.n	38e8 <arm_mpu_init+0x34>
    38f0:	0000a920 	.word	0x0000a920
    38f4:	2002328d 	.word	0x2002328d

000038f8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    38f8:	4b01      	ldr	r3, [pc, #4]	; (3900 <__stdout_hook_install+0x8>)
    38fa:	6018      	str	r0, [r3, #0]
}
    38fc:	4770      	bx	lr
    38fe:	bf00      	nop
    3900:	20020034 	.word	0x20020034

00003904 <board_circuitdojo_feather_nrf9160_init>:

#define GPIO0 DT_LABEL(DT_NODELABEL(gpio0))
#define POWER_LATCH_PIN 31

static int board_circuitdojo_feather_nrf9160_init(struct device *dev)
{
    3904:	b538      	push	{r3, r4, r5, lr}
    3906:	480a      	ldr	r0, [pc, #40]	; (3930 <board_circuitdojo_feather_nrf9160_init+0x2c>)
    3908:	f001 ff20 	bl	574c <z_impl_device_get_binding>
	ARG_UNUSED(dev);

	/* Get the device binding */
	struct device *gpio = device_get_binding(GPIO0);
	if (gpio == NULL) {
    390c:	b168      	cbz	r0, 392a <board_circuitdojo_feather_nrf9160_init+0x26>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    390e:	68c4      	ldr	r4, [r0, #12]
	const struct gpio_driver_api *api =
    3910:	6882      	ldr	r2, [r0, #8]
	return api->pin_configure(port, pin, flags);
    3912:	6815      	ldr	r5, [r2, #0]
    3914:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    3918:	211f      	movs	r1, #31
    391a:	47a8      	blx	r5
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    391c:	b918      	cbnz	r0, 3926 <board_circuitdojo_feather_nrf9160_init+0x22>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    391e:	6823      	ldr	r3, [r4, #0]
    3920:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    3924:	6023      	str	r3, [r4, #0]
	}

	/* Configure latch pin as output. */
	gpio_pin_configure(gpio, POWER_LATCH_PIN, GPIO_OUTPUT_HIGH);

	return 0;
    3926:	2000      	movs	r0, #0
}
    3928:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    392a:	f06f 0012 	mvn.w	r0, #18
    392e:	e7fb      	b.n	3928 <board_circuitdojo_feather_nrf9160_init+0x24>
    3930:	0000a948 	.word	0x0000a948

00003934 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    3934:	b470      	push	{r4, r5, r6}
	return port->config;
    3936:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3938:	685e      	ldr	r6, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    393a:	4b30      	ldr	r3, [pc, #192]	; (39fc <gpio_nrfx_config+0xc8>)
    393c:	4013      	ands	r3, r2
    393e:	4830      	ldr	r0, [pc, #192]	; (3a00 <gpio_nrfx_config+0xcc>)
    3940:	4283      	cmp	r3, r0
    3942:	d027      	beq.n	3994 <gpio_nrfx_config+0x60>
    3944:	d812      	bhi.n	396c <gpio_nrfx_config+0x38>
    3946:	2b06      	cmp	r3, #6
    3948:	d026      	beq.n	3998 <gpio_nrfx_config+0x64>
    394a:	d904      	bls.n	3956 <gpio_nrfx_config+0x22>
    394c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3950:	d109      	bne.n	3966 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    3952:	2001      	movs	r0, #1
    3954:	e016      	b.n	3984 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3956:	b30b      	cbz	r3, 399c <gpio_nrfx_config+0x68>
    3958:	2b02      	cmp	r3, #2
    395a:	d101      	bne.n	3960 <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    395c:	2004      	movs	r0, #4
    395e:	e011      	b.n	3984 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3960:	f06f 0015 	mvn.w	r0, #21
    3964:	e03c      	b.n	39e0 <gpio_nrfx_config+0xac>
    3966:	f06f 0015 	mvn.w	r0, #21
    396a:	e039      	b.n	39e0 <gpio_nrfx_config+0xac>
    396c:	4825      	ldr	r0, [pc, #148]	; (3a04 <gpio_nrfx_config+0xd0>)
    396e:	4283      	cmp	r3, r0
    3970:	d016      	beq.n	39a0 <gpio_nrfx_config+0x6c>
    3972:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3976:	d101      	bne.n	397c <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    3978:	2003      	movs	r0, #3
    397a:	e003      	b.n	3984 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    397c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3980:	d139      	bne.n	39f6 <gpio_nrfx_config+0xc2>
		drive = NRF_GPIO_PIN_S0H1;
    3982:	2002      	movs	r0, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    3984:	f012 0f10 	tst.w	r2, #16
    3988:	d10c      	bne.n	39a4 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    398a:	f012 0f20 	tst.w	r2, #32
    398e:	d029      	beq.n	39e4 <gpio_nrfx_config+0xb0>
		pull = NRF_GPIO_PIN_PULLDOWN;
    3990:	2401      	movs	r4, #1
    3992:	e008      	b.n	39a6 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    3994:	2007      	movs	r0, #7
    3996:	e7f5      	b.n	3984 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    3998:	2006      	movs	r0, #6
    399a:	e7f3      	b.n	3984 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    399c:	2000      	movs	r0, #0
    399e:	e7f1      	b.n	3984 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    39a0:	2005      	movs	r0, #5
    39a2:	e7ef      	b.n	3984 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    39a4:	2403      	movs	r4, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    39a6:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    39aa:	f412 7f80 	tst.w	r2, #256	; 0x100
    39ae:	bf0c      	ite	eq
    39b0:	2501      	moveq	r5, #1
    39b2:	2500      	movne	r5, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    39b4:	f412 7f00 	tst.w	r2, #512	; 0x200
    39b8:	d005      	beq.n	39c6 <gpio_nrfx_config+0x92>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    39ba:	f412 6f00 	tst.w	r2, #2048	; 0x800
    39be:	d013      	beq.n	39e8 <gpio_nrfx_config+0xb4>
			nrf_gpio_port_out_set(reg, BIT(pin));
    39c0:	2201      	movs	r2, #1
    39c2:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    39c4:	60b2      	str	r2, [r6, #8]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    39c6:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    39ca:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    39ce:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    39d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    39d6:	3180      	adds	r1, #128	; 0x80
    39d8:	4a0b      	ldr	r2, [pc, #44]	; (3a08 <gpio_nrfx_config+0xd4>)
    39da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    39de:	2000      	movs	r0, #0
}
    39e0:	bc70      	pop	{r4, r5, r6}
    39e2:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    39e4:	2400      	movs	r4, #0
    39e6:	e7de      	b.n	39a6 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    39e8:	f412 6f80 	tst.w	r2, #1024	; 0x400
    39ec:	d0eb      	beq.n	39c6 <gpio_nrfx_config+0x92>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    39ee:	2201      	movs	r2, #1
    39f0:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    39f2:	60f2      	str	r2, [r6, #12]
}
    39f4:	e7e7      	b.n	39c6 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    39f6:	f06f 0015 	mvn.w	r0, #21
    39fa:	e7f1      	b.n	39e0 <gpio_nrfx_config+0xac>
    39fc:	00f00006 	.word	0x00f00006
    3a00:	00100006 	.word	0x00100006
    3a04:	00400002 	.word	0x00400002
    3a08:	50842500 	.word	0x50842500

00003a0c <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    3a0c:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    3a0e:	68c5      	ldr	r5, [r0, #12]
	return port->config;
    3a10:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    3a12:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    3a14:	696a      	ldr	r2, [r5, #20]
    3a16:	69ab      	ldr	r3, [r5, #24]
    3a18:	4313      	orrs	r3, r2
    3a1a:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    3a1e:	2201      	movs	r2, #1
	uint32_t pin = 0U;
    3a20:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    3a22:	e011      	b.n	3a48 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    3a24:	f04f 0c02 	mov.w	ip, #2
    *p_pin = pin_number & 0x1F;
    3a28:	f003 031f 	and.w	r3, r3, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3a2c:	4f0f      	ldr	r7, [pc, #60]	; (3a6c <cfg_level_pins+0x60>)
    3a2e:	3380      	adds	r3, #128	; 0x80
    3a30:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
    3a34:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3a38:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
    3a3c:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    3a40:	ea21 0102 	bic.w	r1, r1, r2
		}
		++pin;
    3a44:	3001      	adds	r0, #1
		bit <<= 1;
    3a46:	0052      	lsls	r2, r2, #1
	while (level_pins) {
    3a48:	b171      	cbz	r1, 3a68 <cfg_level_pins+0x5c>
		if (level_pins & bit) {
    3a4a:	420a      	tst	r2, r1
    3a4c:	d0fa      	beq.n	3a44 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3a4e:	7a34      	ldrb	r4, [r6, #8]
    3a50:	f000 031f 	and.w	r3, r0, #31
    3a54:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3a58:	692c      	ldr	r4, [r5, #16]
    3a5a:	40c4      	lsrs	r4, r0
    3a5c:	f014 0f01 	tst.w	r4, #1
    3a60:	d1e0      	bne.n	3a24 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    3a62:	f04f 0c03 	mov.w	ip, #3
    3a66:	e7df      	b.n	3a28 <cfg_level_pins+0x1c>
	}
}
    3a68:	bcf0      	pop	{r4, r5, r6, r7}
    3a6a:	4770      	bx	lr
    3a6c:	50842500 	.word	0x50842500

00003a70 <check_level_trigger_pins>:
 * @param port Pointer to GPIO port device.
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port)
{
    3a70:	b470      	push	{r4, r5, r6}
	return port->data;
    3a72:	68c3      	ldr	r3, [r0, #12]
	return port->config;
    3a74:	6840      	ldr	r0, [r0, #4]
	uint32_t out = data->pin_int_en;
    3a76:	68da      	ldr	r2, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    3a78:	6959      	ldr	r1, [r3, #20]
    3a7a:	699c      	ldr	r4, [r3, #24]
    3a7c:	4321      	orrs	r1, r4
    3a7e:	ea22 0201 	bic.w	r2, r2, r1
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    3a82:	6841      	ldr	r1, [r0, #4]
    return p_reg->IN;
    3a84:	6909      	ldr	r1, [r1, #16]

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    3a86:	6918      	ldr	r0, [r3, #16]
    3a88:	4048      	eors	r0, r1

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    3a8a:	ea22 0000 	bic.w	r0, r2, r0
	/* Disable sense detection on all pins that use it, whether
	 * they appear to have triggered or not.  This ensures
	 * nobody's requesting DETECT.
	 */
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    3a8e:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    3a90:	2400      	movs	r4, #0

	while (level_pins) {
    3a92:	e001      	b.n	3a98 <check_level_trigger_pins+0x28>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			level_pins &= ~bit;
		}
		++pin;
    3a94:	3401      	adds	r4, #1
		bit <<= 1;
    3a96:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    3a98:	b172      	cbz	r2, 3ab8 <check_level_trigger_pins+0x48>
		if (level_pins & bit) {
    3a9a:	421a      	tst	r2, r3
    3a9c:	d0fa      	beq.n	3a94 <check_level_trigger_pins+0x24>
    *p_pin = pin_number & 0x1F;
    3a9e:	f004 011f 	and.w	r1, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3aa2:	4e06      	ldr	r6, [pc, #24]	; (3abc <check_level_trigger_pins+0x4c>)
    3aa4:	3180      	adds	r1, #128	; 0x80
    3aa6:	f856 5021 	ldr.w	r5, [r6, r1, lsl #2]
    3aaa:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3aae:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
			level_pins &= ~bit;
    3ab2:	ea22 0203 	bic.w	r2, r2, r3
    3ab6:	e7ed      	b.n	3a94 <check_level_trigger_pins+0x24>
	}

	return out;
}
    3ab8:	bc70      	pop	{r4, r5, r6}
    3aba:	4770      	bx	lr
    3abc:	50842500 	.word	0x50842500

00003ac0 <gpiote_event_handler>:
#ifdef CONFIG_GPIO_NRF_P1
DEVICE_DECLARE(gpio_nrfx_p1);
#endif

static void gpiote_event_handler(void)
{
    3ac0:	b570      	push	{r4, r5, r6, lr}
    3ac2:	b082      	sub	sp, #8
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    3ac4:	2300      	movs	r3, #0
    3ac6:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE bool nrf_gpiote_event_check(NRF_GPIOTE_Type const * p_reg,
                                              nrf_gpiote_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ac8:	4b2d      	ldr	r3, [pc, #180]	; (3b80 <gpiote_event_handler+0xc0>)
    3aca:	681c      	ldr	r4, [r3, #0]
	bool port_event = nrf_gpiote_event_check(NRF_GPIOTE,
						 NRF_GPIOTE_EVENT_PORT);

	if (port_event) {
    3acc:	b90c      	cbnz	r4, 3ad2 <gpiote_event_handler+0x12>
{
    3ace:	2100      	movs	r1, #0
    3ad0:	e009      	b.n	3ae6 <gpiote_event_handler+0x26>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    3ad2:	482c      	ldr	r0, [pc, #176]	; (3b84 <gpiote_event_handler+0xc4>)
    3ad4:	f7ff ffcc 	bl	3a70 <check_level_trigger_pins>
		fired_triggers[0] =
    3ad8:	9001      	str	r0, [sp, #4]
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3ada:	4b29      	ldr	r3, [pc, #164]	; (3b80 <gpiote_event_handler+0xc0>)
    3adc:	2200      	movs	r2, #0
    3ade:	601a      	str	r2, [r3, #0]
    3ae0:	681b      	ldr	r3, [r3, #0]
    nrf_event_readback((void *)nrf_gpiote_event_address_get(p_reg, event));
}
    3ae2:	e7f4      	b.n	3ace <gpiote_event_handler+0xe>
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3ae4:	3101      	adds	r1, #1
    3ae6:	2907      	cmp	r1, #7
    3ae8:	d826      	bhi.n	3b38 <gpiote_event_handler+0x78>
		nrf_gpiote_event_t evt =
    3aea:	f101 0340 	add.w	r3, r1, #64	; 0x40
    3aee:	009b      	lsls	r3, r3, #2
    3af0:	b29a      	uxth	r2, r3
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    3af2:	2301      	movs	r3, #1
    3af4:	408b      	lsls	r3, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    3af6:	4824      	ldr	r0, [pc, #144]	; (3b88 <gpiote_event_handler+0xc8>)
    3af8:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    3afc:	4203      	tst	r3, r0
    3afe:	d0f1      	beq.n	3ae4 <gpiote_event_handler+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b00:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    3b04:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	2b00      	cmp	r3, #0
    3b0c:	d0ea      	beq.n	3ae4 <gpiote_event_handler+0x24>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3b0e:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    3b12:	481d      	ldr	r0, [pc, #116]	; (3b88 <gpiote_event_handler+0xc8>)
    3b14:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    3b18:	f3c0 2004 	ubfx	r0, r0, #8, #5
		    nrf_gpiote_event_check(NRF_GPIOTE, evt)) {
			uint32_t abs_pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, i);
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    3b1c:	2301      	movs	r3, #1
    3b1e:	fa03 f000 	lsl.w	r0, r3, r0
    3b22:	9b01      	ldr	r3, [sp, #4]
    3b24:	4303      	orrs	r3, r0
    3b26:	9301      	str	r3, [sp, #4]
    return ((uint32_t)p_reg + event);
    3b28:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    3b2c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3b30:	2200      	movs	r2, #0
    3b32:	601a      	str	r2, [r3, #0]
    3b34:	681b      	ldr	r3, [r3, #0]
}
    3b36:	e7d5      	b.n	3ae4 <gpiote_event_handler+0x24>
			nrf_gpiote_event_clear(NRF_GPIOTE, evt);
		}
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
    3b38:	9e01      	ldr	r6, [sp, #4]
    3b3a:	b916      	cbnz	r6, 3b42 <gpiote_event_handler+0x82>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
	}
#endif

	if (port_event) {
    3b3c:	b9dc      	cbnz	r4, 3b76 <gpiote_event_handler+0xb6>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
#endif
	}
}
    3b3e:	b002      	add	sp, #8
    3b40:	bd70      	pop	{r4, r5, r6, pc}
    3b42:	4b12      	ldr	r3, [pc, #72]	; (3b8c <gpiote_event_handler+0xcc>)
    3b44:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3b46:	b119      	cbz	r1, 3b50 <gpiote_event_handler+0x90>
    3b48:	460d      	mov	r5, r1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3b4a:	b149      	cbz	r1, 3b60 <gpiote_event_handler+0xa0>
	return node->next;
    3b4c:	680d      	ldr	r5, [r1, #0]
    3b4e:	e007      	b.n	3b60 <gpiote_event_handler+0xa0>
    3b50:	460d      	mov	r5, r1
    3b52:	e005      	b.n	3b60 <gpiote_event_handler+0xa0>
    3b54:	b16d      	cbz	r5, 3b72 <gpiote_event_handler+0xb2>
    3b56:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    3b58:	b105      	cbz	r5, 3b5c <gpiote_event_handler+0x9c>
	return node->next;
    3b5a:	682b      	ldr	r3, [r5, #0]
    3b5c:	4629      	mov	r1, r5
    3b5e:	461d      	mov	r5, r3
    3b60:	2900      	cmp	r1, #0
    3b62:	d0eb      	beq.n	3b3c <gpiote_event_handler+0x7c>
		if (cb->pin_mask & pins) {
    3b64:	688a      	ldr	r2, [r1, #8]
    3b66:	4032      	ands	r2, r6
    3b68:	d0f4      	beq.n	3b54 <gpiote_event_handler+0x94>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3b6a:	684b      	ldr	r3, [r1, #4]
    3b6c:	4805      	ldr	r0, [pc, #20]	; (3b84 <gpiote_event_handler+0xc4>)
    3b6e:	4798      	blx	r3
    3b70:	e7f0      	b.n	3b54 <gpiote_event_handler+0x94>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3b72:	462b      	mov	r3, r5
    3b74:	e7f2      	b.n	3b5c <gpiote_event_handler+0x9c>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    3b76:	4803      	ldr	r0, [pc, #12]	; (3b84 <gpiote_event_handler+0xc4>)
    3b78:	f7ff ff48 	bl	3a0c <cfg_level_pins>
}
    3b7c:	e7df      	b.n	3b3e <gpiote_event_handler+0x7e>
    3b7e:	bf00      	nop
    3b80:	5000d17c 	.word	0x5000d17c
    3b84:	200200f4 	.word	0x200200f4
    3b88:	5000d000 	.word	0x5000d000
    3b8c:	200231f8 	.word	0x200231f8

00003b90 <gpiote_pin_cleanup>:
{
    3b90:	b430      	push	{r4, r5}
    return p_reg->INTENSET & mask;
    3b92:	4b17      	ldr	r3, [pc, #92]	; (3bf0 <gpiote_pin_cleanup+0x60>)
    3b94:	f8d3 5304 	ldr.w	r5, [r3, #772]	; 0x304
    3b98:	b2ed      	uxtb	r5, r5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3b9a:	2300      	movs	r3, #0
    3b9c:	e000      	b.n	3ba0 <gpiote_pin_cleanup+0x10>
    3b9e:	3301      	adds	r3, #1
    3ba0:	2b07      	cmp	r3, #7
    3ba2:	d822      	bhi.n	3bea <gpiote_pin_cleanup+0x5a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3ba4:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    3ba8:	4c11      	ldr	r4, [pc, #68]	; (3bf0 <gpiote_pin_cleanup+0x60>)
    3baa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    3bae:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    3bb2:	4291      	cmp	r1, r2
    3bb4:	d1f3      	bne.n	3b9e <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    3bb6:	fa25 f203 	lsr.w	r2, r5, r3
    3bba:	f012 0f01 	tst.w	r2, #1
    3bbe:	d0ee      	beq.n	3b9e <gpiote_pin_cleanup+0xe>
			(void)atomic_and(mask, ~BIT(i));
    3bc0:	2201      	movs	r2, #1
    3bc2:	409a      	lsls	r2, r3
    3bc4:	43d1      	mvns	r1, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3bc6:	e8d0 4fef 	ldaex	r4, [r0]
    3bca:	400c      	ands	r4, r1
    3bcc:	e8c0 4fe5 	stlex	r5, r4, [r0]
    3bd0:	2d00      	cmp	r5, #0
    3bd2:	d1f8      	bne.n	3bc6 <gpiote_pin_cleanup+0x36>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    3bd4:	4906      	ldr	r1, [pc, #24]	; (3bf0 <gpiote_pin_cleanup+0x60>)
    3bd6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3bda:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    3bde:	f020 0001 	bic.w	r0, r0, #1
    3be2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->INTENCLR = mask;
    3be6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
}
    3bea:	bc30      	pop	{r4, r5}
    3bec:	4770      	bx	lr
    3bee:	bf00      	nop
    3bf0:	5000d000 	.word	0x5000d000

00003bf4 <gpiote_channel_alloc>:
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3bf4:	2300      	movs	r3, #0
    3bf6:	2b07      	cmp	r3, #7
    3bf8:	d842      	bhi.n	3c80 <gpiote_channel_alloc+0x8c>
{
    3bfa:	b470      	push	{r4, r5, r6}
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    3bfc:	2401      	movs	r4, #1
    3bfe:	409c      	lsls	r4, r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3c00:	e8d0 5fef 	ldaex	r5, [r0]
    3c04:	ea45 0604 	orr.w	r6, r5, r4
    3c08:	e8c0 6fec 	stlex	ip, r6, [r0]
    3c0c:	f1bc 0f00 	cmp.w	ip, #0
    3c10:	d1f6      	bne.n	3c00 <gpiote_channel_alloc+0xc>
		if ((prev & BIT(channel)) == 0) {
    3c12:	40dd      	lsrs	r5, r3
    3c14:	f015 0f01 	tst.w	r5, #1
    3c18:	d007      	beq.n	3c2a <gpiote_channel_alloc+0x36>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3c1a:	3301      	adds	r3, #1
    3c1c:	b2db      	uxtb	r3, r3
    3c1e:	2b07      	cmp	r3, #7
    3c20:	d9ec      	bls.n	3bfc <gpiote_channel_alloc+0x8>
	return -ENODEV;
    3c22:	f06f 0012 	mvn.w	r0, #18
}
    3c26:	bc70      	pop	{r4, r5, r6}
    3c28:	4770      	bx	lr
			nrf_gpiote_event_t evt =
    3c2a:	f103 0040 	add.w	r0, r3, #64	; 0x40
    3c2e:	0080      	lsls	r0, r0, #2
    3c30:	b280      	uxth	r0, r0
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3c32:	4d15      	ldr	r5, [pc, #84]	; (3c88 <gpiote_channel_alloc+0x94>)
    3c34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3c38:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    3c3c:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    3c40:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    3c44:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c48:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    3c4c:	0209      	lsls	r1, r1, #8
    3c4e:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    3c52:	0412      	lsls	r2, r2, #16
    3c54:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c58:	430a      	orrs	r2, r1
    3c5a:	4332      	orrs	r2, r6
    3c5c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    3c60:	f100 42a0 	add.w	r2, r0, #1342177280	; 0x50000000
    3c64:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3c68:	2000      	movs	r0, #0
    3c6a:	6010      	str	r0, [r2, #0]
    3c6c:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3c6e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    3c72:	f042 0201 	orr.w	r2, r2, #1
    3c76:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    p_reg->INTENSET = mask;
    3c7a:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
			return 0;
    3c7e:	e7d2      	b.n	3c26 <gpiote_channel_alloc+0x32>
	return -ENODEV;
    3c80:	f06f 0012 	mvn.w	r0, #18
}
    3c84:	4770      	bx	lr
    3c86:	bf00      	nop
    3c88:	5000d000 	.word	0x5000d000

00003c8c <gpiote_pin_int_cfg>:
{
    3c8c:	b570      	push	{r4, r5, r6, lr}
    3c8e:	460c      	mov	r4, r1
	return port->data;
    3c90:	68c6      	ldr	r6, [r0, #12]
	return port->config;
    3c92:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3c94:	7a1b      	ldrb	r3, [r3, #8]
    3c96:	f001 051f 	and.w	r5, r1, #31
    3c9a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	gpiote_pin_cleanup(&gpiote_alloc_mask, abs_pin);
    3c9e:	4629      	mov	r1, r5
    3ca0:	4821      	ldr	r0, [pc, #132]	; (3d28 <gpiote_pin_int_cfg+0x9c>)
    3ca2:	f7ff ff75 	bl	3b90 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    3ca6:	f005 021f 	and.w	r2, r5, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3caa:	4920      	ldr	r1, [pc, #128]	; (3d2c <gpiote_pin_int_cfg+0xa0>)
    3cac:	f102 0080 	add.w	r0, r2, #128	; 0x80
    3cb0:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    3cb4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3cb8:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    3cbc:	68f3      	ldr	r3, [r6, #12]
    3cbe:	40e3      	lsrs	r3, r4
    3cc0:	f013 0f01 	tst.w	r3, #1
    3cc4:	d02e      	beq.n	3d24 <gpiote_pin_int_cfg+0x98>
		if (data->trig_edge & BIT(pin)) {
    3cc6:	6973      	ldr	r3, [r6, #20]
    3cc8:	40e3      	lsrs	r3, r4
    3cca:	f013 0f01 	tst.w	r3, #1
    3cce:	d014      	beq.n	3cfa <gpiote_pin_int_cfg+0x6e>
			if (data->double_edge & BIT(pin)) {
    3cd0:	69b3      	ldr	r3, [r6, #24]
    3cd2:	40e3      	lsrs	r3, r4
    3cd4:	f013 0f01 	tst.w	r3, #1
    3cd8:	d107      	bne.n	3cea <gpiote_pin_int_cfg+0x5e>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    3cda:	6931      	ldr	r1, [r6, #16]
    3cdc:	fa21 f404 	lsr.w	r4, r1, r4
    3ce0:	f014 0f01 	tst.w	r4, #1
    3ce4:	d007      	beq.n	3cf6 <gpiote_pin_int_cfg+0x6a>
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    3ce6:	2201      	movs	r2, #1
    3ce8:	e000      	b.n	3cec <gpiote_pin_int_cfg+0x60>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3cea:	2203      	movs	r2, #3
			res = gpiote_channel_alloc(&gpiote_alloc_mask,
    3cec:	4629      	mov	r1, r5
    3cee:	480e      	ldr	r0, [pc, #56]	; (3d28 <gpiote_pin_int_cfg+0x9c>)
    3cf0:	f7ff ff80 	bl	3bf4 <gpiote_channel_alloc>
    3cf4:	e017      	b.n	3d26 <gpiote_pin_int_cfg+0x9a>
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    3cf6:	2202      	movs	r2, #2
    3cf8:	e7f8      	b.n	3cec <gpiote_pin_int_cfg+0x60>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3cfa:	6931      	ldr	r1, [r6, #16]
    3cfc:	fa21 f404 	lsr.w	r4, r1, r4
    3d00:	f014 0f01 	tst.w	r4, #1
    3d04:	d10c      	bne.n	3d20 <gpiote_pin_int_cfg+0x94>
	return NRF_GPIO_PIN_SENSE_LOW;
    3d06:	2003      	movs	r0, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3d08:	4908      	ldr	r1, [pc, #32]	; (3d2c <gpiote_pin_int_cfg+0xa0>)
    3d0a:	3280      	adds	r2, #128	; 0x80
    3d0c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    3d10:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3d14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    3d18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	int res = 0;
    3d1c:	2000      	movs	r0, #0
}
    3d1e:	e002      	b.n	3d26 <gpiote_pin_int_cfg+0x9a>
		return NRF_GPIO_PIN_SENSE_HIGH;
    3d20:	2002      	movs	r0, #2
    3d22:	e7f1      	b.n	3d08 <gpiote_pin_int_cfg+0x7c>
	int res = 0;
    3d24:	2000      	movs	r0, #0
}
    3d26:	bd70      	pop	{r4, r5, r6, pc}
    3d28:	20023214 	.word	0x20023214
    3d2c:	50842500 	.word	0x50842500

00003d30 <gpio_nrfx_pin_interrupt_configure>:
{
    3d30:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    3d32:	68c4      	ldr	r4, [r0, #12]
	return port->config;
    3d34:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3d36:	7a2e      	ldrb	r6, [r5, #8]
    3d38:	f001 051f 	and.w	r5, r1, #31
    3d3c:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if ((mode == GPIO_INT_MODE_EDGE) &&
    3d40:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3d44:	d025      	beq.n	3d92 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3d46:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3d4a:	d02e      	beq.n	3daa <gpio_nrfx_pin_interrupt_configure+0x7a>
    3d4c:	68e5      	ldr	r5, [r4, #12]
    3d4e:	2601      	movs	r6, #1
    3d50:	408e      	lsls	r6, r1
    3d52:	4335      	orrs	r5, r6
    3d54:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3d56:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3d5a:	d02c      	beq.n	3db6 <gpio_nrfx_pin_interrupt_configure+0x86>
    3d5c:	6962      	ldr	r2, [r4, #20]
    3d5e:	2501      	movs	r5, #1
    3d60:	408d      	lsls	r5, r1
    3d62:	ea22 0205 	bic.w	r2, r2, r5
    3d66:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3d68:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3d6c:	d028      	beq.n	3dc0 <gpio_nrfx_pin_interrupt_configure+0x90>
    3d6e:	69a2      	ldr	r2, [r4, #24]
    3d70:	2501      	movs	r5, #1
    3d72:	408d      	lsls	r5, r1
    3d74:	ea22 0205 	bic.w	r2, r2, r5
    3d78:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    3d7e:	d024      	beq.n	3dca <gpio_nrfx_pin_interrupt_configure+0x9a>
    3d80:	6923      	ldr	r3, [r4, #16]
    3d82:	2201      	movs	r2, #1
    3d84:	408a      	lsls	r2, r1
    3d86:	ea23 0302 	bic.w	r3, r3, r2
    3d8a:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    3d8c:	f7ff ff7e 	bl	3c8c <gpiote_pin_int_cfg>
}
    3d90:	bd70      	pop	{r4, r5, r6, pc}
    *p_pin = pin_number & 0x1F;
    3d92:	f005 051f 	and.w	r5, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3d96:	3580      	adds	r5, #128	; 0x80
    3d98:	4e0e      	ldr	r6, [pc, #56]	; (3dd4 <gpio_nrfx_pin_interrupt_configure+0xa4>)
    3d9a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    3d9e:	f015 0f01 	tst.w	r5, #1
    3da2:	d0d0      	beq.n	3d46 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    3da4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3da8:	e7f2      	b.n	3d90 <gpio_nrfx_pin_interrupt_configure+0x60>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3daa:	68e5      	ldr	r5, [r4, #12]
    3dac:	2601      	movs	r6, #1
    3dae:	408e      	lsls	r6, r1
    3db0:	ea25 0506 	bic.w	r5, r5, r6
    3db4:	e7ce      	b.n	3d54 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3db6:	6962      	ldr	r2, [r4, #20]
    3db8:	2501      	movs	r5, #1
    3dba:	408d      	lsls	r5, r1
    3dbc:	432a      	orrs	r2, r5
    3dbe:	e7d2      	b.n	3d66 <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3dc0:	69a2      	ldr	r2, [r4, #24]
    3dc2:	2501      	movs	r5, #1
    3dc4:	408d      	lsls	r5, r1
    3dc6:	432a      	orrs	r2, r5
    3dc8:	e7d6      	b.n	3d78 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3dca:	6923      	ldr	r3, [r4, #16]
    3dcc:	2201      	movs	r2, #1
    3dce:	408a      	lsls	r2, r1
    3dd0:	4313      	orrs	r3, r2
    3dd2:	e7da      	b.n	3d8a <gpio_nrfx_pin_interrupt_configure+0x5a>
    3dd4:	50842500 	.word	0x50842500

00003dd8 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3dd8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    3dda:	4b0b      	ldr	r3, [pc, #44]	; (3e08 <gpio_nrfx_init+0x30>)
    3ddc:	781b      	ldrb	r3, [r3, #0]
    3dde:	b10b      	cbz	r3, 3de4 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    3de0:	2000      	movs	r0, #0
    3de2:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    3de4:	4b08      	ldr	r3, [pc, #32]	; (3e08 <gpio_nrfx_init+0x30>)
    3de6:	2201      	movs	r2, #1
    3de8:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3dea:	2200      	movs	r2, #0
    3dec:	2105      	movs	r1, #5
    3dee:	200d      	movs	r0, #13
    3df0:	f7ff fa30 	bl	3254 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    3df4:	200d      	movs	r0, #13
    3df6:	f7ff fa0f 	bl	3218 <arch_irq_enable>
    3dfa:	4b04      	ldr	r3, [pc, #16]	; (3e0c <gpio_nrfx_init+0x34>)
    3dfc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3e00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3e04:	e7ec      	b.n	3de0 <gpio_nrfx_init+0x8>
    3e06:	bf00      	nop
    3e08:	2002328e 	.word	0x2002328e
    3e0c:	5000d000 	.word	0x5000d000

00003e10 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3e10:	4b03      	ldr	r3, [pc, #12]	; (3e20 <nvmc_wait_ready+0x10>)
    3e12:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
    3e16:	f013 0f01 	tst.w	r3, #1
    3e1a:	d0f9      	beq.n	3e10 <nvmc_wait_ready>
	}
}
    3e1c:	4770      	bx	lr
    3e1e:	bf00      	nop
    3e20:	50039000 	.word	0x50039000

00003e24 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    3e24:	4b02      	ldr	r3, [pc, #8]	; (3e30 <flash_nrf_pages_layout+0xc>)
    3e26:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    3e28:	2301      	movs	r3, #1
    3e2a:	6013      	str	r3, [r2, #0]
}
    3e2c:	4770      	bx	lr
    3e2e:	bf00      	nop
    3e30:	20023218 	.word	0x20023218

00003e34 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    3e34:	4800      	ldr	r0, [pc, #0]	; (3e38 <flash_nrf_get_parameters+0x4>)
    3e36:	4770      	bx	lr
    3e38:	0000aa04 	.word	0x0000aa04

00003e3c <flash_nrf_erase>:
{
    3e3c:	b570      	push	{r4, r5, r6, lr}
    3e3e:	460c      	mov	r4, r1
    3e40:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3e42:	f004 f9a2 	bl	818a <nrfx_nvmc_flash_page_size_get>
    3e46:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
    3e48:	f004 f99b 	bl	8182 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    3e4c:	42a0      	cmp	r0, r4
    3e4e:	d914      	bls.n	3e7a <flash_nrf_erase+0x3e>
    3e50:	2c00      	cmp	r4, #0
    3e52:	db12      	blt.n	3e7a <flash_nrf_erase+0x3e>
	    addr < 0 ||
    3e54:	42a8      	cmp	r0, r5
    3e56:	d310      	bcc.n	3e7a <flash_nrf_erase+0x3e>
	    (addr) + len > flash_size) {
    3e58:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    3e5a:	4298      	cmp	r0, r3
    3e5c:	d30d      	bcc.n	3e7a <flash_nrf_erase+0x3e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    3e5e:	fbb4 f3f6 	udiv	r3, r4, r6
    3e62:	fb06 4313 	mls	r3, r6, r3, r4
    3e66:	b9f3      	cbnz	r3, 3ea6 <flash_nrf_erase+0x6a>
    3e68:	fbb5 f3f6 	udiv	r3, r5, r6
    3e6c:	fb06 5313 	mls	r3, r6, r3, r5
    3e70:	b9cb      	cbnz	r3, 3ea6 <flash_nrf_erase+0x6a>
		if (!n_pages) {
    3e72:	42ae      	cmp	r6, r5
    3e74:	d92d      	bls.n	3ed2 <flash_nrf_erase+0x96>
			return 0;
    3e76:	2000      	movs	r0, #0
    3e78:	e014      	b.n	3ea4 <flash_nrf_erase+0x68>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3e7a:	f04f 0000 	mov.w	r0, #0
    3e7e:	2301      	movs	r3, #1
    3e80:	f363 0002 	bfi	r0, r3, #0, #3
    3e84:	f36f 00c5 	bfc	r0, #3, #3
    3e88:	4b14      	ldr	r3, [pc, #80]	; (3edc <flash_nrf_erase+0xa0>)
    3e8a:	4a15      	ldr	r2, [pc, #84]	; (3ee0 <flash_nrf_erase+0xa4>)
    3e8c:	1a9b      	subs	r3, r3, r2
    3e8e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    3e92:	f363 108f 	bfi	r0, r3, #6, #10
    3e96:	462b      	mov	r3, r5
    3e98:	4622      	mov	r2, r4
    3e9a:	4912      	ldr	r1, [pc, #72]	; (3ee4 <flash_nrf_erase+0xa8>)
    3e9c:	f003 fbbb 	bl	7616 <log_string_sync>
		return -EINVAL;
    3ea0:	f06f 0015 	mvn.w	r0, #21
}
    3ea4:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    3ea6:	f04f 0000 	mov.w	r0, #0
    3eaa:	2301      	movs	r3, #1
    3eac:	f363 0002 	bfi	r0, r3, #0, #3
    3eb0:	f36f 00c5 	bfc	r0, #3, #3
    3eb4:	4b09      	ldr	r3, [pc, #36]	; (3edc <flash_nrf_erase+0xa0>)
    3eb6:	4a0a      	ldr	r2, [pc, #40]	; (3ee0 <flash_nrf_erase+0xa4>)
    3eb8:	1a9b      	subs	r3, r3, r2
    3eba:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    3ebe:	f363 108f 	bfi	r0, r3, #6, #10
    3ec2:	462b      	mov	r3, r5
    3ec4:	4622      	mov	r2, r4
    3ec6:	4908      	ldr	r1, [pc, #32]	; (3ee8 <flash_nrf_erase+0xac>)
    3ec8:	f003 fba5 	bl	7616 <log_string_sync>
			return -EINVAL;
    3ecc:	f06f 0015 	mvn.w	r0, #21
    3ed0:	e7e8      	b.n	3ea4 <flash_nrf_erase+0x68>
		ret = erase(addr, size);
    3ed2:	4629      	mov	r1, r5
    3ed4:	4620      	mov	r0, r4
    3ed6:	f003 fff9 	bl	7ecc <erase>
	return ret;
    3eda:	e7e3      	b.n	3ea4 <flash_nrf_erase+0x68>
    3edc:	0000a094 	.word	0x0000a094
    3ee0:	0000a08c 	.word	0x0000a08c
    3ee4:	0000a980 	.word	0x0000a980
    3ee8:	0000a9a0 	.word	0x0000a9a0

00003eec <flash_nrf_write>:
{
    3eec:	b570      	push	{r4, r5, r6, lr}
    3eee:	460c      	mov	r4, r1
    3ef0:	4616      	mov	r6, r2
    3ef2:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    3ef4:	f004 f945 	bl	8182 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    3ef8:	4284      	cmp	r4, r0
    3efa:	d20f      	bcs.n	3f1c <flash_nrf_write+0x30>
    3efc:	2c00      	cmp	r4, #0
    3efe:	db0d      	blt.n	3f1c <flash_nrf_write+0x30>
	    addr < 0 ||
    3f00:	4285      	cmp	r5, r0
    3f02:	d80b      	bhi.n	3f1c <flash_nrf_write+0x30>
	    (addr) + len > flash_size) {
    3f04:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    3f06:	4283      	cmp	r3, r0
    3f08:	d808      	bhi.n	3f1c <flash_nrf_write+0x30>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    3f0a:	f014 0f03 	tst.w	r4, #3
    3f0e:	d11b      	bne.n	3f48 <flash_nrf_write+0x5c>
    3f10:	f015 0f03 	tst.w	r5, #3
    3f14:	d118      	bne.n	3f48 <flash_nrf_write+0x5c>
	if (!len) {
    3f16:	bb6d      	cbnz	r5, 3f74 <flash_nrf_write+0x88>
		return 0;
    3f18:	2000      	movs	r0, #0
    3f1a:	e014      	b.n	3f46 <flash_nrf_write+0x5a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3f1c:	f04f 0000 	mov.w	r0, #0
    3f20:	2301      	movs	r3, #1
    3f22:	f363 0002 	bfi	r0, r3, #0, #3
    3f26:	f36f 00c5 	bfc	r0, #3, #3
    3f2a:	4b15      	ldr	r3, [pc, #84]	; (3f80 <flash_nrf_write+0x94>)
    3f2c:	4a15      	ldr	r2, [pc, #84]	; (3f84 <flash_nrf_write+0x98>)
    3f2e:	1a9b      	subs	r3, r3, r2
    3f30:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    3f34:	f363 108f 	bfi	r0, r3, #6, #10
    3f38:	462b      	mov	r3, r5
    3f3a:	4622      	mov	r2, r4
    3f3c:	4912      	ldr	r1, [pc, #72]	; (3f88 <flash_nrf_write+0x9c>)
    3f3e:	f003 fb6a 	bl	7616 <log_string_sync>
		return -EINVAL;
    3f42:	f06f 0015 	mvn.w	r0, #21
}
    3f46:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3f48:	f04f 0000 	mov.w	r0, #0
    3f4c:	2301      	movs	r3, #1
    3f4e:	f363 0002 	bfi	r0, r3, #0, #3
    3f52:	f36f 00c5 	bfc	r0, #3, #3
    3f56:	4b0a      	ldr	r3, [pc, #40]	; (3f80 <flash_nrf_write+0x94>)
    3f58:	4a0a      	ldr	r2, [pc, #40]	; (3f84 <flash_nrf_write+0x98>)
    3f5a:	1a9b      	subs	r3, r3, r2
    3f5c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    3f60:	f363 108f 	bfi	r0, r3, #6, #10
    3f64:	462b      	mov	r3, r5
    3f66:	4622      	mov	r2, r4
    3f68:	4908      	ldr	r1, [pc, #32]	; (3f8c <flash_nrf_write+0xa0>)
    3f6a:	f003 fb54 	bl	7616 <log_string_sync>
		return -EINVAL;
    3f6e:	f06f 0015 	mvn.w	r0, #21
    3f72:	e7e8      	b.n	3f46 <flash_nrf_write+0x5a>
		ret = write(addr, data, len);
    3f74:	462a      	mov	r2, r5
    3f76:	4631      	mov	r1, r6
    3f78:	4620      	mov	r0, r4
    3f7a:	f003 ffc6 	bl	7f0a <write>
	return ret;
    3f7e:	e7e2      	b.n	3f46 <flash_nrf_write+0x5a>
    3f80:	0000a094 	.word	0x0000a094
    3f84:	0000a08c 	.word	0x0000a08c
    3f88:	0000a980 	.word	0x0000a980
    3f8c:	0000a9c0 	.word	0x0000a9c0

00003f90 <flash_nrf_read>:
{
    3f90:	b570      	push	{r4, r5, r6, lr}
    3f92:	460c      	mov	r4, r1
    3f94:	4616      	mov	r6, r2
    3f96:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    3f98:	f004 f8f3 	bl	8182 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    3f9c:	4284      	cmp	r4, r0
    3f9e:	d209      	bcs.n	3fb4 <flash_nrf_read+0x24>
    3fa0:	2c00      	cmp	r4, #0
    3fa2:	db07      	blt.n	3fb4 <flash_nrf_read+0x24>
	    addr < 0 ||
    3fa4:	4285      	cmp	r5, r0
    3fa6:	d805      	bhi.n	3fb4 <flash_nrf_read+0x24>
	    (addr) + len > flash_size) {
    3fa8:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    3faa:	4283      	cmp	r3, r0
    3fac:	d802      	bhi.n	3fb4 <flash_nrf_read+0x24>
	if (!len) {
    3fae:	b9bd      	cbnz	r5, 3fe0 <flash_nrf_read+0x50>
		return 0;
    3fb0:	2000      	movs	r0, #0
    3fb2:	e014      	b.n	3fde <flash_nrf_read+0x4e>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3fb4:	f04f 0000 	mov.w	r0, #0
    3fb8:	2301      	movs	r3, #1
    3fba:	f363 0002 	bfi	r0, r3, #0, #3
    3fbe:	f36f 00c5 	bfc	r0, #3, #3
    3fc2:	4b0b      	ldr	r3, [pc, #44]	; (3ff0 <flash_nrf_read+0x60>)
    3fc4:	4a0b      	ldr	r2, [pc, #44]	; (3ff4 <flash_nrf_read+0x64>)
    3fc6:	1a9b      	subs	r3, r3, r2
    3fc8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    3fcc:	f363 108f 	bfi	r0, r3, #6, #10
    3fd0:	462b      	mov	r3, r5
    3fd2:	4622      	mov	r2, r4
    3fd4:	4908      	ldr	r1, [pc, #32]	; (3ff8 <flash_nrf_read+0x68>)
    3fd6:	f003 fb1e 	bl	7616 <log_string_sync>
		return -EINVAL;
    3fda:	f06f 0015 	mvn.w	r0, #21
}
    3fde:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(data, (void *)addr, len);
    3fe0:	462a      	mov	r2, r5
    3fe2:	4621      	mov	r1, r4
    3fe4:	4630      	mov	r0, r6
    3fe6:	f003 febd 	bl	7d64 <memcpy>
	return 0;
    3fea:	2000      	movs	r0, #0
    3fec:	e7f7      	b.n	3fde <flash_nrf_read+0x4e>
    3fee:	bf00      	nop
    3ff0:	0000a094 	.word	0x0000a094
    3ff4:	0000a08c 	.word	0x0000a08c
    3ff8:	0000a980 	.word	0x0000a980

00003ffc <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    3ffc:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    3ffe:	f004 f8c8 	bl	8192 <nrfx_nvmc_flash_page_count_get>
    4002:	4c03      	ldr	r4, [pc, #12]	; (4010 <nrf_flash_init+0x14>)
    4004:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    4006:	f004 f8c0 	bl	818a <nrfx_nvmc_flash_page_size_get>
    400a:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    400c:	2000      	movs	r0, #0
    400e:	bd10      	pop	{r4, pc}
    4010:	20023218 	.word	0x20023218

00004014 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    4014:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    4016:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    4018:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    401c:	d06f      	beq.n	40fe <baudrate_set+0xea>
    401e:	d83a      	bhi.n	4096 <baudrate_set+0x82>
    4020:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    4024:	d06e      	beq.n	4104 <baudrate_set+0xf0>
    4026:	d90a      	bls.n	403e <baudrate_set+0x2a>
    4028:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    402c:	d075      	beq.n	411a <baudrate_set+0x106>
    402e:	d924      	bls.n	407a <baudrate_set+0x66>
    4030:	f647 2312 	movw	r3, #31250	; 0x7a12
    4034:	4299      	cmp	r1, r3
    4036:	d12b      	bne.n	4090 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4038:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    403c:	e013      	b.n	4066 <baudrate_set+0x52>
	switch (baudrate) {
    403e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    4042:	d061      	beq.n	4108 <baudrate_set+0xf4>
    4044:	d907      	bls.n	4056 <baudrate_set+0x42>
    4046:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    404a:	d063      	beq.n	4114 <baudrate_set+0x100>
    404c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    4050:	d110      	bne.n	4074 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4052:	4b3c      	ldr	r3, [pc, #240]	; (4144 <baudrate_set+0x130>)
    4054:	e007      	b.n	4066 <baudrate_set+0x52>
	switch (baudrate) {
    4056:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    405a:	d058      	beq.n	410e <baudrate_set+0xfa>
    405c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    4060:	d105      	bne.n	406e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    4062:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4066:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    406a:	2000      	movs	r0, #0
    406c:	4770      	bx	lr
	switch (baudrate) {
    406e:	f06f 0015 	mvn.w	r0, #21
    4072:	4770      	bx	lr
    4074:	f06f 0015 	mvn.w	r0, #21
    4078:	4770      	bx	lr
    407a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    407e:	d04e      	beq.n	411e <baudrate_set+0x10a>
    4080:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    4084:	d101      	bne.n	408a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4086:	4b30      	ldr	r3, [pc, #192]	; (4148 <baudrate_set+0x134>)
    4088:	e7ed      	b.n	4066 <baudrate_set+0x52>
	switch (baudrate) {
    408a:	f06f 0015 	mvn.w	r0, #21
    408e:	4770      	bx	lr
    4090:	f06f 0015 	mvn.w	r0, #21
    4094:	4770      	bx	lr
    4096:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    409a:	d042      	beq.n	4122 <baudrate_set+0x10e>
    409c:	d909      	bls.n	40b2 <baudrate_set+0x9e>
    409e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    40a2:	d046      	beq.n	4132 <baudrate_set+0x11e>
    40a4:	d91f      	bls.n	40e6 <baudrate_set+0xd2>
    40a6:	4b29      	ldr	r3, [pc, #164]	; (414c <baudrate_set+0x138>)
    40a8:	4299      	cmp	r1, r3
    40aa:	d148      	bne.n	413e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    40ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    40b0:	e7d9      	b.n	4066 <baudrate_set+0x52>
	switch (baudrate) {
    40b2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    40b6:	d037      	beq.n	4128 <baudrate_set+0x114>
    40b8:	d905      	bls.n	40c6 <baudrate_set+0xb2>
    40ba:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    40be:	d10f      	bne.n	40e0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    40c0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    40c4:	e7cf      	b.n	4066 <baudrate_set+0x52>
	switch (baudrate) {
    40c6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    40ca:	4299      	cmp	r1, r3
    40cc:	d02e      	beq.n	412c <baudrate_set+0x118>
    40ce:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    40d2:	d102      	bne.n	40da <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    40d4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    40d8:	e7c5      	b.n	4066 <baudrate_set+0x52>
	switch (baudrate) {
    40da:	f06f 0015 	mvn.w	r0, #21
    40de:	4770      	bx	lr
    40e0:	f06f 0015 	mvn.w	r0, #21
    40e4:	4770      	bx	lr
    40e6:	4b1a      	ldr	r3, [pc, #104]	; (4150 <baudrate_set+0x13c>)
    40e8:	4299      	cmp	r1, r3
    40ea:	d025      	beq.n	4138 <baudrate_set+0x124>
    40ec:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    40f0:	d102      	bne.n	40f8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    40f2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    40f6:	e7b6      	b.n	4066 <baudrate_set+0x52>
	switch (baudrate) {
    40f8:	f06f 0015 	mvn.w	r0, #21
    40fc:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    40fe:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4102:	e7b0      	b.n	4066 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4104:	4b13      	ldr	r3, [pc, #76]	; (4154 <baudrate_set+0x140>)
    4106:	e7ae      	b.n	4066 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4108:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    410c:	e7ab      	b.n	4066 <baudrate_set+0x52>
	switch (baudrate) {
    410e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4112:	e7a8      	b.n	4066 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4114:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4118:	e7a5      	b.n	4066 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    411a:	4b0f      	ldr	r3, [pc, #60]	; (4158 <baudrate_set+0x144>)
    411c:	e7a3      	b.n	4066 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    411e:	4b0f      	ldr	r3, [pc, #60]	; (415c <baudrate_set+0x148>)
    4120:	e7a1      	b.n	4066 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4122:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4126:	e79e      	b.n	4066 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4128:	4b0d      	ldr	r3, [pc, #52]	; (4160 <baudrate_set+0x14c>)
    412a:	e79c      	b.n	4066 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    412c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4130:	e799      	b.n	4066 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4132:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4136:	e796      	b.n	4066 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4138:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    413c:	e793      	b.n	4066 <baudrate_set+0x52>
	switch (baudrate) {
    413e:	f06f 0015 	mvn.w	r0, #21
}
    4142:	4770      	bx	lr
    4144:	0013b000 	.word	0x0013b000
    4148:	004ea000 	.word	0x004ea000
    414c:	000f4240 	.word	0x000f4240
    4150:	0003d090 	.word	0x0003d090
    4154:	00275000 	.word	0x00275000
    4158:	0075c000 	.word	0x0075c000
    415c:	003af000 	.word	0x003af000
    4160:	013a9000 	.word	0x013a9000

00004164 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    4164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4168:	4605      	mov	r5, r0
    416a:	4688      	mov	r8, r1
	return dev->data;
    416c:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    416e:	f005 fddf 	bl	9d30 <k_is_in_isr>
    4172:	b920      	cbnz	r0, 417e <uarte_nrfx_poll_out+0x1a>
	return !z_sys_post_kernel;
    4174:	4b26      	ldr	r3, [pc, #152]	; (4210 <uarte_nrfx_poll_out+0xac>)
    4176:	781b      	ldrb	r3, [r3, #0]
    4178:	b1c3      	cbz	r3, 41ac <uarte_nrfx_poll_out+0x48>
    417a:	2200      	movs	r2, #0
    417c:	e000      	b.n	4180 <uarte_nrfx_poll_out+0x1c>
    417e:	2201      	movs	r2, #1
	return dev->config;
    4180:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    4182:	f8d3 9000 	ldr.w	r9, [r3]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    4186:	b34a      	cbz	r2, 41dc <uarte_nrfx_poll_out+0x78>
    4188:	f04f 0320 	mov.w	r3, #32
    418c:	f3ef 8411 	mrs	r4, BASEPRI
    4190:	f383 8811 	msr	BASEPRI, r3
    4194:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    4198:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    419a:	4628      	mov	r0, r5
    419c:	f003 ff7a 	bl	8094 <is_tx_ready>
    41a0:	bb48      	cbnz	r0, 41f6 <uarte_nrfx_poll_out+0x92>
	__asm__ volatile(
    41a2:	f384 8811 	msr	BASEPRI, r4
    41a6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    41aa:	e7ed      	b.n	4188 <uarte_nrfx_poll_out+0x24>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    41ac:	2201      	movs	r2, #1
    41ae:	e7e7      	b.n	4180 <uarte_nrfx_poll_out+0x1c>
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);

			if (res) {
    41b0:	b186      	cbz	r6, 41d4 <uarte_nrfx_poll_out+0x70>
	__asm__ volatile(
    41b2:	f04f 0320 	mov.w	r3, #32
    41b6:	f3ef 8411 	mrs	r4, BASEPRI
    41ba:	f383 8811 	msr	BASEPRI, r3
    41be:	f3bf 8f6f 	isb	sy
				key = irq_lock();
    41c2:	4626      	mov	r6, r4
				if (is_tx_ready(dev)) {
    41c4:	4628      	mov	r0, r5
    41c6:	f003 ff65 	bl	8094 <is_tx_ready>
    41ca:	b9a0      	cbnz	r0, 41f6 <uarte_nrfx_poll_out+0x92>
	__asm__ volatile(
    41cc:	f384 8811 	msr	BASEPRI, r4
    41d0:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    41d4:	2021      	movs	r0, #33	; 0x21
    41d6:	2100      	movs	r1, #0
    41d8:	f001 fe8a 	bl	5ef0 <z_impl_k_sleep>
			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    41dc:	2464      	movs	r4, #100	; 0x64
    41de:	4628      	mov	r0, r5
    41e0:	f003 ff58 	bl	8094 <is_tx_ready>
    41e4:	4606      	mov	r6, r0
    41e6:	2800      	cmp	r0, #0
    41e8:	d1e2      	bne.n	41b0 <uarte_nrfx_poll_out+0x4c>
    41ea:	2001      	movs	r0, #1
    41ec:	f003 ff94 	bl	8118 <nrfx_busy_wait>
    41f0:	3c01      	subs	r4, #1
    41f2:	d1f4      	bne.n	41de <uarte_nrfx_poll_out+0x7a>
    41f4:	e7dc      	b.n	41b0 <uarte_nrfx_poll_out+0x4c>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    41f6:	4639      	mov	r1, r7
    41f8:	f801 8f0c 	strb.w	r8, [r1, #12]!
	tx_start(uarte, &data->char_out, 1);
    41fc:	2201      	movs	r2, #1
    41fe:	4648      	mov	r0, r9
    4200:	f003 ff5a 	bl	80b8 <tx_start>
    4204:	f386 8811 	msr	BASEPRI, r6
    4208:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    420c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4210:	2002328f 	.word	0x2002328f

00004214 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    4214:	b538      	push	{r3, r4, r5, lr}
    4216:	4605      	mov	r5, r0
    4218:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    421a:	f101 000e 	add.w	r0, r1, #14
    421e:	f000 fb07 	bl	4830 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4222:	4b13      	ldr	r3, [pc, #76]	; (4270 <endtx_stoptx_ppi_init+0x5c>)
    4224:	4298      	cmp	r0, r3
    4226:	d10e      	bne.n	4246 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4228:	7ba3      	ldrb	r3, [r4, #14]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    422a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    422e:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    4232:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4236:	7ba2      	ldrb	r2, [r4, #14]
    4238:	2301      	movs	r3, #1
    423a:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    423c:	4a0d      	ldr	r2, [pc, #52]	; (4274 <endtx_stoptx_ppi_init+0x60>)
    423e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    4242:	2000      	movs	r0, #0
}
    4244:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    4246:	f04f 0000 	mov.w	r0, #0
    424a:	2301      	movs	r3, #1
    424c:	f363 0002 	bfi	r0, r3, #0, #3
    4250:	f36f 00c5 	bfc	r0, #3, #3
    4254:	4b08      	ldr	r3, [pc, #32]	; (4278 <endtx_stoptx_ppi_init+0x64>)
    4256:	4a09      	ldr	r2, [pc, #36]	; (427c <endtx_stoptx_ppi_init+0x68>)
    4258:	1a9b      	subs	r3, r3, r2
    425a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    425e:	f363 108f 	bfi	r0, r3, #6, #10
    4262:	4907      	ldr	r1, [pc, #28]	; (4280 <endtx_stoptx_ppi_init+0x6c>)
    4264:	f003 f9d7 	bl	7616 <log_string_sync>
		return -EIO;
    4268:	f06f 0004 	mvn.w	r0, #4
    426c:	e7ea      	b.n	4244 <endtx_stoptx_ppi_init+0x30>
    426e:	bf00      	nop
    4270:	0bad0000 	.word	0x0bad0000
    4274:	50017000 	.word	0x50017000
    4278:	0000a0bc 	.word	0x0000a0bc
    427c:	0000a08c 	.word	0x0000a08c
    4280:	0000aa0c 	.word	0x0000aa0c

00004284 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
    4284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4288:	4606      	mov	r6, r0
    428a:	460c      	mov	r4, r1
	return dev->config;
    428c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    428e:	681d      	ldr	r5, [r3, #0]
	return dev->data;
    4290:	68c7      	ldr	r7, [r0, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4292:	2300      	movs	r3, #0
    4294:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    4298:	6038      	str	r0, [r7, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
    429a:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    429c:	f003 021f 	and.w	r2, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    42a0:	2301      	movs	r3, #1
    42a2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    42a4:	4a3a      	ldr	r2, [pc, #232]	; (4390 <uarte_instance_init+0x10c>)
    42a6:	6093      	str	r3, [r2, #8]
	nrf_gpio_cfg_output(config->pseltxd);
    42a8:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    42aa:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    42ae:	3380      	adds	r3, #128	; 0x80
    42b0:	2103      	movs	r1, #3
    42b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    42b6:	6863      	ldr	r3, [r4, #4]
    42b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    42bc:	d005      	beq.n	42ca <uarte_instance_init+0x46>
    *p_pin = pin_number & 0x1F;
    42be:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    42c2:	3380      	adds	r3, #128	; 0x80
    42c4:	2100      	movs	r1, #0
    42c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
    42ca:	6822      	ldr	r2, [r4, #0]
    42cc:	6863      	ldr	r3, [r4, #4]
    p_reg->PSEL.TXD = pseltxd;
    42ce:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    42d2:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    42d6:	68a3      	ldr	r3, [r4, #8]
    42d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    42dc:	d006      	beq.n	42ec <uarte_instance_init+0x68>
    *p_pin = pin_number & 0x1F;
    42de:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    42e2:	3380      	adds	r3, #128	; 0x80
    42e4:	4a2a      	ldr	r2, [pc, #168]	; (4390 <uarte_instance_init+0x10c>)
    42e6:	2100      	movs	r1, #0
    42e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    42ec:	68e3      	ldr	r3, [r4, #12]
    42ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    42f2:	d00d      	beq.n	4310 <uarte_instance_init+0x8c>
    *p_pin = pin_number & 0x1F;
    42f4:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    42f8:	2201      	movs	r2, #1
    42fa:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    42fe:	4a24      	ldr	r2, [pc, #144]	; (4390 <uarte_instance_init+0x10c>)
    4300:	6093      	str	r3, [r2, #8]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
    4302:	68e3      	ldr	r3, [r4, #12]
    *p_pin = pin_number & 0x1F;
    4304:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4308:	3380      	adds	r3, #128	; 0x80
    430a:	2103      	movs	r1, #3
    430c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
    4310:	68e2      	ldr	r2, [r4, #12]
    4312:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.RTS = pselrts;
    4314:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    4318:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    431c:	68f1      	ldr	r1, [r6, #12]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    431e:	3104      	adds	r1, #4
    4320:	4630      	mov	r0, r6
    4322:	f003 fe4f 	bl	7fc4 <uarte_nrfx_configure>
	if (err) {
    4326:	4680      	mov	r8, r0
    4328:	bb30      	cbnz	r0, 4378 <uarte_instance_init+0xf4>
	return dev->config;
    432a:	6873      	ldr	r3, [r6, #4]

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
    432c:	799b      	ldrb	r3, [r3, #6]
    432e:	bb33      	cbnz	r3, 437e <uarte_instance_init+0xfa>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4330:	2308      	movs	r3, #8
    4332:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    4336:	6863      	ldr	r3, [r4, #4]
    4338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    433c:	d00c      	beq.n	4358 <uarte_instance_init+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    433e:	2300      	movs	r3, #0
    4340:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    4344:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    4348:	f107 030d 	add.w	r3, r7, #13

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    434c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4350:	2301      	movs	r3, #1
    4352:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4356:	602b      	str	r3, [r5, #0]
	return dev->config;
    4358:	6873      	ldr	r3, [r6, #4]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!get_dev_config(dev)->ppi_endtx) {
    435a:	799b      	ldrb	r3, [r3, #6]
    435c:	b91b      	cbnz	r3, 4366 <uarte_instance_init+0xe2>
    p_reg->INTENSET = mask;
    435e:	f44f 7380 	mov.w	r3, #256	; 0x100
    4362:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    4366:	370c      	adds	r7, #12
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4368:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    436c:	2300      	movs	r3, #0
    436e:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4372:	2301      	movs	r3, #1
    4374:	60ab      	str	r3, [r5, #8]
    4376:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    4378:	4640      	mov	r0, r8
    437a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    437e:	4639      	mov	r1, r7
    4380:	4628      	mov	r0, r5
    4382:	f7ff ff47 	bl	4214 <endtx_stoptx_ppi_init>
		if (err < 0) {
    4386:	2800      	cmp	r0, #0
    4388:	dad2      	bge.n	4330 <uarte_instance_init+0xac>
			return err;
    438a:	4680      	mov	r8, r0
    438c:	e7f4      	b.n	4378 <uarte_instance_init+0xf4>
    438e:	bf00      	nop
    4390:	50842500 	.word	0x50842500

00004394 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    4394:	b530      	push	{r4, r5, lr}
    4396:	b085      	sub	sp, #20
    4398:	4605      	mov	r5, r0
    439a:	4b0a      	ldr	r3, [pc, #40]	; (43c4 <uarte_0_init+0x30>)
    439c:	466c      	mov	r4, sp
    439e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    43a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    43a4:	2200      	movs	r2, #0
    43a6:	2101      	movs	r1, #1
    43a8:	2008      	movs	r0, #8
    43aa:	f7fe ff53 	bl	3254 <z_arm_irq_priority_set>
    43ae:	2008      	movs	r0, #8
    43b0:	f7fe ff32 	bl	3218 <arch_irq_enable>
    43b4:	2200      	movs	r2, #0
    43b6:	4621      	mov	r1, r4
    43b8:	4628      	mov	r0, r5
    43ba:	f7ff ff63 	bl	4284 <uarte_instance_init>
    43be:	b005      	add	sp, #20
    43c0:	bd30      	pop	{r4, r5, pc}
    43c2:	bf00      	nop
    43c4:	0000a0e0 	.word	0x0000a0e0

000043c8 <fprotect_area>:
#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE
#endif

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    43c8:	f3c0 030e 	ubfx	r3, r0, #0, #15
    43cc:	b9bb      	cbnz	r3, 43fe <fprotect_area+0x36>
		length % SPU_BLOCK_SIZE != 0) {
    43ce:	f3c1 020e 	ubfx	r2, r1, #0, #15
	if (start % SPU_BLOCK_SIZE != 0 ||
    43d2:	b9ba      	cbnz	r2, 4404 <fprotect_area+0x3c>
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    43d4:	ebb2 3fd1 	cmp.w	r2, r1, lsr #15
    43d8:	d217      	bcs.n	440a <fprotect_area+0x42>
{
    43da:	b430      	push	{r4, r5}
		nrf_spu_flashregion_set(NRF_SPU_S,
    43dc:	eb02 33d0 	add.w	r3, r2, r0, lsr #15
    43e0:	b2db      	uxtb	r3, r3
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    43e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    43e6:	4c0a      	ldr	r4, [pc, #40]	; (4410 <fprotect_area+0x48>)
    43e8:	f240 1515 	movw	r5, #277	; 0x115
    43ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    43f0:	3201      	adds	r2, #1
    43f2:	ebb2 3fd1 	cmp.w	r2, r1, lsr #15
    43f6:	d3f1      	bcc.n	43dc <fprotect_area+0x14>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    43f8:	2000      	movs	r0, #0
}
    43fa:	bc30      	pop	{r4, r5}
    43fc:	4770      	bx	lr
		return -EINVAL;
    43fe:	f06f 0015 	mvn.w	r0, #21
    4402:	4770      	bx	lr
    4404:	f06f 0015 	mvn.w	r0, #21
    4408:	4770      	bx	lr
	return 0;
    440a:	2000      	movs	r0, #0
}
    440c:	4770      	bx	lr
    440e:	bf00      	nop
    4410:	50003000 	.word	0x50003000

00004414 <nrf91_errata_6>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    4414:	4b03      	ldr	r3, [pc, #12]	; (4424 <nrf91_errata_6+0x10>)
    4416:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    4418:	2b09      	cmp	r3, #9
    441a:	d001      	beq.n	4420 <nrf91_errata_6+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    441c:	2000      	movs	r0, #0
    441e:	4770      	bx	lr
                        return true;
    4420:	2001      	movs	r0, #1
    #endif
}
    4422:	4770      	bx	lr
    4424:	00ff0130 	.word	0x00ff0130

00004428 <nrf91_errata_14>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    4428:	4b06      	ldr	r3, [pc, #24]	; (4444 <nrf91_errata_14+0x1c>)
    442a:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    442c:	4a06      	ldr	r2, [pc, #24]	; (4448 <nrf91_errata_14+0x20>)
    442e:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    4430:	2b09      	cmp	r3, #9
    4432:	d001      	beq.n	4438 <nrf91_errata_14+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    4434:	2000      	movs	r0, #0
    4436:	4770      	bx	lr
                switch(var2)
    4438:	2a01      	cmp	r2, #1
    443a:	d001      	beq.n	4440 <nrf91_errata_14+0x18>
                        return false;
    443c:	2000      	movs	r0, #0
    #endif
}
    443e:	4770      	bx	lr
                switch(var2)
    4440:	2001      	movs	r0, #1
    4442:	4770      	bx	lr
    4444:	00ff0130 	.word	0x00ff0130
    4448:	00ff0134 	.word	0x00ff0134

0000444c <nrf91_errata_15>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    444c:	4b06      	ldr	r3, [pc, #24]	; (4468 <nrf91_errata_15+0x1c>)
    444e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    4450:	4a06      	ldr	r2, [pc, #24]	; (446c <nrf91_errata_15+0x20>)
    4452:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    4454:	2b09      	cmp	r3, #9
    4456:	d001      	beq.n	445c <nrf91_errata_15+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    4458:	2000      	movs	r0, #0
    445a:	4770      	bx	lr
                switch(var2)
    445c:	2a01      	cmp	r2, #1
    445e:	d001      	beq.n	4464 <nrf91_errata_15+0x18>
                        return true;
    4460:	2001      	movs	r0, #1
    #endif
}
    4462:	4770      	bx	lr
                switch(var2)
    4464:	2000      	movs	r0, #0
    4466:	4770      	bx	lr
    4468:	00ff0130 	.word	0x00ff0130
    446c:	00ff0134 	.word	0x00ff0134

00004470 <nrf91_errata_20>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    4470:	4b06      	ldr	r3, [pc, #24]	; (448c <nrf91_errata_20+0x1c>)
    4472:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    4474:	4a06      	ldr	r2, [pc, #24]	; (4490 <nrf91_errata_20+0x20>)
    4476:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    4478:	2b09      	cmp	r3, #9
    447a:	d001      	beq.n	4480 <nrf91_errata_20+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    447c:	2000      	movs	r0, #0
    447e:	4770      	bx	lr
                switch(var2)
    4480:	2a01      	cmp	r2, #1
    4482:	d001      	beq.n	4488 <nrf91_errata_20+0x18>
                        return false;
    4484:	2000      	movs	r0, #0
    #endif
}
    4486:	4770      	bx	lr
                switch(var2)
    4488:	2001      	movs	r0, #1
    448a:	4770      	bx	lr
    448c:	00ff0130 	.word	0x00ff0130
    4490:	00ff0134 	.word	0x00ff0134

00004494 <nrf91_errata_31>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    4494:	4b03      	ldr	r3, [pc, #12]	; (44a4 <nrf91_errata_31+0x10>)
    4496:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    4498:	2b09      	cmp	r3, #9
    449a:	d001      	beq.n	44a0 <nrf91_errata_31+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    449c:	2000      	movs	r0, #0
    449e:	4770      	bx	lr
                        return true;
    44a0:	2001      	movs	r0, #1
    #endif
}
    44a2:	4770      	bx	lr
    44a4:	00ff0130 	.word	0x00ff0130

000044a8 <uicr_HFXOCNT_erased>:

#if !defined(NRF_TRUSTZONE_NONSECURE)

    bool uicr_HFXOCNT_erased()
    {
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    44a8:	4b04      	ldr	r3, [pc, #16]	; (44bc <uicr_HFXOCNT_erased+0x14>)
    44aa:	6a1b      	ldr	r3, [r3, #32]
    44ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    44b0:	d001      	beq.n	44b6 <uicr_HFXOCNT_erased+0xe>
            return true;
        }
        return false;
    44b2:	2000      	movs	r0, #0
    44b4:	4770      	bx	lr
            return true;
    44b6:	2001      	movs	r0, #1
    }
    44b8:	4770      	bx	lr
    44ba:	bf00      	nop
    44bc:	00ff8000 	.word	0x00ff8000

000044c0 <uicr_HFXOSRC_erased>:
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    44c0:	4b04      	ldr	r3, [pc, #16]	; (44d4 <uicr_HFXOSRC_erased+0x14>)
    44c2:	69db      	ldr	r3, [r3, #28]
    44c4:	f013 0f01 	tst.w	r3, #1
    44c8:	d101      	bne.n	44ce <uicr_HFXOSRC_erased+0xe>
            return true;
        }
        return false;
    44ca:	2000      	movs	r0, #0
    44cc:	4770      	bx	lr
            return true;
    44ce:	2001      	movs	r0, #1
    }
    44d0:	4770      	bx	lr
    44d2:	bf00      	nop
    44d4:	00ff8000 	.word	0x00ff8000

000044d8 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK;
    44d8:	4b01      	ldr	r3, [pc, #4]	; (44e0 <SystemCoreClockUpdate+0x8>)
    44da:	4a02      	ldr	r2, [pc, #8]	; (44e4 <SystemCoreClockUpdate+0xc>)
    44dc:	601a      	str	r2, [r3, #0]
}
    44de:	4770      	bx	lr
    44e0:	20020048 	.word	0x20020048
    44e4:	03d09000 	.word	0x03d09000

000044e8 <SystemInit>:
{
    44e8:	b508      	push	{r3, lr}
        if (nrf91_errata_6()){
    44ea:	f7ff ff93 	bl	4414 <nrf91_errata_6>
    44ee:	b130      	cbz	r0, 44fe <SystemInit+0x16>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    44f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    44f4:	2200      	movs	r2, #0
    44f6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    44fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        if (nrf91_errata_14()){
    44fe:	f7ff ff93 	bl	4428 <nrf91_errata_14>
    4502:	b130      	cbz	r0, 4512 <SystemInit+0x2a>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    4504:	2301      	movs	r3, #1
    4506:	4a42      	ldr	r2, [pc, #264]	; (4610 <SystemInit+0x128>)
    4508:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    450a:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    450e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        if (nrf91_errata_15()){
    4512:	f7ff ff9b 	bl	444c <nrf91_errata_15>
    4516:	b118      	cbz	r0, 4520 <SystemInit+0x38>
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    4518:	4b3e      	ldr	r3, [pc, #248]	; (4614 <SystemInit+0x12c>)
    451a:	2201      	movs	r2, #1
    451c:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        if (nrf91_errata_20()){
    4520:	f7ff ffa6 	bl	4470 <nrf91_errata_20>
    4524:	b110      	cbz	r0, 452c <SystemInit+0x44>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    4526:	4b3c      	ldr	r3, [pc, #240]	; (4618 <SystemInit+0x130>)
    4528:	220e      	movs	r2, #14
    452a:	601a      	str	r2, [r3, #0]
        if (nrf91_errata_31()){
    452c:	f7ff ffb2 	bl	4494 <nrf91_errata_31>
    4530:	b128      	cbz	r0, 453e <SystemInit+0x56>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    4532:	4b3a      	ldr	r3, [pc, #232]	; (461c <SystemInit+0x134>)
    4534:	2200      	movs	r2, #0
    4536:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    4538:	3304      	adds	r3, #4
    453a:	2201      	movs	r2, #1
    453c:	601a      	str	r2, [r3, #0]
{
    453e:	2200      	movs	r2, #0
    4540:	e00b      	b.n	455a <SystemInit+0x72>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4542:	f102 0360 	add.w	r3, r2, #96	; 0x60
    4546:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    454a:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    454e:	00db      	lsls	r3, r3, #3
    4550:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    4554:	685b      	ldr	r3, [r3, #4]
    4556:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    4558:	3201      	adds	r2, #1
    455a:	2aff      	cmp	r2, #255	; 0xff
    455c:	d808      	bhi.n	4570 <SystemInit+0x88>
    455e:	f102 0360 	add.w	r3, r2, #96	; 0x60
    4562:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    4566:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    456a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    456e:	d1e8      	bne.n	4542 <SystemInit+0x5a>
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    4570:	f7ff ffa6 	bl	44c0 <uicr_HFXOSRC_erased>
    4574:	b960      	cbnz	r0, 4590 <SystemInit+0xa8>
    4576:	f7ff ff97 	bl	44a8 <uicr_HFXOCNT_erased>
    457a:	b948      	cbnz	r0, 4590 <SystemInit+0xa8>
        SCB->NSACR |= (3UL << 10);
    457c:	4a28      	ldr	r2, [pc, #160]	; (4620 <SystemInit+0x138>)
    457e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    4582:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    4586:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClockUpdate();
    458a:	f7ff ffa5 	bl	44d8 <SystemCoreClockUpdate>
}
    458e:	bd08      	pop	{r3, pc}
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4590:	4b24      	ldr	r3, [pc, #144]	; (4624 <SystemInit+0x13c>)
    4592:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4596:	2b01      	cmp	r3, #1
    4598:	d1fa      	bne.n	4590 <SystemInit+0xa8>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    459a:	4b22      	ldr	r3, [pc, #136]	; (4624 <SystemInit+0x13c>)
    459c:	2201      	movs	r2, #1
    459e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    45a2:	4b20      	ldr	r3, [pc, #128]	; (4624 <SystemInit+0x13c>)
    45a4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    45a8:	2b01      	cmp	r3, #1
    45aa:	d1fa      	bne.n	45a2 <SystemInit+0xba>
          if (uicr_HFXOSRC_erased()){
    45ac:	f7ff ff88 	bl	44c0 <uicr_HFXOSRC_erased>
    45b0:	b148      	cbz	r0, 45c6 <SystemInit+0xde>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    45b2:	4a1d      	ldr	r2, [pc, #116]	; (4628 <SystemInit+0x140>)
    45b4:	69d3      	ldr	r3, [r2, #28]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    45b6:	f023 0301 	bic.w	r3, r3, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    45ba:	61d3      	str	r3, [r2, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    45bc:	4b19      	ldr	r3, [pc, #100]	; (4624 <SystemInit+0x13c>)
    45be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    45c2:	2b01      	cmp	r3, #1
    45c4:	d1fa      	bne.n	45bc <SystemInit+0xd4>
          if (uicr_HFXOCNT_erased()){
    45c6:	f7ff ff6f 	bl	44a8 <uicr_HFXOCNT_erased>
    45ca:	b158      	cbz	r0, 45e4 <SystemInit+0xfc>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    45cc:	4a16      	ldr	r2, [pc, #88]	; (4628 <SystemInit+0x140>)
    45ce:	6a13      	ldr	r3, [r2, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    45d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    45d4:	f043 0320 	orr.w	r3, r3, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    45d8:	6213      	str	r3, [r2, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    45da:	4b12      	ldr	r3, [pc, #72]	; (4624 <SystemInit+0x13c>)
    45dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    45e0:	2b01      	cmp	r3, #1
    45e2:	d1fa      	bne.n	45da <SystemInit+0xf2>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    45e4:	4b0f      	ldr	r3, [pc, #60]	; (4624 <SystemInit+0x13c>)
    45e6:	2200      	movs	r2, #0
    45e8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    45ec:	4b0d      	ldr	r3, [pc, #52]	; (4624 <SystemInit+0x13c>)
    45ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    45f2:	2b01      	cmp	r3, #1
    45f4:	d1fa      	bne.n	45ec <SystemInit+0x104>
  __ASM volatile ("dsb 0xF":::"memory");
    45f6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    45fa:	4909      	ldr	r1, [pc, #36]	; (4620 <SystemInit+0x138>)
    45fc:	68ca      	ldr	r2, [r1, #12]
    45fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4602:	4b0a      	ldr	r3, [pc, #40]	; (462c <SystemInit+0x144>)
    4604:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4606:	60cb      	str	r3, [r1, #12]
    4608:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    460c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    460e:	e7fd      	b.n	460c <SystemInit+0x124>
    4610:	50004a38 	.word	0x50004a38
    4614:	50004000 	.word	0x50004000
    4618:	5003aee4 	.word	0x5003aee4
    461c:	5000470c 	.word	0x5000470c
    4620:	e000ed00 	.word	0xe000ed00
    4624:	50039000 	.word	0x50039000
    4628:	00ff8000 	.word	0x00ff8000
    462c:	05fa0004 	.word	0x05fa0004

00004630 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4630:	4b05      	ldr	r3, [pc, #20]	; (4648 <nrfx_clock_init+0x18>)
    4632:	791b      	ldrb	r3, [r3, #4]
    4634:	b92b      	cbnz	r3, 4642 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    4636:	4b04      	ldr	r3, [pc, #16]	; (4648 <nrfx_clock_init+0x18>)
    4638:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    463a:	2201      	movs	r2, #1
    463c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    463e:	4803      	ldr	r0, [pc, #12]	; (464c <nrfx_clock_init+0x1c>)
    4640:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4642:	4803      	ldr	r0, [pc, #12]	; (4650 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4644:	4770      	bx	lr
    4646:	bf00      	nop
    4648:	20023220 	.word	0x20023220
    464c:	0bad0000 	.word	0x0bad0000
    4650:	0bad000c 	.word	0x0bad000c

00004654 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4654:	b110      	cbz	r0, 465c <nrfx_clock_start+0x8>
    4656:	2801      	cmp	r0, #1
    4658:	d025      	beq.n	46a6 <nrfx_clock_start+0x52>
    465a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    465c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4660:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    4664:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4668:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    466c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4670:	d111      	bne.n	4696 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4672:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4676:	2201      	movs	r2, #1
    4678:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    467c:	4b0f      	ldr	r3, [pc, #60]	; (46bc <nrfx_clock_start+0x68>)
    467e:	2200      	movs	r2, #0
    4680:	601a      	str	r2, [r3, #0]
    4682:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4684:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4688:	2202      	movs	r2, #2
    468a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    468e:	3308      	adds	r3, #8
    4690:	2201      	movs	r2, #1
    4692:	601a      	str	r2, [r3, #0]
}
    4694:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    4696:	2b02      	cmp	r3, #2
    4698:	d1eb      	bne.n	4672 <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    469a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    469e:	2202      	movs	r2, #2
    46a0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    46a4:	e7ea      	b.n	467c <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46a6:	4b06      	ldr	r3, [pc, #24]	; (46c0 <nrfx_clock_start+0x6c>)
    46a8:	2200      	movs	r2, #0
    46aa:	601a      	str	r2, [r3, #0]
    46ac:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    46ae:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    46b2:	2201      	movs	r2, #1
    46b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46b8:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    46ba:	4770      	bx	lr
    46bc:	50005104 	.word	0x50005104
    46c0:	50005100 	.word	0x50005100

000046c4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    46c4:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    46c6:	4604      	mov	r4, r0
    46c8:	b110      	cbz	r0, 46d0 <nrfx_clock_stop+0xc>
    46ca:	2801      	cmp	r0, #1
    46cc:	d012      	beq.n	46f4 <nrfx_clock_stop+0x30>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    46ce:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    46d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    46d4:	2202      	movs	r2, #2
    46d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46da:	f503 7382 	add.w	r3, r3, #260	; 0x104
    46de:	2200      	movs	r2, #0
    46e0:	601a      	str	r2, [r3, #0]
    46e2:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46e4:	4b33      	ldr	r3, [pc, #204]	; (47b4 <nrfx_clock_stop+0xf0>)
    46e6:	2201      	movs	r2, #1
    46e8:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    46ea:	2c01      	cmp	r4, #1
    46ec:	d00f      	beq.n	470e <nrfx_clock_stop+0x4a>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    46ee:	f242 7510 	movw	r5, #10000	; 0x2710
    46f2:	e04b      	b.n	478c <nrfx_clock_stop+0xc8>
    p_reg->INTENCLR = mask;
    46f4:	2301      	movs	r3, #1
    46f6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    46fa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46fe:	f502 7280 	add.w	r2, r2, #256	; 0x100
    4702:	2100      	movs	r1, #0
    4704:	6011      	str	r1, [r2, #0]
    4706:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4708:	4a2b      	ldr	r2, [pc, #172]	; (47b8 <nrfx_clock_stop+0xf4>)
    470a:	6013      	str	r3, [r2, #0]
}
    470c:	e7ed      	b.n	46ea <nrfx_clock_stop+0x26>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    470e:	4625      	mov	r5, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4710:	f242 7610 	movw	r6, #10000	; 0x2710
    4714:	e014      	b.n	4740 <nrfx_clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4716:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    471a:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
    471e:	f005 0503 	and.w	r5, r5, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4722:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    4726:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    472a:	d11c      	bne.n	4766 <nrfx_clock_stop+0xa2>
    return false;
    472c:	2300      	movs	r3, #0
    472e:	2b00      	cmp	r3, #0
    4730:	d0cd      	beq.n	46ce <nrfx_clock_stop+0xa>
    4732:	2d01      	cmp	r5, #1
    4734:	d1cb      	bne.n	46ce <nrfx_clock_stop+0xa>
    4736:	2001      	movs	r0, #1
    4738:	f003 fcee 	bl	8118 <nrfx_busy_wait>
    473c:	3e01      	subs	r6, #1
    473e:	d0c6      	beq.n	46ce <nrfx_clock_stop+0xa>
    switch (domain)
    4740:	2c00      	cmp	r4, #0
    4742:	d0e8      	beq.n	4716 <nrfx_clock_stop+0x52>
    4744:	2c01      	cmp	r4, #1
    4746:	d001      	beq.n	474c <nrfx_clock_stop+0x88>
    4748:	2300      	movs	r3, #0
    474a:	e7f0      	b.n	472e <nrfx_clock_stop+0x6a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    474c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4750:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
    4754:	f005 0501 	and.w	r5, r5, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4758:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    475c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4760:	d103      	bne.n	476a <nrfx_clock_stop+0xa6>
    return false;
    4762:	2300      	movs	r3, #0
    4764:	e7e3      	b.n	472e <nrfx_clock_stop+0x6a>
                return true;
    4766:	2301      	movs	r3, #1
    4768:	e7e1      	b.n	472e <nrfx_clock_stop+0x6a>
                return true;
    476a:	2301      	movs	r3, #1
    476c:	e7df      	b.n	472e <nrfx_clock_stop+0x6a>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    476e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4772:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    4776:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    477a:	d116      	bne.n	47aa <nrfx_clock_stop+0xe6>
    return false;
    477c:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    477e:	2b00      	cmp	r3, #0
    4780:	d0a5      	beq.n	46ce <nrfx_clock_stop+0xa>
    4782:	2001      	movs	r0, #1
    4784:	f003 fcc8 	bl	8118 <nrfx_busy_wait>
    4788:	3d01      	subs	r5, #1
    478a:	d0a0      	beq.n	46ce <nrfx_clock_stop+0xa>
    switch (domain)
    478c:	2c00      	cmp	r4, #0
    478e:	d0ee      	beq.n	476e <nrfx_clock_stop+0xaa>
    4790:	2c01      	cmp	r4, #1
    4792:	d001      	beq.n	4798 <nrfx_clock_stop+0xd4>
    4794:	2300      	movs	r3, #0
    4796:	e7f2      	b.n	477e <nrfx_clock_stop+0xba>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4798:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    479c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    47a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    47a4:	d103      	bne.n	47ae <nrfx_clock_stop+0xea>
    return false;
    47a6:	2300      	movs	r3, #0
    47a8:	e7e9      	b.n	477e <nrfx_clock_stop+0xba>
                return true;
    47aa:	2301      	movs	r3, #1
    47ac:	e7e7      	b.n	477e <nrfx_clock_stop+0xba>
                return true;
    47ae:	2301      	movs	r3, #1
    47b0:	e7e5      	b.n	477e <nrfx_clock_stop+0xba>
    47b2:	bf00      	nop
    47b4:	5000500c 	.word	0x5000500c
    47b8:	50005004 	.word	0x50005004

000047bc <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    47bc:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    47be:	4b19      	ldr	r3, [pc, #100]	; (4824 <nrfx_power_clock_irq_handler+0x68>)
    47c0:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    47c2:	b15b      	cbz	r3, 47dc <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    47c4:	4b17      	ldr	r3, [pc, #92]	; (4824 <nrfx_power_clock_irq_handler+0x68>)
    47c6:	2000      	movs	r0, #0
    47c8:	6018      	str	r0, [r3, #0]
    47ca:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    47cc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    47d0:	2201      	movs	r2, #1
    47d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    47d6:	4b14      	ldr	r3, [pc, #80]	; (4828 <nrfx_power_clock_irq_handler+0x6c>)
    47d8:	681b      	ldr	r3, [r3, #0]
    47da:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    47dc:	4b13      	ldr	r3, [pc, #76]	; (482c <nrfx_power_clock_irq_handler+0x70>)
    47de:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    47e0:	b1b3      	cbz	r3, 4810 <nrfx_power_clock_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    47e2:	4b12      	ldr	r3, [pc, #72]	; (482c <nrfx_power_clock_irq_handler+0x70>)
    47e4:	2200      	movs	r2, #0
    47e6:	601a      	str	r2, [r3, #0]
    47e8:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    47ea:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    47ee:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    47f2:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    47f6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    47fa:	2b01      	cmp	r3, #1
    47fc:	d009      	beq.n	4812 <nrfx_power_clock_irq_handler+0x56>
    p_reg->INTENCLR = mask;
    47fe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4802:	2202      	movs	r2, #2
    4804:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4808:	4b07      	ldr	r3, [pc, #28]	; (4828 <nrfx_power_clock_irq_handler+0x6c>)
    480a:	681b      	ldr	r3, [r3, #0]
    480c:	2001      	movs	r0, #1
    480e:	4798      	blx	r3
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4810:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    4812:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4816:	2202      	movs	r2, #2
    4818:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    481c:	3308      	adds	r3, #8
    481e:	2201      	movs	r2, #1
    4820:	601a      	str	r2, [r3, #0]
}
    4822:	e7f5      	b.n	4810 <nrfx_power_clock_irq_handler+0x54>
    4824:	50005100 	.word	0x50005100
    4828:	20023220 	.word	0x20023220
    482c:	50005104 	.word	0x50005104

00004830 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4830:	b430      	push	{r4, r5}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    4832:	4b0d      	ldr	r3, [pc, #52]	; (4868 <nrfx_dppi_channel_alloc+0x38>)
    4834:	681d      	ldr	r5, [r3, #0]
    4836:	43e9      	mvns	r1, r5
    4838:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
    483a:	b191      	cbz	r1, 4862 <nrfx_dppi_channel_alloc+0x32>
    uint8_t channel = 0;
    483c:	2300      	movs	r3, #0
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
    483e:	fa21 f203 	lsr.w	r2, r1, r3
    4842:	f012 0f01 	tst.w	r2, #1
    4846:	d102      	bne.n	484e <nrfx_dppi_channel_alloc+0x1e>
    {
        channel++;
    4848:	3301      	adds	r3, #1
    484a:	b2db      	uxtb	r3, r3
    484c:	e7f7      	b.n	483e <nrfx_dppi_channel_alloc+0xe>
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
    484e:	2201      	movs	r2, #1
    4850:	fa02 f403 	lsl.w	r4, r2, r3
    4854:	4325      	orrs	r5, r4
    4856:	4a04      	ldr	r2, [pc, #16]	; (4868 <nrfx_dppi_channel_alloc+0x38>)
    4858:	6015      	str	r5, [r2, #0]
    *p_channel = channel;
    485a:	7003      	strb	r3, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
    485c:	4803      	ldr	r0, [pc, #12]	; (486c <nrfx_dppi_channel_alloc+0x3c>)
}
    485e:	bc30      	pop	{r4, r5}
    4860:	4770      	bx	lr
        return err_code;
    4862:	4803      	ldr	r0, [pc, #12]	; (4870 <nrfx_dppi_channel_alloc+0x40>)
    4864:	e7fb      	b.n	485e <nrfx_dppi_channel_alloc+0x2e>
    4866:	bf00      	nop
    4868:	20023228 	.word	0x20023228
    486c:	0bad0000 	.word	0x0bad0000
    4870:	0bad0002 	.word	0x0bad0002

00004874 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    4874:	4b03      	ldr	r3, [pc, #12]	; (4884 <nvmc_readonly_mode_set+0x10>)
    4876:	2200      	movs	r2, #0
    4878:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    487c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    4880:	4770      	bx	lr
    4882:	bf00      	nop
    4884:	50039000 	.word	0x50039000

00004888 <nvmc_write_mode_set>:
    p_reg->CONFIGNS = (uint32_t)mode;
    4888:	4b03      	ldr	r3, [pc, #12]	; (4898 <nvmc_write_mode_set+0x10>)
    488a:	2201      	movs	r2, #1
    488c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4890:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
    4894:	4770      	bx	lr
    4896:	bf00      	nop
    4898:	50039000 	.word	0x50039000

0000489c <nvmc_erase_mode_set>:
    p_reg->CONFIGNS = (uint32_t)mode;
    489c:	4b03      	ldr	r3, [pc, #12]	; (48ac <nvmc_erase_mode_set+0x10>)
    489e:	2202      	movs	r2, #2
    48a0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    48a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
    48a8:	4770      	bx	lr
    48aa:	bf00      	nop
    48ac:	50039000 	.word	0x50039000

000048b0 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    48b0:	4b04      	ldr	r3, [pc, #16]	; (48c4 <nvmc_word_write+0x14>)
    48b2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    48b6:	f013 0f01 	tst.w	r3, #1
    48ba:	d0f9      	beq.n	48b0 <nvmc_word_write>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    48bc:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    48be:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    48c2:	4770      	bx	lr
    48c4:	50039000 	.word	0x50039000

000048c8 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    48c8:	b510      	push	{r4, lr}
    48ca:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    48cc:	f003 fc41 	bl	8152 <is_page_aligned_check>
    48d0:	b908      	cbnz	r0, 48d6 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    48d2:	4808      	ldr	r0, [pc, #32]	; (48f4 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
    48d4:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
    48d6:	f7ff ffe1 	bl	489c <nvmc_erase_mode_set>
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    48da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    48de:	6023      	str	r3, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    48e0:	4b05      	ldr	r3, [pc, #20]	; (48f8 <nrfx_nvmc_page_erase+0x30>)
    48e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    48e6:	f013 0f01 	tst.w	r3, #1
    48ea:	d0f9      	beq.n	48e0 <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
    48ec:	f7ff ffc2 	bl	4874 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
    48f0:	4802      	ldr	r0, [pc, #8]	; (48fc <nrfx_nvmc_page_erase+0x34>)
    48f2:	e7ef      	b.n	48d4 <nrfx_nvmc_page_erase+0xc>
    48f4:	0bad000a 	.word	0x0bad000a
    48f8:	50039000 	.word	0x50039000
    48fc:	0bad0000 	.word	0x0bad0000

00004900 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    4900:	6802      	ldr	r2, [r0, #0]
    4902:	4b12      	ldr	r3, [pc, #72]	; (494c <verify_header+0x4c>)
    4904:	429a      	cmp	r2, r3
    4906:	d115      	bne.n	4934 <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    4908:	69c2      	ldr	r2, [r0, #28]
    490a:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    490e:	f1a3 13ef 	sub.w	r3, r3, #15663343	; 0xef00ef
    4912:	429a      	cmp	r2, r3
    4914:	d110      	bne.n	4938 <verify_header+0x38>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    4916:	6883      	ldr	r3, [r0, #8]
    4918:	2b01      	cmp	r3, #1
    491a:	d80f      	bhi.n	493c <verify_header+0x3c>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    491c:	68c3      	ldr	r3, [r0, #12]
    491e:	b113      	cbz	r3, 4926 <verify_header+0x26>
    4920:	6902      	ldr	r2, [r0, #16]
    4922:	4293      	cmp	r3, r2
    4924:	d00c      	beq.n	4940 <verify_header+0x40>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    4926:	6943      	ldr	r3, [r0, #20]
    4928:	b163      	cbz	r3, 4944 <verify_header+0x44>
    492a:	6982      	ldr	r2, [r0, #24]
    492c:	4293      	cmp	r3, r2
    492e:	d00b      	beq.n	4948 <verify_header+0x48>
        mbedtls_fprintf( stderr, "FATAL: prev_free == next_free\n" );
#endif
        return( 1 );
    }

    return( 0 );
    4930:	2000      	movs	r0, #0
    4932:	4770      	bx	lr
        return( 1 );
    4934:	2001      	movs	r0, #1
    4936:	4770      	bx	lr
        return( 1 );
    4938:	2001      	movs	r0, #1
    493a:	4770      	bx	lr
        return( 1 );
    493c:	2001      	movs	r0, #1
    493e:	4770      	bx	lr
        return( 1 );
    4940:	2001      	movs	r0, #1
    4942:	4770      	bx	lr
    return( 0 );
    4944:	2000      	movs	r0, #0
    4946:	4770      	bx	lr
        return( 1 );
    4948:	2001      	movs	r0, #1
}
    494a:	4770      	bx	lr
    494c:	ff00aa55 	.word	0xff00aa55

00004950 <verify_chain>:

static int verify_chain( void )
{
    4950:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    4952:	4b11      	ldr	r3, [pc, #68]	; (4998 <verify_chain+0x48>)
    4954:	689d      	ldr	r5, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    4956:	b1b5      	cbz	r5, 4986 <verify_chain+0x36>
    4958:	4628      	mov	r0, r5
    495a:	f7ff ffd1 	bl	4900 <verify_header>
    495e:	4606      	mov	r6, r0
    4960:	b998      	cbnz	r0, 498a <verify_chain+0x3a>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    4962:	68eb      	ldr	r3, [r5, #12]
    4964:	b113      	cbz	r3, 496c <verify_chain+0x1c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: verification failed: "
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    4966:	2601      	movs	r6, #1
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    4968:	4630      	mov	r0, r6
    496a:	bd70      	pop	{r4, r5, r6, pc}
    cur = heap.first->next;
    496c:	692c      	ldr	r4, [r5, #16]
    while( cur != NULL )
    496e:	2c00      	cmp	r4, #0
    4970:	d0fa      	beq.n	4968 <verify_chain+0x18>
        if( verify_header( cur ) != 0 )
    4972:	4620      	mov	r0, r4
    4974:	f7ff ffc4 	bl	4900 <verify_header>
    4978:	b948      	cbnz	r0, 498e <verify_chain+0x3e>
        if( cur->prev != prv )
    497a:	68e3      	ldr	r3, [r4, #12]
    497c:	42ab      	cmp	r3, r5
    497e:	d108      	bne.n	4992 <verify_chain+0x42>
        prv = cur;
    4980:	4625      	mov	r5, r4
        cur = cur->next;
    4982:	6924      	ldr	r4, [r4, #16]
    4984:	e7f3      	b.n	496e <verify_chain+0x1e>
        return( 1 );
    4986:	2601      	movs	r6, #1
    4988:	e7ee      	b.n	4968 <verify_chain+0x18>
    498a:	2601      	movs	r6, #1
    498c:	e7ec      	b.n	4968 <verify_chain+0x18>
            return( 1 );
    498e:	2601      	movs	r6, #1
    4990:	e7ea      	b.n	4968 <verify_chain+0x18>
            return( 1 );
    4992:	2601      	movs	r6, #1
    4994:	e7e8      	b.n	4968 <verify_chain+0x18>
    4996:	bf00      	nop
    4998:	2002322c 	.word	0x2002322c

0000499c <buffer_alloc_free>:
static void buffer_alloc_free( void *ptr )
{
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    499c:	2800      	cmp	r0, #0
    499e:	f000 8092 	beq.w	4ac6 <buffer_alloc_free+0x12a>
{
    49a2:	b538      	push	{r3, r4, r5, lr}
    49a4:	4605      	mov	r5, r0
    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    49a6:	4b48      	ldr	r3, [pc, #288]	; (4ac8 <buffer_alloc_free+0x12c>)
    49a8:	681b      	ldr	r3, [r3, #0]
    49aa:	2b00      	cmp	r3, #0
    49ac:	d06c      	beq.n	4a88 <buffer_alloc_free+0xec>
    49ae:	4a46      	ldr	r2, [pc, #280]	; (4ac8 <buffer_alloc_free+0x12c>)
    49b0:	6892      	ldr	r2, [r2, #8]
    49b2:	2a00      	cmp	r2, #0
    49b4:	d068      	beq.n	4a88 <buffer_alloc_free+0xec>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    49b6:	4283      	cmp	r3, r0
    49b8:	d804      	bhi.n	49c4 <buffer_alloc_free+0x28>
    49ba:	4a43      	ldr	r2, [pc, #268]	; (4ac8 <buffer_alloc_free+0x12c>)
    49bc:	6852      	ldr	r2, [r2, #4]
    49be:	4413      	add	r3, r2
    49c0:	4283      	cmp	r3, r0
    49c2:	d803      	bhi.n	49cc <buffer_alloc_free+0x30>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    49c4:	4b41      	ldr	r3, [pc, #260]	; (4acc <buffer_alloc_free+0x130>)
    49c6:	681b      	ldr	r3, [r3, #0]
    49c8:	2001      	movs	r0, #1
    49ca:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    49cc:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    49d0:	4620      	mov	r0, r4
    49d2:	f7ff ff95 	bl	4900 <verify_header>
    49d6:	b118      	cbz	r0, 49e0 <buffer_alloc_free+0x44>
        mbedtls_exit( 1 );
    49d8:	4b3c      	ldr	r3, [pc, #240]	; (4acc <buffer_alloc_free+0x130>)
    49da:	681b      	ldr	r3, [r3, #0]
    49dc:	2001      	movs	r0, #1
    49de:	4798      	blx	r3

    if( hdr->alloc != 1 )
    49e0:	f855 3c18 	ldr.w	r3, [r5, #-24]
    49e4:	2b01      	cmp	r3, #1
    49e6:	d003      	beq.n	49f0 <buffer_alloc_free+0x54>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    49e8:	4b38      	ldr	r3, [pc, #224]	; (4acc <buffer_alloc_free+0x130>)
    49ea:	681b      	ldr	r3, [r3, #0]
    49ec:	2001      	movs	r0, #1
    49ee:	4798      	blx	r3
    }

    hdr->alloc = 0;
    49f0:	2300      	movs	r3, #0
    49f2:	f845 3c18 	str.w	r3, [r5, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    49f6:	f855 3c14 	ldr.w	r3, [r5, #-20]
    49fa:	b1cb      	cbz	r3, 4a30 <buffer_alloc_free+0x94>
    49fc:	689a      	ldr	r2, [r3, #8]
    49fe:	2a00      	cmp	r2, #0
    4a00:	d143      	bne.n	4a8a <buffer_alloc_free+0xee>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    4a02:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    4a06:	6859      	ldr	r1, [r3, #4]
    4a08:	440a      	add	r2, r1
    4a0a:	3220      	adds	r2, #32
    4a0c:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    4a0e:	f855 3c14 	ldr.w	r3, [r5, #-20]
    4a12:	f855 2c10 	ldr.w	r2, [r5, #-16]
    4a16:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    4a18:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if( hdr->next != NULL )
    4a1c:	692b      	ldr	r3, [r5, #16]
    4a1e:	b103      	cbz	r3, 4a22 <buffer_alloc_free+0x86>
            hdr->next->prev = hdr;
    4a20:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    4a22:	2220      	movs	r2, #32
    4a24:	2100      	movs	r1, #0
    4a26:	4620      	mov	r0, r4
    4a28:	f003 f9c0 	bl	7dac <memset>
        old = hdr;
    4a2c:	4623      	mov	r3, r4
        hdr = hdr->prev;
    4a2e:	462c      	mov	r4, r5
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    4a30:	6925      	ldr	r5, [r4, #16]
    4a32:	b31d      	cbz	r5, 4a7c <buffer_alloc_free+0xe0>
    4a34:	68aa      	ldr	r2, [r5, #8]
    4a36:	bb0a      	cbnz	r2, 4a7c <buffer_alloc_free+0xe0>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    4a38:	686b      	ldr	r3, [r5, #4]
    4a3a:	6862      	ldr	r2, [r4, #4]
    4a3c:	4413      	add	r3, r2
    4a3e:	3320      	adds	r3, #32
    4a40:	6063      	str	r3, [r4, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    4a42:	692b      	ldr	r3, [r5, #16]
    4a44:	6123      	str	r3, [r4, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    4a46:	6963      	ldr	r3, [r4, #20]
    4a48:	b30b      	cbz	r3, 4a8e <buffer_alloc_free+0xf2>
        {
            if( hdr->prev_free != NULL )
    4a4a:	b323      	cbz	r3, 4a96 <buffer_alloc_free+0xfa>
                hdr->prev_free->next_free = hdr->next_free;
    4a4c:	69a2      	ldr	r2, [r4, #24]
    4a4e:	619a      	str	r2, [r3, #24]
            else
                heap.first_free = hdr->next_free;

            if( hdr->next_free != NULL )
    4a50:	69a3      	ldr	r3, [r4, #24]
    4a52:	b10b      	cbz	r3, 4a58 <buffer_alloc_free+0xbc>
                hdr->next_free->prev_free = hdr->prev_free;
    4a54:	6962      	ldr	r2, [r4, #20]
    4a56:	615a      	str	r2, [r3, #20]
        }

        hdr->prev_free = old->prev_free;
    4a58:	696b      	ldr	r3, [r5, #20]
    4a5a:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
    4a5c:	69aa      	ldr	r2, [r5, #24]
    4a5e:	61a2      	str	r2, [r4, #24]

        if( hdr->prev_free != NULL )
    4a60:	b1eb      	cbz	r3, 4a9e <buffer_alloc_free+0x102>
            hdr->prev_free->next_free = hdr;
    4a62:	619c      	str	r4, [r3, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    4a64:	69a3      	ldr	r3, [r4, #24]
    4a66:	b103      	cbz	r3, 4a6a <buffer_alloc_free+0xce>
            hdr->next_free->prev_free = hdr;
    4a68:	615c      	str	r4, [r3, #20]

        if( hdr->next != NULL )
    4a6a:	6923      	ldr	r3, [r4, #16]
    4a6c:	b103      	cbz	r3, 4a70 <buffer_alloc_free+0xd4>
            hdr->next->prev = hdr;
    4a6e:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    4a70:	2220      	movs	r2, #32
    4a72:	2100      	movs	r1, #0
    4a74:	4628      	mov	r0, r5
    4a76:	f003 f999 	bl	7dac <memset>
        old = hdr->next;
    4a7a:	462b      	mov	r3, r5
    }

    // Prepend to free_list if we have not merged
    // (Does not have to stay in same order as prev / next list)
    //
    if( old == NULL )
    4a7c:	b193      	cbz	r3, 4aa4 <buffer_alloc_free+0x108>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    4a7e:	4b12      	ldr	r3, [pc, #72]	; (4ac8 <buffer_alloc_free+0x12c>)
    4a80:	691b      	ldr	r3, [r3, #16]
    4a82:	f013 0f02 	tst.w	r3, #2
    4a86:	d115      	bne.n	4ab4 <buffer_alloc_free+0x118>
        mbedtls_exit( 1 );
}
    4a88:	bd38      	pop	{r3, r4, r5, pc}
    memory_header *hdr, *old = NULL;
    4a8a:	2300      	movs	r3, #0
    4a8c:	e7d0      	b.n	4a30 <buffer_alloc_free+0x94>
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    4a8e:	69a2      	ldr	r2, [r4, #24]
    4a90:	2a00      	cmp	r2, #0
    4a92:	d1da      	bne.n	4a4a <buffer_alloc_free+0xae>
    4a94:	e7e0      	b.n	4a58 <buffer_alloc_free+0xbc>
                heap.first_free = hdr->next_free;
    4a96:	69a2      	ldr	r2, [r4, #24]
    4a98:	4b0b      	ldr	r3, [pc, #44]	; (4ac8 <buffer_alloc_free+0x12c>)
    4a9a:	60da      	str	r2, [r3, #12]
    4a9c:	e7d8      	b.n	4a50 <buffer_alloc_free+0xb4>
            heap.first_free = hdr;
    4a9e:	4b0a      	ldr	r3, [pc, #40]	; (4ac8 <buffer_alloc_free+0x12c>)
    4aa0:	60dc      	str	r4, [r3, #12]
    4aa2:	e7df      	b.n	4a64 <buffer_alloc_free+0xc8>
        hdr->next_free = heap.first_free;
    4aa4:	4b08      	ldr	r3, [pc, #32]	; (4ac8 <buffer_alloc_free+0x12c>)
    4aa6:	68db      	ldr	r3, [r3, #12]
    4aa8:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    4aaa:	b103      	cbz	r3, 4aae <buffer_alloc_free+0x112>
            heap.first_free->prev_free = hdr;
    4aac:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    4aae:	4b06      	ldr	r3, [pc, #24]	; (4ac8 <buffer_alloc_free+0x12c>)
    4ab0:	60dc      	str	r4, [r3, #12]
    4ab2:	e7e4      	b.n	4a7e <buffer_alloc_free+0xe2>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    4ab4:	f7ff ff4c 	bl	4950 <verify_chain>
    4ab8:	2800      	cmp	r0, #0
    4aba:	d0e5      	beq.n	4a88 <buffer_alloc_free+0xec>
        mbedtls_exit( 1 );
    4abc:	4b03      	ldr	r3, [pc, #12]	; (4acc <buffer_alloc_free+0x130>)
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	2001      	movs	r0, #1
    4ac2:	4798      	blx	r3
    4ac4:	e7e0      	b.n	4a88 <buffer_alloc_free+0xec>
    4ac6:	4770      	bx	lr
    4ac8:	2002322c 	.word	0x2002322c
    4acc:	20020050 	.word	0x20020050

00004ad0 <buffer_alloc_calloc>:
{
    4ad0:	b570      	push	{r4, r5, r6, lr}
    memory_header *new, *cur = heap.first_free;
    4ad2:	4b4f      	ldr	r3, [pc, #316]	; (4c10 <buffer_alloc_calloc+0x140>)
    4ad4:	68dc      	ldr	r4, [r3, #12]
    if( heap.buf == NULL || heap.first == NULL )
    4ad6:	681d      	ldr	r5, [r3, #0]
    4ad8:	2d00      	cmp	r5, #0
    4ada:	d05a      	beq.n	4b92 <buffer_alloc_calloc+0xc2>
    4adc:	689d      	ldr	r5, [r3, #8]
    4ade:	2d00      	cmp	r5, #0
    4ae0:	d057      	beq.n	4b92 <buffer_alloc_calloc+0xc2>
    original_len = len = n * size;
    4ae2:	fb01 f600 	mul.w	r6, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    4ae6:	2800      	cmp	r0, #0
    4ae8:	f000 8088 	beq.w	4bfc <buffer_alloc_calloc+0x12c>
    4aec:	2900      	cmp	r1, #0
    4aee:	f000 8087 	beq.w	4c00 <buffer_alloc_calloc+0x130>
    4af2:	fbb6 f0f0 	udiv	r0, r6, r0
    4af6:	4288      	cmp	r0, r1
    4af8:	f040 8084 	bne.w	4c04 <buffer_alloc_calloc+0x134>
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4afc:	f116 0f04 	cmn.w	r6, #4
    4b00:	f200 8082 	bhi.w	4c08 <buffer_alloc_calloc+0x138>
    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4b04:	f016 0f03 	tst.w	r6, #3
    4b08:	d008      	beq.n	4b1c <buffer_alloc_calloc+0x4c>
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    4b0a:	f026 0503 	bic.w	r5, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    4b0e:	3504      	adds	r5, #4
    while( cur != NULL )
    4b10:	b134      	cbz	r4, 4b20 <buffer_alloc_calloc+0x50>
        if( cur->size >= len )
    4b12:	6863      	ldr	r3, [r4, #4]
    4b14:	42ab      	cmp	r3, r5
    4b16:	d203      	bcs.n	4b20 <buffer_alloc_calloc+0x50>
        cur = cur->next_free;
    4b18:	69a4      	ldr	r4, [r4, #24]
    4b1a:	e7f9      	b.n	4b10 <buffer_alloc_calloc+0x40>
    original_len = len = n * size;
    4b1c:	4635      	mov	r5, r6
    4b1e:	e7f7      	b.n	4b10 <buffer_alloc_calloc+0x40>
    if( cur == NULL )
    4b20:	2c00      	cmp	r4, #0
    4b22:	d073      	beq.n	4c0c <buffer_alloc_calloc+0x13c>
    if( cur->alloc != 0 )
    4b24:	68a3      	ldr	r3, [r4, #8]
    4b26:	b11b      	cbz	r3, 4b30 <buffer_alloc_calloc+0x60>
        mbedtls_exit( 1 );
    4b28:	4b3a      	ldr	r3, [pc, #232]	; (4c14 <buffer_alloc_calloc+0x144>)
    4b2a:	681b      	ldr	r3, [r3, #0]
    4b2c:	2001      	movs	r0, #1
    4b2e:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    4b30:	6862      	ldr	r2, [r4, #4]
    4b32:	1b52      	subs	r2, r2, r5
    4b34:	2a23      	cmp	r2, #35	; 0x23
    4b36:	d92e      	bls.n	4b96 <buffer_alloc_calloc+0xc6>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    4b38:	f105 0120 	add.w	r1, r5, #32
    4b3c:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    4b3e:	3a20      	subs	r2, #32
    4b40:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    4b42:	2200      	movs	r2, #0
    4b44:	609a      	str	r2, [r3, #8]
    new->prev = cur;
    4b46:	60dc      	str	r4, [r3, #12]
    new->next = cur->next;
    4b48:	6922      	ldr	r2, [r4, #16]
    4b4a:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    4b4c:	4832      	ldr	r0, [pc, #200]	; (4c18 <buffer_alloc_calloc+0x148>)
    4b4e:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    4b50:	4932      	ldr	r1, [pc, #200]	; (4c1c <buffer_alloc_calloc+0x14c>)
    4b52:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    4b54:	b102      	cbz	r2, 4b58 <buffer_alloc_calloc+0x88>
        new->next->prev = new;
    4b56:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    4b58:	6962      	ldr	r2, [r4, #20]
    4b5a:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    4b5c:	69a1      	ldr	r1, [r4, #24]
    4b5e:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    4b60:	2a00      	cmp	r2, #0
    4b62:	d03f      	beq.n	4be4 <buffer_alloc_calloc+0x114>
        new->prev_free->next_free = new;
    4b64:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    4b66:	699a      	ldr	r2, [r3, #24]
    4b68:	b102      	cbz	r2, 4b6c <buffer_alloc_calloc+0x9c>
        new->next_free->prev_free = new;
    4b6a:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    4b6c:	2201      	movs	r2, #1
    4b6e:	60a2      	str	r2, [r4, #8]
    cur->size = len;
    4b70:	6065      	str	r5, [r4, #4]
    cur->next = new;
    4b72:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    4b74:	2300      	movs	r3, #0
    4b76:	6163      	str	r3, [r4, #20]
    cur->next_free = NULL;
    4b78:	61a3      	str	r3, [r4, #24]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    4b7a:	4b25      	ldr	r3, [pc, #148]	; (4c10 <buffer_alloc_calloc+0x140>)
    4b7c:	691b      	ldr	r3, [r3, #16]
    4b7e:	f013 0f01 	tst.w	r3, #1
    4b82:	d132      	bne.n	4bea <buffer_alloc_calloc+0x11a>
    ret = (unsigned char *) cur + sizeof( memory_header );
    4b84:	f104 0520 	add.w	r5, r4, #32
    memset( ret, 0, original_len );
    4b88:	4632      	mov	r2, r6
    4b8a:	2100      	movs	r1, #0
    4b8c:	4628      	mov	r0, r5
    4b8e:	f003 f90d 	bl	7dac <memset>
}
    4b92:	4628      	mov	r0, r5
    4b94:	bd70      	pop	{r4, r5, r6, pc}
        cur->alloc = 1;
    4b96:	2301      	movs	r3, #1
    4b98:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    4b9a:	6963      	ldr	r3, [r4, #20]
    4b9c:	b1ab      	cbz	r3, 4bca <buffer_alloc_calloc+0xfa>
            cur->prev_free->next_free = cur->next_free;
    4b9e:	69a2      	ldr	r2, [r4, #24]
    4ba0:	619a      	str	r2, [r3, #24]
        if( cur->next_free != NULL )
    4ba2:	69a3      	ldr	r3, [r4, #24]
    4ba4:	b10b      	cbz	r3, 4baa <buffer_alloc_calloc+0xda>
            cur->next_free->prev_free = cur->prev_free;
    4ba6:	6962      	ldr	r2, [r4, #20]
    4ba8:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    4baa:	2300      	movs	r3, #0
    4bac:	6163      	str	r3, [r4, #20]
        cur->next_free = NULL;
    4bae:	61a3      	str	r3, [r4, #24]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    4bb0:	4b17      	ldr	r3, [pc, #92]	; (4c10 <buffer_alloc_calloc+0x140>)
    4bb2:	691b      	ldr	r3, [r3, #16]
    4bb4:	f013 0f01 	tst.w	r3, #1
    4bb8:	d10b      	bne.n	4bd2 <buffer_alloc_calloc+0x102>
        ret = (unsigned char *) cur + sizeof( memory_header );
    4bba:	f104 0520 	add.w	r5, r4, #32
        memset( ret, 0, original_len );
    4bbe:	4632      	mov	r2, r6
    4bc0:	2100      	movs	r1, #0
    4bc2:	4628      	mov	r0, r5
    4bc4:	f003 f8f2 	bl	7dac <memset>
        return( ret );
    4bc8:	e7e3      	b.n	4b92 <buffer_alloc_calloc+0xc2>
            heap.first_free = cur->next_free;
    4bca:	69a2      	ldr	r2, [r4, #24]
    4bcc:	4b10      	ldr	r3, [pc, #64]	; (4c10 <buffer_alloc_calloc+0x140>)
    4bce:	60da      	str	r2, [r3, #12]
    4bd0:	e7e7      	b.n	4ba2 <buffer_alloc_calloc+0xd2>
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    4bd2:	f7ff febd 	bl	4950 <verify_chain>
    4bd6:	2800      	cmp	r0, #0
    4bd8:	d0ef      	beq.n	4bba <buffer_alloc_calloc+0xea>
            mbedtls_exit( 1 );
    4bda:	4b0e      	ldr	r3, [pc, #56]	; (4c14 <buffer_alloc_calloc+0x144>)
    4bdc:	681b      	ldr	r3, [r3, #0]
    4bde:	2001      	movs	r0, #1
    4be0:	4798      	blx	r3
    4be2:	e7ea      	b.n	4bba <buffer_alloc_calloc+0xea>
        heap.first_free = new;
    4be4:	4a0a      	ldr	r2, [pc, #40]	; (4c10 <buffer_alloc_calloc+0x140>)
    4be6:	60d3      	str	r3, [r2, #12]
    4be8:	e7bd      	b.n	4b66 <buffer_alloc_calloc+0x96>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    4bea:	f7ff feb1 	bl	4950 <verify_chain>
    4bee:	2800      	cmp	r0, #0
    4bf0:	d0c8      	beq.n	4b84 <buffer_alloc_calloc+0xb4>
        mbedtls_exit( 1 );
    4bf2:	4b08      	ldr	r3, [pc, #32]	; (4c14 <buffer_alloc_calloc+0x144>)
    4bf4:	681b      	ldr	r3, [r3, #0]
    4bf6:	2001      	movs	r0, #1
    4bf8:	4798      	blx	r3
    4bfa:	e7c3      	b.n	4b84 <buffer_alloc_calloc+0xb4>
        return( NULL );
    4bfc:	2500      	movs	r5, #0
    4bfe:	e7c8      	b.n	4b92 <buffer_alloc_calloc+0xc2>
    4c00:	2500      	movs	r5, #0
    4c02:	e7c6      	b.n	4b92 <buffer_alloc_calloc+0xc2>
    4c04:	2500      	movs	r5, #0
    4c06:	e7c4      	b.n	4b92 <buffer_alloc_calloc+0xc2>
        return( NULL );
    4c08:	2500      	movs	r5, #0
    4c0a:	e7c2      	b.n	4b92 <buffer_alloc_calloc+0xc2>
        return( NULL );
    4c0c:	4625      	mov	r5, r4
    4c0e:	e7c0      	b.n	4b92 <buffer_alloc_calloc+0xc2>
    4c10:	2002322c 	.word	0x2002322c
    4c14:	20020050 	.word	0x20020050
    4c18:	ff00aa55 	.word	0xff00aa55
    4c1c:	ee119966 	.word	0xee119966

00004c20 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    4c20:	b538      	push	{r3, r4, r5, lr}
    4c22:	4605      	mov	r5, r0
    4c24:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    4c26:	2214      	movs	r2, #20
    4c28:	2100      	movs	r1, #0
    4c2a:	4813      	ldr	r0, [pc, #76]	; (4c78 <mbedtls_memory_buffer_alloc_init+0x58>)
    4c2c:	f003 f8be 	bl	7dac <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    4c30:	4912      	ldr	r1, [pc, #72]	; (4c7c <mbedtls_memory_buffer_alloc_init+0x5c>)
    4c32:	4813      	ldr	r0, [pc, #76]	; (4c80 <mbedtls_memory_buffer_alloc_init+0x60>)
    4c34:	f000 f838 	bl	4ca8 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4c38:	2c23      	cmp	r4, #35	; 0x23
    4c3a:	d91c      	bls.n	4c76 <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4c3c:	f015 0303 	ands.w	r3, r5, #3
    4c40:	d004      	beq.n	4c4c <mbedtls_memory_buffer_alloc_init+0x2c>
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    4c42:	441c      	add	r4, r3
    4c44:	3c04      	subs	r4, #4
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    4c46:	f1c3 0304 	rsb	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    4c4a:	441d      	add	r5, r3
    }

    memset( buf, 0, len );
    4c4c:	4622      	mov	r2, r4
    4c4e:	2100      	movs	r1, #0
    4c50:	4628      	mov	r0, r5
    4c52:	f003 f8ab 	bl	7dac <memset>

    heap.buf = buf;
    4c56:	4b08      	ldr	r3, [pc, #32]	; (4c78 <mbedtls_memory_buffer_alloc_init+0x58>)
    4c58:	601d      	str	r5, [r3, #0]
    heap.len = len;
    4c5a:	605c      	str	r4, [r3, #4]

    heap.first = (memory_header *)buf;
    4c5c:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    4c5e:	3c20      	subs	r4, #32
    4c60:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    4c62:	689a      	ldr	r2, [r3, #8]
    4c64:	4907      	ldr	r1, [pc, #28]	; (4c84 <mbedtls_memory_buffer_alloc_init+0x64>)
    4c66:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    4c68:	689a      	ldr	r2, [r3, #8]
    4c6a:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    4c6e:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    4c72:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    4c74:	60da      	str	r2, [r3, #12]
}
    4c76:	bd38      	pop	{r3, r4, r5, pc}
    4c78:	2002322c 	.word	0x2002322c
    4c7c:	0000499d 	.word	0x0000499d
    4c80:	00004ad1 	.word	0x00004ad1
    4c84:	ff00aa55 	.word	0xff00aa55

00004c88 <mbedtls_calloc>:

static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    4c88:	b508      	push	{r3, lr}
    return (*mbedtls_calloc_func)( nmemb, size );
    4c8a:	4b02      	ldr	r3, [pc, #8]	; (4c94 <mbedtls_calloc+0xc>)
    4c8c:	681b      	ldr	r3, [r3, #0]
    4c8e:	4798      	blx	r3
}
    4c90:	bd08      	pop	{r3, pc}
    4c92:	bf00      	nop
    4c94:	2002004c 	.word	0x2002004c

00004c98 <mbedtls_free>:

void mbedtls_free( void * ptr )
{
    4c98:	b508      	push	{r3, lr}
    (*mbedtls_free_func)( ptr );
    4c9a:	4b02      	ldr	r3, [pc, #8]	; (4ca4 <mbedtls_free+0xc>)
    4c9c:	681b      	ldr	r3, [r3, #0]
    4c9e:	4798      	blx	r3
}
    4ca0:	bd08      	pop	{r3, pc}
    4ca2:	bf00      	nop
    4ca4:	20020054 	.word	0x20020054

00004ca8 <mbedtls_platform_set_calloc_free>:

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    4ca8:	4b02      	ldr	r3, [pc, #8]	; (4cb4 <mbedtls_platform_set_calloc_free+0xc>)
    4caa:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    4cac:	4b02      	ldr	r3, [pc, #8]	; (4cb8 <mbedtls_platform_set_calloc_free+0x10>)
    4cae:	6019      	str	r1, [r3, #0]
    return( 0 );
}
    4cb0:	2000      	movs	r0, #0
    4cb2:	4770      	bx	lr
    4cb4:	2002004c 	.word	0x2002004c
    4cb8:	20020054 	.word	0x20020054

00004cbc <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    4cbc:	b131      	cbz	r1, 4ccc <mbedtls_platform_zeroize+0x10>
{
    4cbe:	b508      	push	{r3, lr}
    4cc0:	460a      	mov	r2, r1
        memset_func( buf, 0, len );
    4cc2:	4b03      	ldr	r3, [pc, #12]	; (4cd0 <mbedtls_platform_zeroize+0x14>)
    4cc4:	681b      	ldr	r3, [r3, #0]
    4cc6:	2100      	movs	r1, #0
    4cc8:	4798      	blx	r3
}
    4cca:	bd08      	pop	{r3, pc}
    4ccc:	4770      	bx	lr
    4cce:	bf00      	nop
    4cd0:	20020058 	.word	0x20020058

00004cd4 <rsa_check_context>:
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
                              int blinding_needed )
{
    4cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cd6:	4604      	mov	r4, r0
    4cd8:	460d      	mov	r5, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    4cda:	6847      	ldr	r7, [r0, #4]
    4cdc:	f100 0608 	add.w	r6, r0, #8
    4ce0:	4630      	mov	r0, r6
    4ce2:	f003 fe53 	bl	898c <mbedtls_mpi_size>
    4ce6:	4287      	cmp	r7, r0
    4ce8:	d151      	bne.n	4d8e <rsa_check_context+0xba>
        ctx->len > MBEDTLS_MPI_MAX_SIZE )
    4cea:	6863      	ldr	r3, [r4, #4]
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    4cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4cf0:	d84f      	bhi.n	4d92 <rsa_check_context+0xbe>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    4cf2:	2100      	movs	r1, #0
    4cf4:	4630      	mov	r0, r6
    4cf6:	f003 ffcc 	bl	8c92 <mbedtls_mpi_cmp_int>
    4cfa:	2800      	cmp	r0, #0
    4cfc:	dd2a      	ble.n	4d54 <rsa_check_context+0x80>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    4cfe:	2100      	movs	r1, #0
    4d00:	4630      	mov	r0, r6
    4d02:	f003 fe1b 	bl	893c <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    4d06:	b328      	cbz	r0, 4d54 <rsa_check_context+0x80>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    4d08:	b1cd      	cbz	r5, 4d3e <rsa_check_context+0x6a>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    4d0a:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    4d0e:	2100      	movs	r1, #0
    4d10:	4630      	mov	r0, r6
    4d12:	f003 ffbe 	bl	8c92 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    4d16:	2800      	cmp	r0, #0
    4d18:	dd1e      	ble.n	4d58 <rsa_check_context+0x84>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    4d1a:	2100      	movs	r1, #0
    4d1c:	4630      	mov	r0, r6
    4d1e:	f003 fe0d 	bl	893c <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    4d22:	b1c8      	cbz	r0, 4d58 <rsa_check_context+0x84>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    4d24:	f104 0638 	add.w	r6, r4, #56	; 0x38
    4d28:	2100      	movs	r1, #0
    4d2a:	4630      	mov	r0, r6
    4d2c:	f003 ffb1 	bl	8c92 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    4d30:	2800      	cmp	r0, #0
    4d32:	dd11      	ble.n	4d58 <rsa_check_context+0x84>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    4d34:	2100      	movs	r1, #0
    4d36:	4630      	mov	r0, r6
    4d38:	f003 fe00 	bl	893c <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    4d3c:	b160      	cbz	r0, 4d58 <rsa_check_context+0x84>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    4d3e:	2100      	movs	r1, #0
    4d40:	f104 0014 	add.w	r0, r4, #20
    4d44:	f003 ffa5 	bl	8c92 <mbedtls_mpi_cmp_int>
    4d48:	2800      	cmp	r0, #0
    4d4a:	dd24      	ble.n	4d96 <rsa_check_context+0xc2>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
    4d4c:	b935      	cbnz	r5, 4d5c <rsa_check_context+0x88>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
    4d4e:	b9ad      	cbnz	r5, 4d7c <rsa_check_context+0xa8>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
}
    4d50:	4628      	mov	r0, r5
    4d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4d54:	4d12      	ldr	r5, [pc, #72]	; (4da0 <rsa_check_context+0xcc>)
    4d56:	e7fb      	b.n	4d50 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4d58:	4d11      	ldr	r5, [pc, #68]	; (4da0 <rsa_check_context+0xcc>)
    4d5a:	e7f9      	b.n	4d50 <rsa_check_context+0x7c>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    4d5c:	2100      	movs	r1, #0
    4d5e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4d62:	f003 ff96 	bl	8c92 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    4d66:	2800      	cmp	r0, #0
    4d68:	dd06      	ble.n	4d78 <rsa_check_context+0xa4>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    4d6a:	2100      	movs	r1, #0
    4d6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
    4d70:	f003 ff8f 	bl	8c92 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    4d74:	2800      	cmp	r0, #0
    4d76:	dcea      	bgt.n	4d4e <rsa_check_context+0x7a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4d78:	4d09      	ldr	r5, [pc, #36]	; (4da0 <rsa_check_context+0xcc>)
    4d7a:	e7e9      	b.n	4d50 <rsa_check_context+0x7c>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    4d7c:	2100      	movs	r1, #0
    4d7e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    4d82:	f003 ff86 	bl	8c92 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    4d86:	2800      	cmp	r0, #0
    4d88:	dd07      	ble.n	4d9a <rsa_check_context+0xc6>
    return( 0 );
    4d8a:	2500      	movs	r5, #0
    4d8c:	e7e0      	b.n	4d50 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4d8e:	4d04      	ldr	r5, [pc, #16]	; (4da0 <rsa_check_context+0xcc>)
    4d90:	e7de      	b.n	4d50 <rsa_check_context+0x7c>
    4d92:	4d03      	ldr	r5, [pc, #12]	; (4da0 <rsa_check_context+0xcc>)
    4d94:	e7dc      	b.n	4d50 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4d96:	4d02      	ldr	r5, [pc, #8]	; (4da0 <rsa_check_context+0xcc>)
    4d98:	e7da      	b.n	4d50 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4d9a:	4d01      	ldr	r5, [pc, #4]	; (4da0 <rsa_check_context+0xcc>)
    4d9c:	e7d8      	b.n	4d50 <rsa_check_context+0x7c>
    4d9e:	bf00      	nop
    4da0:	ffffbf80 	.word	0xffffbf80

00004da4 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    4da4:	b570      	push	{r4, r5, r6, lr}
    4da6:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    4da8:	2200      	movs	r2, #0
    4daa:	4611      	mov	r1, r2
    4dac:	f7ff ff92 	bl	4cd4 <rsa_check_context>
    4db0:	b9e0      	cbnz	r0, 4dec <mbedtls_rsa_check_pubkey+0x48>
    4db2:	4606      	mov	r6, r0
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    4db4:	f104 0508 	add.w	r5, r4, #8
    4db8:	4628      	mov	r0, r5
    4dba:	f003 fdd0 	bl	895e <mbedtls_mpi_bitlen>
    4dbe:	287f      	cmp	r0, #127	; 0x7f
    4dc0:	d916      	bls.n	4df0 <mbedtls_rsa_check_pubkey+0x4c>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    4dc2:	3414      	adds	r4, #20
    4dc4:	2100      	movs	r1, #0
    4dc6:	4620      	mov	r0, r4
    4dc8:	f003 fdb8 	bl	893c <mbedtls_mpi_get_bit>
    4dcc:	b160      	cbz	r0, 4de8 <mbedtls_rsa_check_pubkey+0x44>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    4dce:	4620      	mov	r0, r4
    4dd0:	f003 fdc5 	bl	895e <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    4dd4:	2801      	cmp	r0, #1
    4dd6:	d907      	bls.n	4de8 <mbedtls_rsa_check_pubkey+0x44>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    4dd8:	4629      	mov	r1, r5
    4dda:	4620      	mov	r0, r4
    4ddc:	f003 ff11 	bl	8c02 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    4de0:	2800      	cmp	r0, #0
    4de2:	da01      	bge.n	4de8 <mbedtls_rsa_check_pubkey+0x44>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    4de4:	4630      	mov	r0, r6
    4de6:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    4de8:	4e02      	ldr	r6, [pc, #8]	; (4df4 <mbedtls_rsa_check_pubkey+0x50>)
    4dea:	e7fb      	b.n	4de4 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    4dec:	4e01      	ldr	r6, [pc, #4]	; (4df4 <mbedtls_rsa_check_pubkey+0x50>)
    4dee:	e7f9      	b.n	4de4 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    4df0:	4e00      	ldr	r6, [pc, #0]	; (4df4 <mbedtls_rsa_check_pubkey+0x50>)
    4df2:	e7f7      	b.n	4de4 <mbedtls_rsa_check_pubkey+0x40>
    4df4:	ffffbe00 	.word	0xffffbe00

00004df8 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    4df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dfa:	b087      	sub	sp, #28
    4dfc:	4604      	mov	r4, r0
    4dfe:	460d      	mov	r5, r1
    4e00:	4616      	mov	r6, r2
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    4e02:	2200      	movs	r2, #0
    4e04:	4611      	mov	r1, r2
    4e06:	f7ff ff65 	bl	4cd4 <rsa_check_context>
    4e0a:	bb98      	cbnz	r0, 4e74 <mbedtls_rsa_public+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    4e0c:	a803      	add	r0, sp, #12
    4e0e:	f003 fd04 	bl	881a <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    4e12:	6862      	ldr	r2, [r4, #4]
    4e14:	4629      	mov	r1, r5
    4e16:	a803      	add	r0, sp, #12
    4e18:	f003 fdbe 	bl	8998 <mbedtls_mpi_read_binary>
    4e1c:	4605      	mov	r5, r0
    4e1e:	b130      	cbz	r0, 4e2e <mbedtls_rsa_public+0x36>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    4e20:	a803      	add	r0, sp, #12
    4e22:	f003 fd00 	bl	8826 <mbedtls_mpi_free>

    if( ret != 0 )
    4e26:	bb15      	cbnz	r5, 4e6e <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
    4e28:	4628      	mov	r0, r5
    4e2a:	b007      	add	sp, #28
    4e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    4e2e:	f104 0508 	add.w	r5, r4, #8
    4e32:	4629      	mov	r1, r5
    4e34:	a803      	add	r0, sp, #12
    4e36:	f003 fee4 	bl	8c02 <mbedtls_mpi_cmp_mpi>
    4e3a:	2800      	cmp	r0, #0
    4e3c:	db02      	blt.n	4e44 <mbedtls_rsa_public+0x4c>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    4e3e:	f06f 0503 	mvn.w	r5, #3
    4e42:	e7ed      	b.n	4e20 <mbedtls_rsa_public+0x28>
    olen = ctx->len;
    4e44:	6867      	ldr	r7, [r4, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    4e46:	f104 0368 	add.w	r3, r4, #104	; 0x68
    4e4a:	9300      	str	r3, [sp, #0]
    4e4c:	462b      	mov	r3, r5
    4e4e:	f104 0214 	add.w	r2, r4, #20
    4e52:	a903      	add	r1, sp, #12
    4e54:	4608      	mov	r0, r1
    4e56:	f004 fa91 	bl	937c <mbedtls_mpi_exp_mod>
    4e5a:	4605      	mov	r5, r0
    4e5c:	2800      	cmp	r0, #0
    4e5e:	d1df      	bne.n	4e20 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    4e60:	463a      	mov	r2, r7
    4e62:	4631      	mov	r1, r6
    4e64:	a803      	add	r0, sp, #12
    4e66:	f003 fdc6 	bl	89f6 <mbedtls_mpi_write_binary>
    4e6a:	4605      	mov	r5, r0
cleanup:
    4e6c:	e7d8      	b.n	4e20 <mbedtls_rsa_public+0x28>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
    4e6e:	f5a5 4585 	sub.w	r5, r5, #17024	; 0x4280
    4e72:	e7d9      	b.n	4e28 <mbedtls_rsa_public+0x30>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4e74:	4d00      	ldr	r5, [pc, #0]	; (4e78 <mbedtls_rsa_public+0x80>)
    4e76:	e7d7      	b.n	4e28 <mbedtls_rsa_public+0x30>
    4e78:	ffffbf80 	.word	0xffffbf80

00004e7c <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    4e7c:	2300      	movs	r3, #0
    4e7e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    4e80:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    4e82:	460b      	mov	r3, r1
    4e84:	b9b9      	cbnz	r1, 4eb6 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
    4e86:	4a19      	ldr	r2, [pc, #100]	; (4eec <mbedtls_sha256_starts_ret+0x70>)
    4e88:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    4e8a:	4a19      	ldr	r2, [pc, #100]	; (4ef0 <mbedtls_sha256_starts_ret+0x74>)
    4e8c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    4e8e:	4a19      	ldr	r2, [pc, #100]	; (4ef4 <mbedtls_sha256_starts_ret+0x78>)
    4e90:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    4e92:	4a19      	ldr	r2, [pc, #100]	; (4ef8 <mbedtls_sha256_starts_ret+0x7c>)
    4e94:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    4e96:	4a19      	ldr	r2, [pc, #100]	; (4efc <mbedtls_sha256_starts_ret+0x80>)
    4e98:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    4e9a:	4a19      	ldr	r2, [pc, #100]	; (4f00 <mbedtls_sha256_starts_ret+0x84>)
    4e9c:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    4e9e:	4a19      	ldr	r2, [pc, #100]	; (4f04 <mbedtls_sha256_starts_ret+0x88>)
    4ea0:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    4ea2:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    4ea6:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    4eaa:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    4eae:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
    4eb0:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    4eb2:	2000      	movs	r0, #0
    4eb4:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
    4eb6:	4a14      	ldr	r2, [pc, #80]	; (4f08 <mbedtls_sha256_starts_ret+0x8c>)
    4eb8:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    4eba:	4a14      	ldr	r2, [pc, #80]	; (4f0c <mbedtls_sha256_starts_ret+0x90>)
    4ebc:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    4ebe:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    4ec2:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    4ec6:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    4eca:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    4ecc:	4a10      	ldr	r2, [pc, #64]	; (4f10 <mbedtls_sha256_starts_ret+0x94>)
    4ece:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    4ed0:	4a10      	ldr	r2, [pc, #64]	; (4f14 <mbedtls_sha256_starts_ret+0x98>)
    4ed2:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    4ed4:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    4ed8:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    4edc:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    4ee0:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    4ee2:	4a0d      	ldr	r2, [pc, #52]	; (4f18 <mbedtls_sha256_starts_ret+0x9c>)
    4ee4:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    4ee6:	4a0d      	ldr	r2, [pc, #52]	; (4f1c <mbedtls_sha256_starts_ret+0xa0>)
    4ee8:	6242      	str	r2, [r0, #36]	; 0x24
    4eea:	e7e1      	b.n	4eb0 <mbedtls_sha256_starts_ret+0x34>
    4eec:	6a09e667 	.word	0x6a09e667
    4ef0:	bb67ae85 	.word	0xbb67ae85
    4ef4:	3c6ef372 	.word	0x3c6ef372
    4ef8:	a54ff53a 	.word	0xa54ff53a
    4efc:	510e527f 	.word	0x510e527f
    4f00:	9b05688c 	.word	0x9b05688c
    4f04:	1f83d9ab 	.word	0x1f83d9ab
    4f08:	c1059ed8 	.word	0xc1059ed8
    4f0c:	367cd507 	.word	0x367cd507
    4f10:	f70e5939 	.word	0xf70e5939
    4f14:	ffc00b31 	.word	0xffc00b31
    4f18:	64f98fa7 	.word	0x64f98fa7
    4f1c:	befa4fa4 	.word	0xbefa4fa4

00004f20 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    4f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f24:	b0d1      	sub	sp, #324	; 0x144
    4f26:	9007      	str	r0, [sp, #28]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    4f28:	2300      	movs	r3, #0
    4f2a:	e006      	b.n	4f3a <mbedtls_internal_sha256_process+0x1a>
        A[i] = ctx->state[i];
    4f2c:	1c9a      	adds	r2, r3, #2
    4f2e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4f32:	ac08      	add	r4, sp, #32
    4f34:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    4f38:	3301      	adds	r3, #1
    4f3a:	2b07      	cmp	r3, #7
    4f3c:	d9f6      	bls.n	4f2c <mbedtls_internal_sha256_process+0xc>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
    4f3e:	2200      	movs	r2, #0
    4f40:	2a0f      	cmp	r2, #15
    4f42:	d811      	bhi.n	4f68 <mbedtls_internal_sha256_process+0x48>
        GET_UINT32_BE( W[i], data, 4 * i );
    4f44:	f811 4022 	ldrb.w	r4, [r1, r2, lsl #2]
    4f48:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4f4c:	7843      	ldrb	r3, [r0, #1]
    4f4e:	041b      	lsls	r3, r3, #16
    4f50:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    4f54:	7884      	ldrb	r4, [r0, #2]
    4f56:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    4f5a:	78c0      	ldrb	r0, [r0, #3]
    4f5c:	4303      	orrs	r3, r0
    4f5e:	a810      	add	r0, sp, #64	; 0x40
    4f60:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < 16; i++ )
    4f64:	3201      	adds	r2, #1
    4f66:	e7eb      	b.n	4f40 <mbedtls_internal_sha256_process+0x20>

    for( i = 0; i < 16; i += 8 )
    4f68:	f04f 0e00 	mov.w	lr, #0
    4f6c:	e142      	b.n	51f4 <mbedtls_internal_sha256_process+0x2d4>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    4f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4f70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    4f72:	ea4f 21f6 	mov.w	r1, r6, ror #11
    4f76:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
    4f7a:	ea81 6176 	eor.w	r1, r1, r6, ror #25
    4f7e:	4419      	add	r1, r3
    4f80:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    4f82:	980d      	ldr	r0, [sp, #52]	; 0x34
    4f84:	ea84 0300 	eor.w	r3, r4, r0
    4f88:	4033      	ands	r3, r6
    4f8a:	4063      	eors	r3, r4
    4f8c:	4419      	add	r1, r3
    4f8e:	f8df 8734 	ldr.w	r8, [pc, #1844]	; 56c4 <mbedtls_internal_sha256_process+0x7a4>
    4f92:	f858 302e 	ldr.w	r3, [r8, lr, lsl #2]
    4f96:	4419      	add	r1, r3
    4f98:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    4f9c:	f85c 302e 	ldr.w	r3, [ip, lr, lsl #2]
    4fa0:	4419      	add	r1, r3
    4fa2:	9d08      	ldr	r5, [sp, #32]
    4fa4:	ea4f 3a75 	mov.w	sl, r5, ror #13
    4fa8:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
    4fac:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    4fb0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4fb2:	ea05 0307 	and.w	r3, r5, r7
    4fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4fb8:	ea45 0907 	orr.w	r9, r5, r7
    4fbc:	ea02 0909 	and.w	r9, r2, r9
    4fc0:	ea43 0309 	orr.w	r3, r3, r9
    4fc4:	449a      	add	sl, r3
    4fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4fc8:	eb01 0903 	add.w	r9, r1, r3
    4fcc:	4451      	add	r1, sl
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    4fce:	ea4f 23f9 	mov.w	r3, r9, ror #11
    4fd2:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
    4fd6:	ea83 6379 	eor.w	r3, r3, r9, ror #25
    4fda:	441c      	add	r4, r3
    4fdc:	ea86 0300 	eor.w	r3, r6, r0
    4fe0:	ea09 0303 	and.w	r3, r9, r3
    4fe4:	4043      	eors	r3, r0
    4fe6:	441c      	add	r4, r3
    4fe8:	f10e 0a01 	add.w	sl, lr, #1
    4fec:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    4ff0:	441c      	add	r4, r3
    4ff2:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    4ff6:	441c      	add	r4, r3
    4ff8:	ea4f 3371 	mov.w	r3, r1, ror #13
    4ffc:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    5000:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    5004:	ea05 0a01 	and.w	sl, r5, r1
    5008:	ea45 0b01 	orr.w	fp, r5, r1
    500c:	ea07 0b0b 	and.w	fp, r7, fp
    5010:	ea4a 0a0b 	orr.w	sl, sl, fp
    5014:	4453      	add	r3, sl
    5016:	4422      	add	r2, r4
    5018:	441c      	add	r4, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    501a:	ea4f 23f2 	mov.w	r3, r2, ror #11
    501e:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    5022:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    5026:	4418      	add	r0, r3
    5028:	ea86 0309 	eor.w	r3, r6, r9
    502c:	4013      	ands	r3, r2
    502e:	4073      	eors	r3, r6
    5030:	4418      	add	r0, r3
    5032:	f10e 0a02 	add.w	sl, lr, #2
    5036:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    503a:	4418      	add	r0, r3
    503c:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    5040:	4418      	add	r0, r3
    5042:	ea4f 3374 	mov.w	r3, r4, ror #13
    5046:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
    504a:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
    504e:	ea01 0a04 	and.w	sl, r1, r4
    5052:	ea41 0b04 	orr.w	fp, r1, r4
    5056:	ea05 0b0b 	and.w	fp, r5, fp
    505a:	ea4a 0a0b 	orr.w	sl, sl, fp
    505e:	4453      	add	r3, sl
    5060:	4407      	add	r7, r0
    5062:	4418      	add	r0, r3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
    5064:	ea4f 23f7 	mov.w	r3, r7, ror #11
    5068:	ea83 13b7 	eor.w	r3, r3, r7, ror #6
    506c:	ea83 6377 	eor.w	r3, r3, r7, ror #25
    5070:	441e      	add	r6, r3
    5072:	ea89 0302 	eor.w	r3, r9, r2
    5076:	403b      	ands	r3, r7
    5078:	ea89 0303 	eor.w	r3, r9, r3
    507c:	441e      	add	r6, r3
    507e:	f10e 0a03 	add.w	sl, lr, #3
    5082:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    5086:	441e      	add	r6, r3
    5088:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    508c:	441e      	add	r6, r3
    508e:	ea4f 3370 	mov.w	r3, r0, ror #13
    5092:	ea83 03b0 	eor.w	r3, r3, r0, ror #2
    5096:	ea83 53b0 	eor.w	r3, r3, r0, ror #22
    509a:	ea04 0a00 	and.w	sl, r4, r0
    509e:	ea44 0b00 	orr.w	fp, r4, r0
    50a2:	ea01 0b0b 	and.w	fp, r1, fp
    50a6:	ea4a 0a0b 	orr.w	sl, sl, fp
    50aa:	4453      	add	r3, sl
    50ac:	4435      	add	r5, r6
    50ae:	441e      	add	r6, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
    50b0:	ea4f 23f5 	mov.w	r3, r5, ror #11
    50b4:	ea83 13b5 	eor.w	r3, r3, r5, ror #6
    50b8:	ea83 6375 	eor.w	r3, r3, r5, ror #25
    50bc:	4499      	add	r9, r3
    50be:	ea82 0307 	eor.w	r3, r2, r7
    50c2:	402b      	ands	r3, r5
    50c4:	4053      	eors	r3, r2
    50c6:	4499      	add	r9, r3
    50c8:	f10e 0a04 	add.w	sl, lr, #4
    50cc:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    50d0:	444b      	add	r3, r9
    50d2:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    50d6:	444b      	add	r3, r9
    50d8:	ea4f 3976 	mov.w	r9, r6, ror #13
    50dc:	ea89 09b6 	eor.w	r9, r9, r6, ror #2
    50e0:	ea89 59b6 	eor.w	r9, r9, r6, ror #22
    50e4:	ea00 0a06 	and.w	sl, r0, r6
    50e8:	ea40 0b06 	orr.w	fp, r0, r6
    50ec:	ea04 0b0b 	and.w	fp, r4, fp
    50f0:	ea4a 0a0b 	orr.w	sl, sl, fp
    50f4:	44d1      	add	r9, sl
    50f6:	4419      	add	r1, r3
    50f8:	910f      	str	r1, [sp, #60]	; 0x3c
    50fa:	444b      	add	r3, r9
    50fc:	930b      	str	r3, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
    50fe:	ea4f 29f1 	mov.w	r9, r1, ror #11
    5102:	ea89 19b1 	eor.w	r9, r9, r1, ror #6
    5106:	ea89 6971 	eor.w	r9, r9, r1, ror #25
    510a:	444a      	add	r2, r9
    510c:	ea87 0905 	eor.w	r9, r7, r5
    5110:	ea01 0909 	and.w	r9, r1, r9
    5114:	ea87 0909 	eor.w	r9, r7, r9
    5118:	4491      	add	r9, r2
    511a:	f10e 0a05 	add.w	sl, lr, #5
    511e:	f858 202a 	ldr.w	r2, [r8, sl, lsl #2]
    5122:	444a      	add	r2, r9
    5124:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    5128:	444a      	add	r2, r9
    512a:	ea4f 3a73 	mov.w	sl, r3, ror #13
    512e:	ea8a 0ab3 	eor.w	sl, sl, r3, ror #2
    5132:	ea8a 5ab3 	eor.w	sl, sl, r3, ror #22
    5136:	ea06 0903 	and.w	r9, r6, r3
    513a:	ea46 0b03 	orr.w	fp, r6, r3
    513e:	ea00 0b0b 	and.w	fp, r0, fp
    5142:	ea49 090b 	orr.w	r9, r9, fp
    5146:	44ca      	add	sl, r9
    5148:	eb04 0902 	add.w	r9, r4, r2
    514c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    5150:	4452      	add	r2, sl
    5152:	920a      	str	r2, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
    5154:	ea4f 24f9 	mov.w	r4, r9, ror #11
    5158:	ea84 14b9 	eor.w	r4, r4, r9, ror #6
    515c:	ea84 6479 	eor.w	r4, r4, r9, ror #25
    5160:	4427      	add	r7, r4
    5162:	ea85 0401 	eor.w	r4, r5, r1
    5166:	ea09 0404 	and.w	r4, r9, r4
    516a:	406c      	eors	r4, r5
    516c:	443c      	add	r4, r7
    516e:	f10e 0a06 	add.w	sl, lr, #6
    5172:	f858 702a 	ldr.w	r7, [r8, sl, lsl #2]
    5176:	443c      	add	r4, r7
    5178:	f85c 702a 	ldr.w	r7, [ip, sl, lsl #2]
    517c:	443c      	add	r4, r7
    517e:	ea4f 3772 	mov.w	r7, r2, ror #13
    5182:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
    5186:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
    518a:	ea03 0a02 	and.w	sl, r3, r2
    518e:	ea43 0b02 	orr.w	fp, r3, r2
    5192:	ea06 0b0b 	and.w	fp, r6, fp
    5196:	ea4a 0a0b 	orr.w	sl, sl, fp
    519a:	4457      	add	r7, sl
    519c:	4420      	add	r0, r4
    519e:	900d      	str	r0, [sp, #52]	; 0x34
    51a0:	443c      	add	r4, r7
    51a2:	9409      	str	r4, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    51a4:	ea4f 27f0 	mov.w	r7, r0, ror #11
    51a8:	ea87 17b0 	eor.w	r7, r7, r0, ror #6
    51ac:	ea87 6770 	eor.w	r7, r7, r0, ror #25
    51b0:	443d      	add	r5, r7
    51b2:	ea81 0909 	eor.w	r9, r1, r9
    51b6:	ea00 0909 	and.w	r9, r0, r9
    51ba:	ea81 0109 	eor.w	r1, r1, r9
    51be:	4429      	add	r1, r5
    51c0:	f10e 0007 	add.w	r0, lr, #7
    51c4:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
    51c8:	4429      	add	r1, r5
    51ca:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
    51ce:	4401      	add	r1, r0
    51d0:	ea4f 3074 	mov.w	r0, r4, ror #13
    51d4:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
    51d8:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
    51dc:	ea02 0504 	and.w	r5, r2, r4
    51e0:	4322      	orrs	r2, r4
    51e2:	4013      	ands	r3, r2
    51e4:	432b      	orrs	r3, r5
    51e6:	4403      	add	r3, r0
    51e8:	440e      	add	r6, r1
    51ea:	960c      	str	r6, [sp, #48]	; 0x30
    51ec:	440b      	add	r3, r1
    51ee:	9308      	str	r3, [sp, #32]
    for( i = 0; i < 16; i += 8 )
    51f0:	f10e 0e08 	add.w	lr, lr, #8
    51f4:	f1be 0f0f 	cmp.w	lr, #15
    51f8:	f67f aeb9 	bls.w	4f6e <mbedtls_internal_sha256_process+0x4e>
    }

    for( i = 16; i < 64; i += 8 )
    51fc:	2610      	movs	r6, #16
    51fe:	2e3f      	cmp	r6, #63	; 0x3f
    5200:	f200 824d 	bhi.w	569e <mbedtls_internal_sha256_process+0x77e>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    5204:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5208:	ea4f 27f3 	mov.w	r7, r3, ror #11
    520c:	ea87 17b3 	eor.w	r7, r7, r3, ror #6
    5210:	ea87 6773 	eor.w	r7, r7, r3, ror #25
    5214:	443a      	add	r2, r7
    5216:	980e      	ldr	r0, [sp, #56]	; 0x38
    5218:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    521a:	ea80 0705 	eor.w	r7, r0, r5
    521e:	401f      	ands	r7, r3
    5220:	4047      	eors	r7, r0
    5222:	443a      	add	r2, r7
    5224:	f8df b49c 	ldr.w	fp, [pc, #1180]	; 56c4 <mbedtls_internal_sha256_process+0x7a4>
    5228:	f85b 7026 	ldr.w	r7, [fp, r6, lsl #2]
    522c:	4417      	add	r7, r2
    522e:	1eb3      	subs	r3, r6, #2
    5230:	461a      	mov	r2, r3
    5232:	ab10      	add	r3, sp, #64	; 0x40
    5234:	9204      	str	r2, [sp, #16]
    5236:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    523a:	ea4f 44f2 	mov.w	r4, r2, ror #19
    523e:	ea84 4472 	eor.w	r4, r4, r2, ror #17
    5242:	ea84 2492 	eor.w	r4, r4, r2, lsr #10
    5246:	1ff2      	subs	r2, r6, #7
    5248:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    524c:	4414      	add	r4, r2
    524e:	f1a6 0a0f 	sub.w	sl, r6, #15
    5252:	f853 c02a 	ldr.w	ip, [r3, sl, lsl #2]
    5256:	ea4f 42bc 	mov.w	r2, ip, ror #18
    525a:	ea82 12fc 	eor.w	r2, r2, ip, ror #7
    525e:	ea82 02dc 	eor.w	r2, r2, ip, lsr #3
    5262:	4414      	add	r4, r2
    5264:	f1a6 0210 	sub.w	r2, r6, #16
    5268:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    526c:	4422      	add	r2, r4
    526e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    5272:	443a      	add	r2, r7
    5274:	9908      	ldr	r1, [sp, #32]
    5276:	ea4f 3c71 	mov.w	ip, r1, ror #13
    527a:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    527e:	ea8c 5eb1 	eor.w	lr, ip, r1, ror #22
    5282:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5284:	463c      	mov	r4, r7
    5286:	400c      	ands	r4, r1
    5288:	990a      	ldr	r1, [sp, #40]	; 0x28
    528a:	9100      	str	r1, [sp, #0]
    528c:	9908      	ldr	r1, [sp, #32]
    528e:	ea41 0c07 	orr.w	ip, r1, r7
    5292:	9900      	ldr	r1, [sp, #0]
    5294:	ea01 0c0c 	and.w	ip, r1, ip
    5298:	ea44 0c0c 	orr.w	ip, r4, ip
    529c:	44f4      	add	ip, lr
    529e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    52a0:	4414      	add	r4, r2
    52a2:	4462      	add	r2, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    52a4:	ea4f 28f4 	mov.w	r8, r4, ror #11
    52a8:	ea88 18b4 	eor.w	r8, r8, r4, ror #6
    52ac:	ea88 6874 	eor.w	r8, r8, r4, ror #25
    52b0:	4480      	add	r8, r0
    52b2:	990c      	ldr	r1, [sp, #48]	; 0x30
    52b4:	ea81 0905 	eor.w	r9, r1, r5
    52b8:	ea04 0909 	and.w	r9, r4, r9
    52bc:	ea85 0909 	eor.w	r9, r5, r9
    52c0:	44c8      	add	r8, r9
    52c2:	1c71      	adds	r1, r6, #1
    52c4:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
    52c8:	4480      	add	r8, r0
    52ca:	1e70      	subs	r0, r6, #1
    52cc:	9005      	str	r0, [sp, #20]
    52ce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    52d2:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    52d6:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    52da:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    52de:	1fb0      	subs	r0, r6, #6
    52e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    52e4:	4484      	add	ip, r0
    52e6:	f1a6 0e0e 	sub.w	lr, r6, #14
    52ea:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
    52ee:	ea4f 40b9 	mov.w	r0, r9, ror #18
    52f2:	ea80 10f9 	eor.w	r0, r0, r9, ror #7
    52f6:	ea80 00d9 	eor.w	r0, r0, r9, lsr #3
    52fa:	4460      	add	r0, ip
    52fc:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
    5300:	4448      	add	r0, r9
    5302:	9102      	str	r1, [sp, #8]
    5304:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    5308:	eb08 0900 	add.w	r9, r8, r0
    530c:	ea4f 3872 	mov.w	r8, r2, ror #13
    5310:	ea88 08b2 	eor.w	r8, r8, r2, ror #2
    5314:	ea88 58b2 	eor.w	r8, r8, r2, ror #22
    5318:	9908      	ldr	r1, [sp, #32]
    531a:	ea01 0002 	and.w	r0, r1, r2
    531e:	ea41 0c02 	orr.w	ip, r1, r2
    5322:	9701      	str	r7, [sp, #4]
    5324:	ea07 0c0c 	and.w	ip, r7, ip
    5328:	ea40 0c0c 	orr.w	ip, r0, ip
    532c:	44c4      	add	ip, r8
    532e:	9800      	ldr	r0, [sp, #0]
    5330:	eb00 0809 	add.w	r8, r0, r9
    5334:	44e1      	add	r9, ip
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    5336:	ea4f 20f8 	mov.w	r0, r8, ror #11
    533a:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
    533e:	ea80 6078 	eor.w	r0, r0, r8, ror #25
    5342:	4405      	add	r5, r0
    5344:	990c      	ldr	r1, [sp, #48]	; 0x30
    5346:	ea81 0004 	eor.w	r0, r1, r4
    534a:	ea08 0000 	and.w	r0, r8, r0
    534e:	4048      	eors	r0, r1
    5350:	4405      	add	r5, r0
    5352:	1cb0      	adds	r0, r6, #2
    5354:	4601      	mov	r1, r0
    5356:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
    535a:	4405      	add	r5, r0
    535c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    5360:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    5364:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    5368:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    536c:	1f70      	subs	r0, r6, #5
    536e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5372:	4484      	add	ip, r0
    5374:	f1a6 0a0d 	sub.w	sl, r6, #13
    5378:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
    537c:	ea4f 40b0 	mov.w	r0, r0, ror #18
    5380:	f853 702a 	ldr.w	r7, [r3, sl, lsl #2]
    5384:	ea80 10f7 	eor.w	r0, r0, r7, ror #7
    5388:	ea80 00d7 	eor.w	r0, r0, r7, lsr #3
    538c:	4460      	add	r0, ip
    538e:	f853 c02e 	ldr.w	ip, [r3, lr, lsl #2]
    5392:	4460      	add	r0, ip
    5394:	9103      	str	r1, [sp, #12]
    5396:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    539a:	4405      	add	r5, r0
    539c:	ea4f 3c79 	mov.w	ip, r9, ror #13
    53a0:	ea8c 0cb9 	eor.w	ip, ip, r9, ror #2
    53a4:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
    53a8:	ea02 0009 	and.w	r0, r2, r9
    53ac:	ea42 0e09 	orr.w	lr, r2, r9
    53b0:	9908      	ldr	r1, [sp, #32]
    53b2:	ea01 0e0e 	and.w	lr, r1, lr
    53b6:	ea40 000e 	orr.w	r0, r0, lr
    53ba:	4484      	add	ip, r0
    53bc:	9f01      	ldr	r7, [sp, #4]
    53be:	eb07 0e05 	add.w	lr, r7, r5
    53c2:	eb05 070c 	add.w	r7, r5, ip
    53c6:	9700      	str	r7, [sp, #0]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    53c8:	ea4f 20fe 	mov.w	r0, lr, ror #11
    53cc:	ea80 10be 	eor.w	r0, r0, lr, ror #6
    53d0:	ea80 607e 	eor.w	r0, r0, lr, ror #25
    53d4:	990c      	ldr	r1, [sp, #48]	; 0x30
    53d6:	180d      	adds	r5, r1, r0
    53d8:	ea84 0108 	eor.w	r1, r4, r8
    53dc:	ea0e 0101 	and.w	r1, lr, r1
    53e0:	4061      	eors	r1, r4
    53e2:	1868      	adds	r0, r5, r1
    53e4:	1cf7      	adds	r7, r6, #3
    53e6:	f85b 1027 	ldr.w	r1, [fp, r7, lsl #2]
    53ea:	4401      	add	r1, r0
    53ec:	9d02      	ldr	r5, [sp, #8]
    53ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    53f2:	ea4f 45f0 	mov.w	r5, r0, ror #19
    53f6:	ea85 4570 	eor.w	r5, r5, r0, ror #17
    53fa:	ea85 2590 	eor.w	r5, r5, r0, lsr #10
    53fe:	1f30      	subs	r0, r6, #4
    5400:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5404:	4405      	add	r5, r0
    5406:	9501      	str	r5, [sp, #4]
    5408:	f1a6 0c0c 	sub.w	ip, r6, #12
    540c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    5410:	ea4f 40b0 	mov.w	r0, r0, ror #18
    5414:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
    5418:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
    541c:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
    5420:	9d01      	ldr	r5, [sp, #4]
    5422:	4428      	add	r0, r5
    5424:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
    5428:	4428      	add	r0, r5
    542a:	9706      	str	r7, [sp, #24]
    542c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
    5430:	4401      	add	r1, r0
    5432:	9800      	ldr	r0, [sp, #0]
    5434:	ea4f 3570 	mov.w	r5, r0, ror #13
    5438:	4607      	mov	r7, r0
    543a:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
    543e:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
    5442:	ea09 0000 	and.w	r0, r9, r0
    5446:	ea49 0a07 	orr.w	sl, r9, r7
    544a:	ea02 0a0a 	and.w	sl, r2, sl
    544e:	ea40 000a 	orr.w	r0, r0, sl
    5452:	4405      	add	r5, r0
    5454:	9808      	ldr	r0, [sp, #32]
    5456:	eb00 0a01 	add.w	sl, r0, r1
    545a:	4429      	add	r1, r5
    545c:	9101      	str	r1, [sp, #4]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    545e:	ea4f 25fa 	mov.w	r5, sl, ror #11
    5462:	ea85 15ba 	eor.w	r5, r5, sl, ror #6
    5466:	ea85 657a 	eor.w	r5, r5, sl, ror #25
    546a:	442c      	add	r4, r5
    546c:	ea88 050e 	eor.w	r5, r8, lr
    5470:	ea0a 0505 	and.w	r5, sl, r5
    5474:	ea88 0505 	eor.w	r5, r8, r5
    5478:	4425      	add	r5, r4
    547a:	1d34      	adds	r4, r6, #4
    547c:	9402      	str	r4, [sp, #8]
    547e:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
    5482:	4405      	add	r5, r0
    5484:	9903      	ldr	r1, [sp, #12]
    5486:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    548a:	ea4f 40f4 	mov.w	r0, r4, ror #19
    548e:	ea80 4074 	eor.w	r0, r0, r4, ror #17
    5492:	ea80 2094 	eor.w	r0, r0, r4, lsr #10
    5496:	1ef4      	subs	r4, r6, #3
    5498:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
    549c:	4420      	add	r0, r4
    549e:	f1a6 070b 	sub.w	r7, r6, #11
    54a2:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
    54a6:	ea4f 44b1 	mov.w	r4, r1, ror #18
    54aa:	ea84 14f1 	eor.w	r4, r4, r1, ror #7
    54ae:	ea84 04d1 	eor.w	r4, r4, r1, lsr #3
    54b2:	4404      	add	r4, r0
    54b4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    54b8:	4420      	add	r0, r4
    54ba:	9902      	ldr	r1, [sp, #8]
    54bc:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    54c0:	4405      	add	r5, r0
    54c2:	9901      	ldr	r1, [sp, #4]
    54c4:	ea4f 3c71 	mov.w	ip, r1, ror #13
    54c8:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    54cc:	ea8c 5cb1 	eor.w	ip, ip, r1, ror #22
    54d0:	9800      	ldr	r0, [sp, #0]
    54d2:	4604      	mov	r4, r0
    54d4:	400c      	ands	r4, r1
    54d6:	4601      	mov	r1, r0
    54d8:	9801      	ldr	r0, [sp, #4]
    54da:	4308      	orrs	r0, r1
    54dc:	ea09 0000 	and.w	r0, r9, r0
    54e0:	4320      	orrs	r0, r4
    54e2:	4460      	add	r0, ip
    54e4:	442a      	add	r2, r5
    54e6:	920f      	str	r2, [sp, #60]	; 0x3c
    54e8:	4428      	add	r0, r5
    54ea:	900b      	str	r0, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    54ec:	ea4f 2cf2 	mov.w	ip, r2, ror #11
    54f0:	ea8c 1cb2 	eor.w	ip, ip, r2, ror #6
    54f4:	ea8c 6c72 	eor.w	ip, ip, r2, ror #25
    54f8:	44c4      	add	ip, r8
    54fa:	ea8e 080a 	eor.w	r8, lr, sl
    54fe:	9203      	str	r2, [sp, #12]
    5500:	ea02 0808 	and.w	r8, r2, r8
    5504:	ea8e 0808 	eor.w	r8, lr, r8
    5508:	44c4      	add	ip, r8
    550a:	1d74      	adds	r4, r6, #5
    550c:	4621      	mov	r1, r4
    550e:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
    5512:	44a4      	add	ip, r4
    5514:	9d06      	ldr	r5, [sp, #24]
    5516:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    551a:	ea4f 44f5 	mov.w	r4, r5, ror #19
    551e:	ea84 4475 	eor.w	r4, r4, r5, ror #17
    5522:	ea84 2495 	eor.w	r4, r4, r5, lsr #10
    5526:	9a04      	ldr	r2, [sp, #16]
    5528:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    552c:	442c      	add	r4, r5
    552e:	f1a6 080a 	sub.w	r8, r6, #10
    5532:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    5536:	ea4f 45b2 	mov.w	r5, r2, ror #18
    553a:	ea85 15f2 	eor.w	r5, r5, r2, ror #7
    553e:	ea85 05d2 	eor.w	r5, r5, r2, lsr #3
    5542:	4425      	add	r5, r4
    5544:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
    5548:	442c      	add	r4, r5
    554a:	9104      	str	r1, [sp, #16]
    554c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
    5550:	4464      	add	r4, ip
    5552:	ea4f 3770 	mov.w	r7, r0, ror #13
    5556:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
    555a:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
    555e:	9901      	ldr	r1, [sp, #4]
    5560:	ea01 0500 	and.w	r5, r1, r0
    5564:	ea41 0c00 	orr.w	ip, r1, r0
    5568:	9900      	ldr	r1, [sp, #0]
    556a:	ea01 0c0c 	and.w	ip, r1, ip
    556e:	ea45 050c 	orr.w	r5, r5, ip
    5572:	442f      	add	r7, r5
    5574:	eb09 0c04 	add.w	ip, r9, r4
    5578:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    557c:	443c      	add	r4, r7
    557e:	940a      	str	r4, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    5580:	ea4f 27fc 	mov.w	r7, ip, ror #11
    5584:	ea87 17bc 	eor.w	r7, r7, ip, ror #6
    5588:	ea87 677c 	eor.w	r7, r7, ip, ror #25
    558c:	4477      	add	r7, lr
    558e:	9d03      	ldr	r5, [sp, #12]
    5590:	ea8a 0e05 	eor.w	lr, sl, r5
    5594:	ea0c 0e0e 	and.w	lr, ip, lr
    5598:	ea8a 0e0e 	eor.w	lr, sl, lr
    559c:	4477      	add	r7, lr
    559e:	f106 0906 	add.w	r9, r6, #6
    55a2:	f85b 5029 	ldr.w	r5, [fp, r9, lsl #2]
    55a6:	442f      	add	r7, r5
    55a8:	9d02      	ldr	r5, [sp, #8]
    55aa:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    55ae:	ea4f 4ef5 	mov.w	lr, r5, ror #19
    55b2:	ea8e 4e75 	eor.w	lr, lr, r5, ror #17
    55b6:	ea8e 2e95 	eor.w	lr, lr, r5, lsr #10
    55ba:	9a05      	ldr	r2, [sp, #20]
    55bc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    55c0:	44ae      	add	lr, r5
    55c2:	f1a6 0209 	sub.w	r2, r6, #9
    55c6:	9202      	str	r2, [sp, #8]
    55c8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    55cc:	4629      	mov	r1, r5
    55ce:	ea4f 45b5 	mov.w	r5, r5, ror #18
    55d2:	ea85 15f1 	eor.w	r5, r5, r1, ror #7
    55d6:	ea85 05d1 	eor.w	r5, r5, r1, lsr #3
    55da:	4475      	add	r5, lr
    55dc:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
    55e0:	4475      	add	r5, lr
    55e2:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
    55e6:	442f      	add	r7, r5
    55e8:	ea4f 3574 	mov.w	r5, r4, ror #13
    55ec:	ea85 05b4 	eor.w	r5, r5, r4, ror #2
    55f0:	ea85 55b4 	eor.w	r5, r5, r4, ror #22
    55f4:	ea00 0904 	and.w	r9, r0, r4
    55f8:	ea40 0e04 	orr.w	lr, r0, r4
    55fc:	9a01      	ldr	r2, [sp, #4]
    55fe:	ea02 0e0e 	and.w	lr, r2, lr
    5602:	ea49 090e 	orr.w	r9, r9, lr
    5606:	44a9      	add	r9, r5
    5608:	9900      	ldr	r1, [sp, #0]
    560a:	19cd      	adds	r5, r1, r7
    560c:	950d      	str	r5, [sp, #52]	; 0x34
    560e:	444f      	add	r7, r9
    5610:	9709      	str	r7, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    5612:	ea4f 2ef5 	mov.w	lr, r5, ror #11
    5616:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    561a:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    561e:	44d6      	add	lr, sl
    5620:	9a03      	ldr	r2, [sp, #12]
    5622:	ea82 0c0c 	eor.w	ip, r2, ip
    5626:	ea05 0c0c 	and.w	ip, r5, ip
    562a:	ea82 020c 	eor.w	r2, r2, ip
    562e:	4472      	add	r2, lr
    5630:	f106 0807 	add.w	r8, r6, #7
    5634:	f85b 5028 	ldr.w	r5, [fp, r8, lsl #2]
    5638:	eb02 0e05 	add.w	lr, r2, r5
    563c:	9904      	ldr	r1, [sp, #16]
    563e:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
    5642:	ea4f 42f5 	mov.w	r2, r5, ror #19
    5646:	ea82 4275 	eor.w	r2, r2, r5, ror #17
    564a:	ea82 2295 	eor.w	r2, r2, r5, lsr #10
    564e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    5652:	440a      	add	r2, r1
    5654:	f1a6 0508 	sub.w	r5, r6, #8
    5658:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    565c:	ea4f 45bc 	mov.w	r5, ip, ror #18
    5660:	ea85 15fc 	eor.w	r5, r5, ip, ror #7
    5664:	ea85 05dc 	eor.w	r5, r5, ip, lsr #3
    5668:	442a      	add	r2, r5
    566a:	9d02      	ldr	r5, [sp, #8]
    566c:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    5670:	442a      	add	r2, r5
    5672:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
    5676:	4472      	add	r2, lr
    5678:	ea4f 3377 	mov.w	r3, r7, ror #13
    567c:	ea83 03b7 	eor.w	r3, r3, r7, ror #2
    5680:	ea83 53b7 	eor.w	r3, r3, r7, ror #22
    5684:	ea04 0507 	and.w	r5, r4, r7
    5688:	4327      	orrs	r7, r4
    568a:	4038      	ands	r0, r7
    568c:	4328      	orrs	r0, r5
    568e:	4418      	add	r0, r3
    5690:	9901      	ldr	r1, [sp, #4]
    5692:	4411      	add	r1, r2
    5694:	910c      	str	r1, [sp, #48]	; 0x30
    5696:	4410      	add	r0, r2
    5698:	9008      	str	r0, [sp, #32]
    for( i = 16; i < 64; i += 8 )
    569a:	3608      	adds	r6, #8
    569c:	e5af      	b.n	51fe <mbedtls_internal_sha256_process+0x2de>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    569e:	2300      	movs	r3, #0
    56a0:	9807      	ldr	r0, [sp, #28]
    56a2:	e009      	b.n	56b8 <mbedtls_internal_sha256_process+0x798>
        ctx->state[i] += A[i];
    56a4:	aa08      	add	r2, sp, #32
    56a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    56aa:	1c99      	adds	r1, r3, #2
    56ac:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    56b0:	4422      	add	r2, r4
    56b2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    56b6:	3301      	adds	r3, #1
    56b8:	2b07      	cmp	r3, #7
    56ba:	d9f3      	bls.n	56a4 <mbedtls_internal_sha256_process+0x784>

    return( 0 );
}
    56bc:	2000      	movs	r0, #0
    56be:	b051      	add	sp, #324	; 0x144
    56c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56c4:	0000aa6c 	.word	0x0000aa6c

000056c8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    56c8:	b570      	push	{r4, r5, r6, lr}
    56ca:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    56cc:	4b11      	ldr	r3, [pc, #68]	; (5714 <z_sys_init_run_level+0x4c>)
    56ce:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    56d2:	e000      	b.n	56d6 <z_sys_init_run_level+0xe>
    56d4:	3508      	adds	r5, #8
    56d6:	1c73      	adds	r3, r6, #1
    56d8:	4a0e      	ldr	r2, [pc, #56]	; (5714 <z_sys_init_run_level+0x4c>)
    56da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    56de:	42ab      	cmp	r3, r5
    56e0:	d917      	bls.n	5712 <z_sys_init_run_level+0x4a>
		const struct device *dev = entry->dev;
    56e2:	686c      	ldr	r4, [r5, #4]

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) != 0) && (dev != NULL)) {
    56e4:	682b      	ldr	r3, [r5, #0]
    56e6:	4620      	mov	r0, r4
    56e8:	4798      	blx	r3
    56ea:	2800      	cmp	r0, #0
    56ec:	d0f2      	beq.n	56d4 <z_sys_init_run_level+0xc>
    56ee:	2c00      	cmp	r4, #0
    56f0:	d0f0      	beq.n	56d4 <z_sys_init_run_level+0xc>
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
    56f2:	4909      	ldr	r1, [pc, #36]	; (5718 <z_sys_init_run_level+0x50>)
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    56f4:	4b09      	ldr	r3, [pc, #36]	; (571c <z_sys_init_run_level+0x54>)
    56f6:	1ae4      	subs	r4, r4, r3
    56f8:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    56fa:	0960      	lsrs	r0, r4, #5
    56fc:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    5700:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
    5704:	2201      	movs	r2, #1
    5706:	fa02 f404 	lsl.w	r4, r2, r4
    570a:	431c      	orrs	r4, r3
    570c:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
}
    5710:	e7e0      	b.n	56d4 <z_sys_init_run_level+0xc>
		}
	}
}
    5712:	bd70      	pop	{r4, r5, r6, pc}
    5714:	0000ab6c 	.word	0x0000ab6c
    5718:	20020124 	.word	0x20020124
    571c:	200200c4 	.word	0x200200c4

00005720 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    5720:	4b08      	ldr	r3, [pc, #32]	; (5744 <z_device_ready+0x24>)
    5722:	1ac0      	subs	r0, r0, r3
    5724:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    5726:	0942      	lsrs	r2, r0, #5
    5728:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    572c:	4b06      	ldr	r3, [pc, #24]	; (5748 <z_device_ready+0x28>)
    572e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    5732:	2301      	movs	r3, #1
    5734:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    5738:	4202      	tst	r2, r0
}
    573a:	bf0c      	ite	eq
    573c:	4618      	moveq	r0, r3
    573e:	2000      	movne	r0, #0
    5740:	4770      	bx	lr
    5742:	bf00      	nop
    5744:	200200c4 	.word	0x200200c4
    5748:	20020124 	.word	0x20020124

0000574c <z_impl_device_get_binding>:
{
    574c:	b538      	push	{r3, r4, r5, lr}
    574e:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
    5750:	4c11      	ldr	r4, [pc, #68]	; (5798 <z_impl_device_get_binding+0x4c>)
    5752:	e000      	b.n	5756 <z_impl_device_get_binding+0xa>
    5754:	3410      	adds	r4, #16
    5756:	4b11      	ldr	r3, [pc, #68]	; (579c <z_impl_device_get_binding+0x50>)
    5758:	429c      	cmp	r4, r3
    575a:	d008      	beq.n	576e <z_impl_device_get_binding+0x22>
		if (z_device_ready(dev) && (dev->name == name)) {
    575c:	4620      	mov	r0, r4
    575e:	f7ff ffdf 	bl	5720 <z_device_ready>
    5762:	2800      	cmp	r0, #0
    5764:	d0f6      	beq.n	5754 <z_impl_device_get_binding+0x8>
    5766:	6823      	ldr	r3, [r4, #0]
    5768:	42ab      	cmp	r3, r5
    576a:	d1f3      	bne.n	5754 <z_impl_device_get_binding+0x8>
    576c:	e012      	b.n	5794 <z_impl_device_get_binding+0x48>
	for (dev = __device_start; dev != __device_end; dev++) {
    576e:	4c0a      	ldr	r4, [pc, #40]	; (5798 <z_impl_device_get_binding+0x4c>)
    5770:	e000      	b.n	5774 <z_impl_device_get_binding+0x28>
    5772:	3410      	adds	r4, #16
    5774:	4b09      	ldr	r3, [pc, #36]	; (579c <z_impl_device_get_binding+0x50>)
    5776:	429c      	cmp	r4, r3
    5778:	d00b      	beq.n	5792 <z_impl_device_get_binding+0x46>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    577a:	4620      	mov	r0, r4
    577c:	f7ff ffd0 	bl	5720 <z_device_ready>
    5780:	2800      	cmp	r0, #0
    5782:	d0f6      	beq.n	5772 <z_impl_device_get_binding+0x26>
    5784:	6821      	ldr	r1, [r4, #0]
    5786:	4628      	mov	r0, r5
    5788:	f002 facb 	bl	7d22 <strcmp>
    578c:	2800      	cmp	r0, #0
    578e:	d1f0      	bne.n	5772 <z_impl_device_get_binding+0x26>
    5790:	e000      	b.n	5794 <z_impl_device_get_binding+0x48>
	return NULL;
    5792:	2400      	movs	r4, #0
}
    5794:	4620      	mov	r0, r4
    5796:	bd38      	pop	{r3, r4, r5, pc}
    5798:	200200c4 	.word	0x200200c4
    579c:	20020124 	.word	0x20020124

000057a0 <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
    57a0:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    57a2:	4803      	ldr	r0, [pc, #12]	; (57b0 <z_bss_zero+0x10>)
    57a4:	4a03      	ldr	r2, [pc, #12]	; (57b4 <z_bss_zero+0x14>)
    57a6:	1a12      	subs	r2, r2, r0
    57a8:	2100      	movs	r1, #0
    57aa:	f002 faff 	bl	7dac <memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((uint32_t) &__gcov_bss_end - (uint32_t) &__gcov_bss_start));
#endif
}
    57ae:	bd08      	pop	{r3, pc}
    57b0:	200201a0 	.word	0x200201a0
    57b4:	20023290 	.word	0x20023290

000057b8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    57b8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    57ba:	4806      	ldr	r0, [pc, #24]	; (57d4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    57bc:	4a06      	ldr	r2, [pc, #24]	; (57d8 <z_data_copy+0x20>)
    57be:	1a12      	subs	r2, r2, r0
    57c0:	4906      	ldr	r1, [pc, #24]	; (57dc <z_data_copy+0x24>)
    57c2:	f002 facf 	bl	7d64 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    57c6:	4a06      	ldr	r2, [pc, #24]	; (57e0 <z_data_copy+0x28>)
    57c8:	4906      	ldr	r1, [pc, #24]	; (57e4 <z_data_copy+0x2c>)
    57ca:	4807      	ldr	r0, [pc, #28]	; (57e8 <z_data_copy+0x30>)
    57cc:	f002 faca 	bl	7d64 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    57d0:	bd08      	pop	{r3, pc}
    57d2:	bf00      	nop
    57d4:	20020000 	.word	0x20020000
    57d8:	2002019c 	.word	0x2002019c
    57dc:	0000ac58 	.word	0x0000ac58
    57e0:	00000000 	.word	0x00000000
    57e4:	0000ac58 	.word	0x0000ac58
    57e8:	20020000 	.word	0x20020000

000057ec <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    57ec:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    57ee:	4b0b      	ldr	r3, [pc, #44]	; (581c <bg_thread_main+0x30>)
    57f0:	2201      	movs	r2, #1
    57f2:	701a      	strb	r2, [r3, #0]

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    57f4:	2002      	movs	r0, #2
    57f6:	f7ff ff67 	bl	56c8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    57fa:	4a09      	ldr	r2, [pc, #36]	; (5820 <bg_thread_main+0x34>)
    57fc:	4909      	ldr	r1, [pc, #36]	; (5824 <bg_thread_main+0x38>)
    57fe:	480a      	ldr	r0, [pc, #40]	; (5828 <bg_thread_main+0x3c>)
    5800:	f001 fc0c 	bl	701c <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5804:	2003      	movs	r0, #3
    5806:	f7ff ff5f 	bl	56c8 <z_sys_init_run_level>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    580a:	f7fa fe19 	bl	440 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    580e:	4a07      	ldr	r2, [pc, #28]	; (582c <bg_thread_main+0x40>)
    5810:	7b13      	ldrb	r3, [r2, #12]
    5812:	f023 0301 	bic.w	r3, r3, #1
    5816:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5818:	bd08      	pop	{r3, pc}
    581a:	bf00      	nop
    581c:	2002328f 	.word	0x2002328f
    5820:	0000a67c 	.word	0x0000a67c
    5824:	0000ab84 	.word	0x0000ab84
    5828:	0000aba4 	.word	0x0000aba4
    582c:	200201a0 	.word	0x200201a0

00005830 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    5830:	b508      	push	{r3, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    5832:	f7fc fdbb 	bl	23ac <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5836:	4b12      	ldr	r3, [pc, #72]	; (5880 <z_cstart+0x50>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5838:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    583c:	4c11      	ldr	r4, [pc, #68]	; (5884 <z_cstart+0x54>)
    583e:	23e0      	movs	r3, #224	; 0xe0
    5840:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    5844:	2500      	movs	r5, #0
    5846:	77e5      	strb	r5, [r4, #31]
    5848:	7625      	strb	r5, [r4, #24]
    584a:	7665      	strb	r5, [r4, #25]
    584c:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    584e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5850:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5854:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5856:	f7fd fe79 	bl	354c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    585a:	f7fd fd2f 	bl	32bc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    585e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5862:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5864:	62e3      	str	r3, [r4, #44]	; 0x2c

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5866:	4628      	mov	r0, r5
    5868:	f7ff ff2e 	bl	56c8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    586c:	2001      	movs	r0, #1
    586e:	f7ff ff2b 	bl	56c8 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    5872:	462b      	mov	r3, r5
    5874:	462a      	mov	r2, r5
    5876:	4629      	mov	r1, r5
    5878:	4803      	ldr	r0, [pc, #12]	; (5888 <z_cstart+0x58>)
    587a:	f7fd fd01 	bl	3280 <z_arm_switch_to_main_no_multithreading>
    587e:	bf00      	nop
    5880:	20026290 	.word	0x20026290
    5884:	e000ed00 	.word	0xe000ed00
    5888:	000057ed 	.word	0x000057ed

0000588c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    588c:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    588e:	4c06      	ldr	r4, [pc, #24]	; (58a8 <init_mem_slab_module+0x1c>)
	int rc = 0;
    5890:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5892:	4b06      	ldr	r3, [pc, #24]	; (58ac <init_mem_slab_module+0x20>)
    5894:	429c      	cmp	r4, r3
    5896:	d206      	bcs.n	58a6 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    5898:	4620      	mov	r0, r4
    589a:	f004 f91a 	bl	9ad2 <create_free_list>
		if (rc < 0) {
    589e:	2800      	cmp	r0, #0
    58a0:	db01      	blt.n	58a6 <init_mem_slab_module+0x1a>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    58a2:	341c      	adds	r4, #28
    58a4:	e7f5      	b.n	5892 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    58a6:	bd10      	pop	{r4, pc}
    58a8:	20020128 	.word	0x20020128
    58ac:	20020128 	.word	0x20020128

000058b0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    58b0:	b5d0      	push	{r4, r6, r7, lr}
    58b2:	b082      	sub	sp, #8
    58b4:	460c      	mov	r4, r1
    58b6:	461f      	mov	r7, r3
	__asm__ volatile(
    58b8:	f04f 0320 	mov.w	r3, #32
    58bc:	f3ef 8111 	mrs	r1, BASEPRI
    58c0:	f383 8811 	msr	BASEPRI, r3
    58c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    58c8:	6943      	ldr	r3, [r0, #20]
    58ca:	b16b      	cbz	r3, 58e8 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    58cc:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    58ce:	6943      	ldr	r3, [r0, #20]
    58d0:	681b      	ldr	r3, [r3, #0]
    58d2:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    58d4:	6983      	ldr	r3, [r0, #24]
    58d6:	3301      	adds	r3, #1
    58d8:	6183      	str	r3, [r0, #24]
		result = 0;
    58da:	2000      	movs	r0, #0
	__asm__ volatile(
    58dc:	f381 8811 	msr	BASEPRI, r1
    58e0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	return result;
}
    58e4:	b002      	add	sp, #8
    58e6:	bdd0      	pop	{r4, r6, r7, pc}
    58e8:	4616      	mov	r6, r2
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    58ea:	ea56 0307 	orrs.w	r3, r6, r7
    58ee:	d104      	bne.n	58fa <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    58f0:	2300      	movs	r3, #0
    58f2:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    58f4:	f06f 000b 	mvn.w	r0, #11
    58f8:	e7f0      	b.n	58dc <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    58fa:	e9cd 6700 	strd	r6, r7, [sp]
    58fe:	4602      	mov	r2, r0
    5900:	4804      	ldr	r0, [pc, #16]	; (5914 <k_mem_slab_alloc+0x64>)
    5902:	f000 fa8d 	bl	5e20 <z_pend_curr>
		if (result == 0) {
    5906:	2800      	cmp	r0, #0
    5908:	d1ec      	bne.n	58e4 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    590a:	4b03      	ldr	r3, [pc, #12]	; (5918 <k_mem_slab_alloc+0x68>)
    590c:	689b      	ldr	r3, [r3, #8]
    590e:	695b      	ldr	r3, [r3, #20]
    5910:	6023      	str	r3, [r4, #0]
		return result;
    5912:	e7e7      	b.n	58e4 <k_mem_slab_alloc+0x34>
    5914:	20023240 	.word	0x20023240
    5918:	20023240 	.word	0x20023240

0000591c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    591c:	b570      	push	{r4, r5, r6, lr}
    591e:	4604      	mov	r4, r0
    5920:	460d      	mov	r5, r1
	__asm__ volatile(
    5922:	f04f 0320 	mov.w	r3, #32
    5926:	f3ef 8611 	mrs	r6, BASEPRI
    592a:	f383 8811 	msr	BASEPRI, r3
    592e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5932:	f004 f9c2 	bl	9cba <z_unpend_first_thread>

	if (pending_thread != NULL) {
    5936:	b150      	cbz	r0, 594e <k_mem_slab_free+0x32>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5938:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    593a:	2100      	movs	r1, #0
    593c:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    593e:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    5940:	f004 f92b 	bl	9b9a <z_ready_thread>
		z_reschedule(&lock, key);
    5944:	4631      	mov	r1, r6
    5946:	4808      	ldr	r0, [pc, #32]	; (5968 <k_mem_slab_free+0x4c>)
    5948:	f000 f8e8 	bl	5b1c <z_reschedule>
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    594c:	bd70      	pop	{r4, r5, r6, pc}
		**(char ***)mem = slab->free_list;
    594e:	682b      	ldr	r3, [r5, #0]
    5950:	6962      	ldr	r2, [r4, #20]
    5952:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    5954:	682b      	ldr	r3, [r5, #0]
    5956:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    5958:	69a3      	ldr	r3, [r4, #24]
    595a:	3b01      	subs	r3, #1
    595c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    595e:	f386 8811 	msr	BASEPRI, r6
    5962:	f3bf 8f6f 	isb	sy
}
    5966:	e7f1      	b.n	594c <k_mem_slab_free+0x30>
    5968:	20023240 	.word	0x20023240

0000596c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    596c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5970:	b083      	sub	sp, #12
    5972:	4604      	mov	r4, r0
    5974:	461d      	mov	r5, r3
	__asm__ volatile(
    5976:	f04f 0320 	mov.w	r3, #32
    597a:	f3ef 8711 	mrs	r7, BASEPRI
    597e:	f383 8811 	msr	BASEPRI, r3
    5982:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5986:	68c1      	ldr	r1, [r0, #12]
    5988:	b999      	cbnz	r1, 59b2 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    598a:	2900      	cmp	r1, #0
    598c:	d14f      	bne.n	5a2e <z_impl_k_mutex_lock+0xc2>
    598e:	4b3a      	ldr	r3, [pc, #232]	; (5a78 <z_impl_k_mutex_lock+0x10c>)
    5990:	689b      	ldr	r3, [r3, #8]
    5992:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5996:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    5998:	3101      	adds	r1, #1
    599a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    599c:	4b36      	ldr	r3, [pc, #216]	; (5a78 <z_impl_k_mutex_lock+0x10c>)
    599e:	689b      	ldr	r3, [r3, #8]
    59a0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    59a2:	f387 8811 	msr	BASEPRI, r7
    59a6:	f3bf 8f6f 	isb	sy
			mutex->owner_orig_prio);

		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
    59aa:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    59ac:	b003      	add	sp, #12
    59ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    59b2:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    59b4:	6882      	ldr	r2, [r0, #8]
    59b6:	4b30      	ldr	r3, [pc, #192]	; (5a78 <z_impl_k_mutex_lock+0x10c>)
    59b8:	689b      	ldr	r3, [r3, #8]
    59ba:	429a      	cmp	r2, r3
    59bc:	d0e5      	beq.n	598a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    59be:	ea55 0106 	orrs.w	r1, r5, r6
    59c2:	bf0c      	ite	eq
    59c4:	f04f 0801 	moveq.w	r8, #1
    59c8:	f04f 0800 	movne.w	r8, #0
    59cc:	d031      	beq.n	5a32 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    59ce:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    59d2:	4649      	mov	r1, r9
    59d4:	f993 000e 	ldrsb.w	r0, [r3, #14]
    59d8:	f004 f8a0 	bl	9b1c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    59dc:	4581      	cmp	r9, r0
    59de:	dc2f      	bgt.n	5a40 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    59e0:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    59e4:	9600      	str	r6, [sp, #0]
    59e6:	9501      	str	r5, [sp, #4]
    59e8:	4622      	mov	r2, r4
    59ea:	4639      	mov	r1, r7
    59ec:	4823      	ldr	r0, [pc, #140]	; (5a7c <z_impl_k_mutex_lock+0x110>)
    59ee:	f000 fa17 	bl	5e20 <z_pend_curr>
	if (got_mutex == 0) {
    59f2:	2800      	cmp	r0, #0
    59f4:	d0da      	beq.n	59ac <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    59f6:	f04f 0320 	mov.w	r3, #32
    59fa:	f3ef 8511 	mrs	r5, BASEPRI
    59fe:	f383 8811 	msr	BASEPRI, r3
    5a02:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5a06:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a08:	429c      	cmp	r4, r3
    5a0a:	d01f      	beq.n	5a4c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5a0c:	b1f3      	cbz	r3, 5a4c <z_impl_k_mutex_lock+0xe0>
    5a0e:	6921      	ldr	r1, [r4, #16]
    5a10:	f993 000e 	ldrsb.w	r0, [r3, #14]
    5a14:	f004 f882 	bl	9b1c <new_prio_for_inheritance>
    5a18:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5a1a:	4620      	mov	r0, r4
    5a1c:	f004 f887 	bl	9b2e <adjust_owner_prio>
    5a20:	b9b0      	cbnz	r0, 5a50 <z_impl_k_mutex_lock+0xe4>
    5a22:	f1b9 0f00 	cmp.w	r9, #0
    5a26:	d015      	beq.n	5a54 <z_impl_k_mutex_lock+0xe8>
    5a28:	f04f 0801 	mov.w	r8, #1
    5a2c:	e012      	b.n	5a54 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    5a2e:	6923      	ldr	r3, [r4, #16]
    5a30:	e7b1      	b.n	5996 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    5a32:	f387 8811 	msr	BASEPRI, r7
    5a36:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    5a3a:	f06f 000f 	mvn.w	r0, #15
    5a3e:	e7b5      	b.n	59ac <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    5a40:	4601      	mov	r1, r0
    5a42:	4620      	mov	r0, r4
    5a44:	f004 f873 	bl	9b2e <adjust_owner_prio>
    5a48:	4681      	mov	r9, r0
    5a4a:	e7cb      	b.n	59e4 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5a4c:	6921      	ldr	r1, [r4, #16]
    5a4e:	e7e4      	b.n	5a1a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5a50:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    5a54:	f1b8 0f00 	cmp.w	r8, #0
    5a58:	d106      	bne.n	5a68 <z_impl_k_mutex_lock+0xfc>
    5a5a:	f385 8811 	msr	BASEPRI, r5
    5a5e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    5a62:	f06f 000a 	mvn.w	r0, #10
    5a66:	e7a1      	b.n	59ac <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    5a68:	4629      	mov	r1, r5
    5a6a:	4804      	ldr	r0, [pc, #16]	; (5a7c <z_impl_k_mutex_lock+0x110>)
    5a6c:	f000 f856 	bl	5b1c <z_reschedule>
	return -EAGAIN;
    5a70:	f06f 000a 	mvn.w	r0, #10
    5a74:	e79a      	b.n	59ac <z_impl_k_mutex_lock+0x40>
    5a76:	bf00      	nop
    5a78:	20023240 	.word	0x20023240
    5a7c:	20023240 	.word	0x20023240

00005a80 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5a80:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    5a82:	6883      	ldr	r3, [r0, #8]
    5a84:	b383      	cbz	r3, 5ae8 <z_impl_k_mutex_unlock+0x68>
    5a86:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5a88:	4a1a      	ldr	r2, [pc, #104]	; (5af4 <z_impl_k_mutex_unlock+0x74>)
    5a8a:	6892      	ldr	r2, [r2, #8]
    5a8c:	4293      	cmp	r3, r2
    5a8e:	d12e      	bne.n	5aee <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    5a90:	68c3      	ldr	r3, [r0, #12]
    5a92:	2b01      	cmp	r3, #1
    5a94:	d005      	beq.n	5aa2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count--;
    5a96:	3b01      	subs	r3, #1
    5a98:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    5a9a:	f004 f876 	bl	9b8a <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    5a9e:	2000      	movs	r0, #0
}
    5aa0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5aa2:	f04f 0320 	mov.w	r3, #32
    5aa6:	f3ef 8511 	mrs	r5, BASEPRI
    5aaa:	f383 8811 	msr	BASEPRI, r3
    5aae:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5ab2:	6901      	ldr	r1, [r0, #16]
    5ab4:	f004 f83b 	bl	9b2e <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5ab8:	4620      	mov	r0, r4
    5aba:	f004 f8fe 	bl	9cba <z_unpend_first_thread>
	mutex->owner = new_owner;
    5abe:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5ac0:	b158      	cbz	r0, 5ada <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    5ac2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5ac6:	6123      	str	r3, [r4, #16]
    5ac8:	2300      	movs	r3, #0
    5aca:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    5acc:	f004 f865 	bl	9b9a <z_ready_thread>
		z_reschedule(&lock, key);
    5ad0:	4629      	mov	r1, r5
    5ad2:	4809      	ldr	r0, [pc, #36]	; (5af8 <z_impl_k_mutex_unlock+0x78>)
    5ad4:	f000 f822 	bl	5b1c <z_reschedule>
    5ad8:	e7df      	b.n	5a9a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    5ada:	2300      	movs	r3, #0
    5adc:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    5ade:	f385 8811 	msr	BASEPRI, r5
    5ae2:	f3bf 8f6f 	isb	sy
    5ae6:	e7d8      	b.n	5a9a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    5ae8:	f06f 0015 	mvn.w	r0, #21
    5aec:	e7d8      	b.n	5aa0 <z_impl_k_mutex_unlock+0x20>
		return -EPERM;
    5aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5af2:	e7d5      	b.n	5aa0 <z_impl_k_mutex_unlock+0x20>
    5af4:	20023240 	.word	0x20023240
    5af8:	20023240 	.word	0x20023240

00005afc <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    5afc:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5b02:	bf08      	it	eq
    5b04:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    5b08:	d100      	bne.n	5b0c <add_thread_timeout+0x10>
#ifdef CONFIG_LEGACY_TIMEOUT_API
		timeout = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
#endif
		z_add_thread_timeout(thread, timeout);
	}
}
    5b0a:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, k_timeout_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    5b0c:	4902      	ldr	r1, [pc, #8]	; (5b18 <add_thread_timeout+0x1c>)
    5b0e:	3018      	adds	r0, #24
    5b10:	f000 fa78 	bl	6004 <z_add_timeout>
    5b14:	e7f9      	b.n	5b0a <add_thread_timeout+0xe>
    5b16:	bf00      	nop
    5b18:	00009bc7 	.word	0x00009bc7

00005b1c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5b1c:	4608      	mov	r0, r1
    5b1e:	b981      	cbnz	r1, 5b42 <z_reschedule+0x26>
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    5b20:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5b22:	f3ef 8305 	mrs	r3, IPSR
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5b26:	b93b      	cbnz	r3, 5b38 <z_reschedule+0x1c>
#ifdef CONFIG_SMP
extern struct k_thread *z_get_next_ready_thread(void);
#else
static ALWAYS_INLINE struct k_thread *z_get_next_ready_thread(void)
{
	return _kernel.ready_q.cache;
    5b28:	4b08      	ldr	r3, [pc, #32]	; (5b4c <z_reschedule+0x30>)
    5b2a:	6a1a      	ldr	r2, [r3, #32]
	return new_thread != _current;
    5b2c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    5b2e:	429a      	cmp	r2, r3
    5b30:	d002      	beq.n	5b38 <z_reschedule+0x1c>

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    5b32:	f7fd fb23 	bl	317c <arch_swap>
		z_swap(lock, key);
    5b36:	e003      	b.n	5b40 <z_reschedule+0x24>
    5b38:	f380 8811 	msr	BASEPRI, r0
    5b3c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    5b40:	bd08      	pop	{r3, pc}
    5b42:	f381 8811 	msr	BASEPRI, r1
    5b46:	f3bf 8f6f 	isb	sy
    5b4a:	4770      	bx	lr
    5b4c:	20023240 	.word	0x20023240

00005b50 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    5b50:	4b0a      	ldr	r3, [pc, #40]	; (5b7c <z_priq_dumb_remove+0x2c>)
    5b52:	4283      	cmp	r3, r0
    5b54:	d008      	beq.n	5b68 <z_priq_dumb_remove+0x18>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    5b56:	684a      	ldr	r2, [r1, #4]
    5b58:	680b      	ldr	r3, [r1, #0]
    5b5a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    5b5c:	684a      	ldr	r2, [r1, #4]
    5b5e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5b60:	2300      	movs	r3, #0
    5b62:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    5b64:	604b      	str	r3, [r1, #4]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5b66:	4770      	bx	lr
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    5b68:	3b24      	subs	r3, #36	; 0x24
    5b6a:	689b      	ldr	r3, [r3, #8]
    5b6c:	428b      	cmp	r3, r1
    5b6e:	d1f2      	bne.n	5b56 <z_priq_dumb_remove+0x6>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
}

static inline bool z_is_thread_prevented_from_running(struct k_thread *thread)
{
	uint8_t state = thread->base.thread_state;
    5b70:	7b4b      	ldrb	r3, [r1, #13]
    5b72:	f013 0f1f 	tst.w	r3, #31
    5b76:	d0ee      	beq.n	5b56 <z_priq_dumb_remove+0x6>
    5b78:	e7f5      	b.n	5b66 <z_priq_dumb_remove+0x16>
    5b7a:	bf00      	nop
    5b7c:	20023264 	.word	0x20023264

00005b80 <update_cache>:
{
    5b80:	b538      	push	{r3, r4, r5, lr}
    5b82:	4604      	mov	r4, r0
	if (_current_cpu->pending_abort != NULL) {
    5b84:	4b12      	ldr	r3, [pc, #72]	; (5bd0 <update_cache+0x50>)
    5b86:	691b      	ldr	r3, [r3, #16]
    5b88:	b16b      	cbz	r3, 5ba6 <update_cache+0x26>
		return _current_cpu->idle_thread;
    5b8a:	4b11      	ldr	r3, [pc, #68]	; (5bd0 <update_cache+0x50>)
    5b8c:	68d8      	ldr	r0, [r3, #12]
	if (preempt_ok != 0) {
    5b8e:	b9e4      	cbnz	r4, 5bca <update_cache+0x4a>
	if (z_is_thread_prevented_from_running(_current)) {
    5b90:	4b0f      	ldr	r3, [pc, #60]	; (5bd0 <update_cache+0x50>)
    5b92:	689b      	ldr	r3, [r3, #8]
    5b94:	7b5a      	ldrb	r2, [r3, #13]
    5b96:	f012 0f1f 	tst.w	r2, #31
    5b9a:	d116      	bne.n	5bca <update_cache+0x4a>
	return node->next != NULL;
    5b9c:	6982      	ldr	r2, [r0, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5b9e:	b9a2      	cbnz	r2, 5bca <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
    5ba0:	4a0b      	ldr	r2, [pc, #44]	; (5bd0 <update_cache+0x50>)
    5ba2:	6213      	str	r3, [r2, #32]
    5ba4:	e013      	b.n	5bce <update_cache+0x4e>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    5ba6:	4d0a      	ldr	r5, [pc, #40]	; (5bd0 <update_cache+0x50>)
    5ba8:	f105 0024 	add.w	r0, r5, #36	; 0x24
    5bac:	f003 ffee 	bl	9b8c <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    5bb0:	68aa      	ldr	r2, [r5, #8]
    5bb2:	7b53      	ldrb	r3, [r2, #13]
    5bb4:	f013 0f20 	tst.w	r3, #32
    5bb8:	d002      	beq.n	5bc0 <update_cache+0x40>
		_current->base.thread_state |= _THREAD_DEAD;
    5bba:	f043 0308 	orr.w	r3, r3, #8
    5bbe:	7353      	strb	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    5bc0:	2800      	cmp	r0, #0
    5bc2:	d1e4      	bne.n	5b8e <update_cache+0xe>
    5bc4:	4b02      	ldr	r3, [pc, #8]	; (5bd0 <update_cache+0x50>)
    5bc6:	68d8      	ldr	r0, [r3, #12]
    5bc8:	e7e1      	b.n	5b8e <update_cache+0xe>
		_kernel.ready_q.cache = thread;
    5bca:	4b01      	ldr	r3, [pc, #4]	; (5bd0 <update_cache+0x50>)
    5bcc:	6218      	str	r0, [r3, #32]
}
    5bce:	bd38      	pop	{r3, r4, r5, pc}
    5bd0:	20023240 	.word	0x20023240

00005bd4 <ready_thread>:
{
    5bd4:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
}

static inline bool z_is_thread_state_set(struct k_thread *thread, uint32_t state)
{
	return (thread->base.thread_state & state) != 0U;
    5bd6:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5bd8:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5bdc:	2b00      	cmp	r3, #0
    5bde:	db2d      	blt.n	5c3c <ready_thread+0x68>
    5be0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5be2:	f012 0f1f 	tst.w	r2, #31
    5be6:	d105      	bne.n	5bf4 <ready_thread+0x20>
    5be8:	6983      	ldr	r3, [r0, #24]
    5bea:	b10b      	cbz	r3, 5bf0 <ready_thread+0x1c>
    5bec:	2300      	movs	r3, #0
    5bee:	e002      	b.n	5bf6 <ready_thread+0x22>
    5bf0:	2301      	movs	r3, #1
    5bf2:	e000      	b.n	5bf6 <ready_thread+0x22>
    5bf4:	2300      	movs	r3, #0
    5bf6:	b30b      	cbz	r3, 5c3c <ready_thread+0x68>
	return list->head == list;
    5bf8:	4b15      	ldr	r3, [pc, #84]	; (5c50 <ready_thread+0x7c>)
    5bfa:	f853 5f24 	ldr.w	r5, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5bfe:	429d      	cmp	r5, r3
    5c00:	d024      	beq.n	5c4c <ready_thread+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c02:	b165      	cbz	r5, 5c1e <ready_thread+0x4a>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    5c04:	4629      	mov	r1, r5
    5c06:	4620      	mov	r0, r4
    5c08:	f003 ffa7 	bl	9b5a <z_is_t1_higher_prio_than_t2>
    5c0c:	b9b8      	cbnz	r0, 5c3e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5c0e:	b135      	cbz	r5, 5c1e <ready_thread+0x4a>
	return (node == list->tail) ? NULL : node->next;
    5c10:	4b0f      	ldr	r3, [pc, #60]	; (5c50 <ready_thread+0x7c>)
    5c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c14:	429d      	cmp	r5, r3
    5c16:	d002      	beq.n	5c1e <ready_thread+0x4a>
    5c18:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c1a:	2d00      	cmp	r5, #0
    5c1c:	d1f1      	bne.n	5c02 <ready_thread+0x2e>
	node->next = list;
    5c1e:	4b0c      	ldr	r3, [pc, #48]	; (5c50 <ready_thread+0x7c>)
    5c20:	f103 0224 	add.w	r2, r3, #36	; 0x24
    5c24:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
    5c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c28:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    5c2a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5c2c:	629c      	str	r4, [r3, #40]	; 0x28
	thread->base.thread_state &= ~_THREAD_PENDING;
}

static inline void z_set_thread_states(struct k_thread *thread, uint32_t states)
{
	thread->base.thread_state |= states;
    5c2e:	7b63      	ldrb	r3, [r4, #13]
    5c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5c34:	7363      	strb	r3, [r4, #13]
		update_cache(0);
    5c36:	2000      	movs	r0, #0
    5c38:	f7ff ffa2 	bl	5b80 <update_cache>
}
    5c3c:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = successor->prev;
    5c3e:	686b      	ldr	r3, [r5, #4]
    5c40:	6063      	str	r3, [r4, #4]
	node->next = successor;
    5c42:	6025      	str	r5, [r4, #0]
	successor->prev->next = node;
    5c44:	686b      	ldr	r3, [r5, #4]
    5c46:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5c48:	606c      	str	r4, [r5, #4]
}
    5c4a:	e7f0      	b.n	5c2e <ready_thread+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c4c:	2500      	movs	r5, #0
    5c4e:	e7d8      	b.n	5c02 <ready_thread+0x2e>
    5c50:	20023240 	.word	0x20023240

00005c54 <z_impl_k_thread_suspend>:
{
    5c54:	b538      	push	{r3, r4, r5, lr}
    5c56:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5c58:	3018      	adds	r0, #24
    5c5a:	f004 f8ab 	bl	9db4 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    5c5e:	2300      	movs	r3, #0
	__asm__ volatile(
    5c60:	f04f 0220 	mov.w	r2, #32
    5c64:	f3ef 8511 	mrs	r5, BASEPRI
    5c68:	f382 8811 	msr	BASEPRI, r2
    5c6c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5c70:	e010      	b.n	5c94 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5c72:	7b63      	ldrb	r3, [r4, #13]
    5c74:	f043 0310 	orr.w	r3, r3, #16
    5c78:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    5c7a:	4b15      	ldr	r3, [pc, #84]	; (5cd0 <z_impl_k_thread_suspend+0x7c>)
    5c7c:	6898      	ldr	r0, [r3, #8]
    5c7e:	42a0      	cmp	r0, r4
    5c80:	bf14      	ite	ne
    5c82:	2000      	movne	r0, #0
    5c84:	2001      	moveq	r0, #1
    5c86:	f7ff ff7b 	bl	5b80 <update_cache>
	__asm__ volatile(
    5c8a:	f385 8811 	msr	BASEPRI, r5
    5c8e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5c92:	2301      	movs	r3, #1
    5c94:	b963      	cbnz	r3, 5cb0 <z_impl_k_thread_suspend+0x5c>
		if (z_is_thread_queued(thread)) {
    5c96:	f994 300d 	ldrsb.w	r3, [r4, #13]
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	dae9      	bge.n	5c72 <z_impl_k_thread_suspend+0x1e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    5c9e:	4621      	mov	r1, r4
    5ca0:	480c      	ldr	r0, [pc, #48]	; (5cd4 <z_impl_k_thread_suspend+0x80>)
    5ca2:	f7ff ff55 	bl	5b50 <z_priq_dumb_remove>
}

static inline void z_reset_thread_states(struct k_thread *thread,
					uint32_t states)
{
	thread->base.thread_state &= ~states;
    5ca6:	7b63      	ldrb	r3, [r4, #13]
    5ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5cac:	7363      	strb	r3, [r4, #13]
}

static inline void z_mark_thread_as_not_queued(struct k_thread *thread)
{
	z_reset_thread_states(thread, _THREAD_QUEUED);
}
    5cae:	e7e0      	b.n	5c72 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    5cb0:	4b07      	ldr	r3, [pc, #28]	; (5cd0 <z_impl_k_thread_suspend+0x7c>)
    5cb2:	689b      	ldr	r3, [r3, #8]
    5cb4:	42a3      	cmp	r3, r4
    5cb6:	d000      	beq.n	5cba <z_impl_k_thread_suspend+0x66>
}
    5cb8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5cba:	f04f 0320 	mov.w	r3, #32
    5cbe:	f3ef 8011 	mrs	r0, BASEPRI
    5cc2:	f383 8811 	msr	BASEPRI, r3
    5cc6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    5cca:	f003 ff50 	bl	9b6e <z_reschedule_irqlock>
    5cce:	e7f3      	b.n	5cb8 <z_impl_k_thread_suspend+0x64>
    5cd0:	20023240 	.word	0x20023240
    5cd4:	20023264 	.word	0x20023264

00005cd8 <z_thread_single_abort>:
    5cd8:	f04f 0320 	mov.w	r3, #32
    5cdc:	f3ef 8211 	mrs	r2, BASEPRI
    5ce0:	f383 8811 	msr	BASEPRI, r3
    5ce4:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    5ce8:	7b43      	ldrb	r3, [r0, #13]
    5cea:	f013 0f28 	tst.w	r3, #40	; 0x28
    5cee:	d004      	beq.n	5cfa <z_thread_single_abort+0x22>
	__asm__ volatile(
    5cf0:	f382 8811 	msr	BASEPRI, r2
    5cf4:	f3bf 8f6f 	isb	sy
		return;
    5cf8:	4770      	bx	lr
{
    5cfa:	b570      	push	{r4, r5, r6, lr}
    5cfc:	4605      	mov	r5, r0
	thread->base.thread_state |= _THREAD_ABORTING;
    5cfe:	f043 0320 	orr.w	r3, r3, #32
    5d02:	7343      	strb	r3, [r0, #13]
    5d04:	f382 8811 	msr	BASEPRI, r2
    5d08:	f3bf 8f6f 	isb	sy
    5d0c:	3018      	adds	r0, #24
    5d0e:	f004 f851 	bl	9db4 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    5d12:	2300      	movs	r3, #0
	__asm__ volatile(
    5d14:	f04f 0220 	mov.w	r2, #32
    5d18:	f3ef 8611 	mrs	r6, BASEPRI
    5d1c:	f382 8811 	msr	BASEPRI, r2
    5d20:	f3bf 8f6f 	isb	sy
	void (*fn_abort)(struct k_thread *aborted) = NULL;
    5d24:	4619      	mov	r1, r3
    5d26:	e03f      	b.n	5da8 <z_thread_single_abort+0xd0>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5d28:	2201      	movs	r2, #1
    5d2a:	e046      	b.n	5dba <z_thread_single_abort+0xe2>
				_priq_run_remove(&_kernel.ready_q.runq,
    5d2c:	4629      	mov	r1, r5
    5d2e:	482c      	ldr	r0, [pc, #176]	; (5de0 <z_thread_single_abort+0x108>)
    5d30:	f7ff ff0e 	bl	5b50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    5d34:	7b6b      	ldrb	r3, [r5, #13]
    5d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5d3a:	736b      	strb	r3, [r5, #13]
}
    5d3c:	e043      	b.n	5dc6 <z_thread_single_abort+0xee>
			if (z_is_thread_pending(thread)) {
    5d3e:	f013 0f02 	tst.w	r3, #2
    5d42:	d020      	beq.n	5d86 <z_thread_single_abort+0xae>
				_priq_wait_remove(&pended_on(thread)->waitq,
    5d44:	4628      	mov	r0, r5
    5d46:	f003 ff04 	bl	9b52 <pended_on>
    5d4a:	4629      	mov	r1, r5
    5d4c:	f7ff ff00 	bl	5b50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5d50:	7b6b      	ldrb	r3, [r5, #13]
    5d52:	f023 0302 	bic.w	r3, r3, #2
    5d56:	736b      	strb	r3, [r5, #13]
				thread->base.pended_on = NULL;
    5d58:	2300      	movs	r3, #0
    5d5a:	60ab      	str	r3, [r5, #8]
    5d5c:	e013      	b.n	5d86 <z_thread_single_abort+0xae>
    5d5e:	f104 0018 	add.w	r0, r4, #24
    5d62:	f004 f827 	bl	9db4 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    5d66:	4620      	mov	r0, r4
    5d68:	f003 fef3 	bl	9b52 <pended_on>
    5d6c:	4621      	mov	r1, r4
    5d6e:	f7ff feef 	bl	5b50 <z_priq_dumb_remove>
    5d72:	7b63      	ldrb	r3, [r4, #13]
    5d74:	f023 0302 	bic.w	r3, r3, #2
    5d78:	7363      	strb	r3, [r4, #13]
			waiter->base.pended_on = NULL;
    5d7a:	2300      	movs	r3, #0
    5d7c:	60a3      	str	r3, [r4, #8]
    5d7e:	67e3      	str	r3, [r4, #124]	; 0x7c
			ready_thread(waiter);
    5d80:	4620      	mov	r0, r4
    5d82:	f7ff ff27 	bl	5bd4 <ready_thread>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5d86:	f105 0330 	add.w	r3, r5, #48	; 0x30
	return list->head == list;
    5d8a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5d8c:	42a3      	cmp	r3, r4
    5d8e:	d001      	beq.n	5d94 <z_thread_single_abort+0xbc>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    5d90:	2c00      	cmp	r4, #0
    5d92:	d1e4      	bne.n	5d5e <z_thread_single_abort+0x86>
		thread->base.thread_state |= _THREAD_DEAD;
    5d94:	7b6b      	ldrb	r3, [r5, #13]
    5d96:	f043 0308 	orr.w	r3, r3, #8
    5d9a:	736b      	strb	r3, [r5, #13]
		fn_abort = thread->fn_abort;
    5d9c:	6e29      	ldr	r1, [r5, #96]	; 0x60
	__asm__ volatile(
    5d9e:	f386 8811 	msr	BASEPRI, r6
    5da2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5da6:	2301      	movs	r3, #1
    5da8:	461a      	mov	r2, r3
    5daa:	b9ab      	cbnz	r3, 5dd8 <z_thread_single_abort+0x100>
	uint8_t state = thread->base.thread_state;
    5dac:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5dae:	f013 0f1f 	tst.w	r3, #31
    5db2:	d102      	bne.n	5dba <z_thread_single_abort+0xe2>
	return node->next != NULL;
    5db4:	69a9      	ldr	r1, [r5, #24]
    5db6:	2900      	cmp	r1, #0
    5db8:	d0b6      	beq.n	5d28 <z_thread_single_abort+0x50>
		if (z_is_thread_ready(thread)) {
    5dba:	f012 0f01 	tst.w	r2, #1
    5dbe:	d0be      	beq.n	5d3e <z_thread_single_abort+0x66>
			if (z_is_thread_queued(thread)) {
    5dc0:	f013 0f80 	tst.w	r3, #128	; 0x80
    5dc4:	d1b2      	bne.n	5d2c <z_thread_single_abort+0x54>
			update_cache(thread == _current);
    5dc6:	4b07      	ldr	r3, [pc, #28]	; (5de4 <z_thread_single_abort+0x10c>)
    5dc8:	6898      	ldr	r0, [r3, #8]
    5dca:	42a8      	cmp	r0, r5
    5dcc:	bf14      	ite	ne
    5dce:	2000      	movne	r0, #0
    5dd0:	2001      	moveq	r0, #1
    5dd2:	f7ff fed5 	bl	5b80 <update_cache>
    5dd6:	e7d6      	b.n	5d86 <z_thread_single_abort+0xae>
	if (fn_abort != NULL) {
    5dd8:	b109      	cbz	r1, 5dde <z_thread_single_abort+0x106>
		fn_abort(thread);
    5dda:	4628      	mov	r0, r5
    5ddc:	4788      	blx	r1
}
    5dde:	bd70      	pop	{r4, r5, r6, pc}
    5de0:	20023264 	.word	0x20023264
    5de4:	20023240 	.word	0x20023240

00005de8 <unready_thread>:
{
    5de8:	b510      	push	{r4, lr}
    5dea:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5dec:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5df0:	2b00      	cmp	r3, #0
    5df2:	db08      	blt.n	5e06 <unready_thread+0x1e>
	update_cache(thread == _current);
    5df4:	4b08      	ldr	r3, [pc, #32]	; (5e18 <unready_thread+0x30>)
    5df6:	6898      	ldr	r0, [r3, #8]
    5df8:	42a0      	cmp	r0, r4
    5dfa:	bf14      	ite	ne
    5dfc:	2000      	movne	r0, #0
    5dfe:	2001      	moveq	r0, #1
    5e00:	f7ff febe 	bl	5b80 <update_cache>
}
    5e04:	bd10      	pop	{r4, pc}
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    5e06:	4601      	mov	r1, r0
    5e08:	4804      	ldr	r0, [pc, #16]	; (5e1c <unready_thread+0x34>)
    5e0a:	f7ff fea1 	bl	5b50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    5e0e:	7b63      	ldrb	r3, [r4, #13]
    5e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5e14:	7363      	strb	r3, [r4, #13]
}
    5e16:	e7ed      	b.n	5df4 <unready_thread+0xc>
    5e18:	20023240 	.word	0x20023240
    5e1c:	20023264 	.word	0x20023264

00005e20 <z_pend_curr>:
{
    5e20:	b510      	push	{r4, lr}
    5e22:	460c      	mov	r4, r1
    5e24:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5e2a:	4804      	ldr	r0, [pc, #16]	; (5e3c <z_pend_curr+0x1c>)
    5e2c:	6880      	ldr	r0, [r0, #8]
    5e2e:	f003 ff23 	bl	9c78 <pend>
    5e32:	4620      	mov	r0, r4
    5e34:	f7fd f9a2 	bl	317c <arch_swap>
}
    5e38:	bd10      	pop	{r4, pc}
    5e3a:	bf00      	nop
    5e3c:	20023240 	.word	0x20023240

00005e40 <z_set_prio>:
{
    5e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e44:	4604      	mov	r4, r0
    5e46:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    5e48:	2300      	movs	r3, #0
	__asm__ volatile(
    5e4a:	f04f 0220 	mov.w	r2, #32
    5e4e:	f3ef 8611 	mrs	r6, BASEPRI
    5e52:	f382 8811 	msr	BASEPRI, r2
    5e56:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    5e5a:	4698      	mov	r8, r3
    5e5c:	e008      	b.n	5e70 <z_set_prio+0x30>
		if (need_sched) {
    5e5e:	f012 0801 	ands.w	r8, r2, #1
    5e62:	d111      	bne.n	5e88 <z_set_prio+0x48>
			thread->base.prio = prio;
    5e64:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    5e66:	f386 8811 	msr	BASEPRI, r6
    5e6a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5e6e:	2301      	movs	r3, #1
    5e70:	461a      	mov	r2, r3
    5e72:	2b00      	cmp	r3, #0
    5e74:	d136      	bne.n	5ee4 <z_set_prio+0xa4>
	uint8_t state = thread->base.thread_state;
    5e76:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5e78:	f013 0f1f 	tst.w	r3, #31
    5e7c:	d1ef      	bne.n	5e5e <z_set_prio+0x1e>
    5e7e:	69a3      	ldr	r3, [r4, #24]
    5e80:	2b00      	cmp	r3, #0
    5e82:	d1ec      	bne.n	5e5e <z_set_prio+0x1e>
    5e84:	2201      	movs	r2, #1
    5e86:	e7ea      	b.n	5e5e <z_set_prio+0x1e>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    5e88:	4d18      	ldr	r5, [pc, #96]	; (5eec <z_set_prio+0xac>)
    5e8a:	f105 0924 	add.w	r9, r5, #36	; 0x24
    5e8e:	4621      	mov	r1, r4
    5e90:	4648      	mov	r0, r9
    5e92:	f7ff fe5d 	bl	5b50 <z_priq_dumb_remove>
				thread->base.prio = prio;
    5e96:	73a7      	strb	r7, [r4, #14]
	return list->head == list;
    5e98:	6a6d      	ldr	r5, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e9a:	454d      	cmp	r5, r9
    5e9c:	d020      	beq.n	5ee0 <z_set_prio+0xa0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e9e:	b165      	cbz	r5, 5eba <z_set_prio+0x7a>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    5ea0:	4629      	mov	r1, r5
    5ea2:	4620      	mov	r0, r4
    5ea4:	f003 fe59 	bl	9b5a <z_is_t1_higher_prio_than_t2>
    5ea8:	b998      	cbnz	r0, 5ed2 <z_set_prio+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5eaa:	b135      	cbz	r5, 5eba <z_set_prio+0x7a>
	return (node == list->tail) ? NULL : node->next;
    5eac:	4b0f      	ldr	r3, [pc, #60]	; (5eec <z_set_prio+0xac>)
    5eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5eb0:	429d      	cmp	r5, r3
    5eb2:	d002      	beq.n	5eba <z_set_prio+0x7a>
    5eb4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5eb6:	2d00      	cmp	r5, #0
    5eb8:	d1f1      	bne.n	5e9e <z_set_prio+0x5e>
	node->next = list;
    5eba:	4b0c      	ldr	r3, [pc, #48]	; (5eec <z_set_prio+0xac>)
    5ebc:	f103 0224 	add.w	r2, r3, #36	; 0x24
    5ec0:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
    5ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5ec4:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    5ec6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5ec8:	629c      	str	r4, [r3, #40]	; 0x28
			update_cache(1);
    5eca:	2001      	movs	r0, #1
    5ecc:	f7ff fe58 	bl	5b80 <update_cache>
    5ed0:	e7c9      	b.n	5e66 <z_set_prio+0x26>
	node->prev = successor->prev;
    5ed2:	686b      	ldr	r3, [r5, #4]
    5ed4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    5ed6:	6025      	str	r5, [r4, #0]
	successor->prev->next = node;
    5ed8:	686b      	ldr	r3, [r5, #4]
    5eda:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5edc:	606c      	str	r4, [r5, #4]
}
    5ede:	e7f4      	b.n	5eca <z_set_prio+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5ee0:	2500      	movs	r5, #0
    5ee2:	e7dc      	b.n	5e9e <z_set_prio+0x5e>
}
    5ee4:	4640      	mov	r0, r8
    5ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5eea:	bf00      	nop
    5eec:	20023240 	.word	0x20023240

00005ef0 <z_impl_k_sleep>:

	return 0;
}

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    5ef0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5ef2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    5ef6:	bf08      	it	eq
    5ef8:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    5efc:	d01a      	beq.n	5f34 <z_impl_k_sleep+0x44>
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
    5efe:	f003 fe2a 	bl	9b56 <z_tick_sleep>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
    5f02:	4604      	mov	r4, r0
    5f04:	17c5      	asrs	r5, r0, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    5f06:	0169      	lsls	r1, r5, #5
    5f08:	0143      	lsls	r3, r0, #5
    5f0a:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    5f0e:	1a18      	subs	r0, r3, r0
    5f10:	eb62 0305 	sbc.w	r3, r2, r5
    5f14:	009a      	lsls	r2, r3, #2
    5f16:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    5f1a:	0081      	lsls	r1, r0, #2
    5f1c:	4613      	mov	r3, r2
    5f1e:	1908      	adds	r0, r1, r4
    5f20:	eb45 0303 	adc.w	r3, r5, r3
    5f24:	00da      	lsls	r2, r3, #3
    5f26:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    5f2a:	00c1      	lsls	r1, r0, #3
    5f2c:	0bc8      	lsrs	r0, r1, #15
    5f2e:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    5f32:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    5f34:	4b03      	ldr	r3, [pc, #12]	; (5f44 <z_impl_k_sleep+0x54>)
    5f36:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5f38:	f7ff fe8c 	bl	5c54 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    5f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5f40:	e7f7      	b.n	5f32 <z_impl_k_sleep+0x42>
    5f42:	bf00      	nop
    5f44:	20023240 	.word	0x20023240

00005f48 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5f48:	4b01      	ldr	r3, [pc, #4]	; (5f50 <z_impl_k_current_get+0x8>)
    5f4a:	6898      	ldr	r0, [r3, #8]
    5f4c:	4770      	bx	lr
    5f4e:	bf00      	nop
    5f50:	20023240 	.word	0x20023240

00005f54 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5f54:	b538      	push	{r3, r4, r5, lr}
    5f56:	4604      	mov	r4, r0
	__asm__ volatile(
    5f58:	f04f 0320 	mov.w	r3, #32
    5f5c:	f3ef 8511 	mrs	r5, BASEPRI
    5f60:	f383 8811 	msr	BASEPRI, r3
    5f64:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    5f68:	f003 fea7 	bl	9cba <z_unpend_first_thread>

	if (thread != NULL) {
    5f6c:	b140      	cbz	r0, 5f80 <z_impl_k_sem_give+0x2c>
    5f6e:	2200      	movs	r2, #0
    5f70:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5f72:	f003 fe12 	bl	9b9a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5f76:	4629      	mov	r1, r5
    5f78:	4806      	ldr	r0, [pc, #24]	; (5f94 <z_impl_k_sem_give+0x40>)
    5f7a:	f7ff fdcf 	bl	5b1c <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    5f7e:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5f80:	68a3      	ldr	r3, [r4, #8]
    5f82:	68e2      	ldr	r2, [r4, #12]
    5f84:	4293      	cmp	r3, r2
    5f86:	d003      	beq.n	5f90 <z_impl_k_sem_give+0x3c>
    5f88:	2201      	movs	r2, #1
    5f8a:	4413      	add	r3, r2
    5f8c:	60a3      	str	r3, [r4, #8]
}
    5f8e:	e7f2      	b.n	5f76 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5f90:	2200      	movs	r2, #0
    5f92:	e7fa      	b.n	5f8a <z_impl_k_sem_give+0x36>
    5f94:	2002326c 	.word	0x2002326c

00005f98 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
    5f98:	b508      	push	{r3, lr}
    5f9a:	f04f 0320 	mov.w	r3, #32
    5f9e:	f3ef 8411 	mrs	r4, BASEPRI
    5fa2:	f383 8811 	msr	BASEPRI, r3
    5fa6:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    5faa:	4b04      	ldr	r3, [pc, #16]	; (5fbc <z_self_abort+0x24>)
    5fac:	6898      	ldr	r0, [r3, #8]
    5fae:	6118      	str	r0, [r3, #16]
    5fb0:	f7ff fe50 	bl	5c54 <z_impl_k_thread_suspend>
    5fb4:	4620      	mov	r0, r4
    5fb6:	f7fd f8e1 	bl	317c <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
    5fba:	bf00      	nop
    5fbc:	20023240 	.word	0x20023240

00005fc0 <first>:
	return list->head == list;
    5fc0:	4b03      	ldr	r3, [pc, #12]	; (5fd0 <first+0x10>)
    5fc2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fc4:	4298      	cmp	r0, r3
    5fc6:	d000      	beq.n	5fca <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    5fc8:	4770      	bx	lr
    5fca:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    5fcc:	e7fc      	b.n	5fc8 <first+0x8>
    5fce:	bf00      	nop
    5fd0:	2002005c 	.word	0x2002005c

00005fd4 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5fd4:	b130      	cbz	r0, 5fe4 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    5fd6:	4a04      	ldr	r2, [pc, #16]	; (5fe8 <next+0x14>)
    5fd8:	6852      	ldr	r2, [r2, #4]
    5fda:	4290      	cmp	r0, r2
    5fdc:	d001      	beq.n	5fe2 <next+0xe>
    5fde:	6800      	ldr	r0, [r0, #0]
    5fe0:	4770      	bx	lr
    5fe2:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    5fe4:	4770      	bx	lr
    5fe6:	bf00      	nop
    5fe8:	2002005c 	.word	0x2002005c

00005fec <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    5fec:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    5fee:	4b04      	ldr	r3, [pc, #16]	; (6000 <elapsed+0x14>)
    5ff0:	681b      	ldr	r3, [r3, #0]
    5ff2:	b10b      	cbz	r3, 5ff8 <elapsed+0xc>
    5ff4:	2000      	movs	r0, #0
}
    5ff6:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    5ff8:	f7fc ff1c 	bl	2e34 <z_clock_elapsed>
    5ffc:	e7fb      	b.n	5ff6 <elapsed+0xa>
    5ffe:	bf00      	nop
    6000:	2002326c 	.word	0x2002326c

00006004 <z_add_timeout>:
	return ret;
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    6004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6008:	4680      	mov	r8, r0
    600a:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    600c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6010:	bf08      	it	eq
    6012:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    6016:	d07e      	beq.n	6116 <z_add_timeout+0x112>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    6018:	1c54      	adds	r4, r2, #1
    601a:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    601e:	f06f 0301 	mvn.w	r3, #1
    6022:	1b1e      	subs	r6, r3, r4
    6024:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    6028:	eb6a 0705 	sbc.w	r7, sl, r5
    602c:	2e00      	cmp	r6, #0
    602e:	f177 0300 	sbcs.w	r3, r7, #0
    6032:	da11      	bge.n	6058 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    6034:	f8c8 9008 	str.w	r9, [r8, #8]
	ticks = MAX(1, ticks);
    6038:	4626      	mov	r6, r4
    603a:	462f      	mov	r7, r5
    603c:	2c01      	cmp	r4, #1
    603e:	f175 0300 	sbcs.w	r3, r5, #0
    6042:	db1b      	blt.n	607c <z_add_timeout+0x78>

	LOCKED(&timeout_lock) {
    6044:	2300      	movs	r3, #0
    6046:	f04f 0220 	mov.w	r2, #32
    604a:	f3ef 8911 	mrs	r9, BASEPRI
    604e:	f382 8811 	msr	BASEPRI, r2
    6052:	f3bf 8f6f 	isb	sy
    6056:	e02e      	b.n	60b6 <z_add_timeout+0xb2>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    6058:	f7ff ffc8 	bl	5fec <elapsed>
    605c:	4b2f      	ldr	r3, [pc, #188]	; (611c <z_add_timeout+0x118>)
    605e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6062:	1812      	adds	r2, r2, r0
    6064:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    6068:	4619      	mov	r1, r3
    606a:	18a2      	adds	r2, r4, r2
    606c:	eb45 0101 	adc.w	r1, r5, r1
    6070:	f06f 0301 	mvn.w	r3, #1
    6074:	1a9c      	subs	r4, r3, r2
    6076:	eb6a 0501 	sbc.w	r5, sl, r1
    607a:	e7db      	b.n	6034 <z_add_timeout+0x30>
	ticks = MAX(1, ticks);
    607c:	2601      	movs	r6, #1
    607e:	2700      	movs	r7, #0
    6080:	e7e0      	b.n	6044 <z_add_timeout+0x40>
		struct _timeout *t;

		to->dticks = ticks + elapsed();
		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    6082:	ebb4 020a 	subs.w	r2, r4, sl
    6086:	eb65 030b 	sbc.w	r3, r5, fp
    608a:	6102      	str	r2, [r0, #16]
    608c:	6143      	str	r3, [r0, #20]
	node->prev = successor->prev;
    608e:	6843      	ldr	r3, [r0, #4]
    6090:	f8c8 3004 	str.w	r3, [r8, #4]
	node->next = successor;
    6094:	f8c8 0000 	str.w	r0, [r8]
	successor->prev->next = node;
    6098:	6843      	ldr	r3, [r0, #4]
    609a:	f8c3 8000 	str.w	r8, [r3]
	successor->prev = node;
    609e:	f8c0 8004 	str.w	r8, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    60a2:	b338      	cbz	r0, 60f4 <z_add_timeout+0xf0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    60a4:	f7ff ff8c 	bl	5fc0 <first>
    60a8:	4580      	cmp	r8, r0
    60aa:	d02e      	beq.n	610a <z_add_timeout+0x106>
	__asm__ volatile(
    60ac:	f389 8811 	msr	BASEPRI, r9
    60b0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    60b4:	2301      	movs	r3, #1
    60b6:	bb73      	cbnz	r3, 6116 <z_add_timeout+0x112>
		to->dticks = ticks + elapsed();
    60b8:	f7ff ff98 	bl	5fec <elapsed>
    60bc:	1832      	adds	r2, r6, r0
    60be:	eb47 73e0 	adc.w	r3, r7, r0, asr #31
    60c2:	e9c8 2304 	strd	r2, r3, [r8, #16]
		for (t = first(); t != NULL; t = next(t)) {
    60c6:	f7ff ff7b 	bl	5fc0 <first>
    60ca:	2800      	cmp	r0, #0
    60cc:	d0e9      	beq.n	60a2 <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
    60ce:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    60d2:	e9d8 ab04 	ldrd	sl, fp, [r8, #16]
    60d6:	45a2      	cmp	sl, r4
    60d8:	eb7b 0305 	sbcs.w	r3, fp, r5
    60dc:	dbd1      	blt.n	6082 <z_add_timeout+0x7e>
			to->dticks -= t->dticks;
    60de:	ebba 0204 	subs.w	r2, sl, r4
    60e2:	eb6b 0305 	sbc.w	r3, fp, r5
    60e6:	f8c8 2010 	str.w	r2, [r8, #16]
    60ea:	f8c8 3014 	str.w	r3, [r8, #20]
		for (t = first(); t != NULL; t = next(t)) {
    60ee:	f7ff ff71 	bl	5fd4 <next>
    60f2:	e7ea      	b.n	60ca <z_add_timeout+0xc6>
	node->next = list;
    60f4:	4b0a      	ldr	r3, [pc, #40]	; (6120 <z_add_timeout+0x11c>)
    60f6:	f8c8 3000 	str.w	r3, [r8]
	node->prev = list->tail;
    60fa:	685a      	ldr	r2, [r3, #4]
    60fc:	f8c8 2004 	str.w	r2, [r8, #4]
	list->tail->next = node;
    6100:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    6104:	f8c3 8004 	str.w	r8, [r3, #4]
}
    6108:	e7cc      	b.n	60a4 <z_add_timeout+0xa0>
			z_clock_set_timeout(next_timeout(), false);
    610a:	f003 fe35 	bl	9d78 <next_timeout>
    610e:	2100      	movs	r1, #0
    6110:	f7fc fe64 	bl	2ddc <z_clock_set_timeout>
    6114:	e7ca      	b.n	60ac <z_add_timeout+0xa8>
		}
	}
}
    6116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    611a:	bf00      	nop
    611c:	20020220 	.word	0x20020220
    6120:	2002005c 	.word	0x2002005c

00006124 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    6124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    6126:	f04f 0320 	mov.w	r3, #32
    612a:	f3ef 8511 	mrs	r5, BASEPRI
    612e:	f383 8811 	msr	BASEPRI, r3
    6132:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    6136:	4b28      	ldr	r3, [pc, #160]	; (61d8 <z_clock_announce+0xb4>)
    6138:	6018      	str	r0, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    613a:	f7ff ff41 	bl	5fc0 <first>
    613e:	4604      	mov	r4, r0
    6140:	b350      	cbz	r0, 6198 <z_clock_announce+0x74>
    6142:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    6146:	4b24      	ldr	r3, [pc, #144]	; (61d8 <z_clock_announce+0xb4>)
    6148:	681b      	ldr	r3, [r3, #0]
    614a:	17d9      	asrs	r1, r3, #31
    614c:	42b3      	cmp	r3, r6
    614e:	eb71 0207 	sbcs.w	r2, r1, r7
    6152:	db21      	blt.n	6198 <z_clock_announce+0x74>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    6154:	4a21      	ldr	r2, [pc, #132]	; (61dc <z_clock_announce+0xb8>)
    6156:	e9d2 0100 	ldrd	r0, r1, [r2]
    615a:	1980      	adds	r0, r0, r6
    615c:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    6160:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    6164:	1b9b      	subs	r3, r3, r6
    6166:	4a1c      	ldr	r2, [pc, #112]	; (61d8 <z_clock_announce+0xb4>)
    6168:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    616a:	2200      	movs	r2, #0
    616c:	2300      	movs	r3, #0
    616e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    6172:	4620      	mov	r0, r4
    6174:	f003 fde8 	bl	9d48 <remove_timeout>
	__asm__ volatile(
    6178:	f385 8811 	msr	BASEPRI, r5
    617c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    6180:	68a3      	ldr	r3, [r4, #8]
    6182:	4620      	mov	r0, r4
    6184:	4798      	blx	r3
	__asm__ volatile(
    6186:	f04f 0320 	mov.w	r3, #32
    618a:	f3ef 8511 	mrs	r5, BASEPRI
    618e:	f383 8811 	msr	BASEPRI, r3
    6192:	f3bf 8f6f 	isb	sy
    6196:	e7d0      	b.n	613a <z_clock_announce+0x16>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    6198:	b144      	cbz	r4, 61ac <z_clock_announce+0x88>
		first()->dticks -= announce_remaining;
    619a:	4b0f      	ldr	r3, [pc, #60]	; (61d8 <z_clock_announce+0xb4>)
    619c:	6819      	ldr	r1, [r3, #0]
    619e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    61a2:	1a52      	subs	r2, r2, r1
    61a4:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    61a8:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    61ac:	480b      	ldr	r0, [pc, #44]	; (61dc <z_clock_announce+0xb8>)
    61ae:	490a      	ldr	r1, [pc, #40]	; (61d8 <z_clock_announce+0xb4>)
    61b0:	680c      	ldr	r4, [r1, #0]
    61b2:	e9d0 2300 	ldrd	r2, r3, [r0]
    61b6:	1912      	adds	r2, r2, r4
    61b8:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    61bc:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    61c0:	2400      	movs	r4, #0
    61c2:	600c      	str	r4, [r1, #0]

	z_clock_set_timeout(next_timeout(), false);
    61c4:	f003 fdd8 	bl	9d78 <next_timeout>
    61c8:	4621      	mov	r1, r4
    61ca:	f7fc fe07 	bl	2ddc <z_clock_set_timeout>
	__asm__ volatile(
    61ce:	f385 8811 	msr	BASEPRI, r5
    61d2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    61d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61d8:	2002326c 	.word	0x2002326c
    61dc:	20020220 	.word	0x20020220

000061e0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    61e0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    61e2:	4c06      	ldr	r4, [pc, #24]	; (61fc <statics_init+0x1c>)
    61e4:	4b06      	ldr	r3, [pc, #24]	; (6200 <statics_init+0x20>)
    61e6:	429c      	cmp	r4, r3
    61e8:	d206      	bcs.n	61f8 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    61ea:	68a2      	ldr	r2, [r4, #8]
    61ec:	6861      	ldr	r1, [r4, #4]
    61ee:	4620      	mov	r0, r4
    61f0:	f003 fdfe 	bl	9df0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    61f4:	3414      	adds	r4, #20
    61f6:	e7f5      	b.n	61e4 <statics_init+0x4>
	}
	return 0;
}
    61f8:	2000      	movs	r0, #0
    61fa:	bd10      	pop	{r4, pc}
    61fc:	20020128 	.word	0x20020128
    6200:	20020128 	.word	0x20020128

00006204 <nrf_cc3xx_platform_init_no_rng>:
    6204:	b510      	push	{r4, lr}
    6206:	4c0a      	ldr	r4, [pc, #40]	; (6230 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6208:	6823      	ldr	r3, [r4, #0]
    620a:	b11b      	cbz	r3, 6214 <nrf_cc3xx_platform_init_no_rng+0x10>
    620c:	2301      	movs	r3, #1
    620e:	2000      	movs	r0, #0
    6210:	6023      	str	r3, [r4, #0]
    6212:	bd10      	pop	{r4, pc}
    6214:	f000 f898 	bl	6348 <CC_LibInitNoRng>
    6218:	2800      	cmp	r0, #0
    621a:	d0f7      	beq.n	620c <nrf_cc3xx_platform_init_no_rng+0x8>
    621c:	3801      	subs	r0, #1
    621e:	2806      	cmp	r0, #6
    6220:	d803      	bhi.n	622a <nrf_cc3xx_platform_init_no_rng+0x26>
    6222:	4b04      	ldr	r3, [pc, #16]	; (6234 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6224:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6228:	bd10      	pop	{r4, pc}
    622a:	4803      	ldr	r0, [pc, #12]	; (6238 <nrf_cc3xx_platform_init_no_rng+0x34>)
    622c:	bd10      	pop	{r4, pc}
    622e:	bf00      	nop
    6230:	20023270 	.word	0x20023270
    6234:	0000abd0 	.word	0x0000abd0
    6238:	ffff8ffe 	.word	0xffff8ffe

0000623c <nrf_cc3xx_platform_abort>:
    623c:	f3bf 8f4f 	dsb	sy
    6240:	4905      	ldr	r1, [pc, #20]	; (6258 <nrf_cc3xx_platform_abort+0x1c>)
    6242:	4b06      	ldr	r3, [pc, #24]	; (625c <nrf_cc3xx_platform_abort+0x20>)
    6244:	68ca      	ldr	r2, [r1, #12]
    6246:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    624a:	4313      	orrs	r3, r2
    624c:	60cb      	str	r3, [r1, #12]
    624e:	f3bf 8f4f 	dsb	sy
    6252:	bf00      	nop
    6254:	e7fd      	b.n	6252 <nrf_cc3xx_platform_abort+0x16>
    6256:	bf00      	nop
    6258:	e000ed00 	.word	0xe000ed00
    625c:	05fa0004 	.word	0x05fa0004

00006260 <CC_PalAbort>:
    6260:	4b01      	ldr	r3, [pc, #4]	; (6268 <CC_PalAbort+0x8>)
    6262:	685b      	ldr	r3, [r3, #4]
    6264:	4718      	bx	r3
    6266:	bf00      	nop
    6268:	20020064 	.word	0x20020064

0000626c <nrf_cc3xx_platform_set_abort>:
    626c:	4b02      	ldr	r3, [pc, #8]	; (6278 <nrf_cc3xx_platform_set_abort+0xc>)
    626e:	e9d0 1200 	ldrd	r1, r2, [r0]
    6272:	e9c3 1200 	strd	r1, r2, [r3]
    6276:	4770      	bx	lr
    6278:	20020064 	.word	0x20020064

0000627c <mutex_unlock>:
    627c:	b148      	cbz	r0, 6292 <mutex_unlock+0x16>
    627e:	6843      	ldr	r3, [r0, #4]
    6280:	b12b      	cbz	r3, 628e <mutex_unlock+0x12>
    6282:	f3bf 8f5f 	dmb	sy
    6286:	2300      	movs	r3, #0
    6288:	6003      	str	r3, [r0, #0]
    628a:	4618      	mov	r0, r3
    628c:	4770      	bx	lr
    628e:	4802      	ldr	r0, [pc, #8]	; (6298 <mutex_unlock+0x1c>)
    6290:	4770      	bx	lr
    6292:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6296:	4770      	bx	lr
    6298:	ffff8fea 	.word	0xffff8fea

0000629c <mutex_free>:
    629c:	b510      	push	{r4, lr}
    629e:	4604      	mov	r4, r0
    62a0:	b128      	cbz	r0, 62ae <mutex_free+0x12>
    62a2:	6863      	ldr	r3, [r4, #4]
    62a4:	b113      	cbz	r3, 62ac <mutex_free+0x10>
    62a6:	2300      	movs	r3, #0
    62a8:	6023      	str	r3, [r4, #0]
    62aa:	6063      	str	r3, [r4, #4]
    62ac:	bd10      	pop	{r4, pc}
    62ae:	4b02      	ldr	r3, [pc, #8]	; (62b8 <mutex_free+0x1c>)
    62b0:	4802      	ldr	r0, [pc, #8]	; (62bc <mutex_free+0x20>)
    62b2:	685b      	ldr	r3, [r3, #4]
    62b4:	4798      	blx	r3
    62b6:	e7f4      	b.n	62a2 <mutex_free+0x6>
    62b8:	20020064 	.word	0x20020064
    62bc:	0000abec 	.word	0x0000abec

000062c0 <mutex_init>:
    62c0:	b510      	push	{r4, lr}
    62c2:	4604      	mov	r4, r0
    62c4:	b130      	cbz	r0, 62d4 <mutex_init+0x14>
    62c6:	2200      	movs	r2, #0
    62c8:	6863      	ldr	r3, [r4, #4]
    62ca:	6022      	str	r2, [r4, #0]
    62cc:	f043 0301 	orr.w	r3, r3, #1
    62d0:	6063      	str	r3, [r4, #4]
    62d2:	bd10      	pop	{r4, pc}
    62d4:	4801      	ldr	r0, [pc, #4]	; (62dc <mutex_init+0x1c>)
    62d6:	f7ff ffc3 	bl	6260 <CC_PalAbort>
    62da:	e7f4      	b.n	62c6 <mutex_init+0x6>
    62dc:	0000ac14 	.word	0x0000ac14

000062e0 <mutex_lock>:
    62e0:	b180      	cbz	r0, 6304 <mutex_lock+0x24>
    62e2:	6843      	ldr	r3, [r0, #4]
    62e4:	b163      	cbz	r3, 6300 <mutex_lock+0x20>
    62e6:	2201      	movs	r2, #1
    62e8:	e8d0 3fef 	ldaex	r3, [r0]
    62ec:	e8c0 2fe1 	stlex	r1, r2, [r0]
    62f0:	2900      	cmp	r1, #0
    62f2:	d1f9      	bne.n	62e8 <mutex_lock+0x8>
    62f4:	2b01      	cmp	r3, #1
    62f6:	d0f7      	beq.n	62e8 <mutex_lock+0x8>
    62f8:	f3bf 8f5f 	dmb	sy
    62fc:	2000      	movs	r0, #0
    62fe:	4770      	bx	lr
    6300:	4802      	ldr	r0, [pc, #8]	; (630c <mutex_lock+0x2c>)
    6302:	4770      	bx	lr
    6304:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6308:	4770      	bx	lr
    630a:	bf00      	nop
    630c:	ffff8fea 	.word	0xffff8fea

00006310 <nrf_cc3xx_platform_set_mutexes>:
    6310:	b470      	push	{r4, r5, r6}
    6312:	4b0b      	ldr	r3, [pc, #44]	; (6340 <nrf_cc3xx_platform_set_mutexes+0x30>)
    6314:	6806      	ldr	r6, [r0, #0]
    6316:	68c2      	ldr	r2, [r0, #12]
    6318:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    631c:	e9c3 4202 	strd	r4, r2, [r3, #8]
    6320:	e9c3 6500 	strd	r6, r5, [r3]
    6324:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    6328:	680e      	ldr	r6, [r1, #0]
    632a:	4b06      	ldr	r3, [pc, #24]	; (6344 <nrf_cc3xx_platform_set_mutexes+0x34>)
    632c:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    6330:	e9c3 6500 	strd	r6, r5, [r3]
    6334:	e9c3 4002 	strd	r4, r0, [r3, #8]
    6338:	611a      	str	r2, [r3, #16]
    633a:	bc70      	pop	{r4, r5, r6}
    633c:	4770      	bx	lr
    633e:	bf00      	nop
    6340:	20020074 	.word	0x20020074
    6344:	20020084 	.word	0x20020084

00006348 <CC_LibInitNoRng>:
    6348:	b510      	push	{r4, lr}
    634a:	f000 f833 	bl	63b4 <CC_HalInit>
    634e:	b120      	cbz	r0, 635a <CC_LibInitNoRng+0x12>
    6350:	2403      	movs	r4, #3
    6352:	f000 f867 	bl	6424 <CC_PalTerminate>
    6356:	4620      	mov	r0, r4
    6358:	bd10      	pop	{r4, pc}
    635a:	f000 f835 	bl	63c8 <CC_PalInit>
    635e:	b990      	cbnz	r0, 6386 <CC_LibInitNoRng+0x3e>
    6360:	f000 f8b0 	bl	64c4 <CC_PalPowerSaveModeSelect>
    6364:	b990      	cbnz	r0, 638c <CC_LibInitNoRng+0x44>
    6366:	4b0f      	ldr	r3, [pc, #60]	; (63a4 <CC_LibInitNoRng+0x5c>)
    6368:	681b      	ldr	r3, [r3, #0]
    636a:	0e1b      	lsrs	r3, r3, #24
    636c:	2bf0      	cmp	r3, #240	; 0xf0
    636e:	d108      	bne.n	6382 <CC_LibInitNoRng+0x3a>
    6370:	4a0d      	ldr	r2, [pc, #52]	; (63a8 <CC_LibInitNoRng+0x60>)
    6372:	4b0e      	ldr	r3, [pc, #56]	; (63ac <CC_LibInitNoRng+0x64>)
    6374:	6812      	ldr	r2, [r2, #0]
    6376:	429a      	cmp	r2, r3
    6378:	d00a      	beq.n	6390 <CC_LibInitNoRng+0x48>
    637a:	2407      	movs	r4, #7
    637c:	f000 f81c 	bl	63b8 <CC_HalTerminate>
    6380:	e7e7      	b.n	6352 <CC_LibInitNoRng+0xa>
    6382:	2406      	movs	r4, #6
    6384:	e7fa      	b.n	637c <CC_LibInitNoRng+0x34>
    6386:	2404      	movs	r4, #4
    6388:	4620      	mov	r0, r4
    638a:	bd10      	pop	{r4, pc}
    638c:	2400      	movs	r4, #0
    638e:	e7f5      	b.n	637c <CC_LibInitNoRng+0x34>
    6390:	2001      	movs	r0, #1
    6392:	f000 f897 	bl	64c4 <CC_PalPowerSaveModeSelect>
    6396:	4604      	mov	r4, r0
    6398:	2800      	cmp	r0, #0
    639a:	d1f7      	bne.n	638c <CC_LibInitNoRng+0x44>
    639c:	4b04      	ldr	r3, [pc, #16]	; (63b0 <CC_LibInitNoRng+0x68>)
    639e:	6018      	str	r0, [r3, #0]
    63a0:	e7d9      	b.n	6356 <CC_LibInitNoRng+0xe>
    63a2:	bf00      	nop
    63a4:	50841928 	.word	0x50841928
    63a8:	50841a24 	.word	0x50841a24
    63ac:	20e00000 	.word	0x20e00000
    63b0:	50841a0c 	.word	0x50841a0c

000063b4 <CC_HalInit>:
    63b4:	2000      	movs	r0, #0
    63b6:	4770      	bx	lr

000063b8 <CC_HalTerminate>:
    63b8:	2000      	movs	r0, #0
    63ba:	4770      	bx	lr

000063bc <CC_HalMaskInterrupt>:
    63bc:	4b01      	ldr	r3, [pc, #4]	; (63c4 <CC_HalMaskInterrupt+0x8>)
    63be:	6018      	str	r0, [r3, #0]
    63c0:	4770      	bx	lr
    63c2:	bf00      	nop
    63c4:	50841a04 	.word	0x50841a04

000063c8 <CC_PalInit>:
    63c8:	b510      	push	{r4, lr}
    63ca:	4811      	ldr	r0, [pc, #68]	; (6410 <CC_PalInit+0x48>)
    63cc:	f000 f848 	bl	6460 <CC_PalMutexCreate>
    63d0:	b100      	cbz	r0, 63d4 <CC_PalInit+0xc>
    63d2:	bd10      	pop	{r4, pc}
    63d4:	480f      	ldr	r0, [pc, #60]	; (6414 <CC_PalInit+0x4c>)
    63d6:	f000 f843 	bl	6460 <CC_PalMutexCreate>
    63da:	2800      	cmp	r0, #0
    63dc:	d1f9      	bne.n	63d2 <CC_PalInit+0xa>
    63de:	4c0e      	ldr	r4, [pc, #56]	; (6418 <CC_PalInit+0x50>)
    63e0:	4620      	mov	r0, r4
    63e2:	f000 f83d 	bl	6460 <CC_PalMutexCreate>
    63e6:	2800      	cmp	r0, #0
    63e8:	d1f3      	bne.n	63d2 <CC_PalInit+0xa>
    63ea:	4b0c      	ldr	r3, [pc, #48]	; (641c <CC_PalInit+0x54>)
    63ec:	480c      	ldr	r0, [pc, #48]	; (6420 <CC_PalInit+0x58>)
    63ee:	601c      	str	r4, [r3, #0]
    63f0:	f000 f836 	bl	6460 <CC_PalMutexCreate>
    63f4:	4601      	mov	r1, r0
    63f6:	2800      	cmp	r0, #0
    63f8:	d1eb      	bne.n	63d2 <CC_PalInit+0xa>
    63fa:	f000 f82d 	bl	6458 <CC_PalDmaInit>
    63fe:	4604      	mov	r4, r0
    6400:	b108      	cbz	r0, 6406 <CC_PalInit+0x3e>
    6402:	4620      	mov	r0, r4
    6404:	bd10      	pop	{r4, pc}
    6406:	f000 f83f 	bl	6488 <CC_PalPowerSaveModeInit>
    640a:	4620      	mov	r0, r4
    640c:	e7fa      	b.n	6404 <CC_PalInit+0x3c>
    640e:	bf00      	nop
    6410:	200200bc 	.word	0x200200bc
    6414:	200200b0 	.word	0x200200b0
    6418:	200200b8 	.word	0x200200b8
    641c:	200200c0 	.word	0x200200c0
    6420:	200200b4 	.word	0x200200b4

00006424 <CC_PalTerminate>:
    6424:	b508      	push	{r3, lr}
    6426:	4808      	ldr	r0, [pc, #32]	; (6448 <CC_PalTerminate+0x24>)
    6428:	f000 f824 	bl	6474 <CC_PalMutexDestroy>
    642c:	4807      	ldr	r0, [pc, #28]	; (644c <CC_PalTerminate+0x28>)
    642e:	f000 f821 	bl	6474 <CC_PalMutexDestroy>
    6432:	4807      	ldr	r0, [pc, #28]	; (6450 <CC_PalTerminate+0x2c>)
    6434:	f000 f81e 	bl	6474 <CC_PalMutexDestroy>
    6438:	4806      	ldr	r0, [pc, #24]	; (6454 <CC_PalTerminate+0x30>)
    643a:	f000 f81b 	bl	6474 <CC_PalMutexDestroy>
    643e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6442:	f000 b80b 	b.w	645c <CC_PalDmaTerminate>
    6446:	bf00      	nop
    6448:	200200bc 	.word	0x200200bc
    644c:	200200b0 	.word	0x200200b0
    6450:	200200b8 	.word	0x200200b8
    6454:	200200b4 	.word	0x200200b4

00006458 <CC_PalDmaInit>:
    6458:	2000      	movs	r0, #0
    645a:	4770      	bx	lr

0000645c <CC_PalDmaTerminate>:
    645c:	4770      	bx	lr
    645e:	bf00      	nop

00006460 <CC_PalMutexCreate>:
    6460:	b508      	push	{r3, lr}
    6462:	4b03      	ldr	r3, [pc, #12]	; (6470 <CC_PalMutexCreate+0x10>)
    6464:	6802      	ldr	r2, [r0, #0]
    6466:	681b      	ldr	r3, [r3, #0]
    6468:	6810      	ldr	r0, [r2, #0]
    646a:	4798      	blx	r3
    646c:	2000      	movs	r0, #0
    646e:	bd08      	pop	{r3, pc}
    6470:	20020074 	.word	0x20020074

00006474 <CC_PalMutexDestroy>:
    6474:	b508      	push	{r3, lr}
    6476:	4b03      	ldr	r3, [pc, #12]	; (6484 <CC_PalMutexDestroy+0x10>)
    6478:	6802      	ldr	r2, [r0, #0]
    647a:	685b      	ldr	r3, [r3, #4]
    647c:	6810      	ldr	r0, [r2, #0]
    647e:	4798      	blx	r3
    6480:	2000      	movs	r0, #0
    6482:	bd08      	pop	{r3, pc}
    6484:	20020074 	.word	0x20020074

00006488 <CC_PalPowerSaveModeInit>:
    6488:	b570      	push	{r4, r5, r6, lr}
    648a:	4c09      	ldr	r4, [pc, #36]	; (64b0 <CC_PalPowerSaveModeInit+0x28>)
    648c:	4d09      	ldr	r5, [pc, #36]	; (64b4 <CC_PalPowerSaveModeInit+0x2c>)
    648e:	6920      	ldr	r0, [r4, #16]
    6490:	68ab      	ldr	r3, [r5, #8]
    6492:	4798      	blx	r3
    6494:	b118      	cbz	r0, 649e <CC_PalPowerSaveModeInit+0x16>
    6496:	4b08      	ldr	r3, [pc, #32]	; (64b8 <CC_PalPowerSaveModeInit+0x30>)
    6498:	4808      	ldr	r0, [pc, #32]	; (64bc <CC_PalPowerSaveModeInit+0x34>)
    649a:	685b      	ldr	r3, [r3, #4]
    649c:	4798      	blx	r3
    649e:	2100      	movs	r1, #0
    64a0:	4a07      	ldr	r2, [pc, #28]	; (64c0 <CC_PalPowerSaveModeInit+0x38>)
    64a2:	68eb      	ldr	r3, [r5, #12]
    64a4:	6011      	str	r1, [r2, #0]
    64a6:	6920      	ldr	r0, [r4, #16]
    64a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    64ac:	4718      	bx	r3
    64ae:	bf00      	nop
    64b0:	20020084 	.word	0x20020084
    64b4:	20020074 	.word	0x20020074
    64b8:	20020064 	.word	0x20020064
    64bc:	0000ac38 	.word	0x0000ac38
    64c0:	20023284 	.word	0x20023284

000064c4 <CC_PalPowerSaveModeSelect>:
    64c4:	b570      	push	{r4, r5, r6, lr}
    64c6:	4d1a      	ldr	r5, [pc, #104]	; (6530 <CC_PalPowerSaveModeSelect+0x6c>)
    64c8:	4e1a      	ldr	r6, [pc, #104]	; (6534 <CC_PalPowerSaveModeSelect+0x70>)
    64ca:	4604      	mov	r4, r0
    64cc:	68b2      	ldr	r2, [r6, #8]
    64ce:	6928      	ldr	r0, [r5, #16]
    64d0:	4790      	blx	r2
    64d2:	b9f0      	cbnz	r0, 6512 <CC_PalPowerSaveModeSelect+0x4e>
    64d4:	b15c      	cbz	r4, 64ee <CC_PalPowerSaveModeSelect+0x2a>
    64d6:	4c18      	ldr	r4, [pc, #96]	; (6538 <CC_PalPowerSaveModeSelect+0x74>)
    64d8:	6823      	ldr	r3, [r4, #0]
    64da:	b1ab      	cbz	r3, 6508 <CC_PalPowerSaveModeSelect+0x44>
    64dc:	2b01      	cmp	r3, #1
    64de:	d01a      	beq.n	6516 <CC_PalPowerSaveModeSelect+0x52>
    64e0:	3b01      	subs	r3, #1
    64e2:	6023      	str	r3, [r4, #0]
    64e4:	6928      	ldr	r0, [r5, #16]
    64e6:	68f3      	ldr	r3, [r6, #12]
    64e8:	4798      	blx	r3
    64ea:	2000      	movs	r0, #0
    64ec:	bd70      	pop	{r4, r5, r6, pc}
    64ee:	4c12      	ldr	r4, [pc, #72]	; (6538 <CC_PalPowerSaveModeSelect+0x74>)
    64f0:	6821      	ldr	r1, [r4, #0]
    64f2:	b939      	cbnz	r1, 6504 <CC_PalPowerSaveModeSelect+0x40>
    64f4:	2001      	movs	r0, #1
    64f6:	4b11      	ldr	r3, [pc, #68]	; (653c <CC_PalPowerSaveModeSelect+0x78>)
    64f8:	4a11      	ldr	r2, [pc, #68]	; (6540 <CC_PalPowerSaveModeSelect+0x7c>)
    64fa:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    64fe:	6813      	ldr	r3, [r2, #0]
    6500:	2b00      	cmp	r3, #0
    6502:	d1fc      	bne.n	64fe <CC_PalPowerSaveModeSelect+0x3a>
    6504:	3101      	adds	r1, #1
    6506:	6021      	str	r1, [r4, #0]
    6508:	68f3      	ldr	r3, [r6, #12]
    650a:	6928      	ldr	r0, [r5, #16]
    650c:	4798      	blx	r3
    650e:	2000      	movs	r0, #0
    6510:	bd70      	pop	{r4, r5, r6, pc}
    6512:	480c      	ldr	r0, [pc, #48]	; (6544 <CC_PalPowerSaveModeSelect+0x80>)
    6514:	bd70      	pop	{r4, r5, r6, pc}
    6516:	4a0a      	ldr	r2, [pc, #40]	; (6540 <CC_PalPowerSaveModeSelect+0x7c>)
    6518:	6813      	ldr	r3, [r2, #0]
    651a:	2b00      	cmp	r3, #0
    651c:	d1fc      	bne.n	6518 <CC_PalPowerSaveModeSelect+0x54>
    651e:	4a07      	ldr	r2, [pc, #28]	; (653c <CC_PalPowerSaveModeSelect+0x78>)
    6520:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6524:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6528:	f7ff ff48 	bl	63bc <CC_HalMaskInterrupt>
    652c:	6823      	ldr	r3, [r4, #0]
    652e:	e7d7      	b.n	64e0 <CC_PalPowerSaveModeSelect+0x1c>
    6530:	20020084 	.word	0x20020084
    6534:	20020074 	.word	0x20020074
    6538:	20023284 	.word	0x20023284
    653c:	50840000 	.word	0x50840000
    6540:	50841910 	.word	0x50841910
    6544:	ffff8fe9 	.word	0xffff8fe9

00006548 <do_boot>:
{
    6548:	b570      	push	{r4, r5, r6, lr}
    654a:	b082      	sub	sp, #8
    654c:	4604      	mov	r4, r0
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
    654e:	a901      	add	r1, sp, #4
    6550:	7900      	ldrb	r0, [r0, #4]
    6552:	f7fa f831 	bl	5b8 <flash_device_base>
                                     rsp->br_image_off +
    6556:	68a5      	ldr	r5, [r4, #8]
    vt = (struct arm_vector_table *)(flash_base +
    6558:	9b01      	ldr	r3, [sp, #4]
    655a:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
    655c:	6823      	ldr	r3, [r4, #0]
    655e:	891c      	ldrh	r4, [r3, #8]
                                     rsp->br_image_off +
    6560:	192e      	adds	r6, r5, r4
	__asm__ volatile(
    6562:	f04f 0220 	mov.w	r2, #32
    6566:	f3ef 8311 	mrs	r3, BASEPRI
    656a:	f382 8811 	msr	BASEPRI, r2
    656e:	f3bf 8f6f 	isb	sy
    sys_clock_disable();
    6572:	f001 faa9 	bl	7ac8 <sys_clock_disable>
    nrf_cleanup_peripheral();
    6576:	f7fb f943 	bl	1800 <nrf_cleanup_peripheral>
    __set_MSP(vt->msp);
    657a:	592b      	ldr	r3, [r5, r4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    657c:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
    6580:	6873      	ldr	r3, [r6, #4]
    6582:	4798      	blx	r3
}
    6584:	b002      	add	sp, #8
    6586:	bd70      	pop	{r4, r5, r6, pc}

00006588 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    6588:	b119      	cbz	r1, 6592 <flash_area_id_from_multi_image_slot+0xa>
    658a:	2901      	cmp	r1, #1
    658c:	d103      	bne.n	6596 <flash_area_id_from_multi_image_slot+0xe>
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
#if !defined(CONFIG_SINGLE_APPLICATION_SLOT)
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    658e:	2007      	movs	r0, #7
    6590:	4770      	bx	lr
    switch (slot) {
    6592:	2003      	movs	r0, #3
    6594:	4770      	bx	lr
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
    6596:	f06f 0015 	mvn.w	r0, #21
}
    659a:	4770      	bx	lr

0000659c <bootutil_img_hash>:
{
    659c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    65a0:	b09d      	sub	sp, #116	; 0x74
    65a2:	4615      	mov	r5, r2
    65a4:	4699      	mov	r9, r3
    65a6:	9f24      	ldr	r7, [sp, #144]	; 0x90
    65a8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    65ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    mbedtls_sha256_init(ctx);
    65ae:	a801      	add	r0, sp, #4
    65b0:	f003 f97c 	bl	98ac <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    65b4:	2100      	movs	r1, #0
    65b6:	a801      	add	r0, sp, #4
    65b8:	f7fe fc60 	bl	4e7c <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
    65bc:	b114      	cbz	r4, 65c4 <bootutil_img_hash+0x28>
    65be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    65c0:	2b00      	cmp	r3, #0
    65c2:	dc06      	bgt.n	65d2 <bootutil_img_hash+0x36>
    size = hdr_size = hdr->ih_hdr_size;
    65c4:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    65c6:	68ee      	ldr	r6, [r5, #12]
    65c8:	4433      	add	r3, r6
    size += hdr->ih_protect_tlv_size;
    65ca:	896e      	ldrh	r6, [r5, #10]
    65cc:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
    65ce:	2500      	movs	r5, #0
    65d0:	e013      	b.n	65fa <bootutil_img_hash+0x5e>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
    65d2:	461a      	mov	r2, r3
    65d4:	4621      	mov	r1, r4
    65d6:	a801      	add	r0, sp, #4
    65d8:	f003 f96e 	bl	98b8 <mbedtls_sha256_update_ret>
    65dc:	e7f2      	b.n	65c4 <bootutil_img_hash+0x28>
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    65de:	4623      	mov	r3, r4
    65e0:	463a      	mov	r2, r7
    65e2:	4629      	mov	r1, r5
    65e4:	4648      	mov	r0, r9
    65e6:	f001 f8ff 	bl	77e8 <flash_area_read>
        if (rc) {
    65ea:	4603      	mov	r3, r0
    65ec:	b988      	cbnz	r0, 6612 <bootutil_img_hash+0x76>
    65ee:	4622      	mov	r2, r4
    65f0:	4639      	mov	r1, r7
    65f2:	a801      	add	r0, sp, #4
    65f4:	f003 f960 	bl	98b8 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    65f8:	4425      	add	r5, r4
    65fa:	42b5      	cmp	r5, r6
    65fc:	d204      	bcs.n	6608 <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    65fe:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    6600:	4544      	cmp	r4, r8
    6602:	d9ec      	bls.n	65de <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    6604:	4644      	mov	r4, r8
    6606:	e7ea      	b.n	65de <bootutil_img_hash+0x42>
    return mbedtls_sha256_finish_ret(ctx, output);
    6608:	9926      	ldr	r1, [sp, #152]	; 0x98
    660a:	a801      	add	r0, sp, #4
    660c:	f003 f997 	bl	993e <mbedtls_sha256_finish_ret>
    return 0;
    6610:	2300      	movs	r3, #0
}
    6612:	4618      	mov	r0, r3
    6614:	b01d      	add	sp, #116	; 0x74
    6616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000661a <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    661a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    661e:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    6620:	2800      	cmp	r0, #0
    6622:	d04a      	beq.n	66ba <bootutil_tlv_iter_begin+0xa0>
    6624:	460c      	mov	r4, r1
    6626:	4617      	mov	r7, r2
    6628:	4699      	mov	r9, r3
    662a:	4606      	mov	r6, r0
    662c:	2900      	cmp	r1, #0
    662e:	d047      	beq.n	66c0 <bootutil_tlv_iter_begin+0xa6>
    6630:	2a00      	cmp	r2, #0
    6632:	d048      	beq.n	66c6 <bootutil_tlv_iter_begin+0xac>
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    6634:	890d      	ldrh	r5, [r1, #8]
    6636:	68cb      	ldr	r3, [r1, #12]
    6638:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    663a:	2304      	movs	r3, #4
    663c:	eb0d 0203 	add.w	r2, sp, r3
    6640:	4629      	mov	r1, r5
    6642:	4638      	mov	r0, r7
    6644:	f001 f8d0 	bl	77e8 <flash_area_read>
    6648:	4680      	mov	r8, r0
    664a:	2800      	cmp	r0, #0
    664c:	d13e      	bne.n	66cc <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    664e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6652:	f646 1308 	movw	r3, #26888	; 0x6908
    6656:	429a      	cmp	r2, r3
    6658:	d01e      	beq.n	6698 <bootutil_tlv_iter_begin+0x7e>

        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
                            &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    665a:	8963      	ldrh	r3, [r4, #10]
    665c:	2b00      	cmp	r3, #0
    665e:	d13b      	bne.n	66d8 <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    6660:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6664:	f646 1307 	movw	r3, #26887	; 0x6907
    6668:	429a      	cmp	r2, r3
    666a:	d138      	bne.n	66de <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    666c:	6034      	str	r4, [r6, #0]
    it->fap = fap;
    666e:	6077      	str	r7, [r6, #4]
    it->type = type;
    6670:	f8a6 9008 	strh.w	r9, [r6, #8]
    it->prot = prot;
    6674:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    6678:	72b3      	strb	r3, [r6, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    667a:	8963      	ldrh	r3, [r4, #10]
    667c:	442b      	add	r3, r5
    667e:	60f3      	str	r3, [r6, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    6680:	8963      	ldrh	r3, [r4, #10]
    6682:	442b      	add	r3, r5
    6684:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6688:	4413      	add	r3, r2
    668a:	6173      	str	r3, [r6, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    668c:	3504      	adds	r5, #4
    668e:	6135      	str	r5, [r6, #16]
    return 0;
}
    6690:	4640      	mov	r0, r8
    6692:	b003      	add	sp, #12
    6694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    6698:	8963      	ldrh	r3, [r4, #10]
    669a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    669e:	428b      	cmp	r3, r1
    66a0:	d117      	bne.n	66d2 <bootutil_tlv_iter_begin+0xb8>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    66a2:	2304      	movs	r3, #4
    66a4:	eb0d 0203 	add.w	r2, sp, r3
    66a8:	4429      	add	r1, r5
    66aa:	4638      	mov	r0, r7
    66ac:	f001 f89c 	bl	77e8 <flash_area_read>
    66b0:	2800      	cmp	r0, #0
    66b2:	d0d5      	beq.n	6660 <bootutil_tlv_iter_begin+0x46>
            return -1;
    66b4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    66b8:	e7ea      	b.n	6690 <bootutil_tlv_iter_begin+0x76>
        return -1;
    66ba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    66be:	e7e7      	b.n	6690 <bootutil_tlv_iter_begin+0x76>
    66c0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    66c4:	e7e4      	b.n	6690 <bootutil_tlv_iter_begin+0x76>
    66c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    66ca:	e7e1      	b.n	6690 <bootutil_tlv_iter_begin+0x76>
        return -1;
    66cc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    66d0:	e7de      	b.n	6690 <bootutil_tlv_iter_begin+0x76>
            return -1;
    66d2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    66d6:	e7db      	b.n	6690 <bootutil_tlv_iter_begin+0x76>
        return -1;
    66d8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    66dc:	e7d8      	b.n	6690 <bootutil_tlv_iter_begin+0x76>
        return -1;
    66de:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    66e2:	e7d5      	b.n	6690 <bootutil_tlv_iter_begin+0x76>

000066e4 <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    66e4:	2800      	cmp	r0, #0
    66e6:	d04d      	beq.n	6784 <bootutil_tlv_iter_next+0xa0>
{
    66e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    66ea:	b083      	sub	sp, #12
    66ec:	460f      	mov	r7, r1
    66ee:	4616      	mov	r6, r2
    66f0:	461d      	mov	r5, r3
    66f2:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    66f4:	6803      	ldr	r3, [r0, #0]
    66f6:	2b00      	cmp	r3, #0
    66f8:	d048      	beq.n	678c <bootutil_tlv_iter_next+0xa8>
    66fa:	6843      	ldr	r3, [r0, #4]
    66fc:	bb0b      	cbnz	r3, 6742 <bootutil_tlv_iter_next+0x5e>
        return -1;
    66fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6702:	e03a      	b.n	677a <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    6704:	2304      	movs	r3, #4
    6706:	eb0d 0203 	add.w	r2, sp, r3
    670a:	6921      	ldr	r1, [r4, #16]
    670c:	6860      	ldr	r0, [r4, #4]
    670e:	f001 f86b 	bl	77e8 <flash_area_read>
        if (rc) {
    6712:	4601      	mov	r1, r0
    6714:	2800      	cmp	r0, #0
    6716:	d13c      	bne.n	6792 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    6718:	7aa3      	ldrb	r3, [r4, #10]
    671a:	b11b      	cbz	r3, 6724 <bootutil_tlv_iter_next+0x40>
    671c:	6922      	ldr	r2, [r4, #16]
    671e:	68e3      	ldr	r3, [r4, #12]
    6720:	429a      	cmp	r2, r3
    6722:	d239      	bcs.n	6798 <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    6724:	8923      	ldrh	r3, [r4, #8]
    6726:	f64f 72ff 	movw	r2, #65535	; 0xffff
    672a:	4293      	cmp	r3, r2
    672c:	d017      	beq.n	675e <bootutil_tlv_iter_next+0x7a>
    672e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6732:	4293      	cmp	r3, r2
    6734:	d013      	beq.n	675e <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    6736:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    673a:	6923      	ldr	r3, [r4, #16]
    673c:	4418      	add	r0, r3
    673e:	3004      	adds	r0, #4
    6740:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    6742:	6920      	ldr	r0, [r4, #16]
    6744:	6963      	ldr	r3, [r4, #20]
    6746:	4298      	cmp	r0, r3
    6748:	d21a      	bcs.n	6780 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    674a:	6823      	ldr	r3, [r4, #0]
    674c:	895b      	ldrh	r3, [r3, #10]
    674e:	2b00      	cmp	r3, #0
    6750:	d0d8      	beq.n	6704 <bootutil_tlv_iter_next+0x20>
    6752:	68e3      	ldr	r3, [r4, #12]
    6754:	4283      	cmp	r3, r0
    6756:	d1d5      	bne.n	6704 <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    6758:	3004      	adds	r0, #4
    675a:	6120      	str	r0, [r4, #16]
    675c:	e7d2      	b.n	6704 <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    675e:	b115      	cbz	r5, 6766 <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    6760:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6764:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    6766:	6923      	ldr	r3, [r4, #16]
    6768:	3304      	adds	r3, #4
    676a:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    676c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6770:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    6772:	6922      	ldr	r2, [r4, #16]
    6774:	4413      	add	r3, r2
    6776:	3304      	adds	r3, #4
    6778:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    677a:	4608      	mov	r0, r1
    677c:	b003      	add	sp, #12
    677e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    6780:	2101      	movs	r1, #1
    6782:	e7fa      	b.n	677a <bootutil_tlv_iter_next+0x96>
        return -1;
    6784:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    6788:	4608      	mov	r0, r1
    678a:	4770      	bx	lr
        return -1;
    678c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6790:	e7f3      	b.n	677a <bootutil_tlv_iter_next+0x96>
            return -1;
    6792:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6796:	e7f0      	b.n	677a <bootutil_tlv_iter_next+0x96>
            return 1;
    6798:	2101      	movs	r1, #1
    679a:	e7ee      	b.n	677a <bootutil_tlv_iter_next+0x96>

0000679c <bootutil_parse_rsakey>:
{
    679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67a0:	b084      	sub	sp, #16
    67a2:	4604      	mov	r4, r0
    67a4:	460e      	mov	r6, r1
    67a6:	4615      	mov	r5, r2
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
    67a8:	2330      	movs	r3, #48	; 0x30
    67aa:	aa03      	add	r2, sp, #12
    67ac:	4629      	mov	r1, r5
    67ae:	4630      	mov	r0, r6
    67b0:	f001 fd5b 	bl	826a <mbedtls_asn1_get_tag>
    67b4:	bba8      	cbnz	r0, 6822 <bootutil_parse_rsakey+0x86>
    if (*p + len != end) {
    67b6:	6833      	ldr	r3, [r6, #0]
    67b8:	9a03      	ldr	r2, [sp, #12]
    67ba:	4413      	add	r3, r2
    67bc:	42ab      	cmp	r3, r5
    67be:	d133      	bne.n	6828 <bootutil_parse_rsakey+0x8c>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    67c0:	f104 0708 	add.w	r7, r4, #8
    67c4:	463a      	mov	r2, r7
    67c6:	4629      	mov	r1, r5
    67c8:	4630      	mov	r0, r6
    67ca:	f001 fd61 	bl	8290 <mbedtls_asn1_get_mpi>
    67ce:	bb28      	cbnz	r0, 681c <bootutil_parse_rsakey+0x80>
      (rc = mbedtls_asn1_get_mpi(p, end, &ctx->E)) != 0) {
    67d0:	f104 0814 	add.w	r8, r4, #20
    67d4:	4642      	mov	r2, r8
    67d6:	4629      	mov	r1, r5
    67d8:	4630      	mov	r0, r6
    67da:	f001 fd59 	bl	8290 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    67de:	b9e8      	cbnz	r0, 681c <bootutil_parse_rsakey+0x80>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    67e0:	4638      	mov	r0, r7
    67e2:	f002 f8d3 	bl	898c <mbedtls_mpi_size>
    67e6:	6060      	str	r0, [r4, #4]
    if (*p != end) {
    67e8:	6833      	ldr	r3, [r6, #0]
    67ea:	42ab      	cmp	r3, r5
    67ec:	d11f      	bne.n	682e <bootutil_parse_rsakey+0x92>
    rc = mbedtls_rsa_import(ctx, &ctx->N, NULL, NULL, NULL, &ctx->E);
    67ee:	f8cd 8004 	str.w	r8, [sp, #4]
    67f2:	2200      	movs	r2, #0
    67f4:	9200      	str	r2, [sp, #0]
    67f6:	4613      	mov	r3, r2
    67f8:	4639      	mov	r1, r7
    67fa:	4620      	mov	r0, r4
    67fc:	f002 ffd1 	bl	97a2 <mbedtls_rsa_import>
    if (rc != 0) {
    6800:	b9c0      	cbnz	r0, 6834 <bootutil_parse_rsakey+0x98>
    rc = mbedtls_rsa_check_pubkey(ctx);
    6802:	4620      	mov	r0, r4
    6804:	f7fe face 	bl	4da4 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
    6808:	4605      	mov	r5, r0
    680a:	b9b0      	cbnz	r0, 683a <bootutil_parse_rsakey+0x9e>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    680c:	4638      	mov	r0, r7
    680e:	f002 f8bd 	bl	898c <mbedtls_mpi_size>
    6812:	6060      	str	r0, [r4, #4]
}
    6814:	4628      	mov	r0, r5
    6816:	b004      	add	sp, #16
    6818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -3;
    681c:	f06f 0502 	mvn.w	r5, #2
    6820:	e7f8      	b.n	6814 <bootutil_parse_rsakey+0x78>
        return -1;
    6822:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    6826:	e7f5      	b.n	6814 <bootutil_parse_rsakey+0x78>
        return -2;
    6828:	f06f 0501 	mvn.w	r5, #1
    682c:	e7f2      	b.n	6814 <bootutil_parse_rsakey+0x78>
        return -4;
    682e:	f06f 0503 	mvn.w	r5, #3
    6832:	e7ef      	b.n	6814 <bootutil_parse_rsakey+0x78>
        return -5;
    6834:	f06f 0504 	mvn.w	r5, #4
    6838:	e7ec      	b.n	6814 <bootutil_parse_rsakey+0x78>
        return -6;
    683a:	f06f 0505 	mvn.w	r5, #5
    683e:	e7e9      	b.n	6814 <bootutil_parse_rsakey+0x78>

00006840 <pss_mgf1>:
{
    6840:	b5f0      	push	{r4, r5, r6, r7, lr}
    6842:	b0a5      	sub	sp, #148	; 0x94
    6844:	4606      	mov	r6, r0
    6846:	460f      	mov	r7, r1
    uint8_t counter[4] = { 0, 0, 0, 0 };
    6848:	2300      	movs	r3, #0
    684a:	9308      	str	r3, [sp, #32]
    int count = PSS_MASK_LEN;
    684c:	24df      	movs	r4, #223	; 0xdf
    while (count > 0) {
    684e:	e007      	b.n	6860 <pss_mgf1+0x20>
            bytes = count;
    6850:	4625      	mov	r5, r4
        memcpy(mask, htmp, bytes);
    6852:	462a      	mov	r2, r5
    6854:	4669      	mov	r1, sp
    6856:	4630      	mov	r0, r6
    6858:	f001 fa84 	bl	7d64 <memcpy>
        mask += bytes;
    685c:	442e      	add	r6, r5
        count -= bytes;
    685e:	1b64      	subs	r4, r4, r5
    while (count > 0) {
    6860:	2c00      	cmp	r4, #0
    6862:	dd1d      	ble.n	68a0 <pss_mgf1+0x60>
    mbedtls_sha256_init(ctx);
    6864:	a809      	add	r0, sp, #36	; 0x24
    6866:	f003 f821 	bl	98ac <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    686a:	2100      	movs	r1, #0
    686c:	a809      	add	r0, sp, #36	; 0x24
    686e:	f7fe fb05 	bl	4e7c <mbedtls_sha256_starts_ret>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
    6872:	2220      	movs	r2, #32
    6874:	4639      	mov	r1, r7
    6876:	a809      	add	r0, sp, #36	; 0x24
    6878:	f003 f81e 	bl	98b8 <mbedtls_sha256_update_ret>
    687c:	2204      	movs	r2, #4
    687e:	a908      	add	r1, sp, #32
    6880:	a809      	add	r0, sp, #36	; 0x24
    6882:	f003 f819 	bl	98b8 <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
    6886:	4669      	mov	r1, sp
    6888:	a809      	add	r0, sp, #36	; 0x24
    688a:	f003 f858 	bl	993e <mbedtls_sha256_finish_ret>
        counter[3]++;
    688e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    6892:	3301      	adds	r3, #1
    6894:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        if (bytes > count)
    6898:	2c1f      	cmp	r4, #31
    689a:	ddd9      	ble.n	6850 <pss_mgf1+0x10>
        bytes = PSS_HLEN;
    689c:	2520      	movs	r5, #32
    689e:	e7d8      	b.n	6852 <pss_mgf1+0x12>
}
    68a0:	b025      	add	sp, #148	; 0x94
    68a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000068a4 <boot_flag_decode>:
    if (flag != BOOT_FLAG_SET) {
    68a4:	2801      	cmp	r0, #1
    68a6:	d100      	bne.n	68aa <boot_flag_decode+0x6>
}
    68a8:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    68aa:	2002      	movs	r0, #2
    68ac:	e7fc      	b.n	68a8 <boot_flag_decode+0x4>

000068ae <boot_write_trailer>:
{
    68ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    68b2:	b083      	sub	sp, #12
    68b4:	4606      	mov	r6, r0
    68b6:	4688      	mov	r8, r1
    68b8:	4617      	mov	r7, r2
    68ba:	461c      	mov	r4, r3
    align = flash_area_align(fap);
    68bc:	f001 f811 	bl	78e2 <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    68c0:	2c08      	cmp	r4, #8
    68c2:	d820      	bhi.n	6906 <boot_write_trailer+0x58>
    68c4:	4605      	mov	r5, r0
    68c6:	2808      	cmp	r0, #8
    68c8:	d902      	bls.n	68d0 <boot_write_trailer+0x22>
        return -1;
    68ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    68ce:	e01c      	b.n	690a <boot_write_trailer+0x5c>
    erased_val = flash_area_erased_val(fap);
    68d0:	4630      	mov	r0, r6
    68d2:	f001 f80f 	bl	78f4 <flash_area_erased_val>
    68d6:	4681      	mov	r9, r0
    if (align < inlen) {
    68d8:	42a5      	cmp	r5, r4
    68da:	d200      	bcs.n	68de <boot_write_trailer+0x30>
        align = inlen;
    68dc:	4625      	mov	r5, r4
    memcpy(buf, inbuf, inlen);
    68de:	4622      	mov	r2, r4
    68e0:	4639      	mov	r1, r7
    68e2:	4668      	mov	r0, sp
    68e4:	f001 fa3e 	bl	7d64 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    68e8:	1b2a      	subs	r2, r5, r4
    68ea:	4649      	mov	r1, r9
    68ec:	eb0d 0004 	add.w	r0, sp, r4
    68f0:	f001 fa5c 	bl	7dac <memset>
    rc = flash_area_write(fap, off, buf, align);
    68f4:	462b      	mov	r3, r5
    68f6:	466a      	mov	r2, sp
    68f8:	4641      	mov	r1, r8
    68fa:	4630      	mov	r0, r6
    68fc:	f000 ff93 	bl	7826 <flash_area_write>
    if (rc != 0) {
    6900:	b118      	cbz	r0, 690a <boot_write_trailer+0x5c>
        return BOOT_EFLASH;
    6902:	2001      	movs	r0, #1
    6904:	e001      	b.n	690a <boot_write_trailer+0x5c>
        return -1;
    6906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    690a:	b003      	add	sp, #12
    690c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006910 <boot_write_trailer_flag>:
{
    6910:	b500      	push	{lr}
    6912:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
    6914:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    6918:	2301      	movs	r3, #1
    691a:	aa01      	add	r2, sp, #4
    691c:	f7ff ffc7 	bl	68ae <boot_write_trailer>
}
    6920:	b003      	add	sp, #12
    6922:	f85d fb04 	ldr.w	pc, [sp], #4

00006926 <boot_fih_memequal>:
{
    6926:	b508      	push	{r3, lr}
    return memcmp(s1, s2, n);
    6928:	f001 fa05 	bl	7d36 <memcmp>
}
    692c:	bd08      	pop	{r3, pc}

0000692e <boot_magic_compatible_check>:
    switch (tbl_val) {
    692e:	2804      	cmp	r0, #4
    6930:	d00a      	beq.n	6948 <boot_magic_compatible_check+0x1a>
    6932:	2805      	cmp	r0, #5
    6934:	d103      	bne.n	693e <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    6936:	1e48      	subs	r0, r1, #1
    6938:	bf18      	it	ne
    693a:	2001      	movne	r0, #1
    693c:	4770      	bx	lr
        return tbl_val == val;
    693e:	4288      	cmp	r0, r1
    6940:	bf14      	ite	ne
    6942:	2000      	movne	r0, #0
    6944:	2001      	moveq	r0, #1
    6946:	4770      	bx	lr
    switch (tbl_val) {
    6948:	2001      	movs	r0, #1
}
    694a:	4770      	bx	lr

0000694c <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    694c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6950:	01c0      	lsls	r0, r0, #7
    6952:	4770      	bx	lr

00006954 <boot_trailer_sz>:
{
    6954:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    6956:	f7ff fff9 	bl	694c <boot_status_sz>
}
    695a:	3030      	adds	r0, #48	; 0x30
    695c:	bd08      	pop	{r3, pc}

0000695e <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    695e:	780b      	ldrb	r3, [r1, #0]
    6960:	2b03      	cmp	r3, #3
    6962:	d007      	beq.n	6974 <boot_status_entries+0x16>
    6964:	2b07      	cmp	r3, #7
    6966:	d102      	bne.n	696e <boot_status_entries+0x10>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    6968:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    696c:	4770      	bx	lr
    return -1;
    696e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6972:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    6974:	f44f 70c0 	mov.w	r0, #384	; 0x180
    6978:	4770      	bx	lr

0000697a <boot_status_off>:
{
    697a:	b510      	push	{r4, lr}
    697c:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    697e:	f000 ffb0 	bl	78e2 <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    6982:	f7ff ffe7 	bl	6954 <boot_trailer_sz>
    return fap->fa_size - off_from_end;
    6986:	68a3      	ldr	r3, [r4, #8]
}
    6988:	1a18      	subs	r0, r3, r0
    698a:	bd10      	pop	{r4, pc}

0000698c <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    698c:	6880      	ldr	r0, [r0, #8]
}
    698e:	3828      	subs	r0, #40	; 0x28
    6990:	4770      	bx	lr

00006992 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    6992:	b189      	cbz	r1, 69b8 <bootutil_buffer_is_erased+0x26>
{
    6994:	b538      	push	{r3, r4, r5, lr}
    6996:	4614      	mov	r4, r2
    6998:	460d      	mov	r5, r1
    if (buffer == NULL || len == 0) {
    699a:	b90a      	cbnz	r2, 69a0 <bootutil_buffer_is_erased+0xe>
        return false;
    699c:	2000      	movs	r0, #0
}
    699e:	bd38      	pop	{r3, r4, r5, pc}
    erased_val = flash_area_erased_val(area);
    69a0:	f000 ffa8 	bl	78f4 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    69a4:	2300      	movs	r3, #0
    69a6:	42a3      	cmp	r3, r4
    69a8:	d204      	bcs.n	69b4 <bootutil_buffer_is_erased+0x22>
        if (u8b[i] != erased_val) {
    69aa:	5cea      	ldrb	r2, [r5, r3]
    69ac:	4282      	cmp	r2, r0
    69ae:	d105      	bne.n	69bc <bootutil_buffer_is_erased+0x2a>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    69b0:	3301      	adds	r3, #1
    69b2:	e7f8      	b.n	69a6 <bootutil_buffer_is_erased+0x14>
    return true;
    69b4:	2001      	movs	r0, #1
    69b6:	e7f2      	b.n	699e <bootutil_buffer_is_erased+0xc>
        return false;
    69b8:	2000      	movs	r0, #0
}
    69ba:	4770      	bx	lr
            return false;
    69bc:	2000      	movs	r0, #0
    69be:	e7ee      	b.n	699e <bootutil_buffer_is_erased+0xc>

000069c0 <boot_read_swap_state>:
{
    69c0:	b570      	push	{r4, r5, r6, lr}
    69c2:	b086      	sub	sp, #24
    69c4:	4604      	mov	r4, r0
    69c6:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    69c8:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    69ca:	2310      	movs	r3, #16
    69cc:	aa02      	add	r2, sp, #8
    69ce:	3910      	subs	r1, #16
    69d0:	f000 ff0a 	bl	77e8 <flash_area_read>
    if (rc < 0) {
    69d4:	2800      	cmp	r0, #0
    69d6:	db5f      	blt.n	6a98 <boot_read_swap_state+0xd8>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    69d8:	2210      	movs	r2, #16
    69da:	a902      	add	r1, sp, #8
    69dc:	4620      	mov	r0, r4
    69de:	f7ff ffd8 	bl	6992 <bootutil_buffer_is_erased>
    69e2:	2800      	cmp	r0, #0
    69e4:	d048      	beq.n	6a78 <boot_read_swap_state+0xb8>
        state->magic = BOOT_MAGIC_UNSET;
    69e6:	2303      	movs	r3, #3
    69e8:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    69ea:	4620      	mov	r0, r4
    69ec:	f7ff ffce 	bl	698c <boot_swap_info_off>
    69f0:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    69f2:	2301      	movs	r3, #1
    69f4:	f10d 0207 	add.w	r2, sp, #7
    69f8:	4620      	mov	r0, r4
    69fa:	f000 fef5 	bl	77e8 <flash_area_read>
    if (rc < 0) {
    69fe:	2800      	cmp	r0, #0
    6a00:	db4d      	blt.n	6a9e <boot_read_swap_state+0xde>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    6a02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a06:	f003 020f 	and.w	r2, r3, #15
    6a0a:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    6a0c:	091b      	lsrs	r3, r3, #4
    6a0e:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    6a10:	2201      	movs	r2, #1
    6a12:	f10d 0107 	add.w	r1, sp, #7
    6a16:	4620      	mov	r0, r4
    6a18:	f7ff ffbb 	bl	6992 <bootutil_buffer_is_erased>
    6a1c:	b910      	cbnz	r0, 6a24 <boot_read_swap_state+0x64>
            state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    6a1e:	786b      	ldrb	r3, [r5, #1]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    6a20:	2b04      	cmp	r3, #4
    6a22:	d903      	bls.n	6a2c <boot_read_swap_state+0x6c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    6a24:	2301      	movs	r3, #1
    6a26:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    6a28:	2300      	movs	r3, #0
    6a2a:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    6a2c:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read(fap, off, &state->copy_done, sizeof state->copy_done);
    6a2e:	1cae      	adds	r6, r5, #2
    6a30:	2301      	movs	r3, #1
    6a32:	4632      	mov	r2, r6
    6a34:	3920      	subs	r1, #32
    6a36:	4620      	mov	r0, r4
    6a38:	f000 fed6 	bl	77e8 <flash_area_read>
    if (rc < 0) {
    6a3c:	2800      	cmp	r0, #0
    6a3e:	db30      	blt.n	6aa2 <boot_read_swap_state+0xe2>
    if (bootutil_buffer_is_erased(fap, &state->copy_done,
    6a40:	2201      	movs	r2, #1
    6a42:	4631      	mov	r1, r6
    6a44:	4620      	mov	r0, r4
    6a46:	f7ff ffa4 	bl	6992 <bootutil_buffer_is_erased>
    6a4a:	b1d0      	cbz	r0, 6a82 <boot_read_swap_state+0xc2>
        state->copy_done = BOOT_FLAG_UNSET;
    6a4c:	2303      	movs	r3, #3
    6a4e:	70ab      	strb	r3, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    6a50:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read(fap, off, &state->image_ok, sizeof state->image_ok);
    6a52:	1cee      	adds	r6, r5, #3
    6a54:	2301      	movs	r3, #1
    6a56:	4632      	mov	r2, r6
    6a58:	3918      	subs	r1, #24
    6a5a:	4620      	mov	r0, r4
    6a5c:	f000 fec4 	bl	77e8 <flash_area_read>
    if (rc < 0) {
    6a60:	2800      	cmp	r0, #0
    6a62:	db20      	blt.n	6aa6 <boot_read_swap_state+0xe6>
    if (bootutil_buffer_is_erased(fap, &state->image_ok,
    6a64:	2201      	movs	r2, #1
    6a66:	4631      	mov	r1, r6
    6a68:	4620      	mov	r0, r4
    6a6a:	f7ff ff92 	bl	6992 <bootutil_buffer_is_erased>
    6a6e:	b168      	cbz	r0, 6a8c <boot_read_swap_state+0xcc>
        state->image_ok = BOOT_FLAG_UNSET;
    6a70:	2303      	movs	r3, #3
    6a72:	70eb      	strb	r3, [r5, #3]
    return 0;
    6a74:	2000      	movs	r0, #0
    6a76:	e010      	b.n	6a9a <boot_read_swap_state+0xda>
        state->magic = boot_magic_decode(magic);
    6a78:	a802      	add	r0, sp, #8
    6a7a:	f7f9 ff65 	bl	948 <boot_magic_decode>
    6a7e:	7028      	strb	r0, [r5, #0]
    6a80:	e7b3      	b.n	69ea <boot_read_swap_state+0x2a>
        state->copy_done = boot_flag_decode(state->copy_done);
    6a82:	78a8      	ldrb	r0, [r5, #2]
    6a84:	f7ff ff0e 	bl	68a4 <boot_flag_decode>
    6a88:	70a8      	strb	r0, [r5, #2]
    6a8a:	e7e1      	b.n	6a50 <boot_read_swap_state+0x90>
        state->image_ok = boot_flag_decode(state->image_ok);
    6a8c:	78e8      	ldrb	r0, [r5, #3]
    6a8e:	f7ff ff09 	bl	68a4 <boot_flag_decode>
    6a92:	70e8      	strb	r0, [r5, #3]
    return 0;
    6a94:	2000      	movs	r0, #0
    6a96:	e000      	b.n	6a9a <boot_read_swap_state+0xda>
        return BOOT_EFLASH;
    6a98:	2001      	movs	r0, #1
}
    6a9a:	b006      	add	sp, #24
    6a9c:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    6a9e:	2001      	movs	r0, #1
    6aa0:	e7fb      	b.n	6a9a <boot_read_swap_state+0xda>
        return BOOT_EFLASH;
    6aa2:	2001      	movs	r0, #1
    6aa4:	e7f9      	b.n	6a9a <boot_read_swap_state+0xda>
        return BOOT_EFLASH;
    6aa6:	2001      	movs	r0, #1
    6aa8:	e7f7      	b.n	6a9a <boot_read_swap_state+0xda>

00006aaa <boot_read_swap_state_by_id>:
{
    6aaa:	b510      	push	{r4, lr}
    6aac:	b082      	sub	sp, #8
    6aae:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    6ab0:	a901      	add	r1, sp, #4
    6ab2:	b2c0      	uxtb	r0, r0
    6ab4:	f7fb ff38 	bl	2928 <flash_area_open>
    if (rc != 0) {
    6ab8:	b118      	cbz	r0, 6ac2 <boot_read_swap_state_by_id+0x18>
        return BOOT_EFLASH;
    6aba:	2401      	movs	r4, #1
}
    6abc:	4620      	mov	r0, r4
    6abe:	b002      	add	sp, #8
    6ac0:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    6ac2:	4621      	mov	r1, r4
    6ac4:	9801      	ldr	r0, [sp, #4]
    6ac6:	f7ff ff7b 	bl	69c0 <boot_read_swap_state>
    6aca:	4604      	mov	r4, r0
    flash_area_close(fap);
    6acc:	9801      	ldr	r0, [sp, #4]
    6ace:	f000 fe8a 	bl	77e6 <flash_area_close>
    return rc;
    6ad2:	e7f3      	b.n	6abc <boot_read_swap_state_by_id+0x12>

00006ad4 <boot_read_swap_size>:
{
    6ad4:	b530      	push	{r4, r5, lr}
    6ad6:	b083      	sub	sp, #12
    6ad8:	460c      	mov	r4, r1
    rc = boot_find_status(image_index, &fap);
    6ada:	a901      	add	r1, sp, #4
    6adc:	f7f9 ff40 	bl	960 <boot_find_status>
    if (rc == 0) {
    6ae0:	4605      	mov	r5, r0
    6ae2:	b110      	cbz	r0, 6aea <boot_read_swap_size+0x16>
}
    6ae4:	4628      	mov	r0, r5
    6ae6:	b003      	add	sp, #12
    6ae8:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    6aea:	9d01      	ldr	r5, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    6aec:	4628      	mov	r0, r5
    6aee:	f7ff ff4d 	bl	698c <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    6af2:	2304      	movs	r3, #4
    6af4:	4622      	mov	r2, r4
    6af6:	f1a0 0108 	sub.w	r1, r0, #8
    6afa:	4628      	mov	r0, r5
    6afc:	f000 fe74 	bl	77e8 <flash_area_read>
    6b00:	4605      	mov	r5, r0
        flash_area_close(fap);
    6b02:	9801      	ldr	r0, [sp, #4]
    6b04:	f000 fe6f 	bl	77e6 <flash_area_close>
    return rc;
    6b08:	e7ec      	b.n	6ae4 <boot_read_swap_size+0x10>

00006b0a <boot_write_copy_done>:
{
    6b0a:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    6b0c:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    6b0e:	2201      	movs	r2, #1
    6b10:	3920      	subs	r1, #32
    6b12:	f7ff fefd 	bl	6910 <boot_write_trailer_flag>
}
    6b16:	bd08      	pop	{r3, pc}

00006b18 <boot_write_image_ok>:
{
    6b18:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    6b1a:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    6b1c:	2201      	movs	r2, #1
    6b1e:	3918      	subs	r1, #24
    6b20:	f7ff fef6 	bl	6910 <boot_write_trailer_flag>
}
    6b24:	bd08      	pop	{r3, pc}

00006b26 <boot_write_swap_info>:
{
    6b26:	b510      	push	{r4, lr}
    6b28:	b082      	sub	sp, #8
    6b2a:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6b2c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6b30:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    6b34:	f7ff ff2a 	bl	698c <boot_swap_info_off>
    6b38:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    6b3a:	2301      	movs	r3, #1
    6b3c:	f10d 0207 	add.w	r2, sp, #7
    6b40:	4620      	mov	r0, r4
    6b42:	f7ff feb4 	bl	68ae <boot_write_trailer>
}
    6b46:	b002      	add	sp, #8
    6b48:	bd10      	pop	{r4, pc}

00006b4a <boot_write_swap_size>:
{
    6b4a:	b510      	push	{r4, lr}
    6b4c:	b082      	sub	sp, #8
    6b4e:	4604      	mov	r4, r0
    6b50:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    6b52:	f7ff ff1b 	bl	698c <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    6b56:	2304      	movs	r3, #4
    6b58:	eb0d 0203 	add.w	r2, sp, r3
    6b5c:	f1a0 0108 	sub.w	r1, r0, #8
    6b60:	4620      	mov	r0, r4
    6b62:	f7ff fea4 	bl	68ae <boot_write_trailer>
}
    6b66:	b002      	add	sp, #8
    6b68:	bd10      	pop	{r4, pc}

00006b6a <boot_write_sz>:
{
    6b6a:	b508      	push	{r3, lr}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    6b6c:	6a00      	ldr	r0, [r0, #32]
    6b6e:	f000 feb8 	bl	78e2 <flash_area_align>
}
    6b72:	bd08      	pop	{r3, pc}

00006b74 <boot_read_image_size>:
{
    6b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b78:	b082      	sub	sp, #8
    6b7a:	4606      	mov	r6, r0
    6b7c:	460c      	mov	r4, r1
    6b7e:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    6b80:	2000      	movs	r0, #0
    6b82:	f7ff fd01 	bl	6588 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    6b86:	a901      	add	r1, sp, #4
    6b88:	b2c0      	uxtb	r0, r0
    6b8a:	f7fb fecd 	bl	2928 <flash_area_open>
    if (rc != 0) {
    6b8e:	b140      	cbz	r0, 6ba2 <boot_read_image_size+0x2e>
        rc = BOOT_EFLASH;
    6b90:	f04f 0801 	mov.w	r8, #1
    flash_area_close(fap);
    6b94:	9801      	ldr	r0, [sp, #4]
    6b96:	f000 fe26 	bl	77e6 <flash_area_close>
}
    6b9a:	4640      	mov	r0, r8
    6b9c:	b002      	add	sp, #8
    6b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    6ba2:	232c      	movs	r3, #44	; 0x2c
    6ba4:	fb03 6304 	mla	r3, r3, r4, r6
    6ba8:	891d      	ldrh	r5, [r3, #8]
    6baa:	68db      	ldr	r3, [r3, #12]
    6bac:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    6bae:	2304      	movs	r3, #4
    6bb0:	466a      	mov	r2, sp
    6bb2:	4629      	mov	r1, r5
    6bb4:	9801      	ldr	r0, [sp, #4]
    6bb6:	f000 fe17 	bl	77e8 <flash_area_read>
    6bba:	4680      	mov	r8, r0
    6bbc:	bb40      	cbnz	r0, 6c10 <boot_read_image_size+0x9c>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    6bbe:	212c      	movs	r1, #44	; 0x2c
    6bc0:	fb01 6404 	mla	r4, r1, r4, r6
    6bc4:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    6bc6:	f8bd 2000 	ldrh.w	r2, [sp]
    6bca:	f646 1308 	movw	r3, #26888	; 0x6908
    6bce:	429a      	cmp	r2, r3
    6bd0:	d00c      	beq.n	6bec <boot_read_image_size+0x78>
    } else if (protect_tlv_size != 0) {
    6bd2:	bb04      	cbnz	r4, 6c16 <boot_read_image_size+0xa2>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    6bd4:	f8bd 2000 	ldrh.w	r2, [sp]
    6bd8:	f646 1307 	movw	r3, #26887	; 0x6907
    6bdc:	429a      	cmp	r2, r3
    6bde:	d11d      	bne.n	6c1c <boot_read_image_size+0xa8>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    6be0:	4425      	add	r5, r4
    6be2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6be6:	441d      	add	r5, r3
    6be8:	603d      	str	r5, [r7, #0]
    rc = 0;
    6bea:	e7d3      	b.n	6b94 <boot_read_image_size+0x20>
        if (protect_tlv_size != info.it_tlv_tot) {
    6bec:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    6bf0:	428c      	cmp	r4, r1
    6bf2:	d002      	beq.n	6bfa <boot_read_image_size+0x86>
            rc = BOOT_EBADIMAGE;
    6bf4:	f04f 0803 	mov.w	r8, #3
    6bf8:	e7cc      	b.n	6b94 <boot_read_image_size+0x20>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    6bfa:	2304      	movs	r3, #4
    6bfc:	466a      	mov	r2, sp
    6bfe:	4429      	add	r1, r5
    6c00:	9801      	ldr	r0, [sp, #4]
    6c02:	f000 fdf1 	bl	77e8 <flash_area_read>
    6c06:	2800      	cmp	r0, #0
    6c08:	d0e4      	beq.n	6bd4 <boot_read_image_size+0x60>
            rc = BOOT_EFLASH;
    6c0a:	f04f 0801 	mov.w	r8, #1
    6c0e:	e7c1      	b.n	6b94 <boot_read_image_size+0x20>
        rc = BOOT_EFLASH;
    6c10:	f04f 0801 	mov.w	r8, #1
    6c14:	e7be      	b.n	6b94 <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    6c16:	f04f 0803 	mov.w	r8, #3
    6c1a:	e7bb      	b.n	6b94 <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    6c1c:	f04f 0803 	mov.w	r8, #3
    6c20:	e7b8      	b.n	6b94 <boot_read_image_size+0x20>

00006c22 <boot_check_header_erased>:
{
    6c22:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c24:	b083      	sub	sp, #12
    6c26:	4607      	mov	r7, r0
    6c28:	460c      	mov	r4, r1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    6c2a:	2000      	movs	r0, #0
    6c2c:	f7ff fcac 	bl	6588 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    6c30:	a901      	add	r1, sp, #4
    6c32:	b2c0      	uxtb	r0, r0
    6c34:	f7fb fe78 	bl	2928 <flash_area_open>
    if (rc != 0) {
    6c38:	b9d0      	cbnz	r0, 6c70 <boot_check_header_erased+0x4e>
    6c3a:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    6c3c:	9801      	ldr	r0, [sp, #4]
    6c3e:	f000 fe59 	bl	78f4 <flash_area_erased_val>
    6c42:	4605      	mov	r5, r0
    flash_area_close(fap);
    6c44:	9801      	ldr	r0, [sp, #4]
    6c46:	f000 fdce 	bl	77e6 <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    6c4a:	212c      	movs	r1, #44	; 0x2c
    6c4c:	fb01 7104 	mla	r1, r1, r4, r7
    for (i = 0; i < len; i++) {
    6c50:	2300      	movs	r3, #0
    6c52:	2b03      	cmp	r3, #3
    6c54:	d805      	bhi.n	6c62 <boot_check_header_erased+0x40>
        if (val != p[i]) {
    6c56:	5cca      	ldrb	r2, [r1, r3]
    6c58:	4295      	cmp	r5, r2
    6c5a:	d107      	bne.n	6c6c <boot_check_header_erased+0x4a>
    for (i = 0; i < len; i++) {
    6c5c:	3301      	adds	r3, #1
    6c5e:	b2db      	uxtb	r3, r3
    6c60:	e7f7      	b.n	6c52 <boot_check_header_erased+0x30>
    return true;
    6c62:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    6c64:	b13b      	cbz	r3, 6c76 <boot_check_header_erased+0x54>
}
    6c66:	4630      	mov	r0, r6
    6c68:	b003      	add	sp, #12
    6c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return false;
    6c6c:	2300      	movs	r3, #0
    6c6e:	e7f9      	b.n	6c64 <boot_check_header_erased+0x42>
        return -1;
    6c70:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    6c74:	e7f7      	b.n	6c66 <boot_check_header_erased+0x44>
        return -1;
    6c76:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    6c7a:	e7f4      	b.n	6c66 <boot_check_header_erased+0x44>

00006c7c <boot_initialize_area>:
{
    6c7c:	b510      	push	{r4, lr}
    6c7e:	b082      	sub	sp, #8
    6c80:	4603      	mov	r3, r0
    6c82:	4608      	mov	r0, r1
    num_sectors = BOOT_MAX_IMG_SECTORS;
    6c84:	2280      	movs	r2, #128	; 0x80
    6c86:	9201      	str	r2, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    6c88:	2903      	cmp	r1, #3
    6c8a:	d005      	beq.n	6c98 <boot_initialize_area+0x1c>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    6c8c:	2907      	cmp	r1, #7
    6c8e:	d10e      	bne.n	6cae <boot_initialize_area+0x32>
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    6c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    6c92:	f103 0454 	add.w	r4, r3, #84	; 0x54
    6c96:	e002      	b.n	6c9e <boot_initialize_area+0x22>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    6c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    6c9a:	f103 0428 	add.w	r4, r3, #40	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6c9e:	a901      	add	r1, sp, #4
    6ca0:	f7fb fe56 	bl	2950 <flash_area_get_sectors>
    if (rc != 0) {
    6ca4:	b908      	cbnz	r0, 6caa <boot_initialize_area+0x2e>
    *out_num_sectors = num_sectors;
    6ca6:	9b01      	ldr	r3, [sp, #4]
    6ca8:	6023      	str	r3, [r4, #0]
}
    6caa:	b002      	add	sp, #8
    6cac:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6cae:	2001      	movs	r0, #1
    6cb0:	e7fb      	b.n	6caa <boot_initialize_area+0x2e>

00006cb2 <boot_read_sectors>:
{
    6cb2:	b538      	push	{r3, r4, r5, lr}
    6cb4:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    6cb6:	2103      	movs	r1, #3
    6cb8:	f7ff ffe0 	bl	6c7c <boot_initialize_area>
    if (rc != 0) {
    6cbc:	b110      	cbz	r0, 6cc4 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    6cbe:	2501      	movs	r5, #1
}
    6cc0:	4628      	mov	r0, r5
    6cc2:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    6cc4:	2107      	movs	r1, #7
    6cc6:	4620      	mov	r0, r4
    6cc8:	f7ff ffd8 	bl	6c7c <boot_initialize_area>
    if (rc != 0) {
    6ccc:	4605      	mov	r5, r0
    6cce:	b108      	cbz	r0, 6cd4 <boot_read_sectors+0x22>
        return BOOT_EFLASH;
    6cd0:	2501      	movs	r5, #1
    6cd2:	e7f5      	b.n	6cc0 <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    6cd4:	4620      	mov	r0, r4
    6cd6:	f7ff ff48 	bl	6b6a <boot_write_sz>
    6cda:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    6cdc:	e7f0      	b.n	6cc0 <boot_read_sectors+0xe>

00006cde <boot_read_image_headers>:
{
    6cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ce0:	4605      	mov	r5, r0
    6ce2:	460f      	mov	r7, r1
    6ce4:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    6ce6:	2400      	movs	r4, #0
    6ce8:	2c01      	cmp	r4, #1
    6cea:	dc10      	bgt.n	6d0e <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6cec:	4633      	mov	r3, r6
    6cee:	222c      	movs	r2, #44	; 0x2c
    6cf0:	fb02 5204 	mla	r2, r2, r4, r5
    6cf4:	4621      	mov	r1, r4
    6cf6:	4628      	mov	r0, r5
    6cf8:	f7fa faa0 	bl	123c <boot_read_image_header>
        if (rc != 0) {
    6cfc:	4603      	mov	r3, r0
    6cfe:	b908      	cbnz	r0, 6d04 <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    6d00:	3401      	adds	r4, #1
    6d02:	e7f1      	b.n	6ce8 <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    6d04:	2c00      	cmp	r4, #0
    6d06:	dd03      	ble.n	6d10 <boot_read_image_headers+0x32>
    6d08:	b917      	cbnz	r7, 6d10 <boot_read_image_headers+0x32>
                return 0;
    6d0a:	2300      	movs	r3, #0
    6d0c:	e000      	b.n	6d10 <boot_read_image_headers+0x32>
    return 0;
    6d0e:	2300      	movs	r3, #0
}
    6d10:	4618      	mov	r0, r3
    6d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006d14 <boot_status_reset>:
    bs->use_scratch = 0;
    6d14:	2300      	movs	r3, #0
    6d16:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    6d18:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    6d1a:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    6d1c:	2301      	movs	r3, #1
    6d1e:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    6d20:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    6d22:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    6d24:	71c3      	strb	r3, [r0, #7]
}
    6d26:	4770      	bx	lr

00006d28 <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    6d28:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    6d2a:	2b01      	cmp	r3, #1
    6d2c:	d001      	beq.n	6d32 <boot_status_is_reset+0xa>
    6d2e:	2000      	movs	r0, #0
    6d30:	4770      	bx	lr
    6d32:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    6d34:	2b01      	cmp	r3, #1
    6d36:	d001      	beq.n	6d3c <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    6d38:	2000      	movs	r0, #0
    6d3a:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    6d3c:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    6d3e:	2b01      	cmp	r3, #1
    6d40:	d001      	beq.n	6d46 <boot_status_is_reset+0x1e>
    6d42:	2000      	movs	r0, #0
    6d44:	4770      	bx	lr
    6d46:	2001      	movs	r0, #1
}
    6d48:	4770      	bx	lr

00006d4a <boot_perform_update>:
{
    6d4a:	b538      	push	{r3, r4, r5, lr}
    6d4c:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    6d4e:	f7f9 ff99 	bl	c84 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
    6d52:	f895 4058 	ldrb.w	r4, [r5, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    6d56:	1ee3      	subs	r3, r4, #3
    6d58:	b2db      	uxtb	r3, r3
    6d5a:	2b01      	cmp	r3, #1
    6d5c:	d90d      	bls.n	6d7a <boot_perform_update+0x30>
    if (BOOT_IS_UPGRADE(swap_type)) {
    6d5e:	2c02      	cmp	r4, #2
    6d60:	d003      	beq.n	6d6a <boot_perform_update+0x20>
    6d62:	2c04      	cmp	r4, #4
    6d64:	d001      	beq.n	6d6a <boot_perform_update+0x20>
    6d66:	2c03      	cmp	r4, #3
    6d68:	d106      	bne.n	6d78 <boot_perform_update+0x2e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    6d6a:	2000      	movs	r0, #0
    6d6c:	f000 f8dd 	bl	6f2a <swap_set_copy_done>
        if (rc != 0) {
    6d70:	b110      	cbz	r0, 6d78 <boot_perform_update+0x2e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    6d72:	23ff      	movs	r3, #255	; 0xff
    6d74:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
}
    6d78:	bd38      	pop	{r3, r4, r5, pc}
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    6d7a:	2000      	movs	r0, #0
    6d7c:	f000 f8e8 	bl	6f50 <swap_set_image_ok>
        if (rc != 0) {
    6d80:	2800      	cmp	r0, #0
    6d82:	d0ec      	beq.n	6d5e <boot_perform_update+0x14>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    6d84:	24ff      	movs	r4, #255	; 0xff
    6d86:	f885 4058 	strb.w	r4, [r5, #88]	; 0x58
    if (BOOT_IS_UPGRADE(swap_type)) {
    6d8a:	e7ea      	b.n	6d62 <boot_perform_update+0x18>

00006d8c <boot_write_status>:
{
    6d8c:	b570      	push	{r4, r5, r6, lr}
    6d8e:	b084      	sub	sp, #16
    6d90:	4604      	mov	r4, r0
    6d92:	460e      	mov	r6, r1
    rc = flash_area_open(area_id, &fap);
    6d94:	a903      	add	r1, sp, #12
    6d96:	2003      	movs	r0, #3
    6d98:	f7fb fdc6 	bl	2928 <flash_area_open>
    if (rc != 0) {
    6d9c:	b130      	cbz	r0, 6dac <boot_write_status+0x20>
        rc = BOOT_EFLASH;
    6d9e:	2401      	movs	r4, #1
    flash_area_close(fap);
    6da0:	9803      	ldr	r0, [sp, #12]
    6da2:	f000 fd20 	bl	77e6 <flash_area_close>
}
    6da6:	4620      	mov	r0, r4
    6da8:	b004      	add	sp, #16
    6daa:	bd70      	pop	{r4, r5, r6, pc}
    off = boot_status_off(fap) +
    6dac:	9803      	ldr	r0, [sp, #12]
    6dae:	f7ff fde4 	bl	697a <boot_status_off>
    6db2:	4605      	mov	r5, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    6db4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    6db6:	4630      	mov	r0, r6
    6db8:	f000 f8ea 	bl	6f90 <boot_status_internal_off>
    off = boot_status_off(fap) +
    6dbc:	182c      	adds	r4, r5, r0
    align = flash_area_align(fap);
    6dbe:	9803      	ldr	r0, [sp, #12]
    6dc0:	f000 fd8f 	bl	78e2 <flash_area_align>
    6dc4:	4605      	mov	r5, r0
    erased_val = flash_area_erased_val(fap);
    6dc6:	9803      	ldr	r0, [sp, #12]
    6dc8:	f000 fd94 	bl	78f4 <flash_area_erased_val>
    6dcc:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    6dce:	2208      	movs	r2, #8
    6dd0:	a801      	add	r0, sp, #4
    6dd2:	f000 ffeb 	bl	7dac <memset>
    buf[0] = bs->state;
    6dd6:	7933      	ldrb	r3, [r6, #4]
    6dd8:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    6ddc:	462b      	mov	r3, r5
    6dde:	aa01      	add	r2, sp, #4
    6de0:	4621      	mov	r1, r4
    6de2:	9803      	ldr	r0, [sp, #12]
    6de4:	f000 fd1f 	bl	7826 <flash_area_write>
    if (rc != 0) {
    6de8:	4604      	mov	r4, r0
    6dea:	2800      	cmp	r0, #0
    6dec:	d0d8      	beq.n	6da0 <boot_write_status+0x14>
        rc = BOOT_EFLASH;
    6dee:	2401      	movs	r4, #1
    6df0:	e7d6      	b.n	6da0 <boot_write_status+0x14>

00006df2 <boot_erase_region>:
{
    6df2:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    6df4:	f000 fd47 	bl	7886 <flash_area_erase>
}
    6df8:	bd08      	pop	{r3, pc}

00006dfa <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    6dfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6dfe:	4606      	mov	r6, r0
    6e00:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    6e02:	2100      	movs	r1, #0
    6e04:	4608      	mov	r0, r1
    6e06:	f7ff fbbf 	bl	6588 <flash_area_id_from_multi_image_slot>
    6e0a:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    6e0c:	2101      	movs	r1, #1
    6e0e:	2000      	movs	r0, #0
    6e10:	f7ff fbba 	bl	6588 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    6e14:	783b      	ldrb	r3, [r7, #0]
    6e16:	429c      	cmp	r4, r3
    6e18:	d023      	beq.n	6e62 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    6e1a:	4298      	cmp	r0, r3
    6e1c:	d123      	bne.n	6e66 <swap_erase_trailer_sectors+0x6c>
        slot = BOOT_SECONDARY_SLOT;
    6e1e:	2301      	movs	r3, #1
    } else {
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    6e20:	4699      	mov	r9, r3
    6e22:	222c      	movs	r2, #44	; 0x2c
    6e24:	fb02 6303 	mla	r3, r2, r3, r6
    6e28:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    6e2a:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6e2c:	6df0      	ldr	r0, [r6, #92]	; 0x5c
    6e2e:	f7ff fd91 	bl	6954 <boot_trailer_sz>
    6e32:	4680      	mov	r8, r0
    total_sz = 0;
    6e34:	2500      	movs	r5, #0
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    6e36:	232c      	movs	r3, #44	; 0x2c
    6e38:	fb03 6309 	mla	r3, r3, r9, r6
    6e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6e3e:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    6e42:	f8d2 a004 	ldr.w	sl, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    6e46:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    6e4a:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    6e4c:	4652      	mov	r2, sl
    6e4e:	1ac9      	subs	r1, r1, r3
    6e50:	4638      	mov	r0, r7
    6e52:	f7ff ffce 	bl	6df2 <boot_erase_region>
        assert(rc == 0);

        sector--;
    6e56:	3c01      	subs	r4, #1
        total_sz += sz;
    6e58:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    6e5a:	45a8      	cmp	r8, r5
    6e5c:	d8eb      	bhi.n	6e36 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    6e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    6e62:	2300      	movs	r3, #0
    6e64:	e7dc      	b.n	6e20 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    6e66:	2001      	movs	r0, #1
    6e68:	e7f9      	b.n	6e5e <swap_erase_trailer_sectors+0x64>

00006e6a <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    6e6a:	b530      	push	{r4, r5, lr}
    6e6c:	b083      	sub	sp, #12
    6e6e:	460c      	mov	r4, r1
    6e70:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6e72:	4669      	mov	r1, sp
    6e74:	2007      	movs	r0, #7
    6e76:	f7ff fe18 	bl	6aaa <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    6e7a:	79e9      	ldrb	r1, [r5, #7]
    6e7c:	2901      	cmp	r1, #1
    6e7e:	d10d      	bne.n	6e9c <swap_status_init+0x32>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    6e80:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6e84:	2b01      	cmp	r3, #1
    6e86:	d00e      	beq.n	6ea6 <swap_status_init+0x3c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    6e88:	68a9      	ldr	r1, [r5, #8]
    6e8a:	4620      	mov	r0, r4
    6e8c:	f7ff fe5d 	bl	6b4a <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    6e90:	4620      	mov	r0, r4
    6e92:	f7f9 fd9b 	bl	9cc <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    6e96:	2000      	movs	r0, #0
    6e98:	b003      	add	sp, #12
    6e9a:	bd30      	pop	{r4, r5, pc}
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    6e9c:	2200      	movs	r2, #0
    6e9e:	4620      	mov	r0, r4
    6ea0:	f7ff fe41 	bl	6b26 <boot_write_swap_info>
    6ea4:	e7ec      	b.n	6e80 <swap_status_init+0x16>
        rc = boot_write_image_ok(fap);
    6ea6:	4620      	mov	r0, r4
    6ea8:	f7ff fe36 	bl	6b18 <boot_write_image_ok>
    6eac:	e7ec      	b.n	6e88 <swap_status_init+0x1e>

00006eae <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    6eae:	b570      	push	{r4, r5, r6, lr}
    6eb0:	b082      	sub	sp, #8
    6eb2:	4605      	mov	r5, r0
    6eb4:	460e      	mov	r6, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    6eb6:	f7fa fb1d 	bl	14f4 <swap_status_source>
    6eba:	4604      	mov	r4, r0
    6ebc:	60f0      	str	r0, [r6, #12]
    switch (bs->source) {
    6ebe:	b388      	cbz	r0, 6f24 <swap_read_status+0x76>
    6ec0:	2802      	cmp	r0, #2
    6ec2:	d12e      	bne.n	6f22 <swap_read_status+0x74>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    6ec4:	a901      	add	r1, sp, #4
    6ec6:	2003      	movs	r0, #3
    6ec8:	f7fb fd2e 	bl	2928 <flash_area_open>
    if (rc != 0) {
    6ecc:	b108      	cbz	r0, 6ed2 <swap_read_status+0x24>
        return BOOT_EFLASH;
    6ece:	2401      	movs	r4, #1
    6ed0:	e028      	b.n	6f24 <swap_read_status+0x76>
    }

    rc = swap_read_status_bytes(fap, state, bs);
    6ed2:	4632      	mov	r2, r6
    6ed4:	4629      	mov	r1, r5
    6ed6:	9801      	ldr	r0, [sp, #4]
    6ed8:	f7fa fa0c 	bl	12f4 <swap_read_status_bytes>
    if (rc == 0) {
    6edc:	4604      	mov	r4, r0
    6ede:	b9e0      	cbnz	r0, 6f1a <swap_read_status+0x6c>
        off = boot_swap_info_off(fap);
    6ee0:	9801      	ldr	r0, [sp, #4]
    6ee2:	f7ff fd53 	bl	698c <boot_swap_info_off>
    6ee6:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    6ee8:	2301      	movs	r3, #1
    6eea:	f10d 0203 	add.w	r2, sp, #3
    6eee:	9801      	ldr	r0, [sp, #4]
    6ef0:	f000 fc7a 	bl	77e8 <flash_area_read>
        if (rc != 0) {
    6ef4:	4604      	mov	r4, r0
    6ef6:	b108      	cbz	r0, 6efc <swap_read_status+0x4e>
            return BOOT_EFLASH;
    6ef8:	2401      	movs	r4, #1
    6efa:	e013      	b.n	6f24 <swap_read_status+0x76>
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    6efc:	2201      	movs	r2, #1
    6efe:	f10d 0103 	add.w	r1, sp, #3
    6f02:	9801      	ldr	r0, [sp, #4]
    6f04:	f7ff fd45 	bl	6992 <bootutil_buffer_is_erased>
    6f08:	b110      	cbz	r0, 6f10 <swap_read_status+0x62>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    6f0a:	2301      	movs	r3, #1
    6f0c:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    6f10:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6f14:	f003 030f 	and.w	r3, r3, #15
    6f18:	71f3      	strb	r3, [r6, #7]
    }

    flash_area_close(fap);
    6f1a:	9801      	ldr	r0, [sp, #4]
    6f1c:	f000 fc63 	bl	77e6 <flash_area_close>

    return rc;
    6f20:	e000      	b.n	6f24 <swap_read_status+0x76>
        return BOOT_EBADARGS;
    6f22:	2407      	movs	r4, #7
}
    6f24:	4620      	mov	r0, r4
    6f26:	b002      	add	sp, #8
    6f28:	bd70      	pop	{r4, r5, r6, pc}

00006f2a <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    6f2a:	b510      	push	{r4, lr}
    6f2c:	b082      	sub	sp, #8
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6f2e:	a901      	add	r1, sp, #4
    6f30:	2003      	movs	r0, #3
    6f32:	f7fb fcf9 	bl	2928 <flash_area_open>
            &fap);
    if (rc != 0) {
    6f36:	b118      	cbz	r0, 6f40 <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    6f38:	2401      	movs	r4, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    6f3a:	4620      	mov	r0, r4
    6f3c:	b002      	add	sp, #8
    6f3e:	bd10      	pop	{r4, pc}
    rc = boot_write_copy_done(fap);
    6f40:	9801      	ldr	r0, [sp, #4]
    6f42:	f7ff fde2 	bl	6b0a <boot_write_copy_done>
    6f46:	4604      	mov	r4, r0
    flash_area_close(fap);
    6f48:	9801      	ldr	r0, [sp, #4]
    6f4a:	f000 fc4c 	bl	77e6 <flash_area_close>
    return rc;
    6f4e:	e7f4      	b.n	6f3a <swap_set_copy_done+0x10>

00006f50 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    6f50:	b510      	push	{r4, lr}
    6f52:	b084      	sub	sp, #16
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6f54:	a903      	add	r1, sp, #12
    6f56:	2003      	movs	r0, #3
    6f58:	f7fb fce6 	bl	2928 <flash_area_open>
            &fap);
    if (rc != 0) {
    6f5c:	b118      	cbz	r0, 6f66 <swap_set_image_ok+0x16>
        return BOOT_EFLASH;
    6f5e:	2401      	movs	r4, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    6f60:	4620      	mov	r0, r4
    6f62:	b004      	add	sp, #16
    6f64:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, &state);
    6f66:	a901      	add	r1, sp, #4
    6f68:	9803      	ldr	r0, [sp, #12]
    6f6a:	f7ff fd29 	bl	69c0 <boot_read_swap_state>
    if (rc != 0) {
    6f6e:	4604      	mov	r4, r0
    6f70:	b960      	cbnz	r0, 6f8c <swap_set_image_ok+0x3c>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    6f72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f76:	2b03      	cmp	r3, #3
    6f78:	d003      	beq.n	6f82 <swap_set_image_ok+0x32>
    flash_area_close(fap);
    6f7a:	9803      	ldr	r0, [sp, #12]
    6f7c:	f000 fc33 	bl	77e6 <flash_area_close>
    return rc;
    6f80:	e7ee      	b.n	6f60 <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    6f82:	9803      	ldr	r0, [sp, #12]
    6f84:	f7ff fdc8 	bl	6b18 <boot_write_image_ok>
    6f88:	4604      	mov	r4, r0
    6f8a:	e7f6      	b.n	6f7a <swap_set_image_ok+0x2a>
        rc = BOOT_EFLASH;
    6f8c:	2401      	movs	r4, #1
    6f8e:	e7f4      	b.n	6f7a <swap_set_image_ok+0x2a>

00006f90 <boot_status_internal_off>:
{
    6f90:	b430      	push	{r4, r5}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    6f92:	7943      	ldrb	r3, [r0, #5]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    6f94:	2b01      	cmp	r3, #1
    6f96:	d010      	beq.n	6fba <boot_status_internal_off+0x2a>
    6f98:	2202      	movs	r2, #2
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    6f9a:	fb01 f402 	mul.w	r4, r1, r2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    6f9e:	2b01      	cmp	r3, #1
    6fa0:	d00d      	beq.n	6fbe <boot_status_internal_off+0x2e>
    6fa2:	01cd      	lsls	r5, r1, #7
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    6fa4:	7903      	ldrb	r3, [r0, #4]
    6fa6:	3b01      	subs	r3, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    6fa8:	6802      	ldr	r2, [r0, #0]
    6faa:	3a01      	subs	r2, #1
    6fac:	fb02 f204 	mul.w	r2, r2, r4
    6fb0:	fb01 2103 	mla	r1, r1, r3, r2
}
    6fb4:	1948      	adds	r0, r1, r5
    6fb6:	bc30      	pop	{r4, r5}
    6fb8:	4770      	bx	lr
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    6fba:	2201      	movs	r2, #1
    6fbc:	e7ed      	b.n	6f9a <boot_status_internal_off+0xa>
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    6fbe:	2500      	movs	r5, #0
    6fc0:	e7f0      	b.n	6fa4 <boot_status_internal_off+0x14>

00006fc2 <nrf_cleanup_clock>:
    p_reg->INTENCLR = mask;
    6fc2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6fc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6fca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6fce:	4770      	bx	lr

00006fd0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6fd0:	4602      	mov	r2, r0
    6fd2:	b158      	cbz	r0, 6fec <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6fd4:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6fd6:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6fda:	2b01      	cmp	r3, #1
    6fdc:	d003      	beq.n	6fe6 <sys_notify_validate+0x16>
    6fde:	2b03      	cmp	r3, #3
    6fe0:	d107      	bne.n	6ff2 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6fe2:	6803      	ldr	r3, [r0, #0]
    6fe4:	b143      	cbz	r3, 6ff8 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6fe6:	2000      	movs	r0, #0
    6fe8:	6090      	str	r0, [r2, #8]
    6fea:	4770      	bx	lr
		return -EINVAL;
    6fec:	f06f 0015 	mvn.w	r0, #21
    6ff0:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    6ff2:	f06f 0015 	mvn.w	r0, #21
    6ff6:	4770      	bx	lr
			rv = -EINVAL;
    6ff8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6ffc:	4770      	bx	lr

00006ffe <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    6ffe:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7000:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7002:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    7006:	6081      	str	r1, [r0, #8]
	switch (method) {
    7008:	2a03      	cmp	r2, #3
    700a:	d103      	bne.n	7014 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    700c:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    700e:	2200      	movs	r2, #0
    7010:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7012:	4770      	bx	lr
	sys_notify_generic_callback rv = 0;
    7014:	2000      	movs	r0, #0
    7016:	e7fa      	b.n	700e <sys_notify_finalize+0x10>

00007018 <arch_printk_char_out>:
}
    7018:	2000      	movs	r0, #0
    701a:	4770      	bx	lr

0000701c <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    701c:	b40f      	push	{r0, r1, r2, r3}
    701e:	b500      	push	{lr}
    7020:	b083      	sub	sp, #12
    7022:	a904      	add	r1, sp, #16
    7024:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7028:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
    702a:	f000 faec 	bl	7606 <log_printk>
	} else {
		vprintk(fmt, ap);
	}
	va_end(ap);
}
    702e:	b003      	add	sp, #12
    7030:	f85d eb04 	ldr.w	lr, [sp], #4
    7034:	b004      	add	sp, #16
    7036:	4770      	bx	lr

00007038 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    7038:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    703c:	8b01      	ldrh	r1, [r0, #24]
    703e:	f021 0107 	bic.w	r1, r1, #7
    7042:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    7044:	8301      	strh	r1, [r0, #24]
}
    7046:	4770      	bx	lr

00007048 <notify_monitors>:
{
    7048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    704c:	4606      	mov	r6, r0
    704e:	460f      	mov	r7, r1
    7050:	4690      	mov	r8, r2
	return list->head;
    7052:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    7054:	b119      	cbz	r1, 705e <notify_monitors+0x16>
    7056:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    7058:	b131      	cbz	r1, 7068 <notify_monitors+0x20>
	return node->next;
    705a:	680c      	ldr	r4, [r1, #0]
    705c:	e004      	b.n	7068 <notify_monitors+0x20>
    705e:	460c      	mov	r4, r1
    7060:	e002      	b.n	7068 <notify_monitors+0x20>
    7062:	4623      	mov	r3, r4
    7064:	4621      	mov	r1, r4
    7066:	461c      	mov	r4, r3
    7068:	b159      	cbz	r1, 7082 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    706a:	684d      	ldr	r5, [r1, #4]
    706c:	4643      	mov	r3, r8
    706e:	463a      	mov	r2, r7
    7070:	4630      	mov	r0, r6
    7072:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    7074:	2c00      	cmp	r4, #0
    7076:	d0f4      	beq.n	7062 <notify_monitors+0x1a>
    7078:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    707a:	2c00      	cmp	r4, #0
    707c:	d0f2      	beq.n	7064 <notify_monitors+0x1c>
	return node->next;
    707e:	6823      	ldr	r3, [r4, #0]
    7080:	e7f0      	b.n	7064 <notify_monitors+0x1c>
}
    7082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007086 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7086:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    7088:	f013 0307 	ands.w	r3, r3, #7
    708c:	d103      	bne.n	7096 <process_recheck+0x10>
	return list->head;
    708e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    7090:	b10a      	cbz	r2, 7096 <process_recheck+0x10>
		evt = EVT_START;
    7092:	2003      	movs	r0, #3
    7094:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7096:	2b02      	cmp	r3, #2
    7098:	d003      	beq.n	70a2 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    709a:	2b01      	cmp	r3, #1
    709c:	d006      	beq.n	70ac <process_recheck+0x26>
	int evt = EVT_NOP;
    709e:	2000      	movs	r0, #0
    70a0:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    70a2:	8b42      	ldrh	r2, [r0, #26]
    70a4:	2a00      	cmp	r2, #0
    70a6:	d1f8      	bne.n	709a <process_recheck+0x14>
		evt = EVT_STOP;
    70a8:	2004      	movs	r0, #4
    70aa:	4770      	bx	lr
    70ac:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    70ae:	b10b      	cbz	r3, 70b4 <process_recheck+0x2e>
		evt = EVT_RESET;
    70b0:	2005      	movs	r0, #5
}
    70b2:	4770      	bx	lr
	int evt = EVT_NOP;
    70b4:	2000      	movs	r0, #0
    70b6:	4770      	bx	lr

000070b8 <process_complete>:
{
    70b8:	b538      	push	{r3, r4, r5, lr}
    70ba:	4604      	mov	r4, r0
    70bc:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    70be:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    70c0:	2a00      	cmp	r2, #0
    70c2:	db07      	blt.n	70d4 <process_complete+0x1c>
    70c4:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    70c8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    70ca:	2a01      	cmp	r2, #1
    70cc:	d90e      	bls.n	70ec <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    70ce:	2b04      	cmp	r3, #4
    70d0:	d032      	beq.n	7138 <process_complete+0x80>
}
    70d2:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    70d4:	e9d0 0100 	ldrd	r0, r1, [r0]
    70d8:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    70dc:	2300      	movs	r3, #0
    70de:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    70e0:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    70e2:	2101      	movs	r1, #1
    70e4:	4620      	mov	r0, r4
    70e6:	f7ff ffa7 	bl	7038 <set_state>
    70ea:	e7f2      	b.n	70d2 <process_complete+0x1a>
		*clients = mgr->clients;
    70ec:	e9d0 0100 	ldrd	r0, r1, [r0]
    70f0:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    70f4:	2200      	movs	r2, #0
    70f6:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    70f8:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    70fa:	2b06      	cmp	r3, #6
    70fc:	d117      	bne.n	712e <process_complete+0x76>
	return list->head;
    70fe:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    7100:	b13b      	cbz	r3, 7112 <process_complete+0x5a>
				mgr->refs += 1U;
    7102:	8b62      	ldrh	r2, [r4, #26]
    7104:	3201      	adds	r2, #1
    7106:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    7108:	2b00      	cmp	r3, #0
    710a:	d0f9      	beq.n	7100 <process_complete+0x48>
	return node->next;
    710c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    710e:	2b00      	cmp	r3, #0
    7110:	d1f6      	bne.n	7100 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    7112:	2102      	movs	r1, #2
    7114:	4620      	mov	r0, r4
    7116:	f7ff ff8f 	bl	7038 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    711a:	4620      	mov	r0, r4
    711c:	f7ff ffb3 	bl	7086 <process_recheck>
    7120:	2800      	cmp	r0, #0
    7122:	d0d6      	beq.n	70d2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    7124:	8b23      	ldrh	r3, [r4, #24]
    7126:	f043 0320 	orr.w	r3, r3, #32
    712a:	8323      	strh	r3, [r4, #24]
    712c:	e7d1      	b.n	70d2 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    712e:	2100      	movs	r1, #0
    7130:	4620      	mov	r0, r4
    7132:	f7ff ff81 	bl	7038 <set_state>
    7136:	e7f0      	b.n	711a <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    7138:	2100      	movs	r1, #0
    713a:	f7ff ff7d 	bl	7038 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    713e:	4620      	mov	r0, r4
    7140:	f7ff ffa1 	bl	7086 <process_recheck>
    7144:	2800      	cmp	r0, #0
    7146:	d0c4      	beq.n	70d2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    7148:	8b23      	ldrh	r3, [r4, #24]
    714a:	f043 0320 	orr.w	r3, r3, #32
    714e:	8323      	strh	r3, [r4, #24]
}
    7150:	e7bf      	b.n	70d2 <process_complete+0x1a>

00007152 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    7152:	b158      	cbz	r0, 716c <validate_args+0x1a>
{
    7154:	b510      	push	{r4, lr}
    7156:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7158:	b159      	cbz	r1, 7172 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    715a:	1d08      	adds	r0, r1, #4
    715c:	f7ff ff38 	bl	6fd0 <sys_notify_validate>
	if ((rv == 0)
    7160:	b918      	cbnz	r0, 716a <validate_args+0x18>
	    && ((cli->notify.flags
    7162:	68a3      	ldr	r3, [r4, #8]
    7164:	f033 0303 	bics.w	r3, r3, #3
    7168:	d106      	bne.n	7178 <validate_args+0x26>
}
    716a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    716c:	f06f 0015 	mvn.w	r0, #21
}
    7170:	4770      	bx	lr
		return -EINVAL;
    7172:	f06f 0015 	mvn.w	r0, #21
    7176:	e7f8      	b.n	716a <validate_args+0x18>
		rv = -EINVAL;
    7178:	f06f 0015 	mvn.w	r0, #21
    717c:	e7f5      	b.n	716a <validate_args+0x18>

0000717e <notify_one>:
{
    717e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7182:	4607      	mov	r7, r0
    7184:	460c      	mov	r4, r1
    7186:	4616      	mov	r6, r2
    7188:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    718a:	4619      	mov	r1, r3
    718c:	1d20      	adds	r0, r4, #4
    718e:	f7ff ff36 	bl	6ffe <sys_notify_finalize>
	if (cb) {
    7192:	b128      	cbz	r0, 71a0 <notify_one+0x22>
    7194:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    7196:	462b      	mov	r3, r5
    7198:	4632      	mov	r2, r6
    719a:	4621      	mov	r1, r4
    719c:	4638      	mov	r0, r7
    719e:	47c0      	blx	r8
}
    71a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000071a4 <notify_all>:
{
    71a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    71a8:	4681      	mov	r9, r0
    71aa:	460c      	mov	r4, r1
    71ac:	4690      	mov	r8, r2
    71ae:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    71b0:	e005      	b.n	71be <notify_all+0x1a>
	list->tail = node;
    71b2:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    71b4:	463b      	mov	r3, r7
    71b6:	4642      	mov	r2, r8
    71b8:	4648      	mov	r0, r9
    71ba:	f7ff ffe0 	bl	717e <notify_one>
	return list->head;
    71be:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    71c0:	b129      	cbz	r1, 71ce <notify_all+0x2a>
	return node->next;
    71c2:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    71c4:	6025      	str	r5, [r4, #0]
	return list->tail;
    71c6:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    71c8:	428e      	cmp	r6, r1
    71ca:	d1f3      	bne.n	71b4 <notify_all+0x10>
    71cc:	e7f1      	b.n	71b2 <notify_all+0xe>
}
    71ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000071d2 <transition_complete>:
{
    71d2:	b510      	push	{r4, lr}
    71d4:	f04f 0420 	mov.w	r4, #32
    71d8:	f3ef 8211 	mrs	r2, BASEPRI
    71dc:	f384 8811 	msr	BASEPRI, r4
    71e0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    71e4:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    71e6:	2101      	movs	r1, #1
    71e8:	f7fa fb3a 	bl	1860 <process_event>
}
    71ec:	bd10      	pop	{r4, pc}

000071ee <onoff_manager_init>:
	if ((mgr == NULL)
    71ee:	4603      	mov	r3, r0
    71f0:	b168      	cbz	r0, 720e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    71f2:	b179      	cbz	r1, 7214 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    71f4:	680a      	ldr	r2, [r1, #0]
    71f6:	b182      	cbz	r2, 721a <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    71f8:	684a      	ldr	r2, [r1, #4]
    71fa:	b18a      	cbz	r2, 7220 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    71fc:	2000      	movs	r0, #0
    71fe:	6018      	str	r0, [r3, #0]
    7200:	6058      	str	r0, [r3, #4]
    7202:	6098      	str	r0, [r3, #8]
    7204:	60d8      	str	r0, [r3, #12]
    7206:	6158      	str	r0, [r3, #20]
    7208:	6198      	str	r0, [r3, #24]
    720a:	6119      	str	r1, [r3, #16]
	return 0;
    720c:	4770      	bx	lr
		return -EINVAL;
    720e:	f06f 0015 	mvn.w	r0, #21
    7212:	4770      	bx	lr
    7214:	f06f 0015 	mvn.w	r0, #21
    7218:	4770      	bx	lr
    721a:	f06f 0015 	mvn.w	r0, #21
    721e:	4770      	bx	lr
    7220:	f06f 0015 	mvn.w	r0, #21
}
    7224:	4770      	bx	lr

00007226 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    7226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7228:	4604      	mov	r4, r0
    722a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    722c:	f7ff ff91 	bl	7152 <validate_args>

	if (rv < 0) {
    7230:	1e06      	subs	r6, r0, #0
    7232:	db37      	blt.n	72a4 <onoff_request+0x7e>
    7234:	f04f 0320 	mov.w	r3, #32
    7238:	f3ef 8211 	mrs	r2, BASEPRI
    723c:	f383 8811 	msr	BASEPRI, r3
    7240:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7244:	8b25      	ldrh	r5, [r4, #24]
    7246:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    724a:	8b63      	ldrh	r3, [r4, #26]
    724c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7250:	428b      	cmp	r3, r1
    7252:	d02f      	beq.n	72b4 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    7254:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    7256:	2d02      	cmp	r5, #2
    7258:	d00c      	beq.n	7274 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    725a:	b18d      	cbz	r5, 7280 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    725c:	2d04      	cmp	r5, #4
    725e:	d00f      	beq.n	7280 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    7260:	2d06      	cmp	r5, #6
    7262:	d00d      	beq.n	7280 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    7264:	2d05      	cmp	r5, #5
    7266:	d01f      	beq.n	72a8 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    7268:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    726c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    726e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    7270:	4608      	mov	r0, r1
    7272:	e00a      	b.n	728a <onoff_request+0x64>
		mgr->refs += 1U;
    7274:	3301      	adds	r3, #1
    7276:	8363      	strh	r3, [r4, #26]
		notify = true;
    7278:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    727a:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    727c:	4618      	mov	r0, r3
    727e:	e004      	b.n	728a <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    7280:	fab5 f385 	clz	r3, r5
    7284:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    7286:	2100      	movs	r1, #0
		add_client = true;
    7288:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    728a:	b128      	cbz	r0, 7298 <onoff_request+0x72>
	parent->next = child;
    728c:	2000      	movs	r0, #0
    728e:	6038      	str	r0, [r7, #0]
	return list->tail;
    7290:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    7292:	b1a8      	cbz	r0, 72c0 <onoff_request+0x9a>
	parent->next = child;
    7294:	6007      	str	r7, [r0, #0]
	list->tail = node;
    7296:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    7298:	b9ab      	cbnz	r3, 72c6 <onoff_request+0xa0>
	__asm__ volatile(
    729a:	f382 8811 	msr	BASEPRI, r2
    729e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    72a2:	b9a9      	cbnz	r1, 72d0 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    72a4:	4630      	mov	r0, r6
    72a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    72a8:	f06f 0622 	mvn.w	r6, #34	; 0x22
	bool notify = false;            /* do client notification */
    72ac:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    72ae:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    72b0:	4608      	mov	r0, r1
    72b2:	e7ea      	b.n	728a <onoff_request+0x64>
		rv = -EAGAIN;
    72b4:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    72b8:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    72ba:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    72bc:	4608      	mov	r0, r1
    72be:	e7e4      	b.n	728a <onoff_request+0x64>
    72c0:	6067      	str	r7, [r4, #4]
	list->head = node;
    72c2:	6027      	str	r7, [r4, #0]
}
    72c4:	e7e8      	b.n	7298 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    72c6:	2102      	movs	r1, #2
    72c8:	4620      	mov	r0, r4
    72ca:	f7fa fac9 	bl	1860 <process_event>
    72ce:	e7e9      	b.n	72a4 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    72d0:	2300      	movs	r3, #0
    72d2:	462a      	mov	r2, r5
    72d4:	4639      	mov	r1, r7
    72d6:	4620      	mov	r0, r4
    72d8:	f7ff ff51 	bl	717e <notify_one>
    72dc:	e7e2      	b.n	72a4 <onoff_request+0x7e>

000072de <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    72de:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    72e0:	1d13      	adds	r3, r2, #4
    72e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    72e6:	b9d3      	cbnz	r3, 731e <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
    72e8:	2301      	movs	r3, #1
    72ea:	fa03 f402 	lsl.w	r4, r3, r2
    72ee:	68c3      	ldr	r3, [r0, #12]
    72f0:	4323      	orrs	r3, r4
    72f2:	60c3      	str	r3, [r0, #12]
		b->next = c;
    72f4:	3204      	adds	r2, #4
    72f6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    72fa:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->len);
    72fe:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
    7300:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    7304:	d307      	bcc.n	7316 <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    7306:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->len);
    7308:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    730a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    730e:	d304      	bcc.n	731a <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    7310:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
    7312:	bc70      	pop	{r4, r5, r6}
    7314:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    7316:	8099      	strh	r1, [r3, #4]
    7318:	e7f6      	b.n	7308 <free_list_add_bidx+0x2a>
    731a:	80d9      	strh	r1, [r3, #6]
    731c:	e7f9      	b.n	7312 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
    731e:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->len);
    7322:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    7324:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    7328:	d318      	bcc.n	735c <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
    732a:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
    732c:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
    7330:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    7334:	d314      	bcc.n	7360 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
    7336:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->len);
    7338:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    733a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    733e:	d311      	bcc.n	7364 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
    7340:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
    7342:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->len);
    7346:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    7348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    734c:	d30c      	bcc.n	7368 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
    734e:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->len);
    7350:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    7352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    7356:	d309      	bcc.n	736c <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    7358:	60a1      	str	r1, [r4, #8]
    735a:	e7da      	b.n	7312 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
    735c:	88a2      	ldrh	r2, [r4, #4]
    735e:	e7e5      	b.n	732c <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
    7360:	80aa      	strh	r2, [r5, #4]
    7362:	e7e9      	b.n	7338 <free_list_add_bidx+0x5a>
    7364:	80eb      	strh	r3, [r5, #6]
    7366:	e7ec      	b.n	7342 <free_list_add_bidx+0x64>
    7368:	80d1      	strh	r1, [r2, #6]
    736a:	e7f1      	b.n	7350 <free_list_add_bidx+0x72>
    736c:	80a1      	strh	r1, [r4, #4]
    736e:	e7d0      	b.n	7312 <free_list_add_bidx+0x34>

00007370 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    7370:	b508      	push	{r3, lr}
	return big_heap_chunks(h->len);
    7372:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
    7374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    7378:	d307      	bcc.n	738a <free_list_add+0x1a>
	void *cmem = &buf[c];
    737a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    737e:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    7380:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    7382:	2a01      	cmp	r2, #1
    7384:	d002      	beq.n	738c <free_list_add+0x1c>
    7386:	2200      	movs	r2, #0
    7388:	e000      	b.n	738c <free_list_add+0x1c>
    738a:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    738c:	b9a2      	cbnz	r2, 73b8 <free_list_add+0x48>
	void *cmem = &buf[c];
    738e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    7392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    7396:	d310      	bcc.n	73ba <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    7398:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    739a:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    739c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    73a0:	d30d      	bcc.n	73be <free_list_add+0x4e>
    73a2:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    73a4:	3308      	adds	r3, #8
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    73a6:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    73aa:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    73ac:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
    73b0:	f1c2 021f 	rsb	r2, r2, #31
    73b4:	f7ff ff93 	bl	72de <free_list_add_bidx>
	}
}
    73b8:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    73ba:	8852      	ldrh	r2, [r2, #2]
    73bc:	e7ed      	b.n	739a <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    73be:	2304      	movs	r3, #4
    73c0:	e7f0      	b.n	73a4 <free_list_add+0x34>

000073c2 <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    73c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73c4:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
    73c6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    73ca:	d32e      	bcc.n	742a <sys_heap_init+0x68>
    73cc:	2508      	movs	r5, #8
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    73ce:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    73d0:	1dc8      	adds	r0, r1, #7
    73d2:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    73d6:	440d      	add	r5, r1
    73d8:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    73dc:	1a2d      	subs	r5, r5, r0
    73de:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
    73e0:	4606      	mov	r6, r0
	heap->heap = h;
    73e2:	6018      	str	r0, [r3, #0]
	h->chunk0_hdr_area = 0;
    73e4:	2200      	movs	r2, #0
    73e6:	2300      	movs	r3, #0
    73e8:	e9c0 2300 	strd	r2, r3, [r0]
	h->len = buf_sz;
    73ec:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
    73ee:	2300      	movs	r3, #0
    73f0:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
    73f2:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    73f6:	d31a      	bcc.n	742e <sys_heap_init+0x6c>
    73f8:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    73fa:	3308      	adds	r3, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    73fc:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
    7400:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    7402:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    7406:	f1c3 0c20 	rsb	ip, r3, #32
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    740a:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
    740e:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    7410:	f103 0e07 	add.w	lr, r3, #7
    7414:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    7418:	2300      	movs	r3, #0
    741a:	4563      	cmp	r3, ip
    741c:	da09      	bge.n	7432 <sys_heap_init+0x70>
		h->buckets[i].next = 0;
    741e:	1d1a      	adds	r2, r3, #4
    7420:	2400      	movs	r4, #0
    7422:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    7426:	3301      	adds	r3, #1
    7428:	e7f7      	b.n	741a <sys_heap_init+0x58>
	return big_heap_bytes(size) ? 8 : 4;
    742a:	2504      	movs	r5, #4
    742c:	e7cf      	b.n	73ce <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
    742e:	2304      	movs	r3, #4
    7430:	e7e3      	b.n	73fa <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    7432:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
    7434:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    7438:	d32e      	bcc.n	7498 <sys_heap_init+0xd6>
		((uint32_t *)cmem)[f] = val;
    743a:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
    743c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    7440:	d32c      	bcc.n	749c <sys_heap_init+0xda>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    7442:	6843      	ldr	r3, [r0, #4]
    7444:	f043 0301 	orr.w	r3, r3, #1
    7448:	6043      	str	r3, [r0, #4]
	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    744a:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    744c:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
    744e:	f02e 0307 	bic.w	r3, lr, #7
    7452:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
    7454:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    7458:	d325      	bcc.n	74a6 <sys_heap_init+0xe4>
		((uint32_t *)cmem)[f] = val;
    745a:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->len);
    745c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    745e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    7462:	d322      	bcc.n	74aa <sys_heap_init+0xe8>
		((uint32_t *)cmem)[f] = val;
    7464:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
    7466:	f025 0307 	bic.w	r3, r5, #7
    746a:	4405      	add	r5, r0
	return big_heap_chunks(h->len);
    746c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    746e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    7472:	d31c      	bcc.n	74ae <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    7474:	2400      	movs	r4, #0
    7476:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->len);
    7478:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    747a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    747e:	d319      	bcc.n	74b4 <sys_heap_init+0xf2>
		((uint32_t *)cmem)[f] = val;
    7480:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->len);
    7482:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    7484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    7488:	d316      	bcc.n	74b8 <sys_heap_init+0xf6>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    748a:	686b      	ldr	r3, [r5, #4]
    748c:	f043 0301 	orr.w	r3, r3, #1
    7490:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);

	free_list_add(h, chunk0_size);
    7492:	f7ff ff6d 	bl	7370 <free_list_add>
}
    7496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    7498:	8043      	strh	r3, [r0, #2]
    749a:	e7cf      	b.n	743c <sys_heap_init+0x7a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    749c:	8843      	ldrh	r3, [r0, #2]
    749e:	f043 0301 	orr.w	r3, r3, #1
    74a2:	8043      	strh	r3, [r0, #2]
    74a4:	e7d1      	b.n	744a <sys_heap_init+0x88>
		((uint16_t *)cmem)[f] = val;
    74a6:	8066      	strh	r6, [r4, #2]
    74a8:	e7d8      	b.n	745c <sys_heap_init+0x9a>
    74aa:	52c1      	strh	r1, [r0, r3]
    74ac:	e7db      	b.n	7466 <sys_heap_init+0xa4>
    74ae:	2400      	movs	r4, #0
    74b0:	806c      	strh	r4, [r5, #2]
    74b2:	e7e1      	b.n	7478 <sys_heap_init+0xb6>
    74b4:	52c2      	strh	r2, [r0, r3]
    74b6:	e7e4      	b.n	7482 <sys_heap_init+0xc0>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    74b8:	886b      	ldrh	r3, [r5, #2]
    74ba:	f043 0301 	orr.w	r3, r3, #1
    74be:	806b      	strh	r3, [r5, #2]
    74c0:	e7e7      	b.n	7492 <sys_heap_init+0xd0>

000074c2 <extract_decimal>:
{
    74c2:	b410      	push	{r4}
    74c4:	4604      	mov	r4, r0
	const char *sp = *str;
    74c6:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    74c8:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    74ca:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    74cc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    74d0:	2909      	cmp	r1, #9
    74d2:	d806      	bhi.n	74e2 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    74d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    74d8:	3201      	adds	r2, #1
    74da:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    74de:	3830      	subs	r0, #48	; 0x30
    74e0:	e7f3      	b.n	74ca <extract_decimal+0x8>
	*str = sp;
    74e2:	6022      	str	r2, [r4, #0]
}
    74e4:	bc10      	pop	{r4}
    74e6:	4770      	bx	lr

000074e8 <encode_uint>:
{
    74e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74ec:	b083      	sub	sp, #12
    74ee:	4604      	mov	r4, r0
    74f0:	460d      	mov	r5, r1
    74f2:	9201      	str	r2, [sp, #4]
    74f4:	469a      	mov	sl, r3
    74f6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    74fa:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    74fc:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    7500:	2b6f      	cmp	r3, #111	; 0x6f
    7502:	d00f      	beq.n	7524 <encode_uint+0x3c>
    7504:	d906      	bls.n	7514 <encode_uint+0x2c>
    7506:	2b70      	cmp	r3, #112	; 0x70
    7508:	d00f      	beq.n	752a <encode_uint+0x42>
    750a:	2b78      	cmp	r3, #120	; 0x78
    750c:	d110      	bne.n	7530 <encode_uint+0x48>
		return 16;
    750e:	f04f 0910 	mov.w	r9, #16
    7512:	e026      	b.n	7562 <encode_uint+0x7a>
	switch (specifier) {
    7514:	2b58      	cmp	r3, #88	; 0x58
    7516:	d002      	beq.n	751e <encode_uint+0x36>
    7518:	f04f 090a 	mov.w	r9, #10
    751c:	e021      	b.n	7562 <encode_uint+0x7a>
		return 16;
    751e:	f04f 0910 	mov.w	r9, #16
    7522:	e01e      	b.n	7562 <encode_uint+0x7a>
		return 8;
    7524:	f04f 0908 	mov.w	r9, #8
    7528:	e01b      	b.n	7562 <encode_uint+0x7a>
		return 16;
    752a:	f04f 0910 	mov.w	r9, #16
    752e:	e018      	b.n	7562 <encode_uint+0x7a>
	switch (specifier) {
    7530:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    7534:	e015      	b.n	7562 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7536:	f1bb 0f19 	cmp.w	fp, #25
    753a:	d820      	bhi.n	757e <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    753c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    753e:	3237      	adds	r2, #55	; 0x37
    7540:	b2d2      	uxtb	r2, r2
    7542:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    7546:	4632      	mov	r2, r6
    7548:	463b      	mov	r3, r7
    754a:	4620      	mov	r0, r4
    754c:	4629      	mov	r1, r5
    754e:	f7f8 fdf9 	bl	144 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    7552:	42bd      	cmp	r5, r7
    7554:	bf08      	it	eq
    7556:	42b4      	cmpeq	r4, r6
    7558:	d315      	bcc.n	7586 <encode_uint+0x9e>
    755a:	45d0      	cmp	r8, sl
    755c:	d913      	bls.n	7586 <encode_uint+0x9e>
		value /= radix;
    755e:	4604      	mov	r4, r0
    7560:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    7562:	464e      	mov	r6, r9
    7564:	2700      	movs	r7, #0
    7566:	464a      	mov	r2, r9
    7568:	463b      	mov	r3, r7
    756a:	4620      	mov	r0, r4
    756c:	4629      	mov	r1, r5
    756e:	f7f8 fde9 	bl	144 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7572:	2a09      	cmp	r2, #9
    7574:	d8df      	bhi.n	7536 <encode_uint+0x4e>
    7576:	b2d2      	uxtb	r2, r2
    7578:	3230      	adds	r2, #48	; 0x30
    757a:	b2d2      	uxtb	r2, r2
    757c:	e7e1      	b.n	7542 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    757e:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7580:	3257      	adds	r2, #87	; 0x57
    7582:	b2d2      	uxtb	r2, r2
    7584:	e7dd      	b.n	7542 <encode_uint+0x5a>
	if (conv->flag_hash) {
    7586:	9b01      	ldr	r3, [sp, #4]
    7588:	781b      	ldrb	r3, [r3, #0]
    758a:	f013 0f20 	tst.w	r3, #32
    758e:	d005      	beq.n	759c <encode_uint+0xb4>
		if (radix == 8) {
    7590:	f1b9 0f08 	cmp.w	r9, #8
    7594:	d006      	beq.n	75a4 <encode_uint+0xbc>
		} else if (radix == 16) {
    7596:	f1b9 0f10 	cmp.w	r9, #16
    759a:	d009      	beq.n	75b0 <encode_uint+0xc8>
}
    759c:	4640      	mov	r0, r8
    759e:	b003      	add	sp, #12
    75a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    75a4:	9a01      	ldr	r2, [sp, #4]
    75a6:	7893      	ldrb	r3, [r2, #2]
    75a8:	f043 0308 	orr.w	r3, r3, #8
    75ac:	7093      	strb	r3, [r2, #2]
    75ae:	e7f5      	b.n	759c <encode_uint+0xb4>
			conv->altform_0c = true;
    75b0:	9a01      	ldr	r2, [sp, #4]
    75b2:	7893      	ldrb	r3, [r2, #2]
    75b4:	f043 0310 	orr.w	r3, r3, #16
    75b8:	7093      	strb	r3, [r2, #2]
    75ba:	e7ef      	b.n	759c <encode_uint+0xb4>

000075bc <outs>:
{
    75bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75c0:	4607      	mov	r7, r0
    75c2:	460e      	mov	r6, r1
    75c4:	4614      	mov	r4, r2
    75c6:	4698      	mov	r8, r3
	size_t count = 0;
    75c8:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    75ca:	e006      	b.n	75da <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    75cc:	4631      	mov	r1, r6
    75ce:	f814 0b01 	ldrb.w	r0, [r4], #1
    75d2:	47b8      	blx	r7
		if (rc < 0) {
    75d4:	2800      	cmp	r0, #0
    75d6:	db09      	blt.n	75ec <outs+0x30>
		++count;
    75d8:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    75da:	4544      	cmp	r4, r8
    75dc:	d3f6      	bcc.n	75cc <outs+0x10>
    75de:	f1b8 0f00 	cmp.w	r8, #0
    75e2:	d102      	bne.n	75ea <outs+0x2e>
    75e4:	7823      	ldrb	r3, [r4, #0]
    75e6:	2b00      	cmp	r3, #0
    75e8:	d1f0      	bne.n	75cc <outs+0x10>
	return (int)count;
    75ea:	4628      	mov	r0, r5
}
    75ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000075f0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    75f0:	4770      	bx	lr

000075f2 <z_platform_init>:

void z_platform_init(void)
{
    75f2:	b508      	push	{r3, lr}
	SystemInit();
    75f4:	f7fc ff78 	bl	44e8 <SystemInit>
}
    75f8:	bd08      	pop	{r3, pc}

000075fa <dummy_timestamp>:
}
    75fa:	2000      	movs	r0, #0
    75fc:	4770      	bx	lr

000075fe <k_cycle_get_32_wrapper>:
{
    75fe:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    7600:	f7fb fc2e 	bl	2e60 <z_timer_cycle_get_32>
}
    7604:	bd08      	pop	{r3, pc}

00007606 <log_printk>:
{
    7606:	b508      	push	{r3, lr}
    7608:	460a      	mov	r2, r1
		} src_level_union = {
    760a:	2300      	movs	r3, #0
			log_generic(src_level_union.structure, fmt, ap,
    760c:	4601      	mov	r1, r0
    760e:	4618      	mov	r0, r3
    7610:	f7fa fe9a 	bl	2348 <log_generic>
}
    7614:	bd08      	pop	{r3, pc}

00007616 <log_string_sync>:
{
    7616:	b40e      	push	{r1, r2, r3}
    7618:	b500      	push	{lr}
    761a:	b082      	sub	sp, #8
    761c:	aa03      	add	r2, sp, #12
    761e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
    7622:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
    7624:	2300      	movs	r3, #0
    7626:	f7fa fe8f 	bl	2348 <log_generic>
}
    762a:	b002      	add	sp, #8
    762c:	f85d eb04 	ldr.w	lr, [sp], #4
    7630:	b003      	add	sp, #12
    7632:	4770      	bx	lr

00007634 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    7634:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    7636:	f7fa fef5 	bl	2424 <log_init>
	}

	return 0;
}
    763a:	2000      	movs	r0, #0
    763c:	bd08      	pop	{r3, pc}

0000763e <out_func>:
{
    763e:	b500      	push	{lr}
    7640:	b083      	sub	sp, #12
    7642:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
    7644:	680b      	ldr	r3, [r1, #0]
    7646:	684a      	ldr	r2, [r1, #4]
    7648:	6852      	ldr	r2, [r2, #4]
    764a:	2101      	movs	r1, #1
    764c:	a801      	add	r0, sp, #4
    764e:	4798      	blx	r3
}
    7650:	2000      	movs	r0, #0
    7652:	b003      	add	sp, #12
    7654:	f85d fb04 	ldr.w	pc, [sp], #4

00007658 <buffer_write>:
{
    7658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    765a:	4607      	mov	r7, r0
    765c:	460d      	mov	r5, r1
    765e:	4614      	mov	r4, r2
    7660:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    7662:	4632      	mov	r2, r6
    7664:	4621      	mov	r1, r4
    7666:	4628      	mov	r0, r5
    7668:	47b8      	blx	r7
		buf += processed;
    766a:	4405      	add	r5, r0
	} while (len != 0);
    766c:	1a24      	subs	r4, r4, r0
    766e:	d1f8      	bne.n	7662 <buffer_write+0xa>
}
    7670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007672 <ends_with_newline>:
	char c = '\0';
    7672:	2200      	movs	r2, #0
	while (*fmt != '\0') {
    7674:	7803      	ldrb	r3, [r0, #0]
    7676:	b113      	cbz	r3, 767e <ends_with_newline+0xc>
		fmt++;
    7678:	3001      	adds	r0, #1
		c = *fmt;
    767a:	461a      	mov	r2, r3
    767c:	e7fa      	b.n	7674 <ends_with_newline+0x2>
}
    767e:	2a0a      	cmp	r2, #10
    7680:	bf14      	ite	ne
    7682:	2000      	movne	r0, #0
    7684:	2001      	moveq	r0, #1
    7686:	4770      	bx	lr

00007688 <color_prefix>:
{
    7688:	b508      	push	{r3, lr}
    768a:	4613      	mov	r3, r2
	color_print(log_output, color, true, level);
    768c:	2201      	movs	r2, #1
    768e:	f7fa ff77 	bl	2580 <color_print>
}
    7692:	bd08      	pop	{r3, pc}

00007694 <color_postfix>:
{
    7694:	b508      	push	{r3, lr}
    7696:	4613      	mov	r3, r2
	color_print(log_output, color, false, level);
    7698:	2200      	movs	r2, #0
    769a:	f7fa ff71 	bl	2580 <color_print>
}
    769e:	bd08      	pop	{r3, pc}

000076a0 <postfix_print>:
{
    76a0:	b538      	push	{r3, r4, r5, lr}
    76a2:	4605      	mov	r5, r0
    76a4:	460c      	mov	r4, r1
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
    76a6:	f001 0101 	and.w	r1, r1, #1
    76aa:	f7ff fff3 	bl	7694 <color_postfix>
	newline_print(log_output, flags);
    76ae:	4621      	mov	r1, r4
    76b0:	4628      	mov	r0, r5
    76b2:	f7fa ff7b 	bl	25ac <newline_print>
}
    76b6:	bd38      	pop	{r3, r4, r5, pc}

000076b8 <prefix_print>:
{
    76b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    76bc:	b083      	sub	sp, #12
    76be:	4604      	mov	r4, r0
    76c0:	4615      	mov	r5, r2
    76c2:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    76c6:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    76ca:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
    76ce:	f011 0702 	ands.w	r7, r1, #2
    76d2:	d113      	bne.n	76fc <prefix_print+0x44>
		color_prefix(log_output, colors_on, level);
    76d4:	4632      	mov	r2, r6
    76d6:	4649      	mov	r1, r9
    76d8:	4620      	mov	r0, r4
    76da:	f7ff ffd5 	bl	7688 <color_prefix>
	length += ids_print(log_output, level_on, func_on,
    76de:	9601      	str	r6, [sp, #4]
    76e0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    76e4:	9300      	str	r3, [sp, #0]
    76e6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    76ea:	462a      	mov	r2, r5
    76ec:	4641      	mov	r1, r8
    76ee:	4620      	mov	r0, r4
    76f0:	f7fa ffce 	bl	2690 <ids_print>
}
    76f4:	4438      	add	r0, r7
    76f6:	b003      	add	sp, #12
    76f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(log_output, flags, timestamp);
    76fc:	461a      	mov	r2, r3
    76fe:	f7fa fef9 	bl	24f4 <timestamp_print>
    7702:	4607      	mov	r7, r0
    7704:	e7e6      	b.n	76d4 <prefix_print+0x1c>

00007706 <log_output_flush>:
{
    7706:	b510      	push	{r4, lr}
    7708:	4604      	mov	r4, r0
		     log_output->control_block->offset,
    770a:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    770c:	6853      	ldr	r3, [r2, #4]
    770e:	6812      	ldr	r2, [r2, #0]
    7710:	6881      	ldr	r1, [r0, #8]
    7712:	6800      	ldr	r0, [r0, #0]
    7714:	f7ff ffa0 	bl	7658 <buffer_write>
	log_output->control_block->offset = 0;
    7718:	6863      	ldr	r3, [r4, #4]
    771a:	2200      	movs	r2, #0
    771c:	601a      	str	r2, [r3, #0]
}
    771e:	bd10      	pop	{r4, pc}

00007720 <should_bail>:
	if (info->start_offset < data->area_off) {
    7720:	6800      	ldr	r0, [r0, #0]
    7722:	684b      	ldr	r3, [r1, #4]
    7724:	4298      	cmp	r0, r3
    7726:	d30b      	bcc.n	7740 <should_bail+0x20>
{
    7728:	b410      	push	{r4}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    772a:	688c      	ldr	r4, [r1, #8]
    772c:	4423      	add	r3, r4
    772e:	4298      	cmp	r0, r3
    7730:	d209      	bcs.n	7746 <should_bail+0x26>
	} else if (data->ret_idx >= data->ret_len) {
    7732:	6908      	ldr	r0, [r1, #16]
    7734:	694b      	ldr	r3, [r1, #20]
    7736:	4298      	cmp	r0, r3
    7738:	d209      	bcs.n	774e <should_bail+0x2e>
	return false;
    773a:	2000      	movs	r0, #0
}
    773c:	bc10      	pop	{r4}
    773e:	4770      	bx	lr
		*bail_value = true;
    7740:	2001      	movs	r0, #1
    7742:	7010      	strb	r0, [r2, #0]
}
    7744:	4770      	bx	lr
		*bail_value = false;
    7746:	2300      	movs	r3, #0
    7748:	7013      	strb	r3, [r2, #0]
		return true;
    774a:	2001      	movs	r0, #1
    774c:	e7f6      	b.n	773c <should_bail+0x1c>
		data->status = -ENOMEM;
    774e:	f06f 030b 	mvn.w	r3, #11
    7752:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    7754:	2300      	movs	r3, #0
    7756:	7013      	strb	r3, [r2, #0]
		return true;
    7758:	2001      	movs	r0, #1
    775a:	e7ef      	b.n	773c <should_bail+0x1c>

0000775c <get_sectors_cb>:
{
    775c:	b570      	push	{r4, r5, r6, lr}
    775e:	b082      	sub	sp, #8
    7760:	4605      	mov	r5, r0
    7762:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
    7764:	68ce      	ldr	r6, [r1, #12]
	if (should_bail(info, data, &bail)) {
    7766:	f10d 0207 	add.w	r2, sp, #7
    776a:	f7ff ffd9 	bl	7720 <should_bail>
    776e:	b980      	cbnz	r0, 7792 <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    7770:	682b      	ldr	r3, [r5, #0]
    7772:	6861      	ldr	r1, [r4, #4]
    7774:	6922      	ldr	r2, [r4, #16]
    7776:	1a5b      	subs	r3, r3, r1
    7778:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    777c:	6923      	ldr	r3, [r4, #16]
    777e:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
    7782:	686b      	ldr	r3, [r5, #4]
    7784:	6073      	str	r3, [r6, #4]
	data->ret_idx++;
    7786:	6923      	ldr	r3, [r4, #16]
    7788:	3301      	adds	r3, #1
    778a:	6123      	str	r3, [r4, #16]
	return true;
    778c:	2001      	movs	r0, #1
}
    778e:	b002      	add	sp, #8
    7790:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
    7792:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7796:	e7fa      	b.n	778e <get_sectors_cb+0x32>

00007798 <flash_area_layout>:
{
    7798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    779a:	460d      	mov	r5, r1
    779c:	4617      	mov	r7, r2
    779e:	461e      	mov	r6, r3
    77a0:	9c06      	ldr	r4, [sp, #24]
	cb_data->area_idx = idx;
    77a2:	6020      	str	r0, [r4, #0]
	fa = get_flash_area_from_id(idx);
    77a4:	f7fb f8a8 	bl	28f8 <get_flash_area_from_id>
	if (fa == NULL) {
    77a8:	b1b8      	cbz	r0, 77da <flash_area_layout+0x42>
	cb_data->area_off = fa->fa_off;
    77aa:	6843      	ldr	r3, [r0, #4]
    77ac:	6063      	str	r3, [r4, #4]
	cb_data->area_len = fa->fa_size;
    77ae:	6883      	ldr	r3, [r0, #8]
    77b0:	60a3      	str	r3, [r4, #8]
	cb_data->ret = ret;
    77b2:	60e7      	str	r7, [r4, #12]
	cb_data->ret_idx = 0U;
    77b4:	2200      	movs	r2, #0
    77b6:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
    77b8:	682b      	ldr	r3, [r5, #0]
    77ba:	6163      	str	r3, [r4, #20]
	cb_data->status = 0;
    77bc:	61a2      	str	r2, [r4, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
    77be:	68c0      	ldr	r0, [r0, #12]
    77c0:	f7fd ffc4 	bl	574c <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    77c4:	b160      	cbz	r0, 77e0 <flash_area_layout+0x48>
	flash_page_foreach(flash_dev, cb, cb_data);
    77c6:	4622      	mov	r2, r4
    77c8:	4631      	mov	r1, r6
    77ca:	f000 fba9 	bl	7f20 <flash_page_foreach>
	if (cb_data->status == 0) {
    77ce:	69a3      	ldr	r3, [r4, #24]
    77d0:	b90b      	cbnz	r3, 77d6 <flash_area_layout+0x3e>
		*cnt = cb_data->ret_idx;
    77d2:	6923      	ldr	r3, [r4, #16]
    77d4:	602b      	str	r3, [r5, #0]
	return cb_data->status;
    77d6:	69a0      	ldr	r0, [r4, #24]
}
    77d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    77da:	f06f 0015 	mvn.w	r0, #21
    77de:	e7fb      	b.n	77d8 <flash_area_layout+0x40>
		return -ENODEV;
    77e0:	f06f 0012 	mvn.w	r0, #18
    77e4:	e7f8      	b.n	77d8 <flash_area_layout+0x40>

000077e6 <flash_area_close>:
}
    77e6:	4770      	bx	lr

000077e8 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    77e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77ea:	4604      	mov	r4, r0
    77ec:	460d      	mov	r5, r1
    77ee:	4617      	mov	r7, r2
    77f0:	461e      	mov	r6, r3
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    77f2:	6883      	ldr	r3, [r0, #8]
    77f4:	428b      	cmp	r3, r1
    77f6:	d304      	bcc.n	7802 <flash_area_read+0x1a>
    77f8:	1872      	adds	r2, r6, r1
    77fa:	4293      	cmp	r3, r2
    77fc:	d20e      	bcs.n	781c <flash_area_read+0x34>
    77fe:	2300      	movs	r3, #0
    7800:	e000      	b.n	7804 <flash_area_read+0x1c>
    7802:	2300      	movs	r3, #0
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    7804:	b163      	cbz	r3, 7820 <flash_area_read+0x38>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    7806:	68e0      	ldr	r0, [r4, #12]
    7808:	f7fd ffa0 	bl	574c <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    780c:	6861      	ldr	r1, [r4, #4]
    780e:	4429      	add	r1, r5

static inline int z_impl_flash_read(const struct device *dev, off_t offset,
				    void *data,
				    size_t len)
{
	const struct flash_driver_api *api =
    7810:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    7812:	681c      	ldr	r4, [r3, #0]
    7814:	4633      	mov	r3, r6
    7816:	463a      	mov	r2, r7
    7818:	47a0      	blx	r4
}
    781a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    781c:	2301      	movs	r3, #1
    781e:	e7f1      	b.n	7804 <flash_area_read+0x1c>
		return -EINVAL;
    7820:	f06f 0015 	mvn.w	r0, #21
    7824:	e7f9      	b.n	781a <flash_area_read+0x32>

00007826 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    7826:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    782a:	4605      	mov	r5, r0
    782c:	460e      	mov	r6, r1
    782e:	4691      	mov	r9, r2
    7830:	461f      	mov	r7, r3
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    7832:	6883      	ldr	r3, [r0, #8]
    7834:	428b      	cmp	r3, r1
    7836:	d304      	bcc.n	7842 <flash_area_write+0x1c>
    7838:	187a      	adds	r2, r7, r1
    783a:	4293      	cmp	r3, r2
    783c:	d21e      	bcs.n	787c <flash_area_write+0x56>
    783e:	2300      	movs	r3, #0
    7840:	e000      	b.n	7844 <flash_area_write+0x1e>
    7842:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    7844:	b1e3      	cbz	r3, 7880 <flash_area_write+0x5a>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    7846:	68e8      	ldr	r0, [r5, #12]
    7848:	f7fd ff80 	bl	574c <z_impl_device_get_binding>
    784c:	4604      	mov	r4, r0
					 bool enable);

static inline int z_impl_flash_write_protection_set(const struct device *dev,
						    bool enable)
{
	const struct flash_driver_api *api =
    784e:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
    7850:	68db      	ldr	r3, [r3, #12]
    7852:	2100      	movs	r1, #0
    7854:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    7856:	4680      	mov	r8, r0
    7858:	b968      	cbnz	r0, 7876 <flash_area_write+0x50>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    785a:	6869      	ldr	r1, [r5, #4]
    785c:	4431      	add	r1, r6
	const struct flash_driver_api *api =
    785e:	68a3      	ldr	r3, [r4, #8]
	return api->write(dev, offset, data, len);
    7860:	685d      	ldr	r5, [r3, #4]
    7862:	463b      	mov	r3, r7
    7864:	464a      	mov	r2, r9
    7866:	4620      	mov	r0, r4
    7868:	47a8      	blx	r5
    786a:	4680      	mov	r8, r0
	const struct flash_driver_api *api =
    786c:	68a3      	ldr	r3, [r4, #8]
	return api->write_protection(dev, enable);
    786e:	68db      	ldr	r3, [r3, #12]
    7870:	2101      	movs	r1, #1
    7872:	4620      	mov	r0, r4
    7874:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    7876:	4640      	mov	r0, r8
    7878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    787c:	2301      	movs	r3, #1
    787e:	e7e1      	b.n	7844 <flash_area_write+0x1e>
		return -EINVAL;
    7880:	f06f 0815 	mvn.w	r8, #21
    7884:	e7f7      	b.n	7876 <flash_area_write+0x50>

00007886 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    7886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    788a:	4605      	mov	r5, r0
    788c:	460e      	mov	r6, r1
    788e:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    7890:	6883      	ldr	r3, [r0, #8]
    7892:	428b      	cmp	r3, r1
    7894:	d304      	bcc.n	78a0 <flash_area_erase+0x1a>
    7896:	440a      	add	r2, r1
    7898:	4293      	cmp	r3, r2
    789a:	d21d      	bcs.n	78d8 <flash_area_erase+0x52>
    789c:	2300      	movs	r3, #0
    789e:	e000      	b.n	78a2 <flash_area_erase+0x1c>
    78a0:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    78a2:	b1db      	cbz	r3, 78dc <flash_area_erase+0x56>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    78a4:	68e8      	ldr	r0, [r5, #12]
    78a6:	f7fd ff51 	bl	574c <z_impl_device_get_binding>
    78aa:	4604      	mov	r4, r0
	const struct flash_driver_api *api =
    78ac:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
    78ae:	68db      	ldr	r3, [r3, #12]
    78b0:	2100      	movs	r1, #0
    78b2:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    78b4:	4680      	mov	r8, r0
    78b6:	b960      	cbnz	r0, 78d2 <flash_area_erase+0x4c>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    78b8:	6869      	ldr	r1, [r5, #4]
    78ba:	4431      	add	r1, r6
	const struct flash_driver_api *api =
    78bc:	68a3      	ldr	r3, [r4, #8]
	return api->erase(dev, offset, size);
    78be:	689b      	ldr	r3, [r3, #8]
    78c0:	463a      	mov	r2, r7
    78c2:	4620      	mov	r0, r4
    78c4:	4798      	blx	r3
    78c6:	4680      	mov	r8, r0
	const struct flash_driver_api *api =
    78c8:	68a3      	ldr	r3, [r4, #8]
	return api->write_protection(dev, enable);
    78ca:	68db      	ldr	r3, [r3, #12]
    78cc:	2101      	movs	r1, #1
    78ce:	4620      	mov	r0, r4
    78d0:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    78d2:	4640      	mov	r0, r8
    78d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    78d8:	2301      	movs	r3, #1
    78da:	e7e2      	b.n	78a2 <flash_area_erase+0x1c>
		return -EINVAL;
    78dc:	f06f 0815 	mvn.w	r8, #21
    78e0:	e7f7      	b.n	78d2 <flash_area_erase+0x4c>

000078e2 <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
    78e2:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    78e4:	68c0      	ldr	r0, [r0, #12]
    78e6:	f7fd ff31 	bl	574c <z_impl_device_get_binding>
 */
__syscall size_t flash_get_write_block_size(const struct device *dev);

static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
    78ea:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    78ec:	691b      	ldr	r3, [r3, #16]
    78ee:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    78f0:	7800      	ldrb	r0, [r0, #0]
    78f2:	bd08      	pop	{r3, pc}

000078f4 <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    78f4:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    78f6:	68c0      	ldr	r0, [r0, #12]
    78f8:	f7fd ff28 	bl	574c <z_impl_device_get_binding>
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
    78fc:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    78fe:	691b      	ldr	r3, [r3, #16]
    7900:	4798      	blx	r3

	return param->erase_value;
}
    7902:	7900      	ldrb	r0, [r0, #4]
    7904:	bd08      	pop	{r3, pc}

00007906 <wait>:
{
    7906:	b508      	push	{r3, lr}
	if (k_is_in_isr()) {
    7908:	f002 fa12 	bl	9d30 <k_is_in_isr>
    790c:	b100      	cbz	r0, 7910 <wait+0xa>
}
    790e:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
    7910:	2042      	movs	r0, #66	; 0x42
    7912:	2100      	movs	r1, #0
    7914:	f7fe faec 	bl	5ef0 <z_impl_k_sleep>
    7918:	e7f9      	b.n	790e <wait+0x8>

0000791a <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    791a:	68c0      	ldr	r0, [r0, #12]
	return &data->subsys[type];
    791c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    7920:	0089      	lsls	r1, r1, #2
    7922:	3138      	adds	r1, #56	; 0x38
}
    7924:	4408      	add	r0, r1
    7926:	4770      	bx	lr

00007928 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    7928:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    792a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    792e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7932:	4770      	bx	lr

00007934 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    7934:	68c0      	ldr	r0, [r0, #12]
	return &data->mgr[type];
    7936:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    793a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    793e:	4770      	bx	lr

00007940 <get_status>:
{
    7940:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7942:	b2c9      	uxtb	r1, r1
    7944:	f7ff ffe9 	bl	791a <get_sub_data>
    7948:	6880      	ldr	r0, [r0, #8]
}
    794a:	f000 0007 	and.w	r0, r0, #7
    794e:	bd08      	pop	{r3, pc}

00007950 <set_off_state>:
	__asm__ volatile(
    7950:	f04f 0320 	mov.w	r3, #32
    7954:	f3ef 8211 	mrs	r2, BASEPRI
    7958:	f383 8811 	msr	BASEPRI, r3
    795c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7960:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    7962:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    7966:	d001      	beq.n	796c <set_off_state+0x1c>
    7968:	428b      	cmp	r3, r1
    796a:	d107      	bne.n	797c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    796c:	2301      	movs	r3, #1
    796e:	6003      	str	r3, [r0, #0]
	int err = 0;
    7970:	2000      	movs	r0, #0
	__asm__ volatile(
    7972:	f382 8811 	msr	BASEPRI, r2
    7976:	f3bf 8f6f 	isb	sy
}
    797a:	4770      	bx	lr
		err = -EPERM;
    797c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7980:	e7f7      	b.n	7972 <set_off_state+0x22>

00007982 <set_starting_state>:
{
    7982:	b410      	push	{r4}
	__asm__ volatile(
    7984:	f04f 0320 	mov.w	r3, #32
    7988:	f3ef 8211 	mrs	r2, BASEPRI
    798c:	f383 8811 	msr	BASEPRI, r3
    7990:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7994:	6803      	ldr	r3, [r0, #0]
    7996:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    799a:	f003 0307 	and.w	r3, r3, #7
    799e:	2b01      	cmp	r3, #1
    79a0:	d009      	beq.n	79b6 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    79a2:	428c      	cmp	r4, r1
    79a4:	d00a      	beq.n	79bc <set_starting_state+0x3a>
		err = -EPERM;
    79a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    79aa:	f382 8811 	msr	BASEPRI, r2
    79ae:	f3bf 8f6f 	isb	sy
}
    79b2:	bc10      	pop	{r4}
    79b4:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    79b6:	6001      	str	r1, [r0, #0]
	int err = 0;
    79b8:	2000      	movs	r0, #0
    79ba:	e7f6      	b.n	79aa <set_starting_state+0x28>
		err = -EALREADY;
    79bc:	f06f 0044 	mvn.w	r0, #68	; 0x44
    79c0:	e7f3      	b.n	79aa <set_starting_state+0x28>

000079c2 <set_on_state>:
	__asm__ volatile(
    79c2:	f04f 0320 	mov.w	r3, #32
    79c6:	f3ef 8211 	mrs	r2, BASEPRI
    79ca:	f383 8811 	msr	BASEPRI, r3
    79ce:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    79d2:	6803      	ldr	r3, [r0, #0]
    79d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    79d8:	f043 0302 	orr.w	r3, r3, #2
    79dc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    79de:	f382 8811 	msr	BASEPRI, r2
    79e2:	f3bf 8f6f 	isb	sy
}
    79e6:	4770      	bx	lr

000079e8 <clkstarted_handle>:
{
    79e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79ea:	4606      	mov	r6, r0
    79ec:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    79ee:	f7ff ff94 	bl	791a <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    79f2:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    79f4:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    79f6:	2300      	movs	r3, #0
    79f8:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    79fc:	f7ff ffe1 	bl	79c2 <set_on_state>
	if (callback) {
    7a00:	b11d      	cbz	r5, 7a0a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    7a02:	463a      	mov	r2, r7
    7a04:	4621      	mov	r1, r4
    7a06:	4630      	mov	r0, r6
    7a08:	47a8      	blx	r5
}
    7a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007a0c <stop>:
{
    7a0c:	b570      	push	{r4, r5, r6, lr}
    7a0e:	4606      	mov	r6, r0
    7a10:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    7a12:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    7a14:	4621      	mov	r1, r4
    7a16:	f7ff ff80 	bl	791a <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    7a1a:	4629      	mov	r1, r5
    7a1c:	3008      	adds	r0, #8
    7a1e:	f7ff ff97 	bl	7950 <set_off_state>
	if (err < 0) {
    7a22:	2800      	cmp	r0, #0
    7a24:	db06      	blt.n	7a34 <stop+0x28>
	get_sub_config(dev, type)->stop();
    7a26:	4621      	mov	r1, r4
    7a28:	4630      	mov	r0, r6
    7a2a:	f7ff ff7d 	bl	7928 <get_sub_config>
    7a2e:	6843      	ldr	r3, [r0, #4]
    7a30:	4798      	blx	r3
	return 0;
    7a32:	2000      	movs	r0, #0
}
    7a34:	bd70      	pop	{r4, r5, r6, pc}

00007a36 <api_stop>:
{
    7a36:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    7a38:	2280      	movs	r2, #128	; 0x80
    7a3a:	f7ff ffe7 	bl	7a0c <stop>
}
    7a3e:	bd08      	pop	{r3, pc}

00007a40 <async_start>:
{
    7a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a44:	4606      	mov	r6, r0
    7a46:	4690      	mov	r8, r2
    7a48:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    7a4a:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    7a4c:	4629      	mov	r1, r5
    7a4e:	f7ff ff64 	bl	791a <get_sub_data>
    7a52:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    7a54:	9906      	ldr	r1, [sp, #24]
    7a56:	3008      	adds	r0, #8
    7a58:	f7ff ff93 	bl	7982 <set_starting_state>
	if (err < 0) {
    7a5c:	2800      	cmp	r0, #0
    7a5e:	db09      	blt.n	7a74 <async_start+0x34>
	subdata->cb = cb;
    7a60:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    7a64:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    7a66:	4629      	mov	r1, r5
    7a68:	4630      	mov	r0, r6
    7a6a:	f7ff ff5d 	bl	7928 <get_sub_config>
    7a6e:	6803      	ldr	r3, [r0, #0]
    7a70:	4798      	blx	r3
	return 0;
    7a72:	2000      	movs	r0, #0
}
    7a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007a78 <api_start>:
{
    7a78:	b510      	push	{r4, lr}
    7a7a:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7a7c:	2480      	movs	r4, #128	; 0x80
    7a7e:	9400      	str	r4, [sp, #0]
    7a80:	f7ff ffde 	bl	7a40 <async_start>
}
    7a84:	b002      	add	sp, #8
    7a86:	bd10      	pop	{r4, pc}

00007a88 <api_blocking_start>:
}
    7a88:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7a8c:	4770      	bx	lr

00007a8e <onoff_started_callback>:
{
    7a8e:	b510      	push	{r4, lr}
    7a90:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    7a92:	b2c9      	uxtb	r1, r1
    7a94:	f7ff ff4e 	bl	7934 <get_onoff_manager>
	notify(mgr, 0);
    7a98:	2100      	movs	r1, #0
    7a9a:	47a0      	blx	r4
}
    7a9c:	bd10      	pop	{r4, pc}

00007a9e <lfclk_stop>:
{
    7a9e:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_lfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7aa0:	2000      	movs	r0, #0
    7aa2:	f7fc fe0f 	bl	46c4 <nrfx_clock_stop>
}
    7aa6:	bd08      	pop	{r3, pc}

00007aa8 <hfclk_stop>:
{
    7aa8:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    7aaa:	2001      	movs	r0, #1
    7aac:	f7fc fe0a 	bl	46c4 <nrfx_clock_stop>
}
    7ab0:	bd08      	pop	{r3, pc}

00007ab2 <lfclk_start>:
{
    7ab2:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7ab4:	2000      	movs	r0, #0
    7ab6:	f7fc fdcd 	bl	4654 <nrfx_clock_start>
}
    7aba:	bd08      	pop	{r3, pc}

00007abc <hfclk_start>:
{
    7abc:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    7abe:	2001      	movs	r0, #1
    7ac0:	f7fc fdc8 	bl	4654 <nrfx_clock_start>
}
    7ac4:	bd08      	pop	{r3, pc}

00007ac6 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    7ac6:	4770      	bx	lr

00007ac8 <sys_clock_disable>:
{
}

void __weak sys_clock_disable(void)
{
}
    7ac8:	4770      	bx	lr

00007aca <counter_sub>:
	return (a - b) & COUNTER_MAX;
    7aca:	1a40      	subs	r0, r0, r1
}
    7acc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7ad0:	4770      	bx	lr

00007ad2 <handle_next_cycle_case>:
{
    7ad2:	b510      	push	{r4, lr}
    7ad4:	4604      	mov	r4, r0
	set_comparator(t + 2);
    7ad6:	3002      	adds	r0, #2
    7ad8:	f7fb f8f2 	bl	2cc0 <set_comparator>
	while (t != counter()) {
    7adc:	f7fb f91e 	bl	2d1c <counter>
    7ae0:	42a0      	cmp	r0, r4
    7ae2:	d006      	beq.n	7af2 <handle_next_cycle_case+0x20>
		t = counter();
    7ae4:	f7fb f91a 	bl	2d1c <counter>
    7ae8:	4604      	mov	r4, r0
		set_comparator(t + 2);
    7aea:	3002      	adds	r0, #2
    7aec:	f7fb f8e8 	bl	2cc0 <set_comparator>
    7af0:	e7f4      	b.n	7adc <handle_next_cycle_case+0xa>
}
    7af2:	bd10      	pop	{r4, pc}

00007af4 <set_absolute_alarm>:
{
    7af4:	b538      	push	{r3, r4, r5, lr}
    7af6:	4604      	mov	r4, r0
	uint32_t t = counter();
    7af8:	f7fb f910 	bl	2d1c <counter>
    7afc:	4605      	mov	r5, r0
	diff = counter_sub(abs_val, t);
    7afe:	4601      	mov	r1, r0
    7b00:	4620      	mov	r0, r4
    7b02:	f7ff ffe2 	bl	7aca <counter_sub>
	if (diff == 1) {
    7b06:	2801      	cmp	r0, #1
    7b08:	d00d      	beq.n	7b26 <set_absolute_alarm+0x32>
	set_comparator(abs_val);
    7b0a:	4620      	mov	r0, r4
    7b0c:	f7fb f8d8 	bl	2cc0 <set_comparator>
	t = counter();
    7b10:	f7fb f904 	bl	2d1c <counter>
    7b14:	4605      	mov	r5, r0
	diff = counter_sub(abs_val - 2, t);
    7b16:	4601      	mov	r1, r0
    7b18:	1ea0      	subs	r0, r4, #2
    7b1a:	f7ff ffd6 	bl	7aca <counter_sub>
	if (diff > MAX_CYCLES) {
    7b1e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7b22:	d204      	bcs.n	7b2e <set_absolute_alarm+0x3a>
}
    7b24:	bd38      	pop	{r3, r4, r5, pc}
		handle_next_cycle_case(t);
    7b26:	4628      	mov	r0, r5
    7b28:	f7ff ffd3 	bl	7ad2 <handle_next_cycle_case>
		return;
    7b2c:	e7fa      	b.n	7b24 <set_absolute_alarm+0x30>
		handle_next_cycle_case(t);
    7b2e:	4628      	mov	r0, r5
    7b30:	f7ff ffcf 	bl	7ad2 <handle_next_cycle_case>
    7b34:	e7f6      	b.n	7b24 <set_absolute_alarm+0x30>

00007b36 <set_protected_absolute_alarm>:
{
    7b36:	b510      	push	{r4, lr}
    7b38:	4604      	mov	r4, r0
	int_disable();
    7b3a:	f7fb f8df 	bl	2cfc <int_disable>
	prevent_false_prev_evt();
    7b3e:	f7fb f905 	bl	2d4c <prevent_false_prev_evt>
	set_absolute_alarm(cycles);
    7b42:	4620      	mov	r0, r4
    7b44:	f7ff ffd6 	bl	7af4 <set_absolute_alarm>
	int_enable();
    7b48:	f7fb f8e0 	bl	2d0c <int_enable>
}
    7b4c:	bd10      	pop	{r4, pc}

00007b4e <abort_function>:
	while(1);
    7b4e:	e7fe      	b.n	7b4e <abort_function>

00007b50 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    7b50:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    7b52:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    7b54:	4293      	cmp	r3, r2
    7b56:	d804      	bhi.n	7b62 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    7b58:	6880      	ldr	r0, [r0, #8]
    7b5a:	1a80      	subs	r0, r0, r2
    7b5c:	4403      	add	r3, r0
    7b5e:	1e58      	subs	r0, r3, #1
    7b60:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
    7b62:	1a9b      	subs	r3, r3, r2
    7b64:	1e58      	subs	r0, r3, #1
}
    7b66:	4770      	bx	lr

00007b68 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    7b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b6c:	4604      	mov	r4, r0
    7b6e:	4688      	mov	r8, r1
    7b70:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
    7b72:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
    7b74:	6887      	ldr	r7, [r0, #8]
    7b76:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
    7b7a:	4591      	cmp	r9, r2
    7b7c:	d907      	bls.n	7b8e <_WriteNoCheck+0x26>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    7b7e:	6840      	ldr	r0, [r0, #4]
    7b80:	4428      	add	r0, r5
    7b82:	f000 f8ef 	bl	7d64 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    7b86:	4435      	add	r5, r6
    7b88:	60e5      	str	r5, [r4, #12]
}
    7b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    7b8e:	6840      	ldr	r0, [r0, #4]
    7b90:	464a      	mov	r2, r9
    7b92:	4428      	add	r0, r5
    7b94:	f000 f8e6 	bl	7d64 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    7b98:	1bed      	subs	r5, r5, r7
    7b9a:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    7b9c:	462a      	mov	r2, r5
    7b9e:	eb08 0109 	add.w	r1, r8, r9
    7ba2:	6860      	ldr	r0, [r4, #4]
    7ba4:	f000 f8de 	bl	7d64 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    7ba8:	60e5      	str	r5, [r4, #12]
}
    7baa:	e7ee      	b.n	7b8a <_WriteNoCheck+0x22>

00007bac <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    7bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7bb0:	4606      	mov	r6, r0
    7bb2:	4688      	mov	r8, r1
    7bb4:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
    7bb6:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
    7bb8:	f04f 0900 	mov.w	r9, #0
    7bbc:	e018      	b.n	7bf0 <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
    7bbe:	1b64      	subs	r4, r4, r5
    7bc0:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    7bc2:	68b3      	ldr	r3, [r6, #8]
    7bc4:	1b5c      	subs	r4, r3, r5
    7bc6:	4294      	cmp	r4, r2
    7bc8:	bf28      	it	cs
    7bca:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    7bcc:	42bc      	cmp	r4, r7
    7bce:	bf28      	it	cs
    7bd0:	463c      	movcs	r4, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    7bd2:	6870      	ldr	r0, [r6, #4]
    7bd4:	4622      	mov	r2, r4
    7bd6:	4641      	mov	r1, r8
    7bd8:	4428      	add	r0, r5
    7bda:	f000 f8c3 	bl	7d64 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    7bde:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
    7be0:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
    7be2:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
    7be4:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
    7be6:	68b3      	ldr	r3, [r6, #8]
    7be8:	42ab      	cmp	r3, r5
    7bea:	d009      	beq.n	7c00 <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
    7bec:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    7bee:	b14f      	cbz	r7, 7c04 <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    7bf0:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
    7bf2:	42a5      	cmp	r5, r4
    7bf4:	d3e3      	bcc.n	7bbe <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    7bf6:	68b2      	ldr	r2, [r6, #8]
    7bf8:	1b64      	subs	r4, r4, r5
    7bfa:	4414      	add	r4, r2
    7bfc:	1e62      	subs	r2, r4, #1
    7bfe:	e7e0      	b.n	7bc2 <_WriteBlocking+0x16>
      WrOff = 0u;
    7c00:	2500      	movs	r5, #0
    7c02:	e7f3      	b.n	7bec <_WriteBlocking+0x40>
}
    7c04:	4648      	mov	r0, r9
    7c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007c0a <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    7c0a:	b508      	push	{r3, lr}
  _DoInit();
    7c0c:	f7fb f9dc 	bl	2fc8 <_DoInit>
}
    7c10:	bd08      	pop	{r3, pc}

00007c12 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    7c12:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    7c14:	f7ff fff9 	bl	7c0a <SEGGER_RTT_Init>

	return 0;
}
    7c18:	2000      	movs	r0, #0
    7c1a:	bd08      	pop	{r3, pc}

00007c1c <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    7c1c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    7c1e:	2100      	movs	r1, #0
    7c20:	2001      	movs	r0, #1
    7c22:	f000 f805 	bl	7c30 <z_arm_fatal_error>
}
    7c26:	bd08      	pop	{r3, pc}

00007c28 <z_arm_prepare_switch_to_main>:
{
    7c28:	b508      	push	{r3, lr}
	z_arm_configure_static_mpu_regions();
    7c2a:	f7fb fcd5 	bl	35d8 <z_arm_configure_static_mpu_regions>
}
    7c2e:	bd08      	pop	{r3, pc}

00007c30 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7c30:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    7c32:	f001 ff34 	bl	9a9e <z_fatal_error>
}
    7c36:	bd08      	pop	{r3, pc}

00007c38 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    7c38:	b508      	push	{r3, lr}
    7c3a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    7c3c:	6800      	ldr	r0, [r0, #0]
    7c3e:	f7ff fff7 	bl	7c30 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    7c42:	bd08      	pop	{r3, pc}

00007c44 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    7c44:	b508      	push	{r3, lr}
	handler();
    7c46:	f7fb fb49 	bl	32dc <z_SysNmiOnReset>
	z_arm_int_exit();
    7c4a:	f7fb fc87 	bl	355c <z_arm_exc_exit>
}
    7c4e:	bd08      	pop	{r3, pc}

00007c50 <memory_fault_recoverable>:
}
    7c50:	2000      	movs	r0, #0
    7c52:	4770      	bx	lr

00007c54 <fault_handle>:
{
    7c54:	b508      	push	{r3, lr}
	*recoverable = false;
    7c56:	2300      	movs	r3, #0
    7c58:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    7c5a:	1ecb      	subs	r3, r1, #3
    7c5c:	2b03      	cmp	r3, #3
    7c5e:	d812      	bhi.n	7c86 <fault_handle+0x32>
    7c60:	e8df f003 	tbb	[pc, r3]
    7c64:	0e0a0602 	.word	0x0e0a0602
		reason = hard_fault(esf, recoverable);
    7c68:	4611      	mov	r1, r2
    7c6a:	f7fb fbf3 	bl	3454 <hard_fault>
}
    7c6e:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    7c70:	2100      	movs	r1, #0
    7c72:	f7fb fb8f 	bl	3394 <mem_manage_fault>
		break;
    7c76:	e7fa      	b.n	7c6e <fault_handle+0x1a>
		reason = bus_fault(esf, 0, recoverable);
    7c78:	2100      	movs	r1, #0
    7c7a:	f7fb fbaf 	bl	33dc <bus_fault>
		break;
    7c7e:	e7f6      	b.n	7c6e <fault_handle+0x1a>
		reason = usage_fault(esf);
    7c80:	f7fb fbd6 	bl	3430 <usage_fault>
		break;
    7c84:	e7f3      	b.n	7c6e <fault_handle+0x1a>
	*recoverable = false;
    7c86:	2000      	movs	r0, #0
	return reason;
    7c88:	e7f1      	b.n	7c6e <fault_handle+0x1a>

00007c8a <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    7c8a:	6843      	ldr	r3, [r0, #4]
		&&
    7c8c:	2b1f      	cmp	r3, #31
    7c8e:	d90a      	bls.n	7ca6 <mpu_partition_is_valid+0x1c>
		&&
    7c90:	f013 0f1f 	tst.w	r3, #31
    7c94:	d001      	beq.n	7c9a <mpu_partition_is_valid+0x10>
		&&
    7c96:	2000      	movs	r0, #0
    7c98:	4770      	bx	lr
		((part->start &
    7c9a:	6803      	ldr	r3, [r0, #0]
		&&
    7c9c:	f013 0f1f 	tst.w	r3, #31
    7ca0:	d003      	beq.n	7caa <mpu_partition_is_valid+0x20>
    7ca2:	2000      	movs	r0, #0
    7ca4:	4770      	bx	lr
    7ca6:	2000      	movs	r0, #0
    7ca8:	4770      	bx	lr
    7caa:	2001      	movs	r0, #1
}
    7cac:	4770      	bx	lr

00007cae <mpu_configure_region>:
{
    7cae:	b530      	push	{r4, r5, lr}
    7cb0:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    7cb2:	680b      	ldr	r3, [r1, #0]
    7cb4:	9300      	str	r3, [sp, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    7cb6:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    7cb8:	890d      	ldrh	r5, [r1, #8]
    7cba:	f89d 2008 	ldrb.w	r2, [sp, #8]
    7cbe:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    7cc2:	7a89      	ldrb	r1, [r1, #10]
    7cc4:	f361 1247 	bfi	r2, r1, #5, #3
    7cc8:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    7ccc:	f023 031f 	bic.w	r3, r3, #31
    7cd0:	4423      	add	r3, r4
    7cd2:	3b01      	subs	r3, #1
    7cd4:	f023 031f 	bic.w	r3, r3, #31
    7cd8:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    7cda:	4669      	mov	r1, sp
    7cdc:	f7fb fcba 	bl	3654 <region_allocate_and_init>
}
    7ce0:	b005      	add	sp, #20
    7ce2:	bd30      	pop	{r4, r5, pc}

00007ce4 <arm_core_mpu_configure_static_mpu_regions>:
{
    7ce4:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    7ce6:	f7fb fdc9 	bl	387c <mpu_configure_static_mpu_regions>
}
    7cea:	bd08      	pop	{r3, pc}

00007cec <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    7cec:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    7cf0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    7cf4:	d001      	beq.n	7cfa <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    7cf6:	b2c0      	uxtb	r0, r0
    7cf8:	4770      	bx	lr
	}

	return -EINVAL;
    7cfa:	f06f 0015 	mvn.w	r0, #21
}
    7cfe:	4770      	bx	lr

00007d00 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    7d00:	4602      	mov	r2, r0
    7d02:	780b      	ldrb	r3, [r1, #0]
    7d04:	b11b      	cbz	r3, 7d0e <strcpy+0xe>
		*d = *s;
    7d06:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    7d0a:	3101      	adds	r1, #1
    7d0c:	e7f9      	b.n	7d02 <strcpy+0x2>
	}

	*d = '\0';
    7d0e:	7013      	strb	r3, [r2, #0]

	return dest;
}
    7d10:	4770      	bx	lr

00007d12 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7d12:	4603      	mov	r3, r0
	size_t n = 0;
    7d14:	2000      	movs	r0, #0

	while (*s != '\0') {
    7d16:	781a      	ldrb	r2, [r3, #0]
    7d18:	b112      	cbz	r2, 7d20 <strlen+0xe>
		s++;
    7d1a:	3301      	adds	r3, #1
		n++;
    7d1c:	3001      	adds	r0, #1
    7d1e:	e7fa      	b.n	7d16 <strlen+0x4>
	}

	return n;
}
    7d20:	4770      	bx	lr

00007d22 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    7d22:	7803      	ldrb	r3, [r0, #0]
    7d24:	780a      	ldrb	r2, [r1, #0]
    7d26:	4293      	cmp	r3, r2
    7d28:	d103      	bne.n	7d32 <strcmp+0x10>
    7d2a:	b113      	cbz	r3, 7d32 <strcmp+0x10>
		s1++;
    7d2c:	3001      	adds	r0, #1
		s2++;
    7d2e:	3101      	adds	r1, #1
    7d30:	e7f7      	b.n	7d22 <strcmp>
	}

	return *s1 - *s2;
}
    7d32:	1a98      	subs	r0, r3, r2
    7d34:	4770      	bx	lr

00007d36 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    7d36:	b17a      	cbz	r2, 7d58 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    7d38:	1e53      	subs	r3, r2, #1
    7d3a:	d00f      	beq.n	7d5c <memcmp+0x26>
{
    7d3c:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
    7d3e:	7804      	ldrb	r4, [r0, #0]
    7d40:	780a      	ldrb	r2, [r1, #0]
    7d42:	4294      	cmp	r4, r2
    7d44:	d103      	bne.n	7d4e <memcmp+0x18>
		c1++;
    7d46:	3001      	adds	r0, #1
		c2++;
    7d48:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
    7d4a:	3b01      	subs	r3, #1
    7d4c:	d1f7      	bne.n	7d3e <memcmp+0x8>
	}

	return *c1 - *c2;
    7d4e:	7800      	ldrb	r0, [r0, #0]
    7d50:	780b      	ldrb	r3, [r1, #0]
    7d52:	1ac0      	subs	r0, r0, r3
}
    7d54:	bc10      	pop	{r4}
    7d56:	4770      	bx	lr
		return 0;
    7d58:	2000      	movs	r0, #0
    7d5a:	4770      	bx	lr
	return *c1 - *c2;
    7d5c:	7800      	ldrb	r0, [r0, #0]
    7d5e:	780b      	ldrb	r3, [r1, #0]
    7d60:	1ac0      	subs	r0, r0, r3
}
    7d62:	4770      	bx	lr

00007d64 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    7d64:	b410      	push	{r4}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    7d66:	ea80 0301 	eor.w	r3, r0, r1
    7d6a:	f013 0f03 	tst.w	r3, #3
    7d6e:	d001      	beq.n	7d74 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    7d70:	4603      	mov	r3, r0
    7d72:	e017      	b.n	7da4 <memcpy+0x40>
    7d74:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    7d76:	f013 0f03 	tst.w	r3, #3
    7d7a:	d00b      	beq.n	7d94 <memcpy+0x30>
			if (n == 0) {
    7d7c:	b1a2      	cbz	r2, 7da8 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    7d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7d82:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    7d86:	3a01      	subs	r2, #1
    7d88:	e7f5      	b.n	7d76 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    7d8a:	f851 4b04 	ldr.w	r4, [r1], #4
    7d8e:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    7d92:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    7d94:	2a03      	cmp	r2, #3
    7d96:	d8f8      	bhi.n	7d8a <memcpy+0x26>
    7d98:	e004      	b.n	7da4 <memcpy+0x40>
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    7d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
    7d9e:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    7da2:	3a01      	subs	r2, #1
	while (n > 0) {
    7da4:	2a00      	cmp	r2, #0
    7da6:	d1f8      	bne.n	7d9a <memcpy+0x36>
	}

	return d;
}
    7da8:	bc10      	pop	{r4}
    7daa:	4770      	bx	lr

00007dac <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    7dac:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    7dae:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    7db0:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    7db2:	f013 0f03 	tst.w	r3, #3
    7db6:	d004      	beq.n	7dc2 <memset+0x16>
		if (n == 0) {
    7db8:	b19a      	cbz	r2, 7de2 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    7dba:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    7dbe:	3a01      	subs	r2, #1
    7dc0:	e7f7      	b.n	7db2 <memset+0x6>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    7dc2:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    7dc4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    7dc8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    7dcc:	2a03      	cmp	r2, #3
    7dce:	d906      	bls.n	7dde <memset+0x32>
		*(d_word++) = c_word;
    7dd0:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    7dd4:	3a04      	subs	r2, #4
    7dd6:	e7f9      	b.n	7dcc <memset+0x20>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
    7dd8:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    7ddc:	3a01      	subs	r2, #1
	while (n > 0) {
    7dde:	2a00      	cmp	r2, #0
    7de0:	d1fa      	bne.n	7dd8 <memset+0x2c>
	}

	return buf;
}
    7de2:	bc10      	pop	{r4}
    7de4:	4770      	bx	lr

00007de6 <_stdout_hook_default>:
}
    7de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7dea:	4770      	bx	lr

00007dec <gpio_nrfx_port_get_raw>:
	return port->config;
    7dec:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7dee:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7df0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    7df2:	600b      	str	r3, [r1, #0]
}
    7df4:	2000      	movs	r0, #0
    7df6:	4770      	bx	lr

00007df8 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    7df8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7dfa:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    7dfc:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    7dfe:	4042      	eors	r2, r0
    7e00:	400a      	ands	r2, r1
    7e02:	4042      	eors	r2, r0
    p_reg->OUT = value;
    7e04:	605a      	str	r2, [r3, #4]
}
    7e06:	2000      	movs	r0, #0
    7e08:	4770      	bx	lr

00007e0a <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    7e0a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7e0c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    7e0e:	6099      	str	r1, [r3, #8]
}
    7e10:	2000      	movs	r0, #0
    7e12:	4770      	bx	lr

00007e14 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    7e14:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7e16:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    7e18:	60d9      	str	r1, [r3, #12]
}
    7e1a:	2000      	movs	r0, #0
    7e1c:	4770      	bx	lr

00007e1e <gpio_nrfx_port_toggle_bits>:
	return port->config;
    7e1e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7e20:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7e22:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    7e24:	404b      	eors	r3, r1
    p_reg->OUT = value;
    7e26:	6053      	str	r3, [r2, #4]
}
    7e28:	2000      	movs	r0, #0
    7e2a:	4770      	bx	lr

00007e2c <gpio_nrfx_manage_callback>:
{
    7e2c:	b470      	push	{r4, r5, r6}
	return port->data;
    7e2e:	68c0      	ldr	r0, [r0, #12]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7e30:	1d05      	adds	r5, r0, #4
	return list->head;
    7e32:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
    7e34:	b1db      	cbz	r3, 7e6e <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    7e36:	460e      	mov	r6, r1
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7e38:	2400      	movs	r4, #0
    7e3a:	e00a      	b.n	7e52 <gpio_nrfx_manage_callback+0x26>
	return node->next;
    7e3c:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    7e3e:	6043      	str	r3, [r0, #4]
	return list->tail;
    7e40:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    7e42:	42a1      	cmp	r1, r4
    7e44:	d10f      	bne.n	7e66 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    7e46:	606b      	str	r3, [r5, #4]
}
    7e48:	e00d      	b.n	7e66 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    7e4a:	606c      	str	r4, [r5, #4]
}
    7e4c:	e00b      	b.n	7e66 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7e4e:	461c      	mov	r4, r3
    7e50:	681b      	ldr	r3, [r3, #0]
    7e52:	b15b      	cbz	r3, 7e6c <gpio_nrfx_manage_callback+0x40>
    7e54:	429e      	cmp	r6, r3
    7e56:	d1fa      	bne.n	7e4e <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    7e58:	2c00      	cmp	r4, #0
    7e5a:	d0ef      	beq.n	7e3c <gpio_nrfx_manage_callback+0x10>
	return node->next;
    7e5c:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    7e5e:	6023      	str	r3, [r4, #0]
	return list->tail;
    7e60:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    7e62:	4299      	cmp	r1, r3
    7e64:	d0f1      	beq.n	7e4a <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    7e66:	2300      	movs	r3, #0
    7e68:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7e6a:	e000      	b.n	7e6e <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    7e6c:	b152      	cbz	r2, 7e84 <gpio_nrfx_manage_callback+0x58>
	if (set) {
    7e6e:	b162      	cbz	r2, 7e8a <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    7e70:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    7e72:	600b      	str	r3, [r1, #0]
	list->head = node;
    7e74:	6041      	str	r1, [r0, #4]
	return list->tail;
    7e76:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    7e78:	b10b      	cbz	r3, 7e7e <gpio_nrfx_manage_callback+0x52>
	return 0;
    7e7a:	2000      	movs	r0, #0
    7e7c:	e006      	b.n	7e8c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    7e7e:	6069      	str	r1, [r5, #4]
    7e80:	2000      	movs	r0, #0
}
    7e82:	e003      	b.n	7e8c <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    7e84:	f06f 0015 	mvn.w	r0, #21
    7e88:	e000      	b.n	7e8c <gpio_nrfx_manage_callback+0x60>
	return 0;
    7e8a:	2000      	movs	r0, #0
}
    7e8c:	bc70      	pop	{r4, r5, r6}
    7e8e:	4770      	bx	lr

00007e90 <flash_nrf_write_protection>:
}
    7e90:	2000      	movs	r0, #0
    7e92:	4770      	bx	lr

00007e94 <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(uint32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
    7e94:	684b      	ldr	r3, [r1, #4]
    7e96:	4403      	add	r3, r0
    7e98:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
    7e9a:	680b      	ldr	r3, [r1, #0]
    7e9c:	4403      	add	r3, r0
    7e9e:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
    7ea0:	688b      	ldr	r3, [r1, #8]
    7ea2:	1a18      	subs	r0, r3, r0
    7ea4:	6088      	str	r0, [r1, #8]
}
    7ea6:	4770      	bx	lr

00007ea8 <erase_op>:
{
    7ea8:	b538      	push	{r3, r4, r5, lr}
    7eaa:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    7eac:	f000 f96d 	bl	818a <nrfx_nvmc_flash_page_size_get>
    7eb0:	4605      	mov	r5, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    7eb2:	6860      	ldr	r0, [r4, #4]
    7eb4:	f7fc fd08 	bl	48c8 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
    7eb8:	68a3      	ldr	r3, [r4, #8]
    7eba:	1b5b      	subs	r3, r3, r5
    7ebc:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    7ebe:	6862      	ldr	r2, [r4, #4]
    7ec0:	442a      	add	r2, r5
    7ec2:	6062      	str	r2, [r4, #4]
	} while (e_ctx->len > 0);
    7ec4:	2b00      	cmp	r3, #0
    7ec6:	d1f4      	bne.n	7eb2 <erase_op+0xa>
}
    7ec8:	2000      	movs	r0, #0
    7eca:	bd38      	pop	{r3, r4, r5, pc}

00007ecc <erase>:

	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
    7ecc:	b500      	push	{lr}
    7ece:	b085      	sub	sp, #20
	struct flash_context context = {
    7ed0:	2300      	movs	r3, #0
    7ed2:	9301      	str	r3, [sp, #4]
    7ed4:	9002      	str	r0, [sp, #8]
    7ed6:	9103      	str	r1, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
    7ed8:	a801      	add	r0, sp, #4
    7eda:	f7ff ffe5 	bl	7ea8 <erase_op>
}
    7ede:	b005      	add	sp, #20
    7ee0:	f85d fb04 	ldr.w	pc, [sp], #4

00007ee4 <write_op>:
{
    7ee4:	b510      	push	{r4, lr}
    7ee6:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
    7ee8:	68a3      	ldr	r3, [r4, #8]
    7eea:	2b03      	cmp	r3, #3
    7eec:	d909      	bls.n	7f02 <write_op+0x1e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    7eee:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    7ef0:	6819      	ldr	r1, [r3, #0]
    7ef2:	6860      	ldr	r0, [r4, #4]
    7ef4:	f000 f939 	bl	816a <nrfx_nvmc_word_write>
		shift_write_context(sizeof(uint32_t), w_ctx);
    7ef8:	4621      	mov	r1, r4
    7efa:	2004      	movs	r0, #4
    7efc:	f7ff ffca 	bl	7e94 <shift_write_context>
    7f00:	e7f2      	b.n	7ee8 <write_op+0x4>
	nvmc_wait_ready();
    7f02:	f7fb ff85 	bl	3e10 <nvmc_wait_ready>
}
    7f06:	2000      	movs	r0, #0
    7f08:	bd10      	pop	{r4, pc}

00007f0a <write>:

static int write(off_t addr, const void *data, size_t len)
{
    7f0a:	b500      	push	{lr}
    7f0c:	b085      	sub	sp, #20
	struct flash_context context = {
    7f0e:	9101      	str	r1, [sp, #4]
    7f10:	9002      	str	r0, [sp, #8]
    7f12:	9203      	str	r2, [sp, #12]
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
    7f14:	a801      	add	r0, sp, #4
    7f16:	f7ff ffe5 	bl	7ee4 <write_op>
}
    7f1a:	b005      	add	sp, #20
    7f1c:	f85d fb04 	ldr.w	pc, [sp], #4

00007f20 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    7f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f24:	b086      	sub	sp, #24
    7f26:	4689      	mov	r9, r1
    7f28:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
    7f2a:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    7f2c:	695b      	ldr	r3, [r3, #20]
    7f2e:	aa01      	add	r2, sp, #4
    7f30:	a905      	add	r1, sp, #20
    7f32:	4798      	blx	r3
	off_t off = 0;
    7f34:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    7f36:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
    7f38:	46a2      	mov	sl, r4
    7f3a:	9b01      	ldr	r3, [sp, #4]
    7f3c:	4553      	cmp	r3, sl
    7f3e:	d916      	bls.n	7f6e <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
    7f40:	9f05      	ldr	r7, [sp, #20]
    7f42:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
    7f46:	687b      	ldr	r3, [r7, #4]
    7f48:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
    7f4a:	2500      	movs	r5, #0
    7f4c:	683b      	ldr	r3, [r7, #0]
    7f4e:	42ab      	cmp	r3, r5
    7f50:	d90a      	bls.n	7f68 <flash_page_foreach+0x48>
			page_info.start_offset = off;
    7f52:	9402      	str	r4, [sp, #8]
			page_info.index = page;
    7f54:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
    7f56:	4641      	mov	r1, r8
    7f58:	a802      	add	r0, sp, #8
    7f5a:	47c8      	blx	r9
    7f5c:	b138      	cbz	r0, 7f6e <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
    7f5e:	9b03      	ldr	r3, [sp, #12]
    7f60:	441c      	add	r4, r3
			page++;
    7f62:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
    7f64:	3501      	adds	r5, #1
    7f66:	e7f1      	b.n	7f4c <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
    7f68:	f10a 0a01 	add.w	sl, sl, #1
    7f6c:	e7e5      	b.n	7f3a <flash_page_foreach+0x1a>
		}
	}
}
    7f6e:	b006      	add	sp, #24
    7f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007f74 <endtx_isr>:
	return dev->config;
    7f74:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7f76:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    7f78:	f04f 0120 	mov.w	r1, #32
    7f7c:	f3ef 8211 	mrs	r2, BASEPRI
    7f80:	f381 8811 	msr	BASEPRI, r1
    7f84:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7f88:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7f8c:	b131      	cbz	r1, 7f9c <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f8e:	2100      	movs	r1, #0
    7f90:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    7f94:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7f98:	2101      	movs	r1, #1
    7f9a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    7f9c:	f382 8811 	msr	BASEPRI, r2
    7fa0:	f3bf 8f6f 	isb	sy
}
    7fa4:	4770      	bx	lr

00007fa6 <uarte_nrfx_isr_int>:
{
    7fa6:	b508      	push	{r3, lr}
	return dev->config;
    7fa8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7faa:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    7fac:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7fb0:	f412 7f80 	tst.w	r2, #256	; 0x100
    7fb4:	d002      	beq.n	7fbc <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7fb6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    7fba:	b903      	cbnz	r3, 7fbe <uarte_nrfx_isr_int+0x18>
}
    7fbc:	bd08      	pop	{r3, pc}
		endtx_isr(dev);
    7fbe:	f7ff ffd9 	bl	7f74 <endtx_isr>
}
    7fc2:	e7fb      	b.n	7fbc <uarte_nrfx_isr_int+0x16>

00007fc4 <uarte_nrfx_configure>:
{
    7fc4:	b570      	push	{r4, r5, r6, lr}
    7fc6:	b082      	sub	sp, #8
    7fc8:	4605      	mov	r5, r0
    7fca:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    7fcc:	794b      	ldrb	r3, [r1, #5]
    7fce:	2b01      	cmp	r3, #1
    7fd0:	d006      	beq.n	7fe0 <uarte_nrfx_configure+0x1c>
    7fd2:	2b03      	cmp	r3, #3
    7fd4:	d011      	beq.n	7ffa <uarte_nrfx_configure+0x36>
    7fd6:	f06f 0322 	mvn.w	r3, #34	; 0x22
}
    7fda:	4618      	mov	r0, r3
    7fdc:	b002      	add	sp, #8
    7fde:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    7fe0:	2300      	movs	r3, #0
    7fe2:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    7fe6:	79a3      	ldrb	r3, [r4, #6]
    7fe8:	2b03      	cmp	r3, #3
    7fea:	d13b      	bne.n	8064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
	switch (cfg->flow_ctrl) {
    7fec:	79e3      	ldrb	r3, [r4, #7]
    7fee:	b143      	cbz	r3, 8002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
    7ff0:	2b01      	cmp	r3, #1
    7ff2:	d010      	beq.n	8016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
    7ff4:	f06f 0322 	mvn.w	r3, #34	; 0x22
    7ff8:	e7ef      	b.n	7fda <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    7ffa:	2310      	movs	r3, #16
    7ffc:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    8000:	e7f1      	b.n	7fe6 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    8002:	2300      	movs	r3, #0
    8004:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    8008:	7923      	ldrb	r3, [r4, #4]
    800a:	b15b      	cbz	r3, 8024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    800c:	2b02      	cmp	r3, #2
    800e:	d025      	beq.n	805c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    8010:	f06f 0322 	mvn.w	r3, #34	; 0x22
    8014:	e7e1      	b.n	7fda <uarte_nrfx_configure+0x16>
	return dev->config;
    8016:	686b      	ldr	r3, [r5, #4]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    8018:	791b      	ldrb	r3, [r3, #4]
    801a:	b333      	cbz	r3, 806a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    801c:	2301      	movs	r3, #1
    801e:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    8022:	e7f1      	b.n	8008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    8024:	2300      	movs	r3, #0
    8026:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    802a:	6821      	ldr	r1, [r4, #0]
    802c:	4628      	mov	r0, r5
    802e:	f7fb fff1 	bl	4014 <baudrate_set>
    8032:	4603      	mov	r3, r0
    8034:	b9e0      	cbnz	r0, 8070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
	return dev->config;
    8036:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    8038:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    803a:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    803e:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    8042:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8046:	4331      	orrs	r1, r6
    8048:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    804a:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    804e:	68ea      	ldr	r2, [r5, #12]
	get_dev_data(dev)->uart_config = *cfg;
    8050:	3204      	adds	r2, #4
    8052:	e894 0003 	ldmia.w	r4, {r0, r1}
    8056:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    805a:	e7be      	b.n	7fda <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    805c:	230e      	movs	r3, #14
    805e:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    8062:	e7e2      	b.n	802a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
		return -ENOTSUP;
    8064:	f06f 0322 	mvn.w	r3, #34	; 0x22
    8068:	e7b7      	b.n	7fda <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
    806a:	f06f 0322 	mvn.w	r3, #34	; 0x22
    806e:	e7b4      	b.n	7fda <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    8070:	f06f 0322 	mvn.w	r3, #34	; 0x22
    8074:	e7b1      	b.n	7fda <uarte_nrfx_configure+0x16>

00008076 <uarte_nrfx_config_get>:
{
    8076:	460b      	mov	r3, r1
	return dev->data;
    8078:	68c2      	ldr	r2, [r0, #12]
	*cfg = get_dev_data(dev)->uart_config;
    807a:	6891      	ldr	r1, [r2, #8]
    807c:	6850      	ldr	r0, [r2, #4]
    807e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8082:	2000      	movs	r0, #0
    8084:	4770      	bx	lr

00008086 <uarte_nrfx_err_check>:
	return dev->config;
    8086:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8088:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    808a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    808e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8092:	4770      	bx	lr

00008094 <is_tx_ready>:
	return dev->config;
    8094:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8096:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->ppi_endtx;
    8098:	7999      	ldrb	r1, [r3, #6]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    809a:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    809e:	b92b      	cbnz	r3, 80ac <is_tx_ready+0x18>
    80a0:	b931      	cbnz	r1, 80b0 <is_tx_ready+0x1c>
    80a2:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    80a6:	b92b      	cbnz	r3, 80b4 <is_tx_ready+0x20>
    80a8:	2000      	movs	r0, #0
    80aa:	4770      	bx	lr
    80ac:	2001      	movs	r0, #1
    80ae:	4770      	bx	lr
    80b0:	2000      	movs	r0, #0
    80b2:	4770      	bx	lr
    80b4:	2001      	movs	r0, #1
}
    80b6:	4770      	bx	lr

000080b8 <tx_start>:
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    80b8:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    80bc:	f8c0 2548 	str.w	r2, [r0, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80c0:	2300      	movs	r3, #0
    80c2:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    80c6:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    80ca:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    80ce:	f8d0 3158 	ldr.w	r3, [r0, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80d2:	2301      	movs	r3, #1
    80d4:	6083      	str	r3, [r0, #8]
}
    80d6:	4770      	bx	lr

000080d8 <uarte_nrfx_poll_in>:
{
    80d8:	b410      	push	{r4}
	return dev->data;
    80da:	68c4      	ldr	r4, [r0, #12]
	return dev->config;
    80dc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    80de:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    80e0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    80e4:	b152      	cbz	r2, 80fc <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    80e6:	7b62      	ldrb	r2, [r4, #13]
    80e8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80ea:	2000      	movs	r0, #0
    80ec:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    80f0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80f4:	2201      	movs	r2, #1
    80f6:	601a      	str	r2, [r3, #0]
}
    80f8:	bc10      	pop	{r4}
    80fa:	4770      	bx	lr
		return -1;
    80fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8100:	e7fa      	b.n	80f8 <uarte_nrfx_poll_in+0x20>

00008102 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
    8102:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8104:	f7fa fec4 	bl	2e90 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8108:	f7fa ff4a 	bl	2fa0 <nrf_cc3xx_platform_mutex_init>

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    810c:	f7fe f87a 	bl	6204 <nrf_cc3xx_platform_init_no_rng>
#endif
	return res;
}
    8110:	bd08      	pop	{r3, pc}

00008112 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    8112:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    8114:	4780      	blx	r0
}
    8116:	bd08      	pop	{r3, pc}

00008118 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    8118:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    811a:	f001 fe0f 	bl	9d3c <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    811e:	bd08      	pop	{r3, pc}

00008120 <nrfx_clock_enable>:
{
    8120:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8122:	2005      	movs	r0, #5
    8124:	f7fb f888 	bl	3238 <arch_irq_is_enabled>
    8128:	b100      	cbz	r0, 812c <nrfx_clock_enable+0xc>
}
    812a:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    812c:	2005      	movs	r0, #5
    812e:	f7fb f873 	bl	3218 <arch_irq_enable>
    8132:	e7fa      	b.n	812a <nrfx_clock_enable+0xa>

00008134 <flash_page_size_get>:
}
    8134:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    8138:	4770      	bx	lr

0000813a <flash_page_count_get>:
}
    813a:	f44f 7080 	mov.w	r0, #256	; 0x100
    813e:	4770      	bx	lr

00008140 <flash_total_size_get>:
{
    8140:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
    8142:	f7ff fff7 	bl	8134 <flash_page_size_get>
    8146:	4604      	mov	r4, r0
    8148:	f7ff fff7 	bl	813a <flash_page_count_get>
}
    814c:	fb00 f004 	mul.w	r0, r0, r4
    8150:	bd10      	pop	{r4, pc}

00008152 <is_page_aligned_check>:
{
    8152:	b510      	push	{r4, lr}
    8154:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
    8156:	f7ff ffed 	bl	8134 <flash_page_size_get>
    815a:	fbb4 f3f0 	udiv	r3, r4, r0
    815e:	fb00 4013 	mls	r0, r0, r3, r4
}
    8162:	fab0 f080 	clz	r0, r0
    8166:	0940      	lsrs	r0, r0, #5
    8168:	bd10      	pop	{r4, pc}

0000816a <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    816a:	b538      	push	{r3, r4, r5, lr}
    816c:	4604      	mov	r4, r0
    816e:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
    8170:	f7fc fb8a 	bl	4888 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
    8174:	4629      	mov	r1, r5
    8176:	4620      	mov	r0, r4
    8178:	f7fc fb9a 	bl	48b0 <nvmc_word_write>

    nvmc_readonly_mode_set();
    817c:	f7fc fb7a 	bl	4874 <nvmc_readonly_mode_set>
}
    8180:	bd38      	pop	{r3, r4, r5, pc}

00008182 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    8182:	b508      	push	{r3, lr}
    return flash_total_size_get();
    8184:	f7ff ffdc 	bl	8140 <flash_total_size_get>
}
    8188:	bd08      	pop	{r3, pc}

0000818a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    818a:	b508      	push	{r3, lr}
    return flash_page_size_get();
    818c:	f7ff ffd2 	bl	8134 <flash_page_size_get>
}
    8190:	bd08      	pop	{r3, pc}

00008192 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    8192:	b508      	push	{r3, lr}
    return flash_page_count_get();
    8194:	f7ff ffd1 	bl	813a <flash_page_count_get>
}
    8198:	bd08      	pop	{r3, pc}

0000819a <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    819a:	2000      	movs	r0, #0
    819c:	4770      	bx	lr

0000819e <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    819e:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    81a0:	6803      	ldr	r3, [r0, #0]
    81a2:	1acd      	subs	r5, r1, r3
    81a4:	2d00      	cmp	r5, #0
    81a6:	dd4b      	ble.n	8240 <mbedtls_asn1_get_len+0xa2>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    81a8:	781c      	ldrb	r4, [r3, #0]
    81aa:	f993 6000 	ldrsb.w	r6, [r3]
    81ae:	2e00      	cmp	r6, #0
    81b0:	db0b      	blt.n	81ca <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    81b2:	1c5c      	adds	r4, r3, #1
    81b4:	6004      	str	r4, [r0, #0]
    81b6:	781b      	ldrb	r3, [r3, #0]
    81b8:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    81ba:	6813      	ldr	r3, [r2, #0]
    81bc:	6802      	ldr	r2, [r0, #0]
    81be:	1a89      	subs	r1, r1, r2
    81c0:	428b      	cmp	r3, r1
    81c2:	d84f      	bhi.n	8264 <mbedtls_asn1_get_len+0xc6>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
    81c4:	2000      	movs	r0, #0
}
    81c6:	bc70      	pop	{r4, r5, r6}
    81c8:	4770      	bx	lr
        switch( **p & 0x7F )
    81ca:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    81ce:	3c01      	subs	r4, #1
    81d0:	2c03      	cmp	r4, #3
    81d2:	d838      	bhi.n	8246 <mbedtls_asn1_get_len+0xa8>
    81d4:	e8df f004 	tbb	[pc, r4]
    81d8:	23150a02 	.word	0x23150a02
            if( ( end - *p ) < 2 )
    81dc:	2d01      	cmp	r5, #1
    81de:	dd35      	ble.n	824c <mbedtls_asn1_get_len+0xae>
            *len = (*p)[1];
    81e0:	785b      	ldrb	r3, [r3, #1]
    81e2:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    81e4:	6803      	ldr	r3, [r0, #0]
    81e6:	3302      	adds	r3, #2
    81e8:	6003      	str	r3, [r0, #0]
            break;
    81ea:	e7e6      	b.n	81ba <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    81ec:	2d02      	cmp	r5, #2
    81ee:	dd30      	ble.n	8252 <mbedtls_asn1_get_len+0xb4>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    81f0:	785c      	ldrb	r4, [r3, #1]
    81f2:	789b      	ldrb	r3, [r3, #2]
    81f4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    81f8:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    81fa:	6803      	ldr	r3, [r0, #0]
    81fc:	3303      	adds	r3, #3
    81fe:	6003      	str	r3, [r0, #0]
            break;
    8200:	e7db      	b.n	81ba <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 4 )
    8202:	2d03      	cmp	r5, #3
    8204:	dd28      	ble.n	8258 <mbedtls_asn1_get_len+0xba>
            *len = ( (size_t)(*p)[1] << 16 ) |
    8206:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    8208:	789c      	ldrb	r4, [r3, #2]
    820a:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    820c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    8210:	78db      	ldrb	r3, [r3, #3]
    8212:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    8214:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    8216:	6803      	ldr	r3, [r0, #0]
    8218:	3304      	adds	r3, #4
    821a:	6003      	str	r3, [r0, #0]
            break;
    821c:	e7cd      	b.n	81ba <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 5 )
    821e:	2d04      	cmp	r5, #4
    8220:	dd1d      	ble.n	825e <mbedtls_asn1_get_len+0xc0>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    8222:	785d      	ldrb	r5, [r3, #1]
    8224:	789c      	ldrb	r4, [r3, #2]
    8226:	0424      	lsls	r4, r4, #16
    8228:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    822c:	78dd      	ldrb	r5, [r3, #3]
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    822e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    8232:	791b      	ldrb	r3, [r3, #4]
    8234:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    8236:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    8238:	6803      	ldr	r3, [r0, #0]
    823a:	3305      	adds	r3, #5
    823c:	6003      	str	r3, [r0, #0]
            break;
    823e:	e7bc      	b.n	81ba <mbedtls_asn1_get_len+0x1c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    8240:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    8244:	e7bf      	b.n	81c6 <mbedtls_asn1_get_len+0x28>
    if( ( **p & 0x80 ) == 0 )
    8246:	f06f 0063 	mvn.w	r0, #99	; 0x63
    824a:	e7bc      	b.n	81c6 <mbedtls_asn1_get_len+0x28>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    824c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    8250:	e7b9      	b.n	81c6 <mbedtls_asn1_get_len+0x28>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    8252:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    8256:	e7b6      	b.n	81c6 <mbedtls_asn1_get_len+0x28>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    8258:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    825c:	e7b3      	b.n	81c6 <mbedtls_asn1_get_len+0x28>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    825e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    8262:	e7b0      	b.n	81c6 <mbedtls_asn1_get_len+0x28>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    8264:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    8268:	e7ad      	b.n	81c6 <mbedtls_asn1_get_len+0x28>

0000826a <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    826a:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
    826c:	6804      	ldr	r4, [r0, #0]
    826e:	1b0d      	subs	r5, r1, r4
    8270:	2d00      	cmp	r5, #0
    8272:	dd07      	ble.n	8284 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    8274:	7825      	ldrb	r5, [r4, #0]
    8276:	429d      	cmp	r5, r3
    8278:	d107      	bne.n	828a <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    827a:	3401      	adds	r4, #1
    827c:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
    827e:	f7ff ff8e 	bl	819e <mbedtls_asn1_get_len>
}
    8282:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    8284:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    8288:	e7fb      	b.n	8282 <mbedtls_asn1_get_tag+0x18>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    828a:	f06f 0061 	mvn.w	r0, #97	; 0x61
    828e:	e7f8      	b.n	8282 <mbedtls_asn1_get_tag+0x18>

00008290 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    8290:	b530      	push	{r4, r5, lr}
    8292:	b083      	sub	sp, #12
    8294:	4604      	mov	r4, r0
    8296:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    8298:	2302      	movs	r3, #2
    829a:	aa01      	add	r2, sp, #4
    829c:	f7ff ffe5 	bl	826a <mbedtls_asn1_get_tag>
    82a0:	b108      	cbz	r0, 82a6 <mbedtls_asn1_get_mpi+0x16>
    ret = mbedtls_mpi_read_binary( X, *p, len );

    *p += len;

    return( ret );
}
    82a2:	b003      	add	sp, #12
    82a4:	bd30      	pop	{r4, r5, pc}
    ret = mbedtls_mpi_read_binary( X, *p, len );
    82a6:	9a01      	ldr	r2, [sp, #4]
    82a8:	6821      	ldr	r1, [r4, #0]
    82aa:	4628      	mov	r0, r5
    82ac:	f000 fb74 	bl	8998 <mbedtls_mpi_read_binary>
    *p += len;
    82b0:	6823      	ldr	r3, [r4, #0]
    82b2:	9a01      	ldr	r2, [sp, #4]
    82b4:	4413      	add	r3, r2
    82b6:	6023      	str	r3, [r4, #0]
    return( ret );
    82b8:	e7f3      	b.n	82a2 <mbedtls_asn1_get_mpi+0x12>

000082ba <mpi_safe_cond_assign>:
 */
static void mpi_safe_cond_assign( size_t n,
                                  mbedtls_mpi_uint *dest,
                                  const mbedtls_mpi_uint *src,
                                  unsigned char assign )
{
    82ba:	b4f0      	push	{r4, r5, r6, r7}
    size_t i;
    for( i = 0; i < n; i++ )
    82bc:	2400      	movs	r4, #0
    82be:	4284      	cmp	r4, r0
    82c0:	d20d      	bcs.n	82de <mpi_safe_cond_assign+0x24>
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
    82c2:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    82c6:	f1c3 0701 	rsb	r7, r3, #1
    82ca:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    82ce:	fb06 f603 	mul.w	r6, r6, r3
    82d2:	fb07 6505 	mla	r5, r7, r5, r6
    82d6:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
    for( i = 0; i < n; i++ )
    82da:	3401      	adds	r4, #1
    82dc:	e7ef      	b.n	82be <mpi_safe_cond_assign+0x4>
}
    82de:	bcf0      	pop	{r4, r5, r6, r7}
    82e0:	4770      	bx	lr

000082e2 <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    82e2:	4602      	mov	r2, r0
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    82e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
    82e8:	2000      	movs	r0, #0
    82ea:	281f      	cmp	r0, #31
    82ec:	d804      	bhi.n	82f8 <mbedtls_clz+0x16>
    {
        if( x & mask ) break;
    82ee:	4213      	tst	r3, r2
    82f0:	d102      	bne.n	82f8 <mbedtls_clz+0x16>

        mask >>= 1;
    82f2:	085b      	lsrs	r3, r3, #1
    for( j = 0; j < biL; j++ )
    82f4:	3001      	adds	r0, #1
    82f6:	e7f8      	b.n	82ea <mbedtls_clz+0x8>
    }

    return j;
}
    82f8:	4770      	bx	lr

000082fa <mpi_uint_bigendian_to_host_c>:

/* Convert a big-endian byte array aligned to the size of mbedtls_mpi_uint
 * into the storage form used by mbedtls_mpi. */

static mbedtls_mpi_uint mpi_uint_bigendian_to_host_c( mbedtls_mpi_uint x )
{
    82fa:	b082      	sub	sp, #8
    82fc:	9001      	str	r0, [sp, #4]
    uint8_t i;
    unsigned char *x_ptr;
    mbedtls_mpi_uint tmp = 0;
    82fe:	2000      	movs	r0, #0

    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    8300:	aa01      	add	r2, sp, #4
    8302:	4603      	mov	r3, r0
    8304:	e005      	b.n	8312 <mpi_uint_bigendian_to_host_c+0x18>
    {
        tmp <<= CHAR_BIT;
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    8306:	f812 1b01 	ldrb.w	r1, [r2], #1
    830a:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    830e:	3301      	adds	r3, #1
    8310:	b2db      	uxtb	r3, r3
    8312:	2b03      	cmp	r3, #3
    8314:	d9f7      	bls.n	8306 <mpi_uint_bigendian_to_host_c+0xc>
    }

    return( tmp );
}
    8316:	b002      	add	sp, #8
    8318:	4770      	bx	lr

0000831a <mpi_uint_bigendian_to_host>:

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
    831a:	b508      	push	{r3, lr}
#endif /* __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ */
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
    831c:	f7ff ffed 	bl	82fa <mpi_uint_bigendian_to_host_c>
}
    8320:	bd08      	pop	{r3, pc}

00008322 <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
    8322:	b1a9      	cbz	r1, 8350 <mpi_bigendian_to_host+0x2e>
{
    8324:	b570      	push	{r4, r5, r6, lr}
    8326:	4605      	mov	r5, r0
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    8328:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    832c:	3c01      	subs	r4, #1
    832e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    8332:	42a5      	cmp	r5, r4
    8334:	d80b      	bhi.n	834e <mpi_bigendian_to_host+0x2c>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    8336:	6828      	ldr	r0, [r5, #0]
    8338:	f7ff ffef 	bl	831a <mpi_uint_bigendian_to_host>
    833c:	4606      	mov	r6, r0
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    833e:	6820      	ldr	r0, [r4, #0]
    8340:	f7ff ffeb 	bl	831a <mpi_uint_bigendian_to_host>
    8344:	f845 0b04 	str.w	r0, [r5], #4
        *cur_limb_right = tmp;
    8348:	f844 6904 	str.w	r6, [r4], #-4
         cur_limb_left++, cur_limb_right-- )
    834c:	e7f1      	b.n	8332 <mpi_bigendian_to_host+0x10>
    }
}
    834e:	bd70      	pop	{r4, r5, r6, pc}
    8350:	4770      	bx	lr

00008352 <mpi_sub_hlp>:
 *                      0 if `d >= s`.
 */
static mbedtls_mpi_uint mpi_sub_hlp( size_t n,
                                     mbedtls_mpi_uint *d,
                                     const mbedtls_mpi_uint *s )
{
    8352:	b4f0      	push	{r4, r5, r6, r7}
    8354:	4684      	mov	ip, r0
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
    8356:	2000      	movs	r0, #0
    8358:	4604      	mov	r4, r0
    835a:	4564      	cmp	r4, ip
    835c:	d211      	bcs.n	8382 <mpi_sub_hlp+0x30>
    {
        z = ( *d <  c );     *d -=  c;
    835e:	680e      	ldr	r6, [r1, #0]
    8360:	1a33      	subs	r3, r6, r0
    8362:	600b      	str	r3, [r1, #0]
        c = ( *d < *s ) + z; *d -= *s;
    8364:	f852 5b04 	ldr.w	r5, [r2], #4
    8368:	42ab      	cmp	r3, r5
    836a:	bf2c      	ite	cs
    836c:	2700      	movcs	r7, #0
    836e:	2701      	movcc	r7, #1
    8370:	4286      	cmp	r6, r0
    8372:	bf2c      	ite	cs
    8374:	4638      	movcs	r0, r7
    8376:	1c78      	addcc	r0, r7, #1
    8378:	1b5b      	subs	r3, r3, r5
    837a:	f841 3b04 	str.w	r3, [r1], #4
    for( i = c = 0; i < n; i++, s++, d++ )
    837e:	3401      	adds	r4, #1
    8380:	e7eb      	b.n	835a <mpi_sub_hlp+0x8>
    }

    return( c );
}
    8382:	bcf0      	pop	{r4, r5, r6, r7}
    8384:	4770      	bx	lr

00008386 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    8386:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    mbedtls_mpi_uint c = 0, t = 0;
    838a:	2400      	movs	r4, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    838c:	280f      	cmp	r0, #15
    838e:	f240 8173 	bls.w	8678 <mpi_mul_hlp+0x2f2>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    8392:	680d      	ldr	r5, [r1, #0]
    8394:	fba5 8903 	umull	r8, r9, r5, r3
    8398:	eb14 0408 	adds.w	r4, r4, r8
    839c:	bf2c      	ite	cs
    839e:	2501      	movcs	r5, #1
    83a0:	2500      	movcc	r5, #0
    83a2:	eb05 0709 	add.w	r7, r5, r9
    83a6:	6816      	ldr	r6, [r2, #0]
    83a8:	1936      	adds	r6, r6, r4
    83aa:	bf2c      	ite	cs
    83ac:	2501      	movcs	r5, #1
    83ae:	2500      	movcc	r5, #0
    83b0:	443d      	add	r5, r7
    83b2:	6016      	str	r6, [r2, #0]
    83b4:	684e      	ldr	r6, [r1, #4]
    83b6:	fba3 6706 	umull	r6, r7, r3, r6
    83ba:	19ad      	adds	r5, r5, r6
    83bc:	bf2c      	ite	cs
    83be:	2401      	movcs	r4, #1
    83c0:	2400      	movcc	r4, #0
    83c2:	4427      	add	r7, r4
    83c4:	6856      	ldr	r6, [r2, #4]
    83c6:	1975      	adds	r5, r6, r5
    83c8:	bf2c      	ite	cs
    83ca:	2401      	movcs	r4, #1
    83cc:	2400      	movcc	r4, #0
    83ce:	443c      	add	r4, r7
    83d0:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    83d2:	688e      	ldr	r6, [r1, #8]
    83d4:	fba3 7806 	umull	r7, r8, r3, r6
    83d8:	19e4      	adds	r4, r4, r7
    83da:	bf2c      	ite	cs
    83dc:	2601      	movcs	r6, #1
    83de:	2600      	movcc	r6, #0
    83e0:	4446      	add	r6, r8
    83e2:	6895      	ldr	r5, [r2, #8]
    83e4:	192d      	adds	r5, r5, r4
    83e6:	bf2c      	ite	cs
    83e8:	2401      	movcs	r4, #1
    83ea:	2400      	movcc	r4, #0
    83ec:	4434      	add	r4, r6
    83ee:	6095      	str	r5, [r2, #8]
    83f0:	68ce      	ldr	r6, [r1, #12]
    83f2:	fba3 7806 	umull	r7, r8, r3, r6
    83f6:	19e4      	adds	r4, r4, r7
    83f8:	bf2c      	ite	cs
    83fa:	2601      	movcs	r6, #1
    83fc:	2600      	movcc	r6, #0
    83fe:	4446      	add	r6, r8
    8400:	68d5      	ldr	r5, [r2, #12]
    8402:	192d      	adds	r5, r5, r4
    8404:	bf2c      	ite	cs
    8406:	2401      	movcs	r4, #1
    8408:	2400      	movcc	r4, #0
    840a:	4434      	add	r4, r6
    840c:	60d5      	str	r5, [r2, #12]
        MULADDC_CORE   MULADDC_CORE
    840e:	690e      	ldr	r6, [r1, #16]
    8410:	fba3 7806 	umull	r7, r8, r3, r6
    8414:	19e4      	adds	r4, r4, r7
    8416:	bf2c      	ite	cs
    8418:	2601      	movcs	r6, #1
    841a:	2600      	movcc	r6, #0
    841c:	4446      	add	r6, r8
    841e:	6915      	ldr	r5, [r2, #16]
    8420:	192d      	adds	r5, r5, r4
    8422:	bf2c      	ite	cs
    8424:	2401      	movcs	r4, #1
    8426:	2400      	movcc	r4, #0
    8428:	4434      	add	r4, r6
    842a:	6115      	str	r5, [r2, #16]
    842c:	694e      	ldr	r6, [r1, #20]
    842e:	fba3 7806 	umull	r7, r8, r3, r6
    8432:	19e4      	adds	r4, r4, r7
    8434:	bf2c      	ite	cs
    8436:	2601      	movcs	r6, #1
    8438:	2600      	movcc	r6, #0
    843a:	4446      	add	r6, r8
    843c:	6955      	ldr	r5, [r2, #20]
    843e:	192d      	adds	r5, r5, r4
    8440:	bf2c      	ite	cs
    8442:	2401      	movcs	r4, #1
    8444:	2400      	movcc	r4, #0
    8446:	4434      	add	r4, r6
    8448:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    844a:	698e      	ldr	r6, [r1, #24]
    844c:	fba3 7806 	umull	r7, r8, r3, r6
    8450:	19e4      	adds	r4, r4, r7
    8452:	bf2c      	ite	cs
    8454:	2601      	movcs	r6, #1
    8456:	2600      	movcc	r6, #0
    8458:	4446      	add	r6, r8
    845a:	6995      	ldr	r5, [r2, #24]
    845c:	192d      	adds	r5, r5, r4
    845e:	bf2c      	ite	cs
    8460:	2401      	movcs	r4, #1
    8462:	2400      	movcc	r4, #0
    8464:	4434      	add	r4, r6
    8466:	6195      	str	r5, [r2, #24]
    8468:	69ce      	ldr	r6, [r1, #28]
    846a:	fba3 7806 	umull	r7, r8, r3, r6
    846e:	19e4      	adds	r4, r4, r7
    8470:	bf2c      	ite	cs
    8472:	2601      	movcs	r6, #1
    8474:	2600      	movcc	r6, #0
    8476:	4446      	add	r6, r8
    8478:	69d5      	ldr	r5, [r2, #28]
    847a:	192d      	adds	r5, r5, r4
    847c:	bf2c      	ite	cs
    847e:	2401      	movcs	r4, #1
    8480:	2400      	movcc	r4, #0
    8482:	4434      	add	r4, r6
    8484:	61d5      	str	r5, [r2, #28]

        MULADDC_CORE   MULADDC_CORE
    8486:	6a0e      	ldr	r6, [r1, #32]
    8488:	fba3 7806 	umull	r7, r8, r3, r6
    848c:	19e4      	adds	r4, r4, r7
    848e:	bf2c      	ite	cs
    8490:	2601      	movcs	r6, #1
    8492:	2600      	movcc	r6, #0
    8494:	4446      	add	r6, r8
    8496:	6a15      	ldr	r5, [r2, #32]
    8498:	192d      	adds	r5, r5, r4
    849a:	bf2c      	ite	cs
    849c:	2401      	movcs	r4, #1
    849e:	2400      	movcc	r4, #0
    84a0:	4434      	add	r4, r6
    84a2:	6215      	str	r5, [r2, #32]
    84a4:	6a4e      	ldr	r6, [r1, #36]	; 0x24
    84a6:	fba3 7806 	umull	r7, r8, r3, r6
    84aa:	19e4      	adds	r4, r4, r7
    84ac:	bf2c      	ite	cs
    84ae:	2601      	movcs	r6, #1
    84b0:	2600      	movcc	r6, #0
    84b2:	4446      	add	r6, r8
    84b4:	6a55      	ldr	r5, [r2, #36]	; 0x24
    84b6:	192d      	adds	r5, r5, r4
    84b8:	bf2c      	ite	cs
    84ba:	2401      	movcs	r4, #1
    84bc:	2400      	movcc	r4, #0
    84be:	4434      	add	r4, r6
    84c0:	6255      	str	r5, [r2, #36]	; 0x24
        MULADDC_CORE   MULADDC_CORE
    84c2:	6a8e      	ldr	r6, [r1, #40]	; 0x28
    84c4:	fba3 7806 	umull	r7, r8, r3, r6
    84c8:	19e4      	adds	r4, r4, r7
    84ca:	bf2c      	ite	cs
    84cc:	2601      	movcs	r6, #1
    84ce:	2600      	movcc	r6, #0
    84d0:	4446      	add	r6, r8
    84d2:	6a95      	ldr	r5, [r2, #40]	; 0x28
    84d4:	192d      	adds	r5, r5, r4
    84d6:	bf2c      	ite	cs
    84d8:	2401      	movcs	r4, #1
    84da:	2400      	movcc	r4, #0
    84dc:	4434      	add	r4, r6
    84de:	6295      	str	r5, [r2, #40]	; 0x28
    84e0:	6ace      	ldr	r6, [r1, #44]	; 0x2c
    84e2:	fba3 7806 	umull	r7, r8, r3, r6
    84e6:	19e4      	adds	r4, r4, r7
    84e8:	bf2c      	ite	cs
    84ea:	2601      	movcs	r6, #1
    84ec:	2600      	movcc	r6, #0
    84ee:	4446      	add	r6, r8
    84f0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    84f2:	192d      	adds	r5, r5, r4
    84f4:	bf2c      	ite	cs
    84f6:	2401      	movcs	r4, #1
    84f8:	2400      	movcc	r4, #0
    84fa:	4434      	add	r4, r6
    84fc:	62d5      	str	r5, [r2, #44]	; 0x2c
        MULADDC_CORE   MULADDC_CORE
    84fe:	6b0e      	ldr	r6, [r1, #48]	; 0x30
    8500:	fba3 7806 	umull	r7, r8, r3, r6
    8504:	19e4      	adds	r4, r4, r7
    8506:	bf2c      	ite	cs
    8508:	2601      	movcs	r6, #1
    850a:	2600      	movcc	r6, #0
    850c:	4446      	add	r6, r8
    850e:	6b15      	ldr	r5, [r2, #48]	; 0x30
    8510:	192d      	adds	r5, r5, r4
    8512:	bf2c      	ite	cs
    8514:	2401      	movcs	r4, #1
    8516:	2400      	movcc	r4, #0
    8518:	4434      	add	r4, r6
    851a:	6315      	str	r5, [r2, #48]	; 0x30
    851c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    851e:	fba3 7806 	umull	r7, r8, r3, r6
    8522:	19e4      	adds	r4, r4, r7
    8524:	bf2c      	ite	cs
    8526:	2601      	movcs	r6, #1
    8528:	2600      	movcc	r6, #0
    852a:	4446      	add	r6, r8
    852c:	6b55      	ldr	r5, [r2, #52]	; 0x34
    852e:	192d      	adds	r5, r5, r4
    8530:	bf2c      	ite	cs
    8532:	2401      	movcs	r4, #1
    8534:	2400      	movcc	r4, #0
    8536:	4434      	add	r4, r6
    8538:	6355      	str	r5, [r2, #52]	; 0x34
        MULADDC_CORE   MULADDC_CORE
    853a:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    853c:	fba3 7806 	umull	r7, r8, r3, r6
    8540:	19e4      	adds	r4, r4, r7
    8542:	bf2c      	ite	cs
    8544:	2601      	movcs	r6, #1
    8546:	2600      	movcc	r6, #0
    8548:	4446      	add	r6, r8
    854a:	6b95      	ldr	r5, [r2, #56]	; 0x38
    854c:	192d      	adds	r5, r5, r4
    854e:	bf2c      	ite	cs
    8550:	2401      	movcs	r4, #1
    8552:	2400      	movcc	r4, #0
    8554:	4434      	add	r4, r6
    8556:	6395      	str	r5, [r2, #56]	; 0x38
    8558:	6bce      	ldr	r6, [r1, #60]	; 0x3c
    855a:	fba3 7806 	umull	r7, r8, r3, r6
    855e:	19e4      	adds	r4, r4, r7
    8560:	bf2c      	ite	cs
    8562:	2601      	movcs	r6, #1
    8564:	2600      	movcc	r6, #0
    8566:	4446      	add	r6, r8
    8568:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    856a:	192d      	adds	r5, r5, r4
    856c:	bf2c      	ite	cs
    856e:	2401      	movcs	r4, #1
    8570:	2400      	movcc	r4, #0
    8572:	4434      	add	r4, r6
    8574:	63d5      	str	r5, [r2, #60]	; 0x3c
    for( ; i >= 16; i -= 16 )
    8576:	3810      	subs	r0, #16
        MULADDC_CORE   MULADDC_CORE
    8578:	3240      	adds	r2, #64	; 0x40
    857a:	3140      	adds	r1, #64	; 0x40
    857c:	e706      	b.n	838c <mpi_mul_hlp+0x6>
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    857e:	680d      	ldr	r5, [r1, #0]
    8580:	fba5 8903 	umull	r8, r9, r5, r3
    8584:	eb14 0408 	adds.w	r4, r4, r8
    8588:	bf2c      	ite	cs
    858a:	2501      	movcs	r5, #1
    858c:	2500      	movcc	r5, #0
    858e:	eb05 0709 	add.w	r7, r5, r9
    8592:	6816      	ldr	r6, [r2, #0]
    8594:	1936      	adds	r6, r6, r4
    8596:	bf2c      	ite	cs
    8598:	2501      	movcs	r5, #1
    859a:	2500      	movcc	r5, #0
    859c:	443d      	add	r5, r7
    859e:	6016      	str	r6, [r2, #0]
    85a0:	684e      	ldr	r6, [r1, #4]
    85a2:	fba3 6706 	umull	r6, r7, r3, r6
    85a6:	19ad      	adds	r5, r5, r6
    85a8:	bf2c      	ite	cs
    85aa:	2401      	movcs	r4, #1
    85ac:	2400      	movcc	r4, #0
    85ae:	4427      	add	r7, r4
    85b0:	6856      	ldr	r6, [r2, #4]
    85b2:	1975      	adds	r5, r6, r5
    85b4:	bf2c      	ite	cs
    85b6:	2401      	movcs	r4, #1
    85b8:	2400      	movcc	r4, #0
    85ba:	443c      	add	r4, r7
    85bc:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    85be:	688e      	ldr	r6, [r1, #8]
    85c0:	fba3 7806 	umull	r7, r8, r3, r6
    85c4:	19e4      	adds	r4, r4, r7
    85c6:	bf2c      	ite	cs
    85c8:	2601      	movcs	r6, #1
    85ca:	2600      	movcc	r6, #0
    85cc:	4446      	add	r6, r8
    85ce:	6895      	ldr	r5, [r2, #8]
    85d0:	192d      	adds	r5, r5, r4
    85d2:	bf2c      	ite	cs
    85d4:	2401      	movcs	r4, #1
    85d6:	2400      	movcc	r4, #0
    85d8:	4434      	add	r4, r6
    85da:	6095      	str	r5, [r2, #8]
    85dc:	68ce      	ldr	r6, [r1, #12]
    85de:	fba3 7806 	umull	r7, r8, r3, r6
    85e2:	19e4      	adds	r4, r4, r7
    85e4:	bf2c      	ite	cs
    85e6:	2601      	movcs	r6, #1
    85e8:	2600      	movcc	r6, #0
    85ea:	4446      	add	r6, r8
    85ec:	68d5      	ldr	r5, [r2, #12]
    85ee:	192d      	adds	r5, r5, r4
    85f0:	bf2c      	ite	cs
    85f2:	2401      	movcs	r4, #1
    85f4:	2400      	movcc	r4, #0
    85f6:	4434      	add	r4, r6
    85f8:	60d5      	str	r5, [r2, #12]

        MULADDC_CORE   MULADDC_CORE
    85fa:	690e      	ldr	r6, [r1, #16]
    85fc:	fba3 7806 	umull	r7, r8, r3, r6
    8600:	19e4      	adds	r4, r4, r7
    8602:	bf2c      	ite	cs
    8604:	2601      	movcs	r6, #1
    8606:	2600      	movcc	r6, #0
    8608:	4446      	add	r6, r8
    860a:	6915      	ldr	r5, [r2, #16]
    860c:	192d      	adds	r5, r5, r4
    860e:	bf2c      	ite	cs
    8610:	2401      	movcs	r4, #1
    8612:	2400      	movcc	r4, #0
    8614:	4434      	add	r4, r6
    8616:	6115      	str	r5, [r2, #16]
    8618:	694e      	ldr	r6, [r1, #20]
    861a:	fba3 7806 	umull	r7, r8, r3, r6
    861e:	19e4      	adds	r4, r4, r7
    8620:	bf2c      	ite	cs
    8622:	2601      	movcs	r6, #1
    8624:	2600      	movcc	r6, #0
    8626:	4446      	add	r6, r8
    8628:	6955      	ldr	r5, [r2, #20]
    862a:	192d      	adds	r5, r5, r4
    862c:	bf2c      	ite	cs
    862e:	2401      	movcs	r4, #1
    8630:	2400      	movcc	r4, #0
    8632:	4434      	add	r4, r6
    8634:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    8636:	698e      	ldr	r6, [r1, #24]
    8638:	fba3 7806 	umull	r7, r8, r3, r6
    863c:	19e4      	adds	r4, r4, r7
    863e:	bf2c      	ite	cs
    8640:	2601      	movcs	r6, #1
    8642:	2600      	movcc	r6, #0
    8644:	4446      	add	r6, r8
    8646:	6995      	ldr	r5, [r2, #24]
    8648:	192d      	adds	r5, r5, r4
    864a:	bf2c      	ite	cs
    864c:	2401      	movcs	r4, #1
    864e:	2400      	movcc	r4, #0
    8650:	4434      	add	r4, r6
    8652:	6195      	str	r5, [r2, #24]
    8654:	69ce      	ldr	r6, [r1, #28]
    8656:	fba3 7806 	umull	r7, r8, r3, r6
    865a:	19e4      	adds	r4, r4, r7
    865c:	bf2c      	ite	cs
    865e:	2601      	movcs	r6, #1
    8660:	2600      	movcc	r6, #0
    8662:	4446      	add	r6, r8
    8664:	69d5      	ldr	r5, [r2, #28]
    8666:	192d      	adds	r5, r5, r4
    8668:	bf2c      	ite	cs
    866a:	2401      	movcs	r4, #1
    866c:	2400      	movcc	r4, #0
    866e:	4434      	add	r4, r6
    8670:	61d5      	str	r5, [r2, #28]
    for( ; i >= 8; i -= 8 )
    8672:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    8674:	3220      	adds	r2, #32
    8676:	3120      	adds	r1, #32
    for( ; i >= 8; i -= 8 )
    8678:	2807      	cmp	r0, #7
    867a:	d880      	bhi.n	857e <mpi_mul_hlp+0x1f8>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    867c:	b190      	cbz	r0, 86a4 <mpi_mul_hlp+0x31e>
    {
        MULADDC_INIT
        MULADDC_CORE
    867e:	f851 6b04 	ldr.w	r6, [r1], #4
    8682:	fba6 7803 	umull	r7, r8, r6, r3
    8686:	19e4      	adds	r4, r4, r7
    8688:	bf2c      	ite	cs
    868a:	2601      	movcs	r6, #1
    868c:	2600      	movcc	r6, #0
    868e:	4446      	add	r6, r8
    8690:	6815      	ldr	r5, [r2, #0]
    8692:	192d      	adds	r5, r5, r4
    8694:	bf2c      	ite	cs
    8696:	2401      	movcs	r4, #1
    8698:	2400      	movcc	r4, #0
    869a:	4434      	add	r4, r6
    869c:	f842 5b04 	str.w	r5, [r2], #4
    for( ; i > 0; i-- )
    86a0:	3801      	subs	r0, #1
    86a2:	e7eb      	b.n	867c <mpi_mul_hlp+0x2f6>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
    86a4:	6813      	ldr	r3, [r2, #0]
    86a6:	4423      	add	r3, r4
    86a8:	f842 3b04 	str.w	r3, [r2], #4
    86ac:	4621      	mov	r1, r4
    86ae:	42a3      	cmp	r3, r4
    86b0:	bf2c      	ite	cs
    86b2:	2400      	movcs	r4, #0
    86b4:	2401      	movcc	r4, #1
    }
    while( c != 0 );
    86b6:	428b      	cmp	r3, r1
    86b8:	d3f4      	bcc.n	86a4 <mpi_mul_hlp+0x31e>
}
    86ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    86be:	4770      	bx	lr

000086c0 <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
    86c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86c4:	461e      	mov	r6, r3
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
    86c6:	b1ba      	cbz	r2, 86f8 <mbedtls_int_div_int+0x38>
    86c8:	4604      	mov	r4, r0
    86ca:	4688      	mov	r8, r1
    86cc:	4617      	mov	r7, r2
    86ce:	4282      	cmp	r2, r0
    86d0:	d912      	bls.n	86f8 <mbedtls_int_div_int+0x38>
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
    86d2:	2300      	movs	r3, #0
    86d4:	4608      	mov	r0, r1
    86d6:	4621      	mov	r1, r4
    86d8:	f7f7 fd34 	bl	144 <__aeabi_uldivmod>
    86dc:	4604      	mov	r4, r0
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    86de:	2901      	cmp	r1, #1
    86e0:	bf08      	it	eq
    86e2:	2800      	cmpeq	r0, #0
    86e4:	d301      	bcc.n	86ea <mbedtls_int_div_int+0x2a>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
    86e6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff

    if( r != NULL )
    86ea:	b116      	cbz	r6, 86f2 <mbedtls_int_div_int+0x32>
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
    86ec:	fb07 8714 	mls	r7, r7, r4, r8
    86f0:	6037      	str	r7, [r6, #0]

    return (mbedtls_mpi_uint) quotient;
    86f2:	4620      	mov	r0, r4

    quotient = q1 * radix + q0;

    return quotient;
#endif
}
    86f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (r != NULL) *r = ~0;
    86f8:	b116      	cbz	r6, 8700 <mbedtls_int_div_int+0x40>
    86fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    86fe:	6033      	str	r3, [r6, #0]
        return ( ~0 );
    8700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8704:	e7f6      	b.n	86f4 <mbedtls_int_div_int+0x34>

00008706 <mpi_montg_init>:

/*
 * Fast Montgomery initialization (thanks to Tom St Denis)
 */
static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
{
    8706:	b410      	push	{r4}
    mbedtls_mpi_uint x, m0 = N->p[0];
    8708:	688b      	ldr	r3, [r1, #8]
    870a:	681c      	ldr	r4, [r3, #0]
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
    870c:	1ca3      	adds	r3, r4, #2
    870e:	005b      	lsls	r3, r3, #1
    8710:	f003 0308 	and.w	r3, r3, #8
    8714:	4423      	add	r3, r4

    for( i = biL; i >= 8; i /= 2 )
    8716:	2120      	movs	r1, #32
    8718:	e006      	b.n	8728 <mpi_montg_init+0x22>
        x *= ( 2 - ( m0 * x ) );
    871a:	fb04 f203 	mul.w	r2, r4, r3
    871e:	f1c2 0202 	rsb	r2, r2, #2
    8722:	fb02 f303 	mul.w	r3, r2, r3
    for( i = biL; i >= 8; i /= 2 )
    8726:	0849      	lsrs	r1, r1, #1
    8728:	2907      	cmp	r1, #7
    872a:	d8f6      	bhi.n	871a <mpi_montg_init+0x14>

    *mm = ~x + 1;
    872c:	425b      	negs	r3, r3
    872e:	6003      	str	r3, [r0, #0]
}
    8730:	bc10      	pop	{r4}
    8732:	4770      	bx	lr

00008734 <mbedtls_mpi_zeroize>:
{
    8734:	b508      	push	{r3, lr}
    mbedtls_platform_zeroize( v, ciL * n );
    8736:	0089      	lsls	r1, r1, #2
    8738:	f7fc fac0 	bl	4cbc <mbedtls_platform_zeroize>
}
    873c:	bd08      	pop	{r3, pc}

0000873e <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    873e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8742:	b083      	sub	sp, #12
    8744:	4681      	mov	r9, r0
    8746:	468b      	mov	fp, r1
    8748:	4692      	mov	sl, r2
    874a:	9301      	str	r3, [sp, #4]
    874c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    874e:	6862      	ldr	r2, [r4, #4]
    8750:	0092      	lsls	r2, r2, #2
    8752:	2100      	movs	r1, #0
    8754:	68a0      	ldr	r0, [r4, #8]
    8756:	f7ff fb29 	bl	7dac <memset>

    d = T->p;
    875a:	68a4      	ldr	r4, [r4, #8]
    n = N->n;
    875c:	f8da 7004 	ldr.w	r7, [sl, #4]
    m = ( B->n < n ) ? B->n : n;
    8760:	f8db 3004 	ldr.w	r3, [fp, #4]
    8764:	42bb      	cmp	r3, r7
    8766:	bf28      	it	cs
    8768:	463b      	movcs	r3, r7
    876a:	9300      	str	r3, [sp, #0]

    for( i = 0; i < n; i++ )
    876c:	2600      	movs	r6, #0
    876e:	46b8      	mov	r8, r7
    8770:	4546      	cmp	r6, r8
    8772:	d221      	bcs.n	87b8 <mpi_montmul+0x7a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
    8774:	f8d9 3008 	ldr.w	r3, [r9, #8]
    8778:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    877c:	6823      	ldr	r3, [r4, #0]
    877e:	f8db 1008 	ldr.w	r1, [fp, #8]
    8782:	680d      	ldr	r5, [r1, #0]
    8784:	fb07 3505 	mla	r5, r7, r5, r3
    8788:	9b01      	ldr	r3, [sp, #4]
    878a:	fb03 f505 	mul.w	r5, r3, r5

        mpi_mul_hlp( m, B->p, d, u0 );
    878e:	463b      	mov	r3, r7
    8790:	4622      	mov	r2, r4
    8792:	9800      	ldr	r0, [sp, #0]
    8794:	f7ff fdf7 	bl	8386 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    8798:	462b      	mov	r3, r5
    879a:	4622      	mov	r2, r4
    879c:	f8da 1008 	ldr.w	r1, [sl, #8]
    87a0:	4640      	mov	r0, r8
    87a2:	f7ff fdf0 	bl	8386 <mpi_mul_hlp>

        *d++ = u0; d[n + 1] = 0;
    87a6:	f844 7b04 	str.w	r7, [r4], #4
    87aa:	f108 0301 	add.w	r3, r8, #1
    87ae:	2200      	movs	r2, #0
    87b0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < n; i++ )
    87b4:	3601      	adds	r6, #1
    87b6:	e7db      	b.n	8770 <mpi_montmul+0x32>
    87b8:	4647      	mov	r7, r8
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    87ba:	00ba      	lsls	r2, r7, #2
    87bc:	4621      	mov	r1, r4
    87be:	f8d9 0008 	ldr.w	r0, [r9, #8]
    87c2:	f7ff facf 	bl	7d64 <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    87c6:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
    87ca:	3301      	adds	r3, #1
    87cc:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    87d0:	f8da 2008 	ldr.w	r2, [sl, #8]
    87d4:	4621      	mov	r1, r4
    87d6:	4640      	mov	r0, r8
    87d8:	f7ff fdbb 	bl	8352 <mpi_sub_hlp>
    87dc:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
    87e0:	1a1b      	subs	r3, r3, r0
    87e2:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    87e6:	b2db      	uxtb	r3, r3
    87e8:	4622      	mov	r2, r4
    87ea:	f8d9 1008 	ldr.w	r1, [r9, #8]
    87ee:	4640      	mov	r0, r8
    87f0:	f7ff fd63 	bl	82ba <mpi_safe_cond_assign>
}
    87f4:	b003      	add	sp, #12
    87f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000087fa <mpi_montred>:
 *
 * See mpi_montmul() regarding constraints and guarantees on the parameters.
 */
static void mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                         mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    87fa:	b510      	push	{r4, lr}
    87fc:	b086      	sub	sp, #24
    mbedtls_mpi_uint z = 1;
    87fe:	2401      	movs	r4, #1
    8800:	9405      	str	r4, [sp, #20]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    8802:	9402      	str	r4, [sp, #8]
    8804:	9403      	str	r4, [sp, #12]
    U.p = &z;
    8806:	ac05      	add	r4, sp, #20
    8808:	9404      	str	r4, [sp, #16]

    mpi_montmul( A, &U, N, mm, T );
    880a:	9300      	str	r3, [sp, #0]
    880c:	4613      	mov	r3, r2
    880e:	460a      	mov	r2, r1
    8810:	a902      	add	r1, sp, #8
    8812:	f7ff ff94 	bl	873e <mpi_montmul>
}
    8816:	b006      	add	sp, #24
    8818:	bd10      	pop	{r4, pc}

0000881a <mbedtls_mpi_init>:
    X->s = 1;
    881a:	2301      	movs	r3, #1
    881c:	6003      	str	r3, [r0, #0]
    X->n = 0;
    881e:	2300      	movs	r3, #0
    8820:	6043      	str	r3, [r0, #4]
    X->p = NULL;
    8822:	6083      	str	r3, [r0, #8]
}
    8824:	4770      	bx	lr

00008826 <mbedtls_mpi_free>:
    if( X == NULL )
    8826:	b178      	cbz	r0, 8848 <mbedtls_mpi_free+0x22>
{
    8828:	b510      	push	{r4, lr}
    882a:	4604      	mov	r4, r0
    if( X->p != NULL )
    882c:	6880      	ldr	r0, [r0, #8]
    882e:	b128      	cbz	r0, 883c <mbedtls_mpi_free+0x16>
        mbedtls_mpi_zeroize( X->p, X->n );
    8830:	6861      	ldr	r1, [r4, #4]
    8832:	f7ff ff7f 	bl	8734 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
    8836:	68a0      	ldr	r0, [r4, #8]
    8838:	f7fc fa2e 	bl	4c98 <mbedtls_free>
    X->s = 1;
    883c:	2301      	movs	r3, #1
    883e:	6023      	str	r3, [r4, #0]
    X->n = 0;
    8840:	2300      	movs	r3, #0
    8842:	6063      	str	r3, [r4, #4]
    X->p = NULL;
    8844:	60a3      	str	r3, [r4, #8]
}
    8846:	bd10      	pop	{r4, pc}
    8848:	4770      	bx	lr

0000884a <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    884a:	f242 7310 	movw	r3, #10000	; 0x2710
    884e:	4299      	cmp	r1, r3
    8850:	d81e      	bhi.n	8890 <mbedtls_mpi_grow+0x46>
{
    8852:	b570      	push	{r4, r5, r6, lr}
    8854:	4604      	mov	r4, r0
    8856:	460d      	mov	r5, r1
    if( X->n < nblimbs )
    8858:	6843      	ldr	r3, [r0, #4]
    885a:	428b      	cmp	r3, r1
    885c:	d301      	bcc.n	8862 <mbedtls_mpi_grow+0x18>
    return( 0 );
    885e:	2000      	movs	r0, #0
}
    8860:	bd70      	pop	{r4, r5, r6, pc}
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    8862:	2104      	movs	r1, #4
    8864:	4628      	mov	r0, r5
    8866:	f7fc fa0f 	bl	4c88 <mbedtls_calloc>
    886a:	4606      	mov	r6, r0
    886c:	b198      	cbz	r0, 8896 <mbedtls_mpi_grow+0x4c>
        if( X->p != NULL )
    886e:	68a1      	ldr	r1, [r4, #8]
    8870:	b151      	cbz	r1, 8888 <mbedtls_mpi_grow+0x3e>
            memcpy( p, X->p, X->n * ciL );
    8872:	6862      	ldr	r2, [r4, #4]
    8874:	0092      	lsls	r2, r2, #2
    8876:	f7ff fa75 	bl	7d64 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
    887a:	6861      	ldr	r1, [r4, #4]
    887c:	68a0      	ldr	r0, [r4, #8]
    887e:	f7ff ff59 	bl	8734 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
    8882:	68a0      	ldr	r0, [r4, #8]
    8884:	f7fc fa08 	bl	4c98 <mbedtls_free>
        X->n = nblimbs;
    8888:	6065      	str	r5, [r4, #4]
        X->p = p;
    888a:	60a6      	str	r6, [r4, #8]
    return( 0 );
    888c:	2000      	movs	r0, #0
    888e:	e7e7      	b.n	8860 <mbedtls_mpi_grow+0x16>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    8890:	f06f 000f 	mvn.w	r0, #15
}
    8894:	4770      	bx	lr
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    8896:	f06f 000f 	mvn.w	r0, #15
    889a:	e7e1      	b.n	8860 <mbedtls_mpi_grow+0x16>

0000889c <mbedtls_mpi_copy>:
{
    889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( X == Y )
    889e:	4288      	cmp	r0, r1
    88a0:	d02c      	beq.n	88fc <mbedtls_mpi_copy+0x60>
    88a2:	4606      	mov	r6, r0
    88a4:	460d      	mov	r5, r1
    if( Y->n == 0 )
    88a6:	684b      	ldr	r3, [r1, #4]
    88a8:	b13b      	cbz	r3, 88ba <mbedtls_mpi_copy+0x1e>
    for( i = Y->n - 1; i > 0; i-- )
    88aa:	3b01      	subs	r3, #1
    88ac:	b14b      	cbz	r3, 88c2 <mbedtls_mpi_copy+0x26>
        if( Y->p[i] != 0 )
    88ae:	68aa      	ldr	r2, [r5, #8]
    88b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    88b4:	b92a      	cbnz	r2, 88c2 <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    88b6:	3b01      	subs	r3, #1
    88b8:	e7f8      	b.n	88ac <mbedtls_mpi_copy+0x10>
        mbedtls_mpi_free( X );
    88ba:	f7ff ffb4 	bl	8826 <mbedtls_mpi_free>
        return( 0 );
    88be:	2700      	movs	r7, #0
    88c0:	e01a      	b.n	88f8 <mbedtls_mpi_copy+0x5c>
    i++;
    88c2:	1c5c      	adds	r4, r3, #1
    X->s = Y->s;
    88c4:	682b      	ldr	r3, [r5, #0]
    88c6:	6033      	str	r3, [r6, #0]
    if( X->n < i )
    88c8:	6872      	ldr	r2, [r6, #4]
    88ca:	42a2      	cmp	r2, r4
    88cc:	d206      	bcs.n	88dc <mbedtls_mpi_copy+0x40>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    88ce:	4621      	mov	r1, r4
    88d0:	4630      	mov	r0, r6
    88d2:	f7ff ffba 	bl	884a <mbedtls_mpi_grow>
    88d6:	4607      	mov	r7, r0
    88d8:	b148      	cbz	r0, 88ee <mbedtls_mpi_copy+0x52>
    88da:	e00d      	b.n	88f8 <mbedtls_mpi_copy+0x5c>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    88dc:	68b0      	ldr	r0, [r6, #8]
    88de:	1b12      	subs	r2, r2, r4
    88e0:	0092      	lsls	r2, r2, #2
    88e2:	2100      	movs	r1, #0
    88e4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    88e8:	f7ff fa60 	bl	7dac <memset>
    int ret = 0;
    88ec:	2700      	movs	r7, #0
    memcpy( X->p, Y->p, i * ciL );
    88ee:	00a2      	lsls	r2, r4, #2
    88f0:	68a9      	ldr	r1, [r5, #8]
    88f2:	68b0      	ldr	r0, [r6, #8]
    88f4:	f7ff fa36 	bl	7d64 <memcpy>
}
    88f8:	4638      	mov	r0, r7
    88fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( 0 );
    88fc:	2700      	movs	r7, #0
    88fe:	e7fb      	b.n	88f8 <mbedtls_mpi_copy+0x5c>

00008900 <mbedtls_mpi_lset>:
{
    8900:	b570      	push	{r4, r5, r6, lr}
    8902:	4604      	mov	r4, r0
    8904:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    8906:	2101      	movs	r1, #1
    8908:	f7ff ff9f 	bl	884a <mbedtls_mpi_grow>
    890c:	4606      	mov	r6, r0
    890e:	b108      	cbz	r0, 8914 <mbedtls_mpi_lset+0x14>
}
    8910:	4630      	mov	r0, r6
    8912:	bd70      	pop	{r4, r5, r6, pc}
    memset( X->p, 0, X->n * ciL );
    8914:	6862      	ldr	r2, [r4, #4]
    8916:	0092      	lsls	r2, r2, #2
    8918:	2100      	movs	r1, #0
    891a:	68a0      	ldr	r0, [r4, #8]
    891c:	f7ff fa46 	bl	7dac <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    8920:	68a3      	ldr	r3, [r4, #8]
    8922:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
    8926:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
    892a:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    892c:	2d00      	cmp	r5, #0
    892e:	db02      	blt.n	8936 <mbedtls_mpi_lset+0x36>
    8930:	2301      	movs	r3, #1
    8932:	6023      	str	r3, [r4, #0]
    return( ret );
    8934:	e7ec      	b.n	8910 <mbedtls_mpi_lset+0x10>
    X->s    = ( z < 0 ) ? -1 : 1;
    8936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    893a:	e7fa      	b.n	8932 <mbedtls_mpi_lset+0x32>

0000893c <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    893c:	6843      	ldr	r3, [r0, #4]
    893e:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    8942:	d20a      	bcs.n	895a <mbedtls_mpi_get_bit+0x1e>
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    8944:	6883      	ldr	r3, [r0, #8]
    8946:	094a      	lsrs	r2, r1, #5
    8948:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    894c:	f001 011f 	and.w	r1, r1, #31
    8950:	fa20 f101 	lsr.w	r1, r0, r1
    8954:	f001 0001 	and.w	r0, r1, #1
    8958:	4770      	bx	lr
        return( 0 );
    895a:	2000      	movs	r0, #0
}
    895c:	4770      	bx	lr

0000895e <mbedtls_mpi_bitlen>:
{
    895e:	4602      	mov	r2, r0
    if( X->n == 0 )
    8960:	6840      	ldr	r0, [r0, #4]
    8962:	b190      	cbz	r0, 898a <mbedtls_mpi_bitlen+0x2c>
{
    8964:	b510      	push	{r4, lr}
    for( i = X->n - 1; i > 0; i-- )
    8966:	1e44      	subs	r4, r0, #1
    8968:	b12c      	cbz	r4, 8976 <mbedtls_mpi_bitlen+0x18>
        if( X->p[i] != 0 )
    896a:	6893      	ldr	r3, [r2, #8]
    896c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    8970:	b90b      	cbnz	r3, 8976 <mbedtls_mpi_bitlen+0x18>
    for( i = X->n - 1; i > 0; i-- )
    8972:	3c01      	subs	r4, #1
    8974:	e7f8      	b.n	8968 <mbedtls_mpi_bitlen+0xa>
    j = biL - mbedtls_clz( X->p[i] );
    8976:	6893      	ldr	r3, [r2, #8]
    8978:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    897c:	f7ff fcb1 	bl	82e2 <mbedtls_clz>
    8980:	f1c0 0020 	rsb	r0, r0, #32
    return( ( i * biL ) + j );
    8984:	eb00 1044 	add.w	r0, r0, r4, lsl #5
}
    8988:	bd10      	pop	{r4, pc}
    898a:	4770      	bx	lr

0000898c <mbedtls_mpi_size>:
{
    898c:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    898e:	f7ff ffe6 	bl	895e <mbedtls_mpi_bitlen>
    8992:	3007      	adds	r0, #7
}
    8994:	08c0      	lsrs	r0, r0, #3
    8996:	bd08      	pop	{r3, pc}

00008998 <mbedtls_mpi_read_binary>:
{
    8998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    899c:	4605      	mov	r5, r0
    899e:	460f      	mov	r7, r1
    89a0:	4616      	mov	r6, r2
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    89a2:	f012 0303 	ands.w	r3, r2, #3
    89a6:	bf18      	it	ne
    89a8:	2301      	movne	r3, #1
    89aa:	eb03 0492 	add.w	r4, r3, r2, lsr #2
    size_t const overhead = ( limbs * ciL ) - buflen;
    89ae:	ebc2 0984 	rsb	r9, r2, r4, lsl #2
    if( X->n != limbs )
    89b2:	6843      	ldr	r3, [r0, #4]
    89b4:	42a3      	cmp	r3, r4
    89b6:	d00a      	beq.n	89ce <mbedtls_mpi_read_binary+0x36>
        mbedtls_mpi_free( X );
    89b8:	f7ff ff35 	bl	8826 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
    89bc:	4628      	mov	r0, r5
    89be:	f7ff ff2c 	bl	881a <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    89c2:	4621      	mov	r1, r4
    89c4:	4628      	mov	r0, r5
    89c6:	f7ff ff40 	bl	884a <mbedtls_mpi_grow>
    89ca:	4680      	mov	r8, r0
    89cc:	b980      	cbnz	r0, 89f0 <mbedtls_mpi_read_binary+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    89ce:	2100      	movs	r1, #0
    89d0:	4628      	mov	r0, r5
    89d2:	f7ff ff95 	bl	8900 <mbedtls_mpi_lset>
    89d6:	4680      	mov	r8, r0
    89d8:	b950      	cbnz	r0, 89f0 <mbedtls_mpi_read_binary+0x58>
    if( buf != NULL )
    89da:	b14f      	cbz	r7, 89f0 <mbedtls_mpi_read_binary+0x58>
        Xp = (unsigned char*) X->p;
    89dc:	68a8      	ldr	r0, [r5, #8]
        memcpy( Xp + overhead, buf, buflen );
    89de:	4632      	mov	r2, r6
    89e0:	4639      	mov	r1, r7
    89e2:	4448      	add	r0, r9
    89e4:	f7ff f9be 	bl	7d64 <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
    89e8:	4621      	mov	r1, r4
    89ea:	68a8      	ldr	r0, [r5, #8]
    89ec:	f7ff fc99 	bl	8322 <mpi_bigendian_to_host>
}
    89f0:	4640      	mov	r0, r8
    89f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000089f6 <mbedtls_mpi_write_binary>:
{
    89f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89f8:	4606      	mov	r6, r0
    89fa:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
    89fc:	6873      	ldr	r3, [r6, #4]
    89fe:	009f      	lsls	r7, r3, #2
    if( stored_bytes < buflen )
    8a00:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    8a04:	d80f      	bhi.n	8a26 <mbedtls_mpi_write_binary+0x30>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    8a06:	4613      	mov	r3, r2
    8a08:	42bb      	cmp	r3, r7
    8a0a:	d213      	bcs.n	8a34 <mbedtls_mpi_write_binary+0x3e>
            if( GET_BYTE( X, i ) != 0 )
    8a0c:	68b4      	ldr	r4, [r6, #8]
    8a0e:	f023 0103 	bic.w	r1, r3, #3
    8a12:	5864      	ldr	r4, [r4, r1]
    8a14:	f003 0503 	and.w	r5, r3, #3
    8a18:	00ed      	lsls	r5, r5, #3
    8a1a:	40ec      	lsrs	r4, r5
    8a1c:	f014 0fff 	tst.w	r4, #255	; 0xff
    8a20:	d11a      	bne.n	8a58 <mbedtls_mpi_write_binary+0x62>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    8a22:	3301      	adds	r3, #1
    8a24:	e7f0      	b.n	8a08 <mbedtls_mpi_write_binary+0x12>
        p = buf + buflen - stored_bytes;
    8a26:	1bd2      	subs	r2, r2, r7
    8a28:	188c      	adds	r4, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    8a2a:	2100      	movs	r1, #0
    8a2c:	f7ff f9be 	bl	7dac <memset>
        p = buf + buflen - stored_bytes;
    8a30:	4620      	mov	r0, r4
        bytes_to_copy = stored_bytes;
    8a32:	463a      	mov	r2, r7
    for( i = 0; i < bytes_to_copy; i++ )
    8a34:	2300      	movs	r3, #0
    8a36:	e00b      	b.n	8a50 <mbedtls_mpi_write_binary+0x5a>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    8a38:	68b4      	ldr	r4, [r6, #8]
    8a3a:	f023 0103 	bic.w	r1, r3, #3
    8a3e:	5865      	ldr	r5, [r4, r1]
    8a40:	f003 0103 	and.w	r1, r3, #3
    8a44:	00c9      	lsls	r1, r1, #3
    8a46:	40cd      	lsrs	r5, r1
    8a48:	1ad4      	subs	r4, r2, r3
    8a4a:	3c01      	subs	r4, #1
    8a4c:	5505      	strb	r5, [r0, r4]
    for( i = 0; i < bytes_to_copy; i++ )
    8a4e:	3301      	adds	r3, #1
    8a50:	429a      	cmp	r2, r3
    8a52:	d8f1      	bhi.n	8a38 <mbedtls_mpi_write_binary+0x42>
    return( 0 );
    8a54:	2000      	movs	r0, #0
}
    8a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    8a58:	f06f 0007 	mvn.w	r0, #7
    8a5c:	e7fb      	b.n	8a56 <mbedtls_mpi_write_binary+0x60>

00008a5e <mbedtls_mpi_shift_l>:
{
    8a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a60:	4605      	mov	r5, r0
    8a62:	460f      	mov	r7, r1
    v0 = count / (biL    );
    8a64:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    8a66:	f001 061f 	and.w	r6, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    8a6a:	f7ff ff78 	bl	895e <mbedtls_mpi_bitlen>
    8a6e:	4438      	add	r0, r7
    if( X->n * biL < i )
    8a70:	686b      	ldr	r3, [r5, #4]
    8a72:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    8a76:	d810      	bhi.n	8a9a <mbedtls_mpi_shift_l+0x3c>
    if( v0 > 0 )
    8a78:	2f1f      	cmp	r7, #31
    8a7a:	d924      	bls.n	8ac6 <mbedtls_mpi_shift_l+0x68>
        for( i = X->n; i > v0; i-- )
    8a7c:	686b      	ldr	r3, [r5, #4]
    8a7e:	42a3      	cmp	r3, r4
    8a80:	d91f      	bls.n	8ac2 <mbedtls_mpi_shift_l+0x64>
            X->p[i - 1] = X->p[i - v0 - 1];
    8a82:	68a9      	ldr	r1, [r5, #8]
    8a84:	1b1a      	subs	r2, r3, r4
    8a86:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    8a8a:	181f      	adds	r7, r3, r0
    8a8c:	4402      	add	r2, r0
    8a8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    8a92:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
        for( i = X->n; i > v0; i-- )
    8a96:	3b01      	subs	r3, #1
    8a98:	e7f1      	b.n	8a7e <mbedtls_mpi_shift_l+0x20>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    8a9a:	f010 011f 	ands.w	r1, r0, #31
    8a9e:	bf18      	it	ne
    8aa0:	2101      	movne	r1, #1
    8aa2:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    8aa6:	4628      	mov	r0, r5
    8aa8:	f7ff fecf 	bl	884a <mbedtls_mpi_grow>
    8aac:	2800      	cmp	r0, #0
    8aae:	d0e3      	beq.n	8a78 <mbedtls_mpi_shift_l+0x1a>
    8ab0:	e00b      	b.n	8aca <mbedtls_mpi_shift_l+0x6c>
            X->p[i - 1] = 0;
    8ab2:	68a9      	ldr	r1, [r5, #8]
    8ab4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    8ab8:	3a01      	subs	r2, #1
    8aba:	2000      	movs	r0, #0
    8abc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
        for( ; i > 0; i-- )
    8ac0:	3b01      	subs	r3, #1
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	d1f5      	bne.n	8ab2 <mbedtls_mpi_shift_l+0x54>
    if( t1 > 0 )
    8ac6:	b9c6      	cbnz	r6, 8afa <mbedtls_mpi_shift_l+0x9c>
    ret = 0;
    8ac8:	2000      	movs	r0, #0
}
    8aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            r1 = X->p[i] >> (biL - t1);
    8acc:	68a8      	ldr	r0, [r5, #8]
    8ace:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
    8ad2:	f1c6 0320 	rsb	r3, r6, #32
            X->p[i] <<= t1;
    8ad6:	fa01 f206 	lsl.w	r2, r1, r6
    8ada:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
            X->p[i] |= r0;
    8ade:	68a8      	ldr	r0, [r5, #8]
    8ae0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    8ae4:	433a      	orrs	r2, r7
    8ae6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
        for( i = v0; i < X->n; i++ )
    8aea:	3401      	adds	r4, #1
            r0 = r1;
    8aec:	fa21 f703 	lsr.w	r7, r1, r3
        for( i = v0; i < X->n; i++ )
    8af0:	6869      	ldr	r1, [r5, #4]
    8af2:	42a1      	cmp	r1, r4
    8af4:	d8ea      	bhi.n	8acc <mbedtls_mpi_shift_l+0x6e>
    ret = 0;
    8af6:	2000      	movs	r0, #0
    return( ret );
    8af8:	e7e7      	b.n	8aca <mbedtls_mpi_shift_l+0x6c>
    mbedtls_mpi_uint r0 = 0, r1;
    8afa:	2700      	movs	r7, #0
    8afc:	e7f8      	b.n	8af0 <mbedtls_mpi_shift_l+0x92>

00008afe <mbedtls_mpi_shift_r>:
{
    8afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    8b00:	6843      	ldr	r3, [r0, #4]
    8b02:	ebb3 1f51 	cmp.w	r3, r1, lsr #5
    8b06:	d325      	bcc.n	8b54 <mbedtls_mpi_shift_r+0x56>
    8b08:	094c      	lsrs	r4, r1, #5
    8b0a:	f001 071f 	and.w	r7, r1, #31
    8b0e:	42a3      	cmp	r3, r4
    8b10:	d01e      	beq.n	8b50 <mbedtls_mpi_shift_r+0x52>
    if( v0 > 0 )
    8b12:	291f      	cmp	r1, #31
    8b14:	d836      	bhi.n	8b84 <mbedtls_mpi_shift_r+0x86>
    if( v1 > 0 )
    8b16:	2f00      	cmp	r7, #0
    8b18:	d038      	beq.n	8b8c <mbedtls_mpi_shift_r+0x8e>
        for( i = X->n; i > 0; i-- )
    8b1a:	6842      	ldr	r2, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
    8b1c:	f04f 0c00 	mov.w	ip, #0
        for( i = X->n; i > 0; i-- )
    8b20:	b392      	cbz	r2, 8b88 <mbedtls_mpi_shift_r+0x8a>
            r1 = X->p[i - 1] << (biL - v1);
    8b22:	6886      	ldr	r6, [r0, #8]
    8b24:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    8b28:	3b01      	subs	r3, #1
    8b2a:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
    8b2e:	f1c7 0120 	rsb	r1, r7, #32
            X->p[i - 1] >>= v1;
    8b32:	fa25 f407 	lsr.w	r4, r5, r7
    8b36:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
            X->p[i - 1] |= r0;
    8b3a:	6886      	ldr	r6, [r0, #8]
    8b3c:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
    8b40:	ea44 040c 	orr.w	r4, r4, ip
    8b44:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
        for( i = X->n; i > 0; i-- )
    8b48:	3a01      	subs	r2, #1
            r0 = r1;
    8b4a:	fa05 fc01 	lsl.w	ip, r5, r1
    8b4e:	e7e7      	b.n	8b20 <mbedtls_mpi_shift_r+0x22>
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    8b50:	2f00      	cmp	r7, #0
    8b52:	d0de      	beq.n	8b12 <mbedtls_mpi_shift_r+0x14>
        return mbedtls_mpi_lset( X, 0 );
    8b54:	2100      	movs	r1, #0
    8b56:	f7ff fed3 	bl	8900 <mbedtls_mpi_lset>
    8b5a:	e016      	b.n	8b8a <mbedtls_mpi_shift_r+0x8c>
            X->p[i] = X->p[i + v0];
    8b5c:	6882      	ldr	r2, [r0, #8]
    8b5e:	1919      	adds	r1, r3, r4
    8b60:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    8b64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    8b68:	3301      	adds	r3, #1
    8b6a:	6842      	ldr	r2, [r0, #4]
    8b6c:	1b12      	subs	r2, r2, r4
    8b6e:	429a      	cmp	r2, r3
    8b70:	d8f4      	bhi.n	8b5c <mbedtls_mpi_shift_r+0x5e>
        for( ; i < X->n; i++ )
    8b72:	6842      	ldr	r2, [r0, #4]
    8b74:	429a      	cmp	r2, r3
    8b76:	d9ce      	bls.n	8b16 <mbedtls_mpi_shift_r+0x18>
            X->p[i] = 0;
    8b78:	6882      	ldr	r2, [r0, #8]
    8b7a:	2100      	movs	r1, #0
    8b7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for( ; i < X->n; i++ )
    8b80:	3301      	adds	r3, #1
    8b82:	e7f6      	b.n	8b72 <mbedtls_mpi_shift_r+0x74>
        for( i = 0; i < X->n - v0; i++ )
    8b84:	2300      	movs	r3, #0
    8b86:	e7f0      	b.n	8b6a <mbedtls_mpi_shift_r+0x6c>
    return( 0 );
    8b88:	2000      	movs	r0, #0
}
    8b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
    8b8c:	2000      	movs	r0, #0
    8b8e:	e7fc      	b.n	8b8a <mbedtls_mpi_shift_r+0x8c>

00008b90 <mbedtls_mpi_cmp_abs>:
{
    8b90:	b430      	push	{r4, r5}
    for( i = X->n; i > 0; i-- )
    8b92:	6843      	ldr	r3, [r0, #4]
    8b94:	b143      	cbz	r3, 8ba8 <mbedtls_mpi_cmp_abs+0x18>
        if( X->p[i - 1] != 0 )
    8b96:	6884      	ldr	r4, [r0, #8]
    8b98:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    8b9c:	3a01      	subs	r2, #1
    8b9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    8ba2:	b90a      	cbnz	r2, 8ba8 <mbedtls_mpi_cmp_abs+0x18>
    for( i = X->n; i > 0; i-- )
    8ba4:	3b01      	subs	r3, #1
    8ba6:	e7f5      	b.n	8b94 <mbedtls_mpi_cmp_abs+0x4>
    for( j = Y->n; j > 0; j-- )
    8ba8:	684a      	ldr	r2, [r1, #4]
    8baa:	b142      	cbz	r2, 8bbe <mbedtls_mpi_cmp_abs+0x2e>
        if( Y->p[j - 1] != 0 )
    8bac:	688d      	ldr	r5, [r1, #8]
    8bae:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    8bb2:	3c01      	subs	r4, #1
    8bb4:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    8bb8:	b90c      	cbnz	r4, 8bbe <mbedtls_mpi_cmp_abs+0x2e>
    for( j = Y->n; j > 0; j-- )
    8bba:	3a01      	subs	r2, #1
    8bbc:	e7f5      	b.n	8baa <mbedtls_mpi_cmp_abs+0x1a>
    if( i == 0 && j == 0 )
    8bbe:	b903      	cbnz	r3, 8bc2 <mbedtls_mpi_cmp_abs+0x32>
    8bc0:	b1c2      	cbz	r2, 8bf4 <mbedtls_mpi_cmp_abs+0x64>
    if( i > j ) return(  1 );
    8bc2:	4293      	cmp	r3, r2
    8bc4:	d818      	bhi.n	8bf8 <mbedtls_mpi_cmp_abs+0x68>
    if( j > i ) return( -1 );
    8bc6:	d203      	bcs.n	8bd0 <mbedtls_mpi_cmp_abs+0x40>
    8bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8bcc:	e015      	b.n	8bfa <mbedtls_mpi_cmp_abs+0x6a>
    for( ; i > 0; i-- )
    8bce:	3b01      	subs	r3, #1
    8bd0:	b173      	cbz	r3, 8bf0 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    8bd2:	6884      	ldr	r4, [r0, #8]
    8bd4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    8bd8:	3a01      	subs	r2, #1
    8bda:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    8bde:	688d      	ldr	r5, [r1, #8]
    8be0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    8be4:	4294      	cmp	r4, r2
    8be6:	d80a      	bhi.n	8bfe <mbedtls_mpi_cmp_abs+0x6e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    8be8:	d2f1      	bcs.n	8bce <mbedtls_mpi_cmp_abs+0x3e>
    8bea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8bee:	e004      	b.n	8bfa <mbedtls_mpi_cmp_abs+0x6a>
    return( 0 );
    8bf0:	2000      	movs	r0, #0
    8bf2:	e002      	b.n	8bfa <mbedtls_mpi_cmp_abs+0x6a>
        return( 0 );
    8bf4:	2000      	movs	r0, #0
    8bf6:	e000      	b.n	8bfa <mbedtls_mpi_cmp_abs+0x6a>
    if( i > j ) return(  1 );
    8bf8:	2001      	movs	r0, #1
}
    8bfa:	bc30      	pop	{r4, r5}
    8bfc:	4770      	bx	lr
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    8bfe:	2001      	movs	r0, #1
    8c00:	e7fb      	b.n	8bfa <mbedtls_mpi_cmp_abs+0x6a>

00008c02 <mbedtls_mpi_cmp_mpi>:
{
    8c02:	b470      	push	{r4, r5, r6}
    8c04:	4606      	mov	r6, r0
    for( i = X->n; i > 0; i-- )
    8c06:	6843      	ldr	r3, [r0, #4]
    8c08:	b143      	cbz	r3, 8c1c <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
    8c0a:	68b4      	ldr	r4, [r6, #8]
    8c0c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    8c10:	3a01      	subs	r2, #1
    8c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    8c16:	b90a      	cbnz	r2, 8c1c <mbedtls_mpi_cmp_mpi+0x1a>
    for( i = X->n; i > 0; i-- )
    8c18:	3b01      	subs	r3, #1
    8c1a:	e7f5      	b.n	8c08 <mbedtls_mpi_cmp_mpi+0x6>
    for( j = Y->n; j > 0; j-- )
    8c1c:	684a      	ldr	r2, [r1, #4]
    8c1e:	b142      	cbz	r2, 8c32 <mbedtls_mpi_cmp_mpi+0x30>
        if( Y->p[j - 1] != 0 )
    8c20:	688d      	ldr	r5, [r1, #8]
    8c22:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    8c26:	3c01      	subs	r4, #1
    8c28:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    8c2c:	b90c      	cbnz	r4, 8c32 <mbedtls_mpi_cmp_mpi+0x30>
    for( j = Y->n; j > 0; j-- )
    8c2e:	3a01      	subs	r2, #1
    8c30:	e7f5      	b.n	8c1e <mbedtls_mpi_cmp_mpi+0x1c>
    if( i == 0 && j == 0 )
    8c32:	b903      	cbnz	r3, 8c36 <mbedtls_mpi_cmp_mpi+0x34>
    8c34:	b34a      	cbz	r2, 8c8a <mbedtls_mpi_cmp_mpi+0x88>
    if( i > j ) return(  X->s );
    8c36:	4293      	cmp	r3, r2
    8c38:	d80f      	bhi.n	8c5a <mbedtls_mpi_cmp_mpi+0x58>
    if( j > i ) return( -Y->s );
    8c3a:	4293      	cmp	r3, r2
    8c3c:	d310      	bcc.n	8c60 <mbedtls_mpi_cmp_mpi+0x5e>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    8c3e:	6830      	ldr	r0, [r6, #0]
    8c40:	2800      	cmp	r0, #0
    8c42:	dd02      	ble.n	8c4a <mbedtls_mpi_cmp_mpi+0x48>
    8c44:	680a      	ldr	r2, [r1, #0]
    8c46:	2a00      	cmp	r2, #0
    8c48:	db21      	blt.n	8c8e <mbedtls_mpi_cmp_mpi+0x8c>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    8c4a:	680a      	ldr	r2, [r1, #0]
    8c4c:	2a00      	cmp	r2, #0
    8c4e:	dd0b      	ble.n	8c68 <mbedtls_mpi_cmp_mpi+0x66>
    8c50:	2800      	cmp	r0, #0
    8c52:	da09      	bge.n	8c68 <mbedtls_mpi_cmp_mpi+0x66>
    8c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8c58:	e000      	b.n	8c5c <mbedtls_mpi_cmp_mpi+0x5a>
    if( i > j ) return(  X->s );
    8c5a:	6830      	ldr	r0, [r6, #0]
}
    8c5c:	bc70      	pop	{r4, r5, r6}
    8c5e:	4770      	bx	lr
    if( j > i ) return( -Y->s );
    8c60:	6808      	ldr	r0, [r1, #0]
    8c62:	4240      	negs	r0, r0
    8c64:	e7fa      	b.n	8c5c <mbedtls_mpi_cmp_mpi+0x5a>
    for( ; i > 0; i-- )
    8c66:	3b01      	subs	r3, #1
    8c68:	b16b      	cbz	r3, 8c86 <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    8c6a:	68b4      	ldr	r4, [r6, #8]
    8c6c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    8c70:	3a01      	subs	r2, #1
    8c72:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    8c76:	688d      	ldr	r5, [r1, #8]
    8c78:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    8c7c:	4294      	cmp	r4, r2
    8c7e:	d8ed      	bhi.n	8c5c <mbedtls_mpi_cmp_mpi+0x5a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    8c80:	d2f1      	bcs.n	8c66 <mbedtls_mpi_cmp_mpi+0x64>
    8c82:	4240      	negs	r0, r0
    8c84:	e7ea      	b.n	8c5c <mbedtls_mpi_cmp_mpi+0x5a>
    return( 0 );
    8c86:	2000      	movs	r0, #0
    8c88:	e7e8      	b.n	8c5c <mbedtls_mpi_cmp_mpi+0x5a>
        return( 0 );
    8c8a:	2000      	movs	r0, #0
    8c8c:	e7e6      	b.n	8c5c <mbedtls_mpi_cmp_mpi+0x5a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    8c8e:	2001      	movs	r0, #1
    8c90:	e7e4      	b.n	8c5c <mbedtls_mpi_cmp_mpi+0x5a>

00008c92 <mbedtls_mpi_cmp_int>:
{
    8c92:	b500      	push	{lr}
    8c94:	b085      	sub	sp, #20
    *p  = ( z < 0 ) ? -z : z;
    8c96:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    8c9a:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    8c9e:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    8ca0:	2900      	cmp	r1, #0
    8ca2:	db0b      	blt.n	8cbc <mbedtls_mpi_cmp_int+0x2a>
    8ca4:	2301      	movs	r3, #1
    8ca6:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    8ca8:	2301      	movs	r3, #1
    8caa:	9302      	str	r3, [sp, #8]
    Y.p = p;
    8cac:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    8cb0:	a901      	add	r1, sp, #4
    8cb2:	f7ff ffa6 	bl	8c02 <mbedtls_mpi_cmp_mpi>
}
    8cb6:	b005      	add	sp, #20
    8cb8:	f85d fb04 	ldr.w	pc, [sp], #4
    Y.s = ( z < 0 ) ? -1 : 1;
    8cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8cc0:	e7f1      	b.n	8ca6 <mbedtls_mpi_cmp_int+0x14>

00008cc2 <mbedtls_mpi_add_abs>:
{
    8cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cc4:	4607      	mov	r7, r0
    8cc6:	4614      	mov	r4, r2
    if( X == B )
    8cc8:	4290      	cmp	r0, r2
    8cca:	d014      	beq.n	8cf6 <mbedtls_mpi_add_abs+0x34>
    if( X != A )
    8ccc:	42b9      	cmp	r1, r7
    8cce:	d005      	beq.n	8cdc <mbedtls_mpi_add_abs+0x1a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    8cd0:	4638      	mov	r0, r7
    8cd2:	f7ff fde3 	bl	889c <mbedtls_mpi_copy>
    8cd6:	4684      	mov	ip, r0
    8cd8:	2800      	cmp	r0, #0
    8cda:	d143      	bne.n	8d64 <mbedtls_mpi_add_abs+0xa2>
    X->s = 1;
    8cdc:	2301      	movs	r3, #1
    8cde:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
    8ce0:	6866      	ldr	r6, [r4, #4]
    8ce2:	b15e      	cbz	r6, 8cfc <mbedtls_mpi_add_abs+0x3a>
        if( B->p[j - 1] != 0 )
    8ce4:	68a1      	ldr	r1, [r4, #8]
    8ce6:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
    8cea:	3b01      	subs	r3, #1
    8cec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8cf0:	b923      	cbnz	r3, 8cfc <mbedtls_mpi_add_abs+0x3a>
    for( j = B->n; j > 0; j-- )
    8cf2:	3e01      	subs	r6, #1
    8cf4:	e7f5      	b.n	8ce2 <mbedtls_mpi_add_abs+0x20>
        const mbedtls_mpi *T = A; A = X; B = T;
    8cf6:	460c      	mov	r4, r1
    8cf8:	4601      	mov	r1, r0
    8cfa:	e7e7      	b.n	8ccc <mbedtls_mpi_add_abs+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    8cfc:	4631      	mov	r1, r6
    8cfe:	4638      	mov	r0, r7
    8d00:	f7ff fda3 	bl	884a <mbedtls_mpi_grow>
    8d04:	4684      	mov	ip, r0
    8d06:	bb68      	cbnz	r0, 8d64 <mbedtls_mpi_add_abs+0xa2>
    o = B->p; p = X->p; c = 0;
    8d08:	68a0      	ldr	r0, [r4, #8]
    8d0a:	68bb      	ldr	r3, [r7, #8]
    8d0c:	2400      	movs	r4, #0
    for( i = 0; i < j; i++, o++, p++ )
    8d0e:	4625      	mov	r5, r4
    8d10:	e00e      	b.n	8d30 <mbedtls_mpi_add_abs+0x6e>
        tmp= *o;
    8d12:	f850 1b04 	ldr.w	r1, [r0], #4
        *p +=  c; c  = ( *p <  c );
    8d16:	681a      	ldr	r2, [r3, #0]
    8d18:	18a4      	adds	r4, r4, r2
    8d1a:	bf2c      	ite	cs
    8d1c:	2201      	movcs	r2, #1
    8d1e:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
    8d20:	440c      	add	r4, r1
    8d22:	f843 4b04 	str.w	r4, [r3], #4
    8d26:	428c      	cmp	r4, r1
    8d28:	bf2c      	ite	cs
    8d2a:	4614      	movcs	r4, r2
    8d2c:	1c54      	addcc	r4, r2, #1
    for( i = 0; i < j; i++, o++, p++ )
    8d2e:	3501      	adds	r5, #1
    8d30:	42b5      	cmp	r5, r6
    8d32:	d3ee      	bcc.n	8d12 <mbedtls_mpi_add_abs+0x50>
    8d34:	e008      	b.n	8d48 <mbedtls_mpi_add_abs+0x86>
        *p += c; c = ( *p < c ); i++; p++;
    8d36:	681a      	ldr	r2, [r3, #0]
    8d38:	4422      	add	r2, r4
    8d3a:	f843 2b04 	str.w	r2, [r3], #4
    8d3e:	42a2      	cmp	r2, r4
    8d40:	bf2c      	ite	cs
    8d42:	2400      	movcs	r4, #0
    8d44:	2401      	movcc	r4, #1
    8d46:	3501      	adds	r5, #1
    while( c != 0 )
    8d48:	b164      	cbz	r4, 8d64 <mbedtls_mpi_add_abs+0xa2>
        if( i >= X->n )
    8d4a:	687a      	ldr	r2, [r7, #4]
    8d4c:	42aa      	cmp	r2, r5
    8d4e:	d8f2      	bhi.n	8d36 <mbedtls_mpi_add_abs+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    8d50:	1c69      	adds	r1, r5, #1
    8d52:	4638      	mov	r0, r7
    8d54:	f7ff fd79 	bl	884a <mbedtls_mpi_grow>
    8d58:	4684      	mov	ip, r0
    8d5a:	b918      	cbnz	r0, 8d64 <mbedtls_mpi_add_abs+0xa2>
            p = X->p + i;
    8d5c:	68bb      	ldr	r3, [r7, #8]
    8d5e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    8d62:	e7e8      	b.n	8d36 <mbedtls_mpi_add_abs+0x74>
}
    8d64:	4660      	mov	r0, ip
    8d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008d68 <mbedtls_mpi_sub_abs>:
{
    8d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d6a:	b085      	sub	sp, #20
    8d6c:	4605      	mov	r5, r0
    8d6e:	460c      	mov	r4, r1
    8d70:	4616      	mov	r6, r2
    mbedtls_mpi_init( &TB );
    8d72:	a801      	add	r0, sp, #4
    8d74:	f7ff fd51 	bl	881a <mbedtls_mpi_init>
    if( X == B )
    8d78:	42b5      	cmp	r5, r6
    8d7a:	d014      	beq.n	8da6 <mbedtls_mpi_sub_abs+0x3e>
    if( X != A )
    8d7c:	42a5      	cmp	r5, r4
    8d7e:	d005      	beq.n	8d8c <mbedtls_mpi_sub_abs+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    8d80:	4621      	mov	r1, r4
    8d82:	4628      	mov	r0, r5
    8d84:	f7ff fd8a 	bl	889c <mbedtls_mpi_copy>
    8d88:	4607      	mov	r7, r0
    8d8a:	b9d8      	cbnz	r0, 8dc4 <mbedtls_mpi_sub_abs+0x5c>
    X->s = 1;
    8d8c:	2301      	movs	r3, #1
    8d8e:	602b      	str	r3, [r5, #0]
    for( n = B->n; n > 0; n-- )
    8d90:	6874      	ldr	r4, [r6, #4]
    8d92:	b184      	cbz	r4, 8db6 <mbedtls_mpi_sub_abs+0x4e>
        if( B->p[n - 1] != 0 )
    8d94:	68b1      	ldr	r1, [r6, #8]
    8d96:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    8d9a:	3b01      	subs	r3, #1
    8d9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8da0:	b94b      	cbnz	r3, 8db6 <mbedtls_mpi_sub_abs+0x4e>
    for( n = B->n; n > 0; n-- )
    8da2:	3c01      	subs	r4, #1
    8da4:	e7f5      	b.n	8d92 <mbedtls_mpi_sub_abs+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
    8da6:	4631      	mov	r1, r6
    8da8:	a801      	add	r0, sp, #4
    8daa:	f7ff fd77 	bl	889c <mbedtls_mpi_copy>
    8dae:	4607      	mov	r7, r0
    8db0:	b940      	cbnz	r0, 8dc4 <mbedtls_mpi_sub_abs+0x5c>
        B = &TB;
    8db2:	ae01      	add	r6, sp, #4
    8db4:	e7e2      	b.n	8d7c <mbedtls_mpi_sub_abs+0x14>
    carry = mpi_sub_hlp( n, X->p, B->p );
    8db6:	68b2      	ldr	r2, [r6, #8]
    8db8:	68a9      	ldr	r1, [r5, #8]
    8dba:	4620      	mov	r0, r4
    8dbc:	f7ff fac9 	bl	8352 <mpi_sub_hlp>
    if( carry != 0 )
    8dc0:	b950      	cbnz	r0, 8dd8 <mbedtls_mpi_sub_abs+0x70>
    ret = 0;
    8dc2:	2700      	movs	r7, #0
    mbedtls_mpi_free( &TB );
    8dc4:	a801      	add	r0, sp, #4
    8dc6:	f7ff fd2e 	bl	8826 <mbedtls_mpi_free>
}
    8dca:	4638      	mov	r0, r7
    8dcc:	b005      	add	sp, #20
    8dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            --X->p[n];
    8dd0:	3b01      	subs	r3, #1
    8dd2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for( ; n < X->n && X->p[n] == 0; n++ )
    8dd6:	3401      	adds	r4, #1
    8dd8:	6869      	ldr	r1, [r5, #4]
    8dda:	42a1      	cmp	r1, r4
    8ddc:	d904      	bls.n	8de8 <mbedtls_mpi_sub_abs+0x80>
    8dde:	68aa      	ldr	r2, [r5, #8]
    8de0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    8de4:	2b00      	cmp	r3, #0
    8de6:	d0f3      	beq.n	8dd0 <mbedtls_mpi_sub_abs+0x68>
        if( n == X->n )
    8de8:	42a1      	cmp	r1, r4
    8dea:	d007      	beq.n	8dfc <mbedtls_mpi_sub_abs+0x94>
        --X->p[n];
    8dec:	68aa      	ldr	r2, [r5, #8]
    8dee:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    8df2:	3b01      	subs	r3, #1
    8df4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    ret = 0;
    8df8:	2700      	movs	r7, #0
    8dfa:	e7e3      	b.n	8dc4 <mbedtls_mpi_sub_abs+0x5c>
            return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    8dfc:	f06f 0709 	mvn.w	r7, #9
    8e00:	e7e3      	b.n	8dca <mbedtls_mpi_sub_abs+0x62>

00008e02 <mbedtls_mpi_add_mpi>:
{
    8e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e04:	4606      	mov	r6, r0
    8e06:	460c      	mov	r4, r1
    8e08:	4615      	mov	r5, r2
    s = A->s;
    8e0a:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s < 0 )
    8e0c:	6813      	ldr	r3, [r2, #0]
    8e0e:	fb07 f303 	mul.w	r3, r7, r3
    8e12:	2b00      	cmp	r3, #0
    8e14:	da16      	bge.n	8e44 <mbedtls_mpi_add_mpi+0x42>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    8e16:	4611      	mov	r1, r2
    8e18:	4620      	mov	r0, r4
    8e1a:	f7ff feb9 	bl	8b90 <mbedtls_mpi_cmp_abs>
    8e1e:	2800      	cmp	r0, #0
    8e20:	db07      	blt.n	8e32 <mbedtls_mpi_add_mpi+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    8e22:	462a      	mov	r2, r5
    8e24:	4621      	mov	r1, r4
    8e26:	4630      	mov	r0, r6
    8e28:	f7ff ff9e 	bl	8d68 <mbedtls_mpi_sub_abs>
    8e2c:	b970      	cbnz	r0, 8e4c <mbedtls_mpi_add_mpi+0x4a>
            X->s =  s;
    8e2e:	6037      	str	r7, [r6, #0]
    8e30:	e00c      	b.n	8e4c <mbedtls_mpi_add_mpi+0x4a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    8e32:	4622      	mov	r2, r4
    8e34:	4629      	mov	r1, r5
    8e36:	4630      	mov	r0, r6
    8e38:	f7ff ff96 	bl	8d68 <mbedtls_mpi_sub_abs>
    8e3c:	b930      	cbnz	r0, 8e4c <mbedtls_mpi_add_mpi+0x4a>
            X->s = -s;
    8e3e:	427f      	negs	r7, r7
    8e40:	6037      	str	r7, [r6, #0]
    8e42:	e003      	b.n	8e4c <mbedtls_mpi_add_mpi+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    8e44:	f7ff ff3d 	bl	8cc2 <mbedtls_mpi_add_abs>
    8e48:	b900      	cbnz	r0, 8e4c <mbedtls_mpi_add_mpi+0x4a>
        X->s = s;
    8e4a:	6037      	str	r7, [r6, #0]
}
    8e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008e4e <mbedtls_mpi_sub_mpi>:
{
    8e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e50:	4606      	mov	r6, r0
    8e52:	460c      	mov	r4, r1
    8e54:	4615      	mov	r5, r2
    s = A->s;
    8e56:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s > 0 )
    8e58:	6813      	ldr	r3, [r2, #0]
    8e5a:	fb07 f303 	mul.w	r3, r7, r3
    8e5e:	2b00      	cmp	r3, #0
    8e60:	dd17      	ble.n	8e92 <mbedtls_mpi_sub_mpi+0x44>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    8e62:	4611      	mov	r1, r2
    8e64:	4620      	mov	r0, r4
    8e66:	f7ff fe93 	bl	8b90 <mbedtls_mpi_cmp_abs>
    8e6a:	2800      	cmp	r0, #0
    8e6c:	db07      	blt.n	8e7e <mbedtls_mpi_sub_mpi+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    8e6e:	462a      	mov	r2, r5
    8e70:	4621      	mov	r1, r4
    8e72:	4630      	mov	r0, r6
    8e74:	f7ff ff78 	bl	8d68 <mbedtls_mpi_sub_abs>
    8e78:	b900      	cbnz	r0, 8e7c <mbedtls_mpi_sub_mpi+0x2e>
            X->s =  s;
    8e7a:	6037      	str	r7, [r6, #0]
}
    8e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    8e7e:	4622      	mov	r2, r4
    8e80:	4629      	mov	r1, r5
    8e82:	4630      	mov	r0, r6
    8e84:	f7ff ff70 	bl	8d68 <mbedtls_mpi_sub_abs>
    8e88:	2800      	cmp	r0, #0
    8e8a:	d1f7      	bne.n	8e7c <mbedtls_mpi_sub_mpi+0x2e>
            X->s = -s;
    8e8c:	427f      	negs	r7, r7
    8e8e:	6037      	str	r7, [r6, #0]
    8e90:	e7f4      	b.n	8e7c <mbedtls_mpi_sub_mpi+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    8e92:	f7ff ff16 	bl	8cc2 <mbedtls_mpi_add_abs>
    8e96:	2800      	cmp	r0, #0
    8e98:	d1f0      	bne.n	8e7c <mbedtls_mpi_sub_mpi+0x2e>
        X->s = s;
    8e9a:	6037      	str	r7, [r6, #0]
    return( ret );
    8e9c:	e7ee      	b.n	8e7c <mbedtls_mpi_sub_mpi+0x2e>

00008e9e <mbedtls_mpi_mul_mpi>:
{
    8e9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8ea2:	b087      	sub	sp, #28
    8ea4:	4680      	mov	r8, r0
    8ea6:	460e      	mov	r6, r1
    8ea8:	4617      	mov	r7, r2
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
    8eaa:	a803      	add	r0, sp, #12
    8eac:	f7ff fcb5 	bl	881a <mbedtls_mpi_init>
    8eb0:	4668      	mov	r0, sp
    8eb2:	f7ff fcb2 	bl	881a <mbedtls_mpi_init>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    8eb6:	45b0      	cmp	r8, r6
    8eb8:	d00c      	beq.n	8ed4 <mbedtls_mpi_mul_mpi+0x36>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    8eba:	45b8      	cmp	r8, r7
    8ebc:	d012      	beq.n	8ee4 <mbedtls_mpi_mul_mpi+0x46>
    for( i = A->n; i > 0; i-- )
    8ebe:	6875      	ldr	r5, [r6, #4]
    8ec0:	b1c5      	cbz	r5, 8ef4 <mbedtls_mpi_mul_mpi+0x56>
        if( A->p[i - 1] != 0 )
    8ec2:	68b2      	ldr	r2, [r6, #8]
    8ec4:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    8ec8:	3b01      	subs	r3, #1
    8eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ece:	b98b      	cbnz	r3, 8ef4 <mbedtls_mpi_mul_mpi+0x56>
    for( i = A->n; i > 0; i-- )
    8ed0:	3d01      	subs	r5, #1
    8ed2:	e7f5      	b.n	8ec0 <mbedtls_mpi_mul_mpi+0x22>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    8ed4:	4631      	mov	r1, r6
    8ed6:	a803      	add	r0, sp, #12
    8ed8:	f7ff fce0 	bl	889c <mbedtls_mpi_copy>
    8edc:	4681      	mov	r9, r0
    8ede:	b9d0      	cbnz	r0, 8f16 <mbedtls_mpi_mul_mpi+0x78>
    8ee0:	ae03      	add	r6, sp, #12
    8ee2:	e7ea      	b.n	8eba <mbedtls_mpi_mul_mpi+0x1c>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    8ee4:	4639      	mov	r1, r7
    8ee6:	4668      	mov	r0, sp
    8ee8:	f7ff fcd8 	bl	889c <mbedtls_mpi_copy>
    8eec:	4681      	mov	r9, r0
    8eee:	b990      	cbnz	r0, 8f16 <mbedtls_mpi_mul_mpi+0x78>
    8ef0:	466f      	mov	r7, sp
    8ef2:	e7e4      	b.n	8ebe <mbedtls_mpi_mul_mpi+0x20>
    for( j = B->n; j > 0; j-- )
    8ef4:	687c      	ldr	r4, [r7, #4]
    8ef6:	b144      	cbz	r4, 8f0a <mbedtls_mpi_mul_mpi+0x6c>
        if( B->p[j - 1] != 0 )
    8ef8:	68ba      	ldr	r2, [r7, #8]
    8efa:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    8efe:	3b01      	subs	r3, #1
    8f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f04:	b90b      	cbnz	r3, 8f0a <mbedtls_mpi_mul_mpi+0x6c>
    for( j = B->n; j > 0; j-- )
    8f06:	3c01      	subs	r4, #1
    8f08:	e7f5      	b.n	8ef6 <mbedtls_mpi_mul_mpi+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    8f0a:	1929      	adds	r1, r5, r4
    8f0c:	4640      	mov	r0, r8
    8f0e:	f7ff fc9c 	bl	884a <mbedtls_mpi_grow>
    8f12:	4681      	mov	r9, r0
    8f14:	b148      	cbz	r0, 8f2a <mbedtls_mpi_mul_mpi+0x8c>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
    8f16:	4668      	mov	r0, sp
    8f18:	f7ff fc85 	bl	8826 <mbedtls_mpi_free>
    8f1c:	a803      	add	r0, sp, #12
    8f1e:	f7ff fc82 	bl	8826 <mbedtls_mpi_free>
}
    8f22:	4648      	mov	r0, r9
    8f24:	b007      	add	sp, #28
    8f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    8f2a:	2100      	movs	r1, #0
    8f2c:	4640      	mov	r0, r8
    8f2e:	f7ff fce7 	bl	8900 <mbedtls_mpi_lset>
    8f32:	4681      	mov	r9, r0
    8f34:	2800      	cmp	r0, #0
    8f36:	d1ee      	bne.n	8f16 <mbedtls_mpi_mul_mpi+0x78>
    for( ; j > 0; j-- )
    8f38:	b17c      	cbz	r4, 8f5a <mbedtls_mpi_mul_mpi+0xbc>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
    8f3a:	f8d8 1008 	ldr.w	r1, [r8, #8]
    8f3e:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    8f42:	3a01      	subs	r2, #1
    8f44:	68bb      	ldr	r3, [r7, #8]
    8f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8f4a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8f4e:	68b1      	ldr	r1, [r6, #8]
    8f50:	4628      	mov	r0, r5
    8f52:	f7ff fa18 	bl	8386 <mpi_mul_hlp>
    for( ; j > 0; j-- )
    8f56:	3c01      	subs	r4, #1
    8f58:	e7ee      	b.n	8f38 <mbedtls_mpi_mul_mpi+0x9a>
    X->s = A->s * B->s;
    8f5a:	6832      	ldr	r2, [r6, #0]
    8f5c:	683b      	ldr	r3, [r7, #0]
    8f5e:	fb03 f302 	mul.w	r3, r3, r2
    8f62:	f8c8 3000 	str.w	r3, [r8]
    8f66:	e7d6      	b.n	8f16 <mbedtls_mpi_mul_mpi+0x78>

00008f68 <mbedtls_mpi_mul_int>:
{
    8f68:	b500      	push	{lr}
    8f6a:	b085      	sub	sp, #20
    _B.s = 1;
    8f6c:	2301      	movs	r3, #1
    8f6e:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    8f70:	9302      	str	r3, [sp, #8]
    _B.p = p;
    8f72:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;
    8f76:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    8f78:	aa01      	add	r2, sp, #4
    8f7a:	f7ff ff90 	bl	8e9e <mbedtls_mpi_mul_mpi>
}
    8f7e:	b005      	add	sp, #20
    8f80:	f85d fb04 	ldr.w	pc, [sp], #4

00008f84 <mbedtls_mpi_div_mpi>:
{
    8f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f88:	b097      	sub	sp, #92	; 0x5c
    8f8a:	4606      	mov	r6, r0
    8f8c:	460f      	mov	r7, r1
    8f8e:	4615      	mov	r5, r2
    8f90:	461c      	mov	r4, r3
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    8f92:	2100      	movs	r1, #0
    8f94:	4618      	mov	r0, r3
    8f96:	f7ff fe7c 	bl	8c92 <mbedtls_mpi_cmp_int>
    8f9a:	2800      	cmp	r0, #0
    8f9c:	f000 81b7 	beq.w	930e <mbedtls_mpi_div_mpi+0x38a>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    8fa0:	a813      	add	r0, sp, #76	; 0x4c
    8fa2:	f7ff fc3a 	bl	881a <mbedtls_mpi_init>
    8fa6:	a810      	add	r0, sp, #64	; 0x40
    8fa8:	f7ff fc37 	bl	881a <mbedtls_mpi_init>
    8fac:	a80d      	add	r0, sp, #52	; 0x34
    8fae:	f7ff fc34 	bl	881a <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
    8fb2:	a80a      	add	r0, sp, #40	; 0x28
    8fb4:	f7ff fc31 	bl	881a <mbedtls_mpi_init>
    8fb8:	a807      	add	r0, sp, #28
    8fba:	f7ff fc2e 	bl	881a <mbedtls_mpi_init>
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    8fbe:	4621      	mov	r1, r4
    8fc0:	4628      	mov	r0, r5
    8fc2:	f7ff fde5 	bl	8b90 <mbedtls_mpi_cmp_abs>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	da10      	bge.n	8fec <mbedtls_mpi_div_mpi+0x68>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    8fca:	b12e      	cbz	r6, 8fd8 <mbedtls_mpi_div_mpi+0x54>
    8fcc:	2100      	movs	r1, #0
    8fce:	4630      	mov	r0, r6
    8fd0:	f7ff fc96 	bl	8900 <mbedtls_mpi_lset>
    8fd4:	4680      	mov	r8, r0
    8fd6:	b978      	cbnz	r0, 8ff8 <mbedtls_mpi_div_mpi+0x74>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    8fd8:	b12f      	cbz	r7, 8fe6 <mbedtls_mpi_div_mpi+0x62>
    8fda:	4629      	mov	r1, r5
    8fdc:	4638      	mov	r0, r7
    8fde:	f7ff fc5d 	bl	889c <mbedtls_mpi_copy>
    8fe2:	4680      	mov	r8, r0
    8fe4:	b940      	cbnz	r0, 8ff8 <mbedtls_mpi_div_mpi+0x74>
        return( 0 );
    8fe6:	f04f 0800 	mov.w	r8, #0
    8fea:	e014      	b.n	9016 <mbedtls_mpi_div_mpi+0x92>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    8fec:	4629      	mov	r1, r5
    8fee:	a813      	add	r0, sp, #76	; 0x4c
    8ff0:	f7ff fc54 	bl	889c <mbedtls_mpi_copy>
    8ff4:	4680      	mov	r8, r0
    8ff6:	b190      	cbz	r0, 901e <mbedtls_mpi_div_mpi+0x9a>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    8ff8:	a813      	add	r0, sp, #76	; 0x4c
    8ffa:	f7ff fc14 	bl	8826 <mbedtls_mpi_free>
    8ffe:	a810      	add	r0, sp, #64	; 0x40
    9000:	f7ff fc11 	bl	8826 <mbedtls_mpi_free>
    9004:	a80d      	add	r0, sp, #52	; 0x34
    9006:	f7ff fc0e 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
    900a:	a80a      	add	r0, sp, #40	; 0x28
    900c:	f7ff fc0b 	bl	8826 <mbedtls_mpi_free>
    9010:	a807      	add	r0, sp, #28
    9012:	f7ff fc08 	bl	8826 <mbedtls_mpi_free>
}
    9016:	4640      	mov	r0, r8
    9018:	b017      	add	sp, #92	; 0x5c
    901a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    901e:	4621      	mov	r1, r4
    9020:	a810      	add	r0, sp, #64	; 0x40
    9022:	f7ff fc3b 	bl	889c <mbedtls_mpi_copy>
    9026:	4680      	mov	r8, r0
    9028:	2800      	cmp	r0, #0
    902a:	d1e5      	bne.n	8ff8 <mbedtls_mpi_div_mpi+0x74>
    X.s = Y.s = 1;
    902c:	2301      	movs	r3, #1
    902e:	9310      	str	r3, [sp, #64]	; 0x40
    9030:	9313      	str	r3, [sp, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    9032:	6869      	ldr	r1, [r5, #4]
    9034:	3102      	adds	r1, #2
    9036:	a80d      	add	r0, sp, #52	; 0x34
    9038:	f7ff fc07 	bl	884a <mbedtls_mpi_grow>
    903c:	4680      	mov	r8, r0
    903e:	2800      	cmp	r0, #0
    9040:	d1da      	bne.n	8ff8 <mbedtls_mpi_div_mpi+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    9042:	2100      	movs	r1, #0
    9044:	a80d      	add	r0, sp, #52	; 0x34
    9046:	f7ff fc5b 	bl	8900 <mbedtls_mpi_lset>
    904a:	4680      	mov	r8, r0
    904c:	2800      	cmp	r0, #0
    904e:	d1d3      	bne.n	8ff8 <mbedtls_mpi_div_mpi+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
    9050:	2102      	movs	r1, #2
    9052:	a80a      	add	r0, sp, #40	; 0x28
    9054:	f7ff fbf9 	bl	884a <mbedtls_mpi_grow>
    9058:	4680      	mov	r8, r0
    905a:	2800      	cmp	r0, #0
    905c:	d1cc      	bne.n	8ff8 <mbedtls_mpi_div_mpi+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
    905e:	2103      	movs	r1, #3
    9060:	a807      	add	r0, sp, #28
    9062:	f7ff fbf2 	bl	884a <mbedtls_mpi_grow>
    9066:	4680      	mov	r8, r0
    9068:	2800      	cmp	r0, #0
    906a:	d1c5      	bne.n	8ff8 <mbedtls_mpi_div_mpi+0x74>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    906c:	a810      	add	r0, sp, #64	; 0x40
    906e:	f7ff fc76 	bl	895e <mbedtls_mpi_bitlen>
    9072:	f000 031f 	and.w	r3, r0, #31
    if( k < biL - 1 )
    9076:	2b1e      	cmp	r3, #30
    9078:	d811      	bhi.n	909e <mbedtls_mpi_div_mpi+0x11a>
        k = biL - 1 - k;
    907a:	f1c3 031f 	rsb	r3, r3, #31
    907e:	9300      	str	r3, [sp, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    9080:	4699      	mov	r9, r3
    9082:	4619      	mov	r1, r3
    9084:	a813      	add	r0, sp, #76	; 0x4c
    9086:	f7ff fcea 	bl	8a5e <mbedtls_mpi_shift_l>
    908a:	4680      	mov	r8, r0
    908c:	2800      	cmp	r0, #0
    908e:	d1b3      	bne.n	8ff8 <mbedtls_mpi_div_mpi+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    9090:	4649      	mov	r1, r9
    9092:	a810      	add	r0, sp, #64	; 0x40
    9094:	f7ff fce3 	bl	8a5e <mbedtls_mpi_shift_l>
    9098:	4680      	mov	r8, r0
    909a:	b110      	cbz	r0, 90a2 <mbedtls_mpi_div_mpi+0x11e>
    909c:	e7ac      	b.n	8ff8 <mbedtls_mpi_div_mpi+0x74>
    else k = 0;
    909e:	2300      	movs	r3, #0
    90a0:	9300      	str	r3, [sp, #0]
    n = X.n - 1;
    90a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    90a4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    t = Y.n - 1;
    90a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    90aa:	9201      	str	r2, [sp, #4]
    90ac:	1e51      	subs	r1, r2, #1
    90ae:	9102      	str	r1, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    90b0:	eba3 0902 	sub.w	r9, r3, r2
    90b4:	ea4f 1a49 	mov.w	sl, r9, lsl #5
    90b8:	4651      	mov	r1, sl
    90ba:	a810      	add	r0, sp, #64	; 0x40
    90bc:	f7ff fccf 	bl	8a5e <mbedtls_mpi_shift_l>
    90c0:	4680      	mov	r8, r0
    90c2:	2800      	cmp	r0, #0
    90c4:	d198      	bne.n	8ff8 <mbedtls_mpi_div_mpi+0x74>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    90c6:	a910      	add	r1, sp, #64	; 0x40
    90c8:	a813      	add	r0, sp, #76	; 0x4c
    90ca:	f7ff fd9a 	bl	8c02 <mbedtls_mpi_cmp_mpi>
    90ce:	2800      	cmp	r0, #0
    90d0:	db0e      	blt.n	90f0 <mbedtls_mpi_div_mpi+0x16c>
        Z.p[n - t]++;
    90d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    90d4:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
    90d8:	3301      	adds	r3, #1
    90da:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    90de:	aa10      	add	r2, sp, #64	; 0x40
    90e0:	a913      	add	r1, sp, #76	; 0x4c
    90e2:	4608      	mov	r0, r1
    90e4:	f7ff feb3 	bl	8e4e <mbedtls_mpi_sub_mpi>
    90e8:	4680      	mov	r8, r0
    90ea:	2800      	cmp	r0, #0
    90ec:	d0eb      	beq.n	90c6 <mbedtls_mpi_div_mpi+0x142>
    90ee:	e783      	b.n	8ff8 <mbedtls_mpi_div_mpi+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    90f0:	4651      	mov	r1, sl
    90f2:	a810      	add	r0, sp, #64	; 0x40
    90f4:	f7ff fd03 	bl	8afe <mbedtls_mpi_shift_r>
    90f8:	4680      	mov	r8, r0
    90fa:	2800      	cmp	r0, #0
    90fc:	f47f af7c 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
    9100:	9603      	str	r6, [sp, #12]
    9102:	9704      	str	r7, [sp, #16]
    9104:	9f02      	ldr	r7, [sp, #8]
    9106:	9502      	str	r5, [sp, #8]
    9108:	465d      	mov	r5, fp
    910a:	9405      	str	r4, [sp, #20]
    910c:	9c01      	ldr	r4, [sp, #4]
    for( i = n; i > t ; i-- )
    910e:	42bd      	cmp	r5, r7
    9110:	f240 80cc 	bls.w	92ac <mbedtls_mpi_div_mpi+0x328>
        if( X.p[i] >= Y.p[t] )
    9114:	9915      	ldr	r1, [sp, #84]	; 0x54
    9116:	ea4f 0985 	mov.w	r9, r5, lsl #2
    911a:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
    911e:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    9122:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9124:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    9128:	4290      	cmp	r0, r2
    912a:	d317      	bcc.n	915c <mbedtls_mpi_div_mpi+0x1d8>
            Z.p[i - t - 1] = ~0;
    912c:	1beb      	subs	r3, r5, r7
    912e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9132:	3b01      	subs	r3, #1
    9134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9136:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    913a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Z.p[i - t - 1]++;
    913e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9140:	1beb      	subs	r3, r5, r7
    9142:	9301      	str	r3, [sp, #4]
    9144:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
    9148:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    914c:	ea4f 068b 	mov.w	r6, fp, lsl #2
    9150:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
    9154:	3301      	adds	r3, #1
    9156:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
    915a:	e047      	b.n	91ec <mbedtls_mpi_div_mpi+0x268>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    915c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    9160:	eb05 0c03 	add.w	ip, r5, r3
    9164:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    9168:	1bee      	subs	r6, r5, r7
    916a:	441e      	add	r6, r3
    916c:	2300      	movs	r3, #0
    916e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
    9172:	f7ff faa5 	bl	86c0 <mbedtls_int_div_int>
    9176:	f848 0026 	str.w	r0, [r8, r6, lsl #2]
    917a:	e7e0      	b.n	913e <mbedtls_mpi_div_mpi+0x1ba>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    917c:	463a      	mov	r2, r7
    917e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9180:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    9182:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9184:	f853 200a 	ldr.w	r2, [r3, sl]
    9188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    918a:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    918c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    918e:	599a      	ldr	r2, [r3, r6]
    9190:	a90a      	add	r1, sp, #40	; 0x28
    9192:	4608      	mov	r0, r1
    9194:	f7ff fee8 	bl	8f68 <mbedtls_mpi_mul_int>
    9198:	4680      	mov	r8, r0
    919a:	2800      	cmp	r0, #0
    919c:	f47f af2c 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
    91a0:	2100      	movs	r1, #0
    91a2:	a807      	add	r0, sp, #28
    91a4:	f7ff fbac 	bl	8900 <mbedtls_mpi_lset>
    91a8:	4680      	mov	r8, r0
    91aa:	2800      	cmp	r0, #0
    91ac:	f47f af24 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    91b0:	2d01      	cmp	r5, #1
    91b2:	d930      	bls.n	9216 <mbedtls_mpi_div_mpi+0x292>
    91b4:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    91b8:	3b02      	subs	r3, #2
    91ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
    91bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    91c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    91c2:	601a      	str	r2, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    91c4:	b34d      	cbz	r5, 921a <mbedtls_mpi_div_mpi+0x296>
    91c6:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    91ca:	3b01      	subs	r3, #1
    91cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
    91ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    91d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    91d4:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
    91d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    91d8:	f853 2009 	ldr.w	r2, [r3, r9]
    91dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    91de:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    91e0:	a907      	add	r1, sp, #28
    91e2:	a80a      	add	r0, sp, #40	; 0x28
    91e4:	f7ff fd0d 	bl	8c02 <mbedtls_mpi_cmp_mpi>
    91e8:	2800      	cmp	r0, #0
    91ea:	dd18      	ble.n	921e <mbedtls_mpi_div_mpi+0x29a>
            Z.p[i - t - 1]--;
    91ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    91ee:	5993      	ldr	r3, [r2, r6]
    91f0:	3b01      	subs	r3, #1
    91f2:	5193      	str	r3, [r2, r6]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    91f4:	2100      	movs	r1, #0
    91f6:	a80a      	add	r0, sp, #40	; 0x28
    91f8:	f7ff fb82 	bl	8900 <mbedtls_mpi_lset>
    91fc:	4680      	mov	r8, r0
    91fe:	2800      	cmp	r0, #0
    9200:	f47f aefa 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    9204:	2f00      	cmp	r7, #0
    9206:	d0b9      	beq.n	917c <mbedtls_mpi_div_mpi+0x1f8>
    9208:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    920c:	3b02      	subs	r3, #2
    920e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9214:	e7b3      	b.n	917e <mbedtls_mpi_div_mpi+0x1fa>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    9216:	2200      	movs	r2, #0
    9218:	e7d2      	b.n	91c0 <mbedtls_mpi_div_mpi+0x23c>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    921a:	462a      	mov	r2, r5
    921c:	e7d9      	b.n	91d2 <mbedtls_mpi_div_mpi+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    921e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9220:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    9224:	a910      	add	r1, sp, #64	; 0x40
    9226:	a80a      	add	r0, sp, #40	; 0x28
    9228:	f7ff fe9e 	bl	8f68 <mbedtls_mpi_mul_int>
    922c:	4680      	mov	r8, r0
    922e:	2800      	cmp	r0, #0
    9230:	f47f aee2 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    9234:	9b01      	ldr	r3, [sp, #4]
    9236:	1e5e      	subs	r6, r3, #1
    9238:	0176      	lsls	r6, r6, #5
    923a:	4631      	mov	r1, r6
    923c:	a80a      	add	r0, sp, #40	; 0x28
    923e:	f7ff fc0e 	bl	8a5e <mbedtls_mpi_shift_l>
    9242:	4680      	mov	r8, r0
    9244:	2800      	cmp	r0, #0
    9246:	f47f aed7 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    924a:	aa0a      	add	r2, sp, #40	; 0x28
    924c:	a913      	add	r1, sp, #76	; 0x4c
    924e:	4608      	mov	r0, r1
    9250:	f7ff fdfd 	bl	8e4e <mbedtls_mpi_sub_mpi>
    9254:	4680      	mov	r8, r0
    9256:	2800      	cmp	r0, #0
    9258:	f47f aece 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    925c:	2100      	movs	r1, #0
    925e:	a813      	add	r0, sp, #76	; 0x4c
    9260:	f7ff fd17 	bl	8c92 <mbedtls_mpi_cmp_int>
    9264:	2800      	cmp	r0, #0
    9266:	db01      	blt.n	926c <mbedtls_mpi_div_mpi+0x2e8>
    for( i = n; i > t ; i-- )
    9268:	3d01      	subs	r5, #1
    926a:	e750      	b.n	910e <mbedtls_mpi_div_mpi+0x18a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    926c:	a910      	add	r1, sp, #64	; 0x40
    926e:	a80a      	add	r0, sp, #40	; 0x28
    9270:	f7ff fb14 	bl	889c <mbedtls_mpi_copy>
    9274:	4680      	mov	r8, r0
    9276:	2800      	cmp	r0, #0
    9278:	f47f aebe 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    927c:	4631      	mov	r1, r6
    927e:	a80a      	add	r0, sp, #40	; 0x28
    9280:	f7ff fbed 	bl	8a5e <mbedtls_mpi_shift_l>
    9284:	4680      	mov	r8, r0
    9286:	2800      	cmp	r0, #0
    9288:	f47f aeb6 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    928c:	aa0a      	add	r2, sp, #40	; 0x28
    928e:	a913      	add	r1, sp, #76	; 0x4c
    9290:	4608      	mov	r0, r1
    9292:	f7ff fdb6 	bl	8e02 <mbedtls_mpi_add_mpi>
    9296:	4680      	mov	r8, r0
    9298:	2800      	cmp	r0, #0
    929a:	f47f aead 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
            Z.p[i - t - 1]--;
    929e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    92a0:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
    92a4:	3b01      	subs	r3, #1
    92a6:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
    92aa:	e7dd      	b.n	9268 <mbedtls_mpi_div_mpi+0x2e4>
    92ac:	9e03      	ldr	r6, [sp, #12]
    92ae:	9f04      	ldr	r7, [sp, #16]
    92b0:	9d02      	ldr	r5, [sp, #8]
    92b2:	9c05      	ldr	r4, [sp, #20]
    if( Q != NULL )
    92b4:	b166      	cbz	r6, 92d0 <mbedtls_mpi_div_mpi+0x34c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    92b6:	a90d      	add	r1, sp, #52	; 0x34
    92b8:	4630      	mov	r0, r6
    92ba:	f7ff faef 	bl	889c <mbedtls_mpi_copy>
    92be:	4680      	mov	r8, r0
    92c0:	2800      	cmp	r0, #0
    92c2:	f47f ae99 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
        Q->s = A->s * B->s;
    92c6:	682a      	ldr	r2, [r5, #0]
    92c8:	6823      	ldr	r3, [r4, #0]
    92ca:	fb03 f302 	mul.w	r3, r3, r2
    92ce:	6033      	str	r3, [r6, #0]
    if( R != NULL )
    92d0:	2f00      	cmp	r7, #0
    92d2:	f43f ae91 	beq.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    92d6:	9900      	ldr	r1, [sp, #0]
    92d8:	a813      	add	r0, sp, #76	; 0x4c
    92da:	f7ff fc10 	bl	8afe <mbedtls_mpi_shift_r>
    92de:	4680      	mov	r8, r0
    92e0:	2800      	cmp	r0, #0
    92e2:	f47f ae89 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
        X.s = A->s;
    92e6:	682b      	ldr	r3, [r5, #0]
    92e8:	9313      	str	r3, [sp, #76]	; 0x4c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    92ea:	a913      	add	r1, sp, #76	; 0x4c
    92ec:	4638      	mov	r0, r7
    92ee:	f7ff fad5 	bl	889c <mbedtls_mpi_copy>
    92f2:	4680      	mov	r8, r0
    92f4:	2800      	cmp	r0, #0
    92f6:	f47f ae7f 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    92fa:	2100      	movs	r1, #0
    92fc:	4638      	mov	r0, r7
    92fe:	f7ff fcc8 	bl	8c92 <mbedtls_mpi_cmp_int>
    9302:	2800      	cmp	r0, #0
    9304:	f47f ae78 	bne.w	8ff8 <mbedtls_mpi_div_mpi+0x74>
            R->s = 1;
    9308:	2301      	movs	r3, #1
    930a:	603b      	str	r3, [r7, #0]
    930c:	e674      	b.n	8ff8 <mbedtls_mpi_div_mpi+0x74>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    930e:	f06f 080b 	mvn.w	r8, #11
    9312:	e680      	b.n	9016 <mbedtls_mpi_div_mpi+0x92>

00009314 <mbedtls_mpi_mod_mpi>:
{
    9314:	b570      	push	{r4, r5, r6, lr}
    9316:	4604      	mov	r4, r0
    9318:	460e      	mov	r6, r1
    931a:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    931c:	2100      	movs	r1, #0
    931e:	4610      	mov	r0, r2
    9320:	f7ff fcb7 	bl	8c92 <mbedtls_mpi_cmp_int>
    9324:	2800      	cmp	r0, #0
    9326:	db26      	blt.n	9376 <mbedtls_mpi_mod_mpi+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    9328:	462b      	mov	r3, r5
    932a:	4632      	mov	r2, r6
    932c:	4621      	mov	r1, r4
    932e:	2000      	movs	r0, #0
    9330:	f7ff fe28 	bl	8f84 <mbedtls_mpi_div_mpi>
    9334:	4606      	mov	r6, r0
    9336:	b968      	cbnz	r0, 9354 <mbedtls_mpi_mod_mpi+0x40>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    9338:	2100      	movs	r1, #0
    933a:	4620      	mov	r0, r4
    933c:	f7ff fca9 	bl	8c92 <mbedtls_mpi_cmp_int>
    9340:	2800      	cmp	r0, #0
    9342:	da09      	bge.n	9358 <mbedtls_mpi_mod_mpi+0x44>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    9344:	462a      	mov	r2, r5
    9346:	4621      	mov	r1, r4
    9348:	4620      	mov	r0, r4
    934a:	f7ff fd5a 	bl	8e02 <mbedtls_mpi_add_mpi>
    934e:	4606      	mov	r6, r0
    9350:	2800      	cmp	r0, #0
    9352:	d0f1      	beq.n	9338 <mbedtls_mpi_mod_mpi+0x24>
}
    9354:	4630      	mov	r0, r6
    9356:	bd70      	pop	{r4, r5, r6, pc}
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    9358:	4629      	mov	r1, r5
    935a:	4620      	mov	r0, r4
    935c:	f7ff fc51 	bl	8c02 <mbedtls_mpi_cmp_mpi>
    9360:	2800      	cmp	r0, #0
    9362:	dbf7      	blt.n	9354 <mbedtls_mpi_mod_mpi+0x40>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    9364:	462a      	mov	r2, r5
    9366:	4621      	mov	r1, r4
    9368:	4620      	mov	r0, r4
    936a:	f7ff fd70 	bl	8e4e <mbedtls_mpi_sub_mpi>
    936e:	4606      	mov	r6, r0
    9370:	2800      	cmp	r0, #0
    9372:	d0f1      	beq.n	9358 <mbedtls_mpi_mod_mpi+0x44>
    9374:	e7ee      	b.n	9354 <mbedtls_mpi_mod_mpi+0x40>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    9376:	f06f 0609 	mvn.w	r6, #9
    937a:	e7eb      	b.n	9354 <mbedtls_mpi_mod_mpi+0x40>

0000937c <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    937c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9380:	f2ad 6d44 	subw	sp, sp, #1604	; 0x644
    9384:	4607      	mov	r7, r0
    9386:	4689      	mov	r9, r1
    9388:	4616      	mov	r6, r2
    938a:	461d      	mov	r5, r3
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    938c:	2100      	movs	r1, #0
    938e:	4618      	mov	r0, r3
    9390:	f7ff fc7f 	bl	8c92 <mbedtls_mpi_cmp_int>
    9394:	2800      	cmp	r0, #0
    9396:	f340 81f7 	ble.w	9788 <mbedtls_mpi_exp_mod+0x40c>
    939a:	68ab      	ldr	r3, [r5, #8]
    939c:	681b      	ldr	r3, [r3, #0]
    939e:	f013 0f01 	tst.w	r3, #1
    93a2:	f000 81f4 	beq.w	978e <mbedtls_mpi_exp_mod+0x412>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    93a6:	2100      	movs	r1, #0
    93a8:	4630      	mov	r0, r6
    93aa:	f7ff fc72 	bl	8c92 <mbedtls_mpi_cmp_int>
    93ae:	2800      	cmp	r0, #0
    93b0:	f2c0 81f0 	blt.w	9794 <mbedtls_mpi_exp_mod+0x418>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    /*
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    93b4:	4629      	mov	r1, r5
    93b6:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    93ba:	f7ff f9a4 	bl	8706 <mpi_montg_init>
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    93be:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    93c2:	f7ff fa2a 	bl	881a <mbedtls_mpi_init>
    93c6:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    93ca:	f7ff fa26 	bl	881a <mbedtls_mpi_init>
    mbedtls_mpi_init( &Apos );
    93ce:	a806      	add	r0, sp, #24
    93d0:	f7ff fa23 	bl	881a <mbedtls_mpi_init>
    memset( W, 0, sizeof( W ) );
    93d4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    93d8:	2100      	movs	r1, #0
    93da:	a809      	add	r0, sp, #36	; 0x24
    93dc:	f7fe fce6 	bl	7dac <memset>

    i = mbedtls_mpi_bitlen( E );
    93e0:	4630      	mov	r0, r6
    93e2:	f7ff fabc 	bl	895e <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    93e6:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    93ea:	d207      	bcs.n	93fc <mbedtls_mpi_exp_mod+0x80>
    93ec:	28ef      	cmp	r0, #239	; 0xef
    93ee:	d813      	bhi.n	9418 <mbedtls_mpi_exp_mod+0x9c>
    93f0:	284f      	cmp	r0, #79	; 0x4f
    93f2:	d813      	bhi.n	941c <mbedtls_mpi_exp_mod+0xa0>
    93f4:	2817      	cmp	r0, #23
    93f6:	d913      	bls.n	9420 <mbedtls_mpi_exp_mod+0xa4>
    93f8:	2403      	movs	r4, #3
    93fa:	e000      	b.n	93fe <mbedtls_mpi_exp_mod+0x82>
    93fc:	2406      	movs	r4, #6
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    93fe:	686b      	ldr	r3, [r5, #4]
    9400:	f103 0a01 	add.w	sl, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    9404:	4651      	mov	r1, sl
    9406:	4638      	mov	r0, r7
    9408:	f7ff fa1f 	bl	884a <mbedtls_mpi_grow>
    940c:	4680      	mov	r8, r0
    940e:	b148      	cbz	r0, 9424 <mbedtls_mpi_exp_mod+0xa8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    9410:	1e63      	subs	r3, r4, #1
    9412:	2501      	movs	r5, #1
    9414:	409d      	lsls	r5, r3
    9416:	e19a      	b.n	974e <mbedtls_mpi_exp_mod+0x3d2>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    9418:	2405      	movs	r4, #5
    941a:	e7f0      	b.n	93fe <mbedtls_mpi_exp_mod+0x82>
    941c:	2404      	movs	r4, #4
    941e:	e7ee      	b.n	93fe <mbedtls_mpi_exp_mod+0x82>
    9420:	2401      	movs	r4, #1
    9422:	e7ec      	b.n	93fe <mbedtls_mpi_exp_mod+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    9424:	4651      	mov	r1, sl
    9426:	a80c      	add	r0, sp, #48	; 0x30
    9428:	f7ff fa0f 	bl	884a <mbedtls_mpi_grow>
    942c:	4680      	mov	r8, r0
    942e:	2800      	cmp	r0, #0
    9430:	d1ee      	bne.n	9410 <mbedtls_mpi_exp_mod+0x94>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    9432:	ea4f 014a 	mov.w	r1, sl, lsl #1
    9436:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    943a:	f7ff fa06 	bl	884a <mbedtls_mpi_grow>
    943e:	4680      	mov	r8, r0
    9440:	2800      	cmp	r0, #0
    9442:	d1e5      	bne.n	9410 <mbedtls_mpi_exp_mod+0x94>
    neg = ( A->s == -1 );
    9444:	f8d9 3000 	ldr.w	r3, [r9]
    9448:	9305      	str	r3, [sp, #20]
    if( neg )
    944a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    944e:	d040      	beq.n	94d2 <mbedtls_mpi_exp_mod+0x156>
    if( _RR == NULL || _RR->p == NULL )
    9450:	f8dd 3668 	ldr.w	r3, [sp, #1640]	; 0x668
    9454:	2b00      	cmp	r3, #0
    9456:	d048      	beq.n	94ea <mbedtls_mpi_exp_mod+0x16e>
    9458:	689b      	ldr	r3, [r3, #8]
    945a:	2b00      	cmp	r3, #0
    945c:	d045      	beq.n	94ea <mbedtls_mpi_exp_mod+0x16e>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    945e:	220c      	movs	r2, #12
    9460:	f8dd 1668 	ldr.w	r1, [sp, #1640]	; 0x668
    9464:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    9468:	f7fe fc7c 	bl	7d64 <memcpy>
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    946c:	4629      	mov	r1, r5
    946e:	4648      	mov	r0, r9
    9470:	f7ff fbc7 	bl	8c02 <mbedtls_mpi_cmp_mpi>
    9474:	2800      	cmp	r0, #0
    9476:	db5e      	blt.n	9536 <mbedtls_mpi_exp_mod+0x1ba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    9478:	462a      	mov	r2, r5
    947a:	4649      	mov	r1, r9
    947c:	a80c      	add	r0, sp, #48	; 0x30
    947e:	f7ff ff49 	bl	9314 <mbedtls_mpi_mod_mpi>
    9482:	4680      	mov	r8, r0
    9484:	2800      	cmp	r0, #0
    9486:	d1c3      	bne.n	9410 <mbedtls_mpi_exp_mod+0x94>
    mpi_montmul( &W[1], &RR, N, mm, &T );
    9488:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    948c:	9300      	str	r3, [sp, #0]
    948e:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    9492:	462a      	mov	r2, r5
    9494:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    9498:	a80c      	add	r0, sp, #48	; 0x30
    949a:	f7ff f950 	bl	873e <mpi_montmul>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    949e:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    94a2:	4638      	mov	r0, r7
    94a4:	f7ff f9fa 	bl	889c <mbedtls_mpi_copy>
    94a8:	4680      	mov	r8, r0
    94aa:	2800      	cmp	r0, #0
    94ac:	d1b0      	bne.n	9410 <mbedtls_mpi_exp_mod+0x94>
    mpi_montred( X, N, mm, &T );
    94ae:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    94b2:	f8dd 263c 	ldr.w	r2, [sp, #1596]	; 0x63c
    94b6:	4629      	mov	r1, r5
    94b8:	4638      	mov	r0, r7
    94ba:	f7ff f99e 	bl	87fa <mpi_montred>
    if( wsize > 1 )
    94be:	2c01      	cmp	r4, #1
    94c0:	d841      	bhi.n	9546 <mbedtls_mpi_exp_mod+0x1ca>
    nblimbs = E->n;
    94c2:	f8d6 a004 	ldr.w	sl, [r6, #4]
    state   = 0;
    94c6:	2300      	movs	r3, #0
    94c8:	9304      	str	r3, [sp, #16]
    nbits   = 0;
    94ca:	469b      	mov	fp, r3
    bufsize = 0;
    94cc:	4699      	mov	r9, r3
    wbits   = 0;
    94ce:	9303      	str	r3, [sp, #12]
    94d0:	e0a8      	b.n	9624 <mbedtls_mpi_exp_mod+0x2a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    94d2:	4649      	mov	r1, r9
    94d4:	a806      	add	r0, sp, #24
    94d6:	f7ff f9e1 	bl	889c <mbedtls_mpi_copy>
    94da:	4680      	mov	r8, r0
    94dc:	2800      	cmp	r0, #0
    94de:	d197      	bne.n	9410 <mbedtls_mpi_exp_mod+0x94>
        Apos.s = 1;
    94e0:	2301      	movs	r3, #1
    94e2:	9306      	str	r3, [sp, #24]
        A = &Apos;
    94e4:	f10d 0918 	add.w	r9, sp, #24
    94e8:	e7b2      	b.n	9450 <mbedtls_mpi_exp_mod+0xd4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    94ea:	2101      	movs	r1, #1
    94ec:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    94f0:	f7ff fa06 	bl	8900 <mbedtls_mpi_lset>
    94f4:	4680      	mov	r8, r0
    94f6:	2800      	cmp	r0, #0
    94f8:	d18a      	bne.n	9410 <mbedtls_mpi_exp_mod+0x94>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    94fa:	6869      	ldr	r1, [r5, #4]
    94fc:	0189      	lsls	r1, r1, #6
    94fe:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    9502:	f7ff faac 	bl	8a5e <mbedtls_mpi_shift_l>
    9506:	4680      	mov	r8, r0
    9508:	2800      	cmp	r0, #0
    950a:	d181      	bne.n	9410 <mbedtls_mpi_exp_mod+0x94>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    950c:	462a      	mov	r2, r5
    950e:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    9512:	4608      	mov	r0, r1
    9514:	f7ff fefe 	bl	9314 <mbedtls_mpi_mod_mpi>
    9518:	4680      	mov	r8, r0
    951a:	2800      	cmp	r0, #0
    951c:	f47f af78 	bne.w	9410 <mbedtls_mpi_exp_mod+0x94>
        if( _RR != NULL )
    9520:	f8dd 3668 	ldr.w	r3, [sp, #1640]	; 0x668
    9524:	2b00      	cmp	r3, #0
    9526:	d0a1      	beq.n	946c <mbedtls_mpi_exp_mod+0xf0>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    9528:	220c      	movs	r2, #12
    952a:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    952e:	4618      	mov	r0, r3
    9530:	f7fe fc18 	bl	7d64 <memcpy>
    9534:	e79a      	b.n	946c <mbedtls_mpi_exp_mod+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    9536:	4649      	mov	r1, r9
    9538:	a80c      	add	r0, sp, #48	; 0x30
    953a:	f7ff f9af 	bl	889c <mbedtls_mpi_copy>
    953e:	4680      	mov	r8, r0
    9540:	2800      	cmp	r0, #0
    9542:	d0a1      	beq.n	9488 <mbedtls_mpi_exp_mod+0x10c>
    9544:	e764      	b.n	9410 <mbedtls_mpi_exp_mod+0x94>
        j =  one << ( wsize - 1 );
    9546:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
    954a:	f04f 0901 	mov.w	r9, #1
    954e:	fa09 f30b 	lsl.w	r3, r9, fp
    9552:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    9554:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    9558:	ab09      	add	r3, sp, #36	; 0x24
    955a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    955e:	6869      	ldr	r1, [r5, #4]
    9560:	4449      	add	r1, r9
    9562:	4650      	mov	r0, sl
    9564:	f7ff f971 	bl	884a <mbedtls_mpi_grow>
    9568:	4680      	mov	r8, r0
    956a:	2800      	cmp	r0, #0
    956c:	f47f af50 	bne.w	9410 <mbedtls_mpi_exp_mod+0x94>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    9570:	a90c      	add	r1, sp, #48	; 0x30
    9572:	4650      	mov	r0, sl
    9574:	f7ff f992 	bl	889c <mbedtls_mpi_copy>
    9578:	4680      	mov	r8, r0
    957a:	2800      	cmp	r0, #0
    957c:	f47f af48 	bne.w	9410 <mbedtls_mpi_exp_mod+0x94>
        for( i = 0; i < wsize - 1; i++ )
    9580:	f04f 0900 	mov.w	r9, #0
    9584:	e00b      	b.n	959e <mbedtls_mpi_exp_mod+0x222>
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    9586:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    958a:	9300      	str	r3, [sp, #0]
    958c:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    9590:	462a      	mov	r2, r5
    9592:	4651      	mov	r1, sl
    9594:	4650      	mov	r0, sl
    9596:	f7ff f8d2 	bl	873e <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    959a:	f109 0901 	add.w	r9, r9, #1
    959e:	45cb      	cmp	fp, r9
    95a0:	d8f1      	bhi.n	9586 <mbedtls_mpi_exp_mod+0x20a>
        for( i = j + 1; i < ( one << wsize ); i++ )
    95a2:	9b03      	ldr	r3, [sp, #12]
    95a4:	f103 0901 	add.w	r9, r3, #1
    95a8:	e00b      	b.n	95c2 <mbedtls_mpi_exp_mod+0x246>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    95aa:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    95ae:	9300      	str	r3, [sp, #0]
    95b0:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    95b4:	462a      	mov	r2, r5
    95b6:	a90c      	add	r1, sp, #48	; 0x30
    95b8:	4650      	mov	r0, sl
    95ba:	f7ff f8c0 	bl	873e <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    95be:	f109 0901 	add.w	r9, r9, #1
    95c2:	2301      	movs	r3, #1
    95c4:	40a3      	lsls	r3, r4
    95c6:	454b      	cmp	r3, r9
    95c8:	f67f af7b 	bls.w	94c2 <mbedtls_mpi_exp_mod+0x146>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    95cc:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
    95d0:	ab09      	add	r3, sp, #36	; 0x24
    95d2:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    95d6:	6869      	ldr	r1, [r5, #4]
    95d8:	3101      	adds	r1, #1
    95da:	4650      	mov	r0, sl
    95dc:	f7ff f935 	bl	884a <mbedtls_mpi_grow>
    95e0:	4680      	mov	r8, r0
    95e2:	2800      	cmp	r0, #0
    95e4:	f47f af14 	bne.w	9410 <mbedtls_mpi_exp_mod+0x94>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    95e8:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
    95ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    95f0:	ab09      	add	r3, sp, #36	; 0x24
    95f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    95f6:	4650      	mov	r0, sl
    95f8:	f7ff f950 	bl	889c <mbedtls_mpi_copy>
    95fc:	4680      	mov	r8, r0
    95fe:	2800      	cmp	r0, #0
    9600:	d0d3      	beq.n	95aa <mbedtls_mpi_exp_mod+0x22e>
    9602:	e705      	b.n	9410 <mbedtls_mpi_exp_mod+0x94>
        if( ei == 0 && state == 1 )
    9604:	b913      	cbnz	r3, 960c <mbedtls_mpi_exp_mod+0x290>
    9606:	9a04      	ldr	r2, [sp, #16]
    9608:	2a01      	cmp	r2, #1
    960a:	d023      	beq.n	9654 <mbedtls_mpi_exp_mod+0x2d8>
        nbits++;
    960c:	f10b 0b01 	add.w	fp, fp, #1
        wbits |= ( ei << ( wsize - nbits ) );
    9610:	eba4 020b 	sub.w	r2, r4, fp
    9614:	4093      	lsls	r3, r2
    9616:	9a03      	ldr	r2, [sp, #12]
    9618:	431a      	orrs	r2, r3
    961a:	9203      	str	r2, [sp, #12]
        if( nbits == wsize )
    961c:	455c      	cmp	r4, fp
    961e:	d047      	beq.n	96b0 <mbedtls_mpi_exp_mod+0x334>
        state = 2;
    9620:	2302      	movs	r3, #2
    9622:	9304      	str	r3, [sp, #16]
        if( bufsize == 0 )
    9624:	f1b9 0f00 	cmp.w	r9, #0
    9628:	d106      	bne.n	9638 <mbedtls_mpi_exp_mod+0x2bc>
            if( nblimbs == 0 )
    962a:	f1ba 0f00 	cmp.w	sl, #0
    962e:	d062      	beq.n	96f6 <mbedtls_mpi_exp_mod+0x37a>
            nblimbs--;
    9630:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    9634:	f04f 0920 	mov.w	r9, #32
        bufsize--;
    9638:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
        ei = (E->p[nblimbs] >> bufsize) & 1;
    963c:	68b3      	ldr	r3, [r6, #8]
    963e:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    9642:	fa23 f309 	lsr.w	r3, r3, r9
        if( ei == 0 && state == 0 )
    9646:	f013 0301 	ands.w	r3, r3, #1
    964a:	d1db      	bne.n	9604 <mbedtls_mpi_exp_mod+0x288>
    964c:	9a04      	ldr	r2, [sp, #16]
    964e:	2a00      	cmp	r2, #0
    9650:	d1d8      	bne.n	9604 <mbedtls_mpi_exp_mod+0x288>
    9652:	e7e7      	b.n	9624 <mbedtls_mpi_exp_mod+0x2a8>
            mpi_montmul( X, X, N, mm, &T );
    9654:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    9658:	9300      	str	r3, [sp, #0]
    965a:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    965e:	462a      	mov	r2, r5
    9660:	4639      	mov	r1, r7
    9662:	4638      	mov	r0, r7
    9664:	f7ff f86b 	bl	873e <mpi_montmul>
            continue;
    9668:	e7dc      	b.n	9624 <mbedtls_mpi_exp_mod+0x2a8>
                mpi_montmul( X, X, N, mm, &T );
    966a:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    966e:	9300      	str	r3, [sp, #0]
    9670:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    9674:	462a      	mov	r2, r5
    9676:	4639      	mov	r1, r7
    9678:	4638      	mov	r0, r7
    967a:	f7ff f860 	bl	873e <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    967e:	f10b 0b01 	add.w	fp, fp, #1
    9682:	45a3      	cmp	fp, r4
    9684:	d3f1      	bcc.n	966a <mbedtls_mpi_exp_mod+0x2ee>
            mpi_montmul( X, &W[wbits], N, mm, &T );
    9686:	9b03      	ldr	r3, [sp, #12]
    9688:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    968c:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    9690:	9300      	str	r3, [sp, #0]
    9692:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    9696:	462a      	mov	r2, r5
    9698:	a809      	add	r0, sp, #36	; 0x24
    969a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    969e:	4638      	mov	r0, r7
    96a0:	f7ff f84d 	bl	873e <mpi_montmul>
            state--;
    96a4:	2301      	movs	r3, #1
    96a6:	9304      	str	r3, [sp, #16]
            nbits = 0;
    96a8:	2300      	movs	r3, #0
    96aa:	9303      	str	r3, [sp, #12]
            wbits = 0;
    96ac:	469b      	mov	fp, r3
    96ae:	e7b9      	b.n	9624 <mbedtls_mpi_exp_mod+0x2a8>
            for( i = 0; i < wsize; i++ )
    96b0:	f04f 0b00 	mov.w	fp, #0
    96b4:	e7e5      	b.n	9682 <mbedtls_mpi_exp_mod+0x306>
    for( i = 0; i < nbits; i++ )
    96b6:	f10a 0a01 	add.w	sl, sl, #1
    96ba:	45da      	cmp	sl, fp
    96bc:	d21e      	bcs.n	96fc <mbedtls_mpi_exp_mod+0x380>
        mpi_montmul( X, X, N, mm, &T );
    96be:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    96c2:	9300      	str	r3, [sp, #0]
    96c4:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    96c8:	462a      	mov	r2, r5
    96ca:	4639      	mov	r1, r7
    96cc:	4638      	mov	r0, r7
    96ce:	f7ff f836 	bl	873e <mpi_montmul>
        wbits <<= 1;
    96d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
        if( ( wbits & ( one << wsize ) ) != 0 )
    96d6:	2301      	movs	r3, #1
    96d8:	40a3      	lsls	r3, r4
    96da:	ea13 0f09 	tst.w	r3, r9
    96de:	d0ea      	beq.n	96b6 <mbedtls_mpi_exp_mod+0x33a>
            mpi_montmul( X, &W[1], N, mm, &T );
    96e0:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    96e4:	9300      	str	r3, [sp, #0]
    96e6:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    96ea:	462a      	mov	r2, r5
    96ec:	a90c      	add	r1, sp, #48	; 0x30
    96ee:	4638      	mov	r0, r7
    96f0:	f7ff f825 	bl	873e <mpi_montmul>
    96f4:	e7df      	b.n	96b6 <mbedtls_mpi_exp_mod+0x33a>
    96f6:	f8dd 900c 	ldr.w	r9, [sp, #12]
    96fa:	e7de      	b.n	96ba <mbedtls_mpi_exp_mod+0x33e>
    mpi_montred( X, N, mm, &T );
    96fc:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    9700:	f8dd 263c 	ldr.w	r2, [sp, #1596]	; 0x63c
    9704:	4629      	mov	r1, r5
    9706:	4638      	mov	r0, r7
    9708:	f7ff f877 	bl	87fa <mpi_montred>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    970c:	9b05      	ldr	r3, [sp, #20]
    970e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9712:	f47f ae7d 	bne.w	9410 <mbedtls_mpi_exp_mod+0x94>
    9716:	6873      	ldr	r3, [r6, #4]
    9718:	2b00      	cmp	r3, #0
    971a:	f43f ae79 	beq.w	9410 <mbedtls_mpi_exp_mod+0x94>
    971e:	68b3      	ldr	r3, [r6, #8]
    9720:	681b      	ldr	r3, [r3, #0]
    9722:	f013 0f01 	tst.w	r3, #1
    9726:	f43f ae73 	beq.w	9410 <mbedtls_mpi_exp_mod+0x94>
        X->s = -1;
    972a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    972e:	603b      	str	r3, [r7, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    9730:	463a      	mov	r2, r7
    9732:	4629      	mov	r1, r5
    9734:	4638      	mov	r0, r7
    9736:	f7ff fb64 	bl	8e02 <mbedtls_mpi_add_mpi>
    973a:	4680      	mov	r8, r0
cleanup:
    973c:	e668      	b.n	9410 <mbedtls_mpi_exp_mod+0x94>
        mbedtls_mpi_free( &W[i] );
    973e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9742:	ab09      	add	r3, sp, #36	; 0x24
    9744:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9748:	f7ff f86d 	bl	8826 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    974c:	3501      	adds	r5, #1
    974e:	2301      	movs	r3, #1
    9750:	40a3      	lsls	r3, r4
    9752:	42ab      	cmp	r3, r5
    9754:	d8f3      	bhi.n	973e <mbedtls_mpi_exp_mod+0x3c2>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    9756:	a80c      	add	r0, sp, #48	; 0x30
    9758:	f7ff f865 	bl	8826 <mbedtls_mpi_free>
    975c:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    9760:	f7ff f861 	bl	8826 <mbedtls_mpi_free>
    9764:	a806      	add	r0, sp, #24
    9766:	f7ff f85e 	bl	8826 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    976a:	f8dd 3668 	ldr.w	r3, [sp, #1640]	; 0x668
    976e:	b133      	cbz	r3, 977e <mbedtls_mpi_exp_mod+0x402>
    9770:	689b      	ldr	r3, [r3, #8]
    9772:	b123      	cbz	r3, 977e <mbedtls_mpi_exp_mod+0x402>
        mbedtls_mpi_free( &RR );

    return( ret );
}
    9774:	4640      	mov	r0, r8
    9776:	f20d 6d44 	addw	sp, sp, #1604	; 0x644
    977a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_mpi_free( &RR );
    977e:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    9782:	f7ff f850 	bl	8826 <mbedtls_mpi_free>
    9786:	e7f5      	b.n	9774 <mbedtls_mpi_exp_mod+0x3f8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    9788:	f06f 0803 	mvn.w	r8, #3
    978c:	e7f2      	b.n	9774 <mbedtls_mpi_exp_mod+0x3f8>
    978e:	f06f 0803 	mvn.w	r8, #3
    9792:	e7ef      	b.n	9774 <mbedtls_mpi_exp_mod+0x3f8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    9794:	f06f 0803 	mvn.w	r8, #3
    9798:	e7ec      	b.n	9774 <mbedtls_mpi_exp_mod+0x3f8>

0000979a <platform_calloc_uninit>:
}
    979a:	2000      	movs	r0, #0
    979c:	4770      	bx	lr

0000979e <platform_free_uninit>:
}
    979e:	4770      	bx	lr

000097a0 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    97a0:	4770      	bx	lr

000097a2 <mbedtls_rsa_import>:
{
    97a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97a4:	4604      	mov	r4, r0
    97a6:	4615      	mov	r5, r2
    97a8:	461e      	mov	r6, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    97aa:	460f      	mov	r7, r1
    97ac:	b121      	cbz	r1, 97b8 <mbedtls_rsa_import+0x16>
    97ae:	3008      	adds	r0, #8
    97b0:	f7ff f874 	bl	889c <mbedtls_mpi_copy>
    97b4:	4601      	mov	r1, r0
    97b6:	bb48      	cbnz	r0, 980c <mbedtls_rsa_import+0x6a>
    97b8:	b135      	cbz	r5, 97c8 <mbedtls_rsa_import+0x26>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    97ba:	4629      	mov	r1, r5
    97bc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    97c0:	f7ff f86c 	bl	889c <mbedtls_mpi_copy>
    97c4:	4601      	mov	r1, r0
    97c6:	bb08      	cbnz	r0, 980c <mbedtls_rsa_import+0x6a>
    97c8:	b136      	cbz	r6, 97d8 <mbedtls_rsa_import+0x36>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    97ca:	4631      	mov	r1, r6
    97cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
    97d0:	f7ff f864 	bl	889c <mbedtls_mpi_copy>
    97d4:	4601      	mov	r1, r0
    97d6:	b9c8      	cbnz	r0, 980c <mbedtls_rsa_import+0x6a>
    97d8:	9b06      	ldr	r3, [sp, #24]
    97da:	b133      	cbz	r3, 97ea <mbedtls_rsa_import+0x48>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    97dc:	4619      	mov	r1, r3
    97de:	f104 0020 	add.w	r0, r4, #32
    97e2:	f7ff f85b 	bl	889c <mbedtls_mpi_copy>
    97e6:	4601      	mov	r1, r0
    97e8:	b980      	cbnz	r0, 980c <mbedtls_rsa_import+0x6a>
    97ea:	9b07      	ldr	r3, [sp, #28]
    97ec:	b133      	cbz	r3, 97fc <mbedtls_rsa_import+0x5a>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    97ee:	4619      	mov	r1, r3
    97f0:	f104 0014 	add.w	r0, r4, #20
    97f4:	f7ff f852 	bl	889c <mbedtls_mpi_copy>
    97f8:	4601      	mov	r1, r0
    97fa:	b938      	cbnz	r0, 980c <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    97fc:	b14f      	cbz	r7, 9812 <mbedtls_rsa_import+0x70>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    97fe:	f104 0008 	add.w	r0, r4, #8
    9802:	f7ff f8c3 	bl	898c <mbedtls_mpi_size>
    9806:	6060      	str	r0, [r4, #4]
    return( 0 );
    9808:	2000      	movs	r0, #0
    980a:	e001      	b.n	9810 <mbedtls_rsa_import+0x6e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    980c:	f5a1 4081 	sub.w	r0, r1, #16512	; 0x4080
}
    9810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
    9812:	2000      	movs	r0, #0
    9814:	e7fc      	b.n	9810 <mbedtls_rsa_import+0x6e>

00009816 <mbedtls_rsa_set_padding>:
    ctx->padding = padding;
    9816:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
    ctx->hash_id = hash_id;
    981a:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
    981e:	4770      	bx	lr

00009820 <mbedtls_rsa_init>:
{
    9820:	b570      	push	{r4, r5, r6, lr}
    9822:	4604      	mov	r4, r0
    9824:	460d      	mov	r5, r1
    9826:	4616      	mov	r6, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    9828:	22ac      	movs	r2, #172	; 0xac
    982a:	2100      	movs	r1, #0
    982c:	f7fe fabe 	bl	7dac <memset>
    mbedtls_rsa_set_padding( ctx, padding, hash_id );
    9830:	4632      	mov	r2, r6
    9832:	4629      	mov	r1, r5
    9834:	4620      	mov	r0, r4
    9836:	f7ff ffee 	bl	9816 <mbedtls_rsa_set_padding>
}
    983a:	bd70      	pop	{r4, r5, r6, pc}

0000983c <mbedtls_rsa_free>:
/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    if( ctx == NULL )
    983c:	b3a8      	cbz	r0, 98aa <mbedtls_rsa_free+0x6e>
{
    983e:	b510      	push	{r4, lr}
    9840:	4604      	mov	r4, r0
        return;

    mbedtls_mpi_free( &ctx->Vi );
    9842:	308c      	adds	r0, #140	; 0x8c
    9844:	f7fe ffef 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    9848:	f104 0098 	add.w	r0, r4, #152	; 0x98
    984c:	f7fe ffeb 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    9850:	f104 0068 	add.w	r0, r4, #104	; 0x68
    9854:	f7fe ffe7 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    9858:	f104 0020 	add.w	r0, r4, #32
    985c:	f7fe ffe3 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    9860:	f104 0038 	add.w	r0, r4, #56	; 0x38
    9864:	f7fe ffdf 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    9868:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    986c:	f7fe ffdb 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    9870:	f104 0014 	add.w	r0, r4, #20
    9874:	f7fe ffd7 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    9878:	f104 0008 	add.w	r0, r4, #8
    987c:	f7fe ffd3 	bl	8826 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    9880:	f104 0080 	add.w	r0, r4, #128	; 0x80
    9884:	f7fe ffcf 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    9888:	f104 0074 	add.w	r0, r4, #116	; 0x74
    988c:	f7fe ffcb 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    9890:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    9894:	f7fe ffc7 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    9898:	f104 0050 	add.w	r0, r4, #80	; 0x50
    989c:	f7fe ffc3 	bl	8826 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    98a0:	f104 0044 	add.w	r0, r4, #68	; 0x44
    98a4:	f7fe ffbf 	bl	8826 <mbedtls_mpi_free>
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
    98a8:	bd10      	pop	{r4, pc}
    98aa:	4770      	bx	lr

000098ac <mbedtls_sha256_init>:
{
    98ac:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    98ae:	226c      	movs	r2, #108	; 0x6c
    98b0:	2100      	movs	r1, #0
    98b2:	f7fe fa7b 	bl	7dac <memset>
}
    98b6:	bd08      	pop	{r3, pc}

000098b8 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    98b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    98bc:	b3da      	cbz	r2, 9936 <mbedtls_sha256_update_ret+0x7e>
    98be:	4606      	mov	r6, r0
    98c0:	460d      	mov	r5, r1
    98c2:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    98c4:	6803      	ldr	r3, [r0, #0]
    98c6:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    98ca:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    98ce:	4413      	add	r3, r2
    98d0:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    98d2:	4293      	cmp	r3, r2
    98d4:	d202      	bcs.n	98dc <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    98d6:	6843      	ldr	r3, [r0, #4]
    98d8:	3301      	adds	r3, #1
    98da:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    98dc:	b10f      	cbz	r7, 98e2 <mbedtls_sha256_update_ret+0x2a>
    98de:	4544      	cmp	r4, r8
    98e0:	d20a      	bcs.n	98f8 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    98e2:	2c3f      	cmp	r4, #63	; 0x3f
    98e4:	d91b      	bls.n	991e <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    98e6:	4629      	mov	r1, r5
    98e8:	4630      	mov	r0, r6
    98ea:	f7fb fb19 	bl	4f20 <mbedtls_internal_sha256_process>
    98ee:	4603      	mov	r3, r0
    98f0:	bb10      	cbnz	r0, 9938 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    98f2:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    98f4:	3c40      	subs	r4, #64	; 0x40
    98f6:	e7f4      	b.n	98e2 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    98f8:	f106 0928 	add.w	r9, r6, #40	; 0x28
    98fc:	4642      	mov	r2, r8
    98fe:	4629      	mov	r1, r5
    9900:	eb09 0007 	add.w	r0, r9, r7
    9904:	f7fe fa2e 	bl	7d64 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    9908:	4649      	mov	r1, r9
    990a:	4630      	mov	r0, r6
    990c:	f7fb fb08 	bl	4f20 <mbedtls_internal_sha256_process>
    9910:	4603      	mov	r3, r0
    9912:	b988      	cbnz	r0, 9938 <mbedtls_sha256_update_ret+0x80>
        input += fill;
    9914:	4445      	add	r5, r8
        ilen  -= fill;
    9916:	3f40      	subs	r7, #64	; 0x40
    9918:	443c      	add	r4, r7
        left = 0;
    991a:	2700      	movs	r7, #0
    991c:	e7e1      	b.n	98e2 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    991e:	b90c      	cbnz	r4, 9924 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    9920:	2300      	movs	r3, #0
    9922:	e009      	b.n	9938 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    9924:	f106 0028 	add.w	r0, r6, #40	; 0x28
    9928:	4622      	mov	r2, r4
    992a:	4629      	mov	r1, r5
    992c:	4438      	add	r0, r7
    992e:	f7fe fa19 	bl	7d64 <memcpy>
    return( 0 );
    9932:	2300      	movs	r3, #0
    9934:	e000      	b.n	9938 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    9936:	2300      	movs	r3, #0
}
    9938:	4618      	mov	r0, r3
    993a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000993e <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    993e:	b570      	push	{r4, r5, r6, lr}
    9940:	4604      	mov	r4, r0
    9942:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    9944:	6803      	ldr	r3, [r0, #0]
    9946:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    994a:	1c58      	adds	r0, r3, #1
    994c:	4423      	add	r3, r4
    994e:	2280      	movs	r2, #128	; 0x80
    9950:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    9954:	2838      	cmp	r0, #56	; 0x38
    9956:	d87c      	bhi.n	9a52 <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    9958:	f104 0328 	add.w	r3, r4, #40	; 0x28
    995c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    9960:	2100      	movs	r1, #0
    9962:	4418      	add	r0, r3
    9964:	f7fe fa22 	bl	7dac <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    9968:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    996a:	6863      	ldr	r3, [r4, #4]
    996c:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    996e:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    9972:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    9974:	0e1e      	lsrs	r6, r3, #24
    9976:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    997a:	f3c3 4607 	ubfx	r6, r3, #16, #8
    997e:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    9982:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9986:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    998a:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    998e:	f3c2 5347 	ubfx	r3, r2, #21, #8
    9992:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    9996:	f3c2 3347 	ubfx	r3, r2, #13, #8
    999a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    999e:	f3c2 1247 	ubfx	r2, r2, #5, #8
    99a2:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    99a6:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    99aa:	f104 0128 	add.w	r1, r4, #40	; 0x28
    99ae:	4620      	mov	r0, r4
    99b0:	f7fb fab6 	bl	4f20 <mbedtls_internal_sha256_process>
    99b4:	4603      	mov	r3, r0
    99b6:	2800      	cmp	r0, #0
    99b8:	d159      	bne.n	9a6e <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    99ba:	7ae2      	ldrb	r2, [r4, #11]
    99bc:	702a      	strb	r2, [r5, #0]
    99be:	7aa2      	ldrb	r2, [r4, #10]
    99c0:	706a      	strb	r2, [r5, #1]
    99c2:	7a62      	ldrb	r2, [r4, #9]
    99c4:	70aa      	strb	r2, [r5, #2]
    99c6:	7a22      	ldrb	r2, [r4, #8]
    99c8:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    99ca:	7be2      	ldrb	r2, [r4, #15]
    99cc:	712a      	strb	r2, [r5, #4]
    99ce:	7ba2      	ldrb	r2, [r4, #14]
    99d0:	716a      	strb	r2, [r5, #5]
    99d2:	7b62      	ldrb	r2, [r4, #13]
    99d4:	71aa      	strb	r2, [r5, #6]
    99d6:	7b22      	ldrb	r2, [r4, #12]
    99d8:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    99da:	7ce2      	ldrb	r2, [r4, #19]
    99dc:	722a      	strb	r2, [r5, #8]
    99de:	7ca2      	ldrb	r2, [r4, #18]
    99e0:	726a      	strb	r2, [r5, #9]
    99e2:	7c62      	ldrb	r2, [r4, #17]
    99e4:	72aa      	strb	r2, [r5, #10]
    99e6:	7c22      	ldrb	r2, [r4, #16]
    99e8:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    99ea:	7de2      	ldrb	r2, [r4, #23]
    99ec:	732a      	strb	r2, [r5, #12]
    99ee:	7da2      	ldrb	r2, [r4, #22]
    99f0:	736a      	strb	r2, [r5, #13]
    99f2:	7d62      	ldrb	r2, [r4, #21]
    99f4:	73aa      	strb	r2, [r5, #14]
    99f6:	7d22      	ldrb	r2, [r4, #20]
    99f8:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    99fa:	7ee2      	ldrb	r2, [r4, #27]
    99fc:	742a      	strb	r2, [r5, #16]
    99fe:	7ea2      	ldrb	r2, [r4, #26]
    9a00:	746a      	strb	r2, [r5, #17]
    9a02:	7e62      	ldrb	r2, [r4, #25]
    9a04:	74aa      	strb	r2, [r5, #18]
    9a06:	7e22      	ldrb	r2, [r4, #24]
    9a08:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    9a0a:	7fe2      	ldrb	r2, [r4, #31]
    9a0c:	752a      	strb	r2, [r5, #20]
    9a0e:	7fa2      	ldrb	r2, [r4, #30]
    9a10:	756a      	strb	r2, [r5, #21]
    9a12:	7f62      	ldrb	r2, [r4, #29]
    9a14:	75aa      	strb	r2, [r5, #22]
    9a16:	7f22      	ldrb	r2, [r4, #28]
    9a18:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    9a1a:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    9a1e:	762a      	strb	r2, [r5, #24]
    9a20:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    9a24:	766a      	strb	r2, [r5, #25]
    9a26:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    9a2a:	76aa      	strb	r2, [r5, #26]
    9a2c:	f894 2020 	ldrb.w	r2, [r4, #32]
    9a30:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    9a32:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    9a34:	b9da      	cbnz	r2, 9a6e <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    9a36:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    9a3a:	772b      	strb	r3, [r5, #28]
    9a3c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    9a40:	776b      	strb	r3, [r5, #29]
    9a42:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    9a46:	77ab      	strb	r3, [r5, #30]
    9a48:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    9a4c:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    9a4e:	4613      	mov	r3, r2
    9a50:	e00d      	b.n	9a6e <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
    9a52:	f104 0628 	add.w	r6, r4, #40	; 0x28
    9a56:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    9a5a:	2100      	movs	r1, #0
    9a5c:	4430      	add	r0, r6
    9a5e:	f7fe f9a5 	bl	7dac <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    9a62:	4631      	mov	r1, r6
    9a64:	4620      	mov	r0, r4
    9a66:	f7fb fa5b 	bl	4f20 <mbedtls_internal_sha256_process>
    9a6a:	4603      	mov	r3, r0
    9a6c:	b108      	cbz	r0, 9a72 <mbedtls_sha256_finish_ret+0x134>
}
    9a6e:	4618      	mov	r0, r3
    9a70:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    9a72:	2238      	movs	r2, #56	; 0x38
    9a74:	2100      	movs	r1, #0
    9a76:	4630      	mov	r0, r6
    9a78:	f7fe f998 	bl	7dac <memset>
    9a7c:	e774      	b.n	9968 <mbedtls_sha256_finish_ret+0x2a>

00009a7e <arch_system_halt>:
	__asm__ volatile(
    9a7e:	f04f 0220 	mov.w	r2, #32
    9a82:	f3ef 8311 	mrs	r3, BASEPRI
    9a86:	f382 8811 	msr	BASEPRI, r2
    9a8a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    9a8e:	e7fe      	b.n	9a8e <arch_system_halt+0x10>

00009a90 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    9a90:	b510      	push	{r4, lr}
    9a92:	4604      	mov	r4, r0
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    9a94:	f7f8 fcf4 	bl	2480 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    9a98:	4620      	mov	r0, r4
    9a9a:	f7ff fff0 	bl	9a7e <arch_system_halt>

00009a9e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    9a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9aa0:	4605      	mov	r5, r0
    9aa2:	460e      	mov	r6, r1
    9aa4:	f04f 0320 	mov.w	r3, #32
    9aa8:	f3ef 8711 	mrs	r7, BASEPRI
    9aac:	f383 8811 	msr	BASEPRI, r3
    9ab0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    9ab4:	f7fc fa48 	bl	5f48 <z_impl_k_current_get>
    9ab8:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    9aba:	4631      	mov	r1, r6
    9abc:	4628      	mov	r0, r5
    9abe:	f7ff ffe7 	bl	9a90 <k_sys_fatal_error_handler>
	__asm__ volatile(
    9ac2:	f387 8811 	msr	BASEPRI, r7
    9ac6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    9aca:	4620      	mov	r0, r4
    9acc:	f7f9 fd62 	bl	3594 <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    9ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009ad2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9ad2:	68c2      	ldr	r2, [r0, #12]
    9ad4:	6903      	ldr	r3, [r0, #16]
    9ad6:	431a      	orrs	r2, r3
    9ad8:	f012 0203 	ands.w	r2, r2, #3
    9adc:	d10d      	bne.n	9afa <create_free_list+0x28>
	slab->free_list = NULL;
    9ade:	2100      	movs	r1, #0
    9ae0:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    9ae2:	e005      	b.n	9af0 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    9ae4:	6941      	ldr	r1, [r0, #20]
    9ae6:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    9ae8:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    9aea:	68c1      	ldr	r1, [r0, #12]
    9aec:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    9aee:	3201      	adds	r2, #1
    9af0:	6881      	ldr	r1, [r0, #8]
    9af2:	4291      	cmp	r1, r2
    9af4:	d8f6      	bhi.n	9ae4 <create_free_list+0x12>
	return 0;
    9af6:	2000      	movs	r0, #0
    9af8:	4770      	bx	lr
		return -EINVAL;
    9afa:	f06f 0015 	mvn.w	r0, #21
}
    9afe:	4770      	bx	lr

00009b00 <k_mem_slab_init>:
{
    9b00:	b510      	push	{r4, lr}
    9b02:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    9b04:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    9b06:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    9b08:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    9b0a:	2300      	movs	r3, #0
    9b0c:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    9b0e:	f7ff ffe0 	bl	9ad2 <create_free_list>
	if (rc < 0) {
    9b12:	2800      	cmp	r0, #0
    9b14:	db01      	blt.n	9b1a <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    9b16:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    9b18:	6064      	str	r4, [r4, #4]
}
    9b1a:	bd10      	pop	{r4, pc}

00009b1c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    9b1c:	4288      	cmp	r0, r1
    9b1e:	da00      	bge.n	9b22 <new_prio_for_inheritance+0x6>
    9b20:	4601      	mov	r1, r0
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    9b22:	2900      	cmp	r1, #0
    9b24:	db01      	blt.n	9b2a <new_prio_for_inheritance+0xe>
    9b26:	4608      	mov	r0, r1
    9b28:	4770      	bx	lr
    9b2a:	2000      	movs	r0, #0
}
    9b2c:	4770      	bx	lr

00009b2e <adjust_owner_prio>:
{
    9b2e:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    9b30:	6880      	ldr	r0, [r0, #8]
    9b32:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9b36:	428b      	cmp	r3, r1
    9b38:	d101      	bne.n	9b3e <adjust_owner_prio+0x10>
	return false;
    9b3a:	2000      	movs	r0, #0
}
    9b3c:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    9b3e:	f7fc f97f 	bl	5e40 <z_set_prio>
    9b42:	e7fb      	b.n	9b3c <adjust_owner_prio+0xe>

00009b44 <z_impl_k_mutex_init>:
{
    9b44:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9b46:	2000      	movs	r0, #0
    9b48:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    9b4a:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    9b4c:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    9b4e:	605b      	str	r3, [r3, #4]
}
    9b50:	4770      	bx	lr

00009b52 <pended_on>:
}
    9b52:	6880      	ldr	r0, [r0, #8]
    9b54:	4770      	bx	lr

00009b56 <z_tick_sleep>:
}
    9b56:	2000      	movs	r0, #0
    9b58:	4770      	bx	lr

00009b5a <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
    9b5a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    9b5e:	f991 300e 	ldrsb.w	r3, [r1, #14]
    9b62:	429a      	cmp	r2, r3
    9b64:	db01      	blt.n	9b6a <z_is_t1_higher_prio_than_t2+0x10>
	return false;
    9b66:	2000      	movs	r0, #0
    9b68:	4770      	bx	lr
		return true;
    9b6a:	2001      	movs	r0, #1
}
    9b6c:	4770      	bx	lr

00009b6e <z_reschedule_irqlock>:
{
    9b6e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9b70:	4603      	mov	r3, r0
    9b72:	b928      	cbnz	r0, 9b80 <z_reschedule_irqlock+0x12>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9b74:	f3ef 8205 	mrs	r2, IPSR
    9b78:	b912      	cbnz	r2, 9b80 <z_reschedule_irqlock+0x12>
    9b7a:	f7f9 faff 	bl	317c <arch_swap>
	return ret;
    9b7e:	e003      	b.n	9b88 <z_reschedule_irqlock+0x1a>
    9b80:	f383 8811 	msr	BASEPRI, r3
    9b84:	f3bf 8f6f 	isb	sy
}
    9b88:	bd08      	pop	{r3, pc}

00009b8a <k_sched_unlock>:
}
    9b8a:	4770      	bx	lr

00009b8c <z_priq_dumb_best>:
{
    9b8c:	4603      	mov	r3, r0
	return list->head == list;
    9b8e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9b90:	4283      	cmp	r3, r0
    9b92:	d000      	beq.n	9b96 <z_priq_dumb_best+0xa>
}
    9b94:	4770      	bx	lr
	struct k_thread *thread = NULL;
    9b96:	2000      	movs	r0, #0
	return thread;
    9b98:	e7fc      	b.n	9b94 <z_priq_dumb_best+0x8>

00009b9a <z_ready_thread>:
{
    9b9a:	b538      	push	{r3, r4, r5, lr}
    9b9c:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    9b9e:	2300      	movs	r3, #0
	__asm__ volatile(
    9ba0:	f04f 0220 	mov.w	r2, #32
    9ba4:	f3ef 8411 	mrs	r4, BASEPRI
    9ba8:	f382 8811 	msr	BASEPRI, r2
    9bac:	f3bf 8f6f 	isb	sy
    9bb0:	b943      	cbnz	r3, 9bc4 <z_ready_thread+0x2a>
		ready_thread(thread);
    9bb2:	4628      	mov	r0, r5
    9bb4:	f7fc f80e 	bl	5bd4 <ready_thread>
	__asm__ volatile(
    9bb8:	f384 8811 	msr	BASEPRI, r4
    9bbc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9bc0:	2301      	movs	r3, #1
    9bc2:	e7f5      	b.n	9bb0 <z_ready_thread+0x16>
}
    9bc4:	bd38      	pop	{r3, r4, r5, pc}

00009bc6 <z_thread_timeout>:
{
    9bc6:	b570      	push	{r4, r5, r6, lr}
    9bc8:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    9bca:	2300      	movs	r3, #0
	__asm__ volatile(
    9bcc:	f04f 0220 	mov.w	r2, #32
    9bd0:	f3ef 8611 	mrs	r6, BASEPRI
    9bd4:	f382 8811 	msr	BASEPRI, r2
    9bd8:	f3bf 8f6f 	isb	sy
    9bdc:	e019      	b.n	9c12 <z_thread_timeout+0x4c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    9bde:	4620      	mov	r0, r4
    9be0:	f7ff ffb7 	bl	9b52 <pended_on>
    9be4:	4621      	mov	r1, r4
    9be6:	f7fb ffb3 	bl	5b50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9bea:	7b63      	ldrb	r3, [r4, #13]
    9bec:	f023 0302 	bic.w	r3, r3, #2
    9bf0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9bf2:	2300      	movs	r3, #0
    9bf4:	60a3      	str	r3, [r4, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9bf6:	f815 3c0b 	ldrb.w	r3, [r5, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    9bfa:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    9bfe:	f805 3c0b 	strb.w	r3, [r5, #-11]
		ready_thread(thread);
    9c02:	4620      	mov	r0, r4
    9c04:	f7fb ffe6 	bl	5bd4 <ready_thread>
	__asm__ volatile(
    9c08:	f386 8811 	msr	BASEPRI, r6
    9c0c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9c10:	2301      	movs	r3, #1
    9c12:	b933      	cbnz	r3, 9c22 <z_thread_timeout+0x5c>
		struct k_thread *thread = CONTAINER_OF(timeout,
    9c14:	f1a5 0418 	sub.w	r4, r5, #24
		if (thread->base.pended_on != NULL) {
    9c18:	f855 3c10 	ldr.w	r3, [r5, #-16]
    9c1c:	2b00      	cmp	r3, #0
    9c1e:	d1de      	bne.n	9bde <z_thread_timeout+0x18>
    9c20:	e7e9      	b.n	9bf6 <z_thread_timeout+0x30>
}
    9c22:	bd70      	pop	{r4, r5, r6, pc}

00009c24 <add_to_waitq_locked>:
{
    9c24:	b570      	push	{r4, r5, r6, lr}
    9c26:	4605      	mov	r5, r0
    9c28:	460e      	mov	r6, r1
	unready_thread(thread);
    9c2a:	f7fc f8dd 	bl	5de8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    9c2e:	7b6b      	ldrb	r3, [r5, #13]
    9c30:	f043 0302 	orr.w	r3, r3, #2
    9c34:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    9c36:	b1ae      	cbz	r6, 9c64 <add_to_waitq_locked+0x40>
		thread->base.pended_on = wait_q;
    9c38:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    9c3a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c3c:	42a6      	cmp	r6, r4
    9c3e:	d019      	beq.n	9c74 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9c40:	b15c      	cbz	r4, 9c5a <add_to_waitq_locked+0x36>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    9c42:	4621      	mov	r1, r4
    9c44:	4628      	mov	r0, r5
    9c46:	f7ff ff88 	bl	9b5a <z_is_t1_higher_prio_than_t2>
    9c4a:	b960      	cbnz	r0, 9c66 <add_to_waitq_locked+0x42>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9c4c:	b12c      	cbz	r4, 9c5a <add_to_waitq_locked+0x36>
	return (node == list->tail) ? NULL : node->next;
    9c4e:	6873      	ldr	r3, [r6, #4]
    9c50:	429c      	cmp	r4, r3
    9c52:	d002      	beq.n	9c5a <add_to_waitq_locked+0x36>
    9c54:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9c56:	2c00      	cmp	r4, #0
    9c58:	d1f2      	bne.n	9c40 <add_to_waitq_locked+0x1c>
	node->next = list;
    9c5a:	602e      	str	r6, [r5, #0]
	node->prev = list->tail;
    9c5c:	6873      	ldr	r3, [r6, #4]
    9c5e:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
    9c60:	601d      	str	r5, [r3, #0]
	list->tail = node;
    9c62:	6075      	str	r5, [r6, #4]
}
    9c64:	bd70      	pop	{r4, r5, r6, pc}
	node->prev = successor->prev;
    9c66:	6863      	ldr	r3, [r4, #4]
    9c68:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9c6a:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    9c6c:	6863      	ldr	r3, [r4, #4]
    9c6e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9c70:	6065      	str	r5, [r4, #4]
}
    9c72:	e7f7      	b.n	9c64 <add_to_waitq_locked+0x40>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9c74:	2400      	movs	r4, #0
    9c76:	e7e3      	b.n	9c40 <add_to_waitq_locked+0x1c>

00009c78 <pend>:
{
    9c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9c7c:	4605      	mov	r5, r0
    9c7e:	460f      	mov	r7, r1
    9c80:	4691      	mov	r9, r2
    9c82:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    9c84:	2400      	movs	r4, #0
	__asm__ volatile(
    9c86:	f04f 0320 	mov.w	r3, #32
    9c8a:	f3ef 8611 	mrs	r6, BASEPRI
    9c8e:	f383 8811 	msr	BASEPRI, r3
    9c92:	f3bf 8f6f 	isb	sy
    9c96:	b94c      	cbnz	r4, 9cac <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    9c98:	4639      	mov	r1, r7
    9c9a:	4628      	mov	r0, r5
    9c9c:	f7ff ffc2 	bl	9c24 <add_to_waitq_locked>
	__asm__ volatile(
    9ca0:	f386 8811 	msr	BASEPRI, r6
    9ca4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9ca8:	2401      	movs	r4, #1
    9caa:	e7f4      	b.n	9c96 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    9cac:	464a      	mov	r2, r9
    9cae:	4643      	mov	r3, r8
    9cb0:	4628      	mov	r0, r5
    9cb2:	f7fb ff23 	bl	5afc <add_thread_timeout>
}
    9cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009cba <z_unpend_first_thread>:
{
    9cba:	b570      	push	{r4, r5, r6, lr}
    9cbc:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    9cbe:	2300      	movs	r3, #0
	__asm__ volatile(
    9cc0:	f04f 0220 	mov.w	r2, #32
    9cc4:	f3ef 8511 	mrs	r5, BASEPRI
    9cc8:	f382 8811 	msr	BASEPRI, r2
    9ccc:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
    9cd0:	461c      	mov	r4, r3
	LOCKED(&sched_spinlock) {
    9cd2:	b94b      	cbnz	r3, 9ce8 <z_unpend_first_thread+0x2e>
		ret = _priq_wait_best(&wait_q->waitq);
    9cd4:	4630      	mov	r0, r6
    9cd6:	f7ff ff59 	bl	9b8c <z_priq_dumb_best>
    9cda:	4604      	mov	r4, r0
	__asm__ volatile(
    9cdc:	f385 8811 	msr	BASEPRI, r5
    9ce0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9ce4:	2301      	movs	r3, #1
    9ce6:	e7f4      	b.n	9cd2 <z_unpend_first_thread+0x18>

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    9ce8:	b1dc      	cbz	r4, 9d22 <z_unpend_first_thread+0x68>
	LOCKED(&sched_spinlock) {
    9cea:	2300      	movs	r3, #0
	__asm__ volatile(
    9cec:	f04f 0220 	mov.w	r2, #32
    9cf0:	f3ef 8511 	mrs	r5, BASEPRI
    9cf4:	f382 8811 	msr	BASEPRI, r2
    9cf8:	f3bf 8f6f 	isb	sy
    9cfc:	b98b      	cbnz	r3, 9d22 <z_unpend_first_thread+0x68>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    9cfe:	4620      	mov	r0, r4
    9d00:	f7ff ff27 	bl	9b52 <pended_on>
    9d04:	4621      	mov	r1, r4
    9d06:	f7fb ff23 	bl	5b50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9d0a:	7b63      	ldrb	r3, [r4, #13]
    9d0c:	f023 0302 	bic.w	r3, r3, #2
    9d10:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9d12:	2300      	movs	r3, #0
    9d14:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    9d16:	f385 8811 	msr	BASEPRI, r5
    9d1a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9d1e:	2301      	movs	r3, #1
    9d20:	e7ec      	b.n	9cfc <z_unpend_first_thread+0x42>
	if (thread != NULL) {
    9d22:	b11c      	cbz	r4, 9d2c <z_unpend_first_thread+0x72>
    9d24:	f104 0018 	add.w	r0, r4, #24
    9d28:	f000 f844 	bl	9db4 <z_abort_timeout>
}
    9d2c:	4620      	mov	r0, r4
    9d2e:	bd70      	pop	{r4, r5, r6, pc}

00009d30 <k_is_in_isr>:
    9d30:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    9d34:	3800      	subs	r0, #0
    9d36:	bf18      	it	ne
    9d38:	2001      	movne	r0, #1
    9d3a:	4770      	bx	lr

00009d3c <z_impl_k_busy_wait>:
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	if (usec_to_wait == 0) {
    9d3c:	b900      	cbnz	r0, 9d40 <z_impl_k_busy_wait+0x4>
    9d3e:	4770      	bx	lr
{
    9d40:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    9d42:	f7f8 faf5 	bl	2330 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
    9d46:	bd08      	pop	{r3, pc}

00009d48 <remove_timeout>:
{
    9d48:	b538      	push	{r3, r4, r5, lr}
    9d4a:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    9d4c:	f7fc f942 	bl	5fd4 <next>
    9d50:	b148      	cbz	r0, 9d66 <remove_timeout+0x1e>
    9d52:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    9d54:	6920      	ldr	r0, [r4, #16]
    9d56:	6965      	ldr	r5, [r4, #20]
    9d58:	6913      	ldr	r3, [r2, #16]
    9d5a:	6951      	ldr	r1, [r2, #20]
    9d5c:	181b      	adds	r3, r3, r0
    9d5e:	eb45 0101 	adc.w	r1, r5, r1
    9d62:	6113      	str	r3, [r2, #16]
    9d64:	6151      	str	r1, [r2, #20]
	node->prev->next = node->next;
    9d66:	6862      	ldr	r2, [r4, #4]
    9d68:	6823      	ldr	r3, [r4, #0]
    9d6a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    9d6c:	6862      	ldr	r2, [r4, #4]
    9d6e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9d70:	2300      	movs	r3, #0
    9d72:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    9d74:	6063      	str	r3, [r4, #4]
}
    9d76:	bd38      	pop	{r3, r4, r5, pc}

00009d78 <next_timeout>:
{
    9d78:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    9d7a:	f7fc f921 	bl	5fc0 <first>
    9d7e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    9d80:	f7fc f934 	bl	5fec <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    9d84:	b18c      	cbz	r4, 9daa <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    9d86:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    9d8a:	1a12      	subs	r2, r2, r0
    9d8c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    9d90:	2a01      	cmp	r2, #1
    9d92:	f173 0100 	sbcs.w	r1, r3, #0
    9d96:	db0b      	blt.n	9db0 <next_timeout+0x38>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    9d98:	4610      	mov	r0, r2
    9d9a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    9d9e:	f173 0300 	sbcs.w	r3, r3, #0
    9da2:	db06      	blt.n	9db2 <next_timeout+0x3a>
    9da4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9da8:	e003      	b.n	9db2 <next_timeout+0x3a>
	int32_t ret = to == NULL ? MAX_WAIT
    9daa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9dae:	e000      	b.n	9db2 <next_timeout+0x3a>
    9db0:	2000      	movs	r0, #0
}
    9db2:	bd10      	pop	{r4, pc}

00009db4 <z_abort_timeout>:
{
    9db4:	b570      	push	{r4, r5, r6, lr}
    9db6:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    9db8:	2300      	movs	r3, #0
	__asm__ volatile(
    9dba:	f04f 0220 	mov.w	r2, #32
    9dbe:	f3ef 8611 	mrs	r6, BASEPRI
    9dc2:	f382 8811 	msr	BASEPRI, r2
    9dc6:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    9dca:	f06f 0015 	mvn.w	r0, #21
    9dce:	e008      	b.n	9de2 <z_abort_timeout+0x2e>
			remove_timeout(to);
    9dd0:	4620      	mov	r0, r4
    9dd2:	f7ff ffb9 	bl	9d48 <remove_timeout>
			ret = 0;
    9dd6:	4628      	mov	r0, r5
	__asm__ volatile(
    9dd8:	f386 8811 	msr	BASEPRI, r6
    9ddc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9de0:	2301      	movs	r3, #1
    9de2:	461d      	mov	r5, r3
    9de4:	b91b      	cbnz	r3, 9dee <z_abort_timeout+0x3a>
	return node->next != NULL;
    9de6:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    9de8:	2b00      	cmp	r3, #0
    9dea:	d1f1      	bne.n	9dd0 <z_abort_timeout+0x1c>
    9dec:	e7f4      	b.n	9dd8 <z_abort_timeout+0x24>
}
    9dee:	bd70      	pop	{r4, r5, r6, pc}

00009df0 <k_heap_init>:
{
    9df0:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
    9df2:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    9df6:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    9df8:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    9dfa:	f7fd fae2 	bl	73c2 <sys_heap_init>
}
    9dfe:	bd10      	pop	{r4, pc}

00009e00 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    9e00:	4770      	bx	lr
